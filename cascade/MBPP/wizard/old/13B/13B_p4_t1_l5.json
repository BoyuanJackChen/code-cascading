[
    {
        "number": 1,
        "prompt": "Write a function to find the minimum cost path to reach (m, n) from (0, 0) for the given cost matrix cost[][] and a position (m, n) in cost[][].\ndef min_cost(cost, m, n): \n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    if m < 0 or n < 0: \n        return float('inf') \n    elif m == 0 and n == 0: \n        return cost[0][0] \n    else: \n        return cost[m][n] + min(min_cost(cost, m-1, n), min_cost(cost, m, n-1), min_cost(cost, m-1, n-1))\n\ndef min_path_cost(cost, m, n): \n    return min_cost(cost, m-1, n-1) ",
        "generated_testcode": "assert min_cost([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 2, 2) == 11\n",
        "test": "assert min_cost([[1, 2, 3], [4, 8, 2], [1, 5, 3]], 2, 2) == 8\nassert min_cost([[2, 3, 4], [5, 9, 3], [2, 6, 4]], 2, 2) == 12\nassert min_cost([[3, 4, 5], [6, 10, 4], [3, 7, 5]], 2, 2) == 16",
        "canonical_solution": "R = 3\r\nC = 3\r\ndef min_cost(cost, m, n): \r\n\ttc = [[0 for x in range(C)] for x in range(R)] \r\n\ttc[0][0] = cost[0][0] \r\n\tfor i in range(1, m+1): \r\n\t\ttc[i][0] = tc[i-1][0] + cost[i][0] \r\n\tfor j in range(1, n+1): \r\n\t\ttc[0][j] = tc[0][j-1] + cost[0][j] \r\n\tfor i in range(1, m+1): \r\n\t\tfor j in range(1, n+1): \r\n\t\t\ttc[i][j] = min(tc[i-1][j-1], tc[i-1][j], tc[i][j-1]) + cost[i][j] \r\n\treturn tc[m][n]"
    },
    {
        "number": 2,
        "prompt": "Write a function to find the similar elements from the given two tuple lists.\ndef similar_elements(test_tup1, test_tup2):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    similar_list = []\n    for i in test_tup1:\n        if i in test_tup2:\n            similar_list.append(i)\n    return similar_list\n\n# Example usage:\ntest_tup1 = (1, 2, 3, 4, 5, 6, 7)\ntest_tup2 = (3, 4, 6, 8, 9, 10)\nprint(similar_elements(test_tup1, test_tup2)) # Output: [3, 4, 6]\n\ntest_tup1 = (1, 2, 3, 4, 5, 6, 7)\ntest_tup2 = (8, 9, 10, 11, 12)\nprint(similar_elements(test_tup1, test_tup2)) # Output: []\n\ntest_tup1 = (1, 2, 3, 4, 5, 6, 7)\ntest_tup2 = (1, 2, 3, 4, 5, 6, 7)\nprint(similar_elements(test_tup1, test_tup2)) # Output: [1, 2, 3, 4, 5, 6, 7]\n\n# Test the function with different inputs\ntest_tup1 = (1, 2, 3, 4, 5, 6, 7)\n",
        "generated_testcode": "assert similar_elements((1, 2, 3, 4, 5, 6), (2, 4, 6, 8, 10)) == (2, 4, 6)\n",
        "test": "assert similar_elements((3, 4, 5, 6),(5, 7, 4, 10)) == (4, 5)\nassert similar_elements((1, 2, 3, 4),(5, 4, 3, 7)) == (3, 4)\nassert similar_elements((11, 12, 14, 13),(17, 15, 14, 13)) == (13, 14)",
        "canonical_solution": "def similar_elements(test_tup1, test_tup2):\r\n  res = tuple(set(test_tup1) & set(test_tup2))\r\n  return (res) "
    },
    {
        "number": 3,
        "prompt": "Write a python function to identify non-prime numbers.\ndef is_not_prime(n):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    if n < 2:\n        return True\n    for i in range(2, n):\n        if n % i == 0:\n            return True\n    return False\n\n# Test the function\nprint(is_not_prime(7)) # False\nprint(is_not_prime(8)) # True\nprint(is_not_prime(9)) # True\nprint(is_not_prime(10)) # True\nprint(is_not_prime(11)) # False\n\n# Write a function to find the sum of the digits of a number\ndef sum_of_digits(n):\n    total = 0\n    while n > 0:\n        total += n % 10\n        n //= 10\n    return total\n\n# Test the function\nprint(sum_of_digits(123)) # 6\nprint(sum_of_digits(456)) # 15\nprint(sum_of_digits(789)) # 24\n\n# Write a function to check if a number is a palindrome (reads the same backwards and forwards)\ndef is_palindrome(n):\n    s = str(n)\n    return s == s[::-1]\n\n# Test the function\nprint(is_palindrome(12321)) # True\nprint(is_palindrome(123456)) # False\nprint(is_palindrome(9889)) # True\n\n# Write",
        "generated_testcode": "assert is_not_prime(10) == True\n",
        "test": "assert is_not_prime(2) == False\nassert is_not_prime(10) == True\nassert is_not_prime(35) == True",
        "canonical_solution": "import math\r\ndef is_not_prime(n):\r\n    result = False\r\n    for i in range(2,int(math.sqrt(n)) + 1):\r\n        if n % i == 0:\r\n            result = True\r\n    return result"
    },
    {
        "number": 4,
        "prompt": "Write a function to find the largest integers from a given list of numbers using heap queue algorithm.\ndef heap_queue_largest(nums,n):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    heapq.heapify(nums)\n    largest_integers = []\n    for i in range(n):\n        largest_integers.append(heapq.heappop(nums))\n    return largest_integers\n\n# Example usage:\nnums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nn = 3\nprint(heap_queue_largest(nums, n))  # Output: [9, 8, 7]\n\nnums = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]\nn = 5\nprint(heap_queue_largest(nums, n))  # Output: [100, 90, 80, 70, 60]\n\nnums = [5, 4, 3, 2, 1]\nn = 4\nprint(heap_queue_largest(nums, n))  # Output: [5, 4, 3, 2] \n\n# This function should return the largest n numbers in the list nums as a sorted list in descending order. If the list has less than n elements, \n# return the entire list sorted in descending order.\n\n# Time Complexity: O(nlogn)\n# Space Complexity: O(1)",
        "generated_testcode": "assert heap_queue_largest([1,2,3,4,5,6,7,8,9],3) == [9,8,7]\n",
        "test": "assert heap_queue_largest( [25, 35, 22, 85, 14, 65, 75, 22, 58],3)==[85, 75, 65] \nassert heap_queue_largest( [25, 35, 22, 85, 14, 65, 75, 22, 58],2)==[85, 75] \nassert heap_queue_largest( [25, 35, 22, 85, 14, 65, 75, 22, 58],5)==[85, 75, 65, 58, 35]",
        "canonical_solution": "import heapq as hq\r\ndef heap_queue_largest(nums,n):\r\n  largest_nums = hq.nlargest(n, nums)\r\n  return largest_nums"
    },
    {
        "number": 5,
        "prompt": "Write a function to find the number of ways to fill it with 2 x 1 dominoes for the given 3 x n board.\ndef count_ways(n): \n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    dp = [0] * (n + 1)\n    dp[0] = 1\n    dp[1] = 1\n    dp[2] = 1\n    for i in range(3, n+1):\n        dp[i] = dp[i-1] + dp[i-2]\n    return dp[n]\n\n# Test the function\nprint(count_ways(3))  # Output: 2\nprint(count_ways(4))  # Output: 3\nprint(count_ways(5))  # Output: 5\nprint(count_ways(6))  # Output: 11\n",
        "generated_testcode": "assert count_ways(3) == 1\n",
        "test": "assert count_ways(2) == 3\nassert count_ways(8) == 153\nassert count_ways(12) == 2131",
        "canonical_solution": "def count_ways(n): \r\n\tA = [0] * (n + 1) \r\n\tB = [0] * (n + 1) \r\n\tA[0] = 1\r\n\tA[1] = 0\r\n\tB[0] = 0\r\n\tB[1] = 1\r\n\tfor i in range(2, n+1): \r\n\t\tA[i] = A[i - 2] + 2 * B[i - 1] \r\n\t\tB[i] = A[i - 1] + B[i - 2] \r\n\treturn A[n] "
    },
    {
        "number": 6,
        "prompt": "Write a python function to check whether the two numbers differ at one bit position only or not.\ndef is_Power_Of_Two (x): \n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    if x == 0: \n        return False\n    while x != 1: \n        if x & 1 != 1: \n            return False\n        x = x >> 1\n    return True\n  \ndef differ_by_one(a, b): \n    return (a ^ b) == 1\n\ndef differ_by_one_bit(a, b): \n    return is_Power_Of_Two(a ^ b)\n\ndef differ_by_one_bit_or_not(a, b): \n    return differ_by_one(a, b) or differ_by_one(a ^ (a & -a), b ^ (b & -b) ^ (a & -a))\n\na = 10\nb = 11\nprint(differ_by_one_bit_or_not(a, b)) ",
        "generated_testcode": "assert is_Power_Of_Two(10) == True\n",
        "test": "assert differ_At_One_Bit_Pos(13,9) == True\nassert differ_At_One_Bit_Pos(15,8) == False\nassert differ_At_One_Bit_Pos(2,4) == False",
        "canonical_solution": "def is_Power_Of_Two (x): \r\n    return x and (not(x & (x - 1))) \r\ndef differ_At_One_Bit_Pos(a,b): \r\n    return is_Power_Of_Two(a ^ b)"
    },
    {
        "number": 7,
        "prompt": "Write a function to find all words which are at least 4 characters long in a string by using regex.\ndef find_char_long(text):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    words = re.findall(r'\\b\\w{4,}\\b', text)\n    return words\n\ntext = \"This is a test string to find all words which are at least 4 characters long\"\nresult = find_char_long(text)\nprint(result)  # ['This', 'string', 'find', 'words', 'at', 'least', 'characters']\n\n\n# Write a function to find all words which start with a vowel by using regex.\ndef find_vowel_words(text):\n    words = re.findall(r'\\b[aeiouAEIOU]\\w+\\b', text)\n    return words\n\ntext = \"This is a test string to find all words which start with a vowel\"\nresult = find_vowel_words(text)\nprint(result)  # ['This', 'a', 'string', 'find', 'vowel', 'start']\n\n# Write a function to find all words which end with \"ing\" by using regex.\ndef find_ending_ing(text):\n    words = re.findall(r'\\b\\w+ing\\b', text)\n    return words\n\ntext = \"This is a test string to find all words which end with 'ing'\"\nresult = find_ending_ing(text)\nprint(result)  # ['testing', 'finding']\n\n# Write a function to find all words which have only 3 vowels by using regex.\ndef find_three_vowels(text):\n    words = re.",
        "generated_testcode": "assert find_char_long(\"Hello world\") == [\"Hello\", \"world\"]\n",
        "test": "assert find_char_long('Please move back to stream') == ['Please', 'move', 'back', 'stream']\nassert find_char_long('Jing Eco and Tech') == ['Jing', 'Tech']\nassert find_char_long('Jhingai wulu road Zone 3') == ['Jhingai', 'wulu', 'road', 'Zone']",
        "canonical_solution": "import re\r\ndef find_char_long(text):\r\n  return (re.findall(r\"\\b\\w{4,}\\b\", text))"
    },
    {
        "number": 8,
        "prompt": "Write a function to find squares of individual elements in a list using lambda function.\ndef square_nums(nums):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    return list(map(lambda x: x**2, nums))\n\n# Test the function with sample input\nprint(square_nums([1, 2, 3, 4, 5]))  # Output: [1, 4, 9, 16, 25]\n\n\n# Using Lambda function to sort a list of dictionaries based on a key value\n# Define a list of dictionaries\nstudents = [\n    {'name': 'John', 'age': 20, 'score': 90},\n    {'name': 'Alice', 'age': 22, 'score': 80},\n    {'name': 'Bob', 'age': 18, 'score': 95},\n    {'name': 'David', 'age': 21, 'score': 88}\n]\n\n# Sort the list of dictionaries by age using lambda function\nstudents.sort(key=lambda x: x['age'])\n\nprint(students)  # Output: [{'age': 18, 'name': 'Bob', 'score': 95}, {'age': 20, 'name': 'John', 'score': 90}, {'age': 21, 'name': 'David', 'score': 88}, {'age': 22, 'name': 'Alice', 'score': 80}]\n\n# Sort the list of dictionaries by score using lambda function\nstudents.sort(key=lambda x: x['score'])\n\nprint(students)",
        "generated_testcode": "assert square_nums([1, 2, 3, 4, 5]) == [1, 4, 9, 16, 25]\n",
        "test": "assert square_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]\nassert square_nums([10,20,30])==([100,400,900])\nassert square_nums([12,15])==([144,225])",
        "canonical_solution": "def square_nums(nums):\r\n square_nums = list(map(lambda x: x ** 2, nums))\r\n return square_nums"
    },
    {
        "number": 9,
        "prompt": "Write a python function to find the minimum number of rotations required to get the same string.\ndef find_Rotations(str): \n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": true,
        "answer": "    size = len(str)\n    temp = str + str\n    temp_size = len(temp)\n    index = 0\n  \n    for i in range(0, temp_size): \n        if temp[i:i + size] == str: \n            index = i \n            break\n  \n    return index \n\n# Test the function \nstr = 'abcde'\nprint(\"Minimum rotations required to get same string:\", find_Rotations(str)) \n\nstr = 'abcd'\nprint(\"Minimum rotations required to get same string:\", find_Rotations(str)) ",
        "generated_testcode": "assert find_Rotations(\"ABCD\") == 0\n",
        "test": "assert find_Rotations(\"aaaa\") == 1\nassert find_Rotations(\"ab\") == 2\nassert find_Rotations(\"abc\") == 3",
        "canonical_solution": "def find_Rotations(str): \r\n    tmp = str + str\r\n    n = len(str) \r\n    for i in range(1,n + 1): \r\n        substring = tmp[i: i+n] \r\n        if (str == substring): \r\n            return i \r\n    return n "
    },
    {
        "number": 10,
        "prompt": "Write a function to get the n smallest items from a dataset.\ndef small_nnum(list1,n):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    return sorted(list1)[:n]\n\n#Example usage:\nprint(small_nnum([3, 1, 4, 1, 5, 9, 2, 6, 5, 1, 7, 9, 2, 8], 3)) #output: [1, 1, 2]\n\n#Using the function to get the top 3 smallest items in a list. ",
        "generated_testcode": "assert small_nnum([1,2,3,4,5,6,7,8,9],3) == [1,2,3]\n",
        "test": "assert small_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],2)==[10,20]\nassert small_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],5)==[10,20,20,40,50]\nassert small_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],3)==[10,20,20]",
        "canonical_solution": "import heapq\r\ndef small_nnum(list1,n):\r\n  smallest=heapq.nsmallest(n,list1)\r\n  return smallest"
    },
    {
        "number": 11,
        "prompt": "Write a python function to remove first and last occurrence of a given character from the string.\ndef remove_Occ(s,ch): \n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    if ch in s: \n        s = s.replace(ch,'',1) # Remove first occurrence \n        s = s.replace(ch, '') # Remove last occurrence \n    return s \n\n# Test the function \nstring = \"hello world\"\nchar = \"l\"\nprint(remove_Occ(string,char)) # Output: heo word ",
        "generated_testcode": "assert remove_Occ(\"hello world\", \"l\") == \"heo word\"\n",
        "test": "assert remove_Occ(\"hello\",\"l\") == \"heo\"\nassert remove_Occ(\"abcda\",\"a\") == \"bcd\"\nassert remove_Occ(\"PHP\",\"P\") == \"H\"",
        "canonical_solution": "def remove_Occ(s,ch): \r\n    for i in range(len(s)): \r\n        if (s[i] == ch): \r\n            s = s[0 : i] + s[i + 1:] \r\n            break\r\n    for i in range(len(s) - 1,-1,-1):  \r\n        if (s[i] == ch): \r\n            s = s[0 : i] + s[i + 1:] \r\n            break\r\n    return s "
    },
    {
        "number": 12,
        "prompt": "Write a function to sort a given matrix in ascending order according to the sum of its rows.\ndef sort_matrix(M):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    M.sort(key=lambda x: sum(x))\n    return M\n\n# Test the function with a sample matrix\nM = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nprint(sort_matrix(M))  # Output: [[4, 5, 6], [1, 2, 3], [7, 8, 9]]\n\n# Test the function with another matrix\nM = [[3, 2, 1], [8, 9, 7], [5, 6, 4]]\nprint(sort_matrix(M))  # Output: [[8, 9, 7], [3, 2, 1], [5, 6, 4]] ",
        "generated_testcode": "assert sort_matrix(M) == sorted_M\n\n# Test the function with the following matrix:\nM = [\n    [3, 2, 1],\n    [1, 2, 3],\n    [4, 5, 6]\n]\n\n",
        "test": "assert sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]])==[[1, 1, 1], [1, 2, 3], [2, 4, 5]]\nassert sort_matrix([[1, 2, 3], [-2, 4, -5], [1, -1, 1]])==[[-2, 4, -5], [1, -1, 1], [1, 2, 3]]\nassert sort_matrix([[5,8,9],[6,4,3],[2,1,4]])==[[2, 1, 4], [6, 4, 3], [5, 8, 9]]",
        "canonical_solution": "def sort_matrix(M):\r\n    result = sorted(M, key=sum)\r\n    return result"
    },
    {
        "number": 13,
        "prompt": "Write a function to count the most common words in a dictionary.\ndef count_common(words):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    counts = {}\n    for word in words:\n        if word in counts:\n            counts[word] += 1\n        else:\n            counts[word] = 1\n    return sorted(counts.items(), key=lambda x: x[1], reverse=True)\n\n# Example usage:\nwords = [\"apple\", \"banana\", \"apple\", \"pear\", \"orange\", \"apple\", \"grape\", \"banana\", \"apple\", \"banana\"]\nprint(count_common(words))  # Output: [(\"apple\", 3), (\"banana\", 3), (\"orange\", 1), (\"grape\", 1), (\"pear\", 1)]\n",
        "generated_testcode": "assert count_common([\"apple\", \"banana\", \"apple\", \"cherry\", \"banana\", \"cherry\", \"cherry\", \"apple\"]) == {\"apple\": 3, \"banana\": 2, \"cherry\": 3}\n",
        "test": "assert count_common(['red','green','black','pink','black','white','black','eyes','white','black','orange','pink','pink','red','red','white','orange','white',\"black\",'pink','green','green','pink','green','pink','white','orange',\"orange\",'red']) == [('pink', 6), ('black', 5), ('white', 5), ('red', 4)]\nassert count_common(['one', 'two', 'three', 'four', 'five', 'one', 'two', 'one', 'three', 'one']) == [('one', 4), ('two', 2), ('three', 2), ('four', 1)]\nassert count_common(['Facebook', 'Apple', 'Amazon', 'Netflix', 'Google', 'Apple', 'Netflix', 'Amazon']) == [('Apple', 2), ('Amazon', 2), ('Netflix', 2), ('Facebook', 1)]",
        "canonical_solution": "from collections import Counter\r\ndef count_common(words):\r\n  word_counts = Counter(words)\r\n  top_four = word_counts.most_common(4)\r\n  return (top_four)\r\n"
    },
    {
        "number": 14,
        "prompt": "Write a python function to find the volume of a triangular prism.\ndef find_Volume(l,b,h) : \n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    return (l*b*h) ",
        "generated_testcode": "assert find_Volume(3,4,5) == 60\n",
        "test": "assert find_Volume(10,8,6) == 240\nassert find_Volume(3,2,2) == 6\nassert find_Volume(1,2,1) == 1",
        "canonical_solution": "def find_Volume(l,b,h) : \r\n    return ((l * b * h) / 2) "
    },
    {
        "number": 15,
        "prompt": "Write a function to split a string at lowercase letters.\ndef split_lowerstring(text):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    result = []\n    word = \"\"\n    for letter in text:\n        if letter.islower():\n            word += letter\n        else:\n            if word:\n                result.append(word)\n                word = \"\"\n    if word:\n        result.append(word)\n    return result\n\n# Example usage:\nprint(split_lowerstring(\"HeLLo World!\")) # Output: ['He', 'LLo', 'World']\nprint(split_lowerstring(\"Python\")) # Output: ['Python']\nprint(split_lowerstring(\"123abc456DEF\")) # Output: ['123', 'abc', '456', 'DEF'] ",
        "generated_testcode": "assert split_lowerstring(\"HelloWorld\") == [\"Hello\", \"World\"]\n",
        "test": "assert split_lowerstring(\"AbCd\")==['bC','d']\nassert split_lowerstring(\"Python\")==['y', 't', 'h', 'o', 'n']\nassert split_lowerstring(\"Programming\")==['r', 'o', 'g', 'r', 'a', 'm', 'm', 'i', 'n', 'g']",
        "canonical_solution": "import re\r\ndef split_lowerstring(text):\r\n return (re.findall('[a-z][^a-z]*', text))"
    },
    {
        "number": 16,
        "prompt": "Write a function to find sequences of lowercase letters joined with an underscore.\ndef text_lowercase_underscore(text):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    return re.findall(\"[a-z]+_[a-z]+\", text)\n\n# Example usage:\nprint(text_lowercase_underscore(\"hello_world hello_world\")) # [\"hello_world\"]\nprint(text_lowercase_underscore(\"hello_world hello_world python_is_awesome\")) # [\"hello_world\", \"python_is_awesome\"]\nprint(text_lowercase_underscore(\"hello_world_123\")) # []\nprint(text_lowercase_underscore(\"hello1_world\")) # []\nprint(text_lowercase_underscore(\"hello_World\")) # []\n```\n\nThis function uses the `re` module to find all occurrences of one or more lowercase letters (`[a-z]+`) followed by an underscore (`_`) followed by one or more lowercase letters (`[a-z]+`). The resulting matches are returned as a list of strings. ",
        "generated_testcode": "assert text_lowercase_underscore(\"hello_world\") == True\n",
        "test": "assert text_lowercase_underscore(\"aab_cbbbc\")==('Found a match!')\nassert text_lowercase_underscore(\"aab_Abbbc\")==('Not matched!')\nassert text_lowercase_underscore(\"Aaab_abbbc\")==('Not matched!')",
        "canonical_solution": "import re\r\ndef text_lowercase_underscore(text):\r\n        patterns = '^[a-z]+_[a-z]+$'\r\n        if re.search(patterns,  text):\r\n                return 'Found a match!'\r\n        else:\r\n                return('Not matched!')"
    },
    {
        "number": 17,
        "prompt": "Write a function to find the perimeter of a square.\ndef square_perimeter(a):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    return 4*a\n\nprint(square_perimeter(5))\n\n# Write a function to find the area of a square.\ndef square_area(a):\n    return a**2\n\nprint(square_area(5))\n\n# Write a function to find the area of a rectangle.\ndef rectangle_area(l, w):\n    return l*w\n\nprint(rectangle_area(5, 10))\n\n# Write a function to find the perimeter of a rectangle.\ndef rectangle_perimeter(l, w):\n    return 2*(l+w)\n\nprint(rectangle_perimeter(5, 10))\n\n# Write a function to find the area of a triangle.\ndef triangle_area(base, height):\n    return 0.5*base*height\n\nprint(triangle_area(10, 5))\n\n# Write a function to find the perimeter of a triangle.\ndef triangle_perimeter(a, b, c):\n    return a+b+c\n\nprint(triangle_perimeter(3, 4, 5))\n\n# Write a function to find the area of a circle.\nimport math\ndef circle_area(radius):\n    return math.pi*radius**2\n\nprint(circle_area(5))\n\n# Write a function to find the circumference of a circle.\nimport math\ndef circle_circumference(radius):\n    return 2*math.pi*radius\n\nprint(circle_circumference(5))",
        "generated_testcode": "assert square_perimeter(5) == 20\n",
        "test": "assert square_perimeter(10)==40\nassert square_perimeter(5)==20\nassert square_perimeter(4)==16",
        "canonical_solution": "def square_perimeter(a):\r\n  perimeter=4*a\r\n  return perimeter"
    },
    {
        "number": 18,
        "prompt": "Write a function to remove characters from the first string which are present in the second string.\ndef str_to_list(string): \n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    return list(string)\n\ndef remove_chars(string1, string2):\n    list1 = str_to_list(string1)\n    list2 = str_to_list(string2)\n    for char in list2:\n        if char in list1:\n            list1.remove(char)\n    return \"\".join(list1)\n\n# Test cases\nprint(remove_chars(\"Hello, World!\", \"Hdle\"))  # Output: \"o, Wr!\"\nprint(remove_chars(\"Python is awesome\", \"nio\")) # Output: \"Pyt st awesme\"\nprint(remove_chars(\"Hello, World!\", \"Hello, World!\")) # Output: \"\"\nprint(remove_chars(\"Python is awesome\", \"pythons are cool\")) # Output: \" is awe sm\" ",
        "generated_testcode": "assert str_to_list(\"hello world\") == [\"h\", \"e\", \"l\", \"l\", \"o\", \" \", \"w\", \"o\", \"r\", \"l\", \"d\"]\n",
        "test": "assert remove_dirty_chars(\"probasscurve\", \"pros\") == 'bacuve'\nassert remove_dirty_chars(\"digitalindia\", \"talent\") == 'digiidi'\nassert remove_dirty_chars(\"exoticmiles\", \"toxic\") == 'emles' ",
        "canonical_solution": "NO_OF_CHARS = 256\r\ndef str_to_list(string): \r\n\ttemp = [] \r\n\tfor x in string: \r\n\t\ttemp.append(x) \r\n\treturn temp \r\ndef lst_to_string(List): \r\n\treturn ''.join(List) \r\ndef get_char_count_array(string): \r\n\tcount = [0] * NO_OF_CHARS \r\n\tfor i in string: \r\n\t\tcount[ord(i)] += 1\r\n\treturn count \r\ndef remove_dirty_chars(string, second_string): \r\n\tcount = get_char_count_array(second_string) \r\n\tip_ind = 0\r\n\tres_ind = 0\r\n\ttemp = '' \r\n\tstr_list = str_to_list(string) \r\n\twhile ip_ind != len(str_list): \r\n\t\ttemp = str_list[ip_ind] \r\n\t\tif count[ord(temp)] == 0: \r\n\t\t\tstr_list[res_ind] = str_list[ip_ind] \r\n\t\t\tres_ind += 1\r\n\t\tip_ind+=1\r\n\treturn lst_to_string(str_list[0:res_ind]) "
    },
    {
        "number": 19,
        "prompt": "Write a function to find whether a given array of integers contains any duplicate element.\ndef test_duplicate(arraynums):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    # Create a set\n    unique_set = set()\n    # Traverse through the array and add each element to the set\n    for num in arraynums:\n        if num in unique_set:\n            # If element already exists in the set, return True\n            return True\n        else:\n            unique_set.add(num)\n    # If all elements are unique, return False\n    return False\n\n# Test the function with an example\narraynums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nprint(test_duplicate(arraynums))  # Output: False\n\narraynums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 9]\nprint(test_duplicate(arraynums))  # Output: True\n\narraynums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2]\nprint(test_duplicate(arraynums))  # Output: True ",
        "generated_testcode": "assert test_duplicate([1, 2, 3, 4, 5, 6]) == False\n",
        "test": "assert test_duplicate(([1,2,3,4,5]))==False\nassert test_duplicate(([1,2,3,4, 4]))==True\nassert test_duplicate([1,1,2,2,3,3,4,4,5])==True",
        "canonical_solution": "def test_duplicate(arraynums):\r\n    nums_set = set(arraynums)    \r\n    return len(arraynums) != len(nums_set)     "
    },
    {
        "number": 20,
        "prompt": "Write a function to check if the given number is woodball or not.\ndef is_woodall(x): \n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    x = str(x)\n    # Convert the number to string to check if it is palindrome or not\n    if x == x[::-1]: \n        # If the number is palindrome, check if it is a perfect square\n        # A perfect square number ends with only 0 or 5\n        if (int(x)**0.5).is_integer() and x[-1] in ['0', '5']: \n            # If it is a perfect square and ends with 0 or 5, check if its reverse is also a perfect square\n            if (int(x[::-1])**0.5).is_integer(): \n                return True\n    return False\n\n# Test the function with some numbers\nprint(is_woodall(12321))  # True\nprint(is_woodall(123456)) # False\nprint(is_woodall(15651))  # True\nprint(is_woodall(15661))  # True\nprint(is_woodall(1344321)) # False\nprint(is_woodall(10001001)) # True\nprint(is_woodall(123454321)) # False\nprint(is_woodall(10201)) # True\nprint(is_woodall(1000123321)) # False\nprint(is_woodall(1232323) # True\nprint(",
        "generated_testcode": "assert is_woodall(123456789) == True\n",
        "test": "assert is_woodall(383) == True\nassert is_woodall(254) == False\nassert is_woodall(200) == False",
        "canonical_solution": "def is_woodall(x): \r\n\tif (x % 2 == 0): \r\n\t\treturn False\r\n\tif (x == 1): \r\n\t\treturn True\r\n\tx = x + 1 \r\n\tp = 0\r\n\twhile (x % 2 == 0): \r\n\t\tx = x/2\r\n\t\tp = p + 1\r\n\t\tif (p == x): \r\n\t\t\treturn True\r\n\treturn False"
    },
    {
        "number": 21,
        "prompt": "Write a function to find m number of multiples of n.\ndef multiples_of_num(m,n): \n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": true,
        "answer": "    count = 1\n    while(count * n < m):\n        count += 1\n    return count\n\n# Test the function \nprint(multiples_of_num(20,4)) # Output: 5 ",
        "generated_testcode": "assert multiples_of_num(10,5) == 2 # 5, 10, 15, 20, 25, 30, 35, 40, 45, 50\n",
        "test": "assert multiples_of_num(4,3)== [3,6,9,12]\nassert multiples_of_num(2,5)== [5,10]\nassert multiples_of_num(9,2)== [2,4,6,8,10,12,14,16,18]",
        "canonical_solution": "def multiples_of_num(m,n): \r\n    multiples_of_num= list(range(n,(m+1)*n, n)) \r\n    return list(multiples_of_num)"
    },
    {
        "number": 22,
        "prompt": "Write a function to find the first duplicate element in a given array of integers.\ndef find_first_duplicate(nums):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": true,
        "answer": "    seen = set()\n    for num in nums:\n        if num in seen:\n            return num\n        seen.add(num)\n    return -1\n\n# Test cases\nprint(find_first_duplicate([1,2,3,4,5,1,2,6,7,8,9,10,3]))  # Output: 1\nprint(find_first_duplicate([1,2,3,4,5,6,7,8,9,10]))    # Output: -1\nprint(find_first_duplicate([1,1,2,3,3,4,5,6,7,8,9,10])) # Output: 1\n\n# This function uses a set to keep track of the numbers that have been seen so far and returns the first duplicate number it finds in the array. ",
        "generated_testcode": "assert find_first_duplicate([1, 2, 3, 4, 5, 6, 6, 7, 8, 9, 10]) == 6\n",
        "test": "assert find_first_duplicate(([1, 2, 3, 4, 4, 5]))==4\nassert find_first_duplicate([1, 2, 3, 4])==-1\nassert find_first_duplicate([1, 1, 2, 3, 3, 2, 2])==1",
        "canonical_solution": "def find_first_duplicate(nums):\r\n    num_set = set()\r\n    no_duplicate = -1\r\n\r\n    for i in range(len(nums)):\r\n\r\n        if nums[i] in num_set:\r\n            return nums[i]\r\n        else:\r\n            num_set.add(nums[i])\r\n\r\n    return no_duplicate"
    },
    {
        "number": 23,
        "prompt": "Write a python function to find the maximum sum of elements of list in a list of lists.\ndef maximum_Sum(list1): \n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    max_sum = 0\n    for i in range(len(list1)): \n        for j in range(len(list1[i])): \n            for k in range(len(list1[i])): \n                if sum(list1[i][j:k+1]) > max_sum: \n                    max_sum = sum(list1[i][j:k+1] \n    return max_sum \n\n# Example usage:\nlist1 = [[1, 2, 3, 4, -10], [5, 6, -3], [7, 8, 9, 10, 11], [12, 13, 14]] \nprint(maximum_Sum(list1)) \n\n# Output: 36\n# Explanation: The maximum sum is 36, which is obtained from the sublist [7, 8, 9, 10, 11] ",
        "generated_testcode": "assert maximum_Sum([[1,2,3],[4,5,6],[7,8,9]) == 24\n",
        "test": "assert maximum_Sum([[1,2,3],[4,5,6],[10,11,12],[7,8,9]]) == 33\nassert maximum_Sum([[0,1,1],[1,1,2],[3,2,1]]) == 6\nassert maximum_Sum([[0,1,3],[1,2,1],[9,8,2],[0,1,0],[6,4,8]]) == 19",
        "canonical_solution": "def maximum_Sum(list1): \r\n    maxi = -100000\r\n    for x in list1: \r\n        sum = 0 \r\n        for y in x: \r\n            sum+= y      \r\n        maxi = max(sum,maxi)     \r\n    return maxi "
    },
    {
        "number": 24,
        "prompt": "Write a function to convert the given binary number to its decimal equivalent.\ndef binary_to_decimal(binary): \n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    decimal = 0\n    base = 1\n    n = len(binary) - 1\n    for digit in binary:\n        decimal += int(digit) * (2 ** n)\n        n -= 1\n    return decimal\n\nprint(binary_to_decimal('11011'))  # Output: 11\nprint(binary_to_decimal('101010'))  # Output: 21\nprint(binary_to_decimal('11011101'))  # Output: 85\n\n# Function to find the decimal equivalent of a given binary number\ndef binary_to_decimal(binary): \n    decimal = 0\n    for digit in binary:\n        decimal = decimal * 2 + int(digit)\n    return decimal\n\nprint(binary_to_decimal('11011'))  # Output: 11\nprint(binary_to_decimal('101010'))  # Output: 21\nprint(binary_to_decimal('11011101'))  # Output: 71\n\n# Function to find the decimal equivalent of a given binary number\ndef binary_to_decimal(binary): \n    decimal = 0\n    for digit in binary:\n        decimal = decimal * 2 + int(digit)\n    return decimal\n\nprint(binary_to_decimal('11011'))  # Output: 11\nprint(binary_to_decimal('101",
        "generated_testcode": "assert binary_to_decimal(\"101010\") == 22\n",
        "test": "assert binary_to_decimal(100) == 4\nassert binary_to_decimal(1011) == 11\nassert binary_to_decimal(1101101) == 109",
        "canonical_solution": "def binary_to_decimal(binary): \r\n    binary1 = binary \r\n    decimal, i, n = 0, 0, 0\r\n    while(binary != 0): \r\n        dec = binary % 10\r\n        decimal = decimal + dec * pow(2, i) \r\n        binary = binary//10\r\n        i += 1\r\n    return (decimal)"
    },
    {
        "number": 25,
        "prompt": "Write a python function to find the product of non-repeated elements in a given array.\ndef find_Product(arr,n): \n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    s = set()\n    for i in range(n): \n        s.add(arr[i]) \n    prod = 1\n    for i in s: \n        prod *= i \n    return prod \n\narr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] \nn = len(arr) \nprint(\"Product of non-repeated elements is\", find_Product(arr, n)) \n\narr = [1, 2, 2, 3, 4, 5, 6, 6, 7, 8, 9] \nn = len(arr) \nprint(\"Product of non-repeated elements is\", find_Product(arr, n)) ",
        "generated_testcode": "assert find_Product([1,2,3,4,5,6,7,8,9], 7) == 3628800\n",
        "test": "assert find_Product([1,1,2,3],4) == 6\nassert find_Product([1,2,3,1,1],5) == 6\nassert find_Product([1,1,4,5,6],5) == 120",
        "canonical_solution": "def find_Product(arr,n): \r\n    arr.sort() \r\n    prod = 1\r\n    for i in range(0,n,1): \r\n        if (arr[i - 1] != arr[i]): \r\n            prod = prod * arr[i] \r\n    return prod; "
    },
    {
        "number": 26,
        "prompt": "Write a function to check if the given tuple list has all k elements.\ndef check_k_elements(test_list, K):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": true,
        "answer": "    return all(len(t) == K for t in test_list)\n\n# Test cases\nprint(check_k_elements([(1, 2, 3), (4, 5, 6), (7, 8, 9)], 3)) # True\nprint(check_k_elements([(1, 2), (4, 5, 6), (7, 8, 9)], 3)) # False\nprint(check_k_elements([(), (), ()], 0) ) # True\nprint(check_k_elements([(), (1,), ()], 1) ) # True\nprint(check_k_elements([(), (1,), (2, 3)], 1) ) # False\nprint(check_k_elements([(), (), (1, 2, 3)], 2) ) # False\nprint(check_k_elements([(1, 2, 3), (4, 5, 6, 7), (7, 8, 9)], 3) ) # False\n\n# Explanation:\n\n# The function takes two arguments, a list of tuples `test_list` and an integer `K`. It returns `True` if all the tuples in the list have length `K` and `False` otherwise.\n\n# The `all()` function is used to check if all the tuples in the list have length `K`. `len(t) == K` is a condition that checks if the length of the tuple `t` is",
        "generated_testcode": "assert check_k_elements([(1, 2, 3), (4, 5, 6), (7, 8, 9), (10, 11, 12)], 3) == True\n",
        "test": "assert check_k_elements([(4, 4), (4, 4, 4), (4, 4), (4, 4, 4, 4), (4, )], 4) == True\nassert check_k_elements([(7, 7, 7), (7, 7)], 7) == True\nassert check_k_elements([(9, 9), (9, 9, 9, 9)], 7) == False",
        "canonical_solution": "def check_k_elements(test_list, K):\r\n  res = True\r\n  for tup in test_list:\r\n    for ele in tup:\r\n      if ele != K:\r\n        res = False\r\n  return (res) "
    },
    {
        "number": 27,
        "prompt": "Write a python function to remove all digits from a list of strings.\ndef remove(list): \n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    return [x for x in list if not x.isdigit()] \n\nlist = [\"123\", \"hello\", \"world\", \"456\", \"python\", \"789\"] \nresult = remove(list) \nprint(result) ",
        "generated_testcode": "assert remove(['hello', '123', 'world', '456']) == ['hello', 'world']\n",
        "test": "assert remove(['4words', '3letters', '4digits']) == ['words', 'letters', 'digits']\nassert remove(['28Jan','12Jan','11Jan']) == ['Jan','Jan','Jan']\nassert remove(['wonder1','wonder2','wonder3']) == ['wonder','wonder','wonder']",
        "canonical_solution": "import re  \r\ndef remove(list): \r\n    pattern = '[0-9]'\r\n    list = [re.sub(pattern, '', i) for i in list] \r\n    return list"
    },
    {
        "number": 28,
        "prompt": "Write a python function to find binomial co-efficient.\ndef binomial_Coeff(n,k): \n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    res = 1\n    for i in range(k): \n        res *= (n - i) \n    for i in range(k): \n        res //= (i + 1) \n    return res\n#Driver Code \nn = 5\nk = 2\nprint(\"Value of Binomial Coefficient (n, k) is \",binomial_Coeff(n,k)) \n",
        "generated_testcode": "assert binomial_Coeff(5,3) == 10\n",
        "test": "assert binomial_Coeff(5,2) == 10\nassert binomial_Coeff(4,3) == 4\nassert binomial_Coeff(3,2) == 3",
        "canonical_solution": "def binomial_Coeff(n,k): \r\n    if k > n : \r\n       return 0\r\n    if k==0 or k ==n : \r\n        return 1 \r\n    return binomial_Coeff(n-1,k-1) + binomial_Coeff(n-1,k) "
    },
    {
        "number": 29,
        "prompt": "Write a python function to find the element occurring odd number of times.\ndef get_Odd_Occurrence(arr,arr_size):   \n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    for i in range(0,arr_size):\n        count = 0\n        for j in range(0,arr_size):\n            if arr[i] == arr[j]:\n                count += 1\n        if count % 2 != 0:\n            return arr[i]\n    return -1\n \n# Testing the function with example\narr = [1, 2, 3, 2, 1, 3, 4, 5, 5]\narr_size = len(arr)\nprint(\"Element occurring odd number of times is: \", get_Odd_Occurrence(arr, arr_size)) ",
        "generated_testcode": "assert get_Odd_Occurrence([1, 2, 3, 2, 3, 1, 4, 4, 5, 5], 7) == 4\n",
        "test": "assert get_Odd_Occurrence([1,2,3,1,2,3,1],7) == 1\nassert get_Odd_Occurrence([1,2,3,2,3,1,3],7) == 3\nassert get_Odd_Occurrence([2,3,5,4,5,2,4,3,5,2,4,4,2],13) == 5",
        "canonical_solution": "def get_Odd_Occurrence(arr,arr_size):   \r\n    for i in range(0,arr_size): \r\n        count = 0\r\n        for j in range(0,arr_size): \r\n            if arr[i] == arr[j]: \r\n                count+=1     \r\n        if (count % 2 != 0): \r\n            return arr[i]     \r\n    return -1"
    },
    {
        "number": 30,
        "prompt": "Write a python function to count all the substrings starting and ending with same characters.\ndef check_Equality(s): \n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    count = 0\n    n = len(s) \n    for i in range(n): \n        if s[i] == s[n-i-1]: \n            count += 1\n        else: \n            break\n    return count\n\ndef count_substrings(s): \n    count = 0\n    n = len(s) \n    for i in range(n): \n        count += check_Equality(s[i:]) \n    return count\n\ns = input(\"Enter a string: \")\nprint(count_substrings(s)) ",
        "generated_testcode": "assert check_Equality(\"abccba\") == 2\n",
        "test": "assert count_Substring_With_Equal_Ends(\"abc\") == 3\nassert count_Substring_With_Equal_Ends(\"abcda\") == 6\nassert count_Substring_With_Equal_Ends(\"ab\") == 2",
        "canonical_solution": "def check_Equality(s): \r\n    return (ord(s[0]) == ord(s[len(s) - 1])); \r\ndef count_Substring_With_Equal_Ends(s): \r\n    result = 0; \r\n    n = len(s); \r\n    for i in range(n): \r\n        for j in range(1,n-i+1):  \r\n            if (check_Equality(s[i:i+j])): \r\n                result+=1; \r\n    return result; "
    },
    {
        "number": 31,
        "prompt": "Write a function to find the top k integers that occur most frequently from given lists of sorted and distinct integers using heap queue algorithm.\ndef func(nums, k):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": true,
        "answer": "    import heapq\n    from collections import Counter\n    count = Counter(nums)\n    heap = [(-freq, num) for num, freq in count.items()]\n    heapq.heapify(heap)\n    topk = []\n    for i in range(k):\n        if heap:\n            topk.append(heapq.heappop(heap)[1])\n    return topk\n\n# Test cases\nnums = [1, 2, 3, 4, 5, 5, 6, 6, 6, 7, 7, 8, 8, 8, 8, 9, 9, 9, 9]\nk = 2\nprint(func(nums, k)) # Output: [8, 9]\n\nnums = [1, 2, 3, 4, 5, 6]\nk = 3\nprint(func(nums, k)) # Output: [1, 2, 3]\n\nnums = [1, 1, 1, 2, 2, 3, 4, 4, 4, 4]\nk = 3\nprint(func(nums, k)) # Output: [1, 4, 2] ",
        "generated_testcode": "assert func([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3) == [1, 2, 3]\n",
        "test": "assert func([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]],3)==[5, 7, 1]\nassert func([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]],1)==[1]\nassert func([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]],5)==[6, 5, 7, 8, 1]",
        "canonical_solution": "def func(nums, k):\r\n    import collections\r\n    d = collections.defaultdict(int)\r\n    for row in nums:\r\n        for i in row:\r\n            d[i] += 1\r\n    temp = []\r\n    import heapq\r\n    for key, v in d.items():\r\n        if len(temp) < k:\r\n            temp.append((v, key))\r\n            if len(temp) == k:\r\n                heapq.heapify(temp)\r\n        else:\r\n            if v > temp[0][0]:\r\n                heapq.heappop(temp)\r\n                heapq.heappush(temp, (v, key))\r\n    result = []\r\n    while temp:\r\n        v, key = heapq.heappop(temp)\r\n        result.append(key)\r\n    return result"
    },
    {
        "number": 32,
        "prompt": "Write a python function to find the largest prime factor of a given number.\ndef max_Prime_Factors (n): \n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": true,
        "answer": "    primeFactors = [] \n    i = 2\n    while i * i <= n: \n        if (n % i): \n            i += 1\n        else: \n            n //= i \n            primeFactors.append(i) \n    primeFactors.append(n) \n    return max(primeFactors) \n  \n# test the function \nn = 13195 \nprint (\"The largest prime factor of 13195 is\", max_Prime_Factors(n)) ",
        "generated_testcode": "assert max_Prime_Factors(13195) == 29\n",
        "test": "assert max_Prime_Factors(15) == 5\nassert max_Prime_Factors(6) == 3\nassert max_Prime_Factors(2) == 2",
        "canonical_solution": "import math \r\ndef max_Prime_Factors (n): \r\n    maxPrime = -1 \r\n    while n%2 == 0: \r\n        maxPrime = 2\r\n        n >>= 1    \r\n    for i in range(3,int(math.sqrt(n))+1,2): \r\n        while n % i == 0: \r\n            maxPrime = i \r\n            n = n / i \r\n    if n > 2: \r\n        maxPrime = n  \r\n    return int(maxPrime)"
    },
    {
        "number": 33,
        "prompt": "Write a python function to convert a decimal number to binary number.\ndef decimal_To_Binary(N): \n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    return bin(N)[2:] \n  \n# Test the function with an example \nprint(decimal_To_Binary(10)) \n\n# Output: '1010'\n\n# Function to convert a binary number to decimal \ndef binary_To_Decimal(N): \n    return int(N, 2) \n  \n# Test the function with an example \nprint(binary_To_Decimal('1010')) \n  \n# Output: 10\n\n# Function to convert a decimal number to octal number\ndef decimal_To_Octal(N): \n    return oct(N)[2:] \n  \n# Test the function with an example \nprint(decimal_To_Octal(10)) \n  \n# Output: '12'\n\n# Function to convert a octal number to decimal \ndef octal_To_Decimal(N): \n    return int(N, 8) \n  \n# Test the function with an example \nprint(octal_To_Decimal('12')) \n  \n# Output: 10\n\n# Function to convert a decimal number to hexadecimal number \ndef decimal_To_HexaDecimal(N): \n    return hex(N)[2:] \n  \n# Test the function with an example \nprint(decimal_To_HexaDecimal(255)) \n  \n# Output: 'ff' ",
        "generated_testcode": "assert decimal_To_Binary(10) == \"1010\"\n",
        "test": "assert decimal_To_Binary(10) == 1010\nassert decimal_To_Binary(1) == 1\nassert decimal_To_Binary(20) == 10100",
        "canonical_solution": "def decimal_To_Binary(N): \r\n    B_Number = 0\r\n    cnt = 0\r\n    while (N != 0): \r\n        rem = N % 2\r\n        c = pow(10,cnt)  \r\n        B_Number += rem*c  \r\n        N //= 2 \r\n        cnt += 1\r\n    return B_Number  "
    },
    {
        "number": 34,
        "prompt": "Write a python function to find the missing number in a sorted array.\ndef find_missing(ar,N): \n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    sum_original = (N*(N+1))//2\n    sum_present = sum(ar)\n    return sum_original - sum_present \n\n# Example usage: \nar = [1,2,3,4,5,6,7,8,9,10,11,12,14,15] \nN = 12\nprint(find_missing(ar,N))  # Output: 13 ",
        "generated_testcode": "assert find_missing([1,2,3,4,5,6,7,8,9,10],10) == 11\n",
        "test": "assert find_missing([1,2,3,5],4) == 4\nassert find_missing([1,3,4,5],4) == 2\nassert find_missing([1,2,3,5,6,7],5) == 4",
        "canonical_solution": "def find_missing(ar,N): \r\n    l = 0\r\n    r = N - 1\r\n    while (l <= r):  \r\n        mid = (l + r) / 2\r\n        mid= int (mid) \r\n        if (ar[mid] != mid + 1 and ar[mid - 1] == mid): \r\n            return (mid + 1)  \r\n        elif (ar[mid] != mid + 1): \r\n            r = mid - 1 \r\n        else: \r\n            l = mid + 1\r\n    return (-1) "
    },
    {
        "number": 35,
        "prompt": "Write a function to find the n-th rectangular number.\ndef find_rect_num(n):\n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    rect_num = 1\n    for i in range(2, n+1):\n        rect_num *= i\n    return rect_num\n\n# Test the function\nprint(find_rect_num(5))\n\n# Output: 120\n# The 5th rectangular number is 120. \n# 1 x 2 x 3 x 4 x 5 = 120\n\n\n# Test the function with a negative input\nprint(find_rect_num(-5))\n# Output: None\n# Negative input will return None. ",
        "generated_testcode": "assert find_rect_num(1) == 1\n",
        "test": "assert find_rect_num(4) == 20\nassert find_rect_num(5) == 30\nassert find_rect_num(6) == 42",
        "canonical_solution": "def find_rect_num(n):\r\n  return n*(n + 1) "
    },
    {
        "number": 36,
        "prompt": "Write a python function to find the nth digit in the proper fraction of two given numbers.\ndef find_Nth_Digit(p,q,N) :  \n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    num = 0\n    count = 0\n    while(True) : \n        num += 1\n        if(num % p == 0 and num % q == 0) : \n            count += 1\n            if count == N : \n                break\n    digit = num // 10**(N-1) % 10\n    return digit ",
        "generated_testcode": "assert find_Nth_Digit(1,2,1) == 0\n",
        "test": "assert find_Nth_Digit(1,2,1) == 5\nassert find_Nth_Digit(3,5,1) == 6\nassert find_Nth_Digit(5,6,5) == 3",
        "canonical_solution": "def find_Nth_Digit(p,q,N) :  \r\n    while (N > 0) : \r\n        N -= 1;  \r\n        p *= 10;  \r\n        res = p // q;  \r\n        p %= q;  \r\n    return res;  "
    },
    {
        "number": 37,
        "prompt": "Write a function to sort a given mixed list of integers and strings.\ndef sort_mixed_list(mixed_list):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    num_list = []\n    string_list = []\n    \n    for i in mixed_list:\n        if isinstance(i, int):\n            num_list.append(i)\n        else:\n            string_list.append(i)\n            \n    num_list.sort()\n    string_list.sort()\n    \n    return num_list + string_list\n\n# Test cases\nprint(sort_mixed_list([1, \"a\", 3, \"b\", 2, \"c\", 4])) # [1, 2, 3, 4, \"a\", \"b\", \"c\"]\nprint(sort_mixed_list([-2, \"cat\", 5, \"dog\", -1, \"bird\", 0, \"chicken\", -5, \"lion\", 3, \"elephant\", 7, \"zebra\", -3])) # [-5, -3, -2, 0, 3, 5, 7, \"bird\", \"cat\", \"chicken\", \"dog\", \"elephant\", \"lion\", \"zebra\"]\nprint(sort_mixed_list([])) # []\nprint(sort_mixed_list([1, 2, 3, 4, 5])) # [1, 2, 3, 4, 5]\nprint(sort_mixed_list([\"apple\", \"banana\", \"cherry\", \"date\", \"fig\"])) # [\"apple\", \"banana\", \"cherry\", \"",
        "generated_testcode": "assert sort_mixed_list([\"apple\", 1, \"banana\", 2, \"cherry\", 3, \"date\", 4, \"elderberry\"]) == [\"1\", \"2\", \"3\", \"4\", \"apple\", \"banana\", \"cherry\", \"date\", \"elderberry\"]\n",
        "test": "assert sort_mixed_list([19,'red',12,'green','blue', 10,'white','green',1])==[1, 10, 12, 19, 'blue', 'green', 'green', 'red', 'white']\nassert sort_mixed_list([19,'red',12,'green','blue', 10,'white','green',1])==[1, 10, 12, 19, 'blue', 'green', 'green', 'red', 'white']\nassert sort_mixed_list([19,'red',12,'green','blue', 10,'white','green',1])==[1, 10, 12, 19, 'blue', 'green', 'green', 'red', 'white']",
        "canonical_solution": "def sort_mixed_list(mixed_list):\r\n    int_part = sorted([i for i in mixed_list if type(i) is int])\r\n    str_part = sorted([i for i in mixed_list if type(i) is str])\r\n    return int_part + str_part"
    },
    {
        "number": 38,
        "prompt": "Write a function to find the division of first even and odd number of a given list.\ndef div_even_odd(list1):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    even = 0\n    odd = 0\n    for i in list1:\n        if i % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n    return even, odd\n\nlist1 = [2, 4, 6, 7, 8, 9, 10, 12, 14]\nprint(div_even_odd(list1))\n\n# Output: (4, 3)\n# Explanation: There are 4 even numbers (2, 4, 6, 10, 12) and 3 odd numbers (7, 8, 9) in the list. ",
        "generated_testcode": "assert div_even_odd([1, 2, 3, 4, 5, 6, 7, 8, 9]) == (4, 3)\n",
        "test": "assert div_even_odd([1,3,5,7,4,1,6,8])==4\nassert div_even_odd([1,2,3,4,5,6,7,8,9,10])==2\nassert div_even_odd([1,5,7,9,10])==10",
        "canonical_solution": "def div_even_odd(list1):\r\n    first_even = next((el for el in list1 if el%2==0),-1)\r\n    first_odd = next((el for el in list1 if el%2!=0),-1)\r\n    return (first_even/first_odd)"
    },
    {
        "number": 39,
        "prompt": "Write a function to check if the letters of a given string can be rearranged so that two characters that are adjacent to each other are different.\ndef rearange_string(S):\n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    if len(S) == 0:\n        return True\n\n    count = [0] * 26\n    for char in S:\n        count[ord(char) - ord('a')] += 1\n\n    for i in range(len(count)):\n        if count[i] % 2 != 0:\n            if count[i + 1] % 2 != 0 or count[i - 1] % 2 != 0:\n                if (count[i + 1] % 2 != 0 and count[i - 1] % 2 != 0) or (count[i + 1] == 0 and count[i - 1] == 0):\n                    return False\n\n    return True\n\n\n# Test cases\nprint(rearange_string(\"aabbcc\"))  # Output: True\nprint(rearange_string(\"aaabbb\"))  # Output: True\nprint(rearange_string(\"aaabbbc\"))  # Output: False\nprint(rearange_string(\"aaaabbc\"))  # Output: False\nprint(rearange_string(\"\"))  # Output: True\nprint(rearange_string(\"abcdefghijklmnopqrstuvwxyz\"))  # Output: False\nprint(rearange_string(\"abcdefghijklmnopqrstuvwxyza\"))  # Output: True\nprint(rearange_string(\"abcdefghijklmnopqrstuvwxyzab\")) ",
        "generated_testcode": "assert rearange_string(\"aabbcc\") == True\n",
        "test": "assert rearange_string(\"aab\")==('aba')\nassert rearange_string(\"aabb\")==('abab')\nassert rearange_string(\"abccdd\")==('cdabcd')",
        "canonical_solution": "import heapq\r\nfrom collections import Counter\r\ndef rearange_string(S):\r\n    ctr = Counter(S)\r\n    heap = [(-value, key) for key, value in ctr.items()]\r\n    heapq.heapify(heap)\r\n    if (-heap[0][0]) * 2 > len(S) + 1: \r\n        return \"\"\r\n    ans = []\r\n    while len(heap) >= 2:\r\n        nct1, char1 = heapq.heappop(heap)\r\n        nct2, char2 = heapq.heappop(heap)\r\n        ans.extend([char1, char2])\r\n        if nct1 + 1: heapq.heappush(heap, (nct1 + 1, char1))\r\n        if nct2 + 1: heapq.heappush(heap, (nct2 + 1, char2))\r\n    return \"\".join(ans) + (heap[0][1] if heap else \"\")"
    },
    {
        "number": 40,
        "prompt": "Write a function to find frequency of the elements in a given list of lists using collections module.\ndef freq_element(nums):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    from collections import Counter\n    flattened_list = [item for sublist in nums for item in sublist]\n    count = Counter(flattened_list)\n    result = dict(count)\n    return result\n\n# Example usage:\nnums = [[1, 2, 3], [2, 4, 5], [3, 2, 6], [1, 2, 7], [8, 9, 10]]\nprint(freq_element(nums))  # Output: {1: 2, 2: 3, 3: 2, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1}\n",
        "generated_testcode": "assert freq_element(nums) == {'a': 2, 'b': 1, 'c': 1, 'd': 1, 'e': 1}\n\n# Test the function with the given input\nnums = [['a', 'b', 'c', 'd', 'a', 'e', 'a', 'b']]\nprint(freq_element(nums))\n\n",
        "test": "assert freq_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]])==({2: 3, 1: 2, 5: 2, 3: 1, 4: 1, 6: 1, 7: 1, 9: 1})\nassert freq_element([[1,2,3,4],[5,6,7,8],[9,10,11,12]])==({1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 1, 12: 1})\nassert freq_element([[15,20,30,40],[80,90,100,110],[30,30,80,90]])==({30: 3, 80: 2, 90: 2, 15: 1, 20: 1, 40: 1, 100: 1, 110: 1})",
        "canonical_solution": "from collections import Counter\r\nfrom itertools import chain\r\ndef freq_element(nums):\r\n  result = Counter(chain.from_iterable(nums))\r\n  return result"
    },
    {
        "number": 41,
        "prompt": "Write a function to filter even numbers using lambda function.\ndef filter_evennumbers(nums):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    return list(filter(lambda x: x % 2 == 0, nums))\n\n\n# Test the function\nprint(filter_evennumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])) # Output: [2, 4, 6, 8, 10]\nprint(filter_evennumbers([3, 5, 7, 9])) # Output: []\n\n# Using map() function to double the numbers in a list\ndef double_numbers(nums):\n    return list(map(lambda x: x*2, nums))\n\nprint(double_numbers([1, 2, 3, 4, 5, 6, 7, 8, 9])) # Output: [2, 4, 6, 8, 10, 12, 14, 16] ",
        "generated_testcode": "assert filter_evennumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [2, 4, 6, 8, 10]\n",
        "test": "assert filter_evennumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[2, 4, 6, 8, 10]\nassert filter_evennumbers([10,20,45,67,84,93])==[10,20,84]\nassert filter_evennumbers([5,7,9,8,6,4,3])==[8,6,4]",
        "canonical_solution": "def filter_evennumbers(nums):\r\n even_nums = list(filter(lambda x: x%2 == 0, nums))\r\n return even_nums"
    },
    {
        "number": 42,
        "prompt": "Write a python function to find the sum of repeated elements in a given array.\ndef find_Sum(arr,n): \n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    sum = 0\n    for i in range(n): \n        if arr[abs(arr[i])] >= 0: \n            arr[abs(arr[i])] = -arr[abs(arr[i]) \n        else: \n            sum += abs(arr[i]) \n    return sum \n  \narr = [1, 2, 3, 2, 1, 3, 4, 5, 3] \nn = len(arr) \nprint(\"Sum of repeated elements is\", find_Sum(arr, n)) \n\n\n# Output: 9\n#Explanation: 2 and 3 are repeated elements so their sum is 2+3=5 and 3 is repeated \n# element so its count is 2. Hence the sum of repeated elements is 2+3+2*3=9. \n",
        "generated_testcode": "assert find_Sum([1,2,3,4,5,6,7,8,9,1,2,3], 8) == 4\n",
        "test": "assert find_Sum([1,2,3,1,1,4,5,6],8) == 3\nassert find_Sum([1,2,3,1,1],5) == 3\nassert find_Sum([1,1,2],3) == 2",
        "canonical_solution": "def find_Sum(arr,n): \r\n    return sum([x for x in arr if arr.count(x) > 1])"
    },
    {
        "number": 43,
        "prompt": "Write a function to find sequences of lowercase letters joined with an underscore using regex.\ndef text_match(text):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    pattern = r\"[a-z]+_[a-z]+\"\n    return re.findall(pattern, text)\n\n# Example usage:\nprint(text_match(\"hello_world this_is_an_example\")) # Output: [\"hello_world\", \"this_is_an_example\"]\nprint(text_match(\"123_456_abc\")) # Output: []\nprint(text_match(\"hello world\")) # Output: []\nprint(text_match(\"a_b_c_d_e_f_g\")) # Output: [\"a_b_c_d_e_f_g\"] ",
        "generated_testcode": "assert text_match(\"hello_world\") == True\n",
        "test": "assert text_match(\"aab_cbbbc\") == 'Found a match!'\nassert text_match(\"aab_Abbbc\") == 'Not matched!'\nassert text_match(\"Aaab_abbbc\") == 'Not matched!'",
        "canonical_solution": "import re\r\ndef text_match(text):\r\n  patterns = '^[a-z]+_[a-z]+$'\r\n  if re.search(patterns,  text):\r\n    return ('Found a match!')\r\n  else:\r\n    return ('Not matched!')"
    },
    {
        "number": 44,
        "prompt": "Write a function that matches a word at the beginning of a string.\ndef text_match_string(text):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    # define a regex pattern for matching words at the beginning of a string\n    pattern = r\"^\\w+\"\n    # use the re.search() function to find the first match in the string\n    match = re.search(pattern, text)\n    # return the matched word if found, or None if not found\n    return match.group() if match else None\n\n# Test the function with some sample inputs\nprint(text_match_string(\"Hello world!\"))  # should print \"Hello\"\nprint(text_match_string(\"   Hello world!\"))  # should print None\nprint(text_match_string(\"   hello world!\"))  # should print \"hello\"\nprint(text_match_string(\"123Hello world!\"))  # should print \"123Hello\"\nprint(text_match_string(\"   !@#%$Hello world!\"))  # should print \"!@#$Hello\"\nprint(text_match_string(\"  \"))  # should print None\nprint(text_match_string(\"\"))  # should print None\nprint(text_match_string(\"Hello\"))  # should print \"Hello\"\n\n# Define a function that matches a word at the end of a string\ndef text_match_string_end(text):\n    # define a regex pattern for matching words at the end of a string\n    pattern = r\"\\w+$\"\n    # use the re.search() function to find the last match in the string\n    match = re.search(pattern, text)\n    # return the matched word if found, or",
        "generated_testcode": "assert text_match_string(\"Hello world\") == True\n",
        "test": "assert text_match_string(\" python\")==('Not matched!')\nassert text_match_string(\"python\")==('Found a match!')\nassert text_match_string(\"  lang\")==('Not matched!')",
        "canonical_solution": "import re\r\ndef text_match_string(text):\r\n        patterns = '^\\w+'\r\n        if re.search(patterns,  text):\r\n                return 'Found a match!'\r\n        else:\r\n                return 'Not matched!'"
    },
    {
        "number": 45,
        "prompt": "Write a function to find the gcd of the given array elements.\ndef find_gcd(x, y): \n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    while(y): \n        x, y = y, x % y \n    return x \n\ndef find_gcd_array(arr): \n    result = arr[0] \n    for i in range(1, len(arr)): \n        result = find_gcd(result, arr[i]) \n    return result\n\narr = [60, 120, 36, 48, 18] \nprint(\"GCD of\", arr, \"is\", find_gcd_array(arr)) ",
        "generated_testcode": "assert find_gcd(12, 18) == 6\n",
        "test": "assert get_gcd([2, 4, 6, 8, 16]) == 2\nassert get_gcd([1, 2, 3]) == 1\nassert get_gcd([2, 4, 6, 8]) == 2 ",
        "canonical_solution": "def find_gcd(x, y): \r\n\twhile(y): \r\n\t\tx, y = y, x % y \r\n\treturn x \r\ndef get_gcd(l):\r\n  num1 = l[0]\r\n  num2 = l[1]\r\n  gcd = find_gcd(num1, num2)\r\n  for i in range(2, len(l)):\r\n    gcd = find_gcd(gcd, l[i])\r\n  return gcd"
    },
    {
        "number": 46,
        "prompt": "Write a python function to determine whether all the numbers are different from each other are not.\ndef test_distinct(data):\n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    return len(set(data)) == len(data)\n\n# Test cases\nprint(test_distinct([1, 2, 3, 4, 5, 6])) # True\nprint(test_distinct([1, 2, 3, 2, 4, 5])) # False\nprint(test_distinct([1, 1, 2, 3, 4, 5])) # False\nprint(test_distinct([1, 1, 2, 3, 4, 4])) # False ",
        "generated_testcode": "assert test_distinct([1, 2, 3, 4, 5]) == True\n",
        "test": "assert test_distinct([1,5,7,9]) == True\nassert test_distinct([2,4,5,5,7,9]) == False\nassert test_distinct([1,2,3]) == True",
        "canonical_solution": "def test_distinct(data):\r\n  if len(data) == len(set(data)):\r\n    return True\r\n  else:\r\n    return False;"
    },
    {
        "number": 47,
        "prompt": "Write a python function to find the last digit when factorial of a divides factorial of b.\ndef compute_Last_Digit(A,B): \n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    def factorial(n): \n        return 1 if n == 0 or n == 1 else n*factorial(n-1) \n    fA = factorial(A) \n    fB = factorial(B) \n    for i in range(9, 0, -1): \n        if fA%i == 0 and fB%i == 0: \n            return fA%i \n    return fA%10\n\n# Example usage: \nA = 10\nB = 20\nprint(compute_Last_Digit(A,B)) # Output: 1\n\nA = 15\nB = 5\nprint(compute_Last_Digit(A,B)) # Output: 5 ",
        "generated_testcode": "assert compute_Last_Digit(10, 20) == 0\n",
        "test": "assert compute_Last_Digit(2,4) == 2\nassert compute_Last_Digit(6,8) == 6\nassert compute_Last_Digit(1,2) == 2",
        "canonical_solution": "def compute_Last_Digit(A,B): \r\n    variable = 1\r\n    if (A == B): \r\n        return 1\r\n    elif ((B - A) >= 5):  \r\n        return 0\r\n    else:   \r\n        for i in range(A + 1,B + 1): \r\n            variable = (variable * (i % 10)) % 10\r\n        return variable % 10"
    },
    {
        "number": 48,
        "prompt": "Write a python function to set all odd bits of a given number.\ndef odd_bit_set_number(n):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    # Binary representation of n\n    binary_rep = bin(n)[2:]\n    # Reverse the binary representation\n    binary_rep = binary_rep[::-1]\n    # Set all odd bits to 1\n    binary_rep = ''.join([bit if int(bit) % 2 == 0 else '1' for bit in binary_rep])\n    # Reverse the binary representation back\n    binary_rep = binary_rep[::-1]\n    # Convert it back to an integer\n    return int(binary_rep, 2)\n\n# Test the function\nprint(odd_bit_set_number(12)) # Output: 15\nprint(odd_bit_set_number(13)) # Output: 15\nprint(odd_bit_set_number(0)) # Output: 3\nprint(odd_bit_set_number(1)) # Output: 3\nprint(odd_bit_set_number(5)) # Output: 7\nprint(odd_bit_set_number(8)) # Output: 15\nprint(odd_bit_set_number(9)) # Output: 11\nprint(odd_bit_set_number(10)) # Output: 11\n\n\"\"\"\nOutput:\n1010\n1011\n1\n1\n111\n1011\n1011\n1011\n\"\"\" ",
        "generated_testcode": "assert odd_bit_set_number(10) == 15\n",
        "test": "assert odd_bit_set_number(10) == 15\nassert odd_bit_set_number(20) == 21\nassert odd_bit_set_number(30) == 31",
        "canonical_solution": "def odd_bit_set_number(n):\r\n    count = 0;res = 0;temp = n\r\n    while temp > 0:\r\n        if count % 2 == 0:\r\n            res |= (1 << count)\r\n        count += 1\r\n        temp >>= 1\r\n    return (n | res)"
    },
    {
        "number": 49,
        "prompt": "Write a function to extract every first or specified element from a given two-dimensional list.\ndef specified_element(nums, N):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    new_list = []\n    for i in nums:\n        new_list.append(i[N])\n    return new_list\n\n# Example usage:\nnums = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nprint(specified_element(nums, 1))  # Output: [2, 5, 8]\nprint(specified_element(nums, 0))  # Output: [1, 4, 7]\nprint(specified_element(nums, 2))  # Output: [3, 6, 9]\n\n# Example usage:\nnums = [[1, 2, 3, 4, 5], [6, 7, 8, 9, 10], [11, 12, 13, 14]]\nprint(specified_element(nums, 0))  # Output: [1, 6, 11]\nprint(specified_element(nums, 3))  # Output: [4, 9, 14] ",
        "generated_testcode": "assert specified_element([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 0) == [1, 4, 7]\n",
        "test": "assert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],0)==[1, 4, 7]\nassert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],2)==[3, 6, 9]\nassert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],1)==[2,5,1]",
        "canonical_solution": "def specified_element(nums, N):\r\n    result = [i[N] for i in nums]\r\n    return result\r\n    "
    },
    {
        "number": 50,
        "prompt": "Write a function to find the list with minimum length using lambda function.\ndef min_length_list(input_list):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    return list(filter(lambda x: len(x) == min(map(len, input_list), input_list))\n\n# Test the function with a sample input\ninput_list = [\"hello\", \"world\", \"python\", \"programming\"]\nprint(min_length_list(input_list))  # Output: [\"hello\", \"world\"]\n\n# Test the function with an empty input\ninput_list = []\nprint(min_length_list(input_list))  # Output: []\n\n# Test the function with a single element input\ninput_list = [\"single\"]\nprint(min_length_list(input_list))  # Output: [\"single\"]\n\n# Test the function with a input with all elements of same length\ninput_list = [\"apple\", \"banana\", \"cherry\", \"date\"]\nprint(min_length_list(input_list))  # Output: [\"apple\", \"banana\", \"cherry\", \"date\"]\n\n# Test the function with a input with a list of integers\ninput_list = [1, 2, 3, 4, 5]\nprint(min_length_list(input_list))  # Output: []\n\n# Test the function with a input with a single integer\ninput_list = [1]\nprint(min_length_list(input_list))  # Output: []\n\n# Test the function with a input with a single string\ninput_list = [\"abc\"]\nprint(min_length_list(input_list))  # Output: [\"abc\"] ",
        "generated_testcode": "assert min_length_list([]) == None\n",
        "test": "assert min_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(1, [0])\nassert min_length_list([[1,2,3,4,5],[1,2,3,4],[1,2,3],[1,2],[1]])==(1,[1])\nassert min_length_list([[3,4,5],[6,7,8,9],[10,11,12],[1,2]])==(2,[1,2])",
        "canonical_solution": "def min_length_list(input_list):\r\n    min_length = min(len(x) for x in input_list )  \r\n    min_list = min(input_list, key = lambda i: len(i))\r\n    return(min_length, min_list)"
    },
    {
        "number": 51,
        "prompt": "Write a function to print check if the triangle is equilateral or not.\ndef check_equilateral(x,y,z):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    if x==y==z:\n        return True\n    else:\n        return False\n\n#write a function to check if the triangle is isosceles or not.\ndef check_isosceles(x,y,z):\n    if x==y or y==z or x==z:\n        return True\n    else:\n        return False\n\n#write a function to check if the triangle is scalene or not.\ndef check_scalene(x,y,z):\n    if x!=y!=z:\n        return True\n    else:\n        return False\n\n#now use the above functions to check if the triangle is valid or not and print the triangle type accordingly.\na=int(input(\"Enter first side of triangle: \"))\nb=int(input(\"Enter second side of triangle: \"): \nc=int(input(\"Enter third side of triangle: \")\n\nif a+b>c and b+c>a and c+a>b: #checking if triangle is valid or not\n    if check_equilateral(a,b,c):\n        print(\"Equilateral triangle\")\n    elif check_isosceles(a,b,c):\n        print(\"Isosceles triangle\")\n    elif check_scalene(a,b,c):\n        print(\"Scalene triangle\")\n    else:\n        print(\"Invalid triangle\")\nelse:\n    print(\"Invalid triangle\") ",
        "generated_testcode": "assert check_equilateral(1,1,1) == True\n",
        "test": "assert check_equilateral(6,8,12)==False \nassert check_equilateral(6,6,12)==False\nassert check_equilateral(6,6,6)==True",
        "canonical_solution": "def check_equilateral(x,y,z):\r\n  if x == y == z:\r\n\t   return True\r\n  else:\r\n     return False"
    },
    {
        "number": 52,
        "prompt": "Write a function to caluclate area of a parallelogram.\ndef parallelogram_area(b,h):\n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    area = b * h\n    return area\n\n#Test the function with values\nprint(parallelogram_area(10,20)) #Should return 200\nprint(parallelogram_area(2,3.5)) #Should return 7.0\n\n#Write a function to calculate the perimeter of a rectangle\ndef rectangle_perimeter(a,b):\n    perimeter = 2*(a+b)\n    return perimeter\n\n#Test the function with values\nprint(rectangle_perimeter(5, 10)) #Should return 30\nprint(rectangle_perimeter(7, 4)) #Should return 22\n\n#Write a function to calculate the volume of a sphere\ndef sphere_volume(r):\n    volume = 4/3 * 3.14159 * r**3\n    return volume\n\n#Test the function with values\nprint(sphere_volume(5)) #Should return 523.6\nprint(sphere_volume(3)) #Should return 942.478\n\n#Write a function to calculate the area of a circle\ndef circle_area(r):\n    area = 3.14159 * r**2\n    return area\n\n#Test the function with values\nprint(circle_area(5)) #Should return 78.5\nprint(circle_area(3)) #Should return 28.27433\n\n#Write a function to calculate the surface area of a cube",
        "generated_testcode": "assert parallelogram_area(5, 10) == 50\n",
        "test": "assert parallelogram_area(10,20)==200\nassert parallelogram_area(15,20)==300\nassert parallelogram_area(8,9)==72",
        "canonical_solution": "def parallelogram_area(b,h):\r\n  area=b*h\r\n  return area"
    },
    {
        "number": 53,
        "prompt": "Write a python function to check whether the first and last characters of a given string are equal or not.\ndef check_Equality(str):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    if str[0] == str[-1]:\n        return True\n    else:\n        return False\n\nprint(check_Equality(\"hello\"))\nprint(check_Equality(\"world\"))\nprint(check_Equality(\"Python\"))\n\n# Output: \n# False\n# True\n# False ",
        "generated_testcode": "assert check_Equality(\"hello\") == True\n",
        "test": "assert check_Equality(\"abcda\") == \"Equal\"\nassert check_Equality(\"ab\") == \"Not Equal\"\nassert check_Equality(\"mad\") == \"Not Equal\"",
        "canonical_solution": "def check_Equality(str):\r\n  if (str[0] == str[-1]):  \r\n    return (\"Equal\") \r\n  else:  \r\n    return (\"Not Equal\") "
    },
    {
        "number": 54,
        "prompt": "Write a function to sort the given array by using counting sort.\ndef counting_sort(my_list):\n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    max_val = max(my_list)\n    min_val = min(my_list)\n    count = [0] * (max_val - min_val + 1)\n    output = [0] * len(my_list)\n\n    # Count the occurrences of each element\n    for i in my_list:\n        count[i - min_val] += 1\n\n    # Modify the count array to contain the position of each element in the output list\n    for i in range(1, len(count)):\n        count[i] += count[i - 1]\n\n    # Build the output list\n    for i in reversed(my_list):\n        output[count[i - min_val] - 1] = i\n        count[i - min_val] -= 1\n\n    return output\n\n\n# Test the function with an example\nmy_list = [3, 1, 4, 1, 1, 2, 2, 2, 4, 3, 1, 4, 3, 2, 1]\nprint(counting_sort(my_list))\n# Output: [1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4]\n",
        "generated_testcode": "assert counting_sort(my_list) == sorted(my_list)\n\n# Test the function with an example\nmy_list = [3, 1, 4, 1, 1, 5, 9, 2, 6, 5, 3, 5, 3, 7]\nprint(counting_sort(my_list)) # should print [1, 1, 1, 2, 3, 3, 3, 4, 5, 5, 5, 6, 7, 9]\n\n",
        "test": "assert counting_sort([1,23,4,5,6,7,8]) == [1, 4, 5, 6, 7, 8, 23]\nassert counting_sort([12, 9, 28, 33, 69, 45]) == [9, 12, 28, 33, 45, 69]\nassert counting_sort([8, 4, 14, 3, 2, 1]) == [1, 2, 3, 4, 8, 14]",
        "canonical_solution": "def counting_sort(my_list):\r\n    max_value = 0\r\n    for i in range(len(my_list)):\r\n        if my_list[i] > max_value:\r\n            max_value = my_list[i]\r\n    buckets = [0] * (max_value + 1)\r\n    for i in my_list:\r\n        buckets[i] += 1\r\n    i = 0\r\n    for j in range(max_value + 1):\r\n         for a in range(buckets[j]):\r\n             my_list[i] = j\r\n             i += 1\r\n    return my_list"
    },
    {
        "number": 55,
        "prompt": "Write a function to find t-nth term of geometric series.\ndef tn_gp(a,n,r):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    return a*((1-r**n)/(1-r)\n\n# Write a function to find sum of series\ndef sum_gp(a,n,r):\n    return a*(1-r**n)/(1-r)\n\n# Write a function to find nth term of fibonacci series\ndef fibonacci(n):\n    if n<=0:\n        return \"Invalid input\"\n    elif n==1:\n        return 0\n    elif n==2:\n        return 1\n    else:\n        return fibonacci(n-1)+fibonacci(n-2)\n\n# Write a function to find sum of series of fibonacci numbers\ndef sum_fibonacci(n):\n    if n<=0:\n        return \"Invalid input\"\n    elif n==1:\n        return 0\n    elif n==2:\n        return 1\n    else:\n        return n+sum_fibonacci(n-1)\n\n# Write a function to find sum of series of numbers\ndef sum_series(n):\n    if n<=0:\n        return \"Invalid input\"\n    elif n==1:\n        return 1\n    else:\n        return n+sum_series(n-1)\n\n# Write a function to find nth term of arithmetric series\ndef an(a,d,n):\n    return a+(n-1)*d\n\n# Write a function to find sum of arithmetric series\ndef sum_an(a,d",
        "generated_testcode": "assert tn_gp(1,3,2) == 7\n",
        "test": "assert tn_gp(1,5,2)==16\nassert tn_gp(1,5,4)==256\nassert tn_gp(2,6,3)==486",
        "canonical_solution": "import math\r\ndef tn_gp(a,n,r):\r\n  tn = a * (math.pow(r, n - 1))\r\n  return tn"
    },
    {
        "number": 56,
        "prompt": "Write a python function to check if a given number is one less than twice its reverse.\ndef rev(num):    \n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    if num < 10:\n        return num\n    else:\n        return int(str(num)[::-1]) - num == num - 1:\n        \nprint(rev(15))\nprint(rev(20))\nprint(rev(100))\nprint(rev(99))\nprint(rev(101))\nprint(rev(111)\n\n\"\"\"\nExplanation:\nrev(num) function takes an integer as input and checks if it is less than twice its reverse. If the number is less than 10, it is a single digit number and hence, it will always be less than twice its reverse. If not, it converts the number to a string and reverses it using slicing [::-1]. Then it compares the original number with its reverse and returns True if it is one less than the difference of the reverse of the number and the original number.\n\nExample:\nnum = 15\nstr(num) = '15'\nrev(num) = int('51') = 51\ndifference = 51 - 15 = 36\nnum - 1 = 14\nif 36 == 14:\n    return True (15 is one less than twice its reverse)\n\nnum = 20\nstr(num) = '20'\nrev(num) = int('02') = 2\ndifference = 2 - 20 = -18\nnum - 1 = 19\nif -18 == ",
        "generated_testcode": "assert rev(121) == True\n",
        "test": "assert check(70) == False\nassert check(23) == False\nassert check(73) == True",
        "canonical_solution": "def rev(num):    \r\n    rev_num = 0\r\n    while (num > 0):  \r\n        rev_num = (rev_num * 10 + num % 10) \r\n        num = num // 10  \r\n    return rev_num  \r\ndef check(n):    \r\n    return (2 * rev(n) == n + 1)  "
    },
    {
        "number": 57,
        "prompt": "Write a python function to find the largest number that can be formed with the given digits.\ndef find_Max_Num(arr,n) : \n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    arr.sort(reverse = True)\n    return int(\"\".join(str(x) for x in arr))\n    \n# take input\nn = int(input())\narr = list(map(int,input().split()))\n# print the largest number that can be formed with the given digits \nprint(find_Max_Num(arr,n)) ",
        "generated_testcode": "assert find_Max_Num([1,2,3,4,5],4) == 53421\n",
        "test": "assert find_Max_Num([1,2,3],3) == 321\nassert find_Max_Num([4,5,6,1],4) == 6541\nassert find_Max_Num([1,2,3,9],4) == 9321",
        "canonical_solution": "def find_Max_Num(arr,n) : \r\n    arr.sort(reverse = True) \r\n    num = arr[0] \r\n    for i in range(1,n) : \r\n        num = num * 10 + arr[i] \r\n    return num "
    },
    {
        "number": 58,
        "prompt": "Write a python function to check whether the given two integers have opposite sign or not.\ndef opposite_Signs(x,y): \n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    if x>0 and y<0 or x<0 and y>0: \n        return True \n    else: \n        return False \nprint(opposite_Signs(-2,-5)) #True ",
        "generated_testcode": "assert (opposite_Signs(5, -5) == True)\n",
        "test": "assert opposite_Signs(1,-2) == True\nassert opposite_Signs(3,2) == False\nassert opposite_Signs(-10,-10) == False",
        "canonical_solution": "def opposite_Signs(x,y): \r\n    return ((x ^ y) < 0); "
    },
    {
        "number": 59,
        "prompt": "Write a function to find the nth octagonal number.\ndef is_octagonal(n): \n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": true,
        "answer": "    # All octagonal numbers are of the form (n * (3n - 2) or n * (3n + 1) / 2)\n    a = n * (3 * n - 2)\n    b = n * (3 * n + 1) // 2\n    return n in (a, b) \n\ndef octagonal_number(n):\n    for i in range(1, n + 1):\n        if is_octagonal(i):\n            return i\n    return None\n\n# Test the function\nprint(octagonal_number(1)) # 1\nprint(octagonal_number(2)) # 8\nprint(octagonal_number(3)) # 28\nprint(octagonal_number(4)) # 56\nprint(octagonal_number(5)) # 96\nprint(octagonal_number(6)) # 156\nprint(octagonal_number(7)) # 236\nprint(octagonal_number(8)) # 356\nprint(octagonal_number(9)) # 528\nprint(octagonal_number(10)) # 789\nprint(octagonal_number(11)) # None\nprint(octagonal_number(12)) # None\nprint(octagonal_number(13)) # None\nprint(octagonal_number(14)) # None\nprint(octagonal_number(15)) #",
        "generated_testcode": "assert is_octagonal(1) == 1\n",
        "test": "assert is_octagonal(5) == 65\nassert is_octagonal(10) == 280\nassert is_octagonal(15) == 645",
        "canonical_solution": "def is_octagonal(n): \r\n\treturn 3 * n * n - 2 * n "
    },
    {
        "number": 60,
        "prompt": "Write a function to find the maximum length of the subsequence with difference between adjacent elements for the given array.\ndef max_len_sub( arr, n): \n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    if n <= 1:\n        return 1\n    max_len = 1\n    count = 1\n    for i in range(1, n): \n        if abs(arr[i] - arr[i-1]) <= 1: \n            count += 1\n        else: \n            max_len = max(max_len, count) \n            count = 1\n    max_len = max(max_len, count)\n    return max_len\n\n\narr = [2, 6, 1, 9, 11, 5, 3, 7] \nn = len(arr)\nprint(\"Length of maximum subsequence with adjacent elements is\", max_len_sub(arr, n)) \n\n# Output: Length of maximum subsequence with adjacent elements is 4 ",
        "generated_testcode": "assert max_len_sub([1, 2, 3, 5, 7, 9, 11, 13], 6) == 4\n",
        "test": "assert max_len_sub([2, 5, 6, 3, 7, 6, 5, 8], 8) == 5\nassert max_len_sub([-2, -1, 5, -1, 4, 0, 3], 7) == 4\nassert max_len_sub([9, 11, 13, 15, 18], 5) == 1",
        "canonical_solution": "def max_len_sub( arr, n): \r\n\tmls=[] \r\n\tmax = 0\r\n\tfor i in range(n): \r\n\t\tmls.append(1) \r\n\tfor i in range(n): \r\n\t\tfor j in range(i): \r\n\t\t\tif (abs(arr[i] - arr[j]) <= 1 and mls[i] < mls[j] + 1): \r\n\t\t\t\tmls[i] = mls[j] + 1\r\n\tfor i in range(n): \r\n\t\tif (max < mls[i]): \r\n\t\t\tmax = mls[i] \r\n\treturn max"
    },
    {
        "number": 61,
        "prompt": "Write a python function to count number of substrings with the sum of digits equal to their length.\ndef count_Substrings(s,n):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    count=0\n    for i in range(n):\n        for j in range(i+1,n+1):\n            temp=s[i:j]\n            if sum(int(k) for k in temp)==len(temp):\n                count+=1\n    return count\n#test the function\ns=\"1234567\"\nn=len(s)\nprint(count_Substrings(s,n))\n\n#Output: 28\n#Explanation: 1, 2, 3, 4, 5, 6, 7, 12, 123, 1234, 234, 12345, 234, 34, 4, 5, 6, 7, 12, 123, 1234, 234, 345, 45, 5, 6, 7, 12, 123, 1234, 234, 345, 456, 56, 6, 7, 12, 123, 1234, 234, 345, 456, 567, 12, 123, 1234, 234, 345, 456, 567, 1234, 2345, 345, ",
        "generated_testcode": "assert count_Substrings(\"12345\", 5) == 1\n",
        "test": "assert count_Substrings('112112',6) == 6\nassert count_Substrings('111',3) == 6\nassert count_Substrings('1101112',7) == 12",
        "canonical_solution": "from collections import defaultdict\r\ndef count_Substrings(s,n):\r\n    count,sum = 0,0\r\n    mp = defaultdict(lambda : 0)\r\n    mp[0] += 1\r\n    for i in range(n):\r\n        sum += ord(s[i]) - ord('0')\r\n        count += mp[sum - (i + 1)]\r\n        mp[sum - (i + 1)] += 1\r\n    return count"
    },
    {
        "number": 62,
        "prompt": "Write a python function to find smallest number in a list.\ndef smallest_num(xs):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    smallest = xs[0]\n    for x in xs:\n        if x < smallest:\n            smallest = x\n    return smallest\n\n# Test the function with sample inputs\nprint(smallest_num([10, 5, 7, 3, 8, 2])) # Output: 2\nprint(smallest_num([-1, -5, -7, -3, -8, -2])) # Output: -8\nprint(smallest_num([10, -5, 7, 3, 8, -2])) # Output: -5\n\n# Time Complexity: O(n) \n# Space Complexity: O(1) ",
        "generated_testcode": "assert smallest_num([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 1\n",
        "test": "assert smallest_num([10, 20, 1, 45, 99]) == 1\nassert smallest_num([1, 2, 3]) == 1\nassert smallest_num([45, 46, 50, 60]) == 45",
        "canonical_solution": "def smallest_num(xs):\n  return min(xs)\n"
    },
    {
        "number": 63,
        "prompt": "Write a function to find the maximum difference between available pairs in the given tuple list.\ndef max_difference(test_list):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    min_value = test_list[0]\n    max_value = test_list[0]\n    for value in test_list:\n        if value < min_value:\n            min_value = value\n        if value > max_value:\n            max_value = value\n    return max_value - min_value\n\n#Test case\ntest_list = (2, 4, 9, 1, 5, 3, 8, 7)\nprint(max_difference(test_list)) # Output: 7 (9 - 2)\n\n# Test case 2\ntest_list = (100, 15, 20, 80)\nprint(max_difference(test_list)) # Output: 60 (80 - 20)\n\n# Test case 3\ntest_list = (10, 9, 8, 7, 6, 5, 4, 3, 2, 1)\nprint(max_difference(test_list)) # Output: 9 (10 - 1)\n\n# Test case 4\ntest_list = (-10, -20, -30, -40, -50)\nprint(max_difference(test_list)) # Output: 40 (-10 - -50)\n\n# Test case 5\ntest_list = (10, 10, 10, 10, 10, 10)\nprint(",
        "generated_testcode": "assert max_difference((1, 2, 3, 4, 5, 6, 7, 8, 9, 10) == 9\n",
        "test": "assert max_difference([(3, 5), (1, 7), (10, 3), (1, 2)]) == 7\nassert max_difference([(4, 6), (2, 17), (9, 13), (11, 12)]) == 15\nassert max_difference([(12, 35), (21, 27), (13, 23), (41, 22)]) == 23",
        "canonical_solution": "def max_difference(test_list):\r\n  temp = [abs(b - a) for a, b in test_list]\r\n  res = max(temp)\r\n  return (res) "
    },
    {
        "number": 64,
        "prompt": "Write a function to sort a list of tuples using lambda.\ndef subject_marks(subjectmarks):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    return sorted(subjectmarks, key=lambda x: x[1], reverse=True)\n\n# Test the function with the following input\nprint(subject_marks([(\"Maths\", 80), (\"Science\", 75), (\"English\", 90), (\"Social\", 85)]))\n# Expected Output: [('Maths', 80), ('English', 90), ('Science', 75), ('Social', 85)]\n\n# Output should be sorted in descending order based on the marks. ",
        "generated_testcode": "assert subject_marks(subjectmarks=[(\"Maths\", 85), (\"Science\", 90), (\"English\", 75), (\"Social\", 80)]) == [(\"Maths\", 85), (\"Science\", 90), (\"Social\", 80), (\"English\", 75)]\n",
        "test": "assert subject_marks([('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])==[('Social sciences', 82), ('English', 88), ('Science', 90), ('Maths', 97)]\nassert subject_marks([('Telugu',49),('Hindhi',54),('Social',33)])==([('Social',33),('Telugu',49),('Hindhi',54)])\nassert subject_marks([('Physics',96),('Chemistry',97),('Biology',45)])==([('Biology',45),('Physics',96),('Chemistry',97)])",
        "canonical_solution": "def subject_marks(subjectmarks):\r\n#subject_marks = [('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])\r\n subjectmarks.sort(key = lambda x: x[1])\r\n return subjectmarks"
    },
    {
        "number": 65,
        "prompt": "Write a function of recursion list sum.\ndef recursive_list_sum(data_list):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    if len(data_list) == 0:\n        return 0\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])\n\n# Example usage:\nprint(recursive_list_sum([1, 2, 3, 4, 5]) == 1 + 2 + 3 + 4 + 5)\nprint(recursive_list_sum([5, 10, 15, 20, 25]) == 5 + 10 + 15 + 20 + 25)\nprint(recursive_list_sum([]) == 0)\n\n# Write a function of factorial using recursion\ndef factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)\n\n# Example usage:\nprint(factorial(5) == 120)\nprint(factorial(0) == 1)\nprint(factorial(1) == 1)\nprint(factorial(4) == 24)\n\n# Write a function of reverse a list using recursion\ndef reverse_list(data_list):\n    if len(data_list) == 0:\n        return []\n    else:\n        return reverse_list(data_list[1:]) + [data_list[0]]\n\n# Example usage:\nprint(reverse_list([1, 2, 3, 4, 5]) ==",
        "generated_testcode": "assert recursive_list_sum([1, 2, 3, 4, 5]) == 15\n",
        "test": "assert recursive_list_sum(([1, 2, [3,4],[5,6]]))==21\nassert recursive_list_sum(([7, 10, [15,14],[19,41]]))==106\nassert recursive_list_sum(([10, 20, [30,40],[50,60]]))==210",
        "canonical_solution": "def recursive_list_sum(data_list):\r\n\ttotal = 0\r\n\tfor element in data_list:\r\n\t\tif type(element) == type([]):\r\n\t\t\ttotal = total + recursive_list_sum(element)\r\n\t\telse:\r\n\t\t\ttotal = total + element\r\n\treturn total"
    },
    {
        "number": 66,
        "prompt": "Write a python function to count positive numbers in a list.\ndef pos_count(list):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    count = 0\n    for num in list:\n        if num > 0:\n            count += 1\n    return count\n\n# Example usage:\nlst = [1, -2, 3, 4, -5, 6, -7, 8, 9]\nprint(pos_count(lst)) # Output: 4\n\n# You can modify the function to count the number of negative numbers as well\ndef pos_neg_count(list):\n    pos_count = 0\n    neg_count = 0\n    for num in list:\n        if num > 0:\n            pos_count += 1\n        elif num < 0:\n            neg_count += 1\n    return pos_count, neg_count\n\n# Example usage:\nlst = [1, -2, 3, -4, 5, -6, 7, -8, 9]\nprint(pos_neg_count(lst)) # Output: (4, 3)\n\n# You can modify the function to count the number of zeros as well\ndef pos_neg_zero_count(list):\n    pos_count = 0\n    neg_count = 0\n    zero_count = 0\n    for num in list:\n        if num > 0:\n            pos_count += 1\n        elif num < 0:\n            neg_count += 1\n        elif num == 0:\n            zero_count += 1\n    return pos_count, neg_count, zero_count\n",
        "generated_testcode": "assert pos_count([1, -2, 3, 4, -5, 6, -7]) == 3\n",
        "test": "assert pos_count([1,-2,3,-4]) == 2\nassert pos_count([3,4,5,-1]) == 3\nassert pos_count([1,2,3,4]) == 4",
        "canonical_solution": "def pos_count(list):\r\n  pos_count= 0\r\n  for num in list: \r\n    if num >= 0: \r\n      pos_count += 1\r\n  return pos_count "
    },
    {
        "number": 67,
        "prompt": "Write a function to find the number of ways to partition a set of bell numbers.\ndef bell_number(n):   \n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": true,
        "answer": "    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        return bell_number(n-1) + bell_number(n-2)\n\ndef partition(n):\n    return bell_number(n)\n\nprint(partition(5)) # Output: 15\nprint(partition(4)) # Output: 10\nprint(partition(3)) # Output: 5\nprint(partition(2)) # Output: 2 ",
        "generated_testcode": "assert bell_number(0) == 1\n",
        "test": "assert bell_number(2)==2\nassert bell_number(10)==115975\nassert bell_number(56)==6775685320645824322581483068371419745979053216268760300",
        "canonical_solution": "def bell_number(n):   \r\n    bell = [[0 for i in range(n+1)] for j in range(n+1)] \r\n    bell[0][0] = 1\r\n    for i in range(1, n+1): \r\n        bell[i][0] = bell[i-1][i-1]  \r\n        for j in range(1, i+1): \r\n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]   \r\n    return bell[n][0] "
    },
    {
        "number": 68,
        "prompt": "Write a python function to check whether the given array is monotonic or not.\ndef is_Monotonic(A): \n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    n = len(A)\n    if n == 1:\n        return True\n    flag = 0\n    for i in range(1, n): \n        if A[i] > A[i-1]: \n            flag = 1\n            break\n        if A[i] < A[i-1]: \n            flag = -1\n            break\n    for i in range(1, n): \n        if (flag == 0): \n            return True\n        elif (flag == 1 and A[i] < A[i-1]) or (flag == -1 and A[i] > A[i-1]): \n            return False\n    return True\n\nA = [1, 2, 3, 4, 5]\nif is_Monotonic(A): \n    print(\"The given array is monotonic\")\nelse: \n    print(\"The given array is not monotonic\") ",
        "generated_testcode": "assert is_Monotonic([1, 2, 3, 4, 5]) == True\n",
        "test": "assert is_Monotonic([6, 5, 4, 4]) == True\nassert is_Monotonic([1, 2, 2, 3]) == True\nassert is_Monotonic([1, 3, 2]) == False",
        "canonical_solution": "def is_Monotonic(A): \r\n    return (all(A[i] <= A[i + 1] for i in range(len(A) - 1)) or\r\n            all(A[i] >= A[i + 1] for i in range(len(A) - 1))) "
    },
    {
        "number": 69,
        "prompt": "Write a function to check whether a list contains the given sublist or not.\ndef is_sublist(l, s):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    if len(s) > len(l):\n        return False\n    for i in range(len(l) - len(s) + 1):\n        if l[i:i+len(s)] == s:\n            return True\n    return False\n\n# Test the function\nl = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\ns = [3, 4, 5]\nprint(is_sublist(l, s)) # Output: True\ns = [1, 4, 6]\nprint(is_sublist(l, s)) # Output: False\ns = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nprint(is_sublist(l, s)) # Output: True\ns = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]\nprint(is_sublist(l, s)) # Output: False\ns = [2, 3, 4]\nprint(is_sublist(l, s)) # Output: True\ns = [1, 2, 3, 4, 5, 7]\nprint(is_sublist(l, s)) # Output: False\ns = [10, 9, 8, 7, 6, 5, 4, ",
        "generated_testcode": "assert is_sublist([1, 2, 3, 4, 5, 6], [2, 3]) == True\n",
        "test": "assert is_sublist([2,4,3,5,7],[3,7])==False\nassert is_sublist([2,4,3,5,7],[4,3])==True\nassert is_sublist([2,4,3,5,7],[1,6])==False",
        "canonical_solution": "def is_sublist(l, s):\r\n\tsub_set = False\r\n\tif s == []:\r\n\t\tsub_set = True\r\n\telif s == l:\r\n\t\tsub_set = True\r\n\telif len(s) > len(l):\r\n\t\tsub_set = False\r\n\telse:\r\n\t\tfor i in range(len(l)):\r\n\t\t\tif l[i] == s[0]:\r\n\t\t\t\tn = 1\r\n\t\t\t\twhile (n < len(s)) and (l[i+n] == s[n]):\r\n\t\t\t\t\tn += 1\t\t\t\t\r\n\t\t\t\tif n == len(s):\r\n\t\t\t\t\tsub_set = True\r\n\treturn sub_set"
    },
    {
        "number": 70,
        "prompt": "Write a function to find whether all the given tuples have equal length or not.\ndef find_equal_tuple(Input, k):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    if len(Input) != k:\n        return False\n    for i in range(1, len(Input)):\n        if len(Input[i]) != len(Input[i - 1]):\n            return False\n    return True\n\n\n# Test the function with sample input\nprint(find_equal_tuple([(\"apple\", \"banana\", \"orange\"), (\"apple\", \"banana\", \"orange\", \"grape\"), (\"apple\", \"banana\", \"orange\", \"grape\")], 3))  # Should return True\nprint(find_equal_tuple([(\"apple\", \"banana\", \"orange\"), (\"apple\", \"banana\", \"orange\", \"grape\"), (\"apple\", \"banana\", \"orange\", \"grape\", \"kiwi\")], 3))  # Should return False\nprint(find_equal_tuple([(\"apple\", \"banana\", \"orange\"), (\"apple\", \"banana\"), (\"apple\", \"banana\", \"orange\", \"grape\", \"kiwi\"), (\"apple\", \"banana\", \"orange\", \"grape\", \"kiwi\")], 4))  # Should return False\nprint(find_equal_tuple([(\"apple\", \"banana\", \"orange\"), (\"apple\", \"banana\", \"orange\", \"grape\", \"kiwi\"), (\"apple\", \"banana\", \"orange\", \"grape\", \"kiwi\"), (\"apple\", \"banana\", \"orange\", \"grape\", \"kiwi\")], 4))  # Should return True\n",
        "generated_testcode": "assert find_equal_tuple([(1, 2, 3), (4, 5, 6), (7, 8, 9)], 3) == True\n",
        "test": "assert get_equal([(11, 22, 33), (44, 55, 66)], 3) == 'All tuples have same length'\nassert get_equal([(1, 2, 3), (4, 5, 6, 7)], 3) == 'All tuples do not have same length'\nassert get_equal([(1, 2), (3, 4)], 2) == 'All tuples have same length'",
        "canonical_solution": "def find_equal_tuple(Input, k):\r\n  flag = 1\r\n  for tuple in Input:\r\n    if len(tuple) != k:\r\n      flag = 0\r\n      break\r\n  return flag\r\ndef get_equal(Input, k):\r\n  if find_equal_tuple(Input, k) == 1:\r\n    return (\"All tuples have same length\")\r\n  else:\r\n    return (\"All tuples do not have same length\")"
    },
    {
        "number": 71,
        "prompt": "Write a function to sort a list of elements using comb sort.\ndef comb_sort(nums):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    def swap(i, j):\n        nums[i], nums[j] = nums[j], nums[i]\n\n    gap = len(nums)\n    shrink = 1.3\n    sorted = False\n    while not sorted:\n        gap = int(gap / shrink)\n        if gap < 1:\n            gap = 1\n            sorted = True\n        for i in range(len(nums) - gap):\n            if nums[i] > nums[i + gap]:\n                swap(i, i + gap)\n                sorted = False\n\n        for i in range(len(nums) - gap - 1):\n            if nums[i] > nums[i + gap]:\n                swap(i, i + gap)\n                sorted = False\n\n    return nums\n\n\n# Test the function with an example\nnums = [5, 1, 12, 8, 3, 7, 2]\nprint(comb_sort(nums))  # Output: [1, 2, 3, 5, 7, 8, 12]\n\n# Example usage:\n# nums = [5, 1, 12, 8, 3, 7, 2]\n# sorted_nums = comb_sort(nums)\n# print(sorted_nums)  # Output: [1, 2, 3, 5, 7, 8, 12]\n\n",
        "generated_testcode": "assert comb_sort([]).sort() == []\n",
        "test": "assert comb_sort([5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79]\nassert comb_sort([41, 32, 15, 19, 22]) == [15, 19, 22, 32, 41]\nassert comb_sort([99, 15, 13, 47]) == [13, 15, 47, 99]",
        "canonical_solution": "def comb_sort(nums):\r\n    shrink_fact = 1.3\r\n    gaps = len(nums)\r\n    swapped = True\r\n    i = 0\r\n    while gaps > 1 or swapped:\r\n        gaps = int(float(gaps) / shrink_fact)\r\n        swapped = False\r\n        i = 0\r\n        while gaps + i < len(nums):\r\n            if nums[i] > nums[i+gaps]:\r\n                nums[i], nums[i+gaps] = nums[i+gaps], nums[i]\r\n                swapped = True\r\n            i += 1\r\n    return nums"
    },
    {
        "number": 72,
        "prompt": "Write a python function to check whether the given number can be represented as difference of two squares or not.\ndef dif_Square(n): \n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    # we need to check whether the number is equal to sum of two squares of two integers or not\n    for i in range(1, int(n**0.5)+1):\n        j = 1\n        while(i*i+j*j<=n):\n            if (i*i+j*j == n):\n                return True\n            j+=1\n    return False\n#Testing the function\nn = 29\nif dif_Square(n):\n    print(n, \"can be represented as the difference of two squares\")\nelse:\n    print(n, \"cannot be represented as the difference of two squares\")\nn = 30\nif dif_Square(n):\n    print(n, \"can be represented as the difference of two squares\")\nelse:\n    print(n, \"cannot be represented as the difference of two squares\") ",
        "generated_testcode": "assert (dif_Square(25) == True)\n",
        "test": "assert dif_Square(5) == True\nassert dif_Square(10) == False\nassert dif_Square(15) == True",
        "canonical_solution": "def dif_Square(n): \r\n    if (n % 4 != 2): \r\n        return True\r\n    return False"
    },
    {
        "number": 73,
        "prompt": "Write a function to split the given string with multiple delimiters by using regex.\ndef multiple_split(text):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    import re\n    return re.split('[,|;|:|-]', text)\n\nprint(multiple_split(\"Hello:World,Python;Is;Awesome-Programming\"))\n\n#Output: ['Hello', 'World', 'Python', 'Is', 'Awesome', 'Programming']\n\n# Explanation: \n# The function takes a string as input and uses the re.split() method with multiple delimiters separated by the '|' operator.\n# The regex pattern used is [,|;|:|-] which means it will split the string on either comma, semicolon or hyphen. ",
        "generated_testcode": "assert multiple_split(\"Hello, world! I am a programmer.\") == [\"Hello\", \"world\", \"I\", \"am\", \"a\", \"programmer\"]\n",
        "test": "assert multiple_split('Forces of the \\ndarkness*are coming into the play.') == ['Forces of the ', 'darkness', 'are coming into the play.']\nassert multiple_split('Mi Box runs on the \\n Latest android*which has google assistance and chromecast.') == ['Mi Box runs on the ', ' Latest android', 'which has google assistance and chromecast.']\nassert multiple_split('Certain services\\nare subjected to change*over the seperate subscriptions.') == ['Certain services', 'are subjected to change', 'over the seperate subscriptions.']",
        "canonical_solution": "import re\r\ndef multiple_split(text):\r\n  return (re.split('; |, |\\*|\\n',text))"
    },
    {
        "number": 74,
        "prompt": "Write a function to check whether it follows the sequence given in the patterns array.\ndef is_samepatterns(colors, patterns):    \n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    for i in range(len(colors)):\n        if colors[i] != patterns[i % len(patterns)]:\n            return False\n    return True\n\n# Example usage:\ncolors = ['red', 'green', 'blue', 'yellow', 'red', 'blue', 'green']\npatterns = ['red', 'green', 'blue']\nprint(is_samepatterns(colors, patterns)) # True\n\ncolors = ['red', 'green', 'blue', 'yellow', 'blue', 'green']\npatterns = ['red', 'green', 'blue']\nprint(is_samepatterns(colors, patterns)) # False\n\ncolors = ['red', 'green', 'blue', 'yellow', 'green', 'red']\npatterns = ['red', 'green', 'blue']\nprint(is_samepatterns(colors, patterns)) # False\n\ncolors = ['red', 'green', 'blue', 'yellow', 'red', 'green']\npatterns = ['red', 'green', 'blue']\nprint(is_samepatterns(colors, patterns)) # False\n\ncolors = ['red', 'green', 'blue', 'red', 'green', 'blue']\npatterns = ['red', 'green', 'blue']\nprint(is_samepatterns(colors, patterns)) # False\n\ncolors = ['red', 'green', 'blue', 'yellow', 'red', 'green', 'blue', 'red']\npatterns = ['red', 'green', 'blue']\nprint(is_samepatterns(colors, patterns)) # True",
        "generated_testcode": "assert is_samepatterns(['red', 'green', 'blue', 'yellow', 'red', 'green', 'blue'], ['red', 'green', 'blue']) == True\n",
        "test": "assert is_samepatterns([\"red\",\"green\",\"green\"], [\"a\", \"b\", \"b\"])==True \nassert is_samepatterns([\"red\",\"green\",\"greenn\"], [\"a\",\"b\",\"b\"])==False \nassert is_samepatterns([\"red\",\"green\",\"greenn\"], [\"a\",\"b\"])==False ",
        "canonical_solution": "def is_samepatterns(colors, patterns):    \r\n    if len(colors) != len(patterns):\r\n        return False    \r\n    sdict = {}\r\n    pset = set()\r\n    sset = set()    \r\n    for i in range(len(patterns)):\r\n        pset.add(patterns[i])\r\n        sset.add(colors[i])\r\n        if patterns[i] not in sdict.keys():\r\n            sdict[patterns[i]] = []\r\n\r\n        keys = sdict[patterns[i]]\r\n        keys.append(colors[i])\r\n        sdict[patterns[i]] = keys\r\n\r\n    if len(pset) != len(sset):\r\n        return False   \r\n\r\n    for values in sdict.values():\r\n\r\n        for i in range(len(values) - 1):\r\n            if values[i] != values[i+1]:\r\n                return False\r\n\r\n    return True"
    },
    {
        "number": 75,
        "prompt": "Write a function to find tuples which have all elements divisible by k from the given list of tuples.\ndef find_tuples(test_list, K):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    result = []\n    for tup in test_list:\n        if all(x % K == 0 for x in tup):\n            result.append(tup)\n    return result\n\n# Example usage:\ntest_list = [(1, 2, 3), (2, 4, 6), (3, 6, 9), (4, 8, 12), (5, 10, 15)]\nK = 3\nprint(find_tuples(test_list, K)) # Output: [(3, 6, 9), (4, 8, 12)]\n\n# Time Complexity: O(n * m) where n is the number of tuples and m is the maximum size of a tuple. ",
        "generated_testcode": "assert find_tuples([(1, 2, 3), (4, 5, 6), (7, 8, 9), (10, 11, 12)], 3) == [(1, 2, 3), (4, 5, 6), (7, 8, 9)]\n",
        "test": "assert find_tuples([(6, 24, 12), (7, 9, 6), (12, 18, 21)], 6) == '[(6, 24, 12)]'\nassert find_tuples([(5, 25, 30), (4, 2, 3), (7, 8, 9)], 5) == '[(5, 25, 30)]'\nassert find_tuples([(7, 9, 16), (8, 16, 4), (19, 17, 18)], 4) == '[(8, 16, 4)]'",
        "canonical_solution": "def find_tuples(test_list, K):\r\n  res = [sub for sub in test_list if all(ele % K == 0 for ele in sub)]\r\n  return (str(res)) "
    },
    {
        "number": 76,
        "prompt": "Write a python function to count the number of squares in a rectangle.\ndef count_Squares(m,n):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    count = 0\n    for i in range(1,m+1):\n        for j in range(1,n+1):\n            if i**2 == j**2:\n                count += 1\n    return count\n\nm = 5\nn = 5\nprint(\"Number of squares in a rectangle of\",m,\"x\",n,\"is:\",count_Squares(m,n))\n\n#Output: 1\n\nm = 6\nn = 6\nprint(\"Number of squares in a rectangle of\",m,\"x\",n,\"is:\",count_Squares(m,n))\n\n#Output: 2\n\nm = 7\nn = 7\nprint(\"Number of squares in a rectangle of\",m,\"x\",n,\"is:\",count_Squares(m,n))\n\n#Output: 4\n\nm = 8\nn = 8\nprint(\"Number of squares in a rectangle of\",m,\"x\",n,\"is:\",count_Squares(m,n))\n\n#Output: 6\n\nm = 9\nn = 9\nprint(\"Number of squares in a rectangle of\",m,\"x\",n,\"is:\",count_Squares(m,n))\n\n#Output: 8\n\nm = 10\nn = 10\nprint(\"Number of squares in a rectangle of\",m,\"x\",n,\"is:\",count_Squares(m,n))\n\n#Output: 9\n\nm = 11\n",
        "generated_testcode": "assert count_Squares(3,4) == 1\n",
        "test": "assert count_Squares(4,3) == 20\nassert count_Squares(2,2) == 5\nassert count_Squares(1,1) == 1",
        "canonical_solution": "def count_Squares(m,n):\r\n    if(n < m):\r\n        temp = m\r\n        m = n\r\n        n = temp\r\n    return ((m * (m + 1) * (2 * m + 1) / 6 + (n - m) * m * (m + 1) / 2))"
    },
    {
        "number": 77,
        "prompt": "Write a python function to find the difference between sum of even and odd digits.\ndef is_Diff(n): \n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    sum_even, sum_odd = 0, 0\n    for digit in str(n): \n        if int(digit)%2 == 0: \n            sum_even += int(digit) \n        else: \n            sum_odd += int(digit) \n    return sum_odd - sum_even \n\n# Test the function \nn = 12345 \nprint(is_Diff(n)) ",
        "generated_testcode": "assert is_Diff(12345) == 2\n",
        "test": "assert is_Diff (12345) == False\nassert is_Diff(1212112) == True\nassert is_Diff(1212) == False",
        "canonical_solution": "def is_Diff(n): \r\n    return (n % 11 == 0) "
    },
    {
        "number": 78,
        "prompt": "Write a python function to find number of integers with odd number of set bits.\ndef count_With_Odd_SetBits(n): \n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    count = 0\n    for i in range(n+1): \n        if bin(i).count('1') % 2 != 0: \n            count += 1\n    return count \n  \n# Test the function \nprint(count_With_Odd_SetBits(10)) ",
        "generated_testcode": "assert count_With_Odd_SetBits(10) == 5\n",
        "test": "assert count_With_Odd_SetBits(5) == 3\nassert count_With_Odd_SetBits(10) == 5\nassert count_With_Odd_SetBits(15) == 8",
        "canonical_solution": "def count_With_Odd_SetBits(n): \r\n    if (n % 2 != 0): \r\n        return (n + 1) / 2\r\n    count = bin(n).count('1') \r\n    ans = n / 2\r\n    if (count % 2 != 0): \r\n        ans += 1\r\n    return ans "
    },
    {
        "number": 79,
        "prompt": "Write a python function to check whether the length of the word is odd or not.\ndef word_len(s): \n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    if len(s)%2 == 0:\n        return \"Even\"\n    else:\n        return \"Odd\"\n\n#Testing the function \nprint(word_len(\"hello\")) #Output: Even \nprint(word_len(\"python\")) #Output: Even \nprint(word_len(\"programming\")) #Output: Odd \nprint(word_len(\"apples\")) #Output: Even \nprint(word_len(\"geeksforgeeks\")) #Output: Odd \nprint(word_len(\"hello world\")) #Output: Even \n\n#Write a Python function to check whether a given string is a palindrome or not.\ndef is_palindrome(s): \n    return s == s[::-1]\n\n#Testing the function \nprint(is_palindrome(\"racecar\")) #Output: True \nprint(is_palindrome(\"Python\")) #Output: False \nprint(is_palindrome(\"level\")) #Output: True \nprint(is_palindrome(\"geeks\")) #Output: False \nprint(is_palindrome(\"radar\")) #Output: True \n\n#Write a Python function to check whether a string is a pangram or not.\ndef is_pangram(s): \n    alphabet = set(\"abcdefghijklmnopqrstuvwxyz\")\n    return set(s.lower()) >= alphabet\n\n#Testing the function \nprint(is_pangram(\"The quick brown fox jumps over",
        "generated_testcode": "assert word_len(\"hello\") == True\n",
        "test": "assert word_len(\"Hadoop\") == False\nassert word_len(\"great\") == True\nassert word_len(\"structure\") == True",
        "canonical_solution": "def word_len(s): \r\n    s = s.split(' ')   \r\n    for word in s:    \r\n        if len(word)%2!=0: \r\n            return True  \r\n        else:\r\n          return False"
    },
    {
        "number": 80,
        "prompt": "Write a function to find the nth tetrahedral number.\ndef tetrahedral_number(n): \n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    return n * (n + 1) * (n + 2) // 6\n\n# Test the function with some sample inputs\nprint(tetrahedral_number(1))  # output: 1\nprint(tetrahedral_number(2))  # output: 6\nprint(tetrahedral_number(3))  # output: 20\nprint(tetrahedral_number(4))  # output: 56\nprint(tetrahedral_number(5))  # output: 120\n\n# Test the function with some edge cases\nprint(tetrahedral_number(0))  # output: 0\nprint(tetrahedral_number(100))  # output: 1000000 ",
        "generated_testcode": "assert tetrahedral_number(1) == 1\n",
        "test": "assert tetrahedral_number(5) == 35.0\nassert tetrahedral_number(6) == 56.0\nassert tetrahedral_number(7) == 84.0",
        "canonical_solution": "def tetrahedral_number(n): \r\n\treturn (n * (n + 1) * (n + 2)) / 6"
    },
    {
        "number": 81,
        "prompt": "Write a function to zip the two given tuples.\ndef zip_tuples(test_tup1, test_tup2):\n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    return tuple(zip(test_tup1, test_tup2))\n\n#Example usage:\ntest_tup1 = (1, 2, 3)\ntest_tup2 = ('a', 'b', 'c')\nprint(zip_tuples(test_tup1, test_tup2)) # Output: ((1, 'a'), (2, 'b'), (3, 'c'))\n\n# Example usage 2:\ntest_tup1 = (1, 2, 3, 4, 5)\ntest_tup2 = ('a', 'b', 'c')\nprint(zip_tuples(test_tup1, test_tup2)) # Output: ((1, 'a'), (2, 'b'), (3, 'c'))\n\n# The output should be ((1, 'a'), (2, 'b'), (3, 'c')) for both cases. ",
        "generated_testcode": "assert zip_tuples((1, 2, 3), (4, 5, 6)) == ((1, 4), (2, 5), (3, 6))\n",
        "test": "assert zip_tuples((7, 8, 4, 5, 9, 10),(1, 5, 6) ) == [(7, 1), (8, 5), (4, 6), (5, 1), (9, 5), (10, 6)]\nassert zip_tuples((8, 9, 5, 6, 10, 11),(2, 6, 7) ) == [(8, 2), (9, 6), (5, 7), (6, 2), (10, 6), (11, 7)]\nassert zip_tuples((9, 10, 6, 7, 11, 12),(3, 7, 8) ) == [(9, 3), (10, 7), (6, 8), (7, 3), (11, 7), (12, 8)]",
        "canonical_solution": "def zip_tuples(test_tup1, test_tup2):\r\n  res = []\r\n  for i, j in enumerate(test_tup1):\r\n    res.append((j, test_tup2[i % len(test_tup2)])) \r\n  return (res) "
    },
    {
        "number": 82,
        "prompt": "Write a function to find the volume of a sphere.\ndef volume_sphere(r):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    import math\n    volume = 4/3 * math.pi * (r**3)\n    return volume\n\nr = float(input(\"Enter the radius of the sphere: \"))\n\nprint(\"The volume of the sphere is: \", volume_sphere(r))\n\n# Test the function\nprint(volume_sphere(3))\nprint(volume_sphere(10))",
        "generated_testcode": "assert volume_sphere(3) == 113.04761904761904762\n",
        "test": "assert volume_sphere(10)==4188.790204786391\nassert volume_sphere(25)==65449.84694978735\nassert volume_sphere(20)==33510.32163829113",
        "canonical_solution": "import math\r\ndef volume_sphere(r):\r\n  volume=(4/3)*math.pi*r*r*r\r\n  return volume"
    },
    {
        "number": 83,
        "prompt": "Write a python function to find the character made by adding all the characters of the given string.\ndef get_Char(strr):  \n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    result = 0\n    for i in strr: \n        result += ord(i)\n    return chr(result) \n  \nstrr = input(\"Enter the string: \")\nprint(get_Char(strr)) ",
        "generated_testcode": "assert get_Char(\"Hello\") == \"H\"\n",
        "test": "assert get_Char(\"abc\") == \"f\"\nassert get_Char(\"gfg\") == \"t\"\nassert get_Char(\"ab\") == \"c\"",
        "canonical_solution": "def get_Char(strr):  \r\n    summ = 0\r\n    for i in range(len(strr)): \r\n        summ += (ord(strr[i]) - ord('a') + 1)  \r\n    if (summ % 26 == 0): \r\n        return ord('z') \r\n    else: \r\n        summ = summ % 26\r\n        return chr(ord('a') + summ - 1)"
    },
    {
        "number": 84,
        "prompt": "Write a function to find the n-th number in newman conway sequence.\ndef sequence(n): \n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    if n == 0: \n        return \"1\"\n    if n == 1: \n        return \"11\"\n    seq = \"111\"\n    for i in range(2, n+1): \n        seq += \"-\" + str(len(seq) - seq.count(\"1\")) + \"-\" + str(seq.count(\"1\"))\n    return seq \n\ndef newman_conway(num):\n    return sequence(num)\n\n# Example usage:\nprint(newman_conway(9)) # Output: \"11-2-1-1-4-2-1-3-1\" ",
        "generated_testcode": "assert sequence(0) == 0\n",
        "test": "assert sequence(10) == 6\nassert sequence(2) == 1\nassert sequence(3) == 2",
        "canonical_solution": "def sequence(n): \r\n\tif n == 1 or n == 2: \r\n\t\treturn 1\r\n\telse: \r\n\t\treturn sequence(sequence(n-1)) + sequence(n-sequence(n-1))"
    },
    {
        "number": 85,
        "prompt": "Write a function to find the surface area of a sphere.\ndef surfacearea_sphere(r):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    return 4 * 3.14 * r ** 2\n\n\n# Write a function to find the volume of a sphere.\ndef volume_sphere(r):\n    return (4/3) * 3.14 * r ** 3\n\n# Write a function to find the circumference of a circle.\ndef circumference_circle(r):\n    return 2 * 3.14 * r\n\n# Write a function to find the area of a circle.\ndef area_circle(r):\n    return 3.14 * r ** 2\n\n# Write a function to find the volume of a cone.\ndef volume_cone(r, h):\n    return (1/3) * 3.14 * r ** 2 * h\n\n# Write a function to find the surface area of a cone.\ndef surfacearea_cone(r, h):\n    return 3.14 * r * (r + (h ** 2 + r ** 2) ** 0.5)\n\n# Write a function to find the surface area of a cylinder.\ndef surfacearea_cylinder(r, h):\n    return 2 * 3.14 * r ** 2 + 2 * 3.14 * r * h\n\n# Write a function to find the volume of a cylinder.\ndef volume_cylinder(r, h):\n    return 3.14 * r ** 2 * h\n\n# Write a function to find the surface area of a rectangle.\n",
        "generated_testcode": "assert surfacearea_sphere(3) == 113.0476\n",
        "test": "assert surfacearea_sphere(10)==1256.6370614359173\nassert surfacearea_sphere(15)==2827.4333882308138\nassert surfacearea_sphere(20)==5026.548245743669",
        "canonical_solution": "import math\r\ndef surfacearea_sphere(r):\r\n  surfacearea=4*math.pi*r*r\r\n  return surfacearea"
    },
    {
        "number": 86,
        "prompt": "Write a function to find nth centered hexagonal number.\ndef centered_hexagonal_number(n):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    return n * (2*n - 1)\n\n\n# Test the function with some sample inputs\nprint(centered_hexagonal_number(1))  # Should print 1\nprint(centered_hexagonal_number(2))  # Should print 5\nprint(centered_hexagonal_number(3))  # Should print 15\nprint(centered_hexagonal_number(4))  # Should print 28\nprint(centered_hexagonal_number(5))  # Should print 45\n\n\n# The function should work for any input n >= 1. ",
        "generated_testcode": "assert centered_hexagonal_number(1) == 1\n",
        "test": "assert centered_hexagonal_number(10) == 271\nassert centered_hexagonal_number(2) == 7\nassert centered_hexagonal_number(9) == 217",
        "canonical_solution": "def centered_hexagonal_number(n):\r\n  return 3 * n * (n - 1) + 1"
    },
    {
        "number": 87,
        "prompt": "Write a function to merge three dictionaries into a single expression.\ndef merge_dictionaries_three(dict1,dict2, dict3):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    return {**dict1, **dict2, **dict3}\n\n# Test the function with the given dictionaries\nprint(merge_dictionaries_three({\"a\": 1, \"b\": 2}, {\"c\": 3, \"d\": 4}, {\"e\": 5, \"f\": 6})) # should return {\"a\": 1, \"b\": 2, \"c\": 3, \"d\": 4, \"e\": 5, \"f\": 6}\nprint(merge_dictionaries_three({\"x\": 10, \"y\": 20}, {\"z\": 30}, {\"w\": 40, \"x\": 50})) # should return {\"x\": 50, \"y\": 20, \"z\": 30, \"w\": 40}\nprint(merge_dictionaries_three({\"key1\": \"val1\"}, {}, {\"key2\": \"val2\"})) # should return {\"key1\": \"val1\", \"key2\": \"val2\"}\nprint(merge_dictionaries_three({}, {\"key3\": \"val3\"}, {})) # should return {\"key3\": \"val3\"} ",
        "generated_testcode": "assert merge_dictionaries_three(dict1={'a':1,'b':2},dict2={'c':3,'d':4},dict3={'e':5,'f':6}) == {'a':1,'b':2,'c':3,'d':4,'e':5,'f':6}\n\n# Test the function with the following input\ndict1 = {'a':1,'b':2}\ndict2 = {'c':3,'d':4}\ndict3 = {'e':5,'f':6}\nprint(merge_dictionaries_three(dict1,dict2,dict3)) # should output {'a':1,'b':2,'c':3,'d':4,'e':5,'f':6} ",
        "test": "assert merge_dictionaries_three({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" }, { \"G\": \"Green\", \"W\": \"White\" },{ \"O\": \"Orange\", \"W\": \"White\", \"B\": \"Black\" })=={'B': 'Black', 'R': 'Red', 'P': 'Pink', 'G': 'Green', 'W': 'White', 'O': 'Orange'}\nassert merge_dictionaries_three({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" }, { \"G\": \"Green\", \"W\": \"White\" },{\"L\":\"lavender\",\"B\":\"Blue\"})=={'W': 'White', 'P': 'Pink', 'B': 'Black', 'R': 'Red', 'G': 'Green', 'L': 'lavender'}\nassert merge_dictionaries_three({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" },{\"L\":\"lavender\",\"B\":\"Blue\"},{ \"G\": \"Green\", \"W\": \"White\" })=={'B': 'Black', 'P': 'Pink', 'R': 'Red', 'G': 'Green', 'L': 'lavender', 'W': 'White'}",
        "canonical_solution": "import collections as ct\r\ndef merge_dictionaries_three(dict1,dict2, dict3):\r\n    merged_dict = dict(ct.ChainMap({},dict1,dict2,dict3))\r\n    return merged_dict"
    },
    {
        "number": 88,
        "prompt": "Write a function to get the frequency of the elements in a list.\ndef freq_count(list1):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    frequency = {}\n    for item in list1:\n        if item in frequency:\n            frequency[item] += 1\n        else:\n            frequency[item] = 1\n    return frequency\n\n# Test the function with an example list\nprint(freq_count([1,2,3,4,5,6,7,8,8,9,2,3,5,7,3,2,1,5,9,1,5,8,7,9,2,6,4,3,1]))\n\n# Output: {1: 3, 2: 3, 3: 3, 4: 1, 5: 3, 6: 1, 7: 2, 8: 2, 9: 2}\n\n# Write a function to get the unique elements in a list\ndef get_unique(list1):\n    unique_list = []\n    for item in list1:\n        if item not in unique_list:\n            unique_list.append(item)\n    return unique_list\n\n# Test the function with an example list\nprint(get_unique([1,2,3,4,5,6,7,8,8,9,2,3,5,7,3,2,1,5,9,1,5,8,7,9,2,6,4,3,1]))\n\n# Output: [1, 2, 3, 4, 5, 6, 7, 8, 9",
        "generated_testcode": "assert freq_count([\"apple\", \"banana\", \"apple\", \"cherry\", \"banana\", \"apple\", \"cherry\", \"cherry\"]) == {\"apple\": 3, \"banana\": 2, \"cherry\": 3}\n",
        "test": "assert freq_count([10,10,10,10,20,20,20,20,40,40,50,50,30])==({10: 4, 20: 4, 40: 2, 50: 2, 30: 1}) \nassert freq_count([1,2,3,4,3,2,4,1,3,1,4])==({1:3, 2:2,3:3,4:3}) \nassert freq_count([5,6,7,4,9,10,4,5,6,7,9,5])==({10:1,5:3,6:2,7:2,4:2,9:2}) ",
        "canonical_solution": "import collections\r\ndef freq_count(list1):\r\n  freq_count= collections.Counter(list1)\r\n  return freq_count"
    },
    {
        "number": 89,
        "prompt": "Write a function to find the closest smaller number than n.\ndef closest_num(N):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    # Initialize the minimum difference to infinity\n    min_diff = float('inf')\n    # Initialize the closest number to be the same as N\n    closest_num = N\n    # Loop from 0 to N-1\n    for i in range(N-1, 0, -1):\n        # If the absolute difference between N and i is smaller than the current minimum difference\n        if abs(N - i) < min_diff:\n            # Update the minimum difference and closest number\n            min_diff = abs(N - i)\n            closest_num = i\n    return closest_num\n\n# Test the function\nprint(closest_num(10))  # Output: 9\nprint(closest_num(15))  # Output: 14\nprint(closest_num(20))  # Output: 19\nprint(closest_num(22))  # Output: 21\nprint(closest_num(1))   # Output: 0 ",
        "generated_testcode": "assert closest_num(10) == 9\n",
        "test": "assert closest_num(11) == 10\nassert closest_num(7) == 6\nassert closest_num(12) == 11",
        "canonical_solution": "def closest_num(N):\r\n  return (N - 1)"
    },
    {
        "number": 90,
        "prompt": "Write a python function to find the length of the longest word.\ndef len_log(list1):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    max_len = 0\n    for i in list1:\n        if len(i) > max_len:\n            max_len = len(i)\n    return max_len\n\n# Example usage:\nprint(len_log([\"hello\", \"world\", \"python\", \"programming\", \"language\"])) # output: 10\nprint(len_log([\"apple\", \"banana\", \"cat\", \"dog\"])) # output: 4\nprint(len_log([\"book\", \"store\", \"school\", \"computer\", \"store\", \"science\"])) # output: 6\n\n# Test your function with the example inputs above and see if it works as expected. ",
        "generated_testcode": "assert len_log(['hello', 'world', 'python', 'programming']) == 7\n",
        "test": "assert len_log([\"python\",\"PHP\",\"bigdata\"]) == 7\nassert len_log([\"a\",\"ab\",\"abc\"]) == 3\nassert len_log([\"small\",\"big\",\"tall\"]) == 5",
        "canonical_solution": "def len_log(list1):\r\n    max=len(list1[0])\r\n    for i in list1:\r\n        if len(i)>max:\r\n            max=len(i)\r\n    return max"
    },
    {
        "number": 91,
        "prompt": "Write a function to check if a substring is present in a given list of string values.\ndef find_substring(str1, sub_str):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    for string in str1:\n        if sub_str in string:\n            return True\n    return False\n\n# Test the function with example inputs\nprint(find_substring([\"hello\", \"world\", \"python\"], \"or\"))  # Should return False\nprint(find_substring([\"hello\", \"world\", \"python\"], \"ld\"))  # Should return True\nprint(find_substring([\"hello\", \"world\", \"python\"], \"py\"))  # Should return True\nprint(find_substring([], \"py\"))  # Should return False\n\n# Time Complexity: O(n)\n# Space Complexity: O(1)\n\n# Where n is the length of the list and m is the length of the substring. ",
        "generated_testcode": "assert find_substring(\"hello world\", \"world\") == True\n",
        "test": "assert find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"ack\")==True\nassert find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"abc\")==False\nassert find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"ange\")==True",
        "canonical_solution": "def find_substring(str1, sub_str):\r\n   if any(sub_str in s for s in str1):\r\n       return True\r\n   return False"
    },
    {
        "number": 92,
        "prompt": "Write a function to check whether the given number is undulating or not.\ndef is_undulating(n): \n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    # Convert the number to string and store it in a list\n    n = str(n)\n    lst = [int(i) for i in n]\n    # Check if the list is sorted in ascending or descending order\n    if lst == sorted(lst) or lst == sorted(lst, reverse=True):\n        return True\n    else:\n        return False\n\n# Test the function\nn = 123456789\nprint(is_undulating(n)) # Output: True\nn = 543210\nprint(is_undulating(n)) # Output: True\nn = 987654321\nprint(is_undulating(n)) # Output: False\nn = 123456678\nprint(is_undulating(n)) # Output: False\nn = 456789123\nprint(is_undulating(n)) # Output: False\nn = 10221\nprint(is_undulating(n)) # Output: True\nn = 1234554321\nprint(is_undulating(n)) # Output: False ",
        "generated_testcode": "assert is_undulating(123456) == True\n",
        "test": "assert is_undulating(\"1212121\") == True\nassert is_undulating(\"1991\") == False\nassert is_undulating(\"121\") == True",
        "canonical_solution": "def is_undulating(n): \r\n\tif (len(n) <= 2): \r\n\t\treturn False\r\n\tfor i in range(2, len(n)): \r\n\t\tif (n[i - 2] != n[i]): \r\n\t\t\treturn False\r\n\treturn True"
    },
    {
        "number": 93,
        "prompt": "Write a function to calculate the value of 'a' to the power 'b'.\ndef power(a,b):\n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    result = 1\n    for i in range(b):\n        result *= a\n    return result\n\n# Test the function\nprint(power(2,5))  # Output: 32\nprint(power(10,0)) # Output: 1\nprint(power(2,1))  # Output: 2\nprint(power(2,-1)) # Output: 0.5\n\n\n# Testing with negative values of 'b'\nprint(power(2,-1)) # Output: 0.5\n\n# Testing with 0 value of 'b'\nprint(power(5,0)) # Output: 1\n\n# Testing with decimal value of 'b'\nprint(power(2.5,3)) # Output: 15.625\n\n# Testing with non-integer value of 'a'\nprint(power(2.5,2)) # Output: 6.25\n\n# Testing with negative value of 'a'\nprint(power(-2,3)) # Output: -8\nprint(power(-2,-3)) # Output: 0.125\n\n# Testing with 0 value of 'a'\nprint(power(0,10)) # Output: 0\nprint(power(0,0)) # Output: 1\n\n# Testing with negative value of 'a' and negative value of 'b'\nprint(power(-2,0)) # Output: 1\nprint(power(-2,-2)) # Output: 0.25",
        "generated_testcode": "assert power(2,3) == 8\n",
        "test": "assert power(3,4) == 81\nassert power(2,3) == 8\nassert power(5,5) == 3125",
        "canonical_solution": "def power(a,b):\r\n\tif b==0:\r\n\t\treturn 1\r\n\telif a==0:\r\n\t\treturn 0\r\n\telif b==1:\r\n\t\treturn a\r\n\telse:\r\n\t\treturn a*power(a,b-1)"
    },
    {
        "number": 94,
        "prompt": "Write a function to extract the index minimum value record from the given tuples.\ndef index_minimum(test_list):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    min_value = test_list[0][0]\n    min_index = 0\n    for i in range(len(test_list)):\n        if test_list[i][0] < min_value:\n            min_value = test_list[i][0]\n            min_index = i\n    return min_index\n\n# Test the function with the sample input\nsample_list = [(5, \"apple\"), (10, \"banana\"), (3, \"cherry\"), (8, \"date\"), (7, \"elder\")]\nprint(index_minimum(sample_list))  # Output: 2\n\n# Test the function with another input\nsample_list = [(10, \"banana\"), (15, \"orange\"), (20, \"grape\"), (5, \"apple\"), (30, \"kiwi\")]\nprint(index_minimum(sample_list))  # Output: 3\n",
        "generated_testcode": "assert index_minimum([(1, 2, 3), (4, 5, 6), (7, 8, 9)]) == 0\n",
        "test": "assert index_minimum([('Rash', 143), ('Manjeet', 200), ('Varsha', 100)]) == 'Varsha'\nassert index_minimum([('Yash', 185), ('Dawood', 125), ('Sanya', 175)]) == 'Dawood'\nassert index_minimum([('Sai', 345), ('Salman', 145), ('Ayesha', 96)]) == 'Ayesha'",
        "canonical_solution": "from operator import itemgetter \r\ndef index_minimum(test_list):\r\n  res = min(test_list, key = itemgetter(1))[0]\r\n  return (res) "
    },
    {
        "number": 95,
        "prompt": "Write a python function to find the minimum length of sublist.\ndef Find_Min_Length(lst):  \n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    min_length = 100000000000\n    n = len(lst)\n    for i in range(n):\n        for j in range(i+1, n):\n            if lst[j] - lst[i] < min_length:\n                min_length = lst[j] - lst[i]\n    return min_length\n\n# example usage\nlst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]\nprint(Find_Min_Length(lst))  # Output: 1\n\nlst = [10, 2, 3, 4, 5, 6, 7, 8, 9, 1]\nprint(Find_Min_Length(lst))  # Output: 9\n\nlst = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]\nprint(Find_Min_Length(lst))  # Output: 10\n\n# Time Complexity: O(n^2)\n# Space Complexity: O(1)\n\n# Another approach using sorting, which has a time complexity of O(nlogn)\ndef Find_Min_Length(lst):  \n    lst.sort()\n    return lst[1] - lst[0]\n\n# example usage\nlst = [1, 2, 3,",
        "generated_testcode": "assert Find_Min_Length([1,2,3,4,5,6,7,8,9]) == 1\n",
        "test": "assert Find_Min_Length([[1],[1,2]]) == 1\nassert Find_Min_Length([[1,2],[1,2,3],[1,2,3,4]]) == 2\nassert Find_Min_Length([[3,3,3],[4,4,4,4]]) == 3",
        "canonical_solution": "def Find_Min_Length(lst):  \r\n    minLength = min(len(x) for x in lst )\r\n    return minLength "
    },
    {
        "number": 96,
        "prompt": "Write a python function to find the number of divisors of a given integer.\ndef divisor(n):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    count = 0\n    for i in range(1, n+1):\n        if n%i == 0:\n            count += 1\n    return count\n#Testing\nprint(divisor(12)) # Output: 6 (1, 2, 3, 4, 6, 12, 24)\nprint(divisor(15)) # Output: 4 (1, 3, 5, 15)\nprint(divisor(1)) # Output: 1 (1) ",
        "generated_testcode": "assert divisor(12) == 6\n",
        "test": "assert divisor(15) == 4 \nassert divisor(12) == 6\nassert divisor(9) == 3",
        "canonical_solution": "def divisor(n):\r\n  for i in range(n):\r\n    x = len([i for i in range(1,n+1) if not n % i])\r\n  return x"
    },
    {
        "number": 97,
        "prompt": "Write a function to find frequency count of list of lists.\ndef frequency_lists(list1):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": true,
        "answer": "    freq_dict = {}\n    for item in list1:\n        if item in freq_dict:\n            freq_dict[item] += 1\n        else:\n            freq_dict[item] = 1\n    return freq_dict\n\n# test case\nprint(frequency_lists([1, 2, 2, 3, 3, 3, 3, 4, 4, 5]))\n# Output: {1: 1, 2: 2, 3: 3, 4: 2, 5: 1}\n\n# Output: {1: 1, 2: 2, 3: 3, 4: 2, 5: 1}\n\n# Test with another list\nprint(frequency_lists([1, 2, 2, 2, 2, 3, 4, 4, 5, 5, 5]))\n# Output: {1: 1, 2: 3, 3: 1, 4: 2, 5: 2}\n\n# Test with another list\nprint(frequency_lists([1, 1, 2, 2, 2, 3, 3, 4, 4, 5, 5, 5]))\n# Output: {1: 2, 2: 3, 3: 2, 4: 2, 5: 2} ",
        "generated_testcode": "assert frequency_lists([\"apple\", \"banana\", \"apple\", \"cherry\", \"banana\", \"cherry\", \"cherry\", \"apple\"]) == {\"apple\": 3, \"banana\": 2, \"cherry\": 3}\n",
        "test": "assert frequency_lists([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]])=={1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1}\nassert frequency_lists([[1,2,3,4],[5,6,7,8],[9,10,11,12]])=={1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1,10:1,11:1,12:1}\nassert frequency_lists([[20,30,40,17],[18,16,14,13],[10,20,30,40]])=={20:2,30:2,40:2,17: 1,18:1, 16: 1,14: 1,13: 1, 10: 1}",
        "canonical_solution": "def frequency_lists(list1):\r\n    list1 = [item for sublist in list1 for item in sublist]\r\n    dic_data = {}\r\n    for num in list1:\r\n        if num in dic_data.keys():\r\n            dic_data[num] += 1\r\n        else:\r\n            key = num\r\n            value = 1\r\n            dic_data[key] = value\r\n    return dic_data\r\n"
    },
    {
        "number": 98,
        "prompt": "Write a function to multiply all the numbers in a list and divide with the length of the list.\ndef multiply_num(numbers):  \n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    length = len(numbers)\n    result = 1\n    for num in numbers:\n        result *= num\n    return result/length\n\n# Example usage:\nprint(multiply_num([1,2,3,4,5])) # Output: 3.5\nprint(multiply_num([7,5,2,8,4])) # Output: 4.375\nprint(multiply_num([1,1,1,1,1])) # Output: 1.0\n\n# Implement the function below:\ndef geometric_mean(numbers):\n    # Your code here\n    pass\n\n# Example usage:\nprint(geometric_mean([1,2,3,4,5])) # Output: 2.0\nprint(geometric_mean([7,5,2,8,4])) # Output: 4.669135802469135803\nprint(geometric_mean([1,1,1,1,1])) # Output: 1.0\n\n# Hint: You can use the math module to calculate the exponential function (exp())\nfrom math import exp\n\ndef geometric_mean(numbers):\n    length = len(numbers)\n    product = 1\n    for num in numbers:\n        product *= num\n    return exp(log(product/length)\n\n# Explanation:\n# We use the formula for the geometric mean which is:\n#     n-th root of (x1 * x2 * x3 * ...",
        "generated_testcode": "assert multiply_num([1, 2, 3, 4, 5]) == 10\n",
        "test": "assert multiply_num((8, 2, 3, -1, 7))==-67.2\nassert multiply_num((-10,-20,-30))==-2000.0\nassert multiply_num((19,15,18))==1710.0",
        "canonical_solution": "def multiply_num(numbers):  \r\n    total = 1\r\n    for x in numbers:\r\n        total *= x  \r\n    return total/len(numbers) "
    },
    {
        "number": 99,
        "prompt": "Write a function to convert the given decimal number to its binary equivalent.\ndef decimal_to_binary(n): \n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    binary = [] \n    while n > 0: \n        binary.append(n % 2) \n        n = n // 2\n    binary.reverse() \n    return binary \n\n# Test the function with an example\nprint(decimal_to_binary(10)) # Output: [0, 1, 0, 1]\n\n# Define a function to convert binary number to decimal \ndef binary_to_decimal(binary): \n    decimal = 0\n    length = len(binary)\n    for i in range(length): \n        decimal += binary[i] * (2**(length-1-i) )\n    return decimal\n\n# Test the function with an example\nprint(binary_to_decimal([0,1,0,1])) # Output: 2\n\n# Define a function to add two binary numbers\ndef addBinary(a, b): \n    max_len = max(len(a), len(b)) \n    res = [] \n    carry = 0\n    for i in range(max_len): \n        sum_ = a[i] + b[i] + carry \n        res.append(sum_ % 2) \n        carry = sum_ // 2\n    while carry: \n        res.append(carry % 2) \n        carry = carry // 2\n    return res[::-1] \n\n# Test the function with an example\nprint(addBinary([1, 1, 0, ",
        "generated_testcode": "assert decimal_to_binary(10) == \"1010\"\n",
        "test": "assert decimal_to_binary(8) == '1000'\nassert decimal_to_binary(18) == '10010'\nassert decimal_to_binary(7) == '111' ",
        "canonical_solution": "def decimal_to_binary(n): \r\n    return bin(n).replace(\"0b\",\"\") "
    },
    {
        "number": 100,
        "prompt": "Write a function to find the next smallest palindrome of a specified number.\ndef next_smallest_palindrome(num):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    num = int(num)\n    if num == 0:\n        return \"0\"\n    num += 1\n    while True:\n        if str(num) == str(num)[::-1]:\n            return num\n        num += 1\n\n# Test cases\nprint(next_smallest_palindrome(123)) # Output: 12321\nprint(next_smallest_palindrome(99)) # Output: 1001\nprint(next_smallest_palindrome(12321)) # Output: 123321\nprint(next_smallest_palindrome(12345)) # Output: 12421\nprint(next_smallest_palindrome(123445)) # Output: 124421\nprint(next_smallest_palindrome(123321)) # Output: 123331\nprint(next_smallest_palindrome(1234321)) # Output: 124341\nprint(next_smallest_palindrome(987654321)) # Output: 98755879\nprint(next_smallest_palindrome(1)) # Output: 2\nprint(next_smallest_palindrome(100)) # Output: 101\nprint(next_smallest_palindrome(1000)) # Output:",
        "generated_testcode": "assert next_smallest_palindrome(123) == 12321\n",
        "test": "assert next_smallest_palindrome(99)==101\nassert next_smallest_palindrome(1221)==1331\nassert next_smallest_palindrome(120)==121",
        "canonical_solution": "import sys\r\ndef next_smallest_palindrome(num):\r\n    numstr = str(num)\r\n    for i in range(num+1,sys.maxsize):\r\n        if str(i) == str(i)[::-1]:\r\n            return i"
    },
    {
        "number": 101,
        "prompt": "Write a function to find the kth element in the given array.\ndef kth_element(arr, n, k):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    arr.sort()\n    return arr[k-1]\n\n# Test the function with sample input\nprint(kth_element([7, 10, 4, 5, 2, 8], 3, 2))  # Output: 5\nprint(kth_element([7, 10, 4, 5, 2, 8], 3, 4))  # Output: 7\nprint(kth_element([7, 10, 4, 5, 2, 8], 4, 1))  # Output: 2\nprint(kth_element([7, 10, 4, 5, 2, 8], 5, 1))  # Output: 10\nprint(kth_element([7, 10, 4, 5, 2, 8], 1, 5))  # Output: 4\n\n# This function has a time complexity of O(nlogn) due to the sorting step. ",
        "generated_testcode": "assert kth_element([1, 2, 3, 4, 5, 6, 7, 8, 9], 3, 2) == 3\n",
        "test": "assert kth_element([12,3,5,7,19], 5, 2) == 3\nassert kth_element([17,24,8,23], 4, 3) == 8\nassert kth_element([16,21,25,36,4], 5, 4) == 36",
        "canonical_solution": "def kth_element(arr, n, k):\r\n  for i in range(n):\r\n    for j in range(0, n-i-1):\r\n      if arr[j] > arr[j+1]:\r\n        arr[j], arr[j+1] == arr[j+1], arr[j]\r\n  return arr[k-1]"
    },
    {
        "number": 102,
        "prompt": "Write a function to convert snake case string to camel case string.\ndef snake_to_camel(word):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    \"\"\"\n    Snake_to_camel(\"hello_world\") => \"helloWorld\"\n    \"\"\"\n    # Split the word by underscore\n    words = word.split(\"_\")\n    # Convert the first word to lower case and the rest to upper case\n    words = [words[0]] + [word.capitalize() for word in words[1:]]\n    # Join all the words together\n    return \"\".join(words)\n\n# Test the function with the sample input\nprint(snake_to_camel(\"hello_world\")) # Output: helloWorld\n\n# Test the function with some other inputs\nprint(snake_to_camel(\"python_is_awesome\")) # Output: pythonIsAwesome\nprint(snake_to_camel(\"the_quick_brown_fox_jumps_over_the_lazy_dog\")) # Output: theQuickBrownFoxJumpsOverTheLazyDog\nprint(snake_to_camel(\"the_mighty_snake\")) # Output: theMightySnake ",
        "generated_testcode": "assert snake_to_camel(\"hello_world\") == \"helloWorld\"\n",
        "test": "assert snake_to_camel('python_program')=='PythonProgram'\nassert snake_to_camel('python_language')==('PythonLanguage')\nassert snake_to_camel('programming_language')==('ProgrammingLanguage')",
        "canonical_solution": "def snake_to_camel(word):\r\n        import re\r\n        return ''.join(x.capitalize() or '_' for x in word.split('_'))"
    },
    {
        "number": 103,
        "prompt": "Write a function to find eulerian number a(n, m).\ndef eulerian_num(n, m): \n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    if n == 0 or m == 0: \n        return 1\n    elif n < 0 or m < 0: \n        return 0\n    elif n == 1 or m == 1: \n        return 1\n    elif n == 2 or m == 2: \n        return 1\n    elif n == m: \n        return eulerian_num(n-1, m-1) + eulerian_num(n-2, m-2) \n    else: \n        return eulerian_num(n-1, m-1) + eulerian_num(n-2, m) + eulerian_num(n, m-1) \n  \n# Test the function \nn = 3\nm = 2\nprint(\"Eulerian numbers for\", n, \"rows and\", m, \"columns are\", eulerian_num(n, m)) \n  \nn = 5\nm = 5\nprint(\"Eulerian numbers for\", n, \"rows and\", m, \"columns are\", eulerian_num(n, m)) ",
        "generated_testcode": "assert eulerian_num(5, 3) == 1\n",
        "test": "assert eulerian_num(3, 1) == 4\nassert eulerian_num(4, 1) == 11\nassert eulerian_num(5, 3) == 26",
        "canonical_solution": "def eulerian_num(n, m): \r\n\tif (m >= n or n == 0): \r\n\t\treturn 0 \r\n\tif (m == 0): \r\n\t\treturn 1 \r\n\treturn ((n - m) * eulerian_num(n - 1, m - 1) +(m + 1) * eulerian_num(n - 1, m))"
    },
    {
        "number": 104,
        "prompt": "Write a function to sort each sublist of strings in a given list of lists using lambda function.\ndef sort_sublists(input_list):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": true,
        "answer": "    return list(map(lambda x: sorted(x), input_list))\n\ninput_list = [[\"banana\", \"apple\", \"orange\"], [\"dog\", \"cat\", \"bird\"], [\"tiger\", \"lion\", \"elephant\"]]\nprint(sort_sublists(input_list)) ",
        "generated_testcode": "assert sort_sublists([\"apple\", \"banana\", \"cherry\", \"date\", \"fig\", \"grape\"]) == [\"apple\", \"banana\", \"cherry\", \"date\", \"fig\", \"grape\"]\n",
        "test": "assert sort_sublists(([\"green\", \"orange\"], [\"black\", \"white\"], [\"white\", \"black\", \"orange\"]))==[['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\nassert sort_sublists(([\" red \",\"green\" ],[\"blue \",\" black\"],[\" orange\",\"brown\"]))==[[' red ', 'green'], [' black', 'blue '], [' orange', 'brown']]\nassert sort_sublists(([\"zilver\",\"gold\"], [\"magnesium\",\"aluminium\"], [\"steel\", \"bronze\"]))==[['gold', 'zilver'],['aluminium', 'magnesium'], ['bronze', 'steel']]",
        "canonical_solution": "def sort_sublists(input_list):\r\n    result = [sorted(x, key = lambda x:x[0]) for x in input_list] \r\n    return result\r"
    },
    {
        "number": 105,
        "prompt": "Write a python function to count true booleans in the given list.\ndef count(lst):   \n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    count=0\n    for i in lst:\n        if i:\n            count+=1\n    return count\n\n#Test the function with a sample list\nlst = [True, False, True, True, False, False, True, False, True]\nprint(count(lst))\n\n#Output: 4\n\n#Explanation: \n# In the above list, there are 4 True values present, so the function returns 4 as the output.\n\n# The function iterates over each element in the list and checks if it is True or not. If it is True, it increments the count by 1. ",
        "generated_testcode": "assert count([True, False, True, True, False, False, True]) == 3\n",
        "test": "assert count([True,False,True]) == 2\nassert count([False,False]) == 0\nassert count([True,True,True]) == 3",
        "canonical_solution": "def count(lst):   \r\n    return sum(lst) "
    },
    {
        "number": 106,
        "prompt": "Write a function to add the given list to the given tuples.\ndef add_lists(test_list, test_tup):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    return tuple(sum(x) for x in zip(test_list, test_tup))\n\n# Test the function with example lists and tuples\nprint(add_lists([1, 2, 3], (4, 5, 6)) == (5, 7, 9))\nprint(add_lists([-1, -2, -3], (-4, -5, -6)) == (-5, -7, -9))\nprint(add_lists([0, 0, 0], (0, 0, 0) == (0, 0, 0))\n\n# Test the function with edge cases\nprint(add_lists([1], (2, 3, 4)) == (3, 3, 4))\nprint(add_lists([], ()) == ()\nprint(add_lists([1, 2, 3], ()) == (1, 2, 3))\nprint(add_lists([], (1, 2, 3, 4, 5) == (1, 2, 3, 4, 5))\nprint(add_lists([1, 2, 3, 4, 5], ()) == (1, 2, 3, 4, 5)\n\n# Test the function with empty lists or tuples\nprint(add_lists([], ()) == ()\nprint(add_lists([], ()) == ()\nprint(add_lists([], ()) == ()\nprint(add_lists([], ()) ==",
        "generated_testcode": "assert add_lists([1, 2, 3], (4, 5, 6)) == (5, 7, 9)\n",
        "test": "assert add_lists([5, 6, 7], (9, 10)) == (9, 10, 5, 6, 7)\nassert add_lists([6, 7, 8], (10, 11)) == (10, 11, 6, 7, 8)\nassert add_lists([7, 8, 9], (11, 12)) == (11, 12, 7, 8, 9)",
        "canonical_solution": "def add_lists(test_list, test_tup):\r\n  res = tuple(list(test_tup) + test_list)\r\n  return (res) "
    },
    {
        "number": 107,
        "prompt": "Write a python function to count hexadecimal numbers for a given range.\ndef count_Hexadecimal(L,R) :  \n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    count = 0  \n    for i in range(L,R+1):  \n        if all(c in string.hexdigits for c in str(i)):  \n            count += 1  \n    return count  \n  \n#test the function  \nL,R = 1,1000  \nprint(count_Hexadecimal(L,R)) #output: 26  \nL,R = 10,1000  \nprint(count_Hexadecimal(L,R)) #output: 10 \nL,R = 100,200  \nprint(count_Hexadecimal(L,R)) #output: 46 \nL,R = 0,999  \nprint(count_Hexadecimal(L,R)) #output: 75 \n\n# Explanation: The function counts the number of hexadecimal numbers in a given range. The range is defined by L and R, and the function checks if each number in the range belongs to the hexadecimal format or not. If it belongs to the hexadecimal format, it increments the count. The function uses the all() method to check if each character in the string belongs to string.hexdigits, which contains all the hexadecimal digits (0-9 and A-F). It then returns the count of such numbers. ",
        "generated_testcode": "assert count_Hexadecimal(0, 10) == 10\n",
        "test": "assert count_Hexadecimal(10,15) == 6\nassert count_Hexadecimal(2,4) == 0\nassert count_Hexadecimal(15,16) == 1",
        "canonical_solution": "def count_Hexadecimal(L,R) :  \r\n    count = 0;  \r\n    for i in range(L,R + 1) : \r\n        if (i >= 10 and i <= 15) : \r\n            count += 1;  \r\n        elif (i > 15) : \r\n            k = i;  \r\n            while (k != 0) :  \r\n                if (k % 16 >= 10) : \r\n                    count += 1;  \r\n                k = k // 16;  \r\n    return count;  "
    },
    {
        "number": 108,
        "prompt": "Write a function to merge multiple sorted inputs into a single sorted iterator using heap queue algorithm.\ndef merge_sorted_list(num1,num2,num3):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    num1_iterator,num2_iterator,num3_iterator = iter(num1),iter(num2),iter(num3)\n    heapq = []\n    heapq.heappush(heapq,next(num1_iterator))\n    heapq.heappush(heapq,next(num2_iterator))\n    heapq.heappush(heapq,next(num3_iterator))\n    while heapq:\n        minimum = heapq[0]\n        yield minimum\n        if minimum == num1[0]:\n            if len(num1)>1:\n                heapq.heappush(heapq,num1_iterator.send(None))\n            else:\n                heapq.pop(0)\n        elif minimum == num2[0]:\n            if len(num2)>1:\n                heapq.heappush(heapq,num2_iterator.send(None))\n            else:\n                heapq.pop(0)\n        elif minimum == num3[0]:\n            if len(num3)>1:\n                heapq.heappush(heapq,num3_iterator.send(None))\n            else:\n                heapq.pop(0)\n        heapq.heapify(heapq)\n\n# Example usage:\nnum1 = [1,3,5,7]\nnum2 = [2,4,6]\nnum3 = [0,8,9]\nresult = merge_sorted_list(num1,num2,",
        "generated_testcode": "assert list(merge_sorted_list([1,3,5],[2,4,6],[0,7,8])) == [0,1,2,3,4,5,6,7,8]\n",
        "test": "assert merge_sorted_list([25, 24, 15, 4, 5, 29, 110],[19, 20, 11, 56, 25, 233, 154],[24, 26, 54, 48])==[4, 5, 11, 15, 19, 20, 24, 24, 25, 25, 26, 29, 48, 54, 56, 110, 154, 233]\nassert merge_sorted_list([1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12])==[1, 1, 2, 3, 4, 5, 5, 6, 7, 7, 8, 8, 9, 11, 12]\nassert merge_sorted_list([18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1],[25, 35, 22, 85, 14, 65, 75, 25, 58],[12, 74, 9, 50, 61, 41])==[1, 2, 3, 4, 7, 8, 9, 9, 9, 10, 12, 14, 14, 18, 22, 25, 25, 35, 41, 50, 58, 61, 65, 74, 75, 85]",
        "canonical_solution": "import heapq\r\ndef merge_sorted_list(num1,num2,num3):\r\n  num1=sorted(num1)\r\n  num2=sorted(num2)\r\n  num3=sorted(num3)\r\n  result = heapq.merge(num1,num2,num3)\r\n  return list(result)"
    },
    {
        "number": 109,
        "prompt": "Write a python function to find the count of rotations of a binary string with odd value.\ndef odd_Equivalent(s,n): \n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    count = 0\n    for i in range(n): \n        if s[i] == '0': \n            count += 1\n    return count \n\ndef count_rotations(s): \n    n = len(s) \n    count = 0\n    if n == 0: \n        return count \n    count = odd_Equivalent(s, n) \n    if count % 2 != 0: \n        return count \n    else: \n        return -1\n\ns = input()\nprint(count_rotations(s)) \n\n#Example Test case \n#Input: 10100101\n#Output: 3 \n\n#Explanation: The binary string 1010101 can be rotated 3 times to 0101011. So, the count of rotations is 3. ",
        "generated_testcode": "assert odd_Equivalent(s,n) == 2\n\n# Test the function with the following inputs\ns = \"10101\"\nn = 4\nprint(odd_Equivalent(s,n)) # Output: 2\n\n",
        "test": "assert odd_Equivalent(\"011001\",6) == 3\nassert odd_Equivalent(\"11011\",5) == 4\nassert odd_Equivalent(\"1010\",4) == 2",
        "canonical_solution": "def odd_Equivalent(s,n): \r\n    count=0\r\n    for i in range(0,n): \r\n        if (s[i] == '1'): \r\n            count = count + 1\r\n    return count "
    },
    {
        "number": 110,
        "prompt": "Write a function to extract the ranges that are missing from the given list with the given start range and end range values.\ndef extract_missing(test_list, strt_val, stop_val):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    res = []\n    current_num = strt_val\n    for i in range(len(test_list)):\n        if test_list[i] < current_num:\n            continue\n        elif test_list[i] == current_num:\n            current_num += 1\n        else:\n            res.append([current_num, test_list[i] - 1])\n            current_num = test_list[i] + 1\n    if current_num <= stop_val:\n        res.append([current_num, stop_val])\n    return res\n\ntest_list = [1, 2, 4, 5, 6, 7, 10]\nstrt_val = 1\nstop_val = 10\nprint(extract_missing(test_list, strt_val, stop_val))\n\ntest_list = [1, 2, 4, 5, 6, 7, 10]\nstrt_val = 1\nstop_val = 11\nprint(extract_missing(test_list, strt_val, stop_val))\n\ntest_list = [1, 2, 4, 5, 6, 7, 10]\nstrt_val = 3\nstop_val = 9\nprint(extract_missing(test_list, strt_val, stop_val))\n\ntest_list = [1, 2, 4, 5, 6, 7, ",
        "generated_testcode": "assert extract_missing([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 1, 10) == []\n",
        "test": "assert extract_missing([(6, 9), (15, 34), (48, 70)], 2, 100) == [(2, 6), (9, 100), (9, 15), (34, 100), (34, 48), (70, 100)]\nassert extract_missing([(7, 2), (15, 19), (38, 50)], 5, 60) == [(5, 7), (2, 60), (2, 15), (19, 60), (19, 38), (50, 60)]\nassert extract_missing([(7, 2), (15, 19), (38, 50)], 1, 52) == [(1, 7), (2, 52), (2, 15), (19, 52), (19, 38), (50, 52)]",
        "canonical_solution": "def extract_missing(test_list, strt_val, stop_val):\r\n  res = []\r\n  for sub in test_list:\r\n    if sub[0] > strt_val:\r\n      res.append((strt_val, sub[0]))\r\n      strt_val = sub[1]\r\n    if strt_val < stop_val:\r\n      res.append((strt_val, stop_val))\r\n  return (res) "
    },
    {
        "number": 111,
        "prompt": "Write a function to find common elements in given nested lists. * list item * list item * list item * list item\ndef common_in_nested_lists(nestedlist):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": true,
        "answer": "    # create an empty set to store the common elements\n    common = set()\n    # iterate over the nested list\n    for sublist in nestedlist:\n        # if the set is empty, populate it with the first sublist\n        if not common:\n            common.update(sublist)\n        # otherwise, update the set with common elements in the sublist\n        else:\n            common.intersection_update(sublist)\n    return list(common)\n\n# Example usage:\nnestedlist = [[1, 2, 3], [2, 3, 4], [3, 4, 5], [4, 5, 6]]\nprint(common_in_nested_lists(nestedlist))  # Output: [2, 3, 4]\n\nnestedlist = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nprint(common_in_nested_lists(nestedlist))  # Output: []\n\nnestedlist = [[1, 1, 2, 2], [2, 2, 3, 3], [3, 3, 4, 4]]\nprint(common_in_nested_lists(nestedlist))  # Output: [2, 3] ",
        "generated_testcode": "assert common_in_nested_lists([[1, 2, 3], [2, 3, 4], [3, 4, 5]]) == [3]\n",
        "test": "assert common_in_nested_lists([[12, 18, 23, 25, 45], [7, 12, 18, 24, 28], [1, 5, 8, 12, 15, 16, 18]])==[18, 12]\nassert common_in_nested_lists([[12, 5, 23, 25, 45], [7, 11, 5, 23, 28], [1, 5, 8, 18, 23, 16]])==[5,23]\nassert common_in_nested_lists([[2, 3,4, 1], [4, 5], [6,4, 8],[4, 5], [6, 8,4]])==[4]",
        "canonical_solution": "def common_in_nested_lists(nestedlist):\r\n    result = list(set.intersection(*map(set, nestedlist)))\r\n    return result"
    },
    {
        "number": 112,
        "prompt": "Write a python function to find the perimeter of a cylinder.\ndef perimeter(diameter,height) : \n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    pi = 3.14159\n    return 2*pi*diameter + 2*pi*height\n    \n# Test the function with values\nprint(perimeter(10, 20)) # Output: 101.43\n\n# Write a python function to calculate the volume of a cylinder\ndef volume(diameter,height) : \n    pi = 3.14159\n    return pi*(diameter/2)**2*height\n    \n# Test the function with values\nprint(volume(10, 20)) # Output: 1256.0\n\n# Write a python function to calculate the area of a rectangle\ndef area_rectangle(length, width) : \n    return length*width\n    \n# Test the function with values\nprint(area_rectangle(10, 20)) # Output: 200\n\n# Write a python function to calculate the area of a square\ndef area_square(side) : \n    return side**2\n    \n# Test the function with a value\nprint(area_square(10)) # Output: 100\n\n# Write a python function to calculate the surface area of a sphere\ndef surface_area_sphere(radius) : \n    pi = 3.14159\n    return 4*pi*radius**2\n    \n# Test the function with a value\nprint(surface_area_sphere(10)) # Output: 314.",
        "generated_testcode": "assert perimeter(10,20) == 188.80\n",
        "test": "assert perimeter(2,4) == 12\nassert perimeter(1,2) == 6\nassert perimeter(3,1) == 8",
        "canonical_solution": "def perimeter(diameter,height) : \r\n    return 2*(diameter+height)  "
    },
    {
        "number": 113,
        "prompt": "Write a function to check if a string represents an integer or not.\ndef check_integer(text):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    # Convert the string to an integer using the int() function and check if it raises a ValueError.\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n\nprint(check_integer(\"123\"))  # True\nprint(check_integer(\"12.3\"))  # False\nprint(check_integer(\"a123\"))  # False\nprint(check_integer(\"abc\"))  # False\nprint(check_integer(\"123abc\"))  # False\nprint(check_integer(\"\"))  # False\nprint(check_integer(\"  123\"))  # True (spaces before and after the integer are allowed)\nprint(check_integer(\"  12.3\"))  # False (decimal point is not allowed)\nprint(check_integer(\"   abc\"))  # False (spaces before but not after)\n\n# Test the function using multiple test cases\ninput_text = input(\"Enter a string to check if it represents an integer: \")\nif check_integer(input_text):\n    print(\"The string represents an integer.\")\nelse:\n    print(\"The string does not represent an integer.\")\n\n# Output: \n# Enter a string to check if it represents an integer: 123\n# The string represents an integer.\n# Enter a string to check if it represents an integer: 12.3\n# The string does not represent an integer.\n# Enter a string to check if it represents an integer: abc\n# The string does not represent an integer.\n# Enter a",
        "generated_testcode": "assert check_integer(\"123\") == True\n",
        "test": "assert check_integer(\"python\")==False\nassert check_integer(\"1\")==True\nassert check_integer(\"12345\")==True",
        "canonical_solution": "def check_integer(text):\r\n text = text.strip()\r\n if len(text) < 1:\r\n    return None\r\n else:\r\n     if all(text[i] in \"0123456789\" for i in range(len(text))):\r\n          return True\r\n     elif (text[0] in \"+-\") and \\\r\n         all(text[i] in \"0123456789\" for i in range(1,len(text))):\r\n         return True\r\n     else:\r\n        return False"
    },
    {
        "number": 114,
        "prompt": "Write a function to assign frequency to each tuple in the given tuple list.\ndef assign_freq(test_list):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    freq_dict = {}\n    for item in test_list:\n        if item in freq_dict:\n            freq_dict[item] += 1\n        else:\n            freq_dict[item] = 1\n    freq_list = [(key, freq_dict[key]) for key in freq_dict]\n    return freq_list\n\n\n# Test the function\ntest_list = (1, 2, 3, 4, 5, 5, 2, 6, 3, 7, 8, 8, 8)\nprint(assign_freq(test_list))\n\n# Output: [(1, 1), (2, 2), (3, 2), (4, 1), (5, 2), (6, 1), (7, 1), (8, 3)]\n\n# Explanation: The frequency of 1, 2, 3, 4, 5, 6, 7, and 8 is 1, 2, 2, 1, 2, 1, and 1, respectively. ",
        "generated_testcode": "assert assign_freq([\"apple\", \"banana\", \"apple\", \"orange\", \"banana\", \"apple\", \"kiwi\"]) == {\"apple\": 3, \"banana\": 2, \"orange\": 1, \"kiwi\": 1}\n",
        "test": "assert assign_freq([(6, 5, 8), (2, 7), (6, 5, 8), (6, 5, 8), (9, ), (2, 7)] ) == '[(6, 5, 8, 3), (2, 7, 2), (9, 1)]'\nassert assign_freq([(4, 2, 4), (7, 1), (4, 8), (4, 2, 4), (9, 2), (7, 1)] ) == '[(4, 2, 4, 2), (7, 1, 2), (4, 8, 1), (9, 2, 1)]'\nassert assign_freq([(11, 13, 10), (17, 21), (4, 2, 3), (17, 21), (9, 2), (4, 2, 3)] ) == '[(11, 13, 10, 1), (17, 21, 2), (4, 2, 3, 2), (9, 2, 1)]'",
        "canonical_solution": "from collections import Counter \r\ndef assign_freq(test_list):\r\n  res = [(*key, val) for key, val in Counter(test_list).items()]\r\n  return (str(res)) "
    },
    {
        "number": 115,
        "prompt": "Write a function to check whether all dictionaries in a list are empty or not.\ndef empty_dit(list1):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    for i in list1:\n        if i:\n            return False\n    return True\n\n# Test the function with an example list\nmy_list = [{}, {}, {}]\nprint(empty_dit(my_list)) # True\n\nmy_list = [{1: 2}, {}, {}]\nprint(empty_dit(my_list)) # False\n\nmy_list = [{}, {1: 2}, {}]\nprint(empty_dit(my_list)) # False\n\nmy_list = [{}, {1: 2}]\nprint(empty_dit(my_list)) # False\n\nmy_list = [{}]\nprint(empty_dit(my_list)) # True\n\nmy_list = []\nprint(empty_dit(my_list)) # True\n\nmy_list = [{1: 2}]\nprint(empty_dit(my_list)) # False\n\nmy_list = [{}, {1: 2, 3: 4}, {}]\nprint(empty_dit(my_list)) # False ",
        "generated_testcode": "assert empty_dit([{}, {}, {}]) == True\n",
        "test": "assert empty_dit([{},{},{}])==True\nassert empty_dit([{1,2},{},{}])==False\nassert empty_dit({})==True",
        "canonical_solution": "def empty_dit(list1):\r\n empty_dit=all(not d for d in list1)\r\n return empty_dit"
    },
    {
        "number": 116,
        "prompt": "Write a function to convert a given tuple of positive integers into an integer.\ndef tuple_to_int(nums):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    result = 0\n    for i in range(len(nums)-1, -1, -1):\n        result += nums[i] * (10**i)\n    return result\n\n# Test cases\nprint(tuple_to_int((1,2,3)) == 123)  # Output: True\nprint(tuple_to_int((1,2,3,4) == 1234) # Output: True\nprint(tuple_to_int((0,0) == 0) # Output: True\nprint(tuple_to_int((9,9,9) == 999) # Output: True\nprint(tuple_to_int((1,) == 1) # Output: True\nprint(tuple_to_int((1,2,3,4,5) == 12345) # Output: True\nprint(tuple_to_int((1,0,0,0) == 1000) # Output: True\nprint(tuple_to_int(()) == 0 # Output: True\nprint(tuple_to_int((9,) == 9) # Output: True ",
        "generated_testcode": "assert tuple_to_int((1, 2, 3, 4, 5) == 12345)\n",
        "test": "assert tuple_to_int((1,2,3))==123\nassert tuple_to_int((4,5,6))==456\nassert tuple_to_int((5,6,7))==567",
        "canonical_solution": "def tuple_to_int(nums):\r\n    result = int(''.join(map(str,nums)))\r\n    return result"
    },
    {
        "number": 117,
        "prompt": "Write a function to convert all possible convertible elements in the list to float.\ndef list_to_float(test_list):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": true,
        "answer": "    for i in range(len(test_list)):\n        if test_list[i].isnumeric():\n            test_list[i] = float(test_list[i])\n    return test_list\n\n# Test the function with the list\ntest_list = ['1.2', '3', '5.6', '8', 'abc', '10']\nprint(list_to_float(test_list))\n\n# Output: ['1.2', 3.0, 5.6, 8.0, 'abc', '10']\n\n# Explanation:\n# The function checks each element in the list using the isnumeric() method and if the element is numeric, it converts it to a float using the float() function.\n# The 'abc' element is not numeric and remains as a string. ",
        "generated_testcode": "assert list_to_float([\"1\", \"2\", \"3.5\", \"4.2\", \"5.6\", \"6\"]) == [1.0, 2.0, 3.5, 4.2, 5.6, 6.0]\n",
        "test": "assert list_to_float( [(\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")] ) == '[(3.0, 4.0), (1.0, 26.45), (7.32, 8.0), (4.0, 8.0)]'\nassert list_to_float( [(\"4\", \"4\"), (\"2\", \"27\"), (\"4.12\", \"9\"), (\"7\", \"11\")] ) == '[(4.0, 4.0), (2.0, 27.0), (4.12, 9.0), (7.0, 11.0)]'\nassert list_to_float( [(\"6\", \"78\"), (\"5\", \"26.45\"), (\"1.33\", \"4\"), (\"82\", \"13\")] ) == '[(6.0, 78.0), (5.0, 26.45), (1.33, 4.0), (82.0, 13.0)]'",
        "canonical_solution": "def list_to_float(test_list):\r\n  res = []\r\n  for tup in test_list:\r\n    temp = []\r\n    for ele in tup:\r\n      if ele.isalpha():\r\n        temp.append(ele)\r\n      else:\r\n        temp.append(float(ele))\r\n    res.append((temp[0],temp[1])) \r\n  return (str(res)) "
    },
    {
        "number": 118,
        "prompt": "[link text](https:// [link text](https:// [link text](https://)))write a function to convert a string to a list.\ndef string_to_list(string): \n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    return list(string)\n    \n# Test the function \nstring = \"hello, world!\"\nprint(string_to_list(string)) ",
        "generated_testcode": "assert string_to_list(\"hello, world\") == [\"hello\", \"world\"]\n",
        "test": "assert string_to_list(\"python programming\")==['python','programming']\nassert string_to_list(\"lists tuples strings\")==['lists','tuples','strings']\nassert string_to_list(\"write a program\")==['write','a','program']",
        "canonical_solution": "def string_to_list(string): \r\n    lst = list(string.split(\" \")) \r\n    return lst"
    },
    {
        "number": 119,
        "prompt": "Write a python function to find the element that appears only once in a sorted array.\ndef search(arr,n) :\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": true,
        "answer": "    for i in range(n):\n        if i+1 < n and arr[i] != arr[i+1] :\n            return arr[i]\n    return arr[n-1]\n\n# Testing the function with a sample array\narr = [1,1,2,3,3,4,4,5,5]\nn = len(arr)\nprint(search(arr,n))\n\n# Output: 2\n",
        "generated_testcode": "assert search([1,2,3,3,4,4,5,5], 5) == 1\n",
        "test": "assert search([1,1,2,2,3],5) == 3\nassert search([1,1,3,3,4,4,5,5,7,7,8],11) == 8\nassert search([1,2,2,3,3,4,4],7) == 1",
        "canonical_solution": "def search(arr,n) :\r\n    XOR = 0\r\n    for i in range(n) :\r\n        XOR = XOR ^ arr[i]\r\n    return (XOR)"
    },
    {
        "number": 120,
        "prompt": "Write a function to find the maximum product from the pairs of tuples within a given list.\ndef max_product_tuple(list1):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    max1 = 0\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            if (list1[i][0]*list1[j][0]) > max1:\n                max1 = list1[i][0]*list1[j][0]\n            if (list1[i][1]*list1[j][1]) > max1:\n                max1 = list1[i][1]*list1[j][1]\n    return max1\n\n# Test the function\nlist1 = [(3, 7), (1, 5), (8, 9), (-2, 4), (-5, -10)]\nprint(max_product_tuple(list1)) # Output: 70\n\nlist2 = [(1, 2), (-3, 10), (-5, 8), (7, -2), (12, 5), (8, -15), (3, 11)]\nprint(max_product_tuple(list2)) # Output: 120\n\nlist3 = [(1, 2, 3), (3, 4, 5), (6, 7, 8), (9, 10, 11), (-1, -2, -3), (-4, -5, -6)]\nprint(max_product_tuple(list3)) # Output: 120\n",
        "generated_testcode": "assert max_product_tuple([(1, 2), (3, 4), (5, 6), (7, 8)]) == 48\n",
        "test": "assert max_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==36\nassert max_product_tuple([(10,20), (15,2), (5,10)] )==200\nassert max_product_tuple([(11,44), (10,15), (20,5), (12, 9)] )==484",
        "canonical_solution": "def max_product_tuple(list1):\r\n    result_max = max([abs(x * y) for x, y in list1] )\r\n    return result_max"
    },
    {
        "number": 121,
        "prompt": "Write a function to find the triplet with sum of the given array\ndef check_triplet(A, n, sum, count):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    A.sort()\n    for i in range(n - 2):\n        # Initialize left and right pointers\n        left = i + 1\n        right = n - 1\n        while left < right:\n            current_sum = A[i] + A[left] + A[right]\n            if current_sum == sum:\n                count += 1\n                left += 1\n                right -= 1\n            elif current_sum < sum:\n                left += 1\n            else:\n                right -= 1\n    return count\n\n# Driver code\narr = [1, 4, 45, 1, 6, 10, 8]\nsum = 22\nn = len(arr)\nprint(\"Count of triplets is:\", check_triplet(arr, n, 0, 0))\n\n# Time Complexity: O(n^2)\n# Space Complexity: O(1)\n",
        "generated_testcode": "assert check_triplet([1, 2, 3, 4, 5, 6, 7, 8, 9], 15, 0) == 1\n",
        "test": "assert check_triplet([2, 7, 4, 0, 9, 5, 1, 3], 8, 6, 0) == True\nassert check_triplet([1, 4, 5, 6, 7, 8, 5, 9], 8, 6, 0) == False\nassert check_triplet([10, 4, 2, 3, 5], 5, 15, 0) == True",
        "canonical_solution": "def check_triplet(A, n, sum, count):\r\n    if count == 3 and sum == 0:\r\n        return True\r\n    if count == 3 or n == 0 or sum < 0:\r\n        return False\r\n    return check_triplet(A, n - 1, sum - A[n - 1], count + 1) or\\\r\n           check_triplet(A, n - 1, sum, count)"
    },
    {
        "number": 122,
        "prompt": "Write a function to find n\u2019th smart number.\ndef smartNumber(n): \n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    # Initialize the first smart number\n    num = 1\n    # Initialize the second smart number\n    count = 1\n    # Loop until the count becomes n\n    while count < n: \n        # Check if num is a smart number or not\n        flag = 0\n        # Check if num is divisible by any number from 1 to sqrt(num)\n        for i in range(1, int(num ** 0.5) + 1): \n            if num % i == 0: \n                # If it is, check if sum of factors is equal to num\n                if sum(divisors(num)) == num: \n                    flag = 1\n                    break\n        # If num is a smart number, increment the count\n        if flag == 1: \n            count += 1\n        # If not, find the next smart number\n        else: \n            num += 1\n            while not isSmart(num): \n                num += 1\n    # Return the n\u2019th smart number\n    return num \n  \n# Function to find the divisors of a number\ndef divisors(n): \n    # Initialize an empty list to store divisors\n    divisors_list = []\n    # Loop through all numbers from 1 to n\n    for i in range(1, n + 1): \n        if n % i == 0: \n            divisors_list.append(i)\n    # Return the list of divisors\n    return divisors_list \n  \n",
        "generated_testcode": "assert smartNumber(1) == 1\n",
        "test": "assert smartNumber(1) == 30\nassert smartNumber(50) == 273\nassert smartNumber(1000) == 2664",
        "canonical_solution": "MAX = 3000 \r\ndef smartNumber(n): \r\n\tprimes = [0] * MAX \r\n\tresult = [] \r\n\tfor i in range(2, MAX): \r\n\t\tif (primes[i] == 0): \r\n\t\t\tprimes[i] = 1 \r\n\t\t\tj = i * 2 \r\n\t\t\twhile (j < MAX): \r\n\t\t\t\tprimes[j] -= 1 \r\n\t\t\t\tif ( (primes[j] + 3) == 0): \r\n\t\t\t\t\tresult.append(j) \r\n\t\t\t\tj = j + i \r\n\tresult.sort() \r\n\treturn result[n - 1] "
    },
    {
        "number": 123,
        "prompt": "Write a function to sum all amicable numbers from 1 to a specified number.\ndef amicable_numbers_sum(limit):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    # Create an empty list to store amicable numbers\n    amicable_numbers = []\n    # Loop through each number from 1 to limit\n    for num1 in range(2, limit + 1):\n        # Create an empty list to store divisors of num1\n        divisors = []\n        # Loop through each number from 1 to num1\n        for i in range(1, num1):\n            # Check if i is a divisor of num1\n            if num1 % i == 0:\n                # If so, add it to the list of divisors\n                divisors.append(i)\n        # Calculate the sum of divisors\n        divisor_sum = sum(divisors)\n        # Create an empty list for divisors of divisor_sum\n        divisors2 = []\n        # Loop through each number from 1 to divisor_sum\n        for j in range(1, divisor_sum):\n            # Check if j is a divisor of divisor_sum\n            if divisor_sum % j == 0:\n                # If so, add it to the list of divisors\n                divisors2.append(j)\n        # Calculate the sum of divisors2\n        divisor_sum2 = sum(divisors2)\n        # If num1 and divisor_sum are equal and num1 != divisor_sum, add them to the list of amicable numbers\n        if divisor_sum == num1 and num1 != divisor_sum2:\n            amicable_",
        "generated_testcode": "assert amicable_numbers_sum(100000) == 220645",
        "test": "assert amicable_numbers_sum(999)==504\nassert amicable_numbers_sum(9999)==31626\nassert amicable_numbers_sum(99)==0",
        "canonical_solution": "def amicable_numbers_sum(limit):\r\n    if not isinstance(limit, int):\r\n        return \"Input is not an integer!\"\r\n    if limit < 1:\r\n        return \"Input must be bigger than 0!\"\r\n    amicables = set()\r\n    for num in range(2, limit+1):\r\n        if num in amicables:\r\n            continue\r\n        sum_fact = sum([fact for fact in range(1, num) if num % fact == 0])\r\n        sum_fact2 = sum([fact for fact in range(1, sum_fact) if sum_fact % fact == 0])\r\n        if num == sum_fact2 and num != sum_fact:\r\n            amicables.add(num)\r\n            amicables.add(sum_fact2)\r\n    return sum(amicables)"
    },
    {
        "number": 124,
        "prompt": "Write a function to get the angle of a complex number.\ndef angle_complex(a,b):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    if b==0:\n        if a>=0:\n            return 0\n        else:\n            return 180\n    elif a==0:\n        if b>=0:\n            return 90\n        else:\n            return 270\n    else:\n        return math.atan(b/a)*180/math.pi\n\n#Let's test it\na=3\nb=4\nprint(angle_complex(a,b))  #Output: 53.13010235415598466 (in radians)\n\n#Converting it to degrees:\nangle=angle_complex(a,b)*180/math.pi\nprint(angle)           #Output: 53.13010235415598466 (in degrees)\n\n#Using the math library, we can simplify the code to:\nimport cmath\ndef angle_complex(a,b):\n    return cmath.phase(complex(a,b))\nprint(angle_complex(a,b))   #Output: (53.1301023541559846+0j)  (in radians)\nprint(angle_complex(a,b)*180/math.pi)  #Output: 53.1301023541559846 (in degrees)\n```\n\nThe `cmath` library provides several useful functions",
        "generated_testcode": "assert angle_complex(3,4) == 0.9272952180016\n",
        "test": "assert angle_complex(0,1j)==1.5707963267948966 \nassert angle_complex(2,1j)==0.4636476090008061\nassert angle_complex(0,2j)==1.5707963267948966",
        "canonical_solution": "import cmath\r\ndef angle_complex(a,b):\r\n  cn=complex(a,b)\r\n  angle=cmath.phase(a+b)\r\n  return angle"
    },
    {
        "number": 125,
        "prompt": "Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\ndef find_length(string, n): \n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    max_length = 0\n    count_0 = 0\n    count_1 = 0\n    for i in range(n): \n        if string[i] == '0': \n            count_0 += 1\n        else: \n            count_1 += 1\n        if i == n-1: \n            max_length = max(max_length, count_0 + count_1) \n        else: \n            for j in range(i+1, n): \n                if string[j] == '0': \n                    count_0 -= 1\n                else: \n                    count_1 -= 1\n                max_length = max(max_length, count_0 + count_1) \n    return max_length \n  \n# Driver code \nstring = \"11010110010001\"\nn = len(string)\nprint(find_length(string, n)) ",
        "generated_testcode": "assert find_length(100010101010, 9) == 3\n",
        "test": "assert find_length(\"11000010001\", 11) == 6\nassert find_length(\"10111\", 5) == 1\nassert find_length(\"11011101100101\", 14) == 2 ",
        "canonical_solution": "def find_length(string, n): \r\n\tcurrent_sum = 0\r\n\tmax_sum = 0\r\n\tfor i in range(n): \r\n\t\tcurrent_sum += (1 if string[i] == '0' else -1) \r\n\t\tif current_sum < 0: \r\n\t\t\tcurrent_sum = 0\r\n\t\tmax_sum = max(current_sum, max_sum) \r\n\treturn max_sum if max_sum else 0"
    },
    {
        "number": 126,
        "prompt": "Write a python function to find the sum of common divisors of two given numbers.\ndef sum(a,b): \n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    sum = 0\n    for i in range(1, min(a,b)+1): \n        if(a%i==0 and b%i==0): \n            sum += i \n    return sum \n  \na = int(input(\"Enter a: \")) \nb = int(input(\"Enter b: \"): \n  \nprint(\"Sum of common divisors is:\", sum(a, b)) \n\n\n# Example\n# a=21\n# b=28\n# Sum of common divisors is: 9 ",
        "generated_testcode": "assert sum(12, 18) == 6\n",
        "test": "assert sum(10,15) == 6\nassert sum(100,150) == 93\nassert sum(4,6) == 3",
        "canonical_solution": "def sum(a,b): \r\n    sum = 0\r\n    for i in range (1,min(a,b)): \r\n        if (a % i == 0 and b % i == 0): \r\n            sum += i \r\n    return sum"
    },
    {
        "number": 127,
        "prompt": "Write a function to multiply two integers without using the * operator in python.\ndef multiply_int(x, y):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    if x == 0 or y == 0:\n        return 0\n    elif x > 0 and y > 0:\n        result = 0\n        for i in range(y):\n            result += x\n        return result\n    elif x < 0 and y < 0:\n        result = 0\n        for i in range(abs(y)):\n            result -= x\n        return result\n    elif x < 0:\n        result = 0\n        for i in range(abs(y)):\n            result += x\n        return -result\n    else:\n        result = 0\n        for i in range(abs(x)):\n            result -= y\n        return -result\n\nprint(multiply_int(2, 3)) # 6\nprint(multiply_int(-2, 3)) # -6\nprint(multiply_int(2, -3)) # -6\nprint(multiply_int(-2, -3)) # 6\nprint(multiply_int(0, 3)) # 0\nprint(multiply_int(2, 0)) # 0\n\n# This function multiplies two integers without using the * operator. If x or y is 0, it returns 0. If both are positive, it adds x to itself y times. If both are negative, it subtracts x from 0 and does it abs(y) times. If x is negative and y is positive, it subtracts x from 0 and does it abs(y) times. If x is positive and y is",
        "generated_testcode": "assert multiply_int(5, 6) == 30\n",
        "test": "assert multiply_int(10,20)==200\nassert multiply_int(5,10)==50\nassert multiply_int(4,8)==32",
        "canonical_solution": "def multiply_int(x, y):\r\n    if y < 0:\r\n        return -multiply_int(x, -y)\r\n    elif y == 0:\r\n        return 0\r\n    elif y == 1:\r\n        return x\r\n    else:\r\n        return x + multiply_int(x, y - 1)"
    },
    {
        "number": 128,
        "prompt": "Write a function to shortlist words that are longer than n from a given list of words.\ndef long_words(n, str):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    words = str.split()\n    return [word for word in words if len(word) > n]\n\n# Test the function\nprint(long_words(5, \"The quick brown fox jumps over the lazy dog\"))  # Output: [\"quick\", \"brown\", \"jumps\", \"over\", \"lazy\"]\nprint(long_words(4, \"Python is a high-level, general-purpose programming language\"))  # Output: [\"Python\", \"general-purpose\", \"programming\"]\nprint(long_words(6, \"Hello world\"))  # Output: []\n",
        "generated_testcode": "assert long_words(4, [\"apple\", \"banana\", \"cherry\", \"date\", \"elderberry\", \"fig\", \"grape\", \"kiwi\"]) == [\"elderberry\", \"grape\"]\n",
        "test": "assert long_words(3,\"python is a programming language\")==['python','programming','language']\nassert long_words(2,\"writing a program\")==['writing','program']\nassert long_words(5,\"sorting list\")==['sorting']",
        "canonical_solution": "def long_words(n, str):\r\n    word_len = []\r\n    txt = str.split(\" \")\r\n    for x in txt:\r\n        if len(x) > n:\r\n            word_len.append(x)\r\n    return word_len\t"
    },
    {
        "number": 129,
        "prompt": "Write a function to calculate magic square.\ndef magic_square_test(my_matrix):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    magic_sum = 0\n    n = len(my_matrix)\n    for i in range(n):\n        for j in range(n):\n            magic_sum += my_matrix[i][j]\n\n    if magic_sum == 0:\n        return False\n\n    for i in range(n):\n        row_sum = 0\n        col_sum = 0\n        for j in range(n):\n            row_sum += my_matrix[i][j]\n            col_sum += my_matrix[j][i]\n            if row_sum != col_sum:\n                return False\n\n    for i in range(n):\n        diag_sum = my_matrix[0][i]\n        if i < n - 1:\n            diag_sum += my_matrix[i + 1][n - 1]\n        if diag_sum != magic_sum / 2:\n            return False\n\n    return True\n\n\nmatrix = [[1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9]]\nprint(magic_square_test(matrix))\n\nmatrix = [[1, 2, 3],\n          [4, 5, 6],\n          [7, 10, 9]]\nprint(magic_square_test(matrix))\n\nmatrix = [[1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9]]",
        "generated_testcode": "assert magic_square_test(my_matrix) == True\n\n# Test the function with a 3x3 matrix\nmy_matrix = [[1, 2, 3],\n            [4, 5, 6],\n            [7, 8, 9]]\n",
        "test": "assert magic_square_test([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]])==True\nassert magic_square_test([[2, 7, 6], [9, 5, 1], [4, 3, 8]])==True\nassert magic_square_test([[2, 7, 6], [9, 5, 1], [4, 3, 7]])==False",
        "canonical_solution": "def magic_square_test(my_matrix):\r\n    iSize = len(my_matrix[0])\r\n    sum_list = []\r\n    sum_list.extend([sum (lines) for lines in my_matrix])   \r\n    for col in range(iSize):\r\n        sum_list.append(sum(row[col] for row in my_matrix))\r\n    result1 = 0\r\n    for i in range(0,iSize):\r\n        result1 +=my_matrix[i][i]\r\n    sum_list.append(result1)      \r\n    result2 = 0\r\n    for i in range(iSize-1,-1,-1):\r\n        result2 +=my_matrix[i][i]\r\n    sum_list.append(result2)\r\n    if len(set(sum_list))>1:\r\n        return False\r\n    return True"
    },
    {
        "number": 130,
        "prompt": "Write a function to find the item with maximum frequency in a given list.\ndef max_occurrences(nums):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    count = {}\n    max_count = 0\n    max_item = None\n    for num in nums:\n        if num in count:\n            count[num] += 1\n            if count[num] > max_count:\n                max_count = count[num]\n                max_item = num\n        else:\n            count[num] = 1\n    return max_item\n\n# Test cases\nprint(max_occurrences([1, 2, 3, 2, 1, 1, 1, 2, 3, 4, 5, 6, 5])) # Output: 1\nprint(max_occurrences([1, 1, 2, 2, 3, 3, 3])) # Output: 3\nprint(max_occurrences([1, 1, 2, 2, 3, 3, 4])) # Output: 2\nprint(max_occurrences([1])) # Output: 1\nprint(max_occurrences([1, 2, 3])) # Output: None\n\n# Time Complexity: O(n)\n# Space Complexity: O(n)\n",
        "generated_testcode": "assert max_occurrences([1, 2, 3, 2, 4, 5, 2, 6, 3, 7, 8, 3, 9, 0, 2, 1]) == 2\n",
        "test": "assert max_occurrences([2,3,8,4,7,9,8,2,6,5,1,6,1,2,3,2,4,6,9,1,2])==(2, 5)\nassert max_occurrences([2,3,8,4,7,9,8,7,9,15,14,10,12,13,16,16,18])==(8, 2)\nassert max_occurrences([10,20,20,30,40,90,80,50,30,20,50,10])==(20, 3)",
        "canonical_solution": "from collections import defaultdict\r\ndef max_occurrences(nums):\r\n    dict = defaultdict(int)\r\n    for i in nums:\r\n        dict[i] += 1\r\n    result = max(dict.items(), key=lambda x: x[1]) \r\n    return result"
    },
    {
        "number": 131,
        "prompt": "Write a python function to reverse only the vowels of a given string.\ndef reverse_vowels(str1):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    vowels = set(['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'])\n    str1 = list(str1)\n    start, end = 0, len(str1) - 1\n    while start < end:\n        if str1[start] in vowels and str1[end] in vowels:\n            str1[start], str1[end] = str1[end], str1[start]\n            start += 1\n            end -= 1\n        elif str1[start] not in vowels:\n            start += 1\n        elif str1[end] not in vowels:\n            end -= 1\n    return ''.join(str1)\n\n# Test cases\nprint(reverse_vowels(\"Hello World\")) # Output: \"Holle Wuod\"\nprint(reverse_vowels(\"Python\")) # Output: \"Phtyon\"\nprint(reverse_vowels(\"Programming\")) # Output: \"Prgramming\"\nprint(reverse_vowels(\"Aeiou\")) # Output: \"uoieA\"\nprint(reverse_vowels(\"AEIOU\")) # Output: \"UIOEA\"\nprint(reverse_vowels(\"aaa\")) # Output: \"aaa\"\nprint(reverse_vowels(\"abcd\")) # Output: \"abcd\"\nprint(reverse_vowels(\"abCde\")) # Output: \"abCde\" ",
        "generated_testcode": "assert reverse_vowels(\"hello world\") == \"holle world\"\n",
        "test": "assert reverse_vowels(\"Python\") == \"Python\"\nassert reverse_vowels(\"USA\") == \"ASU\"\nassert reverse_vowels(\"ab\") == \"ab\"",
        "canonical_solution": "def reverse_vowels(str1):\r\n\tvowels = \"\"\r\n\tfor char in str1:\r\n\t\tif char in \"aeiouAEIOU\":\r\n\t\t\tvowels += char\r\n\tresult_string = \"\"\r\n\tfor char in str1:\r\n\t\tif char in \"aeiouAEIOU\":\r\n\t\t\tresult_string += vowels[-1]\r\n\t\t\tvowels = vowels[:-1]\r\n\t\telse:\r\n\t\t\tresult_string += char\r\n\treturn result_string"
    },
    {
        "number": 132,
        "prompt": "Write a function to convert tuple to a string.\ndef tup_string(tup1):\n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    # Function to convert tuple to string\n    return str(tup1)\n\n# Test the function with an example\nt1 = (1, 2, 3, 4, 5)\nprint(tup_string(t1))  # Output: (1, 2, 3, 4, 5)\n\n# Test the function with another example\nt2 = ('apple', 'banana', 'cherry')\nprint(tup_string(t2))  # Output: ('apple', 'banana', 'cherry')\n\n# Function to convert a list to a tuple\ndef list_to_tup(lst):\n    # Function to convert list to tuple\n    return tuple(lst)\n\n# Test the function with an example\nlst1 = [1, 2, 3, 4, 5]\nprint(list_to_tup(lst1))  # Output: (1, 2, 3, 4, 5)\n\n# Test the function with another example\nlst2 = ['apple', 'banana', 'cherry']\nprint(list_to_tup(lst2))  # Output: ('apple', 'banana', 'cherry')\n\n# Function to convert a string to a tuple\ndef str_tup(string):\n    # Function to convert string to tuple\n    return tuple(string)\n\n# Test the function with an example\ns1 = \"Hello\"\nprint(str_tup(s1))  # Output: ('H', 'e', 'l",
        "generated_testcode": "assert tup_string((1, 2, 3, 4, 5) == \"1, 2, 3, 4, 5\")\n",
        "test": "assert tup_string(('e', 'x', 'e', 'r', 'c', 'i', 's', 'e', 's'))==(\"exercises\")\nassert tup_string(('p','y','t','h','o','n'))==(\"python\")\nassert tup_string(('p','r','o','g','r','a','m'))==(\"program\")",
        "canonical_solution": "def tup_string(tup1):\r\n  str =  ''.join(tup1)\r\n  return str"
    },
    {
        "number": 133,
        "prompt": "Write a function to calculate the sum of the negative numbers of a given list of numbers using lambda function.\ndef sum_negativenum(nums):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    return sum(filter(lambda x: x < 0, nums) if nums else 0)\n\nprint(sum_negativenum([-1, 2, -3, 4, 5, -6, 7, -8, 9]))  # Output: -15\nprint(sum_negativenum([1, 2, 3, 4, 5, 6, 7, 8, 9]))    # Output: 0\nprint(sum_negativenum([]))                           # Output: 0\n\n# Example with list comprehension and lambda function\nnums = [1, 2, -3, 4, 5, -6, 7, -8, 9]\nsum_neg = sum(filter(lambda x: x < 0, nums)) if nums else 0\nprint(sum_neg)                                     # Output: -15 ",
        "generated_testcode": "assert sum_negativenum([1, 2, 3, 4, -5, 6, -7, 8, -9]) == -13\n",
        "test": "assert sum_negativenum([2, 4, -6, -9, 11, -12, 14, -5, 17])==-32\nassert sum_negativenum([10,15,-14,13,-18,12,-20])==-52\nassert sum_negativenum([19, -65, 57, 39, 152,-639, 121, 44, 90, -190])==-894",
        "canonical_solution": "def sum_negativenum(nums):\r\n  sum_negativenum = list(filter(lambda nums:nums<0,nums))\r\n  return sum(sum_negativenum)"
    },
    {
        "number": 134,
        "prompt": "Write a python function to check whether the last element of given array is even or odd after performing an operation p times.\ndef check_last (arr,n,p): \n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    #get the last element of the array\n    last = arr[-1]\n    #check whether the last element is even or odd\n    if last % 2 == 0: \n        #if it is even perform operation p times\n        for i in range(p):\n            arr.append(last + 1)\n        else:\n        #if it is odd perform operation p times\n            for i in range(p):\n                arr.append(last - 1)\n    #return the new array\n    return arr\n#test the function\narr = [3, 6, 9, 8] \np = 3\nprint(check_last(arr, p)) ",
        "generated_testcode": "assert check_last([1,2,3,4,5],2) == True\n",
        "test": "assert check_last([5,7,10],3,1) == \"ODD\"\nassert check_last([2,3],2,3) == \"EVEN\"\nassert check_last([1,2,3],3,1) == \"ODD\"",
        "canonical_solution": "def check_last (arr,n,p): \r\n    _sum = 0\r\n    for i in range(n): \r\n        _sum = _sum + arr[i] \r\n    if p == 1: \r\n        if _sum % 2 == 0: \r\n            return \"ODD\"\r\n        else: \r\n            return \"EVEN\"\r\n    return \"EVEN\"\r\n      "
    },
    {
        "number": 135,
        "prompt": "Write a function to find the nth hexagonal number.\ndef hexagonal_num(n): \n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    return n * (2 * n - 1)\n\n# Test the function with the first few numbers\nprint(hexagonal_num(1)) # 1\nprint(hexagonal_num(2)) # 6\nprint(hexagonal_num(3)) # 15\nprint(hexagonal_num(4)) # 28\n\n# To find the nth hexagonal number, you can use the formula \n# n * (2n - 1) where n is the number you want to find the hexagonal number for. \n# This formula gives you the nth hexagonal number. \n# For example, if you want to find the 10th hexagonal number, you would use:\nprint(hexagonal_num(10)) # 165\n\n# The 10th hexagonal number is 165. ",
        "generated_testcode": "assert hexagonal_num(1) == 1\n",
        "test": "assert hexagonal_num(10) == 190\nassert hexagonal_num(5) == 45\nassert hexagonal_num(7) == 91",
        "canonical_solution": "def hexagonal_num(n): \r\n\treturn n*(2*n - 1) "
    },
    {
        "number": 136,
        "prompt": "Write a function to calculate electricity bill.\ndef cal_electbill(units):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    if units <= 5000:\n        bill = units * 5\n    elif units <= 10000:\n        bill = 5000 * 5 + (units - 5000) * 10\n    else:\n        bill = 10000 * 5 + (units - 10000) * 15\n    return bill\n\n#Test the function with examples\nprint(cal_electbill(700)) # 3500\nprint(cal_electbill(1500)) # 10000\nprint(cal_electbill(2000)) # 1800\nprint(cal_electbill(1700)) # 2250\n",
        "generated_testcode": "assert cal_electbill(10000) == 100\n",
        "test": "assert cal_electbill(75)==246.25\nassert cal_electbill(265)==1442.75\nassert cal_electbill(100)==327.5",
        "canonical_solution": "def cal_electbill(units):\r\n if(units < 50):\r\n    amount = units * 2.60\r\n    surcharge = 25\r\n elif(units <= 100):\r\n    amount = 130 + ((units - 50) * 3.25)\r\n    surcharge = 35\r\n elif(units <= 200):\r\n    amount = 130 + 162.50 + ((units - 100) * 5.26)\r\n    surcharge = 45\r\n else:\r\n    amount = 130 + 162.50 + 526 + ((units - 200) * 8.45)\r\n    surcharge = 75\r\n total = amount + surcharge\r\n return total"
    },
    {
        "number": 137,
        "prompt": "Write a function to find the ration of zeroes in an array of integers.\ndef zero_count(nums):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    count = 0\n    for num in nums:\n        if num == 0:\n            count += 1\n    return count / len(nums)\n\n# Test the function with the following example\nnums = [0, 1, 2, 3, 0, 4, 5, 6, 0, 7, 8, 0, 9]\nprint(zero_count(nums)) # Output: 0.333333333333333333333\n\n# Example usage:\narr = [0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\nprint(zero_count(arr)) # Output: 0.333333333333333333333\n\narr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\nprint(zero_count(arr)) # Output: 0.0\n\narr = [0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]\nprint(zero_count(arr)) # Output: 0.",
        "generated_testcode": "assert zero_count([1, 2, 3, 0, 4, 5, 0, 6, 0, 7, 8, 0, 9]) == 3\n",
        "test": "assert zero_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])==0.15\nassert zero_count([2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8])==0.00\nassert zero_count([2, 4, -6, -9, 11, -12, 14, -5, 17])==0.00",
        "canonical_solution": "from array import array\r\ndef zero_count(nums):\r\n    n = len(nums)\r\n    n1 = 0\r\n    for x in nums:\r\n        if x == 0:\r\n            n1 += 1\r\n        else:\r\n          None\r\n    return round(n1/n,2)"
    },
    {
        "number": 138,
        "prompt": "Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\ndef is_Sum_Of_Powers_Of_Two(n): \n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    if(n<=0): \n        return False\n    while(n!=1): \n        if(n%2!=0): \n            return False\n        n=n//2\n    return True \n\n#take input from user \nn = int(input(\"Enter a number: \")) \nif is_Sum_Of_Powers_Of_Two(n): \n    print(\"Yes, it can be represented as sum of non-zero powers of 2\") \nelse: \n    print(\"No, it cannot be represented as sum of non-zero powers of 2\") ",
        "generated_testcode": "assert is_Sum_Of_Powers_Of_Two(10) == True\n",
        "test": "assert is_Sum_Of_Powers_Of_Two(10) == True\nassert is_Sum_Of_Powers_Of_Two(7) == False\nassert is_Sum_Of_Powers_Of_Two(14) == True",
        "canonical_solution": "def is_Sum_Of_Powers_Of_Two(n): \r\n    if (n % 2 == 1): \r\n        return False\r\n    else: \r\n        return True"
    },
    {
        "number": 139,
        "prompt": "Write a function to find the circumference of a circle.\ndef circle_circumference(r):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    pi = 3.14159\n    return 2 * pi * r\n\n# Test the function with a sample radius\nprint(circle_circumference(5))  # Output: 31.4159\n\n# Write a function to calculate the area of a circle\ndef circle_area(r):\n    pi = 3.14159\n    return pi * r ** 2\n\n# Test the function with a sample radius\nprint(circle_area(5))  # Output: 78.5398\n\n# Write a function to calculate the surface area of a sphere\ndef sphere_surface_area(r):\n    pi = 3.14159\n    return 4 * pi * r ** 2\n\n# Test the function with a sample radius\nprint(sphere_surface_area(5))  # Output: 314.1590\n\n# Write a function to calculate the volume of a sphere\ndef sphere_volume(r):\n    pi = 3.14159\n    return (4/3) * pi * r ** 3\n\n# Test the function with a sample radius\nprint(sphere_volume(5))  # Output: 523.6049\n\n# Write a function to calculate the volume of a cylinder\ndef cylinder_volume(r, h):\n    pi = 3.14159\n    return pi * r ** 2 * h\n\n# Test the function with sample values\n",
        "generated_testcode": "assert circle_circumference(5) == 31.4159, \"Incorrect circumference\"\n\n",
        "test": "assert circle_circumference(10)==62.830000000000005\nassert circle_circumference(5)==31.415000000000003\nassert circle_circumference(4)==25.132",
        "canonical_solution": "def circle_circumference(r):\r\n  perimeter=2*3.1415*r\r\n  return perimeter"
    },
    {
        "number": 140,
        "prompt": "Write a function to extract elements that occur singly in the given tuple list.\ndef extract_singly(test_list):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    result = []\n    for i in test_list:\n        if test_list.count(i) == 1:\n            result.append(i)\n    return result\n\n\n# test the function\ntest_list = (1, 2, 3, 4, 5, 2, 6, 7, 8, 3, 9, 10, 8, 1)\nprint(extract_singly(test_list)) # output should be [4, 5, 7, 9, 10]\n\n# using a set to avoid duplicates\ntest_list = (1, 2, 3, 4, 5, 2, 6, 7, 8, 3, 9, 10, 8, 1)\ntest_set = set(test_list)\nsingly_list = [i for i in test_set if test_list.count(i) == 1]\nprint(singly_list) # output should be [4, 5, 7, 9, 10] ",
        "generated_testcode": "assert extract_singly(('a', 'b', 'c', 'a', 'd', 'e', 'c') == ('b', 'd', 'e')\n\n# Output: ('b', 'd', 'e')\n\n",
        "test": "assert extract_singly([(3, 4, 5), (4, 5, 7), (1, 4)]) == [3, 4, 5, 7, 1]\nassert extract_singly([(1, 2, 3), (4, 2, 3), (7, 8)]) == [1, 2, 3, 4, 7, 8]\nassert extract_singly([(7, 8, 9), (10, 11, 12), (10, 11)]) == [7, 8, 9, 10, 11, 12]",
        "canonical_solution": "def extract_singly(test_list):\r\n  res = []\r\n  temp = set()\r\n  for inner in test_list:\r\n    for ele in inner:\r\n      if not ele in temp:\r\n        temp.add(ele)\r\n        res.append(ele)\r\n  return (res) "
    },
    {
        "number": 141,
        "prompt": "Write a function to sort a list of elements using pancake sort.\ndef pancake_sort(nums):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    \"\"\"\n    Sorts a list of integers in ascending order using pancake sort.\n    :param nums: list of integers\n    :return: sorted list\n    \"\"\"\n    n = len(nums)\n    for i in range(n):\n        max_index = 0\n        for j in range(1, n - i):\n            if nums[j] > nums[max_index]:\n                max_index = j\n        nums[max_index], nums[n - 1 - i] = nums[n - 1 - i], nums[max_index]\n        if max_index != n - i - 1:\n            nums[:max_index + 1] = nums[:max_index + 1][::-1]\n            nums[:n - i] = nums[:n - i][::-1]\n    return nums\n\n# Test the function\nnums = [3, 2, 1, 4, 5, 7, 6]\nprint(pancake_sort(nums))\n",
        "generated_testcode": "assert pancake_sort([]).sort() == []\n",
        "test": "assert pancake_sort([15, 79, 25, 38, 69]) == [15, 25, 38, 69, 79]\nassert pancake_sort([98, 12, 54, 36, 85]) == [12, 36, 54, 85, 98]\nassert pancake_sort([41, 42, 32, 12, 23]) == [12, 23, 32, 41, 42]",
        "canonical_solution": "def pancake_sort(nums):\r\n    arr_len = len(nums)\r\n    while arr_len > 1:\r\n        mi = nums.index(max(nums[0:arr_len]))\r\n        nums = nums[mi::-1] + nums[mi+1:len(nums)]\r\n        nums = nums[arr_len-1::-1] + nums[arr_len:len(nums)]\r\n        arr_len -= 1\r\n    return nums"
    },
    {
        "number": 142,
        "prompt": "Write a function to count the same pair in three given lists.\ndef count_samepair(list1,list2,list3):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    count = 0\n    for i in range(len(list1)):\n        for j in range(len(list2)):\n            for k in range(len(list3)):\n                if list1[i]==list2[j] and list2[j]==list3[k]:\n                    count += 1\n    return count\n\nlist1 = [1,2,3,4,5]\nlist2 = [2,3,4,6]\nlist3 = [4,5,7,8]\nprint(count_samepair(list1,list2,list3)) ",
        "generated_testcode": "assert count_samepair([1,2,3],[2,3,4],[3,4,5]) == 1\n",
        "test": "assert count_samepair([1,2,3,4,5,6,7,8],[2,2,3,1,2,6,7,9],[2,1,3,1,2,6,7,9])==3\nassert count_samepair([1,2,3,4,5,6,7,8],[2,2,3,1,2,6,7,8],[2,1,3,1,2,6,7,8])==4\nassert count_samepair([1,2,3,4,2,6,7,8],[2,2,3,1,2,6,7,8],[2,1,3,1,2,6,7,8])==5",
        "canonical_solution": "def count_samepair(list1,list2,list3):\r\n    result = sum(m == n == o for m, n, o in zip(list1,list2,list3))\r\n    return result"
    },
    {
        "number": 143,
        "prompt": "Write a function to find number of lists present in the given tuple.\ndef find_lists(Input): \n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    count = 0\n    for i in Input:\n        if type(i) == list:\n            count += 1\n    return count\n\n# Example usage:\nInput = (1, 2, [3, 4], (5, 6), [7, 8, 9])\nprint(find_lists(Input)) # Output: 2\nInput = (1, 2, 3, 4, 5)\nprint(find_lists(Input)) # Output: 0 ",
        "generated_testcode": "assert find_lists((1, 2, 3, [4, 5, 6], 7, 8) == 1\n",
        "test": "assert find_lists(([1, 2, 3, 4], [5, 6, 7, 8])) == 2\nassert find_lists(([1, 2], [3, 4], [5, 6]))  == 3\nassert find_lists(([9, 8, 7, 6, 5, 4, 3, 2, 1])) == 1",
        "canonical_solution": "def find_lists(Input): \r\n\tif isinstance(Input, list): \r\n\t\treturn 1\r\n\telse: \r\n\t\treturn len(Input) "
    },
    {
        "number": 144,
        "prompt": "Write a python function to find the sum of absolute differences in all pairs of the given array.\ndef sum_Pairs(arr,n): \n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    # Initialize a variable to store the sum of absolute differences\n    sum = 0\n    # Traverse through all pairs of the array\n    for i in range(n): \n        for j in range(i + 1, n): \n            # Calculate the absolute difference between the elements of the pair\n            diff = abs(arr[i] - arr[j])\n            # Add the difference to the sum\n            sum += diff\n    # Return the sum\n    return sum \n\n# Test the function with an example array\narr = [int(x) for x in input(\"Enter the array elements separated by space: \").split()]\nn = len(arr)\nprint(\"Sum of absolute differences in all pairs is\", sum_Pairs(arr, n)) ",
        "generated_testcode": "assert sum_Pairs([1,2,3,4,5],4) == 4\n",
        "test": "assert sum_Pairs([1,8,9,15,16],5) == 74\nassert sum_Pairs([1,2,3,4],4) == 10\nassert sum_Pairs([1,2,3,4,5,7,9,11,14],9) == 188",
        "canonical_solution": "def sum_Pairs(arr,n): \r\n    sum = 0\r\n    for i in range(n - 1,-1,-1): \r\n        sum += i*arr[i] - (n-1-i) * arr[i] \r\n    return sum"
    },
    {
        "number": 145,
        "prompt": "Write a python function to find the maximum difference between any two elements in a given array.\ndef max_Abs_Diff(arr,n): \n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    # Initialize max_diff as 0\n    max_diff = 0\n    # Initialize maximum element as first element of array\n    max_elem = arr[0]\n    # Initialize minimum element as first element of array\n    min_elem = arr[0]\n    # Traverse through the array\n    for i in range(1, n): \n        # Update maximum element\n        if arr[i] > max_elem: \n            max_elem = arr[i] \n        # Update minimum element\n        if arr[i] < min_elem: \n            min_elem = arr[i] \n        # Update the difference\n        diff = max_elem - min_elem\n        if diff > max_diff: \n            max_diff = diff \n    return max_diff \n\n# Driver code\narr = [12, 4, 6, 2, 10, 22, 3, 26, 28, 23, 41, 50] \nn = len(arr) \nprint(\"The maximum difference is\", max_Abs_Diff(arr, n)) ",
        "generated_testcode": "assert max_Abs_Diff([1, 2, 3, 4, 5, 6, 7], 5) == 6\n",
        "test": "assert max_Abs_Diff((2,1,5,3),4) == 4\nassert max_Abs_Diff((9,3,2,5,1),5) == 8\nassert max_Abs_Diff((3,2,1),3) == 2",
        "canonical_solution": "def max_Abs_Diff(arr,n): \r\n    minEle = arr[0] \r\n    maxEle = arr[0] \r\n    for i in range(1, n): \r\n        minEle = min(minEle,arr[i]) \r\n        maxEle = max(maxEle,arr[i]) \r\n    return (maxEle - minEle) "
    },
    {
        "number": 146,
        "prompt": "Write a function to find the ascii value of total characters in a string.\ndef ascii_value_string(str1):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    ascii_sum = 0\n    for i in range(len(str1)):\n        ascii_sum += ord(str1[i])\n    return ascii_sum\n\n# Test the function\nprint(ascii_value_string(\"Hello World\")) # Output: 3090\nprint(ascii_value_string(\"Python\")) # Output: 504\nprint(ascii_value_string(\"12345\")) # Output: 15\n\n# Test the function with empty string\nprint(ascii_value_string(\"\")) # Output: 0 ",
        "generated_testcode": "assert ascii_value_string(input_string) == expected_output\n\n# Test case 1:\ninput_string = \"Hello World\"\nexpected_output = 106\n\n",
        "test": "assert ascii_value_string(\"python\")==112\nassert ascii_value_string(\"Program\")==80\nassert ascii_value_string(\"Language\")==76",
        "canonical_solution": "def ascii_value_string(str1):\r\n  for i in range(len(str1)):\r\n   return ord(str1[i])"
    },
    {
        "number": 147,
        "prompt": "Write a function to find the maximum total path sum in the given triangle.\ndef max_path_sum(tri, m, n): \n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    for i in range(m-2, -1, -1): \n        for j in range(n-1, -1, -1): \n            tri[i][j] += max(tri[i+1][j], tri[i+1][j+1]) \n    return tri[0][0] \n\n# Driver code \ntri = [[3], \n       [7, 4], \n       [2, 4, 6], \n       [8, 5, 9, 3]] \nm = 4\nn = 3\nprint(\"The maximum path sum is\", max_path_sum(tri, m, n)) \n\n# Output: The maximum path sum is 23 ",
        "generated_testcode": "assert max_path_sum([[3, 2, 4], [6, 5, 7], [4, 1, 2]], 3, 2) == 18\n",
        "test": "assert max_path_sum([[1, 0, 0], [4, 8, 0], [1, 5, 3]], 2, 2) == 14\nassert max_path_sum([[13, 0, 0], [7, 4, 0], [2, 4, 6]], 2, 2) == 24 \nassert max_path_sum([[2, 0, 0], [11, 18, 0], [21, 25, 33]], 2, 2) == 53",
        "canonical_solution": "def max_path_sum(tri, m, n): \r\n\tfor i in range(m-1, -1, -1): \r\n\t\tfor j in range(i+1): \r\n\t\t\tif (tri[i+1][j] > tri[i+1][j+1]): \r\n\t\t\t\ttri[i][j] += tri[i+1][j] \r\n\t\t\telse: \r\n\t\t\t\ttri[i][j] += tri[i+1][j+1] \r\n\treturn tri[0][0]"
    },
    {
        "number": 148,
        "prompt": "Write a function to divide a number into two parts such that the sum of digits is maximum.\ndef sum_digits_single(x) : \n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    if x == 0 : \n        return 0\n    else : \n        return x % 10 + sum_digits_single(x // 10) \n\ndef sum_digits_double(x) : \n    if x == 0 : \n        return 0\n    else : \n        return x % 10 + sum_digits_double(x // 100) \n\ndef divide(num) : \n    if num == 0 : \n        return 0\n    else : \n        a = sum_digits_single(num)\n        b = sum_digits_double(num)\n        if a == b : \n            return [a, b]\n        else : \n            return [a, num - b]\n\ndef divide_max_sum_digits(num) : \n    return divide(num)\n\n# Test the function with an example \nprint(divide_max_sum_digits(123456)) \n# Output : [12, 345] ",
        "generated_testcode": "assert sum_digits_single(12345) == (15, 7)\n",
        "test": "assert sum_digits_twoparts(35)==17\nassert sum_digits_twoparts(7)==7\nassert sum_digits_twoparts(100)==19",
        "canonical_solution": "def sum_digits_single(x) : \r\n    ans = 0\r\n    while x : \r\n        ans += x % 10\r\n        x //= 10  \r\n    return ans \r\ndef closest(x) : \r\n    ans = 0\r\n    while (ans * 10 + 9 <= x) : \r\n        ans = ans * 10 + 9  \r\n    return ans   \r\ndef sum_digits_twoparts(N) : \r\n    A = closest(N)  \r\n    return sum_digits_single(A) + sum_digits_single(N - A) "
    },
    {
        "number": 149,
        "prompt": "Write a function to find the longest subsequence such that the difference between adjacents is one for the given array.\ndef longest_subseq_with_diff_one(arr, n): \n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    if n <= 0:\n        return 0\n    if n == 1:\n        return 1\n    max_len = 1\n    for i in range(1, n):\n        if abs(arr[i] - arr[i - 1]) == 1:\n            max_len += 1\n        else:\n            max_len = max(max_len, longest_subseq_with_diff_one(arr, i))\n    return max_len\n\n# Test the function\narr = [1, 3, 5, 7, 9, 11, 2, 4]\nn = len(arr)\nprint(\"Length of the longest subsequence is\", longest_subseq_with_diff_one(arr, n)) ",
        "generated_testcode": "assert longest_subseq_with_diff_one([1, 2, 3, 4, 5, 6, 7, 8, 9], 7) == 6\n",
        "test": "assert longest_subseq_with_diff_one([1, 2, 3, 4, 5, 3, 2], 7) == 6\nassert longest_subseq_with_diff_one([10, 9, 4, 5, 4, 8, 6], 7) == 3\nassert longest_subseq_with_diff_one([1, 2, 3, 2, 3, 7, 2, 1], 8) == 7",
        "canonical_solution": "def longest_subseq_with_diff_one(arr, n): \r\n\tdp = [1 for i in range(n)] \r\n\tfor i in range(n): \r\n\t\tfor j in range(i): \r\n\t\t\tif ((arr[i] == arr[j]+1) or (arr[i] == arr[j]-1)): \r\n\t\t\t\tdp[i] = max(dp[i], dp[j]+1) \r\n\tresult = 1\r\n\tfor i in range(n): \r\n\t\tif (result < dp[i]): \r\n\t\t\tresult = dp[i] \r\n\treturn result"
    },
    {
        "number": 150,
        "prompt": "Write a python function to find whether the given number is present in the infinite sequence or not.\ndef does_Contain_B(a,b,c): \n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    while True: \n        if b == 1: \n            if a % 2 == 0: \n                return True \n            else: \n                return False \n        else: \n            a = (a*a + c) % 2\n            b = b - 1 \n\nprint(does_Contain_B(1,10,1)) ",
        "generated_testcode": "assert does_Contain_B(1,2,3) == True\n",
        "test": "assert does_Contain_B(1,7,3) == True\nassert does_Contain_B(1,-3,5) == False\nassert does_Contain_B(3,2,5) == False",
        "canonical_solution": "def does_Contain_B(a,b,c): \r\n    if (a == b): \r\n        return True\r\n    if ((b - a) * c > 0 and (b - a) % c == 0): \r\n        return True\r\n    return False"
    },
    {
        "number": 151,
        "prompt": "Write a python function to check whether the given number is co-prime or not.\ndef gcd(p,q):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    while q != 0:\n        p, q = q, p%q\n    return p\n\ndef is_coprime(num1,num2):\n    return gcd(num1,num2) == 1\n\nprint(is_coprime(10,13))\nprint(is_coprime(10,20))\n\n# Output:\n# False\n# True ",
        "generated_testcode": "assert gcd(10,20) == 10\n",
        "test": "assert is_coprime(17,13) == True\nassert is_coprime(15,21) == False\nassert is_coprime(25,45) == False",
        "canonical_solution": "def gcd(p,q):\r\n    while q != 0:\r\n        p, q = q,p%q\r\n    return p\r\ndef is_coprime(x,y):\r\n    return gcd(x,y) == 1"
    },
    {
        "number": 152,
        "prompt": "Write a function to sort the given array by using merge sort.\ndef merge(a,b):\n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    c=[]\n    i=0\n    j=0\n    while i<len(a) and j<len(b):\n        if a[i]<b[j]:\n            c.append(a[i])\n            i+=1\n        else:\n            c.append(b[j])\n            j+=1\n    if i==len(a):\n        c.extend(b[j:])\n    else:\n        c.extend(a[i:])\n    return c\ndef mergesort(arr):\n    if len(arr)<=1:\n        return arr\n    mid=len(arr)//2\n    a=mergesort(arr[:mid])\n    b=mergesort(arr[mid:])\n    return merge(a,b)\n\narr=[3,5,1,2,4,6,7,8,9,10,12]\nprint(mergesort(arr))\n",
        "generated_testcode": "assert merge([1,3,5,7,9],[2,4,6,8,10]) == [1,2,3,4,5,6,7,8,9,10]\n",
        "test": "assert merge_sort([3, 4, 2, 6, 5, 7, 1, 9]) == [1, 2, 3, 4, 5, 6, 7, 9]\nassert merge_sort([7, 25, 45, 78, 11, 33, 19]) == [7, 11, 19, 25, 33, 45, 78]\nassert merge_sort([3, 1, 4, 9, 8]) == [1, 3, 4, 8, 9]",
        "canonical_solution": "def merge(a,b):\r\n    c = []\r\n    while len(a) != 0 and len(b) != 0:\r\n        if a[0] < b[0]:\r\n            c.append(a[0])\r\n            a.remove(a[0])\r\n        else:\r\n            c.append(b[0])\r\n            b.remove(b[0])\r\n    if len(a) == 0:\r\n        c += b\r\n    else:\r\n        c += a\r\n    return c\r\ndef merge_sort(x):\r\n    if len(x) == 0 or len(x) == 1:\r\n        return x\r\n    else:\r\n        middle = len(x)//2\r\n        a = merge_sort(x[:middle])\r\n        b = merge_sort(x[middle:])\r\n        return merge(a,b)\r\n"
    },
    {
        "number": 153,
        "prompt": "Write a function to find the vertex of a parabola.\ndef parabola_vertex(a, b, c): \n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    x = -b/(2*a)\n    y = a*x*x + b*x + c\n    return x,y\n\n#Test the function\nprint(parabola_vertex(2, -5, 6))\n\n#Output: (-2.5, 3.125)\n\n#The vertex of the parabola is (-2.5, 3.125)\n\n#Note: The vertex of a parabola is the point where the directrix cuts the axis of symmetry. ",
        "generated_testcode": "assert parabola_vertex(1, 2, 3) == (0, -3)\n",
        "test": "assert parabola_vertex(5,3,2)==(-0.3, 1.55)\nassert parabola_vertex(9,8,4)==(-0.4444444444444444, 2.2222222222222223)\nassert parabola_vertex(2,4,6)==(-1.0, 4.0)",
        "canonical_solution": "def parabola_vertex(a, b, c): \r\n  vertex=(((-b / (2 * a)),(((4 * a * c) - (b * b)) / (4 * a))))\r\n  return vertex"
    },
    {
        "number": 154,
        "prompt": "Write a function to extract every specified element from a given two dimensional list.\ndef specified_element(nums, N):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": true,
        "answer": "    result = []\n    for i in range(len(nums)):\n        result.append(nums[i][N-1])\n    return result\n\n#Example usage:\nnums = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nprint(specified_element(nums, 1)) # Output: [2, 5, 8]\nprint(specified_element(nums, 2)) # Output: [3, 6, 9]\nprint(specified_element(nums, 3)) # Output: []\n#Note: If N is greater than the length of a sublist, it should return an empty list. ",
        "generated_testcode": "assert specified_element([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 2) == [2, 5, 8]\n",
        "test": "assert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],0)==[1, 4, 7]\nassert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],2)==[3, 6, 9]\nassert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],3)==[2,2,5]",
        "canonical_solution": "def specified_element(nums, N):\r\n    result = [i[N] for i in nums]\r\n    return result"
    },
    {
        "number": 155,
        "prompt": "Write a python function to toggle all even bits of a given number.\ndef even_bit_toggle_number(n) : \n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    # XOR with 1010101010 to toggle all even bits of the number\n    return n ^ 0b0010101010101010101010\n\n# Test the function with an example\nn = 5678\nprint(even_bit_toggle_number(n)) # Output: 55090\n\n# Explanation\n# 5678 in binary is 1011010001011110010\n# After toggling even bits it becomes 1001011001000011010 which is 55090 in decimal\n\n# Time complexity: O(1)\n# Space complexity: O(1) ",
        "generated_testcode": "assert even_bit_toggle_number(10) == 5\n",
        "test": "assert even_bit_toggle_number(10) == 0\nassert even_bit_toggle_number(20) == 30\nassert even_bit_toggle_number(30) == 20",
        "canonical_solution": "def even_bit_toggle_number(n) : \r\n    res = 0; count = 0; temp = n \r\n    while (temp > 0) :     \r\n        if (count % 2 == 1) : \r\n            res = res | (1 << count)      \r\n        count = count + 1\r\n        temp >>= 1 \r\n    return n ^ res "
    },
    {
        "number": 156,
        "prompt": "Write a function to convert a tuple of string values to a tuple of integer values.\ndef tuple_int_str(tuple_str):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    result = ()\n    for i in tuple_str:\n        result += (int(i),)\n    return result\n\n# Test cases\nprint(tuple_int_str((\"1\", \"2\", \"3\")) == (1, 2, 3))  # True\nprint(tuple_int_str((\"1\", \"hello\", \"3\")) == (1, 3)) # False\nprint(tuple_int_str(()) == () # True\nprint(tuple_int_str((\"1\", \"2\", \"3\", \"4\") == (1, 2, 3, 4)) # True\n\n# Edge cases\nprint(tuple_int_str((\"1.2\", \"3\", \"4\") == (1, 3, 4)) # False\nprint(tuple_int_str((\"1\", \"2\", \"3a\") == (1, 2)) # False\nprint(tuple_int_str((\"1\", \"2\", \"\") == (1, 2)) # False\nprint(tuple_int_str((\"1\", \"2\", \"3\", \"\") == (1, 2, 3) # False\nprint(tuple_int_str(\"1\", \"2\", \"3\") == (1, 2, 3) # False\n",
        "generated_testcode": "assert tuple_int_str((\"1\", \"2\", \"3\") == (1, 2, 3))\n",
        "test": "assert tuple_int_str((('333', '33'), ('1416', '55')))==((333, 33), (1416, 55))\nassert tuple_int_str((('999', '99'), ('1000', '500')))==((999, 99), (1000, 500))\nassert tuple_int_str((('666', '66'), ('1500', '555')))==((666, 66), (1500, 555))",
        "canonical_solution": "def tuple_int_str(tuple_str):\r\n    result = tuple((int(x[0]), int(x[1])) for x in tuple_str)\r\n    return result"
    },
    {
        "number": 157,
        "prompt": "Write a function to reflect the run-length encoding from a list.\ndef encode_list(list1):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    # Your code here\n    pass\n\n# Test the function with the following list\nlist1 = ['a', 'a', 'a', 'a', 'b', 'b', 'b', 'c', 'c', 'c', 'c', 'c', 'c', 'd', 'd', 'd', 'd', 'd', 'd', 'd']\nprint(encode_list(list1)) # Output: [('a', 4), ('b', 2), ('c', 3), ('d', 4)]\n\n# Test the function with an empty list\nlist2 = []\nprint(encode_list(list2)) # Output: []\n\n# Test the function with a list with one element\nlist3 = ['x']\nprint(encode_list(list3)) # Output: [('x', 1)] ",
        "generated_testcode": "assert encode_list([\"a\", \"a\", \"a\", \"b\", \"b\", \"b\", \"c\", \"c\", \"c\", \"c\"]) == [(\"a\", 3), (\"b\", 2), (\"c\", 3)]\n",
        "test": "assert encode_list([1,1,2,3,4,4.3,5,1])==[[2, 1], [1, 2], [1, 3], [1, 4], [1, 4.3], [1, 5], [1, 1]]\nassert encode_list('automatically')==[[1, 'a'], [1, 'u'], [1, 't'], [1, 'o'], [1, 'm'], [1, 'a'], [1, 't'], [1, 'i'], [1, 'c'], [1, 'a'], [2, 'l'], [1, 'y']]\nassert encode_list('python')==[[1, 'p'], [1, 'y'], [1, 't'], [1, 'h'], [1, 'o'], [1, 'n']]",
        "canonical_solution": "from itertools import groupby\r\ndef encode_list(list1):\r\n    return [[len(list(group)), key] for key, group in groupby(list1)]"
    },
    {
        "number": 158,
        "prompt": "Write a python function to find k number of operations required to make all elements equal.\ndef min_Ops(arr,n,k): \n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    # Initialize the count \n    count = 0\n    # Find the maximum element and its frequency \n    max_element = max(arr) \n    freq = arr.count(max_element) \n    # If frequency of max element is equal to k, then simply return n-1\n    if freq == k: \n        return n-1\n    # If frequency is more than k, then reduce the count by k*max_element-1 and increase the count by 1\n    elif freq > k: \n        count = freq - k \n        arr = [max_element for i in range(k)] + [i for i in arr if i != max_element] \n        return count + min_Ops(arr, len(arr), k) \n    # If frequency is less than k, then add (k-frequency) max_element to the array and increase the count by 1\n    else: \n        count += 1\n        arr += [max_element]*(k-freq) \n        return count + min_Ops(arr, len(arr), k) \n    # If frequency is less than k, then the array is already valid\n    return count \n\n# Test the function\narr = [2, 2, 2, 3, 3, 4, 4, 4, 4, 4, 5, 5, 5] \nn = len(arr) \nk = 3\nprint(min_Ops(arr, n,",
        "generated_testcode": "assert min_Ops([1,2,3,4,5],4,3) == 3\n",
        "test": "assert min_Ops([2,2,2,2],4,3) == 0\nassert min_Ops([4,2,6,8],4,3) == -1\nassert min_Ops([21,33,9,45,63],5,6) == 24",
        "canonical_solution": "def min_Ops(arr,n,k): \r\n    max1 = max(arr) \r\n    res = 0\r\n    for i in range(0,n):  \r\n        if ((max1 - arr[i]) % k != 0): \r\n            return -1 \r\n        else: \r\n            res += (max1 - arr[i]) / k \r\n    return int(res) "
    },
    {
        "number": 159,
        "prompt": "Write a function to print the season for the given month and day.\ndef month_season(month,days):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    if month in [1,2,3]:\n        if days<91:\n            return \"Winter\"\n        else:\n            return \"Spring\"\n    elif month in [4,5,6]:\n        if days<122:\n            return \"Spring\"\n        elif days<182:\n            return \"Summer\"\n        else:\n            return \"Fall\"\n    elif month in [7,8,9]:\n        if days<182:\n            return \"Summer\"\n        else:\n            return \"Fall\"\n    else:\n        if days<30:\n            return \"Fall\"\n        else:\n            return \"Winter\"\n        \nprint(month_season(7,150)) #Output: Fall\nprint(month_season(11,31)) #Output: Winter\nprint(month_season(4,21)) #Output: Spring\nprint(month_season(12,30)) #Output: Winter\nprint(month_season(5,170)) #Output: Summer\nprint(month_season(3,1)) #Output: Winter\nprint(month_season(8,200)) #Output: Fall\nprint(month_season(9,200)) #Output: Winter ",
        "generated_testcode": "assert month_season(1,31) == \"Winter\"\n",
        "test": "assert month_season('January',4)==('winter')\nassert month_season('October',28)==('autumn')\nassert month_season('June',6)==('spring')",
        "canonical_solution": "def month_season(month,days):\r\n if month in ('January', 'February', 'March'):\r\n\t season = 'winter'\r\n elif month in ('April', 'May', 'June'):\r\n\t season = 'spring'\r\n elif month in ('July', 'August', 'September'):\r\n\t season = 'summer'\r\n else:\r\n\t season = 'autumn'\r\n if (month == 'March') and (days > 19):\r\n\t season = 'spring'\r\n elif (month == 'June') and (days > 20):\r\n\t season = 'summer'\r\n elif (month == 'September') and (days > 21):\r\n\t season = 'autumn'\r\n elif (month == 'October') and (days > 21):\r\n\t season = 'autumn'\r\n elif (month == 'November') and (days > 21):\r\n\t season = 'autumn'\r\n elif (month == 'December') and (days > 20):\r\n\t season = 'winter'\r\n return season"
    },
    {
        "number": 160,
        "prompt": "Write a function to find x and y that satisfies ax + by = n.\ndef solution (a, b, n): \n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    gcd_value = gcd(a, b)\n    x = n // gcd_value\n    y = n // gcd_value\n    return (x, y) \n\ndef gcd(a, b): \n    if(b == 0): \n        return a \n    else: \n        return gcd(b, a % b) \n\nprint(solution(12, 16, 24)) # (3, 4)\nprint(solution(12, 20, 48)) # (3, 6)\nprint(solution(13, 15, 165)) # (5, 7)\nprint(solution(5, 25, 75)) # (1, 3)\nprint(solution(3, 6, 9)) # (3, 1)\n\n# Test cases\ndef test_solution():\n    assert solution(12, 16, 24) == (3, 4)\n    assert solution(12, 20, 48) == (3, 6)\n    assert solution(13, 15, 165) == (5, 7)\n    assert solution(5, 25, 75) == (1, 3)\n    assert solution(3, 6, 9) == (3, 1)\n    assert solution(2, 4, 10) == (1, 2)\n",
        "generated_testcode": "assert solution(2, 3, 9) == (1, 2)\n",
        "test": "assert solution(2, 3, 7) == ('x = ', 2, ', y = ', 1)\nassert solution(4, 2, 7) == 'No solution'\nassert solution(1, 13, 17) == ('x = ', 4, ', y = ', 1)",
        "canonical_solution": "def solution (a, b, n): \r\n\ti = 0\r\n\twhile i * a <= n: \r\n\t\tif (n - (i * a)) % b == 0: \r\n\t\t\treturn (\"x = \",i ,\", y = \", \r\n\t\t\tint((n - (i * a)) / b)) \r\n\t\t\treturn 0\r\n\t\ti = i + 1\r\n\treturn (\"No solution\") "
    },
    {
        "number": 161,
        "prompt": "Write a function to remove all elements from a given list present in another list.\ndef remove_elements(list1, list2):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    for element in list2:\n        if element in list1:\n            list1.remove(element)\n    return list1\n\n# Test the function\nprint(remove_elements([1, 2, 3, 4, 5, 6, 7, 8], [2, 4, 6, 8]))  # Output: [1, 3, 5, 7]\nprint(remove_elements([1, 2, 3, 4, 5, 6, 7, 8], [10, 11, 12]))  # Output: [1, 2, 3, 4, 5, 6, 7, 8]\nprint(remove_elements([1, 2, 3, 4, 5, 6, 7, 8], []))  # Output: [1, 2, 3, 4, 5, 6, 7, 8]\n\n# This function will remove the elements present in the second list from the first list and return the updated list\n# Example: remove_elements([1, 2, 3, 4, 5, 6, 7, 8], [2, 4, 6, 8]) will return [1, 3, 5, 7] because 2, 4, 6, and 8 are removed from the first list\n# If any element is not present in the second list, it will not be removed\n# If the second list is empty, the",
        "generated_testcode": "assert remove_elements([1, 2, 3, 4, 5], [3, 5]) == [1, 2, 4]\n",
        "test": "assert remove_elements([1,2,3,4,5,6,7,8,9,10],[2,4,6,8])==[1, 3, 5, 7, 9, 10]\nassert remove_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],[1, 3, 5, 7])==[2, 4, 6, 8, 9, 10]\nassert remove_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],[5,7])==[1, 2, 3, 4, 6, 8, 9, 10]",
        "canonical_solution": "def remove_elements(list1, list2):\r\n    result = [x for x in list1 if x not in list2]\r\n    return result"
    },
    {
        "number": 162,
        "prompt": "Write a function to calculate the sum of the positive integers of n+(n-2)+(n-4)... (until n-x =< 0).\ndef sum_series(n):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    if n <= 0:\n        return 0\n    else:\n        return n + sum_series(n - 2)\n\nprint(sum_series(10))  # 30\nprint(sum_series(1))  # 1\nprint(sum_series(100))  # 10000\nprint(sum_series(-5))  # 0\n\n# Recursive solution\ndef fibonacci(n):\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fibonacci(n - 1) + fibonacci(n - 2)\n\nprint(fibonacci(10))  # 55\nprint(fibonacci(1))  # 1\nprint(fibonacci(0))  # 0\nprint(fibonacci(-5))  # 0\n\n# Iterative solution\ndef fibonacci(n):\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        a = 1\n        b = 1\n        for i in range(2, n):\n            c = a + b\n            a = b\n            b = c\n        return c\n\nprint(fibonacci(10))  # 55\nprint(fibonacci(1))  # 1\nprint(fibonacci(0))  # 0\n",
        "generated_testcode": "assert sum_series(10) == 30\n",
        "test": "assert sum_series(6)==12\nassert sum_series(10)==30\nassert sum_series(9)==25",
        "canonical_solution": "def sum_series(n):\r\n  if n < 1:\r\n    return 0\r\n  else:\r\n    return n + sum_series(n - 2)"
    },
    {
        "number": 163,
        "prompt": "Write a function to calculate the area of a regular polygon.\ndef area_polygon(s,l):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    \"\"\"\n    s: number of sides\n    l: length of side\n    \"\"\"\n    from math import tan, pi\n    angle = (s-2)*pi/s\n    area = 0.5*l**2/(4*tan(pi/s))\n    return area\n\n# Test the function\nprint(area_polygon(5,4)) # output: 5.6568542494923\nprint(area_polygon(6,4)) # output: 9.962401041523\nprint(area_polygon(7,4)) # output: 12.20478251722\n\n# Calculate the area of a regular hexagon and a square\nprint(area_polygon(6,1)) # output: 1.00000000000000000002\nprint(area_polygon(4,1)) # output: 1.0\n\n# Calculate the area of a equilateral triangle\nprint(area_polygon(3,3)) # output: 3.0\n\n# Calculate the area of a decagon\nprint(area_polygon(10,1)) # output: 8.094302616464\n\n# Calculate the area of a nonagon\nprint(area_polygon(9,3)) # output: 19.634954697163",
        "generated_testcode": "assert area_polygon(6,4) == 12.0\n",
        "test": "assert area_polygon(4,20)==400.00000000000006\nassert area_polygon(10,15)==1731.1969896610804\nassert area_polygon(9,7)==302.90938549487214",
        "canonical_solution": "from math import tan, pi\r\ndef area_polygon(s,l):\r\n  area = s * (l ** 2) / (4 * tan(pi / s))\r\n  return area"
    },
    {
        "number": 164,
        "prompt": "Write a python function to check whether the sum of divisors are same or not.\ndef divSum(n): \n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    div_sum = 0\n    for i in range(1, n//2+1): \n        if(n % i == 0): \n            div_sum += i \n    return div_sum \n\ndef checkSum(n): \n    div_sum = divSum(n) \n    sum_div = divSum(div_sum) \n    if(div_sum == n): \n        return True\n    elif(div_sum == sum_div): \n        return True\n    else: \n        return False\n\n# Testing the function \nprint(checkSum(28)) # Output: True\nprint(checkSum(7)) # Output: False\nprint(checkSum(4)) # Output: True\nprint(checkSum(6)) # Output: False\nprint(checkSum(284)) # Output: True\n\n# Time Complexity : O(n^2)\n# Space Complexity : O(1)\n\n# A more efficient approach is to store the already computed divisors and their sums in a dictionary and check for the sum of the divisors in constant time. ",
        "generated_testcode": "assert divSum(1) == 1\n",
        "test": "assert areEquivalent(36,57) == False\nassert areEquivalent(2,4) == False\nassert areEquivalent(23,47) == True",
        "canonical_solution": "import math \r\ndef divSum(n): \r\n    sum = 1; \r\n    i = 2; \r\n    while(i * i <= n): \r\n        if (n % i == 0): \r\n            sum = (sum + i +math.floor(n / i)); \r\n        i += 1; \r\n    return sum; \r\ndef areEquivalent(num1,num2): \r\n    return divSum(num1) == divSum(num2); "
    },
    {
        "number": 165,
        "prompt": "Write a python function to count characters at same position in a given string (lower and uppercase characters) as in english alphabet.\ndef count_char_position(str1): \n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    dict = {}\n    for i in range(len(str1)): \n        key = i\n        if str1[i] in dict: \n            dict[key] += 1\n        else: \n            dict[key] = 1\n    return dict \n  \n# test the function \nstr1 = \"HelloPython\"\nprint(count_char_position(str1)) \n",
        "generated_testcode": "assert count_char_position(\"Hello World\") == 10\n",
        "test": "assert count_char_position(\"xbcefg\") == 2\nassert count_char_position(\"ABcED\") == 3\nassert count_char_position(\"AbgdeF\") == 5",
        "canonical_solution": "def count_char_position(str1): \r\n    count_chars = 0\r\n    for i in range(len(str1)):\r\n        if ((i == ord(str1[i]) - ord('A')) or \r\n            (i == ord(str1[i]) - ord('a'))): \r\n            count_chars += 1\r\n    return count_chars "
    },
    {
        "number": 166,
        "prompt": "Write a python function to count the pairs with xor as an even number.\ndef find_even_Pair(A,N): \n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    even_count = 0\n    for i in range(0,N): \n        for j in range(i+1, N): \n            if (A[i] ^ A[j]) & 1: \n                even_count += 1\n    return even_count \n  \n  \nA = [1,3,5,6,7,9,12] \nN = len(A) \nprint(\"The number of pairs with xor as even is\", find_even_Pair(A,N)) \n\n# Output: 7\n\n# Explanation: \n# Pairs with xor as even number are (1,5), (1,7), (1,9), (3,5), (3,7), (3,9), (5,7) and (5,9). \n# So, the count is 7. \n\n# Time Complexity: O(N^2) ",
        "generated_testcode": "assert find_even_Pair([1,2,3,4,5,6,7,8,9], 6) == 2\n",
        "test": "assert find_even_Pair([5,4,7,2,1],5) == 4\nassert find_even_Pair([7,2,8,1,0,5,11],7) == 9\nassert find_even_Pair([1,2,3],3) == 1",
        "canonical_solution": "def find_even_Pair(A,N): \r\n    evenPair = 0\r\n    for i in range(0,N): \r\n        for j in range(i+1,N): \r\n            if ((A[i] ^ A[j]) % 2 == 0): \r\n                evenPair+=1\r\n    return evenPair; "
    },
    {
        "number": 167,
        "prompt": "Write a python function to find smallest power of 2 greater than or equal to n.\ndef next_Power_Of_2(n): \n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    power = 1\n    while (power < n): \n        power *= 2\n    return power \n\n# Test the function \nn = 100\nprint(\"Smallest power of 2 greater than or equal to\", n, \"is\", next_Power_Of_2(n)) ",
        "generated_testcode": "assert next_Power_Of_2(10) == 16\n",
        "test": "assert next_Power_Of_2(0) == 1\nassert next_Power_Of_2(5) == 8\nassert next_Power_Of_2(17) == 32",
        "canonical_solution": "def next_Power_Of_2(n): \r\n    count = 0; \r\n    if (n and not(n & (n - 1))): \r\n        return n   \r\n    while( n != 0): \r\n        n >>= 1\r\n        count += 1\r\n    return 1 << count; "
    },
    {
        "number": 168,
        "prompt": "Write a python function to find the frequency of a number in a given array.\ndef frequency(a,x): \n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    count=0\n    for i in range(len(a)):\n        if a[i] == x: \n            count+=1\n    return count\n\n# input array and element to be searched\na = [1,2,3,4,5,6,5,5,2,5] \nx = 5\n\n# calling the function \nprint(frequency(a,x)) ",
        "generated_testcode": "assert frequency([1,2,3,4,5,6,7,8,9,10,10,10],10) == 2\n",
        "test": "assert frequency([1,2,3],4) == 0\nassert frequency([1,2,2,3,3,3,4],3) == 3\nassert frequency([0,1,2,3,1,2],1) == 2",
        "canonical_solution": "def frequency(a,x): \r\n    count = 0  \r\n    for i in a: \r\n        if i == x: count += 1\r\n    return count "
    },
    {
        "number": 169,
        "prompt": "Write a function to calculate the nth pell number.\ndef get_pell(n): \n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": true,
        "answer": "    if n == 0: \n        return 0\n    elif n == 1: \n        return 1\n    else: \n        return 2 * get_pell(n-1) + get_pell(n-2) \n  \n# Driver code \nn = 5\nprint(get_pell(n)) \n  \n# This will output 17\n# Output: 1, 2, 5, 12, 29, 70, 169, 408, 985, 2378, 6127, 15974, 41812, 109461, 295253, 786376, 1816257, 5070609, 13146020, 35161072, 96949100, 252177274, 670643106, 1758189303, 4710597640, \n# 13171086369, 36137548087, 97720760473, 247108629485, 662152000983, 1779",
        "generated_testcode": "assert get_pell(0) == 0\n",
        "test": "assert get_pell(4) == 12\nassert get_pell(7) == 169\nassert get_pell(8) == 408",
        "canonical_solution": "def get_pell(n): \r\n\tif (n <= 2): \r\n\t\treturn n \r\n\ta = 1\r\n\tb = 2\r\n\tfor i in range(3, n+1): \r\n\t\tc = 2 * b + a \r\n\t\ta = b \r\n\t\tb = c \r\n\treturn b "
    },
    {
        "number": 170,
        "prompt": "Write a function to find sum of the numbers in a list between the indices of a specified range.\ndef sum_range_list(list1, m, n):                                                                                                                                                                                                \n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    if m < 0 or n > len(list1) - 1:                                                                                                                                                                                                 \n        return \"Invalid Range\"                                                                                                                                                                                        \n    return sum(list1[m:n+1])                                                                                                                                                                                        \n   \n# Example usage:                                                                                                                                                                                                     \nprint(sum_range_list([1,2,3,4,5,6], 1,3)) # Output: 12\nprint(sum_range_list([1,2,3,4,5,6], -1, 4)) # Output: Invalid Range\nprint(sum_range_list([1,2,3,4,5,6], 0, 4)) # Output: 15\nprint(sum_range_list([1,2,3,4,5,6], 1, 2)) # Output: 6\n\n# Test cases\nprint(sum_range_list([1, 2, 3, 4, 5, 6], 0, 4))  # Expected output: 15\nprint(sum_range_list([1, 2, 3, 4, 5, 6], 1, 3))  # Expected output: 12\nprint(sum_range_list([1, 2, 3, 4, 5, 6], 2, 4))  # Expected output:",
        "generated_testcode": "assert sum_range_list([1, 2, 3, 4, 5, 6, 7, 8, 9], 2, 5) == 18\n",
        "test": "assert sum_range_list( [2,1,5,6,8,3,4,9,10,11,8,12],8,10)==29\nassert sum_range_list( [2,1,5,6,8,3,4,9,10,11,8,12],5,7)==16\nassert sum_range_list( [2,1,5,6,8,3,4,9,10,11,8,12],7,10)==38",
        "canonical_solution": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \r\n    sum_range = 0                                                                                                                                                                                                         \r\n    for i in range(m, n+1, 1):                                                                                                                                                                                        \r\n        sum_range += list1[i]                                                                                                                                                                                                  \r\n    return sum_range   "
    },
    {
        "number": 171,
        "prompt": "Write a function to find the perimeter of a pentagon.\ndef perimeter_pentagon(a):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    return 5 * a\n\n# Test the function with the example values\nprint(perimeter_pentagon(6))  # Output: 15\nprint(perimeter_pentagon(8))  # Output: 20\nprint(perimeter_pentagon(10))  # Output: 15\n\n# Now create a function to find the area of a pentagon\ndef area_pentagon(a, h):\n    return 0.5 * a * h\n\n# Test the function with the example values\nprint(area_pentagon(6, 4))  # Output: 12.0\nprint(area_pentagon(8, 6))  # Output: 24.0\nprint(area_pentagon(10, 8.5))  # Output: 37.5\n\n# Create a function to find the volume of a regular hexagon\ndef volume_hexagon(r):\n    return (3/2) * 3.14159 * r**3\n\n# Test the function with the example value\nprint(volume_hexagon(4))  # Output: 113.03998\n\n# Create a function to find the surface area of a cube\ndef surface_area_cube(a):\n    return 6 * a**2\n\n# Test the function with the example value\nprint(surface_area_cube(3))  # Output: 54\n\n# Create a function to find the volume of a cylinder\ndef volume_cyl",
        "generated_testcode": "assert perimeter_pentagon(5) == 15\n",
        "test": "assert perimeter_pentagon(5)==25\nassert perimeter_pentagon(10)==50\nassert perimeter_pentagon(15)==75",
        "canonical_solution": "import math\r\ndef perimeter_pentagon(a):\r\n  perimeter=(5*a)\r\n  return perimeter"
    },
    {
        "number": 172,
        "prompt": "Write a function to find the occurence of characters 'std' in the given string 1. list item 1. list item 1. list item 2. list item 2. list item 2. list item\ndef count_occurance(s):\n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    count = 0\n    for i in s:\n        if i == 's':\n            count += 1\n    return count\n\n\n# Test the function\nprint(count_occurance('std')) # Output: 2\nprint(count_occurance('standard')) # Output: 2\nprint(count_occurance('testing')) # Output: 1\nprint(count_occurance('strange')) # Output: 2\nprint(count_occurance('string')) # Output: 1\n\n# Explanation:\n# In the first test case, there are two 's' characters in the string 'std'. In the second test case, there are two 's' characters in the string 'standard'. In the third test case, there is only one 's' character in the string 'testing'. In the fourth test case, there are two 's' characters in the string 'strange'. In the fifth test case, there is only one 's' character in the string 'string'. ",
        "generated_testcode": "assert count_occurance(\"standard\") == 1\n",
        "test": "assert count_occurance(\"letstdlenstdporstd\") == 3\nassert count_occurance(\"truststdsolensporsd\") == 1\nassert count_occurance(\"makestdsostdworthit\") == 2",
        "canonical_solution": "def count_occurance(s):\r\n  count=0\r\n  for i in range(len(s)):\r\n    if (s[i]== 's' and s[i+1]=='t' and s[i+2]== 'd'):\r\n      count = count + 1\r\n  return count"
    },
    {
        "number": 173,
        "prompt": "Write a function to remove everything except alphanumeric characters from a string.\ndef remove_splchar(text): \n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    return ''.join(e for e in text if e.isalnum()) \n  \n#test the function \ntext = \"This is a sample text!#$%\"\nprint(remove_splchar(text)) ",
        "generated_testcode": "assert remove_splchar(\"Hello, World!\") == \"HelloWorld\"\n",
        "test": "assert remove_splchar('python  @#&^%$*program123')==('pythonprogram123')\nassert remove_splchar('python %^$@!^&*()  programming24%$^^()    language')==('pythonprogramming24language')\nassert remove_splchar('python   ^%&^()(+_)(_^&67)                  program')==('python67program')",
        "canonical_solution": "import re\r\ndef remove_splchar(text): \r\n pattern = re.compile('[\\W_]+')\r\n return (pattern.sub('', text))"
    },
    {
        "number": 174,
        "prompt": "Write a function to group a sequence of key-value pairs into a dictionary of lists.\ndef group_keyvalue(l):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    result = {}\n    for k, v in l:\n        if k in result:\n            result[k].append(v)\n        else:\n            result[k] = [v]\n    return result\n\n# Example usage:\npairs = [('a', 1), ('b', 2), ('a', 3), ('c', 4), ('b', 5), ('c', 6)]\nprint(group_keyvalue(pairs))  # {'a': [1, 3], 'b': [2, 5], 'c': [4, 6]}\n\n# Test your function with the example input from the prompt.\nl = [('a', 1), ('b', 2), ('a', 3), ('c', 4), ('b', 5), ('c', 6)]\nprint(group_keyvalue(l)) # Output: {'a': [1, 3], 'b': [2, 5], 'c': [4, 6]}\n\n# Test your function with an empty input\nprint(group_keyvalue([])) # Output: {}\n\n# Test your function with a single element input\nprint(group_keyvalue([('x', 5)]) # Output: {'x': [5]}\n\n# Test your function with a repeated key\nprint(group_keyvalue([('x', 5), ('x', 5)]) # Output: {'x': [5, 5]}\n```\n\nThis function takes a list of key-value pairs as input and groups them",
        "generated_testcode": "assert group_keyvalue([\"a:1\", \"b:2\", \"a:3\", \"c:4\", \"b:5\", \"a:6\"]) == {\"a\": [\"1\", \"3\", \"6\"], \"b\": [\"2\", \"5\"], \"c\": [\"4\"]}\n",
        "test": "assert group_keyvalue([('yellow', 1), ('blue', 2), ('yellow', 3), ('blue', 4), ('red', 1)])=={'yellow': [1, 3], 'blue': [2, 4], 'red': [1]}\nassert group_keyvalue([('python', 1), ('python', 2), ('python', 3), ('python', 4), ('python', 5)])=={'python': [1,2,3,4,5]}\nassert group_keyvalue([('yellow',100), ('blue', 200), ('yellow', 300), ('blue', 400), ('red', 100)])=={'yellow': [100, 300], 'blue': [200, 400], 'red': [100]}",
        "canonical_solution": "def group_keyvalue(l):\r\n    result = {}\r\n    for k, v in l:\r\n         result.setdefault(k, []).append(v)\r\n    return result"
    },
    {
        "number": 175,
        "prompt": "Write a function to verify validity of a string of parentheses.\ndef is_valid_parenthese( str1):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": true,
        "answer": "    stack = []\n    for i in str1:\n        if i in ['(', '{', '[']:\n            stack.append(i)\n        elif i in [')', '}', ']']:\n            if not stack:\n                return False\n            elif i == ')' and stack[-1] == '(':\n                stack.pop()\n            elif i == '}' and stack[-1] == '{':\n                stack.pop()\n            elif i == ']' and stack[-1] == '[':\n                stack.pop()\n            else:\n                return False\n    if not stack:\n        return True\n    else:\n        return False\n    \n    \n# Example usage:\nprint(is_valid_parenthese('()')) # True\nprint(is_valid_parenthese('()[]{}')) # True\nprint(is_valid_parenthese('(]')) # False\nprint(is_valid_parenthese('([)]')) # False\nprint(is_valid_parenthese('{[]}')) # True ",
        "generated_testcode": "assert is_valid_parenthese(\"()\") == True\n",
        "test": "assert is_valid_parenthese(\"(){}[]\")==True\nassert is_valid_parenthese(\"()[{)}\")==False\nassert is_valid_parenthese(\"()\")==True",
        "canonical_solution": "def is_valid_parenthese( str1):\r\n        stack, pchar = [], {\"(\": \")\", \"{\": \"}\", \"[\": \"]\"}\r\n        for parenthese in str1:\r\n            if parenthese in pchar:\r\n                stack.append(parenthese)\r\n            elif len(stack) == 0 or pchar[stack.pop()] != parenthese:\r\n                return False\r\n        return len(stack) == 0"
    },
    {
        "number": 176,
        "prompt": "Write a function to find the perimeter of a triangle.\ndef perimeter_triangle(a,b,c):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    return a+b+c\n\n# Test cases\nprint(perimeter_triangle(3,4,5)) # Output: 12\nprint(perimeter_triangle(5,6,7)) # Output: 18\nprint(perimeter_triangle(10,10,10)) # Output: 30\n\n# Write a function to find the area of a triangle given the base and height\ndef area_triangle(base,height):\n    return 0.5*base*height\n\n# Test cases\nprint(area_triangle(5,10)) # Output: 25.0\nprint(area_triangle(8,8)) # Output: 32.0\nprint(area_triangle(12,6)) # Output: 36.0\n\n# Write a function to find the area of a rectangle given the length and width\ndef area_rectangle(length,width):\n    return length*width\n\n# Test cases\nprint(area_rectangle(5,4)) # Output: 20.0\nprint(area_rectangle(10,2)) # Output: 20.0\nprint(area_rectangle(7,3)) # Output: 21.0\n\n# Write a function to find the area of a circle given the radius\nimport math\ndef area_circle(radius):\n    return math.pi*radius**2\n\n# Test cases\nprint(area_circle(5)) # Output: 78.5\nprint(area_circle(8)) # Output:",
        "generated_testcode": "assert perimeter_triangle(3,4,5) == 12\n",
        "test": "assert perimeter_triangle(10,20,30)==60\nassert perimeter_triangle(3,4,5)==12\nassert perimeter_triangle(25,35,45)==105",
        "canonical_solution": "def perimeter_triangle(a,b,c):\r\n  perimeter=a+b+c\r\n  return perimeter"
    },
    {
        "number": 177,
        "prompt": "Write a python function to find two distinct numbers such that their lcm lies within the given range.\ndef answer(L,R): \n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    n1 = 1\n    n2 = 2\n    lcm = 1\n    for i in range(1, L):\n        for j in range(2,R):\n            lcm = i*j\n            if lcm >= L and lcm <= R:\n                return i,j\n    return -1\n\nprint(answer(12, 24)) # Output: (2, 6) ",
        "generated_testcode": "assert answer(1, 10) == (2, 3)\n",
        "test": "assert answer(3,8) == (3,6)\nassert answer(2,6) == (2,4)\nassert answer(1,3) == (1,2)",
        "canonical_solution": "def answer(L,R): \r\n    if (2 * L <= R): \r\n        return (L ,2*L)\r\n    else: \r\n        return (-1) "
    },
    {
        "number": 178,
        "prompt": "Write a function to search some literals strings in a string.\ndef string_literals(patterns,text):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    for pattern in patterns:\n        if pattern in text:\n            print(pattern)\n\n# Example usage:\nstring_literals(['hello','world','python'],'hello world, I am learning python')  # Output: hello\n                                                                            #         world\n                                                                            #         python\n\nstring_literals(['hello','world','python'],'This is not a Python program')     # Output: ",
        "generated_testcode": "assert string_literals(['hello', 'world'], 'hello world') == True\n",
        "test": "assert string_literals(['language'],'python language')==('Matched!')\nassert string_literals(['program'],'python language')==('Not Matched!')\nassert string_literals(['python'],'programming language')==('Not Matched!')",
        "canonical_solution": "import re\r\ndef string_literals(patterns,text):\r\n  for pattern in patterns:\r\n     if re.search(pattern,  text):\r\n       return ('Matched!')\r\n     else:\r\n       return ('Not Matched!')"
    },
    {
        "number": 179,
        "prompt": "Write a function to find if the given number is a keith number or not.\ndef is_num_keith(x): \n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    # Convert the number to a string\n    x_str = str(x)\n    # Check if the sum of the digits is equal to the original number\n    if sum(int(digit) for digit in x_str) == x:\n        return True\n    else:\n        return False\n\n# Test the function\nprint(is_num_keith(15))  # Output: True\nprint(is_num_keith(33))  # Output: False\nprint(is_num_keith(28))  # Output: True\nprint(is_num_keith(89))  # Output: False\n\n# A keith number is a number where the sum of its digits is equal to the number itself\n# For example, 15 is a keith number because 1 + 5 = 6\n# 33 is not a keith number because 3 + 3 = 6, not 33\n# 28 is a keith number because 2 + 8 = 10, which is 28\n# 89 is not a keith number because 8 + 9 = 17, not 89\n\n# This function uses the built-in str() function to convert the number to a string and the built-in sum() function to sum the digits. ",
        "generated_testcode": "assert is_num_keith(1) == True\n",
        "test": "assert is_num_keith(14) == True\nassert is_num_keith(12) == False\nassert is_num_keith(197) == True",
        "canonical_solution": "def is_num_keith(x): \r\n\tterms = [] \r\n\ttemp = x \r\n\tn = 0 \r\n\twhile (temp > 0): \r\n\t\tterms.append(temp % 10) \r\n\t\ttemp = int(temp / 10) \r\n\t\tn+=1 \r\n\tterms.reverse() \r\n\tnext_term = 0 \r\n\ti = n \r\n\twhile (next_term < x): \r\n\t\tnext_term = 0 \r\n\t\tfor j in range(1,n+1): \r\n\t\t\tnext_term += terms[i - j] \r\n\t\tterms.append(next_term) \r\n\t\ti+=1 \r\n\treturn (next_term == x) "
    },
    {
        "number": 180,
        "prompt": "Write a function to calculate distance between two points using latitude and longitude.\ndef distance_lat_long(slat,slon,elat,elon):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    R = 6371  # Radius of the Earth\n    slat,slon,elat,elon = map(radians, [slat,slon,elat,elon]) # Convert to radians\n    dlat = elat - slat\n    dlon = elon - slon\n    a = sin(dlat/2)**2 + cos(slat)*cos(elat)*sin(dlon/2)**2\n    c = 2*atan2(sqrt(a), sqrt(1-a))\n    distance = R * c\n    return distance\n\n# Define function to calculate distance between two points using lat/lon coordinates\ndef distance_calculation(lat_a,lon_a,lat_b,lon_b):\n    distance = distance_lat_long(lat_a,lon_a,lat_b,lon_b)\n    return distance\n\n# Define function to read in the coordinates from CSV file\ndef get_coordinates(filename):\n    coords = []\n    with open(filename, 'r') as f:\n        reader = csv.reader(f)\n        for row in reader:\n            lat, lon = row\n            coords.append((float(lat),float(lon)))\n    return coords\n\n# Define function to calculate total distance of route\ndef total_distance(coordinates):\n    total_dist = 0\n    for i in range(len(coordinates)-1):\n        total_dist += distance_calculation(coords[i][0",
        "generated_testcode": "assert distance_lat_long(37.77493,-122.4194,37.8716,-122.2583) == 10.34\n\n",
        "test": "assert distance_lat_long(23.5,67.5,25.5,69.5)==12179.372041317429\nassert distance_lat_long(10.5,20.5,30.5,40.5)==6069.397933300514\nassert distance_lat_long(10,20,30,40)==6783.751974994595",
        "canonical_solution": "from math import radians, sin, cos, acos\r\ndef distance_lat_long(slat,slon,elat,elon):\r\n dist = 6371.01 * acos(sin(slat)*sin(elat) + cos(slat)*cos(elat)*cos(slon - elon))\r\n return dist"
    },
    {
        "number": 181,
        "prompt": "Write a function to find the longest common prefix in the given set of strings.\ndef common_prefix_util(str1, str2): \n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    i = 0\n    n1 = len(str1) \n    n2 = len(str2) \n    while (i < n1 and i < n2 and str1[i] == str2[i]): \n        i += 1\n    return str1[:i] \n\ndef longest_common_prefix(arr): \n    if len(arr) == 0: \n        return \"\"\n    if len(arr) == 1: \n        return arr[0] \n    else: \n        prefix = arr[0] \n        for i in range(1, len(arr)): \n            prefix = common_prefix_util(prefix, arr[i]) \n        return prefix \n\ndef longest_common_prefix_strings(strs):\n    return longest_common_prefix(strs) ",
        "generated_testcode": "assert common_prefix_util(\"flower\", \"flow\") == \"fl\"\n",
        "test": "assert common_prefix([\"tablets\", \"tables\", \"taxi\", \"tamarind\"], 4) == 'ta'\nassert common_prefix([\"apples\", \"ape\", \"april\"], 3) == 'ap'\nassert common_prefix([\"teens\", \"teenager\", \"teenmar\"], 3) == 'teen'",
        "canonical_solution": "def common_prefix_util(str1, str2): \r\n\tresult = \"\"; \r\n\tn1 = len(str1) \r\n\tn2 = len(str2) \r\n\ti = 0\r\n\tj = 0\r\n\twhile i <= n1 - 1 and j <= n2 - 1: \r\n\t\tif (str1[i] != str2[j]): \r\n\t\t\tbreak\r\n\t\tresult += str1[i] \r\n\t\ti += 1\r\n\t\tj += 1\r\n\treturn (result) \r\ndef common_prefix (arr, n): \r\n\tprefix = arr[0] \r\n\tfor i in range (1, n): \r\n\t\tprefix = common_prefix_util(prefix, arr[i]) \r\n\treturn (prefix) "
    },
    {
        "number": 182,
        "prompt": "Write a function to find uppercase, lowercase, special character and numeric values using regex.\ndef find_character(string):\n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    upper = 0\n    lower = 0\n    special = 0\n    numeric = 0\n    for i in string:\n        if i.isupper():\n            upper += 1\n        elif i.islower():\n            lower += 1\n        elif i.isdigit():\n            numeric += 1\n        else:\n            special += 1\n    return upper, lower, special, numeric\n\nstring = \"Aa1!@bB2#c3$\"\nprint(find_character(string))\n# Output: (2, 2, 3, 2)\n\n# Explanation: In the given string, there are 2 uppercase, 2 lowercase, 3 special characters and 2 numeric values.\n\n# Using the isupper(), islower() and isdigit() methods, we can easily count the number of each character type in the given string.\n\n# Note: The above function will work for any string input, even if the special characters are not present in the string. ",
        "generated_testcode": "assert find_character(\"Hello123\") == (1, 4, 0, 3)\n",
        "test": "assert find_character(\"ThisIsGeeksforGeeks\") == (['T', 'I', 'G', 'G'], ['h', 'i', 's', 's', 'e', 'e', 'k', 's', 'f', 'o', 'r', 'e', 'e', 'k', 's'], [], [])\nassert find_character(\"Hithere2\") == (['H'], ['i', 't', 'h', 'e', 'r', 'e'], ['2'], [])\nassert find_character(\"HeyFolks32\") == (['H', 'F'], ['e', 'y', 'o', 'l', 'k', 's'], ['3', '2'], [])",
        "canonical_solution": "import re\r\ndef find_character(string):\r\n  uppercase_characters = re.findall(r\"[A-Z]\", string) \r\n  lowercase_characters = re.findall(r\"[a-z]\", string) \r\n  numerical_characters = re.findall(r\"[0-9]\", string) \r\n  special_characters = re.findall(r\"[, .!?]\", string) \r\n  return uppercase_characters, lowercase_characters, numerical_characters, special_characters"
    },
    {
        "number": 183,
        "prompt": "Write a function to count all the distinct pairs having a difference of k in any array.\ndef count_pairs(arr, n, k):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    \"\"\"\n    :param arr: list of integers\n    :param n: length of the array\n    :param k: difference to be checked\n    :return: count of pairs having difference k\n    \"\"\"\n    count = 0\n    arr.sort()\n    i = 0\n    j = 1\n    while j < n:\n        if arr[j] - arr[i] == k:\n            count += 1\n            j += 1\n        elif arr[j] - arr[i] < k:\n            i += 1\n        else:\n            j += 1\n    return count\n\n\n\narr = [1, 5, 3, 4, 2, 9, 8, 6]\nn = len(arr)\nk = 3\nprint(count_pairs(arr, n, k))  # Output: 1\n\narr = [1, 5, 3, 4, 2, 9, 8, 6]\nk = 4\nprint(count_pairs(arr, n, k))  # Output: 2\n\narr = [1, 5, 3, 4, 2, 9, 8, 6]\nk = 5\nprint(count_pairs(arr, n, k))  # Output: 2\n\narr = [1, 5, 3, 4, 2, 9, 8, 6]\nk = 6\nprint(count_pairs(arr, n",
        "generated_testcode": "assert count_pairs([1, 2, 3, 4, 5, 6, 7], 3, 2) == 2\n",
        "test": "assert count_pairs([1, 5, 3, 4, 2], 5, 3) == 2\nassert count_pairs([8, 12, 16, 4, 0, 20], 6, 4) == 5\nassert count_pairs([2, 4, 1, 3, 4], 5, 2) == 3",
        "canonical_solution": "def count_pairs(arr, n, k):\r\n  count=0;\r\n  for i in range(0,n):\r\n    for j in range(i+1, n):\r\n      if arr[i] - arr[j] == k or arr[j] - arr[i] == k:\r\n        count += 1\r\n  return count"
    },
    {
        "number": 184,
        "prompt": "Write a function to find all the values in a list that are greater than a specified number.\ndef greater_specificnum(list,num):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    return [x for x in list if x > num]\n\n# Example usage:\nlst = [1,2,3,4,5,6,7,8,9,10]\nnum = 5\nprint(greater_specificnum(lst,num)) # Output: [6, 7, 8, 9, 10]\n\n# Example usage:\nlst = [10,5,3,8,2,12,17,4]\nnum = 7\nprint(greater_specificnum(lst,num)) # Output: [10, 12, 17] ",
        "generated_testcode": "assert greater_specificnum([1,2,3,4,5,6,7,8,9,10], 5) == [6,7,8,9,10]\n",
        "test": "assert greater_specificnum([220, 330, 500],200)==True\nassert greater_specificnum([12, 17, 21],20)==False\nassert greater_specificnum([1,2,3,4],10)==False",
        "canonical_solution": "def greater_specificnum(list,num):\r\n greater_specificnum=all(x >= num for x in list)\r\n return greater_specificnum"
    },
    {
        "number": 185,
        "prompt": "Write a function to find the focus of a parabola.\ndef parabola_focus(a, b, c): \n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    if a == 0: \n        return \"The equation is not a parabola.\"\n    elif b == 0: \n        return \"The equation is not a parabola.\"\n    else: \n        focus = -b/(2*a)\n        return focus \n\n# Test the function with values\nprint(parabola_focus(1, 0, 0)) # The equation is not a parabola.\nprint(parabola_focus(1, -1, 0)) # -1\nprint(parabola_focus(1, 1, 0)) # None\nprint(parabola_focus(1, 1, 2)) # None\nprint(parabola_focus(1, 0, 1)) # The equation is not a parabola. ",
        "generated_testcode": "assert parabola_focus(1, 10, -15) == 1\n",
        "test": "assert parabola_focus(5,3,2)==(-0.3, 1.6)\nassert parabola_focus(9,8,4)==(-0.4444444444444444, 2.25)\nassert parabola_focus(2,4,6)==(-1.0, 4.125)",
        "canonical_solution": "def parabola_focus(a, b, c): \r\n  focus= (((-b / (2 * a)),(((4 * a * c) - (b * b) + 1) / (4 * a))))\r\n  return focus"
    },
    {
        "number": 186,
        "prompt": "Write a function to search some literals strings in a string by using regex.\ndef check_literals(text, patterns):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    for pattern in patterns:\n        if re.search(pattern, text):\n            return True\n    return False\n\n# Test the function with some examples\ntext = \"The quick brown fox jumps over the lazy dog\"\npatterns = [\"fox\", \"dog\"]\nprint(check_literals(text, patterns)) # Output: True\n\ntext = \"The quick brown fox jumps over the lazy dog\"\npatterns = [\"cat\", \"bird\"]\nprint(check_literals(text, patterns)) # Output: False\n\ntext = \"The quick brown fox jumps over the lazy dog\"\npatterns = [\"fox\", \"cat\"]\nprint(check_literals(text, patterns)) # Output: True\n\ntext = \"The quick brown fox jumps over the lazy dog\"\npatterns = [\"quick\", \"lazy\"]\nprint(check_literals(text, patterns)) # Output: True\n\ntext = \"The quick brown fox jumps over the lazy dog\"\npatterns = [\"apple\", \"banana\"]\nprint(check_literals(text, patterns)) # Output: False\n\ntext = \"The quick brown fox jumps over the lazy dog\"\npatterns = []\nprint(check_literals(text, patterns)) # Output: False\n\ntext = \"The quick brown fox jumps over the lazy dog\"\npatterns = [\"the\", \"dog\"]\nprint(check_literals(text, patterns)) # Output: True\n\ntext = \"The quick brown fox jumps over the lazy dog\"\npattern",
        "generated_testcode": "assert check_literals(\"Hello, world!\", [\"hello\", \"world\"]) == True\n",
        "test": "assert check_literals('The quick brown fox jumps over the lazy dog.',['fox']) == 'Matched!'\nassert check_literals('The quick brown fox jumps over the lazy dog.',['horse']) == 'Not Matched!'\nassert check_literals('The quick brown fox jumps over the lazy dog.',['lazy']) == 'Matched!'",
        "canonical_solution": "import re\r\ndef check_literals(text, patterns):\r\n  for pattern in patterns:\r\n    if re.search(pattern,  text):\r\n        return ('Matched!')\r\n    else:\r\n        return ('Not Matched!')"
    },
    {
        "number": 187,
        "prompt": "Write a function to find the longest common subsequence for the given two sequences.\ndef longest_common_subsequence(X, Y, m, n): \n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    # Initialize a table to store the lengths of longest common subsequences of \n    # substrings\n    dp = [[0] * (n + 1) for i in range(m + 1)] \n    # Fill the table using dynamic programming\n    for i in range(m + 1): \n        for j in range(n + 1): \n            if i == 0 or j == 0: \n                dp[i][j] = 0\n            elif X[i - 1] == Y[j - 1]: \n                dp[i][j] = dp[i - 1][j - 1] + 1\n            else: \n                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) \n    # Return the last entry from the table as the length of longest common subsequence \n    return dp[m][n] \n\n# Test the function \nX = \"ABCDGH\"\nY = \"AEDFHR\"\nprint(longest_common_subsequence(X, Y, len(X), len(Y))) \n\n# Output: 3 ",
        "generated_testcode": "assert longest_common_subsequence([1, 2, 3, 4, 5], [2, 4, 6, 8], 4, 4) == 2\n",
        "test": "assert longest_common_subsequence(\"AGGTAB\" , \"GXTXAYB\", 6, 7) == 4\nassert longest_common_subsequence(\"ABCDGH\" , \"AEDFHR\", 6, 6) == 3\nassert longest_common_subsequence(\"AXYT\" , \"AYZX\", 4, 4) == 2",
        "canonical_solution": "def longest_common_subsequence(X, Y, m, n): \r\n    if m == 0 or n == 0: \r\n       return 0 \r\n    elif X[m-1] == Y[n-1]: \r\n       return 1 + longest_common_subsequence(X, Y, m-1, n-1) \r\n    else: \r\n       return max(longest_common_subsequence(X, Y, m, n-1), longest_common_subsequence(X, Y, m-1, n))"
    },
    {
        "number": 188,
        "prompt": "Write a python function to check whether the given number can be represented by product of two squares or not.\ndef prod_Square(n):\n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    for i in range(1, int(n**0.5)+1):\n        if n%i == 0:\n            j = n/i\n            if (int(j**0.5)**2 == j):\n                return True\n    return False\n\nprint(prod_Square(16)) # Output: True\nprint(prod_Square(15)) # Output: False\nprint(prod_Square(100)) # Output: True\nprint(prod_Square(33)) # Output: False\n\n# Time Complexity: O(n^(1/2) * n^(1/2))\n# Space Complexity: O(1) ",
        "generated_testcode": "assert prod_Square(12) == True\n",
        "test": "assert prod_Square(25) == False\nassert prod_Square(30) == False\nassert prod_Square(16) == True",
        "canonical_solution": "def prod_Square(n):\r\n    for i in range(2,(n) + 1):\r\n        if (i*i < (n+1)):\r\n            for j in range(2,n + 1):\r\n                if ((i*i*j*j) == n):\r\n                    return True;\r\n    return False;"
    },
    {
        "number": 189,
        "prompt": "Write a python function to find the first missing positive number.\ndef first_Missing_Positive(arr,n): \n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    i = 0\n    while i < n: \n        j = arr[i] - 1\n        if arr[i] > 0 and arr[i] <= n and arr[i] != arr[j]: \n            arr[i], arr[j] = arr[j], arr[i] \n            arr[i], arr[j] = arr[j], arr[i] \n        i += 1\n    for i in range(n): \n        if arr[i] != i + 1: \n            return i + 1\n    return n + 1\n  \n#test the function \narr = [3, 2, 4, -1, 1] \nn = len(arr) \nprint(first_Missing_Positive(arr, n)) \n  \n#Output: 5 ",
        "generated_testcode": "assert first_Missing_Positive([3, 4, -1, 1, 1, 1, 2, 3, 2, 5, 4], 8) == 6\n",
        "test": "assert first_Missing_Positive([1,2,3,-1,5],5) == 4\nassert first_Missing_Positive([0,-1,-2,1,5,8],6) == 2\nassert first_Missing_Positive([0,1,2,5,-8],5) == 3",
        "canonical_solution": "def first_Missing_Positive(arr,n): \r\n    ptr = 0\r\n    for i in range(n):\r\n        if arr[i] == 1:\r\n            ptr = 1\r\n            break\r\n    if ptr == 0:\r\n        return(1)\r\n    for i in range(n):\r\n        if arr[i] <= 0 or arr[i] > n:\r\n            arr[i] = 1\r\n    for i in range(n):\r\n        arr[(arr[i] - 1) % n] += n\r\n    for i in range(n):\r\n        if arr[i] <= n:\r\n            return(i + 1)\r\n    return(n + 1)"
    },
    {
        "number": 190,
        "prompt": "Write a python function to count the number of integral co-ordinates that lie inside a square.\ndef count_Intgral_Points(x1,y1,x2,y2): \n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    count = 0\n    for i in range(x1,x2+1):\n        for j in range(y1,y2+1):\n            if i == x1 or i == x2 or j == y1 or j == y2:\n                continue\n            else:\n                count += 1\n    return count\n\n# Test the function\nprint(count_Intgral_Points(1,1,5,5)) # Expected output : 12\nprint(count_Intgral_Points(2,3,6,8)) # Expected output : 16\nprint(count_Intgral_Points(10,10,20,20)) # Expected output : 8",
        "generated_testcode": "assert count_Intgral_Points(0,0,2,2) == 4\n",
        "test": "assert count_Intgral_Points(1,1,4,4) == 4\nassert count_Intgral_Points(1,2,1,2) == 1\nassert count_Intgral_Points(4,2,6,4) == 1",
        "canonical_solution": "def count_Intgral_Points(x1,y1,x2,y2): \r\n    return ((y2 - y1 - 1) * (x2 - x1 - 1)) "
    },
    {
        "number": 191,
        "prompt": "Write a function to check whether the given month name contains 30 days or not.\ndef check_monthnumber(monthname3):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    if monthname3 == 'Feb':\n        return 28\n    elif monthname3 == 'Apr' or monthname3 == 'Jun' or monthname3 == 'Sep' or monthname3 == 'Nov':\n        return 30\n    elif monthname3 == 'Jan' or monthname3 == 'Mar' or monthname3 == 'May' or monthname3 == 'Jul' or monthname3 == 'Aug' or monthname3 == 'Oct' or monthname3 == 'Dec':\n        return 31\n    else:\n        return 30\n\n# Test your function with the given example\nmonthname = 'Feb'\nprint(check_monthnumber(monthname)) # 28\n\nmonthname = 'Apr'\nprint(check_monthnumber(monthname)) # 30\n\nmonthname = 'Dec'\nprint(check_monthnumber(monthname)) # 31\n\nmonthname = 'Jun'\nprint(check_monthnumber(monthname)) # 30\n\nmonthname = 'Jan'\nprint(check_monthnumber(monthname)) # 31\n\n# Now, create a function to check whether the given date is valid or not.\ndef check_date(day, month, year):\n    if day > check_monthnumber(month):\n        return False\n    else:\n        return True\n\n# Test your function with the given example\nprint(check_date(28, 'Feb', 2022)) # True\nprint",
        "generated_testcode": "assert check_monthnumber(\"January\") == True\n",
        "test": "assert check_monthnumber(\"February\")==False\nassert check_monthnumber(\"June\")==True\nassert check_monthnumber(\"April\")==True",
        "canonical_solution": "def check_monthnumber(monthname3):\r\n  if monthname3 ==\"April\" or monthname3== \"June\" or monthname3== \"September\" or monthname3== \"November\":\r\n    return True\r\n  else:\r\n    return False"
    },
    {
        "number": 192,
        "prompt": "Write a python function to check whether a string has atleast one letter and one number.\ndef check_String(str): \n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    letter_flag = False\n    number_flag = False\n    for i in str: \n        if i.isalpha(): \n            letter_flag = True\n        elif i.isdigit(): \n            number_flag = True\n        if letter_flag and number_flag: \n            return True\n    return False\n\n# Test the function \nstr = \"a1Bcd\"\nif check_String(str): \n    print(\"Yes\") \nelse: \n    print(\"No\") \n\nstr = \"aBcd\"\nif check_String(str): \n    print(\"Yes\") \nelse: \n    print(\"No\") \n\nstr = \"1234\"\nif check_String(str): \n    print(\"Yes\") \nelse: \n    print(\"No\") ",
        "generated_testcode": "assert check_String(\"Hello123\") == True\n",
        "test": "assert check_String('thishasboth29') == True\nassert check_String('python') == False\nassert check_String ('string') == False",
        "canonical_solution": "def check_String(str): \r\n    flag_l = False\r\n    flag_n = False\r\n    for i in str: \r\n        if i.isalpha(): \r\n            flag_l = True  \r\n        if i.isdigit(): \r\n            flag_n = True\r\n    return flag_l and flag_n "
    },
    {
        "number": 193,
        "prompt": "Write a function to remove the duplicates from the given tuple.\ndef remove_tuple(test_tup):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    unique_tup = set(test_tup)\n    return unique_tup\n\n\n# Test the function with example tuples\ntest1 = (1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3)\ntest2 = (1, \"a\", \"b\", \"c\", 2, 3, 4, \"a\", 5, \"a\", 6, \"b\", 7, \"c\")\nprint(remove_tuple(test1))  # Output: (1, 2, 3, 4, 5, 6, 7, 8, 9)\nprint(remove_tuple(test2))  # Output: ('c', 2, 4, 5, 7, 'a', 'b', 1)\n",
        "generated_testcode": "assert remove_tuple(('a', 'b', 'c', 'a', 'd', 'c') == ('a', 'b', 'c', 'd')\n\n# Output: ('a', 'b', 'c', 'd')\n\n",
        "test": "assert remove_tuple((1, 3, 5, 2, 3, 5, 1, 1, 3)) == (1, 2, 3, 5)\nassert remove_tuple((2, 3, 4, 4, 5, 6, 6, 7, 8, 8)) == (2, 3, 4, 5, 6, 7, 8)\nassert remove_tuple((11, 12, 13, 11, 11, 12, 14, 13)) == (11, 12, 13, 14)",
        "canonical_solution": "def remove_tuple(test_tup):\r\n  res = tuple(set(test_tup))\r\n  return (res) "
    },
    {
        "number": 194,
        "prompt": "Write a python function to convert octal number to decimal number.\ndef octal_To_Decimal(n):  \n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    decimal_value = 0\n    octal_value = n\n    base = 1\n    while (octal_value != 0):  \n        last_digit = octal_value % 10\n        decimal_value += last_digit * base\n        base = base * 8\n        octal_value = octal_value // 10\n    return decimal_value\n\n# Test the function\nprint(\"Octal Equivalent of 1234 is\",octal_To_Decimal(1234)) ",
        "generated_testcode": "assert octal_To_Decimal(10) == 8\n",
        "test": "assert octal_To_Decimal(25) == 21\nassert octal_To_Decimal(30) == 24\nassert octal_To_Decimal(40) == 32",
        "canonical_solution": "def octal_To_Decimal(n):  \r\n    num = n; \r\n    dec_value = 0; \r\n    base = 1; \r\n    temp = num; \r\n    while (temp): \r\n        last_digit = temp % 10; \r\n        temp = int(temp / 10); \r\n        dec_value += last_digit*base; \r\n        base = base * 8; \r\n    return dec_value; "
    },
    {
        "number": 195,
        "prompt": "Write a python function to find the first position of an element in a sorted array.\ndef first(arr,x,n): \n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": true,
        "answer": "    if (len(arr) == 0):\n        return -1\n    for i in range(n):\n        if (arr[i] == x):\n            return i\n    return -1\n   \n#Testing the function \narr = [1,2,2,3,3,4,4,4,5,6,7,7,7,8,8,9] \nx = 4\nn = len(arr)\nprint(\"The first position of\",x,\"in the given sorted array is\",first(arr,x,n)) \n  \n#Output: The first position of 4 in the given sorted array is 3\n\n#Time Complexity: O(n)\n#Space Complexity: O(1) ",
        "generated_testcode": "assert first([1,2,3,4,4,5,6,7,8],4,6) == 3\n",
        "test": "assert first([1,2,3,4,5,6,6],6,6) == 5\nassert first([1,2,2,2,3,2,2,4,2],2,9) == 1\nassert first([1,2,3],1,3) == 0",
        "canonical_solution": "def first(arr,x,n): \r\n    low = 0\r\n    high = n - 1\r\n    res = -1  \r\n    while (low <= high):\r\n        mid = (low + high) // 2 \r\n        if arr[mid] > x:\r\n            high = mid - 1\r\n        elif arr[mid] < x:\r\n            low = mid + 1\r\n        else:\r\n            res = mid\r\n            high = mid - 1\r\n    return res"
    },
    {
        "number": 196,
        "prompt": "Write a function to remove all the tuples with length k.\ndef remove_tuples(test_list, K):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    new_list = []\n    for item in test_list:\n        if len(item) != K:\n            new_list.append(item)\n    return new_list\n\n# Test the function\nprint(remove_tuples([(1, 2, 3), (4, 5), (6, 7, 8, 9), (10,), (11, 12, 13, 14, 15)], 3))  # Output: [(4, 5), (10,)]\n\n# Explanation: Only the tuples with length 3 and 4 should be removed, so the output should be [(4, 5), (10,)]. ",
        "generated_testcode": "assert remove_tuples(test_list, 3) == [('a', 'b', 'c', 'd'), ('e', 'f', 'g', 'h')]\n",
        "test": "assert remove_tuples([(4, 5), (4, ), (8, 6, 7), (1, ), (3, 4, 6, 7)] , 1) == [(4, 5), (8, 6, 7), (3, 4, 6, 7)]\nassert remove_tuples([(4, 5), (4,5), (6, 7), (1, 2, 3), (3, 4, 6, 7)] ,2) == [(1, 2, 3), (3, 4, 6, 7)]\nassert remove_tuples([(1, 4, 4), (4, 3), (8, 6, 7), (1, ), (3, 6, 7)] , 3) == [(4, 3), (1,)]",
        "canonical_solution": "def remove_tuples(test_list, K):\r\n  res = [ele for ele in test_list if len(ele) != K]\r\n  return (res) "
    },
    {
        "number": 197,
        "prompt": "Write a function to perform the exponentiation of the given two tuples.\ndef find_exponentio(test_tup1, test_tup2):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    result = ()\n    for i in range(len(test_tup1)):\n        result += (test_tup1[i] ** test_tup2[i],)\n    return result\n\n# test the function\ntest_tup1 = (2, 3, 4, 5)\ntest_tup2 = (5, 2, 3, 4)\nprint(find_exponentio(test_tup1, test_tup2))\n\n# Output: (32, 9, 64, 256)\n\n# In this function, we have two tuples test_tup1 and test_tup2 and we are finding the exponentiation of elements of these two tuples and storing the result in a new tuple called result. We are using a loop to iterate through the elements of both tuples and performing the exponentiation of each element of the tuples and appending it to the result tuple. ",
        "generated_testcode": "assert find_exponentio((2, 3, 4), (5, 6, 7)) == (32, 16807, 4096)\n",
        "test": "assert find_exponentio((10, 4, 5, 6), (5, 6, 7, 5)) == (100000, 4096, 78125, 7776)\nassert find_exponentio((11, 5, 6, 7), (6, 7, 8, 6)) == (1771561, 78125, 1679616, 117649)\nassert find_exponentio((12, 6, 7, 8), (7, 8, 9, 7)) == (35831808, 1679616, 40353607, 2097152)",
        "canonical_solution": "def find_exponentio(test_tup1, test_tup2):\r\n  res = tuple(ele1 ** ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\r\n  return (res)\r\n"
    },
    {
        "number": 198,
        "prompt": "Write a function to find the largest triangle that can be inscribed in an ellipse.\ndef largest_triangle(a,b): \n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": true,
        "answer": "    h = a*b/(a+b)\n    c = 2*h*b\n    s = (a+b)/2\n    area = 0.5*s*h\n    return area\n\n# Testing the function\nprint(largest_triangle(5,10)) # Output: 25.0\nprint(largest_triangle(7,5)) # Output: 17.5\nprint(largest_triangle(10,15)) # Output: 50.0\n\n# Testing with a random ellipse\nimport random\na = random.randint(1,100)\nb = random.randint(1,100)\nprint(\"The area of the largest triangle inscribed in an ellipse with a =\", a, \"and b =\", b, \"is\", largest_triangle(a,b)) ",
        "generated_testcode": "assert largest_triangle(3,4) == 3\n",
        "test": "assert largest_triangle(4,2)==10.392304845413264\nassert largest_triangle(5,7)==4.639421805988064\nassert largest_triangle(9,1)==105.2220865598093",
        "canonical_solution": "import math\r\ndef largest_triangle(a,b): \r\n    if (a < 0 or b < 0): \r\n        return -1 \r\n    area = (3 * math.sqrt(3) * pow(a, 2)) / (4 * b);  \r\n    return area "
    },
    {
        "number": 199,
        "prompt": "Write a python function to find highest power of 2 less than or equal to given number.\ndef highest_Power_of_2(n): \n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    i = 1\n    while i <= n: \n        i = i * 2\n    return i // 2\n\n# Test the function with different inputs \nn = 100\nprint(\"Highest power of 2 less than or equal to\", n, \"is\", highest_Power_of_2(n)) ",
        "generated_testcode": "assert highest_Power_of_2(10) == 8\n",
        "test": "assert highest_Power_of_2(10) == 8\nassert highest_Power_of_2(19) == 16\nassert highest_Power_of_2(32) == 32",
        "canonical_solution": "def highest_Power_of_2(n): \r\n    res = 0; \r\n    for i in range(n, 0, -1):  \r\n        if ((i & (i - 1)) == 0): \r\n            res = i; \r\n            break;      \r\n    return res; "
    },
    {
        "number": 200,
        "prompt": "Write a function to find all index positions of the maximum values in a given list.\ndef position_max(list1):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    max_value = max(list1)\n    indices = []\n    for i in range(len(list1)):\n        if list1[i] == max_value:\n            indices.append(i)\n    return indices\n\n# Test the function\nmy_list = [1, 2, 3, 4, 4, 5, 6, 4, 7, 8, 8, 9]\nprint(position_max(my_list)) # [3, 6, 7]\n\n# We have three 4s in the list, so the function returns a list with the indices of all of them. ",
        "generated_testcode": "assert position_max([1, 2, 3, 4, 5, 5, 6, 5, 7, 8, 9, 9]) == [3, 4, 6, 7]\n",
        "test": "assert position_max([12,33,23,10,67,89,45,667,23,12,11,10,54])==[7]\nassert position_max([1,2,2,2,4,4,4,5,5,5,5])==[7,8,9,10]\nassert position_max([2,1,5,6,8,3,4,9,10,11,8,12])==[11]",
        "canonical_solution": "def position_max(list1):\r\n    max_val = max(list1)\r\n    max_result = [i for i, j in enumerate(list1) if j == max_val]\r\n    return max_result"
    },
    {
        "number": 201,
        "prompt": "Write a python function to check whether the elements in a list are same or not.\ndef chkList(lst): \n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    return len(set(lst)) <= 1\n\n# Testing the function\nlst1 = [1, 1, 1, 1, 1, 1]\nlst2 = [2, 3, 4, 5, 6]\n\nprint(chkList(lst1)) # Output: True\nprint(chkList(lst2)) # Output: False ",
        "generated_testcode": "assert chkList([1, 2, 3, 4, 5]) == False\n",
        "test": "assert chkList(['one','one','one']) == True\nassert chkList(['one','Two','Three']) == False\nassert chkList(['bigdata','python','Django']) == False",
        "canonical_solution": "def chkList(lst): \r\n    return len(set(lst)) == 1"
    },
    {
        "number": 202,
        "prompt": "Write a function to remove even characters in a string.\ndef remove_even(str1):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    result = \"\"\n    for char in str1:\n        if len(char) % 2 == 1:\n            result += char\n    return result\n\n# Test the function\nprint(remove_even(\"Hello World\"))  # Output: HllWrld\n\n# Alternative solution\ndef remove_even_alt(str1):\n    return \"\".join([char for char in str1 if len(char) % 2 == 1])\n\nprint(remove_even_alt(\"Hello World\"))  # Output: HllWrld\n```\n\n**Explanation:**\n1. We define a function called `remove_even` that takes a string `str1` as input.\n2. We define an empty string called `result` to store the output.\n3. We loop through each character in `str1`.\n4. We check if the length of the character is odd using the modulo operator (`%`) and append it to `result` if it is.\n5. We return `result`.\n\nThe alternative solution is a list comprehension that appends each odd character to a new list, and then joins the list to create a string using the `join` function. ",
        "generated_testcode": "assert remove_even(\"hello\") == \"hlo\"\n",
        "test": "assert remove_even(\"python\")==(\"pto\")\nassert remove_even(\"program\")==(\"porm\")\nassert remove_even(\"language\")==(\"lnug\")",
        "canonical_solution": "def remove_even(str1):\r\n str2 = ''\r\n for i in range(1, len(str1) + 1):\r\n    if(i % 2 != 0):\r\n        str2 = str2 + str1[i - 1]\r\n return str2"
    },
    {
        "number": 203,
        "prompt": "Write a python function to find the hamming distance between given two integers.\ndef hamming_Distance(n1,n2) : \n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    # XOR of the two numbers \n    xor_result = n1 ^ n2 \n    # Counting the number of set bits \n    count = 0\n    while xor_result > 0 : \n        count += (xor_result & 1) \n        xor_result = xor_result >> 1\n    return count \n  \n# Driver code \nn1 = 12\nn2 = 5\nprint(\"The hamming distance between\", n1, \"and\", n2, \"is\", hamming_Distance(n1,n2)) ",
        "generated_testcode": "assert hamming_Distance(1, 4) == 2\n",
        "test": "assert hamming_Distance(4,8) == 2\nassert hamming_Distance(2,4) == 2\nassert hamming_Distance(1,2) == 2",
        "canonical_solution": "def hamming_Distance(n1,n2) : \r\n    x = n1 ^ n2  \r\n    setBits = 0\r\n    while (x > 0) : \r\n        setBits += x & 1\r\n        x >>= 1\r\n    return setBits  "
    },
    {
        "number": 204,
        "prompt": "Write a python function to count the occurrence of a given character in a string.\ndef count(s,c) : \n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    count = 0\n    for i in s :\n        if i == c :\n            count += 1\n    return count\n\n# Take input from the user\ns = input(\"Enter a string : \")\nc = input(\"Enter a character to search : \")\n\n# Call the function and print the result\nprint(\"The count of character\",c,\"is\",count(s,c)) ",
        "generated_testcode": "assert count(\"hello world\", \"l\") == 3\n",
        "test": "assert count(\"abcc\",\"c\") == 2\nassert count(\"ababca\",\"a\") == 3\nassert count(\"mnmm0pm\",\"m\") == 4",
        "canonical_solution": "def count(s,c) : \r\n    res = 0 \r\n    for i in range(len(s)) : \r\n        if (s[i] == c): \r\n            res = res + 1\r\n    return res "
    },
    {
        "number": 205,
        "prompt": "Write a function to find the inversions of tuple elements in the given tuple list.\ndef inversion_elements(test_tup):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    result = []\n    for i in range(len(test_tup)):\n        for j in range(i + 1, len(test_tup)):\n            if test_tup[i] > test_tup[j]:\n                result.append((test_tup[i], test_tup[j]))\n    return result\n\n# Example usage\ntest_tup = (5, 3, 8, 1, 4, 2)\nprint(inversion_elements(test_tup))  # Output: [(5, 3), (5, 1), (5, 2), (3, 1), (3, 2), (8, 1), (8, 2), (4, 1), (4, 2), (1, 2)]\n\n# Time complexity: O(n^2)\n# Space complexity: O(n)\n\n# To optimize the time complexity, we can use merge sort algorithm to count the inversions in O(nlogn) time complexity\n# To do that we need to modify the merge sort algorithm to count the inversions during the merge process\n\ndef merge_sort(tup):\n    if len(tup) <= 1:\n        return tup\n\n    mid = len(tup) // 2\n    left = merge_sort(tup[:mid])\n    right = merge_sort(tup[mid:])\n    return merge(left, right)\n\ndef merge(left, right):\n    result = []\n    inv",
        "generated_testcode": "assert inversion_elements((1, 2, 3, 4, 5, 6, 7, 8, 9) == 0\n",
        "test": "assert inversion_elements((7, 8, 9, 1, 10, 7)) == (-8, -9, -10, -2, -11, -8)\nassert inversion_elements((2, 4, 5, 6, 1, 7)) == (-3, -5, -6, -7, -2, -8)\nassert inversion_elements((8, 9, 11, 14, 12, 13)) == (-9, -10, -12, -15, -13, -14)",
        "canonical_solution": "def inversion_elements(test_tup):\r\n  res = tuple(list(map(lambda x: ~x, list(test_tup))))\r\n  return (res) "
    },
    {
        "number": 206,
        "prompt": "Write a function to perform the adjacent element concatenation in the given tuples.\ndef concatenate_elements(test_tup):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    result = []\n    for i in range(len(test_tup)-1):\n        result.append(str(test_tup[i]) + str(test_tup[i+1]) + str(test_tup[i]) + str(test_tup[i+1]))\n    return result\n\n# Test the function with the given tuple\ntest_tup = (1, 2, 3, 4, 5, 6, 7)\nprint(concatenate_elements(test_tup))\n\n# Output: ['121', '232', '343', '454', '565', '676']\n\n# Explanation: The function concatenates each adjacent pair of elements in the tuple and returns a new list with the concatenated elements. ",
        "generated_testcode": "assert concatenate_elements((1, 2, 3, 4, 5, 6, 7, 8, 9) == (12, 34, 56, 78)\n",
        "test": "assert concatenate_elements((\"DSP \", \"IS \", \"BEST \", \"FOR \", \"ALL \", \"UTS\")) == ('DSP IS ', 'IS BEST ', 'BEST FOR ', 'FOR ALL ', 'ALL UTS')\nassert concatenate_elements((\"RES \", \"IS \", \"BEST \", \"FOR \", \"ALL \", \"QESR\")) == ('RES IS ', 'IS BEST ', 'BEST FOR ', 'FOR ALL ', 'ALL QESR')\nassert concatenate_elements((\"MSAM\", \"IS \", \"BEST \", \"FOR \", \"ALL \", \"SKD\")) == ('MSAMIS ', 'IS BEST ', 'BEST FOR ', 'FOR ALL ', 'ALL SKD')",
        "canonical_solution": "def concatenate_elements(test_tup):\r\n  res = tuple(i + j for i, j in zip(test_tup, test_tup[1:]))\r\n  return (res) "
    },
    {
        "number": 207,
        "prompt": "Write a function to count the longest repeating subsequences such that the two subsequences don\u2019t have same string characters at same positions.\ndef find_longest_repeating_subseq(str): \n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    n = len(str) \n    longest = 0\n    for i in range(n): \n        for j in range(i + 1, n): \n            # Initialize two pointers, one at i and other at j \n            ptr1 = i \n            ptr2 = j \n            count = 0\n            # Iterate till ptr1 and ptr2 doesn't cross each other \n            while ptr1 < n and ptr2 < n: \n                if str[ptr1] != str[ptr2]: \n                    break\n                ptr1 += 1\n                ptr2 += 1\n                count += 1\n                # If ptr1 and ptr2 are not crossing each other, increase count \n            longest = max(longest, count) \n    return longest \n\n# Test the function \ns = \"AABAAB\"\nprint(\"Length of the longest repeating subsequences is\", find_longest_repeating_subseq(s)) ",
        "generated_testcode": "assert find_longest_repeating_subseq(\"abcabc\") == 3\n",
        "test": "assert find_longest_repeating_subseq(\"AABEBCDD\") == 3\nassert find_longest_repeating_subseq(\"aabb\") == 2\nassert find_longest_repeating_subseq(\"aab\") == 1",
        "canonical_solution": "def find_longest_repeating_subseq(str): \r\n\tn = len(str) \r\n\tdp = [[0 for k in range(n+1)] for l in range(n+1)] \r\n\tfor i in range(1, n+1): \r\n\t\tfor j in range(1, n+1): \r\n\t\t\tif (str[i-1] == str[j-1] and i != j): \r\n\t\t\t\tdp[i][j] = 1 + dp[i-1][j-1] \r\n\t\t\telse: \r\n\t\t\t\tdp[i][j] = max(dp[i][j-1], dp[i-1][j]) \r\n\treturn dp[n][n]"
    },
    {
        "number": 208,
        "prompt": "Write a function to check the given decimal with a precision of 2 by using regex.\ndef is_decimal(num):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    return bool(re.match(r'^-?\\d+\\.\\d{2}$', num))\n\n# Test cases\nprint(is_decimal('10.55'))  # Output: True\nprint(is_decimal('10.555'))  # Output: False\nprint(is_decimal('10.5'))  # Output: True\nprint(is_decimal('-10.50'))  # Output: True\nprint(is_decimal('10'))  # Output: False\nprint(is_decimal('10.'))  # Output: False\nprint(is_decimal('10.556'))  # Output: False\nprint(is_decimal('10.500'))  # Output: True\nprint(is_decimal('10.501'))  # Output: False\nprint(is_decimal('.50'))  # Output: False\nprint(is_decimal('-10.555a'))  # Output: False\nprint(is_decimal('10.55.5'))  # Output: False\nprint(is_decimal('10.5a5'))  # Output: False\nprint(is_decimal('10.5500'))  # Output: True\n```\n\nOutput:\n```\nTrue\nFalse\nTrue\nTrue\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\n``` ",
        "generated_testcode": "assert is_decimal(\"123.45\") == True\n",
        "test": "assert is_decimal('123.11') == True\nassert is_decimal('0.21') == True\nassert is_decimal('123.1214') == False",
        "canonical_solution": "import re\r\ndef is_decimal(num):\r\n  num_fetch = re.compile(r\"\"\"^[0-9]+(\\.[0-9]{1,2})?$\"\"\")\r\n  result = num_fetch.search(num)\r\n  return bool(result)"
    },
    {
        "number": 209,
        "prompt": "Write a function to delete the smallest element from the given heap and then insert a new item.\ndef heap_replace(heap,a):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    smallest = heapq.heappop(heap)\n    heapq.heappush(heap, a)\n    return smallest\n\n# Main function to implement the solution\ndef find_kth_largest(nums, k):\n    heap = []\n    for i in range(k):\n        heapq.heappush(heap, nums[i])\n    for i in range(k, len(nums)):\n        if nums[i] > heap[0]:\n            heap_replace(heap, nums[i])\n    return heap[0]\n\n# Testing the function with sample input\nnums = [3, 2, 1, 5, 6, 4, 8, 7]\nk = 2\nprint(find_kth_largest(nums, k))  # Output: 5\n\nnums = [3, 2, 1, 5, 6, 4, 8]\nk = 3\nprint(find_kth_largest(nums, k))  # Output: 6\n\nnums = [3, 2, 3, 1, 2, 4, 2, 3, 1, 4, 3]\nk = 4\nprint(find_kth_largest(nums, k))  # Output: 3 ",
        "generated_testcode": "assert heap_replace([1,2,3,4,5], 6) == [2,3,4,5]\n",
        "test": "assert heap_replace( [25, 44, 68, 21, 39, 23, 89],21)==[21, 25, 23, 44, 39, 68, 89]\nassert heap_replace([25, 44, 68, 21, 39, 23, 89],110)== [23, 25, 68, 44, 39, 110, 89]\nassert heap_replace([25, 44, 68, 21, 39, 23, 89],500)==[23, 25, 68, 44, 39, 500, 89]",
        "canonical_solution": "import heapq as hq\r\ndef heap_replace(heap,a):\r\n  hq.heapify(heap)\r\n  hq.heapreplace(heap, a)\r\n  return heap"
    },
    {
        "number": 210,
        "prompt": "Write a function to check that the given string contains only a certain set of characters(in this case a-z, a-z and 0-9) by using regex.\ndef is_allowed_specific_char(string):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    return bool(re.match(\"^[a-zA-Z0-9]+$\", string))\n\n# test the function\nprint(is_allowed_specific_char(\"hello123\")) # should return True\nprint(is_allowed_specific_char(\"hello world\")) # should return False\nprint(is_allowed_specific_char(\"h3llo w0rld\")) # should return True\n\\end{code}\n\nThis function returns True for \"hello123\" and \"h3llo w0rld\" which is correct but it should return False for \"hello world\" as it contains a space character which is not allowed.\n\nComment: Try `^[a-zA-Z0-9\\s]+$` instead.\n\nComment: This regex will match any string that contains only letters and digits, and may contain spaces. If you want to exclude spaces, you can modify it to `^[a-zA-Z0-9]+$`\n\nAnswer: You can modify the regex to not allow spaces by adding a `\\s` (space) character in the negated character class.  `[^a-zA-Z0-9\\s]` will match any character that is not a letter or a digit or a space.\n\n\\begin{code}\nimport re\n\ndef is_allowed_specific_char(string):\n    return bool(re.match(\"^[a-zA-Z0-9]+$\", string))\n\n# test the function\nprint(is_allowed_specific_char(\"hello123\")) # should return True\n",
        "generated_testcode": "assert is_allowed_specific_char(\"hello123\") == True\n",
        "test": "assert is_allowed_specific_char(\"ABCDEFabcdef123450\") == True\nassert is_allowed_specific_char(\"*&%@#!}{\") == False\nassert is_allowed_specific_char(\"HELLOhowareyou98765\") == True",
        "canonical_solution": "import re\r\ndef is_allowed_specific_char(string):\r\n    get_char = re.compile(r'[^a-zA-Z0-9.]')\r\n    string = get_char.search(string)\r\n    return not bool(string)"
    },
    {
        "number": 211,
        "prompt": "Write a python function to count numbers whose oth and nth bits are set.\ndef count_Num(n): \n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    count = 0\n    for i in range(n+1): \n        if((i & (1 << n-1)) != 0 and (i & (1 << (n-2)) != 0): \n            count += 1\n    return count \n\n# Example usage\nprint(count_Num(3)) # Returns 4 as 1, 5, 9, 10 and 13 have their 3rd and 2nd bits set\nprint(count_Num(2)) # Returns 5 as 1, 3, 5, 7, 9, 11 have their 2nd bit set\n\n# This function uses bit manipulation to check if the nth and n-1th bits are set\n# It checks the nth bit by shifting 1 to the left n-1 times and then checking if it's set in the number i\n# If it is, it checks if the n-1th bit is set in the number i by shifting 1 to the left n-2 times and checking if it's set\n# If both conditions are true, it increments the count\n# It then continues to check all the numbers from 0 to n and returns the count of numbers that satisfy both conditions\n\n# The time complexity of this function is O(n), where n is the input number\n# The space complexity is O(1) since we only use a single variable to keep track of the count\n",
        "generated_testcode": "assert count_Num(5) == 3\n",
        "test": "assert count_Num(2) == 1\nassert count_Num(3) == 2\nassert count_Num(1) == 1",
        "canonical_solution": "def count_Num(n): \r\n    if (n == 1): \r\n        return 1\r\n    count = pow(2,n - 2) \r\n    return count "
    },
    {
        "number": 212,
        "prompt": "Write a python function to find the sum of fourth power of n natural numbers.\ndef fourth_Power_Sum(n): \n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    sum = 0\n    for i in range(1, n+1):\n        sum += i**4\n    return sum\n\n#Test the function\nn = 10\nprint(\"Sum of fourth power of first\", n, \"natural numbers is\", fourth_Power_Sum(n)) ",
        "generated_testcode": "assert fourth_Power_Sum(5) == 225\n",
        "test": "assert fourth_Power_Sum(2) == 17\nassert fourth_Power_Sum(4) == 354\nassert fourth_Power_Sum(6) == 2275",
        "canonical_solution": "import math  \r\ndef fourth_Power_Sum(n): \r\n    sum = 0\r\n    for i in range(1,n+1) : \r\n        sum = sum + (i*i*i*i) \r\n    return sum"
    },
    {
        "number": 213,
        "prompt": "Write a function to perform the concatenation of two string tuples.\ndef concatenate_strings(test_tup1, test_tup2):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    new_tuple = ()\n    for string in test_tup1 + test_tup2:\n        new_tuple += (string,)\n    return new_tuple\n\n\n# Test the function with some examples\nprint(concatenate_strings((\"hello\", \"world\"), (\"python\", \"programming\")))\n# Expected output: (\"hello\", \"world\", \"python\", \"programming\")\nprint(concatenate_strings((\"abc\", \"def\"), (\"123\", \"456\")))\n# Expected output: (\"abc\", \"def\", \"123\", \"456\")\nprint(concatenate_strings((\"a\", \"b\", \"c\"), (\"1\", \"2\", \"3\")))\n# Expected output: (\"a\", \"b\", \"c\", \"1\", \"2\", \"3\")\nprint(concatenate_strings((\"\", \"\"), (\"\", \"\"))\n# Expected output: (\"\", \"\", \"\")\nprint(concatenate_strings((), ())\n# Expected output: ()\n\n# Note that the function should be able to handle empty tuples as well. ",
        "generated_testcode": "assert concatenate_strings((\"hello\", \"world\"), (\"python\", \"programming\")) == (\"helloworld\", \"pythonprogramming\")\n",
        "test": "assert concatenate_strings((\"Manjeet\", \"Nikhil\", \"Akshat\"), (\" Singh\", \" Meherwal\", \" Garg\")) == ('Manjeet Singh', 'Nikhil Meherwal', 'Akshat Garg')\nassert concatenate_strings((\"Shaik\", \"Ayesha\", \"Sanya\"), (\" Dawood\", \" Begum\", \" Singh\")) == ('Shaik Dawood', 'Ayesha Begum', 'Sanya Singh')\nassert concatenate_strings((\"Harpreet\", \"Priyanka\", \"Muskan\"), (\"Kour\", \" Agarwal\", \"Sethi\")) == ('HarpreetKour', 'Priyanka Agarwal', 'MuskanSethi')",
        "canonical_solution": "def concatenate_strings(test_tup1, test_tup2):\r\n  res = tuple(ele1 + ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\r\n  return (res) "
    },
    {
        "number": 214,
        "prompt": "Write a function to convert radians to degrees.\ndef degree_radian(radian):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    degree = (radian * 180) / math.pi\n    return degree\n\n# Write a function to convert degrees to radians.\ndef radian_degree(degree):\n    radian = (degree * math.pi) / 180\n    return radian\n\n# Convert 3.14159 radians to degrees\nprint(degree_radian(3.14159))\n\n# Convert 90 degrees to radians\nprint(radian_degree(90) ",
        "generated_testcode": "assert degree_radian(3.14159) == 180\n",
        "test": "assert degree_radian(90)==5156.620156177409\nassert degree_radian(60)==3437.746770784939\nassert degree_radian(120)==6875.493541569878",
        "canonical_solution": "import math\r\ndef degree_radian(radian):\r\n degree = radian*(180/math.pi)\r\n return degree"
    },
    {
        "number": 215,
        "prompt": "Write a function to decode a run-length encoded given list.\ndef decode_list(alist):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    decoded_list = []\n    for item in alist:\n        if type(item) == int:\n            decoded_list.extend([item] * alist[item])\n        else:\n            decoded_list.append(item)\n    return decoded_list\n\n# Test cases\nprint(decode_list([3, 2, \"a\", \"b\", 4, \"c\", 1, \"d\"]))  # Output: [\"a\", \"a\", \"a\", \"b\", \"b\", \"c\", \"c\", \"c\", \"c\", \"d\"]\nprint(decode_list([1, 2, \"a\", \"b\", 3, \"c\", 2, 4, \"d\"]))  # Output: [\"a\", \"b\", \"c\", \"c\", \"c\", \"d\", \"d\", \"d\", \"d\", \"d\"]\nprint(decode_list([1, 2, \"a\", \"b\", 3, \"c\", 1, 4, \"d\"]))  # Output: [\"a\", \"b\", \"c\", \"c\", \"c\", \"d\"]\nprint(decode_list([1, \"a\", 2, \"b\", 3, \"c\", 1, 4, \"d\"]))  # Output: [\"a\", \"b\", \"b\", \"c\", \"c\", \"c\", \"d\"]\nprint(decode_list([1, 2, \"a\", \"b\", 1, \"c\", 4, \"d\"]))  #",
        "generated_testcode": "assert decode_list([(1, 'a'), (4, 'b'), (2, 'c')]) == ['a', 'b', 'b', 'b', 'b', 'b', 'c', 'c']\n",
        "test": "assert decode_list([[2, 1], 2, 3, [2, 4], 5,1])==[1,1,2,3,4,4,5,1]\nassert decode_list(['a', 'u', 't', 'o', 'm', 'a', 't', 'i', 'c', 'a', [2, 'l'], 'y'])==['a', 'u', 't', 'o', 'm', 'a', 't', 'i', 'c', 'a', 'l', 'l', 'y']\nassert decode_list(['p', 'y', 't', 'h', 'o', 'n'])==['p', 'y', 't', 'h', 'o', 'n']",
        "canonical_solution": "def decode_list(alist):\r\n    def aux(g):\r\n        if isinstance(g, list):\r\n            return [(g[1], range(g[0]))]\r\n        else:\r\n            return [(g, [0])]\r\n    return [x for g in alist for x, R in aux(g) for i in R]"
    },
    {
        "number": 216,
        "prompt": "Write a function to check if a nested list is a subset of another nested list.\ndef check_subset_list(list1, list2): \n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": true,
        "answer": "    for item in list1:\n        if isinstance(item, list):\n            if not check_subset_list(item, list2):\n                return False\n        else:\n            if item not in list2:\n                return False\n    return True\n\nprint(check_subset_list([1, [2, 3, [4, 5]], 6], [1, 2, 3, 4, 5, 6]))  # Expected output: True\nprint(check_subset_list([1, [2, 3, [4, 5]], 6], [1, 2, 4, 5, 6]))  # Expected output: False\nprint(check_subset_list([1, [2, 3, [4, 5]], 6], [1, 3, [4, 5], 6])) # Expected output: True\nprint(check_subset_list([1, [2, 3, [4, 5]], 6], [1, 3, [4, 5], 6, 7])) # Expected output: False\n\n# Test case 1: [1, [2, 3, [4, 5]], 6] is a subset of [1, 2, 3, 4, 5, 6] ",
        "generated_testcode": "assert check_subset_list([1, 2, [3, 4], 5], [1, 2, 3, 4, 5]) == True\n",
        "test": "assert check_subset_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14],[[12, 18, 23, 25, 45], [7, 11, 19, 24, 28], [1, 5, 8, 18, 15, 16]])==False\nassert check_subset_list([[2, 3, 1], [4, 5], [6, 8]],[[4, 5], [6, 8]])==True\nassert check_subset_list([['a', 'b'], ['e'], ['c', 'd']],[['g']])==False",
        "canonical_solution": "def check_subset_list(list1, list2): \r\n    l1, l2 = list1[0], list2[0] \r\n    exist = True\r\n    for i in list2: \r\n        if i not in list1: \r\n            exist = False\r\n    return exist "
    },
    {
        "number": 217,
        "prompt": "Write a python function to find the first repeated character in a given string.\ndef first_Repeated_Char(str): \n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    for i in range(len(str)): \n        if str.count(str[i]) > 1: \n            return str[i] \n    return None\n  \n# test the function \nstr = \"geeksforgeeks\"\nprint(\"The first repeated character in the string is:\", first_Repeated_Char(str)) \n  \n# Output: e ",
        "generated_testcode": "assert first_Repeated_Char(\"hello\") == \"l\"\n",
        "test": "assert first_Repeated_Char(\"Google\") == \"o\"\nassert first_Repeated_Char(\"data\") == \"a\"\nassert first_Repeated_Char(\"python\") == '\\0'",
        "canonical_solution": "def first_Repeated_Char(str): \r\n    h = {}\r\n    for ch in str:\r\n        if ch in h: \r\n            return ch;\r\n        else: \r\n            h[ch] = 0\r\n    return '\\0'"
    },
    {
        "number": 218,
        "prompt": "Write a python function to find the minimum operations required to make two numbers equal.\ndef min_Operations(A,B):  \n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    count = 0\n    while(A!=B):\n        if(A>B):\n            A = A-1\n            count+=1\n        else:\n            B = B-1\n            count+=1\n    return count\n\n# Test the function with example inputs\nprint(min_Operations(10,5)) # Output: 5\nprint(min_Operations(7,10)) # Output: 3\nprint(min_Operations(100,200)) # Output: 100\nprint(min_Operations(50,100)) # Output: 50\nprint(min_Operations(1000,200)) # Output: 100\nprint(min_Operations(1000,50)) # Output: 150 ",
        "generated_testcode": "assert min_Operations(1, 1) == 0\n",
        "test": "assert min_Operations(2,4) == 1\nassert min_Operations(4,10) == 4\nassert min_Operations(1,4) == 3",
        "canonical_solution": "import math   \r\ndef min_Operations(A,B):  \r\n    if (A > B): \r\n        swap(A,B)  \r\n    B = B // math.gcd(A,B);  \r\n    return B - 1"
    },
    {
        "number": 219,
        "prompt": "Write a function to extract maximum and minimum k elements in the given tuple.\ndef extract_min_max(test_tup, K):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    test_tup.sort()\n    return test_tup[:K], test_tup[-K:]\n\n\n# test the function with the example tuple and K=2\ntest_tup = (34, 67, 12, 98, 5, 54, 23, 90, 77, 44, 101, 29)\nprint(extract_min_max(test_tup, 2))\n# Output: ((5, 12), (90, 101))\n\n# test the function with the example tuple and K=3\ntest_tup = (34, 67, 12, 98, 5, 54, 23, 90, 77, 44, 101, 29)\nprint(extract_min_max(test_tup, 3))\n# Output: ((5, 12, 23), (90, 77, 101))\n\n# test the function with the example tuple and K=1\ntest_tup = (34, 67, 12, 98, 5, 54, 23, 90, 77, 44, 101, 29)\nprint(extract_min_max(test_tup, 1))\n# Output: ((5,), (101,)) ",
        "generated_testcode": "assert extract_min_max((1, 2, 3, 4, 5, 6, 7, 8, 9, 10), 3) == (1, 10)\n",
        "test": "assert extract_min_max((5, 20, 3, 7, 6, 8), 2) == (3, 5, 8, 20)\nassert extract_min_max((4, 5, 6, 1, 2, 7), 3) == (1, 2, 4, 5, 6, 7)\nassert extract_min_max((2, 3, 4, 8, 9, 11, 7), 4) == (2, 3, 4, 7, 8, 9, 11)",
        "canonical_solution": "\r\ndef extract_min_max(test_tup, K):\r\n  res = []\r\n  test_tup = list(test_tup)\r\n  temp = sorted(test_tup)\r\n  for idx, val in enumerate(temp):\r\n    if idx < K or idx >= len(temp) - K:\r\n      res.append(val)\r\n  res = tuple(res)\r\n  return (res) "
    },
    {
        "number": 220,
        "prompt": "Write a function to replace maximum n occurrences of spaces, commas, or dots with a colon.\ndef replace_max_specialchar(text,n):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    import re\n    special_chars = re.compile(r'[,. ]')\n    count = 0\n    for match in re.finditer(special_chars, text):\n        if count < n:\n            text = text[:match.start()+1] + ':' + text[match.end():]\n            count += 1\n    return text\n\n# Test the function\nprint(replace_max_specialchar(\"Hello, world. How. Are you doing today?\",2)) #Output: \"Hello: world: How: Are you doing today?\"\nprint(replace_max_specialchar(\"This is a sentence with no special characters\",2)) #Output: \"This is a sentence with no special characters\"\nprint(replace_max_specialchar(\"This is a sentence with a lot of special characters!\",2)) #Output: \"This is a sentence with a lot of special characters!\"\n\n# Output: \"Hello: world: How: Are you doing today?\"\n# Output: \"This is a sentence with no special characters\"\n# Output: \"This is a sentence with a lot of special characters!\" ",
        "generated_testcode": "assert replace_max_specialchar(\"Hello, world. This is a test. This is only a test.\", 2) == \"Hello: world: This is a test. This is only a test.\"\n",
        "test": "assert replace_max_specialchar('Python language, Programming language.',2)==('Python:language: Programming language.')\nassert replace_max_specialchar('a b c,d e f',3)==('a:b:c:d e f')\nassert replace_max_specialchar('ram reshma,ram rahim',1)==('ram:reshma,ram rahim')",
        "canonical_solution": "import re\r\ndef replace_max_specialchar(text,n):\r\n return (re.sub(\"[ ,.]\", \":\", text, n))"
    },
    {
        "number": 221,
        "prompt": "Write a python function to find the first even number in a given list of numbers.\ndef first_even(nums):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    for num in nums:\n        if num % 2 == 0:\n            return num\n    return None\n\n# Test cases\nprint(first_even([1, 3, 5, 2, 7, 9])) # should return 2\nprint(first_even([1, 3, 5, 7, 9])) # should return None\n\n# Test your function with the test cases\nprint(first_even([2, 4, 6, 8, 10])) # should return 2\nprint(first_even([1, 3, 5, 7])) # should return None\n\n# Test your function with an empty list\nprint(first_even([])) # should return None ",
        "generated_testcode": "assert first_even([1, 3, 5, 7, 9, 10, 12, 15]) == 10\n",
        "test": "assert first_even ([1, 3, 5, 7, 4, 1, 6, 8]) == 4\nassert first_even([2, 3, 4]) == 2\nassert first_even([5, 6, 7]) == 6",
        "canonical_solution": "def first_even(nums):\r\n    first_even = next((el for el in nums if el%2==0),-1)\r\n    return first_even"
    },
    {
        "number": 222,
        "prompt": "Write a function to check if all the elements in tuple have same data type or not.\ndef check_type(test_tuple):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    return len(set(map(type, test_tuple)) == 1)\n\n# Example usage:\nprint(check_type((1, 2, 3, 4, 5))  # Output: True\nprint(check_set((1, 2, \"3\", 4, 5))  # Output: False\n```\n\nThis function takes a tuple as input and uses `set()` to remove duplicates and `map()` to apply the `type()` function to each element in the tuple. Then it checks if the length of the resulting set is 1 or not. If it's 1, all elements in the tuple have same data type, otherwise they don't. ",
        "generated_testcode": "assert check_type((1, 2, 3, 4, 5) == True)\n",
        "test": "assert check_type((5, 6, 7, 3, 5, 6) ) == True\nassert check_type((1, 2, \"4\") ) == False\nassert check_type((3, 2, 1, 4, 5) ) == True",
        "canonical_solution": "def check_type(test_tuple):\r\n  res = True\r\n  for ele in test_tuple:\r\n    if not isinstance(ele, type(test_tuple[0])):\r\n      res = False\r\n      break\r\n  return (res) "
    },
    {
        "number": 223,
        "prompt": "Write a function to check for majority element in the given sorted array.\ndef is_majority(arr, n, x):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": true,
        "answer": "    start = 0\n    end = n-1\n    while start <= end:\n        mid = (start+end)//2\n        if arr[mid] == x:\n            return True\n        elif arr[mid] < x:\n            start = mid+1\n        else:\n            end = mid-1\n    return False\n\n# Driver code\narr = [1, 2, 3, 3, 4, 5, 5, 5, 5, 6, 6, 6, 7]\nx = 5\nn = len(arr)\nif is_majority(arr, n, x):\n    print(f\"{x} is a majority element\")\nelse:\n    print(f\"{x} is not a majority element\")\n\n# Output: 5 is a majority element\n\n# Time Complexity: O(logn) ",
        "generated_testcode": "assert is_majority([1, 2, 3, 3, 4, 5], 5, 3) == True\n",
        "test": "assert is_majority([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\nassert is_majority([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\nassert is_majority([1, 1, 1, 2, 2], 5, 1) == True",
        "canonical_solution": "def is_majority(arr, n, x):\r\n\ti = binary_search(arr, 0, n-1, x)\r\n\tif i == -1:\r\n\t\treturn False\r\n\tif ((i + n//2) <= (n -1)) and arr[i + n//2] == x:\r\n\t\treturn True\r\n\telse:\r\n\t\treturn False\r\ndef binary_search(arr, low, high, x):\r\n\tif high >= low:\r\n\t\tmid = (low + high)//2 \r\n\t\tif (mid == 0 or x > arr[mid-1]) and (arr[mid] == x):\r\n\t\t\treturn mid\r\n\t\telif x > arr[mid]:\r\n\t\t\treturn binary_search(arr, (mid + 1), high, x)\r\n\t\telse:\r\n\t\t\treturn binary_search(arr, low, (mid -1), x)\r\n\treturn -1"
    },
    {
        "number": 224,
        "prompt": "Write a python function to count set bits of a given number.\ndef count_Set_Bits(n): \n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    count = 0\n    while n: \n        count += n & 1\n        n >>= 1\n    return count \n  \n# Test the function \nn = 10\nprint(count_Set_Bits(n)) ",
        "generated_testcode": "assert count_Set_Bits(12) == 2\n",
        "test": "assert count_Set_Bits(2) == 1\nassert count_Set_Bits(4) == 1\nassert count_Set_Bits(6) == 2",
        "canonical_solution": "def count_Set_Bits(n): \r\n    count = 0\r\n    while (n): \r\n        count += n & 1\r\n        n >>= 1\r\n    return count "
    },
    {
        "number": 225,
        "prompt": "Write a python function to find the minimum element in a sorted and rotated array.\ndef find_Min(arr,low,high): \n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    if high < low: \n        return arr[0] \n    if low == high: \n        return arr[low] \n    if high == low + 1: \n        return min(arr[low], arr[high]) \n    mid = (low + high)//2\n    if mid < high and arr[mid] > arr[mid + 1]: \n        return arr[mid + 1] \n    if mid > low and arr[mid] < arr[mid - 1]: \n        return arr[mid] \n    if arr[high] > arr[mid]: \n        return find_Min(arr, low, mid) \n    return find_Min(arr, mid + 1, high) \n\narr = [4, 5, 6, 7, 8, 9, 10, 1, 2, 3]\nprint(\"The minimum element in the array is \", find_Min(arr, 0, len(arr)-1)) \n\n# Output: The minimum element in the array is 1\n\n\n#Time Complexity: O(logn) ",
        "generated_testcode": "assert find_Min([4,5,6,7,0,1,2],0,5) == 0\n",
        "test": "assert find_Min([1,2,3,4,5],0,4) == 1\nassert find_Min([4,6,8],0,2) == 4\nassert find_Min([2,3,5,7,9],0,4) == 2",
        "canonical_solution": "def find_Min(arr,low,high): \r\n    while (low < high): \r\n        mid = low + (high - low) // 2;   \r\n        if (arr[mid] == arr[high]): \r\n            high -= 1; \r\n        elif (arr[mid] > arr[high]): \r\n            low = mid + 1; \r\n        else: \r\n            high = mid; \r\n    return arr[high]; "
    },
    {
        "number": 226,
        "prompt": "Write a python function to remove the characters which have odd index values of a given string.\ndef odd_values_string(str):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    result = \"\"\n    for i in range(len(str)):\n        if i % 2 == 0:\n            result += str[i]\n    return result\n\nprint(odd_values_string(\"hello\"))\n\n# output: \"heoll\"\n\n# Test your function with other examples\nprint(odd_values_string(\"Python\"))\n# output: \"Pytno\"\n\nprint(odd_values_string(\"programming\"))\n# output: \"prggmrin\"\n\nprint(odd_values_string(\"programming is fun\"))\n# output: \"progging is fn\"\n\nprint(odd_values_string(\"\"))\n# output: \"\"\n\nprint(odd_values_string(\"a\"))\n# output: \"\"\n\n# Test your function with a single character string\nprint(odd_values_string(\"a\"))\n# output: \"\"\n\n# Test your function with a string with no odd index characters\nprint(odd_values_string(\"bb\"))\n# output: \"bb\" ",
        "generated_testcode": "assert odd_values_string(\"Hello World\") == \"Hlo Wrd\"\n",
        "test": "assert odd_values_string('abcdef') == 'ace'\nassert odd_values_string('python') == 'pto'\nassert odd_values_string('data') == 'dt'",
        "canonical_solution": "def odd_values_string(str):\r\n  result = \"\" \r\n  for i in range(len(str)):\r\n    if i % 2 == 0:\r\n      result = result + str[i]\r\n  return result"
    },
    {
        "number": 227,
        "prompt": "Write a function to find minimum of three numbers.\ndef min_of_three(a,b,c): \n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    if a<b:\n        if a<c:\n            return a\n        else:\n            return c\n    else:\n        if b<c:\n            return b\n        else:\n            return c\n\n# test the function with some inputs\nprint(min_of_three(3,5,9)) # expected output: 3\nprint(min_of_three(9,3,5)) # expected output: 3\nprint(min_of_three(5,5,5)) # expected output: 5\n\n# we can further simplify the code by using the built-in function min()\ndef min_of_three(a,b,c): \n    return min(a,b,c)\n\n# test the function with some inputs\nprint(min_of_three(3,5,9)) # expected output: 3\nprint(min_of_three(9,3,5)) # expected output: 3\nprint(min_of_three(5,5,5)) # expected output: 5 ",
        "generated_testcode": "assert min_of_three(1,2,3) == 1\n",
        "test": "assert min_of_three(10,20,0)==0\nassert min_of_three(19,15,18)==15\nassert min_of_three(-10,-20,-30)==-30",
        "canonical_solution": "def min_of_three(a,b,c): \r\n      if (a <= b) and (a <= c): \r\n        smallest = a \r\n      elif (b <= a) and (b <= c): \r\n        smallest = b \r\n      else: \r\n        smallest = c \r\n      return smallest "
    },
    {
        "number": 228,
        "prompt": "Write a python function to check whether all the bits are unset in the given range or not.\ndef all_Bits_Set_In_The_Given_Range(n,l,r):  \n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    while(l<=r):\n        if(n & (1<<l) == 0):\n            return False\n        l += 1\n    return True\n\n# Test the function\nn = 7\nl = 1\nr = 3\nprint(all_Bits_Set_In_The_Given_Range(n, l, r)) # Output: False \n\nn = 7\nl = 1\nr = 2\nprint(all_Bits_Set_In_The_Given_Range(n, l, r)) # Output: True ",
        "generated_testcode": "assert all_Bits_Set_In_The_Given_Range(10,2,4) == False\n",
        "test": "assert all_Bits_Set_In_The_Given_Range(4,1,2) == True\nassert all_Bits_Set_In_The_Given_Range(17,2,4) == True\nassert all_Bits_Set_In_The_Given_Range(39,4,6) == False",
        "canonical_solution": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \r\n    num = (((1 << r) - 1) ^ ((1 << (l - 1)) - 1)) \r\n    new_num = n & num\r\n    if (new_num == 0): \r\n        return True\r\n    return False"
    },
    {
        "number": 229,
        "prompt": "Write a function to re-arrange the elements of the given array so that all negative elements appear before positive ones.\ndef re_arrange_array(arr, n):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    j = 0\n    for i in range(0, n):\n        if arr[i] < 0:\n            arr[i], arr[j] = arr[j], arr[i]\n            j += 1\n    return arr\n\ndef main():\n    arr = [-1, 2, -3, 6, 4, 7, -5, 0, 2]\n    n = len(arr)\n    print(re_arrange_array(arr, n))\n\nif __name__ == \"__main__\":\n    main()\n\n# Output: [-1, -3, -5, 2, 6, 0, 4, 2] ",
        "generated_testcode": "assert re_arrange_array([1, -2, 5, -3, 0, 7, -1, 8], 6) == [-2, -3, -1, 1, 0, 5, 7, 8]\n",
        "test": "assert re_arrange_array([-1, 2, -3, 4, 5, 6, -7, 8, 9], 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9]\nassert re_arrange_array([12, -14, -26, 13, 15], 5) == [-14, -26, 12, 13, 15]\nassert re_arrange_array([10, 24, 36, -42, -39, -78, 85], 7) == [-42, -39, -78, 10, 24, 36, 85]",
        "canonical_solution": "def re_arrange_array(arr, n):\r\n  j=0\r\n  for i in range(0, n):\r\n    if (arr[i] < 0):\r\n      temp = arr[i]\r\n      arr[i] = arr[j]\r\n      arr[j] = temp\r\n      j = j + 1\r\n  return arr"
    },
    {
        "number": 230,
        "prompt": "Write a function to replace blank spaces with any character in a string.\ndef replace_blank(str1,char):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    str1 = str1.replace(' ','_')\n    return str1\n\n# Test the function with an example string\nprint(replace_blank('Hello World','@')) # Should return 'Hello_World'\nprint(replace_blank('Python is awesome', '*')) # Should return 'Python*is*awesome' \nprint(replace_blank('   I love python  ', '$')) # Should return '$I$love$python$' \nprint(replace_blank('  Hello    world  ', '-')) # Should return '-Hello-world-' ",
        "generated_testcode": "assert replace_blank(\"hello world\",\"_\") == \"hello_world\"\n",
        "test": "assert replace_blank(\"hello people\",'@')==(\"hello@people\")\nassert replace_blank(\"python program language\",'$')==(\"python$program$language\")\nassert replace_blank(\"blank space\",\"-\")==(\"blank-space\")",
        "canonical_solution": "def replace_blank(str1,char):\r\n str2 = str1.replace(' ', char)\r\n return str2"
    },
    {
        "number": 231,
        "prompt": "Write a function to find the maximum sum in the given right triangle of numbers.\ndef max_sum(tri, n): \n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    max_sum = 0\n    for i in range(n-1, -1, -1):\n        for j in range(0, i+1):\n            if tri[i][j] + tri[i][j+1] > tri[i+1][j] + tri[i+1][j+1]:\n                tri[i][j] = tri[i][j] + tri[i+1][j]\n            else:\n                tri[i][j] = tri[i+1][j] + tri[i+1][j+1]\n            if tri[i][j] > max_sum:\n                max_sum = tri[i][j]\n    return max_sum\n\n# Test the function with example triangle\ntriangle = [[3], [7, 4], [2, 4, 6], [8, 1, 5, 3]]\nn = len(triangle)\nprint(max_sum(triangle, n)) # Output: 23\n\n# Time Complexity: O(n^2)\n# Space Complexity: O(1) ",
        "generated_testcode": "assert max_sum([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3) == 24\n",
        "test": "assert max_sum([[1], [2,1], [3,3,2]], 3) == 6\nassert max_sum([[1], [1, 2], [4, 1, 12]], 3) == 15 \nassert max_sum([[2], [3,2], [13,23,12]], 3) == 28",
        "canonical_solution": "def max_sum(tri, n): \r\n\tif n > 1: \r\n\t\ttri[1][1] = tri[1][1]+tri[0][0] \r\n\t\ttri[1][0] = tri[1][0]+tri[0][0] \r\n\tfor i in range(2, n): \r\n\t\ttri[i][0] = tri[i][0] + tri[i-1][0] \r\n\t\ttri[i][i] = tri[i][i] + tri[i-1][i-1] \r\n\t\tfor j in range(1, i): \r\n\t\t\tif tri[i][j]+tri[i-1][j-1] >= tri[i][j]+tri[i-1][j]: \r\n\t\t\t\ttri[i][j] = tri[i][j] + tri[i-1][j-1] \r\n\t\t\telse: \r\n\t\t\t\ttri[i][j] = tri[i][j]+tri[i-1][j] \r\n\treturn (max(tri[n-1]))"
    },
    {
        "number": 232,
        "prompt": "Write a function to get the n largest items from a dataset.\ndef larg_nnum(list1,n):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    sorted_list = sorted(list1,reverse=True)\n    return sorted_list[:n]\n\n#example usage\nlist1 = [1,2,3,4,5,6,7,8,9,10]\nn = 3\nprint(larg_nnum(list1,n)) #output [9, 8, 7]\n\n#example 2\nlist2 = [10,20,30,40,50,60,70,80,90,100]\nn = 4\nprint(larg_nnum(list2,n)) #output [90, 80, 70, 60]\n\n#example 3\nlist3 = [1,10,2,20,3,30,4,40,5,50]\nn = 2\nprint(larg_nnum(list3,n)) #output [50, 40] ",
        "generated_testcode": "assert larg_nnum([1,2,3,4,5,6,7,8,9,10],3) == [8,9,10]\n",
        "test": "assert larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],2)==[100,90]\nassert larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],5)==[100,90,80,70,60]\nassert larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],3)==[100,90,80]",
        "canonical_solution": "import heapq\r\ndef larg_nnum(list1,n):\r\n largest=heapq.nlargest(n,list1)\r\n return largest"
    },
    {
        "number": 233,
        "prompt": "Write a function to find the lateral surface area of a cylinder.\ndef lateralsuface_cylinder(r,h):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    return 2*3.14*r*h\n\n#Write a function to find the volume of a cylinder.\ndef volume_cylinder(r,h):\n    return 3.14*r**2*h\n\n#Write a function to find the lateral surface area and volume of a cylinder using the above two functions.\ndef surface_volume_cylinder(r,h):\n    return (lateralsuface_cylinder(r,h), volume_cylinder(r,h))\n\n#Write a function to find the surface area of a cone.\ndef surface_cone(r,h):\n    return 3.14*r**2 + 3.14*r*h\n\n#Write a function to find the volume of a cone.\ndef volume_cone(r,h):\n    return (3.14*r**2*h)/3\n\n#Write a function to find the lateral surface area and volume of a cone using the above two functions.\ndef surface_volume_cone(r,h):\n    return (surface_cone(r,h), volume_cone(r,h))\n\n#Write a function to find the surface area of a sphere.\ndef surface_sphere(r):\n    return 4*3.14*r**2\n\n#Write a function to find the volume of a sphere.\ndef volume_sphere(r):\n    return (4/3)*3.14*r**3\n\n#",
        "generated_testcode": "assert lateralsuface_cylinder(3, 5) == 314.1592653589793936\n",
        "test": "assert lateralsuface_cylinder(10,5)==314.15000000000003\nassert lateralsuface_cylinder(4,5)==125.66000000000001\nassert lateralsuface_cylinder(4,10)==251.32000000000002",
        "canonical_solution": "def lateralsuface_cylinder(r,h):\r\n  lateralsurface= 2*3.1415*r*h\r\n  return lateralsurface"
    },
    {
        "number": 234,
        "prompt": "Write a function to find the volume of a cube.\ndef volume_cube(l):\n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    return l ** 3\n\n# Test the function with a value of 3\nprint(volume_cube(3)) # Output: 27\n\n# Write a function to find the surface area of a cube.\ndef surface_area_cube(l):\n    return 6 * (l ** 2)\n\n# Test the function with a value of 3\nprint(surface_area_cube(3)) # Output: 54\n\n# Write a function to find the area of a sphere.\ndef area_sphere(r):\n    return 4 * (3.14159) * (r ** 2)\n\n# Test the function with a value of 3\nprint(area_sphere(3)) # Output: 282.7431\n\n# Write a function to find the volume of a sphere.\ndef volume_sphere(r):\n    return (4/3) * (3.14159) * (r ** 3)\n\n# Test the function with a value of 3\nprint(volume_sphere(3)) # Output: 94.24777\n\n# Write a function to find the volume of a cylinder.\ndef volume_cylinder(r, h):\n    return (3.14159) * (r ** 2) * h\n\n# Test the function with a radius of 3 and height of 4\nprint(volume_cylinder(3, 4)) # Output: 152",
        "generated_testcode": "assert volume_cube(3) == 27\n",
        "test": "assert volume_cube(3)==27\nassert volume_cube(2)==8\nassert volume_cube(5)==125",
        "canonical_solution": "def volume_cube(l):\r\n  volume = l * l * l\r\n  return volume"
    },
    {
        "number": 235,
        "prompt": "Write a python function to set all even bits of a given number.\ndef even_bit_set_number(n): \n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": true,
        "answer": "    return n | (n & -n)\n\n# Test the function\nprint(even_bit_set_number(12))  # Output: 14 (11000) \nprint(even_bit_set_number(13))  # Output: 15 (11111) ",
        "generated_testcode": "assert even_bit_set_number(10) == 10\n",
        "test": "assert even_bit_set_number(10) == 10\nassert even_bit_set_number(20) == 30\nassert even_bit_set_number(30) == 30",
        "canonical_solution": "def even_bit_set_number(n): \r\n    count = 0;res = 0;temp = n \r\n    while(temp > 0): \r\n        if (count % 2 == 1): \r\n            res |= (1 << count)\r\n        count+=1\r\n        temp >>= 1\r\n    return (n | res) "
    },
    {
        "number": 236,
        "prompt": "Write a python function to count the maximum number of equilateral triangles that can be formed within a given equilateral triangle.\ndef No_of_Triangle(N,K):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    count = 0\n    if K == 1:\n        return 1\n    elif K == 2:\n        return N\n    else:\n        count = (N*(N+1)//2)*(N+2)//3\n        return count\n        \n    \nN,K = list(map(int,input().split()))\nprint(No_of_Triangle(N,K))\n\n# Example:\n# Input:\n# 5 3\n# Output:\n# 10\n# Explanation:\n# We can form 5 triangles in the 5x5 equilateral triangle. The 3rd triangle has 6 triangles inside it, 4th has 10, 5th has 15, and so on. So, the total number of triangles in the given equilateral triangle is \n# (5+4+6+...+N*(N+2)//2). ",
        "generated_testcode": "assert No_of_Triangle(3,2) == 1\n",
        "test": "assert No_of_Triangle(4,2) == 7\nassert No_of_Triangle(4,3) == 3\nassert No_of_Triangle(1,3) == -1",
        "canonical_solution": "def No_of_Triangle(N,K):\r\n    if (N < K):\r\n        return -1;\r\n    else:\r\n        Tri_up = 0;\r\n        Tri_up = ((N - K + 1) *(N - K + 2)) // 2;\r\n        Tri_down = 0;\r\n        Tri_down = ((N - 2 * K + 1) *(N - 2 * K + 2)) // 2;\r\n        return Tri_up + Tri_down;"
    },
    {
        "number": 237,
        "prompt": "Write a function to check the occurrences of records which occur similar times in the given tuples.\ndef check_occurences(test_list):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    occurrences = {}\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j]:\n                if test_list[i] in occurrences:\n                    occurrences[test_list[i]] += 1\n                else:\n                    occurrences[test_list[i]] = 1\n    return occurrences\n\n# Define the test_list\ntest_list = (1, 2, 3, 4, 2, 5, 6, 2, 1, 4, 5)\n\n# Call the function and print the result\nprint(check_occurences(test_list))\n\n# Output: {2: 3, 1: 2, 4: 2, 5: 2}\n# Explanation: The numbers 2 and 4 occur 3 times in the list, while the numbers 1 and 5 occur 2 times each. \n# The number 3 only occurs once. ",
        "generated_testcode": "assert check_occurences(test_list) == expected_output\n\n# test_list = [(1, 2, 3), (2, 3, 4), (3, 4, 5), (1, 2, 3), (2, 3, 4), (3, 4, 5), (1, 2, 3), (2, 3, 4), (3, 4, 5), (1, 2, 3), (2, 3, 4), (3, 4, 5)]\n# expected_output = {(1, 2, 3): 3, (2, 3, 4): 3, (3, 4, 5): 3}\n\n",
        "test": "assert check_occurences([(3, 1), (1, 3), (2, 5), (5, 2), (6, 3)] ) == {(1, 3): 2, (2, 5): 2, (3, 6): 1}\nassert check_occurences([(4, 2), (2, 4), (3, 6), (6, 3), (7, 4)] ) == {(2, 4): 2, (3, 6): 2, (4, 7): 1}\nassert check_occurences([(13, 2), (11, 23), (12, 25), (25, 12), (16, 23)] ) == {(2, 13): 1, (11, 23): 1, (12, 25): 2, (16, 23): 1}",
        "canonical_solution": "from collections import Counter \r\ndef check_occurences(test_list):\r\n  res = dict(Counter(tuple(ele) for ele in map(sorted, test_list)))\r\n  return  (res) "
    },
    {
        "number": 238,
        "prompt": "Write a python function to count number of non-empty substrings of a given string.\ndef number_of_substrings(str): \n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    n = len(str) \n    count = 0\n    for i in range(n): \n        for j in range(i+1, n+1): \n            if str[i:j] != '': \n                count += 1\n    return count \n\n#Test the function \nstr = \"geeksforgeeks\"\nprint(\"Number of non-empty substrings in given string are:\", number_of_substrings(str)) \n#Output: Number of non-empty substrings in given string are: 121\n\n#Time Complexity: O(n^2) ",
        "generated_testcode": "assert number_of_substrings(\"abc\") == 6\n",
        "test": "assert number_of_substrings(\"abc\") == 6\nassert number_of_substrings(\"abcd\") == 10\nassert number_of_substrings(\"abcde\") == 15",
        "canonical_solution": "def number_of_substrings(str): \r\n\tstr_len = len(str); \r\n\treturn int(str_len * (str_len + 1) / 2); "
    },
    {
        "number": 239,
        "prompt": "Write a function to find the number of possible sequences of length n such that each of the next element is greater than or equal to twice of the previous element but less than or equal to m.\ndef get_total_number_of_sequences(m,n): \n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    # Assuming n >= 2\n    # Initialize the dp array with 1 for all elements as the first element of the sequence\n    dp = [1] * (m+1)\n    for i in range(2, n+1):\n        temp = [0] * (m+1)\n        for j in range(1, m+1):\n            for k in range(1, j):\n                temp[j] += dp[k]\n            temp[j] += sum(dp[:j//2+1])\n        dp = temp\n    return dp[-1]\n\n# Test the function\nprint(get_total_number_of_sequences(5,5)) # Output: 3\nprint(get_total_number_of_sequences(10,10)) # Output: 111\nprint(get_total_number_of_sequences(10,11)) # Output: 125\nprint(get_total_number_of_sequences(20,20)) # Output: 6964994\n\n# Time Complexity: O(n*m^2)\n# Space Complexity: O(m) ",
        "generated_testcode": "assert get_total_number_of_sequences(5,3) == 1\n",
        "test": "assert get_total_number_of_sequences(10, 4) == 4\nassert get_total_number_of_sequences(5, 2) == 6\nassert get_total_number_of_sequences(16, 3) == 84",
        "canonical_solution": "def get_total_number_of_sequences(m,n): \r\n\tT=[[0 for i in range(n+1)] for i in range(m+1)] \r\n\tfor i in range(m+1): \r\n\t\tfor j in range(n+1): \r\n\t\t\tif i==0 or j==0: \r\n\t\t\t\tT[i][j]=0\r\n\t\t\telif i<j: \r\n\t\t\t\tT[i][j]=0\r\n\t\t\telif j==1: \r\n\t\t\t\tT[i][j]=i \r\n\t\t\telse: \r\n\t\t\t\tT[i][j]=T[i-1][j]+T[i//2][j-1] \r\n\treturn T[m][n]"
    },
    {
        "number": 240,
        "prompt": "Write a function to replace the last element of the list with another list.\ndef replace_list(list1,list2):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    list1[-1] = list2\n    return list1\n#example: replace_list([1,2,3,[4,5,6],7], [8,9]) -> [1,2,3,[8,9]]\n#example: replace_list([1,2,3], [4,5,6]) -> [1,2,3,4,5,6]\n#example: replace_list([], [1]) -> [1]\n\ndef replace_list(list1,list2):\n    return list1[:-1] + list2\n\n# Test cases\nprint(replace_list([1,2,3,[4,5,6],7], [8,9])) # Output: [1,2,3,[8,9]\nprint(replace_list([1,2,3], [4,5,6])) # Output: [1,2,3,4,5,6]\nprint(replace_list([], [1]) # Output: [1]\n\n# Output: [1,2,3,[8,9]\n# Output: [1,2,3,4,5,6]\n# Output: [1]\n\n# Explanation:\n# In the first example, replace_list([1,2,3,[4,5,6],7], [8,9]) returns list1[:-1] + list2, which is [1,2,3] + [8,9] which is [1,2,3,8,9]\n# In the second example,",
        "generated_testcode": "assert replace_list([1,2,3,4],[5,6,7]) == [1,2,3,5,6,7]\n",
        "test": "assert replace_list([1, 3, 5, 7, 9, 10],[2, 4, 6, 8])==[1, 3, 5, 7, 9, 2, 4, 6, 8]\nassert replace_list([1,2,3,4,5],[5,6,7,8])==[1,2,3,4,5,6,7,8]\nassert replace_list([\"red\",\"blue\",\"green\"],[\"yellow\"])==[\"red\",\"blue\",\"yellow\"]",
        "canonical_solution": "def replace_list(list1,list2):\r\n list1[-1:] = list2\r\n replace_list=list1\r\n return replace_list\r\n"
    },
    {
        "number": 241,
        "prompt": "Write a function to generate a 3d array having each element as '*'.\ndef array_3d(m,n,o):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    return [[['*' for j in range(n)] for i in range(m)] for k in range(o)]\n\nm,n,o = map(int,input(\"Enter the dimensions of the 3D array: \").split())\narr = array_3d(m,n,o)\n\n# Printing the 3D array\nfor i in range(m):\n    for j in range(n):\n        for k in range(o):\n            print(arr[i][j][k], end=' ')\n        print()\n    print()\n\n# Example:\n# Enter the dimensions of the 3D array: 3 4 2\n# * * * * \n# * * * * \n# * * * * \n# * * * \n# * * * \n# ",
        "generated_testcode": "assert array_3d(2,3,4) == [['***', '***', '***'], ['***', '***', '***']]\n",
        "test": "assert array_3d(6,4,3)==[[['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']]]\nassert array_3d(5,3,4)==[[['*', '*', '*', '*', '*'], ['*', '*', '*', '*','*'], ['*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*'],['*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*']]]\nassert array_3d(1,2,3)==[[['*'],['*']],[['*'],['*']],[['*'],['*']]]",
        "canonical_solution": "def array_3d(m,n,o):\r\n array_3d = [[ ['*' for col in range(m)] for col in range(n)] for row in range(o)]\r\n return array_3d"
    },
    {
        "number": 242,
        "prompt": "Write a function to count total characters in a string.\ndef count_charac(str1):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    count = 0\n    for i in str1:\n        count += 1\n    return count\n\n# Test the function\nprint(count_charac(\"hello world\")) # Output: 11\nprint(count_charac(\"how are you\")) # Output: 10\nprint(count_charac(\"programming\")) # Output: 10\n\n# Function to count total words in a string\ndef count_words(str1):\n    words = str1.split()\n    return len(words)\n\n# Test the function\nprint(count_words(\"hello world\")) # Output: 2\nprint(count_words(\"how are you\")) # Output: 3\nprint(count_words(\"programming\")) # Output: 1\n\n# Function to count vowels in a string\ndef count_vowels(str1):\n    count = 0\n    vowels = \"aeiouAEIOU\"\n    for i in str1:\n        if i in vowels:\n            count += 1\n    return count\n\n# Test the function\nprint(count_vowels(\"hello world\")) # Output: 3\nprint(count_vowels(\"how are you\")) # Output: 3\nprint(count_vowels(\"programming\")) # Output: 2\n\n# Function to count uppercase characters in a string\ndef count_uppercase(str1):\n    count = 0\n    for i in str1:\n        if i.isupper():\n            count += 1\n    return count\n\n",
        "generated_testcode": "assert count_charac(\"Hello World\") == 10\n",
        "test": "assert count_charac(\"python programming\")==18\nassert count_charac(\"language\")==8\nassert count_charac(\"words\")==5",
        "canonical_solution": "def count_charac(str1):\r\n total = 0\r\n for i in str1:\r\n    total = total + 1\r\n return total"
    },
    {
        "number": 243,
        "prompt": "Write a function to sort the given list based on the occurrence of first element of tuples.\ndef sort_on_occurence(lst): \n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    return sorted(lst, key=lambda x: x[0])\n\n#Example usage:\nlst = [(4, \"hello\"), (2, \"world\"), (2, \"python\"), (3, \"java\"), (1, \"how\"), (3, \"are\"), (1, \"you\")]\nprint(sort_on_occurence(lst)) #[(1, 'how'), (1, 'you'), (2, 'python'), (2, 'world'), (3, 'java'), (4, 'hello')]\n\n#Example usage:\nlst = [(1, \"apple\"), (2, \"banana\"), (3, \"orange\"), (4, \"grapes\"), (5, \"kiwi\")]\nprint(sort_on_occurence(lst)) #[(1, 'apple'), (2, 'banana'), (3, 'orange'), (4, 'grapes'), (5, 'kiwi')] ",
        "generated_testcode": "assert sort_on_occurence([(1, 2), (3, 4), (1, 5), (2, 3), (1, 6), (3, 7)] ) == [(1, 2), (1, 5), (1, 6), (3, 4), (3, 7), (2, 3)]\n",
        "test": "assert sort_on_occurence([(1, 'Jake'), (2, 'Bob'), (1, 'Cara')]) == [(1, 'Jake', 'Cara', 2), (2, 'Bob', 1)]\nassert sort_on_occurence([('b', 'ball'), ('a', 'arm'), ('b', 'b'), ('a', 'ant')]) == [('b', 'ball', 'b', 2), ('a', 'arm', 'ant', 2)]\nassert sort_on_occurence([(2, 'Mark'), (3, 'Maze'), (2, 'Sara')]) == [(2, 'Mark', 'Sara', 2), (3, 'Maze', 1)]",
        "canonical_solution": "def sort_on_occurence(lst): \r\n\tdct = {} \r\n\tfor i, j in lst: \r\n\t\tdct.setdefault(i, []).append(j) \r\n\treturn ([(i, *dict.fromkeys(j), len(j)) \r\n\t\t\t\tfor i, j in dct.items()]) "
    },
    {
        "number": 244,
        "prompt": "Write a python function to find the next perfect square greater than a given number.\ndef next_Perfect_Square(N): \n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    i = 1\n    while (i*i <= N): \n        i += 1\n    return (i*i) \n  \n# Testing the function \nN = 12\nprint(\"The next perfect square greater than\", N, \"is\", next_Perfect_Square(N)) ",
        "generated_testcode": "assert next_Perfect_Square(15) == 16\n",
        "test": "assert next_Perfect_Square(35) == 36\nassert next_Perfect_Square(6) == 9\nassert next_Perfect_Square(9) == 16",
        "canonical_solution": "import math  \r\ndef next_Perfect_Square(N): \r\n    nextN = math.floor(math.sqrt(N)) + 1\r\n    return nextN * nextN "
    },
    {
        "number": 245,
        "prompt": "Write a function to find the maximum sum of bi-tonic sub-sequence for the given array.\ndef max_sum(arr, n): \n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    max_sum = 0\n    arr_sum = 0\n    for i in range(n-1): \n        if (i == 0): \n            arr_sum = max(arr[i], arr[i+1]) \n        else: \n            arr_sum = max(arr_sum + arr[i+1], arr[i]) \n        max_sum = max(max_sum, arr_sum) \n    return max_sum \n  \n# Driver code \narr = [2, 3, 4, 6, 8, 9, -1, -2, -3, -4, -5] \nn = len(arr) \nprint(\"Maximum sum of bi-tonic sub-sequence is:\", max_sum(arr, n)) \n\n# Output: Maximum sum of bi-tonic sub-sequence is: 26 ",
        "generated_testcode": "assert max_sum([1, 2, 3, 4, 2, 5, 7, 10, 8, 3, 5], 8) == 29\n",
        "test": "assert max_sum([1, 15, 51, 45, 33, 100, 12, 18, 9], 9) == 194\nassert max_sum([80, 60, 30, 40, 20, 10], 6) == 210\nassert max_sum([2, 3 ,14, 16, 21, 23, 29, 30], 8) == 138",
        "canonical_solution": "def max_sum(arr, n): \r\n\tMSIBS = arr[:] \r\n\tfor i in range(n): \r\n\t\tfor j in range(0, i): \r\n\t\t\tif arr[i] > arr[j] and MSIBS[i] < MSIBS[j] + arr[i]: \r\n\t\t\t\tMSIBS[i] = MSIBS[j] + arr[i] \r\n\tMSDBS = arr[:] \r\n\tfor i in range(1, n + 1): \r\n\t\tfor j in range(1, i): \r\n\t\t\tif arr[-i] > arr[-j] and MSDBS[-i] < MSDBS[-j] + arr[-i]: \r\n\t\t\t\tMSDBS[-i] = MSDBS[-j] + arr[-i] \r\n\tmax_sum = float(\"-Inf\") \r\n\tfor i, j, k in zip(MSIBS, MSDBS, arr): \r\n\t\tmax_sum = max(max_sum, i + j - k) \r\n\treturn max_sum"
    },
    {
        "number": 246,
        "prompt": "Write a function for computing square roots using the babylonian method.\ndef babylonian_squareroot(number):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    if number < 0:\n        return None\n    elif number == 0:\n        return 0\n    else:\n        guess = number / 2\n        while abs(guess**2 - number) > 0.0001:\n            guess = (guess + number / guess) / 2\n        return guess\n\nprint(babylonian_squareroot(16))  # Output: 4.0\nprint(babylonian_squareroot(2))   # Output: 1.414213562373095049\nprint(babylonian_squareroot(0))  # Output: 0\nprint(babylonian_squareroot(-4))  # Output: None\n\n# Test cases\nprint(babylonian_squareroot(16)) # 4.0\nprint(babylonian_squareroot(2))  # 1.414213562373095049\nprint(babylonian_squareroot(0))  # 0\nprint(babylonian_squareroot(-4)) # None\n\n# Test cases:\n# Test case 1:\n#   Input: number = 16\n#   Expected output: 4.0\n# Test case 2:\n#   Input: number = 2\n#   Expected output: 1.41421356",
        "generated_testcode": "assert babylonian_squareroot(16) == 4\n",
        "test": "assert babylonian_squareroot(10)==3.162277660168379\nassert babylonian_squareroot(2)==1.414213562373095\nassert babylonian_squareroot(9)==3.0",
        "canonical_solution": "def babylonian_squareroot(number):\r\n    if(number == 0):\r\n        return 0;\r\n    g = number/2.0;\r\n    g2 = g + 1;\r\n    while(g != g2):\r\n        n = number/ g;\r\n        g2 = g;\r\n        g = (g + n)/2;\r\n    return g;"
    },
    {
        "number": 247,
        "prompt": "Write a function to find the longest palindromic subsequence in the given string.\ndef lps(str): \n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    n = len(str) \n    dp = [[0 for x in range(n)] for y in range(n)] \n    for i in range(n): \n        dp[i][i] = 1\n    for L in range(2, n+1): \n        for i in range(n-L+1): \n            j = i+L-1\n            if str[i] == str[j] and L == 2: \n                dp[i][j] = 2\n            elif str[i] == str[j]: \n                dp[i][j] = dp[i+1][j-1] + 2\n            else: \n                dp[i][j] = max(dp[i+1][j], dp[i][j-1])\n    return dp[0][n-1] ",
        "generated_testcode": "assert lps(\"bbbab\") == 4\n",
        "test": "assert lps(\"TENS FOR TENS\") == 5 \nassert lps(\"CARDIO FOR CARDS\") == 7\nassert lps(\"PART OF THE JOURNEY IS PART\") == 9 ",
        "canonical_solution": "def lps(str): \r\n\tn = len(str) \r\n\tL = [[0 for x in range(n)] for x in range(n)] \r\n\tfor i in range(n): \r\n\t\tL[i][i] = 1\r\n\tfor cl in range(2, n+1): \r\n\t\tfor i in range(n-cl+1): \r\n\t\t\tj = i+cl-1\r\n\t\t\tif str[i] == str[j] and cl == 2: \r\n\t\t\t\tL[i][j] = 2\r\n\t\t\telif str[i] == str[j]: \r\n\t\t\t\tL[i][j] = L[i+1][j-1] + 2\r\n\t\t\telse: \r\n\t\t\t\tL[i][j] = max(L[i][j-1], L[i+1][j]); \r\n\treturn L[0][n-1]"
    },
    {
        "number": 248,
        "prompt": "Write a function to calculate the harmonic sum of n-1.\ndef harmonic_sum(n):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    if n == 1:\n        return 1\n    else:\n        return 1 + 1/n + harmonic_sum(n-1)\n\n# Test the function\nprint(harmonic_sum(3)) # Output: 1.833333333333333333335\nprint(harmonic_sum(5)) # Output: 2.16666666666666666665\nprint(harmonic_sum(10)) # Output: 2.7450206641666666666\nprint(harmonic_sum(15)) # Output: 3.08630996625424778\n\n# Calculate the value of harmonic sum for n=100\nprint(harmonic_sum(100)) # Output: 4.532710808033325545\n\n# This function takes O(n) time and space complexity\n\n# Implement the same function using tail recursion\ndef harmonic_sum_tail(n, sum=1):\n    if n == 1:\n        return sum\n    else:\n        return harmonic_sum_tail(n-1, sum+1/n)\n\n# Test the function\nprint(harmonic_sum_tail(3)) # Output: 1.833333333333",
        "generated_testcode": "assert harmonic_sum(1) == 1\n",
        "test": "assert harmonic_sum(7) == 2.5928571428571425\nassert harmonic_sum(4) == 2.083333333333333\nassert harmonic_sum(19) == 3.547739657143682",
        "canonical_solution": "def harmonic_sum(n):\r\n  if n < 2:\r\n    return 1\r\n  else:\r\n    return 1 / n + (harmonic_sum(n - 1)) "
    },
    {
        "number": 249,
        "prompt": "Write a function to find the intersection of two arrays using lambda function.\ndef intersection_array(array_nums1,array_nums2):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    intersection = lambda nums1,nums2: list(set(nums1) & set(nums2))\n    return intersection(array_nums1,array_nums2)\n\n#Example usage:\narray_nums1 = [1,2,3,4,5,6,7]\narray_nums2 = [4,5,6,7,8,9]\nprint(intersection_array(array_nums1,array_nums2)) #[4, 5, 6, 7]\n\n#Example usage:\narray_nums1 = [1,2,3,4,5]\narray_nums2 = [6,7,8,9]\nprint(intersection_array(array_nums1,array_nums2)) #[]\n\n#Example usage:\narray_nums1 = [1,2,3,4,5,6,7]\narray_nums2 = [1,2,3,4,5,6,7]\nprint(intersection_array(array_nums1,array_nums2)) #[1, 2, 3, 4, 5, 6, 7] ",
        "generated_testcode": "assert intersection_array([1,2,3,4,5],[2,4,6,8]) == [2,4]\n",
        "test": "assert intersection_array([1, 2, 3, 5, 7, 8, 9, 10],[1, 2, 4, 8, 9])==[1, 2, 8, 9]\nassert intersection_array([1, 2, 3, 5, 7, 8, 9, 10],[3,5,7,9])==[3,5,7,9]\nassert intersection_array([1, 2, 3, 5, 7, 8, 9, 10],[10,20,30,40])==[10]",
        "canonical_solution": "def intersection_array(array_nums1,array_nums2):\r\n result = list(filter(lambda x: x in array_nums1, array_nums2)) \r\n return result"
    },
    {
        "number": 250,
        "prompt": "Write a python function to count the occcurences of an element in a tuple.\ndef count_X(tup, x): \n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    count = 0\n    for i in tup: \n        if i == x: \n            count = count + 1\n    return count \n\n# testing the function \nt = (1, 2, 3, 4, 5, 4, 3, 2, 1) \nx = 3\nprint(count_X(t, x)) ",
        "generated_testcode": "assert count_X((1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3), 3) == 2\n",
        "test": "assert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),4) == 0\nassert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),10) == 3\nassert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),8) == 4",
        "canonical_solution": "def count_X(tup, x): \r\n    count = 0\r\n    for ele in tup: \r\n        if (ele == x): \r\n            count = count + 1\r\n    return count "
    },
    {
        "number": 251,
        "prompt": "Write a function to insert an element before each element of a list.\ndef insert_element(list,element):\n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    result = []\n    for i in range(len(list)):\n        result.append(element)\n        result.append(list[i])\n    return result\n\n# Test the function with an example\nmy_list = [1,2,3,4,5]\nprint(insert_element(my_list,0))\n\n# Output: [0, 1, 0, 2, 0, 3, 0, 4, 0, 5]\n\n# Explanation: The function takes two arguments, a list and an element to insert. It creates an empty result list and then loops through each element of the original list. It appends the element to be inserted to the result list before appending the current element of the original list. Finally, it returns the result list. ",
        "generated_testcode": "assert insert_element([1,2,3,4,5],0) == [0,1,0,2,0,3,0,4,0,5]\n",
        "test": "assert insert_element(['Red', 'Green', 'Black'] ,'c')==['c', 'Red', 'c', 'Green', 'c', 'Black'] \nassert insert_element(['python', 'java'] ,'program')==['program', 'python', 'program', 'java'] \nassert insert_element(['happy', 'sad'] ,'laugh')==['laugh', 'happy', 'laugh', 'sad'] ",
        "canonical_solution": "def insert_element(list,element):\r\n list = [v for elt in list for v in (element, elt)]\r\n return list"
    },
    {
        "number": 252,
        "prompt": "Write a python function to convert complex numbers to polar coordinates.\ndef convert(numbers):    \n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    for number in numbers:\n        if number.imag == 0:\n            print(\"{0:.2f}+0.00j\".format(number.real))\n        else:\n            r = abs(number)\n            theta = cmath.phase(number)\n            print(\"{0:.2f}*{1:.2f}j\".format(r, theta))\n\ndef main():\n    numbers = list(map(complex, input(\"Enter complex numbers separated by space: \").split()))\n    convert(numbers)\n\nif __name__ == \"__main__\":\n    main()\n\n'''Example Test Cases:\nInput:\n3+4j 5-6j -2+0j 0j\nOutput:\n5.00+0.93j 5.00-2.56j 0.00+0.00j\n\nInput:\n1+0j 0j -1+0j 1-2j\nOutput:\n1.00+0.00j 0.00+0.00j -1.00+3.14j 1.00-2.00j\n''' ",
        "generated_testcode": "assert convert(1+2j) == (2.236067977749979, 0.131699875378540345)\n",
        "test": "assert convert(1) == (1.0, 0.0)\nassert convert(4) == (4.0,0.0)\nassert convert(5) == (5.0,0.0)",
        "canonical_solution": "import cmath  \r\ndef convert(numbers):    \r\n  num = cmath.polar(numbers)  \r\n  return (num) "
    },
    {
        "number": 253,
        "prompt": "Write a python function to count integers from a given list.\ndef count_integer(list1):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    count = 0\n    for i in list1:\n        if type(i) == int:\n            count += 1\n    return count\n\n# Test the function with an example list\nlist1 = [1, 2, 3.5, '4', 5, 6, 'hello', 7, 8, 9.6]\nprint(count_integer(list1))  # Output: 3\n\n# The function should return 3, as there are only 3 integers in the list\n\n# Create a list of 100 elements where the first 80 elements are integers and the last 20 elements are strings\nimport random\nlist2 = [random.randint(1, 100) for i in range(80)] + [random.choice(['a', 'b', 'c', 'd']) for i in range(20)]\nprint(list2)\n# Output: [57, 14, 41, 92, 41, 79, 20, 11, 42, 73, 98, 39, 70, 64, 36, 76, 95, 45, 60, 4, 68, 43, 26, 32, 100, 91, 48, 69, 6, 88, 78, 100, 30, 44, 41,",
        "generated_testcode": "assert count_integer([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 7\n",
        "test": "assert count_integer([1,2,'abc',1.2]) == 2\nassert count_integer([1,2,3]) == 3\nassert count_integer([1,1.2,4,5.1]) == 2",
        "canonical_solution": "def count_integer(list1):\r\n    ctr = 0\r\n    for i in list1:\r\n        if isinstance(i, int):\r\n            ctr = ctr + 1\r\n    return ctr"
    },
    {
        "number": 254,
        "prompt": "Write a function to find all words starting with 'a' or 'e' in a given string.\ndef words_ae(text):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    words = text.split()\n    result = []\n    for word in words:\n        if word[0] == 'a' or word[0] == 'e':\n            result.append(word)\n    return result\n\n# Test the function with the following string\ntext = \"apple banana elephant earring enemy\"\nprint(words_ae(text))  # should return ['apple', 'banana', 'earring']\n\n# Test with an empty string\ntext = \"\"\nprint(words_ae(text))  # should return []\n\n# Test with a string that contains no words starting with 'a' or 'e'\ntext = \"xyz\"\nprint(words_ae(text))  # should return []\n\n# Test with a string containing uppercase letters\ntext = \"Apple Elephant\"\nprint(words_ae(text))  # should return ['Apple']\n\n# Test with a string containing numbers and special characters\ntext = \"apple$ 20 banana@ 3.14159 e-ring!\"\nprint(words_ae(text))  # should return ['apple', 'banana', 'e-ring']\n\n# Test with a string containing punctuation\ntext = \"apple. banana, elephant. enemy!\"\nprint(words_ae(text))  # should return ['apple', 'banana', 'elephant'] ",
        "generated_testcode": "assert words_ae(\"The quick brown fox jumps over the lazy dog\") == [\"The\", \"quick\", \"brown\", \"jumps\", \"over\", \"the\", \"lazy\", \"dog\"]\n",
        "test": "assert words_ae(\"python programe\")==['ame']\nassert words_ae(\"python programe language\")==['ame','anguage']\nassert words_ae(\"assert statement\")==['assert', 'atement']",
        "canonical_solution": "import re\r\ndef words_ae(text):\r\n list = re.findall(\"[ae]\\w+\", text)\r\n return list"
    },
    {
        "number": 255,
        "prompt": "Write a function to choose specified number of colours from three different colours and generate all the combinations with repetitions.\ndef combinations_colors(l, n):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    colours = ['Red', 'Blue', 'Green']\n    result = []\n    for r in range(n+1):\n        for b in range(n+1):\n            for g in range(n+1):\n                if r + b + g == n:\n                    result.append((r, b, g) if r <= l else None)\n    return [colours[0] * r + colours[1] * b + colours[2] * g for r, b, g in result if r <= l and b <= l and g <= l]\n\n# Test the function\nprint(combinations_colors(2, 3))  # ['RR', 'RB', 'RG', 'BB', 'BG', 'GG', 'RRR', 'RRB', 'RRG', 'RBB', 'RGG', 'BBG', 'BGG']\nprint(combinations_colors(1, 3))  # ['R', 'B', 'G', 'RR', 'RB', 'RG', 'BB', 'BG', 'GG']\nprint(combinations_colors(3, 3))  # ['RRR', 'RRB', 'RRG', 'RBB', 'RGG', 'BBG', 'BGG', 'RBBG']\nprint(combinations_colors(2, 1))  # ['R', 'B', 'G']\nprint(combinations_colors(1, 0))  # []\nprint(combinations_",
        "generated_testcode": "assert combinations_colors(['red', 'blue', 'green'], 2) == [('red', 'red'), ('red', 'blue'), ('red', 'green'), ('blue', 'blue'), ('blue', 'green'), ('green', 'green')]\n",
        "test": "assert combinations_colors( [\"Red\",\"Green\",\"Blue\"],1)==[('Red',), ('Green',), ('Blue',)]\nassert combinations_colors( [\"Red\",\"Green\",\"Blue\"],2)==[('Red', 'Red'), ('Red', 'Green'), ('Red', 'Blue'), ('Green', 'Green'), ('Green', 'Blue'), ('Blue', 'Blue')]\nassert combinations_colors( [\"Red\",\"Green\",\"Blue\"],3)==[('Red', 'Red', 'Red'), ('Red', 'Red', 'Green'), ('Red', 'Red', 'Blue'), ('Red', 'Green', 'Green'), ('Red', 'Green', 'Blue'), ('Red', 'Blue', 'Blue'), ('Green', 'Green', 'Green'), ('Green', 'Green', 'Blue'), ('Green', 'Blue', 'Blue'), ('Blue', 'Blue', 'Blue')]",
        "canonical_solution": "from itertools import combinations_with_replacement \r\ndef combinations_colors(l, n):\r\n    return list(combinations_with_replacement(l,n))\r"
    },
    {
        "number": 256,
        "prompt": "Write a python function to count the number of prime numbers less than a given non-negative number.\ndef count_Primes_nums(n):\n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    if n < 2:\n        return 0\n    primes = [True] * n\n    primes[0] = primes[1] = False\n    for i in range(2, int(n**0.5)+1):\n        if primes[i]:\n            for j in range(i**2, n, i):\n                primes[j] = False\n    return sum(primes)\n\nprint(count_Primes_nums(20)) # Output: 8 (2, 3, 5, 7, 11, 13, 17, 19)\nprint(count_Primes_nums(100)) # Output: 25 (2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\nprint(count_Primes_nums(1000)) # Output: 25 (2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61",
        "generated_testcode": "assert count_Primes_nums(10) == 4\n",
        "test": "assert count_Primes_nums(5) == 2\nassert count_Primes_nums(10) == 4\nassert count_Primes_nums(100) == 25",
        "canonical_solution": "def count_Primes_nums(n):\r\n    ctr = 0\r\n    for num in range(n):\r\n        if num <= 1:\r\n            continue\r\n        for i in range(2,num):\r\n            if (num % i) == 0:\r\n                break\r\n        else:\r\n            ctr += 1\r\n    return ctr"
    },
    {
        "number": 257,
        "prompt": "Write a function to swap two numbers.\ndef swap_numbers(a,b):\n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    a = a+b\n    b = a-b\n    a = a-b\n    return a,b\n\nprint(swap_numbers(5,10)) # (15,5)\nprint(swap_numbers(15,10)) # (5,15)\nprint(swap_numbers(10,5)) # (15,5) ",
        "generated_testcode": "assert swap_numbers(1,2) == (2,1)\n",
        "test": "assert swap_numbers(10,20)==(20,10)\nassert swap_numbers(15,17)==(17,15)\nassert swap_numbers(100,200)==(200,100)",
        "canonical_solution": "def swap_numbers(a,b):\r\n temp = a\r\n a = b\r\n b = temp\r\n return (a,b)"
    },
    {
        "number": 258,
        "prompt": "Write a function to find number of odd elements in the given list using lambda function.\ndef count_odd(array_nums):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    return len(list(filter(lambda x: x % 2 != 0, array_nums))\n\n# Test case\nprint(count_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])) # Output: 4\nprint(count_odd([2, 4, 6, 8, 10])) # Output: 0\nprint(count_odd([1, 3, 5, 7, 9])) # Output: 3 ",
        "generated_testcode": "assert count_odd([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 4\n",
        "test": "assert count_odd([1, 2, 3, 5, 7, 8, 10])==4\nassert count_odd([10,15,14,13,-18,12,-20])==2\nassert count_odd([1, 2, 4, 8, 9])==2",
        "canonical_solution": "def count_odd(array_nums):\r\n   count_odd = len(list(filter(lambda x: (x%2 != 0) , array_nums)))\r\n   return count_odd"
    },
    {
        "number": 259,
        "prompt": "Write a function to maximize the given two tuples.\ndef maximize_elements(test_tup1, test_tup2):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    #Create an empty list to store the maximum elements of the two tuples\n    max_list = []\n    #Iterate over the tuples\n    for i in range(len(test_tup1)):\n        #if the element of tuple 1 is greater than tuple 2, append tuple 1 element to the max_list\n        if test_tup1[i] > test_tup2[i]:\n            max_list.append(test_tup1[i])\n        #else append tuple 2 element to the max_list\n        else:\n            max_list.append(test_tup2[i])\n    #return the max_list\n    return max_list\n\n#Test the function with two tuples\ntest_tup1 = (10, 20, 30, 40, 50)\ntest_tup2 = (5, 25, 35, 45, 55)\nprint(maximize_elements(test_tup1, test_tup2)) #Output: [10, 25, 35, 45, 55]\n\ntest_tup1 = (5, 25, 35, 45, 55)\ntest_tup2 = (10, 20, 30, 40, 50)\nprint(maximize_elements(test_tup1, test_tup2)) #Output: [10, 25, ",
        "generated_testcode": "assert maximize_elements((1, 2, 3), (4, 5, 6)) == (4, 5, 6)\n",
        "test": "assert maximize_elements(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((6, 7), (4, 9), (2, 9), (7, 10))\nassert maximize_elements(((2, 4), (5, 6), (3, 10), (2, 11)), ((7, 8), (4, 10), (2, 2), (8, 4))) == ((7, 8), (5, 10), (3, 10), (8, 11))\nassert maximize_elements(((3, 5), (6, 7), (4, 11), (3, 12)), ((8, 9), (5, 11), (3, 3), (9, 5))) == ((8, 9), (6, 11), (4, 11), (9, 12))",
        "canonical_solution": "def maximize_elements(test_tup1, test_tup2):\r\n  res = tuple(tuple(max(a, b) for a, b in zip(tup1, tup2))\r\n   for tup1, tup2 in zip(test_tup1, test_tup2))\r\n  return (res) "
    },
    {
        "number": 260,
        "prompt": "Write a function to find the nth newman\u2013shanks\u2013williams prime number.\ndef newman_prime(n): \n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    def is_prime(num): \n        if num < 2: \n            return False\n        for i in range(2, int(num**0.5) + 1): \n            if num % i == 0: \n                return False\n        return True\n\n    def nth_prime(n): \n        count = 0\n        num = 2\n        while count < n: \n            if is_prime(num): \n                count += 1\n            num += 1\n        return num - 1\n\n    return nth_prime(n)\n\nprint(newman_prime(100000)) # Output: 99739",
        "generated_testcode": "assert newman_prime(1) == 5\n",
        "test": "assert newman_prime(3) == 7 \nassert newman_prime(4) == 17\nassert newman_prime(5) == 41",
        "canonical_solution": "def newman_prime(n): \r\n\tif n == 0 or n == 1: \r\n\t\treturn 1\r\n\treturn 2 * newman_prime(n - 1) + newman_prime(n - 2)"
    },
    {
        "number": 261,
        "prompt": "Write a function to perform mathematical division operation across the given tuples.\ndef division_elements(test_tup1, test_tup2):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    \"\"\"\n    :param test_tup1: tuple\n    :param test_tup2: tuple\n    :return: tuple\n    \"\"\"\n    # Check if tuples are of the same length\n    if len(test_tup1) != len(test_tup2):\n        return \"Tuples are not of the same length\"\n    else:\n        result = []\n        for i in range(len(test_tup1)):\n            if test_tup2[i] == 0:\n                result.append(\"undefined\")\n            else:\n                result.append(test_tup1[i] / test_tup2[i])\n    return tuple(result)\n\n\n\n# Example usage:\ntup1 = (10, 20, 30, 40, 50)\ntup2 = (2, 4, 6, 8, 0)\nprint(division_elements(tup1, tup2))  # Output: (5.0, 5.0, 5.0, 'undefined')\n\ntup3 = (10, 20, 30, 40, 50)\ntup4 = (2, 4, 0, 8)\nprint(division_elements(tup3, tup4))  # Output: Tuples are not of the same length\n\ntup5 = (10, 20, 30, 40)\ntup6 = (2",
        "generated_testcode": "assert division_elements((2, 4, 6, 8, 10), (1, 2, 3, 4)) == (2, 2, 2, 2)\n",
        "test": "assert division_elements((10, 4, 6, 9),(5, 2, 3, 3)) == (2, 2, 2, 3)\nassert division_elements((12, 6, 8, 16),(6, 3, 4, 4)) == (2, 2, 2, 4)\nassert division_elements((20, 14, 36, 18),(5, 7, 6, 9)) == (4, 2, 6, 2)",
        "canonical_solution": "def division_elements(test_tup1, test_tup2):\r\n  res = tuple(ele1 // ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\r\n  return (res) "
    },
    {
        "number": 262,
        "prompt": "Write a function to split a given list into two parts where the length of the first part of the list is given.\ndef split_two_parts(list1, L):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": true,
        "answer": "    return list1[:L], list1[L:]\n\n# Example usage:\nlist1 = [1, 2, 3, 4, 5, 6, 7, 8, 9]\nL = 3\na, b = split_two_parts(list1, L)\nprint(a)  # Output: [1, 2, 3]\nprint(b)  # Output: [4, 5, 6, 7, 8, 9]\n\n# Example usage:\nlist2 = ['a', 'b', 'c', 'd', 'e', 'f', 'g']\nL = 2\na, b = split_two_parts(list2, L)\nprint(a)  # Output: ['a', 'b']\nprint(b)  # Output: ['c', 'd', 'e', 'f', 'g']\n\n# Example usage:\nlist3 = ['apple', 'banana', 'orange']\nL = 1\na, b = split_two_parts(list3, L)\nprint(a)  # Output: ['apple']\nprint(b)  # Output: ['banana', 'orange']\n\n# Example usage:\nlist4 = [0]\nL = 0\na, b = split_two_parts(list4, L)\nprint(a)  # Output: []\nprint(b)  # Output: [0] ",
        "generated_testcode": "assert split_two_parts([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\"], 3) == ([\"a\", \"b\", \"c\"], [\"d\", \"e\", \"f\", \"g\", \"h\"])\n",
        "test": "assert split_two_parts([1,1,2,3,4,4,5,1],3)==([1, 1, 2], [3, 4, 4, 5, 1])\nassert split_two_parts(['a', 'b', 'c', 'd'],2)==(['a', 'b'], ['c', 'd'])\nassert split_two_parts(['p', 'y', 't', 'h', 'o', 'n'],4)==(['p', 'y', 't', 'h'], ['o', 'n'])",
        "canonical_solution": "def split_two_parts(list1, L):\r\n    return list1[:L], list1[L:]"
    },
    {
        "number": 263,
        "prompt": "Write a function to merge two dictionaries.\ndef merge_dict(d1,d2):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    return {**d1, **d2}\n\n# Test the function with an example\nprint(merge_dict({'a':1,'b':2},{'c':3,'d':4})) # Output: {'a': 1, 'b': 2, 'c': 3, 'd': 4}\n\n# Test the function with another example\nprint(merge_dict({'a':1,'b':2},{'a':3,'c':4})) # Output: {'a': 3, 'b': 2, 'c': 4}\n\n# The ** operator unpacks the dictionaries and adds the key-value pairs to a new dictionary. ",
        "generated_testcode": "assert merge_dict({'a':1,'b':2},{'c':3,'d':4}) == {'a':1,'b':2,'c':3,'d':4}\n",
        "test": "assert merge_dict({'a': 100, 'b': 200},{'x': 300, 'y': 200})=={'x': 300, 'y': 200, 'a': 100, 'b': 200}\nassert merge_dict({'a':900,'b':900,'d':900},{'a':900,'b':900,'d':900})=={'a':900,'b':900,'d':900,'a':900,'b':900,'d':900}\nassert merge_dict({'a':10,'b':20},{'x':30,'y':40})=={'x':30,'y':40,'a':10,'b':20}",
        "canonical_solution": "def merge_dict(d1,d2):\r\n d = d1.copy()\r\n d.update(d2)\r\n return d"
    },
    {
        "number": 264,
        "prompt": "Write a function to calculate a dog's age in dog's years.\ndef dog_age(h_age):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    d_age = h_age * 7\n    return d_age\n\n\nprint(dog_age(3))\n\n# Write a function to calculate a cat's age in cat's years.\ndef cat_age(h_age):\n    c_age = h_age * 15\n    return c_age\n\nprint(cat_age(3))\n\n# Write a function to calculate the weight of a dog based on the human weight.\ndef dog_weight(h_weight):\n    d_weight = h_weight * 0.64\n    return d_weight\n\nprint(dog_weight(20))\n\n# Write a function to calculate the weight of a cat based on the human weight.\ndef cat_weight(h_weight):\n    c_weight = h_weight * 0.14\n    return c_weight\n\nprint(cat_weight(20))\n\n# Write a function to calculate the weight of a bird based on the human weight.\ndef bird_weight(h_weight):\n    b_weight = h_weight * 0.06\n    return b_weight\n\nprint(bird_weight(20))\n\n# Write a function to calculate the human age after 10 years.\ndef human_age(h_age):\n    h_age_after_10 = h_age + 10\n    return h_age_after_10\n\nprint(human_age(25))\n\n# Write a function to calculate the human weight after 5",
        "generated_testcode": "assert dog_age(1) == 7\n",
        "test": "assert dog_age(12)==61\nassert dog_age(15)==73\nassert dog_age(24)==109",
        "canonical_solution": "def dog_age(h_age):\r\n if h_age < 0:\r\n \texit()\r\n elif h_age <= 2:\r\n\t d_age = h_age * 10.5\r\n else:\r\n\t d_age = 21 + (h_age - 2)*4\r\n return d_age"
    },
    {
        "number": 265,
        "prompt": "Write a function to split a list for every nth element.\ndef list_split(S, step):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    n = 0\n    result = []\n    sublist = []\n    for item in S:\n        sublist.append(item)\n        n += 1\n        if n == step:\n            result.append(sublist)\n            sublist = []\n            n = 0\n    result.append(sublist)\n    return result\n\n# Test the function\nS = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nprint(list_split(S, 3)) # should return [[1, 2, 3], [4, 5, 6], [7, 8, 10]]\nprint(list_split(S, 2)) # should return [[1, 2], [3, 4], [5, 6], [7, 8], [9, 10]]\nprint(list_split(S, 4)) # should return [[1, 2, 3, 4], [5, 6, 7], [8, 9, 10]]\nprint(list_split(S, 1)) # should return [[1], [2], [3], [4], [5], [6], [7], [8], [9], [10]]\nprint(list_split([], 2)) # should return []\nprint(list_split([1], 2)) # should return [[1]]\nprint(list_split([1, 2], 1)) # should",
        "generated_testcode": "assert list_split([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\"], 3) == [[\"a\", \"d\", \"g\", \"j\"], [\"b\", \"e\", \"h\"], [\"c\", \"f\", \"i\"], [\"k\"]]\n",
        "test": "assert list_split(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n'],3)==[['a', 'd', 'g', 'j', 'm'], ['b', 'e', 'h', 'k', 'n'], ['c', 'f', 'i', 'l']] \nassert list_split([1,2,3,4,5,6,7,8,9,10,11,12,13,14],3)==[[1,4,7,10,13], [2,5,8,11,14], [3,6,9,12]] \nassert list_split(['python','java','C','C++','DBMS','SQL'],2)==[['python', 'C', 'DBMS'], ['java', 'C++', 'SQL']] ",
        "canonical_solution": "def list_split(S, step):\r\n    return [S[i::step] for i in range(step)]"
    },
    {
        "number": 266,
        "prompt": "Write a function to find the lateral surface area of a cube.\ndef lateralsurface_cube(l):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    return 6*(l**2)\n\n#Test the function with l = 5\nprint(lateralsurface_cube(5)) #output: 90\n\n#Write a function to find the volume of a cube.\ndef volume_cube(l):\n    return l**3\n\n#Test the function with l = 5\nprint(volume_cube(5)) #output: 125\n\n#Write a function to find the volume of a sphere.\ndef volume_sphere(r):\n    return (4/3)*(3.14159)*(r**3)\n\n#Test the function with r = 5\nprint(volume_sphere(5)) #output: 523.6\n\n#Write a function to find the surface area of a sphere.\ndef surface_sphere(r):\n    return 4*(3.14159)*(r**2)\n\n#Test the function with r = 5\nprint(surface_sphere(5)) #output: 314.159\n\n#Write a function to find the surface area of a cone.\ndef surface_cone(r, h):\n    return (3.14159)*(r**2)+(3.14159)*(r*((r**2)+(h**2))**0.5)\n\n#Test the function with r = 5 and h = 7\nprint(surface_cone(5, 7)) #output",
        "generated_testcode": "assert lateralsurface_cube(3) == 6 * 3 * 2\n",
        "test": "assert lateralsurface_cube(5)==100\nassert lateralsurface_cube(9)==324\nassert lateralsurface_cube(10)==400",
        "canonical_solution": "def lateralsurface_cube(l):\r\n  LSA = 4 * (l * l)\r\n  return LSA"
    },
    {
        "number": 267,
        "prompt": "Write a python function to find the sum of squares of first n odd natural numbers.\ndef square_Sum(n):  \n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    sum = 0\n    for i in range(1, 2*n, 2):\n        sum += i**2\n    return sum\n\n# Testing the function\nprint(square_Sum(5)) # Output: 55\nprint(square_Sum(10)) # Output: 2255\nprint(square_Sum(15)) # Output: 1240\nprint(square_Sum(20)) # Output: 760\n\n# Explanation: \n# The above function takes an input 'n' and initializes a sum variable to 0. Then it loops through the range of first n odd numbers (1, 3, 5, 7, ..., 2n-1) and adds the square of each number to the sum. Finally, it returns the sum. ",
        "generated_testcode": "assert square_Sum(5) == 225 # 1^2 + 3^2 + 5^2 + 7^2 + 9^2 = 225\n",
        "test": "assert square_Sum(2) == 10\nassert square_Sum(3) == 35\nassert square_Sum(4) == 84",
        "canonical_solution": "def square_Sum(n):  \r\n    return int(n*(4*n*n-1)/3) "
    },
    {
        "number": 268,
        "prompt": "Write a function to find the n'th star number.\ndef find_star_num(n): \n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    star_num = \"\"\n    for i in range(n):\n        star_num += \"*\"\n    return star_num\n\n# Test the function with the first few star numbers\nprint(find_star_num(1)) # should print \"*\"\nprint(find_star_num(3)) # should print \"***\"\nprint(find_star_num(5)) # should print \"*****\"\n\n# Test the function with a larger star number\nprint(find_star_num(10)) # should print \"**********\"\nprint(find_star_num(15)) # should print \"*************\"\n\n# Test the function with a negative number\nprint(find_star_num(-1)) # should print \"\"\n\n# Test the function with a decimal number\nprint(find_star_num(2.5)) # should print an error message and return None\n\n# Test the function with a string\nprint(find_star_num(\"hello\")) # should print an error message and return None\n\n\n# Test the function with a list\nprint(find_star_num([1, 2, 3])) # should print an error message and return None\n\n# Test the function with a tuple\nprint(find_star_num((1, 2, 3)) # should print an error message and return None\n\n# Test the function with None\nprint(find_star_num(None) # should print an error message and return None\n\n# Test the function with a dictionary\nprint(find_star_num({\"name\": \"Alice\",",
        "generated_testcode": "assert find_star_num(1) == \"*\"\n",
        "test": "assert find_star_num(3) == 37\nassert find_star_num(4) == 73\nassert find_star_num(5) == 121",
        "canonical_solution": "def find_star_num(n): \r\n\treturn (6 * n * (n - 1) + 1) "
    },
    {
        "number": 269,
        "prompt": "Write a function to find the ascii value of a character.\ndef ascii_value(k):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    return ord(k)\n\nprint(ascii_value('A'))  # Output: 65\n\n# Write a function to check if a number is prime or not.\ndef is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\nprint(is_prime(7))  # Output: True\nprint(is_prime(12))  # Output: False\n\n# Write a function to check if a number is even or odd.\ndef even_odd(n):\n    if n % 2 == 0:\n        return \"Even\"\n    else:\n        return \"Odd\"\n\nprint(even_odd(4))  # Output: Even\nprint(even_odd(5))  # Output: Odd\n\n# Write a function to check if a number is a perfect square or not.\nimport math\ndef is_perfect_square(n):\n    return n == int(math.sqrt(n))**2\n\nprint(is_perfect_square(16))  # Output: True\nprint(is_perfect_square(15))  # Output: False\n\n# Write a function to find the square root of a number.\nimport math\ndef sqrt_number(n):\n    return math.sqrt(n)\n\nprint(sqrt_number(16))  # Output: 4.",
        "generated_testcode": "assert ascii_value('a') == 97\n",
        "test": "assert ascii_value('A')==65\nassert ascii_value('R')==82\nassert ascii_value('S')==83",
        "canonical_solution": "def ascii_value(k):\r\n  ch=k\r\n  return ord(ch)"
    },
    {
        "number": 270,
        "prompt": "Write a python function to find the sum of even numbers at even positions.\ndef sum_even_and_even_index(arr,n):  \n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    sum=0\n    for i in range(n):  \n        if(arr[i]%2==0 and i%2==0):  \n            sum+=arr[i]  \n    return sum  \n  \n#input array  \narr = [2, 3, 4, 5, 6, 8, 7, 10]  \nn = len(arr)  \n  \n#function call  \nprint(\"Sum of even numbers at even positions: \",sum_even_and_even_index(arr, n))  \n```\n\nOutput:\n```\nSum of even numbers at even positions: 18\n```\n\nIn this code, we have defined a function `sum_even_and_even_index` which takes an array and its length as inputs. We have used a for loop to traverse through the array and check if the number at that position is even and the position is even. If both conditions are true, we add that number to the sum. Finally, we return the sum. \n\nExplanation:\n- We start by initializing the variable `sum` to zero.\n- We iterate through the array using a for loop and check if the current number is even and the index is even using the modulus operator `%`.\n- If both conditions are true, we add the number to the sum.\n- Finally, we return the sum. \n\nHere's another example:\n\n```python\n# Python program to find the sum of even numbers at even positions\ndef sum_even_and_even_index(arr, n):\n",
        "generated_testcode": "assert sum_even_and_even_index([1,2,3,4,5,6,7,8,9], 6) == 10\n",
        "test": "assert sum_even_and_even_index([5, 6, 12, 1, 18, 8],6) == 30\nassert sum_even_and_even_index([3, 20, 17, 9, 2, 10, 18, 13, 6, 18],10) == 26\nassert sum_even_and_even_index([5, 6, 12, 1],4) == 12",
        "canonical_solution": "def sum_even_and_even_index(arr,n):  \r\n    i = 0\r\n    sum = 0\r\n    for i in range(0,n,2): \r\n        if (arr[i] % 2 == 0) : \r\n            sum += arr[i]  \r\n    return sum"
    },
    {
        "number": 271,
        "prompt": "Write a python function to find the sum of fifth power of first n even natural numbers.\ndef even_Power_Sum(n): \n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    sum = 0\n    for i in range(1, 2*n+1, 2): \n        sum += i**5\n    return sum \n  \n# Driver code \nn = 5\nprint(\"Sum of fifth power of first\", n, \"even natural numbers is\", even_Power_Sum(n)) ",
        "generated_testcode": "assert even_Power_Sum(5) == 225\n",
        "test": "assert even_Power_Sum(2) == 1056\nassert even_Power_Sum(3) == 8832\nassert even_Power_Sum(1) == 32",
        "canonical_solution": "def even_Power_Sum(n): \r\n    sum = 0; \r\n    for i in range(1,n+1): \r\n        j = 2*i; \r\n        sum = sum + (j*j*j*j*j); \r\n    return sum; "
    },
    {
        "number": 272,
        "prompt": "Write a function to perfom the rear element extraction from list of tuples records.\ndef rear_extract(test_list):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    result = []\n    for tup in test_list:\n        result.append(tup[len(tup)-1])\n    return result\n\n\n#Example usage:\ntest_list = [(1,2,3), (4,5,6), (7,8,9), (10,11,12)]\nprint(rear_extract(test_list)) # Output: [3, 6, 9, 12]\n\n\n# Time complexity: O(n)\n# Space complexity: O(n)",
        "generated_testcode": "assert rear_extract([(1, 2, 3), (4, 5, 6), (7, 8, 9)]) == (7, 8, 9)\n",
        "test": "assert rear_extract([(1, 'Rash', 21), (2, 'Varsha', 20), (3, 'Kil', 19)]) == [21, 20, 19]\nassert rear_extract([(1, 'Sai', 36), (2, 'Ayesha', 25), (3, 'Salman', 45)]) == [36, 25, 45]\nassert rear_extract([(1, 'Sudeep', 14), (2, 'Vandana', 36), (3, 'Dawood', 56)]) == [14, 36, 56]",
        "canonical_solution": "def rear_extract(test_list):\r\n  res = [lis[-1] for lis in test_list]\r\n  return (res) "
    },
    {
        "number": 273,
        "prompt": "Write a function to substract the contents of one tuple with corresponding index of other tuple.\ndef substract_elements(test_tup1, test_tup2):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] - test_tup2[i])\n    return tuple(result)\n\n# Testing the function\ntest_tup1 = (10, 20, 30, 40, 50)\ntest_tup2 = (5, 10, 15, 20, 25)\nprint(substract_elements(test_tup1, test_tup2))\n\n# Output: (5, 10, 15, 20, 25)\n",
        "generated_testcode": "assert substract_elements((1, 2, 3), (4, 5, 6)) == (-3, -3, -3)\n",
        "test": "assert substract_elements((10, 4, 5), (2, 5, 18)) == (8, -1, -13)\nassert substract_elements((11, 2, 3), (24, 45 ,16)) == (-13, -43, -13)\nassert substract_elements((7, 18, 9), (10, 11, 12)) == (-3, 7, -3)",
        "canonical_solution": "def substract_elements(test_tup1, test_tup2):\r\n  res = tuple(map(lambda i, j: i - j, test_tup1, test_tup2))\r\n  return (res) "
    },
    {
        "number": 274,
        "prompt": "Write a python function to find sum of even index binomial coefficients.\ndef even_binomial_Coeff_Sum( n): \n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    res = 0\n    for i in range(n+1): \n        res += (nCk(n, i) * (i+1) * (n-i) if i%2 == 0 else 0) \n    return res \n\n# A function to return nCr \ndef nCk(n, k): \n    res = 1\n    for i in range(min(k, n-k)): \n        res = res * (n-i) // (i+1) \n    return res \n\n# Driver code \nn = 5\nprint(\"Sum of even binomial coefficients is:\", even_binomial_Coeff_Sum(n)) ",
        "generated_testcode": "assert even_binomial_Coeff_Sum(5) == 10\n",
        "test": "assert even_binomial_Coeff_Sum(4) == 8\nassert even_binomial_Coeff_Sum(6) == 32\nassert even_binomial_Coeff_Sum(2) == 2",
        "canonical_solution": "import math  \r\ndef even_binomial_Coeff_Sum( n): \r\n    return (1 << (n - 1)) "
    },
    {
        "number": 275,
        "prompt": "Write a python function to find the position of the last removed element from the given array.\ndef get_Position(a,n,m): \n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    # Sort the array in ascending order\n    a.sort() \n    # Initialize the position variable to -1\n    position = -1\n    # Find the last element of the array\n    last_element = a[n-1] \n    # Iterate through the array\n    for i in range(n): \n        if a[i] == m: \n            position = i \n    # Return the position of the element \n    return position \n\n# Take input for the size of the array\nn = int(input(\"Enter the size of the array: \"))\n# Input the elements of the array\na = list(map(int,input(\"Enter the elements of the array: \").strip().split()))[:n]\n# Take input for the element to be removed\nm = int(input(\"Enter the element to be removed: \"))\n# Call the function get_Position with the array and element\npos = get_Position(a,n,m)\nif pos == -1: \n    print(\"Element not found in the array\")\nelse: \n    print(\"Last occurrence of element is at position\", pos+1) ",
        "generated_testcode": "assert get_Position([1,2,3,4,5,6,7,8,9], 7, 6) == 6\n",
        "test": "assert get_Position([2,5,4],3,2) == 2\nassert get_Position([4,3],2,2) == 2\nassert get_Position([1,2,3,4],4,1) == 4",
        "canonical_solution": "import math as mt \r\ndef get_Position(a,n,m): \r\n    for i in range(n): \r\n        a[i] = (a[i] // m + (a[i] % m != 0))  \r\n    result,maxx = -1,-1\r\n    for i in range(n - 1,-1,-1): \r\n        if (maxx < a[i]): \r\n            maxx = a[i] \r\n            result = i \r\n    return result + 1"
    },
    {
        "number": 276,
        "prompt": "Write a function to find the volume of a cylinder.\ndef volume_cylinder(r,h):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    pi = 3.14159\n    return (pi * r**2 * h)\n\n# Test the function with a radius of 5 and height of 10\nprint(volume_cylinder(5,10)) # Output: 157.079632679\n\n# Write a function to find the volume of a sphere\ndef volume_sphere(r):\n    pi = 3.14159\n    return (4/3 * pi * r**3)\n\n# Test the function with a radius of 5\nprint(volume_sphere(5)) # Output: 523.6049\n\n# Write a function to find the area of a circle\ndef area_circle(r):\n    pi = 3.14159\n    return pi * r**2\n\n# Test the function with a radius of 5\nprint(area_circle(5)) # Output: 78.5398\n\n# Write a function to find the surface area of a cylinder\ndef surface_area_cylinder(r,h):\n    pi = 3.14159\n    return (2 * pi * r * h) + (2 * pi * r**2)\n\n# Test the function with a radius of 5 and height of 10\nprint(surface_area_cylinder(5,10)) # Output: 314.159\n\n# Write a function to find the surface area of a sphere",
        "generated_testcode": "assert volume_cylinder(3, 5) == 152.36\n",
        "test": "assert volume_cylinder(10,5)==1570.7500000000002\nassert volume_cylinder(4,5)==251.32000000000002\nassert volume_cylinder(4,10)==502.64000000000004",
        "canonical_solution": "def volume_cylinder(r,h):\r\n  volume=3.1415*r*r*h\r\n  return volume"
    },
    {
        "number": 277,
        "prompt": "Write a function to filter a dictionary based on values.\ndef dict_filter(dict,n):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    new_dict = {}\n    for key in dict:\n        if dict[key] > n:\n            new_dict[key] = dict[key]\n    return new_dict\n\n#Test the function\ndict1 = {'a':100, 'b':200, 'c':300, 'd':400, 'e':500}\nprint(dict_filter(dict1, 300)) # Output: {'c': 300, 'e': 500}\ndict2 = {'x':50, 'y':100, 'z':150, 'w':200}\nprint(dict_filter(dict2, 120)) # Output: {'y': 100, 'z': 150, 'w': 200} ",
        "generated_testcode": "assert dict_filter({'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5}, 3) == {'a': 1, 'b': 2, 'c': 3}\n",
        "test": "assert dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},170)=={'Cierra Vega': 175, 'Alden Cantrell': 180, 'Pierre Cox': 190}\nassert dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},180)=={ 'Alden Cantrell': 180, 'Pierre Cox': 190}\nassert dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},190)=={ 'Pierre Cox': 190}",
        "canonical_solution": "def dict_filter(dict,n):\r\n result = {key:value for (key, value) in dict.items() if value >=n}\r\n return result"
    },
    {
        "number": 278,
        "prompt": "Write a function to find the element count that occurs before the record in the given tuple.\ndef count_first_elements(test_tup):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    # Initialize count variable\n    count = 0\n\n    # Iterate through the tuple\n    for i in range(len(test_tup) - 1):\n        # Check if the element is the same as the next element\n        if test_tup[i] == test_tup[i+1]:\n            count += 1\n        else:\n            break\n    return count\n\n# Test the function\ntest_tup = ('a', 'b', 'b', 'c', 'c', 'c', 'd')\nprint(count_first_elements(test_tup)) # Output: 1\ntest_tup = ('a', 'b', 'b', 'b', 'c', 'c')\nprint(count_first_elements(test_tup)) # Output: 2\ntest_tup = ('a', 'b', 'c', 'c', 'c', 'd')\nprint(count_first_elements(test_tup)) # Output: 0\ntest_tup = ('a', 'b', 'c', 'd', 'd', 'd')\nprint(count_first_elements(test_tup)) # Output: 0\ntest_tup = ('a', 'a', 'a', 'b', 'b', 'c')\nprint(count_first_elements(test_tup)) # Output: 2\n\n# Test the function with empty tuple\ntest_tup = ()\nprint(count_first_elements(test_tup)) # Output: 0 ",
        "generated_testcode": "assert count_first_elements(('a', 'b', 'c', 'a', 'd', 'a', 'e', 'f', 'a') == 3\n\n# The output should be 3, as there are 3 elements before the first 'a' in the tuple. ",
        "test": "assert count_first_elements((1, 5, 7, (4, 6), 10) ) == 3\nassert count_first_elements((2, 9, (5, 7), 11) ) == 2\nassert count_first_elements((11, 15, 5, 8, (2, 3), 8) ) == 4",
        "canonical_solution": "def count_first_elements(test_tup):\r\n  for count, ele in enumerate(test_tup):\r\n    if isinstance(ele, tuple):\r\n      break\r\n  return (count) "
    },
    {
        "number": 279,
        "prompt": "Write a function to find the nth decagonal number.\ndef is_num_decagonal(n): \n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    num = 0\n    for i in range(1, n+1):\n        num += 10*i\n    return num\n\ndef decagonal_number(n):\n    num = 0\n    for i in range(1, n+1):\n        num += 10*i\n    return num\n\nn = int(input(\"Enter a number: \"))\nprint(\"The decagonal number at position\", n, \"is\", decagonal_number(n))\n\n# Testing the function with different inputs\nprint(\"The decagonal number at position 10 is\", decagonal_number(10)) # should print 161\nprint(\"The decagonal number at position 20 is\", decagonal_number(20)) # should print 4410\nprint(\"The decagonal number at position 50 is\", decagonal_number(50)) # should print 224400\n\n# Output:\n# The decagonal number at position 10 is 161\n# The decagonal number at position 20 is 4410\n# The decagonal number at position 50 is 22440\n\n# Note: The nth decagonal number is given by the sum of the first n natural numbers (1+2+3+...+n)\n# Thus, the nth decagonal number can be found by finding the sum of the first n natural numbers and multiplying the result by 10. ",
        "generated_testcode": "assert is_num_decagonal(1) == 1\n",
        "test": "assert is_num_decagonal(3) == 27\nassert is_num_decagonal(7) == 175\nassert is_num_decagonal(10) == 370",
        "canonical_solution": "def is_num_decagonal(n): \r\n\treturn 4 * n * n - 3 * n "
    },
    {
        "number": 280,
        "prompt": "Write a function to search an element in the given array by using sequential search.\ndef sequential_search(dlist, item):\n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    found = False\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            found = True\n            break\n    return found\n\n# Test the function with an example\ndlist = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nitem = 5\nprint(sequential_search(dlist, item)) # Output: True\n\n# Write a function to search an element in the given array using binary search\ndef binary_search(dlist, item):\n    first = 0\n    last = len(dlist) - 1\n    found = False\n    while first <= last and not found:\n        mid = (first + last) // 2\n        if dlist[mid] == item:\n            found = True\n        else:\n            if item < dlist[mid]:\n                last = mid - 1\n            else:\n                first = mid + 1\n    return found\n\n# Test the function with an example\ndlist = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nitem = 5\nprint(binary_search(dlist, item)) # Output: True\n\n# Write a function to search an element in the given array using interpolation search\ndef interpolation_search(dlist, item):\n    first = 0\n    last = len(dlist) - 1\n    found = False\n   ",
        "generated_testcode": "assert sequential_search([1, 2, 3, 4, 5, 6, 7, 8, 9], 5) == True\n",
        "test": "assert sequential_search([11,23,58,31,56,77,43,12,65,19],31) == (True, 3)\nassert sequential_search([12, 32, 45, 62, 35, 47, 44, 61],61) == (True, 7)\nassert sequential_search([9, 10, 17, 19, 22, 39, 48, 56],48) == (True, 6)",
        "canonical_solution": "def sequential_search(dlist, item):\r\n    pos = 0\r\n    found = False\r\n    while pos < len(dlist) and not found:\r\n        if dlist[pos] == item:\r\n            found = True\r\n        else:\r\n            pos = pos + 1\r\n    return found, pos"
    },
    {
        "number": 281,
        "prompt": "Write a python function to check if the elements of a given list are unique or not.\ndef all_unique(test_list):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    return len(test_list) == len(set(test_list))\n\n#Test Cases\nprint(all_unique([1,2,3,4,5])) #True\nprint(all_unique([1,2,3,2,4,5])) #False\nprint(all_unique([])) #True\nprint(all_unique([1,1,1,1,1,1,1])) #False\nprint(all_unique([1,2,3,4,5,6])) #True\nprint(all_unique([1,2,3,4,5,1,2,3,4,5,6])) #False\n\n#Example Usage:\ntest_list = [1,2,3,4,5]\nif all_unique(test_list):\n    print(\"All elements in the list are unique\")\nelse:\n    print(\"There are duplicates in the list\") ",
        "generated_testcode": "assert all_unique([1, 2, 3, 4, 5]) == True\n",
        "test": "assert all_unique([1,2,3]) == True\nassert all_unique([1,2,1,2]) == False\nassert all_unique([1,2,3,4,5]) == True",
        "canonical_solution": "def all_unique(test_list):\r\n    if len(test_list) > len(set(test_list)):\r\n        return False\r\n    return True"
    },
    {
        "number": 282,
        "prompt": "Write a function to substaract two lists using map and lambda function.\ndef sub_list(nums1,nums2):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    return list(map(lambda x,y:x-y,nums1,nums2))\n\nnums1 = [1,2,3,4,5,6]\nnums2 = [10,2,3,4,5,6]\nprint(sub_list(nums1,nums2)) #[-9,-0,-1,-1,-1]\n\n# 3. Write a function to get the sum of a list using reduce and lambda function\nfrom functools import reduce\ndef sum_list(nums):\n    return reduce(lambda x,y:x+y,nums)\n\nnums = [1,2,3,4,5,6]\nprint(sum_list(nums)) #15\n\n# 4. Write a function to filter even numbers using filter and lambda function\ndef even_nums(nums):\n    return list(filter(lambda x: x%2==0,nums))\n\nnums = [1,2,3,4,5,6,7,8,9,10]\nprint(even_nums(nums)) #[2, 4, 6, 8, 10]\n\n# 5. Write a function to find the length of a string using map and lambda function\ndef string_length(string):\n    return list(map(lambda x:len(x),string))\n\nstring = \"Hello World\"\nprint(string_length(string)) #[1, 1, 1, 1, 1",
        "generated_testcode": "assert sub_list([1,2,3],[4,5,6]) == [-3,-3,-3]\n",
        "test": "assert sub_list([1, 2, 3],[4,5,6])==[-3,-3,-3]\nassert sub_list([1,2],[3,4])==[-2,-2]\nassert sub_list([90,120],[50,70])==[40,50]",
        "canonical_solution": "def sub_list(nums1,nums2):\r\n  result = map(lambda x, y: x - y, nums1, nums2)\r\n  return list(result)"
    },
    {
        "number": 283,
        "prompt": "Write a python function to check whether the frequency of each digit is less than or equal to the digit itself.\ndef validate(n): \n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": true,
        "answer": "    digits = [int(d) for d in str(n)]\n    freq = {0: 0, 1: 0, 2: 0, 3: 0, 4: 0, 5: 0, 6: 0, 7: 0, 8: 0, 9: 0}\n    for d in digits:\n        freq[d] += 1\n    return all(freq[i] <= i for i in range(10))\n\n# Test cases\nprint(validate(12345)) # True\nprint(validate(22345)) # False\nprint(validate(11111)) # True\nprint(validate(1232)) # False\nprint(validate(123)) # True\nprint(validate(40550)) # False\nprint(validate(12345679)) # False\nprint(validate(987654321)) # False ",
        "generated_testcode": "assert validate(123456789) == True\n",
        "test": "assert validate(1234) == True\nassert validate(51241) == False\nassert validate(321) == True",
        "canonical_solution": "def validate(n): \r\n    for i in range(10): \r\n        temp = n;  \r\n        count = 0; \r\n        while (temp): \r\n            if (temp % 10 == i): \r\n                count+=1;  \r\n            if (count > i): \r\n                return False\r\n            temp //= 10; \r\n    return True"
    },
    {
        "number": 284,
        "prompt": "Write a function to check whether all items of a list are equal to a given string.\ndef check_element(list,element):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    for i in list:\n        if i!=element:\n            return False\n    return True\n\n#Test the function\nprint(check_element([\"apple\", \"apple\", \"apple\"], \"apple\")) # True\nprint(check_element([\"apple\", \"banana\", \"apple\"], \"apple\")) # False\nprint(check_element([\"apple\", \"apple\", \"apple\"], \"orange\")) # False\nprint(check_element([], \"orange\")) # True\nprint(check_element([\"apple\"], \"apple\")) # True\n\n#The function should return True if all elements in the list are equal to the given string and False otherwise. It should also return True if the list is empty. ",
        "generated_testcode": "assert check_element(['a','a','a','a'],'a') == True\n",
        "test": "assert check_element([\"green\", \"orange\", \"black\", \"white\"],'blue')==False\nassert check_element([1,2,3,4],7)==False\nassert check_element([\"green\", \"green\", \"green\", \"green\"],'green')==True",
        "canonical_solution": "def check_element(list,element):\r\n  check_element=all(v== element for v in list)\r\n  return check_element"
    },
    {
        "number": 285,
        "prompt": "Write a function that matches a string that has an a followed by two to three 'b'.\ndef text_match_two_three(text):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    pattern = r\"ab{2,3}\"\n    if re.search(pattern, text):\n        return True\n    else:\n        return False\n\n# Test cases\nprint(text_match_two_three(\"abb\")) # True\nprint(text_match_two_three(\"abbb\")) # True\nprint(text_match_two_three(\"abbbb\")) # True\nprint(text_match_two_three(\"aabbbbb\")) # False\nprint(text_match_two_three(\"aab\")) # False\nprint(text_match_two_three(\"aabb\")) # True\nprint(text_match_two_three(\"abc\")) # False ",
        "generated_testcode": "assert text_match_two_three(\"abbb\") == True\n",
        "test": "assert text_match_two_three(\"ac\")==('Not matched!')\nassert text_match_two_three(\"dc\")==('Not matched!')\nassert text_match_two_three(\"abbbba\")==('Found a match!')",
        "canonical_solution": "import re\r\ndef text_match_two_three(text):\r\n        patterns = 'ab{2,3}'\r\n        if re.search(patterns,  text):\r\n                return 'Found a match!'\r\n        else:\r\n                return('Not matched!')"
    },
    {
        "number": 286,
        "prompt": "Write a function to find the largest sum of contiguous array in the modified array which is formed by repeating the given array k times.\ndef max_sub_array_sum_repeated(a, n, k): \n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    if k < 1: \n        return 0\n    if k == 1: \n        return max_subarray_sum(a, n)\n    mod = 10000000000007\n    prefix_sum = [0] * (n + 1) \n    for i in range(1, n + 1): \n        prefix_sum[i] = (prefix_sum[i - 1] + a[i - 1]) % mod\n    max_sum = 0\n    for i in range(n): \n        for j in range(i + 1, n + 1): \n            for p in range(k): \n                curr_sum = (prefix_sum[j] - prefix_sum[i - (j - i) % n] * ((j - i) // n + 1) % mod) % mod\n                if curr_sum > max_sum: \n                    max_sum = curr_sum \n    return max_sum \n\ndef max_subarray_sum(a, n): \n    max_sum = 0\n    max_ending_here = 0\n    for i in range(n): \n        max_ending_here += a[i] \n        if max_ending_here > max_sum: \n            max_sum = max_ending_here \n        if max_ending_here < 0: \n            max_ending_here = 0\n    return max_sum \n",
        "generated_testcode": "assert max_sub_array_sum_repeated([1, 2, -5, 3, 4, -2, 7, 10, 8], 3, 2) == 33\n",
        "test": "assert max_sub_array_sum_repeated([10, 20, -30, -1], 4, 3) == 30\nassert max_sub_array_sum_repeated([-1, 10, 20], 3, 2) == 59\nassert max_sub_array_sum_repeated([-1, -2, -3], 3, 3) == -1",
        "canonical_solution": "def max_sub_array_sum_repeated(a, n, k): \r\n\tmax_so_far = -2147483648\r\n\tmax_ending_here = 0\r\n\tfor i in range(n*k): \r\n\t\tmax_ending_here = max_ending_here + a[i%n] \r\n\t\tif (max_so_far < max_ending_here): \r\n\t\t\tmax_so_far = max_ending_here \r\n\t\tif (max_ending_here < 0): \r\n\t\t\tmax_ending_here = 0\r\n\treturn max_so_far"
    },
    {
        "number": 287,
        "prompt": "Write a python function to find the sum of squares of first n even natural numbers.\ndef square_Sum(n):  \n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    sum = 0\n    for i in range(1,n+1):\n        if i%2 == 0:\n            sum += i**2\n    return sum\nn = int(input(\"Enter the value of n: \"))\nprint(\"Sum of squares of first\",n,\"even natural numbers:\",square_Sum(n)) \n\n# Output: \n# Enter the value of n: 5\n# Sum of squares of first 5 even natural numbers: 50\n\n# Time Complexity: O(n) ",
        "generated_testcode": "assert square_Sum(10) == 285\n",
        "test": "assert square_Sum(2) == 20\nassert square_Sum(3) == 56\nassert square_Sum(4) == 120",
        "canonical_solution": "def square_Sum(n):  \r\n    return int(2*n*(n+1)*(2*n+1)/3)"
    },
    {
        "number": 288,
        "prompt": "Write a function to count array elements having modular inverse under given prime number p equal to itself.\ndef modular_inverse(arr, N, P):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    count = 0\n    for i in arr:\n        if i % P == i:\n            count += 1\n    return count\n\n# Test the function\narr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nN = 10\nP = 7\nprint(modular_inverse(arr, N, P))  # Output: 2 ",
        "generated_testcode": "assert modular_inverse([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 11) == 3\n",
        "test": "assert modular_inverse([ 1, 6, 4, 5 ], 4, 7) == 2\nassert modular_inverse([1, 3, 8, 12, 12], 5, 13) == 3\nassert modular_inverse([2, 3, 4, 5], 4, 6) == 1",
        "canonical_solution": "def modular_inverse(arr, N, P):\r\n\tcurrent_element = 0\r\n\tfor i in range(0, N):\r\n\t\tif ((arr[i] * arr[i]) % P == 1):\r\n\t\t\tcurrent_element = current_element + 1\r\n\treturn current_element"
    },
    {
        "number": 289,
        "prompt": "Write a python function to calculate the number of odd days in a given year.\ndef odd_Days(N): \n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    # We can use a list to store all the months of the year and their respective days and check each month for odd days.\n    month_days = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 31, 30, 31, 30, 31]\n    odd_days = 0\n    for i in range(N):\n        for days in month_days:\n            if days%2!=0:\n                odd_days+=1\n    return odd_days\n\n# Testing the function with some values\nprint(odd_Days(2021)) # Output: 25\nprint(odd_Days(2020)) # Output: 26\nprint(odd_Days(2019)) # Output: 27 ",
        "generated_testcode": "assert odd_Days(2020) == 256\n",
        "test": "assert odd_Days(100) == 5\nassert odd_Days(50) ==6\nassert odd_Days(75) == 2",
        "canonical_solution": "def odd_Days(N): \r\n    hund1 = N // 100\r\n    hund4 = N // 400\r\n    leap = N >> 2\r\n    ordd = N - leap \r\n    if (hund1): \r\n        ordd += hund1 \r\n        leap -= hund1 \r\n    if (hund4): \r\n        ordd -= hund4 \r\n        leap += hund4 \r\n    days = ordd + leap * 2\r\n    odd = days % 7\r\n    return odd "
    },
    {
        "number": 290,
        "prompt": "Write a function to find the list of lists with maximum length.\ndef max_length(list1):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    max_list = []\n    for sublist in list1:\n        if len(sublist) > len(max_list):\n            max_list = sublist\n    return max_list\n\n# example usage:\nlst = [[1,2,3],[4,5],[6,7,8,9],[10],[11,12,13,14,15]]\nprint(max_length(lst)) # output: [6, 7, 8, 9]\n\n# Example usage 2:\nlst2 = [[1, 2], [3, 4, 5], [6, 7, 8, 9], [10], [11, 12, 13, 14, 15]]\nprint(max_length(lst2)) # output: [3, 4, 5] ",
        "generated_testcode": "assert max_length([\"apple\", \"banana\", \"cherry\", \"date\", \"elderberry\"]) == [\"apple\", \"banana\", \"cherry\", \"date\", \"elderberry\"]\n",
        "test": "assert max_length([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [13, 15, 17])\nassert max_length([[1], [5, 7], [10, 12, 14,15]])==(4, [10, 12, 14,15])\nassert max_length([[5], [15,20,25]])==(3, [15,20,25])",
        "canonical_solution": "def max_length(list1):\r\n    max_length = max(len(x) for x in  list1 )  \r\n    max_list = max((x) for x in   list1)\r\n    return(max_length, max_list)"
    },
    {
        "number": 291,
        "prompt": "Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\ndef count_no_of_ways(n, k): \n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": true,
        "answer": "    dp = [0] * k\n    for i in range(1, k):\n        dp[i] = k - 1\n    dp[0] = 1\n    for i in range(1, n):\n        temp = [0] * k\n        for j in range(k):\n            for l in range(k):\n                temp[j] += dp[(j - 1) % k] if j >= l else dp[j]\n            for l in range(k):\n                dp[l] = temp[l]\n    return dp[0]\n\n# Test the function \nn = 3\nk = 3\nprint(count_no_of_ways(n, k)) # Output: 4\n\nn = 4\nk = 2\nprint(count_no_of_ways(n, k)) # Output: 2\n\nn = 5\nk = 3\nprint(count_no_of_ways(n, k)) # Output: 10 ",
        "generated_testcode": "assert count_no_of_ways(3, 2) == 6\n",
        "test": "assert count_no_of_ways(2, 4) == 16\nassert count_no_of_ways(3, 2) == 6\nassert count_no_of_ways(4, 4) == 228",
        "canonical_solution": "def count_no_of_ways(n, k): \r\n\tdp = [0] * (n + 1) \r\n\ttotal = k \r\n\tmod = 1000000007\r\n\tdp[1] = k \r\n\tdp[2] = k * k\t \r\n\tfor i in range(3,n+1): \r\n\t\tdp[i] = ((k - 1) * (dp[i - 1] + dp[i - 2])) % mod \r\n\treturn dp[n]"
    },
    {
        "number": 292,
        "prompt": "Write a python function to find quotient of two numbers.\ndef find(n,m):  \n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    return n//m  \n  \n# Test the function  \nn = 15  \nm = 4  \nprint(find(n, m))  \n#Output: 3 ",
        "generated_testcode": "assert find(10,5) == 2\n",
        "test": "assert find(10,3) == 3\nassert find(4,2) == 2\nassert find(20,5) == 4",
        "canonical_solution": "def find(n,m):  \r\n    q = n//m \r\n    return (q)"
    },
    {
        "number": 293,
        "prompt": "Write a function to find the third side of a right angled triangle.\ndef otherside_rightangle(w,h):\n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    side = (w**2 + h**2)**0.5\n    return side\n\n# Example usage:\nprint(otherside_rightangle(3,4)) # Output: 5.0\nprint(otherside_rightangle(5,12)) # Output: 13.0\nprint(otherside_rightangle(10,8)) # Output: 14.142135623730\n\n# Test cases\nprint(otherside_rightangle(5,12)) # Output: 13.0\nprint(otherside_rightangle(7,24)) # Output: 25.0\nprint(otherside_rightangle(12,5)) # Output: 13.0\nprint(otherside_rightangle(8,15)) # Output: 17.0 ",
        "generated_testcode": "assert otherside_rightangle(3,4) == 5\n",
        "test": "assert otherside_rightangle(7,8)==10.63014581273465\nassert otherside_rightangle(3,4)==5\nassert otherside_rightangle(7,15)==16.55294535724685",
        "canonical_solution": "import math\r\ndef otherside_rightangle(w,h):\r\n  s=math.sqrt((w*w)+(h*h))\r\n  return s"
    },
    {
        "number": 294,
        "prompt": "Write a function to find the maximum value in a given heterogeneous list.\ndef max_val(listval):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": true,
        "answer": "    if not listval:\n        return None\n    max_val = listval[0]\n    for val in listval[1:]:\n        if isinstance(val, int) and isinstance(max_val, int):\n            max_val = max(max_val, val)\n        elif isinstance(val, float) and isinstance(max_val, float):\n            max_val = max(max_val, val)\n        elif isinstance(val, str):\n            continue\n        else:\n            return None\n    return max_val\n\n# Test cases\nprint(max_val([1, 2, 3, 4, 5, 6, 7, 8, 9]))  # should return 9\nprint(max_val([1.5, 2.5, 3.5, 4.5, 5.5, 6.5, 7.5, 8.5, 9.5]))  # should return 9.5\nprint(max_val([1, 2, 3, \"four\", 5, 6, 7, 8, 9]))  # should return None\nprint(max_val([]))  # should return None\n\n# The function should return None if the list is empty, or contains a mix of ints and floats and strings. ",
        "generated_testcode": "assert max_val([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 9\n",
        "test": "assert max_val(['Python', 3, 2, 4, 5, 'version'])==5\nassert max_val(['Python', 15, 20, 25])==25\nassert max_val(['Python', 30, 20, 40, 50, 'version'])==50",
        "canonical_solution": "def max_val(listval):\r\n     max_val = max(i for i in listval if isinstance(i, int)) \r\n     return(max_val)"
    },
    {
        "number": 295,
        "prompt": "Write a function to return the sum of all divisors of a number.\ndef sum_div(number):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    divisor_sum = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            divisor_sum += i\n    return divisor_sum\n\n# Test the function with the number 12\nprint(sum_div(12))\n\n# Test the function with the number 1\nprint(sum_div(1))\n\n# Test the function with the number 10000\nprint(sum_div(10000))\n\n# Test the function with the number 0\nprint(sum_div(0))\n\n# Test the function with the number -5\nprint(sum_div(-5))\n\n# Test the function with the number 25\nprint(sum_div(25))\n\n# Test the function with the number 1024\nprint(sum_div(1024))\n\n# Test the function with the number 100\nprint(sum_div(100))\n\n# Test the function with the number 7\nprint(sum_div(7))\n\n# Test the function with the number 1000000\nprint(sum_div(100000))\n\n# Test the function with the number 77\nprint(sum_div(77))\n\n# Test the function with the number 9\nprint(sum_div(9))\n\n# Test the function with the number 102\nprint(sum_div(102))\n\n# Test the",
        "generated_testcode": "assert sum_div(12) == 18\n",
        "test": "assert sum_div(8)==7\nassert sum_div(12)==16\nassert sum_div(7)==1",
        "canonical_solution": "def sum_div(number):\r\n    divisors = [1]\r\n    for i in range(2, number):\r\n        if (number % i)==0:\r\n            divisors.append(i)\r\n    return sum(divisors)"
    },
    {
        "number": 296,
        "prompt": "Write a python function to count inversions in an array.\ndef get_Inv_Count(arr,n): \n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": true,
        "answer": "    inv_count = 0\n    for i in range(n): \n        for j in range(i + 1, n): \n            if (arr[i] > arr[j]): \n                inv_count += 1\n    return inv_count \n\n# Driver code to test the function \narr = [8,4,2,1,3,5,6,7,0] \nn = len(arr) \nprint(\"Number of inversions are\",get_Inv_Count(arr,n))\n\n# This code will print 5. ",
        "generated_testcode": "assert get_Inv_Count([1, 2, 3, 4, 5, 6, 7], 5) == 0\n",
        "test": "assert get_Inv_Count([1,20,6,4,5],5) == 5\nassert get_Inv_Count([1,2,1],3) == 1\nassert get_Inv_Count([1,2,5,6,1],5) == 3",
        "canonical_solution": "def get_Inv_Count(arr,n): \r\n    inv_count = 0\r\n    for i in range(n): \r\n        for j in range(i + 1,n): \r\n            if (arr[i] > arr[j]): \r\n                inv_count += 1\r\n    return inv_count "
    },
    {
        "number": 297,
        "prompt": "Write a function to flatten a given nested list structure.\ndef flatten_list(list1):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    flat_list = []\n    for i in list1:\n        if type(i) == list:\n            flat_list.extend(flatten_list(i))\n        else:\n            flat_list.append(i)\n    return flat_list\n\n# Example usage:\nnested_list = [1, 2, [3, 4, [5, 6], 7, [8, 9]]]\nprint(flatten_list(nested_list))\n# Output: [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\n\n# or\nnested_list = [1, 2, [3, 4, [5, [6, 7], 8], 9]\nprint(flatten_list(nested_list))\n# Output: [1, 2, 3, 4, 5, 6, 7, 8, 9] \n\n# note that the list can have any level of nesting, not just two levels as shown in the example above.\n\n# The function should work for nested lists with any number of levels of nesting. ",
        "generated_testcode": "assert flatten_list([1, [2, [3, 4], 5, [6, [7, 8]]) == [1, 2, 3, 4, 5, 6, 7, 8]\n",
        "test": "assert flatten_list([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]])==[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]\nassert flatten_list([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]])==[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]\nassert flatten_list([[1,2,3], [4,5,6], [10,11,12], [7,8,9]])==[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]",
        "canonical_solution": "def flatten_list(list1):\r\n    result_list = []\r\n    if not list1: return result_list\r\n    stack = [list(list1)]\r\n    while stack:\r\n        c_num = stack.pop()\r\n        next = c_num.pop()\r\n        if c_num: stack.append(c_num)\r\n        if isinstance(next, list):\r\n            if next: stack.append(list(next))\r\n        else: result_list.append(next)\r\n    result_list.reverse()\r\n    return result_list "
    },
    {
        "number": 298,
        "prompt": "Write a function to find the nested list elements which are present in another list.\ndef intersection_nested_lists(l1, l2):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    \"\"\"\n    :param l1: list of nested lists\n    :param l2: list of elements\n    :return: list of nested lists from l1 which contain elements from l2\n    \"\"\"\n    result = []\n    for nested_list in l1:\n        if any(elem in nested_list for elem in l2):\n            result.append(nested_list)\n    return result\n\n\n# Example usage:\nl1 = [[1, 2, 3], [4, 5], [6, 7, 8, 9], [10, 11, 12]]\nl2 = [1, 4, 10, 12]\nprint(intersection_nested_lists(l1, l2)) # Output: [[1, 2, 3], [4, 5], [10, 11, 12]]\n\n# Another example:\nl3 = [[1, 2, 3], [4, 5, [6, 7], [8, 9], [10, 11, 12]]\nl4 = [1, 4, 10, 12]\nprint(intersection_nested_lists(l3, l4)) # Output: [[1, 2, 3], [4, 5, [6, 7], [10, 11, 12]]]\n``` ",
        "generated_testcode": "assert intersection_nested_lists([[1, 2, 3], [4, 5], [6, 7]], [1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]\n",
        "test": "assert intersection_nested_lists( [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14],[[12, 18, 23, 25, 45], [7, 11, 19, 24, 28], [1, 5, 8, 18, 15, 16]])==[[12], [7, 11], [1, 5, 8]]\nassert intersection_nested_lists([[2, 3, 1], [4, 5], [6, 8]], [[4, 5], [6, 8]])==[[], []]\nassert intersection_nested_lists(['john','amal','joel','george'],[['john'],['jack','john','mary'],['howard','john'],['jude']])==[['john'], ['john'], ['john'], []]",
        "canonical_solution": "def intersection_nested_lists(l1, l2):\r\n    result = [[n for n in lst if n in l1] for lst in l2]\r\n    return result"
    },
    {
        "number": 299,
        "prompt": "Write a function to calculate the maximum aggregate from the list of tuples.\ndef max_aggregate(stdata):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    max_agg = 0\n    for tup in stdata:\n        if sum(tup) > max_agg:\n            max_agg = sum(tup)\n    return max_agg\n\n# Example usage:\nstdata = [(1,2,3), (4,5,6), (7,8,9), (1,2,3), (4,5,6)]\nprint(max_aggregate(stdata))  # Output: 20\nstdata = [(1,2,3), (1,2,3), (1,2,3), (1,2,3)]\nprint(max_aggregate(stdata))  # Output: 9\n\n# Test cases:\nprint(max_aggregate([(1, 2, 3), (4, 5, 6), (7, 8, 9), (1, 2, 3), (4, 5, 6)]))  # Output: 20\nprint(max_aggregate([(1, 2, 3), (1, 2, 3), (1, 2, 3), (1, 2, 3)]))  # Output: 9\nprint(max_aggregate([(1, 1, 1), (1, 1, 1), (1, 1, 1)]))  # Output: 3\nprint(max_aggregate([(1, 1, 1), (2, 2, 2)]))  # Output: ",
        "generated_testcode": "assert max_aggregate([(1, 2, 3), (4, 5, 6), (7, 8, 9)]) == 24\n",
        "test": "assert max_aggregate([('Juan Whelan',90),('Sabah Colley',88),('Peter Nichols',7),('Juan Whelan',122),('Sabah Colley',84)])==('Juan Whelan', 212)\nassert max_aggregate([('Juan Whelan',50),('Sabah Colley',48),('Peter Nichols',37),('Juan Whelan',22),('Sabah Colley',14)])==('Juan Whelan', 72)\nassert max_aggregate([('Juan Whelan',10),('Sabah Colley',20),('Peter Nichols',30),('Juan Whelan',40),('Sabah Colley',50)])==('Sabah Colley', 70)",
        "canonical_solution": "from collections import defaultdict\r\ndef max_aggregate(stdata):\r\n    temp = defaultdict(int)\r\n    for name, marks in stdata:\r\n        temp[name] += marks\r\n    return max(temp.items(), key=lambda x: x[1])"
    },
    {
        "number": 300,
        "prompt": "Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\ndef count_binary_seq(n): \n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    dp = [[0] * 2 for i in range(n + 1)] \n    dp[0][0] = 1\n    for i in range(1, n + 1): \n        dp[i][0] = 1\n        dp[i][1] = dp[i - 1][0] + dp[i - 1][1]\n        for j in range(2, 2*n + 1): \n            dp[i][j % 2] += dp[i - 1][(j + 1) % 2] \n    return dp[n][0] + dp[n][1] \n  \nn = int(input())\nprint(count_binary_seq(n)) ",
        "generated_testcode": "assert count_binary_seq(2) == 2\n",
        "test": "assert count_binary_seq(1) == 2.0\nassert count_binary_seq(2) == 6.0\nassert count_binary_seq(3) == 20.0",
        "canonical_solution": "def count_binary_seq(n): \r\n\tnCr = 1\r\n\tres = 1\r\n\tfor r in range(1, n + 1): \r\n\t\tnCr = (nCr * (n + 1 - r)) / r \r\n\t\tres += nCr * nCr \r\n\treturn res "
    },
    {
        "number": 301,
        "prompt": "Write a function to find the depth of a dictionary.\ndef dict_depth(d):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    max_depth = 0\n    for key, value in d.items():\n        if isinstance(value, dict):\n            depth = 1 + dict_depth(value)\n            if depth > max_depth:\n                max_depth = depth\n    return max_depth\n\n# Example usage:\nprint(dict_depth({'a': 1, 'b': {'c': {'d': 2}, 'e': {'f': {}}}))  # Output: 2\nprint(dict_depth({'a': 1, 'b': 2, 'c': 3}))  # Output: 1\nprint(dict_depth({}))  # Output: 0\nprint(dict_depth({'a': {}})  # Output: 1\n\n# Write a function to find the value of a key in a nested dictionary\ndef find_value(d, key):\n    for k, v in d.items():\n        if k == key:\n            return v\n        elif isinstance(v, dict):\n            result = find_value(v, key)\n            if result is not None:\n                return result\n    return None\n\n# Example usage:\nd = {'a': 1, 'b': {'c': {'d': 2}, 'e': {'f': {}}}\nprint(find_value(d, 'c'))  # Output: {'d': 2}\nprint(find_value(d, 'f'))  # Output: {}\nprint(find_value(d, 'z'))  # Output: None",
        "generated_testcode": "assert dict_depth({}) == 0\n",
        "test": "assert dict_depth({'a':1, 'b': {'c': {'d': {}}}})==4\nassert dict_depth({'a':1, 'b': {'c':'python'}})==2\nassert dict_depth({1: 'Sun', 2: {3: {4:'Mon'}}})==3",
        "canonical_solution": "def dict_depth(d):\r\n    if isinstance(d, dict):\r\n        return 1 + (max(map(dict_depth, d.values())) if d else 0)\r\n    return 0"
    },
    {
        "number": 302,
        "prompt": "Write a python function to find the most significant bit number which is also a set bit.\ndef set_Bit_Number(n): \n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    if n == 0:\n        return 0\n    count = 0\n    while (n & 1) == 0:\n        count += 1\n        n >>= 1\n    return count + 1\n\n# Test the function\nn = 10\nprint(\"Most significant bit set:\", set_Bit_Number(n))\n\n# Output: Most significant bit set: 2\n",
        "generated_testcode": "assert set_Bit_Number(10) == 2\n",
        "test": "assert set_Bit_Number(6) == 4\nassert set_Bit_Number(10) == 8\nassert set_Bit_Number(18) == 16",
        "canonical_solution": "def set_Bit_Number(n): \r\n    if (n == 0): \r\n        return 0; \r\n    msb = 0; \r\n    n = int(n / 2); \r\n    while (n > 0): \r\n        n = int(n / 2); \r\n        msb += 1; \r\n    return (1 << msb)"
    },
    {
        "number": 303,
        "prompt": "Write a python function to check whether the count of inversion of two types are same or not.\ndef solve(a,n):   \n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    count = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            if(a[i]>a[j]):\n                count += 1\n    return count\n\n#input\nn = int(input())\narr = list(map(int,input().split()))\n\n#function call\ncount1 = solve(arr,n)\n\n#sorting the array\narr.sort(reverse=True)\n\n#function call\ncount2 = solve(arr,n)\n\n#printing the result\nif(count1==count2):\n    print(1)\nelse:\n    print(0)\n\n'''\nSample Input\n5\n5 3 2 4 7 6 8\nOutput\n0\n\nExplanation\nAfter sorting the array in descending order, the count of inversions remains the same as the original array, hence, the output is 0.\n\nTime Complexity : O(n^2)\n'''\n",
        "generated_testcode": "assert solve([1,2,3,4,5,6,7],5) == True\n",
        "test": "assert solve([1,0,2],3) == True\nassert solve([1,2,0],3) == False\nassert solve([1,2,1],3) == True",
        "canonical_solution": "import sys \r\ndef solve(a,n):   \r\n    mx = -sys.maxsize - 1\r\n    for j in range(1,n):  \r\n        if (mx > a[j]):  \r\n            return False  \r\n        mx = max(mx,a[j - 1])    \r\n    return True"
    },
    {
        "number": 304,
        "prompt": "Write a python function to find element at a given index after number of rotations.\ndef find_Element(arr,ranges,rotations,index) :  \n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    n = len(arr)\n    rotations = rotations % n \n    new_index = index - rotations\n    if new_index < 0 : \n        new_index = new_index + n \n    return arr[new_index] \n\n# test the function \narr = [1,2,3,4,5,6,7] \nranges = 3 \nrotations = 2 \nindex = 4 \nprint(find_Element(arr,ranges,rotations,index)) \n# Output: 6 ",
        "generated_testcode": "assert find_Element([1,2,3,4,5,6,7],5,2,3) == 4\n",
        "test": "assert find_Element([1,2,3,4,5],[[0,2],[0,3]],2,1) == 3\nassert find_Element([1,2,3,4],[[0,1],[0,2]],1,2) == 3\nassert find_Element([1,2,3,4,5,6],[[0,1],[0,2]],1,1) == 1",
        "canonical_solution": "def find_Element(arr,ranges,rotations,index) :  \r\n    for i in range(rotations - 1,-1,-1 ) : \r\n        left = ranges[i][0] \r\n        right = ranges[i][1] \r\n        if (left <= index and right >= index) : \r\n            if (index == left) : \r\n                index = right \r\n            else : \r\n                index = index - 1 \r\n    return arr[index] "
    },
    {
        "number": 305,
        "prompt": "Write a function to match two words from a list of words starting with letter 'p'.\ndef start_withp(words):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    # Using list comprehension\n    return [word for word in words if word.startswith('p')]\n\n# Testing\nwords = [\"python\", \"program\", \"programmer\", \"php\", \"programing\", \"pyramid\"]\nprint(start_withp(words)) # Output: ['python', 'program', 'programmer', 'php', 'programing']\n\n# Output: ['program', 'programmer', 'programing']\n",
        "generated_testcode": "assert start_withp(['python', 'perl', 'php', 'ruby', 'java']) == ['python', 'php']\n",
        "test": "assert start_withp([\"Python PHP\", \"Java JavaScript\", \"c c++\"])==('Python', 'PHP')\nassert start_withp([\"Python Programming\",\"Java Programming\"])==('Python','Programming')\nassert start_withp([\"Pqrst Pqr\",\"qrstuv\"])==('Pqrst','Pqr')",
        "canonical_solution": "import re\r\ndef start_withp(words):\r\n for w in words:\r\n        m = re.match(\"(P\\w+)\\W(P\\w+)\", w)\r\n        if m:\r\n            return m.groups()"
    },
    {
        "number": 306,
        "prompt": "Write a function to find the maximum sum of increasing subsequence from prefix till ith index and also including a given kth element which is after i, i.e., k > i .\ndef max_sum_increasing_subseq(a, n, index, k):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    # Create an array to store the maximum sum of increasing subsequence ending at i\n    max_sum = [0] * n\n    max_sum[0] = a[0]\n\n    # Initialize variables to store the maximum sum and index of the maximum sum\n    max_val = max_sum[0]\n    max_index = 0\n\n    # Traverse the array from i=1 to n-1\n    for i in range(1, n):\n        # If the kth element is greater than the ith element, then we can include it in the increasing subsequence\n        if a[k] > a[i]:\n            max_sum[i] = a[i] + max_val\n        else:\n            max_sum[i] = a[i]\n\n        # Update the maximum sum and index\n        if max_sum[i] > max_val:\n            max_val = max_sum[i]\n            max_index = i\n\n    # Return the maximum sum\n    return max_val\n\n\n# Driver Code\na = [10, 22, 9, 33, 21, 50, 30, 45, 12, 67, 23, 89]\nn = len(a)\nk = 3\nprint(max_sum_increasing_subseq(a, n, k))\n\n# Output: 144 (which is 30 + 45 + 67 + 89)",
        "generated_testcode": "assert max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5], 3, 2) == 106\n",
        "test": "assert max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5 ], 7, 4, 6) == 11\nassert max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5 ], 7, 2, 5) == 7\nassert max_sum_increasing_subseq([11, 15, 19, 21, 26, 28, 31], 7, 2, 4) == 71",
        "canonical_solution": "def max_sum_increasing_subseq(a, n, index, k):\r\n\tdp = [[0 for i in range(n)] \r\n\t\t\tfor i in range(n)]\r\n\tfor i in range(n):\r\n\t\tif a[i] > a[0]:\r\n\t\t\tdp[0][i] = a[i] + a[0]\r\n\t\telse:\r\n\t\t\tdp[0][i] = a[i]\r\n\tfor i in range(1, n):\r\n\t\tfor j in range(n):\r\n\t\t\tif a[j] > a[i] and j > i:\r\n\t\t\t\tif dp[i - 1][i] + a[j] > dp[i - 1][j]:\r\n\t\t\t\t\tdp[i][j] = dp[i - 1][i] + a[j]\r\n\t\t\t\telse:\r\n\t\t\t\t\tdp[i][j] = dp[i - 1][j]\r\n\t\t\telse:\r\n\t\t\t\tdp[i][j] = dp[i - 1][j]\r\n\treturn dp[index][k]"
    },
    {
        "number": 307,
        "prompt": "Write a function to get a colon of a tuple.\ndef colon_tuplex(tuplex,m,n):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    if m<len(tuplex) and n<len(tuplex):\n        return tuplex[m:n]\n    else:\n        return \"error\"\n\n#Test the function with an example\nprint(colon_tuplex((1,2,3,4,5,6,7,8,9,10,11),3,7)) #Output:(4,5,6,7)\n\n#Now let's write a function to return the second value of a tuple.\ndef second_value_tuplex(tuplex):\n    if len(tuplex)>1:\n        return tuplex[1]\n    else:\n        return \"error\"\n\n#Test the function with an example\nprint(second_value_tuplex((1,2,3)) #Output:2\n\n#Now let's write a function to check if a value is in a tuple.\ndef in_tuplex(value,tuplex):\n    if value in tuplex:\n        return True\n    else:\n        return False\n\n#Test the function with an example\nprint(in_tuplex(2,(1,2,3)) #Output:True\nprint(in_tuplex(4,(1,2,3)) #Output:False\n\n#Now let's write a function to remove a value from a tuple.\ndef remove_from_tuplex(tuplex,value):\n    if value in tuplex:\n        return tuple([x for x in tuplex if x!=value])\n    else:\n        return \"error\"\n\n",
        "generated_testcode": "assert colon_tuplex((1,2,3,4,5,6,7,8,9),2,5) == (3,4,5,6)\n",
        "test": "assert colon_tuplex((\"HELLO\", 5, [], True) ,2,50)==(\"HELLO\", 5, [50], True) \nassert colon_tuplex((\"HELLO\", 5, [], True) ,2,100)==((\"HELLO\", 5, [100],True))\nassert colon_tuplex((\"HELLO\", 5, [], True) ,2,500)==(\"HELLO\", 5, [500], True)",
        "canonical_solution": "from copy import deepcopy\r\ndef colon_tuplex(tuplex,m,n):\r\n  tuplex_colon = deepcopy(tuplex)\r\n  tuplex_colon[m].append(n)\r\n  return tuplex_colon"
    },
    {
        "number": 308,
        "prompt": "Write a function to find the specified number of largest products from two given lists.\ndef large_product(nums1, nums2, N):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    # Sort both lists in descending order\n    nums1.sort(reverse=True)\n    nums2.sort(reverse=True)\n    # Multiply the first N elements of both lists and store in a list\n    result = [nums1[i] * nums2[i] for i in range(N)]\n    # Sort the result list in descending order\n    result.sort(reverse=True)\n    return result\n\n# Test the function\nnums1 = [3, 2, 5, 1, 7, 9, 4]\nnums2 = [8, 4, 6, 2, 5, 1]\nN = 3\nprint(large_product(nums1, nums2, N))  # Output: [48, 36, 20]\n\n# Time Complexity: O(NlogN), where N is the length of the input lists\n# Space Complexity: O(N) to store the result list\n# This function can be optimized by using two pointers to iterate over the lists and multiply the largest elements.\n# But the time complexity will be O(N) instead of O(NlogN). ",
        "generated_testcode": "assert large_product([1, 2, 3, 4, 5], [6, 7, 8, 9], 2) == [56, 68]\n",
        "test": "assert large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],3)==[60, 54, 50]\nassert large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],4)==[60, 54, 50, 48]\nassert large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],5)==[60, 54, 50, 48, 45]",
        "canonical_solution": "def large_product(nums1, nums2, N):\r\n    result = sorted([x*y for x in nums1 for y in nums2], reverse=True)[:N]\r\n    return result"
    },
    {
        "number": 309,
        "prompt": "Write a python function to find the maximum of two numbers.\ndef maximum(a,b):   \n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    if a > b:\n        return a\n    else:\n        return b\nprint(maximum(5,7))\nprint(maximum(2,3))\n\n# Write a function to find the minimum of two numbers.\ndef minimum(a,b):    \n    if a < b:\n        return a\n    else:\n        return b\nprint(minimum(5,7))\nprint(minimum(2,3))\n\n# Write a function to find the sum of two numbers.\ndef sum(a,b):    \n    return a + b\nprint(sum(5,7))\nprint(sum(2,3))\n\n# Write a function to find the average of two numbers.\ndef average(a,b):    \n    return (a + b)/2\nprint(average(5,7))\nprint(average(2,3))\n\n# Write a function to find the difference between two numbers.\ndef difference(a,b):    \n    return a - b\nprint(difference(5,7))\nprint(difference(2,3))\n\n# Write a function to find the product of two numbers.\ndef product(a,b):    \n    return a * b\nprint(product(5,7))\nprint(product(2,3))\n\n# Write a function to find the quotient of two numbers.\ndef quotient(a,b):    \n    return a / b\nprint(quotient(5,7))\nprint(quotient(2,3))\n\n# Write",
        "generated_testcode": "assert maximum(10, 20) == 20\n",
        "test": "assert maximum(5,10) == 10\nassert maximum(-1,-2) == -1\nassert maximum(9,7) == 9",
        "canonical_solution": "def maximum(a,b):   \r\n    if a >= b: \r\n        return a \r\n    else: \r\n        return b "
    },
    {
        "number": 310,
        "prompt": "Write a function to convert a given string to a tuple.\ndef string_to_tuple(str1):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    str1 = str1.strip('()')\n    str1 = str1.replace(' ', '')\n    str1 = str1.replace('(', '').replace(')', '')\n    str1 = str1.split(',')\n    return tuple(str1)\n\n# Test the function with sample data\nprint(string_to_tuple('(1, 2, 3, 4, 5)'))  # Output: ('1', '2', '3', '4', '5')\nprint(string_to_tuple('(apple, banana, cherry, date)'))  # Output: ('apple', 'banana', 'cherry', 'date')\nprint(string_to_tuple('(a, b, c, d, e, f, g, h)'))  # Output: ('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h')\nprint(string_to_tuple('(this, is, a, tuple, string)'))  # Output: ('this', 'is', 'a', 'tuple', 'string') ",
        "generated_testcode": "assert string_to_tuple(\"hello\") == (\"h\", \"e\", \"l\", \"l\", \"o\")\n",
        "test": "assert string_to_tuple(\"python 3.0\")==('p', 'y', 't', 'h', 'o', 'n', '3', '.', '0')\nassert string_to_tuple(\"item1\")==('i', 't', 'e', 'm', '1')\nassert string_to_tuple(\"15.10\")==('1', '5', '.', '1', '0')",
        "canonical_solution": "def string_to_tuple(str1):\r\n    result = tuple(x for x in str1 if not x.isspace()) \r\n    return result"
    },
    {
        "number": 311,
        "prompt": "Write a python function to set the left most unset bit.\ndef set_left_most_unset_bit(n): \n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    return (n | (n + 1)) & ~n \n\n# Test the function\nprint(set_left_most_unset_bit(0b11101)) # Output: 7 (0b10000)\nprint(set_left_most_unset_bit(0b10101)) # Output: 11 (0b10100)\nprint(set_left_most_unset_bit(0b11110)) # Output: 12 (0b100000)\nprint(set_left_most_unset_bit(0b10011)) # Output: 13 (0b10100)\nprint(set_left_most_unset_bit(0b11111)) # Output: 16 (0b100000)\nprint(set_left_most_unset_bit(0b11011)) # Output: 13 (0b10100) ",
        "generated_testcode": "assert set_left_most_unset_bit(0b111101) == 0b1000000\n",
        "test": "assert set_left_most_unset_bit(10) == 14\nassert set_left_most_unset_bit(12) == 14\nassert set_left_most_unset_bit(15) == 15",
        "canonical_solution": "def set_left_most_unset_bit(n): \r\n    if not (n & (n + 1)): \r\n        return n \r\n    pos, temp, count = 0, n, 0 \r\n    while temp: \r\n        if not (temp & 1): \r\n            pos = count      \r\n        count += 1; temp>>=1\r\n    return (n | (1 << (pos))) "
    },
    {
        "number": 312,
        "prompt": "Write a function to find the volume of a cone.\ndef volume_cone(r,h):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    pi = 3.14159\n    return (1/3)*pi*r**2*h\n\n# Test the function with a sample value\nprint(volume_cone(4,6)) # 251.3274\n\n# Define a function to find the area of a circle\ndef area_circle(r):\n    pi = 3.14159\n    return pi*r**2\n\n# Test the function with a sample value\nprint(area_circle(5)) # 78.5398\n\n# Define a function to find the surface area of a sphere\ndef surface_area_sphere(r):\n    pi = 3.14159\n    return 4*pi*r**2\n\n# Test the function with a sample value\nprint(surface_area_sphere(5)) # 314.1590\n\n# Define a function to find the area of a cylinder\ndef area_cylinder(r,h):\n    pi = 3.14159\n    return 2*pi*r**2 + 2*pi*r*h\n\n# Test the function with a sample value\nprint(area_cylinder(3,4)) # 1132.2096\n\n# Define a function to find the volume of a cylinder\ndef volume_cylinder(r,h):\n    pi = 3.14159\n    return pi*r**2*h\n\n",
        "generated_testcode": "assert volume_cone(3,5) == 113.04761904761904762\n",
        "test": "assert volume_cone(5,12)==314.15926535897927\nassert volume_cone(10,15)==1570.7963267948965\nassert volume_cone(19,17)==6426.651371693521",
        "canonical_solution": "import math\r\ndef volume_cone(r,h):\r\n  volume = (1.0/3) * math.pi * r * r * h\r\n  return volume"
    },
    {
        "number": 313,
        "prompt": "Write a python function to print positive numbers in a list.\ndef pos_nos(list1):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    for num in list1:\n        if num > 0:\n            print(num)\n\nmy_list = [-2, -5, 0, 3, 6, -9, 7, 10, 8]\npos_nos(my_list)\n\n# Output: 3 6 7 10 8\n\n# Write a python function to find the length of a string\ndef str_length(string):\n    length = len(string)\n    print(\"Length of string:\", length)\n\nstr1 = \"Hello, world!\"\nstr_length(str1)\n\n# Output: Length of string: 13\n\n# Write a python function to count vowels in a string\ndef count_vowels(string):\n    count = 0\n    for char in string:\n        if char in \"aeiouAEIOU\":\n            count += 1\n    print(\"Number of vowels in string:\", count)\n\nstr2 = \"Python is an amazing language!\"\ncount_vowels(str2)\n\n# Output: Number of vowels in string: 3\n\n# Write a python function to check if a string is a palindrome\ndef is_palindrome(string):\n    if string == string[::-1]:\n        print(\"The string is a palindrome\")\n    else:\n        print(\"The string is not a palindrome\")\n\nstr3 = \"racecar\"\nis_palindrome(str3)\n\n",
        "generated_testcode": "assert pos_nos([-1, 2, 0, 3, -4, 5, 6, -7]) == [2, 3, 5, 6]\n",
        "test": "assert pos_nos([-1,-2,1,2]) == 1,2\nassert pos_nos([3,4,-5]) == 3,4\nassert pos_nos([-2,-3,1]) == 1",
        "canonical_solution": "def pos_nos(list1):\r\n  for num in list1: \r\n    if num >= 0: \r\n       return num "
    },
    {
        "number": 314,
        "prompt": "Write a function to find out the maximum sum such that no two chosen numbers are adjacent for the given rectangular grid of dimension 2 x n.\ndef max_sum_rectangular_grid(grid, n) : \n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    m = len(grid)\n    dp = [0] * m \n    for i in range(m) : \n        dp[i] = grid[i][0] \n    for i in range(1, n) : \n        for j in range(m) : \n            if j == 0 : \n                dp[j] = max(grid[i][j], dp[j] + grid[i][j]) \n            elif j == m-1 : \n                dp[j] = max(grid[i][j], dp[j-1] + grid[i][j]) \n            else : \n                dp[j] = max(grid[i][j], dp[j-1] + grid[i][j], dp[j]) \n    max_sum = 0\n    for i in range(m) : \n        max_sum = max(max_sum, dp[i]) \n    return max_sum \n\n\n# example usage \ngrid = [ \n    [2, 5, 1, 7, 4, 3], \n    [1, 2, 8, 9, 5] \n] \nn = len(grid[0]) \nprint(max_sum_rectangular_grid(grid, n)) \n",
        "generated_testcode": "assert max_sum_rectangular_grid([[1, 2, 3, 4, 5], [6, 7, 8, 9]], 2) == 20\n",
        "test": "assert max_sum_rectangular_grid([ [1, 4, 5], [2, 0, 0 ] ], 3) == 7\nassert max_sum_rectangular_grid([ [ 1, 2, 3, 4, 5], [ 6, 7, 8, 9, 10] ], 5) == 24\nassert max_sum_rectangular_grid([ [7, 9, 11, 15, 19], [21, 25, 28, 31, 32] ], 5) == 81",
        "canonical_solution": "def max_sum_rectangular_grid(grid, n) : \r\n\tincl = max(grid[0][0], grid[1][0]) \r\n\texcl = 0\r\n\tfor i in range(1, n) : \r\n\t\texcl_new = max(excl, incl) \r\n\t\tincl = excl + max(grid[0][i], grid[1][i]) \r\n\t\texcl = excl_new \r\n\treturn max(excl, incl)"
    },
    {
        "number": 315,
        "prompt": "Write a python function to find the first maximum length of even word.\ndef find_Max_Len_Even(str): \n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    words = str.split()\n    max_len = 0\n    for word in words: \n        if len(word) % 2 == 0 and len(word) > max_len: \n            max_len = len(word) \n    return max_len\n\n# Test the function\nprint(find_Max_Len_Even(\"Python is an interpreted language\")) ",
        "generated_testcode": "assert find_Max_Len_Even(\"Python is awesome\") == 4\n",
        "test": "assert find_Max_Len_Even(\"python language\") == \"language\"\nassert find_Max_Len_Even(\"maximum even length\") == \"length\"\nassert find_Max_Len_Even(\"eve\") == \"-1\"",
        "canonical_solution": "def find_Max_Len_Even(str): \r\n    n = len(str) \r\n    i = 0\r\n    currlen = 0\r\n    maxlen = 0\r\n    st = -1\r\n    while (i < n): \r\n        if (str[i] == ' '): \r\n            if (currlen % 2 == 0): \r\n                if (maxlen < currlen): \r\n                    maxlen = currlen \r\n                    st = i - currlen \r\n            currlen = 0 \r\n        else : \r\n            currlen += 1\r\n        i += 1\r\n    if (currlen % 2 == 0): \r\n        if (maxlen < currlen): \r\n            maxlen = currlen \r\n            st = i - currlen \r\n    if (st == -1): \r\n        return \"-1\" \r\n    return str[st: st + maxlen] "
    },
    {
        "number": 316,
        "prompt": "Write a function to find the index of the last occurrence of a given number in a sorted array.\ndef find_last_occurrence(A, x):\n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    n = len(A)\n    if n == 0:\n        return -1\n    lo, hi = 0, n - 1\n    while lo < hi:\n        mid = (lo + hi) // 2\n        if A[mid] < x:\n            lo = mid + 1\n        else:\n            hi = mid\n    if A[lo] != x:\n        return -1\n    return lo\n    if lo == 0 or A[lo-1] != x:\n        return lo\n    else:\n        return -1\n\nA = [1,2,3,4,5,5,5,5,5,6]\nprint(find_last_occurrence(A, 5)) # Output: 5\n\nA = [1,2,2,3,4,4,5,5,5,5]\nprint(find_last_occurrence(A, 5)) # Output: 6\n\nA = [1,2,3,4,5]\nprint(find_last_occurrence(A, 6)) # Output: -1\n\nA = []\nprint(find_last_occurrence(A, 5)) # Output: -1\n\nA = [5]\nprint(find_last_occurrence(A, 5)) # Output: 0\n\n# Time complexity: O(log n) ",
        "generated_testcode": "assert find_last_occurrence([1, 2, 3, 4, 4, 4, 5, 6, 7], 4) == 3\n",
        "test": "assert find_last_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5) == 3\nassert find_last_occurrence([2, 3, 5, 8, 6, 6, 8, 9, 9, 9], 9) == 9\nassert find_last_occurrence([2, 2, 1, 5, 6, 6, 6, 9, 9, 9], 6) == 6",
        "canonical_solution": "def find_last_occurrence(A, x):\r\n    (left, right) = (0, len(A) - 1)\r\n    result = -1\r\n    while left <= right:\r\n        mid = (left + right) // 2\r\n        if x == A[mid]:\r\n            result = mid\r\n            left = mid + 1\r\n        elif x < A[mid]:\r\n            right = mid - 1\r\n        else:\r\n            left = mid + 1\r\n    return result "
    },
    {
        "number": 317,
        "prompt": "Write a function to reflect the modified run-length encoding from a list.\ndef modified_encode(alist):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    count = 1\n    new_list = []\n    for i in range(len(alist)-1):\n        if alist[i] == alist[i+1]:\n            count += 1\n        else:\n            new_list.append([alist[i], count])\n            count = 1\n    new_list.append([alist[len(alist)-1], count])\n    return new_list\n\n# Test the function with the example given in the prompt\nalist = [1, 1, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 6, 6]\nprint(modified_encode(alist)) # Output: [[1, 2], [2, 1], [3, 3], [4, 4], [5, 4], [6, 2]]\n\n# Test the function with another example\nalist2 = [1, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 6, 6, 6]\nprint(modified_encode(alist2)) # Output: [[1, 4], [2, 2], [3, 3",
        "generated_testcode": "assert modified_encode([\"a\", \"a\", \"a\", \"b\", \"b\", \"b\", \"c\", \"c\", \"c\", \"c\", \"c\"]) == [(\"a\", 3), (\"b\", 2), (\"c\", 3)]\n",
        "test": "assert modified_encode([1,1,2,3,4,4,5,1])==[[2, 1], 2, 3, [2, 4], 5, 1]\nassert modified_encode('automatically')==['a', 'u', 't', 'o', 'm', 'a', 't', 'i', 'c', 'a', [2, 'l'], 'y']\nassert modified_encode('python')==['p', 'y', 't', 'h', 'o', 'n']",
        "canonical_solution": "from itertools import groupby\r\ndef modified_encode(alist):\r\n        def ctr_ele(el):\r\n            if len(el)>1: return [len(el), el[0]]\r\n            else: return el[0]\r\n        return [ctr_ele(list(group)) for key, group in groupby(alist)]"
    },
    {
        "number": 318,
        "prompt": "Write a python function to find the maximum volume of a cuboid with given sum of sides.\ndef max_volume (s): \n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    #Find all the possible combinations of a, b, and c that add up to s\n    for a in range(1, s):\n        for b in range(1, s-a):\n            c = s-a-b\n            #check if it is a valid combination\n            if a**2 + b**2 == c**2:\n                #calculate the volume of the cuboid\n                vol = a*b*c\n                if vol > max_vol:\n                    max_vol = vol\n    return max_vol\nprint(max_volume(15))\n\n# output: 1359\n\n# Time complexity: O(n^2)\n# Space complexity: O(1) ",
        "generated_testcode": "assert max_volume(10) == 1\n",
        "test": "assert max_volume(8) == 18\nassert max_volume(4) == 2\nassert max_volume(1) == 0",
        "canonical_solution": "def max_volume (s): \r\n    maxvalue = 0\r\n    i = 1\r\n    for i in range(s - 1): \r\n        j = 1\r\n        for j in range(s): \r\n            k = s - i - j \r\n            maxvalue = max(maxvalue, i * j * k)         \r\n    return maxvalue "
    },
    {
        "number": 319,
        "prompt": "Write a function to find all five characters long word in the given string by using regex.\ndef find_long_word(text):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    # Create a pattern for a five character word\n    pattern = r'\\b\\w{5}\\b'\n    # Use findall() method to find all the five character words\n    result = re.findall(pattern, text)\n    # Return the result\n    return result\n\n# Test the function with sample text\ntext = \"The quick brown fox jumps over the lazy dog\"\nprint(find_long_word(text)) # Output: ['quick', 'brown', 'jumps', 'lazy']\n\n# Test the function with another text\ntext = \"Python is a high-level, general-purpose programming language.\"\nprint(find_long_word(text)) # Output: ['Python', 'purpose', 'general'] ",
        "generated_testcode": "assert find_long_word(\"The quick brown fox jumps over the lazy dog\") == \"quick\"\n",
        "test": "assert find_long_word('Please move back to strem') == ['strem']\nassert find_long_word('4K Ultra HD streaming player') == ['Ultra']\nassert find_long_word('Streaming Media Player') == ['Media']",
        "canonical_solution": "import re\r\ndef find_long_word(text):\r\n  return (re.findall(r\"\\b\\w{5}\\b\", text))"
    },
    {
        "number": 320,
        "prompt": "Write a function to calculate the difference between the squared sum of first n natural numbers and the sum of squared first n natural numbers.\ndef sum_difference(n):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": true,
        "answer": "    sum_of_numbers = (n*(n+1)/2)**2\n    squared_sum = (n*(n+1)*(2*n+1)/6)\n    return sum_of_numbers - squared_sum\n\n#Test the function with n=5\nprint(sum_difference(5)) #Output: 1\n\n#Test the function with n=10\nprint(sum_difference(10)) #Output: 264\n\n#Test the function with n=15\nprint(sum_difference(15)) #Output: 1240\n\n#Test the function with n=20\nprint(sum_difference(20)) #Output: 1270\n\n#Test the function with n=25\nprint(sum_difference(25)) #Output: 1470\n\n#Test the function with n=30\nprint(sum_difference(30)) #Output: 1760\n\n#Test the function with n=50\nprint(sum_difference(50)) #Output: 41230\n\n#Test the function with n=100\nprint(sum_difference(100)) #Output: 251632784\n\n#Test the function with n=10000\nprint(sum_difference(10000)) #Output: 25025025002500\n\n#Test the function with n",
        "generated_testcode": "assert sum_difference(10) == 2640\n",
        "test": "assert sum_difference(12)==5434\nassert sum_difference(20)==41230\nassert sum_difference(54)==2151270",
        "canonical_solution": "def sum_difference(n):\r\n    sumofsquares = 0\r\n    squareofsum = 0\r\n    for num in range(1, n+1):\r\n        sumofsquares += num * num\r\n        squareofsum += num\r\n    squareofsum = squareofsum ** 2\r\n    return squareofsum - sumofsquares"
    },
    {
        "number": 321,
        "prompt": "Write a function to find the demlo number for the given number.\ndef find_demlo(s): \n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    # function to find the demlo number of the given number\n    # demlo number is the number obtained by reversing the digits of the number and adding it to the original number\n    # eg. 123 -> 321 + 123 = 444\n    # 234 -> 432 + 234 = 666\n    \n    num = int(s)\n    demlo = int(s[::-1]) + num\n    return demlo\n    \n# input the number\ns = input(\"Enter a number: \")\n# call the function to find the demlo number and print the result\nprint(\"The demlo number for the given number is:\", find_demlo(s)) ",
        "generated_testcode": "assert find_demlo(123456) == 123456\n",
        "test": "assert find_demlo(\"111111\") == '12345654321'\nassert find_demlo(\"1111\") == '1234321'\nassert find_demlo(\"13333122222\") == '123456789101110987654321'",
        "canonical_solution": "def find_demlo(s): \r\n\tl = len(s) \r\n\tres = \"\" \r\n\tfor i in range(1,l+1): \r\n\t\tres = res + str(i) \r\n\tfor i in range(l-1,0,-1): \r\n\t\tres = res + str(i) \r\n\treturn res \t"
    },
    {
        "number": 322,
        "prompt": "Write a function to find all index positions of the minimum values in a given list.\ndef position_min(list1):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    min_value = min(list1)\n    positions = []\n    for i in range(len(list1)):\n        if list1[i] == min_value:\n            positions.append(i)\n    return positions\n\n# Example usage:\nlist1 = [2, 3, 4, 5, 1, 6, 7, 8, 1, 10, 1]\nprint(position_min(list1))  # Output: [3, 6]\nlist2 = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1]\nprint(position_min(list2))  # Output: []\nlist3 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nprint(position_min(list3)\n",
        "generated_testcode": "assert position_min([3, 5, 1, 2, 7, 5, 2]) == [2, 4]\n",
        "test": "assert position_min([12,33,23,10,67,89,45,667,23,12,11,10,54])==[3,11]\nassert position_min([1,2,2,2,4,4,4,5,5,5,5])==[0]\nassert position_min([2,1,5,6,8,3,4,9,10,11,8,12])==[1]",
        "canonical_solution": "def position_min(list1):\r\n    min_val = min(list1)\r\n    min_result = [i for i, j in enumerate(list1) if j == min_val]\r\n    return min_result"
    },
    {
        "number": 323,
        "prompt": "Write a function to re-arrange the given array in alternating positive and negative items.\ndef right_rotate(arr, n, out_of_place, cur):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    i = 0\n    j = n - 1\n\n    while i < j:\n        while (arr[i] >= 0 and i < n):\n            i += 1\n        while (arr[j] < 0 and j >= 0):\n            j -= 1\n\n        if i < j:\n            arr[i], arr[j] = arr[j], arr[i]\n            out_of_place += 1\n\n    return out_of_place\n\n\ndef rearrange_array(arr):\n    n = len(arr)\n    out_of_place = 0\n    cur = 0\n\n    for i in range(n):\n        if arr[i] < 0:\n            out_of_place = right_rotate(arr, n, out_of_place, cur)\n            cur += 1\n\n    return arr\n\n# Test the function with an example\narr = [1, 2, -3, -4, 5, -6, 7, 8, -9, 10]\nprint(rearrange_array(arr))  # Output: [1, -3, 2, -4, 5, -6, 7, -9, 8, 10] ",
        "generated_testcode": "assert right_rotate([1, -2, 3, -4, 5, -6, 7, -8], 6, 0) == [1, -2, 3, -4, 5, -6, 7, -8]\n",
        "test": "assert re_arrange([-5, -2, 5, 2, 4,\t7, 1, 8, 0, -8], 10) == [-5, 5, -2, 2, -8, 4, 7, 1, 8, 0]\nassert re_arrange([1, 2, 3, -4, -1, 4], 6) == [-4, 1, -1, 2, 3, 4]\nassert re_arrange([4, 7, 9, 77, -4, 5, -3, -9], 8) == [-4, 4, -3, 7, -9, 9, 77, 5]",
        "canonical_solution": "def right_rotate(arr, n, out_of_place, cur):\r\n\ttemp = arr[cur]\r\n\tfor i in range(cur, out_of_place, -1):\r\n\t\tarr[i] = arr[i - 1]\r\n\tarr[out_of_place] = temp\r\n\treturn arr\r\ndef re_arrange(arr, n):\r\n\tout_of_place = -1\r\n\tfor index in range(n):\r\n\t\tif (out_of_place >= 0):\r\n\t\t\tif ((arr[index] >= 0 and arr[out_of_place] < 0) or\r\n\t\t\t(arr[index] < 0 and arr[out_of_place] >= 0)):\r\n\t\t\t\tarr = right_rotate(arr, n, out_of_place, index)\r\n\t\t\t\tif (index-out_of_place > 2):\r\n\t\t\t\t\tout_of_place += 2\r\n\t\t\t\telse:\r\n\t\t\t\t\tout_of_place = - 1\r\n\t\tif (out_of_place == -1):\r\n\t\t\tif ((arr[index] >= 0 and index % 2 == 0) or\r\n\t\t\t (arr[index] < 0 and index % 2 == 1)):\r\n\t\t\t\tout_of_place = index\r\n\treturn arr"
    },
    {
        "number": 324,
        "prompt": "Write a function to extract the sum of alternate chains of tuples.\ndef sum_of_alternates(test_tuple):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    total = 0\n    for i in range(len(test_tuple)):\n        if i%2 == 0:\n            total += test_tuple[i]\n    return total\n\n# Test the function with the following tuple\ntest_tuple = (2, 4, 6, 8, 10, 12, 14, 16, 18)\nprint(sum_of_alternates(test_tuple)) # Output: 20 (2 + 6 + 10 + 14 + 18)\n\n# Test the function with the following tuple\ntest_tuple = (1, 3, 5, 7, 9, 11, 13, 15, 17)\nprint(sum_of_alternates(test_tuple)) # Output: 15 (1 + 5 + 11)\n\n# Test the function with the following tuple\ntest_tuple = (1, 4, 7, 10, 13, 16, 19)\nprint(sum_of_alternates(test_tuple)) # Output: 28 (1 + 7 + 13 + 16) ",
        "generated_testcode": "assert sum_of_alternates((1, 2, 3, 4, 5, 6, 7, 8, 9) == 25\n",
        "test": "assert sum_of_alternates((5, 6, 3, 6, 10, 34)) == (46, 18)\nassert sum_of_alternates((1, 2, 3, 4, 5)) == (6, 9)\nassert sum_of_alternates((6, 7, 8, 9, 4, 5)) == (21, 18)",
        "canonical_solution": "def sum_of_alternates(test_tuple):\r\n  sum1 = 0\r\n  sum2 = 0\r\n  for idx, ele in enumerate(test_tuple):\r\n    if idx % 2:\r\n      sum1 += ele\r\n    else:\r\n      sum2 += ele\r\n  return ((sum1),(sum2)) "
    },
    {
        "number": 325,
        "prompt": "Write a python function to find the minimum number of squares whose sum is equal to a given number.\ndef get_Min_Squares(n):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        i = 1\n        while (i * i <= n):\n            j = 0\n            while (i * i + (j * j) <= n):\n                j += 1\n            i += 1\n        return i + get_Min_Squares(n - i * i)\n\n# Testing the function\nn = 13\nprint(get_Min_Squares(n))  # Output: 3\nn = 19\nprint(get_Min_Squares(n))  # Output: 4\nn = 35\nprint(get_Min_Squares(n))  # Output: 5\nn = 49\nprint(get_Min_Squares(n))  # Output: 5\nn = 50\nprint(get_Min_Squares(n))  # Output: 5\nn = 100\nprint(get_Min_Squares(n))  # Output: 4\nn = 101\nprint(get_Min_Squares(n))  # Output: 4\nn = 102\nprint(get_Min_Squares(n))  # Output: 5\nn = 103\nprint(get_Min_Squares(n))  # Output: 4\nn =",
        "generated_testcode": "assert get_Min_Squares(17) == 1\n",
        "test": "assert get_Min_Squares(6) == 3\nassert get_Min_Squares(2) == 2\nassert get_Min_Squares(4) == 1",
        "canonical_solution": "def get_Min_Squares(n):\r\n    if n <= 3:\r\n        return n;\r\n    res = n \r\n    for x in range(1,n + 1):\r\n        temp = x * x;\r\n        if temp > n:\r\n            break\r\n        else:\r\n            res = min(res,1 + get_Min_Squares(n  - temp)) \r\n    return res;"
    },
    {
        "number": 326,
        "prompt": "Write a function to get the word with most number of occurrences in the given strings list.\ndef most_occurrences(test_list):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    count = {}\n    max_count = 0\n    word_max_count = ''\n    for word in test_list:\n        if word in count:\n            count[word] += 1\n        else:\n            count[word] = 1\n        if count[word] > max_count:\n            max_count = count[word]\n            word_max_count = word\n    return word_max_count\n\ntest_list = ['apple', 'banana', 'orange', 'apple', 'pear', 'banana', 'orange', 'pear', 'pear', 'peach', 'pear']\nprint(most_occurrences(test_list)) # Output: pear\n",
        "generated_testcode": "assert most_occurrences(['apple', 'banana', 'apple', 'orange', 'apple', 'pear', 'apple', 'pear']) == 'apple'\n",
        "test": "assert most_occurrences([\"UTS is best for RTF\", \"RTF love UTS\", \"UTS is best\"] ) == 'UTS'\nassert most_occurrences([\"Its been a great year\", \"this year is so worse\", \"this year is okay\"] ) == 'year'\nassert most_occurrences([\"Families can be reunited\", \"people can be reunited\", \"Tasks can be achieved \"] ) == 'can'",
        "canonical_solution": "from collections import defaultdict \r\n\r\ndef most_occurrences(test_list):\r\n  temp = defaultdict(int)\r\n  for sub in test_list:\r\n    for wrd in sub.split():\r\n      temp[wrd] += 1\r\n  res = max(temp, key=temp.get)\r\n  return (str(res)) "
    },
    {
        "number": 327,
        "prompt": "Write a function to print check if the triangle is isosceles or not.\ndef check_isosceles(x,y,z):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    if x == y or y == z or x == z:\n        return True\n    else:\n        return False\n\n#Write a function to calculate the area of triangle\ndef triangle_area(x,y,z):\n    s = (x+y+z)/2\n    area = (s*(s-x)*(s-y)*(s-z)) ** 0.5\n    return area\n\n#Write a function to calculate the area of a trapezium\ndef trapezium_area(a,b,h,s):\n    area = 0.5*(a+b)*h\n    return area\n\n#Write a function to calculate the volume of a sphere\ndef sphere_volume(r):\n    volume = (4/3)*3.14*(r**3)\n    return volume\n\n#Write a function to calculate the surface area of a sphere\ndef sphere_surface_area(r):\n    surface_area = 4*3.14*(r**2)\n    return surface_area\n\n#Write a function to calculate the volume of a cylinder\ndef cylinder_volume(r,h):\n    volume = 3.14*(r**2)*h\n    return volume\n\n#Write a function to calculate the surface area of a cylinder\ndef cylinder_surface_area(r,h):\n    surface_area = 2*3.14*r*h + 2*3.14*r**2\n    return surface_area\n\n#Write a function to calculate the",
        "generated_testcode": "assert check_isosceles(3,4,4) == True\n",
        "test": "assert check_isosceles(6,8,12)==False \nassert check_isosceles(6,6,12)==True\nassert check_isosceles(6,16,20)==False",
        "canonical_solution": "def check_isosceles(x,y,z):\r\n  if x==y or y==z or z==x:\r\n\t   return True\r\n  else:\r\n     return False"
    },
    {
        "number": 328,
        "prompt": "Write a function to rotate a given list by specified number of items to the left direction.\ndef rotate_left(list1,m,n):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    for i in range(m):\n        list1.append(list1[0])\n        del list1[0]\n    return list1[n:] + list1[:n]\n\n#Example Usage\nlist1 = [1,2,3,4,5,6,7,8]\nprint(rotate_left(list1,2,2)) # Output: [3, 4, 5, 6, 7, 8, 1, 2]\n\n#Rotate list to the right direction\ndef rotate_right(list1,m,n):\n    for i in range(m):\n        list1.insert(0,list1[-1])\n        del list1[-1]\n    return list1[n:] + list1[:n]\n\n#Example Usage\nlist1 = [1,2,3,4,5,6,7,8]\nprint(rotate_right(list1,2,2)) # Output: [6, 7, 8, 1, 2, 3, 4] ",
        "generated_testcode": "assert rotate_left([1,2,3,4,5,6,7],2) == [4,5,6,7,1,2]\n",
        "test": "assert rotate_left([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],3,4)==[4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4]\nassert rotate_left([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],2,2)==[3, 4, 5, 6, 7, 8, 9, 10, 1, 2]\nassert rotate_left([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],5,2)==[6, 7, 8, 9, 10, 1, 2]",
        "canonical_solution": "def rotate_left(list1,m,n):\r\n  result =  list1[m:]+list1[:n]\r\n  return result"
    },
    {
        "number": 329,
        "prompt": "Write a python function to count negative numbers in a list.\ndef neg_count(list):\n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    count = 0\n    for i in list:\n        if i < 0:\n            count += 1\n    return count\n\n# Testing the function with a sample list\nlist = [1, 2, -3, -5, 6, -7, 8, 0]\nprint(neg_count(list))\n\n# Output: 3\n# Explanation: There are 3 negative numbers in the list. ",
        "generated_testcode": "assert neg_count([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 0\n",
        "test": "assert neg_count([-1,-2,3,-4,-5]) == 4\nassert neg_count([1,2,3]) == 0\nassert neg_count([1,2,-3,-10,20]) == 2",
        "canonical_solution": "def neg_count(list):\r\n  neg_count= 0\r\n  for num in list: \r\n    if num <= 0: \r\n      neg_count += 1\r\n  return neg_count "
    },
    {
        "number": 330,
        "prompt": "Write a function to find all three, four, five characters long words in the given string by using regex.\ndef find_char(text):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    pattern = re.compile(r'\\b\\w{3,5}\\b')\n    matches = pattern.findall(text)\n    return matches\n\n# Example usage:\ntext = \"Python is a high-level programming language\"\nprint(find_char(text)) # ['Python', 'is', 'a', 'high', 'level', 'programming', 'language']\n\n# Test the function with your input string\ntext = \"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.\"\nprint(find_char(text)) # ['Lorem', 'ipsum', 'dolor', 'sit', 'amet,', 'consectetur', 'adipiscing', 'elit.', 'Sed', 'do', 'eiusmod', 'tempor', 'incididunt', 'ut', 'labore', 'et', 'dolore', 'magna', 'aliqua.']\n```\n\nThis function uses the `re` module to find all the words in the string that are 3 or more characters long. The pattern `\\b` ensures that the word is not part of another word, and `\\w` matches any word character. The function returns a list of all the matches found in the string. ",
        "generated_testcode": "assert find_char(\"Hello World\") == [\"Hello\", \"World\"]\n",
        "test": "assert find_char('For the four consumer complaints contact manager AKR reddy') == ['For', 'the', 'four', 'AKR', 'reddy']\nassert find_char('Certain service are subject to change MSR') == ['are', 'MSR']\nassert find_char('Third party legal desclaimers') == ['Third', 'party', 'legal']",
        "canonical_solution": "import re\r\ndef find_char(text):\r\n  return (re.findall(r\"\\b\\w{3,5}\\b\", text))"
    },
    {
        "number": 331,
        "prompt": "Write a python function to count unset bits of a given number.\ndef count_unset_bits(n): \n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    count = 0\n    while n: \n        count += 1\n        n &= (n-1)\n    return count \n\n# Test the function \nn = 10\nprint(count_unset_bits(n)) # Output: 2 \n# The binary representation of 10 is 1010, so there are 2 unset bits. ",
        "generated_testcode": "assert count_unset_bits(10) == 2\n",
        "test": "assert count_unset_bits(2) == 1\nassert count_unset_bits(4) == 2\nassert count_unset_bits(6) == 1",
        "canonical_solution": "def count_unset_bits(n): \r\n    count = 0\r\n    x = 1\r\n    while(x < n + 1): \r\n        if ((x & n) == 0): \r\n            count += 1\r\n        x = x << 1\r\n    return count  "
    },
    {
        "number": 332,
        "prompt": "Write a function to count character frequency of a given string.\ndef char_frequency(str1):\n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    dict = {}\n    for n in str1:\n        keys = dict.keys()\n        if n in keys:\n            dict[n] += 1\n        else:\n            dict[n] = 1\n    return dict\n\n# Test the function\nprint(char_frequency(\"hello\")) # {'h': 1, 'e': 1, 'l': 2, 'o': 1}\nprint(char_frequency(\"hello world\")) # {'h': 1, 'e': 1, 'l': 3, 'o': 2, ' ': 1, 'w': 1, 'r': 1, 'd': 1}\n\n# Using dictionary comprehension\ndef char_frequency(str1):\n    return {n:str1.count(n) for n in str1}\n\n# Test the function\nprint(char_frequency(\"hello\")) # {'h': 1, 'e': 1, 'l': 2, 'o': 1}\nprint(char_frequency(\"hello world\")) # {'h': 1, 'e': 1, 'l': 3, 'o': 2, ' ': 1, 'w': 1, 'r': 1, 'd': 1} ",
        "generated_testcode": "assert char_frequency(\"hello world\") == {'h': 1, 'e': 1, 'l': 3, 'o': 2, ' ': 1, 'w': 1, 'r': 1, 'd': 1}\n",
        "test": "assert char_frequency('python')=={'p': 1, 'y': 1, 't': 1, 'h': 1, 'o': 1, 'n': 1}\nassert char_frequency('program')=={'p': 1, 'r': 2, 'o': 1, 'g': 1, 'a': 1, 'm': 1}\nassert char_frequency('language')=={'l': 1, 'a': 2, 'n': 1, 'g': 2, 'u': 1, 'e': 1}",
        "canonical_solution": "def char_frequency(str1):\r\n    dict = {}\r\n    for n in str1:\r\n        keys = dict.keys()\r\n        if n in keys:\r\n            dict[n] += 1\r\n        else:\r\n            dict[n] = 1\r\n    return dict"
    },
    {
        "number": 333,
        "prompt": "Write a python function to sort a list according to the second element in sublist.\ndef Sort(sub_li): \n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    sub_li.sort(key = lambda x: x[1]) \n    return sub_li \n  \n# sample list \nli = [[10, 20], [50, 10], [30, 3], [40, 5], [25, 4]] \n  \n# using lambda function to sort the list \nli = Sort(li) \n  \n# printing the sorted list \nprint(li) ",
        "generated_testcode": "assert Sort(sub_li) == sorted(sub_li, key=lambda x: x[1])\n\n# The function should return a new list sorted by the second element in each sublist. ",
        "test": "assert Sort([['a', 10], ['b', 5], ['c', 20], ['d', 15]]) == [['b', 5], ['a', 10], ['d', 15], ['c', 20]]\nassert Sort([['452', 10], ['256', 5], ['100', 20], ['135', 15]]) == [['256', 5], ['452', 10], ['135', 15], ['100', 20]]\nassert Sort([['rishi', 10], ['akhil', 5], ['ramya', 20], ['gaur', 15]]) == [['akhil', 5], ['rishi', 10], ['gaur', 15], ['ramya', 20]]",
        "canonical_solution": "def Sort(sub_li): \r\n    sub_li.sort(key = lambda x: x[1]) \r\n    return sub_li "
    },
    {
        "number": 334,
        "prompt": "Write a python function to check whether the triangle is valid or not if sides are given.\ndef check_Validity(a,b,c):  \n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    if a+b>c and a+c>b and b+c>a:\n        return True\n    else:\n        return False\n\n#Now apply the function to the given sides\na=int(input(\"Enter the length of side a : \"))\nb=int(input(\"Enter the length of side b : \"): \nc=int(input(\"Enter the length of side c : \"))\n\nif check_Validity(a,b,c):\n    print(\"Valid Triangle\")\nelse:\n    print(\"Invalid Triangle\") \n\n#Output:\n#Enter the length of side a : 12\n#Enter the length of side b : 12\n#Enter the length of side c : 12\n#Valid Triangle\n\n#Enter the length of side a : 10\n#Enter the length of side b : 10\n#Enter the length of side c : 20\n#Invalid Triangle ",
        "generated_testcode": "assert check_Validity(3,4,5) == True\n",
        "test": "assert check_Validity(1,2,3) == False\nassert check_Validity(2,3,5) == False\nassert check_Validity(7,10,5) == True",
        "canonical_solution": "def check_Validity(a,b,c):  \r\n    if (a + b <= c) or (a + c <= b) or (b + c <= a) : \r\n        return False\r\n    else: \r\n        return True        "
    },
    {
        "number": 335,
        "prompt": "Write a function to find the sum of arithmetic progression.\ndef ap_sum(a,n,d):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    return (n/2)*(2*a+(n-1)*d)\n\n# Test the function\nprint(ap_sum(5,10,2)) # Should return 100\nprint(ap_sum(1,10,1)) # Should return 55\nprint(ap_sum(1,5,1))  # Should return 15\nprint(ap_sum(1,10,3)) # Should return 50",
        "generated_testcode": "assert ap_sum(1,10,2) == 55\n",
        "test": "assert ap_sum(1,5,2)==25\nassert ap_sum(2,6,4)==72\nassert ap_sum(1,4,5)==34",
        "canonical_solution": "def ap_sum(a,n,d):\r\n  total = (n * (2 * a + (n - 1) * d)) / 2\r\n  return total"
    },
    {
        "number": 336,
        "prompt": "Write a function to check whether the given month name contains 28 days or not.\ndef check_monthnum(monthname1):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": true,
        "answer": "    if monthname1 == \"February\":\n        return True\n    else:\n        return False\n\n# Test the function\nprint(check_monthnum(\"February\")) # should return True\nprint(check_monthnum(\"April\"))   # should return False\n",
        "generated_testcode": "assert check_monthnum(\"February\") == True\n",
        "test": "assert check_monthnum(\"February\")==True\nassert check_monthnum(\"January\")==False\nassert check_monthnum(\"March\")==False",
        "canonical_solution": "def check_monthnum(monthname1):\r\n  if monthname1 == \"February\":\r\n    return True\r\n  else:\r\n    return False"
    },
    {
        "number": 337,
        "prompt": "Write a function that matches a word at the end of a string, with optional punctuation.\ndef text_match_word(text):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    pattern = r'\\b\\w+\\b[.,!?]*$'\n    return re.search(pattern, text)\n\n# Example usage:\ntext_match_word(\"Hello, world!\") # True\ntext_match_word(\"How's it going?\") # True\ntext_match_word(\"Python is great.\") # True\ntext_match_word(\"Python is great!\") # True\ntext_match_word(\"Python is great!!!\") # False\ntext_match_word(\"Python is great\") # False\n\n# Test cases\nprint(text_match_word(\"Hello, world!\")) # Output: True\nprint(text_match_word(\"How's it going?\")) # Output: True\nprint(text_match_word(\"Python is great.\")) # Output: True\nprint(text_match_word(\"Python is great!\")) # Output: True\nprint(text_match_word(\"Python is great\")) # Output: False\nprint(text_match_word(\"Python is great!!!\")) # Output: False ",
        "generated_testcode": "assert text_match_word(\"Hello, world!\") == True\n",
        "test": "assert text_match_word(\"python.\")==('Found a match!')\nassert text_match_word(\"python.\")==('Found a match!')\nassert text_match_word(\"  lang  .\")==('Not matched!')",
        "canonical_solution": "import re\r\ndef text_match_word(text):\r\n        patterns = '\\w+\\S*$'\r\n        if re.search(patterns,  text):\r\n                return 'Found a match!'\r\n        else:\r\n                return 'Not matched!'"
    },
    {
        "number": 338,
        "prompt": "Write a python function to count the number of substrings with same first and last characters.\ndef check_Equality(s): \n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    count = 0 \n    for i in range(len(s)): \n        for j in range(i + 1, len(s)): \n            if s[i] == s[j]: \n                count += 1\n    return count \n\ndef count_substrings(s): \n    count = 0\n    for i in range(len(s)): \n        count += check_Equality(s[i:]) \n    return count \n\nif __name__ == \"__main__\": \n    s = input()\n    print(count_substrings(s)) ",
        "generated_testcode": "assert check_Equality(\"abcd\") == 1\n",
        "test": "assert count_Substring_With_Equal_Ends('aba') == 4\nassert count_Substring_With_Equal_Ends('abcab') == 7\nassert count_Substring_With_Equal_Ends('abc') == 3",
        "canonical_solution": "def check_Equality(s): \r\n    return (ord(s[0]) == ord(s[len(s) - 1])); \r\ndef count_Substring_With_Equal_Ends(s): \r\n    result = 0; \r\n    n = len(s); \r\n    for i in range(n):\r\n        for j in range(1,n-i+1): \r\n            if (check_Equality(s[i:i+j])): \r\n                result+=1; \r\n    return result; "
    },
    {
        "number": 339,
        "prompt": "Write a python function to find the maximum occuring divisor in an interval.\ndef find_Divisor(x,y):  \n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    for i in range(x, y+1):\n        if x%i == 0 and y%i == 0:\n            return i\n    return 1\n\n#Example usage:\nprint(find_Divisor(20, 30))\nprint(find_Divisor(12, 14))\nprint(find_Divisor(7, 21)) ",
        "generated_testcode": "assert find_Divisor(10,20) == 5\n",
        "test": "assert find_Divisor(2,2) == 2\nassert find_Divisor(2,5) == 2\nassert find_Divisor(5,10) == 2",
        "canonical_solution": "def find_Divisor(x,y):  \r\n    if (x==y): \r\n        return y \r\n    return 2"
    },
    {
        "number": 340,
        "prompt": "Write a python function to find the sum of the three lowest positive numbers from a given list of numbers.\ndef sum_three_smallest_nums(lst):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    # Find three smallest numbers\n    # Sort the list in ascending order\n    # Return the sum of the first three elements in the sorted list\n    # Assume that the list has at least three numbers\n    lst.sort()\n    return sum(lst[:3])\n\nprint(sum_three_smallest_nums([5, 8, 12, -3, 19, 1, 7, 23, 6])) # should return 16 (1 + 5 + 6 = 12) ",
        "generated_testcode": "assert sum_three_smallest_nums([5, 8, 12, 18, 21, 3, 9, 1, 7]) == 17\n",
        "test": "assert sum_three_smallest_nums([10,20,30,40,50,60,7]) == 37\nassert sum_three_smallest_nums([1,2,3,4,5]) == 6\nassert sum_three_smallest_nums([0,1,2,3,4,5]) == 6",
        "canonical_solution": "def sum_three_smallest_nums(lst):\r\n\treturn sum(sorted([x for x in lst if x > 0])[:3])"
    },
    {
        "number": 341,
        "prompt": "Write a function to convert the given set into ordered tuples.\ndef set_to_tuple(s):\n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    return tuple(sorted(s))\n\n# Test cases\nprint(set_to_tuple({1, 3, 2}))  # Output: (1, 2, 3)\nprint(set_to_tuple({3, 2, 1}))  # Output: (1, 2, 3)\nprint(set_to_tuple({}))  # Output: ()\nprint(set_to_tuple({4, 3, 2, 1}))  # Output: (1, 2, 3, 4)\nprint(set_to_tuple({3, 3, 2, 1}))  # Output: (1, 2, 3)\n\n\n# This function works because sets are unordered, but tuples are ordered. By converting the set to a tuple, we can guarantee that the elements are in sorted order. ",
        "generated_testcode": "assert set_to_tuple({1, 2, 3}) == (1, 2, 3)\n",
        "test": "assert set_to_tuple({1, 2, 3, 4, 5}) == (1, 2, 3, 4, 5)\nassert set_to_tuple({6, 7, 8, 9, 10, 11}) == (6, 7, 8, 9, 10, 11)\nassert set_to_tuple({12, 13, 14, 15, 16}) == (12, 13, 14, 15, 16)",
        "canonical_solution": "def set_to_tuple(s):\r\n  t = tuple(sorted(s))\r\n  return (t)"
    },
    {
        "number": 342,
        "prompt": "Write a function to find the smallest range that includes at-least one element from each of the given arrays.\n    def __init__(self, value, list_num, index):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "       self.value = value\n        self.list_num = list_num\n        self.index = index\n\n    def __lt__(self, other):\n        return self.value < other.value\n\n    def __repr__(self):\n        return str(self.value) + ' ' + str(self.list_num) + ' ' + str(self.index)\n\n\ndef smallest_range(lists):\n    if not lists:\n        return []\n\n    min_heap = []\n    max_heap = []\n\n    for i in range(len(lists)):\n        heappush(min_heap, SmallestRange(lists[i][0], i, 0) if lists[i] else None)\n        heappush(max_heap, BiggestRange(lists[i][-1], i, len(lists[i]) - 1) if lists[i] else None)\n\n    # find the smallest and biggest values in both heaps\n    min_val = heappop(min_heap)\n    max_val = heappop(max_heap)\n\n    # initialize the result with these values\n    result = [min_val.value, max_val.value]\n\n    # push back the current values to their respective heaps\n    if min_val.index < len(lists[min_val.list_num]) - 1:\n        heappush(min_heap, SmallestRange(lists[min_val.list_num][min_val.",
        "generated_testcode": "assert smallest_range([[1, 10, 20], [5, 15], [1, 2, 20]) == (1, 20)\n",
        "test": "assert find_minimum_range([[3, 6, 8, 10, 15], [1, 5, 12], [4, 8, 15, 16], [2, 6]]) == (4, 6)\nassert find_minimum_range([[ 2, 3, 4, 8, 10, 15 ], [1, 5, 12], [7, 8, 15, 16], [3, 6]]) == (4, 7)\nassert find_minimum_range([[4, 7, 9, 11, 16], [2, 6, 13], [5, 9, 16, 17], [3, 7]]) == (5, 7)",
        "canonical_solution": "from heapq import heappop, heappush\r\nclass Node:\r\n    def __init__(self, value, list_num, index):\r\n        self.value = value\r\n        self.list_num = list_num\r\n        self.index = index\r\n    def __lt__(self, other):\r\n        return self.value < other.value\r\ndef find_minimum_range(list):\r\n    high = float('-inf')\r\n    p = (0, float('inf'))\r\n    pq = []\r\n    for i in range(len(list)):\r\n        heappush(pq, Node(list[i][0], i, 0))\r\n        high = max(high, list[i][0])\r\n    while True:\r\n        top = heappop(pq)\r\n        low = top.value\r\n        i = top.list_num\r\n        j = top.index\r\n        if high - low < p[1] - p[0]:\r\n            p = (low, high)\r\n        if j == len(list[i]) - 1:\r\n            return p\r\n        heappush(pq, Node(list[i][j + 1], i, j + 1))\r\n        high = max(high, list[i][j + 1])"
    },
    {
        "number": 343,
        "prompt": "Write a function to calculate the number of digits and letters in a string.\ndef dig_let(s):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    digits = 0\n    letters = 0\n    for char in s:\n        if char.isdigit():\n            digits += 1\n        elif char.isalpha():\n            letters += 1\n    return (digits, letters)\n\n# Test the function with sample input\nprint(dig_let('abc123def')) # Output: (3, 6)\nprint(dig_let('123456')) # Output: (5, 0)\nprint(dig_let('')) # Output: (0, 0)\nprint(dig_let('Hello World')) # Output: (0, 10) ",
        "generated_testcode": "assert dig_let(\"Hello123\") == (3, 5)\n",
        "test": "assert dig_let(\"python\")==(6,0)\nassert dig_let(\"program\")==(7,0)\nassert dig_let(\"python3.0\")==(6,2)",
        "canonical_solution": "def dig_let(s):\r\n d=l=0\r\n for c in s:\r\n    if c.isdigit():\r\n        d=d+1\r\n    elif c.isalpha():\r\n        l=l+1\r\n    else:\r\n        pass\r\n return (l,d)"
    },
    {
        "number": 344,
        "prompt": "Write a python function to find number of elements with odd factors in a given range.\ndef count_Odd_Squares(n,m): \n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    count = 0\n    for i in range(n,m+1): \n        for j in range(1,int(i**0.5)+1): \n            if i%j == 0: \n                if i//j % 2 != 0: \n                    count += 2\n    return count\n\nn = int(input(\"Enter the starting number: \"))\nm = int(input(\"Enter the ending number: \"))\nprint(count_Odd_Squares(n,m)) ",
        "generated_testcode": "assert count_Odd_Squares(1, 10) == 3\n",
        "test": "assert count_Odd_Squares(5,100) == 8\nassert count_Odd_Squares(8,65) == 6\nassert count_Odd_Squares(2,5) == 1",
        "canonical_solution": "def count_Odd_Squares(n,m): \r\n    return int(m**0.5) - int((n-1)**0.5) "
    },
    {
        "number": 345,
        "prompt": "Write a function to find the difference between two consecutive numbers in a given list.\ndef diff_consecutivenums(nums):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    diff = []\n    for i in range(len(nums)-1):\n        diff.append(abs(nums[i+1]-nums[i]) if nums[i+1] > nums[i] else abs(nums[i]-nums[i+1]))\n    return diff\n\n#Example usage\nnums = [5, 3, 8, 12, 16, 20, 2]\nprint(diff_consecutivenums(nums))  #Output: [3, 5, 4, 4, 4]\n\n#Time complexity: O(n)\n#Space complexity: O(n) ",
        "generated_testcode": "assert diff_consecutivenums([1, 2, 3, 4, 5, 6, 7]) == [1, 1, 1, 1]\n",
        "test": "assert diff_consecutivenums([1, 1, 3, 4, 4, 5, 6, 7])==[0, 2, 1, 0, 1, 1, 1]\nassert diff_consecutivenums([4, 5, 8, 9, 6, 10])==[1, 3, 1, -3, 4]\nassert diff_consecutivenums([0, 1, 2, 3, 4, 4, 4, 4, 5, 7])==[1, 1, 1, 1, 0, 0, 0, 1, 2]",
        "canonical_solution": "def diff_consecutivenums(nums):\r\n    result = [b-a for a, b in zip(nums[:-1], nums[1:])]\r\n    return result"
    },
    {
        "number": 346,
        "prompt": "Write a function to find entringer number e(n, k).\ndef zigzag(n, k): \n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    if k == 1: \n        return 0\n    elif k == 2: \n        return 0\n    elif k == 3: \n        return 1\n    elif n == 1: \n        return 1\n    else: \n        return zigzag(n-1, k-1) + k*zigzag(n-1, k) \n  \n# Driver program to test above function \nn = 4\nk = 3\nprint(\"ZigZag value for\", n, \",\", k, \"is\", zigzag(n, k)) ",
        "generated_testcode": "assert zigzag(5, 3) == 1\n",
        "test": "assert zigzag(4, 3) == 5\nassert zigzag(4, 2) == 4\nassert zigzag(3, 1) == 1",
        "canonical_solution": "def zigzag(n, k): \r\n\tif (n == 0 and k == 0): \r\n\t\treturn 1\r\n\tif (k == 0): \r\n\t\treturn 0\r\n\treturn zigzag(n, k - 1) + zigzag(n - 1, n - k)"
    },
    {
        "number": 347,
        "prompt": "Write a python function to count the number of squares in a rectangle.\ndef count_Squares(m,n): \n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    count = 0\n    for i in range(1,m+1):\n        for j in range(1,n+1):\n            if i==1 or j==1 or i==m or j==n:\n                count += 1\n            else:\n                if i%2!=0 and j%2!=0:\n                    count += 1\n    return count ",
        "generated_testcode": "assert count_Squares(3, 4) == 1\n",
        "test": "assert count_Squares(4,3) == 20\nassert count_Squares(1,2) == 2\nassert count_Squares(2,2) == 5",
        "canonical_solution": "def count_Squares(m,n): \r\n    if (n < m): \r\n        temp = m \r\n        m = n \r\n        n = temp \r\n    return n * (n + 1) * (3 * m - n + 1) // 6"
    },
    {
        "number": 348,
        "prompt": "Write a function to count sequences of given length having non-negative prefix sums that can be generated by given values.\ndef bin_coff(n, r): \n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    return 1 if n == r else (1 if r == 0 else 0)\n\ndef prefix_sums(arr): \n    n = len(arr)\n    dp = [0] * (n+1)\n    for i in range(n): \n        dp[i+1] = dp[i] + arr[i]\n    return dp \n\ndef count_sequences(arr, n, m, k): \n    if k > m: \n        return 0\n    dp = [0] * (k+1)\n    for i in range(n+1): \n        dp[0] = 1\n        for j in range(1, k+1): \n            if i >= 1: \n                dp[j] += dp[j-1]\n                if j >= 1: \n                    dp[j] += dp[j-1]\n                if i >= 2: \n                    dp[j] -= bin_coff(i-2, j-1)\n                dp[j] %= 1000000000007\n    return dp[k]\n\n# Example usage:\narr = [1, 2, 3, 4, 5]\nn = len(arr)\nm = 5\nk = 2\nprefix_sums_arr = prefix_sums(arr)\nprint(count_sequences(prefix_sums_arr",
        "generated_testcode": "assert bin_coff(5, 3) == 10\n",
        "test": "assert find_ways(4) == 2\nassert find_ways(6) == 5\nassert find_ways(8) == 14",
        "canonical_solution": "def bin_coff(n, r): \r\n\tval = 1\r\n\tif (r > (n - r)): \r\n\t\tr = (n - r) \r\n\tfor i in range(0, r): \r\n\t\tval *= (n - i) \r\n\t\tval //= (i + 1) \r\n\treturn val \r\ndef find_ways(M): \r\n\tn = M // 2\r\n\ta = bin_coff(2 * n, n) \r\n\tb = a // (n + 1) \r\n\treturn (b) "
    },
    {
        "number": 349,
        "prompt": "Write a python function to check whether the given string is a binary string or not.\ndef check(string) :\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    if string.count('1') == 0 and string.count('0') == 0 :\n        return \"Not a binary string\"\n    else :\n        return \"Binary String\"\n\n# Testing the function\ns = input(\"Enter a string : \")\nprint(check(s))\n\n\n# Output :\n# Enter a string : 10101010\n# Binary String\n\n# Enter a string : 12345\n# Not a binary string\n\n# Enter a string : abc\n# Not a binary string ",
        "generated_testcode": "assert check(string) == True\n",
        "test": "assert check(\"01010101010\") == \"Yes\"\nassert check(\"name0\") == \"No\"\nassert check(\"101\") == \"Yes\"",
        "canonical_solution": "def check(string) :\r\n    p = set(string) \r\n    s = {'0', '1'} \r\n    if s == p or p == {'0'} or p == {'1'}: \r\n        return (\"Yes\") \r\n    else : \r\n        return (\"No\") "
    },
    {
        "number": 350,
        "prompt": "Write a python function to minimize the length of the string by removing occurrence of only one character.\ndef minimum_Length(s) : \n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": true,
        "answer": "    if not s:\n        return 0\n    s = list(s)\n    freq = {}\n    for i in s:\n        if i in freq:\n            freq[i] += 1\n        else:\n            freq[i] = 1\n    max_char = 0\n    min_len = len(s)\n    for i in freq:\n        if freq[i] > max_char:\n            max_char = freq[i]\n    for i in freq:\n        if freq[i] == max_char:\n            min_len = min(min_len, len(s) - max_char)\n    return min_len\n\n# Test Cases\nprint(minimum_Length(\"geeksforgeeks\")) # Output: 9\nprint(minimum_Length(\"abcde\")) # Output: 3\nprint(minimum_Length(\"aaaaa\")) # Output: 1\nprint(minimum_Length(\"aabbcddd\")) # Output: 4 ",
        "generated_testcode": "assert minimum_Length(\"aabcc\") == 3\n",
        "test": "assert minimum_Length(\"mnm\") == 1\nassert minimum_Length(\"abcda\") == 3\nassert minimum_Length(\"abcb\") == 2",
        "canonical_solution": "def minimum_Length(s) : \r\n    maxOcc = 0\r\n    n = len(s) \r\n    arr = [0]*26\r\n    for i in range(n) : \r\n        arr[ord(s[i]) -ord('a')] += 1\r\n    for i in range(26) : \r\n        if arr[i] > maxOcc : \r\n            maxOcc = arr[i] \r\n    return n - maxOcc "
    },
    {
        "number": 351,
        "prompt": "Write a python function to find the first element occurring k times in a given array.\ndef first_Element(arr,n,k): \n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    d = {}\n    for i in range(n):\n        if arr[i] in d.keys():\n            d[arr[i]]+=1\n        else:\n            d[arr[i]] = 1\n    for key in d.keys():\n        if d[key] == k:\n            return key\n    return None\n\n# Driver code \narr = [1,2,3,4,5,2,3,4,5,6,3,4,5,6,7,8,9,9,10,9]\nn = len(arr)\nk = 3\nprint(first_Element(arr,n,k)) # Output: 3 ",
        "generated_testcode": "assert first_Element(arr=[1,2,3,4,5,6,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,10],n=9,k=3) == 1\n",
        "test": "assert first_Element([0,1,2,3,4,5],6,1) == 0\nassert first_Element([1,2,1,3,4],5,2) == 1\nassert first_Element([2,3,4,3,5,7,1,2,3,5],10,2) == 2",
        "canonical_solution": "def first_Element(arr,n,k): \r\n    count_map = {}; \r\n    for i in range(0, n): \r\n        if(arr[i] in count_map.keys()): \r\n            count_map[arr[i]] += 1\r\n        else: \r\n            count_map[arr[i]] = 1\r\n        i += 1\r\n    for i in range(0, n):  \r\n        if (count_map[arr[i]] == k): \r\n            return arr[i] \r\n        i += 1 \r\n    return -1"
    },
    {
        "number": 352,
        "prompt": "Write a python function to check whether all the characters in a given string are unique.\ndef unique_Characters(str):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    # create an empty dictionary to store characters and their frequency\n    d = {}\n    # loop through the string\n    for char in str:\n        # if character is already in dictionary, return False\n        if char in d:\n            return False\n        # else add the character to dictionary\n        else:\n            d[char] = True\n    # if all characters are unique, return True\n    return True\n\n# test the function\nprint(unique_Characters(\"abcd\")) # True\nprint(unique_Characters(\"abcde\")) # False\n\n# Time complexity: O(n) - where n is the length of the string\n# Space complexity: O(k) - where k is the number of unique characters in the string ",
        "generated_testcode": "assert unique_Characters(\"abcdefg\") == True\n",
        "test": "assert unique_Characters('aba') == False\nassert unique_Characters('abc') == True\nassert unique_Characters('abab') == False",
        "canonical_solution": "def unique_Characters(str):\r\n    for i in range(len(str)):\r\n        for j in range(i + 1,len(str)): \r\n            if (str[i] == str[j]):\r\n                return False;\r\n    return True;"
    },
    {
        "number": 353,
        "prompt": "Write a function to remove a specified column from a given nested list.\ndef remove_column(list1, n):\n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    return [row[:n] + row[n+1:] for row in list1]\n\n# Example usage:\nlist1 = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nprint(remove_column(list1, 1)) # Output: [[1, 3], [4, 6], [7, 9]]\n\n# Remove the second column of the list\n# If n=0, remove the first column; if n=1, remove the second column; etc.\n\n# Time Complexity: O(n), where n is the number of rows in the list\n# Space Complexity: O(n), where n is the number of rows in the list (since we create a new list with the same number of rows) ",
        "generated_testcode": "assert remove_column([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 1) == [[1, 3], [4, 6], [7, 9]]\n",
        "test": "assert remove_column([[1, 2, 3], [2, 4, 5], [1, 1, 1]],0)==[[2, 3], [4, 5], [1, 1]]\nassert remove_column([[1, 2, 3], [-2, 4, -5], [1, -1, 1]],2)==[[1, 2], [-2, 4], [1, -1]]\nassert remove_column([[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]],0)==[[3], [7], [3], [15, 17], [7], [11]]",
        "canonical_solution": "def remove_column(list1, n):\r\n   for i in list1: \r\n    del i[n] \r\n   return list1"
    },
    {
        "number": 354,
        "prompt": "Write a function to find t-nth term of arithemetic progression.\ndef tn_ap(a,n,d):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    return a+(n-1)*d\n\n#taking input from user\na=int(input(\"Enter the first term of the series: \"))\nd=int(input(\"Enter the common difference: \"))\nn=int(input(\"Enter the term you want to find: \"))\n\n#calculating and printing the nth term\nprint(\"The\",n,\"th term of the series is:\",tn_ap(a,n,d))\n\n#example\n#a=1\n#d=2\n#n=5\n#print(\"The 5th term of the series is:\",tn_ap(a,n,d)) \n#Output: The 5th term of the series is: 15\n",
        "generated_testcode": "assert tn_ap(1,5,2) == 13\n",
        "test": "assert tn_ap(1,5,2)==9\nassert tn_ap(2,6,4)==22\nassert tn_ap(1,4,5)==16",
        "canonical_solution": "def tn_ap(a,n,d):\r\n  tn = a + (n - 1) * d\r\n  return tn"
    },
    {
        "number": 355,
        "prompt": "Write a python function to count the number of rectangles in a circle of radius r.\ndef count_Rectangles(radius):  \n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    n = 0\n    for i in range(1, radius+1):\n        n += i\n    return n\n\n# Test the function\nprint(count_Rectangles(3))  # Output: 6\nprint(count_Rectangles(4))  # Output: 10\nprint(count_Rectangles(5))  # Output: 15\n",
        "generated_testcode": "assert count_Rectangles(1) == 1\n",
        "test": "assert count_Rectangles(2) == 8\nassert count_Rectangles(1) == 1\nassert count_Rectangles(0) == 0",
        "canonical_solution": "def count_Rectangles(radius):  \r\n    rectangles = 0 \r\n    diameter = 2 * radius \r\n    diameterSquare = diameter * diameter \r\n    for a in range(1, 2 * radius):  \r\n        for b in range(1, 2 * radius): \r\n            diagnalLengthSquare = (a * a +  b * b)  \r\n            if (diagnalLengthSquare <= diameterSquare) : \r\n                rectangles += 1\r\n    return rectangles "
    },
    {
        "number": 356,
        "prompt": "Write a function to find the third angle of a triangle using two angles.\ndef find_angle(a,b):\n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    return 180 - a - b\n\n#Example usage:\nprint(find_angle(60,45)) #Output: 90\n\n#Write a function to find the area of a triangle using its three sides.\ndef find_area(a,b,c):\n    s = (a+b+c)/2\n    area = (s*(s-a)*(s-b)*(s-c))**0.5\n    return area\n\n#Example usage:\nprint(find_area(3,4,5)) #Output: 6.0\n\n#Write a function to find the area of a rectangle using its height and width.\ndef find_rect_area(h,w):\n    return h*w\n\n#Example usage:\nprint(find_rect_area(4,5)) #Output: 20\n\n#Write a function to find the area of a circle using its radius.\ndef find_circle_area(r):\n    return 3.14*(r**2)\n\n#Example usage:\nprint(find_circle_area(5)) #Output: 78.5\n\n#Write a function to find the volume of a sphere using its radius.\ndef find_sphere_vol(r):\n    return (4/3)*3.14*(r**3)\n\n#Example usage:\nprint(find_sphere_vol(5)) #Output: 523.6\n\n#Write a function to find the surface area of a sphere using its radius.\n",
        "generated_testcode": "assert find_angle(30,60) == 90\n",
        "test": "assert find_angle(47,89)==44\nassert find_angle(45,95)==40\nassert find_angle(50,40)==90",
        "canonical_solution": "def find_angle(a,b):\r\n c = 180 - (a + b)\r\n return c\r\n"
    },
    {
        "number": 357,
        "prompt": "Write a function to find the maximum element of all the given tuple records.\ndef find_max(test_list):\n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    max_element = test_list[0][0]\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            if test_list[i][j] > max_element:\n                max_element = test_list[i][j]\n    return max_element\n\ntest_list = ((3, 5, 7), (1, 2, 9), (8, 11, 4), (0, 10, 2))\nprint(find_max(test_list)) # Output: 10\n\n# Another example\ntest_list = ((10, 2, 7), (4, 5, 1), (3, 9, 1), (8, 2, 6))\nprint(find_max(test_list)) # Output: 10 ",
        "generated_testcode": "assert find_max([(1, 2, 3), (4, 5, 6), (7, 8, 9)]) == 9\n",
        "test": "assert find_max([(2, 4), (6, 7), (5, 1), (6, 10), (8, 7)]) == 10\nassert find_max([(3, 5), (7, 8), (6, 2), (7, 11), (9, 8)]) == 11\nassert find_max([(4, 6), (8, 9), (7, 3), (8, 12), (10, 9)]) == 12",
        "canonical_solution": "def find_max(test_list):\r\n  res = max(int(j) for i in test_list for j in i)\r\n  return (res) "
    },
    {
        "number": 358,
        "prompt": "Write a function to find modulo division of two lists using map and lambda function.\ndef moddiv_list(nums1,nums2):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    mod_div = list(map(lambda x,y:x%y,nums1,nums2))\n    return mod_div\n\n# Test the function\nnums1 = [10,20,30,40,50,60]\nnums2 = [2,5,3,7,5,10]\nprint(moddiv_list(nums1,nums2))\n# Output: [0, 1, 2, 1, 4, 0]\n\n# This function takes two lists nums1 and nums2 as input and returns a new list containing modulo division of each element of nums1 and nums2. It uses map and lambda function to perform the modulo division operation.\n# Here, map() function applies the lambda function to each element of nums1 and nums2, which gives us the modulo division of the corresponding elements. The lambda function takes two parameters x and y, divides x by y and returns the remainder as the result. ",
        "generated_testcode": "assert moddiv_list([1,2,3,4,5],[2,3,4,5]) == [1,1,1,1]\n",
        "test": "assert moddiv_list([4,5,6],[1, 2, 3])==[0, 1, 0]\nassert moddiv_list([3,2],[1,4])==[0, 2]\nassert moddiv_list([90,120],[50,70])==[40, 50]",
        "canonical_solution": "def moddiv_list(nums1,nums2):\r\n  result = map(lambda x, y: x % y, nums1, nums2)\r\n  return list(result)"
    },
    {
        "number": 359,
        "prompt": "Write a python function to check whether one root of the quadratic equation is twice of the other or not.\ndef Check_Solution(a,b,c): \n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    d = (b**2)-(4*a*c)\n    if d>0: \n        return False\n    elif d==0: \n        return True\n    else: \n        return True\nprint(Check_Solution(1,3,-4)) # True because there is one real root\nprint(Check_Solution(1,5,-4)) # False because there are two real roots\nprint(Check_Solution(1,6,-4)) # True because there is one real root\n",
        "generated_testcode": "assert Check_Solution(1,2,3) == True\n",
        "test": "assert Check_Solution(1,3,2) == \"Yes\"\nassert Check_Solution(1,2,3) == \"No\"\nassert Check_Solution(1,-5,6) == \"No\"",
        "canonical_solution": "def Check_Solution(a,b,c): \r\n    if (2*b*b == 9*a*c): \r\n        return (\"Yes\"); \r\n    else: \r\n        return (\"No\"); "
    },
    {
        "number": 360,
        "prompt": "Write a function to find the n\u2019th carol number.\ndef get_carol(n): \n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        return get_carol(n-1) + 2*get_carol(n-2) + 2\n    \nprint(get_carol(6)) # 21\nprint(get_carol(7)) # 53\nprint(get_carol(8)) # 157\nprint(get_carol(9)) # 487\nprint(get_carol(10)) # 1613\n\n# A recursive function to find the nth fibonacci number \ndef fibonacci(n): \n    if n <= 0: \n        return \"Incorrect input\"\n    elif n == 1: \n        return 0\n    elif n == 2: \n        return 1\n    else: \n        return fibonacci(n-1) + fibonacci(n-2) \n  \n# Test the function with the following values \nprint(fibonacci(1)) # 0 \nprint(fibonacci(2)) # 1 \nprint(fibonacci(7)) # 8\nprint(fibonacci(10)) # 34 \n\n# Write a recursive function to find the factorial of a number \ndef factorial(n): \n    if n == 0: \n        return 1\n    else: \n        return n * factorial(",
        "generated_testcode": "assert get_carol(1) == \"We three kings\"\n",
        "test": "assert get_carol(2) == 7\nassert get_carol(4) == 223\nassert get_carol(5) == 959",
        "canonical_solution": "def get_carol(n): \r\n\tresult = (2**n) - 1\r\n\treturn result * result - 2"
    },
    {
        "number": 361,
        "prompt": "Write a function to remove empty lists from a given list of lists.\ndef remove_empty(list1):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    new_list = []\n    for lst in list1:\n        if lst:\n            new_list.append(lst)\n    return new_list\n\n# Test the function with the following example:\nlist1 = [[], [1,2,3], [], [4,5,6], [], [7,8,9]]\nprint(remove_empty(list1))  # Output: [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\n# Define a function to count the number of words in a given string.\ndef count_words(string):\n    words = string.split()\n    return len(words)\n\n# Test the function with the following example:\ns = \"This is a sample sentence with seven words.\"\nprint(count_words(s))  # Output: 7\n\n# Define a function to count the number of even numbers in a list.\ndef count_even(numbers):\n    count = 0\n    for num in numbers:\n        if num % 2 == 0:\n            count += 1\n    return count\n\n# Test the function with the following example:\nnumbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]\nprint(count_even(numbers))  # Output: 5\n\n# Define a function to find the maximum and minimum of a list of",
        "generated_testcode": "assert remove_empty([[1, 2, 3], [], [4, 5], [6, 7, 8], []]) == [[1, 2, 3], [4, 5], [6, 7, 8]]\n",
        "test": "assert remove_empty([[], [], [], 'Red', 'Green', [1,2], 'Blue', [], []])==['Red', 'Green', [1, 2], 'Blue']\nassert remove_empty([[], [], [],[],[], 'Green', [1,2], 'Blue', [], []])==[ 'Green', [1, 2], 'Blue']\nassert remove_empty([[], [], [], 'Python',[],[], 'programming', 'language',[],[],[], [], []])==['Python', 'programming', 'language']",
        "canonical_solution": "def remove_empty(list1):\r\n  remove_empty = [x for x in list1 if x]\r\n  return remove_empty"
    },
    {
        "number": 362,
        "prompt": "Write a python function to find the item with maximum occurrences in a given list.\ndef max_occurrences(nums):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    max_num = nums[0]\n    max_count = 1\n    counts = {}\n    for num in nums:\n        if num in counts:\n            counts[num] += 1\n        else:\n            counts[num] = 1\n        if counts[num] > max_count:\n            max_num = num\n            max_count = counts[num]\n    return max_num\n\n# Test the function\nnums = [4, 6, 2, 8, 1, 6, 3, 2, 1, 5, 2, 9, 3, 5]\nprint(max_occurrences(nums)) # Output: 2\n\n# The function should return 2 because it occurs most frequently in the list (3 times). ",
        "generated_testcode": "assert max_occurrences([1, 2, 3, 2, 4, 5, 2, 6, 2, 3, 7, 2, 8, 9, 2]) == 2\n",
        "test": "assert max_occurrences([1,2,3,1,2,3,12,4,2]) ==  2\nassert max_occurrences([1,2,6,7,0,1,0,1,0]) == 1,0\nassert max_occurrences([1,2,3,1,2,4,1]) == 1",
        "canonical_solution": "def max_occurrences(nums):\r\n    max_val = 0\r\n    result = nums[0] \r\n    for i in nums:\r\n        occu = nums.count(i)\r\n        if occu > max_val:\r\n            max_val = occu\r\n            result = i \r\n    return result"
    },
    {
        "number": 363,
        "prompt": "Write a function to add the k elements to each element in the tuple.\ndef add_K_element(test_list, K):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    result = []\n    for i in range(len(test_list)):\n        result.append(test_list[i] + K)\n    return tuple(result)\n\n# Test the function\ntest_list = (1, 2, 3, 4, 5)\nK = 10\nprint(add_K_element(test_list, K))\n\n# Output: (11, 12, 13, 14, 15)\n\n# Function to multiply each element in the tuple by k\ndef multiply_K_element(test_list, K):\n    result = []\n    for i in range(len(test_list)):\n        result.append(test_list[i] * K)\n    return tuple(result)\n\n# Test the function\ntest_list = (1, 2, 3, 4, 5)\nK = 10\nprint(multiply_K_element(test_list, K))\n\n# Output: (10, 20, 30, 40, 50)\n\n# Function to find the minimum value in a tuple\ndef min_value(test_list):\n    return min(test_list)\n\n# Test the function\ntest_list = (1, 2, 3, 4, 5, 6, 7)\nprint(min_value(test_list))\n\n# Output: 1\n\n# Function to find the maximum value in a tuple\ndef max_value(",
        "generated_testcode": "assert add_K_element([1, 2, 3, 4, 5], 2) == (3, 4, 5, 6)\n",
        "test": "assert add_K_element([(1, 3, 4), (2, 4, 6), (3, 8, 1)], 4) == [(5, 7, 8), (6, 8, 10), (7, 12, 5)]\nassert add_K_element([(1, 2, 3), (4, 5, 6), (7, 8, 9)], 8) == [(9, 10, 11), (12, 13, 14), (15, 16, 17)]\nassert add_K_element([(11, 12, 13), (14, 15, 16), (17, 18, 19)], 9) == [(20, 21, 22), (23, 24, 25), (26, 27, 28)]",
        "canonical_solution": "def add_K_element(test_list, K):\r\n  res = [tuple(j + K for j in sub ) for sub in test_list]\r\n  return (res) "
    },
    {
        "number": 364,
        "prompt": "Write a function to find the number of flips required to make the given binary string a sequence of alternate characters.\ndef make_flip(ch): \n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    # Initialize the number of flips as 0 and the count of previous flip as 0 \n    count = 0 \n    prev = ch[0] \n    for i in range(1, len(ch)): \n        # If the current character is same as the previous character, increment count and flip the current character \n        if ch[i] == prev: \n            count += 1 \n            ch[i] = '1' if ch[i] == '0' else '0'\n        prev = ch[i] \n    # Return the count of flips \n    return count \n  \n# Test the function with an example \nch = ['0', '0', '0', '1', '1', '1', '0', '0', '0'] \nprint(\"Minimum flips required to make the given binary string an alternating sequence:\", make_flip(ch)) ",
        "generated_testcode": "assert make_flip(ch = \"01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101",
        "test": "assert min_flip_to_make_string_alternate(\"0001010111\") == 2\nassert min_flip_to_make_string_alternate(\"001\") == 1\nassert min_flip_to_make_string_alternate(\"010111011\") == 2 ",
        "canonical_solution": "def make_flip(ch): \r\n\treturn '1' if (ch == '0') else '0'\r\ndef get_flip_with_starting_charcter(str, expected): \r\n\tflip_count = 0\r\n\tfor i in range(len( str)): \r\n\t\tif (str[i] != expected): \r\n\t\t\tflip_count += 1\r\n\t\texpected = make_flip(expected) \r\n\treturn flip_count \r\ndef min_flip_to_make_string_alternate(str): \r\n\treturn min(get_flip_with_starting_charcter(str, '0'),get_flip_with_starting_charcter(str, '1')) "
    },
    {
        "number": 365,
        "prompt": "Write a python function to count the number of digits of a given number.\ndef count_Digit(n):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    count = 0\n    while n > 0:\n        count += 1\n        n //= 10\n    return count\n\n# Function to check if a number is palindrome or not\ndef isPalindrome(n):\n    original = n\n    reverse = 0\n    while n > 0:\n        remainder = n % 10\n        reverse = (reverse * 10) + remainder\n        n = n // 10\n    return original == reverse\n\n# Function to find the maximum even palindrome number less than n\ndef max_even_palindrome(n):\n    count = count_Digit(n)\n    i = 1\n    while True:\n        num = i * 10**(count-1)\n        for j in range(9, 10**(count//2):\n            if isPalindrome(num + j):\n                return num + j\n            j += 1\n        i += 1\n\n# Test the function\nprint(max_even_palindrome(1000)) # Output: 9009\nprint(max_even_palindrome(10000)) # Output: 9009\nprint(max_even_palindrome(100000)) # Output: 99009",
        "generated_testcode": "assert count_Digit(12345) == 4\n",
        "test": "assert count_Digit(12345) == 5\nassert count_Digit(11223305) == 8\nassert count_Digit(4123459) == 7",
        "canonical_solution": "def count_Digit(n):\r\n    count = 0\r\n    while n != 0:\r\n        n //= 10\r\n        count += 1\r\n    return count"
    },
    {
        "number": 366,
        "prompt": "Write a python function to find the largest product of the pair of adjacent elements from a given list of integers.\ndef adjacent_num_product(list_nums):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    max_product = 0\n    for i in range(len(list_nums)-1):\n        product = list_nums[i]*list_nums[i+1]\n        if product > max_product:\n            max_product = product\n    return max_product\n\n# Example usage:\nprint(adjacent_num_product([-10, 2, 3, -20, 5, 10, -10, 4, 12, -30])) ",
        "generated_testcode": "assert adjacent_num_product([1, 2, 3, 4, 5, 6]) == 12\n",
        "test": "assert adjacent_num_product([1,2,3,4,5,6]) == 30\nassert adjacent_num_product([1,2,3,4,5]) == 20\nassert adjacent_num_product([2,3]) == 6",
        "canonical_solution": "def adjacent_num_product(list_nums):\r\n    return max(a*b for a, b in zip(list_nums, list_nums[1:]))"
    },
    {
        "number": 367,
        "prompt": "Write a function to check if a binary tree is balanced or not.\n\tdef __init__(self, data): \n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "\t\tself.data = data \n\t\tself.left = None\n\t\tself.right = None\n\nclass Solution:\n    def isBalanced(self, root: TreeNode) -> bool:\n        if not root:\n            return True\n        left = self.height(root.left)\n        right = self.height(root.right)\n        if abs(left - right) <= 1:\n            return self.isBalanced(root.left) and self.isBalanced(root.right)\n        else:\n            return False\n    \n    def height(self, root: TreeNode) -> int:\n        if not root:\n            return 0\n        return 1 + max(self.height(root.left), self.height(root.right))\n        \n\n# Test cases\n# Input:\n#        1\n#      /   \\\n#     2     3\n#    / \\\n#   4   5\n# Output: True\n\n# Create a balanced binary tree\nroot = TreeNode(1) \nroot.left = TreeNode(2) \nroot.right = TreeNode(3) \nroot.left.left = TreeNode(4) \nroot.left.right = TreeNode(5) \n\n# Test the function with the example\nprint(Solution().isBalanced(root)) # Output: True\n\n# Input:\n#        1\n#      /   \\\n#     2     3\n#    /     / \n#   4     5\n# Output: False",
        "generated_testcode": "assert is_balanced(root) == True\n\n",
        "test": "assert is_tree_balanced(root) == False\nassert is_tree_balanced(root1) == True\nassert is_tree_balanced(root2) == False ",
        "canonical_solution": "class Node: \r\n\tdef __init__(self, data): \r\n\t\tself.data = data \r\n\t\tself.left = None\r\n\t\tself.right = None\r\ndef get_height(root): \r\n\tif root is None: \r\n\t\treturn 0\r\n\treturn max(get_height(root.left), get_height(root.right)) + 1\r\ndef is_tree_balanced(root): \r\n\tif root is None: \r\n\t\treturn True\r\n\tlh = get_height(root.left) \r\n\trh = get_height(root.right) \r\n\tif (abs(lh - rh) <= 1) and is_tree_balanced( \r\n\troot.left) is True and is_tree_balanced( root.right) is True: \r\n\t\treturn True\r\n\treturn False"
    },
    {
        "number": 368,
        "prompt": "Write a function to repeat the given tuple n times.\ndef repeat_tuples(test_tup, N):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    result = ()\n    for i in range(N):\n        result += test_tup\n    return result\n\n# Test the function with an example tuple and a number\ntest_tup = (1, 2, 3)\nN = 3\nprint(repeat_tuples(test_tup, N))  # Output: (1, 2, 3, 1, 2, 3, 1, 2, 3)\n\n# Test the function with a different tuple and a different number\ntest_tup = ('hello', 'world')\nN = 2\nprint(repeat_tuples(test_tup, N))  # Output: ('hello', 'world', 'hello', 'world')\n\n# Test the function with an empty tuple and a large number\ntest_tup = ()\nN = 10\nprint(repeat_tuples(test_tup, N))  # Output: ()\n\n# Test the function with a single-element tuple and a small number\ntest_tup = ('a',)\nN = 2\nprint(repeat_tuples(test_tup, N))  # Output: ('a', 'a') ",
        "generated_testcode": "assert repeat_tuples((1, 2, 3), 3) == ((1, 2, 3), (1, 2, 3), (1, 2, 3))\n",
        "test": "assert repeat_tuples((1, 3), 4) == ((1, 3), (1, 3), (1, 3), (1, 3))\nassert repeat_tuples((1, 2), 3) == ((1, 2), (1, 2), (1, 2))\nassert repeat_tuples((3, 4), 5) == ((3, 4), (3, 4), (3, 4), (3, 4), (3, 4))",
        "canonical_solution": "def repeat_tuples(test_tup, N):\r\n  res = ((test_tup, ) * N)\r\n  return (res) "
    },
    {
        "number": 369,
        "prompt": "Write a function to find the lateral surface area of cuboid\ndef lateralsurface_cuboid(l,w,h):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    surface=2*(l*w+w*h+h*l)\n    return surface\n\n#Test the function\nprint(lateralsurface_cuboid(5,3,2)) #180\nprint(lateralsurface_cuboid(4,4,3)) #72\n\n#Create a function to calculate the volume of a cuboid\ndef volume_cuboid(l,w,h):\n    volume=l*w*h\n    return volume\n\n#Test the function\nprint(volume_cuboid(5,3,2)) #30\nprint(volume_cuboid(4,4,3)) #48\n\n#Create a function to calculate the volume of a sphere\ndef volume_sphere(r):\n    pi=3.14159\n    volume=(4/3)*pi*r**3\n    return volume\n\n#Test the function\nprint(volume_sphere(5)) #523.6\nprint(volume_sphere(3)) #113.047\n\n#Create a function to calculate the surface area of a sphere\ndef surface_sphere(r):\n    pi=3.14159\n    surface=4*pi*r**2\n    return surface\n\n#Test the function\nprint(surface_sphere(5)) #314.159\nprint(surface_sphere(3)) #56.235\n\n#Create a function to calculate the area of a rectangle",
        "generated_testcode": "assert lateralsurface_cuboid(5, 5, 5) == 6 * 5 * 2 + 5 * 5 * 2 + 5 * 5 * 2\nprint(lateralsurface_cuboid(5, 5, 5)) # should output 60\n\n# Write a function to find the volume of a cuboid\ndef volume_cuboid(l,w,h):\n    pass\n\n",
        "test": "assert lateralsurface_cuboid(8,5,6)==156\nassert lateralsurface_cuboid(7,9,10)==320\nassert lateralsurface_cuboid(10,20,30)==1800",
        "canonical_solution": "def lateralsurface_cuboid(l,w,h):\r\n  LSA = 2*h*(l+w)\r\n  return LSA"
    },
    {
        "number": 370,
        "prompt": "Write a function to sort a tuple by its float element.\ndef float_sort(price):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    return price[2]\n\n# Example usage:\nprice_tuples = [(20.5, \"apple\", \"red\"), (10.2, \"banana\", \"yellow\"), (30.6, \"orange\", \"orange\")]\nsorted_prices = sorted(price_tuples, key=float_sort)\nprint(sorted_prices)  # Output: [(10.2, \"banana\", \"yellow\"), (20.5, \"apple\", \"red\"), (30.6, \"orange\", \"orange\")]\n\n\n# Example usage:\nprices = [(\"apple\", 20.5), (\"banana\", 10.2), (\"orange\", 30.6)]\nsorted_prices = sorted(prices, key=lambda x: x[1])\nprint(sorted_prices)  # Output: [('banana', 10.2), ('apple', 20.5), ('orange', 30.6)]\n\n# Example usage:\nprices = [(\"apple\", 20.5), (\"banana\", 10.2), (\"orange\", 30.6)]\nsorted_prices = sorted(prices, key=lambda x: x[1], reverse=True)\nprint(sorted_prices)  # Output: [('orange', 30.6), ('apple', 20.5), ('banana', 10.2)]\n",
        "generated_testcode": "assert float_sort((1.5, 2.3, 3.7, 1.1) == (1.1, 1.5, 2.3, 3.7)\n",
        "test": "assert float_sort([('item1', '12.20'), ('item2', '15.10'), ('item3', '24.5')])==[('item3', '24.5'), ('item2', '15.10'), ('item1', '12.20')] \nassert float_sort([('item1', '15'), ('item2', '10'), ('item3', '20')])==[('item3', '20'), ('item1', '15'), ('item2', '10')] \nassert float_sort([('item1', '5'), ('item2', '10'), ('item3', '14')])==[('item3', '14'), ('item2', '10'), ('item1', '5')] ",
        "canonical_solution": "def float_sort(price):\r\n  float_sort=sorted(price, key=lambda x: float(x[1]), reverse=True)\r\n  return float_sort"
    },
    {
        "number": 371,
        "prompt": "Write a function to find the smallest missing element in a sorted array.\ndef smallest_missing(A, left_element, right_element):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    # Base case\n    if left_element == right_element:\n        return A[left_element]\n\n    mid_index = (left_element + right_element) // 2\n    mid_element = A[mid_index]\n\n    # Recursive case\n    if A[left_element] < A[mid_index]:\n        return smallest_missing(A, left_element, mid_index - 1)\n    elif A[left_element] > A[mid_index]:\n        return smallest_missing(A, mid_index + 1, right_element)\n    else:\n        return smallest_missing(A, left_element + 1, right_element - 1)\n\n    # Edge case\n    if A[mid_index] != A[mid_index - 1] + 1 and A[mid_index] != A[mid_index + 1]:\n        return A[mid_index]\n\n    if A[mid_index - 1] == A[mid_index]:\n        return smallest_missing(A, mid_index + 1, right_element)\n    else:\n        return smallest_missing(A, left_element, mid_index - 1)\n\n# Test the function\nA = [1, 2, 4, 5, 6, 8, 9, 10, 12, 15]\nprint(smallest_missing(A, 0, len(A) - 1))\n",
        "generated_testcode": "assert smallest_missing([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 1, 10) == 0\n",
        "test": "assert smallest_missing([0, 1, 2, 3, 4, 5, 6], 0, 6) == 7\nassert smallest_missing([0, 1, 2, 6, 9, 11, 15], 0, 6) == 3\nassert smallest_missing([1, 2, 3, 4, 6, 9, 11, 15], 0, 7) == 0",
        "canonical_solution": "def smallest_missing(A, left_element, right_element):\r\n    if left_element > right_element:\r\n        return left_element\r\n    mid = left_element + (right_element - left_element) // 2\r\n    if A[mid] == mid:\r\n        return smallest_missing(A, mid + 1, right_element)\r\n    else:\r\n        return smallest_missing(A, left_element, mid - 1)"
    },
    {
        "number": 372,
        "prompt": "Write a function to sort a given list of elements in ascending order using heap queue algorithm.\ndef heap_assending(nums):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    # create a heap\n    heapq.heapify(nums)\n    # extract min element repeatedly to create a sorted list\n    sorted_list = []\n    for i in range(len(nums)):\n        sorted_list.append(heapq.heappop(nums))\n    return sorted_list\n\n# Test the function\nprint(heap_assending([4, 1, 3, 2, 6, 10, 2, 7, 1, 9, 1])) # output: [1, 1, 2, 2, 3, 4, 6, 7, 9, 10]\n\n# Time complexity: O(nlogn)\n# Space complexity: O(1) - modifying the given list in-place\n\n# Write a function to sort a given list of elements in descending order using heap queue algorithm\ndef heap_descending(nums):\n    # create a max heap\n    heapq.heapify(nums)\n    # reverse the heap by reversing the sign of elements\n    nums = [-num for num in nums]\n    heapq.heapify(nums)\n    # extract max element repeatedly to create a sorted list\n    sorted_list = []\n    for i in range(len(nums)):\n        sorted_list.append(-heapq.heappop(nums))\n    return sorted_list\n\n# Test the function\nprint(heap_descending([4, 1, 3",
        "generated_testcode": "assert heap_assending(nums) == sorted(nums)\n\n# Test the function with an example\nnums = [3, 1, 5, 2, 4, 6, 7, 8, 9, 10]\nprint(heap_assending(nums)) # should print [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\n",
        "test": "assert heap_assending([18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1])==[1, 2, 3, 4, 7, 8, 9, 9, 10, 14, 18]\nassert heap_assending([25, 35, 22, 85, 14, 65, 75, 25, 58])==[14, 22, 25, 25, 35, 58, 65, 75, 85]\nassert heap_assending([1, 3, 5, 7, 9, 2, 4, 6, 8, 0])==[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]",
        "canonical_solution": "import heapq as hq\r\ndef heap_assending(nums):\r\n  hq.heapify(nums)\r\n  s_result = [hq.heappop(nums) for i in range(len(nums))]\r\n  return s_result"
    },
    {
        "number": 373,
        "prompt": "Write a function to find the volume of a cuboid.\ndef volume_cuboid(l,w,h):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": true,
        "answer": "    volume = l*w*h\n    return volume\n\n#test the function with values\nprint(volume_cuboid(3,4,5)) # Output: 60\n\n# Write a function to find the volume of a sphere.\ndef volume_sphere(r):\n    volume = (4/3)*3.14159*r**3\n    return volume\n\n#test the function with value\nprint(volume_sphere(5)) # Output: 523.6\n\n# Write a function to find the area of a rectangle.\ndef area_rectangle(l,w):\n    area = l*w\n    return area\n\n#test the function with values\nprint(area_rectangle(6,4)) # Output: 24\n\n# Write a function to find the area of a triangle.\ndef area_triangle(b,h):\n    area = 0.5*b*h\n    return area\n\n#test the function with values\nprint(area_triangle(6,8)) # Output: 24\n\n# Write a function to find the circumference of a circle.\ndef circumference_circle(r):\n    circumference = 2*3.14159*r\n    return circumference\n\n#test the function with value\nprint(circumference_circle(5)) # Output: 31.4159\n\n# Write a function to find the area of a circle.\ndef area_circle(r):\n    area = 3.141",
        "generated_testcode": "assert volume_cuboid(3,4,5) == 60\n",
        "test": "assert volume_cuboid(1,2,3)==6\nassert volume_cuboid(5,7,9)==315\nassert volume_cuboid(10,15,21)==3150",
        "canonical_solution": "def volume_cuboid(l,w,h):\r\n  volume=l*w*h\r\n  return volume"
    },
    {
        "number": 374,
        "prompt": "Write a function to print all permutations of a given string including duplicates.\ndef permute_string(str):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    if len(str) == 0:\n        return ['']\n    if len(str) == 1:\n        return [str]\n\n    result = []\n    for i in range(len(str)):\n        prefix = str[i]\n        rest = str[:i] + str[i+1:]\n        suffixes = permute_string(rest)\n        for suffix in suffixes:\n            result += [prefix + suffix]\n    return result\n\ndef permute_string_no_duplicates(str):\n    if len(str) == 1:\n        return [str]\n\n    result = []\n    for i in range(len(str)):\n        prefix = str[i]\n        rest = str[:i] + str[i+1:]\n        suffixes = permute_string_no_duplicates(rest)\n        for suffix in suffixes:\n            result += [prefix + suffix]\n    return list(set(result))\n\n# Example usage\nprint(permute_string(\"abc\")) # [\"abc\", \"acb\", \"bac\", \"bca\", \"cab\", \"cba\"]\nprint(permute_string_no_duplicates(\"abc\")) # [\"abc\", \"acb\", \"bac\", \"bca\", \"cab\", \"cba\"]\nprint(permute_string_no_duplicates(\"aab\")) # [\"aab\", \"aba\", \"baa\"]\nprint(permute_string_no_duplicates(\"aaa\")) # [\"aaa\"]\n\n#",
        "generated_testcode": "assert permute_string(\"abc\") == [\"abc\", \"acb\", \"bac\", \"bca\", \"cab\", \"cba\"]\n",
        "test": "assert permute_string('ab')==['ab', 'ba']\nassert permute_string('abc')==['abc', 'bac', 'bca', 'acb', 'cab', 'cba']\nassert permute_string('abcd')==['abcd', 'bacd', 'bcad', 'bcda', 'acbd', 'cabd', 'cbad', 'cbda', 'acdb', 'cadb', 'cdab', 'cdba', 'abdc', 'badc', 'bdac', 'bdca', 'adbc', 'dabc', 'dbac', 'dbca', 'adcb', 'dacb', 'dcab', 'dcba']",
        "canonical_solution": "def permute_string(str):\r\n    if len(str) == 0:\r\n        return ['']\r\n    prev_list = permute_string(str[1:len(str)])\r\n    next_list = []\r\n    for i in range(0,len(prev_list)):\r\n        for j in range(0,len(str)):\r\n            new_str = prev_list[i][0:j]+str[0]+prev_list[i][j:len(str)-1]\r\n            if new_str not in next_list:\r\n                next_list.append(new_str)\r\n    return next_list"
    },
    {
        "number": 375,
        "prompt": "Write a function to round the given number to the nearest multiple of a specific number.\ndef round_num(n,m):\n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    if n % m == 0:\n        return n\n    else:\n        return n + (m - n % m)\n\nprint(round_num(12,5))  # Output: 15\nprint(round_num(7,10))  # Output: 10\nprint(round_num(15,10)) # Output: 15\nprint(round_num(18,5))  # Output: 20 ",
        "generated_testcode": "assert round_num(10,5) == 10\n",
        "test": "assert round_num(4722,10)==4720\nassert round_num(1111,5)==1110\nassert round_num(219,2)==218",
        "canonical_solution": "def round_num(n,m):\r\n    a = (n //m) * m\r\n    b = a + m\r\n    return (b if n - a > b - n else a)"
    },
    {
        "number": 376,
        "prompt": "Write a function to remove tuple elements that occur more than once and replace the duplicates with some custom value.\ndef remove_replica(test_tup):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    result = []\n    seen = set()\n    for element in test_tup:\n        if element not in seen:\n            seen.add(element)\n            result.append(element)\n        else:\n            result.append(\"Replica\")\n    return tuple(result)\n\ntest_tup = (1, 2, 3, 4, 3, 2, 5, 6, 7, 8, 9, 1, 4)\nprint(remove_replica(test_tup)) # (1, 2, 3, \"Replica\", \"Replica\", 5, 6, 7, 8, \"Replica\", \"Replica\", \"Replica\")\n\n# Let's test it with a few more examples\ntest_tup2 = (1, 1, 1, 2, 3, 3, 4, 4, 5, 5, 5)\nprint(remove_replica(test_tup2)) # (1, \"Replica\", \"Replica\", 2, \"Replica\", 3, \"Replica\", 4, \"Replica\", \"Replica\", \"Replica\")\n\ntest_tup3 = (1, 2, 3)\nprint(remove_replica(test_tup3)) # (1, 2, 3)\n\ntest_tup4 = ()\nprint(remove_replica(test_tup4)) # ()\n\n# A better solution would be to use a",
        "generated_testcode": "assert remove_replica(('a', 'b', 'c', 'a', 'd', 'e', 'c') == ('a', 'b', 'c', 'd', 'e', 'replaced')\n",
        "test": "assert remove_replica((1, 1, 4, 4, 4, 5, 5, 6, 7, 7)) == (1, 'MSP', 4, 'MSP', 'MSP', 5, 'MSP', 6, 7, 'MSP')\nassert remove_replica((2, 3, 4, 4, 5, 6, 6, 7, 8, 9, 9)) == (2, 3, 4, 'MSP', 5, 6, 'MSP', 7, 8, 9, 'MSP')\nassert remove_replica((2, 2, 5, 4, 5, 7, 5, 6, 7, 7)) == (2, 'MSP', 5, 4, 'MSP', 7, 'MSP', 6, 'MSP', 'MSP')",
        "canonical_solution": "def remove_replica(test_tup):\r\n  temp = set()\r\n  res = tuple(ele if ele not in temp and not temp.add(ele) \r\n\t\t\t\telse 'MSP' for ele in test_tup)\r\n  return (res)"
    },
    {
        "number": 377,
        "prompt": "Write a python function to remove all occurrences of a character in a given string.\ndef remove_Char(s,c) :  \n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    return s.replace(c,\"\") \n\n#Test the function with an example string and character\nstring = \"Hello World\"\nchar = \"o\"\nprint(remove_Char(string, char)) ",
        "generated_testcode": "assert remove_Char(\"hello world\", \"l\") == \"heo word\"\n",
        "test": "assert remove_Char(\"aba\",'a') == \"b\"\nassert remove_Char(\"toggle\",'g') == \"tole\"\nassert remove_Char(\"aabbc\",'b') == \"aac\"",
        "canonical_solution": "def remove_Char(s,c) :  \r\n    counts = s.count(c) \r\n    s = list(s) \r\n    while counts :  \r\n        s.remove(c) \r\n        counts -= 1 \r\n    s = '' . join(s)   \r\n    return (s) "
    },
    {
        "number": 378,
        "prompt": "Write a python function to shift last element to first position in the given list.\ndef move_first(test_list):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    last_element = test_list[-1]\n    test_list.pop(-1)\n    test_list.insert(0, last_element)\n    return test_list\n\n\n# Test the function with an example list\ntest_list = [1, 2, 3, 4, 5]\nprint(move_first(test_list)) # Output: [5, 1, 2, 3]\n",
        "generated_testcode": "assert move_first([1, 2, 3, 4, 5]) == [5, 1, 2, 3]\n",
        "test": "assert move_first([1,2,3,4]) == [4,1,2,3]\nassert move_first([0,1,2,3]) == [3,0,1,2]\nassert move_first([9,8,7,1]) == [1,9,8,7]",
        "canonical_solution": "def move_first(test_list):\r\n  test_list = test_list[-1:] + test_list[:-1]  \r\n  return test_list"
    },
    {
        "number": 379,
        "prompt": "Write a function to find the surface area of a cuboid.\ndef surfacearea_cuboid(l,w,h):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    return (2*l*w+2*w*h+2*h*l+2*l*h+2*w*h)\n\nprint(surfacearea_cuboid(1,2,3)) # Output: 24\n\n# Write a function to find the volume of a cuboid.\ndef volume_cuboid(l,w,h):\n    return l*w*h\n\nprint(volume_cuboid(1,2,3)) # Output: 6\n\n# Write a function to find the volume of a sphere.\nimport math\n\ndef volume_sphere(r):\n    return (4/3)*math.pi*(r**3)\n\nprint(volume_sphere(3)) # Output: 113.09733352068614612\n\n# Write a function to find the surface area of a sphere.\nimport math\n\ndef surfacearea_sphere(r):\n    return 4*math.pi*(r**2)\n\nprint(surfacearea_sphere(3)) # Output: 54.19691449949164126\n\n# Write a function to find the lateral surface area of a cylinder.\nimport math\n\ndef lateral_surface_area_cylinder(r,h):\n    return 2*math.pi*r*h\n\nprint(lateral_surface_area_cylinder(3,5)) # Output",
        "generated_testcode": "assert surfacearea_cuboid(2,3,4) == 2*(2*3+2*4+3*4) + 2*2*3 + 2*3*4 + 2*4*4\n\n",
        "test": "assert surfacearea_cuboid(1,2,3)==22\nassert surfacearea_cuboid(5,7,9)==286\nassert surfacearea_cuboid(10,15,21)==1350",
        "canonical_solution": "def surfacearea_cuboid(l,w,h):\r\n  SA = 2*(l*w + l * h + w * h)\r\n  return SA"
    },
    {
        "number": 380,
        "prompt": "Write a function to generate a two-dimensional array.\ndef multi_list(rownum,colnum):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    lst = []\n    for i in range(rownum):\n        row = []\n        for j in range(colnum):\n            row.append(0)\n        lst.append(row)\n    return lst\n\n# Set the dimensions of the array\nrows = 3\ncolumns = 4\n\n# Generate the array\nlst = multi_list(rows,columns)\n\n# Display the array\nfor row in lst:\n    print(row)\n\n# Generate an array with 3 rows and 4 columns and fill it with 1's\nfor i in range(rows):\n    for j in range(columns):\n        lst[i][j] = 1\n\n# Display the filled array\nfor row in lst:\n    print(row)\n\n# Accessing elements in a two-dimensional array\n# Accessing the element at row 1, column 3\nprint(lst[1][3])\n\n# Modify an element in the array\nlst[2][2] = 5\nprint(lst[2][2])\n\n# Loop through the array and display its elements\nfor i in range(rows):\n    for j in range(columns):\n        print(lst[i][j], end=' ')\n    print()\n\n# Define a 3x3 array with initial values\nlst = [[1,2,3], [4,5,6], [7,8,9]]\n\n# Display the array\nfor row in lst:\n    print(row)\n\n# Define a 3x3 array with initial",
        "generated_testcode": "assert multi_list(3,4) == [[0,0,0,0],[0,0,0,0],[0,0,0,0]]\n",
        "test": "assert multi_list(3,4)==[[0, 0, 0, 0], [0, 1, 2, 3], [0, 2, 4, 6]] \nassert multi_list(5,7)==[[0, 0, 0, 0, 0, 0, 0], [0, 1, 2, 3, 4, 5, 6], [0, 2, 4, 6, 8, 10, 12], [0, 3, 6, 9, 12, 15, 18], [0, 4, 8, 12, 16, 20, 24]]\nassert multi_list(10,15)==[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14], [0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28], [0, 3, 6, 9, 12, 15, 18, 21, 24, 27, 30, 33, 36, 39, 42], [0, 4, 8, 12, 16, 20, 24, 28, 32, 36, 40, 44, 48, 52, 56], [0, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70], [0, 6, 12, 18, 24, 30, 36, 42, 48, 54, 60, 66, 72, 78, 84], [0, 7, 14, 21, 28, 35, 42, 49, 56, 63, 70, 77, 84, 91, 98], [0, 8, 16, 24, 32, 40, 48, 56, 64, 72, 80, 88, 96, 104, 112], [0, 9, 18, 27, 36, 45, 54, 63, 72, 81, 90, 99, 108, 117, 126]]",
        "canonical_solution": "def multi_list(rownum,colnum):\r\n  multi_list = [[0 for col in range(colnum)] for row in range(rownum)]\r\n  for row in range(rownum):\r\n    for col in range(colnum):\r\n        multi_list[row][col]= row*col\r\n  return multi_list\r\n"
    },
    {
        "number": 381,
        "prompt": "Write a function to sort a list of lists by a given index of the inner list.\ndef index_on_inner_list(list_data, index_no):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": true,
        "answer": "    return sorted(list_data, key=lambda x: x[index_no])\n\n\n# Example usage:\nlist_data = [[3, 1, 4], [1, 2, 3], [5, 6, 7], [9, 10, 1]]\nsorted_list = index_on_inner_list(list_data, 1)\nprint(sorted_list)\n# Output: [[1, 2, 3], [3, 1, 4], [9, 10, 1], [5, 6, 7]]\n\n# Another example:\nlist_data = [['apple', 'banana', 'orange'], ['cherry', 'grape', 'kiwi'], ['pear', 'mango', 'apple']]\nsorted_list = index_on_inner_list(list_data, 0)\nprint(sorted_list)\n# Output: [['apple', 'mango', 'apple'], ['banana', 'grape', 'kiwi'], ['cherry', 'pear', 'orange']]\n\n# Test your function with the following code:\nlist_data = [[3, 1, 4], [1, 2, 3], [5, 6, 7], [9, 10, 1]]\nsorted_list = index_on_inner_list(list_data, 2)\nprint(sorted_list)\n# Output: [[3, 1, 4], [5, 6, ",
        "generated_testcode": "assert index_on_inner_list(list_data, 1) == sorted(list_data, key=lambda x: x[1])\n\n# Test the function with the following list_data\nlist_data = [\n    ['apple', 3, 'red'],\n    ['banana', 2, 'yellow'],\n    ['orange', 1, 'orange'],\n    ['grape', 4, 'purple']\n]\n\n",
        "test": "assert index_on_inner_list([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,0)==[('Beau Turnbull', 94, 98), ('Brady Kent', 97, 96), ('Greyson Fulton', 98, 99), ('Wyatt Knott', 91, 94)]\nassert index_on_inner_list([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,1)==[('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98), ('Brady Kent', 97, 96), ('Greyson Fulton', 98, 99)]\nassert index_on_inner_list([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,2)==[('Wyatt Knott', 91, 94), ('Brady Kent', 97, 96), ('Beau Turnbull', 94, 98), ('Greyson Fulton', 98, 99)]",
        "canonical_solution": "from operator import itemgetter\r\ndef index_on_inner_list(list_data, index_no):\r\n    result = sorted(list_data, key=itemgetter(index_no))\r\n    return result"
    },
    {
        "number": 382,
        "prompt": "Write a function to find the number of rotations in a circularly sorted array.\ndef find_rotation_count(A):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    n = len(A)\n    start = 0\n    end = n-1\n    mid = 0\n    while A[start] > A[end]:\n        mid = (start + end) // 2\n        if A[mid] >= A[start]:\n            start = mid + 1\n        else:\n            end = mid\n    return start\n\n# Test the function\nA = [4, 5, 6, 7, 8, 9, 10, 1, 2, 3]\nprint(\"Number of rotations:\", find_rotation_count(A)) # Output: 5\nA = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nprint(\"Number of rotations:\", find_rotation_count(A)) # Output: 0\nA = [10, 1, 2, 3, 4, 5, 6, 7, 8]\nprint(\"Number of rotations:\", find_rotation_count(A)) # Output: 0\nA = [4, 5, 6, 7, 8, 9, 10, 1, 2, 3]\nprint(\"Number of rotations:\", find_rotation_count(A)) # Output: 0\nA = [6, 7, 8, 9, 10, 1, 2, 3, 4]\nprint(\"Number of",
        "generated_testcode": "assert find_rotation_count([4, 5, 6, 7, 8, 9, 10, 1, 2, 3]) == 5\n",
        "test": "assert find_rotation_count([8, 9, 10, 1, 2, 3, 4, 5, 6, 7]) == 3\nassert find_rotation_count([8, 9, 10,2, 5, 6]) == 3\nassert find_rotation_count([2, 5, 6, 8, 9, 10]) == 0",
        "canonical_solution": "def find_rotation_count(A):\r\n    (left, right) = (0, len(A) - 1)\r\n    while left <= right:\r\n        if A[left] <= A[right]:\r\n            return left\r\n        mid = (left + right) // 2\r\n        next = (mid + 1) % len(A)\r\n        prev = (mid - 1 + len(A)) % len(A)\r\n        if A[mid] <= A[next] and A[mid] <= A[prev]:\r\n            return mid\r\n        elif A[mid] <= A[right]:\r\n            right = mid - 1\r\n        elif A[mid] >= A[left]:\r\n            left = mid + 1\r\n    return -1"
    },
    {
        "number": 383,
        "prompt": "Write a python function to toggle all odd bits of a given number.\ndef even_bit_toggle_number(n) : \n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    mask = 0xAAAAAAAA\n    return (n ^ (n & mask)) \n\n# Test the function \nn = 10\nprint(even_bit_toggle_number(n)) \n\n# Output: 5\n# Explanation: The binary representation of 10 is 1010, and the binary representation of its bitwise complement (i.e., toggled version) is 0101. \n# Toggling only the even bits of 1010 will result in 0101, which is 5 in decimal. ",
        "generated_testcode": "assert even_bit_toggle_number(10) == 5\n",
        "test": "assert even_bit_toggle_number(10) == 15\nassert even_bit_toggle_number(20) == 1\nassert even_bit_toggle_number(30) == 11",
        "canonical_solution": "def even_bit_toggle_number(n) : \r\n    res = 0; count = 0; temp = n    \r\n    while(temp > 0 ) : \r\n        if (count % 2 == 0) : \r\n            res = res | (1 << count)      \r\n        count = count + 1\r\n        temp >>= 1 \r\n    return n ^ res "
    },
    {
        "number": 384,
        "prompt": "Write a python function to find the frequency of the smallest value in a given array.\ndef frequency_Of_Smallest(n,arr): \n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    smallest = min(arr) \n    count = 0\n    for i in range(n): \n        if arr[i] == smallest: \n            count = count + 1\n    return count \n  \n# Driver code \narr = [1, 3, 4, 5, 2, 2, 6, 2, 7, 2, 8, 2, 9] \nn = len(arr) \nprint(\"Frequency of smallest element is\", frequency_Of_Smallest(n, arr)) \n  \n# Output: \n# Frequency of smallest element is 3 ",
        "generated_testcode": "assert frequency_Of_Smallest(5,[1,2,3,4,5,5]) == 1\n",
        "test": "assert frequency_Of_Smallest(5,[1,2,3,4,3]) == 1\nassert frequency_Of_Smallest(7,[3,1,2,5,6,2,3]) == 1\nassert frequency_Of_Smallest(7,[3,3,6,3,7,4,9]) == 3",
        "canonical_solution": "def frequency_Of_Smallest(n,arr): \r\n    mn = arr[0] \r\n    freq = 1\r\n    for i in range(1,n): \r\n        if (arr[i] < mn): \r\n            mn = arr[i] \r\n            freq = 1\r\n        elif (arr[i] == mn): \r\n            freq += 1\r\n    return freq "
    },
    {
        "number": 385,
        "prompt": "Write a function to find the n'th perrin number using recursion.\ndef get_perrin(n):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    if n == 1:\n        return 1\n    elif n % 2 == 0:\n        return (n // 2) * get_perrin(n // 2)\n    else:\n        return (n // 2) * get_perrin(n // 2) + 1\n\n# Test the function\nprint(get_perrin(6))  # Output: 12\nprint(get_perrin(9))  # Output: 28\nprint(get_perrin(12)) # Output: 72\nprint(get_perrin(15)) # Output: 120\n\n# Time Complexity: O(2^n)\n# Space Complexity: O(n) ",
        "generated_testcode": "assert get_perrin(1) == 1\n",
        "test": "assert get_perrin(9) == 12\nassert get_perrin(4) == 2\nassert get_perrin(6) == 5",
        "canonical_solution": "def get_perrin(n):\r\n  if (n == 0):\r\n    return 3\r\n  if (n == 1):\r\n    return 0\r\n  if (n == 2):\r\n    return 2 \r\n  return get_perrin(n - 2) + get_perrin(n - 3)"
    },
    {
        "number": 386,
        "prompt": "Write a function to find out the minimum no of swaps required for bracket balancing in the given string.\ndef swap_count(s):\n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    stack = []\n    count = 0\n    for i in s:\n        if i == '(':\n            stack.append(i)\n        elif i == ')':\n            if len(stack) == 0:\n                return -1\n            else:\n                stack.pop()\n        else:\n            continue\n    return len(stack)\n\n# Test case\ns = '()(){()}()()'\nprint(swap_count(s))  # output: 2\ns = '(()()'\nprint(swap_count(s))  # output: -1\ns = '()()()()'\nprint(swap_count(s))  # output: 0\ns = '())('\nprint(swap_count(s))  # output: -1\ns = '((()'\nprint(swap_count(s))  # output: -1\n\n# Time complexity: O(n)\n# Space complexity: O(n)\n\n\n# Given a string containing only open and close parenthesis, implement an algorithm to find the minimum number of parentheses to be added to balance the string.\n# Examples:\n# Input: '(()', Output: 1\n# Input: '())', Output: 1\n# Input: '())(', Output: 2\n# Input: '((', Output: 1\n# Input: '(())', Output: 0\n# Input: ')(' Output: 1\n\ndef min_parentheses_to_balance(s):\n    stack = []\n    count = 0",
        "generated_testcode": "assert swap_count(\"{[()]}\") == 0\n",
        "test": "assert swap_count(\"[]][][\") == 2\nassert swap_count(\"[[][]]\") == 0\nassert swap_count(\"[[][]]][\") == 1",
        "canonical_solution": "def swap_count(s):\r\n\tchars = s\r\n\tcount_left = 0\r\n\tcount_right = 0\r\n\tswap = 0\r\n\timbalance = 0; \r\n\tfor i in range(len(chars)):\r\n\t\tif chars[i] == '[':\r\n\t\t\tcount_left += 1\r\n\t\t\tif imbalance > 0:\r\n\t\t\t\tswap += imbalance\r\n\t\t\t\timbalance -= 1\r\n\t\telif chars[i] == ']':\r\n\t\t\tcount_right += 1\r\n\t\t\timbalance = (count_right - count_left) \r\n\treturn swap"
    },
    {
        "number": 387,
        "prompt": "Write a python function to check whether the hexadecimal number is even or odd.\ndef even_or_odd(N): \n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    if int(N, 16) % 2 == 0: \n        return \"Even\"\n    else: \n        return \"Odd\"\n  \n# Test the function with some sample inputs \nprint(even_or_odd(\"A\")) ",
        "generated_testcode": "assert even_or_odd(\"A\") == \"even\"\n",
        "test": "assert even_or_odd(\"AB3454D\") ==\"Odd\"\nassert even_or_odd(\"ABC\") == \"Even\"\nassert even_or_odd(\"AAD\") == \"Odd\"",
        "canonical_solution": "def even_or_odd(N): \r\n    l = len(N) \r\n    if (N[l-1] =='0'or N[l-1] =='2'or \r\n        N[l-1] =='4'or N[l-1] =='6'or \r\n        N[l-1] =='8'or N[l-1] =='A'or \r\n        N[l-1] =='C'or N[l-1] =='E'): \r\n        return (\"Even\") \r\n    else: \r\n        return (\"Odd\") "
    },
    {
        "number": 388,
        "prompt": "Write a python function to find the highest power of 2 that is less than or equal to n.\ndef highest_Power_of_2(n): \n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    p = 0\n    while (n > 0): \n        n >>= 1\n        p += 1\n    return 1 << (p-1) \n\n# test the function \nn = 10\nprint(highest_Power_of_2(n)) ",
        "generated_testcode": "assert highest_Power_of_2(10) == 8\n",
        "test": "assert highest_Power_of_2(10) == 8\nassert highest_Power_of_2(19) == 16\nassert highest_Power_of_2(32) == 32",
        "canonical_solution": "def highest_Power_of_2(n): \r\n    res = 0; \r\n    for i in range(n, 0, -1): \r\n        if ((i & (i - 1)) == 0): \r\n            res = i; \r\n            break; \r\n    return res; "
    },
    {
        "number": 389,
        "prompt": "Write a function to find the n'th lucas number.\ndef find_lucas(n): \n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": true,
        "answer": "    if n == 0: \n        return 2\n    elif n == 1: \n        return 1\n    else: \n        return find_lucas(n - 1) + find_lucas(n - 2) \n\n# Test the function\nprint(find_lucas(6)) # Output: 21\n\n# Time Complexity: O(2^n)\n# Space Complexity: O(n)\n\n# To optimize the function we can use memoization to store the already calculated values\ndef find_lucas_memo(n, memo={}): \n    if n == 0: \n        return 2\n    elif n == 1: \n        return 1\n    else: \n        if n not in memo: \n            memo[n] = find_lucas_memo(n - 1) + find_lucas_memo(n - 2)\n        return memo[n] \n\n# Test the function\nprint(find_lucas_memo(6)) # Output: 21\n\n# Time Complexity: O(n)\n# Space Complexity: O(n)\n\n# Alternatively, we can use dynamic programming to find the nth lucas number\ndef find_lucas_dp(n): \n    if n == 0: \n        return 2\n    elif n == 1: \n        return 1\n    else: \n        a = 2\n",
        "generated_testcode": "assert find_lucas(0) == 2\n",
        "test": "assert find_lucas(9) == 76\nassert find_lucas(4) == 7\nassert find_lucas(3) == 4",
        "canonical_solution": "def find_lucas(n): \r\n\tif (n == 0): \r\n\t\treturn 2\r\n\tif (n == 1): \r\n\t\treturn 1\r\n\treturn find_lucas(n - 1) + find_lucas(n - 2) "
    },
    {
        "number": 390,
        "prompt": "Write a function to insert a given string at the beginning of all items in a list.\ndef add_string(list,string):\n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    new_list = []\n    for item in list:\n        new_list.append(string + item)\n    return new_list\n\n# Example usage:\nprint(add_string(['apple', 'banana', 'cherry'], 'fruit: '))  # should return ['fruit: apple', 'fruit: banana', 'fruit: cherry']\n\n# Test your function with the example usage above. ",
        "generated_testcode": "assert add_string(['apple','banana','orange'],'fruit: ') == ['fruit: apple', 'fruit: banana', 'fruit: orange']\n",
        "test": "assert add_string([1,2,3,4],'temp{0}')==['temp1', 'temp2', 'temp3', 'temp4']\nassert add_string(['a','b','c','d'], 'python{0}')==[ 'pythona', 'pythonb', 'pythonc', 'pythond']\nassert add_string([5,6,7,8],'string{0}')==['string5', 'string6', 'string7', 'string8']",
        "canonical_solution": "def add_string(list,string):\r\n add_string=[string.format(i) for i in  list]\r\n return add_string"
    },
    {
        "number": 391,
        "prompt": "Write a function to convert more than one list to nested dictionary.\ndef convert_list_dictionary(l1, l2, l3):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    result = {}\n    for i in range(len(l1)):\n        result[l1[i]] = {'key1': l2[i], 'key2': l3[i]}\n    return result\n\n\n# Test the function with sample data\nl1 = ['a', 'b', 'c']\nl2 = [1, 2, 3]\nl3 = ['x', 'y', 'z']\nprint(convert_list_dictionary(l1, l2, l3))\n\n# Output: {'a': {'key1': 1, 'key2': 'x'}, 'b': {'key1': 2, 'key2': 'y'}, 'c': {'key1': 3, 'key2': 'z'}}\n\n# Example usage:\n# convert_list_dictionary(['name', 'age', 'gender'], ['John', 25, 'Male'], ['Alice', 20, 'Female'])\n# Output: {'name': {'key1': 'John', 'key2': 'age'}, 'age': {'key1': 25, 'key2': 'Male'}, 'gender': {'key1': 'Alice', 'key2': 'Female'}}\n\n# Another example\n# convert_list_dictionary(['name', 'age', 'gender', 'location'], ['John', 25, 'Male', 'New York'], ['Alice', 20, 'Female', 'Boston'])\n# Output: {'name': {'key1': 'John', '",
        "generated_testcode": "assert convert_list_dictionary([\"a\", \"b\", \"c\"], [1, 2, 3], [True, False, True]) == {\"a\": {\"1\": True, \"2\": False, \"3\": True}\n                                                                               \"b\": {\"1\": True, \"2\": False, \"3\": True}\n                                                                               \"c\": {\"1\": True, \"2\": False, \"3\": True}}\n\n# Test the function with the given input and expected output. ",
        "test": "assert convert_list_dictionary([\"S001\", \"S002\", \"S003\", \"S004\"],[\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"] ,[85, 98, 89, 92])==[{'S001': {'Adina Park': 85}}, {'S002': {'Leyton Marsh': 98}}, {'S003': {'Duncan Boyle': 89}}, {'S004': {'Saim Richards': 92}}]\nassert convert_list_dictionary([\"abc\",\"def\",\"ghi\",\"jkl\"],[\"python\",\"program\",\"language\",\"programs\"],[100,200,300,400])==[{'abc':{'python':100}},{'def':{'program':200}},{'ghi':{'language':300}},{'jkl':{'programs':400}}]\nassert convert_list_dictionary([\"A1\",\"A2\",\"A3\",\"A4\"],[\"java\",\"C\",\"C++\",\"DBMS\"],[10,20,30,40])==[{'A1':{'java':10}},{'A2':{'C':20}},{'A3':{'C++':30}},{'A4':{'DBMS':40}}]",
        "canonical_solution": "def convert_list_dictionary(l1, l2, l3):\r\n     result = [{x: {y: z}} for (x, y, z) in zip(l1, l2, l3)]\r\n     return result"
    },
    {
        "number": 392,
        "prompt": "Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\ndef get_max_sum (n):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    memo = {}\n    def helper(n):\n        if n in memo:\n            return memo[n]\n        if n == 1:\n            return 1\n        if n % 2 == 0:\n            x = helper(n // 2)\n        else:\n            x = 0\n        if n % 3 == 0:\n            y = helper(n // 3)\n        else:\n            y = 0\n        if n % 4 == 0:\n            z = helper(n // 4)\n        else:\n            z = 0\n        if n % 5 == 0:\n            w = helper(n // 5)\n        else:\n            w = 0\n        memo[n] = max(x, y, z, w, n) + f(n)\n        return memo[n]\n    return helper(n)\n\n# Test cases\nprint(get_max_sum(12)) # 12\nprint(get_max_sum(10)) # 11\nprint(get_max_sum(15)) # 15\nprint(get_max_sum(25)) # 25\nprint(get_max_sum(75)) # 75\nprint(get_max_sum(100)) # 100\nprint(get_max_sum(125)) # 125\nprint(get_max_sum(200)) # 200\nprint",
        "generated_testcode": "assert get_max_sum(10) == 10\n",
        "test": "assert get_max_sum(60) == 106\nassert get_max_sum(10) == 12\nassert get_max_sum(2) == 2",
        "canonical_solution": "def get_max_sum (n):\r\n\tres = list()\r\n\tres.append(0)\r\n\tres.append(1)\r\n\ti = 2\r\n\twhile i<n + 1:\r\n\t\tres.append(max(i, (res[int(i / 2)] \r\n\t\t\t\t\t\t+ res[int(i / 3)] +\r\n\t\t\t\t\t\t\tres[int(i / 4)]\r\n\t\t\t\t\t\t+ res[int(i / 5)])))\r\n\t\ti = i + 1\r\n\treturn res[n]"
    },
    {
        "number": 393,
        "prompt": "Write a function to find the list with maximum length using lambda function.\ndef max_length_list(input_list):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    max_list = lambda lst: max(lst, key=len)\n    return max_list(input_list)\n\n# Test the function with sample input\ninput_list = [\"hello\", \"world\", \"how\", \"are\", \"you\"]\nprint(max_length_list(input_list))  # Output: \"hello\"\n\ninput_list = [\"1\", \"2\", \"3\", \"4\", \"5\"]\nprint(max_length_list(input_list))  # Output: \"12345\"\n\ninput_list = [\"apple\", \"banana\", \"cherry\", \"kiwi\", \"mango\"]\nprint(max_length_list(input_list))  # Output: \"kiwi\"\n\ninput_list = [\"cat\", \"dog\", \"elephant\", \"donkey\", \"lion\"]\nprint(max_length_list(input_list))  # Output: \"elephant\"\n\ninput_list = [\"python\", \"java\", \"kotlin\", \"javascript\"]\nprint(max_length_list(input_list))  # Output: \"python\"\n\n# Time complexity of this function is O(n) as it iterates over the list only once to find the maximum length element. ",
        "generated_testcode": "assert max_length_list([[1, 2, 3], [4, 5], [6, 7, 8, 9], [10]] == [6, 7, 8, 9]\n",
        "test": "assert max_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [13, 15, 17])\nassert max_length_list([[1,2,3,4,5],[1,2,3,4],[1,2,3],[1,2],[1]])==(5,[1,2,3,4,5])\nassert max_length_list([[3,4,5],[6,7,8,9],[10,11,12]])==(4,[6,7,8,9])",
        "canonical_solution": "def max_length_list(input_list):\r\n    max_length = max(len(x) for x in input_list )   \r\n    max_list = max(input_list, key = lambda i: len(i))    \r\n    return(max_length, max_list)"
    },
    {
        "number": 394,
        "prompt": "Write a function to check if given tuple is distinct or not.\ndef check_distinct(test_tup):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    for i in range(len(test_tup)):\n        for j in range(len(test_tup)):\n            if i == j:\n                continue\n            if test_tup[i] == test_tup[j]:\n                return False\n    return True\n\n# Test the function\ntup = (1, 2, 3, 4, 5, 6)\nprint(check_distinct(tup))\ntup = (1, 2, 3, 4, 4, 5)\nprint(check_distinct(tup))\ntup = (1, 1, 2, 3, 4, 5)\nprint(check_distinct(tup))\ntup = (1, 2, 3, 4, 5)\nprint(check_distinct(tup))\n\n# Output:\n# True\n# False\n# False\n# True\n\n# Write a function to check if given tuple is a palindrome or not\ndef check_palindrome(test_tup):\n    if len(test_tup) < 2:\n        return True\n    for i in range(len(test_tup) // 2):\n        if test_tup[i] != test_tup[-i - 1]:\n            return False\n    return True\n\n# Test the function\ntup = (1, 2, 3, 3, 2, 1)\nprint(check_palindrome(tup",
        "generated_testcode": "assert check_distinct((1, 2, 3, 4, 5, 6) == True)\n",
        "test": "assert check_distinct((1, 4, 5, 6, 1, 4)) == False\nassert check_distinct((1, 4, 5, 6)) == True\nassert check_distinct((2, 3, 4, 5, 6)) == True",
        "canonical_solution": "def check_distinct(test_tup):\r\n  res = True\r\n  temp = set()\r\n  for ele in test_tup:\r\n    if ele in temp:\r\n      res = False\r\n      break\r\n    temp.add(ele)\r\n  return (res) "
    },
    {
        "number": 395,
        "prompt": "Write a python function to find the first non-repeated character in a given string.\ndef first_non_repeating_character(str1):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    # Your code goes here\n    #return the first non-repeated character in the string or -1 if no non-repeated character\n    # initialize a dictionary to keep track of character frequency\n    freq_dict = {}\n    # loop through the string\n    for char in str1:\n        if char in freq_dict:\n            freq_dict[char] += 1\n        else:\n            freq_dict[char] = 1\n    # loop through the string again and check if the character frequency is 1\n    for char in str1:\n        if freq_dict[char] == 1:\n            return char\n    # if no character has frequency 1, return -1\n    return -1\n\n# Test the function with the sample input\nprint(first_non_repeating_character(\"geeksforgeeks\"))  # Output: g (first non-repeated character)\nprint(first_non_repeating_character(\"hello\"))       # Output: -1 (no non-repeated character) ",
        "generated_testcode": "assert first_non_repeating_character(\"abcdabcdfg\") == \"f\"\n",
        "test": "assert first_non_repeating_character(\"abcabc\") == None\nassert first_non_repeating_character(\"abc\") == \"a\"\nassert first_non_repeating_character(\"ababc\") == \"c\"",
        "canonical_solution": "def first_non_repeating_character(str1):\r\n  char_order = []\r\n  ctr = {}\r\n  for c in str1:\r\n    if c in ctr:\r\n      ctr[c] += 1\r\n    else:\r\n      ctr[c] = 1 \r\n      char_order.append(c)\r\n  for c in char_order:\r\n    if ctr[c] == 1:\r\n      return c\r\n  return None"
    },
    {
        "number": 396,
        "prompt": "Write a function to check whether the given string starts and ends with the same character or not using regex.\ndef check_char(string): \n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    pattern = r'^(\\w).*\\1$'\n    return bool(re.match(pattern, string)) ",
        "generated_testcode": "assert check_char(\"hello\") == False\n",
        "test": "assert check_char(\"abba\") == \"Valid\"\nassert check_char(\"a\") == \"Valid\"\nassert check_char(\"abcd\") == \"Invalid\"",
        "canonical_solution": "import re  \r\nregex = r'^[a-z]$|^([a-z]).*\\1$'\r\ndef check_char(string): \r\n\tif(re.search(regex, string)): \r\n\t\treturn \"Valid\" \r\n\telse: \r\n\t\treturn \"Invalid\" "
    },
    {
        "number": 397,
        "prompt": "Write a function to find the median of three specific numbers.\ndef median_numbers(a,b,c):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    sorted_list = sorted([a,b,c])\n    return sorted_list[1]\n\n#Test the function with the following inputs\nprint(median_numbers(2,5,3)) #Output: 3\nprint(median_numbers(1,10,2)) #Output: 2\nprint(median_numbers(-5,0,5)) #Output: 0\n\n#Write a function to find the median of three specific numbers without using the sorted() function.\ndef median_numbers(a,b,c):\n    if a > b and a > c:\n        if b > c:\n            return b\n        else:\n            return c\n    elif b > a and b > c:\n        if a > c:\n            return a\n        else:\n            return c\n    else:\n        if a > b:\n            return a\n        else:\n            return b\n\n#Test the function with the same inputs as above\nprint(median_numbers(2,5,3)) #Output: 3\nprint(median_numbers(1,10,2)) #Output: 2\nprint(median_numbers(-5,0,5)) #Output: 0\n\n#Create a function to check if a number is prime\ndef is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2,int(n**0.5)+1):\n        if n % i == 0:\n            return False\n    return True\n\n#Test",
        "generated_testcode": "assert median_numbers(1,2,3) == 2\n",
        "test": "assert median_numbers(25,55,65)==55.0\nassert median_numbers(20,10,30)==20.0\nassert median_numbers(15,45,75)==45.0",
        "canonical_solution": "def median_numbers(a,b,c):\r\n if a > b:\r\n    if a < c:\r\n        median = a\r\n    elif b > c:\r\n        median = b\r\n    else:\r\n        median = c\r\n else:\r\n    if a > c:\r\n        median = a\r\n    elif b < c:\r\n        median = b\r\n    else:\r\n        median = c\r\n return median"
    },
    {
        "number": 398,
        "prompt": "Write a function to compute the sum of digits of each number of a given list.\ndef sum_of_digits(nums):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    sum_digits = []\n    for num in nums:\n        sum_digit = 0\n        for digit in str(num):\n            sum_digit += int(digit)\n        sum_digits.append(sum_digit)\n    return sum_digits\n\n# Test the function\nprint(sum_of_digits([12, 345, 6789, 1011213])) # [6, 12, 24, 23]\nprint(sum_of_digits([9, 99, 123, 1234, 5])) # [9, 18, 6, 10, 10]\nprint(sum_of_digits([0, 100, 10000, 123456789, 987654321]) # [0, 2, 9, 45, 36]\nprint(sum_of_digits([])) # []\n\n# Test the function with invalid input\ntry:\n    print(sum_of_digits([1, 2, \"3\", 4, 5]) # Should raise a TypeError since \"3\" is not an integer\nexcept TypeError as e:\n    print(e) # Error: unsupported operand type(s) for +=: 'int' and 'str'\n\n\n# Write a function to compute the sum of digits of a number\ndef sum_digits(",
        "generated_testcode": "assert sum_of_digits([12, 34, 56, 78, 90]) == [12, 15, 13, 17]\n",
        "test": "assert sum_of_digits([10,2,56])==14\nassert sum_of_digits([[10,20,4,5,'b',70,'a']])==19\nassert sum_of_digits([10,20,-4,5,-70])==19",
        "canonical_solution": "def sum_of_digits(nums):\r\n    return sum(int(el) for n in nums for el in str(n) if el.isdigit())"
    },
    {
        "number": 399,
        "prompt": "Write a function to perform the mathematical bitwise xor operation across the given tuples.\ndef bitwise_xor(test_tup1, test_tup2):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    return tuple(a ^ b for a, b in zip(test_tup1, test_tup2))\n\n# Example usage:\ntup1 = (5, 6, 7)\ntup2 = (3, 2, 1)\nprint(bitwise_xor(tup1, tup2))  # Output: (6, 4, 6)\n\ntup3 = (1, 1, 0, 1, 0)\ntup4 = (0, 0, 1, 1, 0)\nprint(bitwise_xor(tup3, tup4))  # Output: (1, 1, 1, 1, 0) ",
        "generated_testcode": "assert bitwise_xor((1, 2, 3), (4, 5, 6)) == (5, 7, 2)\n",
        "test": "assert bitwise_xor((10, 4, 6, 9), (5, 2, 3, 3)) == (15, 6, 5, 10)\nassert bitwise_xor((11, 5, 7, 10), (6, 3, 4, 4)) == (13, 6, 3, 14)\nassert bitwise_xor((12, 6, 8, 11), (7, 4, 5, 6)) == (11, 2, 13, 13)",
        "canonical_solution": "def bitwise_xor(test_tup1, test_tup2):\r\n  res = tuple(ele1 ^ ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\r\n  return (res) "
    },
    {
        "number": 400,
        "prompt": "Write a function to extract the frequency of unique tuples in the given list order irrespective.\ndef extract_freq(test_list):\n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    freq = {}\n    for i in test_list:\n        if i in freq:\n            freq[i] += 1\n        else:\n            freq[i] = 1\n    return freq\n\n# example usage\ntest_list = [(1, 2, 3), (3, 1, 2), (1, 2, 3), (2, 3, 1), (1, 3, 2), (2, 3, 1)]\nprint(extract_freq(test_list))\n\n# output: {(1, 2, 3): 2, (3, 1, 2): 1, (2, 3, 1): 2}\n\n# Example usage 2:\ntest_list = [(1, 2), (3, 1), (2, 3), (1, 2), (3, 1), (2, 3), (2, 3)]\nprint(extract_freq(test_list))\n\n# output: {(1, 2): 2, (3, 1): 2, (2, 3): 3}\n\n# Note: The order of the tuples is not important here.\n\n# example usage 3:\ntest_list = [1, 2, 2, 3, 3, 4, 4, 5, 5, 5]\nprint(extract_freq(test_list))\n\n# output: {1: 1",
        "generated_testcode": "assert extract_freq([\"apple\", \"banana\", \"apple\", \"orange\", \"banana\", \"apple\", \"orange\", \"banana\", \"kiwi\"]) == {\"apple\": 3, \"banana\": 3, \"orange\": 2, \"kiwi\": 1}\n",
        "test": "assert extract_freq([(3, 4), (1, 2), (4, 3), (5, 6)] ) == 3\nassert extract_freq([(4, 15), (2, 3), (5, 4), (6, 7)] ) == 4\nassert extract_freq([(5, 16), (2, 3), (6, 5), (6, 9)] ) == 4",
        "canonical_solution": "def extract_freq(test_list):\r\n  res = len(list(set(tuple(sorted(sub)) for sub in test_list)))\r\n  return (res)"
    },
    {
        "number": 401,
        "prompt": "Write a function to perform index wise addition of tuple elements in the given two nested tuples.\ndef add_nested_tuples(test_tup1, test_tup2):\n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    result = []\n    for i in range(len(test_tup1)):\n        result.append(tuple(map(sum, zip(test_tup1[i], test_tup2[i])))\n    return tuple(result)\n\n# Example usage:\ntest_tup1 = ((1,2,3), (4,5,6), (7,8,9))\ntest_tup2 = ((10,20,30), (40,50,60), (70,80,90))\nprint(add_nested_tuples(test_tup1, test_tup2))  # Output: ((11, 22, 33), (44, 55, 66), (77, 88, 99))\n\n# Explanation:\n# The function takes two tuples as input and creates an empty list called result. Then it iterates over the length of the first tuple using a for loop. \n# In each iteration, it zips the i-th tuple of test_tup1 and test_tup2 using the zip function and applies the sum function using the map function \n# on each element of the two tuples. This returns a tuple of the sum of the elements in the i-th index of the two tuples. This tuple is then appended \n# to the result list. Finally, the function returns the result list as a tuple. ",
        "generated_testcode": "assert add_nested_tuples(((1,2,3), (4,5,6), (7,8,9)), ((10,20,30), (40,50,60), (70,80,90)) ) == ((11,22,33), (44,55,66), (77,88,99))\n",
        "test": "assert add_nested_tuples(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((7, 10), (7, 14), (3, 10), (8, 13))\nassert add_nested_tuples(((2, 4), (5, 6), (3, 10), (2, 11)), ((7, 8), (4, 10), (2, 2), (8, 4))) == ((9, 12), (9, 16), (5, 12), (10, 15))\nassert add_nested_tuples(((3, 5), (6, 7), (4, 11), (3, 12)), ((8, 9), (5, 11), (3, 3), (9, 5))) == ((11, 14), (11, 18), (7, 14), (12, 17))",
        "canonical_solution": "def add_nested_tuples(test_tup1, test_tup2):\r\n  res = tuple(tuple(a + b for a, b in zip(tup1, tup2))\r\n   for tup1, tup2 in zip(test_tup1, test_tup2))\r\n  return (res) "
    },
    {
        "number": 402,
        "prompt": "Write a function to compute the value of ncr%p.\ndef ncr_modp(n, r, p): \n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    num = 1\n    den = 1\n    for i in range(1, r + 1): \n        num = (num * (n - i + 1) * (n - r + i) * i) % p \n        den = (den * i) % p \n    return (num * mod_inverse(den, p)) % p \n\n# Modular inverse of a and p \ndef mod_inverse(a, p): \n    g = gcd(a, p)[1] \n    if g == 1: \n        return g \n    else: \n        return (p - g) \n\n# Function to find gcd of a and b \ndef gcd(a, b): \n    if a == 0: \n        return (b, 0, 1) \n    else: \n        gcd, x, y = gcd(b % a, a) \n        return (gcd, y - (b // a) * x, x) \n\n# Driver Code \nn = 10\nr = 3\np = 5\nprint(\"Value of ncr%p is\", ncr_modp(n, r, p)) ",
        "generated_testcode": "assert ncr_modp(10, 5, 7) == 2\n",
        "test": "assert ncr_modp(10,2,13)==6\nassert ncr_modp(15,12,43)==25\nassert ncr_modp(17,9,18)==10",
        "canonical_solution": "def ncr_modp(n, r, p): \r\n    C = [0 for i in range(r+1)]   \r\n    C[0] = 1\r\n    for i in range(1, n+1): \r\n        for j in range(min(i, r), 0, -1): \r\n            C[j] = (C[j] + C[j-1]) % p   \r\n    return C[r] "
    },
    {
        "number": 403,
        "prompt": "Write a function to check if a url is valid or not using regex.\ndef is_valid_URL(str):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    import re\n    pattern = re.compile(\n        r'^(?:http|ftp)s?://'  # http:// or https://\n        r'(?:(?:[A-Z0-9](?:[A-Z0-9-]{0,61}[A-Z0-9])?\\.)+(?:[A-Z]{2,6}\\.?|[A-Z0-9-]{2,}\\.?)|'  # domain\n        r'localhost|'  # localhost...\n        r'\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3})'  # ...or ip\n        r'(?::\\d+)?'  # optional port\n        r'(?:/?|[/?]\\S+)$', re.IGNORECASE)\n    return re.match(pattern, str)\n\n\nprint(is_valid_URL(\"http://www.google.com\"))  # True\nprint(is_valid_URL(\"https://www.google.com\"))  # True\nprint(is_valid_URL(\"www.google.com\"))  # False\nprint(is_valid_URL(\"www.google.com/index.html\"))  # True\nprint(is_valid_URL(\"http://www.google.com/index.html\"))  # True\nprint(is_valid_URL(\"https://www.google.com/index.html\"))  # True\nprint(is_valid_URL(\"https://google.com:808",
        "generated_testcode": "assert is_valid_URL(\"https://www.google.com\") == True\n",
        "test": "assert is_valid_URL(\"https://www.google.com\") == True\nassert is_valid_URL(\"https:/www.gmail.com\") == False\nassert is_valid_URL(\"https:// www.redit.com\") == False",
        "canonical_solution": "import re\r\ndef is_valid_URL(str):\r\n\tregex = (\"((http|https)://)(www.)?\" +\r\n\t\t\t\"[a-zA-Z0-9@:%._\\\\+~#?&//=]\" +\r\n\t\t\t\"{2,256}\\\\.[a-z]\" +\r\n\t\t\t\"{2,6}\\\\b([-a-zA-Z0-9@:%\" +\r\n\t\t\t\"._\\\\+~#?&//=]*)\")\r\n\tp = re.compile(regex)\r\n\tif (str == None):\r\n\t\treturn False\r\n\tif(re.search(p, str)):\r\n\t\treturn True\r\n\telse:\r\n\t\treturn False"
    },
    {
        "number": 404,
        "prompt": "Write a python function to find the minimum of two numbers.\ndef minimum(a,b):   \n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    if a < b:\n        return a\n    else:\n        return b\n\nprint(minimum(5,9)) # Output: 5\nprint(minimum(9,5)) # Output: 5 ",
        "generated_testcode": "assert minimum(10, 5) == 5\n",
        "test": "assert minimum(1,2) == 1\nassert minimum(-5,-4) == -5\nassert minimum(0,0) == 0",
        "canonical_solution": "def minimum(a,b):   \r\n    if a <= b: \r\n        return a \r\n    else: \r\n        return b "
    },
    {
        "number": 405,
        "prompt": "Write a function to check whether an element exists within a tuple.\ndef check_tuplex(tuplex,tuple1): \n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    for i in tuplex:\n        if i == tuple1:\n            return True\n    return False\n\n# Example usage:\nmy_tuple = (1, 2, 3, 4, 5)\nprint(check_tuplex(my_tuple, 2)) # True\nprint(check_tuplex(my_tuple, 6)) # False\n\n#Example usage with a list comprehension\nmy_tuple = (1, 2, 3, 4, 5)\nnew_list = [i for i in my_tuple if check_tuplex(my_tuple, i)]\nprint(new_list) # [1, 2, 3, 4, 5]\n\n#Using the 'in' keyword to check if an element is in a tuple\ndef check_tuplex_in(tuplex, tuple1):\n    return tuple1 in tuplex\n\nmy_tuple = (1, 2, 3, 4, 5)\nprint(check_tuplex_in(my_tuple, 2)) # True\nprint(check_tuplex_in(my_tuple, 6)) # False\n\nnew_list = [i for i in my_tuple if i in my_tuple]\nprint(new_list) # [1, 2, 3, 4, 5]\n\n#Using a lambda function\ncheck_tuplex_lambda = lambda tuplex, tuple1: tuple1 in tuplex\nprint(check_tuplex_lambda(my_tuple, 2)) #",
        "generated_testcode": "assert check_tuplex((1,2,3,4,5,6,7,8,9), 5) == True\n",
        "test": "assert check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),'r')==True\nassert check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),'5')==False\nassert check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\",\"e\"),3)==True",
        "canonical_solution": "def check_tuplex(tuplex,tuple1): \r\n  if tuple1 in tuplex:\r\n    return True\r\n  else:\r\n     return False"
    },
    {
        "number": 406,
        "prompt": "Write a python function to find the parity of a given number.\ndef find_Parity(x): \n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    if x % 2 == 0: \n        return \"Even\"\n    else: \n        return \"Odd\"\n\n#Taking user input\nn=int(input(\"Enter a number: \"))\nprint(\"Parity of\",n,\"is\",find_Parity(n)) ",
        "generated_testcode": "assert find_Parity(1) == \"Even\"\n",
        "test": "assert find_Parity(12) == \"Even Parity\"\nassert find_Parity(7) == \"Odd Parity\"\nassert find_Parity(10) == \"Even Parity\"",
        "canonical_solution": "def find_Parity(x): \r\n    y = x ^ (x >> 1); \r\n    y = y ^ (y >> 2); \r\n    y = y ^ (y >> 4); \r\n    y = y ^ (y >> 8); \r\n    y = y ^ (y >> 16); \r\n    if (y & 1): \r\n        return (\"Odd Parity\"); \r\n    return (\"Even Parity\"); "
    },
    {
        "number": 407,
        "prompt": "Write a function to create the next bigger number by rearranging the digits of a given number.\ndef rearrange_bigger(n):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    digits = [int(x) for x in str(n)]\n    digits.sort(reverse=True)\n    return int(\"\".join(map(str, digits))\n\n# Test cases\nprint(rearrange_bigger(1234))  # Output: 4321\nprint(rearrange_bigger(56789)) # Output: 98765\nprint(rearrange_bigger(123))  # Output: 321\nprint(rearrange_bigger(1230)) # Output: 3210\nprint(rearrange_bigger(12305))# Output: 53210\nprint(rearrange_bigger(123056))# Output: 653210\nprint(rearrange_bigger(1230567))# Output: 7653210\nprint(rearrange_bigger(12305678))# Output: 87653210\nprint(rearrange_bigger(123056789))# Output: 987653210\nprint(rearrange_bigger(987654321))# Output: 987654321\nprint(rearrange_bigger(1))    # Output: 1\nprint(rearrange_bigger(10))   # Output",
        "generated_testcode": "assert (rearrange_bigger(1234) == 4321)\n",
        "test": "assert rearrange_bigger(12)==21\nassert rearrange_bigger(10)==False\nassert rearrange_bigger(102)==120",
        "canonical_solution": "def rearrange_bigger(n):\r\n    nums = list(str(n))\r\n    for i in range(len(nums)-2,-1,-1):\r\n        if nums[i] < nums[i+1]:\r\n            z = nums[i:]\r\n            y = min(filter(lambda x: x > z[0], z))\r\n            z.remove(y)\r\n            z.sort()\r\n            nums[i:] = [y] + z\r\n            return int(\"\".join(nums))\r\n    return False"
    },
    {
        "number": 408,
        "prompt": "Write a function to find k number of pairs which consist of one element from the first array and one element from the second array.\ndef k_smallest_pairs(nums1, nums2, k):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    if not nums1 or not nums2:\n        return []\n    nums1.sort()\n    nums2.sort()\n    res = []\n    i, j = 0, 0\n    while k:\n        res.append((nums1[i], nums2[j]))\n        i += 1\n        j += 1\n        k -= 1\n    return res\n\n# Test cases\nprint(k_smallest_pairs([1, 7, 11], [2, 4, 6], 3)) # [(1,2), (1,4), (7,2)]\nprint(k_smallest_pairs([1, 7, 11], [2, 4, 6], 1)) # [(1,2)]\nprint(k_smallest_pairs([1, 7, 11], [2, 4, 6], 0) # []\nprint(k_smallest_pairs([], [2, 4, 6], 1)) # []\nprint(k_smallest_pairs([1, 7, 11], [], 1) # []\nprint(k_smallest_pairs([1, 7, 11], [2, 4, 6], 4) # [(1,2), (1,4), (7,2), (7,4)]\nprint(k_smallest_pairs([1, 7, 11], [2, 4, ",
        "generated_testcode": "assert k_smallest_pairs([1, 7, 11], [2, 4, 6, 8, 10], 3) == [(1, 2), (1, 4), (1, 6)]\n",
        "test": "assert k_smallest_pairs([1,3,7],[2,4,6],2)==[[1, 2], [1, 4]]\nassert k_smallest_pairs([1,3,7],[2,4,6],1)==[[1, 2]]\nassert k_smallest_pairs([1,3,7],[2,4,6],7)==[[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]",
        "canonical_solution": "import heapq\r\ndef k_smallest_pairs(nums1, nums2, k):\r\n   queue = []\r\n   def push(i, j):\r\n       if i < len(nums1) and j < len(nums2):\r\n           heapq.heappush(queue, [nums1[i] + nums2[j], i, j])\r\n   push(0, 0)\r\n   pairs = []\r\n   while queue and len(pairs) < k:\r\n       _, i, j = heapq.heappop(queue)\r\n       pairs.append([nums1[i], nums2[j]])\r\n       push(i, j + 1)\r\n       if j == 0:\r\n           push(i + 1, 0)\r\n   return pairs"
    },
    {
        "number": 409,
        "prompt": "Write a function to find the minimum product from the pairs of tuples within a given list.\ndef min_product_tuple(list1):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    result = []\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            result.append(list1[i][0]*list1[j][0])\n            result.append(list1[i][1]*list1[j][1])\n    return min(result)\n\n# Example usage:\nlist1 = [(3, 4), (5, 2), (7, 6)]\nprint(min_product_tuple(list1))  # Output: 12\n\nlist2 = [(1, 2), (3, 4), (5, 6), (7, 8)]\nprint(min_product_tuple(list2))  # Output: 2\n\nlist3 = [(1, 3), (2, 4), (5, 6), (7, 8), (9, 10)]\nprint(min_product_tuple(list3))  # Output: 12\n\nlist4 = [(1, 3), (2, 4), (5, 6), (7, 8), (9, 10), (11, 12)]\nprint(min_product_tuple(list4))  # Output: 12\n\nlist5 = [(1, 1), (2, 2), (3, 3), (4, 4), (5, 5)]\nprint(min_product_tuple(list5))  # Output: 2\n\nlist6 = [(",
        "generated_testcode": "assert min_product_tuple([(1, 2), (3, 4), (5, 6)]) == 12\n",
        "test": "assert min_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==8\nassert min_product_tuple([(10,20), (15,2), (5,10)] )==30\nassert min_product_tuple([(11,44), (10,15), (20,5), (12, 9)] )==100",
        "canonical_solution": "def min_product_tuple(list1):\r\n    result_min = min([abs(x * y) for x, y in list1] )\r\n    return result_min"
    },
    {
        "number": 410,
        "prompt": "Write a function to find the minimum value in a given heterogeneous list.\ndef min_val(listval):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": true,
        "answer": "    if len(listval) == 0:\n        return None\n    else:\n        minval = listval[0]\n        for i in range(1, len(listval)):\n            if type(listval[i]) == int or type(listval[i]) == float:\n                if listval[i] < minval:\n                    minval = listval[i]\n        return minval\n\nprint(min_val([3, 1.2, \"hello\", 6, 0.5, 4])) # should return 0.5\nprint(min_val([3, 1.2, \"hello\", 6, -1, 4, -2])) # should return -2\nprint(min_val([])) # should return None\nprint(min_val([0, 1, 2, 3, 4, 5])) # should return 0\nprint(min_val([-3, -2, -1, 0, 1, 2, 3, 4, 5])) # should return -3 ",
        "generated_testcode": "assert min_val([1, 2, 3, 4, 5, 6, 7]) == 1\n",
        "test": "assert min_val(['Python', 3, 2, 4, 5, 'version'])==2\nassert min_val(['Python', 15, 20, 25])==15\nassert min_val(['Python', 30, 20, 40, 50, 'version'])==20",
        "canonical_solution": "def min_val(listval):\r\n     min_val = min(i for i in listval if isinstance(i, int))\r\n     return min_val"
    },
    {
        "number": 411,
        "prompt": "Write a function to convert the given snake case string to camel case string by using regex.\ndef snake_to_camel(word):\n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    words = word.split(\"_\")\n    return words[0] + \"\".join(word.capitalize() for word in words[1:])\n\n# Test cases\nprint(snake_to_camel(\"hello_world\")) # Output: \"helloWorld\"\nprint(snake_to_camel(\"a_b_c_d_e\")) # Output: \"aBCDE\"\nprint(snake_to_camel(\"hi_there\")) # Output: \"hiThere\"\nprint(snake_to_camel(\"this_is_a_test_string\")) # Output: \"thisIsATestString\"\nprint(snake_to_camel(\"this_is_a_test_string_2\")) # Output: \"thisIsATestString2\"\nprint(snake_to_camel(\"the_quick_brown_fox_jumps_over_the_lazy_dog\")) # Output: \"theQuickBrownFoxJumpsOverTheLazyDog\" ",
        "generated_testcode": "assert snake_to_camel(\"hello_world\") == \"helloWorld\"\n",
        "test": "assert snake_to_camel('android_tv') == 'AndroidTv'\nassert snake_to_camel('google_pixel') == 'GooglePixel'\nassert snake_to_camel('apple_watch') == 'AppleWatch'",
        "canonical_solution": "import re\r\ndef snake_to_camel(word):\r\n  return ''.join(x.capitalize() or '_' for x in word.split('_'))"
    },
    {
        "number": 412,
        "prompt": "Write a python function to remove odd numbers from a given list.\ndef remove_odd(l):\n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    return [num for num in l if num % 2 == 0]\n\n# Test cases\nprint(remove_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])) # [2, 4, 6, 8, 10]\nprint(remove_odd([0, 1, 2, 4, 5, 6, 8])) # [0, 2, 4, 6, 8]\nprint(remove_odd([1, 3, 5, 7])) # []\nprint(remove_odd([-1, 0, 1, 2, -3, 4, -5, 6, 7, 8, 9, -11, 11, 13, -15])) # [0, 2, 4, 6, 8, 11, 13] ",
        "generated_testcode": "assert remove_odd([1, 2, 3, 4, 5, 6, 7, 8, 9]) == [2, 4, 6, 8]\n",
        "test": "assert remove_odd([1,2,3]) == [2]\nassert remove_odd([2,4,6]) == [2,4,6]\nassert remove_odd([10,20,3]) == [10,20]",
        "canonical_solution": "def remove_odd(l):\r\n    for i in l:\r\n        if i % 2 != 0:\r\n            l.remove(i)\r\n    return l"
    },
    {
        "number": 413,
        "prompt": "Write a function to extract the nth element from a given list of tuples.\ndef extract_nth_element(list1, n):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    result = []\n    for i in list1:\n        result.append(i[n])\n    return result\n\n#Test the function\nlist1 = [(1,2,3), (4,5,6), (7,8,9), (10,11,12)]\nprint(extract_nth_element(list1, 1))  # Output: [2, 5, 8, 11]\nprint(extract_nth_element(list1, 2))  # Output: [3, 6, 9, 12]\n",
        "generated_testcode": "assert extract_nth_element([(1, 2, 3), (4, 5, 6), (7, 8, 9)], 1) == [2, 5, 8]\n",
        "test": "assert extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,0)==['Greyson Fulton', 'Brady Kent', 'Wyatt Knott', 'Beau Turnbull']\nassert extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,2)==[99, 96, 94, 98]\nassert extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)],1)==[98, 97, 91, 94]",
        "canonical_solution": "def extract_nth_element(list1, n):\r\n    result = [x[n] for x in list1]\r\n    return result"
    },
    {
        "number": 414,
        "prompt": "Write a python function to check whether the value exists in a sequence or not.\ndef overlapping(list1,list2):  \n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    for i in range(len(list1)):  \n        if(list1[i] in list2):  \n            return True  \n    return False  \n  \nlist1 = [1,2,3,4,5]  \nlist2 = [4,5,6,7,8]  \nprint(overlapping(list1,list2))  ",
        "generated_testcode": "assert overlapping([1,2,3,4,5],[2,3,4,6]) == True\n",
        "test": "assert overlapping([1,2,3,4,5],[6,7,8,9]) == False\nassert overlapping([1,2,3],[4,5,6]) == False\nassert overlapping([1,4,5],[1,4,5]) == True",
        "canonical_solution": "def overlapping(list1,list2):  \r\n    c=0\r\n    d=0\r\n    for i in list1: \r\n        c+=1\r\n    for i in list2: \r\n        d+=1\r\n    for i in range(0,c): \r\n        for j in range(0,d): \r\n            if(list1[i]==list2[j]): \r\n                return 1\r\n    return 0"
    },
    {
        "number": 415,
        "prompt": "Write a python function to find a pair with highest product from a given array of integers.\ndef max_Product(arr): \n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": true,
        "answer": "    max1 = max2 = 0\n    for i in range(len(arr)): \n        if arr[i] > max1: \n            max2 = max1 \n            max1 = arr[i] \n        elif arr[i] > max2: \n            max2 = arr[i] \n    return max(max1 * max2, max1 * max2) ",
        "generated_testcode": "assert max_Product([1, 2, 3, 4, 5, 6]) == 30\n",
        "test": "assert max_Product([1,2,3,4,7,0,8,4]) == (7,8)\nassert max_Product([0,-1,-2,-4,5,0,-6]) == (-4,-6)\nassert max_Product([1,2,3]) == (2,3)",
        "canonical_solution": "def max_Product(arr): \r\n    arr_len = len(arr) \r\n    if (arr_len < 2): \r\n        return (\"No pairs exists\")           \r\n    x = arr[0]; y = arr[1]      \r\n    for i in range(0,arr_len): \r\n        for j in range(i + 1,arr_len): \r\n            if (arr[i] * arr[j] > x * y): \r\n                x = arr[i]; y = arr[j] \r\n    return x,y    "
    },
    {
        "number": 416,
        "prompt": "Write a function to find the maximum sum we can make by dividing number in three parts recursively and summing them up together for the given number.\ndef breakSum(n): \n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    if n < 3:\n        return n\n    else:\n        return max(breakSum(n//3) + breakSum(n//3) + n//3, breakSum(n//2) + n//2, n)\n\n#Test the function\nprint(breakSum(10)) # Output: 12 ",
        "generated_testcode": "assert breakSum(10) == 10\n",
        "test": "assert breakSum(12) == 13\nassert breakSum(24) == 27\nassert breakSum(23) == 23",
        "canonical_solution": "MAX = 1000000\r\ndef breakSum(n): \r\n\tdp = [0]*(n+1) \r\n\tdp[0] = 0\r\n\tdp[1] = 1\r\n\tfor i in range(2, n+1): \r\n\t\tdp[i] = max(dp[int(i/2)] + dp[int(i/3)] + dp[int(i/4)], i); \r\n\treturn dp[n]"
    },
    {
        "number": 417,
        "prompt": "Write a function to find common first element in given list of tuple.\ndef group_tuples(Input): \n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    first_elements = set()\n    for i in Input: \n        first_elements.add(i[0]) \n    result = [] \n    for i in Input: \n        if i[0] in first_elements: \n            result.append(i) \n            first_elements.remove(i[0]) \n    return result \n  \n# Testing the function \nInput = [(2, 3), (5, 4), (8, 9), (1, 7), (2, 6), (8, 10), (2, 1)] \nprint(\"Original list of tuples :\", Input) \nprint(\"Common first element :\", group_tuples(Input)) \n  \n# Output: Original list of tuples : [(2, 3), (5, 4), (8, 9), (1, 7), (2, 6), (8, 10), (2, 1)]\n#        Common first element : [(2, 3), (8, 9), (2, 6)] ",
        "generated_testcode": "assert group_tuples([(1, 2, 3), (1, 4, 5), (1, 6, 7)]) == 1\n",
        "test": "assert group_tuples([('x', 'y'), ('x', 'z'), ('w', 't')]) == [('x', 'y', 'z'), ('w', 't')]\nassert group_tuples([('a', 'b'), ('a', 'c'), ('d', 'e')]) == [('a', 'b', 'c'), ('d', 'e')]\nassert group_tuples([('f', 'g'), ('f', 'g'), ('h', 'i')]) == [('f', 'g', 'g'), ('h', 'i')]",
        "canonical_solution": "def group_tuples(Input): \r\n\tout = {} \r\n\tfor elem in Input: \r\n\t\ttry: \r\n\t\t\tout[elem[0]].extend(elem[1:]) \r\n\t\texcept KeyError: \r\n\t\t\tout[elem[0]] = list(elem) \r\n\treturn [tuple(values) for values in out.values()] "
    },
    {
        "number": 418,
        "prompt": "Write a python function to find the sublist having maximum length.\ndef Find_Max(lst): \n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    # function to find the maximum length sublist in a list \n    n = len(lst) \n    max_len = 1\n    start = 0\n    end = 0\n    for i in range(n): \n        # Initialize max_len and start with first element of the list \n        max_len = 1\n        start = i \n        end = i \n        # Check all possible lengths of sublist from current element \n        while i < n and lst[i] == lst[end]: \n            max_len += 1\n            end += 1\n        i += 1\n        if max_len > 1: \n            # Update max_len and start if new sublist has greater length \n            while i < n and lst[i] == lst[end]: \n                max_len += 1\n                end += 1\n                i += 1\n        if max_len > 1: \n            i += 1\n    return lst[start:end] \n\nlst = [int(x) for x in input().split()]\nprint(Find_Max(lst)) ",
        "generated_testcode": "assert Find_Max([1, 2, 3, 4, 5, 6, 7, 8, 9]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]\n",
        "test": "assert Find_Max([['A'],['A','B'],['A','B','C']]) == ['A','B','C']\nassert Find_Max([[1],[1,2],[1,2,3]]) == [1,2,3]\nassert Find_Max([[1,1],[1,2,3],[1,5,6,1]]) == [1,5,6,1]",
        "canonical_solution": "def Find_Max(lst): \r\n    maxList = max((x) for x in lst) \r\n    return maxList"
    },
    {
        "number": 419,
        "prompt": "Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\ndef round_and_sum(list1):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    total_sum = 0\n    for num in list1:\n        total_sum += round(num)\n    return total_sum * len(list1)\n\n# Example usage:\nnumbers = [2.6, 5.1, 9.2, 1.3, 3.5]\nprint(round_and_sum(numbers))  # Output: 20\n\n# Example usage with an empty list:\nempty_list = []\nprint(round_and_sum(empty_list))  # Output: 0\n\n# Example usage with a list of strings:\nstring_list = [\"hello\", 3.14, \"world\"]\nprint(round_and_sum(string_list))  # Output: TypeError: unsupported operand type(s) for +: 'int' and 'str'\n\n# Example usage with a list of tuples:\ntuple_list = [(1.5, 2.3), (3.7, 8.9)]\nprint(round_and_sum(tuple_list))  # Output: TypeError: unsupported operand type(s) for +: 'int' and 'float'\n",
        "generated_testcode": "assert round_and_sum([1.5, 2.3, 3.6, 4.5, 5.7]) == 22\n",
        "test": "assert round_and_sum([22.4, 4.0, -16.22, -9.10, 11.00, -12.22, 14.20, -5.20, 17.50])==243\nassert round_and_sum([5,2,9,24.3,29])==345\nassert round_and_sum([25.0,56.7,89.2])==513",
        "canonical_solution": "def round_and_sum(list1):\r\n  lenght=len(list1)\r\n  round_and_sum=sum(list(map(round,list1))* lenght)\r\n  return round_and_sum"
    },
    {
        "number": 420,
        "prompt": "Write a python function to find the cube sum of first n even natural numbers.\ndef cube_Sum(n): \n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    sum = 0\n    for i in range(1, n+1): \n        sum = sum + (i*i*i)\n    return sum \n\n#Take input from user\nn = int(input(\"Enter the number: \"))\n\n#Call the function and print the result\nprint(\"Cube Sum of first\",n,\"natural numbers is\", cube_Sum(n))\n",
        "generated_testcode": "assert cube_Sum(5) == 225\n",
        "test": "assert cube_Sum(2) == 72\nassert cube_Sum(3) == 288\nassert cube_Sum(4) == 800",
        "canonical_solution": "def cube_Sum(n): \r\n    sum = 0\r\n    for i in range(1,n + 1): \r\n        sum += (2*i)*(2*i)*(2*i) \r\n    return sum"
    },
    {
        "number": 421,
        "prompt": "Write a function to concatenate each element of tuple by the delimiter.\ndef concatenate_tuple(test_tup):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    return (test_tup[0] + delimiter + test_tup[1] + delimiter + test_tup[2])\n\n# Example usage:\ntest_tup = (1, 2, 3)\nprint(concatenate_tuple(test_tup)) # Output: 1, 2, 3\n\n# Call the function with another tuple\ntest_tup = ('a', 'b', 'c')\nprint(concatenate_tuple(test_tup)) # Output: a, b, c\n\n# Call the function with a tuple of integers\ntest_tup = (10, 20, 30)\nprint(concatenate_tuple(test_tup)) # Output: 10, 20, 30\n\n# Call the function with a tuple of strings\ntest_tup = ('hello', 'world', 'python')\nprint(concatenate_tuple(test_tup)) # Output: hello, world, python\n\n# Call the function with a tuple of mixed types\ntest_tup = (1, 'hello', 2.0, 3.5)\nprint(concatenate_tuple(test_tup)) # Output: 1, hello, 2.0, 3.5\n```\n\nOutput:\n```\n1, 2, 3\na, b, c\n10, 20, 30\nhello, world, python\n1, hello, 2.0, 3.5",
        "generated_testcode": "assert concatenate_tuple((\"hello\", \"world\", \"python\") == \"hello_world_python\")\n",
        "test": "assert concatenate_tuple((\"ID\", \"is\", 4, \"UTS\") ) == 'ID-is-4-UTS'\nassert concatenate_tuple((\"QWE\", \"is\", 4, \"RTY\") ) == 'QWE-is-4-RTY'\nassert concatenate_tuple((\"ZEN\", \"is\", 4, \"OP\") ) == 'ZEN-is-4-OP'",
        "canonical_solution": "def concatenate_tuple(test_tup):\r\n    delim = \"-\"\r\n    res = ''.join([str(ele) + delim for ele in test_tup])\r\n    res = res[ : len(res) - len(delim)]\r\n    return (str(res)) "
    },
    {
        "number": 422,
        "prompt": "Write a python function to find the average of cubes of first n natural numbers.\ndef find_Average_Of_Cube(n):  \n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    sum = 0\n    for i in range(1, n+1): \n        sum = sum + i**3\n    return sum/n \n  \n# Driver code \nn = int(input(\"Enter the value of n: \")) \nprint(\"Average of cube of first\", n, \"natural numbers is\", find_Average_Of_Cube(n)) ",
        "generated_testcode": "assert find_Average_Of_Cube(5) == 125.0\n",
        "test": "assert find_Average_Of_Cube(2) == 4.5\nassert find_Average_Of_Cube(3) == 12\nassert find_Average_Of_Cube(1) == 1",
        "canonical_solution": "def find_Average_Of_Cube(n):  \r\n    sum = 0\r\n    for i in range(1, n + 1): \r\n        sum += i * i * i  \r\n    return round(sum / n, 6) "
    },
    {
        "number": 423,
        "prompt": "Write a function to solve gold mine problem.\ndef get_maxgold(gold, m, n): \n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    max_gold = 0\n    gold_matrix = [] \n    for i in range(m): \n        row = [] \n        for j in range(n): \n            row.append(int(input())\n        gold_matrix.append(row) \n    for i in range(m): \n        for j in range(n): \n            if i == 0 or j == 0 or i == m-1 or j == n-1: \n                continue \n            else: \n                top = gold_matrix[i-1][j] \n                left = gold_matrix[i][j-1] \n                right = gold_matrix[i][j+1] \n                bottom = gold_matrix[i+1][j] \n                gold_matrix[i][j] += min(top, left, right, bottom) \n                max_gold = max(max_gold, gold_matrix[i][j]) \n    return max_gold\n\n# Test the function \ngold = [[1, 3, 1, 5], \n        [2, 9, 6, 3], \n        [7, 2, 5, 1], \n        [4, 1, 8, 2]] \nm = 4\nn = 4\nprint(get_maxgold(gold, m, n)) ",
        "generated_testcode": "assert get_maxgold([[1, 3, 1, 5], [2, 2, 4], [5, 0, 2], [3, 6, 1]], 3, 3) == 12\n",
        "test": "assert get_maxgold([[1, 3, 1, 5],[2, 2, 4, 1],[5, 0, 2, 3],[0, 6, 1, 2]],4,4)==16\nassert get_maxgold([[10,20],[30,40]],2,2)==70\nassert get_maxgold([[4,9],[3,7]],2,2)==13",
        "canonical_solution": "def get_maxgold(gold, m, n): \r\n    goldTable = [[0 for i in range(n)] \r\n                        for j in range(m)]   \r\n    for col in range(n-1, -1, -1): \r\n        for row in range(m):  \r\n            if (col == n-1): \r\n                right = 0\r\n            else: \r\n                right = goldTable[row][col+1] \r\n            if (row == 0 or col == n-1): \r\n                right_up = 0\r\n            else: \r\n                right_up = goldTable[row-1][col+1] \r\n            if (row == m-1 or col == n-1): \r\n                right_down = 0\r\n            else: \r\n                right_down = goldTable[row+1][col+1] \r\n            goldTable[row][col] = gold[row][col] + max(right, right_up, right_down) \r\n    res = goldTable[0][0] \r\n    for i in range(1, m): \r\n        res = max(res, goldTable[i][0])  \r\n    return res "
    },
    {
        "number": 424,
        "prompt": "Write a function to extract only the rear index element of each string in the given tuple.\ndef extract_rear(test_tuple):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    rear_index = []\n    for i in test_tuple:\n        rear_index.append(i[-1])\n    return rear_index\n\n\n# Test Cases\nprint(extract_rear((\"hello\", \"world\", \"python\", \"programming\"))) # Output: ['o', 'd', 'm', 'g']\nprint(extract_rear((\"apple\", \"orange\", \"banana\"))       # Output: ['e', 'e', 'a']\nprint(extract_rear((\"abc\", \"defg\", \"xy\"))             # Output: ['c', 'g', 'y']\nprint(extract_rear((\"cat\", \"dog\", \"bird\", \"elephant\")) # Output: ['t', 'g', 'd', 't']\n\n# Test your function with assert statements\nassert extract_rear((\"hello\", \"world\", \"python\", \"programming\") == ['o', 'd', 'm', 'g']\nassert extract_rear((\"apple\", \"orange\", \"banana\") == ['e', 'e', 'a']\nassert extract_rear((\"abc\", \"defg\", \"xy\") == ['c', 'g', 'y']\nassert extract_rear((\"cat\", \"dog\", \"bird\", \"elephant\") == ['t', 'g', 'd', 't']\nassert extract_rear((\"a\", \"b\", \"c\") == ['c', 'b', 'c']\nassert extract_rear((\"aa\", \"bb\", \"cc\") == ['",
        "generated_testcode": "assert extract_rear((\"apple\", \"banana\", \"cherry\", \"date\", \"elderberry\") == (3, 4, 5, 4)\n\n",
        "test": "assert extract_rear(('Mers', 'for', 'Vers') ) == ['s', 'r', 's']\nassert extract_rear(('Avenge', 'for', 'People') ) == ['e', 'r', 'e']\nassert extract_rear(('Gotta', 'get', 'go') ) == ['a', 't', 'o']",
        "canonical_solution": "def extract_rear(test_tuple):\r\n  res = list(sub[len(sub) - 1] for sub in test_tuple)\r\n  return (res) "
    },
    {
        "number": 425,
        "prompt": "Write a function to count the number of sublists containing a particular element.\ndef count_element_in_list(list1, x): \n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    count = 0 \n    for i in range(len(list1)): \n        for j in range(i+1, len(list1)): \n            sub_list = list1[i:j+1] \n            if x in sub_list: \n                count += 1\n    return count \n\n# test the function \nlist1 = [1, 2, 3, 4, 5, 4, 6, 4, 7, 4, 8, 4] \nx = 4\nprint(\"Count of sublists containing\", x, \"is\", count_element_in_list(list1, x)) ",
        "generated_testcode": "assert count_element_in_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5) == 1\n",
        "test": "assert count_element_in_list([[1, 3], [5, 7], [1, 11], [1, 15, 7]],1)==3\nassert count_element_in_list([['A', 'B'], ['A', 'C'], ['A', 'D', 'E'], ['B', 'C', 'D']],'A')==3\nassert count_element_in_list([['A', 'B'], ['A', 'C'], ['A', 'D', 'E'], ['B', 'C', 'D']],'E')==1",
        "canonical_solution": "def count_element_in_list(list1, x): \r\n    ctr = 0\r\n    for i in range(len(list1)): \r\n        if x in list1[i]: \r\n            ctr+= 1          \r\n    return ctr"
    },
    {
        "number": 426,
        "prompt": "Write a function to filter odd numbers using lambda function.\ndef filter_oddnumbers(nums):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    return list(filter(lambda x: x % 2 != 0, nums))\n\n# Test the function with a list of numbers\nnums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nprint(filter_oddnumbers(nums))  # Output: [1, 3, 5, 7, 9]\n\n# Write a function to filter even numbers using lambda function\ndef filter_evennumbers(nums):\n    return list(filter(lambda x: x % 2 == 0, nums))\n\n# Test the function with a list of numbers\nnums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nprint(filter_evennumbers(nums))  # Output: [2, 4, 6, 8, 10]\n\n# Write a function to filter numbers divisible by 3 using lambda function\ndef filter_divisible_by_3(nums):\n    return list(filter(lambda x: x % 3 == 0, nums))\n\n# Test the function with a list of numbers\nnums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nprint(filter_divisible_by_3(nums))  # Output: [3, 6, 9]\n\n# Write a",
        "generated_testcode": "assert filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9]) == [1, 3, 5, 7, 9]\n",
        "test": "assert filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1,3,5,7,9]\nassert filter_oddnumbers([10,20,45,67,84,93])==[45,67,93]\nassert filter_oddnumbers([5,7,9,8,6,4,3])==[5,7,9,3]",
        "canonical_solution": "def filter_oddnumbers(nums):\r\n odd_nums = list(filter(lambda x: x%2 != 0, nums))\r\n return odd_nums"
    },
    {
        "number": 427,
        "prompt": "Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format by using regex.\ndef change_date_format(dt):\n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    import re\n    dt = re.sub(r'^(\\d{4})-(\\d{2})-(\\d{2})', r'\\3-\\2-\\1', dt)\n    return dt\n\n# Example usage:\nprint(change_date_format(\"2020-05-15\"))  # Output: \"15-05-2020\"\nprint(change_date_format(\"2018-11-24\"))  # Output: \"24-11-2018\"\n",
        "generated_testcode": "assert change_date_format(\"2021-05-15\") == \"15-05-2021\"\n",
        "test": "assert change_date_format(\"2026-01-02\") == '02-01-2026'\nassert change_date_format(\"2020-11-13\") == '13-11-2020'\nassert change_date_format(\"2021-04-26\") == '26-04-2021'",
        "canonical_solution": "import re\r\ndef change_date_format(dt):\r\n        return re.sub(r'(\\d{4})-(\\d{1,2})-(\\d{1,2})', '\\\\3-\\\\2-\\\\1', dt)"
    },
    {
        "number": 428,
        "prompt": "Write a function to sort the given array by using shell sort.\ndef shell_sort(my_list):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    n = len(my_list)\n    gap = n//2\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j-gap] > temp:\n                my_list[j] = my_list[j-gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n    return my_list\n\nmy_list = [64, 34, 25, 12, 22, 11, 90, 50, 45, 34, 23, 100, 65, 32, 67, 41]\nprint(shell_sort(my_list))\n\n# Output: [10, 11, 12, 22, 23, 32, 34, 41, 45, 50, 64, 65, 67, 90] ",
        "generated_testcode": "assert shell_sort(my_list) == sorted(my_list)\n\n# Test the function with an example\nmy_list = [3, 1, 4, 2, 5, 6, 7, 8, 9, 0, 10, 11, 12, 13, 14, 15]\nprint(shell_sort(my_list)) # should print [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]\n\n",
        "test": "assert shell_sort([12, 23, 4, 5, 3, 2, 12, 81, 56, 95]) == [2, 3, 4, 5, 12, 12, 23, 56, 81, 95]\nassert shell_sort([24, 22, 39, 34, 87, 73, 68]) == [22, 24, 34, 39, 68, 73, 87]\nassert shell_sort([32, 30, 16, 96, 82, 83, 74]) == [16, 30, 32, 74, 82, 83, 96]",
        "canonical_solution": "def shell_sort(my_list):\r\n    gap = len(my_list) // 2\r\n    while gap > 0:\r\n        for i in range(gap, len(my_list)):\r\n            current_item = my_list[i]\r\n            j = i\r\n            while j >= gap and my_list[j - gap] > current_item:\r\n                my_list[j] = my_list[j - gap]\r\n                j -= gap\r\n            my_list[j] = current_item\r\n        gap //= 2\r\n\r\n    return my_list"
    },
    {
        "number": 429,
        "prompt": "Write a function to extract the elementwise and tuples from the given two tuples.\ndef and_tuples(test_tup1, test_tup2):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    return tuple(i for i in test_tup1 + test_tup2)\n\ntest_tup1 = (1, 2, 3)\ntest_tup2 = (4, 5, 6)\nprint(and_tuples(test_tup1, test_tup2)) # (1, 2, 3, 4, 5, 6)\n\n# Write a function to convert a tuple of tuples into a single tuple\ndef flatten_tuple(test_tup):\n    result = []\n    for i in test_tup:\n        if isinstance(i, tuple):\n            result.extend(i)\n        else:\n            result.append(i)\n    return tuple(result)\n\ntest_tup = ((1, 2), (3, 4), 5, (6, 7, 8))\nprint(flatten_tuple(test_tup)) # (1, 2, 3, 4, 5, 6, 7, 8)\n\n# Write a function to extract the element from the given tuple that is not in the second tuple\ndef difference_tuple(test_tup1, test_tup2):\n    return tuple(i for i in test_tup1 if i not in test_tup2)\n\ntest_tup1 = (1, 2, 3, 4)\ntest_tup2 = (3, 4, 5, 6)\nprint(difference_",
        "generated_testcode": "assert and_tuples((1, 2, 3), (4, 5, 6)) == (1, 2, 3, 4, 5, 6)\n",
        "test": "assert and_tuples((10, 4, 6, 9), (5, 2, 3, 3)) == (0, 0, 2, 1)\nassert and_tuples((1, 2, 3, 4), (5, 6, 7, 8)) == (1, 2, 3, 0)\nassert and_tuples((8, 9, 11, 12), (7, 13, 14, 17)) == (0, 9, 10, 0)",
        "canonical_solution": "def and_tuples(test_tup1, test_tup2):\r\n  res = tuple(ele1 & ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\r\n  return (res) "
    },
    {
        "number": 430,
        "prompt": "Write a function to find the directrix of a parabola.\ndef parabola_directrix(a, b, c): \n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    return -b / 2 * a\n\nprint(parabola_directrix(2, -5, 6)) # Output: -1.0\nprint(parabola_directrix(-4, 16, 8)) # Output: 8.0\nprint(parabola_directrix(1, 2, 3)) # Output: None (The function is not a parabola)\n\n# Explanation:\n# \n# The directrix of a parabola is the line perpendicular to the axis of symmetry that does not intersect the parabola. It is defined as the x-coordinate of the point where the vertex of the parabola is located. \n# \n# If the given equation is in the form y = ax^2 + bx + c, where a is not equal to 0, then the directrix is given by -b/(2a). \n# \n# If a = 0, then the equation is not a parabola. In this case, we return None. \n\n# Example: \n# \n# Consider the equation y = 2x^2 - 5x + 6. \n# \n# The vertex of this parabola is located at (-5/2, 15/4). Therefore, the directrix is given by -b/2a = (-5/2)/2 = -1.0. \n# \n# Similarly, for y = -4x^2 + 16x + 8, the vertex is located at (-2, 8",
        "generated_testcode": "assert parabola_directrix(1, 10, -15) == 1\n",
        "test": "assert parabola_directrix(5,3,2)==-198\nassert parabola_directrix(9,8,4)==-2336\nassert parabola_directrix(2,4,6)==-130",
        "canonical_solution": "def parabola_directrix(a, b, c): \r\n  directrix=((int)(c - ((b * b) + 1) * 4 * a ))\r\n  return directrix"
    },
    {
        "number": 431,
        "prompt": "Write a function that takes two lists and returns true if they have at least one common element.\ndef common_element(list1, list2):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    for i in list1:\n        for j in list2:\n            if i == j:\n                return True\n    return False\n\n\nprint(common_element([1, 2, 3, 4], [3, 4, 5, 6]))  # Output: True\nprint(common_element([1, 2, 3], [4, 5, 6]))  # Output: False\n\n\n# Using sets\ndef common_element(list1, list2):\n    set1 = set(list1)\n    set2 = set(list2)\n    return bool(set1.intersection(set2))\n\nprint(common_element([1, 2, 3, 4], [3, 4, 5, 6]))  # Output: True\nprint(common_element([1, 2, 3], [4, 5, 6]))  # Output: False\n\n\n# Using sets with a function\ndef common_element(list1, list2):\n    return len(set(list1).intersection(list2)) > 0\n\nprint(common_element([1, 2, 3, 4], [3, 4, 5, 6]))  # Output: True\nprint(common_element([1, 2, 3], [4, 5, 6]))  # Output: False\n",
        "generated_testcode": "assert common_element([1, 2, 3, 4, 5], [3, 6, 7, 8]) == True\n",
        "test": "assert common_element([1,2,3,4,5], [5,6,7,8,9])==True\nassert common_element([1,2,3,4,5], [6,7,8,9])==None\nassert common_element(['a','b','c'], ['d','b','e'])==True",
        "canonical_solution": "def common_element(list1, list2):\r\n     result = False\r\n     for x in list1:\r\n         for y in list2:\r\n             if x == y:\r\n                 result = True\r\n                 return result"
    },
    {
        "number": 432,
        "prompt": "Write a function to find the median of a trapezium.\ndef median_trapezium(base1,base2,height):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    area = (base1 + base2)*height/2\n    return area\n\n# Test the function with the given values\nprint(median_trapezium(6, 10, 2)) # Output: 50.0\n\n# Create a function to find the area of a rectangle\ndef area_rectangle(length, width):\n    area = length * width\n    return area\n\n# Test the function with the given values\nprint(area_rectangle(10, 5)) # Output: 50\n\n# Create a function to find the area of a triangle\ndef area_triangle(base, height):\n    area = 0.5 * base * height\n    return area\n\n# Test the function with the given values\nprint(area_triangle(6, 4)) # Output: 12.0\n\n# Create a function to find the area of a circle\nimport math\ndef area_circle(radius):\n    area = math.pi * radius ** 2\n    return area\n\n# Test the function with the given value\nprint(area_circle(5)) # Output: 78.53981633397448336\n\n# Create a function to find the area of a sphere\ndef area_sphere(radius):\n    area = 4 * math.pi * radius ** 2\n    return area\n\n# Test the function with the given value\nprint(area_sphere(5)) # Output: 314.1592653589",
        "generated_testcode": "assert median_trapezium(10, 20, 5) == 12.5\n",
        "test": "assert median_trapezium(15,25,35)==20\nassert median_trapezium(10,20,30)==15\nassert median_trapezium(6,9,4)==7.5",
        "canonical_solution": "def median_trapezium(base1,base2,height):\r\n median = 0.5 * (base1+ base2)\r\n return median"
    },
    {
        "number": 433,
        "prompt": "Write a function to check whether the entered number is greater than the elements of the given array.\ndef check_greater(arr, number):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    for i in arr:\n        if i > number:\n            return True\n    return False\n\n#Test case\nprint(check_greater([5, 10, 15, 20, 25, 30], 25)) # Output: True\nprint(check_greater([5, 10, 15, 20, 25, 30], 35)) # Output: False ",
        "generated_testcode": "assert check_greater([1, 2, 3, 4, 5], 3) == True\n",
        "test": "assert check_greater([1, 2, 3, 4, 5], 4) == 'No, entered number is less than those in the array'\nassert check_greater([2, 3, 4, 5, 6], 8) == 'Yes, the entered number is greater than those in the array'\nassert check_greater([9, 7, 4, 8, 6, 1], 11) == 'Yes, the entered number is greater than those in the array'",
        "canonical_solution": "def check_greater(arr, number):\r\n  arr.sort()\r\n  if number > arr[-1]:\r\n    return ('Yes, the entered number is greater than those in the array')\r\n  else:\r\n    return ('No, entered number is less than those in the array')"
    },
    {
        "number": 434,
        "prompt": "Write a function that matches a string that has an a followed by one or more b's.\ndef text_match_one(text):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    pattern = re.compile(r\"a.*b+\")\n    match = pattern.search(text)\n    if match:\n        return True\n    else:\n        return False\n\n# Test cases\nprint(text_match_one(\"ab\"))  # True\nprint(text_match_one(\"abc\"))  # True\nprint(text_match_one(\"ac\"))  # False\nprint(text_match_one(\"abb\"))  # True\nprint(text_match_one(\"bbb\"))  # True\nprint(text_match_one(\"aabb\"))  # True\nprint(text_match_one(\"a\"))  # False\n\n# Match a followed by any number of b's or c's\ndef text_match_two(text):\n    pattern = re.compile(r\"a[bc]+\")\n    match = pattern.search(text)\n    if match:\n        return True\n    else:\n        return False\n\n# Test cases\nprint(text_match_two(\"ac\"))  # True\nprint(text_match_two(\"abc\"))  # True\nprint(text_match_two(\"abb\"))  # True\nprint(text_match_two(\"aaa\"))  # False\nprint(text_match_two(\"a\"))  # False\nprint(text_match_two(\"abbccc\"))  # True\nprint(text_match_two(\"abbccd\"))  # False\n\n# Match a followed by one or more b's or c's\ndef text_match_three(text):\n",
        "generated_testcode": "assert text_match_one(\"ab\") == True\n",
        "test": "assert text_match_one(\"ac\")==('Not matched!')\nassert text_match_one(\"dc\")==('Not matched!')\nassert text_match_one(\"abba\")==('Found a match!')",
        "canonical_solution": "import re\r\ndef text_match_one(text):\r\n        patterns = 'ab+?'\r\n        if re.search(patterns,  text):\r\n                return 'Found a match!'\r\n        else:\r\n                return('Not matched!')\r\n"
    },
    {
        "number": 435,
        "prompt": "Write a python function to find the last digit of a given number.\ndef last_Digit(n) :\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    return n % 10\n\n# Test the function with an example\nprint(last_Digit(1234))  # Output: 4\n\n# Test the function with another example\nprint(last_Digit(9))  # Output: 9\n\n# Test the function with another example\nprint(last_Digit(10))  # Output: 0\n\n# Test the function with another example\nprint(last_Digit(1230))  # Output: 0\n",
        "generated_testcode": "assert last_Digit(1234) == 4\n",
        "test": "assert last_Digit(123) == 3\nassert last_Digit(25) == 5\nassert last_Digit(30) == 0",
        "canonical_solution": "def last_Digit(n) :\r\n    return (n % 10) "
    },
    {
        "number": 436,
        "prompt": "Write a python function to print negative numbers in a list.\ndef neg_nos(list1):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    for i in list1:\n        if i<0:\n            print(i)\n\n# Testing the function\nlist1 = [12, 14, -5, 2, 8, -10, -20, 0]\nneg_nos(list1)\n\n# Output: -5 -10 -20\n\n# Explanation: The function iterates over the list and prints the negative numbers in the list. ",
        "generated_testcode": "assert neg_nos([1, -2, 3, -4, 5, -6, 7, -8]) == [-2, -4, -6, -8]\n",
        "test": "assert neg_nos([-1,4,5,-6]) == -1,-6\nassert neg_nos([-1,-2,3,4]) == -1,-2\nassert neg_nos([-7,-6,8,9]) == -7,-6",
        "canonical_solution": "def neg_nos(list1):\r\n  for num in list1: \r\n    if num < 0: \r\n       return num "
    },
    {
        "number": 437,
        "prompt": "Write a function to remove odd characters in a string.\ndef remove_odd(str1):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    odd = \"\"\n    for i in str1:\n        if i.isdigit() or i.isalpha():\n            odd += i\n    return odd\n\n#Test case\nprint(remove_odd(\"!#Hello$%Worl#d%\")) # Should return \"Helloworld\"\nprint(remove_odd(\"123!abc456\")) # Should return \"abc\" ",
        "generated_testcode": "assert remove_odd(\"Hello World!\") == \"Helo Wrd\"\n",
        "test": "assert remove_odd(\"python\")==(\"yhn\")\nassert remove_odd(\"program\")==(\"rga\")\nassert remove_odd(\"language\")==(\"agae\")",
        "canonical_solution": "def remove_odd(str1):\r\n str2 = ''\r\n for i in range(1, len(str1) + 1):\r\n    if(i % 2 == 0):\r\n        str2 = str2 + str1[i - 1]\r\n return str2"
    },
    {
        "number": 438,
        "prompt": "Write a function to count bidirectional tuple pairs.\ndef count_bidirectional(test_list):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    count = 0\n    for i in range(len(test_list)):\n        for j in range(len(test_list)):\n            if test_list[i][::-1] == test_list[j]:\n                count += 1\n    return count\n\n#Test case\nprint(count_bidirectional(['abc', 'cba', 'def', 'fed', 'aaa', 'bbb', 'bbb', 'abcd', 'dcba'])) #should return 3\nprint(count_bidirectional(['race', 'ecar', 'plane', 'enif', 'silent', 'listen', 'niver', 'relin', 'silen'])) #should return 5\nprint(count_bidirectional(['hello', 'world', 'world', 'python', 'python'])) #should return 2\nprint(count_bidirectional(['race', 'hello', 'world', 'python', 'world', 'python', 'cba', 'abc'])) #should return 4\nprint(count_bidirectional(['cba', 'abc', 'silent', 'elint', 'race', 'cba', 'silent']) #should return 3\nprint(count_bidirectional(['aaa', 'bbb', 'abc', 'def', 'fed']) #should return 0\n",
        "generated_testcode": "assert count_bidirectional([(1, 2), (2, 1), (3, 4), (4, 3), (5, 6), (6, 5)]) == 2\n",
        "test": "assert count_bidirectional([(5, 6), (1, 2), (6, 5), (9, 1), (6, 5), (2, 1)] ) == '3'\nassert count_bidirectional([(5, 6), (1, 3), (6, 5), (9, 1), (6, 5), (2, 1)] ) == '2'\nassert count_bidirectional([(5, 6), (1, 2), (6, 5), (9, 2), (6, 5), (2, 1)] ) == '4'",
        "canonical_solution": "def count_bidirectional(test_list):\r\n  res = 0\r\n  for idx in range(0, len(test_list)):\r\n    for iidx in range(idx + 1, len(test_list)):\r\n      if test_list[iidx][0] == test_list[idx][1] and test_list[idx][1] == test_list[iidx][0]:\r\n        res += 1\r\n  return (str(res)) "
    },
    {
        "number": 439,
        "prompt": "Write a function to convert a list of multiple integers into a single integer.\ndef multiple_to_single(L):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": true,
        "answer": "    result = 0\n    for num in L:\n        result = result * 10 + num\n    return result\n\n# Test the function with a sample list\nprint(multiple_to_single([1,2,3,4,5,6,7,8,9])) # Should output 123456789\n\n# The function takes in a list of integers and returns a single integer by concatenating them. ",
        "generated_testcode": "assert multiple_to_single([1, 2, 3, 4, 5]) == 12345\n",
        "test": "assert multiple_to_single([11, 33, 50])==113350\nassert multiple_to_single([-1,2,3,4,5,6])==-123456\nassert multiple_to_single([10,15,20,25])==10152025",
        "canonical_solution": "def multiple_to_single(L):\r\n  x = int(\"\".join(map(str, L)))\r\n  return x"
    },
    {
        "number": 440,
        "prompt": "Write a function to find all adverbs and their positions in a given sentence.\ndef find_adverb_position(text):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    # find all adverbs in text\n    adverbs = []\n    for i, word in enumerate(text.split()):\n        if word[-2:] in [\"ly\", \"ly\"]:\n            adverbs.append((word, i+1)\n    return adverbs\n\n# example usage\ntext = \"The train is moving quickly towards the station.\"\nprint(find_adverb_position(text)) # [(\"quickly\", 5)]\ntext2 = \"The dog is running around the house.\"\nprint(find_adverb_position(text2)) # []\ntext3 = \"The man has been swimming for hours.\"\nprint(find_adverb_position(text3)) # [(\"for\", 5)]\ntext4 = \"The dog is running quickly towards the house.\"\nprint(find_adverb_position(text4)) # [(\"quickly\", 4), (\"towards\", 6)] ",
        "generated_testcode": "assert find_adverb_position(\"The dog is running quickly.\") == [(\"quickly\", 10)]\n",
        "test": "assert find_adverb_position(\"clearly!! we can see the sky\")==(0, 7, 'clearly')\nassert find_adverb_position(\"seriously!! there are many roses\")==(0, 9, 'seriously')\nassert find_adverb_position(\"unfortunately!! sita is going to home\")==(0, 13, 'unfortunately')",
        "canonical_solution": "import re\r\ndef find_adverb_position(text):\r\n for m in re.finditer(r\"\\w+ly\", text):\r\n    return (m.start(), m.end(), m.group(0))"
    },
    {
        "number": 441,
        "prompt": "Write a function to find the surface area of a cube.\ndef surfacearea_cube(l):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    return 6 * l ** 2\n\n# Test the function with a length of 5\nprint(surfacearea_cube(5))  # should output 150\n\n# Write a function to find the volume of a cube\ndef volume_cube(l):\n    return l ** 3\n\n# Test the function with a length of 5\nprint(volume_cube(5))  # should output 125\n\n# Write a function to find the surface area of a sphere given its radius\ndef surfacearea_sphere(r):\n    return 4 * 3.14 * r ** 2\n\n# Test the function with a radius of 5\nprint(surfacearea_sphere(5))  # should output 314.1592653589793938\n\n# Write a function to find the volume of a sphere given its radius\ndef volume_sphere(r):\n    return 4/3 * 3.14 * r ** 3\n\n# Test the function with a radius of 5\nprint(volume_sphere(5))  # should output 523.6049194064292124\n\n# Write a function to find the surface area of a cylinder given its radius and height\ndef surfacearea_cylinder(r, h):\n    return 2 * 3.14 * r * h + 2 * 3.14 * r ** 2\n\n# Test the function",
        "generated_testcode": "assert surfacearea_cube(3) == 54\n",
        "test": "assert surfacearea_cube(5)==150\nassert surfacearea_cube(3)==54\nassert surfacearea_cube(10)==600",
        "canonical_solution": "def surfacearea_cube(l):\r\n  surfacearea= 6*l*l\r\n  return surfacearea"
    },
    {
        "number": 442,
        "prompt": "Write a function to find the ration of positive numbers in an array of integers.\ndef positive_count(nums):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    count = 0\n    total = 0\n    for num in nums:\n        if num > 0:\n            count += 1\n        total += 1\n    return count / total\n\n# Test the function with an example array\nnums = [1, -3, 2, -5, 7, -2, 8, 0, 4, 11]\nprint(positive_count(nums)) # Output: 0.4285714285714285714\n\n# Another example\nnums = [1, 2, 3, 4, 5, 6, 7, 8, 9]\nprint(positive_count(nums)) # Output: 1.0\n\n# Another example\nnums = [-1, -2, -3, -4, -5, -6, -7, -8, -9]\nprint(positive_count(nums)) # Output: 0.0\n\n# Another example\nnums = [0, 0, 0, 0, 0, 0]\nprint(positive_count(nums)) # Output: 0.0\n\n# Another example\nnums = []\nprint(positive_count(nums)) # Output: 0.0\n",
        "generated_testcode": "assert positive_count([1, -2, 3, 4, -5, 6]) == 3/5\n",
        "test": "assert positive_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])==0.54\nassert positive_count([2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8])==0.69\nassert positive_count([2, 4, -6, -9, 11, -12, 14, -5, 17])==0.56",
        "canonical_solution": "from array import array\r\ndef positive_count(nums):\r\n    n = len(nums)\r\n    n1 = 0\r\n    for x in nums:\r\n        if x > 0:\r\n            n1 += 1\r\n        else:\r\n          None\r\n    return round(n1/n,2)"
    },
    {
        "number": 443,
        "prompt": "Write a python function to find the largest negative number from the given list.\ndef largest_neg(list1): \n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    largest_num = None\n    for num in list1: \n        if num < 0: \n            if largest_num is None or num > largest_num: \n                largest_num = num \n    return largest_num \n\nprint(largest_neg([-5, -10, 2, -3, -7, -20, -1])) ",
        "generated_testcode": "assert largest_neg([-5, -3, -7, -1, -2, -8, -4]) == -1\n",
        "test": "assert largest_neg([1,2,3,-4,-6]) == -6\nassert largest_neg([1,2,3,-8,-9]) == -9\nassert largest_neg([1,2,3,4,-1]) == -1",
        "canonical_solution": "def largest_neg(list1): \r\n    max = list1[0] \r\n    for x in list1: \r\n        if x < max : \r\n             max = x  \r\n    return max"
    },
    {
        "number": 444,
        "prompt": "Write a function to trim each tuple by k in the given tuple list.\ndef trim_tuple(test_list, K):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    result = []\n    for t in test_list:\n        result.append(tuple(x for x in t if x > K) if isinstance(t, tuple) else t)\n    return result\n\n\n# Example usage:\ntest_list = [(1, 2, 3), (4, 5, 6, 7), (8,), (9, 10, 11, 12)]\nK = 5\nprint(trim_tuple(test_list, K))  # Output: [(6,), (), (10, 11, 12)]\n\n# Example usage 2:\ntest_list = [1, (2, 3, 4), (5, 6, 7, 8), (9, 10)]\nK = 6\nprint(trim_tuple(test_list, K))  # Output: [1, (3, 4), (7, 8), (10)] ",
        "generated_testcode": "assert trim_tuple(test_list=[(1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3) == (4, 5, 6, 7, 8, 9, 10)\n",
        "test": "assert trim_tuple([(5, 3, 2, 1, 4), (3, 4, 9, 2, 1),(9, 1, 2, 3, 5), (4, 8, 2, 1, 7)], 2) == '[(2,), (9,), (2,), (2,)]'\nassert trim_tuple([(5, 3, 2, 1, 4), (3, 4, 9, 2, 1), (9, 1, 2, 3, 5), (4, 8, 2, 1, 7)], 1) == '[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]'\nassert trim_tuple([(7, 8, 4, 9), (11, 8, 12, 4),(4, 1, 7, 8), (3, 6, 9, 7)], 1) == '[(8, 4), (8, 12), (1, 7), (6, 9)]'",
        "canonical_solution": "def trim_tuple(test_list, K):\r\n  res = []\r\n  for ele in test_list:\r\n    N = len(ele)\r\n    res.append(tuple(list(ele)[K: N - K]))\r\n  return (str(res)) "
    },
    {
        "number": 445,
        "prompt": "Write a function to perform index wise multiplication of tuple elements in the given two tuples.\ndef index_multiplication(test_tup1, test_tup2):\n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] * test_tup2[i])\n    return tuple(result)\n\n# Example usage:\ntest_tup1 = (1, 2, 3, 4, 5, 6)\ntest_tup2 = (6, 5, 4, 3, 2, 1)\nprint(index_multiplication(test_tup1, test_tup2))  # Output: (6, 10, 12, 12, 6)\ntest_tup3 = (2, 4, 6, 8)\ntest_tup4 = (3, 2, 1, 4)\nprint(index_multiplication(test_tup3, test_tup4))  # Output: (6, 8, 6)\n\n# The output will be a tuple of index-wise multiplication of the given two tuples.\n# If the tuples have different lengths, it will consider the length of the smaller tuple.\n# If one of the tuples is empty, it will return an empty tuple. ",
        "generated_testcode": "assert index_multiplication((1, 2, 3), (4, 5, 6)) == (4, 10, 18)\n",
        "test": "assert index_multiplication(((1, 3), (4, 5), (2, 9), (1, 10)),((6, 7), (3, 9), (1, 1), (7, 3)) ) == ((6, 21), (12, 45), (2, 9), (7, 30))\nassert index_multiplication(((2, 4), (5, 6), (3, 10), (2, 11)),((7, 8), (4, 10), (2, 2), (8, 4)) ) == ((14, 32), (20, 60), (6, 20), (16, 44))\nassert index_multiplication(((3, 5), (6, 7), (4, 11), (3, 12)),((8, 9), (5, 11), (3, 3), (9, 5)) ) == ((24, 45), (30, 77), (12, 33), (27, 60))",
        "canonical_solution": "def index_multiplication(test_tup1, test_tup2):\r\n  res = tuple(tuple(a * b for a, b in zip(tup1, tup2))\r\n   for tup1, tup2 in zip(test_tup1, test_tup2))\r\n  return (res) "
    },
    {
        "number": 446,
        "prompt": "Write a python function to count the occurence of all elements of list in a tuple.\ndef count_Occurrence(tup, lst): \n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    count_dict = {} \n    for i in tup: \n        count_dict[i] = tup.count(i) \n    return count_dict \n  \n# Driver code \ntup = (1, 2, 3, 4, 5, 5, 6, 3, 2, 4) \nlst = [1, 2, 3, 4, 5, 6] \nprint(count_Occurrence(tup, lst)) ",
        "generated_testcode": "assert count_Occurrence(('a', 'b', 'c', 'd', 'a', 'b', 'c', 'd', 'a', 'b', 'c', 'd', 'a', 'b', 'c', 'd'), ['a', 'b', 'c', 'd']) == (4, 3, 3, 3)\n",
        "test": "assert count_Occurrence(('a', 'a', 'c', 'b', 'd'),['a', 'b'] ) == 3\nassert count_Occurrence((1, 2, 3, 1, 4, 6, 7, 1, 4),[1, 4, 7]) == 6\nassert count_Occurrence((1,2,3,4,5,6),[1,2]) == 2",
        "canonical_solution": "from collections import Counter \r\ndef count_Occurrence(tup, lst): \r\n    count = 0\r\n    for item in tup: \r\n        if item in lst: \r\n            count+= 1 \r\n    return count  "
    },
    {
        "number": 447,
        "prompt": "Write a function to find cubes of individual elements in a list using lambda function.\ndef cube_nums(nums):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    return list(map(lambda x: x**3, nums))\n\nprint(cube_nums([1, 2, 3, 4, 5]))\n# Output: [1, 8, 27, 64]\n\n# Write a function to find the square of even numbers in a list using lambda function.\ndef square_even(nums):\n    return list(filter(lambda x: x%2 == 0, nums))\n\nprint(square_even([1, 2, 3, 4, 5, 6, 7, 8]))\n# Output: [4, 6, 8]\n\n# Write a function to find the sum of even numbers in a list using lambda function.\ndef sum_even(nums):\n    return sum(filter(lambda x: x%2 == 0, nums))\n\nprint(sum_even([1, 2, 3, 4, 5, 6, 7, 8])\n# Output: 14\n\n# Write a function to find the length of strings in a list using lambda function.\ndef string_len(strings):\n    return list(map(lambda x: len(x), strings))\n\nprint(string_len(['Hello', 'world', 'Python', 'Programming'])\n# Output: [5, 5, 6, 10]\n\n# Write a function to find the maximum of a list of numbers using lambda function.\ndef max_num(nums):\n    return max",
        "generated_testcode": "assert cube_nums([1, 2, 3, 4, 5]) == [1, 8, 27, 64]\n",
        "test": "assert cube_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]\nassert cube_nums([10,20,30])==([1000, 8000, 27000])\nassert cube_nums([12,15])==([1728, 3375])",
        "canonical_solution": "def cube_nums(nums):\r\n cube_nums = list(map(lambda x: x ** 3, nums))\r\n return cube_nums"
    },
    {
        "number": 448,
        "prompt": "Write a function to calculate the sum of perrin numbers.\ndef cal_sum(n): \n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    if n == 0: \n        return 0\n    elif n == 1: \n        return 1\n    else: \n        return n + cal_sum(n-1) + cal_sum(n-2) \n  \n# Driver code \nn = 4\nprint(\"The sum of first\", n, \"Perrin numbers is\", cal_sum(n)) \n",
        "generated_testcode": "assert cal_sum(1) == 1\n",
        "test": "assert cal_sum(9) == 49\nassert cal_sum(10) == 66\nassert cal_sum(11) == 88",
        "canonical_solution": "def cal_sum(n): \r\n\ta = 3\r\n\tb = 0\r\n\tc = 2\r\n\tif (n == 0): \r\n\t\treturn 3\r\n\tif (n == 1): \r\n\t\treturn 3\r\n\tif (n == 2): \r\n\t\treturn 5\r\n\tsum = 5\r\n\twhile (n > 2): \r\n\t\td = a + b \r\n\t\tsum = sum + d \r\n\t\ta = b \r\n\t\tb = c \r\n\t\tc = d \r\n\t\tn = n-1\r\n\treturn sum"
    },
    {
        "number": 449,
        "prompt": "Write a python function to check whether the triangle is valid or not if 3 points are given.\ndef check_Triangle(x1,y1,x2,y2,x3,y3): \n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    return abs((x1*(y2-y3) + x2*(y3-y1) + x3*(y1-y2)) >= 0) ",
        "generated_testcode": "assert check_Triangle(0,0,0,0,3,3) == True\n",
        "test": "assert check_Triangle(1,5,2,5,4,6) == 'Yes'\nassert check_Triangle(1,1,1,4,1,5) == 'No'\nassert check_Triangle(1,1,1,1,1,1) == 'No'",
        "canonical_solution": "def check_Triangle(x1,y1,x2,y2,x3,y3): \r\n    a = (x1*(y2-y3)+x2*(y3-y1)+x3*(y1-y2))   \r\n    if a == 0: \r\n        return ('No') \r\n    else: \r\n        return ('Yes') "
    },
    {
        "number": 450,
        "prompt": "Write a function to extract specified size of strings from a give list of string values.\ndef extract_string(str, l):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    size = int(input(\"Enter the size of the string you want to extract: \"))\n    result = []\n    for i in str:\n        if len(i) == size:\n            result.append(i)\n    return result\n\nprint(extract_string([\"Hello\", \"World\", \"Python\", \"Programming\", \"Language\"], 4))\n\n# Output: ['Python', 'Language']\n\n# In this function, we first take the size of the string as input from the user and then iterate through the list of strings. We check if the length of each string is equal to the given size and append it to the result list if it is. Finally, we return the result list containing all the strings of the given size.\n\n# Time complexity: O(n)\n# Space complexity: O(n)\n\n# Note: This function only works if the input list contains strings. If there are any other data types, the function may raise an error. To handle that, we need to add type checking. ",
        "generated_testcode": "assert extract_string(['hello', 'world', 'python', 'programming'], 3) == ['hel', 'wor', 'pro']\n",
        "test": "assert extract_string(['Python', 'list', 'exercises', 'practice', 'solution'] ,8)==['practice', 'solution']\nassert extract_string(['Python', 'list', 'exercises', 'practice', 'solution'] ,6)==['Python']\nassert extract_string(['Python', 'list', 'exercises', 'practice', 'solution'] ,9)==['exercises']",
        "canonical_solution": "def extract_string(str, l):\r\n    result = [e for e in str if len(e) == l] \r\n    return result"
    },
    {
        "number": 451,
        "prompt": "Write a function to remove all whitespaces from the given string using regex.\ndef remove_whitespaces(text1):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    return re.sub(r'\\s+', '', text1)\n\n# Test the function with the given string\ntext = \"   Hello   World!  This    is  a   test   string   with  some    extra    spaces.  \"\nprint(remove_whitespaces(text))\n\n# Output: \"HelloWorld!Thisisastringwithsomeextraspaces.\" ",
        "generated_testcode": "assert remove_whitespaces(\"Hello World\") == \"HelloWorld\"\n",
        "test": "assert remove_whitespaces(' Google    Flutter ') == 'GoogleFlutter'\nassert remove_whitespaces(' Google    Dart ') == 'GoogleDart'\nassert remove_whitespaces(' iOS    Swift ') == 'iOSSwift'",
        "canonical_solution": "import re\r\ndef remove_whitespaces(text1):\r\n  return (re.sub(r'\\s+', '',text1))"
    },
    {
        "number": 452,
        "prompt": "Write a function that gives loss amount if the given amount has loss else return none.\ndef loss_amount(actual_cost,sale_amount): \n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    if actual_cost > sale_amount:\n        return actual_cost - sale_amount\n    else:\n        return None\n\n# Test the function with some sample data\nprint(loss_amount(5000, 200))  # Output: 300\nprint(loss_amount(400, 500))   # Output: None\n\n# Another version of the function that returns the loss amount in percentage\ndef loss_percentage(actual_cost, sale_amount):\n    if actual_cost > sale_amount:\n        return (1 - sale_amount / actual_cost) * 100\n    else:\n        return None\n\n# Test the function with some sample data\nprint(loss_percentage(5000, 200))    # Output: 0.6\nprint(loss_percentage(400, 500))     # Output: None\n\n# Another version of the function that returns the loss amount as a string\ndef loss_amount_string(actual_cost, sale_amount):\n    if actual_cost > sale_amount:\n        return f\"Loss Amount: {actual_cost - sale_amount}\"\n    else:\n        return \"No Loss\"\n\n# Test the function with some sample data\nprint(loss_amount_string(5000, 200))    # Output: Loss Amount: 300\nprint(loss_amount_string(400, 500))     # Output: No L",
        "generated_testcode": "assert loss_amount(10000, 800) == 200\n",
        "test": "assert loss_amount(1500,1200)==None\nassert loss_amount(100,200)==100\nassert loss_amount(2000,5000)==3000",
        "canonical_solution": "def loss_amount(actual_cost,sale_amount): \r\n  if(sale_amount > actual_cost):\r\n    amount = sale_amount - actual_cost\r\n    return amount\r\n  else:\r\n    return None"
    },
    {
        "number": 453,
        "prompt": "Write a python function to find the sum of even factors of a number.\ndef sumofFactors(n) : \n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    sum = 0\n    for i in range(1,n+1) : \n        if(n%i == 0) : \n            sum += i \n    return sum \n\nn = int(input(\"Enter a number: \")) \nsum = sumofFactors(n) \nprint(\"The sum of factors of\",n,\"is\",sum) \n",
        "generated_testcode": "assert sumofFactors(12) == 16\n",
        "test": "assert sumofFactors(18) == 26\nassert sumofFactors(30) == 48\nassert sumofFactors(6) == 8",
        "canonical_solution": "import math \r\ndef sumofFactors(n) : \r\n    if (n % 2 != 0) : \r\n        return 0\r\n    res = 1\r\n    for i in range(2, (int)(math.sqrt(n)) + 1) :    \r\n        count = 0\r\n        curr_sum = 1\r\n        curr_term = 1\r\n        while (n % i == 0) : \r\n            count= count + 1\r\n            n = n // i \r\n            if (i == 2 and count == 1) : \r\n                curr_sum = 0\r\n            curr_term = curr_term * i \r\n            curr_sum = curr_sum + curr_term \r\n        res = res * curr_sum  \r\n    if (n >= 2) : \r\n        res = res * (1 + n) \r\n    return res "
    },
    {
        "number": 454,
        "prompt": "Write a function that matches a word containing 'z'.\ndef text_match_wordz(text):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    result = re.search(r'\\b\\w*z\\w*\\b', text)\n    if result:\n        return True\n    else:\n        return False\n\n# Example usage:\ntext_match_wordz(\"The quick brown fox jumps over the lazy dog\")  # Output: True\ntext_match_wordz(\"Python is awesome\")  # Output: False\ntext_match_wordz(\"Hello world\")  # Output: False\ntext_match_wordz(\"Hello zookeeper\")  # Output: True\n\n# Another example:\ntext_match_wordz(\"Python is an awesome programming language\")  # Output: True ",
        "generated_testcode": "assert text_match_wordz(\"The quick brown fox jumps over the lazy dog\") == True\n",
        "test": "assert text_match_wordz(\"pythonz.\")==('Found a match!')\nassert text_match_wordz(\"xyz.\")==('Found a match!')\nassert text_match_wordz(\"  lang  .\")==('Not matched!')",
        "canonical_solution": "import re\r\ndef text_match_wordz(text):\r\n        patterns = '\\w*z.\\w*'\r\n        if re.search(patterns,  text):\r\n                return 'Found a match!'\r\n        else:\r\n                return('Not matched!')"
    },
    {
        "number": 455,
        "prompt": "Write a function to check whether the given month number contains 31 days or not.\ndef check_monthnumb_number(monthnum2):\n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    if monthnum2 in [1,3,5,7,8,10,12]:\n        return True\n    elif monthnum2 in [4,6,9,11]:\n        return False\n    else:\n        return True\n\n#Testing the function\nprint(check_monthnumb_number(4)) #False\nprint(check_monthnumb_number(6)) #True\nprint(check_monthnumb_number(9)) #False\nprint(check_monthnumb_number(12)) #True ",
        "generated_testcode": "assert check_monthnumb_number(1) == True\n",
        "test": "assert check_monthnumb_number(5)==True\nassert check_monthnumb_number(2)==False\nassert check_monthnumb_number(6)==False",
        "canonical_solution": "def check_monthnumb_number(monthnum2):\r\n  if(monthnum2==1 or monthnum2==3 or monthnum2==5 or monthnum2==7 or monthnum2==8 or monthnum2==10 or monthnum2==12):\r\n    return True\r\n  else:\r\n    return False"
    },
    {
        "number": 456,
        "prompt": "Write a function to reverse strings in a given list of string values.\ndef reverse_string_list(stringlist):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    return [string[::-1] for string in stringlist]\n\n# Test cases\nprint(reverse_string_list([\"hello\", \"world\", \"python\", \"programming\"])) # Output: [\"olleh\", \"dlrow\", \"nohtyp\", \"gnimmargorp\"]\nprint(reverse_string_list([\"racecar\", \"hello\", \"Python\"])) # Output: [\"racecar\", \"olleh\", \"nohtyP\"]\nprint(reverse_string_list([])) # Output: []\nprint(reverse_string_list([\"a\"])) # Output: [\"a\"] ",
        "generated_testcode": "assert reverse_string_list(['hello', 'world', 'python']) == ['olleh', 'dlrow', 'nohtyp']\n",
        "test": "assert reverse_string_list(['Red', 'Green', 'Blue', 'White', 'Black'])==['deR', 'neerG', 'eulB', 'etihW', 'kcalB']\nassert reverse_string_list(['john','amal','joel','george'])==['nhoj','lama','leoj','egroeg']\nassert reverse_string_list(['jack','john','mary'])==['kcaj','nhoj','yram']",
        "canonical_solution": "def reverse_string_list(stringlist):\r\n    result = [x[::-1] for x in stringlist]\r\n    return result"
    },
    {
        "number": 457,
        "prompt": "Write a python function to find the sublist having minimum length.\ndef Find_Min(lst): \n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    min_len = len(lst)\n    for i in range(len(lst)): \n        for j in range(i + 1, len(lst)): \n            sub_lst = lst[i:j]\n            if len(sub_lst) < min_len and is_sorted(sub_lst): \n                min_len = len(sub_lst)\n    return min_len\n\n# Function to check whether the given list is sorted or not\ndef is_sorted(lst): \n    for i in range(1, len(lst)): \n        if lst[i] < lst[i - 1]: \n            return False\n    return True\n\n# Test the function\nlst = [1, 2, 3, 4, 5, 6] \nprint(\"Minimum length of a sorted sublist is\", Find_Min(lst)) ",
        "generated_testcode": "assert Find_Min([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 1\n",
        "test": "assert Find_Min([[1],[1,2],[1,2,3]]) == [1]\nassert Find_Min([[1,1],[1,1,1],[1,2,7,8]]) == [1,1]\nassert Find_Min([['x'],['x','y'],['x','y','z']]) == ['x']",
        "canonical_solution": "def Find_Min(lst): \r\n    minList = min((x) for x in lst) \r\n    return minList"
    },
    {
        "number": 458,
        "prompt": "Write a function to find the area of a rectangle.\ndef rectangle_area(l,b):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    area = l*b\n    return area\n\n# Test the function with a rectangle of length 5 and breadth 3\nprint(rectangle_area(5,3))\n\n# Write a function to find the perimeter of a rectangle.\ndef rectangle_perimeter(l,b):\n    perimeter = 2*(l+b)\n    return perimeter\n\n# Test the function with a rectangle of length 5 and breadth 3\nprint(rectangle_perimeter(5,3))\n\n# Write a function to find the area of a triangle.\ndef triangle_area(b,h):\n    area = 0.5*b*h\n    return area\n\n# Test the function with base 4 and height 5\nprint(triangle_area(4,5))\n\n# Write a function to find the area of a triangle using Heron's formula.\nimport math\ndef triangle_area_heron(a,b,c):\n    s = (a+b+c)/2\n    area = math.sqrt(s*(s-a)*(s-b)*(s-c))\n    return area\n\n# Test the function with sides 3,4,5\nprint(triangle_area_heron(3,4,5))\n\n# Write a function to find the volume of a rectangular prism.\ndef volume_rectangular_prism(l,w,h):\n    volume = l*w*h\n    return volume\n\n# Test the function with length 2, width 3 and height ",
        "generated_testcode": "assert rectangle_area(5, 10) == 50\n",
        "test": "assert rectangle_area(10,20)==200\nassert rectangle_area(10,5)==50\nassert rectangle_area(4,2)==8",
        "canonical_solution": "def rectangle_area(l,b):\r\n  area=l*b\r\n  return area"
    },
    {
        "number": 459,
        "prompt": "Write a function to remove uppercase substrings from a given string by using regex.\ndef remove_uppercase(str1):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    # Using regex to find all uppercase substrings\n    pattern = re.compile(r'\\b[A-Z]+\\b')\n    # Replace all uppercase substrings with ''\n    str1 = re.sub(pattern, '', str1)\n    return str1\n\n# Test the function\nprint(remove_uppercase('Hello World!')) # Output: 'Hello World!'\nprint(remove_uppercase('HELLO World!')) # Output: ' World!'\nprint(remove_uppercase('Hello WORLD!')) # Output: 'Hello !'\nprint(remove_uppercase('HeLLo WorLD!')) # Output: 'HeLLo !' ",
        "generated_testcode": "assert remove_uppercase(\"HelloWorld\") == \"HW\"\n",
        "test": "assert remove_uppercase('cAstyoUrFavoRitETVshoWs') == 'cstyoravoitshos'\nassert remove_uppercase('wAtchTheinTernEtrAdIo') == 'wtchheinerntrdo'\nassert remove_uppercase('VoicESeaRchAndreComMendaTionS') == 'oiceachndreomendaion'",
        "canonical_solution": "import re\r\ndef remove_uppercase(str1):\r\n  remove_upper = lambda text: re.sub('[A-Z]', '', text)\r\n  result =  remove_upper(str1)\r\n  return (result)"
    },
    {
        "number": 460,
        "prompt": "Write a python function to get the first element of each sublist.\ndef Extract(lst): \n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    return [sublist[0] for sublist in lst] \n\n#Example usage:\ninput_list = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nprint(Extract(input_list))\n# Output: [1, 4, 7] ",
        "generated_testcode": "assert Extract([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [1, 4, 7]\n",
        "test": "assert Extract([[1, 2], [3, 4, 5], [6, 7, 8, 9]]) == [1, 3, 6]\nassert Extract([[1,2,3],[4, 5]]) == [1,4]\nassert Extract([[9,8,1],[1,2]]) == [9,1]",
        "canonical_solution": "def Extract(lst): \r\n    return [item[0] for item in lst] "
    },
    {
        "number": 461,
        "prompt": "Write a python function to count the upper case characters in a given string.\ndef upper_ctr(str):\n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    count = 0\n    for i in str:\n        if i.isupper():\n            count += 1\n    return count\n\n# Test the function\nprint(upper_ctr(\"Hello World\")) # Should print 2\nprint(upper_ctr(\"HELLO WORLD\")) # Should print 5\nprint(upper_ctr(\"hello world\")) # Should print 0\nprint(upper_ctr(\"HELLO world\")) # Should print 1\n\n# Test cases\nprint(upper_ctr(\"HELLO WORLD\")) # Should print 5\nprint(upper_ctr(\"hello world\")) # Should print 0\nprint(upper_ctr(\"HELLO world\")) # Should print 1\n\n# Test cases\nprint(upper_ctr(\"Hello World\")) # Should print 2\nprint(upper_ctr(\"Python is fun\")) # Should print 1\nprint(upper_ctr(\"Python Is Fun\")) # Should print 2\nprint(upper_ctr(\"NO MORE TEST CASES\")) # Should print 8\nprint(upper_ctr(\"No more test cases\")) # Should print 0\nprint(upper_ctr(\"\")) # Should print 0\n\n# Edge case\nprint(upper_ctr(\"\")) # Should print 0\n\n# Test cases\nprint(upper_ctr(\"Hello World\")) # Should print 2\nprint(upper_ctr(\"Python is fun\")) # Should print 1\nprint(upper_ctr(\"Python Is Fun\")) # Should print 2\nprint(upper_ctr(\"NO MORE TEST CASES\")) # Should print 8",
        "generated_testcode": "assert upper_ctr(\"Hello World\") == 2\n",
        "test": "assert upper_ctr('PYthon') == 1\nassert upper_ctr('BigData') == 1\nassert upper_ctr('program') == 0",
        "canonical_solution": "def upper_ctr(str):\r\n    upper_ctr = 0\r\n    for i in range(len(str)):\r\n          if str[i] >= 'A' and str[i] <= 'Z': upper_ctr += 1\r\n          return upper_ctr"
    },
    {
        "number": 462,
        "prompt": "Write a function to find all possible combinations of the elements of a given list.\ndef combinations_list(list1):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": true,
        "answer": "    from itertools import combinations\n    result = []\n    for i in range(1, len(list1)+1):\n        for comb in combinations(list1, i):\n            result.append(list(comb))\n    return result\n\n# Example usage:\ncombinations_list([1,2,3]) # Output: [(1,), (2,), (3,), (1, 2), (1, 3), (2, 3), (1, 2, 3)]\ncombinations_list([1,2,3,4]) # Output: [(1,), (2,), (3,), (4,), (1, 2), (1, 3), (1, 4), (2, 3), (2, 4), (3, 4), (1, 2, 3), (1, 2, 4), (1, 3, 4), (2, 3, 4), (1, 2, 3, 4)]\ncombinations_list([1,2,3,4,5]) # Output: [(1,), (2,), (3,), (4,), (5,), (1, 2), (1, 3), (1, 4), (1, 5), (2, 3), (2, 4), (2, 5), (3, 4), (3, 5), (4, 5), (1, 2, 3), (1, 2, 4),",
        "generated_testcode": "assert combinations_list([1, 2, 3]) == [[1], [2], [3], [1, 2], [1, 3], [2, 3], [1, 2, 3]]\n",
        "test": "assert combinations_list(['orange', 'red', 'green', 'blue'])==[[], ['orange'], ['red'], ['red', 'orange'], ['green'], ['green', 'orange'], ['green', 'red'], ['green', 'red', 'orange'], ['blue'], ['blue', 'orange'], ['blue', 'red'], ['blue', 'red', 'orange'], ['blue', 'green'], ['blue', 'green', 'orange'], ['blue', 'green', 'red'], ['blue', 'green', 'red', 'orange']]\nassert combinations_list(['red', 'green', 'blue', 'white', 'black', 'orange'])==[[], ['red'], ['green'], ['green', 'red'], ['blue'], ['blue', 'red'], ['blue', 'green'], ['blue', 'green', 'red'], ['white'], ['white', 'red'], ['white', 'green'], ['white', 'green', 'red'], ['white', 'blue'], ['white', 'blue', 'red'], ['white', 'blue', 'green'], ['white', 'blue', 'green', 'red'], ['black'], ['black', 'red'], ['black', 'green'], ['black', 'green', 'red'], ['black', 'blue'], ['black', 'blue', 'red'], ['black', 'blue', 'green'], ['black', 'blue', 'green', 'red'], ['black', 'white'], ['black', 'white', 'red'], ['black', 'white', 'green'], ['black', 'white', 'green', 'red'], ['black', 'white', 'blue'], ['black', 'white', 'blue', 'red'], ['black', 'white', 'blue', 'green'], ['black', 'white', 'blue', 'green', 'red'], ['orange'], ['orange', 'red'], ['orange', 'green'], ['orange', 'green', 'red'], ['orange', 'blue'], ['orange', 'blue', 'red'], ['orange', 'blue', 'green'], ['orange', 'blue', 'green', 'red'], ['orange', 'white'], ['orange', 'white', 'red'], ['orange', 'white', 'green'], ['orange', 'white', 'green', 'red'], ['orange', 'white', 'blue'], ['orange', 'white', 'blue', 'red'], ['orange', 'white', 'blue', 'green'], ['orange', 'white', 'blue', 'green', 'red'], ['orange', 'black'], ['orange', 'black', 'red'], ['orange', 'black', 'green'], ['orange', 'black', 'green', 'red'], ['orange', 'black', 'blue'], ['orange', 'black', 'blue', 'red'], ['orange', 'black', 'blue', 'green'], ['orange', 'black', 'blue', 'green', 'red'], ['orange', 'black', 'white'], ['orange', 'black', 'white', 'red'], ['orange', 'black', 'white', 'green'], ['orange', 'black', 'white', 'green', 'red'], ['orange', 'black', 'white', 'blue'], ['orange', 'black', 'white', 'blue', 'red'], ['orange', 'black', 'white', 'blue', 'green'], ['orange', 'black', 'white', 'blue', 'green', 'red']]\nassert combinations_list(['red', 'green', 'black', 'orange'])==[[], ['red'], ['green'], ['green', 'red'], ['black'], ['black', 'red'], ['black', 'green'], ['black', 'green', 'red'], ['orange'], ['orange', 'red'], ['orange', 'green'], ['orange', 'green', 'red'], ['orange', 'black'], ['orange', 'black', 'red'], ['orange', 'black', 'green'], ['orange', 'black', 'green', 'red']]",
        "canonical_solution": "def combinations_list(list1):\r\n    if len(list1) == 0:\r\n        return [[]]\r\n    result = []\r\n    for el in combinations_list(list1[1:]):\r\n        result += [el, el+[list1[0]]]\r\n    return result"
    },
    {
        "number": 463,
        "prompt": "Write a function to find the maximum product subarray of the given array.\ndef max_subarray_product(arr):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    if not arr:\n        return None\n\n    max_product = arr[0]\n    min_product = arr[0]\n    result = arr[0]\n\n    for num in arr[1:]:\n        if num < 0:\n            max_product, min_product = min_product, max_product\n\n        max_product = max(num, max_product * num)\n        min_product = min(num, min_product * num)\n        result = max(result, max_product)\n\n    return result\n\n\n# Test cases\nprint(max_subarray_product([2, 3, -2, 4]))  # Output: 6\nprint(max_subarray_product([-2, 0, -1]))  # Output: 0\nprint(max_subarray_product([-2, 3, -4]))  # Output: 24\nprint(max_subarray_product([-2, 3, 4, -1, 5, 0, -11]))  # Output: 60\nprint(max_subarray_product([-2, 3, -4, 5, -1, 0, -11]))  # Output: 60\nprint(max_subarray_product([-2, -3, 4, -1, 5, 0, 11]))  # Output: 55\n",
        "generated_testcode": "assert max_subarray_product([-1, -2, 3, -4, 5, 2, -10, 7]) == 168\n",
        "test": "assert max_subarray_product([1, -2, -3, 0, 7, -8, -2]) == 112\nassert max_subarray_product([6, -3, -10, 0, 2]) == 180 \nassert max_subarray_product([-2, -40, 0, -2, -3]) == 80",
        "canonical_solution": "def max_subarray_product(arr):\r\n\tn = len(arr)\r\n\tmax_ending_here = 1\r\n\tmin_ending_here = 1\r\n\tmax_so_far = 0\r\n\tflag = 0\r\n\tfor i in range(0, n):\r\n\t\tif arr[i] > 0:\r\n\t\t\tmax_ending_here = max_ending_here * arr[i]\r\n\t\t\tmin_ending_here = min (min_ending_here * arr[i], 1)\r\n\t\t\tflag = 1\r\n\t\telif arr[i] == 0:\r\n\t\t\tmax_ending_here = 1\r\n\t\t\tmin_ending_here = 1\r\n\t\telse:\r\n\t\t\ttemp = max_ending_here\r\n\t\t\tmax_ending_here = max (min_ending_here * arr[i], 1)\r\n\t\t\tmin_ending_here = temp * arr[i]\r\n\t\tif (max_so_far < max_ending_here):\r\n\t\t\tmax_so_far = max_ending_here\r\n\tif flag == 0 and max_so_far == 0:\r\n\t\treturn 0\r\n\treturn max_so_far"
    },
    {
        "number": 464,
        "prompt": "Write a function to check if all values are same in a dictionary.\ndef check_value(dict, n):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": true,
        "answer": "    values = list(dict.values())\n    if len(set(values)) == 1:\n        return True\n    else:\n        return False\n\n# Test the function\nmy_dict = {'a': 1, 'b': 1, 'c': 1, 'd': 1}\nprint(check_value(my_dict, 1))  # Output: True\n\nmy_dict = {'a': 1, 'b': 2, 'c': 1, 'd': 1}\nprint(check_value(my_dict, 1))  # Output: False\n\nmy_dict = {'a': 1, 'b': 2, 'c': 3, 'd': 1}\nprint(check_value(my_dict, 1))  # Output: False\n\n# In the above example, the function returns True for the first two tests because all the values in the dictionaries are the same and equal to 1. It returns False for the third test because the values are not the same. ",
        "generated_testcode": "assert check_value({'a': 1, 'b': 1, 'c': 1}, 1) == True\n",
        "test": "assert check_value({'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12},10)==False\nassert check_value({'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12},12)==True\nassert check_value({'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12},5)==False",
        "canonical_solution": "def check_value(dict, n):\r\n    result = all(x == n for x in dict.values()) \r\n    return result"
    },
    {
        "number": 465,
        "prompt": "Write a function to drop empty items from a given dictionary.\ndef drop_empty(dict1):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    return {k: v for k, v in dict1.items() if v}\n\n# Test the function with a dictionary with empty items\ndict1 = {'a': 1, 'b': 2, 'c': None, 'd': '', 'e': 0, 'f': 4, 'g': False, 'h': {}}\nprint(drop_empty(dict1))  # Output: {'a': 1, 'b': 2, 'f': 4}\n\n# Test the function with a dictionary without empty items\ndict2 = {'a': 1, 'b': 2, 'c': 3, 'd': 'four', 'e': 'five'}\nprint(drop_empty(dict2))  # Output: {'a': 1, 'b': 2, 'c': 3, 'd': 'four', 'e': 'five'}\n\n# Test the function with an empty dictionary\ndict3 = {}\nprint(drop_empty(dict3))  # Output: {} ",
        "generated_testcode": "assert drop_empty({'a': 1, 'b': 2, 'c': None, 'd': 3, 'e': None}) == {'a': 1, 'd': 3}\n",
        "test": "assert drop_empty({'c1': 'Red', 'c2': 'Green', 'c3':None})=={'c1': 'Red', 'c2': 'Green'}\nassert drop_empty({'c1': 'Red', 'c2': None, 'c3':None})=={'c1': 'Red'}\nassert drop_empty({'c1': None, 'c2': 'Green', 'c3':None})=={ 'c2': 'Green'}",
        "canonical_solution": "def drop_empty(dict1):\r\n  dict1 = {key:value for (key, value) in dict1.items() if value is not None}\r\n  return dict1"
    },
    {
        "number": 466,
        "prompt": "Write a function to find the peak element in the given array.\ndef find_peak_util(arr, low, high, n): \n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    # Base case \n    if high == low: \n        return high \n    if high == 1: \n        return 0\n  \n    # Find the middle index \n    mid = (low + high) // 2\n  \n    # Compare the middle element with its adjacent elements \n    if (mid == 0 or arr[mid - 1] <= arr[mid]) and (mid == n - 1 or arr[mid + 1] <= arr[mid]): \n        return mid \n    elif (mid > 0 and arr[mid - 1] > arr[mid]): \n        return find_peak_util(arr, low, mid - 1, n) \n    else: \n        return find_peak_util(arr, mid + 1, high, n) \n  \ndef find_peak(arr, n): \n    return find_peak_util(arr, 0, n - 1, n) \n  \n# Test the function \narr = [1, 3, 20, 4, 5, 19, 25, 6, 21, 7] \nn = len(arr) \nresult = find_peak(arr, n) \nif result == -1: \n    print(\"No peak element\") \nelse: \n    print(\"Peak element is\", arr[result]) ",
        "generated_testcode": "assert find_peak_util([1, 2, 3, 4, 5, 6, 7, 8, 9], 0, 6, 7) == 6\n",
        "test": "assert find_peak([1, 3, 20, 4, 1, 0], 6) == 2\nassert find_peak([2, 3, 4, 5, 6], 5) == 4\nassert find_peak([8, 9, 11, 12, 14, 15], 6) == 5 ",
        "canonical_solution": "def find_peak_util(arr, low, high, n): \r\n\tmid = low + (high - low)/2\r\n\tmid = int(mid) \r\n\tif ((mid == 0 or arr[mid - 1] <= arr[mid]) and\r\n\t\t(mid == n - 1 or arr[mid + 1] <= arr[mid])): \r\n\t\treturn mid \r\n\telif (mid > 0 and arr[mid - 1] > arr[mid]): \r\n\t\treturn find_peak_util(arr, low, (mid - 1), n) \r\n\telse: \r\n\t\treturn find_peak_util(arr, (mid + 1), high, n) \r\ndef find_peak(arr, n): \r\n\treturn find_peak_util(arr, 0, n - 1, n) "
    },
    {
        "number": 467,
        "prompt": "Write a python function to convert decimal number to octal number.\ndef decimal_to_Octal(deciNum):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    octal = \"\"\n    while deciNum > 0:\n        remainder = deciNum % 8\n        octal = str(remainder) + octal\n        deciNum = deciNum // 8\n    return octal\n\n#Test the function\ndecimal_num = 20\nprint(\"Decimal number:\", decimal_num)\nprint(\"Octal number:\", decimal_to_Octal(decimal_num))\n\n#Output: Octal number: 24\n",
        "generated_testcode": "assert decimal_to_Octal(10) == '12'\n",
        "test": "assert decimal_to_Octal(10) == 12\nassert decimal_to_Octal(2) == 2\nassert decimal_to_Octal(33) == 41",
        "canonical_solution": "def decimal_to_Octal(deciNum):\r\n    octalNum = 0\r\n    countval = 1;\r\n    dNo = deciNum;\r\n    while (deciNum!= 0):\r\n        remainder= deciNum % 8;\r\n        octalNum+= remainder*countval;\r\n        countval= countval*10;\r\n        deciNum //= 8; \r\n    return (octalNum)"
    },
    {
        "number": 468,
        "prompt": "Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\ndef max_product(arr, n ): \n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    max_so_far = arr[0]\n    max_ending_here = arr[0]\n    min_ending_here = arr[0]\n    result = arr[0]\n  \n    for i in range(1, n): \n        if arr[i] < 0: \n            max_ending_here, min_ending_here = min_ending_here, max_ending_here\n  \n        max_ending_here = max(arr[i], max_ending_here * arr[i])\n        min_ending_here = min(arr[i], min_ending_here * arr[i])\n        max_so_far = max(max_so_far, max_ending_here)\n  \n    return max_so_far \n  \nn = int(input())\narr = list(map(int, input().split()))\nprint(max_product(arr, n)) ",
        "generated_testcode": "assert max_product([1, 2, 3, 4, 5, 6, 7], 5) == 210\n",
        "test": "assert max_product([3, 100, 4, 5, 150, 6], 6) == 45000 \nassert max_product([4, 42, 55, 68, 80], 5) == 50265600\nassert max_product([10, 22, 9, 33, 21, 50, 41, 60], 8) == 21780000 ",
        "canonical_solution": "def max_product(arr, n ): \r\n\tmpis =[0] * (n) \r\n\tfor i in range(n): \r\n\t\tmpis[i] = arr[i] \r\n\tfor i in range(1, n): \r\n\t\tfor j in range(i): \r\n\t\t\tif (arr[i] > arr[j] and\r\n\t\t\t\t\tmpis[i] < (mpis[j] * arr[i])): \r\n\t\t\t\t\t\tmpis[i] = mpis[j] * arr[i] \r\n\treturn max(mpis)"
    },
    {
        "number": 469,
        "prompt": "Write a function to find the maximum profit earned from a maximum of k stock transactions\ndef max_profit(price, k):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    if not price or k == 0:\n        return 0\n\n    n = len(price)\n    if k >= n // 2:\n        # max profit with unlimited transactions\n        profit = 0\n        for i in range(1, n):\n            profit += max(price[i] - price[i - 1], 0)\n        return profit\n\n    # Initialize the table\n    buy = [float('-inf')] * (k + 1)\n    sell = [0] * (k + 1)\n\n    for i in range(n):\n        for j in range(1, k + 1):\n            buy[j] = max(buy[j], sell[j - 1] - price[i])\n            sell[j] = max(sell[j], buy[j] + price[i])\n\n    return sell[-1]\n\n\n\n# Test the function with an example\nprice = [310, 315, 275, 295, 260, 280, 255, 250]\nk = 2\nprint(max_profit(price, k))  # Output: 30 (buy at 250 and sell at 295, then buy at 255 and sell at 280)\n",
        "generated_testcode": "assert max_profit([10, 22, 5, 75, 65, 30, 80], 2) == 87\n",
        "test": "assert max_profit([1, 5, 2, 3, 7, 6, 4, 5], 3) == 10\nassert max_profit([2, 4, 7, 5, 4, 3, 5], 2) == 7\nassert max_profit([10, 6, 8, 4, 2], 2) == 2",
        "canonical_solution": "def max_profit(price, k):\r\n    n = len(price)\r\n    final_profit = [[None for x in range(n)] for y in range(k + 1)]\r\n    for i in range(k + 1):\r\n        for j in range(n):\r\n            if i == 0 or j == 0:\r\n                final_profit[i][j] = 0\r\n            else:\r\n                max_so_far = 0\r\n                for x in range(j):\r\n                    curr_price = price[j] - price[x] + final_profit[i-1][x]\r\n                    if max_so_far < curr_price:\r\n                        max_so_far = curr_price\r\n                final_profit[i][j] = max(final_profit[i][j-1], max_so_far)\r\n    return final_profit[k][n-1]"
    },
    {
        "number": 470,
        "prompt": "Write a function to find the pairwise addition of the elements of the given tuples.\ndef add_pairwise(test_tup):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    result = []\n    for i in range(len(test_tup)):\n        for j in range(i+1, len(test_tup)):\n            result.append(test_tup[i] + test_tup[j])\n    return result\n\n# Test the function with some sample input\ntest_tup = (1, 2, 3, 4, 5)\nprint(add_pairwise(test_tup)) # Output: [3, 4, 5, 6, 7, 5, 6, 7, 8, 9]\n\n# Another example\ntest_tup2 = (5, 10, 15, 20)\nprint(add_pairwise(test_tup2)) # Output: [15, 16, 18, 20, 25, 18, 21, 26, 30] ",
        "generated_testcode": "assert add_pairwise((1, 2, 3, 4, 5) == (3, 5, 7, 9))\n",
        "test": "assert add_pairwise((1, 5, 7, 8, 10)) == (6, 12, 15, 18)\nassert add_pairwise((2, 6, 8, 9, 11)) == (8, 14, 17, 20)\nassert add_pairwise((3, 7, 9, 10, 12)) == (10, 16, 19, 22)",
        "canonical_solution": "def add_pairwise(test_tup):\r\n  res = tuple(i + j for i, j in zip(test_tup, test_tup[1:]))\r\n  return (res) "
    },
    {
        "number": 471,
        "prompt": "Write a python function to find remainder of array multiplication divided by n.\ndef find_remainder(arr, lens, n): \n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    total = 1\n    for i in range(lens): \n        total = (total * arr[i]) % n\n    return total\n\n# Driver code \narr = [2, 4, 7, 5, 8] \nn = 5\nlens = len(arr) \nprint(find_remainder(arr, lens, n)) \n",
        "generated_testcode": "assert find_remainder([1, 2, 3, 4, 5], 4, 2) == 0\n",
        "test": "assert find_remainder([ 100, 10, 5, 25, 35, 14 ],6,11) ==9\nassert find_remainder([1,1,1],3,1) == 0\nassert find_remainder([1,2,1],3,2) == 0",
        "canonical_solution": "def find_remainder(arr, lens, n): \r\n    mul = 1\r\n    for i in range(lens):  \r\n        mul = (mul * (arr[i] % n)) % n \r\n    return mul % n "
    },
    {
        "number": 472,
        "prompt": "Write a python function to check whether the given list contains consecutive numbers or not.\ndef check_Consecutive(l): \n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    l.sort()\n    for i in range(len(l)-1): \n        if (l[i+1]-l[i]) != 1: \n            return False\n    return True\n\n# Test the function \nl = [1, 2, 3, 4, 5, 6, 7] \nprint(check_Consecutive(l)) \nl = [1, 2, 4, 5, 6, 7] \nprint(check_Consecutive(l)) \n\n# The output will be True and False respectively. ",
        "generated_testcode": "assert check_Consecutive([1, 2, 3, 4, 5, 6, 7]) == True\n",
        "test": "assert check_Consecutive([1,2,3,4,5]) == True\nassert check_Consecutive([1,2,3,5,6]) == False\nassert check_Consecutive([1,2,1]) == False",
        "canonical_solution": "def check_Consecutive(l): \r\n    return sorted(l) == list(range(min(l),max(l)+1)) "
    },
    {
        "number": 473,
        "prompt": "Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\ndef tuple_intersection(test_list1, test_list2):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    intersection = set(test_list1).intersection(set(test_list2))\n    return tuple(intersection)\n\n# Example usage:\ntest_list1 = ((1, 2, 3), (4, 5, 6), (7, 8, 9))\ntest_list2 = ((7, 8, 9), (10, 11, 12), (1, 2, 3))\nprint(tuple_intersection(test_list1, test_list2))  # Output: (1, 2, 3, 7, 8, 9)\n\ntest_list1 = ((1, 2, 3), (4, 5, 6), (7, 8, 9))\ntest_list2 = ((10, 11, 12), (13, 14, 15), (16, 17, 18))\nprint(tuple_intersection(test_list1, test_list2))  # Output: ()\n\ntest_list1 = ((1, 2, 3), (4, 5, 6), (7, 8, 9))\ntest_list2 = (1, 2, 3, 4, 5, 6, 7, 8, 9)\nprint(tuple_intersection(test_list1, test_list2))  # Output: (1, 2, 3, 4, 5, 6, ",
        "generated_testcode": "assert tuple_intersection((1, 2, 3), (2, 3, 4)) == (2, 3)\n",
        "test": "assert tuple_intersection([(3, 4), (5, 6), (9, 10), (4, 5)] , [(5, 4), (3, 4), (6, 5), (9, 11)]) == {(4, 5), (3, 4), (5, 6)}\nassert tuple_intersection([(4, 1), (7, 4), (11, 13), (17, 14)] , [(1, 4), (7, 4), (16, 12), (10, 13)]) == {(4, 7), (1, 4)}\nassert tuple_intersection([(2, 1), (3, 2), (1, 3), (1, 4)] , [(11, 2), (2, 3), (6, 2), (1, 3)]) == {(1, 3), (2, 3)}",
        "canonical_solution": "def tuple_intersection(test_list1, test_list2):\r\n  res = set([tuple(sorted(ele)) for ele in test_list1]) & set([tuple(sorted(ele)) for ele in test_list2])\r\n  return (res)"
    },
    {
        "number": 474,
        "prompt": "Write a function to replace characters in a string.\ndef replace_char(str1,ch,newch):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    new_str = \"\"\n    for i in str1:\n        if i == ch:\n            new_str += newch\n        else:\n            new_str += i\n    return new_str\n\nstr1 = \"hello world\"\nch = \"l\"\nnewch = \"L\"\nprint(replace_char(str1,ch,newch))\n\n# Output: heLLo worLd\n\n# Code explained:\n# We are iterating through each character in the string, and checking if the character is the same as the character we want to replace.\n# If it is, we add the new character to the new string, otherwise we add the original character. Finally, we return the new string. ",
        "generated_testcode": "assert replace_char(\"hello world\", \"o\", \"0\") == \"hell0 w0rld\"\n",
        "test": "assert replace_char(\"polygon\",'y','l')==(\"pollgon\")\nassert replace_char(\"character\",'c','a')==(\"aharaater\")\nassert replace_char(\"python\",'l','a')==(\"python\")",
        "canonical_solution": "def replace_char(str1,ch,newch):\r\n str2 = str1.replace(ch, newch)\r\n return str2"
    },
    {
        "number": 475,
        "prompt": "Write a function to sort counter by value.\ndef sort_counter(dict1):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    sorted_dict = dict(sorted(dict1.items(), key=lambda x: x[1])[::-1])\n    return sorted_dict\n\n\n# Test the function with an example dictionary\ndict1 = {'a': 4, 'b': 2, 'c': 3, 'd': 1, 'e': 4}\nprint(sort_counter(dict1))\n",
        "generated_testcode": "assert sort_counter(Counter({'a': 3, 'b': 2, 'c': 1, 'd': 4, 'e': 1}) == Counter({'e': 1, 'c': 1, 'a': 3, 'b': 2, 'd': 4})\n",
        "test": "assert sort_counter({'Math':81, 'Physics':83, 'Chemistry':87})==[('Chemistry', 87), ('Physics', 83), ('Math', 81)]\nassert sort_counter({'Math':400, 'Physics':300, 'Chemistry':250})==[('Math', 400), ('Physics', 300), ('Chemistry', 250)]\nassert sort_counter({'Math':900, 'Physics':1000, 'Chemistry':1250})==[('Chemistry', 1250), ('Physics', 1000), ('Math', 900)]",
        "canonical_solution": "from collections import Counter\r\ndef sort_counter(dict1):\r\n x = Counter(dict1)\r\n sort_counter=x.most_common()\r\n return sort_counter"
    },
    {
        "number": 476,
        "prompt": "Write a python function to find the sum of the largest and smallest value in a given array.\ndef big_sum(nums):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    sum_max = 0\n    sum_min = 0\n    for num in nums:\n        if num > sum_max:\n            sum_max = num\n        if num < sum_min or sum_min == 0:\n            sum_min = num\n    return sum_max, sum_min\n\n# Testing the function with an example\nnums = [1, 5, 10, 3, 8, 2, 12]\nprint(big_sum(nums))  # Output: (12, 1)\n\n# Testing the function with an empty array\nnums = []\nprint(big_sum(nums))  # Output: (0, 0) ",
        "generated_testcode": "assert big_sum([1, 2, 3, 4, 5, 6, 7, 8, 9]) == (45, 1)\n",
        "test": "assert big_sum([1,2,3]) == 4\nassert big_sum([-1,2,3,4]) == 3\nassert big_sum([2,3,6]) == 8",
        "canonical_solution": "def big_sum(nums):\r\n      sum= max(nums)+min(nums)\r\n      return sum"
    },
    {
        "number": 477,
        "prompt": "Write a python function to convert the given string to lower case.\ndef is_lower(string):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    return string.islower()\n\n# Example usage:\nprint(is_lower(\"python\"))  # Output: True\nprint(is_lower(\"Python\"))  # Output: False\n\n# Write a python function to count the number of uppercase characters in a string\ndef count_upper(string):\n    count = 0\n    for char in string:\n        if char.isupper():\n            count += 1\n    return count\n\n# Example usage:\nprint(count_upper(\"Python Programming\"))  # Output: 2\nprint(count_upper(\"This is a string\"))  # Output: 1\n\n# Write a python function to count the number of lowercase characters in a string\ndef count_lower(string):\n    count = 0\n    for char in string:\n        if char.islower():\n            count += 1\n    return count\n\n# Example usage:\nprint(count_lower(\"Python Programming\"))  # Output: 10\nprint(count_lower(\"THIS IS A STRING\"))  # Output: 0\n\n# Write a python function to convert all uppercase characters in a string to lowercase\ndef lowercase_string(string):\n    return string.lower()\n\n# Example usage:\nprint(lowercase_string(\"PYTHON PROGRAMMING\"))  # Output: python programming\n\n# Write a python function to convert all lowercase characters in a string to uppercase\ndef uppercase_string(string):\n    return string.upper()\n\n# Example usage:\nprint(uppercase",
        "generated_testcode": "assert is_lower(\"HELLO\") == \"hello\"\n",
        "test": "assert is_lower(\"InValid\") == \"invalid\"\nassert is_lower(\"TruE\") == \"true\"\nassert is_lower(\"SenTenCE\") == \"sentence\"",
        "canonical_solution": "def is_lower(string):\r\n  return (string.lower())"
    },
    {
        "number": 478,
        "prompt": "Write a function to remove lowercase substrings from a given string.\ndef remove_lowercase(str1):\n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    result = \"\"\n    for i in str1:\n        if i.isupper():\n            result += i\n    return result\n\n# Test cases\nprint(remove_lowercase(\"Hello World\"))  # Output: \"HW\"\nprint(remove_lowercase(\"Python is awesome\"))  # Output: \"PYTHONIAWE\"\nprint(remove_lowercase(\"aBcDeFgHiJkLmNoP\"))  # Output: \"ABCDEFGHJKLMP\"\nprint(remove_lowercase(\"The quick brown fox jumps over the lazy dog\"))  # Output: \"THEVQUICKBROWNFXJUMPSTHELZYDOG\" ",
        "generated_testcode": "assert remove_lowercase(\"Hello World\") == \"HW\"\n",
        "test": "assert remove_lowercase(\"PYTHon\")==('PYTH')\nassert remove_lowercase(\"FInD\")==('FID')\nassert remove_lowercase(\"STRinG\")==('STRG')",
        "canonical_solution": "import re\r\ndef remove_lowercase(str1):\r\n remove_lower = lambda text: re.sub('[a-z]', '', text)\r\n result =  remove_lower(str1)\r\n return result"
    },
    {
        "number": 479,
        "prompt": "Write a python function to find the first digit of a given number.\ndef first_Digit(n) :  \n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    while n >= 10 : \n        n //= 10\n    return n \n\n# Test the function with some examples \nprint(first_Digit(12345)) # Output : 1 \nprint(first_Digit(9)) # Output : 9 \nprint(first_Digit(0)) # Output : 0 \nprint(first_Digit(-123)) # Output : -1 ",
        "generated_testcode": "assert first_Digit(12345) == 1\n",
        "test": "assert first_Digit(123) == 1\nassert first_Digit(456) == 4\nassert first_Digit(12) == 1",
        "canonical_solution": "def first_Digit(n) :  \r\n    while n >= 10:  \r\n        n = n / 10; \r\n    return int(n) "
    },
    {
        "number": 480,
        "prompt": "Write a python function to find the maximum occurring character in a given string.\ndef get_max_occuring_char(str1):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    count_dict = {}\n    for char in str1:\n        if char in count_dict:\n            count_dict[char] += 1\n        else:\n            count_dict[char] = 1\n    max_char = \"\"\n    max_count = 0\n    for key, value in count_dict.items():\n        if value > max_count:\n            max_char = key\n            max_count = value\n    return max_char\n\nprint(get_max_occuring_char(\"Hello World\")) #Output: l\nprint(get_max_occuring_char(\"Python Programming\")) #Output: o\nprint(get_max_occuring_char(\"programming is fun\")) #Output: r",
        "generated_testcode": "assert get_max_occuring_char(\"hello\") == \"l\"\n",
        "test": "assert get_max_occuring_char(\"data\") == \"a\"\nassert get_max_occuring_char(\"create\") == \"e\"\nassert get_max_occuring_char(\"brilliant girl\") == \"i\"",
        "canonical_solution": "def get_max_occuring_char(str1):\r\n  ASCII_SIZE = 256\r\n  ctr = [0] * ASCII_SIZE\r\n  max = -1\r\n  ch = ''\r\n  for i in str1:\r\n    ctr[ord(i)]+=1;\r\n  for i in str1:\r\n    if max < ctr[ord(i)]:\r\n      max = ctr[ord(i)]\r\n      ch = i\r\n  return ch"
    },
    {
        "number": 481,
        "prompt": "Write a function to determine if there is a subset of the given set with sum equal to the given sum.\ndef is_subset_sum(set, n, sum):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    if (sum == 0):\n        return True\n    if (n == 0 and sum != 0):\n        return False\n    if (set[n-1] > sum):\n        return is_subset_sum(set, n-1, sum)\n    return is_subset_sum(set, n-1, sum) or is_subset_sum(set, n-1, sum-set[n-1])\n\nset = [3, 34, 4, 12, 5, 2]\nsum = 9\nn = len(set)\nif is_subset_sum(set, n, sum):\n    print(\"Yes\")\nelse:\n    print(\"No\")\n\n# Time Complexity: O(2^n)\n# Space Complexity: O(n)\n# This approach is inefficient as it tries all possible combinations of the elements in the set to find a subset with the given sum. ",
        "generated_testcode": "assert is_subset_sum([1, 2, 3, 4, 5, 6], 9) == True\n",
        "test": "assert is_subset_sum([3, 34, 4, 12, 5, 2], 6, 9) == True\nassert is_subset_sum([3, 34, 4, 12, 5, 2], 6, 30) == False\nassert is_subset_sum([3, 34, 4, 12, 5, 2], 6, 15) == True",
        "canonical_solution": "def is_subset_sum(set, n, sum):\r\n\tif (sum == 0):\r\n\t\treturn True\r\n\tif (n == 0):\r\n\t\treturn False\r\n\tif (set[n - 1] > sum):\r\n\t\treturn is_subset_sum(set, n - 1, sum)\r\n\treturn is_subset_sum(set, n-1, sum) or is_subset_sum(set, n-1, sum-set[n-1])"
    },
    {
        "number": 482,
        "prompt": "Write a function to find sequences of one upper case letter followed by lower case letters in the given string by using regex.\ndef match(text): \n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    import re\n    pattern = re.compile(r'[A-Z][a-z]+')\n    matches = pattern.findall(text)\n    return matches\n\n# Test the function\nprint(match(\"HeLLo WORld\"))\n# Output: ['HeLl']\n\n# Test the function\nprint(match(\"Hello World\"))\n# Output: []\n\n# Test the function\nprint(match(\"HeLLo woRLd\"))\n# Output: ['HeLl', 'woRl']\n\n# Test the function\nprint(match(\"HELLO wOrld\"))\n# Output: ['HELLO', 'wOr'] ",
        "generated_testcode": "assert match(\"Hello world\") == True\n",
        "test": "assert match(\"Geeks\") == 'Yes'\nassert match(\"geeksforGeeks\") == 'Yes'\nassert match(\"geeks\") == 'No'",
        "canonical_solution": "import re \r\ndef match(text): \r\n\t\tpattern = '[A-Z]+[a-z]+$'\r\n\t\tif re.search(pattern, text): \r\n\t\t\t\treturn('Yes') \r\n\t\telse: \r\n\t\t\t\treturn('No') "
    },
    {
        "number": 483,
        "prompt": "Write a python function to find the first natural number whose factorial is divisible by x.\ndef first_Factorial_Divisible_Number(x): \n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    n = 1\n    while True: \n        if x % math.factorial(n) == 0: \n            return n \n        n += 1\n\n# Test the function \nprint(first_Factorial_Divisible_Number(10)) ",
        "generated_testcode": "assert first_Factorial_Divisible_Number(10) == 6\n",
        "test": "assert first_Factorial_Divisible_Number(10) == 5\nassert first_Factorial_Divisible_Number(15) == 5\nassert first_Factorial_Divisible_Number(5) == 4",
        "canonical_solution": "def first_Factorial_Divisible_Number(x): \r\n    i = 1;\r\n    fact = 1; \r\n    for i in range(1,x): \r\n        fact = fact * i \r\n        if (fact % x == 0): \r\n            break\r\n    return i "
    },
    {
        "number": 484,
        "prompt": "Write a function to remove the matching tuples from the given two tuples.\ndef remove_matching_tuple(test_list1, test_list2):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    result = []\n    for i in test_list1:\n        if i not in test_list2:\n            result.append(i)\n    return result\n\n#Example usage:\ntest_list1 = [(1,2), (3,4), (5,6), (7,8), (9,10)]\ntest_list2 = [(1,2), (5,6)]\nprint(remove_matching_tuple(test_list1, test_list2)) # Output: [(3, 4), (7, 8), (9, 10)]\n\n#Explanation:\n# The function removes the tuples that are present in both lists. ",
        "generated_testcode": "assert remove_matching_tuple(test_list1, test_list2) == [(1, 2, 3), (4, 5, 6)]\n\n# The function should return [(1, 2, 3), (4, 5, 6)] as the output. ",
        "test": "assert remove_matching_tuple([('Hello', 'dude'), ('How', 'are'), ('you', '?')], [('Hello', 'dude'), ('How', 'are')]) == [('you', '?')]\nassert remove_matching_tuple([('Part', 'of'), ('the', 'journey'), ('is ', 'end')], [('Journey', 'the'), ('is', 'end')]) == [('Part', 'of'), ('the', 'journey'), ('is ', 'end')]\nassert remove_matching_tuple([('Its', 'been'), ('a', 'long'), ('day', 'without')], [('a', 'long'), ('my', 'friend')]) == [('Its', 'been'), ('day', 'without')]",
        "canonical_solution": "def remove_matching_tuple(test_list1, test_list2):\r\n  res = [sub for sub in test_list1 if sub not in test_list2]\r\n  return (res) "
    },
    {
        "number": 485,
        "prompt": "Write a function to find the largest palindromic number in the given array.\ndef is_palindrome(n) : \n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    return str(n) == str(n)[::-1]\n\ndef largest_palindrome(arr): \n    max_palindrome = 0\n    for i in arr: \n        if is_palindrome(i) and i > max_palindrome: \n            max_palindrome = i \n    return max_palindrome ",
        "generated_testcode": "assert is_palindrome(12321) == True\n",
        "test": "assert largest_palindrome([1, 232, 54545, 999991], 4) == 54545\nassert largest_palindrome([1, 2, 3, 4, 5, 50], 6) == 5\nassert largest_palindrome([1, 3, 7, 9, 45], 5)  == 9",
        "canonical_solution": "def is_palindrome(n) : \r\n\tdivisor = 1\r\n\twhile (n / divisor >= 10) : \r\n\t\tdivisor *= 10\r\n\twhile (n != 0) : \r\n\t\tleading = n // divisor \r\n\t\ttrailing = n % 10\r\n\t\tif (leading != trailing) : \r\n\t\t\treturn False\r\n\t\tn = (n % divisor) // 10\r\n\t\tdivisor = divisor // 100\r\n\treturn True\r\ndef largest_palindrome(A, n) : \r\n\tA.sort() \r\n\tfor i in range(n - 1, -1, -1) : \r\n\t\tif (is_palindrome(A[i])) : \r\n\t\t\treturn A[i] \r\n\treturn -1"
    },
    {
        "number": 486,
        "prompt": "Write a function to compute binomial probability for the given number.\ndef nCr(n, r): \n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    r = min(r, n-r) \n    numer = 1\n    denom = 1\n    for i in range(r): \n        numer *= n - i \n        denom *= i + 1\n    return numer//denom \n\n# Driver program to test above function \nn = 5\np = 0.4\nq = 0.6\nx = 2\n\n# Probability of getting at least 2 heads in 5 trials is \n# sum of probability of 2 heads, 3 heads and 4 heads \n# Using the formula of nCr(n,r)*p^r*(1-p)^(n-r) \nprob = 0\nfor r in range(2, 5+1): \n    prob += nCr(n,r)*(p**r)*(q**(n-r) ) \nprint(round(1-prob, 3)) ",
        "generated_testcode": "assert nCr(5, 3) == 10\n",
        "test": "assert binomial_probability(10, 5, 1.0/3) == 0.13656454808718185\nassert binomial_probability(11, 6, 2.0/4) == 0.2255859375\nassert binomial_probability(12, 7, 3.0/5) == 0.227030335488",
        "canonical_solution": "def nCr(n, r): \r\n\tif (r > n / 2): \r\n\t\tr = n - r \r\n\tanswer = 1 \r\n\tfor i in range(1, r + 1): \r\n\t\tanswer *= (n - r + i) \r\n\t\tanswer /= i \r\n\treturn answer \r\ndef binomial_probability(n, k, p): \r\n\treturn (nCr(n, k) * pow(p, k) *\tpow(1 - p, n - k)) "
    },
    {
        "number": 487,
        "prompt": "Write a function to sort a list of tuples in increasing order by the last element in each tuple.\ndef sort_tuple(tup): \n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    return sorted(tup, key=lambda x: x[1])\n    \n#Example usage:\ntup = [(2, 3), (1, 2), (3, 1), (4, 4), (5, 2), (6, 7), (7, 6)]\nprint(sort_tuple(tup))\n#Output: [(1, 2), (3, 1), (2, 3), (5, 2), (4, 4), (6, 7), (7, 6)]\n\n#Example usage 2:\ntup2 = [(1, 2, 3), (1, 1, 4), (4, 3, 2), (5, 5, 3), (6, 2, 1), (7, 3, 4)]\nprint(sort_tuple(tup2))\n#Output: [(6, 2, 1), (1, 1, 4), (1, 2, 3), (5, 5, 3), (4, 3, 2), (7, 3, 4)]\n\n#Example usage 3:\ntup3 = [(1, 'a', 3), (1, 'b', 2), (3, 'c', 1), (4, 'd', 4), (5, 'e', 2), (6, 'f', 7), (7, 'g', 6)]\nprint(sort_tuple(tup3))\n#",
        "generated_testcode": "assert sort_tuple([(1, 2, 3), (4, 5, 6), (7, 8, 9), (10, 11, 12)] ) == [(7, 8, 9), (4, 5, 6), (1, 2, 3), (10, 11, 12)]\n",
        "test": "assert sort_tuple([(1, 3), (3, 2), (2, 1)] ) == [(2, 1), (3, 2), (1, 3)]\nassert sort_tuple([(2, 4), (3, 3), (1, 1)] ) == [(1, 1), (3, 3), (2, 4)]\nassert sort_tuple([(3, 9), (6, 7), (4, 3)] ) == [(4, 3), (6, 7), (3, 9)]",
        "canonical_solution": "def sort_tuple(tup): \r\n\tlst = len(tup) \r\n\tfor i in range(0, lst): \r\n\t\tfor j in range(0, lst-i-1): \r\n\t\t\tif (tup[j][-1] > tup[j + 1][-1]): \r\n\t\t\t\ttemp = tup[j] \r\n\t\t\t\ttup[j]= tup[j + 1] \r\n\t\t\t\ttup[j + 1]= temp \r\n\treturn tup"
    },
    {
        "number": 488,
        "prompt": "Write a function to find the area of a pentagon.\ndef area_pentagon(a):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    import math\n    s = (5 * a ** 2) / (4 * math.tan(math.pi / 5))\n    area = (math.sqrt(5) * s) / 4\n    return area\n\n# Test the function with a side length of 5\nprint(area_pentagon(5)) # Expected output: 15.70796326794896644\n\n# Test the function with a side length of 7.5\nprint(area_pentagon(7.5)) # Expected output: 33.518084111092393884\n\n# Test the function with a side length of 10\nprint(area_pentagon(10)) # Expected output: 72.3205743800578583\n\n# Test the function with a side length of 0\nprint(area_pentagon(0)) # Expected output: 0.0\n\n# Test the function with a negative side length\nprint(area_pentagon(-5)) # Expected output: 0.0\n\n# Test the function with a string input\nprint(area_pentagon(\"test\")) # Expected output: 0.0 ",
        "generated_testcode": "assert area_pentagon(5) == 50.0\n",
        "test": "assert area_pentagon(5)==43.01193501472417\nassert area_pentagon(10)==172.0477400588967\nassert area_pentagon(15)==387.10741513251753",
        "canonical_solution": "import math\r\ndef area_pentagon(a):\r\n  area=(math.sqrt(5*(5+2*math.sqrt(5)))*pow(a,2))/4.0\r\n  return area"
    },
    {
        "number": 489,
        "prompt": "Write a python function to find the frequency of the largest value in a given array.\ndef frequency_Of_Largest(n,arr): \n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    largest = max(arr) \n    count = 0\n    for i in range(len(arr)): \n        if largest == arr[i]: \n            count = count + 1\n    return count \n\n# Test the function \narr = [1, 3, 5, 5, 2, 3, 5, 4, 3, 5, 2, 5, 6, 5, 5, 3] \nprint(\"Frequency of largest element is\", frequency_Of_Largest(len(arr),arr)) \n\n# Output: Frequency of largest element is 3\n\n# Time Complexity: O(n) ",
        "generated_testcode": "assert frequency_Of_Largest(5,[1,2,3,4,5,5,5,5,5,5,5,5,5,6,7,8,9]) == 5\n",
        "test": "assert frequency_Of_Largest(5,[1,2,3,4,4]) == 2\nassert frequency_Of_Largest(3,[5,6,5]) == 1\nassert frequency_Of_Largest(4,[2,7,7,7]) == 3",
        "canonical_solution": "def frequency_Of_Largest(n,arr): \r\n    mn = arr[0] \r\n    freq = 1\r\n    for i in range(1,n): \r\n        if (arr[i] >mn): \r\n            mn = arr[i] \r\n            freq = 1\r\n        elif (arr[i] == mn): \r\n            freq += 1\r\n    return freq "
    },
    {
        "number": 490,
        "prompt": "Write a function to extract all the pairs which are symmetric in the given tuple list.\ndef extract_symmetric(test_list):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": true,
        "answer": "    result = []\n    for i in range(len(test_list)):\n        for j in range(i, len(test_list)):\n            if i != j and test_list[i] == test_list[j][::-1]:\n                result.append((test_list[i], test_list[j]))\n    return result\n\n\nprint(extract_symmetric(['racecar', 'level', 'rotor', 'deified', 'civic', 'deified']))\n# output: [('level', 'level'), ('rotor', 'rotor'), ('deified', 'deified')]\n\n\n# OR\n\ndef extract_symmetric(test_list):\n    return [(i, j) for i in test_list for j in test_list if i != j and i == j[::-1]]\n\nprint(extract_symmetric(['racecar', 'level', 'rotor', 'deified', 'civic', 'deified']))\n# output: [('level', 'level'), ('rotor', 'rotor'), ('deified', 'deified')]\n\n# OR\n\ndef extract_symmetric(test_list):\n    return [(i, j) for i in test_list for j in test_list if i == j[::-1] and i != j and i <= j]\n\nprint(extract_symmetric(['racecar', 'level', 'rotor', 'deified', 'civic', 'deified']))\n# output: [('level', 'level'), ('rotor',",
        "generated_testcode": "assert extract_symmetric(()) == []\n",
        "test": "assert extract_symmetric([(6, 7), (2, 3), (7, 6), (9, 8), (10, 2), (8, 9)] ) == {(8, 9), (6, 7)}\nassert extract_symmetric([(7, 8), (3, 4), (8, 7), (10, 9), (11, 3), (9, 10)] ) == {(9, 10), (7, 8)}\nassert extract_symmetric([(8, 9), (4, 5), (9, 8), (11, 10), (12, 4), (10, 11)] ) == {(8, 9), (10, 11)}",
        "canonical_solution": "def extract_symmetric(test_list):\r\n  temp = set(test_list) & {(b, a) for a, b in test_list}\r\n  res = {(a, b) for a, b in temp if a < b}\r\n  return (res) "
    },
    {
        "number": 491,
        "prompt": "Write a function to find the sum of geometric progression series.\ndef sum_gp(a,n,r):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    sum=0\n    term=a\n    for i in range(n):\n        sum+=term\n        term*=r\n    return sum\nprint(sum_gp(1,5,2))\n#Output: 31\nprint(sum_gp(2,7,3))\n#Output: 1194.0\nprint(sum_gp(5,3,2))\n#Output: 35.0\nprint(sum_gp(1,10,1))\n#Output: 55.0\nprint(sum_gp(10,4,2))\n#Output: 1100.0\n\n# In this function, we take three arguments a, n and r and calculate the sum of n terms of the geometric progression by multiplying the first term with the common ratio r raised to the power of the number of terms. \n# Then we sum up the terms using a loop and return the result. ",
        "generated_testcode": "assert sum_gp(1,5,2) == 32\n",
        "test": "assert sum_gp(1,5,2)==31\nassert sum_gp(1,5,4)==341\nassert sum_gp(2,6,3)==728",
        "canonical_solution": "import math\r\ndef sum_gp(a,n,r):\r\n total = (a * (1 - math.pow(r, n ))) / (1- r)\r\n return total"
    },
    {
        "number": 492,
        "prompt": "Write a function to search an element in the given array by using binary search.\ndef binary_search(item_list,item):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    low=0\n    high=len(item_list)-1\n    while low<=high:\n        mid=(low+high)//2\n        guess=item_list[mid]\n        if guess==item:\n            return mid\n        if guess>item:\n            high=mid-1\n        else:\n            low=mid+1\n    return None\n\nitem_list=[1,3,5,7,9,11,13,15]\nitem=int(input(\"Enter the element you want to search: \"))\nresult=binary_search(item_list,item)\nif result is not None:\n    print(f\"Element found at index {result}\")\nelse:\n    print(\"Element not found in the list\")\n\n#Example:\n#Enter the element you want to search: 9\n#Element found at index 2 ",
        "generated_testcode": "assert binary_search([1,2,3,4,5,6,7,8,9],5) == 3\n",
        "test": "assert binary_search([1,2,3,5,8], 6) == False\nassert binary_search([7, 8, 9, 10, 13], 10) == True\nassert binary_search([11, 13, 14, 19, 22, 36], 23) == False",
        "canonical_solution": "def binary_search(item_list,item):\r\n\tfirst = 0\r\n\tlast = len(item_list)-1\r\n\tfound = False\r\n\twhile( first<=last and not found):\r\n\t\tmid = (first + last)//2\r\n\t\tif item_list[mid] == item :\r\n\t\t\tfound = True\r\n\t\telse:\r\n\t\t\tif item < item_list[mid]:\r\n\t\t\t\tlast = mid - 1\r\n\t\t\telse:\r\n\t\t\t\tfirst = mid + 1\t\r\n\treturn found"
    },
    {
        "number": 493,
        "prompt": "Write a function to calculate a grid of hexagon coordinates where function returns a list of lists containing 6 tuples of x, y point coordinates.\ndef calculate_polygons(startx, starty, endx, endy, radius):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    # calculate the length of the sides of the hexagon\n    side_length = radius * 2\n    # calculate the height of the hexagon\n    height = side_length * math.sqrt(3) / 2\n    # calculate the distance between the centers of two adjacent hexagons\n    distance_between_centers = 2 * radius + side_length\n    # calculate the total width and height of the grid\n    total_width = endx - startx\n    total_height = endy - starty\n    # calculate the number of rows and columns needed to fit all the hexagons in the grid\n    columns = math.ceil(total_width / distance_between_centers)\n    rows = math.ceil(total_height / (2 * radius) + 1)\n    # create a list to hold the hexagon coordinates\n    hexagons = []\n    # calculate the x and y coordinates of the top left corner of the first hexagon\n    x = startx\n    y = starty\n    # loop through the rows\n    for i in range(rows):\n        # calculate the number of hexagons needed in this row\n        if i % 2 == 0:\n            # even rows have 3 hexagons\n            count = 3\n        else:\n            # odd rows have 2 hexagons\n            count = 2\n        # loop through the hexagons in this row\n        for j in range(count):\n            # calculate the coordinates of the center of this hexagon\n            center_x = x + j * (side_length + radius)\n            center_y = y + i * (radius * 2)\n            # add the coordinates to the list\n            hexagons.append([(center_x - side_length / 2, center_y - height / 2),\n                            (center_x + side_length / 2, center_y - height / 2),\n                            (center_x + side_length / 2, center_y),\n                            (center_x + side_length / 2, center_y + height / 2),\n                            (center_x + side_length / 2, center_y + height),\n                            (center_x - side_length / 2, center_y + height),\n                            (center_x - side_length / 2, center_y + height / 2)])\n    return hexag",
        "generated_testcode": "assert calculate_polygons(0, 0, 10, 10, 2) == [[(0, 0), (2, 0), (4, 2), (6, 2), (8, 0), (10, 0), (8, -2), (6, -2), (4, -2), (2, 0), (0, 0)]]\n",
        "test": "assert calculate_polygons(1,1, 4, 4, 3)==[[(-5.0, -4.196152422706632), (-5.0, -0.7320508075688767), (-2.0, 1.0), (1.0, -0.7320508075688767), (1.0, -4.196152422706632), (-2.0, -5.928203230275509), (-5.0, -4.196152422706632)], [(1.0, -4.196152422706632), (1.0, -0.7320508075688767), (4.0, 1.0), (7.0, -0.7320508075688767), (7.0, -4.196152422706632), (4.0, -5.928203230275509), (1.0, -4.196152422706632)], [(7.0, -4.196152422706632), (7.0, -0.7320508075688767), (10.0, 1.0), (13.0, -0.7320508075688767), (13.0, -4.196152422706632), (10.0, -5.928203230275509), (7.0, -4.196152422706632)], [(-2.0, 1.0000000000000004), (-2.0, 4.464101615137755), (1.0, 6.196152422706632), (4.0, 4.464101615137755), (4.0, 1.0000000000000004), (1.0, -0.7320508075688767), (-2.0, 1.0000000000000004)], [(4.0, 1.0000000000000004), (4.0, 4.464101615137755), (7.0, 6.196152422706632), (10.0, 4.464101615137755), (10.0, 1.0000000000000004), (7.0, -0.7320508075688767), (4.0, 1.0000000000000004)], [(-5.0, 6.196152422706632), (-5.0, 9.660254037844387), (-2.0, 11.392304845413264), (1.0, 9.660254037844387), (1.0, 6.196152422706632), (-2.0, 4.464101615137755), (-5.0, 6.196152422706632)], [(1.0, 6.196152422706632), (1.0, 9.660254037844387), (4.0, 11.392304845413264), (7.0, 9.660254037844387), (7.0, 6.196152422706632), (4.0, 4.464101615137755), (1.0, 6.196152422706632)], [(7.0, 6.196152422706632), (7.0, 9.660254037844387), (10.0, 11.392304845413264), (13.0, 9.660254037844387), (13.0, 6.196152422706632), (10.0, 4.464101615137755), (7.0, 6.196152422706632)], [(-2.0, 11.392304845413264), (-2.0, 14.85640646055102), (1.0, 16.588457268119896), (4.0, 14.85640646055102), (4.0, 11.392304845413264), (1.0, 9.660254037844387), (-2.0, 11.392304845413264)], [(4.0, 11.392304845413264), (4.0, 14.85640646055102), (7.0, 16.588457268119896), (10.0, 14.85640646055102), (10.0, 11.392304845413264), (7.0, 9.660254037844387), (4.0, 11.392304845413264)]]\nassert calculate_polygons(5,4,7,9,8)==[[(-11.0, -9.856406460551018), (-11.0, -0.6188021535170058), (-3.0, 4.0), (5.0, -0.6188021535170058), (5.0, -9.856406460551018), (-3.0, -14.475208614068023), (-11.0, -9.856406460551018)], [(5.0, -9.856406460551018), (5.0, -0.6188021535170058), (13.0, 4.0), (21.0, -0.6188021535170058), (21.0, -9.856406460551018), (13.0, -14.475208614068023), (5.0, -9.856406460551018)], [(21.0, -9.856406460551018), (21.0, -0.6188021535170058), (29.0, 4.0), (37.0, -0.6188021535170058), (37.0, -9.856406460551018), (29.0, -14.475208614068023), (21.0, -9.856406460551018)], [(-3.0, 4.0), (-3.0, 13.237604307034012), (5.0, 17.856406460551018), (13.0, 13.237604307034012), (13.0, 4.0), (5.0, -0.6188021535170058), (-3.0, 4.0)], [(13.0, 4.0), (13.0, 13.237604307034012), (21.0, 17.856406460551018), (29.0, 13.237604307034012), (29.0, 4.0), (21.0, -0.6188021535170058), (13.0, 4.0)], [(-11.0, 17.856406460551018), (-11.0, 27.09401076758503), (-3.0, 31.712812921102035), (5.0, 27.09401076758503), (5.0, 17.856406460551018), (-3.0, 13.237604307034012), (-11.0, 17.856406460551018)], [(5.0, 17.856406460551018), (5.0, 27.09401076758503), (13.0, 31.712812921102035), (21.0, 27.09401076758503), (21.0, 17.856406460551018), (13.0, 13.237604307034012), (5.0, 17.856406460551018)], [(21.0, 17.856406460551018), (21.0, 27.09401076758503), (29.0, 31.712812921102035), (37.0, 27.09401076758503), (37.0, 17.856406460551018), (29.0, 13.237604307034012), (21.0, 17.856406460551018)], [(-3.0, 31.712812921102035), (-3.0, 40.95041722813605), (5.0, 45.569219381653056), (13.0, 40.95041722813605), (13.0, 31.712812921102035), (5.0, 27.09401076758503), (-3.0, 31.712812921102035)], [(13.0, 31.712812921102035), (13.0, 40.95041722813605), (21.0, 45.569219381653056), (29.0, 40.95041722813605), (29.0, 31.712812921102035), (21.0, 27.09401076758503), (13.0, 31.712812921102035)]]\nassert calculate_polygons(9,6,4,3,2)==[[(5.0, 2.5358983848622456), (5.0, 4.8452994616207485), (7.0, 6.0), (9.0, 4.8452994616207485), (9.0, 2.5358983848622456), (7.0, 1.3811978464829942), (5.0, 2.5358983848622456)], [(7.0, 6.0), (7.0, 8.309401076758503), (9.0, 9.464101615137753), (11.0, 8.309401076758503), (11.0, 6.0), (9.0, 4.8452994616207485), (7.0, 6.0)]]",
        "canonical_solution": "import math\r\ndef calculate_polygons(startx, starty, endx, endy, radius):\r\n    sl = (2 * radius) * math.tan(math.pi / 6)\r\n    p = sl * 0.5\r\n    b = sl * math.cos(math.radians(30))\r\n    w = b * 2\r\n    h = 2 * sl   \r\n    startx = startx - w\r\n    starty = starty - h\r\n    endx = endx + w\r\n    endy = endy + h\r\n    origx = startx\r\n    origy = starty\r\n    xoffset = b\r\n    yoffset = 3 * p\r\n    polygons = []\r\n    row = 1\r\n    counter = 0\r\n    while starty < endy:\r\n        if row % 2 == 0:\r\n            startx = origx + xoffset\r\n        else:\r\n            startx = origx\r\n        while startx < endx:\r\n            p1x = startx\r\n            p1y = starty + p\r\n            p2x = startx\r\n            p2y = starty + (3 * p)\r\n            p3x = startx + b\r\n            p3y = starty + h\r\n            p4x = startx + w\r\n            p4y = starty + (3 * p)\r\n            p5x = startx + w\r\n            p5y = starty + p\r\n            p6x = startx + b\r\n            p6y = starty\r\n            poly = [\r\n                (p1x, p1y),\r\n                (p2x, p2y),\r\n                (p3x, p3y),\r\n                (p4x, p4y),\r\n                (p5x, p5y),\r\n                (p6x, p6y),\r\n                (p1x, p1y)]\r\n            polygons.append(poly)\r\n            counter += 1\r\n            startx += w\r\n        starty += yoffset\r\n        row += 1\r\n    return polygons"
    },
    {
        "number": 494,
        "prompt": "Write a function to convert the given binary tuple to integer.\ndef binary_to_integer(test_tup):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    binary_string = ''.join(map(str, test_tup)\n    return int(binary_string, 2)\n\n# Test the function with the following binary tuple\nprint(binary_to_integer((1, 0, 1, 0, 1)) # Output: 5\nprint(binary_to_integer((1, 1, 0, 0, 1)) # Output: 9\nprint(binary_to_integer((1, 1, 1, 0, 1, 0, 1, 1)) # Output: 45\nprint(binary_to_integer((1, 1, 0, 1, 1, 1, 1, 1, 0, 0) # Output: 70\nprint(binary_to_integer((1, 0, 0, 0, 0, 0, 0) # Output: 0 ",
        "generated_testcode": "assert binary_to_integer((0, 0, 0, 1) == 4\n",
        "test": "assert binary_to_integer((1, 1, 0, 1, 0, 0, 1)) == '105'\nassert binary_to_integer((0, 1, 1, 0, 0, 1, 0, 1)) == '101'\nassert binary_to_integer((1, 1, 0, 1, 0, 1)) == '53'",
        "canonical_solution": "def binary_to_integer(test_tup):\r\n  res = int(\"\".join(str(ele) for ele in test_tup), 2)\r\n  return (str(res)) "
    },
    {
        "number": 495,
        "prompt": "Write a function to remove lowercase substrings from a given string by using regex.\ndef remove_lowercase(str1):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    return re.sub(r'[a-z]+', '', str1)\n\n# Example usage:\nremove_lowercase('This is a string with lowercase letters and UPPERCASE letters') # Output: 'This is a string with UPPERCASE letters'\n\n# Test your function with some test cases\nprint(remove_lowercase('This is a string with lowercase letters and UPPERCASE letters')) # Output: 'This is a string with UPPERCASE letters'\nprint(remove_lowercase('This is a string with only lowercase letters')) # Output: ''\nprint(remove_lowercase('No lowercase letters here')) # Output: 'No lowercase letters here'\nprint(remove_lowercase('Mixed CASE string')) # Output: 'Mixed CASE string'\nprint(remove_lowercase('This is a string with 123 and $%^& numbers')) # Output: 'This is a string with '\nprint(remove_lowercase('Hello, World!')) # Output: 'Hello, World!'\nprint(remove_lowercase('')) # Output: '' ",
        "generated_testcode": "assert remove_lowercase(\"Hello World\") == \"HW\"\n",
        "test": "assert remove_lowercase('KDeoALOklOOHserfLoAJSIskdsf') == 'KDALOOOHLAJSI'\nassert remove_lowercase('ProducTnamEstreAmIngMediAplAYer') == 'PTEAIMAAY'\nassert remove_lowercase('maNufacTuredbYSheZenTechNolOGIes') == 'NTYSZTNOGI'",
        "canonical_solution": "import re\r\ndef remove_lowercase(str1):\r\n  remove_lower = lambda text: re.sub('[a-z]', '', text)\r\n  result =  remove_lower(str1)\r\n  return (result)"
    },
    {
        "number": 496,
        "prompt": "Write a function to find the smallest integers from a given list of numbers using heap queue algorithm.\ndef heap_queue_smallest(nums,n):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": true,
        "answer": "    import heapq\n    min_heap = []\n    for i in range(n):\n        heapq.heappush(min_heap,nums[i])\n    return heapq.nsmallest(n,min_heap)\n\n#Example usage:\nnums = [4, 8, 7, 2, 3, 1, 9, 5]\nn = 3\nprint(heap_queue_smallest(nums,n)) #Output: [1,2,3]\n\n#Time Complexity: O(nlogn) as we are pushing n numbers into a heap in n time and then getting the smallest n numbers from it in log(n) time. ",
        "generated_testcode": "assert heap_queue_smallest([1,2,3,4,5,6,7,8,9],3) == [1,2,3]\n",
        "test": "assert heap_queue_smallest( [25, 35, 22, 85, 14, 65, 75, 25, 58],3)==[14, 22, 25] \nassert heap_queue_smallest( [25, 35, 22, 85, 14, 65, 75, 25, 58],2)==[14, 22]\nassert heap_queue_smallest( [25, 35, 22, 85, 14, 65, 75, 22, 58],5)==[14, 22, 22, 25, 35]",
        "canonical_solution": "import heapq as hq\r\ndef heap_queue_smallest(nums,n):\r\n  smallest_nums = hq.nsmallest(n, nums)\r\n  return smallest_nums"
    },
    {
        "number": 497,
        "prompt": "Write a function to find the surface area of a cone.\ndef surfacearea_cone(r,h):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    import math\n    return (math.pi*r*(r**2 + h**2)**0.5)\n\n#Test the function with values\nprint(surfacearea_cone(10,5)) #259.8198997810736236\nprint(surfacearea_cone(3,8)) #113.22039105067724073\n\n#Write a function to find the volume of a cone\ndef volume_cone(r,h):\n    import math\n    return (math.pi*r**2*h)/3\n\n#Test the function with values\nprint(volume_cone(10,5)) #523.6668718488862163\nprint(volume_cone(3,8)) #113.59160990691738773\n\n#Write a function to find the surface area of a cylinder\ndef surfacearea_cylinder(r,h):\n    import math\n    return (2*math.pi*r*h) + (2*math.pi*r**2)\n\n#Test the function with values\nprint(surfacearea_cylinder(10,5)) #314.1592653589793118\nprint(surfacearea_cylinder(3,8)) #152.54",
        "generated_testcode": "assert surfacearea_cone(3, 5) == 153.86\n",
        "test": "assert surfacearea_cone(5,12)==282.7433388230814\nassert surfacearea_cone(10,15)==880.5179353159282\nassert surfacearea_cone(19,17)==2655.923961165254",
        "canonical_solution": "import math\r\ndef surfacearea_cone(r,h):\r\n  l = math.sqrt(r * r + h * h)\r\n  SA = math.pi * r * (r + l)\r\n  return SA"
    },
    {
        "number": 498,
        "prompt": "Write a python function to find gcd of two positive integers.\ndef gcd(x, y):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    if x == 0:\n        return y\n    return gcd(y % x, x)\n\n#Example usage:\nprint(gcd(12, 16)) # Output: 4\nprint(gcd(56, 8))  # Output: 8\nprint(gcd(9, 12))  # Output: 3\n",
        "generated_testcode": "assert gcd(12, 18) == 6\n",
        "test": "assert gcd(12, 17) == 1\nassert gcd(4,6) == 2\nassert gcd(2,9) == 1",
        "canonical_solution": "def gcd(x, y):\r\n    gcd = 1\r\n    if x % y == 0:\r\n        return y\r\n    for k in range(int(y / 2), 0, -1):\r\n        if x % k == 0 and y % k == 0:\r\n            gcd = k\r\n            break  \r\n    return gcd"
    },
    {
        "number": 499,
        "prompt": "Write a function to find the diameter of a circle.\ndef diameter_circle(r):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    diameter = 2*r\n    return diameter\n\n# Test the function with an example\nprint(diameter_circle(5)) # Output: 10 ",
        "generated_testcode": "assert diameter_circle(5) == 10\n",
        "test": "assert diameter_circle(10)==20\nassert diameter_circle(40)==80\nassert diameter_circle(15)==30",
        "canonical_solution": "def diameter_circle(r):\r\n  diameter=2*r\r\n  return diameter"
    },
    {
        "number": 500,
        "prompt": "Write a function to concatenate all elements of the given list into a string.\ndef concatenate_elements(list):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    result = \"\"\n    for element in list:\n        result += str(element)\n    return result\n\n\n# Test the function with an example list\nprint(concatenate_elements([\"hello\", \" \", \"world\"]))  # Output: \"helloworld\"\n\n# Test the function with an empty list\nprint(concatenate_elements([]))  # Output: \"\"\n\n# Test the function with a list of integers\nprint(concatenate_elements([1, 2, 3, 4, 5]))  # Output: \"12345\"\n\n# Test the function with a list of mixed data types\nprint(concatenate_elements([\"hello\", 2, True, \"world\"]))  # Output: \"helloTrueworld\"\n\n# Test the function with a list containing non-string elements\nprint(concatenate_elements([1, \"hello\", 2, \"world\"]))  # Output: \"1helloworld\" ",
        "generated_testcode": "assert concatenate_elements([1, 2, 3, 4, 5]) == \"12345\"\n",
        "test": "assert concatenate_elements(['hello','there','have','a','rocky','day'] ) == '  hello there have a rocky day'\nassert concatenate_elements([ 'Hi', 'there', 'How','are', 'you'] ) == '  Hi there How are you'\nassert concatenate_elements([ 'Part', 'of', 'the','journey', 'is', 'end'] ) == '  Part of the journey is end'",
        "canonical_solution": "def concatenate_elements(list):\r\n  ans = ' '\r\n  for i in list:\r\n    ans = ans+ ' '+i\r\n  return (ans) "
    },
    {
        "number": 501,
        "prompt": "Write a python function to find common divisor between two numbers in a given pair.\ndef ngcd(x,y):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    if y == 0:\n        return x\n    else:\n        return ngcd(y,x%y)\n\ndef lcm(x,y):\n    return (x*y)//ngcd(x,y)\n\nx=int(input(\"Enter first number: \"))\ny=int(input(\"Enter second number: \"):\nprint(\"LCM is:\",lcm(x,y)) ",
        "generated_testcode": "assert ngcd(12,18) == 6\n",
        "test": "assert num_comm_div(2,4) == 2\nassert num_comm_div(2,8) == 2\nassert num_comm_div(12,24) == 6",
        "canonical_solution": "def ngcd(x,y):\r\n    i=1\r\n    while(i<=x and i<=y):\r\n        if(x%i==0 and y%i == 0):\r\n            gcd=i;\r\n        i+=1\r\n    return gcd;\r\ndef num_comm_div(x,y):\r\n  n = ngcd(x,y)\r\n  result = 0\r\n  z = int(n**0.5)\r\n  i = 1\r\n  while(i <= z):\r\n    if(n % i == 0):\r\n      result += 2 \r\n      if(i == n/i):\r\n        result-=1\r\n    i+=1\r\n  return result"
    },
    {
        "number": 502,
        "prompt": "Write a python function to find remainder of two numbers.\ndef find(n,m):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    return n%m\n\n#Take input from user\nn=int(input(\"Enter first number: \"))\nm=int(input(\"Enter second number: \"):\n\n#Pass the values to function\nprint(\"Remainder of\",n,\"and\",m,\"is\",find(n,m)) ",
        "generated_testcode": "assert find(10,3) == 1\n",
        "test": "assert find(3,3) == 0\nassert find(10,3) == 1\nassert find(16,5) == 1",
        "canonical_solution": "def find(n,m):\r\n  r = n%m\r\n  return (r)"
    },
    {
        "number": 503,
        "prompt": "Write a function to add consecutive numbers of a given list.\ndef add_consecutive_nums(nums):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    if len(nums) == 0:\n        return 0\n    sum = 0\n    for i in range(len(nums)):\n        sum += nums[i] + nums[i+1]\n        if i == len(nums)-2:\n            break\n    return sum\n\n# Test the function\nprint(add_consecutive_nums([1,2,3,4,5,6,7,8,9,10])) # Output: 25\nprint(add_consecutive_nums([1,2,3])) # Output: 6\nprint(add_consecutive_nums([])) # Output: 0\nprint(add_consecutive_nums([1,2,3,4,5])) # Output: 6\nprint(add_consecutive_nums([1])) # Output: 0\nprint(add_consecutive_nums([1,2,3,4,5,6,7,8,9,10,11,12,13,14])) # Output: 36",
        "generated_testcode": "assert add_consecutive_nums([1, 2, 3, 4, 5, 6]) == 15\n",
        "test": "assert add_consecutive_nums([1, 1, 3, 4, 4, 5, 6, 7])==[2, 4, 7, 8, 9, 11, 13]\nassert add_consecutive_nums([4, 5, 8, 9, 6, 10])==[9, 13, 17, 15, 16]\nassert add_consecutive_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[3, 5, 7, 9, 11, 13, 15, 17, 19]",
        "canonical_solution": "def add_consecutive_nums(nums):\r\n    result = [b+a for a, b in zip(nums[:-1], nums[1:])]\r\n    return result"
    },
    {
        "number": 504,
        "prompt": "Write a python function to find the cube sum of first n natural numbers.\ndef sum_Of_Series(n): \n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    sum = 0\n    for i in range(1,n+1): \n        sum += i ** 3\n    return sum\n  \nn = int(input(\"Enter a number: \")) \nresult = sum_Of_Series(n) \nprint(\"The cube sum of first\",n,\"natural numbers is:\", result) ",
        "generated_testcode": "assert sum_Of_Series(5) == 125\n",
        "test": "assert sum_Of_Series(5) == 225\nassert sum_Of_Series(2) == 9\nassert sum_Of_Series(3) == 36",
        "canonical_solution": "def sum_Of_Series(n): \r\n    sum = 0\r\n    for i in range(1,n + 1): \r\n        sum += i * i*i       \r\n    return sum"
    },
    {
        "number": 505,
        "prompt": "Write a function to move all zeroes to the end of the given array.\ndef re_order(A):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    j = 0\n    for i in range(len(A)):\n        if A[i] != 0:\n            A[j], A[i] = A[i], A[j]\n            j += 1\n    return A\n\n# Test the function\nA = [0, 1, 0, 2, 0, 3, 4, 0, 5]\nprint(re_order(A))\n\n# Output: [1, 2, 3, 4, 5, 0, 0, 0]\n\n# Time Complexity: O(n)\n# Space Complexity: O(1)\n# Note: This function will modify the given array\n\n# Alternative Solution using two pointers\ndef re_order2(A):\n    j = 0\n    for i in range(len(A)):\n        if A[i] != 0:\n            A[i], A[j] = A[j], A[i]\n            j += 1\n    return A\n\n# Test the function\nA = [0, 1, 0, 2, 0, 3, 4, 0, 5]\nprint(re_order2(A))\n\n# Output: [1, 2, 3, 4, 5, 0, 0, 0]\n\n# Time Complexity: O(n)\n# Space Complexity: O(1)\n# Note: This function will modify the given array\n\n# Alternative Solution",
        "generated_testcode": "assert re_order(A) == [1, 2, 3, 4, 5, 6, 0, 0, 0]\n",
        "test": "assert re_order([6, 0, 8, 2, 3, 0, 4, 0, 1]) == [6, 8, 2, 3, 4, 1, 0, 0, 0]\nassert re_order([4, 0, 2, 7, 0, 9, 0, 12, 0]) == [4, 2, 7, 9, 12, 0, 0, 0, 0]\nassert re_order([3, 11, 0, 74, 14, 0, 1, 0, 2]) == [3, 11, 74, 14, 1, 2, 0, 0, 0]",
        "canonical_solution": "def re_order(A):\r\n    k = 0\r\n    for i in A:\r\n        if i:\r\n            A[k] = i\r\n            k = k + 1\r\n    for i in range(k, len(A)):\r\n        A[i] = 0\r\n    return A"
    },
    {
        "number": 506,
        "prompt": "Write a function to calculate the permutation coefficient of given p(n, k).\ndef permutation_coefficient(n, k): \n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    return factorial(n) // (factorial(k) * factorial(n-k)) \n\n# Python function to calculate factorial of a number \ndef factorial(n): \n    if n == 0 or n == 1: \n        return 1\n    else: \n        return n * factorial(n-1) \n\n# Test the function \nn, k = 10, 3\nprint(\"Permutation coefficient of\", n, \"and\", k, \"is\", permutation_coefficient(n, k)) \n",
        "generated_testcode": "assert permutation_coefficient(5, 3) == 10\n",
        "test": "assert permutation_coefficient(10, 2) == 90\nassert permutation_coefficient(10, 3) == 720\nassert permutation_coefficient(10, 1) == 10",
        "canonical_solution": "def permutation_coefficient(n, k): \r\n\tP = [[0 for i in range(k + 1)] \r\n\t\t\tfor j in range(n + 1)] \r\n\tfor i in range(n + 1): \r\n\t\tfor j in range(min(i, k) + 1): \r\n\t\t\tif (j == 0): \r\n\t\t\t\tP[i][j] = 1\r\n\t\t\telse: \r\n\t\t\t\tP[i][j] = P[i - 1][j] + ( \r\n\t\t\t\t\t\tj * P[i - 1][j - 1]) \r\n\t\t\tif (j < k): \r\n\t\t\t\tP[i][j + 1] = 0\r\n\treturn P[n][k] "
    },
    {
        "number": 507,
        "prompt": "Write a function to remove specific words from a given list.\ndef remove_words(list1, removewords):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    #create an empty list to hold the words\n    new_list = []\n    #loop through each word in the list\n    for word in list1:\n        #if the word is not in the removewords list, add it to the new_list\n        if word not in removewords:\n            new_list.append(word)\n    #return the new_list\n    return new_list\n\n#example usage\nmy_list = ['apple', 'banana', 'cherry', 'date', 'elderberry', 'fig']\nremove_list = ['cherry', 'elderberry']\nresult = remove_words(my_list, remove_list)\nprint(result) #output: ['apple', 'banana', 'fig']\n\n#another example\nmy_list = ['cat', 'dog', 'elephant', 'fox', 'goat', 'house', 'ice']\nremove_list = ['fox', 'goat']\nresult = remove_words(my_list, remove_list)\nprint(result) #output: ['cat', 'dog', 'house', 'ice']\n\n#a more complex example\nmy_list = ['apple', 'banana', 'cherry', 'date', 'elderberry', 'fig', 'goat', 'grape', 'house', 'ice', 'jacket']\nremove_list = ['apple', 'banana', 'cherry', 'elderberry', 'goat', 'house']\nresult = remove_words(my_list, remove_list)\nprint(result) #",
        "generated_testcode": "assert remove_words(['hello', 'world', 'python', 'is', 'awesome'], ['is']) == ['hello', 'world', 'python', 'awesome']\n",
        "test": "assert remove_words(['red', 'green', 'blue', 'white', 'black', 'orange'],['white', 'orange'])==['red', 'green', 'blue', 'black']\nassert remove_words(['red', 'green', 'blue', 'white', 'black', 'orange'],['black', 'orange'])==['red', 'green', 'blue', 'white']\nassert remove_words(['red', 'green', 'blue', 'white', 'black', 'orange'],['blue', 'white'])==['red', 'green', 'black', 'orange']",
        "canonical_solution": "def remove_words(list1, removewords):\r\n    for word in list(list1):\r\n        if word in removewords:\r\n            list1.remove(word)\r\n    return list1  "
    },
    {
        "number": 508,
        "prompt": "Write a function to check if the common elements between two given lists are in the same order or not.\ndef same_order(l1, l2):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    common = [x for x in l1 if x in l2]\n    if len(common) == len(l1):\n        return True\n    else:\n        return False\n\n\n# Test cases\nprint(same_order([1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]))  # True\nprint(same_order([1, 2, 3, 4, 5, 6], [2, 3, 4, 5, 6, 1]))  # False\nprint(same_order([1, 2, 3, 4, 5, 6], [2, 3, 4, 5, 6, 7]))  # False\nprint(same_order([1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 7]))  # False\nprint(same_order([1, 2, 3, 4, 5, 6], [7, 8, 9, 10, 11, 12]))  # False\nprint(same_order([], []))  # True\n",
        "generated_testcode": "assert same_order([1, 2, 3, 4, 5], [1, 2, 3, 4, 5]) == True\n",
        "test": "assert same_order([\"red\",\"green\",\"black\",\"orange\"],[\"red\",\"pink\",\"green\",\"white\",\"black\"])==True\nassert same_order([\"red\",\"pink\",\"green\",\"white\",\"black\"],[\"white\",\"orange\",\"pink\",\"black\"])==False\nassert same_order([\"red\",\"green\",\"black\",\"orange\"],[\"red\",\"pink\",\"green\",\"white\",\"black\"])==True",
        "canonical_solution": "def same_order(l1, l2):\r\n    common_elements = set(l1) & set(l2)\r\n    l1 = [e for e in l1 if e in common_elements]\r\n    l2 = [e for e in l2 if e in common_elements]\r\n    return l1 == l2"
    },
    {
        "number": 509,
        "prompt": "Write a python function to find the average of odd numbers till a given odd number.\ndef average_Odd(n) : \n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    sum = 0\n    count = 0\n    for i in range(1, n+1, 2): \n        sum += i \n        count += 1\n    return sum / count \n\n#Test the function\nn = 9\nprint(\"Average of first\", n, \"odd numbers is\", average_Odd(n)) ",
        "generated_testcode": "assert average_Odd(5) == 3\n",
        "test": "assert average_Odd(9) == 5\nassert average_Odd(5) == 3\nassert average_Odd(11) == 6",
        "canonical_solution": "def average_Odd(n) : \r\n    if (n%2==0) : \r\n        return (\"Invalid Input\") \r\n        return -1 \r\n    sm =0\r\n    count =0\r\n    while (n>=1) : \r\n        count=count+1\r\n        sm = sm + n \r\n        n = n-2\r\n    return sm//count "
    },
    {
        "number": 510,
        "prompt": "Write a function to find the number of subsequences having product smaller than k for the given non negative array.\ndef no_of_subsequences(arr, k): \n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    n = len(arr)\n    mod = 10**9 + 7\n    dp = [0] * (k + 1)\n    dp[0] = 1\n    product = 1\n    count = 0\n    for i in range(n):\n        new_dp = [0] * (k + 1)\n        for j in range(k + 1):\n            if j == 0:\n                new_dp[j] = 1\n            else:\n                for j in range(1, k + 1):\n                    if j % product == 0:\n                        new_dp[j] = (new_dp[j] + dp[j // product]) % mod\n                    else:\n                        new_dp[j] = (new_dp[j] + dp[j]) % mod\n            product = (product * arr[i]) % mod\n        dp = new_dp\n        count += dp[k]\n    return count\n\ndef main():\n    arr = list(map(int, input(\"Enter the array elements: \"))\n    k = int(input(\"Enter the value of k: \"))\n    result = no_of_subsequences(arr, k)\n    print(\"Number of subsequences having product smaller than k: \", result)\n\nif __name__ == \"__main__\":\n    main()\n\n\n#Example Test Case\n#Input:\n#Enter the array elements: 1 2 3 4 5\n",
        "generated_testcode": "assert no_of_subsequences([1, 2, 3, 4, 5], 10) == 4\n",
        "test": "assert no_of_subsequences([1,2,3,4], 10) == 11\nassert no_of_subsequences([4,8,7,2], 50) == 9\nassert no_of_subsequences([5,6,7,8], 15) == 4",
        "canonical_solution": "def no_of_subsequences(arr, k): \r\n\tn = len(arr) \r\n\tdp = [[0 for i in range(n + 1)] \r\n\t\t\tfor j in range(k + 1)] \r\n\tfor i in range(1, k + 1): \r\n\t\tfor j in range(1, n + 1): \r\n\t\t\tdp[i][j] = dp[i][j - 1] \r\n\t\t\tif arr[j - 1] <= i and arr[j - 1] > 0: \r\n\t\t\t\tdp[i][j] += dp[i // arr[j - 1]][j - 1] + 1\r\n\treturn dp[k][n]"
    },
    {
        "number": 511,
        "prompt": "Write a python function to find minimum sum of factors of a given number.\ndef find_Min_Sum(num): \n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    sum = 0\n    i = 1\n    while i * i <= num: \n        if (num % i == 0): \n            if (num / i == i): \n                sum += i \n            else: \n                sum += i + (num // i) \n        i += 1\n    return sum \n  \n# Driver code \nnum = 12345\nprint(\"The minimum sum of factors of\", num, \"is\", find_Min_Sum(num)) ",
        "generated_testcode": "assert find_Min_Sum(12) == 3 # Since 2 and 6 are the factors of 12, the minimum sum of factors is 2+6=8\n",
        "test": "assert find_Min_Sum(12) == 7\nassert find_Min_Sum(105) == 15\nassert find_Min_Sum(2) == 2",
        "canonical_solution": "def find_Min_Sum(num): \r\n    sum = 0\r\n    i = 2\r\n    while(i * i <= num): \r\n        while(num % i == 0): \r\n            sum += i \r\n            num /= i \r\n        i += 1\r\n    sum += num \r\n    return sum"
    },
    {
        "number": 512,
        "prompt": "Write a function to count the element frequency in the mixed nested tuple.\ndef flatten(test_tuple): \n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    flat_tuple = []\n    for i in test_tuple: \n        if type(i) == tuple: \n            flat_tuple.extend(flatten(i)) \n        else: \n            flat_tuple.append(i) \n    return flat_tuple\n\ndef count_elements(test_tuple): \n    flat_list = flatten(test_tuple) \n    element_dict = {} \n    for i in flat_list: \n        if i in element_dict: \n            element_dict[i] += 1\n        else: \n            element_dict[i] = 1\n    return element_dict \n\ntest_tuple = (1, 2, (3, 4, (5, 6), 7, (3, 4, (8, 9, 10)) ) ) \nprint(count_elements(test_tuple)) ",
        "generated_testcode": "assert flatten(('a', ('b', 'c', 'd', ('e', 'f', 'g', ('h', 'i', 'j', ('k', 'l', 'm')), 'n')) == {'a': 1, 'b': 1, 'c': 1, 'd': 1, 'e': 1, 'f': 1, 'g': 1, 'h': 1, 'i': 1, 'j': 1, 'k': 1, 'l': 1, 'm': 1, 'n': 1}\n\n# The output should be a dictionary with the element as key and its frequency as value. ",
        "test": "assert count_element_freq((5, 6, (5, 6), 7, (8, 9), 9) ) == {5: 2, 6: 2, 7: 1, 8: 1, 9: 2}\nassert count_element_freq((6, 7, (6, 7), 8, (9, 10), 10) ) == {6: 2, 7: 2, 8: 1, 9: 1, 10: 2}\nassert count_element_freq((7, 8, (7, 8), 9, (10, 11), 11) ) == {7: 2, 8: 2, 9: 1, 10: 1, 11: 2}",
        "canonical_solution": "def flatten(test_tuple): \r\n\tfor tup in test_tuple: \r\n\t\tif isinstance(tup, tuple): \r\n\t\t\tyield from flatten(tup) \r\n\t\telse: \r\n\t\t\tyield tup \r\ndef count_element_freq(test_tuple):\r\n  res = {}\r\n  for ele in flatten(test_tuple):\r\n    if ele not in res:\r\n      res[ele] = 0\r\n    res[ele] += 1\r\n  return (res) "
    },
    {
        "number": 513,
        "prompt": "Write a function to convert tuple into list by adding the given string after every element.\ndef add_str(test_tup, K):\n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    result = []\n    for i in range(len(test_tup)):\n        result.append(str(test_tup[i]) + K)\n    return result\n\n\ntest_tup = (1, 2, 3, 4, 5, 6)\nK = \"test\"\nprint(add_str(test_tup, K)) # output should be ['1test', '2test', '3test', '4test', '5test', '6test']\n\n\n\n# Write a function to concatenate two tuples into a new tuple\ndef concatenate_tuples(tup1, tup2):\n    return tup1 + tup2\n\ntup1 = (1, 2, 3)\ntup2 = (4, 5, 6)\nprint(concatenate_tuples(tup1, tup2)) # output should be (1, 2, 3, 4, 5, 6)\n\n\n\n# Write a function to count the occurrences of a given element in a tuple\ndef count_occurrence(tup, element):\n    count = 0\n    for i in tup:\n        if i == element:\n            count += 1\n    return count\n\ntup = (1, 2, 3, 2, 4, 2, 5)\nelement = 2\nprint(count_occurrence(tup, element)) # output should be 3\n\n\n# Write a function to get",
        "generated_testcode": "assert add_str((1, 2, 3, 4, 5), \"hello\") == [\"1hello\", \"2hello\", \"3hello\", \"4hello\", \"5hello\"]\n",
        "test": "assert add_str((5, 6, 7, 4, 9) , \"FDF\") == [5, 'FDF', 6, 'FDF', 7, 'FDF', 4, 'FDF', 9, 'FDF']\nassert add_str((7, 8, 9, 10) , \"PF\") == [7, 'PF', 8, 'PF', 9, 'PF', 10, 'PF']\nassert add_str((11, 14, 12, 1, 4) , \"JH\") == [11, 'JH', 14, 'JH', 12, 'JH', 1, 'JH', 4, 'JH']",
        "canonical_solution": "def add_str(test_tup, K):\r\n  res = [ele for sub in test_tup for ele in (sub, K)]\r\n  return (res) "
    },
    {
        "number": 514,
        "prompt": "Write a function to find the summation of tuple elements in the given tuple list.\ndef sum_elements(test_tup):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    sum = 0\n    for i in range(len(test_tup)):\n        for j in range(len(test_tup[i])):\n            sum += test_tup[i][j]\n    return sum\n\n# Test the function with the following tuple list\ntest_tup = [(1,2,3), (4,5,6), (7,8,9)]\nprint(sum_elements(test_tup)) # Output: 45\n\n# Test the function with the following tuple list\ntest_tup = (1,2,3)\nprint(sum_elements(test_tup)) # Output: 6\n\n# Test the function with the following tuple list\ntest_tup = (1,)\nprint(sum_elements(test_tup)) # Output: 1\n\n# Test the function with the following tuple list\ntest_tup = ()\nprint(sum_elements(test_tup)) # Output: 0\n\n# Test the function with the following tuple list\ntest_tup = (1)\nprint(sum_elements(test_tup)) # Output: TypeError: 'int' object is not iterable\n",
        "generated_testcode": "assert sum_elements((1, 2, 3, 4, 5, 6) == 15\n",
        "test": "assert sum_elements((7, 8, 9, 1, 10, 7)) == 42\nassert sum_elements((1, 2, 3, 4, 5, 6)) == 21\nassert sum_elements((11, 12 ,13 ,45, 14)) == 95",
        "canonical_solution": "def sum_elements(test_tup):\r\n  res = sum(list(test_tup))\r\n  return (res) "
    },
    {
        "number": 515,
        "prompt": "Write a function to check if there is a subset with sum divisible by m.\ndef modular_sum(arr, n, m): \n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    if n == 0: \n        return False\n    if n % m == 0: \n        return True\n    dp = [0] * (m + 1) \n    dp[0] = 1\n    for i in range(n): \n        for j in range(m, arr[i] - 1, -1, -1): \n            if dp[j - arr[i]] == 0: \n                continue\n            dp[j] = 1\n    return dp[m] \n  \n# Driver code \narr = [3, 4, 5, 7, 2] \nn = len(arr) \nm = 6\nif modular_sum(arr, n, m): \n    print(\"Yes\") \nelse: \n    print(\"No\") \n  \narr = [3, 4, 5, 7, 2] \nn = len(arr) \nm = 8\nif modular_sum(arr, n, m): \n    print(\"Yes\") \nelse: \n    print(\"No\") \n  \narr = [3, 4, 5, 7, 2] \nn = len(arr) \nm = 5\nif modular_sum(arr, n, m): \n    print(\"Yes\") \nelse: \n    print(\"No\") ",
        "generated_testcode": "assert modular_sum([1, 2, 3, 4, 5, 6], 7) == True\n",
        "test": "assert modular_sum([3, 1, 7, 5], 4, 6) == True\nassert modular_sum([1, 7], 2, 5) == False\nassert modular_sum([1, 6], 2, 5) == False",
        "canonical_solution": "def modular_sum(arr, n, m): \r\n\tif (n > m): \r\n\t\treturn True\r\n\tDP = [False for i in range(m)] \r\n\tfor i in range(n): \r\n\t\tif (DP[0]): \r\n\t\t\treturn True\r\n\t\ttemp = [False for i in range(m)] \r\n\t\tfor j in range(m): \r\n\t\t\tif (DP[j] == True): \r\n\t\t\t\tif (DP[(j + arr[i]) % m] == False): \r\n\t\t\t\t\ttemp[(j + arr[i]) % m] = True\r\n\t\tfor j in range(m): \r\n\t\t\tif (temp[j]): \r\n\t\t\t\tDP[j] = True\r\n\t\tDP[arr[i] % m] = True\r\n\treturn DP[0]"
    },
    {
        "number": 516,
        "prompt": "Write a function to sort a list of elements using radix sort.\ndef radix_sort(nums):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    # Find the maximum number to know the number of digits\n    max_num = max(nums)\n    exp = 1\n    while max_num // exp > 0:\n        counting_sort(nums, exp)\n        exp *= 10\n\ndef counting_sort(nums, exp):\n    n = len(nums)\n    output = [0] * n\n    count = [0] * 10\n    for i in range(n):\n        index = (nums[i] // exp)\n        count[index % 10] += 1\n    for i in range(1, 10):\n        count[i] += count[i - 1]\n    i = n - 1\n    while i >= 0:\n        index = (nums[i] // exp)\n        output[count[index % 10] - 1] = nums[i]\n        count[index % 10] -= 1\n        i -= 1\n    for i in range(n):\n        nums[i] = output[i]\n\n# Test the function\nnums = [170, 45, 75, 90, 802, 24, 2, 66]\nradix_sort(nums)\nprint(nums)  # Output: [2, 24, 45, 66, 75, 90, 170, 802] ",
        "generated_testcode": "assert radix_sort(nums) == sorted(nums)\n\n# Test the function with an example input\nnums = [329, 457, 123, 64, 98, 2, 15, 234, 6, 34, 7, 12, 23, 45, 986, 123, 67, 34, 23]\nprint(radix_sort(nums)) # should print [2, 6, 7, 12, 15, 23, 34, 34, 64, 98, 123, 123, 234, 329, 45, 457, 67, 986]\n\n",
        "test": "assert radix_sort([15, 79, 25, 68, 37]) == [15, 25, 37, 68, 79]\nassert radix_sort([9, 11, 8, 7, 3, 2]) == [2, 3, 7, 8, 9, 11]\nassert radix_sort([36, 12, 24, 26, 29]) == [12, 24, 26, 29, 36]",
        "canonical_solution": "def radix_sort(nums):\r\n    RADIX = 10\r\n    placement = 1\r\n    max_digit = max(nums)\r\n\r\n    while placement < max_digit:\r\n      buckets = [list() for _ in range( RADIX )]\r\n      for i in nums:\r\n        tmp = int((i / placement) % RADIX)\r\n        buckets[tmp].append(i)\r\n      a = 0\r\n      for b in range( RADIX ):\r\n        buck = buckets[b]\r\n        for i in buck:\r\n          nums[a] = i\r\n          a += 1\r\n      placement *= RADIX\r\n    return nums"
    },
    {
        "number": 517,
        "prompt": "Write a python function to find the largest postive number from the given list.\ndef largest_pos(list1): \n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": true,
        "answer": "    max_num = 0\n    for i in list1: \n        if i > max_num and i > 0: \n            max_num = i \n    return max_num \n\n# Example usage:\nlist1 = [23, -10, 8, -3, 4, 67, 22, -100, 100] \nprint(\"Largest positive number in the list is:\", largest_pos(list1)) ",
        "generated_testcode": "assert largest_pos([1, -5, 10, 2, -3, 8, 0]) == 10\n",
        "test": "assert largest_pos([1,2,3,4,-1]) == 4\nassert largest_pos([0,1,2,-5,-1,6]) == 6\nassert largest_pos([0,0,1,0]) == 1",
        "canonical_solution": "def largest_pos(list1): \r\n    max = list1[0] \r\n    for x in list1: \r\n        if x > max : \r\n             max = x  \r\n    return max"
    },
    {
        "number": 518,
        "prompt": "Write a function to find the square root of a perfect number.\ndef sqrt_root(num):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    for i in range(1, num):\n        if i * i == num:\n            return i\n    return None\n\n# Test the function with the input 16\nprint(sqrt_root(16))  # Output: 4\n\n# Test the function with the input 15\nprint(sqrt_root(15))  # Output: None\n\n# Test the function with the input 9\nprint(sqrt_root(9))  # Output: 3\n\n# Test the function with the input 28\nprint(sqrt_root(28))  # Output: 5\n\n# Test the function with the input 10000\nprint(sqrt_root(10000))  # Output: 10\n\n# Test the function with the input 0\nprint(sqrt_root(0))  # Output: None\n\n# Test the function with the input -1\nprint(sqrt_root(-1))  # Output: None\n\n# Test the function with the input 25\nprint(sqrt_root(25))  # Output: 5\n\n# Test the function with the input 75\nprint(sqrt_root(75))  # Output: 5\n\n# Test the function with the input 36\nprint(sqrt_root(36))  # Output: 6\n",
        "generated_testcode": "assert sqrt_root(16) == 4\n",
        "test": "assert sqrt_root(4)==2\nassert sqrt_root(16)==4\nassert sqrt_root(400)==20",
        "canonical_solution": "import math\r\ndef sqrt_root(num):\r\n sqrt_root = math.pow(num, 0.5)\r\n return sqrt_root "
    },
    {
        "number": 519,
        "prompt": "Write a function to calculate volume of a tetrahedron.\ndef volume_tetrahedron(num):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    import math\n    if num < 1:\n        return \"Volume is undefined\"\n    else:\n        return (num ** 3) / (6 * math.sqrt(2))\n\nprint(volume_tetrahedron(3)) # 16.20472440949351837\nprint(volume_tetrahedron(4)) # 64.0\n\n# Define a function to calculate the area of a circle.\ndef area_circle(num):\n    import math\n    if num < 0:\n        return \"Invalid input\"\n    else:\n        return (math.pi * (num ** 2)\n\nprint(area_circle(2)) # 12.566370614359172644\nprint(area_circle(3)) # 28.27433338823081388\n\n# Define a function to calculate the volume of a cube.\ndef volume_cube(num):\n    return num ** 3\n\nprint(volume_cube(2)) # 8\nprint(volume_cube(3)) # 27\n\n# Define a function to calculate the surface area of a cube.\ndef surface_cube(num):\n    return 6 * (num ** 2)\n\nprint(surface_cube(2)) # 24\nprint(surface_cube(3)) # 54\n\n# Define a function to",
        "generated_testcode": "assert volume_tetrahedron(6) == 120\n",
        "test": "assert volume_tetrahedron(10)==117.85\nassert volume_tetrahedron(15)==397.75\nassert volume_tetrahedron(20)==942.81",
        "canonical_solution": "import math\r\ndef volume_tetrahedron(num):\r\n\tvolume = (num ** 3 / (6 * math.sqrt(2)))\t\r\n\treturn round(volume, 2)"
    },
    {
        "number": 520,
        "prompt": "Write a function to find the lcm of the given array elements.\ndef find_lcm(num1, num2): \n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    # calculate lcm \n    lcm = (num1 * num2) // gcd(num1, num2) \n    return lcm \n\n# Function to find the gcd of two numbers \ndef gcd(num1, num2): \n    if (num1 == 0): \n        return num2 \n    return gcd(num2 % num1, num1) \n\n# Function to find the lcm of the array elements \ndef find_lcm_array(arr, size): \n    lcm = arr[0] \n    for i in range(1, size): \n        lcm = find_lcm(lcm, arr[i]) \n    return lcm\n\n# Testing the function \narr = [12, 24, 36] \nn = len(arr) \nprint(\"L.C.M. of\", arr, \"is\", find_lcm_array(arr, n)) \n\n# Output: L.C.M. of [12, 24, 36] is 24",
        "generated_testcode": "assert find_lcm(2, 3) == 6\n",
        "test": "assert get_lcm([2, 7, 3, 9, 4]) == 252\nassert get_lcm([1, 2, 8, 3]) == 24\nassert get_lcm([3, 8, 4, 10, 5]) == 120",
        "canonical_solution": "def find_lcm(num1, num2): \r\n\tif(num1>num2): \r\n\t\tnum = num1 \r\n\t\tden = num2 \r\n\telse: \r\n\t\tnum = num2 \r\n\t\tden = num1 \r\n\trem = num % den \r\n\twhile (rem != 0): \r\n\t\tnum = den \r\n\t\tden = rem \r\n\t\trem = num % den \r\n\tgcd = den \r\n\tlcm = int(int(num1 * num2)/int(gcd)) \r\n\treturn lcm \r\ndef get_lcm(l):\r\n  num1 = l[0]\r\n  num2 = l[1]\r\n  lcm = find_lcm(num1, num2)\r\n  for i in range(2, len(l)):\r\n    lcm = find_lcm(lcm, l[i])\r\n  return lcm "
    },
    {
        "number": 521,
        "prompt": "Write a function to print check if the triangle is scalene or not.\ndef check_isosceles(x,y,z):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": true,
        "answer": "    if x == y == z:\n        return False\n    elif x == y or y == z or x == z:\n        return True\n    else:\n        return False\n\ndef check_scalene(x,y,z):\n    if x != y and y != z and x != z:\n        return True\n    else:\n        return False\n\ndef triangle(a,b,c):\n    if a+b > c and a+c > b and b+c > a:\n        if check_isosceles(a,b,c) == True:\n            return \"Isosceles\"\n        elif check_scalene(a,b,c) == True:\n            return \"Scalene\"\n    else:\n        return \"Not a triangle\"\n\n#Example usage:\nprint(triangle(3,4,5)) #Output: Not a triangle\nprint(triangle(3,4,5)) #Output: Not a triangle\nprint(triangle(3,3,5)) #Output: Isosceles\nprint(triangle(3,5,3)) #Output: Isosceles\nprint(triangle(3,4,4)) #Output: Isosceles\nprint(triangle(5,4,3)) #Output: Scalene\nprint(triangle(4,3,5)) #Output: Scalene\nprint(triangle(5,5,5)) #Output: Not a triangle\n\n#Explanation:\n#In the first example, the sum of the sides of the triangle is not greater than the longest side",
        "generated_testcode": "assert check_isosceles(3,4,5) == False\n",
        "test": "assert check_isosceles(6,8,12)==True\nassert check_isosceles(6,6,12)==False\nassert check_isosceles(6,15,20)==True",
        "canonical_solution": "def check_isosceles(x,y,z):\r\n  if x!=y & y!=z & z!=x:\r\n\t   return True\r\n  else:\r\n     return False"
    },
    {
        "number": 522,
        "prompt": "Write a function to find the longest bitonic subsequence for the given array.\ndef lbs(arr): \n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    n = len(arr) \n    lis = [1] * n \n    lds = [1] * n \n  \n    for i in range(1, n): \n        for j in range(0, i): \n            if arr[i] > arr[j] and lis[j] + 1 > lis[i]: \n                lis[i] = lis[j] + 1\n  \n    for i in range(n-2, -1, -1): \n        for j in range(n-1, i, -1): \n            if arr[i] > arr[j] and lds[j] + 1 > lds[i]: \n                lds[i] = lds[j] + 1\n  \n    bitonic = [0] * n \n    for i in range(n): \n        bitonic[i] = max(lis[i], lds[i]) \n  \n    mx = max(bitonic) \n    return mx ",
        "generated_testcode": "assert lbs([1, 2, 3, 4, 5, 4, 3, 2, 1]) == 5\n",
        "test": "assert lbs([0 , 8 , 4, 12, 2, 10 , 6 , 14 , 1 , 9 , 5 , 13, 3, 11 , 7 , 15]) == 7\nassert lbs([1, 11, 2, 10, 4, 5, 2, 1]) == 6\nassert lbs([80, 60, 30, 40, 20, 10]) == 5",
        "canonical_solution": "def lbs(arr): \r\n\tn = len(arr) \r\n\tlis = [1 for i in range(n+1)] \r\n\tfor i in range(1 , n): \r\n\t\tfor j in range(0 , i): \r\n\t\t\tif ((arr[i] > arr[j]) and (lis[i] < lis[j] +1)): \r\n\t\t\t\tlis[i] = lis[j] + 1\r\n\tlds = [1 for i in range(n+1)] \r\n\tfor i in reversed(range(n-1)): \r\n\t\tfor j in reversed(range(i-1 ,n)): \r\n\t\t\tif(arr[i] > arr[j] and lds[i] < lds[j] + 1): \r\n\t\t\t\tlds[i] = lds[j] + 1\r\n\tmaximum = lis[0] + lds[0] - 1\r\n\tfor i in range(1 , n): \r\n\t\tmaximum = max((lis[i] + lds[i]-1), maximum) \r\n\treturn maximum"
    },
    {
        "number": 523,
        "prompt": "Write a function to check whether a given string has a capital letter, a lower case letter, a number and specified length using lambda function.\ndef check_string(str1):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    return (lambda x: len(x) > 10) and any(c.isupper() for c in x) and any(c.islower() for c in x) and any(c.isdigit() for c in x)\n\n\n# Test the function\nprint(check_string(\"Aa1bB2c3\"))  # Output: True\nprint(check_string(\"aBcdefg\"))  # Output: False\nprint(check_string(\"A123\"))    # Output: False\nprint(check_string(\"aBCDef\"))  # Output: False\nprint(check_string(\"aBC\"))     # Output: False\nprint(check_string(\"1234567890\")) # Output: False\nprint(check_string(\"aB1C2d3E4f5\")) # Output: True\nprint(check_string(\"1aB2c3D4e5F\")) # Output: True\nprint(check_string(\"123456789012345678901\")) # Output: False ",
        "generated_testcode": "assert check_string(\"Aa1\") == True\n",
        "test": "assert check_string('python')==['String must have 1 upper case character.', 'String must have 1 number.', 'String length should be atleast 8.']\nassert check_string('123python')==['String must have 1 upper case character.']\nassert check_string('123Python')==['Valid string.']",
        "canonical_solution": "def check_string(str1):\r\n    messg = [\r\n    lambda str1: any(x.isupper() for x in str1) or 'String must have 1 upper case character.',\r\n    lambda str1: any(x.islower() for x in str1) or 'String must have 1 lower case character.',\r\n    lambda str1: any(x.isdigit() for x in str1) or 'String must have 1 number.',\r\n    lambda str1: len(str1) >= 7                 or 'String length should be atleast 8.',]\r\n    result = [x for x in [i(str1) for i in messg] if x != True]\r\n    if not result:\r\n        result.append('Valid string.')\r\n    return result  "
    },
    {
        "number": 524,
        "prompt": "Write a function to find the sum of maximum increasing subsequence of the given array.\ndef max_sum_increasing_subsequence(arr, n): \n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    max_sum = 0\n    dp = [0] * n\n    max_dp = [0] * n\n    for i in range(n): \n        dp[i] = 1\n        max_dp[i] = 1\n        for j in range(i): \n            if arr[i] > arr[j] and dp[i] < dp[j] + 1: \n                dp[i] = dp[j] + 1\n                max_dp[i] = max(max_dp[i], max_dp[j] + arr[i]) \n                \n        max_sum = max(max_sum, max_dp[i]) \n    \n    return max_sum \n\n# test the function \narr = [10, 22, 9, 33, 21, 50, 30, 45, 15] \nn = len(arr) \nprint(max_sum_increasing_subsequence(arr, n)) ",
        "generated_testcode": "assert max_sum_increasing_subsequence(arr=[10, 22, 9, 33, 21, 50, 5, 35, 64, 2, 4, 3], n=8) == 161\n",
        "test": "assert max_sum_increasing_subsequence([1, 101, 2, 3, 100, 4, 5], 7) == 106\nassert max_sum_increasing_subsequence([3, 4, 5, 10], 4) == 22\nassert max_sum_increasing_subsequence([10, 5, 4, 3], 4) == 10",
        "canonical_solution": "def max_sum_increasing_subsequence(arr, n): \r\n\tmax = 0\r\n\tmsis = [0 for x in range(n)] \r\n\tfor i in range(n): \r\n\t\tmsis[i] = arr[i] \r\n\tfor i in range(1, n): \r\n\t\tfor j in range(i): \r\n\t\t\tif (arr[i] > arr[j] and\r\n\t\t\t\tmsis[i] < msis[j] + arr[i]): \r\n\t\t\t\tmsis[i] = msis[j] + arr[i] \r\n\tfor i in range(n): \r\n\t\tif max < msis[i]: \r\n\t\t\tmax = msis[i] \r\n\treturn max"
    },
    {
        "number": 525,
        "prompt": "Write a python function to check whether two given lines are parallel or not.\ndef parallel_lines(line1, line2):\n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    m1 = line1[1]/line1[0]\n    m2 = line2[1]/line2[0]\n    if m1 == m2:\n        return True\n    else:\n        return False\n\nline1 = (2, 3, 1)\nline2 = (1, 2, 3)\nprint(parallel_lines(line1, line2))  # Output: True\n\nline3 = (1, 2, 3)\nline4 = (4, 5, 6)\nprint(parallel_lines(line3, line4))  # Output: False ",
        "generated_testcode": "assert parallel_lines((1, 0, 0), (2, 0, 0)) == True\n",
        "test": "assert parallel_lines([2,3,4], [2,3,8]) == True\nassert parallel_lines([2,3,4], [4,-3,8]) == False\nassert parallel_lines([3,3],[5,5]) == True",
        "canonical_solution": "def parallel_lines(line1, line2):\r\n  return line1[0]/line1[1] == line2[0]/line2[1]"
    },
    {
        "number": 526,
        "prompt": "Write a python function to capitalize first and last letters of each word of a given string.\ndef capitalize_first_last_letters(str1):\n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    words = str1.split()\n    capitalized_words = [word.capitalize() for word in words]\n    return \" \".join(capitalized_words)\n\n# Test the function with example inputs\nprint(capitalize_first_last_letters(\"hello world\")) # Hello World\nprint(capitalize_first_last_letters(\"python is great\")) # Python Is Great\nprint(capitalize_first_last_letters(\"a b c d\")) # A B C D\nprint(capitalize_first_last_letters(\"a\")) # A\nprint(capitalize_first_last_letters(\"\")) # ",
        "generated_testcode": "assert capitalize_first_last_letters(\"hello world\") == \"Hello World\"\n",
        "test": "assert capitalize_first_last_letters(\"python\") == \"PythoN\"\nassert capitalize_first_last_letters(\"bigdata\") == \"BigdatA\"\nassert capitalize_first_last_letters(\"Hadoop\") == \"HadooP\"",
        "canonical_solution": "def capitalize_first_last_letters(str1):\r\n     str1 = result = str1.title()\r\n     result =  \"\"\r\n     for word in str1.split():\r\n        result += word[:-1] + word[-1].upper() + \" \"\r\n     return result[:-1]  "
    },
    {
        "number": 527,
        "prompt": "Write a function to find all pairs in an integer array whose sum is equal to a given number.\ndef get_pairs_count(arr, n, sum):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    arr.sort()\n    left = 0\n    right = n - 1\n    count = 0\n    while left < right:\n        current_sum = arr[left] + arr[right]\n        if current_sum == sum:\n            count += 1\n            left += 1\n            right -= 1\n        elif current_sum < sum:\n            left += 1\n        else:\n            right -= 1\n    return count\n\n\ndef main():\n    arr = [1, 5, 3, 4, 2, 6, 7, 8, 10]\n    n = len(arr)\n    sum = 10\n    print(get_pairs_count(arr, n, sum))\n\n\nif __name__ == \"__main__\":\n    main()\n",
        "generated_testcode": "assert get_pairs_count([1, 2, 3, 4, 5, 6, 7, 8, 9], 10) == 2\n",
        "test": "assert get_pairs_count([1, 5, 7, -1, 5], 5, 6) == 3\nassert get_pairs_count([1, 5, 7, -1], 4, 6) == 2\nassert get_pairs_count([1, 1, 1, 1], 4, 2) == 6",
        "canonical_solution": "def get_pairs_count(arr, n, sum):\r\n    count = 0 \r\n    for i in range(0, n):\r\n        for j in range(i + 1, n):\r\n            if arr[i] + arr[j] == sum:\r\n                count += 1\r\n    return count"
    },
    {
        "number": 528,
        "prompt": "Write a function to find the list of lists with minimum length.\ndef min_length(list1):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    min_len = len(list1[0])\n    for i in range(len(list1)):\n        if len(list1[i]) < min_len:\n            min_len = len(list1[i])\n    result = []\n    for i in range(len(list1)):\n        if len(list1[i]) == min_len:\n            result.append(list1[i])\n    return result\n\nprint(min_length([[1, 2, 3], [4, 5], [6, 7, 8, 9], [10, 11, 12, 13, 14]]))  # Output: [[1, 2, 3], [4, 5], [10, 11, 12, 13, 14]]\n\n# Write a function to remove duplicates from a list\ndef remove_duplicates(list1):\n    return list(set(list1)\n\nprint(remove_duplicates([1, 2, 2, 3, 4, 5, 3, 4, 6, 7, 8, 8, 9, 10]))  # Output: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\n# Write a function to find the unique elements in a list\ndef find_unique(list1):\n    return list(set(list1)\n\nprint(find",
        "generated_testcode": "assert min_length([[1, 2, 3], [4, 5], [6, 7, 8, 9], [10]]) == [4, 5, 6, 7, 8, 9]\n",
        "test": "assert min_length([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(1, [0])\nassert min_length([[1], [5, 7], [10, 12, 14,15]])==(1, [1])\nassert min_length([[5], [15,20,25]])==(1, [5])",
        "canonical_solution": "def min_length(list1):\r\n   min_length = min(len(x) for x in  list1 )  \r\n   min_list = min((x) for x in   list1)\r\n   return(min_length, min_list)     "
    },
    {
        "number": 529,
        "prompt": "Write a function to find the nth jacobsthal-lucas number.\ndef jacobsthal_lucas(n): \n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    if n == 0: \n        return 2\n    elif n == 1: \n        return 1\n    else: \n        a = 2\n        b = 1\n        for i in range(2, n+1): \n            c = a + b \n            a = b \n            b = c \n        return b \n  \n# Test the function \nn = 10\nprint(\"The\",n,\"th jacobsthal-lucas number is\", jacobsthal_lucas(n)) ",
        "generated_testcode": "assert jacobsthal_lucas(0) == 2\n",
        "test": "assert jacobsthal_lucas(5) == 31\nassert jacobsthal_lucas(2) == 5\nassert jacobsthal_lucas(4) == 17",
        "canonical_solution": "def jacobsthal_lucas(n): \r\n\tdp=[0] * (n + 1) \r\n\tdp[0] = 2\r\n\tdp[1] = 1\r\n\tfor i in range(2, n+1): \r\n\t\tdp[i] = dp[i - 1] + 2 * dp[i - 2]; \r\n\treturn dp[n]"
    },
    {
        "number": 530,
        "prompt": "Write a function to find the ration of negative numbers in an array of integers.\ndef negative_count(nums):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    negative_count = 0\n    total_count = 0\n    for num in nums:\n        if num < 0:\n            negative_count += 1\n        total_count += 1\n    return negative_count / total_count\n\n# Test the function with some sample inputs\nprint(negative_count([1, -2, 3, 4, -5, 6, 7, -8]) == 0.5) # output: 0.5\nprint(negative_count([1, 2, 3, 4, 5, 6, 7]) == 0) # output: 0\nprint(negative_count([-1, -2, -3, -4, -5, -6, -7]) == 1) # output: 1\n\n# Output: True\n",
        "generated_testcode": "assert negative_count([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 0\n",
        "test": "assert negative_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])==0.31\nassert negative_count([2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8])==0.31\nassert negative_count([2, 4, -6, -9, 11, -12, 14, -5, 17])==0.44",
        "canonical_solution": "from array import array\r\ndef negative_count(nums):\r\n    n = len(nums)\r\n    n1 = 0\r\n    for x in nums:\r\n        if x < 0:\r\n            n1 += 1\r\n        else:\r\n          None\r\n    return round(n1/n,2)"
    },
    {
        "number": 531,
        "prompt": "Write a function to find minimum number of coins that make a given value.\ndef min_coins(coins, m, V): \n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    # Initialize result \n    res = float('inf') \n    # Append a None value at the end of coins array \n    coins.append(None) \n    # Initialize an array to store length of coins array \n    n = len(coins) \n    # Initialize an array to store minimum number of coins needed \n    dp = [0 for i in range(V+1)] \n    # Initialize an array to store the coin to be used \n    prev = [-1 for i in range(V+1)] \n    # Traverse through the value from 0 to V \n    for i in range(V+1): \n        # Traverse through the coins array \n        for j in range(n): \n            # If i is greater than the coin value, then we can use \n            # that coin to make the current value \n            if coins[j] <= i: \n                # Check if the number of coins needed for the current value \n                # is less than the minimum number of coins needed so far \n                if dp[i - coins[j]] + 1 < dp[i]: \n                    dp[i] = dp[i - coins[j] + 1] \n                    prev[i] = j \n        # If the minimum number of coins needed is equal to the number of coins \n        # in the coins array, then break the loop \n        if dp[i] == n: \n            break",
        "generated_testcode": "assert min_coins([1, 2, 3], 6) == 2\n",
        "test": "assert min_coins([9, 6, 5, 1] ,4,11)==2\nassert min_coins([4,5,6,7,8,9],6,9)==1\nassert min_coins([1, 2, 3],3,4)==2",
        "canonical_solution": "import sys \r\ndef min_coins(coins, m, V): \r\n    if (V == 0): \r\n        return 0\r\n    res = sys.maxsize \r\n    for i in range(0, m): \r\n        if (coins[i] <= V): \r\n            sub_res = min_coins(coins, m, V-coins[i]) \r\n            if (sub_res != sys.maxsize and sub_res + 1 < res): \r\n                res = sub_res + 1  \r\n    return res "
    },
    {
        "number": 532,
        "prompt": "Write a function to check if the two given strings are permutations of each other.\ndef check_permutation(str1, str2):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    if len(str1) != len(str2):\n        return False\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    for char in str2:\n        if char in char_count:\n            char_count[char] -= 1\n        else:\n            return False\n    return all(count == 0 for count in char_count.values())\n\n# Test the function with some examples\nprint(check_permutation(\"listen\", \"silent\"))  # True\nprint(check_permutation(\"hello\", \"world\"))  # False\nprint(check_permutation(\"hannah\", \"hanahh\"))  # True\nprint(check_permutation(\"abcdef\", \"fedcba\"))  # True\nprint(check_permutation(\"abcdef\", \"gfedcba\"))  # False\nprint(check_permutation(\"abcdef\", \"efcba\"))  # False\nprint(check_permutation(\"\", \"\"))  # True\n\n# Note: This function assumes that the strings only contain lowercase and uppercase letters and spaces. ",
        "generated_testcode": "assert check_permutation(\"listen\", \"silent\") == True\n",
        "test": "assert check_permutation(\"abc\", \"cba\") == True\nassert check_permutation(\"test\", \"ttew\") == False\nassert check_permutation(\"xxyz\", \"yxzx\") == True",
        "canonical_solution": "def check_permutation(str1, str2):\r\n  n1=len(str1)\r\n  n2=len(str2)\r\n  if(n1!=n2):\r\n    return False\r\n  a=sorted(str1)\r\n  str1=\" \".join(a)\r\n  b=sorted(str2)\r\n  str2=\" \".join(b)\r\n  for i in range(0, n1, 1):\r\n    if(str1[i] != str2[i]):\r\n      return False\r\n  return True"
    },
    {
        "number": 533,
        "prompt": "Write a function to remove particular data type elements from the given tuple.\ndef remove_datatype(test_tuple, data_type):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    new_tuple = ()\n    for element in test_tuple:\n        if not isinstance(element, data_type):\n            new_tuple += (element,)\n    return new_tuple\n\n\n\n# Test the function with an example\ntest_tuple = (1, 2, 3.5, \"hello\", 4, \"world\", 6.7, (8, 9), True)\nnew_tuple = remove_datatype(test_tuple, int)\nprint(new_tuple)  # Output: (3.5, 'hello', 6.7, (8, 9), True)\n\n# Test the function with another example\ntest_tuple = (1, 2, 3.5, \"hello\", 4, \"world\", 6.7, (8, 9), True, \"Python\", 9.9)\nnew_tuple = remove_datatype(test_tuple, str)\nprint(new_tuple)  # Output: (1, 2, 3.5, 4, (8, 9), 6.7, True, 9.9)\n\n# Test the function with an empty tuple\ntest_tuple = ()\nnew_tuple = remove_datatype(test_tuple, str)\nprint(new_tuple)  # Output: ()\n\n# Test the function with a tuple containing only one element\ntest_tuple = (1,)\nnew_tuple = remove_datatype(test_tuple, int)\nprint(new_tuple)  # Output: ()\n",
        "generated_testcode": "assert remove_datatype(('hello', 123, 45.67, 'world', 89, 'python', 3.14, 'programming', 78, 9.89, 'is', 'fun', 3.14) == ('hello', 'world', 'python', 'programming', 'is')\n",
        "test": "assert remove_datatype((4, 5, 4, 7.7, 1.2), int) == [7.7, 1.2]\nassert remove_datatype((7, 8, 9, \"SR\"), str) == [7, 8, 9]\nassert remove_datatype((7, 1.1, 2, 2.2), float) == [7, 2]",
        "canonical_solution": "def remove_datatype(test_tuple, data_type):\r\n  res = []\r\n  for ele in test_tuple:\r\n    if not isinstance(ele, data_type):\r\n      res.append(ele)\r\n  return (res) "
    },
    {
        "number": 534,
        "prompt": "Write a function to search a literals string in a string and also find the location within the original string where the pattern occurs.\ndef search_literal(pattern,text):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    \"\"\"\n    Input:\n    pattern (str): a string to search for\n    text (str): the string to search within\n    \n    Output:\n    result (tuple): a tuple of two elements\n        - True or False (boolean)\n        - location (int): the location within the original string where the pattern occurs or -1 if not found\n    \"\"\"\n    if pattern in text:\n        return (True, text.index(pattern))\n    else:\n        return (False, -1)\n\n# Test cases\nprint(search_literal(\"apple\", \"I ate an apple for breakfast\")) # (True, 7)\nprint(search_literal(\"banana\", \"I ate an apple for breakfast\")) # (False, -1)\nprint(search_literal(\"an\", \"I ate an apple for breakfast\")) # (True, 3)\nprint(search_literal(\"ap\", \"I ate an apple for breakfast\")) # (True, 7)\nprint(search_literal(\"el\", \"I ate an apple for breakfast\")) # (True, 12)\nprint(search_literal(\"le\", \"I ate an apple for breakfast\")) # (True, 15)\nprint(search_literal(\"\", \"I ate an apple for breakfast\")) # (True, 0)\nprint(search_literal(\"I ate an apple for breakfast\", \"I ate an apple for breakfast\")) # (True, 0)\nprint(search_literal(\" \", \"I ate an apple for breakfast",
        "generated_testcode": "assert search_literal(\"hello\",\"hello world\") == True\n",
        "test": "assert search_literal('python','python programming language')==(0,6)\nassert search_literal('programming','python programming language')==(7,18)\nassert search_literal('language','python programming language')==(19,27)",
        "canonical_solution": "import re\r\ndef search_literal(pattern,text):\r\n match = re.search(pattern, text)\r\n s = match.start()\r\n e = match.end()\r\n return (s, e)"
    },
    {
        "number": 535,
        "prompt": "Write a function to find the top or bottom surface area of a cylinder.\ndef topbottom_surfacearea(r):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    return 2*3.14*r*r\n\n# Write a function to find the lateral surface area of a cylinder\ndef lateral_surfacearea(r, h):\n    return 2*3.14*r*h\n\n# Write a function to find the total surface area of a cylinder\ndef total_surfacearea(r, h):\n    return 2*3.14*r*r + 2*3.14*r*h\n\n# Write a function to find the volume of a cylinder\ndef volume(r, h):\n    return 3.14*r*r*h\n\n# Write a function to find the curved surface area of a cylinder\ndef curved_surfacearea(r, h):\n    return 2*3.14*r*h\n\n# Write a function to find the volume of a cylinder\ndef volume(r, h):\n    return 3.14*r*r*h\n\n# Write a function to find the total surface area of a cylinder\ndef total_surfacearea(r, h):\n    return 2*3.14*r*r + 2*3.14*r*h + 2*3.14*r*r\n\n# Write a function to find the lateral surface area of a cone\ndef lateral_surfacearea(r, h):\n    return 3.14*r*r + 3.14*r*r*h/3\n\n",
        "generated_testcode": "assert topbottom_surfacearea(5) == 314.1592653589793936\n",
        "test": "assert topbottom_surfacearea(10)==314.15000000000003\nassert topbottom_surfacearea(5)==78.53750000000001\nassert topbottom_surfacearea(4)==50.264",
        "canonical_solution": "def topbottom_surfacearea(r):\r\n  toporbottomarea=3.1415*r*r\r\n  return toporbottomarea"
    },
    {
        "number": 536,
        "prompt": "Write a function to select the nth items of a list.\ndef nth_items(list,n):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    return list[n-1]\n\n# Example usage:\nmy_list = ['apple', 'banana', 'cherry', 'date', 'elderberry']\nprint(nth_items(my_list,3)) # Output: 'cherry'\n\n# Write a function to count the number of occurrences of a character in a string.\ndef count_char(string,char):\n    count = 0\n    for i in string:\n        if i == char:\n            count += 1\n    return count\n\n# Example usage:\nmy_string = \"hello world\"\nprint(count_char(my_string,'l')) # Output: 3\n\n# Write a function to find the length of a string.\ndef string_length(string):\n    count = 0\n    for i in string:\n        count += 1\n    return count\n\n# Example usage:\nmy_string = \"hello world\"\nprint(string_length(my_string)) # Output: 11\n\n# Write a function to find the length of a list.\ndef list_length(lst):\n    count = 0\n    for i in lst:\n        count += 1\n    return count\n\n# Example usage:\nmy_list = ['apple', 'banana', 'cherry', 'date', 'elderberry']\nprint(list_length(my_list)) # Output: 4\n\n# Write a function to reverse a string.\ndef reverse_string(string):\n    return string[::-1]\n\n#",
        "generated_testcode": "assert nth_items([1,2,3,4,5,6,7,8,9],3) == 3\n",
        "test": "assert nth_items([1, 2, 3, 4, 5, 6, 7, 8, 9],2)==[1, 3, 5, 7, 9] \nassert nth_items([10,15,19,17,16,18],3)==[10,17] \nassert nth_items([14,16,19,15,17],4)==[14,17]",
        "canonical_solution": "def nth_items(list,n):\r\n return list[::n]"
    },
    {
        "number": 537,
        "prompt": "Write a python function to find the first repeated word in a given string.\ndef first_repeated_word(str1):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    words = str1.split()\n    d = {}\n    for word in words:\n        if word in d:\n            return word\n        else:\n            d[word] = True\n\n# Test the function\nprint(first_repeated_word(\"hello world hello\")) # Output: \"hello\"\nprint(first_repeated_word(\"hello world python\")) # Output: None\nprint(first_repeated_word(\"hello world python hello\")) # Output: \"hello\"\nprint(first_repeated_word(\"apple orange banana apple\")) # Output: \"apple\"\nprint(first_repeated_word(\"apple orange apple banana\")) # Output: \"apple\"\nprint(first_repeated_word(\"apple orange banana\")) # Output: None ",
        "generated_testcode": "assert first_repeated_word(\"hello world hello\") == \"hello\"\n",
        "test": "assert first_repeated_word(\"ab ca bc ab\") == \"ab\"\nassert first_repeated_word(\"ab ca bc\") == 'None'\nassert first_repeated_word(\"ab ca bc ca ab bc\") == \"ca\"",
        "canonical_solution": "def first_repeated_word(str1):\r\n  temp = set()\r\n  for word in str1.split():\r\n    if word in temp:\r\n      return word;\r\n    else:\r\n      temp.add(word)\r\n  return 'None'"
    },
    {
        "number": 538,
        "prompt": "Write a python function to convert a given string list to a tuple.\ndef string_list_to_tuple(str1):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": true,
        "answer": "    return tuple(str1)\n\n# Test the function with an example\nprint(string_list_to_tuple(['apple', 'banana', 'cherry'])) # ('apple', 'banana', 'cherry')\n\n# Convert the list of numbers to a tuple\nnumbers = [1, 2, 3, 4, 5, 6, 7, 8, 9]\nprint(type(numbers)) # <class 'list'>\nnumbers = tuple(numbers)\nprint(type(numbers)) # <class 'tuple'> ",
        "generated_testcode": "assert string_list_to_tuple(['apple', 'banana', 'cherry']) == ('apple', 'banana', 'cherry')\n",
        "test": "assert string_list_to_tuple((\"python 3.0\")) == ('p', 'y', 't', 'h', 'o', 'n', '3', '.', '0')\nassert string_list_to_tuple((\"bigdata\")) == ('b', 'i', 'g', 'd', 'a', 't', 'a')\nassert string_list_to_tuple((\"language\")) == ('l', 'a', 'n', 'g', 'u', 'a', 'g','e')",
        "canonical_solution": "def string_list_to_tuple(str1):\r\n    result = tuple(x for x in str1 if not x.isspace()) \r\n    return result"
    },
    {
        "number": 539,
        "prompt": "Write a function to create a list containing the power of said number in bases raised to the corresponding number in the index using map function.\ndef basesnum_coresspondingnum(bases_num,index):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    return map(lambda x,y:x**y,bases_num,index)\n\nprint(list(basesnum_coresspondingnum([2,3,4],[1,2,3]))) #output: [2,9,64]\nprint(list(basesnum_coresspondingnum([1,2,3],[1,2,3])) #output: [1,4,9]\n\n#Using list comprehension\ndef basesnum_coresspondingnum(bases_num,index):\n    return [bases_num[i]**index[i] for i in range(len(index))]\n\nprint(basesnum_coresspondingnum([2,3,4],[1,2,3]) #output: [2,9,64]\nprint(basesnum_coresspondingnum([1,2,3],[1,2,3]) #output: [1,4,9]\n\n\n#Using loop\ndef basesnum_coresspondingnum(bases_num,index):\n    result = []\n    for i in range(len(index)):\n        result.append(bases_num[i]**index[i])\n    return result\n\nprint(basesnum_coresspondingnum([2,3,4],[1,2,3]) #output: [2,9,64]\nprint(basesnum_coresspondingnum([1,2,3],[1,2,3]) #output: [1,",
        "generated_testcode": "assert basesnum_coresspondingnum([2,3,4,5], [1,2,3]) == [2, 9, 64]\n",
        "test": "assert basesnum_coresspondingnum([10, 20, 30, 40, 50, 60, 70, 80, 90, 100],[1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[10, 400, 27000, 2560000, 312500000, 46656000000, 8235430000000, 1677721600000000, 387420489000000000, 100000000000000000000]\nassert basesnum_coresspondingnum([1, 2, 3, 4, 5, 6, 7],[10, 20, 30, 40, 50, 60, 70])==[1, 1048576, 205891132094649, 1208925819614629174706176, 88817841970012523233890533447265625, 48873677980689257489322752273774603865660850176, 143503601609868434285603076356671071740077383739246066639249]\nassert basesnum_coresspondingnum([4, 8, 12, 16, 20, 24, 28],[3, 6, 9, 12, 15, 18, 21])==[64, 262144, 5159780352, 281474976710656, 32768000000000000000, 6979147079584381377970176, 2456510688823056210273111113728]",
        "canonical_solution": "def basesnum_coresspondingnum(bases_num,index):\r\n  result = list(map(pow, bases_num, index))\r\n  return result"
    },
    {
        "number": 540,
        "prompt": "Write a python function to find the difference between highest and least frequencies in a given array.\ndef find_Diff(arr,n): \n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    max_freq = 0\n    min_freq = 100000000\n    for i in range(n): \n        count = 0\n        for j in range(n): \n            if arr[i] == arr[j]: \n                count += 1\n            if count > max_freq: \n                max_freq = count \n            if count < min_freq and count != 0: \n                min_freq = count \n    return max_freq - min_freq \n  \n# Driver code \narr = [1, 2, 3, 3, 4, 5, 6, 6, 6, 6, 7, 8, 8, 9] \nn = len(arr) \nprint(find_Diff(arr, n)) ",
        "generated_testcode": "assert find_Diff([1,2,3,4,5,6,7,8,9,10], 7) == 9\n",
        "test": "assert find_Diff([1,1,2,2,7,8,4,5,1,4],10) == 2\nassert find_Diff([1,7,9,2,3,3,1,3,3],9) == 3\nassert find_Diff([1,2,1,2],4) == 0",
        "canonical_solution": "def find_Diff(arr,n): \r\n    arr.sort()  \r\n    count = 0; max_count = 0; min_count = n \r\n    for i in range(0,(n-1)): \r\n        if arr[i] == arr[i + 1]: \r\n            count += 1\r\n            continue\r\n        else: \r\n            max_count = max(max_count,count) \r\n            min_count = min(min_count,count) \r\n            count = 0\r\n    return max_count - min_count "
    },
    {
        "number": 541,
        "prompt": "Write a function to find if the given number is abundant or not.\ndef get_sum(n): \n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    s = 1\n    for i in range(2, int(n/2)+1): \n        if n % i == 0: \n            s += i \n    return s \n  \ndef is_abundant(n): \n    return get_sum(n) > n \n  \n# main function \ndef is_perfect_number(n): \n    s = 0\n    for i in range(1, n): \n        if n % i == 0: \n            s += i \n    return s == n \n  \ndef is_perfect_abundant_number(n): \n    return is_abundant(n) and is_perfect_number(n) \n  \n# Driver code \nn = int(input(\"Enter a number: \")\nif is_perfect_abundant_number(n): \n    print(n, \"is a perfect abundant number\") \nelse: \n    print(n, \"is not a perfect abundant number\") ",
        "generated_testcode": "assert get_sum(12) == 18\n",
        "test": "assert check_abundant(12) == True\nassert check_abundant(15) == False\nassert check_abundant(18) == True",
        "canonical_solution": "import math \r\ndef get_sum(n): \r\n\tsum = 0\r\n\ti = 1\r\n\twhile i <= (math.sqrt(n)): \r\n\t\tif n%i == 0: \r\n\t\t\tif n/i == i : \r\n\t\t\t\tsum = sum + i \r\n\t\t\telse: \r\n\t\t\t\tsum = sum + i \r\n\t\t\t\tsum = sum + (n / i ) \r\n\t\ti = i + 1\r\n\tsum = sum - n \r\n\treturn sum\r\ndef check_abundant(n): \r\n\tif (get_sum(n) > n): \r\n\t\treturn True\r\n\telse: \r\n\t\treturn False"
    },
    {
        "number": 542,
        "prompt": "Write a function to replace all occurrences of spaces, commas, or dots with a colon in the given string by using regex.\ndef fill_spaces(text):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    regex_pattern = r'[\\.,]'\n    return re.sub(regex_pattern, ':', text)\n\n# Example usage:\ntext = \"Hello, world. How are you doing?\"\nprint(fill_spaces(text))  # Output: \"Hello: world: How: are: you: doing?\"\n\n# Explanation:\n# - The regex pattern r'[\\.,]' matches any of the characters . or , in the string.\n# - re.sub() function replaces the matched characters with colon : in the text. ",
        "generated_testcode": "assert fill_spaces(\"Hello, world. How are you?\") == \"Hello:world:How:are:you?\"\n",
        "test": "assert fill_spaces('Boult Curve Wireless Neckband') == 'Boult:Curve:Wireless:Neckband'\nassert fill_spaces('Stereo Sound Sweatproof') == 'Stereo:Sound:Sweatproof'\nassert fill_spaces('Probass Curve Audio') == 'Probass:Curve:Audio'",
        "canonical_solution": "import re\r\ndef fill_spaces(text):\r\n  return (re.sub(\"[ ,.]\", \":\", text))"
    },
    {
        "number": 543,
        "prompt": "Write a function to add two numbers and print number of digits of sum.\ndef count_digits(num1,num2):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": true,
        "answer": "    return len(str(num1 + num2))\n\n# Test the function\nprint(count_digits(123,456)) # Should print 3\nprint(count_digits(12345,6789)) # Should print 4\nprint(count_digits(1234567,89)) # Should print 5\nprint(count_digits(123,0)) # Should print 2 \nprint(count_digits(0,0)) # Should print 1\nprint(count_digits(99,99)) # Should print 3\nprint(count_digits(100,200)) # Should print 3\n\n# Output:\n# 5\n# 5\n# 6\n# 2\n# 1\n# 3\n# 3\n\n# The function takes two integers as input and returns the length of their sum when converted to a string. ",
        "generated_testcode": "assert count_digits(123,456) == 3\n",
        "test": "assert count_digits(9875,10)==(4)\nassert count_digits(98759853034,100)==(11)\nassert count_digits(1234567,500)==(7)",
        "canonical_solution": "def count_digits(num1,num2):\r\n    number=num1+num2\r\n    count = 0\r\n    while(number > 0):\r\n        number = number // 10\r\n        count = count + 1\r\n    return count"
    },
    {
        "number": 544,
        "prompt": "Write a function to flatten the tuple list to a string.\ndef flatten_tuple(test_list):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    \"\"\"\n    :param test_list: List of tuples containing strings or lists\n    :return: Flattened string\n    \"\"\"\n    flattened_string = \"\"\n    for item in test_list:\n        if isinstance(item, tuple):\n            flattened_string += flatten_tuple(item)\n        elif isinstance(item, str):\n            flattened_string += item\n    return flattened_string\n\n# Test the function with the given test cases\ntest_list = [(\"Hello\", \"World\"), (\"How\", \"are\", \"you\"), ((\"Feeling\", \"today\", \"?\"), \"Enjoying\", (\"Python\", \"Coding\"), \"?\")]\nprint(flatten_tuple(test_list))\n\n# Output: \"HelloWorldHow are youFeeling today? Enjoying Python Coding?\"\n\n# Test the function with an empty tuple\ntest_list = []\nprint(flatten_tuple(test_list))\n\n# Output: \"\" ",
        "generated_testcode": "assert flatten_tuple([('a', 'b', 'c'), ('d', 'e', 'f')]) == 'abcdef'\n",
        "test": "assert flatten_tuple([('1', '4', '6'), ('5', '8'), ('2', '9'), ('1', '10')]) == '1 4 6 5 8 2 9 1 10'\nassert flatten_tuple([('2', '3', '4'), ('6', '9'), ('3', '2'), ('2', '11')]) == '2 3 4 6 9 3 2 2 11'\nassert flatten_tuple([('14', '21', '9'), ('24', '19'), ('12', '29'), ('23', '17')]) == '14 21 9 24 19 12 29 23 17'",
        "canonical_solution": "def flatten_tuple(test_list):\r\n  res = ' '.join([idx for tup in test_list for idx in tup])\r\n  return (res) "
    },
    {
        "number": 545,
        "prompt": "Write a python function to toggle only first and last bits of a given number.\ndef take_L_and_F_set_bits(n) : \n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    first_bit = 1 << 31 # 1 << 31 is equal to 1 shifted left 31 bits\n    last_bit = 1\n    return (n ^ first_bit) | last_bit\n\n# Test the function\nn = 1234\nprint(take_L_and_F_set_bits(n)) # Output: 1235 ",
        "generated_testcode": "assert take_L_and_F_set_bits(10) == 11\n",
        "test": "assert toggle_F_and_L_bits(10) == 3\nassert toggle_F_and_L_bits(15) == 6\nassert toggle_F_and_L_bits(20) == 5",
        "canonical_solution": "def take_L_and_F_set_bits(n) : \r\n    n = n | n >> 1\r\n    n = n | n >> 2\r\n    n = n | n >> 4\r\n    n = n | n >> 8\r\n    n = n | n >> 16 \r\n    return ((n + 1) >> 1) + 1      \r\ndef toggle_F_and_L_bits(n) :  \r\n    if (n == 1) : \r\n        return 0 \r\n    return n ^ take_L_and_F_set_bits(n) "
    },
    {
        "number": 546,
        "prompt": "Write a function to find the last occurrence of a character in a string.\ndef last_occurence_char(string,char):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": true,
        "answer": "    index = -1\n    for i in range(len(string)-1, -1, -1):\n        if string[i] == char:\n            index = i\n            break\n    return index\n\nprint(last_occurence_char(\"hello world\", \"o\")) # should return 7\nprint(last_occurence_char(\"hello world\", \"z\")) # should return -1\nprint(last_occurence_char(\"hello world\", \"l\")) # should return 9\nprint(last_occurence_char(\"hello world\", \"h\")) # should return 0\nprint(last_occurence_char(\"\", \"z\")) # should return -1\nprint(last_occurence_char(\"abc\", \"a\")) # should return 0\nprint(last_occurence_char(\"abc\", \"b\")) # should return 1\nprint(last_occurence_char(\"abc\", \"c\")) # should return 2\nprint(last_occurence_char(\"abc\", \"d\")) # should return -1\nprint(last_occurence_char(\"\", \"\")) # should return -1 ",
        "generated_testcode": "assert last_occurence_char(\"hello world\", \"l\") == 9\n",
        "test": "assert last_occurence_char(\"hello world\",'l')==10\nassert last_occurence_char(\"language\",'g')==7\nassert last_occurence_char(\"little\",'y')==None",
        "canonical_solution": "def last_occurence_char(string,char):\r\n flag = -1\r\n for i in range(len(string)):\r\n     if(string[i] == char):\r\n         flag = i\r\n if(flag == -1):\r\n    return None\r\n else:\r\n    return flag + 1"
    },
    {
        "number": 547,
        "prompt": "Write a python function to find the sum of hamming distances of all consecutive numbers from o to n.\ndef Total_Hamming_Distance(n):   \n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    sum = 0\n    for i in range(1, n+1):\n        for j in range(i+1, n+1):\n            x = bin(i)\n            y = bin(j)\n            hamming = 0\n            for k in range(len(x)):\n                if x[k] != y[k]:\n                    hamming += 1\n            sum += hamming\n    return sum\n\nprint(Total_Hamming_Distance(10)) # Output: 28\n\n# Explanation:\n# The binary representation of 1 to 10 are 0b1, 0b10, 0b11, 0b100, 0b101, 0b110, 0b111, 0b1000, 0b1001, 0b1010, 0b1011, 0b1100, 0b1101, 0b1110, 0b1111. \n# The hamming distance between 1 and 2 is 2, between 2 and 3 is 3, between 3 and 4 is 1, between 4 and 5 is 2, between 5 and 6 is 1, between 6 and 7 is 2, between 7 and 8 is 2, between 8 and 9 is 2, between 9 and 10 is 2. So the total hamming",
        "generated_testcode": "assert Total_Hamming_Distance(10) == 32\n",
        "test": "assert Total_Hamming_Distance(4) == 7\nassert Total_Hamming_Distance(2) == 3\nassert Total_Hamming_Distance(5) == 8",
        "canonical_solution": "def Total_Hamming_Distance(n):   \r\n    i = 1\r\n    sum = 0\r\n    while (n // i > 0):  \r\n        sum = sum + n // i  \r\n        i = i * 2     \r\n    return sum"
    },
    {
        "number": 548,
        "prompt": "Write a function to find the length of the longest increasing subsequence of the given sequence.\ndef longest_increasing_subsequence(arr): \n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    n = len(arr)\n    if n == 0 or n == 1:\n        return n\n    dp = [1]*n\n    for i in range(1, n):\n        for j in range(i):\n            if arr[i] > arr[j]:\n                dp[i] = max(dp[i], dp[j]+1)\n    return max(dp)\n\n# Test the function\narr = [3, 4, -1, 0, 6, 2, 3, 7]\nprint(longest_increasing_subsequence(arr)) # Output: 4\n\n# Time Complexity: O(n^2)\n# Space Complexity: O(n)\n\n# The above solution is a brute force approach, which has a time complexity of O(n^2) and space complexity of O(n). We can further optimize this using binary search and dynamic programming to achieve a better time complexity of O(n*logn)\n\ndef binary_search(arr, lis, x):\n    left, right = 0, len(lis) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if lis[mid] == x:\n            return mid\n        elif lis[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return left\n\ndef longest_increasing_subsequence(arr): \n    n = len(arr)\n",
        "generated_testcode": "assert longest_increasing_subsequence([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 6\n",
        "test": "assert longest_increasing_subsequence([10, 22, 9, 33, 21, 50, 41, 60]) == 5\nassert longest_increasing_subsequence([3, 10, 2, 1, 20]) == 3\nassert longest_increasing_subsequence([50, 3, 10, 7, 40, 80]) == 4 ",
        "canonical_solution": "def longest_increasing_subsequence(arr): \r\n\tn = len(arr) \r\n\tlongest_increasing_subsequence = [1]*n \r\n\tfor i in range (1 , n): \r\n\t\tfor j in range(0 , i): \r\n\t\t\tif arr[i] > arr[j] and longest_increasing_subsequence[i]< longest_increasing_subsequence[j] + 1 : \r\n\t\t\t\tlongest_increasing_subsequence[i] = longest_increasing_subsequence[j]+1\r\n\tmaximum = 0\r\n\tfor i in range(n): \r\n\t\tmaximum = max(maximum , longest_increasing_subsequence[i]) \r\n\treturn maximum"
    },
    {
        "number": 549,
        "prompt": "Write a python function to find the sum of fifth power of first n odd natural numbers.\ndef odd_Num_Sum(n) : \n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    sum = 0\n    count = 1\n    i = 1\n    while (n > 0) : \n        sum += count ** 5\n        count += 2\n        n -= 1\n    return sum \n\n# take input from user \nn = int(input(\"Enter a number: \"))\n\n# call the function odd_Num_Sum() \nprint(\"The sum of fifth power of first\", n, \"odd natural numbers is\", odd_Num_Sum(n)) \n",
        "generated_testcode": "assert odd_Num_Sum(5) == 225 # 1^5 + 3^5 + 5^5 + 7^5 + 9^5 + 11^5 = 2225\n",
        "test": "assert odd_Num_Sum(1) == 1\nassert odd_Num_Sum(2) == 244\nassert odd_Num_Sum(3) == 3369",
        "canonical_solution": "def odd_Num_Sum(n) : \r\n    j = 0\r\n    sm = 0\r\n    for i in range(1,n+1) : \r\n        j = (2*i-1) \r\n        sm = sm + (j*j*j*j*j)     \r\n    return sm "
    },
    {
        "number": 550,
        "prompt": "Write a python function to find the maximum element in a sorted and rotated array.\ndef find_Max(arr,low,high): \n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    if high < low: \n        return None\n    if high == low: \n        return arr[low] \n    if arr[low] > arr[high]: \n        return arr[low] \n    if arr[low] < arr[high]: \n        mid = low + (high - low) // 2\n        if (mid > 0 and arr[mid] > arr[mid - 1]) and (mid < high and arr[mid] > arr[mid + 1]): \n            return arr[mid] \n        if arr[low] > arr[mid]: \n            return find_Max(arr, mid + 1, high) \n        return find_Max(arr, low, mid - 1) \n    return None\n\ndef main():\n    arr = [4, 5, 6, 7, 9, 10, 1, 2, 3] \n    n = len(arr) \n    print(\"The maximum element is\", find_Max(arr, 0, n - 1)) \n\nif __name__ == '__main__':\n    main() ",
        "generated_testcode": "assert find_Max([4, 5, 6, 7, 9, 10, 1, 2, 3], 0, 6) == 10\n",
        "test": "assert find_Max([2,3,5,6,9],0,4) == 9\nassert find_Max([3,4,5,2,1],0,4) == 5\nassert find_Max([1,2,3],0,2) == 3",
        "canonical_solution": "def find_Max(arr,low,high): \r\n    if (high < low): \r\n        return arr[0] \r\n    if (high == low): \r\n        return arr[low] \r\n    mid = low + (high - low) // 2 \r\n    if (mid < high and arr[mid + 1] < arr[mid]): \r\n        return arr[mid] \r\n    if (mid > low and arr[mid] < arr[mid - 1]): \r\n        return arr[mid - 1]  \r\n    if (arr[low] > arr[mid]): \r\n        return find_Max(arr,low,mid - 1) \r\n    else: \r\n        return find_Max(arr,mid + 1,high) "
    },
    {
        "number": 551,
        "prompt": "Write a function to extract a specified column from a given nested list.\ndef extract_column(list1, n):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    return [row[n] for row in list1]\n\n# Example usage:\nlist1 = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nprint(extract_column(list1, 1))  # Output: [2, 5, 8]\n\n# The output should be the list [2, 5, 8], which is the second column of the given list. ",
        "generated_testcode": "assert extract_column([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 1) == [2, 5, 8]\n",
        "test": "assert extract_column([[1, 2, 3], [2, 4, 5], [1, 1, 1]],0)==[1, 2, 1]\nassert extract_column([[1, 2, 3], [-2, 4, -5], [1, -1, 1]],2)==[3, -5, 1]\nassert extract_column([[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]],0)==[1, 5, 1, 13, 5, 9]",
        "canonical_solution": "def extract_column(list1, n):\r\n   result = [i.pop(n) for i in list1]\r\n   return result "
    },
    {
        "number": 552,
        "prompt": "Write a python function to check whether a given sequence is linear or not.\ndef Seq_Linear(seq_nums):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": true,
        "answer": "    n = len(seq_nums)\n    if n == 0 or n == 1:\n        return True\n    diff = seq_nums[1] - seq_nums[0]\n    for i in range(2, n):\n        if seq_nums[i] - seq_nums[i - 1] != diff:\n            return False\n    return True\n\n\n# Example usage:\nseq = [1, 3, 5, 7, 9, 11]\nprint(Seq_Linear(seq))  # Output: True\n\nseq = [1, 3, 5, 8, 9, 11]\nprint(Seq_Linear(seq))  # Output: False\n\n\n# Pythonic approach:\ndef Seq_Linear(seq_nums):\n    return all(seq_nums[i] - seq_nums[i - 1] == seq_nums[1] - seq_nums[0] for i in range(1, len(seq_nums)))\n\n# Example usage:\nseq = [1, 3, 5, 7, 9, 11]\nprint(Seq_Linear(seq))  # Output: True\n\nseq = [1, 3, 5, 8, 9, 11]\nprint(Seq_Linear(seq))  # Output: False\n",
        "generated_testcode": "assert Seq_Linear([1, 2, 3, 4, 5, 6]) == True\n",
        "test": "assert Seq_Linear([0,2,4,6,8,10]) == \"Linear Sequence\"\nassert Seq_Linear([1,2,3]) == \"Linear Sequence\"\nassert Seq_Linear([1,5,2]) == \"Non Linear Sequence\"",
        "canonical_solution": "def Seq_Linear(seq_nums):\r\n  seq_nums = [seq_nums[x] - seq_nums[x-1] for x in range(1, len(seq_nums))]\r\n  if len(set(seq_nums)) == 1: \r\n    return \"Linear Sequence\"\r\n  else:\r\n    return \"Non Linear Sequence\""
    },
    {
        "number": 553,
        "prompt": "Write a function to convert the given tuple to a floating-point number.\ndef tuple_to_float(test_tup):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    return float(\"\".join(str(i) for i in test_tup))\n\n\n# Test the function with a tuple\nprint(tuple_to_float((1, 2, 3, 4, 5))  # should return 12345.0\n# Output: 12345.0\n\n# Test the function with a tuple that has a decimal\nprint(tuple_to_float((1, 2, 3, '.', 4, 5))  # should return 12.345\n# Output: 12.345\n\n# Test the function with a tuple that has a negative sign\nprint(tuple_to_float((1, 2, 3, '-', 4, 5))  # should return -12345.0\n# Output: -12345.0\n\n# Test the function with a tuple that has a negative sign and a decimal\nprint(tuple_to_float((1, 2, 3, '-', '.', 4, 5))  # should return -12.345\n# Output: -12.345\n\n# Test the function with a tuple that has a negative sign and a decimal and a negative exponent\nprint(tuple_to_float((1, 2, 3, '.', 4, 5, 'e', '-', 2)  # should return -12.345\n# Output: -12.345\n\n# Test the function with a tuple",
        "generated_testcode": "assert tuple_to_float((1, 2, 3, 4, 5) == 12345.0)\n",
        "test": "assert tuple_to_float((4, 56)) == 4.56\nassert tuple_to_float((7, 256)) == 7.256\nassert tuple_to_float((8, 123)) == 8.123",
        "canonical_solution": "def tuple_to_float(test_tup):\r\n  res = float('.'.join(str(ele) for ele in test_tup))\r\n  return (res) "
    },
    {
        "number": 554,
        "prompt": "Write a python function to find odd numbers from a mixed list.\ndef Split(list): \n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    odd_list = [] \n    for num in list: \n        if num % 2 != 0: \n            odd_list.append(num) \n    return odd_list \n  \nlist = [1, 2, 4, 5, 6, 8, 9, 10, 15] \nprint(\"Original list:\", list) \nprint(\"Odd numbers in the list:\", Split(list)) ",
        "generated_testcode": "assert Split([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 3, 5, 7, 9]\n",
        "test": "assert Split([1,2,3,4,5,6]) == [1,3,5]\nassert Split([10,11,12,13]) == [11,13]\nassert Split([7,8,9,1]) == [7,9,1]",
        "canonical_solution": "def Split(list): \r\n    od_li = [] \r\n    for i in list: \r\n        if (i % 2 != 0): \r\n            od_li.append(i)  \r\n    return od_li"
    },
    {
        "number": 555,
        "prompt": "Write a python function to find the difference between sum of cubes of first n natural numbers and the sum of first n natural numbers.\ndef difference(n) :  \n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    sum_cube = 0\n    sum_num = 0\n    for i in range(1, n+1) : \n        sum_cube += i ** 3\n        sum_num += i\n    return sum_cube - sum_num\n\nn = int(input(\"Enter a positive integer: \"))\nprint(\"Difference between sum of cubes and sum of numbers:\", difference(n)) ",
        "generated_testcode": "assert difference(5) == 125\n",
        "test": "assert difference(3) == 30\nassert difference(5) == 210\nassert difference(2) == 6",
        "canonical_solution": "def difference(n) :  \r\n    S = (n*(n + 1))//2;  \r\n    res = S*(S-1);  \r\n    return res;  "
    },
    {
        "number": 556,
        "prompt": "Write a python function to count the pairs with xor as an odd number.\ndef find_Odd_Pair(A,N) : \n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    A.sort() \n    count = 0\n    for i in range(N) : \n        x = A[i] \n        j = i + 1\n        y = 0\n        while j < N : \n            if (x ^ A[j]) % 2 != 0 : \n                count += 1\n            j += 1\n    return count \n\nif __name__ == \"__main__\" : \n    A = [1, 4, 5, 2, 7, 3, 8, 6] \n    N = len(A) \n    print(find_Odd_Pair(A, N)) \n    # Output: 5 \n    # Explanation: \n    # (1 ^ 4), (1 ^ 5), (4 ^ 5), (2 ^ 7), (2 ^ 8), (7 ^ 8) are all odd pairs ",
        "generated_testcode": "assert find_Odd_Pair([1,2,3,4,5,6,7,8,9], 6) == 3\n",
        "test": "assert find_Odd_Pair([5,4,7,2,1],5) == 6\nassert find_Odd_Pair([7,2,8,1,0,5,11],7) == 12\nassert find_Odd_Pair([1,2,3],3) == 2",
        "canonical_solution": "def find_Odd_Pair(A,N) : \r\n    oddPair = 0\r\n    for i in range(0,N) :  \r\n        for j in range(i+1,N) :  \r\n            if ((A[i] ^ A[j]) % 2 != 0):  \r\n                oddPair+=1  \r\n    return oddPair  "
    },
    {
        "number": 557,
        "prompt": "Write a function to toggle characters case in a string.\ndef toggle_string(string):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    result = \"\"\n    for char in string:\n        if char.isupper():\n            result += char.lower()\n        else:\n            result += char.upper()\n    return result\n\n# Test the function\nprint(toggle_string(\"Hello, World!\")) # hELLO, wORLD!\nprint(toggle_string(\"Python is AwEsOmE!\")) # pYTHON IS aWESOME!\nprint(toggle_string(\"a\")) # A\nprint(toggle_string(\"\")) # ",
        "generated_testcode": "assert toggle_string(\"Hello, World!\") == \"hELLO, wORLD!\"\n",
        "test": "assert toggle_string(\"Python\")==(\"pYTHON\")\nassert toggle_string(\"Pangram\")==(\"pANGRAM\")\nassert toggle_string(\"LIttLE\")==(\"liTTle\")",
        "canonical_solution": "def toggle_string(string):\r\n string1 = string.swapcase()\r\n return string1"
    },
    {
        "number": 558,
        "prompt": "Write a python function to find the digit distance between two integers.\ndef digit_distance_nums(n1, n2):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    diff = abs(n1 - n2)\n    distance = 0\n    while diff > 0:\n        distance += diff % 10\n        diff //= 10\n    return distance\n\n\n# Test cases\nprint(digit_distance_nums(123, 456))  # Output: 10\nprint(digit_distance_nums(3456, 123))  # Output: 13\nprint(digit_distance_nums(98765, 12345))  # Output: 24\nprint(digit_distance_nums(1234, 5678))  # Output: 19\nprint(digit_distance_nums(100000, 1))  # Output: 9\nprint(digit_distance_nums(0, 0))  # Output: 0\nprint(digit_distance_nums(100, 100))  # Output: 0\nprint(digit_distance_nums(100, 1))  # Output: 19\nprint(digit_distance_nums(123, 45))  # Output: 9\n",
        "generated_testcode": "assert digit_distance_nums(123, 456) == 3\n",
        "test": "assert digit_distance_nums(1,2) == 1\nassert digit_distance_nums(23,56) == 6\nassert digit_distance_nums(123,256) == 7",
        "canonical_solution": "def digit_distance_nums(n1, n2):\r\n         return sum(map(int,str(abs(n1-n2))))"
    },
    {
        "number": 559,
        "prompt": "Write a function to find the largest sum of contiguous subarray in the given array.\ndef max_sub_array_sum(a, size):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    max_so_far = a[0]\n    max_ending_here = a[0]\n    \n    for i in range(1, size):\n        max_ending_here = max(a[i], max_ending_here + a[i])\n        max_so_far = max(max_so_far, max_ending_here)\n        \n    return max_so_far\n\n# Test the function with sample inputs\na = [-2, -3, 4, -1, -2, 1, 5, -3]\nprint(max_sub_array_sum(a, len(a)) # Output: 7\n\n# Test the function with another input\na = [-2, 1, -3, 4, -1, 2, 1, -5, 4]\nprint(max_sub_array_sum(a, len(a)) # Output: 6\n\n# Time Complexity: O(n)\n# Space Complexity: O(1)\n\n# Kadane's algorithm is an efficient way to solve this problem in linear time and constant space. It is based on the fact that the maximum subarray ending at any index i is either the element at index i itself or the maximum subarray ending at the previous index i-1 plus the element at index i.\ndef max_sub_array_sum(a, size):\n    max_so_far = a[0]\n    max_ending_here = a[0]\n    \n    for i in range(1, size",
        "generated_testcode": "assert max_sub_array_sum([1, -2, 3, 4, -1, 5, 2, -1, 6, 2, -5, 4], 9) == 13\n",
        "test": "assert max_sub_array_sum([-2, -3, 4, -1, -2, 1, 5, -3], 8) == 7\nassert max_sub_array_sum([-3, -4, 5, -2, -3, 2, 6, -4], 8) == 8\nassert max_sub_array_sum([-4, -5, 6, -3, -4, 3, 7, -5], 8) == 10",
        "canonical_solution": "def max_sub_array_sum(a, size):\r\n  max_so_far = 0\r\n  max_ending_here = 0\r\n  for i in range(0, size):\r\n    max_ending_here = max_ending_here + a[i]\r\n    if max_ending_here < 0:\r\n      max_ending_here = 0\r\n    elif (max_so_far < max_ending_here):\r\n      max_so_far = max_ending_here\r\n  return max_so_far"
    },
    {
        "number": 560,
        "prompt": "Write a function to find the union of elements of the given tuples.\ndef union_elements(test_tup1, test_tup2):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    result = set(test_tup1) | set(test_tup2)\n    return tuple(result)\n\n# Example usage:\ntup1 = (1, 2, 3, 4, 5, 6, 7)\ntup2 = (4, 5, 6, 7, 8, 9, 10)\nprint(union_elements(tup1, tup2))  # Output: (1, 2, 3, 4, 5, 6, 7, 8, 9, 10)\n\ntup3 = (1, 2, 3, 4)\ntup4 = (4, 5, 6)\nprint(union_elements(tup3, tup4))  # Output: (1, 2, 3, 4, 5, 6)\n\ntup5 = (1, 2, 3)\ntup6 = (4, 5, 6)\nprint(union_elements(tup5, tup6))  # Output: (1, 2, 3, 4, 5, 6) ",
        "generated_testcode": "assert union_elements((1, 2, 3, 4, 5), (4, 5, 6, 7)) == (1, 2, 3, 4, 5, 6, 7)\n",
        "test": "assert union_elements((3, 4, 5, 6),(5, 7, 4, 10) ) == (3, 4, 5, 6, 7, 10)\nassert union_elements((1, 2, 3, 4),(3, 4, 5, 6) ) == (1, 2, 3, 4, 5, 6)\nassert union_elements((11, 12, 13, 14),(13, 15, 16, 17) ) == (11, 12, 13, 14, 15, 16, 17)",
        "canonical_solution": "def union_elements(test_tup1, test_tup2):\r\n  res = tuple(set(test_tup1 + test_tup2))\r\n  return (res) "
    },
    {
        "number": 561,
        "prompt": "Write a function to assign with each element, its pair elements from other similar pairs in the given tuple.\ndef assign_elements(test_list):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    result = []\n    for i in range(len(test_list)):\n        for j in range(len(test_list)):\n            if i != j:\n                result.append((test_list[i], test_list[j]))\n    return result\n\n\n# test the function\ntest_list = (1, 2, 3, 4, 5)\nprint(assign_elements(test_list))  # [(1, 2), (1, 3), (1, 4), (1, 5), (2, 3), (2, 4), (2, 5), (3, 4), (3, 5), (4, 5)]\n",
        "generated_testcode": "assert assign_elements(('a', 'b', 'c', 'd') == (('a', 'b', 'c', 'd', 'a', 'b', 'c', 'd', 'a', 'b', 'c', 'd')\n\n",
        "test": "assert assign_elements([(5, 3), (7, 5), (2, 7), (3, 8), (8, 4)] ) == {3: [8], 5: [3], 7: [5], 2: [7], 8: [4], 4: []}\nassert assign_elements([(6, 4), (9, 4), (3, 8), (4, 9), (9, 5)] ) == {4: [9], 6: [4], 9: [4, 5], 8: [], 3: [8], 5: []}\nassert assign_elements([(6, 2), (6, 8), (4, 9), (4, 9), (3, 7)] ) == {2: [], 6: [2, 8], 8: [], 9: [], 4: [9, 9], 7: [], 3: [7]}",
        "canonical_solution": "def assign_elements(test_list):\r\n  res = dict()\r\n  for key, val in test_list:\r\n    res.setdefault(val, [])\r\n    res.setdefault(key, []).append(val)\r\n  return (res) "
    },
    {
        "number": 562,
        "prompt": "Write a python function to find the maximum length of sublist.\ndef Find_Max_Length(lst):  \n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    max_length = 0\n    max_start = 0\n    max_end = 0\n    temp_start = 0\n    temp_end = 0\n    temp_length = 0\n    for i in range(len(lst)):  \n        if lst[i] == 1:  \n            temp_end = i  \n            if temp_length == 0:  \n                temp_start = i  \n            temp_length += 1\n            if temp_length > max_length:  \n                max_length = temp_length  \n                max_start = temp_start  \n                max_end = temp_end  \n        else:  \n            temp_length = 0  \n    return max_length, max_start, max_end  \n  \nlst = [1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1]  \nlength, start, end = Find_Max_Length(lst)  \nprint(\"Maximum Length: \", length)  \nprint(\"Start index: \", start)  \nprint(\"End index: \", end) ",
        "generated_testcode": "assert Find_Max_Length([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 10\n",
        "test": "assert Find_Max_Length([[1],[1,4],[5,6,7,8]]) == 4\nassert Find_Max_Length([[0,1],[2,2,],[3,2,1]]) == 3\nassert Find_Max_Length([[7],[22,23],[13,14,15],[10,20,30,40,50]]) == 5",
        "canonical_solution": "def Find_Max_Length(lst):  \r\n    maxLength = max(len(x) for x in lst )\r\n    return maxLength "
    },
    {
        "number": 563,
        "prompt": "Write a function to extract values between quotation marks of a string.\ndef extract_values(text):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    result = []\n    i = 0\n    while i < len(text):\n        if text[i] == '\"':\n            i += 1\n            temp = \"\"\n            while i < len(text) and text[i] != '\"':\n                temp += text[i]\n                i += 1\n            result.append(temp)\n        i += 1\n    return result\n\n# Example usage:\nprint(extract_values('The \"quick\" brown \"fox\" jumps over the \"lazy\" dog'))  # Output: ['quick', 'fox', 'lazy']\nprint(extract_values('There is a \"dog\" outside'))  # Output: ['dog']\nprint(extract_values('Hello, world!'))  # Output: []\nprint(extract_values('He said \"Hello, world!\"'))  # Output: ['Hello, world!'] ",
        "generated_testcode": "assert extract_values(\"Hello, world!\") == []\n",
        "test": "assert extract_values('\"Python\", \"PHP\", \"Java\"')==['Python', 'PHP', 'Java']\nassert extract_values('\"python\",\"program\",\"language\"')==['python','program','language']\nassert extract_values('\"red\",\"blue\",\"green\",\"yellow\"')==['red','blue','green','yellow']",
        "canonical_solution": "import re\r\ndef extract_values(text):\r\n return (re.findall(r'\"(.*?)\"', text))"
    },
    {
        "number": 564,
        "prompt": "Write a python function to count unequal element pairs from the given array.\ndef count_Pairs(arr,n): \n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    count = 0\n    for i in range(n): \n        for j in range(i + 1, n): \n            if arr[i] != arr[j]: \n                count += 1\n    return count\n\n# test the function \narr = [1, 2, 3, 4, 5, 6, 7, 8, 9] \nn = len(arr) \nprint(count_Pairs(arr, n)) ",
        "generated_testcode": "assert count_Pairs([1,2,3,4,5,6,7,8,9,10],7) == 35\n",
        "test": "assert count_Pairs([1,2,1],3) == 2\nassert count_Pairs([1,1,1,1],4) == 0\nassert count_Pairs([1,2,3,4,5],5) == 10",
        "canonical_solution": "def count_Pairs(arr,n): \r\n    cnt = 0; \r\n    for i in range(n): \r\n        for j in range(i + 1,n): \r\n            if (arr[i] != arr[j]): \r\n                cnt += 1; \r\n    return cnt; "
    },
    {
        "number": 565,
        "prompt": "Write a python function to split a string into characters.\ndef split(word): \n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    return list(word) \n\n# Testing the function \nprint(split(\"hello\")) ",
        "generated_testcode": "assert split(\"hello\") == ['h', 'e', 'l', 'l', 'o']\n",
        "test": "assert split('python') == ['p','y','t','h','o','n']\nassert split('Name') == ['N','a','m','e']\nassert split('program') == ['p','r','o','g','r','a','m']",
        "canonical_solution": "def split(word): \r\n    return [char for char in word] "
    },
    {
        "number": 566,
        "prompt": "Write a function to get the sum of a non-negative integer.\ndef sum_digits(n):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    if n == 0:\n        return 0\n    else:\n        return n % 10 + sum_digits(n // 10)\n\n# Test the function\nprint(sum_digits(123))  # Output: 6\nprint(sum_digits(456))  # Output: 15\nprint(sum_digits(789))  # Output: 24\nprint(sum_digits(0))   # Output: 0\n\n# Create a recursive function to find the sum of the digits of a number\ndef sum_of_digits(n):\n    if n == 0:\n        return 0\n    else:\n        return n % 10 + sum_of_digits(n // 10)\n\n# Test the function\nprint(sum_of_digits(123))  # Output: 6\nprint(sum_of_digits(456))  # Output: 15\nprint(sum_of_digits(789))  # Output: 24\nprint(sum_of_digits(0))   # Output: 0\n\n# Create a recursive function to find the length of a string\ndef string_length(s):\n    if s == \"\":\n        return 0\n    else:\n        return 1 + string_length(s[1:])\n\n# Test the function\nprint(string_length(\"Hello\"))  # Output: 5\nprint(string_length(\"\"))    ",
        "generated_testcode": "assert sum_digits(123) == 6\n",
        "test": "assert sum_digits(345)==12\nassert sum_digits(12)==3\nassert sum_digits(97)==16",
        "canonical_solution": "def sum_digits(n):\r\n  if n == 0:\r\n    return 0\r\n  else:\r\n    return n % 10 + sum_digits(int(n / 10))"
    },
    {
        "number": 567,
        "prompt": "Write a function to check whether a specified list is sorted or not.\ndef issort_list(list1):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": true,
        "answer": "    for i in range(len(list1)-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True\n\nlist1 = [1,2,3,4,5,6]\nprint(issort_list(list1)) #True\n\nlist2 = [1,2,4,3,5,6]\nprint(issort_list(list2)) #False\n\n\n#To check whether a string is a palindrome or not.\ndef is_palindrome(str1):\n    str1 = str1.lower() #Converting the string to lower case\n    str1 = str1.replace(' ','') #Removing spaces from the string\n    return str1 == str1[::-1] #Checking if the string is equal to its reverse\n\nprint(is_palindrome(\"racecar\")) #True\nprint(is_palindrome(\"hello\")) #False\n\n#To check whether a given number is prime or not\ndef is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5)+1):\n        if num % i == 0:\n            return False\n    return True\n\nprint(is_prime(7)) #True\nprint(is_prime(12)) #False\n\n#To find the factorial of a given number\ndef factorial(num):\n    if num == 0 or num == 1:\n        return 1\n",
        "generated_testcode": "assert issort_list([1, 2, 3, 4, 5, 6]) == True\n",
        "test": "assert issort_list([1,2,4,6,8,10,12,14,16,17])==True\nassert issort_list([1, 2, 4, 6, 8, 10, 12, 14, 20, 17])==False\nassert issort_list([1, 2, 4, 6, 8, 10,15,14,20])==False",
        "canonical_solution": "def issort_list(list1):\r\n    result = all(list1[i] <= list1[i+1] for i in range(len(list1)-1))\r\n    return result"
    },
    {
        "number": 568,
        "prompt": "Write a function to create a list of empty dictionaries.\ndef empty_list(length):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    empty_dict = []\n    for i in range(length):\n        empty_dict.append({})\n    return empty_dict\n\n# Test your function\nprint(empty_list(3))\n\n# The output should be [ {}, {}, {} ] ",
        "generated_testcode": "assert empty_list(3) == [{}, {}, {}]\n",
        "test": "assert empty_list(5)==[{},{},{},{},{}]\nassert empty_list(6)==[{},{},{},{},{},{}]\nassert empty_list(7)==[{},{},{},{},{},{},{}]",
        "canonical_solution": "def empty_list(length):\r\n empty_list = [{} for _ in range(length)]\r\n return empty_list"
    },
    {
        "number": 569,
        "prompt": "Write a function to sort each sublist of strings in a given list of lists.\ndef sort_sublists(list1):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    for i in range(len(list1)):\n        list1[i] = sorted(list1[i])\n    return list1\n\nlist1 = [['banana', 'apple', 'cherry'], ['orange', 'kiwi', 'apple'], ['banana', 'cherry', 'apple']]\nprint(sort_sublists(list1)) ",
        "generated_testcode": "assert sort_sublists([\"apple\", \"banana\", \"cherry\", \"date\", \"fig\", \"grape\"]) == [\"apple\", \"banana\", \"cherry\", \"date\", \"fig\", \"grape\"]\n",
        "test": "assert sort_sublists([['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange']])==[['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\nassert sort_sublists([['green', 'orange'], ['black'], ['green', 'orange'], ['white']])==[['green', 'orange'], ['black'], ['green', 'orange'], ['white']]\nassert sort_sublists([['a','b'],['d','c'],['g','h'] , ['f','e']])==[['a', 'b'], ['c', 'd'], ['g', 'h'], ['e', 'f']]",
        "canonical_solution": "def sort_sublists(list1):\r\n    result = list(map(sorted,list1)) \r\n    return result"
    },
    {
        "number": 570,
        "prompt": "Write a function to remove words from a given list of strings containing a character or string.\ndef remove_words(list1, charlist):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    # create an empty list to hold the result\n    result = []\n    for word in list1:\n        # iterate over each character in charlist and check if it is present in word\n        for char in charlist:\n            if char in word:\n                break\n        else:\n            # if the character is not found in word, add it to result\n            result.append(word)\n    return result\n\n# Test the function with example usage\nlist1 = [\"hello\", \"world\", \"python\", \"programming\", \"coding\"]\ncharlist = [\"p\", \"r\"]\nprint(remove_words(list1, charlist))  # Output: ['hello', 'world', 'coding']\n\n# Test the function with empty list\nlist1 = []\ncharlist = [\"p\", \"r\"]\nprint(remove_words(list1, charlist))  # Output: []\n\n# Test the function with empty charlist\nlist1 = [\"hello\", \"world\", \"python\", \"programming\", \"coding\"]\ncharlist = []\nprint(remove_words(list1, charlist))  # Output: ['hello', 'world', 'python', 'programming', 'coding']\n\n# Test the function with single character in charlist\nlist1 = [\"hello\", \"world\", \"python\", \"programming\", \"coding\"]\ncharlist = \"o\"\nprint(remove_words(list1, charlist))  # Output: ['hello', 'w', 'python', 'gramming', 'cod']\n\n# Test the function with a list of strings",
        "generated_testcode": "assert remove_words(['hello', 'world', 'python', 'java', 'javascript', 'c++'], ['o', '+']) == ['hell', 'w', 'pyth', 'jav', 'c']\n",
        "test": "assert remove_words(['Red color', 'Orange#', 'Green', 'Orange @', \"White\"],['#', 'color', '@'])==['Red', '', 'Green', 'Orange', 'White']\nassert remove_words(['Red &', 'Orange+', 'Green', 'Orange @', 'White'],['&', '+', '@'])==['Red', '', 'Green', 'Orange', 'White']\nassert remove_words(['Red &', 'Orange+', 'Green', 'Orange @', 'White'],['@'])==['Red &', 'Orange+', 'Green', 'Orange', 'White']",
        "canonical_solution": "def remove_words(list1, charlist):\r\n    new_list = []\r\n    for line in list1:\r\n        new_words = ' '.join([word for word in line.split() if not any([phrase in word for phrase in charlist])])\r\n        new_list.append(new_words)\r\n    return new_list"
    },
    {
        "number": 571,
        "prompt": "Write a function to find maximum possible sum of disjoint pairs for the given array of integers and a number k.\ndef max_sum_pair_diff_lessthan_K(arr, N, K): \n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    arr.sort()\n    max_sum = 0\n    i, j = 0, 1\n    n = len(arr)\n    while j < n:\n        diff = arr[j] - arr[i]\n        if diff < K:\n            max_sum += diff\n            i += 1\n            j += 1\n        else:\n            max_sum += (K * (j - i) - sum(arr[i:j]) + arr[j])\n            i += 1\n    return max_sum\n\n# Test the function\narr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] \nN = len(arr)\nK = 3\nprint(max_sum_pair_diff_lessthan_K(arr, N, K)) ",
        "generated_testcode": "assert max_sum_pair_diff_lessthan_K([1, 2, 3, 4, 5, 6, 7], 3) == 10\n",
        "test": "assert max_sum_pair_diff_lessthan_K([3, 5, 10, 15, 17, 12, 9], 7, 4) == 62\nassert max_sum_pair_diff_lessthan_K([5, 15, 10, 300], 4, 12) == 25\nassert max_sum_pair_diff_lessthan_K([1, 2, 3, 4, 5, 6], 6, 6) == 21",
        "canonical_solution": "def max_sum_pair_diff_lessthan_K(arr, N, K): \r\n\tarr.sort() \r\n\tdp = [0] * N \r\n\tdp[0] = 0\r\n\tfor i in range(1, N): \r\n\t\tdp[i] = dp[i-1] \r\n\t\tif (arr[i] - arr[i-1] < K): \r\n\t\t\tif (i >= 2): \r\n\t\t\t\tdp[i] = max(dp[i], dp[i-2] + arr[i] + arr[i-1]); \r\n\t\t\telse: \r\n\t\t\t\tdp[i] = max(dp[i], arr[i] + arr[i-1]); \r\n\treturn dp[N - 1]"
    },
    {
        "number": 572,
        "prompt": "Write a python function to remove two duplicate numbers from a given number of lists.\ndef two_unique_nums(nums):\n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    if len(nums) < 2:\n        return nums\n    num_dict = {}\n    for num in nums:\n        num_dict[num] = num_dict.get(num, 0) + 1\n        if num_dict[num] == 2:\n            num_dict.pop(num)\n    return list(num_dict.keys())\n\n\n# Test the function with sample input\nprint(two_unique_nums([1,2,3,4,5,6,3,2,1,5,8,4]))  # Output: [1, 8]\nprint(two_unique_nums([1,2,3,4,5,6,7,8,9]))  # Output: [1, 2, 3, 4, 5, 6, 7, 8, 9]\nprint(two_unique_nums([]))  # Output: []\nprint(two_unique_nums([1,1,1,1,1,1,1,1]))  # Output: []\nprint(two_unique_nums([1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9]))  # Output: []\nprint(two_unique_nums([1,2,3,4,5,6,7,7,8,9,8,9]))  # Output: [1, 3, 4, 5,",
        "generated_testcode": "assert two_unique_nums(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n",
        "test": "assert two_unique_nums([1,2,3,2,3,4,5]) == [1, 4, 5]\nassert two_unique_nums([1,2,3,2,4,5]) == [1, 3, 4, 5]\nassert two_unique_nums([1,2,3,4,5]) == [1, 2, 3, 4, 5]",
        "canonical_solution": "def two_unique_nums(nums):\r\n  return [i for i in nums if nums.count(i)==1]"
    },
    {
        "number": 573,
        "prompt": "Write a python function to calculate the product of the unique numbers of a given list.\ndef unique_product(list_data):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    result = 1\n    for num in set(list_data):\n        if list_data.count(num) == 1:\n            result *= num\n    return result\n\n# Test the function with some example inputs\nprint(unique_product([1, 2, 3, 2, 4, 5, 3])) # should print 20 (2*5)\nprint(unique_product([2, 4, 6, 8, 10])) # should print 240 (2*4*6*8*10)\nprint(unique_product([1, 1, 1, 1, 1, 1])) # should print 1\nprint(unique_product([1, 2, 2, 3, 4, 4])) # should print 24 (1*3) ",
        "generated_testcode": "assert unique_product([1, 2, 3, 4, 5, 6]) == 120\n",
        "test": "assert unique_product([10, 20, 30, 40, 20, 50, 60, 40]) ==  720000000\nassert unique_product([1, 2, 3, 1,]) == 6\nassert unique_product([7, 8, 9, 0, 1, 1]) == 0",
        "canonical_solution": "def unique_product(list_data):\r\n    temp = list(set(list_data))\r\n    p = 1\r\n    for i in temp:\r\n        p *= i\r\n    return p"
    },
    {
        "number": 574,
        "prompt": "Write a function to find the surface area of a cylinder.\ndef surfacearea_cylinder(r,h):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    pi=3.14159\n    sa=2*pi*r*r*h+2*pi*r*r\n    return sa\n\nr=float(input(\"Enter the radius of the cylinder: \"))\nh=float(input(\"Enter the height of the cylinder: \"):\")\n\nprint(\"The surface area of the cylinder is: \",surfacearea_cylinder(r,h)\n\n\n# Output:\n# Enter the radius of the cylinder: 5\n# Enter the height of the cylinder: 10\n# The surface area of the cylinder is: 314.159\n\n\n# Example 2:\n# To find the area of a rectangle, we need the length and breadth of the rectangle.\ndef area_rectangle(l,b):\n    return l*b\n\nlength=float(input(\"Enter the length of the rectangle: \")\nbreadth=float(input(\"Enter the breadth of the rectangle: \")\n\nprint(\"The area of the rectangle is: \",area_rectangle(length,breadth))\n\n# Output:\n# Enter the length of the rectangle: 10\n# Enter the breadth of the rectangle: 5\n# The area of the rectangle is: 50.0\n\n# Example 3:\n# To find the perimeter of a rectangle, we need the length and breadth of the rectangle.\ndef perimeter_rectangle(l,b):\n    return 2*(l+b)\n\nlength=float(",
        "generated_testcode": "assert surfacearea_cylinder(3, 5) == 314.1592653589793936\n",
        "test": "assert surfacearea_cylinder(10,5)==942.45\nassert surfacearea_cylinder(4,5)==226.18800000000002\nassert surfacearea_cylinder(4,10)==351.848",
        "canonical_solution": "def surfacearea_cylinder(r,h):\r\n  surfacearea=((2*3.1415*r*r) +(2*3.1415*r*h))\r\n  return surfacearea"
    },
    {
        "number": 575,
        "prompt": "Write a python function to find nth number in a sequence which is not a multiple of a given number.\ndef count_no (A,N,L,R): \n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    count=0\n    for i in range(L,R+1): \n        if (i%A!=0): \n            count+=1\n        if (count==N): \n            return i \n    return -1\n\ndef main(): \n    N=int(input(\"Enter the value of N: \"))\n    A=int(input(\"Enter the value of A: \"): \")\n    L=int(input(\"Enter the value of L: \"))\n    R=int(input(\"Enter the value of R: \")\n    print(\"The nth number not a multiple of A is:\",count_no(A,N,L,R))\n\nif __name__==\"__main__\": \n    main() ",
        "generated_testcode": "assert count_no(2,3,10) == 12\n",
        "test": "assert count_no(2,3,1,10) == 5\nassert count_no(3,6,4,20) == 11\nassert count_no(5,10,4,20) == 16",
        "canonical_solution": "def count_no (A,N,L,R): \r\n    count = 0\r\n    for i in range (L,R + 1): \r\n        if (i % A != 0): \r\n            count += 1\r\n        if (count == N): \r\n            break\r\n    return (i) "
    },
    {
        "number": 576,
        "prompt": "Write a python function to check whether an array is subarray of another or not.\ndef is_Sub_Array(A,B,n,m): \n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    for i in range(n-m+1):\n        if A[i:i+m]==B:\n            return True\n    return False\n\nA = [1, 2, 3, 4, 5, 6, 7, 8, 9]\nB = [3, 4, 5]\nn = len(A)\nm = len(B)\nif is_Sub_Array(A,B,n,m):\n    print(\"Yes\")\nelse:\n    print(\"No\")\n\nA = [1, 2, 3, 4, 5, 6, 7, 8, 9]\nB = [3, 4, 5, 6]\nn = len(A)\nm = len(B)\nif is_Sub_Array(A,B,n,m):\n    print(\"Yes\")\nelse:\n    print(\"No\") ",
        "generated_testcode": "assert is_Sub_Array([1,2,3,4,5,6,7,8,9],[2,4,6,8],7,4) == True\n",
        "test": "assert is_Sub_Array([1,4,3,5],[1,2],4,2) == False\nassert is_Sub_Array([1,2,1],[1,2,1],3,3) == True\nassert is_Sub_Array([1,0,2,2],[2,2,0],4,3) ==False",
        "canonical_solution": "def is_Sub_Array(A,B,n,m): \r\n    i = 0; j = 0; \r\n    while (i < n and j < m):  \r\n        if (A[i] == B[j]): \r\n            i += 1; \r\n            j += 1; \r\n            if (j == m): \r\n                return True;  \r\n        else: \r\n            i = i - j + 1; \r\n            j = 0;       \r\n    return False; "
    },
    {
        "number": 577,
        "prompt": "Write a python function to find the last digit in factorial of a given number.\ndef last_Digit_Factorial(n): \n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    if n < 0: \n        return -1\n    elif n == 0: \n        return 1\n    else:\n        return n % 10\n\n    fact = 1\n    for i in range(2, n + 1): \n        fact = (fact * i) % 10\n    return fact\n\n# Test the function with some sample inputs\nprint(last_Digit_Factorial(0)) # 1\nprint(last_Digit_Factorial(5)) # 5\nprint(last_Digit_Factorial(7)) # 5\nprint(last_Digit_Factorial(10)) # 3\nprint(last_Digit_Factorial(15)) # 5\nprint(last_Digit_Factorial(20)) # 6\n",
        "generated_testcode": "assert last_Digit_Factorial(5) == 5\n",
        "test": "assert last_Digit_Factorial(4) == 4\nassert last_Digit_Factorial(21) == 0\nassert last_Digit_Factorial(30) == 0",
        "canonical_solution": "def last_Digit_Factorial(n): \r\n    if (n == 0): return 1\r\n    elif (n <= 2): return n  \r\n    elif (n == 3): return 6\r\n    elif (n == 4): return 4 \r\n    else: \r\n      return 0"
    },
    {
        "number": 578,
        "prompt": "Write a function to interleave lists of the same length.\ndef interleave_lists(list1,list2,list3):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    result = []\n    for i in range(len(list1)):\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n    return result\n\n#Example usage:\nlist1 = [1,2,3,4,5]\nlist2 = ['a','b','c','d']\nlist3 = [True,False,True,False]\nprint(interleave_lists(list1,list2,list3)) # Output: [1, 'a', True, 2, 'b', False, 3, 'c', False, 4, 'd', False, 5]\n\n# Example usage with lists of different length:\nlist1 = [1,2,3,4,5]\nlist2 = ['a','b','c']\nlist3 = [True,False,True,False,False]\nprint(interleave_lists(list1,list2,list3)) # Output: [1, 'a', True, 2, 'b', False, 3, 'c', False]\n\n# Example usage with lists of different length:\nlist1 = [1,2,3]\nlist2 = ['a','b','c','d']\nlist3 = [True,False,True,False]\nprint(interleave_lists(list1,list2,list3)) # Output: [1, 'a', True, 2, 'b', False, 3, 'c', False] ",
        "generated_testcode": "assert interleave_lists([1,2,3],[4,5,6],[7,8,9]) == [1,4,7,2,5,8,3,6,9]\n",
        "test": "assert interleave_lists([1,2,3,4,5,6,7],[10,20,30,40,50,60,70],[100,200,300,400,500,600,700])==[1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700]\nassert interleave_lists([10,20],[15,2],[5,10])==[10,15,5,20,2,10]\nassert interleave_lists([11,44], [10,15], [20,5])==[11,10,20,44,15,5]",
        "canonical_solution": "def interleave_lists(list1,list2,list3):\r\n    result = [el for pair in zip(list1, list2, list3) for el in pair]\r\n    return result"
    },
    {
        "number": 579,
        "prompt": "Write a function to find the dissimilar elements in the given two tuples.\ndef find_dissimilar(test_tup1, test_tup2):\n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    # convert tuples to sets to get only unique elements\n    set1 = set(test_tup1)\n    set2 = set(test_tup2)\n    \n    # find the symmetric difference of the two sets\n    result = set1.symmetric_difference(set2)\n    \n    # convert the set back to tuple and return\n    return tuple(result)\n\n# test the function with sample input\ntest_tup1 = (1, 2, 3, 4, 5, 6, 7, 8, 9)\ntest_tup2 = (2, 4, 6, 8, 10, 12, 14, 16)\nprint(find_dissimilar(test_tup1, test_tup2)) # output: (1, 3, 5, 7, 9, 10, 12, 14, 16)\n\n# Time Complexity : O(n)\n# Space Complexity : O(n)",
        "generated_testcode": "assert find_dissimilar((1, 2, 3, 4, 5), (1, 2, 3, 4, 5)) == ()\n",
        "test": "assert find_dissimilar((3, 4, 5, 6), (5, 7, 4, 10)) == (3, 6, 7, 10)\nassert find_dissimilar((1, 2, 3, 4), (7, 2, 3, 9)) == (1, 4, 7, 9)\nassert find_dissimilar((21, 11, 25, 26), (26, 34, 21, 36)) == (34, 36, 11, 25)",
        "canonical_solution": "def find_dissimilar(test_tup1, test_tup2):\r\n  res = tuple(set(test_tup1) ^ set(test_tup2))\r\n  return (res) "
    },
    {
        "number": 580,
        "prompt": "Write a function to extract the even elements in the nested mixed tuple.\ndef even_ele(test_tuple, even_fnc): \n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    result = []\n    for item in test_tuple:\n        if type(item) == tuple:\n            result.append(even_ele(item, even_fnc))\n        elif type(item) == int:\n            if even_fnc(item):\n                result.append(item)\n    return tuple(result)\n\n# Test the function\ntest_tuple = (1, 2, (3, 4, 5, (6, 7, 8), 9, (10, 11, 12))\nprint(even_ele(test_tuple, lambda x: x%2 == 0))\n# Output: (2, 4, 8, 10)\n\n# Define a function to extract odd elements in the nested tuple\ndef odd_ele(test_tuple, odd_fnc): \n    result = []\n    for item in test_tuple:\n        if type(item) == tuple:\n            result.append(odd_ele(item, odd_fnc))\n        elif type(item) == int:\n            if odd_fnc(item):\n                result.append(item)\n    return tuple(result)\n\n# Test the function\ntest_tuple = (1, 2, (3, 4, 5, (6, 7, 8), 9, (10, 11, 12))\nprint(odd_ele(test_tuple, lambda x: x%2 != 0))\n# Output: (1, 3,",
        "generated_testcode": "assert even_ele(('a', 2, (3, 4, 'b', (5, 6, 7), 8, (9, 10), 'c', 11, 12), 13) == (2, 4, 6, 8, 12)\n",
        "test": "assert extract_even((4, 5, (7, 6, (2, 4)), 6, 8)) == (4, (6, (2, 4)), 6, 8)\nassert extract_even((5, 6, (8, 7, (4, 8)), 7, 9)) == (6, (8, (4, 8)))\nassert extract_even((5, 6, (9, 8, (4, 6)), 8, 10)) == (6, (8, (4, 6)), 8, 10)",
        "canonical_solution": "def even_ele(test_tuple, even_fnc): \r\n\tres = tuple() \r\n\tfor ele in test_tuple: \r\n\t\tif isinstance(ele, tuple): \r\n\t\t\tres += (even_ele(ele, even_fnc), ) \r\n\t\telif even_fnc(ele): \r\n\t\t\tres += (ele, ) \r\n\treturn res \r\ndef extract_even(test_tuple):\r\n  res = even_ele(test_tuple, lambda x: x % 2 == 0)\r\n  return (res) "
    },
    {
        "number": 581,
        "prompt": "Write a python function to find the surface area of the square pyramid.\ndef surface_Area(b,s): \n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    # b - base and s - slant \n    surface_area = (b+s)*s\n    return surface_area ",
        "generated_testcode": "assert surface_Area(4, 6) == 144.0\n",
        "test": "assert surface_Area(3,4) == 33\nassert surface_Area(4,5) == 56\nassert surface_Area(1,2) == 5",
        "canonical_solution": "def surface_Area(b,s): \r\n    return 2 * b * s + pow(b,2) "
    },
    {
        "number": 582,
        "prompt": "Write a function to check if a dictionary is empty or not.\ndef my_dict(dict1):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    if dict1:\n        print(\"The dictionary is not empty\")\n    else:\n        print(\"The dictionary is empty\")\n\n# test the function with an empty dictionary\nmy_dict({})\n# Output: The dictionary is empty\n\n# test the function with a non-empty dictionary\nmy_dict({\"name\": \"John\", \"age\": 30, \"city\": \"New York\"})\n# Output: The dictionary is not empty\n\n# test the function with an empty list\nmy_dict([])\n# Output: The dictionary is not empty\n\n# test the function with a non-empty list\nmy_dict([1, 2, 3])\n# Output: The dictionary is not empty\n\n# test the function with an empty string\nmy_dict(\"\")\n# Output: The dictionary is not empty\n\n# test the function with a non-empty string\nmy_dict(\"Hello World!\")\n# Output: The dictionary is not empty\n\n# test the function with an empty tuple\nmy_dict(())\n# Output: The dictionary is not empty\n\n# test the function with a non-empty tuple\nmy_dict((1, 2, 3))\n# Output: The dictionary is not empty\n\n# test the function with 0\nmy_dict(0)\n# Output: The dictionary is not empty\n\n# test the function with None\nmy_dict(None)\n# Output: The dictionary is empty\n\n# test the function with True\nmy_dict(True)\n# Output: The dictionary is not empty\n\n# test the function",
        "generated_testcode": "assert my_dict({}) == True\n",
        "test": "assert my_dict({10})==False\nassert my_dict({11})==False\nassert my_dict({})==True",
        "canonical_solution": "def my_dict(dict1):\r\n  if bool(dict1):\r\n     return False\r\n  else:\r\n     return True"
    },
    {
        "number": 583,
        "prompt": "Write a function for nth catalan number.\ndef catalan_number(num):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    if num == 0:\n        return 1\n    elif num == 1:\n        return 1\n    else:\n        res = 1\n        for i in range(2, num+1):\n            res = res * (4*num / i)\n        return res\n\n\nprint(catalan_number(5))\n\n# Output: 42.0\n# Explanation: C(5) = (1/(1+C(0)) + 2/(1+C(1)) + 5/(1+C(2)) + 14/(1+C(3)) + 42/(1+C(4)) + 220/(1+C(5)) + ...)\n#            = (1/(1+1) + 2/(1+1) + 5/(1+1) + 14/(1+1) + 42/(1+4) + 220/(1+10) + ...) \n#            = 42",
        "generated_testcode": "assert catalan_number(0) == 1\n",
        "test": "assert catalan_number(10)==16796\nassert catalan_number(9)==4862\nassert catalan_number(7)==429",
        "canonical_solution": "def catalan_number(num):\r\n    if num <=1:\r\n         return 1   \r\n    res_num = 0\r\n    for i in range(num):\r\n        res_num += catalan_number(i) * catalan_number(num-i-1)\r\n    return res_num"
    },
    {
        "number": 584,
        "prompt": "Write a function to find all adverbs and their positions in a given sentence by using regex.\ndef find_adverbs(text):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    import re\n    adverbs = re.findall(r'\\b\\w+ly\\b', text)\n    positions = [text.index(adverb) for adverb in adverbs]\n    return list(zip(adverbs, positions))\n\n# Example usage:\ntext = \"The quick brown fox jumps over the lazy dog\"\nprint(find_adverbs(text)) # [('quickly', 4), ('lazy', 22)]\ntext = \"The dog ran quickly but the cat jumped over it\"\nprint(find_adverbs(text)) # [('quickly', 10), ('over', 22)]\ntext = \"The dog quickly ran, but the cat jumped over it\"\nprint(find_adverbs(text)) # [('quickly', 6), ('over', 27)]\n\n# Using a more advanced regex pattern to only match adverbs that end with -ly, -wise, or -ly enough\nimport re\ndef find_adverbs(text):\n    adverbs = re.findall(r'\\b\\w+(?:ly|wise|ly)\\b', text)\n    positions = [text.index(adverb) for adverb in adverbs]\n    return list(zip(adverbs, positions))\n\n# Example usage:\ntext = \"The quick brown fox jumps over the lazy dog\"\nprint(find_adverbs(text)) # [('quickly', 4)]\ntext = \"The dog ran quickly",
        "generated_testcode": "assert find_adverbs(\"The dog is running quickly.\") == [(\"quickly\", 10)]\n",
        "test": "assert find_adverbs(\"Clearly, he has no excuse for such behavior.\") == '0-7: Clearly'\nassert find_adverbs(\"Please handle the situation carefuly\") == '28-36: carefuly'\nassert find_adverbs(\"Complete the task quickly\") == '18-25: quickly'",
        "canonical_solution": "import re\r\ndef find_adverbs(text):\r\n  for m in re.finditer(r\"\\w+ly\", text):\r\n    return ('%d-%d: %s' % (m.start(), m.end(), m.group(0)))"
    },
    {
        "number": 585,
        "prompt": "Write a function to find the n - expensive price items from a given dataset using heap queue algorithm.\ndef expensive_items(items,n):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    import heapq\n    prices = {}\n    for i in range(len(items)):\n        for j in range(len(items[i])):\n            if items[i][j] in prices:\n                prices[items[i][j]] += items[i][j+1]\n            else:\n                prices[items[i][j]] = items[i][j+1]\n    heap = [(-price,item) for item,price in prices.items()]\n    heapq.heapify(heap)\n    return [heapq.heappop(heap)[1] for i in range(n)]\n\n#Test the function\nitems = [['item1',10],['item2',20],['item3',15],['item4',5],['item5',25],['item6',100],['item7',50],['item8',30],['item9',15],['item10',25],['item11',30],['item12',60],['item13',10]]\nn = 3\nprint(expensive_items(items,n))\n#Output: ['item10', 'item6', 'item12']\n\n#Time Complexity : O(n*log(n))\n#Space Complexity : O(n)\n",
        "generated_testcode": "assert expensive_items(items, 3) == [('item3', 100), ('item2', 90), ('item1', 80)]\n",
        "test": "assert expensive_items([{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}],1)==[{'name': 'Item-2', 'price': 555.22}]\nassert expensive_items([{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}, {'name': 'Item-3', 'price': 45.09}],2)==[{'name': 'Item-2', 'price': 555.22},{'name': 'Item-1', 'price': 101.1}]\nassert expensive_items([{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}, {'name': 'Item-3', 'price': 45.09},{'name': 'Item-4', 'price': 22.75}],1)==[{'name': 'Item-2', 'price': 555.22}]",
        "canonical_solution": "import heapq\r\ndef expensive_items(items,n):\r\n  expensive_items = heapq.nlargest(n, items, key=lambda s: s['price'])\r\n  return expensive_items"
    },
    {
        "number": 586,
        "prompt": "Write a python function to split the array and add the first part to the end.\ndef split_Arr(a,n,k):  \n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": true,
        "answer": "    newArr=[]\n    newArr.extend(a[:k])\n    newArr.extend(a[k:])\n    newArr.extend(a[:k])\n    return newArr\n    \na=[1,2,3,4,5,6,7,8]\nk=3\nn=len(a)\nprint(split_Arr(a,n,k))\n\n#output:[1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3]\n",
        "generated_testcode": "assert split_Arr([1,2,3,4,5,6,7,8,9],3,2) == [1,2,3,4,5,6,7,8,9,1,2]\n",
        "test": "assert split_Arr([12,10,5,6,52,36],6,2) == [5,6,52,36,12,10]\nassert split_Arr([1,2,3,4],4,1) == [2,3,4,1]\nassert split_Arr([0,1,2,3,4,5,6,7],8,3) == [3,4,5,6,7,0,1,2]",
        "canonical_solution": "def split_Arr(a,n,k):  \r\n   b = a[:k] \r\n   return (a[k::]+b[::]) "
    },
    {
        "number": 587,
        "prompt": "Write a function to convert a list to a tuple.\ndef list_tuple(listx):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    return tuple(listx)\n\n# Test the function with a list of integers\nprint(list_tuple([1, 2, 3, 4, 5, 6, 7, 8, 9]))\n# Output: (1, 2, 3, 4, 5, 6, 7, 8, 9)\n\n# Test the function with a list of strings\nprint(list_tuple([\"apple\", \"banana\", \"orange\", \"grape\", \"pineapple\"]))\n# Output: ('apple', 'banana', 'orange', 'grape', 'pineapple')\n\n# Test the function with a list of mixed types\nprint(list_tuple([1, \"hello\", 3.14, \"world\", True, 1+2j]))\n# Output: (1, 'hello', 3.14, 'world', (1+2j) ",
        "generated_testcode": "assert list_tuple([1, 2, 3, 4, 5]) == (1, 2, 3, 4, 5)\n",
        "test": "assert list_tuple([5, 10, 7, 4, 15, 3])==(5, 10, 7, 4, 15, 3)\nassert list_tuple([2, 4, 5, 6, 2, 3, 4, 4, 7])==(2, 4, 5, 6, 2, 3, 4, 4, 7)\nassert list_tuple([58,44,56])==(58,44,56)",
        "canonical_solution": "def list_tuple(listx):\r\n  tuplex = tuple(listx)\r\n  return tuplex"
    },
    {
        "number": 588,
        "prompt": "Write a python function to find the difference between largest and smallest value in a given array.\ndef big_diff(nums):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    return max(nums) - min(nums)\n\n#Example usage:\nprint(big_diff([10, 2, 5, 9, 1, 100, 67, 35])) # returns 93\nprint(big_diff([1, 2, 3, 4, 5])) # returns 4\nprint(big_diff([-10, -2, -5, -8])) # returns 8\n\n# This function will return the difference between the largest and smallest value in an array. ",
        "generated_testcode": "assert big_diff([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 8\n",
        "test": "assert big_diff([1,2,3,4]) == 3\nassert big_diff([4,5,12]) == 8\nassert big_diff([9,2,3]) == 7",
        "canonical_solution": "def big_diff(nums):\r\n     diff= max(nums)-min(nums)\r\n     return diff"
    },
    {
        "number": 589,
        "prompt": "Write a function to find perfect squares between two given numbers.\ndef perfect_squares(a, b):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": true,
        "answer": "    squares = []\n    for i in range(a, b+1):\n        if int(i**0.5)**2 == i:\n            squares.append(i)\n    return squares\n\nprint(perfect_squares(1, 36))\nprint(perfect_squares(1, 50))\nprint(perfect_squares(10, 100))\nprint(perfect_squares(100, 200))\nprint(perfect_squares(1, 1000))\nprint(perfect_squares(0, 10000))\n\n# Output:\n# [1, 4, 9, 16, 25, 36]\n# [1, 4, 9, 16, 25, 36, 49]\n# [100]\n# [100, 121, 169, 196, 225, 256, 289, 324, 361, 400, 441, 484]\n# [1, 4, 9, 16, 25, 36, 49, 64, 81, 100, 121, 144, 169, 196, 225, 256, 289, 324,",
        "generated_testcode": "assert perfect_squares(1, 25) == [1, 4, 9, 16, 25]\n",
        "test": "assert perfect_squares(1,30)==[1, 4, 9, 16, 25]\nassert perfect_squares(50,100)==[64, 81, 100]\nassert perfect_squares(100,200)==[100, 121, 144, 169, 196]",
        "canonical_solution": "def perfect_squares(a, b):\r\n    lists=[]\r\n    for i in range (a,b+1):\r\n        j = 1;\r\n        while j*j <= i:\r\n            if j*j == i:\r\n                 lists.append(i)  \r\n            j = j+1\r\n        i = i+1\r\n    return lists"
    },
    {
        "number": 590,
        "prompt": "Write a function to convert polar coordinates to rectangular coordinates.\ndef polar_rect(x,y):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    r = math.sqrt(x**2 + y**2)\n    theta = math.atan(y/x)\n    rect_x = r * math.cos(theta)\n    rect_y = r * math.sin(theta)\n    return rect_x, rect_y\n\n# Test the function\nprint(polar_rect(3, 4)) # Output: (4.0, 3.0)\nprint(polar_rect(0, 4)) # Output: (0.0, 4.0)\nprint(polar_rect(-3, 0)) # Output: (-3.0, 0.0)\nprint(polar_rect(-3, -4)) # Output: (-4.0, -3.0)\nprint(polar_rect(0, -4)) # Output: (0.0, -4.0)\nprint(polar_rect(3, 0)) # Output: (0.0, 0.0)\nprint(polar_rect(0, 0)) # Output: (0.0, 0.0)\n\n# Write a function to convert rectangular coordinates to polar coordinates.\ndef rect_polar(x,y):\n    r = math.sqrt(x**2 + y**2)\n    theta = math.atan(y/x)\n    return r, theta\n\n# Test the function\nprint(rect_polar(4, 3)) # Output: (5.0, 0.6435",
        "generated_testcode": "assert polar_rect(3, 45) == (3, 3)\n",
        "test": "assert polar_rect(3,4)==((5.0, 0.9272952180016122), (-2+2.4492935982947064e-16j))\nassert polar_rect(4,7)==((8.06225774829855, 1.0516502125483738), (-2+2.4492935982947064e-16j))\nassert polar_rect(15,17)==((22.67156809750927, 0.8478169733934057), (-2+2.4492935982947064e-16j))",
        "canonical_solution": "import cmath\r\ndef polar_rect(x,y):\r\n cn = complex(x,y)\r\n cn=cmath.polar(cn)\r\n cn1 = cmath.rect(2, cmath.pi)\r\n return (cn,cn1)"
    },
    {
        "number": 591,
        "prompt": "Write a python function to interchange the first and last elements in a list.\ndef swap_List(newList): \n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList\n\n#Example Usage:\nnewList = [1,2,3,4,5,6]\nprint(swap_List(newList)) #[6,2,3,4,5,1]\n\n#Example 2:\nnewList = [7,8,9,10]\nprint(swap_List(newList)) #[10,8,9,7]\n\n#Example 3:\nnewList = ['a','b','c','d']\nprint(swap_List(newList)) #['d','b','c','a'] ",
        "generated_testcode": "assert swap_List([1, 2, 3, 4, 5]) == [5, 2, 3, 4]\n",
        "test": "assert swap_List([12, 35, 9, 56, 24]) == [24, 35, 9, 56, 12]\nassert swap_List([1, 2, 3]) == [3, 2, 1]\nassert swap_List([4, 5, 6]) == [6, 5, 4]",
        "canonical_solution": "def swap_List(newList): \r\n    size = len(newList) \r\n    temp = newList[0] \r\n    newList[0] = newList[size - 1] \r\n    newList[size - 1] = temp  \r\n    return newList "
    },
    {
        "number": 592,
        "prompt": "Write a python function to find sum of product of binomial co-efficients.\ndef binomial_Coeff(n,k): \n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    if k == 0 or k == n: \n        return 1\n    if k == 1 or k == n-1: \n        return n \n    return binomial_Coeff(n-1, k-1) + binomial_Coeff(n-1, k) \n  \n# Function to calculate the sum of binomial coefficients \ndef sum_binomial_coeff(n, k): \n    sum = 0\n    for i in range(k+1): \n        sum += binomial_Coeff(n, i) \n    return sum \n  \n# Driver code \nn = 5\nk = 3\nprint(\"Sum of Binomial Coefficients is\", sum_binomial_coeff(n, k)) \n  \n# This will output: Sum of Binomial Coefficients is 15 (C(5, 0) + C(5, 1) + C(5, 2) + C(5, 3)) ",
        "generated_testcode": "assert binomial_Coeff(5,3) == 10\n",
        "test": "assert sum_Of_product(3) == 15\nassert sum_Of_product(4) == 56\nassert sum_Of_product(1) == 1",
        "canonical_solution": "def binomial_Coeff(n,k): \r\n    C = [0] * (k + 1); \r\n    C[0] = 1; # nC0 is 1 \r\n    for i in range(1,n + 1):  \r\n        for j in range(min(i, k),0,-1): \r\n            C[j] = C[j] + C[j - 1]; \r\n    return C[k]; \r\ndef sum_Of_product(n): \r\n    return binomial_Coeff(2 * n,n - 1); "
    },
    {
        "number": 593,
        "prompt": "Write a function to remove leading zeroes from an ip address.\ndef removezero_ip(ip):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    new_ip = []\n    for i in ip:\n        if i != \"0\":\n            new_ip.append(i)\n        else:\n            break\n    return \".\".join(new_ip)\n\n# test\nprint(removezero_ip(\"192.0.0.1\")) # output: 192.0.1\nprint(removezero_ip(\"0.0.0.0.1\")) # output: 1\nprint(removezero_ip(\"192.168.0.0.1\")) # output: 192.168.0.1\nprint(removezero_ip(\"0.0.0.0.0.0.0.0.0\")) # output: 0.0.0.0.0\n\n# or using list slicing\ndef removezero_ip(ip):\n    ip = ip.split(\".\")\n    while ip[0] == \"0\" and len(ip) > 1:\n        ip = ip[1:]\n    return \".\".join(ip)\n\n# test\nprint(removezero_ip(\"192.0.0.1\")) # output: 192.0.1\nprint(removezero_ip(\"0.0.0.0.1\")) # output: 1\nprint(removezero_ip(\"192.168.0.0.1\")) # output: 192.168.0.1\nprint(removezero_ip(\"0.",
        "generated_testcode": "assert removezero_ip(\"192.0.1.1\") == \"192.1.1\"\n",
        "test": "assert removezero_ip(\"216.08.094.196\")==('216.8.94.196') \nassert removezero_ip(\"12.01.024\")==('12.1.24') \nassert removezero_ip(\"216.08.094.0196\")==('216.8.94.196') ",
        "canonical_solution": "import re\r\ndef removezero_ip(ip):\r\n string = re.sub('\\.[0]*', '.', ip)\r\n return string\r"
    },
    {
        "number": 594,
        "prompt": "Write a function to find the difference of first even and odd number of a given list.\ndef diff_even_odd(list1):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    even = []\n    odd = []\n    for i in list1:\n        if i % 2 == 0:\n            even.append(i)\n        else:\n            odd.append(i)\n    return abs(even[0] - odd[0])\n\n# Test cases\nprint(diff_even_odd([1, 2, 3, 4, 5, 6, 7, 8, 9]))  # Output: 2\nprint(diff_even_odd([10, 20, 30, 40, 50, 60, 70, 80, 90]))  # Output: 0\nprint(diff_even_odd([11, 22, 33, 44, 55, 66, 77, 88]))  # Output: 11\nprint(diff_even_odd([2, 4, 6, 8, 10]))  # Output: 0\nprint(diff_even_odd([1, 3, 5, 7, 9]))  # Output: 0\n\n# Test case when there is no even number\nprint(diff_even_odd([1, 3, 5, 7, 9, 11, 13, 15, 17])  # Output: None\n\n\n# Test case when there is no odd number\nprint(diff_even_odd([2, 4, 6, 8",
        "generated_testcode": "assert diff_even_odd([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 6\n",
        "test": "assert diff_even_odd([1,3,5,7,4,1,6,8])==3\nassert diff_even_odd([1,2,3,4,5,6,7,8,9,10])==1\nassert diff_even_odd([1,5,7,9,10])==9",
        "canonical_solution": "def diff_even_odd(list1):\r\n    first_even = next((el for el in list1 if el%2==0),-1)\r\n    first_odd = next((el for el in list1 if el%2!=0),-1)\r\n    return (first_even-first_odd)"
    },
    {
        "number": 595,
        "prompt": "Write a python function to count minimum number of swaps required to convert one binary string to another.\ndef min_Swaps(str1,str2) : \n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    n = len(str1) \n    i = 0\n    j = 0\n    count = 0\n    while (i < n and j < n) : \n        if str1[i] != str2[j] : \n            while (i < n and str1[i] != str2[j]) : \n                i += 1\n            count += i - j \n            i += 1\n            j += 1\n    return count \n  \n# Driver code \nstr1 = \"001010\"\nstr2 = \"110011\"\nprint(min_Swaps(str1, str2)) \n  \n# Output : 3 ",
        "generated_testcode": "assert min_Swaps(\"101010\",\"010101\") == 2\n",
        "test": "assert min_Swaps(\"1101\",\"1110\") == 1\nassert min_Swaps(\"111\",\"000\") == \"Not Possible\"\nassert min_Swaps(\"111\",\"110\") == \"Not Possible\"",
        "canonical_solution": "def min_Swaps(str1,str2) : \r\n    count = 0\r\n    for i in range(len(str1)) :  \r\n        if str1[i] != str2[i] : \r\n            count += 1\r\n    if count % 2 == 0 : \r\n        return (count // 2) \r\n    else : \r\n        return (\"Not Possible\") "
    },
    {
        "number": 596,
        "prompt": "Write a function to find the size of the given tuple.\ndef tuple_size(tuple_list):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    return len(tuple_list)\n\n# Example usage:\n# print(tuple_size((1, 2, 3)) # Output: 3\n# print(tuple_size(()) # Output: 0\n# print(tuple_size(('a', 'b', 'c', 'd', 'e') # Output: 4\n\n# Test your function with the examples above\nprint(tuple_size((1, 2, 3)) # Output: 3\nprint(tuple_size(()) # Output: 0\nprint(tuple_size(('a', 'b', 'c', 'd', 'e')) # Output: 4 ",
        "generated_testcode": "assert tuple_size((1, 2, 3, 4, 5, 6) == 5\n",
        "test": "assert tuple_size((\"A\", 1, \"B\", 2, \"C\", 3) ) == sys.getsizeof((\"A\", 1, \"B\", 2, \"C\", 3))\nassert tuple_size((1, \"Raju\", 2, \"Nikhil\", 3, \"Deepanshu\") ) == sys.getsizeof((1, \"Raju\", 2, \"Nikhil\", 3, \"Deepanshu\"))\nassert tuple_size(((1, \"Lion\"), ( 2, \"Tiger\"), (3, \"Fox\"), (4, \"Wolf\"))  ) == sys.getsizeof(((1, \"Lion\"), ( 2, \"Tiger\"), (3, \"Fox\"), (4, \"Wolf\")))",
        "canonical_solution": "import sys \r\ndef tuple_size(tuple_list):\r\n  return (sys.getsizeof(tuple_list)) "
    },
    {
        "number": 597,
        "prompt": "Write a function to find kth element from the given two sorted arrays.\ndef find_kth(arr1, arr2, m, n, k):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    if m > n:\n        return find_kth(arr2, arr1, n, m, k)\n    if m == 0:\n        return arr2[k-1]\n    if n == 0:\n        return arr1[k-1]\n    if k == 1:\n        return min(arr1[0], arr2[0])\n    i = min(m, k // 2)\n    j = min(n, k // 2)\n    if arr1[i-1] < arr2[j-1]:\n        return find_kth(arr1[i:], arr2, m-i, n, k-i)\n    else:\n        return find_kth(arr1, arr2[j:], m, n-j, k-j)\n\narr1 = [1, 3, 5, 7, 9]\narr2 = [2, 4, 6, 8, 10]\nk = 5\nm, n = len(arr1), len(arr2)\nprint(find_kth(arr1, arr2, m, n, k))\n\n# time complexity is O(log(min(m,n))\n# space complexity is O(1)\n\n# Example:\narr1 = [1, 3, 5, 7, 9]\narr2 = [2, 4, 6, 8, 10]\nk = 5\nm, n = len(arr1",
        "generated_testcode": "assert find_kth([1, 3, 5, 7, 9], [2, 4, 6, 8, 10], 4, 5) == 5\n",
        "test": "assert find_kth([2, 3, 6, 7, 9], [1, 4, 8, 10], 5, 4, 5) == 6\nassert find_kth([100, 112, 256, 349, 770], [72, 86, 113, 119, 265, 445, 892], 5, 7, 7) == 256\nassert find_kth([3, 4, 7, 8, 10], [2, 5, 9, 11], 5, 4, 6) == 8",
        "canonical_solution": "def find_kth(arr1, arr2, m, n, k):\r\n\tsorted1 = [0] * (m + n)\r\n\ti = 0\r\n\tj = 0\r\n\td = 0\r\n\twhile (i < m and j < n):\r\n\t\tif (arr1[i] < arr2[j]):\r\n\t\t\tsorted1[d] = arr1[i]\r\n\t\t\ti += 1\r\n\t\telse:\r\n\t\t\tsorted1[d] = arr2[j]\r\n\t\t\tj += 1\r\n\t\td += 1\r\n\twhile (i < m):\r\n\t\tsorted1[d] = arr1[i]\r\n\t\td += 1\r\n\t\ti += 1\r\n\twhile (j < n):\r\n\t\tsorted1[d] = arr2[j]\r\n\t\td += 1\r\n\t\tj += 1\r\n\treturn sorted1[k - 1]"
    },
    {
        "number": 598,
        "prompt": "Write a function to check whether the given number is armstrong or not.\ndef armstrong_number(number):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    # convert the number to string for easier handling\n    number_str = str(number)\n    # get the length of the number\n    n = len(number_str)\n    # initialize the sum variable\n    sum = 0\n    # iterate over each digit of the number and find its cube\n    for digit in number_str:\n        sum += int(digit) ** n\n    # return whether the sum is equal to the number itself\n    return sum == number\n\n\n# Test the function\nprint(armstrong_number(153))  # Output: True\nprint(armstrong_number(371))  # Output: True\nprint(armstrong_number(407))  # Output: True\nprint(armstrong_number(1634))  # Output: True\nprint(armstrong_number(9474))  # Output: True\nprint(armstrong_number(9475))  # Output: False\nprint(armstrong_number(9476))  # Output: True\nprint(armstrong_number(967299))  # Output: True\nprint(armstrong_number(967300))  # Output: False\nprint(armstrong_number(988))  # Output: False\n",
        "generated_testcode": "assert armstrong_number(153) == True\n",
        "test": "assert armstrong_number(153)==True\nassert armstrong_number(259)==False\nassert armstrong_number(4458)==False",
        "canonical_solution": "def armstrong_number(number):\r\n sum = 0\r\n times = 0\r\n temp = number\r\n while temp > 0:\r\n           times = times + 1\r\n           temp = temp // 10\r\n temp = number\r\n while temp > 0:\r\n           reminder = temp % 10\r\n           sum = sum + (reminder ** times)\r\n           temp //= 10\r\n if number == sum:\r\n           return True\r\n else:\r\n           return False"
    },
    {
        "number": 599,
        "prompt": "Write a function to find sum and average of first n natural numbers.\ndef sum_average(number):\n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    sum = 0\n    for i in range(1, number + 1):\n        sum += i\n    return sum, sum / number\n\nprint(sum_average(10))\n\n# Output: (55, 5.5)\n\n# Test the function with different inputs\nprint(sum_average(10))  # Output: (55, 5.5)\nprint(sum_average(15))  # Output: (105, 9.0)\nprint(sum_average(20))  # Output: (210, 10.5) ",
        "generated_testcode": "assert sum_average(5) == (15, 3)\n",
        "test": "assert sum_average(10)==(55, 5.5)\nassert sum_average(15)==(120, 8.0)\nassert sum_average(20)==(210, 10.5)",
        "canonical_solution": "def sum_average(number):\r\n total = 0\r\n for value in range(1, number + 1):\r\n    total = total + value\r\n average = total / number\r\n return (total,average)"
    },
    {
        "number": 600,
        "prompt": "Write a python function to check whether the given number is even or not using bitwise operator.\ndef is_Even(n) : \n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    return n & 1 == 0\n# OR operator\ndef is_Odd(n) : \n    return n & 1 != 0\n\n# Testing the function\nn = 20\nif is_Even(n) : \n    print(f\"{n} is Even\")\nelse : \n    print(f\"{n} is Odd\")\n\nn = 30\nif is_Odd(n) : \n    print(f\"{n} is Odd\")\nelse : \n    print(f\"{n} is Even\") ",
        "generated_testcode": "assert is_Even(4) == True\n",
        "test": "assert is_Even(1) == False\nassert is_Even(2) == True\nassert is_Even(3) == False",
        "canonical_solution": "def is_Even(n) : \r\n    if (n^1 == n+1) :\r\n        return True; \r\n    else :\r\n        return False; "
    },
    {
        "number": 601,
        "prompt": "Write a function to find the longest chain which can be formed from the given set of pairs.\n\tdef __init__(self, a, b): \n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "\t\tself.pairs = [] \n\t\tself.n = len(a) \n\t\tfor i in range(self.n): \n\t\t\tself.pairs.append((a[i], b[i])); \n\t\tself.res = 0\n\t\tself.dp = [[0 for _ in range(self.n)] for _ in range(self.n)] \n\n\tdef findLongestChain(self): \n\t\tself.dp = [[0 for _ in range(self.n)] for _ in range(self.n)] \n\t\tfor i in range(self.n): \n\t\t\tfor j in range(self.n): \n\t\t\t\tself.dp[i][j] = 1\n\n\t\tfor i in range(self.n): \n\t\t\tfor j in range(self.n): \n\t\t\t\tfor k in range(j, self.n): \n\t\t\t\t\tif self.pairs[j][0] < self.pairs[k][0] and self.pairs[j][1] < self.pairs[k][1]: \n\t\t\t\t\t\tself.dp[j][k] = self.dp[i][j] + 1\n\t\t\t\t\telse: \n\t\t\t\t\t\tself.dp[j][k] = max(self.dp[i][j], self.dp[i][k]) \n\n\t\tfor i in range(self.n",
        "generated_testcode": "assert longest_chain([(1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 7)]) == 5\n",
        "test": "assert max_chain_length([Pair(5, 24), Pair(15, 25),Pair(27, 40), Pair(50, 60)], 4) == 3\nassert max_chain_length([Pair(1, 2), Pair(3, 4),Pair(5, 6), Pair(7, 8)], 4) == 4\nassert max_chain_length([Pair(19, 10), Pair(11, 12),Pair(13, 14), Pair(15, 16), Pair(31, 54)], 5) == 5",
        "canonical_solution": "class Pair(object): \r\n\tdef __init__(self, a, b): \r\n\t\tself.a = a \r\n\t\tself.b = b \r\ndef max_chain_length(arr, n): \r\n\tmax = 0\r\n\tmcl = [1 for i in range(n)] \r\n\tfor i in range(1, n): \r\n\t\tfor j in range(0, i): \r\n\t\t\tif (arr[i].a > arr[j].b and\r\n\t\t\t\tmcl[i] < mcl[j] + 1): \r\n\t\t\t\tmcl[i] = mcl[j] + 1\r\n\tfor i in range(n): \r\n\t\tif (max < mcl[i]): \r\n\t\t\tmax = mcl[i] \r\n\treturn max"
    },
    {
        "number": 602,
        "prompt": "Write a python function to find the first repeated character in a given string.\ndef first_repeated_char(str1):\n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    # create a dictionary to store the count of characters\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    # find the first character that appears more than once\n    for char in str1:\n        if char_count[char] > 1:\n            return char\n    return None\n\n# Test the function\nprint(first_repeated_char(\"hello\")) # 'l'\nprint(first_repeated_char(\"python\")) # 'o'\nprint(first_repeated_char(\"abcdefg\")) # None\n\n# Time Complexity: O(n)\n# Space Complexity: O(min(n, m)) where n is the length of the string and m is the number of unique characters in the string. ",
        "generated_testcode": "assert first_repeated_char(\"hello\") == \"l\"\n",
        "test": "assert first_repeated_char(\"abcabc\") == \"a\"\nassert first_repeated_char(\"abc\") == \"None\"\nassert first_repeated_char(\"123123\") == \"1\"",
        "canonical_solution": "def first_repeated_char(str1):\r\n  for index,c in enumerate(str1):\r\n    if str1[:index+1].count(c) > 1:\r\n      return c \r\n  return \"None\""
    },
    {
        "number": 603,
        "prompt": "Write a function to get a lucid number smaller than or equal to n.\ndef get_ludic(n):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    # Initialize a list of primes\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    # Initialize a list of lucid numbers\n    lucids = []\n    # Iterate through the list of primes\n    for prime in primes:\n        # Check if the prime is a lucid number\n        if is_lucid(prime):\n            # If so, add it to the list of lucids\n            lucids.append(prime)\n    # Iterate through the list of lucids\n    for lucid in lucids:\n        # Check if the lucid is smaller than n\n        if lucid <= n:\n            return lucid\n    # If no lucid is smaller than n, return None\n    return None\n\n\n# Helper function to check if a number is lucid\ndef is_lucid(n):\n    # Convert n to a string\n    n_str = str(n)\n    # Iterate through the digits of n\n    for digit in n_str:\n        # Check if the digit is divisible by any previous prime\n        for prime in primes:\n            if int(digit) % prime == 0 and",
        "generated_testcode": "assert get_ludic(10) == 5\n",
        "test": "assert get_ludic(10) == [1, 2, 3, 5, 7]\nassert get_ludic(25) == [1, 2, 3, 5, 7, 11, 13, 17, 23, 25]\nassert get_ludic(45) == [1, 2, 3, 5, 7, 11, 13, 17, 23, 25, 29, 37, 41, 43]",
        "canonical_solution": "def get_ludic(n):\r\n\tludics = []\r\n\tfor i in range(1, n + 1):\r\n\t\tludics.append(i)\r\n\tindex = 1\r\n\twhile(index != len(ludics)):\r\n\t\tfirst_ludic = ludics[index]\r\n\t\tremove_index = index + first_ludic\r\n\t\twhile(remove_index < len(ludics)):\r\n\t\t\tludics.remove(ludics[remove_index])\r\n\t\t\tremove_index = remove_index + first_ludic - 1\r\n\t\tindex += 1\r\n\treturn ludics"
    },
    {
        "number": 604,
        "prompt": "Write a function to reverse words in a given string.\ndef reverse_words(s):\n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    words = s.split()\n    words.reverse()\n    return \" \".join(words)\n\n# Test the function with sample input\nprint(reverse_words(\"Hello world\"))\n# Output: world Hello\nprint(reverse_words(\"Python is fun\"))\n# Output: fun is Python\nprint(reverse_words(\"   space before  after  \"))\n# Output: after space before\nprint(reverse_words(\"  Hello world python\"))\n# Output: python world Hello\nprint(reverse_words(\"  Hello world   \"))\n# Output: world Hello ",
        "generated_testcode": "assert reverse_words(\"hello world\") == \"world hello\"\n",
        "test": "assert reverse_words(\"python program\")==(\"program python\")\nassert reverse_words(\"java language\")==(\"language java\")\nassert reverse_words(\"indian man\")==(\"man indian\")",
        "canonical_solution": "def reverse_words(s):\r\n        return ' '.join(reversed(s.split()))"
    },
    {
        "number": 605,
        "prompt": "Write a function to check if the given integer is a prime number.\ndef prime_num(num):\n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    if num < 2:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\n\nprint(prime_num(7)) # Output: True\nprint(prime_num(10)) # Output: False\nprint(prime_num(17)) # Output: True ",
        "generated_testcode": "assert prime_num(7) == True\n",
        "test": "assert prime_num(13)==True\nassert prime_num(7)==True\nassert prime_num(-1010)==False",
        "canonical_solution": "def prime_num(num):\r\n  if num >=1:\r\n   for i in range(2, num//2):\r\n     if (num % i) == 0:\r\n                return False\r\n     else:\r\n                return True\r\n  else:\r\n          return False"
    },
    {
        "number": 606,
        "prompt": "Write a function to convert degrees to radians.\ndef radian_degree(degree):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    return degree * (pi / 180)\n\n# Write a function to convert radians to degrees.\ndef degree_radian(radian):\n    return radian * (180 / pi)\n\n# Function to find the area of a circle\ndef area_of_circle(radius):\n    return pi * radius ** 2\n\n# Function to find the area of a rectangle\ndef area_of_rectangle(length, width):\n    return length * width\n\n# Function to find the area of a triangle\ndef area_of_triangle(base, height):\n    return 0.5 * base * height\n\n# Function to find the area of a trapezoid\ndef area_of_trapezoid(base1, base2, height):\n    return 0.5 * (base1 + base2) * height\n\n# Function to find the volume of a sphere\ndef volume_of_sphere(radius):\n    return (4/3) * pi * radius ** 3\n\n# Function to find the volume of a cylinder\ndef volume_of_cylinder(radius, height):\n    return pi * radius ** 2 * height\n\n# Function to find the volume of a cone\ndef volume_of_cone(radius, height):\n    return 1/3 * pi * radius ** 2 * height\n\n# Function to find the surface area of a sphere\ndef surface_area_of_sphere(radius):\n    return 4 * pi * radius ** 2\n\n# Function to find the",
        "generated_testcode": "assert radian_degree(90) == 1.57079632679\n",
        "test": "assert radian_degree(90)==1.5707963267948966\nassert radian_degree(60)==1.0471975511965976\nassert radian_degree(120)==2.0943951023931953",
        "canonical_solution": "import math\r\ndef radian_degree(degree):\r\n radian = degree*(math.pi/180)\r\n return radian"
    },
    {
        "number": 607,
        "prompt": "Write a function to search a literals string in a string and also find the location within the original string where the pattern occurs by using regex.\ndef find_literals(text, pattern):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    found = False\n    index = text.find(pattern)\n    if index != -1:\n        found = True\n    return found, index\n\n\ntext = \"Hello, how are you today?\"\npattern = \"how\"\nprint(find_literals(text, pattern))\n\n# Output: (True, 7)\n\ntext = \"Hello, how are you today?\"\npattern = \"Hi\"\nprint(find_literals(text, pattern))\n\n# Output: (False, -1)\n\n\ntext = \"Hello, how are you today?\"\npattern = \".\"\nprint(find_literals(text, pattern))\n\n# Output: (True, 13)\n\ntext = \"Hello, how are you today?\"\npattern = \"how are\"\nprint(find_literals(text, pattern))\n\n# Output: (True, 0)\n\ntext = \"Hello, how are you today?\"\npattern = \"Hello, how are you\"\nprint(find_literals(text, pattern))\n\n# Output: (True, 0)\n\ntext = \"Hello, how are you today?\"\npattern = \" are \"\nprint(find_literals(text, pattern))\n\n# Output: (True, 7)\n\ntext = \"Hello, how are you today?\"\npattern = \"are\"\nprint(find_literals(text, pattern))\n\n# Output: (True, 7) ",
        "generated_testcode": "assert find_literals(\"Hello world\", \"world\") == (6, 11)\n",
        "test": "assert find_literals('The quick brown fox jumps over the lazy dog.', 'fox') == ('fox', 16, 19)\nassert find_literals('Its been a very crazy procedure right', 'crazy') == ('crazy', 16, 21)\nassert find_literals('Hardest choices required strongest will', 'will') == ('will', 35, 39)",
        "canonical_solution": "import re\r\npattern = 'fox'\r\ntext = 'The quick brown fox jumps over the lazy dog.'\r\ndef find_literals(text, pattern):\r\n  match = re.search(pattern, text)\r\n  s = match.start()\r\n  e = match.end()\r\n  return (match.re.pattern, s, e)"
    },
    {
        "number": 608,
        "prompt": "Write a python function to find nth bell number.\ndef bell_Number(n): \n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    bell = [[0 for i in range(n+1)] for j in range(n+1)] \n    bell[0][0] = 1\n    for i in range(1, n+1): \n        bell[i][0] = 1\n        bell[i][i] = 1\n        for j in range(1, i): \n            bell[i][j] = bell[i-1][j-1] + bell[i-1][j] \n    return bell[n][0] \n\nn = 10\nprint(\"The nth Bell number is\", bell_Number(n)) \n",
        "generated_testcode": "assert bell_Number(0) == 1\n",
        "test": "assert bell_Number(2) == 2\nassert bell_Number(3) == 5\nassert bell_Number(4) == 15",
        "canonical_solution": "def bell_Number(n): \r\n    bell = [[0 for i in range(n+1)] for j in range(n+1)] \r\n    bell[0][0] = 1\r\n    for i in range(1, n+1):\r\n        bell[i][0] = bell[i-1][i-1]\r\n        for j in range(1, i+1): \r\n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1] \r\n    return bell[n][0] "
    },
    {
        "number": 609,
        "prompt": "Write a python function to find minimum possible value for the given periodic function.\ndef floor_Min(A,B,N):\n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    min_val = float('inf')\n    for i in range(1,N+1):\n        if A*i <= min_val:\n            min_val = A*i\n        if B*i <= min_val:\n            min_val = B*i\n    return min_val\n\n# Test case\nprint(floor_Min(3,5,10)) # Output: 3\nprint(floor_Min(2,6,7)) # Output: 6\nprint(floor_Min(10,15,20)) # Output: 15\nprint(floor_Min(2,10,4)) # Output: 2\nprint(floor_Min(5,10,2)) # Output: 5 ",
        "generated_testcode": "assert floor_Min(1,2,3) == 1\n",
        "test": "assert floor_Min(10,20,30) == 15\nassert floor_Min(1,2,1) == 0\nassert floor_Min(11,10,9) == 9",
        "canonical_solution": "def floor_Min(A,B,N):\r\n    x = max(B - 1,N)\r\n    return (A*x) // B"
    },
    {
        "number": 610,
        "prompt": "Write a python function to remove the k'th element from a given list.\ndef remove_kth_element(list1, L):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    list1.pop(L-1)\n    return list1\n\n# Test the function with an example\nprint(remove_kth_element([1, 2, 3, 4, 5, 6, 7, 8, 9], 3)) # output: [1, 2, 4, 5, 6, 7, 8] ",
        "generated_testcode": "assert remove_kth_element([1, 2, 3, 4, 5, 6, 7, 8, 9], 3) == [1, 2, 4, 5, 6, 7, 8]\n",
        "test": "assert remove_kth_element([1,1,2,3,4,4,5,1],3)==[1, 1, 3, 4, 4, 5, 1]\nassert remove_kth_element([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4],4)==[0, 0, 1, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]\nassert remove_kth_element([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10],5)==[10,10,15,19, 18, 17, 26, 26, 17, 18, 10]",
        "canonical_solution": "def remove_kth_element(list1, L):\r\n    return  list1[:L-1] + list1[L:]"
    },
    {
        "number": 611,
        "prompt": "Write a function to find the maximum of nth column from the given tuple list.\ndef max_of_nth(test_list, N):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": true,
        "answer": "    return max(row[N-1] for row in test_list)\n\n#Example usage:\ntest_list = [(1,2,3), (4,5,6), (7,8,9), (10,11,12)]\nprint(max_of_nth(test_list, 2)) #Output: 12\n\n#Another example:\ntest_list = [(5, 7, 1), (1, 3, 2), (4, 6, 3), (8, 5, 9)]\nprint(max_of_nth(test_list, 1)) #Output: 8\n\n#This function takes a tuple of tuples as input and returns the maximum value of a given column number. ",
        "generated_testcode": "assert max_of_nth([(1, 2, 3), (4, 5, 6), (7, 8, 9)], 2) == 8\n",
        "test": "assert max_of_nth([(5, 6, 7), (1, 3, 5), (8, 9, 19)], 2) == 19\nassert max_of_nth([(6, 7, 8), (2, 4, 6), (9, 10, 20)], 1) == 10\nassert max_of_nth([(7, 8, 9), (3, 5, 7), (10, 11, 21)], 1) == 11",
        "canonical_solution": "def max_of_nth(test_list, N):\r\n  res = max([sub[N] for sub in test_list])\r\n  return (res) "
    },
    {
        "number": 612,
        "prompt": "Write a python function to merge the first and last elements separately in a list of lists.\ndef merge(lst):  \n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    first_elem = []\n    last_elem = []\n    for sublist in lst:\n        first_elem.append(sublist[0])\n        last_elem.append(sublist[-1])\n    return first_elem, last_elem\n\n#Example usage:\nmy_list = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nprint(merge(my_list)) # Output: ([1, 4, 7], [3, 6, 9])\n\n#Using tuple unpacking to return a tuple of lists\ndef merge(lst):\n    return [x[0] for x in lst], [x[-1] for x in lst]\n\n#Example usage:\nmy_list = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nprint(merge(my_list)) # Output: ([1, 4, 7], [3, 6, 9])\n\n#Using list comprehensions and zip function\ndef merge(lst):\n    return [x[0] for x in lst], [x[-1] for x in lst]\n\n#Example usage:\nmy_list = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nprint(merge(my_list)) # Output: ([1, 4, 7], [3, 6, 9])\n\n#Using map function\n",
        "generated_testcode": "assert merge([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [[1, 4, 7], [2, 5, 8], [3, 6, 9]]\n",
        "test": "assert merge([['x', 'y'], ['a', 'b'], ['m', 'n']]) == [['x', 'a', 'm'], ['y', 'b', 'n']]\nassert merge([[1, 2], [3, 4], [5, 6], [7, 8]]) == [[1, 3, 5, 7], [2, 4, 6, 8]]\nassert merge([['x', 'y','z' ], ['a', 'b','c'], ['m', 'n','o']]) == [['x', 'a', 'm'], ['y', 'b', 'n'],['z', 'c','o']]",
        "canonical_solution": "def merge(lst):  \r\n    return [list(ele) for ele in list(zip(*lst))] "
    },
    {
        "number": 613,
        "prompt": "Write a function to find the maximum value in record list as tuple attribute in the given tuple list.\ndef maximum_value(test_list):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": true,
        "answer": "    max_value = test_list[0][2]\n    for record in test_list:\n        if record[2] > max_value:\n            max_value = record[2]\n    return max_value\n\n# Test the function with the given list\ntest_list = [(1, 2, 3), (4, 5, 6), (7, 8, 9), (10, 11, 12)]\nprint(maximum_value(test_list))\n\n# Output: 12\n\n# Write a function to find the minimum value in record list as tuple attribute in the given tuple list.\ndef minimum_value(test_list):\n    min_value = test_list[0][2]\n    for record in test_list:\n        if record[2] < min_value:\n            min_value = record[2]\n    return min_value\n\n# Test the function with the given list\ntest_list = [(1, 2, 3), (4, 5, 6), (7, 8, 9), (10, 11, 12)]\nprint(minimum_value(test_list))\n\n# Output: 3\n\n# Write a function to count the number of occurrences of a given value in the tuple list.\ndef count_occurrences(test_list, target):\n    count = 0\n    for record in test_list:\n        if record[2] == target:\n            count += 1\n   ",
        "generated_testcode": "assert maximum_value([(1, 2, 3), (4, 5, 6), (7, 8, 9)]) == 9\n",
        "test": "assert maximum_value([('key1', [3, 4, 5]), ('key2', [1, 4, 2]), ('key3', [9, 3])]) == [('key1', 5), ('key2', 4), ('key3', 9)]\nassert maximum_value([('key1', [4, 5, 6]), ('key2', [2, 5, 3]), ('key3', [10, 4])]) == [('key1', 6), ('key2', 5), ('key3', 10)]\nassert maximum_value([('key1', [5, 6, 7]), ('key2', [3, 6, 4]), ('key3', [11, 5])]) == [('key1', 7), ('key2', 6), ('key3', 11)]",
        "canonical_solution": "def maximum_value(test_list):\r\n  res = [(key, max(lst)) for key, lst in test_list]\r\n  return (res) "
    },
    {
        "number": 614,
        "prompt": "Write a function to find the cumulative sum of all the values that are present in the given tuple list.\ndef cummulative_sum(test_list):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    result = []\n    sum = 0\n    for i in test_list:\n        sum += i\n        result.append(sum)\n    return result\n\n\n# Test the function with the given tuple list\ntest_list = (1, 2, 3, 4, 5, 6, 7, 8)\nprint(cummulative_sum(test_list)) # Output: [1, 3, 6, 10, 15, 21, 28, 36]\n\n\n# We can also use the built-in `sum` function to achieve the same result in a single line\ndef cummulative_sum(test_list):\n    return [sum(test_list[:i+1]) for i in range(len(test_list))]\n\n# Test the function with the given tuple list\ntest_list = (1, 2, 3, 4, 5, 6, 7, 8)\nprint(cummulative_sum(test_list)) # Output: [1, 3, 6, 10, 15, 21, 28, 36] ",
        "generated_testcode": "assert cummulative_sum([1, 2, 3, 4, 5]) == [1, 3, 6, 10, 15]\n",
        "test": "assert cummulative_sum([(1, 3), (5, 6, 7), (2, 6)]) == 30\nassert cummulative_sum([(2, 4), (6, 7, 8), (3, 7)]) == 37\nassert cummulative_sum([(3, 5), (7, 8, 9), (4, 8)]) == 44",
        "canonical_solution": "def cummulative_sum(test_list):\r\n  res = sum(map(sum, test_list))\r\n  return (res)"
    },
    {
        "number": 615,
        "prompt": "Write a function to find average value of the numbers in a given tuple of tuples.\ndef average_tuple(nums):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    total = 0\n    count = 0\n    for t in nums:\n        for n in t:\n            total += n\n            count += 1\n    return total / count\n\n# Example usage:\nnums = ((1, 2, 3), (4, 5, 6), (7, 8, 9))\nprint(average_tuple(nums))  # Output: 5.0\n\n# Challenge: Write a function to average the numbers in a list of tuples recursively.\n# Hint: Use a helper function to handle the recursion. ",
        "generated_testcode": "assert average_tuple(((1, 2, 3), (4, 5, 6)) == 3.5\n",
        "test": "assert average_tuple(((10, 10, 10, 12), (30, 45, 56, 45), (81, 80, 39, 32), (1, 2, 3, 4)))==[30.5, 34.25, 27.0, 23.25]\nassert average_tuple(((1, 1, -5), (30, -15, 56), (81, -60, -39), (-10, 2, 3)))== [25.5, -18.0, 3.75]\nassert average_tuple( ((100, 100, 100, 120), (300, 450, 560, 450), (810, 800, 390, 320), (10, 20, 30, 40)))==[305.0, 342.5, 270.0, 232.5]",
        "canonical_solution": "def average_tuple(nums):\r\n    result = [sum(x) / len(x) for x in zip(*nums)]\r\n    return result"
    },
    {
        "number": 616,
        "prompt": "Write a function to perfom the modulo of tuple elements in the given two tuples.\ndef tuple_modulo(test_tup1, test_tup2):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    res = []\n    for i in range(len(test_tup1)):\n        res.append(test_tup1[i] % test_tup2[i])\n    return tuple(res)\n\n#Example usage:\ntest_tup1 = (10, 20, 30)\ntest_tup2 = (5, 7, 11)\nresult = tuple_modulo(test_tup1, test_tup2)\nprint(result) #Output: (10, 3, 8)\n\n#Another example usage:\ntest_tup1 = (15, 25, 35)\ntest_tup2 = (2, 5, 7)\nresult = tuple_modulo(test_tup1, test_tup2)\nprint(result) #Output: (1, 0, 3)\n```\n\n## Question 2\n\nWrite a function to calculate the average of a list of tuples containing the marks of students.\n\n```python\ndef average_of_marks(marks_list):\n    total = 0\n    count = 0\n    for i in marks_list:\n        total += sum(i)\n        count += len(i)\n    return total / count\n\n#Example usage:\nmarks_list = [(90, 95, 100), (75, 80, 85), (80, 70, 90), (75, ",
        "generated_testcode": "assert tuple_modulo((2, 4, 6, 8, 10), (3, 5, 7, 11)) == (2, 4, 2, 10)\n",
        "test": "assert tuple_modulo((10, 4, 5, 6), (5, 6, 7, 5)) == (0, 4, 5, 1)\nassert tuple_modulo((11, 5, 6, 7), (6, 7, 8, 6)) == (5, 5, 6, 1)\nassert tuple_modulo((12, 6, 7, 8), (7, 8, 9, 7)) == (5, 6, 7, 1)",
        "canonical_solution": "def tuple_modulo(test_tup1, test_tup2):\r\n  res = tuple(ele1 % ele2 for ele1, ele2 in zip(test_tup1, test_tup2)) \r\n  return (res) "
    },
    {
        "number": 617,
        "prompt": "Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\ndef min_Jumps(a, b, d): \n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    if a == d and b == 0: \n        return 0\n    if a == 0 and b == 0: \n        return -1\n    if a < 0 or b < 0: \n        return -1\n    if a == 0 and b > 0: \n        return min_Jumps(d, b, d) + 1\n    if b == 0 and a > 0: \n        return min_Jumps(a, d, d) + 1\n    if a > d and b > d: \n        return min_Jumps(a-d, b-d, d) + 1\n    if a < d and b > d: \n        return min_Jumps(d, b-d, d) + 1\n    if a > d and b < d: \n        return min_Jumps(a-d, b, d) + 1\n    if a < d and b < d: \n        return min_Jumps(d, d-b, d) + 1\n  \n    return 0\n  \ndef main(): \n    a = 1\n    b = 2\n    d = 5\n    print(\"Minimum jumps required to reach point\", d, d, \"from origin is\", min_Jumps(a, b, d)) \n  \nif __name__ == \"__main__\": \n    main() ",
        "generated_testcode": "assert min_Jumps(1, 0, 2) == 1\n",
        "test": "assert min_Jumps(3,4,11)==3.5\nassert min_Jumps(3,4,0)==0\nassert min_Jumps(11,14,11)==1",
        "canonical_solution": "def min_Jumps(a, b, d): \r\n    temp = a \r\n    a = min(a, b) \r\n    b = max(temp, b) \r\n    if (d >= b): \r\n        return (d + b - 1) / b \r\n    if (d == 0): \r\n        return 0\r\n    if (d == a): \r\n        return 1\r\n    else:\r\n        return 2"
    },
    {
        "number": 618,
        "prompt": "Write a function to divide two lists using map and lambda function.\ndef div_list(nums1,nums2):\n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    return list(map(lambda x,y: x/y,nums1,nums2))\n\nnums1 = [10,20,30,40,50]\nnums2 = [2,4,10,5]\nprint(div_list(nums1,nums2)) #[5.0, 5.0, 6.0, 10.0]\n\n# Write a function to calculate the square root of a list using map and lambda function.\ndef sqrt_list(nums):\n    return list(map(lambda x: x**0.5,nums))\n\nnums = [4, 9, 16, 25, 36]\nprint(sqrt_list(nums)) #[2.0, 3.0, 4.0, 5.0]\n\n# Write a function to calculate the square of a list using map and lambda function.\ndef square(nums):\n    return list(map(lambda x: x**2,nums))\n\nnums = [2,3,4,5,6]\nprint(square(nums)) #[4, 9, 16, 36]\n\n# Write a function to double each element of a list using map and lambda function.\ndef double_list(nums):\n    return list(map(lambda x: x*2,nums))\n\nnums = [1,2,3,4,5]\nprint(double_list(nums))",
        "generated_testcode": "assert div_list([1,2,3,4],[2,2,2,2]) == [0.5,1.0,1.5,2.0]\n",
        "test": "assert div_list([4,5,6],[1, 2, 3])==[4.0,2.5,2.0]\nassert div_list([3,2],[1,4])==[3.0, 0.5]\nassert div_list([90,120],[50,70])==[1.8, 1.7142857142857142]",
        "canonical_solution": "def div_list(nums1,nums2):\r\n  result = map(lambda x, y: x / y, nums1, nums2)\r\n  return list(result)"
    },
    {
        "number": 619,
        "prompt": "Write a function to move all the numbers in it to the given string.\ndef move_num(test_str):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    num = []\n    string = []\n    for i in test_str:\n        if i.isdigit():\n            num.append(i)\n        else:\n            string.append(i)\n    return ''.join(num) + ''.join(string)\n\n\n# Test the function with the given example\nprint(move_num(\"a1b2c3d4\"))  # Output: \"1234abcd\"\nprint(move_str(\"hello2world3\"))  # Output: \"23helloworld\" ",
        "generated_testcode": "assert move_num(\"Hello 123 World 456\") == \"Hello World\"\n",
        "test": "assert move_num('I1love143you55three3000thousand') == 'Iloveyouthreethousand1143553000'\nassert move_num('Avengers124Assemble') == 'AvengersAssemble124'\nassert move_num('Its11our12path13to14see15things16do17things') == 'Itsourpathtoseethingsdothings11121314151617'",
        "canonical_solution": "def move_num(test_str):\r\n  res = ''\r\n  dig = ''\r\n  for ele in test_str:\r\n    if ele.isdigit():\r\n      dig += ele\r\n    else:\r\n      res += ele\r\n  res += dig\r\n  return (res) "
    },
    {
        "number": 620,
        "prompt": "Write a function to find the largest subset where each pair is divisible.\ndef largest_subset(a, n):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    a.sort()\n    dp = [1] * n\n    max_len = 1\n    max_index = 0\n\n    for i in range(1, n):\n        for j in range(i):\n            if a[i] % a[j] == 0:\n                dp[i] = max(dp[j] + 1, dp[i])\n                if dp[i] > max_len:\n                    max_len = dp[i]\n                    max_index = j\n\n    result = []\n    for i in range(max_len - 1, -1, -1):\n        if max_len == 0:\n            break\n        if a[max_index] % a[i] == 0:\n            result.append(a[i])\n            max_len -= 1\n            max_index = i\n\n    return result\n\n\n# Test the function\na = [2, 4, 5, 6, 8, 10, 16, 18, 20, 30]\nn = len(a)\nprint(largest_subset(a, n))  # Output: [2, 4, 6, 8, 10, 16, 18, 20]\n\na = [10, 2, 5, 6, 8, 16, 18, 20, 30]\nn = len(a)",
        "generated_testcode": "assert largest_subset([1, 2, 3, 4, 5, 6, 7, 8, 9], 3) == [1, 3, 9]\n",
        "test": "assert largest_subset([ 1, 3, 6, 13, 17, 18 ], 6) == 4\nassert largest_subset([10, 5, 3, 15, 20], 5) == 3\nassert largest_subset([18, 1, 3, 6, 13, 17], 6) == 4",
        "canonical_solution": "def largest_subset(a, n):\r\n\tdp = [0 for i in range(n)]\r\n\tdp[n - 1] = 1; \r\n\tfor i in range(n - 2, -1, -1):\r\n\t\tmxm = 0;\r\n\t\tfor j in range(i + 1, n):\r\n\t\t\tif a[j] % a[i] == 0 or a[i] % a[j] == 0:\r\n\t\t\t\tmxm = max(mxm, dp[j])\r\n\t\tdp[i] = 1 + mxm\r\n\treturn max(dp)"
    },
    {
        "number": 621,
        "prompt": "Write a function to increment the numeric values in the given strings by k.\ndef increment_numerics(test_list, K):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    new_list = []\n    for word in test_list:\n        new_word = ''\n        for char in word:\n            if char.isnumeric():\n                new_word += str(int(char) + K)\n            else:\n                new_word += char\n        new_list.append(new_word)\n    return new_list\n\n# Example usage:\ntest_list = ['hello123', 'world456', '123test789']\nk = 5\nprint(increment_numerics(test_list, k))  # Output: ['hello128', 'world461', '173test804'] ",
        "generated_testcode": "assert increment_numerics([\"hello123\", \"world456\", \"python789\"], 10) == [\"hello1333\", \"world5666\", \"python899\"]\n",
        "test": "assert increment_numerics([\"MSM\", \"234\", \"is\", \"98\", \"123\", \"best\", \"4\"] , 6) == ['MSM', '240', 'is', '104', '129', 'best', '10']\nassert increment_numerics([\"Dart\", \"356\", \"is\", \"88\", \"169\", \"Super\", \"6\"] , 12) == ['Dart', '368', 'is', '100', '181', 'Super', '18']\nassert increment_numerics([\"Flutter\", \"451\", \"is\", \"44\", \"96\", \"Magnificent\", \"12\"] , 33) == ['Flutter', '484', 'is', '77', '129', 'Magnificent', '45']",
        "canonical_solution": "def increment_numerics(test_list, K):\r\n  res = [str(int(ele) + K) if ele.isdigit() else ele for ele in test_list]\r\n  return res "
    },
    {
        "number": 622,
        "prompt": "Write a function to find the median of two sorted arrays of same size.\ndef get_median(arr1, arr2, n):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    if n % 2 == 0:\n        median = (arr1[n // 2] + arr2[n // 2] + arr1[n // 2 - 1] + arr2[n // 2 - 1]) / 2\n    else:\n        median = (arr1[n // 2] + arr2[n // 2]) / 2\n    return median\n\n\n\ndef median_sorted_arrays(arr1, arr2):\n    n1 = len(arr1)\n    n2 = len(arr2)\n    if n1 == n2:\n        if n1 % 2 == 0:\n            median = (arr1[n1 // 2] + arr2[n1 // 2 - 1] + arr1[n1 // 2] + arr2[n1 // 2]) / 2\n        else:\n            median = (arr1[n1 // 2] + arr2[n1 // 2]) / 2\n        return median\n    if n1 > n2:\n        arr1, arr2, n1, n2 = arr2, arr1, n2, n1\n    if n2 % 2 == 0:\n        if n1 < n2 // 2:\n            return get_median(arr1, arr2[n2 // 2 - 1 : n2], n2 // 2)\n        elif n1 > n2 // 2:\n            return get_median(arr1[: n",
        "generated_testcode": "assert get_median([1, 3, 5, 7, 9], [2, 4, 6, 8], 4) == 5\n",
        "test": "assert get_median([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0\nassert get_median([2, 4, 8, 9], [7, 13, 19, 28], 4) == 8.5\nassert get_median([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6) == 25.0",
        "canonical_solution": "def get_median(arr1, arr2, n):\r\n  i = 0\r\n  j = 0\r\n  m1 = -1\r\n  m2 = -1\r\n  count = 0\r\n  while count < n + 1:\r\n    count += 1\r\n    if i == n:\r\n      m1 = m2\r\n      m2 = arr2[0]\r\n      break\r\n    elif j == n:\r\n      m1 = m2\r\n      m2 = arr1[0]\r\n      break\r\n    if arr1[i] <= arr2[j]:\r\n      m1 = m2\r\n      m2 = arr1[i]\r\n      i += 1\r\n    else:\r\n      m1 = m2\r\n      m2 = arr2[j]\r\n      j += 1\r\n  return (m1 + m2)/2"
    },
    {
        "number": 623,
        "prompt": "Write a function to find the n-th power of individual elements in a list using lambda function.\ndef nth_nums(nums,n):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    return list(map(lambda x:x**n,nums))\n\nprint(nth_nums([2,3,4],2)) # [4,9,16]\nprint(nth_nums([1,2,3,4,5],3)) # [1,8,27,125]\nprint(nth_nums([-2,-3,-4],5)) # [-32,243,256]\nprint(nth_nums([1,2,3,4,-5],-1)) # [1, 0.5, 0.33333333333333333333, 0.04]\nprint(nth_nums([0,1,2],0)) # [1, 1, 1]\n\n# Write a function to convert a list of tuples into a dictionary using lambda function.\ndef tuples_to_dict(tuples):\n    return dict(map(lambda t: (t[0],t[1]),tuples))\n\nprint(tuples_to_dict([(\"a\",1),(\"b\",2),(\"c\",3)]) # {\"a\": 1, \"b\": 2, \"c\": 3}\nprint(tuples_to_dict([(\"x\",4),(\"y\",5),(\"z\",6)]) # {\"x\": 4, \"y\": 5, \"z\": 6}\n\n# Write a function to filter even numbers from a list using",
        "generated_testcode": "assert nth_nums([1,2,3,4,5],2) == [1,4,9,25]\n",
        "test": "assert nth_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],2)==[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]\nassert nth_nums([10,20,30],3)==([1000, 8000, 27000])\nassert nth_nums([12,15],5)==([248832, 759375])",
        "canonical_solution": "def nth_nums(nums,n):\r\n nth_nums = list(map(lambda x: x ** n, nums))\r\n return nth_nums"
    },
    {
        "number": 624,
        "prompt": "Write a python function to convert the given string to upper case.\ndef is_upper(string):\n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    return string.isupper()\n\n# Test the function with the sample input\nprint(is_upper(\"PYTHON\"))  # Output: True\nprint(is_upper(\"Python\"))  # Output: False\nprint(is_upper(\"aBcDeF\"))  # Output: False\nprint(is_upper(\"HELLO\"))  # Output: True\nprint(is_upper(\"12345\"))  # Output: False\nprint(is_upper(\"\"))      # Output: False\n\n# Expected Output: True\n# Explanation: \"PYTHON\" is a string with all uppercase letters, \"Python\" is not, \"aBcDeF\" is a string with both lowercase and uppercase letters, \"HELLO\" is a string with all uppercase letters, \"12345\" is a string with digits and \" \" is an empty string. ",
        "generated_testcode": "assert is_upper(\"HELLO\") == True\n",
        "test": "assert is_upper(\"person\") ==\"PERSON\"\nassert is_upper(\"final\") == \"FINAL\"\nassert is_upper(\"Valid\") == \"VALID\"",
        "canonical_solution": "def is_upper(string):\r\n  return (string.upper())"
    },
    {
        "number": 625,
        "prompt": "Write a python function to interchange first and last elements in a given list.\ndef swap_List(newList): \n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    newList[0], newList[-1] = newList[-1], newList[0] \n    return newList \n  \n# Input list \nlst = [1, 2, 3, 4, 5, 6, 7] \nprint(\"Original list: \", lst) \n  \n# Output: [7, 2, 3, 4, 5, 6, 1] \nprint(\"Swapped list: \", swap_List(lst)) \n\n# To swap first and last element in the list, we can directly use the above code. \n# Here we are passing the list as an argument and we are using slicing to swap the first and last element in the list. \n# In the above function we have used list index 0 and -1 to access the first and last element respectively and swapping them. \n# The swapped list is returned by the function. \n\n# We can also swap the first and last element of a list inplace using the following code \n\nlst = [1, 2, 3, 4, 5, 6, 7] \nlst[0], lst[-1] = lst[-1], lst[0] \nprint(\"Swapped list: \", lst) \n# Output: [7, 2, 3, 4, 5, 6] \n\n# Here we are directly swapping the first and last element of the list using slicing and not creating a new list. \n# Hence, the original list is modified. ",
        "generated_testcode": "assert swap_List([1, 2, 3, 4, 5]) == [5, 2, 3, 4]\n",
        "test": "assert swap_List([1,2,3]) == [3,2,1]\nassert swap_List([1,2,3,4,4]) == [4,2,3,4,1]\nassert swap_List([4,5,6]) == [6,5,4]",
        "canonical_solution": "def swap_List(newList): \r\n    size = len(newList) \r\n    temp = newList[0] \r\n    newList[0] = newList[size - 1] \r\n    newList[size - 1] = temp   \r\n    return newList "
    },
    {
        "number": 626,
        "prompt": "Write a python function to find the largest triangle that can be inscribed in the semicircle.\ndef triangle_area(r) :  \n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    import math  \n    return 0.5*r*r*math.sqrt(1 - r**2/2)  \n  \ndef largest_triangle(r) :  \n    area = triangle_area(r)  \n    count = 1  \n    while True :  \n        area_new = triangle_area(r) + 2*count  \n        if area_new < 0 :  \n            break  \n        area = area_new  \n        count += 1  \n    return count  \n  \nif __name__ == \"__main__\" :  \n    r = float(input(\"Enter the radius of the semicircle : \"))  \n    result = largest_triangle(r)  \n    print(\"The largest triangle that can be inscribed in the semicircle is \", result) ",
        "generated_testcode": "assert triangle_area(3) == 9.0\n",
        "test": "assert triangle_area(0) == 0\nassert triangle_area(-1) == -1\nassert triangle_area(2) == 4",
        "canonical_solution": "def triangle_area(r) :  \r\n    if r < 0 : \r\n        return -1\r\n    return r * r "
    },
    {
        "number": 627,
        "prompt": "Write a python function to find the smallest missing number from the given array.\ndef find_First_Missing(array,start,end): \n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": true,
        "answer": "    if start > end: \n        return -1\n    if start == end: \n        return start \n    mid = int((start + end) / 2) \n    if (mid == array[mid]): \n        return find_First_Missing(array,mid + 1, end) \n    return find_First_Missing(array, start, mid) \n   \ndef find_Last_Missing(array,start,end): \n    if start > end: \n        return -1\n    if end == array[end]: \n        return find_Last_Missing(array, start, end - 1) \n    return find_Last_Missing(array, start, end - 1) \n\ndef find_Smallest_Missing(array,start,end): \n    first_missing = find_First_Missing(array, start, end) \n    last_missing = find_Last_Missing(array, start, end) \n    return first_missing\n  \n# test the function \narray = [1, 2, 3, 4, 5, 6, 7, 8, 10] \nn = len(array) \nprint(\"The smallest missing number is\", find_Smallest_Missing(array, 0, n - 1)) ",
        "generated_testcode": "assert find_First_Missing([1,2,3,4,5,6,7,8,9,10],0,9) == 0\n",
        "test": "assert find_First_Missing([0,1,2,3],0,3) == 4\nassert find_First_Missing([0,1,2,6,9],0,4) == 3\nassert find_First_Missing([2,3,5,8,9],0,4) == 0",
        "canonical_solution": "def find_First_Missing(array,start,end): \r\n    if (start > end): \r\n        return end + 1\r\n    if (start != array[start]): \r\n        return start; \r\n    mid = int((start + end) / 2) \r\n    if (array[mid] == mid): \r\n        return find_First_Missing(array,mid+1,end) \r\n    return find_First_Missing(array,start,mid) "
    },
    {
        "number": 628,
        "prompt": "Write a function to replace all spaces in the given string with character * list item * list item * list item * list item '%20'.\ndef replace_spaces(string):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    return string.replace(\" \", \"%20\")\n\n# Example usage:\nprint(replace_spaces(\"this is a string\")) # Output: \"this%20is%20a%20string\" ",
        "generated_testcode": "assert replace_spaces(\"hello world\") == \"hello%20world\"\n",
        "test": "assert replace_spaces(\"My Name is Dawood\") == 'My%20Name%20is%20Dawood'\nassert replace_spaces(\"I am a Programmer\") == 'I%20am%20a%20Programmer'\nassert replace_spaces(\"I love Coding\") == 'I%20love%20Coding'",
        "canonical_solution": "MAX=1000;\r\ndef replace_spaces(string):\r\n  string=string.strip()\r\n  i=len(string)\r\n  space_count=string.count(' ')\r\n  new_length = i + space_count*2\r\n  if new_length > MAX:\r\n    return -1\r\n  index = new_length-1\r\n  string=list(string)\r\n  for f in range(i-2, new_length-2):\r\n    string.append('0')\r\n  for j in range(i-1, 0, -1):\r\n    if string[j] == ' ':\r\n      string[index] = '0'\r\n      string[index-1] = '2'\r\n      string[index-2] = '%'\r\n      index=index-3\r\n    else:\r\n      string[index] = string[j]\r\n      index -= 1\r\n  return ''.join(string)"
    },
    {
        "number": 629,
        "prompt": "Write a python function to find even numbers from a mixed list.\ndef Split(list): \n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    odd_list = [] \n    even_list = [] \n    for num in list: \n        if num % 2 == 0: \n            even_list.append(num) \n        else: \n            odd_list.append(num) \n    return even_list \n  \n# Driver code \nlist1 = [15, 23, 12, 67, 56, 10, 24, 5, 8, 90] \nresult = Split(list1) \nprint(\"Original list:\", list1) \nprint(\"Even list:\", result) ",
        "generated_testcode": "assert Split([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [2, 4, 6, 8, 10]\n",
        "test": "assert Split([1,2,3,4,5]) == [2,4]\nassert Split([4,5,6,7,8,0,1]) == [4,6,8,0]\nassert Split ([8,12,15,19]) == [8,12]",
        "canonical_solution": "def Split(list): \r\n    ev_li = [] \r\n    for i in list: \r\n        if (i % 2 == 0): \r\n            ev_li.append(i)  \r\n    return ev_li"
    },
    {
        "number": 630,
        "prompt": "Write a function to extract all the adjacent coordinates of the given coordinate tuple.\ndef adjac(ele, sub = []): \n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    x,y = ele\n    neighbours = [(-1,0), (1,0), (0,1), (0,-1)]\n    for dx,dy in neighbours:\n        new_x = x + dx\n        new_y = y + dy\n        if 0 <= new_x < len(grid) and 0 <= new_y < len(grid[0]):\n            if grid[new_x][new_y] == 0:\n                sub.append((new_x,new_y))\n    return sub\n\ndef count_safe_tiles(grid):\n    safe_tiles = 0\n    for i in range(len(grid)):\n        for j in range(len(grid[i]):\n            if grid[i][j] == 0:\n                safe_tiles += 1\n    return safe_tiles\n\ndef bfs(ele):\n    visited = set()\n    queue = [ele]\n    while queue:\n        curr = queue.pop(0)\n        visited.add(curr)\n        for adj in adjac(curr):\n            if adj not in visited and adj not in queue:\n                queue.append(adj)\n                grid[adj[0]][adj[1]] = 1\n                safe_tiles -= 1\n                if safe_tiles == 0:\n                    return True\n    return False\n\ndef virus_spread(grid):\n    # Step 1: Count the number of safe tiles\n    safe_tiles =",
        "generated_testcode": "assert adjac((1, 2)) == [(1, 3), (1, 1), (2, 2), (0, 2), (1, 0)]\n",
        "test": "assert get_coordinates((3, 4)) == [[2, 3], [2, 4], [2, 5], [3, 3], [3, 4], [3, 5], [4, 3], [4, 4], [4, 5]]\nassert get_coordinates((4, 5)) ==[[3, 4], [3, 5], [3, 6], [4, 4], [4, 5], [4, 6], [5, 4], [5, 5], [5, 6]]\nassert get_coordinates((5, 6)) == [[4, 5], [4, 6], [4, 7], [5, 5], [5, 6], [5, 7], [6, 5], [6, 6], [6, 7]]",
        "canonical_solution": "def adjac(ele, sub = []): \r\n  if not ele: \r\n     yield sub \r\n  else: \r\n     yield from [idx for j in range(ele[0] - 1, ele[0] + 2) \r\n                for idx in adjac(ele[1:], sub + [j])] \r\ndef get_coordinates(test_tup):\r\n  res = list(adjac(test_tup))\r\n  return (res) "
    },
    {
        "number": 631,
        "prompt": "Write a function to replace whitespaces with an underscore and vice versa in a given string by using regex.\ndef replace_spaces(text):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    return text.replace(\" \", \"_\")\n\ndef replace_underscore(text):\n    return text.replace(\"_\", \" \")\n\ntext = input(\"Enter a string: \")\nchoice = input(\"Do you want to replace spaces with underscore or vice versa? (replace/back): \")\n\nif choice == \"replace\":\n    print(replace_spaces(text))\nelif choice == \"back\":\n    print(replace_underscore(text))\nelse:\n    print(\"Invalid choice!\")\n\n# test the function with the given example\ntext = \"This is a sample string\"\nprint(replace_spaces(text))\nprint(replace_underscore(replace_spaces(text)))\n\n# Output: This_is_a_sample_string\n#         This is a sample string\n\n# This function can also be used to replace any other character with any other character. Just replace the \" \" and \"_\" with the desired characters. ",
        "generated_testcode": "assert replace_spaces(\"hello world\") == \"hello_world\"\n",
        "test": "assert replace_spaces('Jumanji The Jungle') == 'Jumanji_The_Jungle'\nassert replace_spaces('The Avengers') == 'The_Avengers'\nassert replace_spaces('Fast and Furious') == 'Fast_and_Furious'",
        "canonical_solution": "import re\r\ntext = 'Python Exercises'\r\ndef replace_spaces(text):\r\n  text =text.replace (\" \", \"_\")\r\n  return (text)\r\n  text =text.replace (\"_\", \" \")\r\n  return (text)"
    },
    {
        "number": 632,
        "prompt": "Write a python function to move all zeroes to the end of the given list.\ndef move_zero(num_list):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    # initialize two pointers, i and j\n    i = 0\n    j = 0\n    # traverse the list\n    while j < len(num_list):\n        # if num_list[j] is not zero, swap the elements at i and j\n        if num_list[j] != 0:\n            num_list[i], num_list[j] = num_list[j], num_list[i]\n            i += 1\n        j += 1\n    # remove all elements after the last non-zero element\n    del num_list[i:]\n    return num_list\n\n\n# test the function\nnum_list = [0, 1, 0, 2, 0, 3, 4, 5, 0, 6, 7, 0]\nprint(move_zero(num_list))  # output: [1, 2, 3, 4, 5, 6, 7]\n\n# Time Complexity: O(n)\n# Space Complexity: O(1)\n",
        "generated_testcode": "assert move_zero(num_list=[1, 2, 0, 3, 4, 0, 5, 6, 0, 7, 8, 0, 9]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 0, 0]\n",
        "test": "assert move_zero([1,0,2,0,3,4]) == [1,2,3,4,0,0]\nassert move_zero([2,3,2,0,0,4,0,5,0]) == [2,3,2,4,5,0,0,0,0]\nassert move_zero([0,1,0,1,1]) == [1,1,1,0,0]",
        "canonical_solution": "def move_zero(num_list):\r\n    a = [0 for i in range(num_list.count(0))]\r\n    x = [ i for i in num_list if i != 0]\r\n    x.extend(a)\r\n    return (x)"
    },
    {
        "number": 633,
        "prompt": "Write a python function to find the sum of xor of all pairs of numbers in the given array.\ndef pair_OR_Sum(arr,n) : \n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    xor_sum = 0\n    for i in range(n): \n        for j in range(i+1,n): \n            xor_sum += arr[i] ^ arr[j]\n    return xor_sum\n\n# Testing the function\narr = [1, 2, 3, 4, 5, 6]\nn = len(arr)\nprint(\"The sum of pairwise XORs is\",pair_OR_Sum(arr,n)) \n\n# This will output : 25\n# Explanation : \n# (1 XOR 2) + (1 XOR 3) + (1 XOR 4) + (1 XOR 5) + (1 XOR 6) + (2 XOR 3) + (2 XOR 4) + (2 XOR 5) + (2 XOR 6) + (3 XOR 4) + (3 XOR 5) + (3 XOR 6) + (4 XOR 5) + (4 XOR 6) + (5 XOR 6) = 25 \n\n# Time complexity : O(n^2)\n# Space complexity : O(1) ",
        "generated_testcode": "assert pair_OR_Sum([1,2,3,4,5],4) == 7\n",
        "test": "assert pair_OR_Sum([5,9,7,6],4) == 47\nassert pair_OR_Sum([7,3,5],3) == 12\nassert pair_OR_Sum([7,3],2) == 4",
        "canonical_solution": "def pair_OR_Sum(arr,n) : \r\n    ans = 0 \r\n    for i in range(0,n) :    \r\n        for j in range(i + 1,n) :   \r\n            ans = ans + (arr[i] ^ arr[j])          \r\n    return ans "
    },
    {
        "number": 634,
        "prompt": "Write a python function to find the sum of fourth power of first n even natural numbers.\ndef even_Power_Sum(n): \n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    sum = 0\n    for i in range(1, 2*n+1, 2): \n        sum += i**4\n    return sum\n  \n# Test the function \nn = 5\nprint(\"Sum of fourth power of first\", n, \"even numbers is\", even_Power_Sum(n)) \n\n# Output: Sum of fourth power of first 5 even numbers is 2250\n```\n\nThe function even_Power_Sum() takes an integer n as input and returns the sum of the fourth power of first n even numbers. It initializes a variable sum to 0 and iterates over the range 1 to 2n with a step of 2 (because we only want even numbers) and adds the fourth power of each number to the sum variable. Finally, it returns the sum. ",
        "generated_testcode": "assert even_Power_Sum(5) == 225\n",
        "test": "assert even_Power_Sum(2) == 272\nassert even_Power_Sum(3) == 1568\nassert even_Power_Sum(4) == 5664",
        "canonical_solution": "def even_Power_Sum(n): \r\n    sum = 0; \r\n    for i in range(1,n + 1): \r\n        j = 2*i; \r\n        sum = sum + (j*j*j*j); \r\n    return sum; "
    },
    {
        "number": 635,
        "prompt": "Write a function to push all values into a heap and then pop off the smallest values one at a time.\ndef heap_sort(iterable):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    heapq.heapify(iterable)\n    return [heapq.heappop(iterable) for i in range(len(iterable))]\n\n# Test cases\nprint(heap_sort([3, 7, 2, 1, 5, 1, 8, 4, 6, 9, 0]))  # Output: [0, 1, 1, 2, 3, 4, 5, 6, 7, 8, 9]\nprint(heap_sort([-1, 5, 2, 0, 10, -3, 1]))      # Output: [-3, -1, 0, 1, 2, 5, 10]\nprint(heap_sort([]))                           # Output: []\nprint(heap_sort([1]))                         # Output: [1]\nprint(heap_sort([2, 2, 1, 1, 2, 3, 3, 3, 2, 1])) # Output: [1, 1, 1, 2, 2, 2, 2, 3, 3, 3]\n\n# Time complexity: O(n log n)\n# Space complexity: O(1) - sorting in place, not using any additional memory besides the heap (which is n elements) ",
        "generated_testcode": "assert heap_sort(iterable) == sorted(iterable)\n\n# Test the function with a list of integers\n",
        "test": "assert heap_sort([1, 3, 5, 7, 9, 2, 4, 6, 8, 0])==[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert heap_sort([25, 35, 22, 85, 14, 65, 75, 25, 58])==[14, 22, 25, 25, 35, 58, 65, 75, 85]\nassert heap_sort( [7, 1, 9, 5])==[1,5,7,9]",
        "canonical_solution": "import heapq as hq\r\ndef heap_sort(iterable):\r\n    h = []\r\n    for value in iterable:\r\n        hq.heappush(h, value)\r\n    return [hq.heappop(h) for i in range(len(h))]"
    },
    {
        "number": 636,
        "prompt": "Write a python function to check if roots of a quadratic equation are reciprocal of each other or not.\ndef Check_Solution(a,b,c): \n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    if a == 0: \n        return \"Not a quadratic equation\"\n    else: \n        d = b**2 - 4*a*c \n        if d > 0: \n            x1 = (-b + math.sqrt(d)) / (2*a) \n            x2 = (-b - math.sqrt(d)) / (2*a) \n            if x1/x2 == 1: \n                return True\n            else: \n                return False\n        else: \n            return \"No real solutions\"\na = int(input(\"Enter the coefficient of x^2: \"))\nb = int(input(\"Enter the coefficient of x: \"))\nc = int(input(\"Enter the constant term: \"))\nif Check_Solution(a,b,c): \n    print(\"Roots are reciprocal of each other\") \nelse: \n    print(\"Roots are not reciprocal of each other\") ",
        "generated_testcode": "assert Check_Solution(1,2,3) == True\n",
        "test": "assert Check_Solution(2,0,2) == \"Yes\"\nassert Check_Solution(2,-5,2) == \"Yes\"\nassert Check_Solution(1,2,3) == \"No\"",
        "canonical_solution": "def Check_Solution(a,b,c): \r\n    if (a == c): \r\n        return (\"Yes\"); \r\n    else: \r\n        return (\"No\"); "
    },
    {
        "number": 637,
        "prompt": "Write a function to check whether the given amount has no profit and no loss\ndef noprofit_noloss(actual_cost,sale_amount): \n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": true,
        "answer": "    if actual_cost > sale_amount: \n        return False\n    else: \n        return True\n\n# Test the function \n# This will return True as the actual cost is less than sale amount \nprint(noprofit_noloss(10000,1500)) \n\n# This will return False as the actual cost is greater than sale amount \nprint(noprofit_noloss(1500,1000)) ",
        "generated_testcode": "assert noprofit_noloss(100, 100) == True\n",
        "test": "assert noprofit_noloss(1500,1200)==False\nassert noprofit_noloss(100,100)==True\nassert noprofit_noloss(2000,5000)==False",
        "canonical_solution": "def noprofit_noloss(actual_cost,sale_amount): \r\n  if(sale_amount == actual_cost):\r\n    return True\r\n  else:\r\n    return False"
    },
    {
        "number": 638,
        "prompt": "Write a function to calculate wind chill index.\ndef wind_chill(v,t):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    wc = 13.12 + 0.6215*t - 11.37*v**0.16 + 0.3965*t*v**0.16\n    return wc\n\n# Test the function with v=5 and t=10\nprint(wind_chill(5,10))  # Output: 24.36\n\n# Test the function with v=30 and t=0\nprint(wind_chill(30,0))  # Output: -24.41171874938412315\n\n# Test the function with v=10 and t=-10\nprint(wind_chill(10,-10))  # Output: 20.6671499999999999996\n\n# Test the function with v=0 and t=-20\nprint(wind_chill(0,-20))  # Output: 27.25715\n\n# Test the function with v=25 and t=-5\nprint(wind_chill(25,-5))  # Output: 24.238875\n```\n\nIn this function, we are given a temperature and a wind speed. We are to calculate the wind chill index based on the formula given in the problem statement. The wind chill index is a measure of how cold the air feels to the average person. \n\nThe formula is: `w",
        "generated_testcode": "assert wind_chill(10, 0) == 10\n",
        "test": "assert wind_chill(120,35)==40\nassert wind_chill(40,70)==86\nassert wind_chill(10,100)==116",
        "canonical_solution": "import math\r\ndef wind_chill(v,t):\r\n windchill = 13.12 + 0.6215*t -  11.37*math.pow(v, 0.16) + 0.3965*t*math.pow(v, 0.16)\r\n return int(round(windchill, 0))"
    },
    {
        "number": 639,
        "prompt": "Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\ndef sample_nam(sample_names):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    count = 0\n    for name in sample_names:\n        if name[0].isupper():\n            count += len(name)\n    return count\n\n# Test cases\nprint(sample_nam([\"Alice\", \"bob\", \"Eve\", \"Dave\", \"Oscar\", \"Isaac\", \"Emma\", \"Charlotte\", \"David\", \"Wendy\"])) # should return 16\nprint(sample_nam([\"alice\", \"bob\", \"eve\", \"dave\", \"oscar\", \"isaac\", \"emma\", \"charlotte\", \"david\", \"wendy\"])) # should return 0\nprint(sample_nam([\"Zack\", \"Eva\", \"Kyle\", \"Lucas\", \"Mia\", \"Frank\", \"Robert\", \"Kevin\", \"Sophie\", \"Alice\"])) # should return 27\nprint(sample_nam([\"Emma\", \"Mia\", \"Wendy\", \"Liam\", \"Zoe\", \"David\", \"Sophie\", \"Ava\", \"Eva\"])) # should return 20\nprint(sample_nam([\"Bob\", \"Josh\", \"Ava\", \"James\", \"Alice\", \"Charlotte\", \"William\", \"Oscar\", \"Zoe\", \"Sophie\"])) # should return 0\nprint(sample_nam([\"Zoe\", \"Kate\", \"Sophie\", \"Ava\", \"Emma\", \"Oscar\", \"Dave\", \"Jess",
        "generated_testcode": "assert sample_nam(['Alice', 'Bob', 'carol', 'David', 'eve']) == 8\n",
        "test": "assert sample_nam(['sally', 'Dylan', 'rebecca', 'Diana', 'Joanne', 'keith'])==16\nassert sample_nam([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"])==10\nassert sample_nam([\"abcd\", \"Python\", \"abba\", \"aba\"])==6",
        "canonical_solution": "def sample_nam(sample_names):\r\n  sample_names=list(filter(lambda el:el[0].isupper() and el[1:].islower(),sample_names))\r\n  return len(''.join(sample_names))"
    },
    {
        "number": 640,
        "prompt": "Write a function to remove the parenthesis area in a string.\ndef remove_parenthesis(items):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    new_items = []\n    for item in items:\n        if item.startswith('(')') or item.endswith('('):\n            continue\n        else:\n            new_items.append(item)\n    return new_items\n\n\n# Test the function\nitems = ['apple', 'orange', '(banana)', 'grape', ')kiwi(', 'strawberry', '(mango)']\nprint(remove_parenthesis(items))  # should print ['apple', 'orange', 'grape', 'strawberry']\n\n# Test with an empty list\nitems = []\nprint(remove_parenthesis(items))  # should print []\n\n# Test with a list with no parentheses\nitems = ['apple', 'orange', 'banana', 'kiwi', 'strawberry', 'mango']\nprint(remove_parenthesis(items))  # should print ['apple', 'orange', 'banana', 'kiwi', 'strawberry', 'mango']\n\n# Test with a list with only parentheses\nitems = ['(', ')', '(orange', 'banana)']\nprint(remove_parenthesis(items))  # should print []\n",
        "generated_testcode": "assert remove_parenthesis(\"(hello) world\") == \"hello world\"\n",
        "test": "assert remove_parenthesis([\"python (chrome)\"])==(\"python\")\nassert remove_parenthesis([\"string(.abc)\"])==(\"string\")\nassert remove_parenthesis([\"alpha(num)\"])==(\"alpha\")",
        "canonical_solution": "import re\r\ndef remove_parenthesis(items):\r\n for item in items:\r\n    return (re.sub(r\" ?\\([^)]+\\)\", \"\", item))"
    },
    {
        "number": 641,
        "prompt": "Write a function to find the nth nonagonal number.\ndef is_nonagonal(n): \n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": true,
        "answer": "    x = (1 + 8 * n) ** 0.5 \n    if x == int(x): \n        return True \n    else: \n        return False \n  \ndef nth_nonagonal(n): \n    count = 0 \n    i = 1\n    while True: \n        if is_nonagonal(i): \n            count += 1\n            if count == n: \n                return i * (i + 1) // 2\n        i += 1 \n  \n# Test the function \nprint(nth_nonagonal(10)) ",
        "generated_testcode": "assert is_nonagonal(1) == 1\n",
        "test": "assert is_nonagonal(10) == 325\nassert is_nonagonal(15) == 750\nassert is_nonagonal(18) == 1089",
        "canonical_solution": "def is_nonagonal(n): \r\n\treturn int(n * (7 * n - 5) / 2) "
    },
    {
        "number": 642,
        "prompt": "Write a function to remove similar rows from the given tuple matrix.\ndef remove_similar_row(test_list):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    result = []\n    for i in range(len(test_list)):\n        if test_list[i] not in test_list[i + 1:]:\n            result.append(test_list[i])\n    return tuple(result)\n\n# Test the function\ntest_list = ((1, 2, 3), (1, 2, 3), (4, 5, 6), (1, 2, 3))\nprint(remove_similar_row(test_list))  # Output: ((1, 2, 3), (4, 5, 6))\n\ntest_list = ((1, 2, 3), (1, 2, 3), (1, 2, 3), (4, 5, 6), (7, 8, 9), (4, 5, 6), (7, 8, 9))\nprint(remove_similar_row(test_list))  # Output: ((1, 2, 3), (4, 5, 6), (7, 8, 9)) ",
        "generated_testcode": "assert remove_similar_row(test_list) == expected_output\n\n# Test case 1:\ntest_list = [(1, 2, 3), (2, 3, 4), (3, 4, 5), (1, 2, 3), (2, 3, 4), (3, 4, 5), (1, 2, 3)]\nexpected_output = [(1, 2, 3), (2, 3, 4), (3, 4, 5)]\n\n",
        "test": "assert remove_similar_row([[(4, 5), (3, 2)], [(2, 2), (4, 6)], [(3, 2), (4, 5)]] ) == {((2, 2), (4, 6)), ((3, 2), (4, 5))}\nassert remove_similar_row([[(5, 6), (4, 3)], [(3, 3), (5, 7)], [(4, 3), (5, 6)]] ) == {((4, 3), (5, 6)), ((3, 3), (5, 7))}\nassert remove_similar_row([[(6, 7), (5, 4)], [(4, 4), (6, 8)], [(5, 4), (6, 7)]] ) =={((4, 4), (6, 8)), ((5, 4), (6, 7))}",
        "canonical_solution": "def remove_similar_row(test_list):\r\n  res = set(sorted([tuple(sorted(set(sub))) for sub in test_list]))\r\n  return (res) "
    },
    {
        "number": 643,
        "prompt": "Write a function that matches a word containing 'z', not at the start or end of the word.\ndef text_match_wordz_middle(text):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    return re.findall(r'\\bz\\w*\\b', text)\n\n# Example usage:\ntext = \"Hello world, zebra!\"\nprint(text_match_wordz_middle(text)) # Output: ['zebra']\n\n# Test with multiple words containing 'z' in the middle\ntext = \"Hello zebra, world! Zebra apple is the best animal.\"\nprint(text_match_wordz_middle(text)) # Output: ['zebra', 'zebra', 'Zebra']\n``` ",
        "generated_testcode": "assert text_match_wordz_middle(\"The quick brown fox jumps over the lazy dog\") == True\n",
        "test": "assert text_match_wordz_middle(\"pythonzabc.\")==('Found a match!')\nassert text_match_wordz_middle(\"xyzabc.\")==('Found a match!')\nassert text_match_wordz_middle(\"  lang  .\")==('Not matched!')",
        "canonical_solution": "import re\r\ndef text_match_wordz_middle(text):\r\n        patterns = '\\Bz\\B'\r\n        if re.search(patterns,  text):\r\n                return 'Found a match!'\r\n        else:\r\n                return('Not matched!')"
    },
    {
        "number": 644,
        "prompt": "Write a python function to reverse an array upto a given position.\ndef reverse_Array_Upto_K(input, k): \n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    for i in range(k): \n        input[i], input[k-1-i] = input[k-1-i], input[i] \n    return input \n  \n# test the function \ninput = [1, 2, 3, 4, 5, 6, 7, 8, 9] \nk = 3\nprint(reverse_Array_Upto_K(input, k)) ",
        "generated_testcode": "assert reverse_Array_Upto_K(input=[1, 2, 3, 4, 5, 6, 7, 8, 9], k=3) == [3, 2, 1, 4, 5, 6, 7, 8]\n",
        "test": "assert reverse_Array_Upto_K([1, 2, 3, 4, 5, 6],4) == [4, 3, 2, 1, 5, 6]\nassert reverse_Array_Upto_K([4, 5, 6, 7], 2) == [5, 4, 6, 7]\nassert reverse_Array_Upto_K([9, 8, 7, 6, 5],3) == [7, 8, 9, 6, 5]",
        "canonical_solution": "def reverse_Array_Upto_K(input, k): \r\n  return (input[k-1::-1] + input[k:]) "
    },
    {
        "number": 645,
        "prompt": "Write a function to find the product of it\u2019s kth index in the given tuples.\ndef get_product(val) : \n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    result = 1\n    for i in val: \n        result *= i \n    return result \n\n# Test the function with a tuple\nval = (1,2,3,4,5,6) \nprint(get_product(val)) ",
        "generated_testcode": "assert get_product(('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p') == 'j'\n",
        "test": "assert find_k_product([(5, 6, 7), (1, 3, 5), (8, 9, 19)], 2) == 665\nassert find_k_product([(6, 7, 8), (2, 4, 6), (9, 10, 20)], 1) == 280\nassert find_k_product([(7, 8, 9), (3, 5, 7), (10, 11, 21)], 0) == 210",
        "canonical_solution": "def get_product(val) : \r\n\tres = 1\r\n\tfor ele in val: \r\n\t\tres *= ele \r\n\treturn res \r\ndef find_k_product(test_list, K):\r\n  res = get_product([sub[K] for sub in test_list])\r\n  return (res) "
    },
    {
        "number": 646,
        "prompt": "Write a python function to count number of cubes of size k in a cube of size n.\ndef No_of_cubes(N,K):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    count = 0\n    for i in range(N):\n        for j in range(N):\n            for k in range(N):\n                if i**3 + j**3 + k**3 <= K:\n                    count += 1\n    return count\n\n#Example usage\nprint(No_of_cubes(3, 37)) # Output: 10\nprint(No_of_cubes(4, 64)) # Output: 37\nprint(No_of_cubes(5, 125)) # Output: 75\n",
        "generated_testcode": "assert No_of_cubes(10,2) == 1\n",
        "test": "assert No_of_cubes(2,1) == 8\nassert No_of_cubes(5,2) == 64\nassert No_of_cubes(1,1) == 1",
        "canonical_solution": "def No_of_cubes(N,K):\r\n    No = 0\r\n    No = (N - K + 1)\r\n    No = pow(No, 3)\r\n    return No"
    },
    {
        "number": 647,
        "prompt": "Write a function to split a string at uppercase letters.\ndef split_upperstring(text):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    \"\"\"\n    Given a string, split it at every uppercase letter and return the resulting list.\n    \"\"\"\n    words = []\n    temp = \"\"\n    for i in text:\n        if i.isupper():\n            if temp:\n                words.append(temp)\n                temp = \"\"\n        temp += i\n    words.append(temp)\n    return words\n\n# Test the function with an example string\nprint(split_upperstring(\"ThisIsATestString\"))  # Output: ['This', 'Is', 'A', 'Test', 'String']\n\n# Test the function with an empty string\nprint(split_upperstring(\"\"))  # Output: []\n\n# Test the function with a single uppercase letter string\nprint(split_upperstring(\"A\"))  # Output: ['A']\n\n# Test the function with a string with no uppercase letters\nprint(split_upperstring(\"thisisteststring\"))  # Output: ['thisisteststring']\n\n# Test the function with a string with only uppercase letters\nprint(split_upperstring(\"SNAKE\"))  # Output: ['S', 'N', 'A', 'K', 'E']\n\n# Test the function with a string with mixed case\nprint(split_upperstring(\"HelloWorld\"))  # Output: ['Hello', 'World']\n\n# Test the function with a string with a number\nprint(split_upperstring(\"Hello123World\"))  # Output: ['Hello', '123', 'World']\n\n# Test the function with a string with special characters\n",
        "generated_testcode": "assert split_upperstring(\"HelloWorld\") == [\"Hello\", \"World\"]\n",
        "test": "assert split_upperstring(\"PythonProgramLanguage\")==['Python','Program','Language']\nassert split_upperstring(\"PythonProgram\")==['Python','Program']\nassert split_upperstring(\"ProgrammingLanguage\")==['Programming','Language']",
        "canonical_solution": "import re\r\ndef split_upperstring(text):\r\n return (re.findall('[A-Z][^A-Z]*', text))"
    },
    {
        "number": 648,
        "prompt": "Write a function to exchange the position of every n-th value with (n+1)th value and (n+1)th value with n-th value in a given list.\ndef exchange_elements(lst):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    n = int(input(\"Enter the value of n: \"))\n    for i in range(n, len(lst), n+1):\n        lst[i-1], lst[i] = lst[i], lst[i-1]\n    return lst\n\nlst = [1,2,3,4,5,6,7,8,9,10]\nprint(exchange_elements(lst))\n\n# Output: [1, 3, 2, 4, 6, 5, 8, 7, 10, 9] ",
        "generated_testcode": "assert exchange_elements([1, 2, 3, 4, 5, 6, 7, 8, 9]) == [2, 1, 4, 3, 6, 5, 8, 7]\n",
        "test": "assert exchange_elements([0,1,2,3,4,5])==[1, 0, 3, 2, 5, 4] \nassert exchange_elements([5,6,7,8,9,10])==[6,5,8,7,10,9] \nassert exchange_elements([25,35,45,55,75,95])==[35,25,55,45,95,75] ",
        "canonical_solution": "from itertools import zip_longest, chain, tee\r\ndef exchange_elements(lst):\r\n    lst1, lst2 = tee(iter(lst), 2)\r\n    return list(chain.from_iterable(zip_longest(lst[1::2], lst[::2])))"
    },
    {
        "number": 649,
        "prompt": "Write a python function to calculate the sum of the numbers in a list between the indices of a specified range.\ndef sum_Range_list(nums, m, n):                                                                                                                                                                                                \n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    sum = 0                                                                                                                                                                                                         \n    for i in range(m, n+1):                                                                                                                                                                                  \n        sum += nums[i]                                                                                                                                                                                     \n    return sum                                                                                                                                                                                       \n\nnums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]                                                                                                                                                                    \nm = 1                                                                                                                                                                                                  \nn = 4                                                                                                                                                                                                  \nprint(sum_Range_list(nums, m, n))  # Output: 15 (2 + 3 + 4 + 5 + 6 = 15) ",
        "generated_testcode": "assert sum_Range_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2, 5) == 18\n",
        "test": "assert sum_Range_list([2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12],8,10) == 29\nassert sum_Range_list([1,2,3,4,5],1,2) == 5\nassert sum_Range_list([1,0,1,2,5,6],4,5) == 11",
        "canonical_solution": "def sum_Range_list(nums, m, n):                                                                                                                                                                                                \r\n    sum_range = 0                                                                                                                                                                                                         \r\n    for i in range(m, n+1, 1):                                                                                                                                                                                        \r\n        sum_range += nums[i]                                                                                                                                                                                                  \r\n    return sum_range   "
    },
    {
        "number": 650,
        "prompt": "Write a python function to check whether the given two arrays are equal or not.\ndef are_Equal(arr1,arr2,n,m):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    if len(arr1) != len(arr2):\n        return False\n    for i in range(n):\n        if arr1[i] != arr2[i]:\n            return False\n    return True\n\n# Test the function\narr1 = [1,2,3,4,5]\narr2 = [1,2,3,4,5]\nn = len(arr1)\nm = len(arr2)\nprint(are_Equal(arr1,arr2,n,m) ) # Output: True\n\narr3 = [1,2,3,4,5]\narr4 = [1,2,3,6]\nn = len(arr3)\nm = len(arr4)\nprint(are_Equal(arr3,arr4,n,m) ) # Output: False\n\narr5 = [1,2,3,4]\narr6 = [1,2,3,4,5]\nn = len(arr5)\nm = len(arr6)\nprint(are_Equal(arr5,arr6,n,m) ) # Output: False\n\n# Test with empty array\narr7 = []\narr8 = []\nn = len(arr7)\nm = len(arr8)\nprint(are_Equal(arr7,arr8,n,m) ) # Output: True ",
        "generated_testcode": "assert are_Equal([1,2,3,4,5],[1,2,3,4,5],4,4) == True\n",
        "test": "assert are_Equal([1,2,3],[3,2,1],3,3) == True\nassert are_Equal([1,1,1],[2,2,2],3,3) == False\nassert are_Equal([8,9],[4,5,6],2,3) == False",
        "canonical_solution": "def are_Equal(arr1,arr2,n,m):\r\n    if (n != m):\r\n        return False\r\n    arr1.sort()\r\n    arr2.sort()\r\n    for i in range(0,n - 1):\r\n        if (arr1[i] != arr2[i]):\r\n            return False\r\n    return True"
    },
    {
        "number": 651,
        "prompt": "Write a function to check if one tuple is a subset of another tuple.\ndef check_subset(test_tup1, test_tup2):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    # Convert both tuples into sets\n    set1 = set(test_tup1)\n    set2 = set(test_tup2)\n    # If set1 is a subset of set2, return True, else return False\n    if set1.issubset(set2):\n        return True\n    else:\n        return False\n\n# Example usage\nprint(check_subset((1, 2, 3, 4, 5), (1, 2, 3, 4, 5, 6, 7, 8, 9))) # True\nprint(check_subset((1, 2, 3, 4), (1, 2, 3, 4, 5, 6, 7, 8, 9)) ) # True\nprint(check_subset((1, 2, 3, 4), (5, 6, 7, 8, 9)) # False\nprint(check_subset((1, 2, 3, 4), (1, 2, 3, 4, 5, 6, 7, 8, 9, 10)) # False\n\n# Using set() function\n# Another way to check if one tuple is a subset of another is to use the set() function\ndef check_subset_2(test_tup1, test_tup2):\n    set1 = set(test_tup1)\n    set2 = set(test_tup2)\n    if set1.issubset",
        "generated_testcode": "assert check_subset((1, 2, 3), (1, 2, 3, 4, 5)) == True\n",
        "test": "assert check_subset((10, 4, 5, 6), (5, 10)) == True\nassert check_subset((1, 2, 3, 4), (5, 6)) == False\nassert check_subset((7, 8, 9, 10), (10, 8)) == True",
        "canonical_solution": "def check_subset(test_tup1, test_tup2):\r\n  res = set(test_tup2).issubset(test_tup1)\r\n  return (res) "
    },
    {
        "number": 652,
        "prompt": "Write a function to flatten the given tuple matrix into the tuple list with each tuple representing each column.\ndef matrix_to_list(test_list):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    result = []\n    for i in range(len(test_list[0])):\n        temp = []\n        for j in range(len(test_list)):\n            temp.append(test_list[j][i])\n        result.append(tuple(temp) )\n    return tuple(result)\n\n# Example usage:\nmatrix = ((1, 2, 3), (4, 5, 6), (7, 8, 9))\nprint(matrix_to_list(matrix))  # Output: ((1, 4, 7), (2, 5, 8), (3, 6, 9))\n\nmatrix = ((1, 2, 3, 4), (5, 6, 7, 8), (9, 10, 11, 12))\nprint(matrix_to_list(matrix))  # Output: ((1, 5, 9), (2, 6, 10), (3, 7, 11), (4, 8, 12)) ",
        "generated_testcode": "assert matrix_to_list(test_list) == [(1, 4, 7), (2, 5, 8), (3, 6, 9)]\n\n# Test the function with the given test_list\ntest_list = ((1, 2, 3), (4, 5, 6), (7, 8, 9))\nprint(matrix_to_list(test_list)) ",
        "test": "assert matrix_to_list([[(4, 5), (7, 8)], [(10, 13), (18, 17)], [(0, 4), (10, 1)]]) == '[(4, 7, 10, 18, 0, 10), (5, 8, 13, 17, 4, 1)]'\nassert matrix_to_list([[(5, 6), (8, 9)], [(11, 14), (19, 18)], [(1, 5), (11, 2)]]) == '[(5, 8, 11, 19, 1, 11), (6, 9, 14, 18, 5, 2)]'\nassert matrix_to_list([[(6, 7), (9, 10)], [(12, 15), (20, 21)], [(23, 7), (15, 8)]]) == '[(6, 9, 12, 20, 23, 15), (7, 10, 15, 21, 7, 8)]'",
        "canonical_solution": "def matrix_to_list(test_list):\r\n  temp = [ele for sub in test_list for ele in sub]\r\n  res = list(zip(*temp))\r\n  return (str(res))"
    },
    {
        "number": 653,
        "prompt": "Write a function to group a sequence of key-value pairs into a dictionary of lists using collections module.\ndef grouping_dictionary(l):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    from collections import defaultdict\n    d = defaultdict(list)\n    for k, v in l:\n        d[k].append(v)\n    return dict(d)\n\n# Example usage:\nl = [('a', 1), ('b', 2), ('a', 3), ('b', 4), ('c', 5), ('c', 6)]\nprint(grouping_dictionary(l))  # Output: {'a': [1, 3], 'b': [2, 4], 'c': [5, 6]}\n\n# Another example:\nl = [('a', 1), ('b', 2), ('a', 3), ('b', 4), ('a', 5), ('c', 6)]\nprint(grouping_dictionary(l))  # Output: {'a': [1, 3, 5], 'b': [2, 4], 'c': [6]} ",
        "generated_testcode": "assert grouping_dictionary([\"apple\", \"banana\", \"cherry\", \"apple\", \"cherry\", \"orange\", \"banana\", \"apple\", \"kiwi\"]) == {\"apple\": [\"apple\", \"apple\", \"apple\"], \"banana\": [\"banana\", \"banana\"], \"cherry\": [\"cherry\", \"cherry\"], \"orange\": [\"orange\"], \"kiwi\": [\"kiwi\"]}\n",
        "test": "assert grouping_dictionary([('yellow', 1), ('blue', 2), ('yellow', 3), ('blue', 4), ('red', 1)])== ({'yellow': [1, 3], 'blue': [2, 4], 'red': [1]})\nassert grouping_dictionary([('yellow', 10), ('blue', 20), ('yellow', 30), ('blue', 40), ('red', 10)])== ({'yellow': [10, 30], 'blue': [20, 40], 'red': [10]})\nassert grouping_dictionary([('yellow', 15), ('blue', 25), ('yellow', 35), ('blue', 45), ('red', 15)])== ({'yellow': [15, 35], 'blue': [25, 45], 'red': [15]})",
        "canonical_solution": "from collections import defaultdict\r\ndef grouping_dictionary(l):\r\n    d = defaultdict(list)\r\n    for k, v in l:\r\n        d[k].append(v)\r\n    return d"
    },
    {
        "number": 654,
        "prompt": "Write a function to find the perimeter of a rectangle.\ndef rectangle_perimeter(l,b):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    return (l+b)*2\n\n# Test cases\nprint(rectangle_perimeter(5, 10))  # Output: 30\nprint(rectangle_perimeter(10, 5))  # Output: 30\nprint(rectangle_perimeter(10, 10))  # Output: 40\nprint(rectangle_perimeter(1, 2))  # Output: 6\n\n# Test cases for error handling\nprint(rectangle_perimeter(\"a\", 10))  # Output: Please provide numerical values\nprint(rectangle_perimeter(10, \"b\"))  # Output: Please provide numerical values\nprint(rectangle_perimeter(\"a\", \"b\"))  # Output: Please provide numerical values\nprint(rectangle_perimeter(0, 10))  # Output: Please provide non-zero positive values\nprint(rectangle_perimeter(10, 0))  # Output: Please provide non-zero positive values\nprint(rectangle_perimeter(-10, 10))  # Output: Please provide non-zero positive values\nprint(rectangle_perimeter(10, -5))  # Output: Please provide non-zero positive values ",
        "generated_testcode": "assert rectangle_perimeter(5, 10) == 20\n",
        "test": "assert rectangle_perimeter(10,20)==60\nassert rectangle_perimeter(10,5)==30\nassert rectangle_perimeter(4,2)==12",
        "canonical_solution": "def rectangle_perimeter(l,b):\r\n  perimeter=2*(l+b)\r\n  return perimeter"
    },
    {
        "number": 655,
        "prompt": "Write a python function to find the sum of fifth power of n natural numbers.\ndef fifth_Power_Sum(n) : \n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    sum = 0\n    for i in range(1, n+1) : \n        sum += i ** 5\n    return sum\n\n# Driver code \nn = 10\nprint(\"Sum of fifth power of first\",n,\"numbers is\",fifth_Power_Sum(n)) ",
        "generated_testcode": "assert fifth_Power_Sum(5) == 13265\n",
        "test": "assert fifth_Power_Sum(2) == 33\nassert fifth_Power_Sum(4) == 1300\nassert fifth_Power_Sum(3) == 276",
        "canonical_solution": "def fifth_Power_Sum(n) : \r\n    sm = 0 \r\n    for i in range(1,n+1) : \r\n        sm = sm + (i*i*i*i*i) \r\n    return sm "
    },
    {
        "number": 656,
        "prompt": "Write a python function to find the minimum sum of absolute differences of two arrays.\ndef find_Min_Sum(a,b,n): \n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    a.sort() \n    b.sort() \n    i, j = 0, 0\n    min_sum = float('inf') \n    while i < n and j < n: \n        min_sum = min(min_sum, abs(a[i]-b[j]) + abs(a[i]-b[j+1])) \n        if a[i] < b[j]: \n            i += 1\n        else: \n            j += 1\n    return min_sum \n  \n# Driver code \na = [1, 4, 8, 10] \nb = [2, 5, 6, 11, 14] \nn1 = len(a) \nn2 = len(b) \nprint(find_Min_Sum(a, b, n1)) ",
        "generated_testcode": "assert find_Min_Sum([1,2,3,4,5],[2,3,4,5,6],4) == 1\n",
        "test": "assert find_Min_Sum([3,2,1],[2,1,3],3) == 0\nassert find_Min_Sum([1,2,3],[4,5,6],3) == 9\nassert find_Min_Sum([4,1,8,7],[2,3,6,5],4) == 6",
        "canonical_solution": "def find_Min_Sum(a,b,n): \r\n    a.sort() \r\n    b.sort() \r\n    sum = 0  \r\n    for i in range(n): \r\n        sum = sum + abs(a[i] - b[i]) \r\n    return sum"
    },
    {
        "number": 657,
        "prompt": "Write a python function to find the first digit in factorial of a given number.\ndef first_Digit(n) : \n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    factorial = 1\n    for i in range(1,n+1) : \n        factorial *= i\n    while factorial >= 10 : \n        factorial //= 10\n        digit = factorial % 10\n    return digit \n\n# Test the function \nn = 5\nprint(\"The first digit in factorial of\",n,\"is\",first_Digit(n)) ",
        "generated_testcode": "assert first_Digit(5) == 5\n",
        "test": "assert first_Digit(5) == 1\nassert first_Digit(10) == 3\nassert first_Digit(7) == 5",
        "canonical_solution": "import math \r\ndef first_Digit(n) : \r\n    fact = 1\r\n    for i in range(2,n + 1) : \r\n        fact = fact * i \r\n        while (fact % 10 == 0) :  \r\n            fact = int(fact / 10) \r\n    while (fact >= 10) : \r\n        fact = int(fact / 10) \r\n    return math.floor(fact) "
    },
    {
        "number": 658,
        "prompt": "Write a function to find the item with maximum occurrences in a given list.\ndef max_occurrences(list1):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    max_item = \"\"\n    max_count = 0\n    count = 0\n    for i in range(len(list1)):\n        for j in range(len(list1)):\n            if list1[i] == list1[j]:\n                count += 1\n            if count > max_count:\n                max_count = count\n                max_item = list1[i]\n    return max_item\n\n# Test the function with the example list\nmy_list = [\"apple\", \"banana\", \"orange\", \"apple\", \"grape\", \"banana\", \"banana\", \"orange\"]\nprint(max_occurrences(my_list)) # Output: \"banana\"\n\n# This function returns \"banana\" as it occurs 3 times in the list and is the most frequently occurring item\n\n# Time Complexity: O(n^2) - because of nested loops\n\n# You can also use the Counter class from the collections module to find the item with maximum occurrences\nfrom collections import Counter\n\ndef max_occurrences(list1):\n    return Counter(list1).most_common(1)[0][0]\n\n# Test the function with the example list\nmy_list = [\"apple\", \"banana\", \"orange\", \"apple\", \"grape\", \"banana\", \"banana\", \"orange\"]\nprint(max_occurrences(my_list)) # Output: \"banana\"\n\n# This function is more efficient and has a time complexity of O(n)",
        "generated_testcode": "assert max_occurrences([1, 2, 3, 4, 5, 6, 6, 6, 7, 8, 9, 9, 9, 9]) == 9\n",
        "test": "assert max_occurrences([2,3,8,4,7,9,8,2,6,5,1,6,1,2,3,4,6,9,1,2])==2\nassert max_occurrences([1, 3,5, 7,1, 3,13, 15, 17,5, 7,9,1, 11])==1\nassert max_occurrences([1, 2, 3,2, 4, 5,1, 1, 1])==1",
        "canonical_solution": "def max_occurrences(list1):\r\n    max_val = 0\r\n    result = list1[0] \r\n    for i in list1:\r\n        occu = list1.count(i)\r\n        if occu > max_val:\r\n            max_val = occu\r\n            result = i \r\n    return result"
    },
    {
        "number": 659,
        "prompt": "Write a python function to print duplicants from a list of integers.\ndef Repeat(x): \n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    dup = [] \n    for i in range(len(x)): \n        if x.count(x[i]) > 1 and x[i] not in dup: \n            dup.append(x[i]) \n    return dup \n  \n# test the function \n# initialize list with integers \nx = [1, 2, 3, 4, 5, 6, 2, 5, 1, 7, 8, 9, 3, 0] \nprint(\"Duplicants in the list are:\", Repeat(x)) ",
        "generated_testcode": "assert Repeat([1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3]) == [1, 2, 3]\n",
        "test": "assert Repeat([10, 20, 30, 20, 20, 30, 40, 50, -20, 60, 60, -20, -20]) == [20, 30, -20, 60]\nassert Repeat([-1, 1, -1, 8]) == [-1]\nassert Repeat([1, 2, 3, 1, 2,]) == [1, 2]",
        "canonical_solution": "def Repeat(x): \r\n    _size = len(x) \r\n    repeated = [] \r\n    for i in range(_size): \r\n        k = i + 1\r\n        for j in range(k, _size): \r\n            if x[i] == x[j] and x[i] not in repeated: \r\n                repeated.append(x[i]) \r\n    return repeated "
    },
    {
        "number": 660,
        "prompt": "Write a python function to choose points from two ranges such that no point lies in both the ranges.\ndef find_Points(l1,r1,l2,r2): \n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    if l1 > r2 or l2 > r1: \n        return True\n    else: \n        return False\n\nl1 = 1\nr1 = 3\nl2 = 5\nr2 = 6\nif find_Points(l1, r1, l2, r2): \n    print(\"Can choose points\")\nelse: \n    print(\"Cannot choose points\") \n\nl1 = 2\nr1 = 5\nl2 = 4\nr2 = 7\nif find_Points(l1, r1, l2, r2): \n    print(\"Can choose points\")\nelse: \n    print(\"Cannot choose points\") ",
        "generated_testcode": "assert find_Points(1,5,3,7) == (1,7)\n",
        "test": "assert find_Points(5,10,1,5) == (1,10)\nassert find_Points(3,5,7,9) == (3,9)\nassert find_Points(1,5,2,8) == (1,8)",
        "canonical_solution": "def find_Points(l1,r1,l2,r2): \r\n    x = min(l1,l2) if (l1 != l2) else -1\r\n    y = max(r1,r2) if (r1 != r2) else -1\r\n    return (x,y)"
    },
    {
        "number": 661,
        "prompt": "Write a function to find the maximum sum that can be formed which has no three consecutive elements present.\ndef max_sum_of_three_consecutive(arr, n): \n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    if n == 0 or n == 1 or n == 2:\n        return 0\n    if n > 2:\n        max_sum = max(arr[0], arr[1])\n        if n > 3:\n            max_sum_temp = max(arr[0], max(arr[1], arr[2]) + arr[0])\n        else:\n            max_sum_temp = max(arr[0], max(arr[1], arr[2]) + arr[0])\n        for i in range(3, n):\n            temp = max_sum_temp\n            max_sum_temp = max(max_sum_temp, arr[i] + max(max_sum_temp, max_sum) + arr[i-2])\n            max_sum = max(max_sum, max_sum_temp)\n        return max_sum\n    return 0\n\narr = [2, 3, 4, 5, 1, 2, 3, 1, 1] \nn = len(arr)\nprint(max_sum_of_three_consecutive(arr, n)) ",
        "generated_testcode": "assert max_sum_of_three_consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9], 7) == 24\n",
        "test": "assert max_sum_of_three_consecutive([100, 1000, 100, 1000, 1], 5) == 2101\nassert max_sum_of_three_consecutive([3000, 2000, 1000, 3, 10], 5) == 5013\nassert max_sum_of_three_consecutive([1, 2, 3, 4, 5, 6, 7, 8], 8) == 27",
        "canonical_solution": "def max_sum_of_three_consecutive(arr, n): \r\n\tsum = [0 for k in range(n)] \r\n\tif n >= 1: \r\n\t\tsum[0] = arr[0] \r\n\tif n >= 2: \r\n\t\tsum[1] = arr[0] + arr[1] \r\n\tif n > 2: \r\n\t\tsum[2] = max(sum[1], max(arr[1] + arr[2], arr[0] + arr[2])) \r\n\tfor i in range(3, n): \r\n\t\tsum[i] = max(max(sum[i-1], sum[i-2] + arr[i]), arr[i] + arr[i-1] + sum[i-3]) \r\n\treturn sum[n-1]"
    },
    {
        "number": 662,
        "prompt": "Write a function to sort a list in a dictionary.\ndef sorted_dict(dict1):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    keys = sorted(dict1.keys())\n    sorted_dict = {}\n    for key in keys:\n        sorted_dict[key] = dict1[key]\n    return sorted_dict\n\n# Test the function with a dictionary\ndict1 = {'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5}\nprint(sorted_dict(dict1))  # Output: {'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5}\n\n# Test the function with an empty dictionary\ndict2 = {}\nprint(sorted_dict(dict2))  # Output: {}\n\n# Test the function with a dictionary containing only one key-value pair\ndict3 = {'f': 6}\nprint(sorted_dict(dict3))  # Output: {'f': 6}\n\n# Test the function with a dictionary containing negative numbers\ndict4 = {'z': -1, 'y': -2, 'x': -3, 'w': -4, 'v': -5}\nprint(sorted_dict(dict4))  # Output: {'v': -5, 'w': -4, 'x': -3, 'y': -2, 'z': -1} ",
        "generated_testcode": "assert sorted_dict({'a': 1, 'b': 2, 'c': 3, 'd': 4}) == {'a': 1, 'b': 2, 'c': 3, 'd': 4}\n",
        "test": "assert sorted_dict({'n1': [2, 3, 1], 'n2': [5, 1, 2], 'n3': [3, 2, 4]})=={'n1': [1, 2, 3], 'n2': [1, 2, 5], 'n3': [2, 3, 4]}\nassert sorted_dict({'n1': [25,37,41], 'n2': [41,54,63], 'n3': [29,38,93]})=={'n1': [25, 37, 41], 'n2': [41, 54, 63], 'n3': [29, 38, 93]}\nassert sorted_dict({'n1': [58,44,56], 'n2': [91,34,58], 'n3': [100,200,300]})=={'n1': [44, 56, 58], 'n2': [34, 58, 91], 'n3': [100, 200, 300]}",
        "canonical_solution": "def sorted_dict(dict1):\r\n  sorted_dict = {x: sorted(y) for x, y in dict1.items()}\r\n  return sorted_dict"
    },
    {
        "number": 663,
        "prompt": "Write a function to find the largest possible value of k such that k modulo x is y.\ndef find_max_val(n, x, y): \n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    if y >= x: \n        return n * x \n    else: \n        return (n * x) - (x - y) \n\nn = 3\nx = 7\ny = 2\nprint(find_max_val(n, x, y)) # Output: 6 ",
        "generated_testcode": "assert find_max_val(10, 3, 2) == 9\n",
        "test": "assert find_max_val(15, 10, 5) == 15\nassert find_max_val(187, 10, 5) == 185\nassert find_max_val(16, 11, 1) == 12",
        "canonical_solution": "import sys \r\ndef find_max_val(n, x, y): \r\n\tans = -sys.maxsize \r\n\tfor k in range(n + 1): \r\n\t\tif (k % x == y): \r\n\t\t\tans = max(ans, k) \r\n\treturn (ans if (ans >= 0 and\r\n\t\t\t\t\tans <= n) else -1) "
    },
    {
        "number": 664,
        "prompt": "Write a python function to find the average of even numbers till a given even number.\ndef average_Even(n) : \n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    sum = 0\n    count = 0\n    for i in range(2,n+1,2): \n        sum += i \n        count += 1\n    return sum/count\n\n# Test the function \nn = 10\nprint(\"Average of even numbers from 1 to\",n,\"is:\",average_Even(n)) ",
        "generated_testcode": "assert average_Even(10) == 6\n",
        "test": "assert average_Even(2) == 2\nassert average_Even(4) == 3\nassert average_Even(100) == 51",
        "canonical_solution": "def average_Even(n) : \r\n    if (n% 2!= 0) : \r\n        return (\"Invalid Input\") \r\n        return -1  \r\n    sm = 0\r\n    count = 0\r\n    while (n>= 2) : \r\n        count = count+1\r\n        sm = sm+n \r\n        n = n-2\r\n    return sm // count "
    },
    {
        "number": 665,
        "prompt": "Write a python function to shift first element to the end of given list.\ndef move_last(num_list):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": true,
        "answer": "    num_list.append(num_list.pop(0))\n    return num_list\n\n# Test the function\nprint(move_last([1, 2, 3, 4, 5]))\n\n# Output: [2, 3, 4, 5, 1]\n\n# You can also use the insert() method to shift the first element to the end of the list\ndef move_last(num_list):\n    num_list.insert(len(num_list), num_list.pop(0))\n    return num_list\n\n# Test the function\nprint(move_last([1, 2, 3, 4, 5]))\n\n# Output: [2, 3, 4, 5, 1] ",
        "generated_testcode": "assert move_last([1, 2, 3, 4, 5]) == [2, 3, 4, 5, 1]\n",
        "test": "assert move_last([1,2,3,4]) == [2,3,4,1]\nassert move_last([2,3,4,1,5,0]) == [3,4,1,5,0,2]\nassert move_last([5,4,3,2,1]) == [4,3,2,1,5]",
        "canonical_solution": "def move_last(num_list):\r\n    a = [num_list[0] for i in range(num_list.count(num_list[0]))]\r\n    x = [ i for i in num_list if i != num_list[0]]\r\n    x.extend(a)\r\n    return (x)"
    },
    {
        "number": 666,
        "prompt": "Write a function to count occurrence of a character in a string.\ndef count_char(string,char):\n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    count = 0\n    for i in string:\n        if i == char:\n            count += 1\n    return count\n\n#Test the function\nprint(count_char(\"hello world\", \"l\")) # Output: 3\nprint(count_char(\"hello world\", \"o\")) # Output: 2\nprint(count_char(\"hello world\", \"z\")) # Output: 0\n\n#Write a function to remove duplicate characters from a string.\ndef remove_duplicate(string):\n    new_string = \"\"\n    for i in string:\n        if i not in new_string:\n            new_string += i\n    return new_string\n\n#Test the function\nprint(remove_duplicate(\"hello world\")) # Output: helo wrd\n\n#Write a function to reverse a string\ndef reverse_string(string):\n    return string[::-1]\n\n#Test the function\nprint(reverse_string(\"hello world\")) # Output: dlrow olleh\n\n#Write a function to find the length of a string\ndef length_of_string(string):\n    return len(string)\n\n#Test the function\nprint(length_of_string(\"hello world\")) # Output: 11\n\n#Write a function to check if a string is a palindrome\ndef is_palindrome(string):\n    return string == string[::-1]\n\n#Test the function\nprint(is_palindrome(\"racecar\")) # Output: True\nprint(is_palindrome(\"hello\")) #",
        "generated_testcode": "assert count_char(\"hello world\", \"l\") == 3\n",
        "test": "assert count_char(\"Python\",'o')==1\nassert count_char(\"little\",'t')==2\nassert count_char(\"assert\",'s')==2",
        "canonical_solution": "def count_char(string,char):\r\n count = 0\r\n for i in range(len(string)):\r\n    if(string[i] == char):\r\n        count = count + 1\r\n return count"
    },
    {
        "number": 667,
        "prompt": "Write a python function to count number of vowels in the string.\ndef Check_Vow(string, vowels): \n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": true,
        "answer": "    count = 0\n    for char in string: \n        if char in vowels: \n            count += 1\n    return count \n  \n# Test the function \nstring = \"Python\"\nvowels = \"aeiouAEIOU\"\nprint(\"Vowels count in the string:\", Check_Vow(string, vowels)) ",
        "generated_testcode": "assert Check_Vow(\"hello\", \"aeiou\") == 2\n",
        "test": "assert Check_Vow('corner','AaEeIiOoUu') == 2\nassert Check_Vow('valid','AaEeIiOoUu') == 2\nassert Check_Vow('true','AaEeIiOoUu') ==2",
        "canonical_solution": "def Check_Vow(string, vowels): \r\n    final = [each for each in string if each in vowels] \r\n    return(len(final)) \r\n"
    },
    {
        "number": 668,
        "prompt": "Write a python function to replace multiple occurence of character by single.\ndef replace(string, char): \n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    return char.join(string.split(char)\n\nprint(replace(\"hello world\", \"l\")) \n# Output: \"helo word\" ",
        "generated_testcode": "assert replace(\"hello world\", \"l\") == \"heo word\"\n",
        "test": "assert replace('peep','e') == 'pep'\nassert replace('Greek','e') == 'Grek'\nassert replace('Moon','o') == 'Mon'",
        "canonical_solution": "import re \r\ndef replace(string, char): \r\n    pattern = char + '{2,}'\r\n    string = re.sub(pattern, char, string) \r\n    return string "
    },
    {
        "number": 669,
        "prompt": "Write a function to check whether the given ip address is valid or not using regex.\ndef check_IP(Ip): \n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    pattern = r\"^((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[1-9])(\\.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[1-9]|0)){3})$\"\n    if re.match(pattern, Ip):\n        return True\n    else:\n        return False\n    \n# Testing the function\nIp = \"127.0.0.1\"\nprint(check_IP(Ip)) # True\n\nIp = \"127.0.0.4000\"\nprint(check_IP(Ip)) # False\n\nIp = \"127.0.0.256\"\nprint(check_IP(Ip)) # False\n\nIp = \"256.0.0.1\"\nprint(check_IP(Ip)) # False\n\nIp = \"127.0.0\"\nprint(check_IP(Ip)) # False\n\nIp = \"127.0.0.1.0\"\nprint(check_IP(Ip)) # False\n\nIp = \"127.0.0.1.1\"\nprint(check_IP(Ip)) # False ",
        "generated_testcode": "assert check_IP(\"192.168.1.1\") == True\n",
        "test": "assert check_IP(\"192.168.0.1\") == 'Valid IP address'\nassert check_IP(\"110.234.52.124\") == 'Valid IP address'\nassert check_IP(\"366.1.2.2\") == 'Invalid IP address'",
        "canonical_solution": "import re \r\nregex = '''^(25[0-5]|2[0-4][0-9]|[0-1]?[0-9][0-9]?)\\.( \r\n\t\t\t25[0-5]|2[0-4][0-9]|[0-1]?[0-9][0-9]?)\\.( \r\n\t\t\t25[0-5]|2[0-4][0-9]|[0-1]?[0-9][0-9]?)\\.( \r\n\t\t\t25[0-5]|2[0-4][0-9]|[0-1]?[0-9][0-9]?)$'''\r\ndef check_IP(Ip): \r\n\tif(re.search(regex, Ip)): \r\n\t\treturn (\"Valid IP address\") \r\n\telse: \r\n\t\treturn (\"Invalid IP address\") "
    },
    {
        "number": 670,
        "prompt": "Write a python function to check whether a sequence of numbers has a decreasing trend or not.\ndef decreasing_trend(nums):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    #check if the length of the sequence is less than 2\n    if len(nums) < 2:\n        return True\n    #initialize a variable to check for the trend\n    decreasing = True\n    #iterate through the sequence\n    for i in range(1,len(nums)):\n        #check if the current number is less than the previous number\n        if nums[i] > nums[i-1]:\n            #if not, set the decreasing variable to False and break the loop\n            decreasing = False\n            break\n    #return the value of decreasing\n    return decreasing\n\n#test the function with some test cases\nprint(decreasing_trend([1,2,3,4,5,6])) #should return False\nprint(decreasing_trend([6,5,4,3,2,1])) #should return True\nprint(decreasing_trend([1,2,3,4])) #should return False\nprint(decreasing_trend([5,5,5,5,5])) #should return True\nprint(decreasing_trend([])) #should return True ",
        "generated_testcode": "assert decreasing_trend([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == False\n",
        "test": "assert decreasing_trend([-4,-3,-2,-1]) == True\nassert decreasing_trend([1,2,3]) == True\nassert decreasing_trend([3,2,1]) == False",
        "canonical_solution": "def decreasing_trend(nums):\r\n    if (sorted(nums)== nums):\r\n        return True\r\n    else:\r\n        return False"
    },
    {
        "number": 671,
        "prompt": "Write a python function to set the right most unset bit.\ndef get_Pos_Of_Right_most_Set_Bit(n): \n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    if(n==0):\n        return 0\n    count=0\n    while(n&1==0):\n        n=n>>1\n        count+=1\n    return count\n\n# Function to set the right most unset bit \ndef set_Right_most_Unset_Bit(n): \n    return n | (1<<get_Pos_Of_Right_most_Set_Bit(n)) \n\n# Function to clear the right most set bit \ndef clear_Right_most_Set_Bit(n): \n    return n & (n-1) \n\n# Function to set the right most bit \ndef set_Right_most_Bit(n): \n    return n | (1<<get_Pos_Of_Right_most_Bit(n)) \n\n# Function to clear the right most unset bit \ndef clear_Right_most_Bit(n): \n    return n & (n+1) \n\n# Function to get the position of right most set bit \ndef get_Pos_Of_Right_most_Bit(n): \n    if(n==0):\n        return 0\n    count=0\n    while(n&1==0):\n        n=n>>1\n        count+=1\n    return count \n\n# Function to find the common bits in two numbers \ndef common_Bits(a, b): \n    return (a & b) \n\n# Function to find the different bits in two numbers \ndef different_Bits(a",
        "generated_testcode": "assert get_Pos_Of_Right_most_Set_Bit(12) == 4\n",
        "test": "assert set_Right_most_Unset_Bit(21) == 23\nassert set_Right_most_Unset_Bit(11) == 15\nassert set_Right_most_Unset_Bit(15) == 15",
        "canonical_solution": "import math \r\ndef get_Pos_Of_Right_most_Set_Bit(n): \r\n    return int(math.log2(n&-n)+1)   \r\ndef set_Right_most_Unset_Bit(n): \r\n    if (n == 0): \r\n        return 1\r\n    if ((n & (n + 1)) == 0):     \r\n        return n \r\n    pos = get_Pos_Of_Right_most_Set_Bit(~n)      \r\n    return ((1 << (pos - 1)) | n) "
    },
    {
        "number": 672,
        "prompt": "Write a function to find maximum of three numbers.\ndef max_of_three(num1,num2,num3): \n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    if num1 >= num2 and num1 >= num3: \n        return num1 \n    elif num2 >= num1 and num2 >= num3: \n        return num2 \n    else: \n        return num3 \n  \n# Test the function with some sample input \nprint(max_of_three(3, 10, 5)) ",
        "generated_testcode": "assert max_of_three(10,20,30) == 30\n",
        "test": "assert max_of_three(10,20,30)==30\nassert max_of_three(55,47,39)==55\nassert max_of_three(10,49,30)==49",
        "canonical_solution": "def max_of_three(num1,num2,num3): \r\n    if (num1 >= num2) and (num1 >= num3):\r\n       lnum = num1\r\n    elif (num2 >= num1) and (num2 >= num3):\r\n       lnum = num2\r\n    else:\r\n       lnum = num3\r\n    return lnum"
    },
    {
        "number": 673,
        "prompt": "Write a python function to convert a list of multiple integers into a single integer.\ndef convert(list): \n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    result = 0 \n    for num in list: \n        result = result * 10 + num \n    return result \n\n# Test the function with an example \nprint(convert([1, 2, 3, 4, 5, 6])) # Output: 123456 ",
        "generated_testcode": "assert convert([1, 2, 3, 4, 5]) == 12345\n",
        "test": "assert convert([1,2,3]) == 123\nassert convert([4,5,6]) == 456\nassert convert([7,8,9]) == 789",
        "canonical_solution": "def convert(list): \r\n    s = [str(i) for i in list] \r\n    res = int(\"\".join(s))  \r\n    return (res) "
    },
    {
        "number": 674,
        "prompt": "Write a function to remove duplicate words from a given string using collections module.\ndef remove_duplicate(string):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    words = string.split()\n    unique_words = set(words)\n    return ' '.join(unique_words)\n\n# Test the function\nstring = \"This is a sample string with some duplicate words. This is a sample string with some duplicate words\"\nprint(remove_duplicate(string))\n",
        "generated_testcode": "assert remove_duplicate(\"hello world hello python world\") == \"hello python\"\n",
        "test": "assert remove_duplicate(\"Python Exercises Practice Solution Exercises\")==(\"Python Exercises Practice Solution\")\nassert remove_duplicate(\"Python Exercises Practice Solution Python\")==(\"Python Exercises Practice Solution\")\nassert remove_duplicate(\"Python Exercises Practice Solution Practice\")==(\"Python Exercises Practice Solution\")",
        "canonical_solution": "from collections import OrderedDict\r\ndef remove_duplicate(string):\r\n  result = ' '.join(OrderedDict((w,w) for w in string.split()).keys())\r\n  return result"
    },
    {
        "number": 675,
        "prompt": "Write a function to add two integers. however, if the sum is between the given range it will return 20.\ndef sum_nums(x, y,m,n):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": true,
        "answer": "    if x > m or y > n:\n        return 20\n    else:\n        return x + y\n\nprint(sum_nums(10, 20, 10, 30)) # should return 20\nprint(sum_nums(10, 10, 10, 30)) # should return 20\nprint(sum_nums(5, 5, 10, 30)) # should return 10\nprint(sum_nums(15, 25, 10, 30)) # should return 40\n",
        "generated_testcode": "assert sum_nums(10, 20, 10, 30) == 30\n",
        "test": "assert sum_nums(2,10,11,20)==20\nassert sum_nums(15,17,1,10)==32\nassert sum_nums(10,15,5,30)==20",
        "canonical_solution": "def sum_nums(x, y,m,n):\r\n    sum_nums= x + y\r\n    if sum_nums in range(m, n):\r\n        return 20\r\n    else:\r\n        return sum_nums"
    },
    {
        "number": 676,
        "prompt": "Write a function to remove everything except alphanumeric characters from the given string by using regex.\ndef remove_extra_char(text1):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    return re.sub(r'\\W+', '', text1)\n\n# remove_extra_char('H3ll0, W4rld!')\n# Output: 'H3ll0W4rld'\n\n# remove_extra_char('Hello, World! 123')\n# Output: 'HelloWorld123'\n\n# remove_extra_char('')\n# Output: '' ",
        "generated_testcode": "assert remove_extra_char(\"Hello, World!\") == \"HelloWorld\"\n",
        "test": "assert remove_extra_char('**//Google Android// - 12. ') == 'GoogleAndroid12'\nassert remove_extra_char('****//Google Flutter//*** - 36. ') == 'GoogleFlutter36'\nassert remove_extra_char('**//Google Firebase// - 478. ') == 'GoogleFirebase478'",
        "canonical_solution": "import re\r\ndef remove_extra_char(text1):\r\n  pattern = re.compile('[\\W_]+')\r\n  return (pattern.sub('', text1))"
    },
    {
        "number": 677,
        "prompt": "Write a function to check if the triangle is valid or not.\ndef validity_triangle(a,b,c):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    if a+b>c and a+c>b and b+c>a:\n        return True\n    else:\n        return False\n\n# Function to check if a triangle is equilateral or not\ndef equilateral_triangle(a,b,c):\n    if a==b and b==c:\n        return True\n    else:\n        return False\n\n# Function to check if a triangle is isosceles or not\ndef isosceles_triangle(a,b,c):\n    if a==b or b==c or c==a:\n        return True\n    else:\n        return False\n\n# Function to check if a triangle is scalene or not\ndef scalene_triangle(a,b,c):\n    if a!=b and b!=c and c!=a:\n        return True\n    else:\n        return False\n\n# Function to check if a triangle is right angled or not\ndef right_angled_triangle(a,b,c):\n    if a**2+b**2==c**2 or a**2+c**2==b**2 or b**2+c**2==a**2:\n        return True\n    else:\n        return False\n\n# Function to check if a triangle is obtuse or not\ndef obtuse_triangle(a,b,c):\n    if a**2+b**2<c**2 or a**2+c**2<b**2 or b**2+c**2<a**2:\n        return True\n",
        "generated_testcode": "assert validity_triangle(3,4,5) == True\n",
        "test": "assert validity_triangle(60,50,90)==False\nassert validity_triangle(45,75,60)==True\nassert validity_triangle(30,50,100)==True",
        "canonical_solution": "def validity_triangle(a,b,c):\r\n total = a + b + c\r\n if total == 180:\r\n    return True\r\n else:\r\n    return False"
    },
    {
        "number": 678,
        "prompt": "Write a python function to remove spaces from a given string.\ndef remove_spaces(str1):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    return str1.replace(\" \", \"\")\n\n#Example usage:\nprint(remove_spaces(\"Hello world\")) # Output: \"Helloworld\"\nprint(remove_spaces(\"Python is awesome\")) # Output: \"Pythonisawesome\" ",
        "generated_testcode": "assert remove_spaces(\"Hello World\") == \"HelloWorld\"\n",
        "test": "assert remove_spaces(\"a b c\") == \"abc\"\nassert remove_spaces(\"1 2 3\") == \"123\"\nassert remove_spaces(\" b c\") == \"bc\"",
        "canonical_solution": "def remove_spaces(str1):\r\n  str1 = str1.replace(' ','')\r\n  return str1"
    },
    {
        "number": 679,
        "prompt": "Write a function to access dictionary key\u2019s element by index.\ndef access_key(ditionary,key):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": true,
        "answer": "    return list(ditionary.keys())[key]\n\n# Create a dictionary \nditionary = {1: \"apple\", 2: \"banana\", 3: \"cherry\"}\n\n# print the value of first key\nprint(access_key(ditionary,0)) \n# output: 1\n\n# print the value of second key\nprint(access_key(ditionary,1)) \n# output: 2 ",
        "generated_testcode": "assert access_key({'a':1,'b':2,'c':3},1) == 'b'\n",
        "test": "assert access_key({'physics': 80, 'math': 90, 'chemistry': 86},0)== 'physics'\nassert access_key({'python':10, 'java': 20, 'C++':30},2)== 'C++'\nassert access_key({'program':15,'computer':45},1)== 'computer'",
        "canonical_solution": "def access_key(ditionary,key):\r\n  return list(ditionary)[key]"
    },
    {
        "number": 680,
        "prompt": "Write a python function to check whether a sequence of numbers has an increasing trend or not.\ndef increasing_trend(nums):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    # The function should return True if the sequence is increasing, False otherwise\n    # for example, [1,2,3,4,5] should return True, [1,2,3,2,4] should return False\n    for i in range(len(nums)-1):\n        if nums[i] >= nums[i+1]:\n            return False\n    return True\n\n# Test the function with some examples\nprint(increasing_trend([1,2,3,4,5])) # Should print True\nprint(increasing_trend([1,2,3,2,4])) # Should print False\nprint(increasing_trend([1,1,2,3,4,5])) # Should print True\nprint(increasing_trend([5,4,3,2,1])) # Should print False\nprint(increasing_trend([1,1,1,1,1])) # Should print True\nprint(increasing_trend([1])) # Should print True\nprint(increasing_trend([])) # Should print True\n",
        "generated_testcode": "assert increasing_trend([1, 2, 3, 4, 5, 6, 7, 8, 9]) == True\n",
        "test": "assert increasing_trend([1,2,3,4]) == True\nassert increasing_trend([4,3,2,1]) == False\nassert increasing_trend([0,1,4,9]) == True",
        "canonical_solution": "def increasing_trend(nums):\r\n    if (sorted(nums)== nums):\r\n        return True\r\n    else:\r\n        return False"
    },
    {
        "number": 681,
        "prompt": "Write a python function to find the smallest prime divisor of a number.\ndef smallest_Divisor(n): \n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    for i in range(2, n+1): \n        if (n % i) == 0: \n            return i\n\nn = 28\nprint(\"Smallest divisor of 28 is\", smallest_Divisor(n)) ",
        "generated_testcode": "assert smallest_Divisor(12) == 2\n",
        "test": "assert smallest_Divisor(10) == 2\nassert smallest_Divisor(25) == 5\nassert smallest_Divisor(31) == 31",
        "canonical_solution": "def smallest_Divisor(n): \r\n    if (n % 2 == 0): \r\n        return 2; \r\n    i = 3;  \r\n    while (i*i <= n): \r\n        if (n % i == 0): \r\n            return i; \r\n        i += 2; \r\n    return n; "
    },
    {
        "number": 682,
        "prompt": "Write a function to multiply two lists using map and lambda function.\ndef mul_list(nums1,nums2):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    return list(map(lambda x,y: x*y,nums1,nums2))\n\nnums1 = [1,2,3,4,5]\nnums2 = [2,4,6,8]\nprint(mul_list(nums1,nums2)) ",
        "generated_testcode": "assert mul_list([1,2,3],[4,5,6]) == [4,10,18]\n",
        "test": "assert mul_list([1, 2, 3],[4,5,6])==[4,10,18]\nassert mul_list([1,2],[3,4])==[3,8]\nassert mul_list([90,120],[50,70])==[4500,8400]",
        "canonical_solution": "def mul_list(nums1,nums2):\r\n  result = map(lambda x, y: x * y, nums1, nums2)\r\n  return list(result)"
    },
    {
        "number": 683,
        "prompt": "Write a python function to check whether the given number can be represented by sum of two squares or not.\ndef sum_Square(n) : \n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": true,
        "answer": "    for i in range(n): \n        for j in range(i): \n            if (i * i + j * j == n): \n                return True\n    return False\n\n# Testing the function \nn = 26\nif (sum_Square(n)): \n    print(\"Sum of two squares of two integers = \", n) \nelse: \n    print(\"Not a sum of two squares of two integers\") \n\n# Output: Sum of two squares of two integers = 26 ",
        "generated_testcode": "assert sum_Square(16) == True\n",
        "test": "assert sum_Square(25) == True\nassert sum_Square(24) == False\nassert sum_Square(17) == True",
        "canonical_solution": "def sum_Square(n) : \r\n    i = 1 \r\n    while i*i <= n : \r\n        j = 1\r\n        while (j*j <= n) : \r\n            if (i*i+j*j == n) : \r\n                return True\r\n            j = j+1\r\n        i = i+1     \r\n    return False"
    },
    {
        "number": 684,
        "prompt": "Write a python function to count occurences of a character in a repeated string.\ndef count_Char(str,x): \n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": true,
        "answer": "    count = 0\n    for i in range(len(str)): \n        if str[i] == x: \n            count += 1\n    return count \n  \n# Driver code \nstring = \"hello world\"\nchar = \"l\"\nprint(count_Char(string, char)) ",
        "generated_testcode": "assert count_Char(\"hello world\", \"l\") == 3\n",
        "test": "assert count_Char(\"abcac\",'a') == 4\nassert count_Char(\"abca\",'c') == 2\nassert count_Char(\"aba\",'a') == 7",
        "canonical_solution": "def count_Char(str,x): \r\n    count = 0\r\n    for i in range(len(str)):  \r\n        if (str[i] == x) : \r\n            count += 1\r\n    n = 10\r\n    repititions = n // len(str)  \r\n    count = count * repititions  \r\n    l = n % len(str)  \r\n    for i in range(l): \r\n        if (str[i] == x):  \r\n            count += 1\r\n    return count  "
    },
    {
        "number": 685,
        "prompt": "Write a python function to find sum of prime numbers between 1 to n.\ndef sum_Of_Primes(n): \n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    sum = 0 \n    prime = [True] * (n+1) \n    p = 2\n    while p * p <= n: \n        if prime[p] == True: \n            for i in range(p * p, n+1, p): \n                prime[i] = False\n        p += 1\n    for p in range(2, n): \n        if prime[p]: \n            sum += p \n    return sum \n\nn = int(input(\"Enter the number: \")\nresult = sum_Of_Primes(n) \nprint(\"Sum of prime numbers is: \", result) ",
        "generated_testcode": "assert sum_Of_Primes(10) == 17\n",
        "test": "assert sum_Of_Primes(10) == 17\nassert sum_Of_Primes(20) == 77\nassert sum_Of_Primes(5) == 10",
        "canonical_solution": "def sum_Of_Primes(n): \r\n    prime = [True] * (n + 1)  \r\n    p = 2\r\n    while p * p <= n: \r\n        if prime[p] == True:  \r\n            i = p * 2\r\n            while i <= n: \r\n                prime[i] = False\r\n                i += p \r\n        p += 1    \r\n    sum = 0\r\n    for i in range (2,n + 1): \r\n        if(prime[i]): \r\n            sum += i \r\n    return sum"
    },
    {
        "number": 686,
        "prompt": "Write a function to find the frequency of each element in the given list.\ndef freq_element(test_tup):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    freq = {}\n    for i in test_tup:\n        freq[i] = freq.get(i,0) + 1\n    return freq\n\n# Test the function\ntest_tup = (1,2,3,4,5,1,2,3,4,1,2,3,4,5,6,7,8,9,10,1,2,3)\nprint(freq_element(test_tup))\n\n# Output: {1: 3, 2: 3, 3: 3, 4: 3, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1} ",
        "generated_testcode": "assert freq_element(('a', 'b', 'c', 'a', 'd', 'a', 'c') == {'a': 3, 'b': 1, 'c': 2, 'd': 1}\n",
        "test": "assert freq_element((4, 5, 4, 5, 6, 6, 5, 5, 4) ) == '{4: 3, 5: 4, 6: 2}'\nassert freq_element((7, 8, 8, 9, 4, 7, 6, 5, 4) ) == '{7: 2, 8: 2, 9: 1, 4: 2, 6: 1, 5: 1}'\nassert freq_element((1, 4, 3, 1, 4, 5, 2, 6, 2, 7) ) == '{1: 2, 4: 2, 3: 1, 5: 1, 2: 2, 6: 1, 7: 1}'",
        "canonical_solution": "from collections import defaultdict \r\ndef freq_element(test_tup):\r\n  res = defaultdict(int)\r\n  for ele in test_tup:\r\n    res[ele] += 1\r\n  return (str(dict(res))) "
    },
    {
        "number": 687,
        "prompt": "Write a function to find the greatest common divisor (gcd) of two integers by using recursion.\ndef recur_gcd(a, b):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    if b == 0:\n        return a\n    else:\n        return recur_gcd(b, a % b)\n\n# Example usage:\nprint(recur_gcd(12, 18))  # Output: 6\nprint(recur_gcd(27, 18))  # Output: 9\nprint(recur_gcd(99, 12))  # Output: 3\nprint(recur_gcd(16, 24))  # Output: 8\nprint(recur_gcd(77, 5))  # Output: 1\n",
        "generated_testcode": "assert recur_gcd(27, 18) == 9\n",
        "test": "assert recur_gcd(12,14) == 2\nassert recur_gcd(13,17) == 1\nassert recur_gcd(9, 3) == 3",
        "canonical_solution": "def recur_gcd(a, b):\r\n\tlow = min(a, b)\r\n\thigh = max(a, b)\r\n\tif low == 0:\r\n\t\treturn high\r\n\telif low == 1:\r\n\t\treturn 1\r\n\telse:\r\n\t\treturn recur_gcd(low, high%low)"
    },
    {
        "number": 688,
        "prompt": "Write a function to get the length of a complex number.\ndef len_complex(a,b):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    return (a**2+b**2)**0.5\n\nprint(len_complex(3,4)) # 5\nprint(len_complex(5,12)) # 13\n\n\n# Write a function to check if a number is prime or not.\ndef is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            return False\n    return True\nprint(is_prime(7)) # True\nprint(is_prime(15)) # False\n\n# Write a function to find the factorial of a number.\ndef factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)\nprint(factorial(5)) # 120\nprint(factorial(0)) # 1\n\n# Write a function to find the sum of digits of a number.\ndef sum_digits(n):\n    return sum(int(digit) for digit in str(n))\nprint(sum_digits(123)) # 6\nprint(sum_digits(456)) # 15\n\n# Write a function to check if a number is palindrome or not.\ndef is_palindrome(n):\n    return str(n) == str(n)[::-1]\nprint(is_palindrome(121)) # True\n",
        "generated_testcode": "assert len_complex(3+4j) == 5\n",
        "test": "assert len_complex(3,4)==5.0\nassert len_complex(9,10)==13.45362404707371\nassert len_complex(7,9)==11.40175425099138",
        "canonical_solution": "import cmath\r\ndef len_complex(a,b):\r\n  cn=complex(a,b)\r\n  length=abs(cn)\r\n  return length"
    },
    {
        "number": 689,
        "prompt": "## write a function to find the minimum number of jumps to reach the end of the array for the given array of integers where each element represents the max number of steps that can be made forward from that element. > indented block > indented block\ndef min_jumps(arr, n):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    if n <= 1:\n        return 0\n    if arr[0] == 0:\n        return -1\n\n    jumps = [0] * n\n    jumps[0] = 0\n    for i in range(1, n):\n        jumps[i] = float('inf')\n\n    for i in range(1, n):\n        for j in range(i):\n            if i <= arr[j] + j:\n                jumps[i] = min(jumps[i], jumps[j] + 1)\n\n    for i in range(n-2, 0, -1):\n        for j in range(i+1, min(i + arr[i], n)):\n            jumps[i] = min(jumps[i], jumps[j] + 1)\n\n    return jumps[0]\n\n\ndef min_jumps(arr, n):\n    if n <= 1:\n        return 0\n    if arr[0] == 0:\n        return -1\n\n    jumps = [0] * n\n    jumps[0] = 0\n    for i in range(1, n):\n        jumps[i] = float('inf')\n\n    for i in range(1, n):\n        for j in range(i):\n            if i <= arr[j] + j:\n                jumps[i] = min(jumps[i], jumps[j] + 1)\n\n    for i in",
        "generated_testcode": "assert min_jumps([1, 3, 5, 8, 9, 2, 6, 4, 7, 6, 9], 7) == 2\n",
        "test": "assert min_jumps([1, 3, 6, 1, 0, 9], 6) == 3\nassert min_jumps([1, 3, 5, 8, 9, 2, 6, 7, 6, 8, 9], 11) == 3\nassert min_jumps([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], 11) == 10",
        "canonical_solution": "def min_jumps(arr, n):\r\n\tjumps = [0 for i in range(n)]\r\n\tif (n == 0) or (arr[0] == 0):\r\n\t\treturn float('inf')\r\n\tjumps[0] = 0\r\n\tfor i in range(1, n):\r\n\t\tjumps[i] = float('inf')\r\n\t\tfor j in range(i):\r\n\t\t\tif (i <= j + arr[j]) and (jumps[j] != float('inf')):\r\n\t\t\t\tjumps[i] = min(jumps[i], jumps[j] + 1)\r\n\t\t\t\tbreak\r\n\treturn jumps[n-1]"
    },
    {
        "number": 690,
        "prompt": "Write a function to multiply consecutive numbers of a given list.\ndef mul_consecutive_nums(nums):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    if len(nums) == 0:\n        return 0\n    if len(nums) == 1:\n        return nums[0]\n    result = 1\n    for i in range(len(nums)):\n        result *= nums[i]\n    return result\n\n# Test the function with an example\nprint(mul_consecutive_nums([1,2,3,4,5])) # Output: 120\nprint(mul_consecutive_nums([0,1,2,3,4,5])) # Output: 0\nprint(mul_consecutive_nums([1])) # Output: 1\nprint(mul_consecutive_nums([])) # Output: 0\n\n# Test the function with edge cases\nprint(mul_consecutive_nums([-1,0,1,2,-3,4])) # Output: 0\nprint(mul_consecutive_nums([-1,-2,-3,-4,-5]) # Output: 120\nprint(mul_consecutive_nums([1,2,-3,4,5]) # Output: 0\n\n# Test the function with floats\nprint(mul_consecutive_nums([2.5,3.2,4.8,5.1]) # Output: 38.08\nprint(mul_consecutive_nums([0.5,1.2]) # Output: 0.6\nprint(mul_consecutive",
        "generated_testcode": "assert mul_consecutive_nums([1, 2, 3, 4, 5]) == 24\n",
        "test": "assert mul_consecutive_nums([1, 1, 3, 4, 4, 5, 6, 7])==[1, 3, 12, 16, 20, 30, 42]\nassert mul_consecutive_nums([4, 5, 8, 9, 6, 10])==[20, 40, 72, 54, 60]\nassert mul_consecutive_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[2, 6, 12, 20, 30, 42, 56, 72, 90]",
        "canonical_solution": "def mul_consecutive_nums(nums):\r\n    result = [b*a for a, b in zip(nums[:-1], nums[1:])]\r\n    return result"
    },
    {
        "number": 691,
        "prompt": "Write a function to group the 1st elements on the basis of 2nd elements in the given tuple list.\ndef group_element(test_list):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    d = {}\n    for item in test_list:\n        if item[1] in d:\n            d[item[1]].append(item[0])\n        else:\n            d[item[1]] = [item[0]]\n    return d\n\ntest_list = [(1, 'a'), (2, 'b'), (3, 'b'), (4, 'a'), (5, 'c'), (6, 'a'), (7, 'b')]\nprint(group_element(test_list))\n\n# Output: {'a': [1, 4, 6], 'b': [2, 3, 7], 'c': [5]}\n\n# Explanation:\n# 1st iteration: {'a': [1]}\n# 2nd iteration: {'a': [1], 'b': [2]}\n# 3rd iteration: {'a': [1, 4], 'b': [2, 3]}\n# 4th iteration: {'a': [1, 4, 6], 'b': [2, 3]}\n# 5th iteration: {'a': [1, 4, 6], 'b': [2, 3], 'c': [5]}\n# 6th iteration: {'a': [1, 4, 6], 'b': [2, 3, 7], 'c': [5]}\n# Output: {'a': [1, 4, 6], 'b': [2, 3, 7], 'c': [",
        "generated_testcode": "assert group_element(test_list) == {'a': [1, 2, 3], 'b': [4, 5, 6], 'c': [7, 8, 9]}\n\n# The output should be {'a': [1, 2, 3], 'b': [4, 5, 6], 'c': [7, 8, 9]}\n# The function should group the elements based on the second element of the tuple and return a dictionary with the first element as key and the list of elements as value. ",
        "test": "assert group_element([(6, 5), (2, 7), (2, 5), (8, 7), (9, 8), (3, 7)]) == {5: [6, 2], 7: [2, 8, 3], 8: [9]}\nassert group_element([(7, 6), (3, 8), (3, 6), (9, 8), (10, 9), (4, 8)]) == {6: [7, 3], 8: [3, 9, 4], 9: [10]}\nassert group_element([(8, 7), (4, 9), (4, 7), (10, 9), (11, 10), (5, 9)]) == {7: [8, 4], 9: [4, 10, 5], 10: [11]}",
        "canonical_solution": "from itertools import groupby \r\ndef group_element(test_list):\r\n  res = dict()\r\n  for key, val in groupby(sorted(test_list, key = lambda ele: ele[1]), key = lambda ele: ele[1]):\r\n    res[key] = [ele[0] for ele in val] \r\n  return (res)\r\n"
    },
    {
        "number": 692,
        "prompt": "Write a python function to find the last two digits in factorial of a given number.\ndef last_Two_Digits(N): \n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    if N < 0:\n        return -1\n    if N == 0 or N == 1:\n        return 1\n    else:\n        M = 1\n        for i in range(2, N+1):\n            M = (M * i) % 100\n        return M\n\n# Test the function\nprint(last_Two_Digits(5))  # Output: 5\nprint(last_Two_Digits(10))  # Output: 3840\nprint(last_Two_Digits(20))  # Output: 1770\nprint(last_Two_Digits(100))  # Output: 64\nprint(last_Two_Digits(0))  # Output: 1\nprint(last_Two_Digits(1))  # Output: 1\nprint(last_Two_Digits(-5))  # Output: -1\nprint(last_Two_Digits(10000)) # Output: 0\nprint(last_Two_Digits(1000000)) # Output: 64\nprint(last_Two_Digits(10000000)) # Output: 64\nprint(last_Two_Digits(500)) # Output: 56\nprint(last_Two_Digits(5000)) # Output: 56\nprint(last_Two_Digits(100000000)) # Output: 6",
        "generated_testcode": "assert last_Two_Digits(5) == 5\n",
        "test": "assert last_Two_Digits(7) == 40\nassert last_Two_Digits(5) == 20\nassert last_Two_Digits(2) == 2",
        "canonical_solution": "def last_Two_Digits(N): \r\n    if (N >= 10): \r\n        return\r\n    fac = 1\r\n    for i in range(1,N + 1): \r\n        fac = (fac * i) % 100\r\n    return (fac) "
    },
    {
        "number": 693,
        "prompt": "Write a function to remove multiple spaces in a string by using regex.\ndef remove_multiple_spaces(text1):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": true,
        "answer": "    import re\n    return re.sub(r'\\s+', ' ', text1)\n\n# Example usage:\ntext = \"this is a  sample   text  with   multiple  spaces\"\nresult = remove_multiple_spaces(text)\nprint(result) # Output: \"this is a sample text with multiple spaces\"\n",
        "generated_testcode": "assert remove_multiple_spaces(\"Hello   world\") == \"Hello world\"\n",
        "test": "assert remove_multiple_spaces('Google      Assistant') == 'Google Assistant'\nassert remove_multiple_spaces('Quad      Core') == 'Quad Core'\nassert remove_multiple_spaces('ChromeCast      Built-in') == 'ChromeCast Built-in'",
        "canonical_solution": "import re\r\ndef remove_multiple_spaces(text1):\r\n  return (re.sub(' +',' ',text1))"
    },
    {
        "number": 694,
        "prompt": "Write a function to extract unique values from the given dictionary values.\ndef extract_unique(test_dict):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    unique_list = []\n    for value in test_dict.values():\n        if value not in unique_list:\n            unique_list.append(value)\n    return unique_list\n\ntest_dict = {'a': 1, 'b': 2, 'c': 1, 'd': 3, 'e': 2, 'f': 4}\nprint(extract_unique(test_dict))  # Output: [1, 2, 3, 4]\n\n# Test the function with the given example\ntest_dict = {'a': 1, 'b': 2, 'c': 1, 'd': 3, 'e': 2, 'f': 4}\nprint(extract_unique(test_dict))  # Output: [1, 2, 3, 4] ",
        "generated_testcode": "assert extract_unique({'a': 1, 'b': 2, 'c': 3, 'd': 2, 'e': 1}) == {1, 2, 3}\n",
        "test": "assert extract_unique({'msm' : [5, 6, 7, 8],'is' : [10, 11, 7, 5],'best' : [6, 12, 10, 8],'for' : [1, 2, 5]} ) == [1, 2, 5, 6, 7, 8, 10, 11, 12]\nassert extract_unique({'Built' : [7, 1, 9, 4],'for' : [11, 21, 36, 14, 9],'ISP' : [4, 1, 21, 39, 47],'TV' : [1, 32, 38]} ) == [1, 4, 7, 9, 11, 14, 21, 32, 36, 38, 39, 47]\nassert extract_unique({'F' : [11, 13, 14, 17],'A' : [12, 11, 15, 18],'N' : [19, 21, 15, 36],'G' : [37, 36, 35]}) == [11, 12, 13, 14, 15, 17, 18, 19, 21, 35, 36, 37]",
        "canonical_solution": "def extract_unique(test_dict):\r\n  res = list(sorted({ele for val in test_dict.values() for ele in val}))\r\n  return res"
    },
    {
        "number": 695,
        "prompt": "Write a function to check if each element of the second tuple is greater than its corresponding index in the first tuple.\ndef check_greater(test_tup1, test_tup2):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    for i in range(len(test_tup1)):\n        if test_tup1[i] >= i and test_tup2[i] > test_tup1[i]:\n            return True\n        else:\n            return False\n\n\n# Test cases\nprint(check_greater((2, 5, 9, 12), (2, 3, 15)))  # True\nprint(check_greater((5, 10, 8), (1, 2, 3)))  # False\nprint(check_greater((10, 10, 10), (1, 2, 3)))  # False\nprint(check_greater((5, 10, 8), (5, 10, 10)))  # True\nprint(check_greater((5, 10, 8), (10, 5, 8)))  # False\nprint(check_greater((5, 10, 8), (1, 5, 6)))  # True\n",
        "generated_testcode": "assert check_greater((1, 2, 3, 4, 5), (0, 1, 2, 3)) == True\n",
        "test": "assert check_greater((10, 4, 5), (13, 5, 18)) == True\nassert check_greater((1, 2, 3), (2, 1, 4)) == False\nassert check_greater((4, 5, 6), (5, 6, 7)) == True",
        "canonical_solution": "def check_greater(test_tup1, test_tup2):\r\n  res = all(x < y for x, y in zip(test_tup1, test_tup2))\r\n  return (res) "
    },
    {
        "number": 696,
        "prompt": "Write a function to zip two given lists of lists.\ndef zip_list(list1,list2):  \n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    result = []\n    for i in range(len(list1)):\n        result.append([])\n        for j in range(len(list1[i])):\n            result[i].append(list1[i][j])\n            result[i].append(list2[i][j])\n    return result\n\n#Example usage:\nlist1 = [[1,2,3],[4,5,6]]\nlist2 = [[7,8,9],[10,11,12]]\nprint(zip_list(list1,list2)) # Output: [[1, 7, 2, 8, 3, 9], [4, 10, 5, 11, 6, 12]]\nlist3 = [[1,2,3],[4,5,6],[7,8,9,10]]\nlist4 = [[1,2,3],[4,5,6],[7,8,9]]\nprint(zip_list(list3,list4)) # Output: [[1, 1, 2, 3], [2, 2, 3], [3, 3], [4, 4, 5], [5, 5], [6, 6], [7, 7], [8, 8], [9, 9]]\nlist5 = [[1],[2,3,4],[5,6]]\nlist6 = [[7],[8],[9,10,11]\nprint(zip_list(list5,list6)) # Output",
        "generated_testcode": "assert zip_list([[1,2,3],[4,5,6]) == [(1,4),(2,5),(3,6)]\n",
        "test": "assert zip_list([[1, 3], [5, 7], [9, 11]] ,[[2, 4], [6, 8], [10, 12, 14]] )==[[1, 3, 2, 4], [5, 7, 6, 8], [9, 11, 10, 12, 14]]\nassert zip_list([[1, 2], [3, 4], [5, 6]] ,[[7, 8], [9, 10], [11, 12]] )==[[1, 2, 7, 8], [3, 4, 9, 10], [5, 6, 11, 12]]\nassert zip_list([['a','b'],['c','d']] , [['e','f'],['g','h']] )==[['a','b','e','f'],['c','d','g','h']]",
        "canonical_solution": "def zip_list(list1,list2):  \r\n result = list(map(list.__add__, list1, list2)) \r\n return result"
    },
    {
        "number": 697,
        "prompt": "Write a function to find number of even elements in the given list using lambda function.\ndef count_even(array_nums):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    return list(filter(lambda x: x % 2 == 0, array_nums))\n\n#Example usage:\nprint(count_even([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])) #[2, 4, 6, 8, 10]\nprint(count_even([1, 3, 5, 7, 9])) #[]\nprint(count_even([])) #[]\nprint(count_even([2, 4, 6, 8])) #[2, 4, 6, 8]\nprint(count_even([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16])) #[2, 4, 6, 8, 10, 12, 14, 16] ",
        "generated_testcode": "assert count_even([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 4\n",
        "test": "assert count_even([1, 2, 3, 5, 7, 8, 9, 10])==3\nassert count_even([10,15,14,13,-18,12,-20])==5\nassert count_even([1, 2, 4, 8, 9])==3",
        "canonical_solution": "def count_even(array_nums):\r\n   count_even = len(list(filter(lambda x: (x%2 == 0) , array_nums)))\r\n   return count_even"
    },
    {
        "number": 698,
        "prompt": "Write a function to sort dictionary items by tuple product of keys for the given dictionary with tuple keys.\ndef sort_dict_item(test_dict):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    sorted_list = sorted(test_dict.items(), key=lambda x: sum(x[0]))\n    return sorted_list\n\n\ntest_dict = {(4, 5): 10, (2, 3): 20, (1, 1): 30, (1, 2): 10, (3, 2): 40}\nprint(sort_dict_item(test_dict))\n# Output: [((1, 1), 30), ((1, 2), 10), ((2, 3), 20), ((4, 5), 10)]\n\n# Explanation:\n# The key=lambda x: sum(x[0]) argument passed to sorted() function is used to sort the dictionary items by the sum of the tuple keys.\n# Here, the lambda function returns the sum of the tuple keys for each dictionary item. The sorted function sorts the items in ascending order by default.\n# The output is a list of tuples containing key-value pairs sorted by the sum of the keys.\n",
        "generated_testcode": "assert sort_dict_item(test_dict) == sorted_dict\nprint(sorted_dict)\n\n# Output: {(1, 2): 3, (2, 3): 4, (3, 4): 5, (4, 5): 6, (5, 6): 7}\n\n",
        "test": "assert sort_dict_item({(5, 6) : 3, (2, 3) : 9, (8, 4): 10, (6, 4): 12} ) == {(2, 3): 9, (6, 4): 12, (5, 6): 3, (8, 4): 10}\nassert sort_dict_item({(6, 7) : 4, (3, 4) : 10, (9, 5): 11, (7, 5): 13} ) == {(3, 4): 10, (7, 5): 13, (6, 7): 4, (9, 5): 11}\nassert sort_dict_item({(7, 8) : 5, (4, 5) : 11, (10, 6): 12, (8, 6): 14} ) == {(4, 5): 11, (8, 6): 14, (7, 8): 5, (10, 6): 12}",
        "canonical_solution": "def sort_dict_item(test_dict):\r\n  res = {key: test_dict[key] for key in sorted(test_dict.keys(), key = lambda ele: ele[1] * ele[0])}\r\n  return  (res) \r\n"
    },
    {
        "number": 699,
        "prompt": "Write a python function to find the minimum number of swaps required to convert one binary string to another.\ndef min_Swaps(str1,str2) : \n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    n = len(str1)\n    arr1 = [ord(str1[i])-ord('0') for i in range(n)] \n    arr2 = [ord(str2[i])-ord('0') for i in range(n)] \n    # Initialize two count arrays \n    count_one = [0] * n \n    count_zero = [0] * n \n    for i in range(n) : \n        count_one[arr1[i]] += 1\n        count_zero[arr2[i]] += 1\n    # Traverse the array from left to right \n    for i in range(n): \n        for j in range(i+1,n): \n            # If we swap i and j, then the values at i and j will change \n            count_one[arr2[j]-1] -= 1\n            count_zero[arr1[j]-1] -= 1\n            # Update the count_one and count_zero arrays \n            count_one[arr1[i]-1] += 1\n            count_zero[arr2[i]-1] += 1\n            # Calculate the difference between the count_one and count_zero arrays \n            if arr1[i] != arr2[j]: \n                diff = count_one[0] + count_zero[1] \n            else: \n                diff = abs(count_one[1] - count_zero[0]) \n            # If the",
        "generated_testcode": "assert min_Swaps(\"101010\",\"010101\") == 2\n",
        "test": "assert min_Swaps(\"1101\",\"1110\") == 1\nassert min_Swaps(\"1111\",\"0100\") == \"Not Possible\"\nassert min_Swaps(\"1110000\",\"0001101\") == 3",
        "canonical_solution": "def min_Swaps(str1,str2) : \r\n    count = 0\r\n    for i in range(len(str1)) : \r\n        if str1[i] != str2[i] : \r\n            count += 1\r\n    if count % 2 == 0 : \r\n        return (count // 2) \r\n    else : \r\n        return (\"Not Possible\") "
    },
    {
        "number": 700,
        "prompt": "Write a function to count the number of elements in a list which are within a specific range.\ndef count_range_in_list(li, min, max):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    count = 0\n    for i in li:\n        if i >= min and i <= max:\n            count += 1\n    return count\n\n# Test the function with a sample input\nli = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]\nprint(count_range_in_list(li, 5, 10))  # Output: 6\n\n\n# Define a function to count the number of elements in a list that are greater than a specific value\ndef count_greater_than_value(li, val):\n    count = 0\n    for i in li:\n        if i > val:\n            count += 1\n    return count\n\n# Test the function with a sample input\nli = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]\nprint(count_greater_than_value(li, 7))  # Output: 6\n\n# Define a function to count the number of even numbers in a list\ndef count_even_numbers(li):\n    count = 0\n    for i in li:\n        if i % 2 == 0:\n            count += 1\n    return count\n\n# Test the function with a sample input\nli",
        "generated_testcode": "assert count_range_in_list([1, 2, 3, 4, 5, 6, 7, 8, 9], 3, 6) == 4\n",
        "test": "assert count_range_in_list([10,20,30,40,40,40,70,80,99],40,100)==6\nassert count_range_in_list(['a','b','c','d','e','f'],'a','e')==5\nassert count_range_in_list([7,8,9,15,17,19,45],15,20)==3",
        "canonical_solution": "def count_range_in_list(li, min, max):\r\n\tctr = 0\r\n\tfor x in li:\r\n\t\tif min <= x <= max:\r\n\t\t\tctr += 1\r\n\treturn ctr"
    },
    {
        "number": 701,
        "prompt": "Write a function to find the equilibrium index of the given array.\ndef equilibrium_index(arr):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    n = len(arr)\n    left_sum = [0]*n\n    right_sum = [0]*n\n    total_sum = sum(arr)\n    left_sum[0] = arr[0]\n    right_sum[n-1] = arr[n-1]\n\n    for i in range(1, n):\n        left_sum[i] = left_sum[i-1] + arr[i]\n\n    for i in range(n-2, -1, -1):\n        right_sum[i] = right_sum[i+1] + arr[i]\n\n    for i in range(n):\n        if left_sum[i] == right_sum[i]:\n            return i\n    return -1\n\n# Test the function with sample inputs\narr = [1, 3, 5, 2, 2, 2]\nprint(equilibrium_index(arr))  # Output: 3 (index 3 is the equilibrium index)\n\narr = [1, 3, 5, 2, 2, 1]\nprint(equilibrium_index(arr))  # Output: -1 (no equilibrium index)\n\narr = [1, 3, 5, -2, 2, 1]\nprint(equilibrium_index(arr))  # Output: 1 (index 1 is the equilibrium index)\n\narr = [1, 3, -1, 5, -2, 1]\nprint(equ",
        "generated_testcode": "assert equilibrium_index([1, 3, 5, 2, 2]) == 3\n",
        "test": "assert equilibrium_index([1, 2, 3, 4, 1, 2, 3]) == 3\nassert equilibrium_index([-7, 1, 5, 2, -4, 3, 0]) == 3\nassert equilibrium_index([1, 2, 3]) == -1",
        "canonical_solution": "def equilibrium_index(arr):\r\n  total_sum = sum(arr)\r\n  left_sum=0\r\n  for i, num in enumerate(arr):\r\n    total_sum -= num\r\n    if left_sum == total_sum:\r\n      return i\r\n    left_sum += num\r\n  return -1"
    },
    {
        "number": 702,
        "prompt": "Write a function to find the minimum number of elements that should be removed such that amax-amin<=k.\ndef find_ind(key, i, n, \n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "            arr): \n    j = i\n    while j < n and arr[j] < key: \n        j += 1\n    return j \n  \ndef minElements(arr, n, k): \n    arr.sort() \n    i = 0\n    j = n - 1\n    count = 0\n  \n    while i < j: \n        if arr[j] - arr[i] <= k: \n            count += j - i\n            break\n        else: \n            count += 1\n            i = find_ind(arr[i] + k, i + 1, n, arr) \n            j = find_ind(arr[j] - k, 0, n, arr) \n  \n    return count\n\n# test the function\narr = [1, 5, 8, 9, 12, 13] \nn = len(arr) \nk = 3\nprint(minElements(arr, n, k)) ",
        "generated_testcode": "assert find_ind(10, 5, 10) == 0\n",
        "test": "assert removals([1, 3, 4, 9, 10,11, 12, 17, 20], 9, 4) == 5\nassert removals([1, 5, 6, 2, 8], 5, 2) == 3\nassert removals([1, 2, 3 ,4, 5, 6], 6, 3) == 2",
        "canonical_solution": "def find_ind(key, i, n, \r\n\t\t\tk, arr):\r\n\tind = -1\r\n\tstart = i + 1\r\n\tend = n - 1;\r\n\twhile (start < end):\r\n\t\tmid = int(start +\r\n\t\t\t\t(end - start) / 2)\r\n\t\tif (arr[mid] - key <= k):\r\n\t\t\tind = mid\r\n\t\t\tstart = mid + 1\r\n\t\telse:\r\n\t\t\tend = mid\r\n\treturn ind\r\ndef removals(arr, n, k):\r\n\tans = n - 1\r\n\tarr.sort()\r\n\tfor i in range(0, n):\r\n\t\tj = find_ind(arr[i], i, \r\n\t\t\t\t\tn, k, arr)\r\n\t\tif (j != -1):\r\n\t\t\tans = min(ans, n -\r\n\t\t\t\t\t\t(j - i + 1))\r\n\treturn ans"
    },
    {
        "number": 703,
        "prompt": "Write a function to check whether the given key is present in the dictionary or not.\ndef is_key_present(d,x):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": true,
        "answer": "    return x in d.keys()\n\n#Testing the function\nd={\"a\":1,\"b\":2,\"c\":3,\"d\":4}\nprint(is_key_present(d,\"c\")) #Output: True\nprint(is_key_present(d,\"e\")) #Output: False ",
        "generated_testcode": "assert is_key_present({'a':1,'b':2,'c':3},'a') == True\n",
        "test": "assert is_key_present({1: 10, 2: 20, 3: 30, 4: 40, 5: 50, 6: 60},5)==True\nassert is_key_present({1: 10, 2: 20, 3: 30, 4: 40, 5: 50, 6: 60},6)==True\nassert is_key_present({1: 10, 2: 20, 3: 30, 4: 40, 5: 50, 6: 60},10)==False",
        "canonical_solution": "def is_key_present(d,x):\r\n  if x in d:\r\n    return True\r\n  else:\r\n     return False"
    },
    {
        "number": 704,
        "prompt": "Write a function to calculate the harmonic sum of n-1.\ndef harmonic_sum(n):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": true,
        "answer": "    if n == 1:\n        return 1\n    else:\n        return 1/n + harmonic_sum(n-1)\n\n# Test the function\nprint(harmonic_sum(4)) # Output: 2.25\nprint(harmonic_sum(5)) # Output: 2.283333333333333333335\n\n# The above function will keep calling itself until it reaches n=1, and then it will start adding up all the values until it reaches the final sum. However, this is an infinite recursion, which will cause a stack overflow error. \n# We can fix this by using a loop instead. \n\ndef harmonic_sum(n):\n    total = 0\n    for i in range(1, n+1):\n        total += 1/i\n    return total\n\n# Test the function\nprint(harmonic_sum(4)) # Output: 2.25\nprint(harmonic_sum(5)) # Output: 2.28333333333333333335\n\n# Here, we initialize a variable total to zero and then loop through all the values from 1 to n, adding 1/i to it. \n# This is much more efficient than recursion and will not cause a stack overflow error. ",
        "generated_testcode": "assert harmonic_sum(1) == 1\n",
        "test": "assert harmonic_sum(10)==2.9289682539682538\nassert harmonic_sum(4)==2.083333333333333\nassert harmonic_sum(7)==2.5928571428571425 ",
        "canonical_solution": "def harmonic_sum(n):\r\n  if n < 2:\r\n    return 1\r\n  else:\r\n    return 1 / n + (harmonic_sum(n - 1))"
    },
    {
        "number": 705,
        "prompt": "Write a function to sort a list of lists by length and value.\ndef sort_sublists(list1):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    \"\"\"\n    Sort a list of lists by length, and then by value.\n    \"\"\"\n    sorted_list = sorted(list1, key=lambda x: (len(x), x) if len(x) > 0 else (0, x))\n    return sorted_list\n\n# Example usage:\nlist1 = [[1, 2, 3], [4, 5], [6, 7, 8, 9], [], [10], [11, 12, 13, 14, 15]]\nprint(sort_sublists(list1))\n# Output: [[], [4, 5], [1, 2, 3], [10], [6, 7, 8, 9], [11, 12, 13, 14, 15]]\n\n\n# Explanation:\n# The function uses the `sorted()` method to sort the list, which takes an optional `key` argument.\n# The key is a function that returns a value to be used as the sorting key for each element.\n# In this case, the key function is a lambda function that returns a tuple with two values:\n# the length of the sublist as the first element, and the sublist itself as the second element.\n# If the length of the sublist is 0, it returns (0, sublist) to ensure that empty sublists come first.\n# This way, the sublists are first sorted by length, and then by value within each length category. ",
        "generated_testcode": "assert sort_sublists([\"apple\", \"banana\", \"cherry\", \"date\", \"elderberry\", \"fig\", \"grape\", \"kiwi\"]) == [\"kiwi\", \"fig\", \"date\", \"apple\", \"banana\", \"cherry\", \"elderberry\"]\n",
        "test": "assert sort_sublists([[2], [0], [1, 3], [0, 7], [9, 11], [13, 15, 17]])==[[0], [2], [0, 7], [1, 3], [9, 11], [13, 15, 17]]\nassert sort_sublists([[1], [2, 3], [4, 5, 6], [7], [10, 11]])==[[1], [7], [2, 3], [10, 11], [4, 5, 6]]\nassert sort_sublists([[\"python\"],[\"java\",\"C\",\"C++\"],[\"DBMS\"],[\"SQL\",\"HTML\"]])==[['DBMS'], ['python'], ['SQL', 'HTML'], ['java', 'C', 'C++']]",
        "canonical_solution": "def sort_sublists(list1):\r\n      list1.sort()  \r\n      list1.sort(key=len)\r\n      return  list1"
    },
    {
        "number": 706,
        "prompt": "Write a function to find whether an array is subset of another array.\ndef is_subset(arr1, m, arr2, n): \n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": true,
        "answer": "    d = {} \n    for i in arr2: \n        if i in d: \n            d[i] += 1\n        else: \n            d[i] = 1\n    for i in arr1: \n        if i not in d or d[i] == 0: \n            return False\n        else: \n            d[i] -= 1\n    return True\n\narr1 = [1, 2, 3, 4, 5, 6] \narr2 = [2, 3, 5] \nprint(is_subset(arr1, len(arr1), arr2, len(arr2)) ) ",
        "generated_testcode": "assert is_subset([1, 2, 3], 3, [1, 2, 3, 4, 5], 4) == True\n",
        "test": "assert is_subset([11, 1, 13, 21, 3, 7], 6, [11, 3, 7, 1], 4) == True\nassert is_subset([1, 2, 3, 4, 5, 6], 6, [1, 2, 4], 3) == True\nassert is_subset([10, 5, 2, 23, 19], 5, [19, 5, 3], 3) == False",
        "canonical_solution": "def is_subset(arr1, m, arr2, n): \r\n\thashset = set() \r\n\tfor i in range(0, m): \r\n\t\thashset.add(arr1[i]) \r\n\tfor i in range(0, n): \r\n\t\tif arr2[i] in hashset: \r\n\t\t\tcontinue\r\n\t\telse: \r\n\t\t\treturn False\r\n\treturn True\t\t"
    },
    {
        "number": 707,
        "prompt": "Write a python function to count the total set bits from 1 to n.\ndef count_Set_Bits(n) :  \n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    count = 0\n    for i in range(1, n+1) : \n        while i : \n            count += i & 1\n            i >>= 1\n    return count \n  \nn = 15\nprint(count_Set_Bits(n)) ",
        "generated_testcode": "assert count_Set_Bits(10) == 2\n",
        "test": "assert count_Set_Bits(16) == 33\nassert count_Set_Bits(2) == 2\nassert count_Set_Bits(14) == 28",
        "canonical_solution": "def count_Set_Bits(n) :  \r\n    n += 1; \r\n    powerOf2 = 2;   \r\n    cnt = n // 2;  \r\n    while (powerOf2 <= n) : \r\n        totalPairs = n // powerOf2;  \r\n        cnt += (totalPairs // 2) * powerOf2;  \r\n        if (totalPairs & 1) : \r\n            cnt += (n % powerOf2) \r\n        else : \r\n            cnt += 0\r\n        powerOf2 <<= 1;    \r\n    return cnt;  "
    },
    {
        "number": 708,
        "prompt": "Write a python function to convert a string to a list.\ndef Convert(string): \n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": true,
        "answer": "    return list(string) \n\n# Driver code \nstring = \"GeeksforGeeks\"\nresult = Convert(string) \nprint(result) ",
        "generated_testcode": "assert Convert(\"hello\") == [\"h\", \"e\", \"l\", \"l\", \"o\"]\n",
        "test": "assert Convert('python program') == ['python','program']\nassert Convert('Data Analysis') ==['Data','Analysis']\nassert Convert('Hadoop Training') == ['Hadoop','Training']",
        "canonical_solution": "def Convert(string): \r\n    li = list(string.split(\" \")) \r\n    return li "
    },
    {
        "number": 709,
        "prompt": "Write a function to count unique keys for each value present in the tuple.\ndef get_unique(test_list):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    unique_dict = {}\n    for item in test_list:\n        if item not in unique_dict:\n            unique_dict[item] = 1\n        else:\n            unique_dict[item] += 1\n    return unique_dict\n\n\ntest_list = (1, 2, 3, 4, 3, 2, 1, 2, 4, 5, 6, 6, 7, 8)\nprint(get_unique(test_list))\n# Output: {1: 2, 2: 3, 3: 2, 4: 2, 5: 1, 6: 2, 7: 1, 8: 1}\n\n\n# Time Complexity: O(n)\n# Space Complexity: O(n)\n\n# Using defaultdict to count unique keys for each value in the tuple\nfrom collections import defaultdict\n\ndef get_unique(test_list):\n    unique_dict = defaultdict(int)\n    for item in test_list:\n        unique_dict[item] += 1\n    return unique_dict\n\ntest_list = (1, 2, 3, 4, 3, 2, 1, 2, 4, 5, 6, 6, 7, 8)\nprint(get_unique(test_list))\n# Output: defaultdict(<class 'int'>, {1: 2, 2: 3, 3: 2",
        "generated_testcode": "assert get_unique(('a', 'b', 'c', 'a', 'd', 'b', 'c') == {'a': 2, 'b': 2, 'c': 2, 'd': 1}\n",
        "test": "assert get_unique([(3, 4), (1, 2), (2, 4), (8, 2), (7, 2), (8, 1), (9, 1), (8, 4), (10, 4)] ) == '{4: 4, 2: 3, 1: 2}'\nassert get_unique([(4, 5), (2, 3), (3, 5), (9, 3), (8, 3), (9, 2), (10, 2), (9, 5), (11, 5)] ) == '{5: 4, 3: 3, 2: 2}'\nassert get_unique([(6, 5), (3, 4), (2, 6), (11, 1), (8, 22), (8, 11), (4, 3), (14, 3), (11, 6)] ) == '{5: 1, 4: 1, 6: 2, 1: 1, 22: 1, 11: 1, 3: 2}'",
        "canonical_solution": "from collections import defaultdict \r\ndef get_unique(test_list):\r\n  res = defaultdict(list)\r\n  for sub in test_list:\r\n    res[sub[1]].append(sub[0])\r\n  res = dict(res)\r\n  res_dict = dict()\r\n  for key in res:\r\n    res_dict[key] = len(list(set(res[key])))\r\n  return (str(res_dict)) "
    },
    {
        "number": 710,
        "prompt": "Write a function to access the initial and last data of the given tuple record.\ndef front_and_rear(test_tup):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    return test_tup[0], test_tup[-1]\n\n# Test the function with the given tuple\nmy_tup = ('apple', 'banana', 'cherry', 'date', 'elderberry')\nprint(front_and_rear(my_tup))  # Output: ('apple', 'elderberry')\n\n# Extract the second and third data of the tuple using indexing\ndef second_and_third(test_tup):\n    return test_tup[1], test_tup[2]\n\n# Test the function with the given tuple\nmy_tup = ('apple', 'banana', 'cherry', 'date', 'elderberry')\nprint(second_and_third(my_tup))  # Output: ('banana', 'cherry')\n\n# Access the tuple elements using negative indexing\ndef front_and_rear_rev(test_tup):\n    return test_tup[0], test_tup[-1]\n\n# Test the function with the given tuple\nmy_tup = ('apple', 'banana', 'cherry', 'date', 'elderberry')\nprint(front_and_rear_rev(my_tup))  # Output: ('elderberry', 'apple')\n\n# Modify the second element of the tuple using indexing\ndef modify_second(test_tup):\n    new_tup = list(test_tup)\n    new_tup[1] = 'orange'\n    return tuple(new_",
        "generated_testcode": "assert front_and_rear((1, 2, 3, 4, 5, 6, 7, 8, 9, 10) == (1, 10)\n\n",
        "test": "assert front_and_rear((10, 4, 5, 6, 7)) == (10, 7)\nassert front_and_rear((1, 2, 3, 4, 5)) == (1, 5)\nassert front_and_rear((6, 7, 8, 9, 10)) == (6, 10)",
        "canonical_solution": "def front_and_rear(test_tup):\r\n  res = (test_tup[0], test_tup[-1])\r\n  return (res) "
    },
    {
        "number": 711,
        "prompt": "Write a python function to check whether the product of digits of a number at even and odd places is equal or not.\ndef product_Equal(n): \n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    sum_even = 1\n    sum_odd = 1\n    n = abs(n)\n    while(n>0): \n        r = n%10\n        sum_even *= r\n        n = n//10\n        n = n//2\n        r = n%10\n        sum_odd *= r\n        n = n//2\n    return sum_even == sum_odd \n  \n# test the function \nn = int(input(\"Enter a number:\")\nif product_Equal(n): \n    print(\"Product of digits at even and odd places are equal\") \nelse: \n    print(\"Product of digits at even and odd places are not equal\") ",
        "generated_testcode": "assert product_Equal(12345) == True\n",
        "test": "assert product_Equal(2841) == True\nassert product_Equal(1234) == False\nassert product_Equal(1212) == False",
        "canonical_solution": "def product_Equal(n): \r\n    if n < 10: \r\n        return False\r\n    prodOdd = 1; prodEven = 1\r\n    while n > 0: \r\n        digit = n % 10\r\n        prodOdd *= digit \r\n        n = n//10\r\n        if n == 0: \r\n            break; \r\n        digit = n % 10\r\n        prodEven *= digit \r\n        n = n//10\r\n    if prodOdd == prodEven: \r\n        return True\r\n    return False"
    },
    {
        "number": 712,
        "prompt": "Write a function to remove duplicates from a list of lists.\ndef remove_duplicate(list1):\n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    new_list = []\n    for i in list1:\n        if i not in new_list:\n            new_list.append(i)\n    return new_list\n\n\n# test the function\nmy_list = [[1, 2, 3], [2, 3, 4], [3, 4, 5], [4, 5, 6], [1, 2, 3]]\nprint(remove_duplicate(my_list))\n",
        "generated_testcode": "assert remove_duplicate([\"apple\", \"banana\", \"orange\", \"apple\", \"grape\", \"orange\", \"grape\"]) == [\"apple\", \"banana\", \"orange\", \"grape\"]\n",
        "test": "assert remove_duplicate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]])==[[10, 20], [30, 56, 25], [33], [40]] \nassert remove_duplicate([\"a\", \"b\", \"a\", \"c\", \"c\"] )==[\"a\", \"b\", \"c\"]\nassert remove_duplicate([1, 3, 5, 6, 3, 5, 6, 1] )==[1, 3, 5, 6]",
        "canonical_solution": "import itertools\r\ndef remove_duplicate(list1):\r\n list.sort(list1)\r\n remove_duplicate = list(list1 for list1,_ in itertools.groupby(list1))\r\n return remove_duplicate"
    },
    {
        "number": 713,
        "prompt": "Write a function to check if the given tuple contains all valid values or not.\ndef check_valid(test_tup):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    # Check if all values in tuple are valid\n    for value in test_tup:\n        if type(value) != int and type(value) != float:\n            return False\n    # Check if all values in tuple are non-negative\n    for value in test_tup:\n        if value < 0:\n            return False\n    return True\n\n# Test cases\nprint(check_valid((1, 2, 3, 4, 5)) == True)\nprint(check_valid((1, 2, 3, -4, 5)) == False)\nprint(check_valid((1, 2, 3, 4.5, 5.6) == True)\nprint(check_valid((1, 2, \"three\", 4, 5) == False)\n\n# Test cases with empty tuple\nprint(check_valid(()) == True)\nprint(check_valid(()) == True)\nprint(check_valid((-1, 2, 3) == False)\nprint(check_valid((1, 2, \"three\") == False) ",
        "generated_testcode": "assert check_valid((1, 2, 3, 4, 5, 6) == True\n",
        "test": "assert check_valid((True, True, True, True) ) == True\nassert check_valid((True, False, True, True) ) == False\nassert check_valid((True, True, True, True) ) == True",
        "canonical_solution": "def check_valid(test_tup):\r\n  res = not any(map(lambda ele: not ele, test_tup))\r\n  return (res) "
    },
    {
        "number": 714,
        "prompt": "Write a python function to count the number of distinct power of prime factor of given number.\ndef count_Fac(n):  \n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    count = 0\n    i = 2\n    while(n > 1): \n        while(n % i == 0): \n            count += 1\n            n /= i \n        i += 1\n    return count\n  \ndef distinct_power(n):\n    distinct = 0\n    for i in range(2, n+1):\n        if(n % i == 0):\n            distinct += count_Fac(i)\n    return distinct\n\nn = int(input(\"Enter a number: \"))\nprint(distinct_power(n)) ",
        "generated_testcode": "assert count_Fac(12) == 2\n",
        "test": "assert count_Fac(24) == 3\nassert count_Fac(12) == 2\nassert count_Fac(4) == 1",
        "canonical_solution": "def count_Fac(n):  \r\n    m = n \r\n    count = 0\r\n    i = 2\r\n    while((i * i) <= m): \r\n        total = 0\r\n        while (n % i == 0): \r\n            n /= i \r\n            total += 1 \r\n        temp = 0\r\n        j = 1\r\n        while((temp + j) <= total): \r\n            temp += j \r\n            count += 1\r\n            j += 1 \r\n        i += 1\r\n    if (n != 1): \r\n        count += 1 \r\n    return count "
    },
    {
        "number": 715,
        "prompt": "Write a function to convert the given string of integers into a tuple.\ndef str_to_tuple(test_str):\n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    result = []\n    for i in test_str.split(','):\n        result.append(int(i))\n    return tuple(result)\n\n\n# Test the function with sample input\nprint(str_to_tuple(\"1,2,3,4,5\"))  # Output: (1, 2, 3, 4, 5)\nprint(str_to_tuple(\"10,20,30\"))   # Output: (10, 20, 30)\nprint(str_to_tuple(\"5\"))         # Output: (5,) \n\n# Output: (1, 2, 3, 4, 5)\n# Output: (10, 20, 30)\n# Output: (5,) ",
        "generated_testcode": "assert str_to_tuple(\"1,2,3,4,5\") == (1, 2, 3, 4, 5)\n",
        "test": "assert str_to_tuple(\"1, -5, 4, 6, 7\") == (1, -5, 4, 6, 7)\nassert str_to_tuple(\"1, 2, 3, 4, 5\") == (1, 2, 3, 4, 5)\nassert str_to_tuple(\"4, 6, 9, 11, 13, 14\") == (4, 6, 9, 11, 13, 14)",
        "canonical_solution": "def str_to_tuple(test_str):\r\n  res = tuple(map(int, test_str.split(', ')))\r\n  return (res) "
    },
    {
        "number": 716,
        "prompt": "Write a function to find the perimeter of a rombus.\ndef rombus_perimeter(a):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    perimeter = 4 * a\n    return perimeter\n\n# Test the function with the following example rombus:\nprint(rombus_perimeter(5))  # Output: 20 ",
        "generated_testcode": "assert rombus_perimeter(5) == 20\n",
        "test": "assert rombus_perimeter(10)==40\nassert rombus_perimeter(5)==20\nassert rombus_perimeter(4)==16",
        "canonical_solution": "def rombus_perimeter(a):\r\n  perimeter=4*a\r\n  return perimeter"
    },
    {
        "number": 717,
        "prompt": "Write a function to calculate the standard deviation.\ndef sd_calc(data):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    n = len(data)\n    mean = sum(data) / n\n    variance = sum([((x - mean) ** 2 for x in data]) / n\n    return variance ** 0.5\n\n\n# Test the function\ndata = [2, 4, 4, 4, 4, 5, 5, 7, 9]\nprint(sd_calc(data)) # Output: 2.0\n\n# You can also use numpy library for this purpose\nimport numpy as np\nprint(np.std(data)) # Output: 2.0\n```\n\nThis function calculates the standard deviation using the formula:\n\n- Calculate the mean of the data set\n- Subtract the mean from each data point\n- Square the result\n- Divide by the number of data points\n- Sum all the squared differences\n- Take the square root of the result to get the variance\n- Take the square root of the variance to get the standard deviation\n\nNote that the function uses list comprehension to perform the calculations more efficiently. ",
        "generated_testcode": "assert sd_calc([1, 2, 3, 4, 5]) == 1.5811388830084189\n",
        "test": "assert sd_calc([4, 2, 5, 8, 6])== 2.23606797749979\nassert sd_calc([1,2,3,4,5,6,7])==2.160246899469287\nassert sd_calc([5,9,10,15,6,4])==4.070217029430577",
        "canonical_solution": "import math\r\nimport sys\r\ndef sd_calc(data):\r\n    n = len(data)\r\n    if n <= 1:\r\n        return 0.0\r\n    mean, sd = avg_calc(data), 0.0\r\n    for el in data:\r\n        sd += (float(el) - mean)**2\r\n    sd = math.sqrt(sd / float(n-1))\r\n    return sd\r\ndef avg_calc(ls):\r\n    n, mean = len(ls), 0.0\r\n    if n <= 1:\r\n        return ls[0]\r\n    for el in ls:\r\n        mean = mean + float(el)\r\n    mean = mean / float(n)\r\n    return mean"
    },
    {
        "number": 718,
        "prompt": "Write a function to create a list taking alternate elements from another given list.\ndef alternate_elements(list1):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    return [list1[i] for i in range(0, len(list1), 2)]\n\n# Example usage:\nprint(alternate_elements([1, 2, 3, 4, 5, 6, 7, 8, 9])) # Output: [1, 3, 5, 7]\nprint(alternate_elements(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j']) # Output: ['a', 'c', 'e', 'g', 'i']\n```\n\nIn this code, we are using a list comprehension to iterate over the given list `list1` with a step of 2 (i.e. `range(0, len(list1), 2)`) and selecting the elements at these indices. ",
        "generated_testcode": "assert alternate_elements([1, 2, 3, 4, 5, 6, 7, 8, 9]) == [1, 3, 5, 7]\n",
        "test": "assert alternate_elements([\"red\", \"black\", \"white\", \"green\", \"orange\"])==['red', 'white', 'orange']\nassert alternate_elements([2, 0, 3, 4, 0, 2, 8, 3, 4, 2])==[2, 3, 0, 8, 4]\nassert alternate_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1,3,5,7,9]",
        "canonical_solution": "def alternate_elements(list1):\r\n    result=[]\r\n    for item in list1[::2]:\r\n        result.append(item)\r\n    return result "
    },
    {
        "number": 719,
        "prompt": "Write a function that matches a string that has an a followed by zero or more b's.\ndef text_match(text):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    return re.search('ab*', text)\nprint(text_match('abbbbb')) # should return a Match object\nprint(text_match('abc')) # should return a Match object\nprint(text_match('a')) # should return a Match object\nprint(text_match('b')) # should return None\n\n# matches a followed by zero or more b's followed by a c\ndef text_match(text):\n    return re.search('ab*c', text)\nprint(text_match('abbbbc')) # should return a Match object\nprint(text_match('ac')) # should return None\nprint(text_match('abc')) # should return a Match object\nprint(text_match('abbc')) # should return a Match object\n\n# matches a followed by one or more b's\ndef text_match(text):\n    return re.search('ab+', text)\nprint(text_match('abbbb')) # should return a Match object\nprint(text_match('abc')) # should return None\nprint(text_match('a')) # should return None\n\n# matches a followed by one or more digits\ndef text_match(text):\n    return re.search('a\\d+', text)\nprint(text_match('a1234')) # should return a Match object\nprint(text_match('abcd123')) # should return a Match object\nprint(text_match('a1234a567')) # should return a Match object\nprint(text_match('a')) #",
        "generated_testcode": "assert text_match(\"ab\") == True\n",
        "test": "assert text_match(\"ac\")==('Found a match!')\nassert text_match(\"dc\")==('Not matched!')\nassert text_match(\"abba\")==('Found a match!')",
        "canonical_solution": "import re\r\ndef text_match(text):\r\n        patterns = 'ab*?'\r\n        if re.search(patterns,  text):\r\n                return 'Found a match!'\r\n        else:\r\n                return('Not matched!')"
    },
    {
        "number": 720,
        "prompt": "Write a function to add a dictionary to the tuple.\ndef add_dict_to_tuple(test_tup, test_dict):\n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    \"\"\"\n    This function takes a tuple and a dictionary as input and returns a new tuple that includes the dictionary as an element.\n\n    Args:\n       test_tup(tuple): a tuple of elements\n       test_dict(dictionary): a dictionary\n\n    Returns:\n       A tuple with the dictionary as the last element\n    \"\"\"\n    return test_tup + (test_dict,)\n\n# Test the function with an example\nprint(add_dict_to_tuple((\"apple\", \"banana\", \"cherry\"), {\"orange\": 1, \"pear\": 2}))\n\n# Output: ('apple', 'banana', 'cherry', {'orange': 1, 'pear': 2})\n\n# Write a function to remove an element from a tuple\ndef remove_element_from_tuple(test_tup, index):\n    \"\"\"\n    This function takes a tuple and an index and returns a new tuple with the element at the given index removed.\n\n    Args:\n       test_tup(tuple): a tuple of elements\n       index(int): index of the element to be removed\n\n    Returns:\n       A tuple with the element at the given index removed\n    \"\"\"\n    return test_tup[:index] + test_tup[index+1:]\n\n# Test the function with an example\nprint(remove_element_from_tuple((\"apple\", \"banana\", \"cherry\", \"orange\"), 2))\n\n# Output: ('apple', 'banana', 'orange')\n\n#",
        "generated_testcode": "assert add_dict_to_tuple(('a', 'b', 'c', 'd'), {'e': 1, 'f': 2}) == ('a', 'b', 'c', 'd', {'e': 1, 'f': 2})\n",
        "test": "assert add_dict_to_tuple((4, 5, 6), {\"MSAM\" : 1, \"is\" : 2, \"best\" : 3} ) == (4, 5, 6, {'MSAM': 1, 'is': 2, 'best': 3})\nassert add_dict_to_tuple((1, 2, 3), {\"UTS\" : 2, \"is\" : 3, \"Worst\" : 4} ) == (1, 2, 3, {'UTS': 2, 'is': 3, 'Worst': 4})\nassert add_dict_to_tuple((8, 9, 10), {\"POS\" : 3, \"is\" : 4, \"Okay\" : 5} ) == (8, 9, 10, {'POS': 3, 'is': 4, 'Okay': 5})",
        "canonical_solution": "def add_dict_to_tuple(test_tup, test_dict):\r\n  test_tup = list(test_tup)\r\n  test_tup.append(test_dict)\r\n  test_tup = tuple(test_tup)\r\n  return (test_tup) "
    },
    {
        "number": 721,
        "prompt": "Write a function to find a path with the maximum average over all existing paths for the given square matrix of size n*n.\ndef maxAverageOfPath(cost, N): \n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    if not cost or not cost[0] or len(cost) != N or len(cost[0]) != N: \n        return 0\n\n    dp = [[0 for _ in range(N)] for _ in range(N)] \n    dp[0][0] = cost[0][0] \n\n    # Initialize the first row \n    for i in range(1, N): \n        dp[0][i] = dp[0][i-1] + cost[0][i] \n\n    # Initialize the first column \n    for i in range(1, N): \n        dp[i][0] = dp[i-1][0] + cost[i][0] \n\n    # Fill the DP table in bottom-up fashion \n    for i in range(1, N): \n        for j in range(1, N): \n            dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + cost[i][j] \n\n    # Find the maximum average path from the bottom-right corner \n    max_sum = dp[-1][-1] \n    for i in range(N-2, -1, -1): \n        for j in range(N-2, -1, -1): \n            max_sum = max(max_sum, dp[i][j]) \n            dp[i][j] = (dp[i][j]",
        "generated_testcode": "assert maxAverageOfPath([[1,2,3],[4,5,6],[7,8,9]], 3) == 6.67\n",
        "test": "assert maxAverageOfPath([[1, 2, 3], [6, 5, 4], [7, 3, 9]], 3) == 5.2\nassert maxAverageOfPath([[2, 3, 4], [7, 6, 5], [8, 4, 10]], 3) == 6.2\nassert maxAverageOfPath([[3, 4, 5], [8, 7, 6], [9, 5, 11]], 3) == 7.2 ",
        "canonical_solution": "M = 100\r\ndef maxAverageOfPath(cost, N): \r\n\tdp = [[0 for i in range(N + 1)] for j in range(N + 1)] \r\n\tdp[0][0] = cost[0][0] \r\n\tfor i in range(1, N): \r\n\t\tdp[i][0] = dp[i - 1][0] + cost[i][0] \r\n\tfor j in range(1, N): \r\n\t\tdp[0][j] = dp[0][j - 1] + cost[0][j] \r\n\tfor i in range(1, N): \r\n\t\tfor j in range(1, N): \r\n\t\t\tdp[i][j] = max(dp[i - 1][j], \r\n\t\t\t\t\t\tdp[i][j - 1]) + cost[i][j] \r\n\treturn dp[N - 1][N - 1] / (2 * N - 1)"
    },
    {
        "number": 722,
        "prompt": "Write a function to filter the height and width of students which are stored in a dictionary.\ndef filter_data(students,h,w):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    result = []\n    for student in students:\n        if student[\"height\"] == h and student[\"width\"] == w:\n            result.append(student)\n    return result\n\n# Test the function with an example dictionary\nstudents = [\n    {\"name\": \"Alice\", \"height\": 160, \"width\": 100},\n    {\"name\": \"Bob\", \"height\": 170, \"width\": 90},\n    {\"name\": \"Charlie\", \"height\": 160, \"width\": 1100},\n    {\"name\": \"David\", \"height\": 180, \"width\": 1120},\n]\n\nfiltered_students = filter_data(students, 160, 100)\nprint(filtered_students)  # Output: [{\"name\": \"Alice\", \"height\": 160, \"width\": 100}, {\"name\": \"Charlie\", \"height\": 160, \"width\": 100}]\n\n# The function should return a list of all the students whose height is 160 and width is 100.\n# In this case, the output should be a list with two dictionaries because both Alice and Charlie have a height of 160 and a width of 100. ",
        "generated_testcode": "assert filter_data(students, 170, 60) == [{'name': 'John', 'age': 16, 'height': 170, 'width': 60}, {'name': 'Alice', 'age': 15, 'height': 170, 'width': 60}]\n",
        "test": "assert filter_data({'Cierra Vega': (6.2, 70), 'Alden Cantrell': (5.9, 65), 'Kierra Gentry': (6.0, 68), 'Pierre Cox': (5.8, 66)},6.0,70)=={'Cierra Vega': (6.2, 70)}\nassert filter_data({'Cierra Vega': (6.2, 70), 'Alden Cantrell': (5.9, 65), 'Kierra Gentry': (6.0, 68), 'Pierre Cox': (5.8, 66)},5.9,67)=={'Cierra Vega': (6.2, 70),'Kierra Gentry': (6.0, 68)}\nassert filter_data({'Cierra Vega': (6.2, 70), 'Alden Cantrell': (5.9, 65), 'Kierra Gentry': (6.0, 68), 'Pierre Cox': (5.8, 66)},5.7,64)=={'Cierra Vega': (6.2, 70),'Alden Cantrell': (5.9, 65),'Kierra Gentry': (6.0, 68),'Pierre Cox': (5.8, 66)}",
        "canonical_solution": "def filter_data(students,h,w):\r\n    result = {k: s for k, s in students.items() if s[0] >=h and s[1] >=w}\r\n    return result    "
    },
    {
        "number": 723,
        "prompt": "Write a function to count the same pair in two given lists using map function.\ndef count_same_pair(nums1, nums2):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    \"\"\"\n    Given two lists of integers nums1 and nums2, return the number of elements in common between the two lists.\n    The function should use the map function to count the same elements in both lists.\n    :param nums1: list of integers\n    :param nums2: list of integers\n    :return: integer, count of same elements in both lists\n    \"\"\"\n    # Your code goes here\n    return len(list(map(lambda x: nums1.count(x), filter(lambda x: x in nums1 and x in nums2, set(nums1)))\n\n# Example usage:\nnums1 = [1, 2, 3, 4, 5, 6, 7, 8]\nnums2 = [4, 5, 6, 7, 8, 9, 10]\nprint(count_same_pair(nums1, nums2))  # Output: 3 (as there are 3 elements in common)\n\nnums1 = [1, 2, 3, 4, 5, 6, 7]\nnums2 = [4, 5, 6, 7, 8, 9, 10]\nprint(count_same_pair(nums1, nums2))  # Output: 3 (as there are 3 elements in common)\n\nnums1 = [1, 2, 3, 4, 5, 6, 7]\nnums2 =",
        "generated_testcode": "assert count_same_pair([1, 2, 3, 4, 5], [3, 4, 5, 6]) == 2\n",
        "test": "assert count_same_pair([1, 2, 3, 4, 5, 6, 7, 8],[2, 2, 3, 1, 2, 6, 7, 9])==4\nassert count_same_pair([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8],[2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8])==11\nassert count_same_pair([2, 4, -6, -9, 11, -12, 14, -5, 17],[2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8])==1",
        "canonical_solution": "from operator import eq\r\ndef count_same_pair(nums1, nums2):\r\n    result = sum(map(eq, nums1, nums2))\r\n    return result"
    },
    {
        "number": 724,
        "prompt": "Write a function to calculate the sum of all digits of the base to the specified power.\ndef power_base_sum(base, power):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    total = 0\n    for digit in str(base):\n        total += int(digit) ** power\n    return total\n\nprint(power_base_sum(271, 2)) # 4\nprint(power_base_sum(123, 3)) # 15\nprint(power_base_sum(456, 4)) # 12\nprint(power_base_sum(987, 5)) # 12\nprint(power_base_sum(123456789, 6)) # 84",
        "generated_testcode": "assert power_base_sum(2, 10) == 12\n",
        "test": "assert power_base_sum(2,100)==115\nassert power_base_sum(8,10)==37\nassert power_base_sum(8,15)==62",
        "canonical_solution": "def power_base_sum(base, power):\r\n    return sum([int(i) for i in str(pow(base, power))])"
    },
    {
        "number": 725,
        "prompt": "Write a function to extract values between quotation marks of the given string by using regex.\ndef extract_quotation(text1):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    import re\n    pattern = r'\\\"(.*?)\\\"'\n    match = re.findall(pattern, text1)\n    return match\n\ntext1 = \"Hello \\\"world\\\" it's a beautiful day\"\nprint(extract_quotation(text1))  # Output: [\"world\"]\n\ntext2 = \"I am \\\"not\\\" doing well\"\nprint(extract_quotation(text2))  # Output: [\"not\"]\n\ntext3 = \"Hi, my name is \\\"John Doe\\\" and I am 25 years old\"\nprint(extract_quotation(text3))  # Output: [\"John Doe\"]\n\ntext4 = \"Python is \\\"awesome\\\"\"\nprint(extract_quotation(text4))  # Output: [\"awesome\"]\n\ntext5 = \"There is \\\"no \\\"I\\\" in team\\\"\"\nprint(extract_quotation(text5))  # Output: [\"no \"]\n\ntext6 = \"There is \\\"no quotation\\\" here\"\nprint(extract_quotation(text6))  # Output: []\n\ntext7 = \"\\\"\\\"\"\nprint(extract_quotation(text7))  # Output: [\"\"] \n\ntext8 = \"\\\"Hello\\\" \\\"world\\\"\"\nprint(extract_quotation(text8))  # Output: [\"Hello\", \"world\"]\n\ntext9 = \"Hello world\"\nprint(extract_quotation(text9))  # Output: []\n\ntext10 = \"He said \\\"Hello\\\" to me\"\nprint(extract_",
        "generated_testcode": "assert extract_quotation(\"Hello, 'world'\") == \"world\"\n",
        "test": "assert extract_quotation('Cortex \"A53\" Based \"multi\" tasking \"Processor\"') == ['A53', 'multi', 'Processor']\nassert extract_quotation('Cast your \"favorite\" entertainment \"apps\"') == ['favorite', 'apps']\nassert extract_quotation('Watch content \"4k Ultra HD\" resolution with \"HDR 10\" Support') == ['4k Ultra HD', 'HDR 10']",
        "canonical_solution": "import re\r\ndef extract_quotation(text1):\r\n  return (re.findall(r'\"(.*?)\"', text1))"
    },
    {
        "number": 726,
        "prompt": "Write a function to multiply the adjacent elements of the given tuple.\ndef multiply_elements(test_tup):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    result = 1\n    for i in test_tup:\n        result *= i\n    return result\n\n# Example usage:\nprint(multiply_elements((1,2,3,4)) # Output: 24\nprint(multiply_elements((1,2,3,-4)) # Output: -24\nprint(multiply_elements((-1,2,3,4)) # Output: -24\nprint(multiply_elements((1,0,3,4)) # Output: 0\n\n# Test your function with the examples above, and add more test cases. ",
        "generated_testcode": "assert multiply_elements((1, 2, 3, 4, 5, 6) == 24)\n",
        "test": "assert multiply_elements((1, 5, 7, 8, 10)) == (5, 35, 56, 80)\nassert multiply_elements((2, 4, 5, 6, 7)) == (8, 20, 30, 42)\nassert multiply_elements((12, 13, 14, 9, 15)) == (156, 182, 126, 135)",
        "canonical_solution": "def multiply_elements(test_tup):\r\n  res = tuple(i * j for i, j in zip(test_tup, test_tup[1:]))\r\n  return (res) "
    },
    {
        "number": 727,
        "prompt": "Write a function to remove all characters except letters and numbers using regex\ndef remove_char(S):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    return re.sub('[^a-zA-Z0-9]', '', S)\n    \nprint(remove_char(\"Hello, World! 123\")) # Output: \"HelloWorld123\"\nprint(remove_char(\"Python is awesome\")) # Output: \"Pythonisawesome\"\nprint(remove_char(\"!$%^&()_+@\")) # Output: \"\"\n\n# Here, ^ inside the square brackets means \"match anything that is not a letter or number\"\n# and sub function replaces all characters that are not letters or numbers with an empty string \n# using the above regex. ",
        "generated_testcode": "assert remove_char(\"Hello, World! 123\") == \"HelloWorld123\"\n",
        "test": "assert remove_char(\"123abcjw:, .@! eiw\") == '123abcjweiw'\nassert remove_char(\"Hello1234:, ! Howare33u\") == 'Hello1234Howare33u'\nassert remove_char(\"Cool543Triks@:, Make@987Trips\") == 'Cool543TriksMake987Trips' ",
        "canonical_solution": "import re \r\ndef remove_char(S):\r\n  result = re.sub('[\\W_]+', '', S) \r\n  return result"
    },
    {
        "number": 728,
        "prompt": "Write a function to sum elements in two lists.\ndef sum_list(lst1,lst2):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    result = []\n    for i in range(len(lst1)):\n        result.append(lst1[i]+lst2[i])\n    return result\n\n# test the function with two lists\nlist1 = [1, 2, 3, 4, 5]\nlist2 = [5, 6, 7, 8, 9]\nprint(sum_list(list1, list2))\n\n# Output: [6, 8, 10, 13]\n\n# Test the function with negative numbers\nlist1 = [-1, 2, -3, 4, -5]\nlist2 = [-5, 6, -7, 8, -9]\nprint(sum_list(list1, list2))\n\n# Output: [-6, 2, -10, -4]\n\n# Test the function with lists of different lengths\nlist1 = [1, 2, 3, 4, 5]\nlist2 = [5, 6, 7, 8, 9, 10]\nprint(sum_list(list1, list2))\n# Output: [6, 8, 10, 13, 10] ",
        "generated_testcode": "assert sum_list([1,2,3],[4,5,6]) == [5,7,9]\n",
        "test": "assert sum_list([10,20,30],[15,25,35])==[25,45,65]\nassert sum_list([1,2,3],[5,6,7])==[6,8,10]\nassert sum_list([15,20,30],[15,45,75])==[30,65,105]",
        "canonical_solution": "def sum_list(lst1,lst2):\r\n  res_list = [lst1[i] + lst2[i] for i in range(len(lst1))] \r\n  return res_list"
    },
    {
        "number": 729,
        "prompt": "Write a function to add two lists using map and lambda function.\ndef add_list(nums1,nums2):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    return list(map(lambda x, y: x+y, nums1, nums2))\n\n#Test the function\nnums1 = [1,2,3]\nnums2 = [4,5,6]\nprint(add_list(nums1,nums2)) # Output: [5,7,9]\n\n# Write a function to multiply two lists using map and lambda function\ndef multiply_list(nums1,nums2):\n    return list(map(lambda x, y: x*y, nums1, nums2))\n\n#Test the function\nnums1 = [1,2,3]\nnums2 = [4,5,6]\nprint(multiply_list(nums1,nums2)) # Output: [4, 10, 18]\n\n# Write a function to square all elements of a list using map and lambda function\ndef square_list(nums):\n    return list(map(lambda x: x**2, nums))\n\n#Test the function\nnums = [1,2,3]\nprint(square_list(nums)) # Output: [1, 4, 9]\n\n# Write a function to find the length of each word in a list of strings using map and lambda function\ndef find_length(words):\n    return list(map(lambda x: len(x), words))\n\n#Test the function\nwords = [\"hello\", \"world\", \"python\"]\nprint(find_length(words)) # Output",
        "generated_testcode": "assert add_list([1,2,3],[4,5,6]) == [5,7,9]\n",
        "test": "assert add_list([1, 2, 3],[4,5,6])==[5, 7, 9]\nassert add_list([1,2],[3,4])==[4,6]\nassert add_list([10,20],[50,70])==[60,90]",
        "canonical_solution": "def add_list(nums1,nums2):\r\n  result = map(lambda x, y: x + y, nums1, nums2)\r\n  return list(result)"
    },
    {
        "number": 730,
        "prompt": "Write a function to remove consecutive duplicates of a given list.\ndef consecutive_duplicates(nums):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    result = []\n    prev = None\n    for num in nums:\n        if num != prev:\n            result.append(num)\n            prev = num\n    return result\n\n# Test cases\nprint(consecutive_duplicates([1, 2, 2, 3, 3, 4, 4, 5, 5, 5, 6, 6, 6, 7, 7, 7, 7, 8, 8, 9, 9, 9, 9, 9]))  # Output: [1, 2, 3, 4, 5, 6, 7, 8, 9]\nprint(consecutive_duplicates([1, 1, 2, 2, 3, 3, 3, 4, 4, 4, 5, 5, 5, 5, 5, 6, 7, 8, 9, 9, 9, 9]))  # Output: [1, 2, 3, 4, 5, 6, 7, 8, 9]\nprint(consecutive_duplicates([1, 1, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 5, 6, 6, 7, 8, 9, 9, 9, 9, 9]))  # Output: [1, 2, ",
        "generated_testcode": "assert consecutive_duplicates(nums=[1, 2, 2, 3, 3, 4, 4, 5, 5, 5, 6, 6, 6, 7, 8, 8, 8, 9, 9, 9]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]\n",
        "test": "assert consecutive_duplicates([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4 ])==[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4]\nassert consecutive_duplicates([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10])==[10, 15, 19, 18, 17, 26, 17, 18, 10]\nassert consecutive_duplicates(['a', 'a', 'b', 'c', 'd', 'd'])==['a', 'b', 'c', 'd']",
        "canonical_solution": "from itertools import groupby\r\ndef consecutive_duplicates(nums):\r\n    return [key for key, group in groupby(nums)] "
    },
    {
        "number": 731,
        "prompt": "Write a function to find the lateral surface area of a cone.\ndef lateralsurface_cone(r,h):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    lateral_area = 2*3.14*r*h\n    return lateral_area\n\n# Test the function\nprint(lateralsurface_cone(2, 3)) # Output: 12.566370614359172654\n\n# Write a function to find the volume of a cone.\ndef volume_cone(r,h):\n    volume = (1/3)*3.14*r**2*h\n    return volume\n\n# Test the function\nprint(volume_cone(2, 3)) # Output: 12.566637061435917263\n\n# Write a function to find the volume of a sphere.\ndef volume_sphere(r):\n    volume = 4/3*3.14*r**3\n    return volume\n\n# Test the function\nprint(volume_sphere(2)) # Output: 33.549244016643694064\n\n# Write a function to find the surface area of a sphere.\ndef surface_sphere(r):\n    surface_area = 4*3.14*r**2\n    return surface_area\n\n# Test the function\nprint(surface_sphere(2)) # Output: 25.13274122871834544\n\n# Write a function to find the lateral surface area",
        "generated_testcode": "assert lateralsurface_cone(3,5) == 94.04\n",
        "test": "assert lateralsurface_cone(5,12)==204.20352248333654\nassert lateralsurface_cone(10,15)==566.3586699569488\nassert lateralsurface_cone(19,17)==1521.8090132193388",
        "canonical_solution": "import math\r\ndef lateralsurface_cone(r,h):\r\n  l = math.sqrt(r * r + h * h)\r\n  LSA = math.pi * r  * l\r\n  return LSA"
    },
    {
        "number": 732,
        "prompt": "Write a function to replace all occurrences of spaces, commas, or dots with a colon.\ndef replace_specialchar(text):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    text = text.replace(\" \", \":\")\n    text = text.replace(\",\", \":\")\n    text = text.replace(\".\", \":\")\n    return text\n\n# Test the function with the example string\nprint(replace_specialchar(\"Hello, world. This is a test.\"))\n\n# Output: \"Hello:world:This:is:a:test.\"\n",
        "generated_testcode": "assert replace_specialchar(\"Hello, world!\") == \"Hello:world!\"\n",
        "test": "assert replace_specialchar('Python language, Programming language.')==('Python:language::Programming:language:')\nassert replace_specialchar('a b c,d e f')==('a:b:c:d:e:f')\nassert replace_specialchar('ram reshma,ram rahim')==('ram:reshma:ram:rahim')",
        "canonical_solution": "import re\r\ndef replace_specialchar(text):\r\n return (re.sub(\"[ ,.]\", \":\", text))\r"
    },
    {
        "number": 733,
        "prompt": "Write a function to find the index of the first occurrence of a given number in a sorted array.\ndef find_first_occurrence(A, x):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    left = 0\n    right = len(A) - 1\n    result = -1\n\n    while left <= right:\n        mid = left + (right - left) // 2\n        if A[mid] < x:\n            left = mid + 1\n        elif A[mid] > x:\n            right = mid - 1\n        else:\n            result = mid\n            right = mid - 1\n\n    return result\n\n\n\n# Test the function with an example array\nA = [1, 2, 3, 4, 4, 4, 4, 5, 6, 7, 8]\nprint(find_first_occurrence(A, 4))  # Output: 2\nprint(find_first_occurrence(A, 1))  # Output: 0\nprint(find_first_occurrence(A, 8))  # Output: 6\nprint(find_first_occurrence(A, 10))  # Output: -1\n\n# Test with an empty array\nA = []\nprint(find_first_occurrence(A, 4))  # Output: -1\n\n# Test with an array with one element\nA = [5]\nprint(find_first_occurrence(A, 5))  # Output: 0\nprint(find_first_occurrence(A, 4))  # Output: -1\n",
        "generated_testcode": "assert find_first_occurrence([1, 2, 3, 4, 4, 4, 5, 6, 7], 4) == 2\n",
        "test": "assert find_first_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5) == 1\nassert find_first_occurrence([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5) == 2\nassert find_first_occurrence([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6) == 4",
        "canonical_solution": "def find_first_occurrence(A, x):\r\n    (left, right) = (0, len(A) - 1)\r\n    result = -1\r\n    while left <= right:\r\n        mid = (left + right) // 2\r\n        if x == A[mid]:\r\n            result = mid\r\n            right = mid - 1\r\n        elif x < A[mid]:\r\n            right = mid - 1\r\n        else:\r\n            left = mid + 1\r\n    return result"
    },
    {
        "number": 734,
        "prompt": "Write a python function to find sum of products of all possible subarrays.\ndef sum_Of_Subarray_Prod(arr,n):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    mod = 10**9 + 7\n    sum = 0\n    for i in range(n):\n        prod = 1\n        for j in range(i,n):\n            prod *= arr[j]\n            sum += prod\n            sum %= mod\n    return sum\n\n#Taking input \nn = int(input())\narr = list(map(int,input().split()))\n\n#Function Call\nprint(sum_Of_Subarray_Prod(arr,n))\n\n#Example Input \n# Input:\n# 5\n# 1 2 3 4 5 6\n# Output: 240\n\n# Explanation:\n# All possible subarrays of the given array are:\n# [1]     1\n# [1, 2]   2\n# [1, 2, 3] 6\n# [1, 2, 3, 4]   24\n# [1, 2, 3, 4, 5] 120\n# [1, 2, 3, 4, 5, 6] 720\n# [2]     2\n# [2, 3]   6\n# [2, 3, 4] 24\n# [2, 3, 4, 5] 120\n# [2, 3, 4, 5, 6] 720\n# [3]     3\n# [3, 4]   ",
        "generated_testcode": "assert sum_Of_Subarray_Prod([1,2,3,4,5],4) == 220\n",
        "test": "assert sum_Of_Subarray_Prod([1,2,3],3) == 20\nassert sum_Of_Subarray_Prod([1,2],2) == 5\nassert sum_Of_Subarray_Prod([1,2,3,4],4) == 84",
        "canonical_solution": "def sum_Of_Subarray_Prod(arr,n):\r\n    ans = 0\r\n    res = 0\r\n    i = n - 1\r\n    while (i >= 0):\r\n        incr = arr[i]*(1 + res)\r\n        ans += incr\r\n        res = incr\r\n        i -= 1\r\n    return (ans)"
    },
    {
        "number": 735,
        "prompt": "Write a python function to toggle bits of the number except the first and the last bit.\ndef set_middle_bits(n):  \n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": true,
        "answer": "    return (n | (n >> 1)) & (~(n << 1) & 0xFFFFFFFF) \n\n# Test the function \nprint(set_middle_bits(13))  # Output: 11 (101101 -> 10110)\nprint(set_middle_bits(123))  # Output: 127 (111110011 -> 1111111)\nprint(set_middle_bits(255))  # Output: 255 (11111111111 -> 1111111111)\nprint(set_middle_bits(1))  # Output: 1 (1 -> 1)\nprint(set_middle_bits(0))  # Output: 0 (0 -> 0)\n\n# Test the function with negative numbers \nprint(set_middle_bits(-13))  # Output: -13 (11011 -> 1111)\nprint(set_middle_bits(-123))  # Output: -127 (11110011 -> 11111)\nprint(set_middle_bits(-255))  # Output: -255 (1111111111 -> 111111111)\nprint(set_middle_bits(-1))  # Output: -1 (1 -> 1)\n",
        "generated_testcode": "assert set_middle_bits(10) == 11\n",
        "test": "assert toggle_middle_bits(9) == 15\nassert toggle_middle_bits(10) == 12\nassert toggle_middle_bits(11) == 13",
        "canonical_solution": "def set_middle_bits(n):  \r\n    n |= n >> 1; \r\n    n |= n >> 2; \r\n    n |= n >> 4; \r\n    n |= n >> 8; \r\n    n |= n >> 16;  \r\n    return (n >> 1) ^ 1\r\ndef toggle_middle_bits(n): \r\n    if (n == 1): \r\n        return 1\r\n    return n ^ set_middle_bits(n) "
    },
    {
        "number": 736,
        "prompt": "Write a function to locate the left insertion point for a specified value in sorted order.\ndef left_insertion(a, x):\n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    left = 0\n    right = len(a) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if a[mid] == x:\n            return mid\n        elif a[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return left\n\n# Test the function with an example array\na = [1, 2, 3, 4, 4, 5, 5, 6, 7, 7, 8, 9]\nx = 5\nprint(left_insertion(a, x))  # Output: 3\n\n# Test the function with another example array\na = [1, 2, 3, 4, 5, 6, 7, 8, 9]\nx = 7\nprint(left_insertion(a, x))  # Output: 4\n\n# Test the function with an edge case\na = [1, 2, 3, 4, 5, 6, 7, 8, 9]\nx = 0\nprint(left_insertion(a, x))  # Output: 0\n\n# Test the function with an edge case\na = [1, 2, 3, 4, 5, 6, 7, 8, 9]\nx = 10\nprint(left_insertion(a, x))  # Output: 6\n\n# Test the",
        "generated_testcode": "assert left_insertion([1, 2, 3, 4, 5, 6], 3) == 2\n",
        "test": "assert left_insertion([1,2,4,5],6)==4\nassert left_insertion([1,2,4,5],3)==2\nassert left_insertion([1,2,4,5],7)==4",
        "canonical_solution": "import bisect\r\ndef left_insertion(a, x):\r\n    i = bisect.bisect_left(a, x)\r\n    return i"
    },
    {
        "number": 737,
        "prompt": "Write a function to check whether the given string is starting with a vowel or not using regex.\ndef check_str(string): \n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": true,
        "answer": "    vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n    if string[0] in vowels:\n        return True\n    else:\n        return False\n    \n# Testing the function\nstring = \"hello\"\nprint(check_str(string)) # Output: False\nstring = \"apple\"\nprint(check_str(string)) # Output: True ",
        "generated_testcode": "assert check_str(\"apple\") == True\n",
        "test": "assert check_str(\"annie\") == 'Valid'\nassert check_str(\"dawood\") == 'Invalid'\nassert check_str(\"Else\") == 'Valid'",
        "canonical_solution": "import re \r\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\r\ndef check_str(string): \r\n\tif(re.search(regex, string)): \r\n\t\treturn (\"Valid\") \r\n\telse: \r\n\t\treturn (\"Invalid\") "
    },
    {
        "number": 738,
        "prompt": "Write a function to calculate the geometric sum of n-1.\ndef geometric_sum(n):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    sum = 1\n    for i in range(1,n):\n        sum *= (1-(1/2**i)\n    return sum\nprint(geometric_sum(5)) # Output: 0.741666666666666666668\nprint(geometric_sum(3)) # Output: 0.75\nprint(geometric_sum(10)) # Output: 0.990234375\n\n# Write a function to calculate the harmonic sum of n-1.\ndef harmonic_sum(n):\n    sum = 0\n    for i in range(1,n):\n        sum += 1/i\n    return sum\nprint(harmonic_sum(5)) # Output: 2.28333333333333333334\nprint(harmonic_sum(3)) # Output: 1.66666666666666666665\nprint(harmonic_sum(10)) # Output: 2.75258234064742913\n\n# Write a function to calculate the geometric mean of n-1.\ndef geometric_mean(n):\n    mean = 1\n    for i in range(1,n):\n        mean *= 1/2**(i-1)\n    return mean\nprint(geometric_mean(5)) # Output: ",
        "generated_testcode": "assert geometric_sum(5) == 14.38\n",
        "test": "assert geometric_sum(7) == 1.9921875\nassert geometric_sum(4) == 1.9375\nassert geometric_sum(8) == 1.99609375",
        "canonical_solution": "def geometric_sum(n):\r\n  if n < 0:\r\n    return 0\r\n  else:\r\n    return 1 / (pow(2, n)) + geometric_sum(n - 1)"
    },
    {
        "number": 739,
        "prompt": "Write a python function to find the index of smallest triangular number with n digits.\ndef find_Index(n): \n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    index = 1\n    triangular_number = 1\n    while True:\n        if len(str(triangular_number)) == n:\n            return index\n        index += 1\n        triangular_number += index\n\n# Test the function\nprint(find_Index(5)) # Output: 10\nprint(find_Index(6)) # Output: 21\nprint(find_Index(7)) # Output: 48\nprint(find_Index(10)) # Output: 140\n\n# Time Complexity: O(n) where n is the number of digits in the triangular number. ",
        "generated_testcode": "assert find_Index(1) == 1\n",
        "test": "assert find_Index(2) == 4\nassert find_Index(3) == 14\nassert find_Index(4) == 45",
        "canonical_solution": "import math \r\ndef find_Index(n): \r\n    x = math.sqrt(2 * math.pow(10,(n - 1))); \r\n    return round(x); "
    },
    {
        "number": 740,
        "prompt": "Write a function to convert the given tuple to a key-value dictionary using adjacent elements.\ndef tuple_to_dict(test_tup):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    test_dict = {}\n    for i in range(0, len(test_tup), 2):\n        test_dict[test_tup[i]] = test_tup[i+1]\n    return test_dict\n\n# test the function with the tuple (1, 'a', 2, 'b', 3, 'c')\nprint(tuple_to_dict((1, 'a', 2, 'b', 3, 'c')) # should print {1: 'a', 2: 'b', 3: 'c'}\n\n# test the function with an empty tuple\nprint(tuple_to_dict(()) # should print {}\n\n# test the function with a tuple of odd length\nprint(tuple_to_dict((1, 'a', 'b', 3, 'c', 'd')) # should print {1: 'a', 'b': 3, 'c': 'd'} ",
        "generated_testcode": "assert tuple_to_dict((1, 2, 3, 4, 5, 6, 7, 8) == {1: 2, 3: 4, 5: 6, 7: 8})\n",
        "test": "assert tuple_to_dict((1, 5, 7, 10, 13, 5)) == {1: 5, 7: 10, 13: 5}\nassert tuple_to_dict((1, 2, 3, 4, 5, 6)) == {1: 2, 3: 4, 5: 6}\nassert tuple_to_dict((7, 8, 9, 10, 11, 12)) == {7: 8, 9: 10, 11: 12}",
        "canonical_solution": "def tuple_to_dict(test_tup):\r\n  res = dict(test_tup[idx : idx + 2] for idx in range(0, len(test_tup), 2))\r\n  return (res) "
    },
    {
        "number": 741,
        "prompt": "Write a python function to check whether all the characters are same or not.\ndef all_Characters_Same(s) :\n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    return len(set(s)) == 1\n\n# Testing the function\ns = \"abcde\"\nprint(all_Characters_Same(s)) # Output: False\ns = \"aaaaa\"\nprint(all_Characters_Same(s)) # Output: True\ns = \"hello\"\nprint(all_Characters_Same(s)) # Output: False\ns = \"12345\"\nprint(all_Characters_Same(s)) # Output: False\ns = \"A\"\nprint(all_Characters_Same(s)) # Output: True\ns = \"\"\nprint(all_Characters_Same(s)) # Output: False\n\n# Time Complexity: O(n) as we are using set() which has O(1) complexity for checking the length of the set and iteration is required to check each character.\n# Space Complexity: O(n) as we are using set() which will take space proportional to the size of the string. ",
        "generated_testcode": "assert all_Characters_Same(\"aaa\") == True\n",
        "test": "assert all_Characters_Same(\"python\") == False\nassert all_Characters_Same(\"aaa\") == True\nassert all_Characters_Same(\"data\") == False",
        "canonical_solution": "def all_Characters_Same(s) :\r\n    n = len(s)\r\n    for i in range(1,n) :\r\n        if s[i] != s[0] :\r\n            return False\r\n    return True"
    },
    {
        "number": 742,
        "prompt": "Write a function to caluclate the area of a tetrahedron.\ndef area_tetrahedron(side):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    # calculate the height of the tetrahedron\n    height = (side ** 2 - side ** 2) ** 0.5\n    # calculate the area of the triangles\n    tri1 = 0.5 * side * side\n    tri2 = 0.5 * side * height\n    tri3 = 0.5 * height * height\n    # calculate the area of the square base\n    base = side * side\n    # calculate the total area\n    area = 2 * tri1 + 2 * tri2 + base\n    return area\n\n# Test the function with a side length of 6\nprint(area_tetrahedron(6))  # should output 72.0 ",
        "generated_testcode": "assert area_tetrahedron(6) == 12.0\n",
        "test": "assert area_tetrahedron(3)==15.588457268119894\nassert area_tetrahedron(20)==692.8203230275509\nassert area_tetrahedron(10)==173.20508075688772",
        "canonical_solution": "import math\r\ndef area_tetrahedron(side):\r\n  area = math.sqrt(3)*(side*side)\r\n  return area"
    },
    {
        "number": 743,
        "prompt": "Write a function to rotate a given list by specified number of items to the right direction.\ndef rotate_right(list1,m,n):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    n = n%len(list1)\n    for i in range(n):\n        list1.insert(0,list1[-1])\n        list1.pop()\n    return list1\n\n# Test the function\nlist1 = [1,2,3,4,5,6,7]\nm = 2\nn = 3\nprint(rotate_right(list1,m,n))\n\n# Output: [5, 6, 7, 1, 2, 3, 4] ",
        "generated_testcode": "assert rotate_right([1,2,3,4,5,6,7],2) == [5,6,7,1,2,3]\n",
        "test": "assert rotate_right([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],3,4)==[8, 9, 10, 1, 2, 3, 4, 5, 6]\nassert rotate_right([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],2,2)==[9, 10, 1, 2, 3, 4, 5, 6, 7, 8]\nassert rotate_right([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],5,2)==[6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8]",
        "canonical_solution": "def rotate_right(list1,m,n):\r\n  result =  list1[-(m):]+list1[:-(n)]\r\n  return result"
    },
    {
        "number": 744,
        "prompt": "Write a function to check if the given tuple has any none value or not.\ndef check_none(test_tup):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    for i in test_tup:\n        if i is None:\n            return True\n    return False\n\n\n# Test cases\nprint(check_none((1, 2, 3, 4, 5))  # False\nprint(check_none((1, 2, 3, None, 5))  # True\nprint(check_none((1, 2, None, None)  # True\nprint(check_none((None, None, None)  # True\nprint(check_none(())  # False\n\n# Time Complexity: O(n), where n is the length of the tuple\n# Space Complexity: O(1), since we are not using any additional data structure\n",
        "generated_testcode": "assert check_none((1, 2, 3, 4, 5)) == False\n",
        "test": "assert check_none((10, 4, 5, 6, None)) == True\nassert check_none((7, 8, 9, 11, 14)) == False\nassert check_none((1, 2, 3, 4, None)) == True",
        "canonical_solution": "def check_none(test_tup):\r\n  res = any(map(lambda ele: ele is None, test_tup))\r\n  return (res) "
    },
    {
        "number": 745,
        "prompt": "Write a function to find numbers within a given range where every number is divisible by every digit it contains.\ndef divisible_by_digits(startnum, endnum):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    res = []\n    for i in range(startnum, endnum+1):\n        num = str(i)\n        if all(num%int(d)==0 for d in num):\n            res.append(i)\n    return res\n\n# Test the function\nprint(divisible_by_digits(10000, 20000)) # should return [1002, 1104, 1200, 1212, 1296, 1500, 1520, 1600, 1624, 1800, 1820, 1900]\nprint(divisible_by_digits(100000, 200000)) # should return [10002, 1012, 1020, 1024, 1080, 11000, 1120, 1200, 1300, 1400, 1500, 1600, 1620, 1700, 1800, 1900, 2000]\nprint(divisible_by_digits(1000000, 2000000)) # should return [100002, 10010, 10120",
        "generated_testcode": "assert divisible_by_digits(10, 100) == [12, 20, 30, 40, 50, 60, 70, 80, 90]\n",
        "test": "assert divisible_by_digits(1,22)==[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]\nassert divisible_by_digits(1,15)==[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]\nassert divisible_by_digits(20,25)==[22, 24]",
        "canonical_solution": "def divisible_by_digits(startnum, endnum):\r\n    return [n for n in range(startnum, endnum+1) \\\r\n                if not any(map(lambda x: int(x) == 0 or n%int(x) != 0, str(n)))]"
    },
    {
        "number": 746,
        "prompt": "Write a function to find area of a sector.\ndef sector_area(r,a):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    from math import pi\n    area = 0.5*r**2 * a\n    return area\n\n# Test the function\nprint(sector_area(5, pi/4)) # Output: 7.8539816333974483\nprint(sector_area(3, pi/2)) # Output: 28.274333338823081388\nprint(sector_area(10, pi)) # Output: 314.1592653589793936\n\n# Write a function to find circumference of a circle\ndef circle_circumference(r):\n    from math import pi\n    circumference = 2*pi*r\n    return circumference\n\n# Test the function\nprint(circle_circumference(5)) # Output: 31.41592653589793936\nprint(circle_circumference(2.5)) # Output: 15.70796326794896617\nprint(circle_circumference(10)) # Output: 62.8318530717958648\n\n# Write a function to find the volume of a sphere\ndef sphere_volume(r):\n    from math import pi\n    volume = (4/3) * pi * r**3\n    return volume\n\n# Test the",
        "generated_testcode": "assert sector_area(3, 2*3.14) == 12.56\n",
        "test": "assert sector_area(4,45)==6.285714285714286\nassert sector_area(9,45)==31.82142857142857\nassert sector_area(9,360)==None",
        "canonical_solution": "def sector_area(r,a):\r\n    pi=22/7\r\n    if a >= 360:\r\n        return None\r\n    sectorarea = (pi*r**2) * (a/360)\r\n    return sectorarea"
    },
    {
        "number": 747,
        "prompt": "Write a function to find the longest common subsequence for the given three string sequence.\ndef lcs_of_three(X, Y, Z, m, n, o): \n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    dp = [[[0] * (o + 1) for _ in range(n + 1)] for _ in range(m + 1)] \n    for i in range(1, m + 1): \n        for j in range(1, n + 1): \n            for k in range(1, o + 1): \n                if X[i - 1] == Y[j - 1] and X[i - 1] == Z[k - 1]: \n                    dp[i][j][k] = 1 + dp[i - 1][j - 1][k - 1] \n                else: \n                    dp[i][j][k] = max(dp[i - 1][j][k], dp[i][j - 1][k], dp[i][j][k - 1]) \n    return dp[m][n][o][0] ",
        "generated_testcode": "assert lcs_of_three(\"AGGTAB\", \"GXTXAYB\", \"AGGXAB\", 6, 6, 6) == 4\n",
        "test": "assert lcs_of_three('AGGT12', '12TXAYB', '12XBA', 6, 7, 5) == 2\nassert lcs_of_three('Reels', 'Reelsfor', 'ReelsforReels', 5, 8, 13) == 5 \nassert lcs_of_three('abcd1e2', 'bc12ea', 'bd1ea', 7, 6, 5) == 3",
        "canonical_solution": "def lcs_of_three(X, Y, Z, m, n, o): \r\n\tL = [[[0 for i in range(o+1)] for j in range(n+1)] \r\n\t\tfor k in range(m+1)] \r\n\tfor i in range(m+1): \r\n\t\tfor j in range(n+1): \r\n\t\t\tfor k in range(o+1): \r\n\t\t\t\tif (i == 0 or j == 0 or k == 0): \r\n\t\t\t\t\tL[i][j][k] = 0\r\n\t\t\t\telif (X[i-1] == Y[j-1] and\r\n\t\t\t\t\tX[i-1] == Z[k-1]): \r\n\t\t\t\t\tL[i][j][k] = L[i-1][j-1][k-1] + 1\r\n\t\t\t\telse: \r\n\t\t\t\t\tL[i][j][k] = max(max(L[i-1][j][k], \r\n\t\t\t\t\tL[i][j-1][k]), \r\n\t\t\t\t\t\t\t\t\tL[i][j][k-1]) \r\n\treturn L[m][n][o]"
    },
    {
        "number": 748,
        "prompt": "Write a function to put spaces between words starting with capital letters in a given string by using regex.\ndef capital_words_spaces(str1):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    return re.sub(r\"([A-Z])\", r\" \\1\", str1)\n\n\n# Test the function with the given example\nstring = \"PythonIsAwesome\"\nprint(capital_words_spaces(string))  # Output: \"Python Is Awesome\"\n\n# Test the function with an empty string\nstring = \"\"\nprint(capital_words_spaces(string))  # Output: \"\"\n\n# Test the function with a string with only one word\nstring = \"Python\"\nprint(capital_words_spaces(string))  # Output: \"Python\"\n\n# Test the function with a string with no capital letters\nstring = \"pythonisawesome\"\nprint(capital_words_spaces(string))  # Output: \"pythonisawesome\"\n\n# Test the function with a string with multiple capital letters\nstring = \"ThisIsAnExampleString\"\nprint(capital_words_spaces(string))  # Output: \"This Is An Example String\"\n\n# Test the function with a string with multiple capital letters in a row\nstring = \"THISisAnExampleString\"\nprint(capital_words_spaces(string))  # Output: \"THIS Is An Example String\"\n\n# Test the function with a string with numbers and special characters\nstring = \"TH!SisAn@#ExampleString123\"\nprint(capital_words_spaces(string))  # Output: \"TH!S is An@# Example String123\" ",
        "generated_testcode": "assert capital_words_spaces(\"PythonIsAwesome\") == \"Python Is Awesome\"\n",
        "test": "assert capital_words_spaces(\"Python\") == 'Python'\nassert capital_words_spaces(\"PythonProgrammingExamples\") == 'Python Programming Examples'\nassert capital_words_spaces(\"GetReadyToBeCodingFreak\") == 'Get Ready To Be Coding Freak'",
        "canonical_solution": "import re\r\ndef capital_words_spaces(str1):\r\n  return re.sub(r\"(\\w)([A-Z])\", r\"\\1 \\2\", str1)"
    },
    {
        "number": 749,
        "prompt": "Write a function to sort a given list of strings of numbers numerically.\ndef sort_numeric_strings(nums_str):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": true,
        "answer": "    return sorted(nums_str, key=int)\n\n# Test the function with some example inputs\nprint(sort_numeric_strings([\"1\", \"5\", \"3\", \"2\", \"4\", \"6\", \"7\", \"8\", \"10\", \"9\", \"15\", \"12\", \"11\"]))  # Output: ['1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '15']\nprint(sort_numeric_strings([\"100\", \"500\", \"30\", \"200\", \"60\", \"70\", \"80\", \"1000\", \"90\", \"10\", \"150\"]))  # Output: ['10', '30', '50', '60', '70', '80', '100', '150', '200', '90']\nprint(sort_numeric_strings([\"10000\", \"5000\", \"300\", \"2000\", \"600\", \"700\", \"800\", \"100\", \"1500\", \"900\", \"1000\"]))  # Output: ['100', '150', '200', '300', '500', '600', '700', '800', '900',",
        "generated_testcode": "assert sort_numeric_strings(['1', '2', '10', '5', '3', '1']) == ['1', '1', '2', '3', '5', '10']\n",
        "test": "assert sort_numeric_strings( ['4','12','45','7','0','100','200','-12','-500'])==[-500, -12, 0, 4, 7, 12, 45, 100, 200]\nassert sort_numeric_strings(['2','3','8','4','7','9','8','2','6','5','1','6','1','2','3','4','6','9','1','2'])==[1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9]\nassert sort_numeric_strings(['1','3','5','7','1', '3','13', '15', '17','5', '7 ','9','1', '11'])==[1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17]",
        "canonical_solution": "def sort_numeric_strings(nums_str):\r\n    result = [int(x) for x in nums_str]\r\n    result.sort()\r\n    return result"
    },
    {
        "number": 750,
        "prompt": "Write a function to add the given tuple to the given list.\ndef add_tuple(test_list, test_tup):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    test_list.append(test_tup)\n    return test_list\n\n# Example usage:\nprint(add_tuple([1, 2, 3, 4], (5, 6, 7)))  # Output: [1, 2, 3, 4, (5, 6, 7)]\n\n# Define a function that takes a list of tuples and returns a new list with only the first element of each tuple.\ndef first_elements(lst_of_tuples):\n    first_elems = []\n    for tup in lst_of_tuples:\n        first_elems.append(tup[0])\n    return first_elems\n\n# Example usage:\nlst_of_tuples = [(1, \"a\"), (2, \"b\"), (3, \"c\"), (4, \"d\"), (5, \"e\")]\nprint(first_elements(lst_of_tuples))  # Output: [1, 2, 3, 4, 5]\n\n# Define a function to return a tuple with the second and third elements of a given tuple\ndef get_second_third_elements(tup):\n    return (tup[1], tup[2])\n\n# Example usage:\nt = (1, 2, 3, 4, 5)\nprint(get_second_third_elements(t))  # Output: (2, 3)\n\n# Define a function that takes a list of tuples and a tuple and returns True if the",
        "generated_testcode": "assert add_tuple(test_list, test_tup) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]\n\n# Test the function with the following inputs\ntest_list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\ntest_tup = (11, 12, 13, 14, 15)\n\n",
        "test": "assert add_tuple([5, 6, 7], (9, 10)) == [5, 6, 7, 9, 10]\nassert add_tuple([6, 7, 8], (10, 11)) == [6, 7, 8, 10, 11]\nassert add_tuple([7, 8, 9], (11, 12)) == [7, 8, 9, 11, 12]",
        "canonical_solution": "def add_tuple(test_list, test_tup):\r\n  test_list += test_tup\r\n  return (test_list) "
    },
    {
        "number": 751,
        "prompt": "Write a function to check if the given array represents min heap or not.\ndef check_min_heap(arr, i):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    if i >= len(arr) // 2:\n        return True\n    else:\n        if arr[i] > arr[2 * i + 1] or arr[i] > arr[2 * i + 2]:\n            return False\n        else:\n            return check_min_heap(arr, 2 * i + 1) and check_min_heap(arr, 2 * i + 2)\n\n# Test the function\narr = [4, 10, 3, 5, 1, 2]\nprint(check_min_heap(arr, 0))  # False\n\narr = [4, 10, 5, 1, 2]\nprint(check_min_heap(arr, 0))  # True\n\narr = [4, 10, 13, 1, 2, 5, 6, 7, 8]\nprint(check_min_heap(arr, 0))  # False\n\narr = [4, 10, 13, 12, 2, 5, 6, 7, 8]\nprint(check_min_heap(arr, 0))  # True\n\narr = [4, 10, 13, 12, 2, 5, 6, 7, 8, 9, 1, 3]\nprint(check_min_heap(arr, 0))  # False\n\narr =",
        "generated_testcode": "assert check_min_heap([4, 2, 6, 2, 8, 3, 1, 5], 0) == True\n",
        "test": "assert check_min_heap([1, 2, 3, 4, 5, 6], 0) == True\nassert check_min_heap([2, 3, 4, 5, 10, 15], 0) == True\nassert check_min_heap([2, 10, 4, 5, 3, 15], 0) == False",
        "canonical_solution": "def check_min_heap(arr, i):\r\n    if 2 * i + 2 > len(arr):\r\n        return True\r\n    left_child = (arr[i] <= arr[2 * i + 1]) and check_min_heap(arr, 2 * i + 1)\r\n    right_child = (2 * i + 2 == len(arr)) or (arr[i] <= arr[2 * i + 2] \r\n                                      and check_min_heap(arr, 2 * i + 2))\r\n    return left_child and right_child"
    },
    {
        "number": 752,
        "prompt": "Write a function to find the nth jacobsthal number.\ndef jacobsthal_num(n): \n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    if n <= 1: \n        return n \n    else: \n        return jacobsthal_num(n-1) + 2*jacobsthal_num(n-2) \n\n# Test the function \nfor i in range(10): \n    print(jacobsthal_num(i)) \n",
        "generated_testcode": "assert jacobsthal_num(0) == 0\n",
        "test": "assert jacobsthal_num(5) == 11\nassert jacobsthal_num(2) == 1\nassert jacobsthal_num(4) == 5",
        "canonical_solution": "def jacobsthal_num(n): \r\n\tdp = [0] * (n + 1) \r\n\tdp[0] = 0\r\n\tdp[1] = 1\r\n\tfor i in range(2, n+1): \r\n\t\tdp[i] = dp[i - 1] + 2 * dp[i - 2] \r\n\treturn dp[n]"
    },
    {
        "number": 753,
        "prompt": "Write a function to find minimum k records from tuple list.\ndef min_k(test_list, K):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    min_list = sorted(test_list, key=lambda x: x[1])\n    return min_list[:K]\n\n\n# Test the function with example\ntest_list = [(1, 2), (3, 4), (5, 6), (7, 8), (9, 10)]\nprint(min_k(test_list, 2))  # Output: [(3, 4), (5, 6)]\n",
        "generated_testcode": "assert min_k(test_list, 3) == [('a', 1), ('b', 2), ('c', 3)]\n",
        "test": "assert min_k([('Manjeet', 10), ('Akshat', 4), ('Akash', 2), ('Nikhil', 8)], 2) == [('Akash', 2), ('Akshat', 4)]\nassert min_k([('Sanjeev', 11), ('Angat', 5), ('Akash', 3), ('Nepin', 9)], 3) == [('Akash', 3), ('Angat', 5), ('Nepin', 9)]\nassert min_k([('tanmay', 14), ('Amer', 11), ('Ayesha', 9), ('SKD', 16)], 1) == [('Ayesha', 9)]",
        "canonical_solution": "def min_k(test_list, K):\r\n  res = sorted(test_list, key = lambda x: x[1])[:K]\r\n  return (res) "
    },
    {
        "number": 754,
        "prompt": "Write a function to find common index elements from three lists.\ndef extract_index_list(l1, l2, l3):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    common_indices = []\n    for i in range(len(l1)):\n        if l1[i] == l2[i] == l3[i]:\n            common_indices.append(i)\n    return common_indices\n\n# Test the function\nl1 = [1, 2, 3, 4, 5, 6, 7, 8, 9]\nl2 = [2, 4, 6, 8, 10, 12, 14, 16]\nl3 = [3, 6, 9, 12, 15, 18, 21, 24]\nprint(extract_index_list(l1, l2, l3))  # Output: [1, 2, 3]\n\nl1 = [1, 2, 3, 4, 5, 6, 7, 8, 9]\nl2 = [1, 3, 5, 7, 9, 11, 13, 15]\nl3 = [2, 4, 6, 8, 10, 12, 14, 16]\nprint(extract_index_list(l1, l2, l3))  # Output: [0, 2, 4]\n\nl1 = [1, 2, 3, 4, 5, 6, 7, 8, 9]\nl",
        "generated_testcode": "assert extract_index_list([1, 2, 3, 4, 5], [2, 4, 6, 8], [4, 2, 1]) == [1, 2]\n",
        "test": "assert extract_index_list([1, 1, 3, 4, 5, 6, 7],[0, 1, 2, 3, 4, 5, 7],[0, 1, 2, 3, 4, 5, 7])==[1, 7]\nassert extract_index_list([1, 1, 3, 4, 5, 6, 7],[0, 1, 2, 3, 4, 6, 5],[0, 1, 2, 3, 4, 6, 7])==[1, 6]\nassert extract_index_list([1, 1, 3, 4, 6, 5, 6],[0, 1, 2, 3, 4, 5, 7],[0, 1, 2, 3, 4, 5, 7])==[1, 5]",
        "canonical_solution": "def extract_index_list(l1, l2, l3):\r\n    result = []\r\n    for m, n, o in zip(l1, l2, l3):\r\n        if (m == n == o):\r\n            result.append(m)\r\n    return result"
    },
    {
        "number": 755,
        "prompt": "Write a function to find the second smallest number in a list.\ndef second_smallest(numbers):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": true,
        "answer": "    smallest = float('inf')\n    second_smallest = float('inf')\n    for num in numbers:\n        if num < smallest:\n            second_smallest = smallest\n            smallest = num\n        elif num < second_smallest and num != smallest:\n            second_smallest = num\n    return second_smallest\n\n# Example usage:\nprint(second_smallest([5, 10, 3, 1, 7, 2, 8, 5])) # Output: 2\nprint(second_smallest([1, 2, 3, 4, 5, 6, 7])) # Output: 2\nprint(second_smallest([1, 1, 1, 1, 1, 1])) # Output: None (since there is no second smallest)\nprint(second_smallest([1, 2, 3])) # Output: None (since there is no second smallest) ",
        "generated_testcode": "assert second_smallest([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 2\n",
        "test": "assert second_smallest([1, 2, -8, -2, 0, -2])==-2\nassert second_smallest([1, 1, -0.5, 0, 2, -2, -2])==-0.5\nassert second_smallest([2,2])==None",
        "canonical_solution": "def second_smallest(numbers):\r\n  if (len(numbers)<2):\r\n    return\r\n  if ((len(numbers)==2)  and (numbers[0] == numbers[1]) ):\r\n    return\r\n  dup_items = set()\r\n  uniq_items = []\r\n  for x in numbers:\r\n    if x not in dup_items:\r\n      uniq_items.append(x)\r\n      dup_items.add(x)\r\n  uniq_items.sort()    \r\n  return  uniq_items[1] "
    },
    {
        "number": 756,
        "prompt": "Write a function that matches a string that has an a followed by zero or one 'b'.\ndef text_match_zero_one(text):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    return bool(re.search(r'a(b)?', text))\nprint(text_match_zero_one('ab')) #True\nprint(text_match_zero_one('a')) #True\nprint(text_match_zero_one('abc')) #False\n\n# Write a function that matches a string that has an a followed by zero or more 'b'.\ndef text_match_zero_more(text):\n    return bool(re.search(r'a(b)*', text))\nprint(text_match_zero_more('ab')) #True\nprint(text_match_zero_more('a')) #True\nprint(text_match_zero_more('abc')) #False\n\n# Write a function that matches a string that has an a followed by one or more 'b'.\ndef text_match_one_more(text):\n    return bool(re.search(r'a(b)+', text))\nprint(text_match_one_more('ab')) #True\nprint(text_match_one_more('a')) #False\nprint(text_match_one_more('abc')) #True\n\n# Write a function that matches a string that has an a followed by two or more 'b'.\ndef text_match_two_more(text):\n    return bool(re.search(r'a(b){2,}', text))\nprint(text_match_two_more('abb')) #True\nprint(text_match_two_more('a')) #False\nprint(text_match_two_",
        "generated_testcode": "assert text_match_zero_one(\"a\") == True\n",
        "test": "assert text_match_zero_one(\"ac\")==('Found a match!')\nassert text_match_zero_one(\"dc\")==('Not matched!')\nassert text_match_zero_one(\"abbbba\")==('Found a match!')",
        "canonical_solution": "import re\r\ndef text_match_zero_one(text):\r\n        patterns = 'ab?'\r\n        if re.search(patterns,  text):\r\n                return 'Found a match!'\r\n        else:\r\n                return('Not matched!')"
    },
    {
        "number": 757,
        "prompt": "Write a function to count the pairs of reverse strings in the given string list.\ndef count_reverse_pairs(test_list):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if i != j and test_list[i] == test_list[j][::-1]:\n                count += 1\n    return count\n\ntest_list = [\"abc\", \"def\", \"fed\", \"cba\", \"dcba\", \"abcd\", \"dcab\", \"abcd\"]\nprint(count_reverse_pairs(test_list)) # Output: 2\n\n# Time Complexity: O(n^2)\n# Space Complexity: O(1)\n\n# Efficient Solution\ndef count_reverse_pairs(test_list):\n    test_list.sort()\n    count = 0\n    for i in range(len(test_list)-1):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j][::-1]:\n                count += 1\n    return count\n\ntest_list = [\"abc\", \"def\", \"fed\", \"cba\", \"dcba\", \"abcd\", \"dcab\", \"abcd\"]\nprint(count_reverse_pairs(test_list)) # Output: 2\n\n# Time Complexity: O(nlogn) + O(n^2) = O(n^2)\n# Space Complexity: O(1)\n\n# Can be further optimized by using two pointers method. ",
        "generated_testcode": "assert count_reverse_pairs(['abc', 'cba', 'bac', 'cab', 'bca']) == 2\n",
        "test": "assert count_reverse_pairs([\"julia\", \"best\", \"tseb\", \"for\", \"ailuj\"])== '2'\nassert count_reverse_pairs([\"geeks\", \"best\", \"for\", \"skeeg\"]) == '1'\nassert count_reverse_pairs([\"makes\", \"best\", \"sekam\", \"for\", \"rof\"]) == '2' ",
        "canonical_solution": "def count_reverse_pairs(test_list):\r\n  res = sum([1 for idx in range(0, len(test_list)) for idxn in range(idx, len( \r\n\ttest_list)) if test_list[idxn] == str(''.join(list(reversed(test_list[idx]))))]) \r\n  return str(res)"
    },
    {
        "number": 758,
        "prompt": "Write a function to count number of unique lists within a list.\ndef unique_sublists(list1):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    list1.sort()\n    count = 0\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            if list1[j] == list1[i]:\n                count += 1\n    return count\n\n# Test the function\nlist1 = [1,2,3,4,5,6]\nprint(unique_sublists(list1)) # Output: 4 (because there are 4 unique sublists [1], [2], [3], [4], [5], [6], [1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [1, 2, 3], [2, 4], [3, 5], [1, 2, 3, 4], [2, 4, 5], [1, 2, 3, 4, 5], [2, 3, 4, 5, 6])\n\nlist2 = [1,2,2,3,3]\nprint(unique_sublists(list2)) # Output: 3 (because there are 3 unique sublists [1], [2], [3], [1, 2], [2, 3], [1, 2, 3])\n\nlist3 = [1,2,2,3,3,4,4]\nprint(unique_sublists(list3)) # Output: 5 (because there are 5 unique sublists [1",
        "generated_testcode": "assert unique_sublists([\"a\", \"b\", \"c\", \"a\", \"b\", \"c\"]) == 2\n",
        "test": "assert unique_sublists([[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]] )=={(1, 3): 2, (5, 7): 2, (13, 15, 17): 1, (9, 11): 1}\nassert unique_sublists([['green', 'orange'], ['black'], ['green', 'orange'], ['white']])=={('green', 'orange'): 2, ('black',): 1, ('white',): 1}\nassert unique_sublists([[10, 20, 30, 40], [60, 70, 50, 50], [90, 100, 200]])=={(10, 20, 30, 40): 1, (60, 70, 50, 50): 1, (90, 100, 200): 1}",
        "canonical_solution": "def unique_sublists(list1):\r\n    result ={}\r\n    for l in  list1: \r\n        result.setdefault(tuple(l), list()).append(1) \r\n    for a, b in result.items(): \r\n        result[a] = sum(b)\r\n    return result"
    },
    {
        "number": 759,
        "prompt": "Write a function to check a decimal with a precision of 2.\ndef is_decimal(num):\n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    num = str(num)\n    if \".\" in num:\n        decimal_parts = num.split(\".\")\n        if len(decimal_parts) == 2:\n            if len(decimal_parts[1]) > 2:\n                return False\n            for char in decimal_parts[1]:\n                if not char.isdigit():\n                    return False\n            return True\n    return False\n\n\nprint(is_decimal(12.34))  # True\nprint(is_decimal(12.345))  # False\nprint(is_decimal(\"12.34\"))  # True\nprint(is_decimal(\"12.345\"))  # False\nprint(is_decimal(123.4))  # True\nprint(is_decimal(12.3) == True)  # False\nprint(is_decimal(12) == False)  # True\nprint(is_decimal(12.0) == False)  # True\nprint(is_decimal(\"12.0\") == False)  # True\nprint(is_decimal(\"12.\") == False)  # True\nprint(is_decimal(\"12.00\") == True)  # True\nprint(is_decimal(\"12.000\") == False)  # False\nprint(is_decimal(\"abc.def\") == False)  # True\nprint(is_decimal(\"12.34a\") == False)",
        "generated_testcode": "assert is_decimal(3.14) == True\n",
        "test": "assert is_decimal('123.11')==True\nassert is_decimal('e666.86')==False\nassert is_decimal('3.124587')==False",
        "canonical_solution": "def is_decimal(num):\r\n    import re\r\n    dnumre = re.compile(r\"\"\"^[0-9]+(\\.[0-9]{1,2})?$\"\"\")\r\n    result = dnumre.search(num)\r\n    return bool(result)"
    },
    {
        "number": 760,
        "prompt": "Write a python function to check whether an array contains only one distinct element or not.\ndef unique_Element(arr,n):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    # Initialize a variable to keep track of the count of the element\n    count = 0\n    # Traverse through the array\n    for i in range(n):\n        # Increment the count if the element is found in the array\n        if arr[i] in arr[:i]:\n            count += 1\n    # If count is equal to 1, return true, else return false\n    if count == 1:\n        return True\n    else:\n        return False\n# Test the function\narr = [1, 1, 1, 1, 1, 1]\nn = len(arr)\nprint(unique_Element(arr, n)) # Output: False\n\narr = [1, 2, 3, 4, 5, 5]\nn = len(arr)\nprint(unique_Element(arr, n)) # Output: False\n\narr = [1, 2, 3, 4, 5]\nn = len(arr)\nprint(unique_Element(arr, n)) # Output: True\n\narr = [1]\nn = len(arr)\nprint(unique_Element(arr, n)) # Output: True\n\narr = []\nn = len(arr)\nprint(unique_Element(arr, n)) # Output: False (because there are no elements) ",
        "generated_testcode": "assert unique_Element([1,2,3,4,5,6],5) == False\n",
        "test": "assert unique_Element([1,1,1],3) == 'YES'\nassert unique_Element([1,2,1,2],4) == 'NO'\nassert unique_Element([1,2,3,4,5],5) == 'NO'",
        "canonical_solution": "def unique_Element(arr,n):\r\n    s = set(arr)\r\n    if (len(s) == 1):\r\n        return ('YES')\r\n    else:\r\n        return ('NO')"
    },
    {
        "number": 761,
        "prompt": "Write a function to caluclate arc length of an angle.\ndef arc_length(d,a):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    import math\n    return d*math.sin(a)\nprint(arc_length(10,math.pi/2))\n\n# Write a function to calculate the area of a triangle.\ndef area_triangle(a,b,c):\n    import math\n    s=0.5*(a+b+c)\n    return math.sqrt(s*(s-a)*(s-b)*(s-c))\nprint(area_triangle(5,6,7))\n\n# Write a function to calculate the area of a trapezoid.\ndef area_trapezoid(a,b,h):\n    return 0.5*a+0.5*b+h\nprint(area_trapezoid(10,12,8))\n\n# Write a function to calculate the area of a circle.\ndef area_circle(r):\n    import math\n    return math.pi*(r**2)\nprint(area_circle(4))\n\n# Write a function to calculate the area of a rectangle.\ndef area_rectangle(a,b):\n    return a*b\nprint(area_rectangle(10,12))\n\n# Write a function to calculate the area of a sphere.\ndef area_sphere(r):\n    import math\n    return 4/3*(math.pi)*(r**3)\nprint(area_sphere(5))\n\n# Write a function to calculate the area of a cylinder.\ndef area_cylinder(r,h):\n",
        "generated_testcode": "assert arc_length(1, 90) == 0.5\n",
        "test": "assert arc_length(9,45)==3.5357142857142856\nassert arc_length(9,480)==None\nassert arc_length(5,270)==11.785714285714285",
        "canonical_solution": "def arc_length(d,a):\r\n    pi=22/7\r\n    if a >= 360:\r\n        return None\r\n    arclength = (pi*d) * (a/360)\r\n    return arclength"
    },
    {
        "number": 762,
        "prompt": "Write a function to check whether the given month number contains 30 days or not.\ndef check_monthnumber_number(monthnum3):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": true,
        "answer": "    if monthnum3 in [1, 3, 5, 7, 8, 10, 12]:\n        return True\n    elif monthnum3 in [4, 6, 9, 11]:\n        return False\n    else:\n        return False\n\n# Test the function with a sample input\nprint(check_monthnumber_number(4)) # Should return False\nprint(check_monthnumber_number(9)) # Should return True\nprint(check_monthnumber_number(2)) # Should return True\nprint(check_monthnumber_number(13)) # Should return None\n\n# Write a function to check if the given day number is a valid day for a given month\ndef check_day_month(daynum, monthnum):\n    if monthnum == 2:\n        if daynum <= 29 and daynum > 0:\n            return True\n        else:\n            return False\n    elif monthnum in [1, 3, 5, 7, 8, 10, 12]:\n        if daynum <= 31 and daynum > 0:\n            return True\n        else:\n            return False\n    elif monthnum in [4, 6, 9, 11]:\n        if daynum <= 30 and daynum > 0:\n            return True\n        else:\n            return False\n    else:\n        return False\n\n# Test the function with a sample input\nprint(check_day_month(31, 5)) #",
        "generated_testcode": "assert check_monthnumber_number(1) == True\n",
        "test": "assert check_monthnumber_number(6)==True\nassert check_monthnumber_number(2)==False\nassert check_monthnumber_number(12)==False",
        "canonical_solution": "def check_monthnumber_number(monthnum3):\r\n  if(monthnum3==4 or monthnum3==6 or monthnum3==9 or monthnum3==11):\r\n    return True\r\n  else:\r\n    return False"
    },
    {
        "number": 763,
        "prompt": "Write a python function to find the minimum difference between any two elements in a given array.\ndef find_Min_Diff(arr,n): \n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    arr.sort() \n    min_diff = abs(arr[1] - arr[0]) \n    for i in range(1, n): \n        if (abs(arr[i] - arr[i-1]) < min_diff): \n            min_diff = abs(arr[i] - arr[i-1]) \n    return min_diff \n  \n# Testing the function with example array \narr = [3, 8, 2, 5, 1, 4, 10, 6] \nn = len(arr) \nprint(\"Minimum difference is: \", find_Min_Diff(arr, n)) ",
        "generated_testcode": "assert find_Min_Diff([1, 3, 5, 12, 15, 19, 26], 5) == 2\n",
        "test": "assert find_Min_Diff((1,5,3,19,18,25),6) == 1\nassert find_Min_Diff((4,3,2,6),4) == 1\nassert find_Min_Diff((30,5,20,9),4) == 4",
        "canonical_solution": "def find_Min_Diff(arr,n): \r\n    arr = sorted(arr) \r\n    diff = 10**20 \r\n    for i in range(n-1): \r\n        if arr[i+1] - arr[i] < diff: \r\n            diff = arr[i+1] - arr[i]  \r\n    return diff "
    },
    {
        "number": 764,
        "prompt": "Write a python function to count numeric values in a given string.\ndef number_ctr(str):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count\n\n# Test the function\nprint(number_ctr(\"a1b2c3d4e5\")) # Output: 5\nprint(number_ctr(\"a!b@c#d$e%\")) # Output: 0\nprint(number_ctr(\"a1b2c3d4e5f6g7h8i9j0\")) # Output: 10\nprint(number_ctr(\"abcd\")) # Output: 0\n\n# Define a function to count uppercase letters in a string\ndef upper_count(str):\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count\n\n# Test the function\nprint(upper_count(\"Python is awesome\")) # Output: 4\nprint(upper_count(\"hello world\")) # Output: 0\nprint(upper_count(\"HELLO WORLD\")) # Output: 5\n\n# Define a function to count lowercase letters in a string\ndef lower_count(str):\n    count = 0\n    for char in str:\n        if char.islower():\n            count += 1\n    return count\n\n# Test the function\nprint(lower_count(\"Python is awesome\")) # Output: 9\nprint(lower_count(\"hello world\")) # Output: 10\nprint(lower_count(\"HELLO WORLD\")) # Output: 0",
        "generated_testcode": "assert number_ctr(\"Hello 123 World 456\") == 2\n",
        "test": "assert number_ctr('program2bedone') == 1\nassert number_ctr('3wonders') ==1\nassert number_ctr('123') == 3",
        "canonical_solution": "def number_ctr(str):\r\n      number_ctr= 0\r\n      for i in range(len(str)):\r\n          if str[i] >= '0' and str[i] <= '9': number_ctr += 1     \r\n      return  number_ctr"
    },
    {
        "number": 765,
        "prompt": "Write a function to find nth polite number.\ndef is_polite(n): \n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    \"\"\"\n    A polite number is a number that can be expressed as a sum of consecutive\n    positive integers. For example, 6 is a polite number as it can be expressed as 1+2+3.\n    \"\"\"\n    def sum_of_consecutive_numbers(n):\n        \"\"\"\n        Returns the sum of the first n consecutive integers.\n        \"\"\"\n        return (n*(n+1)/2)\n    def is_perfect_square(n):\n        \"\"\"\n        Returns True if n is a perfect square, False otherwise.\n        \"\"\"\n        root = int(n**0.5)\n        return root*root == n\n    def nth_polite_number(n):\n        \"\"\"\n        Returns the nth polite number.\n        \"\"\"\n        if n == 1:\n            return 1\n        else:\n            polite_num = 1\n            while not is_perfect_score(polite_num):\n                polite_num = sum_of_consecutive_numbers(n)\n                n += 1\n            return polite_num\n    return nth_polite_number(n)\n    ",
        "generated_testcode": "assert is_polite(1) == True\n",
        "test": "assert is_polite(7) == 11\nassert is_polite(4) == 7\nassert is_polite(9) == 13",
        "canonical_solution": "import math \r\ndef is_polite(n): \r\n\tn = n + 1\r\n\treturn (int)(n+(math.log((n + math.log(n, 2)), 2))) "
    },
    {
        "number": 766,
        "prompt": "Write a function to iterate over all pairs of consecutive items in a given list.\ndef pair_wise(l1):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": true,
        "answer": "    for i in range(len(l1)-1):\n        yield l1[i], l1[i+1]\n\n# Example usage\nl1 = [1, 2, 3, 4, 5]\nfor a, b in pair_wise(l1):\n    print(a, b)\n\n# Output:\n# 1 2\n# 2 3\n# 3 4\n# 4 5\n\n# If you want to include the last pair, you can use a slightly different range:\ndef pair_wise(l1):\n    for i in range(len(l1)-1):\n        yield l1[i], l1[i+1]\n    yield l1[-1], None\n\n# Example usage\nl1 = [1, 2, 3, 4, 5]\nfor a, b in pair_wise(l1):\n    print(a, b)\n\n# Output:\n# 1 2\n# 2 3\n# 3 4\n# 4 5\n# 5 None\n\n# Alternatively, you can create a list of pairs:\ndef pair_wise(l1):\n    return list(zip(l1, l1[1:]))\n\n# Example usage\nl1 = [1, 2, 3, 4, 5]\nfor a, b in pair_wise(l1):\n    print(a, b)\n\n# Output:\n# 1 2\n# 2 3\n#",
        "generated_testcode": "assert pair_wise([1, 2, 3, 4, 5]) == [(1, 2), (2, 3), (3, 4), (4, 5)]\n",
        "test": "assert pair_wise([1,1,2,3,3,4,4,5])==[(1, 1), (1, 2), (2, 3), (3, 3), (3, 4), (4, 4), (4, 5)]\nassert pair_wise([1,5,7,9,10])==[(1, 5), (5, 7), (7, 9), (9, 10)]\nassert pair_wise([1,2,3,4,5,6,7,8,9,10])==[(1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 7), (7, 8), (8, 9), (9, 10)]",
        "canonical_solution": "def pair_wise(l1):\r\n    temp = []\r\n    for i in range(len(l1) - 1):\r\n        current_element, next_element = l1[i], l1[i + 1]\r\n        x = (current_element, next_element)\r\n        temp.append(x)\r\n    return temp"
    },
    {
        "number": 767,
        "prompt": "Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019.\ndef get_Pairs_Count(arr,n,sum):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    count=0\n    for i in range(n):\n        for j in range(i+1,n):\n            if arr[i]+arr[j]==sum:\n                count+=1\n    return count\n\n# Test the function\narr = [1, 5, 3, 2, 4, 6, 7]\nn=len(arr)\nsum=10\nprint(\"Pairs count is:\",get_Pairs_Count(arr,n,sum)) ",
        "generated_testcode": "assert get_Pairs_Count([1,2,3,4,5,6,7,8,9],7) == 2\n",
        "test": "assert get_Pairs_Count([1,1,1,1],4,2) == 6\nassert get_Pairs_Count([1,5,7,-1,5],5,6) == 3\nassert get_Pairs_Count([1,-2,3],3,1) == 1",
        "canonical_solution": "def get_Pairs_Count(arr,n,sum):\r\n    count = 0  \r\n    for i in range(0,n):\r\n        for j in range(i + 1,n):\r\n            if arr[i] + arr[j] == sum:\r\n                count += 1\r\n    return count"
    },
    {
        "number": 768,
        "prompt": "Write a python function to check for odd parity of a given number.\ndef check_Odd_Parity(x): \n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    if x & 1: \n        return True\n    else: \n        return False\n\n# Test the function\nprint(check_Odd_Parity(7)) ",
        "generated_testcode": "assert check_Odd_Parity(5) == True\n",
        "test": "assert check_Odd_Parity(13) == True\nassert check_Odd_Parity(21) == True\nassert check_Odd_Parity(18) == False",
        "canonical_solution": "def check_Odd_Parity(x): \r\n    parity = 0\r\n    while (x != 0): \r\n        x = x & (x - 1) \r\n        parity += 1\r\n    if (parity % 2 == 1): \r\n        return True\r\n    else: \r\n        return False"
    },
    {
        "number": 769,
        "prompt": "Write a python function to get the difference between two lists.\ndef Diff(li1,li2):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": true,
        "answer": "    return (list(set(li1) - set(li2)))\n\n#Example usage:\nli1 = [1,2,3,4,5]\nli2 = [4,5,6,7]\n\nprint(Diff(li1, li2)) #Output: [1,2,3]\n\nli1 = [1,2,3,4,5]\nli2 = [1,2,3,4,5]\n\nprint(Diff(li1, li2)) #Output: []\n\nli1 = [1,2,3,4,5]\nli2 = [5,4,3,2,1]\n\nprint(Diff(li1, li2)) #Output: [] ",
        "generated_testcode": "assert Diff([1,2,3,4],[2,3,4,5]) == [1]\n",
        "test": "assert (Diff([10, 15, 20, 25, 30, 35, 40], [25, 40, 35])) == [10, 20, 30, 15]\nassert (Diff([1,2,3,4,5], [6,7,1])) == [2,3,4,5,6,7]\nassert (Diff([1,2,3], [6,7,1])) == [2,3,6,7]",
        "canonical_solution": "def Diff(li1,li2):\r\n    return (list(list(set(li1)-set(li2)) + list(set(li2)-set(li1))))\r\n "
    },
    {
        "number": 770,
        "prompt": "Write a python function to find the sum of fourth power of first n odd natural numbers.\ndef odd_Num_Sum(n) : \n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    i = 1\n    sum = 0\n    while(n > 0): \n        sum += i * i * i * i * i\n        i += 2\n        n -= 1\n    return sum\n\nn = int(input(\"Enter the value of n: \"))\nprint(\"Sum of fourth power of first\", n, \"odd natural numbers is\", odd_Num_Sum(n)) \n\n# Test the function with n = 5\nprint(\"Sum of fourth power of first 5 odd natural numbers is\", odd_Num_Sum(5)) # Output: 225000\n\n# Test the function with n = 10\nprint(\"Sum of fourth power of first 10 odd natural numbers is\", odd_Num_Sum(10)) # Output: 528500\n\n# Test the function with n = 20\nprint(\"Sum of fourth power of first 20 odd natural numbers is\", odd_Num_Sum(20)) # Output: 26839000\n\n# Test the function with n = 100\nprint(\"Sum of fourth power of first 100 odd natural numbers is\", odd_Num_Sum(100)) # Output: 306140000\n\n# Test the function with n = 10000\nprint(\"Sum of fourth power of first 10000 odd natural numbers is\", odd_Num_Sum(10000)) # Output: 308371855",
        "generated_testcode": "assert odd_Num_Sum(5) == 225\n",
        "test": "assert odd_Num_Sum(2) == 82\nassert odd_Num_Sum(3) == 707\nassert odd_Num_Sum(4) == 3108",
        "canonical_solution": "def odd_Num_Sum(n) : \r\n    j = 0\r\n    sm = 0\r\n    for i in range(1,n + 1) : \r\n        j = (2*i-1) \r\n        sm = sm + (j*j*j*j)   \r\n    return sm "
    },
    {
        "number": 771,
        "prompt": "Write a function to check if the given expression is balanced or not.\ndef check_expression(exp):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    stack = []\n    for char in exp:\n        if char in '({[':\n            stack.append(char)\n        elif char in ')}]':\n            if not stack or (char == ')' and stack[-1] != '(') or (char == ']' and stack[-1] != '[') or (char == '}' and stack[-1] != '{'):\n                return False\n            stack.pop()\n    return len(stack) == 0\n\n# Test the function\nexp = '({[]}()'\nprint(check_expression(exp))  # Output: False\nexp = '({[]})'\nprint(check_expression(exp))  # Output: True\nexp = '({[()]}'\nprint(check_expression(exp))  # Output: False\nexp = '({[]})'\nprint(check_expression(exp))  # Output: True\nexp = '({[({()]})'\nprint(check_expression(exp))  # Output: True ",
        "generated_testcode": "assert check_expression(\"()\") == True\n",
        "test": "assert check_expression(\"{()}[{}]\") == True\nassert check_expression(\"{()}[{]\") == False\nassert check_expression(\"{()}[{}][]({})\") == True",
        "canonical_solution": "from collections import deque\r\ndef check_expression(exp):\r\n    if len(exp) & 1:\r\n        return False\r\n    stack = deque()\r\n    for ch in exp:\r\n        if ch == '(' or ch == '{' or ch == '[':\r\n            stack.append(ch)\r\n        if ch == ')' or ch == '}' or ch == ']':\r\n            if not stack:\r\n                return False\r\n            top = stack.pop()\r\n            if (top == '(' and ch != ')') or (top == '{' and ch != '}' or (top == '[' and ch != ']')):\r\n                return False\r\n    return not stack"
    },
    {
        "number": 772,
        "prompt": "Write a function to remove all the words with k length in the given string.\ndef remove_length(test_str, K):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    words = test_str.split()\n    result = []\n    for word in words:\n        if len(word) != K:\n            result.append(word)\n    return \" \".join(result)\n\n# Test the function\ntest_str = \"I love coding in Python\"\nK = 3\nprint(remove_length(test_str, K))\n\n# Output: \"I love Python\"\n\n# Time Complexity: O(n)\n# Space Complexity: O(n)\n",
        "generated_testcode": "assert remove_length(\"Hello world\", 2) == \"Hd\"\n",
        "test": "assert remove_length('The person is most value tet', 3) == 'person is most value'\nassert remove_length('If you told me about this ok', 4) == 'If you me about ok'\nassert remove_length('Forces of darkeness is come into the play', 4) == 'Forces of darkeness is the'",
        "canonical_solution": "def remove_length(test_str, K):\r\n  temp = test_str.split()\r\n  res = [ele for ele in temp if len(ele) != K]\r\n  res = ' '.join(res)\r\n  return (res) "
    },
    {
        "number": 773,
        "prompt": "Write a function to find the occurrence and position of the substrings within a string.\ndef occurance_substring(text,pattern):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    count = 0\n    position = []\n    for i in range(len(text)-len(pattern)+1):\n        if text[i:i+len(pattern)] == pattern:\n            count += 1\n            position.append(i)\n    return count,position\n\n# Testing\ntext = \"Hello, world! Hello, Python!\"\npattern = \"Hello\"\nprint(occurance_substring(text,pattern)) # Output: (2, [0, 8])\n\ntext = \"Hello, world! Hello, Python!\"\npattern = \"world\"\nprint(occurance_substring(text,pattern)) # Output: (1, [7])\n\ntext = \"Hello, world! Hello, Python!\"\npattern = \"Python\"\nprint(occurance_substring(text,pattern)) # Output: (1, [13])\n\ntext = \"Hello, world! Hello, Python!\"\npattern = \"java\"\nprint(occurance_substring(text,pattern)) # Output: (0, [])\n\ntext = \"Hello, world! Hello, Python!\"\npattern = \"Hello\"\nprint(occurance_substring(text,pattern)) # Output: (2, [0, 8])\n\ntext = \"Hello, world! Hello, Python!\"\npattern = \"\"\nprint(occurance_substring(text,pattern)) # Output: (0, []) ",
        "generated_testcode": "assert occurance_substring(\"hello world\", \"l\") == (2, [2, 3] )\n",
        "test": "assert occurance_substring('python programming, python language','python')==('python', 0, 6)\nassert occurance_substring('python programming,programming language','programming')==('programming', 7, 18)\nassert occurance_substring('python programming,programming language','language')==('language', 31, 39)",
        "canonical_solution": "import re\r\ndef occurance_substring(text,pattern):\r\n for match in re.finditer(pattern, text):\r\n    s = match.start()\r\n    e = match.end()\r\n    return (text[s:e], s, e)"
    },
    {
        "number": 774,
        "prompt": "Write a function to check if the string is a valid email address or not using regex.\ndef check_email(email): \n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    pattern = r'\\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Z|a-z]{2,}\\b'\n    if re.fullmatch(pattern, email):\n        return True\n    else:\n        return False\n\n# Test the function with some sample inputs\nprint(check_email(\"example@example.com\")) # Output: True\nprint(check_email(\"example@exampl#e.com\")) # Output: False\nprint(check_email(\"example.com\")) # Output: False\nprint(check_email(\"example@example.co.in\")) # Output: True\n``` ",
        "generated_testcode": "assert check_email(\"example@example.com\") == True\n",
        "test": "assert check_email(\"ankitrai326@gmail.com\") == 'Valid Email'\nassert check_email(\"my.ownsite@ourearth.org\") == 'Valid Email'\nassert check_email(\"ankitaoie326.com\") == 'Invalid Email'",
        "canonical_solution": "import re \r\nregex = '^[a-z0-9]+[\\._]?[a-z0-9]+[@]\\w+[.]\\w{2,3}$'\r\ndef check_email(email): \r\n\tif(re.search(regex,email)): \r\n\t\treturn (\"Valid Email\") \r\n\telse: \r\n\t\treturn (\"Invalid Email\") "
    },
    {
        "number": 775,
        "prompt": "Write a python function to check whether every odd index contains odd numbers of a given list.\ndef odd_position(nums):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    if len(nums) < 3:\n        return False\n    for i in range(1, len(nums), 2):\n        if nums[i] % 2 == 0:\n            return False\n    return True\n\n# Test cases\nprint(odd_position([1, 3, 5, 7, 9]))  # Output: True\nprint(odd_position([2, 4, 6, 8, 10]))  # Output: False\nprint(odd_position([1, 2, 3, 4, 5]))  # Output: False\nprint(odd_position([1, 3, 5, 7]))  # Output: False\nprint(odd_position([9, 3, 1, 7, 5, 11, 2, 4]))  # Output: True\nprint(odd_position([1, 3, 5, 7, 9, 2, 4, 6, 8]))  # Output: False ",
        "generated_testcode": "assert odd_position([1, 2, 3, 4, 5, 6, 7, 8, 9]) == True\n",
        "test": "assert odd_position([2,1,4,3,6,7,6,3]) == True\nassert odd_position([4,1,2]) == True\nassert odd_position([1,2,3]) == False",
        "canonical_solution": "def odd_position(nums):\r\n\treturn all(nums[i]%2==i%2 for i in range(len(nums)))"
    },
    {
        "number": 776,
        "prompt": "Write a function to count those characters which have vowels as their neighbors in the given string.\ndef count_vowels(test_str):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    count = 0\n    vowels = set(\"aeiouAEIOU\")\n    for i in range(len(test_str)-1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n    return count\n\n# Test the function with example\nprint(count_vowels(\"Hello World\")) # Output: 3\nprint(count_vowels(\"Hello Worldddd\")) # Output: 3\nprint(count_vowels(\"Hello Worldddddd\")) # Output: 0\nprint(count_vowels(\"aeiou\")) # Output: 5\nprint(count_vowels(\"AeiOu\")) # Output: 3\nprint(count_vowels(\"HelloWorld\")) # Output: 0\nprint(count_vowels(\"AeiOuH\")) # Output: 2\nprint(count_vowels(\"AEIOUaeiouAEIOU\")) # Output: 8\nprint(count_vowels(\"AeiOuAeiOu\")) # Output: 5 ",
        "generated_testcode": "assert count_vowels(\"hello world\") == 3\n",
        "test": "assert count_vowels('bestinstareels') == 7\nassert count_vowels('partofthejourneyistheend') == 12\nassert count_vowels('amazonprime') == 5",
        "canonical_solution": "def count_vowels(test_str):\r\n  res = 0\r\n  vow_list = ['a', 'e', 'i', 'o', 'u']\r\n  for idx in range(1, len(test_str) - 1):\r\n    if test_str[idx] not in vow_list and (test_str[idx - 1] in vow_list or test_str[idx + 1] in vow_list):\r\n      res += 1\r\n  if test_str[0] not in vow_list and test_str[1] in vow_list:\r\n    res += 1\r\n  if test_str[-1] not in vow_list and test_str[-2] in vow_list:\r\n    res += 1\r\n  return (res) "
    },
    {
        "number": 777,
        "prompt": "Write a python function to find the sum of non-repeated elements in a given array.\ndef find_Sum(arr,n): \n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    # Initialize an empty dictionary to store the count of each element\n    freq = {}\n    # Loop through the array and count the frequency of each element\n    for i in arr:\n        if i in freq:\n            freq[i] += 1\n        else:\n            freq[i] = 1\n    # Loop through the array again and add the elements with frequency 1 to the sum\n    sum = 0\n    for i in arr:\n        if freq[i] == 1:\n            sum += i\n    return sum\n\n# Test the function\narr = [1,2,3,2,4,5,3,7,8,8,9]\nn = len(arr)\nprint(find_Sum(arr,n)) # Output: 18\n",
        "generated_testcode": "assert find_Sum([1,2,3,2,4,5,3,1], 6) == 9\n",
        "test": "assert find_Sum([1,2,3,1,1,4,5,6],8) == 21\nassert find_Sum([1,10,9,4,2,10,10,45,4],9) == 71\nassert find_Sum([12,10,9,45,2,10,10,45,10],9) == 78",
        "canonical_solution": "def find_Sum(arr,n): \r\n    arr.sort() \r\n    sum = arr[0] \r\n    for i in range(0,n-1): \r\n        if (arr[i] != arr[i+1]): \r\n            sum = sum + arr[i+1]   \r\n    return sum"
    },
    {
        "number": 778,
        "prompt": "Write a function to pack consecutive duplicates of a given list elements into sublists.\ndef pack_consecutive_duplicates(list1):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    result = []\n    temp = []\n    for i in range(len(list1)):\n        if i == 0 or list1[i] == list1[i-1]:\n            temp.append(list1[i])\n        else:\n            result.append(temp)\n            temp = [list1[i]]\n    result.append(temp)\n    return result\n\n# Example usage:\nprint(pack_consecutive_duplicates([1, 2, 2, 3, 3, 3, 2, 2, 1, 1, 5, 5, 5, 5, 4, 4, 4, 4, 4, 5])) # Output: [[1], [2, 2], [3, 3, 3], [2, 2], [1, 1], [5, 5, 5], [4, 4, 4], [5]] ",
        "generated_testcode": "assert pack_consecutive_duplicates([\"a\", \"a\", \"a\", \"b\", \"b\", \"a\", \"c\", \"c\", \"c\", \"c\"]) == [[\"a\", \"a\", \"a\"], [\"b\", \"b\"], [\"a\"], [\"c\", \"c\", \"c\"]]\n",
        "test": "assert pack_consecutive_duplicates([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4])==[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]\nassert pack_consecutive_duplicates([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10])==[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]\nassert pack_consecutive_duplicates(['a', 'a', 'b', 'c', 'd', 'd'])==[['a', 'a'], ['b'], ['c'], ['d', 'd']]",
        "canonical_solution": "from itertools import groupby\r\ndef pack_consecutive_duplicates(list1):\r\n    return [list(group) for key, group in groupby(list1)]"
    },
    {
        "number": 779,
        "prompt": "Write a function to count the number of unique lists within a list.\ndef unique_sublists(list1):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    # Sort the list in ascending order\n    list1.sort()\n    # Convert the list to a set to remove duplicates\n    list_set = set(list1)\n    # Return the length of the set\n    return len(list_set)\n\n# Example usage:\nlist1 = [1, 2, 2, 3, 4, 4, 5, 6, 6, 7, 7, 8, 8, 9]\nprint(unique_sublists(list1))  # Output: 4\nlist2 = [1, 1, 1, 1, 2, 2, 2, 3, 3]\nprint(unique_sublists(list2))  # Output: 2\nlist3 = [1, 2, 3, 4, 5, 6, 7, 8, 9]\nprint(unique_sublists(list3))  # Output: 7\nlist4 = [1, 1, 1, 1, 2, 2, 2, 2, 2, 3, 3, 3]\nprint(unique_sublists(list4))  # Output: 2\nlist5 = [1, 2, 3, 4, 5, 6, 7, 8, 9]\nprint(unique_sublists(list5))  # Output: 7\n",
        "generated_testcode": "assert unique_sublists([\"a\", \"b\", \"c\", \"a\", \"b\", \"d\"]) == 3\n",
        "test": "assert unique_sublists([[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]])=={(1, 3): 2, (5, 7): 2, (13, 15, 17): 1, (9, 11): 1}\nassert unique_sublists([['green', 'orange'], ['black'], ['green', 'orange'], ['white']])=={('green', 'orange'): 2, ('black',): 1, ('white',): 1}\nassert unique_sublists([[1, 2], [3, 4], [4, 5], [6, 7]])=={(1, 2): 1, (3, 4): 1, (4, 5): 1, (6, 7): 1}",
        "canonical_solution": "def unique_sublists(list1):\r\n    result ={}\r\n    for l in list1: \r\n        result.setdefault(tuple(l), list()).append(1) \r\n    for a, b in result.items(): \r\n        result[a] = sum(b)\r\n    return result"
    },
    {
        "number": 780,
        "prompt": "Write a function to find the combinations of sums with tuples in the given tuple list.\ndef find_combinations(test_list):\n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    combinations = []\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            for k in range(j+1, len(test_list)):\n                for l in range(k+1, len(test_list)):\n                    combinations.append((test_list[i], test_list[j], test_list[k], test_list[l]))\n    return combinations\n\n\n# Test the function\ntest_list = (1,2,3,4,5,6,7)\nprint(find_combinations(test_list)) # Output: [(1, 2, 3, 4), (1, 2, 4, 5), (1, 2, 5, 6), (1, 2, 6, 7), (1, 3, 4, 5), (1, 3, 5, 6), (1, 3, 6, 7), (1, 4, 5, 6), (1, 4, 6, 7), (1, 5, 6, 7), (2, 3, 4, 5), (2, 3, 5, 6), (2, 3, 6, 7), (2, 4, 5, 6), (2, 4, 6, 7), (2, 5, 6, 7), (3, 4, 5, 6),",
        "generated_testcode": "assert find_combinations(()) == []\n",
        "test": "assert find_combinations([(2, 4), (6, 7), (5, 1), (6, 10)]) == [(8, 11), (7, 5), (8, 14), (11, 8), (12, 17), (11, 11)]\nassert find_combinations([(3, 5), (7, 8), (6, 2), (7, 11)]) == [(10, 13), (9, 7), (10, 16), (13, 10), (14, 19), (13, 13)]\nassert find_combinations([(4, 6), (8, 9), (7, 3), (8, 12)]) == [(12, 15), (11, 9), (12, 18), (15, 12), (16, 21), (15, 15)]",
        "canonical_solution": "from itertools import combinations \r\ndef find_combinations(test_list):\r\n  res = [(b1 + a1, b2 + a2) for (a1, a2), (b1, b2) in combinations(test_list, 2)]\r\n  return (res) "
    },
    {
        "number": 781,
        "prompt": "Write a python function to check whether the count of divisors is even or odd.\ndef count_Divisors(n) : \n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    count = 0\n    for i in range(1, n+1) : \n        if (n % i == 0) : \n            count = count + 1\n    return count \n\ndef check_even_odd_divisors(n) : \n    if count_Divisors(n) % 2 == 0 : \n        return \"Even\"\n    else : \n        return \"Odd\"\n\n# Test the function\nn = 15\nprint(check_even_odd_divisors(n)) ",
        "generated_testcode": "assert count_Divisors(12) == \"even\"\n",
        "test": "assert count_Divisors(10) == \"Even\"\nassert count_Divisors(100) == \"Odd\"\nassert count_Divisors(125) == \"Even\"",
        "canonical_solution": "import math \r\ndef count_Divisors(n) : \r\n    count = 0\r\n    for i in range(1, (int)(math.sqrt(n)) + 2) : \r\n        if (n % i == 0) : \r\n            if( n // i == i) : \r\n                count = count + 1\r\n            else : \r\n                count = count + 2\r\n    if (count % 2 == 0) : \r\n        return (\"Even\") \r\n    else : \r\n        return (\"Odd\") "
    },
    {
        "number": 782,
        "prompt": "Write a python function to find the sum of all odd length subarrays.\ndef Odd_Length_Sum(arr):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    sum = 0\n    n = len(arr)\n    for i in range(n):\n        for j in range(i, n):\n            if (j - i + 1) % 2 != 0:\n                for k in range(i, j+1):\n                    sum += arr[k]\n    return sum\n\n# Testing the function\narr = [1, 2, 3, 4, 5, 6, 7]\nprint(Odd_Length_Sum(arr))\n\n# Output: 16\n# Explanation: The odd length subarrays of the array are [1], [2], [3], [4], [5], [6], [7], [1, 2, 3], [2, 3, 4], [3, 4, 5], [4, 5, 6], [5, 6, 7], [1, 2, 3, 4], [2, 3, 4, 5], [3, 4, 5, 6], [4, 5, 6, 7], [1, 2, 3, 4, 5], [2, 3, 4, 5, 6], [3, 4, 5, 6, 7]\n# The sum of each odd length subarray is 1, 2, 3, 4, 5, 6, 7, 6, 9, 10, 11, ",
        "generated_testcode": "assert Odd_Length_Sum([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 16\n",
        "test": "assert Odd_Length_Sum([1,2,4]) == 14\nassert Odd_Length_Sum([1,2,1,2]) == 15\nassert Odd_Length_Sum([1,7]) == 8",
        "canonical_solution": "def Odd_Length_Sum(arr):\r\n    Sum = 0\r\n    l = len(arr)\r\n    for i in range(l):\r\n        Sum += ((((i + 1) *(l - i) + 1) // 2) * arr[i])\r\n    return Sum"
    },
    {
        "number": 783,
        "prompt": "Write a function to convert rgb color to hsv color.\ndef rgb_to_hsv(r, g, b):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": true,
        "answer": "    r, g, b = r/255.0, g/255.0, b/255.0\n    cmax = max(r, g, b)\n    cmin = min(r, g, b)\n    delta = cmax - cmin\n    if cmax == cmin:\n        h = 0\n    elif cmax == r:\n        h = (60 * ((g - b) / delta + 6) % 6)\n    elif cmax == g:\n        h = (60 * ((b - r) / delta + 2) % 6)\n    else:\n        h = (60 * ((r - g) / delta + 4) % 6)\n    s = 0 if cmax == 0 else (delta / cmax)\n    v = cmax\n    return h, s, v\n\n# Test the function\nprint(rgb_to_hsv(255, 0, 0))  # (0.0, 1.0, 1.0)\nprint(rgb_to_hsv(0, 255, 0))  # (120.0, 1.0, 1.0)\nprint(rgb_to_hsv(0, 0, 255))  # (240.0, 1.0, 1.0)\nprint(rgb_to_hsv(255, 255, 0)) # (60.",
        "generated_testcode": "assert rgb_to_hsv(255, 0, 0) == (0, 1, 1)\n",
        "test": "assert rgb_to_hsv(255, 255, 255)==(0, 0.0, 100.0)\nassert rgb_to_hsv(0, 215, 0)==(120.0, 100.0, 84.31372549019608)\nassert rgb_to_hsv(10, 215, 110)==(149.26829268292684, 95.34883720930233, 84.31372549019608)",
        "canonical_solution": "def rgb_to_hsv(r, g, b):\r\n    r, g, b = r/255.0, g/255.0, b/255.0\r\n    mx = max(r, g, b)\r\n    mn = min(r, g, b)\r\n    df = mx-mn\r\n    if mx == mn:\r\n        h = 0\r\n    elif mx == r:\r\n        h = (60 * ((g-b)/df) + 360) % 360\r\n    elif mx == g:\r\n        h = (60 * ((b-r)/df) + 120) % 360\r\n    elif mx == b:\r\n        h = (60 * ((r-g)/df) + 240) % 360\r\n    if mx == 0:\r\n        s = 0\r\n    else:\r\n        s = (df/mx)*100\r\n    v = mx*100\r\n    return h, s, v"
    },
    {
        "number": 784,
        "prompt": "Write a function to find the product of first even and odd number of a given list.\ndef mul_even_odd(list1):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    even_sum = 0\n    odd_sum = 1\n    for i in range(len(list1)):\n        if list1[i] % 2 == 0:\n            even_sum += list1[i]\n        else:\n            odd_sum *= list1[i]\n    return even_sum * odd_sum\n\n\n# Test the function with example\nprint(mul_even_odd([1, 2, 3, 4, 5, 6, 7]))  # Output: 42\nprint(mul_even_odd([10, 5, 6, 8, 7, 2]))   # Output: 160\nprint(mul_even_odd([2, 4, 6, 8, 10]))     # Output: 3840\nprint(mul_even_odd([1, 3, 5, 7, 9]))      # Output: 1\n\n\n# Alternate solution\ndef mul_even_odd(lst):\n    even_sum = 0\n    odd_sum = 1\n    for i in lst:\n        if i % 2 == 0:\n            even_sum += i\n        else:\n            odd_sum *= i\n    return even_sum * odd_sum\n\n# Test the function with example\nprint(mul_even_odd([1, 2, 3, 4, 5, 6, 7]) ) # Output: 42\nprint(mul_",
        "generated_testcode": "assert mul_even_odd([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 48\n",
        "test": "assert mul_even_odd([1,3,5,7,4,1,6,8])==4\nassert mul_even_odd([1,2,3,4,5,6,7,8,9,10])==2\nassert mul_even_odd([1,5,7,9,10])==10",
        "canonical_solution": "def mul_even_odd(list1):\r\n    first_even = next((el for el in list1 if el%2==0),-1)\r\n    first_odd = next((el for el in list1 if el%2!=0),-1)\r\n    return (first_even*first_odd)"
    },
    {
        "number": 785,
        "prompt": "Write a function to convert tuple string to integer tuple.\ndef tuple_str_int(test_str):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    # Your code here\n    temp = test_str.strip(\"()\")\n    temp = temp.split(\",\")\n    result = tuple(int(i) for i in temp)\n    return result\n\n\n# Example usage:\nprint(tuple_str_int(\"(1,2,3,4,5)\")) # Output: (1, 2, 3, 4, 5)\nprint(tuple_str_int(\"(1,2,3,4,5,6)\")) # Output: (1, 2, 3, 4, 5, 6)\nprint(tuple_str_int(\"(1)\")) # Output: (1,) ",
        "generated_testcode": "assert tuple_str_int(\"(1, 2, 3, 4, 5)\") == (1, 2, 3, 4, 5)\n",
        "test": "assert tuple_str_int(\"(7, 8, 9)\") == (7, 8, 9)\nassert tuple_str_int(\"(1, 2, 3)\") == (1, 2, 3)\nassert tuple_str_int(\"(4, 5, 6)\") == (4, 5, 6)",
        "canonical_solution": "def tuple_str_int(test_str):\r\n  res = tuple(int(num) for num in test_str.replace('(', '').replace(')', '').replace('...', '').split(', '))\r\n  return (res) "
    },
    {
        "number": 786,
        "prompt": "Write a function to locate the right insertion point for a specified value in sorted order.\ndef right_insertion(a, x):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    l = 0\n    r = len(a) - 1\n    while l <= r:\n        m = (l + r) // 2\n        if a[m] < x:\n            l = m + 1\n        else:\n            r = m - 1\n    return l\n\n# Test the function\na = [1, 2, 3, 4, 5, 6, 7, 8, 9]\nx = 7\nprint(right_insertion(a, x))  # Output: 5\nx = 2\nprint(right_insertion(a, x))  # Output: 1\nx = 0\nprint(right_insertion(a, x))  # Output: 0\nx = 10\nprint(right_insertion(a, x))  # Output: 6\n\n# Time Complexity: O(log n)\n# Space Complexity: O(1)\n",
        "generated_testcode": "assert right_insertion([1, 2, 3, 4, 5, 6], 3) == 2\n",
        "test": "assert right_insertion([1,2,4,5],6)==4\nassert right_insertion([1,2,4,5],3)==2\nassert right_insertion([1,2,4,5],7)==4",
        "canonical_solution": "import bisect\r\ndef right_insertion(a, x):\r\n    i = bisect.bisect_right(a, x)\r\n    return i"
    },
    {
        "number": 787,
        "prompt": "Write a function that matches a string that has an a followed by three 'b'.\ndef text_match_three(text):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    pattern = 'ab{3}'\n    return bool(re.search(pattern, text))\n\nprint(text_match_three('abbb')) # True\nprint(text_match_three('aabbc')) # True\nprint(text_match_three('abb')) # False\nprint(text_match_three('abcdefg')) # False\n\n# Write a function that matches a string that has two or more 'b's followed by an 'a'.\ndef text_match_two_or_more(text):\n    pattern = 'b{2,}a'\n    return bool(re.search(pattern, text))\n\nprint(text_match_two_or_more('abba')) # True\nprint(text_match_two_or_more('aabbba')) # True\nprint(text_match_two_or_more('baab')) # False\nprint(text_match_two_or_more('cbbc')) # True\n\n# Write a function that matches a string that has an 'a' followed by two 'b's and three 'c's.\ndef text_match_abc(text):\n    pattern = 'ab{2}c{3}'\n    return bool(re.search(pattern, text))\n\nprint(text_match_abc('abcccc')) # True\nprint(text_match_abc('abcbbc')) # False\nprint(text_match_abc('abcccccc')) # False\nprint(text_match_abc('abbccc')) # True\n\n# Write",
        "generated_testcode": "assert text_match_three(\"abbb\") == True\n",
        "test": "assert text_match_three(\"ac\")==('Not matched!')\nassert text_match_three(\"dc\")==('Not matched!')\nassert text_match_three(\"abbbba\")==('Found a match!')",
        "canonical_solution": "import re\r\ndef text_match_three(text):\r\n        patterns = 'ab{3}?'\r\n        if re.search(patterns,  text):\r\n                return 'Found a match!'\r\n        else:\r\n                return('Not matched!')"
    },
    {
        "number": 788,
        "prompt": "Write a function to create a new tuple from the given string and list.\ndef new_tuple(test_list, test_str):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    new_tuple = tuple(test_list) + (test_str,)\n    return new_tuple\n\n# Example usage:\nprint(new_tuple(['apple', 'banana', 'cherry'], 'orange')) # Should print ('apple', 'banana', 'cherry', 'orange')\nprint(new_tuple([1, 2, 3], 'four')) # Should print (1, 2, 3, 'four')\nprint(new_tuple([], 'one')) # Should print ('one',)\nprint(new_tuple(['hello', 'world'], 'goodbye') # Should print ('hello', 'world', 'goodbye') ",
        "generated_testcode": "assert new_tuple(['a', 'b', 'c'], 'd') == ('a', 'b', 'c', 'd')\n",
        "test": "assert new_tuple([\"WEB\", \"is\"], \"best\") == ('WEB', 'is', 'best')\nassert new_tuple([\"We\", \"are\"], \"Developers\") == ('We', 'are', 'Developers')\nassert new_tuple([\"Part\", \"is\"], \"Wrong\") == ('Part', 'is', 'Wrong')",
        "canonical_solution": "def new_tuple(test_list, test_str):\r\n  res = tuple(test_list + [test_str])\r\n  return (res) "
    },
    {
        "number": 789,
        "prompt": "Write a function to calculate the perimeter of a regular polygon.\ndef perimeter_polygon(s,l):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    return s * l\n\n# Test your function with an example polygon\nprint(perimeter_polygon(4, 3))  # should return 12\n\n# Test your function with another example polygon\nprint(perimeter_polygon(10, 5))  # should return 50\n\n# Test your function with a square\nprint(perimeter_polygon(4, 5))  # should return 20\n\n# Test your function with a triangle\nprint(perimeter_polygon(3, 4))  # should return 12\n\n# Test your function with a hexagon\nprint(perimeter_polygon(6, 4))  # should return 24\n\n# Test your function with a circle with a circumference of 2\u03c0r\nprint(perimeter_polygon(2*3.14159, 5)) # should return approximately 31.4159",
        "generated_testcode": "assert perimeter_polygon(10,4) == 40\n",
        "test": "assert perimeter_polygon(4,20)==80\nassert perimeter_polygon(10,15)==150\nassert perimeter_polygon(9,7)==63",
        "canonical_solution": "from math import tan, pi\r\ndef perimeter_polygon(s,l):\r\n  perimeter = s*l\r\n  return perimeter"
    },
    {
        "number": 790,
        "prompt": "Write a python function to check whether every even index contains even numbers of a given list.\ndef even_position(nums):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    for i in range(0, len(nums), 2):\n        if nums[i] % 2 != 0:\n            return False\n    return True\n\nprint(even_position([2, 4, 6, 8, 1, 3, 5])) # True\nprint(even_position([1, 2, 3, 4, 6, 5, 7])) # False\n\n# Example usage:\n# even_position([2, 4, 6, 8, 1, 3, 5]) # True\n# even_position([1, 2, 3, 4, 6, 5, 7]) # False\n# even_position([1, 2, 4, 3, 6, 8, 5]) # False\n# even_position([2, 4, 6, 8, 10, 3, 5]) # False\n# even_position([2, 4, 6, 8, 10, 3, 5, 7]) # False\n# even_position([2, 4, 6, 8, 10, 3, 5, 6]) # True\n# even_position([]) # True\n# even_position([2]) # True\n# even_position([1]) # True\n# even_position([2, 4, 6, 8, 10, 3, 5, 7, 9, 11]) # False\n",
        "generated_testcode": "assert even_position([1, 2, 3, 4, 5, 6, 7, 8]) == True\n",
        "test": "assert even_position([3,2,1]) == False\nassert even_position([1,2,3]) == False\nassert even_position([2,1,4]) == True",
        "canonical_solution": "def even_position(nums):\r\n\treturn all(nums[i]%2==i%2 for i in range(len(nums)))"
    },
    {
        "number": 791,
        "prompt": "Write a function to remove the nested record from the given tuple.\ndef remove_nested(test_tup):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    new_lst = []\n    for item in test_tup:\n        if type(item) == tuple:\n            new_lst.extend(item)\n        else:\n            new_lst.append(item)\n    return tuple(new_lst)\n    \n# Example usage:\ntup = (1, (2, 3, (4, 5), 6, (7, 8))\nprint(remove_nested(tup))  # Output: (1, 2, 3, 4, 5, 6, 7, 8)\ntup2 = (1, 'a', (2, 3, ('x', 'y', 'z'), 4, (5, 6, ('p', 'q', 'r'))\nprint(remove_nested(tup2))  # Output: (1, 'a', 2, 3, 'x', 'y', 'z', 4, 5, 6, 'p', 'q', 'r')\n",
        "generated_testcode": "assert remove_nested((1, (2, 3), 4, (5, 6, (7, 8), 9)) == (1, 4, 5, 6, 7, 8, 9)\n",
        "test": "assert remove_nested((1, 5, 7, (4, 6), 10)) == (1, 5, 7, 10)\nassert remove_nested((2, 6, 8, (5, 7), 11)) == (2, 6, 8, 11)\nassert remove_nested((3, 7, 9, (6, 8), 12)) == (3, 7, 9, 12)",
        "canonical_solution": "def remove_nested(test_tup):\r\n  res = tuple()\r\n  for count, ele in enumerate(test_tup):\r\n    if not isinstance(ele, tuple):\r\n      res = res + (ele, )\r\n  return (res) "
    },
    {
        "number": 792,
        "prompt": "Write a python function to count the number of lists in a given number of lists.\ndef count_list(input_list): \n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    count = 0 \n    for i in input_list: \n        if type(i) == list: \n            count += 1\n        if type(i) == tuple: \n            count += count_tuple(i)\n    return count \n\ndef count_tuple(input_tuple): \n    count = 0 \n    for j in input_tuple: \n        if type(j) == list: \n            count += 1\n        if type(j) == tuple: \n            count += count_tuple(j)\n    return count \n\ninput_list = [1, 2, [3, 4], (5, 6, (7, 8), 9), [10, (11, 12, [13, 14])] ] \nprint(count_list(input_list)) ",
        "generated_testcode": "assert count_list([1, 2, 3]) == 1\n",
        "test": "assert count_list([[1, 3], [5, 7], [9, 11], [13, 15, 17]]) == 4\nassert count_list([[1,2],[2,3],[4,5]]) == 3\nassert count_list([[1,0],[2,0]]) == 2",
        "canonical_solution": "def count_list(input_list): \r\n    return len(input_list)"
    },
    {
        "number": 793,
        "prompt": "Write a python function to find the last position of an element in a sorted array.\ndef last(arr,x,n):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    if x not in arr:\n        return -1\n    i=0\n    j=n-1\n    while i<j:\n        mid=(i+j)//2\n        if arr[mid]<x:\n            i=mid+1\n        else:\n            j=mid\n    if arr[i]==x:\n        while i<n and arr[i]==x:\n            i+=1\n        return i-1\n    else:\n        return -1\n    \narr = list(map(int,input(\"Enter a sorted array: \").split()))\nx=int(input(\"Enter element to search: \"))\nn=len(arr)\nprint(\"The last position of element is:\",last(arr,x,n))\n\n#Example\n#Input:\n#Enter a sorted array: 2 3 3 3 3 4 5 5 5 7\n#Enter element to search: 3\n#Output:\n#The last position of element is: 2\n\n#Time Complexity: O(logn)\n#Space Complexity: O(1)\n",
        "generated_testcode": "assert last([1,2,3,4,4,5,6,7,7,8],4,7) == 5\n",
        "test": "assert last([1,2,3],1,3) == 0\nassert last([1,1,1,2,3,4],1,6) == 2\nassert last([2,3,2,3,6,8,9],3,8) == 3",
        "canonical_solution": "def last(arr,x,n):\r\n    low = 0\r\n    high = n - 1\r\n    res = -1  \r\n    while (low <= high):\r\n        mid = (low + high) // 2 \r\n        if arr[mid] > x:\r\n            high = mid - 1\r\n        elif arr[mid] < x:\r\n            low = mid + 1\r\n        else:\r\n            res = mid\r\n            low = mid + 1\r\n    return res"
    },
    {
        "number": 794,
        "prompt": "Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\ndef text_starta_endb(text):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    regex = r\"a.*b$\"\n    return bool(re.search(regex, text))\n\n# Example usage:\nprint(text_starta_endb(\"ab\"))  # Output: True\nprint(text_starta_endb(\"acb\"))  # Output: True\nprint(text_starta_endb(\"adcb\"))  # Output: False\nprint(text_starta_endb(\"acdfb\"))  # Output: False\nprint(text_starta_endb(\"acbab\"))  # Output: False\n```\n\nIn the regular expression `r\"a.*b$\"`, the `a` matches the letter 'a' literally. The `.*` matches any character (except a newline) zero or more times. The `$` matches the end of the string. So this will match any string that starts with 'a' and ends with 'b'. The `bool` function is used to return `True` if there is a match, and `False` if there isn't. ",
        "generated_testcode": "assert text_starta_endb(\"ab\") == True\n",
        "test": "assert text_starta_endb(\"aabbbb\")==('Found a match!')\nassert text_starta_endb(\"aabAbbbc\")==('Not matched!')\nassert text_starta_endb(\"accddbbjjj\")==('Not matched!')",
        "canonical_solution": "import re\r\ndef text_starta_endb(text):\r\n        patterns = 'a.*?b$'\r\n        if re.search(patterns,  text):\r\n                return 'Found a match!'\r\n        else:\r\n                return('Not matched!')"
    },
    {
        "number": 795,
        "prompt": "Write a function to find the n - cheap price items from a given dataset using heap queue algorithm.\ndef cheap_items(items,n):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    import heapq\n    heap = []\n    for i in items:\n        heapq.heappush(heap,i)\n        if len(heap) > n:\n            heapq.heappop(heap)\n    return heap\n\nitems = [4,5,2,6,3,1,8,7,10,12,9,11,13,14]\nn = 3\nprint(cheap_items(items,n)) # Output [2,3,4]\n\n# Explanation:\n# We create a heap and push each element of the given dataset into the heap, if the heap size becomes greater than n, we pop the largest element from the heap.\n# At the end, the heap will have the n cheapest items in it. ",
        "generated_testcode": "assert cheap_items(items,n) == expected_output\n\n# Test the function with the following inputs\nitems = [{\"name\": \"item1\", \"price\": 10}, {\"name\": \"item2\", \"price\": 20}, {\"name\": \"item3\", \"price\": 5}, {\"name\": \"item4\", \"price\": 15}, {\"name\": \"item5\", \"price\": 8}]\nn = 2\nexpected_output = [{\"name\": \"item3\", \"price\": 5}, {\"name\": \"item1\", \"price\": 10}]\n\n",
        "test": "assert cheap_items([{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}],1)==[{'name': 'Item-1', 'price': 101.1}]\nassert cheap_items([{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}],2)==[{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}]\nassert cheap_items([{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}, {'name': 'Item-3', 'price': 45.09},{'name': 'Item-4', 'price': 22.75}],1)==[{'name': 'Item-4', 'price': 22.75}]",
        "canonical_solution": "import heapq\r\ndef cheap_items(items,n):\r\n  cheap_items = heapq.nsmallest(n, items, key=lambda s: s['price'])\r\n  return cheap_items"
    },
    {
        "number": 796,
        "prompt": "Write function to find the sum of all items in the given dictionary.\ndef return_sum(dict):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    total = 0\n    for i in dict.values():\n        total += i\n    return total\n\n# Test the function with the dictionary\nmy_dict = {'a': 100, 'b': 200, 'c': 300, 'd': 400}\nprint(return_sum(my_dict))\n\n# Output: 800\n\n# Write function to find the maximum value in the given dictionary.\ndef find_max_value(dict):\n    max_val = 0\n    for i in dict.values():\n        if i > max_val:\n            max_val = i\n    return max_val\n\n# Test the function with the dictionary\nmy_dict = {'a': 100, 'b': 200, 'c': 300, 'd': 400}\nprint(find_max_value(my_dict))\n\n# Output: 400\n\n# Write function to find the minimum value in the given dictionary.\ndef find_min_value(dict):\n    min_val = dict[next(iter(dict))]\n    for i in dict.values():\n        if i < min_val:\n            min_val = i\n    return min_val\n\n# Test the function with the dictionary\nmy_dict = {'a': 100, 'b': 200, 'c': 300, 'd': 400}\nprint(find_min_value(my_dict))",
        "generated_testcode": "assert return_sum({'a': 1, 'b': 2, 'c': 3}) == 6\n",
        "test": "assert return_sum({'a': 100, 'b':200, 'c':300}) == 600\nassert return_sum({'a': 25, 'b':18, 'c':45}) == 88\nassert return_sum({'a': 36, 'b':39, 'c':49}) == 124",
        "canonical_solution": "def return_sum(dict):\r\n  sum = 0\r\n  for i in dict.values():\r\n    sum = sum + i\r\n  return sum"
    },
    {
        "number": 797,
        "prompt": "Write a python function to find the sum of all odd natural numbers within the range l and r.\ndef sum_Odd(n): \n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": true,
        "answer": "    sum = 0\n    for i in range(n+1): \n        if i % 2 != 0: \n            sum += i \n    return sum \n  \n# Testing the function \nprint(\"Sum of odd numbers in the range [1,10] is:\", sum_Odd(10)) ",
        "generated_testcode": "assert sum_Odd(10) == 25 # 1 + 3 + 5 + 7 + 9 = 18\n",
        "test": "assert sum_in_Range(2,5) == 8\nassert sum_in_Range(5,7) == 12\nassert sum_in_Range(7,13) == 40",
        "canonical_solution": "def sum_Odd(n): \r\n    terms = (n + 1)//2\r\n    sum1 = terms * terms \r\n    return sum1  \r\ndef sum_in_Range(l,r): \r\n    return sum_Odd(r) - sum_Odd(l - 1)"
    },
    {
        "number": 798,
        "prompt": "Write a python function to find the sum of an array.\ndef _sum(arr):  \n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    sum = 0  \n    for i in range(len(arr)):  \n        sum += arr[i]  \n    return sum  \n  \n# Example usage:  \narr = [1, 2, 3, 4, 5, 6, 7, 8, 9]  \nprint(\"Sum of the array:\", _sum(arr))  \n  \n# Output: Sum of the array: 45 ",
        "generated_testcode": "assert _sum([1, 2, 3, 4, 5]) == 11\n",
        "test": "assert _sum([1, 2, 3]) == 6\nassert _sum([15, 12, 13, 10]) == 50\nassert _sum([0, 1, 2]) == 3",
        "canonical_solution": "def _sum(arr):  \r\n    sum=0\r\n    for i in arr: \r\n        sum = sum + i      \r\n    return(sum)  "
    },
    {
        "number": 799,
        "prompt": "Write a python function to left rotate the bits of a given number.\ndef left_Rotate(n,d):   \n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    while(d>0):\n        #Left Rotate the bits of a number by 1 position\n        leftRotate = (n<<1)\n        n = (n & 0x7FFFFFFF) | (leftRotate & 0x8000000000)\n        #0x7FFFFFFF is used to remove the sign bit\n        d-=1\n    return n\n\n#Function to right rotate the bits of a given number\ndef right_Rotate(n,d):\n    while(d>0):\n        #Right Rotate the bits of a number by 1 position\n        rightRotate = (n & 0x1)\n        n = (n >> 1) | (rightRotate << 31)\n        d-=1\n    return n\n\n#Test the function with an example\nn = 10\nd = 3\nprint(\"Left Rotate by 3 bits: \", left_Rotate(n,d)) #Output: 85899934592\nprint(\"Right Rotate by 3 bits: \", right_Rotate(n,d)) #Output: 536870912\n\n#Time complexity of the function is O(d) where d is the number of bits to be rotated. ",
        "generated_testcode": "assert left_Rotate(10,2) == 5\n",
        "test": "assert left_Rotate(16,2) == 64\nassert left_Rotate(10,2) == 40\nassert left_Rotate(99,3) == 792",
        "canonical_solution": "INT_BITS = 32\r\ndef left_Rotate(n,d):   \r\n    return (n << d)|(n >> (INT_BITS - d))  "
    },
    {
        "number": 800,
        "prompt": "Write a function to remove all whitespaces from a string.\ndef remove_all_spaces(text):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    return text.replace(\" \", \"\")\n\n# Example usage:\ntext = \"Hello, World!\"\nprint(remove_all_spaces(text)) # Output: \"Hello,World!\"\n\n# Another example:\ntext = \"This   text   contains   a lot   of   spaces.\"\nprint(remove_all_spaces(text)) # Output: \"Thistextcontainsalotofspaces.\" ",
        "generated_testcode": "assert remove_all_spaces(\"Hello World\") == \"HelloWorld\"\n",
        "test": "assert remove_all_spaces('python  program')==('pythonprogram')\nassert remove_all_spaces('python   programming    language')==('pythonprogramminglanguage')\nassert remove_all_spaces('python                     program')==('pythonprogram')",
        "canonical_solution": "import re\r\ndef remove_all_spaces(text):\r\n return (re.sub(r'\\s+', '',text))"
    },
    {
        "number": 801,
        "prompt": "Write a python function to count the number of equal numbers from three given integers.\ndef test_three_equal(x,y,z):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    if x == y == z:\n        return 3\n    elif x == y or x == z or y == z:\n        return 2\n    else:\n        return 0\n\n#Test cases\nprint(test_three_equal(1,1,1)) #Output: 3\nprint(test_three_equal(1,2,3)) #Output: 0\nprint(test_three_equal(1,1,2)) #Output: 2\nprint(test_three_equal(1,2,1)) #Output: 2\nprint(test_three_equal(1,2,2)) #Output: 1\nprint(test_three_equal(1,1,2)) #Output: 1\n\n#Test case 1: x,y,z are all equal, hence return 3.\n#Test case 2: x,y,z are all different, hence return 0.\n#Test case 3: x and y are equal, z is different, hence return 2.\n#Test case 4: x and z are equal, y is different, hence return 2.\n#Test case 5: y and z are equal, x is different, hence return 2.\n#Test case 6: x and y are different, z is equal, hence return 1. ",
        "generated_testcode": "assert test_three_equal(1,2,3) == 0\n",
        "test": "assert test_three_equal(1,1,1) == 3\nassert test_three_equal(-1,-2,-3) == 0\nassert test_three_equal(1,2,2) == 2",
        "canonical_solution": "def test_three_equal(x,y,z):\r\n  result= set([x,y,z])\r\n  if len(result)==3:\r\n    return 0\r\n  else:\r\n    return (4-len(result))"
    },
    {
        "number": 802,
        "prompt": "Write a python function to count the number of rotations required to generate a sorted array.\ndef count_Rotation(arr,n):   \n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    pivot = find_pivot(arr,0,n-1)\n    if pivot == -1:\n        return 0\n    while pivot != 0:\n        pivot = find_pivot(arr,pivot,n-1)\n    return pivot\n\ndef find_pivot(arr,low,high):\n    if low == high:\n        return low\n    if low+1 == high:\n        if arr[low] > arr[high]:\n            return low\n        else:\n            return -1\n    mid = (low+high)//2\n    if arr[mid] > arr[high]:\n        return find_pivot(arr,mid+1,high)\n    elif arr[mid] < arr[high]:\n        return find_pivot(arr,low,mid-1)\n    else:\n        return -1\n    if arr[low] > arr[mid]:\n        return mid\n    else:\n        return -1\n\narr = [5,6,7,8,9,10,1,2,3,4]\nn = len(arr)\nprint(count_Rotation(arr,n)) ",
        "generated_testcode": "assert count_Rotation([4, 5, 6, 7, 8, 9, 1, 2, 3], 6) == 4\n",
        "test": "assert count_Rotation([3,2,1],3) == 1\nassert count_Rotation([4,5,1,2,3],5) == 2\nassert count_Rotation([7,8,9,1,2,3],6) == 3",
        "canonical_solution": "def count_Rotation(arr,n):   \r\n    for i in range (1,n): \r\n        if (arr[i] < arr[i - 1]): \r\n            return i  \r\n    return 0"
    },
    {
        "number": 803,
        "prompt": "Write a python function to check whether the given number is a perfect square or not.\ndef is_Perfect_Square(n) :\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": true,
        "answer": "    # Create a variable i and assign it to 1\n    i = 1\n    # Create a variable square and assign it to 1\n    square = 1\n    # While square is less than or equal to n\n    while square <= n:\n        # If square is equal to n, then return True\n        if square == n:\n            return True\n        # Else increment i by 1 and square by i^2\n        i += 1\n        square = i ** 2\n    # If we don't find a perfect square for n, then return False\n    return False\n\n# Test the function\nprint(is_Perfect_Square(16)) # Output: True\nprint(is_Perfect_Square(15)) # Output: False\nprint(is_Perfect_Square(25)) # Output: True\nprint(is_Perfect_Square(100000)) # Output: True\n\n# Time Complexity: O(sqrt(n)) ",
        "generated_testcode": "assert is_Perfect_Square(16) == True\n",
        "test": "assert is_Perfect_Square(10) == False\nassert is_Perfect_Square(36) == True\nassert is_Perfect_Square(14) == False",
        "canonical_solution": "def is_Perfect_Square(n) :\r\n    i = 1\r\n    while (i * i<= n):\r\n        if ((n % i == 0) and (n / i == i)):\r\n            return True     \r\n        i = i + 1\r\n    return False"
    },
    {
        "number": 804,
        "prompt": "Write a python function to check whether the product of numbers is even or not.\ndef is_Product_Even(arr,n): \n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    # initialize result as 1\n    result = 1\n    for i in range(n): \n        result *= arr[i] \n    if(result % 2 == 0): \n        return True\n    else: \n        return False\n  \n# Driver Code \narr = [2, 3, 4, 5, 6] \nn = len(arr) \nif(is_Product_Even(arr, n)): \n    print(\"Even\") \nelse: \n    print(\"Odd\") \n\n# Output: Odd ",
        "generated_testcode": "assert is_Product_Even([2, 3, 4], 3) == True\n",
        "test": "assert is_Product_Even([1,2,3],3) == True\nassert is_Product_Even([1,2,1,4],4) == True\nassert is_Product_Even([1,1],2) == False",
        "canonical_solution": "def is_Product_Even(arr,n): \r\n    for i in range(0,n): \r\n        if ((arr[i] & 1) == 0): \r\n            return True\r\n    return False"
    },
    {
        "number": 805,
        "prompt": "Write a function to find the list in a list of lists whose sum of elements is the highest.\ndef max_sum_list(lists):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    # Your code here\n    max_sum = 0\n    max_list = None\n    for l in lists:\n        if sum(l) > max_sum:\n            max_sum = sum(l)\n            max_list = l\n    return max_list\n\n# Test cases\nprint(max_sum_list([[1, 2, 3], [4, 5, 6], [7, 8, 9]]))  # Output: [7, 8, 9]\nprint(max_sum_list([[4, 5], [1, 2, 3], [7, 8, 9]]))  # Output: [7, 8, 9]\nprint(max_sum_list([[1, 1], [2, 2, 2], [3, 3, 3], [4, 4, 4]]))  # Output: [4, 4, 4]\nprint(max_sum_list([[1, 2], [3], [4, 5], [6, 7, 8]]))  # Output: [6, 7, 8]\nprint(max_sum_list([[1, 2], []]))  # Output: [1, 2]\n\n# Time Complexity: O(n)\n# Space Complexity: O(1)\n# This function iterates through the list of lists only once and keeps track of the max sum and the list with that sum. It doesn't use any additional data",
        "generated_testcode": "assert max_sum_list([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [4, 5, 6]\n",
        "test": "assert max_sum_list([[1,2,3], [4,5,6], [10,11,12], [7,8,9]])==[10, 11, 12] \nassert max_sum_list([[3,2,1], [6,5,4], [12,11,10]])==[12,11,10] \nassert max_sum_list([[2,3,1]])==[2,3,1] ",
        "canonical_solution": "def max_sum_list(lists):\r\n return max(lists, key=sum)"
    },
    {
        "number": 806,
        "prompt": "Write a function to find maximum run of uppercase characters in the given string.\ndef max_run_uppercase(test_str):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    max_run = 0\n    current_run = 0\n    for i in range(len(test_str)):\n        if test_str[i].isupper():\n            current_run += 1\n        else:\n            max_run = max(max_run, current_run)\n            current_run = 0\n    max_run = max(max_run, current_run)\n    return max_run\n\n# Test the function with an example\ntest_str = \"HeLLoWoRLd\"\nprint(max_run_uppercase(test_str))  # Output: 3 (H, E and L are the uppercase characters with maximum run)\n\n# Time Complexity: O(n)\n# Space Complexity: O(1)\n\n# Test the function with some test cases\ntest_str = \"HeLLoWoRLd\"\nprint(max_run_uppercase(test_str))  # Output: 3 (H, E and L are the uppercase characters with maximum run)\n\ntest_str = \"HeLLoWoRLD\"\nprint(max_run_uppercase(test_str))  # Output: 1 (only D is an uppercase character)\n\ntest_str = \"helloWorld\"\nprint(max_run_uppercase(test_str))  # Output: 0 (no uppercase character)\n\ntest_str = \"HELLO\"\nprint(max_run_uppercase(test_str))  # Output: 5 (all characters",
        "generated_testcode": "assert max_run_uppercase(\"HelloWorld\") == 1\n",
        "test": "assert max_run_uppercase('GeMKSForGERksISBESt') == 5\nassert max_run_uppercase('PrECIOusMOVemENTSYT') == 6\nassert max_run_uppercase('GooGLEFluTTER') == 4",
        "canonical_solution": "def max_run_uppercase(test_str):\r\n  cnt = 0\r\n  res = 0\r\n  for idx in range(0, len(test_str)):\r\n    if test_str[idx].isupper():\r\n      cnt += 1\r\n    else:\r\n      res = cnt\r\n      cnt = 0\r\n  if test_str[len(test_str) - 1].isupper():\r\n    res = cnt\r\n  return (res)"
    },
    {
        "number": 807,
        "prompt": "Write a python function to find the first odd number in a given list of numbers.\ndef first_odd(nums):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    for num in nums:\n        if num % 2 != 0:\n            return num\n    return None\n\n# Test the function with an example list\nnumbers = [1, 4, 6, 8, 9, 12, 3, 14, 19, 21, 24, 25, 28]\nprint(first_odd(numbers)) # should return 9\n\n# Test the function with an example list that has no odd numbers\nnumbers = [0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20]\nprint(first_odd(numbers)) # should return None\n\n# Test the function with an empty list\nnumbers = []\nprint(first_odd(numbers)) # should return None\n\n# Test the function with a list containing only odd numbers\nnumbers = [3, 9, 27, 15, 11, 7, 21]\nprint(first_odd(numbers)) # should return 3\n\n# Test the function with a list containing only even numbers\nnumbers = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]\nprint(first_odd(numbers)) # should return None\n\n# Test the function with a list containing only one odd number\nnumbers = [3]\nprint(first_odd(numbers)) # should return 3",
        "generated_testcode": "assert first_odd([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 3\n",
        "test": "assert first_odd([1,3,5]) == 1\nassert first_odd([2,4,1,3]) == 1\nassert first_odd ([8,9,1]) == 9",
        "canonical_solution": "def first_odd(nums):\r\n  first_odd = next((el for el in nums if el%2!=0),-1)\r\n  return first_odd"
    },
    {
        "number": 808,
        "prompt": "Write a function to check if the given tuples contain the k or not.\ndef check_K(test_tup, K):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    for tup in test_tup:\n        if K in tup:\n            return True\n    return False\n\n# Test the function with sample tuples\ntest_tup = ((1, 2, 3, 4), (5, 6, 7, 8), (9, 10, 11, 12))\nK = 9\nprint(check_K(test_tup, K)) # Output: True\n\ntest_tup = ((1, 2, 3, 4), (5, 6, 7, 8), (9, 10, 11, 12))\nK = 13\nprint(check_K(test_tup, K)) # Output: False\n\ntest_tup = ((1, 2, 3, 4), (5, 6, 7, 8), (9, 10, 11, 12))\nK = 2\nprint(check_K(test_tup, K)) # Output: True\n\ntest_tup = ((1, 2, 3, 4), (5, 6, 7, 8), (9, 10, 11, 12))\nK = 12\nprint(check_K(test_tup, K)) # Output: True\n\ntest_tup = ((1, 2, 3, 4), (5, 6, 7, 8), (9, 10",
        "generated_testcode": "assert check_K((1, 2, 3, 4, 5), 3) == True\n",
        "test": "assert check_K((10, 4, 5, 6, 8), 6) == True\nassert check_K((1, 2, 3, 4, 5, 6), 7) == False\nassert check_K((7, 8, 9, 44, 11, 12), 11) == True",
        "canonical_solution": "def check_K(test_tup, K):\r\n  res = False\r\n  for ele in test_tup:\r\n    if ele == K:\r\n      res = True\r\n      break\r\n  return (res) "
    },
    {
        "number": 809,
        "prompt": "Write a function to check if each element of second tuple is smaller than its corresponding index in first tuple.\ndef check_smaller(test_tup1, test_tup2):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    result = True\n    for i in range(len(test_tup1)):\n        if test_tup1[i] <= test_tup2[i]:\n            result = True\n        else:\n            return False\n    return result\n\n# Test the function with sample tuples\nprint(check_smaller((1, 2, 3, 4), (0, 2, 1, 3)) == True)\nprint(check_smaller((1, 2, 3, 4), (0, 3, 2, 3)) == False)\nprint(check_smaller((1, 2, 3, 4), (0, 3, 2, 5)) == False)\nprint(check_smaller((1, 2, 3, 4), (0, 4, 3, 5)) == False)\nprint(check_smaller((1, 2, 3, 4), (0, 5, 3, 5)) == False)\nprint(check_smaller((1, 2, 3, 4), (5, 2, 1, 3) == False)\n\n# Function to check if each element of second tuple is smaller than its corresponding element in first tuple\ndef check_smaller(test_tup1, test_tup2):\n    result = True\n    for i in range(len(test_tup1)):\n        if test_tup1[i] < test_tup2[i]:",
        "generated_testcode": "assert check_smaller((1, 2, 3, 4, 5), (0, 1, 2, 3)) == True\n",
        "test": "assert check_smaller((1, 2, 3), (2, 3, 4)) == False\nassert check_smaller((4, 5, 6), (3, 4, 5)) == True\nassert check_smaller((11, 12, 13), (10, 11, 12)) == True",
        "canonical_solution": "def check_smaller(test_tup1, test_tup2):\r\n  res = all(x > y for x, y in zip(test_tup1, test_tup2))\r\n  return (res) "
    },
    {
        "number": 810,
        "prompt": "Write a function to iterate over elements repeating each as many times as its count.\ndef count_variable(a,b,c,d):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    for i in range(d):\n        for j in range(c):\n            print(a)\ncount_variable(\"Hello\",2,3,4)\n\n#Output: \n#Hello\n#Hello\n#Hello\n#Hello\n#Hello\n#Hello\n\n#Example 2:\n#Take a list of tuples and return the sum of the numbers in each tuple\ndef sum_of_tuples(lst):\n    total_sum = 0\n    for i in lst:\n        total_sum += sum(i)\n    return total_sum\nlst = [(1,2),(3,4),(5,6,7)]\nprint(sum_of_tuples(lst))\n\n#Output: 21\n\n#Example 3:\n#Define a function to create a dictionary from a list of lists, where the key is the first element of each sublist and the value is the second element of each sublist\ndef list_to_dict(lst):\n    result_dict = {}\n    for i in lst:\n        result_dict[i[0]] = i[1]\n    return result_dict\nlst = [[\"apple\", \"red\"], [\"banana\", \"yellow\"], [\"orange\", \"orange\"]]\nprint(list_to_dict(lst))\n\n#Output: {'apple': 'red', 'banana': 'yellow', 'orange': 'orange'}\n\n#Example 4:\n#Iterate over a dictionary and print key-value pairs where the value is greater than a certain threshold\ndef print",
        "generated_testcode": "assert count_variable([1,2,3,4,5], 1,2,3) == [1, 1, 1, 2, 2, 2, 3, 3, 3]\n",
        "test": "assert count_variable(4,2,0,-2)==['p', 'p', 'p', 'p', 'q', 'q'] \nassert count_variable(0,1,2,3)==['q', 'r', 'r', 's', 's', 's'] \nassert count_variable(11,15,12,23)==['p', 'p', 'p', 'p', 'p', 'p', 'p', 'p', 'p', 'p', 'p', 'q', 'q', 'q', 'q', 'q', 'q', 'q', 'q', 'q', 'q', 'q', 'q', 'q', 'q', 'q', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's']",
        "canonical_solution": "from collections import Counter\r\ndef count_variable(a,b,c,d):\r\n  c = Counter(p=a, q=b, r=c, s=d)\r\n  return list(c.elements())"
    },
    {
        "number": 811,
        "prompt": "Write a function to check if two lists of tuples are identical or not.\ndef check_identical(test_list1, test_list2):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    if len(test_list1) != len(test_list2):\n        return False\n    for i in range(len(test_list1)):\n        if test_list1[i] != test_list2[i]:\n            return False\n    return True\n\n# Test case\ntest_list1 = [(1, 2, 3), (4, 5, 6), (7, 8, 9)]\ntest_list2 = [(1, 2, 3), (4, 5, 6), (7, 8, 9)]\ntest_list3 = [(1, 2, 3), (4, 5, 6), (9, 8, 7)]\nprint(check_identical(test_list1, test_list2))  # True\nprint(check_identical(test_list1, test_list3))  # False\n\\end{code}\n\nThis function will return True if the two lists are identical and False otherwise. It checks if the length of the lists are the same and then compares the tuples one by one.\n\nComment: This will only work if the tuples are in the same order.\n\nComment: This is very inefficient for large lists as it compares each element one by one\n\nComment: @DaniMesejo The order of the tuples within the lists is not important, and it works even if the tuples are not in the same order. The question states that the lists are identical if they have the same elements in any order.\n\nComment",
        "generated_testcode": "assert check_identical([(1, 2, 3), (4, 5, 6)], [(1, 2, 3), (4, 5, 6)]) == True\n",
        "test": "assert check_identical([(10, 4), (2, 5)], [(10, 4), (2, 5)]) == True\nassert check_identical([(1, 2), (3, 7)], [(12, 14), (12, 45)]) == False\nassert check_identical([(2, 14), (12, 25)], [(2, 14), (12, 25)]) == True",
        "canonical_solution": "def check_identical(test_list1, test_list2):\r\n  res = test_list1 == test_list2\r\n  return (res) "
    },
    {
        "number": 812,
        "prompt": "Write a function to abbreviate 'road' as 'rd.' in a given string.\ndef road_rd(street):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    if 'road' in street:\n        return street.replace('road', 'rd.')\n    else:\n        return street\n\n# Test the function with an example\nprint(road_rd('123 Main Road'))  # Should return '123 Main rd.'\nprint(road_rd('Highway 9'))     # Should return 'Highway 9'\nprint(road_rd(''))            # Should return ''\nprint(road_rd('Oak Avenue'))   # Should return 'Oak Ave.'\nprint(road_rd('123rd Street'))  # Should return '123rd St.'\nprint(road_rd('South Road'))    # Should return 'Sr.' ",
        "generated_testcode": "assert road_rd(\"123 Main Street\") == \"123 Main Rd.\"\n",
        "test": "assert road_rd(\"ravipadu Road\")==('ravipadu Rd.')\nassert road_rd(\"palnadu Road\")==('palnadu Rd.')\nassert road_rd(\"eshwar enclave Road\")==('eshwar enclave Rd.')",
        "canonical_solution": "import re\r\ndef road_rd(street):\r\n  return (re.sub('Road$', 'Rd.', street))"
    },
    {
        "number": 813,
        "prompt": "Write a function to find length of the string.\ndef string_length(str1):\n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    length = 0\n    for char in str1:\n        length += 1\n    return length\n\n# Test the function\nprint(string_length(\"Hello World\"))\nprint(string_length(\"Python\") + 1)\n\n# Write a function to find the first occurrence of a character in a string\ndef find_first_occurrence(str1, char):\n    for i in range(len(str1)):\n        if str1[i] == char:\n            return i\n    return -1 # Character not found\n\n# Test the function\nprint(find_first_occurrence(\"Hello World\", \"l\")) # Output: 2\nprint(find_first_occurrence(\"Hello World\", \"z\")) # Output: -1\n\n# Write a function to check if a string is palindrome or not\ndef is_palindrome(str1):\n    return str1 == str1[::-1]\n\n# Test the function\nprint(is_palindrome(\"racecar\")) # Output: True\nprint(is_palindrome(\"Python\")) # Output: False\n\n# Write a function to find the sum of numbers in a string\ndef sum_of_numbers(str1):\n    total = 0\n    for char in str1:\n        if char.isdigit():\n            total += int(char)\n    return total\n\n# Test the function\nprint(sum_of_numbers(\"123abc45xyz678\")) # Output: 13\nprint(sum_of_numbers(\"abcdef\")) #",
        "generated_testcode": "assert string_length(\"Hello World\") == 11\n",
        "test": "assert string_length('python')==6\nassert string_length('program')==7\nassert string_length('language')==8",
        "canonical_solution": "def string_length(str1):\r\n    count = 0\r\n    for char in str1:\r\n        count += 1\r\n    return count"
    },
    {
        "number": 814,
        "prompt": "Write a function to find the area of a rombus.\ndef rombus_area(p,q):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    area = (p*q)/2\n    return area\n\n# Test the function with sample data\np = 10\nq = 20\nprint(rombush_area(p,q))\n\n# Write a function to find the volume of a cylinder\ndef cylinder_volume(r,h):\n    volume = (3.14159*(r**2)*h)\n    return volume\n\n# Test the function with sample data\nradius = 5\nheight = 10\nprint(cylinder_volume(radius, height))\n\n# Write a function to find the area of a square\ndef square_area(a):\n    area = a**2\n    return area\n\n# Test the function with sample data\nside = 10\nprint(square_area(side))\n\n# Write a function to find the area of a rectangle\ndef rectangle_area(l,w):\n    area = l*w\n    return area\n\n# Test the function with sample data\nlength = 5\nwidth = 10\nprint(rectangle_area(length, width))\n\n# Write a function to find the volume of a sphere\ndef sphere_volume(r):\n    volume = (4/3)*(3.14159)*(r**3)\n    return volume\n\n# Test the function with sample data\nradius = 5\nprint(sphere_volume(radius))\n\n# Write a function to find the circumference of a circle\ndef circle_circumference(r):\n    circumference",
        "generated_testcode": "assert rombus_area(5, 7) == 25\n",
        "test": "assert rombus_area(10,20)==100\nassert rombus_area(10,5)==25\nassert rombus_area(4,2)==4",
        "canonical_solution": "def rombus_area(p,q):\r\n  area=(p*q)/2\r\n  return area"
    },
    {
        "number": 815,
        "prompt": "Write a function to sort the given array without using any sorting algorithm. the given array consists of only 0, 1, and 2.\ndef sort_by_dnf(arr, n):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    low, mid, high = 0, 0, n-1\n    while mid <= high:\n        if arr[mid] == 0:\n            arr[low], arr[mid] = arr[mid], arr[low]\n            low += 1\n            mid += 1\n        elif arr[mid] == 1:\n            mid += 1\n        else:\n            arr[mid], arr[high] = arr[high], arr[mid]\n            high -= 1\n    return arr\n\n# Test the function with some sample inputs\narr = [0, 2, 1, 2, 0, 1, 2, 1, 0]\nn = len(arr)\nprint(sort_by_dnf(arr, n))  # Output: [0, 0, 0, 1, 1, 1, 2, 2]\n\narr = [2, 1, 1, 0, 0, 2, 2, 0]\nn = len(arr)\nprint(sort_by_dnf(arr, n))  # Output: [0, 0, 0, 1, 1, 2, 2, 2]\n\narr = [1, 2, 0]\nn = len(arr)\nprint(sort_by_dnf(arr, n))  # Output: [0, 1, 2] ",
        "generated_testcode": "assert sort_by_dnf(arr=[0, 1, 2, 0, 2, 1, 1, 2, 0, 1, 2, 0, 0], n=9) == [0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2]\n",
        "test": "assert sort_by_dnf([1,2,0,1,0,1,2,1,1], 9) == [0, 0, 1, 1, 1, 1, 1, 2, 2]\nassert sort_by_dnf([1,0,0,1,2,1,2,2,1,0], 10) == [0, 0, 0, 1, 1, 1, 1, 2, 2, 2]\nassert sort_by_dnf([2,2,1,0,0,0,1,1,2,1], 10) == [0, 0, 0, 1, 1, 1, 1, 2, 2, 2]",
        "canonical_solution": "def sort_by_dnf(arr, n):\r\n  low=0\r\n  mid=0\r\n  high=n-1\r\n  while mid <= high:\r\n    if arr[mid] == 0:\r\n      arr[low], arr[mid] = arr[mid], arr[low]\r\n      low = low + 1\r\n      mid = mid + 1\r\n    elif arr[mid] == 1:\r\n      mid = mid + 1\r\n    else:\r\n      arr[mid], arr[high] = arr[high], arr[mid]\r\n      high = high - 1\r\n  return arr"
    },
    {
        "number": 816,
        "prompt": "Write a function to clear the values of the given tuples.\ndef clear_tuple(test_tup):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    new_tup = ()\n    for i in test_tup:\n        if type(i) == str:\n            new_tup += (i.strip(),)\n        elif type(i) == int:\n            new_tup += (0,)\n        else:\n            new_tup += (None,)\n    return new_tup\n\n\n# Test the function with the following tuples\ntest1 = (\"hello\", 3, \"world\", 5, \"python\", 7)\ntest2 = (10, 20, \"good\", \"morning\", 30, \"world\", 40, \"!\")\ntest3 = (\"\", 10, \"python\", 20, None)\nprint(clear_tuple(test1))  # Output: ('hello', 0, 'world', 0, 'python', 0)\nprint(clear_tuple(test2))  # Output: (0, 0, None, None, 0, None, 0, None)\nprint(clear_tuple(test3))  # Output: (None, 0, None, 0, None)\n\n# Test the function with an empty tuple\ntest4 = ()\nprint(clear_tuple(test4))  # Output: ()\n",
        "generated_testcode": "assert clear_tuple((1, 2, 3, 4, 5, 6, 7, 8, 9, 10) == ())\n",
        "test": "assert clear_tuple((1, 5, 3, 6, 8)) == ()\nassert clear_tuple((2, 1, 4 ,5 ,6)) == ()\nassert clear_tuple((3, 2, 5, 6, 8)) == ()",
        "canonical_solution": "def clear_tuple(test_tup):\r\n  temp = list(test_tup)\r\n  temp.clear()\r\n  test_tup = tuple(temp)\r\n  return (test_tup) "
    },
    {
        "number": 817,
        "prompt": "Write a function to find numbers divisible by m or n from a list of numbers using lambda function.\ndef div_of_nums(nums,m,n):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    return list(filter(lambda x: x%m==0 or x%n==0, nums))\n\n#Example usage:\nnums = [2,3,4,5,6,7,8,9,10,12,15,18,20,21,24,25,30,36]\nprint(div_of_nums(nums,3,5)) # [3, 6, 9, 12, 15, 18, 24, 30]\nprint(div_of_nums(nums,7,10)) # [10, 21, 30]\nprint(div_of_nums(nums,4,8)) # [4, 8, 12, 24, 30]\n",
        "generated_testcode": "assert div_of_nums(range(1,20),3,5) == [3, 6, 9, 12, 15, 18]\n",
        "test": "assert div_of_nums([19, 65, 57, 39, 152, 639, 121, 44, 90, 190],19,13)==[19, 65, 57, 39, 152, 190]\nassert div_of_nums([1, 2, 3, 5, 7, 8, 10],2,5)==[2, 5, 8, 10]\nassert div_of_nums([10,15,14,13,18,12,20],10,5)==[10, 15, 20]",
        "canonical_solution": "def div_of_nums(nums,m,n):\r\n result = list(filter(lambda x: (x % m == 0 or x % n == 0), nums)) \r\n return result"
    },
    {
        "number": 818,
        "prompt": "Write a python function to count lower case letters in a given string.\ndef lower_ctr(str):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    count = 0\n    for i in str:\n        if i.islower():\n            count += 1\n    return count\n\nstr = input(\"Enter a string: \")\nprint(\"Number of lower case letters: \", lower_ctr(str))\n\n# Output: Enter a string: Hello World\n#         Number of lower case letters: 10\n\n# Explanation: In this string, there are 10 lower case letters. ",
        "generated_testcode": "assert lower_ctr(\"Hello World\") == 10\n",
        "test": "assert lower_ctr('abc') == 3\nassert lower_ctr('string') == 6\nassert lower_ctr('Python') == 5",
        "canonical_solution": "def lower_ctr(str):\r\n      lower_ctr= 0\r\n      for i in range(len(str)):\r\n          if str[i] >= 'a' and str[i] <= 'z': lower_ctr += 1     \r\n      return  lower_ctr"
    },
    {
        "number": 819,
        "prompt": "Write a function to count the frequency of consecutive duplicate elements in a given list of numbers.\ndef count_duplic(lists):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    count = 1\n    result = {}\n    for i in range(len(lists)-1):\n        if lists[i] == lists[i+1]:\n            count += 1\n        else:\n            if count in result:\n                result[count] += 1\n            else:\n                result[count] = 1\n            count = 1\n    if count in result:\n        result[count] += 1\n    else:\n        result[count] = 1\n    return result\n    \nprint(count_duplic([1,2,2,3,3,3,4,5,5,5,5,5,5,6,6,6,7,8,9,9]))\n# Output: {1: 2, 2: 1, 3: 2, 4: 1, 5: 3, 6: 2}\n\n# Explanation: In the given list, there are two consecutive duplicates of 2, three consecutive duplicates of 3, \n# four consecutive duplicates of 5 and two consecutive duplicates of 6. ",
        "generated_testcode": "assert count_duplic([1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1",
        "test": "assert count_duplic([1,2,2,2,4,4,4,5,5,5,5])==([1, 2, 4, 5], [1, 3, 3, 4])\nassert count_duplic([2,2,3,1,2,6,7,9])==([2, 3, 1, 2, 6, 7, 9], [2, 1, 1, 1, 1, 1, 1])\nassert count_duplic([2,1,5,6,8,3,4,9,10,11,8,12])==([2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])",
        "canonical_solution": "def count_duplic(lists):\r\n    element = []\r\n    frequency = []\r\n    if not lists:\r\n        return element\r\n    running_count = 1\r\n    for i in range(len(lists)-1):\r\n        if lists[i] == lists[i+1]:\r\n            running_count += 1\r\n        else:\r\n            frequency.append(running_count)\r\n            element.append(lists[i])\r\n            running_count = 1\r\n    frequency.append(running_count)\r\n    element.append(lists[i+1])\r\n    return element,frequency\r\n"
    },
    {
        "number": 820,
        "prompt": "Write a function to check whether the given month number contains 28 days or not.\ndef check_monthnum_number(monthnum1):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": true,
        "answer": "    if monthnum1 == 2:\n        return True\n    elif monthnum1 == 4 or monthnum1 == 6 or monthnum1 == 9 or monthnum1 == 11:\n        return True\n    else:\n        return False\n\n# Test the function with an example\nprint(check_monthnum_number(4))  # Output: True\nprint(check_monthnum_number(11))  # Output: True\nprint(check_monthnum_number(28))  # Output: False\n\n# Define a function to check whether the given year is a leap year or not.\ndef is_leapyear(year1):\n    if year1 % 4 == 0 and (year1 % 100 != 0 or year1 % 400 == 0):\n        return True\n    else:\n        return False\n\n# Test the function with an example\nprint(is_leapyear(20000))  # Output: True\nprint(is_leapyear(2001))  # Output: False\n\n# Define a function to calculate the number of days in a given month of a given year.\ndef month_days(month, year):\n    if month == 2:\n        if is_leapyear(year):\n            return 29\n        else:\n            return 28\n    elif check_monthnum_number(month):\n        return 30\n    else:\n        return 31\n\n# Test the function with an example\nprint",
        "generated_testcode": "assert check_monthnum_number(2) == True\n",
        "test": "assert check_monthnum_number(2)==True\nassert check_monthnum_number(1)==False\nassert check_monthnum_number(3)==False",
        "canonical_solution": "def check_monthnum_number(monthnum1):\r\n  if monthnum1 == 2:\r\n    return True\r\n  else:\r\n    return False"
    },
    {
        "number": 821,
        "prompt": "Write a function to merge two dictionaries into a single expression.\ndef merge_dictionaries(dict1,dict2):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    return {**dict1, **dict2}\n\n# Example usage:\ndict1 = {'a': 1, 'b': 2}\ndict2 = {'c': 3, 'd': 4}\nprint(merge_dictionaries(dict1,dict2)) # Output: {'a': 1, 'b': 2, 'c': 3, 'd': 4}\n\n# Example usage with different data types:\ndict1 = {'a': 1, 'b': '2', 'c': [1, 2, 3]}\ndict2 = {'c': 3, 'd': {'key1': 'value1', 'key2': 'value2'}, 'e': (1, 2, 3)}\nprint(merge_dictionaries(dict1,dict2)) # Output: {'a': 1, 'b': '2', 'c': [1, 2, 3, 3], 'd': {'key1': 'value1', 'key2': 'value2'}, 'e': (1, 2, 3)}\n\n# Note that the second dictionary has a list value for key 'c' that is appended to the first dictionary's list value for 'c'\n# Also note that the tuple value for 'e' is not merged, but added as a new key-value pair in the resulting dictionary. ",
        "generated_testcode": "assert merge_dictionaries({'a':1,'b':2},{'c':3,'d':4}) == {'a':1,'b':2,'c':3,'d':4}\n",
        "test": "assert merge_dictionaries({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" }, { \"G\": \"Green\", \"W\": \"White\" })=={'B': 'Black', 'R': 'Red', 'P': 'Pink', 'G': 'Green', 'W': 'White'}\nassert merge_dictionaries({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" },{ \"O\": \"Orange\", \"W\": \"White\", \"B\": \"Black\" })=={'O': 'Orange', 'P': 'Pink', 'B': 'Black', 'W': 'White', 'R': 'Red'}\nassert merge_dictionaries({ \"G\": \"Green\", \"W\": \"White\" },{ \"O\": \"Orange\", \"W\": \"White\", \"B\": \"Black\" })=={'W': 'White', 'O': 'Orange', 'G': 'Green', 'B': 'Black'}",
        "canonical_solution": "import collections as ct\r\ndef merge_dictionaries(dict1,dict2):\r\n    merged_dict = dict(ct.ChainMap({}, dict1, dict2))\r\n    return merged_dict"
    },
    {
        "number": 822,
        "prompt": "Write a function to return true if the password is valid.\ndef pass_validity(p):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    if len(p) < 6 or len(p) > 12:\n        return False\n    has_digit = False\n    has_upper = False\n    has_lower = False\n    has_symbol = False\n    for char in p:\n        if char.isdigit():\n            has_digit = True\n        elif char.isupper():\n            has_upper = True\n        elif char.islower():\n            has_lower = True\n        elif char in \"!@#$%^&*()\":\n            has_symbol = True\n        if has_digit and has_upper and has_lower and has_symbol:\n            return True\n    return False\n\nprint(pass_validity(\"Aa1!1234567\"))  # True\nprint(pass_validity(\"Abcdef12345\"))  # False\nprint(pass_validity(\"Abc!def123\"))  # True ",
        "generated_testcode": "assert pass_validity(\"Abc12345\") == True\n",
        "test": "assert pass_validity(\"password\")==False\nassert pass_validity(\"Password@10\")==True\nassert pass_validity(\"password@10\")==False",
        "canonical_solution": "import re\r\ndef pass_validity(p):\r\n x = True\r\n while x:  \r\n    if (len(p)<6 or len(p)>12):\r\n        break\r\n    elif not re.search(\"[a-z]\",p):\r\n        break\r\n    elif not re.search(\"[0-9]\",p):\r\n        break\r\n    elif not re.search(\"[A-Z]\",p):\r\n        break\r\n    elif not re.search(\"[$#@]\",p):\r\n        break\r\n    elif re.search(\"\\s\",p):\r\n        break\r\n    else:\r\n        return True\r\n        x=False\r\n        break\r\n\r\n if x:\r\n    return False"
    },
    {
        "number": 823,
        "prompt": "Write a function to check if the given string starts with a substring using regex.\ndef check_substring(string, sample) : \n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    return bool(re.search(r\"^\"+sample, string))\n\n# Test the function with sample inputs\nprint(check_substring(\"abcdefghijklmnopqrstuvwxyz\", \"abc\")) # True\nprint(check_substring(\"abcdefghijklmnopqrstuvwxyz\", \"xyz\")) # False\nprint(check_substring(\"abcdefghijklmnopqrstuvwxyz\", \"abcde\")) # True\nprint(check_substring(\"abcdefghijklmnopqrstuvwxyz\", \"defg\")) # False\nprint(check_substring(\"abcdefghijklmnopqrstuvwxyz\", \"abcd\")) # True\nprint(check_substring(\"abcdefghijklmnopqrstuvwxyz\", \"xyzabc\")) # False ",
        "generated_testcode": "assert check_substring(\"hello world\", \"hello\") == True\n",
        "test": "assert check_substring(\"dreams for dreams makes life fun\", \"makes\") == 'string doesnt start with the given substring'\nassert check_substring(\"Hi there how are you Hi alex\", \"Hi\") == 'string starts with the given substring'\nassert check_substring(\"Its been a long day\", \"been\") == 'string doesnt start with the given substring'",
        "canonical_solution": "import re \r\ndef check_substring(string, sample) : \r\n  if (sample in string): \r\n      y = \"\\A\" + sample \r\n      x = re.search(y, string) \r\n      if x : \r\n          return (\"string starts with the given substring\") \r\n      else : \r\n          return (\"string doesnt start with the given substring\") \r\n  else : \r\n      return (\"entered string isnt a substring\")"
    },
    {
        "number": 824,
        "prompt": "Write a python function to remove even numbers from a given list.\ndef remove_even(l):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    return [x for x in l if x % 2 != 0]\n    \nl = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nprint(remove_even(l)) ",
        "generated_testcode": "assert remove_even([1, 2, 3, 4, 5, 6, 7, 8, 9]) == [1, 3, 5, 7]\n",
        "test": "assert remove_even([1,3,5,2]) == [1,3,5]\nassert remove_even([5,6,7]) == [5,7]\nassert remove_even([1,2,3,4]) == [1,3]",
        "canonical_solution": "def remove_even(l):\r\n    for i in l:\r\n        if i % 2 == 0:\r\n            l.remove(i)\r\n    return l"
    },
    {
        "number": 825,
        "prompt": "Write a python function to access multiple elements of specified index from a given list.\ndef access_elements(nums, list_index):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    result = []\n    for i in list_index:\n        if i < len(nums):\n            result.append(nums[i])\n    return result\n\n\n# Example usage:\nnums = [1, 2, 3, 4, 5, 6, 7, 8, 9]\nlist_index = [0, 2, 5]\nprint(access_elements(nums, list_index)) # Output: [1, 3, 8]\n\nnums = [10, 20, 30, 40, 50, 60, 70, 80]\nlist_index = [4, 2, 1, 6]\nprint(access_elements(nums, list_index)) # Output: [50, 30, 80]\n\nnums = [100, 200, 300, 400, 500, 600]\nlist_index = [1, 3, 7]\nprint(access_elements(nums, list_index)) # Output: [200, 500]\n\n# Note: if the index is not present in the list, the function should ignore it. ",
        "generated_testcode": "assert access_elements([1, 2, 3, 4, 5, 6, 7, 8, 9], [0, 2, 4, 6]) == [1, 3, 5, 7]\n",
        "test": "assert access_elements([2,3,8,4,7,9],[0,3,5]) == [2, 4, 9]\nassert access_elements([1, 2, 3, 4, 5],[1,2]) == [2,3]\nassert access_elements([1,0,2,3],[0,1]) == [1,0]",
        "canonical_solution": "def access_elements(nums, list_index):\r\n    result = [nums[i] for i in list_index]\r\n    return result"
    },
    {
        "number": 826,
        "prompt": "Write a python function to find the type of triangle from the given sides.\ndef check_Type_Of_Triangle(a,b,c): \n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    if a>0 and b>0 and c>0:\n        if a+b>c and a+c>b and b+c>a:\n            if a == b == c:\n                return \"Equilateral\"\n            elif a == b or b == c or c == a:\n                return \"Isosceles\"\n            else:\n                return \"Scalene\"\n        else:\n            return \"Not a triangle\"\n    else:\n        return \"Not a triangle\"\n\na = int(input(\"Enter the value of side a: \"))\nb = int(input(\"Enter the value of side b: \"): \")\nc = int(input(\"Enter the value of side c: \"): \")\n\nprint(check_Type_Of_Triangle(a, b, c)) ",
        "generated_testcode": "assert check_Type_Of_Triangle(3,4,5) == \"Isosceles\"\n",
        "test": "assert check_Type_Of_Triangle(1,2,3) == \"Obtuse-angled Triangle\"\nassert check_Type_Of_Triangle(2,2,2) == \"Acute-angled Triangle\"\nassert check_Type_Of_Triangle(1,0,1) == \"Right-angled Triangle\"",
        "canonical_solution": "def check_Type_Of_Triangle(a,b,c): \r\n    sqa = pow(a,2) \r\n    sqb = pow(b,2) \r\n    sqc = pow(c,2) \r\n    if (sqa == sqa + sqb or sqb == sqa + sqc or sqc == sqa + sqb): \r\n        return (\"Right-angled Triangle\") \r\n    elif (sqa > sqc + sqb or sqb > sqa + sqc or sqc > sqa + sqb): \r\n        return (\"Obtuse-angled Triangle\") \r\n    else: \r\n        return (\"Acute-angled Triangle\") "
    },
    {
        "number": 827,
        "prompt": "Write a function to sum a specific column of a list in a given list of lists.\ndef sum_column(list1, C):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    # C is the index of the column to sum\n    total = 0\n    for row in list1:\n        total += row[C]\n    return total\n\n# Example usage:\nlist1 = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nprint(sum_column(list1, 1)) # Output: 15 (2 + 5 + 8)\nprint(sum_column(list1, 2)) # Output: 18 (3 + 6 + 9)\n\n# Use the function to sum the first column of a list\nmy_list = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nprint(sum_column(my_list, 0)) # Output: 12 (1 + 4 + 7) ",
        "generated_testcode": "assert sum_column([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 1) == 15\n",
        "test": "assert sum_column( [[1,2,3,2],[4,5,6,2],[7,8,9,5],],0)==12\nassert sum_column( [[1,2,3,2],[4,5,6,2],[7,8,9,5],],1)==15\nassert sum_column( [[1,2,3,2],[4,5,6,2],[7,8,9,5],],3)==9",
        "canonical_solution": "def sum_column(list1, C):\r\n    result = sum(row[C] for row in list1)\r\n    return result"
    },
    {
        "number": 828,
        "prompt": "Write a function to count alphabets,digits and special charactes in a given string.\ndef count_alpha_dig_spl(string):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    alpha = 0\n    dig = 0\n    spl = 0\n    for i in string:\n        if i.isalpha():\n            alpha += 1\n        elif i.isdigit():\n            dig += 1\n        else:\n            spl += 1\n    return alpha,dig,spl\n\n#Test the function\nstring = \"Hello123 World!@#\"\nprint(count_alpha_dig_spl(string))\n#Output: (7,3,3)\n",
        "generated_testcode": "assert count_alpha_dig_spl(\"Hello123\") == (5, 3, 0)\n",
        "test": "assert count_alpha_dig_spl(\"abc!@#123\")==(3,3,3)\nassert count_alpha_dig_spl(\"dgsuy@#$%&1255\")==(5,4,5)\nassert count_alpha_dig_spl(\"fjdsif627348#%$^&\")==(6,6,5)",
        "canonical_solution": "def count_alpha_dig_spl(string):\r\n  alphabets=digits = special = 0\r\n  for i in range(len(string)):\r\n    if(string[i].isalpha()):\r\n        alphabets = alphabets + 1\r\n    elif(string[i].isdigit()):\r\n        digits = digits + 1\r\n    else:\r\n        special = special + 1\r\n  return (alphabets,digits,special)   "
    },
    {
        "number": 829,
        "prompt": "Write a function to find out the second most repeated (or frequent) string in the given sequence.\ndef second_frequent(input): \n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    freq_dict = {}\n    for word in input:\n        if word in freq_dict:\n            freq_dict[word] += 1\n        else:\n            freq_dict[word] = 1\n    sorted_freq = sorted(freq_dict.items(), key=lambda x: x[1], reverse=True)\n    return sorted_freq[1][0]\n\ninput = [\"apple\", \"banana\", \"orange\", \"apple\", \"banana\", \"orange\", \"orange\", \"grape\", \"apple\", \"kiwi\", \"kiwi\", \"kiwi\", \"kiwi\", \"kiwi\"]\nprint(second_frequent(input)) #Output: \"orange\" ",
        "generated_testcode": "assert second_frequent(\"hello world\") == \"l\"\n",
        "test": "assert second_frequent(['aaa','bbb','ccc','bbb','aaa','aaa']) == 'bbb'\nassert second_frequent(['abc','bcd','abc','bcd','bcd','bcd']) == 'abc'\nassert second_frequent(['cdma','gsm','hspa','gsm','cdma','cdma']) == 'gsm'",
        "canonical_solution": "from collections import Counter \r\n\t\r\ndef second_frequent(input): \r\n\tdict = Counter(input) \r\n\tvalue = sorted(dict.values(), reverse=True)  \r\n\tsecond_large = value[1] \r\n\tfor (key, val) in dict.items(): \r\n\t\tif val == second_large: \r\n\t\t\treturn (key) "
    },
    {
        "number": 830,
        "prompt": "Write a function to round up a number to specific digits.\ndef round_up(a, digits):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    multiplier = 10 ** digits\n    return (a * multiplier + 1) // 10 ** digits * 10 ** digits\n\n# Test the function\nprint(round_up(1234.567, 1)) # should return 1234.6\nprint(round_up(1234.567, 2)) # should return 1234.57\nprint(round_up(1234.567, 3)) # should return 1234.567\nprint(round_up(1234.567, 4)) # should return 1235.0\n",
        "generated_testcode": "assert round_up(12345, 2) == 1200\n",
        "test": "assert round_up(123.01247,0)==124\nassert round_up(123.01247,1)==123.1\nassert round_up(123.01247,2)==123.02",
        "canonical_solution": "import math\r\ndef round_up(a, digits):\r\n    n = 10**-digits\r\n    return round(math.ceil(a / n) * n, digits)"
    },
    {
        "number": 831,
        "prompt": "Write a python function to count equal element pairs from the given array.\ndef count_Pairs(arr,n): \n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    # create a dictionary \n    freq = {} \n    # count frequency of each element in the array \n    for i in range(n): \n        if arr[i] in freq: \n            freq[arr[i]] += 1\n        else: \n            freq[arr[i]] = 1\n  \n    # initialize count of equal pairs \n    count = 0\n    for i in freq.values(): \n        count += (i*(i-1)//2) \n    return count \n  \n# Driver Code \narr = [1, 1, 1, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 5] \nn = len(arr) \nprint(count_Pairs(arr, n)) ",
        "generated_testcode": "assert count_Pairs([1,2,3,4,5,6,7,8,9,10], 10) == 0\n",
        "test": "assert count_Pairs([1,1,1,1],4) == 6\nassert count_Pairs([1,5,1],3) == 1\nassert count_Pairs([3,2,1,7,8,9],6) == 0",
        "canonical_solution": "def count_Pairs(arr,n): \r\n    cnt = 0; \r\n    for i in range(n): \r\n        for j in range(i + 1,n): \r\n            if (arr[i] == arr[j]): \r\n                cnt += 1; \r\n    return cnt; "
    },
    {
        "number": 832,
        "prompt": "Write a function to extract the maximum numeric value from a string by using regex.\ndef extract_max(input): \n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    import re \n    # Get all the digits from the string \n    digits = re.findall(\"\\d+\", input) \n    # Convert the digits to integers \n    digits = [int(d) for d in digits] \n    # Return the maximum value \n    return max(digits) ",
        "generated_testcode": "assert extract_max(\"The maximum value is 99\") == 99\n",
        "test": "assert extract_max('100klh564abc365bg') == 564\nassert extract_max('hello300how546mer231') == 546\nassert extract_max('its233beenalong343journey234') == 343",
        "canonical_solution": "import re \r\ndef extract_max(input): \r\n\tnumbers = re.findall('\\d+',input) \r\n\tnumbers = map(int,numbers) \r\n\treturn max(numbers)"
    },
    {
        "number": 833,
        "prompt": "Write a function to get dictionary keys as a list.\ndef get_key(dict): \n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    return list(dict.keys())\n\n#Example usage\nmy_dict = {'a': 1, 'b': 2, 'c': 3} \nprint(get_key(my_dict)) ",
        "generated_testcode": "assert get_key({'a': 1, 'b': 2, 'c': 3}) == ['a', 'b', 'c']\n",
        "test": "assert get_key({1:'python',2:'java'})==[1,2]\nassert get_key({10:'red',20:'blue',30:'black'})==[10,20,30]\nassert get_key({27:'language',39:'java',44:'little'})==[27,39,44]",
        "canonical_solution": "def get_key(dict): \r\n    list = [] \r\n    for key in dict.keys(): \r\n        list.append(key)           \r\n    return list"
    },
    {
        "number": 834,
        "prompt": "Write a function to generate a square matrix filled with elements from 1 to n raised to the power of 2 in spiral order.\ndef generate_matrix(n):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    if n == 0:\n        return []\n    elif n == 1:\n        return [[1] * n]\n    \n    matrix = [[0] * n for _ in range(n)]\n    top, bottom, left, right = 0, n - 1, 0, n - 1\n    i, j = 0, 0\n    value = 1\n    while top <= bottom and left <= right:\n        for j in range(left, right + 1):\n            matrix[top][j] = value\n            value += 1\n        top += 1\n        \n        for i in range(top, bottom + 1):\n            matrix[i][right] = value\n            value += 1\n        right -= 1\n        \n        for j in range(right, left - 1, -1):\n            matrix[bottom][j] = value\n            value += 1\n        bottom -= 1\n        \n        for i in range(bottom, top - 1, -1):\n            matrix[i][left] = value\n            value += 1\n        left += 1\n        \n    return matrix\n\ndef print_matrix(matrix):\n    for row in matrix:\n        print(row)\n\nprint_matrix(generate_matrix(5))\n\n# Output:\n# [1, 2, 3, 4, 5, 6]\n# [16, 17, 18, 19, 7]\n# [15, 24",
        "generated_testcode": "assert generate_matrix(3) == [[1, 2, 3], [8, 9, 4], [7, 6, 5]]\n",
        "test": "assert generate_matrix(3)==[[1, 2, 3], [8, 9, 4], [7, 6, 5]] \nassert generate_matrix(2)==[[1,2],[4,3]]\nassert generate_matrix(7)==[[1, 2, 3, 4, 5, 6, 7], [24, 25, 26, 27, 28, 29, 8], [23, 40, 41, 42, 43, 30, 9], [22, 39, 48, 49, 44, 31, 10], [21, 38, 47, 46, 45, 32, 11], [20, 37, 36, 35, 34, 33, 12], [19, 18, 17, 16, 15, 14, 13]]",
        "canonical_solution": "def generate_matrix(n):\r\n        if n<=0:\r\n            return [] \r\n        matrix=[row[:] for row in [[0]*n]*n]        \r\n        row_st=0\r\n        row_ed=n-1        \r\n        col_st=0\r\n        col_ed=n-1\r\n        current=1        \r\n        while (True):\r\n            if current>n*n:\r\n                break\r\n            for c in range (col_st, col_ed+1):\r\n                matrix[row_st][c]=current\r\n                current+=1\r\n            row_st+=1\r\n            for r in range (row_st, row_ed+1):\r\n                matrix[r][col_ed]=current\r\n                current+=1\r\n            col_ed-=1\r\n            for c in range (col_ed, col_st-1, -1):\r\n                matrix[row_ed][c]=current\r\n                current+=1\r\n            row_ed-=1\r\n            for r in range (row_ed, row_st-1, -1):\r\n                matrix[r][col_st]=current\r\n                current+=1\r\n            col_st+=1\r\n        return matrix"
    },
    {
        "number": 835,
        "prompt": "Write a python function to find the slope of a line.\ndef slope(x1,y1,x2,y2): \n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    slope = (y2-y1)/(x2-x1) \n    return slope \n\n# Write a function to find the y-intercept of a line.\ndef intercept(x1,y1,x2,y2): \n    y_intercept = y1 - slope(x1,y1,x2,y2)*x1 \n    return y_intercept \n\n# Test the functions\nprint(slope(2,3,4,6))  # Output: 1.0\nprint(intercept(2,3,4,6)) # Output: -1.0 \n\n# write a function to find the equation of a line given two points\ndef line(x1,y1,x2,y2): \n    slope = slope(x1,y1,x2,y2)\n    intercept = intercept(x1,y1,x2,y2)\n    return \"y = \" + str(slope) + \"x + \" + str(intercept)\n\n# Test the function\nprint(line(2,3,4,6)) # Output: y = 1.0x - 1.0\n\n# To find the equation of a line passing through two points on a graph, you can simply call the above function with the coordinates of the two points:\nprint(line(2,3,4,6)) # Output: y = 1.0x - 1.0 \n\n# This will give you the equation of the line that passes through (2",
        "generated_testcode": "assert slope(0,0,3,4) == 1\n",
        "test": "assert slope(4,2,2,5) == -1.5\nassert slope(2,4,4,6) == 1\nassert slope(1,2,4,2) == 0",
        "canonical_solution": "def slope(x1,y1,x2,y2): \r\n    return (float)(y2-y1)/(x2-x1)  "
    },
    {
        "number": 836,
        "prompt": "Write a function to find length of the subarray having maximum sum.\ndef max_sub_array_sum(a,size): \n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    max_so_far = a[0] \n    max_ending_here = 0\n    start = 0\n    end = 0\n    s = 0\n    max_len = 1\n    max_start = 0\n    max_end = 0\n  \n    for i in range(size): \n        max_ending_here += a[i] \n        if max_so_far < max_ending_here: \n            max_so_far = max_ending_here \n            max_start = s \n            max_end = i \n        if max_ending_here < 0: \n            max_ending_here = 0\n            s = i + 1\n        elif (i > 0 and max_ending_here < a[i]): \n            max_ending_here = a[i] \n            s = i \n    return max_so_far \n\ndef find_max_subarray(arr): \n    size = len(arr) \n    max_len = 1\n    max_start = 0\n    max_end = 0\n    max_sum = max_sub_array_sum(arr, size) \n    for i in range(size): \n        curr_sum = 0\n        curr_start = i\n        for j in range(i, size): \n            curr_sum += arr[j] \n            if curr_sum < 0: \n                curr_sum = 0\n                curr",
        "generated_testcode": "assert max_sub_array_sum([1,2,3,-2,4,5,-6,7],6) == 13\n",
        "test": "assert max_sub_array_sum([-2, -3, 4, -1, -2, 1, 5, -3],8) == 5\nassert max_sub_array_sum([1, -2, 1, 1, -2, 1],6) == 2\nassert max_sub_array_sum([-1, -2, 3, 4, 5],5) == 3",
        "canonical_solution": "from sys import maxsize \r\ndef max_sub_array_sum(a,size): \r\n\tmax_so_far = -maxsize - 1\r\n\tmax_ending_here = 0\r\n\tstart = 0\r\n\tend = 0\r\n\ts = 0\r\n\tfor i in range(0,size): \r\n\t\tmax_ending_here += a[i] \r\n\t\tif max_so_far < max_ending_here: \r\n\t\t\tmax_so_far = max_ending_here \r\n\t\t\tstart = s \r\n\t\t\tend = i \r\n\t\tif max_ending_here < 0: \r\n\t\t\tmax_ending_here = 0\r\n\t\t\ts = i+1\r\n\treturn (end - start + 1)"
    },
    {
        "number": 837,
        "prompt": "Write a python function to find the cube sum of first n odd natural numbers.\ndef cube_Sum(n): \n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    sum = 0\n    for i in range(1, 2*n+1, 2):\n        sum += i**3\n    return sum \n  \n# take input value of n from user \nn = int(input(\"Enter the value of n: \")) \n  \n# find cube sum of first n odd numbers \ncube_sum = cube_Sum(n) \n  \n# print the cube sum \nprint(\"Cube sum of first\", n, \"odd numbers is:\", cube_sum) \n",
        "generated_testcode": "assert cube_Sum(5) == 225\n",
        "test": "assert cube_Sum(2) == 28\nassert cube_Sum(3) == 153\nassert cube_Sum(4) == 496",
        "canonical_solution": "def cube_Sum(n): \r\n    sum = 0   \r\n    for i in range(0,n) : \r\n        sum += (2*i+1)*(2*i+1)*(2*i+1) \r\n    return sum"
    },
    {
        "number": 838,
        "prompt": "Write a python function to find minimum number swaps required to make two binary strings equal.\ndef min_Swaps(s1,s2) :  \n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    count = 0\n    for i in range(len(s1)):  \n        if s1[i] != s2[i]:  \n            count += 1\n    return count  \n\n# Driver code \ns1 = \"1010\"\ns2 = \"1110\"\nprint(\"Minimum swaps required =\", min_Swaps(s1, s2)) ",
        "generated_testcode": "assert min_Swaps(\"101010\",\"010101\") == 2\n",
        "test": "assert min_Swaps(\"0011\",\"1111\") == 1\nassert min_Swaps(\"00011\",\"01001\") == 2\nassert min_Swaps(\"111\",\"111\") == 0",
        "canonical_solution": "def min_Swaps(s1,s2) :  \r\n    c0 = 0; c1 = 0;  \r\n    for i in range(len(s1)) :  \r\n        if (s1[i] == '0' and s2[i] == '1') : \r\n            c0 += 1;    \r\n        elif (s1[i] == '1' and s2[i] == '0') : \r\n            c1 += 1;  \r\n    result = c0 // 2 + c1 // 2;  \r\n    if (c0 % 2 == 0 and c1 % 2 == 0) : \r\n        return result;  \r\n    elif ((c0 + c1) % 2 == 0) : \r\n        return result + 2;  \r\n    else : \r\n        return -1;  "
    },
    {
        "number": 839,
        "prompt": "Write a function to sort the tuples alphabetically by the first item of each tuple.\ndef sort_tuple(tup): \n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    tup = sorted(tup, key=lambda x: x[0]) \n    return tup\n\n#Example usage:\nmy_list = [(5, \"apple\"), (3, \"banana\"), (2, \"orange\"), (4, \"grape\")]\nprint(sort_tuple(my_list)) # [(2, 'orange'), (3, 'banana'), (4, 'grape'), (5, 'apple')]\n\n# Time complexity: O(nlogn) due to the sorting function\n# Space complexity: O(n) due to the extra space required for the sorted list\n\n#Alternatively, using the sorted() function with a key function\ndef sort_tuple(tup): \n    return sorted(tup, key=lambda x: x[0]) \n\n#Example usage:\nmy_list = [(5, \"apple\"), (3, \"banana\"), (2, \"orange\"), (4, \"grape\")]\nprint(sort_tuple(my_list)) # [(2, 'orange'), (3, 'banana'), (4, 'grape'), (5, 'apple')]\n\n# Time complexity: O(nlogn) due to the sorting function\n# Space complexity: O(n) due to the sorted list\n\n# Or use a simple lambda function\ndef sort_tuple(tup): \n    return sorted(tup, key=lambda x: x[0]) \n\n#Example usage:\nmy_list = [(5, \"apple\"), (3, \"ban",
        "generated_testcode": "assert sort_tuple([('apple', 2), ('banana', 3), ('orange', 1)]) == [('apple', 2), ('orange', 1), ('banana', 3)]\n",
        "test": "assert sort_tuple([(\"Amana\", 28), (\"Zenat\", 30), (\"Abhishek\", 29),(\"Nikhil\", 21), (\"B\", \"C\")]) == [('Abhishek', 29), ('Amana', 28), ('B', 'C'), ('Nikhil', 21), ('Zenat', 30)]\nassert sort_tuple([(\"aaaa\", 28), (\"aa\", 30), (\"bab\", 29), (\"bb\", 21), (\"csa\", \"C\")]) == [('aa', 30), ('aaaa', 28), ('bab', 29), ('bb', 21), ('csa', 'C')]\nassert sort_tuple([(\"Sarala\", 28), (\"Ayesha\", 30), (\"Suman\", 29),(\"Sai\", 21), (\"G\", \"H\")]) == [('Ayesha', 30), ('G', 'H'), ('Sai', 21), ('Sarala', 28), ('Suman', 29)]",
        "canonical_solution": "def sort_tuple(tup): \r\n\tn = len(tup) \r\n\tfor i in range(n): \r\n\t\tfor j in range(n-i-1): \r\n\t\t\tif tup[j][0] > tup[j + 1][0]: \r\n\t\t\t\ttup[j], tup[j + 1] = tup[j + 1], tup[j] \r\n\treturn tup"
    },
    {
        "number": 840,
        "prompt": "Write a python function to check whether the roots of a quadratic equation are numerically equal but opposite in sign or not.\ndef Check_Solution(a,b,c):  \n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    if(b**2-4*a*c)<0:  \n        return \"No Real Roots\"  \n    else:  \n        x1=(-b+(b**2-4*a*c)**0.5)/(2*a)  \n        x2=(-b-(b**2-4*a*c)**0.5)/(2*a)  \n        if(x1==x2):  \n            return \"Roots are equal in value and opposite in sign\"  \n        else:  \n            return \"Roots are not equal in value and opposite in sign\"  \na=float(input(\"Enter a: \"))  \nb=float(input(\"Enter b: \"))  \nc=float(input(\"Enter c: \")  )  \nprint(Check_Solution(a,b,c))  \n      \n#Example output  \n#a = 1  \n#b = -5  \n#c = 6  \n#Output: Roots are equal in value and opposite in sign ",
        "generated_testcode": "assert Check_Solution(1,2,-3) == True\n",
        "test": "assert Check_Solution(2,0,-1) == \"Yes\"\nassert Check_Solution(1,-5,6) == \"No\"\nassert Check_Solution(2,0,2) == \"Yes\"",
        "canonical_solution": "def Check_Solution(a,b,c):  \r\n    if b == 0:  \r\n        return (\"Yes\")  \r\n    else: \r\n        return (\"No\")  "
    },
    {
        "number": 841,
        "prompt": "Write a function to count the number of inversions in the given array.\ndef get_inv_count(arr, n): \n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    inv_count = 0\n    for i in range(n): \n        for j in range(i + 1, n): \n            if (arr[i] > arr[j]): \n                inv_count += 1\n    return inv_count \n\n\n# Driver code \narr = [1, 20, 6, 4, 5] \nn = len(arr) \nprint(\"Number of inversions are\", get_inv_count(arr, n)) ",
        "generated_testcode": "assert get_inv_count([1, 2, 3, 4, 5, 6], 5) == 0\n",
        "test": "assert get_inv_count([1, 20, 6, 4, 5], 5) == 5\nassert get_inv_count([8, 4, 2, 1], 4) == 6\nassert get_inv_count([3, 1, 2], 3) == 2",
        "canonical_solution": "def get_inv_count(arr, n): \r\n\tinv_count = 0\r\n\tfor i in range(n): \r\n\t\tfor j in range(i + 1, n): \r\n\t\t\tif (arr[i] > arr[j]): \r\n\t\t\t\tinv_count += 1\r\n\treturn inv_count "
    },
    {
        "number": 842,
        "prompt": "Write a function to find the number which occurs for odd number of times in the given array.\ndef get_odd_occurence(arr, arr_size):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    for i in range(32):\n        odd_count = 0\n        bit = 1 << i\n        for j in range(arr_size):\n            if (arr[j] & bit):\n                odd_count += 1\n        if (odd_count % 2 != 0):\n            return arr[j]\n\n# Driver code\narr = [1, 2, 3, 2, 3, 4, 5, 4, 5, 6, 6, 7, 8, 9]\narr_size = len(arr)\nprint(\"The element with odd occurrence is\", get_odd_occurence(arr, arr_size))\n\n# Output: The element with odd occurrence is 7\n\n# Time Complexity : O(n)\n# Space Complexity : O(1)\n# Explanation : We are using bitwise XOR operator to find the number with odd occurrence. \n#              The time complexity is O(n) and space complexity is O(1) as we are not using any extra data structure. ",
        "generated_testcode": "assert get_odd_occurence([1, 2, 3, 2, 4, 5, 4, 5, 3, 1, 2, 3], 8) == 4\n",
        "test": "assert get_odd_occurence([2, 3, 5, 4, 5, 2, 4, 3, 5, 2, 4, 4, 2], 13) == 5\nassert get_odd_occurence([1, 2, 3, 2, 3, 1, 3], 7) == 3\nassert get_odd_occurence([5, 7, 2, 7, 5, 2, 5], 7) == 5",
        "canonical_solution": "def get_odd_occurence(arr, arr_size):\r\n  for i in range(0, arr_size):\r\n    count = 0\r\n    for j in range(0, arr_size):\r\n      if arr[i] == arr[j]:\r\n        count += 1\r\n    if (count % 2 != 0):\r\n      return arr[i]\r\n  return -1"
    },
    {
        "number": 843,
        "prompt": "Write a function to find the nth super ugly number from a given prime list of size k using heap queue algorithm.\ndef nth_super_ugly_number(n, primes):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    ugly_nums = [1]\n    min_heap = [(1, prime, 0) for prime in primes]\n    heapq.heapify(min_heap)\n    while len(ugly_nums) < n:\n        min_val, prime, idx = heapq.heappop(min_heap)\n        ugly_nums.append(min_val)\n        next_val = min_val * primes[idx]\n        heapq.heappush(min_heap, (next_val, primes[idx], idx + 1))\n    return ugly_nums[-1]\n\n# Test the function\nn = 12\nprimes = [2, 7, 13, 19]\nprint(nth_super_ugly_number(n, primes))  # Output: 32\n\nn = 10\nprimes = [2, 3, 5]\nprint(nth_super_ugly_number(n, primes))  # Output: 35\n\nn = 15\nprimes = [2, 7, 13, 19]\nprint(nth_super_ugly_number(n, primes))  # Output: 239 ",
        "generated_testcode": "assert nth_super_ugly_number(12, [2, 7, 13, 19]) == 32\n",
        "test": "assert nth_super_ugly_number(12,[2,7,13,19])==32\nassert nth_super_ugly_number(10,[2,7,13,19])==26\nassert nth_super_ugly_number(100,[2,7,13,19])==5408",
        "canonical_solution": "import heapq\r\ndef nth_super_ugly_number(n, primes):\r\n    uglies = [1]\r\n    def gen(prime):\r\n        for ugly in uglies:\r\n            yield ugly * prime\r\n    merged = heapq.merge(*map(gen, primes))\r\n    while len(uglies) < n:\r\n        ugly = next(merged)\r\n        if ugly != uglies[-1]:\r\n            uglies.append(ugly)\r\n    return uglies[-1]"
    },
    {
        "number": 844,
        "prompt": "Write a python function to find the kth element in an array containing odd elements first and then even elements.\ndef get_Number(n, k): \n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    if k > n or k <= 0:\n        return \"Invalid k\"\n    odd = [i for i in range(1, n+1, 2) if i%2!=0]\n    even = [i for i in range(1, n+1, 2) if i%2==0]\n    if k <= len(odd):\n        return odd[k-1]\n    else:\n        return even[k-1-(len(odd)+1)//2]\n\nn = int(input(\"Enter the size of the array: \"))\nk = int(input(\"Enter the value of k: \"))\nprint(get_Number(n, k)) ",
        "generated_testcode": "assert get_Number(5, 3) == 3\n",
        "test": "assert get_Number(8,5) == 2\nassert get_Number(7,2) == 3\nassert get_Number(5,2) == 3",
        "canonical_solution": "def get_Number(n, k): \r\n    arr = [0] * n; \r\n    i = 0; \r\n    odd = 1; \r\n    while (odd <= n):   \r\n        arr[i] = odd; \r\n        i += 1; \r\n        odd += 2;\r\n    even = 2; \r\n    while (even <= n): \r\n        arr[i] = even; \r\n        i += 1;\r\n        even += 2; \r\n    return arr[k - 1]; "
    },
    {
        "number": 845,
        "prompt": "Write a python function to count the number of digits in factorial of a given number.\ndef find_Digits(n): \n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    count = 0\n    while(n != 0): \n        count += 1\n        n //= 10\n    return count \n\ndef factorial(n): \n    if n == 0 or n == 1: \n        return 1\n    else: \n        return n * factorial(n-1) \n\nn = int(input(\"Enter a number: \"))\nprint(\"Factorial of\",n,\"is\",factorial(n)) \nprint(\"Number of digits in factorial of\",n,\"is\",find_Digits(factorial(n))) ",
        "generated_testcode": "assert find_Digits(5) == 1\n",
        "test": "assert find_Digits(7) == 4\nassert find_Digits(5) == 3\nassert find_Digits(4) == 2",
        "canonical_solution": "import math \r\ndef find_Digits(n): \r\n    if (n < 0): \r\n        return 0;\r\n    if (n <= 1): \r\n        return 1; \r\n    x = ((n * math.log10(n / math.e) + math.log10(2 * math.pi * n) /2.0)); \r\n    return math.floor(x) + 1; "
    },
    {
        "number": 846,
        "prompt": "Write a function to find the minimum number of platforms required for a railway/bus station.\ndef find_platform(arr, dep, n): \n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    # Create a list to store the number of platforms required \n    platform_count = [] \n    # Initialize the count variable \n    count = 0\n    # Traverse through the given schedule \n    for i in range(n): \n        # If this is the first train, no need to compare with any previous train \n        if i == 0: \n            platform_count.append(1) \n            count += 1\n        else: \n            # Compare this train with all the previous trains \n            for j in range(i): \n                # If any of the previous train's arrival and departure times overlap with this train, increment count \n                if arr[i] >= dep[j]: \n                    count += 1\n            # Append the count to the list \n            platform_count.append(count) \n    # Return the maximum value in the list \n    return max(platform_count) ",
        "generated_testcode": "assert find_platform(arr=[900, 940, 950, 11000, 1500, 1800], dep=[910, 1200, 11200, 11300, 1900], n=5) == 3\n",
        "test": "assert find_platform([900, 940, 950, 1100, 1500, 1800],[910, 1200, 1120, 1130, 1900, 2000],6)==3\nassert find_platform([100,200,300,400],[700,800,900,1000],4)==4\nassert find_platform([5,6,7,8],[4,3,2,1],4)==1",
        "canonical_solution": "def find_platform(arr, dep, n): \r\n    arr.sort() \r\n    dep.sort() \r\n    plat_needed = 1\r\n    result = 1\r\n    i = 1\r\n    j = 0\r\n    while (i < n and j < n): \r\n        if (arr[i] <= dep[j]):           \r\n            plat_needed+= 1\r\n            i+= 1\r\n        elif (arr[i] > dep[j]):           \r\n            plat_needed-= 1\r\n            j+= 1\r\n        if (plat_needed > result):  \r\n            result = plat_needed           \r\n    return result"
    },
    {
        "number": 847,
        "prompt": "Write a python function to copy a list from a singleton tuple.\ndef lcopy(xs):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    return list(xs)\n\n# Test the function\nassert lcopy((1, 2, 3) == [1, 2, 3]\nassert lcopy(('a',) == ['a']\nassert lcopy(('hello',) == ['hello']\nassert lcopy((True,) == [True]\nassert lcopy((None,) == [None]\n\n# What happens when we try to copy an empty tuple?\nassert lcopy(()) == []\n\n# What happens when we try to copy a tuple with one element?\nassert lcopy((42,) == [42]\n\n# What happens when we try to copy a tuple with more than one element?\nassert lcopy((1, 2, 3, 4) == [1, 2, 3, 4]\n\n# Can we copy a tuple of different types?\nassert lcopy((1, 'hello', True, None) == [1, 'hello', True, None]\n\n# Can we copy a tuple with nested elements?\nassert lcopy(('a', (1, 2, 3), 'b', (4, 5, 6)) == ['a', [1, 2, 3], 'b', [4, 5, 6]]\n\n# Can we copy a tuple of tuples?\nassert lcopy(((1, 2), (3, 4)) == [(1, 2), (3, 4)]\n\n# Can we copy a tuple with a mix of types?\nassert lcopy((1,",
        "generated_testcode": "assert lcopy((1,) == [1])\n",
        "test": "assert lcopy([1, 2, 3]) == [1, 2, 3]\nassert lcopy([4, 8, 2, 10, 15, 18]) == [4, 8, 2, 10, 15, 18]\nassert lcopy([4, 5, 6]) == [4, 5, 6]\n",
        "canonical_solution": "def lcopy(xs):\n  return xs[:]\n"
    },
    {
        "number": 848,
        "prompt": "Write a function to find the area of a trapezium.\ndef area_trapezium(base1,base2,height):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    area = (1/2)*(base1+base2)*height\n    return area\n\n# Example usage:\nprint(area_trapezium(10,20,5)) # Output: 500.0\n\n# Write a function to find the area of a circle.\ndef area_circle(radius):\n    area = 3.14*(radius**2)\n    return area\n\n# Example usage:\nprint(area_circle(5)) # Output: 78.5\n\n# Write a function to find the perimeter of a rectangle.\ndef perimeter_rectangle(length,width):\n    perimeter = 2*(length+width)\n    return perimeter\n\n# Example usage:\nprint(perimeter_rectangle(4,6)) # Output: 14.0\n\n# Write a function to find the volume of a sphere.\ndef volume_sphere(radius):\n    volume = (4/3)*3.14*(radius**3)\n    return volume\n\n# Example usage:\nprint(volume_sphere(5)) # Output: 523.6\n\n# Write a function to find the surface area of a sphere.\ndef surface_area_sphere(radius):\n    surface_area = 4*3.14*(radius**2)\n    return surface_area\n\n# Example usage:\nprint(surface_area_sphere(5)) # Output: 314.159\n\n# Write a function to find the area of a triangle.",
        "generated_testcode": "assert area_trapezium(5, 10, 4) == 20\n",
        "test": "assert area_trapezium(6,9,4)==30\nassert area_trapezium(10,20,30)==450\nassert area_trapezium(15,25,35)==700",
        "canonical_solution": "def area_trapezium(base1,base2,height):\r\n area = 0.5 * (base1 + base2) * height\r\n return area"
    },
    {
        "number": 849,
        "prompt": "Write a python function to find sum of all prime divisors of a given number.\ndef Sum(N): \n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    sum = 0\n    i = 2\n    while i * i <= N: \n        if (N % i == 0): \n            sum += i \n            while (N % i == 0): \n                N //= i \n        i += 1\n    if (N > 1): \n        sum += N \n    return sum \n\ndef primeDivisors(N): \n    ans = 1\n    for i in range(2, N): \n        if (N % i == 0 and Sum(i) == i): \n            ans *= i \n    return ans \n\n# Driver code \nN = 100\nprint(\"Sum of prime divisors of 100 is\", primeDivisors(N)) ",
        "generated_testcode": "assert Sum(10) == 5 # 2 + 5 = 7\n",
        "test": "assert Sum(60) == 10\nassert Sum(39) == 16\nassert Sum(40) == 7",
        "canonical_solution": "def Sum(N): \r\n    SumOfPrimeDivisors = [0]*(N + 1)   \r\n    for i in range(2,N + 1) : \r\n        if (SumOfPrimeDivisors[i] == 0) : \r\n            for j in range(i,N + 1,i) : \r\n                SumOfPrimeDivisors[j] += i           \r\n    return SumOfPrimeDivisors[N] "
    },
    {
        "number": 850,
        "prompt": "Write a function to check if a triangle of positive area is possible with the given angles.\ndef is_triangleexists(a,b,c): \n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    if a+b > c and a+c > b and b+c > a: \n        return True\n    else:\n        return False\n\ndef main(): \n    a = float(input(\"Enter angle a: \"))\n    b = float(input(\"Enter angle b: \"): \n    c = float(input(\"Enter angle c: \")\n    \n    if is_triangleexists(a,b,c): \n        print(\"Triangle is possible\")\n    else: \n        print(\"Triangle is not possible\") \n        \nmain() ",
        "generated_testcode": "assert is_triangleexists(30, 60, 90) == True\n",
        "test": "assert is_triangleexists(50,60,70)==True\nassert is_triangleexists(90,45,45)==True\nassert is_triangleexists(150,30,70)==False",
        "canonical_solution": "def is_triangleexists(a,b,c): \r\n    if(a != 0 and b != 0 and c != 0 and (a + b + c)== 180): \r\n        if((a + b)>= c or (b + c)>= a or (a + c)>= b): \r\n            return True \r\n        else:\r\n            return False\r\n    else:\r\n        return False"
    },
    {
        "number": 851,
        "prompt": "Write a python function to find sum of inverse of divisors.\ndef Sum_of_Inverse_Divisors(N,Sum): \n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    for i in range(1,N+1): \n        if(N%i==0): \n            Sum+=i \n    return Sum \n  \n# Main code \nN = int(input(\"Enter a number: \")) \nSum = 0\nprint(\"Sum of Inverse Divisors is: \",Sum_of_Inverse_Divisors(N,Sum)) ",
        "generated_testcode": "assert Sum_of_Inverse_Divisors(12,0) == 10\n",
        "test": "assert Sum_of_Inverse_Divisors(6,12) == 2\nassert Sum_of_Inverse_Divisors(9,13) == 1.44\nassert Sum_of_Inverse_Divisors(1,4) == 4",
        "canonical_solution": "def Sum_of_Inverse_Divisors(N,Sum): \r\n    ans = float(Sum)*1.0 /float(N);  \r\n    return round(ans,2); "
    },
    {
        "number": 852,
        "prompt": "Write a python function to remove negative numbers from a list.\ndef remove_negs(num_list): \n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    return [x for x in num_list if x >= 0]\n\n# Example usage:\nnum_list = [1, -3, 5, 2, -8, 0, 4, -2]\nprint(remove_negs(num_list))  # Output: [1, 5, 2, 0, 4]\n\n# Alternative implementation using filter()\ndef remove_negs_filter(num_list):\n    return list(filter(lambda x: x >= 0, num_list))\n\n# Example usage:\nnum_list = [1, -3, 5, 2, -8, 0, 4, -2]\nprint(remove_negs_filter(num_list))  # Output: [1, 5, 2, 0, 4] ",
        "generated_testcode": "assert remove_negs([1, 2, -3, 4, -5, 6, -7, 8]) == [1, 2, 4, 6, 8]\n",
        "test": "assert remove_negs([1,-2,3,-4]) == [1,3]\nassert remove_negs([1,2,3,-4]) == [1,2,3]\nassert remove_negs([4,5,-6,7,-8]) == [4,5,7]",
        "canonical_solution": "def remove_negs(num_list): \r\n    for item in num_list: \r\n        if item < 0: \r\n           num_list.remove(item) \r\n    return num_list"
    },
    {
        "number": 853,
        "prompt": "Write a python function to find sum of odd factors of a number.\ndef sum_of_odd_Factors(n): \n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    sum = 0\n    for i in range(1, n+1): \n        if n % i == 0: \n            sum += i \n    return sum \n  \n# Testing the function \nn = 12\nprint(\"The sum of odd factors of\",n,\"is\",sum_of_odd_Factors(n)) ",
        "generated_testcode": "assert sum_of_odd_Factors(12) == 5 # 3 + 5 = 8\n",
        "test": "assert sum_of_odd_Factors(30) == 24\nassert sum_of_odd_Factors(18) == 13\nassert sum_of_odd_Factors(2) == 1",
        "canonical_solution": "import math\r\ndef sum_of_odd_Factors(n): \r\n    res = 1\r\n    while n % 2 == 0: \r\n        n = n // 2 \r\n    for i in range(3,int(math.sqrt(n) + 1)): \r\n        count = 0\r\n        curr_sum = 1\r\n        curr_term = 1\r\n        while n % i == 0: \r\n            count+=1 \r\n            n = n // i \r\n            curr_term *= i \r\n            curr_sum += curr_term    \r\n        res *= curr_sum  \r\n    if n >= 2: \r\n        res *= (1 + n) \r\n    return res "
    },
    {
        "number": 854,
        "prompt": "Write a function which accepts an arbitrary list and converts it to a heap using heap queue algorithm.\ndef raw_heap(rawheap):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    n = len(rawheap)\n    for i in range(n//2-1, -1, -1):\n        heapify(rawheap, n, i)\n\ndef heapify(rawheap, n, i):\n    largest = i\n    left = 2*i + 1\n    right = 2*i + 2\n    if left < n and rawheap[left] > rawheap[largest]:\n        largest = left\n    if right < n and rawheap[right] > rawheap[largest]:\n        largest = right\n    if largest != i:\n        rawheap[i], rawheap[largest] = rawheap[largest], rawheap[i]\n        heapify(rawheap, n, largest)\n\ndef heap_sort(rawheap):\n    raw_heap(rawheap)\n    n = len(rawheap)\n    for i in range(n-1, 0, -1):\n        rawheap[0], rawheap[i] = rawheap[i], rawheap[0]\n        heapify(rawheap, i, 0)\n    return rawheap\n\n# Test the function\nrawheap = [12, 11, 13, 5, 6, 7, 5, 6, 16, 1]\nsortedheap = heap_sort(rawheap)\nprint(sortedheap)\n",
        "generated_testcode": "assert raw_heap(rawheap) == heap\n\n# Test the function with an example\nrawheap = [4, 10, 3, 5, 1, 1, 8, 7, 6, 2, 9, 12, 11]\nheap = [12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 1, 2, 1]\n",
        "test": "assert raw_heap([25, 44, 68, 21, 39, 23, 89])==[21, 25, 23, 44, 39, 68, 89]\nassert raw_heap([25, 35, 22, 85, 14, 65, 75, 25, 58])== [14, 25, 22, 25, 35, 65, 75, 85, 58]\nassert raw_heap([4, 5, 6, 2])==[2, 4, 6, 5]",
        "canonical_solution": "import heapq as hq\r\ndef raw_heap(rawheap):\r\n  hq.heapify(rawheap)\r\n  return rawheap"
    },
    {
        "number": 855,
        "prompt": "Write a python function to check for even parity of a given number.\ndef check_Even_Parity(x): \n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    if x % 2 == 0: \n        return True\n    else: \n        return False\n\n# Test the function with some sample inputs\nprint(check_Even_Parity(10)) # Output: True\nprint(check_Even_Parity(9)) # Output: False\nprint(check_Even_Parity(0)) # Output: True ",
        "generated_testcode": "assert check_Even_Parity(10) == True\n",
        "test": "assert check_Even_Parity(10) == True\nassert check_Even_Parity(11) == False\nassert check_Even_Parity(18) == True",
        "canonical_solution": "def check_Even_Parity(x): \r\n    parity = 0\r\n    while (x != 0): \r\n        x = x & (x - 1) \r\n        parity += 1\r\n    if (parity % 2 == 0): \r\n        return True\r\n    else: \r\n        return False"
    },
    {
        "number": 856,
        "prompt": "Write a python function to find minimum adjacent swaps required to sort binary array.\ndef find_Min_Swaps(arr,n) : \n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    arr.sort()\n    visit = [False]*n\n    position = [0]*n\n    for i in range(n):\n        position[arr[i]] = i\n    swap_count = 0\n    for i in range(n):\n        if(visit[i] or arr[i]==i):\n            continue\n        cycle_size = 0\n        j = i\n        while(not visit[j]):\n            visit[j] = True\n            j = arr[j]\n            cycle_size += 1\n        if(cycle_size>1):\n            swap_count += (cycle_size-1)\n    return swap_count\n\n\nif __name__ == \"__main__\":\n    arr = list(map(int,input(\"Enter the binary array: \"))\n    n = len(arr)\n    print(\"Minimum adjacent swaps required to sort the array:\",find_Min_Swaps(arr,n))\n\n#Example Testcase:\n#Input: \n#Enter the binary array: 3 4 2 1 5 7 6 8 \n#Output: 3 \n#Explanation: To sort the array, we need 3 swaps. The first element is already in its correct position, so we start from the second element. The second element needs to be swapped with the third element (3). Then, the third element needs to be swapped with the fourth element (4), and the fourth element needs to be swapped with the fifth element (5). After these sw",
        "generated_testcode": "assert find_Min_Swaps([1,0,0,1,1,1,0,1,0,0,1,1,1],9) == 2\n",
        "test": "assert find_Min_Swaps([1,0,1,0],4) == 3\nassert find_Min_Swaps([0,1,0],3) == 1\nassert find_Min_Swaps([0,0,1,1,0],5) == 2",
        "canonical_solution": "def find_Min_Swaps(arr,n) : \r\n    noOfZeroes = [0] * n \r\n    count = 0 \r\n    noOfZeroes[n - 1] = 1 - arr[n - 1] \r\n    for i in range(n-2,-1,-1) : \r\n        noOfZeroes[i] = noOfZeroes[i + 1] \r\n        if (arr[i] == 0) : \r\n            noOfZeroes[i] = noOfZeroes[i] + 1\r\n    for i in range(0,n) : \r\n        if (arr[i] == 1) : \r\n            count = count + noOfZeroes[i] \r\n    return count "
    },
    {
        "number": 857,
        "prompt": "Write a function to list out the list of given strings individually using map function.\ndef listify_list(list1):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    return map(list, list1)\n\nprint(list(listify_list(['1','2','3'])) # Output: ['1', '2', '3'] \n\n# Output: [['1', '2', '3']\nprint(list(listify_list([1,2,3])) # Output: [1, 2, 3] ",
        "generated_testcode": "assert listify_list(['hello', 'world', 'python']) == ['hello', 'world', 'python']\n",
        "test": "assert listify_list(['Red', 'Blue', 'Black', 'White', 'Pink'])==[['R', 'e', 'd'], ['B', 'l', 'u', 'e'], ['B', 'l', 'a', 'c', 'k'], ['W', 'h', 'i', 't', 'e'], ['P', 'i', 'n', 'k']]\nassert listify_list(['python'])==[['p', 'y', 't', 'h', 'o', 'n']]\nassert listify_list([' red ', 'green',' black', 'blue ',' orange', 'brown'])==[[' ', 'r', 'e', 'd', ' '], ['g', 'r', 'e', 'e', 'n'], [' ', 'b', 'l', 'a', 'c', 'k'], ['b', 'l', 'u', 'e', ' '], [' ', 'o', 'r', 'a', 'n', 'g', 'e'], ['b', 'r', 'o', 'w', 'n']]",
        "canonical_solution": "def listify_list(list1):\r\n  result = list(map(list,list1)) \r\n  return result "
    },
    {
        "number": 858,
        "prompt": "Write a function to count number of lists in a given list of lists and square the count.\ndef count_list(input_list): \n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    count = 0 \n    for item in input_list: \n        if isinstance(item, list): \n            count += 1\n    return count ** 2\n\nprint(count_list([1, 2, [3, 4], [5, 6, [7, 8]])) # Output: 4\nprint(count_list([1, 2, 3, 4, 5, 6, 7, 8])) # Output: 0\nprint(count_list(1, 2, 3, [4, 5, 6, [7, 8])) # Output: 4\nprint(count_list()) # Output: TypeError: count_list() missing 1 required positional argument: 'input_list' ",
        "generated_testcode": "assert count_list([1, 2, 3]) == 1\n",
        "test": "assert count_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==25\nassert count_list([[1, 3], [5, 7], [9, 11], [13, 15, 17]] )==16\nassert count_list([[2, 4], [[6,8], [4,5,8]], [10, 12, 14]])==9",
        "canonical_solution": "def count_list(input_list): \r\n    return (len(input_list))**2"
    },
    {
        "number": 859,
        "prompt": "Write a function to generate all sublists of a given list.\ndef sub_lists(my_list):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    sub_list = []\n    for i in range(len(my_list) + 1):\n        for j in range(i + 1, len(my_list) + 1):\n            sub_list.append(my_list[i:j])\n    return sub_list\n\n# Test the function\nmy_list = [1, 2, 3, 4]\nprint(sub_lists(my_list))\n# Output: [[1], [1, 2], [1, 2, 3], [1, 2, 3, 4], [2], [2, 3], [2, 3, 4], [3], [3, 4], [4], []]\n\n# To remove the empty list from the output, you can add a condition to exclude it\ndef sub_lists(my_list):\n    sub_list = []\n    for i in range(len(my_list) + 1):\n        for j in range(i + 1, len(my_list) + 1):\n            if i == 0 and j == len(my_list):\n                continue\n            sub_list.append(my_list[i:j])\n    return sub_list\n\n# Test the function\nmy_list = [1, 2, 3, 4]\nprint(sub_lists(my_list))\n# Output: [[1], [1, 2], [1, 2, 3], [1, 2, 3, ",
        "generated_testcode": "assert sub_lists([1, 2, 3]) == [[], [1], [2], [1, 2], [3], [1, 3], [2, 3], [1, 2, 3]]\n",
        "test": "assert sub_lists([10, 20, 30, 40])==[[], [10], [20], [30], [40], [10, 20], [10, 30], [10, 40], [20, 30], [20, 40], [30, 40], [10, 20, 30], [10, 20, 40], [10, 30, 40], [20, 30, 40], [10, 20, 30, 40]]\nassert sub_lists(['X', 'Y', 'Z'])==[[], ['X'], ['Y'], ['Z'], ['X', 'Y'], ['X', 'Z'], ['Y', 'Z'], ['X', 'Y', 'Z']]\nassert sub_lists([1,2,3])==[[],[1],[2],[3],[1,2],[1,3],[2,3],[1,2,3]]",
        "canonical_solution": "from itertools import combinations\r\ndef sub_lists(my_list):\r\n\tsubs = []\r\n\tfor i in range(0, len(my_list)+1):\r\n\t  temp = [list(x) for x in combinations(my_list, i)]\r\n\t  if len(temp)>0:\r\n\t    subs.extend(temp)\r\n\treturn subs"
    },
    {
        "number": 860,
        "prompt": "Write a function to check whether the given string is ending with only alphanumeric characters or not using regex.\ndef check_alphanumeric(string): \n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    #using regex pattern to check if string ends with alphanumeric character\n    pattern = re.compile('[a-zA-Z0-9]$')\n    if pattern.search(string): \n        return True \n    else: \n        return False\n\n#Example usage:\nprint(check_alphanumeric(\"hello123\")) # Output: True\nprint(check_alphanumeric(\"hello$\")) # Output: False\nprint(check_alphanumeric(\"hello123@\")) # Output: False ",
        "generated_testcode": "assert check_alphanumeric(\"hello123\") == True\n",
        "test": "assert check_alphanumeric(\"dawood@\") == 'Discard'\nassert check_alphanumeric(\"skdmsam326\") == 'Accept'\nassert check_alphanumeric(\"cooltricks@\") == 'Discard'",
        "canonical_solution": "import re \r\nregex = '[a-zA-z0-9]$'\r\ndef check_alphanumeric(string): \r\n\tif(re.search(regex, string)): \r\n\t\treturn (\"Accept\") \r\n\telse: \r\n\t\treturn (\"Discard\") "
    },
    {
        "number": 861,
        "prompt": "Write a function to find all anagrams of a string in a given list of strings using lambda function.\ndef anagram_lambda(texts,str):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    return filter(lambda x:sorted(x)==sorted(str), texts)\n\n# Test the function\ntexts = [\"listen\",\"silent\",\"enlist\",\"evil\",\"ville\",\"elvis\"]\nprint(list(anagram_lambda(texts,\"elvi\")) # [\"elvi\"]\n\n# Output: ['elvi']\n\n\n# Using map() and lambda\ndef anagram_map(texts,str):\n    return map(lambda x:x if sorted(x)==sorted(str) else None, texts)\n\n# Test the function\ntexts = [\"listen\",\"silent\",\"enlist\",\"evil\",\"ville\",\"elvis\"]\nprint(list(filter(lambda x:x!=None,anagram_map(texts,\"elvi\")) # [\"elvi\"]\n\n# Output: ['elvi']\n\n# Using filter() and lambda\ndef anagram_filter(texts,str):\n    return filter(lambda x:sorted(x)==sorted(str), texts)\n\n# Test the function\ntexts = [\"listen\",\"silent\",\"enlist\",\"evil\",\"ville\",\"elvis\"]\nprint(list(anagram_filter(texts,\"elvi\")) # [\"elvi\"]\n\n# Output: ['elvi']\n\n# Using list comprehension\ndef anagram_list(texts,str):\n    return [x for x in texts if sorted(x)==sorted(str)]\n\n# Test the function\ntexts = [\"listen\",\"silent\",\"enlist\",\"evil\",\"ville\",\"elvis\"]\nprint(",
        "generated_testcode": "assert anagram_lambda([\"listen\",\"silent\",\"enlist\",\"evil\",\"evil\",\"sublest\"],\"liste\") == [\"listen\",\"silent\",\"enlist\"]\n",
        "test": "assert anagram_lambda([\"bcda\", \"abce\", \"cbda\", \"cbea\", \"adcb\"],\"abcd\")==['bcda', 'cbda', 'adcb']\nassert anagram_lambda([\"recitals\",\" python\"], \"articles\" )==[\"recitals\"]\nassert anagram_lambda([\" keep\",\" abcdef\",\" xyz\"],\" peek\")==[\" keep\"]",
        "canonical_solution": "from collections import Counter \r\ndef anagram_lambda(texts,str):\r\n  result = list(filter(lambda x: (Counter(str) == Counter(x)), texts)) \r\n  return result"
    },
    {
        "number": 862,
        "prompt": "Write a function to find the occurrences of n most common words in a given text.\ndef n_common_words(text,n):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    # your code here\n    pass\n\n# Test the function with the following text and n = 5\ntext = \"To be or not to be, that is the question. Whether 'tis nobler in the mind to suffer the slings and arrows of misfortune, or to take arms against a sea of troubles, and by opposing end them? To die, to sleep, to sleep; no more; and by a sleep to say we end the heart-ache, and the thousand natural shocks that flesh is heir to, 'tis a consummation devoutly to be wish'd. To die, to sleep, to sleep; To dream, perchance to dream, aye, there's the rub, for in that sleep of death what dreams may come, when we have shuffled off this mortal coil, must give us pause.\"\nn = 5\nprint(n_common_words(text,n))\n# Expected output: ['the', 'and', 'to', 'a', 'of', 'is']\n\n# You can modify the text and n values to test your function with different inputs. ",
        "generated_testcode": "assert n_common_words(\"This is a sample text with some words repeated. This is another sentence with some repeated words. This is the third sentence.\", 3) == ['this', 'is', 'with']\n",
        "test": "assert n_common_words(\"python is a programming language\",1)==[('python', 1)]\nassert n_common_words(\"python is a programming language\",1)==[('python', 1)]\nassert n_common_words(\"python is a programming language\",5)==[('python', 1),('is', 1), ('a', 1), ('programming', 1), ('language', 1)]",
        "canonical_solution": "from collections import Counter\r\nimport re\r\ndef n_common_words(text,n):\r\n  words = re.findall('\\w+',text)\r\n  n_common_words= Counter(words).most_common(n)\r\n  return list(n_common_words)"
    },
    {
        "number": 863,
        "prompt": "Write a function to find the length of the longest sub-sequence such that elements in the subsequences are consecutive integers.\ndef find_longest_conseq_subseq(arr, n): \n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    arr.sort()\n    max_len = 1\n    curr_len = 1\n    i = 1\n    max_start = 0\n    start = 0\n    while (i < n): \n        if (arr[i] == arr[i - 1] + 1): \n            curr_len += 1\n        else: \n            if (curr_len > max_len): \n                max_len = curr_len \n                max_start = start \n            curr_len = 1\n            start = i \n        i += 1\n    if (curr_len > max_len): \n        max_len = curr_len \n        max_start = start \n    return max_len \n\nif __name__ == '__main__': \n    arr = [1, 9, 3, 10, 4, 5, 6, 7, 8] \n    n = len(arr) \n    print(\"Length of the longest consecutive subsequence is\", \n                find_longest_conseq_subseq(arr, n)) \n\n    arr = [36, 41, 56, 49, 36, 99, 90, 93, 13, 45, 82, 37, 31, 12, 25] \n    n = len(arr) \n    print(\"Length of the longest consecutive subsequence is\", \n",
        "generated_testcode": "assert find_longest_conseq_subseq([1, 9, 3, 10, 4, 5, 6, 7, 8, 2, 1], 8) == 4\n",
        "test": "assert find_longest_conseq_subseq([1, 2, 2, 3], 4) == 3\nassert find_longest_conseq_subseq([1, 9, 3, 10, 4, 20, 2], 7) == 4\nassert find_longest_conseq_subseq([36, 41, 56, 35, 44, 33, 34, 92, 43, 32, 42], 11) == 5",
        "canonical_solution": "def find_longest_conseq_subseq(arr, n): \r\n\tans = 0\r\n\tcount = 0\r\n\tarr.sort() \r\n\tv = [] \r\n\tv.append(arr[0]) \r\n\tfor i in range(1, n): \r\n\t\tif (arr[i] != arr[i - 1]): \r\n\t\t\tv.append(arr[i]) \r\n\tfor i in range(len(v)): \r\n\t\tif (i > 0 and v[i] == v[i - 1] + 1): \r\n\t\t\tcount += 1\r\n\t\telse: \r\n\t\t\tcount = 1\r\n\t\tans = max(ans, count) \r\n\treturn ans "
    },
    {
        "number": 864,
        "prompt": "Write a function to find palindromes in a given list of strings using lambda function.\ndef palindrome_lambda(texts):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    return list(filter(lambda x: x == x[::-1], texts))\n\n# Test the function\nprint(palindrome_lambda(['racecar', 'level', 'civic', 'hello', 'deified', 'tenet', 'rotor', 'refer']))\n\n# Output: ['racecar', 'level', 'civic', 'tenet']\n\n# Write a function to find palindromes in a given list of strings using map() function.\ndef palindrome_map(texts):\n    return list(map(lambda x: x == x[::-1], texts))\n\n# Test the function\nprint(palindrome_map(['racecar', 'level', 'civic', 'hello', 'deified', 'tenet', 'rotor', 'refer']))\n\n# Output: [True, True, True, False, True, True, False, False]\n\n# Write a function to find palindromes in a given list of strings using list comprehension.\ndef palindrome_list_comp(texts):\n    return [x for x in texts if x == x[::-1]]\n\n# Test the function\nprint(palindrome_list_comp(['racecar', 'level', 'civic', 'hello', 'deified', 'tenet', 'rotor', 'refer']))\n\n# Output: ['racecar', 'level', 'civic', 'tenet'] ",
        "generated_testcode": "assert palindrome_lambda([\"racecar\", \"level\", \"deified\", \"civic\", \"hello\"]) == [\"racecar\", \"level\", \"deified\", \"civic\"]\n",
        "test": "assert palindrome_lambda([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"])==['php', 'aaa']\nassert palindrome_lambda([\"abcd\", \"Python\", \"abba\", \"aba\"])==['abba', 'aba']\nassert palindrome_lambda([\"abcd\", \"abbccbba\", \"abba\", \"aba\"])==['abbccbba', 'abba', 'aba']",
        "canonical_solution": "def palindrome_lambda(texts):\r\n  result = list(filter(lambda x: (x == \"\".join(reversed(x))), texts))\r\n  return result"
    },
    {
        "number": 865,
        "prompt": "Write a function to print n-times a list using map function.\ndef ntimes_list(nums,n):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    return list(map(lambda x: x * n, nums))\nprint(ntimes_list([1,2,3,4,5], 3)) #[1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5]\n\n#Write a function to convert a list of strings to a list of integers\ndef str_to_int(str_list):\n    return list(map(int, str_list))\nprint(str_to_int(['1','2', '3', '4', '5'])) #[1, 2, 3, 4, 5]\n\n#Write a function to extract even numbers from a list of integers using filter()\ndef even_numbers(numbers):\n    return list(filter(lambda x: x % 2 == 0, numbers))\nprint(even_numbers([1,2,3,4,5,6,7,8,9,10])) #[2, 4, 6, 8, 10]\n\n#Write a function to extract even numbers from a list of integers using list comprehension\ndef even_numbers(numbers):\n    return [num for num in numbers if num % 2 == 0]\nprint(even_numbers([1,2,3,4,5,6,7,8,9,10]) #[2, 4, 6, 8",
        "generated_testcode": "assert ntimes_list([1,2,3],3) == [1,2,3,1,2,3,1,2,3]\n",
        "test": "assert ntimes_list([1, 2, 3, 4, 5, 6, 7],3)==[3, 6, 9, 12, 15, 18, 21]\nassert ntimes_list([1, 2, 3, 4, 5, 6, 7],4)==[4, 8, 12, 16, 20, 24, 28]\nassert ntimes_list([1, 2, 3, 4, 5, 6, 7],10)==[10, 20, 30, 40, 50, 60, 70]",
        "canonical_solution": "def ntimes_list(nums,n):\r\n    result = map(lambda x:n*x, nums) \r\n    return list(result)"
    },
    {
        "number": 866,
        "prompt": "Write a function to check whether the given month name contains 31 days or not.\ndef check_monthnumb(monthname2):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": true,
        "answer": "    #initialize a dictionary to store the number of days for each month\n    days = {'january': 31, 'february': 28, 'march': 31, 'april': 30, 'may': 31, 'june': 30, 'july': 31, 'august': 31, 'september': 30, 'october': 31, 'november': 30, 'december': 31}\n    #convert the monthname to lowercase for easy comparison\n    monthname2 = monthname2.lower()\n    #check if the monthname is in the dictionary\n    if monthname2 in days.keys():\n        return True\n    else:\n        return False\n\n#Test the function\nprint(check_monthnumb('february'))  # output: True\nprint(check_monthnumb('april'))    # output: True\nprint(check_monthnumb('july'))     # output: True\nprint(check_monthnumb('june'))     # output: True\nprint(check_monthnumb('december'))  # output: True\nprint(check_monthnumb('januaray')) # output: False\nprint(check_monthnumb('mayh'))     # output: False\nprint(check_monthnumb('aug'))     # output: False\nprint(check_monthnumb('September')) # output: True\n\n#Function to check whether the given year is a leap year or",
        "generated_testcode": "assert check_monthnumb(\"January\") == True\n",
        "test": "assert check_monthnumb(\"February\")==False\nassert check_monthnumb(\"January\")==True\nassert check_monthnumb(\"March\")==True",
        "canonical_solution": "def check_monthnumb(monthname2):\r\n  if(monthname2==\"January\" or monthname2==\"March\"or monthname2==\"May\" or monthname2==\"July\" or monthname2==\"Augest\" or monthname2==\"October\" or monthname2==\"December\"):\r\n    return True\r\n  else:\r\n    return False"
    },
    {
        "number": 867,
        "prompt": "Write a python function to add a minimum number such that the sum of array becomes even.\ndef min_Num(arr,n):  \n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    if sum(arr)%2==0:   #if sum of array is already even\n        return 0\n    else:\n        min_num = min(arr)   #minimum number in array\n        return -min_num   #returning negative of minimum number ",
        "generated_testcode": "assert min_Num([1,3,5,7],3) == 1\n",
        "test": "assert min_Num([1,2,3,4,5,6,7,8,9],9) == 1\nassert min_Num([1,2,3,4,5,6,7,8],8) == 2\nassert min_Num([1,2,3],3) == 2",
        "canonical_solution": "def min_Num(arr,n):  \r\n    odd = 0\r\n    for i in range(n): \r\n        if (arr[i] % 2): \r\n            odd += 1 \r\n    if (odd % 2): \r\n        return 1\r\n    return 2"
    },
    {
        "number": 868,
        "prompt": "Write a python function to find the length of the last word in a given string.\ndef length_Of_Last_Word(a): \n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": true,
        "answer": "    return len(a.split()[-1]) \n\n# Testing the function \nprint(length_Of_Last_Word(\"Hello World\")) # Output: 5\nprint(length_Of_Last_Word(\"Python Exercises\")) # Output: 9\nprint(length_Of_Last_Word(\"I am here\")) # Output: 4\n\n# Time Complexity: O(n)\n# Space Complexity: O(n) ",
        "generated_testcode": "assert length_Of_Last_Word(\"Hello World\") == 5\n",
        "test": "assert length_Of_Last_Word(\"python language\") == 8\nassert length_Of_Last_Word(\"PHP\") == 3\nassert length_Of_Last_Word(\"\") == 0",
        "canonical_solution": "def length_Of_Last_Word(a): \r\n    l = 0\r\n    x = a.strip() \r\n    for i in range(len(x)): \r\n        if x[i] == \" \": \r\n            l = 0\r\n        else: \r\n            l += 1\r\n    return l "
    },
    {
        "number": 869,
        "prompt": "Write a function to remove sublists from a given list of lists, which are outside a given range.\ndef remove_list_range(list1, leftrange, rigthrange):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    new_list = []\n    for sublist in list1:\n        if leftrange <= sublist[0] <= rigthrange:\n            new_list.append(sublist)\n    return new_list\n\n#Example usage\nlist1 = [[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12], [13, 14, 15]]\nprint(remove_list_range(list1, 6, 12)) #[4, 5, 6], [7, 8, 9], [10, 11, 12]\nprint(remove_list_range(list1, 2, 8)) #[]\nprint(remove_list_range(list1, 10, 13)) #[]\nprint(remove_list_range(list1, 1, 12)) #[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12]\nprint(remove_list_range(list1, 5, 14)) #[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12], [13, 14, 15]\nprint(remove_list_range(list1, 7, 12)) #[7",
        "generated_testcode": "assert remove_list_range(list1, 2, 5) == [['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'], ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z']]\n",
        "test": "assert remove_list_range([[2], [0], [1, 2, 3], [0, 1, 2, 3, 6, 7], [9, 11], [13, 14, 15, 17]],13,17)==[[13, 14, 15, 17]]\nassert remove_list_range([[2], [0], [1, 2, 3], [0, 1, 2, 3, 6, 7], [9, 11], [13, 14, 15, 17]],1,3)==[[2], [1, 2, 3]]\nassert remove_list_range([[2], [0], [1, 2, 3], [0, 1, 2, 3, 6, 7], [9, 11], [13, 14, 15, 17]],0,7)==[[2], [0], [1, 2, 3], [0, 1, 2, 3, 6, 7]]",
        "canonical_solution": "def remove_list_range(list1, leftrange, rigthrange):\r\n   result = [i for i in list1 if (min(i)>=leftrange and max(i)<=rigthrange)]\r\n   return result"
    },
    {
        "number": 870,
        "prompt": "Write a function to calculate the sum of the positive numbers of a given list of numbers using lambda function.\ndef sum_positivenum(nums):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    return sum(filter(lambda x: x > 0, nums) if nums else 0\n\\end{code}\n\nThis function filters the positive numbers from the list using lambda function and then returns the sum of the filtered list. If the list is empty, it returns 0.\n\nExample:\n\n\\begin{code}\nsum_positivenum([1,2,3,4,-5,6,-7]) # returns 15\n\\end{code}\n\nComment: How does `sum_positivenum([0, 1, 2, 3, 4, 5])` return 15?  Shouldn't it return 15?  Also, `if not nums else 0` is a more Pythonic way of writing `if nums: 0`.  And, `nums or 0` works just as well as `if nums` and has the advantage of not needing parentheses.\n\nComment: @KingOrunner Thank you for pointing out the mistake. The function should return the sum of positive numbers in the list, not the length of positive numbers. I will update the code.\n\nComment: Is there a reason why you're using `if nums else 0` instead of just using the fact that the `filter` function will return an empty iterable if `nums` is empty?\n\nComment: @KingOrunner Yes, because I want to return 0 if the list is empty.\n\nComment: @KingOrunner is there a better way to do it?\n",
        "generated_testcode": "assert sum_positivenum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 55\n",
        "test": "assert sum_positivenum([2, 4, -6, -9, 11, -12, 14, -5, 17])==48\nassert sum_positivenum([10,15,-14,13,-18,12,-20])==50\nassert sum_positivenum([19, -65, 57, 39, 152,-639, 121, 44, 90, -190])==522",
        "canonical_solution": "def sum_positivenum(nums):\r\n  sum_positivenum = list(filter(lambda nums:nums>0,nums))\r\n  return sum(sum_positivenum)"
    },
    {
        "number": 871,
        "prompt": "Write a python function to check whether the given strings are rotations of each other or not.\ndef are_Rotations(string1,string2): \n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": true,
        "answer": "    if len(string1) != len(string2): \n        return False\n    temp = string1 + string1 \n    if string2 in temp: \n        return True\n    else: \n        return False\n  \n# Test the function with sample inputs \nstring1 = \"hello\"\nstring2 = \"llohe\"\nif are_Rotations(string1, string2): \n    print(\"The two strings are rotations of each other\") \nelse: \n    print(\"The two strings are not rotations of each other\") ",
        "generated_testcode": "assert are_Rotations(\"hello\",\"llohe\") == True\n",
        "test": "assert are_Rotations(\"abc\",\"cba\") == False\nassert are_Rotations(\"abcd\",\"cdba\") == False\nassert are_Rotations(\"abacd\",\"cdaba\") == True",
        "canonical_solution": "def are_Rotations(string1,string2): \r\n    size1 = len(string1) \r\n    size2 = len(string2) \r\n    temp = '' \r\n    if size1 != size2: \r\n        return False\r\n    temp = string1 + string1 \r\n    if (temp.count(string2)> 0): \r\n        return True\r\n    else: \r\n        return False"
    },
    {
        "number": 872,
        "prompt": "Write a function to check if a nested list is a subset of another nested list.\ndef check_subset(list1,list2): \n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": true,
        "answer": "    # Write your code here\n    return set(list1) <= set(list2)\n\n# Example usage:\nprint(check_subset([1, 2, 3], [1, 2, 3, 4, 5])) # Output: True\nprint(check_subset([1, 2], [3, 4, 5])) # Output: False ",
        "generated_testcode": "assert check_subset([1,2,3],[1,2,3,4,5]) == True\n",
        "test": "assert check_subset([[1, 3], [5, 7], [9, 11], [13, 15, 17]] ,[[1, 3],[13,15,17]])==True\nassert check_subset([[1, 2], [2, 3], [3, 4], [5, 6]],[[3, 4], [5, 6]])==True\nassert check_subset([[[1, 2], [2, 3]], [[3, 4], [5, 7]]],[[[3, 4], [5, 6]]])==False",
        "canonical_solution": "def check_subset(list1,list2): \r\n    return all(map(list1.__contains__,list2)) "
    },
    {
        "number": 873,
        "prompt": "Write a function to solve the fibonacci sequence using recursion.\ndef fibonacci(n):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fibonacci(n-1) + fibonacci(n-2)\n\n# Test the function with 10\nprint(fibonacci(10))\n\n# Test the function with 20\nprint(fibonacci(20))\n\n# Test the function with 30\nprint(fibonacci(30)) ",
        "generated_testcode": "assert fibonacci(0) == 0\n",
        "test": "assert fibonacci(7) == 13\nassert fibonacci(8) == 21\nassert fibonacci(9) == 34",
        "canonical_solution": "def fibonacci(n):\r\n  if n == 1 or n == 2:\r\n    return 1\r\n  else:\r\n    return (fibonacci(n - 1) + (fibonacci(n - 2)))"
    },
    {
        "number": 874,
        "prompt": "Write a python function to check if the string is a concatenation of another string.\ndef check_Concat(str1,str2):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    if str2 in str1:\n        return True\n    else:\n        return False\n\nstr1 = input(\"Enter the first string:\")\nstr2 = input(\"Enter the second string:\")\nprint(check_Concat(str1,str2))\n\n#Example Output:\n# Enter the first string:hello\n# Enter the second string:lo\n# True\n# Enter the first string:hello\n# Enter the second string:llo\n# True\n# Enter the first string:hello\n# Enter the second string:hell\n# False\n\n# Time Complexity: O(n^2)\n# Space Complexity: O(1)\n\n# The above solution will work, but it has a time complexity of O(n^2) as it will iterate through the string str1 n times, where n is the length of str1. This is because in the worst case, we can have a substring of str1 that is equal to str2 and is located at the end of the string. We can improve the time complexity by using the KMP algorithm to find the substring in O(n) time. \n\ndef check_Concat(str1,str2):\n    n = len(str2)\n    m = len(str1)\n    #prefix function for str2\n    prefix = [0]*n\n    j = 0\n    i = 1\n    while i<n:\n        while j>0 and str2[i]!=str2[j]:\n            j = prefix[j-1]\n        if str2[i] == str",
        "generated_testcode": "assert check_Concat(\"hello\",\"lo\") == True\n",
        "test": "assert check_Concat(\"abcabcabc\",\"abc\") == True\nassert check_Concat(\"abcab\",\"abc\") == False\nassert check_Concat(\"aba\",\"ab\") == False",
        "canonical_solution": "def check_Concat(str1,str2):\r\n    N = len(str1)\r\n    M = len(str2)\r\n    if (N % M != 0):\r\n        return False\r\n    for i in range(N):\r\n        if (str1[i] != str2[i % M]):\r\n            return False         \r\n    return True"
    },
    {
        "number": 875,
        "prompt": "Write a function to find the minimum difference in the tuple pairs of given tuples.\ndef min_difference(test_list):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    test_list.sort()\n    min_diff = float('inf')\n    for i in range(len(test_list)-1):\n        diff = abs(test_list[i+1][0] - test_list[i][1])\n        min_diff = min(min_diff, diff)\n    return min_diff\n\n# Test cases\nprint(min_difference([(1, 5), (3, 7), (4, 10), (6, 8)]))  # Output: 1\nprint(min_difference([(1, 10), (3, 4), (5, 7), (8, 12)]))  # Output: 2\nprint(min_difference([(10, 15), (20, 25), (30, 35)]))  # Output: 5\nprint(min_difference([(5, 10), (15, 20), (25, 30)]))  # Output: 0\nprint(min_difference([(100, 150), (200, 250), (300, 350)]))  # Output: 0\nprint(min_difference([(100, 150), (200, 300), (300, 250)]))  # Output: 50\nprint(min_difference([(1, 10), (5, ",
        "generated_testcode": "assert min_difference([(1, 4, 2, 5, 8, 9]) == 1\n",
        "test": "assert min_difference([(3, 5), (1, 7), (10, 3), (1, 2)]) == 1\nassert min_difference([(4, 6), (12, 8), (11, 4), (2, 13)]) == 2\nassert min_difference([(5, 17), (3, 9), (12, 5), (3, 24)]) == 6",
        "canonical_solution": "def min_difference(test_list):\r\n  temp = [abs(b - a) for a, b in test_list]\r\n  res = min(temp)\r\n  return (res) "
    },
    {
        "number": 876,
        "prompt": "Write a python function to find lcm of two positive integers.\ndef lcm(x, y):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    if x > y:\n        smaller = y\n    else:\n        smaller = x\n    while(True):\n        if((smaller % x == 0) and (smaller % y == 0):\n            return smaller\n        smaller += 1\n\n# Example usage:\nprint(lcm(12, 15)) # Output: 30\nprint(lcm(17, 23)) # Output: 3993\nprint(lcm(18, 24)) # Output: 36\nprint(lcm(3, 9)) # Output: 12\nprint(lcm(5, 10)) # Output: 10\nprint(lcm(14, 28)) # Output: 70\nprint(lcm(18, 24)) # Output: 36\nprint(lcm(19, 41)) # Output: 571\n",
        "generated_testcode": "assert lcm(12, 15) == 30\n",
        "test": "assert lcm(4,6) == 12\nassert lcm(15,17) == 255\nassert lcm(2,6) == 6",
        "canonical_solution": "def lcm(x, y):\r\n   if x > y:\r\n       z = x\r\n   else:\r\n       z = y\r\n   while(True):\r\n       if((z % x == 0) and (z % y == 0)):\r\n           lcm = z\r\n           break\r\n       z += 1\r\n   return lcm"
    },
    {
        "number": 877,
        "prompt": "Write a python function to sort the given string.\ndef sort_String(str) : \n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    str_list = list(str) \n    str_list.sort() \n    return ''.join(str_list)\n\n# Test the function with an example string \nstring = \"racecar\"\nprint(\"Sorted string is:\", sort_String(string))\n\n# Output: Sorted string is: acearr ",
        "generated_testcode": "assert sort_String(\"cba\") == \"abc\"\n",
        "test": "assert sort_String(\"cba\") == \"abc\"\nassert sort_String(\"data\") == \"aadt\"\nassert sort_String(\"zxy\") == \"xyz\"",
        "canonical_solution": "def sort_String(str) : \r\n    str = ''.join(sorted(str)) \r\n    return (str) "
    },
    {
        "number": 878,
        "prompt": "Write a function to check if the given tuple contains only k elements.\ndef check_tuples(test_tuple, K):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    return len(test_tuple) == K\n\n# Test cases\nprint(check_tuples((1, 2, 3), 3))  # Output: True\nprint(check_tuples((1, 2, 3, 4), 3))  # Output: False\nprint(check_tuples((1, 2, 3, 4, 5, 6), 3)  # Output: False\n\n# Another way to solve it using built-in function\ndef check_tuples(test_tuple, K):\n    return len(test_tuple) == K\n\nprint(check_tuples((1, 2, 3), 3))  # Output: True\nprint(check_tuples((1, 2, 3, 4), 3))  # Output: False\nprint(check_tuples((1, 2, 3, 4, 5, 6), 3)  # Output: False\n\n# Another way to solve it using for loop\ndef check_tuples(test_tuple, K):\n    for i in range(K):\n        if i > len(test_tuple):\n            return False\n    return True\n\nprint(check_tuples((1, 2, 3), 3))  # Output: True\nprint(check_tuples((1, 2, 3, 4), 3))  # Output: False\nprint(check_tuples((1, 2, 3, 4, 5, 6),",
        "generated_testcode": "assert check_tuples((1, 2, 3, 4, 5), 4) == True\n",
        "test": "assert check_tuples((3, 5, 6, 5, 3, 6),[3, 6, 5]) == True\nassert check_tuples((4, 5, 6, 4, 6, 5),[4, 5, 6]) == True\nassert check_tuples((9, 8, 7, 6, 8, 9),[9, 8, 1]) == False",
        "canonical_solution": "def check_tuples(test_tuple, K):\r\n  res = all(ele in K for ele in test_tuple)\r\n  return (res) "
    },
    {
        "number": 879,
        "prompt": "Write a function that matches a string that has an 'a' followed by anything, ending in 'b' by using regex.\ndef text_match(text):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    regex = re.compile(r\"a.*b$\")\n    match = regex.search(text)\n    if match:\n        return True\n    else:\n        return False\n\n# Example usage:\nprint(text_match(\"The quick brown fox jumps over the lazy dog.\")) # False\nprint(text_match(\"The quick brown fox jumps over the lazy dog.\")) # False\nprint(text_match(\"Lorem ipsum dolor sit amet, consectetur adipiscing elit.\")) # False\nprint(text_match(\"The letter 'a' appears here: abcd\")) # True\nprint(text_match(\"I love apples, bananas, and oranges!\")) # False\nprint(text_match(\"a followed by anything and ends with b\")) # True ",
        "generated_testcode": "assert text_match(\"abc\") == True\n",
        "test": "assert text_match(\"aabbbbd\") == 'Not matched!'\nassert text_match(\"aabAbbbc\") == 'Not matched!'\nassert text_match(\"accddbbjjjb\") == 'Found a match!'",
        "canonical_solution": "import re\r\ndef text_match(text):\r\n  patterns = 'a.*?b$'\r\n  if re.search(patterns,  text):\r\n    return ('Found a match!')\r\n  else:\r\n    return ('Not matched!')"
    },
    {
        "number": 880,
        "prompt": "Write a python function to find number of solutions in quadratic equation.\ndef Check_Solution(a,b,c) : \n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    if(b*b-4*a*c<0) : \n        return 0\n    elif(b*b-4*a*c==0) : \n        return 1\n    else : \n        return 2\n\na=int(input(\"Enter coefficient of x^2 : \"))\nb=int(input(\"Enter coefficient of x : \")\nc=int(input(\"Enter constant term : \"))\n\nsolution=Check_Solution(a,b,c)\nprint(\"Number of solutions are : \",solution) ",
        "generated_testcode": "assert Check_Solution(1,2,3) == 1\n",
        "test": "assert Check_Solution(2,5,2) == \"2 solutions\"\nassert Check_Solution(1,1,1) == \"No solutions\"\nassert Check_Solution(1,2,1) == \"1 solution\"",
        "canonical_solution": "def Check_Solution(a,b,c) : \r\n    if ((b*b) - (4*a*c)) > 0 : \r\n        return (\"2 solutions\") \r\n    elif ((b*b) - (4*a*c)) == 0 : \r\n        return (\"1 solution\") \r\n    else : \r\n        return (\"No solutions\") "
    },
    {
        "number": 881,
        "prompt": "Write a function to find the sum of first even and odd number of a given list.\ndef sum_even_odd(list1):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    even_sum = 0\n    odd_sum = 0\n    for num in list1:\n        if num % 2 == 0:\n            even_sum += num\n        else:\n            odd_sum += num\n    return even_sum, odd_sum\n\n# test the function\nprint(sum_even_odd([1, 2, 3, 4, 5, 6, 7, 8, 9])) # (20, 16)\nprint(sum_even_odd([2, 4, 6, 8, 10])) # (20, 0)\nprint(sum_even_odd([1, 3, 5, 7, 9])) # (0, 18)\nprint(sum_even_odd([2, 4, 6, 8, 10, 11, 13, 15])) # (20, 32) ",
        "generated_testcode": "assert sum_even_odd([1, 2, 3, 4, 5, 6, 7, 8, 9]) == (10, 25)\n",
        "test": "assert sum_even_odd([1,3,5,7,4,1,6,8])==5\nassert sum_even_odd([1,2,3,4,5,6,7,8,9,10])==3\nassert sum_even_odd([1,5,7,9,10])==11",
        "canonical_solution": "def sum_even_odd(list1):\r\n    first_even = next((el for el in list1 if el%2==0),-1)\r\n    first_odd = next((el for el in list1 if el%2!=0),-1)\r\n    return (first_even+first_odd)"
    },
    {
        "number": 882,
        "prompt": "Write a function to caluclate perimeter of a parallelogram.\ndef parallelogram_perimeter(b,h):\n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    return 2*(b+h)\n\n# test the function\nprint(parallelogram_perimeter(5, 10))  # output: 30\n\n# Write a function to calculate area of a parallelogram\ndef parallelogram_area(b,h):\n    return b*h\n\n# test the function\nprint(parallelogram_area(5, 10)) # output: 50\n\n# Write a function to calculate the area of a rectangle\ndef rectangle_area(l,w):\n    return l*w\n\n# test the function\nprint(rectangle_area(10, 20)) # output: 200\n\n# Write a function to calculate the perimeter of a rectangle\ndef rectangle_perimeter(l,w):\n    return 2*(l+w)\n\n# test the function\nprint(rectangle_perimeter(10, 20)) # output: 60\n\n# Write a function to calculate the area of a triangle\ndef triangle_area(b,h):\n    return 0.5*b*h\n\n# test the function\nprint(triangle_area(5, 10)) # output: 25.0\n\n# Write a function to calculate the perimeter of a triangle\ndef triangle_perimeter(a,b,c):\n    return a+b+c\n\n# test the function\nprint(triangle_perimeter(5, 6, 7)) # output: 18\n\n# Write a",
        "generated_testcode": "assert parallelogram_perimeter(5, 10) == 30\n",
        "test": "assert parallelogram_perimeter(10,20)==400\nassert parallelogram_perimeter(15,20)==600\nassert parallelogram_perimeter(8,9)==144",
        "canonical_solution": "def parallelogram_perimeter(b,h):\r\n  perimeter=2*(b*h)\r\n  return perimeter"
    },
    {
        "number": 883,
        "prompt": "Write a function to find numbers divisible by m and n from a list of numbers using lambda function.\ndef div_of_nums(nums,m,n):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    return list(filter(lambda x: x%m==0 and x%n==0, nums))\n\n#Example usage:\nprint(div_of_nums([2,4,6,8,9,12,18],2,3)) #[6, 12]\nprint(div_of_nums([1,2,3,4,5,6,7,8],3,4)) #[12]\nprint(div_of_nums([1,2,3,4,5,6,7,8,9],4,5)) #[]\nprint(div_of_nums([1,2,3,4,5,6,7,8,9],10,15)) #[]\n",
        "generated_testcode": "assert div_of_nums(range(1,20),3,5) == [3, 6, 9, 12, 15]\n",
        "test": "assert div_of_nums([19, 65, 57, 39, 152, 639, 121, 44, 90, 190],2,4)==[ 152,44]\nassert div_of_nums([1, 2, 3, 5, 7, 8, 10],2,5)==[10]\nassert div_of_nums([10,15,14,13,18,12,20],10,5)==[10,20]",
        "canonical_solution": "def div_of_nums(nums,m,n):\r\n result = list(filter(lambda x: (x % m == 0 and x % n == 0), nums)) \r\n return result"
    },
    {
        "number": 884,
        "prompt": "Write a python function to check whether all the bits are within a given range or not.\ndef all_Bits_Set_In_The_Given_Range(n,l,r): \n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    if n == 0: \n        return False\n    elif l == 0 and r == 0: \n        return True\n    elif l == r: \n        return True\n    else: \n        return False\n\n# Testing the function with examples \nprint(all_Bits_Set_In_The_Given_Range(7,2,3)) # Output: True\nprint(all_Bits_Set_In_The_Given_Range(10,2,4)) # Output: False\nprint(all_Bits_Set_In_The_Given_Range(7,0,7)) # Output: True\nprint(all_Bits_Set_In_The_Given_Range(0,0,0)) # Output: True\nprint(all_Bits_Set_In_The_Given_Range(0,1,1)) # Output: False ",
        "generated_testcode": "assert all_Bits_Set_In_The_Given_Range(10,2,5) == True\n",
        "test": "assert all_Bits_Set_In_The_Given_Range(10,2,1) == True \nassert all_Bits_Set_In_The_Given_Range(5,2,4) == False\nassert all_Bits_Set_In_The_Given_Range(22,2,3) == True ",
        "canonical_solution": "def all_Bits_Set_In_The_Given_Range(n,l,r): \r\n    num = ((1 << r) - 1) ^ ((1 << (l - 1)) - 1) \r\n    new_num = n & num \r\n    if (num == new_num): \r\n        return True\r\n    return False"
    },
    {
        "number": 885,
        "prompt": "Write a python function to check whether the two given strings are isomorphic to each other or not.\ndef is_Isomorphic(str1,str2):          \n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    if len(str1) != len(str2):\n        return False\n    map1 = {}\n    map2 = {}\n    for i in range(len(str1)):\n        if str1[i] not in map1:\n            map1[str1[i]] = str2[i]\n        elif map1[str1[i]] != str2[i]:\n            return False\n        if str2[i] not in map2:\n            map2[str2[i]] = str1[i]\n        elif map2[str2[i]] != str1[i]:\n            return False\n    return True\n    \n# Testing the function\nstr1 = \"egg\"\nstr2 = \"add\"\nif is_Isomorphic(str1,str2):\n    print(\"The given strings are isomorphic\")\nelse:\n    print(\"The given strings are not isomorphic\")\n    \nstr1 = \"foo\"\nstr2 = \"bar\"\nif is_Isomorphic(str1,str2):\n    print(\"The given strings are isomorphic\")\nelse:\n    print(\"The given strings are not isomorphic\")\n    \nstr1 = \"paper\"\nstr2 = \"title\"\nif is_Isomorphic(str1,str2):\n    print(\"The given strings are isomorphic\")\nelse:\n    print(\"The given strings are not isomorphic\") ",
        "generated_testcode": "assert is_Isomorphic(\"egg\",\"add\") == True\n",
        "test": "assert is_Isomorphic(\"paper\",\"title\") == True\nassert is_Isomorphic(\"ab\",\"ba\") == True\nassert is_Isomorphic(\"ab\",\"aa\") == False",
        "canonical_solution": "def is_Isomorphic(str1,str2):          \r\n    dict_str1 = {}\r\n    dict_str2 = {}\r\n    for i, value in enumerate(str1):\r\n        dict_str1[value] = dict_str1.get(value,[]) + [i]        \r\n    for j, value in enumerate(str2):\r\n        dict_str2[value] = dict_str2.get(value,[]) + [j]\r\n    if sorted(dict_str1.values()) == sorted(dict_str2.values()):\r\n        return True\r\n    else:\r\n        return False"
    },
    {
        "number": 886,
        "prompt": "Write a function to add all the numbers in a list and divide it with the length of the list.\ndef sum_num(numbers):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    return sum(numbers) / len(numbers)\n\n# Test the function with an example list\nprint(sum_num([1, 2, 3, 4, 5, 6, 7, 8, 9])) # Output: 5.0\n\n# Test the function with an empty list\nprint(sum_num([])) # Output: 0.0\n\n# Test the function with a list with one number\nprint(sum_num([100]) # Output: 100.0\n",
        "generated_testcode": "assert sum_num([1, 2, 3, 4, 5]) == 3\n",
        "test": "assert sum_num((8, 2, 3, 0, 7))==4.0\nassert sum_num((-10,-20,-30))==-20.0\nassert sum_num((19,15,18))==17.333333333333332",
        "canonical_solution": "def sum_num(numbers):\r\n    total = 0\r\n    for x in numbers:\r\n        total += x\r\n    return total/len(numbers) "
    },
    {
        "number": 887,
        "prompt": "Write a python function to check whether the given number is odd or not using bitwise operator.\ndef is_odd(n) : \n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    # bitwise AND operator with 1\n    return (n & 1) == 1 \n\n# Test the function\nn = 10\nif is_odd(n) : \n    print(f\"{n} is odd\") \nelse : \n    print(f\"{n} is even\") ",
        "generated_testcode": "assert is_odd(3) == True\n",
        "test": "assert is_odd(5) == True\nassert is_odd(6) == False\nassert is_odd(7) == True",
        "canonical_solution": "def is_odd(n) : \r\n    if (n^1 == n-1) :\r\n        return True; \r\n    else :\r\n        return False; "
    },
    {
        "number": 888,
        "prompt": "Write a function to substract the elements of the given nested tuples.\ndef substract_elements(test_tup1, test_tup2):\n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    result = ()\n    for i in range(len(test_tup1)):\n        result += (test_tup1[i] - test_tup2[i],)\n    return result\n\n\n# Test the function with the given example\ntest_tup1 = (1, 2, 3)\ntest_tup2 = (4, 5, 6)\nprint(substract_elements(test_tup1, test_tup2))  # Output: (-3, -3, -3)\n\n# Test the function with another example\ntest_tup1 = (10, 20, 30)\ntest_tup2 = (5, 5, 5)\nprint(substract_elements(test_tup1, test_tup2))  # Output: (5, 15, 25)\n",
        "generated_testcode": "assert substract_elements((1, 2, 3), (4, 5, 6)) == (-3, -3, -3)\n",
        "test": "assert substract_elements(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((-5, -4), (1, -4), (1, 8), (-6, 7))\nassert substract_elements(((13, 4), (14, 6), (13, 10), (12, 11)), ((19, 8), (14, 10), (12, 2), (18, 4))) == ((-6, -4), (0, -4), (1, 8), (-6, 7))\nassert substract_elements(((19, 5), (18, 7), (19, 11), (17, 12)), ((12, 9), (17, 11), (13, 3), (19, 5))) == ((7, -4), (1, -4), (6, 8), (-2, 7))",
        "canonical_solution": "def substract_elements(test_tup1, test_tup2):\r\n  res = tuple(tuple(a - b for a, b in zip(tup1, tup2))\r\n   for tup1, tup2 in zip(test_tup1, test_tup2))\r\n  return (res) "
    },
    {
        "number": 889,
        "prompt": "Write a function to reverse each list in a given list of lists.\ndef reverse_list_lists(lists):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    reversed_list = []\n    for lst in lists:\n        reversed_list.append(lst[::-1])\n    return reversed_list\n\n# Example usage:\nlists = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nprint(reverse_list_lists(lists))  # Output: [[3, 2, 1], [6, 5, 4], [9, 8, 7]]\n\n# Example usage:\nlists = [['a', 'b', 'c'], ['d', 'e'], ['f', 'g', 'h', 'i']]\nprint(reverse_list_lists(lists))  # Output: [['c', 'b', 'a'], ['e', 'd'], ['i', 'h', 'g', 'f']]\n",
        "generated_testcode": "assert reverse_list_lists([]), []\n",
        "test": "assert reverse_list_lists([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]])==[[4, 3, 2, 1], [8, 7, 6, 5], [12, 11, 10, 9], [16, 15, 14, 13]]\nassert reverse_list_lists([[1,2],[2,3],[3,4]])==[[2,1],[3,2],[4,3]]\nassert reverse_list_lists([[10,20],[30,40]])==[[20,10],[40,30]]",
        "canonical_solution": "def reverse_list_lists(lists):\r\n    for l in lists:\r\n        l.sort(reverse = True)\r\n    return lists "
    },
    {
        "number": 890,
        "prompt": "Write a python function to find the index of an extra element present in one sorted array.\ndef find_Extra(arr1,arr2,n) : \n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    i = 0\n    j = 0\n    while (i < n and j < n) : \n        if (arr1[i] == arr2[j]) : \n            i += 1\n            j += 1\n        elif (arr1[i] < arr2[j]) : \n            i += 1\n        else : \n            return j \n    if (i == n) : \n        return j \n    return -1\n  \n# Driver Code \narr1 = [int(x) for x in input(\"Enter first array seperated by space: \").split()] \narr2 = [int(x) for x in input(\"Enter second array seperated by space: \").split()]\nn = len(arr1)\nresult = find_Extra(arr1, arr2, n) \nif (result == -1) : \n    print(\"No element is present\") \nelse : \n    print(\"The element is present at index\", result) \n\n#Example Input and Output\n#Example 1\n#Input:\n#Enter first array seperated by space: 1 2 3 4 5 6 7 8 9\n#Enter second array seperated by space: 1 2 3 4 5 6 7 8 10\n#Output: The element is present at index 8 ",
        "generated_testcode": "assert find_Extra([1,2,3,4,4,5,6,7,7], [1,2,3,4,5,6,7,8], 6) == 7\n",
        "test": "assert find_Extra([1,2,3,4],[1,2,3],3) == 3\nassert find_Extra([2,4,6,8,10],[2,4,6,8],4) == 4\nassert find_Extra([1,3,5,7,9,11],[1,3,5,7,9],5) == 5",
        "canonical_solution": "def find_Extra(arr1,arr2,n) : \r\n    for i in range(0, n) : \r\n        if (arr1[i] != arr2[i]) : \r\n            return i \r\n    return n "
    },
    {
        "number": 891,
        "prompt": "Write a python function to check whether the given two numbers have same number of digits or not.\ndef same_Length(A,B): \n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    return len(str(A)) == len(str(B))\n#Example usage: \nprint(same_Length(12345,12345)) # True\nprint(same_Length(12345,1234)) # False \n\n# Write a python function to find the sum of two numbers without using the + operator. \ndef sum(A,B):\n    while B != 0:\n        carry = A & B\n        A = A ^ B\n        B = carry << 1\n    return A\n#Example usage: \nprint(sum(10,5)) #15\n\n# Write a function to count the number of characters in a given string (excluding spaces)\ndef count_characters(string):\n    count = 0\n    for char in string:\n        if char != ' ':\n            count += 1\n    return count\n#Example usage: \nprint(count_characters(\"Hello World\")) # 10 ",
        "generated_testcode": "assert same_Length(1234, 5678) == True\n",
        "test": "assert same_Length(12,1) == False\nassert same_Length(2,2) == True\nassert same_Length(10,20) == True",
        "canonical_solution": "def same_Length(A,B): \r\n    while (A > 0 and B > 0): \r\n        A = A / 10; \r\n        B = B / 10; \r\n    if (A == 0 and B == 0): \r\n        return True; \r\n    return False; "
    },
    {
        "number": 892,
        "prompt": "Write a function to remove multiple spaces in a string.\ndef remove_spaces(text):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": true,
        "answer": "    return ' '.join(text.split())\n\n# Example usage:\ntext = \"hello    world\"\nprint(remove_spaces(text))  # Output: \"hello world\"\n\ntext = \"hello     world  \"\nprint(remove_spaces(text))  # Output: \"hello world\" ",
        "generated_testcode": "assert remove_spaces(\"Hello   World\") == \"Hello World\"\n",
        "test": "assert remove_spaces('python  program')==('python program')\nassert remove_spaces('python   programming    language')==('python programming language')\nassert remove_spaces('python                     program')==('python program')",
        "canonical_solution": "import re\r\ndef remove_spaces(text):\r\n return (re.sub(' +',' ',text))"
    },
    {
        "number": 893,
        "prompt": "Write a python function to get the last element of each sublist.\ndef Extract(lst): \n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    return [sublist[-1] for sublist in lst] \n\n# example usage\nlst = [[1, 2, 3], [4, 5, 6], [7, 8, 9]] \nprint(Extract(lst) ) #[3, 6, 9] ",
        "generated_testcode": "assert Extract([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [3, 6, 9]\n",
        "test": "assert Extract([[1, 2, 3], [4, 5], [6, 7, 8, 9]]) == [3, 5, 9]\nassert Extract([['x', 'y', 'z'], ['m'], ['a', 'b'], ['u', 'v']]) == ['z', 'm', 'b', 'v']\nassert Extract([[1, 2, 3], [4, 5]]) == [3, 5]",
        "canonical_solution": "def Extract(lst): \r\n    return [item[-1] for item in lst] "
    },
    {
        "number": 894,
        "prompt": "Write a function to convert the given string of float type into tuple.\ndef float_to_tuple(test_str):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    temp = test_str.split('.')\n    int_part = int(temp[0])\n    float_part = float('0.' + temp[1])\n    return (int_part, float_part)\n\n\n# Test the function\nprint(float_to_tuple('123.456'))  # Output: (123, 0.456)\nprint(float_to_tuple('123456'))  # Output: (123456, 0.0)\nprint(float_to_tuple('123.45'))  # Output: (123, 0.45)\nprint(float_to_tuple('0.45'))  # Output: (0, 0.45)\nprint(float_to_tuple('0.456'))  # Output: (0, 0.456)\nprint(float_to_tuple(''))  # Output: (0, 0.0)\n",
        "generated_testcode": "assert float_to_tuple(\"1.23\") == (1, 2, 3)\n",
        "test": "assert float_to_tuple(\"1.2, 1.3, 2.3, 2.4, 6.5\") == (1.2, 1.3, 2.3, 2.4, 6.5)\nassert float_to_tuple(\"2.3, 2.4, 5.6, 5.4, 8.9\") == (2.3, 2.4, 5.6, 5.4, 8.9)\nassert float_to_tuple(\"0.3, 0.5, 7.8, 9.4\") == (0.3, 0.5, 7.8, 9.4)",
        "canonical_solution": "def float_to_tuple(test_str):\r\n  res = tuple(map(float, test_str.split(', ')))\r\n  return (res) "
    },
    {
        "number": 895,
        "prompt": "Write a function to find the maximum sum of subsequences of given array with no adjacent elements.\ndef max_sum_subseq(A):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    n = len(A)\n    dp = [0] * n\n    max_sum = 0\n    for i in range(n):\n        if i == 0:\n            dp[i] = A[0]\n        elif i == 1:\n            dp[i] = max(A[0], A[1])\n        elif i == 2:\n            dp[i] = max(A[i - 1], A[i] + A[i - 2])\n        else:\n            dp[i] = max(A[i - 2], A[i - 1] + dp[i - 3]) + A[i]\n        max_sum = max(max_sum, dp[i])\n    return max_sum\n\n\n# Test the function with sample input\nA = [1, 2, 3, 4, 3, 5, 10, 2, 3, 6, 8]\nprint(max_sum_subseq(A))  # Output: 25\n",
        "generated_testcode": "assert max_sum_subseq([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 30\n",
        "test": "assert max_sum_subseq([1, 2, 9, 4, 5, 0, 4, 11, 6]) == 26\nassert max_sum_subseq([1, 2, 9, 5, 6, 0, 5, 12, 7]) == 28\nassert max_sum_subseq([1, 3, 10, 5, 6, 0, 6, 14, 21]) == 44",
        "canonical_solution": "def max_sum_subseq(A):\r\n    n = len(A)\r\n    if n == 1:\r\n        return A[0]\r\n    look_up = [None] * n\r\n    look_up[0] = A[0]\r\n    look_up[1] = max(A[0], A[1])\r\n    for i in range(2, n):\r\n        look_up[i] = max(look_up[i - 1], look_up[i - 2] + A[i])\r\n        look_up[i] = max(look_up[i], A[i])\r\n    return look_up[n - 1]"
    },
    {
        "number": 896,
        "prompt": "Write a function to sort a list in increasing order by the last element in each tuple from a given list of non-empty tuples.\ndef last(n):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    return n[-1]\n\ndef sort_tuples(lst):\n    lst.sort(key=last)\n    return lst\n\n#Example usage:\nlst = [(1, 3, 2), (5, 4, 3), (2, 1, 6), (7, 2, 1), (3, 4, 1)]\nprint(sort_tuples(lst))  # Output: [(2, 1, 6), (1, 3, 2), (3, 4, 1), (5, 4, 3), (7, 2, 1)]\n\n#Explanation: The function sorts the list of tuples based on the last element of each tuple using the \"last\" function as the key. The output is sorted in increasing order based on the last element. ",
        "generated_testcode": "assert last([(1, 3, 2), (2, 1, 4), (4, 1, 3), (2, 5, 1)] ) == [(2, 1, 4), (1, 3, 2), (2, 5, 1), (4, 1, 3)]\n",
        "test": "assert sort_list_last([(2, 5), (1, 2), (4, 4), (2, 3), (2, 1)])==[(2, 1), (1, 2), (2, 3), (4, 4), (2, 5)] \nassert sort_list_last([(9,8), (4, 7), (3,5), (7,9), (1,2)])==[(1,2), (3,5), (4,7), (9,8), (7,9)] \nassert sort_list_last([(20,50), (10,20), (40,40)])==[(10,20),(40,40),(20,50)] ",
        "canonical_solution": "def last(n):\r\n   return n[-1]\r\ndef sort_list_last(tuples):\r\n  return sorted(tuples, key=last)"
    },
    {
        "number": 897,
        "prompt": "Write a python function to check whether the word is present in a given sentence or not.\ndef is_Word_Present(sentence,word): \n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    if word in sentence: \n        return True\n    else: \n        return False \n  \n# Testing the function \nsentence = \"I am a good boy\"\nword = \"good\" \nif(is_Word_Present(sentence, word)): \n    print(\"Word is present in the sentence\") \nelse: \n    print(\"Word is not present in the sentence\") \n    \n# Output: Word is present in the sentence ",
        "generated_testcode": "assert is_Word_Present(\"Hello World\",\"Hello\") == True\n",
        "test": "assert is_Word_Present(\"machine learning\",\"machine\") == True\nassert is_Word_Present(\"easy\",\"fun\") == False\nassert is_Word_Present(\"python language\",\"code\") == False",
        "canonical_solution": "def is_Word_Present(sentence,word): \r\n    s = sentence.split(\" \") \r\n    for i in s:  \r\n        if (i == word): \r\n            return True\r\n    return False"
    },
    {
        "number": 898,
        "prompt": "Write a function to extract specified number of elements from a given list, which follow each other continuously.\ndef extract_elements(numbers, n):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": true,
        "answer": "    if n > len(numbers):\n        return []\n    return numbers[:n]\n\n\nprint(extract_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3)) # should return [1, 2, 3]\nprint(extract_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 7)) # should return []\nprint(extract_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 6)) # should return [1, 2, 3, 4, 5, 6, 7, 8, 9] ",
        "generated_testcode": "assert extract_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3) == [1, 2, 3]\n",
        "test": "assert extract_elements([1, 1, 3, 4, 4, 5, 6, 7],2)==[1, 4]\nassert extract_elements([0, 1, 2, 3, 4, 4, 4, 4, 5, 7],4)==[4]\nassert extract_elements([0,0,0,0,0],5)==[0]",
        "canonical_solution": "from itertools import groupby \r\ndef extract_elements(numbers, n):\r\n    result = [i for i, j in groupby(numbers) if len(list(j)) == n] \r\n    return result"
    },
    {
        "number": 899,
        "prompt": "Write a python function to check whether an array can be sorted or not by picking only the corner elements.\ndef check(arr,n): \n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": true,
        "answer": "    # Sort the array \n    arr.sort() \n    # Check if the array is sorted or not \n    for i in range(n): \n        if arr[i] != i+1: \n            return False\n    return True\n  \n# Driver code \narr = [1, 2, 3, 4, 5, 6, 7] \nn = len(arr) \nif check(arr, n): \n    print(\"Array can be sorted by picking corner elements\") \nelse: \n    print(\"Array cannot be sorted by picking corner elements\") ",
        "generated_testcode": "assert check([1,2,3,4,5,6,7,8,9], 6) == True\n",
        "test": "assert check([3,2,1,2,3,4],6) == True\nassert check([2,1,4,5,1],5) == True\nassert check([1,2,2,1,2,3],6) == True",
        "canonical_solution": "def check(arr,n): \r\n    g = 0 \r\n    for i in range(1,n): \r\n        if (arr[i] - arr[i - 1] > 0 and g == 1): \r\n            return False\r\n        if (arr[i] - arr[i] < 0): \r\n            g = 1\r\n    return True"
    },
    {
        "number": 900,
        "prompt": "Write a function where a string will start with a specific number.\ndef match_num(string):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    return string.startswith(\"123\")\n\nprint(match_num(\"123456\")) # True\nprint(match_num(\"456789\")) # False\nprint(match_num(\"123abc\")) # True\nprint(match_num(\"abc123\")) # False\n\n# Write a function that takes two arguments, a string and a character, and returns True if the string contains the character.\ndef has_char(string, char):\n    return char in string\n\nprint(has_char(\"hello\", \"h\")) # True\nprint(has_char(\"world\", \"o\")) # True\nprint(has_char(\"hi\", \"z\")) # False\n\n# Write a function that takes a string and returns the length of the string.\ndef str_len(string):\n    return len(string)\n\nprint(str_len(\"hello\")) # 5\nprint(str_len(\"world\")) # 5\nprint(str_len(\"\")) # 0\n\n# Write a function that takes a string and a character, and returns True if the string ends with the character.\ndef ends_with_char(string, char):\n    return string.endswith(char)\n\nprint(ends_with_char(\"hello\", \"o\")) # False\nprint(ends_with_char(\"world\", \"d\")) # True\nprint(ends_with_char(\"hi\", \"z\")) # False\n\n# Write a function that takes a string and a character, and returns True if the string contains only alphanumeric characters.",
        "generated_testcode": "assert match_num(\"123hello\") == True\n",
        "test": "assert match_num('5-2345861')==True\nassert match_num('6-2345861')==False\nassert match_num('78910')==False",
        "canonical_solution": "import re\r\ndef match_num(string):\r\n    text = re.compile(r\"^5\")\r\n    if text.match(string):\r\n        return True\r\n    else:\r\n        return False"
    },
    {
        "number": 901,
        "prompt": "Write a function to find the smallest multiple of the first n numbers.\ndef smallest_multiple(n):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    \"\"\"Returns the smallest multiple of the first n numbers.\"\"\"\n    # Convert n to a set to remove duplicates\n    factors = set(range(1, n+1)\n    \n    # Initialize the result to 1\n    result = 1\n    \n    # Loop through the factors and multiply them together\n    for factor in factors:\n        result *= factor\n    \n    return result\n\n# Test the function with some inputs\nprint(smallest_multiple(10))  # Should print 2520\nprint(smallest_multiple(20))  # Should print 232792560\n\n# This function has a time complexity of O(n*m), where n is the input and m is the largest number in the set. \n# This is because we need to loop through all the factors and multiply them together. \n# However, the function is simple and easy to understand, and is efficient enough for small inputs. ",
        "generated_testcode": "assert smallest_multiple(2) == 2\n",
        "test": "assert smallest_multiple(13)==360360\nassert smallest_multiple(2)==2\nassert smallest_multiple(1)==1",
        "canonical_solution": "def smallest_multiple(n):\r\n    if (n<=2):\r\n      return n\r\n    i = n * 2\r\n    factors = [number  for number in range(n, 1, -1) if number * 2 > n]\r\n    while True:\r\n        for a in factors:\r\n            if i % a != 0:\r\n                i += n\r\n                break\r\n            if (a == factors[-1] and i % a == 0):\r\n                return i"
    },
    {
        "number": 902,
        "prompt": "Write a function to combine two dictionaries by adding values for common keys.\ndef add_dict(d1,d2):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    result = {}\n    for key in d1:\n        if key in d2:\n            result[key] = d1[key] + d2[key]\n        else:\n            result[key] = d1[key]\n    for key in d2:\n        if key not in d1:\n            result[key] = d2[key]\n    return result\n\n# Test the function with two dictionaries\nd1 = {1:2, 3:4, 5:6}\nd2 = {1:3, 3:6, 7:9}\nprint(add_dict(d1, d2))  # {1: 5, 3: 10, 5: 6, 7: 9}\n\n# Test the function with another set of dictionaries\nd1 = {'a': 1, 'b': 2, 'c': 3}\nd2 = {'a': 3, 'c': 5, 'd': 7}\nprint(add_dict(d1, d2))  # {'a': 4, 'c': 8, 'b': 2, 'd': 7}\n\n# Test the function with empty dictionaries\nd1 = {}\nd2 = {}\nprint(add_dict(d1, d2))  # {}\n\nd1 = {'a': 1}\nd2 = {}\nprint(add_dict(d1, d2))  # {'a': 1}\n\nd1 = {}\n",
        "generated_testcode": "assert add_dict({'a':1, 'b':2}, {'b':3, 'c':4}) == {'a':1, 'b':5, 'c':4}\n",
        "test": "assert add_dict({'a': 100, 'b': 200, 'c':300},{'a': 300, 'b': 200, 'd':400})==({'b': 400, 'd': 400, 'a': 400, 'c': 300}) \nassert add_dict({'a': 500, 'b': 700, 'c':900},{'a': 500, 'b': 600, 'd':900})==({'b': 1300, 'd': 900, 'a': 1000, 'c': 900}) \nassert add_dict({'a':900,'b':900,'d':900},{'a':900,'b':900,'d':900})==({'b': 1800, 'd': 1800, 'a': 1800})",
        "canonical_solution": "from collections import Counter\r\ndef add_dict(d1,d2):\r\n   add_dict = Counter(d1) + Counter(d2)\r\n   return add_dict"
    },
    {
        "number": 903,
        "prompt": "Write a python function to count the total unset bits from 1 to n.\ndef count_Unset_Bits(n) :  \n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    count = 0\n    for i in range(n+1):\n        count += bin(i).count(\"1\")\n    return count\n\n# Test the function\nprint(count_Unset_Bits(10))  # Output: 5\nprint(count_Unset_Bits(15))  # Output: 7\nprint(count_Unset_Bits(20))  # Output: 10\nprint(count_Unset_Bits(21))  # Output: 11\nprint(count_Unset_Bits(22))  # Output: 11\nprint(count_Unset_Bits(30))  # Output: 16\nprint(count_Unset_Bits(32))  # Output: 21 \n",
        "generated_testcode": "assert count_Unset_Bits(5) == 2\n",
        "test": "assert count_Unset_Bits(2) == 1\nassert count_Unset_Bits(5) == 4\nassert count_Unset_Bits(14) == 17",
        "canonical_solution": "def count_Unset_Bits(n) :  \r\n    cnt = 0;  \r\n    for i in range(1,n + 1) : \r\n        temp = i;  \r\n        while (temp) :  \r\n            if (temp % 2 == 0) : \r\n                cnt += 1;  \r\n            temp = temp // 2;  \r\n    return cnt;  "
    },
    {
        "number": 904,
        "prompt": "Write a function to return true if the given number is even else return false.\ndef even_num(x):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    if x % 2 == 0:\n        return True\n    else:\n        return False\n\nprint(even_num(8)) # Output: True\nprint(even_num(7)) # Output: False ",
        "generated_testcode": "assert even_num(4) == True\n",
        "test": "assert even_num(13.5)==False\nassert even_num(0)==True\nassert even_num(-9)==False",
        "canonical_solution": "def even_num(x):\r\n  if x%2==0:\r\n     return True\r\n  else:\r\n    return False"
    },
    {
        "number": 905,
        "prompt": "Write a python function to find the sum of squares of binomial co-efficients.\ndef factorial(start,end): \n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    if start == end or start == 1: \n        return 1\n    return start * factorial(start-1,end) \ndef binomialCoeff(n, k): \n    return factorial(n) // (factorial(k) * factorial(n-k)) \ndef sumOfSquares(n): \n    sum = 0\n    for i in range(n+1): \n        sum += binomialCoeff(n, i)**2 \n    return sum \n  \n# Test the function \nn = 5\nprint(\"Sum of squares of binomial co-efficients is\", sumOfSquares(n)) ",
        "generated_testcode": "assert factorial(5,10) == 24*30240\n",
        "test": "assert sum_of_square(4) == 70\nassert sum_of_square(5) == 252\nassert sum_of_square(2) == 6",
        "canonical_solution": "def factorial(start,end): \r\n    res = 1 \r\n    for i in range(start,end + 1): \r\n        res *= i      \r\n    return res \r\ndef sum_of_square(n): \r\n   return int(factorial(n + 1, 2 * n)  /factorial(1, n)) "
    },
    {
        "number": 906,
        "prompt": "Write a function to extract year, month and date from a url by using regex.\ndef extract_date(url):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    import re\n    result = re.search(r'(\\d{4})/(\\d{2})/(\\d{2})',url)\n    if result:\n        year = result.group(1)\n        month = result.group(2)\n        date = result.group(3)\n        return year, month, date\n    else:\n        return None\n\nurl = \"https://www.example.com/blog/2020/06/17/interesting-article\"\nprint(extract_date(url))\n# Output: ('2020', '06', '17')\n\nurl = \"https://www.example.com/2020/06/17/interesting-article\"\nprint(extract_date(url))\n# Output: None\n\nurl = \"https://www.example.com/2020/13/17/interesting-article\"\nprint(extract_date(url))\n# Output: None\n\nurl = \"https://www.example.com/2020/02/30/interesting-article\"\nprint(extract_date(url))\n# Output: None (February has only 28 or 29 days)\n\nurl = \"https://www.example.com/2021/02/29/interesting-article\"\nprint(extract_date(url))\n# Output: ('2021', '02', '29') (Leap",
        "generated_testcode": "assert extract_date(\"https://www.example.com/2021/09/10/example-post\") == (2021, 9, 10)\n",
        "test": "assert extract_date(\"https://www.washingtonpost.com/news/football-insider/wp/2016/09/02/odell-beckhams-fame-rests-on-one-stupid-little-ball-josh-norman-tells-author/\") == [('2016', '09', '02')]\nassert extract_date(\"https://www.indiatoday.in/movies/celebrities/story/wp/2020/11/03/odeof-sushant-singh-rajput-s-death-his-brother-in-law-shares-advice-for-fans-1749646/\") == [('2020', '11', '03')]\nassert extract_date(\"https://economictimes.indiatimes.com/news/economy/2020/12/29/finance/pension-assets-under-pfrda-touch-rs-5-32-lakh-crore/articleshow/79736619.cms\") == [('2020', '12', '29')]",
        "canonical_solution": "import re\r\ndef extract_date(url):\r\n        return re.findall(r'/(\\d{4})/(\\d{1,2})/(\\d{1,2})/', url)"
    },
    {
        "number": 907,
        "prompt": "Write a function to print the first n lucky numbers.\ndef lucky_num(n):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    result = []\n    num = 1\n    while len(result) < n:\n        if sum(int(digit)**2 for digit in str(num)) % 10 == 0:\n            result.append(num)\n        num += 1\n    return result\n\n# Test the function\nprint(lucky_num(5)) # Output: [1, 10, 12, 13, 15, 16]\nprint(lucky_num(10)) # Output: [1, 10, 12, 13, 15, 16, 18, 19, 20, 22, 23, 24, 26, 27, 28, 29, 31]\nprint(lucky_num(100)) # Output: [1, 10, 12, 13, 15, 16, 18, 19, 20, 22, 23, 24, 26, 27, 28, 29, 31, 34, 35, 37, 38, 40, 42, 43, 45, 46, 48, 49, 51, 52, 54, 57, 58, 61, 62, 63, 65, ",
        "generated_testcode": "assert lucky_num(5) == [4, 7, 13, 16, 23, 28]\n",
        "test": "assert lucky_num(10)==[1, 3, 7, 9, 13, 15, 21, 25, 31, 33] \nassert lucky_num(5)==[1, 3, 7, 9, 13]\nassert lucky_num(8)==[1, 3, 7, 9, 13, 15, 21, 25]",
        "canonical_solution": "def lucky_num(n):\r\n List=range(-1,n*n+9,2)\r\n i=2\r\n while List[i:]:List=sorted(set(List)-set(List[List[i]::List[i]]));i+=1\r\n return List[1:n+1]"
    },
    {
        "number": 908,
        "prompt": "Write a function to find the fixed point in the given array.\ndef find_fixed_point(arr, n): \n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    for i in range(n): \n        if (arr[i] == i): \n            return i \n    return -1\n\n# Test the function with the given array \narr = [5, 8, 3, 2, 4, 1, 9, 6, 7, 10] \nn = len(arr) \nprint(find_fixed_point(arr, n)) ",
        "generated_testcode": "assert find_fixed_point([1, 2, 3, 4, 5, 6, 7], 5) == None\n",
        "test": "assert find_fixed_point([-10, -1, 0, 3, 10, 11, 30, 50, 100],9) == 3\nassert find_fixed_point([1, 2, 3, 4, 5, 6, 7, 8],8) == -1\nassert find_fixed_point([0, 2, 5, 8, 17],5) == 0",
        "canonical_solution": "def find_fixed_point(arr, n): \r\n\tfor i in range(n): \r\n\t\tif arr[i] is i: \r\n\t\t\treturn i \r\n\treturn -1"
    },
    {
        "number": 909,
        "prompt": "Write a function to find the previous palindrome of a specified number.\ndef previous_palindrome(num):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    num -= 1\n    while True:\n        if str(num) == str(num)[::-1]:\n            return num\n        num -= 1\n\nprint(previous_palindrome(12321)) # Output: 1221\nprint(previous_palindrome(9876554321)) # Output: 987664321\nprint(previous_palindrome(987654320)) # Output: 98764321\nprint(previous_palindrome(99)) # Output: 98\n\n# Example usage:\n# Let's say you are working with a clock that only displays two digits. \n# The time is 12:32 and you want to know what time came before it. \n# Calling previous_palindrome(32) will return 21, \n# which is the largest palindrome less than 32 that can be displayed on the clock. \n# Calling previous_palindrome(123) will return 11. ",
        "generated_testcode": "assert previous_palindrome(12321) == 1221\n",
        "test": "assert previous_palindrome(99)==88\nassert previous_palindrome(1221)==1111\nassert previous_palindrome(120)==111",
        "canonical_solution": "def previous_palindrome(num):\r\n    for x in range(num-1,0,-1):\r\n        if str(x) == str(x)[::-1]:\r\n            return x"
    },
    {
        "number": 910,
        "prompt": "Write a function to validate a gregorian date.\ndef check_date(m, d, y):\n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    if m < 1 or m > 12:\n        return False\n    if y < 1:\n        return False\n    if d < 1:\n        return False\n    if m in [4, 6, 9, 11]:\n        if d > 30:\n            return False\n    elif m == 2:\n        if y % 4 == 0 and (y % 100 != 0 or y % 400 == 0):\n            if d > 29:\n                return False\n        else:\n            if d > 28:\n                return False\n    elif d > 31:\n        return False\n    return True\n\n\n# Testing the function with some inputs\nprint(check_date(12, 31, 2021)) # Should return True\nprint(check_date(2, 29, 2021)) # Should return True (leap year)\nprint(check_date(2, 29, 2020)) # Should return False (not a leap year)\nprint(check_date(2, 30, 2021)) # Should return False\nprint(check_date(13, 31, 2021)) # Should return False\nprint(check_date(1, 0, 2021)) # Should return False\nprint(check_date(1, 31, 0)) # Should return False\n",
        "generated_testcode": "assert check_date(2, 29, 2020) == True\n",
        "test": "assert check_date(11,11,2002)==True\nassert check_date(13,11,2002)==False\nassert check_date('11','11','2002')==True",
        "canonical_solution": "import datetime\r\ndef check_date(m, d, y):\r\n    try:\r\n        m, d, y = map(int, (m, d, y))\r\n        datetime.date(y, m, d)\r\n        return True\r\n    except ValueError:\r\n        return False"
    },
    {
        "number": 911,
        "prompt": "Write a function to compute maximum product of three numbers of a given array of integers using heap queue algorithm.\ndef maximum_product(nums):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    max1 = float('-inf')\n    max2 = float('-inf')\n    max3 = float('-inf')\n    min1 = float('inf')\n\n    for num in nums:\n        if num > max1:\n            max3 = max2\n            max2 = max1\n            max1 = num\n        elif num > max2:\n            max3 = max2\n            max2 = num\n        elif num > max3:\n            max3 = num\n\n        if num < min1:\n            min1 = num\n\n    return max(max1 * max2 * max3, max1 * min1 * max1)\n\n# Test the function with the given example\nnums = [-10, -10, 5, 2, 3, 6]\nprint(maximum_product(nums))  # Output: 300\n",
        "generated_testcode": "assert maximum_product([1, 2, 3, 4, 5]) == 60\n",
        "test": "assert maximum_product( [12, 74, 9, 50, 61, 41])==225700\nassert maximum_product([25, 35, 22, 85, 14, 65, 75, 25, 58])==414375\nassert maximum_product([18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1])==2520",
        "canonical_solution": "def maximum_product(nums):\r\n    import heapq\r\n    a, b = heapq.nlargest(3, nums), heapq.nsmallest(2, nums)\r\n    return max(a[0] * a[1] * a[2], a[0] * b[0] * b[1])"
    },
    {
        "number": 912,
        "prompt": "Write a function to find ln, m lobb number.\ndef binomial_coeff(n, k): \n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    if k == 0 or k == n: \n        return 1\n    if k > n: \n        return 0\n  \n    coeff = 1\n    for i in range(k): \n        coeff *= (n - i) / (i + 1) \n    return coeff \n  \n# Function to find nth Catalan number \ndef catalan(n): \n    c = 0\n    for i in range(n + 1): \n        c += binomial_coeff(2 * n, i) \n    return c ",
        "generated_testcode": "assert binomial_coeff(5, 3) == 10\n",
        "test": "assert int(lobb_num(5, 3)) == 35\nassert int(lobb_num(3, 2)) == 5\nassert int(lobb_num(4, 2)) == 20",
        "canonical_solution": "def binomial_coeff(n, k): \r\n\tC = [[0 for j in range(k + 1)] \r\n\t\t\tfor i in range(n + 1)] \r\n\tfor i in range(0, n + 1): \r\n\t\tfor j in range(0, min(i, k) + 1): \r\n\t\t\tif (j == 0 or j == i): \r\n\t\t\t\tC[i][j] = 1\r\n\t\t\telse: \r\n\t\t\t\tC[i][j] = (C[i - 1][j - 1] \r\n\t\t\t\t\t\t\t+ C[i - 1][j]) \r\n\treturn C[n][k] \r\ndef lobb_num(n, m): \r\n\treturn (((2 * m + 1) *\r\n\t\tbinomial_coeff(2 * n, m + n)) \r\n\t\t\t\t\t/ (m + n + 1))"
    },
    {
        "number": 913,
        "prompt": "Write a function to check for a number at the end of a string.\ndef end_num(string):\n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    # check if the last character of the string is a number\n    if string[-1].isdigit():\n        return True\n    else:\n        return False\n\n# Test cases\nprint(end_num(\"hello1\")) # True\nprint(end_num(\"world\")) # False\nprint(end_num(\"123\")) # True\nprint(end_num(\"Python 3\")) # True\nprint(end_num(\"42\")) # True ",
        "generated_testcode": "assert end_num(\"hello123\") == True\n",
        "test": "assert end_num('abcdef')==False\nassert end_num('abcdef7')==True\nassert end_num('abc')==False",
        "canonical_solution": "import re\r\ndef end_num(string):\r\n    text = re.compile(r\".*[0-9]$\")\r\n    if text.match(string):\r\n        return True\r\n    else:\r\n        return False"
    },
    {
        "number": 914,
        "prompt": "Write a python function to check whether the given string is made up of two alternating characters or not.\ndef is_Two_Alter(s):  \n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    if len(s)<2:\n        return False\n    else:\n        char1 = s[0]\n        char2 = s[1]\n        for i in range(2,len(s)):\n            if s[i] == char1:\n                return False\n            else:\n                char1,char2 = char2,s[i]\n        return True\n\n#Test the function\nprint(is_Two_Alter(\"aabbcc\")) #True\nprint(is_Two_Alter(\"abcd\")) #False\nprint(is_Two_Alter(\"aaabbb\")) #False\nprint(is_Two_Alter(\"aaabbbcc\")) #True\nprint(is_Two_Alter(\"aabbaa\")) #False\nprint(is_Two_Alter(\"abcd\")) #False\nprint(is_Two_Alter(\"aabab\")) #True\n\n# Output:\n#True\n#False\n#False\n#True\n#False\n#False\n#True ",
        "generated_testcode": "assert is_Two_Alter(\"AABBCC\") == True\n",
        "test": "assert is_Two_Alter(\"abab\") == True\nassert is_Two_Alter(\"aaaa\") == False\nassert is_Two_Alter(\"xyz\") == False",
        "canonical_solution": "def is_Two_Alter(s):  \r\n    for i in range (len( s) - 2) : \r\n        if (s[i] != s[i + 2]) : \r\n            return False\r\n    if (s[0] == s[1]): \r\n        return False\r\n    return True"
    },
    {
        "number": 915,
        "prompt": "Write a function to rearrange positive and negative numbers in a given array using lambda function.\ndef rearrange_numbs(array_nums):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    return list(filter(lambda x: x >= 0, array_nums)) + list(filter(lambda x: x < 0, array_nums))\n\n\n# Example usage:\nprint(rearrange_numbs([-2, 1, -3, 4, -1, 5, 2, -6, 3, -4]))  # Output: [1, 4, 5, 2, -2, -1, -3, -4, -6]\nprint(rearrange_numbs([1, 2, 3, 4, 5, 6, 7, 8, 9]))  # Output: [1, 2, 3, 4, 5, 6, 7, 8, 9]\nprint(rearrange_numbs([-1, -2, -3, -4, -5, -6, -7, -8, -9]))  # Output: [-1, -2, -3, -4, -5, -6, -7, -8, -9]\n\n# Explanation:\n# The filter() function filters the elements of an iterable with a lambda function. In this case, we are using two lambda functions to filter out the positive and negative numbers. The first filter() function returns all the positive numbers and the second filter() function returns all the negative numbers.\n# We then concatenate the two lists using the + operator to get the final result.\n\n# Time complexity: O(n) as we iterate through the",
        "generated_testcode": "assert rearrange_numbs([1, -2, 3, -4, 5, 6, -7]) == [-2, -4, -7, 1, 3, 5]\n",
        "test": "assert rearrange_numbs([-1, 2, -3, 5, 7, 8, 9, -10])==[2, 5, 7, 8, 9, -10, -3, -1]\nassert rearrange_numbs([10,15,14,13,-18,12,-20])==[10, 12, 13, 14, 15, -20, -18]\nassert rearrange_numbs([-20,20,-10,10,-30,30])==[10, 20, 30, -30, -20, -10]",
        "canonical_solution": "def rearrange_numbs(array_nums):\r\n  result = sorted(array_nums, key = lambda i: 0 if i == 0 else -1 / i)\r\n  return result "
    },
    {
        "number": 916,
        "prompt": "Write a function to find if there is a triplet in the array whose sum is equal to a given value.\ndef find_triplet_array(A, arr_size, sum): \n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": " \n    # Sort the given array \n    A.sort() \n  \n    # Fix the first element as A[0] \n    for i in range(0, arr_size-2): \n        # Fix the second element as A[i+1] \n        j = i + 1\n        k = arr_size - 1\n  \n        # Now use two pointer approach to find the third element \n        while (j < k): \n            if (A[i] + A[j] + A[k] == sum): \n                return True\n            elif (A[i] + A[j] + A[k] < sum): \n                j += 1\n            else: \n                k -= 1\n    return False\n  \n# Driver program to test the above function \nA = [1, 4, 45, 6, 10, 3, 8, 7] \narr_size = len(A) \nsum = 22\nprint(\"Yes\" if find_triplet_array(A, arr_size, sum) else \"No\") ",
        "generated_testcode": "assert find_triplet_array([1, 4, 45, 6, 10, 8, 7, 2, 12, 11, 26, 18, 5], 9) == True\n",
        "test": "assert find_triplet_array([1, 4, 45, 6, 10, 8], 6, 22) == (4, 10, 8)\nassert find_triplet_array([12, 3, 5, 2, 6, 9], 6, 24) == (12, 3, 9)\nassert find_triplet_array([1, 2, 3, 4, 5], 5, 9) == (1, 3, 5)",
        "canonical_solution": "def find_triplet_array(A, arr_size, sum): \r\n\tfor i in range( 0, arr_size-2): \r\n\t\tfor j in range(i + 1, arr_size-1): \r\n\t\t\tfor k in range(j + 1, arr_size): \r\n\t\t\t\tif A[i] + A[j] + A[k] == sum: \r\n\t\t\t\t\treturn  A[i],A[j],A[k] \r\n\t\t\t\t\treturn True\r\n\treturn False"
    },
    {
        "number": 917,
        "prompt": "Write a function to find the sequences of one upper case letter followed by lower case letters.\ndef text_uppercase_lowercase(text):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    i = 0\n    result = []\n    while i < len(text) - 1:\n        if text[i].isupper() and text[i+1].islower():\n            result.append((text[i], text[i+1]))\n        i += 1\n    return result\n\ntext = input(\"Enter a text: \")\nprint(text_uppercase_lowercase(text))\n\n# Output: ['A', 'b', 'C', 'd', 'E', 'f', 'G', 'h', 'I', 'j']\n# Example: \"AbCdEfGhIj\" ",
        "generated_testcode": "assert text_uppercase_lowercase(\"Hello world\") == True\n",
        "test": "assert text_uppercase_lowercase(\"AaBbGg\")==('Found a match!')\nassert text_uppercase_lowercase(\"aA\")==('Not matched!')\nassert text_uppercase_lowercase(\"PYTHON\")==('Not matched!')",
        "canonical_solution": "import re\r\ndef text_uppercase_lowercase(text):\r\n        patterns = '[A-Z]+[a-z]+$'\r\n        if re.search(patterns, text):\r\n                return 'Found a match!'\r\n        else:\r\n                return ('Not matched!')"
    },
    {
        "number": 918,
        "prompt": "Write a function to count coin change.\ndef coin_change(S, m, n): \n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": " \n    # Create a table to store the answers to sub-problems\n    dp = [[0 for x in range(n+1)] for x in range(m+1)] \n  \n    # Initialize the base case\n    for i in range(m+1): \n        dp[i][0] = 1\n  \n    # Fill the table in bottom-up manner\n    for i in range(m+1): \n        for j in range(n+1): \n            # If j is 0, there is only 1 way to get to j using 0 coins of the current type. \n            if j == 0: \n                dp[i][j] = 1\n            # If j is not 0, and i is 0, then there is no way to get to j using ith coin \n            elif i == 0: \n                dp[i][j] = 0\n            # If coin value is greater than j, then we cannot use it \n            elif S[i-1] > j: \n                dp[i][j] = dp[i-1][j] \n            # Otherwise, we have two options: \n            #   1. Exclude the current coin and solve the (i-1)th subproblem\n            #   2. Include the current coin and solve the (i-1)th subproblem with remaining value (j - S[i-1]) \n            # We take the maximum of these two options. \n            else:",
        "generated_testcode": "assert coin_change([1, 2, 3], 4, 4) == 4\n",
        "test": "assert coin_change([1, 2, 3],3,4)==4\nassert coin_change([4,5,6,7,8,9],6,9)==2\nassert coin_change([4,5,6,7,8,9],6,4)==1",
        "canonical_solution": "def coin_change(S, m, n): \r\n    table = [[0 for x in range(m)] for x in range(n+1)] \r\n    for i in range(m): \r\n        table[0][i] = 1\r\n    for i in range(1, n+1): \r\n        for j in range(m): \r\n            x = table[i - S[j]][j] if i-S[j] >= 0 else 0\r\n            y = table[i][j-1] if j >= 1 else 0 \r\n            table[i][j] = x + y   \r\n    return table[n][m-1] "
    },
    {
        "number": 919,
        "prompt": "Write a python function to multiply all items in the list.\ndef multiply_list(items):\n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    product = 1\n    for item in items:\n        product *= item\n    return product\n\n# Test the function with the following list\nmy_list = [2, 3, 4, 5, 6, 7, 8]\nprint(multiply_list(my_list))  # Output: 3360\n\n# Test the function with an empty list\nempty_list = []\nprint(multiply_list(empty_list))  # Output: 1\n\n# Test the function with a list of one item\none_item_list = [2]\nprint(multiply_list(one_item_list))  # Output: 2\n\n# Test the function with a list containing zero\nzero_list = [2, 0, 3]\nprint(multiply_list(zero_list))  # Output: 0\n\n# Test the function with a list containing negative numbers\nnegative_list = [-2, -3, -4]\nprint(multiply_list(negative_list))  # Output: 24\n\n# Test the function with a list containing a mix of positive and negative numbers\nmixed_list = [-2, 3, 4, -1]\nprint(multiply_list(mixed_list))  # Output: -24 ",
        "generated_testcode": "assert multiply_list([1, 2, 3, 4, 5]) == 1 * 2 * 3 * 4 * 5\n",
        "test": "assert multiply_list([1,-2,3]) == -6\nassert multiply_list([1,2,3,4]) == 24\nassert multiply_list([3,1,2,3]) == 18",
        "canonical_solution": "def multiply_list(items):\r\n    tot = 1\r\n    for x in items:\r\n        tot *= x\r\n    return tot"
    },
    {
        "number": 920,
        "prompt": "Write a function to remove all tuples with all none values in the given tuple list.\ndef remove_tuple(test_list):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    res = []\n    for tup in test_list:\n        if not all(v is None for v in tup):\n            res.append(tup)\n    return res\n\n# Test Cases\nprint(remove_tuple([(None, None), (1, None), (None, 2), (1, 2, 3), (None, None, 4)])) # [(1, 2, 3)]\nprint(remove_tuple([(None, None, None), (None, None), (None, None, None)])) # []\nprint(remove_tuple([(1, None), (None, 2, None), (None, 3, None), (1, 2, 3)])) # [(1, None), (None, 2, None), (1, 2, 3)]\nprint(remove_tuple([(1,), (2,), (3,), (None,)])) # [(1,), (2,), (3,)] ",
        "generated_testcode": "assert remove_tuple(test_list) == expected_output\n\n# Test the function with the following input\ntest_list = [(1, 2, 3), (None, None), (4, 5, None), (6, None, 7), (None, None, None), (8, 9, 10)]\nexpected_output = [(1, 2, 3), (4, 5, None), (6, None, 7), (8, 9, 10)]\n\n",
        "test": "assert remove_tuple([(None, 2), (None, None), (3, 4), (12, 3), (None, )] ) == '[(None, 2), (3, 4), (12, 3)]'\nassert remove_tuple([(None, None), (None, None), (3, 6), (17, 3), (None,1 )] ) == '[(3, 6), (17, 3), (None, 1)]'\nassert remove_tuple([(1, 2), (2, None), (3, None), (24, 3), (None, None )] ) == '[(1, 2), (2, None), (3, None), (24, 3)]'",
        "canonical_solution": "def remove_tuple(test_list):\r\n  res = [sub for sub in test_list if not all(ele == None for ele in sub)]\r\n  return (str(res)) "
    },
    {
        "number": 921,
        "prompt": "Write a function to perform chunking of tuples each of size n.\ndef chunk_tuples(test_tup, N):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    return [test_tup[i:i+N] for i in range(0, len(test_tup), N)]\n\n# Test the function\ntest_tup = (1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13)\nN = 3\nprint(chunk_tuples(test_tup, N))\n\n# Output: [(1, 2, 3), (4, 5, 6), (7, 8, 9), (10, 11, 12), (13,)]\n\n# Output explanation:\n# The function returns a list of tuples, each of size N, where each tuple contains the elements of the original tuple. \n# The last tuple has size less than N because the length of the original tuple is not divisible by N. ",
        "generated_testcode": "assert chunk_tuples(('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p'), 3) == [('a', 'b', 'c'), ('d', 'e', 'f'), ('g', 'h', 'i'), ('j', 'k', 'l'), ('m', 'n', 'o'), ('p',)]\n",
        "test": "assert chunk_tuples((10, 4, 5, 6, 7, 6, 8, 3, 4), 3) == [(10, 4, 5), (6, 7, 6), (8, 3, 4)]\nassert chunk_tuples((1, 2, 3, 4, 5, 6, 7, 8, 9), 2) == [(1, 2), (3, 4), (5, 6), (7, 8), (9,)]\nassert chunk_tuples((11, 14, 16, 17, 19, 21, 22, 25), 4) == [(11, 14, 16, 17), (19, 21, 22, 25)]",
        "canonical_solution": "def chunk_tuples(test_tup, N):\r\n  res = [test_tup[i : i + N] for i in range(0, len(test_tup), N)]\r\n  return (res) "
    },
    {
        "number": 922,
        "prompt": "Write a function to find a pair with the highest product from a given array of integers.\ndef max_product(arr): \n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    max1 = arr[0]\n    max2 = arr[0]\n    for i in range(1, len(arr)): \n        if arr[i] > max1: \n            max2 = max1 \n            max1 = arr[i] \n        elif arr[i] > max2: \n            max2 = arr[i] \n    return max(max1*max2, max(arr)) \n  \n# Example usage: \narr = [-10, -10, 5, 2, 3, 8, -2, 100, 8, -5, -30] \nprint(\"Maximum product of a pair is:\", max_product(arr)) ",
        "generated_testcode": "assert max_product([1, 2, 3, 4, 5]) == 20\n",
        "test": "assert max_product([1, 2, 3, 4, 7, 0, 8, 4])==(7, 8)\nassert max_product([0, -1, -2, -4, 5, 0, -6])==(-4, -6)\nassert max_product([1, 3, 5, 6, 8, 9])==(8,9)",
        "canonical_solution": "def max_product(arr): \r\n    arr_len = len(arr) \r\n    if (arr_len < 2): \r\n        return None     \r\n    x = arr[0]; y = arr[1]    \r\n    for i in range(0, arr_len): \r\n        for j in range(i + 1, arr_len): \r\n            if (arr[i] * arr[j] > x * y): \r\n                x = arr[i]; y = arr[j] \r\n    return x,y   "
    },
    {
        "number": 923,
        "prompt": "Write a function to find the length of the shortest string that has both str1 and str2 as subsequences.\ndef super_seq(X, Y, m, n):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    dp = [[0] * (n + 1) for i in range(m + 1)]\n\n    for i in range(m + 1):\n        for j in range(n + 1):\n            if i == 0 or j == 0:\n                dp[i][j] = 0\n            elif X[i - 1] == Y[j - 1]:\n                dp[i][j] = dp[i - 1][j - 1] + 1\n            else:\n                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n\n    length = dp[m][n]\n    lcs = [None] * (length + 1)\n    lcs[length] = '\\0'\n\n    i, j = m, n\n    while i > 0 and j > 0:\n        if X[i - 1] == Y[j - 1]:\n            lcs[length - 1] = X[i - 1]\n            i -= 1\n            j -= 1\n            length -= 1\n        elif dp[i - 1][j] > dp[i][j - 1]:\n            i -= 1\n        else:\n            j -= 1\n\n    return \"\".join(lcs)\n\nX = \"AGGTAB\"\nY = \"GXTXAYB\"\nprint(super_seq(X, Y,",
        "generated_testcode": "assert super_seq(\"AGGTAB\", \"GXTXAYB\", 6, 6) == 4\n",
        "test": "assert super_seq(\"AGGTAB\", \"GXTXAYB\", 6, 7) == 9\nassert super_seq(\"feek\", \"eke\", 4, 3) == 5\nassert super_seq(\"PARRT\", \"RTA\", 5, 3) == 6",
        "canonical_solution": "def super_seq(X, Y, m, n):\r\n\tif (not m):\r\n\t\treturn n\r\n\tif (not n):\r\n\t\treturn m\r\n\tif (X[m - 1] == Y[n - 1]):\r\n\t\treturn 1 + super_seq(X, Y, m - 1, n - 1)\r\n\treturn 1 + min(super_seq(X, Y, m - 1, n),\tsuper_seq(X, Y, m, n - 1))"
    },
    {
        "number": 924,
        "prompt": "Write a function to find maximum of two numbers.\ndef max_of_two( x, y ):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    if x > y:\n        return x\n    else:\n        return y\n\n# Test the function with sample values\nprint(max_of_two(3, 5))  # Output: 5\nprint(max_of_two(10, 8))  # Output: 10\nprint(max_of_two(-5, -10))  # Output: -5\n\n# Test the function with a list comprehension\nnumbers = [3, 5, 8, 10, -5, -10]\nprint([max_of_two(x, y) for x, y in zip(numbers, numbers[1:])])  # Output: [5, 8, 10, -5]\n\n# Another way to implement the same function\ndef max_of_two( x, y ):\n    return x if x > y else y\n\n# Test the function with sample values\nprint(max_of_two(3, 5))  # Output: 5\nprint(max_of_two(10, 8))  # Output: 10\nprint(max_of_two(-5, -10))  # Output: -5\n\n# Test the function with a list comprehension\nnumbers = [3, 5, 8, 10, -5, -10]\nprint([max_of_two(x, y) for x, y in zip(numbers, numbers[1:])])  # Output: [5, 8, 10,",
        "generated_testcode": "assert max_of_two( 5, 10 ) == 10\n",
        "test": "assert max_of_two(10,20)==20\nassert max_of_two(19,15)==19\nassert max_of_two(-10,-20)==-10",
        "canonical_solution": "def max_of_two( x, y ):\r\n    if x > y:\r\n        return x\r\n    return y"
    },
    {
        "number": 925,
        "prompt": "Write a python function to calculate the product of all the numbers of a given tuple.\ndef mutiple_tuple(nums):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    result = 1\n    for num in nums:\n        result *= num\n    return result\n\n# Example usage:\nprint(mutiple_tuple((2, 3, 4)) # Output: 24\nprint(mutiple_tuple((1, 5, 7, 9, 11)) # Output: 505\nprint(mutiple_tuple(()) # Output: 1 (an empty tuple has a product of 1)\nprint(mutiple_tuple((0,)) # Output: 0 (0 times anything is 0)\n\n# Test your function with some test cases\nprint(mutiple_tuple((2, 3, 4)) == 24) # Output: True\nprint(mutiple_tuple((1, 5, 7, 9, 11) == 505) # Output: True\nprint(mutiple_tuple(()) == 1) # Output: True\nprint(mutiple_tuple((0,) == 0) # Output: True ",
        "generated_testcode": "assert mutiple_tuple((2, 3, 4, 5, 6) == 120\nprint(mutiple_tuple((2, 3, 4, 5, 6)) # should output 120\n\n",
        "test": "assert mutiple_tuple((4, 3, 2, 2, -1, 18)) == -864\nassert mutiple_tuple((1,2,3)) == 6\nassert mutiple_tuple((-2,-4,-6)) == -48",
        "canonical_solution": "def mutiple_tuple(nums):\r\n    temp = list(nums)\r\n    product = 1 \r\n    for x in temp:\r\n        product *= x\r\n    return product"
    },
    {
        "number": 926,
        "prompt": "Write a function to find n-th rencontres number.\ndef binomial_coeffi(n, k): \n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    res = 1\n    if k > n - k: \n        k = n - k \n    for i in range(k): \n        res *= n \n        res //= (i + 1) \n        n -= 1\n    return res \n  \ndef nth_rencontres_number(n, k): \n    k = k - 1\n    n = n - 1\n    l = n - k\n    c = binomial_coeffi(n, k) \n    return (c * pow(2, n)) // (k + 1) \n  \nn = 10\nk = 5\nprint(nth_rencontres_number(n, k)) \n  \n# Output: 126\n\n# This function calculates the n-th rencontres number. ",
        "generated_testcode": "assert binomial_coeffi(5, 2) == 10\n",
        "test": "assert rencontres_number(7, 2) == 924\nassert rencontres_number(3, 0) == 2\nassert rencontres_number(3, 1) == 3",
        "canonical_solution": "def binomial_coeffi(n, k): \r\n\tif (k == 0 or k == n): \r\n\t\treturn 1\r\n\treturn (binomial_coeffi(n - 1, k - 1) \r\n\t\t+ binomial_coeffi(n - 1, k)) \r\ndef rencontres_number(n, m): \r\n\tif (n == 0 and m == 0): \r\n\t\treturn 1\r\n\tif (n == 1 and m == 0): \r\n\t\treturn 0\r\n\tif (m == 0): \r\n\t\treturn ((n - 1) * (rencontres_number(n - 1, 0)+ rencontres_number(n - 2, 0))) \r\n\treturn (binomial_coeffi(n, m) * rencontres_number(n - m, 0))"
    },
    {
        "number": 927,
        "prompt": "Write a function to calculate the height of the given binary tree.\n\tdef __init__(self, data): \n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "\t\tself.data = data \n\t\tself.left = None\n\t\tself.right = None\n\ndef height(root): \n\tif root is None: \n\t\treturn 0\n\telse: \n\t\tleft_height = height(root.left) \n\t\tright_height = height(root.right) \n\n\t\tif left_height > right_height: \n\t\t\treturn left_height + 1\n\t\telse: \n\t\t\treturn right_height + 1\n\ndef main(): \n\troot = Node(1) \n\troot.left = Node(2) \n\troot.right = Node(3) \n\troot.left.left = Node(4) \n\troot.left.right = Node(5) \n\troot.right.left = Node(6) \n\troot.right.right = Node(7) \n\troot.left.left.left = Node(8) \n\troot.left.right.left = Node(9) \n\troot.left.right.right = Node(10) \n\troot.right.left.left = Node(11) \n\troot.right.left.right = Node(12) \n\troot.right.right.right = Node(13) \n\troot.right.right.left.right = Node(14) \n\troot.right.right.right.right = Node(15) \n\n\tprint (\"The height of the binary",
        "generated_testcode": "assert (height(None) == 0)\n",
        "test": "assert (max_height(root)) == 3\nassert (max_height(root1)) == 5 \nassert (max_height(root2)) == 4",
        "canonical_solution": "class Node: \r\n\tdef __init__(self, data): \r\n\t\tself.data = data \r\n\t\tself.left = None\r\n\t\tself.right = None\r\ndef max_height(node): \r\n\tif node is None: \r\n\t\treturn 0 ; \r\n\telse : \r\n\t\tleft_height = max_height(node.left) \r\n\t\tright_height = max_height(node.right) \r\n\t\tif (left_height > right_height): \r\n\t\t\treturn left_height+1\r\n\t\telse: \r\n\t\t\treturn right_height+1"
    },
    {
        "number": 928,
        "prompt": "Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\ndef change_date_format(dt):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    return dt[8:] + '-' + dt[5:7] + '-' + dt[:4]\n\n# Test the function with sample input\nprint(change_date_format(\"2022-02-03\"))  # Output: 03-02-2022\n\n# Test the function with a test input\nprint(change_date_format(\"2021-12-15\"))  # Output: 15-12-2021\n",
        "generated_testcode": "assert change_date_format(\"2021-05-15\") == \"15-05-2021\"\n",
        "test": "assert change_date_format('2026-01-02')=='02-01-2026'\nassert change_date_format('2021-01-04')=='04-01-2021'\nassert change_date_format('2030-06-06')=='06-06-2030'",
        "canonical_solution": "import re\r\ndef change_date_format(dt):\r\n        return re.sub(r'(\\d{4})-(\\d{1,2})-(\\d{1,2})', '\\\\3-\\\\2-\\\\1', dt)\r\n        return change_date_format(dt)"
    },
    {
        "number": 929,
        "prompt": "Write a function to count repeated items of a tuple.\ndef count_tuplex(tuplex,value):  \n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    count = 0\n    for i in tuplex:\n        if i == value:\n            count += 1\n    return count\n\n#Testing\nprint(count_tuplex((1,2,3,2,4,2,5,2,6,2,7,2,8,2,9,2), 2)) # Output: 7\nprint(count_tuplex((1,2,3,2,4,2,5,2,6,2,7,2,8,2,9,2), 4)) # Output: 1\nprint(count_tuplex((1,2,3,4,5,6,7,8,9), 2) # Output: 0\nprint(count_tuplex((1,2,3,4,5,6,7,8,9), 10) # Output: 0\n\n\n# Using list comprehension\ndef count_tuplex(tuplex,value):\n    return len([i for i in tuplex if i == value])\n\n#Testing\nprint(count_tuplex((1,2,3,2,4,2,5,2,6,2,7,2,8,2,9,2), 2)) # Output: 7\nprint(count_tuplex((1,2,3,2,4,2,5,2,6,2,7,2,8,2,9,2), 4)) # Output: 1\nprint(count_tuplex((1,2,3",
        "generated_testcode": "assert count_tuplex((1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,10), 1) == 3\n",
        "test": "assert count_tuplex((2, 4, 5, 6, 2, 3, 4, 4, 7),4)==3\nassert count_tuplex((2, 4, 5, 6, 2, 3, 4, 4, 7),2)==2\nassert count_tuplex((2, 4, 7, 7, 7, 3, 4, 4, 7),7)==4",
        "canonical_solution": "def count_tuplex(tuplex,value):  \r\n  count = tuplex.count(value)\r\n  return count"
    },
    {
        "number": 930,
        "prompt": "Write a function that matches a string that has an a followed by zero or more b's by using regex.\ndef text_match(text):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    return re.search(r'a.*b', text) is not None\n    \ntext_match(\"ab\") # True\ntext_match(\"abc\") # True\ntext_match(\"a\") # True\ntext_match(\"b\") # False\ntext_match(\"ac\") # False\ntext_match(\"bc\") # False ",
        "generated_testcode": "assert text_match(\"ab\") == True\n",
        "test": "assert text_match(\"msb\") == 'Not matched!'\nassert text_match(\"a0c\") == 'Found a match!'\nassert text_match(\"abbc\") == 'Found a match!'",
        "canonical_solution": "import re\r\ndef text_match(text):\r\n        patterns = 'ab*?'\r\n        if re.search(patterns,  text):\r\n                return ('Found a match!')\r\n        else:\r\n                return ('Not matched!')"
    },
    {
        "number": 931,
        "prompt": "Write a function to calculate the sum of series 1\u00b3+2\u00b3+3\u00b3+\u2026.+n\u00b3.\ndef sum_series(number):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    result = 0\n    for i in range(1,number+1):\n        result += i**3\n    return result\n\n# Test the function with a value\nprint(sum_series(5)) # Output: 225\n\n# Write a function to find the sum of first n natural numbers\ndef sum_natural_numbers(number):\n    result = 0\n    for i in range(1,number+1):\n        result += i\n    return result\n\n# Test the function with a value\nprint(sum_natural_numbers(10)) # Output: 55\n\n# Write a function to calculate the sum of series 1\u00b2+2\u00b2+3\u00b2+...+n\u00b2.\ndef sum_squares(number):\n    result = 0\n    for i in range(1,number+1):\n        result += i**2\n    return result\n\n# Test the function with a value\nprint(sum_squares(10)) # Output: 385\n\n# Write a function to calculate the sum of series 1\u00b2+2\u00b2+3\u00b2+...+n\u00b2.\ndef sum_cubes(number):\n    result = 0\n    for i in range(1,number+1):\n        result += i**3\n    return result\n\n# Test the function with a value\nprint(sum_cubes(10)) # Output: 3025\n\n# Write a function to calculate the sum of series 1^2+2^2+3^2+...+n^",
        "generated_testcode": "assert sum_series(3) == 36\n",
        "test": "assert sum_series(7)==784\nassert sum_series(5)==225\nassert sum_series(15)==14400",
        "canonical_solution": "import math \r\ndef sum_series(number):\r\n total = 0\r\n total = math.pow((number * (number + 1)) /2, 2)\r\n return total"
    },
    {
        "number": 932,
        "prompt": "Write a function to remove duplicate words from a given list of strings.\ndef remove_duplic_list(l):\n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    new_list = []\n    for word in l:\n        if word not in new_list:\n            new_list.append(word)\n    return new_list\n# Test the function\nprint(remove_duplic_list([\"apple\", \"banana\", \"cherry\", \"apple\", \"orange\", \"banana\"]))\n\n# Test the function with empty list\nprint(remove_duplic_list([]))\n\n# Test the function with single element list\nprint(remove_duplic_list([\"apple\"]))\n\n# Test the function with a list with no duplicates\nprint(remove_duplic_list([\"apple\", \"orange\", \"banana\"]))\n\n# Test the function with a list with all duplicates\nprint(remove_duplic_list([\"apple\", \"apple\", \"apple\", \"banana\", \"banana\", \"cherry\", \"cherry\"])) ",
        "generated_testcode": "assert remove_duplic_list(['apple', 'banana', 'orange', 'apple', 'grape', 'apple', 'orange']) == ['apple', 'banana', 'orange', 'grape']\n",
        "test": "assert remove_duplic_list([\"Python\", \"Exercises\", \"Practice\", \"Solution\", \"Exercises\"])==['Python', 'Exercises', 'Practice', 'Solution']\nassert remove_duplic_list([\"Python\", \"Exercises\", \"Practice\", \"Solution\", \"Exercises\",\"Java\"])==['Python', 'Exercises', 'Practice', 'Solution', 'Java']\nassert remove_duplic_list([\"Python\", \"Exercises\", \"Practice\", \"Solution\", \"Exercises\",\"C++\",\"C\",\"C++\"])==['Python', 'Exercises', 'Practice', 'Solution','C++','C']",
        "canonical_solution": "def remove_duplic_list(l):\r\n    temp = []\r\n    for x in l:\r\n        if x not in temp:\r\n            temp.append(x)\r\n    return temp"
    },
    {
        "number": 933,
        "prompt": "Write a function to convert camel case string to snake case string by using regex.\ndef camel_to_snake(text):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    return re.sub(r'(?<!^)(?=[A-Z])', '_', text).lower()\n\n# Test cases\nprint(camel_to_snake(\"camelCase\")) # Output: \"camel_case\"\nprint(camel_to_snake(\"camelCaseString\")) # Output: \"camel_case_string\"\nprint(camel_to_snake(\"HTML\")) # Output: \"html\"\nprint(camel_to_snake(\"longCamelCaseString\")) # Output: \"long_camel_case_string\"\n\n# Using underscore_case\ndef camel_to_underscore(text):\n    return re.sub(r'(?<!^)(?=[A-Z])', '_', text).lower()\n\n# Test cases\nprint(camel_to_underscore(\"camelCase\")) # Output: \"camel_case\"\nprint(camel_to_underscore(\"camelCaseString\")) # Output: \"camel_case_string\"\nprint(camel_to_underscore(\"HTML\")) # Output: \"html\"\nprint(camel_to_underscore(\"longCamelCaseString\")) # Output: \"long_camel_case_string\"\n\n# Using hyphen-case\ndef camel_to_hyphen(text):\n    return re.sub(r'(?<!^)(?=[A-Z])', '-', text).lower()\n\n# Test cases\nprint(camel_to_hyphen",
        "generated_testcode": "assert camel_to_snake(\"helloWorld\") == \"hello_world\"\n",
        "test": "assert camel_to_snake('GoogleAssistant') == 'google_assistant'\nassert camel_to_snake('ChromeCast') == 'chrome_cast'\nassert camel_to_snake('QuadCore') == 'quad_core'",
        "canonical_solution": "import re\r\ndef camel_to_snake(text):\r\n  str1 = re.sub('(.)([A-Z][a-z]+)', r'\\1_\\2', text)\r\n  return re.sub('([a-z0-9])([A-Z])', r'\\1_\\2', str1).lower()"
    },
    {
        "number": 934,
        "prompt": "Write a function to find the nth delannoy number.\ndef dealnnoy_num(n, m): \n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    if n == 0 or m == 0: \n        return 1\n    elif n < 0 or m < 0: \n        return 0\n    else: \n        return dealnnoy_num(n-1, m) + dealnnoy_num(n, m-1) \n\ndef delannoy(n): \n    # n is the value of n in delannoy(n, m) \n    return dealnnoy_num(n, n) ",
        "generated_testcode": "assert dealnnoy_num(5, 2) == 15\n",
        "test": "assert dealnnoy_num(3, 4) == 129\nassert dealnnoy_num(3, 3) == 63\nassert dealnnoy_num(4, 5) == 681",
        "canonical_solution": "def dealnnoy_num(n, m): \r\n\tif (m == 0 or n == 0) : \r\n\t\treturn 1\r\n\treturn dealnnoy_num(m - 1, n) + dealnnoy_num(m - 1, n - 1) + dealnnoy_num(m, n - 1)"
    },
    {
        "number": 935,
        "prompt": "Write a function to calculate the sum of series 1\u00b2+2\u00b2+3\u00b2+\u2026.+n\u00b2.\ndef series_sum(number):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": true,
        "answer": "    sum = 0\n    for i in range(1,number+1):\n        sum += i**2\n    return sum\n\n#print(series_sum(10))\n\n#Write a function to find the sum of all even numbers from 1 to n\ndef even_sum(number):\n    sum = 0\n    for i in range(1,number+1):\n        if i%2 == 0:\n            sum += i\n    return sum\n\n#print(even_sum(10))\n\n#Write a function to find the sum of all odd numbers from 1 to n\ndef odd_sum(number):\n    sum = 0\n    for i in range(1,number+1,2):\n        sum += i\n    return sum\n\n#print(odd_sum(10))\n\n#Write a function to find the sum of squares of first n natural numbers\ndef sum_of_squares(number):\n    sum = 0\n    for i in range(1,number+1):\n        sum += i**2\n    return sum\n\n#print(sum_of_squares(10))\n\n#Write a function to find the sum of cubes of first n natural numbers\ndef sum_of_cubes(number):\n    sum = 0\n    for i in range(1,number+1):\n        sum += i**3\n    return sum\n\n#print(sum_of_cubes(10))\n\n#Write a function to find the sum of digits of a",
        "generated_testcode": "assert series_sum(5) == 55 # 1\u00b2+2\u00b2+3\u00b2+4\u00b2+5\u00b2 = 1+4+9+16+25 = 31\n",
        "test": "assert series_sum(6)==91\nassert series_sum(7)==140\nassert series_sum(12)==650",
        "canonical_solution": "def series_sum(number):\r\n total = 0\r\n total = (number * (number + 1) * (2 * number + 1)) / 6\r\n return total"
    },
    {
        "number": 936,
        "prompt": "Write a function to re-arrange the given tuples based on the given ordered list.\ndef re_arrange_tuples(test_list, ord_list):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    result = []\n    for i in ord_list:\n        for j in test_list:\n            if i == j[0]:\n                result.append(j)\n    return result\n\n# test case\ntest_list = [(2, 3), (1, 4), (3, 2), (4, 1), (5, 6), (2, 4)]\nord_list = [2, 4, 5]\nprint(re_arrange_tuples(test_list, ord_list))  # Output: [(2, 3), (4, 1), (2, 4), (5, 6)]\n\ntest_list = [(1, 2), (3, 4), (5, 6), (7, 8), (9, 10)]\nord_list = [3, 5, 7, 9]\nprint(re_arrange_tuples(test_list, ord_list))  # Output: [(3, 4), (5, 6), (7, 8), (9, 10)]\n\ntest_list = [(1, 2), (3, 4), (5, 6), (7, 8), (9, 10)]\nord_list = [3, 5, 8]\nprint(re_arrange_tuples(test_list, ord_list))  # Output: [(3, 4), (5, 6), (9, 10)]\n\ntest_list",
        "generated_testcode": "assert re_arrange_tuples(test_list, ord_list) == [(1, 'a', 'apple'), (2, 'b', 'banana'), (3, 'c', 'cherry'), (4, 'd', 'date')]\n\n# Test the function with the following inputs\ntest_list = [(1, 'a', 'apple'), (2, 'b', 'banana'), (3, 'c', 'cherry'), (4, 'd', 'date')]\nord_list = [1, 2, 3, 4]\nprint(re_arrange_tuples(test_list, ord_list)) ",
        "test": "assert re_arrange_tuples([(4, 3), (1, 9), (2, 10), (3, 2)],  [1, 4, 2, 3]) == [(1, 9), (4, 3), (2, 10), (3, 2)]\nassert re_arrange_tuples([(5, 4), (2, 10), (3, 11), (4, 3)],  [3, 4, 2, 3]) == [(3, 11), (4, 3), (2, 10), (3, 11)]\nassert re_arrange_tuples([(6, 3), (3, 8), (5, 7), (2, 4)],  [2, 5, 3, 6]) == [(2, 4), (5, 7), (3, 8), (6, 3)]",
        "canonical_solution": "def re_arrange_tuples(test_list, ord_list):\r\n  temp = dict(test_list)\r\n  res = [(key, temp[key]) for key in ord_list]\r\n  return (res) "
    },
    {
        "number": 937,
        "prompt": "Write a function to count the most common character in a given string.\ndef max_char(str1):\n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    # Initialize an empty dictionary to store the count of each character\n    char_dict = {}\n    # Loop through the string and count the frequency of each character\n    for char in str1:\n        if char in char_dict:\n            char_dict[char] += 1\n        else:\n            char_dict[char] = 1\n    # Find the maximum count from the dictionary\n    max_count = 0\n    max_char = ''\n    for key, value in char_dict.items():\n        if value > max_count:\n            max_count = value\n            max_char = key\n    # Return the character with the maximum count\n    return max_char\n\n# Test the function with sample input\nprint(max_char('Hello World'))  # Output: l\nprint(max_char('Python is awesome'))  # Output: o\nprint(max_char('abcdefghijklmnopqrstuvwxyz'))  # Output: i\nprint(max_char('aaabbcdd'))  # Output: a\nprint(max_char('123456789'))  # Output: 1\nprint(max_char('AbcdefghijklmnoPqrstuvwxyz'))  # Output: p",
        "generated_testcode": "assert max_char(\"hello world\") == \"l\"\n",
        "test": "assert max_char(\"hello world\")==('l')\nassert max_char(\"hello \")==('l')\nassert max_char(\"python pr\")==('p')",
        "canonical_solution": "from collections import Counter \r\ndef max_char(str1):\r\n    temp = Counter(str1) \r\n    max_char = max(temp, key = temp.get)\r\n    return max_char"
    },
    {
        "number": 938,
        "prompt": "Write a function to find three closest elements from three sorted arrays.\ndef find_closet(A, B, C, p, q, r): \n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    n1, n2, n3 = len(A), len(B), len(C)\n    i, j, k = 0, 0, 0\n    while i < n1 and j < n2 and k < n3 and i <= p and j <= q and k <= r:\n        d1 = float('inf')\n        d2 = float('inf')\n        d3 = float('inf')\n        if i == 0 or p == 0 or A[i-1] > B[j]:\n            d1 = abs(A[i] - B[j])\n        else:\n            d1 = abs(A[p] - B[j])\n        if j == 0 or q == 0 or B[j-1] > C[k]:\n            d2 = abs(A[i] - C[k])\n        else:\n            d2 = abs(A[p] - C[k])\n        if k == 0 or r == 0 or C[k-1] > B[j]:\n            d3 = abs(B[j] - C[k])\n        else:\n            d3 = abs(B[q] - C[r])\n        if d1 <= d2 and d1 <= d3:\n            i += 1\n        elif d2 <= d1 and d2 <= d3:\n            j += 1\n        else:\n            k += 1\n    return (A[i], B[j], C[k])\n\n# Test the function\n",
        "generated_testcode": "assert find_closet(A, B, C, 0, 0, 0) == (1, 2, 3)\n",
        "test": "assert find_closet([1, 4, 10],[2, 15, 20],[10, 12],3,3,2) == (10, 15, 10)\nassert find_closet([20, 24, 100],[2, 19, 22, 79, 800],[10, 12, 23, 24, 119],3,5,5) == (24, 22, 23)\nassert find_closet([2, 5, 11],[3, 16, 21],[11, 13],3,3,2) == (11, 16, 11)",
        "canonical_solution": "import sys \r\n\r\ndef find_closet(A, B, C, p, q, r): \r\n\tdiff = sys.maxsize \r\n\tres_i = 0\r\n\tres_j = 0\r\n\tres_k = 0\r\n\ti = 0\r\n\tj = 0\r\n\tk = 0\r\n\twhile(i < p and j < q and k < r): \r\n\t\tminimum = min(A[i], min(B[j], C[k])) \r\n\t\tmaximum = max(A[i], max(B[j], C[k])); \r\n\t\tif maximum-minimum < diff: \r\n\t\t\tres_i = i \r\n\t\t\tres_j = j \r\n\t\t\tres_k = k \r\n\t\t\tdiff = maximum - minimum; \r\n\t\tif diff == 0: \r\n\t\t\tbreak\r\n\t\tif A[i] == minimum: \r\n\t\t\ti = i+1\r\n\t\telif B[j] == minimum: \r\n\t\t\tj = j+1\r\n\t\telse: \r\n\t\t\tk = k+1\r\n\treturn A[res_i],B[res_j],C[res_k]"
    },
    {
        "number": 939,
        "prompt": "Write a function to sort a list of dictionaries using lambda function.\ndef sorted_models(models):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    return sorted(models, key=lambda x: x['price'], reverse=True)\n\n#Test the function with the given list of dictionaries\nmodels = [\n    {'name': 'iPhone 12 Pro', 'price': 10000},\n    {'name': 'Samsung Galaxy S21', 'price': 800},\n    {'name': 'Samsung Galaxy S20', 'price': 700},\n    {'name': 'Samsung Galaxy S10', 'price': 600},\n    {'name': 'iPhone 8', 'price': 500}\n]\n\nprint(sorted_models(models))\n\n# Output: [{'name': 'iPhone 12 Pro', 'price': 1000}, {'name': 'Samsung Galaxy S21', 'price': 800}, {'name': 'Samsung Galaxy S20', 'price': 700}, {'name': 'Samsung Galaxy S10', 'price': 600}, {'name': 'iPhone 8', 'price': 500}] ",
        "generated_testcode": "assert sorted_models(models) == sorted(models, key=lambda x: x['name'])\n\n# Test the function with the following input\nmodels = [\n    {'name': 'A', 'price': 1000},\n    {'name': 'B', 'price': 200},\n    {'name': 'C', 'price': 50},\n    {'name': 'D', 'price': 150},\n    {'name': 'E', 'price': 75},\n]\n\n",
        "test": "assert sorted_models([{'make':'Nokia', 'model':216, 'color':'Black'}, {'make':'Mi Max', 'model':2, 'color':'Gold'}, {'make':'Samsung', 'model': 7, 'color':'Blue'}])==[{'make': 'Nokia', 'model': 216, 'color': 'Black'}, {'make': 'Samsung', 'model': 7, 'color': 'Blue'}, {'make': 'Mi Max', 'model': 2, 'color': 'Gold'}]\nassert sorted_models([{'make':'Vivo', 'model':20,'color':'Blue'},{'make': 'oppo','model':17,'color':'Gold'},{'make':'Apple','model':11,'color':'red'}])==([{'make':'Vivo', 'model':20,'color':'Blue'},{'make': 'oppo','model':17,'color':'Gold'},{'make':'Apple','model':11,'color':'red'}])\nassert sorted_models([{'make':'micromax','model':40,'color':'grey'},{'make':'poco','model':60,'color':'blue'}])==([{'make':'poco','model':60,'color':'blue'},{'make':'micromax','model':40,'color':'grey'}])",
        "canonical_solution": "def sorted_models(models):\r\n sorted_models = sorted(models, key = lambda x: x['color'])\r\n return sorted_models"
    },
    {
        "number": 940,
        "prompt": "Write a function to sort the given array by using heap sort.\ndef heap_sort(arr):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    # Build a max heap\n    def heapify(arr, n, i):\n        largest = i\n        left = 2 * i + 1\n        right = 2 * i + 2\n\n        if left < n and arr[i] < arr[left]:\n            largest = left\n\n        if right < n and arr[largest] < arr[right]:\n            largest = right\n\n        if largest != i:\n            arr[i], arr[largest] = arr[largest], arr[i]\n            heapify(arr, n, largest)\n\n    # Heapify all the elements\n    for i in range(len(arr) // 2 - 1, -1, -1):\n        heapify(arr, len(arr), i)\n\n    # Extract all elements from the heap one by one\n    for i in range(len(arr) - 1, 0, -1):\n        arr[i], arr[0] = arr[0], arr[i]\n        heapify(arr, i, 0)\n\n    return arr\n\n\n# Test the function\narr = [12, 11, 13, 5, 6, 5, 6, 7]\nprint(\"Sorted array is: \", heap_sort(arr))\n",
        "generated_testcode": "assert heap_sort([4, 2, 1, 6, 3, 7, 9, 5]) == [1, 2, 3, 4, 5, 6, 7]\n",
        "test": "assert heap_sort([12, 2, 4, 5, 2, 3]) == [2, 2, 3, 4, 5, 12]\nassert heap_sort([32, 14, 5, 6, 7, 19]) == [5, 6, 7, 14, 19, 32]\nassert heap_sort([21, 15, 29, 78, 65]) == [15, 21, 29, 65, 78]",
        "canonical_solution": "def heap_sort(arr):\r\n    heapify(arr)  \r\n    end = len(arr) - 1\r\n    while end > 0:\r\n        arr[end], arr[0] = arr[0], arr[end]\r\n        shift_down(arr, 0, end - 1)\r\n        end -= 1\r\n    return arr\r\n\r\ndef heapify(arr):\r\n    start = len(arr) // 2\r\n    while start >= 0:\r\n        shift_down(arr, start, len(arr) - 1)\r\n        start -= 1\r\ndef shift_down(arr, start, end):\r\n    root = start\r\n    while root * 2 + 1 <= end:\r\n        child = root * 2 + 1\r\n        if child + 1 <= end and arr[child] < arr[child + 1]:\r\n            child += 1\r\n        if child <= end and arr[root] < arr[child]:\r\n            arr[root], arr[child] = arr[child], arr[root]\r\n            root = child\r\n        else:\r\n            return\r\n"
    },
    {
        "number": 941,
        "prompt": "Write a function to count the elements in a list until an element is a tuple.\ndef count_elim(num):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": true,
        "answer": "    count = 0\n    for i in num:\n        if isinstance(i, tuple):\n            break\n        count += 1\n    return count\n\n# Example usage:\nnums = [1, 2, 3, 4, (5, 6), 7, 8]\nprint(count_elim(nums))  # Output: 3\n\n# Test with another example:\nnums = [1, 2, 3, 4, (5, 6)]\nprint(count_elim(nums))  # Output: 4\n\n# Test with an empty list:\nnums = []\nprint(count_elim(nums))  # Output: 0\n\n# Test with a list containing only tuples:\nnums = [(1, 2), (3, 4), (5, 6)]\nprint(count_elim(nums))  # Output: 0\n\n# Test with a list containing only one element:\nnums = [1]\nprint(count_elim(nums))  # Output: 1\n\n# Test with a list containing a tuple as the first element:\nnums = [(1, 2), 3, 4]\nprint(count_elim(nums))  # Output: 0\n\n# Test with a list containing a tuple as the last element:\nnums = [1, 2, 3, (4, 5)]\nprint(count_elim(nums))  # Output: 3",
        "generated_testcode": "assert count_elim([1, 2, 3, 4, (5, 6), 7, 8, 9]) == 4\n",
        "test": "assert count_elim([10,20,30,(10,20),40])==3\nassert count_elim([10,(20,30),(10,20),40])==1\nassert count_elim([(10,(20,30,(10,20),40))])==0",
        "canonical_solution": "def count_elim(num):\r\n  count_elim = 0\r\n  for n in num:\r\n    if isinstance(n, tuple):\r\n        break\r\n    count_elim += 1\r\n  return count_elim"
    },
    {
        "number": 942,
        "prompt": "Write a function to check if any list element is present in the given list.\ndef check_element(test_tup, check_list):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    for i in test_tup:\n        if i in check_list:\n            return True\n    return False\n\n# Test the function\ntest_tup = (1, 2, 3, 4, 5)\ncheck_list = [3, 6, 7, 8]\nprint(check_element(test_tup, check_list))  # Output: True\n\ntest_tup = (1, 2, 3, 4, 5)\ncheck_list = [6, 7, 8]\nprint(check_element(test_tup, check_list))  # Output: False ",
        "generated_testcode": "assert check_element((1, 2, 3), [1, 4, 5, 6]) == True\n",
        "test": "assert check_element((4, 5, 7, 9, 3),  [6, 7, 10, 11]) == True\nassert check_element((1, 2, 3, 4),  [4, 6, 7, 8, 9]) == True\nassert check_element((3, 2, 1, 4, 5),  [9, 8, 7, 6]) == False",
        "canonical_solution": "def check_element(test_tup, check_list):\r\n  res = False\r\n  for ele in check_list:\r\n    if ele in test_tup:\r\n      res = True\r\n      break\r\n  return (res) "
    },
    {
        "number": 943,
        "prompt": "Write a function to combine two given sorted lists using heapq module.\ndef combine_lists(num1,num2):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": true,
        "answer": "    import heapq\n    merged_list = []\n    num1.extend(num2)\n    heapq.heapify(num1)\n    return heapq.nsmallest(len(num1), num1)\n\nnum1 = [2, 4, 6, 8, 10]\nnum2 = [1, 3, 5, 7, 9]\nprint(combine_lists(num1,num2)) #[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\n#Output: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\n# Test the function with another example\nnum1 = [1, 5, 7, 9, 10]\nnum2 = [2, 3, 4, 6, 8]\nprint(combine_lists(num1,num2)) #[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\n#Output: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] ",
        "generated_testcode": "assert combine_lists([1,3,5,7],[2,4,6,8]) == [1,2,3,4,5,6,7,8]\n",
        "test": "assert combine_lists([1, 3, 5, 7, 9, 11],[0, 2, 4, 6, 8, 10])==[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]\nassert combine_lists([1, 3, 5, 6, 8, 9], [2, 5, 7, 11])==[1,2,3,5,5,6,7,8,9,11]\nassert combine_lists([1,3,7],[2,4,6])==[1,2,3,4,6,7]",
        "canonical_solution": "from heapq import merge\r\ndef combine_lists(num1,num2):\r\n  combine_lists=list(merge(num1, num2))\r\n  return combine_lists"
    },
    {
        "number": 944,
        "prompt": "Write a function to separate and print the numbers and their position of a given string.\ndef num_position(text):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    numbers = []\n    position = []\n    for i in range(len(text)):\n        if text[i].isdigit():\n            numbers.append(text[i])\n            position.append(i)\n    print(numbers)\n    print(position)\n\n# Example usage:\ntext = \"The number 123 is at position 10 of the string\"\nnum_position(text)\n# Output:\n# ['1', '2', '3']\n# [11, 12, 13]\n\n# Another example:\ntext = \"Hello world, how are you 24 doing today?\"\nnum_position(text)\n# Output:\n# ['2', '4']\n# [21, 23]\n\n# Note: The function should only consider digits and print their positions, not other characters. ",
        "generated_testcode": "assert num_position(\"Hello 123 World 456\") == \"1: 123\\n2: 456\"\n",
        "test": "assert num_position(\"there are 70 flats in this apartment\")==10\nassert num_position(\"every adult have 32 teeth\")==17\nassert num_position(\"isha has 79 chocolates in her bag\")==9",
        "canonical_solution": "import re\r\ndef num_position(text):\r\n for m in re.finditer(\"\\d+\", text):\r\n    return m.start()"
    },
    {
        "number": 945,
        "prompt": "Write a function to convert the given tuples into set.\ndef tuple_to_set(t):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    s = set(t)\n    return s\n\n# Example usage:\nt = (1, 2, 3, 4, 5, 4, 3, 2)\nprint(tuple_to_set(t))  # Output: {1, 2, 3, 4, 5}\n\n# Convert a list of tuples into a set of tuples\ndef list_to_set_of_tuples(l):\n    s = set(tuple(t) for t in l)\n    return s\n\n# Example usage:\nl = [(1, 2, 3), (2, 3, 4), (3, 4, 5), (1, 2, 3), (2, 3, 4)]\nprint(list_to_set_of_tuples(l))  # Output: {(1, 2, 3), (2, 3, 4), (3, 4, 5)} ",
        "generated_testcode": "assert tuple_to_set((\"apple\", \"banana\", \"cherry\", \"apple\") == {\"apple\", \"banana\", \"cherry\"}\n",
        "test": "assert tuple_to_set(('x', 'y', 'z') ) == {'y', 'x', 'z'}\nassert tuple_to_set(('a', 'b', 'c') ) == {'c', 'a', 'b'}\nassert tuple_to_set(('z', 'd', 'e') ) == {'d', 'e', 'z'}",
        "canonical_solution": "def tuple_to_set(t):\r\n  s = set(t)\r\n  return (s) "
    },
    {
        "number": 946,
        "prompt": "Write a function to find the most common elements and their counts of a specified text.\ndef most_common_elem(s,a):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    d={}\n    for i in s:\n        if i in d:\n            d[i]+=1\n        else:\n            d[i]=1\n    for i in a:\n        if i in d:\n            d[i]+=1\n    return d\n\ns=input(\"Enter a string: \")\na=input(\"Enter a string to compare with: \")\nprint(most_common_elem(s,a))\n\n#Example usage:\n#Enter a string: hello\n#Enter a string to compare with: world\n#{'l': 3, 'o': 2, 'e': 1, 'h': 1, 'w': 1, 'r': 1, 'd': 1}\n\n#Enter a string: hello\n#Enter a string to compare with: hello world\n#{'l': 3, 'o': 2, 'e': 1, 'h': 1, 'w': 1, 'r': 1, 'd': 1}\n\n#Enter a string: hello\n#Enter a string to compare with: hloolle\n#{'l': 3, 'o': 2, 'e': 1, 'h': 1} \n#This function returns the count of each character in the first string and then adds the count of each character in the second string. If a character is present in both strings, its count is updated by 1. If not, it is added as a new key in the dictionary with count 1. ",
        "generated_testcode": "assert most_common_elem(\"hello world\", 2) == {\"l\": 3, \"o\": 2}\n",
        "test": "assert most_common_elem('lkseropewdssafsdfafkpwe',3)==[('s', 4), ('e', 3), ('f', 3)] \nassert most_common_elem('lkseropewdssafsdfafkpwe',2)==[('s', 4), ('e', 3)]\nassert most_common_elem('lkseropewdssafsdfafkpwe',7)==[('s', 4), ('e', 3), ('f', 3), ('k', 2), ('p', 2), ('w', 2), ('d', 2)]",
        "canonical_solution": "from collections import Counter \r\ndef most_common_elem(s,a):\r\n  most_common_elem=Counter(s).most_common(a)\r\n  return most_common_elem"
    },
    {
        "number": 947,
        "prompt": "Write a python function to find the length of the shortest word.\ndef len_log(list1):\n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    shortest_word = list1[0]\n    for word in list1:\n        if len(shortest_word) > len(word):\n            shortest_word = word\n    return len(shortest_word)\n\nlist1 = ['apple', 'banana', 'cherry', 'dog']\nprint(len_log(list1)) # expected output: 3\n\nlist2 = ['cat', 'elephant', 'rat', 'rat']\nprint(len_log(list2)) # expected output: 3\n\nlist3 = ['python', 'java', 'kotlin', 'javascript']\nprint(len_log(list3)) # expected output: 3\n\nlist4 = ['python', 'java', 'kotlin', 'javascript', 'ruby']\nprint(len_log(list4)) # expected output: 3\n\nlist5 = ['python', 'java', 'kotlin', 'javascript', 'ruby', 'go']\nprint(len_log(list5)) # expected output: 3\n\nlist6 = ['ant', 'bear', 'cat', 'dog', 'elephant']\nprint(len_log(list6)) # expected output: 3\n\nlist7 = ['python', 'java', 'kotlin', 'javascript', 'ruby', 'go', 'z']\nprint(len_log(list7)) # expected output: 1\n\nlist8 = ['z', 'cat', 'apple', 'banana']\nprint(len_log(list8)) # expected output: 1 ",
        "generated_testcode": "assert len_log(['apple', 'banana', 'cherry', 'date', 'fig']) == 3\n",
        "test": "assert len_log([\"win\",\"lose\",\"great\"]) == 3\nassert len_log([\"a\",\"ab\",\"abc\"]) == 1\nassert len_log([\"12\",\"12\",\"1234\"]) == 2",
        "canonical_solution": "def len_log(list1):\r\n    min=len(list1[0])\r\n    for i in list1:\r\n        if len(i)<min:\r\n            min=len(i)\r\n    return min"
    },
    {
        "number": 948,
        "prompt": "Write a function to get an item of a tuple.\ndef get_item(tup1,index):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    return tup1[index]\n\n# test the function with a tuple and an index\nprint(get_item((1,2,3,4,5,6), 3))  # should return 4\n\n# write a function to reverse a string\ndef reverse_string(string):\n    return string[::-1]\n\n# test the function with a string\nprint(reverse_string(\"hello\"))  # should return \"olleh\"\n\n# write a function to check if a string is a palindrome (reads the same forwards and backwards)\ndef is_palindrome(string):\n    return string == string[::-1]\n\n# test the function with a string\nprint(is_palindrome(\"racecar\"))  # should return True\n\n# write a function to get the length of a list\ndef get_list_length(lst):\n    return len(lst)\n\n# test the function with a list\nprint(get_list_length([1,2,3,4,5,6,7,8,9]))  # should return 7\n\n# write a function to get the first n items of a list\ndef get_first_n_items(lst, n):\n    return lst[:n]\n\n# test the function with a list and a number\nprint(get_first_n_items([1,2,3,4,5,6,7,8,9], 3))  # should return [1, 2, 3]\n\n# write a function to flatten a",
        "generated_testcode": "assert get_item((1,2,3,4,5,6),2) == 3\n",
        "test": "assert get_item((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),3)==('e')\nassert get_item((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),-4)==('u')\nassert get_item((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),-3)==('r')",
        "canonical_solution": "def get_item(tup1,index):\r\n  item = tup1[index]\r\n  return item"
    },
    {
        "number": 949,
        "prompt": "Write a function to sort the given tuple list basis the total digits in tuple.\ndef count_digs(tup):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    count = 0\n    for i in tup:\n        if isinstance(i, int):\n            count += len(str(i)\n        elif isinstance(i, str):\n            count += len(i)\n    return count\n\ndef sort_by_digs(tup):\n    return sorted(tup, key=count_digs)\n\nprint(sort_by_digs((10, 20, \"hello\", 300, \"world\", 5, \"python\"))\n\n# output: (5, 10, 'hello', 20, 300, 'world')\n\n# time complexity: O(nlogn)\n# space complexity: O(n)\n\n# Another way to solve the problem\ndef sort_by_digs(tup):\n    return sorted(tup, key=lambda x: len(str(x) if isinstance(x, int) else len(x))\n\nprint(sort_by_digs((10, 20, \"hello\", 300, \"world\", 5, \"python\"))\n\n# output: (5, 10, 'hello', 20, 300, 'world')\n\n# time complexity: O(nlogn)\n# space complexity: O(n) ",
        "generated_testcode": "assert count_digs(('123', '456', '789') == 27)\n",
        "test": "assert sort_list([(3, 4, 6, 723), (1, 2), (12345,), (134, 234, 34)] ) == '[(1, 2), (12345,), (3, 4, 6, 723), (134, 234, 34)]'\nassert sort_list([(3, 4, 8), (1, 2), (1234335,), (1345, 234, 334)] ) == '[(1, 2), (3, 4, 8), (1234335,), (1345, 234, 334)]'\nassert sort_list([(34, 4, 61, 723), (1, 2), (145,), (134, 23)] ) == '[(1, 2), (145,), (134, 23), (34, 4, 61, 723)]'",
        "canonical_solution": "def count_digs(tup):\r\n  return sum([len(str(ele)) for ele in tup ]) \r\ndef sort_list(test_list):\r\n  test_list.sort(key = count_digs)\r\n  return (str(test_list))"
    },
    {
        "number": 950,
        "prompt": "Write a function to display sign of the chinese zodiac for given year.\ndef chinese_zodiac(year):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    return [\"Rat\", \"Ox\", \"Tiger\", \"Rabbit\", \"Dragon\", \"Snake\", \"Horse\", \"Goat\", \"Monkey\", \"Rooster\", \"Dog\", \"Pig\", \"Rat\", \"Ox\"][(year-4) % 12]\n\nprint(chinese_zodiac(2020)) # should return \"Rat\"\nprint(chinese_zodiac(1998)) # should return \"Ox\"\nprint(chinese_zodiac(2000)) # should return \"Rat\"\nprint(chinese_zodiac(2004)) # should return \"Snake\" ",
        "generated_testcode": "assert chinese_zodiac(1996) == \"Rat\"\n",
        "test": "assert chinese_zodiac(1997)==('Ox')\nassert chinese_zodiac(1998)==('Tiger')\nassert chinese_zodiac(1994)==('Dog')",
        "canonical_solution": "def chinese_zodiac(year):\r\n if (year - 2000) % 12 == 0:\r\n     sign = 'Dragon'\r\n elif (year - 2000) % 12 == 1:\r\n     sign = 'Snake'\r\n elif (year - 2000) % 12 == 2:\r\n     sign = 'Horse'\r\n elif (year - 2000) % 12 == 3:\r\n     sign = 'sheep'\r\n elif (year - 2000) % 12 == 4:\r\n     sign = 'Monkey'\r\n elif (year - 2000) % 12 == 5:\r\n     sign = 'Rooster'\r\n elif (year - 2000) % 12 == 6:\r\n     sign = 'Dog'\r\n elif (year - 2000) % 12 == 7:\r\n     sign = 'Pig'\r\n elif (year - 2000) % 12 == 8:\r\n     sign = 'Rat'\r\n elif (year - 2000) % 12 == 9:\r\n     sign = 'Ox'\r\n elif (year - 2000) % 12 == 10:\r\n     sign = 'Tiger'\r\n else:\r\n     sign = 'Hare'\r\n return sign"
    },
    {
        "number": 951,
        "prompt": "Write a function to find the maximum of similar indices in two lists of tuples.\ndef max_similar_indices(test_list1, test_list2):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": true,
        "answer": "    \"\"\"\n    Given two lists of tuples, find the indices where the tuples are the same.\n    :param test_list1: list of tuples\n    :param test_list2: list of tuples\n    :return: list of tuples with the max indices\n    \"\"\"\n    result = []\n    for i, tup1 in enumerate(test_list1):\n        for j, tup2 in enumerate(test_list2):\n            if tup1 == tup2:\n                result.append((i, j))\n    return result\n\n# Example usage:\nlist1 = [(1, 2), (3, 4), (5, 6), (7, 8), (9, 10)]\nlist2 = [(1, 2), (3, 4), (7, 8), (11, 12), (13, 14)]\nprint(max_similar_indices(list1, list2))  # [(0, 0), (1, 1), (2, 2)]\n",
        "generated_testcode": "assert max_similar_indices([(1, 2, 3), (4, 5, 6), (7, 8, 9)], [(1, 2, 3), (4, 5, 6), (7, 8, 9)]) == [0, 1, 2]\n",
        "test": "assert max_similar_indices([(2, 4), (6, 7), (5, 1)],[(5, 4), (8, 10), (8, 14)]) == [(5, 4), (8, 10), (8, 14)]\nassert max_similar_indices([(3, 5), (7, 8), (6, 2)],[(6, 5), (9, 11), (9, 15)]) == [(6, 5), (9, 11), (9, 15)]\nassert max_similar_indices([(4, 6), (8, 9), (7, 3)],[(7, 6), (10, 12), (10, 16)]) == [(7, 6), (10, 12), (10, 16)]",
        "canonical_solution": "def max_similar_indices(test_list1, test_list2):\r\n  res = [(max(x[0], y[0]), max(x[1], y[1]))\r\n   for x, y in zip(test_list1, test_list2)]\r\n  return (res) "
    },
    {
        "number": 952,
        "prompt": "Write a function to compute the value of ncr mod p.\ndef nCr_mod_p(n, r, p): \n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    if n < 0 or r < 0 or p < 1: \n        return -1\n    if r > n: \n        return 0\n  \n    C = [0] * (n + 1) \n    C[0] = 1\n    for i in range(1, n + 1): \n        C[i] = 1\n        for j in range(1, i): \n            C[i] = (C[i] + C[i - 1]) % p \n  \n    MOD = 10**9 + 7\n    num = 1\n    for i in range(r): \n        num = (num * C[n - i]) % MOD\n    den = 1\n    for i in range(r): \n        den = (den * C[i]) % MOD\n  \n    den = modularInverse(den, p) % p\n    ans = (num * den) % p \n    return ans \n  \ndef modularInverse(a, p): \n    a = a % p \n    for x in range(1, p): \n        if (a * x) % p == 1: \n            return x \n    return -1\n\n# Test the function\nn = 10\nr = 4\np = 1000000000007\nprint(nCr_mod_p(n, r, p)) ",
        "generated_testcode": "assert nCr_mod_p(5, 3, 10) == 10\n",
        "test": "assert nCr_mod_p(10, 2, 13) == 6\nassert nCr_mod_p(11, 3, 14) == 11\nassert nCr_mod_p(18, 14, 19) == 1",
        "canonical_solution": "def nCr_mod_p(n, r, p): \r\n\tif (r > n- r): \r\n\t\tr = n - r \r\n\tC = [0 for i in range(r + 1)] \r\n\tC[0] = 1 \r\n\tfor i in range(1, n + 1): \r\n\t\tfor j in range(min(i, r), 0, -1): \r\n\t\t\tC[j] = (C[j] + C[j-1]) % p \r\n\treturn C[r] "
    },
    {
        "number": 953,
        "prompt": "Write a python function to find the minimun number of subsets with distinct elements.\ndef subset(ar, n): \n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    ar.sort() \n    return subset_helper(ar, n) \n\ndef subset_helper(ar, n): \n    if n == 0 or n == 1: \n        return 1\n    elif ar[0] != ar[n-1]: \n        return subset_helper(ar, n-1) + subset_helper(ar, n-2) \n    else: \n        return subset_helper(ar, n-1) \n\ndef count_subset(arr): \n    arr.sort()\n    return subset_helper(arr, len(arr)) \n  \narr = [1, 2, 2, 3, 4, 5, 5] \nprint(count_subset(arr)) ",
        "generated_testcode": "assert subset([1, 2, 3], 3) == 3\n",
        "test": "assert subset([1, 2, 3, 4],4) == 1\nassert subset([5, 6, 9, 3, 4, 3, 4],7) == 2\nassert subset([1, 2, 3 ],3) == 1",
        "canonical_solution": "def subset(ar, n): \r\n    res = 0\r\n    ar.sort() \r\n    for i in range(0, n) : \r\n        count = 1\r\n        for i in range(n - 1): \r\n            if ar[i] == ar[i + 1]: \r\n                count+=1\r\n            else: \r\n                break \r\n        res = max(res, count)  \r\n    return res "
    },
    {
        "number": 954,
        "prompt": "Write a function that gives profit amount if the given amount has profit else return none.\ndef profit_amount(actual_cost,sale_amount): \n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    profit = sale_amount - actual_cost \n    if(profit > 0):\n        return profit\n    else:\n        return None\nprint(profit_amount(10000,1200)) # 200\nprint(profit_amount(10000,500)) # None\n\n# Write a function that takes an integer as input and returns the number of digits in it. ",
        "generated_testcode": "assert profit_amount(100, 150) == 50\n",
        "test": "assert profit_amount(1500,1200)==300\nassert profit_amount(100,200)==None\nassert profit_amount(2000,5000)==None",
        "canonical_solution": "def profit_amount(actual_cost,sale_amount): \r\n if(actual_cost > sale_amount):\r\n    amount = actual_cost - sale_amount\r\n    return amount\r\n else:\r\n    return None"
    },
    {
        "number": 955,
        "prompt": "Write a function to find out, if the given number is abundant.\ndef is_abundant(n):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    return sum(i for i in range(1, n) if n % i == 0) > n\n\n# Test cases\nprint(is_abundant(12))  # True\nprint(is_abundant(16))  # True\nprint(is_abundant(24))  # False\nprint(is_abundant(27))  # True\nprint(is_abundant(30))  # True\nprint(is_abundant(48))  # True\nprint(is_abundant(37))  # False\n\n# A number is called a semi-abundant number if the sum of its factors (excluding the number itself) is greater than the number.\n# For example, 12 is semi-abundant because the sum of its factors (excluding the number itself) is 1+2+3+4+6=12.\n# Write a function to check if the given number is a semi-abundant number or not.\ndef is_semi_abundant(n):\n    return sum(i for i in range(1, n) if n % i == 0) > n - n\n\n# Test cases\nprint(is_semi_abundant(12))  # True\nprint(is_semi_abundant(16))  # False\nprint(is_semi_abundant(24))  # True\nprint(is_semi_abundant(27))  # False\nprint",
        "generated_testcode": "assert is_abundant(12) == True\n",
        "test": "assert is_abundant(12)==True\nassert is_abundant(13)==False\nassert is_abundant(9)==False",
        "canonical_solution": "def is_abundant(n):\r\n    fctrsum = sum([fctr for fctr in range(1, n) if n % fctr == 0])\r\n    return fctrsum > n"
    },
    {
        "number": 956,
        "prompt": "Write a function to split the given string at uppercase letters by using regex.\ndef split_list(text):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    return re.findall(r'[A-Z][^A-Z]*', text)\n\n# Example usage:\nprint(split_list(\"TheQuickBrownFoxJumpsOverTheLazyDog\")) # ['The', 'Quick', 'Brown', 'Fox', 'Jumps', 'Over', 'The', 'Lazy', 'Dog'] ",
        "generated_testcode": "assert split_list(\"HelloWorld\") == [\"Hello\", \"World\"]\n",
        "test": "assert split_list(\"LearnToBuildAnythingWithGoogle\") == ['Learn', 'To', 'Build', 'Anything', 'With', 'Google']\nassert split_list(\"ApmlifyingTheBlack+DeveloperCommunity\") == ['Apmlifying', 'The', 'Black+', 'Developer', 'Community']\nassert split_list(\"UpdateInTheGoEcoSystem\") == ['Update', 'In', 'The', 'Go', 'Eco', 'System']",
        "canonical_solution": "import re\r\ndef split_list(text):\r\n  return (re.findall('[A-Z][^A-Z]*', text))"
    },
    {
        "number": 957,
        "prompt": "Write a python function to get the position of rightmost set bit.\ndef get_First_Set_Bit_Pos(n):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": true,
        "answer": "    count = 0\n    while n:\n        if (n & 1):\n            return count\n        count += 1\n        n >>= 1\n        n &= ~(1 << count)\n\n\n# Test the function\nprint(get_First_Set_Bit_Pos(9))  # Output: 3\nprint(get_First_Set_Bit_Pos(14))  # Output: 2\nprint(get_First_Set_Bit_Pos(0))  # Output: 0\nprint(get_First_Set_Bit_Pos(1))  # Output: 0\nprint(get_First_Set_Bit_Pos(16))  # Output: 5\n\n# Time Complexity : O(log n)\n# Space Complexity : O(1)\n\n# Another Approach :\ndef get_First_Set_Bit_Pos(n):\n    if n == 0:\n        return 0\n    return n.bit_length()\n\nprint(get_First_Set_Bit_Pos(9))  # Output: 3\nprint(get_First_Set_Bit_Pos(14))  # Output: 2\nprint(get_First_Set_Bit_Pos(0))  # Output: 0\nprint(get_First_Set_Bit_Pos(1))  # Output: 1\nprint(get_First_Set_Bit_Pos(16))  # Output: 5\n\n# Time Complexity : O(log n)\n# Space Complexity",
        "generated_testcode": "assert get_First_Set_Bit_Pos(12) == 4\n",
        "test": "assert get_First_Set_Bit_Pos(12) == 3\nassert get_First_Set_Bit_Pos(18) == 2\nassert get_First_Set_Bit_Pos(16) == 5",
        "canonical_solution": "import math\r\ndef get_First_Set_Bit_Pos(n):\r\n     return math.log2(n&-n)+1"
    },
    {
        "number": 958,
        "prompt": "Write a function to convert an integer into a roman numeral.\ndef int_to_roman( num):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    # Create a dictionary to map each integer to its roman numeral\n    roman_numerals = {1:'I', 4:'IV', 5:'V', 9:'IX', 10:'X', 40:'XL', 50:'L', 90:'XC', 100:'C', 400:'CD', 500:'D', 900:'CM', 1000:'M'}\n    \n    # Initialize an empty string to hold the roman numeral\n    roman_numeral = ''\n    \n    # Iterate through each key in the dictionary, starting at the highest value (1000)\n    for value in sorted(roman_numerals.keys(), reverse=True):\n        # Divide the number by the current key value to get the number of times to add the corresponding roman numeral\n        quotient, num = divmod(num, value)\n        # Add the roman numeral to the string the specified number of times\n        roman_numeral += roman_numerals[value] * quotient\n    \n    return roman_numeral\n\n# Test the function with some examples\nprint(int_to_roman(123)) # should return 'CXXIII'\nprint(int_to_roman(4999)) # should return 'CDXCIX'\nprint(int_to_roman(39999)) # should return 'MMMCMXCIX'\n\n# Test the function with some edge cases\nprint(int_to_",
        "generated_testcode": "assert int_to_roman(1) == \"I\"\n",
        "test": "assert int_to_roman(1)==(\"I\")\nassert int_to_roman(50)==(\"L\")\nassert int_to_roman(4)==(\"IV\")",
        "canonical_solution": "def int_to_roman( num):\r\n        val = [1000, 900, 500, 400,100, 90, 50, 40,10, 9, 5, 4,1]\r\n        syb = [\"M\", \"CM\", \"D\", \"CD\",\"C\", \"XC\", \"L\", \"XL\",\"X\", \"IX\", \"V\", \"IV\",\"I\"]\r\n        roman_num = ''\r\n        i = 0\r\n        while  num > 0:\r\n            for _ in range(num // val[i]):\r\n                roman_num += syb[i]\r\n                num -= val[i]\r\n            i += 1\r\n        return roman_num"
    },
    {
        "number": 959,
        "prompt": "Write a python function to find the average of a list.\ndef Average(lst): \n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    return sum(lst) / len(lst) \n  \n# input list \nlst = [2, 6, 3, 8, 10, 5, 4] \nprint(\"Average of the list\", Average(lst)) ",
        "generated_testcode": "assert Average([1, 2, 3, 4, 5]) == 3\n",
        "test": "assert Average([15, 9, 55, 41, 35, 20, 62, 49]) == 35.75\nassert Average([4, 5, 1, 2, 9, 7, 10, 8]) == 5.75\nassert Average([1,2,3]) == 2",
        "canonical_solution": "def Average(lst): \r\n    return sum(lst) / len(lst) "
    },
    {
        "number": 960,
        "prompt": "Write a function to solve tiling problem.\ndef get_noOfways(n):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    if n <= 0:\n        return 0\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n\n    # dp[i] stores the number of ways to tile a board of size i x 1\n    dp = [0] * (n + 1)\n    dp[1] = 1\n    dp[2] = 2\n\n    for i in range(3, n + 1):\n        dp[i] = dp[i - 1] + dp[i - 2] + 1\n\n    return dp[n]\n\n# Test the function\nprint(get_noOfways(3)) # Output: 3\nprint(get_noOfways(4)) # Output: 5\nprint(get_noOfways(5)) # Output: 7\n\n# Time complexity: O(n)\n# Space complexity: O(n)\n\n# Note: We can optimize the space complexity to O(1) by using only three variables dp1, dp2, dp3 instead of storing all the previous values. ",
        "generated_testcode": "assert get_noOfways(3) == 1\n",
        "test": "assert get_noOfways(4)==3\nassert get_noOfways(3)==2\nassert get_noOfways(5)==5",
        "canonical_solution": "def get_noOfways(n):\r\n    if (n == 0):\r\n        return 0;\r\n    if (n == 1):\r\n        return 1; \r\n    return get_noOfways(n - 1) + get_noOfways(n - 2);"
    },
    {
        "number": 961,
        "prompt": "Write a function to convert a roman numeral to an integer.\ndef roman_to_int(s):\n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    roman_dict = {'I': 1, 'V': 5, 'X': 10, 'L': 50, 'C': 100, 'D': 500, 'M': 1000, 'IV': 4, 'IX': 9, 'XL': 40, 'XC': 90, 'CD': 400, 'CM': 900}\n    result = 0\n    i = 0\n    while i < len(s):\n        if i < len(s) - 1 and s[i:i+2] in roman_dict:\n            result += roman_dict[s[i:i+2]]\n            i += 2\n        else:\n            result += roman_dict[s[i] if s[i] in roman_dict else 0]\n            i += 1\n    return result\n\n# Test the function\nprint(roman_to_int('XXV'))  # Output: 25\nprint(roman_to_int('XL'))  # Output: 40\nprint(roman_to_int('LVIII'))  # Output: 58\nprint(roman_to_int('MCMXCIV'))  # Output: 1994\nprint(roman_to_int('MMXIV'))  # Output: 2014\nprint(roman_to_int('MMMCMXCIX'))  # Output: 39999",
        "generated_testcode": "assert roman_to_int(\"III\") == 3\n",
        "test": "assert roman_to_int('MMMCMLXXXVI')==3986\nassert roman_to_int('MMMM')==4000\nassert roman_to_int('C')==100",
        "canonical_solution": "def roman_to_int(s):\r\n        rom_val = {'I': 1, 'V': 5, 'X': 10, 'L': 50, 'C': 100, 'D': 500, 'M': 1000}\r\n        int_val = 0\r\n        for i in range(len(s)):\r\n            if i > 0 and rom_val[s[i]] > rom_val[s[i - 1]]:\r\n                int_val += rom_val[s[i]] - 2 * rom_val[s[i - 1]]\r\n            else:\r\n                int_val += rom_val[s[i]]\r\n        return int_val"
    },
    {
        "number": 962,
        "prompt": "Write a python function to find the sum of all even natural numbers within the range l and r.\ndef sum_Natural(n): \n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    sum = 0\n    for i in range(n+1): \n        if i % 2 == 0: \n            sum += i \n    return sum \n  \n# Test the function \nprint(sum_Natural(10)) ",
        "generated_testcode": "assert sum_Natural(10) == 30\n",
        "test": "assert sum_Even(2,5) == 6\nassert sum_Even(3,8) == 18\nassert sum_Even(4,6) == 10",
        "canonical_solution": "def sum_Natural(n): \r\n    sum = (n * (n + 1)) \r\n    return int(sum) \r\ndef sum_Even(l,r): \r\n    return (sum_Natural(int(r / 2)) - sum_Natural(int((l - 1) / 2))) "
    },
    {
        "number": 963,
        "prompt": "Write a function to calculate the discriminant value.\ndef discriminant_value(x,y,z):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    return x**2*y**2-4*x*z\n\n#Write a function to find roots of a quadratic equation\ndef roots(a,b,c):\n    disc = discriminant_value(a,b,c)\n    if disc<0:\n        print(\"Roots are complex\")\n    elif disc==0:\n        root = -b/(2*a)\n        print(\"One root is\",root)\n    else:\n        root1 = (-b+discriminant_value(a,b,c))/(2*a)\n        root2 = (-b-discriminant_value(a,b,c))/(2*a)\n        print(\"Roots are\",root1,\"and\",root2)\n\n#Testing the function\nroots(1,3,-4)\nroots(1,2,-3)\nroots(1,5,6)\n\n#Write a function to find the cube root of a number\ndef cube_root(x):\n    return x**(1/3)\n\n#Testing the function\nprint(cube_root(16))\nprint(cube_root(-125))\nprint(cube_root(27))\n\n#Write a function to find the square root of a number\ndef square_root(x):\n    return x**0.5\n\n#Testing the function\nprint(square_root(16))\nprint(square_root(9))\nprint(square_root(0.125))\n",
        "generated_testcode": "assert discriminant_value(1,2,3) == 1\n",
        "test": "assert discriminant_value(4,8,2)==(\"Two solutions\",32)\nassert discriminant_value(5,7,9)==(\"no real solution\",-131)\nassert discriminant_value(0,0,9)==(\"one solution\",0)",
        "canonical_solution": "def discriminant_value(x,y,z):\r\n    discriminant = (y**2) - (4*x*z)\r\n    if discriminant > 0:\r\n        return (\"Two solutions\",discriminant)\r\n    elif discriminant == 0:\r\n        return (\"one solution\",discriminant)\r\n    elif discriminant < 0:\r\n        return (\"no real solution\",discriminant)"
    },
    {
        "number": 964,
        "prompt": "Write a python function to check whether the length of the word is even or not.\ndef word_len(s): \n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    if len(s)%2==0: \n        return True \n    else: \n        return False \n  \n#Testing the function \nprint(word_len(\"python\")) ",
        "generated_testcode": "assert word_len(\"hello\") == True\n",
        "test": "assert word_len(\"program\") == False\nassert word_len(\"solution\") == True\nassert word_len(\"data\") == True",
        "canonical_solution": "def word_len(s): \r\n    s = s.split(' ')   \r\n    for word in s:    \r\n        if len(word)%2==0: \r\n            return True  \r\n        else:\r\n          return False"
    },
    {
        "number": 965,
        "prompt": "Write a function to convert camel case string to snake case string.\ndef camel_to_snake(text):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    # Convert camel case string to snake case\n    text = text[0].lower() + text[1:]\n    new_text = \"\"\n    for char in text:\n        if char.isupper():\n            new_text += \"_\" + char.lower()\n        else:\n            new_text += char\n    return new_text\n\n# Test the function with an example\nprint(camel_to_snake(\"camelCaseString\")) # Output: camel_case_string\n\n# Test the function with an example with numbers\nprint(camel_to_snake(\"camelCaseString123\")) # Output: camel_case_string123\n\n# Test the function with an example with underscores\nprint(camel_to_snake(\"camel_Case_String\")) # Output: camel_case_string ",
        "generated_testcode": "assert camel_to_snake(\"helloWorld\") == \"hello_world\"\n",
        "test": "assert camel_to_snake('PythonProgram')==('python_program')\nassert camel_to_snake('pythonLanguage')==('python_language')\nassert camel_to_snake('ProgrammingLanguage')==('programming_language')",
        "canonical_solution": "def camel_to_snake(text):\r\n        import re\r\n        str1 = re.sub('(.)([A-Z][a-z]+)', r'\\1_\\2', text)\r\n        return re.sub('([a-z0-9])([A-Z])', r'\\1_\\2', str1).lower()"
    },
    {
        "number": 966,
        "prompt": "Write a function to remove an empty tuple from a list of tuples.\ndef remove_empty(tuple1): #L = [(), (), ('',), ('a', 'b'), ('a', 'b', 'c'), ('d')]\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    new_list = []\n    for tup in tuple1:\n        if tup:\n            new_list.append(tup)\n    return new_list\n\n# Example usage:\nL = [(), (), ('',), ('a', 'b'), ('a', 'b', 'c'), ('d')]\nprint(remove_empty(L)) # Output: [('a', 'b', 'c')]\n\n# Define a function to flatten a list of lists.\ndef flatten_list(list1): #[['a', 'b'], ['c', 'd'], ['e', 'f']]\n    flat_list = []\n    for sublist in list1:\n        for item in sublist:\n            flat_list.append(item)\n    return flat_list\n\n# Example usage:\nL = [['a', 'b'], ['c', 'd'], ['e', 'f']]\nprint(flatten_list(L)) # Output: ['a', 'b', 'c', 'd', 'e', 'f']\n\n# Define a function to remove duplicate elements from a list.\ndef remove_duplicates(list1): #[1, 2, 2, 3, 4, 4, 5, 6, 6]\n    unique_list = []\n    for item in list1:\n        if item not in unique_list:\n            unique_list.append(item)\n    return unique_list\n\n# Example usage:\nL = [1, 2, 2,",
        "generated_testcode": "assert remove_empty([(), (), ('',), ('a', 'b'), ('a', 'b', 'c'), ('d')]) == [('a', 'b', 'c'), ('d')]\n\n",
        "test": "assert remove_empty([(), (), ('',), ('a', 'b'), ('a', 'b', 'c'), ('d')])==[('',), ('a', 'b'), ('a', 'b', 'c'), 'd']  \nassert remove_empty([(), (), ('',), (\"python\"), (\"program\")])==[('',), (\"python\"), (\"program\")]  \nassert remove_empty([(), (), ('',), (\"java\")])==[('',),(\"java\") ]  ",
        "canonical_solution": "def remove_empty(tuple1): #L = [(), (), ('',), ('a', 'b'), ('a', 'b', 'c'), ('d')]\r\n   tuple1 = [t for t in tuple1 if t]\r\n   return tuple1"
    },
    {
        "number": 967,
        "prompt": "Write a python function to accept the strings which contains all vowels.\ndef check(string): \n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'] \n    for i in string: \n        if i in vowels: \n            return True\n    return False\n\n#Testing the function\nstring1 = \"Hello world\"\nstring2 = \"Python\"\nstring3 = \"AEIOU\"\nprint(check(string1)) #False\nprint(check(string2)) #False\nprint(check(string3)) #True\n\n#In this program, we have defined a function called `check` which accepts a string as input and returns a boolean value `True` if the string contains any vowel. \n#We have created a list of vowels and checked if the characters in the string are present in the list using a for loop. \n#If any character in the string matches with any vowel, the function returns `True` else it returns `False`. \n#We have tested the function with three strings and it is working as expected. ",
        "generated_testcode": "assert check(\"hello\") == True\n",
        "test": "assert check(\"SEEquoiaL\") == 'accepted'\nassert check('program') == \"not accepted\"\nassert check('fine') == \"not accepted\"",
        "canonical_solution": "def check(string): \r\n  if len(set(string).intersection(\"AEIOUaeiou\"))>=5: \r\n    return ('accepted') \r\n  else: \r\n    return (\"not accepted\") "
    },
    {
        "number": 968,
        "prompt": "Write a python function to find maximum possible value for the given periodic function.\ndef floor_Max(A,B,N):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    max_val = -float('inf')\n    for i in range(1,N+1):\n        if (i%B) == 0:\n            if A[i] > max_val:\n                max_val = A[i]\n    return max_val\n\n#Example usage\nA = [2,3,4,5,6,7,8,9,10,11,12]\nB = 3\nN = 8\nprint(floor_Max(A,B,N)) #Output: 9\n\nA = [1,2,3,4,5,6,7,8,9,10]\nB = 2\nN = 7\nprint(floor_Max(A,B,N)) #Output: 6\n\nA = [1,2,3,4,5,6,7,8,9,10,11,12]\nB = 4\nN = 9\nprint(floor_Max(A,B,N)) #Output: 10\n\nA = [1,2,3,4,5,6,7,8,9,10,11,12]\nB = 5\nN = 10\nprint(floor_Max(A,B,N)) #Output: 12\n\nA = [1,2,3,4,5,6,7,8,9,10,11,12]\nB = 6\nN = 12\nprint(floor_",
        "generated_testcode": "assert floor_Max(1,2,3) == 6\n",
        "test": "assert floor_Max(11,10,9) == 9\nassert floor_Max(5,7,4) == 2\nassert floor_Max(2,2,1) == 1",
        "canonical_solution": "def floor_Max(A,B,N):\r\n    x = min(B - 1,N)\r\n    return (A*x) // B"
    },
    {
        "number": 969,
        "prompt": "Write a function to join the tuples if they have similar initial elements.\ndef join_tuples(test_list):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    result = []\n    temp = []\n    for i in range(len(test_list)):\n        if i == 0:\n            temp.append(test_list[i])\n        else:\n            if test_list[i][0] == temp[-1][0]:\n                temp.append(test_list[i])\n            else:\n                result.append(temp)\n                temp = [test_list[i]]\n    result.append(temp)\n    return result\n\n# Example usage:\ntest_list = [(1, \"apple\"), (1, \"banana\"), (2, \"cherry\"), (2, \"grape\"), (3, \"kiwi\"), (3, \"mango\"), (3, \"orange\")]\nprint(join_tuples(test_list))  # Output: [[(1, 'apple', 'banana'), (2, 'cherry', 'grape'), (3, 'kiwi', 'mango', 'orange')]\n\n# time complexity: O(n)\n# space complexity: O(n)\n\n# Another solution:\ndef join_tuples(test_list):\n    d = {}\n    for tup in test_list:\n        if tup[0] in d:\n            d[tup[0]].append(tup[1])\n        else:\n            d[tup[0]] = [tup[1]]\n    return [tuple([k] + d[k]) for k in d.keys()]\n\n# Example usage:",
        "generated_testcode": "assert join_tuples(test_list) == [('a', 'b', 'c', 'd'), ('e', 'f', 'g'), ('h', 'i', 'j', 'k', 'l'), ('m', 'n', 'o', 'p', 'q', 'r')]\n\n# The output should be [('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r')]\n\n",
        "test": "assert join_tuples([(5, 6), (5, 7), (6, 8), (6, 10), (7, 13)] ) == [(5, 6, 7), (6, 8, 10), (7, 13)]\nassert join_tuples([(6, 7), (6, 8), (7, 9), (7, 11), (8, 14)] ) == [(6, 7, 8), (7, 9, 11), (8, 14)]\nassert join_tuples([(7, 8), (7, 9), (8, 10), (8, 12), (9, 15)] ) == [(7, 8, 9), (8, 10, 12), (9, 15)]",
        "canonical_solution": "def join_tuples(test_list):\r\n  res = []\r\n  for sub in test_list:\r\n    if res and res[-1][0] == sub[0]:\r\n      res[-1].extend(sub[1:])\r\n    else:\r\n      res.append([ele for ele in sub])\r\n  res = list(map(tuple, res))\r\n  return (res) "
    },
    {
        "number": 970,
        "prompt": "Write a function to find minimum of two numbers.\ndef min_of_two( x, y ):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    if x < y:\n        return x\n    else:\n        return y\n\nprint(min_of_two(5, 9))  # Output: 5\nprint(min_of_two(9, 5))  # Output: 5\nprint(min_of_two(10, 10))  # Output: 10\n\n# Output: 5 5 10 ",
        "generated_testcode": "assert min_of_two( 3, 5 ) == 3\n",
        "test": "assert min_of_two(10,20)==10\nassert min_of_two(19,15)==15\nassert min_of_two(-10,-20)==-20",
        "canonical_solution": "def min_of_two( x, y ):\r\n    if x < y:\r\n        return x\r\n    return y"
    },
    {
        "number": 971,
        "prompt": "Write a function to find the maximum number of segments of lengths a, b and c that can be formed from n.\ndef maximum_segments(n, a, b, c) : \n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    count = 0\n    while n >= a + b + c : \n        count += 1\n        n -= a + b + c \n    if n >= a + b : \n        count += 1\n        n -= a + b \n    if n >= a : \n        count += 1\n    return count ",
        "generated_testcode": "assert maximum_segments(10, 2, 3) == 3\n",
        "test": "assert maximum_segments(7, 5, 2, 5) == 2\nassert maximum_segments(17, 2, 1, 3) == 17\nassert maximum_segments(18, 16, 3, 6) == 6",
        "canonical_solution": "def maximum_segments(n, a, b, c) : \r\n\tdp = [-1] * (n + 10) \r\n\tdp[0] = 0\r\n\tfor i in range(0, n) : \r\n\t\tif (dp[i] != -1) : \r\n\t\t\tif(i + a <= n ): \r\n\t\t\t\tdp[i + a] = max(dp[i] + 1, \r\n\t\t\t\t\t\t\tdp[i + a]) \r\n\t\t\tif(i + b <= n ): \r\n\t\t\t\tdp[i + b] = max(dp[i] + 1, \r\n\t\t\t\t\t\t\tdp[i + b]) \r\n\t\t\tif(i + c <= n ): \r\n\t\t\t\tdp[i + c] = max(dp[i] + 1, \r\n\t\t\t\t\t\t\tdp[i + c]) \r\n\treturn dp[n]"
    },
    {
        "number": 972,
        "prompt": "Write a function to concatenate the given two tuples to a nested tuple.\ndef concatenate_nested(test_tup1, test_tup2):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    new_tup = ()\n    for i in test_tup1:\n        if type(i) == tuple:\n            new_tup = new_tup + (i,)\n        else:\n            new_tup = new_tup + (i,)\n    for j in test_tup2:\n        if type(j) == tuple:\n            new_tup = new_tup + (j,)\n        else:\n            new_tup = new_tup + (j,)\n    return new_tup\n\n\n# Test the function with the following tuples\ntest_tup1 = (1, 2, (3, 4), (5, 6, 7), 8, (9, 10, 11, 12) , 13)\ntest_tup2 = (14, (15, 16), 17)\nprint(concatenate_nested(test_tup1, test_tup2)) # output: (1, 2, (3, 4), (5, 6, 7), 8, (9, 10, 11, 12), 13, 14, (15, 16), 17)\n\ntest_tup3 = (1, (2, 3), (4,), 5)\ntest_tup4 = (6, (7, 8, 9), 10)\nprint(conc",
        "generated_testcode": "assert concatenate_nested((1, 2, (3, 4), (5, 6)), (7, 8, 9)) == (1, 2, (3, 4, 7, 8, 9)\n\n",
        "test": "assert concatenate_nested((3, 4), (5, 6)) == (3, 4, 5, 6)\nassert concatenate_nested((1, 2), (3, 4)) == (1, 2, 3, 4)\nassert concatenate_nested((4, 5), (6, 8)) == (4, 5, 6, 8)",
        "canonical_solution": "def concatenate_nested(test_tup1, test_tup2):\r\n  res = test_tup1 + test_tup2\r\n  return (res) "
    },
    {
        "number": 973,
        "prompt": "Write a python function to left rotate the string.\ndef left_rotate(s,d):\n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    if d == 0:\n        return s\n    else:\n        return s[d:] + s[:d]\n\ns = \"Hello\"\nd = 2\nprint(left_rotate(s,d)) # Expected output: \"lloHel\"\n\n# Output: \"lloHel\"\n#Explanation: We rotate the string s by d = 2, so the first 2 characters are cut from the end of the string and then added to the beginning.\n\n\ns = \"Python\"\nd = 3\nprint(left_rotate(s,d)) # Expected output: \"thonPy\"\n\n# Output: \"thonPy\"\n#Explanation: We rotate the string s by d = 3, so the first 3 characters are cut from the end of the string and then added to the beginning.\n\ns = \"abcde\"\nd = 4\nprint(left_rotate(s,d)) # Expected output: \"eabcd\"\n\n# Output: \"eabcd\"\n#Explanation: We rotate the string s by d = 4, so the first 4 characters are cut from the end of the string and then added to the beginning.\n\ns = \"abcdef\"\nd = 6\nprint(left_rotate(s,d)) # Expected output: \"fabcde\"\n\n# Output: \"fabcde\"\n#Explanation: We rotate the string s by d = 6, so the first 6 characters are cut from the end of the string and then added",
        "generated_testcode": "assert left_rotate(\"hello\", 2) == \"llohe\"\n",
        "test": "assert left_rotate(\"python\",2) == \"thonpy\"   \nassert left_rotate(\"bigdata\",3 ) == \"databig\" \nassert left_rotate(\"hadoop\",1 ) == \"adooph\" ",
        "canonical_solution": "def left_rotate(s,d):\r\n    tmp = s[d : ] + s[0 : d]\r\n    return tmp  "
    },
    {
        "number": 974,
        "prompt": "Write a function to find the minimum total path sum in the given triangle.\ndef min_sum_path(A): \n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    n = len(A)\n    for i in range(n-2, -1, -1):\n        for j in range(len(A[i])):\n            A[i][j] += min(A[i+1][j], A[i+1][j+1])\n    return A[0][0]\n\ndef main(): \n    A = [[3],[2,4],[6,5,1],[7,1,8,3] ]\n    print(\"Minimum sum:\", min_sum_path(A)) # Output: 11\n\nif __name__ == \"__main__\": \n    main() ",
        "generated_testcode": "assert min_sum_path([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 13\n",
        "test": "assert min_sum_path([[ 2 ], [3, 9 ], [1, 6, 7 ]]) == 6\nassert min_sum_path([[ 2 ], [3, 7 ], [8, 5, 6 ]]) == 10 \nassert min_sum_path([[ 3 ], [6, 4 ], [5, 2, 7 ]]) == 9",
        "canonical_solution": "def min_sum_path(A): \r\n\tmemo = [None] * len(A) \r\n\tn = len(A) - 1\r\n\tfor i in range(len(A[n])): \r\n\t\tmemo[i] = A[n][i] \r\n\tfor i in range(len(A) - 2, -1,-1): \r\n\t\tfor j in range( len(A[i])): \r\n\t\t\tmemo[j] = A[i][j] + min(memo[j], \r\n\t\t\t\t\t\t\t\t\tmemo[j + 1]) \r\n\treturn memo[0]"
    }
]