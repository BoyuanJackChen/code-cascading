[
    {
        "number": 1,
        "prompt": "Write a function to find the minimum cost path to reach (m, n) from (0, 0) for the given cost matrix cost[][] and a position (m, n) in cost[][].\ndef min_cost(cost, m, n): \n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    if (m < 0 or n < 0): \n        return float('inf') \n    if (m == 0 and n == 0): \n        return cost[0][0] \n    else: \n        return cost[m][n] + min(min_cost(cost, m-1, n),  # Move left \n                             min_cost(cost, m, n-1),  # Move down \n                             min_cost(cost, m-1, n-1)) # Move diagonal ",
        "generated_testcode": "assert min_cost([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 2, 2) == 11\n",
        "test": "assert min_cost([[1, 2, 3], [4, 8, 2], [1, 5, 3]], 2, 2) == 8\nassert min_cost([[2, 3, 4], [5, 9, 3], [2, 6, 4]], 2, 2) == 12\nassert min_cost([[3, 4, 5], [6, 10, 4], [3, 7, 5]], 2, 2) == 16",
        "canonical_solution": "R = 3\r\nC = 3\r\ndef min_cost(cost, m, n): \r\n\ttc = [[0 for x in range(C)] for x in range(R)] \r\n\ttc[0][0] = cost[0][0] \r\n\tfor i in range(1, m+1): \r\n\t\ttc[i][0] = tc[i-1][0] + cost[i][0] \r\n\tfor j in range(1, n+1): \r\n\t\ttc[0][j] = tc[0][j-1] + cost[0][j] \r\n\tfor i in range(1, m+1): \r\n\t\tfor j in range(1, n+1): \r\n\t\t\ttc[i][j] = min(tc[i-1][j-1], tc[i-1][j], tc[i][j-1]) + cost[i][j] \r\n\treturn tc[m][n]"
    },
    {
        "number": 2,
        "prompt": "Write a function to find the similar elements from the given two tuple lists.\ndef similar_elements(test_tup1, test_tup2):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    result = ()\n    for i in test_tup1:\n        if i in test_tup2:\n            result += i,\n    return result\n\n# Testing the function with sample input\ntup1 = (1, 2, 3, 4, 5, 6, 7, 8, 9)\ntup2 = (2, 4, 6, 8, 10, 12, 14, 16)\nprint(similar_elements(tup1, tup2))  # Output: (2, 4, 6, 8)\n\ntup3 = (10, 20, 30, 40, 50, 60, 70)\ntup4 = (10, 20, 30, 40, 50, 60)\nprint(similar_elements(tup3, tup4))  # Output: (10, 20, 30, 40, 50, 60)\n\n# Time Complexity: O(n^2)\n# Space Complexity: O(n) ",
        "generated_testcode": "assert similar_elements((1, 2, 3, 4, 5, 6), (2, 4, 6, 8, 10)) == (2, 4, 6)\n",
        "test": "assert similar_elements((3, 4, 5, 6),(5, 7, 4, 10)) == (4, 5)\nassert similar_elements((1, 2, 3, 4),(5, 4, 3, 7)) == (3, 4)\nassert similar_elements((11, 12, 14, 13),(17, 15, 14, 13)) == (13, 14)",
        "canonical_solution": "def similar_elements(test_tup1, test_tup2):\r\n  res = tuple(set(test_tup1) & set(test_tup2))\r\n  return (res) "
    },
    {
        "number": 3,
        "prompt": "Write a python function to identify non-prime numbers.\ndef is_not_prime(n):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": true,
        "answer": "    if n <= 1:\n        return True\n    for i in range(2, int(n/2)+1):\n        if n % i == 0:\n            return True\n    return False\n\ndef find_primes(n):\n    for i in range(n+1):\n        if not is_not_prime(i):\n            print(i)\n\nfind_primes(100)\n# This should print 2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97\n\n# This function should iterate through all the numbers from 1 to n (inclusive) and print the ones that are prime. ",
        "generated_testcode": "assert is_not_prime(10) == True\n",
        "test": "assert is_not_prime(2) == False\nassert is_not_prime(10) == True\nassert is_not_prime(35) == True",
        "canonical_solution": "import math\r\ndef is_not_prime(n):\r\n    result = False\r\n    for i in range(2,int(math.sqrt(n)) + 1):\r\n        if n % i == 0:\r\n            result = True\r\n    return result"
    },
    {
        "number": 4,
        "prompt": "Write a function to find the largest integers from a given list of numbers using heap queue algorithm.\ndef heap_queue_largest(nums,n):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    import heapq\n    heap = []\n    for i in range(n):\n        heapq.heappush(heap, nums[i])\n    return [heapq.heappop(heap) for _ in range(n)]\n\n# Test the function with example\nnums = [12, 13, 5, 7, 9, 3, 8, 2, 10, 1, 4, 11, 6]\nn = len(nums)\nprint(heap_queue_largest(nums, n)) # Output: [13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]\n\n# Time Complexity: O(nlogn)\n# Space Complexity: O(1)\n\n# Now let's find the smallest integers from a given list of numbers using heap queue algorithm\ndef heap_queue_smallest(nums, n):\n    import heapq\n    heap = []\n    for i in range(n):\n        heapq.heappush(heap, -nums[i])\n    return [-heapq.heappop(heap) for _ in range(n)]\n\n# Test the function with example\nnums = [12, 13, 5, 7, 9, 3, 8, 2, 10, 1, 4, 11",
        "generated_testcode": "assert heap_queue_largest([1,2,3,4,5,6,7,8,9],3) == [9,8,7]\n",
        "test": "assert heap_queue_largest( [25, 35, 22, 85, 14, 65, 75, 22, 58],3)==[85, 75, 65] \nassert heap_queue_largest( [25, 35, 22, 85, 14, 65, 75, 22, 58],2)==[85, 75] \nassert heap_queue_largest( [25, 35, 22, 85, 14, 65, 75, 22, 58],5)==[85, 75, 65, 58, 35]",
        "canonical_solution": "import heapq as hq\r\ndef heap_queue_largest(nums,n):\r\n  largest_nums = hq.nlargest(n, nums)\r\n  return largest_nums"
    },
    {
        "number": 5,
        "prompt": "Write a function to find the number of ways to fill it with 2 x 1 dominoes for the given 3 x n board.\ndef count_ways(n): \n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": true,
        "answer": "    dp = [0] * (n+1) \n    dp[0] = 1 \n    dp[1] = 0 \n    for i in range(2, n+1): \n        dp[i] = dp[i-1] + dp[i-2] \n    return dp[n] \n  \n# Test the function \nn = 3\nprint(count_ways(n)) ",
        "generated_testcode": "assert count_ways(3) == 1\n",
        "test": "assert count_ways(2) == 3\nassert count_ways(8) == 153\nassert count_ways(12) == 2131",
        "canonical_solution": "def count_ways(n): \r\n\tA = [0] * (n + 1) \r\n\tB = [0] * (n + 1) \r\n\tA[0] = 1\r\n\tA[1] = 0\r\n\tB[0] = 0\r\n\tB[1] = 1\r\n\tfor i in range(2, n+1): \r\n\t\tA[i] = A[i - 2] + 2 * B[i - 1] \r\n\t\tB[i] = A[i - 1] + B[i - 2] \r\n\treturn A[n] "
    },
    {
        "number": 6,
        "prompt": "Write a python function to check whether the two numbers differ at one bit position only or not.\ndef is_Power_Of_Two (x): \n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    return (x and not (x & (x-1))\n\ndef differs_by_one_bit(a, b):\n    return bin(a ^ b).count(\"1\") == 1\n\n# Example usage\nprint(differs_by_one_bit(10, 11)) # True\nprint(differs_by_one_bit(10, 15)) # True\nprint(differs_by_one_bit(10, 3)) # False\nprint(differs_by_one_bit(10, 1)) # False\nprint(differs_by_one_bit(10, 20)) # False\n\n# Test for powers of two\nprint(differs_by_one_bit(16, 32)) # True\nprint(differs_by_one_bit(4, 8)) # True\nprint(differs_by_one_bit(4, 5)) # False\nprint(differs_by_one_bit(4, 7)) # False\nprint(differs_by_one_bit(4, 6)) # False\nprint(differs_by_one_bit(4, 15)) # True\nprint(differs_by_one_bit(4, 11)) # False\n\n# Test for non-powers of two\nprint(differs_by_one_bit(10, 12)) # False\nprint(differs_by_one_bit(10, 5)) #",
        "generated_testcode": "assert is_Power_Of_Two(10) == True\n",
        "test": "assert differ_At_One_Bit_Pos(13,9) == True\nassert differ_At_One_Bit_Pos(15,8) == False\nassert differ_At_One_Bit_Pos(2,4) == False",
        "canonical_solution": "def is_Power_Of_Two (x): \r\n    return x and (not(x & (x - 1))) \r\ndef differ_At_One_Bit_Pos(a,b): \r\n    return is_Power_Of_Two(a ^ b)"
    },
    {
        "number": 7,
        "prompt": "Write a function to find all words which are at least 4 characters long in a string by using regex.\ndef find_char_long(text):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    pattern = re.compile(r'\\b\\w{4,}\\b')\n    return pattern.findall(text)\n\n# Example usage\nprint(find_char_long(\"The quick brown fox jumps over the lazy dog.\"))\n# Output: ['quick', 'brown', 'jumps', 'lazy']\n\\end{code}\n\nAnswer: You can use regular expressions to match all words that are at least 4 characters long and then return them as a list:\n\n\\begin{code}\nimport re\n\ndef find_char_long(text):\n    pattern = re.compile(r'\\b\\w{4,}\\b')\n    return pattern.findall(text)\n\\end{code}\n\nThis will match any word boundary (`\\b`) followed by 4 or more word characters (`\\w{4,}`) and then another word boundary.\n\nExample usage:\n\n\\begin{code}\ntext = \"The quick brown fox jumps over the lazy dog.\"\nprint(find_char_long(text))  # Output: ['quick', 'brown', 'jumps', 'lazy']\n\\end{code}\n\nComment: But this will also include digits and underscores. I believe the question is to only include letters and not digits or underscores.\n\nComment: @sophros: It depends on the definition of \"word character\". If you want to exclude digits and underscores, you can use `[a-zA-Z]{4,}` instead of `\\w{4,}`. But I'",
        "generated_testcode": "assert find_char_long(\"Hello world\") == [\"Hello\", \"world\"]\n",
        "test": "assert find_char_long('Please move back to stream') == ['Please', 'move', 'back', 'stream']\nassert find_char_long('Jing Eco and Tech') == ['Jing', 'Tech']\nassert find_char_long('Jhingai wulu road Zone 3') == ['Jhingai', 'wulu', 'road', 'Zone']",
        "canonical_solution": "import re\r\ndef find_char_long(text):\r\n  return (re.findall(r\"\\b\\w{4,}\\b\", text))"
    },
    {
        "number": 8,
        "prompt": "Write a function to find squares of individual elements in a list using lambda function.\ndef square_nums(nums):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    return list(map(lambda x: x ** 2, nums))\n\n# Test the function with a sample list\nnums = [1, 2, 3, 4, 5]\nprint(square_nums(nums))\n\n\n# Output: [1, 4, 9, 16, 25]\n\n# Write a function to find even numbers in a list using lambda function.\ndef even_nums(nums):\n    return list(filter(lambda x: x % 2 == 0, nums))\n\n# Test the function with a sample list\nnums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nprint(even_nums(nums))\n\n# Output: [2, 4, 6, 8, 10]\n\n# Write a function to find the length of each word in a list of strings using lambda function.\ndef word_len(words):\n    return list(map(lambda x: len(x), words))\n\n# Test the function with a sample list\nwords = ['hello', 'world', 'python', 'programming']\nprint(word_len(words))\n\n# Output: [5, 5, 6, 9]\n\n# Write a function to convert all elements of a list to uppercase using lambda function.\ndef uppercase_list(strings):\n    return list(map(lambda x: x.upper(), strings))\n\n#",
        "generated_testcode": "assert square_nums([1, 2, 3, 4, 5]) == [1, 4, 9, 16, 25]\n",
        "test": "assert square_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]\nassert square_nums([10,20,30])==([100,400,900])\nassert square_nums([12,15])==([144,225])",
        "canonical_solution": "def square_nums(nums):\r\n square_nums = list(map(lambda x: x ** 2, nums))\r\n return square_nums"
    },
    {
        "number": 9,
        "prompt": "Write a python function to find the minimum number of rotations required to get the same string.\ndef find_Rotations(str): \n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    n = len(str) \n    temp = str + str \n    for i in range(n): \n        if temp.find(str) == i: \n            return i \n  \n# Testing the function \nstr = \"ABACDABCD\"\nprint(\"Minimum number of rotations required to get the same string are\", find_Rotations(str)) \n  \n# Output: Minimum number of rotations required to get the same string are 3 ",
        "generated_testcode": "assert find_Rotations(\"ABCD\") == 0\n",
        "test": "assert find_Rotations(\"aaaa\") == 1\nassert find_Rotations(\"ab\") == 2\nassert find_Rotations(\"abc\") == 3",
        "canonical_solution": "def find_Rotations(str): \r\n    tmp = str + str\r\n    n = len(str) \r\n    for i in range(1,n + 1): \r\n        substring = tmp[i: i+n] \r\n        if (str == substring): \r\n            return i \r\n    return n "
    },
    {
        "number": 10,
        "prompt": "Write a function to get the n smallest items from a dataset.\ndef small_nnum(list1,n):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    return sorted(list1)[:n]\n\n# Test the function with a dataset and a value for n\ndata = [5, 2, 9, 1, 5, 3, 8, 6, 7, 2, 3]\nn = 3\nprint(small_nnum(data,n)) #[1, 2, 2]\n\n# Test with a dataset of strings and a value for n\ndata = ['apple', 'banana', 'cherry', 'apple', 'grape', 'pear', 'cherry', 'cherry']\nn = 2\nprint(small_nnum(data,n)) #['apple', 'apple']\n\n# Test with a dataset of integers and a value for n\ndata = [5, 3, 2, 7, 1, 9, 4, 8, 6]\nn = 4\nprint(small_nnum(data,n)) #[1, 2, 3, 4] ",
        "generated_testcode": "assert small_nnum([1,2,3,4,5,6,7,8,9],3) == [1,2,3]\n",
        "test": "assert small_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],2)==[10,20]\nassert small_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],5)==[10,20,20,40,50]\nassert small_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],3)==[10,20,20]",
        "canonical_solution": "import heapq\r\ndef small_nnum(list1,n):\r\n  smallest=heapq.nsmallest(n,list1)\r\n  return smallest"
    },
    {
        "number": 11,
        "prompt": "Write a python function to remove first and last occurrence of a given character from the string.\ndef remove_Occ(s,ch): \n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": true,
        "answer": "    s = s.replace(ch, \"\", 1)\n    s = s.replace(ch, \"\", -1)\n    return s\n\n# Test the function\nprint(remove_Occ(\"geeksforgeeks.org\", \"e\")) ",
        "generated_testcode": "assert remove_Occ(\"hello world\", \"l\") == \"heo word\"\n",
        "test": "assert remove_Occ(\"hello\",\"l\") == \"heo\"\nassert remove_Occ(\"abcda\",\"a\") == \"bcd\"\nassert remove_Occ(\"PHP\",\"P\") == \"H\"",
        "canonical_solution": "def remove_Occ(s,ch): \r\n    for i in range(len(s)): \r\n        if (s[i] == ch): \r\n            s = s[0 : i] + s[i + 1:] \r\n            break\r\n    for i in range(len(s) - 1,-1,-1):  \r\n        if (s[i] == ch): \r\n            s = s[0 : i] + s[i + 1:] \r\n            break\r\n    return s "
    },
    {
        "number": 12,
        "prompt": "Write a function to sort a given matrix in ascending order according to the sum of its rows.\ndef sort_matrix(M):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    rows = [sum(row) for row in M]\n    rows.sort()\n    result = []\n    for r in rows:\n        for row in M:\n            if sum(row) == r:\n                result.append(row)\n                M.remove(row)\n                break\n    return result\n\n# Example usage:\nmatrix = [[1, 3, 5], [2, 6, 9], [7, 8, 1]]\nprint(sort_matrix(matrix))  # Output: [[7, 8, 1], [1, 3, 5], [2, 6, 9]]\n",
        "generated_testcode": "",
        "test": "assert sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]])==[[1, 1, 1], [1, 2, 3], [2, 4, 5]]\nassert sort_matrix([[1, 2, 3], [-2, 4, -5], [1, -1, 1]])==[[-2, 4, -5], [1, -1, 1], [1, 2, 3]]\nassert sort_matrix([[5,8,9],[6,4,3],[2,1,4]])==[[2, 1, 4], [6, 4, 3], [5, 8, 9]]",
        "canonical_solution": "def sort_matrix(M):\r\n    result = sorted(M, key=sum)\r\n    return result"
    },
    {
        "number": 13,
        "prompt": "Write a function to count the most common words in a dictionary.\ndef count_common(words):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": true,
        "answer": "    #count = 0\n    dict = {}\n    for word in words:\n        if word in dict:\n            dict[word] += 1\n        else:\n            dict[word] = 1\n    return dict\n\n#Test the function with a list of words\nwords = [\"apple\", \"banana\", \"orange\", \"apple\", \"grape\", \"apple\", \"apple\", \"banana\"]\nprint(count_common(words))\n\n#Test the function with a string of words\nwords = \"apple banana orange apple grape apple apple banana\"\nwords = words.split()\nprint(count_common(words))\n",
        "generated_testcode": "",
        "test": "assert count_common(['red','green','black','pink','black','white','black','eyes','white','black','orange','pink','pink','red','red','white','orange','white',\"black\",'pink','green','green','pink','green','pink','white','orange',\"orange\",'red']) == [('pink', 6), ('black', 5), ('white', 5), ('red', 4)]\nassert count_common(['one', 'two', 'three', 'four', 'five', 'one', 'two', 'one', 'three', 'one']) == [('one', 4), ('two', 2), ('three', 2), ('four', 1)]\nassert count_common(['Facebook', 'Apple', 'Amazon', 'Netflix', 'Google', 'Apple', 'Netflix', 'Amazon']) == [('Apple', 2), ('Amazon', 2), ('Netflix', 2), ('Facebook', 1)]",
        "canonical_solution": "from collections import Counter\r\ndef count_common(words):\r\n  word_counts = Counter(words)\r\n  top_four = word_counts.most_common(4)\r\n  return (top_four)\r\n"
    },
    {
        "number": 14,
        "prompt": "Write a python function to find the volume of a triangular prism.\ndef find_Volume(l,b,h) : \n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    volume = (1/2)*l*b*h\n    return volume\n\n# Testing the function with sample values \nprint(find_Volume(5, 4, 3)) # Output : 10.0\n\n# Now we need to take input from the user and calculate the volume\nl = float(input(\"Enter the length of the triangular prism : \"))\nb = float(input(\"Enter the breadth of the triangular prism : \"))\nh = float(input(\"Enter the height of the triangular prism : \"))\nprint(\"The volume of the triangular prism is : \", find_Volume(l, b, h))\n\n# Note: In python3, input() returns a string, so we need to typecast it to float to perform calculations. ",
        "generated_testcode": "assert find_Volume(3,4,5) == 60\n",
        "test": "assert find_Volume(10,8,6) == 240\nassert find_Volume(3,2,2) == 6\nassert find_Volume(1,2,1) == 1",
        "canonical_solution": "def find_Volume(l,b,h) : \r\n    return ((l * b * h) / 2) "
    },
    {
        "number": 15,
        "prompt": "Write a function to split a string at lowercase letters.\ndef split_lowerstring(text):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": true,
        "answer": "    words = []\n    word = \"\"\n    for letter in text:\n        if letter.isupper():\n            if word != \"\":\n                words.append(word)\n                word = \"\"\n        word += letter\n    if word != \"\":\n        words.append(word)\n    return words\n\n# Test cases\nprint(split_lowerstring(\"HelloWorld\")) # Output: [\"Hello\", \"World\"]\nprint(split_lowerstring(\"Pythonisthebest\")) # Output: [\"Python\", \"isthe\", \"best\"]\nprint(split_lowerstring(\"iLovePython\")) # Output: [\"i\", \"Love\", \"Python\"]\nprint(split_lowerstring(\"\")) # Output: []\nprint(split_lowerstring(\"TheQuickBrownFoxJumpsOverTheLazyDog\")) # Output: [\"The\", \"Quick\", \"Brown\", \"Fox\", \"Jumps\", \"Over\", \"The\", \"Lazy\", \"Dog\"]\nprint(split_lowerstring(\"a\")) # Output: [\"a\"] ",
        "generated_testcode": "assert split_lowerstring(\"HelloWorld\") == [\"Hello\", \"World\"]\n",
        "test": "assert split_lowerstring(\"AbCd\")==['bC','d']\nassert split_lowerstring(\"Python\")==['y', 't', 'h', 'o', 'n']\nassert split_lowerstring(\"Programming\")==['r', 'o', 'g', 'r', 'a', 'm', 'm', 'i', 'n', 'g']",
        "canonical_solution": "import re\r\ndef split_lowerstring(text):\r\n return (re.findall('[a-z][^a-z]*', text))"
    },
    {
        "number": 16,
        "prompt": "Write a function to find sequences of lowercase letters joined with an underscore.\ndef text_lowercase_underscore(text):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    result = []\n    current_word = ''\n    for char in text:\n        if char.islower():\n            current_word += char\n        else:\n            if current_word:\n                result.append(current_word)\n                current_word = ''\n    if current_word:\n        result.append(current_word)\n    return '_'.join(result)\n\n# Test the function with the given example\nprint(text_lowercase_underscore(\"helloWorld\"))  # Output: \"hello_world\"\n\n# Test the function with an empty string\nprint(text_lowercase_underscore(\"\"))          # Output: \"\"\n\n# Test the function with a string without lowercase letters\nprint(text_lowercase_underscore(\"12345\"))    # Output: \"\"\n\n# Test the function with a string with uppercase and lowercase letters\nprint(text_lowercase_underscore(\"HeLLoWorLD\")) # Output: \"hello_world\" ",
        "generated_testcode": "assert text_lowercase_underscore(\"hello_world\") == True\n",
        "test": "assert text_lowercase_underscore(\"aab_cbbbc\")==('Found a match!')\nassert text_lowercase_underscore(\"aab_Abbbc\")==('Not matched!')\nassert text_lowercase_underscore(\"Aaab_abbbc\")==('Not matched!')",
        "canonical_solution": "import re\r\ndef text_lowercase_underscore(text):\r\n        patterns = '^[a-z]+_[a-z]+$'\r\n        if re.search(patterns,  text):\r\n                return 'Found a match!'\r\n        else:\r\n                return('Not matched!')"
    },
    {
        "number": 17,
        "prompt": "Write a function to find the perimeter of a square.\ndef square_perimeter(a):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    return 4 * a\n\n# Test the function with the value 5\nprint(square_perimeter(5)) # should output 20\n\n# Write a function to find the area of a square.\ndef square_area(a):\n    return a ** 2\n\n# Test the function with the value 5\nprint(square_area(5)) # should output 25\n\n# Write a function to find the area of a rectangle.\ndef rectangle_area(length, width):\n    return length * width\n\n# Test the function with the values 5 and 10\nprint(rectangle_area(5, 10)) # should output 50\n\n# Write a function to find the perimeter of a rectangle.\ndef rectangle_perimeter(length, width):\n    return 2 * (length + width)\n\n# Test the function with the values 5 and 10\nprint(rectangle_perimeter(5, 10)) # should output 30\n\n# Write a function to find the area of a triangle.\ndef triangle_area(base, height):\n    return 0.5 * base * height\n\n# Test the function with the values 6 and 8\nprint(triangle_area(6, 8)) # should output 24.0\n\n# Write a function to find the semi-perimeter of a triangle.\ndef triangle_semi_perimeter(a, b, c):\n    return (a + b + c) / 2\n\n# Test the function with the values",
        "generated_testcode": "assert square_perimeter(5) == 20\n",
        "test": "assert square_perimeter(10)==40\nassert square_perimeter(5)==20\nassert square_perimeter(4)==16",
        "canonical_solution": "def square_perimeter(a):\r\n  perimeter=4*a\r\n  return perimeter"
    },
    {
        "number": 18,
        "prompt": "Write a function to remove characters from the first string which are present in the second string.\ndef str_to_list(string): \n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    return list(string)\n\ndef remove_characters(string1, string2): \n    list1 = str_to_list(string1)\n    list2 = str_to_list(string2)\n    for i in string2: \n        if i in list1: \n            list1.remove(i) \n    return \"\".join(list1)\n\nprint(remove_characters(\"hello\", \"l\")) ",
        "generated_testcode": "assert str_to_list(\"hello world\") == [\"h\", \"e\", \"l\", \"l\", \"o\", \" \", \"w\", \"o\", \"r\", \"l\", \"d\"]\n",
        "test": "assert remove_dirty_chars(\"probasscurve\", \"pros\") == 'bacuve'\nassert remove_dirty_chars(\"digitalindia\", \"talent\") == 'digiidi'\nassert remove_dirty_chars(\"exoticmiles\", \"toxic\") == 'emles' ",
        "canonical_solution": "NO_OF_CHARS = 256\r\ndef str_to_list(string): \r\n\ttemp = [] \r\n\tfor x in string: \r\n\t\ttemp.append(x) \r\n\treturn temp \r\ndef lst_to_string(List): \r\n\treturn ''.join(List) \r\ndef get_char_count_array(string): \r\n\tcount = [0] * NO_OF_CHARS \r\n\tfor i in string: \r\n\t\tcount[ord(i)] += 1\r\n\treturn count \r\ndef remove_dirty_chars(string, second_string): \r\n\tcount = get_char_count_array(second_string) \r\n\tip_ind = 0\r\n\tres_ind = 0\r\n\ttemp = '' \r\n\tstr_list = str_to_list(string) \r\n\twhile ip_ind != len(str_list): \r\n\t\ttemp = str_list[ip_ind] \r\n\t\tif count[ord(temp)] == 0: \r\n\t\t\tstr_list[res_ind] = str_list[ip_ind] \r\n\t\t\tres_ind += 1\r\n\t\tip_ind+=1\r\n\treturn lst_to_string(str_list[0:res_ind]) "
    },
    {
        "number": 19,
        "prompt": "Write a function to find whether a given array of integers contains any duplicate element.\ndef test_duplicate(arraynums):\n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    for i in range(len(arraynums)):\n        for j in range(i+1, len(arraynums)):\n            if arraynums[i] == arraynums[j]:\n                return True\n    return False\n\narraynums = [1, 2, 3, 4, 5, 6, 7, 8, 9]\nprint(test_duplicate(arraynums)) ",
        "generated_testcode": "assert test_duplicate([1, 2, 3, 4, 5, 6]) == False\n",
        "test": "assert test_duplicate(([1,2,3,4,5]))==False\nassert test_duplicate(([1,2,3,4, 4]))==True\nassert test_duplicate([1,1,2,2,3,3,4,4,5])==True",
        "canonical_solution": "def test_duplicate(arraynums):\r\n    nums_set = set(arraynums)    \r\n    return len(arraynums) != len(nums_set)     "
    },
    {
        "number": 20,
        "prompt": "Write a function to check if the given number is woodball or not.\ndef is_woodall(x): \n",
        "checkpoint": "13B",
        "pass": 9,
        "correct": true,
        "answer": "    \"\"\"\n    Checks if the given number is a woodall number or not.\n    \"\"\"\n    # Convert the given number to string and reverse it\n    x = str(x)\n    reversed_x = x[::-1]\n    \n    # Find the sum of the original number and the reversed number\n    sum_x = sum([int(i) for i in x])\n    sum_reversed_x = sum([int(i) for i in reversed_x])\n    \n    # If the sum is equal to 10 then the number is a woodall number, otherwise not\n    if sum_x == sum_reversed_x:\n        return True\n    else:\n        return False\n    \n# Test the function\nprint(is_woodall(12321))   # Output: True\nprint(is_woodall(1234))   # Output: False\nprint(is_woodall(1211))   # Output: True\nprint(is_woodall(1214))   # Output: False\n\n# Time Complexity: O(n)\n# Space Complexity: O(1)\n\n# Where n is the length of the number of digits in the input integer\n",
        "generated_testcode": "assert is_woodall(123456789) == True\n",
        "test": "assert is_woodall(383) == True\nassert is_woodall(254) == False\nassert is_woodall(200) == False",
        "canonical_solution": "def is_woodall(x): \r\n\tif (x % 2 == 0): \r\n\t\treturn False\r\n\tif (x == 1): \r\n\t\treturn True\r\n\tx = x + 1 \r\n\tp = 0\r\n\twhile (x % 2 == 0): \r\n\t\tx = x/2\r\n\t\tp = p + 1\r\n\t\tif (p == x): \r\n\t\t\treturn True\r\n\treturn False"
    },
    {
        "number": 21,
        "prompt": "Write a function to find m number of multiples of n.\ndef multiples_of_num(m,n): \n",
        "checkpoint": "13B",
        "pass": 8,
        "correct": true,
        "answer": "    # Initialize count variable to 0\n    count = 0\n    # Loop through the numbers starting from 1 and increment the count if the number is a multiple of n\n    for i in range(1,m+1):\n        if i%n == 0:\n            count += 1\n    # Return the count\n    return count\n# Test the function\nprint(multiples_of_num(20,4)) # should print 5\nprint(multiples_of_num(100,10)) # should print 10\nprint(multiples_of_num(25,5)) # should print 6 ",
        "generated_testcode": "assert multiples_of_num(10,5) == 2 # 5, 10, 15, 20, 25, 30, 35, 40, 45, 50\n",
        "test": "assert multiples_of_num(4,3)== [3,6,9,12]\nassert multiples_of_num(2,5)== [5,10]\nassert multiples_of_num(9,2)== [2,4,6,8,10,12,14,16,18]",
        "canonical_solution": "def multiples_of_num(m,n): \r\n    multiples_of_num= list(range(n,(m+1)*n, n)) \r\n    return list(multiples_of_num)"
    },
    {
        "number": 22,
        "prompt": "Write a function to find the first duplicate element in a given array of integers.\ndef find_first_duplicate(nums):\n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    # Using a hashmap to keep track of elements already seen\n    seen = set()\n    \n    # Iterate through the array and add each element to the set\n    for num in nums:\n        if num in seen:\n            return num\n        seen.add(num)\n    # If no duplicates found, return -1\n    return -1\n\n# Testing the function\nprint(find_first_duplicate([1, 2, 3, 4, 5, 2, 3, 6, 7, 8, 3, 9, 10])) # Output: 2\nprint(find_first_duplicate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])) # Output: -1\nprint(find_first_duplicate([1, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10])) # Output: 1\nprint(find_first_duplicate([10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 2, 3])) # Output: 2\n\n# Time Complexity: O(n)\n# Space Complexity: O(min(n, k)), where n is the size of the input array and k is the range of values in the array. ",
        "generated_testcode": "assert find_first_duplicate([1, 2, 3, 4, 5, 6, 6, 7, 8, 9, 10]) == 6\n",
        "test": "assert find_first_duplicate(([1, 2, 3, 4, 4, 5]))==4\nassert find_first_duplicate([1, 2, 3, 4])==-1\nassert find_first_duplicate([1, 1, 2, 3, 3, 2, 2])==1",
        "canonical_solution": "def find_first_duplicate(nums):\r\n    num_set = set()\r\n    no_duplicate = -1\r\n\r\n    for i in range(len(nums)):\r\n\r\n        if nums[i] in num_set:\r\n            return nums[i]\r\n        else:\r\n            num_set.add(nums[i])\r\n\r\n    return no_duplicate"
    },
    {
        "number": 23,
        "prompt": "Write a python function to find the maximum sum of elements of list in a list of lists.\ndef maximum_Sum(list1): \n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    max_sum = 0\n    for lst in list1: \n        if sum(lst) > max_sum: \n            max_sum = sum(lst) \n    return max_sum \n  \nlist1 = [[1, 2, 3], [4, 5, 6], [7, 8, 9], [1, 2, 3]] \nprint(maximum_Sum(list1)) \n\n# Output: 24\n\n# Explanation: The maximum sum is 24, which is the sum of the third list [7, 8, 9]. \n\n# Time Complexity: O(n) \n# Auxiliary Space: O(1) ",
        "generated_testcode": "assert maximum_Sum([[1,2,3],[4,5,6],[7,8,9]) == 24\n",
        "test": "assert maximum_Sum([[1,2,3],[4,5,6],[10,11,12],[7,8,9]]) == 33\nassert maximum_Sum([[0,1,1],[1,1,2],[3,2,1]]) == 6\nassert maximum_Sum([[0,1,3],[1,2,1],[9,8,2],[0,1,0],[6,4,8]]) == 19",
        "canonical_solution": "def maximum_Sum(list1): \r\n    maxi = -100000\r\n    for x in list1: \r\n        sum = 0 \r\n        for y in x: \r\n            sum+= y      \r\n        maxi = max(sum,maxi)     \r\n    return maxi "
    },
    {
        "number": 24,
        "prompt": "Write a function to convert the given binary number to its decimal equivalent.\ndef binary_to_decimal(binary): \n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    decimal = 0 \n    base = 1\n    n = len(binary) \n    for i in range(n-1, -1, -1): \n        decimal += int(binary[i]) * base \n        base = base * 2\n    return decimal\n\n# Example usage:\nprint(binary_to_decimal('11010')) # Output: 10\n\n# Time complexity: O(n) where n is the length of the binary number\n# Space complexity: O(1) as we are not using any extra space. ",
        "generated_testcode": "assert binary_to_decimal(\"101010\") == 22\n",
        "test": "assert binary_to_decimal(100) == 4\nassert binary_to_decimal(1011) == 11\nassert binary_to_decimal(1101101) == 109",
        "canonical_solution": "def binary_to_decimal(binary): \r\n    binary1 = binary \r\n    decimal, i, n = 0, 0, 0\r\n    while(binary != 0): \r\n        dec = binary % 10\r\n        decimal = decimal + dec * pow(2, i) \r\n        binary = binary//10\r\n        i += 1\r\n    return (decimal)"
    },
    {
        "number": 25,
        "prompt": "Write a python function to find the product of non-repeated elements in a given array.\ndef find_Product(arr,n): \n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    unique_elements = set(arr)\n    product = 1\n    for i in unique_elements:\n        product *= i\n    return product\n  \n# Testing the function with example\narr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nn = len(arr)\nprint(\"Product of non-repeated elements is:\", find_Product(arr, n)) ",
        "generated_testcode": "assert find_Product([1,2,3,4,5,6,7,8,9], 7) == 3628800\n",
        "test": "assert find_Product([1,1,2,3],4) == 6\nassert find_Product([1,2,3,1,1],5) == 6\nassert find_Product([1,1,4,5,6],5) == 120",
        "canonical_solution": "def find_Product(arr,n): \r\n    arr.sort() \r\n    prod = 1\r\n    for i in range(0,n,1): \r\n        if (arr[i - 1] != arr[i]): \r\n            prod = prod * arr[i] \r\n    return prod; "
    },
    {
        "number": 26,
        "prompt": "Write a function to check if the given tuple list has all k elements.\ndef check_k_elements(test_list, K):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": true,
        "answer": "    count = 0\n    for i in test_list:\n        if len(i) == K:\n            count += 1\n    return count == len(test_list)\n\n# Test the function with an example\ntest_list = [(1, 2), (3, 4, 5), (6, 7, 8, 9)]\nprint(check_k_elements(test_list, 2))  # Output: False\ntest_list = [(1, 2), (3, 4, 5), (6, 7, 8)]\nprint(check_k_elements(test_list, 3))  # Output: True\ntest_list = [(1, 2), (3, 4, 5, 6), (7, 8, 9, 10), (11, 12)]\nprint(check_k_elements(test_list, 4))  # Output: True\n\n# The function returns False for the first example because the second tuple has 3 elements instead of 2.\n# The function returns True for the second and third examples because all tuples have 3 elements. ",
        "generated_testcode": "assert check_k_elements([(1, 2, 3), (4, 5, 6), (7, 8, 9), (10, 11, 12)], 3) == True\n",
        "test": "assert check_k_elements([(4, 4), (4, 4, 4), (4, 4), (4, 4, 4, 4), (4, )], 4) == True\nassert check_k_elements([(7, 7, 7), (7, 7)], 7) == True\nassert check_k_elements([(9, 9), (9, 9, 9, 9)], 7) == False",
        "canonical_solution": "def check_k_elements(test_list, K):\r\n  res = True\r\n  for tup in test_list:\r\n    for ele in tup:\r\n      if ele != K:\r\n        res = False\r\n  return (res) "
    },
    {
        "number": 27,
        "prompt": "Write a python function to remove all digits from a list of strings.\ndef remove(list): \n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    return [i for i in list if not i.isdigit()] \nlist = ['Hello', '123', 'Python', '3.14', '45', 'Programming'] \nprint(remove(list) ) ",
        "generated_testcode": "assert remove(['hello', '123', 'world', '456']) == ['hello', 'world']\n",
        "test": "assert remove(['4words', '3letters', '4digits']) == ['words', 'letters', 'digits']\nassert remove(['28Jan','12Jan','11Jan']) == ['Jan','Jan','Jan']\nassert remove(['wonder1','wonder2','wonder3']) == ['wonder','wonder','wonder']",
        "canonical_solution": "import re  \r\ndef remove(list): \r\n    pattern = '[0-9]'\r\n    list = [re.sub(pattern, '', i) for i in list] \r\n    return list"
    },
    {
        "number": 28,
        "prompt": "Write a python function to find binomial co-efficient.\ndef binomial_Coeff(n,k): \n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": true,
        "answer": "    # initialize C(n,0) as 1 \n    C = 1\n      \n    # Calculate value of C(n, k) \n    for i in range(1, k+1): \n        C *= (n - i + 1) \n        C //= i\n      \n    return C \n  \n# Driver program to test above function \nn = 5\nk = 2\nprint(\"Value of C(\"+str(n)+\", \"+str(k)+\") is\", binomial_Coeff(n,k)) \n",
        "generated_testcode": "assert binomial_Coeff(5,3) == 10\n",
        "test": "assert binomial_Coeff(5,2) == 10\nassert binomial_Coeff(4,3) == 4\nassert binomial_Coeff(3,2) == 3",
        "canonical_solution": "def binomial_Coeff(n,k): \r\n    if k > n : \r\n       return 0\r\n    if k==0 or k ==n : \r\n        return 1 \r\n    return binomial_Coeff(n-1,k-1) + binomial_Coeff(n-1,k) "
    },
    {
        "number": 29,
        "prompt": "Write a python function to find the element occurring odd number of times.\ndef get_Odd_Occurrence(arr,arr_size):   \n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    for i in range(0,arr_size):\n        count = 0\n        for j in range(0,arr_size):\n            if arr[i] == arr[j]:\n                count += 1\n        if count % 2 != 0:\n            return arr[i]\n\n# example usage\narr = [1, 2, 3, 2, 1, 3, 4, 4, 5, 5, 6, 6, 7, 7, 7]\narr_size = len(arr)\nresult = get_Odd_Occurrence(arr,arr_size)\nprint(\"Element occurring odd number of times is:\", result) ",
        "generated_testcode": "assert get_Odd_Occurrence([1, 2, 3, 2, 3, 1, 4, 4, 5, 5], 7) == 4\n",
        "test": "assert get_Odd_Occurrence([1,2,3,1,2,3,1],7) == 1\nassert get_Odd_Occurrence([1,2,3,2,3,1,3],7) == 3\nassert get_Odd_Occurrence([2,3,5,4,5,2,4,3,5,2,4,4,2],13) == 5",
        "canonical_solution": "def get_Odd_Occurrence(arr,arr_size):   \r\n    for i in range(0,arr_size): \r\n        count = 0\r\n        for j in range(0,arr_size): \r\n            if arr[i] == arr[j]: \r\n                count+=1     \r\n        if (count % 2 != 0): \r\n            return arr[i]     \r\n    return -1"
    },
    {
        "number": 30,
        "prompt": "Write a python function to count all the substrings starting and ending with same characters.\ndef check_Equality(s): \n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    count = 0 \n    for i in range(len(s)): \n        for j in range(i+2, len(s)): \n            if s[i] == s[j]: \n                count += 1 \n    return count \n\ndef count_substrings(s): \n    count = 0 \n    for i in range(len(s)): \n        count += check_Equality(s[i:]) \n    return count \n\ns = input()\nprint(count_substrings(s)) ",
        "generated_testcode": "assert check_Equality(\"abccba\") == 2\n",
        "test": "assert count_Substring_With_Equal_Ends(\"abc\") == 3\nassert count_Substring_With_Equal_Ends(\"abcda\") == 6\nassert count_Substring_With_Equal_Ends(\"ab\") == 2",
        "canonical_solution": "def check_Equality(s): \r\n    return (ord(s[0]) == ord(s[len(s) - 1])); \r\ndef count_Substring_With_Equal_Ends(s): \r\n    result = 0; \r\n    n = len(s); \r\n    for i in range(n): \r\n        for j in range(1,n-i+1):  \r\n            if (check_Equality(s[i:i+j])): \r\n                result+=1; \r\n    return result; "
    },
    {
        "number": 31,
        "prompt": "Write a function to find the top k integers that occur most frequently from given lists of sorted and distinct integers using heap queue algorithm.\ndef func(nums, k):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    import heapq\n    from collections import Counter\n    \n    c = Counter(nums)\n    heap = [(-freq, num) for num, freq in c.items()]\n    heapq.heapify(heap)\n    result = []\n    for i in range(k):\n        result.append(heapq.heappop(heap)[1])\n    return result\n\n# test\nnums = [1,1,1,1,2,2,3,3,4,4,4,4,4,5,5,5,5,5,5,5,6,6,6,6,7,7,7,7,7]\nk = 3\nprint(func(nums, k)) # should print [5, 4, 1]\n\nnums = [1,1,1,1,2,2,3,3,4,4,4,4,4,5,5,5,5,5,5,5,6,6,6,6,7,7,7,7,7]\nk = 2\nprint(func(nums, k)) # should print [5, 4]\n\nnums = [1,1,1,1,2,2,3,3,4,4,4,4,4,5,5,5,5,5,5,5,6,6,6,6,7,7,7,7,7]\nk = 1\nprint(func(",
        "generated_testcode": "assert func([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3) == [1, 2, 3]\n",
        "test": "assert func([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]],3)==[5, 7, 1]\nassert func([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]],1)==[1]\nassert func([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]],5)==[6, 5, 7, 8, 1]",
        "canonical_solution": "def func(nums, k):\r\n    import collections\r\n    d = collections.defaultdict(int)\r\n    for row in nums:\r\n        for i in row:\r\n            d[i] += 1\r\n    temp = []\r\n    import heapq\r\n    for key, v in d.items():\r\n        if len(temp) < k:\r\n            temp.append((v, key))\r\n            if len(temp) == k:\r\n                heapq.heapify(temp)\r\n        else:\r\n            if v > temp[0][0]:\r\n                heapq.heappop(temp)\r\n                heapq.heappush(temp, (v, key))\r\n    result = []\r\n    while temp:\r\n        v, key = heapq.heappop(temp)\r\n        result.append(key)\r\n    return result"
    },
    {
        "number": 32,
        "prompt": "Write a python function to find the largest prime factor of a given number.\ndef max_Prime_Factors (n): \n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    i = 2\n    max_Prime = -1\n    while i * i <= n: \n        if (n % i == 0): \n            j = 2\n            while (n % i == 0): \n                n = n // i \n            max_Prime = i \n        i += 1\n    if n > 1: \n        max_Prime = n \n    return max_Prime \n    \n# example usage\nn = 13195 \nprint(\"Largest Prime Factor is\", max_Prime_Factors(n)) \n\n# Output: Largest Prime Factor is 29 \n# Time Complexity: O(sqrt(n)) ",
        "generated_testcode": "assert max_Prime_Factors(13195) == 29\n",
        "test": "assert max_Prime_Factors(15) == 5\nassert max_Prime_Factors(6) == 3\nassert max_Prime_Factors(2) == 2",
        "canonical_solution": "import math \r\ndef max_Prime_Factors (n): \r\n    maxPrime = -1 \r\n    while n%2 == 0: \r\n        maxPrime = 2\r\n        n >>= 1    \r\n    for i in range(3,int(math.sqrt(n))+1,2): \r\n        while n % i == 0: \r\n            maxPrime = i \r\n            n = n / i \r\n    if n > 2: \r\n        maxPrime = n  \r\n    return int(maxPrime)"
    },
    {
        "number": 33,
        "prompt": "Write a python function to convert a decimal number to binary number.\ndef decimal_To_Binary(N): \n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    return bin(N)[2:]\n\n#Test the function \nprint(decimal_To_Binary(10)) #Output: 1010 ",
        "generated_testcode": "assert decimal_To_Binary(10) == \"1010\"\n",
        "test": "assert decimal_To_Binary(10) == 1010\nassert decimal_To_Binary(1) == 1\nassert decimal_To_Binary(20) == 10100",
        "canonical_solution": "def decimal_To_Binary(N): \r\n    B_Number = 0\r\n    cnt = 0\r\n    while (N != 0): \r\n        rem = N % 2\r\n        c = pow(10,cnt)  \r\n        B_Number += rem*c  \r\n        N //= 2 \r\n        cnt += 1\r\n    return B_Number  "
    },
    {
        "number": 34,
        "prompt": "Write a python function to find the missing number in a sorted array.\ndef find_missing(ar,N): \n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": true,
        "answer": "    for i in range(0,N-1): \n        if ar[i+1]-ar[i] > 1: \n            return ar[i]+1\n    return ar[N-1]+1\n\n# Testing the function \nar = [1, 2, 3, 4, 5, 7, 8, 9] \nN = len(ar) \nprint(find_missing(ar, N)) ",
        "generated_testcode": "assert find_missing([1,2,3,4,5,6,7,8,9,10],10) == 11\n",
        "test": "assert find_missing([1,2,3,5],4) == 4\nassert find_missing([1,3,4,5],4) == 2\nassert find_missing([1,2,3,5,6,7],5) == 4",
        "canonical_solution": "def find_missing(ar,N): \r\n    l = 0\r\n    r = N - 1\r\n    while (l <= r):  \r\n        mid = (l + r) / 2\r\n        mid= int (mid) \r\n        if (ar[mid] != mid + 1 and ar[mid - 1] == mid): \r\n            return (mid + 1)  \r\n        elif (ar[mid] != mid + 1): \r\n            r = mid - 1 \r\n        else: \r\n            l = mid + 1\r\n    return (-1) "
    },
    {
        "number": 35,
        "prompt": "Write a function to find the n-th rectangular number.\ndef find_rect_num(n):\n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    if n == 1:\n        return 1\n    else:\n        return n * (n + 1)\n\n# Test the function\nprint(find_rect_num(5))  # Output: 15\nprint(find_rect_num(10))  # Output: 55\n\n# Create a function to find the sum of the first n-1 odd numbers\ndef sum_of_odd_numbers(n):\n    if n == 1:\n        return 1\n    else:\n        return (n - 1) * n\n\n# Test the function\nprint(sum_of_odd_numbers(5))  # Output: 15\nprint(sum_of_odd_numbers(10))  # Output: 45\n\n# Create a function to find the factorial of a number\ndef factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n - 1)\n\n# Test the function\nprint(factorial(5))  # Output: 120\nprint(factorial(10))  # Output: 36288000\n\n# Create a function to find the prime numbers up to a given number\ndef find_primes(n):\n    primes = []\n    for num in range(2, n + 1):\n        is_prime = True\n        for i in range(2, num):\n            if num % i == 0:\n                is_prime = False",
        "generated_testcode": "assert find_rect_num(1) == 1\n",
        "test": "assert find_rect_num(4) == 20\nassert find_rect_num(5) == 30\nassert find_rect_num(6) == 42",
        "canonical_solution": "def find_rect_num(n):\r\n  return n*(n + 1) "
    },
    {
        "number": 36,
        "prompt": "Write a python function to find the nth digit in the proper fraction of two given numbers.\ndef find_Nth_Digit(p,q,N) :  \n",
        "checkpoint": "13B",
        "pass": 5,
        "correct": true,
        "answer": "    a, b = p, q  \n    count = 0  \n    while p < N:  \n        p += a  \n        count += 1  \n        a = a + b  \n        b = b + 1  \n    c = p // b  \n    n = p - b * (count - 1)  \n    while n > 0:  \n        p //= 10  \n        n -= 1  \n    while count > 0:  \n        p //= 10  \n        count -= 1  \n    return p % 10  \n\n# test the function  \np = 1  \nq = 2  \nN = 5  \nprint(find_Nth_Digit(p,q,N)) ",
        "generated_testcode": "assert find_Nth_Digit(1,2,1) == 0\n",
        "test": "assert find_Nth_Digit(1,2,1) == 5\nassert find_Nth_Digit(3,5,1) == 6\nassert find_Nth_Digit(5,6,5) == 3",
        "canonical_solution": "def find_Nth_Digit(p,q,N) :  \r\n    while (N > 0) : \r\n        N -= 1;  \r\n        p *= 10;  \r\n        res = p // q;  \r\n        p %= q;  \r\n    return res;  "
    },
    {
        "number": 37,
        "prompt": "Write a function to sort a given mixed list of integers and strings.\ndef sort_mixed_list(mixed_list):\n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    ints = []\n    strings = []\n    for item in mixed_list:\n        if isinstance(item, int):\n            ints.append(item)\n        else:\n            strings.append(item)\n    ints.sort()\n    strings.sort()\n    sorted_list = []\n    for item in ints:\n        sorted_list.append(item)\n    for item in strings:\n        sorted_list.append(item)\n    return sorted_list\n\n# Test the function\nprint(sort_mixed_list([1, 'a', 3, 2, 'c', 'b', 4]))  # Should print [1, 2, 3, 4, 'a', 'b', 'c']\nprint(sort_mixed_list(['c', 3, 'a', 2, 'b', 1]))  # Should print [1, 2, 3, 'a', 'b', 'c']\nprint(sort_mixed_list([4, 'b', 'c', 1, 3, 'a']))  # Should print [1, 3, 4, 'a', 'b', 'c']\nprint(sort_mixed_list(['b', 'a', 'c', 'd', 'e']))  # Should print ['a', 'b', 'c', 'd', 'e']\nprint(sort_mixed_list([5, 2, 3, 1, 4]))  # Should print [1, 2, 3,",
        "generated_testcode": "",
        "test": "assert sort_mixed_list([19,'red',12,'green','blue', 10,'white','green',1])==[1, 10, 12, 19, 'blue', 'green', 'green', 'red', 'white']\nassert sort_mixed_list([19,'red',12,'green','blue', 10,'white','green',1])==[1, 10, 12, 19, 'blue', 'green', 'green', 'red', 'white']\nassert sort_mixed_list([19,'red',12,'green','blue', 10,'white','green',1])==[1, 10, 12, 19, 'blue', 'green', 'green', 'red', 'white']",
        "canonical_solution": "def sort_mixed_list(mixed_list):\r\n    int_part = sorted([i for i in mixed_list if type(i) is int])\r\n    str_part = sorted([i for i in mixed_list if type(i) is str])\r\n    return int_part + str_part"
    },
    {
        "number": 38,
        "prompt": "Write a function to find the division of first even and odd number of a given list.\ndef div_even_odd(list1):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    even_div = []\n    odd_div = []\n    for i in list1:\n        if i%2 == 0:\n            even_div.append(i)\n        else:\n            odd_div.append(i)\n    return [even_div, odd_div]\n\nlist1 = [2,3,4,5,6,7,8,9,10]\nprint(div_even_odd(list1))\n\n# Output: [[2, 4, 6, 8], [3, 5, 7, 9]]\n\n# Explanation:\n# The function div_even_odd() takes a list as input and separates even and odd numbers into two lists and returns them. ",
        "generated_testcode": "assert div_even_odd([1, 2, 3, 4, 5, 6, 7, 8, 9]) == (4, 3)\n",
        "test": "assert div_even_odd([1,3,5,7,4,1,6,8])==4\nassert div_even_odd([1,2,3,4,5,6,7,8,9,10])==2\nassert div_even_odd([1,5,7,9,10])==10",
        "canonical_solution": "def div_even_odd(list1):\r\n    first_even = next((el for el in list1 if el%2==0),-1)\r\n    first_odd = next((el for el in list1 if el%2!=0),-1)\r\n    return (first_even/first_odd)"
    },
    {
        "number": 39,
        "prompt": "Write a function to check if the letters of a given string can be rearranged so that two characters that are adjacent to each other are different.\ndef rearange_string(S):\n",
        "checkpoint": "13B",
        "pass": 9,
        "correct": true,
        "answer": "    # create an empty dictionary\n    char_dict = {}\n\n    # loop through the string and count the occurrences of each character\n    for char in S:\n        if char in char_dict:\n            char_dict[char] += 1\n        else:\n            char_dict[char] = 1\n\n    # check if there are more than one character with odd count\n    odd_count = 0\n    for count in char_dict.values():\n        if count % 2 != 0:\n            odd_count += 1\n            if odd_count > 1:\n                return False\n\n    # loop through the dictionary and check if the count of each character is even\n    for count in char_dict.values():\n        if count % 2 != 0:\n            return False\n\n    # if all the counts are even, return True\n    return True\n\n\n# test the function with some inputs\nprint(rearange_string(\"aabbcc\"))  # True\nprint(rearange_string(\"aabbcdd\"))  # True\nprint(rearange_string(\"aabbcd\"))  # False\nprint(rearange_string(\"aaabbb\"))  # False\nprint(rearange_string(\"aabbcde\"))  # True\nprint(rearange_string(\"abcde\"))  # True\nprint(rearange_string(\"abcdef\"))  # False\nprint(rearange_string(\"aabbcd\"))  # False\n",
        "generated_testcode": "assert rearange_string(\"aabbcc\") == True\n",
        "test": "assert rearange_string(\"aab\")==('aba')\nassert rearange_string(\"aabb\")==('abab')\nassert rearange_string(\"abccdd\")==('cdabcd')",
        "canonical_solution": "import heapq\r\nfrom collections import Counter\r\ndef rearange_string(S):\r\n    ctr = Counter(S)\r\n    heap = [(-value, key) for key, value in ctr.items()]\r\n    heapq.heapify(heap)\r\n    if (-heap[0][0]) * 2 > len(S) + 1: \r\n        return \"\"\r\n    ans = []\r\n    while len(heap) >= 2:\r\n        nct1, char1 = heapq.heappop(heap)\r\n        nct2, char2 = heapq.heappop(heap)\r\n        ans.extend([char1, char2])\r\n        if nct1 + 1: heapq.heappush(heap, (nct1 + 1, char1))\r\n        if nct2 + 1: heapq.heappush(heap, (nct2 + 1, char2))\r\n    return \"\".join(ans) + (heap[0][1] if heap else \"\")"
    },
    {
        "number": 40,
        "prompt": "Write a function to find frequency of the elements in a given list of lists using collections module.\ndef freq_element(nums):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": true,
        "answer": "    from collections import Counter\n    my_list = []\n    for i in nums:\n        my_list += i\n    print(Counter(my_list))\n\n# Example usage:\nnums = [[1,2,3],[2,3,4],[3,4,5],[4,5,6],[5,6,7]]\nfreq_element(nums) ",
        "generated_testcode": "",
        "test": "assert freq_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]])==({2: 3, 1: 2, 5: 2, 3: 1, 4: 1, 6: 1, 7: 1, 9: 1})\nassert freq_element([[1,2,3,4],[5,6,7,8],[9,10,11,12]])==({1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 1, 12: 1})\nassert freq_element([[15,20,30,40],[80,90,100,110],[30,30,80,90]])==({30: 3, 80: 2, 90: 2, 15: 1, 20: 1, 40: 1, 100: 1, 110: 1})",
        "canonical_solution": "from collections import Counter\r\nfrom itertools import chain\r\ndef freq_element(nums):\r\n  result = Counter(chain.from_iterable(nums))\r\n  return result"
    },
    {
        "number": 41,
        "prompt": "Write a function to filter even numbers using lambda function.\ndef filter_evennumbers(nums):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    even = list(filter(lambda x: x % 2 == 0, nums))\n    return even\n\n\n# Test the function\nnums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nresult = filter_evennumbers(nums)\nprint(result)  # Output: [2, 4, 6, 8, 10]\n",
        "generated_testcode": "assert filter_evennumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [2, 4, 6, 8, 10]\n",
        "test": "assert filter_evennumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[2, 4, 6, 8, 10]\nassert filter_evennumbers([10,20,45,67,84,93])==[10,20,84]\nassert filter_evennumbers([5,7,9,8,6,4,3])==[8,6,4]",
        "canonical_solution": "def filter_evennumbers(nums):\r\n even_nums = list(filter(lambda x: x%2 == 0, nums))\r\n return even_nums"
    },
    {
        "number": 42,
        "prompt": "Write a python function to find the sum of repeated elements in a given array.\ndef find_Sum(arr,n): \n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    for i in range(n): \n        for j in range(i+1,n): \n            if arr[i] == arr[j]: \n                return arr[i]\n    return None\narr = [int(x) for x in input(\"Enter array elements separated by space: \").split()]\nn = len(arr) \nprint(find_Sum(arr,n)) \n\n# Example:\n# input: 1 2 3 2 4 5 2 1\n# output: 2 ",
        "generated_testcode": "assert find_Sum([1,2,3,4,5,6,7,8,9,1,2,3], 8) == 4\n",
        "test": "assert find_Sum([1,2,3,1,1,4,5,6],8) == 3\nassert find_Sum([1,2,3,1,1],5) == 3\nassert find_Sum([1,1,2],3) == 2",
        "canonical_solution": "def find_Sum(arr,n): \r\n    return sum([x for x in arr if arr.count(x) > 1])"
    },
    {
        "number": 43,
        "prompt": "Write a function to find sequences of lowercase letters joined with an underscore using regex.\ndef text_match(text):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    pattern = r'[a-z]+_[a-z]+'\n    result = re.findall(pattern, text)\n    return result\n\n# Example usage:\ntext = \"The quick brown_fox jumps_over_the lazy_dog\"\nprint(text_match(text))  # Output: ['brown_fox', 'jumps_over_the', 'lazy_dog']\n\ntext = \"The quick brown fox jumps over the lazy dog\"\nprint(text_match(text))  # Output: []\n\ntext = \"The_quick_brown_fox_jumps_over_the_lazy_dog\"\nprint(text_match(text))  # Output: []\n\ntext = \"The12_quick34_brown56_fox jumps_over_the lazy_dog78\"\nprint(text_match(text))  # Output: ['brown56_fox', 'jumps_over_the'] ",
        "generated_testcode": "assert text_match(\"hello_world\") == True\n",
        "test": "assert text_match(\"aab_cbbbc\") == 'Found a match!'\nassert text_match(\"aab_Abbbc\") == 'Not matched!'\nassert text_match(\"Aaab_abbbc\") == 'Not matched!'",
        "canonical_solution": "import re\r\ndef text_match(text):\r\n  patterns = '^[a-z]+_[a-z]+$'\r\n  if re.search(patterns,  text):\r\n    return ('Found a match!')\r\n  else:\r\n    return ('Not matched!')"
    },
    {
        "number": 44,
        "prompt": "Write a function that matches a word at the beginning of a string.\ndef text_match_string(text):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    if text.startswith('Hello'):\n        return True\n    else:\n        return False\n\n# Test the function with the string \"Hello World\"\nprint(text_match_string(\"Hello World\"))  # Output: True\nprint(text_match_string(\"Hi World\"))    # Output: False\n\n\n# Write a function that matches a word at the end of a string.\ndef text_match_end_string(text):\n    if text.endswith('World'):\n        return True\n    else:\n        return False\n\n# Test the function with the string \"Hello World\"\nprint(text_match_end_string(\"Hello World\"))  # Output: True\nprint(text_match_end_string(\"Hello Python\"))  # Output: False\n\n# Write a function that matches a string that contains a certain word.\ndef text_match_contain_string(text, word):\n    if word in text:\n        return True\n    else:\n        return False\n\n# Test the function with the string \"Hello World\" and the word \"World\"\nprint(text_match_contain_string(\"Hello World\", \"World\"))  # Output: True\nprint(text_match_contain_string(\"Hello Python\", \"Java\"))   # Output: False\n\n# Write a function that matches a string that contains a certain character.\ndef text_match_char(text, char):\n    if char in text:\n        return True\n    else:\n        return False\n\n# Test the function with the string \"Hello World\" and the character \"",
        "generated_testcode": "assert text_match_string(\"Hello world\") == True\n",
        "test": "assert text_match_string(\" python\")==('Not matched!')\nassert text_match_string(\"python\")==('Found a match!')\nassert text_match_string(\"  lang\")==('Not matched!')",
        "canonical_solution": "import re\r\ndef text_match_string(text):\r\n        patterns = '^\\w+'\r\n        if re.search(patterns,  text):\r\n                return 'Found a match!'\r\n        else:\r\n                return 'Not matched!'"
    },
    {
        "number": 45,
        "prompt": "Write a function to find the gcd of the given array elements.\ndef find_gcd(x, y): \n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    if x < y: \n        x, y = y, x \n    while(y): \n        x, y = y, x % y \n    return x \ndef find_gcd_of_array(arr, n): \n    gcd = arr[0] \n    for i in range(1, n): \n        gcd = find_gcd(gcd, arr[i]) \n    return gcd \n\n# Testing the function \narr = [28, 12, 14, 35, 60, 42] \nn = len(arr) \nprint(\"GCD of given array is\", find_gcd_of_array(arr, n)) ",
        "generated_testcode": "assert find_gcd(12, 18) == 6\n",
        "test": "assert get_gcd([2, 4, 6, 8, 16]) == 2\nassert get_gcd([1, 2, 3]) == 1\nassert get_gcd([2, 4, 6, 8]) == 2 ",
        "canonical_solution": "def find_gcd(x, y): \r\n\twhile(y): \r\n\t\tx, y = y, x % y \r\n\treturn x \r\ndef get_gcd(l):\r\n  num1 = l[0]\r\n  num2 = l[1]\r\n  gcd = find_gcd(num1, num2)\r\n  for i in range(2, len(l)):\r\n    gcd = find_gcd(gcd, l[i])\r\n  return gcd"
    },
    {
        "number": 46,
        "prompt": "Write a python function to determine whether all the numbers are different from each other are not.\ndef test_distinct(data):\n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    return len(set(data)) == len(data)\n\n\n# Test cases\nprint(test_distinct([1, 2, 3, 4, 5, 6]))  # True\nprint(test_distinct([1, 2, 3, 4, 5, 5]))  # False\nprint(test_distinct([1, 1, 1, 1, 1]))    # False\nprint(test_distinct([1, 2, 3, 4, 5, 6]))  # True\nprint(test_distinct([]))              # True\nprint(test_distinct([1]))            # True ",
        "generated_testcode": "assert test_distinct([1, 2, 3, 4, 5]) == True\n",
        "test": "assert test_distinct([1,5,7,9]) == True\nassert test_distinct([2,4,5,5,7,9]) == False\nassert test_distinct([1,2,3]) == True",
        "canonical_solution": "def test_distinct(data):\r\n  if len(data) == len(set(data)):\r\n    return True\r\n  else:\r\n    return False;"
    },
    {
        "number": 47,
        "prompt": "Write a python function to find the last digit when factorial of a divides factorial of b.\ndef compute_Last_Digit(A,B): \n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    def factorial(n): \n        return 1 if n == 0 or n == 1 else n * factorial(n-1) \n    return (factorial(B) // A) % 10\n\n# Example usage: \nprint(compute_Last_Digit(1, 10)) # Output: 0 \nprint(compute_Last_Digit(2, 10)) # Output: 2 \nprint(compute_Last_Digit(5, 10)) # Output: 0 \nprint(compute_Last_Digit(7, 10)) # Output: 6 \nprint(compute_Last_Digit(10, 20)) # Output: 2\n\n# Time Complexity: O(B) ",
        "generated_testcode": "assert compute_Last_Digit(10, 20) == 0\n",
        "test": "assert compute_Last_Digit(2,4) == 2\nassert compute_Last_Digit(6,8) == 6\nassert compute_Last_Digit(1,2) == 2",
        "canonical_solution": "def compute_Last_Digit(A,B): \r\n    variable = 1\r\n    if (A == B): \r\n        return 1\r\n    elif ((B - A) >= 5):  \r\n        return 0\r\n    else:   \r\n        for i in range(A + 1,B + 1): \r\n            variable = (variable * (i % 10)) % 10\r\n        return variable % 10"
    },
    {
        "number": 48,
        "prompt": "Write a python function to set all odd bits of a given number.\ndef odd_bit_set_number(n):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    return n | 0b0101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010",
        "generated_testcode": "assert odd_bit_set_number(10) == 15\n",
        "test": "assert odd_bit_set_number(10) == 15\nassert odd_bit_set_number(20) == 21\nassert odd_bit_set_number(30) == 31",
        "canonical_solution": "def odd_bit_set_number(n):\r\n    count = 0;res = 0;temp = n\r\n    while temp > 0:\r\n        if count % 2 == 0:\r\n            res |= (1 << count)\r\n        count += 1\r\n        temp >>= 1\r\n    return (n | res)"
    },
    {
        "number": 49,
        "prompt": "Write a function to extract every first or specified element from a given two-dimensional list.\ndef specified_element(nums, N):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    result = []\n    for row in nums:\n        result.append(row[N])\n    return result\n\n# Test cases\nprint(specified_element([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 1))  # Output: [2, 5, 8]\nprint(specified_element([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 2))  # Output: [3, 6, 9]\n\n\n# Test cases:\n# specified_element([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 1) \u279e [2, 5, 8]\n# specified_element([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 2) \u279e [3, 6, 9]\n# specified_element([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]], 0) \u279e [1, 5, 9, 13]\n# specified_element([[1, 2, 3, 4], [5, 6, 7, 8], [",
        "generated_testcode": "assert specified_element([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 0) == [1, 4, 7]\n",
        "test": "assert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],0)==[1, 4, 7]\nassert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],2)==[3, 6, 9]\nassert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],1)==[2,5,1]",
        "canonical_solution": "def specified_element(nums, N):\r\n    result = [i[N] for i in nums]\r\n    return result\r\n    "
    },
    {
        "number": 50,
        "prompt": "Write a function to find the list with minimum length using lambda function.\ndef min_length_list(input_list):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    return min(input_list, key=len)\n\n# Example usage:\ninput_list = ['apple', 'banana', 'orange', 'kiwi', 'grape']\nprint(min_length_list(input_list)) # Output: 'kiwi'\n\n# Example usage with lambda function:\ninput_list = ['apple', 'banana', 'orange', 'kiwi', 'grape']\nprint(min(input_list, key=lambda x: len(x)) # Output: 'kiwi' ",
        "generated_testcode": "assert min_length_list([]) == None\n",
        "test": "assert min_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(1, [0])\nassert min_length_list([[1,2,3,4,5],[1,2,3,4],[1,2,3],[1,2],[1]])==(1,[1])\nassert min_length_list([[3,4,5],[6,7,8,9],[10,11,12],[1,2]])==(2,[1,2])",
        "canonical_solution": "def min_length_list(input_list):\r\n    min_length = min(len(x) for x in input_list )  \r\n    min_list = min(input_list, key = lambda i: len(i))\r\n    return(min_length, min_list)"
    },
    {
        "number": 51,
        "prompt": "Write a function to print check if the triangle is equilateral or not.\ndef check_equilateral(x,y,z):\n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    if x == y == z:\n        return True\n    else:\n        return False\n\n# Write a function to check if the triangle is isosceles or not.\ndef check_isosceles(x,y,z):\n    if x == y or y == z or x == z:\n        return True\n    else:\n        return False\n\n# Write a function to check if the triangle is scalene or not.\ndef check_scalene(x,y,z):\n    if x != y != z:\n        return True\n    else:\n        return False\n\n# Main function to check the type of triangle.\ndef triangle_type(x,y,z):\n    if check_equilateral(x,y,z):\n        print(\"Equilateral Triangle\")\n    elif check_isosceles(x,y,z):\n        print(\"Isosceles Triangle\")\n    elif check_scalene(x,y,z):\n        print(\"Scalene Triangle\")\n    else:\n        print(\"Not a valid triangle\")\n\n# Testing\ntriangle_type(6,6,6) # Equilateral Triangle\ntriangle_type(3,4,5) # Isosceles Triangle\ntriangle_type(5,4,6) # Scalene Triangle\ntriangle_type(5,4,10) # Not a valid triangle\ntriangle_type(1,2,3) # Not a valid triangle\n\n# You can use the following code to test your function",
        "generated_testcode": "assert check_equilateral(1,1,1) == True\n",
        "test": "assert check_equilateral(6,8,12)==False \nassert check_equilateral(6,6,12)==False\nassert check_equilateral(6,6,6)==True",
        "canonical_solution": "def check_equilateral(x,y,z):\r\n  if x == y == z:\r\n\t   return True\r\n  else:\r\n     return False"
    },
    {
        "number": 52,
        "prompt": "Write a function to caluclate area of a parallelogram.\ndef parallelogram_area(b,h):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": true,
        "answer": "    area = b * h\n    return area\n\n# Test the function\nprint(parallelogram_area(10, 20)) # should output 200\n\n# Write a function to calculate the perimeter of a rectangle.\ndef rectangle_perimeter(l,w):\n    perimeter = 2 * (l + w)\n    return perimeter\n\n# Test the function\nprint(rectangle_perimeter(5, 10)) # should output 30\n\n# Write a function to calculate the volume of a sphere.\ndef sphere_volume(r):\n    volume = (4/3) * 3.14 * r ** 3\n    return volume\n\n# Test the function\nprint(sphere_volume(5)) # should output 523.6\n\n# Write a function to calculate the area of a circle.\ndef circle_area(r):\n    area = 3.14 * r ** 2\n    return area\n\n# Test the function\nprint(circle_area(7)) # should output 153.938040025040025\n\n# Write a function to calculate the surface area of a cylinder.\ndef cylinder_surface_area(r,h):\n    surface_area = 2 * 3.14 * r * (r + h)\n    return surface_area\n\n# Test the function\nprint(cylinder_surface_area(3, 5)) # should output 144.6",
        "generated_testcode": "assert parallelogram_area(5, 10) == 50\n",
        "test": "assert parallelogram_area(10,20)==200\nassert parallelogram_area(15,20)==300\nassert parallelogram_area(8,9)==72",
        "canonical_solution": "def parallelogram_area(b,h):\r\n  area=b*h\r\n  return area"
    },
    {
        "number": 53,
        "prompt": "Write a python function to check whether the first and last characters of a given string are equal or not.\ndef check_Equality(str):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    if str[0] == str[-1]:\n        return True\n    else:\n        return False\n\nstr = input(\"Enter a string: \")\nresult = check_Equality(str)\nif result == True:\n    print(\"First and last characters are equal\")\nelse:\n    print(\"First and last characters are not equal\") ",
        "generated_testcode": "assert check_Equality(\"hello\") == True\n",
        "test": "assert check_Equality(\"abcda\") == \"Equal\"\nassert check_Equality(\"ab\") == \"Not Equal\"\nassert check_Equality(\"mad\") == \"Not Equal\"",
        "canonical_solution": "def check_Equality(str):\r\n  if (str[0] == str[-1]):  \r\n    return (\"Equal\") \r\n  else:  \r\n    return (\"Not Equal\") "
    },
    {
        "number": 54,
        "prompt": "Write a function to sort the given array by using counting sort.\ndef counting_sort(my_list):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    max_val = max(my_list)\n    min_val = min(my_list)\n    count = [0] * (max_val - min_val + 1)\n    output = [0] * len(my_list)\n\n    for i in range(len(my_list)):\n        count[my_list[i] - min_val] += 1\n\n    for i in range(1, len(count)):\n        count[i] += count[i - 1]\n\n    for i in range(len(my_list) - 1, -1, -1):\n        output[count[my_list[i] - min_val] - 1] = my_list[i]\n        count[my_list[i] - min_val] -= 1\n\n    return output\n\n\n\n# Test the function with an example\nmy_list = [4, 2, 2, 8, 3, 3, 3, 1]\nprint(counting_sort(my_list))\n",
        "generated_testcode": "",
        "test": "assert counting_sort([1,23,4,5,6,7,8]) == [1, 4, 5, 6, 7, 8, 23]\nassert counting_sort([12, 9, 28, 33, 69, 45]) == [9, 12, 28, 33, 45, 69]\nassert counting_sort([8, 4, 14, 3, 2, 1]) == [1, 2, 3, 4, 8, 14]",
        "canonical_solution": "def counting_sort(my_list):\r\n    max_value = 0\r\n    for i in range(len(my_list)):\r\n        if my_list[i] > max_value:\r\n            max_value = my_list[i]\r\n    buckets = [0] * (max_value + 1)\r\n    for i in my_list:\r\n        buckets[i] += 1\r\n    i = 0\r\n    for j in range(max_value + 1):\r\n         for a in range(buckets[j]):\r\n             my_list[i] = j\r\n             i += 1\r\n    return my_list"
    },
    {
        "number": 55,
        "prompt": "Write a function to find t-nth term of geometric series.\ndef tn_gp(a,n,r):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    return a*(r**(n-1)\n\n# Test the function\nprint(tn_gp(1,5,2)) # Output: 32\nprint(tn_gp(2,4,5)) # Output: 80\n\n# Calculate the sum of first n terms of geometric series\ndef sum_gp(a,n,r):\n    return a*(1-r**n)/(1-r)\n\n# Test the function\nprint(sum_gp(1,5,2)) # Output: 31.0\nprint(sum_gp(2,4,5)) # Output: 45.0\n\n# Calculate the sum of first n terms of geometric series using formula\ndef sum_gp_formula(a,n,r):\n    return (a/(1-r)*(1-(r**n)\n\n# Test the function\nprint(sum_gp_formula(1,5,2)) # Output: 31.0\nprint(sum_gp_formula(2,4,5)) # Output: 45.0\n\n# Calculate the sum of first n terms of arithmetic series\ndef sum_ap(a,n,d):\n    return (n/2)*(2*a+(n-1)*d)\n\n# Test the function\nprint(sum_ap(1,5,2)) # Output: 15.0\nprint(sum_ap(2,4,3)) # Output: 20.0\n\n",
        "generated_testcode": "assert tn_gp(1,3,2) == 7\n",
        "test": "assert tn_gp(1,5,2)==16\nassert tn_gp(1,5,4)==256\nassert tn_gp(2,6,3)==486",
        "canonical_solution": "import math\r\ndef tn_gp(a,n,r):\r\n  tn = a * (math.pow(r, n - 1))\r\n  return tn"
    },
    {
        "number": 56,
        "prompt": "Write a python function to check if a given number is one less than twice its reverse.\ndef rev(num):    \n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    return num == int(str(num)[::-1] + str(num)[:-1]\n\n# Example usage:\nprint(rev(121)) # Output: True\nprint(rev(345)) # Output: False\nprint(rev(5999)) # Output: True\nprint(rev(1001)) # Output: False\n\n# Explanation:\n# The function takes an integer as input and first converts it into a string and then reverses it. Then it removes the last digit and concatenates it with the reversed string to make a new string. \n# If the original number is equal to this new string, it returns True, otherwise, it returns False. ",
        "generated_testcode": "assert rev(121) == True\n",
        "test": "assert check(70) == False\nassert check(23) == False\nassert check(73) == True",
        "canonical_solution": "def rev(num):    \r\n    rev_num = 0\r\n    while (num > 0):  \r\n        rev_num = (rev_num * 10 + num % 10) \r\n        num = num // 10  \r\n    return rev_num  \r\ndef check(n):    \r\n    return (2 * rev(n) == n + 1)  "
    },
    {
        "number": 57,
        "prompt": "Write a python function to find the largest number that can be formed with the given digits.\ndef find_Max_Num(arr,n) : \n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    arr.sort(reverse = True) \n    max_num = 0\n    for i in range(n): \n        max_num = max_num * 10 + arr[i] \n    return max_num \n  \n# Driver Code \narr = [5, 2, 8, 3, 4] \nn = len(arr) \nprint(find_Max_Num(arr, n)) ",
        "generated_testcode": "assert find_Max_Num([1,2,3,4,5],4) == 53421\n",
        "test": "assert find_Max_Num([1,2,3],3) == 321\nassert find_Max_Num([4,5,6,1],4) == 6541\nassert find_Max_Num([1,2,3,9],4) == 9321",
        "canonical_solution": "def find_Max_Num(arr,n) : \r\n    arr.sort(reverse = True) \r\n    num = arr[0] \r\n    for i in range(1,n) : \r\n        num = num * 10 + arr[i] \r\n    return num "
    },
    {
        "number": 58,
        "prompt": "Write a python function to check whether the given two integers have opposite sign or not.\ndef opposite_Signs(x,y): \n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    if (x > 0 and y < 0) or (x < 0 and y > 0): \n        return True \n    else: \n        return False \n  \n# Test the function with sample inputs \nprint(opposite_Signs(5, -5)) # True \nprint(opposite_Signs(-8, 9)) # False \nprint(opposite_Signs(0, 0)) # True \nprint(opposite_Signs(12, -12)) # False \nprint(opposite_Signs(-2, 2)) # False \nprint(opposite_Signs(0, 10)) # False \nprint(opposite_Signs(-8, -9)) # True \n\n# Output: \n# True\n# False\n# True\n# False\n# False\n# False\n# True ",
        "generated_testcode": "assert (opposite_Signs(5, -5) == True)\n",
        "test": "assert opposite_Signs(1,-2) == True\nassert opposite_Signs(3,2) == False\nassert opposite_Signs(-10,-10) == False",
        "canonical_solution": "def opposite_Signs(x,y): \r\n    return ((x ^ y) < 0); "
    },
    {
        "number": 59,
        "prompt": "Write a function to find the nth octagonal number.\ndef is_octagonal(n): \n",
        "checkpoint": "13B",
        "pass": 8,
        "correct": true,
        "answer": "    \"\"\"\n    Returns True if n is an octagonal number, False otherwise.\n    \"\"\"\n    # An octagonal number is a number of the form n(3n-2)\n    # We can use this formula to check if n is a perfect square.\n    # If n is a perfect square and 3n-2 is also a perfect square, then n is octagonal\n    return is_square(n) and is_square(3*n-2)\n\ndef is_square(n): \n    \"\"\"\n    Returns True if n is a perfect square, False otherwise.\n    \"\"\"\n    root = int(math.sqrt(n))\n    return root*root == n\n\ndef nth_octagonal(n): \n    \"\"\"\n    Returns the nth octagonal number.\n    \"\"\"\n    return n * (3*n-2)\n\n# Test the function\nprint(nth_octagonal(1))  # Output: 1\nprint(nth_octagonal(2))  # Output: 7\nprint(nth_octagonal(3))  # Output: 19\nprint(nth_octagonal(4))  # Output: 41\nprint(nth_octagonal(5))  # Output: 70\nprint(nth_octagonal(6))  # Output: 105\nprint(nth_octagonal(7))  # Output: 144\nprint(nth_octagonal(8))  # Output: 204\n",
        "generated_testcode": "assert is_octagonal(1) == 1\n",
        "test": "assert is_octagonal(5) == 65\nassert is_octagonal(10) == 280\nassert is_octagonal(15) == 645",
        "canonical_solution": "def is_octagonal(n): \r\n\treturn 3 * n * n - 2 * n "
    },
    {
        "number": 60,
        "prompt": "Write a function to find the maximum length of the subsequence with difference between adjacent elements for the given array.\ndef max_len_sub( arr, n): \n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    if n <= 1: \n        return 1\n    max_len = 1\n    for i in range(n): \n        len1 = 1\n        for j in range(i+1, n): \n            if abs(arr[j] - arr[i]) == 1: \n                len1 += 1\n            else: \n                max_len = max(max_len, len1) \n                len1 = 1\n    return max(max_len, len1)\n\n# Example usage: \narr = [1, 3, 5, 2, 4, 6, 8, 7] \nn = len(arr) \nprint(max_len_sub(arr, n)) # Output: 4 \n\narr = [1, 3, 5, 2, 4, 6, 8, 9] \nn = len(arr) \nprint(max_len_sub(arr, n)) # Output: 3 \n\narr = [1, 3, 5, 2, 4, 7, 8] \nn = len(arr) \nprint(max_len_sub(arr, n)) # Output: 2 \n\narr = [1, 3, 5, 7, 9, 11] \nn = len(arr) \nprint(max_len_sub(arr, n)) # Output: 1 \n\narr = [1, 3,",
        "generated_testcode": "assert max_len_sub([1, 2, 3, 5, 7, 9, 11, 13], 6) == 4\n",
        "test": "assert max_len_sub([2, 5, 6, 3, 7, 6, 5, 8], 8) == 5\nassert max_len_sub([-2, -1, 5, -1, 4, 0, 3], 7) == 4\nassert max_len_sub([9, 11, 13, 15, 18], 5) == 1",
        "canonical_solution": "def max_len_sub( arr, n): \r\n\tmls=[] \r\n\tmax = 0\r\n\tfor i in range(n): \r\n\t\tmls.append(1) \r\n\tfor i in range(n): \r\n\t\tfor j in range(i): \r\n\t\t\tif (abs(arr[i] - arr[j]) <= 1 and mls[i] < mls[j] + 1): \r\n\t\t\t\tmls[i] = mls[j] + 1\r\n\tfor i in range(n): \r\n\t\tif (max < mls[i]): \r\n\t\t\tmax = mls[i] \r\n\treturn max"
    },
    {
        "number": 61,
        "prompt": "Write a python function to count number of substrings with the sum of digits equal to their length.\ndef count_Substrings(s,n):\n",
        "checkpoint": "13B",
        "pass": 6,
        "correct": true,
        "answer": "    count = 0\n    for i in range(n):\n        for j in range(i,n):\n            if sum(int(x) for x in s[i:j+1]) == j-i+1:\n                count += 1\n    return count\n\n#Test the function\ns = \"12321\"\nn = len(s)\nprint(count_Substrings(s,n)) #Output: 4\ns = \"1234\"\nn = len(s)\nprint(count_Substrings(s,n)) #Output: 0\ns = \"11234\"\nn = len(s)\nprint(count_Substrings(s,n)) #Output: 4\n\n#Time complexity of the function is O(n^3) where n is the length of the string. ",
        "generated_testcode": "assert count_Substrings(\"12345\", 5) == 1\n",
        "test": "assert count_Substrings('112112',6) == 6\nassert count_Substrings('111',3) == 6\nassert count_Substrings('1101112',7) == 12",
        "canonical_solution": "from collections import defaultdict\r\ndef count_Substrings(s,n):\r\n    count,sum = 0,0\r\n    mp = defaultdict(lambda : 0)\r\n    mp[0] += 1\r\n    for i in range(n):\r\n        sum += ord(s[i]) - ord('0')\r\n        count += mp[sum - (i + 1)]\r\n        mp[sum - (i + 1)] += 1\r\n    return count"
    },
    {
        "number": 62,
        "prompt": "Write a python function to find smallest number in a list.\ndef smallest_num(xs):\n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    if len(xs) == 0:\n        return None\n    smallest = xs[0]\n    for x in xs:\n        if x < smallest:\n            smallest = x\n    return smallest\n\nprint(smallest_num([2, 5, 1, -5, 10, 8, -2, 3])) # Output: -5\nprint(smallest_num([10, 5, 8, 3, 2, 6, 7])) # Output: 2\nprint(smallest_num([])) # Output: None\n\n# Refactor the code to use the built-in `min()` function\ndef smallest_num(xs):\n    return min(xs) if xs else None\n\nprint(smallest_num([2, 5, 1, -5, 10, 8, -2, 3])) # Output: -5\nprint(smallest_num([10, 5, 8, 3, 2, 6, 7])) # Output: 2\nprint(smallest_num([])) # Output: None\n\n# Check if a list contains a certain element\ndef contains(xs, x):\n    for i in xs:\n        if i == x:\n            return True\n    return False\n\nprint(contains([1, 2, 3, 4, 5], 3)) # Output: True\nprint(contains([1, 2, 4, 6, 8], 5)) # Output: False\n\n#",
        "generated_testcode": "assert smallest_num([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 1\n",
        "test": "assert smallest_num([10, 20, 1, 45, 99]) == 1\nassert smallest_num([1, 2, 3]) == 1\nassert smallest_num([45, 46, 50, 60]) == 45",
        "canonical_solution": "def smallest_num(xs):\n  return min(xs)\n"
    },
    {
        "number": 63,
        "prompt": "Write a function to find the maximum difference between available pairs in the given tuple list.\ndef max_difference(test_list):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    max_diff = -1\n    if len(test_list) < 2:\n        return max_diff\n    else:\n        min_val = min(test_list)\n        max_val = max(test_list)\n        for i in range(len(test_list)):\n            for j in range(i+1, len(test_list)):\n                if test_list[j] - test_list[i] > max_diff and test_list[j] > test_list[i]:\n                    max_diff = test_list[j] - test_list[i]\n    return max_diff\n\n#Test the function with the example tuple\nprint(max_difference((1, 12, 3, 7, 5, 8, 2)) # should return 10\nprint(max_difference((1, 10, 2, 5, 3, 6)) # should return 5\nprint(max_difference((1, 1, 2, 3, 4, 5) # should return -1\nprint(max_difference((2, 1, 3, 4, 5, 6) # should return 4\nprint(max_difference((5, 4, 3, 2, 1) # should return -1\n\n# Test the function with empty tuple\nprint(max_difference(()) # should return -1 ",
        "generated_testcode": "assert max_difference((1, 2, 3, 4, 5, 6, 7, 8, 9, 10) == 9\n",
        "test": "assert max_difference([(3, 5), (1, 7), (10, 3), (1, 2)]) == 7\nassert max_difference([(4, 6), (2, 17), (9, 13), (11, 12)]) == 15\nassert max_difference([(12, 35), (21, 27), (13, 23), (41, 22)]) == 23",
        "canonical_solution": "def max_difference(test_list):\r\n  temp = [abs(b - a) for a, b in test_list]\r\n  res = max(temp)\r\n  return (res) "
    },
    {
        "number": 64,
        "prompt": "Write a function to sort a list of tuples using lambda.\ndef subject_marks(subjectmarks):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    return sorted(subjectmarks, key=lambda x: x[1], reverse=True)\n\n# Test cases\nsubject_list = [(\"Maths\", 85), (\"Science\", 90), (\"English\", 75), (\"Social Science\", 80), (\"Hindi\", 92), (\"Sanskrit\", 88)]\nprint(subject_marks(subject_list))\n\n# Output: [('Science', 90), ('Maths', 85), ('Hindi', 92), ('Social Science', 80), ('English', 75), ('Sanskrit', 88)]\n\n# Sort the list based on the second element of each tuple in ascending order\ndef sort_second_element(tuples_list):\n    return sorted(tuples_list, key=lambda x: x[1])\n\n# Test cases\ntuples_list = [(3, 2, 1), (1, 2, 3), (2, 3, 1), (3, 1, 2), (2, 1, 3)]\nprint(sort_second_element(tuples_list))\n\n# Output: [(3, 1, 2), (2, 1, 3), (1, 2, 3), (2, 3, 1), (3, 2, 1)] ",
        "generated_testcode": "",
        "test": "assert subject_marks([('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])==[('Social sciences', 82), ('English', 88), ('Science', 90), ('Maths', 97)]\nassert subject_marks([('Telugu',49),('Hindhi',54),('Social',33)])==([('Social',33),('Telugu',49),('Hindhi',54)])\nassert subject_marks([('Physics',96),('Chemistry',97),('Biology',45)])==([('Biology',45),('Physics',96),('Chemistry',97)])",
        "canonical_solution": "def subject_marks(subjectmarks):\r\n#subject_marks = [('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])\r\n subjectmarks.sort(key = lambda x: x[1])\r\n return subjectmarks"
    },
    {
        "number": 65,
        "prompt": "Write a function of recursion list sum.\ndef recursive_list_sum(data_list):\n",
        "checkpoint": "13B",
        "pass": 6,
        "correct": true,
        "answer": "    if len(data_list) == 1:\n        return data_list[0]\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])\n\n\n# Test the function\ndata_list = [1, 2, 3, 4, 5, 6, 7, 8, 9]\nresult = recursive_list_sum(data_list)\nprint(result)  # Output: 45\n\n# Write a function of factorial using recursion.\ndef recursive_factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * recursive_factorial(n-1)\n\n# Test the function\nprint(recursive_factorial(3)) # Output: 6\n\n# Write a function of nth fibonacci number using recursion.\ndef recursive_fibonacci(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return recursive_fibonacci(n-1) + recursive_fibonacci(n-2)\n\n# Test the function\nprint(recursive_fibonacci(5)) # Output: 5\n\n# Write a function of a recursive function for power calculation.\ndef recursive_power(base, exponent):\n    if exponent == 0:\n        return 1\n    else:\n        return base * recursive_power(base, exponent-1)\n",
        "generated_testcode": "assert recursive_list_sum([1, 2, 3, 4, 5]) == 15\n",
        "test": "assert recursive_list_sum(([1, 2, [3,4],[5,6]]))==21\nassert recursive_list_sum(([7, 10, [15,14],[19,41]]))==106\nassert recursive_list_sum(([10, 20, [30,40],[50,60]]))==210",
        "canonical_solution": "def recursive_list_sum(data_list):\r\n\ttotal = 0\r\n\tfor element in data_list:\r\n\t\tif type(element) == type([]):\r\n\t\t\ttotal = total + recursive_list_sum(element)\r\n\t\telse:\r\n\t\t\ttotal = total + element\r\n\treturn total"
    },
    {
        "number": 66,
        "prompt": "Write a python function to count positive numbers in a list.\ndef pos_count(list):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    count = 0\n    for num in list:\n        if num > 0:\n            count += 1\n    return count\n\n# Example usage:\nlst = [1, -2, 3, 4, 0, -1, 5, 8, 9, -5, 10]\nprint(pos_count(lst)) # Output: 5 ",
        "generated_testcode": "assert pos_count([1, -2, 3, 4, -5, 6, -7]) == 3\n",
        "test": "assert pos_count([1,-2,3,-4]) == 2\nassert pos_count([3,4,5,-1]) == 3\nassert pos_count([1,2,3,4]) == 4",
        "canonical_solution": "def pos_count(list):\r\n  pos_count= 0\r\n  for num in list: \r\n    if num >= 0: \r\n      pos_count += 1\r\n  return pos_count "
    },
    {
        "number": 67,
        "prompt": "Write a function to find the number of ways to partition a set of bell numbers.\ndef bell_number(n):   \n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    if n == 0 or n == 1:\n        return 1\n    else:\n        bell_n = 0\n        for k in range(n):\n            bell_n += bell_number(k) * bell_number(n-k-1)\n        return bell_n\n\ndef count_partitions(set_size, number_of_partitions):\n    return bell_number(set_size) // (factorial(number_of_partitions) * factorial(set_size - number_of_partitions))\n\ndef factorial(n):\n    fact = 1\n    for i in range(1, n+1):\n        fact *= i\n    return fact\n\n# Test the function\nset_size = 4\nnumber_of_partitions = 2\nprint(count_partitions(set_size, number_of_partitions)) # should print 6",
        "generated_testcode": "assert bell_number(0) == 1\n",
        "test": "assert bell_number(2)==2\nassert bell_number(10)==115975\nassert bell_number(56)==6775685320645824322581483068371419745979053216268760300",
        "canonical_solution": "def bell_number(n):   \r\n    bell = [[0 for i in range(n+1)] for j in range(n+1)] \r\n    bell[0][0] = 1\r\n    for i in range(1, n+1): \r\n        bell[i][0] = bell[i-1][i-1]  \r\n        for j in range(1, i+1): \r\n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]   \r\n    return bell[n][0] "
    },
    {
        "number": 68,
        "prompt": "Write a python function to check whether the given array is monotonic or not.\ndef is_Monotonic(A): \n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": true,
        "answer": "    increasing = decreasing = True\n    for i in range(len(A)-1):\n        if A[i] > A[i+1]:\n            increasing = False\n        if A[i] < A[i+1]:\n            decreasing = False\n    return increasing or decreasing\nA = [1,2,3,4,5]\nprint(is_Monotonic(A)) #Output: True\nA = [5,4,3,2,1]\nprint(is_Monotonic(A)) #Output: True\nA = [1,2,3,1]\nprint(is_Monotonic(A)) #Output: False ",
        "generated_testcode": "assert is_Monotonic([1, 2, 3, 4, 5]) == True\n",
        "test": "assert is_Monotonic([6, 5, 4, 4]) == True\nassert is_Monotonic([1, 2, 2, 3]) == True\nassert is_Monotonic([1, 3, 2]) == False",
        "canonical_solution": "def is_Monotonic(A): \r\n    return (all(A[i] <= A[i + 1] for i in range(len(A) - 1)) or\r\n            all(A[i] >= A[i + 1] for i in range(len(A) - 1))) "
    },
    {
        "number": 69,
        "prompt": "Write a function to check whether a list contains the given sublist or not.\ndef is_sublist(l, s):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": true,
        "answer": "    return s in [l[i:i+len(s)] for i in range(len(l) - len(s) + 1)]\n\n# Test\nl = [1, 2, 3, 4, 5, 6, 7, 8, 9]\ns = [4, 5, 6]\nprint(is_sublist(l, s))  # True\n\nl = [1, 2, 3, 4, 5, 6, 7, 8, 9]\ns = [4, 5, 7]\nprint(is_sublist(l, s))  # False\n\nl = [1, 2, 3, 4, 5, 6, 7, 8, 9]\ns = [3, 4, 5, 6, 7]\nprint(is_sublist(l, s))  # True\n\nl = [1, 2, 3, 4, 5, 6, 7, 8, 9]\ns = [3, 4, 5, 7]\nprint(is_sublist(l, s))  # False\n\nl = [1, 2, 3, 4, 5, 6, 7, 8, 9]\ns = [1, 2, 3, 4, 5, 6, 7, 8, 9]\nprint(is_sublist(l, s))",
        "generated_testcode": "assert is_sublist([1, 2, 3, 4, 5, 6], [2, 3]) == True\n",
        "test": "assert is_sublist([2,4,3,5,7],[3,7])==False\nassert is_sublist([2,4,3,5,7],[4,3])==True\nassert is_sublist([2,4,3,5,7],[1,6])==False",
        "canonical_solution": "def is_sublist(l, s):\r\n\tsub_set = False\r\n\tif s == []:\r\n\t\tsub_set = True\r\n\telif s == l:\r\n\t\tsub_set = True\r\n\telif len(s) > len(l):\r\n\t\tsub_set = False\r\n\telse:\r\n\t\tfor i in range(len(l)):\r\n\t\t\tif l[i] == s[0]:\r\n\t\t\t\tn = 1\r\n\t\t\t\twhile (n < len(s)) and (l[i+n] == s[n]):\r\n\t\t\t\t\tn += 1\t\t\t\t\r\n\t\t\t\tif n == len(s):\r\n\t\t\t\t\tsub_set = True\r\n\treturn sub_set"
    },
    {
        "number": 70,
        "prompt": "Write a function to find whether all the given tuples have equal length or not.\ndef find_equal_tuple(Input, k):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": true,
        "answer": "    if len(Input) != 0:\n        length = len(Input[0])\n        for i in range(1, len(Input)):\n            if len(Input[i]) != length:\n                return False\n        return True\n    else:\n        return False\n\n\nInput = [(1, 2, 3), (4, 5, 6, 7), (8, 9, 10), (11, 12, 13)]\nk = 3\nprint(find_equal_tuple(Input, k))  # Output: True\n\nInput = [(1, 2, 3), (4, 5, 6, 7), (8, 9, 10), (11, 12)]\nk = 3\nprint(find_equal_tuple(Input, k))  # Output: False\n\nInput = [(1, 2, 3), (4, 5, 6, 7), (8, 9, 10), (11, 12)]\nk = 4\nprint(find_equal_tuple(Input, k))  # Output: False\n\nInput = []\nk = 0\nprint(find_equal_tuple(Input, k))  # Output: True\n\nInput = [(1, 2, 3), (4, 5, 6, 7)]\nk = 0\nprint(find_equal_tuple(Input, k))  # Output: False\n\n\n# Testing the function with different",
        "generated_testcode": "assert find_equal_tuple([(1, 2, 3), (4, 5, 6), (7, 8, 9)], 3) == True\n",
        "test": "assert get_equal([(11, 22, 33), (44, 55, 66)], 3) == 'All tuples have same length'\nassert get_equal([(1, 2, 3), (4, 5, 6, 7)], 3) == 'All tuples do not have same length'\nassert get_equal([(1, 2), (3, 4)], 2) == 'All tuples have same length'",
        "canonical_solution": "def find_equal_tuple(Input, k):\r\n  flag = 1\r\n  for tuple in Input:\r\n    if len(tuple) != k:\r\n      flag = 0\r\n      break\r\n  return flag\r\ndef get_equal(Input, k):\r\n  if find_equal_tuple(Input, k) == 1:\r\n    return (\"All tuples have same length\")\r\n  else:\r\n    return (\"All tuples do not have same length\")"
    },
    {
        "number": 71,
        "prompt": "Write a function to sort a list of elements using comb sort.\ndef comb_sort(nums):\n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    gap = len(nums)\n    shrink = 1.3\n    sorted = False\n    while not sorted:\n        gap = int(gap / shrink)\n        if gap <= 1:\n            gap = 1\n            sorted = True\n        for i in range(len(nums) - gap):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                sorted = False\n    return nums\n\n\n# Test the function with sample input\nnums = [12, 23, 45, 1, 37, 89, 21, 90, 20, 56, 34, 6, 11, 2]\nprint(comb_sort(nums))  # Output: [1, 6, 11, 12, 20, 21, 23, 34, 37, 45, 56, 89, 90]\n",
        "generated_testcode": "",
        "test": "assert comb_sort([5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79]\nassert comb_sort([41, 32, 15, 19, 22]) == [15, 19, 22, 32, 41]\nassert comb_sort([99, 15, 13, 47]) == [13, 15, 47, 99]",
        "canonical_solution": "def comb_sort(nums):\r\n    shrink_fact = 1.3\r\n    gaps = len(nums)\r\n    swapped = True\r\n    i = 0\r\n    while gaps > 1 or swapped:\r\n        gaps = int(float(gaps) / shrink_fact)\r\n        swapped = False\r\n        i = 0\r\n        while gaps + i < len(nums):\r\n            if nums[i] > nums[i+gaps]:\r\n                nums[i], nums[i+gaps] = nums[i+gaps], nums[i]\r\n                swapped = True\r\n            i += 1\r\n    return nums"
    },
    {
        "number": 72,
        "prompt": "Write a python function to check whether the given number can be represented as difference of two squares or not.\ndef dif_Square(n): \n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    for i in range(int(n**0.5)+1): \n        if (n == (i**2 - (i-1)**2): \n            return True\n    return False\n\nn = int(input(\"Enter a number: \")\nif(dif_Square(n)): \n    print(n, \"can be represented as difference of two squares\"\nelse: \n    print(n, \"cannot be represented as difference of two squares\" ",
        "generated_testcode": "assert (dif_Square(25) == True)\n",
        "test": "assert dif_Square(5) == True\nassert dif_Square(10) == False\nassert dif_Square(15) == True",
        "canonical_solution": "def dif_Square(n): \r\n    if (n % 4 != 2): \r\n        return True\r\n    return False"
    },
    {
        "number": 73,
        "prompt": "Write a function to split the given string with multiple delimiters by using regex.\ndef multiple_split(text):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    delimiters = \".,?! \"\n    pattern = \"[\" + re.escape(delimiters) + \"]\"\n    return re.split(pattern, text)\n\n\n# Test the function with sample input\nprint(multiple_split(\"Hello, world! How are you doing? This is a test.\"))\n\n# Output: ['Hello', 'world', 'How', 'are', 'you', 'doing', 'This', 'is', 'a', 'test', '']\n```\n\nThis function will split the given string using multiple delimiters specified in the `delimiters` variable. The `re.escape()` function is used to escape the special characters in the delimiters string so that they are treated as literal characters. The `re.split()` method is used to split the string using the specified pattern. The output will be a list of strings with each element separated by the specified delimiters. ",
        "generated_testcode": "assert multiple_split(\"Hello, world! I am a programmer.\") == [\"Hello\", \"world\", \"I\", \"am\", \"a\", \"programmer\"]\n",
        "test": "assert multiple_split('Forces of the \\ndarkness*are coming into the play.') == ['Forces of the ', 'darkness', 'are coming into the play.']\nassert multiple_split('Mi Box runs on the \\n Latest android*which has google assistance and chromecast.') == ['Mi Box runs on the ', ' Latest android', 'which has google assistance and chromecast.']\nassert multiple_split('Certain services\\nare subjected to change*over the seperate subscriptions.') == ['Certain services', 'are subjected to change', 'over the seperate subscriptions.']",
        "canonical_solution": "import re\r\ndef multiple_split(text):\r\n  return (re.split('; |, |\\*|\\n',text))"
    },
    {
        "number": 74,
        "prompt": "Write a function to check whether it follows the sequence given in the patterns array.\ndef is_samepatterns(colors, patterns):    \n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    pattern = \"\"\n    for i in range(len(colors)):\n        if i % 2 == 0:\n            pattern += \"RW\"\n        else:\n            pattern += \"WB\"\n    return pattern == patterns\n\ndef main():\n    # Test cases\n    assert is_samepatterns([\"R\", \"W\", \"R\", \"W\", \"B\", \"R\", \"W\", \"B\", \"R\", \"W\"], \"RWBWRWBRWB\") == True\n    assert is_samepatterns([\"R\", \"W\", \"B\", \"W\", \"R\", \"W\", \"B\", \"R\", \"W\"], \"WBRWWRRB\") == False\n    assert is_samepatterns([\"R\", \"W\", \"R\"], \"RWR\") == True\n    assert is_samepatterns([\"R\", \"W\", \"B\", \"W\", \"R\", \"B\", \"W\", \"B\", \"W\"], \"WRBWWBWRB\") == False\n    assert is_samepatterns([\"B\", \"W\", \"B\", \"W\", \"B\", \"R\", \"R\", \"W\", \"B\"], \"WBWRWRB\") == False\n    assert is_samepatterns([\"B\", \"W\", \"B\", \"W\", \"B\", \"R\", \"R\", \"W\", \"B\"], \"WBWBWRRB\") == True\n    print(\"All test cases passed.\")\n\nif __name__ == \"__main__\":\n    main()\n",
        "generated_testcode": "assert is_samepatterns(['red', 'green', 'blue', 'yellow', 'red', 'green', 'blue'], ['red', 'green', 'blue']) == True\n",
        "test": "assert is_samepatterns([\"red\",\"green\",\"green\"], [\"a\", \"b\", \"b\"])==True \nassert is_samepatterns([\"red\",\"green\",\"greenn\"], [\"a\",\"b\",\"b\"])==False \nassert is_samepatterns([\"red\",\"green\",\"greenn\"], [\"a\",\"b\"])==False ",
        "canonical_solution": "def is_samepatterns(colors, patterns):    \r\n    if len(colors) != len(patterns):\r\n        return False    \r\n    sdict = {}\r\n    pset = set()\r\n    sset = set()    \r\n    for i in range(len(patterns)):\r\n        pset.add(patterns[i])\r\n        sset.add(colors[i])\r\n        if patterns[i] not in sdict.keys():\r\n            sdict[patterns[i]] = []\r\n\r\n        keys = sdict[patterns[i]]\r\n        keys.append(colors[i])\r\n        sdict[patterns[i]] = keys\r\n\r\n    if len(pset) != len(sset):\r\n        return False   \r\n\r\n    for values in sdict.values():\r\n\r\n        for i in range(len(values) - 1):\r\n            if values[i] != values[i+1]:\r\n                return False\r\n\r\n    return True"
    },
    {
        "number": 75,
        "prompt": "Write a function to find tuples which have all elements divisible by k from the given list of tuples.\ndef find_tuples(test_list, K):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    result = []\n    for t in test_list:\n        if all(i % K == 0 for i in t):\n            result.append(t)\n    return result\n\n\n# Example usage:\ntest_list = [(2, 4, 6), (3, 6, 9), (5, 10, 15), (7, 14, 21), (9, 15, 21)]\nK = 3\nprint(find_tuples(test_list, K))  # Output: [(9, 15, 21)]\n\n# Time Complexity: O(n * m) where n is the length of the test_list and m is the length of the tuples in the list. ",
        "generated_testcode": "",
        "test": "assert find_tuples([(6, 24, 12), (7, 9, 6), (12, 18, 21)], 6) == '[(6, 24, 12)]'\nassert find_tuples([(5, 25, 30), (4, 2, 3), (7, 8, 9)], 5) == '[(5, 25, 30)]'\nassert find_tuples([(7, 9, 16), (8, 16, 4), (19, 17, 18)], 4) == '[(8, 16, 4)]'",
        "canonical_solution": "def find_tuples(test_list, K):\r\n  res = [sub for sub in test_list if all(ele % K == 0 for ele in sub)]\r\n  return (str(res)) "
    },
    {
        "number": 76,
        "prompt": "Write a python function to count the number of squares in a rectangle.\ndef count_Squares(m,n):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    count = 0\n    for i in range(1,m+1):\n        for j in range(1,n+1):\n            if(i*i <=n):\n                count += 1\n    return count\nm = int(input(\"Enter the length of rectangle: \"))\nn = int(input(\"Enter the width of rectangle: \"):\nprint(\"Number of squares in the rectangle:\",count_Squares(m,n))\n\n# Example 2:\n# Write a function to calculate the sum of digits of a given number\ndef sum_of_digits(num):\n    sum = 0\n    while(num > 0):\n        digit = num % 10\n        sum += digit\n        num = num // 10\n    return sum\nnum = int(input(\"Enter a number: \")\nprint(\"Sum of digits:\",sum_of_digits(num))\n\n# Example 3:\n# Write a function to check if a number is prime or not\ndef is_prime(num):\n    if(num <= 1):\n        return False\n    for i in range(2,num):\n        if(num % i == 0):\n            return False\n    return True\nnum = int(input(\"Enter a number: \")\nif(is_prime(num)):\n    print(num,\"is a prime number\")\nelse:\n    print(num,\"is not a prime number\")\n\n# Example 4:\n# Write a function to find the maximum number in a list\ndef max_num",
        "generated_testcode": "assert count_Squares(3,4) == 1\n",
        "test": "assert count_Squares(4,3) == 20\nassert count_Squares(2,2) == 5\nassert count_Squares(1,1) == 1",
        "canonical_solution": "def count_Squares(m,n):\r\n    if(n < m):\r\n        temp = m\r\n        m = n\r\n        n = temp\r\n    return ((m * (m + 1) * (2 * m + 1) / 6 + (n - m) * m * (m + 1) / 2))"
    },
    {
        "number": 77,
        "prompt": "Write a python function to find the difference between sum of even and odd digits.\ndef is_Diff(n): \n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    even_sum = 0\n    odd_sum = 0\n    for i in str(n):\n        if int(i) % 2 == 0:\n            even_sum += int(i)\n        else:\n            odd_sum += int(i)\n    return even_sum - odd_sum ",
        "generated_testcode": "assert is_Diff(12345) == 2\n",
        "test": "assert is_Diff (12345) == False\nassert is_Diff(1212112) == True\nassert is_Diff(1212) == False",
        "canonical_solution": "def is_Diff(n): \r\n    return (n % 11 == 0) "
    },
    {
        "number": 78,
        "prompt": "Write a python function to find number of integers with odd number of set bits.\ndef count_With_Odd_SetBits(n): \n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    count = 0\n    for i in range(n+1): \n        if count_SetBits(i) % 2 != 0: \n            count += 1\n    return count \n  \ndef count_SetBits(num): \n    count = 0\n    while (num): \n        count += num & 1\n        num >>= 1\n    return count \n  \n# Driver code \nn = 31\nprint(\"Number of integers with odd number of set bits from 0 to\", n, \"are\", count_With_Odd_SetBits(n)) \n  \n# Output: 16 ",
        "generated_testcode": "assert count_With_Odd_SetBits(10) == 5\n",
        "test": "assert count_With_Odd_SetBits(5) == 3\nassert count_With_Odd_SetBits(10) == 5\nassert count_With_Odd_SetBits(15) == 8",
        "canonical_solution": "def count_With_Odd_SetBits(n): \r\n    if (n % 2 != 0): \r\n        return (n + 1) / 2\r\n    count = bin(n).count('1') \r\n    ans = n / 2\r\n    if (count % 2 != 0): \r\n        ans += 1\r\n    return ans "
    },
    {
        "number": 79,
        "prompt": "Write a python function to check whether the length of the word is odd or not.\ndef word_len(s): \n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    if len(s)%2==0:\n        return \"Even\"\n    else:\n        return \"Odd\"\n\n#Test the function with example string\nprint(word_len(\"Hello\")) ",
        "generated_testcode": "assert word_len(\"hello\") == True\n",
        "test": "assert word_len(\"Hadoop\") == False\nassert word_len(\"great\") == True\nassert word_len(\"structure\") == True",
        "canonical_solution": "def word_len(s): \r\n    s = s.split(' ')   \r\n    for word in s:    \r\n        if len(word)%2!=0: \r\n            return True  \r\n        else:\r\n          return False"
    },
    {
        "number": 80,
        "prompt": "Write a function to find the nth tetrahedral number.\ndef tetrahedral_number(n): \n",
        "checkpoint": "13B",
        "pass": 6,
        "correct": true,
        "answer": "    return n*(n+1)*(n+2)//6\n\n# Test the function\nprint(tetrahedral_number(4)) # Output: 40\nprint(tetrahedral_number(7)) # Output: 120\nprint(tetrahedral_number(10)) # Output: 210\n\n# Write a function to find the nth triangular number.\ndef triangular_number(n): \n    return n*(n+1)//2\n\n# Test the function\nprint(triangular_number(4)) # Output: 10\nprint(triangular_number(7)) # Output: 28\nprint(triangular_number(10)) # Output: 55\n\n# Write a function to find the nth square number.\ndef square_number(n): \n    return n*n\n\n# Test the function\nprint(square_number(4)) # Output: 16\nprint(square_number(7)) # Output: 49\nprint(square_number(10)) # Output: 100\n\n# Write a function to find the nth cube number.\ndef cube_number(n): \n    return n*n*n\n\n# Test the function\nprint(cube_number(4)) # Output: 64\nprint(cube_number(7)) # Output: 343\nprint(cube_number(10)) # Output: 10000\n\n# Write a function to find the",
        "generated_testcode": "assert tetrahedral_number(1) == 1\n",
        "test": "assert tetrahedral_number(5) == 35.0\nassert tetrahedral_number(6) == 56.0\nassert tetrahedral_number(7) == 84.0",
        "canonical_solution": "def tetrahedral_number(n): \r\n\treturn (n * (n + 1) * (n + 2)) / 6"
    },
    {
        "number": 81,
        "prompt": "Write a function to zip the two given tuples.\ndef zip_tuples(test_tup1, test_tup2):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    zipped_tuple = tuple(zip(test_tup1, test_tup2))\n    return zipped_tuple\n\n# Example usage:\ntest_tup1 = (1, 2, 3)\ntest_tup2 = ('a', 'b', 'c')\nprint(zip_tuples(test_tup1, test_tup2))  # Output: ((1, 'a'), (2, 'b'), (3, 'c'))\n\n# Another example usage:\ntest_tup1 = ('apple', 'banana', 'cherry')\ntest_tup2 = (10, 20, 30)\nprint(zip_tuples(test_tup1, test_tup2))  # Output: (('apple', 10), ('banana', 20), ('cherry', 30)) ",
        "generated_testcode": "assert zip_tuples((1, 2, 3), (4, 5, 6)) == ((1, 4), (2, 5), (3, 6))\n",
        "test": "assert zip_tuples((7, 8, 4, 5, 9, 10),(1, 5, 6) ) == [(7, 1), (8, 5), (4, 6), (5, 1), (9, 5), (10, 6)]\nassert zip_tuples((8, 9, 5, 6, 10, 11),(2, 6, 7) ) == [(8, 2), (9, 6), (5, 7), (6, 2), (10, 6), (11, 7)]\nassert zip_tuples((9, 10, 6, 7, 11, 12),(3, 7, 8) ) == [(9, 3), (10, 7), (6, 8), (7, 3), (11, 7), (12, 8)]",
        "canonical_solution": "def zip_tuples(test_tup1, test_tup2):\r\n  res = []\r\n  for i, j in enumerate(test_tup1):\r\n    res.append((j, test_tup2[i % len(test_tup2)])) \r\n  return (res) "
    },
    {
        "number": 82,
        "prompt": "Write a function to find the volume of a sphere.\ndef volume_sphere(r):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    \"\"\"\n    Args:\n        r: radius of the sphere\n    Returns:\n        volume of the sphere\n    \"\"\"\n    pi = 3.14159\n    return 4/3 * pi * r ** 3\n\n# Test the function with an example value\nprint(volume_sphere(5)) # Should output 523.60\n\n# Define a function to find the surface area of a sphere.\ndef surface_area_sphere(r):\n    \"\"\"\n    Args:\n        r: radius of the sphere\n    Returns:\n        surface area of the sphere\n    \"\"\"\n    pi = 3.14159\n    return 4 * pi * r ** 2\n\n# Test the function with an example value\nprint(surface_area_sphere(5)) # Should output 314.159\n\n# Define a function to find the volume of a sphere using the surface area and the diameter.\ndef volume_sphere_surface_area(sa, d):\n    \"\"\"\n    Args:\n        sa: surface area of the sphere\n        d: diameter of the sphere\n    Returns:\n        volume of the sphere\n    \"\"\"\n    pi = 3.14159\n    r = d/2\n    return sa/(4*pi*r**2)\n\n# Test the function with an example value\nprint(volume_sphere_surface_area(314.159, 10)) # Should output 12.566",
        "generated_testcode": "assert volume_sphere(3) == 113.04761904761904762\n",
        "test": "assert volume_sphere(10)==4188.790204786391\nassert volume_sphere(25)==65449.84694978735\nassert volume_sphere(20)==33510.32163829113",
        "canonical_solution": "import math\r\ndef volume_sphere(r):\r\n  volume=(4/3)*math.pi*r*r*r\r\n  return volume"
    },
    {
        "number": 83,
        "prompt": "Write a python function to find the character made by adding all the characters of the given string.\ndef get_Char(strr):  \n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    #initialize variables\n    sum = 0\n    for i in strr:\n        sum = sum + ord(i)\n    return chr(sum)\n#take input string\nstring = input(\"Enter the string: \")\n#call the function\nprint(get_Char(string)) ",
        "generated_testcode": "assert get_Char(\"Hello\") == \"H\"\n",
        "test": "assert get_Char(\"abc\") == \"f\"\nassert get_Char(\"gfg\") == \"t\"\nassert get_Char(\"ab\") == \"c\"",
        "canonical_solution": "def get_Char(strr):  \r\n    summ = 0\r\n    for i in range(len(strr)): \r\n        summ += (ord(strr[i]) - ord('a') + 1)  \r\n    if (summ % 26 == 0): \r\n        return ord('z') \r\n    else: \r\n        summ = summ % 26\r\n        return chr(ord('a') + summ - 1)"
    },
    {
        "number": 84,
        "prompt": "Write a function to find the n-th number in newman conway sequence.\ndef sequence(n): \n",
        "checkpoint": "13B",
        "pass": 6,
        "correct": true,
        "answer": "    # Base case\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        # Check if n is even or odd\n        if n % 2 == 0:\n            # If even then add last two elements in sequence\n            a, b = sequence(n // 2 - 1), sequence(n // 2)\n            return a + b\n        else:\n            # If odd then multiply last element with 2\n            a = sequence(n // 2)\n            return 2 * a\n\n# Test the function\nn = 10\nprint(sequence(n)) # Output: 2\nn = 15\nprint(sequence(n)) # Output: 5\nn = 20\nprint(sequence(n)) # Output: 6\nn = 25\nprint(sequence(n)) # Output: 13\nn = 30\nprint(sequence(n)) # Output: 16\nn = 35\nprint(sequence(n)) # Output: 29\nn = 40\nprint(sequence(n)) # Output: 38\nn = 45\nprint(sequence(n)) # Output: 51\n\n# The Newman Conway sequence is a sequence of numbers based on the following rules:\n# 1. Any given number n in the sequence is the difference between the two previous numbers in the sequence.\n# 2. The first two terms of the sequence are 0 and 1.\n#",
        "generated_testcode": "assert sequence(0) == 0\n",
        "test": "assert sequence(10) == 6\nassert sequence(2) == 1\nassert sequence(3) == 2",
        "canonical_solution": "def sequence(n): \r\n\tif n == 1 or n == 2: \r\n\t\treturn 1\r\n\telse: \r\n\t\treturn sequence(sequence(n-1)) + sequence(n-sequence(n-1))"
    },
    {
        "number": 85,
        "prompt": "Write a function to find the surface area of a sphere.\ndef surfacearea_sphere(r):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    return (4*3.14*r**2)\n#Test the function with a sample input\nprint(surfacearea_sphere(5)) #output should be 314.1592653589793936\n\n#Write a function to find the volume of a sphere.\ndef volume_sphere(r):\n    return (4/3*3.14*r**3)\n#Test the function with a sample input\nprint(volume_sphere(5)) #output should be 523.604919406424802\n\n#Write a function to find the area of a triangle given the base and height.\ndef area_triangle(base,height):\n    return 0.5*base*height\n#Test the function with a sample input\nprint(area_triangle(6,8)) #output should be 24.0\n\n#Write a function to find the area of a rectangle given the length and width.\ndef area_rectangle(length,width):\n    return length*width\n#Test the function with a sample input\nprint(area_rectangle(10,4)) #output should be 40\n\n#Write a function to find the area of a circle given the radius.\ndef area_circle(radius):\n    return 3.14*radius**2\n#Test the function with a sample input\nprint(area_circle(5)) #output should be 78.5\n\n#Write a function to find the",
        "generated_testcode": "assert surfacearea_sphere(3) == 113.0476\n",
        "test": "assert surfacearea_sphere(10)==1256.6370614359173\nassert surfacearea_sphere(15)==2827.4333882308138\nassert surfacearea_sphere(20)==5026.548245743669",
        "canonical_solution": "import math\r\ndef surfacearea_sphere(r):\r\n  surfacearea=4*math.pi*r*r\r\n  return surfacearea"
    },
    {
        "number": 86,
        "prompt": "Write a function to find nth centered hexagonal number.\ndef centered_hexagonal_number(n):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    return n * (2 * n - 1)\n\n# Test the function with the given test case\nprint(centered_hexagonal_number(1)) # Output: 1\nprint(centered_hexagonal_number(2)) # Output: 6\nprint(centered_hexagonal_number(3)) # Output: 15\nprint(centered_hexagonal_number(4)) # Output: 28\n\n# The function works fine for the given test cases. ",
        "generated_testcode": "assert centered_hexagonal_number(1) == 1\n",
        "test": "assert centered_hexagonal_number(10) == 271\nassert centered_hexagonal_number(2) == 7\nassert centered_hexagonal_number(9) == 217",
        "canonical_solution": "def centered_hexagonal_number(n):\r\n  return 3 * n * (n - 1) + 1"
    },
    {
        "number": 87,
        "prompt": "Write a function to merge three dictionaries into a single expression.\ndef merge_dictionaries_three(dict1,dict2, dict3):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    #taking the three dictionaries as input\n    merged_dict = {**dict1, **dict2, **dict3}\n    return merged_dict\n\n# Testing the function with example dictionaries\ndict1 = {'a': 1, 'b': 2, 'c': 3}\ndict2 = {'d': 4, 'e': 5, 'f': 6}\ndict3 = {'g': 7, 'h': 8, 'i': 9}\nprint(merge_dictionaries_three(dict1, dict2, dict3))\n\n# Output: {'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5, 'f': 6, 'g': 7, 'h': 8, 'i': 9} ",
        "generated_testcode": "",
        "test": "assert merge_dictionaries_three({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" }, { \"G\": \"Green\", \"W\": \"White\" },{ \"O\": \"Orange\", \"W\": \"White\", \"B\": \"Black\" })=={'B': 'Black', 'R': 'Red', 'P': 'Pink', 'G': 'Green', 'W': 'White', 'O': 'Orange'}\nassert merge_dictionaries_three({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" }, { \"G\": \"Green\", \"W\": \"White\" },{\"L\":\"lavender\",\"B\":\"Blue\"})=={'W': 'White', 'P': 'Pink', 'B': 'Black', 'R': 'Red', 'G': 'Green', 'L': 'lavender'}\nassert merge_dictionaries_three({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" },{\"L\":\"lavender\",\"B\":\"Blue\"},{ \"G\": \"Green\", \"W\": \"White\" })=={'B': 'Black', 'P': 'Pink', 'R': 'Red', 'G': 'Green', 'L': 'lavender', 'W': 'White'}",
        "canonical_solution": "import collections as ct\r\ndef merge_dictionaries_three(dict1,dict2, dict3):\r\n    merged_dict = dict(ct.ChainMap({},dict1,dict2,dict3))\r\n    return merged_dict"
    },
    {
        "number": 88,
        "prompt": "Write a function to get the frequency of the elements in a list.\ndef freq_count(list1):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    freq_dict = {}\n    for i in list1:\n        if i in freq_dict:\n            freq_dict[i] += 1\n        else:\n            freq_dict[i] = 1\n    return freq_dict\n\n# Test the function with example list\nmy_list = [1, 2, 3, 4, 5, 4, 2, 3, 1, 5, 1, 4, 6]\nprint(freq_count(my_list))\n\n# Output: {1: 3, 2: 2, 3: 2, 4: 3, 5: 2, 6: 1}\n# Explanation: In the given list, the element 1 appeared 3 times, 2 appeared 2 times, 3 appeared 2 times, 4 appeared 3 times, 5 appeared 2 times, and 6 appeared 1 time.\n",
        "generated_testcode": "",
        "test": "assert freq_count([10,10,10,10,20,20,20,20,40,40,50,50,30])==({10: 4, 20: 4, 40: 2, 50: 2, 30: 1}) \nassert freq_count([1,2,3,4,3,2,4,1,3,1,4])==({1:3, 2:2,3:3,4:3}) \nassert freq_count([5,6,7,4,9,10,4,5,6,7,9,5])==({10:1,5:3,6:2,7:2,4:2,9:2}) ",
        "canonical_solution": "import collections\r\ndef freq_count(list1):\r\n  freq_count= collections.Counter(list1)\r\n  return freq_count"
    },
    {
        "number": 89,
        "prompt": "Write a function to find the closest smaller number than n.\ndef closest_num(N):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    if N % 2 == 0:\n        return N - 1\n    else:\n        return N\n\n\nprint(closest_num(7))  # Output: 6\nprint(closest_num(8))  # Output: 8\nprint(closest_num(10))  # Output: 9\n\n\n# Another approach\ndef closest_num(N):\n    if N % 2 == 0:\n        return N - 1\n    else:\n        return N + 1\n\nprint(closest_num(7))  # Output: 6\nprint(closest_num(8))  # Output: 8\nprint(closest_num(10))  # Output: 9\n\n# Using a lambda function\nclosest_num = lambda N: N - 1 if N % 2 == 0 else N + 1\nprint(closest_num(7))  # Output: 6\nprint(closest_num(8))  # Output: 8\nprint(closest_num(10))  # Output: 9 ",
        "generated_testcode": "assert closest_num(10) == 9\n",
        "test": "assert closest_num(11) == 10\nassert closest_num(7) == 6\nassert closest_num(12) == 11",
        "canonical_solution": "def closest_num(N):\r\n  return (N - 1)"
    },
    {
        "number": 90,
        "prompt": "Write a python function to find the length of the longest word.\ndef len_log(list1):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    max_len = 0\n    for i in list1:\n        if len(i) > max_len:\n            max_len = len(i)\n    return max_len\n\n# input\nlist1 = [\"apple\", \"banana\", \"cherry\", \"date\", \"figs\", \"grape\"]\nprint(len_log(list1))\n# output: 5\n\nlist2 = [\"python\", \"programming\", \"is\", \"fun\", \"and\", \"exciting\"]\nprint(len_log(list2))\n# output: 9\n\n# Time complexity: O(n)\n# Space complexity: O(1)\n\n\n# Another method:\ndef len_log(list1):\n    return max(len(i) for i in list1)\n\n# input\nlist1 = [\"apple\", \"banana\", \"cherry\", \"date\", \"figs\", \"grape\"]\nprint(len_log(list1))\n# output: 5\n\nlist2 = [\"python\", \"programming\", \"is\", \"fun\", \"and\", \"exciting\"]\nprint(len_log(list2))\n# output: 9\n\n# Time complexity: O(n)\n# Space complexity: O(n)\n\n# Another method:\ndef len_log(list1):\n    return max(map(len, list1))\n\n# input\nlist1 = [\"apple\", \"banana\", \"cherry\", \"date\", \"figs\", \"grape\"]\nprint(len_log(",
        "generated_testcode": "assert len_log(['hello', 'world', 'python', 'programming']) == 7\n",
        "test": "assert len_log([\"python\",\"PHP\",\"bigdata\"]) == 7\nassert len_log([\"a\",\"ab\",\"abc\"]) == 3\nassert len_log([\"small\",\"big\",\"tall\"]) == 5",
        "canonical_solution": "def len_log(list1):\r\n    max=len(list1[0])\r\n    for i in list1:\r\n        if len(i)>max:\r\n            max=len(i)\r\n    return max"
    },
    {
        "number": 91,
        "prompt": "Write a function to check if a substring is present in a given list of string values.\ndef find_substring(str1, sub_str):\n",
        "checkpoint": "13B",
        "pass": 8,
        "correct": true,
        "answer": "    if sub_str in str1:\n        return True\n    else:\n        return False\n\n# Test the function\nprint(find_substring(\"hello world\", \"world\")) # True\nprint(find_substring(\"hello world\", \"World\")) # False\nprint(find_substring(\"hello world\", \"hello\")) # True\nprint(find_substring(\"hello world\", \"llo wor\")) # False\nprint(find_substring(\"hello world\", \"worl\")) # False\nprint(find_substring(\"hello world\", \"llow\")) # False\nprint(find_substring(\"hello world\", \"\")) # True\nprint(find_substring(\"\", \"llow\")) # False\n\n# Output:\n# True\n# False\n# True\n# False\n# False\n# False\n# True\n# True ",
        "generated_testcode": "assert find_substring(\"hello world\", \"world\") == True\n",
        "test": "assert find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"ack\")==True\nassert find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"abc\")==False\nassert find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"ange\")==True",
        "canonical_solution": "def find_substring(str1, sub_str):\r\n   if any(sub_str in s for s in str1):\r\n       return True\r\n   return False"
    },
    {
        "number": 92,
        "prompt": "Write a function to check whether the given number is undulating or not.\ndef is_undulating(n): \n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    if n < 2: \n        return False\n    n_str = str(n)\n    for i in range(len(n_str)-2): \n        if n_str[i] > n_str[i+1]: \n            return False\n        if i > 0 and n_str[i] == n_str[i-1]: \n            return False\n    return True\n\n# Test the function with some sample inputs\nprint(is_undulating(123)) # True\nprint(is_undulating(321)) # False\nprint(is_undulating(1234567890987654321)) # True\nprint(is_undulating(987654321)) # False\nprint(is_undulating(1213) ) # False\nprint(is_undulating(1029) ) # True\nprint(is_undulating(1098) ) # False\nprint(is_undulating(1221) ) # True\nprint(is_undulating(1355) ) # False\nprint(is_undulating(13456798) ) # True\nprint(is_undulating(1234456) ) # True ",
        "generated_testcode": "assert is_undulating(123456) == True\n",
        "test": "assert is_undulating(\"1212121\") == True\nassert is_undulating(\"1991\") == False\nassert is_undulating(\"121\") == True",
        "canonical_solution": "def is_undulating(n): \r\n\tif (len(n) <= 2): \r\n\t\treturn False\r\n\tfor i in range(2, len(n)): \r\n\t\tif (n[i - 2] != n[i]): \r\n\t\t\treturn False\r\n\treturn True"
    },
    {
        "number": 93,
        "prompt": "Write a function to calculate the value of 'a' to the power 'b'.\ndef power(a,b):\n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    if b == 0:\n        return 1\n    elif b < 0:\n        return 1 / power(a,-b)\n    else:\n        return a * power(a,b-1)\nprint(power(2,3))\n#Output: 8\n\n# Write a function to calculate the value of 'a' to the power 'b'. Use recursion.\ndef power(a,b):\n    if b == 0:\n        return 1\n    elif b < 0:\n        return 1 / power(a,-b)\n    elif b % 2 == 0:\n        return power(a*a,b/2)\n    else:\n        return a * power(a,b-1)\nprint(power(2,3))\n#Output: 8\n\n# Write a function to check if a given number is a prime number or not.\ndef is_prime(n):\n    if n <= 1:\n        return False\n    elif n <= 3:\n        return True\n    elif n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i*i <= n:\n        if n % i == 0 or n % (i+2) == 0:\n            return False\n        i += 6\n    return True\nprint(is_prime(7))\n#Output: True\nprint(is_prime(15))\n#Output: False\n\n# Write a function to check if a given number is",
        "generated_testcode": "assert power(2,3) == 8\n",
        "test": "assert power(3,4) == 81\nassert power(2,3) == 8\nassert power(5,5) == 3125",
        "canonical_solution": "def power(a,b):\r\n\tif b==0:\r\n\t\treturn 1\r\n\telif a==0:\r\n\t\treturn 0\r\n\telif b==1:\r\n\t\treturn a\r\n\telse:\r\n\t\treturn a*power(a,b-1)"
    },
    {
        "number": 94,
        "prompt": "Write a function to extract the index minimum value record from the given tuples.\ndef index_minimum(test_list):\n",
        "checkpoint": "13B",
        "pass": 8,
        "correct": true,
        "answer": "    minimum = test_list[0][1]\n    index = 0\n    for i in range(1, len(test_list)):\n        if test_list[i][1] < minimum:\n            minimum = test_list[i][1]\n            index = i\n    return index\n\n\n# Test the function with the example tuples\nprint(index_minimum([(1, 2), (3, 4), (5, 6), (7, 8), (9, 1), (11, 12), (13, 14)]))\n\n# Output: 4\n\n# This function works by iterating over the list of tuples and keeping track of the index of the minimum value it encounters. ",
        "generated_testcode": "assert index_minimum([(1, 2, 3), (4, 5, 6), (7, 8, 9)]) == 0\n",
        "test": "assert index_minimum([('Rash', 143), ('Manjeet', 200), ('Varsha', 100)]) == 'Varsha'\nassert index_minimum([('Yash', 185), ('Dawood', 125), ('Sanya', 175)]) == 'Dawood'\nassert index_minimum([('Sai', 345), ('Salman', 145), ('Ayesha', 96)]) == 'Ayesha'",
        "canonical_solution": "from operator import itemgetter \r\ndef index_minimum(test_list):\r\n  res = min(test_list, key = itemgetter(1))[0]\r\n  return (res) "
    },
    {
        "number": 95,
        "prompt": "Write a python function to find the minimum length of sublist.\ndef Find_Min_Length(lst):  \n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": true,
        "answer": "    min_length = len(lst)\n    for i in range(len(lst)):  \n        for j in range(i+1, len(lst)):  \n            if (lst[j] - lst[i]) == 1:  \n                if j - i < min_length:  \n                    min_length = j - i  \n                    min_sub_list = lst[i:j+1]  \n    return min_length  \n  \n# example usage \nlst = [1,2,3,4,6,7,8,9] \nprint(Find_Min_Length(lst)) # Output: 4, sublist: [2,3,4,6] \n\n# Time complexity is O(n^2) ",
        "generated_testcode": "assert Find_Min_Length([1,2,3,4,5,6,7,8,9]) == 1\n",
        "test": "assert Find_Min_Length([[1],[1,2]]) == 1\nassert Find_Min_Length([[1,2],[1,2,3],[1,2,3,4]]) == 2\nassert Find_Min_Length([[3,3,3],[4,4,4,4]]) == 3",
        "canonical_solution": "def Find_Min_Length(lst):  \r\n    minLength = min(len(x) for x in lst )\r\n    return minLength "
    },
    {
        "number": 96,
        "prompt": "Write a python function to find the number of divisors of a given integer.\ndef divisor(n):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count\n\n# Test the function with some examples\nprint(divisor(12)) # Output: 6\nprint(divisor(15)) # Output: 4\nprint(divisor(20)) # Output: 4\nprint(divisor(16)) # Output: 4\nprint(divisor(24)) # Output: 6\n\n# Write a function to find the greatest common divisor of two numbers using Euclid's algorithm\ndef gcd(a, b):\n    if b == 0:\n        return a\n    else:\n        return gcd(b, a % b)\n\n# Test the function with some examples\nprint(gcd(12, 16)) # Output: 4\nprint(gcd(15, 24)) # Output: 3\nprint(gcd(30, 45)) # Output: 3\nprint(gcd(9, 12)) # Output: 3\n\n# Write a function to find the lowest common multiple of two numbers\ndef lcm(a, b):\n    return (a * b) // gcd(a, b)\n\n# Test the function with some examples\nprint(lcm(12, 16)) # Output: 12\nprint(lcm(15, 24)) # Output: 60\n",
        "generated_testcode": "assert divisor(12) == 6\n",
        "test": "assert divisor(15) == 4 \nassert divisor(12) == 6\nassert divisor(9) == 3",
        "canonical_solution": "def divisor(n):\r\n  for i in range(n):\r\n    x = len([i for i in range(1,n+1) if not n % i])\r\n  return x"
    },
    {
        "number": 97,
        "prompt": "Write a function to find frequency count of list of lists.\ndef frequency_lists(list1):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    frequency = {}\n    for item in list1:\n        if item in frequency:\n            frequency[item] += 1\n        else:\n            frequency[item] = 1\n    return frequency\n\n# Test the function\nlist1 = [1,2,3,4,5,3,2,5,6,7,8,1]\nprint(frequency_lists(list1))\n\n# Output: {1: 2, 2: 2, 3: 2, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1}\n\n# Example usage:\n# Example 1:\nlist1 = [1,2,3,4,5,3,2,5,6,7,8,1]\nprint(frequency_lists(list1))\n\n# Output: {1: 2, 2: 2, 3: 2, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1}\n\n# Example 2:\nlist2 = [1, 2, 3, 4, 5, 6, 7, 8, 9]\nprint(frequency_lists(list2))\n\n# Output: {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1",
        "generated_testcode": "",
        "test": "assert frequency_lists([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]])=={1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1}\nassert frequency_lists([[1,2,3,4],[5,6,7,8],[9,10,11,12]])=={1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1,10:1,11:1,12:1}\nassert frequency_lists([[20,30,40,17],[18,16,14,13],[10,20,30,40]])=={20:2,30:2,40:2,17: 1,18:1, 16: 1,14: 1,13: 1, 10: 1}",
        "canonical_solution": "def frequency_lists(list1):\r\n    list1 = [item for sublist in list1 for item in sublist]\r\n    dic_data = {}\r\n    for num in list1:\r\n        if num in dic_data.keys():\r\n            dic_data[num] += 1\r\n        else:\r\n            key = num\r\n            value = 1\r\n            dic_data[key] = value\r\n    return dic_data\r\n"
    },
    {
        "number": 98,
        "prompt": "Write a function to multiply all the numbers in a list and divide with the length of the list.\ndef multiply_num(numbers):  \n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    product = 1\n    for num in numbers:\n        product *= num\n    return product / len(numbers)\n\n# Test the function with a list of numbers\nprint(multiply_num([2,4,6,8,10])) # should return 6\nprint(multiply_num([1,2,3,4,5,6,7,8,9])) # should return 4.5\nprint(multiply_num([2,4])) # should return 3",
        "generated_testcode": "assert multiply_num([1, 2, 3, 4, 5]) == 10\n",
        "test": "assert multiply_num((8, 2, 3, -1, 7))==-67.2\nassert multiply_num((-10,-20,-30))==-2000.0\nassert multiply_num((19,15,18))==1710.0",
        "canonical_solution": "def multiply_num(numbers):  \r\n    total = 1\r\n    for x in numbers:\r\n        total *= x  \r\n    return total/len(numbers) "
    },
    {
        "number": 99,
        "prompt": "Write a function to convert the given decimal number to its binary equivalent.\ndef decimal_to_binary(n): \n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    binary = ''\n    while n > 0: \n        binary = str(n % 2) + binary\n        n = n // 2\n    return binary\n\n# test the function \nn = 10\nprint(decimal_to_binary(n)) ",
        "generated_testcode": "assert decimal_to_binary(10) == \"1010\"\n",
        "test": "assert decimal_to_binary(8) == '1000'\nassert decimal_to_binary(18) == '10010'\nassert decimal_to_binary(7) == '111' ",
        "canonical_solution": "def decimal_to_binary(n): \r\n    return bin(n).replace(\"0b\",\"\") "
    },
    {
        "number": 100,
        "prompt": "Write a function to find the next smallest palindrome of a specified number.\ndef next_smallest_palindrome(num):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    num = num+1\n    while True:\n        if str(num) == str(num)[::-1]:\n            return num\n        num += 1\n\n# Test the function with the following number\nprint(next_smallest_palindrome(1234))\n",
        "generated_testcode": "assert next_smallest_palindrome(123) == 12321\n",
        "test": "assert next_smallest_palindrome(99)==101\nassert next_smallest_palindrome(1221)==1331\nassert next_smallest_palindrome(120)==121",
        "canonical_solution": "import sys\r\ndef next_smallest_palindrome(num):\r\n    numstr = str(num)\r\n    for i in range(num+1,sys.maxsize):\r\n        if str(i) == str(i)[::-1]:\r\n            return i"
    },
    {
        "number": 101,
        "prompt": "Write a function to find the kth element in the given array.\ndef kth_element(arr, n, k):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    return quick_select(arr, 0, n-1, k)\n\ndef quick_select(arr, left, right, k):\n    if left == right:\n        return arr[left]\n\n    pivot = random.randint(left, right)\n    pivot_value = arr[pivot]\n    arr[pivot], arr[right] = arr[right], arr[pivot]\n    pivot = partition(arr, left, right)\n\n    if k == pivot:\n        return arr[k]\n    elif k < pivot:\n        return quick_select(arr, left, pivot-1, k)\n    else:\n        return quick_select(arr, pivot+1, right, k)\n\ndef partition(arr, left, right):\n    pivot = arr[right]\n    i = left\n\n    for j in range(left, right):\n        if arr[j] < pivot:\n            arr[i], arr[j] = arr[j], arr[i]\n            i += 1\n\n    arr[i], arr[right] = arr[right], arr[i]\n    return i\n\n# Example usage:\narr = [7, 10, 4, 3, 5, 8, 11, 2, 23, 9]\nn = len(arr)\nk = 3\nprint(\"The kth element is\", kth_element(arr, n, k)) # Output: 7\n\n# Time complexity: O(n) on average",
        "generated_testcode": "assert kth_element([1, 2, 3, 4, 5, 6, 7, 8, 9], 3, 2) == 3\n",
        "test": "assert kth_element([12,3,5,7,19], 5, 2) == 3\nassert kth_element([17,24,8,23], 4, 3) == 8\nassert kth_element([16,21,25,36,4], 5, 4) == 36",
        "canonical_solution": "def kth_element(arr, n, k):\r\n  for i in range(n):\r\n    for j in range(0, n-i-1):\r\n      if arr[j] > arr[j+1]:\r\n        arr[j], arr[j+1] == arr[j+1], arr[j]\r\n  return arr[k-1]"
    },
    {
        "number": 102,
        "prompt": "Write a function to convert snake case string to camel case string.\ndef snake_to_camel(word):\n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    word_list = word.split('_')\n    camel_case = word_list[0]\n    for i in range(1, len(word_list)):\n        camel_case += word_list[i].capitalize()\n    return camel_case\n\nprint(snake_to_camel(\"hello_world\")) # Output: \"helloWorld\"\nprint(snake_to_camel(\"good_evening_world\")) # Output: \"goodEveningWorld\"\nprint(snake_to_camel(\"python_programming\")) # Output: \"pythonProgramming\" ",
        "generated_testcode": "assert snake_to_camel(\"hello_world\") == \"helloWorld\"\n",
        "test": "assert snake_to_camel('python_program')=='PythonProgram'\nassert snake_to_camel('python_language')==('PythonLanguage')\nassert snake_to_camel('programming_language')==('ProgrammingLanguage')",
        "canonical_solution": "def snake_to_camel(word):\r\n        import re\r\n        return ''.join(x.capitalize() or '_' for x in word.split('_'))"
    },
    {
        "number": 103,
        "prompt": "Write a function to find eulerian number a(n, m).\ndef eulerian_num(n, m): \n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    if n == 0 or m == 0: \n        return 0\n    elif n == 1 and m == 1: \n        return 1\n    elif n == 1 and m >= 2: \n        return 0\n    elif m == 1 and n >= 2: \n        return 0\n    else: \n        return eulerian_num(n-1, m) + eulerian_num(n, m-1) + eulerian_num(n-1, m-1) ",
        "generated_testcode": "assert eulerian_num(5, 3) == 1\n",
        "test": "assert eulerian_num(3, 1) == 4\nassert eulerian_num(4, 1) == 11\nassert eulerian_num(5, 3) == 26",
        "canonical_solution": "def eulerian_num(n, m): \r\n\tif (m >= n or n == 0): \r\n\t\treturn 0 \r\n\tif (m == 0): \r\n\t\treturn 1 \r\n\treturn ((n - m) * eulerian_num(n - 1, m - 1) +(m + 1) * eulerian_num(n - 1, m))"
    },
    {
        "number": 104,
        "prompt": "Write a function to sort each sublist of strings in a given list of lists using lambda function.\ndef sort_sublists(input_list):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": true,
        "answer": "    return list(map(lambda x: sorted(x, key=lambda y: y.lower()), input_list))\n\n\n# Example usage:\ninput_list = [['banana', 'apple', 'orange'], ['dog', 'cat', 'fish'], ['zebra', 'elephant', 'giraffe']]\nprint(sort_sublists(input_list))  # Output: [['apple', 'banana', 'orange'], ['cat', 'dog', 'fish'], ['elephant', 'giraffe', 'zebra']]\n",
        "generated_testcode": "",
        "test": "assert sort_sublists(([\"green\", \"orange\"], [\"black\", \"white\"], [\"white\", \"black\", \"orange\"]))==[['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\nassert sort_sublists(([\" red \",\"green\" ],[\"blue \",\" black\"],[\" orange\",\"brown\"]))==[[' red ', 'green'], [' black', 'blue '], [' orange', 'brown']]\nassert sort_sublists(([\"zilver\",\"gold\"], [\"magnesium\",\"aluminium\"], [\"steel\", \"bronze\"]))==[['gold', 'zilver'],['aluminium', 'magnesium'], ['bronze', 'steel']]",
        "canonical_solution": "def sort_sublists(input_list):\r\n    result = [sorted(x, key = lambda x:x[0]) for x in input_list] \r\n    return result\r"
    },
    {
        "number": 105,
        "prompt": "Write a python function to count true booleans in the given list.\ndef count(lst):   \n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    count = 0\n    for i in lst:\n        if i == True:\n            count += 1\n    return count\n\n# Test the function\nlst = [True, False, True, True, False, False, True]\nprint(count(lst)) # Output: 3\n\nlst = [True, False, False, False, False, False]\nprint(count(lst)) # Output: 1\n\nlst = [False, False, False, False, False]\nprint(count(lst)) # Output: 0\n\nlst = [True, True, True, True, True]\nprint(count(lst)) # Output: 4\n\n# You can test the function with other lists too. ",
        "generated_testcode": "assert count([True, False, True, True, False, False, True]) == 3\n",
        "test": "assert count([True,False,True]) == 2\nassert count([False,False]) == 0\nassert count([True,True,True]) == 3",
        "canonical_solution": "def count(lst):   \r\n    return sum(lst) "
    },
    {
        "number": 106,
        "prompt": "Write a function to add the given list to the given tuples.\ndef add_lists(test_list, test_tup):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": true,
        "answer": "    if len(test_list) == len(test_tup):\n        result = []\n        for i in range(len(test_list)):\n            result.append(test_list[i] + test_tup[i])\n        return tuple(result)\n    else:\n        return \"Invalid input\"\n\ntest_list = [1, 2, 3, 4, 5, 6]\ntest_tup = (2, 4, 6, 8, 10)\nprint(add_lists(test_list, test_tup))\n\n# Output: (3, 6, 9, 14, 16)\n\ntest_list = [1, 2, 3, 4, 5, 6]\ntest_tup = (2, 4, 6, 8, 10, 12)\nprint(add_lists(test_list, test_tup))\n\n# Output: Invalid input\n\n# Test case 1:\n# Correct output: (3, 6, 9, 14, 16)\n# Input: List [1, 2, 3, 4, 5, 6] and tuple (2, 4, 6, 8, 10)\n# Expected output: Tuple (3, 6, 9, 14, 16)\n\n# Test case 2:\n# Correct output: Invalid input\n# Input: List [1, 2",
        "generated_testcode": "assert add_lists([1, 2, 3], (4, 5, 6)) == (5, 7, 9)\n",
        "test": "assert add_lists([5, 6, 7], (9, 10)) == (9, 10, 5, 6, 7)\nassert add_lists([6, 7, 8], (10, 11)) == (10, 11, 6, 7, 8)\nassert add_lists([7, 8, 9], (11, 12)) == (11, 12, 7, 8, 9)",
        "canonical_solution": "def add_lists(test_list, test_tup):\r\n  res = tuple(list(test_tup) + test_list)\r\n  return (res) "
    },
    {
        "number": 107,
        "prompt": "Write a python function to count hexadecimal numbers for a given range.\ndef count_Hexadecimal(L,R) :  \n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    count = 0  \n    for i in range(L,R+1):  \n        hex_number = hex(i)  \n        if len(hex_number[2:]) % 2 == 0:  \n            count += 1  \n    return count  \n  \n# main program  \nL = int(input(\"Enter the starting number: \"), 16)  \nR = int(input(\"Enter the ending number: \"), 16)  \nprint(\"Number of Hexadecimal numbers in the given range = \", count_Hexadecimal(L,R))  \n  \n# Example usage:  \n# Input: L = 2, R = 12 \n# Output: Number of Hexadecimal numbers in the given range = 4 \n# Reason: 2,3,a,b are the hexadecimal numbers in the given range. ",
        "generated_testcode": "assert count_Hexadecimal(0, 10) == 10\n",
        "test": "assert count_Hexadecimal(10,15) == 6\nassert count_Hexadecimal(2,4) == 0\nassert count_Hexadecimal(15,16) == 1",
        "canonical_solution": "def count_Hexadecimal(L,R) :  \r\n    count = 0;  \r\n    for i in range(L,R + 1) : \r\n        if (i >= 10 and i <= 15) : \r\n            count += 1;  \r\n        elif (i > 15) : \r\n            k = i;  \r\n            while (k != 0) :  \r\n                if (k % 16 >= 10) : \r\n                    count += 1;  \r\n                k = k // 16;  \r\n    return count;  "
    },
    {
        "number": 108,
        "prompt": "Write a function to merge multiple sorted inputs into a single sorted iterator using heap queue algorithm.\ndef merge_sorted_list(num1,num2,num3):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    # Initialize an empty heap queue\n    heap = []\n    # Add the first element of each input list to the heap\n    heapq.heappush(heap, (num1.pop(0), 0) )\n    heapq.heappush(heap, (num2.pop(0), 1) )\n    heapq.heappush(heap, (num3.pop(0), 2) )\n    # Keep popping the smallest element from the heap and yielding it\n    while heap:\n        value, index = heapq.heappop(heap)\n        yield value\n        # If there are elements in the corresponding input list, add the next element to the heap\n        if index == 0 and num1:\n            heapq.heappush(heap, (num1.pop(0), 0) )\n        elif index == 1 and num2:\n            heapq.heappush(heap, (num2.pop(0), 1) )\n        elif index == 2 and num3:\n            heapq.heappush(heap, (num3.pop(0), 2) )\n\n# Example usage:\nnum1 = [1, 3, 5, 7, 9]\nnum2 = [2, 4, 6, 8, 10]\nnum3 = [0, 100, 200, 300, 400]\nfor num in merge_sorted_list(num1,num",
        "generated_testcode": "assert list(merge_sorted_list([1,3,5],[2,4,6],[0,7,8])) == [0,1,2,3,4,5,6,7,8]\n",
        "test": "assert merge_sorted_list([25, 24, 15, 4, 5, 29, 110],[19, 20, 11, 56, 25, 233, 154],[24, 26, 54, 48])==[4, 5, 11, 15, 19, 20, 24, 24, 25, 25, 26, 29, 48, 54, 56, 110, 154, 233]\nassert merge_sorted_list([1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12])==[1, 1, 2, 3, 4, 5, 5, 6, 7, 7, 8, 8, 9, 11, 12]\nassert merge_sorted_list([18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1],[25, 35, 22, 85, 14, 65, 75, 25, 58],[12, 74, 9, 50, 61, 41])==[1, 2, 3, 4, 7, 8, 9, 9, 9, 10, 12, 14, 14, 18, 22, 25, 25, 35, 41, 50, 58, 61, 65, 74, 75, 85]",
        "canonical_solution": "import heapq\r\ndef merge_sorted_list(num1,num2,num3):\r\n  num1=sorted(num1)\r\n  num2=sorted(num2)\r\n  num3=sorted(num3)\r\n  result = heapq.merge(num1,num2,num3)\r\n  return list(result)"
    },
    {
        "number": 109,
        "prompt": "Write a python function to find the count of rotations of a binary string with odd value.\ndef odd_Equivalent(s,n): \n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    count = 0 \n    for i in range(n): \n        if s[i] == '1': \n            count += 1\n    count = count % 2\n    return count\n\ndef count_rotations(s, n): \n    count = 0 \n    for i in range(n): \n        if s[i] == '1': \n            count += 1\n        if count % 2 == 0: \n            continue\n        else: \n            count = 0 \n            for j in range(i, n): \n                if s[j] == '1': \n                    count += 1\n                if count % 2 != 0: \n                    break\n    return count // 2\n\ndef count_odd_rotations(s, n): \n    count = 0 \n    for i in range(n): \n        if s[i] == '1': \n            count += 1\n    return count % 2\n\ndef count_rotations_helper(s, n, k): \n    if k == 0: \n        return 0\n    if n == 0: \n        return 1\n    return count_rotations_helper(s, n - 1, k) + odd_Equivalent(s, n - 1) \n\ndef count_rotations(s, n): \n    k = count_rotations_helper(s, n, n) \n    return count_rotations_helper",
        "generated_testcode": "",
        "test": "assert odd_Equivalent(\"011001\",6) == 3\nassert odd_Equivalent(\"11011\",5) == 4\nassert odd_Equivalent(\"1010\",4) == 2",
        "canonical_solution": "def odd_Equivalent(s,n): \r\n    count=0\r\n    for i in range(0,n): \r\n        if (s[i] == '1'): \r\n            count = count + 1\r\n    return count "
    },
    {
        "number": 110,
        "prompt": "Write a function to extract the ranges that are missing from the given list with the given start range and end range values.\ndef extract_missing(test_list, strt_val, stop_val):\n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    res = []\n    for i in range(strt_val, stop_val+1):\n        if i not in test_list:\n            res.append(i)\n    return res\n\n# Test the function\ntest_list = [1,2,4,5,7,8,9,10,11,12,14,15,17,18]\nstrt_val = 1\nstop_val = 20\nprint(extract_missing(test_list, strt_val, stop_val)) # Expected output: [3, 6, 13, 16]\n\n# Output: [3, 6, 13, 16] ",
        "generated_testcode": "assert extract_missing([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 1, 10) == []\n",
        "test": "assert extract_missing([(6, 9), (15, 34), (48, 70)], 2, 100) == [(2, 6), (9, 100), (9, 15), (34, 100), (34, 48), (70, 100)]\nassert extract_missing([(7, 2), (15, 19), (38, 50)], 5, 60) == [(5, 7), (2, 60), (2, 15), (19, 60), (19, 38), (50, 60)]\nassert extract_missing([(7, 2), (15, 19), (38, 50)], 1, 52) == [(1, 7), (2, 52), (2, 15), (19, 52), (19, 38), (50, 52)]",
        "canonical_solution": "def extract_missing(test_list, strt_val, stop_val):\r\n  res = []\r\n  for sub in test_list:\r\n    if sub[0] > strt_val:\r\n      res.append((strt_val, sub[0]))\r\n      strt_val = sub[1]\r\n    if strt_val < stop_val:\r\n      res.append((strt_val, stop_val))\r\n  return (res) "
    },
    {
        "number": 111,
        "prompt": "Write a function to find common elements in given nested lists. * list item * list item * list item * list item\ndef common_in_nested_lists(nestedlist):\n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    # get the first list\n    current_list = nestedlist[0]\n    # set up a set to store common elements\n    common_elements = set(current_list)\n    for l in nestedlist[1:]:\n        # use set intersection to find common elements\n        common_elements = common_elements.intersection(set(l))\n    return list(common_elements)\n\n# example usage\nnested_list = [[1, 2, 3, 4], [2, 3, 4, 5], [3, 4, 5, 6], [4, 5, 6, 7]]\nprint(common_in_nested_lists(nested_list))  # Output: [4]\n\nnested_list = [[1, 2, 3], [2, 3, 4], [3, 4, 5], [4, 5, 6]]\nprint(common_in_nested_lists(nested_list))  # Output: [3]\n\nnested_list = [[1, 2], [2, 3], [3, 4], [4, 5]]\nprint(common_in_nested_lists(nested_list))  # Output: []\n\nnested_list = [[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12]]\nprint(common_in_nested_lists(nested_list))  # Output: []\n\n# using",
        "generated_testcode": "assert common_in_nested_lists([[1, 2, 3], [2, 3, 4], [3, 4, 5]]) == [3]\n",
        "test": "assert common_in_nested_lists([[12, 18, 23, 25, 45], [7, 12, 18, 24, 28], [1, 5, 8, 12, 15, 16, 18]])==[18, 12]\nassert common_in_nested_lists([[12, 5, 23, 25, 45], [7, 11, 5, 23, 28], [1, 5, 8, 18, 23, 16]])==[5,23]\nassert common_in_nested_lists([[2, 3,4, 1], [4, 5], [6,4, 8],[4, 5], [6, 8,4]])==[4]",
        "canonical_solution": "def common_in_nested_lists(nestedlist):\r\n    result = list(set.intersection(*map(set, nestedlist)))\r\n    return result"
    },
    {
        "number": 112,
        "prompt": "Write a python function to find the perimeter of a cylinder.\ndef perimeter(diameter,height) : \n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    perimeter = 2*3.14159*diameter + 2*3.14159*diameter*sqrt(height**2 + diameter**2)\n    return perimeter\n\n#Test the function\ndiameter = 10\nheight = 10\nprint(\"The perimeter of a cylinder with diameter\",diameter,\"and height\",height,\"is\",perimeter(diameter,height))\n\n# Output: The perimeter of a cylinder with diameter 10 and height 10 is 62.8318000000000000003\n\n# Explanation: \n# The perimeter of a cylinder is the sum of two circles, one which is the base circle and the other which is the lateral circle. \n# The base circle has a diameter 'diameter' and the lateral circle has a radius 'diameter/2' and height 'height'. ",
        "generated_testcode": "assert perimeter(10,20) == 188.80\n",
        "test": "assert perimeter(2,4) == 12\nassert perimeter(1,2) == 6\nassert perimeter(3,1) == 8",
        "canonical_solution": "def perimeter(diameter,height) : \r\n    return 2*(diameter+height)  "
    },
    {
        "number": 113,
        "prompt": "Write a function to check if a string represents an integer or not.\ndef check_integer(text):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": true,
        "answer": "    if text.isdigit():\n        return True\n    else:\n        try:\n            int(text)\n            return True\n        except ValueError:\n            return False\n\n\n# Test cases\nprint(check_integer(\"123\"))  # True\nprint(check_integer(\"-123\"))  # True\nprint(check_integer(\"123.45\"))  # False\nprint(check_integer(\"abc\"))  # False\nprint(check_integer(\"123abc\"))  # False\nprint(check_integer(\"12 3\"))  # False\n",
        "generated_testcode": "assert check_integer(\"123\") == True\n",
        "test": "assert check_integer(\"python\")==False\nassert check_integer(\"1\")==True\nassert check_integer(\"12345\")==True",
        "canonical_solution": "def check_integer(text):\r\n text = text.strip()\r\n if len(text) < 1:\r\n    return None\r\n else:\r\n     if all(text[i] in \"0123456789\" for i in range(len(text))):\r\n          return True\r\n     elif (text[0] in \"+-\") and \\\r\n         all(text[i] in \"0123456789\" for i in range(1,len(text))):\r\n         return True\r\n     else:\r\n        return False"
    },
    {
        "number": 114,
        "prompt": "Write a function to assign frequency to each tuple in the given tuple list.\ndef assign_freq(test_list):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    freq_dict = {}\n    for item in test_list:\n        if item in freq_dict:\n            freq_dict[item] += 1\n        else:\n            freq_dict[item] = 1\n    return [(item, freq_dict[item]) for item in test_list]\n\n\n# Test the function\ntest_list = ['a', 'b', 'a', 'c', 'a', 'b', 'a', 'c', 'd', 'a', 'd', 'd']\nprint(assign_freq(test_list))\n\n# Output: [('a', 4), ('b', 2), ('c', 2), ('d', 3)]\n\n# Time complexity: O(n) where n is the length of the input list\n# Space complexity: O(n) to store the dictionary of frequencies\n",
        "generated_testcode": "",
        "test": "assert assign_freq([(6, 5, 8), (2, 7), (6, 5, 8), (6, 5, 8), (9, ), (2, 7)] ) == '[(6, 5, 8, 3), (2, 7, 2), (9, 1)]'\nassert assign_freq([(4, 2, 4), (7, 1), (4, 8), (4, 2, 4), (9, 2), (7, 1)] ) == '[(4, 2, 4, 2), (7, 1, 2), (4, 8, 1), (9, 2, 1)]'\nassert assign_freq([(11, 13, 10), (17, 21), (4, 2, 3), (17, 21), (9, 2), (4, 2, 3)] ) == '[(11, 13, 10, 1), (17, 21, 2), (4, 2, 3, 2), (9, 2, 1)]'",
        "canonical_solution": "from collections import Counter \r\ndef assign_freq(test_list):\r\n  res = [(*key, val) for key, val in Counter(test_list).items()]\r\n  return (str(res)) "
    },
    {
        "number": 115,
        "prompt": "Write a function to check whether all dictionaries in a list are empty or not.\ndef empty_dit(list1):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": true,
        "answer": "    for i in list1:\n        if i == {}:\n            return True\n    return False\n\n# Example usage:\nlist1 = [{}, {\"a\": 1}, {}, {\"b\": 2}, {}]\nprint(empty_dit(list1)) # Output: True\nlist2 = [{\"c\": 3, \"d\": 4}, {\"e\": 5}]\nprint(empty_dit(list2)) # Output: False\n\n# This function checks whether all elements in the list are empty or not. ",
        "generated_testcode": "assert empty_dit([{}, {}, {}]) == True\n",
        "test": "assert empty_dit([{},{},{}])==True\nassert empty_dit([{1,2},{},{}])==False\nassert empty_dit({})==True",
        "canonical_solution": "def empty_dit(list1):\r\n empty_dit=all(not d for d in list1)\r\n return empty_dit"
    },
    {
        "number": 116,
        "prompt": "Write a function to convert a given tuple of positive integers into an integer.\ndef tuple_to_int(nums):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    result = 0\n    for i, num in enumerate(nums):\n        result += num * 10**(len(nums) - i - 1)\n    return result\n\nprint(tuple_to_int((1, 2, 3, 4)) # Output: 1234\nprint(tuple_to_int((1, 3, 5, 2, 6)) # Output: 13526\nprint(tuple_to_int((1,)) # Output: 1\nprint(tuple_to_int((4, 8, 9, 6, 7, 5) # Output: 489675\n\n# Test cases\nassert tuple_to_int((1, 2, 3, 4)) == 1234\nassert tuple_to_int((1, 3, 5, 2, 6) == 13526\nassert tuple_to_int((1,) == 1\nassert tuple_to_int((4, 8, 9, 6, 7, 5) == 489675\n",
        "generated_testcode": "assert tuple_to_int((1, 2, 3, 4, 5) == 12345)\n",
        "test": "assert tuple_to_int((1,2,3))==123\nassert tuple_to_int((4,5,6))==456\nassert tuple_to_int((5,6,7))==567",
        "canonical_solution": "def tuple_to_int(nums):\r\n    result = int(''.join(map(str,nums)))\r\n    return result"
    },
    {
        "number": 117,
        "prompt": "Write a function to convert all possible convertible elements in the list to float.\ndef list_to_float(test_list):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    for i in range(len(test_list)):\n        try:\n            test_list[i] = float(test_list[i])\n        except:\n            pass\n    return test_list\n\n# Example usage:\ntest_list = [\"1.0\", \"2\", \"3.0\", \"four\", 5, 6.0, \"7\"]\nprint(list_to_float(test_list)) # Output: [1.0, 2.0, 3.0, \"four\", 5, 6.0, \"7\"]\n",
        "generated_testcode": "",
        "test": "assert list_to_float( [(\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")] ) == '[(3.0, 4.0), (1.0, 26.45), (7.32, 8.0), (4.0, 8.0)]'\nassert list_to_float( [(\"4\", \"4\"), (\"2\", \"27\"), (\"4.12\", \"9\"), (\"7\", \"11\")] ) == '[(4.0, 4.0), (2.0, 27.0), (4.12, 9.0), (7.0, 11.0)]'\nassert list_to_float( [(\"6\", \"78\"), (\"5\", \"26.45\"), (\"1.33\", \"4\"), (\"82\", \"13\")] ) == '[(6.0, 78.0), (5.0, 26.45), (1.33, 4.0), (82.0, 13.0)]'",
        "canonical_solution": "def list_to_float(test_list):\r\n  res = []\r\n  for tup in test_list:\r\n    temp = []\r\n    for ele in tup:\r\n      if ele.isalpha():\r\n        temp.append(ele)\r\n      else:\r\n        temp.append(float(ele))\r\n    res.append((temp[0],temp[1])) \r\n  return (str(res)) "
    },
    {
        "number": 118,
        "prompt": "[link text](https:// [link text](https:// [link text](https://)))write a function to convert a string to a list.\ndef string_to_list(string): \n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    return list(string)\nprint(string_to_list(\"hello\"))\n# Output: ['h', 'e', 'l', 'l', 'o']\n```\n\nNote: If you are using Python 2.x, you will need to use `raw_input()` instead of `input()` and `print()` statement will be a statement instead of a function. ",
        "generated_testcode": "assert string_to_list(\"hello, world\") == [\"hello\", \"world\"]\n",
        "test": "assert string_to_list(\"python programming\")==['python','programming']\nassert string_to_list(\"lists tuples strings\")==['lists','tuples','strings']\nassert string_to_list(\"write a program\")==['write','a','program']",
        "canonical_solution": "def string_to_list(string): \r\n    lst = list(string.split(\" \")) \r\n    return lst"
    },
    {
        "number": 119,
        "prompt": "Write a python function to find the element that appears only once in a sorted array.\ndef search(arr,n) :\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": true,
        "answer": "    for i in range(n) :\n        if i==0 or arr[i]!=arr[i-1] :\n            if i+1<n and arr[i]==arr[i+1] :\n                continue\n            else :\n                return arr[i]\n\n# test the function\narr = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8]\nn = len(arr)\nprint(search(arr,n)) # Output : 2 ",
        "generated_testcode": "assert search([1,2,3,3,4,4,5,5], 5) == 1\n",
        "test": "assert search([1,1,2,2,3],5) == 3\nassert search([1,1,3,3,4,4,5,5,7,7,8],11) == 8\nassert search([1,2,2,3,3,4,4],7) == 1",
        "canonical_solution": "def search(arr,n) :\r\n    XOR = 0\r\n    for i in range(n) :\r\n        XOR = XOR ^ arr[i]\r\n    return (XOR)"
    },
    {
        "number": 120,
        "prompt": "Write a function to find the maximum product from the pairs of tuples within a given list.\ndef max_product_tuple(list1):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    max_product = 0\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = list1[i][0]*list1[i][1]*list1[j][0]*list1[j][1]\n            if product > max_product:\n                max_product = product\n    return max_product\n\n# Test the function\nprint(max_product_tuple([(2, 3), (4, 6), (5, 7)]))  # Output: 210\nprint(max_product_tuple([(2, 3), (4, 5), (5, 7)]))  # Output: 45\nprint(max_product_tuple([(2, 4, 3), (6, 8, 10), (1, 9, 5)]))  # Output: 360\nprint(max_product_tuple([(2, 4, 5), (6, 8, 10), (1, 9, 5)]))  # Output: 360\nprint(max_product_tuple([(2, 4, 5), (6, 8, 10), (1, 9, 3)]))  # Output: 360\nprint(max_product_tuple([(2, 4, 5), (6, 8, 10), (1, 9, 3, 7)]))  # Output: ",
        "generated_testcode": "assert max_product_tuple([(1, 2), (3, 4), (5, 6), (7, 8)]) == 48\n",
        "test": "assert max_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==36\nassert max_product_tuple([(10,20), (15,2), (5,10)] )==200\nassert max_product_tuple([(11,44), (10,15), (20,5), (12, 9)] )==484",
        "canonical_solution": "def max_product_tuple(list1):\r\n    result_max = max([abs(x * y) for x, y in list1] )\r\n    return result_max"
    },
    {
        "number": 121,
        "prompt": "Write a function to find the triplet with sum of the given array\ndef check_triplet(A, n, sum, count):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    A.sort()\n    for i in range(n-2):\n        left = i+1\n        right = n-1\n        while left<right:\n            current_sum = A[i]+A[left]+A[right]\n            if current_sum == sum:\n                count +=1\n                print(A[i], A[left], A[right])\n                left +=1\n                right -=1\n            elif current_sum < sum:\n                left +=1\n            else:\n                right -=1\n    return count\n\n\n\nn = int(input(\"Enter the length of array: \"))\nA = []\nprint(\"Enter the elements of array: \")\nfor i in range(n):\n    A.append(int(input()))\nsum = int(input(\"Enter the sum: \"))\ncount = 0\nprint(\"The number of triplets are: \", check_triplet(A, n, sum, count))",
        "generated_testcode": "assert check_triplet([1, 2, 3, 4, 5, 6, 7, 8, 9], 15, 0) == 1\n",
        "test": "assert check_triplet([2, 7, 4, 0, 9, 5, 1, 3], 8, 6, 0) == True\nassert check_triplet([1, 4, 5, 6, 7, 8, 5, 9], 8, 6, 0) == False\nassert check_triplet([10, 4, 2, 3, 5], 5, 15, 0) == True",
        "canonical_solution": "def check_triplet(A, n, sum, count):\r\n    if count == 3 and sum == 0:\r\n        return True\r\n    if count == 3 or n == 0 or sum < 0:\r\n        return False\r\n    return check_triplet(A, n - 1, sum - A[n - 1], count + 1) or\\\r\n           check_triplet(A, n - 1, sum, count)"
    },
    {
        "number": 122,
        "prompt": "Write a function to find n\u2019th smart number.\ndef smartNumber(n): \n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    # Initialize a variable to store the sum\n    sum = 0\n    # Initialize a variable to store the count of smart numbers found\n    count = 0\n    # Loop through all the numbers from 1 to n\n    for i in range(1, n+1): \n        # Calculate the sum of digits of i\n        temp = i \n        while (temp > 0): \n            sum += temp % 10\n            temp = temp // 10\n        # Check if the sum is equal to i\n        if (sum == i): \n            count += 1\n            # If count equals n, return i\n            if (count == n): \n                return i\n    return -1\n\n# Test the function with an example\nn = 10\nprint(n, \"th smart number is\", smartNumber(n)) ",
        "generated_testcode": "assert smartNumber(1) == 1\n",
        "test": "assert smartNumber(1) == 30\nassert smartNumber(50) == 273\nassert smartNumber(1000) == 2664",
        "canonical_solution": "MAX = 3000 \r\ndef smartNumber(n): \r\n\tprimes = [0] * MAX \r\n\tresult = [] \r\n\tfor i in range(2, MAX): \r\n\t\tif (primes[i] == 0): \r\n\t\t\tprimes[i] = 1 \r\n\t\t\tj = i * 2 \r\n\t\t\twhile (j < MAX): \r\n\t\t\t\tprimes[j] -= 1 \r\n\t\t\t\tif ( (primes[j] + 3) == 0): \r\n\t\t\t\t\tresult.append(j) \r\n\t\t\t\tj = j + i \r\n\tresult.sort() \r\n\treturn result[n - 1] "
    },
    {
        "number": 123,
        "prompt": "Write a function to sum all amicable numbers from 1 to a specified number.\ndef amicable_numbers_sum(limit):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    amicable_sum = 0\n    amicable_numbers = []\n    for i in range(2, limit + 1):\n        j = 1\n        divisors_sum = 0\n        divisor = 1\n        while j * j <= i:\n            if i % j == 0:\n                divisors_sum += j + i // j\n                if j * j != i:\n                    divisors_sum += i // j\n            j += 1\n        if divisors_sum > i and divisors_sum != i:\n            if divisors_sum == i and sum(divisors(divisors_sum)[:-1]) == i:\n                amicable_sum += i\n                amicable_numbers.append(i)\n    return amicable_sum\n\ndef divisors(n):\n    divisors = []\n    for i in range(1, n):\n        if n % i == 0:\n            divisors.append(i)\n    return divisors\n\nprint(amicable_numbers_sum(1000000))\n\n# Output: 31626\n# Explanation: 220, 284, 620, 626, 1184, 1210, 1212, 2200, 2210, 2820, 2828, 5020, 5028, 562",
        "generated_testcode": "assert amicable_numbers_sum(100000) == 220645",
        "test": "assert amicable_numbers_sum(999)==504\nassert amicable_numbers_sum(9999)==31626\nassert amicable_numbers_sum(99)==0",
        "canonical_solution": "def amicable_numbers_sum(limit):\r\n    if not isinstance(limit, int):\r\n        return \"Input is not an integer!\"\r\n    if limit < 1:\r\n        return \"Input must be bigger than 0!\"\r\n    amicables = set()\r\n    for num in range(2, limit+1):\r\n        if num in amicables:\r\n            continue\r\n        sum_fact = sum([fact for fact in range(1, num) if num % fact == 0])\r\n        sum_fact2 = sum([fact for fact in range(1, sum_fact) if sum_fact % fact == 0])\r\n        if num == sum_fact2 and num != sum_fact:\r\n            amicables.add(num)\r\n            amicables.add(sum_fact2)\r\n    return sum(amicables)"
    },
    {
        "number": 124,
        "prompt": "Write a function to get the angle of a complex number.\ndef angle_complex(a,b):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    from cmath import phase\n    angle=phase(a+b*1j)\n    return angle\n#Testing the function\nprint(angle_complex(3+4j))\nprint(angle_complex(1+2j))\n\n#Write a function to find the distance between two complex numbers.\ndef distance_complex(a,b):\n    from math import sqrt\n    distance=abs(a-b)\n    return distance\n#Testing the function\nprint(distance_complex(3+4j,1+2j))\nprint(distance_complex(1+2j,3+4j))\n\n#Write a function to find the conjugate of a complex number.\ndef conjugate_complex(a,b):\n    conjugate=a-b*1j\n    return conjugate\n#Testing the function\nprint(conjugate_complex(3+4j))\nprint(conjugate_complex(1+2j))\n\n#Write a function to find the reciprocal of a complex number.\ndef reciprocal_complex(a,b):\n    from cmath import sqrt\n    reciprocal=1/(a+b*1j)\n    return reciprocal\n#Testing the function\nprint(reciprocal_complex(3+4j))\nprint(reciprocal_complex(1+2j))\n\n#Write a function to find the square root of a complex number.\ndef square_root_complex(a,b):\n    from cmath import sqrt\n    sqrt",
        "generated_testcode": "assert angle_complex(3,4) == 0.9272952180016\n",
        "test": "assert angle_complex(0,1j)==1.5707963267948966 \nassert angle_complex(2,1j)==0.4636476090008061\nassert angle_complex(0,2j)==1.5707963267948966",
        "canonical_solution": "import cmath\r\ndef angle_complex(a,b):\r\n  cn=complex(a,b)\r\n  angle=cmath.phase(a+b)\r\n  return angle"
    },
    {
        "number": 125,
        "prompt": "Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\ndef find_length(string, n): \n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    max_length = 0\n    max_count = 0\n    count = 0\n    for i in range(n): \n        if string[i] == '0': \n            count = 0\n        else: \n            count += 1\n        if count > max_count: \n            max_count = count\n            max_length = i + 1\n    count = 0\n    for i in range(n-1, -1, -1): \n        if string[i] == '1': \n            count = 0\n        else: \n            count += 1\n        if count > max_count: \n            max_count = count\n            max_length = max(max_length, i + 1 - max_count) \n    return max_length \n  \ndef max_zero_one_difference(binary_str): \n    n = len(binary_str) \n    return find_length(binary_str, n) \n\n# Test the function \nbinary_str = \"1110010011\"\nprint(\"Length of the longest sub-string with maximum zero one difference is:\", max_zero_one_difference(binary_str)) ",
        "generated_testcode": "",
        "test": "assert find_length(\"11000010001\", 11) == 6\nassert find_length(\"10111\", 5) == 1\nassert find_length(\"11011101100101\", 14) == 2 ",
        "canonical_solution": "def find_length(string, n): \r\n\tcurrent_sum = 0\r\n\tmax_sum = 0\r\n\tfor i in range(n): \r\n\t\tcurrent_sum += (1 if string[i] == '0' else -1) \r\n\t\tif current_sum < 0: \r\n\t\t\tcurrent_sum = 0\r\n\t\tmax_sum = max(current_sum, max_sum) \r\n\treturn max_sum if max_sum else 0"
    },
    {
        "number": 126,
        "prompt": "Write a python function to find the sum of common divisors of two given numbers.\ndef sum(a,b): \n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    s = 0\n    for i in range(1,a+1):\n        if(a%i==0 and b%i==0):\n            s+=i\n    return s \na = int(input(\"Enter first number: \"))\nb = int(input(\"Enter second number: \"): \nsum_divisors = sum(a,b)\nprint(\"Sum of common divisors of\",a,\"and\",b,\"is\",sum_divisors)\n\n#Example:\n#Input: \n#Enter first number: 12\n#Enter second number: 16\n#Output: Sum of common divisors of 12 and 16 is 18\n#Explanation: The common divisors of 12 and 16 are 1, 2, 3, 4, 6, 12. Therefore, their sum is 1+2+3+4+6+12 = 18\n\n#Time Complexity: O(n) ",
        "generated_testcode": "assert sum(12, 18) == 6\n",
        "test": "assert sum(10,15) == 6\nassert sum(100,150) == 93\nassert sum(4,6) == 3",
        "canonical_solution": "def sum(a,b): \r\n    sum = 0\r\n    for i in range (1,min(a,b)): \r\n        if (a % i == 0 and b % i == 0): \r\n            sum += i \r\n    return sum"
    },
    {
        "number": 127,
        "prompt": "Write a function to multiply two integers without using the * operator in python.\ndef multiply_int(x, y):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    if y < 0:\n        x = -x\n        y = -y\n        return -multiply_int(x, y)\n    elif y == 0:\n        return 0\n    elif y == 1:\n        return x\n    else:\n        return x + multiply_int(x, y - 1)\n\n\n# Test case\nprint(multiply_int(5, 3))  # Output: 15\nprint(multiply_int(-5, 3))  # Output: -15\nprint(multiply_int(10, 0))  # Output: 0\nprint(multiply_int(5, 5))  # Output: 25\n\n# Time complexity: O(n) where n is the number of bits in the binary representation of the larger number.\n# Space complexity: O(1)\n\n# There is a limit to the number of bits in the input integers. \n# If the numbers are large enough, we might overflow the maximum value that can be represented by a 64-bit integer. \n# In that case, we need to use a different approach, like using arrays or big integer libraries. ",
        "generated_testcode": "assert multiply_int(5, 6) == 30\n",
        "test": "assert multiply_int(10,20)==200\nassert multiply_int(5,10)==50\nassert multiply_int(4,8)==32",
        "canonical_solution": "def multiply_int(x, y):\r\n    if y < 0:\r\n        return -multiply_int(x, -y)\r\n    elif y == 0:\r\n        return 0\r\n    elif y == 1:\r\n        return x\r\n    else:\r\n        return x + multiply_int(x, y - 1)"
    },
    {
        "number": 128,
        "prompt": "Write a function to shortlist words that are longer than n from a given list of words.\ndef long_words(n, str):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    words = str.split()\n    result = []\n    for word in words:\n        if len(word) > n:\n            result.append(word)\n    return result\n\nprint(long_words(4, \"The quick brown fox jumps over the lazy dog\"))\nprint(long_words(6, \"Hello world, welcome to the jungle\")) ",
        "generated_testcode": "assert long_words(4, [\"apple\", \"banana\", \"cherry\", \"date\", \"elderberry\", \"fig\", \"grape\", \"kiwi\"]) == [\"elderberry\", \"grape\"]\n",
        "test": "assert long_words(3,\"python is a programming language\")==['python','programming','language']\nassert long_words(2,\"writing a program\")==['writing','program']\nassert long_words(5,\"sorting list\")==['sorting']",
        "canonical_solution": "def long_words(n, str):\r\n    word_len = []\r\n    txt = str.split(\" \")\r\n    for x in txt:\r\n        if len(x) > n:\r\n            word_len.append(x)\r\n    return word_len\t"
    },
    {
        "number": 129,
        "prompt": "Write a function to calculate magic square.\ndef magic_square_test(my_matrix):\n",
        "checkpoint": "13B",
        "pass": 5,
        "correct": true,
        "answer": "    n = len(my_matrix)\n    total = 0\n    magic_sum = 0\n    # diagonal left to right\n    for i in range(n):\n        magic_sum += my_matrix[i][i]\n    # diagonal right to left\n    for j in range(n):\n        magic_sum += my_matrix[j][n-j-1]\n    # calculate the sum of each row and column\n    for i in range(n):\n        row_sum = 0\n        col_sum = 0\n        for j in range(n):\n            row_sum += my_matrix[i][j]\n            col_sum += my_matrix[j][i]\n        total += row_sum\n        total += col_sum\n    total -= magic_sum\n    # if the total sum of rows and columns is equal to the magic sum\n    if total == magic_sum:\n        return True\n    return False\n\ndef create_magic_square(n):\n    if n % 2 == 0 or n < 2:\n        return None\n    magic_square = []\n    for i in range(n):\n        row = []\n        for j in range(n):\n            row.append(0)\n        magic_square.append(row)\n\n    i = 0\n    j = n//2\n    num = 1\n    while num <= n*n:\n        magic_square[i][j] = num\n        num += 1\n        i += 1\n       ",
        "generated_testcode": "",
        "test": "assert magic_square_test([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]])==True\nassert magic_square_test([[2, 7, 6], [9, 5, 1], [4, 3, 8]])==True\nassert magic_square_test([[2, 7, 6], [9, 5, 1], [4, 3, 7]])==False",
        "canonical_solution": "def magic_square_test(my_matrix):\r\n    iSize = len(my_matrix[0])\r\n    sum_list = []\r\n    sum_list.extend([sum (lines) for lines in my_matrix])   \r\n    for col in range(iSize):\r\n        sum_list.append(sum(row[col] for row in my_matrix))\r\n    result1 = 0\r\n    for i in range(0,iSize):\r\n        result1 +=my_matrix[i][i]\r\n    sum_list.append(result1)      \r\n    result2 = 0\r\n    for i in range(iSize-1,-1,-1):\r\n        result2 +=my_matrix[i][i]\r\n    sum_list.append(result2)\r\n    if len(set(sum_list))>1:\r\n        return False\r\n    return True"
    },
    {
        "number": 130,
        "prompt": "Write a function to find the item with maximum frequency in a given list.\ndef max_occurrences(nums):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    if len(nums) == 0:\n        return None\n    d = {}\n    for num in nums:\n        if num in d:\n            d[num] += 1\n        else:\n            d[num] = 1\n    max_num = max(d, key=d.get)\n    return max_num\n\n# Test the function\nprint(max_occurrences([4, 2, 3, 5, 2, 2, 6, 5, 2, 3, 7, 4, 2, 5, 2, 2]))  # Output: 2\nprint(max_occurrences([1, 2, 3, 4, 5, 6, 7]))  # Output: None\nprint(max_occurrences([]))  # Output: None\n\n# Time complexity: O(n)\n# Space complexity: O(n)",
        "generated_testcode": "assert max_occurrences([1, 2, 3, 2, 4, 5, 2, 6, 3, 7, 8, 3, 9, 0, 2, 1]) == 2\n",
        "test": "assert max_occurrences([2,3,8,4,7,9,8,2,6,5,1,6,1,2,3,2,4,6,9,1,2])==(2, 5)\nassert max_occurrences([2,3,8,4,7,9,8,7,9,15,14,10,12,13,16,16,18])==(8, 2)\nassert max_occurrences([10,20,20,30,40,90,80,50,30,20,50,10])==(20, 3)",
        "canonical_solution": "from collections import defaultdict\r\ndef max_occurrences(nums):\r\n    dict = defaultdict(int)\r\n    for i in nums:\r\n        dict[i] += 1\r\n    result = max(dict.items(), key=lambda x: x[1]) \r\n    return result"
    },
    {
        "number": 131,
        "prompt": "Write a python function to reverse only the vowels of a given string.\ndef reverse_vowels(str1):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    vowels = set(\"AEIOUaeiou\")\n    vowels_list = [char for char in str1 if char in vowels]\n    vowels_list.reverse()\n    str1 = list(str1)\n    index = 0\n    for i in range(len(str1)):\n        if str1[i] in vowels:\n            str1[i] = vowels_list[index]\n            index += 1\n    return \"\".join(str1)\n\n# Test the function with some test cases\nprint(reverse_vowels(\"hello world\"))  # Output: hEllO wOrld\nprint(reverse_vowels(\"Python\"))      # Output: PyhtOn\nprint(reverse_vowels(\"Programming\")) # Output: RgMmaroigngP\nprint(reverse_vowels(\"Aeiou\"))      # Output: uiOEa\nprint(reverse_vowels(\"aeiou\"))      # Output: uiOEa ",
        "generated_testcode": "assert reverse_vowels(\"hello world\") == \"holle world\"\n",
        "test": "assert reverse_vowels(\"Python\") == \"Python\"\nassert reverse_vowels(\"USA\") == \"ASU\"\nassert reverse_vowels(\"ab\") == \"ab\"",
        "canonical_solution": "def reverse_vowels(str1):\r\n\tvowels = \"\"\r\n\tfor char in str1:\r\n\t\tif char in \"aeiouAEIOU\":\r\n\t\t\tvowels += char\r\n\tresult_string = \"\"\r\n\tfor char in str1:\r\n\t\tif char in \"aeiouAEIOU\":\r\n\t\t\tresult_string += vowels[-1]\r\n\t\t\tvowels = vowels[:-1]\r\n\t\telse:\r\n\t\t\tresult_string += char\r\n\treturn result_string"
    },
    {
        "number": 132,
        "prompt": "Write a function to convert tuple to a string.\ndef tup_string(tup1):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": true,
        "answer": "    return str(tup1)\n#example: tup_string((1, 2, 3, 4, 5) -> \"(1, 2, 3, 4, 5)\"\n\n# Write a function to convert a string to a tuple.\ndef str_tuple(str1):\n    return tuple(str1.split(','))\n#example: str_tuple(\"1, 2, 3, 4, 5\") -> (1, 2, 3, 4, 5)\n\n# Write a function to print the nth element of a tuple.\ndef nth_element(tup, n):\n    return tup[n-1]\n#example: nth_element((1, 2, 3, 4, 5), 3) -> 4\n\n# Write a function to change the first n elements of a tuple to another value.\ndef change_n_elements(tup, n, val):\n    return (val,) * n + tup[n:]\n#example: change_n_elements((1, 2, 3, 4, 5, 6), 3, 0) -> (0, 0, 0, 4, 5, 6)\n\n# Write a function to count the occurrences of an element in a tuple.\ndef count_elem(tup, elem):\n    return tup.count(elem)\n#example: count_elem((1, 2, 3, 2, 4, ",
        "generated_testcode": "assert tup_string((1, 2, 3, 4, 5) == \"1, 2, 3, 4, 5\")\n",
        "test": "assert tup_string(('e', 'x', 'e', 'r', 'c', 'i', 's', 'e', 's'))==(\"exercises\")\nassert tup_string(('p','y','t','h','o','n'))==(\"python\")\nassert tup_string(('p','r','o','g','r','a','m'))==(\"program\")",
        "canonical_solution": "def tup_string(tup1):\r\n  str =  ''.join(tup1)\r\n  return str"
    },
    {
        "number": 133,
        "prompt": "Write a function to calculate the sum of the negative numbers of a given list of numbers using lambda function.\ndef sum_negativenum(nums):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    return sum(filter(lambda x: x<0, nums)\n\n# Test the function with a list of numbers\nprint(sum_negativenum([1, -3, 2, -1, 5, -2, -4])) # Output: -6\nprint(sum_negativenum([1, 2, 3, 4, 5, 6]) # Output: 0\n\n# Write a lambda function to calculate the average of a list of numbers\ndef average(nums):\n    return sum(nums)/len(nums)\n\n# Test the function with a list of numbers\nprint(average([1, 2, 3, 4, 5, 6])) # Output: 3.0\n\n# Write a lambda function to check if a number is even\ndef is_even(num):\n    return num % 2 == 0\n\n# Test the function with a list of numbers\nprint(list(filter(lambda x: is_even(x), range(10))) # Output: [0, 2, 4, 6, 8]\n\n# Write a lambda function to convert a list of tuples into a dictionary\ndata = [(1, \"a\"), (2, \"b\"), (3, \"c\")]\nresult = dict(data)\nprint(result) # Output: {1: 'a', 2: 'b', 3: 'c'}\n\n# Write a lambda function to remove duplicates from a list\nnums = [1, 2, 2, 3",
        "generated_testcode": "assert sum_negativenum([1, 2, 3, 4, -5, 6, -7, 8, -9]) == -13\n",
        "test": "assert sum_negativenum([2, 4, -6, -9, 11, -12, 14, -5, 17])==-32\nassert sum_negativenum([10,15,-14,13,-18,12,-20])==-52\nassert sum_negativenum([19, -65, 57, 39, 152,-639, 121, 44, 90, -190])==-894",
        "canonical_solution": "def sum_negativenum(nums):\r\n  sum_negativenum = list(filter(lambda nums:nums<0,nums))\r\n  return sum(sum_negativenum)"
    },
    {
        "number": 134,
        "prompt": "Write a python function to check whether the last element of given array is even or odd after performing an operation p times.\ndef check_last (arr,n,p): \n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    for i in range(p):\n        arr.append(arr[-1]+arr[-1])\n    return 'Even' if arr[-1]%2==0 else 'Odd'\n\n#Example usage:\narr = [1, 2, 3, 4, 5]\nn = len(arr)\np = 3\nprint(check_last(arr, n, p)) # Output: Odd\n",
        "generated_testcode": "assert check_last([1,2,3,4,5],2) == True\n",
        "test": "assert check_last([5,7,10],3,1) == \"ODD\"\nassert check_last([2,3],2,3) == \"EVEN\"\nassert check_last([1,2,3],3,1) == \"ODD\"",
        "canonical_solution": "def check_last (arr,n,p): \r\n    _sum = 0\r\n    for i in range(n): \r\n        _sum = _sum + arr[i] \r\n    if p == 1: \r\n        if _sum % 2 == 0: \r\n            return \"ODD\"\r\n        else: \r\n            return \"EVEN\"\r\n    return \"EVEN\"\r\n      "
    },
    {
        "number": 135,
        "prompt": "Write a function to find the nth hexagonal number.\ndef hexagonal_num(n): \n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    return n * (2*n - 1)\n\n# Write a function to check if a number is a hexagonal number.\ndef is_hexagonal(num): \n    a = num\n    b = 0.5\n    c = (3 * num)**0.5\n    if a == (b**2 + c**2)**0.5:\n        return True\n    else:\n        return False\n\n# Function to find the nth pentagonal number.\ndef pentagonal_num(n): \n    return n * (3*n - 1) // 2\n\n# Function to check if a number is a pentagonal number.\ndef is_pentagonal(num): \n    a = num\n    b = (1 + (24*num + 1)**0.5) / 6\n    c = (1 + (24*num - 1)**0.5) / 6\n    if a == (b**2 + b**2) or a == (c**2 + c**2):\n        return True\n    else:\n        return False\n\n# Function to find the nth triangular number.\ndef triangular_num(n): \n    return 0.5 * n * (n + 1)\n\n# Function to check if a number is a triangular number.\ndef is_triangular(num): \n    a = num\n    b = (1 + (1 + 8*num)**0.5) / 2\n",
        "generated_testcode": "assert hexagonal_num(1) == 1\n",
        "test": "assert hexagonal_num(10) == 190\nassert hexagonal_num(5) == 45\nassert hexagonal_num(7) == 91",
        "canonical_solution": "def hexagonal_num(n): \r\n\treturn n*(2*n - 1) "
    },
    {
        "number": 136,
        "prompt": "Write a function to calculate electricity bill.\ndef cal_electbill(units):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    if units<=100:\n        bill=units*5\n    elif units<=200:\n        bill=100+(units-100)*10\n    else:\n        bill=100+(200-100)*10+(units-200)*15\n    return bill\n\n#Testing\nprint(cal_electbill(150)) #300\nprint(cal_electbill(200)) #150\nprint(cal_electbill(250)) #225\n\n#Write a function to calculate the square of a number.\ndef square(num):\n    return num*num\n\n#Testing\nprint(square(5)) #25\nprint(square(10)) #100\nprint(square(0)) #0\n\n#Write a function to calculate the area of a rectangle.\ndef area_rect(length,breadth):\n    return length*breadth\n\n#Testing\nprint(area_rect(5,4)) #20\nprint(area_rect(10,10)) #100\nprint(area_rect(0,0)) #0\n\n#Write a function to calculate the area of a triangle.\ndef area_triangle(base,height):\n    return (base*height)/2\n\n#Testing\nprint(area_triangle(10,8)) #40.0\nprint(area_triangle(6,4)) #12.0",
        "generated_testcode": "assert cal_electbill(10000) == 100\n",
        "test": "assert cal_electbill(75)==246.25\nassert cal_electbill(265)==1442.75\nassert cal_electbill(100)==327.5",
        "canonical_solution": "def cal_electbill(units):\r\n if(units < 50):\r\n    amount = units * 2.60\r\n    surcharge = 25\r\n elif(units <= 100):\r\n    amount = 130 + ((units - 50) * 3.25)\r\n    surcharge = 35\r\n elif(units <= 200):\r\n    amount = 130 + 162.50 + ((units - 100) * 5.26)\r\n    surcharge = 45\r\n else:\r\n    amount = 130 + 162.50 + 526 + ((units - 200) * 8.45)\r\n    surcharge = 75\r\n total = amount + surcharge\r\n return total"
    },
    {
        "number": 137,
        "prompt": "Write a function to find the ration of zeroes in an array of integers.\ndef zero_count(nums):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    count = 0\n    for num in nums:\n        if num == 0:\n            count += 1\n    return count\n\n# Test the function with an example array\narr = [1, 2, 0, 3, 4, 0, 5, 0, 6, 0, 7, 8, 0, 9, 0]\nprint(zero_count(arr)) # Output: 3\n\n# Function to count the number of negative elements in an array of integers\ndef negative_count(nums):\n    count = 0\n    for num in nums:\n        if num < 0:\n            count += 1\n    return count\n\n# Test the function with an example array\narr = [1, 2, -3, 4, -5, 6, -7, 8, -9, 0]\nprint(negative_count(arr)) # Output: 4\n\n# Function to find the sum of all even numbers in an array\ndef even_sum(nums):\n    total = 0\n    for num in nums:\n        if num % 2 == 0:\n            total += num\n    return total\n\n# Test the function with an example array\narr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nprint(even_sum(arr)) # Output: 30\n\n# Function to find the average of an array of integers\ndef average",
        "generated_testcode": "assert zero_count([1, 2, 3, 0, 4, 5, 0, 6, 0, 7, 8, 0, 9]) == 3\n",
        "test": "assert zero_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])==0.15\nassert zero_count([2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8])==0.00\nassert zero_count([2, 4, -6, -9, 11, -12, 14, -5, 17])==0.00",
        "canonical_solution": "from array import array\r\ndef zero_count(nums):\r\n    n = len(nums)\r\n    n1 = 0\r\n    for x in nums:\r\n        if x == 0:\r\n            n1 += 1\r\n        else:\r\n          None\r\n    return round(n1/n,2)"
    },
    {
        "number": 138,
        "prompt": "Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\ndef is_Sum_Of_Powers_Of_Two(n): \n",
        "checkpoint": "13B",
        "pass": 8,
        "correct": true,
        "answer": "    if n == 0: \n        return True\n    if n & 1: \n        return False\n    while n > 0 and (n & 1) == 0: \n        n >>= 1\n    return is_Sum_Of_Powers_Of_Two(n - 1) \n\n# Test the function \nn = 10\nif is_Sum_Of_Powers_Of_Two(n): \n    print(n, \"can be represented as sum of non-zero powers of 2\") \nelse: \n    print(n, \"cannot be represented as sum of non-zero powers of 2\") \n",
        "generated_testcode": "assert is_Sum_Of_Powers_Of_Two(10) == True\n",
        "test": "assert is_Sum_Of_Powers_Of_Two(10) == True\nassert is_Sum_Of_Powers_Of_Two(7) == False\nassert is_Sum_Of_Powers_Of_Two(14) == True",
        "canonical_solution": "def is_Sum_Of_Powers_Of_Two(n): \r\n    if (n % 2 == 1): \r\n        return False\r\n    else: \r\n        return True"
    },
    {
        "number": 139,
        "prompt": "Write a function to find the circumference of a circle.\ndef circle_circumference(r):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    pi = 3.14159\n    return 2 * pi * r\n\n# Test the function with a radius of 5\nprint(circle_circumference(5)) # Output: 31.4159\n\n# Write a function to find the area of a circle.\ndef circle_area(r):\n    pi = 3.14159\n    return pi * r ** 2\n\n# Test the function with a radius of 5\nprint(circle_area(5)) # Output: 78.5398\n\n# Write a function to find the surface area of a sphere.\ndef sphere_surface_area(r):\n    pi = 3.14159\n    return 4 * pi * r ** 2\n\n# Test the function with a radius of 5\nprint(sphere_surface_area(5)) # Output: 314.1590\n\n# Write a function to find the volume of a sphere.\ndef sphere_volume(r):\n    pi = 3.14159\n    return (4/3) * pi * r ** 3\n\n# Test the function with a radius of 5\nprint(sphere_volume(5)) # Output: 523.60\n\n# Write a function to find the volume of a cylinder.\ndef cylinder_volume(r, h):\n    pi = 3.14159\n    return pi * r ** 2 * h\n\n# Test",
        "generated_testcode": "assert circle_circumference(5) == 31.4159, \"Incorrect circumference\"\n\n",
        "test": "assert circle_circumference(10)==62.830000000000005\nassert circle_circumference(5)==31.415000000000003\nassert circle_circumference(4)==25.132",
        "canonical_solution": "def circle_circumference(r):\r\n  perimeter=2*3.1415*r\r\n  return perimeter"
    },
    {
        "number": 140,
        "prompt": "Write a function to extract elements that occur singly in the given tuple list.\ndef extract_singly(test_list):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    unique_list = []\n    for item in test_list:\n        if test_list.count(item) == 1:\n            unique_list.append(item)\n    return unique_list\n\n\n# Test the function with the given tuple\nmy_tuple = (1, 2, 3, 4, 5, 2, 3, 1, 4, 5)\nprint(extract_singly(my_tuple))  # Output: [1, 4]\n\n# Test the function with another tuple\nmy_tuple = (1, 2, 3, 4, 5, 6, 7)\nprint(extract_singly(my_tuple))  # Output: [1, 2, 3, 4, 5, 6, 7]\n\n# Test the function with an empty tuple\nmy_tuple = ()\nprint(extract_singly(my_tuple))  # Output: [] ",
        "generated_testcode": "",
        "test": "assert extract_singly([(3, 4, 5), (4, 5, 7), (1, 4)]) == [3, 4, 5, 7, 1]\nassert extract_singly([(1, 2, 3), (4, 2, 3), (7, 8)]) == [1, 2, 3, 4, 7, 8]\nassert extract_singly([(7, 8, 9), (10, 11, 12), (10, 11)]) == [7, 8, 9, 10, 11, 12]",
        "canonical_solution": "def extract_singly(test_list):\r\n  res = []\r\n  temp = set()\r\n  for inner in test_list:\r\n    for ele in inner:\r\n      if not ele in temp:\r\n        temp.add(ele)\r\n        res.append(ele)\r\n  return (res) "
    },
    {
        "number": 141,
        "prompt": "Write a function to sort a list of elements using pancake sort.\ndef pancake_sort(nums):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": true,
        "answer": "    n = len(nums)\n    while n > 1:\n        # Find the maximum element in the list\n        max_idx = 0\n        for i in range(n):\n            if nums[i] > nums[max_idx]:\n                max_idx = i\n        # Reverse the maximum element to the beginning of the list\n        nums[:max_idx+1] = reversed(nums[:max_idx+1])\n        # Reverse the entire list\n        nums[:n] = reversed(nums[:n])\n        # Decrease the size of the list by 1\n        n -= 1\n    return nums\n\n# Test the function with some sample inputs\nprint(pancake_sort([3, 1, 2, 4, 5, 6, 8, 7]))  # Output: [1, 2, 3, 4, 5, 6, 7, 8]\nprint(pancake_sort([5, 4, 3, 2, 1]))         # Output: [1, 2, 3, 4, 5]\nprint(pancake_sort([1]))                    # Output: [1]\nprint(pancake_sort([]))                    # Output: [] ",
        "generated_testcode": "",
        "test": "assert pancake_sort([15, 79, 25, 38, 69]) == [15, 25, 38, 69, 79]\nassert pancake_sort([98, 12, 54, 36, 85]) == [12, 36, 54, 85, 98]\nassert pancake_sort([41, 42, 32, 12, 23]) == [12, 23, 32, 41, 42]",
        "canonical_solution": "def pancake_sort(nums):\r\n    arr_len = len(nums)\r\n    while arr_len > 1:\r\n        mi = nums.index(max(nums[0:arr_len]))\r\n        nums = nums[mi::-1] + nums[mi+1:len(nums)]\r\n        nums = nums[arr_len-1::-1] + nums[arr_len:len(nums)]\r\n        arr_len -= 1\r\n    return nums"
    },
    {
        "number": 142,
        "prompt": "Write a function to count the same pair in three given lists.\ndef count_samepair(list1,list2,list3):\n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    count=0\n    for i in list1:\n        for j in list2:\n            for k in list3:\n                if i==j==k:\n                    count+=1\n    return count\n#test\nprint(count_samepair([1,2,3,4],[2,3,4,5],[4,5,6])) #2 ",
        "generated_testcode": "assert count_samepair([1,2,3],[2,3,4],[3,4,5]) == 1\n",
        "test": "assert count_samepair([1,2,3,4,5,6,7,8],[2,2,3,1,2,6,7,9],[2,1,3,1,2,6,7,9])==3\nassert count_samepair([1,2,3,4,5,6,7,8],[2,2,3,1,2,6,7,8],[2,1,3,1,2,6,7,8])==4\nassert count_samepair([1,2,3,4,2,6,7,8],[2,2,3,1,2,6,7,8],[2,1,3,1,2,6,7,8])==5",
        "canonical_solution": "def count_samepair(list1,list2,list3):\r\n    result = sum(m == n == o for m, n, o in zip(list1,list2,list3))\r\n    return result"
    },
    {
        "number": 143,
        "prompt": "Write a function to find number of lists present in the given tuple.\ndef find_lists(Input): \n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    count = 0\n    for i in Input:\n        if type(i) == list:\n            count += 1\n    return count \n\n#Test the function\nprint(find_lists((1,2,3,[4,5],[6,7],(8,9))) # Output: 2\nprint(find_lists((1,2,3,4,5)) # Output: 0\nprint(find_lists(123) # Output: 0\nprint(find_lists([1,2,3,4,5]) # Output: 1\nprint(find_lists(('a','b','c',[1,2,3],[4,5]) # Output: 1\nprint(find_lists([1,2,3,4,5,'a','b']) # Output: 0\nprint(find_lists([]) # Output: 1\nprint(find_lists(()) # Output: 0 ",
        "generated_testcode": "assert find_lists((1, 2, 3, [4, 5, 6], 7, 8) == 1\n",
        "test": "assert find_lists(([1, 2, 3, 4], [5, 6, 7, 8])) == 2\nassert find_lists(([1, 2], [3, 4], [5, 6]))  == 3\nassert find_lists(([9, 8, 7, 6, 5, 4, 3, 2, 1])) == 1",
        "canonical_solution": "def find_lists(Input): \r\n\tif isinstance(Input, list): \r\n\t\treturn 1\r\n\telse: \r\n\t\treturn len(Input) "
    },
    {
        "number": 144,
        "prompt": "Write a python function to find the sum of absolute differences in all pairs of the given array.\ndef sum_Pairs(arr,n): \n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    total_sum = 0\n    for i in range(n): \n        for j in range(i+1,n): \n            total_sum += abs(arr[i] - arr[j]) \n    return total_sum\n\n# Driver Code \nif __name__ == '__main__': \n    arr = [1, 2, 3, 4, 5, 6] \n    n = len(arr) \n    print(\"Sum of absolute differences of all pairs in the array:\",sum_Pairs(arr,n))\n\n# Time Complexity : O(n^2) ",
        "generated_testcode": "assert sum_Pairs([1,2,3,4,5],4) == 4\n",
        "test": "assert sum_Pairs([1,8,9,15,16],5) == 74\nassert sum_Pairs([1,2,3,4],4) == 10\nassert sum_Pairs([1,2,3,4,5,7,9,11,14],9) == 188",
        "canonical_solution": "def sum_Pairs(arr,n): \r\n    sum = 0\r\n    for i in range(n - 1,-1,-1): \r\n        sum += i*arr[i] - (n-1-i) * arr[i] \r\n    return sum"
    },
    {
        "number": 145,
        "prompt": "Write a python function to find the maximum difference between any two elements in a given array.\ndef max_Abs_Diff(arr,n): \n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    max_diff = arr[1] - arr[0] \n    min_val = arr[0] \n      \n    for i in range(1, n): \n        if arr[i] - min_val > max_diff: \n            max_diff = arr[i] - min_val \n        if arr[i] < min_val: \n            min_val = arr[i] \n          \n    return max_diff \n  \n# Driver code \narr = [100, 4, 200, 13, 5, 78] \nn = len(arr) \nprint(\"Maximum difference is\", max_Abs_Diff(arr, n)) ",
        "generated_testcode": "assert max_Abs_Diff([1, 2, 3, 4, 5, 6, 7], 5) == 6\n",
        "test": "assert max_Abs_Diff((2,1,5,3),4) == 4\nassert max_Abs_Diff((9,3,2,5,1),5) == 8\nassert max_Abs_Diff((3,2,1),3) == 2",
        "canonical_solution": "def max_Abs_Diff(arr,n): \r\n    minEle = arr[0] \r\n    maxEle = arr[0] \r\n    for i in range(1, n): \r\n        minEle = min(minEle,arr[i]) \r\n        maxEle = max(maxEle,arr[i]) \r\n    return (maxEle - minEle) "
    },
    {
        "number": 146,
        "prompt": "Write a function to find the ascii value of total characters in a string.\ndef ascii_value_string(str1):\n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    total_ascii_value = 0\n    for i in str1:\n        total_ascii_value += ord(i)\n    return total_ascii_value\n\n\n# Test the function with an example string\nprint(ascii_value_string(\"hello\"))  # Output: 532\n\n# Test the function with another example string\nprint(ascii_value_string(\"world\"))  # Output: 6026\n\n\n# Test the function with an empty string\nprint(ascii_value_string(\"\"))  # Output: 0\n\n# Test the function with a string containing spaces\nprint(ascii_value_string(\"hello world\"))  # Output: 6137\n\n# Test the function with a string containing digits\nprint(ascii_value_string(\"123456\"))  # Output: 211\n\n# Test the function with a string containing special characters\nprint(ascii_value_string(\"!@#$%^&*()\"))  # Output: 2102\n\n# Test the function with a string containing uppercase and lowercase letters\nprint(ascii_value_string(\"PythonIsAwesome\"))  # Output: 7547\n",
        "generated_testcode": "",
        "test": "assert ascii_value_string(\"python\")==112\nassert ascii_value_string(\"Program\")==80\nassert ascii_value_string(\"Language\")==76",
        "canonical_solution": "def ascii_value_string(str1):\r\n  for i in range(len(str1)):\r\n   return ord(str1[i])"
    },
    {
        "number": 147,
        "prompt": "Write a function to find the maximum total path sum in the given triangle.\ndef max_path_sum(tri, m, n): \n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    for i in range(m - 2, -1, -1): \n        for j in range(len(tri[i])): \n            tri[i][j] += max(tri[i + 1][j], tri[i + 1][j + 1]) \n    return tri[0][0] \n  \ndef find_max_path_sum(tri): \n    m = len(tri) \n    n = len(tri[0]) \n    return max_path_sum(tri, m, n) ",
        "generated_testcode": "assert max_path_sum([[3, 2, 4], [6, 5, 7], [4, 1, 2]], 3, 2) == 18\n",
        "test": "assert max_path_sum([[1, 0, 0], [4, 8, 0], [1, 5, 3]], 2, 2) == 14\nassert max_path_sum([[13, 0, 0], [7, 4, 0], [2, 4, 6]], 2, 2) == 24 \nassert max_path_sum([[2, 0, 0], [11, 18, 0], [21, 25, 33]], 2, 2) == 53",
        "canonical_solution": "def max_path_sum(tri, m, n): \r\n\tfor i in range(m-1, -1, -1): \r\n\t\tfor j in range(i+1): \r\n\t\t\tif (tri[i+1][j] > tri[i+1][j+1]): \r\n\t\t\t\ttri[i][j] += tri[i+1][j] \r\n\t\t\telse: \r\n\t\t\t\ttri[i][j] += tri[i+1][j+1] \r\n\treturn tri[0][0]"
    },
    {
        "number": 148,
        "prompt": "Write a function to divide a number into two parts such that the sum of digits is maximum.\ndef sum_digits_single(x) : \n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    n = x \n    sum = 0\n    while x > 0 : \n        sum += x % 10\n        x = x // 10\n    return sum \n\ndef divide_number(n) : \n    # Find the maximum sum of digits\n    sum1 = sum_digits_single(n)\n    max_sum = 0\n    for i in range(n+1) : \n        if i * (n-i) == n : \n            sum2 = sum_digits_single(i) + sum_digits_single(n-i)\n            if sum2 > max_sum : \n                max_sum = sum2\n                div1 = i\n                div2 = n-i\n    return div1, div2\n\nn = int(input(\"Enter the number to be divided : \"))\ndiv1, div2 = divide_number(n)\nprint(div1, \"and\", div2) ",
        "generated_testcode": "assert sum_digits_single(12345) == (15, 7)\n",
        "test": "assert sum_digits_twoparts(35)==17\nassert sum_digits_twoparts(7)==7\nassert sum_digits_twoparts(100)==19",
        "canonical_solution": "def sum_digits_single(x) : \r\n    ans = 0\r\n    while x : \r\n        ans += x % 10\r\n        x //= 10  \r\n    return ans \r\ndef closest(x) : \r\n    ans = 0\r\n    while (ans * 10 + 9 <= x) : \r\n        ans = ans * 10 + 9  \r\n    return ans   \r\ndef sum_digits_twoparts(N) : \r\n    A = closest(N)  \r\n    return sum_digits_single(A) + sum_digits_single(N - A) "
    },
    {
        "number": 149,
        "prompt": "Write a function to find the longest subsequence such that the difference between adjacents is one for the given array.\ndef longest_subseq_with_diff_one(arr, n): \n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    max_len = 1\n    count = 1\n    for i in range(1, n): \n        if abs(arr[i] - arr[i - 1]) == 1: \n            count += 1\n        else: \n            max_len = max(max_len, count) \n            count = 1\n    max_len = max(max_len, count) \n    return max_len \n\narr = [1, 2, 3, 4, 5, 6, 7, 8, 9] \nn = len(arr) \nprint(\"Length of the longest subsequence with adjacent difference 1 is\", longest_subseq_with_diff_one(arr, n)) ",
        "generated_testcode": "assert longest_subseq_with_diff_one([1, 2, 3, 4, 5, 6, 7, 8, 9], 7) == 6\n",
        "test": "assert longest_subseq_with_diff_one([1, 2, 3, 4, 5, 3, 2], 7) == 6\nassert longest_subseq_with_diff_one([10, 9, 4, 5, 4, 8, 6], 7) == 3\nassert longest_subseq_with_diff_one([1, 2, 3, 2, 3, 7, 2, 1], 8) == 7",
        "canonical_solution": "def longest_subseq_with_diff_one(arr, n): \r\n\tdp = [1 for i in range(n)] \r\n\tfor i in range(n): \r\n\t\tfor j in range(i): \r\n\t\t\tif ((arr[i] == arr[j]+1) or (arr[i] == arr[j]-1)): \r\n\t\t\t\tdp[i] = max(dp[i], dp[j]+1) \r\n\tresult = 1\r\n\tfor i in range(n): \r\n\t\tif (result < dp[i]): \r\n\t\t\tresult = dp[i] \r\n\treturn result"
    },
    {
        "number": 150,
        "prompt": "Write a python function to find whether the given number is present in the infinite sequence or not.\ndef does_Contain_B(a,b,c): \n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    return (a%b==0 or b%c==0 or c%a==0) \n\n#Test Cases\nprint(does_Contain_B(15,20,25)) # True\nprint(does_Contain_B(15,15,20)) # False\nprint(does_Contain_B(15,20,15)) # True ",
        "generated_testcode": "assert does_Contain_B(1,2,3) == True\n",
        "test": "assert does_Contain_B(1,7,3) == True\nassert does_Contain_B(1,-3,5) == False\nassert does_Contain_B(3,2,5) == False",
        "canonical_solution": "def does_Contain_B(a,b,c): \r\n    if (a == b): \r\n        return True\r\n    if ((b - a) * c > 0 and (b - a) % c == 0): \r\n        return True\r\n    return False"
    },
    {
        "number": 151,
        "prompt": "Write a python function to check whether the given number is co-prime or not.\ndef gcd(p,q):\n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    while q != 0:\n        p, q = q, p%q\n    return p\n\ndef is_coprime(a,b):\n    if gcd(a,b) == 1:\n        return True\n    else:\n        return False\n\n# Test the function\nprint(is_coprime(10,25)) # Output: True\nprint(is_coprime(10,20)) # Output: False\n\n# Time Complexity : O(log(min(a,b))\n# Space Complexity : O(1)\n",
        "generated_testcode": "assert gcd(10,20) == 10\n",
        "test": "assert is_coprime(17,13) == True\nassert is_coprime(15,21) == False\nassert is_coprime(25,45) == False",
        "canonical_solution": "def gcd(p,q):\r\n    while q != 0:\r\n        p, q = q,p%q\r\n    return p\r\ndef is_coprime(x,y):\r\n    return gcd(x,y) == 1"
    },
    {
        "number": 152,
        "prompt": "Write a function to sort the given array by using merge sort.\ndef merge(a,b):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    i=j=k=0\n    c=[]\n    while i<len(a) and j<len(b):\n        if a[i]<b[j]:\n            c.append(a[i])\n            i+=1\n        else:\n            c.append(b[j])\n            j+=1\n    c.extend(a[i:])\n    c.extend(b[j:])\n    return c\n\ndef mergesort(arr):\n    if len(arr)<=1:\n        return arr\n    mid=len(arr)//2\n    a=arr[:mid]\n    b=arr[mid:]\n    a=mergesort(a)\n    b=mergesort(b)\n    return merge(a,b)\n\narr=[5,4,3,2,1,6,7,8,9]\nprint(mergesort(arr)) #Output: [1, 2, 3, 4, 5, 6, 7, 8, 9] ",
        "generated_testcode": "assert merge([1,3,5,7,9],[2,4,6,8,10]) == [1,2,3,4,5,6,7,8,9,10]\n",
        "test": "assert merge_sort([3, 4, 2, 6, 5, 7, 1, 9]) == [1, 2, 3, 4, 5, 6, 7, 9]\nassert merge_sort([7, 25, 45, 78, 11, 33, 19]) == [7, 11, 19, 25, 33, 45, 78]\nassert merge_sort([3, 1, 4, 9, 8]) == [1, 3, 4, 8, 9]",
        "canonical_solution": "def merge(a,b):\r\n    c = []\r\n    while len(a) != 0 and len(b) != 0:\r\n        if a[0] < b[0]:\r\n            c.append(a[0])\r\n            a.remove(a[0])\r\n        else:\r\n            c.append(b[0])\r\n            b.remove(b[0])\r\n    if len(a) == 0:\r\n        c += b\r\n    else:\r\n        c += a\r\n    return c\r\ndef merge_sort(x):\r\n    if len(x) == 0 or len(x) == 1:\r\n        return x\r\n    else:\r\n        middle = len(x)//2\r\n        a = merge_sort(x[:middle])\r\n        b = merge_sort(x[middle:])\r\n        return merge(a,b)\r\n"
    },
    {
        "number": 153,
        "prompt": "Write a function to find the vertex of a parabola.\ndef parabola_vertex(a, b, c): \n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    x = -b/(2*a)\n    y = a*x**2 + b*x + c\n    return (x, y)\n\nprint(parabola_vertex(2, -6, 12))\n\n# Write a function to find the focal length of a right-angled triangle.\ndef focal_length(a, b):\n    focal_length = (a**2 + b**2)**0.5\n    return focal_length\n\nprint(focal_length(6, 8))\n\n# Write a function to find the area of a right-angled triangle.\ndef area_triangle(a, b, c):\n    area = 0.5*a*b\n    return area\n\nprint(area_triangle(6, 8))\n\n# Write a function to find the volume of a right-angled cone.\ndef cone_volume(radius, height):\n    volume = (1/3)*3.14*radius**2*height\n    return volume\n\nprint(cone_volume(4, 12))\n\n# Write a function to find the surface area of a cone.\ndef cone_surface_area(radius, slant_height):\n    surface_area = 3.14*radius*slant_height + 3.14*radius**2\n    return surface_area\n\nprint(cone_surface_area(4, 12))\n\n# Write a function to find the volume of a cone.\ndef cone_",
        "generated_testcode": "assert parabola_vertex(1, 2, 3) == (0, -3)\n",
        "test": "assert parabola_vertex(5,3,2)==(-0.3, 1.55)\nassert parabola_vertex(9,8,4)==(-0.4444444444444444, 2.2222222222222223)\nassert parabola_vertex(2,4,6)==(-1.0, 4.0)",
        "canonical_solution": "def parabola_vertex(a, b, c): \r\n  vertex=(((-b / (2 * a)),(((4 * a * c) - (b * b)) / (4 * a))))\r\n  return vertex"
    },
    {
        "number": 154,
        "prompt": "Write a function to extract every specified element from a given two dimensional list.\ndef specified_element(nums, N):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    result = []\n    for sublist in nums:\n        if N in sublist:\n            result.append(sublist[N])\n    return result\n\n# Example usage:\nnums = [[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12]]\nprint(specified_element(nums, 1)) # Output: [2, 5, 8, 11]\n\n# Write a function to remove duplicates from a list.\ndef remove_duplicates(lst):\n    return list(set(lst))\n\n# Example usage:\nlst = [1, 2, 2, 3, 4, 4, 5, 5, 6, 6, 6]\nprint(remove_duplicates(lst)) # Output: [1, 2, 3, 4, 5, 6]\n\n# Write a function to flatten a list of lists.\ndef flatten(lst):\n    flat_list = [item for sublist in lst for item in sublist]\n    return flat_list\n\n# Example usage:\nnested_list = [[1, 2], [3, 4], [5, 6]]\nprint(flatten(nested_list)) # Output: [1, 2, 3, 4, 5, 6]\n\n# Write a function to find the max length of a list of lists.\ndef max_length(lst):",
        "generated_testcode": "assert specified_element([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 2) == [2, 5, 8]\n",
        "test": "assert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],0)==[1, 4, 7]\nassert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],2)==[3, 6, 9]\nassert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],3)==[2,2,5]",
        "canonical_solution": "def specified_element(nums, N):\r\n    result = [i[N] for i in nums]\r\n    return result"
    },
    {
        "number": 155,
        "prompt": "Write a python function to toggle all even bits of a given number.\ndef even_bit_toggle_number(n) : \n",
        "checkpoint": "13B",
        "pass": 8,
        "correct": true,
        "answer": "    return n ^ ((1 << n.bit_length()) - 1)\n\n#Test the function \nn = 13 # binary representation = 1101\nprint(even_bit_toggle_number(n)) # Output: 14 (binary representation: 11110)\n\nn = 5  # binary representation = 101\nprint(even_bit_toggle_number(n)) # Output: 7 (binary representation: 1111)\n\nn = 0  # binary representation = 0\nprint(even_bit_toggle_number(n)) # Output: 1 (binary representation: 1)\n\nn = 7  # binary representation = 1111\nprint(even_bit_toggle_number(n)) # Output: 3 (binary representation: 10)\n\nn = 6  # binary representation = 110\nprint(even_bit_toggle_number(n)) # Output: 2 (binary representation: 10)\n\n#Explanation:\n# The ^ operator is the XOR operator. It returns a new number with bits set to 1 where the bits differ between the two numbers. In this case, we are comparing the binary representation of n with the binary representation of all ones with the same length as n. \n# For example, if n is 5 (binary: 101), the binary representation of all ones with the same length as 5 is 1111 (0b111111 & 0b01",
        "generated_testcode": "assert even_bit_toggle_number(10) == 5\n",
        "test": "assert even_bit_toggle_number(10) == 0\nassert even_bit_toggle_number(20) == 30\nassert even_bit_toggle_number(30) == 20",
        "canonical_solution": "def even_bit_toggle_number(n) : \r\n    res = 0; count = 0; temp = n \r\n    while (temp > 0) :     \r\n        if (count % 2 == 1) : \r\n            res = res | (1 << count)      \r\n        count = count + 1\r\n        temp >>= 1 \r\n    return n ^ res "
    },
    {
        "number": 156,
        "prompt": "Write a function to convert a tuple of string values to a tuple of integer values.\ndef tuple_int_str(tuple_str):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    return tuple(int(i) for i in tuple_str)\n\n# Example usage:\nprint(tuple_int_str((\"1\", \"2\", \"3\")) # Output: (1, 2, 3)\n\n# Alternatively, you could use a list comprehension:\ndef tuple_int_str(tuple_str):\n    return tuple([int(i) for i in tuple_str]) ",
        "generated_testcode": "assert tuple_int_str((\"1\", \"2\", \"3\") == (1, 2, 3))\n",
        "test": "assert tuple_int_str((('333', '33'), ('1416', '55')))==((333, 33), (1416, 55))\nassert tuple_int_str((('999', '99'), ('1000', '500')))==((999, 99), (1000, 500))\nassert tuple_int_str((('666', '66'), ('1500', '555')))==((666, 66), (1500, 555))",
        "canonical_solution": "def tuple_int_str(tuple_str):\r\n    result = tuple((int(x[0]), int(x[1])) for x in tuple_str)\r\n    return result"
    },
    {
        "number": 157,
        "prompt": "Write a function to reflect the run-length encoding from a list.\ndef encode_list(list1):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    result = []\n    count = 1\n    for i in range(len(list1)-1):\n        if list1[i] == list1[i+1]:\n            count += 1\n        else:\n            result.append([list1[i], count])\n            count = 1\n    result.append([list1[len(list1)-1], count])\n    return result\n\n# test the function\nlist1 = [1, 1, 1, 2, 3, 3, 3, 4, 5, 5, 5, 5, 5, 6, 6, 6]\nprint(encode_list(list1))  # output should be: [[1, 3], [2, 1], [3, 2], [4, 1], [5, 3], [6, 2]]\n\n# Explanation:\n# 1 appears 3 times in a row, so we add [1, 3] to the result list\n# 2 appears only once, so we add [2, 1]\n# 3 appears 2 times in a row, so we add [3, 2]\n# 4 appears only once, so we add [4, 1]\n# 5 appears 3 times in a row, so we add [5, 3]\n# 6 appears 2 times in a row, so we add [6, 2] ",
        "generated_testcode": "",
        "test": "assert encode_list([1,1,2,3,4,4.3,5,1])==[[2, 1], [1, 2], [1, 3], [1, 4], [1, 4.3], [1, 5], [1, 1]]\nassert encode_list('automatically')==[[1, 'a'], [1, 'u'], [1, 't'], [1, 'o'], [1, 'm'], [1, 'a'], [1, 't'], [1, 'i'], [1, 'c'], [1, 'a'], [2, 'l'], [1, 'y']]\nassert encode_list('python')==[[1, 'p'], [1, 'y'], [1, 't'], [1, 'h'], [1, 'o'], [1, 'n']]",
        "canonical_solution": "from itertools import groupby\r\ndef encode_list(list1):\r\n    return [[len(list(group)), key] for key, group in groupby(list1)]"
    },
    {
        "number": 158,
        "prompt": "Write a python function to find k number of operations required to make all elements equal.\ndef min_Ops(arr,n,k): \n",
        "checkpoint": "13B",
        "pass": 7,
        "correct": true,
        "answer": "    if n==0 or k==0:\n        return 0\n    if k==1:\n        return sum(arr)\n    if k>n:\n        return -1\n    ans=0\n    for i in range(n-k+1):\n        ans+=min(arr[i],k)\n        k-=1\n    return ans\n\n#Driver code\narr=[2,3,5,8,5,12,1,3,7,8,11]\nn=len(arr)\nk=3\nprint(min_Ops(arr,n,k)) ",
        "generated_testcode": "assert min_Ops([1,2,3,4,5],4,3) == 3\n",
        "test": "assert min_Ops([2,2,2,2],4,3) == 0\nassert min_Ops([4,2,6,8],4,3) == -1\nassert min_Ops([21,33,9,45,63],5,6) == 24",
        "canonical_solution": "def min_Ops(arr,n,k): \r\n    max1 = max(arr) \r\n    res = 0\r\n    for i in range(0,n):  \r\n        if ((max1 - arr[i]) % k != 0): \r\n            return -1 \r\n        else: \r\n            res += (max1 - arr[i]) / k \r\n    return int(res) "
    },
    {
        "number": 159,
        "prompt": "Write a function to print the season for the given month and day.\ndef month_season(month,days):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    if month in [1,2,12]:\n        season = 'Winter'\n    elif month in [3,4,5]:\n        season = 'Spring'\n    elif month in [6,7,8]:\n        season = 'Summer'\n    elif month in [9,10,11]:\n        season = 'Autumn'\n    else:\n        season = 'Winter'\n    if days >= 30:\n        print(season)\n    else:\n        print('Winter')\n\nmonth_season(8,31)\n# Test cases\n#month_season(2,28) # expected output Winter\n#month_season(8,31) # expected output Summer\n#month_season(6,30) # expected output Summer\n#month_season(12,31) # expected output Winter\n#month_season(5,31) # expected output Spring\n#month_season(11,30) # expected output Autumn ",
        "generated_testcode": "assert month_season(1,31) == \"Winter\"\n",
        "test": "assert month_season('January',4)==('winter')\nassert month_season('October',28)==('autumn')\nassert month_season('June',6)==('spring')",
        "canonical_solution": "def month_season(month,days):\r\n if month in ('January', 'February', 'March'):\r\n\t season = 'winter'\r\n elif month in ('April', 'May', 'June'):\r\n\t season = 'spring'\r\n elif month in ('July', 'August', 'September'):\r\n\t season = 'summer'\r\n else:\r\n\t season = 'autumn'\r\n if (month == 'March') and (days > 19):\r\n\t season = 'spring'\r\n elif (month == 'June') and (days > 20):\r\n\t season = 'summer'\r\n elif (month == 'September') and (days > 21):\r\n\t season = 'autumn'\r\n elif (month == 'October') and (days > 21):\r\n\t season = 'autumn'\r\n elif (month == 'November') and (days > 21):\r\n\t season = 'autumn'\r\n elif (month == 'December') and (days > 20):\r\n\t season = 'winter'\r\n return season"
    },
    {
        "number": 160,
        "prompt": "Write a function to find x and y that satisfies ax + by = n.\ndef solution (a, b, n): \n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    if b == 0: \n        if a == 0: \n            return (None, None) # No solution if a and b both are 0\n        else: \n            return (n/a, 0) # x = n/a, y = 0\n    else: \n        x = n/a\n        y = (n - a*x)/b\n        return (x, y)\n\n# Test the function with a = 2, b = 3, n = 5\nprint(solution(2, 3, 5)) # Output: (1.0, 1.5) \n\n# Test the function with a = 3, b = 0, n = 5\nprint(solution(3, 0, 5)) # Output: (1.66666666666666666665, 0.0) ",
        "generated_testcode": "assert solution(2, 3, 9) == (1, 2)\n",
        "test": "assert solution(2, 3, 7) == ('x = ', 2, ', y = ', 1)\nassert solution(4, 2, 7) == 'No solution'\nassert solution(1, 13, 17) == ('x = ', 4, ', y = ', 1)",
        "canonical_solution": "def solution (a, b, n): \r\n\ti = 0\r\n\twhile i * a <= n: \r\n\t\tif (n - (i * a)) % b == 0: \r\n\t\t\treturn (\"x = \",i ,\", y = \", \r\n\t\t\tint((n - (i * a)) / b)) \r\n\t\t\treturn 0\r\n\t\ti = i + 1\r\n\treturn (\"No solution\") "
    },
    {
        "number": 161,
        "prompt": "Write a function to remove all elements from a given list present in another list.\ndef remove_elements(list1, list2):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    return [x for x in list1 if x not in list2]\n\n# Test the function with an example\nlist1 = [1, 2, 3, 4, 5, 6, 7, 8, 9]\nlist2 = [3, 5, 7]\nprint(remove_elements(list1, list2))  # Output: [1, 2, 4, 6, 8]\n\n# Alternate solution using a loop and remove() method\ndef remove_elements(list1, list2):\n    for element in list2:\n        if element in list1:\n            list1.remove(element)\n    return list1\n\n# Test the function with an example\nlist1 = [1, 2, 3, 4, 5, 6, 7, 8, 9]\nlist2 = [3, 5, 7]\nprint(remove_elements(list1, list2))  # Output: [1, 2, 4, 6, 8]\n\n# Alternate solution using filter() method\ndef remove_elements(list1, list2):\n    return list(filter(lambda x: x not in list2, list1))\n\n# Test the function with an example\nlist1 = [1, 2, 3, 4, 5, 6, 7, 8, 9]\nlist2 = [3, 5, 7]\nprint(remove_elements(list1, list2))  #",
        "generated_testcode": "assert remove_elements([1, 2, 3, 4, 5], [3, 5]) == [1, 2, 4]\n",
        "test": "assert remove_elements([1,2,3,4,5,6,7,8,9,10],[2,4,6,8])==[1, 3, 5, 7, 9, 10]\nassert remove_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],[1, 3, 5, 7])==[2, 4, 6, 8, 9, 10]\nassert remove_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],[5,7])==[1, 2, 3, 4, 6, 8, 9, 10]",
        "canonical_solution": "def remove_elements(list1, list2):\r\n    result = [x for x in list1 if x not in list2]\r\n    return result"
    },
    {
        "number": 162,
        "prompt": "Write a function to calculate the sum of the positive integers of n+(n-2)+(n-4)... (until n-x =< 0).\ndef sum_series(n):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    sum = 0\n    for i in range(n, 0, -2):\n        sum += i\n    return sum\n\nprint(sum_series(10)) # 30\nprint(sum_series(15)) # 75\nprint(sum_series(-5)) # 0 ",
        "generated_testcode": "assert sum_series(10) == 30\n",
        "test": "assert sum_series(6)==12\nassert sum_series(10)==30\nassert sum_series(9)==25",
        "canonical_solution": "def sum_series(n):\r\n  if n < 1:\r\n    return 0\r\n  else:\r\n    return n + sum_series(n - 2)"
    },
    {
        "number": 163,
        "prompt": "Write a function to calculate the area of a regular polygon.\ndef area_polygon(s,l):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    pi = 3.14159\n    area = (s*l)/2\n    return area\n\n#test the function\nprint(area_polygon(5,3))\n\n#Write a function to calculate the volume of a sphere.\ndef volume_sphere(r):\n    pi = 3.14159\n    volume = (4/3)*pi*(r**3)\n    return volume\n\n#test the function\nprint(volume_sphere(5))\n\n#Write a function to calculate the circumference of a circle.\ndef circumference_circle(r):\n    pi = 3.14159\n    circum = 2*pi*r\n    return circum\n\n#test the function\nprint(circumference_circle(5))\n\n#Write a function to calculate the volume of a cylinder.\ndef volume_cylinder(r,h):\n    pi = 3.14159\n    volume = pi*(r**2)*h\n    return volume\n\n#test the function\nprint(volume_cylinder(5,4))\n\n#Write a function to calculate the surface area of a cube.\ndef surface_cube(a):\n    surface = 6*(a**2)\n    return surface\n\n#test the function\nprint(surface_cube(5))\n\n#Write a function to calculate the volume of a cuboid.\ndef volume_cuboid(l,w,h):\n    volume = l*w*h\n    return",
        "generated_testcode": "assert area_polygon(6,4) == 12.0\n",
        "test": "assert area_polygon(4,20)==400.00000000000006\nassert area_polygon(10,15)==1731.1969896610804\nassert area_polygon(9,7)==302.90938549487214",
        "canonical_solution": "from math import tan, pi\r\ndef area_polygon(s,l):\r\n  area = s * (l ** 2) / (4 * tan(pi / s))\r\n  return area"
    },
    {
        "number": 164,
        "prompt": "Write a python function to check whether the sum of divisors are same or not.\ndef divSum(n): \n",
        "checkpoint": "13B",
        "pass": 7,
        "correct": true,
        "answer": "    sum = 0\n    for i in range(1, n+1): \n        if(n % i == 0): \n            sum += i \n    return sum \n\ndef isPerfect(n): \n    return n == divSum(n) \n\ndef isAmicable(a, b): \n    return isPerfect(a) == b and isPerfect(b) and a != b \n\na = 284 \nb = 286\n\nif(isAmicable(a, b)): \n    print(\"Yes\") \nelse: \n    print(\"No\") \n\n# Output: Yes\n\na = 220 \nb = 28\n\nif(isAmicable(a, b)): \n    print(\"Yes\") \nelse: \n    print(\"No\") \n\n# Output: No ",
        "generated_testcode": "assert divSum(1) == 1\n",
        "test": "assert areEquivalent(36,57) == False\nassert areEquivalent(2,4) == False\nassert areEquivalent(23,47) == True",
        "canonical_solution": "import math \r\ndef divSum(n): \r\n    sum = 1; \r\n    i = 2; \r\n    while(i * i <= n): \r\n        if (n % i == 0): \r\n            sum = (sum + i +math.floor(n / i)); \r\n        i += 1; \r\n    return sum; \r\ndef areEquivalent(num1,num2): \r\n    return divSum(num1) == divSum(num2); "
    },
    {
        "number": 165,
        "prompt": "Write a python function to count characters at same position in a given string (lower and uppercase characters) as in english alphabet.\ndef count_char_position(str1): \n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    result = {}\n    for i in range(len(str1)):\n        if str1[i].islower():\n            if str1[i] in result:\n                result[str1[i]] += 1\n            else:\n                result[str1[i]] = 1\n        else:\n            if str1[i].lower() in result:\n                result[str1[i].lower()] += 1\n            else:\n                result[str1[i].lower()] = 1\n    return result\n\n# Test the function with sample input\nprint(count_char_position(\"Hello World\")) ",
        "generated_testcode": "assert count_char_position(\"Hello World\") == 10\n",
        "test": "assert count_char_position(\"xbcefg\") == 2\nassert count_char_position(\"ABcED\") == 3\nassert count_char_position(\"AbgdeF\") == 5",
        "canonical_solution": "def count_char_position(str1): \r\n    count_chars = 0\r\n    for i in range(len(str1)):\r\n        if ((i == ord(str1[i]) - ord('A')) or \r\n            (i == ord(str1[i]) - ord('a'))): \r\n            count_chars += 1\r\n    return count_chars "
    },
    {
        "number": 166,
        "prompt": "Write a python function to count the pairs with xor as an even number.\ndef find_even_Pair(A,N): \n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    pairs = 0\n    for i in range(N): \n        for j in range(i+1,N): \n            if (A[i]^A[j])%2 == 0: \n                pairs += 1\n    return pairs \n\n# take input of list of integers\nA = list(map(int, input(\"Enter a list of integers separated by space: \").strip().split())) \nN = len(A)\nprint(\"Number of pairs with xor as an even number is\",find_even_Pair(A,N)) \n\n# sample input output\n# Enter a list of integers separated by space: 4 5 6 7 8\n# Number of pairs with xor as an even number is 6\n\n# Time Complexity: O(N^2)\n# space Complexity: O(1)\n# Note: space complexity is constant because we are not using any extra space for the function. ",
        "generated_testcode": "assert find_even_Pair([1,2,3,4,5,6,7,8,9], 6) == 2\n",
        "test": "assert find_even_Pair([5,4,7,2,1],5) == 4\nassert find_even_Pair([7,2,8,1,0,5,11],7) == 9\nassert find_even_Pair([1,2,3],3) == 1",
        "canonical_solution": "def find_even_Pair(A,N): \r\n    evenPair = 0\r\n    for i in range(0,N): \r\n        for j in range(i+1,N): \r\n            if ((A[i] ^ A[j]) % 2 == 0): \r\n                evenPair+=1\r\n    return evenPair; "
    },
    {
        "number": 167,
        "prompt": "Write a python function to find smallest power of 2 greater than or equal to n.\ndef next_Power_Of_2(n): \n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": " \n    p = 1\n    while (p < n): \n        p <<= 1\n    return p \n  \n# Test the function \nn = 10\nprint(\"The next power of 2 greater than or equal to\", n, \"is\", next_Power_Of_2(n)) \n  \nn = 12\nprint(\"The next power of 2 greater than or equal to\", n, \"is\", next_Power_Of_2(n)) \n  \nn = 16\nprint(\"The next power of 2 greater than or equal to\", n, \"is\", next_Power_Of_2(n)) \n\n# Time Complexity: O(log n) ",
        "generated_testcode": "assert next_Power_Of_2(10) == 16\n",
        "test": "assert next_Power_Of_2(0) == 1\nassert next_Power_Of_2(5) == 8\nassert next_Power_Of_2(17) == 32",
        "canonical_solution": "def next_Power_Of_2(n): \r\n    count = 0; \r\n    if (n and not(n & (n - 1))): \r\n        return n   \r\n    while( n != 0): \r\n        n >>= 1\r\n        count += 1\r\n    return 1 << count; "
    },
    {
        "number": 168,
        "prompt": "Write a python function to find the frequency of a number in a given array.\ndef frequency(a,x): \n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    count=0\n    for i in range(len(a)): \n        if a[i] == x: \n            count += 1\n    return count \n  \na = [1, 2, 3, 4, 5, 5, 2, 4, 5, 6, 5, 7, 8, 5, 9, 5] \nx = 5\nprint(\"Frequency of\", x, \"in the list is\", frequency(a, x)) ",
        "generated_testcode": "assert frequency([1,2,3,4,5,6,7,8,9,10,10,10],10) == 2\n",
        "test": "assert frequency([1,2,3],4) == 0\nassert frequency([1,2,2,3,3,3,4],3) == 3\nassert frequency([0,1,2,3,1,2],1) == 2",
        "canonical_solution": "def frequency(a,x): \r\n    count = 0  \r\n    for i in a: \r\n        if i == x: count += 1\r\n    return count "
    },
    {
        "number": 169,
        "prompt": "Write a function to calculate the nth pell number.\ndef get_pell(n): \n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    if n == 0: \n        return 0 \n    elif n == 1: \n        return 1 \n    else: \n        return 2 * get_pell(n-1) + get_pell(n-2) \n\n# Test the function\nprint(get_pell(0)) # 0\nprint(get_pell(1)) # 1\nprint(get_pell(2)) # 2\nprint(get_pell(3)) # 5\nprint(get_pell(4)) # 12\nprint(get_pell(5)) # 29\nprint(get_pell(6)) # 70\nprint(get_pell(7)) # 169\nprint(get_pell(8)) # 408\nprint(get_pell(9)) # 985\n\n# Function to check whether a number is prime or not.\ndef is_prime(num): \n    if num < 2: \n        return False \n    for i in range(2, int(num ** 0.5) + 1): \n        if num % i == 0: \n            return False\n    return True \n\n# Test the function\nprint(is_prime(10)) # False\nprint(is_prime(7)) # True\nprint(is_prime(29)) # True\nprint(is_prime(41)) # True\nprint(is_prime(42)) # False",
        "generated_testcode": "assert get_pell(0) == 0\n",
        "test": "assert get_pell(4) == 12\nassert get_pell(7) == 169\nassert get_pell(8) == 408",
        "canonical_solution": "def get_pell(n): \r\n\tif (n <= 2): \r\n\t\treturn n \r\n\ta = 1\r\n\tb = 2\r\n\tfor i in range(3, n+1): \r\n\t\tc = 2 * b + a \r\n\t\ta = b \r\n\t\tb = c \r\n\treturn b "
    },
    {
        "number": 170,
        "prompt": "Write a function to find sum of the numbers in a list between the indices of a specified range.\ndef sum_range_list(list1, m, n):                                                                                                                                                                                                \n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    sum = 0                                                                                                                                                                                                            \n    for i in range(m, n+1):                                                                                                                                                                                         \n        sum += list1[i]                                                                                                                                                                                         \n    return sum                                                                                                                                                                                                 \n\n# Test the function with an example list                                                                                                                                                                         \nlist1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]                                                                                                                                                                     \nm = 1                                                                                                                                                                                                          \nn = 3                                                                                                                                                                                                          \nprint(sum_range_list(list1, m, n)) # Output: 10 (i.e., 2+3+4+5 = 12)                                                                                                                                         ",
        "generated_testcode": "assert sum_range_list([1, 2, 3, 4, 5, 6, 7, 8, 9], 2, 5) == 18\n",
        "test": "assert sum_range_list( [2,1,5,6,8,3,4,9,10,11,8,12],8,10)==29\nassert sum_range_list( [2,1,5,6,8,3,4,9,10,11,8,12],5,7)==16\nassert sum_range_list( [2,1,5,6,8,3,4,9,10,11,8,12],7,10)==38",
        "canonical_solution": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \r\n    sum_range = 0                                                                                                                                                                                                         \r\n    for i in range(m, n+1, 1):                                                                                                                                                                                        \r\n        sum_range += list1[i]                                                                                                                                                                                                  \r\n    return sum_range   "
    },
    {
        "number": 171,
        "prompt": "Write a function to find the perimeter of a pentagon.\ndef perimeter_pentagon(a):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    p = 5 * a  # Since a pentagon has 5 sides, each side will have a length of a.\n    return p\n\n# Test the function with the following value\nprint(perimeter_pentagon(7))  # Output: 35\n\n# Write a function to find the area of a rectangle\ndef area_rectangle(length, width):\n    area = length * width\n    return area\n\n# Test the function with the following values\nprint(area_rectangle(5, 10))  # Output: 50\nprint(area_rectangle(12, 8))  # Output: 96\n\n# Write a function to find the volume of a cylinder\ndef volume_cylinder(radius, height):\n    import math\n    volume = math.pi * radius ** 2 * height\n    return volume\n\n# Test the function with the following values\nprint(volume_cylinder(5, 10))  # Output: 157.07963267948946727\nprint(volume_cylinder(7, 12))  # Output: 650.286918573917789\n\n# Write a function to find the volume of a sphere\ndef volume_sphere(radius):\n    import math\n    volume = (4/3) * math.pi * radius ** 3\n    return volume\n\n# Test the function with the following value\nprint(volume_sphere(",
        "generated_testcode": "assert perimeter_pentagon(5) == 15\n",
        "test": "assert perimeter_pentagon(5)==25\nassert perimeter_pentagon(10)==50\nassert perimeter_pentagon(15)==75",
        "canonical_solution": "import math\r\ndef perimeter_pentagon(a):\r\n  perimeter=(5*a)\r\n  return perimeter"
    },
    {
        "number": 172,
        "prompt": "Write a function to find the occurence of characters 'std' in the given string 1. list item 1. list item 1. list item 2. list item 2. list item 2. list item\ndef count_occurance(s):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    count_std = 0\n    for i in s:\n        if i == \"s\" or i == \"t\" or i == \"d\":\n            count_std += 1\n    return count_std\n\n#Testing the function\nprint(count_occurance(\"stddst\")) # Output: 4\nprint(count_occurance(\"hello world\")) # Output: 1\nprint(count_occurance(\"python\")) # Output: 0\n\n# Using regex\nimport re\ndef count_occurance(s):\n    return len(re.findall(r's|t|d',s))\n\n#Testing the function\nprint(count_occurance(\"stddst\")) # Output: 4\nprint(count_occurance(\"hello world\")) # Output: 1\nprint(count_occurance(\"python\")) # Output: 0 ",
        "generated_testcode": "assert count_occurance(\"standard\") == 1\n",
        "test": "assert count_occurance(\"letstdlenstdporstd\") == 3\nassert count_occurance(\"truststdsolensporsd\") == 1\nassert count_occurance(\"makestdsostdworthit\") == 2",
        "canonical_solution": "def count_occurance(s):\r\n  count=0\r\n  for i in range(len(s)):\r\n    if (s[i]== 's' and s[i+1]=='t' and s[i+2]== 'd'):\r\n      count = count + 1\r\n  return count"
    },
    {
        "number": 173,
        "prompt": "Write a function to remove everything except alphanumeric characters from a string.\ndef remove_splchar(text): \n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    return ''.join(e for e in text if e.isalnum()) \n\n# test the function \nprint(remove_splchar(\"Hello, World!\")) ",
        "generated_testcode": "assert remove_splchar(\"Hello, World!\") == \"HelloWorld\"\n",
        "test": "assert remove_splchar('python  @#&^%$*program123')==('pythonprogram123')\nassert remove_splchar('python %^$@!^&*()  programming24%$^^()    language')==('pythonprogramming24language')\nassert remove_splchar('python   ^%&^()(+_)(_^&67)                  program')==('python67program')",
        "canonical_solution": "import re\r\ndef remove_splchar(text): \r\n pattern = re.compile('[\\W_]+')\r\n return (pattern.sub('', text))"
    },
    {
        "number": 174,
        "prompt": "Write a function to group a sequence of key-value pairs into a dictionary of lists.\ndef group_keyvalue(l):\n",
        "checkpoint": "13B",
        "pass": 6,
        "correct": true,
        "answer": "    # Create an empty dictionary\n    d = {}\n    # Loop through each item in the list\n    for item in l:\n        # Split the item into key-value pair\n        key, value = item.split(\":\")\n        # If the key is already in the dictionary, add the value to the list\n        if key in d:\n            d[key].append(value)\n        # Otherwise, create a new list with the value\n        else:\n            d[key] = [value]\n    return d\n\n# Test the function\nl = [\"name:Alice\", \"age:25\", \"name:Bob\", \"age:30\", \"name:Charlie\", \"age:35\"]\nprint(group_keyvalue(l)) # Output: {\"name\": [\"Alice\", \"Bob\", \"Charlie\"], \"age\": [\"25\", \"30\", \"35\"]} ",
        "generated_testcode": "",
        "test": "assert group_keyvalue([('yellow', 1), ('blue', 2), ('yellow', 3), ('blue', 4), ('red', 1)])=={'yellow': [1, 3], 'blue': [2, 4], 'red': [1]}\nassert group_keyvalue([('python', 1), ('python', 2), ('python', 3), ('python', 4), ('python', 5)])=={'python': [1,2,3,4,5]}\nassert group_keyvalue([('yellow',100), ('blue', 200), ('yellow', 300), ('blue', 400), ('red', 100)])=={'yellow': [100, 300], 'blue': [200, 400], 'red': [100]}",
        "canonical_solution": "def group_keyvalue(l):\r\n    result = {}\r\n    for k, v in l:\r\n         result.setdefault(k, []).append(v)\r\n    return result"
    },
    {
        "number": 175,
        "prompt": "Write a function to verify validity of a string of parentheses.\ndef is_valid_parenthese( str1):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": true,
        "answer": "    stack = []\n    for i in str1:\n        if i == '(' or i == '{' or i == '[':\n            stack.append(i)\n        elif i == ')' or i == '}' or i == ']':\n            if not stack:\n                return False\n            if (i == ')' and stack[-1] == '(' or i == '}' and stack[-1] == '{' or i == ']' and stack[-1] == '['):\n                stack.pop()\n            else:\n                return False\n    if not stack:\n        return True\n    else:\n        return False\n# Example usage:\nprint(is_valid_parenthese(\"()[]{}[]{}()\")) # Output: True\nprint(is_valid_parenthese(\"()[]{}[](){]\")) # Output: False\nprint(is_valid_parenthese(\"({[]}[]{}())\")) # Output: True ",
        "generated_testcode": "assert is_valid_parenthese(\"()\") == True\n",
        "test": "assert is_valid_parenthese(\"(){}[]\")==True\nassert is_valid_parenthese(\"()[{)}\")==False\nassert is_valid_parenthese(\"()\")==True",
        "canonical_solution": "def is_valid_parenthese( str1):\r\n        stack, pchar = [], {\"(\": \")\", \"{\": \"}\", \"[\": \"]\"}\r\n        for parenthese in str1:\r\n            if parenthese in pchar:\r\n                stack.append(parenthese)\r\n            elif len(stack) == 0 or pchar[stack.pop()] != parenthese:\r\n                return False\r\n        return len(stack) == 0"
    },
    {
        "number": 176,
        "prompt": "Write a function to find the perimeter of a triangle.\ndef perimeter_triangle(a,b,c):\n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    return a+b+c\n\n# Test the function with values\nprint(perimeter_triangle(3,4,5)) # should print 12\nprint(perimeter_triangle(10,10,10)) # should print 30\nprint(perimeter_triangle(5,4,7)) # should print 16\n\n\n# Write a function to find the area of a triangle\ndef area_triangle(a,b,c):\n    s = (a+b+c)/2\n    return (s*(s-a)*(s-b)*(s-c))**0.5\n\n# Test the function with values\nprint(area_triangle(3,4,5)) # should print 6.0\nprint(area_triangle(10,10,10)) # should print 120.0\nprint(area_triangle(5,4,7)) # should print 12.0\n\n# Calculate the area of a rectangle\ndef area_rectangle(length,width):\n    return length*width\n\n# Test the function with values\nprint(area_rectangle(5,4)) # should print 20\nprint(area_rectangle(7,3)) # should print 21\nprint(area_rectangle(10,15)) # should print 150\n\n# Calculate the area of a square\ndef area_square(side):\n    return side**2\n\n# Test the function with values\nprint(area_square(5)) # should print",
        "generated_testcode": "assert perimeter_triangle(3,4,5) == 12\n",
        "test": "assert perimeter_triangle(10,20,30)==60\nassert perimeter_triangle(3,4,5)==12\nassert perimeter_triangle(25,35,45)==105",
        "canonical_solution": "def perimeter_triangle(a,b,c):\r\n  perimeter=a+b+c\r\n  return perimeter"
    },
    {
        "number": 177,
        "prompt": "Write a python function to find two distinct numbers such that their lcm lies within the given range.\ndef answer(L,R): \n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    ans = []\n    for i in range(L,R+1):\n        for j in range(i+1,R+1):\n            if i*j%gcd(i,j) == 0:\n                lcm = i*j\n                if lcm >= L and lcm <= R:\n                    ans.append(lcm)\n    if ans:\n        return ans\n    else:\n        return None\n\ndef gcd(a,b):\n    if b == 0:\n        return a\n    else:\n        return gcd(b, a%b)\n\nL = int(input(\"Enter lower range: \"))\nR = int(input(\"Enter upper range: \"):\nprint(answer(L,R))\n",
        "generated_testcode": "assert answer(1, 10) == (2, 3)\n",
        "test": "assert answer(3,8) == (3,6)\nassert answer(2,6) == (2,4)\nassert answer(1,3) == (1,2)",
        "canonical_solution": "def answer(L,R): \r\n    if (2 * L <= R): \r\n        return (L ,2*L)\r\n    else: \r\n        return (-1) "
    },
    {
        "number": 178,
        "prompt": "Write a function to search some literals strings in a string.\ndef string_literals(patterns,text):\n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    for pattern in patterns:\n        if pattern in text:\n            return True\n    return False\n\npatterns = [\"python\",\"java\",\"javascript\"]\ntext = \"I am learning python and java, and I am loving it. Javascript is also cool.\"\nprint(string_literals(patterns,text)) # Output: True\n\ntext = \"I am learning python and java, and I am loving it. C++ is also cool.\"\nprint(string_literals(patterns,text)) # Output: False\n\n# Write a function to remove vowels from a string.\ndef remove_vowels(text):\n    vowels = \"aeiouAEIOU\"\n    return \"\".join([char for char in text if char not in vowels])\n\ntext = \"Hello World\"\nprint(remove_vowels(text)) # Output: \"Hll Wrld\"\n\n# Write a function to count the number of words in a string.\ndef count_words(text):\n    words = text.split()\n    return len(words)\n\ntext = \"Hello World, welcome to the Python world.\"\nprint(count_words(text)) # Output: 5\n\n# Write a function to capitalize the first letter of each word in a sentence.\ndef capitalize_words(text):\n    words = text.split()\n    return \" \".join([word.capitalize() for word in words])\n\ntext = \"hello world, python is awesome.\"\nprint(capitalize_words(text)) # Output:",
        "generated_testcode": "assert string_literals(['hello', 'world'], 'hello world') == True\n",
        "test": "assert string_literals(['language'],'python language')==('Matched!')\nassert string_literals(['program'],'python language')==('Not Matched!')\nassert string_literals(['python'],'programming language')==('Not Matched!')",
        "canonical_solution": "import re\r\ndef string_literals(patterns,text):\r\n  for pattern in patterns:\r\n     if re.search(pattern,  text):\r\n       return ('Matched!')\r\n     else:\r\n       return ('Not Matched!')"
    },
    {
        "number": 179,
        "prompt": "Write a function to find if the given number is a keith number or not.\ndef is_num_keith(x): \n",
        "checkpoint": "13B",
        "pass": 5,
        "correct": true,
        "answer": "    if x < 0:\n        return False\n    elif x == 0:\n        return False\n    elif x == 1:\n        return True\n    else:\n        num = x\n        while x > 1:\n            x = (x//2) + (x%2)\n            num += x\n        return num == 1\n\n# Test the function\nprint(is_num_keith(8)) # False\nprint(is_num_keith(9)) # True\nprint(is_num_keith(18)) # True\nprint(is_num_keith(15)) # False\nprint(is_num_keith(12)) # True\nprint(is_num_keith(21)) # True\nprint(is_num_keith(28)) # False \n\n# A keith number is a number which when you add its digits and then continue to add the sum until the result is 1 or 1 is reached again. ",
        "generated_testcode": "assert is_num_keith(1) == True\n",
        "test": "assert is_num_keith(14) == True\nassert is_num_keith(12) == False\nassert is_num_keith(197) == True",
        "canonical_solution": "def is_num_keith(x): \r\n\tterms = [] \r\n\ttemp = x \r\n\tn = 0 \r\n\twhile (temp > 0): \r\n\t\tterms.append(temp % 10) \r\n\t\ttemp = int(temp / 10) \r\n\t\tn+=1 \r\n\tterms.reverse() \r\n\tnext_term = 0 \r\n\ti = n \r\n\twhile (next_term < x): \r\n\t\tnext_term = 0 \r\n\t\tfor j in range(1,n+1): \r\n\t\t\tnext_term += terms[i - j] \r\n\t\tterms.append(next_term) \r\n\t\ti+=1 \r\n\treturn (next_term == x) "
    },
    {
        "number": 180,
        "prompt": "Write a function to calculate distance between two points using latitude and longitude.\ndef distance_lat_long(slat,slon,elat,elon):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    R = 6373.0\n    slat = radians(slat)\n    slon = radians(slon)\n    elat = radians(elat)\n    elon = radians(elon)\n    \n    dlat = elat - slat\n    dlon = elon - slon\n    a = sin(dlat/2)**2 + cos(slat)*cos(elat)*sin(dlon/2)**2\n    c = 2*atan2(sqrt(a), sqrt(1-a))\n    distance = R*c\n    return distance\n\n# Example usage:\nprint(distance_lat_long(26.912579,75.918457,28.613917,77.216944))\n# Output: 558.492770674617991 km\n\n# Now you can use this function to calculate the distance between any two points on the earth's surface. ",
        "generated_testcode": "assert distance_lat_long(37.77493,-122.4194,37.8716,-122.2583) == 10.34\n\n",
        "test": "assert distance_lat_long(23.5,67.5,25.5,69.5)==12179.372041317429\nassert distance_lat_long(10.5,20.5,30.5,40.5)==6069.397933300514\nassert distance_lat_long(10,20,30,40)==6783.751974994595",
        "canonical_solution": "from math import radians, sin, cos, acos\r\ndef distance_lat_long(slat,slon,elat,elon):\r\n dist = 6371.01 * acos(sin(slat)*sin(elat) + cos(slat)*cos(elat)*cos(slon - elon))\r\n return dist"
    },
    {
        "number": 181,
        "prompt": "Write a function to find the longest common prefix in the given set of strings.\ndef common_prefix_util(str1, str2): \n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    i = 0\n    while i < len(str1) and i < len(str2) and str1[i] == str2[i]: \n        i += 1\n    return str1[:i]\n  \ndef longest_common_prefix(strs): \n    if not strs: \n        return \"\"\n    prefix = strs[0]\n    for i in range(1, len(strs)): \n        prefix = common_prefix_util(prefix, strs[i])\n    return prefix \n\n# Example usage: \nstrs = [\"flower\", \"flow\", \"flight\"]\nprint(longest_common_prefix(strs)) \n# Output: \"fl\"\n\ndef longest_common_prefix(strs): \n    if not strs: \n        return \"\"\n    prefix = strs[0]\n    for i in range(1, len(strs)): \n        prefix = common_prefix_util(prefix, strs[i])\n        if not prefix: \n            break\n    return prefix \n\n# Example usage: \nstrs = [\"flower\", \"flow\", \"flight\"]\nprint(longest_common_prefix(strs)) \n# Output: \"fl\"\n\n# Example usage: \nstrs = [\"dog\", \"racecar\", \"car\"]\nprint(longest_common_prefix(strs)) \n# Output: \"\" ",
        "generated_testcode": "assert common_prefix_util(\"flower\", \"flow\") == \"fl\"\n",
        "test": "assert common_prefix([\"tablets\", \"tables\", \"taxi\", \"tamarind\"], 4) == 'ta'\nassert common_prefix([\"apples\", \"ape\", \"april\"], 3) == 'ap'\nassert common_prefix([\"teens\", \"teenager\", \"teenmar\"], 3) == 'teen'",
        "canonical_solution": "def common_prefix_util(str1, str2): \r\n\tresult = \"\"; \r\n\tn1 = len(str1) \r\n\tn2 = len(str2) \r\n\ti = 0\r\n\tj = 0\r\n\twhile i <= n1 - 1 and j <= n2 - 1: \r\n\t\tif (str1[i] != str2[j]): \r\n\t\t\tbreak\r\n\t\tresult += str1[i] \r\n\t\ti += 1\r\n\t\tj += 1\r\n\treturn (result) \r\ndef common_prefix (arr, n): \r\n\tprefix = arr[0] \r\n\tfor i in range (1, n): \r\n\t\tprefix = common_prefix_util(prefix, arr[i]) \r\n\treturn (prefix) "
    },
    {
        "number": 182,
        "prompt": "Write a function to find uppercase, lowercase, special character and numeric values using regex.\ndef find_character(string):\n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    upper = lower = special = numeric = 0\n    for i in string:\n        if i.isupper():\n            upper += 1\n        elif i.islower():\n            lower += 1\n        elif i.isdigit():\n            numeric += 1\n        else:\n            special += 1\n    return upper, lower, special, numeric\n\n\nprint(find_character(\"Hello World\"))\n# Output: (1, 9, 0, 0)\nprint(find_character(\"hello123\"))\n# Output: (0, 5, 3, 0)\nprint(find_character(\"HELLO#World\"))\n# Output: (0, 5, 1, 0) ",
        "generated_testcode": "assert find_character(\"Hello123\") == (1, 4, 0, 3)\n",
        "test": "assert find_character(\"ThisIsGeeksforGeeks\") == (['T', 'I', 'G', 'G'], ['h', 'i', 's', 's', 'e', 'e', 'k', 's', 'f', 'o', 'r', 'e', 'e', 'k', 's'], [], [])\nassert find_character(\"Hithere2\") == (['H'], ['i', 't', 'h', 'e', 'r', 'e'], ['2'], [])\nassert find_character(\"HeyFolks32\") == (['H', 'F'], ['e', 'y', 'o', 'l', 'k', 's'], ['3', '2'], [])",
        "canonical_solution": "import re\r\ndef find_character(string):\r\n  uppercase_characters = re.findall(r\"[A-Z]\", string) \r\n  lowercase_characters = re.findall(r\"[a-z]\", string) \r\n  numerical_characters = re.findall(r\"[0-9]\", string) \r\n  special_characters = re.findall(r\"[, .!?]\", string) \r\n  return uppercase_characters, lowercase_characters, numerical_characters, special_characters"
    },
    {
        "number": 183,
        "prompt": "Write a function to count all the distinct pairs having a difference of k in any array.\ndef count_pairs(arr, n, k):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": true,
        "answer": "    count = 0\n    freq = {}\n    for i in range(n):\n        if arr[i] in freq:\n            freq[arr[i]] += 1\n        else:\n            freq[arr[i]] = 1\n\n    for i in range(n):\n        if (arr[i]+k) in freq:\n            count += freq[arr[i]+k]\n        if (arr[i]-k) in freq:\n            count += freq[arr[i]-k]\n\n    return count\n\n# test the function\narr = [1, 5, 3, 2, 4, 9, 6, 7]\nn = len(arr)\nk = 3\nprint(count_pairs(arr, n, k))  # output: 3 (2, 4, 6 and 7 have a difference of 3)\n\narr = [1, 5, 3, 2, 4, 9, 6, 7]\nn = len(arr)\nk = 4\nprint(count_pairs(arr, n, k))  # output: 2 (2, 6 have a difference of 4)\n\narr = [1, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5]\nn = len(arr)\nk = 0\nprint(count_pairs(arr, n, k))  #",
        "generated_testcode": "assert count_pairs([1, 2, 3, 4, 5, 6, 7], 3, 2) == 2\n",
        "test": "assert count_pairs([1, 5, 3, 4, 2], 5, 3) == 2\nassert count_pairs([8, 12, 16, 4, 0, 20], 6, 4) == 5\nassert count_pairs([2, 4, 1, 3, 4], 5, 2) == 3",
        "canonical_solution": "def count_pairs(arr, n, k):\r\n  count=0;\r\n  for i in range(0,n):\r\n    for j in range(i+1, n):\r\n      if arr[i] - arr[j] == k or arr[j] - arr[i] == k:\r\n        count += 1\r\n  return count"
    },
    {
        "number": 184,
        "prompt": "Write a function to find all the values in a list that are greater than a specified number.\ndef greater_specificnum(list,num):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    result = []\n    for i in list:\n        if i > num:\n            result.append(i)\n    return result\n\n#Example usage:\nlst = [10,20,30,40,50,60]\nnum = 35\nprint(greater_specificnum(lst,num)) # Output: [40, 50, 60]\n\n# Using a list comprehension\ndef greater_specificnum_comp(list,num):\n    return [i for i in list if i > num]\n\n#Example usage:\nlst = [10,20,30,40,50,60]\nnum = 35\nprint(greater_specificnum_comp(lst,num)) # Output: [40, 50, 60] ",
        "generated_testcode": "assert greater_specificnum([1,2,3,4,5,6,7,8,9,10], 5) == [6,7,8,9,10]\n",
        "test": "assert greater_specificnum([220, 330, 500],200)==True\nassert greater_specificnum([12, 17, 21],20)==False\nassert greater_specificnum([1,2,3,4],10)==False",
        "canonical_solution": "def greater_specificnum(list,num):\r\n greater_specificnum=all(x >= num for x in list)\r\n return greater_specificnum"
    },
    {
        "number": 185,
        "prompt": "Write a function to find the focus of a parabola.\ndef parabola_focus(a, b, c): \n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    if a != 0:\n        focus = -c/2/a\n        return focus\n    else:\n        return \"Invalid coefficients\"\n\nprint(parabola_focus(2, 4, -8))\nprint(parabola_focus(1, 2, 3)) # Test with a = 0 case\n\n# Problem 3:\n# Write a function that returns the vertex of a parabola.\ndef parabola_vertex(a, b, c):\n    if a != 0:\n        x_vertex = -b/(2*a)\n        y_vertex = -c/a\n        return (x_vertex, y_vertex)\n    else:\n        return \"Invalid coefficients\"\n\nprint(parabola_vertex(2, 4, -8)) # Test with a != 0 case\nprint(parabola_vertex(1, 2, 3)) # Test with a = 0 case\n\n# Problem 4:\n# Write a function that returns the equation of a parabola in the form ax^2 + bx + c = 0\ndef parabola_equation(a, b, c):\n    return f\"{a}x^2 + {b}x + {c} = 0\"\n\nprint(parabola_equation(2, 4, -8))\nprint(parabola_equation(1, 2, 3))\n\n# Problem 5:\n# Write a function that returns the equation of a par",
        "generated_testcode": "assert parabola_focus(1, 10, -15) == 1\n",
        "test": "assert parabola_focus(5,3,2)==(-0.3, 1.6)\nassert parabola_focus(9,8,4)==(-0.4444444444444444, 2.25)\nassert parabola_focus(2,4,6)==(-1.0, 4.125)",
        "canonical_solution": "def parabola_focus(a, b, c): \r\n  focus= (((-b / (2 * a)),(((4 * a * c) - (b * b) + 1) / (4 * a))))\r\n  return focus"
    },
    {
        "number": 186,
        "prompt": "Write a function to search some literals strings in a string by using regex.\ndef check_literals(text, patterns):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    for pattern in patterns:\n        if re.search(pattern, text, re.IGNORECASE):\n            return True\n    return False\n\n# Example usage\ntext = \"This is a sample text to search for some literals\"\npatterns = [\"sample\", \"search\"]\nresult = check_literals(text, patterns)\nprint(result) # True\n\ntext = \"This is a sample text to search for some literals\"\npatterns = [\"test\", \"example\"]\nresult = check_literals(text, patterns)\nprint(result) # False\n\ntext = \"This is a sample text to search for some literals\"\npatterns = [\"sample\", \"example\"]\nresult = check_literals(text, patterns)\nprint(result) # True\n\ntext = \"This is a sample text to search for some literals\"\npatterns = [\"example\", \"test\"]\nresult = check_literals(text, patterns)\nprint(result) # False\n```\n\nOutput:\n```\nTrue\nFalse\nTrue\n```\n\nIn this example, we are using the `re.search()` function to search for the patterns in the text. The `re.IGNORECASE` flag is used to perform a case-insensitive search. If any of the patterns are found, the function will return `True`, otherwise it will return `False`. ",
        "generated_testcode": "assert check_literals(\"Hello, world!\", [\"hello\", \"world\"]) == True\n",
        "test": "assert check_literals('The quick brown fox jumps over the lazy dog.',['fox']) == 'Matched!'\nassert check_literals('The quick brown fox jumps over the lazy dog.',['horse']) == 'Not Matched!'\nassert check_literals('The quick brown fox jumps over the lazy dog.',['lazy']) == 'Matched!'",
        "canonical_solution": "import re\r\ndef check_literals(text, patterns):\r\n  for pattern in patterns:\r\n    if re.search(pattern,  text):\r\n        return ('Matched!')\r\n    else:\r\n        return ('Not Matched!')"
    },
    {
        "number": 187,
        "prompt": "Write a function to find the longest common subsequence for the given two sequences.\ndef longest_common_subsequence(X, Y, m, n): \n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    dp = [[0 for _ in range(n+1)] for _ in range(m+1)] \n    for i in range(m+1): \n        for j in range(n+1): \n            if i == 0 or j == 0: \n                dp[i][j] = 0\n            elif X[i-1] == Y[j-1]: \n                dp[i][j] = 1 + dp[i-1][j-1] \n            else: \n                dp[i][j] = max(dp[i-1][j], dp[i][j-1]) \n    return dp[m][n] ",
        "generated_testcode": "assert longest_common_subsequence([1, 2, 3, 4, 5], [2, 4, 6, 8], 4, 4) == 2\n",
        "test": "assert longest_common_subsequence(\"AGGTAB\" , \"GXTXAYB\", 6, 7) == 4\nassert longest_common_subsequence(\"ABCDGH\" , \"AEDFHR\", 6, 6) == 3\nassert longest_common_subsequence(\"AXYT\" , \"AYZX\", 4, 4) == 2",
        "canonical_solution": "def longest_common_subsequence(X, Y, m, n): \r\n    if m == 0 or n == 0: \r\n       return 0 \r\n    elif X[m-1] == Y[n-1]: \r\n       return 1 + longest_common_subsequence(X, Y, m-1, n-1) \r\n    else: \r\n       return max(longest_common_subsequence(X, Y, m, n-1), longest_common_subsequence(X, Y, m-1, n))"
    },
    {
        "number": 188,
        "prompt": "Write a python function to check whether the given number can be represented by product of two squares or not.\ndef prod_Square(n):\n",
        "checkpoint": "13B",
        "pass": 8,
        "correct": true,
        "answer": "    i = 1\n    j = int(n**0.5)+1\n    while i<=j:\n        root = int(i**0.5)\n        if i == root*root:\n            i+=1\n            continue\n        else:\n            sqr = (n//i)**0.5\n            if sqr == int(sqr):\n                return True\n            else:\n                i+=1\n    return False\n\n# Test the function\nprint(prod_Square(44)) # Output: True\nprint(prod_Square(45)) # Output: False\nprint(prod_Square(48)) # Output: True\nprint(prod_Square(49)) # Output: False\nprint(prod_Square(64)) # Output: True\nprint(prod_Square(65)) # Output: False\nprint(prod_Square(81)) # Output: True\nprint(prod_Square(100)) # Output: False\nprint(prod_Square(1024)) # Output: True\nprint(prod_Square(123456)) # Output: False\nprint(prod_Square(169)) # Output: False\nprint(prod_Square(144)) # Output: True\nprint(prod_Square(169)) # Output: False\nprint(prod_Square(16)) # Output: True\nprint(prod_Square(1)) # Output: False ",
        "generated_testcode": "assert prod_Square(12) == True\n",
        "test": "assert prod_Square(25) == False\nassert prod_Square(30) == False\nassert prod_Square(16) == True",
        "canonical_solution": "def prod_Square(n):\r\n    for i in range(2,(n) + 1):\r\n        if (i*i < (n+1)):\r\n            for j in range(2,n + 1):\r\n                if ((i*i*j*j) == n):\r\n                    return True;\r\n    return False;"
    },
    {
        "number": 189,
        "prompt": "Write a python function to find the first missing positive number.\ndef first_Missing_Positive(arr,n): \n",
        "checkpoint": "13B",
        "pass": 7,
        "correct": true,
        "answer": "    # create a set to store the values of the given array\n    s = set(arr)\n    # loop through the range of numbers from 1 to n+1 and check if it is present in the set\n    for i in range(1,n+1): \n        if i not in s: \n            return i \n    # if all numbers are present, return n+1 as the first missing positive number \n    return n+1\n\n# test the function \narr = [3, 4, -1, 1, 1, 2, 3, 2, 5, 5] \nn = len(arr) \nprint(first_Missing_Positive(arr, n)) ",
        "generated_testcode": "assert first_Missing_Positive([3, 4, -1, 1, 1, 1, 2, 3, 2, 5, 4], 8) == 6\n",
        "test": "assert first_Missing_Positive([1,2,3,-1,5],5) == 4\nassert first_Missing_Positive([0,-1,-2,1,5,8],6) == 2\nassert first_Missing_Positive([0,1,2,5,-8],5) == 3",
        "canonical_solution": "def first_Missing_Positive(arr,n): \r\n    ptr = 0\r\n    for i in range(n):\r\n        if arr[i] == 1:\r\n            ptr = 1\r\n            break\r\n    if ptr == 0:\r\n        return(1)\r\n    for i in range(n):\r\n        if arr[i] <= 0 or arr[i] > n:\r\n            arr[i] = 1\r\n    for i in range(n):\r\n        arr[(arr[i] - 1) % n] += n\r\n    for i in range(n):\r\n        if arr[i] <= n:\r\n            return(i + 1)\r\n    return(n + 1)"
    },
    {
        "number": 190,
        "prompt": "Write a python function to count the number of integral co-ordinates that lie inside a square.\ndef count_Intgral_Points(x1,y1,x2,y2): \n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    count = 0\n    for i in range(x1,x2+1): \n        for j in range(y1,y2+1): \n            if i == x1 or i == x2 or j == y1 or j == y2: \n                continue\n            else: \n                count += 1\n    return count \n  \n# main function \nx1 = int(input(\"Enter the starting x-coordinate: \"))\ny1 = int(input(\"Enter the starting y-coordinate: \"): \nx2 = int(input(\"Enter the ending x-coordinate: \") \ny2 = int(input(\"Enter the ending y-coordinate: \") \nprint(\"Number of integral co-ordinates inside the square:\", count_Intgral_Points(x1,y1,x2,y2)) \n\n# Example \n# Example input: \n# Enter the starting x-coordinate: 1\n# Enter the starting y-coordinate: 1\n# Enter the ending x-coordinate: 3\n# Enter the ending y-coordinate: 3\n# Output: Number of integral co-ordinates inside the square: 4 ",
        "generated_testcode": "assert count_Intgral_Points(0,0,2,2) == 4\n",
        "test": "assert count_Intgral_Points(1,1,4,4) == 4\nassert count_Intgral_Points(1,2,1,2) == 1\nassert count_Intgral_Points(4,2,6,4) == 1",
        "canonical_solution": "def count_Intgral_Points(x1,y1,x2,y2): \r\n    return ((y2 - y1 - 1) * (x2 - x1 - 1)) "
    },
    {
        "number": 191,
        "prompt": "Write a function to check whether the given month name contains 30 days or not.\ndef check_monthnumber(monthname3):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": true,
        "answer": "    months = {\n        \"January\": 31,\n        \"February\": 28,\n        \"March\": 31,\n        \"April\": 30,\n        \"May\": 31,\n        \"June\": 30,\n        \"July\": 31,\n        \"August\": 31,\n        \"September\": 30,\n        \"October\": 31,\n        \"November\": 30,\n        \"December\": 31\n    }\n    if monthname3 in months.keys():\n        if months[monthname3] == 31:\n            return True\n        else:\n            return False\n    else:\n        return False\n\n# Test cases\nprint(check_monthnumber(\"January\"))  # Output: True\nprint(check_monthnumber(\"February\"))  # Output: True\nprint(check_monthnumber(\"March\"))  # Output: True\nprint(check_monthnumber(\"April\"))  # Output: True\nprint(check_monthnumber(\"May\"))  # Output: True\nprint(check_monthnumber(\"June\"))  # Output: True\nprint(check_monthnumber(\"July\"))  # Output: True\nprint(check_monthnumber(\"August\"))  # Output: True\nprint(check_monthnumber(\"September\"))  # Output: True\nprint(check_monthnumber(\"October\"))  # Output: True\nprint(check_monthnumber(\"November\"))  # Output",
        "generated_testcode": "assert check_monthnumber(\"January\") == True\n",
        "test": "assert check_monthnumber(\"February\")==False\nassert check_monthnumber(\"June\")==True\nassert check_monthnumber(\"April\")==True",
        "canonical_solution": "def check_monthnumber(monthname3):\r\n  if monthname3 ==\"April\" or monthname3== \"June\" or monthname3== \"September\" or monthname3== \"November\":\r\n    return True\r\n  else:\r\n    return False"
    },
    {
        "number": 192,
        "prompt": "Write a python function to check whether a string has atleast one letter and one number.\ndef check_String(str): \n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    has_letter = False\n    has_digit = False\n    for char in str: \n        if char.isdigit(): \n            has_digit = True\n        else: \n            has_letter = True\n        if has_letter and has_digit: \n            return True\n    return False\n\n# Test the function with some examples \nprint(check_String(\"abc\")) # Output: True \nprint(check_String(\"123\")) # Output: True \nprint(check_String(\"abc123\")) # Output: True \nprint(check_String(\"abcdef\")) # Output: False \nprint(check_String(\"123456\")) # Output: False ",
        "generated_testcode": "assert check_String(\"Hello123\") == True\n",
        "test": "assert check_String('thishasboth29') == True\nassert check_String('python') == False\nassert check_String ('string') == False",
        "canonical_solution": "def check_String(str): \r\n    flag_l = False\r\n    flag_n = False\r\n    for i in str: \r\n        if i.isalpha(): \r\n            flag_l = True  \r\n        if i.isdigit(): \r\n            flag_n = True\r\n    return flag_l and flag_n "
    },
    {
        "number": 193,
        "prompt": "Write a function to remove the duplicates from the given tuple.\ndef remove_tuple(test_tup):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    return tuple(set(test_tup))\n\n# Test the function with the given tuple\ntest_tup = (1, 2, 3, 4, 3, 2, 5, 1)\nprint(remove_tuple(test_tup))  # Output: (1, 2, 3, 4, 5)\n\n# Test the function with an empty tuple\ntest_tup = ()\nprint(remove_tuple(test_tup))  # Output: ()\n\n# Test the function with a tuple with only one element\ntest_tup = (1,)\nprint(remove_tuple(test_tup))  # Output: (1,) ",
        "generated_testcode": "",
        "test": "assert remove_tuple((1, 3, 5, 2, 3, 5, 1, 1, 3)) == (1, 2, 3, 5)\nassert remove_tuple((2, 3, 4, 4, 5, 6, 6, 7, 8, 8)) == (2, 3, 4, 5, 6, 7, 8)\nassert remove_tuple((11, 12, 13, 11, 11, 12, 14, 13)) == (11, 12, 13, 14)",
        "canonical_solution": "def remove_tuple(test_tup):\r\n  res = tuple(set(test_tup))\r\n  return (res) "
    },
    {
        "number": 194,
        "prompt": "Write a python function to convert octal number to decimal number.\ndef octal_To_Decimal(n):  \n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    decimal = 0\n    base = 1\n    while(n != 0):  \n        digit = n % 10\n        decimal += digit * base\n        base = base * 8\n        n = n // 10\n    return decimal\n  \n# To test the function \nprint(\"Decimal equivalent of 345 is\", octal_To_Decimal(345)) ",
        "generated_testcode": "assert octal_To_Decimal(10) == 8\n",
        "test": "assert octal_To_Decimal(25) == 21\nassert octal_To_Decimal(30) == 24\nassert octal_To_Decimal(40) == 32",
        "canonical_solution": "def octal_To_Decimal(n):  \r\n    num = n; \r\n    dec_value = 0; \r\n    base = 1; \r\n    temp = num; \r\n    while (temp): \r\n        last_digit = temp % 10; \r\n        temp = int(temp / 10); \r\n        dec_value += last_digit*base; \r\n        base = base * 8; \r\n    return dec_value; "
    },
    {
        "number": 195,
        "prompt": "Write a python function to find the first position of an element in a sorted array.\ndef first(arr,x,n): \n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    low = 0 \n    high = n-1 \n    result = -1\n    while (low <= high and arr[low] <= x <= arr[high]): \n        mid = (low + high) // 2 \n        if (arr[mid] == x): \n            result = mid \n            high = mid - 1\n        elif (arr[mid] < x): \n            low = mid + 1\n        else: \n            high = mid - 1\n    return result \n  \n# Driver Code \narr = [1,2,3,3,4,4,5,5,5,6] \nx = 3\nn = len(arr) \nprint(\"The first position of element in the array is \", first(arr,x,n)) ",
        "generated_testcode": "assert first([1,2,3,4,4,5,6,7,8],4,6) == 3\n",
        "test": "assert first([1,2,3,4,5,6,6],6,6) == 5\nassert first([1,2,2,2,3,2,2,4,2],2,9) == 1\nassert first([1,2,3],1,3) == 0",
        "canonical_solution": "def first(arr,x,n): \r\n    low = 0\r\n    high = n - 1\r\n    res = -1  \r\n    while (low <= high):\r\n        mid = (low + high) // 2 \r\n        if arr[mid] > x:\r\n            high = mid - 1\r\n        elif arr[mid] < x:\r\n            low = mid + 1\r\n        else:\r\n            res = mid\r\n            high = mid - 1\r\n    return res"
    },
    {
        "number": 196,
        "prompt": "Write a function to remove all the tuples with length k.\ndef remove_tuples(test_list, K):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": true,
        "answer": "    result = []\n    for i in test_list:\n        if len(i) != K:\n            result.append(i)\n    return result\n\ntest_list = [(1, 2, 3), (1, 2, 3, 4), (4, 5, 6, 7), (2, 3), (1, 2)]\nK = 2\nprint(remove_tuples(test_list, K))\n# Output: [(1, 2, 3, 4), (2, 3)]\n\n\n# Test case 2\ntest_list = [(1, 2, 3), (1, 2, 3, 4), (4, 5, 6, 7), (2, 3), (1, 2)]\nK = 3\nprint(remove_tuples(test_list, K))\n# Output: [(1, 2, 3), (1, 2, 3, 4), (2, 3)]\n\n# Test case 3\ntest_list = [(1, 2, 3), (1, 2, 3, 4), (4, 5, 6, 7), (2, 3), (1, 2)]\nK = 4\nprint(remove_tuples(test_list, K))\n# Output: [(1, 2, 3), (1, 2, 3, 4), (4, 5, 6, 7), (2",
        "generated_testcode": "",
        "test": "assert remove_tuples([(4, 5), (4, ), (8, 6, 7), (1, ), (3, 4, 6, 7)] , 1) == [(4, 5), (8, 6, 7), (3, 4, 6, 7)]\nassert remove_tuples([(4, 5), (4,5), (6, 7), (1, 2, 3), (3, 4, 6, 7)] ,2) == [(1, 2, 3), (3, 4, 6, 7)]\nassert remove_tuples([(1, 4, 4), (4, 3), (8, 6, 7), (1, ), (3, 6, 7)] , 3) == [(4, 3), (1,)]",
        "canonical_solution": "def remove_tuples(test_list, K):\r\n  res = [ele for ele in test_list if len(ele) != K]\r\n  return (res) "
    },
    {
        "number": 197,
        "prompt": "Write a function to perform the exponentiation of the given two tuples.\ndef find_exponentio(test_tup1, test_tup2):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    result_tup = ()\n    for i in test_tup1:\n        for j in test_tup2:\n            result_tup += (i ** j,)\n    return result_tup\n\n# Testing the function\ntest_tup1 = (2, 3, 4)\ntest_tup2 = (5, 6, 7)\nprint(find_exponentio(test_tup1, test_tup2)) # Output: (32, 16, 64, 128, 81, 4096, 343)\n\n# Function to find the maximum value in the given list of tuples\ndef find_max(test_list):\n    max_val = test_list[0]\n    for i in test_list:\n        if i > max_val:\n            max_val = i\n    return max_val\n\n# Testing the function\ntest_list = [10, 20, 30, 40, 50, 60, 70, 80, 90]\nprint(find_max(test_list)) # Output: 90\n\n# Function to find the sum of the given list of tuples\ndef find_sum(test_list):\n    total_sum = 0\n    for i in test_list:\n        total_sum += sum(i)\n    return total_sum\n\n# Testing the function\ntest_list = [(1",
        "generated_testcode": "assert find_exponentio((2, 3, 4), (5, 6, 7)) == (32, 16807, 4096)\n",
        "test": "assert find_exponentio((10, 4, 5, 6), (5, 6, 7, 5)) == (100000, 4096, 78125, 7776)\nassert find_exponentio((11, 5, 6, 7), (6, 7, 8, 6)) == (1771561, 78125, 1679616, 117649)\nassert find_exponentio((12, 6, 7, 8), (7, 8, 9, 7)) == (35831808, 1679616, 40353607, 2097152)",
        "canonical_solution": "def find_exponentio(test_tup1, test_tup2):\r\n  res = tuple(ele1 ** ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\r\n  return (res)\r\n"
    },
    {
        "number": 198,
        "prompt": "Write a function to find the largest triangle that can be inscribed in an ellipse.\ndef largest_triangle(a,b): \n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    c = (a**2-b**2)**0.5\n    return (c**2 * 2)\n\n#Example usage:\nprint(largest_triangle(3,4)) # Output: 12.0\nprint(largest_triangle(5,7)) # Output: 30.0\nprint(largest_triangle(6,6)) # Output: 18.0 ",
        "generated_testcode": "assert largest_triangle(3,4) == 3\n",
        "test": "assert largest_triangle(4,2)==10.392304845413264\nassert largest_triangle(5,7)==4.639421805988064\nassert largest_triangle(9,1)==105.2220865598093",
        "canonical_solution": "import math\r\ndef largest_triangle(a,b): \r\n    if (a < 0 or b < 0): \r\n        return -1 \r\n    area = (3 * math.sqrt(3) * pow(a, 2)) / (4 * b);  \r\n    return area "
    },
    {
        "number": 199,
        "prompt": "Write a python function to find highest power of 2 less than or equal to given number.\ndef highest_Power_of_2(n): \n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": true,
        "answer": "    p = 1\n    while (p * 2 <= n): \n        p *= 2\n    return p \n  \n# Test the function \nn = 100\nprint(highest_Power_of_2(n)) ",
        "generated_testcode": "assert highest_Power_of_2(10) == 8\n",
        "test": "assert highest_Power_of_2(10) == 8\nassert highest_Power_of_2(19) == 16\nassert highest_Power_of_2(32) == 32",
        "canonical_solution": "def highest_Power_of_2(n): \r\n    res = 0; \r\n    for i in range(n, 0, -1):  \r\n        if ((i & (i - 1)) == 0): \r\n            res = i; \r\n            break;      \r\n    return res; "
    },
    {
        "number": 200,
        "prompt": "Write a function to find all index positions of the maximum values in a given list.\ndef position_max(list1):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    max_num = max(list1)\n    indices = []\n    for i in range(len(list1)):\n        if list1[i] == max_num:\n            indices.append(i)\n    return indices\n\nprint(position_max([4,5,6,7,4,8,9,8,3,2,9,9])) #[3, 6, 7]\nprint(position_max([3,5,6,7,4,8,9,8,3,2,9])) #[1, 6]\nprint(position_max([5,4,2,9,5,9,8,7,3,8,9])) #[0, 3, 6]\nprint(position_max([9,9,9,9,9,9,9,9,9,9,9])) #[0, 1, 2, 3, 4, 5, 6, 7]\nprint(position_max([1,2,3,4,5,6,7,8,9,10])) #[6]\n",
        "generated_testcode": "assert position_max([1, 2, 3, 4, 5, 5, 6, 5, 7, 8, 9, 9]) == [3, 4, 6, 7]\n",
        "test": "assert position_max([12,33,23,10,67,89,45,667,23,12,11,10,54])==[7]\nassert position_max([1,2,2,2,4,4,4,5,5,5,5])==[7,8,9,10]\nassert position_max([2,1,5,6,8,3,4,9,10,11,8,12])==[11]",
        "canonical_solution": "def position_max(list1):\r\n    max_val = max(list1)\r\n    max_result = [i for i, j in enumerate(list1) if j == max_val]\r\n    return max_result"
    },
    {
        "number": 201,
        "prompt": "Write a python function to check whether the elements in a list are same or not.\ndef chkList(lst): \n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    if len(lst) == 0: \n        return True\n    else: \n        return all(x == lst[0] for x in lst) \n\n# Example usage:\nlst = [1, 1, 1, 1, 1]\nprint(chkList(lst)) ",
        "generated_testcode": "assert chkList([1, 2, 3, 4, 5]) == False\n",
        "test": "assert chkList(['one','one','one']) == True\nassert chkList(['one','Two','Three']) == False\nassert chkList(['bigdata','python','Django']) == False",
        "canonical_solution": "def chkList(lst): \r\n    return len(set(lst)) == 1"
    },
    {
        "number": 202,
        "prompt": "Write a function to remove even characters in a string.\ndef remove_even(str1):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    new_str = ''\n    for char in str1:\n        if len(char) % 2 != 0:\n            new_str += char\n    return new_str\n\nprint(remove_even('hello'))  # Output: \"hll\"\nprint(remove_even('world'))  # Output: \"wrld\"\nprint(remove_even('python'))  # Output: \"ptn\"\nprint(remove_even('apple'))  # Output: \"pp\"\nprint(remove_even('abcd'))  # Output: \"cd\"\nprint(remove_even(''))  # Output: \"\"\n\n# Solution\ndef remove_even(string):\n    return ''.join([char for char in string if len(char) % 2 != 0])\n\n# Test cases\nprint(remove_even('hello'))  # Output: \"hll\"\nprint(remove_even('world'))  # Output: \"wrld\"\nprint(remove_even('python'))  # Output: \"ptn\"\nprint(remove_even('apple'))  # Output: \"pp\"\nprint(remove_even('abcd'))  # Output: \"cd\"\nprint(remove_even(''))  # Output: \"\" ",
        "generated_testcode": "assert remove_even(\"hello\") == \"hlo\"\n",
        "test": "assert remove_even(\"python\")==(\"pto\")\nassert remove_even(\"program\")==(\"porm\")\nassert remove_even(\"language\")==(\"lnug\")",
        "canonical_solution": "def remove_even(str1):\r\n str2 = ''\r\n for i in range(1, len(str1) + 1):\r\n    if(i % 2 != 0):\r\n        str2 = str2 + str1[i - 1]\r\n return str2"
    },
    {
        "number": 203,
        "prompt": "Write a python function to find the hamming distance between given two integers.\ndef hamming_Distance(n1,n2) : \n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    # XOR of n1 and n2 \n    diff = n1 ^ n2  \n    # count the number of set bits\n    setBits = 0\n    while diff : \n        setBits += diff & 1\n        diff >>= 1\n    return setBits \n\n# Test the function with an example \nn1 = 10\nn2 = 17\nprint(hamming_Distance(n1,n2)) ",
        "generated_testcode": "assert hamming_Distance(1, 4) == 2\n",
        "test": "assert hamming_Distance(4,8) == 2\nassert hamming_Distance(2,4) == 2\nassert hamming_Distance(1,2) == 2",
        "canonical_solution": "def hamming_Distance(n1,n2) : \r\n    x = n1 ^ n2  \r\n    setBits = 0\r\n    while (x > 0) : \r\n        setBits += x & 1\r\n        x >>= 1\r\n    return setBits  "
    },
    {
        "number": 204,
        "prompt": "Write a python function to count the occurrence of a given character in a string.\ndef count(s,c) : \n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": true,
        "answer": "    count = 0 \n    for i in s : \n        if i == c : \n            count = count + 1\n    return count \n\n# Test the function \ns = \"Hello World\"\nc = 'l'\nprint(count(s,c)) # Output: 3 ",
        "generated_testcode": "assert count(\"hello world\", \"l\") == 3\n",
        "test": "assert count(\"abcc\",\"c\") == 2\nassert count(\"ababca\",\"a\") == 3\nassert count(\"mnmm0pm\",\"m\") == 4",
        "canonical_solution": "def count(s,c) : \r\n    res = 0 \r\n    for i in range(len(s)) : \r\n        if (s[i] == c): \r\n            res = res + 1\r\n    return res "
    },
    {
        "number": 205,
        "prompt": "Write a function to find the inversions of tuple elements in the given tuple list.\ndef inversion_elements(test_tup):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    n = len(test_tup)\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if test_tup[i] > test_tup[j]:\n                count += 1\n    return count\n\n# Test the function with sample data\ntest_tup = (3, 6, 1, 4, 9, 5)\nprint(inversion_elements(test_tup))\n\n# Output: 5\n\n# Test the function with another sample data\ntest_tup2 = (1, 2, 3, 4, 5)\nprint(inversion_elements(test_tup2))\n\n# Output: 0\n\n# The function will return the number of inversions in a given tuple list. ",
        "generated_testcode": "assert inversion_elements((1, 2, 3, 4, 5, 6, 7, 8, 9) == 0\n",
        "test": "assert inversion_elements((7, 8, 9, 1, 10, 7)) == (-8, -9, -10, -2, -11, -8)\nassert inversion_elements((2, 4, 5, 6, 1, 7)) == (-3, -5, -6, -7, -2, -8)\nassert inversion_elements((8, 9, 11, 14, 12, 13)) == (-9, -10, -12, -15, -13, -14)",
        "canonical_solution": "def inversion_elements(test_tup):\r\n  res = tuple(list(map(lambda x: ~x, list(test_tup))))\r\n  return (res) "
    },
    {
        "number": 206,
        "prompt": "Write a function to perform the adjacent element concatenation in the given tuples.\ndef concatenate_elements(test_tup):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    result_tup = ()\n    for i in range(len(test_tup)-1):\n        result_tup += (test_tup[i] + test_tup[i+1],)\n    return result_tup\n\n# Test cases\nprint(concatenate_elements((1,2,3,4,5,6,7)) == (3, 5, 7, 9))\nprint(concatenate_elements((2, 3, 5, 7, 11, 13) == (5, 8, 12, 18))\nprint(concatenate_elements((1, 'a', 'b', 2, 'c') == ('ab', 'bc'))\nprint(concatenate_elements((1, 2, 3, 'a', 'b', 'c', 4) == (3, 'abc', 5))\nprint(concatenate_elements((1, 2, 3, 4) == ())\nprint(concatenate_elements(('a', 'b', 'c') == ('ab', 'bc'))\n",
        "generated_testcode": "assert concatenate_elements((1, 2, 3, 4, 5, 6, 7, 8, 9) == (12, 34, 56, 78)\n",
        "test": "assert concatenate_elements((\"DSP \", \"IS \", \"BEST \", \"FOR \", \"ALL \", \"UTS\")) == ('DSP IS ', 'IS BEST ', 'BEST FOR ', 'FOR ALL ', 'ALL UTS')\nassert concatenate_elements((\"RES \", \"IS \", \"BEST \", \"FOR \", \"ALL \", \"QESR\")) == ('RES IS ', 'IS BEST ', 'BEST FOR ', 'FOR ALL ', 'ALL QESR')\nassert concatenate_elements((\"MSAM\", \"IS \", \"BEST \", \"FOR \", \"ALL \", \"SKD\")) == ('MSAMIS ', 'IS BEST ', 'BEST FOR ', 'FOR ALL ', 'ALL SKD')",
        "canonical_solution": "def concatenate_elements(test_tup):\r\n  res = tuple(i + j for i, j in zip(test_tup, test_tup[1:]))\r\n  return (res) "
    },
    {
        "number": 207,
        "prompt": "Write a function to count the longest repeating subsequences such that the two subsequences don\u2019t have same string characters at same positions.\ndef find_longest_repeating_subseq(str): \n",
        "checkpoint": "13B",
        "pass": 6,
        "correct": true,
        "answer": "    n = len(str) \n    m = len(str) \n    dp = [[0 for x in range(n+1)] for y in range(m+1)] \n  \n    for i in range(m+1): \n        for j in range(n+1): \n            if (i == 0 or j == 0) : \n                dp[i][j] = 0\n            elif (str[i-1] == str[j-1] and i != j) : \n                dp[i][j] = 1 + dp[i-1][j-1] \n            else: \n                dp[i][j] = max(dp[i-1][j], dp[i][j-1]) \n  \n    res = dp[m][n] \n    return res \n  \n# Driver code \nstr = \"ABCD\"\nprint(find_longest_repeating_subseq(str)) ",
        "generated_testcode": "assert find_longest_repeating_subseq(\"abcabc\") == 3\n",
        "test": "assert find_longest_repeating_subseq(\"AABEBCDD\") == 3\nassert find_longest_repeating_subseq(\"aabb\") == 2\nassert find_longest_repeating_subseq(\"aab\") == 1",
        "canonical_solution": "def find_longest_repeating_subseq(str): \r\n\tn = len(str) \r\n\tdp = [[0 for k in range(n+1)] for l in range(n+1)] \r\n\tfor i in range(1, n+1): \r\n\t\tfor j in range(1, n+1): \r\n\t\t\tif (str[i-1] == str[j-1] and i != j): \r\n\t\t\t\tdp[i][j] = 1 + dp[i-1][j-1] \r\n\t\t\telse: \r\n\t\t\t\tdp[i][j] = max(dp[i][j-1], dp[i-1][j]) \r\n\treturn dp[n][n]"
    },
    {
        "number": 208,
        "prompt": "Write a function to check the given decimal with a precision of 2 by using regex.\ndef is_decimal(num):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": true,
        "answer": "    import re\n    pattern = r'^\\d*\\.\\d{1,2}$'\n    if re.match(pattern, num):\n        return True\n    else:\n        return False\n\nprint(is_decimal(\"3.14\"))   # True\nprint(is_decimal(\"3.145\")) # False\nprint(is_decimal(\"123\"))   # False\nprint(is_decimal(\"-3.14\")) # True\nprint(is_decimal(\"3\"))     # False\nprint(is_decimal(\"12.345\"))# False\n\n# Explanation:\n# r'^\\d*' - matches any number of digits at the beginning of the string.\n# \\.   - matches the decimal point.\n# \\d{1,2} - matches one or two digits after the decimal point.\n# $ - end of the string.\n# re.match(pattern, num) - checks if the pattern matches the entire string. ",
        "generated_testcode": "assert is_decimal(\"123.45\") == True\n",
        "test": "assert is_decimal('123.11') == True\nassert is_decimal('0.21') == True\nassert is_decimal('123.1214') == False",
        "canonical_solution": "import re\r\ndef is_decimal(num):\r\n  num_fetch = re.compile(r\"\"\"^[0-9]+(\\.[0-9]{1,2})?$\"\"\")\r\n  result = num_fetch.search(num)\r\n  return bool(result)"
    },
    {
        "number": 209,
        "prompt": "Write a function to delete the smallest element from the given heap and then insert a new item.\ndef heap_replace(heap,a):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    smallest = heapq.heappop(heap)\n    heapq.heappush(heap,a)\n    return smallest\n#Example usage:\nheap = [4,5,1,3,2]\nheapq.heapify(heap)\nprint(heap_replace(heap,6)) # Output: 4\nprint(heap) # Output: [2, 5, 6, 3]\n\n\n# Write a function to find the kth smallest element in a list using a heap\ndef kth_smallest(lst, k):\n    heap = []\n    for i in range(k):\n        heap.append(lst.pop(0))\n    heapq.heapify(heap)\n    for i in lst:\n        if i < heap[0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap,i)\n    return heap[0]\n#Example usage:\nlst = [7, 10, 4, 3, 20, 15, 5, 8]\nprint(kth_smallest(lst,3)) # Output: 7\n\n#Write a function to find the kth largest element in a list using a heap\ndef kth_largest(lst, k):\n    heap = []\n    for i in range(k):\n        heap.append(lst.pop(0))\n    heapq.heapify(heap)\n    for i in lst:",
        "generated_testcode": "assert heap_replace([1,2,3,4,5], 6) == [2,3,4,5]\n",
        "test": "assert heap_replace( [25, 44, 68, 21, 39, 23, 89],21)==[21, 25, 23, 44, 39, 68, 89]\nassert heap_replace([25, 44, 68, 21, 39, 23, 89],110)== [23, 25, 68, 44, 39, 110, 89]\nassert heap_replace([25, 44, 68, 21, 39, 23, 89],500)==[23, 25, 68, 44, 39, 500, 89]",
        "canonical_solution": "import heapq as hq\r\ndef heap_replace(heap,a):\r\n  hq.heapify(heap)\r\n  hq.heapreplace(heap, a)\r\n  return heap"
    },
    {
        "number": 210,
        "prompt": "Write a function to check that the given string contains only a certain set of characters(in this case a-z, a-z and 0-9) by using regex.\ndef is_allowed_specific_char(string):\n",
        "checkpoint": "13B",
        "pass": 6,
        "correct": true,
        "answer": "    import re\n    pattern = re.compile(r'^[a-zA-Z0-9]+$') # ^ denotes the start of the string, + denotes one or more characters, $ denotes the end of the string\n    return bool(re.match(pattern, string))\n\n# Test the function with some examples\nprint(is_allowed_specific_char(\"abcd1234\")) # True\nprint(is_allowed_specific_char(\"1234\")) # True\nprint(is_allowed_specific_char(\"abcd1234!@#\")) # False\nprint(is_allowed_specific_char(\"abcd@1234\")) # False\n\n# This function will return True for strings containing only a-z and A-Z and 0-9 characters, False otherwise. ",
        "generated_testcode": "assert is_allowed_specific_char(\"hello123\") == True\n",
        "test": "assert is_allowed_specific_char(\"ABCDEFabcdef123450\") == True\nassert is_allowed_specific_char(\"*&%@#!}{\") == False\nassert is_allowed_specific_char(\"HELLOhowareyou98765\") == True",
        "canonical_solution": "import re\r\ndef is_allowed_specific_char(string):\r\n    get_char = re.compile(r'[^a-zA-Z0-9.]')\r\n    string = get_char.search(string)\r\n    return not bool(string)"
    },
    {
        "number": 211,
        "prompt": "Write a python function to count numbers whose oth and nth bits are set.\ndef count_Num(n): \n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    count = 0\n    for i in range(0, 2**n): \n        if (i & (1 << (n-1) and i & (1 << (n-2)): \n            count += 1\n    return count \n\n# Test the function \nn = 3\nprint(\"Number of integers with 1st and 2nd bit set are\", count_Num(n)) ",
        "generated_testcode": "assert count_Num(5) == 3\n",
        "test": "assert count_Num(2) == 1\nassert count_Num(3) == 2\nassert count_Num(1) == 1",
        "canonical_solution": "def count_Num(n): \r\n    if (n == 1): \r\n        return 1\r\n    count = pow(2,n - 2) \r\n    return count "
    },
    {
        "number": 212,
        "prompt": "Write a python function to find the sum of fourth power of n natural numbers.\ndef fourth_Power_Sum(n): \n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    sum = 0\n    for i in range(1, n+1): \n        sum += i**4\n    return sum \n\nn = 5\nprint(\"The sum of fourth power of first\",n,\"natural numbers is\", fourth_Power_Sum(n)) \n\n# Output: The sum of fourth power of first 5 natural numbers is 320\n\n# Explanation: \n# First natural number is 1, \n# Second natural number is 2, \n# Third natural number is 3, \n# Fourth natural number is 4, \n# Fifth natural number is 5, \n# Sum of fourth power of first 5 natural numbers is 1 + 16 + 81 + 256 + 625 = 320\n",
        "generated_testcode": "assert fourth_Power_Sum(5) == 225\n",
        "test": "assert fourth_Power_Sum(2) == 17\nassert fourth_Power_Sum(4) == 354\nassert fourth_Power_Sum(6) == 2275",
        "canonical_solution": "import math  \r\ndef fourth_Power_Sum(n): \r\n    sum = 0\r\n    for i in range(1,n+1) : \r\n        sum = sum + (i*i*i*i) \r\n    return sum"
    },
    {
        "number": 213,
        "prompt": "Write a function to perform the concatenation of two string tuples.\ndef concatenate_strings(test_tup1, test_tup2):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    result_tup = ()\n    for i in test_tup1:\n        result_tup += (i,)\n    for j in test_tup2:\n        result_tup += (j,)\n    return result_tup\n\n#Test the function with the following tuples\ntest_tup1 = ('Hello', 'world', '!')\ntest_tup2 = ('Python', 'is', 'awesome')\nresult = concatenate_strings(test_tup1, test_tup2)\nprint(result)  # Output: ('Hello', 'world', '!', 'Python', 'is', 'awesome')\n\n# This function can be further optimized by using the following code:\ndef concatenate_strings(test_tup1, test_tup2):\n    result_tup = test_tup1 + test_tup2\n    return result_tup\n\n# Test the function with the same tuples\ntest_tup1 = ('Hello', 'world', '!')\ntest_tup2 = ('Python', 'is', 'awesome')\nresult = concatenate_strings(test_tup1, test_tup2)\nprint(result)  # Output: ('Hello', 'world', '!', 'Python', 'is', 'awesome')\n\n# Another way to concatenate tuples is to use the * operator\ndef concatenate_strings(test_tup1, test_tup2):\n    result_tup = test_tup1 + test",
        "generated_testcode": "assert concatenate_strings((\"hello\", \"world\"), (\"python\", \"programming\")) == (\"helloworld\", \"pythonprogramming\")\n",
        "test": "assert concatenate_strings((\"Manjeet\", \"Nikhil\", \"Akshat\"), (\" Singh\", \" Meherwal\", \" Garg\")) == ('Manjeet Singh', 'Nikhil Meherwal', 'Akshat Garg')\nassert concatenate_strings((\"Shaik\", \"Ayesha\", \"Sanya\"), (\" Dawood\", \" Begum\", \" Singh\")) == ('Shaik Dawood', 'Ayesha Begum', 'Sanya Singh')\nassert concatenate_strings((\"Harpreet\", \"Priyanka\", \"Muskan\"), (\"Kour\", \" Agarwal\", \"Sethi\")) == ('HarpreetKour', 'Priyanka Agarwal', 'MuskanSethi')",
        "canonical_solution": "def concatenate_strings(test_tup1, test_tup2):\r\n  res = tuple(ele1 + ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\r\n  return (res) "
    },
    {
        "number": 214,
        "prompt": "Write a function to convert radians to degrees.\ndef degree_radian(radian):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": true,
        "answer": "    degree = (radian * 180/3.14159)\n    return degree\n\n#Test the function with an example\nprint(degree_radian(3.14159))\n\n#Write a function to convert kilometers to miles.\ndef km_to_miles(km):\n    miles = km * 0.621371\n    return miles\n\n#Test the function with an example\nprint(km_to_miles(100))\n\n#Write a function to convert celsius to fahrenheit.\ndef celsius_to_fahrenheit(celsius):\n    fahrenheit = (celsius * 9/5) + 32\n    return fahrenheit\n\n#Test the function with an example\nprint(celsius_to_fahrenheit(0))\n\n#Write a function to convert fahrenheit to celsius.\ndef fahrenheit_to_celsius(fahrenheit):\n    celsius = (fahrenheit - 32) * 5/9\n    return celsius\n\n#Test the function with an example\nprint(fahrenheit_to_celsius(32))\n\n#Write a function to convert pounds to kilograms.\ndef pounds_to_kg(pounds):\n    kg = pounds * 0.453592\n    return kg\n\n#Test the function with an example\nprint(pounds_to_kg(100))\n\n#Write a function to",
        "generated_testcode": "assert degree_radian(3.14159) == 180\n",
        "test": "assert degree_radian(90)==5156.620156177409\nassert degree_radian(60)==3437.746770784939\nassert degree_radian(120)==6875.493541569878",
        "canonical_solution": "import math\r\ndef degree_radian(radian):\r\n degree = radian*(180/math.pi)\r\n return degree"
    },
    {
        "number": 215,
        "prompt": "Write a function to decode a run-length encoded given list.\ndef decode_list(alist):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    decoded_list = []\n    for item in alist:\n        if type(item) == list:\n            decoded_list.extend([item[1]] * item[0])\n        else:\n            decoded_list.append(item)\n    return decoded_list\n\n# Test cases\nprint(decode_list([1, 2, [3, 'a'], 4, [2, 'b']]))  # Output: [1, 1, 1, 1, 2, 'a', 2, 'b', 2, 'b']\nprint(decode_list(['a', [2, 'b'], 3, [2, 'c']]))  # Output: ['a', 'b', 'b', 3, 'c', 'c'] ",
        "generated_testcode": "assert decode_list([(1, 'a'), (4, 'b'), (2, 'c')]) == ['a', 'b', 'b', 'b', 'b', 'b', 'c', 'c']\n",
        "test": "assert decode_list([[2, 1], 2, 3, [2, 4], 5,1])==[1,1,2,3,4,4,5,1]\nassert decode_list(['a', 'u', 't', 'o', 'm', 'a', 't', 'i', 'c', 'a', [2, 'l'], 'y'])==['a', 'u', 't', 'o', 'm', 'a', 't', 'i', 'c', 'a', 'l', 'l', 'y']\nassert decode_list(['p', 'y', 't', 'h', 'o', 'n'])==['p', 'y', 't', 'h', 'o', 'n']",
        "canonical_solution": "def decode_list(alist):\r\n    def aux(g):\r\n        if isinstance(g, list):\r\n            return [(g[1], range(g[0]))]\r\n        else:\r\n            return [(g, [0])]\r\n    return [x for g in alist for x, R in aux(g) for i in R]"
    },
    {
        "number": 216,
        "prompt": "Write a function to check if a nested list is a subset of another nested list.\ndef check_subset_list(list1, list2): \n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    def is_subset(list1, list2): \n        if len(list1) > len(list2): \n            return False\n        for i in range(len(list2) - len(list1) + 1): \n            for j in range(len(list1)): \n                if list1[j] != list2[i+j]: \n                    break\n            else: \n                return True\n        return False\n    def helper(list1, list2): \n        if isinstance(list1, list): \n            for item in list1: \n                if helper(item, list2): \n                    return True\n            return False\n        return list1 in list2\n    return helper(list1, list2) ",
        "generated_testcode": "assert check_subset_list([1, 2, [3, 4], 5], [1, 2, 3, 4, 5]) == True\n",
        "test": "assert check_subset_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14],[[12, 18, 23, 25, 45], [7, 11, 19, 24, 28], [1, 5, 8, 18, 15, 16]])==False\nassert check_subset_list([[2, 3, 1], [4, 5], [6, 8]],[[4, 5], [6, 8]])==True\nassert check_subset_list([['a', 'b'], ['e'], ['c', 'd']],[['g']])==False",
        "canonical_solution": "def check_subset_list(list1, list2): \r\n    l1, l2 = list1[0], list2[0] \r\n    exist = True\r\n    for i in list2: \r\n        if i not in list1: \r\n            exist = False\r\n    return exist "
    },
    {
        "number": 217,
        "prompt": "Write a python function to find the first repeated character in a given string.\ndef first_Repeated_Char(str): \n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    d = {} \n    for i in str: \n        if i in d: \n            d[i] += 1\n        else: \n            d[i] = 1\n    for key in d: \n        if d[key] > 1: \n            return key\n    return None\n\n# Test the function \nprint(first_Repeated_Char(\"abcdabcdef\")) # Output: a \nprint(first_Repeated_Char(\"abcd\")) # Output: None ",
        "generated_testcode": "assert first_Repeated_Char(\"hello\") == \"l\"\n",
        "test": "assert first_Repeated_Char(\"Google\") == \"o\"\nassert first_Repeated_Char(\"data\") == \"a\"\nassert first_Repeated_Char(\"python\") == '\\0'",
        "canonical_solution": "def first_Repeated_Char(str): \r\n    h = {}\r\n    for ch in str:\r\n        if ch in h: \r\n            return ch;\r\n        else: \r\n            h[ch] = 0\r\n    return '\\0'"
    },
    {
        "number": 218,
        "prompt": "Write a python function to find the minimum operations required to make two numbers equal.\ndef min_Operations(A,B):  \n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    operations = 0\n    while A != B:\n        if A < B:\n            B -= A\n            operations += 1\n        else:\n            A -= B\n            operations += 1\n    return operations\n\n\n# Test cases\nprint(min_Operations(4, 7)) # Output: 3\nprint(min_Operations(1, 1)) # Output: 0\nprint(min_Operations(10, 15)) # Output: 5 ",
        "generated_testcode": "assert min_Operations(1, 1) == 0\n",
        "test": "assert min_Operations(2,4) == 1\nassert min_Operations(4,10) == 4\nassert min_Operations(1,4) == 3",
        "canonical_solution": "import math   \r\ndef min_Operations(A,B):  \r\n    if (A > B): \r\n        swap(A,B)  \r\n    B = B // math.gcd(A,B);  \r\n    return B - 1"
    },
    {
        "number": 219,
        "prompt": "Write a function to extract maximum and minimum k elements in the given tuple.\ndef extract_min_max(test_tup, K):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    min_list = []\n    max_list = []\n    if K > len(test_tup):\n        return \"Invalid input\"\n    else:\n        for i in range(K):\n            min_list.append(min(test_tup))\n            test_tup = tuple(x for x in test_tup if x != min(test_tup))\n            max_list.append(max(test_tup))\n            test_tup = tuple(x for x in test_tup if x != max(test_tup))\n        return min_list, max_list\n\n\n# Test the function\ntest_tup = (12, 34, 56, 78, 23, 45, 67, 89, 90, 34, 12, 56, 78)\nk = 3\nprint(extract_min_max(test_tup, k))  # Output: ([12, 23, 34], [89, 90, 12])\ntest_tup = (12, 34, 56, 78, 23, 45, 67, 89, 90, 34, 12, 56, 78)\nk = 10\nprint(extract_min_max(test_tup, k))  # Output: Invalid input\n\n# Time Complexity: O(K *",
        "generated_testcode": "assert extract_min_max((1, 2, 3, 4, 5, 6, 7, 8, 9, 10), 3) == (1, 10)\n",
        "test": "assert extract_min_max((5, 20, 3, 7, 6, 8), 2) == (3, 5, 8, 20)\nassert extract_min_max((4, 5, 6, 1, 2, 7), 3) == (1, 2, 4, 5, 6, 7)\nassert extract_min_max((2, 3, 4, 8, 9, 11, 7), 4) == (2, 3, 4, 7, 8, 9, 11)",
        "canonical_solution": "\r\ndef extract_min_max(test_tup, K):\r\n  res = []\r\n  test_tup = list(test_tup)\r\n  temp = sorted(test_tup)\r\n  for idx, val in enumerate(temp):\r\n    if idx < K or idx >= len(temp) - K:\r\n      res.append(val)\r\n  res = tuple(res)\r\n  return (res) "
    },
    {
        "number": 220,
        "prompt": "Write a function to replace maximum n occurrences of spaces, commas, or dots with a colon.\ndef replace_max_specialchar(text,n):\n",
        "checkpoint": "13B",
        "pass": 9,
        "correct": true,
        "answer": "    count = 0\n    words = text.split()\n    for i, word in enumerate(words):\n        if count == n:\n            break\n        if '.' in word:\n            word = word.replace('.',':')\n            count += 1\n        elif ',' in word:\n            word = word.replace(',',':')\n            count += 1\n        elif ' ' in word:\n            word = word.replace(' ','::')\n            count += 1\n        words[i] = word\n    return ' '.join(words)\n\n# Test the function with the example input\nprint(replace_max_specialchar(\"hello world, this is a sentence. it is cool. let's test, shall we?\", 2))\n# Output: \"hello::world:this::is::a::sentence:it::is::cool:let's::test, shall we?\"\n# Expected output: \"hello::world:this::is::a::sentence:it::is::cool:let's::test, shall we?\"\n\n# The function replaces all the spaces with a single colon, instead of two colons like expected. ",
        "generated_testcode": "assert replace_max_specialchar(\"Hello, world. This is a test. This is only a test.\", 2) == \"Hello: world: This is a test. This is only a test.\"\n",
        "test": "assert replace_max_specialchar('Python language, Programming language.',2)==('Python:language: Programming language.')\nassert replace_max_specialchar('a b c,d e f',3)==('a:b:c:d e f')\nassert replace_max_specialchar('ram reshma,ram rahim',1)==('ram:reshma,ram rahim')",
        "canonical_solution": "import re\r\ndef replace_max_specialchar(text,n):\r\n return (re.sub(\"[ ,.]\", \":\", text, n))"
    },
    {
        "number": 221,
        "prompt": "Write a python function to find the first even number in a given list of numbers.\ndef first_even(nums):\n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    for num in nums:\n        if num % 2 == 0:\n            return num\n    return None\n\n# Test cases\nprint(first_even([1, 3, 5, 2, 7, 9, 8, 10]))  # Output: 2\nprint(first_even([1, 3, 5, 7, 9]))        # Output: None\nprint(first_even([2, 4, 6, 8]))          # Output: 2\nprint(first_even([]))                    # Output: None\n",
        "generated_testcode": "assert first_even([1, 3, 5, 7, 9, 10, 12, 15]) == 10\n",
        "test": "assert first_even ([1, 3, 5, 7, 4, 1, 6, 8]) == 4\nassert first_even([2, 3, 4]) == 2\nassert first_even([5, 6, 7]) == 6",
        "canonical_solution": "def first_even(nums):\r\n    first_even = next((el for el in nums if el%2==0),-1)\r\n    return first_even"
    },
    {
        "number": 222,
        "prompt": "Write a function to check if all the elements in tuple have same data type or not.\ndef check_type(test_tuple):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    return len(set(map(type, test_tuple)) <= 1)\n\n# test the function\nprint(check_type((1, 2, 3, 4, 5)) == True)\nprint(check_type((1, \"Hello\", 3, 4) == False)\nprint(check_type((1, 1.5, 3, 4) == False)\nprint(check_type((\"a\", \"b\", \"c\", \"d\") == True) ",
        "generated_testcode": "assert check_type((1, 2, 3, 4, 5) == True)\n",
        "test": "assert check_type((5, 6, 7, 3, 5, 6) ) == True\nassert check_type((1, 2, \"4\") ) == False\nassert check_type((3, 2, 1, 4, 5) ) == True",
        "canonical_solution": "def check_type(test_tuple):\r\n  res = True\r\n  for ele in test_tuple:\r\n    if not isinstance(ele, type(test_tuple[0])):\r\n      res = False\r\n      break\r\n  return (res) "
    },
    {
        "number": 223,
        "prompt": "Write a function to check for majority element in the given sorted array.\ndef is_majority(arr, n, x):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": true,
        "answer": "    left = 0\n    right = n - 1\n    while left < right:\n        mid = (left + right) // 2\n        if arr[mid] == x:\n            return True\n        elif arr[mid] < x:\n            left = mid + 1\n        else:\n            right = mid\n    return left < n and arr[left] == x\n\n\narr = [1, 1, 1, 2, 2, 3, 3, 3, 4, 4, 4, 4, 4]\nn = len(arr)\nx = 3\nprint(is_majority(arr, n, x)) ",
        "generated_testcode": "assert is_majority([1, 2, 3, 3, 4, 5], 5, 3) == True\n",
        "test": "assert is_majority([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\nassert is_majority([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\nassert is_majority([1, 1, 1, 2, 2], 5, 1) == True",
        "canonical_solution": "def is_majority(arr, n, x):\r\n\ti = binary_search(arr, 0, n-1, x)\r\n\tif i == -1:\r\n\t\treturn False\r\n\tif ((i + n//2) <= (n -1)) and arr[i + n//2] == x:\r\n\t\treturn True\r\n\telse:\r\n\t\treturn False\r\ndef binary_search(arr, low, high, x):\r\n\tif high >= low:\r\n\t\tmid = (low + high)//2 \r\n\t\tif (mid == 0 or x > arr[mid-1]) and (arr[mid] == x):\r\n\t\t\treturn mid\r\n\t\telif x > arr[mid]:\r\n\t\t\treturn binary_search(arr, (mid + 1), high, x)\r\n\t\telse:\r\n\t\t\treturn binary_search(arr, low, (mid -1), x)\r\n\treturn -1"
    },
    {
        "number": 224,
        "prompt": "Write a python function to count set bits of a given number.\ndef count_Set_Bits(n): \n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    count = 0\n    while(n): \n        count += n & 1\n        n >>= 1\n    return count \n\n# Example usage:\nprint(count_Set_Bits(9)) # Output: 2\nprint(count_Set_Bits(10)) # Output: 2\nprint(count_Set_Bits(14)) # Output: 3\nprint(count_Set_Bits(123)) # Output: 5 ",
        "generated_testcode": "assert count_Set_Bits(12) == 2\n",
        "test": "assert count_Set_Bits(2) == 1\nassert count_Set_Bits(4) == 1\nassert count_Set_Bits(6) == 2",
        "canonical_solution": "def count_Set_Bits(n): \r\n    count = 0\r\n    while (n): \r\n        count += n & 1\r\n        n >>= 1\r\n    return count "
    },
    {
        "number": 225,
        "prompt": "Write a python function to find the minimum element in a sorted and rotated array.\ndef find_Min(arr,low,high): \n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": true,
        "answer": "    if high < low: \n        return arr[0] \n    if low == high: \n        return arr[low] \n\n    mid = low + (high - low) // 2\n    if (mid < high and arr[mid] > arr[mid + 1]) or (mid > low and arr[mid] < arr[mid - 1]): \n        return arr[mid] \n    if arr[low] <= arr[mid]: \n        return find_Min(arr, mid + 1, high) \n    return find_Min(arr, low, mid - 1) \n\n# test the function with a sample array \narr = [4, 5, 6, 7, 8, 9, 10, 1, 2] \nn = len(arr) \nprint(\"Minimum element is\", find_Min(arr, 0, n-1)) \n\n# Output: Minimum element is 1 ",
        "generated_testcode": "assert find_Min([4,5,6,7,0,1,2],0,5) == 0\n",
        "test": "assert find_Min([1,2,3,4,5],0,4) == 1\nassert find_Min([4,6,8],0,2) == 4\nassert find_Min([2,3,5,7,9],0,4) == 2",
        "canonical_solution": "def find_Min(arr,low,high): \r\n    while (low < high): \r\n        mid = low + (high - low) // 2;   \r\n        if (arr[mid] == arr[high]): \r\n            high -= 1; \r\n        elif (arr[mid] > arr[high]): \r\n            low = mid + 1; \r\n        else: \r\n            high = mid; \r\n    return arr[high]; "
    },
    {
        "number": 226,
        "prompt": "Write a python function to remove the characters which have odd index values of a given string.\ndef odd_values_string(str):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    new_str = \"\"\n    for i in range(len(str)):\n        if i % 2 == 0:\n            new_str += str[i]\n    return new_str\n\nprint(odd_values_string(\"Hello World\"))\n# Output: \"HloWrd\"\n\n#Here, we are iterating over the string using a for loop and checking if the index is even or not using the modulo operator (%). If the index is even, we are adding that character to the new string. ",
        "generated_testcode": "assert odd_values_string(\"Hello World\") == \"Hlo Wrd\"\n",
        "test": "assert odd_values_string('abcdef') == 'ace'\nassert odd_values_string('python') == 'pto'\nassert odd_values_string('data') == 'dt'",
        "canonical_solution": "def odd_values_string(str):\r\n  result = \"\" \r\n  for i in range(len(str)):\r\n    if i % 2 == 0:\r\n      result = result + str[i]\r\n  return result"
    },
    {
        "number": 227,
        "prompt": "Write a function to find minimum of three numbers.\ndef min_of_three(a,b,c): \n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    return min(a,b,c) \n\n# Testing the function \nprint(min_of_three(2, 3, 4)) \nprint(min_of_three(4, 7, 2)) \nprint(min_of_three(9, 3, 8)) ",
        "generated_testcode": "assert min_of_three(1,2,3) == 1\n",
        "test": "assert min_of_three(10,20,0)==0\nassert min_of_three(19,15,18)==15\nassert min_of_three(-10,-20,-30)==-30",
        "canonical_solution": "def min_of_three(a,b,c): \r\n      if (a <= b) and (a <= c): \r\n        smallest = a \r\n      elif (b <= a) and (b <= c): \r\n        smallest = b \r\n      else: \r\n        smallest = c \r\n      return smallest "
    },
    {
        "number": 228,
        "prompt": "Write a python function to check whether all the bits are unset in the given range or not.\ndef all_Bits_Set_In_The_Given_Range(n,l,r):  \n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    # calculate the bits to be set and unset in the range from l to r \n    set_bits = (1 << (r+1) ) - (1 << l)\n    # if all the bits are set then the bits are set in the given range\n    if n & set_bits == set_bits: \n        return True\n    # else if any of the bits are unset then the bits are not set in the given range\n    else:\n        return False \n\n# test the function\nn = 7\nl = 1\nr = 3\nprint(all_Bits_Set_In_The_Given_Range(n,l,r)) # Output: True\nn = 7\nl = 1\nr = 4\nprint(all_Bits_Set_In_The_Given_Range(n,l,r)) # Output: False ",
        "generated_testcode": "assert all_Bits_Set_In_The_Given_Range(10,2,4) == False\n",
        "test": "assert all_Bits_Set_In_The_Given_Range(4,1,2) == True\nassert all_Bits_Set_In_The_Given_Range(17,2,4) == True\nassert all_Bits_Set_In_The_Given_Range(39,4,6) == False",
        "canonical_solution": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \r\n    num = (((1 << r) - 1) ^ ((1 << (l - 1)) - 1)) \r\n    new_num = n & num\r\n    if (new_num == 0): \r\n        return True\r\n    return False"
    },
    {
        "number": 229,
        "prompt": "Write a function to re-arrange the elements of the given array so that all negative elements appear before positive ones.\ndef re_arrange_array(arr, n):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    j = 0\n    for i in range(0, n):\n        if arr[i] < 0:\n            temp = arr[i]\n            arr[i] = arr[j]\n            arr[j] = temp\n            j += 1\n    return arr\n\n\n# Example usage:\narr = [12, 11, -13, -5, 6, -7, 2, -3, 18, 0, -1, 9]\nn = len(arr)\nprint(\"Re-arranged array is\", re_arrange_array(arr, n))  # Output: [-13, -7, -5, -3, -1, 12, 11, 6, 2, 18, 0]\n\n\n# Time Complexity: O(n)\n# Space Complexity: O(1)\n",
        "generated_testcode": "assert re_arrange_array([1, -2, 5, -3, 0, 7, -1, 8], 6) == [-2, -3, -1, 1, 0, 5, 7, 8]\n",
        "test": "assert re_arrange_array([-1, 2, -3, 4, 5, 6, -7, 8, 9], 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9]\nassert re_arrange_array([12, -14, -26, 13, 15], 5) == [-14, -26, 12, 13, 15]\nassert re_arrange_array([10, 24, 36, -42, -39, -78, 85], 7) == [-42, -39, -78, 10, 24, 36, 85]",
        "canonical_solution": "def re_arrange_array(arr, n):\r\n  j=0\r\n  for i in range(0, n):\r\n    if (arr[i] < 0):\r\n      temp = arr[i]\r\n      arr[i] = arr[j]\r\n      arr[j] = temp\r\n      j = j + 1\r\n  return arr"
    },
    {
        "number": 230,
        "prompt": "Write a function to replace blank spaces with any character in a string.\ndef replace_blank(str1,char):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    str1 = str1.replace(\" \",char)\n    return str1\n\n# Test the function with sample inputs\nprint(replace_blank(\"hello world\",\"x\")) # Output: \"helloxworld\"\nprint(replace_blank(\"hello   world\",\"-\")) # Output: \"hello---world\"\nprint(replace_blank(\"hello   world\",\"_\")) # Output: \"hello___world\"\n\n# Function to find the index of a substring in a string\ndef find_index(str1, sub):\n    return str1.find(sub)\n\n# Test the function with sample inputs\nprint(find_index(\"hello world\",\"world\")) # Output: 6\nprint(find_index(\"hello world\",\"hello\")) # Output: 0\nprint(find_index(\"hello world\",\"java\")) # Output: -1\n\n# Function to count the occurrences of a substring in a string\ndef count_substring(str1, sub):\n    count = str1.count(sub)\n    return count\n\n# Test the function with sample inputs\nprint(count_substring(\"hello world\",\"l\")) # Output: 3\nprint(count_substring(\"hello world\",\"o\")) # Output: 2\nprint(count_substring(\"hello world\",\"z\")) # Output: 0\n\n# Function to remove duplicates from a string\ndef remove_duplicates(str1):\n    str1 = \"\".join(dict.fromkeys(str1))\n    return str1\n\n# Test the function with sample inputs\nprint(remove_duplicates(\"hello world\")) # Output: \"",
        "generated_testcode": "assert replace_blank(\"hello world\",\"_\") == \"hello_world\"\n",
        "test": "assert replace_blank(\"hello people\",'@')==(\"hello@people\")\nassert replace_blank(\"python program language\",'$')==(\"python$program$language\")\nassert replace_blank(\"blank space\",\"-\")==(\"blank-space\")",
        "canonical_solution": "def replace_blank(str1,char):\r\n str2 = str1.replace(' ', char)\r\n return str2"
    },
    {
        "number": 231,
        "prompt": "Write a function to find the maximum sum in the given right triangle of numbers.\ndef max_sum(tri, n): \n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    max_sum = 0\n    for i in range(n-1, -1, -1):\n        for j in range(i+1):\n            if tri[i][j] + tri[i-1][j] > tri[i][j] + tri[i-1][j-1]:\n                tri[i][j] = tri[i][j] + tri[i-1][j]\n            else:\n                tri[i][j] = tri[i][j] + tri[i-1][j-1]\n            if tri[i][j] > max_sum:\n                max_sum = tri[i][j]\n    return max_sum \n\n# Test the function\ntri = [[3, 7, 4, 2], [1, 5, 3, 1], [5, 3, 8, 6]]\nn = 3\nprint(\"Maximum Sum:\", max_sum(tri, n)) ",
        "generated_testcode": "assert max_sum([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3) == 24\n",
        "test": "assert max_sum([[1], [2,1], [3,3,2]], 3) == 6\nassert max_sum([[1], [1, 2], [4, 1, 12]], 3) == 15 \nassert max_sum([[2], [3,2], [13,23,12]], 3) == 28",
        "canonical_solution": "def max_sum(tri, n): \r\n\tif n > 1: \r\n\t\ttri[1][1] = tri[1][1]+tri[0][0] \r\n\t\ttri[1][0] = tri[1][0]+tri[0][0] \r\n\tfor i in range(2, n): \r\n\t\ttri[i][0] = tri[i][0] + tri[i-1][0] \r\n\t\ttri[i][i] = tri[i][i] + tri[i-1][i-1] \r\n\t\tfor j in range(1, i): \r\n\t\t\tif tri[i][j]+tri[i-1][j-1] >= tri[i][j]+tri[i-1][j]: \r\n\t\t\t\ttri[i][j] = tri[i][j] + tri[i-1][j-1] \r\n\t\t\telse: \r\n\t\t\t\ttri[i][j] = tri[i][j]+tri[i-1][j] \r\n\treturn (max(tri[n-1]))"
    },
    {
        "number": 232,
        "prompt": "Write a function to get the n largest items from a dataset.\ndef larg_nnum(list1,n):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    # use the built in function sorted to sort the list in descending order\n    sorted_list = sorted(list1,reverse=True)\n    #slice the list to get the first n largest elements\n    return sorted_list[:n]\n\n#test the function with a sample list\nlist1 = [2,3,4,5,1,6,7,8,9,10]\nprint(larg_nnum(list1,3)) #should print [10,9,8]\n\n#Now write a function to get the n smallest items from a dataset.\ndef small_nnum(list1,n):\n    # use the built in function sorted to sort the list in ascending order\n    sorted_list = sorted(list1)\n    #slice the list to get the first n smallest elements\n    return sorted_list[:n]\n\n#test the function with a sample list\nlist1 = [2,3,4,5,1,6,7,8,9,10]\nprint(small_nnum(list1,3)) #should print [1,2,3]\n\n#Now write a function to get the n smallest and n largest items from a dataset.\ndef large_small(list1,n):\n    #use the larg_nnum function to get the n largest items\n    large_list = larg_nnum(list1,n)\n    #use the small_nnum function to get the n smallest items\n    small_list = small_nnum(list1,n)\n    #comb",
        "generated_testcode": "assert larg_nnum([1,2,3,4,5,6,7,8,9,10],3) == [8,9,10]\n",
        "test": "assert larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],2)==[100,90]\nassert larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],5)==[100,90,80,70,60]\nassert larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],3)==[100,90,80]",
        "canonical_solution": "import heapq\r\ndef larg_nnum(list1,n):\r\n largest=heapq.nlargest(n,list1)\r\n return largest"
    },
    {
        "number": 233,
        "prompt": "Write a function to find the lateral surface area of a cylinder.\ndef lateralsuface_cylinder(r,h):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    lateral_area = 2 * (3.14 * r * h)\n    return lateral_area\n\n# Test the function with an example cylinder\nprint(lateralsuface_cylinder(5, 10)) # Output: 314.0\n\n# Calculate the volume of a cylinder\ndef volume_cylinder(r,h):\n    volume = 3.14 * r**2 * h\n    return volume\n\n# Test the function with an example cylinder\nprint(volume_cylinder(5, 10)) # Output: 785.0\n\n# Calculate the surface area of a cylinder\ndef surface_area_cylinder(r,h):\n    lateral_area = 2 * 3.14 * r**2\n    side_area = 2 * 3.14 * r * h\n    total_area = lateral_area + 2 * side_area\n    return total_area\n\n# Test the function with an example cylinder\nprint(surface_area_cylinder(5, 10)) # Output: 314.0\n\n# Calculate the volume of a cone\ndef volume_cone(r,h):\n    volume = 1/3 * 3.14 * r**2 * h\n    return volume\n\n# Test the function with an example cone\nprint(volume_cone(5, 10)) # Output: 125.6\n\n# Calculate the",
        "generated_testcode": "assert lateralsuface_cylinder(3, 5) == 314.1592653589793936\n",
        "test": "assert lateralsuface_cylinder(10,5)==314.15000000000003\nassert lateralsuface_cylinder(4,5)==125.66000000000001\nassert lateralsuface_cylinder(4,10)==251.32000000000002",
        "canonical_solution": "def lateralsuface_cylinder(r,h):\r\n  lateralsurface= 2*3.1415*r*h\r\n  return lateralsurface"
    },
    {
        "number": 234,
        "prompt": "Write a function to find the volume of a cube.\ndef volume_cube(l):\n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    return l**3\n\n# Test your function with the values below\nprint(volume_cube(5)) # should return 125\nprint(volume_cube(10)) # should return 10000\n\n# Define a function to find the volume of a sphere using the formula 4/3 * pi * r^3\ndef volume_sphere(r):\n    return (4/3) * 3.14159 * r**3\n\n# Test your function with the values below\nprint(volume_sphere(5)) # should return 523.6\nprint(volume_sphere(10)) # should return 41888.79\n\n# Define a function to find the area of a sphere using the formula 4 * pi * r^2\ndef area_sphere(r):\n    return 4 * 3.14159 * r**2\n\n# Test your function with the values below\nprint(area_sphere(5)) # should return 314.159\nprint(area_sphere(10)) # should return 452.3899",
        "generated_testcode": "assert volume_cube(3) == 27\n",
        "test": "assert volume_cube(3)==27\nassert volume_cube(2)==8\nassert volume_cube(5)==125",
        "canonical_solution": "def volume_cube(l):\r\n  volume = l * l * l\r\n  return volume"
    },
    {
        "number": 235,
        "prompt": "Write a python function to set all even bits of a given number.\ndef even_bit_set_number(n): \n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    return n | (n & -n)\n\n# Test the function\nprint(even_bit_set_number(13))  # output: 15 (11011)\nprint(even_bit_set_number(20))  # output: 20 (101000) \nprint(even_bit_set_number(7))   # output: 7  (1111) \n\n# Explanation: \n# We are using bitwise AND operator '&' to set all the even bits of a given number. \n# n & -n gives us the last set bit (i.e. rightmost bit) of a number. \n# To set all the even bits, we need to set the rightmost bit and all the even bits that are to its left, \n# so we use the expression n | (n & -n).\n# Example: \n# n = 13 (11011) \n# -n = -11 (11011) \n# n & -n = 1010 (rightmost bit of n) \n# n | (n & -n) = 11111 (set all the bits to right of rightmost bit of n) ",
        "generated_testcode": "assert even_bit_set_number(10) == 10\n",
        "test": "assert even_bit_set_number(10) == 10\nassert even_bit_set_number(20) == 30\nassert even_bit_set_number(30) == 30",
        "canonical_solution": "def even_bit_set_number(n): \r\n    count = 0;res = 0;temp = n \r\n    while(temp > 0): \r\n        if (count % 2 == 1): \r\n            res |= (1 << count)\r\n        count+=1\r\n        temp >>= 1\r\n    return (n | res) "
    },
    {
        "number": 236,
        "prompt": "Write a python function to count the maximum number of equilateral triangles that can be formed within a given equilateral triangle.\ndef No_of_Triangle(N,K):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    count=0\n    for i in range(1,N+1):\n        for j in range(1,N+1):\n            if i*i+j*j==K:\n                count+=1\n    return count\n\nN = int(input(\"Enter the length of the equilateral triangle: \"))\nK = int(input(\"Enter the perimeter of the triangle: \"))\nprint(\"Number of equilateral triangles: \", No_of_Triangle(N,K))\n\n#Example:\n#Input:\n#Enter the length of the equilateral triangle: 4\n#Enter the perimeter of the triangle: 12\n#Output:\n#Number of equilateral triangles: 4\n#Here, within a 4 sided equilateral triangle, the maximum number of equilateral triangles that can be formed with perimeter 12 are 4. \n#These are the triangles (1,4,4), (2,4,4), (3,4,4) and (4,4,4). ",
        "generated_testcode": "assert No_of_Triangle(3,2) == 1\n",
        "test": "assert No_of_Triangle(4,2) == 7\nassert No_of_Triangle(4,3) == 3\nassert No_of_Triangle(1,3) == -1",
        "canonical_solution": "def No_of_Triangle(N,K):\r\n    if (N < K):\r\n        return -1;\r\n    else:\r\n        Tri_up = 0;\r\n        Tri_up = ((N - K + 1) *(N - K + 2)) // 2;\r\n        Tri_down = 0;\r\n        Tri_down = ((N - 2 * K + 1) *(N - 2 * K + 2)) // 2;\r\n        return Tri_up + Tri_down;"
    },
    {
        "number": 237,
        "prompt": "Write a function to check the occurrences of records which occur similar times in the given tuples.\ndef check_occurences(test_list):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    count_dict = {}\n    for i in test_list:\n        if i in count_dict:\n            count_dict[i] += 1\n        else:\n            count_dict[i] = 1\n\n    for key, value in count_dict.items():\n        if value > 1:\n            print(key, value)\n\n# Example usage:\ntest_list = (1, 2, 3, 4, 5, 6, 5, 5, 6, 7, 8, 9, 9, 9)\ncheck_occurences(test_list)\n# Output: 5 2\n#        9 2\n\n# The function should only print the records which occur more than once in the tuples. ",
        "generated_testcode": "",
        "test": "assert check_occurences([(3, 1), (1, 3), (2, 5), (5, 2), (6, 3)] ) == {(1, 3): 2, (2, 5): 2, (3, 6): 1}\nassert check_occurences([(4, 2), (2, 4), (3, 6), (6, 3), (7, 4)] ) == {(2, 4): 2, (3, 6): 2, (4, 7): 1}\nassert check_occurences([(13, 2), (11, 23), (12, 25), (25, 12), (16, 23)] ) == {(2, 13): 1, (11, 23): 1, (12, 25): 2, (16, 23): 1}",
        "canonical_solution": "from collections import Counter \r\ndef check_occurences(test_list):\r\n  res = dict(Counter(tuple(ele) for ele in map(sorted, test_list)))\r\n  return  (res) "
    },
    {
        "number": 238,
        "prompt": "Write a python function to count number of non-empty substrings of a given string.\ndef number_of_substrings(str): \n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    n = len(str) \n    count = (n * (n + 1)) // 2\n    return count\n\n# Test the function with an example \nprint(number_of_substrings(\"hello\")) ",
        "generated_testcode": "assert number_of_substrings(\"abc\") == 6\n",
        "test": "assert number_of_substrings(\"abc\") == 6\nassert number_of_substrings(\"abcd\") == 10\nassert number_of_substrings(\"abcde\") == 15",
        "canonical_solution": "def number_of_substrings(str): \r\n\tstr_len = len(str); \r\n\treturn int(str_len * (str_len + 1) / 2); "
    },
    {
        "number": 239,
        "prompt": "Write a function to find the number of possible sequences of length n such that each of the next element is greater than or equal to twice of the previous element but less than or equal to m.\ndef get_total_number_of_sequences(m,n): \n",
        "checkpoint": "13B",
        "pass": 5,
        "correct": true,
        "answer": "    dp = [0] * (m+1)\n    dp[1] = 1\n    for i in range(2,m+1):\n        dp[i] = dp[i-1] + dp[i-2]\n    return dp[n] - 1\n\n# Test the function with some sample inputs\nprint(get_total_number_of_sequences(5,3)) # Output: 2\nprint(get_total_number_of_sequences(6,3)) # Output: 4\nprint(get_total_number_of_sequences(7,4)) # Output: 6\nprint(get_total_number_of_sequences(10,5)) # Output: 15\n\n# Time Complexity: O(m)\n# Space Complexity: O(1)\n\n# Explanation:\n# We can use dynamic programming to find the number of sequences. We can start with 1 and then keep adding the number of sequences that can be formed with 2, 3, 4, ... until n. We can use a dp array to store the number of sequences for each element in the range [1, m].\n# The base case is when n = 1, there is only one possible sequence (1). For n = 2, we can add the number of sequences that can be formed with 2. For n > 2, we can add the number of sequences that can be formed with 3, 4, ... until m. ",
        "generated_testcode": "assert get_total_number_of_sequences(5,3) == 1\n",
        "test": "assert get_total_number_of_sequences(10, 4) == 4\nassert get_total_number_of_sequences(5, 2) == 6\nassert get_total_number_of_sequences(16, 3) == 84",
        "canonical_solution": "def get_total_number_of_sequences(m,n): \r\n\tT=[[0 for i in range(n+1)] for i in range(m+1)] \r\n\tfor i in range(m+1): \r\n\t\tfor j in range(n+1): \r\n\t\t\tif i==0 or j==0: \r\n\t\t\t\tT[i][j]=0\r\n\t\t\telif i<j: \r\n\t\t\t\tT[i][j]=0\r\n\t\t\telif j==1: \r\n\t\t\t\tT[i][j]=i \r\n\t\t\telse: \r\n\t\t\t\tT[i][j]=T[i-1][j]+T[i//2][j-1] \r\n\treturn T[m][n]"
    },
    {
        "number": 240,
        "prompt": "Write a function to replace the last element of the list with another list.\ndef replace_list(list1,list2):\n",
        "checkpoint": "13B",
        "pass": 7,
        "correct": true,
        "answer": "    list1.pop()\n    for i in list2:\n        list1.append(i)\n    return list1\n\n# Test the function with an example\nlist1 = [1,2,3,4]\nlist2 = [5,6,7]\nprint(replace_list(list1,list2))\n# Output: [1,2,3,5,6,7]\n",
        "generated_testcode": "assert replace_list([1,2,3,4],[5,6,7]) == [1,2,3,5,6,7]\n",
        "test": "assert replace_list([1, 3, 5, 7, 9, 10],[2, 4, 6, 8])==[1, 3, 5, 7, 9, 2, 4, 6, 8]\nassert replace_list([1,2,3,4,5],[5,6,7,8])==[1,2,3,4,5,6,7,8]\nassert replace_list([\"red\",\"blue\",\"green\"],[\"yellow\"])==[\"red\",\"blue\",\"yellow\"]",
        "canonical_solution": "def replace_list(list1,list2):\r\n list1[-1:] = list2\r\n replace_list=list1\r\n return replace_list\r\n"
    },
    {
        "number": 241,
        "prompt": "Write a function to generate a 3d array having each element as '*'.\ndef array_3d(m,n,o):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    return [['*' for j in range(n)] for i in range(m)]\n\n# function to print the array\ndef print_array(arr):\n    for i in range(len(arr)):\n        for j in range(len(arr[0])):\n            print(arr[i][j], end=' ')\n        print()\n    print()\n\n# function to add a new row to the array\ndef add_row(arr, row):\n    arr.append(row)\n\n# function to add a new column to the array\ndef add_col(arr, col):\n    for i in range(len(arr)):\n        arr[i].append(col)\n\n# function to add a new layer to the array\ndef add_layer(arr, layer):\n    arr.append(layer)\n\n# main function to test the above functions\ndef main():\n    m, n, o = map(int, input(\"Enter the dimensions of the 3d array (m, n, o): \").split())\n    arr = array_3d(m,n,o)\n    print(\"3d array created:\")\n    print_array(arr)\n    print(\"Enter the new row: \")\n    row = input(\"Enter the elements of the new row separated by space: \").split()\n    row = [int(i) for i in row]\n    add_row(arr, row)\n    print(\"3d array after adding a new row:\")\n    print_array(arr)\n    print(\"Enter the new",
        "generated_testcode": "assert array_3d(2,3,4) == [['***', '***', '***'], ['***', '***', '***']]\n",
        "test": "assert array_3d(6,4,3)==[[['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']]]\nassert array_3d(5,3,4)==[[['*', '*', '*', '*', '*'], ['*', '*', '*', '*','*'], ['*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*'],['*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*']]]\nassert array_3d(1,2,3)==[[['*'],['*']],[['*'],['*']],[['*'],['*']]]",
        "canonical_solution": "def array_3d(m,n,o):\r\n array_3d = [[ ['*' for col in range(m)] for col in range(n)] for row in range(o)]\r\n return array_3d"
    },
    {
        "number": 242,
        "prompt": "Write a function to count total characters in a string.\ndef count_charac(str1):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    count = 0\n    for i in str1:\n        count += 1\n    return count\n\n# Test the function with sample input\nprint(count_charac(\"Hello World\"))  # Output: 11\n\n# You can also use the built-in function len() to count characters in a string\nprint(len(\"Hello World\"))  # Output: 11\n",
        "generated_testcode": "assert count_charac(\"Hello World\") == 10\n",
        "test": "assert count_charac(\"python programming\")==18\nassert count_charac(\"language\")==8\nassert count_charac(\"words\")==5",
        "canonical_solution": "def count_charac(str1):\r\n total = 0\r\n for i in str1:\r\n    total = total + 1\r\n return total"
    },
    {
        "number": 243,
        "prompt": "Write a function to sort the given list based on the occurrence of first element of tuples.\ndef sort_on_occurence(lst): \n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    lst.sort(key = lambda x: x[0]) \n    return lst \n\n# Test the function with an example\nlst = [(5, 3), (3, 2), (1, 4), (5, 1), (4, 5), (2, 1), (5, 2)]\nprint(sort_on_occurence(lst)) # Output: [(5, 3), (5, 1), (5, 2), (4, 5), (3, 2), (1, 4), (2, 1)]\n\n# Time Complexity: O(nlogn) as we are using sort function ",
        "generated_testcode": "",
        "test": "assert sort_on_occurence([(1, 'Jake'), (2, 'Bob'), (1, 'Cara')]) == [(1, 'Jake', 'Cara', 2), (2, 'Bob', 1)]\nassert sort_on_occurence([('b', 'ball'), ('a', 'arm'), ('b', 'b'), ('a', 'ant')]) == [('b', 'ball', 'b', 2), ('a', 'arm', 'ant', 2)]\nassert sort_on_occurence([(2, 'Mark'), (3, 'Maze'), (2, 'Sara')]) == [(2, 'Mark', 'Sara', 2), (3, 'Maze', 1)]",
        "canonical_solution": "def sort_on_occurence(lst): \r\n\tdct = {} \r\n\tfor i, j in lst: \r\n\t\tdct.setdefault(i, []).append(j) \r\n\treturn ([(i, *dict.fromkeys(j), len(j)) \r\n\t\t\t\tfor i, j in dct.items()]) "
    },
    {
        "number": 244,
        "prompt": "Write a python function to find the next perfect square greater than a given number.\ndef next_Perfect_Square(N): \n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    x = N \n    while True: \n        x += 1\n        y = int(math.sqrt(x)) \n        if x == y * y: \n            return x \n  \n# Driver code \nN = 144 \nprint(next_Perfect_Square(N)) ",
        "generated_testcode": "assert next_Perfect_Square(15) == 16\n",
        "test": "assert next_Perfect_Square(35) == 36\nassert next_Perfect_Square(6) == 9\nassert next_Perfect_Square(9) == 16",
        "canonical_solution": "import math  \r\ndef next_Perfect_Square(N): \r\n    nextN = math.floor(math.sqrt(N)) + 1\r\n    return nextN * nextN "
    },
    {
        "number": 245,
        "prompt": "Write a function to find the maximum sum of bi-tonic sub-sequence for the given array.\ndef max_sum(arr, n): \n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    max_sum = 0\n    for i in range(n-2): \n        for j in range(i+1, n-1): \n            for k in range(j+1, n): \n                if arr[i]*arr[i]+arr[j]*arr[j] > arr[i]*arr[j]+arr[j]*arr[k]: \n                    sum = arr[i]**2 + arr[j]**2 + arr[k]**2\n                else: \n                    sum = arr[i]*arr[j] + arr[j]*arr[k] \n                if sum > max_sum: \n                    max_sum = sum \n    return max_sum \n\nn = int(input())\narr = list(map(int, input().split()))\nprint(max_sum(arr, n)) ",
        "generated_testcode": "assert max_sum([1, 2, 3, 4, 2, 5, 7, 10, 8, 3, 5], 8) == 29\n",
        "test": "assert max_sum([1, 15, 51, 45, 33, 100, 12, 18, 9], 9) == 194\nassert max_sum([80, 60, 30, 40, 20, 10], 6) == 210\nassert max_sum([2, 3 ,14, 16, 21, 23, 29, 30], 8) == 138",
        "canonical_solution": "def max_sum(arr, n): \r\n\tMSIBS = arr[:] \r\n\tfor i in range(n): \r\n\t\tfor j in range(0, i): \r\n\t\t\tif arr[i] > arr[j] and MSIBS[i] < MSIBS[j] + arr[i]: \r\n\t\t\t\tMSIBS[i] = MSIBS[j] + arr[i] \r\n\tMSDBS = arr[:] \r\n\tfor i in range(1, n + 1): \r\n\t\tfor j in range(1, i): \r\n\t\t\tif arr[-i] > arr[-j] and MSDBS[-i] < MSDBS[-j] + arr[-i]: \r\n\t\t\t\tMSDBS[-i] = MSDBS[-j] + arr[-i] \r\n\tmax_sum = float(\"-Inf\") \r\n\tfor i, j, k in zip(MSIBS, MSDBS, arr): \r\n\t\tmax_sum = max(max_sum, i + j - k) \r\n\treturn max_sum"
    },
    {
        "number": 246,
        "prompt": "Write a function for computing square roots using the babylonian method.\ndef babylonian_squareroot(number):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    if number < 0:\n        return None\n    if number == 0 or number == 1:\n        return number\n    estimate = 1\n    while True:\n        next_estimate = (estimate + number / estimate) / 2\n        if abs(next_estimate - estimate) < 0.00001:\n            return next_estimate\n        estimate = next_estimate\n\n# Test the function with some example inputs\nprint(babylonian_squareroot(16))  # 4.0\nprint(babylonian_squareroot(2))  # 1.414213562373095049\nprint(babylonian_squareroot(100))  # 10.0\nprint(babylonian_squareroot(0))  # 0.0\nprint(babylonian_squareroot(1))  # 1.0\n\n# Let's try it on some larger numbers\nprint(babylonian_squareroot(100000000)) # 10000.0\nprint(babylonian_squareroot(1000000000000)) # 100000.0\n\n# The function seems to be working correctly, but we can improve it by using a better stopping criterion\ndef babylonian_squareroot(number, tolerance",
        "generated_testcode": "assert babylonian_squareroot(16) == 4\n",
        "test": "assert babylonian_squareroot(10)==3.162277660168379\nassert babylonian_squareroot(2)==1.414213562373095\nassert babylonian_squareroot(9)==3.0",
        "canonical_solution": "def babylonian_squareroot(number):\r\n    if(number == 0):\r\n        return 0;\r\n    g = number/2.0;\r\n    g2 = g + 1;\r\n    while(g != g2):\r\n        n = number/ g;\r\n        g2 = g;\r\n        g = (g + n)/2;\r\n    return g;"
    },
    {
        "number": 247,
        "prompt": "Write a function to find the longest palindromic subsequence in the given string.\ndef lps(str): \n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": true,
        "answer": "    n = len(str) \n    dp = [[0 for x in range(n)] for y in range(n)] \n    for i in range(n): \n        dp[i][i] = 1\n    for L in range(2, n+1): \n        for i in range(n-L, -1, -1): \n            j = i+L-1\n            if (str[i] == str[j] and L == 2): \n                dp[i][j] = 2\n            elif (str[i] == str[j]): \n                dp[i][j] = dp[i+1][j-1] + 2\n            else: \n                dp[i][j] = max(dp[i+1][j], dp[i][j-1]) \n    return dp[0][n-1] ",
        "generated_testcode": "assert lps(\"bbbab\") == 4\n",
        "test": "assert lps(\"TENS FOR TENS\") == 5 \nassert lps(\"CARDIO FOR CARDS\") == 7\nassert lps(\"PART OF THE JOURNEY IS PART\") == 9 ",
        "canonical_solution": "def lps(str): \r\n\tn = len(str) \r\n\tL = [[0 for x in range(n)] for x in range(n)] \r\n\tfor i in range(n): \r\n\t\tL[i][i] = 1\r\n\tfor cl in range(2, n+1): \r\n\t\tfor i in range(n-cl+1): \r\n\t\t\tj = i+cl-1\r\n\t\t\tif str[i] == str[j] and cl == 2: \r\n\t\t\t\tL[i][j] = 2\r\n\t\t\telif str[i] == str[j]: \r\n\t\t\t\tL[i][j] = L[i+1][j-1] + 2\r\n\t\t\telse: \r\n\t\t\t\tL[i][j] = max(L[i][j-1], L[i+1][j]); \r\n\treturn L[0][n-1]"
    },
    {
        "number": 248,
        "prompt": "Write a function to calculate the harmonic sum of n-1.\ndef harmonic_sum(n):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": true,
        "answer": "    # If n is 1, return 1\n    if n == 1:\n        return 1\n    else:\n        # Otherwise, return the sum of n and the harmonic sum of n-1\n        return n + (1/n) + harmonic_sum(n-1)\n\n# Test the function\nprint(harmonic_sum(5)) # Output: 3.28333333333333333335\n",
        "generated_testcode": "assert harmonic_sum(1) == 1\n",
        "test": "assert harmonic_sum(7) == 2.5928571428571425\nassert harmonic_sum(4) == 2.083333333333333\nassert harmonic_sum(19) == 3.547739657143682",
        "canonical_solution": "def harmonic_sum(n):\r\n  if n < 2:\r\n    return 1\r\n  else:\r\n    return 1 / n + (harmonic_sum(n - 1)) "
    },
    {
        "number": 249,
        "prompt": "Write a function to find the intersection of two arrays using lambda function.\ndef intersection_array(array_nums1,array_nums2):\n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    return list(set(array_nums1) & set(array_nums2))\n\n# Example usage:\narray_nums1 = [1,2,3,4,5]\narray_nums2 = [2,4,6,8]\nprint(intersection_array(array_nums1,array_nums2)) # Output: [2, 4]\n\n# Using map() and lambda function to convert all elements in a list to uppercase\ndef convert_to_uppercase(lst):\n    return list(map(lambda x: x.upper(), lst))\n\n# Example usage:\nlst = ['python', 'java', 'kotlin']\nprint(convert_to_uppercase(lst)) # Output: ['PYTHON', 'JAVA', 'KOTLIN'] ",
        "generated_testcode": "assert intersection_array([1,2,3,4,5],[2,4,6,8]) == [2,4]\n",
        "test": "assert intersection_array([1, 2, 3, 5, 7, 8, 9, 10],[1, 2, 4, 8, 9])==[1, 2, 8, 9]\nassert intersection_array([1, 2, 3, 5, 7, 8, 9, 10],[3,5,7,9])==[3,5,7,9]\nassert intersection_array([1, 2, 3, 5, 7, 8, 9, 10],[10,20,30,40])==[10]",
        "canonical_solution": "def intersection_array(array_nums1,array_nums2):\r\n result = list(filter(lambda x: x in array_nums1, array_nums2)) \r\n return result"
    },
    {
        "number": 250,
        "prompt": "Write a python function to count the occcurences of an element in a tuple.\ndef count_X(tup, x): \n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    count = 0 \n    for i in tup: \n        if i == x: \n            count = count + 1\n    return count \n  \n# Testing the function with an example tuple \ntup = (1, 2, 3, 4, 5, 4, 3, 2, 1) \nprint(count_X(tup, 2)) \nprint(count_X(tup, 4)) \nprint(count_X(tup, 6)) ",
        "generated_testcode": "assert count_X((1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3), 3) == 2\n",
        "test": "assert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),4) == 0\nassert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),10) == 3\nassert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),8) == 4",
        "canonical_solution": "def count_X(tup, x): \r\n    count = 0\r\n    for ele in tup: \r\n        if (ele == x): \r\n            count = count + 1\r\n    return count "
    },
    {
        "number": 251,
        "prompt": "Write a function to insert an element before each element of a list.\ndef insert_element(list,element):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    new_list = []\n    for i in range(len(list)):\n        new_list.append(element)\n        new_list.append(list[i])\n    return new_list\n\n# Test the function with an example\nlist = [1,2,3,4,5]\nelement = 0\nprint(insert_element(list,element)) # Output: [0, 1, 0, 2, 0, 3, 0, 4, 0, 5]\n\n# Time Complexity: O(n)\n# Space Complexity: O(n)\n# Here, we create a new list and insert the element before each element of the input list, hence the space complexity is O(n). The time complexity is O(n) as we iterate through each element of the input list once. ",
        "generated_testcode": "assert insert_element([1,2,3,4,5],0) == [0,1,0,2,0,3,0,4,0,5]\n",
        "test": "assert insert_element(['Red', 'Green', 'Black'] ,'c')==['c', 'Red', 'c', 'Green', 'c', 'Black'] \nassert insert_element(['python', 'java'] ,'program')==['program', 'python', 'program', 'java'] \nassert insert_element(['happy', 'sad'] ,'laugh')==['laugh', 'happy', 'laugh', 'sad'] ",
        "canonical_solution": "def insert_element(list,element):\r\n list = [v for elt in list for v in (element, elt)]\r\n return list"
    },
    {
        "number": 252,
        "prompt": "Write a python function to convert complex numbers to polar coordinates.\ndef convert(numbers):    \n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    from cmath import polar\n    result = [polar(num) for num in numbers]\n    return result\n    \n# example usage:\nnumbers = [3+4j, 1-2j, 0.5+0.5j, -1-0.5j]\nprint(convert(numbers)) # [(5.0, 0.927295218001612245), (2.236067977749979, 1.107148717779403046), (0.70710678118654759, 0.7853981633974483), (2.2360679774997919, 2.51327412287183455)]\n",
        "generated_testcode": "assert convert(1+2j) == (2.236067977749979, 0.131699875378540345)\n",
        "test": "assert convert(1) == (1.0, 0.0)\nassert convert(4) == (4.0,0.0)\nassert convert(5) == (5.0,0.0)",
        "canonical_solution": "import cmath  \r\ndef convert(numbers):    \r\n  num = cmath.polar(numbers)  \r\n  return (num) "
    },
    {
        "number": 253,
        "prompt": "Write a python function to count integers from a given list.\ndef count_integer(list1):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    count = 0\n    for i in list1:\n        if isinstance(i, int):\n            count += 1\n    return count\n\n# Test the function\nmy_list = [1, 2, 3, \"4\", 5, 6, \"7\", 8, 9, \"10\", 11, 12.5]\nprint(count_integer(my_list)) # Should return 5\n\n# Write a function that takes a list of strings and converts them to floats and adds them together\ndef sum_floats(list1):\n    total = 0\n    for i in list1:\n        if isinstance(i, float):\n            total += i\n    return total\n\n# Test the function\nmy_list = [\"1.2\", 2.3, \"3.4\", 4.5, \"5.6\", 6.7, 7.8]\nprint(sum_floats(my_list)) # Should return 25.0\n\n# Write a function to check if a list is sorted\ndef is_sorted(list1):\n    for i in range(len(list1)-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True\n\n# Test the function\nprint(is_sorted([1, 2, 3, 4, 5, 6])) # Should return True\nprint(is_sorted([1, 2, 4, 3, 5, ",
        "generated_testcode": "assert count_integer([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 7\n",
        "test": "assert count_integer([1,2,'abc',1.2]) == 2\nassert count_integer([1,2,3]) == 3\nassert count_integer([1,1.2,4,5.1]) == 2",
        "canonical_solution": "def count_integer(list1):\r\n    ctr = 0\r\n    for i in list1:\r\n        if isinstance(i, int):\r\n            ctr = ctr + 1\r\n    return ctr"
    },
    {
        "number": 254,
        "prompt": "Write a function to find all words starting with 'a' or 'e' in a given string.\ndef words_ae(text):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    words = text.split()\n    ae_words = []\n    for word in words:\n        if word[0] == 'a' or word[0] == 'e':\n            ae_words.append(word)\n    return ae_words\n\n# Test the function with the following string\ntext = \"apple and banana are fruits, elephant and dog are animals, apple eater is a person\"\nprint(words_ae(text)) # output: ['apple', 'banana', 'elephant', 'dog', 'apple', 'eater']\n\n# Test with empty string\nprint(words_ae(\"\")) # output: []\n# Test with one word\nprint(words_ae(\"apple\")) # output: ['apple']\n# Test with no words starting with 'a' or 'e'\nprint(words_ae(\"the quick brown fox jumps over the lazy dog\")) # output: []\n# Test with multiple words starting with 'a' or 'e'\nprint(words_ae(\"the quick apple and banana jumps over the lazy dog\")) # output: ['apple', 'banana', 'jumps'] ",
        "generated_testcode": "assert words_ae(\"The quick brown fox jumps over the lazy dog\") == [\"The\", \"quick\", \"brown\", \"jumps\", \"over\", \"the\", \"lazy\", \"dog\"]\n",
        "test": "assert words_ae(\"python programe\")==['ame']\nassert words_ae(\"python programe language\")==['ame','anguage']\nassert words_ae(\"assert statement\")==['assert', 'atement']",
        "canonical_solution": "import re\r\ndef words_ae(text):\r\n list = re.findall(\"[ae]\\w+\", text)\r\n return list"
    },
    {
        "number": 255,
        "prompt": "Write a function to choose specified number of colours from three different colours and generate all the combinations with repetitions.\ndef combinations_colors(l, n):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    colors = ['red', 'green', 'blue']\n    result = []\n    for r in range(n + 1):\n        for combo in itertools.combinations_with_replacement(colors, r):\n            if len(combo) == n:\n                result.append(combo)\n    return result\n\nprint(combinations_colors(2, 2))\n# Output: [('red', 'red'), ('red', 'green'), ('red', 'blue'), ('green', 'green'), ('green', 'blue'), ('blue', 'blue')]\nprint(combinations_colors(3, 3))\n# Output: [('red', 'red', 'red'), ('red', 'red', 'green'), ('red', 'red', 'blue'), ('red', 'green', 'green'), ('red', 'green', 'blue'), ('red', 'blue', 'blue'), ('green', 'green', 'green'), ('green', 'green', 'blue'), ('green', 'blue', 'blue'), ('blue', 'blue', 'blue')]\n\n#Explanation:\n#The itertools.combinations_with_replacement() function returns all possible combinations of a given iterable with repetitions allowed. ",
        "generated_testcode": "assert combinations_colors(['red', 'blue', 'green'], 2) == [('red', 'red'), ('red', 'blue'), ('red', 'green'), ('blue', 'blue'), ('blue', 'green'), ('green', 'green')]\n",
        "test": "assert combinations_colors( [\"Red\",\"Green\",\"Blue\"],1)==[('Red',), ('Green',), ('Blue',)]\nassert combinations_colors( [\"Red\",\"Green\",\"Blue\"],2)==[('Red', 'Red'), ('Red', 'Green'), ('Red', 'Blue'), ('Green', 'Green'), ('Green', 'Blue'), ('Blue', 'Blue')]\nassert combinations_colors( [\"Red\",\"Green\",\"Blue\"],3)==[('Red', 'Red', 'Red'), ('Red', 'Red', 'Green'), ('Red', 'Red', 'Blue'), ('Red', 'Green', 'Green'), ('Red', 'Green', 'Blue'), ('Red', 'Blue', 'Blue'), ('Green', 'Green', 'Green'), ('Green', 'Green', 'Blue'), ('Green', 'Blue', 'Blue'), ('Blue', 'Blue', 'Blue')]",
        "canonical_solution": "from itertools import combinations_with_replacement \r\ndef combinations_colors(l, n):\r\n    return list(combinations_with_replacement(l,n))\r"
    },
    {
        "number": 256,
        "prompt": "Write a python function to count the number of prime numbers less than a given non-negative number.\ndef count_Primes_nums(n):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    primes = []\n    for i in range(2, n+1):\n        if all(i % j != 0 for j in range(2, i)):\n            primes.append(i)\n    return len(primes)\n\nprint(count_Primes_nums(20)) # Output: 8\nprint(count_Primes_nums(100)) # Output: 25\nprint(count_Primes_nums(1000)) # Output: 25",
        "generated_testcode": "assert count_Primes_nums(10) == 4\n",
        "test": "assert count_Primes_nums(5) == 2\nassert count_Primes_nums(10) == 4\nassert count_Primes_nums(100) == 25",
        "canonical_solution": "def count_Primes_nums(n):\r\n    ctr = 0\r\n    for num in range(n):\r\n        if num <= 1:\r\n            continue\r\n        for i in range(2,num):\r\n            if (num % i) == 0:\r\n                break\r\n        else:\r\n            ctr += 1\r\n    return ctr"
    },
    {
        "number": 257,
        "prompt": "Write a function to swap two numbers.\ndef swap_numbers(a,b):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    temp = a\n    a = b\n    b = temp\n    return a,b\n\n# Test the function\na = 5\nb = 10\nprint(swap_numbers(a,b)) # output: (10, 5)\na = 10\nb = 5\nprint(swap_numbers(a,b)) # output: (5, 10) ",
        "generated_testcode": "assert swap_numbers(1,2) == (2,1)\n",
        "test": "assert swap_numbers(10,20)==(20,10)\nassert swap_numbers(15,17)==(17,15)\nassert swap_numbers(100,200)==(200,100)",
        "canonical_solution": "def swap_numbers(a,b):\r\n temp = a\r\n a = b\r\n b = temp\r\n return (a,b)"
    },
    {
        "number": 258,
        "prompt": "Write a function to find number of odd elements in the given list using lambda function.\ndef count_odd(array_nums):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    return len(list(filter(lambda x: x % 2 != 0, array_nums))\n\n#Example usage:\nprint(count_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])) # Output: 5\nprint(count_odd([0, 2, 4, 6, 8, 10])) # Output: 0\nprint(count_odd([])) # Output: 0\nprint(count_odd([1, 3, 5, 7, 9])) # Output: 4\n",
        "generated_testcode": "assert count_odd([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 4\n",
        "test": "assert count_odd([1, 2, 3, 5, 7, 8, 10])==4\nassert count_odd([10,15,14,13,-18,12,-20])==2\nassert count_odd([1, 2, 4, 8, 9])==2",
        "canonical_solution": "def count_odd(array_nums):\r\n   count_odd = len(list(filter(lambda x: (x%2 != 0) , array_nums)))\r\n   return count_odd"
    },
    {
        "number": 259,
        "prompt": "Write a function to maximize the given two tuples.\ndef maximize_elements(test_tup1, test_tup2):\n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    max_tuple = ()\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            max_tuple += (test_tup1[i],)\n        else:\n            max_tuple += (test_tup2[i],)\n    return max_tuple\n\n# Test the function with sample input\nprint(maximize_elements((1, 2, 3), (4, 5, 6)))  # Output: (4, 5, 6)\nprint(maximize_elements((4, 5, 6), (1, 2, 3)))  # Output: (4, 5, 6)\nprint(maximize_elements((1, 2, 3), (1, 2, 3)))  # Output: (1, 2, 3)\nprint(maximize_elements((1, 2, 3), (4, 5, 3)))  # Output: (4, 5, 3) ",
        "generated_testcode": "assert maximize_elements((1, 2, 3), (4, 5, 6)) == (4, 5, 6)\n",
        "test": "assert maximize_elements(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((6, 7), (4, 9), (2, 9), (7, 10))\nassert maximize_elements(((2, 4), (5, 6), (3, 10), (2, 11)), ((7, 8), (4, 10), (2, 2), (8, 4))) == ((7, 8), (5, 10), (3, 10), (8, 11))\nassert maximize_elements(((3, 5), (6, 7), (4, 11), (3, 12)), ((8, 9), (5, 11), (3, 3), (9, 5))) == ((8, 9), (6, 11), (4, 11), (9, 12))",
        "canonical_solution": "def maximize_elements(test_tup1, test_tup2):\r\n  res = tuple(tuple(max(a, b) for a, b in zip(tup1, tup2))\r\n   for tup1, tup2 in zip(test_tup1, test_tup2))\r\n  return (res) "
    },
    {
        "number": 260,
        "prompt": "Write a function to find the nth newman\u2013shanks\u2013williams prime number.\ndef newman_prime(n): \n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    if n == 1: \n        return 5 \n    p = 5 \n    for i in range(2,n): \n        p = 2 * p + 1\n        while not is_prime(p): \n            p = 2 * p + 1\n    return p \n\ndef is_prime(num): \n    if num < 2: \n        return False\n    for i in range(2,int(num**0.5)+1): \n        if num % i == 0: \n            return False\n    return True\n\n# test the function \nprint(newman_prime(2)) # output: 11 ",
        "generated_testcode": "assert newman_prime(1) == 5\n",
        "test": "assert newman_prime(3) == 7 \nassert newman_prime(4) == 17\nassert newman_prime(5) == 41",
        "canonical_solution": "def newman_prime(n): \r\n\tif n == 0 or n == 1: \r\n\t\treturn 1\r\n\treturn 2 * newman_prime(n - 1) + newman_prime(n - 2)"
    },
    {
        "number": 261,
        "prompt": "Write a function to perform mathematical division operation across the given tuples.\ndef division_elements(test_tup1, test_tup2):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    result_tup = tuple()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] / test_tup2[i],)\n    return result_tup\n\n#Example usage:\ntest_tup1 = (10, 15, 20, 25, 30)\ntest_tup2 = (2, 3, 4, 5, 6)\nprint(division_elements(test_tup1, test_tup2))\n# Output: (5.0, 5.0, 5.0, 5.0)\n\n# Example usage 2:\ntest_tup1 = (100, 20, 30, 40)\ntest_tup2 = (5, 10, 20, 25)\nprint(division_elements(test_tup1, test_tup2))\n# Output: (20.0, 2.0, 1.25, 16.0)\n\n#Example usage 3:\ntest_tup1 = (25, 50, 75)\ntest_tup2 = (10, 10, 10, 10, 10)\nprint(division_elements(test_tup1, test_tup2))\n# Output: ValueError: Tuples are not of equal length\n\n# Example usage ",
        "generated_testcode": "assert division_elements((2, 4, 6, 8, 10), (1, 2, 3, 4)) == (2, 2, 2, 2)\n",
        "test": "assert division_elements((10, 4, 6, 9),(5, 2, 3, 3)) == (2, 2, 2, 3)\nassert division_elements((12, 6, 8, 16),(6, 3, 4, 4)) == (2, 2, 2, 4)\nassert division_elements((20, 14, 36, 18),(5, 7, 6, 9)) == (4, 2, 6, 2)",
        "canonical_solution": "def division_elements(test_tup1, test_tup2):\r\n  res = tuple(ele1 // ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\r\n  return (res) "
    },
    {
        "number": 262,
        "prompt": "Write a function to split a given list into two parts where the length of the first part of the list is given.\ndef split_two_parts(list1, L):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    return list1[:L], list1[L:]\n\n# Example usage:\nprint(split_two_parts([1,2,3,4,5,6], 2)) # Output: ([1, 2], [3, 4, 5, 6])\nprint(split_two_parts([7,8,9,10,11,12], 3)) # Output: ([7, 8, 9], [10, 11, 12])\nprint(split_two_parts([13,14,15], 4)) # Output: ([], [13, 14, 15])\nprint(split_two_parts([], 2)) # Output: ([], []) ",
        "generated_testcode": "",
        "test": "assert split_two_parts([1,1,2,3,4,4,5,1],3)==([1, 1, 2], [3, 4, 4, 5, 1])\nassert split_two_parts(['a', 'b', 'c', 'd'],2)==(['a', 'b'], ['c', 'd'])\nassert split_two_parts(['p', 'y', 't', 'h', 'o', 'n'],4)==(['p', 'y', 't', 'h'], ['o', 'n'])",
        "canonical_solution": "def split_two_parts(list1, L):\r\n    return list1[:L], list1[L:]"
    },
    {
        "number": 263,
        "prompt": "Write a function to merge two dictionaries.\ndef merge_dict(d1,d2):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    merged_dict = {}\n    for k in d1.keys():\n        merged_dict[k] = d1[k]\n    for k in d2.keys():\n        merged_dict[k] = d2[k]\n    return merged_dict\n\n#Example usage:\nd1 = {'a': 1, 'b': 2}\nd2 = {'b': 3, 'c': 4}\nprint(merge_dict(d1, d2)) # Output: {'a': 1, 'b': 3, 'c': 4}\n\n#Explanation: The final dictionary will have all the keys from both dictionaries and their values will be the ones from d2 for common keys. ",
        "generated_testcode": "assert merge_dict({'a':1,'b':2},{'c':3,'d':4}) == {'a':1,'b':2,'c':3,'d':4}\n",
        "test": "assert merge_dict({'a': 100, 'b': 200},{'x': 300, 'y': 200})=={'x': 300, 'y': 200, 'a': 100, 'b': 200}\nassert merge_dict({'a':900,'b':900,'d':900},{'a':900,'b':900,'d':900})=={'a':900,'b':900,'d':900,'a':900,'b':900,'d':900}\nassert merge_dict({'a':10,'b':20},{'x':30,'y':40})=={'x':30,'y':40,'a':10,'b':20}",
        "canonical_solution": "def merge_dict(d1,d2):\r\n d = d1.copy()\r\n d.update(d2)\r\n return d"
    },
    {
        "number": 264,
        "prompt": "Write a function to calculate a dog's age in dog's years.\ndef dog_age(h_age):\n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    dog_age = (h_age * 7)\n    return dog_age\n\n# Test the function with the following values\nprint(dog_age(7)) # should return 49\nprint(dog_age(3)) # should return 21\nprint(dog_age(10)) # should return 70\nprint(dog_age(1)) # should return 7\n\n# Now, let's write a function to calculate the human age in dog years\ndef human_age(d_age):\n    human_age = (d_age / 7)\n    return human_age\n\n# Test the function with the following values\nprint(human_age(49)) # should return 7\nprint(human_age(21)) # should return 3\nprint(human_age(70)) # should return 10\nprint(human_age(7)) # should return 1\n\n# Can you also write a function to calculate the human age in cat years? ",
        "generated_testcode": "assert dog_age(1) == 7\n",
        "test": "assert dog_age(12)==61\nassert dog_age(15)==73\nassert dog_age(24)==109",
        "canonical_solution": "def dog_age(h_age):\r\n if h_age < 0:\r\n \texit()\r\n elif h_age <= 2:\r\n\t d_age = h_age * 10.5\r\n else:\r\n\t d_age = 21 + (h_age - 2)*4\r\n return d_age"
    },
    {
        "number": 265,
        "prompt": "Write a function to split a list for every nth element.\ndef list_split(S, step):\n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    return [S[i:i+step] for i in range(0, len(S), step)]\n\n# Test the function with the given list and step value.\nS = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\nstep = 3\nprint(list_split(S, step)) # Output: [[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12]]\n\n# Test the function with a list of strings and step value of 2.\nS = ['apple', 'banana', 'cherry', 'date', 'elderberry', 'fig']\nstep = 2\nprint(list_split(S, step)) # Output: [['apple', 'banana'], ['cherry', 'date'], ['elderberry', 'fig']] ",
        "generated_testcode": "",
        "test": "assert list_split(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n'],3)==[['a', 'd', 'g', 'j', 'm'], ['b', 'e', 'h', 'k', 'n'], ['c', 'f', 'i', 'l']] \nassert list_split([1,2,3,4,5,6,7,8,9,10,11,12,13,14],3)==[[1,4,7,10,13], [2,5,8,11,14], [3,6,9,12]] \nassert list_split(['python','java','C','C++','DBMS','SQL'],2)==[['python', 'C', 'DBMS'], ['java', 'C++', 'SQL']] ",
        "canonical_solution": "def list_split(S, step):\r\n    return [S[i::step] for i in range(step)]"
    },
    {
        "number": 266,
        "prompt": "Write a function to find the lateral surface area of a cube.\ndef lateralsurface_cube(l):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    return 6*l*l\n\n# Test the function\nprint(lateralsurface_cube(5)) # Output: 150\n\n# Write a function to find the volume of a cube.\ndef volume_cube(l):\n    return l**3\n\n# Test the function\nprint(volume_cube(5)) # Output: 125\n\n# Write a function to find the volume of a cylinder.\ndef volume_cylinder(r, h):\n    return 3.14159*(r**2)*h\n\n# Test the function\nprint(volume_cylinder(5, 10)) # Output: 157.07963267948937125\n\n# Write a function to find the surface area of a cylinder.\ndef surface_cylinder(r, h):\n    return 2*3.14159*r*(r+h)\n\n# Test the function\nprint(surface_cylinder(5, 10)) # Output: 314.1593611210659875\n\n# Write a function to find the lateral surface area of a cylinder.\ndef lateral_cylinder(r, h):\n    return 2*3.14159*r*h\n\n# Test the function\nprint(lateral_cylinder(5, 10)) # Output: 314.",
        "generated_testcode": "assert lateralsurface_cube(3) == 6 * 3 * 2\n",
        "test": "assert lateralsurface_cube(5)==100\nassert lateralsurface_cube(9)==324\nassert lateralsurface_cube(10)==400",
        "canonical_solution": "def lateralsurface_cube(l):\r\n  LSA = 4 * (l * l)\r\n  return LSA"
    },
    {
        "number": 267,
        "prompt": "Write a python function to find the sum of squares of first n odd natural numbers.\ndef square_Sum(n):  \n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    sum = 0\n    for i in range(1, 2*n, 2):\n        sum += i**2\n    return sum\n\nn = int(input(\"Enter a number: \"))\nprint(\"Sum of squares of first\",n,\"odd natural numbers is\", square_Sum(n)) ",
        "generated_testcode": "assert square_Sum(5) == 225 # 1^2 + 3^2 + 5^2 + 7^2 + 9^2 = 225\n",
        "test": "assert square_Sum(2) == 10\nassert square_Sum(3) == 35\nassert square_Sum(4) == 84",
        "canonical_solution": "def square_Sum(n):  \r\n    return int(n*(4*n*n-1)/3) "
    },
    {
        "number": 268,
        "prompt": "Write a function to find the n'th star number.\ndef find_star_num(n): \n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": true,
        "answer": "    if n < 1:\n        return None\n    else:\n        return \"*\" * n ",
        "generated_testcode": "assert find_star_num(1) == \"*\"\n",
        "test": "assert find_star_num(3) == 37\nassert find_star_num(4) == 73\nassert find_star_num(5) == 121",
        "canonical_solution": "def find_star_num(n): \r\n\treturn (6 * n * (n - 1) + 1) "
    },
    {
        "number": 269,
        "prompt": "Write a function to find the ascii value of a character.\ndef ascii_value(k):\n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    return ord(k)\n\n# Example usage:\nprint(ascii_value(\"A\")) # 65\nprint(ascii_value(\"a\")) # 97\nprint(ascii_value(\"!\")) # 33\nprint(ascii_value(\" \")) # 32\n\n# Note: ord() function returns the ASCII value of a character.\n# In Python 3, the ASCII value of a character is an integer.\n# In Python 2, it returns a byte (string) value. ",
        "generated_testcode": "assert ascii_value('a') == 97\n",
        "test": "assert ascii_value('A')==65\nassert ascii_value('R')==82\nassert ascii_value('S')==83",
        "canonical_solution": "def ascii_value(k):\r\n  ch=k\r\n  return ord(ch)"
    },
    {
        "number": 270,
        "prompt": "Write a python function to find the sum of even numbers at even positions.\ndef sum_even_and_even_index(arr,n):  \n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    sum = 0\n    for i in range(n):  \n        if i%2 == 0 and arr[i]%2 == 0:\n            sum += arr[i]\n    return sum ",
        "generated_testcode": "assert sum_even_and_even_index([1,2,3,4,5,6,7,8,9], 6) == 10\n",
        "test": "assert sum_even_and_even_index([5, 6, 12, 1, 18, 8],6) == 30\nassert sum_even_and_even_index([3, 20, 17, 9, 2, 10, 18, 13, 6, 18],10) == 26\nassert sum_even_and_even_index([5, 6, 12, 1],4) == 12",
        "canonical_solution": "def sum_even_and_even_index(arr,n):  \r\n    i = 0\r\n    sum = 0\r\n    for i in range(0,n,2): \r\n        if (arr[i] % 2 == 0) : \r\n            sum += arr[i]  \r\n    return sum"
    },
    {
        "number": 271,
        "prompt": "Write a python function to find the sum of fifth power of first n even natural numbers.\ndef even_Power_Sum(n): \n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    sum = 0\n    for i in range(1, n+1): \n        if i % 2 == 0: \n            sum += i ** 5\n    return sum\n\nn = int(input(\"Enter the value of n: \"))\nprint(\"The sum of fifth power of first\", n, \"even numbers is\", even_Power_Sum(n)) ",
        "generated_testcode": "assert even_Power_Sum(5) == 225\n",
        "test": "assert even_Power_Sum(2) == 1056\nassert even_Power_Sum(3) == 8832\nassert even_Power_Sum(1) == 32",
        "canonical_solution": "def even_Power_Sum(n): \r\n    sum = 0; \r\n    for i in range(1,n+1): \r\n        j = 2*i; \r\n        sum = sum + (j*j*j*j*j); \r\n    return sum; "
    },
    {
        "number": 272,
        "prompt": "Write a function to perfom the rear element extraction from list of tuples records.\ndef rear_extract(test_list):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    \"\"\"\n    Function to extract the last element of a tuple in a list of tuples\n    :param test_list: a list of tuples\n    :return: a list of last elements of the tuples\n    \"\"\"\n    result = []\n    for tup in test_list:\n        result.append(tup[-1])\n    return result\n\n# test\ntest_list = [(1, 2, 3), (4, 5, 6), (7, 8, 9)]\nprint(rear_extract(test_list)) # should return [3, 6, 9]\n\n# test\ntest_list = [(10, 'a', 'apple'), (12, 'b', 'banana'), (15, 'c', 'cherry')]\nprint(rear_extract(test_list)) # should return ['apple', 'banana', 'cherry']\n\n# test\ntest_list = [('dog', 'cat', 10, 'bird', 'lion'), ('cow', 'goat', 15, 'pig', 'elephant'), ('tiger', 'lion', 20, 'giraffe', 'wolf')]\nprint(rear_extract(test_list)) # should return [10, 15, 20]\n\n# test\ntest_list = []\nprint(rear_extract(test_list)) # should return []\n\n# test\ntest_list = [(1, 2, 3, 4,",
        "generated_testcode": "assert rear_extract([(1, 2, 3), (4, 5, 6), (7, 8, 9)]) == (7, 8, 9)\n",
        "test": "assert rear_extract([(1, 'Rash', 21), (2, 'Varsha', 20), (3, 'Kil', 19)]) == [21, 20, 19]\nassert rear_extract([(1, 'Sai', 36), (2, 'Ayesha', 25), (3, 'Salman', 45)]) == [36, 25, 45]\nassert rear_extract([(1, 'Sudeep', 14), (2, 'Vandana', 36), (3, 'Dawood', 56)]) == [14, 36, 56]",
        "canonical_solution": "def rear_extract(test_list):\r\n  res = [lis[-1] for lis in test_list]\r\n  return (res) "
    },
    {
        "number": 273,
        "prompt": "Write a function to substract the contents of one tuple with corresponding index of other tuple.\ndef substract_elements(test_tup1, test_tup2):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    if len(test_tup1) == len(test_tup2):\n        result = ()\n        for i in range(len(test_tup1)):\n            result = result + (test_tup1[i] - test_tup2[i],)\n        return result\n    else:\n        return \"Tuples are of different length\"\n\n\ntest_tup1 = (5, 10, 15, 20)\ntest_tup2 = (2, 4, 6, 8)\nprint(substract_elements(test_tup1, test_tup2))\n\n# Output: (-3, 6, 10, 12)\n\ntest_tup3 = (5, 10, 15, 20)\ntest_tup4 = (2, 4, 6, 8, 10)\nprint(substract_elements(test_tup3, test_tup4))\n# Output: Tuples are of different length\n\ntest_tup5 = (5, 10, 15, 20)\ntest_tup6 = ()\nprint(substract_elements(test_tup5, test_tup6))\n# Output: Tuples are of different length\n\ntest_tup7 = ()\ntest_tup8 = ()\nprint(substract_elements(test_tup7, test_tup8))\n# Output: Tuples are of different length\n",
        "generated_testcode": "assert substract_elements((1, 2, 3), (4, 5, 6)) == (-3, -3, -3)\n",
        "test": "assert substract_elements((10, 4, 5), (2, 5, 18)) == (8, -1, -13)\nassert substract_elements((11, 2, 3), (24, 45 ,16)) == (-13, -43, -13)\nassert substract_elements((7, 18, 9), (10, 11, 12)) == (-3, 7, -3)",
        "canonical_solution": "def substract_elements(test_tup1, test_tup2):\r\n  res = tuple(map(lambda i, j: i - j, test_tup1, test_tup2))\r\n  return (res) "
    },
    {
        "number": 274,
        "prompt": "Write a python function to find sum of even index binomial coefficients.\ndef even_binomial_Coeff_Sum( n): \n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    sum = 0\n    for i in range(n): \n        if (i % 2 == 0): \n            sum += binomialCoefficient(n, i) \n    return sum \n  \ndef binomialCoefficient(n, k): \n    res = 1\n    for i in range(k): \n        res = res * (n - i) \n    res = res / factorial(k) \n    return res\n  \ndef factorial(n): \n    return 1 if (n == 0 or n == 1) else n * factorial(n - 1) \n  \n# Driver code \nn = 5\nprint(even_binomial_Coeff_Sum(n)) ",
        "generated_testcode": "assert even_binomial_Coeff_Sum(5) == 10\n",
        "test": "assert even_binomial_Coeff_Sum(4) == 8\nassert even_binomial_Coeff_Sum(6) == 32\nassert even_binomial_Coeff_Sum(2) == 2",
        "canonical_solution": "import math  \r\ndef even_binomial_Coeff_Sum( n): \r\n    return (1 << (n - 1)) "
    },
    {
        "number": 275,
        "prompt": "Write a python function to find the position of the last removed element from the given array.\ndef get_Position(a,n,m): \n",
        "checkpoint": "13B",
        "pass": 5,
        "correct": true,
        "answer": "    max_element = a[0]\n    max_index = 0\n    for i in range(1,n):\n        if a[i]>max_element:\n            max_element = a[i]\n            max_index = i\n    return max_index\n\n# Driver code \na = [1,2,3,4,5,6,7,8,9,10,11]\nn = len(a)\nm = 11\nprint(\"Last removed element's position is:\",get_Position(a,n,m))\n\n#Output: Last removed element's position is: 2\n\n# Explanation: The last removed element is 3, which is at index 2. ",
        "generated_testcode": "assert get_Position([1,2,3,4,5,6,7,8,9], 7, 6) == 6\n",
        "test": "assert get_Position([2,5,4],3,2) == 2\nassert get_Position([4,3],2,2) == 2\nassert get_Position([1,2,3,4],4,1) == 4",
        "canonical_solution": "import math as mt \r\ndef get_Position(a,n,m): \r\n    for i in range(n): \r\n        a[i] = (a[i] // m + (a[i] % m != 0))  \r\n    result,maxx = -1,-1\r\n    for i in range(n - 1,-1,-1): \r\n        if (maxx < a[i]): \r\n            maxx = a[i] \r\n            result = i \r\n    return result + 1"
    },
    {
        "number": 276,
        "prompt": "Write a function to find the volume of a cylinder.\ndef volume_cylinder(r,h):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    pi = 3.14159\n    vol = (pi * r**2) * h\n    return vol\n\n# Test the function with a radius of 5 and a height of 10\nprint(volume_cylinder(5,10)) # Should return 785.0\n\n# Write a function to find the surface area of a cylinder.\ndef surface_area_cylinder(r,h):\n    pi = 3.14159\n    sa = (2 * pi * r**2) + (2 * pi * r * h)\n    return sa\n\n# Test the function with a radius of 5 and a height of 10\nprint(surface_area_cylinder(5,10)) # Should return 314.159\n\n# Write a function to find the volume of a sphere.\ndef volume_sphere(r):\n    pi = 3.14159\n    vol = (4/3) * pi * r**3\n    return vol\n\n# Test the function with a radius of 5\nprint(volume_sphere(5)) # Should return 523.6\n\n# Write a function to find the surface area of a sphere.\ndef surface_area_sphere(r):\n    pi = 3.14159\n    sa = 4 * pi * r**2\n    return sa\n\n# Test the function with a radius of 5\nprint(surface_area_sphere(5))",
        "generated_testcode": "assert volume_cylinder(3, 5) == 152.36\n",
        "test": "assert volume_cylinder(10,5)==1570.7500000000002\nassert volume_cylinder(4,5)==251.32000000000002\nassert volume_cylinder(4,10)==502.64000000000004",
        "canonical_solution": "def volume_cylinder(r,h):\r\n  volume=3.1415*r*r*h\r\n  return volume"
    },
    {
        "number": 277,
        "prompt": "Write a function to filter a dictionary based on values.\ndef dict_filter(dict,n):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    result = {}\n    for key, value in dict.items():\n        if value == n:\n            result[key] = value\n    return result\n\n# Example usage:\nmy_dict = {'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 1}\nprint(dict_filter(my_dict, 1))  # Output: {'a': 1, 'e': 1}\nprint(dict_filter(my_dict, 2))  # Output: {'b': 2}\nprint(dict_filter(my_dict, 3))  # Output: {'c': 3}\nprint(dict_filter(my_dict, 4))  # Output: {'d': 4}\nprint(dict_filter(my_dict, 5))  # Output: {} ",
        "generated_testcode": "assert dict_filter({'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5}, 3) == {'a': 1, 'b': 2, 'c': 3}\n",
        "test": "assert dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},170)=={'Cierra Vega': 175, 'Alden Cantrell': 180, 'Pierre Cox': 190}\nassert dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},180)=={ 'Alden Cantrell': 180, 'Pierre Cox': 190}\nassert dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},190)=={ 'Pierre Cox': 190}",
        "canonical_solution": "def dict_filter(dict,n):\r\n result = {key:value for (key, value) in dict.items() if value >=n}\r\n return result"
    },
    {
        "number": 278,
        "prompt": "Write a function to find the element count that occurs before the record in the given tuple.\ndef count_first_elements(test_tup):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": true,
        "answer": "    # Create an empty dictionary to store the element count\n    count_dict = {}\n    for i in range(len(test_tup)):\n        # If the element is not in the dictionary, add it with a count of 1\n        if test_tup[i][0] not in count_dict:\n            count_dict[test_tup[i][0]] = 1\n        else:\n            # If the element is already in the dictionary, increment the count\n            count_dict[test_tup[i][0]] += 1\n    return count_dict\n\n# Test the function with the given example\ntest_tup = [(1, 2, 3), (2, 3, 4), (3, 4, 5), (4, 5, 6), (1, 2, 3), (1, 2, 3), (3, 4, 5), (4, 5, 6), (4, 5, 6)]\nprint(count_first_elements(test_tup))  # Output: {1: 2, 2: 2, 3: 2, 4: 3}\n",
        "generated_testcode": "",
        "test": "assert count_first_elements((1, 5, 7, (4, 6), 10) ) == 3\nassert count_first_elements((2, 9, (5, 7), 11) ) == 2\nassert count_first_elements((11, 15, 5, 8, (2, 3), 8) ) == 4",
        "canonical_solution": "def count_first_elements(test_tup):\r\n  for count, ele in enumerate(test_tup):\r\n    if isinstance(ele, tuple):\r\n      break\r\n  return (count) "
    },
    {
        "number": 279,
        "prompt": "Write a function to find the nth decagonal number.\ndef is_num_decagonal(n): \n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    import math\n    if n == 1: \n        return 1\n    elif n <= 0: \n        return 0\n    else: \n        return n * (3 * n - 1)\n\ndef decagonal_number(n): \n    for i in range(2, n+1): \n        return is_num_decagonal(n) + i\n\nprint(decagonal_number(10)) ",
        "generated_testcode": "assert is_num_decagonal(1) == 1\n",
        "test": "assert is_num_decagonal(3) == 27\nassert is_num_decagonal(7) == 175\nassert is_num_decagonal(10) == 370",
        "canonical_solution": "def is_num_decagonal(n): \r\n\treturn 4 * n * n - 3 * n "
    },
    {
        "number": 280,
        "prompt": "Write a function to search an element in the given array by using sequential search.\ndef sequential_search(dlist, item):\n",
        "checkpoint": "13B",
        "pass": 6,
        "correct": true,
        "answer": "    found = False\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            found = True\n            break\n    return found\n\n# Test the function with a sample array\nprint(sequential_search([1, 4, 2, 6, 8, 5, 3, 7], 6))  # Output: True\nprint(sequential_search([1, 4, 2, 6, 8, 5, 3, 7], 10))  # Output: False\n\n\n# Time Complexity: O(n)\n# Space Complexity: O(1)\n",
        "generated_testcode": "assert sequential_search([1, 2, 3, 4, 5, 6, 7, 8, 9], 5) == True\n",
        "test": "assert sequential_search([11,23,58,31,56,77,43,12,65,19],31) == (True, 3)\nassert sequential_search([12, 32, 45, 62, 35, 47, 44, 61],61) == (True, 7)\nassert sequential_search([9, 10, 17, 19, 22, 39, 48, 56],48) == (True, 6)",
        "canonical_solution": "def sequential_search(dlist, item):\r\n    pos = 0\r\n    found = False\r\n    while pos < len(dlist) and not found:\r\n        if dlist[pos] == item:\r\n            found = True\r\n        else:\r\n            pos = pos + 1\r\n    return found, pos"
    },
    {
        "number": 281,
        "prompt": "Write a python function to check if the elements of a given list are unique or not.\ndef all_unique(test_list):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    if len(set(test_list)) == len(test_list):\n        return True\n    else:\n        return False\n\n# Test cases\nprint(all_unique([1, 2, 3, 4, 5, 6]))   # Output: True\nprint(all_unique([1, 2, 3, 2, 4, 5]))   # Output: False\nprint(all_unique([]))   # Output: True\nprint(all_unique([1, 1, 1, 1, 1]))   # Output: False\n\n# Time Complexity: O(n)\n# Space Complexity: O(n)\n",
        "generated_testcode": "assert all_unique([1, 2, 3, 4, 5]) == True\n",
        "test": "assert all_unique([1,2,3]) == True\nassert all_unique([1,2,1,2]) == False\nassert all_unique([1,2,3,4,5]) == True",
        "canonical_solution": "def all_unique(test_list):\r\n    if len(test_list) > len(set(test_list)):\r\n        return False\r\n    return True"
    },
    {
        "number": 282,
        "prompt": "Write a function to substaract two lists using map and lambda function.\ndef sub_list(nums1,nums2):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": true,
        "answer": "    return list(map(lambda x,y: x-y, nums1, nums2))\n\n# Test the function with the example given\nprint(sub_list([1,2,3,4],[10,20,30,40])) # should return [-9,-18,-26,-34]\n\n# Output: [-9, -18, -26, -34]\n",
        "generated_testcode": "assert sub_list([1,2,3],[4,5,6]) == [-3,-3,-3]\n",
        "test": "assert sub_list([1, 2, 3],[4,5,6])==[-3,-3,-3]\nassert sub_list([1,2],[3,4])==[-2,-2]\nassert sub_list([90,120],[50,70])==[40,50]",
        "canonical_solution": "def sub_list(nums1,nums2):\r\n  result = map(lambda x, y: x - y, nums1, nums2)\r\n  return list(result)"
    },
    {
        "number": 283,
        "prompt": "Write a python function to check whether the frequency of each digit is less than or equal to the digit itself.\ndef validate(n): \n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": true,
        "answer": "    digits = str(n) \n    for i in digits: \n        if digits.count(i) > int(i): \n            return False\n    return True\n\n# Test the function with some test cases\nprint(validate(1234567)) # True\nprint(validate(123456789)) # False\nprint(validate(12345678)) # True\nprint(validate(12345567)) # True\nprint(validate(123456)) # True \nprint(validate(12345)) # True \nprint(validate(12344567)) # False ",
        "generated_testcode": "assert validate(123456789) == True\n",
        "test": "assert validate(1234) == True\nassert validate(51241) == False\nassert validate(321) == True",
        "canonical_solution": "def validate(n): \r\n    for i in range(10): \r\n        temp = n;  \r\n        count = 0; \r\n        while (temp): \r\n            if (temp % 10 == i): \r\n                count+=1;  \r\n            if (count > i): \r\n                return False\r\n            temp //= 10; \r\n    return True"
    },
    {
        "number": 284,
        "prompt": "Write a function to check whether all items of a list are equal to a given string.\ndef check_element(list,element):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    for i in list:\n        if i!=element:\n            return False\n    return True\n\n# Example usage:\nprint(check_element(['a','a','a','a','a'],'a')) # Output: True\nprint(check_element(['a','a','a','b'],'a')) # Output: False\nprint(check_element([],'a')) # Output: False\nprint(check_element(['a'],'b')) # Output: False\nprint(check_element(['a','a','a','a','b'],'b')) # Output: False ",
        "generated_testcode": "assert check_element(['a','a','a','a'],'a') == True\n",
        "test": "assert check_element([\"green\", \"orange\", \"black\", \"white\"],'blue')==False\nassert check_element([1,2,3,4],7)==False\nassert check_element([\"green\", \"green\", \"green\", \"green\"],'green')==True",
        "canonical_solution": "def check_element(list,element):\r\n  check_element=all(v== element for v in list)\r\n  return check_element"
    },
    {
        "number": 285,
        "prompt": "Write a function that matches a string that has an a followed by two to three 'b'.\ndef text_match_two_three(text):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    return re.search(r'a(b{2,3})', text)\n\n# Example usage:\nprint(text_match_two_three('aabbb')) # Output: <re.Match object; span=(0, 4), match='aabb'>\nprint(text_match_two_three('aaabbbb')) # Output: <re.Match object; span=(0, 6), match='aabbbb'>\nprint(text_match_two_three('aaa')) # Output: None\nprint(text_match_two_three('ab')) # Output: None\nprint(text_match_two_three('a')) # Output: None\nprint(text_match_two_three('abbbb')) # Output: None\nprint(text_match_two_three('abbbbb')) # Output: None\n\n# This function uses the regex pattern r'a(b{2,3})' to match an 'a' followed by two to three 'b's. The pattern 'b{2,3}' matches 2 to 3 occurrences of 'b'. The re.search() function returns a match object if the pattern is found in the text, otherwise it returns None. ",
        "generated_testcode": "assert text_match_two_three(\"abbb\") == True\n",
        "test": "assert text_match_two_three(\"ac\")==('Not matched!')\nassert text_match_two_three(\"dc\")==('Not matched!')\nassert text_match_two_three(\"abbbba\")==('Found a match!')",
        "canonical_solution": "import re\r\ndef text_match_two_three(text):\r\n        patterns = 'ab{2,3}'\r\n        if re.search(patterns,  text):\r\n                return 'Found a match!'\r\n        else:\r\n                return('Not matched!')"
    },
    {
        "number": 286,
        "prompt": "Write a function to find the largest sum of contiguous array in the modified array which is formed by repeating the given array k times.\ndef max_sub_array_sum_repeated(a, n, k): \n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    if k == 1: \n        return max_sub_array_sum(a, n) \n    max_sum = float('-inf')\n    for i in range(n): \n        curr_sum = a[i] \n        for j in range(i + 1, min(i + n, n * k)): \n            curr_sum += a[j % n] \n            max_sum = max(max_sum, curr_sum) \n    return max_sum \n\ndef max_sub_array_sum(a, n): \n    max_so_far = a[0] \n    max_ending_here = a[0] \n    for i in range(1, n): \n        max_ending_here = max(a[i], max_ending_here + a[i]) \n        max_so_far = max(max_so_far, max_ending_here) \n    return max_so_far \n\n# Example usage:\na = [1, 2, -5, 6, -3, 4, 2, -2, 3] \nn = len(a) \nk = 3\nprint(max_sub_array_sum_repeated(a, n, k)) ",
        "generated_testcode": "assert max_sub_array_sum_repeated([1, 2, -5, 3, 4, -2, 7, 10, 8], 3, 2) == 33\n",
        "test": "assert max_sub_array_sum_repeated([10, 20, -30, -1], 4, 3) == 30\nassert max_sub_array_sum_repeated([-1, 10, 20], 3, 2) == 59\nassert max_sub_array_sum_repeated([-1, -2, -3], 3, 3) == -1",
        "canonical_solution": "def max_sub_array_sum_repeated(a, n, k): \r\n\tmax_so_far = -2147483648\r\n\tmax_ending_here = 0\r\n\tfor i in range(n*k): \r\n\t\tmax_ending_here = max_ending_here + a[i%n] \r\n\t\tif (max_so_far < max_ending_here): \r\n\t\t\tmax_so_far = max_ending_here \r\n\t\tif (max_ending_here < 0): \r\n\t\t\tmax_ending_here = 0\r\n\treturn max_so_far"
    },
    {
        "number": 287,
        "prompt": "Write a python function to find the sum of squares of first n even natural numbers.\ndef square_Sum(n):  \n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    sum = 0\n    for i in range(1,n+1):\n        if i % 2 == 0:\n            sum += i**2\n    return sum\n\nn = int(input(\"Enter a positive integer: \"))\nprint(\"The sum of squares of first\", n, \"even natural numbers is:\", square_Sum(n)) ",
        "generated_testcode": "assert square_Sum(10) == 285\n",
        "test": "assert square_Sum(2) == 20\nassert square_Sum(3) == 56\nassert square_Sum(4) == 120",
        "canonical_solution": "def square_Sum(n):  \r\n    return int(2*n*(n+1)*(2*n+1)/3)"
    },
    {
        "number": 288,
        "prompt": "Write a function to count array elements having modular inverse under given prime number p equal to itself.\ndef modular_inverse(arr, N, P):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    count = 0\n    for i in arr:\n        if pow(i, N-2, P) == 1:\n            count += 1\n    return count\n\n# Example usage:\narr = [1, 2, 3, 4, 5, 6, 7, 8, 9]\nN = 3\nP = 3\nprint(modular_inverse(arr, N, P)) # Output: 3\n\narr = [1, 2, 3, 4, 5, 6, 7, 8, 9]\nN = 4\nP = 5\nprint(modular_inverse(arr, N, P)) # Output: 1\n\narr = [1, 2, 3, 4, 5, 6, 7, 8, 9]\nN = 5\nP = 7\nprint(modular_inverse(arr, N, P)) # Output: 2\n\narr = [1, 2, 3, 4, 5, 6, 7, 8, 9]\nN = 6\nP = 7\nprint(modular_inverse(arr, N, P)) # Output: 1\n\narr = [1, 2, 3, 4, 5, 6, 7, 8, 9]\nN = 7\nP = 7\nprint(modular_inverse(arr, N, P)) # Output: 1\n",
        "generated_testcode": "assert modular_inverse([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 11) == 3\n",
        "test": "assert modular_inverse([ 1, 6, 4, 5 ], 4, 7) == 2\nassert modular_inverse([1, 3, 8, 12, 12], 5, 13) == 3\nassert modular_inverse([2, 3, 4, 5], 4, 6) == 1",
        "canonical_solution": "def modular_inverse(arr, N, P):\r\n\tcurrent_element = 0\r\n\tfor i in range(0, N):\r\n\t\tif ((arr[i] * arr[i]) % P == 1):\r\n\t\t\tcurrent_element = current_element + 1\r\n\treturn current_element"
    },
    {
        "number": 289,
        "prompt": "Write a python function to calculate the number of odd days in a given year.\ndef odd_Days(N): \n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    count = 0\n    for year in range(1,N+1): \n        for month in range(1, 13): \n            if month == 2: \n                if (year%4 == 0 and (year%100 != 0 or year%400 == 0): \n                    count += 1\n            elif month == 4 or month == 6 or month == 9 or month == 11: \n                count += 1\n    return count \nyear = int(input(\"Enter a year: \") \nprint(\"Number of odd days in the year\", year, \"is\", odd_Days(year)) ",
        "generated_testcode": "assert odd_Days(2020) == 256\n",
        "test": "assert odd_Days(100) == 5\nassert odd_Days(50) ==6\nassert odd_Days(75) == 2",
        "canonical_solution": "def odd_Days(N): \r\n    hund1 = N // 100\r\n    hund4 = N // 400\r\n    leap = N >> 2\r\n    ordd = N - leap \r\n    if (hund1): \r\n        ordd += hund1 \r\n        leap -= hund1 \r\n    if (hund4): \r\n        ordd -= hund4 \r\n        leap += hund4 \r\n    days = ordd + leap * 2\r\n    odd = days % 7\r\n    return odd "
    },
    {
        "number": 290,
        "prompt": "Write a function to find the list of lists with maximum length.\ndef max_length(list1):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    max_len = 0\n    max_list = []\n    for lst in list1:\n        if len(lst) > max_len:\n            max_len = len(lst)\n            max_list = [lst]\n        elif len(lst) == max_len:\n            max_list.append(lst)\n    return max_list\n\n# Test the function\nlists = [[1,2], [3,4,5], [6,7,8,9], [10], [11,12,13,14,15], [16,17,18,19,20,21], [22,23]]\nprint(max_length(lists)) # Output: [[3, 4, 5], [11, 12, 13, 14, 15], [16, 17, 18, 19, 20, 21]]\n\n# Explanation:\n# The first list has a length of 2, the second list has a length of 3, the third list has a length of 4,\n# the fourth list has a length of 4, the fifth list has a length of 5, and the sixth list has a length of 5.\n# Therefore, the function should return a list containing the lists with maximum length.\n",
        "generated_testcode": "",
        "test": "assert max_length([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [13, 15, 17])\nassert max_length([[1], [5, 7], [10, 12, 14,15]])==(4, [10, 12, 14,15])\nassert max_length([[5], [15,20,25]])==(3, [15,20,25])",
        "canonical_solution": "def max_length(list1):\r\n    max_length = max(len(x) for x in  list1 )  \r\n    max_list = max((x) for x in   list1)\r\n    return(max_length, max_list)"
    },
    {
        "number": 291,
        "prompt": "Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\ndef count_no_of_ways(n, k): \n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    dp = [[0] * k for _ in range(n)] \n    dp[0] = [1] * k \n    for i in range(1, n): \n        for j in range(k): \n            dp[i][j] = sum(dp[i-1][:j]) + dp[i-1][j+1:] \n            if j > 0: \n                dp[i][j] += dp[i-1][j-1] \n    return sum(dp[n-1]) ",
        "generated_testcode": "assert count_no_of_ways(3, 2) == 6\n",
        "test": "assert count_no_of_ways(2, 4) == 16\nassert count_no_of_ways(3, 2) == 6\nassert count_no_of_ways(4, 4) == 228",
        "canonical_solution": "def count_no_of_ways(n, k): \r\n\tdp = [0] * (n + 1) \r\n\ttotal = k \r\n\tmod = 1000000007\r\n\tdp[1] = k \r\n\tdp[2] = k * k\t \r\n\tfor i in range(3,n+1): \r\n\t\tdp[i] = ((k - 1) * (dp[i - 1] + dp[i - 2])) % mod \r\n\treturn dp[n]"
    },
    {
        "number": 292,
        "prompt": "Write a python function to find quotient of two numbers.\ndef find(n,m):  \n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": true,
        "answer": "    return n/m\n\n# test the function with sample inputs\nprint(find(20,5))  # returns 4\nprint(find(10,3))  # returns 3.33333333333333333335\n\n# to find the quotient of two numbers without decimal point, use integer division\ndef find_int_quotient(n,m):  \n    return n//m\n\n# test the function with sample inputs\nprint(find_int_quotient(20,5))  # returns 4\nprint(find_int_quotient(10,3))  # returns 3 ",
        "generated_testcode": "assert find(10,5) == 2\n",
        "test": "assert find(10,3) == 3\nassert find(4,2) == 2\nassert find(20,5) == 4",
        "canonical_solution": "def find(n,m):  \r\n    q = n//m \r\n    return (q)"
    },
    {
        "number": 293,
        "prompt": "Write a function to find the third side of a right angled triangle.\ndef otherside_rightangle(w,h):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    import math\n    c = math.sqrt(w**2 + h**2)\n    return c\n\nprint(otherside_rightangle(4,3)) # should return 5.0\nprint(otherside_rightangle(3,4)) # should return 5.0\nprint(otherside_rightangle(5,12)) # should return 13.0\nprint(otherside_rightangle(12,5)) # should return 13.0\nprint(otherside_rightangle(10,5)) # should return 11.732050807568877258\nprint(otherside_rightangle(5,10)) # should return 11.732050807568877258\n\n# Output:\n# 5.0\n# 5.0\n# 13.0\n# 13.0\n# 11.732050807568877258\n# 11.732050807568877258\n\n\n# Note: The function should work for both (width, height) and (height, width) inputs. ",
        "generated_testcode": "assert otherside_rightangle(3,4) == 5\n",
        "test": "assert otherside_rightangle(7,8)==10.63014581273465\nassert otherside_rightangle(3,4)==5\nassert otherside_rightangle(7,15)==16.55294535724685",
        "canonical_solution": "import math\r\ndef otherside_rightangle(w,h):\r\n  s=math.sqrt((w*w)+(h*h))\r\n  return s"
    },
    {
        "number": 294,
        "prompt": "Write a function to find the maximum value in a given heterogeneous list.\ndef max_val(listval):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    max_val = listval[0]\n    for i in range(1, len(listval)):\n        if listval[i] > max_val:\n            max_val = listval[i]\n    return max_val\n\n# Test the function\nprint(max_val([3, \"hello\", 5.5, 7, 2, \"world\", 1, 9, -2, 3.5, 10, 2.5, 8, 1.5]))  # Output: 10\nprint(max_val([-5, 0, 10, -100, 20, 3.5, -2, 25]))  # Output: 25\nprint(max_val([1, 2, 3, 4, 5, 6, 7, 8, 9]))  # Output: 9\nprint(max_val([\"apple\", \"banana\", \"cherry\", \"date\", \"elderberry\"]))  # Output: elderberry\n\n# Write a function to find the minimum value in a given heterogeneous list.\ndef min_val(listval):\n    min_val = listval[0]\n    for i in range(1, len(listval)):\n        if listval[i] < min_val:\n            min_val = listval[i]\n    return min_val\n\n# Test the function\nprint(min_val([3, \"hello\", 5.5, 7, ",
        "generated_testcode": "assert max_val([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 9\n",
        "test": "assert max_val(['Python', 3, 2, 4, 5, 'version'])==5\nassert max_val(['Python', 15, 20, 25])==25\nassert max_val(['Python', 30, 20, 40, 50, 'version'])==50",
        "canonical_solution": "def max_val(listval):\r\n     max_val = max(i for i in listval if isinstance(i, int)) \r\n     return(max_val)"
    },
    {
        "number": 295,
        "prompt": "Write a function to return the sum of all divisors of a number.\ndef sum_div(number):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    divisors = []\n    for i in range(1, number+1):\n        if number % i == 0:\n            divisors.append(i)\n    return sum(divisors)\n\n# Test the function with the number 12\nprint(sum_div(12))\n\n# Output: 28\n\n# Test the function with the number 15\nprint(sum_div(15))\n\n# Output: 18\n\n# Test the function with the number 20\nprint(sum_div(20))\n\n# Output: 30 ",
        "generated_testcode": "assert sum_div(12) == 18\n",
        "test": "assert sum_div(8)==7\nassert sum_div(12)==16\nassert sum_div(7)==1",
        "canonical_solution": "def sum_div(number):\r\n    divisors = [1]\r\n    for i in range(2, number):\r\n        if (number % i)==0:\r\n            divisors.append(i)\r\n    return sum(divisors)"
    },
    {
        "number": 296,
        "prompt": "Write a python function to count inversions in an array.\ndef get_Inv_Count(arr,n): \n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    inv_count = 0\n    for i in range(n): \n        for j in range(i + 1, n): \n            if (arr[i] > arr[j]): \n                inv_count += 1\n  \n    return inv_count \n\n# Driver code to test above \narr = [1, 20, 6, 4, 5] \nn = len(arr) \nprint(\"Number of inversions are \", get_Inv_Count(arr, n)) \n\n# Output: Number of inversions are 3 \n# Inversion: (20,1), (20,6) and (20,5) ",
        "generated_testcode": "assert get_Inv_Count([1, 2, 3, 4, 5, 6, 7], 5) == 0\n",
        "test": "assert get_Inv_Count([1,20,6,4,5],5) == 5\nassert get_Inv_Count([1,2,1],3) == 1\nassert get_Inv_Count([1,2,5,6,1],5) == 3",
        "canonical_solution": "def get_Inv_Count(arr,n): \r\n    inv_count = 0\r\n    for i in range(n): \r\n        for j in range(i + 1,n): \r\n            if (arr[i] > arr[j]): \r\n                inv_count += 1\r\n    return inv_count "
    },
    {
        "number": 297,
        "prompt": "Write a function to flatten a given nested list structure.\ndef flatten_list(list1):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    result = []\n    for i in list1:\n        if type(i) == list:\n            result.extend(flatten_list(i))\n        else:\n            result.append(i)\n    return result\n\n# Example usage:\nnested_list = [1, 2, [3, 4, [5, 6], 7, [8, 9, [10]]]\nprint(flatten_list(nested_list)) # Output: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\n\n# Example usage:\nnested_list = [1, 2, [3, 4, [5, [6, 7], 8], 9, [10, [11, 12], 13]]\nprint(flatten_list(nested_list)) # Output: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13] ",
        "generated_testcode": "assert flatten_list([1, [2, [3, 4], 5, [6, [7, 8]]) == [1, 2, 3, 4, 5, 6, 7, 8]\n",
        "test": "assert flatten_list([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]])==[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]\nassert flatten_list([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]])==[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]\nassert flatten_list([[1,2,3], [4,5,6], [10,11,12], [7,8,9]])==[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]",
        "canonical_solution": "def flatten_list(list1):\r\n    result_list = []\r\n    if not list1: return result_list\r\n    stack = [list(list1)]\r\n    while stack:\r\n        c_num = stack.pop()\r\n        next = c_num.pop()\r\n        if c_num: stack.append(c_num)\r\n        if isinstance(next, list):\r\n            if next: stack.append(list(next))\r\n        else: result_list.append(next)\r\n    result_list.reverse()\r\n    return result_list "
    },
    {
        "number": 298,
        "prompt": "Write a function to find the nested list elements which are present in another list.\ndef intersection_nested_lists(l1, l2):\n",
        "checkpoint": "13B",
        "pass": 5,
        "correct": true,
        "answer": "    res = []\n    for i in l1:\n        if type(i) == list:\n            for j in l2:\n                if type(j) == list:\n                    if set(i) == set(j):\n                        res.append(i)\n    return res\n\n# Test the function with an example\nl1 = [1, [2, 3, 4], [3, 4, 5], 6, [5, 6, 7], 8, [7, 8, 9]]\nl2 = [2, 3, 5, 6, 7, [2, 3, 4], [5, 6, 7], [8, 9, 10]]\nprint(intersection_nested_lists(l1, l2))  # Output: [[2, 3, 4], [5, 6, 7], [8, 9]]\n\n# Test the function with another example\nl1 = [1, [2, 3], [3, 4], 5, [5, 6, 7], [7, 8]]\nl2 = [2, 4, 5, [3, 4], [5, 6], [7, 8, 9]]\nprint(intersection_nested_lists(l1, l2))  # Output: []\n",
        "generated_testcode": "",
        "test": "assert intersection_nested_lists( [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14],[[12, 18, 23, 25, 45], [7, 11, 19, 24, 28], [1, 5, 8, 18, 15, 16]])==[[12], [7, 11], [1, 5, 8]]\nassert intersection_nested_lists([[2, 3, 1], [4, 5], [6, 8]], [[4, 5], [6, 8]])==[[], []]\nassert intersection_nested_lists(['john','amal','joel','george'],[['john'],['jack','john','mary'],['howard','john'],['jude']])==[['john'], ['john'], ['john'], []]",
        "canonical_solution": "def intersection_nested_lists(l1, l2):\r\n    result = [[n for n in lst if n in l1] for lst in l2]\r\n    return result"
    },
    {
        "number": 299,
        "prompt": "Write a function to calculate the maximum aggregate from the list of tuples.\ndef max_aggregate(stdata):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": true,
        "answer": "    # Define a list to store aggregates\n    aggregate_list = []\n    # Loop through the list of tuples\n    for i in range(len(stdata)):\n        # Calculate aggregate\n        aggregate = stdata[i][0] + stdata[i][1] + stdata[i][2]\n        # Append the aggregate to the list\n        aggregate_list.append(aggregate)\n    # Return the maximum value in the list\n    return max(aggregate_list)\n\n# Test the function with the given example\nstdata = [(10, 20, 30), (5, 15, 25), (15, 5, 25), (10, 20, 30)]\nprint(max_aggregate(stdata))  # Output: 65\n\n# Explanation:\n# The maximum aggregate in the list is 65, which is calculated by adding the first element of the first tuple (10) to the second element of the first tuple (20) and the third element of the first tuple (30), which is the sum of (10, 20, 30). ",
        "generated_testcode": "assert max_aggregate([(1, 2, 3), (4, 5, 6), (7, 8, 9)]) == 24\n",
        "test": "assert max_aggregate([('Juan Whelan',90),('Sabah Colley',88),('Peter Nichols',7),('Juan Whelan',122),('Sabah Colley',84)])==('Juan Whelan', 212)\nassert max_aggregate([('Juan Whelan',50),('Sabah Colley',48),('Peter Nichols',37),('Juan Whelan',22),('Sabah Colley',14)])==('Juan Whelan', 72)\nassert max_aggregate([('Juan Whelan',10),('Sabah Colley',20),('Peter Nichols',30),('Juan Whelan',40),('Sabah Colley',50)])==('Sabah Colley', 70)",
        "canonical_solution": "from collections import defaultdict\r\ndef max_aggregate(stdata):\r\n    temp = defaultdict(int)\r\n    for name, marks in stdata:\r\n        temp[name] += marks\r\n    return max(temp.items(), key=lambda x: x[1])"
    },
    {
        "number": 300,
        "prompt": "Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\ndef count_binary_seq(n): \n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    # We can generate all binary sequences using the following recursive formula\n    # 1. First generate all binary sequences of length 2n-1\n    # 2. For each sequence, add 0 and 1 at the beginning and end to get a binary sequence of length 2n\n    # 3. Keep track of count of sequences that satisfy the condition \n    def generate_binary(n, count, prefix):\n        if n == 0:\n            if prefix[0] == prefix[-1]:\n                count += 1\n            return count\n        else:\n            count = generate_binary(n-1, count, prefix + '0')\n            count = generate_binary(n-1, count, prefix + '1')\n            return count\n        \n    return generate_binary(n, 0, '')\n\n# Test the function\nn = 3\nprint(count_binary_seq(n)) # Output: 4\n# Explanation: All binary sequences of length 2*3=6 are:\n# 000000000, 0000001, 0001010, 0010100, 010010, 01011, 10100, 10101, 11001, 11010\n# Out of these, only 00000000, 001010, 010010, 10100",
        "generated_testcode": "assert count_binary_seq(2) == 2\n",
        "test": "assert count_binary_seq(1) == 2.0\nassert count_binary_seq(2) == 6.0\nassert count_binary_seq(3) == 20.0",
        "canonical_solution": "def count_binary_seq(n): \r\n\tnCr = 1\r\n\tres = 1\r\n\tfor r in range(1, n + 1): \r\n\t\tnCr = (nCr * (n + 1 - r)) / r \r\n\t\tres += nCr * nCr \r\n\treturn res "
    },
    {
        "number": 301,
        "prompt": "Write a function to find the depth of a dictionary.\ndef dict_depth(d):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    max_depth = 0\n    for k, v in d.items():\n        if isinstance(v, dict):\n            depth = dict_depth(v)\n            if depth > max_depth:\n                max_depth = depth\n    return max_depth + 1\n\n\n# Test the function\nd = {\n    'a': 1,\n    'b': {\n        'c': 2,\n        'd': {\n            'e': 3\n        },\n        'f': 4\n    }\n}\n\nprint(dict_depth(d))  # Output: 2\n\nd = {\n    'a': 1,\n    'b': {\n        'c': {\n            'd': {\n                'e': 3,\n                'f': 4\n            }\n        },\n        'g': 5\n    }\n}\n\nprint(dict_depth(d))  # Output: 3\n\nd = {\n    'a': 1,\n    'b': {\n        'c': {\n            'd': {\n                'e': 3,\n                'f': {\n                    'g': 4\n                }\n            }\n        },\n        'h': 5\n    }\n}\n\nprint(dict_depth(d))  # Output: 3\n\nd = {\n    'a': 1\n}\n\nprint(dict_depth(d))  # Output: 1\n\nd = {}\nprint(dict_",
        "generated_testcode": "assert dict_depth({}) == 0\n",
        "test": "assert dict_depth({'a':1, 'b': {'c': {'d': {}}}})==4\nassert dict_depth({'a':1, 'b': {'c':'python'}})==2\nassert dict_depth({1: 'Sun', 2: {3: {4:'Mon'}}})==3",
        "canonical_solution": "def dict_depth(d):\r\n    if isinstance(d, dict):\r\n        return 1 + (max(map(dict_depth, d.values())) if d else 0)\r\n    return 0"
    },
    {
        "number": 302,
        "prompt": "Write a python function to find the most significant bit number which is also a set bit.\ndef set_Bit_Number(n): \n",
        "checkpoint": "13B",
        "pass": 7,
        "correct": true,
        "answer": "    # convert the number into binary and store it in a string\n    binary_num = bin(n)[2:] \n    # initialize the index variable to zero\n    index = 0\n    # loop through the binary string and check for set bit \n    for i in range(len(binary_num)): \n        if binary_num[i] == '1': \n            index = i \n    return index \n\n# test the function \nn = 13\nprint(\"The most significant bit is:\", set_Bit_Number(n)) ",
        "generated_testcode": "assert set_Bit_Number(10) == 2\n",
        "test": "assert set_Bit_Number(6) == 4\nassert set_Bit_Number(10) == 8\nassert set_Bit_Number(18) == 16",
        "canonical_solution": "def set_Bit_Number(n): \r\n    if (n == 0): \r\n        return 0; \r\n    msb = 0; \r\n    n = int(n / 2); \r\n    while (n > 0): \r\n        n = int(n / 2); \r\n        msb += 1; \r\n    return (1 << msb)"
    },
    {
        "number": 303,
        "prompt": "Write a python function to check whether the count of inversion of two types are same or not.\ndef solve(a,n):   \n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    count = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            if a[i] > a[j]:\n                count += 1\n    return count\n\n#Taking input of the array\narr = list(map(int, input(\"Enter the array elements: \"))\nn = len(arr)\n\n#calling the function\ncount = solve(arr, n)\n\n#Printing the count of inversions\nprint(\"The count of inversions is\", count)\n\n#Taking the second type of array as input\narr2 = list(map(int, input(\"Enter the second array elements: \"))\nn2 = len(arr2)\ncount2 = 0\nfor i in range(n2):\n    for j in range(i+1,n2):\n        if arr2[i] > arr2[j]:\n            count2 += 1\n\n#Printing the count of inversions of second array\nprint(\"The count of inversions is\", count2)\n\n#comparing the two counts\nif count == count2:\n    print(\"The count of inversions in both arrays are same\")\nelse:\n    print(\"The count of inversions in both arrays are different\")\n\n#Example input and output\n#Enter the array elements: 5 2 3 4 1\n#The count of inversions is 4\n#Enter the second array elements: 1 2 3 5\n#The count of inversions is 2\n#The",
        "generated_testcode": "assert solve([1,2,3,4,5,6,7],5) == True\n",
        "test": "assert solve([1,0,2],3) == True\nassert solve([1,2,0],3) == False\nassert solve([1,2,1],3) == True",
        "canonical_solution": "import sys \r\ndef solve(a,n):   \r\n    mx = -sys.maxsize - 1\r\n    for j in range(1,n):  \r\n        if (mx > a[j]):  \r\n            return False  \r\n        mx = max(mx,a[j - 1])    \r\n    return True"
    },
    {
        "number": 304,
        "prompt": "Write a python function to find element at a given index after number of rotations.\ndef find_Element(arr,ranges,rotations,index) :  \n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": true,
        "answer": "    n=len(arr)\n    if index<0 or index>=n:\n        return -1\n    else:\n        return arr[index]\n    rotations = rotations % n\n    rotated = arr[rotations:] + arr[:rotations]\n    return rotated[index]\n\n#Example usage\narr = [1,2,3,4,5,6,7,8,9,10]\nranges = 2\nrotations = 3\nindex = 4\nprint(find_Element(arr,ranges,rotations,index)) \n# Output: 8\n\n#Time Complexity: O(n) ",
        "generated_testcode": "assert find_Element([1,2,3,4,5,6,7],5,2,3) == 4\n",
        "test": "assert find_Element([1,2,3,4,5],[[0,2],[0,3]],2,1) == 3\nassert find_Element([1,2,3,4],[[0,1],[0,2]],1,2) == 3\nassert find_Element([1,2,3,4,5,6],[[0,1],[0,2]],1,1) == 1",
        "canonical_solution": "def find_Element(arr,ranges,rotations,index) :  \r\n    for i in range(rotations - 1,-1,-1 ) : \r\n        left = ranges[i][0] \r\n        right = ranges[i][1] \r\n        if (left <= index and right >= index) : \r\n            if (index == left) : \r\n                index = right \r\n            else : \r\n                index = index - 1 \r\n    return arr[index] "
    },
    {
        "number": 305,
        "prompt": "Write a function to match two words from a list of words starting with letter 'p'.\ndef start_withp(words):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    result = []\n    for word in words:\n        if word.startswith('p'):\n            result.append(word)\n    return result\n\nprint(start_withp([\"python\", \"programming\", \"apple\", \"pie\", \"pizza\"])) # Output: ['python', 'programming', 'pizza']\nprint(start_withp([\"dog\", \"cat\", \"elephant\", \"fox\"])) # Output: []\n\n# Using list comprehension\ndef start_withp(words):\n    return [word for word in words if word.startswith('p')]\n\nprint(start_withp([\"python\", \"programming\", \"apple\", \"pie\", \"pizza\"])) # Output: ['python', 'programming', 'pizza']\nprint(start_withp([\"dog\", \"cat\", \"elephant\", \"fox\"])) # Output: []\n\n# Using filter()\ndef start_withp(words):\n    return list(filter(lambda word: word.startswith('p'), words))\n\nprint(start_withp([\"python\", \"programming\", \"apple\", \"pie\", \"pizza\"])) # Output: ['python', 'programming', 'pizza']\nprint(start_withp([\"dog\", \"cat\", \"elephant\", \"fox\"])) # Output: []\n\n# Using a generator expression\ndef start_withp(words):\n    return (word for word in words if word.startswith('p'))\n\nprint(list(start_withp([\"python\", \"programming\", \"",
        "generated_testcode": "assert start_withp(['python', 'perl', 'php', 'ruby', 'java']) == ['python', 'php']\n",
        "test": "assert start_withp([\"Python PHP\", \"Java JavaScript\", \"c c++\"])==('Python', 'PHP')\nassert start_withp([\"Python Programming\",\"Java Programming\"])==('Python','Programming')\nassert start_withp([\"Pqrst Pqr\",\"qrstuv\"])==('Pqrst','Pqr')",
        "canonical_solution": "import re\r\ndef start_withp(words):\r\n for w in words:\r\n        m = re.match(\"(P\\w+)\\W(P\\w+)\", w)\r\n        if m:\r\n            return m.groups()"
    },
    {
        "number": 306,
        "prompt": "Write a function to find the maximum sum of increasing subsequence from prefix till ith index and also including a given kth element which is after i, i.e., k > i .\ndef max_sum_increasing_subseq(a, n, index, k):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    if k == 0:\n        return 0\n    if index == 0:\n        return a[0]\n\n    if k == index:\n        return max(a[index - 1], a[index])\n\n    return max(max_sum_increasing_subseq(a, index - 1, k), a[index] + max_sum_increasing_subseq(a, index - 1, k - 1))\n\n\n\n# Test case\na = [5, 1, 3, 2, 6, 4, 7, 8, 10]\nn = len(a)\nk = 5\nprint(max_sum_increasing_subseq(a, n, k))\n",
        "generated_testcode": "assert max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5], 3, 2) == 106\n",
        "test": "assert max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5 ], 7, 4, 6) == 11\nassert max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5 ], 7, 2, 5) == 7\nassert max_sum_increasing_subseq([11, 15, 19, 21, 26, 28, 31], 7, 2, 4) == 71",
        "canonical_solution": "def max_sum_increasing_subseq(a, n, index, k):\r\n\tdp = [[0 for i in range(n)] \r\n\t\t\tfor i in range(n)]\r\n\tfor i in range(n):\r\n\t\tif a[i] > a[0]:\r\n\t\t\tdp[0][i] = a[i] + a[0]\r\n\t\telse:\r\n\t\t\tdp[0][i] = a[i]\r\n\tfor i in range(1, n):\r\n\t\tfor j in range(n):\r\n\t\t\tif a[j] > a[i] and j > i:\r\n\t\t\t\tif dp[i - 1][i] + a[j] > dp[i - 1][j]:\r\n\t\t\t\t\tdp[i][j] = dp[i - 1][i] + a[j]\r\n\t\t\t\telse:\r\n\t\t\t\t\tdp[i][j] = dp[i - 1][j]\r\n\t\t\telse:\r\n\t\t\t\tdp[i][j] = dp[i - 1][j]\r\n\treturn dp[index][k]"
    },
    {
        "number": 307,
        "prompt": "Write a function to get a colon of a tuple.\ndef colon_tuplex(tuplex,m,n):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    if m < len(tuplex):\n        return tuplex[m]\n    else:\n        return None\n\n#Example usage:\ntuple_x = (1,2,3,4,5)\nprint(colon_tuplex(tuple_x,1)) #Output: 2\nprint(colon_tuplex(tuple_x,5)) #Output: None\nprint(colon_tuplex(tuple_x,10)) #Output: None\n\n\n#Write a function to get the nth element from the end of a tuple.\ndef nth_from_end(tuple,n):\n    if n <= len(tuple):\n        return tuple[-n]\n    else:\n        return None\n\n#Example usage:\ntuple_y = (1,2,3,4,5)\nprint(nth_from_end(tuple_y,2)) #Output: 4\nprint(nth_from_end(tuple_y,5)) #Output: None\nprint(nth_from_end(tuple_y,6)) #Output: None\n\n#Write a function to check if a tuple is palindrome or not.\ndef is_palindrome(tuple):\n    if tuple == tuple[::-1]:\n        return True\n    else:\n        return False\n\n#Example usage:\ntuple_z = (1,2,2,1)\nprint(is_palindrome(tuple_z)) #Output: True\n\n#Write a function to count the number of elements in a tuple.\ndef count_elements(",
        "generated_testcode": "assert colon_tuplex((1,2,3,4,5,6,7,8,9),2,5) == (3,4,5,6)\n",
        "test": "assert colon_tuplex((\"HELLO\", 5, [], True) ,2,50)==(\"HELLO\", 5, [50], True) \nassert colon_tuplex((\"HELLO\", 5, [], True) ,2,100)==((\"HELLO\", 5, [100],True))\nassert colon_tuplex((\"HELLO\", 5, [], True) ,2,500)==(\"HELLO\", 5, [500], True)",
        "canonical_solution": "from copy import deepcopy\r\ndef colon_tuplex(tuplex,m,n):\r\n  tuplex_colon = deepcopy(tuplex)\r\n  tuplex_colon[m].append(n)\r\n  return tuplex_colon"
    },
    {
        "number": 308,
        "prompt": "Write a function to find the specified number of largest products from two given lists.\ndef large_product(nums1, nums2, N):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    product_list = []\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            product_list.append(nums1[i] * nums2[j])\n    product_list.sort(reverse=True)\n    return product_list[:N]\n\n# Test the function\nnums1 = [1, 2, 3, 4, 5]\nnums2 = [5, 6, 7, 8]\nN = 3\nprint(large_product(nums1, nums2, N))\n# Output: [40, 35, 32]\n\nnums1 = [10, 20, 30]\nnums2 = [10, 20, 30]\nN = 2\nprint(large_product(nums1, nums2, N))\n# Output: [600, 1200] ",
        "generated_testcode": "assert large_product([1, 2, 3, 4, 5], [6, 7, 8, 9], 2) == [56, 68]\n",
        "test": "assert large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],3)==[60, 54, 50]\nassert large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],4)==[60, 54, 50, 48]\nassert large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],5)==[60, 54, 50, 48, 45]",
        "canonical_solution": "def large_product(nums1, nums2, N):\r\n    result = sorted([x*y for x in nums1 for y in nums2], reverse=True)[:N]\r\n    return result"
    },
    {
        "number": 309,
        "prompt": "Write a python function to find the maximum of two numbers.\ndef maximum(a,b):   \n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    if a > b:\n        return a\n    else:\n        return b\n\n# Test the function with some sample values\nprint(maximum(5, 10))  # Output: 10\nprint(maximum(20, 10)) # Output: 20\nprint(maximum(10, 20)) # Output: 20\n\n# function to find the minimum of two numbers\ndef minimum(a,b):\n    if a < b:\n        return a\n    else:\n        return b\n\n# Test the function with some sample values\nprint(minimum(5, 10))  # Output: 5\nprint(minimum(20, 10)) # Output: 10\nprint(minimum(10, 20)) # Output: 10\n\n# function to find the average of three numbers\ndef average(a,b,c):\n    return (a+b+c)/3\n\n# Test the function with some sample values\nprint(average(2, 4, 6))   # Output: 4.0\nprint(average(10, 12, 14)) # Output: 12.0\nprint(average(6, 8, 12))   # Output: 9.0 \n\n# function to find the square of a number\ndef square(n):\n    return n*n\n\n# Test the function with some sample values\nprint(square(5))  # Output: 25\n",
        "generated_testcode": "assert maximum(10, 20) == 20\n",
        "test": "assert maximum(5,10) == 10\nassert maximum(-1,-2) == -1\nassert maximum(9,7) == 9",
        "canonical_solution": "def maximum(a,b):   \r\n    if a >= b: \r\n        return a \r\n    else: \r\n        return b "
    },
    {
        "number": 310,
        "prompt": "Write a function to convert a given string to a tuple.\ndef string_to_tuple(str1):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    #convert the string to a tuple\n    return tuple(str1)\n\n#Example usage:\nprint(string_to_tuple(\"Hello World\")) # output: ('H', 'e', 'l', 'l', 'o', ' ', 'W', 'o', 'r', 'l', 'd')\n\n#Test the function with the given example\nprint(string_to_tuple(\"Hello World\")) # output: ('H', 'e', 'l', 'l', 'o', ' ', 'W', 'o', 'r', 'l', 'd')\n\n#Test the function with an empty string\nprint(string_to_tuple(\"\")) # output: ()\n\n#Test the function with a string with only spaces\nprint(string_to_tuple(\"     \")) # output: (' ', ' ', ' ', ' ', ' ')\n\n#Test the function with a string with special characters\nprint(string_to_tuple(\"Hello, World!\")) # output: ('H', 'e', 'l', 'l', 'o', ',', ' ', 'W', 'o', 'r', 'l', 'd', '!') ",
        "generated_testcode": "assert string_to_tuple(\"hello\") == (\"h\", \"e\", \"l\", \"l\", \"o\")\n",
        "test": "assert string_to_tuple(\"python 3.0\")==('p', 'y', 't', 'h', 'o', 'n', '3', '.', '0')\nassert string_to_tuple(\"item1\")==('i', 't', 'e', 'm', '1')\nassert string_to_tuple(\"15.10\")==('1', '5', '.', '1', '0')",
        "canonical_solution": "def string_to_tuple(str1):\r\n    result = tuple(x for x in str1 if not x.isspace()) \r\n    return result"
    },
    {
        "number": 311,
        "prompt": "Write a python function to set the left most unset bit.\ndef set_left_most_unset_bit(n): \n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    return n | (n + 1) ",
        "generated_testcode": "assert set_left_most_unset_bit(0b111101) == 0b1000000\n",
        "test": "assert set_left_most_unset_bit(10) == 14\nassert set_left_most_unset_bit(12) == 14\nassert set_left_most_unset_bit(15) == 15",
        "canonical_solution": "def set_left_most_unset_bit(n): \r\n    if not (n & (n + 1)): \r\n        return n \r\n    pos, temp, count = 0, n, 0 \r\n    while temp: \r\n        if not (temp & 1): \r\n            pos = count      \r\n        count += 1; temp>>=1\r\n    return (n | (1 << (pos))) "
    },
    {
        "number": 312,
        "prompt": "Write a function to find the volume of a cone.\ndef volume_cone(r,h):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    pi = 3.14159\n    return (1/3)*pi*r**2*h\n\n# Test the function with values\nprint(volume_cone(5,10)) # should output 523.6\nprint(volume_cone(10,20)) # should output 314.159\nprint(volume_cone(15,25)) # should output 7495.775\n\n# Calculate the volume of a sphere\ndef volume_sphere(r):\n    pi = 3.14159\n    return (4/3)*pi*r**3\n\n# Test the function with values\nprint(volume_sphere(5)) # should output 523.6\nprint(volume_sphere(10)) # should output 41888.79\nprint(volume_sphere(15)) # should output 6410.776\n\n# Calculate the area of a circle\ndef area_circle(r):\n    pi = 3.14159\n    return pi*r**2\n\n# Test the function with values\nprint(area_circle(5)) # should output 78.5\nprint(area_circle(10)) # should output 785.0\nprint(area_circle(15)) # should output 1570.796\n\n# Calculate the area of a rectangle\ndef area_rectangle(l,w):\n",
        "generated_testcode": "assert volume_cone(3,5) == 113.04761904761904762\n",
        "test": "assert volume_cone(5,12)==314.15926535897927\nassert volume_cone(10,15)==1570.7963267948965\nassert volume_cone(19,17)==6426.651371693521",
        "canonical_solution": "import math\r\ndef volume_cone(r,h):\r\n  volume = (1.0/3) * math.pi * r * r * h\r\n  return volume"
    },
    {
        "number": 313,
        "prompt": "Write a python function to print positive numbers in a list.\ndef pos_nos(list1):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    for i in list1:\n        if i >= 0:\n            print(i)\n\nlist1 = [-1, 0, 1, 2, 3, 4, -5, 6, 0]\npos_nos(list1)\n\n# Output: 1 2 3 4 6\n\n# Explanation: The function will print all the positive numbers in the list.\n\n# Positive numbers are those numbers greater than or equal to 0. ",
        "generated_testcode": "assert pos_nos([-1, 2, 0, 3, -4, 5, 6, -7]) == [2, 3, 5, 6]\n",
        "test": "assert pos_nos([-1,-2,1,2]) == 1,2\nassert pos_nos([3,4,-5]) == 3,4\nassert pos_nos([-2,-3,1]) == 1",
        "canonical_solution": "def pos_nos(list1):\r\n  for num in list1: \r\n    if num >= 0: \r\n       return num "
    },
    {
        "number": 314,
        "prompt": "Write a function to find out the maximum sum such that no two chosen numbers are adjacent for the given rectangular grid of dimension 2 x n.\ndef max_sum_rectangular_grid(grid, n) : \n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    row = len(grid)\n    col = len(grid[0])\n    max_sum = -1*float('inf')\n    for i in range(n): \n        for j in range(col-n): \n            curr_sum = 0\n            for k in range(n): \n                curr_sum += grid[i][j+k] \n            for k in range(1,n): \n                curr_sum += grid[i+k][j+k] \n            max_sum = max(max_sum, curr_sum) \n    return max_sum \n\n#Testing the function \ngrid = [[1, 2, 3, 4, 5, 6], \n        [7, 8, 9, 10, 11], \n        [12, 13, 14, 15, 16], \n        [17, 18, 19, 20, 21]] \nn = 3\nprint(max_sum_rectangular_grid(grid, n)) # Output: 82 \n\n#Time Complexity : O(n^2) \n#Space Complexity : O(1)\n\n#Reference : https://www.geeksforgeeks.org/maximum-sum-submatrix-such-that-no-two-elements-are-adjacent/ ",
        "generated_testcode": "assert max_sum_rectangular_grid([[1, 2, 3, 4, 5], [6, 7, 8, 9]], 2) == 20\n",
        "test": "assert max_sum_rectangular_grid([ [1, 4, 5], [2, 0, 0 ] ], 3) == 7\nassert max_sum_rectangular_grid([ [ 1, 2, 3, 4, 5], [ 6, 7, 8, 9, 10] ], 5) == 24\nassert max_sum_rectangular_grid([ [7, 9, 11, 15, 19], [21, 25, 28, 31, 32] ], 5) == 81",
        "canonical_solution": "def max_sum_rectangular_grid(grid, n) : \r\n\tincl = max(grid[0][0], grid[1][0]) \r\n\texcl = 0\r\n\tfor i in range(1, n) : \r\n\t\texcl_new = max(excl, incl) \r\n\t\tincl = excl + max(grid[0][i], grid[1][i]) \r\n\t\texcl = excl_new \r\n\treturn max(excl, incl)"
    },
    {
        "number": 315,
        "prompt": "Write a python function to find the first maximum length of even word.\ndef find_Max_Len_Even(str): \n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    max_len = 0\n    for word in str.split(): \n        if len(word) % 2 == 0: \n            max_len = max(max_len, len(word)) \n    return max_len \n  \n# Driver code \nstring = \"python is an easy to learn language\"\nprint(\"The maximum length of even word in the given string is:\",find_Max_Len_Even(string)) \n  \n# This will output: 4\n# Here, the even length words are \"python\", \"an\", \"learn\" and \"language\"\n# and their length is 6, 3, 5 and 8 respectively. \n# So the output will be 6. \n\n#Time Complexity: O(n) where n is the length of the string as we are iterating through the string once. ",
        "generated_testcode": "assert find_Max_Len_Even(\"Python is awesome\") == 4\n",
        "test": "assert find_Max_Len_Even(\"python language\") == \"language\"\nassert find_Max_Len_Even(\"maximum even length\") == \"length\"\nassert find_Max_Len_Even(\"eve\") == \"-1\"",
        "canonical_solution": "def find_Max_Len_Even(str): \r\n    n = len(str) \r\n    i = 0\r\n    currlen = 0\r\n    maxlen = 0\r\n    st = -1\r\n    while (i < n): \r\n        if (str[i] == ' '): \r\n            if (currlen % 2 == 0): \r\n                if (maxlen < currlen): \r\n                    maxlen = currlen \r\n                    st = i - currlen \r\n            currlen = 0 \r\n        else : \r\n            currlen += 1\r\n        i += 1\r\n    if (currlen % 2 == 0): \r\n        if (maxlen < currlen): \r\n            maxlen = currlen \r\n            st = i - currlen \r\n    if (st == -1): \r\n        return \"-1\" \r\n    return str[st: st + maxlen] "
    },
    {
        "number": 316,
        "prompt": "Write a function to find the index of the last occurrence of a given number in a sorted array.\ndef find_last_occurrence(A, x):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": true,
        "answer": "    \"\"\"\n    Input: A: a sorted array, x: an integer\n    Output: an integer, the index of the last occurrence of x in A, or -1 if x does not exist in A\n    \"\"\"\n    lo, hi = 0, len(A) - 1\n    while lo < hi:\n        mid = (lo + hi) // 2\n        if A[mid] < x:\n            lo = mid + 1\n        else:\n            hi = mid\n    if lo < len(A) and A[lo] == x:\n        return lo\n    else:\n        return -1\n\n# test case\nA = [1, 2, 3, 3, 3, 3, 4, 5, 6, 6, 7, 7, 8]\nprint(find_last_occurrence(A, 3))  # output: 3\nprint(find_last_occurrence(A, 6))  # output: 7\nprint(find_last_occurrence(A, 10))  # output: -1\nprint(find_last_occurrence(A, 0))  # output: -1\nprint(find_last_occurrence(A, 1))  # output: 0\nprint(find_last_occurrence(A, 8))  # output: 8\nprint(find_last_occurrence(A, -1)) # output: -1\nprint(find_last_occurrence([], 1)) # output:",
        "generated_testcode": "assert find_last_occurrence([1, 2, 3, 4, 4, 4, 5, 6, 7], 4) == 3\n",
        "test": "assert find_last_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5) == 3\nassert find_last_occurrence([2, 3, 5, 8, 6, 6, 8, 9, 9, 9], 9) == 9\nassert find_last_occurrence([2, 2, 1, 5, 6, 6, 6, 9, 9, 9], 6) == 6",
        "canonical_solution": "def find_last_occurrence(A, x):\r\n    (left, right) = (0, len(A) - 1)\r\n    result = -1\r\n    while left <= right:\r\n        mid = (left + right) // 2\r\n        if x == A[mid]:\r\n            result = mid\r\n            left = mid + 1\r\n        elif x < A[mid]:\r\n            right = mid - 1\r\n        else:\r\n            left = mid + 1\r\n    return result "
    },
    {
        "number": 317,
        "prompt": "Write a function to reflect the modified run-length encoding from a list.\ndef modified_encode(alist):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    encoded_list = []\n    count = 1\n    for i in range(len(alist)-1):\n        if alist[i] == alist[i+1]:\n            count += 1\n        else:\n            encoded_list.append((alist[i], count) if count != 1 else alist[i])\n            count = 1\n    encoded_list.append((alist[-1], count) if count != 1 else alist[-1])\n    return encoded_list\n\n# Test the function\nalist = ['A', 'B', 'B', 'A', 'C', 'C', 'A', 'A', 'A']\nprint(modified_encode(alist))  # Output: [('A', 1), ('B', 2), ('C', 2), 'A']\nalist = ['A', 'B', 'B', 'B', 'C', 'C', 'C', 'A', 'A', 'A', 'A']\nprint(modified_encode(alist))  # Output: [('A', 1), ('B', 2), ('C', 2), 'A', ('A', 2)] ",
        "generated_testcode": "",
        "test": "assert modified_encode([1,1,2,3,4,4,5,1])==[[2, 1], 2, 3, [2, 4], 5, 1]\nassert modified_encode('automatically')==['a', 'u', 't', 'o', 'm', 'a', 't', 'i', 'c', 'a', [2, 'l'], 'y']\nassert modified_encode('python')==['p', 'y', 't', 'h', 'o', 'n']",
        "canonical_solution": "from itertools import groupby\r\ndef modified_encode(alist):\r\n        def ctr_ele(el):\r\n            if len(el)>1: return [len(el), el[0]]\r\n            else: return el[0]\r\n        return [ctr_ele(list(group)) for key, group in groupby(alist)]"
    },
    {
        "number": 318,
        "prompt": "Write a python function to find the maximum volume of a cuboid with given sum of sides.\ndef max_volume (s): \n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    for a in range(1, s):\n        for b in range(a+1, s):\n            c = s - a - b\n            if a * b * c == s:\n                return (a*b*c)\n    return -1\n\n# Testing\nprint(max_volume(12)) # Output: 6\nprint(max_volume(15)) # Output: -1\nprint(max_volume(18)) # Output: 6\nprint(max_volume(24)) # Output: 12\nprint(max_volume(25)) # Output: 12\nprint(max_volume(30)) # Output: 27\nprint(max_volume(36)) # Output: 24\nprint(max_volume(42)) # Output: 27\nprint(max_volume(54)) # Output: 24\nprint(max_volume(60)) # Output: 24\nprint(max_volume(72)) # Output: 24\nprint(max_volume(84)) # Output: 36\nprint(max_volume(120)) # Output: 60\nprint(max_volume(125)) # Output: -1\nprint(max_volume(126)) # Output: 27\nprint(max_volume(127)) # Output: 36\nprint(max_volume(128)) # Output: 24\nprint(max_volume(129)) # Output:",
        "generated_testcode": "assert max_volume(10) == 1\n",
        "test": "assert max_volume(8) == 18\nassert max_volume(4) == 2\nassert max_volume(1) == 0",
        "canonical_solution": "def max_volume (s): \r\n    maxvalue = 0\r\n    i = 1\r\n    for i in range(s - 1): \r\n        j = 1\r\n        for j in range(s): \r\n            k = s - i - j \r\n            maxvalue = max(maxvalue, i * j * k)         \r\n    return maxvalue "
    },
    {
        "number": 319,
        "prompt": "Write a function to find all five characters long word in the given string by using regex.\ndef find_long_word(text):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    words = re.findall(r'\\b\\w{5}\\b', text)\n    return words\n\n# Test the function with the following string\ntext = \"This is a sample text with a five character long word called algorithm\"\nprint(find_long_word(text)) # should return ['sample']\n\n# Test the function with the following string\ntext = \"This is a sample text with a five character long word called algorithm and a six character long word called string\"\nprint(find_long_word(text)) # should return []\n\n# Test the function with the following string\ntext = \"This is a sample text with a five character long word called algorithm and a five character long word called string\"\nprint(find_long_word(text)) # should return ['sample', 'string']\n\n# Test the function with the following string\ntext = \"This is a sample text with a five character long word called algorithm and a five character long word called string and a six character long word called programming\"\nprint(find_long_word(text)) # should return ['sample', 'string'] ",
        "generated_testcode": "assert find_long_word(\"The quick brown fox jumps over the lazy dog\") == \"quick\"\n",
        "test": "assert find_long_word('Please move back to strem') == ['strem']\nassert find_long_word('4K Ultra HD streaming player') == ['Ultra']\nassert find_long_word('Streaming Media Player') == ['Media']",
        "canonical_solution": "import re\r\ndef find_long_word(text):\r\n  return (re.findall(r\"\\b\\w{5}\\b\", text))"
    },
    {
        "number": 320,
        "prompt": "Write a function to calculate the difference between the squared sum of first n natural numbers and the sum of squared first n natural numbers.\ndef sum_difference(n):\n",
        "checkpoint": "13B",
        "pass": 6,
        "correct": true,
        "answer": "    sum_of_squares = 0\n    square_of_sum = 0\n    for i in range(1, n+1):\n        sum_of_squares += i**2\n        square_of_sum += i\n    square_of_sum = square_of_sum**2\n    return square_of_sum - sum_of_squares\n\nprint(sum_difference(10))\nprint(sum_difference(100))\nprint(sum_difference(1000))\nprint(sum_difference(10000))",
        "generated_testcode": "assert sum_difference(10) == 2640\n",
        "test": "assert sum_difference(12)==5434\nassert sum_difference(20)==41230\nassert sum_difference(54)==2151270",
        "canonical_solution": "def sum_difference(n):\r\n    sumofsquares = 0\r\n    squareofsum = 0\r\n    for num in range(1, n+1):\r\n        sumofsquares += num * num\r\n        squareofsum += num\r\n    squareofsum = squareofsum ** 2\r\n    return squareofsum - sumofsquares"
    },
    {
        "number": 321,
        "prompt": "Write a function to find the demlo number for the given number.\ndef find_demlo(s): \n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    # code here \n    count = 0\n    for i in s:\n        if i=='1' or i=='0' or i=='8':\n            count+=1\n    return count\n    \n# Testing the function with some test cases\nprint(find_demlo(\"12345678\")) # Output: 2\nprint(find_demlo(\"123456\")) # Output: 0\nprint(find_demlo(\"121234\")) # Output: 3\nprint(find_demlo(\"801212\")) # Output: 4\nprint(find_demlo(\"18120120\")) # Output: 4\n\n\n# Time Complexity: O(n)\n# Space Complexity: O(1)\n\n# Explanation:\n\n# We iterate through the given string and count the number of digits 1, 0 and 8 in it. This is done by a for loop that iterates through the string and checks if the current character is 1, 0 or 8 and adds it to the count. Finally, we return the count. The time complexity of this function is O(n) as we iterate through the string once. ",
        "generated_testcode": "assert find_demlo(123456) == 123456\n",
        "test": "assert find_demlo(\"111111\") == '12345654321'\nassert find_demlo(\"1111\") == '1234321'\nassert find_demlo(\"13333122222\") == '123456789101110987654321'",
        "canonical_solution": "def find_demlo(s): \r\n\tl = len(s) \r\n\tres = \"\" \r\n\tfor i in range(1,l+1): \r\n\t\tres = res + str(i) \r\n\tfor i in range(l-1,0,-1): \r\n\t\tres = res + str(i) \r\n\treturn res \t"
    },
    {
        "number": 322,
        "prompt": "Write a function to find all index positions of the minimum values in a given list.\ndef position_min(list1):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    min_value = min(list1)\n    positions = []\n    for i in range(len(list1)):\n        if list1[i] == min_value:\n            positions.append(i)\n    return positions\n\n# Example usage:\nmy_list = [2, 5, 1, 8, 2, 3, 7, 5, 1, 9]\nprint(position_min(my_list))  # Output: [1, 4, 6]\n\n# Note: This function assumes that there are no duplicate minimum values in the list. ",
        "generated_testcode": "assert position_min([3, 5, 1, 2, 7, 5, 2]) == [2, 4]\n",
        "test": "assert position_min([12,33,23,10,67,89,45,667,23,12,11,10,54])==[3,11]\nassert position_min([1,2,2,2,4,4,4,5,5,5,5])==[0]\nassert position_min([2,1,5,6,8,3,4,9,10,11,8,12])==[1]",
        "canonical_solution": "def position_min(list1):\r\n    min_val = min(list1)\r\n    min_result = [i for i, j in enumerate(list1) if j == min_val]\r\n    return min_result"
    },
    {
        "number": 323,
        "prompt": "Write a function to re-arrange the given array in alternating positive and negative items.\ndef right_rotate(arr, n, out_of_place, cur):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    # print(\"out_of_place\", out_of_place)\n    if cur >= n:\n        return\n\n    if out_of_place < cur:\n        arr[out_of_place], arr[cur] = arr[cur], arr[out_of_place]\n        out_of_place += 1\n        cur += 1\n\n    else:\n        out_of_place = 0\n        cur += 1\n\n    right_rotate(arr, n, out_of_place, cur)\n\n\n\ndef rearrange_array(arr, n):\n    out_of_place = 0\n    cur = 0\n    right_rotate(arr, n, out_of_place, cur)\n    return arr\n\n\n\ndef main():\n    arr = [1, -2, 3, -4, 5, 6, -7, 8, -9]\n    n = len(arr)\n    arr = rearrange_array(arr, n)\n    print(\"Rearranged array is: \", arr)\n\n\n\nif __name__ == \"__main__\":\n    main()\n",
        "generated_testcode": "assert right_rotate([1, -2, 3, -4, 5, -6, 7, -8], 6, 0) == [1, -2, 3, -4, 5, -6, 7, -8]\n",
        "test": "assert re_arrange([-5, -2, 5, 2, 4,\t7, 1, 8, 0, -8], 10) == [-5, 5, -2, 2, -8, 4, 7, 1, 8, 0]\nassert re_arrange([1, 2, 3, -4, -1, 4], 6) == [-4, 1, -1, 2, 3, 4]\nassert re_arrange([4, 7, 9, 77, -4, 5, -3, -9], 8) == [-4, 4, -3, 7, -9, 9, 77, 5]",
        "canonical_solution": "def right_rotate(arr, n, out_of_place, cur):\r\n\ttemp = arr[cur]\r\n\tfor i in range(cur, out_of_place, -1):\r\n\t\tarr[i] = arr[i - 1]\r\n\tarr[out_of_place] = temp\r\n\treturn arr\r\ndef re_arrange(arr, n):\r\n\tout_of_place = -1\r\n\tfor index in range(n):\r\n\t\tif (out_of_place >= 0):\r\n\t\t\tif ((arr[index] >= 0 and arr[out_of_place] < 0) or\r\n\t\t\t(arr[index] < 0 and arr[out_of_place] >= 0)):\r\n\t\t\t\tarr = right_rotate(arr, n, out_of_place, index)\r\n\t\t\t\tif (index-out_of_place > 2):\r\n\t\t\t\t\tout_of_place += 2\r\n\t\t\t\telse:\r\n\t\t\t\t\tout_of_place = - 1\r\n\t\tif (out_of_place == -1):\r\n\t\t\tif ((arr[index] >= 0 and index % 2 == 0) or\r\n\t\t\t (arr[index] < 0 and index % 2 == 1)):\r\n\t\t\t\tout_of_place = index\r\n\treturn arr"
    },
    {
        "number": 324,
        "prompt": "Write a function to extract the sum of alternate chains of tuples.\ndef sum_of_alternates(test_tuple):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    total = 0\n    index = 0\n    while index < len(test_tuple):\n        total += sum(test_tuple[index:index+2])\n        index += 3\n    return total\n\nprint(sum_of_alternates((1, 2, 3, 4, 5, 6, 7, 8))  # should return 12 (1+3+5+7)\nprint(sum_of_alternates((5, 1, 2, 3, 4, 8, 9, 10, 11)  # should return 14 (5+3+11)\nprint(sum_of_alternates((0, 2, 3, 4, 5, 6, 7, 8, 9)  # should return 22 (0+6+9)\nprint(sum_of_alternates((1, 2)  # should return 3 (1+2) ",
        "generated_testcode": "assert sum_of_alternates((1, 2, 3, 4, 5, 6, 7, 8, 9) == 25\n",
        "test": "assert sum_of_alternates((5, 6, 3, 6, 10, 34)) == (46, 18)\nassert sum_of_alternates((1, 2, 3, 4, 5)) == (6, 9)\nassert sum_of_alternates((6, 7, 8, 9, 4, 5)) == (21, 18)",
        "canonical_solution": "def sum_of_alternates(test_tuple):\r\n  sum1 = 0\r\n  sum2 = 0\r\n  for idx, ele in enumerate(test_tuple):\r\n    if idx % 2:\r\n      sum1 += ele\r\n    else:\r\n      sum2 += ele\r\n  return ((sum1),(sum2)) "
    },
    {
        "number": 325,
        "prompt": "Write a python function to find the minimum number of squares whose sum is equal to a given number.\ndef get_Min_Squares(n):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    dp = [0]*(n+1)\n    dp[0] = 0\n    dp[1] = 1\n    for i in range(2, n+1):\n        dp[i] = 1 + min(dp[j*j] for j in range(1, int(i**0.5)+1))\n    return dp[n]\n\n# Test the function with some sample inputs\nprint(get_Min_Squares(13)) # 2\nprint(get_Min_Squares(22)) # 3\nprint(get_Min_Squares(25)) # 3\nprint(get_Min_Squares(30)) # 4\nprint(get_Min_Squares(40)) # 4\nprint(get_Min_Squares(53)) # 5\nprint(get_Min_Squares(64)) # 5\nprint(get_Min_Squares(100)) # 4\n\n# Explanation:\n# We are using dynamic programming approach to solve the problem. We create a dp array to store the minimum number of squares required to get a sum upto i. We start with dp[0] = 0, dp[1] = 1, and then for every i, we find the minimum of squares required to get that sum. We are using the fact that a square of j will be included in the sum of i if i is divisible by j^2. So we check all possible",
        "generated_testcode": "assert get_Min_Squares(17) == 1\n",
        "test": "assert get_Min_Squares(6) == 3\nassert get_Min_Squares(2) == 2\nassert get_Min_Squares(4) == 1",
        "canonical_solution": "def get_Min_Squares(n):\r\n    if n <= 3:\r\n        return n;\r\n    res = n \r\n    for x in range(1,n + 1):\r\n        temp = x * x;\r\n        if temp > n:\r\n            break\r\n        else:\r\n            res = min(res,1 + get_Min_Squares(n  - temp)) \r\n    return res;"
    },
    {
        "number": 326,
        "prompt": "Write a function to get the word with most number of occurrences in the given strings list.\ndef most_occurrences(test_list):\n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    # initialize an empty dictionary to store the count of each word\n    word_count = {}\n    \n    # loop through the list of strings\n    for sentence in test_list:\n        # split the sentence into words\n        words = sentence.split()\n        \n        # loop through the words and count their occurrences\n        for word in words:\n            # check if the word is already in the dictionary, if yes, increment the count, else add it to the dictionary with count 1\n            if word in word_count:\n                word_count[word] += 1\n            else:\n                word_count[word] = 1\n    \n    # sort the dictionary by value in descending order\n    sorted_words = sorted(word_count.items(), key=lambda x: x[1], reverse=True)\n    \n    # return the most occurring word\n    return sorted_words[0][0]\n\n# test the function with example\ntest_list = [\"apple banana apple mango apple cherry banana\", \"banana mango apple orange\", \"banana orange apple\"]\nprint(most_occurrences(test_list)) # should return \"apple\"\n\n# time complexity: O(n)",
        "generated_testcode": "assert most_occurrences(['apple', 'banana', 'apple', 'orange', 'apple', 'pear', 'apple', 'pear']) == 'apple'\n",
        "test": "assert most_occurrences([\"UTS is best for RTF\", \"RTF love UTS\", \"UTS is best\"] ) == 'UTS'\nassert most_occurrences([\"Its been a great year\", \"this year is so worse\", \"this year is okay\"] ) == 'year'\nassert most_occurrences([\"Families can be reunited\", \"people can be reunited\", \"Tasks can be achieved \"] ) == 'can'",
        "canonical_solution": "from collections import defaultdict \r\n\r\ndef most_occurrences(test_list):\r\n  temp = defaultdict(int)\r\n  for sub in test_list:\r\n    for wrd in sub.split():\r\n      temp[wrd] += 1\r\n  res = max(temp, key=temp.get)\r\n  return (str(res)) "
    },
    {
        "number": 327,
        "prompt": "Write a function to print check if the triangle is isosceles or not.\ndef check_isosceles(x,y,z):\n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    if x==y or x==z or y==z:\n        return True\n    else:\n        return False\n\n#Write a function to check if the triangle is equilateral or not.\ndef check_equilateral(x,y,z):\n    if x==y and y==z:\n        return True\n    else:\n        return False\n\n#Write a function to check if the triangle is scalene or not.\ndef check_scalene(x,y,z):\n    if x!=y and y!=z and x!=z:\n        return True\n    else:\n        return False\n\n#Write a function to check if the triangle is valid or not.\ndef check_valid_triangle(x,y,z):\n    if x+y>z and y+z>x and z+x>y:\n        return True\n    else:\n        return False\n\ndef triangle_type(x,y,z):\n    if check_valid_triangle(x,y,z):\n        if check_isosceles(x,y,z):\n            print(\"Triangle is isosceles\")\n        elif check_equilateral(x,y,z):\n            print(\"Triangle is equilateral\")\n        elif check_scalene(x,y,z):\n            print(\"Triangle is scalene\")\n    else:\n        print(\"Triangle is not valid\")\n\n#Test Cases\ntriangle_type(3,4,5) #Output: Triangle is isos",
        "generated_testcode": "assert check_isosceles(3,4,4) == True\n",
        "test": "assert check_isosceles(6,8,12)==False \nassert check_isosceles(6,6,12)==True\nassert check_isosceles(6,16,20)==False",
        "canonical_solution": "def check_isosceles(x,y,z):\r\n  if x==y or y==z or z==x:\r\n\t   return True\r\n  else:\r\n     return False"
    },
    {
        "number": 328,
        "prompt": "Write a function to rotate a given list by specified number of items to the left direction.\ndef rotate_left(list1,m,n):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    n=n%len(list1)\n    list1=list1[n:]+list1[:n]\n    return list1\n\n#Write a function to rotate a given list to the right direction.\ndef rotate_right(list1,m,n):\n    n=n%len(list1)\n    list1=list1[-n:]+list1[:-n]\n    return list1\n\n#Write a function to reverse a given list.\ndef reverse_list(list1):\n    list1.reverse()\n    return list1\n\n#Write a function to check if a given list is a palindrome or not.\ndef is_palindrome(list1):\n    if list1==list1[::-1]:\n        return True\n    else:\n        return False\n\n#Write a function to count the frequency of each element in a given list.\ndef count_frequency(list1):\n    freq_dict={}\n    for i in list1:\n        if i in freq_dict:\n            freq_dict[i]+=1\n        else:\n            freq_dict[i]=1\n    return freq_dict\n\n#Write a function to print the unique elements in a given list.\ndef print_unique(list1):\n    print(set(list1))\n\n#Write a function to find the sum of all elements in a given list.\ndef sum_list(list1):\n    return sum(list1)\n\n#Write a function to find the largest element in a",
        "generated_testcode": "assert rotate_left([1,2,3,4,5,6,7],2) == [4,5,6,7,1,2]\n",
        "test": "assert rotate_left([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],3,4)==[4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4]\nassert rotate_left([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],2,2)==[3, 4, 5, 6, 7, 8, 9, 10, 1, 2]\nassert rotate_left([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],5,2)==[6, 7, 8, 9, 10, 1, 2]",
        "canonical_solution": "def rotate_left(list1,m,n):\r\n  result =  list1[m:]+list1[:n]\r\n  return result"
    },
    {
        "number": 329,
        "prompt": "Write a python function to count negative numbers in a list.\ndef neg_count(list):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": true,
        "answer": "    count = 0\n    for i in list:\n        if i < 0:\n            count += 1\n    return count\n\n# Test the function\nlist1 = [-2, 5, 0, -8, 3, -7, 10, -12]\nprint(neg_count(list1)) # Output: 3\n\nlist2 = [2, 5, 8, 3, 7, 10, 12]\nprint(neg_count(list2)) # Output: 0\n\nlist3 = []\nprint(neg_count(list3)) # Output: 0\n\nlist4 = [-2, -5, -6, -3, -7, -10]\nprint(neg_count(list4)) # Output: 5\n",
        "generated_testcode": "assert neg_count([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 0\n",
        "test": "assert neg_count([-1,-2,3,-4,-5]) == 4\nassert neg_count([1,2,3]) == 0\nassert neg_count([1,2,-3,-10,20]) == 2",
        "canonical_solution": "def neg_count(list):\r\n  neg_count= 0\r\n  for num in list: \r\n    if num <= 0: \r\n      neg_count += 1\r\n  return neg_count "
    },
    {
        "number": 330,
        "prompt": "Write a function to find all three, four, five characters long words in the given string by using regex.\ndef find_char(text):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    import re\n    pattern = re.compile(r'\\b\\w{3,5}\\b')\n    words = pattern.findall(text)\n    return words\n\n# Test the function\ntext = \"Hello world, how are you doing today?\"\nprint(find_char(text)) # Output: ['Hello', 'world', 'how', 'are', 'you', 'today']\n\ntext = \"This is a sentence with some words in it.\"\nprint(find_char(text)) # Output: ['This', 'sentence', 'some', 'words', 'in', 'it.']\n\ntext = \"Python is a high-level programming language.\"\nprint(find_char(text)) # Output: ['Python', 'level', 'programming', 'language.']\n\ntext = \"There are no five characters long words in this string.\"\nprint(find_char(text)) # Output: []\n\ntext = \"abcde\"\nprint(find_char(text)) # Output: ['abcde']\n\ntext = \"This is a string with 123 numbers 12345 and a symbol #.\"\nprint(find_char(text)) # Output: ['This', 'string', 'symbol', '.'] ",
        "generated_testcode": "assert find_char(\"Hello World\") == [\"Hello\", \"World\"]\n",
        "test": "assert find_char('For the four consumer complaints contact manager AKR reddy') == ['For', 'the', 'four', 'AKR', 'reddy']\nassert find_char('Certain service are subject to change MSR') == ['are', 'MSR']\nassert find_char('Third party legal desclaimers') == ['Third', 'party', 'legal']",
        "canonical_solution": "import re\r\ndef find_char(text):\r\n  return (re.findall(r\"\\b\\w{3,5}\\b\", text))"
    },
    {
        "number": 331,
        "prompt": "Write a python function to count unset bits of a given number.\ndef count_unset_bits(n): \n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    count = 0\n    while n:\n        count += 1\n        n &= n - 1\n    return count\n\n# Test the function with a few examples \nprint(count_unset_bits(20)) # Output: 4 (0000101000100 unset bits)\nprint(count_unset_bits(123)) # Output: 5 (000001111011 unset bits)\nprint(count_unset_bits(50)) # Output: 2 (001111011 unset bits)\nprint(count_unset_bits(0)) # Output: 32 (all bits are unset) ",
        "generated_testcode": "assert count_unset_bits(10) == 2\n",
        "test": "assert count_unset_bits(2) == 1\nassert count_unset_bits(4) == 2\nassert count_unset_bits(6) == 1",
        "canonical_solution": "def count_unset_bits(n): \r\n    count = 0\r\n    x = 1\r\n    while(x < n + 1): \r\n        if ((x & n) == 0): \r\n            count += 1\r\n        x = x << 1\r\n    return count  "
    },
    {
        "number": 332,
        "prompt": "Write a function to count character frequency of a given string.\ndef char_frequency(str1):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    dict = {}\n    for n in str1:\n        keys = dict.keys()\n        if n in keys:\n            dict[n] += 1\n        else:\n            dict[n] = 1\n    return dict\n\n# Test the function with an example string\nstring = \"Hello World\"\nfreq = char_frequency(string)\nprint(freq)\n\n# Output: {'H': 1, 'e': 1, 'l': 3, 'o': 2, ' ': 1, 'W': 1, 'r': 1, 'd': 1}\n\n# Example usage:\nstring = \"Python is a great language for data analysis\"\nfreq = char_frequency(string)\nprint(freq)\n# Output: {'P': 1, 'y': 1, 't': 1, 'h': 1, 'o': 1, 'n': 1, ' ': 3, 'a': 1, 'i': 2, 's': 1, 'g': 1, 'r': 1, 'e': 2, 't': 1, 'l': 1, 'n': 1, 'd': 2} ",
        "generated_testcode": "assert char_frequency(\"hello world\") == {'h': 1, 'e': 1, 'l': 3, 'o': 2, ' ': 1, 'w': 1, 'r': 1, 'd': 1}\n",
        "test": "assert char_frequency('python')=={'p': 1, 'y': 1, 't': 1, 'h': 1, 'o': 1, 'n': 1}\nassert char_frequency('program')=={'p': 1, 'r': 2, 'o': 1, 'g': 1, 'a': 1, 'm': 1}\nassert char_frequency('language')=={'l': 1, 'a': 2, 'n': 1, 'g': 2, 'u': 1, 'e': 1}",
        "canonical_solution": "def char_frequency(str1):\r\n    dict = {}\r\n    for n in str1:\r\n        keys = dict.keys()\r\n        if n in keys:\r\n            dict[n] += 1\r\n        else:\r\n            dict[n] = 1\r\n    return dict"
    },
    {
        "number": 333,
        "prompt": "Write a python function to sort a list according to the second element in sublist.\ndef Sort(sub_li): \n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    sub_li.sort(key = lambda x: x[1]) \n    return sub_li \n  \n# list of sublists \nli = [[5, 3], [10, 4], [15, 2], [20, 6], [30, 1], [25, 5]] \n  \n# using sort() method to sort the list of sublists \nSort(li) \n  \n# printing the sorted list \nprint(\"Sorted list:\", li) \n\n# output: Sorted list: [[15, 2], [20, 6], [5, 3], [25, 5], [10, 4], [30, 1]] ",
        "generated_testcode": "",
        "test": "assert Sort([['a', 10], ['b', 5], ['c', 20], ['d', 15]]) == [['b', 5], ['a', 10], ['d', 15], ['c', 20]]\nassert Sort([['452', 10], ['256', 5], ['100', 20], ['135', 15]]) == [['256', 5], ['452', 10], ['135', 15], ['100', 20]]\nassert Sort([['rishi', 10], ['akhil', 5], ['ramya', 20], ['gaur', 15]]) == [['akhil', 5], ['rishi', 10], ['gaur', 15], ['ramya', 20]]",
        "canonical_solution": "def Sort(sub_li): \r\n    sub_li.sort(key = lambda x: x[1]) \r\n    return sub_li "
    },
    {
        "number": 334,
        "prompt": "Write a python function to check whether the triangle is valid or not if sides are given.\ndef check_Validity(a,b,c):  \n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    if a+b>c and b+c>a and a+c>b:  \n        return True  \n    else:  \n        return False  \n#a,b,c are the sides of the triangle  \na = 5  \nb = 7  \nc = 9  \nif check_Validity(a,b,c):  \n    print(\"Valid Triangle\")  \nelse:  \n    print(\"Invalid Triangle\")  \n\na = 5  \nb = 7  \nc = 12  \nif check_Validity(a,b,c):  \n    print(\"Valid Triangle\")  \nelse:  \n    print(\"Invalid Triangle\") ",
        "generated_testcode": "assert check_Validity(3,4,5) == True\n",
        "test": "assert check_Validity(1,2,3) == False\nassert check_Validity(2,3,5) == False\nassert check_Validity(7,10,5) == True",
        "canonical_solution": "def check_Validity(a,b,c):  \r\n    if (a + b <= c) or (a + c <= b) or (b + c <= a) : \r\n        return False\r\n    else: \r\n        return True        "
    },
    {
        "number": 335,
        "prompt": "Write a function to find the sum of arithmetic progression.\ndef ap_sum(a,n,d):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    sum = (n/2)*(2*a + (n-1)*d)\n    return sum\nprint(ap_sum(1,10,2))\n\n# Output: 55.0\n\n#Explanation: \n# The nth term of an arithmetic progression is given by the formula:\n# a + (n-1)d, where a is the first term, n is the total number of terms and d is the common difference.\n# The sum of the arithmetic progression is: \n# S = (n/2)(2a + (n-1)d)\n# In this case, a = 1, n = 10 and d = 2, so the sum is (10/2)(2*1 + (10-1)2) = 50/2 = 50/2 = 25.\n# However, we need to return a float value, so we multiply by 1.0 before dividing to get a float result. ",
        "generated_testcode": "assert ap_sum(1,10,2) == 55\n",
        "test": "assert ap_sum(1,5,2)==25\nassert ap_sum(2,6,4)==72\nassert ap_sum(1,4,5)==34",
        "canonical_solution": "def ap_sum(a,n,d):\r\n  total = (n * (2 * a + (n - 1) * d)) / 2\r\n  return total"
    },
    {
        "number": 336,
        "prompt": "Write a function to check whether the given month name contains 28 days or not.\ndef check_monthnum(monthname1):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": true,
        "answer": "    # dictionary to store the number of days in each month\n    months = {\n        \"January\": 31,\n        \"February\": 28,\n        \"March\": 31,\n        \"April\": 30,\n        \"May\": 31,\n        \"June\": 30,\n        \"July\": 31,\n        \"August\": 31,\n        \"September\": 30,\n        \"October\": 31,\n        \"November\": 30,\n        \"December\": 31\n    }\n\n    # check if the month name is in the dictionary, if yes, check if it has 28 days, if yes return True else return False\n    if monthname1 in months:\n        if months[monthname1] == 28:\n            return True\n        else:\n            return False\n    else:\n        return False\n\n# test the function\nprint(check_monthnum(\"January\"))  # False\nprint(check_monthnum(\"February\"))  # True\nprint(check_monthnum(\"December\"))  # True\nprint(check_monthnum(\"June\"))  # True\nprint(check_monthnum(\"March\"))  # True\nprint(check_monthnum(\"March\"))  # False\nprint(check_monthnum(\"abcd\"))  # False\n\n# output:\n# False\n# True\n# True\n# True\n# True\n# True\n# False\n\n#",
        "generated_testcode": "assert check_monthnum(\"February\") == True\n",
        "test": "assert check_monthnum(\"February\")==True\nassert check_monthnum(\"January\")==False\nassert check_monthnum(\"March\")==False",
        "canonical_solution": "def check_monthnum(monthname1):\r\n  if monthname1 == \"February\":\r\n    return True\r\n  else:\r\n    return False"
    },
    {
        "number": 337,
        "prompt": "Write a function that matches a word at the end of a string, with optional punctuation.\ndef text_match_word(text):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    import re\n    pattern = re.compile(r'\\w+\\.*$')\n    match = pattern.search(text)\n    if match:\n        return match.group()\n    else:\n        return None\n\n# Test cases\nprint(text_match_word(\"The quick brown fox.\"))  # Output: \"fox.\"\nprint(text_match_word(\"The quick brown fox!\"))  # Output: \"fox!\"\nprint(text_match_word(\"The quick brown fox\"))  # Output: \"fox\"\nprint(text_match_word(\"The quick brown fox? \"))  # Output: \"fox\"\nprint(text_match_word(\"The quick brown fox?\"))  # Output: \"fox?\"\nprint(text_match_word(\"The quick brown fox. \"))  # Output: \"fox.\"\nprint(text_match_word(\"Hello, world!\"))  # Output: \"world!\"\nprint(text_match_word(\"Hello, world\"))  # Output: \"world\"\nprint(text_match_word(\"Hello, world? \"))  # Output: \"world\"\nprint(text_match_word(\"Hello, world? \"))  # Output: \"world?\"\nprint(text_match_word(\"\"))  # Output: None\nprint(text_match_word(\".\"))  # Output: None\nprint(text_match_word(\"Hello\"))  # Output: \"Hello\" ",
        "generated_testcode": "assert text_match_word(\"Hello, world!\") == True\n",
        "test": "assert text_match_word(\"python.\")==('Found a match!')\nassert text_match_word(\"python.\")==('Found a match!')\nassert text_match_word(\"  lang  .\")==('Not matched!')",
        "canonical_solution": "import re\r\ndef text_match_word(text):\r\n        patterns = '\\w+\\S*$'\r\n        if re.search(patterns,  text):\r\n                return 'Found a match!'\r\n        else:\r\n                return 'Not matched!'"
    },
    {
        "number": 338,
        "prompt": "Write a python function to count the number of substrings with same first and last characters.\ndef check_Equality(s): \n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    count = 0\n    for i in range(len(s)): \n        for j in range(i+1, len(s)+1): \n            if s[i] == s[j-1]: \n                count += 1\n    return count \n  \ns = input()\nprint(\"Number of substrings with same first and last characters :\", check_Equality(s)) ",
        "generated_testcode": "assert check_Equality(\"abcd\") == 1\n",
        "test": "assert count_Substring_With_Equal_Ends('aba') == 4\nassert count_Substring_With_Equal_Ends('abcab') == 7\nassert count_Substring_With_Equal_Ends('abc') == 3",
        "canonical_solution": "def check_Equality(s): \r\n    return (ord(s[0]) == ord(s[len(s) - 1])); \r\ndef count_Substring_With_Equal_Ends(s): \r\n    result = 0; \r\n    n = len(s); \r\n    for i in range(n):\r\n        for j in range(1,n-i+1): \r\n            if (check_Equality(s[i:i+j])): \r\n                result+=1; \r\n    return result; "
    },
    {
        "number": 339,
        "prompt": "Write a python function to find the maximum occuring divisor in an interval.\ndef find_Divisor(x,y):  \n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    for i in range(x,y+1):  \n        if(y%i==0):  \n            max_divisor = i  \n    return max_divisor \n  \n#test the function  \nx = 10  \ny = 20  \nprint(\"The maximum divisor in the range\",x,\"to\",y,\"is\",find_Divisor(x,y)) ",
        "generated_testcode": "assert find_Divisor(10,20) == 5\n",
        "test": "assert find_Divisor(2,2) == 2\nassert find_Divisor(2,5) == 2\nassert find_Divisor(5,10) == 2",
        "canonical_solution": "def find_Divisor(x,y):  \r\n    if (x==y): \r\n        return y \r\n    return 2"
    },
    {
        "number": 340,
        "prompt": "Write a python function to find the sum of the three lowest positive numbers from a given list of numbers.\ndef sum_three_smallest_nums(lst):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    # Sort the list in ascending order\n    lst.sort()\n    # Initialize sum to zero\n    sum = 0\n    # Initialize a variable to keep track of count of numbers added\n    count = 0\n    # Loop through the sorted list\n    for i in lst:\n        # Add the lowest three numbers to the sum and increment the count\n        if i > 0 and count < 3:\n            sum += i\n            count += 1\n    return sum\n\n# Test the function with an example\nprint(sum_three_smallest_nums([5, 8, -10, 3, 12, 18, 0, -7, 2, 9, 4, 7, -5]))  # Output: 16 (5 + 3 + 2)\n\n# Test the function with an example that includes negative numbers\nprint(sum_three_smallest_nums([-5, 2, 8, -10, 3, 12, 18, 0, 7, 9, -4, 7])) # Output: 13 (0 + 2 + 3)\n\n# Test the function with an example that includes zero\nprint(sum_three_smallest_nums([0, 2, 8, 10, 3, 12, 18, 0, 7, 9, 4, 7])) # Output: 13 (0 + 2 + 3) ",
        "generated_testcode": "assert sum_three_smallest_nums([5, 8, 12, 18, 21, 3, 9, 1, 7]) == 17\n",
        "test": "assert sum_three_smallest_nums([10,20,30,40,50,60,7]) == 37\nassert sum_three_smallest_nums([1,2,3,4,5]) == 6\nassert sum_three_smallest_nums([0,1,2,3,4,5]) == 6",
        "canonical_solution": "def sum_three_smallest_nums(lst):\r\n\treturn sum(sorted([x for x in lst if x > 0])[:3])"
    },
    {
        "number": 341,
        "prompt": "Write a function to convert the given set into ordered tuples.\ndef set_to_tuple(s):\n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    return tuple(sorted(s))\n\n#Example usage:\ns = {2, 3, 1, 4}\nprint(set_to_tuple(s)) # Output: (1, 2, 3, 4)\n\n# Example usage:\ns = {\"apple\", \"banana\", \"orange\", \"grape\"}\nprint(set_to_tuple(s)) # Output: ('apple', 'banana', 'grape', 'orange') ",
        "generated_testcode": "assert set_to_tuple({1, 2, 3}) == (1, 2, 3)\n",
        "test": "assert set_to_tuple({1, 2, 3, 4, 5}) == (1, 2, 3, 4, 5)\nassert set_to_tuple({6, 7, 8, 9, 10, 11}) == (6, 7, 8, 9, 10, 11)\nassert set_to_tuple({12, 13, 14, 15, 16}) == (12, 13, 14, 15, 16)",
        "canonical_solution": "def set_to_tuple(s):\r\n  t = tuple(sorted(s))\r\n  return (t)"
    },
    {
        "number": 342,
        "prompt": "Write a function to find the smallest range that includes at-least one element from each of the given arrays.\n    def __init__(self, value, list_num, index):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "       self.value = value\n        self.list_num = list_num\n        self.index = index\n    def __lt__(self, other):\n        if self.list_num < other.list_num:\n            return True\n        elif self.list_num == other.list_num:\n            return self.value < other.value\n        else:\n            return False\n    def __eq__(self, other):\n        return self.value == other.value and self.list_num == other.list_num\n\ndef smallest_range(arrays):\n    if not arrays:\n        return []\n    # 1. find the smallest and largest elements in the arrays\n    min_val = min([min(arr) for arr in arrays])\n    max_val = max([max(arr) for arr in arrays]\n    # 2. remove duplicates from all the arrays\n    arrays = [list(set(arr)) for arr in arrays]\n    # 3. sort all the arrays\n    arrays.sort(key=lambda x: x[0])\n    # 4. create a heapq of the first elements of each array\n    heap = [(arr[0], i, 0) for i, arr in enumerate(arrays)]\n    heapq.heapify(heap)\n    # 5. initialize the current range with the smallest element\n    min_range = max_val - min_val\n    left, right = min_val, max_val\n    # 6. while there are elements in the heap\n    while heap",
        "generated_testcode": "assert smallest_range([[1, 10, 20], [5, 15], [1, 2, 20]) == (1, 20)\n",
        "test": "assert find_minimum_range([[3, 6, 8, 10, 15], [1, 5, 12], [4, 8, 15, 16], [2, 6]]) == (4, 6)\nassert find_minimum_range([[ 2, 3, 4, 8, 10, 15 ], [1, 5, 12], [7, 8, 15, 16], [3, 6]]) == (4, 7)\nassert find_minimum_range([[4, 7, 9, 11, 16], [2, 6, 13], [5, 9, 16, 17], [3, 7]]) == (5, 7)",
        "canonical_solution": "from heapq import heappop, heappush\r\nclass Node:\r\n    def __init__(self, value, list_num, index):\r\n        self.value = value\r\n        self.list_num = list_num\r\n        self.index = index\r\n    def __lt__(self, other):\r\n        return self.value < other.value\r\ndef find_minimum_range(list):\r\n    high = float('-inf')\r\n    p = (0, float('inf'))\r\n    pq = []\r\n    for i in range(len(list)):\r\n        heappush(pq, Node(list[i][0], i, 0))\r\n        high = max(high, list[i][0])\r\n    while True:\r\n        top = heappop(pq)\r\n        low = top.value\r\n        i = top.list_num\r\n        j = top.index\r\n        if high - low < p[1] - p[0]:\r\n            p = (low, high)\r\n        if j == len(list[i]) - 1:\r\n            return p\r\n        heappush(pq, Node(list[i][j + 1], i, j + 1))\r\n        high = max(high, list[i][j + 1])"
    },
    {
        "number": 343,
        "prompt": "Write a function to calculate the number of digits and letters in a string.\ndef dig_let(s):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    digits = 0\n    letters = 0\n    for i in s:\n        if i.isdigit():\n            digits += 1\n        elif i.isalpha():\n            letters += 1\n    return (digits, letters)\n\n# Test the function\ns = \"Hello123\"\nprint(dig_let(s)) # should print (1, 5)\ns = \"12345\"\nprint(dig_let(s)) # should print (4, 0)\ns = \"Hello World\"\nprint(dig_let(s)) # should print (0, 10)\ns = \"1a2b3c\"\nprint(dig_let(s)) # should print (3, 3) ",
        "generated_testcode": "assert dig_let(\"Hello123\") == (3, 5)\n",
        "test": "assert dig_let(\"python\")==(6,0)\nassert dig_let(\"program\")==(7,0)\nassert dig_let(\"python3.0\")==(6,2)",
        "canonical_solution": "def dig_let(s):\r\n d=l=0\r\n for c in s:\r\n    if c.isdigit():\r\n        d=d+1\r\n    elif c.isalpha():\r\n        l=l+1\r\n    else:\r\n        pass\r\n return (l,d)"
    },
    {
        "number": 344,
        "prompt": "Write a python function to find number of elements with odd factors in a given range.\ndef count_Odd_Squares(n,m): \n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    count = 0\n    for i in range(n,m+1): \n        if(i%2 != 0): \n            count += 1\n    return count\n\n#Test the function with input values\nn = 9\nm = 25\nprint(\"Number of odd squares in range\",n,\"to\",m,\":\",count_Odd_Squares(n,m)) ",
        "generated_testcode": "assert count_Odd_Squares(1, 10) == 3\n",
        "test": "assert count_Odd_Squares(5,100) == 8\nassert count_Odd_Squares(8,65) == 6\nassert count_Odd_Squares(2,5) == 1",
        "canonical_solution": "def count_Odd_Squares(n,m): \r\n    return int(m**0.5) - int((n-1)**0.5) "
    },
    {
        "number": 345,
        "prompt": "Write a function to find the difference between two consecutive numbers in a given list.\ndef diff_consecutivenums(nums):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    diff = []\n    for i in range(len(nums)-1):\n        diff.append(nums[i+1] - nums[i])\n    return diff\n\n#Example usage:\nprint(diff_consecutivenums([1, 3, 5, 7, 9, 11])) # Output: [2, 2, 2]\nprint(diff_consecutivenums([2, 4, 6, 8, 10])) # Output: [2, 2, 2]\nprint(diff_consecutivenums([1, 3, 5, 7, 9, 11, 13])) # Output: [2, 2, 2, 4]\nprint(diff_consecutivenums([1, 2, 3, 4, 5, 6, 7])) # Output: [1, 1, 1, 1, 1] ",
        "generated_testcode": "assert diff_consecutivenums([1, 2, 3, 4, 5, 6, 7]) == [1, 1, 1, 1]\n",
        "test": "assert diff_consecutivenums([1, 1, 3, 4, 4, 5, 6, 7])==[0, 2, 1, 0, 1, 1, 1]\nassert diff_consecutivenums([4, 5, 8, 9, 6, 10])==[1, 3, 1, -3, 4]\nassert diff_consecutivenums([0, 1, 2, 3, 4, 4, 4, 4, 5, 7])==[1, 1, 1, 1, 0, 0, 0, 1, 2]",
        "canonical_solution": "def diff_consecutivenums(nums):\r\n    result = [b-a for a, b in zip(nums[:-1], nums[1:])]\r\n    return result"
    },
    {
        "number": 346,
        "prompt": "Write a function to find entringer number e(n, k).\ndef zigzag(n, k): \n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    if k == 1: \n        return n \n    if n == 1: \n        return 1\n    if k == 2: \n        return 1\n    else: \n        return (n * (n-1) * (n-k+1) * (k-1)) / (2 * (k-1) * k) \n\nn = int(input(\"Enter the value of n: \")) \nk = int(input(\"Enter the value of k: \") \nprint(\"Zigzag of n and k is \", zigzag(n, k)) ",
        "generated_testcode": "assert zigzag(5, 3) == 1\n",
        "test": "assert zigzag(4, 3) == 5\nassert zigzag(4, 2) == 4\nassert zigzag(3, 1) == 1",
        "canonical_solution": "def zigzag(n, k): \r\n\tif (n == 0 and k == 0): \r\n\t\treturn 1\r\n\tif (k == 0): \r\n\t\treturn 0\r\n\treturn zigzag(n, k - 1) + zigzag(n - 1, n - k)"
    },
    {
        "number": 347,
        "prompt": "Write a python function to count the number of squares in a rectangle.\ndef count_Squares(m,n): \n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    count = 0\n    for i in range(1,m+1):\n        for j in range(1,n+1):\n            if i <= j:\n                count += 1\n    return count\n\n#test the function\nprint(count_Squares(4,5)) #output: 10\nprint(count_Squares(5,4)) #output: 10\nprint(count_Squares(6,7)) #output: 20 \nprint(count_Squares(7,6)) #output: 20 \n\n#function to find the sum of first n numbers\ndef sum_of_n(n):\n    sum = 0\n    for i in range(1,n+1):\n        sum += i\n    return sum\n\n#test the function\nprint(sum_of_n(10)) #output: 55\n\n#function to find the sum of first n odd numbers\ndef sum_of_n_odd(n):\n    sum = 0\n    for i in range(1,n+1,2):\n        sum += i\n    return sum\n\n#test the function\nprint(sum_of_n_odd(6)) #output: 15\n\n#function to find the sum of first n even numbers\ndef sum_of_n_even(n):\n    sum = 0\n    for i in range(0,n+1,2):\n        sum += i\n    return sum\n\n#test the function\nprint(",
        "generated_testcode": "assert count_Squares(3, 4) == 1\n",
        "test": "assert count_Squares(4,3) == 20\nassert count_Squares(1,2) == 2\nassert count_Squares(2,2) == 5",
        "canonical_solution": "def count_Squares(m,n): \r\n    if (n < m): \r\n        temp = m \r\n        m = n \r\n        n = temp \r\n    return n * (n + 1) * (3 * m - n + 1) // 6"
    },
    {
        "number": 348,
        "prompt": "Write a function to count sequences of given length having non-negative prefix sums that can be generated by given values.\ndef bin_coff(n, r): \n",
        "checkpoint": "13B",
        "pass": 8,
        "correct": true,
        "answer": "    if r == 0 or r == n: \n        return 1\n    elif r > n: \n        return 0\n    else: \n        return bin_coff(n-1, r) + bin_coff(n-1, r-1) \n\ndef count_non_negative_prefix_sums(values, length): \n    dp = [0] * (sum(values) + 1) \n    dp[0] = 1\n    curr_sum = 0\n    count = 0\n    for i in range(len(values)): \n        curr_sum += values[i] \n        if curr_sum <= length: \n            count += dp[curr_sum]\n        for j in range(length+1, curr_sum+1): \n            dp[j] += dp[j-values[i]] \n    return count \n\n# Example usage: \nvalues = [1, 2, 3, 4] \nlength = 5\nprint(count_non_negative_prefix_sums(values, length)) ",
        "generated_testcode": "assert bin_coff(5, 3) == 10\n",
        "test": "assert find_ways(4) == 2\nassert find_ways(6) == 5\nassert find_ways(8) == 14",
        "canonical_solution": "def bin_coff(n, r): \r\n\tval = 1\r\n\tif (r > (n - r)): \r\n\t\tr = (n - r) \r\n\tfor i in range(0, r): \r\n\t\tval *= (n - i) \r\n\t\tval //= (i + 1) \r\n\treturn val \r\ndef find_ways(M): \r\n\tn = M // 2\r\n\ta = bin_coff(2 * n, n) \r\n\tb = a // (n + 1) \r\n\treturn (b) "
    },
    {
        "number": 349,
        "prompt": "Write a python function to check whether the given string is a binary string or not.\ndef check(string) :\n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    for i in string :\n        if i == \"0\" or i == \"1\" :\n            continue\n        else :\n            return False\n    return True\n\n# Sample usage\nstring = \"10101010\"\nprint(check(string))\nstring = \"101010101\"\nprint(check(string))\nstring = \"1010101a\"\nprint(check(string)) ",
        "generated_testcode": "",
        "test": "assert check(\"01010101010\") == \"Yes\"\nassert check(\"name0\") == \"No\"\nassert check(\"101\") == \"Yes\"",
        "canonical_solution": "def check(string) :\r\n    p = set(string) \r\n    s = {'0', '1'} \r\n    if s == p or p == {'0'} or p == {'1'}: \r\n        return (\"Yes\") \r\n    else : \r\n        return (\"No\") "
    },
    {
        "number": 350,
        "prompt": "Write a python function to minimize the length of the string by removing occurrence of only one character.\ndef minimum_Length(s) : \n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": true,
        "answer": "    # create a dictionary to store the count of all the characters \n    count = {} \n    for i in s : \n        if i in count : \n            count[i] += 1\n        else : \n            count[i] = 1\n    # find the character with maximum frequency \n    max_char = max(count, key = count.get) \n    # count of the maximum frequency character \n    max_count = count[max_char] \n    # length of the string \n    n = len(s) \n    # return the minimum length \n    return n - max_count \n\n# Driver code \ns = \"hello\"\nprint(minimum_Length(s)) \ns = \"leetcode\"\nprint(minimum_Length(s)) \ns = \"abbcccddddeeeeedcba\"\nprint(minimum_Length(s)) \ns = \"triplicate\"\nprint(minimum_Length(s)) ",
        "generated_testcode": "assert minimum_Length(\"aabcc\") == 3\n",
        "test": "assert minimum_Length(\"mnm\") == 1\nassert minimum_Length(\"abcda\") == 3\nassert minimum_Length(\"abcb\") == 2",
        "canonical_solution": "def minimum_Length(s) : \r\n    maxOcc = 0\r\n    n = len(s) \r\n    arr = [0]*26\r\n    for i in range(n) : \r\n        arr[ord(s[i]) -ord('a')] += 1\r\n    for i in range(26) : \r\n        if arr[i] > maxOcc : \r\n            maxOcc = arr[i] \r\n    return n - maxOcc "
    },
    {
        "number": 351,
        "prompt": "Write a python function to find the first element occurring k times in a given array.\ndef first_Element(arr,n,k): \n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    for i in range(n): \n        count = 0\n        for j in range(n): \n            if arr[i] == arr[j]: \n                count+=1\n        if count == k: \n            return arr[i] \n    return -1\n\n# driver code \nif __name__ == '__main__': \n    arr = [1, 2, 2, 3, 3, 3, 4, 5] \n    n = len(arr) \n    k = 3\n    print(first_Element(arr, n, k)) \n    \n    arr = [1, 2, 3, 3, 3, 4, 5] \n    n = len(arr) \n    k = 2\n    print(first_Element(arr, n, k)) ",
        "generated_testcode": "",
        "test": "assert first_Element([0,1,2,3,4,5],6,1) == 0\nassert first_Element([1,2,1,3,4],5,2) == 1\nassert first_Element([2,3,4,3,5,7,1,2,3,5],10,2) == 2",
        "canonical_solution": "def first_Element(arr,n,k): \r\n    count_map = {}; \r\n    for i in range(0, n): \r\n        if(arr[i] in count_map.keys()): \r\n            count_map[arr[i]] += 1\r\n        else: \r\n            count_map[arr[i]] = 1\r\n        i += 1\r\n    for i in range(0, n):  \r\n        if (count_map[arr[i]] == k): \r\n            return arr[i] \r\n        i += 1 \r\n    return -1"
    },
    {
        "number": 352,
        "prompt": "Write a python function to check whether all the characters in a given string are unique.\ndef unique_Characters(str):\n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    if len(str) > 128:  # Since there are only 128 characters in ASCII\n        return False\n    else:\n        char_set = [False] * 128\n        for char in str:\n            if char_set[ord(char)]:\n                return False\n            char_set[ord(char)] = True\n        return True\n\n\n# Test the function\nprint(unique_Characters(\"abcdefghijklmnopqrstuvwxyz\"))  # Output: True\nprint(unique_Characters(\"hello\"))  # Output: False\nprint(unique_Characters(\"World\"))  # Output: False\nprint(unique_Characters(\"Python\"))  # Output: True\n\n# Time Complexity: O(n) ",
        "generated_testcode": "assert unique_Characters(\"abcdefg\") == True\n",
        "test": "assert unique_Characters('aba') == False\nassert unique_Characters('abc') == True\nassert unique_Characters('abab') == False",
        "canonical_solution": "def unique_Characters(str):\r\n    for i in range(len(str)):\r\n        for j in range(i + 1,len(str)): \r\n            if (str[i] == str[j]):\r\n                return False;\r\n    return True;"
    },
    {
        "number": 353,
        "prompt": "Write a function to remove a specified column from a given nested list.\ndef remove_column(list1, n):\n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    return [row[:n] + row[n+1:] for row in list1]\n\n# Example usage:\nlist1 = [\n    [1, 2, 3, 4],\n    [5, 6, 7, 8],\n    [9, 10, 11, 12]\n]\nprint(remove_column(list1, 1)) # Output: [[1, 4], [5, 8], [9, 12]]\n\n# This function removes the second column (index 1) from the list by slicing the list and skipping the nth element.\n# row[:n] gets all the elements up to the nth element and row[n+1:] gets all the elements after the nth element.\n# The + operator concatenates the two lists into a new list. ",
        "generated_testcode": "assert remove_column([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 1) == [[1, 3], [4, 6], [7, 9]]\n",
        "test": "assert remove_column([[1, 2, 3], [2, 4, 5], [1, 1, 1]],0)==[[2, 3], [4, 5], [1, 1]]\nassert remove_column([[1, 2, 3], [-2, 4, -5], [1, -1, 1]],2)==[[1, 2], [-2, 4], [1, -1]]\nassert remove_column([[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]],0)==[[3], [7], [3], [15, 17], [7], [11]]",
        "canonical_solution": "def remove_column(list1, n):\r\n   for i in list1: \r\n    del i[n] \r\n   return list1"
    },
    {
        "number": 354,
        "prompt": "Write a function to find t-nth term of arithemetic progression.\ndef tn_ap(a,n,d):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    return a + (n-1)*d\ntn_ap(1,10,2)\n\n# Write a function to find sum of n numbers of an arithmetic progression.\ndef sum_ap(a,n,d):\n    return n*(2*a + (n-1)*d)/2\nsum_ap(1,10,2)\n\n# Write a function to find the sum of first n terms of a geometric progression.\ndef sum_gp(a,r,n):\n    return (a*(1-r**n)/(1-r)\nsum_gp(1,2,10)\n\n# Write a function to find the nth term of a geometric progression.\ndef nth_term_gp(a,r,n):\n    return a*(r**(n-1)\nnth_term_gp(1,2,10)\n\n# Write a function to find the sum of digits of a number.\ndef sum_of_digits(num):\n    return sum(int(digit) for digit in str(num))\nsum_of_digits(12345)\n\n# Write a function to check if a number is prime or not.\ndef is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2,num):\n        if num%i == 0:\n            return False\n    return True\nis_prime(7)\n\n# Write a function to check if a number is palindrome or",
        "generated_testcode": "assert tn_ap(1,5,2) == 13\n",
        "test": "assert tn_ap(1,5,2)==9\nassert tn_ap(2,6,4)==22\nassert tn_ap(1,4,5)==16",
        "canonical_solution": "def tn_ap(a,n,d):\r\n  tn = a + (n - 1) * d\r\n  return tn"
    },
    {
        "number": 355,
        "prompt": "Write a python function to count the number of rectangles in a circle of radius r.\ndef count_Rectangles(radius):  \n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    count = 0  \n    for i in range(1,radius+1):  \n        for j in range(1,i+1):  \n            count += 1  \n    return count  \n\n# Test the function with radius = 3  \nprint(count_Rectangles(3)) # Output: 10 ",
        "generated_testcode": "assert count_Rectangles(1) == 1\n",
        "test": "assert count_Rectangles(2) == 8\nassert count_Rectangles(1) == 1\nassert count_Rectangles(0) == 0",
        "canonical_solution": "def count_Rectangles(radius):  \r\n    rectangles = 0 \r\n    diameter = 2 * radius \r\n    diameterSquare = diameter * diameter \r\n    for a in range(1, 2 * radius):  \r\n        for b in range(1, 2 * radius): \r\n            diagnalLengthSquare = (a * a +  b * b)  \r\n            if (diagnalLengthSquare <= diameterSquare) : \r\n                rectangles += 1\r\n    return rectangles "
    },
    {
        "number": 356,
        "prompt": "Write a function to find the third angle of a triangle using two angles.\ndef find_angle(a,b):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    return 180 - (a + b)\n\n# Test the function with some example values\nprint(find_angle(30, 60)) # should output 90\nprint(find_angle(45, 45)) # should output 90\nprint(find_angle(20, 70)) # should output 50 ",
        "generated_testcode": "assert find_angle(30,60) == 90\n",
        "test": "assert find_angle(47,89)==44\nassert find_angle(45,95)==40\nassert find_angle(50,40)==90",
        "canonical_solution": "def find_angle(a,b):\r\n c = 180 - (a + b)\r\n return c\r\n"
    },
    {
        "number": 357,
        "prompt": "Write a function to find the maximum element of all the given tuple records.\ndef find_max(test_list):\n",
        "checkpoint": "13B",
        "pass": 7,
        "correct": true,
        "answer": "    max_element = test_list[0][0]\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            if test_list[i][j] > max_element:\n                max_element = test_list[i][j]\n    return max_element\n\n# Test the function with sample input\nsample_list = [(1, 2, 3), (4, 5, 6), (7, 8, 9)]\nprint(find_max(sample_list)) # should output 9\n\n# Test the function with another sample input\nsample_list = [(1, 10, 3), (4, 5, 6), (7, 8, 12)]\nprint(find_max(sample_list)) # should output 12\n\n# Test the function with another sample input\nsample_list = [(1, 2, 3), (4, 5, 6), (7, 8, 9), (10, 11, 12), (13, 14, 15)]\nprint(find_max(sample_list)) # should output 15 ",
        "generated_testcode": "assert find_max([(1, 2, 3), (4, 5, 6), (7, 8, 9)]) == 9\n",
        "test": "assert find_max([(2, 4), (6, 7), (5, 1), (6, 10), (8, 7)]) == 10\nassert find_max([(3, 5), (7, 8), (6, 2), (7, 11), (9, 8)]) == 11\nassert find_max([(4, 6), (8, 9), (7, 3), (8, 12), (10, 9)]) == 12",
        "canonical_solution": "def find_max(test_list):\r\n  res = max(int(j) for i in test_list for j in i)\r\n  return (res) "
    },
    {
        "number": 358,
        "prompt": "Write a function to find modulo division of two lists using map and lambda function.\ndef moddiv_list(nums1,nums2):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    result = list(map(lambda x,y:x%y,nums1,nums2))\n    return result\n\nnums1 = [2,4,6,8,10,12]\nnums2 = [3,6,9,2,7,5]\nprint(moddiv_list(nums1,nums2)) ",
        "generated_testcode": "assert moddiv_list([1,2,3,4,5],[2,3,4,5]) == [1,1,1,1]\n",
        "test": "assert moddiv_list([4,5,6],[1, 2, 3])==[0, 1, 0]\nassert moddiv_list([3,2],[1,4])==[0, 2]\nassert moddiv_list([90,120],[50,70])==[40, 50]",
        "canonical_solution": "def moddiv_list(nums1,nums2):\r\n  result = map(lambda x, y: x % y, nums1, nums2)\r\n  return list(result)"
    },
    {
        "number": 359,
        "prompt": "Write a python function to check whether one root of the quadratic equation is twice of the other or not.\ndef Check_Solution(a,b,c): \n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    delta = b**2 - 4*a*c\n    if delta > 0:\n        return False\n    elif delta == 0:\n        return True\n    else:\n        return True\n\nprint(Check_Solution(2,5,3)) # should return False\nprint(Check_Solution(2,4,2)) # should return True\nprint(Check_Solution(1,3,-4)) # should return False\n\n\n#Explanation\n#The quadratic equation is of the form ax^2 + bx + c = 0, where a, b and c are real numbers. \n#The roots of the equation are given by the formula:\n#x = (-b +/- sqrt(b^2 - 4ac)) / 2a\n#If the discriminant (b^2 - 4ac) is greater than zero, then the equation has two real distinct roots. If it is zero, then it has two equal real roots. If it is less than zero, then the roots are complex.\n#Here we are checking whether one root is twice the other or not, which means if discriminant is equal to 0. If delta is zero, then the roots are equal and if delta is less than zero, then the roots are complex. If delta is greater than zero, then the roots are distinct.\n\n#Input:\n#a, b, and c are the coefficients of the quadratic equation.\n\n#Output:\n#Return True if one root is twice of the other, otherwise return False.\n\n#Example:\n#Check_Solution",
        "generated_testcode": "assert Check_Solution(1,2,3) == True\n",
        "test": "assert Check_Solution(1,3,2) == \"Yes\"\nassert Check_Solution(1,2,3) == \"No\"\nassert Check_Solution(1,-5,6) == \"No\"",
        "canonical_solution": "def Check_Solution(a,b,c): \r\n    if (2*b*b == 9*a*c): \r\n        return (\"Yes\"); \r\n    else: \r\n        return (\"No\"); "
    },
    {
        "number": 360,
        "prompt": "Write a function to find the n\u2019th carol number.\ndef get_carol(n): \n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    if n < 1 or n > 100: \n        return \"Invalid input. Please enter a number between 1 and 100.\"\n    carol = \"\" \n    for i in range(n): \n        if i == 0: \n            carol += \"C\"\n        elif i % 10 == 0: \n            carol += \"a\"\n        elif i % 9 == 0: \n            carol += \"h\"\n        elif i % 8 == 0: \n            carol += \"e\"\n        elif i % 7 == 0: \n            carol += \"r\"\n        elif i % 6 == 0: \n            carol += \"o\"\n        elif i % 5 == 0: \n            carol += \"l\"\n        else: \n            carol += str(i)\n    return carol \n\nprint(get_carol(7)) # \"C7h3o4e1r2o5l\" ",
        "generated_testcode": "assert get_carol(1) == \"We three kings\"\n",
        "test": "assert get_carol(2) == 7\nassert get_carol(4) == 223\nassert get_carol(5) == 959",
        "canonical_solution": "def get_carol(n): \r\n\tresult = (2**n) - 1\r\n\treturn result * result - 2"
    },
    {
        "number": 361,
        "prompt": "Write a function to remove empty lists from a given list of lists.\ndef remove_empty(list1):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    return [lst for lst in list1 if lst != []]\n\n# Example usage:\nlist1 = [[1, 2, 3], [], [4, 5], [], [6, 7, 8], []]\nprint(remove_empty(list1)) # Output: [[1, 2, 3], [4, 5], [6, 7, 8]]\n\n# Example usage:\nlist2 = [[], [], [1, 2, 3], [4, 5], [6, 7, 8], []]\nprint(remove_empty(list2)) # Output: [[1, 2, 3], [4, 5], [6, 7, 8]]\n\n# Example usage:\nlist3 = []\nprint(remove_empty(list3)) # Output: []\n\n# Example usage:\nlist4 = [[1, 2, 3]]\nprint(remove_empty(list4)) # Output: [[1, 2, 3]] ",
        "generated_testcode": "assert remove_empty([[1, 2, 3], [], [4, 5], [6, 7, 8], []]) == [[1, 2, 3], [4, 5], [6, 7, 8]]\n",
        "test": "assert remove_empty([[], [], [], 'Red', 'Green', [1,2], 'Blue', [], []])==['Red', 'Green', [1, 2], 'Blue']\nassert remove_empty([[], [], [],[],[], 'Green', [1,2], 'Blue', [], []])==[ 'Green', [1, 2], 'Blue']\nassert remove_empty([[], [], [], 'Python',[],[], 'programming', 'language',[],[],[], [], []])==['Python', 'programming', 'language']",
        "canonical_solution": "def remove_empty(list1):\r\n  remove_empty = [x for x in list1 if x]\r\n  return remove_empty"
    },
    {
        "number": 362,
        "prompt": "Write a python function to find the item with maximum occurrences in a given list.\ndef max_occurrences(nums):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    max_num = nums[0]\n    max_count = 1\n    count_dict = {}\n    for num in nums:\n        if num in count_dict:\n            count_dict[num] += 1\n        else:\n            count_dict[num] = 1\n        if count_dict[num] > max_count:\n            max_count = count_dict[num]\n            max_num = num\n    return max_num\n\n# Testing the function with sample input\nnums = [1, 2, 3, 3, 3, 3, 4, 5, 5, 6, 6, 6, 6, 6]\nprint(max_occurrences(nums))  # Output: 6\n\n# Time complexity: O(n) \n# Space complexity: O(n) ",
        "generated_testcode": "assert max_occurrences([1, 2, 3, 2, 4, 5, 2, 6, 2, 3, 7, 2, 8, 9, 2]) == 2\n",
        "test": "assert max_occurrences([1,2,3,1,2,3,12,4,2]) ==  2\nassert max_occurrences([1,2,6,7,0,1,0,1,0]) == 1,0\nassert max_occurrences([1,2,3,1,2,4,1]) == 1",
        "canonical_solution": "def max_occurrences(nums):\r\n    max_val = 0\r\n    result = nums[0] \r\n    for i in nums:\r\n        occu = nums.count(i)\r\n        if occu > max_val:\r\n            max_val = occu\r\n            result = i \r\n    return result"
    },
    {
        "number": 363,
        "prompt": "Write a function to add the k elements to each element in the tuple.\ndef add_K_element(test_list, K):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    new_list = []\n    for element in test_list:\n        new_list.append(element + K)\n    return new_list\n\n# Test the function\nprint(add_K_element([1, 2, 3, 4, 5, 6, 7, 8], 5))\n\n# Test the function with a tuple\nprint(add_K_element((1, 2, 3, 4, 5, 6, 7, 8), 5))\n\n# Test the function with a string\nprint(add_K_element(\"hello\", 5)) # This should raise a TypeError\n",
        "generated_testcode": "assert add_K_element([1, 2, 3, 4, 5], 2) == (3, 4, 5, 6)\n",
        "test": "assert add_K_element([(1, 3, 4), (2, 4, 6), (3, 8, 1)], 4) == [(5, 7, 8), (6, 8, 10), (7, 12, 5)]\nassert add_K_element([(1, 2, 3), (4, 5, 6), (7, 8, 9)], 8) == [(9, 10, 11), (12, 13, 14), (15, 16, 17)]\nassert add_K_element([(11, 12, 13), (14, 15, 16), (17, 18, 19)], 9) == [(20, 21, 22), (23, 24, 25), (26, 27, 28)]",
        "canonical_solution": "def add_K_element(test_list, K):\r\n  res = [tuple(j + K for j in sub ) for sub in test_list]\r\n  return (res) "
    },
    {
        "number": 364,
        "prompt": "Write a function to find the number of flips required to make the given binary string a sequence of alternate characters.\ndef make_flip(ch): \n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    flip_count = 0\n    prev_ch = ch[0]\n    for i in range(1, len(ch)): \n        if ch[i] == prev_ch: \n            flip_count += 1\n        else: \n            prev_ch = ch[i] \n    return flip_count \n\n# Example usage \nch = \"01010101\"\nprint(make_flip(ch)) ",
        "generated_testcode": "",
        "test": "assert min_flip_to_make_string_alternate(\"0001010111\") == 2\nassert min_flip_to_make_string_alternate(\"001\") == 1\nassert min_flip_to_make_string_alternate(\"010111011\") == 2 ",
        "canonical_solution": "def make_flip(ch): \r\n\treturn '1' if (ch == '0') else '0'\r\ndef get_flip_with_starting_charcter(str, expected): \r\n\tflip_count = 0\r\n\tfor i in range(len( str)): \r\n\t\tif (str[i] != expected): \r\n\t\t\tflip_count += 1\r\n\t\texpected = make_flip(expected) \r\n\treturn flip_count \r\ndef min_flip_to_make_string_alternate(str): \r\n\treturn min(get_flip_with_starting_charcter(str, '0'),get_flip_with_starting_charcter(str, '1')) "
    },
    {
        "number": 365,
        "prompt": "Write a python function to count the number of digits of a given number.\ndef count_Digit(n):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    count = 0\n    while n != 0:\n        count += 1\n        n = n//10\n    return count\n\n# Test the function\nprint(count_Digit(1234567)) # Output: 6\nprint(count_Digit(9999999)) # Output: 5\nprint(count_Digit(100000000)) # Output: 6\nprint(count_Digit(0)) # Output: 1\nprint(count_Digit(1)) # Output: 1\nprint(count_Digit(10)) # Output: 2\nprint(count_Digit(100)) # Output: 3\nprint(count_Digit(1000)) # Output: 3\nprint(count_Digit(1234567890)) # Output: 7\nprint(count_Digit(12345678900)) # Output: 8\n\n# or \ndef count_Digit(n):\n    return len(str(n))\n\nprint(count_Digit(1234567)) # Output: 6\nprint(count_Digit(999999)) # Output: 5\nprint(count_Digit(10000000)) # Output: 6\nprint(count_Digit(0)) # Output: 1\nprint(count_Digit(1)) # Output: 1\n",
        "generated_testcode": "assert count_Digit(12345) == 4\n",
        "test": "assert count_Digit(12345) == 5\nassert count_Digit(11223305) == 8\nassert count_Digit(4123459) == 7",
        "canonical_solution": "def count_Digit(n):\r\n    count = 0\r\n    while n != 0:\r\n        n //= 10\r\n        count += 1\r\n    return count"
    },
    {
        "number": 366,
        "prompt": "Write a python function to find the largest product of the pair of adjacent elements from a given list of integers.\ndef adjacent_num_product(list_nums):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    max_product = 0\n    for i in range(len(list_nums)-1):\n        if list_nums[i]*list_nums[i+1] > max_product:\n            max_product = list_nums[i]*list_nums[i+1]\n    return max_product\n\n# test the function with a list of integers\nlist_nums = [1, 10, 3, -5, 6, -7, 2, 8, 3, -1, 4, -2, 9, 7]\nprint(adjacent_num_product(list_nums)) # output: 72\n\n# test the function with an empty list\nlist_nums = []\nprint(adjacent_num_product(list_nums)) # output: 0\n\n# test the function with a list of one integer\nlist_nums = [5]\nprint(adjacent_num_product(list_nums)) # output: 0 ",
        "generated_testcode": "assert adjacent_num_product([1, 2, 3, 4, 5, 6]) == 12\n",
        "test": "assert adjacent_num_product([1,2,3,4,5,6]) == 30\nassert adjacent_num_product([1,2,3,4,5]) == 20\nassert adjacent_num_product([2,3]) == 6",
        "canonical_solution": "def adjacent_num_product(list_nums):\r\n    return max(a*b for a, b in zip(list_nums, list_nums[1:]))"
    },
    {
        "number": 367,
        "prompt": "Write a function to check if a binary tree is balanced or not.\n\tdef __init__(self, data): \n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "\t\tself.data = data \n\t\tself.left = None\n\t\tself.right = None\n\nclass Solution:\n\tdef isBalanced(self, root):\n\t\tdef getHeight(root):\n\t\t\tif root is None:\n\t\t\t\treturn 0\n\t\t\tleft_height = getHeight(root.left)\n\t\t\tright_height = getHeight(root.right)\n\t\t\tif left_height == -1 or right_height == -1:\n\t\t\t\treturn -1\n\t\t\tif abs(left_height - right_height) > 1:\n\t\t\t\treturn -1\n\t\t\treturn max(left_height, right_height) + 1\n\n\t\treturn getHeight(root) != -1\n\n# Test the function with the following tree\n#       1\n#      / \\\n#     2   3\n#    / \\\n#   4   5\n#  /\n# 6\nroot = Node(1)\nroot.left = Node(2)\nroot.right = Node(3)\nroot.left.left = Node(4)\nroot.left.left.left = Node(6)\n\n# Output: True\nprint(Solution().isBalanced(root)) # Output: True ",
        "generated_testcode": "assert is_balanced(root) == True\n\n",
        "test": "assert is_tree_balanced(root) == False\nassert is_tree_balanced(root1) == True\nassert is_tree_balanced(root2) == False ",
        "canonical_solution": "class Node: \r\n\tdef __init__(self, data): \r\n\t\tself.data = data \r\n\t\tself.left = None\r\n\t\tself.right = None\r\ndef get_height(root): \r\n\tif root is None: \r\n\t\treturn 0\r\n\treturn max(get_height(root.left), get_height(root.right)) + 1\r\ndef is_tree_balanced(root): \r\n\tif root is None: \r\n\t\treturn True\r\n\tlh = get_height(root.left) \r\n\trh = get_height(root.right) \r\n\tif (abs(lh - rh) <= 1) and is_tree_balanced( \r\n\troot.left) is True and is_tree_balanced( root.right) is True: \r\n\t\treturn True\r\n\treturn False"
    },
    {
        "number": 368,
        "prompt": "Write a function to repeat the given tuple n times.\ndef repeat_tuples(test_tup, N):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": true,
        "answer": "    result = ()\n    for i in range(N):\n        result += test_tup\n    return result\n\n# Test the function with the following example\ntest_tup = (1, 2, 3)\nN = 3\nprint(repeat_tuples(test_tup, N))  # Output: (1, 2, 3, 1, 2, 3, 1, 2, 3)\n\n# Using list comprehension\ndef repeat_tuples(test_tup, N):\n    return tuple([test_tup for i in range(N)])\n\n# Test the function with the same example\nprint(repeat_tuples(test_tup, N))  # Output: (1, 2, 3, 1, 2, 3, 1, 2, 3) ",
        "generated_testcode": "assert repeat_tuples((1, 2, 3), 3) == ((1, 2, 3), (1, 2, 3), (1, 2, 3))\n",
        "test": "assert repeat_tuples((1, 3), 4) == ((1, 3), (1, 3), (1, 3), (1, 3))\nassert repeat_tuples((1, 2), 3) == ((1, 2), (1, 2), (1, 2))\nassert repeat_tuples((3, 4), 5) == ((3, 4), (3, 4), (3, 4), (3, 4), (3, 4))",
        "canonical_solution": "def repeat_tuples(test_tup, N):\r\n  res = ((test_tup, ) * N)\r\n  return (res) "
    },
    {
        "number": 369,
        "prompt": "Write a function to find the lateral surface area of cuboid\ndef lateralsurface_cuboid(l,w,h):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    return 2*(l*w + w*h + l*h)\n\n#Test the function with given inputs\nprint(lateralsurface_cuboid(10,5,8))  #140 ",
        "generated_testcode": "",
        "test": "assert lateralsurface_cuboid(8,5,6)==156\nassert lateralsurface_cuboid(7,9,10)==320\nassert lateralsurface_cuboid(10,20,30)==1800",
        "canonical_solution": "def lateralsurface_cuboid(l,w,h):\r\n  LSA = 2*h*(l+w)\r\n  return LSA"
    },
    {
        "number": 370,
        "prompt": "Write a function to sort a tuple by its float element.\ndef float_sort(price):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    return price[1]\n\n# Example usage:\nmy_tuple = ((1, 10.5), (2, 6.7), (3, 1.2), (4, 5.6), (5, 2.4))\nsorted_tuple = sorted(my_tuple, key=float_sort)\nprint(sorted_tuple)  # Output: [(3, 1.2), (5, 2.4), (2, 6.7), (1, 10.5), (4, 5.6)]\n\n# Another example:\nmy_tuple = ((1, \"apple\"), (2, \"orange\"), (3, \"banana\"), (4, \"grape\"), (5, \"kiwi\"))\nsorted_tuple = sorted(my_tuple, key=lambda x: x[1])\nprint(sorted_tuple)  # Output: [(3, 'banana'), (5, 'kiwi'), (1, 'apple'), (2, 'orange'), (4, 'grape')]\n\n# Sort a list of tuples based on the second element of the tuple\n# Example:\nmy_list = [(5, \"orange\"), (2, \"apple\"), (4, \"banana\"), (1, \"kiwi\"), (3, \"grape\")]\nsorted_list = sorted(my_list, key=lambda x: x[1])\nprint(sorted_list)  # Output: [(3, 'grape'), (1, 'kiwi'), (2, 'apple'), (",
        "generated_testcode": "assert float_sort((1.5, 2.3, 3.7, 1.1) == (1.1, 1.5, 2.3, 3.7)\n",
        "test": "assert float_sort([('item1', '12.20'), ('item2', '15.10'), ('item3', '24.5')])==[('item3', '24.5'), ('item2', '15.10'), ('item1', '12.20')] \nassert float_sort([('item1', '15'), ('item2', '10'), ('item3', '20')])==[('item3', '20'), ('item1', '15'), ('item2', '10')] \nassert float_sort([('item1', '5'), ('item2', '10'), ('item3', '14')])==[('item3', '14'), ('item2', '10'), ('item1', '5')] ",
        "canonical_solution": "def float_sort(price):\r\n  float_sort=sorted(price, key=lambda x: float(x[1]), reverse=True)\r\n  return float_sort"
    },
    {
        "number": 371,
        "prompt": "Write a function to find the smallest missing element in a sorted array.\ndef smallest_missing(A, left_element, right_element):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    if left_element == right_element:\n        return A[right_element]\n    mid = (left_element + right_element) // 2\n    if A[mid] == mid:\n        return smallest_missing(A, mid + 1, right_element)\n    else:\n        return smallest_missing(A, left_element, mid)\n\n# Test the function\nprint(smallest_missing([0, 1, 2, 3, 4, 6, 9, 11, 15], 0, 5))  # Output: 5\nprint(smallest_missing([0, 1, 2, 3, 4, 5, 6, 7, 8, 10], 0, 7))  # Output: 9\nprint(smallest_missing([0, 1, 2, 3, 4, 5, 7, 8, 9, 10], 0, 6))  # Output: 6\nprint(smallest_missing([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 0, 6))  # Output: 0\nprint(smallest_missing([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 1, 6))  # Output: 0\nprint(smallest_missing([1, 3, ",
        "generated_testcode": "assert smallest_missing([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 1, 10) == 0\n",
        "test": "assert smallest_missing([0, 1, 2, 3, 4, 5, 6], 0, 6) == 7\nassert smallest_missing([0, 1, 2, 6, 9, 11, 15], 0, 6) == 3\nassert smallest_missing([1, 2, 3, 4, 6, 9, 11, 15], 0, 7) == 0",
        "canonical_solution": "def smallest_missing(A, left_element, right_element):\r\n    if left_element > right_element:\r\n        return left_element\r\n    mid = left_element + (right_element - left_element) // 2\r\n    if A[mid] == mid:\r\n        return smallest_missing(A, mid + 1, right_element)\r\n    else:\r\n        return smallest_missing(A, left_element, mid - 1)"
    },
    {
        "number": 372,
        "prompt": "Write a function to sort a given list of elements in ascending order using heap queue algorithm.\ndef heap_assending(nums):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    def heapify(nums, n, i):\n        largest = i\n        left = 2 * i + 1\n        right = 2 * i + 2\n\n        if left < n and nums[i] < nums[left]:\n            largest = left\n        if right < n and nums[largest] < nums[right]:\n            largest = right\n        if largest != i:\n            nums[i], nums[largest] = nums[largest], nums[i]\n            heapify(nums, n, largest)\n\n    n = len(nums)\n\n    for i in range(n//2 - 1, -1, -1):\n        heapify(nums, n, i)\n\n    for i in range(n-1, 0, -1):\n        nums[i], nums[0] = nums[0], nums[i]\n        heapify(nums, i, 0)\n\n    return nums\n\n\n# Test the function\nnums = [4, 10, 3, 5, 1, 1, 8, 7, 6]\nprint(heap_assending(nums))\n",
        "generated_testcode": "",
        "test": "assert heap_assending([18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1])==[1, 2, 3, 4, 7, 8, 9, 9, 10, 14, 18]\nassert heap_assending([25, 35, 22, 85, 14, 65, 75, 25, 58])==[14, 22, 25, 25, 35, 58, 65, 75, 85]\nassert heap_assending([1, 3, 5, 7, 9, 2, 4, 6, 8, 0])==[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]",
        "canonical_solution": "import heapq as hq\r\ndef heap_assending(nums):\r\n  hq.heapify(nums)\r\n  s_result = [hq.heappop(nums) for i in range(len(nums))]\r\n  return s_result"
    },
    {
        "number": 373,
        "prompt": "Write a function to find the volume of a cuboid.\ndef volume_cuboid(l,w,h):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    return l*w*h\n\n# Test the function with an example\nprint(volume_cuboid(3,4,5)) # Output: 60\n\n# Create a function to find the area of a rectangle\ndef area_rectangle(l,w):\n    return l*w\n\n# Test the function with an example\nprint(area_rectangle(3,5)) # Output: 15\n\n# Create a function to find the area of a triangle\ndef area_triangle(base,height):\n    return 0.5*base*height\n\n# Test the function with an example\nprint(area_triangle(4,6)) # Output: 12.0\n\n# Create a function to find the area of a circle\ndef area_circle(r):\n    return 3.14*(r**2)\n\n# Test the function with an example\nprint(area_circle(5)) # Output: 78.5\n\n# Create a function to find the circumference of a circle\ndef circumference_circle(r):\n    return 2*3.14*r\n\n# Test the function with an example\nprint(circumference_circle(5)) # Output: 31.4159\n\n# Create a function to find the average of a list\ndef average(lst):\n    return sum(lst)/len(lst)\n\n# Test the function with an example\nlst = [1,2,3,4,5]\nprint(average(lst)) # Output: 3.0",
        "generated_testcode": "assert volume_cuboid(3,4,5) == 60\n",
        "test": "assert volume_cuboid(1,2,3)==6\nassert volume_cuboid(5,7,9)==315\nassert volume_cuboid(10,15,21)==3150",
        "canonical_solution": "def volume_cuboid(l,w,h):\r\n  volume=l*w*h\r\n  return volume"
    },
    {
        "number": 374,
        "prompt": "Write a function to print all permutations of a given string including duplicates.\ndef permute_string(str):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    if len(str) == 0:\n        return []\n    if len(str) == 1:\n        return [str]\n    current = []\n    for i in range(len(str)):\n        char = str[i]\n        remaining = str[:i] + str[i+1:]\n        for perm in permute_string(remaining):\n            current.append(char + perm)\n    return current\n\nprint(permute_string(\"aab\")) \n\n# Output: ['aa', 'ab', 'ba', 'bb', 'aabb', 'abab', 'baa']\n\n# Time Complexity: O(n*n!) ",
        "generated_testcode": "assert permute_string(\"abc\") == [\"abc\", \"acb\", \"bac\", \"bca\", \"cab\", \"cba\"]\n",
        "test": "assert permute_string('ab')==['ab', 'ba']\nassert permute_string('abc')==['abc', 'bac', 'bca', 'acb', 'cab', 'cba']\nassert permute_string('abcd')==['abcd', 'bacd', 'bcad', 'bcda', 'acbd', 'cabd', 'cbad', 'cbda', 'acdb', 'cadb', 'cdab', 'cdba', 'abdc', 'badc', 'bdac', 'bdca', 'adbc', 'dabc', 'dbac', 'dbca', 'adcb', 'dacb', 'dcab', 'dcba']",
        "canonical_solution": "def permute_string(str):\r\n    if len(str) == 0:\r\n        return ['']\r\n    prev_list = permute_string(str[1:len(str)])\r\n    next_list = []\r\n    for i in range(0,len(prev_list)):\r\n        for j in range(0,len(str)):\r\n            new_str = prev_list[i][0:j]+str[0]+prev_list[i][j:len(str)-1]\r\n            if new_str not in next_list:\r\n                next_list.append(new_str)\r\n    return next_list"
    },
    {
        "number": 375,
        "prompt": "Write a function to round the given number to the nearest multiple of a specific number.\ndef round_num(n,m):\n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    return round(n/m)*m\n\n#Example usage:\nprint(round_num(15,10)) # Output: 10\nprint(round_num(16,10)) # Output: 20\nprint(round_num(14,7)) # Output: 14\nprint(round_num(21,5)) # Output: 20\nprint(round_num(25,5)) # Output: 25\nprint(round_num(31,10)) # Output: 30\nprint(round_num(17,5)) # Output: 20\n",
        "generated_testcode": "assert round_num(10,5) == 10\n",
        "test": "assert round_num(4722,10)==4720\nassert round_num(1111,5)==1110\nassert round_num(219,2)==218",
        "canonical_solution": "def round_num(n,m):\r\n    a = (n //m) * m\r\n    b = a + m\r\n    return (b if n - a > b - n else a)"
    },
    {
        "number": 376,
        "prompt": "Write a function to remove tuple elements that occur more than once and replace the duplicates with some custom value.\ndef remove_replica(test_tup):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    new_tup = ()\n    for i in test_tup:\n        if test_tup.count(i) > 1:\n            new_tup += (i, '-',)\n        else:\n            new_tup += (i,)\n    return new_tup\n\n\n# Test the function with the following input\ntest_tup = (1, 2, 3, 4, 2, 5, 3, 6, 7, 8, 2, 9, 0)\nprint(remove_replica(test_tup))\n# Output: (1, '-', 4, 5, '-', 6, 7, 8, '-', 9, 0)\n\n# Test the function with an empty tuple\ntest_tup = ()\nprint(remove_replica(test_tup))\n# Output: ()\n\n# Test the function with a tuple with only one element\ntest_tup = ('a',)\nprint(remove_replica(test_tup))\n# Output: ('a',) ",
        "generated_testcode": "",
        "test": "assert remove_replica((1, 1, 4, 4, 4, 5, 5, 6, 7, 7)) == (1, 'MSP', 4, 'MSP', 'MSP', 5, 'MSP', 6, 7, 'MSP')\nassert remove_replica((2, 3, 4, 4, 5, 6, 6, 7, 8, 9, 9)) == (2, 3, 4, 'MSP', 5, 6, 'MSP', 7, 8, 9, 'MSP')\nassert remove_replica((2, 2, 5, 4, 5, 7, 5, 6, 7, 7)) == (2, 'MSP', 5, 4, 'MSP', 7, 'MSP', 6, 'MSP', 'MSP')",
        "canonical_solution": "def remove_replica(test_tup):\r\n  temp = set()\r\n  res = tuple(ele if ele not in temp and not temp.add(ele) \r\n\t\t\t\telse 'MSP' for ele in test_tup)\r\n  return (res)"
    },
    {
        "number": 377,
        "prompt": "Write a python function to remove all occurrences of a character in a given string.\ndef remove_Char(s,c) :  \n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    return s.replace(c, \"\")\n\n# Testing the function \ns = \"Hello World\"\nc = \"l\"\nprint(remove_Char(s,c)) ",
        "generated_testcode": "assert remove_Char(\"hello world\", \"l\") == \"heo word\"\n",
        "test": "assert remove_Char(\"aba\",'a') == \"b\"\nassert remove_Char(\"toggle\",'g') == \"tole\"\nassert remove_Char(\"aabbc\",'b') == \"aac\"",
        "canonical_solution": "def remove_Char(s,c) :  \r\n    counts = s.count(c) \r\n    s = list(s) \r\n    while counts :  \r\n        s.remove(c) \r\n        counts -= 1 \r\n    s = '' . join(s)   \r\n    return (s) "
    },
    {
        "number": 378,
        "prompt": "Write a python function to shift last element to first position in the given list.\ndef move_first(test_list):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    if len(test_list) == 0:\n        return test_list\n    else:\n        last_element = test_list[-1]\n        test_list.pop()\n        test_list.insert(0, last_element)\n        return test_list\n\n# Test the function with sample list\nprint(move_first([1,2,3,4,5]))\n# Output: [5, 1, 2, 3]\nprint(move_first([1]))\n# Output: [1]\nprint(move_first([]))\n# Output: []\n",
        "generated_testcode": "assert move_first([1, 2, 3, 4, 5]) == [5, 1, 2, 3]\n",
        "test": "assert move_first([1,2,3,4]) == [4,1,2,3]\nassert move_first([0,1,2,3]) == [3,0,1,2]\nassert move_first([9,8,7,1]) == [1,9,8,7]",
        "canonical_solution": "def move_first(test_list):\r\n  test_list = test_list[-1:] + test_list[:-1]  \r\n  return test_list"
    },
    {
        "number": 379,
        "prompt": "Write a function to find the surface area of a cuboid.\ndef surfacearea_cuboid(l,w,h):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    return 2*((2*l*w)+(2*w*h)+(2*h*l)+(2*l*h)+(2*w*h))\n\n# Test the function with dimensions 6, 4, 2\nprint(surfacearea_cuboid(6,4,2)) # should return 84\n\n# Output: 84\n\n# Another test:\nprint(surfacearea_cuboid(3,4,5)) # should return 94\n\n# Output: 94 ",
        "generated_testcode": "assert surfacearea_cuboid(2,3,4) == 2*(2*3+2*4+3*4) + 2*2*3 + 2*3*4 + 2*4*4\n\n",
        "test": "assert surfacearea_cuboid(1,2,3)==22\nassert surfacearea_cuboid(5,7,9)==286\nassert surfacearea_cuboid(10,15,21)==1350",
        "canonical_solution": "def surfacearea_cuboid(l,w,h):\r\n  SA = 2*(l*w + l * h + w * h)\r\n  return SA"
    },
    {
        "number": 380,
        "prompt": "Write a function to generate a two-dimensional array.\ndef multi_list(rownum,colnum):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    \"\"\"\n    Generates a 2D list of row number and column number\n    :param rownum: int\n    :param colnum: int\n    :return: list of lists\n    \"\"\"\n    result = []\n    for i in range(rownum):\n        row = []\n        for j in range(colnum):\n            row.append(0)\n        result.append(row)\n    return result\n\n# Test the function\nprint(multi_list(3,4))\n\n# output: [[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]]\n\n\n# Example usage:\nmatrix = multi_list(3,4)\nprint(matrix)\n# output: [[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]]\n\n# You can also set the values of each element in the matrix using a loop. ",
        "generated_testcode": "assert multi_list(3,4) == [[0,0,0,0],[0,0,0,0],[0,0,0,0]]\n",
        "test": "assert multi_list(3,4)==[[0, 0, 0, 0], [0, 1, 2, 3], [0, 2, 4, 6]] \nassert multi_list(5,7)==[[0, 0, 0, 0, 0, 0, 0], [0, 1, 2, 3, 4, 5, 6], [0, 2, 4, 6, 8, 10, 12], [0, 3, 6, 9, 12, 15, 18], [0, 4, 8, 12, 16, 20, 24]]\nassert multi_list(10,15)==[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14], [0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28], [0, 3, 6, 9, 12, 15, 18, 21, 24, 27, 30, 33, 36, 39, 42], [0, 4, 8, 12, 16, 20, 24, 28, 32, 36, 40, 44, 48, 52, 56], [0, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70], [0, 6, 12, 18, 24, 30, 36, 42, 48, 54, 60, 66, 72, 78, 84], [0, 7, 14, 21, 28, 35, 42, 49, 56, 63, 70, 77, 84, 91, 98], [0, 8, 16, 24, 32, 40, 48, 56, 64, 72, 80, 88, 96, 104, 112], [0, 9, 18, 27, 36, 45, 54, 63, 72, 81, 90, 99, 108, 117, 126]]",
        "canonical_solution": "def multi_list(rownum,colnum):\r\n  multi_list = [[0 for col in range(colnum)] for row in range(rownum)]\r\n  for row in range(rownum):\r\n    for col in range(colnum):\r\n        multi_list[row][col]= row*col\r\n  return multi_list\r\n"
    },
    {
        "number": 381,
        "prompt": "Write a function to sort a list of lists by a given index of the inner list.\ndef index_on_inner_list(list_data, index_no):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    return sorted(list_data, key=lambda x: x[index_no])\n\n# Test with example\ndata = [[\"banana\", 2, \"apple\", 3], [\"apple\", 2, \"banana\", 1], [\"pear\", 3, \"orange\", 2]]\nprint(index_on_inner_list(data, 1))  # Output: [['banana', 2, 'apple', 3], ['pear', 3, 'orange', 2], ['apple', 2, 'banana', 1]]\nprint(index_on_inner_list(data, 2))  # Output: [['apple', 2, 'banana', 3], ['pear', 3, 'orange', 2], ['banana', 2, 'apple', 1]]\nprint(index_on_inner_list(data, 3))  # Output: [['apple', 2, 'banana', 3], ['apple', 2, 'banana', 1], ['pear', 3, 'orange', 2]]\n",
        "generated_testcode": "",
        "test": "assert index_on_inner_list([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,0)==[('Beau Turnbull', 94, 98), ('Brady Kent', 97, 96), ('Greyson Fulton', 98, 99), ('Wyatt Knott', 91, 94)]\nassert index_on_inner_list([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,1)==[('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98), ('Brady Kent', 97, 96), ('Greyson Fulton', 98, 99)]\nassert index_on_inner_list([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,2)==[('Wyatt Knott', 91, 94), ('Brady Kent', 97, 96), ('Beau Turnbull', 94, 98), ('Greyson Fulton', 98, 99)]",
        "canonical_solution": "from operator import itemgetter\r\ndef index_on_inner_list(list_data, index_no):\r\n    result = sorted(list_data, key=itemgetter(index_no))\r\n    return result"
    },
    {
        "number": 382,
        "prompt": "Write a function to find the number of rotations in a circularly sorted array.\ndef find_rotation_count(A):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    n = len(A)\n    if not A:\n        return 0\n    l, r = 0, n - 1\n    while l < r:\n        mid = (l + r) // 2\n        if A[mid] > A[r]:\n            l = mid + 1\n        else:\n            r = mid\n    return l\n\nA = [4, 5, 6, 7, 8, 9, 10, 1, 2, 3]\nprint(find_rotation_count(A))\n\n# Output: 4\n# Explanation: The rotation count is 4, as the array is rotated 4 times. The array is [4, 5, 6, 7, 8, 9, 10, 1, 2, 3]\n\n\nA = [10, 1, 2, 3, 4, 5, 6, 7, 8, 9]\nprint(find_rotation_count(A))\n\n# Output: 0\n# Explanation: The array is not rotated.\n\nA = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nprint(find_rotation_count(A))\n\n# Output: 0\n# Explanation: The array is not rotated.\n\nA = [4, 5, 6, 7, 8, 9",
        "generated_testcode": "assert find_rotation_count([4, 5, 6, 7, 8, 9, 10, 1, 2, 3]) == 5\n",
        "test": "assert find_rotation_count([8, 9, 10, 1, 2, 3, 4, 5, 6, 7]) == 3\nassert find_rotation_count([8, 9, 10,2, 5, 6]) == 3\nassert find_rotation_count([2, 5, 6, 8, 9, 10]) == 0",
        "canonical_solution": "def find_rotation_count(A):\r\n    (left, right) = (0, len(A) - 1)\r\n    while left <= right:\r\n        if A[left] <= A[right]:\r\n            return left\r\n        mid = (left + right) // 2\r\n        next = (mid + 1) % len(A)\r\n        prev = (mid - 1 + len(A)) % len(A)\r\n        if A[mid] <= A[next] and A[mid] <= A[prev]:\r\n            return mid\r\n        elif A[mid] <= A[right]:\r\n            right = mid - 1\r\n        elif A[mid] >= A[left]:\r\n            left = mid + 1\r\n    return -1"
    },
    {
        "number": 383,
        "prompt": "Write a python function to toggle all odd bits of a given number.\ndef even_bit_toggle_number(n) : \n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": true,
        "answer": "    return n ^ ((1 << n.bit_length()) - 1)\n\n# Test the function\nn = 1234\nprint(\"Original number:\", n)\nprint(\"Toggled number:\", even_bit_toggle_number(n)) ",
        "generated_testcode": "assert even_bit_toggle_number(10) == 5\n",
        "test": "assert even_bit_toggle_number(10) == 15\nassert even_bit_toggle_number(20) == 1\nassert even_bit_toggle_number(30) == 11",
        "canonical_solution": "def even_bit_toggle_number(n) : \r\n    res = 0; count = 0; temp = n    \r\n    while(temp > 0 ) : \r\n        if (count % 2 == 0) : \r\n            res = res | (1 << count)      \r\n        count = count + 1\r\n        temp >>= 1 \r\n    return n ^ res "
    },
    {
        "number": 384,
        "prompt": "Write a python function to find the frequency of the smallest value in a given array.\ndef frequency_Of_Smallest(n,arr): \n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    count = 0\n    min_val = min(arr) \n    for i in range(len(arr)): \n        if arr[i] == min_val: \n            count += 1\n    return count \n\n# Example usage:\narr = [1, 2, 3, 4, 4, 5, 5, 6, 6, 6, 7, 7, 7, 7] \nn = len(arr) \nprint(frequency_Of_Smallest(n, arr)) \n\n# Output: 1 ",
        "generated_testcode": "assert frequency_Of_Smallest(5,[1,2,3,4,5,5]) == 1\n",
        "test": "assert frequency_Of_Smallest(5,[1,2,3,4,3]) == 1\nassert frequency_Of_Smallest(7,[3,1,2,5,6,2,3]) == 1\nassert frequency_Of_Smallest(7,[3,3,6,3,7,4,9]) == 3",
        "canonical_solution": "def frequency_Of_Smallest(n,arr): \r\n    mn = arr[0] \r\n    freq = 1\r\n    for i in range(1,n): \r\n        if (arr[i] < mn): \r\n            mn = arr[i] \r\n            freq = 1\r\n        elif (arr[i] == mn): \r\n            freq += 1\r\n    return freq "
    },
    {
        "number": 385,
        "prompt": "Write a function to find the n'th perrin number using recursion.\ndef get_perrin(n):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    if n == 1 or n == 2:\n        return 1\n    return get_perrin(n-1) + get_perrin(n-2) + 1\n\n# Test the function with some values\nprint(get_perrin(1)) # should return 1\nprint(get_perrin(2)) # should return 1\nprint(get_perrin(3)) # should return 2\nprint(get_perrin(4)) # should return 3\nprint(get_perrin(5)) # should return 4\nprint(get_perrin(6)) # should return 5\nprint(get_perrin(7)) # should return 8\nprint(get_perrin(8)) # should return 10\nprint(get_perrin(9)) # should return 13\nprint(get_perrin(10)) # should return 18\n\n# This function will not work for n greater than 10 due to recursion depth errors.\n# To calculate the nth perrin number for n greater than 10, use a loop or memoization to store the previous results. ",
        "generated_testcode": "assert get_perrin(1) == 1\n",
        "test": "assert get_perrin(9) == 12\nassert get_perrin(4) == 2\nassert get_perrin(6) == 5",
        "canonical_solution": "def get_perrin(n):\r\n  if (n == 0):\r\n    return 3\r\n  if (n == 1):\r\n    return 0\r\n  if (n == 2):\r\n    return 2 \r\n  return get_perrin(n - 2) + get_perrin(n - 3)"
    },
    {
        "number": 386,
        "prompt": "Write a function to find out the minimum no of swaps required for bracket balancing in the given string.\ndef swap_count(s):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    stack = []\n    count = 0\n    for char in s:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if not stack or stack[-1] == '}':\n                return -1\n            stack.pop()\n        elif char == '{':\n            if not stack or stack[-1] == ')':\n                return -1\n            stack.pop()\n            count += 1\n        else:\n            stack.append(char)\n    return count\n\n# Test cases\nprint(swap_count(\"({)}\"))  # should return -1\nprint(swap_count(\"({()})\"))  # should return 1\nprint(swap_count(\"({}{}({})\"))  # should return 2\nprint(swap_count(\"({)}()\"))  # should return -1\nprint(swap_count(\"({})\"))  # should return 0\nprint(swap_count(\"({}{})({})\"))  # should return 2 ",
        "generated_testcode": "assert swap_count(\"{[()]}\") == 0\n",
        "test": "assert swap_count(\"[]][][\") == 2\nassert swap_count(\"[[][]]\") == 0\nassert swap_count(\"[[][]]][\") == 1",
        "canonical_solution": "def swap_count(s):\r\n\tchars = s\r\n\tcount_left = 0\r\n\tcount_right = 0\r\n\tswap = 0\r\n\timbalance = 0; \r\n\tfor i in range(len(chars)):\r\n\t\tif chars[i] == '[':\r\n\t\t\tcount_left += 1\r\n\t\t\tif imbalance > 0:\r\n\t\t\t\tswap += imbalance\r\n\t\t\t\timbalance -= 1\r\n\t\telif chars[i] == ']':\r\n\t\t\tcount_right += 1\r\n\t\t\timbalance = (count_right - count_left) \r\n\treturn swap"
    },
    {
        "number": 387,
        "prompt": "Write a python function to check whether the hexadecimal number is even or odd.\ndef even_or_odd(N): \n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    num = int(N, 16) # Converting hexadecimal to decimal \n    if num % 2 == 0: \n        return \"Even\"\n    else: \n        return \"Odd\"\n  \n# Testing the function \nprint(even_or_odd(\"2A\")) \nprint(even_or_odd(\"1F\")) \n  \n# Output: \n# Even\n# Odd ",
        "generated_testcode": "assert even_or_odd(\"A\") == \"even\"\n",
        "test": "assert even_or_odd(\"AB3454D\") ==\"Odd\"\nassert even_or_odd(\"ABC\") == \"Even\"\nassert even_or_odd(\"AAD\") == \"Odd\"",
        "canonical_solution": "def even_or_odd(N): \r\n    l = len(N) \r\n    if (N[l-1] =='0'or N[l-1] =='2'or \r\n        N[l-1] =='4'or N[l-1] =='6'or \r\n        N[l-1] =='8'or N[l-1] =='A'or \r\n        N[l-1] =='C'or N[l-1] =='E'): \r\n        return (\"Even\") \r\n    else: \r\n        return (\"Odd\") "
    },
    {
        "number": 388,
        "prompt": "Write a python function to find the highest power of 2 that is less than or equal to n.\ndef highest_Power_of_2(n): \n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    i = 1\n    while (i <= n): \n        i <<= 1\n    return i >> 1\n  \n# Test the function \nn = 63\nprint(\"Highest power of 2 that is less than or equal to\", n, \"is\", highest_Power_of_2(n)) \n# Output: Highest power of 2 that is less than or equal to 63 is 32 ",
        "generated_testcode": "assert highest_Power_of_2(10) == 8\n",
        "test": "assert highest_Power_of_2(10) == 8\nassert highest_Power_of_2(19) == 16\nassert highest_Power_of_2(32) == 32",
        "canonical_solution": "def highest_Power_of_2(n): \r\n    res = 0; \r\n    for i in range(n, 0, -1): \r\n        if ((i & (i - 1)) == 0): \r\n            res = i; \r\n            break; \r\n    return res; "
    },
    {
        "number": 389,
        "prompt": "Write a function to find the n'th lucas number.\ndef find_lucas(n): \n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    if n == 0: \n        return 2\n    elif n == 1: \n        return 1\n    else: \n        return find_lucas(n-1) + find_lucas(n-2) \n\n# Test the function \nn = 10\nprint(f\"The {n}th Lucas number is {find_lucas(n)}\") ",
        "generated_testcode": "assert find_lucas(0) == 2\n",
        "test": "assert find_lucas(9) == 76\nassert find_lucas(4) == 7\nassert find_lucas(3) == 4",
        "canonical_solution": "def find_lucas(n): \r\n\tif (n == 0): \r\n\t\treturn 2\r\n\tif (n == 1): \r\n\t\treturn 1\r\n\treturn find_lucas(n - 1) + find_lucas(n - 2) "
    },
    {
        "number": 390,
        "prompt": "Write a function to insert a given string at the beginning of all items in a list.\ndef add_string(list,string):\n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    new_list = []\n    for item in list:\n        new_list.append(string + item)\n    return new_list\n\n#Test the function\nmy_list = ['apple', 'banana', 'cherry']\nprint(add_string(my_list, 'fruit: '))  # Output: ['fruit: apple', 'fruit: banana', 'fruit: cherry']\n\n# Write a function to check if a given number is prime\ndef is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True\n\n#Test the function\nprint(is_prime(5))   # Output: True\nprint(is_prime(7))   # Output: True\nprint(is_prime(8))   # Output: False\n\n# Write a function that returns the sum of two numbers\ndef add_numbers(num1, num2):\n    return num1 + num2\n\n#Test the function\nprint(add_numbers(5, 3))   # Output: 8\nprint(add_numbers(10, 5))   # Output: 15\n\n# Write a function to find the average of a list of numbers\ndef find_average(lst):\n    return sum(lst) / len(lst)\n\n#Test the function\nprint(find_average([1, 2, 3, 4, 5]))   # Output:",
        "generated_testcode": "assert add_string(['apple','banana','orange'],'fruit: ') == ['fruit: apple', 'fruit: banana', 'fruit: orange']\n",
        "test": "assert add_string([1,2,3,4],'temp{0}')==['temp1', 'temp2', 'temp3', 'temp4']\nassert add_string(['a','b','c','d'], 'python{0}')==[ 'pythona', 'pythonb', 'pythonc', 'pythond']\nassert add_string([5,6,7,8],'string{0}')==['string5', 'string6', 'string7', 'string8']",
        "canonical_solution": "def add_string(list,string):\r\n add_string=[string.format(i) for i in  list]\r\n return add_string"
    },
    {
        "number": 391,
        "prompt": "Write a function to convert more than one list to nested dictionary.\ndef convert_list_dictionary(l1, l2, l3):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    result = {}\n    for i in range(len(l1)):\n        result[l1[i]] = {l2[i]: l3[i]}\n    return result\n\n# Test the function with sample input\nprint(convert_list_dictionary(['a', 'b', 'c'], [1, 2, 3], ['x', 'y', 'z']))\n# Output: {'a': {'1': 'x'}, 'b': {'2': 'y'}, 'c': {'3': 'z'}}\n\n# Test the function with another input\nprint(convert_list_dictionary(['x', 'y', 'z'], ['a', 'b', 'c'], [1, 2, 3]))\n# Output: {'x': {'a': '1'}, 'y': {'b': '2'}, 'z': {'c': '3'}} ",
        "generated_testcode": "",
        "test": "assert convert_list_dictionary([\"S001\", \"S002\", \"S003\", \"S004\"],[\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"] ,[85, 98, 89, 92])==[{'S001': {'Adina Park': 85}}, {'S002': {'Leyton Marsh': 98}}, {'S003': {'Duncan Boyle': 89}}, {'S004': {'Saim Richards': 92}}]\nassert convert_list_dictionary([\"abc\",\"def\",\"ghi\",\"jkl\"],[\"python\",\"program\",\"language\",\"programs\"],[100,200,300,400])==[{'abc':{'python':100}},{'def':{'program':200}},{'ghi':{'language':300}},{'jkl':{'programs':400}}]\nassert convert_list_dictionary([\"A1\",\"A2\",\"A3\",\"A4\"],[\"java\",\"C\",\"C++\",\"DBMS\"],[10,20,30,40])==[{'A1':{'java':10}},{'A2':{'C':20}},{'A3':{'C++':30}},{'A4':{'DBMS':40}}]",
        "canonical_solution": "def convert_list_dictionary(l1, l2, l3):\r\n     result = [{x: {y: z}} for (x, y, z) in zip(l1, l2, l3)]\r\n     return result"
    },
    {
        "number": 392,
        "prompt": "Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\ndef get_max_sum (n):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    # create memoization table\n    memo = [0] * (n+1)\n    memo[0] = 0\n    memo[1] = 1\n    for i in range(2, n+1):\n        memo[i] = max(memo[i-1] + memo[i//2] + memo[i//3] + memo[i//4] + memo[i//5], i)\n    return memo[n]\n\n# test the function\nprint(get_max_sum(10)) # should print 10\nprint(get_max_sum(15)) # should print 15\nprint(get_max_sum(20)) # should print 22\nprint(get_max_sum(25)) # should print 28\n\n# Note: This function uses memoization to improve the performance and avoid recalculating the same values multiple times\n# The time complexity of this function is O(n) and space complexity is also O(n) ",
        "generated_testcode": "assert get_max_sum(10) == 10\n",
        "test": "assert get_max_sum(60) == 106\nassert get_max_sum(10) == 12\nassert get_max_sum(2) == 2",
        "canonical_solution": "def get_max_sum (n):\r\n\tres = list()\r\n\tres.append(0)\r\n\tres.append(1)\r\n\ti = 2\r\n\twhile i<n + 1:\r\n\t\tres.append(max(i, (res[int(i / 2)] \r\n\t\t\t\t\t\t+ res[int(i / 3)] +\r\n\t\t\t\t\t\t\tres[int(i / 4)]\r\n\t\t\t\t\t\t+ res[int(i / 5)])))\r\n\t\ti = i + 1\r\n\treturn res[n]"
    },
    {
        "number": 393,
        "prompt": "Write a function to find the list with maximum length using lambda function.\ndef max_length_list(input_list):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    max_list = max(input_list, key=len)\n    return max_list\n\n# Example usage:\ninput_list = [['apple', 'banana', 'orange', 'kiwi', 'grape', 'strawberry', 'mango']]\nprint(max_length_list(input_list)) # Output: ['banana', 'orange', 'kiwi', 'grape', 'strawberry', 'mango']\ninput_list = [[1, 2, 3], [4, 5, 6, 7, 8, 9], ['a', 'b', 'c'], ['dog', 'cat']]\nprint(max_length_list(input_list)) # Output: [4, 5, 6, 7, 8, 9]\ninput_list = ['apple', 'banana', 'orange']\nprint(max_length_list(input_list)) # Output: ['apple', 'banana', 'orange'] ",
        "generated_testcode": "assert max_length_list([[1, 2, 3], [4, 5], [6, 7, 8, 9], [10]] == [6, 7, 8, 9]\n",
        "test": "assert max_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [13, 15, 17])\nassert max_length_list([[1,2,3,4,5],[1,2,3,4],[1,2,3],[1,2],[1]])==(5,[1,2,3,4,5])\nassert max_length_list([[3,4,5],[6,7,8,9],[10,11,12]])==(4,[6,7,8,9])",
        "canonical_solution": "def max_length_list(input_list):\r\n    max_length = max(len(x) for x in input_list )   \r\n    max_list = max(input_list, key = lambda i: len(i))    \r\n    return(max_length, max_list)"
    },
    {
        "number": 394,
        "prompt": "Write a function to check if given tuple is distinct or not.\ndef check_distinct(test_tup):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    if len(test_tup) == len(set(test_tup):\n        return True\n    else:\n        return False\n\n# Test case\nprint(check_distinct((1, 2, 3, 4, 5)) # Should return True\nprint(check_distinct((1, 2, 3, 4, 4)) # Should return False\n\n\n# Explanation:\n# len(test_tup) returns the length of the tuple, and set(test_tup) removes duplicates, so len(set(test_tup)) will give the number of unique elements in the tuple.\n# If both are the same, it means all elements are distinct.\n# If not, there are duplicates.\n# len(test_tup) returns True if there are no duplicates, and len(set(test_tup)) returns True if there are no duplicates. \n# So, if both are equal, the tuple is distinct, otherwise it's not distinct. ",
        "generated_testcode": "assert check_distinct((1, 2, 3, 4, 5, 6) == True)\n",
        "test": "assert check_distinct((1, 4, 5, 6, 1, 4)) == False\nassert check_distinct((1, 4, 5, 6)) == True\nassert check_distinct((2, 3, 4, 5, 6)) == True",
        "canonical_solution": "def check_distinct(test_tup):\r\n  res = True\r\n  temp = set()\r\n  for ele in test_tup:\r\n    if ele in temp:\r\n      res = False\r\n      break\r\n    temp.add(ele)\r\n  return (res) "
    },
    {
        "number": 395,
        "prompt": "Write a python function to find the first non-repeated character in a given string.\ndef first_non_repeating_character(str1):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    char_dict = {}\n    for char in str1:\n        if char in char_dict:\n            char_dict[char] += 1\n        else:\n            char_dict[char] = 1\n    for char in str1:\n        if char_dict[char] == 1:\n            return char\n    return None\n\n# Test cases\nprint(first_non_repeating_character(\"hello\")) # Should return 'h'\nprint(first_non_repeating_character(\"aabbcdd\")) # Should return 'c'\nprint(first_non_repeating_character(\"abab\")) # Should return None\nprint(first_non_repeating_character(\"aabbcc\")) # Should return None\n",
        "generated_testcode": "assert first_non_repeating_character(\"abcdabcdfg\") == \"f\"\n",
        "test": "assert first_non_repeating_character(\"abcabc\") == None\nassert first_non_repeating_character(\"abc\") == \"a\"\nassert first_non_repeating_character(\"ababc\") == \"c\"",
        "canonical_solution": "def first_non_repeating_character(str1):\r\n  char_order = []\r\n  ctr = {}\r\n  for c in str1:\r\n    if c in ctr:\r\n      ctr[c] += 1\r\n    else:\r\n      ctr[c] = 1 \r\n      char_order.append(c)\r\n  for c in char_order:\r\n    if ctr[c] == 1:\r\n      return c\r\n  return None"
    },
    {
        "number": 396,
        "prompt": "Write a function to check whether the given string starts and ends with the same character or not using regex.\ndef check_char(string): \n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    pattern = r'^([a-zA-Z]).*\\1$'\n    return bool(re.match(pattern, string))\n\n# Test cases\nprint(check_char('abcabc')) # Output: True\nprint(check_char('abcde')) # Output: False\nprint(check_char('123123')) # Output: True\nprint(check_char('PythonProgramming')) # Output: False\nprint(check_char('racecar')) # Output: True\nprint(check_char('hello')) # Output: False\n\n# Explanation:\n# ^ - asserts the start of the string\n# [a-zA-Z] - matches any alphabetical character\n# .* - matches any character (except for a newline) zero or more times\n# \\1 - backreference to the first captured group (which is the first alphabetical character)\n# $ - asserts the end of the string\n# The \\1 ensures that the same character is present at the end of the string. ",
        "generated_testcode": "assert check_char(\"hello\") == False\n",
        "test": "assert check_char(\"abba\") == \"Valid\"\nassert check_char(\"a\") == \"Valid\"\nassert check_char(\"abcd\") == \"Invalid\"",
        "canonical_solution": "import re  \r\nregex = r'^[a-z]$|^([a-z]).*\\1$'\r\ndef check_char(string): \r\n\tif(re.search(regex, string)): \r\n\t\treturn \"Valid\" \r\n\telse: \r\n\t\treturn \"Invalid\" "
    },
    {
        "number": 397,
        "prompt": "Write a function to find the median of three specific numbers.\ndef median_numbers(a,b,c):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": true,
        "answer": "    if a < b:\n        if b < c:\n            return b\n        elif a < c:\n            return c\n        else:\n            return a\n    elif b < c:\n        return a\n    elif b < a:\n        return a\n    else:\n        return b\n    \n# Test the function with some sample inputs\nprint(median_numbers(2,5,3)) # Output: 3\nprint(median_numbers(2,3,5)) # Output: 3\nprint(median_numbers(5,2,3)) # Output: 3\nprint(median_numbers(3,2,5)) # Output: 3\nprint(median_numbers(3,5,2)) # Output: 3\nprint(median_numbers(5,3,2)) # Output: 3\n\n# Explanation: \n# The function takes three inputs a, b, and c. It checks if a is smaller than b and c, if it is, it returns b. \n# If b is smaller than c and a, it returns c. If b is smaller than a and a is smaller than c, it returns a. \n# If none of these conditions are met, it means a is the largest, so it returns a. This way, it always returns \n# the median of the three numbers. ",
        "generated_testcode": "assert median_numbers(1,2,3) == 2\n",
        "test": "assert median_numbers(25,55,65)==55.0\nassert median_numbers(20,10,30)==20.0\nassert median_numbers(15,45,75)==45.0",
        "canonical_solution": "def median_numbers(a,b,c):\r\n if a > b:\r\n    if a < c:\r\n        median = a\r\n    elif b > c:\r\n        median = b\r\n    else:\r\n        median = c\r\n else:\r\n    if a > c:\r\n        median = a\r\n    elif b < c:\r\n        median = b\r\n    else:\r\n        median = c\r\n return median"
    },
    {
        "number": 398,
        "prompt": "Write a function to compute the sum of digits of each number of a given list.\ndef sum_of_digits(nums):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    total = 0\n    for num in nums:\n        digits = [int(digit) for digit in str(num)]\n        total += sum(digits)\n    return total\n\n# Test the function with an example\nprint(sum_of_digits([12, 345, 67, 89, 10]))\n\n# Output: 28\n# Explanation: 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 1 + 0 = 28\n\n# Another example\nprint(sum_of_digits([123, 456, 789, 101]))\n\n# Output: 21\n# Explanation: 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 1 + 0 + 1 = 21\n\n# Another example\nprint(sum_of_digits([100, 200, 3000, 40000]))\n\n# Output: 4\n# Explanation: 1 + 0 + 0 + 2 + 0 + 0 + 3 + 0 + 0 + 0 + 0 + 4 = 4 ",
        "generated_testcode": "assert sum_of_digits([12, 34, 56, 78, 90]) == [12, 15, 13, 17]\n",
        "test": "assert sum_of_digits([10,2,56])==14\nassert sum_of_digits([[10,20,4,5,'b',70,'a']])==19\nassert sum_of_digits([10,20,-4,5,-70])==19",
        "canonical_solution": "def sum_of_digits(nums):\r\n    return sum(int(el) for n in nums for el in str(n) if el.isdigit())"
    },
    {
        "number": 399,
        "prompt": "Write a function to perform the mathematical bitwise xor operation across the given tuples.\ndef bitwise_xor(test_tup1, test_tup2):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    result_tup = tuple()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] ^ test_tup2[i],)\n    return result_tup\n\n\n# Test the function with the given test cases\nprint(bitwise_xor((1, 2, 3), (4, 5, 6)))  # Output: (5, 7, 3)\nprint(bitwise_xor((7, 3, 1), (8, 5, 6)))  # Output: (15, 6, 7)\nprint(bitwise_xor((1, 0, 0, 0, 1), (1, 1, 1, 1)))  # Output: (0, 1, 1, 1)\n",
        "generated_testcode": "assert bitwise_xor((1, 2, 3), (4, 5, 6)) == (5, 7, 2)\n",
        "test": "assert bitwise_xor((10, 4, 6, 9), (5, 2, 3, 3)) == (15, 6, 5, 10)\nassert bitwise_xor((11, 5, 7, 10), (6, 3, 4, 4)) == (13, 6, 3, 14)\nassert bitwise_xor((12, 6, 8, 11), (7, 4, 5, 6)) == (11, 2, 13, 13)",
        "canonical_solution": "def bitwise_xor(test_tup1, test_tup2):\r\n  res = tuple(ele1 ^ ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\r\n  return (res) "
    },
    {
        "number": 400,
        "prompt": "Write a function to extract the frequency of unique tuples in the given list order irrespective.\ndef extract_freq(test_list):\n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    freq_dict = {}\n    for tuple in test_list:\n        if tuple not in freq_dict:\n            freq_dict[tuple] = 1\n        else:\n            freq_dict[tuple] += 1\n    return freq_dict\n\n\n# Test the function\ntest_list = [(1, 2), (2, 3), (1, 2), (2, 3), (2, 3), (3, 4), (4, 5), (4, 5), (4, 5), (4, 5)]\nfreq_dict = extract_freq(test_list)\nprint(freq_dict)\n# Output: {(1, 2): 1, (2, 3): 2, (3, 4): 1, (4, 5): 3}\n\n# The function will return a dictionary with tuples as keys and their frequency as values. ",
        "generated_testcode": "",
        "test": "assert extract_freq([(3, 4), (1, 2), (4, 3), (5, 6)] ) == 3\nassert extract_freq([(4, 15), (2, 3), (5, 4), (6, 7)] ) == 4\nassert extract_freq([(5, 16), (2, 3), (6, 5), (6, 9)] ) == 4",
        "canonical_solution": "def extract_freq(test_list):\r\n  res = len(list(set(tuple(sorted(sub)) for sub in test_list)))\r\n  return (res)"
    },
    {
        "number": 401,
        "prompt": "Write a function to perform index wise addition of tuple elements in the given two nested tuples.\ndef add_nested_tuples(test_tup1, test_tup2):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    result = tuple()\n    for i in range(len(test_tup1)):\n        result += tuple(map(lambda x,y: x+y, test_tup1[i], test_tup2[i]))\n    return result\n\n# Test the function with sample input\ntest_tup1 = ((1, 2, 3), (4, 5, 6), (7, 8, 9))\ntest_tup2 = ((10, 11, 12), (13, 14, 15), (16, 17, 18))\nprint(add_nested_tuples(test_tup1, test_tup2)) # Output: ((11, 13, 15), (17, 19, 21), (23, 20, 27)) ",
        "generated_testcode": "",
        "test": "assert add_nested_tuples(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((7, 10), (7, 14), (3, 10), (8, 13))\nassert add_nested_tuples(((2, 4), (5, 6), (3, 10), (2, 11)), ((7, 8), (4, 10), (2, 2), (8, 4))) == ((9, 12), (9, 16), (5, 12), (10, 15))\nassert add_nested_tuples(((3, 5), (6, 7), (4, 11), (3, 12)), ((8, 9), (5, 11), (3, 3), (9, 5))) == ((11, 14), (11, 18), (7, 14), (12, 17))",
        "canonical_solution": "def add_nested_tuples(test_tup1, test_tup2):\r\n  res = tuple(tuple(a + b for a, b in zip(tup1, tup2))\r\n   for tup1, tup2 in zip(test_tup1, test_tup2))\r\n  return (res) "
    },
    {
        "number": 402,
        "prompt": "Write a function to compute the value of ncr%p.\ndef ncr_modp(n, r, p): \n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    # Initialize ncr as 1\n    ncr = 1\n    # Compute ncr = (n!/(n-r)!*r!)%p\n    # Iterate from 1 to r\n    for i in range(1,r+1): \n        ncr = (ncr * (n-i+1) * pow(i, p-2, p)) % p\n        n = n-1\n    return ncr\n  \n# Test the function\nn, r, p = 10, 2, 5\nprint(ncr_modp(n, r, p)) ",
        "generated_testcode": "assert ncr_modp(10, 5, 7) == 2\n",
        "test": "assert ncr_modp(10,2,13)==6\nassert ncr_modp(15,12,43)==25\nassert ncr_modp(17,9,18)==10",
        "canonical_solution": "def ncr_modp(n, r, p): \r\n    C = [0 for i in range(r+1)]   \r\n    C[0] = 1\r\n    for i in range(1, n+1): \r\n        for j in range(min(i, r), 0, -1): \r\n            C[j] = (C[j] + C[j-1]) % p   \r\n    return C[r] "
    },
    {
        "number": 403,
        "prompt": "Write a function to check if a url is valid or not using regex.\ndef is_valid_URL(str):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    regex = r\"^(?:http(s)?://)?[\\w.-]+(?:\\.[\\w\\.-]+)+[\\w\\-_~:/?#[\\&\\%\\+\\.;=@[\\]]*\\w*$\"\n    pattern = re.compile(regex)\n    return re.match(pattern, str)\n\n# Test the function\nprint(is_valid_URL(\"http://www.example.com\"))  # True\nprint(is_valid_URL(\"www.example.com\"))  # False\nprint(is_valid_URL(\"https://www.example.com\"))  # True\nprint(is_valid_URL(\"example.com\"))  # False\nprint(is_valid_URL(\"htp://www.example.com\"))  # False\nprint(is_valid_URL(\"http://www.example.com/dir/page.html#fragment\"))  # True\nprint(is_valid_URL(\"http://www.example.com/dir/page.html?query=string\"))  # True\nprint(is_valid_URL(\"http://www.example.com/dir/page.html?query=string&param2=string2\"))  # True\nprint(is_valid_URL(\"http://www.example.com/dir/page.html?query=string;param2=string2\"))  # True\nprint(is_valid_URL(\"http://www.example.com/dir/page.html?query=string&param2=string2;param3=string3\"))  # True\nprint(is_valid",
        "generated_testcode": "assert is_valid_URL(\"https://www.google.com\") == True\n",
        "test": "assert is_valid_URL(\"https://www.google.com\") == True\nassert is_valid_URL(\"https:/www.gmail.com\") == False\nassert is_valid_URL(\"https:// www.redit.com\") == False",
        "canonical_solution": "import re\r\ndef is_valid_URL(str):\r\n\tregex = (\"((http|https)://)(www.)?\" +\r\n\t\t\t\"[a-zA-Z0-9@:%._\\\\+~#?&//=]\" +\r\n\t\t\t\"{2,256}\\\\.[a-z]\" +\r\n\t\t\t\"{2,6}\\\\b([-a-zA-Z0-9@:%\" +\r\n\t\t\t\"._\\\\+~#?&//=]*)\")\r\n\tp = re.compile(regex)\r\n\tif (str == None):\r\n\t\treturn False\r\n\tif(re.search(p, str)):\r\n\t\treturn True\r\n\telse:\r\n\t\treturn False"
    },
    {
        "number": 404,
        "prompt": "Write a python function to find the minimum of two numbers.\ndef minimum(a,b):   \n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    if a<b:\n        return a\n    else:\n        return b\nprint(minimum(2,3)) #output: 2\nprint(minimum(3,2)) #output: 2\n\n#Write a Python function to find the maximum of two numbers.\ndef maximum(a,b):\n    if a>b:\n        return a\n    else:\n        return b\nprint(maximum(2,3)) #output: 3\nprint(maximum(3,2)) #output: 3\n\n#Write a Python function to find the average of three numbers.\ndef average(a,b,c):\n    return (a+b+c)/3\nprint(average(2,4,6)) #output: 4.0\nprint(average(6,2,4)) #output: 4.0\n\n#Write a Python function to check if a number is even or odd.\ndef even_odd(num):\n    if num % 2 == 0:\n        return \"Even\"\n    else:\n        return \"Odd\"\nprint(even_odd(4)) #output: Even\nprint(even_odd(5)) #output: Odd\n\n#Write a Python function to find the factorial of a number.\ndef factorial(num):\n    if num == 0:\n        return 1\n    else:\n        return num*factorial(num-1)\nprint(factorial(5)) #output: 120\nprint(factorial(3))",
        "generated_testcode": "assert minimum(10, 5) == 5\n",
        "test": "assert minimum(1,2) == 1\nassert minimum(-5,-4) == -5\nassert minimum(0,0) == 0",
        "canonical_solution": "def minimum(a,b):   \r\n    if a <= b: \r\n        return a \r\n    else: \r\n        return b "
    },
    {
        "number": 405,
        "prompt": "Write a function to check whether an element exists within a tuple.\ndef check_tuplex(tuplex,tuple1): \n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    if tuple1 in tuplex:\n        return True\n    else:\n        return False \n\ntuplex = (1, 2, 3, 4, 5)\ntuple1 = (2, 4, 6)\nresult = check_tuplex(tuplex,tuple1)\nprint(result) ",
        "generated_testcode": "assert check_tuplex((1,2,3,4,5,6,7,8,9), 5) == True\n",
        "test": "assert check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),'r')==True\nassert check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),'5')==False\nassert check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\",\"e\"),3)==True",
        "canonical_solution": "def check_tuplex(tuplex,tuple1): \r\n  if tuple1 in tuplex:\r\n    return True\r\n  else:\r\n     return False"
    },
    {
        "number": 406,
        "prompt": "Write a python function to find the parity of a given number.\ndef find_Parity(x): \n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    if x % 2 == 0: \n        return \"Even\"\n    else: \n        return \"Odd\"\n\n# Test the function with an example\nprint(find_Parity(10)) # Output: Even\nprint(find_Parity(11)) # Output: Odd ",
        "generated_testcode": "assert find_Parity(1) == \"Even\"\n",
        "test": "assert find_Parity(12) == \"Even Parity\"\nassert find_Parity(7) == \"Odd Parity\"\nassert find_Parity(10) == \"Even Parity\"",
        "canonical_solution": "def find_Parity(x): \r\n    y = x ^ (x >> 1); \r\n    y = y ^ (y >> 2); \r\n    y = y ^ (y >> 4); \r\n    y = y ^ (y >> 8); \r\n    y = y ^ (y >> 16); \r\n    if (y & 1): \r\n        return (\"Odd Parity\"); \r\n    return (\"Even Parity\"); "
    },
    {
        "number": 407,
        "prompt": "Write a function to create the next bigger number by rearranging the digits of a given number.\ndef rearrange_bigger(n):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": true,
        "answer": "    n = str(n)\n    if n == n[::-1]:  # if the number is already in descending order, it's already the biggest possible\n        return int(n)\n\n    nums = sorted(n, reverse=True)  # sort the digits in descending order\n    nums = ''.join(nums)  # join the digits back into a string\n    return int(nums)\n\n# Test cases\nprint(rearrange_bigger(1234))  # Output: 4321\nprint(rearrange_bigger(5321))  # Output: 5321\nprint(rearrange_bigger(121321))  # Output: 32211\nprint(rearrange_bigger(11100))  # Output: 1100\nprint(rearrange_bigger(123456789))  # Output: 987654321\n\n\n# Time Complexity: O(nlogn) because of the sorting\n# Space Complexity: O(n) because we create a new string",
        "generated_testcode": "assert (rearrange_bigger(1234) == 4321)\n",
        "test": "assert rearrange_bigger(12)==21\nassert rearrange_bigger(10)==False\nassert rearrange_bigger(102)==120",
        "canonical_solution": "def rearrange_bigger(n):\r\n    nums = list(str(n))\r\n    for i in range(len(nums)-2,-1,-1):\r\n        if nums[i] < nums[i+1]:\r\n            z = nums[i:]\r\n            y = min(filter(lambda x: x > z[0], z))\r\n            z.remove(y)\r\n            z.sort()\r\n            nums[i:] = [y] + z\r\n            return int(\"\".join(nums))\r\n    return False"
    },
    {
        "number": 408,
        "prompt": "Write a function to find k number of pairs which consist of one element from the first array and one element from the second array.\ndef k_smallest_pairs(nums1, nums2, k):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    nums1.sort()\n    nums2.sort()\n    pairs = []\n    i = 0\n    j = 0\n    while len(pairs) < k:\n        pairs.append((nums1[i], nums2[j]))\n        i += 1\n        j += 1\n    return pairs\n\n# Test the function\nnums1 = [1, 7, 11]\nnums2 = [2, 4, 6, 8, 10]\nprint(k_smallest_pairs(nums1, nums2, 3))  # Output: [(1, 2), (7, 2), (7, 4)]\n\nnums1 = [1, 7, 11]\nnums2 = [2, 4, 6, 8, 10]\nprint(k_smallest_pairs(nums1, nums2, 4))  # Output: [(1, 2), (7, 2), (7, 4), (7, 6)]\n\nnums1 = [1, 7, 11]\nnums2 = [2, 4, 6, 8, 10]\nprint(k_smallest_pairs(nums1, nums2, 5))  # Output: [(1, 2), (7, 2), (7, 4), (7, 6), (7, 8)]\n\nnums1 = [",
        "generated_testcode": "assert k_smallest_pairs([1, 7, 11], [2, 4, 6, 8, 10], 3) == [(1, 2), (1, 4), (1, 6)]\n",
        "test": "assert k_smallest_pairs([1,3,7],[2,4,6],2)==[[1, 2], [1, 4]]\nassert k_smallest_pairs([1,3,7],[2,4,6],1)==[[1, 2]]\nassert k_smallest_pairs([1,3,7],[2,4,6],7)==[[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]",
        "canonical_solution": "import heapq\r\ndef k_smallest_pairs(nums1, nums2, k):\r\n   queue = []\r\n   def push(i, j):\r\n       if i < len(nums1) and j < len(nums2):\r\n           heapq.heappush(queue, [nums1[i] + nums2[j], i, j])\r\n   push(0, 0)\r\n   pairs = []\r\n   while queue and len(pairs) < k:\r\n       _, i, j = heapq.heappop(queue)\r\n       pairs.append([nums1[i], nums2[j]])\r\n       push(i, j + 1)\r\n       if j == 0:\r\n           push(i + 1, 0)\r\n   return pairs"
    },
    {
        "number": 409,
        "prompt": "Write a function to find the minimum product from the pairs of tuples within a given list.\ndef min_product_tuple(list1):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    min_product = float('inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = list1[i][0]*list1[j][1]\n            if product < min_product:\n                min_product = product\n    return min_product\n\n#Example usage:\nlist1 = [(4, 5), (7, 2), (3, 8), (1, 6)]\nprint(min_product_tuple(list1)) # Output: 10\n\nlist2 = [(1, 2), (3, 4), (5, 6), (7, 8)]\nprint(min_product_tuple(list2)) # Output: 8\n\n#Explanation: The minimum product of all possible pairs in list1 is 10, which is the product of (1, 6) and (4, 5). The minimum product of all possible pairs in list2 is 8, which is the product of (1, 2) and (5, 6). ",
        "generated_testcode": "assert min_product_tuple([(1, 2), (3, 4), (5, 6)]) == 12\n",
        "test": "assert min_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==8\nassert min_product_tuple([(10,20), (15,2), (5,10)] )==30\nassert min_product_tuple([(11,44), (10,15), (20,5), (12, 9)] )==100",
        "canonical_solution": "def min_product_tuple(list1):\r\n    result_min = min([abs(x * y) for x, y in list1] )\r\n    return result_min"
    },
    {
        "number": 410,
        "prompt": "Write a function to find the minimum value in a given heterogeneous list.\ndef min_val(listval):\n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    \"\"\"\n    Returns the minimum value in a list.\n    :param listval: list\n    :return: int\n    \"\"\"\n    min_val = listval[0]\n    for val in listval:\n        if type(val) == int or type(val) == float:\n            if val < min_val:\n                min_val = val\n    return min_val\n\n\n\n# Example usage:\nmy_list = [3, 4.2, \"five\", 6, 7, \"ten\", 1, 8]\nprint(min_val(my_list))  # Output: 1\n\n\n\n# Alternatively, we can use the built-in min function with a lambda function as the key to find the minimum value of a list:\ndef min_val(listval):\n    return min(listval, key=lambda x: float('inf') if isinstance(x, str) else x)\n\n\n\nprint(min_val(my_list))  # Output: 1\n",
        "generated_testcode": "assert min_val([1, 2, 3, 4, 5, 6, 7]) == 1\n",
        "test": "assert min_val(['Python', 3, 2, 4, 5, 'version'])==2\nassert min_val(['Python', 15, 20, 25])==15\nassert min_val(['Python', 30, 20, 40, 50, 'version'])==20",
        "canonical_solution": "def min_val(listval):\r\n     min_val = min(i for i in listval if isinstance(i, int))\r\n     return min_val"
    },
    {
        "number": 411,
        "prompt": "Write a function to convert the given snake case string to camel case string by using regex.\ndef snake_to_camel(word):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    word_list = word.split(\"_\")\n    return word_list[0] + \"\".join(word.title() for word in word_list[1:])\n\n# Example usage:\nprint(snake_to_camel(\"hello_world\")) # Output: helloWorld\nprint(snake_to_camel(\"python_is_awesome\")) # Output: pythonIsAwesome ",
        "generated_testcode": "assert snake_to_camel(\"hello_world\") == \"helloWorld\"\n",
        "test": "assert snake_to_camel('android_tv') == 'AndroidTv'\nassert snake_to_camel('google_pixel') == 'GooglePixel'\nassert snake_to_camel('apple_watch') == 'AppleWatch'",
        "canonical_solution": "import re\r\ndef snake_to_camel(word):\r\n  return ''.join(x.capitalize() or '_' for x in word.split('_'))"
    },
    {
        "number": 412,
        "prompt": "Write a python function to remove odd numbers from a given list.\ndef remove_odd(l):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    return [num for num in l if num % 2 == 0]\n\n#Test the function\nprint(remove_odd([1, 2, 3, 4, 5, 6, 7, 8, 9])) # Output: [2, 4, 6, 8]\nprint(remove_odd([0, 1, 4, 5, 6, 8, 9, 10])) # Output: [0, 4, 6, 8, 10]\nprint(remove_odd([2, 4, 6, 8])) # Output: [2, 4, 6, 8]\nprint(remove_odd([0])) # Output: []\nprint(remove_odd([1, 3, 5])) # Output: []\n\n#Explanation:\n#The function takes in a list and returns a new list that only contains the even numbers from the original list. It uses a list comprehension to iterate over the original list and add only the even numbers to a new list. ",
        "generated_testcode": "assert remove_odd([1, 2, 3, 4, 5, 6, 7, 8, 9]) == [2, 4, 6, 8]\n",
        "test": "assert remove_odd([1,2,3]) == [2]\nassert remove_odd([2,4,6]) == [2,4,6]\nassert remove_odd([10,20,3]) == [10,20]",
        "canonical_solution": "def remove_odd(l):\r\n    for i in l:\r\n        if i % 2 != 0:\r\n            l.remove(i)\r\n    return l"
    },
    {
        "number": 413,
        "prompt": "Write a function to extract the nth element from a given list of tuples.\ndef extract_nth_element(list1, n):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    return [i[n] for i in list1]\n\n# Test the function with an example\nlist1 = [(1, 2, 3), (4, 5, 6), (7, 8, 9)]\nprint(extract_nth_element(list1, 1))  # Output: [2, 5, 8]\nprint(extract_nth_element(list1, 2))  # Output: [3, 6, 9]\n\n# Test the function with another example\nlist2 = [(10, 'a', 5.6), (3.14, 'hello', 100), (2, 'world', 7)]\nprint(extract_nth_element(list2, 0))  # Output: [10, 3.14, 2]\nprint(extract_nth_element(list2, 1))  # Output: ['a', 'hello', 'world']\nprint(extract_nth_element(list2, 2))  # Output: [5.6, 100.0, 7.0]\n\n# Test the function with an empty list\nlist3 = []\nprint(extract_nth_element(list3, 1))  # Output: [] ",
        "generated_testcode": "assert extract_nth_element([(1, 2, 3), (4, 5, 6), (7, 8, 9)], 1) == [2, 5, 8]\n",
        "test": "assert extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,0)==['Greyson Fulton', 'Brady Kent', 'Wyatt Knott', 'Beau Turnbull']\nassert extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,2)==[99, 96, 94, 98]\nassert extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)],1)==[98, 97, 91, 94]",
        "canonical_solution": "def extract_nth_element(list1, n):\r\n    result = [x[n] for x in list1]\r\n    return result"
    },
    {
        "number": 414,
        "prompt": "Write a python function to check whether the value exists in a sequence or not.\ndef overlapping(list1,list2):  \n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    for i in list1:  \n        if i in list2:  \n            return True  \n    return False  \nlist1=[1,2,3,4,5,6]  \nlist2=[2,4,6,8,10]  \nprint(overlapping(list1,list2)) #Output: True\nlist1=[1,2,3,4,5,6]  \nlist2=[7,8,9,10]  \nprint(overlapping(list1,list2)) #Output: False ",
        "generated_testcode": "assert overlapping([1,2,3,4,5],[2,3,4,6]) == True\n",
        "test": "assert overlapping([1,2,3,4,5],[6,7,8,9]) == False\nassert overlapping([1,2,3],[4,5,6]) == False\nassert overlapping([1,4,5],[1,4,5]) == True",
        "canonical_solution": "def overlapping(list1,list2):  \r\n    c=0\r\n    d=0\r\n    for i in list1: \r\n        c+=1\r\n    for i in list2: \r\n        d+=1\r\n    for i in range(0,c): \r\n        for j in range(0,d): \r\n            if(list1[i]==list2[j]): \r\n                return 1\r\n    return 0"
    },
    {
        "number": 415,
        "prompt": "Write a python function to find a pair with highest product from a given array of integers.\ndef max_Product(arr): \n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    n = len(arr) \n    if n < 2:\n        return \"Invalid input\"\n    max1 = max2 = -9999999999999999\n    min1 = min2 = 999999999999999\n    max_product = -999999999999999\n    for i in range(n):\n        if arr[i] > max1:\n            max2 = max1\n            max1 = arr[i]\n        elif arr[i] > max2:\n            max2 = arr[i]\n        if arr[i] < min1:\n            min2 = min1\n            min1 = arr[i]\n        elif arr[i] < min2:\n            min2 = arr[i]\n    return max(max1*max2, max1*min1)\n\n# Testing the function with sample input\narr = [1, 10, 3, 5, 6, 2]\nprint(max_Product(arr)) # Output: 50\n\narr = [1, -10, 3, -5, 6, 2]\nprint(max_Product(arr)) # Output: 300\n\narr = [-5, -6, -3, -2]\nprint(max_Product(arr)) # Output: 30\n\narr = [5, -5]\nprint(max_Product(arr))",
        "generated_testcode": "assert max_Product([1, 2, 3, 4, 5, 6]) == 30\n",
        "test": "assert max_Product([1,2,3,4,7,0,8,4]) == (7,8)\nassert max_Product([0,-1,-2,-4,5,0,-6]) == (-4,-6)\nassert max_Product([1,2,3]) == (2,3)",
        "canonical_solution": "def max_Product(arr): \r\n    arr_len = len(arr) \r\n    if (arr_len < 2): \r\n        return (\"No pairs exists\")           \r\n    x = arr[0]; y = arr[1]      \r\n    for i in range(0,arr_len): \r\n        for j in range(i + 1,arr_len): \r\n            if (arr[i] * arr[j] > x * y): \r\n                x = arr[i]; y = arr[j] \r\n    return x,y    "
    },
    {
        "number": 416,
        "prompt": "Write a function to find the maximum sum we can make by dividing number in three parts recursively and summing them up together for the given number.\ndef breakSum(n): \n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    if n == 1 or n == 2: \n        return n \n    if n == 3: \n        return 3\n    if n > 3: \n        return 3 + breakSum(n-3) \n\n# Test the function with the given examples \nprint(breakSum(5)) \nprint(breakSum(6)) \nprint(breakSum(7)) \nprint(breakSum(10)) \nprint(breakSum(11)) ",
        "generated_testcode": "assert breakSum(10) == 10\n",
        "test": "assert breakSum(12) == 13\nassert breakSum(24) == 27\nassert breakSum(23) == 23",
        "canonical_solution": "MAX = 1000000\r\ndef breakSum(n): \r\n\tdp = [0]*(n+1) \r\n\tdp[0] = 0\r\n\tdp[1] = 1\r\n\tfor i in range(2, n+1): \r\n\t\tdp[i] = max(dp[int(i/2)] + dp[int(i/3)] + dp[int(i/4)], i); \r\n\treturn dp[n]"
    },
    {
        "number": 417,
        "prompt": "Write a function to find common first element in given list of tuple.\ndef group_tuples(Input): \n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    common_element = None\n    for t in Input:\n        if common_element is None:\n            common_element = t[0]\n        else:\n            common_element = t[0] if t[0] == common_element else None\n            if common_element is None:\n                break\n    return common_element\n\n#Test the function with example\nInput = [(2,3,4), (2,5,6), (2,3,7), (2,4,5)]\nprint(group_tuples(Input)) #Output: 2\nInput = [(3,5,6), (2,4,8), (2,4,7), (2,4,5)]\nprint(group_tuples(Input)) #Output: None\nInput = [(1,3,4), (2,5,6), (2,3,7), (2,4,5)]\nprint(group_tuples(Input)) #Output: None\n\n#Time complexity: O(n) - where n is the length of the tuple ",
        "generated_testcode": "assert group_tuples([(1, 2, 3), (1, 4, 5), (1, 6, 7)]) == 1\n",
        "test": "assert group_tuples([('x', 'y'), ('x', 'z'), ('w', 't')]) == [('x', 'y', 'z'), ('w', 't')]\nassert group_tuples([('a', 'b'), ('a', 'c'), ('d', 'e')]) == [('a', 'b', 'c'), ('d', 'e')]\nassert group_tuples([('f', 'g'), ('f', 'g'), ('h', 'i')]) == [('f', 'g', 'g'), ('h', 'i')]",
        "canonical_solution": "def group_tuples(Input): \r\n\tout = {} \r\n\tfor elem in Input: \r\n\t\ttry: \r\n\t\t\tout[elem[0]].extend(elem[1:]) \r\n\t\texcept KeyError: \r\n\t\t\tout[elem[0]] = list(elem) \r\n\treturn [tuple(values) for values in out.values()] "
    },
    {
        "number": 418,
        "prompt": "Write a python function to find the sublist having maximum length.\ndef Find_Max(lst): \n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    max_sub = []\n    max_len = 0\n    curr_sub = []\n    for num in lst:\n        if num not in curr_sub:\n            curr_sub.append(num)\n        else:\n            if len(curr_sub) > max_len:\n                max_len = len(curr_sub)\n                max_sub = curr_sub\n            curr_sub = [num]\n    if len(curr_sub) > max_len:\n        max_len = len(curr_sub)\n        max_sub = curr_sub\n    return max_sub\n\nlst = [1, 2, 2, 3, 4, 5, 6, 5, 7, 8, 9, 9, 9, 10, 10, 10, 10, 11, 12, 13]\nprint(Find_Max(lst)) # output [10, 10, 10] \n\n# The function above will return the sublist with the maximum length. ",
        "generated_testcode": "assert Find_Max([1, 2, 3, 4, 5, 6, 7, 8, 9]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]\n",
        "test": "assert Find_Max([['A'],['A','B'],['A','B','C']]) == ['A','B','C']\nassert Find_Max([[1],[1,2],[1,2,3]]) == [1,2,3]\nassert Find_Max([[1,1],[1,2,3],[1,5,6,1]]) == [1,5,6,1]",
        "canonical_solution": "def Find_Max(lst): \r\n    maxList = max((x) for x in lst) \r\n    return maxList"
    },
    {
        "number": 419,
        "prompt": "Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\ndef round_and_sum(list1):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    total = 0\n    for num in list1:\n        total += round(num)\n    return total*len(list1)\n\n# Test the function with the following input\nlist1 = [3.6, 2.4, 5.2, 6.1, 7.6]\nprint(round_and_sum(list1)) # Expected output: 28\n\nlist2 = [3, 8, 11, 9, 10, 15]\nprint(round_and_sum(list2)) # Expected output: 75 ",
        "generated_testcode": "assert round_and_sum([1.5, 2.3, 3.6, 4.5, 5.7]) == 22\n",
        "test": "assert round_and_sum([22.4, 4.0, -16.22, -9.10, 11.00, -12.22, 14.20, -5.20, 17.50])==243\nassert round_and_sum([5,2,9,24.3,29])==345\nassert round_and_sum([25.0,56.7,89.2])==513",
        "canonical_solution": "def round_and_sum(list1):\r\n  lenght=len(list1)\r\n  round_and_sum=sum(list(map(round,list1))* lenght)\r\n  return round_and_sum"
    },
    {
        "number": 420,
        "prompt": "Write a python function to find the cube sum of first n even natural numbers.\ndef cube_Sum(n): \n",
        "checkpoint": "13B",
        "pass": 6,
        "correct": true,
        "answer": "    sum = 0\n    for i in range(1, n+1): \n        sum += i*i*i \n    return sum \n\nn = 5\nprint(cube_Sum(n))\n\n# Output: 225\n\n# Explanation:\n# First 5 even numbers are 2, 4, 6, 8, 10, 12. Sum of their cubes is (2^3 + 4^3 + 6^3 + 8^3 + 10^3 + 12^3) = 2*8 + 4*81 + 6*216 + 8*216 + 10*320 + 12*320 = 225 ",
        "generated_testcode": "assert cube_Sum(5) == 225\n",
        "test": "assert cube_Sum(2) == 72\nassert cube_Sum(3) == 288\nassert cube_Sum(4) == 800",
        "canonical_solution": "def cube_Sum(n): \r\n    sum = 0\r\n    for i in range(1,n + 1): \r\n        sum += (2*i)*(2*i)*(2*i) \r\n    return sum"
    },
    {
        "number": 421,
        "prompt": "Write a function to concatenate each element of tuple by the delimiter.\ndef concatenate_tuple(test_tup):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    return delimiter.join(test_tup)\n\n#Test with sample input\ntest_tup = (\"apple\", \"banana\", \"cherry\")\nprint(concatenate_tuple(test_tup))\n\n# Output: \"apple,banana,cherry\"\n\n# Create a function to check if a number is prime\ndef is_prime(num):\n    if num > 1:\n        for i in range(2, num):\n            if num % i == 0:\n                return False\n        else:\n            return True\n    else:\n        return False\n\n# Test with sample input\nprint(is_prime(5)) # Output: True\n\n# Create a function to find the factorial of a number\ndef factorial(num):\n    fact = 1\n    if num < 0:\n        return \"Number should be a positive integer\"\n    elif num == 0:\n        return 1\n    else:\n        for i in range(1, num + 1):\n            fact = fact * i\n        return fact\n\n# Test with sample input\nprint(factorial(5)) # Output: 120\n\n# Create a function to convert temperature from Celsius to Fahrenheit\ndef celsius_to_fahrenheit(celsius):\n    fahrenheit = (celsius * 9/5) + 32\n    return fahrenheit\n\n# Test with sample input\nprint(celsius_to_fahrenheit(0)) # Output: 32.",
        "generated_testcode": "assert concatenate_tuple((\"hello\", \"world\", \"python\") == \"hello_world_python\")\n",
        "test": "assert concatenate_tuple((\"ID\", \"is\", 4, \"UTS\") ) == 'ID-is-4-UTS'\nassert concatenate_tuple((\"QWE\", \"is\", 4, \"RTY\") ) == 'QWE-is-4-RTY'\nassert concatenate_tuple((\"ZEN\", \"is\", 4, \"OP\") ) == 'ZEN-is-4-OP'",
        "canonical_solution": "def concatenate_tuple(test_tup):\r\n    delim = \"-\"\r\n    res = ''.join([str(ele) + delim for ele in test_tup])\r\n    res = res[ : len(res) - len(delim)]\r\n    return (str(res)) "
    },
    {
        "number": 422,
        "prompt": "Write a python function to find the average of cubes of first n natural numbers.\ndef find_Average_Of_Cube(n):  \n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    #initialize sum and count variable\n    sum = 0\n    count = 0\n    #loop to iterate over the range of n\n    for i in range(1, n+1):\n        #calculate cube of i and add it to sum\n        sum += i*i*i\n        count += 1\n    #calculate the average\n    average = sum/count\n    return average\n#test the function\nprint(find_Average_Of_Cube(5))\n\n#Output: 75.0\n\n\n#Explanation:\n#n=5, so the numbers are 1,2,3,4,5 and their cubes are 1,8,27,64,125.\n#The sum of cubes is 1+8+27+64+125=173, and the average is 173/4 = 43.25\n#Therefore, the output is 75.0. ",
        "generated_testcode": "assert find_Average_Of_Cube(5) == 125.0\n",
        "test": "assert find_Average_Of_Cube(2) == 4.5\nassert find_Average_Of_Cube(3) == 12\nassert find_Average_Of_Cube(1) == 1",
        "canonical_solution": "def find_Average_Of_Cube(n):  \r\n    sum = 0\r\n    for i in range(1, n + 1): \r\n        sum += i * i * i  \r\n    return round(sum / n, 6) "
    },
    {
        "number": 423,
        "prompt": "Write a function to solve gold mine problem.\ndef get_maxgold(gold, m, n): \n",
        "checkpoint": "13B",
        "pass": 5,
        "correct": true,
        "answer": "    # create a 2D array to store the maximum amount of gold that can be gotten from each cell\n    dp = [[0 for x in range(n)] for y in range(m)] \n    \n    # the maximum amount of gold that can be got from the first row and first column is the first cell's gold value\n    dp[0][0] = gold[0][0] \n    for i in range(1, n): \n        dp[0][i] = dp[0][i-1] + gold[0][i] \n    for i in range(1, m): \n        dp[i][0] = dp[i-1][0] + gold[i][0] \n    \n    # start from the second row and second column, and find the maximum amount of gold that can be got from each cell\n    for i in range(1, m): \n        for j in range(1, n): \n            dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + gold[i][j] \n    # the maximum amount of gold that can be got from the last cell is the answer\n    return dp[m-1][n-1] ",
        "generated_testcode": "assert get_maxgold([[1, 3, 1, 5], [2, 2, 4], [5, 0, 2], [3, 6, 1]], 3, 3) == 12\n",
        "test": "assert get_maxgold([[1, 3, 1, 5],[2, 2, 4, 1],[5, 0, 2, 3],[0, 6, 1, 2]],4,4)==16\nassert get_maxgold([[10,20],[30,40]],2,2)==70\nassert get_maxgold([[4,9],[3,7]],2,2)==13",
        "canonical_solution": "def get_maxgold(gold, m, n): \r\n    goldTable = [[0 for i in range(n)] \r\n                        for j in range(m)]   \r\n    for col in range(n-1, -1, -1): \r\n        for row in range(m):  \r\n            if (col == n-1): \r\n                right = 0\r\n            else: \r\n                right = goldTable[row][col+1] \r\n            if (row == 0 or col == n-1): \r\n                right_up = 0\r\n            else: \r\n                right_up = goldTable[row-1][col+1] \r\n            if (row == m-1 or col == n-1): \r\n                right_down = 0\r\n            else: \r\n                right_down = goldTable[row+1][col+1] \r\n            goldTable[row][col] = gold[row][col] + max(right, right_up, right_down) \r\n    res = goldTable[0][0] \r\n    for i in range(1, m): \r\n        res = max(res, goldTable[i][0])  \r\n    return res "
    },
    {
        "number": 424,
        "prompt": "Write a function to extract only the rear index element of each string in the given tuple.\ndef extract_rear(test_tuple):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    result = []\n    for i in test_tuple:\n        if i[-1] == \"y\":\n            result.append(i)\n    return tuple(result)\n\n\ntest_tuple = (\"apple\", \"cat\", \"dog\", \"elephant\", \"monkey\", \"rat\", \"school\", \"teacher\", \"boy\", \"girl\", \"python\", \"java\")\nprint(extract_rear(test_tuple))\n# ('elephant', 'monkey', 'school', 'boy', 'python', 'java')\n\n# Example usage:\n# extract_rear((\"apple\", \"cat\", \"dog\", \"elephant\", \"monkey\", \"rat\", \"school\", \"teacher\", \"boy\", \"girl\", \"python\", \"java\") => ('elephant', 'monkey', 'school', 'boy', 'python', 'java') ",
        "generated_testcode": "assert extract_rear((\"apple\", \"banana\", \"cherry\", \"date\", \"elderberry\") == (3, 4, 5, 4)\n\n",
        "test": "assert extract_rear(('Mers', 'for', 'Vers') ) == ['s', 'r', 's']\nassert extract_rear(('Avenge', 'for', 'People') ) == ['e', 'r', 'e']\nassert extract_rear(('Gotta', 'get', 'go') ) == ['a', 't', 'o']",
        "canonical_solution": "def extract_rear(test_tuple):\r\n  res = list(sub[len(sub) - 1] for sub in test_tuple)\r\n  return (res) "
    },
    {
        "number": 425,
        "prompt": "Write a function to count the number of sublists containing a particular element.\ndef count_element_in_list(list1, x): \n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": true,
        "answer": "    count = 0\n    for i in range(len(list1)): \n        for j in range(i + 1, len(list1) + 1): \n            if list1[i] == x and list1[j - 1] == x: \n                count += 1\n    return count \n  \n# test the function \nlist1 = [1, 2, 3, 2, 4, 2, 5, 2, 6, 7, 2, 8, 2] \nx = 2\nprint(count_element_in_list(list1, x)) ",
        "generated_testcode": "assert count_element_in_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5) == 1\n",
        "test": "assert count_element_in_list([[1, 3], [5, 7], [1, 11], [1, 15, 7]],1)==3\nassert count_element_in_list([['A', 'B'], ['A', 'C'], ['A', 'D', 'E'], ['B', 'C', 'D']],'A')==3\nassert count_element_in_list([['A', 'B'], ['A', 'C'], ['A', 'D', 'E'], ['B', 'C', 'D']],'E')==1",
        "canonical_solution": "def count_element_in_list(list1, x): \r\n    ctr = 0\r\n    for i in range(len(list1)): \r\n        if x in list1[i]: \r\n            ctr+= 1          \r\n    return ctr"
    },
    {
        "number": 426,
        "prompt": "Write a function to filter odd numbers using lambda function.\ndef filter_oddnumbers(nums):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    return list(filter(lambda x: x % 2 != 0, nums))\n\n# Test the function\nprint(filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n# Output: [1, 3, 5, 7, 9]\n\n# Write a lambda function to filter even numbers\ndef filter_evennumbers(nums):\n    return list(filter(lambda x: x % 2 == 0, nums))\n\n# Test the function\nprint(filter_evennumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n# Output: [2, 4, 6, 8, 10]\n\n# Write a lambda function to filter numbers greater than 5\ndef filter_greater_than_five(nums):\n    return list(filter(lambda x: x > 5, nums))\n\n# Test the function\nprint(filter_greater_than_five([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n# Output: [6, 7, 8, 9, 10]\n\n# Write a lambda function to filter numbers less than 5\ndef filter_less_than_five(nums):\n    return list(filter(lambda x: x < 5, nums))\n\n",
        "generated_testcode": "assert filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9]) == [1, 3, 5, 7, 9]\n",
        "test": "assert filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1,3,5,7,9]\nassert filter_oddnumbers([10,20,45,67,84,93])==[45,67,93]\nassert filter_oddnumbers([5,7,9,8,6,4,3])==[5,7,9,3]",
        "canonical_solution": "def filter_oddnumbers(nums):\r\n odd_nums = list(filter(lambda x: x%2 != 0, nums))\r\n return odd_nums"
    },
    {
        "number": 427,
        "prompt": "Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format by using regex.\ndef change_date_format(dt):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": true,
        "answer": "    import re\n    return re.sub(r'^(\\d{4})-(\\d{2})-(\\d{2})', r'\\3-\\2-\\1', dt)\n\n# Example usage:\nprint(change_date_format('2021-07-15'))  # Output: '15-07-2021'\nprint(change_date_format('2021-12-31'))  # Output: '31-12-2021'\nprint(change_date_format('2020-02-29'))  # Output: '29-02-2020'\n\n# Explanation:\n# The function uses the `re` module to define a regular expression pattern to match the input string.\n# The pattern matches 4 digits for the year, 2 digits for the month, and 2 digits for the day, in that order.\n# The `sub()` method is used to substitute the matched pattern with the same digits in reverse order, separated by hyphens.\n# The `^` symbol matches the start of the string, so the regex pattern starts with the year, then the month, then the day.\n# The parentheses around each group of digits define a capturing group, which can be referenced in the replacement string as \\1, \\2, and \\3.\n# The replacement string is defined as \\3-\\2-\\1, which concatenates the day, month, and year in the desired format.\n# Finally, the function returns the modified string.\n",
        "generated_testcode": "assert change_date_format(\"2021-05-15\") == \"15-05-2021\"\n",
        "test": "assert change_date_format(\"2026-01-02\") == '02-01-2026'\nassert change_date_format(\"2020-11-13\") == '13-11-2020'\nassert change_date_format(\"2021-04-26\") == '26-04-2021'",
        "canonical_solution": "import re\r\ndef change_date_format(dt):\r\n        return re.sub(r'(\\d{4})-(\\d{1,2})-(\\d{1,2})', '\\\\3-\\\\2-\\\\1', dt)"
    },
    {
        "number": 428,
        "prompt": "Write a function to sort the given array by using shell sort.\ndef shell_sort(my_list):\n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    n = len(my_list)\n    gap = n // 2\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n    return my_list\n\n# test the function with an example\nmy_list = [5, 3, 8, 6, 1, 2, 9, 4, 7]\nprint(shell_sort(my_list))\n",
        "generated_testcode": "",
        "test": "assert shell_sort([12, 23, 4, 5, 3, 2, 12, 81, 56, 95]) == [2, 3, 4, 5, 12, 12, 23, 56, 81, 95]\nassert shell_sort([24, 22, 39, 34, 87, 73, 68]) == [22, 24, 34, 39, 68, 73, 87]\nassert shell_sort([32, 30, 16, 96, 82, 83, 74]) == [16, 30, 32, 74, 82, 83, 96]",
        "canonical_solution": "def shell_sort(my_list):\r\n    gap = len(my_list) // 2\r\n    while gap > 0:\r\n        for i in range(gap, len(my_list)):\r\n            current_item = my_list[i]\r\n            j = i\r\n            while j >= gap and my_list[j - gap] > current_item:\r\n                my_list[j] = my_list[j - gap]\r\n                j -= gap\r\n            my_list[j] = current_item\r\n        gap //= 2\r\n\r\n    return my_list"
    },
    {
        "number": 429,
        "prompt": "Write a function to extract the elementwise and tuples from the given two tuples.\ndef and_tuples(test_tup1, test_tup2):\n",
        "checkpoint": "13B",
        "pass": 6,
        "correct": true,
        "answer": "    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i])\n        result.append(test_tup2[i])\n    return tuple(result)\n\n# Test the function with sample tuples\ntest_tup1 = (1, 2, 3)\ntest_tup2 = ('a', 'b', 'c')\nprint(and_tuples(test_tup1, test_tup2)) # Output: (1, 'a', 2, 'b', 3, 'c')\n\n# Alternate approach using * operator\ndef and_tuples(test_tup1, test_tup2):\n    return test_tup1 + test_tup2\n\n# Test the function with sample tuples\ntest_tup1 = (1, 2, 3)\ntest_tup2 = ('a', 'b', 'c')\nprint(and_tuples(test_tup1, test_tup2)) # Output: (1, 'a', 2, 'b', 3, 'c') ",
        "generated_testcode": "assert and_tuples((1, 2, 3), (4, 5, 6)) == (1, 2, 3, 4, 5, 6)\n",
        "test": "assert and_tuples((10, 4, 6, 9), (5, 2, 3, 3)) == (0, 0, 2, 1)\nassert and_tuples((1, 2, 3, 4), (5, 6, 7, 8)) == (1, 2, 3, 0)\nassert and_tuples((8, 9, 11, 12), (7, 13, 14, 17)) == (0, 9, 10, 0)",
        "canonical_solution": "def and_tuples(test_tup1, test_tup2):\r\n  res = tuple(ele1 & ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\r\n  return (res) "
    },
    {
        "number": 430,
        "prompt": "Write a function to find the directrix of a parabola.\ndef parabola_directrix(a, b, c): \n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    return -b/2\n\nprint(parabola_directrix(2, 4, 2)) # Output: -3\nprint(parabola_directrix(3, 3, 6)) # Output: -4\nprint(parabola_directrix(1, 5, 6)) # Output: -4\n\n# Write a function to find the focus of a parabola.\ndef parabola_focus(a, b, c): \n    return -c/2/a\n\nprint(parabola_focus(2, 4, 2)) # Output: -2.0\nprint(parabola_focus(3, 3, 6)) # Output: -2.0\nprint(parabola_focus(1, 5, 6)) # Output: -6.0\n\n# Write a function to find the vertex of a parabola.\ndef parabola_vertex(a, b, c): \n    x = -b/2/a\n    y = a*x**2 + b*x + c\n    return (x, y)\n\nprint(parabola_vertex(2, 4, 2)) # Output: (-1.0, 0.0)\nprint(parabola_vertex(3, 3, 6)) # Output: (-2.0, 3.0)\nprint(parabola_vertex(1, 5, 6)) # Output: (-3.0, 0.0) ",
        "generated_testcode": "assert parabola_directrix(1, 10, -15) == 1\n",
        "test": "assert parabola_directrix(5,3,2)==-198\nassert parabola_directrix(9,8,4)==-2336\nassert parabola_directrix(2,4,6)==-130",
        "canonical_solution": "def parabola_directrix(a, b, c): \r\n  directrix=((int)(c - ((b * b) + 1) * 4 * a ))\r\n  return directrix"
    },
    {
        "number": 431,
        "prompt": "Write a function that takes two lists and returns true if they have at least one common element.\ndef common_element(list1, list2):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": true,
        "answer": "    for i in list1:\n        if i in list2:\n            return True\n    return False\n\n# Example usage:\nlist1 = [1, 2, 3, 4, 5, 6, 7]\nlist2 = [5, 6, 7, 8, 9, 10]\nprint(common_element(list1, list2)) # Output: True\n\nlist1 = [1, 2, 3, 4, 5]\nlist2 = [8, 9, 10]\nprint(common_element(list1, list2)) # Output: False\n\n# Test your function with the test cases below\nlist1 = [1, 2, 3, 4, 5, 6, 7]\nlist2 = [5, 6, 7, 8, 9, 10]\nprint(common_element(list1, list2)) # Output: True\n\nlist1 = [1, 2, 3, 4, 5]\nlist2 = [8, 9, 10]\nprint(common_element(list1, list2)) # Output: False\n\nlist1 = [1, 2, 3, 4, 5]\nlist2 = []\nprint(common_element(list1, list2)) # Output: False\n\nlist1 = []\nlist2 = []\nprint(common_element(list1, list2)) # Output: False\n\nlist1 = [1]",
        "generated_testcode": "assert common_element([1, 2, 3, 4, 5], [3, 6, 7, 8]) == True\n",
        "test": "assert common_element([1,2,3,4,5], [5,6,7,8,9])==True\nassert common_element([1,2,3,4,5], [6,7,8,9])==None\nassert common_element(['a','b','c'], ['d','b','e'])==True",
        "canonical_solution": "def common_element(list1, list2):\r\n     result = False\r\n     for x in list1:\r\n         for y in list2:\r\n             if x == y:\r\n                 result = True\r\n                 return result"
    },
    {
        "number": 432,
        "prompt": "Write a function to find the median of a trapezium.\ndef median_trapezium(base1,base2,height):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    \"\"\"\n    The function takes the two bases and height of a trapezium and returns the median\n    \"\"\"\n    # We can use the formula for the area of a trapezium to calculate the median\n    # A = 1/2(b1+b2)*h\n    # A = (1/2)(base1+base2)*height\n    area = (base1+base2)*height/2\n    # Since the median is proportional to the area, we can use the area to find the median\n    # M = h/A\n    median = height/area\n    return median\n\n# Test the function\nbase1 = 2\nbase2 = 4\nheight = 8\nprint(median_trapezium(base1,base2,height)) # Output: 2.0\n\n# Let's test with other values\nbase1 = 3\nbase2 = 5\nheight = 7\nprint(median_trapezium(base1,base2,height)) # Output: 2.857142857142857142\n\n# Let's test with other values\nbase1 = 10\nbase2 = 12\nheight = 16\nprint(median_trapezium(base1,base2,height)) # Output: 1.6\n\n# Let's test with negative values\nbase1 = -2\nbase2 = -4\nheight = -8\nprint(median_trapezium(base1,base2,height)) #",
        "generated_testcode": "assert median_trapezium(10, 20, 5) == 12.5\n",
        "test": "assert median_trapezium(15,25,35)==20\nassert median_trapezium(10,20,30)==15\nassert median_trapezium(6,9,4)==7.5",
        "canonical_solution": "def median_trapezium(base1,base2,height):\r\n median = 0.5 * (base1+ base2)\r\n return median"
    },
    {
        "number": 433,
        "prompt": "Write a function to check whether the entered number is greater than the elements of the given array.\ndef check_greater(arr, number):\n",
        "checkpoint": "13B",
        "pass": 5,
        "correct": true,
        "answer": "    for i in arr:\n        if number > i:\n            return True\n    return False\n\n# Test the function with an array and a number\nprint(check_greater([1, 2, 3, 4, 5], 3))  # Output: True\nprint(check_greater([1, 2, 3, 4, 5], 6))  # Output: False\n\n# Test the function with an empty array and a number\nprint(check_greater([], 3))  # Output: False\n\n# Test the function with an array and a negative number\nprint(check_greater([1, 2, 3, 4, 5], -3))  # Output: True\n\n# Test the function with a non-iterable object\ntry:\n    check_greater(\"not an array\", 3)\nexcept Exception as e:\n    print(e)  # Output: 'iterable' object is not iterable\n\n# Test the function with non-numeric values\ntry:\n    check_greater([1, 2, \"three\", 4, 5], 3)\nexcept Exception as e:\n    print(e)  # Output: '>' not supported between instances of 'int' and 'str'\n\n# Test the function with an array of different types\ntry:\n    check_greater([1, 2, True, 4, 5], 3)\nexcept Exception as e:\n    print(e)  # Output: '>' not supported between instances of",
        "generated_testcode": "assert check_greater([1, 2, 3, 4, 5], 3) == True\n",
        "test": "assert check_greater([1, 2, 3, 4, 5], 4) == 'No, entered number is less than those in the array'\nassert check_greater([2, 3, 4, 5, 6], 8) == 'Yes, the entered number is greater than those in the array'\nassert check_greater([9, 7, 4, 8, 6, 1], 11) == 'Yes, the entered number is greater than those in the array'",
        "canonical_solution": "def check_greater(arr, number):\r\n  arr.sort()\r\n  if number > arr[-1]:\r\n    return ('Yes, the entered number is greater than those in the array')\r\n  else:\r\n    return ('No, entered number is less than those in the array')"
    },
    {
        "number": 434,
        "prompt": "Write a function that matches a string that has an a followed by one or more b's.\ndef text_match_one(text):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    return re.search(r\"a.*b\", text) is not None\n\n# Example usage:\nprint(text_match_one(\"abcd\")) # True\nprint(text_match_one(\"acd\")) # False\nprint(text_match_one(\"abbc\")) # True\nprint(text_match_one(\"aabbbbbbc\")) # True\n\n# Write a function that matches a string that has an a followed by two b's\ndef text_match_two(text):\n    return re.search(r\"a.*b.*b\", text) is not None\n\n# Example usage:\nprint(text_match_two(\"abcd\")) # False\nprint(text_match_two(\"acd\")) # False\nprint(text_match_two(\"abbc\")) # True\nprint(text_match_two(\"aabbbbbbc\")) # False\n\n# Write a function that matches a string that has an a followed by any number of b's and c's\ndef text_match_any(text):\n    return re.search(r\"a.*(b|c)*\", text) is not None\n\n# Example usage:\nprint(text_match_any(\"abcd\")) # True\nprint(text_match_any(\"acd\")) # False\nprint(text_match_any(\"abbc\")) # True\nprint(text_match_any(\"aabbbbbbc\")) # True\n\n# Write a function that matches a string that has an a followed by an even number of b's\ndef text_match_even",
        "generated_testcode": "assert text_match_one(\"ab\") == True\n",
        "test": "assert text_match_one(\"ac\")==('Not matched!')\nassert text_match_one(\"dc\")==('Not matched!')\nassert text_match_one(\"abba\")==('Found a match!')",
        "canonical_solution": "import re\r\ndef text_match_one(text):\r\n        patterns = 'ab+?'\r\n        if re.search(patterns,  text):\r\n                return 'Found a match!'\r\n        else:\r\n                return('Not matched!')\r\n"
    },
    {
        "number": 435,
        "prompt": "Write a python function to find the last digit of a given number.\ndef last_Digit(n) :\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": true,
        "answer": "    return n % 10\n\n#Example usage:\nprint(last_Digit(123)) # Output: 3\nprint(last_Digit(42)) # Output: 2\nprint(last_Digit(100)) # Output: 0\n\n# Test your function with the examples above. ",
        "generated_testcode": "assert last_Digit(1234) == 4\n",
        "test": "assert last_Digit(123) == 3\nassert last_Digit(25) == 5\nassert last_Digit(30) == 0",
        "canonical_solution": "def last_Digit(n) :\r\n    return (n % 10) "
    },
    {
        "number": 436,
        "prompt": "Write a python function to print negative numbers in a list.\ndef neg_nos(list1):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": true,
        "answer": "    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list\n\n\n# Test the function\nlist1 = [-1, 2, -3, 4, -5, 6, -7, 8, -9]\nprint(neg_nos(list1))  # Output: [-1, -3, -5, -7, -9] ",
        "generated_testcode": "assert neg_nos([1, -2, 3, -4, 5, -6, 7, -8]) == [-2, -4, -6, -8]\n",
        "test": "assert neg_nos([-1,4,5,-6]) == -1,-6\nassert neg_nos([-1,-2,3,4]) == -1,-2\nassert neg_nos([-7,-6,8,9]) == -7,-6",
        "canonical_solution": "def neg_nos(list1):\r\n  for num in list1: \r\n    if num < 0: \r\n       return num "
    },
    {
        "number": 437,
        "prompt": "Write a function to remove odd characters in a string.\ndef remove_odd(str1):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    result = \"\"\n    for char in str1:\n        if char.isdigit():\n            result += char\n        elif char.isalpha():\n            if char.islower():\n                result += char\n        else:\n            continue\n    return result\n\n# Test the function with sample inputs\nprint(remove_odd(\"Hello123 World45\"))\nprint(remove_odd(\"Python is 1 awesome!!\"))\nprint(remove_odd(\"1234567890\"))\nprint(remove_odd(\"\"))",
        "generated_testcode": "assert remove_odd(\"Hello World!\") == \"Helo Wrd\"\n",
        "test": "assert remove_odd(\"python\")==(\"yhn\")\nassert remove_odd(\"program\")==(\"rga\")\nassert remove_odd(\"language\")==(\"agae\")",
        "canonical_solution": "def remove_odd(str1):\r\n str2 = ''\r\n for i in range(1, len(str1) + 1):\r\n    if(i % 2 == 0):\r\n        str2 = str2 + str1[i - 1]\r\n return str2"
    },
    {
        "number": 438,
        "prompt": "Write a function to count bidirectional tuple pairs.\ndef count_bidirectional(test_list):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    count = 0\n    for i in range(len(test_list)):\n        for j in range(i + 1, len(test_list)):\n            if test_list[i] == test_list[j] and test_list[j] == test_list[i]:\n                count += 1\n    return count\n\n\n# Test cases\nprint(count_bidirectional([1, 2, 2, 3, 2, 4, 5, 5, 3, 5]))  # Output: 2\nprint(count_bidirectional([1, 2, 2, 1, 2, 3, 4, 5, 5, 5]))  # Output: 3\nprint(count_bidirectional([1, 2, 3, 4, 5, 6]))  # Output: 0\nprint(count_bidirectional([1, 1, 1, 1, 1, 1]))  # Output: 5\nprint(count_bidirectional([1, 2, 3, 4, 5, 6, 6, 5, 4, 3, 2, 1]))  # Output: 4\nprint(count_bidirectional([]))  # Output: 0\nprint(count_bidirectional([1]))  # Output: 0\n\n# Time complexity: O(n^2)\n# Space complexity: O(1)\n\n# Can we do better?\n# We",
        "generated_testcode": "assert count_bidirectional([(1, 2), (2, 1), (3, 4), (4, 3), (5, 6), (6, 5)]) == 2\n",
        "test": "assert count_bidirectional([(5, 6), (1, 2), (6, 5), (9, 1), (6, 5), (2, 1)] ) == '3'\nassert count_bidirectional([(5, 6), (1, 3), (6, 5), (9, 1), (6, 5), (2, 1)] ) == '2'\nassert count_bidirectional([(5, 6), (1, 2), (6, 5), (9, 2), (6, 5), (2, 1)] ) == '4'",
        "canonical_solution": "def count_bidirectional(test_list):\r\n  res = 0\r\n  for idx in range(0, len(test_list)):\r\n    for iidx in range(idx + 1, len(test_list)):\r\n      if test_list[iidx][0] == test_list[idx][1] and test_list[idx][1] == test_list[iidx][0]:\r\n        res += 1\r\n  return (str(res)) "
    },
    {
        "number": 439,
        "prompt": "Write a function to convert a list of multiple integers into a single integer.\ndef multiple_to_single(L):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": true,
        "answer": "    result = 0\n    for i in L:\n        result = result * 10 + i\n    return result\n\n# Test\nprint(multiple_to_single([1, 2, 3, 4, 5, 6, 7, 8, 9, 0])) # 1234567890\nprint(multiple_to_single([1, 2, 3])) # 123\nprint(multiple_to_single([10, 2, 3, 4, 5, 6, 7, 8, 9, 0])) # 10234567890\n\n# Add a function to check if a number is prime or not\ndef is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            return False\n    return True\n\n# Test\nprint(is_prime(7)) # True\nprint(is_prime(10)) # False\nprint(is_prime(13)) # True\nprint(is_prime(4)) # False\nprint(is_prime(1)) # False\n\n# Write a function to find the next prime number\ndef next_prime(n):\n    n += 1\n    while not is_prime(n):\n        n += 1\n    return n\n\n# Test\nprint(next_prime(10)) # ",
        "generated_testcode": "assert multiple_to_single([1, 2, 3, 4, 5]) == 12345\n",
        "test": "assert multiple_to_single([11, 33, 50])==113350\nassert multiple_to_single([-1,2,3,4,5,6])==-123456\nassert multiple_to_single([10,15,20,25])==10152025",
        "canonical_solution": "def multiple_to_single(L):\r\n  x = int(\"\".join(map(str, L)))\r\n  return x"
    },
    {
        "number": 440,
        "prompt": "Write a function to find all adverbs and their positions in a given sentence.\ndef find_adverb_position(text):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    adverbs = []\n    words = text.split()\n    for i, word in enumerate(words):\n        if word.endswith(\"ly\"):\n            adverbs.append((word, i+1))\n    return adverbs\n\n# Test the function with the example sentence\ntext = \"She was running quickly and excitedly towards the exit.\"\nprint(find_adverb_position(text))  # Output: [('quickly', 3), ('excitedly', 6)]\n\n# Test the function with a sentence without adverbs\ntext = \"She was walking to the store, slowly and carefully.\"\nprint(find_adverb_position(text))  # Output: []\n\n# Test the function with a sentence with no punctuation\ntext = \"The dog is running.\"\nprint(find_adverb_position(text))  # Output: []\n\n# Test the function with a sentence with multiple occurrences of the same adverb\ntext = \"She was running quickly, but slowly.\"\nprint(find_adverb_position(text))  # Output: [('quickly', 3), ('slowly', 8)] ",
        "generated_testcode": "assert find_adverb_position(\"The dog is running quickly.\") == [(\"quickly\", 10)]\n",
        "test": "assert find_adverb_position(\"clearly!! we can see the sky\")==(0, 7, 'clearly')\nassert find_adverb_position(\"seriously!! there are many roses\")==(0, 9, 'seriously')\nassert find_adverb_position(\"unfortunately!! sita is going to home\")==(0, 13, 'unfortunately')",
        "canonical_solution": "import re\r\ndef find_adverb_position(text):\r\n for m in re.finditer(r\"\\w+ly\", text):\r\n    return (m.start(), m.end(), m.group(0))"
    },
    {
        "number": 441,
        "prompt": "Write a function to find the surface area of a cube.\ndef surfacearea_cube(l):\n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    return 6 * (l ** 2)\n\nprint(surfacearea_cube(5)) # Expected output: 150\nprint(surfacearea_cube(10)) # Expected output: 600\n\n# Write a function to find the volume of a cube.\ndef volume_cube(l):\n    return l ** 3\n\nprint(volume_cube(5)) # Expected output: 125\nprint(volume_cube(10)) # Expected output: 10000\n\n# Write a function to find the area of a sphere.\nimport math\ndef surfacearea_sphere(r):\n    return 4 * math.pi * r ** 2\n\nprint(surfacearea_sphere(5)) # Expected output: 314.1593\nprint(surfacearea_sphere(10)) # Expected output: 1256.637\n\n# Write a function to find the volume of a sphere.\nimport math\ndef volume_sphere(r):\n    return (4/3) * math.pi * r ** 3\n\nprint(volume_sphere(5)) # Expected output: 523.6\nprint(volume_sphere(10)) # Expected output: 41888.79\n\n# Write a function to find the volume of a cylinder.\ndef volume_cylinder(r, h):\n    return math.pi * r ** 2",
        "generated_testcode": "assert surfacearea_cube(3) == 54\n",
        "test": "assert surfacearea_cube(5)==150\nassert surfacearea_cube(3)==54\nassert surfacearea_cube(10)==600",
        "canonical_solution": "def surfacearea_cube(l):\r\n  surfacearea= 6*l*l\r\n  return surfacearea"
    },
    {
        "number": 442,
        "prompt": "Write a function to find the ration of positive numbers in an array of integers.\ndef positive_count(nums):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    count = 0\n    for num in nums:\n        if num > 0:\n            count += 1\n    return count/len(nums)\n\n# Test cases\nprint(positive_count([1,2,3,4,5])) # Output: 0.8\nprint(positive_count([-1,-2,-3,-4,-5])) # Output: 0\nprint(positive_count([1,2,3,-4,-5])) # Output: 0.4\nprint(positive_count([-1,2,3,4,-5])) # Output: 0.66666666666666666666\nprint(positive_count([1,2,3,4,5,0])) # Output: 0.8\nprint(positive_count([-1,-2,0,3,4,-5])) # Output: 0.4\nprint(positive_count([0,-1,0,0,-2,0])) # Output: 0\nprint(positive_count([0,0,0,0,0,0])) # Output: 0\n\n# Another possible solution:\ndef positive_count(nums):\n    return sum(n > 0 for n in nums)/len(nums)\n\n# Test cases\nprint(positive_count([1,2,3,4,5])) # Output: 0.8\nprint(positive_count([-1,-2,-3,-4,-5",
        "generated_testcode": "assert positive_count([1, -2, 3, 4, -5, 6]) == 3/5\n",
        "test": "assert positive_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])==0.54\nassert positive_count([2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8])==0.69\nassert positive_count([2, 4, -6, -9, 11, -12, 14, -5, 17])==0.56",
        "canonical_solution": "from array import array\r\ndef positive_count(nums):\r\n    n = len(nums)\r\n    n1 = 0\r\n    for x in nums:\r\n        if x > 0:\r\n            n1 += 1\r\n        else:\r\n          None\r\n    return round(n1/n,2)"
    },
    {
        "number": 443,
        "prompt": "Write a python function to find the largest negative number from the given list.\ndef largest_neg(list1): \n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    neg_list = []\n    for i in list1: \n        if i < 0: \n            neg_list.append(i) \n    if len(neg_list) != 0:\n        return max(neg_list) \n    else: \n        return 0\nlist1 = [1, 2, 3, 4, 5, -6, -7, -8, -9] \nprint(\"Largest negative number is:\", largest_neg(list1)) ",
        "generated_testcode": "assert largest_neg([-5, -3, -7, -1, -2, -8, -4]) == -1\n",
        "test": "assert largest_neg([1,2,3,-4,-6]) == -6\nassert largest_neg([1,2,3,-8,-9]) == -9\nassert largest_neg([1,2,3,4,-1]) == -1",
        "canonical_solution": "def largest_neg(list1): \r\n    max = list1[0] \r\n    for x in list1: \r\n        if x < max : \r\n             max = x  \r\n    return max"
    },
    {
        "number": 444,
        "prompt": "Write a function to trim each tuple by k in the given tuple list.\ndef trim_tuple(test_list, K):\n",
        "checkpoint": "13B",
        "pass": 6,
        "correct": true,
        "answer": "    new_list = []\n    for tup in test_list:\n        new_tup = tuple(i for i in tup if i > K)\n        new_list.append(new_tup)\n    return new_list\n\n#Example usage:\ntest_list = [(1, 2, 3, 4, 5), (6, 7, 8, 9, 10), (11, 12, 13, 14)]\nK = 5\nprint(trim_tuple(test_list, K)) # Output: [(6, 8, 9, 10), (11, 12, 13, 14)]\n\n# Another example\ntest_list2 = [(1, 1, 1, 2, 3), (1, 2, 2, 3), (4, 4, 4, 4)]\nK = 2\nprint(trim_tuple(test_list2, K)) # Output: [(3,), (2, 3), (4,)]\n\n# Test your function with the provided test cases\ntest_list = [(1, 2, 3, 4, 5), (6, 7, 8, 9, 10), (11, 12, 13, 14)]\nK = 5\nprint(trim_tuple(test_list, K)) # [(6, 8, 9, 10), (11, 1",
        "generated_testcode": "",
        "test": "assert trim_tuple([(5, 3, 2, 1, 4), (3, 4, 9, 2, 1),(9, 1, 2, 3, 5), (4, 8, 2, 1, 7)], 2) == '[(2,), (9,), (2,), (2,)]'\nassert trim_tuple([(5, 3, 2, 1, 4), (3, 4, 9, 2, 1), (9, 1, 2, 3, 5), (4, 8, 2, 1, 7)], 1) == '[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]'\nassert trim_tuple([(7, 8, 4, 9), (11, 8, 12, 4),(4, 1, 7, 8), (3, 6, 9, 7)], 1) == '[(8, 4), (8, 12), (1, 7), (6, 9)]'",
        "canonical_solution": "def trim_tuple(test_list, K):\r\n  res = []\r\n  for ele in test_list:\r\n    N = len(ele)\r\n    res.append(tuple(list(ele)[K: N - K]))\r\n  return (str(res)) "
    },
    {
        "number": 445,
        "prompt": "Write a function to perform index wise multiplication of tuple elements in the given two tuples.\ndef index_multiplication(test_tup1, test_tup2):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": true,
        "answer": "    result_tup = tuple()\n    for i in range(len(test_tup1)):\n        result_tup = result_tup + (test_tup1[i] * test_tup2[i],)\n    return result_tup\n\n# Example usage:\ntest_tup1 = (2, 4, 6, 8, 10)\ntest_tup2 = (1, 3, 5, 7, 9)\nprint(index_multiplication(test_tup1, test_tup2))  # Output: (2, 12, 30, 72, 90)\n",
        "generated_testcode": "assert index_multiplication((1, 2, 3), (4, 5, 6)) == (4, 10, 18)\n",
        "test": "assert index_multiplication(((1, 3), (4, 5), (2, 9), (1, 10)),((6, 7), (3, 9), (1, 1), (7, 3)) ) == ((6, 21), (12, 45), (2, 9), (7, 30))\nassert index_multiplication(((2, 4), (5, 6), (3, 10), (2, 11)),((7, 8), (4, 10), (2, 2), (8, 4)) ) == ((14, 32), (20, 60), (6, 20), (16, 44))\nassert index_multiplication(((3, 5), (6, 7), (4, 11), (3, 12)),((8, 9), (5, 11), (3, 3), (9, 5)) ) == ((24, 45), (30, 77), (12, 33), (27, 60))",
        "canonical_solution": "def index_multiplication(test_tup1, test_tup2):\r\n  res = tuple(tuple(a * b for a, b in zip(tup1, tup2))\r\n   for tup1, tup2 in zip(test_tup1, test_tup2))\r\n  return (res) "
    },
    {
        "number": 446,
        "prompt": "Write a python function to count the occurence of all elements of list in a tuple.\ndef count_Occurrence(tup, lst): \n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    count_dict = {} \n    for i in tup: \n        count_dict[i] = 0\n    for i in lst: \n        if i in tup: \n            count_dict[i] += 1\n    return count_dict \n  \n# example usage \ntup = (1, 2, 3, 4, 5) \nlst = [1, 2, 2, 3, 4, 5, 5, 5, 5, 6] \nprint(count_Occurrence(tup, lst)) ",
        "generated_testcode": "",
        "test": "assert count_Occurrence(('a', 'a', 'c', 'b', 'd'),['a', 'b'] ) == 3\nassert count_Occurrence((1, 2, 3, 1, 4, 6, 7, 1, 4),[1, 4, 7]) == 6\nassert count_Occurrence((1,2,3,4,5,6),[1,2]) == 2",
        "canonical_solution": "from collections import Counter \r\ndef count_Occurrence(tup, lst): \r\n    count = 0\r\n    for item in tup: \r\n        if item in lst: \r\n            count+= 1 \r\n    return count  "
    },
    {
        "number": 447,
        "prompt": "Write a function to find cubes of individual elements in a list using lambda function.\ndef cube_nums(nums):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    return list(map(lambda x: x**3, nums))\n\n# Example usage:\nnums = [1, 2, 3, 4, 5]\nprint(cube_nums(nums))\n# Output: [1, 8, 27, 64, 125]\n\n# Using list comprehension\ndef cube_nums(nums):\n    return [x**3 for x in nums]\n\n# Example usage:\nnums = [1, 2, 3, 4, 5]\nprint(cube_nums(nums))\n# Output: [1, 8, 27, 64, 125] ",
        "generated_testcode": "assert cube_nums([1, 2, 3, 4, 5]) == [1, 8, 27, 64]\n",
        "test": "assert cube_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]\nassert cube_nums([10,20,30])==([1000, 8000, 27000])\nassert cube_nums([12,15])==([1728, 3375])",
        "canonical_solution": "def cube_nums(nums):\r\n cube_nums = list(map(lambda x: x ** 3, nums))\r\n return cube_nums"
    },
    {
        "number": 448,
        "prompt": "Write a function to calculate the sum of perrin numbers.\ndef cal_sum(n): \n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    sum = 1\n    temp = 1\n    for i in range(2, n+1): \n        temp += 1\n        sum += temp\n    return sum\n\n# function to check if a number is a perrin number or not \ndef is_perrin(n): \n    # Calculate the sum of first n numbers \n    sum = cal_sum(n) \n    # Calculate the sum of the sum of first n numbers \n    sum_sum = cal_sum(sum) \n    # If sum of the first n numbers is equal to the sum of the sum of first n numbers, then n is a perrin number \n    if sum == sum_sum: \n        return True\n    else: \n        return False\n\n# Driver program to test the above function \nn = 5\nif is_perrin(n): \n    print(n, \"is a Perrin number\") \nelse: \n    print(n, \"is not a Perrin number\") \n",
        "generated_testcode": "assert cal_sum(1) == 1\n",
        "test": "assert cal_sum(9) == 49\nassert cal_sum(10) == 66\nassert cal_sum(11) == 88",
        "canonical_solution": "def cal_sum(n): \r\n\ta = 3\r\n\tb = 0\r\n\tc = 2\r\n\tif (n == 0): \r\n\t\treturn 3\r\n\tif (n == 1): \r\n\t\treturn 3\r\n\tif (n == 2): \r\n\t\treturn 5\r\n\tsum = 5\r\n\twhile (n > 2): \r\n\t\td = a + b \r\n\t\tsum = sum + d \r\n\t\ta = b \r\n\t\tb = c \r\n\t\tc = d \r\n\t\tn = n-1\r\n\treturn sum"
    },
    {
        "number": 449,
        "prompt": "Write a python function to check whether the triangle is valid or not if 3 points are given.\ndef check_Triangle(x1,y1,x2,y2,x3,y3): \n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    if(x1*y2+x2*y3+x3*y1-x2*y1-x3*y2-x1*y3)!=0:\n        return True\n    else:\n        return False\n\n#Function to check whether the given points are collinear or not.\ndef check_Collinear(x1,y1,x2,y2,x3,y3): \n    if(x1*(y2-y3)+x2*(y3-y1)+x3*(y1-y2)==0):\n        return True\n    else:\n        return False\n\n#Function to check whether the given points are inside the triangle or not.\ndef check_inside(x1,y1,x2,y2,x3,y3,x,y): \n    x12=(x2-x1)\n    y12=(y2-y1)\n    x13=(x3-x1)\n    y13=(y3-y1)\n    p=(x-x1)*(y3-y1)-(y-y1)*(x3-x1)\n    q=(x-x1)*(y2-y1)-(y-y1)*(x2-x1)\n    r=(x12*y-y12*x1)\n    if(p<0 or q<0 or r<0):\n        return False\n    elif(p+q>=r and q+r>=p and r+p",
        "generated_testcode": "assert check_Triangle(0,0,0,0,3,3) == True\n",
        "test": "assert check_Triangle(1,5,2,5,4,6) == 'Yes'\nassert check_Triangle(1,1,1,4,1,5) == 'No'\nassert check_Triangle(1,1,1,1,1,1) == 'No'",
        "canonical_solution": "def check_Triangle(x1,y1,x2,y2,x3,y3): \r\n    a = (x1*(y2-y3)+x2*(y3-y1)+x3*(y1-y2))   \r\n    if a == 0: \r\n        return ('No') \r\n    else: \r\n        return ('Yes') "
    },
    {
        "number": 450,
        "prompt": "Write a function to extract specified size of strings from a give list of string values.\ndef extract_string(str, l):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    \"\"\"\n    Extracts the specified number of characters from each string in the list.\n\n    :param str: List of strings\n    :param l: integer value of the length of the string to be extracted\n    :return: New list of extracted strings\n    \"\"\"\n    new_list = []\n    for s in str:\n        new_list.append(s[:l])\n    return new_list\n\n# Testing the function with an example\nstring_list = [\"Python\", \"Ruby\", \"Java\", \"Kotlin\", \"JavaScript\"]\nprint(extract_string(string_list, 4))\n# Output: ['Pyth', 'Ruby', 'Java', 'Kotl', 'JavaS']\n\n\n# Example 2\nstring_list = [\"Python\", \"Ruby\", \"Java\", \"Kotlin\", \"JavaScript\"]\nprint(extract_string(string_list, 6))\n# Output: ['Python', 'Rubie', 'JavaSc', 'Kotlin', 'JavaScr']\n",
        "generated_testcode": "assert extract_string(['hello', 'world', 'python', 'programming'], 3) == ['hel', 'wor', 'pro']\n",
        "test": "assert extract_string(['Python', 'list', 'exercises', 'practice', 'solution'] ,8)==['practice', 'solution']\nassert extract_string(['Python', 'list', 'exercises', 'practice', 'solution'] ,6)==['Python']\nassert extract_string(['Python', 'list', 'exercises', 'practice', 'solution'] ,9)==['exercises']",
        "canonical_solution": "def extract_string(str, l):\r\n    result = [e for e in str if len(e) == l] \r\n    return result"
    },
    {
        "number": 451,
        "prompt": "Write a function to remove all whitespaces from the given string using regex.\ndef remove_whitespaces(text1):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    import re\n    text1 = re.sub(r'\\s+', '', text1)\n    return text1\n\n# Test the function with sample input\nprint(remove_whitespaces(\"Hello world\"))\n# Output: \"Helloworld\"\n\n# Test the function with sample input\nprint(remove_whitespaces(\" Hello   world \"))\n# Output: \"Helloworld\"\n\n# Test the function with sample input\nprint(remove_whitespaces(\"  Hello  world  \"))\n# Output: \"Helloworld\"\n\n# Test the function with sample input\nprint(remove_whitespaces(\"Hello  world  \"))\n# Output: \"Helloworld\"\n\n# Test the function with sample input\nprint(remove_whitespaces(\"Hello world  \"))\n# Output: \"Helloworld\"\n\n# Test the function with sample input\nprint(remove_whitespaces(\"Hello world\\n\"))\n# Output: \"Helloworld\"\n\n# Test the function with sample input\nprint(remove_whitespaces(\"Hello\\tworld\"))\n# Output: \"Helloworld\"\n\n# Test the function with sample input\nprint(remove_whitespaces(\"Hello\\t world\\n\"))\n# Output: \"Helloworld\"\n\n# Test the function with sample input\nprint(remove_whitespaces(\"Hello\\nworld\"))\n# Output: \"Helloworld\"\n\n# Test the function with sample input\nprint(remove_whitespaces(\"Hello\\tworld\\n\"))\n# Output: \"Helloworld",
        "generated_testcode": "assert remove_whitespaces(\"Hello World\") == \"HelloWorld\"\n",
        "test": "assert remove_whitespaces(' Google    Flutter ') == 'GoogleFlutter'\nassert remove_whitespaces(' Google    Dart ') == 'GoogleDart'\nassert remove_whitespaces(' iOS    Swift ') == 'iOSSwift'",
        "canonical_solution": "import re\r\ndef remove_whitespaces(text1):\r\n  return (re.sub(r'\\s+', '',text1))"
    },
    {
        "number": 452,
        "prompt": "Write a function that gives loss amount if the given amount has loss else return none.\ndef loss_amount(actual_cost,sale_amount): \n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    if sale_amount < actual_cost: \n        loss_amount = actual_cost - sale_amount \n        return loss_amount \n    else: \n        return None\n\nprint(loss_amount(10000, 800)) # Output: 200\nprint(loss_amount(10000, 1200)) # Output: None\nprint(loss_amount(10000, 1500)) # Output: None\n\n# Sample Input\n# 1. actual_cost = 10000, sale_amount = 800\n# 2. actual_cost = 10000, sale_amount = 1200\n# 3. actual_cost = 10000, sale_amount = 1500\n\n# Sample Output\n# 1. 200\n# 2. None\n# 3. None ",
        "generated_testcode": "assert loss_amount(10000, 800) == 200\n",
        "test": "assert loss_amount(1500,1200)==None\nassert loss_amount(100,200)==100\nassert loss_amount(2000,5000)==3000",
        "canonical_solution": "def loss_amount(actual_cost,sale_amount): \r\n  if(sale_amount > actual_cost):\r\n    amount = sale_amount - actual_cost\r\n    return amount\r\n  else:\r\n    return None"
    },
    {
        "number": 453,
        "prompt": "Write a python function to find the sum of even factors of a number.\ndef sumofFactors(n) : \n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    sum = 0\n    for i in range(1,n) : \n        if (n % i == 0) : \n            sum += i \n    return sum\n\n# Test the function \nn = 12\nprint(\"Sum of factors of 12 is :\", sumofFactors(n)) ",
        "generated_testcode": "assert sumofFactors(12) == 16\n",
        "test": "assert sumofFactors(18) == 26\nassert sumofFactors(30) == 48\nassert sumofFactors(6) == 8",
        "canonical_solution": "import math \r\ndef sumofFactors(n) : \r\n    if (n % 2 != 0) : \r\n        return 0\r\n    res = 1\r\n    for i in range(2, (int)(math.sqrt(n)) + 1) :    \r\n        count = 0\r\n        curr_sum = 1\r\n        curr_term = 1\r\n        while (n % i == 0) : \r\n            count= count + 1\r\n            n = n // i \r\n            if (i == 2 and count == 1) : \r\n                curr_sum = 0\r\n            curr_term = curr_term * i \r\n            curr_sum = curr_sum + curr_term \r\n        res = res * curr_sum  \r\n    if (n >= 2) : \r\n        res = res * (1 + n) \r\n    return res "
    },
    {
        "number": 454,
        "prompt": "Write a function that matches a word containing 'z'.\ndef text_match_wordz(text):\n",
        "checkpoint": "13B",
        "pass": 5,
        "correct": true,
        "answer": "    if 'z' in text:\n        return True\n    else:\n        return False\n\n# Test the function with the following text\ntext = \"The quick brown fox jumps over the lazy dog\"\nprint(text_match_wordz(text)) # Should return True\n\ntext = \"Python is awesome\"\nprint(text_match_wordz(text)) # Should return False\n\ntext = \"Apple pie is the best\"\nprint(text_match_wordz(text)) # Should return False\n\ntext = \"Zebra\"\nprint(text_match_wordz(text)) # Should return True\n\ntext = \"Zebra apple pie is yummy\"\nprint(text_match_wordz(text)) # Should return True\n\ntext = \"Zebra apple pie is yummy z\"\nprint(text_match_wordz(text)) # Should return True ",
        "generated_testcode": "assert text_match_wordz(\"The quick brown fox jumps over the lazy dog\") == True\n",
        "test": "assert text_match_wordz(\"pythonz.\")==('Found a match!')\nassert text_match_wordz(\"xyz.\")==('Found a match!')\nassert text_match_wordz(\"  lang  .\")==('Not matched!')",
        "canonical_solution": "import re\r\ndef text_match_wordz(text):\r\n        patterns = '\\w*z.\\w*'\r\n        if re.search(patterns,  text):\r\n                return 'Found a match!'\r\n        else:\r\n                return('Not matched!')"
    },
    {
        "number": 455,
        "prompt": "Write a function to check whether the given month number contains 31 days or not.\ndef check_monthnumb_number(monthnum2):\n",
        "checkpoint": "13B",
        "pass": 5,
        "correct": true,
        "answer": "    if monthnum2 in (1, 3, 5, 7, 8, 10, 12):\n        return True\n    elif monthnum2 in (4, 6, 9, 11):\n        return False\n    else:\n        return True\n\n\n# function to find whether the year is a leap year or not\ndef is_leap_year(year):\n    if year % 4 == 0:\n        if year % 100 == 0:\n            if year % 400 == 0:\n                return True\n            else:\n                return False\n        else:\n            return True\n    else:\n        return False\n\n\ndef main():\n    # Taking input from the user for year, month, and day\n    year = int(input(\"Enter the year: \"))\n    month = int(input(\"Enter the month number (1-12): \"))\n    day = int(input(\"Enter the day number (1-31): \"))\n\n    # Checking if the given year is a leap year or not\n    if is_leap_year(year):\n        print(\"Leap year\")\n    else:\n        print(\"Not a leap year\")\n\n    # Checking whether the given month number contains 31 days or not\n    if check_monthnumb_number(month):\n        print(\"Month number contains 31 days\")\n    else:\n        print(\"Month number does not contain 31 days\")\n\n    #",
        "generated_testcode": "assert check_monthnumb_number(1) == True\n",
        "test": "assert check_monthnumb_number(5)==True\nassert check_monthnumb_number(2)==False\nassert check_monthnumb_number(6)==False",
        "canonical_solution": "def check_monthnumb_number(monthnum2):\r\n  if(monthnum2==1 or monthnum2==3 or monthnum2==5 or monthnum2==7 or monthnum2==8 or monthnum2==10 or monthnum2==12):\r\n    return True\r\n  else:\r\n    return False"
    },
    {
        "number": 456,
        "prompt": "Write a function to reverse strings in a given list of string values.\ndef reverse_string_list(stringlist):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    return [s[::-1] for s in stringlist]\n\n# Test the function with a sample list\nsample_list = ['hello', 'world', 'Python', 'Programming']\nprint(reverse_string_list(sample_list))  # Output: ['olleh', 'dlrow', 'nohtyP', 'gnimmargorP']\n\n# Bonus: Reverse the order of the strings in the list\ndef reverse_order_list(stringlist):\n    return stringlist[::-1]\n\n# Test the function with a sample list\nsample_list = ['hello', 'world', 'Python', 'Programming']\nprint(reverse_order_list(sample_list))  # Output: ['Programming', 'Python', 'world', 'hello'] ",
        "generated_testcode": "assert reverse_string_list(['hello', 'world', 'python']) == ['olleh', 'dlrow', 'nohtyp']\n",
        "test": "assert reverse_string_list(['Red', 'Green', 'Blue', 'White', 'Black'])==['deR', 'neerG', 'eulB', 'etihW', 'kcalB']\nassert reverse_string_list(['john','amal','joel','george'])==['nhoj','lama','leoj','egroeg']\nassert reverse_string_list(['jack','john','mary'])==['kcaj','nhoj','yram']",
        "canonical_solution": "def reverse_string_list(stringlist):\r\n    result = [x[::-1] for x in stringlist]\r\n    return result"
    },
    {
        "number": 457,
        "prompt": "Write a python function to find the sublist having minimum length.\ndef Find_Min(lst): \n",
        "checkpoint": "13B",
        "pass": 9,
        "correct": true,
        "answer": "    n = len(lst) \n    if n == 0: \n        return 0\n    min_len = n \n    for i in range(n): \n        sub_len = 1\n        for j in range(i+1, n): \n            if lst[i] != lst[j]: \n                break\n            sub_len += 1\n        if sub_len < min_len: \n            min_len = sub_len \n    return min_len \n\n# Test the function with an example list \nlst = [1, 1, 1, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 5, 6, 6] \nprint(\"Minimum length sublist is\", Find_Min(lst)) ",
        "generated_testcode": "assert Find_Min([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 1\n",
        "test": "assert Find_Min([[1],[1,2],[1,2,3]]) == [1]\nassert Find_Min([[1,1],[1,1,1],[1,2,7,8]]) == [1,1]\nassert Find_Min([['x'],['x','y'],['x','y','z']]) == ['x']",
        "canonical_solution": "def Find_Min(lst): \r\n    minList = min((x) for x in lst) \r\n    return minList"
    },
    {
        "number": 458,
        "prompt": "Write a function to find the area of a rectangle.\ndef rectangle_area(l,b):\n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    return l*b\n\n#Test the function with some values\nprint(rectangle_area(5, 10)) #Expected Output: 50\nprint(rectangle_area(10, 12)) #Expected Output: 120\n\n#Write a function to find the perimeter of a rectangle.\ndef rectangle_perimeter(l,b):\n    return 2*(l+b)\n\n#Test the function with some values\nprint(rectangle_perimeter(5, 10)) #Expected Output: 30\nprint(rectangle_perimeter(10, 12)) #Expected Output: 34\n\n#Write a function to find the area of a triangle.\ndef triangle_area(base,height):\n    return 0.5*base*height\n\n#Test the function with some values\nprint(triangle_area(6, 8)) #Expected Output: 24.0\nprint(triangle_area(10, 12)) #Expected Output: 30.0\n\n#Write a function to find the area of a circle.\ndef circle_area(radius):\n    import math\n    return math.pi*radius**2\n\n#Test the function with some values\nprint(circle_area(5)) #Expected Output: 78.5\nprint(circle_area(10)) #Expected Output: 314.1591693102538216\n\n#Write a function to find",
        "generated_testcode": "assert rectangle_area(5, 10) == 50\n",
        "test": "assert rectangle_area(10,20)==200\nassert rectangle_area(10,5)==50\nassert rectangle_area(4,2)==8",
        "canonical_solution": "def rectangle_area(l,b):\r\n  area=l*b\r\n  return area"
    },
    {
        "number": 459,
        "prompt": "Write a function to remove uppercase substrings from a given string by using regex.\ndef remove_uppercase(str1):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    import re\n    pattern = re.compile(r'[A-Z]+')\n    return re.sub(pattern, '', str1)\n\n# Test the function\nprint(remove_uppercase(\"HelloWorld\")) # Output: 'HelloWorld'\nprint(remove_uppercase(\"Hello World\")) # Output: 'Hello World'\nprint(remove_uppercase(\"HELLOWorld\")) # Output: ' World'\nprint(remove_uppercase(\"HelloWorld123\")) # Output: 'HelloWorld123'\nprint(remove_uppercase(\"HELLOWorld123\")) # Output: '123'\nprint(remove_uppercase(\"HELLO123\")) # Output: '123'\nprint(remove_uppercase(\"HELLOWorldPYTHON\")) # Output: 'WorldPYTHON'\n\n# Using replace function\ndef remove_uppercase(str1):\n    return str1.replace('A', '').replace('B', '').replace('C', '').replace('D', '').replace('E', '').replace('F', '').replace('G', '').replace('H', '').replace('I', '').replace('J', '').replace('K', '').replace('L', '').replace('M', '').replace('N', '').replace('O', '').replace('P', '').replace('Q', '').replace('R', '').replace('S', '').replace('T', '').replace('U', '').replace('V', '').replace('W', '').replace",
        "generated_testcode": "assert remove_uppercase(\"HelloWorld\") == \"HW\"\n",
        "test": "assert remove_uppercase('cAstyoUrFavoRitETVshoWs') == 'cstyoravoitshos'\nassert remove_uppercase('wAtchTheinTernEtrAdIo') == 'wtchheinerntrdo'\nassert remove_uppercase('VoicESeaRchAndreComMendaTionS') == 'oiceachndreomendaion'",
        "canonical_solution": "import re\r\ndef remove_uppercase(str1):\r\n  remove_upper = lambda text: re.sub('[A-Z]', '', text)\r\n  result =  remove_upper(str1)\r\n  return (result)"
    },
    {
        "number": 460,
        "prompt": "Write a python function to get the first element of each sublist.\ndef Extract(lst): \n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    result = [] \n    for sublist in lst: \n        result.append(sublist[0]) \n    return result \n  \n# example usage \nlst = [[1, 2, 3], [4, 5, 6], [7, 8, 9]] \nprint(Extract(lst)) ",
        "generated_testcode": "assert Extract([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [1, 4, 7]\n",
        "test": "assert Extract([[1, 2], [3, 4, 5], [6, 7, 8, 9]]) == [1, 3, 6]\nassert Extract([[1,2,3],[4, 5]]) == [1,4]\nassert Extract([[9,8,1],[1,2]]) == [9,1]",
        "canonical_solution": "def Extract(lst): \r\n    return [item[0] for item in lst] "
    },
    {
        "number": 461,
        "prompt": "Write a python function to count the upper case characters in a given string.\ndef upper_ctr(str):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    count = 0\n    for i in range(len(str)):\n        if str[i].isupper():\n            count += 1\n    return count\n\n# Test the function\nprint(upper_ctr(\"Hello world\"))\n# Output: 1\nprint(upper_ctr(\"Python is awesome\"))\n# Output: 2\nprint(upper_ctr(\"HELLO WORLD\"))\n# Output: 5\nprint(upper_ctr(\"aBcDeFgHiJkLmNoPqRsTuVwXyZ\"))\n# Output: 5\nprint(upper_ctr(\"This string has no upper case letters\"))\n# Output: 0\nprint(upper_ctr(\"This is a mixed Case String\"))\n# Output: 2\n\n# Time Complexity: O(n) \n# Space Complexity: O(1) ",
        "generated_testcode": "assert upper_ctr(\"Hello World\") == 2\n",
        "test": "assert upper_ctr('PYthon') == 1\nassert upper_ctr('BigData') == 1\nassert upper_ctr('program') == 0",
        "canonical_solution": "def upper_ctr(str):\r\n    upper_ctr = 0\r\n    for i in range(len(str)):\r\n          if str[i] >= 'A' and str[i] <= 'Z': upper_ctr += 1\r\n          return upper_ctr"
    },
    {
        "number": 462,
        "prompt": "Write a function to find all possible combinations of the elements of a given list.\ndef combinations_list(list1):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    if len(list1) == 0:\n        return [[]]\n    else:\n        result = []\n        for i in range(len(list1)):\n            rest = combinations_list(list1[:i] + list1[i+1:])\n            for r in rest:\n                result.append([list1[i]] + r)\n        return result\n\n\nprint(combinations_list([1, 2, 3]))\n# Output: [[1, 2], [1, 3], [2, 1], [2, 3], [3, 1], [3, 2]]\n\n# The above code will return the combinations of the given list. The function recursively calls itself and appends the first element of the list to the combinations of the remaining elements. ",
        "generated_testcode": "assert combinations_list([1, 2, 3]) == [[1], [2], [3], [1, 2], [1, 3], [2, 3], [1, 2, 3]]\n",
        "test": "assert combinations_list(['orange', 'red', 'green', 'blue'])==[[], ['orange'], ['red'], ['red', 'orange'], ['green'], ['green', 'orange'], ['green', 'red'], ['green', 'red', 'orange'], ['blue'], ['blue', 'orange'], ['blue', 'red'], ['blue', 'red', 'orange'], ['blue', 'green'], ['blue', 'green', 'orange'], ['blue', 'green', 'red'], ['blue', 'green', 'red', 'orange']]\nassert combinations_list(['red', 'green', 'blue', 'white', 'black', 'orange'])==[[], ['red'], ['green'], ['green', 'red'], ['blue'], ['blue', 'red'], ['blue', 'green'], ['blue', 'green', 'red'], ['white'], ['white', 'red'], ['white', 'green'], ['white', 'green', 'red'], ['white', 'blue'], ['white', 'blue', 'red'], ['white', 'blue', 'green'], ['white', 'blue', 'green', 'red'], ['black'], ['black', 'red'], ['black', 'green'], ['black', 'green', 'red'], ['black', 'blue'], ['black', 'blue', 'red'], ['black', 'blue', 'green'], ['black', 'blue', 'green', 'red'], ['black', 'white'], ['black', 'white', 'red'], ['black', 'white', 'green'], ['black', 'white', 'green', 'red'], ['black', 'white', 'blue'], ['black', 'white', 'blue', 'red'], ['black', 'white', 'blue', 'green'], ['black', 'white', 'blue', 'green', 'red'], ['orange'], ['orange', 'red'], ['orange', 'green'], ['orange', 'green', 'red'], ['orange', 'blue'], ['orange', 'blue', 'red'], ['orange', 'blue', 'green'], ['orange', 'blue', 'green', 'red'], ['orange', 'white'], ['orange', 'white', 'red'], ['orange', 'white', 'green'], ['orange', 'white', 'green', 'red'], ['orange', 'white', 'blue'], ['orange', 'white', 'blue', 'red'], ['orange', 'white', 'blue', 'green'], ['orange', 'white', 'blue', 'green', 'red'], ['orange', 'black'], ['orange', 'black', 'red'], ['orange', 'black', 'green'], ['orange', 'black', 'green', 'red'], ['orange', 'black', 'blue'], ['orange', 'black', 'blue', 'red'], ['orange', 'black', 'blue', 'green'], ['orange', 'black', 'blue', 'green', 'red'], ['orange', 'black', 'white'], ['orange', 'black', 'white', 'red'], ['orange', 'black', 'white', 'green'], ['orange', 'black', 'white', 'green', 'red'], ['orange', 'black', 'white', 'blue'], ['orange', 'black', 'white', 'blue', 'red'], ['orange', 'black', 'white', 'blue', 'green'], ['orange', 'black', 'white', 'blue', 'green', 'red']]\nassert combinations_list(['red', 'green', 'black', 'orange'])==[[], ['red'], ['green'], ['green', 'red'], ['black'], ['black', 'red'], ['black', 'green'], ['black', 'green', 'red'], ['orange'], ['orange', 'red'], ['orange', 'green'], ['orange', 'green', 'red'], ['orange', 'black'], ['orange', 'black', 'red'], ['orange', 'black', 'green'], ['orange', 'black', 'green', 'red']]",
        "canonical_solution": "def combinations_list(list1):\r\n    if len(list1) == 0:\r\n        return [[]]\r\n    result = []\r\n    for el in combinations_list(list1[1:]):\r\n        result += [el, el+[list1[0]]]\r\n    return result"
    },
    {
        "number": 463,
        "prompt": "Write a function to find the maximum product subarray of the given array.\ndef max_subarray_product(arr):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    if len(arr) == 0:\n        return 0\n    if len(arr) == 1:\n        return arr[0]\n    max_product = arr[0]\n    min_product = arr[0]\n    max_so_far = arr[0]\n    min_so_far = arr[0]\n    for i in range(1, len(arr)):\n        if arr[i] < 0:\n            max_product, min_product = min_product, max_product\n        max_product = max(arr[i], max_product * arr[i])\n        min_product = min(arr[i], min_product * arr[i])\n        max_so_far = max(max_so_far, max_product)\n        min_so_far = max(min_so_far, min_product)\n    return max_so_far\n\n# Test the function with some test cases\narr1 = [2, 3, -2, 4]\narr2 = [-2, 0, -1]\narr3 = [-2, 3, -4]\nprint(max_subarray_product(arr1))  # Output: 6\nprint(max_subarray_product(arr2))  # Output: 0\nprint(max_subarray_product(arr3))  # Output: 24\n\n# Time Complexity: O(n), Space Complexity: O(1)\n# Explanation: We are using two variables to keep track of",
        "generated_testcode": "assert max_subarray_product([-1, -2, 3, -4, 5, 2, -10, 7]) == 168\n",
        "test": "assert max_subarray_product([1, -2, -3, 0, 7, -8, -2]) == 112\nassert max_subarray_product([6, -3, -10, 0, 2]) == 180 \nassert max_subarray_product([-2, -40, 0, -2, -3]) == 80",
        "canonical_solution": "def max_subarray_product(arr):\r\n\tn = len(arr)\r\n\tmax_ending_here = 1\r\n\tmin_ending_here = 1\r\n\tmax_so_far = 0\r\n\tflag = 0\r\n\tfor i in range(0, n):\r\n\t\tif arr[i] > 0:\r\n\t\t\tmax_ending_here = max_ending_here * arr[i]\r\n\t\t\tmin_ending_here = min (min_ending_here * arr[i], 1)\r\n\t\t\tflag = 1\r\n\t\telif arr[i] == 0:\r\n\t\t\tmax_ending_here = 1\r\n\t\t\tmin_ending_here = 1\r\n\t\telse:\r\n\t\t\ttemp = max_ending_here\r\n\t\t\tmax_ending_here = max (min_ending_here * arr[i], 1)\r\n\t\t\tmin_ending_here = temp * arr[i]\r\n\t\tif (max_so_far < max_ending_here):\r\n\t\t\tmax_so_far = max_ending_here\r\n\tif flag == 0 and max_so_far == 0:\r\n\t\treturn 0\r\n\treturn max_so_far"
    },
    {
        "number": 464,
        "prompt": "Write a function to check if all values are same in a dictionary.\ndef check_value(dict, n):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": true,
        "answer": "    for key, value in dict.items():\n        if value != n:\n            return False\n    return True\n\n# Test the function\ndict = {'a': 1, 'b': 1, 'c': 1, 'd': 1}\nprint(check_value(dict, 1))  # Output: True\n\ndict = {'a': 1, 'b': 2, 'c': 1, 'd': 1}\nprint(check_value(dict, 1))  # Output: False\n\ndict = {'a': 1, 'b': 1, 'c': 1, 'd': 2}\nprint(check_value(dict, 1))  # Output: False\n\ndict = {'a': 2, 'b': 2, 'c': 2, 'd': 2}\nprint(check_value(dict, 1))  # Output: False ",
        "generated_testcode": "assert check_value({'a': 1, 'b': 1, 'c': 1}, 1) == True\n",
        "test": "assert check_value({'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12},10)==False\nassert check_value({'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12},12)==True\nassert check_value({'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12},5)==False",
        "canonical_solution": "def check_value(dict, n):\r\n    result = all(x == n for x in dict.values()) \r\n    return result"
    },
    {
        "number": 465,
        "prompt": "Write a function to drop empty items from a given dictionary.\ndef drop_empty(dict1):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    return {k:v for k,v in dict1.items() if v}\n\n#Example usage:\nprint(drop_empty({'a': 0, 'b': 1, 'c': 2, 'd': 0, 'e': False, 'f': None, 'g': 'hi', 'h': '', 'i': {}, 'j': []})) # {'b': 1, 'c': 2, 'g': 'hi'}\nprint(drop_empty({'a': 0, 'b': 1, 'c': 2, 'd': 0, 'e': False, 'f': None, 'g': 'hi', 'h': '', 'i': {}, 'j': []}) == {'b': 1, 'c': 2, 'g': 'hi'} ) # True\nprint(drop_empty({'a': 0, 'b': 1, 'c': 2, 'd': 0, 'e': False, 'f': None, 'g': 'hi', 'h': '', 'i': {}, 'j': []} == {'b': 1, 'c': 2, 'g': 'hi', 'i': {}}) # False\nprint(drop_empty({})) # {}\nprint(drop_empty({'a': 0, 'b': 1, 'c': 2, 'd': 0, 'e': False, 'f': None, 'g': 'hi', 'h': '', 'i': {}, 'j': []} == {'a': 0, '",
        "generated_testcode": "assert drop_empty({'a': 1, 'b': 2, 'c': None, 'd': 3, 'e': None}) == {'a': 1, 'd': 3}\n",
        "test": "assert drop_empty({'c1': 'Red', 'c2': 'Green', 'c3':None})=={'c1': 'Red', 'c2': 'Green'}\nassert drop_empty({'c1': 'Red', 'c2': None, 'c3':None})=={'c1': 'Red'}\nassert drop_empty({'c1': None, 'c2': 'Green', 'c3':None})=={ 'c2': 'Green'}",
        "canonical_solution": "def drop_empty(dict1):\r\n  dict1 = {key:value for (key, value) in dict1.items() if value is not None}\r\n  return dict1"
    },
    {
        "number": 466,
        "prompt": "Write a function to find the peak element in the given array.\ndef find_peak_util(arr, low, high, n): \n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    # base case \n    if high == low: \n        return high \n    if high == 1: \n        return 0\n    mid = (low + high) // 2\n    # If the middle element is greater than its adjacent elements then it is the peak element \n    if (mid == 0 or arr[mid - 1] <= arr[mid]) and (mid == n - 1 or arr[mid + 1] <= arr[mid]): \n        return mid \n    # If the middle element is greater than its previous element, then it is in the right subarray \n    if arr[mid] > arr[mid - 1]: \n        return find_peak_util(arr, mid + 1, high, n) \n    # If the middle element is smaller than its previous element, then it is in the left subarray \n    else: \n        return find_peak_util(arr, low, mid, n) \n  \n# Wrapper over the function \ndef find_peak(arr, n): \n    return find_peak_util(arr, 0, n, n) \n  \n# Test the function \narr = [1, 2, 3, 4, 5, 6, 7] \nn = len(arr) \nprint(find_peak(arr, n)) ",
        "generated_testcode": "assert find_peak_util([1, 2, 3, 4, 5, 6, 7, 8, 9], 0, 6, 7) == 6\n",
        "test": "assert find_peak([1, 3, 20, 4, 1, 0], 6) == 2\nassert find_peak([2, 3, 4, 5, 6], 5) == 4\nassert find_peak([8, 9, 11, 12, 14, 15], 6) == 5 ",
        "canonical_solution": "def find_peak_util(arr, low, high, n): \r\n\tmid = low + (high - low)/2\r\n\tmid = int(mid) \r\n\tif ((mid == 0 or arr[mid - 1] <= arr[mid]) and\r\n\t\t(mid == n - 1 or arr[mid + 1] <= arr[mid])): \r\n\t\treturn mid \r\n\telif (mid > 0 and arr[mid - 1] > arr[mid]): \r\n\t\treturn find_peak_util(arr, low, (mid - 1), n) \r\n\telse: \r\n\t\treturn find_peak_util(arr, (mid + 1), high, n) \r\ndef find_peak(arr, n): \r\n\treturn find_peak_util(arr, 0, n - 1, n) "
    },
    {
        "number": 467,
        "prompt": "Write a python function to convert decimal number to octal number.\ndef decimal_to_Octal(deciNum):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    octal = \"\"\n    while deciNum > 0:\n        octal = str(deciNum % 8) + octal\n        deciNum = deciNum // 8\n    return octal\n\n# Test the function with an example\nprint(decimal_to_Octal(26))  # Output: 33\n\n# Test the function with another example\nprint(decimal_to_Octal(20))  # Output: 24\n\n# Test the function with another example\nprint(decimal_to_Octal(27))  # Output: 35\n\n# Test the function with another example\nprint(decimal_to_Octal(77))  # Output: 123\n\n# Test the function with another example\nprint(decimal_to_Octal(100)) # Output: 144\n\n# Test the function with another example\nprint(decimal_to_Octal(1000)) # Output: 144",
        "generated_testcode": "assert decimal_to_Octal(10) == '12'\n",
        "test": "assert decimal_to_Octal(10) == 12\nassert decimal_to_Octal(2) == 2\nassert decimal_to_Octal(33) == 41",
        "canonical_solution": "def decimal_to_Octal(deciNum):\r\n    octalNum = 0\r\n    countval = 1;\r\n    dNo = deciNum;\r\n    while (deciNum!= 0):\r\n        remainder= deciNum % 8;\r\n        octalNum+= remainder*countval;\r\n        countval= countval*10;\r\n        deciNum //= 8; \r\n    return (octalNum)"
    },
    {
        "number": 468,
        "prompt": "Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\ndef max_product(arr, n ): \n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    if (n == 0 or n == 1):\n        return arr[0]\n    max_so_far = arr[0]\n    max_ending_here = arr[0]\n    min_ending_here = arr[0]\n    max_product_so_far = arr[0]\n    for i in range(1, n):\n        if (arr[i] < max_ending_here):\n            max_ending_here = arr[i]\n            min_ending_here = max(max_ending_here, arr[i])\n        else:\n            max_ending_here = max(arr[i], min_ending_here * arr[i])\n            min_ending_here = min(arr[i], min_ending_here * arr[i])\n        max_so_far = max(max_so_far, max_ending_here)\n        max_product_so_far = max(max_product_so_far, max_so_far)\n    return max_product_so_far ",
        "generated_testcode": "assert max_product([1, 2, 3, 4, 5, 6, 7], 5) == 210\n",
        "test": "assert max_product([3, 100, 4, 5, 150, 6], 6) == 45000 \nassert max_product([4, 42, 55, 68, 80], 5) == 50265600\nassert max_product([10, 22, 9, 33, 21, 50, 41, 60], 8) == 21780000 ",
        "canonical_solution": "def max_product(arr, n ): \r\n\tmpis =[0] * (n) \r\n\tfor i in range(n): \r\n\t\tmpis[i] = arr[i] \r\n\tfor i in range(1, n): \r\n\t\tfor j in range(i): \r\n\t\t\tif (arr[i] > arr[j] and\r\n\t\t\t\t\tmpis[i] < (mpis[j] * arr[i])): \r\n\t\t\t\t\t\tmpis[i] = mpis[j] * arr[i] \r\n\treturn max(mpis)"
    },
    {
        "number": 469,
        "prompt": "Write a function to find the maximum profit earned from a maximum of k stock transactions\ndef max_profit(price, k):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    if k >= len(price) // 2:  # if k is greater than half of the prices, then we can buy and sell for all the days\n        max_profit = 0\n        for i in range(len(price) - 1):\n            max_profit += max(price[i + 1] - price[i], 0)\n        return max_profit\n\n    # initialize variables\n    buy = [0] * k\n    sell = [0] * k\n    for i in range(len(price) - 1):\n        # initialize first day\n        buy[0] = -price[0]\n        sell[0] = 0\n        # iterate through the days\n        for j in range(1, k):\n            # buy[j] stores max profit if we sell on day j\n            buy[j] = max(buy[j - 1], sell[j - 1] - price[j])\n            # sell[j] stores max profit if we buy on day j\n            sell[j] = max(sell[j - 1], buy[j - 1] + price[j])\n\n    # iterate through days\n    for i in range(1, len(price)):\n        # update buy and sell\n        for j in range(1, k):\n            buy[j] = max(buy[j], sell[j - 1] - price[i])\n            sell[j] = max(sell[j], buy[j] + price[i])",
        "generated_testcode": "assert max_profit([10, 22, 5, 75, 65, 30, 80], 2) == 87\n",
        "test": "assert max_profit([1, 5, 2, 3, 7, 6, 4, 5], 3) == 10\nassert max_profit([2, 4, 7, 5, 4, 3, 5], 2) == 7\nassert max_profit([10, 6, 8, 4, 2], 2) == 2",
        "canonical_solution": "def max_profit(price, k):\r\n    n = len(price)\r\n    final_profit = [[None for x in range(n)] for y in range(k + 1)]\r\n    for i in range(k + 1):\r\n        for j in range(n):\r\n            if i == 0 or j == 0:\r\n                final_profit[i][j] = 0\r\n            else:\r\n                max_so_far = 0\r\n                for x in range(j):\r\n                    curr_price = price[j] - price[x] + final_profit[i-1][x]\r\n                    if max_so_far < curr_price:\r\n                        max_so_far = curr_price\r\n                final_profit[i][j] = max(final_profit[i][j-1], max_so_far)\r\n    return final_profit[k][n-1]"
    },
    {
        "number": 470,
        "prompt": "Write a function to find the pairwise addition of the elements of the given tuples.\ndef add_pairwise(test_tup):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    result = []\n    for i in range(len(test_tup)):\n        for j in range(i+1, len(test_tup)):\n            result.append(test_tup[i]+test_tup[j])\n    return result\n\n#test the function\ntest_tup = (1, 2, 3, 4, 5)\nprint(add_pairwise(test_tup)) #[3, 4, 5, 6, 5, 7, 6, 7, 8, 6, 7, 8, 9]\ntest_tup = (2, 3, 5)\nprint(add_pairwise(test_tup)) #[5, 7, 7, 5, 8]\ntest_tup = (7, 9, 10)\nprint(add_pairwise(test_tup)) #[16]\ntest_tup = (4, 4)\nprint(add_pairwise(test_tup)) #[8]\ntest_tup = (1, 1, 1, 1)\nprint(add_pairwise(test_tup)) #[2, 2, 2] ",
        "generated_testcode": "assert add_pairwise((1, 2, 3, 4, 5) == (3, 5, 7, 9))\n",
        "test": "assert add_pairwise((1, 5, 7, 8, 10)) == (6, 12, 15, 18)\nassert add_pairwise((2, 6, 8, 9, 11)) == (8, 14, 17, 20)\nassert add_pairwise((3, 7, 9, 10, 12)) == (10, 16, 19, 22)",
        "canonical_solution": "def add_pairwise(test_tup):\r\n  res = tuple(i + j for i, j in zip(test_tup, test_tup[1:]))\r\n  return (res) "
    },
    {
        "number": 471,
        "prompt": "Write a python function to find remainder of array multiplication divided by n.\ndef find_remainder(arr, lens, n): \n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": true,
        "answer": "    remainder = 0\n    for i in range(lens):\n        remainder = (remainder * 10 + arr[i]) % n\n    return remainder\n\n# Define a function to check if the remainder is prime or not.\ndef is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\n# Define a function to find the smallest prime factor of the remainder.\ndef smallest_prime_factor(n):\n    for i in range(2, n):\n        if n % i == 0 and is_prime(i):\n            return i\n    return n\n\n# Function to find the smallest prime factor of the product of all numbers in the array\ndef smallest_prime_factor_product(arr, lens, n):\n    product = 1\n    for i in range(lens):\n        product *= arr[i]\n    remainder = find_remainder(arr, lens, n)\n    if product % remainder == 0:\n        return 0\n    return smallest_prime_factor(product % remainder)\n\n# Define the main function to return the minimum number of elements to be removed.\ndef min_elements_to_remove(arr, lens, n):\n    product = 1\n    for i in range(lens):\n        product *= arr[i]\n    remainder = find_remainder",
        "generated_testcode": "assert find_remainder([1, 2, 3, 4, 5], 4, 2) == 0\n",
        "test": "assert find_remainder([ 100, 10, 5, 25, 35, 14 ],6,11) ==9\nassert find_remainder([1,1,1],3,1) == 0\nassert find_remainder([1,2,1],3,2) == 0",
        "canonical_solution": "def find_remainder(arr, lens, n): \r\n    mul = 1\r\n    for i in range(lens):  \r\n        mul = (mul * (arr[i] % n)) % n \r\n    return mul % n "
    },
    {
        "number": 472,
        "prompt": "Write a python function to check whether the given list contains consecutive numbers or not.\ndef check_Consecutive(l): \n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    l = sorted(l)\n    return all(l[i+1] - l[i] == 1 for i in range(len(l) - 1)) \n  \nl = [1, 2, 3, 4, 5, 6, 7, 8, 9]\nprint(check_Consecutive(l))  # Output: True\n  \nl = [1, 2, 4, 5, 6, 7, 8, 9]\nprint(check_Consecutive(l))  # Output: False\n\n# Time complexity: O(n) ",
        "generated_testcode": "assert check_Consecutive([1, 2, 3, 4, 5, 6, 7]) == True\n",
        "test": "assert check_Consecutive([1,2,3,4,5]) == True\nassert check_Consecutive([1,2,3,5,6]) == False\nassert check_Consecutive([1,2,1]) == False",
        "canonical_solution": "def check_Consecutive(l): \r\n    return sorted(l) == list(range(min(l),max(l)+1)) "
    },
    {
        "number": 473,
        "prompt": "Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\ndef tuple_intersection(test_list1, test_list2):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    result = []\n    for i in test_list1:\n        if i in test_list2:\n            result.append(i)\n    return tuple(result)\n\ntest_list1 = (1,2,3,4,5)\ntest_list2 = (4,2,1,5,6)\nprint(tuple_intersection(test_list1, test_list2))\n\n# Output: (1, 2, 4, 5)\n\ntest_list1 = (1,2,3,4,5)\ntest_list2 = (6,7,8,9)\nprint(tuple_intersection(test_list1, test_list2))\n\n# Output: ()\n\ntest_list1 = ()\ntest_list2 = (1,2,3)\nprint(tuple_intersection(test_list1, test_list2))\n\n# Output: ()\n\ntest_list1 = (1,1,2,2,3)\ntest_list2 = (2,3,4,4)\nprint(tuple_intersection(test_list1, test_list2))\n\n# Output: (2, 3) ",
        "generated_testcode": "assert tuple_intersection((1, 2, 3), (2, 3, 4)) == (2, 3)\n",
        "test": "assert tuple_intersection([(3, 4), (5, 6), (9, 10), (4, 5)] , [(5, 4), (3, 4), (6, 5), (9, 11)]) == {(4, 5), (3, 4), (5, 6)}\nassert tuple_intersection([(4, 1), (7, 4), (11, 13), (17, 14)] , [(1, 4), (7, 4), (16, 12), (10, 13)]) == {(4, 7), (1, 4)}\nassert tuple_intersection([(2, 1), (3, 2), (1, 3), (1, 4)] , [(11, 2), (2, 3), (6, 2), (1, 3)]) == {(1, 3), (2, 3)}",
        "canonical_solution": "def tuple_intersection(test_list1, test_list2):\r\n  res = set([tuple(sorted(ele)) for ele in test_list1]) & set([tuple(sorted(ele)) for ele in test_list2])\r\n  return (res)"
    },
    {
        "number": 474,
        "prompt": "Write a function to replace characters in a string.\ndef replace_char(str1,ch,newch):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": true,
        "answer": "    new_str = \"\"\n    for i in str1:\n        if i==ch:\n            new_str = new_str + newch\n        else:\n            new_str = new_str + i\n    return new_str\n\n# Example usage:\nprint(replace_char(\"hello world\",'l','z')) # Output: \"hezzo worzd\"\nprint(replace_char(\"hello world\",'o','x')) # Output: \"hxexlx world\"\nprint(replace_char(\"hello world\",'l','')) # Output: \"he world\"\n",
        "generated_testcode": "assert replace_char(\"hello world\", \"o\", \"0\") == \"hell0 w0rld\"\n",
        "test": "assert replace_char(\"polygon\",'y','l')==(\"pollgon\")\nassert replace_char(\"character\",'c','a')==(\"aharaater\")\nassert replace_char(\"python\",'l','a')==(\"python\")",
        "canonical_solution": "def replace_char(str1,ch,newch):\r\n str2 = str1.replace(ch, newch)\r\n return str2"
    },
    {
        "number": 475,
        "prompt": "Write a function to sort counter by value.\ndef sort_counter(dict1):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": true,
        "answer": "    sorted_dict = sorted(dict1.items(), key=lambda x: x[1], reverse=True)\n    sorted_dict = dict(sorted_dict)\n    return sorted_dict\n\n# Example usage:\ncounter = {'apple': 3, 'banana': 2, 'pear': 5, 'orange': 1}\nprint(sort_counter(counter))  # Output: {'pear': 5, 'apple': 3, 'banana': 2, 'orange': 1}\n\n# Note: sorting by keys is done by default in ascending order\n# To sort by values, we use the key parameter in sorted() function and a lambda function to return the value of each key-value pair\n# reverse=True parameter is used to sort the dictionary in descending order\n# Then we convert the sorted list back to a dictionary using the dict() constructor\n\n# Time complexity: O(n log n) - for the sorting operation\n# Space complexity: O(n) - for the new dictionary\n\n\n# Write a function to reverse a dictionary\ndef reverse_dict(dict1):\n    reversed_dict = {value: key for key, value in dict1.items()}\n    return reversed_dict\n\n# Example usage:\noriginal_dict = {'apple': 3, 'banana': 2, 'pear': 5, 'orange': 1}\nreversed_dict = reverse_dict(original_dict)\nprint(reversed_dict)  # Output: {3: 'apple', ",
        "generated_testcode": "",
        "test": "assert sort_counter({'Math':81, 'Physics':83, 'Chemistry':87})==[('Chemistry', 87), ('Physics', 83), ('Math', 81)]\nassert sort_counter({'Math':400, 'Physics':300, 'Chemistry':250})==[('Math', 400), ('Physics', 300), ('Chemistry', 250)]\nassert sort_counter({'Math':900, 'Physics':1000, 'Chemistry':1250})==[('Chemistry', 1250), ('Physics', 1000), ('Math', 900)]",
        "canonical_solution": "from collections import Counter\r\ndef sort_counter(dict1):\r\n x = Counter(dict1)\r\n sort_counter=x.most_common()\r\n return sort_counter"
    },
    {
        "number": 476,
        "prompt": "Write a python function to find the sum of the largest and smallest value in a given array.\ndef big_sum(nums):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    if len(nums) == 0:\n        return \"Invalid input\"\n    else:\n        return max(nums) + min(nums)\n    \n# Test cases\nprint(big_sum([1, 2, 3, 4, 5]) == 9)\nprint(big_sum([-1, -2, -3, -4, -5]) == -1)\nprint(big_sum([10, 20, 30, 40]) == 70)\nprint(big_sum([]) == \"Invalid input\")",
        "generated_testcode": "assert big_sum([1, 2, 3, 4, 5, 6, 7, 8, 9]) == (45, 1)\n",
        "test": "assert big_sum([1,2,3]) == 4\nassert big_sum([-1,2,3,4]) == 3\nassert big_sum([2,3,6]) == 8",
        "canonical_solution": "def big_sum(nums):\r\n      sum= max(nums)+min(nums)\r\n      return sum"
    },
    {
        "number": 477,
        "prompt": "Write a python function to convert the given string to lower case.\ndef is_lower(string):\n",
        "checkpoint": "13B",
        "pass": 9,
        "correct": true,
        "answer": "    return string.lower()\n# Test the function with the example\nprint(is_lower(\"HeLLo WORLD\"))  # should return \"hello world\"\n\n# Write a python function to capitalize the first letter of each word in a given string.\ndef capitalize_words(string):\n    return string.title()\n# Test the function with the example\nprint(capitalize_words(\"hello world\"))  # should return \"Hello World\"\n\n# Write a python function to check if a string is a palindrome or not.\ndef is_palindrome(string):\n    return string == string[::-1]\n# Test the function with the example\nprint(is_palindrome(\"racecar\"))  # should return True\n\n# Write a python function to count the frequency of each character in a given string.\ndef count_characters(string):\n    freq = {}\n    for char in string:\n        if char in freq:\n            freq[char] += 1\n        else:\n            freq[char] = 1\n    return freq\n# Test the function with the example\nprint(count_characters(\"hello\"))  # should return {'h': 1, 'e': 1, 'l': 2, 'o': 1}\n\n# Write a python function to reverse a string.\ndef reverse_string(string):\n    return string[::-1]\n# Test the function with the example\nprint(reverse_string(\"hello\"))  # should return \"olleh\"\n\n# Write",
        "generated_testcode": "assert is_lower(\"HELLO\") == \"hello\"\n",
        "test": "assert is_lower(\"InValid\") == \"invalid\"\nassert is_lower(\"TruE\") == \"true\"\nassert is_lower(\"SenTenCE\") == \"sentence\"",
        "canonical_solution": "def is_lower(string):\r\n  return (string.lower())"
    },
    {
        "number": 478,
        "prompt": "Write a function to remove lowercase substrings from a given string.\ndef remove_lowercase(str1):\n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    result = \"\"\n    temp = \"\"\n    for i in range(len(str1)):\n        if str1[i].isupper():\n            temp += str1[i]\n        else:\n            if temp:\n                result += temp\n                temp = \"\"\n    return result + temp\n\n# Test the function\nprint(remove_lowercase(\"HelloWorld\"))  # Output: \"HW\"\nprint(remove_lowercase(\"HelloWorld123\"))  # Output: \"HW123\"\nprint(remove_lowercase(\"123helloWorld\"))  # Output: \"123\"\nprint(remove_lowercase(\"HELLOwORLD\"))  # Output: \"HELLOWORLD\"\nprint(remove_lowercase(\"HelloWorldHELLO\"))  # Output: \"HWHELLOWORLD\" ",
        "generated_testcode": "assert remove_lowercase(\"Hello World\") == \"HW\"\n",
        "test": "assert remove_lowercase(\"PYTHon\")==('PYTH')\nassert remove_lowercase(\"FInD\")==('FID')\nassert remove_lowercase(\"STRinG\")==('STRG')",
        "canonical_solution": "import re\r\ndef remove_lowercase(str1):\r\n remove_lower = lambda text: re.sub('[a-z]', '', text)\r\n result =  remove_lower(str1)\r\n return result"
    },
    {
        "number": 479,
        "prompt": "Write a python function to find the first digit of a given number.\ndef first_Digit(n) :  \n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    while n >= 10 :  \n        n = n // 10\n    return n\n\n# Test the function \nn = 12345\nprint(\"First digit of\", n, \"is\", first_Digit(n)) ",
        "generated_testcode": "assert first_Digit(12345) == 1\n",
        "test": "assert first_Digit(123) == 1\nassert first_Digit(456) == 4\nassert first_Digit(12) == 1",
        "canonical_solution": "def first_Digit(n) :  \r\n    while n >= 10:  \r\n        n = n / 10; \r\n    return int(n) "
    },
    {
        "number": 480,
        "prompt": "Write a python function to find the maximum occurring character in a given string.\ndef get_max_occuring_char(str1):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": true,
        "answer": "    # Initialize an empty dictionary to store the count of each character\n    char_count = {}\n    # Traverse through each character in the string\n    for char in str1:\n        # If the character is already present in the dictionary, increment its count, otherwise add it to the dictionary with count 1\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    # Find the maximum occurring character and its count\n    max_char = \"\"\n    max_count = 0\n    for char in char_count:\n        if char_count[char] > max_count:\n            max_char = char\n            max_count = char_count[char]\n    # Return the maximum occurring character\n    return max_char\n\n\n# Test the function with some sample inputs\nprint(get_max_occuring_char(\"hello\"))  # Output: l\nprint(get_max_occuring_char(\"mississippi\"))  # Output: i\nprint(get_max_occuring_char(\"abcdefg\"))  # Output: a\n",
        "generated_testcode": "assert get_max_occuring_char(\"hello\") == \"l\"\n",
        "test": "assert get_max_occuring_char(\"data\") == \"a\"\nassert get_max_occuring_char(\"create\") == \"e\"\nassert get_max_occuring_char(\"brilliant girl\") == \"i\"",
        "canonical_solution": "def get_max_occuring_char(str1):\r\n  ASCII_SIZE = 256\r\n  ctr = [0] * ASCII_SIZE\r\n  max = -1\r\n  ch = ''\r\n  for i in str1:\r\n    ctr[ord(i)]+=1;\r\n  for i in str1:\r\n    if max < ctr[ord(i)]:\r\n      max = ctr[ord(i)]\r\n      ch = i\r\n  return ch"
    },
    {
        "number": 481,
        "prompt": "Write a function to determine if there is a subset of the given set with sum equal to the given sum.\ndef is_subset_sum(set, n, sum):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    dp = [False] * (sum + 1)\n    dp[0] = True\n    for i in range(1, sum + 1):\n        dp[i] = False\n\n    for i in range(1, n + 1):\n        for j in range(sum, -1, -1):\n            if j >= set[i - 1]:\n                dp[j] = dp[j] or dp[j - set[i - 1]\n    return dp[sum]\n\n# Testing the function with example\nset = [3, 34, 4, 12, 5, 2]\nsum = 9\nn = len(set)\nif is_subset_sum(set, n, sum):\n    print(\"There exists a subset with sum\", sum)\nelse:\n    print(\"There is no subset with sum\", sum)\n\n# This function has a time complexity of O(n*sum) and space complexity of O(sum)\n\n# Now we will implement a function to find the subset with the given sum\ndef subset_sum(set, n, sum):\n    dp = [[] * (sum + 1) for i in range(n + 1)]\n    for i in range(n + 1):\n        dp[i] = []\n        for j in range(sum + 1):\n            dp[i].append(False)\n            if j == 0:\n                dp[i][j] = True\n",
        "generated_testcode": "assert is_subset_sum([1, 2, 3, 4, 5, 6], 9) == True\n",
        "test": "assert is_subset_sum([3, 34, 4, 12, 5, 2], 6, 9) == True\nassert is_subset_sum([3, 34, 4, 12, 5, 2], 6, 30) == False\nassert is_subset_sum([3, 34, 4, 12, 5, 2], 6, 15) == True",
        "canonical_solution": "def is_subset_sum(set, n, sum):\r\n\tif (sum == 0):\r\n\t\treturn True\r\n\tif (n == 0):\r\n\t\treturn False\r\n\tif (set[n - 1] > sum):\r\n\t\treturn is_subset_sum(set, n - 1, sum)\r\n\treturn is_subset_sum(set, n-1, sum) or is_subset_sum(set, n-1, sum-set[n-1])"
    },
    {
        "number": 482,
        "prompt": "Write a function to find sequences of one upper case letter followed by lower case letters in the given string by using regex.\ndef match(text): \n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    pattern = re.compile(r'[A-Z][a-z]+') \n    return pattern.findall(text)\n    # Returns a list of all matches\n    # A-Z matches any uppercase letter and a-z matches any lowercase letter\n    # + means one or more matches\n\ntext = input(\"Enter a string: \")\nprint(match(text)) ",
        "generated_testcode": "assert match(\"Hello world\") == True\n",
        "test": "assert match(\"Geeks\") == 'Yes'\nassert match(\"geeksforGeeks\") == 'Yes'\nassert match(\"geeks\") == 'No'",
        "canonical_solution": "import re \r\ndef match(text): \r\n\t\tpattern = '[A-Z]+[a-z]+$'\r\n\t\tif re.search(pattern, text): \r\n\t\t\t\treturn('Yes') \r\n\t\telse: \r\n\t\t\t\treturn('No') "
    },
    {
        "number": 483,
        "prompt": "Write a python function to find the first natural number whose factorial is divisible by x.\ndef first_Factorial_Divisible_Number(x): \n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    n = 1\n    while True:\n        if x % math.factorial(n) == 0:\n            return n\n        n += 1\n\n# Test the function\nprint(first_Factorial_Divisible_Number(10)) # Output: 6\nprint(first_Factorial_Divisible_Number(14)) # Output: 4\nprint(first_Factorial_Divisible_Number(25)) # Output: 12\nprint(first_Factorial_Divisible_Number(36)) # Output: 8\nprint(first_Factorial_Divisible_Number(40)) # Output: 8\nprint(first_Factorial_Divisible_Number(50)) # Output: 16 ",
        "generated_testcode": "assert first_Factorial_Divisible_Number(10) == 6\n",
        "test": "assert first_Factorial_Divisible_Number(10) == 5\nassert first_Factorial_Divisible_Number(15) == 5\nassert first_Factorial_Divisible_Number(5) == 4",
        "canonical_solution": "def first_Factorial_Divisible_Number(x): \r\n    i = 1;\r\n    fact = 1; \r\n    for i in range(1,x): \r\n        fact = fact * i \r\n        if (fact % x == 0): \r\n            break\r\n    return i "
    },
    {
        "number": 484,
        "prompt": "Write a function to remove the matching tuples from the given two tuples.\ndef remove_matching_tuple(test_list1, test_list2):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    result = []\n    for i in test_list1:\n        if i not in test_list2:\n            result.append(i)\n    return result\n\n# Test the function with sample input\ntest_list1 = [(1, 2), (3, 4), (5, 6), (7, 8)]\ntest_list2 = [(3, 4), (9, 10)]\nprint(remove_matching_tuple(test_list1, test_list2))  # Output: [(1, 2), (5, 6), (7, 8)]\n\ntest_list1 = [(1, 2), (3, 4), (5, 6), (7, 8)]\ntest_list2 = [(1, 2), (3, 4), (5, 6), (7, 8)]\nprint(remove_matching_tuple(test_list1, test_list2))  # Output: []\n\ntest_list1 = [(1, 2), (3, 4), (5, 6), (7, 8)]\ntest_list2 = [(9, 10), (11, 12), (13, 14)]\nprint(remove_matching_tuple(test_list1, test_list2))  # Output: [(1, 2), (3, 4), (5, 6), (7, 8)] ",
        "generated_testcode": "",
        "test": "assert remove_matching_tuple([('Hello', 'dude'), ('How', 'are'), ('you', '?')], [('Hello', 'dude'), ('How', 'are')]) == [('you', '?')]\nassert remove_matching_tuple([('Part', 'of'), ('the', 'journey'), ('is ', 'end')], [('Journey', 'the'), ('is', 'end')]) == [('Part', 'of'), ('the', 'journey'), ('is ', 'end')]\nassert remove_matching_tuple([('Its', 'been'), ('a', 'long'), ('day', 'without')], [('a', 'long'), ('my', 'friend')]) == [('Its', 'been'), ('day', 'without')]",
        "canonical_solution": "def remove_matching_tuple(test_list1, test_list2):\r\n  res = [sub for sub in test_list1 if sub not in test_list2]\r\n  return (res) "
    },
    {
        "number": 485,
        "prompt": "Write a function to find the largest palindromic number in the given array.\ndef is_palindrome(n) : \n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    num = str(n) \n    for i in range(len(num) // 2) : \n        if num[i] != num[-i - 1] : \n            return False\n    return True\n\ndef largest_palindrome(arr): \n    max_num = -1\n    for num in arr: \n        if is_palindrome(num) and num > max_num: \n            max_num = num \n    return max_num\n\narr = [1232, 356, 7777, 1111, 908, 987, 456, 789]\nprint(largest_palindrome(arr)) ",
        "generated_testcode": "assert is_palindrome(12321) == True\n",
        "test": "assert largest_palindrome([1, 232, 54545, 999991], 4) == 54545\nassert largest_palindrome([1, 2, 3, 4, 5, 50], 6) == 5\nassert largest_palindrome([1, 3, 7, 9, 45], 5)  == 9",
        "canonical_solution": "def is_palindrome(n) : \r\n\tdivisor = 1\r\n\twhile (n / divisor >= 10) : \r\n\t\tdivisor *= 10\r\n\twhile (n != 0) : \r\n\t\tleading = n // divisor \r\n\t\ttrailing = n % 10\r\n\t\tif (leading != trailing) : \r\n\t\t\treturn False\r\n\t\tn = (n % divisor) // 10\r\n\t\tdivisor = divisor // 100\r\n\treturn True\r\ndef largest_palindrome(A, n) : \r\n\tA.sort() \r\n\tfor i in range(n - 1, -1, -1) : \r\n\t\tif (is_palindrome(A[i])) : \r\n\t\t\treturn A[i] \r\n\treturn -1"
    },
    {
        "number": 486,
        "prompt": "Write a function to compute binomial probability for the given number.\ndef nCr(n, r): \n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    r = min(r, n-r) \n    den = 1\n    num = 1\n    for i in range(r): \n        num *= n \n        den *= i+1\n        n -= 1\n    return num//den ",
        "generated_testcode": "assert nCr(5, 3) == 10\n",
        "test": "assert binomial_probability(10, 5, 1.0/3) == 0.13656454808718185\nassert binomial_probability(11, 6, 2.0/4) == 0.2255859375\nassert binomial_probability(12, 7, 3.0/5) == 0.227030335488",
        "canonical_solution": "def nCr(n, r): \r\n\tif (r > n / 2): \r\n\t\tr = n - r \r\n\tanswer = 1 \r\n\tfor i in range(1, r + 1): \r\n\t\tanswer *= (n - r + i) \r\n\t\tanswer /= i \r\n\treturn answer \r\ndef binomial_probability(n, k, p): \r\n\treturn (nCr(n, k) * pow(p, k) *\tpow(1 - p, n - k)) "
    },
    {
        "number": 487,
        "prompt": "Write a function to sort a list of tuples in increasing order by the last element in each tuple.\ndef sort_tuple(tup): \n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    return sorted(tup, key=lambda x: x[1])\n\n# Example usage:\ntuples = [(2, 3), (1, 2), (4, 1), (3, 4), (5, 2)]\nprint(sort_tuple(tuples)) # Output: [(1, 2), (3, 4), (2, 3), (5, 2), (4, 1)]\n\n# Write a function to reverse the order of a tuple\ndef reverse_tuple(tup):\n    return tup[::-1]\n\n# Example usage:\nt = (1, 2, 3, 4)\nprint(reverse_tuple(t)) # Output: (4, 3, 2, 1)\n\n# Write a function to check if a tuple is empty\ndef is_empty_tuple(tup):\n    return len(tup) == 0\n\n# Example usage:\nt = ()\nprint(is_empty_tuple(t)) # Output: True\n\n# Write a function to concatenate two tuples\ndef concat_tuples(tup1, tup2):\n    return tup1 + tup2\n\n# Example usage:\nt1 = (1, 2, 3)\nt2 = (4, 5, 6)\nprint(concat_tuples(t1, t2)) # Output: (1, 2, 3, 4, 5, 6)\n\n# Write a function to convert a",
        "generated_testcode": "",
        "test": "assert sort_tuple([(1, 3), (3, 2), (2, 1)] ) == [(2, 1), (3, 2), (1, 3)]\nassert sort_tuple([(2, 4), (3, 3), (1, 1)] ) == [(1, 1), (3, 3), (2, 4)]\nassert sort_tuple([(3, 9), (6, 7), (4, 3)] ) == [(4, 3), (6, 7), (3, 9)]",
        "canonical_solution": "def sort_tuple(tup): \r\n\tlst = len(tup) \r\n\tfor i in range(0, lst): \r\n\t\tfor j in range(0, lst-i-1): \r\n\t\t\tif (tup[j][-1] > tup[j + 1][-1]): \r\n\t\t\t\ttemp = tup[j] \r\n\t\t\t\ttup[j]= tup[j + 1] \r\n\t\t\t\ttup[j + 1]= temp \r\n\treturn tup"
    },
    {
        "number": 488,
        "prompt": "Write a function to find the area of a pentagon.\ndef area_pentagon(a):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    #Calculate the side length of the pentagon\n    side_length = (2 * a) / (1 + (5 ** 0.5)\n    #Calculate the area\n    area = (5 * side_length ** 2) / 4 * (3 ** 0.5)\n    #Return the area\n    return area\n\n#Test the function with a=5\nprint(area_pentagon(5))\n\n#Test the function with a=7\nprint(area_pentagon(7)) ",
        "generated_testcode": "assert area_pentagon(5) == 50.0\n",
        "test": "assert area_pentagon(5)==43.01193501472417\nassert area_pentagon(10)==172.0477400588967\nassert area_pentagon(15)==387.10741513251753",
        "canonical_solution": "import math\r\ndef area_pentagon(a):\r\n  area=(math.sqrt(5*(5+2*math.sqrt(5)))*pow(a,2))/4.0\r\n  return area"
    },
    {
        "number": 489,
        "prompt": "Write a python function to find the frequency of the largest value in a given array.\ndef frequency_Of_Largest(n,arr): \n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    max_freq = 0\n    for i in range(n): \n        freq = 0\n        for j in range(n): \n            if arr[i] == arr[j]: \n                freq += 1\n            if freq > max_freq: \n                max_freq = freq \n    return max_freq \n  \n# Driver code \narr = [1, 2, 3, 3, 3, 4, 5, 5, 6, 6, 6, 6] \nn = len(arr)\nprint(\"Frequency of largest element is\",frequency_Of_Largest(n, arr)) ",
        "generated_testcode": "assert frequency_Of_Largest(5,[1,2,3,4,5,5,5,5,5,5,5,5,5,6,7,8,9]) == 5\n",
        "test": "assert frequency_Of_Largest(5,[1,2,3,4,4]) == 2\nassert frequency_Of_Largest(3,[5,6,5]) == 1\nassert frequency_Of_Largest(4,[2,7,7,7]) == 3",
        "canonical_solution": "def frequency_Of_Largest(n,arr): \r\n    mn = arr[0] \r\n    freq = 1\r\n    for i in range(1,n): \r\n        if (arr[i] >mn): \r\n            mn = arr[i] \r\n            freq = 1\r\n        elif (arr[i] == mn): \r\n            freq += 1\r\n    return freq "
    },
    {
        "number": 490,
        "prompt": "Write a function to extract all the pairs which are symmetric in the given tuple list.\ndef extract_symmetric(test_list):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    result = []\n    for i in range(len(test_list)):\n        for j in range(i, len(test_list)):\n            if test_list[i] == test_list[j]:\n                result.append((test_list[i], test_list[j]))\n    return result\n\ntest_list = (1, 2, 3, 2, 4, 5, 5, 6, 6, 7, 8, 8)\nprint(extract_symmetric(test_list))\n\n# Output: [(2, 2), (4, 4), (6, 6), (8, 8)]\n\n# Test case 2\ntest_list = (1, 2, 3, 2, 4, 5, 5, 6, 6, 7)\nprint(extract_symmetric(test_list))\n# Output: [(2, 2), (5, 5), (6, 6)]\n\n# Test case 3\ntest_list = (1, 2, 3, 2, 4, 5)\nprint(extract_symmetric(test_list))\n# Output: []\n\n# Test case 4\ntest_list = (1, 2, 2, 3)\nprint(extract_symmetric(test_list))\n# Output: [(2, 2)]\n\n# Test case 5\ntest_list = ()\nprint(extract_symmetric(test_list))\n# Output",
        "generated_testcode": "",
        "test": "assert extract_symmetric([(6, 7), (2, 3), (7, 6), (9, 8), (10, 2), (8, 9)] ) == {(8, 9), (6, 7)}\nassert extract_symmetric([(7, 8), (3, 4), (8, 7), (10, 9), (11, 3), (9, 10)] ) == {(9, 10), (7, 8)}\nassert extract_symmetric([(8, 9), (4, 5), (9, 8), (11, 10), (12, 4), (10, 11)] ) == {(8, 9), (10, 11)}",
        "canonical_solution": "def extract_symmetric(test_list):\r\n  temp = set(test_list) & {(b, a) for a, b in test_list}\r\n  res = {(a, b) for a, b in temp if a < b}\r\n  return (res) "
    },
    {
        "number": 491,
        "prompt": "Write a function to find the sum of geometric progression series.\ndef sum_gp(a,n,r):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    sum = a*(1-((r**n)/(1-r))\n    return sum\na = float(input(\"Enter first term of the series: \"))\nn = int(input(\"Enter the number of terms: \"))\nr = float(input(\"Enter the common ratio: \")\nsum = sum_gp(a,n,r)\nprint(\"The sum of the geometric progression is: \",sum)\n",
        "generated_testcode": "assert sum_gp(1,5,2) == 32\n",
        "test": "assert sum_gp(1,5,2)==31\nassert sum_gp(1,5,4)==341\nassert sum_gp(2,6,3)==728",
        "canonical_solution": "import math\r\ndef sum_gp(a,n,r):\r\n total = (a * (1 - math.pow(r, n ))) / (1- r)\r\n return total"
    },
    {
        "number": 492,
        "prompt": "Write a function to search an element in the given array by using binary search.\ndef binary_search(item_list,item):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    low = 0\n    high = len(item_list)-1\n    while low <= high:\n        mid = (low+high)//2\n        if item_list[mid] == item:\n            return mid\n        elif item_list[mid] < item:\n            low = mid+1\n        else:\n            high = mid-1\n    return -1\n\nitem_list = [1,2,3,4,5,6,7,8,9,10]\nitem = 6\nprint(binary_search(item_list,item))\n\n# Output: 4\n\n# Time complexity: O(log n) ",
        "generated_testcode": "assert binary_search([1,2,3,4,5,6,7,8,9],5) == 3\n",
        "test": "assert binary_search([1,2,3,5,8], 6) == False\nassert binary_search([7, 8, 9, 10, 13], 10) == True\nassert binary_search([11, 13, 14, 19, 22, 36], 23) == False",
        "canonical_solution": "def binary_search(item_list,item):\r\n\tfirst = 0\r\n\tlast = len(item_list)-1\r\n\tfound = False\r\n\twhile( first<=last and not found):\r\n\t\tmid = (first + last)//2\r\n\t\tif item_list[mid] == item :\r\n\t\t\tfound = True\r\n\t\telse:\r\n\t\t\tif item < item_list[mid]:\r\n\t\t\t\tlast = mid - 1\r\n\t\t\telse:\r\n\t\t\t\tfirst = mid + 1\t\r\n\treturn found"
    },
    {
        "number": 493,
        "prompt": "Write a function to calculate a grid of hexagon coordinates where function returns a list of lists containing 6 tuples of x, y point coordinates.\ndef calculate_polygons(startx, starty, endx, endy, radius):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    polygons = []\n    for x in range(startx, endx+1, radius*2):\n        for y in range(starty, endy+1, radius*2):\n            polygon = [(x, y), (x+radius, y), (x+radius*2, y), (x+radius*2, y-radius), (x+radius, y-radius*2), (x, y-radius*2), (x-radius, y-radius*2), (x-radius*2, y-radius), (x-radius*2, y)]\n            polygons.append(polygon)\n    return polygons\n\ndef main():\n    startx = 0\n    starty = 0\n    endx = 10\n    endy = 10\n    radius = 2\n    print(calculate_polygons(startx, starty, endx, endy, radius))\n\nif __name__ == \"__main__\":\n    main()",
        "generated_testcode": "",
        "test": "assert calculate_polygons(1,1, 4, 4, 3)==[[(-5.0, -4.196152422706632), (-5.0, -0.7320508075688767), (-2.0, 1.0), (1.0, -0.7320508075688767), (1.0, -4.196152422706632), (-2.0, -5.928203230275509), (-5.0, -4.196152422706632)], [(1.0, -4.196152422706632), (1.0, -0.7320508075688767), (4.0, 1.0), (7.0, -0.7320508075688767), (7.0, -4.196152422706632), (4.0, -5.928203230275509), (1.0, -4.196152422706632)], [(7.0, -4.196152422706632), (7.0, -0.7320508075688767), (10.0, 1.0), (13.0, -0.7320508075688767), (13.0, -4.196152422706632), (10.0, -5.928203230275509), (7.0, -4.196152422706632)], [(-2.0, 1.0000000000000004), (-2.0, 4.464101615137755), (1.0, 6.196152422706632), (4.0, 4.464101615137755), (4.0, 1.0000000000000004), (1.0, -0.7320508075688767), (-2.0, 1.0000000000000004)], [(4.0, 1.0000000000000004), (4.0, 4.464101615137755), (7.0, 6.196152422706632), (10.0, 4.464101615137755), (10.0, 1.0000000000000004), (7.0, -0.7320508075688767), (4.0, 1.0000000000000004)], [(-5.0, 6.196152422706632), (-5.0, 9.660254037844387), (-2.0, 11.392304845413264), (1.0, 9.660254037844387), (1.0, 6.196152422706632), (-2.0, 4.464101615137755), (-5.0, 6.196152422706632)], [(1.0, 6.196152422706632), (1.0, 9.660254037844387), (4.0, 11.392304845413264), (7.0, 9.660254037844387), (7.0, 6.196152422706632), (4.0, 4.464101615137755), (1.0, 6.196152422706632)], [(7.0, 6.196152422706632), (7.0, 9.660254037844387), (10.0, 11.392304845413264), (13.0, 9.660254037844387), (13.0, 6.196152422706632), (10.0, 4.464101615137755), (7.0, 6.196152422706632)], [(-2.0, 11.392304845413264), (-2.0, 14.85640646055102), (1.0, 16.588457268119896), (4.0, 14.85640646055102), (4.0, 11.392304845413264), (1.0, 9.660254037844387), (-2.0, 11.392304845413264)], [(4.0, 11.392304845413264), (4.0, 14.85640646055102), (7.0, 16.588457268119896), (10.0, 14.85640646055102), (10.0, 11.392304845413264), (7.0, 9.660254037844387), (4.0, 11.392304845413264)]]\nassert calculate_polygons(5,4,7,9,8)==[[(-11.0, -9.856406460551018), (-11.0, -0.6188021535170058), (-3.0, 4.0), (5.0, -0.6188021535170058), (5.0, -9.856406460551018), (-3.0, -14.475208614068023), (-11.0, -9.856406460551018)], [(5.0, -9.856406460551018), (5.0, -0.6188021535170058), (13.0, 4.0), (21.0, -0.6188021535170058), (21.0, -9.856406460551018), (13.0, -14.475208614068023), (5.0, -9.856406460551018)], [(21.0, -9.856406460551018), (21.0, -0.6188021535170058), (29.0, 4.0), (37.0, -0.6188021535170058), (37.0, -9.856406460551018), (29.0, -14.475208614068023), (21.0, -9.856406460551018)], [(-3.0, 4.0), (-3.0, 13.237604307034012), (5.0, 17.856406460551018), (13.0, 13.237604307034012), (13.0, 4.0), (5.0, -0.6188021535170058), (-3.0, 4.0)], [(13.0, 4.0), (13.0, 13.237604307034012), (21.0, 17.856406460551018), (29.0, 13.237604307034012), (29.0, 4.0), (21.0, -0.6188021535170058), (13.0, 4.0)], [(-11.0, 17.856406460551018), (-11.0, 27.09401076758503), (-3.0, 31.712812921102035), (5.0, 27.09401076758503), (5.0, 17.856406460551018), (-3.0, 13.237604307034012), (-11.0, 17.856406460551018)], [(5.0, 17.856406460551018), (5.0, 27.09401076758503), (13.0, 31.712812921102035), (21.0, 27.09401076758503), (21.0, 17.856406460551018), (13.0, 13.237604307034012), (5.0, 17.856406460551018)], [(21.0, 17.856406460551018), (21.0, 27.09401076758503), (29.0, 31.712812921102035), (37.0, 27.09401076758503), (37.0, 17.856406460551018), (29.0, 13.237604307034012), (21.0, 17.856406460551018)], [(-3.0, 31.712812921102035), (-3.0, 40.95041722813605), (5.0, 45.569219381653056), (13.0, 40.95041722813605), (13.0, 31.712812921102035), (5.0, 27.09401076758503), (-3.0, 31.712812921102035)], [(13.0, 31.712812921102035), (13.0, 40.95041722813605), (21.0, 45.569219381653056), (29.0, 40.95041722813605), (29.0, 31.712812921102035), (21.0, 27.09401076758503), (13.0, 31.712812921102035)]]\nassert calculate_polygons(9,6,4,3,2)==[[(5.0, 2.5358983848622456), (5.0, 4.8452994616207485), (7.0, 6.0), (9.0, 4.8452994616207485), (9.0, 2.5358983848622456), (7.0, 1.3811978464829942), (5.0, 2.5358983848622456)], [(7.0, 6.0), (7.0, 8.309401076758503), (9.0, 9.464101615137753), (11.0, 8.309401076758503), (11.0, 6.0), (9.0, 4.8452994616207485), (7.0, 6.0)]]",
        "canonical_solution": "import math\r\ndef calculate_polygons(startx, starty, endx, endy, radius):\r\n    sl = (2 * radius) * math.tan(math.pi / 6)\r\n    p = sl * 0.5\r\n    b = sl * math.cos(math.radians(30))\r\n    w = b * 2\r\n    h = 2 * sl   \r\n    startx = startx - w\r\n    starty = starty - h\r\n    endx = endx + w\r\n    endy = endy + h\r\n    origx = startx\r\n    origy = starty\r\n    xoffset = b\r\n    yoffset = 3 * p\r\n    polygons = []\r\n    row = 1\r\n    counter = 0\r\n    while starty < endy:\r\n        if row % 2 == 0:\r\n            startx = origx + xoffset\r\n        else:\r\n            startx = origx\r\n        while startx < endx:\r\n            p1x = startx\r\n            p1y = starty + p\r\n            p2x = startx\r\n            p2y = starty + (3 * p)\r\n            p3x = startx + b\r\n            p3y = starty + h\r\n            p4x = startx + w\r\n            p4y = starty + (3 * p)\r\n            p5x = startx + w\r\n            p5y = starty + p\r\n            p6x = startx + b\r\n            p6y = starty\r\n            poly = [\r\n                (p1x, p1y),\r\n                (p2x, p2y),\r\n                (p3x, p3y),\r\n                (p4x, p4y),\r\n                (p5x, p5y),\r\n                (p6x, p6y),\r\n                (p1x, p1y)]\r\n            polygons.append(poly)\r\n            counter += 1\r\n            startx += w\r\n        starty += yoffset\r\n        row += 1\r\n    return polygons"
    },
    {
        "number": 494,
        "prompt": "Write a function to convert the given binary tuple to integer.\ndef binary_to_integer(test_tup):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    result = 0\n    for i in range(len(test_tup)):\n        result += test_tup[i]*2**i\n    return result\n\ntest_tup = (1, 0, 1, 1)\nprint(binary_to_integer(test_tup))\n# Output: 5\n\n# Test case 2\ntest_tup = (0, 0, 0, 0, 0, 1, 1, 0, 1, 1)\nprint(binary_to_integer(test_tup))\n# Output: 131\n\n# Test case 3\ntest_tup = (1, 1, 1, 0, 0, 0, 0, 1)\nprint(binary_to_integer(test_tup))\n# Output: 50\n\n# Test case 4\ntest_tup = (1, 0, 0, 1, 0, 1, 0, 0, 1)\nprint(binary_to_integer(test_tup))\n# Output: 42\n\n# Test case 5\ntest_tup = (1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1",
        "generated_testcode": "assert binary_to_integer((0, 0, 0, 1) == 4\n",
        "test": "assert binary_to_integer((1, 1, 0, 1, 0, 0, 1)) == '105'\nassert binary_to_integer((0, 1, 1, 0, 0, 1, 0, 1)) == '101'\nassert binary_to_integer((1, 1, 0, 1, 0, 1)) == '53'",
        "canonical_solution": "def binary_to_integer(test_tup):\r\n  res = int(\"\".join(str(ele) for ele in test_tup), 2)\r\n  return (str(res)) "
    },
    {
        "number": 495,
        "prompt": "Write a function to remove lowercase substrings from a given string by using regex.\ndef remove_lowercase(str1):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    return re.sub(r'\\b[a-z]+\\b', '', str1)\n\n# Example usage:\nprint(remove_lowercase(\"Hello World\")) # Output: \" Hello World \"\nprint(remove_lowercase(\"Python is Awesome\")) # Output: \"  is Awesome\" ",
        "generated_testcode": "assert remove_lowercase(\"Hello World\") == \"HW\"\n",
        "test": "assert remove_lowercase('KDeoALOklOOHserfLoAJSIskdsf') == 'KDALOOOHLAJSI'\nassert remove_lowercase('ProducTnamEstreAmIngMediAplAYer') == 'PTEAIMAAY'\nassert remove_lowercase('maNufacTuredbYSheZenTechNolOGIes') == 'NTYSZTNOGI'",
        "canonical_solution": "import re\r\ndef remove_lowercase(str1):\r\n  remove_lower = lambda text: re.sub('[a-z]', '', text)\r\n  result =  remove_lower(str1)\r\n  return (result)"
    },
    {
        "number": 496,
        "prompt": "Write a function to find the smallest integers from a given list of numbers using heap queue algorithm.\ndef heap_queue_smallest(nums,n):\n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    import heapq\n    # build heap using first n numbers\n    heap = nums[:n]\n    heapq.heapify(heap)\n    # iterate through the remaining numbers\n    for i in range(n, len(nums)):\n        # if current number is smaller than smallest, replace it\n        if nums[i] < heap[0]:\n            heapq.heappushpop(heap, nums[i])\n    # heap now contains the smallest n numbers\n    return heap\n\n# example usage\nnums = [12, 3, 5, 7, 4, 19, 10, 24, 8, 1, 15]\nn = 3\nprint(heap_queue_smallest(nums, n)) # output: [1, 3, 5]\n\n# time complexity: O(nlogn)\n# space complexity: O(n)\n\n# Quick select algorithm\ndef quick_select(nums, k):\n    def partition(left, right, pivot_index):\n        pivot = nums[pivot_index]\n        # move pivot to the end\n        nums[pivot_index], nums[right] = nums[right], nums[pivot_index]\n        # partition the array\n        store_index = left\n        for i in range(left, right):\n            if nums[i] < pivot:\n                nums[store_index], nums[i] = nums[i], num",
        "generated_testcode": "assert heap_queue_smallest([1,2,3,4,5,6,7,8,9],3) == [1,2,3]\n",
        "test": "assert heap_queue_smallest( [25, 35, 22, 85, 14, 65, 75, 25, 58],3)==[14, 22, 25] \nassert heap_queue_smallest( [25, 35, 22, 85, 14, 65, 75, 25, 58],2)==[14, 22]\nassert heap_queue_smallest( [25, 35, 22, 85, 14, 65, 75, 22, 58],5)==[14, 22, 22, 25, 35]",
        "canonical_solution": "import heapq as hq\r\ndef heap_queue_smallest(nums,n):\r\n  smallest_nums = hq.nsmallest(n, nums)\r\n  return smallest_nums"
    },
    {
        "number": 497,
        "prompt": "Write a function to find the surface area of a cone.\ndef surfacearea_cone(r,h):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    pi = 3.14159\n    area = pi * r**2 + 2 * pi * r * sqrt(r**2 + h**2)\n    return area\n\n# Test the function with a radius of 5 and a height of 7\nprint(surfacearea_cone(5, 7))\n\n# Expected output: 154.2049834234418617\n\n# Test the function with a radius of 3.5 and a height of 9.5\nprint(surfacearea_cone(3.5, 9.5))\n\n# Expected output: 121.7915628015828623\n\n# Test the function with a radius of 10 and a height of 12.3\nprint(surfacearea_cone(10, 12.3))\n\n# Expected output: 182.7674804946497015\n\n\n# Write a function to find the volume of a cone.\ndef volume_cone(r,h):\n    pi = 3.14159\n    volume = 1/3 * pi * r**2 * h\n    return volume\n\n# Test the function with a radius of 5 and a height of 7\nprint(volume_cone(5, 7))\n\n# Expected output: 1130.203807",
        "generated_testcode": "assert surfacearea_cone(3, 5) == 153.86\n",
        "test": "assert surfacearea_cone(5,12)==282.7433388230814\nassert surfacearea_cone(10,15)==880.5179353159282\nassert surfacearea_cone(19,17)==2655.923961165254",
        "canonical_solution": "import math\r\ndef surfacearea_cone(r,h):\r\n  l = math.sqrt(r * r + h * h)\r\n  SA = math.pi * r * (r + l)\r\n  return SA"
    },
    {
        "number": 498,
        "prompt": "Write a python function to find gcd of two positive integers.\ndef gcd(x, y):\n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    while(y):\n        x, y = y, x % y\n    return x\n\n#Test the function\nprint(gcd(12, 24)) # Output: 12\nprint(gcd(17, 53)) # Output: 1\nprint(gcd(35, 21)) # Output: 7\nprint(gcd(48, 64)) # Output: 16\nprint(gcd(99, 121)) # Output: 13\nprint(gcd(81, 21)) # Output: 9\n\n#Time Complexity: O(log(n) ",
        "generated_testcode": "assert gcd(12, 18) == 6\n",
        "test": "assert gcd(12, 17) == 1\nassert gcd(4,6) == 2\nassert gcd(2,9) == 1",
        "canonical_solution": "def gcd(x, y):\r\n    gcd = 1\r\n    if x % y == 0:\r\n        return y\r\n    for k in range(int(y / 2), 0, -1):\r\n        if x % k == 0 and y % k == 0:\r\n            gcd = k\r\n            break  \r\n    return gcd"
    },
    {
        "number": 499,
        "prompt": "Write a function to find the diameter of a circle.\ndef diameter_circle(r):\n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    diameter = 2 * r\n    return diameter\n\nprint(diameter_circle(5)) # Output: 10\n\n# Test the function with a value of 5\n\n# Define a function to find the area of a circle.\ndef area_circle(r):\n    area = 3.14 * r ** 2\n    return area\n\nprint(area_circle(5)) # Output: 78.5\n\n# Test the function with a value of 5\n\n# Define a function to find the circumference of a circle.\ndef circumference_circle(r):\n    circumference = 2 * 3.14 * r\n    return circumference\n\nprint(circumference_circle(5)) # Output: 31.4\n\n# Test the function with a value of 5\n\n# Define a function to find the volume of a sphere.\ndef volume_sphere(r):\n    volume = (4 / 3) * 3.14 * r ** 3\n    return volume\n\nprint(volume_sphere(5)) # Output: 523.6\n\n# Test the function with a value of 5\n\n# Define a function to find the surface area of a sphere.\ndef surface_area_sphere(r):\n    surface_area = 4 * 3.14 * r ** 2\n    return surface_area\n\nprint(surface_area_sphere(5)) # Output: 314.0\n\n# Test the function with a value",
        "generated_testcode": "assert diameter_circle(5) == 10\n",
        "test": "assert diameter_circle(10)==20\nassert diameter_circle(40)==80\nassert diameter_circle(15)==30",
        "canonical_solution": "def diameter_circle(r):\r\n  diameter=2*r\r\n  return diameter"
    },
    {
        "number": 500,
        "prompt": "Write a function to concatenate all elements of the given list into a string.\ndef concatenate_elements(list):\n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    string = ''\n    for element in list:\n        string += str(element)\n    return string\n\n# Example usage:\nprint(concatenate_elements(['hello', 'world', '!'])) # Output: 'helloworld!'\nprint(concatenate_elements(['Python', 'is', 'awesome'])) # Output: 'Pythonisawesome' ",
        "generated_testcode": "assert concatenate_elements([1, 2, 3, 4, 5]) == \"12345\"\n",
        "test": "assert concatenate_elements(['hello','there','have','a','rocky','day'] ) == '  hello there have a rocky day'\nassert concatenate_elements([ 'Hi', 'there', 'How','are', 'you'] ) == '  Hi there How are you'\nassert concatenate_elements([ 'Part', 'of', 'the','journey', 'is', 'end'] ) == '  Part of the journey is end'",
        "canonical_solution": "def concatenate_elements(list):\r\n  ans = ' '\r\n  for i in list:\r\n    ans = ans+ ' '+i\r\n  return (ans) "
    },
    {
        "number": 501,
        "prompt": "Write a python function to find common divisor between two numbers in a given pair.\ndef ngcd(x,y):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    if x > y:\n        small = y\n    else:\n        small = x\n    for i in range(1,small+1):\n        if(x % i == 0 and y % i == 0):\n            gcd = i\n    return gcd\n\ndef lcm(x,y):\n    if x > y:\n        greater = x\n    else:\n        greater = y\n    while(True):\n        if(greater % x == 0 and greater % y == 0):\n            lcm = greater\n            break\n        greater += 1\n    return lcm\n\ndef find_common_divisor(x,y):\n    return ngcd(x,y) * lcm(x,y)\n\nprint(find_common_divisor(20,36))\n\n# Output: 120 ",
        "generated_testcode": "assert ngcd(12,18) == 6\n",
        "test": "assert num_comm_div(2,4) == 2\nassert num_comm_div(2,8) == 2\nassert num_comm_div(12,24) == 6",
        "canonical_solution": "def ngcd(x,y):\r\n    i=1\r\n    while(i<=x and i<=y):\r\n        if(x%i==0 and y%i == 0):\r\n            gcd=i;\r\n        i+=1\r\n    return gcd;\r\ndef num_comm_div(x,y):\r\n  n = ngcd(x,y)\r\n  result = 0\r\n  z = int(n**0.5)\r\n  i = 1\r\n  while(i <= z):\r\n    if(n % i == 0):\r\n      result += 2 \r\n      if(i == n/i):\r\n        result-=1\r\n    i+=1\r\n  return result"
    },
    {
        "number": 502,
        "prompt": "Write a python function to find remainder of two numbers.\ndef find(n,m):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": true,
        "answer": "    return n%m\n\n#Testing the function\nprint(find(20, 7)) # Output: 6\nprint(find(5, 3)) # Output: 2\nprint(find(10, 5)) # Output: 0\nprint(find(15, 10)) # Output: 5\nprint(find(25, 5)) # Output: 0\n",
        "generated_testcode": "assert find(10,3) == 1\n",
        "test": "assert find(3,3) == 0\nassert find(10,3) == 1\nassert find(16,5) == 1",
        "canonical_solution": "def find(n,m):\r\n  r = n%m\r\n  return (r)"
    },
    {
        "number": 503,
        "prompt": "Write a function to add consecutive numbers of a given list.\ndef add_consecutive_nums(nums):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    total = 0\n    count = 1\n    for i in range(len(nums)):\n        if i < len(nums) - 1:\n            if nums[i] + 1 == nums[i+1]:\n                count += 1\n            else:\n                total += count\n                count = 1\n    return total + count\n\n# Test cases\nprint(add_consecutive_nums([1,2,3,4,5,8,9,10,11,12,13,14])) # Output: 6 (1+2+3+4+5, 8, 10+11+12+13+14)\nprint(add_consecutive_nums([1,2,3,4,6,7,8,10,11,12,13,14])) # Output: 3 (1+2+3, 6, 7, 10+11+12+13+14)\nprint(add_consecutive_nums([1,2,4,5,8,9,10,11,12,14])) # Output: 5 (1+2, 4, 5, 8, 9+10+11+12+14)\nprint(add_consecutive_nums([1,2,4,6,7,8,9,10,12,13,14])) # Output:",
        "generated_testcode": "assert add_consecutive_nums([1, 2, 3, 4, 5, 6]) == 15\n",
        "test": "assert add_consecutive_nums([1, 1, 3, 4, 4, 5, 6, 7])==[2, 4, 7, 8, 9, 11, 13]\nassert add_consecutive_nums([4, 5, 8, 9, 6, 10])==[9, 13, 17, 15, 16]\nassert add_consecutive_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[3, 5, 7, 9, 11, 13, 15, 17, 19]",
        "canonical_solution": "def add_consecutive_nums(nums):\r\n    result = [b+a for a, b in zip(nums[:-1], nums[1:])]\r\n    return result"
    },
    {
        "number": 504,
        "prompt": "Write a python function to find the cube sum of first n natural numbers.\ndef sum_Of_Series(n): \n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    sum = 0\n    for i in range(1, n+1): \n        sum = sum + i**3\n    return sum \n\nn = int(input(\"Enter the number of terms: \"))\nprint(\"Sum of first\",n,\"terms of series is:\", sum_Of_Series(n)) \n\n\n#Output: \n#Enter the number of terms: 5\n#Sum of first 5 terms of series is: 2250\n\n#Time Complexity: O(n)\n#Space Complexity: O(1)\n",
        "generated_testcode": "assert sum_Of_Series(5) == 125\n",
        "test": "assert sum_Of_Series(5) == 225\nassert sum_Of_Series(2) == 9\nassert sum_Of_Series(3) == 36",
        "canonical_solution": "def sum_Of_Series(n): \r\n    sum = 0\r\n    for i in range(1,n + 1): \r\n        sum += i * i*i       \r\n    return sum"
    },
    {
        "number": 505,
        "prompt": "Write a function to move all zeroes to the end of the given array.\ndef re_order(A):\n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    j = 0  # index of non zero element\n    for i in range(len(A)):\n        if A[i] != 0:\n            A[i], A[j] = A[j], A[i]\n            j += 1\n    return A\n\n# Time complexity: O(n), Space complexity: O(1)\n\n# Test the function\nA = [0, 1, 0, 3, 12, 0, 5, 6, 7, 0, 8, 9, 0]\nprint(re_order(A))  # Output: [1, 3, 12, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0]\nA = [0, 0, 0, 0, 0]\nprint(re_order(A))  # Output: [0, 0, 0, 0, 0]\nA = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nprint(re_order(A))  # Output: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\n# NOTE: The function modifies the original array A. If you don't want to modify the original array, create a copy and apply the same logic to the copy. ",
        "generated_testcode": "",
        "test": "assert re_order([6, 0, 8, 2, 3, 0, 4, 0, 1]) == [6, 8, 2, 3, 4, 1, 0, 0, 0]\nassert re_order([4, 0, 2, 7, 0, 9, 0, 12, 0]) == [4, 2, 7, 9, 12, 0, 0, 0, 0]\nassert re_order([3, 11, 0, 74, 14, 0, 1, 0, 2]) == [3, 11, 74, 14, 1, 2, 0, 0, 0]",
        "canonical_solution": "def re_order(A):\r\n    k = 0\r\n    for i in A:\r\n        if i:\r\n            A[k] = i\r\n            k = k + 1\r\n    for i in range(k, len(A)):\r\n        A[i] = 0\r\n    return A"
    },
    {
        "number": 506,
        "prompt": "Write a function to calculate the permutation coefficient of given p(n, k).\ndef permutation_coefficient(n, k): \n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": true,
        "answer": "    numerator = 1\n    denominator = 1\n    for i in range(1, k + 1): \n        numerator *= n - i + 1\n        denominator *= i \n    return numerator // denominator \n  \n# Test the function \nn = 5\nk = 2\nprint(\"Permutation coefficient of \", n, \"and\", k, \"is\", permutation_coefficient(n, k)) ",
        "generated_testcode": "assert permutation_coefficient(5, 3) == 10\n",
        "test": "assert permutation_coefficient(10, 2) == 90\nassert permutation_coefficient(10, 3) == 720\nassert permutation_coefficient(10, 1) == 10",
        "canonical_solution": "def permutation_coefficient(n, k): \r\n\tP = [[0 for i in range(k + 1)] \r\n\t\t\tfor j in range(n + 1)] \r\n\tfor i in range(n + 1): \r\n\t\tfor j in range(min(i, k) + 1): \r\n\t\t\tif (j == 0): \r\n\t\t\t\tP[i][j] = 1\r\n\t\t\telse: \r\n\t\t\t\tP[i][j] = P[i - 1][j] + ( \r\n\t\t\t\t\t\tj * P[i - 1][j - 1]) \r\n\t\t\tif (j < k): \r\n\t\t\t\tP[i][j + 1] = 0\r\n\treturn P[n][k] "
    },
    {
        "number": 507,
        "prompt": "Write a function to remove specific words from a given list.\ndef remove_words(list1, removewords):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    new_list = []\n    for word in list1:\n        if word not in removewords:\n            new_list.append(word)\n    return new_list\n\n# Test the function\nlist1 = [\"apple\", \"banana\", \"cherry\", \"date\", \"elderberry\"]\nremovewords = [\"banana\", \"cherry\"]\nprint(remove_words(list1, removewords)) # Output: ['apple', 'date', 'elderberry']\n\n# Explanation:\n# The function iterates through each word in the list and checks if it is in the removewords list. If it is not in the removewords list, it adds it to a new list.\n# Then it returns the new list. ",
        "generated_testcode": "assert remove_words(['hello', 'world', 'python', 'is', 'awesome'], ['is']) == ['hello', 'world', 'python', 'awesome']\n",
        "test": "assert remove_words(['red', 'green', 'blue', 'white', 'black', 'orange'],['white', 'orange'])==['red', 'green', 'blue', 'black']\nassert remove_words(['red', 'green', 'blue', 'white', 'black', 'orange'],['black', 'orange'])==['red', 'green', 'blue', 'white']\nassert remove_words(['red', 'green', 'blue', 'white', 'black', 'orange'],['blue', 'white'])==['red', 'green', 'black', 'orange']",
        "canonical_solution": "def remove_words(list1, removewords):\r\n    for word in list(list1):\r\n        if word in removewords:\r\n            list1.remove(word)\r\n    return list1  "
    },
    {
        "number": 508,
        "prompt": "Write a function to check if the common elements between two given lists are in the same order or not.\ndef same_order(l1, l2):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    # If length of lists are not same, return False\n    if len(l1) != len(l2):\n        return False\n    # Iterate through the elements of the lists and check if they are the same\n    for i in range(len(l1)):\n        if l1[i] != l2[i]:\n            return False\n    # If all elements are same, return True\n    return True\n\n# Test cases\nprint(same_order([1, 2, 3, 4], [1, 2, 3, 4])) # True\nprint(same_order([1, 2, 3, 4], [4, 3, 2, 1])) # False\nprint(same_order([1, 2, 3, 4], [1, 2, 3, 5])) # False\nprint(same_order([1, 2, 3, 4], [1, 3, 2, 4])) # False\nprint(same_order([], [])) # True\nprint(same_order([1], [1])) # True\nprint(same_order([1], [2])) # False ",
        "generated_testcode": "assert same_order([1, 2, 3, 4, 5], [1, 2, 3, 4, 5]) == True\n",
        "test": "assert same_order([\"red\",\"green\",\"black\",\"orange\"],[\"red\",\"pink\",\"green\",\"white\",\"black\"])==True\nassert same_order([\"red\",\"pink\",\"green\",\"white\",\"black\"],[\"white\",\"orange\",\"pink\",\"black\"])==False\nassert same_order([\"red\",\"green\",\"black\",\"orange\"],[\"red\",\"pink\",\"green\",\"white\",\"black\"])==True",
        "canonical_solution": "def same_order(l1, l2):\r\n    common_elements = set(l1) & set(l2)\r\n    l1 = [e for e in l1 if e in common_elements]\r\n    l2 = [e for e in l2 if e in common_elements]\r\n    return l1 == l2"
    },
    {
        "number": 509,
        "prompt": "Write a python function to find the average of odd numbers till a given odd number.\ndef average_Odd(n) : \n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": true,
        "answer": "    sum = 0\n    count = 0\n    for i in range(1, n+1, 2) : \n        sum += i \n        count += 1\n    return sum/count \n\n# Test the function \nn = 9\nprint(\"Average of odd numbers till\", n, \"is\", average_Odd(n)) \n\n# Output: Average of odd numbers till 9 is 4.0 ",
        "generated_testcode": "assert average_Odd(5) == 3\n",
        "test": "assert average_Odd(9) == 5\nassert average_Odd(5) == 3\nassert average_Odd(11) == 6",
        "canonical_solution": "def average_Odd(n) : \r\n    if (n%2==0) : \r\n        return (\"Invalid Input\") \r\n        return -1 \r\n    sm =0\r\n    count =0\r\n    while (n>=1) : \r\n        count=count+1\r\n        sm = sm + n \r\n        n = n-2\r\n    return sm//count "
    },
    {
        "number": 510,
        "prompt": "Write a function to find the number of subsequences having product smaller than k for the given non negative array.\ndef no_of_subsequences(arr, k): \n",
        "checkpoint": "13B",
        "pass": 6,
        "correct": true,
        "answer": "    mod = 10**9 + 7\n    n = len(arr)\n    dp = [0] * (k+1)\n    dp[0] = 1\n    prod = 1\n    count = 0\n    for i in range(n):\n        new_dp = [0] * (k+1)\n        for j in range(k+1):\n            if j >= arr[i]:\n                new_dp[j] = (dp[j] + dp[j-arr[i]]) % mod\n            else:\n                new_dp[j] = dp[j]\n            if j == 0:\n                new_dp[j] += 1\n        dp = new_dp\n    return dp[k]\n\nif __name__ == \"__main__\":\n    arr = [1, 2, 3, 4, 5]\n    k = 10\n    print(no_of_subsequences(arr, k)) # Output: 4\n    arr = [1, 2, 3]\n    k = 10\n    print(no_of_subsequences(arr, k)) # Output: 3\n    arr = [1, 2, 3, 4, 5]\n    k = 100\n    print(no_of_subsequences(arr, k)) # Output: 100\n    ",
        "generated_testcode": "assert no_of_subsequences([1, 2, 3, 4, 5], 10) == 4\n",
        "test": "assert no_of_subsequences([1,2,3,4], 10) == 11\nassert no_of_subsequences([4,8,7,2], 50) == 9\nassert no_of_subsequences([5,6,7,8], 15) == 4",
        "canonical_solution": "def no_of_subsequences(arr, k): \r\n\tn = len(arr) \r\n\tdp = [[0 for i in range(n + 1)] \r\n\t\t\tfor j in range(k + 1)] \r\n\tfor i in range(1, k + 1): \r\n\t\tfor j in range(1, n + 1): \r\n\t\t\tdp[i][j] = dp[i][j - 1] \r\n\t\t\tif arr[j - 1] <= i and arr[j - 1] > 0: \r\n\t\t\t\tdp[i][j] += dp[i // arr[j - 1]][j - 1] + 1\r\n\treturn dp[k][n]"
    },
    {
        "number": 511,
        "prompt": "Write a python function to find minimum sum of factors of a given number.\ndef find_Min_Sum(num): \n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    sum = 0\n    for i in range(1, num + 1): \n        if (num % i == 0): \n            sum += i \n    return sum\n\n# Test the function with an example \nnum = 36\nprint(\"The minimum sum of factors of\", num, \"is\", find_Min_Sum(num)) \n\n# Test the function with another example \nnum = 100\nprint(\"The minimum sum of factors of\", num, \"is\", find_Min_Sum(num)) \n",
        "generated_testcode": "assert find_Min_Sum(12) == 3 # Since 2 and 6 are the factors of 12, the minimum sum of factors is 2+6=8\n",
        "test": "assert find_Min_Sum(12) == 7\nassert find_Min_Sum(105) == 15\nassert find_Min_Sum(2) == 2",
        "canonical_solution": "def find_Min_Sum(num): \r\n    sum = 0\r\n    i = 2\r\n    while(i * i <= num): \r\n        while(num % i == 0): \r\n            sum += i \r\n            num /= i \r\n        i += 1\r\n    sum += num \r\n    return sum"
    },
    {
        "number": 512,
        "prompt": "Write a function to count the element frequency in the mixed nested tuple.\ndef flatten(test_tuple): \n",
        "checkpoint": "13B",
        "pass": 5,
        "correct": true,
        "answer": "    \"\"\"\n    This function will return the count of each element in the tuple.\n    \"\"\"\n    if isinstance(test_tuple, tuple): \n        return sum([flatten(x) for x in test_tuple], [])\n    else:\n        return [test_tuple] ",
        "generated_testcode": "",
        "test": "assert count_element_freq((5, 6, (5, 6), 7, (8, 9), 9) ) == {5: 2, 6: 2, 7: 1, 8: 1, 9: 2}\nassert count_element_freq((6, 7, (6, 7), 8, (9, 10), 10) ) == {6: 2, 7: 2, 8: 1, 9: 1, 10: 2}\nassert count_element_freq((7, 8, (7, 8), 9, (10, 11), 11) ) == {7: 2, 8: 2, 9: 1, 10: 1, 11: 2}",
        "canonical_solution": "def flatten(test_tuple): \r\n\tfor tup in test_tuple: \r\n\t\tif isinstance(tup, tuple): \r\n\t\t\tyield from flatten(tup) \r\n\t\telse: \r\n\t\t\tyield tup \r\ndef count_element_freq(test_tuple):\r\n  res = {}\r\n  for ele in flatten(test_tuple):\r\n    if ele not in res:\r\n      res[ele] = 0\r\n    res[ele] += 1\r\n  return (res) "
    },
    {
        "number": 513,
        "prompt": "Write a function to convert tuple into list by adding the given string after every element.\ndef add_str(test_tup, K):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    result = []\n    for i in test_tup:\n        result.append(str(i) + K)\n    return result\n\n\ntest_tup = (1, 2, 3, 4, 5)\nK = \"hello\"\nprint(add_str(test_tup, K))\n\n# Output: ['1hello', '2hello', '3hello', '4hello', '5hello']\n\n\n\n# 2. Convert tuple to list and sort it using lambda function\ndef convert_sort(test_tup):\n    return sorted(list(test_tup))\n\ntest_tup = (4, 2, 1, 5, 3)\nprint(convert_sort(test_tup))\n# Output: [1, 2, 3, 4, 5]\n\n\n\n# 3. Convert tuple to set\ndef convert_set(test_tup):\n    return set(test_tup)\n\ntest_tup = (1, 2, 3, 4, 4, 5, 5)\nprint(convert_set(test_tup))\n# Output: {1, 2, 3, 4, 5}\n\n\n\n# 4. Check if all elements in tuple are same or not\ndef same_elements(test_tup):\n    return len(set(test_tup)) == 1\n\nprint(same_elements((1, 1, 1, 1)) ) ",
        "generated_testcode": "assert add_str((1, 2, 3, 4, 5), \"hello\") == [\"1hello\", \"2hello\", \"3hello\", \"4hello\", \"5hello\"]\n",
        "test": "assert add_str((5, 6, 7, 4, 9) , \"FDF\") == [5, 'FDF', 6, 'FDF', 7, 'FDF', 4, 'FDF', 9, 'FDF']\nassert add_str((7, 8, 9, 10) , \"PF\") == [7, 'PF', 8, 'PF', 9, 'PF', 10, 'PF']\nassert add_str((11, 14, 12, 1, 4) , \"JH\") == [11, 'JH', 14, 'JH', 12, 'JH', 1, 'JH', 4, 'JH']",
        "canonical_solution": "def add_str(test_tup, K):\r\n  res = [ele for sub in test_tup for ele in (sub, K)]\r\n  return (res) "
    },
    {
        "number": 514,
        "prompt": "Write a function to find the summation of tuple elements in the given tuple list.\ndef sum_elements(test_tup):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    result = 0\n    for i in range(len(test_tup)):\n        result += test_tup[i][0] + test_tup[i][1]\n    return result\n\ntest_tup = ((1,2), (3,4), (5,6))\nprint(sum_elements(test_tup)) # output: 21\n\n# Using list comprehension\ndef sum_elements(test_tup):\n    return sum(sum(tup) for tup in test_tup)\n\ntest_tup = ((1,2), (3,4), (5,6))\nprint(sum_elements(test_tup)) # output: 21\n\n# Using map and sum function\ndef sum_elements(test_tup):\n    return sum(sum(tup) for tup in test_tup)\n\ntest_tup = ((1,2), (3,4), (5,6))\nprint(sum_elements(test_tup)) # output: 21 ",
        "generated_testcode": "assert sum_elements((1, 2, 3, 4, 5, 6) == 15\n",
        "test": "assert sum_elements((7, 8, 9, 1, 10, 7)) == 42\nassert sum_elements((1, 2, 3, 4, 5, 6)) == 21\nassert sum_elements((11, 12 ,13 ,45, 14)) == 95",
        "canonical_solution": "def sum_elements(test_tup):\r\n  res = sum(list(test_tup))\r\n  return (res) "
    },
    {
        "number": 515,
        "prompt": "Write a function to check if there is a subset with sum divisible by m.\ndef modular_sum(arr, n, m): \n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    # Initialize the sum of the array to 0\n    s = 0\n    for i in range(n):\n        s += arr[i]\n        # Check if the sum is divisible by m and return True if it is divisible\n        if s % m == 0:\n            return True\n    # If the sum is not divisible by m, check for every sub-array sum\n    for i in range(n):\n        # Initialize the current sum to the i-th element of the array\n        curr_sum = arr[i]\n        # Loop through the remaining elements of the array\n        for j in range(i+1, n):\n            curr_sum += arr[j]\n            # If the current sum is divisible by m, return True\n            if curr_sum % m == 0:\n                return True\n    # If no sub-array has a sum divisible by m, return False\n    return False\n\n\n# Test the function\narr = [3, 4, 7, 12, 15, 2, 8]\nn = len(arr)\nm = 6\nprint(modular_sum(arr, n, m)) # Output: True\n\narr = [2, 4, 6, 8, 10, 12, 14]\nn = len(arr)\nm = 10\nprint(modular_sum(arr, n, m)) # Output: True\n\narr = [3, 5, 7, 11, ",
        "generated_testcode": "assert modular_sum([1, 2, 3, 4, 5, 6], 7) == True\n",
        "test": "assert modular_sum([3, 1, 7, 5], 4, 6) == True\nassert modular_sum([1, 7], 2, 5) == False\nassert modular_sum([1, 6], 2, 5) == False",
        "canonical_solution": "def modular_sum(arr, n, m): \r\n\tif (n > m): \r\n\t\treturn True\r\n\tDP = [False for i in range(m)] \r\n\tfor i in range(n): \r\n\t\tif (DP[0]): \r\n\t\t\treturn True\r\n\t\ttemp = [False for i in range(m)] \r\n\t\tfor j in range(m): \r\n\t\t\tif (DP[j] == True): \r\n\t\t\t\tif (DP[(j + arr[i]) % m] == False): \r\n\t\t\t\t\ttemp[(j + arr[i]) % m] = True\r\n\t\tfor j in range(m): \r\n\t\t\tif (temp[j]): \r\n\t\t\t\tDP[j] = True\r\n\t\tDP[arr[i] % m] = True\r\n\treturn DP[0]"
    },
    {
        "number": 516,
        "prompt": "Write a function to sort a list of elements using radix sort.\ndef radix_sort(nums):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    max_num = max(nums)\n    exp = 1\n    while max_num // exp > 0:\n        counting_sort(nums, exp)\n        exp *= 10\n\ndef counting_sort(nums, exp):\n    n = len(nums)\n    output = [0] * n\n    count = [0] * 10\n    for i in range(n):\n        index = (nums[i] // exp) % 10\n        count[index] += 1\n    for i in range(1, 10):\n        count[i] += count[i-1]\n    for i in range(n-1, -1, -1):\n        index = (nums[i] // exp) % 10\n        output[count[index]-1] = nums[i]\n        count[index] -= 1\n    for i in range(n):\n        nums[i] = output[i]\n\n\n# Test the function\nnums = [170, 45, 75, 90, 802, 24, 2, 66]\nradix_sort(nums)\nprint(nums) # [2, 24, 45, 66, 75, 90, 170, 802]\n\n# Time complexity: O(kn) where k is the number of digits in the maximum element, n is the size of",
        "generated_testcode": "",
        "test": "assert radix_sort([15, 79, 25, 68, 37]) == [15, 25, 37, 68, 79]\nassert radix_sort([9, 11, 8, 7, 3, 2]) == [2, 3, 7, 8, 9, 11]\nassert radix_sort([36, 12, 24, 26, 29]) == [12, 24, 26, 29, 36]",
        "canonical_solution": "def radix_sort(nums):\r\n    RADIX = 10\r\n    placement = 1\r\n    max_digit = max(nums)\r\n\r\n    while placement < max_digit:\r\n      buckets = [list() for _ in range( RADIX )]\r\n      for i in nums:\r\n        tmp = int((i / placement) % RADIX)\r\n        buckets[tmp].append(i)\r\n      a = 0\r\n      for b in range( RADIX ):\r\n        buck = buckets[b]\r\n        for i in buck:\r\n          nums[a] = i\r\n          a += 1\r\n      placement *= RADIX\r\n    return nums"
    },
    {
        "number": 517,
        "prompt": "Write a python function to find the largest postive number from the given list.\ndef largest_pos(list1): \n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    max_num = 0 \n    for num in list1: \n        if num > max_num: \n            max_num = num \n    return max_num \n\n# example usage: \nlist1 = [2, 45, -12, 6, 8, 100, -5, 99, -9] \nprint(\"The largest positive number in the list is:\", largest_pos(list1)) ",
        "generated_testcode": "assert largest_pos([1, -5, 10, 2, -3, 8, 0]) == 10\n",
        "test": "assert largest_pos([1,2,3,4,-1]) == 4\nassert largest_pos([0,1,2,-5,-1,6]) == 6\nassert largest_pos([0,0,1,0]) == 1",
        "canonical_solution": "def largest_pos(list1): \r\n    max = list1[0] \r\n    for x in list1: \r\n        if x > max : \r\n             max = x  \r\n    return max"
    },
    {
        "number": 518,
        "prompt": "Write a function to find the square root of a perfect number.\ndef sqrt_root(num):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    for i in range(1,num+1):\n        if i*i == num:\n            return i\n    return -1\n\n#Test the function with a perfect number\nprint(sqrt_root(496)) # 24\nprint(sqrt_root(25)) # -1\n\n#Function to find the next perfect number after a given number\ndef next_perfect(num):\n    while True:\n        num += 1\n        root = sqrt_root(num)\n        if root != -1 and root*root == num:\n            return num\n\n#Test the function\nprint(next_perfect(24)) # 28\nprint(next_perfect(28)) # 336\n\n#Function to find the previous perfect number before a given number\ndef prev_perfect(num):\n    while True:\n        num -= 1\n        root = sqrt_root(num)\n        if root != -1 and root*root == num:\n            return num\n\n#Test the function\nprint(prev_perfect(24)) # 8\nprint(prev_perfect(28)) # 16\n\n#Function to find the sum of digits of a number\ndef sum_digits(num):\n    s = 0\n    while num > 0:\n        digit = num % 10\n        s += digit\n        num //= 10\n    return s\n\n#Test the function\nprint(sum_digits(12345)) # ",
        "generated_testcode": "assert sqrt_root(16) == 4\n",
        "test": "assert sqrt_root(4)==2\nassert sqrt_root(16)==4\nassert sqrt_root(400)==20",
        "canonical_solution": "import math\r\ndef sqrt_root(num):\r\n sqrt_root = math.pow(num, 0.5)\r\n return sqrt_root "
    },
    {
        "number": 519,
        "prompt": "Write a function to calculate volume of a tetrahedron.\ndef volume_tetrahedron(num):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    return num * num * num / 6\n\n# Test the function with 3 inputs\nprint(volume_tetrahedron(4)) # Output: 24.0\nprint(volume_tetrahedron(8)) # Output: 256.0\nprint(volume_tetrahedron(12)) # Output: 768.0\n\n# Write a function to check if a number is prime or not\ndef is_prime(num):\n    if num <= 1:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True\n\n# Test the function with some inputs\nprint(is_prime(7)) # Output: True\nprint(is_prime(12)) # Output: False\nprint(is_prime(25)) # Output: True\nprint(is_prime(1)) # Output: False\n\n# Write a function to calculate the area of a rectangle\ndef rectangle_area(length, width):\n    return length * width\n\n# Test the function with some inputs\nprint(rectangle_area(5, 10)) # Output: 50\nprint(rectangle_area(12, 20)) # Output: 240\nprint(rectangle_area(7, 3)) # Output: 21\n\n# Write a function to calculate the area of a triangle\ndef triangle_area(base, height):\n    return 0.5 * base * height\n\n# Test the function with",
        "generated_testcode": "assert volume_tetrahedron(6) == 120\n",
        "test": "assert volume_tetrahedron(10)==117.85\nassert volume_tetrahedron(15)==397.75\nassert volume_tetrahedron(20)==942.81",
        "canonical_solution": "import math\r\ndef volume_tetrahedron(num):\r\n\tvolume = (num ** 3 / (6 * math.sqrt(2)))\t\r\n\treturn round(volume, 2)"
    },
    {
        "number": 520,
        "prompt": "Write a function to find the lcm of the given array elements.\ndef find_lcm(num1, num2): \n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": true,
        "answer": "    if (num1 > num2): \n        greater = num1 \n    else: \n        greater = num2 \n    while (True): \n        if (greater % num1 == 0 and greater % num2 == 0): \n            lcm = greater \n            break\n        greater += 1\n    return lcm \n\ndef lcm(arr): \n    ans = arr[0] \n    for i in range(1, len(arr)): \n        ans = find_lcm(ans, arr[i]) \n    return ans ",
        "generated_testcode": "assert find_lcm(2, 3) == 6\n",
        "test": "assert get_lcm([2, 7, 3, 9, 4]) == 252\nassert get_lcm([1, 2, 8, 3]) == 24\nassert get_lcm([3, 8, 4, 10, 5]) == 120",
        "canonical_solution": "def find_lcm(num1, num2): \r\n\tif(num1>num2): \r\n\t\tnum = num1 \r\n\t\tden = num2 \r\n\telse: \r\n\t\tnum = num2 \r\n\t\tden = num1 \r\n\trem = num % den \r\n\twhile (rem != 0): \r\n\t\tnum = den \r\n\t\tden = rem \r\n\t\trem = num % den \r\n\tgcd = den \r\n\tlcm = int(int(num1 * num2)/int(gcd)) \r\n\treturn lcm \r\ndef get_lcm(l):\r\n  num1 = l[0]\r\n  num2 = l[1]\r\n  lcm = find_lcm(num1, num2)\r\n  for i in range(2, len(l)):\r\n    lcm = find_lcm(lcm, l[i])\r\n  return lcm "
    },
    {
        "number": 521,
        "prompt": "Write a function to print check if the triangle is scalene or not.\ndef check_isosceles(x,y,z):\n",
        "checkpoint": "13B",
        "pass": 5,
        "correct": true,
        "answer": "    if x == y == z:\n        return False\n    elif x == y or y == z or z == x:\n        return True\n    else:\n        return False\n\ndef check_triangle(x,y,z):\n    if x + y <= z or y + z <= x or z + x <= y:\n        return False\n    else:\n        return True\n\ndef check_triangle_type(x,y,z):\n    if check_triangle(x,y,z) == False:\n        return \"Not a triangle\"\n    elif check_isosceles(x,y,z):\n        return \"Scalene\"\n    else:\n        return \"Isosceles\"\n\n# Testing the function\nprint(check_triangle_type(3,4,5)) # Scalene\nprint(check_triangle_type(6,6,6)) # Not a triangle\nprint(check_triangle_type(5,5,5)) # Not a triangle\nprint(check_triangle_type(5,5,10)) # Isosceles\nprint(check_triangle_type(10,8,8)) # Isosceles\nprint(check_triangle_type(10,10,10)) # Not a triangle ",
        "generated_testcode": "assert check_isosceles(3,4,5) == False\n",
        "test": "assert check_isosceles(6,8,12)==True\nassert check_isosceles(6,6,12)==False\nassert check_isosceles(6,15,20)==True",
        "canonical_solution": "def check_isosceles(x,y,z):\r\n  if x!=y & y!=z & z!=x:\r\n\t   return True\r\n  else:\r\n     return False"
    },
    {
        "number": 522,
        "prompt": "Write a function to find the longest bitonic subsequence for the given array.\ndef lbs(arr): \n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    n = len(arr) \n    if n == 0: \n        return 0\n    if n == 1: \n        return 1\n    if n == 2: \n        if arr[0] <= arr[1]: \n            return 2\n        else: \n            return 1\n    # Initialize the variables for the longest increasing and decreasing subsequence\n    lis = [1]*n\n    lds = [1]*n\n    # Loop through the array and fill the lis and lds arrays\n    for i in range(1, n): \n        for j in range(i): \n            if arr[i] > arr[j] and lis[i] < lis[j] + 1: \n                lis[i] = lis[j] + 1\n            if arr[i] < arr[j] and lds[i] < lds[j] + 1: \n                lds[i] = lds[j] + 1\n    # Find the maximum value of lis[i] + lds[i] - 1\n    max_len = 1\n    for i in range(n): \n        max_len = max(max_len, lis[i] + lds[i] - 1) \n    # Return the maximum value \n    return max_len ",
        "generated_testcode": "assert lbs([1, 2, 3, 4, 5, 4, 3, 2, 1]) == 5\n",
        "test": "assert lbs([0 , 8 , 4, 12, 2, 10 , 6 , 14 , 1 , 9 , 5 , 13, 3, 11 , 7 , 15]) == 7\nassert lbs([1, 11, 2, 10, 4, 5, 2, 1]) == 6\nassert lbs([80, 60, 30, 40, 20, 10]) == 5",
        "canonical_solution": "def lbs(arr): \r\n\tn = len(arr) \r\n\tlis = [1 for i in range(n+1)] \r\n\tfor i in range(1 , n): \r\n\t\tfor j in range(0 , i): \r\n\t\t\tif ((arr[i] > arr[j]) and (lis[i] < lis[j] +1)): \r\n\t\t\t\tlis[i] = lis[j] + 1\r\n\tlds = [1 for i in range(n+1)] \r\n\tfor i in reversed(range(n-1)): \r\n\t\tfor j in reversed(range(i-1 ,n)): \r\n\t\t\tif(arr[i] > arr[j] and lds[i] < lds[j] + 1): \r\n\t\t\t\tlds[i] = lds[j] + 1\r\n\tmaximum = lis[0] + lds[0] - 1\r\n\tfor i in range(1 , n): \r\n\t\tmaximum = max((lis[i] + lds[i]-1), maximum) \r\n\treturn maximum"
    },
    {
        "number": 523,
        "prompt": "Write a function to check whether a given string has a capital letter, a lower case letter, a number and specified length using lambda function.\ndef check_string(str1):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    return (lambda x: any(c.isupper() for c in x) and any(c.islower() for c in x) and any(c.isdigit() for c in x) and len(x) > 8)\n\n# Test cases\nprint(check_string(\"Aa1bc23\"))  # True\nprint(check_string(\"12345\"))  # False\nprint(check_string(\"Abcdefg\"))  # False\nprint(check_string(\"Abcdef123\"))  # False\nprint(check_string(\"Abcdef\"))  # False\nprint(check_string(\"ABCDEF\"))  # False\nprint(check_string(\"Abcde123\"))  # True\nprint(check_string(\"A1234567890\"))  # False\nprint(check_string(\"ABCDEFGHIJK\"))  # True\nprint(check_string(\"ABC123\"))  # True\nprint(check_string(\"AbcdefGhij\"))  # False\nprint(check_string(\"Aa1234567\"))  # False\nprint(check_string(\"1234567890\"))  # True\nprint(check_string(\"AbcdefGhi\"))  # False\nprint(check_string(\"AbcdefGhI\"))  # False\nprint(check_string(\"AbcdefGH1\"))  # False\nprint(check_string(\"AbcdefGhI1\"))  # False\nprint(",
        "generated_testcode": "assert check_string(\"Aa1\") == True\n",
        "test": "assert check_string('python')==['String must have 1 upper case character.', 'String must have 1 number.', 'String length should be atleast 8.']\nassert check_string('123python')==['String must have 1 upper case character.']\nassert check_string('123Python')==['Valid string.']",
        "canonical_solution": "def check_string(str1):\r\n    messg = [\r\n    lambda str1: any(x.isupper() for x in str1) or 'String must have 1 upper case character.',\r\n    lambda str1: any(x.islower() for x in str1) or 'String must have 1 lower case character.',\r\n    lambda str1: any(x.isdigit() for x in str1) or 'String must have 1 number.',\r\n    lambda str1: len(str1) >= 7                 or 'String length should be atleast 8.',]\r\n    result = [x for x in [i(str1) for i in messg] if x != True]\r\n    if not result:\r\n        result.append('Valid string.')\r\n    return result  "
    },
    {
        "number": 524,
        "prompt": "Write a function to find the sum of maximum increasing subsequence of the given array.\ndef max_sum_increasing_subsequence(arr, n): \n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    n = len(arr)\n    if n == 0: \n        return 0\n    max_sum = [0] * n \n    max_sum[0] = 1\n    for i in range(1, n): \n        max_sum[i] = 1\n        for j in range(i): \n            if arr[i] > arr[j] and max_sum[j] + 1 > max_sum[i]: \n                max_sum[i] = max_sum[j] + 1\n    return max(max_sum)\n\n# Test the function \narr = [10, 22, 9, 33, 21, 50, 33, 40, 50, 60, 80] \nprint(\"Length of Largest increasing subsequence is \", max_sum_increasing_subsequence(arr, len(arr))) ",
        "generated_testcode": "",
        "test": "assert max_sum_increasing_subsequence([1, 101, 2, 3, 100, 4, 5], 7) == 106\nassert max_sum_increasing_subsequence([3, 4, 5, 10], 4) == 22\nassert max_sum_increasing_subsequence([10, 5, 4, 3], 4) == 10",
        "canonical_solution": "def max_sum_increasing_subsequence(arr, n): \r\n\tmax = 0\r\n\tmsis = [0 for x in range(n)] \r\n\tfor i in range(n): \r\n\t\tmsis[i] = arr[i] \r\n\tfor i in range(1, n): \r\n\t\tfor j in range(i): \r\n\t\t\tif (arr[i] > arr[j] and\r\n\t\t\t\tmsis[i] < msis[j] + arr[i]): \r\n\t\t\t\tmsis[i] = msis[j] + arr[i] \r\n\tfor i in range(n): \r\n\t\tif max < msis[i]: \r\n\t\t\tmax = msis[i] \r\n\treturn max"
    },
    {
        "number": 525,
        "prompt": "Write a python function to check whether two given lines are parallel or not.\ndef parallel_lines(line1, line2):\n",
        "checkpoint": "13B",
        "pass": 8,
        "correct": true,
        "answer": "    if line1[1] == line2[1]:\n        return True\n    elif line1[0] == line2[0]:\n        return True\n    else:\n        return False\n\nprint(parallel_lines([1, 2], [3, 4]))  # should return False\nprint(parallel_lines([1, 2], [2, 5]))  # should return True\nprint(parallel_lines([1, 1], [2, 2]))  # should return False\nprint(parallel_lines([1, 1], [1, 5]))  # should return True ",
        "generated_testcode": "assert parallel_lines((1, 0, 0), (2, 0, 0)) == True\n",
        "test": "assert parallel_lines([2,3,4], [2,3,8]) == True\nassert parallel_lines([2,3,4], [4,-3,8]) == False\nassert parallel_lines([3,3],[5,5]) == True",
        "canonical_solution": "def parallel_lines(line1, line2):\r\n  return line1[0]/line1[1] == line2[0]/line2[1]"
    },
    {
        "number": 526,
        "prompt": "Write a python function to capitalize first and last letters of each word of a given string.\ndef capitalize_first_last_letters(str1):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": true,
        "answer": "    words = str1.split()\n    result = \"\"\n    for word in words:\n        if len(word) > 1:\n            result += word[0].upper() + word[1:].lower() + \" \"\n        else:\n            result += word.upper() + \" \"\n    return result[:-1]\n\n# Test the function\nprint(capitalize_first_last_letters(\"python is a high level programming language\")) ",
        "generated_testcode": "assert capitalize_first_last_letters(\"hello world\") == \"Hello World\"\n",
        "test": "assert capitalize_first_last_letters(\"python\") == \"PythoN\"\nassert capitalize_first_last_letters(\"bigdata\") == \"BigdatA\"\nassert capitalize_first_last_letters(\"Hadoop\") == \"HadooP\"",
        "canonical_solution": "def capitalize_first_last_letters(str1):\r\n     str1 = result = str1.title()\r\n     result =  \"\"\r\n     for word in str1.split():\r\n        result += word[:-1] + word[-1].upper() + \" \"\r\n     return result[:-1]  "
    },
    {
        "number": 527,
        "prompt": "Write a function to find all pairs in an integer array whose sum is equal to a given number.\ndef get_pairs_count(arr, n, sum):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    arr.sort()\n    count = 0\n    left = 0\n    right = n - 1\n    while left < right:\n        current_sum = arr[left] + arr[right]\n        if current_sum == sum:\n            count += 1\n            left += 1\n            right -= 1\n        elif current_sum < sum:\n            left += 1\n        else:\n            right -= 1\n    return count\n\n\n# Test the function\narr = [1, 5, 3, 2, 4, 6, 7, 8, 9]\nsum = 10\nn = len(arr)\nprint(get_pairs_count(arr, n, sum))  # Output: 2\n",
        "generated_testcode": "assert get_pairs_count([1, 2, 3, 4, 5, 6, 7, 8, 9], 10) == 2\n",
        "test": "assert get_pairs_count([1, 5, 7, -1, 5], 5, 6) == 3\nassert get_pairs_count([1, 5, 7, -1], 4, 6) == 2\nassert get_pairs_count([1, 1, 1, 1], 4, 2) == 6",
        "canonical_solution": "def get_pairs_count(arr, n, sum):\r\n    count = 0 \r\n    for i in range(0, n):\r\n        for j in range(i + 1, n):\r\n            if arr[i] + arr[j] == sum:\r\n                count += 1\r\n    return count"
    },
    {
        "number": 528,
        "prompt": "Write a function to find the list of lists with minimum length.\ndef min_length(list1):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    min_len = len(list1[0])\n    min_list = [list1[0]\n    for i in range(1, len(list1)):\n        if len(list1[i]) < min_len:\n            min_len = len(list1[i])\n            min_list = [list1[i]\n    return min_list\n\n# Test the function\nlist1 = [\"apple\", \"banana\", \"orange\", \"grape\", \"strawberry\", \"kiwi\", \"mango\"]\nprint(min_length(list1)) # should print \"kiwi\"\nlist2 = [1, 2, 3, 4, 5, 6, 7, 8, 9]\nprint(min_length(list2)) # should print [1, 2, 3, 4, 5, 6, 7, 8, 9]\nlist3 = [[1, 2, 3], [4, 5], [6, 7, 8, 9, 10], [11, 12, 13, 14, 15, 16]]\nprint(min_length(list3)) # should print [1, 2, 3] ",
        "generated_testcode": "assert min_length([[1, 2, 3], [4, 5], [6, 7, 8, 9], [10]]) == [4, 5, 6, 7, 8, 9]\n",
        "test": "assert min_length([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(1, [0])\nassert min_length([[1], [5, 7], [10, 12, 14,15]])==(1, [1])\nassert min_length([[5], [15,20,25]])==(1, [5])",
        "canonical_solution": "def min_length(list1):\r\n   min_length = min(len(x) for x in  list1 )  \r\n   min_list = min((x) for x in   list1)\r\n   return(min_length, min_list)     "
    },
    {
        "number": 529,
        "prompt": "Write a function to find the nth jacobsthal-lucas number.\ndef jacobsthal_lucas(n): \n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    if n == 0: \n        return 2\n    elif n == 1: \n        return 1\n    else: \n        return jacobsthal_lucas(n-1) + jacobsthal_lucas(n-2) \n\n# Test the function \nprint(jacobsthal_lucas(4)) ",
        "generated_testcode": "assert jacobsthal_lucas(0) == 2\n",
        "test": "assert jacobsthal_lucas(5) == 31\nassert jacobsthal_lucas(2) == 5\nassert jacobsthal_lucas(4) == 17",
        "canonical_solution": "def jacobsthal_lucas(n): \r\n\tdp=[0] * (n + 1) \r\n\tdp[0] = 2\r\n\tdp[1] = 1\r\n\tfor i in range(2, n+1): \r\n\t\tdp[i] = dp[i - 1] + 2 * dp[i - 2]; \r\n\treturn dp[n]"
    },
    {
        "number": 530,
        "prompt": "Write a function to find the ration of negative numbers in an array of integers.\ndef negative_count(nums):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    count = 0\n    for num in nums:\n        if num < 0:\n            count += 1\n    return count / len(nums)\n\nprint(negative_count([1, 2, 3, 4, -5, -6, 7, -8]) == 0.5)\nprint(negative_count([1, 2, 3, 4, 5, 6, 7]) == 0)\nprint(negative_count([-1, -2, -3, -4, -5, -6, -7]) == 1) ",
        "generated_testcode": "assert negative_count([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 0\n",
        "test": "assert negative_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])==0.31\nassert negative_count([2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8])==0.31\nassert negative_count([2, 4, -6, -9, 11, -12, 14, -5, 17])==0.44",
        "canonical_solution": "from array import array\r\ndef negative_count(nums):\r\n    n = len(nums)\r\n    n1 = 0\r\n    for x in nums:\r\n        if x < 0:\r\n            n1 += 1\r\n        else:\r\n          None\r\n    return round(n1/n,2)"
    },
    {
        "number": 531,
        "prompt": "Write a function to find minimum number of coins that make a given value.\ndef min_coins(coins, m, V): \n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    dp = [0] * (V+1) \n    for i in range(V+1): \n        dp[i] = float('inf') \n    dp[0] = 0\n    for i in range(1, V+1): \n        for j in range(m): \n            if coins[j] <= i: \n                dp[i] = min(dp[i], dp[i-coins[j]] + 1) \n    return dp[V] \n\ncoins = [int(x) for x in input().split()]\nm = len(coins)\nV = int(input())\nprint(min_coins(coins, m, V)) ",
        "generated_testcode": "assert min_coins([1, 2, 3], 6) == 2\n",
        "test": "assert min_coins([9, 6, 5, 1] ,4,11)==2\nassert min_coins([4,5,6,7,8,9],6,9)==1\nassert min_coins([1, 2, 3],3,4)==2",
        "canonical_solution": "import sys \r\ndef min_coins(coins, m, V): \r\n    if (V == 0): \r\n        return 0\r\n    res = sys.maxsize \r\n    for i in range(0, m): \r\n        if (coins[i] <= V): \r\n            sub_res = min_coins(coins, m, V-coins[i]) \r\n            if (sub_res != sys.maxsize and sub_res + 1 < res): \r\n                res = sub_res + 1  \r\n    return res "
    },
    {
        "number": 532,
        "prompt": "Write a function to check if the two given strings are permutations of each other.\ndef check_permutation(str1, str2):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    if len(str1) != len(str2):\n        return False\n    count = {}\n    for char in str1:\n        if char in count:\n            count[char] += 1\n        else:\n            count[char] = 1\n    for char in str2:\n        if char in count:\n            count[char] -= 1\n            if count[char] < 0:\n                return False\n        else:\n            return False\n    return True\n\nprint(check_permutation(\"listen\", \"silent\")) # True\nprint(check_permutation(\"hello\", \"world\")) # False\n\n# Time Complexity: O(n)\n# Space Complexity: O(1) ",
        "generated_testcode": "assert check_permutation(\"listen\", \"silent\") == True\n",
        "test": "assert check_permutation(\"abc\", \"cba\") == True\nassert check_permutation(\"test\", \"ttew\") == False\nassert check_permutation(\"xxyz\", \"yxzx\") == True",
        "canonical_solution": "def check_permutation(str1, str2):\r\n  n1=len(str1)\r\n  n2=len(str2)\r\n  if(n1!=n2):\r\n    return False\r\n  a=sorted(str1)\r\n  str1=\" \".join(a)\r\n  b=sorted(str2)\r\n  str2=\" \".join(b)\r\n  for i in range(0, n1, 1):\r\n    if(str1[i] != str2[i]):\r\n      return False\r\n  return True"
    },
    {
        "number": 533,
        "prompt": "Write a function to remove particular data type elements from the given tuple.\ndef remove_datatype(test_tuple, data_type):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": true,
        "answer": "    new_tuple = ()\n    for i in test_tuple:\n        if not isinstance(i, data_type):\n            new_tuple += (i,)\n    return new_tuple\n\n# test the function with example\ntest_tuple = (1, 2, 3, \"hello\", 4, \"world\", 5.6, (7, 8, 9), [10, 11], 12)\nprint(remove_datatype(test_tuple, int)) # output: (2, 'hello', 4, 'world', 5.6, (7, 8, 9), [10, 11], 12)\nprint(remove_datatype(test_tuple, str)) # output: (1, 2, 3, 4, 5.6, (7, 8, 9), [10, 11], 12)\nprint(remove_datatype(test_tuple, tuple)) # output: (1, 2, 3, 'hello', 4, 'world', 5.6, 12)\nprint(remove_datatype(test_tuple, list)) # output: (1, 2, 3, 'hello', 4, 'world', 5.6, (7, 8, 9) \n\n# test the function with empty tuple\nprint(remove_datatype((), str)) # output: () ",
        "generated_testcode": "",
        "test": "assert remove_datatype((4, 5, 4, 7.7, 1.2), int) == [7.7, 1.2]\nassert remove_datatype((7, 8, 9, \"SR\"), str) == [7, 8, 9]\nassert remove_datatype((7, 1.1, 2, 2.2), float) == [7, 2]",
        "canonical_solution": "def remove_datatype(test_tuple, data_type):\r\n  res = []\r\n  for ele in test_tuple:\r\n    if not isinstance(ele, data_type):\r\n      res.append(ele)\r\n  return (res) "
    },
    {
        "number": 534,
        "prompt": "Write a function to search a literals string in a string and also find the location within the original string where the pattern occurs.\ndef search_literal(pattern,text):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    \"\"\"\n    This function takes a pattern and a text string as input and returns True if the pattern is found in the text string and False otherwise.\n    It also returns the index of the first character in the text string where the pattern starts. If the pattern is not found, it returns -1.\n    \"\"\"\n    # Convert the pattern and text into lowercase\n    pattern = pattern.lower()\n    text = text.lower()\n    # Initialize the index variable to 0\n    index = 0\n    # Loop through the text string and check if the pattern matches the substring\n    while index != -1:\n        index = text.find(pattern, index)\n        if index != -1:\n            return True, index\n        else:\n            return False, -1\n\n# Test the function with an example\nprint(search_literal(\"cat\", \"The cat in the hat\")) # should return (True, 4)\nprint(search_literal(\"dog\", \"The cat in the hat\")) # should return (False, -1)\nprint(search_literal(\"hat\", \"The cat in the hat\")) # should return (True, 9)\nprint(search_literal(\"The\", \"The cat in the hat\")) # should return (True, 0)\n\n# The function should also handle uppercase and lowercase letters correctly\nprint(search_literal(\"the\", \"The cat in the hat\")) # should return (True, 0)\nprint(search_literal(\"THE\", \"The cat in the hat\")) # should return (True, 0)",
        "generated_testcode": "assert search_literal(\"hello\",\"hello world\") == True\n",
        "test": "assert search_literal('python','python programming language')==(0,6)\nassert search_literal('programming','python programming language')==(7,18)\nassert search_literal('language','python programming language')==(19,27)",
        "canonical_solution": "import re\r\ndef search_literal(pattern,text):\r\n match = re.search(pattern, text)\r\n s = match.start()\r\n e = match.end()\r\n return (s, e)"
    },
    {
        "number": 535,
        "prompt": "Write a function to find the top or bottom surface area of a cylinder.\ndef topbottom_surfacearea(r):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    return 2*3.14*r**2\n\n# Write a function to find the lateral surface area of a cylinder.\ndef lateral_surfacearea(r, h):\n    return 2*3.14*r*h\n\n# Write a function to find the volume of a cylinder.\ndef volume(r, h):\n    return 3.14*r**2*h\n\n# Write a function to find the total surface area of a cylinder.\ndef total_surfacearea(r, h):\n    return 2*3.14*r**2 + 2*3.14*r*h\n\n# Write a function to find the cost of a cylinder (in terms of the volume and price per unit volume)\ndef cost(volume, price_per_volume):\n    return volume*price_per_volume\n\n# Test the functions\nprint(\"Top/bottom surface area of a cylinder with radius 5 is\", topbottom_surfacearea(5))\nprint(\"Lateral surface area of a cylinder with radius 5 and height 10 is\", lateral_surfacearea(5, 10))\nprint(\"Volume of a cylinder with radius 5 and height 10 is\", volume(5, 10))\nprint(\"Total surface area of a cylinder with radius 5 and height 10 is\", total_surfacearea(5, 10))\nprint(\"Cost of a cylinder with volume 100 and price per unit volume 5 is\",",
        "generated_testcode": "assert topbottom_surfacearea(5) == 314.1592653589793936\n",
        "test": "assert topbottom_surfacearea(10)==314.15000000000003\nassert topbottom_surfacearea(5)==78.53750000000001\nassert topbottom_surfacearea(4)==50.264",
        "canonical_solution": "def topbottom_surfacearea(r):\r\n  toporbottomarea=3.1415*r*r\r\n  return toporbottomarea"
    },
    {
        "number": 536,
        "prompt": "Write a function to select the nth items of a list.\ndef nth_items(list,n):\n",
        "checkpoint": "13B",
        "pass": 8,
        "correct": true,
        "answer": "    return list[n-1]\n\n#Example usage:\nlst = [1,2,3,4,5,6,7,8,9]\nprint(nth_items(lst,3)) # Output: 3\nprint(nth_items(lst,6)) # Output: 6\nprint(nth_items(lst,9)) # Output: 9\n\n#Create a function that takes a list of numbers and returns the maximum and minimum values.\ndef max_min(lst):\n    return max(lst),min(lst)\n\n#Example usage:\nlst = [1,2,3,4,5,6,7,8,9]\nprint(max_min(lst)) # Output: (9, 1) \n\n#Create a function that takes a list of numbers and returns the sum of the squares of the numbers.\ndef sum_of_squares(lst):\n    return sum(i*i for i in lst)\n\n#Example usage:\nlst = [1,2,3,4,5,6,7,8,9]\nprint(sum_of_squares(lst)) # Output: 204\n\n#Create a function that takes a list of numbers and returns the list with all even numbers removed.\ndef remove_even(lst):\n    return [i for i in lst if i%2!=0]\n\n#Example usage:\nlst = [1,2,3,4,5,6,7,8,9]\nprint(remove_even(lst)) # Output:",
        "generated_testcode": "assert nth_items([1,2,3,4,5,6,7,8,9],3) == 3\n",
        "test": "assert nth_items([1, 2, 3, 4, 5, 6, 7, 8, 9],2)==[1, 3, 5, 7, 9] \nassert nth_items([10,15,19,17,16,18],3)==[10,17] \nassert nth_items([14,16,19,15,17],4)==[14,17]",
        "canonical_solution": "def nth_items(list,n):\r\n return list[::n]"
    },
    {
        "number": 537,
        "prompt": "Write a python function to find the first repeated word in a given string.\ndef first_repeated_word(str1):\n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    str1 = str1.lower()\n    words = str1.split()\n    word_dict = {}\n    for word in words:\n        if word in word_dict:\n            return word\n        else:\n            word_dict[word] = True\n\n# Test cases\nprint(first_repeated_word(\"hello world hello\")) # \"hello\"\nprint(first_repeated_word(\"Python is Python\")) # \"Python\"\nprint(first_repeated_word(\"Python is not Python\")) # None\nprint(first_repeated_word(\"Hello world\")) # None\nprint(first_repeated_word(\"The quick brown fox jumps over the lazy dog\")) # \"the\"\nprint(first_repeated_word(\"She sells seashells by the seashore\")) # \"seashells\"\nprint(first_repeated_word(\"Repeated words are not allowed in programming competitions\")) # \"are\"\nprint(first_repeated_word(\"Repeated words are not allowed in programming competitions\")) # \"are\"\nprint(first_repeated_word(\"The quick brown fox jumps over the lazy dog\")) # \"the\"\nprint(first_repeated_word(\"She sells seashells by the seashore\")) # \"seashells\"\nprint(first_repeated_word(\"Hello world\")) # None\nprint(first_repeated_word(\"Hello world\")) # None\nprint(first_repeated_word(\"\")) # None\nprint",
        "generated_testcode": "assert first_repeated_word(\"hello world hello\") == \"hello\"\n",
        "test": "assert first_repeated_word(\"ab ca bc ab\") == \"ab\"\nassert first_repeated_word(\"ab ca bc\") == 'None'\nassert first_repeated_word(\"ab ca bc ca ab bc\") == \"ca\"",
        "canonical_solution": "def first_repeated_word(str1):\r\n  temp = set()\r\n  for word in str1.split():\r\n    if word in temp:\r\n      return word;\r\n    else:\r\n      temp.add(word)\r\n  return 'None'"
    },
    {
        "number": 538,
        "prompt": "Write a python function to convert a given string list to a tuple.\ndef string_list_to_tuple(str1):\n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    return tuple(str1)\n\n#Example usage:\nprint(string_list_to_tuple(['hello', 'world'])) # ('hello', 'world')\n\n# Output: ('hello', 'world') ",
        "generated_testcode": "assert string_list_to_tuple(['apple', 'banana', 'cherry']) == ('apple', 'banana', 'cherry')\n",
        "test": "assert string_list_to_tuple((\"python 3.0\")) == ('p', 'y', 't', 'h', 'o', 'n', '3', '.', '0')\nassert string_list_to_tuple((\"bigdata\")) == ('b', 'i', 'g', 'd', 'a', 't', 'a')\nassert string_list_to_tuple((\"language\")) == ('l', 'a', 'n', 'g', 'u', 'a', 'g','e')",
        "canonical_solution": "def string_list_to_tuple(str1):\r\n    result = tuple(x for x in str1 if not x.isspace()) \r\n    return result"
    },
    {
        "number": 539,
        "prompt": "Write a function to create a list containing the power of said number in bases raised to the corresponding number in the index using map function.\ndef basesnum_coresspondingnum(bases_num,index):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    return list(map(lambda x: pow(bases_num,x), index))\n\n# Test the function\nprint(basesnum_coresspondingnum([2,3,4,5], [1,2,3]))\n\n\n#Output: [2, 9, 81] ",
        "generated_testcode": "assert basesnum_coresspondingnum([2,3,4,5], [1,2,3]) == [2, 9, 64]\n",
        "test": "assert basesnum_coresspondingnum([10, 20, 30, 40, 50, 60, 70, 80, 90, 100],[1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[10, 400, 27000, 2560000, 312500000, 46656000000, 8235430000000, 1677721600000000, 387420489000000000, 100000000000000000000]\nassert basesnum_coresspondingnum([1, 2, 3, 4, 5, 6, 7],[10, 20, 30, 40, 50, 60, 70])==[1, 1048576, 205891132094649, 1208925819614629174706176, 88817841970012523233890533447265625, 48873677980689257489322752273774603865660850176, 143503601609868434285603076356671071740077383739246066639249]\nassert basesnum_coresspondingnum([4, 8, 12, 16, 20, 24, 28],[3, 6, 9, 12, 15, 18, 21])==[64, 262144, 5159780352, 281474976710656, 32768000000000000000, 6979147079584381377970176, 2456510688823056210273111113728]",
        "canonical_solution": "def basesnum_coresspondingnum(bases_num,index):\r\n  result = list(map(pow, bases_num, index))\r\n  return result"
    },
    {
        "number": 540,
        "prompt": "Write a python function to find the difference between highest and least frequencies in a given array.\ndef find_Diff(arr,n): \n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    max_freq = 0\n    min_freq = 0\n    freq = [0] * 1000\n    for i in range(n): \n        freq[arr[i]] += 1\n        if(freq[arr[i]] > max_freq): \n            max_freq = freq[arr[i] \n    for i in range(n): \n        if(freq[arr[i]] > 0): \n            min_freq = freq[arr[i] \n    for i in range(1000): \n        if(freq[i] > 0 and freq[i] < min_freq): \n            min_freq = freq[i] \n    return (max_freq - min_freq) \n\n# Driver code \narr = [1, 2, 3, 2, 4, 5, 2, 6, 6, 8, 6, 5] \nn = len(arr) \nprint(\"Difference between highest and lowest frequency is\", find_Diff(arr, n)) ",
        "generated_testcode": "assert find_Diff([1,2,3,4,5,6,7,8,9,10], 7) == 9\n",
        "test": "assert find_Diff([1,1,2,2,7,8,4,5,1,4],10) == 2\nassert find_Diff([1,7,9,2,3,3,1,3,3],9) == 3\nassert find_Diff([1,2,1,2],4) == 0",
        "canonical_solution": "def find_Diff(arr,n): \r\n    arr.sort()  \r\n    count = 0; max_count = 0; min_count = n \r\n    for i in range(0,(n-1)): \r\n        if arr[i] == arr[i + 1]: \r\n            count += 1\r\n            continue\r\n        else: \r\n            max_count = max(max_count,count) \r\n            min_count = min(min_count,count) \r\n            count = 0\r\n    return max_count - min_count "
    },
    {
        "number": 541,
        "prompt": "Write a function to find if the given number is abundant or not.\ndef get_sum(n): \n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    sum = 1 \n    for i in range(2, int(n/2)+1): \n        if (n % i == 0): \n            sum += i \n    return sum \n  \ndef checkAbundant(n): \n    if get_sum(n) > n: \n        return True\n    else: \n        return False\n  \n# Driver code \nn = 12\nif checkAbundant(n): \n    print(n, \"is an abundant number\") \nelse: \n    print(n, \"is not an abundant number\") ",
        "generated_testcode": "assert get_sum(12) == 18\n",
        "test": "assert check_abundant(12) == True\nassert check_abundant(15) == False\nassert check_abundant(18) == True",
        "canonical_solution": "import math \r\ndef get_sum(n): \r\n\tsum = 0\r\n\ti = 1\r\n\twhile i <= (math.sqrt(n)): \r\n\t\tif n%i == 0: \r\n\t\t\tif n/i == i : \r\n\t\t\t\tsum = sum + i \r\n\t\t\telse: \r\n\t\t\t\tsum = sum + i \r\n\t\t\t\tsum = sum + (n / i ) \r\n\t\ti = i + 1\r\n\tsum = sum - n \r\n\treturn sum\r\ndef check_abundant(n): \r\n\tif (get_sum(n) > n): \r\n\t\treturn True\r\n\telse: \r\n\t\treturn False"
    },
    {
        "number": 542,
        "prompt": "Write a function to replace all occurrences of spaces, commas, or dots with a colon in the given string by using regex.\ndef fill_spaces(text):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    return re.sub(r'[ ,.]', ':', text)\n\n# Test the function with the following examples\ntext1 = 'Hello, world. How are you?'\ntext2 = 'Python is awesome.'\nprint(fill_spaces(text1)) # Output: 'Hello:world:How:are:you?'\nprint(fill_spaces(text2)) # Output: 'Python:is:awesome' ",
        "generated_testcode": "assert fill_spaces(\"Hello, world. How are you?\") == \"Hello:world:How:are:you?\"\n",
        "test": "assert fill_spaces('Boult Curve Wireless Neckband') == 'Boult:Curve:Wireless:Neckband'\nassert fill_spaces('Stereo Sound Sweatproof') == 'Stereo:Sound:Sweatproof'\nassert fill_spaces('Probass Curve Audio') == 'Probass:Curve:Audio'",
        "canonical_solution": "import re\r\ndef fill_spaces(text):\r\n  return (re.sub(\"[ ,.]\", \":\", text))"
    },
    {
        "number": 543,
        "prompt": "Write a function to add two numbers and print number of digits of sum.\ndef count_digits(num1,num2):\n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    return len(str(num1+num2))\n\nprint(count_digits(123,456)) # 3\nprint(count_digits(100,200)) # 3\nprint(count_digits(99,1)) # 2\nprint(count_digits(10000,2000)) # 4\nprint(count_digits(1001,200)) # 4\nprint(count_digits(999,1)) # 3 ",
        "generated_testcode": "assert count_digits(123,456) == 3\n",
        "test": "assert count_digits(9875,10)==(4)\nassert count_digits(98759853034,100)==(11)\nassert count_digits(1234567,500)==(7)",
        "canonical_solution": "def count_digits(num1,num2):\r\n    number=num1+num2\r\n    count = 0\r\n    while(number > 0):\r\n        number = number // 10\r\n        count = count + 1\r\n    return count"
    },
    {
        "number": 544,
        "prompt": "Write a function to flatten the tuple list to a string.\ndef flatten_tuple(test_list):\n",
        "checkpoint": "13B",
        "pass": 6,
        "correct": true,
        "answer": "    result = \"\"\n    for t in test_list:\n        for i in t:\n            result += i\n    return result\n\n\n# Test the function with the given test case\ntest_list = [(\"Hello\", \"World\", \"!\"), (\"Python\", \"is\", \"awesome\")]\nprint(flatten_tuple(test_list)) # Output: HelloWorld!Pythonisawesome\n\n# Test with a different test case\ntest_list = [(\"This\", \"is\", \"a\", \"tuple\"), (\"flattening\", \"example\")]\nprint(flatten_tuple(test_list)) # Output: Thisisatupleflatteningexample ",
        "generated_testcode": "assert flatten_tuple([('a', 'b', 'c'), ('d', 'e', 'f')]) == 'abcdef'\n",
        "test": "assert flatten_tuple([('1', '4', '6'), ('5', '8'), ('2', '9'), ('1', '10')]) == '1 4 6 5 8 2 9 1 10'\nassert flatten_tuple([('2', '3', '4'), ('6', '9'), ('3', '2'), ('2', '11')]) == '2 3 4 6 9 3 2 2 11'\nassert flatten_tuple([('14', '21', '9'), ('24', '19'), ('12', '29'), ('23', '17')]) == '14 21 9 24 19 12 29 23 17'",
        "canonical_solution": "def flatten_tuple(test_list):\r\n  res = ' '.join([idx for tup in test_list for idx in tup])\r\n  return (res) "
    },
    {
        "number": 545,
        "prompt": "Write a python function to toggle only first and last bits of a given number.\ndef take_L_and_F_set_bits(n) : \n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": true,
        "answer": "    L = 1\n    F = 0\n    while (n & L) == 0 : \n        L = L << 1\n        F = F << 1\n    while (n & F) == 0 : \n        F = F << 1\n        F |= 1\n    return (n ^ L) ^ F ",
        "generated_testcode": "assert take_L_and_F_set_bits(10) == 11\n",
        "test": "assert toggle_F_and_L_bits(10) == 3\nassert toggle_F_and_L_bits(15) == 6\nassert toggle_F_and_L_bits(20) == 5",
        "canonical_solution": "def take_L_and_F_set_bits(n) : \r\n    n = n | n >> 1\r\n    n = n | n >> 2\r\n    n = n | n >> 4\r\n    n = n | n >> 8\r\n    n = n | n >> 16 \r\n    return ((n + 1) >> 1) + 1      \r\ndef toggle_F_and_L_bits(n) :  \r\n    if (n == 1) : \r\n        return 0 \r\n    return n ^ take_L_and_F_set_bits(n) "
    },
    {
        "number": 546,
        "prompt": "Write a function to find the last occurrence of a character in a string.\ndef last_occurence_char(string,char):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    last_index = -1\n    for i in range(len(string)):\n        if string[i] == char:\n            last_index = i\n    return last_index\n\n#Example usage:\nprint(last_occurence_char(\"hello world\",'l')) #Output: 9\nprint(last_occurence_char(\"hello world\",'z')) #Output: -1\n\n#To check if a string is a palindrome\ndef is_palindrome(string):\n    return string == string[::-1]\n\n#Example usage:\nprint(is_palindrome(\"racecar\")) #Output: True\nprint(is_palindrome(\"hello\")) #Output: False\n\n#To find the length of a string using recursion\ndef string_length(string):\n    if string == \"\":\n        return 0\n    else:\n        return 1 + string_length(string[1:])\n\n#Example usage:\nprint(string_length(\"hello\")) #Output: 5\n\n#To find the length of a string using a loop\ndef string_length(string):\n    count = 0\n    for char in string:\n        count += 1\n    return count\n\n#Example usage:\nprint(string_length(\"hello\")) #Output: 5\n\n#To count the number of occurrences of a character in a string using recursion\ndef count_char(string,char):\n    if string == \"\":\n        return 0\n    elif string[0] == char:\n        return",
        "generated_testcode": "assert last_occurence_char(\"hello world\", \"l\") == 9\n",
        "test": "assert last_occurence_char(\"hello world\",'l')==10\nassert last_occurence_char(\"language\",'g')==7\nassert last_occurence_char(\"little\",'y')==None",
        "canonical_solution": "def last_occurence_char(string,char):\r\n flag = -1\r\n for i in range(len(string)):\r\n     if(string[i] == char):\r\n         flag = i\r\n if(flag == -1):\r\n    return None\r\n else:\r\n    return flag + 1"
    },
    {
        "number": 547,
        "prompt": "Write a python function to find the sum of hamming distances of all consecutive numbers from o to n.\ndef Total_Hamming_Distance(n):   \n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    total = 0\n    for i in range(1,n+1):\n        for j in range(i+1,n+1):\n            x = bin(i)[2:]\n            y = bin(j)[2:]\n            hamming = 0\n            for p,q in zip(x,y):\n                if p != q:\n                    hamming += 1\n            total += hamming\n    return total\n\n# Test the function\nn = 10\nprint(\"The sum of hamming distances from 1 to\",n,\"is\",Total_Hamming_Distance(n))\n",
        "generated_testcode": "assert Total_Hamming_Distance(10) == 32\n",
        "test": "assert Total_Hamming_Distance(4) == 7\nassert Total_Hamming_Distance(2) == 3\nassert Total_Hamming_Distance(5) == 8",
        "canonical_solution": "def Total_Hamming_Distance(n):   \r\n    i = 1\r\n    sum = 0\r\n    while (n // i > 0):  \r\n        sum = sum + n // i  \r\n        i = i * 2     \r\n    return sum"
    },
    {
        "number": 548,
        "prompt": "Write a function to find the length of the longest increasing subsequence of the given sequence.\ndef longest_increasing_subsequence(arr): \n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    n = len(arr)\n    if not arr or n == 0:\n        return 0\n\n    dp = [1] * n\n\n    for i in range(1, n):\n        for j in range(i):\n            if arr[i] > arr[j]:\n                dp[i] = max(dp[i], dp[j] + 1)\n\n    return max(dp)\n\n# Test the function with some examples\narr1 = [10, 9, 22, 33, 15, 21, 44, 56, 32, 67]\nprint(longest_increasing_subsequence(arr1))  # Output: 4\n\narr2 = [3, 4, -1, 5, 8, 2, 9, 10, 23, 6, 7]\nprint(longest_increasing_subsequence(arr2))  # Output: 4\n\narr3 = [3, 4, -1, 5, 8, 2, 9, 10, 23, 6, 7, 20]\nprint(longest_increasing_subsequence(arr3))  # Output: 5\n",
        "generated_testcode": "assert longest_increasing_subsequence([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 6\n",
        "test": "assert longest_increasing_subsequence([10, 22, 9, 33, 21, 50, 41, 60]) == 5\nassert longest_increasing_subsequence([3, 10, 2, 1, 20]) == 3\nassert longest_increasing_subsequence([50, 3, 10, 7, 40, 80]) == 4 ",
        "canonical_solution": "def longest_increasing_subsequence(arr): \r\n\tn = len(arr) \r\n\tlongest_increasing_subsequence = [1]*n \r\n\tfor i in range (1 , n): \r\n\t\tfor j in range(0 , i): \r\n\t\t\tif arr[i] > arr[j] and longest_increasing_subsequence[i]< longest_increasing_subsequence[j] + 1 : \r\n\t\t\t\tlongest_increasing_subsequence[i] = longest_increasing_subsequence[j]+1\r\n\tmaximum = 0\r\n\tfor i in range(n): \r\n\t\tmaximum = max(maximum , longest_increasing_subsequence[i]) \r\n\treturn maximum"
    },
    {
        "number": 549,
        "prompt": "Write a python function to find the sum of fifth power of first n odd natural numbers.\ndef odd_Num_Sum(n) : \n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    sum = 0\n    for i in range(1, 2*n, 2) : \n        sum += i*i*i*i*i*i \n    return sum \n  \n# test the function \nn = 5\nprint(\"Sum of fifth power of first \", n, \" odd natural numbers is \", odd_Num_Sum(n)) ",
        "generated_testcode": "assert odd_Num_Sum(5) == 225 # 1^5 + 3^5 + 5^5 + 7^5 + 9^5 + 11^5 = 2225\n",
        "test": "assert odd_Num_Sum(1) == 1\nassert odd_Num_Sum(2) == 244\nassert odd_Num_Sum(3) == 3369",
        "canonical_solution": "def odd_Num_Sum(n) : \r\n    j = 0\r\n    sm = 0\r\n    for i in range(1,n+1) : \r\n        j = (2*i-1) \r\n        sm = sm + (j*j*j*j*j)     \r\n    return sm "
    },
    {
        "number": 550,
        "prompt": "Write a python function to find the maximum element in a sorted and rotated array.\ndef find_Max(arr,low,high): \n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    if high < low: \n        return -1\n    if high == low: \n        return arr[low] \n  \n    # If there is only one element left \n    if high == low + 1: \n        if arr[low] > arr[high]: \n            return arr[low] \n        else: \n            return arr[high] \n  \n    # Find the middle element \n    mid = low + (high - low)/2\n    mid = int(mid)\n  \n    # The maximum will be at mid+1 for cases where array is rotated at mid \n    # If mid element is greater than its next element and min element, then \n    # maximum lies in the right sub-array \n    if arr[mid] > arr[mid + 1]: \n        return arr[mid] \n  \n    # If mid-1 is maximum, then maximum lies in left sub-array \n    if arr[mid-1] > arr[mid]: \n        return find_Max(arr, low, mid-1) \n  \n    # If mid element is minimum, then maximum lies in right sub-array \n    return find_Max(arr, mid + 1, high) \n  \n# Driver code \narr = [6, 7, 8, 9, 10, 1, 2, 3, 4] \nn = len(arr) \nprint(\"The maximum element is\", find_Max(arr, 0, n-1))",
        "generated_testcode": "assert find_Max([4, 5, 6, 7, 9, 10, 1, 2, 3], 0, 6) == 10\n",
        "test": "assert find_Max([2,3,5,6,9],0,4) == 9\nassert find_Max([3,4,5,2,1],0,4) == 5\nassert find_Max([1,2,3],0,2) == 3",
        "canonical_solution": "def find_Max(arr,low,high): \r\n    if (high < low): \r\n        return arr[0] \r\n    if (high == low): \r\n        return arr[low] \r\n    mid = low + (high - low) // 2 \r\n    if (mid < high and arr[mid + 1] < arr[mid]): \r\n        return arr[mid] \r\n    if (mid > low and arr[mid] < arr[mid - 1]): \r\n        return arr[mid - 1]  \r\n    if (arr[low] > arr[mid]): \r\n        return find_Max(arr,low,mid - 1) \r\n    else: \r\n        return find_Max(arr,mid + 1,high) "
    },
    {
        "number": 551,
        "prompt": "Write a function to extract a specified column from a given nested list.\ndef extract_column(list1, n):\n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    return [item[n] for item in list1]\n\n# Example usage:\n# list1 = [[1,2,3],[4,5,6],[7,8,9]]\n# n = 1\n# print(extract_column(list1, n)) # should print [2,5,8]\nlist1 = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nn = 1\nprint(extract_column(list1, n))  # should print [2, 5, 8]\n\n# The function should return a new list containing the nth element of each inner list. ",
        "generated_testcode": "assert extract_column([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 1) == [2, 5, 8]\n",
        "test": "assert extract_column([[1, 2, 3], [2, 4, 5], [1, 1, 1]],0)==[1, 2, 1]\nassert extract_column([[1, 2, 3], [-2, 4, -5], [1, -1, 1]],2)==[3, -5, 1]\nassert extract_column([[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]],0)==[1, 5, 1, 13, 5, 9]",
        "canonical_solution": "def extract_column(list1, n):\r\n   result = [i.pop(n) for i in list1]\r\n   return result "
    },
    {
        "number": 552,
        "prompt": "Write a python function to check whether a given sequence is linear or not.\ndef Seq_Linear(seq_nums):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    \"\"\"\n    This function takes a list of numbers as input and checks whether it is linear or not.\n    A sequence is said to be linear if the difference between any two consecutive terms is the same.\n    \"\"\"\n    diff = seq_nums[1] - seq_nums[0]\n    for i in range(1, len(seq_nums)):\n        if seq_nums[i] - seq_nums[i-1] != diff:\n            return False\n    return True\n\n#Testing the function\nprint(Seq_Linear([1,3,5,7,9])) #True\nprint(Seq_Linear([1,2,4,6,8,10])) #True\nprint(Seq_Linear([1,3,5,7,10])) #False\nprint(Seq_Linear([1,3,5,6,9])) #False\n\n\n\"\"\"\nOutput:\nTrue\nTrue\nFalse\nFalse\n\"\"\" ",
        "generated_testcode": "assert Seq_Linear([1, 2, 3, 4, 5, 6]) == True\n",
        "test": "assert Seq_Linear([0,2,4,6,8,10]) == \"Linear Sequence\"\nassert Seq_Linear([1,2,3]) == \"Linear Sequence\"\nassert Seq_Linear([1,5,2]) == \"Non Linear Sequence\"",
        "canonical_solution": "def Seq_Linear(seq_nums):\r\n  seq_nums = [seq_nums[x] - seq_nums[x-1] for x in range(1, len(seq_nums))]\r\n  if len(set(seq_nums)) == 1: \r\n    return \"Linear Sequence\"\r\n  else:\r\n    return \"Non Linear Sequence\""
    },
    {
        "number": 553,
        "prompt": "Write a function to convert the given tuple to a floating-point number.\ndef tuple_to_float(test_tup):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    \"\"\"\n    Converts a tuple to a float.\n\n    :param test_tup: a tuple of 2 elements (integer part and decimal part)\n    :return: a floating-point number\n    \"\"\"\n    # Convert the tuple to a string\n    tup_str = str(test_tup)\n    # Remove the parentheses and split it into two parts\n    num_parts = tup_str[1:-1].split(',')\n    # Combine the two parts with a decimal point\n    num_str = num_parts[0] + '.' + num_parts[1]\n    # Convert the string to a float and return\n    return float(num_str)\n\n# Test the function with the example tuple\ntest_tup = (1, 45)\nresult = tuple_to_float(test_tup)\nprint(result)  # Output: 1.45\n\n# Test the function with another tuple\ntest_tup = (3, 14159)\nresult = tuple_to_float(test_tup)\nprint(result)  # Output: 3.14159 ",
        "generated_testcode": "assert tuple_to_float((1, 2, 3, 4, 5) == 12345.0)\n",
        "test": "assert tuple_to_float((4, 56)) == 4.56\nassert tuple_to_float((7, 256)) == 7.256\nassert tuple_to_float((8, 123)) == 8.123",
        "canonical_solution": "def tuple_to_float(test_tup):\r\n  res = float('.'.join(str(ele) for ele in test_tup))\r\n  return (res) "
    },
    {
        "number": 554,
        "prompt": "Write a python function to find odd numbers from a mixed list.\ndef Split(list): \n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": true,
        "answer": "    odd_numbers = [] \n    even_numbers = [] \n    for num in list: \n        if num % 2 != 0: \n            odd_numbers.append(num) \n        else: \n            even_numbers.append(num) \n    return odd_numbers \n  \n# Driver Code \nlist = [1, 2, 3, 4, 5, 6, 7, 8, 9] \nresult = Split(list) \nprint(\"Odd numbers in the list are:\", result) ",
        "generated_testcode": "assert Split([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 3, 5, 7, 9]\n",
        "test": "assert Split([1,2,3,4,5,6]) == [1,3,5]\nassert Split([10,11,12,13]) == [11,13]\nassert Split([7,8,9,1]) == [7,9,1]",
        "canonical_solution": "def Split(list): \r\n    od_li = [] \r\n    for i in list: \r\n        if (i % 2 != 0): \r\n            od_li.append(i)  \r\n    return od_li"
    },
    {
        "number": 555,
        "prompt": "Write a python function to find the difference between sum of cubes of first n natural numbers and the sum of first n natural numbers.\ndef difference(n) :  \n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    sum_of_cubes = 0  \n    sum_of_numbers = 0  \n    for i in range(1, n+1):  \n        sum_of_cubes += i ** 3  \n        sum_of_numbers += i  \n    return abs(sum_of_cubes - sum_of_numbers**2)  \n  \nn = int(input(\"Enter a number: \"))  \nprint(\"The difference between sum of cubes and square of sum of first\", n, \"natural numbers is\", difference(n)) ",
        "generated_testcode": "assert difference(5) == 125\n",
        "test": "assert difference(3) == 30\nassert difference(5) == 210\nassert difference(2) == 6",
        "canonical_solution": "def difference(n) :  \r\n    S = (n*(n + 1))//2;  \r\n    res = S*(S-1);  \r\n    return res;  "
    },
    {
        "number": 556,
        "prompt": "Write a python function to count the pairs with xor as an odd number.\ndef find_Odd_Pair(A,N) : \n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    count = 0\n    for i in range(0,N) : \n        for j in range(i + 1, N) : \n            if (A[i] ^ A[j]) % 2 != 0 : \n                count += 1\n    return count \n\n# Example usage: \nA = [1, 2, 3, 4, 5, 6, 7, 8, 9] \nN = len(A) \nprint(\"Total pairs with odd XOR are\", find_Odd_Pair(A, N)) ",
        "generated_testcode": "assert find_Odd_Pair([1,2,3,4,5,6,7,8,9], 6) == 3\n",
        "test": "assert find_Odd_Pair([5,4,7,2,1],5) == 6\nassert find_Odd_Pair([7,2,8,1,0,5,11],7) == 12\nassert find_Odd_Pair([1,2,3],3) == 2",
        "canonical_solution": "def find_Odd_Pair(A,N) : \r\n    oddPair = 0\r\n    for i in range(0,N) :  \r\n        for j in range(i+1,N) :  \r\n            if ((A[i] ^ A[j]) % 2 != 0):  \r\n                oddPair+=1  \r\n    return oddPair  "
    },
    {
        "number": 557,
        "prompt": "Write a function to toggle characters case in a string.\ndef toggle_string(string):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    new_string = ''\n    for char in string:\n        if char.islower():\n            new_string += char.upper()\n        else:\n            new_string += char.lower()\n    return new_string\n\n# Example usage:\nprint(toggle_string(\"hEllO wOrLd\"))  # Output: \"HeLLo WoRlD\"\nprint(toggle_string(\"Pythonist 2.0\"))  # Output: \"pYTHONIST 2.0\"\nprint(toggle_string(\"Hello123world\"))  # Output: \"hELLO123WORLD\" ",
        "generated_testcode": "assert toggle_string(\"Hello, World!\") == \"hELLO, wORLD!\"\n",
        "test": "assert toggle_string(\"Python\")==(\"pYTHON\")\nassert toggle_string(\"Pangram\")==(\"pANGRAM\")\nassert toggle_string(\"LIttLE\")==(\"liTTle\")",
        "canonical_solution": "def toggle_string(string):\r\n string1 = string.swapcase()\r\n return string1"
    },
    {
        "number": 558,
        "prompt": "Write a python function to find the digit distance between two integers.\ndef digit_distance_nums(n1, n2):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": true,
        "answer": "    # Convert integers to strings\n    n1_str = str(n1)\n    n2_str = str(n2)\n\n    # Get the length of the longer string\n    max_len = max(len(n1_str), len(n2_str))\n\n    # Convert both integers to equal length strings by padding with leading zeroes\n    n1_str = n1_str.zfill(max_len)\n    n2_str = n2_str.zfill(max_len)\n\n    # Initialize the distance variable\n    distance = 0\n\n    # Iterate through the strings, comparing digits\n    for i in range(max_len):\n        if n1_str[i] != n2_str[i]:\n            distance += 1\n\n    # Return the distance\n    return distance\n\n# Test the function with some sample inputs\nprint(digit_distance_nums(1234, 5678))  # Output: 8\nprint(digit_distance_nums(5678, 1234))  # Output: 8\nprint(digit_distance_nums(123, 456))   # Output: 9\nprint(digit_distance_nums(123, 123))   # Output: 0\n",
        "generated_testcode": "assert digit_distance_nums(123, 456) == 3\n",
        "test": "assert digit_distance_nums(1,2) == 1\nassert digit_distance_nums(23,56) == 6\nassert digit_distance_nums(123,256) == 7",
        "canonical_solution": "def digit_distance_nums(n1, n2):\r\n         return sum(map(int,str(abs(n1-n2))))"
    },
    {
        "number": 559,
        "prompt": "Write a function to find the largest sum of contiguous subarray in the given array.\ndef max_sub_array_sum(a, size):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    if size <= 0:\n        return 0\n\n    max_so_far = a[0]\n    max_ending_here = a[0]\n\n    for i in range(1, size):\n        max_ending_here = max(a[i], max_ending_here + a[i])\n        max_so_far = max(max_so_far, max_ending_here)\n\n    return max_so_far\n\n\n# Testing the function\na = [-2, -3, 4, -1, -2, 1, 5, -3]\nprint(max_sub_array_sum(a, len(a)))\n\n# Output: 7\n# Explanation: The largest sum contiguous subarray is [4, -1, 1, 5] with a sum of 6.\n\n# Time Complexity: O(n)\n# Space Complexity: O(1)\n\n# In the above code, we are using Kadane's algorithm to find the maximum subarray sum. The time complexity of this algorithm is O(n) and space complexity is O(1) as we are using constant space. ",
        "generated_testcode": "assert max_sub_array_sum([1, -2, 3, 4, -1, 5, 2, -1, 6, 2, -5, 4], 9) == 13\n",
        "test": "assert max_sub_array_sum([-2, -3, 4, -1, -2, 1, 5, -3], 8) == 7\nassert max_sub_array_sum([-3, -4, 5, -2, -3, 2, 6, -4], 8) == 8\nassert max_sub_array_sum([-4, -5, 6, -3, -4, 3, 7, -5], 8) == 10",
        "canonical_solution": "def max_sub_array_sum(a, size):\r\n  max_so_far = 0\r\n  max_ending_here = 0\r\n  for i in range(0, size):\r\n    max_ending_here = max_ending_here + a[i]\r\n    if max_ending_here < 0:\r\n      max_ending_here = 0\r\n    elif (max_so_far < max_ending_here):\r\n      max_so_far = max_ending_here\r\n  return max_so_far"
    },
    {
        "number": 560,
        "prompt": "Write a function to find the union of elements of the given tuples.\ndef union_elements(test_tup1, test_tup2):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": true,
        "answer": "    result = set(test_tup1).union(set(test_tup2))\n    return tuple(result)\n\n\n# Test the function with sample inputs\ntest_tup1 = (1, 2, 3, 4)\ntest_tup2 = (2, 4, 5, 6)\nprint(union_elements(test_tup1, test_tup2))  # Output: (1, 2, 3, 4, 5, 6)\n\ntest_tup1 = (1, 2, 3, 4, 5)\ntest_tup2 = (4, 5, 6, 7)\nprint(union_elements(test_tup1, test_tup2))  # Output: (1, 2, 3, 4, 5, 6, 7)\n\ntest_tup1 = (1, 2, 3)\ntest_tup2 = (4, 5, 6)\nprint(union_elements(test_tup1, test_tup2))  # Output: (1, 2, 3, 4, 5, 6)\n\ntest_tup1 = (1, 2, 3)\ntest_tup2 = (2, 3, 4)\nprint(union_elements(test_tup1, test_tup2))  # Output: (1, 2, 3, 4) ",
        "generated_testcode": "assert union_elements((1, 2, 3, 4, 5), (4, 5, 6, 7)) == (1, 2, 3, 4, 5, 6, 7)\n",
        "test": "assert union_elements((3, 4, 5, 6),(5, 7, 4, 10) ) == (3, 4, 5, 6, 7, 10)\nassert union_elements((1, 2, 3, 4),(3, 4, 5, 6) ) == (1, 2, 3, 4, 5, 6)\nassert union_elements((11, 12, 13, 14),(13, 15, 16, 17) ) == (11, 12, 13, 14, 15, 16, 17)",
        "canonical_solution": "def union_elements(test_tup1, test_tup2):\r\n  res = tuple(set(test_tup1 + test_tup2))\r\n  return (res) "
    },
    {
        "number": 561,
        "prompt": "Write a function to assign with each element, its pair elements from other similar pairs in the given tuple.\ndef assign_elements(test_list):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": true,
        "answer": "    result = []\n    for i in range(len(test_list)):\n        if i % 2 == 0:\n            result.append((test_list[i], test_list[i+1]) if i+1 < len(test_list) else (test_list[i], None))\n    return result\n\n# Example usage:\ntest_list = (1, 2, 3, 4, 5, 6, 7, 8)\nprint(assign_elements(test_list))  # Output: [(1, 2), (3, 4), (5, 6), (7, 8), (8, None)]\n\n# Another example:\ntest_list = (1, 2, 3)\nprint(assign_elements(test_list))  # Output: [(1, 2), (3, None)]\n\n# Time Complexity: O(n)\n# Space Complexity: O(n)\n\n# Alternate solution:\ndef assign_elements(test_list):\n    result = []\n    for i in range(0, len(test_list), 2):\n        if i + 1 < len(test_list):\n            result.append((test_list[i], test_list[i+1]))\n        else:\n            result.append((test_list[i], None))\n    return result\n\n# Example usage:\ntest_list = (1, 2, 3, 4, 5, 6, 7, 8)",
        "generated_testcode": "",
        "test": "assert assign_elements([(5, 3), (7, 5), (2, 7), (3, 8), (8, 4)] ) == {3: [8], 5: [3], 7: [5], 2: [7], 8: [4], 4: []}\nassert assign_elements([(6, 4), (9, 4), (3, 8), (4, 9), (9, 5)] ) == {4: [9], 6: [4], 9: [4, 5], 8: [], 3: [8], 5: []}\nassert assign_elements([(6, 2), (6, 8), (4, 9), (4, 9), (3, 7)] ) == {2: [], 6: [2, 8], 8: [], 9: [], 4: [9, 9], 7: [], 3: [7]}",
        "canonical_solution": "def assign_elements(test_list):\r\n  res = dict()\r\n  for key, val in test_list:\r\n    res.setdefault(val, [])\r\n    res.setdefault(key, []).append(val)\r\n  return (res) "
    },
    {
        "number": 562,
        "prompt": "Write a python function to find the maximum length of sublist.\ndef Find_Max_Length(lst):  \n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    max_length = 0\n    n = len(lst)\n    for i in range(n):  \n        count = 1\n        for j in range(i+1, n): \n            if lst[j] - lst[i] == j - i:  \n                count += 1\n            else:  \n                break\n        max_length = max(max_length, count)  \n    return max_length  \n  \n# Driver code  \nlst = [3, 7, 8, 11, 12, 15, 16, 23, 25]  \nprint(\"Length of maximum sublist is\", Find_Max_Length(lst)) ",
        "generated_testcode": "assert Find_Max_Length([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 10\n",
        "test": "assert Find_Max_Length([[1],[1,4],[5,6,7,8]]) == 4\nassert Find_Max_Length([[0,1],[2,2,],[3,2,1]]) == 3\nassert Find_Max_Length([[7],[22,23],[13,14,15],[10,20,30,40,50]]) == 5",
        "canonical_solution": "def Find_Max_Length(lst):  \r\n    maxLength = max(len(x) for x in lst )\r\n    return maxLength "
    },
    {
        "number": 563,
        "prompt": "Write a function to extract values between quotation marks of a string.\ndef extract_values(text):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": true,
        "answer": "    result = []\n    index = 0\n    while index < len(text):\n        if text[index] == '\"':\n            start = index + 1\n            end = text.find('\"', start)\n            result.append(text[start:end])\n            index = end + 1\n        else:\n            index += 1\n    return result\n\n\n# Test the function with some examples\nprint(extract_values('\"hello\" world \"hi\" \"there\"'))  # [\"hello\", \"hi\", \"there\"]\nprint(extract_values('\"hello\" world'))  # [\"hello\"]\nprint(extract_values('hello world'))  # []\nprint(extract_values('\"hello\" \"hi\" world \"there\"'))  # [\"hello\", \"hi\", \"there\"]\nprint(extract_values('\"hello\" world \"hi\" \"there\" 123'))  # [\"hello\", \"hi\", \"there\"]\nprint(extract_values('\"hello\" world \"hi\" \"there\" \"123\"'))  # [\"hello\", \"hi\", \"there\", \"123\"]\nprint(extract_values('\"hello\" world \"hi\" \"there\" \"123\" 456'))  # [\"hello\", \"hi\", \"there\", \"123\"]\nprint(extract_values('\"hello\" world \"hi\" \"there\" \"123\" 456 \"foo\"'))  # [\"hello\", \"hi\", \"there\", \"123\", \"foo\"]\n",
        "generated_testcode": "assert extract_values(\"Hello, world!\") == []\n",
        "test": "assert extract_values('\"Python\", \"PHP\", \"Java\"')==['Python', 'PHP', 'Java']\nassert extract_values('\"python\",\"program\",\"language\"')==['python','program','language']\nassert extract_values('\"red\",\"blue\",\"green\",\"yellow\"')==['red','blue','green','yellow']",
        "canonical_solution": "import re\r\ndef extract_values(text):\r\n return (re.findall(r'\"(.*?)\"', text))"
    },
    {
        "number": 564,
        "prompt": "Write a python function to count unequal element pairs from the given array.\ndef count_Pairs(arr,n): \n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    count = 0\n    for i in range(n-1): \n        for j in range(i+1,n): \n            if arr[i] != arr[j]: \n                count+=1\n    return count \n  \n# Test the function with example array \narr = [1, 2, 2, 3, 4, 5] \nn = len(arr) \nprint(count_Pairs(arr, n)) ",
        "generated_testcode": "assert count_Pairs([1,2,3,4,5,6,7,8,9,10],7) == 35\n",
        "test": "assert count_Pairs([1,2,1],3) == 2\nassert count_Pairs([1,1,1,1],4) == 0\nassert count_Pairs([1,2,3,4,5],5) == 10",
        "canonical_solution": "def count_Pairs(arr,n): \r\n    cnt = 0; \r\n    for i in range(n): \r\n        for j in range(i + 1,n): \r\n            if (arr[i] != arr[j]): \r\n                cnt += 1; \r\n    return cnt; "
    },
    {
        "number": 565,
        "prompt": "Write a python function to split a string into characters.\ndef split(word): \n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    return list(word)\n\n# Example usage:\nprint(split(\"hello\")) # Output: ['h', 'e', 'l', 'l', 'o'] ",
        "generated_testcode": "assert split(\"hello\") == ['h', 'e', 'l', 'l', 'o']\n",
        "test": "assert split('python') == ['p','y','t','h','o','n']\nassert split('Name') == ['N','a','m','e']\nassert split('program') == ['p','r','o','g','r','a','m']",
        "canonical_solution": "def split(word): \r\n    return [char for char in word] "
    },
    {
        "number": 566,
        "prompt": "Write a function to get the sum of a non-negative integer.\ndef sum_digits(n):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": true,
        "answer": "    if n == 0:\n        return 0\n    else:\n        return n % 10 + sum_digits(n // 10)\n\n\n# Test cases\nprint(sum_digits(123))  # Output: 6\nprint(sum_digits(456))  # Output: 15\nprint(sum_digits(789))  # Output: 24\nprint(sum_digits(0))  # Output: 0\nprint(sum_digits(1000))  # Output: 1\nprint(sum_digits(1234567))  # Output: 28\n\n# Explanation:\n# The function checks if the input integer n is 0. If it is, it returns 0. If not, it takes the last digit of the integer by using the modulo operator and adds it to the sum of the remaining digits obtained by recursively calling the function with the integer divided by 10.\n# Example: sum_digits(123) = 3 + sum_digits(12) = 3 + (2 + sum_digits(1)) = 5 + 3 = 8\n#          sum_digits(1) = 1 + 0 = 1\n#          The function will continue to divide the integer by 10 until it is 0. At this point, it will return 0, which will be added to the last digit and the sum will be 15. ",
        "generated_testcode": "assert sum_digits(123) == 6\n",
        "test": "assert sum_digits(345)==12\nassert sum_digits(12)==3\nassert sum_digits(97)==16",
        "canonical_solution": "def sum_digits(n):\r\n  if n == 0:\r\n    return 0\r\n  else:\r\n    return n % 10 + sum_digits(int(n / 10))"
    },
    {
        "number": 567,
        "prompt": "Write a function to check whether a specified list is sorted or not.\ndef issort_list(list1):\n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    for i in range(len(list1)-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True\n\n\n# Test the function with a sample list\nlist1 = [1, 2, 3, 4, 5, 6, 7, 8, 9]\nprint(issort_list(list1)) # Output: True\n\nlist2 = [1, 2, 4, 3, 5, 6, 7, 8]\nprint(issort_list(list2)) # Output: False\n\n# Using the function in a loop to check all the lists in a list\nlists = [[1, 2, 3, 4, 5, 6, 7, 8], [1, 2, 4, 3, 5, 6, 7], [9, 8, 7, 6, 5, 4, 3], [1, 2, 3, 4, 5, 5, 6], [1, 2, 3, 3, 4, 5, 6], [1, 2, 3, 4, 4, 5, 6]]\nfor lst in lists:\n    if issort_list(lst):\n        print(lst, \"is sorted\")\n    else:\n        print(lst, \"is not sorted\")\n",
        "generated_testcode": "assert issort_list([1, 2, 3, 4, 5, 6]) == True\n",
        "test": "assert issort_list([1,2,4,6,8,10,12,14,16,17])==True\nassert issort_list([1, 2, 4, 6, 8, 10, 12, 14, 20, 17])==False\nassert issort_list([1, 2, 4, 6, 8, 10,15,14,20])==False",
        "canonical_solution": "def issort_list(list1):\r\n    result = all(list1[i] <= list1[i+1] for i in range(len(list1)-1))\r\n    return result"
    },
    {
        "number": 568,
        "prompt": "Write a function to create a list of empty dictionaries.\ndef empty_list(length):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": true,
        "answer": "    lst = []\n    for i in range(length):\n        lst.append({})\n    return lst\n\n# Test the function with 5 empty dictionaries\nprint(empty_list(5))\n\n# Create a function to add key-value pairs to each dictionary in a list of dictionaries\ndef add_to_dict_list(lst, key, value):\n    for d in lst:\n        d[key] = value\n    return lst\n\n# Test the function with a list of 5 dictionaries and add a key-value pair\nlst = [{'name': 'John'}, {'name': 'Jane'}, {'name': 'Bob'}, {'name': 'Alice'}, {'name': 'Mike'}]\nlst = add_to_dict_list(lst, 'age', 25)\nprint(lst)\n\n# Create a function to add multiple key-value pairs to a dictionary\ndef add_multiple_to_dict(d, **kwargs):\n    for key, value in kwargs.items():\n        d[key] = value\n    return d\n\n# Test the function with a dictionary and multiple key-value pairs\nd = {}\nadd_multiple_to_dict(d, name='John', age=25, gender='male')\nprint(d)\n\n# Create a function to return the value of a key in a list of dictionaries\ndef get_dict_value(lst, key):\n    for d in lst:\n        if key in d:\n            return d[key]\n    return None\n\n# Test the function",
        "generated_testcode": "assert empty_list(3) == [{}, {}, {}]\n",
        "test": "assert empty_list(5)==[{},{},{},{},{}]\nassert empty_list(6)==[{},{},{},{},{},{}]\nassert empty_list(7)==[{},{},{},{},{},{},{}]",
        "canonical_solution": "def empty_list(length):\r\n empty_list = [{} for _ in range(length)]\r\n return empty_list"
    },
    {
        "number": 569,
        "prompt": "Write a function to sort each sublist of strings in a given list of lists.\ndef sort_sublists(list1):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    for sublist in list1:\n        sublist.sort()\n    return list1\n\n# Example usage:\nlist1 = [['apple', 'banana', 'cherry'], ['dog', 'cat', 'bird'], ['apple', 'cat', 'apple']]\nprint(sort_sublists(list1)) # Output: [['apple', 'banana', 'cherry'], ['bird', 'cat', 'dog'], ['apple', 'apple', 'cat']] ",
        "generated_testcode": "",
        "test": "assert sort_sublists([['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange']])==[['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\nassert sort_sublists([['green', 'orange'], ['black'], ['green', 'orange'], ['white']])==[['green', 'orange'], ['black'], ['green', 'orange'], ['white']]\nassert sort_sublists([['a','b'],['d','c'],['g','h'] , ['f','e']])==[['a', 'b'], ['c', 'd'], ['g', 'h'], ['e', 'f']]",
        "canonical_solution": "def sort_sublists(list1):\r\n    result = list(map(sorted,list1)) \r\n    return result"
    },
    {
        "number": 570,
        "prompt": "Write a function to remove words from a given list of strings containing a character or string.\ndef remove_words(list1, charlist):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    result = []\n    for word in list1:\n        for char in charlist:\n            if char in word:\n                result.append(word)\n    return result\n\n# Example usage:\nlist1 = [\"apple\", \"banana\", \"cherry\", \"grape\", \"kiwi\", \"orange\"]\ncharlist = [\"e\", \"r\"]\nprint(remove_words(list1, charlist))  # Output: [\"cherry\", \"orange\"]\nlist2 = [\"hello\", \"world\", \"python\", \"programming\"]\ncharlist2 = [\"w\", \"o\"]\nprint(remove_words(list2, charlist2))  # Output: [\"hello\", \"programming\"] ",
        "generated_testcode": "assert remove_words(['hello', 'world', 'python', 'java', 'javascript', 'c++'], ['o', '+']) == ['hell', 'w', 'pyth', 'jav', 'c']\n",
        "test": "assert remove_words(['Red color', 'Orange#', 'Green', 'Orange @', \"White\"],['#', 'color', '@'])==['Red', '', 'Green', 'Orange', 'White']\nassert remove_words(['Red &', 'Orange+', 'Green', 'Orange @', 'White'],['&', '+', '@'])==['Red', '', 'Green', 'Orange', 'White']\nassert remove_words(['Red &', 'Orange+', 'Green', 'Orange @', 'White'],['@'])==['Red &', 'Orange+', 'Green', 'Orange', 'White']",
        "canonical_solution": "def remove_words(list1, charlist):\r\n    new_list = []\r\n    for line in list1:\r\n        new_words = ' '.join([word for word in line.split() if not any([phrase in word for phrase in charlist])])\r\n        new_list.append(new_words)\r\n    return new_list"
    },
    {
        "number": 571,
        "prompt": "Write a function to find maximum possible sum of disjoint pairs for the given array of integers and a number k.\ndef max_sum_pair_diff_lessthan_K(arr, N, K): \n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    arr.sort() \n    left, right = 0, 1\n    max_sum = 0\n    while right < N: \n        if arr[right] - arr[left] < K: \n            max_sum = max(max_sum, arr[right] - arr[left]) \n            right += 1\n        elif arr[right] - arr[left] >= K: \n            left += 1\n        if arr[right] - arr[left] >= K and arr[right] - arr[left] <= 2 * K: \n            max_sum = max(max_sum, arr[right] - arr[left]) \n    return max_sum \n\n# example usage:\narr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] \nN = len(arr) \nK = 5\nprint(max_sum_pair_diff_lessthan_K(arr, N, K)) # Output: 8 ",
        "generated_testcode": "assert max_sum_pair_diff_lessthan_K([1, 2, 3, 4, 5, 6, 7], 3) == 10\n",
        "test": "assert max_sum_pair_diff_lessthan_K([3, 5, 10, 15, 17, 12, 9], 7, 4) == 62\nassert max_sum_pair_diff_lessthan_K([5, 15, 10, 300], 4, 12) == 25\nassert max_sum_pair_diff_lessthan_K([1, 2, 3, 4, 5, 6], 6, 6) == 21",
        "canonical_solution": "def max_sum_pair_diff_lessthan_K(arr, N, K): \r\n\tarr.sort() \r\n\tdp = [0] * N \r\n\tdp[0] = 0\r\n\tfor i in range(1, N): \r\n\t\tdp[i] = dp[i-1] \r\n\t\tif (arr[i] - arr[i-1] < K): \r\n\t\t\tif (i >= 2): \r\n\t\t\t\tdp[i] = max(dp[i], dp[i-2] + arr[i] + arr[i-1]); \r\n\t\t\telse: \r\n\t\t\t\tdp[i] = max(dp[i], arr[i] + arr[i-1]); \r\n\treturn dp[N - 1]"
    },
    {
        "number": 572,
        "prompt": "Write a python function to remove two duplicate numbers from a given number of lists.\ndef two_unique_nums(nums):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": true,
        "answer": "    seen = set()\n    result = []\n    for num in nums:\n        if num not in seen:\n            seen.add(num)\n            result.append(num)\n    return result\n\n# Test the function with example inputs\nprint(two_unique_nums([1, 2, 3, 2, 4, 1, 5, 6, 7, 8, 6]))  # Output: [1, 2, 3, 4, 5, 7, 8]\nprint(two_unique_nums([1, 2, 3, 2, 4, 5, 6, 7, 8, 6]))  # Output: [1, 3, 4, 5]\nprint(two_unique_nums([1, 2, 3, 4, 5, 6, 7, 8, 9]))  # Output: [1, 2, 3, 4, 5, 6, 7, 8, 9]\nprint(two_unique_nums([]))  # Output: []\n\n# Time Complexity: O(n)\n# Space Complexity: O(n)\n\n# This function uses a set to keep track of the unique numbers and a list to store the output. It iterates through the input list and checks if each number is already in the set. If it's not, it adds it to the set and appends it to the output list. If it is, it ski",
        "generated_testcode": "",
        "test": "assert two_unique_nums([1,2,3,2,3,4,5]) == [1, 4, 5]\nassert two_unique_nums([1,2,3,2,4,5]) == [1, 3, 4, 5]\nassert two_unique_nums([1,2,3,4,5]) == [1, 2, 3, 4, 5]",
        "canonical_solution": "def two_unique_nums(nums):\r\n  return [i for i in nums if nums.count(i)==1]"
    },
    {
        "number": 573,
        "prompt": "Write a python function to calculate the product of the unique numbers of a given list.\ndef unique_product(list_data):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    result = 1\n    unique = set(list_data)\n    for i in unique:\n        result *= i\n    return result\n\n# Test the function with the sample input\nsample_list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nprint(unique_product(sample_list))  # Output: 36288800\n\n# Test the function with an empty list\nprint(unique_product([]))  # Output: 1\n\n# Test the function with a list with all the same numbers\nprint(unique_product([1, 1, 1, 1, 1, 1])  # Output: 1\n\n# Test the function with negative numbers\nprint(unique_product([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10]))  # Output: -3628800\n\n# Test the function with a list of strings\nprint(unique_product(['a', 'b', 'c', 'd', 'e']))  # Output: TypeError\n\n# Test the function with a list containing a mix of numbers and strings\nprint(unique_product([1, 2, 'a', 3, 'b', 4, 'c', 5, 'd', 6]))  # Output: TypeError\n\n# Test the function with a list containing only one number\nprint(unique_product([10])  # Output",
        "generated_testcode": "assert unique_product([1, 2, 3, 4, 5, 6]) == 120\n",
        "test": "assert unique_product([10, 20, 30, 40, 20, 50, 60, 40]) ==  720000000\nassert unique_product([1, 2, 3, 1,]) == 6\nassert unique_product([7, 8, 9, 0, 1, 1]) == 0",
        "canonical_solution": "def unique_product(list_data):\r\n    temp = list(set(list_data))\r\n    p = 1\r\n    for i in temp:\r\n        p *= i\r\n    return p"
    },
    {
        "number": 574,
        "prompt": "Write a function to find the surface area of a cylinder.\ndef surfacearea_cylinder(r,h):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    pi = 3.14\n    return 2*pi*r*r + 2*pi*r*h\n\n# Test the function\nprint(surfacearea_cylinder(5,10)) # 314.0\n\n# Test with different values\nprint(surfacearea_cylinder(10,5)) # 628.0\nprint(surfacearea_cylinder(3,20)) # 628.0\nprint(surfacearea_cylinder(1,100)) # 314.0\n\n# Create a function to find the volume of a sphere\ndef volume_sphere(r):\n    pi = 3.14\n    return (4/3)*pi*r**3\n\n# Test the function\nprint(volume_sphere(5)) # 523.6\nprint(volume_sphere(10)) # 41887.6\nprint(volume_sphere(1)) # 418.7\n\n# Create a function to find the volume of a cuboid\ndef volume_cuboid(l,b,h):\n    return l*b*h\n\n# Test the function\nprint(volume_cuboid(5,5,5)) # 125\nprint(volume_cuboid(10,10,10)) # 10000\nprint(volume_cuboid(3,4,5)) # 60\n\n# Create a function",
        "generated_testcode": "assert surfacearea_cylinder(3, 5) == 314.1592653589793936\n",
        "test": "assert surfacearea_cylinder(10,5)==942.45\nassert surfacearea_cylinder(4,5)==226.18800000000002\nassert surfacearea_cylinder(4,10)==351.848",
        "canonical_solution": "def surfacearea_cylinder(r,h):\r\n  surfacearea=((2*3.1415*r*r) +(2*3.1415*r*h))\r\n  return surfacearea"
    },
    {
        "number": 575,
        "prompt": "Write a python function to find nth number in a sequence which is not a multiple of a given number.\ndef count_no (A,N,L,R): \n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    count = 0 \n    for i in range(L,R+1): \n        if i%A != 0: \n            count += 1\n            if count == N: \n                return i \n    return -1\n  \n# Test the function \nN = 2\nA = 3\nL = 1\nR = 10\nprint(count_no(A,N,L,R)) ",
        "generated_testcode": "assert count_no(2,3,10) == 12\n",
        "test": "assert count_no(2,3,1,10) == 5\nassert count_no(3,6,4,20) == 11\nassert count_no(5,10,4,20) == 16",
        "canonical_solution": "def count_no (A,N,L,R): \r\n    count = 0\r\n    for i in range (L,R + 1): \r\n        if (i % A != 0): \r\n            count += 1\r\n        if (count == N): \r\n            break\r\n    return (i) "
    },
    {
        "number": 576,
        "prompt": "Write a python function to check whether an array is subarray of another or not.\ndef is_Sub_Array(A,B,n,m): \n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    for i in range(n-m+1): \n        j = 0\n        k = 0\n        while k < m: \n            if A[i+k] != B[k]: \n                break\n            k += 1\n        if k == m: \n            return True\n    return False\n\n# Driver code \nA = [1, 5, 3, 2, 4, 6, 8] \nB = [5, 3, 2] \nn = len(A) \nm = len(B) \nif is_Sub_Array(A, B, n, m): \n    print(\"YES\") \nelse: \n    print(\"NO\") \n\n# Time Complexity : O(n*m) ",
        "generated_testcode": "assert is_Sub_Array([1,2,3,4,5,6,7,8,9],[2,4,6,8],7,4) == True\n",
        "test": "assert is_Sub_Array([1,4,3,5],[1,2],4,2) == False\nassert is_Sub_Array([1,2,1],[1,2,1],3,3) == True\nassert is_Sub_Array([1,0,2,2],[2,2,0],4,3) ==False",
        "canonical_solution": "def is_Sub_Array(A,B,n,m): \r\n    i = 0; j = 0; \r\n    while (i < n and j < m):  \r\n        if (A[i] == B[j]): \r\n            i += 1; \r\n            j += 1; \r\n            if (j == m): \r\n                return True;  \r\n        else: \r\n            i = i - j + 1; \r\n            j = 0;       \r\n    return False; "
    },
    {
        "number": 577,
        "prompt": "Write a python function to find the last digit in factorial of a given number.\ndef last_Digit_Factorial(n): \n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    if n == 0 or n == 1: \n        return 1\n    elif n % 2 == 0: \n        return last_Digit_Factorial(n - 1) + last_Digit_Factorial(n - 2) \n    else: \n        return last_Digit_Factorial(n - 1) - last_Digit_Factorial(n - 2) \n\n# Test the function with an example \nn = 10\nprint(\"The last digit in the factorial of\", n, \"is\", last_Digit_Factorial(n)) ",
        "generated_testcode": "assert last_Digit_Factorial(5) == 5\n",
        "test": "assert last_Digit_Factorial(4) == 4\nassert last_Digit_Factorial(21) == 0\nassert last_Digit_Factorial(30) == 0",
        "canonical_solution": "def last_Digit_Factorial(n): \r\n    if (n == 0): return 1\r\n    elif (n <= 2): return n  \r\n    elif (n == 3): return 6\r\n    elif (n == 4): return 4 \r\n    else: \r\n      return 0"
    },
    {
        "number": 578,
        "prompt": "Write a function to interleave lists of the same length.\ndef interleave_lists(list1,list2,list3):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": true,
        "answer": "    result = []\n    for i in range(len(list1)):\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n    return result\n\nlist1 = [1,2,3]\nlist2 = [4,5,6]\nlist3 = [7,8,9]\n\nprint(interleave_lists(list1,list2,list3))\n# Output: [1, 4, 7, 2, 5, 8, 3, 6, 9]\n\n# Here's how it works:\n# We use a loop to iterate through each element in the lists and append the elements to a new list in the order of list1, list2, list3, list1, list2, list3, ...\n# This continues until the end of the first list is reached.\n# Once the end of the first list is reached, we've interleaved all the elements, so we can return the result. ",
        "generated_testcode": "assert interleave_lists([1,2,3],[4,5,6],[7,8,9]) == [1,4,7,2,5,8,3,6,9]\n",
        "test": "assert interleave_lists([1,2,3,4,5,6,7],[10,20,30,40,50,60,70],[100,200,300,400,500,600,700])==[1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700]\nassert interleave_lists([10,20],[15,2],[5,10])==[10,15,5,20,2,10]\nassert interleave_lists([11,44], [10,15], [20,5])==[11,10,20,44,15,5]",
        "canonical_solution": "def interleave_lists(list1,list2,list3):\r\n    result = [el for pair in zip(list1, list2, list3) for el in pair]\r\n    return result"
    },
    {
        "number": 579,
        "prompt": "Write a function to find the dissimilar elements in the given two tuples.\ndef find_dissimilar(test_tup1, test_tup2):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    dissimilar_elements = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i] != test_tup2[i]:\n            dissimilar_elements.append(test_tup1[i])\n    return dissimilar_elements\n\n# Test the function with an example\ntest_tup1 = (1, 2, 3, 4, 5, 6)\ntest_tup2 = (1, 2, 4, 3, 5, 7)\nprint(find_dissimilar(test_tup1, test_tup2)) # Output: [6, 7]\n\n# Test the function with another example\ntest_tup1 = (1, 2, 3, 4, 5, 6)\ntest_tup2 = (1, 2, 3, 4, 5, 6)\nprint(find_dissimilar(test_tup1, test_tup2)) # Output: []\n\n# Test the function with another example\ntest_tup1 = (\"apple\", \"banana\", \"cherry\", \"date\", \"elderberry\")\ntest_tup2 = (\"apple\", \"banana\", \"cherry\", \"elderberry\", \"fig\")\nprint(find_dissimilar(test_tup1, test_tup2)) # Output: [\"date\"]\n\n# Test the function with another example\ntest_tup1 = (1, ",
        "generated_testcode": "assert find_dissimilar((1, 2, 3, 4, 5), (1, 2, 3, 4, 5)) == ()\n",
        "test": "assert find_dissimilar((3, 4, 5, 6), (5, 7, 4, 10)) == (3, 6, 7, 10)\nassert find_dissimilar((1, 2, 3, 4), (7, 2, 3, 9)) == (1, 4, 7, 9)\nassert find_dissimilar((21, 11, 25, 26), (26, 34, 21, 36)) == (34, 36, 11, 25)",
        "canonical_solution": "def find_dissimilar(test_tup1, test_tup2):\r\n  res = tuple(set(test_tup1) ^ set(test_tup2))\r\n  return (res) "
    },
    {
        "number": 580,
        "prompt": "Write a function to extract the even elements in the nested mixed tuple.\ndef even_ele(test_tuple, even_fnc): \n",
        "checkpoint": "13B",
        "pass": 7,
        "correct": true,
        "answer": "    \"\"\" \n    This function takes a nested tuple and a function as input. It flattens the nested tuple and then applies the function to each element. \n    \"\"\"\n    flattened_tuple = flatten_tuple(test_tuple)\n    result = []\n    for i in flattened_tuple:\n        if even_fnc(i):\n            result.append(i)\n    return tuple(result)\n\ndef flatten_tuple(nested_tuple):\n    \"\"\"\n    This function takes a nested tuple as input and returns a flattened tuple\n    \"\"\"\n    flattened_tuple = []\n    for i in nested_tuple:\n        if isinstance(i, tuple):\n            flattened_tuple.extend(flatten_tuple(i))\n        else:\n            flattened_tuple.append(i)\n    return flattened_tuple\n\n# Example usage:\n# nested_tuple = ((1,2,3), (4,5), (6, (7,8), 9), (10, 11, 12, (13, 14)) )\n# print(even_ele(nested_tuple, lambda x: x%2 == 0)) # Output: (2, 4, 6, 8, 10, 12)\n# print(even_ele(nested_tuple, lambda x: x%2 != 0)) # Output: (1, 3, 5, 7, 9, 11)\n",
        "generated_testcode": "",
        "test": "assert extract_even((4, 5, (7, 6, (2, 4)), 6, 8)) == (4, (6, (2, 4)), 6, 8)\nassert extract_even((5, 6, (8, 7, (4, 8)), 7, 9)) == (6, (8, (4, 8)))\nassert extract_even((5, 6, (9, 8, (4, 6)), 8, 10)) == (6, (8, (4, 6)), 8, 10)",
        "canonical_solution": "def even_ele(test_tuple, even_fnc): \r\n\tres = tuple() \r\n\tfor ele in test_tuple: \r\n\t\tif isinstance(ele, tuple): \r\n\t\t\tres += (even_ele(ele, even_fnc), ) \r\n\t\telif even_fnc(ele): \r\n\t\t\tres += (ele, ) \r\n\treturn res \r\ndef extract_even(test_tuple):\r\n  res = even_ele(test_tuple, lambda x: x % 2 == 0)\r\n  return (res) "
    },
    {
        "number": 581,
        "prompt": "Write a python function to find the surface area of the square pyramid.\ndef surface_Area(b,s): \n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    # calculate the height of the pyramid\n    h = (s**2 - b**2)**0.5\n    # calculate the surface area of the square base\n    base_area = b**2\n    # calculate the lateral surface area of the pyramid\n    lateral_area = 4 * b * h\n    # calculate the area of each face of the pyramid\n    face_area = b**2\n    # calculate the total surface area\n    total_area = base_area + lateral_area + 4 * face_area\n    # return the result\n    return total_area\n\n# test the function\nb = 12\ns = 24\nprint(surface_Area(b, s)) # output: 156.0\n\n# Write a function to find the volume of the square pyramid\ndef volume(b,s):\n    h = (s**2 - b**2)**0.5\n    return (1/3) * b**2 * h\n\n# test the function\nb = 12\ns = 24\nprint(volume(b, s)) # output: 36.0\n\n# Write a function to find the volume of the cube\ndef volume_cube(a):\n    return a**3\n\n# test the function\na = 5\nprint(volume_cube(a)) # output: 125\n\n# Write a function to find the volume of the cylinder\ndef volume_cylinder(r,h):\n",
        "generated_testcode": "assert surface_Area(4, 6) == 144.0\n",
        "test": "assert surface_Area(3,4) == 33\nassert surface_Area(4,5) == 56\nassert surface_Area(1,2) == 5",
        "canonical_solution": "def surface_Area(b,s): \r\n    return 2 * b * s + pow(b,2) "
    },
    {
        "number": 582,
        "prompt": "Write a function to check if a dictionary is empty or not.\ndef my_dict(dict1):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    if len(dict1) == 0:\n        return \"Dictionary is empty\"\n    else:\n        return \"Dictionary is not empty\"\n\n# Example usage:\nmy_dict({}) # Output: \"Dictionary is empty\"\nmy_dict({\"name\": \"John\", \"age\": 30}) # Output: \"Dictionary is not empty\"\n\n# Write a function to check if a string is palindrome or not\ndef palindrome_check(str1):\n    if str1 == str1[::-1]:\n        return True\n    else:\n        return False\n\n# Example usage:\npalindrome_check(\"racecar\") # Output: True\npalindrome_check(\"Python\") # Output: False\n\n# Write a function to convert a string to uppercase\ndef to_uppercase(str1):\n    return str1.upper()\n\n# Example usage:\nto_uppercase(\"hello\") # Output: \"HELLO\"\n\n# Write a function to convert a string to lowercase\ndef to_lowercase(str1):\n    return str1.lower()\n\n# Example usage:\nto_lowercase(\"HELLO\") # Output: \"hello\"\n\n# Write a function to check if a string is a valid email or not\ndef is_valid_email(email):\n    if \"@\" in email and \".\" in email:\n        return True\n    else:\n        return False\n\n# Example usage:\nis_valid_email(\"example@gmail.com\") # Output: True\nis_valid",
        "generated_testcode": "assert my_dict({}) == True\n",
        "test": "assert my_dict({10})==False\nassert my_dict({11})==False\nassert my_dict({})==True",
        "canonical_solution": "def my_dict(dict1):\r\n  if bool(dict1):\r\n     return False\r\n  else:\r\n     return True"
    },
    {
        "number": 583,
        "prompt": "Write a function for nth catalan number.\ndef catalan_number(num):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    if num == 0:\n        return 1\n    result = 1\n    for i in range(2, 2*num+1):\n        result *= i\n    result //= (num+1)\n    for i in range(1, num+1):\n        result //= i\n    return result\n\n# Test the function\nprint(catalan_number(0)) # Output: 1\nprint(catalan_number(1)) # Output: 1\nprint(catalan_number(2)) # Output: 2\nprint(catalan_number(3)) # Output: 5\nprint(catalan_number(4)) # Output: 14\nprint(catalan_number(5)) # Output: 42\nprint(catalan_number(6)) # Output: 132\nprint(catalan_number(7)) # Output: 429\nprint(catalan_number(8)) # Output: 1430\n\n# Time complexity: O(n^2)\n# Space complexity: O(1)\n",
        "generated_testcode": "assert catalan_number(0) == 1\n",
        "test": "assert catalan_number(10)==16796\nassert catalan_number(9)==4862\nassert catalan_number(7)==429",
        "canonical_solution": "def catalan_number(num):\r\n    if num <=1:\r\n         return 1   \r\n    res_num = 0\r\n    for i in range(num):\r\n        res_num += catalan_number(i) * catalan_number(num-i-1)\r\n    return res_num"
    },
    {
        "number": 584,
        "prompt": "Write a function to find all adverbs and their positions in a given sentence by using regex.\ndef find_adverbs(text):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    adverbs = re.findall(r'\\b\\w+ly\\b', text)\n    for index, adverb in enumerate(adverbs):\n        print(f'{adverb} found at position {index+1}')\n\ntext = input(\"Enter a sentence: \")\nfind_adverbs(text)\n\\end{code}\n\n\\begin{code}\nEnter a sentence: The cat is sleeping slowly and quietly.\nslowly found at position 5\nquietly found at position 12\n\\end{code}\n\nThis code works for finding all the adverbs in the sentence and printing their positions. However, I also want to print the word before and after each adverb, but I am not sure how to modify the regex pattern to get that information. I tried using lookbehind and lookahead but it's not working.\n\nAnswer: You can use positive lookbehind and lookahead to match a word boundary and a word character before and after the adverb:\n\n\\begin{code}\nimport re\n\ndef find_adverbs(text):\n    adverbs = re.findall(r'\\b(?<=\\w)(\\w+ly)\\b', text)\n    for index, adverb in enumerate(adverbs):\n        print(f'{adverb} found at position {index+1}')\n        print(f'Before: {re.search(r'(?<=\\b\\w)\\w+\\b', text[:text.index(adverb)])[0]}')\n       ",
        "generated_testcode": "assert find_adverbs(\"The dog is running quickly.\") == [(\"quickly\", 10)]\n",
        "test": "assert find_adverbs(\"Clearly, he has no excuse for such behavior.\") == '0-7: Clearly'\nassert find_adverbs(\"Please handle the situation carefuly\") == '28-36: carefuly'\nassert find_adverbs(\"Complete the task quickly\") == '18-25: quickly'",
        "canonical_solution": "import re\r\ndef find_adverbs(text):\r\n  for m in re.finditer(r\"\\w+ly\", text):\r\n    return ('%d-%d: %s' % (m.start(), m.end(), m.group(0)))"
    },
    {
        "number": 585,
        "prompt": "Write a function to find the n - expensive price items from a given dataset using heap queue algorithm.\ndef expensive_items(items,n):\n",
        "checkpoint": "13B",
        "pass": 7,
        "correct": true,
        "answer": "    import heapq\n    prices = [(item[1], item[0]) for item in items]\n    heapq.heapify(prices)\n    return [heapq.heappop(prices)[1] for i in range(n)]\n\n# Example usage:\nitems = [(\"item1\", 100), (\"item2\", 120), (\"item3\", 80), (\"item4\", 110), (\"item5\", 50), (\"item6\", 70), (\"item7\", 150), (\"item8\", 180)]\nn = 3\nprint(expensive_items(items, n)) # Output: ['item8', 'item7', 'item2'] ",
        "generated_testcode": "",
        "test": "assert expensive_items([{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}],1)==[{'name': 'Item-2', 'price': 555.22}]\nassert expensive_items([{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}, {'name': 'Item-3', 'price': 45.09}],2)==[{'name': 'Item-2', 'price': 555.22},{'name': 'Item-1', 'price': 101.1}]\nassert expensive_items([{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}, {'name': 'Item-3', 'price': 45.09},{'name': 'Item-4', 'price': 22.75}],1)==[{'name': 'Item-2', 'price': 555.22}]",
        "canonical_solution": "import heapq\r\ndef expensive_items(items,n):\r\n  expensive_items = heapq.nlargest(n, items, key=lambda s: s['price'])\r\n  return expensive_items"
    },
    {
        "number": 586,
        "prompt": "Write a python function to split the array and add the first part to the end.\ndef split_Arr(a,n,k):  \n",
        "checkpoint": "13B",
        "pass": 6,
        "correct": true,
        "answer": "    return a+a[:k] \n\n# Test the function with sample inputs \na = [1,2,3,4,5,6,7,8,9] \nn = len(a) \nk = 3\nprint(split_Arr(a,n,k)) #[1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3] ",
        "generated_testcode": "assert split_Arr([1,2,3,4,5,6,7,8,9],3,2) == [1,2,3,4,5,6,7,8,9,1,2]\n",
        "test": "assert split_Arr([12,10,5,6,52,36],6,2) == [5,6,52,36,12,10]\nassert split_Arr([1,2,3,4],4,1) == [2,3,4,1]\nassert split_Arr([0,1,2,3,4,5,6,7],8,3) == [3,4,5,6,7,0,1,2]",
        "canonical_solution": "def split_Arr(a,n,k):  \r\n   b = a[:k] \r\n   return (a[k::]+b[::]) "
    },
    {
        "number": 587,
        "prompt": "Write a function to convert a list to a tuple.\ndef list_tuple(listx):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": true,
        "answer": "    return tuple(listx)\n\n# Test the function\nprint(list_tuple([1, 2, 3, 4, 5, 6])) # Output: (1, 2, 3, 4, 5, 6) ",
        "generated_testcode": "assert list_tuple([1, 2, 3, 4, 5]) == (1, 2, 3, 4, 5)\n",
        "test": "assert list_tuple([5, 10, 7, 4, 15, 3])==(5, 10, 7, 4, 15, 3)\nassert list_tuple([2, 4, 5, 6, 2, 3, 4, 4, 7])==(2, 4, 5, 6, 2, 3, 4, 4, 7)\nassert list_tuple([58,44,56])==(58,44,56)",
        "canonical_solution": "def list_tuple(listx):\r\n  tuplex = tuple(listx)\r\n  return tuplex"
    },
    {
        "number": 588,
        "prompt": "Write a python function to find the difference between largest and smallest value in a given array.\ndef big_diff(nums):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    \"\"\"\n    nums: a list of integers\n    return: the difference between the largest and smallest element in nums\n    \"\"\"\n    if len(nums) == 0:\n        return 0\n    else:\n        return max(nums) - min(nums)\n\n# Test the function with some examples\nprint(big_diff([10, 2, 5, 15, 3]))  # should print 13\nprint(big_diff([-10, -5, -20, -7, -100]))  # should print 40\nprint(big_diff([10, 10, 10, 10, 10]))  # should print 0\nprint(big_diff([]))  # should print 0\n\n# Can you find a way to make the function more efficient? ",
        "generated_testcode": "assert big_diff([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 8\n",
        "test": "assert big_diff([1,2,3,4]) == 3\nassert big_diff([4,5,12]) == 8\nassert big_diff([9,2,3]) == 7",
        "canonical_solution": "def big_diff(nums):\r\n     diff= max(nums)-min(nums)\r\n     return diff"
    },
    {
        "number": 589,
        "prompt": "Write a function to find perfect squares between two given numbers.\ndef perfect_squares(a, b):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    perfect_squares_list = []\n    for i in range(a, b+1):\n        if int(i**0.5)**2 == i:\n            perfect_squares_list.append(i)\n    return perfect_squares_list\n\n\n# Test cases\nprint(perfect_squares(1, 25))  # [1, 4, 9, 16]\nprint(perfect_squares(10, 100))  # [16, 25, 36, 49, 64, 81, 100]\nprint(perfect_squares(32, 100))  # [36, 64, 100]\nprint(perfect_squares(10, 20))  # []\nprint(perfect_squares(1, 5))  # [1, 4]\nprint(perfect_squares(1, 2))  # [1]\nprint(perfect_squares(5, 5))  # [4]\nprint(perfect_squares(5, 6))  # [] ",
        "generated_testcode": "assert perfect_squares(1, 25) == [1, 4, 9, 16, 25]\n",
        "test": "assert perfect_squares(1,30)==[1, 4, 9, 16, 25]\nassert perfect_squares(50,100)==[64, 81, 100]\nassert perfect_squares(100,200)==[100, 121, 144, 169, 196]",
        "canonical_solution": "def perfect_squares(a, b):\r\n    lists=[]\r\n    for i in range (a,b+1):\r\n        j = 1;\r\n        while j*j <= i:\r\n            if j*j == i:\r\n                 lists.append(i)  \r\n            j = j+1\r\n        i = i+1\r\n    return lists"
    },
    {
        "number": 590,
        "prompt": "Write a function to convert polar coordinates to rectangular coordinates.\ndef polar_rect(x,y):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    r = math.sqrt(x**2 + y**2)\n    theta = math.atan(y/x)\n    if x > 0:\n        theta = theta\n    elif y > 0:\n        theta = math.pi/2 + theta\n    elif x < 0 and y > 0:\n        theta = math.pi + theta\n    elif x < 0 and y < 0:\n        theta = math.pi + theta\n    elif x == 0 and y > 0:\n        theta = math.pi/2\n    elif x == 0 and y < 0:\n        theta = 3*math.pi/2\n    else:\n        theta = 0\n    return (r*math.cos(theta), r*math.sin(theta))\nprint(polar_rect(3,4))\n\\end{code}\n\nThis code works for positive x and positive y, but for negative x and y, the conversion is not working correctly.  I have been trying to figure out what is wrong with the code for the past hour but I can't seem to find it.  Can anyone help me with this?\n\nComment: `math.atan(y/x)` will give the wrong value for negative `x`.\n\nComment: `math.atan` returns an angle in the range `[-pi/2, pi/2]`, you have to add 90 or 270 degrees to get the correct angle.\n\nComment: You also need to check for",
        "generated_testcode": "assert polar_rect(3, 45) == (3, 3)\n",
        "test": "assert polar_rect(3,4)==((5.0, 0.9272952180016122), (-2+2.4492935982947064e-16j))\nassert polar_rect(4,7)==((8.06225774829855, 1.0516502125483738), (-2+2.4492935982947064e-16j))\nassert polar_rect(15,17)==((22.67156809750927, 0.8478169733934057), (-2+2.4492935982947064e-16j))",
        "canonical_solution": "import cmath\r\ndef polar_rect(x,y):\r\n cn = complex(x,y)\r\n cn=cmath.polar(cn)\r\n cn1 = cmath.rect(2, cmath.pi)\r\n return (cn,cn1)"
    },
    {
        "number": 591,
        "prompt": "Write a python function to interchange the first and last elements in a list.\ndef swap_List(newList): \n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    length = len(newList) \n    newList[0], newList[length - 1] = newList[length - 1], newList[0] \n    return newList \n  \n#Testing the function \nnewList = [1, 2, 3, 4, 5, 6, 7, 8, 9] \nprint(\"Original List :\", newList) \nnewList = swap_List(newList) \nprint(\"New List :\", newList) ",
        "generated_testcode": "assert swap_List([1, 2, 3, 4, 5]) == [5, 2, 3, 4]\n",
        "test": "assert swap_List([12, 35, 9, 56, 24]) == [24, 35, 9, 56, 12]\nassert swap_List([1, 2, 3]) == [3, 2, 1]\nassert swap_List([4, 5, 6]) == [6, 5, 4]",
        "canonical_solution": "def swap_List(newList): \r\n    size = len(newList) \r\n    temp = newList[0] \r\n    newList[0] = newList[size - 1] \r\n    newList[size - 1] = temp  \r\n    return newList "
    },
    {
        "number": 592,
        "prompt": "Write a python function to find sum of product of binomial co-efficients.\ndef binomial_Coeff(n,k): \n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    res = 1\n    if k > n-k: \n        k = n-k\n    for i in range(0,k): \n        res = res * (n-i) \n        res = res // (i+1) \n    return res \n  \ndef sum_binomial_coeff(n,r): \n    sum = 0\n    for i in range(r+1): \n        sum += binomial_Coeff(n,i) \n    return sum \n  \n# Driver code \nn = 5\nr = 2\nprint(\"Sum of Binomial Coefficients is \",sum_binomial_coeff(n,r)) \n  ",
        "generated_testcode": "assert binomial_Coeff(5,3) == 10\n",
        "test": "assert sum_Of_product(3) == 15\nassert sum_Of_product(4) == 56\nassert sum_Of_product(1) == 1",
        "canonical_solution": "def binomial_Coeff(n,k): \r\n    C = [0] * (k + 1); \r\n    C[0] = 1; # nC0 is 1 \r\n    for i in range(1,n + 1):  \r\n        for j in range(min(i, k),0,-1): \r\n            C[j] = C[j] + C[j - 1]; \r\n    return C[k]; \r\ndef sum_Of_product(n): \r\n    return binomial_Coeff(2 * n,n - 1); "
    },
    {
        "number": 593,
        "prompt": "Write a function to remove leading zeroes from an ip address.\ndef removezero_ip(ip):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    # split the ip into octets\n    octets = ip.split(\".\")\n    new_ip = []\n    # iterate over each octet and remove leading zeros if there is any\n    for octet in octets:\n        octet = str(int(octet))\n        new_ip.append(octet)\n    # join the octets to form a new ip address\n    new_ip = \".\".join(new_ip)\n    return new_ip\n\n# test the function\nip = \"192.0168.001.001\"\nnew_ip = removezero_ip(ip)\nprint(new_ip) # should print \"192.168.1.1\"\n\n# another example\nip = \"255.0255.000.00\"\nnew_ip = removezero_ip(ip)\nprint(new_ip) # should print \"255.255.0.0\" ",
        "generated_testcode": "assert removezero_ip(\"192.0.1.1\") == \"192.1.1\"\n",
        "test": "assert removezero_ip(\"216.08.094.196\")==('216.8.94.196') \nassert removezero_ip(\"12.01.024\")==('12.1.24') \nassert removezero_ip(\"216.08.094.0196\")==('216.8.94.196') ",
        "canonical_solution": "import re\r\ndef removezero_ip(ip):\r\n string = re.sub('\\.[0]*', '.', ip)\r\n return string\r"
    },
    {
        "number": 594,
        "prompt": "Write a function to find the difference of first even and odd number of a given list.\ndef diff_even_odd(list1):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    odd = []\n    even = []\n    for i in list1:\n        if i%2 == 0:\n            even.append(i)\n        else:\n            odd.append(i)\n    if len(even) == 0:\n        return \"There is no even number in the list\"\n    else:\n        return abs(even[-1] - odd[-1])\n\n# Test the function with sample inputs\nlist1 = [1,2,3,4,5,6,7]\nprint(diff_even_odd(list1)) # Output: 5\n\nlist2 = [2,4,6,8,10]\nprint(diff_even_odd(list2)) # Output: 2\n\nlist3 = [1,3,5,7]\nprint(diff_even_odd(list3)) # Output: There is no even number in the list\n\nlist4 = [1,2,4,6,8]\nprint(diff_even_odd(list4)) # Output: 4\n\nlist5 = [2,4,6,8,10,12]\nprint(diff_even_odd(list5)) # Output: 0\n\nlist6 = [2,4,5,8]\nprint(diff_even_odd(list6)) # Output: 3\n\nlist7 = [1,2,3,4,5,6]\nprint(diff_even_odd(list7)) # Output: 0\n\nlist8 = [2,4",
        "generated_testcode": "assert diff_even_odd([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 6\n",
        "test": "assert diff_even_odd([1,3,5,7,4,1,6,8])==3\nassert diff_even_odd([1,2,3,4,5,6,7,8,9,10])==1\nassert diff_even_odd([1,5,7,9,10])==9",
        "canonical_solution": "def diff_even_odd(list1):\r\n    first_even = next((el for el in list1 if el%2==0),-1)\r\n    first_odd = next((el for el in list1 if el%2!=0),-1)\r\n    return (first_even-first_odd)"
    },
    {
        "number": 595,
        "prompt": "Write a python function to count minimum number of swaps required to convert one binary string to another.\ndef min_Swaps(str1,str2) : \n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    n = len(str1) \n    count = 0\n    for i in range(n) : \n        if str1[i] != str2[i] : \n            count += 1\n    return count\n\n# Driver code \nstr1 = \"10010101010\"\nstr2 = \"1110011100\"\nprint(\"Minimum swaps required to convert\",str1,\"to\",str2,\":\",min_Swaps(str1,str2)) \n\nstr1 = \"01010101010\"\nstr2 = \"1010101101\"\nprint(\"Minimum swaps required to convert\",str1,\"to\",str2,\":\",min_Swaps(str1,str2)) \n\nstr1 = \"1010101010\"\nstr2 = \"010101011\"\nprint(\"Minimum swaps required to convert\",str1,\"to\",str2,\":\",min_Swaps(str1,str2)) \n\n# This function will return 5, 2, and 3 respectively, as minimum number of swaps required to convert \n# \"100101010\" to \"110011001\", \"010101010\" to \"10101101\" and \"10101010\" to \"010101",
        "generated_testcode": "assert min_Swaps(\"101010\",\"010101\") == 2\n",
        "test": "assert min_Swaps(\"1101\",\"1110\") == 1\nassert min_Swaps(\"111\",\"000\") == \"Not Possible\"\nassert min_Swaps(\"111\",\"110\") == \"Not Possible\"",
        "canonical_solution": "def min_Swaps(str1,str2) : \r\n    count = 0\r\n    for i in range(len(str1)) :  \r\n        if str1[i] != str2[i] : \r\n            count += 1\r\n    if count % 2 == 0 : \r\n        return (count // 2) \r\n    else : \r\n        return (\"Not Possible\") "
    },
    {
        "number": 596,
        "prompt": "Write a function to find the size of the given tuple.\ndef tuple_size(tuple_list):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    return len(tuple_list)\n\n# Test the function with the given example\nprint(tuple_size(('apple', 'banana', 'cherry'))  # Output: 3\n\n# Test the function with another example\nprint(tuple_size((1, 2, 3, 4, 5))  # Output: 4\n\n# Test the function with an empty tuple\nprint(tuple_size(()  # Output: 0\n",
        "generated_testcode": "assert tuple_size((1, 2, 3, 4, 5, 6) == 5\n",
        "test": "assert tuple_size((\"A\", 1, \"B\", 2, \"C\", 3) ) == sys.getsizeof((\"A\", 1, \"B\", 2, \"C\", 3))\nassert tuple_size((1, \"Raju\", 2, \"Nikhil\", 3, \"Deepanshu\") ) == sys.getsizeof((1, \"Raju\", 2, \"Nikhil\", 3, \"Deepanshu\"))\nassert tuple_size(((1, \"Lion\"), ( 2, \"Tiger\"), (3, \"Fox\"), (4, \"Wolf\"))  ) == sys.getsizeof(((1, \"Lion\"), ( 2, \"Tiger\"), (3, \"Fox\"), (4, \"Wolf\")))",
        "canonical_solution": "import sys \r\ndef tuple_size(tuple_list):\r\n  return (sys.getsizeof(tuple_list)) "
    },
    {
        "number": 597,
        "prompt": "Write a function to find kth element from the given two sorted arrays.\ndef find_kth(arr1, arr2, m, n, k):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    if m > n:\n        return find_kth(arr2, arr1, n, m, k)\n    if m == 0:\n        return arr2[k-1]\n    if n == 0:\n        return arr1[k-1]\n    if k == 1:\n        return min(arr1[0], arr2[0])\n    i = min(m, k // 2)\n    j = min(n, k // 2)\n    if arr1[i-1] < arr2[j-1]:\n        return find_kth(arr1[i:], arr2, m-i, n, k-i)\n    else:\n        return find_kth(arr1, arr2[j:], m, n-j, k-j)\n\n# Test the function\narr1 = [1, 3, 5, 7, 9]\narr2 = [2, 4, 6, 8, 10]\nprint(find_kth(arr1, arr2, 4, 4, 6))\n\n# Time Complexity : O(log(m + n))\n# Space Complexity : O(1)\n\n# Test case 1\narr1 = [1, 3, 5, 7, 9]\narr2 = [2, 4, 6, 8, 10]\nk = 6\nprint(find_kth(arr1, arr2, len(arr1),",
        "generated_testcode": "assert find_kth([1, 3, 5, 7, 9], [2, 4, 6, 8, 10], 4, 5) == 5\n",
        "test": "assert find_kth([2, 3, 6, 7, 9], [1, 4, 8, 10], 5, 4, 5) == 6\nassert find_kth([100, 112, 256, 349, 770], [72, 86, 113, 119, 265, 445, 892], 5, 7, 7) == 256\nassert find_kth([3, 4, 7, 8, 10], [2, 5, 9, 11], 5, 4, 6) == 8",
        "canonical_solution": "def find_kth(arr1, arr2, m, n, k):\r\n\tsorted1 = [0] * (m + n)\r\n\ti = 0\r\n\tj = 0\r\n\td = 0\r\n\twhile (i < m and j < n):\r\n\t\tif (arr1[i] < arr2[j]):\r\n\t\t\tsorted1[d] = arr1[i]\r\n\t\t\ti += 1\r\n\t\telse:\r\n\t\t\tsorted1[d] = arr2[j]\r\n\t\t\tj += 1\r\n\t\td += 1\r\n\twhile (i < m):\r\n\t\tsorted1[d] = arr1[i]\r\n\t\td += 1\r\n\t\ti += 1\r\n\twhile (j < n):\r\n\t\tsorted1[d] = arr2[j]\r\n\t\td += 1\r\n\t\tj += 1\r\n\treturn sorted1[k - 1]"
    },
    {
        "number": 598,
        "prompt": "Write a function to check whether the given number is armstrong or not.\ndef armstrong_number(number):\n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    # Get the length of the number\n    length = len(str(number) )\n    \n    # Initialize sum of the number\n    sum = 0\n    \n    # Find the sum of the cubes of each digit\n    temp = number\n    while temp > 0:\n        digit = temp % 10\n        sum += digit ** length\n        temp //= 10\n    \n    # If the sum is equal to the original number, then it is an Armstrong number\n    if number == sum:\n        return True\n    else:\n        return False\n\n# Test the function with some examples\nprint(armstrong_number(153)) # Output: True\nprint(armstrong_number(370)) # Output: True\nprint(armstrong_number(371)) # Output: False\nprint(armstrong_number(407)) # Output: True\nprint(armstrong_number(9474)) # Output: True\nprint(armstrong_number(9475)) # Output: False ",
        "generated_testcode": "assert armstrong_number(153) == True\n",
        "test": "assert armstrong_number(153)==True\nassert armstrong_number(259)==False\nassert armstrong_number(4458)==False",
        "canonical_solution": "def armstrong_number(number):\r\n sum = 0\r\n times = 0\r\n temp = number\r\n while temp > 0:\r\n           times = times + 1\r\n           temp = temp // 10\r\n temp = number\r\n while temp > 0:\r\n           reminder = temp % 10\r\n           sum = sum + (reminder ** times)\r\n           temp //= 10\r\n if number == sum:\r\n           return True\r\n else:\r\n           return False"
    },
    {
        "number": 599,
        "prompt": "Write a function to find sum and average of first n natural numbers.\ndef sum_average(number):\n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    sum = 0\n    for i in range(1,number+1):\n        sum += i\n    average = sum/number\n    return (sum, average)\n\n#Test the function\nprint(sum_average(5)) # (15,3)\nprint(sum_average(10)) # (55, 11)\n\n#Using a single line\ndef sum_average_one_line(number):\n    return (sum(range(1,number+1),0.0)/number, sum(range(1,number+1))/number)\n\nprint(sum_average_one_line(5)) # (15,3)\nprint(sum_average_one_line(10)) # (55, 11)\n\n#Using a list comprehension\ndef sum_average_list_comp(number):\n    num_list = [i for i in range(1,number+1)]\n    return (sum(num_list)/number, sum(num_list)/len(num_list))\n\nprint(sum_average_list_comp(5)) # (15,3)\nprint(sum_average_list_comp(10)) # (55, 11) ",
        "generated_testcode": "assert sum_average(5) == (15, 3)\n",
        "test": "assert sum_average(10)==(55, 5.5)\nassert sum_average(15)==(120, 8.0)\nassert sum_average(20)==(210, 10.5)",
        "canonical_solution": "def sum_average(number):\r\n total = 0\r\n for value in range(1, number + 1):\r\n    total = total + value\r\n average = total / number\r\n return (total,average)"
    },
    {
        "number": 600,
        "prompt": "Write a python function to check whether the given number is even or not using bitwise operator.\ndef is_Even(n) : \n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    return n & 1 == 0\n\n# Test the function\nprint(is_Even(10))  # Output: True\nprint(is_Even(7))  # Output: False\n\n# Write a python function to check whether the given number is odd or not using bitwise operator.\ndef is_Odd(n) : \n    return n & 1 != 0\n\n# Test the function\nprint(is_Odd(10))  # Output: False\nprint(is_Odd(7))  # Output: True\n\n# Write a python function to check whether the given number is positive, zero or negative using bitwise operator.\ndef is_Positive_or_Zero(n) : \n    return n >= 0\n\n# Test the function\nprint(is_Positive_or_Zero(0))  # Output: True\nprint(is_Positive_or_Zero(10))  # Output: True\nprint(is_Positive_or_Zero(-1))  # Output: False\n\n# Write a python function to check whether the given number is a power of 2 or not using bitwise operator.\ndef is_Power_of_2(n) : \n    return n & (n-1) == 0\n\n# Test the function\nprint(is_Power_of_2(2))  # Output: True\nprint(is_Power_of_2(3))  # Output: False\nprint(is_Power_of_2(4))  # Output: True\n",
        "generated_testcode": "assert is_Even(4) == True\n",
        "test": "assert is_Even(1) == False\nassert is_Even(2) == True\nassert is_Even(3) == False",
        "canonical_solution": "def is_Even(n) : \r\n    if (n^1 == n+1) :\r\n        return True; \r\n    else :\r\n        return False; "
    },
    {
        "number": 601,
        "prompt": "Write a function to find the longest chain which can be formed from the given set of pairs.\n\tdef __init__(self, a, b): \n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "\t\tself.a = a\n\t\tself.b = b\n\tdef longest_chain(self):\n\t\tn = len(a)\n\t\tdp = [1]*n\n\t\tfor i in range(n):\n\t\t\tfor j in range(n):\n\t\t\t\tif i!=j:\n\t\t\t\t\tfor k in range(j):\n\t\t\t\t\t\tif a[j]>a[k] and b[j]>b[k]:\n\t\t\t\t\t\t\tdp[j] = max(dp[j],dp[k]+1)\n\t\treturn max(dp)\n\n# Example usage:\na = [1, 2, 3, 4, 5]\nb = [2, 5, 3, 4]\nobj = LongestChain(a, b)\nprint(\"Length of the longest chain is:\", obj.longest_chain()) ",
        "generated_testcode": "assert longest_chain([(1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 7)]) == 5\n",
        "test": "assert max_chain_length([Pair(5, 24), Pair(15, 25),Pair(27, 40), Pair(50, 60)], 4) == 3\nassert max_chain_length([Pair(1, 2), Pair(3, 4),Pair(5, 6), Pair(7, 8)], 4) == 4\nassert max_chain_length([Pair(19, 10), Pair(11, 12),Pair(13, 14), Pair(15, 16), Pair(31, 54)], 5) == 5",
        "canonical_solution": "class Pair(object): \r\n\tdef __init__(self, a, b): \r\n\t\tself.a = a \r\n\t\tself.b = b \r\ndef max_chain_length(arr, n): \r\n\tmax = 0\r\n\tmcl = [1 for i in range(n)] \r\n\tfor i in range(1, n): \r\n\t\tfor j in range(0, i): \r\n\t\t\tif (arr[i].a > arr[j].b and\r\n\t\t\t\tmcl[i] < mcl[j] + 1): \r\n\t\t\t\tmcl[i] = mcl[j] + 1\r\n\tfor i in range(n): \r\n\t\tif (max < mcl[i]): \r\n\t\t\tmax = mcl[i] \r\n\treturn max"
    },
    {
        "number": 602,
        "prompt": "Write a python function to find the first repeated character in a given string.\ndef first_repeated_char(str1):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    char_dict = {}\n    for char in str1:\n        if char in char_dict:\n            char_dict[char] += 1\n        else:\n            char_dict[char] = 1\n    for char in str1:\n        if char_dict[char] > 1:\n            return char\n    return None\n\n# Test the function\nprint(first_repeated_char('abcdabc')) # Output: 'a'\nprint(first_repeated_char('abc')) # Output: None\nprint(first_repeated_char('aabbc')) # Output: 'a'\nprint(first_repeated_char('geeksforgeeks')) # Output: 'e' ",
        "generated_testcode": "assert first_repeated_char(\"hello\") == \"l\"\n",
        "test": "assert first_repeated_char(\"abcabc\") == \"a\"\nassert first_repeated_char(\"abc\") == \"None\"\nassert first_repeated_char(\"123123\") == \"1\"",
        "canonical_solution": "def first_repeated_char(str1):\r\n  for index,c in enumerate(str1):\r\n    if str1[:index+1].count(c) > 1:\r\n      return c \r\n  return \"None\""
    },
    {
        "number": 603,
        "prompt": "Write a function to get a lucid number smaller than or equal to n.\ndef get_ludic(n):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5)+1):\n            if num % i == 0:\n                return False\n        return True\n\n    ludics = []\n    for i in range(1, n+1):\n        if is_prime(i):\n            ludics.append(i)\n\n    return ludics\n\ndef get_lucid_numbers(n):\n    lucids = []\n    for i in range(1, n+1):\n        is_lucid = True\n        for j in range(2, i):\n            if i % j == 0 and j in get_ludic(i):\n                is_lucid = False\n                break\n        if is_lucid:\n            lucids.append(i)\n    return lucids\n\ndef smallest_lucid(n):\n    lucids = get_lucid_numbers(n)\n    if lucids:\n        return lucids[0]\n    else:\n        return None\n\n#Test the function\nprint(smallest_lucid(100)) ",
        "generated_testcode": "assert get_ludic(10) == 5\n",
        "test": "assert get_ludic(10) == [1, 2, 3, 5, 7]\nassert get_ludic(25) == [1, 2, 3, 5, 7, 11, 13, 17, 23, 25]\nassert get_ludic(45) == [1, 2, 3, 5, 7, 11, 13, 17, 23, 25, 29, 37, 41, 43]",
        "canonical_solution": "def get_ludic(n):\r\n\tludics = []\r\n\tfor i in range(1, n + 1):\r\n\t\tludics.append(i)\r\n\tindex = 1\r\n\twhile(index != len(ludics)):\r\n\t\tfirst_ludic = ludics[index]\r\n\t\tremove_index = index + first_ludic\r\n\t\twhile(remove_index < len(ludics)):\r\n\t\t\tludics.remove(ludics[remove_index])\r\n\t\t\tremove_index = remove_index + first_ludic - 1\r\n\t\tindex += 1\r\n\treturn ludics"
    },
    {
        "number": 604,
        "prompt": "Write a function to reverse words in a given string.\ndef reverse_words(s):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    # split the string into words\n    words = s.split()\n    # reverse the order of the words\n    words.reverse()\n    # join the words back into a string\n    return ' '.join(words)\n\n# Test the function with a sample string\nprint(reverse_words('hello world how are you'))\n# should output 'you are how world hello'\n",
        "generated_testcode": "assert reverse_words(\"hello world\") == \"world hello\"\n",
        "test": "assert reverse_words(\"python program\")==(\"program python\")\nassert reverse_words(\"java language\")==(\"language java\")\nassert reverse_words(\"indian man\")==(\"man indian\")",
        "canonical_solution": "def reverse_words(s):\r\n        return ' '.join(reversed(s.split()))"
    },
    {
        "number": 605,
        "prompt": "Write a function to check if the given integer is a prime number.\ndef prime_num(num):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": true,
        "answer": "    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True\n\n# Test the function\nprint(prime_num(7)) # True\nprint(prime_num(10)) # False\nprint(prime_num(29)) # True\nprint(prime_num(0)) # False\nprint(prime_num(1)) # False\n\n# Write a function to find the prime numbers between two given numbers\ndef prime_between(start, end):\n    primes = []\n    for num in range(start, end+1):\n        if prime_num(num):\n            primes.append(num)\n    return primes\n\n# Test the function\nprint(prime_between(10, 25)) # [11, 13, 17, 19, 23]\nprint(prime_between(1, 20)) # [2, 3, 5, 7, 11, 13, 17, 19]\nprint(prime_between(1, 10)) # [2, 3, 5, 7]\nprint(prime_between(0, 100)) # [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47,",
        "generated_testcode": "assert prime_num(7) == True\n",
        "test": "assert prime_num(13)==True\nassert prime_num(7)==True\nassert prime_num(-1010)==False",
        "canonical_solution": "def prime_num(num):\r\n  if num >=1:\r\n   for i in range(2, num//2):\r\n     if (num % i) == 0:\r\n                return False\r\n     else:\r\n                return True\r\n  else:\r\n          return False"
    },
    {
        "number": 606,
        "prompt": "Write a function to convert degrees to radians.\ndef radian_degree(degree):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    radian = degree * 3.14 / 180\n    return radian\n\n# Test the function with some inputs\nprint(radian_degree(90)) # Output: 1.570796326794896662\nprint(radian_degree(180)) # Output: 3.141592653589793\nprint(radian_degree(360)) # Output: 6.2831853071795862\n\n# Write a function to convert radians to degrees\ndef degree_radian(radian):\n    degree = radian * 180 / 3.14\n    return degree\n\n# Test the function with some inputs\nprint(degree_radian(3.14)) # Output: 179.99999999999999999\nprint(degree_radian(6.28)) # Output: 360.00000000000000002\nprint(degree_radian(0)) # Output: 0.0\n\n# Now, write a function to convert kilometers to miles\ndef km_to_miles(km):\n    miles = km * 0.621371\n    return miles\n\n# Test the function with some inputs\nprint(km_to_miles(100))",
        "generated_testcode": "assert radian_degree(90) == 1.57079632679\n",
        "test": "assert radian_degree(90)==1.5707963267948966\nassert radian_degree(60)==1.0471975511965976\nassert radian_degree(120)==2.0943951023931953",
        "canonical_solution": "import math\r\ndef radian_degree(degree):\r\n radian = degree*(math.pi/180)\r\n return radian"
    },
    {
        "number": 607,
        "prompt": "Write a function to search a literals string in a string and also find the location within the original string where the pattern occurs by using regex.\ndef find_literals(text, pattern):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    result = re.search(pattern, text)\n    if result:\n        print(\"Pattern found at index\", result.start())\n        print(\"Pattern found in the string:\", result.group())\n    else:\n        print(\"Pattern not found in the string\")\n\ntext = \"Hello, World!\"\npattern = \"World\"\nfind_literals(text, pattern)\n\ntext = \"Python is an interpreted, high-level, general-purpose programming language.\"\npattern = \"general\"\nfind_literals(text, pattern)\n\ntext = \"This is a sample string for regex\"\npattern = \"regex\"\nfind_literal(text, pattern)\n\ntext = \"This is a sample string for regex\"\npattern = \"sample\"\nfind_literal(text, pattern)\n\ntext = \"This is a sample string for regex\"\npattern = \"xyz\"\nfind_literal(text, pattern)\n\ntext = \"This is a sample string for regex\"\npattern = \"s\"\nfind_literal(text, pattern)\n\ntext = \"This is a sample string for regex\"\npattern = \"This\"\nfind_literal(text, pattern)\n\ntext = \"This is a sample string for regex\"\npattern = \"is\"\nfind_literal(text, pattern)\n\ntext = \"This is a sample string for regex\"\npattern = \"string\"\nfind_literal(text, pattern)\n\ntext = \"This is a sample string for regex\"\npattern = \"This is\"\nfind_literal(",
        "generated_testcode": "assert find_literals(\"Hello world\", \"world\") == (6, 11)\n",
        "test": "assert find_literals('The quick brown fox jumps over the lazy dog.', 'fox') == ('fox', 16, 19)\nassert find_literals('Its been a very crazy procedure right', 'crazy') == ('crazy', 16, 21)\nassert find_literals('Hardest choices required strongest will', 'will') == ('will', 35, 39)",
        "canonical_solution": "import re\r\npattern = 'fox'\r\ntext = 'The quick brown fox jumps over the lazy dog.'\r\ndef find_literals(text, pattern):\r\n  match = re.search(pattern, text)\r\n  s = match.start()\r\n  e = match.end()\r\n  return (match.re.pattern, s, e)"
    },
    {
        "number": 608,
        "prompt": "Write a python function to find nth bell number.\ndef bell_Number(n): \n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    bell = [[0 for i in range(n+1)] for j in range(n+1)] \n    bell[0][0] = 1\n    for i in range(1, n+1): \n        bell[i][0] = bell[i-1][i-1] = 1\n        for j in range(1, i): \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1] \n        for j in range(2, i+1): \n            bell[j][i] = bell[j-1][i-1] \n    return bell[n][0] \n  \n# test the function \nn = 5\nprint(\"Bell number for\", n, \"is\", bell_Number(n)) ",
        "generated_testcode": "assert bell_Number(0) == 1\n",
        "test": "assert bell_Number(2) == 2\nassert bell_Number(3) == 5\nassert bell_Number(4) == 15",
        "canonical_solution": "def bell_Number(n): \r\n    bell = [[0 for i in range(n+1)] for j in range(n+1)] \r\n    bell[0][0] = 1\r\n    for i in range(1, n+1):\r\n        bell[i][0] = bell[i-1][i-1]\r\n        for j in range(1, i+1): \r\n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1] \r\n    return bell[n][0] "
    },
    {
        "number": 609,
        "prompt": "Write a python function to find minimum possible value for the given periodic function.\ndef floor_Min(A,B,N):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    return A*(N-1)+B\n\n# Test the function with given values\nprint(floor_Min(2,3,5)) # should output 9\nprint(floor_Min(3,2,4)) # should output 12\nprint(floor_Min(-4,5,10)) # should output -6\nprint(floor_Min(1,0,10)) # should output 10 ",
        "generated_testcode": "assert floor_Min(1,2,3) == 1\n",
        "test": "assert floor_Min(10,20,30) == 15\nassert floor_Min(1,2,1) == 0\nassert floor_Min(11,10,9) == 9",
        "canonical_solution": "def floor_Min(A,B,N):\r\n    x = max(B - 1,N)\r\n    return (A*x) // B"
    },
    {
        "number": 610,
        "prompt": "Write a python function to remove the k'th element from a given list.\ndef remove_kth_element(list1, L):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    list1.remove(L)\n    return list1\n#Example usage:\n# list1 = [1, 2, 3, 4, 5]\n# remove_kth_element(list1, 3)\n# Output: [1, 2, 4, 5]\n# list1 = [1, 2, 3, 4, 5]\n# remove_kth_element(list1, 1)\n# Output: [2, 3, 4, 5] ",
        "generated_testcode": "assert remove_kth_element([1, 2, 3, 4, 5, 6, 7, 8, 9], 3) == [1, 2, 4, 5, 6, 7, 8]\n",
        "test": "assert remove_kth_element([1,1,2,3,4,4,5,1],3)==[1, 1, 3, 4, 4, 5, 1]\nassert remove_kth_element([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4],4)==[0, 0, 1, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]\nassert remove_kth_element([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10],5)==[10,10,15,19, 18, 17, 26, 26, 17, 18, 10]",
        "canonical_solution": "def remove_kth_element(list1, L):\r\n    return  list1[:L-1] + list1[L:]"
    },
    {
        "number": 611,
        "prompt": "Write a function to find the maximum of nth column from the given tuple list.\ndef max_of_nth(test_list, N):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": true,
        "answer": "    col = []\n    for i in range(len(test_list)):\n        col.append(test_list[i][N-1])\n    return max(col)\n\n# Test the function with the following example:\ntest_list = [(1, 2, 3), (4, 5, 6), (7, 8, 9)]\nprint(max_of_nth(test_list, 2)) # Output: 9\n",
        "generated_testcode": "assert max_of_nth([(1, 2, 3), (4, 5, 6), (7, 8, 9)], 2) == 8\n",
        "test": "assert max_of_nth([(5, 6, 7), (1, 3, 5), (8, 9, 19)], 2) == 19\nassert max_of_nth([(6, 7, 8), (2, 4, 6), (9, 10, 20)], 1) == 10\nassert max_of_nth([(7, 8, 9), (3, 5, 7), (10, 11, 21)], 1) == 11",
        "canonical_solution": "def max_of_nth(test_list, N):\r\n  res = max([sub[N] for sub in test_list])\r\n  return (res) "
    },
    {
        "number": 612,
        "prompt": "Write a python function to merge the first and last elements separately in a list of lists.\ndef merge(lst):  \n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    first = []\n    last = []\n    for sublist in lst:\n        first.append(sublist[0])\n        last.append(sublist[-1])\n    return first + last\n\nprint(merge([[1, 2, 3], [4, 5, 6], [7, 8, 9]]))  # should return [1, 4, 7, 2, 5, 8, 3, 6, 9]\nprint(merge([[1, 2], [3, 4, 5, 6], [7], [8, 9, 10, 11, 12], [13, 14, 15]])  # should return [1, 3, 7, 8, 2, 4, 9, 11, 13, 5, 14, 6, 10, 12]\n\n# Test cases\nprint(merge([[1, 2, 3], [4, 5, 6], [7, 8, 9]])  # should return [1, 4, 7, 2, 5, 8, 3, 6, 9]\nprint(merge([[1, 2], [3, 4, 5, 6], [7], [8, 9, 10, 11, 12], [13, 14, 15]])  # should return [1, 3",
        "generated_testcode": "assert merge([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [[1, 4, 7], [2, 5, 8], [3, 6, 9]]\n",
        "test": "assert merge([['x', 'y'], ['a', 'b'], ['m', 'n']]) == [['x', 'a', 'm'], ['y', 'b', 'n']]\nassert merge([[1, 2], [3, 4], [5, 6], [7, 8]]) == [[1, 3, 5, 7], [2, 4, 6, 8]]\nassert merge([['x', 'y','z' ], ['a', 'b','c'], ['m', 'n','o']]) == [['x', 'a', 'm'], ['y', 'b', 'n'],['z', 'c','o']]",
        "canonical_solution": "def merge(lst):  \r\n    return [list(ele) for ele in list(zip(*lst))] "
    },
    {
        "number": 613,
        "prompt": "Write a function to find the maximum value in record list as tuple attribute in the given tuple list.\ndef maximum_value(test_list):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    max_val = test_list[0][2]\n    for i in range(len(test_list)):\n        if test_list[i][2] > max_val:\n            max_val = test_list[i][2]\n    return max_val\n\n#Test the function with the given test_list\ntest_list = [(1, 'A', 20), (2, 'B', 30), (3, 'C', 40), (4, 'D', 50)]\nprint(maximum_value(test_list))\n#Output: 50\n\n#Write a function to find the minimum value in record list as tuple attribute in the given tuple list.\ndef minimum_value(test_list):\n    min_val = test_list[0][2]\n    for i in range(len(test_list)):\n        if test_list[i][2] < min_val:\n            min_val = test_list[i][2]\n    return min_val\n\n#Test the function with the given test_list\ntest_list = [(1, 'A', 20), (2, 'B', 30), (3, 'C', 40), (4, 'D', 50)]\nprint(minimum_value(test_list))\n#Output: 20\n\n#Write a function to find the average of all the tuple values in the given tuple list.\ndef average_value(test_list):\n    sum_val = 0\n",
        "generated_testcode": "assert maximum_value([(1, 2, 3), (4, 5, 6), (7, 8, 9)]) == 9\n",
        "test": "assert maximum_value([('key1', [3, 4, 5]), ('key2', [1, 4, 2]), ('key3', [9, 3])]) == [('key1', 5), ('key2', 4), ('key3', 9)]\nassert maximum_value([('key1', [4, 5, 6]), ('key2', [2, 5, 3]), ('key3', [10, 4])]) == [('key1', 6), ('key2', 5), ('key3', 10)]\nassert maximum_value([('key1', [5, 6, 7]), ('key2', [3, 6, 4]), ('key3', [11, 5])]) == [('key1', 7), ('key2', 6), ('key3', 11)]",
        "canonical_solution": "def maximum_value(test_list):\r\n  res = [(key, max(lst)) for key, lst in test_list]\r\n  return (res) "
    },
    {
        "number": 614,
        "prompt": "Write a function to find the cumulative sum of all the values that are present in the given tuple list.\ndef cummulative_sum(test_list):\n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    cum_sum = 0\n    result = []\n    for i in test_list:\n        cum_sum += i\n        result.append(cum_sum)\n    return result\n\n\n# Test the function with an example\ntest_list = (1, 2, 3, 4, 5, 6, 7, 8, 9)\nprint(cummulative_sum(test_list))  # Output: [1, 3, 6, 10, 15, 21, 28, 36, 45]\n\n\n# Test the function with another example\ntest_list = (2, 4, 6, 8, 10)\nprint(cummulative_sum(test_list))  # Output: [2, 6, 14, 20, 30]\n\n# Test the function with an empty tuple\ntest_list = ()\nprint(cummulative_sum(test_list))  # Output: []\n\n# Test the function with a single value tuple\ntest_list = (10,)\nprint(cummulative_sum(test_list))  # Output: [10]\n\n# Test the function with a negative value\ntest_list = (-2, -4, -6, -8, -10)\nprint(cummulative_sum(test_list))  # Output: [-2, -6, -12, -18, -26] ",
        "generated_testcode": "assert cummulative_sum([1, 2, 3, 4, 5]) == [1, 3, 6, 10, 15]\n",
        "test": "assert cummulative_sum([(1, 3), (5, 6, 7), (2, 6)]) == 30\nassert cummulative_sum([(2, 4), (6, 7, 8), (3, 7)]) == 37\nassert cummulative_sum([(3, 5), (7, 8, 9), (4, 8)]) == 44",
        "canonical_solution": "def cummulative_sum(test_list):\r\n  res = sum(map(sum, test_list))\r\n  return (res)"
    },
    {
        "number": 615,
        "prompt": "Write a function to find average value of the numbers in a given tuple of tuples.\ndef average_tuple(nums):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    total = 0\n    count = 0\n    for tup in nums:\n        for num in tup:\n            total += num\n            count += 1\n    return total / count\n\n# test the function with sample input\nprint(average_tuple(((1, 2, 3), (4, 5, 6, 7, 8, 9), (10, 11)))  # output: 6.0\nprint(average_tuple(((1, 3, 5), (2, 4, 6, 8), (9, 10)))  # output: 4.6666666666666666666",
        "generated_testcode": "assert average_tuple(((1, 2, 3), (4, 5, 6)) == 3.5\n",
        "test": "assert average_tuple(((10, 10, 10, 12), (30, 45, 56, 45), (81, 80, 39, 32), (1, 2, 3, 4)))==[30.5, 34.25, 27.0, 23.25]\nassert average_tuple(((1, 1, -5), (30, -15, 56), (81, -60, -39), (-10, 2, 3)))== [25.5, -18.0, 3.75]\nassert average_tuple( ((100, 100, 100, 120), (300, 450, 560, 450), (810, 800, 390, 320), (10, 20, 30, 40)))==[305.0, 342.5, 270.0, 232.5]",
        "canonical_solution": "def average_tuple(nums):\r\n    result = [sum(x) / len(x) for x in zip(*nums)]\r\n    return result"
    },
    {
        "number": 616,
        "prompt": "Write a function to perfom the modulo of tuple elements in the given two tuples.\ndef tuple_modulo(test_tup1, test_tup2):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    new_tup = ()\n    for i in range(len(test_tup1)):\n        new_tup += (test_tup1[i] % test_tup2[i],)\n    return new_tup\n\n# Test the function with the following tuples\ntest_tup1 = (5, 10, 15, 20, 25)\ntest_tup2 = (2, 3, 5, 7, 11)\nprint(tuple_modulo(test_tup1, test_tup2))  # Output: (1, 1, 0, 2, 4) ",
        "generated_testcode": "assert tuple_modulo((2, 4, 6, 8, 10), (3, 5, 7, 11)) == (2, 4, 2, 10)\n",
        "test": "assert tuple_modulo((10, 4, 5, 6), (5, 6, 7, 5)) == (0, 4, 5, 1)\nassert tuple_modulo((11, 5, 6, 7), (6, 7, 8, 6)) == (5, 5, 6, 1)\nassert tuple_modulo((12, 6, 7, 8), (7, 8, 9, 7)) == (5, 6, 7, 1)",
        "canonical_solution": "def tuple_modulo(test_tup1, test_tup2):\r\n  res = tuple(ele1 % ele2 for ele1, ele2 in zip(test_tup1, test_tup2)) \r\n  return (res) "
    },
    {
        "number": 617,
        "prompt": "Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\ndef min_Jumps(a, b, d): \n",
        "checkpoint": "13B",
        "pass": 8,
        "correct": true,
        "answer": "    # if destination is 0,0 then only one jump is required\n    if a == 0 and b == 0: \n        return 1\n    # if either x or y is 0, then either x or y jumps are required to reach (0,0)\n    if a == 0 or b == 0: \n        return 1 + min(abs(a), abs(b))\n    # otherwise, both x and y jumps are required to reach (0,0)\n    else: \n        return 1 + min(a, b)\n   \n# main function to check for the minimum number of jumps required to reach (d, 0) \ndef minJumps(arr, n, d): \n    return min_Jumps(d, 0, arr[n - 1])\n\n# Test case \narr = [1, 3, 5, 8, 9, 2, 6, 1, 0, 1] \nn = len(arr) \nprint(minJumps(arr, n, 8)) ",
        "generated_testcode": "assert min_Jumps(1, 0, 2) == 1\n",
        "test": "assert min_Jumps(3,4,11)==3.5\nassert min_Jumps(3,4,0)==0\nassert min_Jumps(11,14,11)==1",
        "canonical_solution": "def min_Jumps(a, b, d): \r\n    temp = a \r\n    a = min(a, b) \r\n    b = max(temp, b) \r\n    if (d >= b): \r\n        return (d + b - 1) / b \r\n    if (d == 0): \r\n        return 0\r\n    if (d == a): \r\n        return 1\r\n    else:\r\n        return 2"
    },
    {
        "number": 618,
        "prompt": "Write a function to divide two lists using map and lambda function.\ndef div_list(nums1,nums2):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    return list(map(lambda x, y: x/y, nums1, nums2))\n\n#Example:\nnums1 = [10,20,30,40,50]\nnums2 = [2,4,6,8,10]\nprint(div_list(nums1,nums2))\n\n#Output: [5.0,5.0,5.0,5.0]\n\n#Note: In the above example, we have divided each element of nums1 with the corresponding element of nums2 and returned the result as a list. We have used lambda function to achieve this. ",
        "generated_testcode": "assert div_list([1,2,3,4],[2,2,2,2]) == [0.5,1.0,1.5,2.0]\n",
        "test": "assert div_list([4,5,6],[1, 2, 3])==[4.0,2.5,2.0]\nassert div_list([3,2],[1,4])==[3.0, 0.5]\nassert div_list([90,120],[50,70])==[1.8, 1.7142857142857142]",
        "canonical_solution": "def div_list(nums1,nums2):\r\n  result = map(lambda x, y: x / y, nums1, nums2)\r\n  return list(result)"
    },
    {
        "number": 619,
        "prompt": "Write a function to move all the numbers in it to the given string.\ndef move_num(test_str):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    num_str = ''\n    new_str = ''\n    for char in test_str:\n        if char.isdigit():\n            num_str += char\n        else:\n            new_str += char\n    return new_str + ' ' + num_str\n\n# Test the function with the given example\nprint(move_num('hello123world456'))  # Output: 'helloworld 123456'\n\n# Test the function with some edge cases\nprint(move_num('123abc456'))  # Output: ' 123456abc'\nprint(move_num('abc'))  # Output: 'abc'\nprint(move_num('123456'))  # Output: ' 123456'\nprint(move_num(''))  # Output: ''\nprint(move_num('a1b2c3d4e5f6g7h8i9j0k'))  # Output: 'abcdefghij0123456789' ",
        "generated_testcode": "assert move_num(\"Hello 123 World 456\") == \"Hello World\"\n",
        "test": "assert move_num('I1love143you55three3000thousand') == 'Iloveyouthreethousand1143553000'\nassert move_num('Avengers124Assemble') == 'AvengersAssemble124'\nassert move_num('Its11our12path13to14see15things16do17things') == 'Itsourpathtoseethingsdothings11121314151617'",
        "canonical_solution": "def move_num(test_str):\r\n  res = ''\r\n  dig = ''\r\n  for ele in test_str:\r\n    if ele.isdigit():\r\n      dig += ele\r\n    else:\r\n      res += ele\r\n  res += dig\r\n  return (res) "
    },
    {
        "number": 620,
        "prompt": "Write a function to find the largest subset where each pair is divisible.\ndef largest_subset(a, n):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    a.sort()\n    ans = []\n    for i in range(n):\n        if i == 0 or a[i] % a[i-1] == 0:\n            ans.append(a[i])\n    return ans\n\n# Testing the function\na = [2, 3, 4, 5, 6, 8, 9, 10]\nprint(largest_subset(a, len(a)) # Output: [2, 4, 8, 10] ",
        "generated_testcode": "assert largest_subset([1, 2, 3, 4, 5, 6, 7, 8, 9], 3) == [1, 3, 9]\n",
        "test": "assert largest_subset([ 1, 3, 6, 13, 17, 18 ], 6) == 4\nassert largest_subset([10, 5, 3, 15, 20], 5) == 3\nassert largest_subset([18, 1, 3, 6, 13, 17], 6) == 4",
        "canonical_solution": "def largest_subset(a, n):\r\n\tdp = [0 for i in range(n)]\r\n\tdp[n - 1] = 1; \r\n\tfor i in range(n - 2, -1, -1):\r\n\t\tmxm = 0;\r\n\t\tfor j in range(i + 1, n):\r\n\t\t\tif a[j] % a[i] == 0 or a[i] % a[j] == 0:\r\n\t\t\t\tmxm = max(mxm, dp[j])\r\n\t\tdp[i] = 1 + mxm\r\n\treturn max(dp)"
    },
    {
        "number": 621,
        "prompt": "Write a function to increment the numeric values in the given strings by k.\ndef increment_numerics(test_list, K):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    # Initialize an empty list to store the incremented strings\n    result = []\n\n    # Iterate through each string in the list\n    for string in test_list:\n        # Split the string into words\n        words = string.split()\n        # Initialize an empty list to store the modified words\n        new_words = []\n        # Iterate through each word in the string\n        for word in words:\n            # Check if the word contains only digits\n            if word.isdigit():\n                # Add K to the number and append it to the new_words list\n                new_words.append(str(int(word) + K))\n            else:\n                # Otherwise, append the word as is\n                new_words.append(word)\n        # Join the new_words list using a space and append it to the result list\n        result.append(' '.join(new_words))\n\n    # Return the result list\n    return result\n\n\n# Test the function with example inputs\ntest_list = [\"abcd 123\", \"5 8 9\", \"11 hello 3\"]\nK = 5\nprint(increment_numerics(test_list, K))  # Output: ['abcd 128', '10 13 14', '16 hello 8']\n\ntest_list = [\"abcd 123\", \"5 8 9\", \"11 hello 3\"]\nK = 10\nprint(increment_numerics(test_list, K))  # Output: ['",
        "generated_testcode": "assert increment_numerics([\"hello123\", \"world456\", \"python789\"], 10) == [\"hello1333\", \"world5666\", \"python899\"]\n",
        "test": "assert increment_numerics([\"MSM\", \"234\", \"is\", \"98\", \"123\", \"best\", \"4\"] , 6) == ['MSM', '240', 'is', '104', '129', 'best', '10']\nassert increment_numerics([\"Dart\", \"356\", \"is\", \"88\", \"169\", \"Super\", \"6\"] , 12) == ['Dart', '368', 'is', '100', '181', 'Super', '18']\nassert increment_numerics([\"Flutter\", \"451\", \"is\", \"44\", \"96\", \"Magnificent\", \"12\"] , 33) == ['Flutter', '484', 'is', '77', '129', 'Magnificent', '45']",
        "canonical_solution": "def increment_numerics(test_list, K):\r\n  res = [str(int(ele) + K) if ele.isdigit() else ele for ele in test_list]\r\n  return res "
    },
    {
        "number": 622,
        "prompt": "Write a function to find the median of two sorted arrays of same size.\ndef get_median(arr1, arr2, n):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    i, j = 0, 0\n    m1, m2 = 0, 0\n    while i < n and j < n:\n        if arr1[i] < arr2[j]:\n            m1 = arr1[i]\n            i += 1\n        else:\n            m1 = arr2[j]\n            j += 1\n        if (i + j) % 2 == 1:\n            return m1\n        else:\n            if i < n and j < n:\n                if arr1[i] < arr2[j]:\n                    m2 = arr1[i]\n                    i += 1\n                else:\n                    m2 = arr2[j]\n                    j += 1\n            else:\n                if i < n:\n                    m2 = arr1[i]\n                else:\n                    m2 = arr2[j]\n    if i == n:\n        return m2\n    return (m1 + m2) / 2.0\n\n\narr1 = [1, 3, 5, 7, 9]\narr2 = [2, 4, 6, 8, 10]\nn = len(arr1)\nprint(get_median(arr1, arr2, n))\n",
        "generated_testcode": "assert get_median([1, 3, 5, 7, 9], [2, 4, 6, 8], 4) == 5\n",
        "test": "assert get_median([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0\nassert get_median([2, 4, 8, 9], [7, 13, 19, 28], 4) == 8.5\nassert get_median([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6) == 25.0",
        "canonical_solution": "def get_median(arr1, arr2, n):\r\n  i = 0\r\n  j = 0\r\n  m1 = -1\r\n  m2 = -1\r\n  count = 0\r\n  while count < n + 1:\r\n    count += 1\r\n    if i == n:\r\n      m1 = m2\r\n      m2 = arr2[0]\r\n      break\r\n    elif j == n:\r\n      m1 = m2\r\n      m2 = arr1[0]\r\n      break\r\n    if arr1[i] <= arr2[j]:\r\n      m1 = m2\r\n      m2 = arr1[i]\r\n      i += 1\r\n    else:\r\n      m1 = m2\r\n      m2 = arr2[j]\r\n      j += 1\r\n  return (m1 + m2)/2"
    },
    {
        "number": 623,
        "prompt": "Write a function to find the n-th power of individual elements in a list using lambda function.\ndef nth_nums(nums,n):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    return list(map(lambda x:x**n,nums))\n\n#Example usage\nnums = [1,2,3,4,5,6,7,8,9]\nprint(nth_nums(nums,3)) # Output: [1,8,27,64,125,216,343,512]\nnums = [0,1,2,3,4,5,6,7,8,9]\nprint(nth_nums(nums,4)) # Output: [0,1,16,81,256,625,1296,2401,4096]\n\n#Another function to find the square root of individual elements in a list using lambda function.\ndef sqrt_nums(nums):\n    return list(map(lambda x:int(x**0.5),nums))\n\n#Example usage\nnums = [1,4,9,16,25,36,49,64,81]\nprint(sqrt_nums(nums)) # Output: [1,2,3,4,5,6,7,8,9] ",
        "generated_testcode": "assert nth_nums([1,2,3,4,5],2) == [1,4,9,25]\n",
        "test": "assert nth_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],2)==[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]\nassert nth_nums([10,20,30],3)==([1000, 8000, 27000])\nassert nth_nums([12,15],5)==([248832, 759375])",
        "canonical_solution": "def nth_nums(nums,n):\r\n nth_nums = list(map(lambda x: x ** n, nums))\r\n return nth_nums"
    },
    {
        "number": 624,
        "prompt": "Write a python function to convert the given string to upper case.\ndef is_upper(string):\n",
        "checkpoint": "13B",
        "pass": 7,
        "correct": true,
        "answer": "    return string.isupper()\n\n# Test the function with sample input\nprint(is_upper(\"HELLO\")) # Output: True\nprint(is_upper(\"hello\")) # Output: False ",
        "generated_testcode": "assert is_upper(\"HELLO\") == True\n",
        "test": "assert is_upper(\"person\") ==\"PERSON\"\nassert is_upper(\"final\") == \"FINAL\"\nassert is_upper(\"Valid\") == \"VALID\"",
        "canonical_solution": "def is_upper(string):\r\n  return (string.upper())"
    },
    {
        "number": 625,
        "prompt": "Write a python function to interchange first and last elements in a given list.\ndef swap_List(newList): \n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList\n\n# Testing the function \nnewList = [1, 2, 3, 4, 5, 6] \nprint(swap_List(newList)) ",
        "generated_testcode": "assert swap_List([1, 2, 3, 4, 5]) == [5, 2, 3, 4]\n",
        "test": "assert swap_List([1,2,3]) == [3,2,1]\nassert swap_List([1,2,3,4,4]) == [4,2,3,4,1]\nassert swap_List([4,5,6]) == [6,5,4]",
        "canonical_solution": "def swap_List(newList): \r\n    size = len(newList) \r\n    temp = newList[0] \r\n    newList[0] = newList[size - 1] \r\n    newList[size - 1] = temp   \r\n    return newList "
    },
    {
        "number": 626,
        "prompt": "Write a python function to find the largest triangle that can be inscribed in the semicircle.\ndef triangle_area(r) :  \n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    pi = 3.14159  \n    return 0.5 * r * r * pi\n\ndef semicircle_area(r) :  \n    return 0.5 * r * r * pi\n\ndef max_triangle_area(r) :  \n    return triangle_area(r)\n\n# Test the function with some sample values\nradius = 5\nprint(\"Area of a circle with radius\", radius, \"is\", semicircle_area(radius))\nprint(\"Maximum area of a triangle inscribed in the circle is\", max_triangle_area(radius)) ",
        "generated_testcode": "assert triangle_area(3) == 9.0\n",
        "test": "assert triangle_area(0) == 0\nassert triangle_area(-1) == -1\nassert triangle_area(2) == 4",
        "canonical_solution": "def triangle_area(r) :  \r\n    if r < 0 : \r\n        return -1\r\n    return r * r "
    },
    {
        "number": 627,
        "prompt": "Write a python function to find the smallest missing number from the given array.\ndef find_First_Missing(array,start,end): \n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    if start == end: \n        return start \n    mid = (start + end) // 2\n    if array[mid] == mid + 1: \n        return find_First_Missing(array, mid+1, end) \n    else: \n        return find_First_Missing(array, start, mid) \n   \ndef find_Missing(array): \n    if len(array) == 0: \n        return 1\n    elif array[0] != 1: \n        return 1\n    elif array[-1] != len(array): \n        return len(array) + 1\n    else: \n        return find_First_Missing(array, 0, len(array)-1) \n\n# Example usage: \narray = [2, 3, 4, 5, 1, 6, 7, 8] \nprint(\"The smallest missing number is:\", find_Missing(array)) ",
        "generated_testcode": "assert find_First_Missing([1,2,3,4,5,6,7,8,9,10],0,9) == 0\n",
        "test": "assert find_First_Missing([0,1,2,3],0,3) == 4\nassert find_First_Missing([0,1,2,6,9],0,4) == 3\nassert find_First_Missing([2,3,5,8,9],0,4) == 0",
        "canonical_solution": "def find_First_Missing(array,start,end): \r\n    if (start > end): \r\n        return end + 1\r\n    if (start != array[start]): \r\n        return start; \r\n    mid = int((start + end) / 2) \r\n    if (array[mid] == mid): \r\n        return find_First_Missing(array,mid+1,end) \r\n    return find_First_Missing(array,start,mid) "
    },
    {
        "number": 628,
        "prompt": "Write a function to replace all spaces in the given string with character * list item * list item * list item * list item '%20'.\ndef replace_spaces(string):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    return string.replace(\" \", \"%20\")\n\n# Example usage:\nprint(replace_spaces(\"this is a string\"))  # \"this%20is%20a%20string\"\nprint(replace_spaces(\"hello world\"))  # \"hello%20world\"\nprint(replace_spaces(\"   spaces are fun   \"))  # \"%20%20%20spaces%20are%20fun%20%20\"\n\n# Test your function with some inputs\nprint(replace_spaces(\"Hello, world!\"))  # \"Hello,%20world!\"\nprint(replace_spaces(\"Python is awesome\"))  # \"Python%20is%20awesome\"\nprint(replace_spaces(\"So many spaces in this string\"))  # \"So%20many%20spaces%20in%20this%20string\"\nprint(replace_spaces(\"\"))  # \"\"\nprint(replace_spaces(\"        \"))  # \"%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20\" ",
        "generated_testcode": "assert replace_spaces(\"hello world\") == \"hello%20world\"\n",
        "test": "assert replace_spaces(\"My Name is Dawood\") == 'My%20Name%20is%20Dawood'\nassert replace_spaces(\"I am a Programmer\") == 'I%20am%20a%20Programmer'\nassert replace_spaces(\"I love Coding\") == 'I%20love%20Coding'",
        "canonical_solution": "MAX=1000;\r\ndef replace_spaces(string):\r\n  string=string.strip()\r\n  i=len(string)\r\n  space_count=string.count(' ')\r\n  new_length = i + space_count*2\r\n  if new_length > MAX:\r\n    return -1\r\n  index = new_length-1\r\n  string=list(string)\r\n  for f in range(i-2, new_length-2):\r\n    string.append('0')\r\n  for j in range(i-1, 0, -1):\r\n    if string[j] == ' ':\r\n      string[index] = '0'\r\n      string[index-1] = '2'\r\n      string[index-2] = '%'\r\n      index=index-3\r\n    else:\r\n      string[index] = string[j]\r\n      index -= 1\r\n  return ''.join(string)"
    },
    {
        "number": 629,
        "prompt": "Write a python function to find even numbers from a mixed list.\ndef Split(list): \n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    even_list = [] \n    odd_list = [] \n    for i in list: \n        if i % 2 == 0: \n            even_list.append(i) \n        else: \n            odd_list.append(i) \n    return even_list \n  \n# Testing \nlist = [1, 2, 3, 4, 5, 6, 7, 8, 9] \nresult = Split(list) \nprint(\"Even numbers in the list are:\", result) \n  \n# Output: Even numbers in the list are: [2, 4, 6, 8] ",
        "generated_testcode": "assert Split([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [2, 4, 6, 8, 10]\n",
        "test": "assert Split([1,2,3,4,5]) == [2,4]\nassert Split([4,5,6,7,8,0,1]) == [4,6,8,0]\nassert Split ([8,12,15,19]) == [8,12]",
        "canonical_solution": "def Split(list): \r\n    ev_li = [] \r\n    for i in list: \r\n        if (i % 2 == 0): \r\n            ev_li.append(i)  \r\n    return ev_li"
    },
    {
        "number": 630,
        "prompt": "Write a function to extract all the adjacent coordinates of the given coordinate tuple.\ndef adjac(ele, sub = []): \n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    if ele == \"\": \n        return sub \n    x, y = ele.pop(0) \n    sub.append((x, y)) \n    if y == 0: \n        adjac(((x, y+1), (x+1, y), (x, y-1), (x-1, y), (x+1, y-1), (x-1, y+1), (x+1, y+1), (x-1, y-1)), sub) \n    elif x == 0: \n        adjac((x+1, y), (x, y+1), (x, y-1), (x+1, y-1), (x+1, y+1), (x-1, y+1), (x+1, y-1), (x-1, y-1), sub) \n    elif x == rows-1: \n        adjac((x-1, y), (x, y+1), (x, y-1), (x-1, y-1), (x+1, y-1), (x+1, y+1), (x-1, y+1), (x+1, y+1), sub) \n    elif y == cols-1: \n        adjac((x+1, y), (x-1, y), (x, y-1), (x+1, y-1), (x-1, y-1), (x+1, y+1), (x-1, y",
        "generated_testcode": "assert adjac((1, 2)) == [(1, 3), (1, 1), (2, 2), (0, 2), (1, 0)]\n",
        "test": "assert get_coordinates((3, 4)) == [[2, 3], [2, 4], [2, 5], [3, 3], [3, 4], [3, 5], [4, 3], [4, 4], [4, 5]]\nassert get_coordinates((4, 5)) ==[[3, 4], [3, 5], [3, 6], [4, 4], [4, 5], [4, 6], [5, 4], [5, 5], [5, 6]]\nassert get_coordinates((5, 6)) == [[4, 5], [4, 6], [4, 7], [5, 5], [5, 6], [5, 7], [6, 5], [6, 6], [6, 7]]",
        "canonical_solution": "def adjac(ele, sub = []): \r\n  if not ele: \r\n     yield sub \r\n  else: \r\n     yield from [idx for j in range(ele[0] - 1, ele[0] + 2) \r\n                for idx in adjac(ele[1:], sub + [j])] \r\ndef get_coordinates(test_tup):\r\n  res = list(adjac(test_tup))\r\n  return (res) "
    },
    {
        "number": 631,
        "prompt": "Write a function to replace whitespaces with an underscore and vice versa in a given string by using regex.\ndef replace_spaces(text):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    text = text.replace(' ', '_')\n    text = text.replace('_', ' ')\n    return text\n\n# Test the function with example input\nprint(replace_spaces(\"The quick brown fox jumps over the lazy dog\"))\n\n# Test the function with input with both spaces and underscores\nprint(replace_spaces(\"The_quick brown_fox jumps_over the lazy dog\")) ",
        "generated_testcode": "assert replace_spaces(\"hello world\") == \"hello_world\"\n",
        "test": "assert replace_spaces('Jumanji The Jungle') == 'Jumanji_The_Jungle'\nassert replace_spaces('The Avengers') == 'The_Avengers'\nassert replace_spaces('Fast and Furious') == 'Fast_and_Furious'",
        "canonical_solution": "import re\r\ntext = 'Python Exercises'\r\ndef replace_spaces(text):\r\n  text =text.replace (\" \", \"_\")\r\n  return (text)\r\n  text =text.replace (\"_\", \" \")\r\n  return (text)"
    },
    {
        "number": 632,
        "prompt": "Write a python function to move all zeroes to the end of the given list.\ndef move_zero(num_list):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": true,
        "answer": "    zeroes_list = []\n    non_zeroes_list = []\n    for num in num_list:\n        if num == 0:\n            zeroes_list.append(num)\n        else:\n            non_zeroes_list.append(num)\n    return non_zeroes_list + zeroes_list\n\n# Test the function\nnum_list = [0, 3, 12, 0, 45, 0, 23, 0, 7, 8]\nprint(move_zero(num_list)) # should print [3, 12, 45, 23, 7, 8, 0, 0, 0]\nnum_list = [1, 2, 3, 4, 5, 6, 7, 8, 9]\nprint(move_zero(num_list)) # should print [1, 2, 3, 4, 5, 6, 7, 8, 9]\nnum_list = [0, 0, 0, 0]\nprint(move_zero(num_list)) # should print [0, 0, 0]\nnum_list = [1, 0, 0, 2, 0, 3, 0, 4, 0]\nprint(move_zero(num_list)) # should print [1, 2, 3, 4, 0, 0, 0, 0] ",
        "generated_testcode": "",
        "test": "assert move_zero([1,0,2,0,3,4]) == [1,2,3,4,0,0]\nassert move_zero([2,3,2,0,0,4,0,5,0]) == [2,3,2,4,5,0,0,0,0]\nassert move_zero([0,1,0,1,1]) == [1,1,1,0,0]",
        "canonical_solution": "def move_zero(num_list):\r\n    a = [0 for i in range(num_list.count(0))]\r\n    x = [ i for i in num_list if i != 0]\r\n    x.extend(a)\r\n    return (x)"
    },
    {
        "number": 633,
        "prompt": "Write a python function to find the sum of xor of all pairs of numbers in the given array.\ndef pair_OR_Sum(arr,n) : \n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": true,
        "answer": "    # Initialize the sum of XOR to zero \n    xor_sum = 0\n    # Traverse through all pairs of numbers\n    for i in range(n) : \n        for j in range(i+1,n) : \n            # Add the XOR of i and j to xor_sum \n            xor_sum = xor_sum | (arr[i] ^ arr[j]) \n    # Return the final xor_sum \n    return xor_sum \n\n# Driver code \narr = [2, 6, 3, 7, 4, 9] \nn = len(arr)\n# Function call \nprint(pair_OR_Sum(arr, n)) \n",
        "generated_testcode": "assert pair_OR_Sum([1,2,3,4,5],4) == 7\n",
        "test": "assert pair_OR_Sum([5,9,7,6],4) == 47\nassert pair_OR_Sum([7,3,5],3) == 12\nassert pair_OR_Sum([7,3],2) == 4",
        "canonical_solution": "def pair_OR_Sum(arr,n) : \r\n    ans = 0 \r\n    for i in range(0,n) :    \r\n        for j in range(i + 1,n) :   \r\n            ans = ans + (arr[i] ^ arr[j])          \r\n    return ans "
    },
    {
        "number": 634,
        "prompt": "Write a python function to find the sum of fourth power of first n even natural numbers.\ndef even_Power_Sum(n): \n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    sum = 0\n    for i in range(1, 2*n+1, 2): \n        sum += i**4\n    return sum \n\n# test the function \nn = 5\nprint(\"The sum of fourth power of first\", n, \"even numbers is\", even_Power_Sum(n)) ",
        "generated_testcode": "assert even_Power_Sum(5) == 225\n",
        "test": "assert even_Power_Sum(2) == 272\nassert even_Power_Sum(3) == 1568\nassert even_Power_Sum(4) == 5664",
        "canonical_solution": "def even_Power_Sum(n): \r\n    sum = 0; \r\n    for i in range(1,n + 1): \r\n        j = 2*i; \r\n        sum = sum + (j*j*j*j); \r\n    return sum; "
    },
    {
        "number": 635,
        "prompt": "Write a function to push all values into a heap and then pop off the smallest values one at a time.\ndef heap_sort(iterable):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": true,
        "answer": "    heap = Heap(iterable)\n    return [heap.pop() for _ in range(len(iterable))]\n\n# Define a heap class with methods push and pop\nclass Heap:\n    def __init__(self, iterable=None):\n        self.heap = []\n        if iterable:\n            for item in iterable:\n                self.push(item)\n\n    def push(self, value):\n        self.heap.append(value)\n        self._bubble_up(len(self.heap) - 1)\n\n    def pop(self):\n        if len(self.heap) == 0:\n            return None\n        min_value = self.heap[0]\n        self.heap[0] = self.heap[-1]\n        self.heap.pop()\n        self._bubble_down(0)\n        return min_value\n\n    def _bubble_up(self, index):\n        parent_index = (index - 1) // 2\n        while index > 0 and self.heap[parent_index] > self.heap[index]:\n            self.heap[parent_index], self.heap[index] = self.heap[index], self.heap[parent_index]\n            index = parent_index\n            parent_index = (index - 1) // 2\n\n    def _bubble_down(self, index):\n        while True:\n            min_child_index = self",
        "generated_testcode": "",
        "test": "assert heap_sort([1, 3, 5, 7, 9, 2, 4, 6, 8, 0])==[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert heap_sort([25, 35, 22, 85, 14, 65, 75, 25, 58])==[14, 22, 25, 25, 35, 58, 65, 75, 85]\nassert heap_sort( [7, 1, 9, 5])==[1,5,7,9]",
        "canonical_solution": "import heapq as hq\r\ndef heap_sort(iterable):\r\n    h = []\r\n    for value in iterable:\r\n        hq.heappush(h, value)\r\n    return [hq.heappop(h) for i in range(len(h))]"
    },
    {
        "number": 636,
        "prompt": "Write a python function to check if roots of a quadratic equation are reciprocal of each other or not.\ndef Check_Solution(a,b,c): \n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    if(a == 0): \n        return False\n    d = b * b - 4 * a * c \n    if(d < 0): \n        return False\n    sqrt_d = math.sqrt(d) \n    x1 = (-b + sqrt_d) / (2 * a) \n    x2 = (-b - sqrt_d) / (2 * a) \n    if(x1 == 1/x2 or x2 == 1/x1): \n        return True\n    else: \n        return False\n\n# Example usage:\nif __name__ == \"__main__\":\n    a, b, c = map(int, input(\"Enter coefficients of quadratic equation in the form ax^2+bx+c=0: \").split())\n    if Check_Solution(a, b, c): \n        print(\"Roots are reciprocal of each other\")\n    else: \n        print(\"Roots are not reciprocal of each other\")\n",
        "generated_testcode": "assert Check_Solution(1,2,3) == True\n",
        "test": "assert Check_Solution(2,0,2) == \"Yes\"\nassert Check_Solution(2,-5,2) == \"Yes\"\nassert Check_Solution(1,2,3) == \"No\"",
        "canonical_solution": "def Check_Solution(a,b,c): \r\n    if (a == c): \r\n        return (\"Yes\"); \r\n    else: \r\n        return (\"No\"); "
    },
    {
        "number": 637,
        "prompt": "Write a function to check whether the given amount has no profit and no loss\ndef noprofit_noloss(actual_cost,sale_amount): \n",
        "checkpoint": "13B",
        "pass": 7,
        "correct": true,
        "answer": "    if sale_amount > actual_cost: \n        profit = sale_amount - actual_cost \n    else: \n        profit = 0 \n    if actual_cost > sale_amount: \n        loss = actual_cost - sale_amount \n    else: \n        loss = 0 \n    if profit == 0 and loss == 0: \n        return True \n    else: \n        return False\n\n# Test the function \nactual_cost = 10000\nsale_amount = 1500\nif noprofit_noloss(actual_cost, sale_amount): \n    print(\"No profit and no loss\") \nelse: \n    print(\"Profit or loss exists\") \n\n# Test the function \nactual_cost = 10000\nsale_amount = 800\nif noprofit_noloss(actual_cost, sale_amount): \n    print(\"No profit and no loss\") \nelse: \n    print(\"Profit or loss exists\") ",
        "generated_testcode": "assert noprofit_noloss(100, 100) == True\n",
        "test": "assert noprofit_noloss(1500,1200)==False\nassert noprofit_noloss(100,100)==True\nassert noprofit_noloss(2000,5000)==False",
        "canonical_solution": "def noprofit_noloss(actual_cost,sale_amount): \r\n  if(sale_amount == actual_cost):\r\n    return True\r\n  else:\r\n    return False"
    },
    {
        "number": 638,
        "prompt": "Write a function to calculate wind chill index.\ndef wind_chill(v,t):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    \"\"\"\n    Calculates wind chill index\n    \"\"\"\n    if v <= 4.8 or t > 100:\n        wc = 0\n    elif t < 10:\n        wc = 13.12 + 0.6215 * t - 11.37 * (v ** 0.16) + 0.3965 * t * (v ** 0.16)\n    else:\n        wc = 13.12 + 0.6215 * t - 11.37 * (v ** 0.16) + 0.3965 * t * (v ** 0.16) - 4.8\n    return wc\n\n# Input speed and temperature\nv = float(input(\"Enter wind speed in mph: \"))\nt = float(input(\"Enter temperature in Fahrenheit: \"))\n\n# Call the function to calculate wind chill index\nwci = wind_chill(v,t)\n\n# Output wind chill index\nprint(\"Wind chill index is:\", wci) ",
        "generated_testcode": "assert wind_chill(10, 0) == 10\n",
        "test": "assert wind_chill(120,35)==40\nassert wind_chill(40,70)==86\nassert wind_chill(10,100)==116",
        "canonical_solution": "import math\r\ndef wind_chill(v,t):\r\n windchill = 13.12 + 0.6215*t -  11.37*math.pow(v, 0.16) + 0.3965*t*math.pow(v, 0.16)\r\n return int(round(windchill, 0))"
    },
    {
        "number": 639,
        "prompt": "Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\ndef sample_nam(sample_names):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    sum = 0\n    for name in sample_names:\n        if name[0].isupper():\n            sum += len(name)\n    return sum\n\n#Test the function with the following list\nsample_names = [\"Alice\", \"Bob\", \"charlie\", \"David\", \"eve\"]\nprint(sample_nam(sample_names)) # Output: 8\n\nsample_names = [\"alice\", \"BOB\", \"charlie\", \"David\", \"Eve\"]\nprint(sample_nam(sample_names)) # Output: 12 \n\n# Test your function with different lists and check if it works as expected. ",
        "generated_testcode": "assert sample_nam(['Alice', 'Bob', 'carol', 'David', 'eve']) == 8\n",
        "test": "assert sample_nam(['sally', 'Dylan', 'rebecca', 'Diana', 'Joanne', 'keith'])==16\nassert sample_nam([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"])==10\nassert sample_nam([\"abcd\", \"Python\", \"abba\", \"aba\"])==6",
        "canonical_solution": "def sample_nam(sample_names):\r\n  sample_names=list(filter(lambda el:el[0].isupper() and el[1:].islower(),sample_names))\r\n  return len(''.join(sample_names))"
    },
    {
        "number": 640,
        "prompt": "Write a function to remove the parenthesis area in a string.\ndef remove_parenthesis(items):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    stack = []\n    result = []\n    for i in items:\n        if i == '(':\n            stack.append(i)\n        elif i == ')':\n            if len(stack) > 0 and stack[-1] == '(':\n                stack.pop()\n            else:\n                result.append(i)\n        else:\n            result.append(i)\n    return ''.join(result)\n\n\n# Example usage:\nprint(remove_parenthesis(\"a+b*(c-d/e^f(g*h-i)-j)\"))  # Output: \"a+b*c-df^h-ij\"\nprint(remove_parenthesis(\"(a+b)*(c-d)\"))         # Output: \"ab-c\"\nprint(remove_parenthesis(\"(a+b)*(c-(d)\"))        # Output: \"ab*c-d\"\n\n\n# Time Complexity: O(n)\n# Space Complexity: O(n) ",
        "generated_testcode": "assert remove_parenthesis(\"(hello) world\") == \"hello world\"\n",
        "test": "assert remove_parenthesis([\"python (chrome)\"])==(\"python\")\nassert remove_parenthesis([\"string(.abc)\"])==(\"string\")\nassert remove_parenthesis([\"alpha(num)\"])==(\"alpha\")",
        "canonical_solution": "import re\r\ndef remove_parenthesis(items):\r\n for item in items:\r\n    return (re.sub(r\" ?\\([^)]+\\)\", \"\", item))"
    },
    {
        "number": 641,
        "prompt": "Write a function to find the nth nonagonal number.\ndef is_nonagonal(n): \n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": true,
        "answer": "    return n * (3 * n - 1) // 2\n\ndef nth_nonagonal(n): \n    nonagonal = 0\n    count = 0\n    i = 1\n    while count < n: \n        nonagonal += 1\n        count += 1\n        if is_nonagonal(nonagonal) == is_nonagonal(nonagonal-1) + i: \n            i += 1\n    return nonagonal ",
        "generated_testcode": "assert is_nonagonal(1) == 1\n",
        "test": "assert is_nonagonal(10) == 325\nassert is_nonagonal(15) == 750\nassert is_nonagonal(18) == 1089",
        "canonical_solution": "def is_nonagonal(n): \r\n\treturn int(n * (7 * n - 5) / 2) "
    },
    {
        "number": 642,
        "prompt": "Write a function to remove similar rows from the given tuple matrix.\ndef remove_similar_row(test_list):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    # Convert the tuple to list\n    lst = list(test_list)\n    i = 0\n    # Traverse through the list\n    while i < len(lst):\n        # Traverse through the list again\n        j = i + 1\n        while j < len(lst):\n            # Compare the rows\n            if lst[i] == lst[j]:\n                # If they are similar, remove the row\n                lst.pop(j)\n            else:\n                j += 1\n        i += 1\n    return tuple(lst)\n\n\n# Test the function\ntest_list = ((1, 2, 3), (2, 3, 4), (1, 2, 3), (4, 5, 6), (2, 3, 4))\nprint(remove_similar_row(test_list))  # Output: ((1, 2, 3), (2, 3, 4), (4, 5, 6))\n\n# Explanation:\n# The first and third row are similar, so the third row is removed.\n# The second and fourth row are similar, so the fourth row is removed.\n# The final output is ((1, 2, 3), (2, 3, 4), (4, 5, 6))\n",
        "generated_testcode": "",
        "test": "assert remove_similar_row([[(4, 5), (3, 2)], [(2, 2), (4, 6)], [(3, 2), (4, 5)]] ) == {((2, 2), (4, 6)), ((3, 2), (4, 5))}\nassert remove_similar_row([[(5, 6), (4, 3)], [(3, 3), (5, 7)], [(4, 3), (5, 6)]] ) == {((4, 3), (5, 6)), ((3, 3), (5, 7))}\nassert remove_similar_row([[(6, 7), (5, 4)], [(4, 4), (6, 8)], [(5, 4), (6, 7)]] ) =={((4, 4), (6, 8)), ((5, 4), (6, 7))}",
        "canonical_solution": "def remove_similar_row(test_list):\r\n  res = set(sorted([tuple(sorted(set(sub))) for sub in test_list]))\r\n  return (res) "
    },
    {
        "number": 643,
        "prompt": "Write a function that matches a word containing 'z', not at the start or end of the word.\ndef text_match_wordz_middle(text):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    return re.findall(r'\\w*z\\w*', text)\n\nprint(text_match_wordz_middle(\"The quick brown fox jumps over the lazy dog.\")) # [\"ick\", \"rown\", \"umps\", \"over\", \"azy\"]\nprint(text_match_wordz_middle(\"Python is an interpreted, high-level programming language.\")) # [\"ython\", \"interpreted\", \"level\", \"rog\", \"nim\", \"level\"] ",
        "generated_testcode": "assert text_match_wordz_middle(\"The quick brown fox jumps over the lazy dog\") == True\n",
        "test": "assert text_match_wordz_middle(\"pythonzabc.\")==('Found a match!')\nassert text_match_wordz_middle(\"xyzabc.\")==('Found a match!')\nassert text_match_wordz_middle(\"  lang  .\")==('Not matched!')",
        "canonical_solution": "import re\r\ndef text_match_wordz_middle(text):\r\n        patterns = '\\Bz\\B'\r\n        if re.search(patterns,  text):\r\n                return 'Found a match!'\r\n        else:\r\n                return('Not matched!')"
    },
    {
        "number": 644,
        "prompt": "Write a python function to reverse an array upto a given position.\ndef reverse_Array_Upto_K(input, k): \n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    arr = list(input) \n    for i in range(k): \n        j = 0\n        while j < i: \n            input[i], input[j] = input[j], input[i] \n            j += 1\n    return input \n  \n#example\ninput = [1, 2, 3, 4, 5, 6, 7, 8, 9] \nk = 3\nprint(reverse_Array_Upto_K(input, k)) # output: [3, 2, 1, 4, 5, 6, 7, 8, 9] ",
        "generated_testcode": "",
        "test": "assert reverse_Array_Upto_K([1, 2, 3, 4, 5, 6],4) == [4, 3, 2, 1, 5, 6]\nassert reverse_Array_Upto_K([4, 5, 6, 7], 2) == [5, 4, 6, 7]\nassert reverse_Array_Upto_K([9, 8, 7, 6, 5],3) == [7, 8, 9, 6, 5]",
        "canonical_solution": "def reverse_Array_Upto_K(input, k): \r\n  return (input[k-1::-1] + input[k:]) "
    },
    {
        "number": 645,
        "prompt": "Write a function to find the product of it\u2019s kth index in the given tuples.\ndef get_product(val) : \n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    first_tuple = (2, 3, 5, 7) \n    second_tuple = (11, 13, 17) \n    product = 1\n    for i in range(val) : \n        product *= first_tuple[i]\n    return product\n  \ndef get_product_second_tuple(val) : \n    second_tuple = (11, 13, 17) \n    product = 1\n    for i in range(val) : \n        product *= second_tuple[i]\n    return product\n  \n# Driver code \nk = 2\nprint(\"The product of\", k, \"elements in first tuple is\", get_product(k)) \nk = 3\nprint(\"The product of\", k, \"elements in second tuple is\", get_product_second_tuple(k)) ",
        "generated_testcode": "",
        "test": "assert find_k_product([(5, 6, 7), (1, 3, 5), (8, 9, 19)], 2) == 665\nassert find_k_product([(6, 7, 8), (2, 4, 6), (9, 10, 20)], 1) == 280\nassert find_k_product([(7, 8, 9), (3, 5, 7), (10, 11, 21)], 0) == 210",
        "canonical_solution": "def get_product(val) : \r\n\tres = 1\r\n\tfor ele in val: \r\n\t\tres *= ele \r\n\treturn res \r\ndef find_k_product(test_list, K):\r\n  res = get_product([sub[K] for sub in test_list])\r\n  return (res) "
    },
    {
        "number": 646,
        "prompt": "Write a python function to count number of cubes of size k in a cube of size n.\ndef No_of_cubes(N,K):\n",
        "checkpoint": "13B",
        "pass": 7,
        "correct": true,
        "answer": "    count=0\n    for i in range(1,N+1):\n        if (i**3)<=K:\n            count+=1\n        else:\n            break\n    return count\n\n#Testing\nN=7\nK=10000\nprint(No_of_cubes(N,K))\n\n\n#output: 6 ",
        "generated_testcode": "assert No_of_cubes(10,2) == 1\n",
        "test": "assert No_of_cubes(2,1) == 8\nassert No_of_cubes(5,2) == 64\nassert No_of_cubes(1,1) == 1",
        "canonical_solution": "def No_of_cubes(N,K):\r\n    No = 0\r\n    No = (N - K + 1)\r\n    No = pow(No, 3)\r\n    return No"
    },
    {
        "number": 647,
        "prompt": "Write a function to split a string at uppercase letters.\ndef split_upperstring(text):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    words = []\n    word = \"\"\n    for i in range(len(text)):\n        if text[i].isupper():\n            if word:\n                words.append(word)\n                word = \"\"\n        word += text[i]\n    words.append(word)\n    return words\n\nprint(split_upperstring(\"HelloWorld\"))\n# output: [\"Hello\", \"World\"]\n\n# Test case 2\nprint(split_upperstring(\"aBcDeFgHiJkLmNoP\"))\n# output: [\"a\", \"Bc\", \"De\", \"Fg\", \"Hi\", \"Jk\", \"Lm\", \"No\", \"P\"]\n\n# Test case 3\nprint(split_upperstring(\"aBcDeFg\"))\n# output: [\"a\", \"Bc\", \"De\", \"Fg\"]\n\n# Test case 4\nprint(split_upperstring(\"A\"))\n# output: [\"A\"]\n\n# Test case 5\nprint(split_upperstring(\"\"))\n# output: []\n\n# Test case 6\nprint(split_upperstring(\"aBCdef\"))\n# output: [\"a\", \"BC\", \"def\"]\n\n# Test case 7\nprint(split_upperstring(\"HelloWorldHi\"))\n# output: [\"Hello\", \"World\", \"Hi\"]\n\n# Test case 8\nprint(split_upperstring(\"HelloWorld123Hi\"))\n# output: [\"Hello\", \"World\", \"123\", \"Hi\"] ",
        "generated_testcode": "assert split_upperstring(\"HelloWorld\") == [\"Hello\", \"World\"]\n",
        "test": "assert split_upperstring(\"PythonProgramLanguage\")==['Python','Program','Language']\nassert split_upperstring(\"PythonProgram\")==['Python','Program']\nassert split_upperstring(\"ProgrammingLanguage\")==['Programming','Language']",
        "canonical_solution": "import re\r\ndef split_upperstring(text):\r\n return (re.findall('[A-Z][^A-Z]*', text))"
    },
    {
        "number": 648,
        "prompt": "Write a function to exchange the position of every n-th value with (n+1)th value and (n+1)th value with n-th value in a given list.\ndef exchange_elements(lst):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    n = len(lst)\n    for i in range(0, n//2):\n        lst[2*i], lst[2*i+1] = lst[2*i+1], lst[2*i]\n    return lst\n\n\nprint(exchange_elements([1,2,3,4,5,6,7,8,9,10]))\n# Output: [2, 1, 4, 3, 6, 5, 8, 7, 10]\n\n# Test case 2\nprint(exchange_elements(['a','b','c','d','e','f']))\n# Output: ['b', 'a', 'd', 'c', 'f', 'e']\n\n# Test case 3\nprint(exchange_elements([10, 20, 30, 40, 50, 60]))\n# Output: [20, 10, 40, 30, 60, 50]\n\n# Test case 4\nprint(exchange_elements(['apple', 'banana', 'cherry', 'date', 'elderberry']))\n# Output: ['banana', 'apple', 'date', 'cherry', 'elderberry'] ",
        "generated_testcode": "assert exchange_elements([1, 2, 3, 4, 5, 6, 7, 8, 9]) == [2, 1, 4, 3, 6, 5, 8, 7]\n",
        "test": "assert exchange_elements([0,1,2,3,4,5])==[1, 0, 3, 2, 5, 4] \nassert exchange_elements([5,6,7,8,9,10])==[6,5,8,7,10,9] \nassert exchange_elements([25,35,45,55,75,95])==[35,25,55,45,95,75] ",
        "canonical_solution": "from itertools import zip_longest, chain, tee\r\ndef exchange_elements(lst):\r\n    lst1, lst2 = tee(iter(lst), 2)\r\n    return list(chain.from_iterable(zip_longest(lst[1::2], lst[::2])))"
    },
    {
        "number": 649,
        "prompt": "Write a python function to calculate the sum of the numbers in a list between the indices of a specified range.\ndef sum_Range_list(nums, m, n):                                                                                                                                                                                                \n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    sum = 0\n    for i in range(m, n+1):\n        sum += nums[i]\n    return sum\n\n#Example usage:\nnums = [1, 2, 3, 4, 5, 6, 7, 8, 9]\nm = 1\nn = 4\nprint(sum_Range_list(nums, m, n)) # Output: 20 (1 + 2 + 3 + 4 + 5 = 14) ",
        "generated_testcode": "assert sum_Range_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2, 5) == 18\n",
        "test": "assert sum_Range_list([2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12],8,10) == 29\nassert sum_Range_list([1,2,3,4,5],1,2) == 5\nassert sum_Range_list([1,0,1,2,5,6],4,5) == 11",
        "canonical_solution": "def sum_Range_list(nums, m, n):                                                                                                                                                                                                \r\n    sum_range = 0                                                                                                                                                                                                         \r\n    for i in range(m, n+1, 1):                                                                                                                                                                                        \r\n        sum_range += nums[i]                                                                                                                                                                                                  \r\n    return sum_range   "
    },
    {
        "number": 650,
        "prompt": "Write a python function to check whether the given two arrays are equal or not.\ndef are_Equal(arr1,arr2,n,m):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": true,
        "answer": "    if n != m:\n        return False\n    else:\n        for i in range(n):\n            if arr1[i] != arr2[i]:\n                return False\n        return True\n\narr1 = [1,2,3,4,5]\narr2 = [1,2,3,4,5]\nn = len(arr1)\nm = len(arr2)\nif are_Equal(arr1,arr2,n,m):\n    print(\"Arrays are equal\")\nelse:\n    print(\"Arrays are not equal\")\n\n# Test case\narr1 = [1, 2, 3, 4, 5]\narr2 = [1, 2, 3, 4, 5]\nn = len(arr1)\nm = len(arr2)\nif are_Equal(arr1, arr2, n, m):\n    print(\"Arrays are equal\")\nelse:\n    print(\"Arrays are not equal\")  # Output: Arrays are equal\n\narr1 = [1, 2, 3, 4, 5]\narr2 = [1, 2, 3, 6, 5]\nn = len(arr1)\nm = len(arr2)\nif are_Equal(arr1, arr2, n, m):\n    print(\"Arrays are equal\")\nelse:\n    print(\"Arrays are not equal\")  # Output: Arrays are not equal\n\n# This function will return True if both arrays are equal",
        "generated_testcode": "assert are_Equal([1,2,3,4,5],[1,2,3,4,5],4,4) == True\n",
        "test": "assert are_Equal([1,2,3],[3,2,1],3,3) == True\nassert are_Equal([1,1,1],[2,2,2],3,3) == False\nassert are_Equal([8,9],[4,5,6],2,3) == False",
        "canonical_solution": "def are_Equal(arr1,arr2,n,m):\r\n    if (n != m):\r\n        return False\r\n    arr1.sort()\r\n    arr2.sort()\r\n    for i in range(0,n - 1):\r\n        if (arr1[i] != arr2[i]):\r\n            return False\r\n    return True"
    },
    {
        "number": 651,
        "prompt": "Write a function to check if one tuple is a subset of another tuple.\ndef check_subset(test_tup1, test_tup2):\n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    if set(test_tup1).issubset(test_tup2):\n        return True\n    else:\n        return False\n\n# Example usage:\ntup1 = (1, 2, 3, 4, 5)\ntup2 = (1, 2, 3, 4, 5, 6)\nprint(check_subset(tup1, tup2))  # Output: True\ntup3 = (7, 8, 9)\nprint(check_subset(tup3, tup2))  # Output: False\n\n# Explanation: The function checks if all the elements of the first tuple are present in the second tuple.\n# If they are present, it returns True, else it returns False.\n# In this example, tuple 1 is a subset of tuple 2, so it returns True. Tuple 3 is not a subset of tuple 2, so it returns False. ",
        "generated_testcode": "assert check_subset((1, 2, 3), (1, 2, 3, 4, 5)) == True\n",
        "test": "assert check_subset((10, 4, 5, 6), (5, 10)) == True\nassert check_subset((1, 2, 3, 4), (5, 6)) == False\nassert check_subset((7, 8, 9, 10), (10, 8)) == True",
        "canonical_solution": "def check_subset(test_tup1, test_tup2):\r\n  res = set(test_tup2).issubset(test_tup1)\r\n  return (res) "
    },
    {
        "number": 652,
        "prompt": "Write a function to flatten the given tuple matrix into the tuple list with each tuple representing each column.\ndef matrix_to_list(test_list):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    flat_list = []\n    for i in range(len(test_list[0])):\n        col_list = []\n        for row in test_list:\n            col_list.append(row[i])\n        flat_list.append(tuple(col_list))\n    return tuple(flat_list)\n\n# Test the function with a sample matrix\ntest_list = ((1, 2, 3), (4, 5, 6), (7, 8, 9))\nprint(matrix_to_list(test_list))  # Output: ((1, 4, 7), (2, 5, 8), (3, 6, 9))\n\n# Explanation: The function iterates over each column and creates a new tuple containing the elements from that column and appends it to the flat list. ",
        "generated_testcode": "",
        "test": "assert matrix_to_list([[(4, 5), (7, 8)], [(10, 13), (18, 17)], [(0, 4), (10, 1)]]) == '[(4, 7, 10, 18, 0, 10), (5, 8, 13, 17, 4, 1)]'\nassert matrix_to_list([[(5, 6), (8, 9)], [(11, 14), (19, 18)], [(1, 5), (11, 2)]]) == '[(5, 8, 11, 19, 1, 11), (6, 9, 14, 18, 5, 2)]'\nassert matrix_to_list([[(6, 7), (9, 10)], [(12, 15), (20, 21)], [(23, 7), (15, 8)]]) == '[(6, 9, 12, 20, 23, 15), (7, 10, 15, 21, 7, 8)]'",
        "canonical_solution": "def matrix_to_list(test_list):\r\n  temp = [ele for sub in test_list for ele in sub]\r\n  res = list(zip(*temp))\r\n  return (str(res))"
    },
    {
        "number": 653,
        "prompt": "Write a function to group a sequence of key-value pairs into a dictionary of lists using collections module.\ndef grouping_dictionary(l):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    from collections import defaultdict\n    d = defaultdict(list)\n    for key, value in l:\n        d[key].append(value)\n    return d\n\n# Example usage:\npairs = [(1, 'a'), (1, 'b'), (2, 'c'), (1, 'd'), (2, 'e'), (3, 'f'), (1, 'g')]\nprint(grouping_dictionary(pairs))\n# Output: {1: ['a', 'b', 'd', 'g'], 2: ['c', 'e'], 3: ['f']}\n\n# Using defaultdict with set\ndef grouping_dictionary_set(l):\n    from collections import defaultdict\n    d = defaultdict(set)\n    for key, value in l:\n        d[key].add(value)\n    return d\n\n# Example usage:\npairs = [(1, 'a'), (1, 'b'), (2, 'c'), (1, 'd'), (2, 'e'), (3, 'f'), (1, 'g')]\nprint(grouping_dictionary_set(pairs))\n# Output: {1: {'a', 'b', 'd', 'g'}, 2: {'c', 'e'}, 3: {'f'}}\n\n# Using defaultdict with tuple\ndef grouping_dictionary_tuple(l):\n    from collections import defaultdict\n    d = defaultdict(tuple)\n    for key, value in l:\n        d[key] += (value,)\n",
        "generated_testcode": "",
        "test": "assert grouping_dictionary([('yellow', 1), ('blue', 2), ('yellow', 3), ('blue', 4), ('red', 1)])== ({'yellow': [1, 3], 'blue': [2, 4], 'red': [1]})\nassert grouping_dictionary([('yellow', 10), ('blue', 20), ('yellow', 30), ('blue', 40), ('red', 10)])== ({'yellow': [10, 30], 'blue': [20, 40], 'red': [10]})\nassert grouping_dictionary([('yellow', 15), ('blue', 25), ('yellow', 35), ('blue', 45), ('red', 15)])== ({'yellow': [15, 35], 'blue': [25, 45], 'red': [15]})",
        "canonical_solution": "from collections import defaultdict\r\ndef grouping_dictionary(l):\r\n    d = defaultdict(list)\r\n    for k, v in l:\r\n        d[k].append(v)\r\n    return d"
    },
    {
        "number": 654,
        "prompt": "Write a function to find the perimeter of a rectangle.\ndef rectangle_perimeter(l,b):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    return 2*(l+b)\n\n# Test the function with the given example\nprint(rectangle_perimeter(5,7)) # Output: 18\n\n# Write a function to find the area of a rectangle.\ndef rectangle_area(l,b):\n    return l*b\n\n# Test the function with the given example\nprint(rectangle_area(5,7)) # Output: 35\n\n# Write a function to find the area of a triangle.\ndef triangle_area(b,h):\n    return 0.5*b*h\n\n# Test the function with the given example\nprint(triangle_area(10,8)) # Output: 40.0\n\n# Write a function to find the area of a circle.\ndef circle_area(r):\n    pi = 3.14159\n    return pi*(r**2)\n\n# Test the function with the given example\nprint(circle_area(5)) # Output: 78.5\n\n# Write a function to find the volume of a sphere.\ndef sphere_volume(r):\n    pi = 3.14159\n    return (4/3)*pi*(r**3)\n\n# Test the function with the given example\nprint(sphere_volume(5)) # Output: 523.6\n\n# Write a function to find the volume of a cylinder.\ndef cylinder_volume(r,h):\n    pi = 3.14159\n    return pi",
        "generated_testcode": "assert rectangle_perimeter(5, 10) == 20\n",
        "test": "assert rectangle_perimeter(10,20)==60\nassert rectangle_perimeter(10,5)==30\nassert rectangle_perimeter(4,2)==12",
        "canonical_solution": "def rectangle_perimeter(l,b):\r\n  perimeter=2*(l+b)\r\n  return perimeter"
    },
    {
        "number": 655,
        "prompt": "Write a python function to find the sum of fifth power of n natural numbers.\ndef fifth_Power_Sum(n) : \n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    sum = 0\n    for i in range(1, n+1) : \n        sum += i**5\n    return sum \n  \n# Driver code \nn = 10\nprint(\"The sum of fifth power of first\",n,\"natural numbers is\",fifth_Power_Sum(n)) ",
        "generated_testcode": "assert fifth_Power_Sum(5) == 13265\n",
        "test": "assert fifth_Power_Sum(2) == 33\nassert fifth_Power_Sum(4) == 1300\nassert fifth_Power_Sum(3) == 276",
        "canonical_solution": "def fifth_Power_Sum(n) : \r\n    sm = 0 \r\n    for i in range(1,n+1) : \r\n        sm = sm + (i*i*i*i*i) \r\n    return sm "
    },
    {
        "number": 656,
        "prompt": "Write a python function to find the minimum sum of absolute differences of two arrays.\ndef find_Min_Sum(a,b,n): \n",
        "checkpoint": "13B",
        "pass": 5,
        "correct": true,
        "answer": "    a.sort()\n    b.sort()\n    i,j = 0,0\n    diff = 0\n    while(i < n and j < n):\n        if(a[i] < b[j]):\n            diff += b[j] - a[i]\n            i+=1\n        elif(a[i] > b[j]):\n            diff += a[i] - b[j]\n            j+=1\n        else:\n            return diff\n    return diff\n\n# test the function\na = [1,5,3,2,8,6]\nb = [7,4,5,9,10]\nn = len(a)\nprint(find_Min_Sum(a,b,n)) # output: 2\n\n# Time complexity: O(nlogn)\n# Space complexity: O(1) ",
        "generated_testcode": "assert find_Min_Sum([1,2,3,4,5],[2,3,4,5,6],4) == 1\n",
        "test": "assert find_Min_Sum([3,2,1],[2,1,3],3) == 0\nassert find_Min_Sum([1,2,3],[4,5,6],3) == 9\nassert find_Min_Sum([4,1,8,7],[2,3,6,5],4) == 6",
        "canonical_solution": "def find_Min_Sum(a,b,n): \r\n    a.sort() \r\n    b.sort() \r\n    sum = 0  \r\n    for i in range(n): \r\n        sum = sum + abs(a[i] - b[i]) \r\n    return sum"
    },
    {
        "number": 657,
        "prompt": "Write a python function to find the first digit in factorial of a given number.\ndef first_Digit(n) : \n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    factorial = 1\n    for i in range(1, n+1) : \n        factorial *= i\n    while (factorial > 0) : \n        if (factorial % 10 != 0) : \n            return factorial % 10\n        else : \n            factorial //= 10\n\n# Test the function with some values \nprint(first_Digit(5)) # Output: 5 \nprint(first_Digit(10)) # Output: 3 \nprint(first_Digit(15)) # Output: 5 \nprint(first_Digit(20)) # Output: 2 \nprint(first_Digit(25)) # Output: 5 \nprint(first_Digit(30)) # Output: 6 \n\n# Time Complexity : O(n)\n# Space Complexity : O(1) ",
        "generated_testcode": "assert first_Digit(5) == 5\n",
        "test": "assert first_Digit(5) == 1\nassert first_Digit(10) == 3\nassert first_Digit(7) == 5",
        "canonical_solution": "import math \r\ndef first_Digit(n) : \r\n    fact = 1\r\n    for i in range(2,n + 1) : \r\n        fact = fact * i \r\n        while (fact % 10 == 0) :  \r\n            fact = int(fact / 10) \r\n    while (fact >= 10) : \r\n        fact = int(fact / 10) \r\n    return math.floor(fact) "
    },
    {
        "number": 658,
        "prompt": "Write a function to find the item with maximum occurrences in a given list.\ndef max_occurrences(list1):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": true,
        "answer": "    max_item = None\n    max_count = 0\n    count_dict = {}\n    for item in list1:\n        if item in count_dict:\n            count_dict[item] += 1\n        else:\n            count_dict[item] = 1\n        if count_dict[item] > max_count:\n            max_count = count_dict[item]\n            max_item = item\n    return max_item\n\n# Example usage:\nprint(max_occurrences([1, 2, 2, 3, 3, 3, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5])) # Output: 5\nprint(max_occurrences([1, 2, 3, 4, 5, 6, 7, 8])) # Output: None\nprint(max_occurrences([])) # Output: None ",
        "generated_testcode": "assert max_occurrences([1, 2, 3, 4, 5, 6, 6, 6, 7, 8, 9, 9, 9, 9]) == 9\n",
        "test": "assert max_occurrences([2,3,8,4,7,9,8,2,6,5,1,6,1,2,3,4,6,9,1,2])==2\nassert max_occurrences([1, 3,5, 7,1, 3,13, 15, 17,5, 7,9,1, 11])==1\nassert max_occurrences([1, 2, 3,2, 4, 5,1, 1, 1])==1",
        "canonical_solution": "def max_occurrences(list1):\r\n    max_val = 0\r\n    result = list1[0] \r\n    for i in list1:\r\n        occu = list1.count(i)\r\n        if occu > max_val:\r\n            max_val = occu\r\n            result = i \r\n    return result"
    },
    {
        "number": 659,
        "prompt": "Write a python function to print duplicants from a list of integers.\ndef Repeat(x): \n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": true,
        "answer": "    dup = [] \n    for i in range(len(x)): \n        if x.count(x[i]) > 1 and x[i] not in dup: \n            dup.append(x[i]) \n    return dup \n\nx = [1,2,3,4,5,4,6,2,7,8,8,9,7] \nprint(Repeat(x)) ",
        "generated_testcode": "assert Repeat([1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3]) == [1, 2, 3]\n",
        "test": "assert Repeat([10, 20, 30, 20, 20, 30, 40, 50, -20, 60, 60, -20, -20]) == [20, 30, -20, 60]\nassert Repeat([-1, 1, -1, 8]) == [-1]\nassert Repeat([1, 2, 3, 1, 2,]) == [1, 2]",
        "canonical_solution": "def Repeat(x): \r\n    _size = len(x) \r\n    repeated = [] \r\n    for i in range(_size): \r\n        k = i + 1\r\n        for j in range(k, _size): \r\n            if x[i] == x[j] and x[i] not in repeated: \r\n                repeated.append(x[i]) \r\n    return repeated "
    },
    {
        "number": 660,
        "prompt": "Write a python function to choose points from two ranges such that no point lies in both the ranges.\ndef find_Points(l1,r1,l2,r2): \n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    i,j = 0,0 \n    n1,n2 = len(l1), len(r1)\n    m1,m2 = len(l2), len(r2)\n    ans = []\n    while i<n1 and j<m2: \n        if l1[i] < l2[j]: \n            ans.append(l1[i]) \n            i+=1 \n        elif l2[j] < r1[i]: \n            ans.append(l2[j]) \n            j+=1 \n        else: \n            i+=1\n    while i<n1: \n        ans.append(l1[i]) \n        i+=1 \n    while j<m2: \n        ans.append(l2[j]) \n        j+=1 \n    return ans \n  \n# Example usage: \nl1 = [1, 3, 5, 7, 9] \nr1 = [2, 4, 6, 8, 10] \nl2 = [1, 3, 5, 7, 9] \nr2 = [2, 4, 6, 8, 10] \nprint(find_Points(l1, r1, l2, r2)) ",
        "generated_testcode": "assert find_Points(1,5,3,7) == (1,7)\n",
        "test": "assert find_Points(5,10,1,5) == (1,10)\nassert find_Points(3,5,7,9) == (3,9)\nassert find_Points(1,5,2,8) == (1,8)",
        "canonical_solution": "def find_Points(l1,r1,l2,r2): \r\n    x = min(l1,l2) if (l1 != l2) else -1\r\n    y = max(r1,r2) if (r1 != r2) else -1\r\n    return (x,y)"
    },
    {
        "number": 661,
        "prompt": "Write a function to find the maximum sum that can be formed which has no three consecutive elements present.\ndef max_sum_of_three_consecutive(arr, n): \n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    if n < 3:\n        return 0\n    # Initialize variables\n    incl = 0\n    excl = 0\n    excl_new = 0\n    # Loop through the array\n    for i in range(2, n): \n        # Current element will be part of excl if it is not part of the previous sum\n        excl_new = max(incl, excl) \n        # Current element is included in the sum, so we add it to incl\n        incl = excl + arr[i] \n        # Previous element is excluded, so we take max of previous excl and current element\n        excl = max(excl, excl_new) \n        # Update the maximum sum\n        if i == n-1: \n            excl = max(incl, excl) \n    return excl ",
        "generated_testcode": "assert max_sum_of_three_consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9], 7) == 24\n",
        "test": "assert max_sum_of_three_consecutive([100, 1000, 100, 1000, 1], 5) == 2101\nassert max_sum_of_three_consecutive([3000, 2000, 1000, 3, 10], 5) == 5013\nassert max_sum_of_three_consecutive([1, 2, 3, 4, 5, 6, 7, 8], 8) == 27",
        "canonical_solution": "def max_sum_of_three_consecutive(arr, n): \r\n\tsum = [0 for k in range(n)] \r\n\tif n >= 1: \r\n\t\tsum[0] = arr[0] \r\n\tif n >= 2: \r\n\t\tsum[1] = arr[0] + arr[1] \r\n\tif n > 2: \r\n\t\tsum[2] = max(sum[1], max(arr[1] + arr[2], arr[0] + arr[2])) \r\n\tfor i in range(3, n): \r\n\t\tsum[i] = max(max(sum[i-1], sum[i-2] + arr[i]), arr[i] + arr[i-1] + sum[i-3]) \r\n\treturn sum[n-1]"
    },
    {
        "number": 662,
        "prompt": "Write a function to sort a list in a dictionary.\ndef sorted_dict(dict1):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    sorted_dict = {}\n    for key in sorted(dict1.keys()):\n        sorted_dict[key] = dict1[key]\n    return sorted_dict\n\n# Example usage:\ndict1 = {'a': 1, 'b': 2, 'c': 3, 'd': 4, 'f': 5, 'e': 6}\nprint(sorted_dict(dict1)) ",
        "generated_testcode": "assert sorted_dict({'a': 1, 'b': 2, 'c': 3, 'd': 4}) == {'a': 1, 'b': 2, 'c': 3, 'd': 4}\n",
        "test": "assert sorted_dict({'n1': [2, 3, 1], 'n2': [5, 1, 2], 'n3': [3, 2, 4]})=={'n1': [1, 2, 3], 'n2': [1, 2, 5], 'n3': [2, 3, 4]}\nassert sorted_dict({'n1': [25,37,41], 'n2': [41,54,63], 'n3': [29,38,93]})=={'n1': [25, 37, 41], 'n2': [41, 54, 63], 'n3': [29, 38, 93]}\nassert sorted_dict({'n1': [58,44,56], 'n2': [91,34,58], 'n3': [100,200,300]})=={'n1': [44, 56, 58], 'n2': [34, 58, 91], 'n3': [100, 200, 300]}",
        "canonical_solution": "def sorted_dict(dict1):\r\n  sorted_dict = {x: sorted(y) for x, y in dict1.items()}\r\n  return sorted_dict"
    },
    {
        "number": 663,
        "prompt": "Write a function to find the largest possible value of k such that k modulo x is y.\ndef find_max_val(n, x, y): \n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    for i in range(n+1, 10**9+1):\n        if i % x == y:\n            return i\n    return None\n\n# Test the function with sample inputs\nprint(find_max_val(10, 3, 0)) # Output: 12\nprint(find_max_val(5, 2, 1)) # Output: None\nprint(find_max_val(10, 5, 0)) # Output: 15\nprint(find_max_val(10, 5, 3)) # Output: None\nprint(find_max_val(10, 7, 3)) # Output: 17\nprint(find_max_val(10, 10, 0)) # Output: None\nprint(find_max_val(10, 10, 2)) # Output: 20\nprint(find_max_val(100, 10, 0)) # Output: 1100\nprint(find_max_val(100, 10, 5)) # Output: 105\nprint(find_max_val(100, 10, 6)) # Output: None\nprint(find_max_val(100, 10, 8)) # Output: None\nprint(find_max_val(1000, 10, 5)) # Output: 105\nprint(find_max_val(100",
        "generated_testcode": "assert find_max_val(10, 3, 2) == 9\n",
        "test": "assert find_max_val(15, 10, 5) == 15\nassert find_max_val(187, 10, 5) == 185\nassert find_max_val(16, 11, 1) == 12",
        "canonical_solution": "import sys \r\ndef find_max_val(n, x, y): \r\n\tans = -sys.maxsize \r\n\tfor k in range(n + 1): \r\n\t\tif (k % x == y): \r\n\t\t\tans = max(ans, k) \r\n\treturn (ans if (ans >= 0 and\r\n\t\t\t\t\tans <= n) else -1) "
    },
    {
        "number": 664,
        "prompt": "Write a python function to find the average of even numbers till a given even number.\ndef average_Even(n) : \n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    sum = 0\n    count = 0\n    for i in range(2,n+1,2): \n        sum += i \n        count += 1\n    return sum/count \n    \nn = 10\nprint(\"Average of even numbers till\", n, \"is\", average_Even(n)) ",
        "generated_testcode": "assert average_Even(10) == 6\n",
        "test": "assert average_Even(2) == 2\nassert average_Even(4) == 3\nassert average_Even(100) == 51",
        "canonical_solution": "def average_Even(n) : \r\n    if (n% 2!= 0) : \r\n        return (\"Invalid Input\") \r\n        return -1  \r\n    sm = 0\r\n    count = 0\r\n    while (n>= 2) : \r\n        count = count+1\r\n        sm = sm+n \r\n        n = n-2\r\n    return sm // count "
    },
    {
        "number": 665,
        "prompt": "Write a python function to shift first element to the end of given list.\ndef move_last(num_list):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    num_list.append(num_list.pop(0))\n    return num_list\n    \nprint(move_last([1,2,3,4,5,6])) #[2,3,4,5,6,1]\n\n#def move_last(num_list):\n#    return num_list[-1:] + num_list[:-1]\n#\n#print(move_last([1,2,3,4,5,6])) #[6,1,2,3,4]\n\n#def move_last(num_list):\n#    return num_list[1:] + [num_list[0]]\n#\n#print(move_last([1,2,3,4,5,6])) #[2,3,4,5,1] \n\ndef move_last(num_list):\n    num_list.insert(len(num_list), num_list.pop(0))\n    return num_list\n\nprint(move_last([1,2,3,4,5,6])) #[2,3,4,5,6,1] ",
        "generated_testcode": "assert move_last([1, 2, 3, 4, 5]) == [2, 3, 4, 5, 1]\n",
        "test": "assert move_last([1,2,3,4]) == [2,3,4,1]\nassert move_last([2,3,4,1,5,0]) == [3,4,1,5,0,2]\nassert move_last([5,4,3,2,1]) == [4,3,2,1,5]",
        "canonical_solution": "def move_last(num_list):\r\n    a = [num_list[0] for i in range(num_list.count(num_list[0]))]\r\n    x = [ i for i in num_list if i != num_list[0]]\r\n    x.extend(a)\r\n    return (x)"
    },
    {
        "number": 666,
        "prompt": "Write a function to count occurrence of a character in a string.\ndef count_char(string,char):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": true,
        "answer": "    count = 0\n    for i in string:\n        if i == char:\n            count += 1\n    return count\n\n# Example usage:\nprint(count_char(\"hello world\", \"l\")) # Output: 3\nprint(count_char(\"python\", \"o\")) # Output: 1\nprint(count_char(\"abcdef\", \"z\")) # Output: 0\n\n# Explanation:\n# Function takes two parameters, string and character to be searched.\n# Loop through each character of the string and check if it matches with the character to be searched.\n# If it matches, increment the count by 1.\n# Finally, return the count. ",
        "generated_testcode": "assert count_char(\"hello world\", \"l\") == 3\n",
        "test": "assert count_char(\"Python\",'o')==1\nassert count_char(\"little\",'t')==2\nassert count_char(\"assert\",'s')==2",
        "canonical_solution": "def count_char(string,char):\r\n count = 0\r\n for i in range(len(string)):\r\n    if(string[i] == char):\r\n        count = count + 1\r\n return count"
    },
    {
        "number": 667,
        "prompt": "Write a python function to count number of vowels in the string.\ndef Check_Vow(string, vowels): \n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": true,
        "answer": "    count = 0 \n    for i in string: \n        if i in vowels: \n            count += 1\n    return count \n  \n# Driver program \nstring = \"Python\"\nvowels = \"AEIOUaeiou\"\nprint(Check_Vow(string, vowels)) ",
        "generated_testcode": "assert Check_Vow(\"hello\", \"aeiou\") == 2\n",
        "test": "assert Check_Vow('corner','AaEeIiOoUu') == 2\nassert Check_Vow('valid','AaEeIiOoUu') == 2\nassert Check_Vow('true','AaEeIiOoUu') ==2",
        "canonical_solution": "def Check_Vow(string, vowels): \r\n    final = [each for each in string if each in vowels] \r\n    return(len(final)) \r\n"
    },
    {
        "number": 668,
        "prompt": "Write a python function to replace multiple occurence of character by single.\ndef replace(string, char): \n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": true,
        "answer": "    if char in string:\n        return string.replace(char, \"\") \n    else: \n        return string \n  \n# Driver code \nstring = \"Hello World\"\nchar = \"l\"\nprint(replace(string, char)) \n  \nstring = \"Hello World\"\nchar = \"o\"\nprint(replace(string, char)) ",
        "generated_testcode": "assert replace(\"hello world\", \"l\") == \"heo word\"\n",
        "test": "assert replace('peep','e') == 'pep'\nassert replace('Greek','e') == 'Grek'\nassert replace('Moon','o') == 'Mon'",
        "canonical_solution": "import re \r\ndef replace(string, char): \r\n    pattern = char + '{2,}'\r\n    string = re.sub(pattern, char, string) \r\n    return string "
    },
    {
        "number": 669,
        "prompt": "Write a function to check whether the given ip address is valid or not using regex.\ndef check_IP(Ip): \n",
        "checkpoint": "13B",
        "pass": 7,
        "correct": true,
        "answer": "    import re\n    pattern = \"^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])$\"\n    if re.match(pattern, Ip): \n        return True\n    else: \n        return False\n  \n# Testing the function\nprint(check_IP(\"127.0.0.1\")) ",
        "generated_testcode": "assert check_IP(\"192.168.1.1\") == True\n",
        "test": "assert check_IP(\"192.168.0.1\") == 'Valid IP address'\nassert check_IP(\"110.234.52.124\") == 'Valid IP address'\nassert check_IP(\"366.1.2.2\") == 'Invalid IP address'",
        "canonical_solution": "import re \r\nregex = '''^(25[0-5]|2[0-4][0-9]|[0-1]?[0-9][0-9]?)\\.( \r\n\t\t\t25[0-5]|2[0-4][0-9]|[0-1]?[0-9][0-9]?)\\.( \r\n\t\t\t25[0-5]|2[0-4][0-9]|[0-1]?[0-9][0-9]?)\\.( \r\n\t\t\t25[0-5]|2[0-4][0-9]|[0-1]?[0-9][0-9]?)$'''\r\ndef check_IP(Ip): \r\n\tif(re.search(regex, Ip)): \r\n\t\treturn (\"Valid IP address\") \r\n\telse: \r\n\t\treturn (\"Invalid IP address\") "
    },
    {
        "number": 670,
        "prompt": "Write a python function to check whether a sequence of numbers has a decreasing trend or not.\ndef decreasing_trend(nums):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    if len(nums) < 2:\n        return False\n    if nums[0] > nums[1]:\n        return False\n    for i in range(1, len(nums)):\n        if nums[i] >= nums[i-1]:\n            return False\n    return True\n\n# Test cases\nprint(decreasing_trend([5,4,3,2,1])) # True\nprint(decreasing_trend([1,2,3,4,5])) # False\nprint(decreasing_trend([1])) # False\nprint(decreasing_trend([])) # False\nprint(decreasing_trend([1,2,3,3,2,1])) # False\nprint(decreasing_trend([5,4,3,3,2,1])) # True\nprint(decreasing_trend([5,4,3,2,2,1])) # True\n\n# Output: \n# True\n# False\n# False\n# False\n# False\n# True\n# True\n# True ",
        "generated_testcode": "assert decreasing_trend([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == False\n",
        "test": "assert decreasing_trend([-4,-3,-2,-1]) == True\nassert decreasing_trend([1,2,3]) == True\nassert decreasing_trend([3,2,1]) == False",
        "canonical_solution": "def decreasing_trend(nums):\r\n    if (sorted(nums)== nums):\r\n        return True\r\n    else:\r\n        return False"
    },
    {
        "number": 671,
        "prompt": "Write a python function to set the right most unset bit.\ndef get_Pos_Of_Right_most_Set_Bit(n): \n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": true,
        "answer": "    return n & -n \n\ndef set_Right_most_Bit(n): \n    return n | get_Pos_Of_Right_most_Bit(n) \n\ndef clear_Right_most_Bit(n): \n    return n & (n-1) \n\ndef set_Right_most_Unset_Bit(n): \n    return n ^ get_Pos_Of_Right_most_Bit(n) \n\n\ndef find_next_pos_of_rightmost_set_bit(n): \n    return set_Right_most_Unset_Bit(n) ",
        "generated_testcode": "assert get_Pos_Of_Right_most_Set_Bit(12) == 4\n",
        "test": "assert set_Right_most_Unset_Bit(21) == 23\nassert set_Right_most_Unset_Bit(11) == 15\nassert set_Right_most_Unset_Bit(15) == 15",
        "canonical_solution": "import math \r\ndef get_Pos_Of_Right_most_Set_Bit(n): \r\n    return int(math.log2(n&-n)+1)   \r\ndef set_Right_most_Unset_Bit(n): \r\n    if (n == 0): \r\n        return 1\r\n    if ((n & (n + 1)) == 0):     \r\n        return n \r\n    pos = get_Pos_Of_Right_most_Set_Bit(~n)      \r\n    return ((1 << (pos - 1)) | n) "
    },
    {
        "number": 672,
        "prompt": "Write a function to find maximum of three numbers.\ndef max_of_three(num1,num2,num3): \n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    if num1 > num2: \n        if num1 > num3: \n            return num1 \n        else: \n            return num3 \n    else: \n        if num2 > num3: \n            return num2 \n        else: \n            return num3 \n\nnum1 = 10 \nnum2 = 15 \nnum3 = 20 \n  \nprint(\"Maximum of three numbers is:\", max_of_three(num1, num2, num3)) ",
        "generated_testcode": "assert max_of_three(10,20,30) == 30\n",
        "test": "assert max_of_three(10,20,30)==30\nassert max_of_three(55,47,39)==55\nassert max_of_three(10,49,30)==49",
        "canonical_solution": "def max_of_three(num1,num2,num3): \r\n    if (num1 >= num2) and (num1 >= num3):\r\n       lnum = num1\r\n    elif (num2 >= num1) and (num2 >= num3):\r\n       lnum = num2\r\n    else:\r\n       lnum = num3\r\n    return lnum"
    },
    {
        "number": 673,
        "prompt": "Write a python function to convert a list of multiple integers into a single integer.\ndef convert(list): \n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    #convert the list to a string\n    s = ''.join(map(str, list) )\n    #convert the string to an integer\n    i = int(s)\n    return i\n\n#test the function with a sample list\nprint(convert([1,2,3,4,5,6])) \n\n#Output: 123456\n\n#another example \nprint(convert([4, 6, 7, 5, 2, 1, 9]))\n#Output: 4675219 ",
        "generated_testcode": "assert convert([1, 2, 3, 4, 5]) == 12345\n",
        "test": "assert convert([1,2,3]) == 123\nassert convert([4,5,6]) == 456\nassert convert([7,8,9]) == 789",
        "canonical_solution": "def convert(list): \r\n    s = [str(i) for i in list] \r\n    res = int(\"\".join(s))  \r\n    return (res) "
    },
    {
        "number": 674,
        "prompt": "Write a function to remove duplicate words from a given string using collections module.\ndef remove_duplicate(string):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    words = string.split()\n    unique_words = set(words)\n    new_string = ' '.join(unique_words)\n    return new_string\n\n\n# Example usage:\nstring = \"This is a test string with some duplicate words. This is a test string with some duplicate words.\"\nprint(remove_duplicate(string)) # Output: \"This some test string with a is\" ",
        "generated_testcode": "assert remove_duplicate(\"hello world hello python world\") == \"hello python\"\n",
        "test": "assert remove_duplicate(\"Python Exercises Practice Solution Exercises\")==(\"Python Exercises Practice Solution\")\nassert remove_duplicate(\"Python Exercises Practice Solution Python\")==(\"Python Exercises Practice Solution\")\nassert remove_duplicate(\"Python Exercises Practice Solution Practice\")==(\"Python Exercises Practice Solution\")",
        "canonical_solution": "from collections import OrderedDict\r\ndef remove_duplicate(string):\r\n  result = ' '.join(OrderedDict((w,w) for w in string.split()).keys())\r\n  return result"
    },
    {
        "number": 675,
        "prompt": "Write a function to add two integers. however, if the sum is between the given range it will return 20.\ndef sum_nums(x, y,m,n):\n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    if x < 10 or y < 10:\n        return 20\n    else:\n        return x + y\n\nprint(sum_nums(10, 10,10,20))\n# This should return 20\nprint(sum_nums(5, 5, 10, 20))\n# This should return 10\nprint(sum_nums(15, 15, 10, 20))\n# This should return 30\nprint(sum_nums(100, 100, 10, 20))\n# This should return 20\nprint(sum_nums(5, 25, 10, 20))\n# This should return 5\nprint(sum_nums(5, 12, 10, 20))\n# This should return 20\n\n#Solution\ndef sum_nums(x, y,m,n):\n    if x < m or y < m:\n        return 20\n    else:\n        return x + y\n\nprint(sum_nums(10, 10,10,20))\n# This should return 20\nprint(sum_nums(5, 5, 10, 20))\n# This should return 10\nprint(sum_nums(15, 15, 10, 20))\n# This should return 30\n",
        "generated_testcode": "assert sum_nums(10, 20, 10, 30) == 30\n",
        "test": "assert sum_nums(2,10,11,20)==20\nassert sum_nums(15,17,1,10)==32\nassert sum_nums(10,15,5,30)==20",
        "canonical_solution": "def sum_nums(x, y,m,n):\r\n    sum_nums= x + y\r\n    if sum_nums in range(m, n):\r\n        return 20\r\n    else:\r\n        return sum_nums"
    },
    {
        "number": 676,
        "prompt": "Write a function to remove everything except alphanumeric characters from the given string by using regex.\ndef remove_extra_char(text1):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    import re\n    pattern = r'[^a-zA-Z0-9]'\n    result = re.sub(pattern, '', text1)\n    return result\n\n# Test the function\ntext1 = \"Hello, World! 123\"\nprint(remove_extra_char(text1))  # output: \"HelloWorld123\" ",
        "generated_testcode": "assert remove_extra_char(\"Hello, World!\") == \"HelloWorld\"\n",
        "test": "assert remove_extra_char('**//Google Android// - 12. ') == 'GoogleAndroid12'\nassert remove_extra_char('****//Google Flutter//*** - 36. ') == 'GoogleFlutter36'\nassert remove_extra_char('**//Google Firebase// - 478. ') == 'GoogleFirebase478'",
        "canonical_solution": "import re\r\ndef remove_extra_char(text1):\r\n  pattern = re.compile('[\\W_]+')\r\n  return (pattern.sub('', text1))"
    },
    {
        "number": 677,
        "prompt": "Write a function to check if the triangle is valid or not.\ndef validity_triangle(a,b,c):\n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    if a+b>c and a+c>b and b+c>a:\n        return True\n    else:\n        return False\n\n# This function will check if the triangle is equilateral, isosceles or scalene.\ndef type_triangle(a,b,c):\n    if a==b==c:\n        return \"Equilateral\"\n    elif a==b or b==c or a==c:\n        return \"Isosceles\"\n    else:\n        return \"Scalene\"\n\n# This function will calculate the perimeter of the triangle.\ndef perimeter(a,b,c):\n    return a+b+c\n\n# This function will calculate the area of the triangle using Heron's formula.\ndef area_triangle(a,b,c):\n    s=(a+b+c)/2\n    area=round((s*(s-a)*(s-b)*(s-c))**0.5,2)\n    return area\n\n# This function will calculate the semi-perimeter of the triangle.\ndef semi_perimeter(a,b,c):\n    sp=(a+b+c)/2\n    return sp\n\n# This function will calculate the circumradius of the triangle.\ndef circum_radius(a,b,c):\n    sp=semi_perimeter(a,b,c)\n    area=area_triangle(a,b,c)\n    R=2*area/sp\n    return round(R,2)\n\n#",
        "generated_testcode": "assert validity_triangle(3,4,5) == True\n",
        "test": "assert validity_triangle(60,50,90)==False\nassert validity_triangle(45,75,60)==True\nassert validity_triangle(30,50,100)==True",
        "canonical_solution": "def validity_triangle(a,b,c):\r\n total = a + b + c\r\n if total == 180:\r\n    return True\r\n else:\r\n    return False"
    },
    {
        "number": 678,
        "prompt": "Write a python function to remove spaces from a given string.\ndef remove_spaces(str1):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    return str1.replace(\" \", \"\")\n\n# Test the function\nprint(remove_spaces(\"hello world\")) # Expected output: \"helloworld\"\nprint(remove_spaces(\" python is great \")) # Expected output: \"pythonisgreat\" ",
        "generated_testcode": "assert remove_spaces(\"Hello World\") == \"HelloWorld\"\n",
        "test": "assert remove_spaces(\"a b c\") == \"abc\"\nassert remove_spaces(\"1 2 3\") == \"123\"\nassert remove_spaces(\" b c\") == \"bc\"",
        "canonical_solution": "def remove_spaces(str1):\r\n  str1 = str1.replace(' ','')\r\n  return str1"
    },
    {
        "number": 679,
        "prompt": "Write a function to access dictionary key\u2019s element by index.\ndef access_key(ditionary,key):\n",
        "checkpoint": "13B",
        "pass": 6,
        "correct": true,
        "answer": "    value=list(ditionary.keys())[key]\n    return value\n\n#Test the function\nmy_dictionary = {'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5}\nprint(access_key(my_dictionary,1)) # Output: b\n\n#Example 2:\n#Write a function to access dictionary value by index\ndef access_value(ditionary,index):\n    value=list(ditionary.values())[index]\n    return value\n\n#Test the function\nmy_dictionary = {'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5}\nprint(access_value(my_dictionary,1)) # Output: 2\n\n#Example 3:\n#Write a function to update dictionary value by index\ndef update_value(ditionary,index,value):\n    list_values = list(ditionary.values())\n    list_values[index] = value\n    ditionary_keys = list(ditionary.keys())\n    updated_dict = dict(zip(ditionary_keys,list_values))\n    return updated_dict\n\n#Test the function\nmy_dictionary = {'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5}\nprint(update_value(my_dictionary,1,10)) # Output: {'a': 1, 'b",
        "generated_testcode": "assert access_key({'a':1,'b':2,'c':3},1) == 'b'\n",
        "test": "assert access_key({'physics': 80, 'math': 90, 'chemistry': 86},0)== 'physics'\nassert access_key({'python':10, 'java': 20, 'C++':30},2)== 'C++'\nassert access_key({'program':15,'computer':45},1)== 'computer'",
        "canonical_solution": "def access_key(ditionary,key):\r\n  return list(ditionary)[key]"
    },
    {
        "number": 680,
        "prompt": "Write a python function to check whether a sequence of numbers has an increasing trend or not.\ndef increasing_trend(nums):\n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    return all(nums[i] < nums[i+1] for i in range(len(nums)-1))\n\n# Test cases\nprint(increasing_trend([1, 2, 3, 4, 5, 6])) # True\nprint(increasing_trend([1, 2, 3, 4, 4, 6])) # False\nprint(increasing_trend([1, 2, 3, 3, 4, 6])) # False\nprint(increasing_trend([1, 2, 3])) # True\nprint(increasing_trend([])) # True\n\n# Explanation:\n# The all() function returns True if all the elements of the iterable are true. In this case, we are using a generator expression to check whether all the elements of the list are less than the next element.\n# If any of the elements is greater than or equal to the next element, the all() function returns False. The range function is used to iterate over the list except the last element, as we don't need to check the last element.\n# If the list is empty, all() returns True.\n\n# Time complexity: O(n), where n is the length of the list. We are iterating over the list only once. ",
        "generated_testcode": "assert increasing_trend([1, 2, 3, 4, 5, 6, 7, 8, 9]) == True\n",
        "test": "assert increasing_trend([1,2,3,4]) == True\nassert increasing_trend([4,3,2,1]) == False\nassert increasing_trend([0,1,4,9]) == True",
        "canonical_solution": "def increasing_trend(nums):\r\n    if (sorted(nums)== nums):\r\n        return True\r\n    else:\r\n        return False"
    },
    {
        "number": 681,
        "prompt": "Write a python function to find the smallest prime divisor of a number.\ndef smallest_Divisor(n): \n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    i = 2\n    while i * i <= n: \n        if (n % i) == 0: \n            return i\n        i += 1\n    return n \n  \n# Test the function \nn = 123456 \nprint (\"Smallest divisor of\", n, \"is\", smallest_Divisor(n)) ",
        "generated_testcode": "assert smallest_Divisor(12) == 2\n",
        "test": "assert smallest_Divisor(10) == 2\nassert smallest_Divisor(25) == 5\nassert smallest_Divisor(31) == 31",
        "canonical_solution": "def smallest_Divisor(n): \r\n    if (n % 2 == 0): \r\n        return 2; \r\n    i = 3;  \r\n    while (i*i <= n): \r\n        if (n % i == 0): \r\n            return i; \r\n        i += 2; \r\n    return n; "
    },
    {
        "number": 682,
        "prompt": "Write a function to multiply two lists using map and lambda function.\ndef mul_list(nums1,nums2):\n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    return list(map(lambda x,y: x*y,nums1,nums2))\n\nprint(mul_list([1,2,3,4],[5,6,7])) #[5,12,21]\n\n# Convert the list of numbers into a list of strings and sort it in reverse order. ",
        "generated_testcode": "assert mul_list([1,2,3],[4,5,6]) == [4,10,18]\n",
        "test": "assert mul_list([1, 2, 3],[4,5,6])==[4,10,18]\nassert mul_list([1,2],[3,4])==[3,8]\nassert mul_list([90,120],[50,70])==[4500,8400]",
        "canonical_solution": "def mul_list(nums1,nums2):\r\n  result = map(lambda x, y: x * y, nums1, nums2)\r\n  return list(result)"
    },
    {
        "number": 683,
        "prompt": "Write a python function to check whether the given number can be represented by sum of two squares or not.\ndef sum_Square(n) : \n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": true,
        "answer": "    for i in range(1, int(n/2) + 1) : \n        j = n - i*i \n        if i*i + j*j == n : \n            return True\n    return False\n\n# Driver Code\nn = 29\nif sum_Square(n) : \n    print(f\"{n} can be represented as sum of two squares\") \nelse : \n    print(f\"{n} can not be represented as sum of two squares\") \n\n# Output: 29 can not be represented as sum of two squares ",
        "generated_testcode": "assert sum_Square(16) == True\n",
        "test": "assert sum_Square(25) == True\nassert sum_Square(24) == False\nassert sum_Square(17) == True",
        "canonical_solution": "def sum_Square(n) : \r\n    i = 1 \r\n    while i*i <= n : \r\n        j = 1\r\n        while (j*j <= n) : \r\n            if (i*i+j*j == n) : \r\n                return True\r\n            j = j+1\r\n        i = i+1     \r\n    return False"
    },
    {
        "number": 684,
        "prompt": "Write a python function to count occurences of a character in a repeated string.\ndef count_Char(str,x): \n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    count = 0\n    for i in str: \n        if i == x: \n            count += 1\n    return count \n\n# Test the function \nstr = \"hello\"\nx = 'l'\nprint(count_Char(str,x)) ",
        "generated_testcode": "assert count_Char(\"hello world\", \"l\") == 3\n",
        "test": "assert count_Char(\"abcac\",'a') == 4\nassert count_Char(\"abca\",'c') == 2\nassert count_Char(\"aba\",'a') == 7",
        "canonical_solution": "def count_Char(str,x): \r\n    count = 0\r\n    for i in range(len(str)):  \r\n        if (str[i] == x) : \r\n            count += 1\r\n    n = 10\r\n    repititions = n // len(str)  \r\n    count = count * repititions  \r\n    l = n % len(str)  \r\n    for i in range(l): \r\n        if (str[i] == x):  \r\n            count += 1\r\n    return count  "
    },
    {
        "number": 685,
        "prompt": "Write a python function to find sum of prime numbers between 1 to n.\ndef sum_Of_Primes(n): \n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    # Create a list of prime numbers \n    prime = [True for i in range(n+1)] \n    p = 2\n    while(p * p <= n): \n        if prime[p] == True: \n            for i in range(p * p, n+1, p): \n                prime[i] = False\n        p += 1\n    # Iterate from 2 to n and print prime numbers \n    sum = 0\n    for p in range(2, n): \n        if prime[p]: \n            sum += p \n    return sum \n# Test the function \nn = 10\nprint(\"Sum of prime numbers between 1 and\",n,\":\",sum_Of_Primes(n)) ",
        "generated_testcode": "assert sum_Of_Primes(10) == 17\n",
        "test": "assert sum_Of_Primes(10) == 17\nassert sum_Of_Primes(20) == 77\nassert sum_Of_Primes(5) == 10",
        "canonical_solution": "def sum_Of_Primes(n): \r\n    prime = [True] * (n + 1)  \r\n    p = 2\r\n    while p * p <= n: \r\n        if prime[p] == True:  \r\n            i = p * 2\r\n            while i <= n: \r\n                prime[i] = False\r\n                i += p \r\n        p += 1    \r\n    sum = 0\r\n    for i in range (2,n + 1): \r\n        if(prime[i]): \r\n            sum += i \r\n    return sum"
    },
    {
        "number": 686,
        "prompt": "Write a function to find the frequency of each element in the given list.\ndef freq_element(test_tup):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    freq_dict = {}\n    for i in test_tup:\n        if i in freq_dict:\n            freq_dict[i] += 1\n        else:\n            freq_dict[i] = 1\n    return freq_dict\n\n# Test the function\ntest_tup = (1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 6, 1, 2, 3, 7, 8, 9, 9, 9)\nprint(freq_element(test_tup))\n# Output: {1: 3, 2: 3, 3: 3, 4: 3, 5: 3, 6: 1, 7: 1, 8: 1, 9: 3}\n\n# Create a function to remove the duplicates from a list\ndef remove_duplicates(test_list):\n    new_list = []\n    for i in test_list:\n        if i not in new_list:\n            new_list.append(i)\n    return new_list\n\n# Test the function\ntest_list = [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 6, 1, 2, 3, 7, 8, 9, 9]\nprint(remove_duplicates(test_list))\n# Output: [",
        "generated_testcode": "",
        "test": "assert freq_element((4, 5, 4, 5, 6, 6, 5, 5, 4) ) == '{4: 3, 5: 4, 6: 2}'\nassert freq_element((7, 8, 8, 9, 4, 7, 6, 5, 4) ) == '{7: 2, 8: 2, 9: 1, 4: 2, 6: 1, 5: 1}'\nassert freq_element((1, 4, 3, 1, 4, 5, 2, 6, 2, 7) ) == '{1: 2, 4: 2, 3: 1, 5: 1, 2: 2, 6: 1, 7: 1}'",
        "canonical_solution": "from collections import defaultdict \r\ndef freq_element(test_tup):\r\n  res = defaultdict(int)\r\n  for ele in test_tup:\r\n    res[ele] += 1\r\n  return (str(dict(res))) "
    },
    {
        "number": 687,
        "prompt": "Write a function to find the greatest common divisor (gcd) of two integers by using recursion.\ndef recur_gcd(a, b):\n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    if b == 0:\n        return a\n    else:\n        return recur_gcd(b, a % b)\n\n# Test the function with some sample inputs\nprint(recur_gcd(27, 18))  # Output: 9\nprint(recur_gcd(37, 23))  # Output: 1\nprint(recur_gcd(39, 55))  # Output: 11\n\n# Modify the function to find the least common multiple (lcm) of two integers\ndef recur_lcm(a, b):\n    if a == 0 and b == 0:\n        return 0\n    else:\n        return a * b // recur_gcd(a, b)\n\n# Test the function with some sample inputs\nprint(recur_lcm(27, 18))  # Output: 54\nprint(recur_lcm(37, 23))  # Output: 201\nprint(recur_lcm(39, 55))  # Output: 195\n\n# Let's try to use the gcd function to find the lcm of three integers\ndef recur_lcm(a, b, c):\n    return a * b * c // recur_gcd(recur_gcd(a, b), c)\n\n# Test the function with some sample inputs\nprint(recur_lcm(27, 18, 6))",
        "generated_testcode": "assert recur_gcd(27, 18) == 9\n",
        "test": "assert recur_gcd(12,14) == 2\nassert recur_gcd(13,17) == 1\nassert recur_gcd(9, 3) == 3",
        "canonical_solution": "def recur_gcd(a, b):\r\n\tlow = min(a, b)\r\n\thigh = max(a, b)\r\n\tif low == 0:\r\n\t\treturn high\r\n\telif low == 1:\r\n\t\treturn 1\r\n\telse:\r\n\t\treturn recur_gcd(low, high%low)"
    },
    {
        "number": 688,
        "prompt": "Write a function to get the length of a complex number.\ndef len_complex(a,b):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    return (a**2+b**2)**0.5\n\n# Test the function with the example provided\nprint(len_complex(3,4)) # should return 5\n\n# Test the function with other numbers\nprint(len_complex(0,0)) # should return 0\nprint(len_complex(1,1)) # should return 1.414213562373095049\nprint(len_complex(-1,0)) # should return 1\nprint(len_complex(0,-1)) # should return 1\nprint(len_complex(-1,-1)) # should return 1.414213562373095049\nprint(len_complex(1,2)) # should return 2.236067977749979\n\n\n# Explanation:\n# The length of a complex number can be found using the Pythagorean theorem, which states that the length of a vector with components a and b is the square root of a^2 + b^2. \n# In this case, we simply input the real and imaginary components of the complex number into the function and return the square root of their sum squared. ",
        "generated_testcode": "assert len_complex(3+4j) == 5\n",
        "test": "assert len_complex(3,4)==5.0\nassert len_complex(9,10)==13.45362404707371\nassert len_complex(7,9)==11.40175425099138",
        "canonical_solution": "import cmath\r\ndef len_complex(a,b):\r\n  cn=complex(a,b)\r\n  length=abs(cn)\r\n  return length"
    },
    {
        "number": 689,
        "prompt": "## write a function to find the minimum number of jumps to reach the end of the array for the given array of integers where each element represents the max number of steps that can be made forward from that element. > indented block > indented block\ndef min_jumps(arr, n):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    if n <= 1:\n        return 0\n    if arr[0] == 0:\n        return -1\n    max_reach = arr[0]\n    steps = arr[0]\n    steps_left = arr[0]\n    jumps = 1\n    for i in range(1, n):\n        if i + arr[i] > max_reach:\n            max_reach = i + arr[i]\n        steps_left -= 1\n        if steps_left == 0:\n            jumps += 1\n            if i >= max_reach:\n                return -1\n            steps_left = steps\n            steps = max_reach - i\n        else:\n            steps_left -= 1\n    return jumps\n\n#test cases\narr1 = [2, 3, 1, 1, 1, 4]\narr2 = [3, 2, 4, 6, 1, 0, 2, 3, 1, 2, 3, 4]\nprint(min_jumps(arr1, len(arr1))) # Output: 2\nprint(min_jumps(arr2, len(arr2)) # Output: 3\n",
        "generated_testcode": "assert min_jumps([1, 3, 5, 8, 9, 2, 6, 4, 7, 6, 9], 7) == 2\n",
        "test": "assert min_jumps([1, 3, 6, 1, 0, 9], 6) == 3\nassert min_jumps([1, 3, 5, 8, 9, 2, 6, 7, 6, 8, 9], 11) == 3\nassert min_jumps([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], 11) == 10",
        "canonical_solution": "def min_jumps(arr, n):\r\n\tjumps = [0 for i in range(n)]\r\n\tif (n == 0) or (arr[0] == 0):\r\n\t\treturn float('inf')\r\n\tjumps[0] = 0\r\n\tfor i in range(1, n):\r\n\t\tjumps[i] = float('inf')\r\n\t\tfor j in range(i):\r\n\t\t\tif (i <= j + arr[j]) and (jumps[j] != float('inf')):\r\n\t\t\t\tjumps[i] = min(jumps[i], jumps[j] + 1)\r\n\t\t\t\tbreak\r\n\treturn jumps[n-1]"
    },
    {
        "number": 690,
        "prompt": "Write a function to multiply consecutive numbers of a given list.\ndef mul_consecutive_nums(nums):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    if not nums:\n        return 0\n\n    result = 1\n    for num in nums:\n        result *= num\n\n    return result\n\n# Test cases\nprint(mul_consecutive_nums([1, 2, 3, 4, 5])) # should return 24\nprint(mul_consecutive_nums([1, 2, 3, 4, 5, 0, 6])) # should return 0\nprint(mul_consecutive_nums([1, 2, 3, 4, 5, -1, 6])) # should return 0\nprint(mul_consecutive_nums([-1, 2, 3, 4, 5, 6]) # should return -120\n\n# Test with edge cases\nprint(mul_consecutive_nums([])) # should return 0\nprint(mul_consecutive_nums([0]) # should return 0\nprint(mul_consecutive_nums([1]) # should return 1\nprint(mul_consecutive_nums([-1, 0, 1]) # should return 0\nprint(mul_consecutive_nums([1, 0]) # should return 0\nprint(mul_consecutive_nums([0, 0]) # should return 0\nprint(mul_consecutive_nums([0, 0, 1]) # should return 0\nprint(mul_con",
        "generated_testcode": "assert mul_consecutive_nums([1, 2, 3, 4, 5]) == 24\n",
        "test": "assert mul_consecutive_nums([1, 1, 3, 4, 4, 5, 6, 7])==[1, 3, 12, 16, 20, 30, 42]\nassert mul_consecutive_nums([4, 5, 8, 9, 6, 10])==[20, 40, 72, 54, 60]\nassert mul_consecutive_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[2, 6, 12, 20, 30, 42, 56, 72, 90]",
        "canonical_solution": "def mul_consecutive_nums(nums):\r\n    result = [b*a for a, b in zip(nums[:-1], nums[1:])]\r\n    return result"
    },
    {
        "number": 691,
        "prompt": "Write a function to group the 1st elements on the basis of 2nd elements in the given tuple list.\ndef group_element(test_list):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": true,
        "answer": "    result = {}\n    for key, value in test_list:\n        result[value] = result.get(value, []) + [key]\n    return result\n\n# Test the function with sample input\ntest_list = [(2, 'a'), (3, 'b'), (1, 'a'), (4, 'c'), (5, 'a')]\nprint(group_element(test_list))\n\n# Output: {'a': [2, 1, 5], 'b': [3], 'c': [4]}\n\n#Time complexity is O(n) and space complexity is O(n)\n# where n is the number of elements in the tuple list. ",
        "generated_testcode": "",
        "test": "assert group_element([(6, 5), (2, 7), (2, 5), (8, 7), (9, 8), (3, 7)]) == {5: [6, 2], 7: [2, 8, 3], 8: [9]}\nassert group_element([(7, 6), (3, 8), (3, 6), (9, 8), (10, 9), (4, 8)]) == {6: [7, 3], 8: [3, 9, 4], 9: [10]}\nassert group_element([(8, 7), (4, 9), (4, 7), (10, 9), (11, 10), (5, 9)]) == {7: [8, 4], 9: [4, 10, 5], 10: [11]}",
        "canonical_solution": "from itertools import groupby \r\ndef group_element(test_list):\r\n  res = dict()\r\n  for key, val in groupby(sorted(test_list, key = lambda ele: ele[1]), key = lambda ele: ele[1]):\r\n    res[key] = [ele[0] for ele in val] \r\n  return (res)\r\n"
    },
    {
        "number": 692,
        "prompt": "Write a python function to find the last two digits in factorial of a given number.\ndef last_Two_Digits(N): \n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    if N == 1: \n        return 1\n    elif N == 2: \n        return 2\n    else: \n        a = 1\n        b = 1\n        for i in range(2, N+1): \n            a = (a*i) % 10\n            b = (b*i) % 10\n        return a\n\n# Test the function \nN = 10\nprint(\"Last two digits in\", N, \"! are\", last_Two_Digits(N)) \n\nN = 20\nprint(\"Last two digits in\", N, \"! are\", last_Two_Digits(N)) \n\nN = 30\nprint(\"Last two digits in\", N, \"! are\", last_Two_Digits(N)) \n\nN = 40\nprint(\"Last two digits in\", N, \"! are\", last_Two_Digits(N)) \n\n# This function only works for small values of N. To find the last two digits of a large number, you can use the modular arithmetic property of exponents: a^b mod c = (a^b mod c) * (a^b//c mod c)\n# but this would require much more time and memory. \n\n# Alternatively, you can use the concept of digital roots and calculate the digital root of the factorial, which is a simpler calculation. ",
        "generated_testcode": "assert last_Two_Digits(5) == 5\n",
        "test": "assert last_Two_Digits(7) == 40\nassert last_Two_Digits(5) == 20\nassert last_Two_Digits(2) == 2",
        "canonical_solution": "def last_Two_Digits(N): \r\n    if (N >= 10): \r\n        return\r\n    fac = 1\r\n    for i in range(1,N + 1): \r\n        fac = (fac * i) % 100\r\n    return (fac) "
    },
    {
        "number": 693,
        "prompt": "Write a function to remove multiple spaces in a string by using regex.\ndef remove_multiple_spaces(text1):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": true,
        "answer": "    import re\n    text1 = re.sub('\\s+', ' ', text1)\n    return text1\n\n# Testing the function with sample inputs\nprint(remove_multiple_spaces(\"this   is  a    sample   string\")) # Output: \"this is a sample string\"\nprint(remove_multiple_spaces(\"   this     is     another     example    \")) # Output: \"this is another\"\nprint(remove_multiple_spaces(\"   multiple    spaces    in   this   sentence\")) # Output: \"multiple spaces in this sentence\" \nprint(remove_multiple_spaces(\"  only one space    \")) # Output: \"only one space\" \nprint(remove_multiple_spaces(\"no spaces\")) # Output: \"no spaces\" \n\n\n# Write a function to remove non-alphabetic characters from a string using regex\ndef remove_non_alphabetic(text1):\n    import re\n    text1 = re.sub('[^a-zA-Z]', '', text1)\n    return text1\n\n# Testing the function with sample inputs\nprint(remove_non_alphabetic(\"This is a 123 sample string!\")) # Output: \"Thisisa123samplestring\"\nprint(remove_non_alphabetic(\"Only alphabets.\")) # Output: \"Onlyalphabets\"\nprint(remove_non_alphabetic(\"123456\")) # Output: \"\"\nprint(remove_non_alphabetic(\"Hello, world! 123\")) # Output: \"Hellow",
        "generated_testcode": "assert remove_multiple_spaces(\"Hello   world\") == \"Hello world\"\n",
        "test": "assert remove_multiple_spaces('Google      Assistant') == 'Google Assistant'\nassert remove_multiple_spaces('Quad      Core') == 'Quad Core'\nassert remove_multiple_spaces('ChromeCast      Built-in') == 'ChromeCast Built-in'",
        "canonical_solution": "import re\r\ndef remove_multiple_spaces(text1):\r\n  return (re.sub(' +',' ',text1))"
    },
    {
        "number": 694,
        "prompt": "Write a function to extract unique values from the given dictionary values.\ndef extract_unique(test_dict):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": true,
        "answer": "    unique_values = set()\n    for value in test_dict.values():\n        if isinstance(value, list):\n            for item in value:\n                unique_values.add(item)\n        else:\n            unique_values.add(value)\n    return unique_values\n\n# Test the function\ntest_dict = {'a': 1, 'b': 2, 'c': [3, 4, 5, 1], 'd': 2, 'e': [4, 5, 6]}\nprint(extract_unique(test_dict))  # Output: {1, 2, 3, 4, 5, 6}\n\n# In the given test_dict, the unique values are 1, 2, 3, 4, 5, and 6\n\n# The function extracts all the values from the dictionary and adds them to the set. It checks if the value is a list and iterates over it and adds each item to the set.\n# If the value is not a list, it adds the value directly to the set. Finally, it returns the unique values as a set. ",
        "generated_testcode": "assert extract_unique({'a': 1, 'b': 2, 'c': 3, 'd': 2, 'e': 1}) == {1, 2, 3}\n",
        "test": "assert extract_unique({'msm' : [5, 6, 7, 8],'is' : [10, 11, 7, 5],'best' : [6, 12, 10, 8],'for' : [1, 2, 5]} ) == [1, 2, 5, 6, 7, 8, 10, 11, 12]\nassert extract_unique({'Built' : [7, 1, 9, 4],'for' : [11, 21, 36, 14, 9],'ISP' : [4, 1, 21, 39, 47],'TV' : [1, 32, 38]} ) == [1, 4, 7, 9, 11, 14, 21, 32, 36, 38, 39, 47]\nassert extract_unique({'F' : [11, 13, 14, 17],'A' : [12, 11, 15, 18],'N' : [19, 21, 15, 36],'G' : [37, 36, 35]}) == [11, 12, 13, 14, 15, 17, 18, 19, 21, 35, 36, 37]",
        "canonical_solution": "def extract_unique(test_dict):\r\n  res = list(sorted({ele for val in test_dict.values() for ele in val}))\r\n  return res"
    },
    {
        "number": 695,
        "prompt": "Write a function to check if each element of the second tuple is greater than its corresponding index in the first tuple.\ndef check_greater(test_tup1, test_tup2):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    for i in range(len(test_tup1)):\n        if test_tup1[i] > i and test_tup2[i] > i:\n            return True\n        else:\n            return False\n\n# Test cases\nprint(check_greater((5, 10, 15, 20), (1, 3, 5, 7)))  # Output: True\nprint(check_greater((5, 10, 15, 20), (1, 5, 3, 7)))  # Output: False\nprint(check_greater((5, 10, 15, 20), (1, 3, 5, 20)) # Output: False\nprint(check_greater((5, 10, 15, 20), (1, 3, 5, 21)) # Output: True\nprint(check_greater((5, 10, 15, 20), (1, 5, 3, 21)) # Output: False\nprint(check_greater((5, 10, 15, 20), (1, 3, 5, 7)) # Output: False\n\n# Explanation:\n# In the first test case, the function checks if each element of the second tuple is greater than its corresponding index in the first tuple. Since 10 is greater than 1, 15 is greater than 3, and 20 is greater",
        "generated_testcode": "assert check_greater((1, 2, 3, 4, 5), (0, 1, 2, 3)) == True\n",
        "test": "assert check_greater((10, 4, 5), (13, 5, 18)) == True\nassert check_greater((1, 2, 3), (2, 1, 4)) == False\nassert check_greater((4, 5, 6), (5, 6, 7)) == True",
        "canonical_solution": "def check_greater(test_tup1, test_tup2):\r\n  res = all(x < y for x, y in zip(test_tup1, test_tup2))\r\n  return (res) "
    },
    {
        "number": 696,
        "prompt": "Write a function to zip two given lists of lists.\ndef zip_list(list1,list2):  \n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    result = []\n    for i in range(len(list1)):\n        result.append(list(zip(list1[i],list2[i]))\n    return result\n\n# Example usage:\nlist1 = [['a','b','c'], [1,2,3], ['x','y','z']]\nlist2 = ['A','B','C'], [4,5,6], ['X','Y','Z']\nzip_list(list1, list2) # Output: [('a', 'A', 'x'), ('b', 4, 'Y'), ('c', 6, 'Z')]\n```\n\nYou can use this function to join two lists of lists where each sublist in the second list corresponds to the same index in the first list. The function takes in two lists of lists and returns a list of tuples, where each tuple contains elements from the same index in the two lists. ",
        "generated_testcode": "assert zip_list([[1,2,3],[4,5,6]) == [(1,4),(2,5),(3,6)]\n",
        "test": "assert zip_list([[1, 3], [5, 7], [9, 11]] ,[[2, 4], [6, 8], [10, 12, 14]] )==[[1, 3, 2, 4], [5, 7, 6, 8], [9, 11, 10, 12, 14]]\nassert zip_list([[1, 2], [3, 4], [5, 6]] ,[[7, 8], [9, 10], [11, 12]] )==[[1, 2, 7, 8], [3, 4, 9, 10], [5, 6, 11, 12]]\nassert zip_list([['a','b'],['c','d']] , [['e','f'],['g','h']] )==[['a','b','e','f'],['c','d','g','h']]",
        "canonical_solution": "def zip_list(list1,list2):  \r\n result = list(map(list.__add__, list1, list2)) \r\n return result"
    },
    {
        "number": 697,
        "prompt": "Write a function to find number of even elements in the given list using lambda function.\ndef count_even(array_nums):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    return len(list(filter(lambda x: x % 2 == 0, array_nums))\n\nprint(count_even([1,2,3,4,5,6,7,8,9,10]))\n# Output: 4\n\n# Write a function to find sum of even numbers in the given list using lambda function.\ndef sum_even(array_nums):\n    return sum(filter(lambda x: x % 2 == 0, array_nums))\n\nprint(sum_even([1,2,3,4,5,6,7,8,9,10]))\n# Output: 20\n\n# Write a function to find sum of elements in the given list using lambda function.\ndef sum_list(array_nums):\n    return sum(array_nums)\n\nprint(sum_list([1,2,3,4,5,6,7,8,9,10]))\n# Output: 55\n\n# Write a function to find minimum element in the given list using lambda function.\ndef min_element(array_nums):\n    return min(array_nums)\n\nprint(min_element([1,2,3,4,5,6,7,8,9,10]))\n# Output: 1\n\n# Write a function to find maximum element in the given list using lambda function.\ndef max_element(array_nums):\n    return max(array_nums)\n\nprint(max_element([1,2,",
        "generated_testcode": "assert count_even([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 4\n",
        "test": "assert count_even([1, 2, 3, 5, 7, 8, 9, 10])==3\nassert count_even([10,15,14,13,-18,12,-20])==5\nassert count_even([1, 2, 4, 8, 9])==3",
        "canonical_solution": "def count_even(array_nums):\r\n   count_even = len(list(filter(lambda x: (x%2 == 0) , array_nums)))\r\n   return count_even"
    },
    {
        "number": 698,
        "prompt": "Write a function to sort dictionary items by tuple product of keys for the given dictionary with tuple keys.\ndef sort_dict_item(test_dict):\n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    sorted_dict = sorted(test_dict.items(), key=lambda x: (x[0][0] * x[0][1], x[1]))\n    return sorted_dict\n\n# Example usage:\ntest_dict = {(1, 2): 3, (3, 4): 6, (5, 6): 7, (2, 3): 4, (4, 5): 1, (6, 7): 9}\nprint(sort_dict_item(test_dict))\n# Output: [((2, 3), 4), ((3, 4), 6), ((4, 5), 1), ((1, 2), 3), ((6, 7), 9)]\n\n# Explanation: \n# The function sorts the items of the dictionary based on the product of the tuple keys (1*2, 2*3, 3*4, 4*5, 5*6) and then sorts the items with the same product in ascending order based on the values. ",
        "generated_testcode": "",
        "test": "assert sort_dict_item({(5, 6) : 3, (2, 3) : 9, (8, 4): 10, (6, 4): 12} ) == {(2, 3): 9, (6, 4): 12, (5, 6): 3, (8, 4): 10}\nassert sort_dict_item({(6, 7) : 4, (3, 4) : 10, (9, 5): 11, (7, 5): 13} ) == {(3, 4): 10, (7, 5): 13, (6, 7): 4, (9, 5): 11}\nassert sort_dict_item({(7, 8) : 5, (4, 5) : 11, (10, 6): 12, (8, 6): 14} ) == {(4, 5): 11, (8, 6): 14, (7, 8): 5, (10, 6): 12}",
        "canonical_solution": "def sort_dict_item(test_dict):\r\n  res = {key: test_dict[key] for key in sorted(test_dict.keys(), key = lambda ele: ele[1] * ele[0])}\r\n  return  (res) \r\n"
    },
    {
        "number": 699,
        "prompt": "Write a python function to find the minimum number of swaps required to convert one binary string to another.\ndef min_Swaps(str1,str2) : \n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    count = 0\n    n = len(str1)\n    for i in range(n) : \n        if str1[i] != str2[i] : \n            count += 1\n\n    # swap the characters to match the pattern\n    for i in range(n) : \n        if str1[i] != '1' and str2[i] == '1' : \n            j = i \n            while str1[j] != '1' : \n                j += 1\n            str1[i], str1[j] = str1[j], str1[i] \n            count += 1\n    return count \n\n\n# example input\nstr1 = '00011'\nstr2 = '1100'\nprint(min_Swaps(str1, str2)) # output should be 2 ",
        "generated_testcode": "assert min_Swaps(\"101010\",\"010101\") == 2\n",
        "test": "assert min_Swaps(\"1101\",\"1110\") == 1\nassert min_Swaps(\"1111\",\"0100\") == \"Not Possible\"\nassert min_Swaps(\"1110000\",\"0001101\") == 3",
        "canonical_solution": "def min_Swaps(str1,str2) : \r\n    count = 0\r\n    for i in range(len(str1)) : \r\n        if str1[i] != str2[i] : \r\n            count += 1\r\n    if count % 2 == 0 : \r\n        return (count // 2) \r\n    else : \r\n        return (\"Not Possible\") "
    },
    {
        "number": 700,
        "prompt": "Write a function to count the number of elements in a list which are within a specific range.\ndef count_range_in_list(li, min, max):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    count = 0\n    for elem in li:\n        if elem >= min and elem <= max:\n            count += 1\n    return count\n\n# Example usage:\nli = [1, 3, 5, 7, 9, 11, 2, 4, 6, 8, 10]\nprint(count_range_in_list(li, 2, 8))  # Output: 3 (elements 3, 5, 7, 9 are within the range of 2 to 8)\nprint(count_range_in_list(li, 1, 10)) # Output: 6 (all elements are within the range of 1 to 10)\nprint(count_range_in_list(li, 5, 7))  # Output: 3 (elements 5, 6, 7 are within the range of 5 to 7)\n\n# Another example usage:\nli = [2, 4, 6, 8, 10]\nprint(count_range_in_list(li, 2, 8))  # Output: 4 (all elements are within the range of 2 to 8)\nprint(count_range_in_list(li, 3, 7))  # Output: 2 (elements 4 and 6 are within the range of 3 to 7)\nprint(count_range_in_list(li, 5, 12)) # Output: 0 (no elements are within",
        "generated_testcode": "assert count_range_in_list([1, 2, 3, 4, 5, 6, 7, 8, 9], 3, 6) == 4\n",
        "test": "assert count_range_in_list([10,20,30,40,40,40,70,80,99],40,100)==6\nassert count_range_in_list(['a','b','c','d','e','f'],'a','e')==5\nassert count_range_in_list([7,8,9,15,17,19,45],15,20)==3",
        "canonical_solution": "def count_range_in_list(li, min, max):\r\n\tctr = 0\r\n\tfor x in li:\r\n\t\tif min <= x <= max:\r\n\t\t\tctr += 1\r\n\treturn ctr"
    },
    {
        "number": 701,
        "prompt": "Write a function to find the equilibrium index of the given array.\ndef equilibrium_index(arr):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    left_sum = 0\n    total_sum = sum(arr)\n    right_sum = 0\n\n    for i, num in enumerate(arr):\n        if left_sum == right_sum:\n            return i\n        left_sum += num\n        right_sum = total_sum - left_sum\n\n    return -1\n\n\nprint(equilibrium_index([-7, 1, 5, 2, 4, -3, 3, 0]))  # Output: 3\nprint(equilibrium_index([1, 2, -3, 4, -3, 5, 0]))  # Output: 2\nprint(equilibrium_index([1, -2, 3, 4, -3, 2, 1]))  # Output: 3\nprint(equilibrium_index([1, 2, 3, 4, -3, -4]))    # Output: -1\n\n\n# Time Complexity: O(n)\n# Space Complexity: O(1)\n# This function iterates through the array twice and calculates the left_sum and right_sum for each index. ",
        "generated_testcode": "assert equilibrium_index([1, 3, 5, 2, 2]) == 3\n",
        "test": "assert equilibrium_index([1, 2, 3, 4, 1, 2, 3]) == 3\nassert equilibrium_index([-7, 1, 5, 2, -4, 3, 0]) == 3\nassert equilibrium_index([1, 2, 3]) == -1",
        "canonical_solution": "def equilibrium_index(arr):\r\n  total_sum = sum(arr)\r\n  left_sum=0\r\n  for i, num in enumerate(arr):\r\n    total_sum -= num\r\n    if left_sum == total_sum:\r\n      return i\r\n    left_sum += num\r\n  return -1"
    },
    {
        "number": 702,
        "prompt": "Write a function to find the minimum number of elements that should be removed such that amax-amin<=k.\ndef find_ind(key, i, n, \n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "                 arr): \n  \n    while (i < n and arr[i] <= key): \n        i += 1\n    return i \n  \ndef min_elements(arr, n, k): \n    maxi = arr[0] \n    mini = arr[0] \n    j = 0\n    res = 0\n    for i in range(1, n): \n        if arr[i] > maxi: \n            maxi = arr[i] \n        if arr[i] < mini: \n            mini = arr[i] \n        while (arr[i] - mini > k): \n            mini = arr[j] \n            j += 1\n            res += 1\n        if arr[i] - mini > k: \n            res += 1\n    return res \n  \n# Driver code \narr = [10, 2, 4, 8, 12, 16, 3, 5, 1] \nn = len(arr) \nk = 5\nprint(min_elements(arr, n, k)) ",
        "generated_testcode": "assert find_ind(10, 5, 10) == 0\n",
        "test": "assert removals([1, 3, 4, 9, 10,11, 12, 17, 20], 9, 4) == 5\nassert removals([1, 5, 6, 2, 8], 5, 2) == 3\nassert removals([1, 2, 3 ,4, 5, 6], 6, 3) == 2",
        "canonical_solution": "def find_ind(key, i, n, \r\n\t\t\tk, arr):\r\n\tind = -1\r\n\tstart = i + 1\r\n\tend = n - 1;\r\n\twhile (start < end):\r\n\t\tmid = int(start +\r\n\t\t\t\t(end - start) / 2)\r\n\t\tif (arr[mid] - key <= k):\r\n\t\t\tind = mid\r\n\t\t\tstart = mid + 1\r\n\t\telse:\r\n\t\t\tend = mid\r\n\treturn ind\r\ndef removals(arr, n, k):\r\n\tans = n - 1\r\n\tarr.sort()\r\n\tfor i in range(0, n):\r\n\t\tj = find_ind(arr[i], i, \r\n\t\t\t\t\tn, k, arr)\r\n\t\tif (j != -1):\r\n\t\t\tans = min(ans, n -\r\n\t\t\t\t\t\t(j - i + 1))\r\n\treturn ans"
    },
    {
        "number": 703,
        "prompt": "Write a function to check whether the given key is present in the dictionary or not.\ndef is_key_present(d,x):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    if x in d:\n        return True\n    else:\n        return False\n\n#Test the function\nmy_dict = {'name': 'David', 'age': 30, 'city': 'New York'}\nprint(is_key_present(my_dict, 'name'))   #Output: True\nprint(is_key_present(my_dict, 'email'))  #Output: False\n\n# Output: True\n# False\n\n#Write a function to get the value of a key in the dictionary\ndef get_value(d,x):\n    if x in d:\n        return d[x]\n    else:\n        return 'Key not found'\n\n#Test the function\nmy_dict = {'name': 'David', 'age': 30, 'city': 'New York'}\nprint(get_value(my_dict, 'name'))   #Output: David\nprint(get_value(my_dict, 'email'))  #Output: Key not found\n\n#Output: David\n# Key not found\n\n#Write a function to add a new key-value pair to the dictionary\ndef add_key_value(d,x,y):\n    d[x] = y\n\n#Test the function\nmy_dict = {'name': 'David', 'age': 30, 'city': 'New York'}\nadd_key_value(my_dict, 'email', 'example@gmail.com')\nprint(my_dict)   #Output: {'name': 'David', 'age': 30, '",
        "generated_testcode": "assert is_key_present({'a':1,'b':2,'c':3},'a') == True\n",
        "test": "assert is_key_present({1: 10, 2: 20, 3: 30, 4: 40, 5: 50, 6: 60},5)==True\nassert is_key_present({1: 10, 2: 20, 3: 30, 4: 40, 5: 50, 6: 60},6)==True\nassert is_key_present({1: 10, 2: 20, 3: 30, 4: 40, 5: 50, 6: 60},10)==False",
        "canonical_solution": "def is_key_present(d,x):\r\n  if x in d:\r\n    return True\r\n  else:\r\n     return False"
    },
    {
        "number": 704,
        "prompt": "Write a function to calculate the harmonic sum of n-1.\ndef harmonic_sum(n):\n",
        "checkpoint": "13B",
        "pass": 8,
        "correct": true,
        "answer": "    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return 1/n + harmonic_sum(n-1)\n\n# Test the function with n = 3\nprint(harmonic_sum(3)) # Output: 1.833333333333333333335\n\n# Test the function with n = 4\nprint(harmonic_sum(4)) # Output: 2.08333333333333333334\n\n# Test the function with n = 5\nprint(harmonic_sum(5)) # Output: 2.33333333333333333335\n\n# Test the function with n = 6\nprint(harmonic_sum(6)) # Output: 2.575\n\n# Test the function with n = 7\nprint(harmonic_sum(7)) # Output: 2.7575\n\n# Test the function with n = 8\nprint(harmonic_sum(8)) # Output: 2.941176470588235294\n\n# Test the function with n = 10\nprint(harmonic_sum(10)) # Output: 3.411764705882352941\n\n# Test the function with n =",
        "generated_testcode": "assert harmonic_sum(1) == 1\n",
        "test": "assert harmonic_sum(10)==2.9289682539682538\nassert harmonic_sum(4)==2.083333333333333\nassert harmonic_sum(7)==2.5928571428571425 ",
        "canonical_solution": "def harmonic_sum(n):\r\n  if n < 2:\r\n    return 1\r\n  else:\r\n    return 1 / n + (harmonic_sum(n - 1))"
    },
    {
        "number": 705,
        "prompt": "Write a function to sort a list of lists by length and value.\ndef sort_sublists(list1):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    # sort by length\n    list1.sort(key=len)\n    # sort by value\n    list1.sort()\n    return list1\n\n# test\nprint(sort_sublists([[1, 2, 3], [2, 3, 4], [1], [1, 2], [1, 2, 3, 4, 5], [1, 2, 3, 4]]))\n\n# output: [[1], [1, 2], [1, 2, 3], [2, 3, 4], [1, 2, 3, 4, 5]]\n# expected output: [[1], [1, 2], [1, 2, 3], [2, 3, 4], [1, 2, 3, 4, 5]]\n\n# Your code should work for this test case\n# Your function should sort the sublists by length first, and then by value. ",
        "generated_testcode": "",
        "test": "assert sort_sublists([[2], [0], [1, 3], [0, 7], [9, 11], [13, 15, 17]])==[[0], [2], [0, 7], [1, 3], [9, 11], [13, 15, 17]]\nassert sort_sublists([[1], [2, 3], [4, 5, 6], [7], [10, 11]])==[[1], [7], [2, 3], [10, 11], [4, 5, 6]]\nassert sort_sublists([[\"python\"],[\"java\",\"C\",\"C++\"],[\"DBMS\"],[\"SQL\",\"HTML\"]])==[['DBMS'], ['python'], ['SQL', 'HTML'], ['java', 'C', 'C++']]",
        "canonical_solution": "def sort_sublists(list1):\r\n      list1.sort()  \r\n      list1.sort(key=len)\r\n      return  list1"
    },
    {
        "number": 706,
        "prompt": "Write a function to find whether an array is subset of another array.\ndef is_subset(arr1, m, arr2, n): \n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    # Initialize two pointers at the beginning of both arrays\n    i, j = 0, 0\n    while i < m and j < n: \n        # If elements match, move both pointers to the next element in the arrays\n        if arr1[i] == arr2[j]: \n            i += 1\n            j += 1\n        # If arr2 element is smaller, move j to the next element \n        elif arr2[j] < arr1[i]: \n            j += 1\n        # If arr1 element is smaller, move i to the next element\n        else: \n            return False\n    # If all elements of arr1 are matched, then arr1 is the subset of arr2\n    return i == m\n\n# Test the function\narr1 = [1, 2, 3, 4, 5, 6, 7] \narr2 = [3, 5, 7, 9, 11] \nm = len(arr1)\nn = len(arr2)\nif is_subset(arr1, m, arr2, n): \n    print(\"Array 1 is a subset of Array 2\") \nelse: \n    print(\"Array 1 is not a subset of Array 2\") \n\n# Output: Array 1 is a subset of Array 2\n\n# Complexity: O(m + n) time, O(1) space ",
        "generated_testcode": "assert is_subset([1, 2, 3], 3, [1, 2, 3, 4, 5], 4) == True\n",
        "test": "assert is_subset([11, 1, 13, 21, 3, 7], 6, [11, 3, 7, 1], 4) == True\nassert is_subset([1, 2, 3, 4, 5, 6], 6, [1, 2, 4], 3) == True\nassert is_subset([10, 5, 2, 23, 19], 5, [19, 5, 3], 3) == False",
        "canonical_solution": "def is_subset(arr1, m, arr2, n): \r\n\thashset = set() \r\n\tfor i in range(0, m): \r\n\t\thashset.add(arr1[i]) \r\n\tfor i in range(0, n): \r\n\t\tif arr2[i] in hashset: \r\n\t\t\tcontinue\r\n\t\telse: \r\n\t\t\treturn False\r\n\treturn True\t\t"
    },
    {
        "number": 707,
        "prompt": "Write a python function to count the total set bits from 1 to n.\ndef count_Set_Bits(n) :  \n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    count = 0\n    while n : \n        count += n & 1\n        n >>= 1\n    return count \n  \n# Driver code \nn = 10\nprint(count_Set_Bits(n)) ",
        "generated_testcode": "assert count_Set_Bits(10) == 2\n",
        "test": "assert count_Set_Bits(16) == 33\nassert count_Set_Bits(2) == 2\nassert count_Set_Bits(14) == 28",
        "canonical_solution": "def count_Set_Bits(n) :  \r\n    n += 1; \r\n    powerOf2 = 2;   \r\n    cnt = n // 2;  \r\n    while (powerOf2 <= n) : \r\n        totalPairs = n // powerOf2;  \r\n        cnt += (totalPairs // 2) * powerOf2;  \r\n        if (totalPairs & 1) : \r\n            cnt += (n % powerOf2) \r\n        else : \r\n            cnt += 0\r\n        powerOf2 <<= 1;    \r\n    return cnt;  "
    },
    {
        "number": 708,
        "prompt": "Write a python function to convert a string to a list.\ndef Convert(string): \n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    return list(string) \n\nstring = \"python\"\nresult = Convert(string)\nprint(result) ",
        "generated_testcode": "assert Convert(\"hello\") == [\"h\", \"e\", \"l\", \"l\", \"o\"]\n",
        "test": "assert Convert('python program') == ['python','program']\nassert Convert('Data Analysis') ==['Data','Analysis']\nassert Convert('Hadoop Training') == ['Hadoop','Training']",
        "canonical_solution": "def Convert(string): \r\n    li = list(string.split(\" \")) \r\n    return li "
    },
    {
        "number": 709,
        "prompt": "Write a function to count unique keys for each value present in the tuple.\ndef get_unique(test_list):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    unique_dict = {}\n    for key, value in test_list:\n        if key in unique_dict:\n            unique_dict[key].add(value)\n        else:\n            unique_dict[key] = {value}\n    return unique_dict\n\ntest_list = [(1, 'a'), (2, 'b'), (3, 'c'), (4, 'a'), (2, 'd'), (5, 'c')]\nprint(get_unique(test_list))\n\n# Output: {1: {'a'}, 2: {'b', 'd'}, 3: {'c'}, 4: {'a'}, 5: {'c'}}\n\n# We can see that key 1 has only one unique value, which is 'a'. Key 2 has two unique values, 'b' and 'd'. Key 3 has one unique value 'c', and so on. ",
        "generated_testcode": "",
        "test": "assert get_unique([(3, 4), (1, 2), (2, 4), (8, 2), (7, 2), (8, 1), (9, 1), (8, 4), (10, 4)] ) == '{4: 4, 2: 3, 1: 2}'\nassert get_unique([(4, 5), (2, 3), (3, 5), (9, 3), (8, 3), (9, 2), (10, 2), (9, 5), (11, 5)] ) == '{5: 4, 3: 3, 2: 2}'\nassert get_unique([(6, 5), (3, 4), (2, 6), (11, 1), (8, 22), (8, 11), (4, 3), (14, 3), (11, 6)] ) == '{5: 1, 4: 1, 6: 2, 1: 1, 22: 1, 11: 1, 3: 2}'",
        "canonical_solution": "from collections import defaultdict \r\ndef get_unique(test_list):\r\n  res = defaultdict(list)\r\n  for sub in test_list:\r\n    res[sub[1]].append(sub[0])\r\n  res = dict(res)\r\n  res_dict = dict()\r\n  for key in res:\r\n    res_dict[key] = len(list(set(res[key])))\r\n  return (str(res_dict)) "
    },
    {
        "number": 710,
        "prompt": "Write a function to access the initial and last data of the given tuple record.\ndef front_and_rear(test_tup):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    return (test_tup[0], test_tup[-1])\n\n# Example usage:\ntest_tup = (1, 2, 3, 4, 5)\nprint(front_and_rear(test_tup)) # Output: (1, 5)\n\n# Test cases\ntest_tup1 = (1, 2, 3, 4, 5)\ntest_tup2 = ('A', 'B', 'C', 'D', 'E')\ntest_tup3 = ('Hello', 'World', 123)\n\nprint(front_and_rear(test_tup1))  # Output: (1, 5)\nprint(front_and_rear(test_tup2))  # Output: ('A', 'E')\nprint(front_and_rear(test_tup3))  # Output: ('Hello', 123) ",
        "generated_testcode": "assert front_and_rear((1, 2, 3, 4, 5, 6, 7, 8, 9, 10) == (1, 10)\n\n",
        "test": "assert front_and_rear((10, 4, 5, 6, 7)) == (10, 7)\nassert front_and_rear((1, 2, 3, 4, 5)) == (1, 5)\nassert front_and_rear((6, 7, 8, 9, 10)) == (6, 10)",
        "canonical_solution": "def front_and_rear(test_tup):\r\n  res = (test_tup[0], test_tup[-1])\r\n  return (res) "
    },
    {
        "number": 711,
        "prompt": "Write a python function to check whether the product of digits of a number at even and odd places is equal or not.\ndef product_Equal(n): \n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    # Convert number into string \n    str_num = str(n) \n    even_sum = 0\n    odd_sum = 0\n  \n    # Calculate sum of digits at even places \n    for i in range(0, len(str_num), 2): \n        even_sum += int(str_num[i]) \n  \n    # Calculate sum of digits at odd places \n    for i in range(1, len(str_num), 2): \n        odd_sum += int(str_num[i]) \n  \n    # Check if the sum is equal or not \n    if even_sum == odd_sum: \n        return True\n    else: \n        return False\n  \n# Driver code \nn = 1234456\nif product_Equal(n): \n    print(\"Yes\") \nelse: \n    print(\"No\") \n\nn = 1234567\nif product_Equal(n): \n    print(\"Yes\") \nelse: \n    print(\"No\") ",
        "generated_testcode": "assert product_Equal(12345) == True\n",
        "test": "assert product_Equal(2841) == True\nassert product_Equal(1234) == False\nassert product_Equal(1212) == False",
        "canonical_solution": "def product_Equal(n): \r\n    if n < 10: \r\n        return False\r\n    prodOdd = 1; prodEven = 1\r\n    while n > 0: \r\n        digit = n % 10\r\n        prodOdd *= digit \r\n        n = n//10\r\n        if n == 0: \r\n            break; \r\n        digit = n % 10\r\n        prodEven *= digit \r\n        n = n//10\r\n    if prodOdd == prodEven: \r\n        return True\r\n    return False"
    },
    {
        "number": 712,
        "prompt": "Write a function to remove duplicates from a list of lists.\ndef remove_duplicate(list1):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    new_list = []\n    for i in list1:\n        if i not in new_list:\n            new_list.append(i)\n    return new_list\n\n# Example usage:\nprint(remove_duplicate([[1, 2, 3], [2, 3, 4], [4, 5, 6], [5, 6, 7]]))\n# Output: [[1, 2, 3], [4, 5, 6]] ",
        "generated_testcode": "",
        "test": "assert remove_duplicate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]])==[[10, 20], [30, 56, 25], [33], [40]] \nassert remove_duplicate([\"a\", \"b\", \"a\", \"c\", \"c\"] )==[\"a\", \"b\", \"c\"]\nassert remove_duplicate([1, 3, 5, 6, 3, 5, 6, 1] )==[1, 3, 5, 6]",
        "canonical_solution": "import itertools\r\ndef remove_duplicate(list1):\r\n list.sort(list1)\r\n remove_duplicate = list(list1 for list1,_ in itertools.groupby(list1))\r\n return remove_duplicate"
    },
    {
        "number": 713,
        "prompt": "Write a function to check if the given tuple contains all valid values or not.\ndef check_valid(test_tup):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    for i in test_tup:\n        if isinstance(i, (int, float, str) == False:\n            return False\n    return True\n\n# Test cases\nprint(check_valid((1, \"hello\", 3.5, 7)) == True)  # True\nprint(check_valid((\"hello\", 5, 7, \"world\")) == False)  # False\nprint(check_valid((1, 2, 3, 4, 5) == True)  # True\nprint(check_valid((True, False, None) == False)  # False\nprint(check_valid(()) == True)  # True\nprint(check_valid((1, \"2\", \"3\", 4.5) == True)  # True\n\n# Test the function with edge cases\nprint(check_valid(())  # True\nprint(check_valid((\"hello\", 5, 7, \"world\"))  # False\nprint(check_valid((1, 2, 3, 4, 5) == True)  # True\nprint(check_valid((True, False, None) == False)  # False\nprint(check_valid((1, \"2\", \"3\", 4.5) == True)  # True ",
        "generated_testcode": "assert check_valid((1, 2, 3, 4, 5, 6) == True\n",
        "test": "assert check_valid((True, True, True, True) ) == True\nassert check_valid((True, False, True, True) ) == False\nassert check_valid((True, True, True, True) ) == True",
        "canonical_solution": "def check_valid(test_tup):\r\n  res = not any(map(lambda ele: not ele, test_tup))\r\n  return (res) "
    },
    {
        "number": 714,
        "prompt": "Write a python function to count the number of distinct power of prime factor of given number.\ndef count_Fac(n):  \n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    count = 0\n    i = 2\n    while(i <= n):  \n        while(n % i == 0):  \n            count += 1\n            n = n / i  \n        i += 1\n    return count  \ndef countDistinctFactors(n):  \n    count = 0\n    for i in range(2, n):  \n        if (count_Fac(i) == 1):  \n            if (n % i == 0):  \n                count += 1\n    return count  \n  \nn = 14\nprint(countDistinctFactors(n)) ",
        "generated_testcode": "assert count_Fac(12) == 2\n",
        "test": "assert count_Fac(24) == 3\nassert count_Fac(12) == 2\nassert count_Fac(4) == 1",
        "canonical_solution": "def count_Fac(n):  \r\n    m = n \r\n    count = 0\r\n    i = 2\r\n    while((i * i) <= m): \r\n        total = 0\r\n        while (n % i == 0): \r\n            n /= i \r\n            total += 1 \r\n        temp = 0\r\n        j = 1\r\n        while((temp + j) <= total): \r\n            temp += j \r\n            count += 1\r\n            j += 1 \r\n        i += 1\r\n    if (n != 1): \r\n        count += 1 \r\n    return count "
    },
    {
        "number": 715,
        "prompt": "Write a function to convert the given string of integers into a tuple.\ndef str_to_tuple(test_str):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    # initialize empty tuple\n    my_tuple = ()\n    # iterate through the string and convert each integer into an integer\n    for num in test_str.split(','):\n        my_tuple += (int(num),)\n    # return the tuple\n    return my_tuple\n\n# Test the function\nprint(str_to_tuple(\"1,2,3,4,5,6,7\"))  # Output: (1, 2, 3, 4, 5, 6, 7)\nprint(str_to_tuple(\"3, 7, 9, 1, 2, 0\"))  # Output: (3, 7, 9, 1, 2, 0)\nprint(str_to_tuple(\"10, -5, 6, 11, -2, 8\"))  # Output: (10, -5, 6, 11, -2, 8) ",
        "generated_testcode": "assert str_to_tuple(\"1,2,3,4,5\") == (1, 2, 3, 4, 5)\n",
        "test": "assert str_to_tuple(\"1, -5, 4, 6, 7\") == (1, -5, 4, 6, 7)\nassert str_to_tuple(\"1, 2, 3, 4, 5\") == (1, 2, 3, 4, 5)\nassert str_to_tuple(\"4, 6, 9, 11, 13, 14\") == (4, 6, 9, 11, 13, 14)",
        "canonical_solution": "def str_to_tuple(test_str):\r\n  res = tuple(map(int, test_str.split(', ')))\r\n  return (res) "
    },
    {
        "number": 716,
        "prompt": "Write a function to find the perimeter of a rombus.\ndef rombus_perimeter(a):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    return 4 * a\n\n# Test the function with the following values\nprint(rombus_perimeter(5))  # Output: 20\nprint(rombus_perimeter(7))  # Output: 28\nprint(rombus_perimeter(10))  # Output: 40\n",
        "generated_testcode": "assert rombus_perimeter(5) == 20\n",
        "test": "assert rombus_perimeter(10)==40\nassert rombus_perimeter(5)==20\nassert rombus_perimeter(4)==16",
        "canonical_solution": "def rombus_perimeter(a):\r\n  perimeter=4*a\r\n  return perimeter"
    },
    {
        "number": 717,
        "prompt": "Write a function to calculate the standard deviation.\ndef sd_calc(data):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    n = len(data)\n    mean = sum(data)/n\n    variance = sum([((x-mean)**2 for x in data])/n\n    sd = variance**0.5\n    return sd\n\n# Test the function with a list of numbers\ndata = [1, 2, 3, 4, 5, 6, 7, 8, 9]\nprint(sd_calc(data)) ",
        "generated_testcode": "assert sd_calc([1, 2, 3, 4, 5]) == 1.5811388830084189\n",
        "test": "assert sd_calc([4, 2, 5, 8, 6])== 2.23606797749979\nassert sd_calc([1,2,3,4,5,6,7])==2.160246899469287\nassert sd_calc([5,9,10,15,6,4])==4.070217029430577",
        "canonical_solution": "import math\r\nimport sys\r\ndef sd_calc(data):\r\n    n = len(data)\r\n    if n <= 1:\r\n        return 0.0\r\n    mean, sd = avg_calc(data), 0.0\r\n    for el in data:\r\n        sd += (float(el) - mean)**2\r\n    sd = math.sqrt(sd / float(n-1))\r\n    return sd\r\ndef avg_calc(ls):\r\n    n, mean = len(ls), 0.0\r\n    if n <= 1:\r\n        return ls[0]\r\n    for el in ls:\r\n        mean = mean + float(el)\r\n    mean = mean / float(n)\r\n    return mean"
    },
    {
        "number": 718,
        "prompt": "Write a function to create a list taking alternate elements from another given list.\ndef alternate_elements(list1):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    new_list = []\n    for i in range(0, len(list1), 2):\n        new_list.append(list1[i])\n    return new_list\n\n# Testing the function with example\nlist1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nprint(alternate_elements(list1))  # Output: [1, 3, 5, 7, 9] ",
        "generated_testcode": "assert alternate_elements([1, 2, 3, 4, 5, 6, 7, 8, 9]) == [1, 3, 5, 7]\n",
        "test": "assert alternate_elements([\"red\", \"black\", \"white\", \"green\", \"orange\"])==['red', 'white', 'orange']\nassert alternate_elements([2, 0, 3, 4, 0, 2, 8, 3, 4, 2])==[2, 3, 0, 8, 4]\nassert alternate_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1,3,5,7,9]",
        "canonical_solution": "def alternate_elements(list1):\r\n    result=[]\r\n    for item in list1[::2]:\r\n        result.append(item)\r\n    return result "
    },
    {
        "number": 719,
        "prompt": "Write a function that matches a string that has an a followed by zero or more b's.\ndef text_match(text):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    return re.match(\"a.*b\", text)\n\n# Test the function with the examples\nprint(text_match(\"ab\")) # Should print True\nprint(text_match(\"abb\")) # Should print True\nprint(text_match(\"a\")) # Should print True\nprint(text_match(\"b\")) # Should print False\nprint(text_match(\"abc\")) # Should print True\nprint(text_match(\"ac\")) # Should print False\n\n# Test the function with a longer string\nprint(text_match(\"abbbc\")) # Should print True\nprint(text_match(\"aac\")) # Should print False\nprint(text_match(\"aaaaaab\")) # Should print True\nprint(text_match(\"a\")) # Should print True\nprint(text_match(\"abbbbbb\")) # Should print True\n\n# Use the function to match a specific pattern in a longer string\ndef find_pattern(text, pattern):\n    pattern_match = re.search(pattern, text)\n    if pattern_match:\n        return pattern_match.group()\n    else:\n        return None\n\n# Test the function with the examples\nprint(find_pattern(\"abcd\", \"a.*b\")) # Should print \"ab\"\nprint(find_pattern(\"abcd\", \"a.*c\")) # Should print \"abc\"\nprint(find_pattern(\"abcd\", \"a.*d\")) # Should print \"abcd\"\nprint(find_pattern(\"abcd\", \"a.*e\")) # Should print None\nprint(find_pattern(\"abcd\", \"a.*",
        "generated_testcode": "assert text_match(\"ab\") == True\n",
        "test": "assert text_match(\"ac\")==('Found a match!')\nassert text_match(\"dc\")==('Not matched!')\nassert text_match(\"abba\")==('Found a match!')",
        "canonical_solution": "import re\r\ndef text_match(text):\r\n        patterns = 'ab*?'\r\n        if re.search(patterns,  text):\r\n                return 'Found a match!'\r\n        else:\r\n                return('Not matched!')"
    },
    {
        "number": 720,
        "prompt": "Write a function to add a dictionary to the tuple.\ndef add_dict_to_tuple(test_tup, test_dict):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": true,
        "answer": "    test_list = list(test_tup)\n    test_list.append(test_dict)\n    return tuple(test_list)\n\n\n# Test the function with the following values\ntest_tup = (1, 2, 3, 4, 5)\ntest_dict = {\"name\": \"John\", \"age\": 25, \"city\": \"New York\"}\nprint(add_dict_to_tuple(test_tup, test_dict))\n\n# Output: (1, 2, 3, 4, 5, {'name': 'John', 'age': 25, 'city': 'New York'})\n\n# Test the function with another set of values\ntest_tup = (\"apple\", \"banana\", \"cherry\")\ntest_dict = {\"fruit\": \"orange\", \"color\": \"red\"}\nprint(add_dict_to_tuple(test_tup, test_dict))\n\n# Output: ('apple', 'banana', 'cherry', {'fruit': 'orange', 'color': 'red'}) ",
        "generated_testcode": "assert add_dict_to_tuple(('a', 'b', 'c', 'd'), {'e': 1, 'f': 2}) == ('a', 'b', 'c', 'd', {'e': 1, 'f': 2})\n",
        "test": "assert add_dict_to_tuple((4, 5, 6), {\"MSAM\" : 1, \"is\" : 2, \"best\" : 3} ) == (4, 5, 6, {'MSAM': 1, 'is': 2, 'best': 3})\nassert add_dict_to_tuple((1, 2, 3), {\"UTS\" : 2, \"is\" : 3, \"Worst\" : 4} ) == (1, 2, 3, {'UTS': 2, 'is': 3, 'Worst': 4})\nassert add_dict_to_tuple((8, 9, 10), {\"POS\" : 3, \"is\" : 4, \"Okay\" : 5} ) == (8, 9, 10, {'POS': 3, 'is': 4, 'Okay': 5})",
        "canonical_solution": "def add_dict_to_tuple(test_tup, test_dict):\r\n  test_tup = list(test_tup)\r\n  test_tup.append(test_dict)\r\n  test_tup = tuple(test_tup)\r\n  return (test_tup) "
    },
    {
        "number": 721,
        "prompt": "Write a function to find a path with the maximum average over all existing paths for the given square matrix of size n*n.\ndef maxAverageOfPath(cost, N): \n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    # Initialize dp to store the max cost of the path ending at each cell\n    dp = [[0 for i in range(N)] for j in range(N)]\n    for i in range(N):\n        dp[0][i] = cost[0][i]\n        dp[i][0] = cost[i][0]\n    for i in range(1, N):\n        for j in range(1, N):\n            dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + cost[i][j]\n    for j in range(1, N):\n        for i in range(1, N):\n            dp[i][j] = max(dp[i][j], dp[i-1][j]) + cost[i][j]\n    return (dp[N-1][N-1])/(N*N)\n\n# test the function\ncost = [[1,2,3], [4,5,6], [7,8,9]]\nprint(maxAverageOfPath(cost, 3))\n# Output: 8.6666666666666666665\n\ncost = [[1,2,3], [4,5,6], [7,8,9], [10,11,12]]\nprint(maxAverageOfPath(cost, 4))\n# Output: 10.83333333333",
        "generated_testcode": "assert maxAverageOfPath([[1,2,3],[4,5,6],[7,8,9]], 3) == 6.67\n",
        "test": "assert maxAverageOfPath([[1, 2, 3], [6, 5, 4], [7, 3, 9]], 3) == 5.2\nassert maxAverageOfPath([[2, 3, 4], [7, 6, 5], [8, 4, 10]], 3) == 6.2\nassert maxAverageOfPath([[3, 4, 5], [8, 7, 6], [9, 5, 11]], 3) == 7.2 ",
        "canonical_solution": "M = 100\r\ndef maxAverageOfPath(cost, N): \r\n\tdp = [[0 for i in range(N + 1)] for j in range(N + 1)] \r\n\tdp[0][0] = cost[0][0] \r\n\tfor i in range(1, N): \r\n\t\tdp[i][0] = dp[i - 1][0] + cost[i][0] \r\n\tfor j in range(1, N): \r\n\t\tdp[0][j] = dp[0][j - 1] + cost[0][j] \r\n\tfor i in range(1, N): \r\n\t\tfor j in range(1, N): \r\n\t\t\tdp[i][j] = max(dp[i - 1][j], \r\n\t\t\t\t\t\tdp[i][j - 1]) + cost[i][j] \r\n\treturn dp[N - 1][N - 1] / (2 * N - 1)"
    },
    {
        "number": 722,
        "prompt": "Write a function to filter the height and width of students which are stored in a dictionary.\ndef filter_data(students,h,w):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    result = {}\n    for student,info in students.items():\n        if info[\"height\"] >= h and info[\"weight\"] >= w:\n            result[student] = info\n    return result\nstudents = {\n    \"Alice\": {\"height\": 165, \"weight\": 45},\n    \"Bob\": {\"height\": 180, \"weight\": 70},\n    \"Charlie\": {\"height\": 175, \"weight\": 65},\n    \"David\": {\"height\": 160, \"weight\": 50},\n    \"Eve\": {\"height\": 167, \"weight\": 52}\n}\nprint(filter_data(students, 170, 60))\n# Output: {'Bob': {'height': 180, 'weight': 70}} ",
        "generated_testcode": "",
        "test": "assert filter_data({'Cierra Vega': (6.2, 70), 'Alden Cantrell': (5.9, 65), 'Kierra Gentry': (6.0, 68), 'Pierre Cox': (5.8, 66)},6.0,70)=={'Cierra Vega': (6.2, 70)}\nassert filter_data({'Cierra Vega': (6.2, 70), 'Alden Cantrell': (5.9, 65), 'Kierra Gentry': (6.0, 68), 'Pierre Cox': (5.8, 66)},5.9,67)=={'Cierra Vega': (6.2, 70),'Kierra Gentry': (6.0, 68)}\nassert filter_data({'Cierra Vega': (6.2, 70), 'Alden Cantrell': (5.9, 65), 'Kierra Gentry': (6.0, 68), 'Pierre Cox': (5.8, 66)},5.7,64)=={'Cierra Vega': (6.2, 70),'Alden Cantrell': (5.9, 65),'Kierra Gentry': (6.0, 68),'Pierre Cox': (5.8, 66)}",
        "canonical_solution": "def filter_data(students,h,w):\r\n    result = {k: s for k, s in students.items() if s[0] >=h and s[1] >=w}\r\n    return result    "
    },
    {
        "number": 723,
        "prompt": "Write a function to count the same pair in two given lists using map function.\ndef count_same_pair(nums1, nums2):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    def same_pair(x):\n        count = 0\n        for y in nums2:\n            if x == y:\n                count += 1\n        return count\n    return list(map(same_pair, nums1))\n\n\nprint(count_same_pair([1,2,3,4,5], [3,4,5,6])) #[2,1,0]\nprint(count_same_pair([1,1,2,2], [1,2,2,3])) #[2,2,0]\nprint(count_same_pair([1,2,3,4], [5,6,7])) #[0,0,0]\n\n# Output: [2, 2, 0]\n# Explanation: In the first list, there are two pairs of 3 and 5, and one pair of 5.\n# In the second list, there is one pair of 1 and two pairs of 2.\n# In the third list, there are no common elements. ",
        "generated_testcode": "assert count_same_pair([1, 2, 3, 4, 5], [3, 4, 5, 6]) == 2\n",
        "test": "assert count_same_pair([1, 2, 3, 4, 5, 6, 7, 8],[2, 2, 3, 1, 2, 6, 7, 9])==4\nassert count_same_pair([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8],[2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8])==11\nassert count_same_pair([2, 4, -6, -9, 11, -12, 14, -5, 17],[2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8])==1",
        "canonical_solution": "from operator import eq\r\ndef count_same_pair(nums1, nums2):\r\n    result = sum(map(eq, nums1, nums2))\r\n    return result"
    },
    {
        "number": 724,
        "prompt": "Write a function to calculate the sum of all digits of the base to the specified power.\ndef power_base_sum(base, power):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    sum = 0\n    while base != 0:\n        sum += base % 10\n        base //= 10\n    return sum ** power\n\nprint(power_base_sum(123, 3)) # Output: 159\nprint(power_base_sum(456, 2)) # Output: 542\nprint(power_base_sum(789, 1)) # Output: 789\nprint(power_base_sum(1000, 4)) # Output: 1\n",
        "generated_testcode": "assert power_base_sum(2, 10) == 12\n",
        "test": "assert power_base_sum(2,100)==115\nassert power_base_sum(8,10)==37\nassert power_base_sum(8,15)==62",
        "canonical_solution": "def power_base_sum(base, power):\r\n    return sum([int(i) for i in str(pow(base, power))])"
    },
    {
        "number": 725,
        "prompt": "Write a function to extract values between quotation marks of the given string by using regex.\ndef extract_quotation(text1):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    return re.findall(r'\"(.*?)\"', text1)\n\n\n# Example usage:\ntext1 = \"The quick brown fox \\\"jumps over\\\" the lazy dog\"\nprint(extract_quotation(text1))  # Output: ['jumps over']\n\ntext2 = \"I am a \\\"good\\\" boy. He is \\\"smart\\\"\"\nprint(extract_quotation(text2))  # Output: ['good', 'smart']\n\ntext3 = \"Hello \\\"John\\\", how are you? I am \\\"fine\\\"\"\nprint(extract_quotation(text3))  # Output: ['John', 'fine'] ",
        "generated_testcode": "assert extract_quotation(\"Hello, 'world'\") == \"world\"\n",
        "test": "assert extract_quotation('Cortex \"A53\" Based \"multi\" tasking \"Processor\"') == ['A53', 'multi', 'Processor']\nassert extract_quotation('Cast your \"favorite\" entertainment \"apps\"') == ['favorite', 'apps']\nassert extract_quotation('Watch content \"4k Ultra HD\" resolution with \"HDR 10\" Support') == ['4k Ultra HD', 'HDR 10']",
        "canonical_solution": "import re\r\ndef extract_quotation(text1):\r\n  return (re.findall(r'\"(.*?)\"', text1))"
    },
    {
        "number": 726,
        "prompt": "Write a function to multiply the adjacent elements of the given tuple.\ndef multiply_elements(test_tup):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    result = 1\n    for i in range(len(test_tup)-1):\n        result *= test_tup[i] * test_tup[i+1]\n    return result\n\n# Example usage:\ntup = (2, 3, 4, 5, 6)\nprint(multiply_elements(tup))  # Output: 120\ntup2 = (1, 2, 3, 4, 5, 6)\nprint(multiply_elements(tup2))  # Output: 120\ntup3 = (1, 2, 0, 3, 4, 5)\nprint(multiply_elements(tup3))  # Output: 0\ntup4 = (1,)\nprint(multiply_elements(tup4))  # Output: 1\ntup5 = ()\nprint(multiply_elements(tup5))  # Output: 1\n",
        "generated_testcode": "assert multiply_elements((1, 2, 3, 4, 5, 6) == 24)\n",
        "test": "assert multiply_elements((1, 5, 7, 8, 10)) == (5, 35, 56, 80)\nassert multiply_elements((2, 4, 5, 6, 7)) == (8, 20, 30, 42)\nassert multiply_elements((12, 13, 14, 9, 15)) == (156, 182, 126, 135)",
        "canonical_solution": "def multiply_elements(test_tup):\r\n  res = tuple(i * j for i, j in zip(test_tup, test_tup[1:]))\r\n  return (res) "
    },
    {
        "number": 727,
        "prompt": "Write a function to remove all characters except letters and numbers using regex\ndef remove_char(S):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    import re\n    pattern = re.compile('[^a-zA-Z0-9]')\n    return pattern.sub('', S)\n\n# Test the function\nprint(remove_char(\"Remove all characters except letters and numbers 123, @#$%^&*()_-+=!`~<>?\"))\n# Output: \"Removeallcharactersexceptlettersandnumbers123\" ",
        "generated_testcode": "assert remove_char(\"Hello, World! 123\") == \"HelloWorld123\"\n",
        "test": "assert remove_char(\"123abcjw:, .@! eiw\") == '123abcjweiw'\nassert remove_char(\"Hello1234:, ! Howare33u\") == 'Hello1234Howare33u'\nassert remove_char(\"Cool543Triks@:, Make@987Trips\") == 'Cool543TriksMake987Trips' ",
        "canonical_solution": "import re \r\ndef remove_char(S):\r\n  result = re.sub('[\\W_]+', '', S) \r\n  return result"
    },
    {
        "number": 728,
        "prompt": "Write a function to sum elements in two lists.\ndef sum_list(lst1,lst2):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    return [sum(x) for x in zip(lst1, lst2)]\nprint(sum_list([1, 2, 3], [4, 5, 6])) #[5, 7, 9]\n# In the function above, zip() function is used to iterate over the elements of lst1 and lst2 simultaneously and returns a zip object. \n# The sum() function is then used to add the elements of each tuple (obtained by using the zip() function) and returns a list of sums.\n\n#Example 2:\ndef sum_list(lst1,lst2):\n    return list(map(lambda x, y: x + y, lst1, lst2))\nprint(sum_list([1, 2, 3], [4, 5, 6])) #[5, 7, 9]\n# In the function above, the map() function is used with a lambda function to iterate over the elements of lst1 and lst2 simultaneously and add them. \n# The lambda function takes two arguments (x and y) and adds them together to return a new list.\n\n# Example 3:\ndef sum_list(lst1,lst2):\n    return [x + y for x, y in zip(lst1, lst2)]\nprint(sum_list([1, 2, 3], [4, 5, 6])) #[5, 7, 9]\n# The function above uses a list comprehension to iterate over the elements of lst1 and lst2 simultaneously and add them. The elements are accessed using",
        "generated_testcode": "assert sum_list([1,2,3],[4,5,6]) == [5,7,9]\n",
        "test": "assert sum_list([10,20,30],[15,25,35])==[25,45,65]\nassert sum_list([1,2,3],[5,6,7])==[6,8,10]\nassert sum_list([15,20,30],[15,45,75])==[30,65,105]",
        "canonical_solution": "def sum_list(lst1,lst2):\r\n  res_list = [lst1[i] + lst2[i] for i in range(len(lst1))] \r\n  return res_list"
    },
    {
        "number": 729,
        "prompt": "Write a function to add two lists using map and lambda function.\ndef add_list(nums1,nums2):\n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    return list(map(lambda x,y: x+y,nums1,nums2))\n\nnums1 = [1,2,3,4,5]\nnums2 = [5,6,7,8]\nprint(add_list(nums1,nums2)) ",
        "generated_testcode": "assert add_list([1,2,3],[4,5,6]) == [5,7,9]\n",
        "test": "assert add_list([1, 2, 3],[4,5,6])==[5, 7, 9]\nassert add_list([1,2],[3,4])==[4,6]\nassert add_list([10,20],[50,70])==[60,90]",
        "canonical_solution": "def add_list(nums1,nums2):\r\n  result = map(lambda x, y: x + y, nums1, nums2)\r\n  return list(result)"
    },
    {
        "number": 730,
        "prompt": "Write a function to remove consecutive duplicates of a given list.\ndef consecutive_duplicates(nums):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    new_list = []\n    for i in range(len(nums)):\n        if i == len(nums) - 1:\n            new_list.append(nums[i])\n            break\n        if nums[i] != nums[i+1]:\n            new_list.append(nums[i])\n    return new_list\n\n# Test cases\nprint(consecutive_duplicates([1, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 7, 7, 8]))  # Output: [1, 2, 3, 4, 5, 6, 7, 8]\nprint(consecutive_duplicates([1, 1, 1, 2, 2, 3, 3]))  # Output: [1, 2, 3]\nprint(consecutive_duplicates([1, 1, 1, 1, 1, 1]))  # Output: [1]\nprint(consecutive_duplicates([1, 1, 1, 2, 2, 2, 3, 3, 3, 3]))  # Output: [1, 2, 3]\nprint(consecutive_duplicates([1, 2, 3, 4, 5, 6, 7, 8]))  # Output: [1, 2, 3, 4, 5",
        "generated_testcode": "",
        "test": "assert consecutive_duplicates([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4 ])==[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4]\nassert consecutive_duplicates([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10])==[10, 15, 19, 18, 17, 26, 17, 18, 10]\nassert consecutive_duplicates(['a', 'a', 'b', 'c', 'd', 'd'])==['a', 'b', 'c', 'd']",
        "canonical_solution": "from itertools import groupby\r\ndef consecutive_duplicates(nums):\r\n    return [key for key, group in groupby(nums)] "
    },
    {
        "number": 731,
        "prompt": "Write a function to find the lateral surface area of a cone.\ndef lateralsurface_cone(r,h):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    # radius and height of the cone\n    area = (r*r*h)+(2*3.14*r*r)\n    return area\n\n# Test the function with a cone of radius 3 and height 5\nprint(lateralsurface_cone(3,5)) # Output: 108.2743310034482759\n\n# Write a function to find the lateral surface area of a cylinder.\ndef lateralsurface_cylinder(r,h):\n    # radius and height of the cylinder\n    area = (2*3.14*r*h)\n    return area\n\n# Test the function with a cylinder of radius 3 and height 5\nprint(lateralsurface_cylinder(3,5)) # Output: 314.15916935494\n\n# Write a function to find the lateral surface area of a sphere.\ndef lateralsurface_sphere(r):\n    # radius of the sphere\n    area = (4*3.14*r*r)\n    return area\n\n# Test the function with a sphere of radius 3\nprint(lateralsurface_sphere(3)) # Output: 152.01160188687543763\n\n# Write a function to find the surface area of a cube.\ndef surface_cube(s):\n    # side of the cube\n   ",
        "generated_testcode": "assert lateralsurface_cone(3,5) == 94.04\n",
        "test": "assert lateralsurface_cone(5,12)==204.20352248333654\nassert lateralsurface_cone(10,15)==566.3586699569488\nassert lateralsurface_cone(19,17)==1521.8090132193388",
        "canonical_solution": "import math\r\ndef lateralsurface_cone(r,h):\r\n  l = math.sqrt(r * r + h * h)\r\n  LSA = math.pi * r  * l\r\n  return LSA"
    },
    {
        "number": 732,
        "prompt": "Write a function to replace all occurrences of spaces, commas, or dots with a colon.\ndef replace_specialchar(text):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    return text.replace(\" \", \":\").replace(\",\", \":\").replace(\".\", \":\")\n\n# Test the function with an example\nprint(replace_specialchar(\"Hello, world.\"))  # Output: \"Hello:world:\"\n\n# Use the function to process the example string\nexample = \"I'm doing fine, how about you?\"\nexample = replace_specialchar(example)\nprint(example)  # Output: \"I'm:doing:fine:how:about:you?\"\n\n# Test the function with another example\nprint(replace_specialchar(\"This is a sentence with spaces.\"))  # Output: \"This:is:a:sentence:with:spaces:\"\n\n# Test the function with an empty string\nprint(replace_specialchar(\"\"))  # Output: \"\"\n\n# Test the function with a string containing only special characters\nprint(replace_specialchar(\".,.,.,.,\"))  # Output: \":,,:.,:.,:\"\n\n# Test the function with a string with no special characters\nprint(replace_specialchar(\"Hello world\"))  # Output: \"Hello:world\" ",
        "generated_testcode": "assert replace_specialchar(\"Hello, world!\") == \"Hello:world!\"\n",
        "test": "assert replace_specialchar('Python language, Programming language.')==('Python:language::Programming:language:')\nassert replace_specialchar('a b c,d e f')==('a:b:c:d:e:f')\nassert replace_specialchar('ram reshma,ram rahim')==('ram:reshma:ram:rahim')",
        "canonical_solution": "import re\r\ndef replace_specialchar(text):\r\n return (re.sub(\"[ ,.]\", \":\", text))\r"
    },
    {
        "number": 733,
        "prompt": "Write a function to find the index of the first occurrence of a given number in a sorted array.\ndef find_first_occurrence(A, x):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    left, right = 0, len(A) - 1\n    first = -1\n    while left <= right:\n        mid = (left + right) // 2\n        if A[mid] < x:\n            left = mid + 1\n        else:\n            if first == -1 or A[mid] != A[first]:\n                first = mid\n            if A[mid] == x:\n                right = mid - 1\n    return first\n\n# Test the function with a sorted array\nA = [1, 2, 3, 3, 4, 5, 5, 5, 6, 7, 8, 9]\nprint(find_first_occurrence(A, 5))  # Output: 3\nprint(find_first_occurrence(A, 6))  # Output: 6\nprint(find_first_occurrence(A, 1))  # Output: 0\nprint(find_first_occurrence(A, 0))  # Output: -1\n\n# Test the function with an unsorted array\nA = [3, 2, 3, 1, 5, 4, 5, 5, 6, 7, 8]\nprint(find_first_occurrence(A, 5))  # Output: 3\nprint(find_first_occurrence(A, 6))  # Output: 6\nprint(find_first_occurrence(A, 1))  # Output: 2\n",
        "generated_testcode": "assert find_first_occurrence([1, 2, 3, 4, 4, 4, 5, 6, 7], 4) == 2\n",
        "test": "assert find_first_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5) == 1\nassert find_first_occurrence([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5) == 2\nassert find_first_occurrence([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6) == 4",
        "canonical_solution": "def find_first_occurrence(A, x):\r\n    (left, right) = (0, len(A) - 1)\r\n    result = -1\r\n    while left <= right:\r\n        mid = (left + right) // 2\r\n        if x == A[mid]:\r\n            result = mid\r\n            right = mid - 1\r\n        elif x < A[mid]:\r\n            right = mid - 1\r\n        else:\r\n            left = mid + 1\r\n    return result"
    },
    {
        "number": 734,
        "prompt": "Write a python function to find sum of products of all possible subarrays.\ndef sum_Of_Subarray_Prod(arr,n):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    arr.sort()\n    MOD = 10**9 + 7\n    prefix = [0]*(n+1)\n    suffix = [0]*(n+1)\n    for i in range(1,n+1):\n        prefix[i] = (prefix[i-1] + arr[i-1])%MOD\n    for i in range(n-1,0,-1):\n        suffix[i] = (suffix[i+1] + arr[i])%MOD\n    \n    res = 0\n    for i in range(1,n+1):\n        res += (prefix[i]*suffix[i])%MOD\n        res %= MOD\n    return res\n\nif __name__ == '__main__':\n    arr = list(map(int,input().split()))\n    n = len(arr)\n    print(sum_Of_Subarray_Prod(arr,n))",
        "generated_testcode": "assert sum_Of_Subarray_Prod([1,2,3,4,5],4) == 220\n",
        "test": "assert sum_Of_Subarray_Prod([1,2,3],3) == 20\nassert sum_Of_Subarray_Prod([1,2],2) == 5\nassert sum_Of_Subarray_Prod([1,2,3,4],4) == 84",
        "canonical_solution": "def sum_Of_Subarray_Prod(arr,n):\r\n    ans = 0\r\n    res = 0\r\n    i = n - 1\r\n    while (i >= 0):\r\n        incr = arr[i]*(1 + res)\r\n        ans += incr\r\n        res = incr\r\n        i -= 1\r\n    return (ans)"
    },
    {
        "number": 735,
        "prompt": "Write a python function to toggle bits of the number except the first and the last bit.\ndef set_middle_bits(n):  \n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    mask = (n & 1) | ((n >> 1) & 2) | ((n >> 2) & 4) | ((n >> 3) & 8) | ((n >> 4) & 16) | ((n >> 5) & 32) | ((n >> 6) & 64) | ((n >> 7) & 128)\n    return (n ^ mask)\n\nn = int(input(\"Enter a number: \"))\nprint(\"After toggling bits except the first and last bit: \", set_middle_bits(n))\n\n#Test the function\nset_middle_bits(123)  # 122\nset_middle_bits(1024) # 998\nset_middle_bits(39)  # 55\nset_middle_bits(51)  # 47\nset_middle_bits(4095) # 4069\nset_middle_bits(2147483648) # 2147483583\nset_middle_bits(2147483649) # 2147483591\nset_middle_bits(123456789) # 123456779\nset_middle_bits(2357128) # 2357076\nset_middle_bits(1677772",
        "generated_testcode": "assert set_middle_bits(10) == 11\n",
        "test": "assert toggle_middle_bits(9) == 15\nassert toggle_middle_bits(10) == 12\nassert toggle_middle_bits(11) == 13",
        "canonical_solution": "def set_middle_bits(n):  \r\n    n |= n >> 1; \r\n    n |= n >> 2; \r\n    n |= n >> 4; \r\n    n |= n >> 8; \r\n    n |= n >> 16;  \r\n    return (n >> 1) ^ 1\r\ndef toggle_middle_bits(n): \r\n    if (n == 1): \r\n        return 1\r\n    return n ^ set_middle_bits(n) "
    },
    {
        "number": 736,
        "prompt": "Write a function to locate the left insertion point for a specified value in sorted order.\ndef left_insertion(a, x):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": true,
        "answer": "    left = 0\n    right = len(a) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if a[mid] >= x:\n            right = mid - 1\n        else:\n            left = mid + 1\n    return left\n\n# Write a function to locate the right insertion point for a specified value in sorted order.\ndef right_insertion(a, x):\n    left = 0\n    right = len(a) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if a[mid] <= x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return left\n\n# Binary search with two pointers.\ndef binary_search(a, x):\n    left = left_insertion(a, x)\n    right = right_insertion(a, x)\n    if left == right:\n        if a[left] == x:\n            return left\n        else:\n            return -1\n    else:\n        return -1\n\n# Find the element to be inserted in the list.\na = [1, 3, 5, 7, 9, 11, 13]\nx = 6\n\n# Find the left and right insertion points.\nleft_point = left_insertion(a, x)\nright_point = right_insertion(a, x)\n\n# Check if the element is already in the",
        "generated_testcode": "assert left_insertion([1, 2, 3, 4, 5, 6], 3) == 2\n",
        "test": "assert left_insertion([1,2,4,5],6)==4\nassert left_insertion([1,2,4,5],3)==2\nassert left_insertion([1,2,4,5],7)==4",
        "canonical_solution": "import bisect\r\ndef left_insertion(a, x):\r\n    i = bisect.bisect_left(a, x)\r\n    return i"
    },
    {
        "number": 737,
        "prompt": "Write a function to check whether the given string is starting with a vowel or not using regex.\ndef check_str(string): \n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    pattern = r'^[aeiouAEIOU].+'\n    if re.match(pattern, string): \n        return True\n    else: \n        return False\n\n# Example usage:\nprint(check_str(\"apple\"))  # True\nprint(check_str(\"orange\")) # False\nprint(check_str(\"egg\"))   # True\nprint(check_str(\"dog\"))   # False\n\n# This function uses the `re` module to check whether the given string starts with a vowel or not. \n# The regular expression pattern `r'^[aeiouAEIOU].+` matches any string that starts with a vowel (either lowercase or uppercase) and has one or more characters after it.\n# The `^` symbol at the start of the pattern indicates the start of the string, and `.+` matches any character one or more times. If there is a match, the function returns True, else it returns False. ",
        "generated_testcode": "assert check_str(\"apple\") == True\n",
        "test": "assert check_str(\"annie\") == 'Valid'\nassert check_str(\"dawood\") == 'Invalid'\nassert check_str(\"Else\") == 'Valid'",
        "canonical_solution": "import re \r\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\r\ndef check_str(string): \r\n\tif(re.search(regex, string)): \r\n\t\treturn (\"Valid\") \r\n\telse: \r\n\t\treturn (\"Invalid\") "
    },
    {
        "number": 738,
        "prompt": "Write a function to calculate the geometric sum of n-1.\ndef geometric_sum(n):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    sum = 1 - (1/(pow(2,n))\n    return sum\n\n# Test the function\nprint(geometric_sum(5))  # Output: 15.0\n\n# A function to calculate the sum of a given list\ndef list_sum(lst):\n    sum = 0\n    for i in lst:\n        sum += i\n    return sum\n\n# Test the function\nlst = [1, 2, 3, 4, 5, 6]\nprint(list_sum(lst))  # Output: 15\n\n# A function to calculate the sum of integers from 1 to n\ndef sum_integers(n):\n    sum = 0\n    for i in range(1, n+1):\n        sum += i\n    return sum\n\n# Test the function\nprint(sum_integers(10))  # Output: 55\n\n# A function to calculate the sum of squares of integers from 1 to n\ndef sum_squares(n):\n    sum = 0\n    for i in range(1, n+1):\n        sum += pow(i, 2)\n    return sum\n\n# Test the function\nprint(sum_squares(5))  # Output: 55\n\n# A function to calculate the sum of cubes of integers from 1 to n\ndef sum_cubes(n):\n    sum = 0\n    for i in range(1, n+1):\n        sum += pow(i, 3)",
        "generated_testcode": "assert geometric_sum(5) == 14.38\n",
        "test": "assert geometric_sum(7) == 1.9921875\nassert geometric_sum(4) == 1.9375\nassert geometric_sum(8) == 1.99609375",
        "canonical_solution": "def geometric_sum(n):\r\n  if n < 0:\r\n    return 0\r\n  else:\r\n    return 1 / (pow(2, n)) + geometric_sum(n - 1)"
    },
    {
        "number": 739,
        "prompt": "Write a python function to find the index of smallest triangular number with n digits.\ndef find_Index(n): \n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    i = 1\n    while True: \n        if len(str(i * (i + 1) // 2)) == n: \n            return i\n        i += 1\n \n# Driver code \nn = 2\nprint(find_Index(n)) \n\n# This will return 2 as 3 is the first triangular number with 2 digits. ",
        "generated_testcode": "assert find_Index(1) == 1\n",
        "test": "assert find_Index(2) == 4\nassert find_Index(3) == 14\nassert find_Index(4) == 45",
        "canonical_solution": "import math \r\ndef find_Index(n): \r\n    x = math.sqrt(2 * math.pow(10,(n - 1))); \r\n    return round(x); "
    },
    {
        "number": 740,
        "prompt": "Write a function to convert the given tuple to a key-value dictionary using adjacent elements.\ndef tuple_to_dict(test_tup):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    result = {}\n    for i in range(0, len(test_tup), 2):\n        result[test_tup[i]] = test_tup[i+1]\n    return result\n\n# Test cases\nprint(tuple_to_dict(('a', 1, 'b', 2, 'c', 3))  # output: {'a': 1, 'b': 2, 'c': 3}\nprint(tuple_to_dict(('x', 'y', 'z', 1, 't', 2))  # output: {'x': 'y', 'z': 1, 't': 2}\nprint(tuple_to_dict(('m', 'n', 'o', 'p', 'q', 'r', 's'))  # output: {'m': 'n', 'o': 'p', 'q': 'r', 's': 'r'}\n\n# Using list comprehension\ndef tuple_to_dict(test_tup):\n    return {test_tup[i]: test_tup[i+1] for i in range(0, len(test_tup), 2)}\n\n# Test cases\nprint(tuple_to_dict(('a', 1, 'b', 2, 'c', 3))  # output: {'a': 1, 'b': 2, 'c': 3}\nprint(tuple_to_dict(('x', 'y', 'z', 1, 't', 2))  # output",
        "generated_testcode": "assert tuple_to_dict((1, 2, 3, 4, 5, 6, 7, 8) == {1: 2, 3: 4, 5: 6, 7: 8})\n",
        "test": "assert tuple_to_dict((1, 5, 7, 10, 13, 5)) == {1: 5, 7: 10, 13: 5}\nassert tuple_to_dict((1, 2, 3, 4, 5, 6)) == {1: 2, 3: 4, 5: 6}\nassert tuple_to_dict((7, 8, 9, 10, 11, 12)) == {7: 8, 9: 10, 11: 12}",
        "canonical_solution": "def tuple_to_dict(test_tup):\r\n  res = dict(test_tup[idx : idx + 2] for idx in range(0, len(test_tup), 2))\r\n  return (res) "
    },
    {
        "number": 741,
        "prompt": "Write a python function to check whether all the characters are same or not.\ndef all_Characters_Same(s) :\n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    s = list(s)\n    return len(set(s)) == 1\n\n#Example usage\nprint(all_Characters_Same(\"aaa\")) #Output: True\nprint(all_Characters_Same(\"abc\")) #Output: False\n\n#Time Complexity: O(n)",
        "generated_testcode": "assert all_Characters_Same(\"aaa\") == True\n",
        "test": "assert all_Characters_Same(\"python\") == False\nassert all_Characters_Same(\"aaa\") == True\nassert all_Characters_Same(\"data\") == False",
        "canonical_solution": "def all_Characters_Same(s) :\r\n    n = len(s)\r\n    for i in range(1,n) :\r\n        if s[i] != s[0] :\r\n            return False\r\n    return True"
    },
    {
        "number": 742,
        "prompt": "Write a function to caluclate the area of a tetrahedron.\ndef area_tetrahedron(side):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    import math\n    area = (2*math.sqrt(3)) * (side ** 2)\n    return area\n\n# Test the function with an example tetrahedron with side=6\nprint(area_tetrahedron(6)) # Expected output: 117.38504177793537021\n\n# Calculate the volume of a tetrahedron with height h and side a.\ndef volume_tetrahedron(h, a):\n    import math\n    volume = (1/3) * h * a ** 2\n    return volume\n\n# Test the function with height = 6 and side = 4\nprint(volume_tetrahedron(6, 4)) # Expected output: 96.0\n\n# Calculate the average of two numbers.\ndef average(a, b):\n    return (a + b) / 2\n\n# Test the function with 5 and 10\nprint(average(5, 10)) # Expected output: 7.5\n\n# Calculate the surface area of a cube with side a.\ndef surface_area_cube(a):\n    return 6 * a ** 2\n\n# Test the function with side=6\nprint(surface_area_cube(6)) # Expected output: 1296.0\n\n# Calculate the surface area of a sphere with radius r.\ndef surface_area_sphere(r):\n    import math\n    return ",
        "generated_testcode": "assert area_tetrahedron(6) == 12.0\n",
        "test": "assert area_tetrahedron(3)==15.588457268119894\nassert area_tetrahedron(20)==692.8203230275509\nassert area_tetrahedron(10)==173.20508075688772",
        "canonical_solution": "import math\r\ndef area_tetrahedron(side):\r\n  area = math.sqrt(3)*(side*side)\r\n  return area"
    },
    {
        "number": 743,
        "prompt": "Write a function to rotate a given list by specified number of items to the right direction.\ndef rotate_right(list1,m,n):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    for i in range(n):\n        temp=list1[len(list1)-1]\n        for j in range(len(list1)-1,0,-1):\n            list1[j]=list1[j-1]\n        list1[0]=temp\n    return list1\n\n#Test the function\nlist1=[1,2,3,4,5,6,7]\nm=2\nn=3\nprint(\"List after rotating right by 2 places:\",rotate_right(list1,m,n))\n\n#Output: [5,6,7,1,2,3]\n#Explanation:\n#Original list: [1,2,3,4,5,6,7]\n#After rotating right by 2 places: [5,6,7,1,2,3]\n\n#Time Complexity: O(n^2)\n#Space Complexity: O(1)\n\n#To rotate a list to the left, we can use the above function and rotate it by (len(list1)-m) places to get the desired result.\ndef rotate_left(list1,m,n):\n    list1=rotate_right(list1,len(list1)-m,n)\n    return list1\n\n#Test the function\nlist1=[1,2,3,4,5,6,7]\nm=2\nn=3\nprint(\"List after rotating left by 2 places:\",rotate_left(list1,m,n))\n\n#",
        "generated_testcode": "assert rotate_right([1,2,3,4,5,6,7],2) == [5,6,7,1,2,3]\n",
        "test": "assert rotate_right([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],3,4)==[8, 9, 10, 1, 2, 3, 4, 5, 6]\nassert rotate_right([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],2,2)==[9, 10, 1, 2, 3, 4, 5, 6, 7, 8]\nassert rotate_right([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],5,2)==[6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8]",
        "canonical_solution": "def rotate_right(list1,m,n):\r\n  result =  list1[-(m):]+list1[:-(n)]\r\n  return result"
    },
    {
        "number": 744,
        "prompt": "Write a function to check if the given tuple has any none value or not.\ndef check_none(test_tup):\n",
        "checkpoint": "13B",
        "pass": 5,
        "correct": true,
        "answer": "    for i in test_tup:\n        if i is None:\n            return True\n    return False\n\n# Test the function with the given tuple\ntest_tup = (1, 2, 3, 4, None, 5)\nprint(check_none(test_tup)) # Output: True\n\ntest_tup = (1, 2, 3, 4, 5)\nprint(check_none(test_tup)) # Output: False\n\n# Another way to check the tuple for None value using any() function\ndef check_none_2(test_tup):\n    return any(i is None for i in test_tup)\n\n# Test the function with the given tuple\ntest_tup = (1, 2, 3, 4, None, 5)\nprint(check_none_2(test_tup)) # Output: True\n\ntest_tup = (1, 2, 3, 4, 5)\nprint(check_none_2(test_tup)) # Output: False ",
        "generated_testcode": "assert check_none((1, 2, 3, 4, 5)) == False\n",
        "test": "assert check_none((10, 4, 5, 6, None)) == True\nassert check_none((7, 8, 9, 11, 14)) == False\nassert check_none((1, 2, 3, 4, None)) == True",
        "canonical_solution": "def check_none(test_tup):\r\n  res = any(map(lambda ele: ele is None, test_tup))\r\n  return (res) "
    },
    {
        "number": 745,
        "prompt": "Write a function to find numbers within a given range where every number is divisible by every digit it contains.\ndef divisible_by_digits(startnum, endnum):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    result = []\n    for num in range(startnum, endnum+1):\n        str_num = str(num)\n        divisible = True\n        for digit in str_num:\n            if num % int(digit) != 0:\n                divisible = False\n                break\n        if divisible:\n            result.append(num)\n    return result\n\n# Example usage:\nprint(divisible_by_digits(10, 100)) # Output: [10, 12, 18, 20, 24, 30, 36, 40, 42, 50, 54, 60, 64, 70, 72, 80, 84, 90, 96]\nprint(divisible_by_digits(1000, 10000)) # Output: [100, 200, 300, 400, 500, 600, 700, 800, 900]\nprint(divisible_by_digits(10000, 20000)) # Output: []\nprint(divisible_by_digits(100000, 1000000)) # Output: [10000, 20000, 30000, 40000, ",
        "generated_testcode": "assert divisible_by_digits(10, 100) == [12, 20, 30, 40, 50, 60, 70, 80, 90]\n",
        "test": "assert divisible_by_digits(1,22)==[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]\nassert divisible_by_digits(1,15)==[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]\nassert divisible_by_digits(20,25)==[22, 24]",
        "canonical_solution": "def divisible_by_digits(startnum, endnum):\r\n    return [n for n in range(startnum, endnum+1) \\\r\n                if not any(map(lambda x: int(x) == 0 or n%int(x) != 0, str(n)))]"
    },
    {
        "number": 746,
        "prompt": "Write a function to find area of a sector.\ndef sector_area(r,a):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    pi = 3.14\n    area = (r**2)*a/360*pi\n    return area\n\n#Test the function\nprint(sector_area(5, 15))\n\n# Output: 10.10265482457436669\n\n# Write a function to find circumference of a circle\ndef circle_circumference(r):\n    pi = 3.14\n    circ = 2*pi*r\n    return circ\n\n#Test the function\nprint(circle_circumference(5))\n\n# Output: 31.41592653589793\n\n# Write a function to find volume of a sphere\ndef sphere_volume(r):\n    pi = 3.14\n    vol = (4/3)*pi*(r**3)\n    return vol\n\n#Test the function\nprint(sphere_volume(5))\n\n# Output: 523.6049\n\n# Write a function to find surface area of a sphere\ndef sphere_surface(r):\n    pi = 3.14\n    surf = 4*pi*(r**2)\n    return surf\n\n#Test the function\nprint(sphere_surface(5))\n\n# Output: 314.1593\n\n# Write a function to find the square of a number\ndef square(num):\n    return num**2\n\n#Test the function",
        "generated_testcode": "assert sector_area(3, 2*3.14) == 12.56\n",
        "test": "assert sector_area(4,45)==6.285714285714286\nassert sector_area(9,45)==31.82142857142857\nassert sector_area(9,360)==None",
        "canonical_solution": "def sector_area(r,a):\r\n    pi=22/7\r\n    if a >= 360:\r\n        return None\r\n    sectorarea = (pi*r**2) * (a/360)\r\n    return sectorarea"
    },
    {
        "number": 747,
        "prompt": "Write a function to find the longest common subsequence for the given three string sequence.\ndef lcs_of_three(X, Y, Z, m, n, o): \n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    dp = [[[0] * (o + 1) for _ in range(n + 1)] for _ in range(m + 1)] \n\n    for i in range(m + 1): \n        for j in range(n + 1): \n            for k in range(o + 1): \n                if i == 0 or j == 0 or k == 0: \n                    dp[i][j][k] = 0\n                elif X[i - 1] == Y[j - 1] and X[i - 1] == Z[k - 1]: \n                    dp[i][j][k] = dp[i - 1][j - 1][k - 1] + 1\n                else: \n                    dp[i][j][k] = max(dp[i - 1][j][k], dp[i][j - 1][k], dp[i][j][k - 1]) \n\n    return dp[m][n][o] \n\n# Driver code \nX = \"AGGTAB\"\nY = \"GXTXAYB\"\nZ = \"AGGXYZ\"\nm = len(X) \nn = len(Y) \no = len(Z) \nprint(\"Length of the longest common subsequence is \", lcs_of_three(X, Y, m, n, Z, o)) \n\n# This will output: 4 ",
        "generated_testcode": "assert lcs_of_three(\"AGGTAB\", \"GXTXAYB\", \"AGGXAB\", 6, 6, 6) == 4\n",
        "test": "assert lcs_of_three('AGGT12', '12TXAYB', '12XBA', 6, 7, 5) == 2\nassert lcs_of_three('Reels', 'Reelsfor', 'ReelsforReels', 5, 8, 13) == 5 \nassert lcs_of_three('abcd1e2', 'bc12ea', 'bd1ea', 7, 6, 5) == 3",
        "canonical_solution": "def lcs_of_three(X, Y, Z, m, n, o): \r\n\tL = [[[0 for i in range(o+1)] for j in range(n+1)] \r\n\t\tfor k in range(m+1)] \r\n\tfor i in range(m+1): \r\n\t\tfor j in range(n+1): \r\n\t\t\tfor k in range(o+1): \r\n\t\t\t\tif (i == 0 or j == 0 or k == 0): \r\n\t\t\t\t\tL[i][j][k] = 0\r\n\t\t\t\telif (X[i-1] == Y[j-1] and\r\n\t\t\t\t\tX[i-1] == Z[k-1]): \r\n\t\t\t\t\tL[i][j][k] = L[i-1][j-1][k-1] + 1\r\n\t\t\t\telse: \r\n\t\t\t\t\tL[i][j][k] = max(max(L[i-1][j][k], \r\n\t\t\t\t\tL[i][j-1][k]), \r\n\t\t\t\t\t\t\t\t\tL[i][j][k-1]) \r\n\treturn L[m][n][o]"
    },
    {
        "number": 748,
        "prompt": "Write a function to put spaces between words starting with capital letters in a given string by using regex.\ndef capital_words_spaces(str1):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    return re.sub(r'([A-Z])', r' \\1', str1)\n\n#Example usage\nprint(capital_words_spaces(\"PythonIsAwesome\")) ",
        "generated_testcode": "assert capital_words_spaces(\"PythonIsAwesome\") == \"Python Is Awesome\"\n",
        "test": "assert capital_words_spaces(\"Python\") == 'Python'\nassert capital_words_spaces(\"PythonProgrammingExamples\") == 'Python Programming Examples'\nassert capital_words_spaces(\"GetReadyToBeCodingFreak\") == 'Get Ready To Be Coding Freak'",
        "canonical_solution": "import re\r\ndef capital_words_spaces(str1):\r\n  return re.sub(r\"(\\w)([A-Z])\", r\"\\1 \\2\", str1)"
    },
    {
        "number": 749,
        "prompt": "Write a function to sort a given list of strings of numbers numerically.\ndef sort_numeric_strings(nums_str):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": true,
        "answer": "    return sorted(nums_str, key=lambda x: int(x))\n\nprint(sort_numeric_strings(['100', '5', '2', '20', '3', '50']))\n\n# Output: ['2', '3', '100', '20', '50']\n\n# or \n\ndef sort_numeric_strings(nums_str):\n    return sorted(nums_str, key=int)\n\nprint(sort_numeric_strings(['100', '5', '2', '20', '3', '50']))\n\n# Output: ['2', '3', '100', '20', '50'] ",
        "generated_testcode": "assert sort_numeric_strings(['1', '2', '10', '5', '3', '1']) == ['1', '1', '2', '3', '5', '10']\n",
        "test": "assert sort_numeric_strings( ['4','12','45','7','0','100','200','-12','-500'])==[-500, -12, 0, 4, 7, 12, 45, 100, 200]\nassert sort_numeric_strings(['2','3','8','4','7','9','8','2','6','5','1','6','1','2','3','4','6','9','1','2'])==[1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9]\nassert sort_numeric_strings(['1','3','5','7','1', '3','13', '15', '17','5', '7 ','9','1', '11'])==[1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17]",
        "canonical_solution": "def sort_numeric_strings(nums_str):\r\n    result = [int(x) for x in nums_str]\r\n    result.sort()\r\n    return result"
    },
    {
        "number": 750,
        "prompt": "Write a function to add the given tuple to the given list.\ndef add_tuple(test_list, test_tup):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    test_list.append(test_tup)\n    return test_list\n\n# Test the function with the given example\ntest_list = [1, 2, 3, 4, 5, 6, 7]\ntest_tup = (8, 9, 10)\nprint(add_tuple(test_list, test_tup)) # Output: [1, 2, 3, 4, 5, 6, 7, (8, 9, 10)]\n\n# Write a function to remove the given index from the list\ndef remove_index(test_list, index):\n    test_list.pop(index)\n    return test_list\n\n# Test the function with the given example\ntest_list = [1, 2, 3, 4, 5, 6, 7]\nindex = 2\nprint(remove_index(test_list, index)) # Output: [1, 2, 4, 5, 6]\n\n# Write a function to remove the given value from the list\ndef remove_value(test_list, value):\n    test_list.remove(value)\n    return test_list\n\n# Test the function with the given example\ntest_list = [1, 2, 3, 4, 5, 6, 7]\nvalue = 4\nprint(remove_value(test_list, value)) # Output: [1, 2, 3, 5, 6, 7",
        "generated_testcode": "",
        "test": "assert add_tuple([5, 6, 7], (9, 10)) == [5, 6, 7, 9, 10]\nassert add_tuple([6, 7, 8], (10, 11)) == [6, 7, 8, 10, 11]\nassert add_tuple([7, 8, 9], (11, 12)) == [7, 8, 9, 11, 12]",
        "canonical_solution": "def add_tuple(test_list, test_tup):\r\n  test_list += test_tup\r\n  return (test_list) "
    },
    {
        "number": 751,
        "prompt": "Write a function to check if the given array represents min heap or not.\ndef check_min_heap(arr, i):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": true,
        "answer": "    if i == 0:\n        return True\n    if arr[i] > arr[(i - 1) // 2]:\n        return False\n    return check_min_heap(arr, (i - 1) // 2)\n\n\n\ndef min_heap(arr):\n    return check_min_heap(arr, len(arr) - 1)\n\n\n\narr = [4, 10, 3, 5, 1]\nprint(min_heap(arr))\n\narr = [4, 10, 3, 5, 1, 2, 1]\nprint(min_heap(arr))\n\narr = [4, 2, 3, 1, 5]\nprint(min_heap(arr))\n\narr = [1, 2, 3, 4]\nprint(min_heap(arr))\n",
        "generated_testcode": "assert check_min_heap([4, 2, 6, 2, 8, 3, 1, 5], 0) == True\n",
        "test": "assert check_min_heap([1, 2, 3, 4, 5, 6], 0) == True\nassert check_min_heap([2, 3, 4, 5, 10, 15], 0) == True\nassert check_min_heap([2, 10, 4, 5, 3, 15], 0) == False",
        "canonical_solution": "def check_min_heap(arr, i):\r\n    if 2 * i + 2 > len(arr):\r\n        return True\r\n    left_child = (arr[i] <= arr[2 * i + 1]) and check_min_heap(arr, 2 * i + 1)\r\n    right_child = (2 * i + 2 == len(arr)) or (arr[i] <= arr[2 * i + 2] \r\n                                      and check_min_heap(arr, 2 * i + 2))\r\n    return left_child and right_child"
    },
    {
        "number": 752,
        "prompt": "Write a function to find the nth jacobsthal number.\ndef jacobsthal_num(n): \n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": true,
        "answer": "    if n == 0: \n        return 0\n    if n == 1: \n        return 1\n    else: \n        return 2*jacobsthal_num(n-1) + jacobsthal_num(n-2) \n\n# Test the function \nn = 6\nprint(\"The\", n,\"th jacobsthal number is\", jacobsthal_num(n)) ",
        "generated_testcode": "assert jacobsthal_num(0) == 0\n",
        "test": "assert jacobsthal_num(5) == 11\nassert jacobsthal_num(2) == 1\nassert jacobsthal_num(4) == 5",
        "canonical_solution": "def jacobsthal_num(n): \r\n\tdp = [0] * (n + 1) \r\n\tdp[0] = 0\r\n\tdp[1] = 1\r\n\tfor i in range(2, n+1): \r\n\t\tdp[i] = dp[i - 1] + 2 * dp[i - 2] \r\n\treturn dp[n]"
    },
    {
        "number": 753,
        "prompt": "Write a function to find minimum k records from tuple list.\ndef min_k(test_list, K):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    sorted_list = sorted(test_list, key=lambda x: x[1])\n    return sorted_list[:K]\n\n#Example usage\ntest_list = [(1, 5), (2, 3), (3, 2), (4, 6), (5, 1), (6, 4)]\nK = 3\nprint(min_k(test_list, K)) # Output: [(6, 4), (5, 1), (3, 2)]\n\n# Explanation: The function sorts the list based on the second element of tuple and returns the first K elements. The first 3 elements have the minimum second element. ",
        "generated_testcode": "",
        "test": "assert min_k([('Manjeet', 10), ('Akshat', 4), ('Akash', 2), ('Nikhil', 8)], 2) == [('Akash', 2), ('Akshat', 4)]\nassert min_k([('Sanjeev', 11), ('Angat', 5), ('Akash', 3), ('Nepin', 9)], 3) == [('Akash', 3), ('Angat', 5), ('Nepin', 9)]\nassert min_k([('tanmay', 14), ('Amer', 11), ('Ayesha', 9), ('SKD', 16)], 1) == [('Ayesha', 9)]",
        "canonical_solution": "def min_k(test_list, K):\r\n  res = sorted(test_list, key = lambda x: x[1])[:K]\r\n  return (res) "
    },
    {
        "number": 754,
        "prompt": "Write a function to find common index elements from three lists.\ndef extract_index_list(l1, l2, l3):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    index_list = []\n    for i in range(len(l1)):\n        if l1[i] == l2[i] and l1[i] == l3[i]:\n            index_list.append(i)\n    return index_list\n\n# Test case\nl1 = [1,2,3,4,5]\nl2 = [2,4,6,8]\nl3 = [2,4,6,10]\nprint(extract_index_list(l1, l2, l3)) # Output: [1,2]\n\nl1 = [1,2,3,4,5]\nl2 = [2,4,6,8]\nl3 = [2,5,6,10]\nprint(extract_index_list(l1, l2, l3)) # Output: [1]\n\nl1 = [1,2,3,4,5]\nl2 = [6,7,8,9]\nl3 = [10,11,12,13]\nprint(extract_index_list(l1, l2, l3)) # Output: []\n\n\nl1 = [1,2,3,4,5]\nl2 = [2,4,6,8]\nl3 = [2,4,6,10,12]\nprint(extract_index_list(l1, l2, l3)) # Output: [1] ",
        "generated_testcode": "assert extract_index_list([1, 2, 3, 4, 5], [2, 4, 6, 8], [4, 2, 1]) == [1, 2]\n",
        "test": "assert extract_index_list([1, 1, 3, 4, 5, 6, 7],[0, 1, 2, 3, 4, 5, 7],[0, 1, 2, 3, 4, 5, 7])==[1, 7]\nassert extract_index_list([1, 1, 3, 4, 5, 6, 7],[0, 1, 2, 3, 4, 6, 5],[0, 1, 2, 3, 4, 6, 7])==[1, 6]\nassert extract_index_list([1, 1, 3, 4, 6, 5, 6],[0, 1, 2, 3, 4, 5, 7],[0, 1, 2, 3, 4, 5, 7])==[1, 5]",
        "canonical_solution": "def extract_index_list(l1, l2, l3):\r\n    result = []\r\n    for m, n, o in zip(l1, l2, l3):\r\n        if (m == n == o):\r\n            result.append(m)\r\n    return result"
    },
    {
        "number": 755,
        "prompt": "Write a function to find the second smallest number in a list.\ndef second_smallest(numbers):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": true,
        "answer": "    if len(numbers) < 2:\n        return None\n    smallest = second_smallest = float('inf')\n    for num in numbers:\n        if num < smallest:\n            second_smallest = smallest\n            smallest = num\n        elif num < second_smallest and num != smallest:\n            second_smallest = num\n    return second_smallest\n\n# Test cases\nprint(second_smallest([1, 2, 3, 4, 5])) # Output: 2\nprint(second_smallest([5, 3, 1])) # Output: 1\nprint(second_smallest([1, 1, 1, 1])) # Output: None\nprint(second_smallest([])) # Output: None\nprint(second_smallest([3])) # Output: None ",
        "generated_testcode": "assert second_smallest([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 2\n",
        "test": "assert second_smallest([1, 2, -8, -2, 0, -2])==-2\nassert second_smallest([1, 1, -0.5, 0, 2, -2, -2])==-0.5\nassert second_smallest([2,2])==None",
        "canonical_solution": "def second_smallest(numbers):\r\n  if (len(numbers)<2):\r\n    return\r\n  if ((len(numbers)==2)  and (numbers[0] == numbers[1]) ):\r\n    return\r\n  dup_items = set()\r\n  uniq_items = []\r\n  for x in numbers:\r\n    if x not in dup_items:\r\n      uniq_items.append(x)\r\n      dup_items.add(x)\r\n  uniq_items.sort()    \r\n  return  uniq_items[1] "
    },
    {
        "number": 756,
        "prompt": "Write a function that matches a string that has an a followed by zero or one 'b'.\ndef text_match_zero_one(text):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    pattern = r'a(b)?'\n    return bool(re.match(pattern, text))\n\n# Test cases\nprint(text_match_zero_one('a')) # True\nprint(text_match_zero_one('ab')) # True\nprint(text_match_zero_one('b')) # False\nprint(text_match_zero_one('ba')) # False\n\n# Match a followed by zero or more 'b'\ndef text_match_zero_more(text):\n    pattern = r'a(b)*'\n    return bool(re.match(pattern, text))\n\n# Test cases\nprint(text_match_zero_more('a')) # True\nprint(text_match_zero_more('ab')) # True\nprint(text_match_zero_more('abbbb')) # True\nprint(text_match_zero_more('b')) # False\nprint(text_match_zero_more('ba')) # False\n\n# Match a followed by one or more 'b'\ndef text_match_one_more(text):\n    pattern = r'a(b)+'\n    return bool(re.match(pattern, text))\n\n# Test cases\nprint(text_match_one_more('a')) # False\nprint(text_match_one_more('ab')) # True\nprint(text_match_one_more('abbbb')) # True\nprint(text_match_one_more('b')) # False\nprint(text_match_one_more('ba')) # False",
        "generated_testcode": "assert text_match_zero_one(\"a\") == True\n",
        "test": "assert text_match_zero_one(\"ac\")==('Found a match!')\nassert text_match_zero_one(\"dc\")==('Not matched!')\nassert text_match_zero_one(\"abbbba\")==('Found a match!')",
        "canonical_solution": "import re\r\ndef text_match_zero_one(text):\r\n        patterns = 'ab?'\r\n        if re.search(patterns,  text):\r\n                return 'Found a match!'\r\n        else:\r\n                return('Not matched!')"
    },
    {
        "number": 757,
        "prompt": "Write a function to count the pairs of reverse strings in the given string list.\ndef count_reverse_pairs(test_list):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": true,
        "answer": "    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j][::-1]:\n                count += 1\n    return count\n\n\n# Example usage:\ntest_list = [\"race\", \"world\", \"drome\", \"level\", \"hello\", \"python\"]\nprint(count_reverse_pairs(test_list))  # Output: 2 (\"level\" and \"python\" are the reverse of each other) ",
        "generated_testcode": "assert count_reverse_pairs(['abc', 'cba', 'bac', 'cab', 'bca']) == 2\n",
        "test": "assert count_reverse_pairs([\"julia\", \"best\", \"tseb\", \"for\", \"ailuj\"])== '2'\nassert count_reverse_pairs([\"geeks\", \"best\", \"for\", \"skeeg\"]) == '1'\nassert count_reverse_pairs([\"makes\", \"best\", \"sekam\", \"for\", \"rof\"]) == '2' ",
        "canonical_solution": "def count_reverse_pairs(test_list):\r\n  res = sum([1 for idx in range(0, len(test_list)) for idxn in range(idx, len( \r\n\ttest_list)) if test_list[idxn] == str(''.join(list(reversed(test_list[idx]))))]) \r\n  return str(res)"
    },
    {
        "number": 758,
        "prompt": "Write a function to count number of unique lists within a list.\ndef unique_sublists(list1):\n",
        "checkpoint": "13B",
        "pass": 5,
        "correct": true,
        "answer": "    # Function to count number of unique lists within a list\n    list_dict = {}\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)+1):\n            sublist = tuple(list1[i:j])\n            if sublist in list_dict:\n                list_dict[sublist] += 1\n            else:\n                list_dict[sublist] = 1\n    return len(list_dict)\n\n# Test case\nlist1 = [1, 2, 2, 3, 4, 4]\nprint(unique_sublists(list1))  # Output: 4\n\n# Time complexity: O(n^2)\n# Space complexity: O(n)",
        "generated_testcode": "",
        "test": "assert unique_sublists([[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]] )=={(1, 3): 2, (5, 7): 2, (13, 15, 17): 1, (9, 11): 1}\nassert unique_sublists([['green', 'orange'], ['black'], ['green', 'orange'], ['white']])=={('green', 'orange'): 2, ('black',): 1, ('white',): 1}\nassert unique_sublists([[10, 20, 30, 40], [60, 70, 50, 50], [90, 100, 200]])=={(10, 20, 30, 40): 1, (60, 70, 50, 50): 1, (90, 100, 200): 1}",
        "canonical_solution": "def unique_sublists(list1):\r\n    result ={}\r\n    for l in  list1: \r\n        result.setdefault(tuple(l), list()).append(1) \r\n    for a, b in result.items(): \r\n        result[a] = sum(b)\r\n    return result"
    },
    {
        "number": 759,
        "prompt": "Write a function to check a decimal with a precision of 2.\ndef is_decimal(num):\n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    if isinstance(num, float):\n        num = str(num)\n        decimal_position = num.find(\".\")\n        if decimal_position == -1:\n            return False\n        else:\n            if len(num[decimal_position + 1:]) == 2:\n                return True\n            else:\n                return False\n    else:\n        return False\n\n# Test cases\nprint(is_decimal(1.23))  # True\nprint(is_decimal(1.234))  # False\nprint(is_decimal(1.2))  # True\nprint(is_decimal(123))  # False\nprint(is_decimal(\"1.23\"))  # False\nprint(is_decimal(3))  # False\nprint(is_decimal(3.14))  # True\nprint(is_decimal(\"3.14\"))  # True\nprint(is_decimal(3.145))  # False\nprint(is_decimal(\"3.145\"))  # False\nprint(is_decimal(\"hello\"))  # False\n\n# Output:\n# True\n# False\n# True\n# False\n# False\n# True\n# False\n# True\n# False\n# False\n# False ",
        "generated_testcode": "assert is_decimal(3.14) == True\n",
        "test": "assert is_decimal('123.11')==True\nassert is_decimal('e666.86')==False\nassert is_decimal('3.124587')==False",
        "canonical_solution": "def is_decimal(num):\r\n    import re\r\n    dnumre = re.compile(r\"\"\"^[0-9]+(\\.[0-9]{1,2})?$\"\"\")\r\n    result = dnumre.search(num)\r\n    return bool(result)"
    },
    {
        "number": 760,
        "prompt": "Write a python function to check whether an array contains only one distinct element or not.\ndef unique_Element(arr,n):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    if len(arr) == 1:\n        return True\n    for i in range(n):\n        for j in range(i+1,n):\n            if arr[i] == arr[j]:\n                return False\n    return True\n    \n# Example usage:\narr = [1,2,3,4,5,6,7]\nn = len(arr)\nif unique_Element(arr, n):\n    print(\"Array contains only one distinct element\")\nelse:\n    print(\"Array contains more than one distinct element\")\n\narr = [1,1,1,1,1,1]\nn = len(arr)\nif unique_Element(arr, n):\n    print(\"Array contains only one distinct element\")\nelse:\n    print(\"Array contains more than one distinct element\") ",
        "generated_testcode": "assert unique_Element([1,2,3,4,5,6],5) == False\n",
        "test": "assert unique_Element([1,1,1],3) == 'YES'\nassert unique_Element([1,2,1,2],4) == 'NO'\nassert unique_Element([1,2,3,4,5],5) == 'NO'",
        "canonical_solution": "def unique_Element(arr,n):\r\n    s = set(arr)\r\n    if (len(s) == 1):\r\n        return ('YES')\r\n    else:\r\n        return ('NO')"
    },
    {
        "number": 761,
        "prompt": "Write a function to caluclate arc length of an angle.\ndef arc_length(d,a):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    import math\n    return round(d*math.acos(math.cos(a),5) , 5)\n\nd = float(input(\"Enter the radius of circle: \"))\na = float(input(\"Enter the angle in radians: \"): \nprint(\"Arc length =\",arc_length(d,a)) ",
        "generated_testcode": "assert arc_length(1, 90) == 0.5\n",
        "test": "assert arc_length(9,45)==3.5357142857142856\nassert arc_length(9,480)==None\nassert arc_length(5,270)==11.785714285714285",
        "canonical_solution": "def arc_length(d,a):\r\n    pi=22/7\r\n    if a >= 360:\r\n        return None\r\n    arclength = (pi*d) * (a/360)\r\n    return arclength"
    },
    {
        "number": 762,
        "prompt": "Write a function to check whether the given month number contains 30 days or not.\ndef check_monthnumber_number(monthnum3):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    if monthnum3 in [4, 6, 9, 11]:\n        return False\n    elif monthnum3 == 2:\n        return True\n    else:\n        return True\n\n# print(check_monthnumber_number(2))\n\ndef find_leap_year(year):\n    if year % 4 == 0:\n        if year % 100 == 0:\n            if year % 400 == 0:\n                return True\n            else:\n                return False\n        else:\n            return True\n    else:\n        return False\n\n# print(find_leap_year(20000))\n\ndef days_in_month(monthnum, year):\n    if monthnum == 2:\n        if find_leap_year(year):\n            return 29\n        else:\n            return 28\n    elif check_monthnumber_number(monthnum):\n        return 30\n    else:\n        return 31\n\n# print(days_in_month(2, 20000))\n\n# main function\ndef is_valid_date(day, month, year):\n    if day <= 0 or day > days_in_month(month, year):\n        return False\n    else:\n        return True\n\ndef main():\n    day, month, year = map(int, input(\"Enter date (dd/mm/yyyy): \").split('/'))\n    day = int(day)\n    month =",
        "generated_testcode": "assert check_monthnumber_number(1) == True\n",
        "test": "assert check_monthnumber_number(6)==True\nassert check_monthnumber_number(2)==False\nassert check_monthnumber_number(12)==False",
        "canonical_solution": "def check_monthnumber_number(monthnum3):\r\n  if(monthnum3==4 or monthnum3==6 or monthnum3==9 or monthnum3==11):\r\n    return True\r\n  else:\r\n    return False"
    },
    {
        "number": 763,
        "prompt": "Write a python function to find the minimum difference between any two elements in a given array.\ndef find_Min_Diff(arr,n): \n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    arr.sort()\n    min_diff = abs(arr[1] - arr[0])\n    for i in range(1, n): \n        if (abs(arr[i] - arr[i-1]) < min_diff): \n            min_diff = abs(arr[i] - arr[i-1]) \n    return min_diff \n\n# Test the function \narr = [12, 3, 7, 2, 5, 19, 11] \nn = len(arr) \nprint(\"Minimum difference is:\", find_Min_Diff(arr, n)) ",
        "generated_testcode": "assert find_Min_Diff([1, 3, 5, 12, 15, 19, 26], 5) == 2\n",
        "test": "assert find_Min_Diff((1,5,3,19,18,25),6) == 1\nassert find_Min_Diff((4,3,2,6),4) == 1\nassert find_Min_Diff((30,5,20,9),4) == 4",
        "canonical_solution": "def find_Min_Diff(arr,n): \r\n    arr = sorted(arr) \r\n    diff = 10**20 \r\n    for i in range(n-1): \r\n        if arr[i+1] - arr[i] < diff: \r\n            diff = arr[i+1] - arr[i]  \r\n    return diff "
    },
    {
        "number": 764,
        "prompt": "Write a python function to count numeric values in a given string.\ndef number_ctr(str):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    count = 0\n    for char in str:\n        if char.isnumeric():\n            count += 1\n    return count\n\n# Test the function\nprint(number_ctr(\"hello123world 456\"))  # Output: 5\nprint(number_ctr(\"hello world\"))  # Output: 0\nprint(number_ctr(\"12345\"))  # Output: 4\nprint(number_ctr(\"12a345b67\"))  # Output: 6\nprint(number_ctr(\"\"))  # Output: 0\nprint(number_ctr(\"1 2 3 4 5\"))  # Output: 4\nprint(number_ctr(\"1 2 3 4 5.0\"))  # Output: 5 ",
        "generated_testcode": "assert number_ctr(\"Hello 123 World 456\") == 2\n",
        "test": "assert number_ctr('program2bedone') == 1\nassert number_ctr('3wonders') ==1\nassert number_ctr('123') == 3",
        "canonical_solution": "def number_ctr(str):\r\n      number_ctr= 0\r\n      for i in range(len(str)):\r\n          if str[i] >= '0' and str[i] <= '9': number_ctr += 1     \r\n      return  number_ctr"
    },
    {
        "number": 765,
        "prompt": "Write a function to find nth polite number.\ndef is_polite(n): \n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    if n <= 0: \n        return False\n    for i in range(2, int(n**0.5)+1): \n        if n%i == 0: \n            return False\n    return True \n\ndef nth_polite(n): \n    count = 0\n    num = 1\n    while(count < n): \n        num += 1\n        if is_polite(num): \n            count += 1\n    return num ",
        "generated_testcode": "assert is_polite(1) == True\n",
        "test": "assert is_polite(7) == 11\nassert is_polite(4) == 7\nassert is_polite(9) == 13",
        "canonical_solution": "import math \r\ndef is_polite(n): \r\n\tn = n + 1\r\n\treturn (int)(n+(math.log((n + math.log(n, 2)), 2))) "
    },
    {
        "number": 766,
        "prompt": "Write a function to iterate over all pairs of consecutive items in a given list.\ndef pair_wise(l1):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    for i in range(len(l1)-1):\n        yield (l1[i], l1[i+1])\n\n#example usage\nfor a,b in pair_wise([1,2,3,4,5,6]):\n    print a,b\n\n#Output:\n1 2\n2 3\n3 4\n4 5\n5 6\n\n#Using list comprehension\n[(a,b) for a,b in pair_wise([1,2,3,4,5,6])]\n[(1, 2), (2, 3), (3, 4), (4, 5), (5, 6)]\n\\end{code}\n\nAnswer: Here's a generator expression version of the code:\n\n\\begin{code}\ndef pairwise(lst):\n    return ((lst[i], lst[i+1]) for i in range(len(lst)-1))\n\\end{code}\n\nThis creates a generator object that yields all the consecutive pairs of elements in the input list.  The generator expression is equivalent to the `pair_wise` function in the other answer.\n\nExample usage:\n\n\\begin{code}\n>>> list(pairwise([1,2,3,4,5,6]))\n[(1, 2), (2, 3), (3, 4), (4, 5), (5, 6)]\n\\end{code}\n\nComment: Awesome! Thanks for the generator expression version.\n\nAnswer: As an alternative to",
        "generated_testcode": "assert pair_wise([1, 2, 3, 4, 5]) == [(1, 2), (2, 3), (3, 4), (4, 5)]\n",
        "test": "assert pair_wise([1,1,2,3,3,4,4,5])==[(1, 1), (1, 2), (2, 3), (3, 3), (3, 4), (4, 4), (4, 5)]\nassert pair_wise([1,5,7,9,10])==[(1, 5), (5, 7), (7, 9), (9, 10)]\nassert pair_wise([1,2,3,4,5,6,7,8,9,10])==[(1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 7), (7, 8), (8, 9), (9, 10)]",
        "canonical_solution": "def pair_wise(l1):\r\n    temp = []\r\n    for i in range(len(l1) - 1):\r\n        current_element, next_element = l1[i], l1[i + 1]\r\n        x = (current_element, next_element)\r\n        temp.append(x)\r\n    return temp"
    },
    {
        "number": 767,
        "prompt": "Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019.\ndef get_Pairs_Count(arr,n,sum):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    count = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count\n\n# Test the function with an example\narr = [1, 5, 3, 2, 4, 6, 7]\nn = len(arr)\nsum = 6\nprint(\"Pairs with sum 6:\", get_Pairs_Count(arr,n,sum))\n\n# Output: Pairs with sum 6: 2\n\n# Time Complexity: O(n^2)\n# Space Complexity: O(1)\n\n# Another approach with hash table (using dictionary)\ndef get_Pairs_Count(arr,n,sum):\n    count = 0\n    hash_map = {}\n    for i in range(n):\n        complement = sum - arr[i]\n        if complement in hash_map:\n            count += hash_map[complement]\n        hash_map[arr[i]] = hash_map.get(arr[i],0) + 1\n    return count\n\n# Test the function with an example\narr = [1, 5, 3, 2, 4, 6, 7]\nn = len(arr)\nsum = 6\nprint(\"Pairs with sum 6:\", get_Pairs_Count(arr,n,sum))\n\n# Output: Pairs with sum 6: 2",
        "generated_testcode": "assert get_Pairs_Count([1,2,3,4,5,6,7,8,9],7) == 2\n",
        "test": "assert get_Pairs_Count([1,1,1,1],4,2) == 6\nassert get_Pairs_Count([1,5,7,-1,5],5,6) == 3\nassert get_Pairs_Count([1,-2,3],3,1) == 1",
        "canonical_solution": "def get_Pairs_Count(arr,n,sum):\r\n    count = 0  \r\n    for i in range(0,n):\r\n        for j in range(i + 1,n):\r\n            if arr[i] + arr[j] == sum:\r\n                count += 1\r\n    return count"
    },
    {
        "number": 768,
        "prompt": "Write a python function to check for odd parity of a given number.\ndef check_Odd_Parity(x): \n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    if x & 1:\n        return True\n    else:\n        return False\n\n# Test the function\nprint(check_Odd_Parity(1)) # Output: True\nprint(check_Odd_Parity(0)) # Output: False\nprint(check_Odd_Parity(2)) # Output: False\n\n# Write a python function to check if a number is a perfect square\ndef isPerfectSquare(n):\n    i = 1\n    while i*i <= n:\n        if i*i == n:\n            return True\n        i += 1\n    return False\n\n# Test the function\nprint(isPerfectSquare(16)) # Output: True\nprint(isPerfectSquare(15)) # Output: False\nprint(isPerfectSquare(25)) # Output: True\n\n# Write a python function to check if a number is a prime number\ndef is_prime(n):\n    if n <= 1:\n        return False\n    elif n <= 3:\n        return True\n    elif n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i*i <= n:\n        if n % i == 0 or n % (i+2) == 0:\n            return False\n        i += 6\n    return True\n\n# Test the function\nprint(is_prime(7)) # Output: True\nprint(is_prime(10)) # Output: False\nprint",
        "generated_testcode": "assert check_Odd_Parity(5) == True\n",
        "test": "assert check_Odd_Parity(13) == True\nassert check_Odd_Parity(21) == True\nassert check_Odd_Parity(18) == False",
        "canonical_solution": "def check_Odd_Parity(x): \r\n    parity = 0\r\n    while (x != 0): \r\n        x = x & (x - 1) \r\n        parity += 1\r\n    if (parity % 2 == 1): \r\n        return True\r\n    else: \r\n        return False"
    },
    {
        "number": 769,
        "prompt": "Write a python function to get the difference between two lists.\ndef Diff(li1,li2):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": true,
        "answer": "    return (list(set(li1) - set(li2)))\n\n# sample input\nli1 = [1,2,3,4,5,6,7,8,9]\nli2 = [5,6,7,8,9,10,11,12]\nprint(Diff(li1,li2)) \n# Output: [1, 2, 3, 4] ",
        "generated_testcode": "assert Diff([1,2,3,4],[2,3,4,5]) == [1]\n",
        "test": "assert (Diff([10, 15, 20, 25, 30, 35, 40], [25, 40, 35])) == [10, 20, 30, 15]\nassert (Diff([1,2,3,4,5], [6,7,1])) == [2,3,4,5,6,7]\nassert (Diff([1,2,3], [6,7,1])) == [2,3,6,7]",
        "canonical_solution": "def Diff(li1,li2):\r\n    return (list(list(set(li1)-set(li2)) + list(set(li2)-set(li1))))\r\n "
    },
    {
        "number": 770,
        "prompt": "Write a python function to find the sum of fourth power of first n odd natural numbers.\ndef odd_Num_Sum(n) : \n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    sum = 0\n    count = 0\n    num = 1\n    while count < n : \n        sum += num ** 4\n        num += 2\n        count += 1\n    return sum\n\n# Take input from user\nn = int(input(\"Enter a number: \")) \n\n# Call the function and print the result \nprint(\"The sum of fourth power of first\", n, \"odd natural numbers is\", odd_Num_Sum(n)) ",
        "generated_testcode": "assert odd_Num_Sum(5) == 225\n",
        "test": "assert odd_Num_Sum(2) == 82\nassert odd_Num_Sum(3) == 707\nassert odd_Num_Sum(4) == 3108",
        "canonical_solution": "def odd_Num_Sum(n) : \r\n    j = 0\r\n    sm = 0\r\n    for i in range(1,n + 1) : \r\n        j = (2*i-1) \r\n        sm = sm + (j*j*j*j)   \r\n    return sm "
    },
    {
        "number": 771,
        "prompt": "Write a function to check if the given expression is balanced or not.\ndef check_expression(exp):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": true,
        "answer": "    stack = []\n    for i in exp:\n        if i == '(' or i == '[' or i == '{':\n            stack.append(i)\n        elif i == ')' or i == ']' or i == '}':\n            if not stack:\n                return False\n            elif i == ')' and stack[-1] == '(':\n                stack.pop()\n            elif i == ']' and stack[-1] == '[':\n                stack.pop()\n            elif i == '}' and stack[-1] == '{':\n                stack.pop()\n        else:\n            continue\n    return len(stack) == 0\n\n# Example usage\nexp = \"{[()]}\"\nprint(check_expression(exp))  # Output: True\nexp = \"({[]})\"\nprint(check_expression(exp))  # Output: True\nexp = \"({[)\"\nprint(check_expression(exp))  # Output: False\nexp = \"({)}\"\nprint(check_expression(exp))  # Output: False ",
        "generated_testcode": "assert check_expression(\"()\") == True\n",
        "test": "assert check_expression(\"{()}[{}]\") == True\nassert check_expression(\"{()}[{]\") == False\nassert check_expression(\"{()}[{}][]({})\") == True",
        "canonical_solution": "from collections import deque\r\ndef check_expression(exp):\r\n    if len(exp) & 1:\r\n        return False\r\n    stack = deque()\r\n    for ch in exp:\r\n        if ch == '(' or ch == '{' or ch == '[':\r\n            stack.append(ch)\r\n        if ch == ')' or ch == '}' or ch == ']':\r\n            if not stack:\r\n                return False\r\n            top = stack.pop()\r\n            if (top == '(' and ch != ')') or (top == '{' and ch != '}' or (top == '[' and ch != ']')):\r\n                return False\r\n    return not stack"
    },
    {
        "number": 772,
        "prompt": "Write a function to remove all the words with k length in the given string.\ndef remove_length(test_str, K):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    words = test_str.split()\n    result = []\n    for word in words:\n        if len(word) != K:\n            result.append(word)\n    return ' '.join(result)\n\n# Example usage:\nprint(remove_length(\"This is a sample string to test the function\", 3)) # Expected output: \"This sample to test the\"\nprint(remove_length(\"Remove all the words with length 4 in this sentence\", 4)) # Expected output: \"Remove the in this sentence\"\nprint(remove_length(\"This is a string with no words of length 3\", 3)) # Expected output: \"This is a string with no words of length\" ",
        "generated_testcode": "assert remove_length(\"Hello world\", 2) == \"Hd\"\n",
        "test": "assert remove_length('The person is most value tet', 3) == 'person is most value'\nassert remove_length('If you told me about this ok', 4) == 'If you me about ok'\nassert remove_length('Forces of darkeness is come into the play', 4) == 'Forces of darkeness is the'",
        "canonical_solution": "def remove_length(test_str, K):\r\n  temp = test_str.split()\r\n  res = [ele for ele in temp if len(ele) != K]\r\n  res = ' '.join(res)\r\n  return (res) "
    },
    {
        "number": 773,
        "prompt": "Write a function to find the occurrence and position of the substrings within a string.\ndef occurance_substring(text,pattern):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    position=[]\n    count=0\n    for i in range(len(text)-len(pattern)+1):\n        if text[i:i+len(pattern)]==pattern:\n            count+=1\n            position.append(i)\n    return count,position\n\ntext=input(\"Enter the text: \")\npattern=input(\"Enter the pattern: \")\ncount,position=occurance_substring(text,pattern)\nprint(\"The pattern occurs\",count,\"times in the text and its position is\",position)\n\n#Example:\n#Input:\n#Enter the text: abcdabcdabcdaabcabcdab\n#Enter the pattern: abcd\n#Output: The pattern occurs 3 times in the text and its position is [0, 5, 10] ",
        "generated_testcode": "assert occurance_substring(\"hello world\", \"l\") == (2, [2, 3] )\n",
        "test": "assert occurance_substring('python programming, python language','python')==('python', 0, 6)\nassert occurance_substring('python programming,programming language','programming')==('programming', 7, 18)\nassert occurance_substring('python programming,programming language','language')==('language', 31, 39)",
        "canonical_solution": "import re\r\ndef occurance_substring(text,pattern):\r\n for match in re.finditer(pattern, text):\r\n    s = match.start()\r\n    e = match.end()\r\n    return (text[s:e], s, e)"
    },
    {
        "number": 774,
        "prompt": "Write a function to check if the string is a valid email address or not using regex.\ndef check_email(email): \n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    regex = r'\\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Z|a-z]{2,}\\b'\n    if(re.fullmatch(regex, email)):\n        return True\n    else:\n        return False\n\n# Test cases\nprint(check_email(\"example@example.com\")) # Output: True\nprint(check_email(\"example@exam@ple.com\")) # Output: False\nprint(check_email(\"example.com\")) # Output: False\nprint(check_email(\"example@.com\")) # Output: False\nprint(check_email(\"example@examp-le.co.in\")) # Output: True\nprint(check_email(\"example@example.c\")) # Output: False\nprint(check_email(\"example@exa.mple.com\")) # Output: True\nprint(check_email(\"example@example.com.au\")) # Output: True\nprint(check_email(\"example@1example.com\")) # Output: False\nprint(check_email(\"example@examp_le.com\")) # Output: False ",
        "generated_testcode": "assert check_email(\"example@example.com\") == True\n",
        "test": "assert check_email(\"ankitrai326@gmail.com\") == 'Valid Email'\nassert check_email(\"my.ownsite@ourearth.org\") == 'Valid Email'\nassert check_email(\"ankitaoie326.com\") == 'Invalid Email'",
        "canonical_solution": "import re \r\nregex = '^[a-z0-9]+[\\._]?[a-z0-9]+[@]\\w+[.]\\w{2,3}$'\r\ndef check_email(email): \r\n\tif(re.search(regex,email)): \r\n\t\treturn (\"Valid Email\") \r\n\telse: \r\n\t\treturn (\"Invalid Email\") "
    },
    {
        "number": 775,
        "prompt": "Write a python function to check whether every odd index contains odd numbers of a given list.\ndef odd_position(nums):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    for i in range(0, len(nums), 2):\n        if nums[i] % 2 == 0:\n            return False\n    return True\n\n# Test cases\nprint(odd_position([1, 3, 5, 7, 9])) # Output: True\nprint(odd_position([1, 2, 3, 4, 7, 9])) # Output: False\nprint(odd_position([5, 5, 7, 9, 11])) # Output: True\nprint(odd_position([])) # Output: True\nprint(odd_position([1, 2, 3, 4])) # Output: False\nprint(odd_position([1, 2, 3, 5, 7])) # Output: False\nprint(odd_position([1, 3, 5, 7, 9, 11, 13, 15])) # Output: True\nprint(odd_position([1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21])) # Output: True\nprint(odd_position([1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 20])) # Output: False\n\n# Alternate solution\ndef odd_position(nums):\n    for i in range(1, len(nums), 2):",
        "generated_testcode": "assert odd_position([1, 2, 3, 4, 5, 6, 7, 8, 9]) == True\n",
        "test": "assert odd_position([2,1,4,3,6,7,6,3]) == True\nassert odd_position([4,1,2]) == True\nassert odd_position([1,2,3]) == False",
        "canonical_solution": "def odd_position(nums):\r\n\treturn all(nums[i]%2==i%2 for i in range(len(nums)))"
    },
    {
        "number": 776,
        "prompt": "Write a function to count those characters which have vowels as their neighbors in the given string.\ndef count_vowels(test_str):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    count = 0\n    for i in range(len(test_str)):\n        if test_str[i] in 'aeiouAEIOU' and i > 0 and test_str[i - 1] in 'aeiouAEIOU':\n            count += 1\n    return count\n\n# Test the function with sample inputs\nprint(count_vowels('HelloWorld'))  # Output: 3\nprint(count_vowels('Python'))  # Output: 1\nprint(count_vowels('Programming'))  # Output: 3\nprint(count_vowels('aaa'))  # Output: 3\nprint(count_vowels('abcde'))  # Output: 0\nprint(count_vowels('AEIOU'))  # Output: 5\nprint(count_vowels('aeiou'))  # Output: 5\nprint(count_vowels('aEiOu'))  # Output: 4 ",
        "generated_testcode": "assert count_vowels(\"hello world\") == 3\n",
        "test": "assert count_vowels('bestinstareels') == 7\nassert count_vowels('partofthejourneyistheend') == 12\nassert count_vowels('amazonprime') == 5",
        "canonical_solution": "def count_vowels(test_str):\r\n  res = 0\r\n  vow_list = ['a', 'e', 'i', 'o', 'u']\r\n  for idx in range(1, len(test_str) - 1):\r\n    if test_str[idx] not in vow_list and (test_str[idx - 1] in vow_list or test_str[idx + 1] in vow_list):\r\n      res += 1\r\n  if test_str[0] not in vow_list and test_str[1] in vow_list:\r\n    res += 1\r\n  if test_str[-1] not in vow_list and test_str[-2] in vow_list:\r\n    res += 1\r\n  return (res) "
    },
    {
        "number": 777,
        "prompt": "Write a python function to find the sum of non-repeated elements in a given array.\ndef find_Sum(arr,n): \n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    sum = 0\n    # Traversing the array\n    for i in range(0, n): \n        # If current element is not repeated then add it to the sum\n        if arr.count(arr[i]) == 1: \n            sum += arr[i] \n    return sum\n\n# Testing the function\narr = [1, 2, 2, 3, 4, 5, 6, 6] \nn = len(arr)\nprint(\"Sum of non-repeated elements is:\", find_Sum(arr, n)) ",
        "generated_testcode": "assert find_Sum([1,2,3,2,4,5,3,1], 6) == 9\n",
        "test": "assert find_Sum([1,2,3,1,1,4,5,6],8) == 21\nassert find_Sum([1,10,9,4,2,10,10,45,4],9) == 71\nassert find_Sum([12,10,9,45,2,10,10,45,10],9) == 78",
        "canonical_solution": "def find_Sum(arr,n): \r\n    arr.sort() \r\n    sum = arr[0] \r\n    for i in range(0,n-1): \r\n        if (arr[i] != arr[i+1]): \r\n            sum = sum + arr[i+1]   \r\n    return sum"
    },
    {
        "number": 778,
        "prompt": "Write a function to pack consecutive duplicates of a given list elements into sublists.\ndef pack_consecutive_duplicates(list1):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    res = []\n    temp = []\n    for i in range(len(list1)):\n        if i == 0 or list1[i] == list1[i-1]:\n            temp.append(list1[i])\n        else:\n            res.append(temp)\n            temp = [list1[i]]\n    res.append(temp)\n    return res\n\n# Test the function with the given example\nprint(pack_consecutive_duplicates([1, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 6, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 9, 9, 9, 9, 9, 9, 9, 9])) ",
        "generated_testcode": "",
        "test": "assert pack_consecutive_duplicates([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4])==[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]\nassert pack_consecutive_duplicates([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10])==[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]\nassert pack_consecutive_duplicates(['a', 'a', 'b', 'c', 'd', 'd'])==[['a', 'a'], ['b'], ['c'], ['d', 'd']]",
        "canonical_solution": "from itertools import groupby\r\ndef pack_consecutive_duplicates(list1):\r\n    return [list(group) for key, group in groupby(list1)]"
    },
    {
        "number": 779,
        "prompt": "Write a function to count the number of unique lists within a list.\ndef unique_sublists(list1):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    unique_sublist = []\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)+1):\n            if list1[i:j] not in unique_sublist:\n                unique_sublist.append(list1[i:j])\n    return len(unique_sublist)\n\n# Test the function\nprint(unique_sublists([1,2,3,4,5])) # Output: 10\nprint(unique_sublists([1,1,2,3,3,4,4,5])) # Output: 6\nprint(unique_sublists([])) # Output: 0\nprint(unique_sublists([1])) # Output: 1\nprint(unique_sublists([1,2,3,3,4,4,5,5,6,6])) # Output: 5\nprint(unique_sublists([1,2,3,4,4,5,5,6,6])) # Output: 7\nprint(unique_sublists([1,2,3,4,4,5,5,6,6,7,7])) # Output: 8\nprint(unique_sublists([1,2,3,3,4,4,5,6,6,7,7])) # Output: 7\nprint(unique_sublists([1,2,3,4,4,5,5,6,6,7,7,8,8])) # Output: 10",
        "generated_testcode": "",
        "test": "assert unique_sublists([[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]])=={(1, 3): 2, (5, 7): 2, (13, 15, 17): 1, (9, 11): 1}\nassert unique_sublists([['green', 'orange'], ['black'], ['green', 'orange'], ['white']])=={('green', 'orange'): 2, ('black',): 1, ('white',): 1}\nassert unique_sublists([[1, 2], [3, 4], [4, 5], [6, 7]])=={(1, 2): 1, (3, 4): 1, (4, 5): 1, (6, 7): 1}",
        "canonical_solution": "def unique_sublists(list1):\r\n    result ={}\r\n    for l in list1: \r\n        result.setdefault(tuple(l), list()).append(1) \r\n    for a, b in result.items(): \r\n        result[a] = sum(b)\r\n    return result"
    },
    {
        "number": 780,
        "prompt": "Write a function to find the combinations of sums with tuples in the given tuple list.\ndef find_combinations(test_list):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    result = []\n    for i in range(len(test_list)):\n        for j in range(i, len(test_list)):\n            result.append(sum(test_list[i:j+1]))\n    return result\n\ntest_list = (1, 2, 3, 4, 5, 6)\nprint(find_combinations(test_list))  # Output: [6, 7, 8, 9, 10, 11, 12, 11, 12, 13, 14, 15]\n\n# Explanation:\n# The function iterates over the list of tuples and calculates the sum of the tuples from index i to index j, where i and j are the indices of the tuple list.\n# The sum is then appended to the result list.\n# The range function has two parameters, the starting and ending index of the tuple list. Here, we are using the starting index as i and the ending index as j+1,\n# so that it includes the last element of the tuple.\n# This gives us the combinations of the sums of all the tuples in the list. \n\n# Test the function with a tuple list (1, 2, 3, 4, 5, 6) and it should return a list of tuples with their respective sums. ",
        "generated_testcode": "",
        "test": "assert find_combinations([(2, 4), (6, 7), (5, 1), (6, 10)]) == [(8, 11), (7, 5), (8, 14), (11, 8), (12, 17), (11, 11)]\nassert find_combinations([(3, 5), (7, 8), (6, 2), (7, 11)]) == [(10, 13), (9, 7), (10, 16), (13, 10), (14, 19), (13, 13)]\nassert find_combinations([(4, 6), (8, 9), (7, 3), (8, 12)]) == [(12, 15), (11, 9), (12, 18), (15, 12), (16, 21), (15, 15)]",
        "canonical_solution": "from itertools import combinations \r\ndef find_combinations(test_list):\r\n  res = [(b1 + a1, b2 + a2) for (a1, a2), (b1, b2) in combinations(test_list, 2)]\r\n  return (res) "
    },
    {
        "number": 781,
        "prompt": "Write a python function to check whether the count of divisors is even or odd.\ndef count_Divisors(n) : \n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    count = 0\n    for i in range(1, n+1) : \n        if (n % i == 0) : \n            count += 1\n    if count % 2 == 0 : \n        return True\n    else : \n        return False\n\n#Test the function\nn = 12\nif count_Divisors(n) : \n    print(n, \"has even number of divisors\")\nelse : \n    print(n, \"has odd number of divisors\") ",
        "generated_testcode": "assert count_Divisors(12) == \"even\"\n",
        "test": "assert count_Divisors(10) == \"Even\"\nassert count_Divisors(100) == \"Odd\"\nassert count_Divisors(125) == \"Even\"",
        "canonical_solution": "import math \r\ndef count_Divisors(n) : \r\n    count = 0\r\n    for i in range(1, (int)(math.sqrt(n)) + 2) : \r\n        if (n % i == 0) : \r\n            if( n // i == i) : \r\n                count = count + 1\r\n            else : \r\n                count = count + 2\r\n    if (count % 2 == 0) : \r\n        return (\"Even\") \r\n    else : \r\n        return (\"Odd\") "
    },
    {
        "number": 782,
        "prompt": "Write a python function to find the sum of all odd length subarrays.\ndef Odd_Length_Sum(arr):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    if not arr:\n        return 0\n    n = len(arr)\n    res = 0\n    for i in range(n):\n        for j in range(i+2,n+1,2):\n            for k in range(i,j,2):\n                res += arr[k]\n    return res\n\n# Testing the function\narr = [1,2,3,4,5,6,7,8,9]\nprint(Odd_Length_Sum(arr)) # Output: 24\n\narr = [10,20,30,40,50]\nprint(Odd_Length_Sum(arr)) # Output: 60\n\narr = []\nprint(Odd_Length_Sum(arr)) # Output: 0 ",
        "generated_testcode": "assert Odd_Length_Sum([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 16\n",
        "test": "assert Odd_Length_Sum([1,2,4]) == 14\nassert Odd_Length_Sum([1,2,1,2]) == 15\nassert Odd_Length_Sum([1,7]) == 8",
        "canonical_solution": "def Odd_Length_Sum(arr):\r\n    Sum = 0\r\n    l = len(arr)\r\n    for i in range(l):\r\n        Sum += ((((i + 1) *(l - i) + 1) // 2) * arr[i])\r\n    return Sum"
    },
    {
        "number": 783,
        "prompt": "Write a function to convert rgb color to hsv color.\ndef rgb_to_hsv(r, g, b):\n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    r, g, b = r/255.0, g/255.0, b/255.0\n    cmax = max(r, g, b)\n    cmin = min(r, g, b)\n    diff = cmax-cmin\n    if cmax == cmin:\n        hue = 0\n    elif cmax == r:\n        hue = ((g-b)/diff) % 6\n    elif cmax == g:\n        hue = (b-r)/diff + 2\n    else:\n        hue = (r-g)/diff + 4\n    hue = int(hue * 60)\n    if hue < 0:\n        hue += 360\n    if cmax == 0:\n        saturation = 0\n    else:\n        saturation = diff/cmax\n    value = cmax\n    return (hue, saturation, value)\n\n# Test the function\nprint(rgb_to_hsv(255, 0, 0)) # Expected output: (0, 1.0, 1.0)\nprint(rgb_to_hsv(0, 255, 0)) # Expected output: (120, 1.0, 1.0)\nprint(rgb_to_hsv(0, 0, 255)) # Expected output: (240, 1.0, 1.0)",
        "generated_testcode": "assert rgb_to_hsv(255, 0, 0) == (0, 1, 1)\n",
        "test": "assert rgb_to_hsv(255, 255, 255)==(0, 0.0, 100.0)\nassert rgb_to_hsv(0, 215, 0)==(120.0, 100.0, 84.31372549019608)\nassert rgb_to_hsv(10, 215, 110)==(149.26829268292684, 95.34883720930233, 84.31372549019608)",
        "canonical_solution": "def rgb_to_hsv(r, g, b):\r\n    r, g, b = r/255.0, g/255.0, b/255.0\r\n    mx = max(r, g, b)\r\n    mn = min(r, g, b)\r\n    df = mx-mn\r\n    if mx == mn:\r\n        h = 0\r\n    elif mx == r:\r\n        h = (60 * ((g-b)/df) + 360) % 360\r\n    elif mx == g:\r\n        h = (60 * ((b-r)/df) + 120) % 360\r\n    elif mx == b:\r\n        h = (60 * ((r-g)/df) + 240) % 360\r\n    if mx == 0:\r\n        s = 0\r\n    else:\r\n        s = (df/mx)*100\r\n    v = mx*100\r\n    return h, s, v"
    },
    {
        "number": 784,
        "prompt": "Write a function to find the product of first even and odd number of a given list.\ndef mul_even_odd(list1):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    even = []\n    odd = []\n    for i in list1:\n        if i % 2 == 0:\n            even.append(i)\n        else:\n            odd.append(i)\n    product_even = 1\n    product_odd = 1\n    for i in even:\n        product_even *= i\n    for i in odd:\n        product_odd *= i\n    return product_even, product_odd\n\nlist1 = [2, 3, 4, 5, 6, 7, 8, 9, 10]\nprint(mul_even_odd(list1))  # Output: (3840, 945)\nlist2 = [1, 3, 5, 7, 9, 11, 13]\nprint(mul_even_odd(list2))  # Output: (1, 120) ",
        "generated_testcode": "assert mul_even_odd([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 48\n",
        "test": "assert mul_even_odd([1,3,5,7,4,1,6,8])==4\nassert mul_even_odd([1,2,3,4,5,6,7,8,9,10])==2\nassert mul_even_odd([1,5,7,9,10])==10",
        "canonical_solution": "def mul_even_odd(list1):\r\n    first_even = next((el for el in list1 if el%2==0),-1)\r\n    first_odd = next((el for el in list1 if el%2!=0),-1)\r\n    return (first_even*first_odd)"
    },
    {
        "number": 785,
        "prompt": "Write a function to convert tuple string to integer tuple.\ndef tuple_str_int(test_str):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    return tuple(map(int, test_str[1:-1].split(',')))\n\n# Example usage:\n# test_str = \"(1, 2, 3, 4, 5)\"\n# print(tuple_str_int(test_str)) # Output: (1, 2, 3, 4, 5)\n\n# We can call this function to convert the tuples in the given list of strings to integers\ndef tuple_list_int(tuple_list):\n    result = []\n    for s in tuple_list:\n        result.append(tuple_str_int(s))\n    return result\n\n# Example usage:\n# tuple_list = ['(1, 2, 3)', '(4, 5, 6)', '(7, 8, 9)']\n# print(tuple_list_int(tuple_list)) # Output: [(1, 2, 3), (4, 5, 6), (7, 8, 9)]\n\n# Now, we can use the above function to convert the list of tuples in the given list of strings to integers\ntuple_list = ['(1, 2, 3)', '(4, 5, 6)', '(7, 8, 9)']\nresult = tuple_list_int(tuple_list)\n\n# We can find the maximum and minimum values in the list of tuples\nmax_value = max(result)\nmin_value = min(result)\n\n# Print the",
        "generated_testcode": "assert tuple_str_int(\"(1, 2, 3, 4, 5)\") == (1, 2, 3, 4, 5)\n",
        "test": "assert tuple_str_int(\"(7, 8, 9)\") == (7, 8, 9)\nassert tuple_str_int(\"(1, 2, 3)\") == (1, 2, 3)\nassert tuple_str_int(\"(4, 5, 6)\") == (4, 5, 6)",
        "canonical_solution": "def tuple_str_int(test_str):\r\n  res = tuple(int(num) for num in test_str.replace('(', '').replace(')', '').replace('...', '').split(', '))\r\n  return (res) "
    },
    {
        "number": 786,
        "prompt": "Write a function to locate the right insertion point for a specified value in sorted order.\ndef right_insertion(a, x):\n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    left, right = 0, len(a) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if a[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return left\n\ndef binary_insertion_sort(a):\n    for i in range(len(a)):\n        j = i\n        while j > 0 and a[j - 1] > a[j]:\n            a[j - 1], a[j] = a[j], a[j - 1]\n            j -= 1\n\n    for x in a:\n        j = right_insertion(a[:i], x)\n        a.insert(j, x)\n        a.pop()\n\n# Test the function\na = [3, 4, 1, 2, 5, 8, 6, 7]\nbinary_insertion_sort(a)\nprint(a) # Output: [1, 2, 3, 4, 5, 6, 7, 8]\n\n# Time complexity: O(n^2) in the worst case, O(nlogn) in the average case\n# Space complexity: O(1)\n# Note: This implementation modifies the original list. To avoid that, use a copy of the list.\n",
        "generated_testcode": "assert right_insertion([1, 2, 3, 4, 5, 6], 3) == 2\n",
        "test": "assert right_insertion([1,2,4,5],6)==4\nassert right_insertion([1,2,4,5],3)==2\nassert right_insertion([1,2,4,5],7)==4",
        "canonical_solution": "import bisect\r\ndef right_insertion(a, x):\r\n    i = bisect.bisect_right(a, x)\r\n    return i"
    },
    {
        "number": 787,
        "prompt": "Write a function that matches a string that has an a followed by three 'b'.\ndef text_match_three(text):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    return re.search(\"ab{3}\", text)\n\n# Test cases\nprint(text_match_three(\"a\")) # False\nprint(text_match_three(\"abbb\")) # True\nprint(text_match_three(\"abbbb\")) # False\nprint(text_match_three(\"abbbbb\")) # True\nprint(text_match_three(\"abb\")) # False\nprint(text_match_three(\"abc\")) # False\nprint(text_match_three(\"abcbbb\")) # False\nprint(text_match_three(\"abcdefg\")) # False\nprint(text_match_three(\"abcdefgb\")) # False\nprint(text_match_three(\"babbb\")) # False\nprint(text_match_three(\"bbb\")) # False\nprint(text_match_three(\"abbc\")) # True\nprint(text_match_three(\"babc\")) # False\nprint(text_match_three(\"aabbbbbc\")) # False\nprint(text_match_three(\"abbabc\")) # False\nprint(text_match_three(\"abbba\")) # False\nprint(text_match_three(\"abbbbbbbc\")) # False\nprint(text_match_three(\"aabbbbc\")) # False\nprint(text_match_three(\"abbbc\")) # False ",
        "generated_testcode": "assert text_match_three(\"abbb\") == True\n",
        "test": "assert text_match_three(\"ac\")==('Not matched!')\nassert text_match_three(\"dc\")==('Not matched!')\nassert text_match_three(\"abbbba\")==('Found a match!')",
        "canonical_solution": "import re\r\ndef text_match_three(text):\r\n        patterns = 'ab{3}?'\r\n        if re.search(patterns,  text):\r\n                return 'Found a match!'\r\n        else:\r\n                return('Not matched!')"
    },
    {
        "number": 788,
        "prompt": "Write a function to create a new tuple from the given string and list.\ndef new_tuple(test_list, test_str):\n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    # Convert the list to a tuple\n    test_tuple = tuple(test_list)\n    # Convert the string to a tuple\n    test_str_tuple = tuple(test_str)\n    # Create a new tuple by combining both the tuples\n    new_tuple = test_tuple + test_str_tuple\n    return new_tuple\n\n# Test the function with an example\nprint(new_tuple([1, 2, 3, 4], \"hello\"))\n# Should return (1, 2, 3, 4, 'h', 'e', 'l', 'l', 'o')\n\n# Test the function with an empty list and empty string\nprint(new_tuple([], \"\")) # Should return ()\n\n# Test the function with a list containing only one item and a non-empty string\nprint(new_tuple([\"apple\"], \"hi\")) # Should return ('apple', 'h', 'i')\n\n# Test the function with a list containing multiple items and a non-empty string\nprint(new_tuple([\"apple\", \"banana\", \"cherry\"], \"hi there\")) # Should return ('apple', 'banana', 'cherry', 'h', 'i', 't', 'h', 'e', 'r', 'e') ",
        "generated_testcode": "assert new_tuple(['a', 'b', 'c'], 'd') == ('a', 'b', 'c', 'd')\n",
        "test": "assert new_tuple([\"WEB\", \"is\"], \"best\") == ('WEB', 'is', 'best')\nassert new_tuple([\"We\", \"are\"], \"Developers\") == ('We', 'are', 'Developers')\nassert new_tuple([\"Part\", \"is\"], \"Wrong\") == ('Part', 'is', 'Wrong')",
        "canonical_solution": "def new_tuple(test_list, test_str):\r\n  res = tuple(test_list + [test_str])\r\n  return (res) "
    },
    {
        "number": 789,
        "prompt": "Write a function to calculate the perimeter of a regular polygon.\ndef perimeter_polygon(s,l):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    if type(s) != int or type(l) != int:\n        return \"Invalid input\"\n    if s % 2 != 0:\n        return \"Invalid input\"\n    return s*l\n\n# Test the function\nprint(perimeter_polygon(6,4)) # Output: 24\nprint(perimeter_polygon(10,5)) # Output: 30\nprint(perimeter_polygon(8,2)) # Output: 16\nprint(perimeter_polygon(\"a\",3)) # Output: Invalid input\nprint(perimeter_polygon(6,3.5)) # Output: Invalid input\nprint(perimeter_polygon(5,4)) # Output: Invalid input\nprint(perimeter_polygon(2,4)) # Output: Invalid input\nprint(perimeter_polygon(6,\"a\")) # Output: Invalid input ",
        "generated_testcode": "assert perimeter_polygon(10,4) == 40\n",
        "test": "assert perimeter_polygon(4,20)==80\nassert perimeter_polygon(10,15)==150\nassert perimeter_polygon(9,7)==63",
        "canonical_solution": "from math import tan, pi\r\ndef perimeter_polygon(s,l):\r\n  perimeter = s*l\r\n  return perimeter"
    },
    {
        "number": 790,
        "prompt": "Write a python function to check whether every even index contains even numbers of a given list.\ndef even_position(nums):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    for i in range(0, len(nums), 2):\n        if nums[i] % 2 != 0:\n            return False\n    return True\n\nprint(even_position([1, 2, 4, 6, 8, 3, 7, 10])) ",
        "generated_testcode": "assert even_position([1, 2, 3, 4, 5, 6, 7, 8]) == True\n",
        "test": "assert even_position([3,2,1]) == False\nassert even_position([1,2,3]) == False\nassert even_position([2,1,4]) == True",
        "canonical_solution": "def even_position(nums):\r\n\treturn all(nums[i]%2==i%2 for i in range(len(nums)))"
    },
    {
        "number": 791,
        "prompt": "Write a function to remove the nested record from the given tuple.\ndef remove_nested(test_tup):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    result = []\n    for i in test_tup:\n        if type(i) == tuple:\n            for j in i:\n                result.append(j)\n        else:\n            result.append(i)\n    return tuple(result)\n\n# Test the function with the sample input\ntest_tup = (1, 2, (3, 4, 5), (6, (7, 8, 9), 10, (11, 12), 13)\nprint(remove_nested(test_tup))  # Output: (1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13)\n\n# Test the function with multiple nested records\ntest_tup = (1, (2, (3, 4), (5, 6), (7, (8, 9), (10, 11))\nprint(remove_nested(test_tup))  # Output: (1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11) ",
        "generated_testcode": "assert remove_nested((1, (2, 3), 4, (5, 6, (7, 8), 9)) == (1, 4, 5, 6, 7, 8, 9)\n",
        "test": "assert remove_nested((1, 5, 7, (4, 6), 10)) == (1, 5, 7, 10)\nassert remove_nested((2, 6, 8, (5, 7), 11)) == (2, 6, 8, 11)\nassert remove_nested((3, 7, 9, (6, 8), 12)) == (3, 7, 9, 12)",
        "canonical_solution": "def remove_nested(test_tup):\r\n  res = tuple()\r\n  for count, ele in enumerate(test_tup):\r\n    if not isinstance(ele, tuple):\r\n      res = res + (ele, )\r\n  return (res) "
    },
    {
        "number": 792,
        "prompt": "Write a python function to count the number of lists in a given number of lists.\ndef count_list(input_list): \n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    return len(input_list)\n\n# Test cases\nprint(count_list([1, 2, 3]) == 1)  # Output: True\nprint(count_list([1, [2, 3], [4, 5, [6, 7], 8]) == 3)  # Output: True\nprint(count_list([]) == 0)  # Output: True\nprint(count_list(123) == 1)  # Output: False, since 123 is not a list\nprint(count_list(\"Hello\") == 1)  # Output: False, since \"Hello\" is not a list\nprint(count_list([]) == 0)  # Output: True, empty list\nprint(count_list([[1], [2, 3], [], [4, 5], [6, [7], 8]) == 5)  # Output: True\nprint(count_list([1, 2, 3, \"4\", \"hello\", [5, 6, \"world\"], 7]) == 3)  # Output: True, since \"4\" and \"world\" are not counted as lists\nprint(count_list([1, [2, 3], \"hello\", [4, [5, 6, \"world\"], 7]) == 3)  # Output: False, since \"hello\" is not a list \nprint(count_list([1, 2, 3, [4, [5, 6, [7, 8]]) ==",
        "generated_testcode": "assert count_list([1, 2, 3]) == 1\n",
        "test": "assert count_list([[1, 3], [5, 7], [9, 11], [13, 15, 17]]) == 4\nassert count_list([[1,2],[2,3],[4,5]]) == 3\nassert count_list([[1,0],[2,0]]) == 2",
        "canonical_solution": "def count_list(input_list): \r\n    return len(input_list)"
    },
    {
        "number": 793,
        "prompt": "Write a python function to find the last position of an element in a sorted array.\ndef last(arr,x,n):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    i = n - 1\n    while i >= 0:\n        if arr[i] == x:\n            break\n        i -= 1\n    return i\n\n#Example usage:\narr = [1,2,3,3,3,4,5,5,5,5,6,7,7,7,7]\nx = 7\nn = len(arr)\nprint(last(arr,x,n))\n",
        "generated_testcode": "assert last([1,2,3,4,4,5,6,7,7,8],4,7) == 5\n",
        "test": "assert last([1,2,3],1,3) == 0\nassert last([1,1,1,2,3,4],1,6) == 2\nassert last([2,3,2,3,6,8,9],3,8) == 3",
        "canonical_solution": "def last(arr,x,n):\r\n    low = 0\r\n    high = n - 1\r\n    res = -1  \r\n    while (low <= high):\r\n        mid = (low + high) // 2 \r\n        if arr[mid] > x:\r\n            high = mid - 1\r\n        elif arr[mid] < x:\r\n            low = mid + 1\r\n        else:\r\n            res = mid\r\n            low = mid + 1\r\n    return res"
    },
    {
        "number": 794,
        "prompt": "Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\ndef text_starta_endb(text):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    pattern = re.compile(r'a.+b$')\n    match = pattern.search(text)\n    if match:\n        return True\n    else:\n        return False\n\n# Test cases\nprint(text_starta_endb(\"abc\")) # True\nprint(text_starta_endb(\"ab\"))  # False\nprint(text_starta_endb(\"abcdab\")) # True\nprint(text_starta_endb(\"abcd\"))  # False\nprint(text_starta_endb(\"abcab\")) # False\nprint(text_starta_endb(\"aab\"))  # False\nprint(text_starta_endb(\"abbbb\")) # False\nprint(text_starta_endb(\"abcb\"))  # True\nprint(text_starta_endb(\"a1b2c3b\")) # True\nprint(text_starta_endb(\"ab\"))  # False\nprint(text_starta_endb(\"abcdabc\")) # False\nprint(text_starta_endb(\"abcbcde\")) # True\nprint(text_starta_endb(\"abcabc\")) # False\nprint(text_starta_endb(\"abcabcdef\")) # False\nprint(text_starta_endb(\"a\")) # False\nprint(text_starta_endb(\"bcdef\")) # False\nprint(text_starta_endb(\"abc\")) # False\nprint(text_starta_endb(\"acb\")) # False\nprint(text",
        "generated_testcode": "assert text_starta_endb(\"ab\") == True\n",
        "test": "assert text_starta_endb(\"aabbbb\")==('Found a match!')\nassert text_starta_endb(\"aabAbbbc\")==('Not matched!')\nassert text_starta_endb(\"accddbbjjj\")==('Not matched!')",
        "canonical_solution": "import re\r\ndef text_starta_endb(text):\r\n        patterns = 'a.*?b$'\r\n        if re.search(patterns,  text):\r\n                return 'Found a match!'\r\n        else:\r\n                return('Not matched!')"
    },
    {
        "number": 795,
        "prompt": "Write a function to find the n - cheap price items from a given dataset using heap queue algorithm.\ndef cheap_items(items,n):\n",
        "checkpoint": "13B",
        "pass": 7,
        "correct": true,
        "answer": "    import heapq\n    items = [(item[1], item[0]) for item in items]\n    heapq.heapify(items)\n    return [heapq.heappop(items)[1] for _ in range(n)]\n\nitems = [(1,10), (2, 5), (3, 7), (4, 3), (5, 8), (6, 6), (7, 2), (8, 1)]\nn = 3\nprint(cheap_items(items,n)) #[2, 3, 1]\n\n#Explanation:\n#First, we create a list of tuples with the form (price, item) for each item in the dataset.\n#Then, we use heapq.heapify() to convert the list into a heap queue.\n#Finally, we use the heappop() method to pop the n smallest items from the heap and return their corresponding items.\n#The output will be [2, 3, 1] since they are the 3 items with the cheapest prices. ",
        "generated_testcode": "",
        "test": "assert cheap_items([{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}],1)==[{'name': 'Item-1', 'price': 101.1}]\nassert cheap_items([{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}],2)==[{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}]\nassert cheap_items([{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}, {'name': 'Item-3', 'price': 45.09},{'name': 'Item-4', 'price': 22.75}],1)==[{'name': 'Item-4', 'price': 22.75}]",
        "canonical_solution": "import heapq\r\ndef cheap_items(items,n):\r\n  cheap_items = heapq.nsmallest(n, items, key=lambda s: s['price'])\r\n  return cheap_items"
    },
    {
        "number": 796,
        "prompt": "Write function to find the sum of all items in the given dictionary.\ndef return_sum(dict):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": true,
        "answer": "    total_sum = 0\n    for key, value in dict.items():\n        total_sum += value\n    return total_sum\n\n# Test the function with the sample dictionary\nsample_dict = {'a': 1, 'b': 2, 'c': 3}\nprint(return_sum(sample_dict)) # Output: 6\n\n# Test the function with another dictionary\nanother_dict = {'x': 5, 'y': 7, 'z': 10}\nprint(return_sum(another_dict)) # Output: 12 ",
        "generated_testcode": "assert return_sum({'a': 1, 'b': 2, 'c': 3}) == 6\n",
        "test": "assert return_sum({'a': 100, 'b':200, 'c':300}) == 600\nassert return_sum({'a': 25, 'b':18, 'c':45}) == 88\nassert return_sum({'a': 36, 'b':39, 'c':49}) == 124",
        "canonical_solution": "def return_sum(dict):\r\n  sum = 0\r\n  for i in dict.values():\r\n    sum = sum + i\r\n  return sum"
    },
    {
        "number": 797,
        "prompt": "Write a python function to find the sum of all odd natural numbers within the range l and r.\ndef sum_Odd(n): \n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": true,
        "answer": "    sum = 0\n    for i in range(n+1): \n        if(i % 2 != 0): \n            sum += i \n    return sum \n\n# driver code \nl = 1\nr = 10\nprint(\"Sum of odd numbers from\",l,\"to\",r,\"is\",sum_Odd(r)) ",
        "generated_testcode": "assert sum_Odd(10) == 25 # 1 + 3 + 5 + 7 + 9 = 18\n",
        "test": "assert sum_in_Range(2,5) == 8\nassert sum_in_Range(5,7) == 12\nassert sum_in_Range(7,13) == 40",
        "canonical_solution": "def sum_Odd(n): \r\n    terms = (n + 1)//2\r\n    sum1 = terms * terms \r\n    return sum1  \r\ndef sum_in_Range(l,r): \r\n    return sum_Odd(r) - sum_Odd(l - 1)"
    },
    {
        "number": 798,
        "prompt": "Write a python function to find the sum of an array.\ndef _sum(arr):  \n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    # Initialize sum variable to 0  \n    sum = 0  \n    # Traverse through all the elements and add them to sum  \n    for i in range(len(arr)):  \n        sum += arr[i]  \n    return sum  \n  \n# Testing the function with an example array  \narr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]  \nprint(\"The sum of array is: \", _sum(arr)) ",
        "generated_testcode": "assert _sum([1, 2, 3, 4, 5]) == 11\n",
        "test": "assert _sum([1, 2, 3]) == 6\nassert _sum([15, 12, 13, 10]) == 50\nassert _sum([0, 1, 2]) == 3",
        "canonical_solution": "def _sum(arr):  \r\n    sum=0\r\n    for i in arr: \r\n        sum = sum + i      \r\n    return(sum)  "
    },
    {
        "number": 799,
        "prompt": "Write a python function to left rotate the bits of a given number.\ndef left_Rotate(n,d):   \n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    while d>0:   \n        n = n<<1 | n>>4   \n        d = d-1  \n    return n \n\n#test case\nprint(left_Rotate(37,2))   # output: 134\nprint(left_Rotate(37,8))  # output: 1280\nprint(left_Rotate(37,16)) # output: 5242880\nprint(left_Rotate(37,32)) # output: 37 ",
        "generated_testcode": "assert left_Rotate(10,2) == 5\n",
        "test": "assert left_Rotate(16,2) == 64\nassert left_Rotate(10,2) == 40\nassert left_Rotate(99,3) == 792",
        "canonical_solution": "INT_BITS = 32\r\ndef left_Rotate(n,d):   \r\n    return (n << d)|(n >> (INT_BITS - d))  "
    },
    {
        "number": 800,
        "prompt": "Write a function to remove all whitespaces from a string.\ndef remove_all_spaces(text):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    return text.replace(\" \", \"\")\n\nprint(remove_all_spaces(\"Hello world\")) # \"Helloworld\"\nprint(remove_all_spaces(\"Python is awesome\")) # \"Pythonisawesome\"\n\n# Example usage:\ndef remove_all_spaces(text):\n    return \"\".join(text.split())\n\nprint(remove_all_spaces(\"Hello world\")) # \"Helloworld\"\nprint(remove_all_spaces(\"Python is awesome\")) # \"Pythonisawesome\"\n\n# Or, use regex\nimport re\ndef remove_all_spaces(text):\n    return re.sub('\\s+', '', text)\n\nprint(remove_all_spaces(\"Hello world\")) # \"Helloworld\"\nprint(remove_all_spaces(\"Python is awesome\")) # \"Pythonisawesome\" ",
        "generated_testcode": "assert remove_all_spaces(\"Hello World\") == \"HelloWorld\"\n",
        "test": "assert remove_all_spaces('python  program')==('pythonprogram')\nassert remove_all_spaces('python   programming    language')==('pythonprogramminglanguage')\nassert remove_all_spaces('python                     program')==('pythonprogram')",
        "canonical_solution": "import re\r\ndef remove_all_spaces(text):\r\n return (re.sub(r'\\s+', '',text))"
    },
    {
        "number": 801,
        "prompt": "Write a python function to count the number of equal numbers from three given integers.\ndef test_three_equal(x,y,z):\n",
        "checkpoint": "13B",
        "pass": 5,
        "correct": true,
        "answer": "    count = 0\n    if x == y:\n        count += 1\n    if y == z:\n        count += 1\n    if x == z:\n        count += 1\n    return count\n\n#Example usage:\nprint(test_three_equal(5,5,5)) # Output: 2\nprint(test_three_equal(1,2,3)) # Output: 0\nprint(test_three_equal(1,1,1)) # Output: 2\nprint(test_three_equal(1,1,2)) # Output: 1 ",
        "generated_testcode": "assert test_three_equal(1,2,3) == 0\n",
        "test": "assert test_three_equal(1,1,1) == 3\nassert test_three_equal(-1,-2,-3) == 0\nassert test_three_equal(1,2,2) == 2",
        "canonical_solution": "def test_three_equal(x,y,z):\r\n  result= set([x,y,z])\r\n  if len(result)==3:\r\n    return 0\r\n  else:\r\n    return (4-len(result))"
    },
    {
        "number": 802,
        "prompt": "Write a python function to count the number of rotations required to generate a sorted array.\ndef count_Rotation(arr,n):   \n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    for i in range(0,n):\n        if(arr[i]<=arr[i-1]):\n            break\n    for j in range(i,n):\n        if(arr[j]>arr[i-1]):\n            break\n    if(j==n-1):\n        return 0\n    i=j\n    j=n-1\n    while(arr[j]<=arr[i]):\n        j-=1\n    return j\n\narr = [4, 5, 6, 7, 9, 10, 1, 2, 3]\nn = len(arr)\ncount = count_Rotation(arr, n)\nif count==0:\n    print(\"Not a rotated array\")\nelse:\n    print(\"Minimum number of rotation required:\",count)\n\n#Time Complexity : O(n)\n\n#Output: Minimum number of rotation required: 3\n\n#Explanation: In the given array, the minimum number of rotations required is 3, as the array is rotated 3 times. ",
        "generated_testcode": "assert count_Rotation([4, 5, 6, 7, 8, 9, 1, 2, 3], 6) == 4\n",
        "test": "assert count_Rotation([3,2,1],3) == 1\nassert count_Rotation([4,5,1,2,3],5) == 2\nassert count_Rotation([7,8,9,1,2,3],6) == 3",
        "canonical_solution": "def count_Rotation(arr,n):   \r\n    for i in range (1,n): \r\n        if (arr[i] < arr[i - 1]): \r\n            return i  \r\n    return 0"
    },
    {
        "number": 803,
        "prompt": "Write a python function to check whether the given number is a perfect square or not.\ndef is_Perfect_Square(n) :\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    i = 1\n    while i * i <= n :\n        if i * i == n :\n            return True\n        i = i + 1\n    return False\n\n# Testing the function with an example\nn = 36\nif is_Perfect_Square(n) :\n    print(n, \"is a perfect square\")\nelse :\n    print(n, \"is not a perfect square\")\n\nn = 49\nif is_Perfect_Square(n) :\n    print(n, \"is a perfect square\")\nelse :\n    print(n, \"is not a perfect square\")\n\nn = 16\nif is_Perfect_Square(n) :\n    print(n, \"is a perfect square\")\nelse :\n    print(n, \"is not a perfect square\")\n\nn = 100\nif is_Perfect_Square(n) :\n    print(n, \"is a perfect square\")\nelse :\n    print(n, \"is not a perfect square\")\n\n\n# Output\n# 36 is not a perfect square\n# 49 is a perfect square\n# 16 is a perfect square\n# 100 is not a perfect square\n\n# The time complexity of this function is O(sqrt(n)) ",
        "generated_testcode": "assert is_Perfect_Square(16) == True\n",
        "test": "assert is_Perfect_Square(10) == False\nassert is_Perfect_Square(36) == True\nassert is_Perfect_Square(14) == False",
        "canonical_solution": "def is_Perfect_Square(n) :\r\n    i = 1\r\n    while (i * i<= n):\r\n        if ((n % i == 0) and (n / i == i)):\r\n            return True     \r\n        i = i + 1\r\n    return False"
    },
    {
        "number": 804,
        "prompt": "Write a python function to check whether the product of numbers is even or not.\ndef is_Product_Even(arr,n): \n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    # Initialize a variable to store the product of the array elements\n    product = 1\n    for i in range(n): \n        product *= arr[i] \n  \n    # If product is even, return True. Else, return False\n    return (product % 2 == 0) ",
        "generated_testcode": "assert is_Product_Even([2, 3, 4], 3) == True\n",
        "test": "assert is_Product_Even([1,2,3],3) == True\nassert is_Product_Even([1,2,1,4],4) == True\nassert is_Product_Even([1,1],2) == False",
        "canonical_solution": "def is_Product_Even(arr,n): \r\n    for i in range(0,n): \r\n        if ((arr[i] & 1) == 0): \r\n            return True\r\n    return False"
    },
    {
        "number": 805,
        "prompt": "Write a function to find the list in a list of lists whose sum of elements is the highest.\ndef max_sum_list(lists):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    max_sum = 0\n    max_list = []\n    for lst in lists:\n        if sum(lst) > max_sum:\n            max_sum = sum(lst)\n            max_list = lst\n    return max_list\n\n# Test the function\nprint(max_sum_list([[1, 2, 3], [4, 5, 6], [7, 8, 9, 10], [1, 2, 3, 4, 5]]))\nprint(max_sum_list([[1], [2, 3], [4, 5, 6]]))\nprint(max_sum_list([[1, 2], [3, 4, 5, 6], [7, 8, 9]]))\nprint(max_sum_list([[1, 2], [3, 4, 5], [6, 7, 8, 9], [10, 11, 12, 13, 14, 15]]) # Output: [10, 11, 12, 13, 14, 15]\nprint(max_sum_list([]))  # Output: []\nprint(max_sum_list([[]])  # Output: []\n\n# Using the max() function to find the maximum element by sum\ndef max_sum_list(lists):\n    return max(lists, key=sum)\n\n# Test the function\nprint(max_sum",
        "generated_testcode": "assert max_sum_list([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [4, 5, 6]\n",
        "test": "assert max_sum_list([[1,2,3], [4,5,6], [10,11,12], [7,8,9]])==[10, 11, 12] \nassert max_sum_list([[3,2,1], [6,5,4], [12,11,10]])==[12,11,10] \nassert max_sum_list([[2,3,1]])==[2,3,1] ",
        "canonical_solution": "def max_sum_list(lists):\r\n return max(lists, key=sum)"
    },
    {
        "number": 806,
        "prompt": "Write a function to find maximum run of uppercase characters in the given string.\ndef max_run_uppercase(test_str):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    max_run = 0\n    run = 0\n    for i in range(len(test_str)):\n        if test_str[i].isupper():\n            run += 1\n            if i == len(test_str) - 1 or not test_str[i + 1].isupper():\n                max_run = max(max_run, run)\n                run = 0\n        else:\n            run = 0\n    return max_run\n\n# Test the function\nprint(max_run_uppercase(\"HeLLoWoRLd\"))  # Output: 1\nprint(max_run_uppercase(\"PythonProgramming\"))  # Output: 3\nprint(max_run_uppercase(\"HelloWorld\"))  # Output: 0\nprint(max_run_uppercase(\"PYTHON\"))  # Output: 5\nprint(max_run_uppercase(\"ALGORITHM\"))  # Output: 6\nprint(max_run_uppercase(\"a\"))  # Output: 0\nprint(max_run_uppercase(\"\"))  # Output: 0\n\n# Time Complexity : O(n)\n# Space Complexity : O(1)\n\n\n# Example :\n# Input : \"HeLLoWoRLd\"\n# Output : 1 (The longest sequence of uppercase characters is 'L')\n# Explanation : The longest sequence of uppercase characters in the string is 'L' which has a length of 1.\n\n# Input : \"PythonProgramming\"",
        "generated_testcode": "assert max_run_uppercase(\"HelloWorld\") == 1\n",
        "test": "assert max_run_uppercase('GeMKSForGERksISBESt') == 5\nassert max_run_uppercase('PrECIOusMOVemENTSYT') == 6\nassert max_run_uppercase('GooGLEFluTTER') == 4",
        "canonical_solution": "def max_run_uppercase(test_str):\r\n  cnt = 0\r\n  res = 0\r\n  for idx in range(0, len(test_str)):\r\n    if test_str[idx].isupper():\r\n      cnt += 1\r\n    else:\r\n      res = cnt\r\n      cnt = 0\r\n  if test_str[len(test_str) - 1].isupper():\r\n    res = cnt\r\n  return (res)"
    },
    {
        "number": 807,
        "prompt": "Write a python function to find the first odd number in a given list of numbers.\ndef first_odd(nums):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    for num in nums:\n        if num % 2 != 0:\n            return num\n    return None\n\n# Test cases\nprint(first_odd([1, 2, 4, 5, 6, 8, 10])) # Output: 5\nprint(first_odd([2, 4, 6, 8, 10])) # Output: None\nprint(first_odd([2, 3, 4, 6, 8, 10])) # Output: 3\n\n# Alternate solution using list comprehension\ndef first_odd(nums):\n    return next((num for num in nums if num % 2 != 0), None)",
        "generated_testcode": "assert first_odd([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 3\n",
        "test": "assert first_odd([1,3,5]) == 1\nassert first_odd([2,4,1,3]) == 1\nassert first_odd ([8,9,1]) == 9",
        "canonical_solution": "def first_odd(nums):\r\n  first_odd = next((el for el in nums if el%2!=0),-1)\r\n  return first_odd"
    },
    {
        "number": 808,
        "prompt": "Write a function to check if the given tuples contain the k or not.\ndef check_K(test_tup, K):\n",
        "checkpoint": "13B",
        "pass": 5,
        "correct": true,
        "answer": "    if K in test_tup:\n        return True\n    else:\n        return False\n\n\ntest_tup = (1, 2, 3, 4, 5, 6)\nK = 5\nprint(check_K(test_tup, K))  # Output: True\n\ntest_tup = (1, 2, 3, 4, 5, 6, 7)\nK = 8\nprint(check_K(test_tup, K))  # Output: False\n\ntest_tup = (1, 2, 3, 4, 5, 6)\nK = 6\nprint(check_K(test_tup, K))  # Output: True\n\ntest_tup = (1, 2, 3, 4, 5, 6, 7)\nK = 0\nprint(check_K(test_tup, K))  # Output: False\n\ntest_tup = (1, 2, 3, 4, 5, 6, 7)\nK = 1\nprint(check_K(test_tup, K))  # Output: True\n\ntest_tup = ()\nK = 2\nprint(check_K(test_tup, K))  # Output: False ",
        "generated_testcode": "assert check_K((1, 2, 3, 4, 5), 3) == True\n",
        "test": "assert check_K((10, 4, 5, 6, 8), 6) == True\nassert check_K((1, 2, 3, 4, 5, 6), 7) == False\nassert check_K((7, 8, 9, 44, 11, 12), 11) == True",
        "canonical_solution": "def check_K(test_tup, K):\r\n  res = False\r\n  for ele in test_tup:\r\n    if ele == K:\r\n      res = True\r\n      break\r\n  return (res) "
    },
    {
        "number": 809,
        "prompt": "Write a function to check if each element of second tuple is smaller than its corresponding index in first tuple.\ndef check_smaller(test_tup1, test_tup2):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    if len(test_tup1) != len(test_tup2):\n        return \"Tuples have different length\"\n    else:\n        for i in range(len(test_tup1)):\n            if test_tup1[i] <= i:\n                return True\n            else:\n                return False\n\n#Example usage:\ntest_tup1 = (5, 2, 1, 8)\ntest_tup2 = (1, 2, 3, 4)\nprint(check_smaller(test_tup1, test_tup2)) # Output: False\n\ntest_tup3 = (5, 3, 7, 8)\ntest_tup4 = (1, 2, 3, 4)\nprint(check_smaller(test_tup3, test_tup4)) # Output: True\n\n# Time Complexity: O(n)\n# Space Complexity: O(1) ",
        "generated_testcode": "assert check_smaller((1, 2, 3, 4, 5), (0, 1, 2, 3)) == True\n",
        "test": "assert check_smaller((1, 2, 3), (2, 3, 4)) == False\nassert check_smaller((4, 5, 6), (3, 4, 5)) == True\nassert check_smaller((11, 12, 13), (10, 11, 12)) == True",
        "canonical_solution": "def check_smaller(test_tup1, test_tup2):\r\n  res = all(x > y for x, y in zip(test_tup1, test_tup2))\r\n  return (res) "
    },
    {
        "number": 810,
        "prompt": "Write a function to iterate over elements repeating each as many times as its count.\ndef count_variable(a,b,c,d):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    for i in range(a):\n        for j in range(b):\n            for k in range(c):\n                print(d,end=\" \")\n    print()\n\n#Example usage:\ncount_variable(2, 3, 4, \"hello\")\n# output: hello hello hello hello hello\n\ncount_variable(3, 2, 1, \"world\")\n# output: world world\n\ncount_variable(2, 1, 2, \"hi\")\n# output: hi hi hi\n",
        "generated_testcode": "assert count_variable([1,2,3,4,5], 1,2,3) == [1, 1, 1, 2, 2, 2, 3, 3, 3]\n",
        "test": "assert count_variable(4,2,0,-2)==['p', 'p', 'p', 'p', 'q', 'q'] \nassert count_variable(0,1,2,3)==['q', 'r', 'r', 's', 's', 's'] \nassert count_variable(11,15,12,23)==['p', 'p', 'p', 'p', 'p', 'p', 'p', 'p', 'p', 'p', 'p', 'q', 'q', 'q', 'q', 'q', 'q', 'q', 'q', 'q', 'q', 'q', 'q', 'q', 'q', 'q', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's']",
        "canonical_solution": "from collections import Counter\r\ndef count_variable(a,b,c,d):\r\n  c = Counter(p=a, q=b, r=c, s=d)\r\n  return list(c.elements())"
    },
    {
        "number": 811,
        "prompt": "Write a function to check if two lists of tuples are identical or not.\ndef check_identical(test_list1, test_list2):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    if len(test_list1) != len(test_list2):\n        return False\n    for i in range(len(test_list1)):\n        if test_list1[i] != test_list2[i]:\n            return False\n    return True\n\ntest_list1 = [(1, 2), (3, 4), (5, 6)]\ntest_list2 = [(1, 2), (3, 4), (5, 6)]\ntest_list3 = [(1, 2), (3, 4), (5, 7)]\n\nprint(check_identical(test_list1, test_list2)) # True\nprint(check_identical(test_list1, test_list3)) # False\n\n# Output:\n# True\n# False\n\n# Write a function to find the sum of all the elements in a list of tuples.\ndef sum_of_tuples(test_list):\n    sum = 0\n    for i in range(len(test_list)):\n        sum += test_list[i][0] + test_list[i][1]\n    return sum\n\ntest_list = [(1, 2), (3, 4), (5, 6)]\nprint(sum_of_tuples(test_list)) # 12\n\n# Output: 12\n\n# Write a function to count the number of elements in a list of tuples.\ndef count_elements(test_list):\n    count = 0\n",
        "generated_testcode": "assert check_identical([(1, 2, 3), (4, 5, 6)], [(1, 2, 3), (4, 5, 6)]) == True\n",
        "test": "assert check_identical([(10, 4), (2, 5)], [(10, 4), (2, 5)]) == True\nassert check_identical([(1, 2), (3, 7)], [(12, 14), (12, 45)]) == False\nassert check_identical([(2, 14), (12, 25)], [(2, 14), (12, 25)]) == True",
        "canonical_solution": "def check_identical(test_list1, test_list2):\r\n  res = test_list1 == test_list2\r\n  return (res) "
    },
    {
        "number": 812,
        "prompt": "Write a function to abbreviate 'road' as 'rd.' in a given string.\ndef road_rd(street):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    return street.replace('road', 'rd.')\n\n# Test cases\nprint(road_rd('Oak Road')) # should print 'Oak rd.'\nprint(road_rd('Maple Road')) # should print 'Maple rd.'\nprint(road_rd('123 Road Street')) # should print '123 rd. Street'\nprint(road_rd('Roadhouse')) # should print 'Roadhouse'\nprint(road_rd('North Road Avenue')) # should print 'North rd. Avenue'\nprint(road_rd('Elm Road Street')) # should print 'Elm rd. Street'\nprint(road_rd('Road End')) # should print 'Road End' ",
        "generated_testcode": "assert road_rd(\"123 Main Street\") == \"123 Main Rd.\"\n",
        "test": "assert road_rd(\"ravipadu Road\")==('ravipadu Rd.')\nassert road_rd(\"palnadu Road\")==('palnadu Rd.')\nassert road_rd(\"eshwar enclave Road\")==('eshwar enclave Rd.')",
        "canonical_solution": "import re\r\ndef road_rd(street):\r\n  return (re.sub('Road$', 'Rd.', street))"
    },
    {
        "number": 813,
        "prompt": "Write a function to find length of the string.\ndef string_length(str1):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": true,
        "answer": "    return len(str1)\nprint(string_length(\"Hello\"))\n\n# Example usage:\n# Output: 5 ",
        "generated_testcode": "assert string_length(\"Hello World\") == 11\n",
        "test": "assert string_length('python')==6\nassert string_length('program')==7\nassert string_length('language')==8",
        "canonical_solution": "def string_length(str1):\r\n    count = 0\r\n    for char in str1:\r\n        count += 1\r\n    return count"
    },
    {
        "number": 814,
        "prompt": "Write a function to find the area of a rombus.\ndef rombus_area(p,q):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    area = 0.5 * p * q\n    return area\n\n#Test the function with the given dimensions\nprint(rombus_area(5, 10)) # Output: 25.0\n\n# Find the area of a rectangle\ndef rectangle_area(length, width):\n    area = length * width\n    return area\n\n#Test the function with the given dimensions\nprint(rectangle_area(5, 10)) # Output: 50\n\n# Find the area of a square\ndef square_area(side):\n    area = side * side\n    return area\n\n#Test the function with the given dimensions\nprint(square_area(5)) # Output: 25\n\n# Find the area of a circle\ndef circle_area(radius):\n    area = 3.14 * radius ** 2\n    return area\n\n#Test the function with the given dimensions\nprint(circle_area(5)) # Output: 78.5398\n\n# Find the area of a triangle\ndef triangle_area(base, height):\n    area = 0.5 * base * height\n    return area\n\n#Test the function with the given dimensions\nprint(triangle_area(6, 8)) # Output: 24.0\n\n# Find the area of a parallelogram\ndef parallelogram_area(base, height):\n    area = base * height\n    return area\n\n#Test the function with the given dimensions\nprint(parallelogram_area(6, 8",
        "generated_testcode": "assert rombus_area(5, 7) == 25\n",
        "test": "assert rombus_area(10,20)==100\nassert rombus_area(10,5)==25\nassert rombus_area(4,2)==4",
        "canonical_solution": "def rombus_area(p,q):\r\n  area=(p*q)/2\r\n  return area"
    },
    {
        "number": 815,
        "prompt": "Write a function to sort the given array without using any sorting algorithm. the given array consists of only 0, 1, and 2.\ndef sort_by_dnf(arr, n):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    i = 0\n    j = 0\n    k = n-1\n\n    while i <= k:\n        if arr[i] == 0:\n            i += 1\n        elif arr[i] == 1:\n            i += 1\n        else:\n            arr[i], arr[k] = arr[k], arr[i]\n            k -= 1\n\n    return arr\n\n# Testing the function\narr = [0, 1, 2, 0, 1, 2, 1, 0, 2]\nn = len(arr)\nprint(sort_by_dnf(arr, n))\n\n# Output: [0, 0, 0, 1, 1, 1, 2, 2] ",
        "generated_testcode": "",
        "test": "assert sort_by_dnf([1,2,0,1,0,1,2,1,1], 9) == [0, 0, 1, 1, 1, 1, 1, 2, 2]\nassert sort_by_dnf([1,0,0,1,2,1,2,2,1,0], 10) == [0, 0, 0, 1, 1, 1, 1, 2, 2, 2]\nassert sort_by_dnf([2,2,1,0,0,0,1,1,2,1], 10) == [0, 0, 0, 1, 1, 1, 1, 2, 2, 2]",
        "canonical_solution": "def sort_by_dnf(arr, n):\r\n  low=0\r\n  mid=0\r\n  high=n-1\r\n  while mid <= high:\r\n    if arr[mid] == 0:\r\n      arr[low], arr[mid] = arr[mid], arr[low]\r\n      low = low + 1\r\n      mid = mid + 1\r\n    elif arr[mid] == 1:\r\n      mid = mid + 1\r\n    else:\r\n      arr[mid], arr[high] = arr[high], arr[mid]\r\n      high = high - 1\r\n  return arr"
    },
    {
        "number": 816,
        "prompt": "Write a function to clear the values of the given tuples.\ndef clear_tuple(test_tup):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    # create an empty tuple\n    clear_tup = ()\n    # loop through the elements of the tuple and append only the non-empty elements to the new tuple\n    for i in test_tup:\n        if i != \"\":\n            clear_tup += (i,)\n    return clear_tup\n\n\n# Test the function with the given example\ntest_tup = (\"apple\", \"\", \"banana\", \"orange\", \"\", \"kiwi\", \"grape\")\nprint(clear_tuple(test_tup))  # Output: (\"apple\", \"banana\", \"orange\", \"kiwi\", \"grape\")\n\n# Test the function with another example\ntest_tup = (\"\", \"\", \"hello\", \"\", \"world\", \"\", \"!\")\nprint(clear_tuple(test_tup))  # Output: (\"hello\", \"world\", \"!\") ",
        "generated_testcode": "assert clear_tuple((1, 2, 3, 4, 5, 6, 7, 8, 9, 10) == ())\n",
        "test": "assert clear_tuple((1, 5, 3, 6, 8)) == ()\nassert clear_tuple((2, 1, 4 ,5 ,6)) == ()\nassert clear_tuple((3, 2, 5, 6, 8)) == ()",
        "canonical_solution": "def clear_tuple(test_tup):\r\n  temp = list(test_tup)\r\n  temp.clear()\r\n  test_tup = tuple(temp)\r\n  return (test_tup) "
    },
    {
        "number": 817,
        "prompt": "Write a function to find numbers divisible by m or n from a list of numbers using lambda function.\ndef div_of_nums(nums,m,n):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    return list(filter(lambda x: x % m == 0 or x % n == 0, nums))\n\n# Test the function\nprint(div_of_nums([1,2,3,4,5,6,7,8,9,10,12,15,18],2,3)) ",
        "generated_testcode": "",
        "test": "assert div_of_nums([19, 65, 57, 39, 152, 639, 121, 44, 90, 190],19,13)==[19, 65, 57, 39, 152, 190]\nassert div_of_nums([1, 2, 3, 5, 7, 8, 10],2,5)==[2, 5, 8, 10]\nassert div_of_nums([10,15,14,13,18,12,20],10,5)==[10, 15, 20]",
        "canonical_solution": "def div_of_nums(nums,m,n):\r\n result = list(filter(lambda x: (x % m == 0 or x % n == 0), nums)) \r\n return result"
    },
    {
        "number": 818,
        "prompt": "Write a python function to count lower case letters in a given string.\ndef lower_ctr(str):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    count = 0\n    for i in str:\n        if i.islower():\n            count += 1\n    return count\n\n#Test the function\nprint(lower_ctr(\"Hello World\")) #Output: 10\nprint(lower_ctr(\"Python\")) #Output: 6\nprint(lower_ctr(\"HelloPython\")) #Output: 6\nprint(lower_ctr(\"HELLO PYTHON\")) #Output: 0 ",
        "generated_testcode": "assert lower_ctr(\"Hello World\") == 10\n",
        "test": "assert lower_ctr('abc') == 3\nassert lower_ctr('string') == 6\nassert lower_ctr('Python') == 5",
        "canonical_solution": "def lower_ctr(str):\r\n      lower_ctr= 0\r\n      for i in range(len(str)):\r\n          if str[i] >= 'a' and str[i] <= 'z': lower_ctr += 1     \r\n      return  lower_ctr"
    },
    {
        "number": 819,
        "prompt": "Write a function to count the frequency of consecutive duplicate elements in a given list of numbers.\ndef count_duplic(lists):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    if len(lists) == 0:\n        return 0\n    count = 1\n    freq = 1\n    for i in range(1,len(lists)):\n        if lists[i] == lists[i-1]:\n            count += 1\n        else:\n            if count > freq:\n                freq = count\n            count = 1\n    if count > freq:\n        freq = count\n    return freq\n\n# Testing the function\nprint(count_duplic([1,2,2,2,3,3,3,3,3,4,5,5,5,6,7,7,7,7,7,7,8,8,8,8,8,9,10,10,10])) # Output: 3 (Since 7 and 8 both have consecutive duplicates 3 times)\nprint(count_duplic([1,2,3,4,5,6,7,8,9,10])) # Output: 1 (No consecutive duplicates)\nprint(count_duplic([1,1,1,1,1,1,1,1,1,1,1,1])) # Output: 8 (All elements are the same)\nprint(count_duplic([1,2,3,4,5,6,7,8,9,10])) # Output: 1 (No consecutive duplicates) ",
        "generated_testcode": "",
        "test": "assert count_duplic([1,2,2,2,4,4,4,5,5,5,5])==([1, 2, 4, 5], [1, 3, 3, 4])\nassert count_duplic([2,2,3,1,2,6,7,9])==([2, 3, 1, 2, 6, 7, 9], [2, 1, 1, 1, 1, 1, 1])\nassert count_duplic([2,1,5,6,8,3,4,9,10,11,8,12])==([2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])",
        "canonical_solution": "def count_duplic(lists):\r\n    element = []\r\n    frequency = []\r\n    if not lists:\r\n        return element\r\n    running_count = 1\r\n    for i in range(len(lists)-1):\r\n        if lists[i] == lists[i+1]:\r\n            running_count += 1\r\n        else:\r\n            frequency.append(running_count)\r\n            element.append(lists[i])\r\n            running_count = 1\r\n    frequency.append(running_count)\r\n    element.append(lists[i+1])\r\n    return element,frequency\r\n"
    },
    {
        "number": 820,
        "prompt": "Write a function to check whether the given month number contains 28 days or not.\ndef check_monthnum_number(monthnum1):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": true,
        "answer": "    if monthnum1 == 2:\n        return True\n    elif monthnum1 in [4, 6, 9, 11]:\n        return True\n    else:\n        return False\n\n# Test the function with the following inputs\nprint(check_monthnum_number(2))  # Output: True\nprint(check_monthnum_number(4))  # Output: True\nprint(check_monthnum_number(6))  # Output: True\nprint(check_monthnum_number(11)) # Output: True\nprint(check_monthnum_number(3))  # Output: False\nprint(check_monthnum_number(7))  # Output: False\n\n# Another way to write the function using dictionary\nmonths_days = {2: 28, 4: 30, 6: 30, 9: 30, 11: 30}\ndef check_monthnum_number(monthnum2):\n    return monthnum2 in months_days.keys()\n\nprint(check_monthnum_number(2))  # Output: True\nprint(check_monthnum_number(4))  # Output: True\nprint(check_monthnum_number(6))  # Output: True\nprint(check_monthnum_number(11)) # Output: True\nprint(check_monthnum_number(3))  # Output: False\nprint(check_monthnum_number(7))  # Output: False ",
        "generated_testcode": "assert check_monthnum_number(2) == True\n",
        "test": "assert check_monthnum_number(2)==True\nassert check_monthnum_number(1)==False\nassert check_monthnum_number(3)==False",
        "canonical_solution": "def check_monthnum_number(monthnum1):\r\n  if monthnum1 == 2:\r\n    return True\r\n  else:\r\n    return False"
    },
    {
        "number": 821,
        "prompt": "Write a function to merge two dictionaries into a single expression.\ndef merge_dictionaries(dict1,dict2):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    merged_dict = {}\n    for key in dict1.keys():\n        merged_dict[key] = dict1[key]\n    for key in dict2.keys():\n        merged_dict[key] = dict2[key]\n    return merged_dict\n\n# Test the function with sample dictionaries\ndict1 = {'a': 1, 'b': 2, 'c': 3}\ndict2 = {'d': 4, 'e': 5, 'f': 6}\nprint(merge_dictionaries(dict1,dict2))\n# Output: {'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5, 'f': 6}\n\n# Use the function to merge two dictionaries into a single dictionary\ndict3 = {'g': 7, 'h': 8}\ndict4 = {'i': 9, 'j': 10}\nprint(merge_dictionaries(dict3,dict4))\n# Output: {'g': 7, 'h': 8, 'i': 9, 'j': 10} ",
        "generated_testcode": "assert merge_dictionaries({'a':1,'b':2},{'c':3,'d':4}) == {'a':1,'b':2,'c':3,'d':4}\n",
        "test": "assert merge_dictionaries({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" }, { \"G\": \"Green\", \"W\": \"White\" })=={'B': 'Black', 'R': 'Red', 'P': 'Pink', 'G': 'Green', 'W': 'White'}\nassert merge_dictionaries({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" },{ \"O\": \"Orange\", \"W\": \"White\", \"B\": \"Black\" })=={'O': 'Orange', 'P': 'Pink', 'B': 'Black', 'W': 'White', 'R': 'Red'}\nassert merge_dictionaries({ \"G\": \"Green\", \"W\": \"White\" },{ \"O\": \"Orange\", \"W\": \"White\", \"B\": \"Black\" })=={'W': 'White', 'O': 'Orange', 'G': 'Green', 'B': 'Black'}",
        "canonical_solution": "import collections as ct\r\ndef merge_dictionaries(dict1,dict2):\r\n    merged_dict = dict(ct.ChainMap({}, dict1, dict2))\r\n    return merged_dict"
    },
    {
        "number": 822,
        "prompt": "Write a function to return true if the password is valid.\ndef pass_validity(p):\n",
        "checkpoint": "13B",
        "pass": 7,
        "correct": true,
        "answer": "    # checks if length of password is between 8 and 16\n    if len(p) < 8 or len(p) > 16:\n        return False\n    # checks if password contains at least one lowercase letter, one uppercase letter and one digit\n    if any(c.islower() for c in p) and any(c.isupper() for c in p) and any(c.isdigit() for c in p):\n        return True\n    else:\n        return False\n\n# Test cases\nprint(pass_validity('Aa1!abcdefgh')) # True\nprint(pass_validity('A1!abcdefg')) # False\nprint(pass_validity('aA1!abcdefgh')) # False\nprint(pass_validity('123456789123456789')) # False\nprint(pass_validity('aA!bcdefghijk')) # False\nprint(pass_validity('AaBbCcDd1234')) # True ",
        "generated_testcode": "assert pass_validity(\"Abc12345\") == True\n",
        "test": "assert pass_validity(\"password\")==False\nassert pass_validity(\"Password@10\")==True\nassert pass_validity(\"password@10\")==False",
        "canonical_solution": "import re\r\ndef pass_validity(p):\r\n x = True\r\n while x:  \r\n    if (len(p)<6 or len(p)>12):\r\n        break\r\n    elif not re.search(\"[a-z]\",p):\r\n        break\r\n    elif not re.search(\"[0-9]\",p):\r\n        break\r\n    elif not re.search(\"[A-Z]\",p):\r\n        break\r\n    elif not re.search(\"[$#@]\",p):\r\n        break\r\n    elif re.search(\"\\s\",p):\r\n        break\r\n    else:\r\n        return True\r\n        x=False\r\n        break\r\n\r\n if x:\r\n    return False"
    },
    {
        "number": 823,
        "prompt": "Write a function to check if the given string starts with a substring using regex.\ndef check_substring(string, sample) : \n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    pattern = re.compile(\"^\" + sample)\n    result = re.match(pattern, string)\n    if result : \n        return True\n    else : \n        return False\n\n# Testing the function with sample inputs\nstring = \"Hello World\"\nsample = \"He\"\nprint(check_substring(string, sample)) # Output : True\n\nstring = \"Hello World\"\nsample = \"Wor\"\nprint(check_substring(string, sample)) # Output : False\n\nstring = \"Hello World\"\nsample = \"Hello\"\nprint(check_substring(string, sample)) # Output : True ",
        "generated_testcode": "assert check_substring(\"hello world\", \"hello\") == True\n",
        "test": "assert check_substring(\"dreams for dreams makes life fun\", \"makes\") == 'string doesnt start with the given substring'\nassert check_substring(\"Hi there how are you Hi alex\", \"Hi\") == 'string starts with the given substring'\nassert check_substring(\"Its been a long day\", \"been\") == 'string doesnt start with the given substring'",
        "canonical_solution": "import re \r\ndef check_substring(string, sample) : \r\n  if (sample in string): \r\n      y = \"\\A\" + sample \r\n      x = re.search(y, string) \r\n      if x : \r\n          return (\"string starts with the given substring\") \r\n      else : \r\n          return (\"string doesnt start with the given substring\") \r\n  else : \r\n      return (\"entered string isnt a substring\")"
    },
    {
        "number": 824,
        "prompt": "Write a python function to remove even numbers from a given list.\ndef remove_even(l):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    return [x for x in l if x%2!=0]\n\n#Test the function\nprint(remove_even([1,2,3,4,5,6,7,8,9,10])) # output should be [1,3,5,7]\nprint(remove_even([2,4,6,8,10])) # output should be []\nprint(remove_each_second([1,2,3,4,5,6,7,8,9,10])) # output should be [1,3,5,7,9]\n\n#Write a python function to remove the second element of each tuple in a list of tuples.\ndef remove_each_second(lst):\n    return [t[0] for t in lst]\n\n#Test the function\nprint(remove_each_second([(1,2,3),(4,5,6),(7,8,9),(10,11,12)]) # output should be [1,4,7,10]\nprint(remove_each_second([(1,2),(3,4),(5,6)]) # output should be [1,3,5] ",
        "generated_testcode": "assert remove_even([1, 2, 3, 4, 5, 6, 7, 8, 9]) == [1, 3, 5, 7]\n",
        "test": "assert remove_even([1,3,5,2]) == [1,3,5]\nassert remove_even([5,6,7]) == [5,7]\nassert remove_even([1,2,3,4]) == [1,3]",
        "canonical_solution": "def remove_even(l):\r\n    for i in l:\r\n        if i % 2 == 0:\r\n            l.remove(i)\r\n    return l"
    },
    {
        "number": 825,
        "prompt": "Write a python function to access multiple elements of specified index from a given list.\ndef access_elements(nums, list_index):\n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    result = []\n    for index in list_index:\n        if index < len(nums):\n            result.append(nums[index])\n    return result\n\n# Example usage:\nnums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nlist_index = [0, 2, 4, 6, 8]\nprint(access_elements(nums, list_index)) # Output: [1, 3, 5, 7]\n\n# In this example, the function takes in two arguments:\n# 1. nums: a list of numbers\n# 2. list_index: a list of indices to access from the nums list\n# The function returns a new list with the elements at the specified indices.\n# If an index is greater than or equal to the length of the nums list, it is ignored.\n# For example, if 8 is passed as an index, it will be ignored as it is greater than the length of nums. ",
        "generated_testcode": "assert access_elements([1, 2, 3, 4, 5, 6, 7, 8, 9], [0, 2, 4, 6]) == [1, 3, 5, 7]\n",
        "test": "assert access_elements([2,3,8,4,7,9],[0,3,5]) == [2, 4, 9]\nassert access_elements([1, 2, 3, 4, 5],[1,2]) == [2,3]\nassert access_elements([1,0,2,3],[0,1]) == [1,0]",
        "canonical_solution": "def access_elements(nums, list_index):\r\n    result = [nums[i] for i in list_index]\r\n    return result"
    },
    {
        "number": 826,
        "prompt": "Write a python function to find the type of triangle from the given sides.\ndef check_Type_Of_Triangle(a,b,c): \n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    if a>b+c or b>a+c or c>a+b:\n        return \"Invalid Triangle\"\n    elif a==b==c:\n        return \"Equilateral Triangle\"\n    elif a==b or b==c or a==c:\n        return \"Isosceles Triangle\"\n    else:\n        return \"Scalene Triangle\"\na=int(input(\"Enter side a of triangle: \"))\nb=int(input(\"Enter side b of triangle: \"):\nc=int(input(\"Enter side c of triangle: \")\n\n#calling the function and printing the result\nprint(check_Type_Of_Triangle(a,b,c)) ",
        "generated_testcode": "assert check_Type_Of_Triangle(3,4,5) == \"Isosceles\"\n",
        "test": "assert check_Type_Of_Triangle(1,2,3) == \"Obtuse-angled Triangle\"\nassert check_Type_Of_Triangle(2,2,2) == \"Acute-angled Triangle\"\nassert check_Type_Of_Triangle(1,0,1) == \"Right-angled Triangle\"",
        "canonical_solution": "def check_Type_Of_Triangle(a,b,c): \r\n    sqa = pow(a,2) \r\n    sqb = pow(b,2) \r\n    sqc = pow(c,2) \r\n    if (sqa == sqa + sqb or sqb == sqa + sqc or sqc == sqa + sqb): \r\n        return (\"Right-angled Triangle\") \r\n    elif (sqa > sqc + sqb or sqb > sqa + sqc or sqc > sqa + sqb): \r\n        return (\"Obtuse-angled Triangle\") \r\n    else: \r\n        return (\"Acute-angled Triangle\") "
    },
    {
        "number": 827,
        "prompt": "Write a function to sum a specific column of a list in a given list of lists.\ndef sum_column(list1, C):\n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    \"\"\"\n    Returns the sum of the values in a specific column of a list of lists.\n    \"\"\"\n    total = 0\n    for row in list1:\n        total += row[C]\n    return total\n\n\n# Example usage:\nmy_list = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nprint(sum_column(my_list, 2))  # Output: 18 (sum of the third column)\n\n# Example usage:\nmy_list = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nprint(sum_column(my_list, 0))  # Output: 12 (sum of the first column)\n\n# Example usage:\nmy_list = [[1, 2, 3], [4, 5], [7, 8, 9]]\nprint(sum_column(my_list, 1))  # Output: 11 (sum of the second column)\n\n# Example usage:\nmy_list = []\nprint(sum_column(my_list, 2))  # Output: 0 (empty list) ",
        "generated_testcode": "assert sum_column([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 1) == 15\n",
        "test": "assert sum_column( [[1,2,3,2],[4,5,6,2],[7,8,9,5],],0)==12\nassert sum_column( [[1,2,3,2],[4,5,6,2],[7,8,9,5],],1)==15\nassert sum_column( [[1,2,3,2],[4,5,6,2],[7,8,9,5],],3)==9",
        "canonical_solution": "def sum_column(list1, C):\r\n    result = sum(row[C] for row in list1)\r\n    return result"
    },
    {
        "number": 828,
        "prompt": "Write a function to count alphabets,digits and special charactes in a given string.\ndef count_alpha_dig_spl(string):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    count_alpha=0\n    count_dig=0\n    count_spl=0\n    for i in string:\n        if i.isalpha():\n            count_alpha+=1\n        elif i.isdigit():\n            count_dig+=1\n        else:\n            count_spl+=1\n    return (count_alpha,count_dig,count_spl)\n\n#Example usage\nstring=\"Hello123 world! This is an example.\"\nprint(count_alpha_dig_spl(string))  #output: (7, 3, 5)\nstring=\"1234567890\"\nprint(count_alpha_dig_spl(string))  #output: (0, 8, 0)\nstring=\"!@#$%^&*\"\nprint(count_alpha_dig_spl(string))  #output: (0, 0, 8)\nstring=\"Hello world\"\nprint(count_alpha_dig_spl(string))  #output: (7, 0, 0) ",
        "generated_testcode": "assert count_alpha_dig_spl(\"Hello123\") == (5, 3, 0)\n",
        "test": "assert count_alpha_dig_spl(\"abc!@#123\")==(3,3,3)\nassert count_alpha_dig_spl(\"dgsuy@#$%&1255\")==(5,4,5)\nassert count_alpha_dig_spl(\"fjdsif627348#%$^&\")==(6,6,5)",
        "canonical_solution": "def count_alpha_dig_spl(string):\r\n  alphabets=digits = special = 0\r\n  for i in range(len(string)):\r\n    if(string[i].isalpha()):\r\n        alphabets = alphabets + 1\r\n    elif(string[i].isdigit()):\r\n        digits = digits + 1\r\n    else:\r\n        special = special + 1\r\n  return (alphabets,digits,special)   "
    },
    {
        "number": 829,
        "prompt": "Write a function to find out the second most repeated (or frequent) string in the given sequence.\ndef second_frequent(input): \n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    d = {} \n    for i in input: \n        if i in d: \n            d[i] += 1\n        else: \n            d[i] = 1\n    sorted_d = sorted(d.items(), key = lambda x: x[1], reverse=True)\n    return sorted_d[1][0] ",
        "generated_testcode": "assert second_frequent(\"hello world\") == \"l\"\n",
        "test": "assert second_frequent(['aaa','bbb','ccc','bbb','aaa','aaa']) == 'bbb'\nassert second_frequent(['abc','bcd','abc','bcd','bcd','bcd']) == 'abc'\nassert second_frequent(['cdma','gsm','hspa','gsm','cdma','cdma']) == 'gsm'",
        "canonical_solution": "from collections import Counter \r\n\t\r\ndef second_frequent(input): \r\n\tdict = Counter(input) \r\n\tvalue = sorted(dict.values(), reverse=True)  \r\n\tsecond_large = value[1] \r\n\tfor (key, val) in dict.items(): \r\n\t\tif val == second_large: \r\n\t\t\treturn (key) "
    },
    {
        "number": 830,
        "prompt": "Write a function to round up a number to specific digits.\ndef round_up(a, digits):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    # rounds up to the nearest 10^digits\n    return round(a, -int(math.log10(a)) + digits - 1)\n\nprint(round_up(123456789, 2))  # output: 12349000.0\nprint(round_up(123456789, 3))  # output: 12350000.0\nprint(round_up(123456789, 4))  # output: 12346000.0\nprint(round_up(123456789, 5))  # output: 12345700.0\nprint(round_up(123456789, 6))  # output: 12345680.0\nprint(round_up(123456789, 7))  # output: 12345679.0\n\n# Round down a number to specific digits\ndef round_down(a, digits):\n    # rounds down to the nearest 10^digits\n    return round(a, -int(math.log10(a)) + digits - 1)\n\nprint(round_down(123456789, 2))  # output: 1234000.0\nprint(round_down(",
        "generated_testcode": "assert round_up(12345, 2) == 1200\n",
        "test": "assert round_up(123.01247,0)==124\nassert round_up(123.01247,1)==123.1\nassert round_up(123.01247,2)==123.02",
        "canonical_solution": "import math\r\ndef round_up(a, digits):\r\n    n = 10**-digits\r\n    return round(math.ceil(a / n) * n, digits)"
    },
    {
        "number": 831,
        "prompt": "Write a python function to count equal element pairs from the given array.\ndef count_Pairs(arr,n): \n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    # Create an empty dictionary \n    freq = {} \n    # Traverse through the given array \n    for i in range(n): \n        if arr[i] in freq: \n            freq[arr[i]] += 1\n        else: \n            freq[arr[i]] = 1\n    # Initialize count of equal pairs \n    count = 0\n    # Traverse through the dictionary and check for elements \n    # whose value is greater than 1 \n    for i in freq: \n        if freq[i] > 1: \n            count += (freq[i] * (freq[i] - 1)) // 2\n    return count \n\n# Driver code \nif __name__ == \"__main__\": \n    # Given array \n    arr = [1, 2, 3, 4, 2, 1, 5, 3, 4] \n    n = len(arr) \n    print(count_Pairs(arr, n)) ",
        "generated_testcode": "assert count_Pairs([1,2,3,4,5,6,7,8,9,10], 10) == 0\n",
        "test": "assert count_Pairs([1,1,1,1],4) == 6\nassert count_Pairs([1,5,1],3) == 1\nassert count_Pairs([3,2,1,7,8,9],6) == 0",
        "canonical_solution": "def count_Pairs(arr,n): \r\n    cnt = 0; \r\n    for i in range(n): \r\n        for j in range(i + 1,n): \r\n            if (arr[i] == arr[j]): \r\n                cnt += 1; \r\n    return cnt; "
    },
    {
        "number": 832,
        "prompt": "Write a function to extract the maximum numeric value from a string by using regex.\ndef extract_max(input): \n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": true,
        "answer": "    import re\n    nums = re.findall(r'\\d+', input)\n    nums = [int(i) for i in nums]\n    return max(nums)\n\n# Example usage:\ninput = \"The maximum value is 50, but 75 is even better!\"\nprint(extract_max(input)) # Output: 75 ",
        "generated_testcode": "assert extract_max(\"The maximum value is 99\") == 99\n",
        "test": "assert extract_max('100klh564abc365bg') == 564\nassert extract_max('hello300how546mer231') == 546\nassert extract_max('its233beenalong343journey234') == 343",
        "canonical_solution": "import re \r\ndef extract_max(input): \r\n\tnumbers = re.findall('\\d+',input) \r\n\tnumbers = map(int,numbers) \r\n\treturn max(numbers)"
    },
    {
        "number": 833,
        "prompt": "Write a function to get dictionary keys as a list.\ndef get_key(dict): \n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    return list(dict.keys())\n\n# Test the function with an example dictionary\nmy_dict = {'a': 1, 'b': 2, 'c': 3}\nprint(get_key(my_dict))  # Output: ['a', 'b', 'c'] ",
        "generated_testcode": "assert get_key({'a': 1, 'b': 2, 'c': 3}) == ['a', 'b', 'c']\n",
        "test": "assert get_key({1:'python',2:'java'})==[1,2]\nassert get_key({10:'red',20:'blue',30:'black'})==[10,20,30]\nassert get_key({27:'language',39:'java',44:'little'})==[27,39,44]",
        "canonical_solution": "def get_key(dict): \r\n    list = [] \r\n    for key in dict.keys(): \r\n        list.append(key)           \r\n    return list"
    },
    {
        "number": 834,
        "prompt": "Write a function to generate a square matrix filled with elements from 1 to n raised to the power of 2 in spiral order.\ndef generate_matrix(n):\n",
        "checkpoint": "13B",
        "pass": 5,
        "correct": true,
        "answer": "    if n == 0:\n        return []\n    if n == 1:\n        return [[1] * n]\n    result = [[0] * n for _ in range(n)]\n    top = 0\n    bottom = n - 1\n    left = 0\n    right = n - 1\n    i = j = 0\n    num = 1\n    while top <= bottom and left <= right:\n        for j in range(left, right + 1):\n            result[top][j] = num\n            num += 1\n        top += 1\n        for i in range(top, bottom + 1):\n            result[i][right] = num\n            num += 1\n        right -= 1\n        for j in range(right, left - 1, -1):\n            result[bottom][j] = num\n            num += 1\n        bottom -= 1\n        for i in range(bottom, top - 1, -1):\n            result[i][left] = num\n            num += 1\n        left += 1\n    return result\n\n\n\nn = 4\nprint(generate_matrix(n))\n",
        "generated_testcode": "assert generate_matrix(3) == [[1, 2, 3], [8, 9, 4], [7, 6, 5]]\n",
        "test": "assert generate_matrix(3)==[[1, 2, 3], [8, 9, 4], [7, 6, 5]] \nassert generate_matrix(2)==[[1,2],[4,3]]\nassert generate_matrix(7)==[[1, 2, 3, 4, 5, 6, 7], [24, 25, 26, 27, 28, 29, 8], [23, 40, 41, 42, 43, 30, 9], [22, 39, 48, 49, 44, 31, 10], [21, 38, 47, 46, 45, 32, 11], [20, 37, 36, 35, 34, 33, 12], [19, 18, 17, 16, 15, 14, 13]]",
        "canonical_solution": "def generate_matrix(n):\r\n        if n<=0:\r\n            return [] \r\n        matrix=[row[:] for row in [[0]*n]*n]        \r\n        row_st=0\r\n        row_ed=n-1        \r\n        col_st=0\r\n        col_ed=n-1\r\n        current=1        \r\n        while (True):\r\n            if current>n*n:\r\n                break\r\n            for c in range (col_st, col_ed+1):\r\n                matrix[row_st][c]=current\r\n                current+=1\r\n            row_st+=1\r\n            for r in range (row_st, row_ed+1):\r\n                matrix[r][col_ed]=current\r\n                current+=1\r\n            col_ed-=1\r\n            for c in range (col_ed, col_st-1, -1):\r\n                matrix[row_ed][c]=current\r\n                current+=1\r\n            row_ed-=1\r\n            for r in range (row_ed, row_st-1, -1):\r\n                matrix[r][col_st]=current\r\n                current+=1\r\n            col_st+=1\r\n        return matrix"
    },
    {
        "number": 835,
        "prompt": "Write a python function to find the slope of a line.\ndef slope(x1,y1,x2,y2): \n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    return (y2-y1)/(x2-x1)\n\n# Testing the function \nprint(slope(2,4,6,8)) ",
        "generated_testcode": "assert slope(0,0,3,4) == 1\n",
        "test": "assert slope(4,2,2,5) == -1.5\nassert slope(2,4,4,6) == 1\nassert slope(1,2,4,2) == 0",
        "canonical_solution": "def slope(x1,y1,x2,y2): \r\n    return (float)(y2-y1)/(x2-x1)  "
    },
    {
        "number": 836,
        "prompt": "Write a function to find length of the subarray having maximum sum.\ndef max_sub_array_sum(a,size): \n",
        "checkpoint": "13B",
        "pass": 9,
        "correct": true,
        "answer": "    max_so_far = a[0] \n    curr_max = a[0] \n    for i in range(1, size): \n        curr_max = max(a[i], curr_max + a[i]) \n        max_so_far = max(max_so_far, curr_max) \n    return max_so_far\n\n# Driver Code \na = [-2, -3, 4, -1, -2, 1, 5, -6, 4] \nn = len(a) \nprint(\"Maximum contiguous subarray sum is\", max_sub_array_sum(a, n)) ",
        "generated_testcode": "assert max_sub_array_sum([1,2,3,-2,4,5,-6,7],6) == 13\n",
        "test": "assert max_sub_array_sum([-2, -3, 4, -1, -2, 1, 5, -3],8) == 5\nassert max_sub_array_sum([1, -2, 1, 1, -2, 1],6) == 2\nassert max_sub_array_sum([-1, -2, 3, 4, 5],5) == 3",
        "canonical_solution": "from sys import maxsize \r\ndef max_sub_array_sum(a,size): \r\n\tmax_so_far = -maxsize - 1\r\n\tmax_ending_here = 0\r\n\tstart = 0\r\n\tend = 0\r\n\ts = 0\r\n\tfor i in range(0,size): \r\n\t\tmax_ending_here += a[i] \r\n\t\tif max_so_far < max_ending_here: \r\n\t\t\tmax_so_far = max_ending_here \r\n\t\t\tstart = s \r\n\t\t\tend = i \r\n\t\tif max_ending_here < 0: \r\n\t\t\tmax_ending_here = 0\r\n\t\t\ts = i+1\r\n\treturn (end - start + 1)"
    },
    {
        "number": 837,
        "prompt": "Write a python function to find the cube sum of first n odd natural numbers.\ndef cube_Sum(n): \n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    sum = 0\n    for i in range(1, 2*n, 2): \n        sum += i**3\n    return sum \n\nn = int(input(\"Enter the number of terms: \"))\nprint(\"Sum of cube of first\", n, \"odd natural numbers is\", cube_Sum(n)) \n\n# Example:\n# Enter the number of terms: 5\n# Sum of cube of first 5 odd natural numbers is 2255\n",
        "generated_testcode": "assert cube_Sum(5) == 225\n",
        "test": "assert cube_Sum(2) == 28\nassert cube_Sum(3) == 153\nassert cube_Sum(4) == 496",
        "canonical_solution": "def cube_Sum(n): \r\n    sum = 0   \r\n    for i in range(0,n) : \r\n        sum += (2*i+1)*(2*i+1)*(2*i+1) \r\n    return sum"
    },
    {
        "number": 838,
        "prompt": "Write a python function to find minimum number swaps required to make two binary strings equal.\ndef min_Swaps(s1,s2) :  \n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    n = len(s1)\n    count = 0\n    for i in range(n) : \n        if s1[i] != s2[i] : \n            while s1[i] != s2[i] and i < n-1 : \n                s1[i], s1[i+1] = s1[i+1], s1[i]\n                s2[i], s2[i+1] = s2[i+1], s2[i]\n                i += 1\n                count += 1\n    return count ",
        "generated_testcode": "assert min_Swaps(\"101010\",\"010101\") == 2\n",
        "test": "assert min_Swaps(\"0011\",\"1111\") == 1\nassert min_Swaps(\"00011\",\"01001\") == 2\nassert min_Swaps(\"111\",\"111\") == 0",
        "canonical_solution": "def min_Swaps(s1,s2) :  \r\n    c0 = 0; c1 = 0;  \r\n    for i in range(len(s1)) :  \r\n        if (s1[i] == '0' and s2[i] == '1') : \r\n            c0 += 1;    \r\n        elif (s1[i] == '1' and s2[i] == '0') : \r\n            c1 += 1;  \r\n    result = c0 // 2 + c1 // 2;  \r\n    if (c0 % 2 == 0 and c1 % 2 == 0) : \r\n        return result;  \r\n    elif ((c0 + c1) % 2 == 0) : \r\n        return result + 2;  \r\n    else : \r\n        return -1;  "
    },
    {
        "number": 839,
        "prompt": "Write a function to sort the tuples alphabetically by the first item of each tuple.\ndef sort_tuple(tup): \n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    return sorted(tup, key=lambda x: x[0])\n\n# Example usage:\nprint(sort_tuple([('a', 1), ('b', 2), ('c', 3), ('d', 4)])) ",
        "generated_testcode": "assert sort_tuple([('apple', 2), ('banana', 3), ('orange', 1)]) == [('apple', 2), ('orange', 1), ('banana', 3)]\n",
        "test": "assert sort_tuple([(\"Amana\", 28), (\"Zenat\", 30), (\"Abhishek\", 29),(\"Nikhil\", 21), (\"B\", \"C\")]) == [('Abhishek', 29), ('Amana', 28), ('B', 'C'), ('Nikhil', 21), ('Zenat', 30)]\nassert sort_tuple([(\"aaaa\", 28), (\"aa\", 30), (\"bab\", 29), (\"bb\", 21), (\"csa\", \"C\")]) == [('aa', 30), ('aaaa', 28), ('bab', 29), ('bb', 21), ('csa', 'C')]\nassert sort_tuple([(\"Sarala\", 28), (\"Ayesha\", 30), (\"Suman\", 29),(\"Sai\", 21), (\"G\", \"H\")]) == [('Ayesha', 30), ('G', 'H'), ('Sai', 21), ('Sarala', 28), ('Suman', 29)]",
        "canonical_solution": "def sort_tuple(tup): \r\n\tn = len(tup) \r\n\tfor i in range(n): \r\n\t\tfor j in range(n-i-1): \r\n\t\t\tif tup[j][0] > tup[j + 1][0]: \r\n\t\t\t\ttup[j], tup[j + 1] = tup[j + 1], tup[j] \r\n\treturn tup"
    },
    {
        "number": 840,
        "prompt": "Write a python function to check whether the roots of a quadratic equation are numerically equal but opposite in sign or not.\ndef Check_Solution(a,b,c):  \n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    if (b**2 - 4*a*c) < 0: \n        return \"No real solution\"\n    else: \n        x1 = (-b + (b**2 - 4*a*c)**0.5) / (2*a) \n        x2 = (-b - (b**2 - 4*a*c)**0.5) / (2*a) \n        if x1*x2 < 0: \n            return \"Roots are numerically equal and opposite in sign\"\n        else: \n            return \"Roots are not numerically equal and opposite in sign\"\n\n# Input values of a, b, c\na = float(input(\"Enter the coefficient of x^2: \"))\nb = float(input(\"Enter the coefficient of x: \"))\nc = float(input(\"Enter the constant term: \"))\n\n# Printing the result\nprint(Check_Solution(a,b,c)) ",
        "generated_testcode": "assert Check_Solution(1,2,-3) == True\n",
        "test": "assert Check_Solution(2,0,-1) == \"Yes\"\nassert Check_Solution(1,-5,6) == \"No\"\nassert Check_Solution(2,0,2) == \"Yes\"",
        "canonical_solution": "def Check_Solution(a,b,c):  \r\n    if b == 0:  \r\n        return (\"Yes\")  \r\n    else: \r\n        return (\"No\")  "
    },
    {
        "number": 841,
        "prompt": "Write a function to count the number of inversions in the given array.\ndef get_inv_count(arr, n): \n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    inv_count = 0\n    for i in range(n): \n        for j in range(i + 1, n): \n            if (arr[i] > arr[j]): \n                inv_count += 1\n    return inv_count \n\n# Driver code \narr = [1, 20, 6, 4, 5, 3, 12] \nn = len(arr) \nprint(\"Number of inversions are\", get_inv_count(arr, n)) \n\n# Time Complexity: O(n^2)\n# Space Complexity: O(1)\n\n# To improve the time complexity of this function, we can use merge sort\n\ndef merge_sort(arr):\n    if len(arr) > 1:\n        mid = len(arr) // 2\n        L = arr[:mid]\n        R = arr[mid:]\n        merge_sort(L)\n        merge_sort(R)\n        i = j = k = 0\n        inv_count = 0\n        while i < len(L) and j < len(R):\n            if L[i] <= R[j]:\n                arr[k] = L[i]\n                i += 1\n            else:\n                arr[k] = R[j]\n                j += 1\n                inv_count += len(L) - i\n            k += 1\n        while i < len(L):\n            arr[k] = L[i]\n           ",
        "generated_testcode": "assert get_inv_count([1, 2, 3, 4, 5, 6], 5) == 0\n",
        "test": "assert get_inv_count([1, 20, 6, 4, 5], 5) == 5\nassert get_inv_count([8, 4, 2, 1], 4) == 6\nassert get_inv_count([3, 1, 2], 3) == 2",
        "canonical_solution": "def get_inv_count(arr, n): \r\n\tinv_count = 0\r\n\tfor i in range(n): \r\n\t\tfor j in range(i + 1, n): \r\n\t\t\tif (arr[i] > arr[j]): \r\n\t\t\t\tinv_count += 1\r\n\treturn inv_count "
    },
    {
        "number": 842,
        "prompt": "Write a function to find the number which occurs for odd number of times in the given array.\ndef get_odd_occurence(arr, arr_size):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    res = 0\n    for i in range(32):\n        count = 0\n        mask = 1 << i\n        for j in range(arr_size):\n            if (arr[j] & mask) != 0:\n                count += 1\n        if count % 2 != 0:\n            res |= mask\n    return res\n\n\narr = [12, 1, 12, 3, 12, 2, 12, 1, 3, 3]\nn = len(arr)\nprint(\"Element with odd occurrences: \", get_odd_occurence(arr, n))\n\n# Output: 2 (2 occurs 1 time)\n",
        "generated_testcode": "assert get_odd_occurence([1, 2, 3, 2, 4, 5, 4, 5, 3, 1, 2, 3], 8) == 4\n",
        "test": "assert get_odd_occurence([2, 3, 5, 4, 5, 2, 4, 3, 5, 2, 4, 4, 2], 13) == 5\nassert get_odd_occurence([1, 2, 3, 2, 3, 1, 3], 7) == 3\nassert get_odd_occurence([5, 7, 2, 7, 5, 2, 5], 7) == 5",
        "canonical_solution": "def get_odd_occurence(arr, arr_size):\r\n  for i in range(0, arr_size):\r\n    count = 0\r\n    for j in range(0, arr_size):\r\n      if arr[i] == arr[j]:\r\n        count += 1\r\n    if (count % 2 != 0):\r\n      return arr[i]\r\n  return -1"
    },
    {
        "number": 843,
        "prompt": "Write a function to find the nth super ugly number from a given prime list of size k using heap queue algorithm.\ndef nth_super_ugly_number(n, primes):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    # Create a min heap\n    heap = []\n    heapq.heapify(heap)\n    # Create a dictionary to keep track of already seen values\n    seen = {1: True}\n    # Initialize the heap with the first number from each prime\n    for p in primes:\n        heap.append(p)\n    # Initialize the count of each prime\n    counts = [1] * len(primes)\n    # Initialize the ugly count and result list\n    ugly_count = 1\n    result = [1]\n    # While we have not generated enough ugly numbers\n    while ugly_count < n:\n        # Find the minimum value in the heap\n        min_val = heapq.heappop(heap)\n        # Append it to the result list\n        result.append(min_val)\n        # Increment the count of the prime that generated the minimum value\n        counts[heap.index(min_val)] += 1\n        # Multiply the prime by its count\n        new_val = min_val * primes[heap.index(min_val)]\n        # If we have not seen this value before, add it to the heap\n        if new_val not in seen:\n            heapq.heappush(heap, new_val)\n            seen[new_val] = True\n        # Increment the ugly count\n        ugly_count += 1\n    # Return the nth ugly number\n    return result[-1]\n\n# Test the function\nn = 12\nprimes",
        "generated_testcode": "assert nth_super_ugly_number(12, [2, 7, 13, 19]) == 32\n",
        "test": "assert nth_super_ugly_number(12,[2,7,13,19])==32\nassert nth_super_ugly_number(10,[2,7,13,19])==26\nassert nth_super_ugly_number(100,[2,7,13,19])==5408",
        "canonical_solution": "import heapq\r\ndef nth_super_ugly_number(n, primes):\r\n    uglies = [1]\r\n    def gen(prime):\r\n        for ugly in uglies:\r\n            yield ugly * prime\r\n    merged = heapq.merge(*map(gen, primes))\r\n    while len(uglies) < n:\r\n        ugly = next(merged)\r\n        if ugly != uglies[-1]:\r\n            uglies.append(ugly)\r\n    return uglies[-1]"
    },
    {
        "number": 844,
        "prompt": "Write a python function to find the kth element in an array containing odd elements first and then even elements.\ndef get_Number(n, k): \n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    odd = []\n    even = []\n    for i in range(1, n+1): \n        if i % 2 != 0: \n            odd.append(i) \n        else: \n            even.append(i) \n    return odd[k-1] if k <= len(odd) else even[k-1-(len(odd))] \n\n# Test the function\nn = 7\nk = 3\nprint(get_Number(n, k)) # Output: 3 \n\nn = 10\nk = 5\nprint(get_Number(n, k)) # Output: 5 \n\nn = 11\nk = 5\nprint(get_Number(n, k)) # Output: 6 \n\nn = 12\nk = 4\nprint(get_Number(n, k)) # Output: 4 \n\nn = 15\nk = 7\nprint(get_Number(n, k)) # Output: 13 ",
        "generated_testcode": "assert get_Number(5, 3) == 3\n",
        "test": "assert get_Number(8,5) == 2\nassert get_Number(7,2) == 3\nassert get_Number(5,2) == 3",
        "canonical_solution": "def get_Number(n, k): \r\n    arr = [0] * n; \r\n    i = 0; \r\n    odd = 1; \r\n    while (odd <= n):   \r\n        arr[i] = odd; \r\n        i += 1; \r\n        odd += 2;\r\n    even = 2; \r\n    while (even <= n): \r\n        arr[i] = even; \r\n        i += 1;\r\n        even += 2; \r\n    return arr[k - 1]; "
    },
    {
        "number": 845,
        "prompt": "Write a python function to count the number of digits in factorial of a given number.\ndef find_Digits(n): \n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": true,
        "answer": "    count = 0\n    while n != 0: \n        count += 1\n        n //= 10\n    return count \n\ndef factorial(n): \n    if n == 0 or n == 1: \n        return 1\n    else: \n        return n * factorial(n-1) \n\nnum = 5\nprint(\"Factorial of\", num, \"is\", factorial(num))\nprint(\"Number of digits in the factorial of\", num, \"is\", find_Digits(factorial(num))) ",
        "generated_testcode": "assert find_Digits(5) == 1\n",
        "test": "assert find_Digits(7) == 4\nassert find_Digits(5) == 3\nassert find_Digits(4) == 2",
        "canonical_solution": "import math \r\ndef find_Digits(n): \r\n    if (n < 0): \r\n        return 0;\r\n    if (n <= 1): \r\n        return 1; \r\n    x = ((n * math.log10(n / math.e) + math.log10(2 * math.pi * n) /2.0)); \r\n    return math.floor(x) + 1; "
    },
    {
        "number": 846,
        "prompt": "Write a function to find the minimum number of platforms required for a railway/bus station.\ndef find_platform(arr, dep, n): \n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    # Create a list to store the platform for each train arrival and departure time\n    platform = [0] * 2400\n    # Sort both arrival and departure times\n    arr.sort()\n    dep.sort()\n    # Initialize the count of platforms needed\n    plat_count = 1\n    # Initialize the number of trains processed\n    i = 0\n    # Loop through the trains\n    for j in range(1, n):\n        # If the next arrival time is greater than the next departure time, a platform is needed\n        if arr[j] > dep[i]:\n            plat_count += 1\n        # If not, increment the platform for the current arrival time\n        else:\n            while i < n-1 and arr[j] <= dep[i]:\n                i += 1\n            # If the next departure time is earlier than the next arrival time, decrement the platform count\n            plat_count -= 1\n        # Update the platform for the current arrival time\n        platform[arr[j]] = plat_count\n    # Return the maximum number of platforms needed\n    return max(platform) ",
        "generated_testcode": "",
        "test": "assert find_platform([900, 940, 950, 1100, 1500, 1800],[910, 1200, 1120, 1130, 1900, 2000],6)==3\nassert find_platform([100,200,300,400],[700,800,900,1000],4)==4\nassert find_platform([5,6,7,8],[4,3,2,1],4)==1",
        "canonical_solution": "def find_platform(arr, dep, n): \r\n    arr.sort() \r\n    dep.sort() \r\n    plat_needed = 1\r\n    result = 1\r\n    i = 1\r\n    j = 0\r\n    while (i < n and j < n): \r\n        if (arr[i] <= dep[j]):           \r\n            plat_needed+= 1\r\n            i+= 1\r\n        elif (arr[i] > dep[j]):           \r\n            plat_needed-= 1\r\n            j+= 1\r\n        if (plat_needed > result):  \r\n            result = plat_needed           \r\n    return result"
    },
    {
        "number": 847,
        "prompt": "Write a python function to copy a list from a singleton tuple.\ndef lcopy(xs):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    return list(xs)\n\nprint(lcopy((1,)) # should return [1]\nprint(lcopy(('a',)) # should return ['a']\nprint(lcopy(('a', 'b', 'c') # should return ['a', 'b', 'c']\nprint(lcopy(1) # should raise a TypeError\nprint(lcopy([1, 2, 3]) # should raise a TypeError\n\n# test cases\ntry:\n    print(lcopy(1)) # should raise a TypeError\nexcept TypeError:\n    print(\"Raised TypeError as expected\")\n\ntry:\n    print(lcopy([1, 2, 3]) # should raise a TypeError\nexcept TypeError:\n    print(\"Raised TypeError as expected\")\n\nprint(lcopy(('a',)) # should return ['a']\nprint(lcopy(('a', 'b', 'c')) # should return ['a', 'b', 'c']\nprint(lcopy((1,)) # should return [1] ",
        "generated_testcode": "assert lcopy((1,) == [1])\n",
        "test": "assert lcopy([1, 2, 3]) == [1, 2, 3]\nassert lcopy([4, 8, 2, 10, 15, 18]) == [4, 8, 2, 10, 15, 18]\nassert lcopy([4, 5, 6]) == [4, 5, 6]\n",
        "canonical_solution": "def lcopy(xs):\n  return xs[:]\n"
    },
    {
        "number": 848,
        "prompt": "Write a function to find the area of a trapezium.\ndef area_trapezium(base1,base2,height):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    return (1/2)*(base1+base2)*height\n\n#Test the function with values\nprint(area_trapezium(10,20,30)) # should output 3000.0\nprint(area_trapezium(20,15,25)) # should output 625.0\nprint(area_trapezium(5,10,12)) # should output 300.0\n\n# 2. Write a function to calculate the volume of a sphere.\ndef volume_sphere(radius):\n    return (4/3)*3.14*(radius**3)\n\n#Test the function with values\nprint(volume_sphere(5)) # should output 523.6\nprint(volume_sphere(10)) # should output 41887.46\nprint(volume_sphere(3)) # should output 418.27113\n\n# 3. Write a function to calculate the area of a circle.\ndef area_circle(radius):\n    return 3.14*(radius**2)\n\n#Test the function with values\nprint(area_circle(5)) # should output 78.5\nprint(area_circle(10)) # should output 314.159\nprint(area_circle(3)) # should output 28.274\n\n# 4. Write a function to calculate the volume of a cylinder.\ndef volume_cylinder(radius",
        "generated_testcode": "assert area_trapezium(5, 10, 4) == 20\n",
        "test": "assert area_trapezium(6,9,4)==30\nassert area_trapezium(10,20,30)==450\nassert area_trapezium(15,25,35)==700",
        "canonical_solution": "def area_trapezium(base1,base2,height):\r\n area = 0.5 * (base1 + base2) * height\r\n return area"
    },
    {
        "number": 849,
        "prompt": "Write a python function to find sum of all prime divisors of a given number.\ndef Sum(N): \n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    sum = 0\n    for i in range(2, N): \n        if (N % i == 0): \n            isPrime = 1\n            for j in range(2, int(N**0.5)+1): \n                if (i % j == 0): \n                    isPrime = 0\n                    break\n            if isPrime == 1: \n                sum = sum + i \n    return sum\n\n# Driver Code \nN = 28\nprint(Sum(N)) ",
        "generated_testcode": "assert Sum(10) == 5 # 2 + 5 = 7\n",
        "test": "assert Sum(60) == 10\nassert Sum(39) == 16\nassert Sum(40) == 7",
        "canonical_solution": "def Sum(N): \r\n    SumOfPrimeDivisors = [0]*(N + 1)   \r\n    for i in range(2,N + 1) : \r\n        if (SumOfPrimeDivisors[i] == 0) : \r\n            for j in range(i,N + 1,i) : \r\n                SumOfPrimeDivisors[j] += i           \r\n    return SumOfPrimeDivisors[N] "
    },
    {
        "number": 850,
        "prompt": "Write a function to check if a triangle of positive area is possible with the given angles.\ndef is_triangleexists(a,b,c): \n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    if a + b > c and a + c > b and b + c > a: \n        return True\n    else: \n        return False\n\n# Driver code \na, b, c = 30, 45, 90\nif is_triangleexists(a, b, c): \n    print(\"Triangle is possible\") \nelse: \n    print(\"Triangle is not possible\") \n\n# Output: Triangle is possible ",
        "generated_testcode": "assert is_triangleexists(30, 60, 90) == True\n",
        "test": "assert is_triangleexists(50,60,70)==True\nassert is_triangleexists(90,45,45)==True\nassert is_triangleexists(150,30,70)==False",
        "canonical_solution": "def is_triangleexists(a,b,c): \r\n    if(a != 0 and b != 0 and c != 0 and (a + b + c)== 180): \r\n        if((a + b)>= c or (b + c)>= a or (a + c)>= b): \r\n            return True \r\n        else:\r\n            return False\r\n    else:\r\n        return False"
    },
    {
        "number": 851,
        "prompt": "Write a python function to find sum of inverse of divisors.\ndef Sum_of_Inverse_Divisors(N,Sum): \n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    if N == 1:\n        return 0\n    elif N == 2:\n        return 1\n    else:\n        for i in range(2,N):\n            if N%i == 0:\n                Sum += i\n        return 1/Sum \n\n# Test the function\nN = 12\nSum = 0\nprint(Sum_of_Inverse_Divisors(N,Sum)) ",
        "generated_testcode": "assert Sum_of_Inverse_Divisors(12,0) == 10\n",
        "test": "assert Sum_of_Inverse_Divisors(6,12) == 2\nassert Sum_of_Inverse_Divisors(9,13) == 1.44\nassert Sum_of_Inverse_Divisors(1,4) == 4",
        "canonical_solution": "def Sum_of_Inverse_Divisors(N,Sum): \r\n    ans = float(Sum)*1.0 /float(N);  \r\n    return round(ans,2); "
    },
    {
        "number": 852,
        "prompt": "Write a python function to remove negative numbers from a list.\ndef remove_negs(num_list): \n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    new_list = []\n    for num in num_list:\n        if num >= 0:\n            new_list.append(num)\n    return new_list \n\n# Test the function with an example \nprint(remove_negs([1, 2, -3, 4, -5, 6, -7, 8, 9])) # Output: [1, 2, 4, 6, 8, 9]\n\n# Define a function to double each element in a list \ndef double_list(num_list):\n    new_list = []\n    for num in num_list:\n        new_list.append(num * 2)\n    return new_list \n\n# Test the function with an example \nprint(double_list([1, 2, -3, 4, -5, 6, -7, 8, 9])) # Output: [2, 4, -6, 8, 10, -14, 16, 18]\n\n# Define a function to reverse a string \ndef reverse_string(string):\n    return string[::-1]\n\n# Test the function with an example \nprint(reverse_string(\"hello\")) # Output: \"olleh\"\n\n# Define a function to find the sum of a list of numbers \ndef sum_list(num_list):\n    total = 0\n    for num in num_list:\n        total += num\n    return total \n\n# Test the",
        "generated_testcode": "assert remove_negs([1, 2, -3, 4, -5, 6, -7, 8]) == [1, 2, 4, 6, 8]\n",
        "test": "assert remove_negs([1,-2,3,-4]) == [1,3]\nassert remove_negs([1,2,3,-4]) == [1,2,3]\nassert remove_negs([4,5,-6,7,-8]) == [4,5,7]",
        "canonical_solution": "def remove_negs(num_list): \r\n    for item in num_list: \r\n        if item < 0: \r\n           num_list.remove(item) \r\n    return num_list"
    },
    {
        "number": 853,
        "prompt": "Write a python function to find sum of odd factors of a number.\ndef sum_of_odd_Factors(n): \n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    sum = 0 \n    for i in range(1, n + 1): \n        if n % i == 0: \n            sum += i \n    return sum \n\nn = int(input(\"Enter a number: \"))\nprint(\"Sum of odd factors of\", n, \":\", end=\" \") \nprint(sum_of_odd_Factors(n)) ",
        "generated_testcode": "assert sum_of_odd_Factors(12) == 5 # 3 + 5 = 8\n",
        "test": "assert sum_of_odd_Factors(30) == 24\nassert sum_of_odd_Factors(18) == 13\nassert sum_of_odd_Factors(2) == 1",
        "canonical_solution": "import math\r\ndef sum_of_odd_Factors(n): \r\n    res = 1\r\n    while n % 2 == 0: \r\n        n = n // 2 \r\n    for i in range(3,int(math.sqrt(n) + 1)): \r\n        count = 0\r\n        curr_sum = 1\r\n        curr_term = 1\r\n        while n % i == 0: \r\n            count+=1 \r\n            n = n // i \r\n            curr_term *= i \r\n            curr_sum += curr_term    \r\n        res *= curr_sum  \r\n    if n >= 2: \r\n        res *= (1 + n) \r\n    return res "
    },
    {
        "number": 854,
        "prompt": "Write a function which accepts an arbitrary list and converts it to a heap using heap queue algorithm.\ndef raw_heap(rawheap):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    heap = []\n    for i in range(len(rawheap)):\n        heap.append(rawheap[i])\n    build_heap(heap)\n    return heap\n\ndef build_heap(heap):\n    n = len(heap)\n    start = n // 2 - 1\n    while start >= 0:\n        sift_down(heap, start, n)\n        start -= 1\n\ndef sift_down(heap, start, end):\n    root = start\n    while root * 2 + 1 < end:\n        child = root * 2 + 1\n        swap = root\n        if heap[swap] < heap[child]:\n            swap = child\n        if child + 1 < end and heap[swap] < heap[child + 1]:\n            swap = child + 1\n        if swap != root:\n            heap[root], heap[swap] = heap[swap], heap[root]\n            root = swap\n        else:\n            return\n\n# test case\nrawheap = [9, 6, 5, 7, 3, 2, 8, 10, 1, 4]\nheap = raw_heap(rawheap)\nprint(heap)  # should print [10, 9, 8, 3, 2, 6, 5, 7, 4]\n",
        "generated_testcode": "",
        "test": "assert raw_heap([25, 44, 68, 21, 39, 23, 89])==[21, 25, 23, 44, 39, 68, 89]\nassert raw_heap([25, 35, 22, 85, 14, 65, 75, 25, 58])== [14, 25, 22, 25, 35, 65, 75, 85, 58]\nassert raw_heap([4, 5, 6, 2])==[2, 4, 6, 5]",
        "canonical_solution": "import heapq as hq\r\ndef raw_heap(rawheap):\r\n  hq.heapify(rawheap)\r\n  return rawheap"
    },
    {
        "number": 855,
        "prompt": "Write a python function to check for even parity of a given number.\ndef check_Even_Parity(x): \n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": true,
        "answer": "    return (x & 1) == 0\n  \n# Test the function \nx = 10\nprint(check_Even_Parity(x)) ",
        "generated_testcode": "assert check_Even_Parity(10) == True\n",
        "test": "assert check_Even_Parity(10) == True\nassert check_Even_Parity(11) == False\nassert check_Even_Parity(18) == True",
        "canonical_solution": "def check_Even_Parity(x): \r\n    parity = 0\r\n    while (x != 0): \r\n        x = x & (x - 1) \r\n        parity += 1\r\n    if (parity % 2 == 0): \r\n        return True\r\n    else: \r\n        return False"
    },
    {
        "number": 856,
        "prompt": "Write a python function to find minimum adjacent swaps required to sort binary array.\ndef find_Min_Swaps(arr,n) : \n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    arr_sorted = sorted(arr)\n    visited = {i : -1 for i in range(n)}\n    for i in range(n) :\n        visited[arr[i]] = i\n\n    i = 0\n    count = 0\n    while i < n :\n        if arr[i] != i :\n            temp = arr[i]\n            arr[i], arr[visited[temp]] = arr[visited[temp], temp]\n            visited[temp], visited[arr[i]] = visited[i], visited[temp]\n            count += 1\n        else :\n            i += 1\n    return count\n\n# Test the function\narr = [1, 2, 3, 4, 5, 6, 7]\nn = len(arr)\nprint(\"Minimum number of swaps required to sort the array is\", find_Min_Swaps(arr, n)) \n\narr = [7, 1, 2, 3, 4, 5, 6]\nn = len(arr)\nprint(\"Minimum number of swaps required to sort the array is\", find_Min_Swaps(arr, n)) \n\narr = [4, 3, 5, 2, 1, 6]\nn = len(arr)\nprint(\"Minimum number of swaps required to sort the array is\", find_Min_Swaps(arr, n)) \n\narr = [1, 2, 3, 4, 5, 6",
        "generated_testcode": "assert find_Min_Swaps([1,0,0,1,1,1,0,1,0,0,1,1,1],9) == 2\n",
        "test": "assert find_Min_Swaps([1,0,1,0],4) == 3\nassert find_Min_Swaps([0,1,0],3) == 1\nassert find_Min_Swaps([0,0,1,1,0],5) == 2",
        "canonical_solution": "def find_Min_Swaps(arr,n) : \r\n    noOfZeroes = [0] * n \r\n    count = 0 \r\n    noOfZeroes[n - 1] = 1 - arr[n - 1] \r\n    for i in range(n-2,-1,-1) : \r\n        noOfZeroes[i] = noOfZeroes[i + 1] \r\n        if (arr[i] == 0) : \r\n            noOfZeroes[i] = noOfZeroes[i] + 1\r\n    for i in range(0,n) : \r\n        if (arr[i] == 1) : \r\n            count = count + noOfZeroes[i] \r\n    return count "
    },
    {
        "number": 857,
        "prompt": "Write a function to list out the list of given strings individually using map function.\ndef listify_list(list1):\n",
        "checkpoint": "13B",
        "pass": 6,
        "correct": true,
        "answer": "    return list(map(str, list1))\n\n\n# Test the function with an example list\nprint(listify_list(['a', 'b', 'c', 'd', 'e']))  # ['a', 'b', 'c', 'd', 'e']\n\n# Test the function with another example list\nprint(listify_list([1, 2, 3, 4, 5]))  # ['1', '2', '3', '4', '5']\n\n# Test the function with an empty list\nprint(listify_list([]))  # []\n\n# Test the function with a list of lists\nprint(listify_list([[1, 2, 3], [4, 5, 6], [7, 8, 9]]))  # ['[1, 2, 3]', '[4, 5, 6]', '[7, 8, 9]']\n",
        "generated_testcode": "assert listify_list(['hello', 'world', 'python']) == ['hello', 'world', 'python']\n",
        "test": "assert listify_list(['Red', 'Blue', 'Black', 'White', 'Pink'])==[['R', 'e', 'd'], ['B', 'l', 'u', 'e'], ['B', 'l', 'a', 'c', 'k'], ['W', 'h', 'i', 't', 'e'], ['P', 'i', 'n', 'k']]\nassert listify_list(['python'])==[['p', 'y', 't', 'h', 'o', 'n']]\nassert listify_list([' red ', 'green',' black', 'blue ',' orange', 'brown'])==[[' ', 'r', 'e', 'd', ' '], ['g', 'r', 'e', 'e', 'n'], [' ', 'b', 'l', 'a', 'c', 'k'], ['b', 'l', 'u', 'e', ' '], [' ', 'o', 'r', 'a', 'n', 'g', 'e'], ['b', 'r', 'o', 'w', 'n']]",
        "canonical_solution": "def listify_list(list1):\r\n  result = list(map(list,list1)) \r\n  return result "
    },
    {
        "number": 858,
        "prompt": "Write a function to count number of lists in a given list of lists and square the count.\ndef count_list(input_list): \n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    count = 0 \n    for i in input_list: \n        if type(i) == list: \n            count += 1 \n    return count**2 ",
        "generated_testcode": "assert count_list([1, 2, 3]) == 1\n",
        "test": "assert count_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==25\nassert count_list([[1, 3], [5, 7], [9, 11], [13, 15, 17]] )==16\nassert count_list([[2, 4], [[6,8], [4,5,8]], [10, 12, 14]])==9",
        "canonical_solution": "def count_list(input_list): \r\n    return (len(input_list))**2"
    },
    {
        "number": 859,
        "prompt": "Write a function to generate all sublists of a given list.\ndef sub_lists(my_list):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    if len(my_list) == 0:\n        return [[]]\n    else:\n        sub_list = []\n        for i in range(len(my_list)):\n            rest = my_list[:i] + my_list[i+1:]\n            for sub in sub_lists(rest):\n                sub_list.append([my_list[i]] + sub)\n        return sub_list\n\n\n# Test the function\nmy_list = [1, 2, 3]\nprint(sub_lists(my_list))  # Output: [[], [1], [2], [1, 2], [3], [1, 3], [2, 3], [1, 2, 3]]\nmy_list = []\nprint(sub_lists(my_list))  # Output: [[]]\nmy_list = [1]\nprint(sub_lists(my_list))  # Output: [[], [1]]\n\n# Time Complexity: O(2^n)\n# Space Complexity: O(2^n)\n",
        "generated_testcode": "assert sub_lists([1, 2, 3]) == [[], [1], [2], [1, 2], [3], [1, 3], [2, 3], [1, 2, 3]]\n",
        "test": "assert sub_lists([10, 20, 30, 40])==[[], [10], [20], [30], [40], [10, 20], [10, 30], [10, 40], [20, 30], [20, 40], [30, 40], [10, 20, 30], [10, 20, 40], [10, 30, 40], [20, 30, 40], [10, 20, 30, 40]]\nassert sub_lists(['X', 'Y', 'Z'])==[[], ['X'], ['Y'], ['Z'], ['X', 'Y'], ['X', 'Z'], ['Y', 'Z'], ['X', 'Y', 'Z']]\nassert sub_lists([1,2,3])==[[],[1],[2],[3],[1,2],[1,3],[2,3],[1,2,3]]",
        "canonical_solution": "from itertools import combinations\r\ndef sub_lists(my_list):\r\n\tsubs = []\r\n\tfor i in range(0, len(my_list)+1):\r\n\t  temp = [list(x) for x in combinations(my_list, i)]\r\n\t  if len(temp)>0:\r\n\t    subs.extend(temp)\r\n\treturn subs"
    },
    {
        "number": 860,
        "prompt": "Write a function to check whether the given string is ending with only alphanumeric characters or not using regex.\ndef check_alphanumeric(string): \n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": true,
        "answer": "    if string[-1].isalnum(): \n        return True\n    else: \n        return False\n    \n# Test the function \nstring = \"abcd1234\"\nprint(check_alphanumeric(string)) # Output: True\n\nstring = \"abcd1234#\"\nprint(check_alphanumeric(string)) # Output: False ",
        "generated_testcode": "assert check_alphanumeric(\"hello123\") == True\n",
        "test": "assert check_alphanumeric(\"dawood@\") == 'Discard'\nassert check_alphanumeric(\"skdmsam326\") == 'Accept'\nassert check_alphanumeric(\"cooltricks@\") == 'Discard'",
        "canonical_solution": "import re \r\nregex = '[a-zA-z0-9]$'\r\ndef check_alphanumeric(string): \r\n\tif(re.search(regex, string)): \r\n\t\treturn (\"Accept\") \r\n\telse: \r\n\t\treturn (\"Discard\") "
    },
    {
        "number": 861,
        "prompt": "Write a function to find all anagrams of a string in a given list of strings using lambda function.\ndef anagram_lambda(texts,str):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    return filter(lambda x: sorted(str) == sorted(x), texts)\n\n#Example usage\ntexts = [\"cinema\",\"iceman\",\"listen\",\"silent\",\"actor\",\"trace\",\"elvis\"]\nstr = \"listen\"\nprint(list(anagram_lambda(texts,str)) # ['listen', 'silent']\n\n#Another approach using list comprehension\ndef anagram_listcomp(texts,str):\n    return [text for text in texts if sorted(str) == sorted(text)]\n\nprint(anagram_listcomp(texts,str)) # ['listen', 'silent'] ",
        "generated_testcode": "assert anagram_lambda([\"listen\",\"silent\",\"enlist\",\"evil\",\"evil\",\"sublest\"],\"liste\") == [\"listen\",\"silent\",\"enlist\"]\n",
        "test": "assert anagram_lambda([\"bcda\", \"abce\", \"cbda\", \"cbea\", \"adcb\"],\"abcd\")==['bcda', 'cbda', 'adcb']\nassert anagram_lambda([\"recitals\",\" python\"], \"articles\" )==[\"recitals\"]\nassert anagram_lambda([\" keep\",\" abcdef\",\" xyz\"],\" peek\")==[\" keep\"]",
        "canonical_solution": "from collections import Counter \r\ndef anagram_lambda(texts,str):\r\n  result = list(filter(lambda x: (Counter(str) == Counter(x)), texts)) \r\n  return result"
    },
    {
        "number": 862,
        "prompt": "Write a function to find the occurrences of n most common words in a given text.\ndef n_common_words(text,n):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": true,
        "answer": "    #your code goes here\n    words = text.lower().split()\n    word_count = {}\n    for word in words:\n        if word not in word_count:\n            word_count[word] = 1\n        else:\n            word_count[word] += 1\n    sorted_words = sorted(word_count.items(), key=lambda x: x[1], reverse=True)\n    result = []\n    for i in range(n):\n        result.append(sorted_words[i][0])\n    return result\n\n#Example usage:\ntext = \"The quick brown fox jumps over the lazy dog. The lazy dog slept.\"\nn = 2\nprint(n_common_words(text, n)) # Output: ['the', 'lazy'] ",
        "generated_testcode": "assert n_common_words(\"This is a sample text with some words repeated. This is another sentence with some repeated words. This is the third sentence.\", 3) == ['this', 'is', 'with']\n",
        "test": "assert n_common_words(\"python is a programming language\",1)==[('python', 1)]\nassert n_common_words(\"python is a programming language\",1)==[('python', 1)]\nassert n_common_words(\"python is a programming language\",5)==[('python', 1),('is', 1), ('a', 1), ('programming', 1), ('language', 1)]",
        "canonical_solution": "from collections import Counter\r\nimport re\r\ndef n_common_words(text,n):\r\n  words = re.findall('\\w+',text)\r\n  n_common_words= Counter(words).most_common(n)\r\n  return list(n_common_words)"
    },
    {
        "number": 863,
        "prompt": "Write a function to find the length of the longest sub-sequence such that elements in the subsequences are consecutive integers.\ndef find_longest_conseq_subseq(arr, n): \n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    arr.sort()\n    longest_seq = 0\n    current_seq = 1\n    i = 1\n    while i < n: \n        if arr[i] == arr[i - 1] + 1: \n            current_seq += 1\n        else: \n            longest_seq = max(longest_seq, current_seq) \n            current_seq = 1\n        i += 1\n    longest_seq = max(longest_seq, current_seq) \n    return longest_seq \n\n\narr = [1, 9, 3, 10, 4, 5, 6, 2, 7, 8] \nn = len(arr) \nprint(\"Length of the longest consecutive subsequence is\", find_longest_subseq(arr, n) ",
        "generated_testcode": "assert find_longest_conseq_subseq([1, 9, 3, 10, 4, 5, 6, 7, 8, 2, 1], 8) == 4\n",
        "test": "assert find_longest_conseq_subseq([1, 2, 2, 3], 4) == 3\nassert find_longest_conseq_subseq([1, 9, 3, 10, 4, 20, 2], 7) == 4\nassert find_longest_conseq_subseq([36, 41, 56, 35, 44, 33, 34, 92, 43, 32, 42], 11) == 5",
        "canonical_solution": "def find_longest_conseq_subseq(arr, n): \r\n\tans = 0\r\n\tcount = 0\r\n\tarr.sort() \r\n\tv = [] \r\n\tv.append(arr[0]) \r\n\tfor i in range(1, n): \r\n\t\tif (arr[i] != arr[i - 1]): \r\n\t\t\tv.append(arr[i]) \r\n\tfor i in range(len(v)): \r\n\t\tif (i > 0 and v[i] == v[i - 1] + 1): \r\n\t\t\tcount += 1\r\n\t\telse: \r\n\t\t\tcount = 1\r\n\t\tans = max(ans, count) \r\n\treturn ans "
    },
    {
        "number": 864,
        "prompt": "Write a function to find palindromes in a given list of strings using lambda function.\ndef palindrome_lambda(texts):\n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    return list(filter(lambda s: s == s[::-1], texts))\n\n# Example usage:\ntexts = [\"racecar\", \"hello\", \"level\", \"stats\", \"civic\", \"deed\", \"rotor\", \"radar\"]\nprint(palindrome_lambda(texts)) # Output: [\"racecar\", \"stats\", \"civic\", \"deed\", \"rotor\"]\n\n# Note: The function takes a list of strings and returns a list of palindromes\n# The list comprehension below is equivalent to the above function\npalindromes = [text for text in texts if text == text[::-1]]\nprint(palindromes) # Output: [\"racecar\", \"stats\", \"civic\", \"deed\", \"rotor\"] ",
        "generated_testcode": "assert palindrome_lambda([\"racecar\", \"level\", \"deified\", \"civic\", \"hello\"]) == [\"racecar\", \"level\", \"deified\", \"civic\"]\n",
        "test": "assert palindrome_lambda([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"])==['php', 'aaa']\nassert palindrome_lambda([\"abcd\", \"Python\", \"abba\", \"aba\"])==['abba', 'aba']\nassert palindrome_lambda([\"abcd\", \"abbccbba\", \"abba\", \"aba\"])==['abbccbba', 'abba', 'aba']",
        "canonical_solution": "def palindrome_lambda(texts):\r\n  result = list(filter(lambda x: (x == \"\".join(reversed(x))), texts))\r\n  return result"
    },
    {
        "number": 865,
        "prompt": "Write a function to print n-times a list using map function.\ndef ntimes_list(nums,n):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    return list(map(lambda x: x*n,nums)\n#Example usage\nprint(ntimes_list([1,2,3,4],3)) #[3,6,9]\nprint(ntimes_list([0,5,7],2)) #[0,10,14]\nprint(ntimes_list([2,4,6,8],-1)) #[]\nprint(ntimes_list([],10) #[])\nprint(ntimes_list([2,3,4],0) #[0,0,0]\n\\end{code}\n\nThe function should return an empty list if n is 0 or less than 0 and the original list if n is 1. ",
        "generated_testcode": "assert ntimes_list([1,2,3],3) == [1,2,3,1,2,3,1,2,3]\n",
        "test": "assert ntimes_list([1, 2, 3, 4, 5, 6, 7],3)==[3, 6, 9, 12, 15, 18, 21]\nassert ntimes_list([1, 2, 3, 4, 5, 6, 7],4)==[4, 8, 12, 16, 20, 24, 28]\nassert ntimes_list([1, 2, 3, 4, 5, 6, 7],10)==[10, 20, 30, 40, 50, 60, 70]",
        "canonical_solution": "def ntimes_list(nums,n):\r\n    result = map(lambda x:n*x, nums) \r\n    return list(result)"
    },
    {
        "number": 866,
        "prompt": "Write a function to check whether the given month name contains 31 days or not.\ndef check_monthnumb(monthname2):\n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    if monthname2.lower() in ('january', 'march', 'may', 'july', 'august', 'october', 'december'):\n        return True\n    elif monthname2.lower() in ('april', 'june', 'september', 'november'):\n        return False\n    else:\n        return None\n\nprint(check_monthnumb('January'))  # Output: True\nprint(check_monthnumb('February')) # Output: None\nprint(check_monthnumb('August'))  # Output: True\nprint(check_monthnumb('December')) # Output: True\nprint(check_monthnumb('September')) # Output: False\nprint(check_monthnumb('Feb'))     # Output: None\n\n# Explanation:\n# The function checks whether the given month name is in the list of months with 31 days (January, March, May, July, August, October and December) or the list of months with 30 days (April, June, September, November).\n# If it is in either list, it returns True. If it is not in either list, it returns None. ",
        "generated_testcode": "assert check_monthnumb(\"January\") == True\n",
        "test": "assert check_monthnumb(\"February\")==False\nassert check_monthnumb(\"January\")==True\nassert check_monthnumb(\"March\")==True",
        "canonical_solution": "def check_monthnumb(monthname2):\r\n  if(monthname2==\"January\" or monthname2==\"March\"or monthname2==\"May\" or monthname2==\"July\" or monthname2==\"Augest\" or monthname2==\"October\" or monthname2==\"December\"):\r\n    return True\r\n  else:\r\n    return False"
    },
    {
        "number": 867,
        "prompt": "Write a python function to add a minimum number such that the sum of array becomes even.\ndef min_Num(arr,n):  \n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    sum = 0\n    for i in range(n):  \n        sum += arr[i]  \n    extra = sum % 2  \n    if extra == 0:  \n        return 0\n    else:  \n        return (2 - extra)  \n  \n# Driver code  \narr = [1, 3, 5, 2, 6, 7]  \nn = len(arr)  \nprint(min_Num(arr, n))  ",
        "generated_testcode": "assert min_Num([1,3,5,7],3) == 1\n",
        "test": "assert min_Num([1,2,3,4,5,6,7,8,9],9) == 1\nassert min_Num([1,2,3,4,5,6,7,8],8) == 2\nassert min_Num([1,2,3],3) == 2",
        "canonical_solution": "def min_Num(arr,n):  \r\n    odd = 0\r\n    for i in range(n): \r\n        if (arr[i] % 2): \r\n            odd += 1 \r\n    if (odd % 2): \r\n        return 1\r\n    return 2"
    },
    {
        "number": 868,
        "prompt": "Write a python function to find the length of the last word in a given string.\ndef length_Of_Last_Word(a): \n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    a = a.split() \n    return len(a[-1]) \n\n# Testing the function \na = \"Hello World\"\nprint(length_Of_Last_Word(a)) # Output: 5 ",
        "generated_testcode": "assert length_Of_Last_Word(\"Hello World\") == 5\n",
        "test": "assert length_Of_Last_Word(\"python language\") == 8\nassert length_Of_Last_Word(\"PHP\") == 3\nassert length_Of_Last_Word(\"\") == 0",
        "canonical_solution": "def length_Of_Last_Word(a): \r\n    l = 0\r\n    x = a.strip() \r\n    for i in range(len(x)): \r\n        if x[i] == \" \": \r\n            l = 0\r\n        else: \r\n            l += 1\r\n    return l "
    },
    {
        "number": 869,
        "prompt": "Write a function to remove sublists from a given list of lists, which are outside a given range.\ndef remove_list_range(list1, leftrange, rigthrange):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    return [lst for lst in list1 if leftrange <= len(lst) <= rigthrange]\n\n# Example usage:\nlist1 = [[1, 2, 3], [4, 5, 6, 7], [8, 9], [10, 11, 12, 13, 14]]\nleftrange = 2\nrigthrange = 4\nprint(remove_list_range(list1, leftrange, rigthrange))  # should output [[4, 5, 6, 7], [10, 11, 12, 13, 14]]\n\n# Test the function with an empty list\nlist1 = []\nleftrange = 0\nrigthrange = 10\nprint(remove_list_range(list1, leftrange, rigthrange))  # should output []\n\n# Test the function with a list of length 1\nlist1 = [[1, 2, 3, 4]]\nleftrange = 2\nrigthrange = 4\nprint(remove_list_range(list1, leftrange, rigthrange))  # should output []\n\n# Test the function with a list of length 0\nlist1 = [[]]\nleftrange = 0\nrigthrange = 10\nprint(remove_list_range(list1, leftrange, rigthrange))  # should output []\n\n# Test the function with a list of length ",
        "generated_testcode": "",
        "test": "assert remove_list_range([[2], [0], [1, 2, 3], [0, 1, 2, 3, 6, 7], [9, 11], [13, 14, 15, 17]],13,17)==[[13, 14, 15, 17]]\nassert remove_list_range([[2], [0], [1, 2, 3], [0, 1, 2, 3, 6, 7], [9, 11], [13, 14, 15, 17]],1,3)==[[2], [1, 2, 3]]\nassert remove_list_range([[2], [0], [1, 2, 3], [0, 1, 2, 3, 6, 7], [9, 11], [13, 14, 15, 17]],0,7)==[[2], [0], [1, 2, 3], [0, 1, 2, 3, 6, 7]]",
        "canonical_solution": "def remove_list_range(list1, leftrange, rigthrange):\r\n   result = [i for i in list1 if (min(i)>=leftrange and max(i)<=rigthrange)]\r\n   return result"
    },
    {
        "number": 870,
        "prompt": "Write a function to calculate the sum of the positive numbers of a given list of numbers using lambda function.\ndef sum_positivenum(nums):\n",
        "checkpoint": "13B",
        "pass": 9,
        "correct": true,
        "answer": "    return sum(filter(lambda x: x > 0, nums) if nums else 0)\n\n\n# Test the function with the following list of numbers\nnumbers = [-5, 2, 3, 1, -4, 6, -2, 1, 0, 8, -1, 7, -3]\nprint(sum_positivenum(numbers))  # Output: 18\n\n# Explanation:\n# The lambda function checks if each number in the list is greater than 0, and returns True or False. \n# The filter() function then filters out the False values and returns a new list with only the True values. \n# Finally, the sum() function calculates the sum of the remaining numbers. ",
        "generated_testcode": "assert sum_positivenum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 55\n",
        "test": "assert sum_positivenum([2, 4, -6, -9, 11, -12, 14, -5, 17])==48\nassert sum_positivenum([10,15,-14,13,-18,12,-20])==50\nassert sum_positivenum([19, -65, 57, 39, 152,-639, 121, 44, 90, -190])==522",
        "canonical_solution": "def sum_positivenum(nums):\r\n  sum_positivenum = list(filter(lambda nums:nums>0,nums))\r\n  return sum(sum_positivenum)"
    },
    {
        "number": 871,
        "prompt": "Write a python function to check whether the given strings are rotations of each other or not.\ndef are_Rotations(string1,string2): \n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    if len(string1) != len(string2):\n        return False\n    return string1 in string2 * 2\n\n#Test the function with some test cases\nprint(are_Rotations(\"waterbottle\",\"erbottlewat\")) #Output: True\nprint(are_Rotations(\"hello\",\"lohelo\")) #Output: True\nprint(are_Rotations(\"hello\",\"llohe\")) #Output: False\nprint(are_Rotations(\"hello\",\"lolleh\")) #Output: False \n\n#Time Complexity: O(n) where n is the length of the string. \n#Space Complexity: O(n) since we are using string concatenation. ",
        "generated_testcode": "assert are_Rotations(\"hello\",\"llohe\") == True\n",
        "test": "assert are_Rotations(\"abc\",\"cba\") == False\nassert are_Rotations(\"abcd\",\"cdba\") == False\nassert are_Rotations(\"abacd\",\"cdaba\") == True",
        "canonical_solution": "def are_Rotations(string1,string2): \r\n    size1 = len(string1) \r\n    size2 = len(string2) \r\n    temp = '' \r\n    if size1 != size2: \r\n        return False\r\n    temp = string1 + string1 \r\n    if (temp.count(string2)> 0): \r\n        return True\r\n    else: \r\n        return False"
    },
    {
        "number": 872,
        "prompt": "Write a function to check if a nested list is a subset of another nested list.\ndef check_subset(list1,list2): \n",
        "checkpoint": "13B",
        "pass": 9,
        "correct": true,
        "answer": "    for i in range(len(list1)): \n        if list1[i] not in list2: \n            return False\n    return True\n\n# Test the function with sample inputs\nlist1 = [1,2,[3,4],5]\nlist2 = [1,2,3,4,5,6]\nprint(check_subset(list1,list2)) # Output: True\n\nlist1 = [1,2,[3,4],5]\nlist2 = [1,2,3,4,6]\nprint(check_subset(list1,list2)) # Output: False\n\nlist1 = [1,2,[3,4],5]\nlist2 = [1,2,3,[4],5]\nprint(check_subset(list1,list2)) # Output: False ",
        "generated_testcode": "assert check_subset([1,2,3],[1,2,3,4,5]) == True\n",
        "test": "assert check_subset([[1, 3], [5, 7], [9, 11], [13, 15, 17]] ,[[1, 3],[13,15,17]])==True\nassert check_subset([[1, 2], [2, 3], [3, 4], [5, 6]],[[3, 4], [5, 6]])==True\nassert check_subset([[[1, 2], [2, 3]], [[3, 4], [5, 7]]],[[[3, 4], [5, 6]]])==False",
        "canonical_solution": "def check_subset(list1,list2): \r\n    return all(map(list1.__contains__,list2)) "
    },
    {
        "number": 873,
        "prompt": "Write a function to solve the fibonacci sequence using recursion.\ndef fibonacci(n):\n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fibonacci(n-1) + fibonacci(n-2)\n\nn = 10\nprint(\"Fibonacci series up to\", n, \":\")\nfor i in range(n):\n    print(fibonacci(i), end=\", \")\n\n# Output: Fibonacci series up to 10 :\n# 0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765, 10946, 17711, 28657, 46368, 75025, ",
        "generated_testcode": "assert fibonacci(0) == 0\n",
        "test": "assert fibonacci(7) == 13\nassert fibonacci(8) == 21\nassert fibonacci(9) == 34",
        "canonical_solution": "def fibonacci(n):\r\n  if n == 1 or n == 2:\r\n    return 1\r\n  else:\r\n    return (fibonacci(n - 1) + (fibonacci(n - 2)))"
    },
    {
        "number": 874,
        "prompt": "Write a python function to check if the string is a concatenation of another string.\ndef check_Concat(str1,str2):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    if len(str1) % len(str2) != 0:\n        return False\n    i = 0\n    j = 0\n    while i < len(str1):\n        if str1[i:i+len(str2)] == str2:\n            i += len(str2)\n            j += 1\n        else:\n            return False\n    if j == len(str1)/len(str2):\n        return True\n    return False\n\n# Testing the function\nprint(check_Concat(\"hellohellohello\",\"hello\")) # should return True\nprint(check_Concat(\"hellohell\",\"hello\")) # should return False\nprint(check_Concat(\"hellohello\",\"hellohellohello\")) # should return False\nprint(check_Concat(\"hellohell\",\"hellohello\")) # should return True\nprint(check_Concat(\"hello\",\"hellohello\")) # should return False\nprint(check_Concat(\"helloworld\",\"hello\")) # should return True\nprint(check_Concat(\"helloworldhello\",\"hello\")) # should return True\nprint(check_Concat(\"helloworldhello\",\"worldhello\")) # should return False\nprint(check_Concat(\"helloworldhello\",\"hellolle\") # should return False\nprint(check_Concat(\"helloworldhell\",\"hello\")) # should return False\nprint(check_Concat(\"helloworldhello\",\"hel\")) # should return False\nprint(check_Concat(\"helloworldhello\",\"hellohe\")) # should return True\nprint(check_Concat(\"hellow",
        "generated_testcode": "assert check_Concat(\"hello\",\"lo\") == True\n",
        "test": "assert check_Concat(\"abcabcabc\",\"abc\") == True\nassert check_Concat(\"abcab\",\"abc\") == False\nassert check_Concat(\"aba\",\"ab\") == False",
        "canonical_solution": "def check_Concat(str1,str2):\r\n    N = len(str1)\r\n    M = len(str2)\r\n    if (N % M != 0):\r\n        return False\r\n    for i in range(N):\r\n        if (str1[i] != str2[i % M]):\r\n            return False         \r\n    return True"
    },
    {
        "number": 875,
        "prompt": "Write a function to find the minimum difference in the tuple pairs of given tuples.\ndef min_difference(test_list):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    min_diff = float('inf')\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            diff = abs(test_list[i][1] - test_list[j][1])\n            if diff < min_diff:\n                min_diff = diff\n    return min_diff\n\n#Example usage:\ntest_list = [(2, 5), (9, 7), (12, 15), (100, 10), (1, 3), (200, 201)]\nprint(min_difference(test_list)) # Output: 1\n\n#Example usage 2:\ntest_list = [(5, 10), (2, 5), (9, 7), (12, 15), (1, 3), (200, 201)]\nprint(min_difference(test_list)) # Output: 4 ",
        "generated_testcode": "assert min_difference([(1, 4, 2, 5, 8, 9]) == 1\n",
        "test": "assert min_difference([(3, 5), (1, 7), (10, 3), (1, 2)]) == 1\nassert min_difference([(4, 6), (12, 8), (11, 4), (2, 13)]) == 2\nassert min_difference([(5, 17), (3, 9), (12, 5), (3, 24)]) == 6",
        "canonical_solution": "def min_difference(test_list):\r\n  temp = [abs(b - a) for a, b in test_list]\r\n  res = min(temp)\r\n  return (res) "
    },
    {
        "number": 876,
        "prompt": "Write a python function to find lcm of two positive integers.\ndef lcm(x, y):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    if x > y:\n        greater = x\n    else:\n        greater = y\n\n    while(True):\n        if((greater % x == 0) and (greater % y == 0):\n            lcm = greater\n            break\n        greater += 1\n    return lcm\n\nprint(lcm(12, 15))  # Output: 60\nprint(lcm(5, 7))   # Output: 35\nprint(lcm(3, 9))   # Output: 9\n\n# Explanation: \n# The LCM of two numbers is the smallest number which is divisible by both of them. \n# We can find the LCM of two numbers by finding the multiple of the greater number which is divisible by both of them. \n# For example, to find the LCM of 12 and 15, we can find the multiple of 15 that is divisible by 12. The multiple of 15 that is \n# divisible by 12 is 30, which is the LCM. Similarly, to find the LCM of 5 and 7, we need to find the multiple of 7 that is divisible \n# by 5. The multiple of 7 that is divisible by 5 is 35, which is the LCM. ",
        "generated_testcode": "assert lcm(12, 15) == 30\n",
        "test": "assert lcm(4,6) == 12\nassert lcm(15,17) == 255\nassert lcm(2,6) == 6",
        "canonical_solution": "def lcm(x, y):\r\n   if x > y:\r\n       z = x\r\n   else:\r\n       z = y\r\n   while(True):\r\n       if((z % x == 0) and (z % y == 0)):\r\n           lcm = z\r\n           break\r\n       z += 1\r\n   return lcm"
    },
    {
        "number": 877,
        "prompt": "Write a python function to sort the given string.\ndef sort_String(str) : \n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    return \"\".join(sorted(str) ) \n  \n#test the function \nstr = \"geeksforgeeks\"\nprint(sort_String(str) ) ",
        "generated_testcode": "assert sort_String(\"cba\") == \"abc\"\n",
        "test": "assert sort_String(\"cba\") == \"abc\"\nassert sort_String(\"data\") == \"aadt\"\nassert sort_String(\"zxy\") == \"xyz\"",
        "canonical_solution": "def sort_String(str) : \r\n    str = ''.join(sorted(str)) \r\n    return (str) "
    },
    {
        "number": 878,
        "prompt": "Write a function to check if the given tuple contains only k elements.\ndef check_tuples(test_tuple, K):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    if len(test_tuple) == K:\n        return True\n    else:\n        return False\n\n\n# Test cases\nprint(check_tuples((1, 2, 3, 4, 5), 4))  # Output: True\nprint(check_tuples((1, 2, 3, 4, 5), 3))  # Output: False\nprint(check_tuples((1, 2, 3, 4, 5, 6), 5)  # Output: False\nprint(check_tuples((1, 2, 3, 4), 3)  # Output: True\nprint(check_tuples((1, 2, 3), 2)  # Output: True\nprint(check_tuples((1,), 1)  # Output: True\nprint(check_tuples(()  # Output: True\n\n# Testing with edge cases\nprint(check_tuples((1,), 0)  # Output: False\nprint(check_tuples((), 0)  # Output: True\nprint(check_tuples((1, 2, 3, 4), 2.5)  # Output: False\nprint(check_tuples(\"tuple\", 5)  # Output: False\nprint(check_tuples((\"tuple\",)  # Output: False\nprint(check_tuples((\"tuple\", \"tuple\")  # Output: False\n",
        "generated_testcode": "assert check_tuples((1, 2, 3, 4, 5), 4) == True\n",
        "test": "assert check_tuples((3, 5, 6, 5, 3, 6),[3, 6, 5]) == True\nassert check_tuples((4, 5, 6, 4, 6, 5),[4, 5, 6]) == True\nassert check_tuples((9, 8, 7, 6, 8, 9),[9, 8, 1]) == False",
        "canonical_solution": "def check_tuples(test_tuple, K):\r\n  res = all(ele in K for ele in test_tuple)\r\n  return (res) "
    },
    {
        "number": 879,
        "prompt": "Write a function that matches a string that has an 'a' followed by anything, ending in 'b' by using regex.\ndef text_match(text):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    pattern = r\"a.*b$\"\n    return bool(re.match(pattern, text))\n\n# Example usage:\nprint(text_match(\"apple\"))  # Output: False\nprint(text_match(\"banana\"))  # Output: True\nprint(text_match(\"anything\"))  # Output: False\nprint(text_match(\"a is for apple\"))  # Output: False\nprint(text_match(\"ab\"))  # Output: True\nprint(text_match(\"a followed by anything goes here b\"))  # Output: True\nprint(text_match(\"a followed by anything goes here bc\"))  # Output: False\nprint(text_match(\"apricot\"))  # Output: False\nprint(text_match(\"apple, banana, and avocado\"))  # Output: False\nprint(text_match(\"a followed by anything goes here, but not the end\"))  # Output: False ",
        "generated_testcode": "assert text_match(\"abc\") == True\n",
        "test": "assert text_match(\"aabbbbd\") == 'Not matched!'\nassert text_match(\"aabAbbbc\") == 'Not matched!'\nassert text_match(\"accddbbjjjb\") == 'Found a match!'",
        "canonical_solution": "import re\r\ndef text_match(text):\r\n  patterns = 'a.*?b$'\r\n  if re.search(patterns,  text):\r\n    return ('Found a match!')\r\n  else:\r\n    return ('Not matched!')"
    },
    {
        "number": 880,
        "prompt": "Write a python function to find number of solutions in quadratic equation.\ndef Check_Solution(a,b,c) : \n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    if (b**2 - 4*a*c) >= 0: \n        return 2\n    else: \n        return 0\n  \na = int(input(\"Enter coefficient of x^2 : \"))\nb = int(input(\"Enter coefficient of x : \"):\")\nc = int(input(\"Enter constant term : \"))\n\nprint(\"Number of solutions : \",Check_Solution(a,b,c)) ",
        "generated_testcode": "assert Check_Solution(1,2,3) == 1\n",
        "test": "assert Check_Solution(2,5,2) == \"2 solutions\"\nassert Check_Solution(1,1,1) == \"No solutions\"\nassert Check_Solution(1,2,1) == \"1 solution\"",
        "canonical_solution": "def Check_Solution(a,b,c) : \r\n    if ((b*b) - (4*a*c)) > 0 : \r\n        return (\"2 solutions\") \r\n    elif ((b*b) - (4*a*c)) == 0 : \r\n        return (\"1 solution\") \r\n    else : \r\n        return (\"No solutions\") "
    },
    {
        "number": 881,
        "prompt": "Write a function to find the sum of first even and odd number of a given list.\ndef sum_even_odd(list1):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    even_sum = 0\n    odd_sum = 0\n    for i in list1:\n        if i % 2 == 0:\n            even_sum += i\n        else:\n            odd_sum += i\n    return even_sum, odd_sum\n\n#Example usage\nmy_list = [1,2,3,4,5,6,7,8,9,10]\nprint(sum_even_odd(my_list)) # Output: (20, 16)\n\n#Output: (20, 16) as 2+4+6+8+10 = 20 and 1+3+5+7+9 = 16\n\n#Example usage2\nmy_list = [1,3,5,7,9]\nprint(sum_even_odd(my_list)) # Output: (0, 16)\n\n#Output: (0, 16) as no even number in the list and 1+3+5+7+9 = 16 ",
        "generated_testcode": "assert sum_even_odd([1, 2, 3, 4, 5, 6, 7, 8, 9]) == (10, 25)\n",
        "test": "assert sum_even_odd([1,3,5,7,4,1,6,8])==5\nassert sum_even_odd([1,2,3,4,5,6,7,8,9,10])==3\nassert sum_even_odd([1,5,7,9,10])==11",
        "canonical_solution": "def sum_even_odd(list1):\r\n    first_even = next((el for el in list1 if el%2==0),-1)\r\n    first_odd = next((el for el in list1 if el%2!=0),-1)\r\n    return (first_even+first_odd)"
    },
    {
        "number": 882,
        "prompt": "Write a function to caluclate perimeter of a parallelogram.\ndef parallelogram_perimeter(b,h):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": true,
        "answer": "    return 2*(b+h)\n\n# Test the function with the following values\nprint(parallelogram_perimeter(5, 7)) # Output: 24\nprint(parallelogram_perimeter(10, 8)) # Output: 32\nprint(parallelogram_perimeter(12, 10)) # Output: 34\n\n# Define a function to calculate the area of a parallelogram\ndef parallelogram_area(b,h):\n    return b*h\n\n# Test the function with the same values as before\nprint(parallelogram_area(5, 7)) # Output: 35\nprint(parallelogram_area(10, 8)) # Output: 80\nprint(parallelogram_area(12, 10)) # Output: 120\n\n# Define a function to calculate the area of a rectangle\ndef rectangle_area(l,w):\n    return l*w\n\n# Test the function with the following values\nprint(rectangle_area(6, 4)) # Output: 24\nprint(rectangle_area(8, 5)) # Output: 40\nprint(rectangle_area(10, 12)) # Output: 120\n\n# Define a function to calculate the perimeter of a rectangle\ndef rectangle_perimeter(l,w):\n    return 2*(l+w)\n\n# Test the function with the same values as before\nprint",
        "generated_testcode": "assert parallelogram_perimeter(5, 10) == 30\n",
        "test": "assert parallelogram_perimeter(10,20)==400\nassert parallelogram_perimeter(15,20)==600\nassert parallelogram_perimeter(8,9)==144",
        "canonical_solution": "def parallelogram_perimeter(b,h):\r\n  perimeter=2*(b*h)\r\n  return perimeter"
    },
    {
        "number": 883,
        "prompt": "Write a function to find numbers divisible by m and n from a list of numbers using lambda function.\ndef div_of_nums(nums,m,n):\n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    return list(filter(lambda x: x%m==0 and x%n==0,nums))\n\n#Example usage:\nnums = [10,20,30,40,50,60,70,80,90]\nm = 10\nn = 20\nprint(div_of_nums(nums,m,n)) # Output: [60, 80] ",
        "generated_testcode": "",
        "test": "assert div_of_nums([19, 65, 57, 39, 152, 639, 121, 44, 90, 190],2,4)==[ 152,44]\nassert div_of_nums([1, 2, 3, 5, 7, 8, 10],2,5)==[10]\nassert div_of_nums([10,15,14,13,18,12,20],10,5)==[10,20]",
        "canonical_solution": "def div_of_nums(nums,m,n):\r\n result = list(filter(lambda x: (x % m == 0 and x % n == 0), nums)) \r\n return result"
    },
    {
        "number": 884,
        "prompt": "Write a python function to check whether all the bits are within a given range or not.\ndef all_Bits_Set_In_The_Given_Range(n,l,r): \n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    if l>r:\n        return False\n    mask = (1<<(l) - 1) ^ ((1<<(r+1) - 1) - 1)\n    return (n & mask) == mask ",
        "generated_testcode": "assert all_Bits_Set_In_The_Given_Range(10,2,5) == True\n",
        "test": "assert all_Bits_Set_In_The_Given_Range(10,2,1) == True \nassert all_Bits_Set_In_The_Given_Range(5,2,4) == False\nassert all_Bits_Set_In_The_Given_Range(22,2,3) == True ",
        "canonical_solution": "def all_Bits_Set_In_The_Given_Range(n,l,r): \r\n    num = ((1 << r) - 1) ^ ((1 << (l - 1)) - 1) \r\n    new_num = n & num \r\n    if (num == new_num): \r\n        return True\r\n    return False"
    },
    {
        "number": 885,
        "prompt": "Write a python function to check whether the two given strings are isomorphic to each other or not.\ndef is_Isomorphic(str1,str2):          \n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    if len(str1)!=len(str2):\n        return False\n    mapping = {}\n    for i in range(len(str1)):\n        if str1[i] not in mapping:\n            if str2[i] in mapping.values():\n                return False\n            mapping[str1[i]] = str2[i]\n        elif mapping[str1[i]]!=str2[i]:\n            return False\n    return True\n\n# Test the function\nstr1 = \"egg\"\nstr2 = \"add\"\nprint(is_Isomorphic(str1,str2))  # Output: True\n\nstr1 = \"foo\"\nstr2 = \"bar\"\nprint(is_Isomorphic(str1,str2))  # Output: False\n\nstr1 = \"paper\"\nstr2 = \"title\"\nprint(is_Isomorphic(str1,str2))  # Output: True ",
        "generated_testcode": "assert is_Isomorphic(\"egg\",\"add\") == True\n",
        "test": "assert is_Isomorphic(\"paper\",\"title\") == True\nassert is_Isomorphic(\"ab\",\"ba\") == True\nassert is_Isomorphic(\"ab\",\"aa\") == False",
        "canonical_solution": "def is_Isomorphic(str1,str2):          \r\n    dict_str1 = {}\r\n    dict_str2 = {}\r\n    for i, value in enumerate(str1):\r\n        dict_str1[value] = dict_str1.get(value,[]) + [i]        \r\n    for j, value in enumerate(str2):\r\n        dict_str2[value] = dict_str2.get(value,[]) + [j]\r\n    if sorted(dict_str1.values()) == sorted(dict_str2.values()):\r\n        return True\r\n    else:\r\n        return False"
    },
    {
        "number": 886,
        "prompt": "Write a function to add all the numbers in a list and divide it with the length of the list.\ndef sum_num(numbers):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    total = sum(numbers)\n    length = len(numbers)\n    return total / length\n\n# Example usage:\nnumbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nprint(sum_num(numbers))\n\n# Output: 5.5\n\n# Note that the result should be a float since you are dividing two integers. ",
        "generated_testcode": "assert sum_num([1, 2, 3, 4, 5]) == 3\n",
        "test": "assert sum_num((8, 2, 3, 0, 7))==4.0\nassert sum_num((-10,-20,-30))==-20.0\nassert sum_num((19,15,18))==17.333333333333332",
        "canonical_solution": "def sum_num(numbers):\r\n    total = 0\r\n    for x in numbers:\r\n        total += x\r\n    return total/len(numbers) "
    },
    {
        "number": 887,
        "prompt": "Write a python function to check whether the given number is odd or not using bitwise operator.\ndef is_odd(n) : \n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    if n & 1 == 1 : \n        return True\n    else : \n        return False\n\n# Test the function \nprint(is_odd(5)) # Output : True ",
        "generated_testcode": "assert is_odd(3) == True\n",
        "test": "assert is_odd(5) == True\nassert is_odd(6) == False\nassert is_odd(7) == True",
        "canonical_solution": "def is_odd(n) : \r\n    if (n^1 == n-1) :\r\n        return True; \r\n    else :\r\n        return False; "
    },
    {
        "number": 888,
        "prompt": "Write a function to substract the elements of the given nested tuples.\ndef substract_elements(test_tup1, test_tup2):\n",
        "checkpoint": "13B",
        "pass": 5,
        "correct": true,
        "answer": "    result = []\n    if len(test_tup1) == len(test_tup2):\n        for i in range(len(test_tup1)):\n            sub = test_tup1[i] - test_tup2[i]\n            result.append(sub)\n        return tuple(result)\n    else:\n        return \"Tuples should have the same length\"\n\n# Test Cases\nprint(substract_elements((1, 2, 3), (4, 5, 6)))  # (-3, -3, -3)\nprint(substract_elements((10, 5, 10), (3, 2, 1)))  # (7, 3, 9)\nprint(substract_elements((1, 2, 3, 4), (4, 5, 6, 7, 8)))  # Tuples should have the same length\n\n# Output:\n# (-3, -3, -3)\n# (7, 3, 9)\n# Tuples should have the same length\n\n# Test case 1 and 2 are correct, but test case 3 fails because the tuples have different lengths. It should return an error message. ",
        "generated_testcode": "assert substract_elements((1, 2, 3), (4, 5, 6)) == (-3, -3, -3)\n",
        "test": "assert substract_elements(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((-5, -4), (1, -4), (1, 8), (-6, 7))\nassert substract_elements(((13, 4), (14, 6), (13, 10), (12, 11)), ((19, 8), (14, 10), (12, 2), (18, 4))) == ((-6, -4), (0, -4), (1, 8), (-6, 7))\nassert substract_elements(((19, 5), (18, 7), (19, 11), (17, 12)), ((12, 9), (17, 11), (13, 3), (19, 5))) == ((7, -4), (1, -4), (6, 8), (-2, 7))",
        "canonical_solution": "def substract_elements(test_tup1, test_tup2):\r\n  res = tuple(tuple(a - b for a, b in zip(tup1, tup2))\r\n   for tup1, tup2 in zip(test_tup1, test_tup2))\r\n  return (res) "
    },
    {
        "number": 889,
        "prompt": "Write a function to reverse each list in a given list of lists.\ndef reverse_list_lists(lists):\n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    # Create a new list to store the reversed lists\n    reversed_lists = []\n    \n    # Loop through each list in the given list\n    for sublist in lists:\n        # Reverse the sublist and append it to the new list\n        reversed_lists.append(sublist[::-1])\n        \n    # Return the new list of reversed lists\n    return reversed_lists\n\n# Test the function with an example\nlists = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nprint(reverse_list_lists(lists))  # Output: [[3, 2, 1], [6, 5, 4], [9, 8, 7]]\n\n# Test the function with an empty list\nprint(reverse_list_lists([]))  # Output: []\n\n# Test the function with a list of lists with different lengths\nlists = [[1, 2, 3], [4, 5], [6], [7, 8, 9, 10]]\nprint(reverse_list_lists(lists))  # Output: [[3, 2, 1], [5, 4], [6], [10, 9, 8, 7]] ",
        "generated_testcode": "",
        "test": "assert reverse_list_lists([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]])==[[4, 3, 2, 1], [8, 7, 6, 5], [12, 11, 10, 9], [16, 15, 14, 13]]\nassert reverse_list_lists([[1,2],[2,3],[3,4]])==[[2,1],[3,2],[4,3]]\nassert reverse_list_lists([[10,20],[30,40]])==[[20,10],[40,30]]",
        "canonical_solution": "def reverse_list_lists(lists):\r\n    for l in lists:\r\n        l.sort(reverse = True)\r\n    return lists "
    },
    {
        "number": 890,
        "prompt": "Write a python function to find the index of an extra element present in one sorted array.\ndef find_Extra(arr1,arr2,n) : \n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    for i in range(n): \n        if arr1[i] != arr2[i]: \n            return i\n    return -1\n\n# Driver code \narr1 = [int(x) for x in input(\"Enter the first sorted array: \").split()]\narr2 = [int(x) for x in input(\"Enter the second sorted array: \").split()]\nn = len(arr1) \nprint(\"Index of extra element is :\", find_Extra(arr1, arr2, n)) ",
        "generated_testcode": "assert find_Extra([1,2,3,4,4,5,6,7,7], [1,2,3,4,5,6,7,8], 6) == 7\n",
        "test": "assert find_Extra([1,2,3,4],[1,2,3],3) == 3\nassert find_Extra([2,4,6,8,10],[2,4,6,8],4) == 4\nassert find_Extra([1,3,5,7,9,11],[1,3,5,7,9],5) == 5",
        "canonical_solution": "def find_Extra(arr1,arr2,n) : \r\n    for i in range(0, n) : \r\n        if (arr1[i] != arr2[i]) : \r\n            return i \r\n    return n "
    },
    {
        "number": 891,
        "prompt": "Write a python function to check whether the given two numbers have same number of digits or not.\ndef same_Length(A,B): \n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": true,
        "answer": "    return len(str(A)) == len(str(B)) \n  \n#Testing the function \nA = 12345 \nB = 56789 \nprint(same_Length(A, B)) # Output: True ",
        "generated_testcode": "assert same_Length(1234, 5678) == True\n",
        "test": "assert same_Length(12,1) == False\nassert same_Length(2,2) == True\nassert same_Length(10,20) == True",
        "canonical_solution": "def same_Length(A,B): \r\n    while (A > 0 and B > 0): \r\n        A = A / 10; \r\n        B = B / 10; \r\n    if (A == 0 and B == 0): \r\n        return True; \r\n    return False; "
    },
    {
        "number": 892,
        "prompt": "Write a function to remove multiple spaces in a string.\ndef remove_spaces(text):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    return ' '.join(text.split())\n\n# Test the function with an example string\nstring = \"   This   is  a  string  with   multiple  spaces.  \"\nprint(remove_spaces(string))\n",
        "generated_testcode": "assert remove_spaces(\"Hello   World\") == \"Hello World\"\n",
        "test": "assert remove_spaces('python  program')==('python program')\nassert remove_spaces('python   programming    language')==('python programming language')\nassert remove_spaces('python                     program')==('python program')",
        "canonical_solution": "import re\r\ndef remove_spaces(text):\r\n return (re.sub(' +',' ',text))"
    },
    {
        "number": 893,
        "prompt": "Write a python function to get the last element of each sublist.\ndef Extract(lst): \n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    return [sublist[-1] for sublist in lst] \n  \n# Test the function \nlst = [[1, 2, 3], [4, 5, 6], [7, 8, 9]] \nprint(Extract(lst) ) ",
        "generated_testcode": "assert Extract([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [3, 6, 9]\n",
        "test": "assert Extract([[1, 2, 3], [4, 5], [6, 7, 8, 9]]) == [3, 5, 9]\nassert Extract([['x', 'y', 'z'], ['m'], ['a', 'b'], ['u', 'v']]) == ['z', 'm', 'b', 'v']\nassert Extract([[1, 2, 3], [4, 5]]) == [3, 5]",
        "canonical_solution": "def Extract(lst): \r\n    return [item[-1] for item in lst] "
    },
    {
        "number": 894,
        "prompt": "Write a function to convert the given string of float type into tuple.\ndef float_to_tuple(test_str):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    return tuple(map(float, test_str.split(','))\n\n#Example usage:\nprint(float_to_tuple(\"34.5,56.7,78.8\")) # Output: (34.5, 56.7, 78.8)\nprint(float_to_tuple(\"9.3,4.5,87.6\")) # Output: (9.3, 4.5, 87.6)\nprint(float_to_tuple(\"23.6,9.12\")) # Output: (23.6, 9.12) ",
        "generated_testcode": "assert float_to_tuple(\"1.23\") == (1, 2, 3)\n",
        "test": "assert float_to_tuple(\"1.2, 1.3, 2.3, 2.4, 6.5\") == (1.2, 1.3, 2.3, 2.4, 6.5)\nassert float_to_tuple(\"2.3, 2.4, 5.6, 5.4, 8.9\") == (2.3, 2.4, 5.6, 5.4, 8.9)\nassert float_to_tuple(\"0.3, 0.5, 7.8, 9.4\") == (0.3, 0.5, 7.8, 9.4)",
        "canonical_solution": "def float_to_tuple(test_str):\r\n  res = tuple(map(float, test_str.split(', ')))\r\n  return (res) "
    },
    {
        "number": 895,
        "prompt": "Write a function to find the maximum sum of subsequences of given array with no adjacent elements.\ndef max_sum_subseq(A):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    n = len(A)\n    # create dp array\n    dp = [0] * n\n    # dp[i] stores the maximum sum of non-adjacent elements ending at index i\n    for i in range(1, n):\n        dp[i] = max(dp[i-1], A[i])\n        if i > 1:\n            dp[i] = max(dp[i], dp[i-2]+A[i])\n    # now find the maximum sum of all dp[i]'s\n    max_sum = dp[0]\n    for i in range(1, n):\n        max_sum = max(max_sum, dp[i])\n    return max_sum\n\n# example usage\nA = [1, 2, 3, 4, 3, 2]\nprint(max_sum_subseq(A)) # output: 7\n# Explanation: the maximum sum of non-adjacent elements is 7, which is 2 + 3 + 4 = 9\n",
        "generated_testcode": "assert max_sum_subseq([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 30\n",
        "test": "assert max_sum_subseq([1, 2, 9, 4, 5, 0, 4, 11, 6]) == 26\nassert max_sum_subseq([1, 2, 9, 5, 6, 0, 5, 12, 7]) == 28\nassert max_sum_subseq([1, 3, 10, 5, 6, 0, 6, 14, 21]) == 44",
        "canonical_solution": "def max_sum_subseq(A):\r\n    n = len(A)\r\n    if n == 1:\r\n        return A[0]\r\n    look_up = [None] * n\r\n    look_up[0] = A[0]\r\n    look_up[1] = max(A[0], A[1])\r\n    for i in range(2, n):\r\n        look_up[i] = max(look_up[i - 1], look_up[i - 2] + A[i])\r\n        look_up[i] = max(look_up[i], A[i])\r\n    return look_up[n - 1]"
    },
    {
        "number": 896,
        "prompt": "Write a function to sort a list in increasing order by the last element in each tuple from a given list of non-empty tuples.\ndef last(n):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    n.sort(key=lambda x: x[-1])\n    return n\n\n# Example usage:\nn = [(2, 5), (1, 3), (4, 6), (1, 2), (3, 7), (3, 8)]\nprint(last(n))  # Output: [(1, 2), (2, 5), (3, 7), (4, 6), (3, 8)]\n\n# Your code here\ndef last(n):\n    return sorted(n, key=lambda x: x[-1])\n\n# Example usage:\nn = [(2, 5), (1, 3), (4, 6), (1, 2), (3, 7), (3, 8)]\nprint(last(n))  # Output: [(1, 2), (2, 5), (4, 6), (1, 3), (3, 7), (3, 8)]\n\n# Your code here\ndef last(n):\n    n.sort(key=lambda x: x[-1])\n    return n\n\n# Example usage:\nn = [(2, 5), (1, 3), (4, 6), (1, 2), (3, 7), (3, 8)]\nprint(last(n))  # Output: [(1, 2), (2, 5), (4, 6), (1, 3), (3, 8), (3, 7)]\n\n#",
        "generated_testcode": "",
        "test": "assert sort_list_last([(2, 5), (1, 2), (4, 4), (2, 3), (2, 1)])==[(2, 1), (1, 2), (2, 3), (4, 4), (2, 5)] \nassert sort_list_last([(9,8), (4, 7), (3,5), (7,9), (1,2)])==[(1,2), (3,5), (4,7), (9,8), (7,9)] \nassert sort_list_last([(20,50), (10,20), (40,40)])==[(10,20),(40,40),(20,50)] ",
        "canonical_solution": "def last(n):\r\n   return n[-1]\r\ndef sort_list_last(tuples):\r\n  return sorted(tuples, key=last)"
    },
    {
        "number": 897,
        "prompt": "Write a python function to check whether the word is present in a given sentence or not.\ndef is_Word_Present(sentence,word): \n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    words = sentence.split()\n    for i in range(len(words)):\n        if words[i] == word:\n            return True\n    return False\n\n# Testing the function\nprint(is_Word_Present(\"hello world\", \"world\"))  # Output: True\nprint(is_Word_Present(\"hello world\", \"hello\"))  # Output: True\nprint(is_Word_Present(\"hello world\", \"hi\"))  # Output: False\nprint(is_Word_Present(\"hello world\", \"Hello\"))  # Output: False\nprint(is_Word_Present(\"hello world\", \"world hello\"))  # Output: True\n\n# Time Complexity: O(n)\n# Space Complexity: O(1) ",
        "generated_testcode": "assert is_Word_Present(\"Hello World\",\"Hello\") == True\n",
        "test": "assert is_Word_Present(\"machine learning\",\"machine\") == True\nassert is_Word_Present(\"easy\",\"fun\") == False\nassert is_Word_Present(\"python language\",\"code\") == False",
        "canonical_solution": "def is_Word_Present(sentence,word): \r\n    s = sentence.split(\" \") \r\n    for i in s:  \r\n        if (i == word): \r\n            return True\r\n    return False"
    },
    {
        "number": 898,
        "prompt": "Write a function to extract specified number of elements from a given list, which follow each other continuously.\ndef extract_elements(numbers, n):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": true,
        "answer": "    if n > len(numbers):\n        return []\n    else:\n        return numbers[:n]\n\n# Example usage:\nprint(extract_elements([1, 2, 3, 4, 5, 6, 7, 8, 9], 3)) # Output: [1, 2, 3]\nprint(extract_elements([1, 2, 3, 4, 5, 6, 7, 8, 9], 7)) # Output: [1, 2, 3, 4, 5, 6, 7, 8, 9]\nprint(extract_elements([1, 2, 3, 4, 5, 6, 7, 8, 9], 10)) # Output: []\nprint(extract_elements([], 1)) # Output: []\n",
        "generated_testcode": "assert extract_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3) == [1, 2, 3]\n",
        "test": "assert extract_elements([1, 1, 3, 4, 4, 5, 6, 7],2)==[1, 4]\nassert extract_elements([0, 1, 2, 3, 4, 4, 4, 4, 5, 7],4)==[4]\nassert extract_elements([0,0,0,0,0],5)==[0]",
        "canonical_solution": "from itertools import groupby \r\ndef extract_elements(numbers, n):\r\n    result = [i for i, j in groupby(numbers) if len(list(j)) == n] \r\n    return result"
    },
    {
        "number": 899,
        "prompt": "Write a python function to check whether an array can be sorted or not by picking only the corner elements.\ndef check(arr,n): \n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    min_corner = min(arr[0], arr[n-1])\n    max_corner = max(arr[0], arr[n-1])\n    for i in range(1, n-1): \n        if arr[i] > max_corner: \n            return False\n        else: \n            max_corner = max(max_corner, arr[i]) \n        if arr[i] < min_corner: \n            return False\n        else: \n            min_corner = min(min_corner, arr[i]) \n    return True\n\n# Test the function \narr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] \nn = len(arr) \nif(check(arr, n)): \n    print(\"The array can be sorted by picking corner elements\") \nelse: \n    print(\"The array cannot be sorted by picking corner elements\") \n\n# Output: The array can be sorted by picking corner elements ",
        "generated_testcode": "assert check([1,2,3,4,5,6,7,8,9], 6) == True\n",
        "test": "assert check([3,2,1,2,3,4],6) == True\nassert check([2,1,4,5,1],5) == True\nassert check([1,2,2,1,2,3],6) == True",
        "canonical_solution": "def check(arr,n): \r\n    g = 0 \r\n    for i in range(1,n): \r\n        if (arr[i] - arr[i - 1] > 0 and g == 1): \r\n            return False\r\n        if (arr[i] - arr[i] < 0): \r\n            g = 1\r\n    return True"
    },
    {
        "number": 900,
        "prompt": "Write a function where a string will start with a specific number.\ndef match_num(string):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    if string.startswith('123'):\n        return True\n    else:\n        return False\n\n# Example usage:\nprint(match_num('123hello')) # True\nprint(match_num('456hello')) # False\n\n# Check if the string has a specific word at the beginning\ndef match_word(string, word):\n    if string.startswith(word):\n        return True\n    else:\n        return False\n\n# Example usage:\nprint(match_word('hello world', 'hello')) # True\nprint(match_word('world hello', 'hello')) # False\n\n# Check if the string ends with a specific word\ndef match_end_word(string, word):\n    if string.endswith(word):\n        return True\n    else:\n        return False\n\n# Example usage:\nprint(match_end_word('hello world', 'world')) # True\nprint(match_end_word('hello python', 'python')) # False\n\n# Check if a string contains a specific word\ndef match_contain(string, word):\n    if word in string:\n        return True\n    else:\n        return False\n\n# Example usage:\nprint(match_contain('hello world', 'world')) # True\nprint(match_contain('hello python', 'java')) # False ",
        "generated_testcode": "assert match_num(\"123hello\") == True\n",
        "test": "assert match_num('5-2345861')==True\nassert match_num('6-2345861')==False\nassert match_num('78910')==False",
        "canonical_solution": "import re\r\ndef match_num(string):\r\n    text = re.compile(r\"^5\")\r\n    if text.match(string):\r\n        return True\r\n    else:\r\n        return False"
    },
    {
        "number": 901,
        "prompt": "Write a function to find the smallest multiple of the first n numbers.\ndef smallest_multiple(n):\n",
        "checkpoint": "13B",
        "pass": 5,
        "correct": true,
        "answer": "    l = []\n    for i in range(1, n+1):\n        l.append(i)\n    return find_smallest_multiple(l)\n\ndef find_smallest_multiple(l):\n    def gcd(a, b):\n        while b != 0:\n            a, b = b, a % b\n        return a\n\n    def lcm(a, b):\n        return (a * b) // gcd(a, b)\n\n    lcm_result = 1\n    for i in l:\n        lcm_result = lcm(lcm_result, i)\n    return lcm_result\n\nprint(smallest_multiple(20))\nprint(smallest_multiple(10))\nprint(smallest_multiple(6))\nprint(smallest_multiple(12))\nprint(smallest_multiple(18))\n\n# Output:\n# 232791200\n# 2520\n# 1\n# 27720\n# 60480",
        "generated_testcode": "assert smallest_multiple(2) == 2\n",
        "test": "assert smallest_multiple(13)==360360\nassert smallest_multiple(2)==2\nassert smallest_multiple(1)==1",
        "canonical_solution": "def smallest_multiple(n):\r\n    if (n<=2):\r\n      return n\r\n    i = n * 2\r\n    factors = [number  for number in range(n, 1, -1) if number * 2 > n]\r\n    while True:\r\n        for a in factors:\r\n            if i % a != 0:\r\n                i += n\r\n                break\r\n            if (a == factors[-1] and i % a == 0):\r\n                return i"
    },
    {
        "number": 902,
        "prompt": "Write a function to combine two dictionaries by adding values for common keys.\ndef add_dict(d1,d2):\n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    result = {}\n    for key in d1.keys() & d2.keys():\n        result[key] = d1[key] + d2[key]\n    for key in d1.keys() - d2.keys():\n        result[key] = d1[key]\n    for key in d2.keys() - d1.keys():\n        result[key] = d2[key]\n    return result\n\nd1 = {'a': 10, 'b': 20, 'c': 30}\nd2 = {'a': 5, 'b': 8, 'd': 15}\nprint(add_dict(d1,d2))\n\n#Output: {'a': 15, 'b': 38, 'c': 30, 'd': 15}\n\n#Explanation:\n#The keys 'a' and 'b' are present in both dictionaries, so their values are added and stored in the result dictionary.\n#The key 'c' is only present in d1 and is directly copied over to the result dictionary.\n#The key 'd' is only present in d2 and is directly copied over to the result dictionary. ",
        "generated_testcode": "assert add_dict({'a':1, 'b':2}, {'b':3, 'c':4}) == {'a':1, 'b':5, 'c':4}\n",
        "test": "assert add_dict({'a': 100, 'b': 200, 'c':300},{'a': 300, 'b': 200, 'd':400})==({'b': 400, 'd': 400, 'a': 400, 'c': 300}) \nassert add_dict({'a': 500, 'b': 700, 'c':900},{'a': 500, 'b': 600, 'd':900})==({'b': 1300, 'd': 900, 'a': 1000, 'c': 900}) \nassert add_dict({'a':900,'b':900,'d':900},{'a':900,'b':900,'d':900})==({'b': 1800, 'd': 1800, 'a': 1800})",
        "canonical_solution": "from collections import Counter\r\ndef add_dict(d1,d2):\r\n   add_dict = Counter(d1) + Counter(d2)\r\n   return add_dict"
    },
    {
        "number": 903,
        "prompt": "Write a python function to count the total unset bits from 1 to n.\ndef count_Unset_Bits(n) :  \n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    count = 0\n    for i in range(1,n+1) : \n        count += sum([1 for i in bin(i) if i == '0'])\n    return count\n\n# Test the function with an input\nprint(count_Unset_Bits(10)) # Output : 5 ",
        "generated_testcode": "assert count_Unset_Bits(5) == 2\n",
        "test": "assert count_Unset_Bits(2) == 1\nassert count_Unset_Bits(5) == 4\nassert count_Unset_Bits(14) == 17",
        "canonical_solution": "def count_Unset_Bits(n) :  \r\n    cnt = 0;  \r\n    for i in range(1,n + 1) : \r\n        temp = i;  \r\n        while (temp) :  \r\n            if (temp % 2 == 0) : \r\n                cnt += 1;  \r\n            temp = temp // 2;  \r\n    return cnt;  "
    },
    {
        "number": 904,
        "prompt": "Write a function to return true if the given number is even else return false.\ndef even_num(x):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    if x % 2 == 0:\n        return True\n    else:\n        return False\n\nprint(even_num(2)) # True\nprint(even_num(3)) # False\n\n# 2. Write a function to check if a number is odd or even\ndef odd_num(x):\n    if x % 2 != 0:\n        return True\n    else:\n        return False\n\nprint(odd_num(3)) # True\nprint(odd_num(4)) # False\n\n# 3. Write a function to return the sum of two numbers.\ndef sum(x, y):\n    return x + y\n\nprint(sum(2, 3)) # 5\n\n# 4. Write a function to return the subtraction of two numbers\ndef subtract(x, y):\n    return x - y\n\nprint(subtract(5, 3)) # 2\n\n# 5. Write a function to return the multiplication of two numbers\ndef multiply(x, y):\n    return x * y\n\nprint(multiply(5, 3)) # 15\n\n# 6. Write a function to return the division of two numbers\ndef divide(x, y):\n    return x / y\n\nprint(divide(8, 2)) # 4.0\n\n# 7. Write a function to return the remainder of two numbers\ndef remainder(x, y):\n    return x % y\n\nprint(remainder(5, 2)) # 1\n",
        "generated_testcode": "assert even_num(4) == True\n",
        "test": "assert even_num(13.5)==False\nassert even_num(0)==True\nassert even_num(-9)==False",
        "canonical_solution": "def even_num(x):\r\n  if x%2==0:\r\n     return True\r\n  else:\r\n    return False"
    },
    {
        "number": 905,
        "prompt": "Write a python function to find the sum of squares of binomial co-efficients.\ndef factorial(start,end): \n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    factorial = 1\n    for i in range(start,end+1): \n        factorial = factorial * i \n    return factorial \n  \ndef binomial(n, k): \n    return factorial(n) // (factorial(k) * factorial(n-k)) \n  \ndef sum_of_squares(n): \n    sum = 0\n    for i in range(1, n+1): \n        sum += binomial(n, i)**2\n    return sum \n  \nn = 5\nprint(\"Sum of squares of binomial co-efficients for n =\", n, \"is\", sum_of_squares(n)) \n# Output: Sum of squares of binomial co-efficients for n = 5 is 165\n\n#Time Complexity : O(n^2)\n#Space Complexity : O(1) ",
        "generated_testcode": "assert factorial(5,10) == 24*30240\n",
        "test": "assert sum_of_square(4) == 70\nassert sum_of_square(5) == 252\nassert sum_of_square(2) == 6",
        "canonical_solution": "def factorial(start,end): \r\n    res = 1 \r\n    for i in range(start,end + 1): \r\n        res *= i      \r\n    return res \r\ndef sum_of_square(n): \r\n   return int(factorial(n + 1, 2 * n)  /factorial(1, n)) "
    },
    {
        "number": 906,
        "prompt": "Write a function to extract year, month and date from a url by using regex.\ndef extract_date(url):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    # Your code here\n    import re\n    match = re.search(r'\\d{4}-\\d{2}-\\d{2}', url)\n    if match:\n        return match.group(0)\n    else:\n        return None\n    \n# Example usage:\nurl = 'https://en.wikipedia.org/wiki/Main_Page/2021-10-01'\nprint(extract_date(url))  # Output: '2021-10-01'\n\nurl = 'https://en.wikipedia.org/wiki/Python_(programming_language)'\nprint(extract_date(url))  # Output: None\n\nurl = 'https://en.wikipedia.org/wiki/Python_(programming_language)/2021-10-01'\nprint(extract_date(url))  # Output: '2021-10-01'\n\nurl = 'https://en.wikipedia.org/wiki/Python_(programming_language)/2021-13-01'\nprint(extract_date(url))  # Output: None (month is invalid)\n\nurl = 'https://en.wikipedia.org/wiki/Python_(programming_language)/2021-10-32'\nprint(extract_date(url))  # Output: None (day is invalid)\n\nurl = 'https://en.wikipedia.org/wiki/Python_(programming_language)/2021-02-29'\nprint(extract_date(",
        "generated_testcode": "assert extract_date(\"https://www.example.com/2021/09/10/example-post\") == (2021, 9, 10)\n",
        "test": "assert extract_date(\"https://www.washingtonpost.com/news/football-insider/wp/2016/09/02/odell-beckhams-fame-rests-on-one-stupid-little-ball-josh-norman-tells-author/\") == [('2016', '09', '02')]\nassert extract_date(\"https://www.indiatoday.in/movies/celebrities/story/wp/2020/11/03/odeof-sushant-singh-rajput-s-death-his-brother-in-law-shares-advice-for-fans-1749646/\") == [('2020', '11', '03')]\nassert extract_date(\"https://economictimes.indiatimes.com/news/economy/2020/12/29/finance/pension-assets-under-pfrda-touch-rs-5-32-lakh-crore/articleshow/79736619.cms\") == [('2020', '12', '29')]",
        "canonical_solution": "import re\r\ndef extract_date(url):\r\n        return re.findall(r'/(\\d{4})/(\\d{1,2})/(\\d{1,2})/', url)"
    },
    {
        "number": 907,
        "prompt": "Write a function to print the first n lucky numbers.\ndef lucky_num(n):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    count = 0\n    num = 1\n    while count < n:\n        if len(str(num) == len(set(str(num)):\n            count += 1\n            print(num)\n        num += 1\n\n# Test the function\nlucky_num(10)\n\n# Output: 2 3 4 5 6 7 8 14 16 17 19 23 26 28 34 39 42 45 48 53 56 63 65 69 72 75 78 81 84 89 90 92 94 97 100 103 109 1111 114 116 120 127 128 130 132 133 135 139 140 142 143 145 148 149 151 156 159 160 163 165 168 171 172 174 177 179 182 185 187 188 190 193 194 197 198 199 200 201 204",
        "generated_testcode": "assert lucky_num(5) == [4, 7, 13, 16, 23, 28]\n",
        "test": "assert lucky_num(10)==[1, 3, 7, 9, 13, 15, 21, 25, 31, 33] \nassert lucky_num(5)==[1, 3, 7, 9, 13]\nassert lucky_num(8)==[1, 3, 7, 9, 13, 15, 21, 25]",
        "canonical_solution": "def lucky_num(n):\r\n List=range(-1,n*n+9,2)\r\n i=2\r\n while List[i:]:List=sorted(set(List)-set(List[List[i]::List[i]]));i+=1\r\n return List[1:n+1]"
    },
    {
        "number": 908,
        "prompt": "Write a function to find the fixed point in the given array.\ndef find_fixed_point(arr, n): \n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    for i in range(n): \n        if arr[i] == i: \n            return i \n    return -1\n\narr = [2, 5, 7, 8, 3, 6, 1, 4] \nn = len(arr) \nresult = find_fixed_point(arr, n) \nif result == -1: \n    print(\"No fixed point found\") \nelse: \n    print(\"Fixed point is\", arr[result]) ",
        "generated_testcode": "assert find_fixed_point([1, 2, 3, 4, 5, 6, 7], 5) == None\n",
        "test": "assert find_fixed_point([-10, -1, 0, 3, 10, 11, 30, 50, 100],9) == 3\nassert find_fixed_point([1, 2, 3, 4, 5, 6, 7, 8],8) == -1\nassert find_fixed_point([0, 2, 5, 8, 17],5) == 0",
        "canonical_solution": "def find_fixed_point(arr, n): \r\n\tfor i in range(n): \r\n\t\tif arr[i] is i: \r\n\t\t\treturn i \r\n\treturn -1"
    },
    {
        "number": 909,
        "prompt": "Write a function to find the previous palindrome of a specified number.\ndef previous_palindrome(num):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    while True:\n        num -= 1\n        if str(num) == str(num)[::-1]:\n            return num\n\n# Test the function\nprint(previous_palindrome(1331))  # Output: 121\nprint(previous_palindrome(123))  # Output: 121\nprint(previous_palindrome(153))  # Output: 121\nprint(previous_palindrome(1221)) # Output: 121\nprint(previous_palindrome(99))  # Output: 989\nprint(previous_palindrome(100)) # Output: 99",
        "generated_testcode": "assert previous_palindrome(12321) == 1221\n",
        "test": "assert previous_palindrome(99)==88\nassert previous_palindrome(1221)==1111\nassert previous_palindrome(120)==111",
        "canonical_solution": "def previous_palindrome(num):\r\n    for x in range(num-1,0,-1):\r\n        if str(x) == str(x)[::-1]:\r\n            return x"
    },
    {
        "number": 910,
        "prompt": "Write a function to validate a gregorian date.\ndef check_date(m, d, y):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": true,
        "answer": "    if m == 2:\n        if y % 4 == 0 and (y % 100 != 0 or y % 400 == 0):\n            if d > 29 or d < 1:\n                return False\n        else:\n            if d > 28 or d < 1:\n                return False\n    elif m == 4 or m == 6 or m == 9 or m == 11:\n        if d > 30 or d < 1:\n            return False\n    else:\n        if d > 31 or d < 1:\n            return False\n    return True\n\ndef is_leap(year):\n    if year % 4 == 0 and (year % 100 != 0 or year % 400 == 0):\n        return True\n    return False\n\ndef check_gregorian_date(day, month, year):\n    if day < 1 or month < 1 or year < 1:\n        return False\n    if month > 12 or day > 31 or month > 12:\n        return False\n    if day < 1 or day > 31:\n        return False\n    if month == 2:\n        if year % 4 == 0 and (year % 100 != 0 or year % 400 == 0):\n            if day > 29:\n                return False\n        else:\n            if day > 28:\n                return False\n",
        "generated_testcode": "assert check_date(2, 29, 2020) == True\n",
        "test": "assert check_date(11,11,2002)==True\nassert check_date(13,11,2002)==False\nassert check_date('11','11','2002')==True",
        "canonical_solution": "import datetime\r\ndef check_date(m, d, y):\r\n    try:\r\n        m, d, y = map(int, (m, d, y))\r\n        datetime.date(y, m, d)\r\n        return True\r\n    except ValueError:\r\n        return False"
    },
    {
        "number": 911,
        "prompt": "Write a function to compute maximum product of three numbers of a given array of integers using heap queue algorithm.\ndef maximum_product(nums):\n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    max1 = float('-inf')\n    max2 = float('-inf')\n    max3 = float('-inf')\n    min1 = float('inf')\n    for num in nums:\n        if num > max1:\n            max3 = max2\n            max2 = max1\n            max1 = num\n        elif num > max2:\n            max3 = max2\n            max2 = num\n        elif num > max3:\n            max3 = num\n        \n        if num < min1:\n            min1 = num\n            \n    return max(max1*max2*max3, max1*min1*min1)\n\n# Test cases\nprint(maximum_product([-10,-10,-10,-5,2,2,3,3,4])) # Output: 300\nprint(maximum_product([-10,2,3,4,-5,10,6,8,-20])) # Output: 480\nprint(maximum_product([-5,-4,2,3,-6,-10,-2,1,8])) # Output: 160\nprint(maximum_product([-5,-2,-6,-2,-2,1,-5])) # Output: 300\nprint(maximum_product([-2,-2,-3,0,1,2,3])) # Output: 6\nprint(maximum_product([-2,2,3,1,4,5])) # Output: 60\n",
        "generated_testcode": "assert maximum_product([1, 2, 3, 4, 5]) == 60\n",
        "test": "assert maximum_product( [12, 74, 9, 50, 61, 41])==225700\nassert maximum_product([25, 35, 22, 85, 14, 65, 75, 25, 58])==414375\nassert maximum_product([18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1])==2520",
        "canonical_solution": "def maximum_product(nums):\r\n    import heapq\r\n    a, b = heapq.nlargest(3, nums), heapq.nsmallest(2, nums)\r\n    return max(a[0] * a[1] * a[2], a[0] * b[0] * b[1])"
    },
    {
        "number": 912,
        "prompt": "Write a function to find ln, m lobb number.\ndef binomial_coeff(n, k): \n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    res = 1\n    for i in range(min(k, n-k)): \n        res = res * (n-i) // (i+1) \n    return res \n\ndef ln_lobb_number(n, m): \n    # Check for invalid input values \n    if n < 1 or m < 1 or n < m: \n        return -1\n    # Calculate the numerator and denominator \n    numerator = 1\n    denominator = 1\n    for i in range(m): \n        numerator *= n-i \n        denominator *= i+1\n    # Calculate the final result \n    return numerator // denominator \n\ndef m_lobb_number(n, m): \n    # Check for invalid input values \n    if n < 1 or m < 1 or n < m: \n        return -1\n    # Calculate the numerator and denominator \n    numerator = 1\n    for i in range(1, m+1): \n        numerator *= binomial_coeff(n, i) \n    return numerator \n\n# Test the function \nn = 5\nm = 3\nprint(f\"Ln({n} choose {m}) = {ln_lobb_number(n, m)}\") \nprint(f\"m! = {m_lobb_number(n, m)}\") ",
        "generated_testcode": "assert binomial_coeff(5, 3) == 10\n",
        "test": "assert int(lobb_num(5, 3)) == 35\nassert int(lobb_num(3, 2)) == 5\nassert int(lobb_num(4, 2)) == 20",
        "canonical_solution": "def binomial_coeff(n, k): \r\n\tC = [[0 for j in range(k + 1)] \r\n\t\t\tfor i in range(n + 1)] \r\n\tfor i in range(0, n + 1): \r\n\t\tfor j in range(0, min(i, k) + 1): \r\n\t\t\tif (j == 0 or j == i): \r\n\t\t\t\tC[i][j] = 1\r\n\t\t\telse: \r\n\t\t\t\tC[i][j] = (C[i - 1][j - 1] \r\n\t\t\t\t\t\t\t+ C[i - 1][j]) \r\n\treturn C[n][k] \r\ndef lobb_num(n, m): \r\n\treturn (((2 * m + 1) *\r\n\t\tbinomial_coeff(2 * n, m + n)) \r\n\t\t\t\t\t/ (m + n + 1))"
    },
    {
        "number": 913,
        "prompt": "Write a function to check for a number at the end of a string.\ndef end_num(string):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    # check if the last character of the string is a number using isdigit()\n    if string[-1].isdigit():\n        return True\n    else:\n        return False\n\n# Test the function\nprint(end_num(\"hello123\"))  # True\nprint(end_num(\"hello1a\"))  # False\nprint(end_num(\"123hello\")) # False\nprint(end_num(\"hello\"))   # False\n",
        "generated_testcode": "assert end_num(\"hello123\") == True\n",
        "test": "assert end_num('abcdef')==False\nassert end_num('abcdef7')==True\nassert end_num('abc')==False",
        "canonical_solution": "import re\r\ndef end_num(string):\r\n    text = re.compile(r\".*[0-9]$\")\r\n    if text.match(string):\r\n        return True\r\n    else:\r\n        return False"
    },
    {
        "number": 914,
        "prompt": "Write a python function to check whether the given string is made up of two alternating characters or not.\ndef is_Two_Alter(s):  \n",
        "checkpoint": "13B",
        "pass": 8,
        "correct": true,
        "answer": "    if len(s) < 2:\n        return False\n    prev = s[0]\n    curr = s[1]\n    for i in range(2, len(s), 2):\n        if prev == s[i] and curr == s[i-1]:\n            return False\n        else:\n            prev = curr\n            curr = s[i]\n    return True\n    \n# Test the function with an example\ns = \"AABBA\"\nprint(is_Two_Alter(s)) # Output: True\n\n# Test the function with another example\ns = \"ABAB\"\nprint(is_Two_Alter(s)) # Output: True\n\n# Test the function with another example\ns = \"AAABB\"\nprint(is_Two_Alter(s)) # Output: False\n\n# Test the function with another example\ns = \"AABBB\"\nprint(is_Two_Alter(s)) # Output: False ",
        "generated_testcode": "assert is_Two_Alter(\"AABBCC\") == True\n",
        "test": "assert is_Two_Alter(\"abab\") == True\nassert is_Two_Alter(\"aaaa\") == False\nassert is_Two_Alter(\"xyz\") == False",
        "canonical_solution": "def is_Two_Alter(s):  \r\n    for i in range (len( s) - 2) : \r\n        if (s[i] != s[i + 2]) : \r\n            return False\r\n    if (s[0] == s[1]): \r\n        return False\r\n    return True"
    },
    {
        "number": 915,
        "prompt": "Write a function to rearrange positive and negative numbers in a given array using lambda function.\ndef rearrange_numbs(array_nums):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    positive = list(filter(lambda x: x > 0, array_nums))\n    negative = list(filter(lambda x: x < 0, array_nums))\n    zero = list(filter(lambda x: x == 0, array_nums))\n    return positive + negative + zero\n\n\n# Test cases\nprint(rearrange_numbs([1, -3, 5, 0, -8, 7, 2, -6]))\n# Output: [1, 5, 7, -3, -6, -8, 0, 2]\n\nprint(rearrange_numbs([-1, 2, 0, -3, 4, 6, 8, 0, -2]))\n# Output: [4, 6, 8, -1, -3, 2, 0, 0, -2]\n\nprint(rearrange_numbs([1, 2, 3, 4, 5, 6, 7, 8, 9]))\n# Output: [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\nprint(rearrange_numbs([-1, -2, -3, -4, -5, -6, -7, -8, -9]))\n# Output: [-1, -2, -3, -4, -5, -6, -7, -8, -9]\n\nprint(rearrange",
        "generated_testcode": "assert rearrange_numbs([1, -2, 3, -4, 5, 6, -7]) == [-2, -4, -7, 1, 3, 5]\n",
        "test": "assert rearrange_numbs([-1, 2, -3, 5, 7, 8, 9, -10])==[2, 5, 7, 8, 9, -10, -3, -1]\nassert rearrange_numbs([10,15,14,13,-18,12,-20])==[10, 12, 13, 14, 15, -20, -18]\nassert rearrange_numbs([-20,20,-10,10,-30,30])==[10, 20, 30, -30, -20, -10]",
        "canonical_solution": "def rearrange_numbs(array_nums):\r\n  result = sorted(array_nums, key = lambda i: 0 if i == 0 else -1 / i)\r\n  return result "
    },
    {
        "number": 916,
        "prompt": "Write a function to find if there is a triplet in the array whose sum is equal to a given value.\ndef find_triplet_array(A, arr_size, sum): \n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": " \n    # Sort the given array \n    A.sort() \n  \n    # Fix the first element as A[0] \n    for i in range(0, arr_size-2): \n        # Fix the second element as A[i+1] \n        # Now look for the third element in remaining elements \n        j = i+1\n        k = arr_size-1\n        while (j < k): \n            if (A[i] + A[j] + A[k] == sum): \n                return True\n            elif (A[i] + A[j] + A[k] < sum): \n                j = j + 1\n            else: \n                k = k - 1\n    # If we reach here, then no triplet found \n    return False\n  \n# Driver program to test the above function \nA = [1, 4, 45, 6, 10, 16, 11] \narr_size = len(A) \nsum = 21\nif(find_triplet_array(A, arr_size, sum)): \n    print(\"Yes\") \nelse: \n    print(\"No\") \n\n# This code will output Yes \n# Time Complexity of this solution is O(N^2) ",
        "generated_testcode": "assert find_triplet_array([1, 4, 45, 6, 10, 8, 7, 2, 12, 11, 26, 18, 5], 9) == True\n",
        "test": "assert find_triplet_array([1, 4, 45, 6, 10, 8], 6, 22) == (4, 10, 8)\nassert find_triplet_array([12, 3, 5, 2, 6, 9], 6, 24) == (12, 3, 9)\nassert find_triplet_array([1, 2, 3, 4, 5], 5, 9) == (1, 3, 5)",
        "canonical_solution": "def find_triplet_array(A, arr_size, sum): \r\n\tfor i in range( 0, arr_size-2): \r\n\t\tfor j in range(i + 1, arr_size-1): \r\n\t\t\tfor k in range(j + 1, arr_size): \r\n\t\t\t\tif A[i] + A[j] + A[k] == sum: \r\n\t\t\t\t\treturn  A[i],A[j],A[k] \r\n\t\t\t\t\treturn True\r\n\treturn False"
    },
    {
        "number": 917,
        "prompt": "Write a function to find the sequences of one upper case letter followed by lower case letters.\ndef text_uppercase_lowercase(text):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    result = \"\"\n    upper_case = False\n    for i in range(len(text)):\n        if text[i].isupper():\n            result += \" \"\n            upper_case = True\n        elif text[i].islower():\n            if upper_case:\n                result += text[i]\n            else:\n                result += \" \" + text[i]\n        else:\n            result += text[i]\n        upper_case = False\n    return result.strip()\n\n\n# Test the function\nprint(text_uppercase_lowercase(\"Python is a high-level programming language\"))  # Output: P ython is a high-level programming language\nprint(text_uppercase_lowercase(\"Hello world!\"))  # Output: H ello world!\nprint(text_uppercase_lowercase(\"HELLO WORLD!\"))  # Output: H ELLO WORLD!\nprint(text_uppercase_lowercase(\"I Love Programming\"))  # Output: I Love Programming\nprint(text_uppercase_lowercase(\"I AM A COMPUTER SCIENTIST\"))  # Output: I AM A COMPUTER SCIENTIST\nprint(text_uppercase_lowercase(\"Tarantula is a venomous spider\"))  # Output: Tarantula is a venomous spider\nprint(text_uppercase_lowercase(\"The quick brown fox jumps over the lazy dog\"))  # Output: The quick brown fox jumps over the lazy dog\n\n# Output:",
        "generated_testcode": "assert text_uppercase_lowercase(\"Hello world\") == True\n",
        "test": "assert text_uppercase_lowercase(\"AaBbGg\")==('Found a match!')\nassert text_uppercase_lowercase(\"aA\")==('Not matched!')\nassert text_uppercase_lowercase(\"PYTHON\")==('Not matched!')",
        "canonical_solution": "import re\r\ndef text_uppercase_lowercase(text):\r\n        patterns = '[A-Z]+[a-z]+$'\r\n        if re.search(patterns, text):\r\n                return 'Found a match!'\r\n        else:\r\n                return ('Not matched!')"
    },
    {
        "number": 918,
        "prompt": "Write a function to count coin change.\ndef coin_change(S, m, n): \n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    t = [[0 for i in range(n+1)] for j in range(m)] \n    for i in range(m): \n        t[i][0] = 1\n    for j in range(1,n+1): \n        t[0][j] = 0\n  \n    for i in range(1,m): \n        for j in range(1,n+1): \n            if j < S[i-1]: \n                t[i][j] = t[i-1][j] \n            else: \n                t[i][j] = t[i-1][j] + t[i][j-S[i-1]] \n  \n    return t[m-1][n] \n  \n# Driver program to test above function \nS = [1, 2, 3] \nm = len(S) \nn = 4\nprint(coin_change(S, m, n)) \n",
        "generated_testcode": "assert coin_change([1, 2, 3], 4, 4) == 4\n",
        "test": "assert coin_change([1, 2, 3],3,4)==4\nassert coin_change([4,5,6,7,8,9],6,9)==2\nassert coin_change([4,5,6,7,8,9],6,4)==1",
        "canonical_solution": "def coin_change(S, m, n): \r\n    table = [[0 for x in range(m)] for x in range(n+1)] \r\n    for i in range(m): \r\n        table[0][i] = 1\r\n    for i in range(1, n+1): \r\n        for j in range(m): \r\n            x = table[i - S[j]][j] if i-S[j] >= 0 else 0\r\n            y = table[i][j-1] if j >= 1 else 0 \r\n            table[i][j] = x + y   \r\n    return table[n][m-1] "
    },
    {
        "number": 919,
        "prompt": "Write a python function to multiply all items in the list.\ndef multiply_list(items):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    result = 1\n    for item in items:\n        result *= item\n    return result\n\n# Test the function with the following list\nmy_list = [1, 2, 3, 4, 5, 6]\nprint(multiply_list(my_list))  # Output: 120\n\n# The expected output is 120. ",
        "generated_testcode": "assert multiply_list([1, 2, 3, 4, 5]) == 1 * 2 * 3 * 4 * 5\n",
        "test": "assert multiply_list([1,-2,3]) == -6\nassert multiply_list([1,2,3,4]) == 24\nassert multiply_list([3,1,2,3]) == 18",
        "canonical_solution": "def multiply_list(items):\r\n    tot = 1\r\n    for x in items:\r\n        tot *= x\r\n    return tot"
    },
    {
        "number": 920,
        "prompt": "Write a function to remove all tuples with all none values in the given tuple list.\ndef remove_tuple(test_list):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": true,
        "answer": "    return [t for t in test_list if None not in t]\n\n# Example usage:\ntest_list = [(1, 2, None), (3, 4), (None, 5), (6, None, None), (7, 8, 9)]\nprint(remove_tuple(test_list)) # Output: [(3, 4), (7, 8, 9)]\n\n# Time Complexity: O(n)\n# Space Complexity: O(n)",
        "generated_testcode": "",
        "test": "assert remove_tuple([(None, 2), (None, None), (3, 4), (12, 3), (None, )] ) == '[(None, 2), (3, 4), (12, 3)]'\nassert remove_tuple([(None, None), (None, None), (3, 6), (17, 3), (None,1 )] ) == '[(3, 6), (17, 3), (None, 1)]'\nassert remove_tuple([(1, 2), (2, None), (3, None), (24, 3), (None, None )] ) == '[(1, 2), (2, None), (3, None), (24, 3)]'",
        "canonical_solution": "def remove_tuple(test_list):\r\n  res = [sub for sub in test_list if not all(ele == None for ele in sub)]\r\n  return (str(res)) "
    },
    {
        "number": 921,
        "prompt": "Write a function to perform chunking of tuples each of size n.\ndef chunk_tuples(test_tup, N):\n",
        "checkpoint": "13B",
        "pass": 5,
        "correct": true,
        "answer": "    return [test_tup[i:i+N] for i in range(0, len(test_tup), N)]\n\n# Test case\ntest_tup = (1, 2, 3, 4, 5, 6, 7, 8, 9)\nprint(chunk_tuples(test_tup, 3))  # Output: [(1, 2, 3), (4, 5, 6), (7, 8, 9)]\n\n# Test case 2\ntest_tup2 = (10, 11, 12, 13, 14, 15, 16, 17)\nprint(chunk_tuples(test_tup2, 2))  # Output: [(10, 11), (12, 13), (14, 15), (16, 17)]\n\n# Test case 3\ntest_tup3 = (1, 2, 3, 4, 5, 6, 7, 8, 9, 10)\nprint(chunk_tuples(test_tup3, 4))  # Output: [(1, 2, 3, 4, 5), (6, 7, 8, 9), (10,)]\n\n# Test case 4\ntest_tup4 = (1,)\nprint(chunk_tuples(test_tup4, 2))  # Output",
        "generated_testcode": "",
        "test": "assert chunk_tuples((10, 4, 5, 6, 7, 6, 8, 3, 4), 3) == [(10, 4, 5), (6, 7, 6), (8, 3, 4)]\nassert chunk_tuples((1, 2, 3, 4, 5, 6, 7, 8, 9), 2) == [(1, 2), (3, 4), (5, 6), (7, 8), (9,)]\nassert chunk_tuples((11, 14, 16, 17, 19, 21, 22, 25), 4) == [(11, 14, 16, 17), (19, 21, 22, 25)]",
        "canonical_solution": "def chunk_tuples(test_tup, N):\r\n  res = [test_tup[i : i + N] for i in range(0, len(test_tup), N)]\r\n  return (res) "
    },
    {
        "number": 922,
        "prompt": "Write a function to find a pair with the highest product from a given array of integers.\ndef max_product(arr): \n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": true,
        "answer": "    arr.sort()\n    return max(arr[-1]*arr[-2], arr[0]*arr[1])\n\n# Test the function\nprint(max_product([-10, -10, 1, 3, 5, 6])) # Output: 50\nprint(max_product([-10, -5, 3, 6, 2])) # Output: 30\nprint(max_product([5, 1, -10, 3, 2])) # Output: 50\nprint(max_product([-5, -2, -7, 3, 8, -10])) # Output: 80\nprint(max_product([-1, -2, 3, 4, 5, 6])) # Output: 30\nprint(max_product([-1, -2, -3, -4, -5, -6])) # Output: 36\n\n# Time complexity: O(n log n) due to the sorting step\n# Space complexity: O(1) as we are not using any additional data structure to store the input array",
        "generated_testcode": "assert max_product([1, 2, 3, 4, 5]) == 20\n",
        "test": "assert max_product([1, 2, 3, 4, 7, 0, 8, 4])==(7, 8)\nassert max_product([0, -1, -2, -4, 5, 0, -6])==(-4, -6)\nassert max_product([1, 3, 5, 6, 8, 9])==(8,9)",
        "canonical_solution": "def max_product(arr): \r\n    arr_len = len(arr) \r\n    if (arr_len < 2): \r\n        return None     \r\n    x = arr[0]; y = arr[1]    \r\n    for i in range(0, arr_len): \r\n        for j in range(i + 1, arr_len): \r\n            if (arr[i] * arr[j] > x * y): \r\n                x = arr[i]; y = arr[j] \r\n    return x,y   "
    },
    {
        "number": 923,
        "prompt": "Write a function to find the length of the shortest string that has both str1 and str2 as subsequences.\ndef super_seq(X, Y, m, n):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    dp = [[0] * (n + 1) for i in range(m + 1)]\n    for i in range(m + 1):\n        for j in range(n + 1):\n            if not i:\n                dp[i][j] = j\n            elif not j:\n                dp[i][j] = i\n            elif X[i - 1] == Y[j - 1]:\n                dp[i][j] = dp[i - 1][j - 1] + 1\n            else:\n                dp[i][j] = min(dp[i - 1][j], dp[i][j - 1])\n    return dp[m][n]\n\n\ndef shortest_supersequence(str1, str2):\n    m = len(str1)\n    n = len(str2)\n    lcs = super_seq(str1, str2, m, n)\n    return m + n - lcs\n\n# Example usage:\nstr1 = \"AGGTAB\"\nstr2 = \"GXTXAYB\"\nprint(shortest_supersequence(str1, str2))  # Output: 6\n\n# Explanation:\n# The shortest supersequence is \"AGXGTXAYB\" or \"AGTXGTABY\" ",
        "generated_testcode": "assert super_seq(\"AGGTAB\", \"GXTXAYB\", 6, 6) == 4\n",
        "test": "assert super_seq(\"AGGTAB\", \"GXTXAYB\", 6, 7) == 9\nassert super_seq(\"feek\", \"eke\", 4, 3) == 5\nassert super_seq(\"PARRT\", \"RTA\", 5, 3) == 6",
        "canonical_solution": "def super_seq(X, Y, m, n):\r\n\tif (not m):\r\n\t\treturn n\r\n\tif (not n):\r\n\t\treturn m\r\n\tif (X[m - 1] == Y[n - 1]):\r\n\t\treturn 1 + super_seq(X, Y, m - 1, n - 1)\r\n\treturn 1 + min(super_seq(X, Y, m - 1, n),\tsuper_seq(X, Y, m, n - 1))"
    },
    {
        "number": 924,
        "prompt": "Write a function to find maximum of two numbers.\ndef max_of_two( x, y ):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    if x > y:\n        return x\n    else:\n        return y\n\n# Test the function with values\nprint(max_of_two(10, 20)) # Output: 20\nprint(max_of_two(30, 10)) # Output: 30\n\n# Write a function to find sum of two numbers\ndef sum_of_two( x, y ):\n    return x + y\n\n# Test the function with values\nprint(sum_of_two(10, 20)) # Output: 30\nprint(sum_of_two(30, 10)) # Output: 40\n\n# Write a function to find product of two numbers\ndef multiply( x, y ):\n    return x * y\n\n# Test the function with values\nprint(multiply(10, 20)) # Output: 200\nprint(multiply(30, 10)) # Output: 300\n\n# Write a function to find the square of a number\ndef square( x ):\n    return x * x\n\n# Test the function with value\nprint(square(10)) # Output: 100\n\n# Write a function to find the square root of a number\nimport math\ndef square_root( x ):\n    return math.sqrt(x)\n\n# Test the function with value\nprint(square_root(16)) # Output: 4.0\n\n# Write a function to find the factorial of a",
        "generated_testcode": "assert max_of_two( 5, 10 ) == 10\n",
        "test": "assert max_of_two(10,20)==20\nassert max_of_two(19,15)==19\nassert max_of_two(-10,-20)==-10",
        "canonical_solution": "def max_of_two( x, y ):\r\n    if x > y:\r\n        return x\r\n    return y"
    },
    {
        "number": 925,
        "prompt": "Write a python function to calculate the product of all the numbers of a given tuple.\ndef mutiple_tuple(nums):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    product = 1\n    for num in nums:\n        product *= num\n    return product\n\n# Test the function with a tuple of numbers\nprint(mutiple_tuple((2, 3, 4, 5)) # Should print 120\nprint(mutiple_tuple((1, 2, 3, 4, 5)) # Should print 24\nprint(mutiple_tuple((10, 5, 2)) # Should print 100\n\n# Extension:\n# Write a function to calculate the sum of the first n natural numbers using the formula:\ndef sum_natural_numbers(n):\n    return n * (n + 1) / 2\n\n# Test the function with different values of n\nprint(sum_natural_numbers(5)) # Should print 15\nprint(sum_natural_numbers(10)) # Should print 55\nprint(sum_natural_numbers(100)) # Should print 5050\n\n# Extension:\n# Write a function to calculate the sum of all the numbers in a given list\ndef sum_list(numbers):\n    total = 0\n    for num in numbers:\n        total += num\n    return total\n\n# Test the function with a list of numbers\nprint(sum_list([1, 2, 3, 4, 5]) # Should print 10\nprint(sum_list([10, 5, 2, 7, 3, 8]) # Should print",
        "generated_testcode": "assert mutiple_tuple((2, 3, 4, 5, 6) == 120\nprint(mutiple_tuple((2, 3, 4, 5, 6)) # should output 120\n\n",
        "test": "assert mutiple_tuple((4, 3, 2, 2, -1, 18)) == -864\nassert mutiple_tuple((1,2,3)) == 6\nassert mutiple_tuple((-2,-4,-6)) == -48",
        "canonical_solution": "def mutiple_tuple(nums):\r\n    temp = list(nums)\r\n    product = 1 \r\n    for x in temp:\r\n        product *= x\r\n    return product"
    },
    {
        "number": 926,
        "prompt": "Write a function to find n-th rencontres number.\ndef binomial_coeffi(n, k): \n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    res = 1\n    for i in range(k): \n        res *= (n - i) \n    for i in range(k): \n        res //= (i + 1) \n    return res\n\ndef nth_rencontres_number(n, p): \n    total = 0\n    for i in range(n): \n        total += binomial_coeffi(n, i) * p**i * (1-p)**(n-i) \n    return total \n\n# Example usage: \nn = 10\np = 0.5\nprint(nth_rencontres_number(n, p)) # Output: 44.775\n\n# Example usage: \nn = 5\np = 0.25\nprint(nth_rencontres_number(n, p)) # Output: 15.3125 ",
        "generated_testcode": "assert binomial_coeffi(5, 2) == 10\n",
        "test": "assert rencontres_number(7, 2) == 924\nassert rencontres_number(3, 0) == 2\nassert rencontres_number(3, 1) == 3",
        "canonical_solution": "def binomial_coeffi(n, k): \r\n\tif (k == 0 or k == n): \r\n\t\treturn 1\r\n\treturn (binomial_coeffi(n - 1, k - 1) \r\n\t\t+ binomial_coeffi(n - 1, k)) \r\ndef rencontres_number(n, m): \r\n\tif (n == 0 and m == 0): \r\n\t\treturn 1\r\n\tif (n == 1 and m == 0): \r\n\t\treturn 0\r\n\tif (m == 0): \r\n\t\treturn ((n - 1) * (rencontres_number(n - 1, 0)+ rencontres_number(n - 2, 0))) \r\n\treturn (binomial_coeffi(n, m) * rencontres_number(n - m, 0))"
    },
    {
        "number": 927,
        "prompt": "Write a function to calculate the height of the given binary tree.\n\tdef __init__(self, data): \n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "\t\tself.data = data \n\t\tself.left = None\n\t\tself.right = None\n\ndef height(root): \n\tif root is None: \n\t\treturn 0\n\telse: \n\t\tleft_height = height(root.left) \n\t\tright_height = height(root.right) \n\n\t\tif left_height > right_height: \n\t\t\treturn left_height + 1\n\t\telse: \n\t\t\treturn right_height + 1\n\nroot = Node(1) \nroot.left = Node(2) \nroot.right = Node(3) \nroot.left.left = Node(4) \nroot.left.right = Node(5) \n\nprint(\"Height of tree is:\", height(root)) ",
        "generated_testcode": "assert (height(None) == 0)\n",
        "test": "assert (max_height(root)) == 3\nassert (max_height(root1)) == 5 \nassert (max_height(root2)) == 4",
        "canonical_solution": "class Node: \r\n\tdef __init__(self, data): \r\n\t\tself.data = data \r\n\t\tself.left = None\r\n\t\tself.right = None\r\ndef max_height(node): \r\n\tif node is None: \r\n\t\treturn 0 ; \r\n\telse : \r\n\t\tleft_height = max_height(node.left) \r\n\t\tright_height = max_height(node.right) \r\n\t\tif (left_height > right_height): \r\n\t\t\treturn left_height+1\r\n\t\telse: \r\n\t\t\treturn right_height+1"
    },
    {
        "number": 928,
        "prompt": "Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\ndef change_date_format(dt):\n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    year, month, day = dt.split(\"-\")\n    return f\"{day}-{month}-{year}\"\n\n# Example usage:\ndt = \"2020-05-26\"\nprint(change_date_format(dt)) # Output: \"26-05-2020\"\n",
        "generated_testcode": "assert change_date_format(\"2021-05-15\") == \"15-05-2021\"\n",
        "test": "assert change_date_format('2026-01-02')=='02-01-2026'\nassert change_date_format('2021-01-04')=='04-01-2021'\nassert change_date_format('2030-06-06')=='06-06-2030'",
        "canonical_solution": "import re\r\ndef change_date_format(dt):\r\n        return re.sub(r'(\\d{4})-(\\d{1,2})-(\\d{1,2})', '\\\\3-\\\\2-\\\\1', dt)\r\n        return change_date_format(dt)"
    },
    {
        "number": 929,
        "prompt": "Write a function to count repeated items of a tuple.\ndef count_tuplex(tuplex,value):  \n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    count = 0\n    for i in tuplex:\n        if i == value:\n            count += 1\n    return count\n\n# Test the function\ntup = (1, 2, 3, 4, 4, 5, 6, 6, 7, 8, 9, 10, 10)\nprint(count_tuplex(tup, 4)) # Output: 1\nprint(count_tuplex(tup, 6)) # Output: 2\nprint(count_tuplex(tup, 10)) # Output: 2\nprint(count_tuplex(tup, 20)) # Output: 0\n\n# A tuple with repeated items\ntup = (1, 2, 3, 4, 4, 5, 6, 6, 7, 8, 9, 10, 10)\n\n# A function to count repeated items in the tuple\ndef count_repeated_items(tup):\n    repeated = []\n    for i in tup:\n        if tup.count(i) > 1:\n            repeated.append(i)\n    return repeated\n\n# Test the function\nprint(count_repeated_items(tup)) # Output: [4, 6, 10]\n\n# A tuple with repeated items\ntup = (1, 2, 3, 4, 4, 5, 6, 6, 7, 8",
        "generated_testcode": "assert count_tuplex((1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,10), 1) == 3\n",
        "test": "assert count_tuplex((2, 4, 5, 6, 2, 3, 4, 4, 7),4)==3\nassert count_tuplex((2, 4, 5, 6, 2, 3, 4, 4, 7),2)==2\nassert count_tuplex((2, 4, 7, 7, 7, 3, 4, 4, 7),7)==4",
        "canonical_solution": "def count_tuplex(tuplex,value):  \r\n  count = tuplex.count(value)\r\n  return count"
    },
    {
        "number": 930,
        "prompt": "Write a function that matches a string that has an a followed by zero or more b's by using regex.\ndef text_match(text):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    pattern = r'a.*b'\n    if re.search(pattern, text):\n        return True\n    else:\n        return False\n\n# Test cases\nprint(text_match('ab')) # True\nprint(text_match('abc')) # True\nprint(text_match('abcbbb')) # True\nprint(text_match('abcdefg')) # False\nprint(text_match('abcdefgb')) # True\nprint(text_match('b')) # False\nprint(text_match('')) # False\n```\n\nIn this function, we are using the regex pattern `r'a.*b'` which matches any string that has an \"a\" followed by zero or more \"b's\". The `.*` is a special character in regex that matches any character (except newline) zero or more times. So, the pattern `a.*b` matches a string that starts with \"a\" and ends with \"b\". The `re.search` function checks if this pattern matches the given text and returns `True` or `False` depending on whether the pattern is found in the text or not. ",
        "generated_testcode": "assert text_match(\"ab\") == True\n",
        "test": "assert text_match(\"msb\") == 'Not matched!'\nassert text_match(\"a0c\") == 'Found a match!'\nassert text_match(\"abbc\") == 'Found a match!'",
        "canonical_solution": "import re\r\ndef text_match(text):\r\n        patterns = 'ab*?'\r\n        if re.search(patterns,  text):\r\n                return ('Found a match!')\r\n        else:\r\n                return ('Not matched!')"
    },
    {
        "number": 931,
        "prompt": "Write a function to calculate the sum of series 1\u00b3+2\u00b3+3\u00b3+\u2026.+n\u00b3.\ndef sum_series(number):\n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    series = 0\n    for i in range(1, number+1):\n        series += i**3\n    return series\n\n# Test the function\nprint(sum_series(5))  # Output: 225\nprint(sum_series(10)) # Output: 4110\nprint(sum_series(15)) # Output: 216115\n\n# Time Complexity: O(n)\n# Space Complexity: O(1) ",
        "generated_testcode": "assert sum_series(3) == 36\n",
        "test": "assert sum_series(7)==784\nassert sum_series(5)==225\nassert sum_series(15)==14400",
        "canonical_solution": "import math \r\ndef sum_series(number):\r\n total = 0\r\n total = math.pow((number * (number + 1)) /2, 2)\r\n return total"
    },
    {
        "number": 932,
        "prompt": "Write a function to remove duplicate words from a given list of strings.\ndef remove_duplic_list(l):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": true,
        "answer": "    unique_list = []\n    for i in l:\n        if i not in unique_list:\n            unique_list.append(i)\n    return unique_list\n\n\n# Test the function with the example list\nwords = [\"apple\", \"banana\", \"cherry\", \"apple\", \"banana\", \"date\", \"cherry\", \"elderberry\"]\nprint(remove_duplic_list(words))\n\n# Output: ['apple', 'banana', 'cherry', 'date', 'elderberry']\n\n\n# Test the function with an empty list\nwords2 = []\nprint(remove_duplic_list(words2))\n\n# Output: []\n\n# Test the function with a list with one word\nwords3 = [\"orange\"]\nprint(remove_duplic_list(words3))\n\n# Output: ['orange']\n\n# Test the function with a list with no duplicates\nwords4 = [\"cat\", \"dog\", \"fish\", \"elephant\"]\nprint(remove_duplic_list(words4))\n\n# Output: ['cat', 'dog', 'fish', 'elephant']\n\n# Test the function with a list with all duplicate words\nwords5 = [\"apple\", \"apple\", \"banana\", \"banana\", \"cherry\", \"cherry\", \"date\", \"date\", \"elderberry\", \"elderberry\"]\nprint(remove_duplic_list(words5))\n\n# Output: ['apple', 'banana', 'cherry', 'date', 'elderberry']",
        "generated_testcode": "assert remove_duplic_list(['apple', 'banana', 'orange', 'apple', 'grape', 'apple', 'orange']) == ['apple', 'banana', 'orange', 'grape']\n",
        "test": "assert remove_duplic_list([\"Python\", \"Exercises\", \"Practice\", \"Solution\", \"Exercises\"])==['Python', 'Exercises', 'Practice', 'Solution']\nassert remove_duplic_list([\"Python\", \"Exercises\", \"Practice\", \"Solution\", \"Exercises\",\"Java\"])==['Python', 'Exercises', 'Practice', 'Solution', 'Java']\nassert remove_duplic_list([\"Python\", \"Exercises\", \"Practice\", \"Solution\", \"Exercises\",\"C++\",\"C\",\"C++\"])==['Python', 'Exercises', 'Practice', 'Solution','C++','C']",
        "canonical_solution": "def remove_duplic_list(l):\r\n    temp = []\r\n    for x in l:\r\n        if x not in temp:\r\n            temp.append(x)\r\n    return temp"
    },
    {
        "number": 933,
        "prompt": "Write a function to convert camel case string to snake case string by using regex.\ndef camel_to_snake(text):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    return re.sub(r'(?<!^)(?=[A-Z])', '_', text).lower()\n\n# Example usage:\ncamel_to_snake('camelCase') # Output: 'camel_case'\ncamel_to_snake('CamelCase') # Output: 'camel_case'\ncamel_to_snake('camelCaseString') # Output: 'camel_case_string'\n\n# Write a function to convert snake_case string to camel case string\ndef snake_to_camel(text):\n    return re.sub(r'(_\\w)', lambda x: x.group(1)[1].upper(), text)\n\n# Example usage:\nsnake_to_camel('snake_case') # Output: 'snakeCase'\nsnake_to_camel('snake_case_string') # Output: 'snakeCaseString'\nsnake_to_camel('SNAKE_CASE') # Output: 'snakeCase'\nsnake_to_camel('snake_case_string') # Output: 'snakeCaseString'\n\n# Write a function to convert kebab-case string to snake case string\ndef kebab_to_snake(text):\n    return text.replace('-', '_')\n\n# Example usage:\nkebab_to_snake('kebab-case') # Output: 'kebab_case'\nkebab_to_snake('kebab-case",
        "generated_testcode": "assert camel_to_snake(\"helloWorld\") == \"hello_world\"\n",
        "test": "assert camel_to_snake('GoogleAssistant') == 'google_assistant'\nassert camel_to_snake('ChromeCast') == 'chrome_cast'\nassert camel_to_snake('QuadCore') == 'quad_core'",
        "canonical_solution": "import re\r\ndef camel_to_snake(text):\r\n  str1 = re.sub('(.)([A-Z][a-z]+)', r'\\1_\\2', text)\r\n  return re.sub('([a-z0-9])([A-Z])', r'\\1_\\2', str1).lower()"
    },
    {
        "number": 934,
        "prompt": "Write a function to find the nth delannoy number.\ndef dealnnoy_num(n, m): \n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    if n == 0 or m == 0: \n        return 1\n    elif m == 1 or n == 1: \n        return 1\n    else: \n        return dealnnoy_num(n-1, m-1) + dealnnoy_num(n-1, m) + dealnnoy_num(n, m-1) \n  \n# Driver code \nn = 4\nm = 3\nprint(dealnnoy_num(n, m)) ",
        "generated_testcode": "assert dealnnoy_num(5, 2) == 15\n",
        "test": "assert dealnnoy_num(3, 4) == 129\nassert dealnnoy_num(3, 3) == 63\nassert dealnnoy_num(4, 5) == 681",
        "canonical_solution": "def dealnnoy_num(n, m): \r\n\tif (m == 0 or n == 0) : \r\n\t\treturn 1\r\n\treturn dealnnoy_num(m - 1, n) + dealnnoy_num(m - 1, n - 1) + dealnnoy_num(m, n - 1)"
    },
    {
        "number": 935,
        "prompt": "Write a function to calculate the sum of series 1\u00b2+2\u00b2+3\u00b2+\u2026.+n\u00b2.\ndef series_sum(number):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": true,
        "answer": "    series_sum = 0\n    for i in range(1, number+1):\n        series_sum += i**2\n    return series_sum\n\n\n# Test the function with sample inputs\nprint(series_sum(5))  # Output: 55\nprint(series_sum(10)) # Output: 385\nprint(series_sum(15)) # Output: 12400\n\n# Alternatively, you can use a list comprehension to achieve the same result\ndef series_sum(number):\n    return sum([i**2 for i in range(1, number+1)])\n\n# Test the function with sample inputs\nprint(series_sum(5))  # Output: 55\nprint(series_sum(10)) # Output: 385\nprint(series_sum(15)) # Output: 1240 ",
        "generated_testcode": "assert series_sum(5) == 55 # 1\u00b2+2\u00b2+3\u00b2+4\u00b2+5\u00b2 = 1+4+9+16+25 = 31\n",
        "test": "assert series_sum(6)==91\nassert series_sum(7)==140\nassert series_sum(12)==650",
        "canonical_solution": "def series_sum(number):\r\n total = 0\r\n total = (number * (number + 1) * (2 * number + 1)) / 6\r\n return total"
    },
    {
        "number": 936,
        "prompt": "Write a function to re-arrange the given tuples based on the given ordered list.\ndef re_arrange_tuples(test_list, ord_list):\n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    result = []\n    for item in ord_list:\n        for tuple in test_list:\n            if item in tuple:\n                result.append(tuple)\n    return result\n\n\n\ntest_list = [(1, 2, 3), (4, 5, 6), (7, 8, 9), (10, 11, 12)]\nord_list = [1, 5, 2, 10]\nprint(re_arrange_tuples(test_list, ord_list))  # [(1, 2, 3), (7, 8, 9), (4, 5, 6)]\n\n\n# Explanation:\n# In the given code, we are iterating through the ordered list and for each item in the ordered list, we are iterating through the tuples in the test list. If the item is present in the tuple, we are appending it to the result list. \n# So, the result will be the tuple in the order of the given ordered list. ",
        "generated_testcode": "",
        "test": "assert re_arrange_tuples([(4, 3), (1, 9), (2, 10), (3, 2)],  [1, 4, 2, 3]) == [(1, 9), (4, 3), (2, 10), (3, 2)]\nassert re_arrange_tuples([(5, 4), (2, 10), (3, 11), (4, 3)],  [3, 4, 2, 3]) == [(3, 11), (4, 3), (2, 10), (3, 11)]\nassert re_arrange_tuples([(6, 3), (3, 8), (5, 7), (2, 4)],  [2, 5, 3, 6]) == [(2, 4), (5, 7), (3, 8), (6, 3)]",
        "canonical_solution": "def re_arrange_tuples(test_list, ord_list):\r\n  temp = dict(test_list)\r\n  res = [(key, temp[key]) for key in ord_list]\r\n  return (res) "
    },
    {
        "number": 937,
        "prompt": "Write a function to count the most common character in a given string.\ndef max_char(str1):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    if len(str1) == 0:\n        return None\n\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n\n    max_char = \"\"\n    max_count = 0\n    for char in char_count:\n        if char_count[char] > max_count:\n            max_char = char\n            max_count = char_count[char]\n\n    return max_char\n\n# Test the function\nprint(max_char(\"hello world\"))  # Output: \"l\"\nprint(max_char(\"Python is awesome\"))  # Output: \"o\"\nprint(max_char(\"abcdefg\"))  # Output: None\nprint(max_char(\"\"))  # Output: None\n\n# Output: l, o, None, None\n\n# Test the function using a different string\nprint(max_char(\"lorem ipsum dolor sit amet, consectetur adipiscing elit\"))  # Output: \"i\"\n\n# Output: i\n\n# Test the function with a string with spaces\nprint(max_char(\"Python is a great language Python is a great language\"))  # Output: \"t\"\n# Output: t ",
        "generated_testcode": "assert max_char(\"hello world\") == \"l\"\n",
        "test": "assert max_char(\"hello world\")==('l')\nassert max_char(\"hello \")==('l')\nassert max_char(\"python pr\")==('p')",
        "canonical_solution": "from collections import Counter \r\ndef max_char(str1):\r\n    temp = Counter(str1) \r\n    max_char = max(temp, key = temp.get)\r\n    return max_char"
    },
    {
        "number": 938,
        "prompt": "Write a function to find three closest elements from three sorted arrays.\ndef find_closet(A, B, C, p, q, r): \n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    while p != len(A) and q != len(B) and r != len(C): \n        if A[p] < B[q]: \n            if A[p] < C[r]: \n                return A[p] \n            elif C[r] < A[p]: \n                return C[r] \n            else: \n                return A[p] \n        elif B[q] < A[p]: \n            if B[q] < C[r]: \n                return B[q] \n            else: \n                return C[r] \n        else: \n            return A[p] \n  \n    # If we have reached the end of any array, then \n    # return the remaining elements of other array. \n    while p != len(A) and q != len(B): \n        if A[p] < B[q]: \n            return A[p] \n        else: \n            return B[q] \n  \n    while q != len(B) and r != len(C): \n        if B[q] < C[r]: \n            return B[q] \n        else: \n            return C[r] \n          \n    while p != len(A) and r != len(C): \n        if A[p] < C[r]: \n            return A[p] \n        else: \n            return C[r] \n  \n    # If all the elements are same, then",
        "generated_testcode": "",
        "test": "assert find_closet([1, 4, 10],[2, 15, 20],[10, 12],3,3,2) == (10, 15, 10)\nassert find_closet([20, 24, 100],[2, 19, 22, 79, 800],[10, 12, 23, 24, 119],3,5,5) == (24, 22, 23)\nassert find_closet([2, 5, 11],[3, 16, 21],[11, 13],3,3,2) == (11, 16, 11)",
        "canonical_solution": "import sys \r\n\r\ndef find_closet(A, B, C, p, q, r): \r\n\tdiff = sys.maxsize \r\n\tres_i = 0\r\n\tres_j = 0\r\n\tres_k = 0\r\n\ti = 0\r\n\tj = 0\r\n\tk = 0\r\n\twhile(i < p and j < q and k < r): \r\n\t\tminimum = min(A[i], min(B[j], C[k])) \r\n\t\tmaximum = max(A[i], max(B[j], C[k])); \r\n\t\tif maximum-minimum < diff: \r\n\t\t\tres_i = i \r\n\t\t\tres_j = j \r\n\t\t\tres_k = k \r\n\t\t\tdiff = maximum - minimum; \r\n\t\tif diff == 0: \r\n\t\t\tbreak\r\n\t\tif A[i] == minimum: \r\n\t\t\ti = i+1\r\n\t\telif B[j] == minimum: \r\n\t\t\tj = j+1\r\n\t\telse: \r\n\t\t\tk = k+1\r\n\treturn A[res_i],B[res_j],C[res_k]"
    },
    {
        "number": 939,
        "prompt": "Write a function to sort a list of dictionaries using lambda function.\ndef sorted_models(models):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": true,
        "answer": "    return sorted(models, key=lambda x: (x[\"rating\"], x[\"price\"], x[\"name\"]) if x[\"rating\"] != 0 else (x[\"price\"], x[\"name\"]))\n\n# Example usage:\nmodels = [\n    {\"name\": \"Apple\", \"rating\": 5, \"price\": 10000},\n    {\"name\": \"Samsung\", \"rating\": 0, \"price\": 5000},\n    {\"name\": \"LG\", \"rating\": 3, \"price\": 600},\n    {\"name\": \"Nokia\", \"rating\": 4, \"price\": 200}\n]\n\nprint(sorted_models(models))\n# Output: [{'name': 'Nokia', 'rating': 4, 'price': 200}, {'name': 'LG', 'rating': 3, 'price': 60}, {'name': 'Apple', 'rating': 5, 'price': 1000}, {'name': 'Samsung', 'rating': 0, 'price': 500}]\n\n# Here, we are sorting the list of dictionaries based on rating in descending order, and then price in ascending order, and finally by name in ascending order. If the rating is 0, then we are sorting by price and then by name. ",
        "generated_testcode": "",
        "test": "assert sorted_models([{'make':'Nokia', 'model':216, 'color':'Black'}, {'make':'Mi Max', 'model':2, 'color':'Gold'}, {'make':'Samsung', 'model': 7, 'color':'Blue'}])==[{'make': 'Nokia', 'model': 216, 'color': 'Black'}, {'make': 'Samsung', 'model': 7, 'color': 'Blue'}, {'make': 'Mi Max', 'model': 2, 'color': 'Gold'}]\nassert sorted_models([{'make':'Vivo', 'model':20,'color':'Blue'},{'make': 'oppo','model':17,'color':'Gold'},{'make':'Apple','model':11,'color':'red'}])==([{'make':'Vivo', 'model':20,'color':'Blue'},{'make': 'oppo','model':17,'color':'Gold'},{'make':'Apple','model':11,'color':'red'}])\nassert sorted_models([{'make':'micromax','model':40,'color':'grey'},{'make':'poco','model':60,'color':'blue'}])==([{'make':'poco','model':60,'color':'blue'},{'make':'micromax','model':40,'color':'grey'}])",
        "canonical_solution": "def sorted_models(models):\r\n sorted_models = sorted(models, key = lambda x: x['color'])\r\n return sorted_models"
    },
    {
        "number": 940,
        "prompt": "Write a function to sort the given array by using heap sort.\ndef heap_sort(arr):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    heapify(arr)\n    end = len(arr) - 1\n    while end > 0:\n        arr[end], arr[0] = arr[0], arr[end]\n        end -= 1\n        sift_down(arr, 0, end)\n    return arr\n\ndef heapify(arr):\n    start = len(arr) // 2 - 1\n    while start >= 0:\n        sift_down(arr, start, len(arr) - 1)\n        start -= 1\n\ndef sift_down(arr, start, end):\n    root = start\n    while root * 2 + 1 <= end:\n        child = root * 2 + 1\n        swap = root\n        if arr[swap] < arr[child]:\n            swap = child\n        if child + 1 <= end and arr[child] < arr[child + 1]:\n            swap = child + 1\n        if swap != root:\n            arr[root], arr[swap] = arr[swap], arr[root]\n            root = swap\n        else:\n            return\n\n# Example usage:\narr = [3, 1, 4, 2, 5, 8, 6, 7, 10, 9, 12, 11]\nprint(heap_sort(arr)) # Output: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1",
        "generated_testcode": "assert heap_sort([4, 2, 1, 6, 3, 7, 9, 5]) == [1, 2, 3, 4, 5, 6, 7]\n",
        "test": "assert heap_sort([12, 2, 4, 5, 2, 3]) == [2, 2, 3, 4, 5, 12]\nassert heap_sort([32, 14, 5, 6, 7, 19]) == [5, 6, 7, 14, 19, 32]\nassert heap_sort([21, 15, 29, 78, 65]) == [15, 21, 29, 65, 78]",
        "canonical_solution": "def heap_sort(arr):\r\n    heapify(arr)  \r\n    end = len(arr) - 1\r\n    while end > 0:\r\n        arr[end], arr[0] = arr[0], arr[end]\r\n        shift_down(arr, 0, end - 1)\r\n        end -= 1\r\n    return arr\r\n\r\ndef heapify(arr):\r\n    start = len(arr) // 2\r\n    while start >= 0:\r\n        shift_down(arr, start, len(arr) - 1)\r\n        start -= 1\r\ndef shift_down(arr, start, end):\r\n    root = start\r\n    while root * 2 + 1 <= end:\r\n        child = root * 2 + 1\r\n        if child + 1 <= end and arr[child] < arr[child + 1]:\r\n            child += 1\r\n        if child <= end and arr[root] < arr[child]:\r\n            arr[root], arr[child] = arr[child], arr[root]\r\n            root = child\r\n        else:\r\n            return\r\n"
    },
    {
        "number": 941,
        "prompt": "Write a function to count the elements in a list until an element is a tuple.\ndef count_elim(num):\n",
        "checkpoint": "13B",
        "pass": 7,
        "correct": true,
        "answer": "    list_1 = [1, 2, 3, 4, (5, 6, 7), 8, 9, (10, 11)]\n    count = 0\n    for el in list_1:\n        if isinstance(el, tuple):\n            return count\n        else:\n            count += 1\n    return count\n\n# Test the function\nprint(count_elim(10)) # Should return 4\nprint(count_elim(11)) # Should return 5\nprint(count_elim(5)) # Should return 0\nprint(count_elim(8)) # Should return 3\nprint(count_elim(12)) # Should return 0\n\n# Output: 4\n#       5\n#       0\n#       3\n#       0\n\n# Explanation:\n# - The function iterates through the list until it encounters a tuple, and then returns the count of elements before the tuple.\n# - Since there is no tuple in the list_1, it returns 0 for the last test case. ",
        "generated_testcode": "assert count_elim([1, 2, 3, 4, (5, 6), 7, 8, 9]) == 4\n",
        "test": "assert count_elim([10,20,30,(10,20),40])==3\nassert count_elim([10,(20,30),(10,20),40])==1\nassert count_elim([(10,(20,30,(10,20),40))])==0",
        "canonical_solution": "def count_elim(num):\r\n  count_elim = 0\r\n  for n in num:\r\n    if isinstance(n, tuple):\r\n        break\r\n    count_elim += 1\r\n  return count_elim"
    },
    {
        "number": 942,
        "prompt": "Write a function to check if any list element is present in the given list.\ndef check_element(test_tup, check_list):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    for i in test_tup:\n        if i in check_list:\n            return True\n    return False\n\n# Test cases\ntest_tup = (1, 2, 3, 4)\ncheck_list = [2, 5, 6, 7]\nprint(check_element(test_tup, check_list)) # Output: True\n\ntest_tup = (1, 2, 3, 4)\ncheck_list = [5, 6, 7]\nprint(check_element(test_tup, check_list)) # Output: False\n\ntest_tup = ()\ncheck_list = [2, 5, 6, 7]\nprint(check_element(test_tup, check_list)) # Output: False\n\ntest_tup = (1, 1, 1, 1)\ncheck_list = [1]\nprint(check_element(test_tup, check_list)) # Output: True\n\ntest_tup = (1, 2, 3, 4)\ncheck_list = [1, 2, 3, 4, 5]\nprint(check_element(test_tup, check_list)) # Output: True\n\ntest_tup = (1, 2, 3, 4)\ncheck_list = []\nprint(check_element(test_tup, check_list)) # Output: False ",
        "generated_testcode": "assert check_element((1, 2, 3), [1, 4, 5, 6]) == True\n",
        "test": "assert check_element((4, 5, 7, 9, 3),  [6, 7, 10, 11]) == True\nassert check_element((1, 2, 3, 4),  [4, 6, 7, 8, 9]) == True\nassert check_element((3, 2, 1, 4, 5),  [9, 8, 7, 6]) == False",
        "canonical_solution": "def check_element(test_tup, check_list):\r\n  res = False\r\n  for ele in check_list:\r\n    if ele in test_tup:\r\n      res = True\r\n      break\r\n  return (res) "
    },
    {
        "number": 943,
        "prompt": "Write a function to combine two given sorted lists using heapq module.\ndef combine_lists(num1,num2):\n",
        "checkpoint": "13B",
        "pass": 5,
        "correct": true,
        "answer": "    import heapq\n    result = []\n    heapq.heapify(num1)\n    heapq.heapify(num2)\n    while len(num1) != 0 and len(num2) != 0:\n        if num1[0] < num2[0]:\n            result.append(heapq.heappop(num1))\n        else:\n            result.append(heapq.heappop(num2))\n    result += num1 + num2\n    return result\n\n# test the function\nnum1 = [1,3,5,7]\nnum2 = [2,4,6,8]\nprint(combine_lists(num1,num2))  # Output: [1,2,3,4,5,6,7,8] ",
        "generated_testcode": "assert combine_lists([1,3,5,7],[2,4,6,8]) == [1,2,3,4,5,6,7,8]\n",
        "test": "assert combine_lists([1, 3, 5, 7, 9, 11],[0, 2, 4, 6, 8, 10])==[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]\nassert combine_lists([1, 3, 5, 6, 8, 9], [2, 5, 7, 11])==[1,2,3,5,5,6,7,8,9,11]\nassert combine_lists([1,3,7],[2,4,6])==[1,2,3,4,6,7]",
        "canonical_solution": "from heapq import merge\r\ndef combine_lists(num1,num2):\r\n  combine_lists=list(merge(num1, num2))\r\n  return combine_lists"
    },
    {
        "number": 944,
        "prompt": "Write a function to separate and print the numbers and their position of a given string.\ndef num_position(text):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    # Use a loop to iterate over the characters in the string\n    for i, char in enumerate(text):\n        # Check if the character is a number\n        if char.isdigit():\n            print(char, i)\n\n# Test the function with the string \"hello123world456\"\nnum_position(\"hello123world456\")\n\n# Output: 1 4\n#        2 5\n#        3 6\n#        4 7\n#        5 8\n#        6 9\n#        7 10\n#        8 11\n#        9 12\n#        10 13\n#        11 14\n#        12 15\n#        13 16\n#        14 17\n#        15 18\n\n# In the loop, we use the enumerate function to get the index of each character and check if it is a number using the isdigit() method. If it is a number, we print the number and its index.\n\n# We can also use regular expressions to separate and print the numbers and their positions:\n\nimport re\n\ndef num_position_regex(text):\n    # Use regex to find all the numbers in the string\n    numbers = re.findall(r'\\d+', text)\n    # Loop through the numbers and print their positions\n    for i, num in enumerate(numbers, 1):\n        print(num, i)\n\n# Test the function with the same string as before\nnum_position",
        "generated_testcode": "assert num_position(\"Hello 123 World 456\") == \"1: 123\\n2: 456\"\n",
        "test": "assert num_position(\"there are 70 flats in this apartment\")==10\nassert num_position(\"every adult have 32 teeth\")==17\nassert num_position(\"isha has 79 chocolates in her bag\")==9",
        "canonical_solution": "import re\r\ndef num_position(text):\r\n for m in re.finditer(\"\\d+\", text):\r\n    return m.start()"
    },
    {
        "number": 945,
        "prompt": "Write a function to convert the given tuples into set.\ndef tuple_to_set(t):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": true,
        "answer": "    return set(t)\n\n#Example usage:\nt = (1,2,3,4,5,6,6,4,2,3)\nprint(tuple_to_set(t)) # Output: {1, 2, 3, 4, 5, 6}\n\n# Test your function with the given test case\nt = (1,2,3,4,5,6,6,4,2,3)\nprint(tuple_to_set(t)) # Output: {1, 2, 3, 4, 5, 6} ",
        "generated_testcode": "",
        "test": "assert tuple_to_set(('x', 'y', 'z') ) == {'y', 'x', 'z'}\nassert tuple_to_set(('a', 'b', 'c') ) == {'c', 'a', 'b'}\nassert tuple_to_set(('z', 'd', 'e') ) == {'d', 'e', 'z'}",
        "canonical_solution": "def tuple_to_set(t):\r\n  s = set(t)\r\n  return (s) "
    },
    {
        "number": 946,
        "prompt": "Write a function to find the most common elements and their counts of a specified text.\ndef most_common_elem(s,a):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    d = {}\n    for i in s:\n        if i in d:\n            d[i] += 1\n        else:\n            d[i] = 1\n    for i in a:\n        if i in d:\n            d[i] += 1\n        else:\n            d[i] = 1\n    max_val = max(d.values())\n    return {k:v for k,v in d.items() if v == max_val}\n\n# Example usage:\ns = \"hello world\"\na = \"world hello\"\nprint(most_common_elem(s,a)) # Output: {'o': 2, ' ': 1, 'l': 1, 'h': 1, 'e': 1, 'w': 1, 'r': 1, 'd': 1}\n\n# Explanation: The most common elements in both strings are 'o' and ' ', and they both occur 2 times. The other characters occur only once. ",
        "generated_testcode": "assert most_common_elem(\"hello world\", 2) == {\"l\": 3, \"o\": 2}\n",
        "test": "assert most_common_elem('lkseropewdssafsdfafkpwe',3)==[('s', 4), ('e', 3), ('f', 3)] \nassert most_common_elem('lkseropewdssafsdfafkpwe',2)==[('s', 4), ('e', 3)]\nassert most_common_elem('lkseropewdssafsdfafkpwe',7)==[('s', 4), ('e', 3), ('f', 3), ('k', 2), ('p', 2), ('w', 2), ('d', 2)]",
        "canonical_solution": "from collections import Counter \r\ndef most_common_elem(s,a):\r\n  most_common_elem=Counter(s).most_common(a)\r\n  return most_common_elem"
    },
    {
        "number": 947,
        "prompt": "Write a python function to find the length of the shortest word.\ndef len_log(list1):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    shortest_word = list1[0]\n    for i in list1:\n        if len(shortest_word) > len(i):\n            shortest_word = i\n    return len(shortest_word)\n\n#test the function\nlist1 = [\"apple\", \"banana\", \"grape\", \"orange\", \"strawberry\"]\nprint(len_log(list1)) # Output: 5\nlist2 = [\"cat\", \"dog\", \"elephant\", \"bird\"]\nprint(len_log(list2)) # Output: 3\nlist3 = [\"hello\", \"world\", \"python\", \"programming\"]\nprint(len_log(list3)) # Output: 5\nlist4 = [\"red\", \"blue\", \"green\", \"yellow\", \"black\", \"white\"]\nprint(len_log(list4)) # Output: 5\nlist5 = [\"one\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nprint(len_log(list5)) # Output: 3\n\n#In this function, we first initialize a variable shortest_word with the first element of the list. Then we loop through the list and compare the length of each word with the current shortest word. If we find a shorter word, we update the value of shortest_word to that word. At the end, we return the length of the shortest word using the len() function. ",
        "generated_testcode": "assert len_log(['apple', 'banana', 'cherry', 'date', 'fig']) == 3\n",
        "test": "assert len_log([\"win\",\"lose\",\"great\"]) == 3\nassert len_log([\"a\",\"ab\",\"abc\"]) == 1\nassert len_log([\"12\",\"12\",\"1234\"]) == 2",
        "canonical_solution": "def len_log(list1):\r\n    min=len(list1[0])\r\n    for i in list1:\r\n        if len(i)<min:\r\n            min=len(i)\r\n    return min"
    },
    {
        "number": 948,
        "prompt": "Write a function to get an item of a tuple.\ndef get_item(tup1,index):\n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    return tup1[index]\n\n#Example usage:\ntup1 = (1,2,3,4,5,6)\nprint(get_item(tup1,3)) #output: 4 ",
        "generated_testcode": "assert get_item((1,2,3,4,5,6),2) == 3\n",
        "test": "assert get_item((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),3)==('e')\nassert get_item((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),-4)==('u')\nassert get_item((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),-3)==('r')",
        "canonical_solution": "def get_item(tup1,index):\r\n  item = tup1[index]\r\n  return item"
    },
    {
        "number": 949,
        "prompt": "Write a function to sort the given tuple list basis the total digits in tuple.\ndef count_digs(tup):\n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    digits_count = []\n    for i in tup:\n        count = 0\n        for j in i:\n            if j.isdigit():\n                count += 1\n        digits_count.append(count)\n    return digits_count\n\ndef sort_tuples(tup):\n    count = count_digs(tup)\n    count_zip = list(zip(tup, count))\n    count_zip.sort(key=lambda x: x[1], reverse=True)\n    return [x[0] for x in count_zip]\n\ntup = (\"apple\", \"orange\", \"123\", \"banana\", \"99\", \"cherry\", \"10000\", \"grape\")\nprint(sort_tuples(tup))\n\n# Expected Output: ['99', '10000', '123', 'apple', 'banana', 'cherry', 'orange', 'grape'] ",
        "generated_testcode": "",
        "test": "assert sort_list([(3, 4, 6, 723), (1, 2), (12345,), (134, 234, 34)] ) == '[(1, 2), (12345,), (3, 4, 6, 723), (134, 234, 34)]'\nassert sort_list([(3, 4, 8), (1, 2), (1234335,), (1345, 234, 334)] ) == '[(1, 2), (3, 4, 8), (1234335,), (1345, 234, 334)]'\nassert sort_list([(34, 4, 61, 723), (1, 2), (145,), (134, 23)] ) == '[(1, 2), (145,), (134, 23), (34, 4, 61, 723)]'",
        "canonical_solution": "def count_digs(tup):\r\n  return sum([len(str(ele)) for ele in tup ]) \r\ndef sort_list(test_list):\r\n  test_list.sort(key = count_digs)\r\n  return (str(test_list))"
    },
    {
        "number": 950,
        "prompt": "Write a function to display sign of the chinese zodiac for given year.\ndef chinese_zodiac(year):\n",
        "checkpoint": "13B",
        "pass": 8,
        "correct": true,
        "answer": "    if year % 12 == 8 or year % 12 == 0:\n        return \"Monkey\"\n    elif year % 12 == 9 or year % 12 == 1:\n        return \"Rooster\"\n    elif year % 12 == 10 or year % 12 == 2:\n        return \"Dog\"\n    elif year % 12 == 11 or year % 12 == 3:\n        return \"Pig\"\n    elif year % 12 == 4:\n        return \"Rat\"\n    elif year % 12 == 5:\n        return \"Ox\"\n    elif year % 12 == 6:\n        return \"Tiger\"\n    elif year % 12 == 7:\n        return \"Rabbit\"\n    elif year % 12 == 8:\n        return \"Dragon\"\n    elif year % 12 == 9:\n        return \"Snake\"\n    elif year % 12 == 10:\n        return \"Horse\"\n    elif year % 12 == 11:\n        return \"Goat\"\n    else:\n        return \"Monkey\"\n\n# Test the function with a year input\nprint(chinese_zodiac(2015)) # Output: \"Rabbit\" ",
        "generated_testcode": "assert chinese_zodiac(1996) == \"Rat\"\n",
        "test": "assert chinese_zodiac(1997)==('Ox')\nassert chinese_zodiac(1998)==('Tiger')\nassert chinese_zodiac(1994)==('Dog')",
        "canonical_solution": "def chinese_zodiac(year):\r\n if (year - 2000) % 12 == 0:\r\n     sign = 'Dragon'\r\n elif (year - 2000) % 12 == 1:\r\n     sign = 'Snake'\r\n elif (year - 2000) % 12 == 2:\r\n     sign = 'Horse'\r\n elif (year - 2000) % 12 == 3:\r\n     sign = 'sheep'\r\n elif (year - 2000) % 12 == 4:\r\n     sign = 'Monkey'\r\n elif (year - 2000) % 12 == 5:\r\n     sign = 'Rooster'\r\n elif (year - 2000) % 12 == 6:\r\n     sign = 'Dog'\r\n elif (year - 2000) % 12 == 7:\r\n     sign = 'Pig'\r\n elif (year - 2000) % 12 == 8:\r\n     sign = 'Rat'\r\n elif (year - 2000) % 12 == 9:\r\n     sign = 'Ox'\r\n elif (year - 2000) % 12 == 10:\r\n     sign = 'Tiger'\r\n else:\r\n     sign = 'Hare'\r\n return sign"
    },
    {
        "number": 951,
        "prompt": "Write a function to find the maximum of similar indices in two lists of tuples.\ndef max_similar_indices(test_list1, test_list2):\n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    max_sim_indices = []\n    for i in range(len(test_list1)):\n        max_sim = 0\n        max_sim_index = -1\n        for j in range(len(test_list2)):\n            if test_list1[i][0] == test_list2[j][0]:\n                sim_index = i\n                sim = sum([1 for k in range(len(test_list1[i])) if test_list1[i][k] == test_list2[j][k]])\n                if sim > max_sim:\n                    max_sim = sim\n                    max_sim_index = j\n        max_sim_indices.append(max_sim_index)\n    return max_sim_indices\n\ntest_list1 = [(1, 2, 3), (2, 3, 4), (3, 4, 5), (4, 5, 6)]\ntest_list2 = [(1, 2, 3), (2, 3, 4), (3, 4, 5), (4, 5, 6), (5, 6, 7)]\nprint(max_similar_indices(test_list1, test_list2))\n",
        "generated_testcode": "",
        "test": "assert max_similar_indices([(2, 4), (6, 7), (5, 1)],[(5, 4), (8, 10), (8, 14)]) == [(5, 4), (8, 10), (8, 14)]\nassert max_similar_indices([(3, 5), (7, 8), (6, 2)],[(6, 5), (9, 11), (9, 15)]) == [(6, 5), (9, 11), (9, 15)]\nassert max_similar_indices([(4, 6), (8, 9), (7, 3)],[(7, 6), (10, 12), (10, 16)]) == [(7, 6), (10, 12), (10, 16)]",
        "canonical_solution": "def max_similar_indices(test_list1, test_list2):\r\n  res = [(max(x[0], y[0]), max(x[1], y[1]))\r\n   for x, y in zip(test_list1, test_list2)]\r\n  return (res) "
    },
    {
        "number": 952,
        "prompt": "Write a function to compute the value of ncr mod p.\ndef nCr_mod_p(n, r, p): \n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    # Initialize result\n    res = 1\n    if r > n-r: \n        r = n-r \n    # Calculate nCr\n    for i in range(r): \n        res = (res * (n-i) * (i+1)) % p \n    # Calculate n!\n    helper = 1\n    for i in range(n): \n        helper = (helper * (i+1) % p \n    # Calculate r!\n    helper2 = 1\n    for i in range(r): \n        helper2 = (helper2 * (i+1) % p \n    # Calculate (n-r)!\n    helper3 = 1\n    for i in range(n-r): \n        helper3 = (helper3 * (i+1) % p \n    # Calculate result\n    res = (res * helper * helper3 * helper2) % p \n    return res ",
        "generated_testcode": "assert nCr_mod_p(5, 3, 10) == 10\n",
        "test": "assert nCr_mod_p(10, 2, 13) == 6\nassert nCr_mod_p(11, 3, 14) == 11\nassert nCr_mod_p(18, 14, 19) == 1",
        "canonical_solution": "def nCr_mod_p(n, r, p): \r\n\tif (r > n- r): \r\n\t\tr = n - r \r\n\tC = [0 for i in range(r + 1)] \r\n\tC[0] = 1 \r\n\tfor i in range(1, n + 1): \r\n\t\tfor j in range(min(i, r), 0, -1): \r\n\t\t\tC[j] = (C[j] + C[j-1]) % p \r\n\treturn C[r] "
    },
    {
        "number": 953,
        "prompt": "Write a python function to find the minimun number of subsets with distinct elements.\ndef subset(ar, n): \n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    # ar is the array, n is the size of array \n    res = [] \n    # res is the result list \n    # sort the array \n    ar.sort() \n    # creating a boolean array to check if a number is already in a subset \n    # or not \n    is_present = [False] * n \n    # call the recursive function \n    return subset_util(ar, res, [], 0, is_present, n) \n  \ndef subset_util(ar, res, temp, index, is_present, n): \n    # base case \n    if len(temp) == n: \n        res.append(temp[:]) \n        return \n    for i in range(index, n): \n        # check if the number is already present in a subset \n        if is_present[i]: \n            continue\n        is_present[i] = True\n        temp.append(ar[i]) \n        subset_util(ar, res, index + 1, temp, is_present, n) \n        temp.pop() \n        is_present[i] = False\n    return len(res) \n  \n# Driver code \nar = [1, 2, 3, 4, 5] \nn = len(ar) \nprint(subset(ar, n)) ",
        "generated_testcode": "assert subset([1, 2, 3], 3) == 3\n",
        "test": "assert subset([1, 2, 3, 4],4) == 1\nassert subset([5, 6, 9, 3, 4, 3, 4],7) == 2\nassert subset([1, 2, 3 ],3) == 1",
        "canonical_solution": "def subset(ar, n): \r\n    res = 0\r\n    ar.sort() \r\n    for i in range(0, n) : \r\n        count = 1\r\n        for i in range(n - 1): \r\n            if ar[i] == ar[i + 1]: \r\n                count+=1\r\n            else: \r\n                break \r\n        res = max(res, count)  \r\n    return res "
    },
    {
        "number": 954,
        "prompt": "Write a function that gives profit amount if the given amount has profit else return none.\ndef profit_amount(actual_cost,sale_amount): \n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": true,
        "answer": "    profit = sale_amount - actual_cost\n    if(profit>0):\n        return profit\n    else:\n        return None\n\nprint(profit_amount(10000,1200)) # 200\nprint(profit_amount(10000,500)) # None \n\n# Write a function that adds two numbers without using + operator.\ndef add_numbers(a,b):\n    while b != 0:\n        data = a & b\n        a = a ^ b\n        b = data << 1\n    return a\n\nprint(add_numbers(5,10)) # 15\n\n# Write a function that removes the duplicate elements from the list.\ndef remove_duplicates(lst):\n    return list(set(lst))\n\nprint(remove_duplicates([1,2,3,4,3,5,6,4,5,7,1,8,9,7])) #[1, 2, 3, 4, 5, 6, 7, 8, 9]\n\n# Write a function that returns the sum of digits of a number.\ndef sum_of_digits(number):\n    sum = 0\n    while number > 0:\n        digit = number % 10\n        sum += digit\n        number = number // 10\n    return sum\n\nprint(sum_of_digits(123)) # 6\nprint(sum_of_digits(456))",
        "generated_testcode": "assert profit_amount(100, 150) == 50\n",
        "test": "assert profit_amount(1500,1200)==300\nassert profit_amount(100,200)==None\nassert profit_amount(2000,5000)==None",
        "canonical_solution": "def profit_amount(actual_cost,sale_amount): \r\n if(actual_cost > sale_amount):\r\n    amount = actual_cost - sale_amount\r\n    return amount\r\n else:\r\n    return None"
    },
    {
        "number": 955,
        "prompt": "Write a function to find out, if the given number is abundant.\ndef is_abundant(n):\n",
        "checkpoint": "13B",
        "pass": 5,
        "correct": true,
        "answer": "    sum_of_divisors = 0\n    for i in range(1, n):\n        if n % i == 0:\n            sum_of_divisors += i\n    return sum_of_divisors > n\n\n# Write a function to find all the abundant numbers in the range of 12 to 28123\ndef find_abundant_numbers():\n    abundant_numbers = []\n    for i in range(12, 28123):\n        if is_abundant(i):\n            abundant_numbers.append(i)\n    return abundant_numbers\n\n# Write a function to find all the numbers that are not the sum of two abundant numbers\ndef find_not_sum_of_two_abundant_numbers():\n    abundant_numbers = find_abundant_numbers()\n    not_sum_of_two_abundant_numbers = []\n    for i in range(1, 28124):\n        is_sum_of_two_abundant_numbers = False\n        for j in range(len(abundant_numbers)):\n            for k in range(len(abundant_numbers)):\n                if abundant_numbers[j] + abundant_numbers[k] == i:\n                    is_sum_of_two_abundant_numbers = True\n                    break\n            if not is_sum_of_two_abundant_numbers:\n                not_sum_of_two",
        "generated_testcode": "assert is_abundant(12) == True\n",
        "test": "assert is_abundant(12)==True\nassert is_abundant(13)==False\nassert is_abundant(9)==False",
        "canonical_solution": "def is_abundant(n):\r\n    fctrsum = sum([fctr for fctr in range(1, n) if n % fctr == 0])\r\n    return fctrsum > n"
    },
    {
        "number": 956,
        "prompt": "Write a function to split the given string at uppercase letters by using regex.\ndef split_list(text):\n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    import re\n    # Use regex to split the string at uppercase letters\n    return re.findall(r'[A-Z][^A-Z]*', text)\n\n\n# Test the function with example input\nprint(split_list(\"HelloWorld\")) # ['Hello', 'World']\nprint(split_list(\"PythonExercises\")) # ['Python', 'Exercises']\nprint(split_list(\"RegexIsFun\")) # ['Regex', 'Is', 'Fun']\n\n# Test the function with empty string\nprint(split_list(\"\")) # []\n\n# Test the function with single uppercase letter string\nprint(split_list(\"A\")) # ['A']\n\n# Test the function with uppercase letter string\nprint(split_list(\"PYTHON\")) # ['PYTHON']\n\n# Test the function with lowercase string\nprint(split_list(\"helloworld\")) # ['helloworld']\n\n# Test the function with only uppercase string\nprint(split_list(\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\")) # ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'] ",
        "generated_testcode": "assert split_list(\"HelloWorld\") == [\"Hello\", \"World\"]\n",
        "test": "assert split_list(\"LearnToBuildAnythingWithGoogle\") == ['Learn', 'To', 'Build', 'Anything', 'With', 'Google']\nassert split_list(\"ApmlifyingTheBlack+DeveloperCommunity\") == ['Apmlifying', 'The', 'Black+', 'Developer', 'Community']\nassert split_list(\"UpdateInTheGoEcoSystem\") == ['Update', 'In', 'The', 'Go', 'Eco', 'System']",
        "canonical_solution": "import re\r\ndef split_list(text):\r\n  return (re.findall('[A-Z][^A-Z]*', text))"
    },
    {
        "number": 957,
        "prompt": "Write a python function to get the position of rightmost set bit.\ndef get_First_Set_Bit_Pos(n):\n",
        "checkpoint": "13B",
        "pass": 9,
        "correct": true,
        "answer": "    i=1\n    while i<=n:\n        if n & i:\n            return i\n        i=i<<1\n    return -1\n\n# Testing the function\nn = 12\nprint(get_First_Set_Bit_Pos(n))  # Output: 4\nn = 0\nprint(get_First_Set_Bit_Pos(n))  # Output: -1 \n\n# Explanation: \n# The function is based on the fact that the rightmost set bit will always be a power of 2. So we start with i=1 and check if i is set or not in n. If it is set, we return the value of i. If it is not set, we shift i left by 1 and continue checking the next bit. If all the bits are zero, we return -1. ",
        "generated_testcode": "assert get_First_Set_Bit_Pos(12) == 4\n",
        "test": "assert get_First_Set_Bit_Pos(12) == 3\nassert get_First_Set_Bit_Pos(18) == 2\nassert get_First_Set_Bit_Pos(16) == 5",
        "canonical_solution": "import math\r\ndef get_First_Set_Bit_Pos(n):\r\n     return math.log2(n&-n)+1"
    },
    {
        "number": 958,
        "prompt": "Write a function to convert an integer into a roman numeral.\ndef int_to_roman( num):\n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    val = [\n        10000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1\n    ]\n    syb = [\n        \"M\", \"CM\", \"D\", \"CD\", \"C\", \"XC\", \"L\", \"XL\", \"X\", \"IX\", \"V\", \"IV\", \"I\"\n    ]\n    roman_num = ''\n    i = 0\n    while  num > 0:\n        for _ in range(num // val[i]):\n            roman_num += syb[i]\n            num -= val[i]\n        i += 1\n    return roman_num\n\nprint(int_to_roman(39999)) # 'MMMCMXCIX'\nprint(int_to_roman(2000)) # 'MM'\nprint(int_to_roman(1)) # 'I'\nprint(int_to_roman(45))  # 'XLV'\nprint(int_to_roman(9999)) # 'CMXCIX'\nprint(int_to_roman(1984)) # 'MCMLXXXIV'\nprint(int_to_roman(2021)) # 'MMXXI'\nprint(int_to_roman(1666)) # 'MDCLXVI'\n",
        "generated_testcode": "assert int_to_roman(1) == \"I\"\n",
        "test": "assert int_to_roman(1)==(\"I\")\nassert int_to_roman(50)==(\"L\")\nassert int_to_roman(4)==(\"IV\")",
        "canonical_solution": "def int_to_roman( num):\r\n        val = [1000, 900, 500, 400,100, 90, 50, 40,10, 9, 5, 4,1]\r\n        syb = [\"M\", \"CM\", \"D\", \"CD\",\"C\", \"XC\", \"L\", \"XL\",\"X\", \"IX\", \"V\", \"IV\",\"I\"]\r\n        roman_num = ''\r\n        i = 0\r\n        while  num > 0:\r\n            for _ in range(num // val[i]):\r\n                roman_num += syb[i]\r\n                num -= val[i]\r\n            i += 1\r\n        return roman_num"
    },
    {
        "number": 959,
        "prompt": "Write a python function to find the average of a list.\ndef Average(lst): \n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    return sum(lst) / len(lst)\n\n# Example usage:\nlst = [1, 2, 3, 4, 5]\nprint(\"Average of the list:\", Average(lst)) ",
        "generated_testcode": "assert Average([1, 2, 3, 4, 5]) == 3\n",
        "test": "assert Average([15, 9, 55, 41, 35, 20, 62, 49]) == 35.75\nassert Average([4, 5, 1, 2, 9, 7, 10, 8]) == 5.75\nassert Average([1,2,3]) == 2",
        "canonical_solution": "def Average(lst): \r\n    return sum(lst) / len(lst) "
    },
    {
        "number": 960,
        "prompt": "Write a function to solve tiling problem.\ndef get_noOfways(n):\n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    dp = [0] * (n + 1)\n    dp[1] = 1\n    dp[2] = 1\n    dp[3] = 1\n\n    for i in range(4, n + 1):\n        dp[i] = dp[i - 1] + dp[i - 2] + dp[i - 3]\n\n    return dp[n]\n\n\nprint(get_noOfways(4))  # 3\nprint(get_noOfways(5))  # 5\nprint(get_noOfways(6))  # 11\n\n# Time Complexity: O(n)\n# Space Complexity: O(n)\n\n# Explanation:\n# We use dynamic programming to solve this problem. The base cases are when n=1, 2, or 3, and the answer is always 1. For n=4, there is only one way to tile the floor, which is to have a single square.\n# For n=5, we can have either a single square and two rectangles or two squares. For n=6, we can have a single rectangle and two squares or two rectangles. We use a dp array to store the number of ways for each\n# value of n. The dp[i] represents the number of ways to tile a floor of length i. We can either have a single square or two rectangles or three squares. So, dp[i] = dp[i-1] + dp[",
        "generated_testcode": "assert get_noOfways(3) == 1\n",
        "test": "assert get_noOfways(4)==3\nassert get_noOfways(3)==2\nassert get_noOfways(5)==5",
        "canonical_solution": "def get_noOfways(n):\r\n    if (n == 0):\r\n        return 0;\r\n    if (n == 1):\r\n        return 1; \r\n    return get_noOfways(n - 1) + get_noOfways(n - 2);"
    },
    {
        "number": 961,
        "prompt": "Write a function to convert a roman numeral to an integer.\ndef roman_to_int(s):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    roman_to_int_map = {\n        'I': 1,\n        'V': 5,\n        'X': 10,\n        'L': 50,\n        'C': 100,\n        'D': 500,\n        'M': 1000,\n        'IV': 4,\n        'IX': 9,\n        'XL': 40,\n        'XC': 90,\n        'CD': 400,\n        'CM': 900\n    }\n    result = 0\n    i = 0\n    while i < len(s):\n        if i < len(s) - 1 and s[i:i+2] in roman_to_int_map:\n            result += roman_to_int_map[s[i:i+2]]\n            i += 2\n        else:\n            result += roman_to_int_map[s[i]]\n            i += 1\n    return result\n\n# Test cases\nprint(roman_to_int('III')) # should return 3\nprint(roman_to_int('IV')) # should return 4\nprint(roman_to_int('IX')) # should return 9\nprint(roman_to_int('LVIII')) # should return 58\nprint(roman_to_int('MCMXCIV')) # should return 1994\n\n# Another solution with a dictionary of numbers",
        "generated_testcode": "assert roman_to_int(\"III\") == 3\n",
        "test": "assert roman_to_int('MMMCMLXXXVI')==3986\nassert roman_to_int('MMMM')==4000\nassert roman_to_int('C')==100",
        "canonical_solution": "def roman_to_int(s):\r\n        rom_val = {'I': 1, 'V': 5, 'X': 10, 'L': 50, 'C': 100, 'D': 500, 'M': 1000}\r\n        int_val = 0\r\n        for i in range(len(s)):\r\n            if i > 0 and rom_val[s[i]] > rom_val[s[i - 1]]:\r\n                int_val += rom_val[s[i]] - 2 * rom_val[s[i - 1]]\r\n            else:\r\n                int_val += rom_val[s[i]]\r\n        return int_val"
    },
    {
        "number": 962,
        "prompt": "Write a python function to find the sum of all even natural numbers within the range l and r.\ndef sum_Natural(n): \n",
        "checkpoint": "13B",
        "pass": 8,
        "correct": true,
        "answer": "    if n < 0: \n        return 0\n    else: \n        return n + sum_Natural(n-2) \n  \n# Test the function \nprint(sum_Natural(10)) \n\n# Output: 30 (1+3+5+7+9+11) ",
        "generated_testcode": "assert sum_Natural(10) == 30\n",
        "test": "assert sum_Even(2,5) == 6\nassert sum_Even(3,8) == 18\nassert sum_Even(4,6) == 10",
        "canonical_solution": "def sum_Natural(n): \r\n    sum = (n * (n + 1)) \r\n    return int(sum) \r\ndef sum_Even(l,r): \r\n    return (sum_Natural(int(r / 2)) - sum_Natural(int((l - 1) / 2))) "
    },
    {
        "number": 963,
        "prompt": "Write a function to calculate the discriminant value.\ndef discriminant_value(x,y,z):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    return x**2*y**2 - 4*x*z\n\n#Testing the function\nprint(discriminant_value(2,3,4)) # Output: 23\nprint(discriminant_value(4,5,-6)) # Output: 800\nprint(discriminant_value(0,3,0)) # Output: 0\n\n# Write a function to calculate the sum of numbers in a list\ndef sum_list(list):\n    sum = 0\n    for i in list:\n        sum += i\n    return sum\n\n#Testing the function\nprint(sum_list([1,2,3,4,5])) # Output: 15\nprint(sum_list([4,5,6,7,8,9])) # Output: 30\nprint(sum_list([])) # Output: 0\n\n#Write a function to calculate the average of numbers in a list\ndef average(list):\n    sum = 0\n    for i in list:\n        sum += i\n    return sum/len(list)\n\n#Testing the function\nprint(average([1,2,3,4,5])) # Output: 3.0\nprint(average([4,5,6,7,8,9])) # Output: 6.0\nprint(average([])) # Output: 0\n\n#Write a function to calculate the median of a list of numbers\ndef median(list):\n    list.sort()\n    length =",
        "generated_testcode": "assert discriminant_value(1,2,3) == 1\n",
        "test": "assert discriminant_value(4,8,2)==(\"Two solutions\",32)\nassert discriminant_value(5,7,9)==(\"no real solution\",-131)\nassert discriminant_value(0,0,9)==(\"one solution\",0)",
        "canonical_solution": "def discriminant_value(x,y,z):\r\n    discriminant = (y**2) - (4*x*z)\r\n    if discriminant > 0:\r\n        return (\"Two solutions\",discriminant)\r\n    elif discriminant == 0:\r\n        return (\"one solution\",discriminant)\r\n    elif discriminant < 0:\r\n        return (\"no real solution\",discriminant)"
    },
    {
        "number": 964,
        "prompt": "Write a python function to check whether the length of the word is even or not.\ndef word_len(s): \n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    if len(s) % 2 == 0: \n        return True \n    else: \n        return False \n\ns = input(\"Enter a word: \")\nprint(word_len(s)) ",
        "generated_testcode": "assert word_len(\"hello\") == True\n",
        "test": "assert word_len(\"program\") == False\nassert word_len(\"solution\") == True\nassert word_len(\"data\") == True",
        "canonical_solution": "def word_len(s): \r\n    s = s.split(' ')   \r\n    for word in s:    \r\n        if len(word)%2==0: \r\n            return True  \r\n        else:\r\n          return False"
    },
    {
        "number": 965,
        "prompt": "Write a function to convert camel case string to snake case string.\ndef camel_to_snake(text):\n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    words = []\n    for char in text:\n        if char.isupper():\n            words.append(\"_\" + char.lower())\n        else:\n            words.append(char)\n    return \"\".join(words)\n\n# Test the function\nprint(camel_to_snake(\"camelCase\"))  # Output: camel_case\nprint(camel_to_snake(\"camelCaseString\"))  # Output: camel_case_string\nprint(camel_to_snake(\"longCamelCaseString\"))  # Output: long_camel_case_string\nprint(camel_to_snake(\"longCamelCaseStringWithNumbers123\"))  # Output: long_camel_case_string_with_numbers123\nprint(camel_to_snake(\"LongCamelCaseString\"))  # Output: long_camel_case_string\nprint(camel_to_snake(\"123CamelCaseString\"))  # Output: _123_camel_case_string\nprint(camel_to_snake(\"camelCaseString123\"))  # Output: camel_case_string123 ",
        "generated_testcode": "assert camel_to_snake(\"helloWorld\") == \"hello_world\"\n",
        "test": "assert camel_to_snake('PythonProgram')==('python_program')\nassert camel_to_snake('pythonLanguage')==('python_language')\nassert camel_to_snake('ProgrammingLanguage')==('programming_language')",
        "canonical_solution": "def camel_to_snake(text):\r\n        import re\r\n        str1 = re.sub('(.)([A-Z][a-z]+)', r'\\1_\\2', text)\r\n        return re.sub('([a-z0-9])([A-Z])', r'\\1_\\2', str1).lower()"
    },
    {
        "number": 966,
        "prompt": "Write a function to remove an empty tuple from a list of tuples.\ndef remove_empty(tuple1): #L = [(), (), ('',), ('a', 'b'), ('a', 'b', 'c'), ('d')]\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    new_tuple = []\n    for i in tuple1:\n        if i:\n            new_tuple.append(i)\n    return new_tuple\n\n# Test the function\nL = [(), (), ('',), ('a', 'b'), ('a', 'b', 'c'), ('d')]\nprint(remove_empty(L)) # Output: [('a', 'b'), ('a', 'b', 'c'), 'd']\n\n# Time complexity: O(n)\n# Space complexity: O(n)\n# Note: There are other ways to solve this problem in a more concise way, but for this exercise we will keep it simple. ",
        "generated_testcode": "assert remove_empty([(), (), ('',), ('a', 'b'), ('a', 'b', 'c'), ('d')]) == [('a', 'b', 'c'), ('d')]\n\n",
        "test": "assert remove_empty([(), (), ('',), ('a', 'b'), ('a', 'b', 'c'), ('d')])==[('',), ('a', 'b'), ('a', 'b', 'c'), 'd']  \nassert remove_empty([(), (), ('',), (\"python\"), (\"program\")])==[('',), (\"python\"), (\"program\")]  \nassert remove_empty([(), (), ('',), (\"java\")])==[('',),(\"java\") ]  ",
        "canonical_solution": "def remove_empty(tuple1): #L = [(), (), ('',), ('a', 'b'), ('a', 'b', 'c'), ('d')]\r\n   tuple1 = [t for t in tuple1 if t]\r\n   return tuple1"
    },
    {
        "number": 967,
        "prompt": "Write a python function to accept the strings which contains all vowels.\ndef check(string): \n",
        "checkpoint": "13B",
        "pass": 5,
        "correct": true,
        "answer": "    vowels = 'aeiouAEIOU'\n    for char in string:\n        if char in vowels:\n            return True\n    return False\n\n# Testing the function\nprint(check('Hello World')) # False\nprint(check('Python')) # True\nprint(check('Aeiou')) # True\nprint(check('AIUeo')) # True ",
        "generated_testcode": "assert check(\"hello\") == True\n",
        "test": "assert check(\"SEEquoiaL\") == 'accepted'\nassert check('program') == \"not accepted\"\nassert check('fine') == \"not accepted\"",
        "canonical_solution": "def check(string): \r\n  if len(set(string).intersection(\"AEIOUaeiou\"))>=5: \r\n    return ('accepted') \r\n  else: \r\n    return (\"not accepted\") "
    },
    {
        "number": 968,
        "prompt": "Write a python function to find maximum possible value for the given periodic function.\ndef floor_Max(A,B,N):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    if A>B:\n        A,B = B,A\n    max_val = -1\n    for i in range(A,B+1):\n        if i<=N:\n            max_val = i\n        else:\n            j = (i-A)%N\n            if j<N:\n                if i-j>max_val:\n                    max_val = i-j\n    return max_val\n    \nA = int(input(\"Enter the value of A: \"))\nB = int(input(\"Enter the value of B: \"))\nN = int(input(\"Enter the value of N: \"))\nprint(floor_Max(A,B,N))\n\n#Example:\n#Input:\n# Enter the value of A: 5\n# Enter the value of B: 12\n# Enter the value of N: 4\n#Output: 9\n#Explanation: \n# The maximum possible value is 9 which can be obtained by taking 9+4 = 13 and then taking the floor value of 13 divided by 4, which gives 3. \n# Similarly, for all values of i from 5 to 12, the floor value of i%4 will be less than 4. So the maximum value possible is 9. ",
        "generated_testcode": "assert floor_Max(1,2,3) == 6\n",
        "test": "assert floor_Max(11,10,9) == 9\nassert floor_Max(5,7,4) == 2\nassert floor_Max(2,2,1) == 1",
        "canonical_solution": "def floor_Max(A,B,N):\r\n    x = min(B - 1,N)\r\n    return (A*x) // B"
    },
    {
        "number": 969,
        "prompt": "Write a function to join the tuples if they have similar initial elements.\ndef join_tuples(test_list):\n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    result = []\n    for i in range(len(test_list)):\n        if i == 0:\n            result.append([test_list[i]])\n        else:\n            if test_list[i][0] == result[-1][0]:\n                result[-1].append(test_list[i][1])\n            else:\n                result.append([test_list[i]])\n    return result\n\ntest_list = [(1, \"a\"), (1, \"b\"), (2, \"c\"), (2, \"d\"), (3, \"e\"), (4, \"f\"), (4, \"g\")]\nprint(join_tuples(test_list))  # Output: [[1, 'a', 'b'], [2, 'c', 'd'], [3, 'e'], [4, 'f', 'g']]\n\ntest_list = [(1, \"a\"), (1, \"b\"), (2, \"c\"), (3, \"d\"), (3, \"e\"), (4, \"f\"), (4, \"g\")]\nprint(join_tuples(test_list))  # Output: [[1, 'a', 'b'], [2, 'c'], [3, 'd', 'e'], [4, 'f', 'g']] ",
        "generated_testcode": "",
        "test": "assert join_tuples([(5, 6), (5, 7), (6, 8), (6, 10), (7, 13)] ) == [(5, 6, 7), (6, 8, 10), (7, 13)]\nassert join_tuples([(6, 7), (6, 8), (7, 9), (7, 11), (8, 14)] ) == [(6, 7, 8), (7, 9, 11), (8, 14)]\nassert join_tuples([(7, 8), (7, 9), (8, 10), (8, 12), (9, 15)] ) == [(7, 8, 9), (8, 10, 12), (9, 15)]",
        "canonical_solution": "def join_tuples(test_list):\r\n  res = []\r\n  for sub in test_list:\r\n    if res and res[-1][0] == sub[0]:\r\n      res[-1].extend(sub[1:])\r\n    else:\r\n      res.append([ele for ele in sub])\r\n  res = list(map(tuple, res))\r\n  return (res) "
    },
    {
        "number": 970,
        "prompt": "Write a function to find minimum of two numbers.\ndef min_of_two( x, y ):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    if x < y:\n        return x\n    else:\n        return y\n\nprint(min_of_two(10, 20)) # Output: 10\nprint(min_of_two(30, 10)) # Output: 10\n\n# 2. Write a function to print all even numbers from a list\ndef print_even_numbers(lst):\n    for num in lst:\n        if num % 2 == 0:\n            print(num)\n\nprint_even_numbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n\n# Output: 2 4 6 8 10\n\n# 3. Write a function to print the first n even numbers.\ndef print_n_even_numbers(n):\n    count = 0\n    i = 0\n    while count < n:\n        if i % 2 == 0:\n            print(i)\n            count += 1\n        i += 1\n\nprint_n_even_numbers(5)\n# Output: 0 2 4 6 8 10\n\n# 4. Write a function to find the length of a string\ndef string_length(s):\n    return len(s)\n\nprint(string_length(\"hello\")) # Output: 5\n\n# 5. Write a function to convert a string to uppercase\ndef string_to_uppercase(s):\n    return",
        "generated_testcode": "assert min_of_two( 3, 5 ) == 3\n",
        "test": "assert min_of_two(10,20)==10\nassert min_of_two(19,15)==15\nassert min_of_two(-10,-20)==-20",
        "canonical_solution": "def min_of_two( x, y ):\r\n    if x < y:\r\n        return x\r\n    return y"
    },
    {
        "number": 971,
        "prompt": "Write a function to find the maximum number of segments of lengths a, b and c that can be formed from n.\ndef maximum_segments(n, a, b, c) : \n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    count = 0\n    while n >= a: \n        count += n // a \n        n = n % a \n    while n >= b: \n        count += n // b \n        n = n % b \n    while n >= c: \n        count += n // c \n        n = n % c \n    return count \n\n# test the function \nn = 13\na = 2\nb = 3\nc = 4\nprint(maximum_segments(n, a, b, c)) ",
        "generated_testcode": "assert maximum_segments(10, 2, 3) == 3\n",
        "test": "assert maximum_segments(7, 5, 2, 5) == 2\nassert maximum_segments(17, 2, 1, 3) == 17\nassert maximum_segments(18, 16, 3, 6) == 6",
        "canonical_solution": "def maximum_segments(n, a, b, c) : \r\n\tdp = [-1] * (n + 10) \r\n\tdp[0] = 0\r\n\tfor i in range(0, n) : \r\n\t\tif (dp[i] != -1) : \r\n\t\t\tif(i + a <= n ): \r\n\t\t\t\tdp[i + a] = max(dp[i] + 1, \r\n\t\t\t\t\t\t\tdp[i + a]) \r\n\t\t\tif(i + b <= n ): \r\n\t\t\t\tdp[i + b] = max(dp[i] + 1, \r\n\t\t\t\t\t\t\tdp[i + b]) \r\n\t\t\tif(i + c <= n ): \r\n\t\t\t\tdp[i + c] = max(dp[i] + 1, \r\n\t\t\t\t\t\t\tdp[i + c]) \r\n\treturn dp[n]"
    },
    {
        "number": 972,
        "prompt": "Write a function to concatenate the given two tuples to a nested tuple.\ndef concatenate_nested(test_tup1, test_tup2):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    res = ()\n    for tup in test_tup1:\n        res += tup\n    for tup in test_tup2:\n        res += tup\n    return res\n\n\n# Example usage:\ntest_tup1 = ((1, 2, 3), (4, 5, 6), (7, 8, 9))\ntest_tup2 = ((10, 11, 12), (13, 14, 15))\nresult = concatenate_nested(test_tup1, test_tup2)\nprint(result)  # Output: (1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15)\n\n\n# Example usage 2:\ntest_tup1 = ((1, 2, 3), (4, 5, 6))\ntest_tup2 = ((10,), (11, 12, 13), (14, 15))\nresult = concatenate_nested(test_tup1, test_tup2)\nprint(result)  # Output: (1, 2, 3, 4, 5, 6, 10, 11, 12, 13, 14, 15)\n\n# Example usage 3:\ntest_tup1 = ((\"",
        "generated_testcode": "assert concatenate_nested((1, 2, (3, 4), (5, 6)), (7, 8, 9)) == (1, 2, (3, 4, 7, 8, 9)\n\n",
        "test": "assert concatenate_nested((3, 4), (5, 6)) == (3, 4, 5, 6)\nassert concatenate_nested((1, 2), (3, 4)) == (1, 2, 3, 4)\nassert concatenate_nested((4, 5), (6, 8)) == (4, 5, 6, 8)",
        "canonical_solution": "def concatenate_nested(test_tup1, test_tup2):\r\n  res = test_tup1 + test_tup2\r\n  return (res) "
    },
    {
        "number": 973,
        "prompt": "Write a python function to left rotate the string.\ndef left_rotate(s,d):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    if d == 0:\n        return s\n    else:\n        s = s[d:] + s[:d]\n        return s\n\ns = \"geeksforgeeks\"\nd = 4\nprint(left_rotate(s,d)) ",
        "generated_testcode": "assert left_rotate(\"hello\", 2) == \"llohe\"\n",
        "test": "assert left_rotate(\"python\",2) == \"thonpy\"   \nassert left_rotate(\"bigdata\",3 ) == \"databig\" \nassert left_rotate(\"hadoop\",1 ) == \"adooph\" ",
        "canonical_solution": "def left_rotate(s,d):\r\n    tmp = s[d : ] + s[0 : d]\r\n    return tmp  "
    },
    {
        "number": 974,
        "prompt": "Write a function to find the minimum total path sum in the given triangle.\ndef min_sum_path(A): \n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    n = len(A) \n    for i in range(1, n): \n        for j in range(len(A[i])): \n            if j == 0: \n                A[i][j] += A[i-1][j] \n            elif j == i: \n                A[i][j] += A[i-1][j-1] \n            else: \n                A[i][j] += min(A[i-1][j], A[i-1][j-1]) \n    return min(A[n-1])\n  \n# Example usage: \nA = [[3], \n     [2, 4], \n     [6, 5, 1], \n     [4, 1, 8, 3]] \nprint(min_sum_path(A)) ",
        "generated_testcode": "assert min_sum_path([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 13\n",
        "test": "assert min_sum_path([[ 2 ], [3, 9 ], [1, 6, 7 ]]) == 6\nassert min_sum_path([[ 2 ], [3, 7 ], [8, 5, 6 ]]) == 10 \nassert min_sum_path([[ 3 ], [6, 4 ], [5, 2, 7 ]]) == 9",
        "canonical_solution": "def min_sum_path(A): \r\n\tmemo = [None] * len(A) \r\n\tn = len(A) - 1\r\n\tfor i in range(len(A[n])): \r\n\t\tmemo[i] = A[n][i] \r\n\tfor i in range(len(A) - 2, -1,-1): \r\n\t\tfor j in range( len(A[i])): \r\n\t\t\tmemo[j] = A[i][j] + min(memo[j], \r\n\t\t\t\t\t\t\t\t\tmemo[j + 1]) \r\n\treturn memo[0]"
    }
]