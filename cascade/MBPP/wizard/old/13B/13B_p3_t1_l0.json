[
    {
        "number": 1,
        "prompt": "Write a function to find the minimum cost path to reach (m, n) from (0, 0) for the given cost matrix cost[][] and a position (m, n) in cost[][].\ndef min_cost(cost, m, n): \n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    dp = [[0 for i in range(n+1)] for j in range(m+1)]\n    \n    for i in range(1, m+1): \n        dp[i][0] = dp[i-1][0] + cost[i-1][0]\n    for j in range(1, n+1): \n        dp[0][j] = dp[0][j-1] + cost[0][j-1]\n        \n    for i in range(1, m+1): \n        for j in range(1, n+1): \n            dp[i][j] = min(dp[i-1][j] + cost[i-1][j], dp[i][j-1] + cost[i][j-1]) \n    return dp[m][n] \n\n# Driver code \ncost = [[1, 2, 3], \n        [4, 8, 2], \n        [1, 5, 3]] \nm = 2\nn = 2\nprint(min_cost(cost, m, n)) \n\n# Output: 7 ",
        "generated_testcode": "assert min_cost([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 2, 2) == 11\n",
        "test": "assert min_cost([[1, 2, 3], [4, 8, 2], [1, 5, 3]], 2, 2) == 8\nassert min_cost([[2, 3, 4], [5, 9, 3], [2, 6, 4]], 2, 2) == 12\nassert min_cost([[3, 4, 5], [6, 10, 4], [3, 7, 5]], 2, 2) == 16",
        "canonical_solution": "R = 3\r\nC = 3\r\ndef min_cost(cost, m, n): \r\n\ttc = [[0 for x in range(C)] for x in range(R)] \r\n\ttc[0][0] = cost[0][0] \r\n\tfor i in range(1, m+1): \r\n\t\ttc[i][0] = tc[i-1][0] + cost[i][0] \r\n\tfor j in range(1, n+1): \r\n\t\ttc[0][j] = tc[0][j-1] + cost[0][j] \r\n\tfor i in range(1, m+1): \r\n\t\tfor j in range(1, n+1): \r\n\t\t\ttc[i][j] = min(tc[i-1][j-1], tc[i-1][j], tc[i][j-1]) + cost[i][j] \r\n\treturn tc[m][n]"
    },
    {
        "number": 2,
        "prompt": "Write a function to find the similar elements from the given two tuple lists.\ndef similar_elements(test_tup1, test_tup2):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    return tuple(set(test_tup1) & set(test_tup2))\n\n# Test the function with an example\ntest_tup1 = (1, 2, 3, 4, 5)\ntest_tup2 = (2, 3, 4, 6, 7)\nprint(similar_elements(test_tup1, test_tup2))  # Output: (2, 3, 4)\n\n\n# Output: (2, 3, 4) ",
        "generated_testcode": "assert similar_elements((1, 2, 3, 4, 5, 6), (2, 4, 6, 8, 10)) == (2, 4, 6)\n",
        "test": "assert similar_elements((3, 4, 5, 6),(5, 7, 4, 10)) == (4, 5)\nassert similar_elements((1, 2, 3, 4),(5, 4, 3, 7)) == (3, 4)\nassert similar_elements((11, 12, 14, 13),(17, 15, 14, 13)) == (13, 14)",
        "canonical_solution": "def similar_elements(test_tup1, test_tup2):\r\n  res = tuple(set(test_tup1) & set(test_tup2))\r\n  return (res) "
    },
    {
        "number": 3,
        "prompt": "Write a python function to identify non-prime numbers.\ndef is_not_prime(n):\n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    if n < 2:\n        return True\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return True\n    return False\n\n\n# Test the function\nprint(is_not_prime(5))  # should return False\nprint(is_not_prime(7))  # should return False\nprint(is_not_prime(8))  # should return True\nprint(is_not_prime(9))  # should return True\nprint(is_not_prime(11))  # should return False\n",
        "generated_testcode": "assert is_not_prime(10) == True\n",
        "test": "assert is_not_prime(2) == False\nassert is_not_prime(10) == True\nassert is_not_prime(35) == True",
        "canonical_solution": "import math\r\ndef is_not_prime(n):\r\n    result = False\r\n    for i in range(2,int(math.sqrt(n)) + 1):\r\n        if n % i == 0:\r\n            result = True\r\n    return result"
    },
    {
        "number": 4,
        "prompt": "Write a function to find the largest integers from a given list of numbers using heap queue algorithm.\ndef heap_queue_largest(nums,n):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    import heapq\n    heapq.heapify(nums)\n    return [heapq.heappop(nums) for i in range(n)]\n\n# Example usage:\nnums = [3, 7, 1, 9, 2, 5, 4, 6]\nn = 3\nprint(heap_queue_largest(nums, n)) # Output: [9, 7, 6]\n\n# Time Complexity: O(n*log(n))\n# Space Complexity: O(n)\n\n# Write a function to find the smallest integers from a given list of numbers using heap queue algorithm\ndef heap_queue_smallest(nums,n):\n    import heapq\n    heapq.heapify(nums)\n    return [heapq.heappop(nums) for i in range(len(nums)-n,-1,-1)]\n\n# Example usage:\nnums = [3, 7, 1, 9, 2, 5, 4, 6]\nn = 3\nprint(heap_queue_smallest(nums, n)) # Output: [1, 2, 3]\n\n# Time Complexity: O(n*log(n))\n# Space Complexity: O(n)\n\n# Write a function to find the kth largest element in a list of numbers using heap queue algorithm\ndef kth_largest_element(nums,k):\n    import heapq\n    heap",
        "generated_testcode": "assert heap_queue_largest([1,2,3,4,5,6,7,8,9],3) == [9,8,7]\n",
        "test": "assert heap_queue_largest( [25, 35, 22, 85, 14, 65, 75, 22, 58],3)==[85, 75, 65] \nassert heap_queue_largest( [25, 35, 22, 85, 14, 65, 75, 22, 58],2)==[85, 75] \nassert heap_queue_largest( [25, 35, 22, 85, 14, 65, 75, 22, 58],5)==[85, 75, 65, 58, 35]",
        "canonical_solution": "import heapq as hq\r\ndef heap_queue_largest(nums,n):\r\n  largest_nums = hq.nlargest(n, nums)\r\n  return largest_nums"
    },
    {
        "number": 5,
        "prompt": "Write a function to find the number of ways to fill it with 2 x 1 dominoes for the given 3 x n board.\ndef count_ways(n): \n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    if n == 0 or n == 1: \n        return 1\n    if n == 2: \n        return 3\n    dp = [0] * (n + 1) \n    dp[0] = 1\n    dp[1] = 1\n    dp[2] = 3\n    for i in range(3, n + 1): \n        dp[i] = dp[i - 1] + dp[i - 2] + dp[i - 3] \n    return dp[n] \n\ndef count_dominoes(n): \n    return count_ways(n)\n\n# Test the function \nn = 5\nprint(count_dominoes(n)) ",
        "generated_testcode": "assert count_ways(3) == 1\n",
        "test": "assert count_ways(2) == 3\nassert count_ways(8) == 153\nassert count_ways(12) == 2131",
        "canonical_solution": "def count_ways(n): \r\n\tA = [0] * (n + 1) \r\n\tB = [0] * (n + 1) \r\n\tA[0] = 1\r\n\tA[1] = 0\r\n\tB[0] = 0\r\n\tB[1] = 1\r\n\tfor i in range(2, n+1): \r\n\t\tA[i] = A[i - 2] + 2 * B[i - 1] \r\n\t\tB[i] = A[i - 1] + B[i - 2] \r\n\treturn A[n] "
    },
    {
        "number": 6,
        "prompt": "Write a python function to check whether the two numbers differ at one bit position only or not.\ndef is_Power_Of_Two (x): \n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    if (x == 0): \n        return False\n    while (x != 1): \n        if (x & 1 != 1): \n            return False\n        x = x >> 1\n    return True\n\ndef differByOneBit(a, b):\n    return bin(a ^ b).count('1') == 1\n\ndef differByOneBit(a, b):\n    # XOR both the numbers and count the number of set bits.\n    # If count is 1 then the numbers differ at one bit position, else not.\n    return bin(a ^ b).count('1') == 1\n\n# Test the function\na = 10\nb = 11\nprint(differByOneBit(a, b)) # Output: True\n\na = 10\nb = 15\nprint(differByOneBit(a, b)) # Output: False\n\na = 10\nb = 12\nprint(differByOneBit(a, b)) # Output: False\n\na = 10\nb = 13\nprint(differByOneBit(a, b)) # Output: False\n\na = 10\nb = 1\nprint(differByOneBit(a, b)) # Output: False\n\na = 10\nb = 0\nprint(differByOneBit(a, b)) # Output: False\n\na = 10\nb = 20\nprint(differByOneBit(a",
        "generated_testcode": "assert is_Power_Of_Two(10) == True\n",
        "test": "assert differ_At_One_Bit_Pos(13,9) == True\nassert differ_At_One_Bit_Pos(15,8) == False\nassert differ_At_One_Bit_Pos(2,4) == False",
        "canonical_solution": "def is_Power_Of_Two (x): \r\n    return x and (not(x & (x - 1))) \r\ndef differ_At_One_Bit_Pos(a,b): \r\n    return is_Power_Of_Two(a ^ b)"
    },
    {
        "number": 7,
        "prompt": "Write a function to find all words which are at least 4 characters long in a string by using regex.\ndef find_char_long(text):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    pattern = r'\\b\\w{4,}\\b'\n    matches = re.findall(pattern, text)\n    return matches\n\n# Example usage:\ntext = \"This is a sample text with multiple words.\"\nmatches = find_char_long(text)\nprint(matches) # ['This', 'sample', 'text', 'multiple', 'words']\n```\n\nThe above function will find all words in the given text which are at least 4 characters long. ",
        "generated_testcode": "assert find_char_long(\"Hello world\") == [\"Hello\", \"world\"]\n",
        "test": "assert find_char_long('Please move back to stream') == ['Please', 'move', 'back', 'stream']\nassert find_char_long('Jing Eco and Tech') == ['Jing', 'Tech']\nassert find_char_long('Jhingai wulu road Zone 3') == ['Jhingai', 'wulu', 'road', 'Zone']",
        "canonical_solution": "import re\r\ndef find_char_long(text):\r\n  return (re.findall(r\"\\b\\w{4,}\\b\", text))"
    },
    {
        "number": 8,
        "prompt": "Write a function to find squares of individual elements in a list using lambda function.\ndef square_nums(nums):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    return list(map(lambda x: x**2, nums))\n\nprint(square_nums([1, 2, 3, 4, 5, 6])) ",
        "generated_testcode": "assert square_nums([1, 2, 3, 4, 5]) == [1, 4, 9, 16, 25]\n",
        "test": "assert square_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]\nassert square_nums([10,20,30])==([100,400,900])\nassert square_nums([12,15])==([144,225])",
        "canonical_solution": "def square_nums(nums):\r\n square_nums = list(map(lambda x: x ** 2, nums))\r\n return square_nums"
    },
    {
        "number": 9,
        "prompt": "Write a python function to find the minimum number of rotations required to get the same string.\ndef find_Rotations(str): \n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    n = len(str) \n    temp = str + str \n    min_rotation = n \n    for i in range(n): \n        if temp.find(str) < min_rotation: \n            min_rotation = temp.find(str) \n        temp = temp[1:] \n    return min_rotation \n  \n# Driver Code \nstr = \"AABAACAADAABAAC\"\nprint(\"Minimum rotations required to get the same string is\",find_Rotations(str)) \n  \n# This will output: Minimum rotations required to get the same string is 3 ",
        "generated_testcode": "assert find_Rotations(\"ABCD\") == 0\n",
        "test": "assert find_Rotations(\"aaaa\") == 1\nassert find_Rotations(\"ab\") == 2\nassert find_Rotations(\"abc\") == 3",
        "canonical_solution": "def find_Rotations(str): \r\n    tmp = str + str\r\n    n = len(str) \r\n    for i in range(1,n + 1): \r\n        substring = tmp[i: i+n] \r\n        if (str == substring): \r\n            return i \r\n    return n "
    },
    {
        "number": 10,
        "prompt": "Write a function to get the n smallest items from a dataset.\ndef small_nnum(list1,n):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    if n > len(list1):\n        return \"n should be less than the length of list\"\n    else:\n        return sorted(list1)[:n]\n\n#Example usage\nprint(small_nnum([2,4,5,1,3,6,7,9,10],3)) ",
        "generated_testcode": "assert small_nnum([1,2,3,4,5,6,7,8,9],3) == [1,2,3]\n",
        "test": "assert small_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],2)==[10,20]\nassert small_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],5)==[10,20,20,40,50]\nassert small_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],3)==[10,20,20]",
        "canonical_solution": "import heapq\r\ndef small_nnum(list1,n):\r\n  smallest=heapq.nsmallest(n,list1)\r\n  return smallest"
    },
    {
        "number": 11,
        "prompt": "Write a python function to remove first and last occurrence of a given character from the string.\ndef remove_Occ(s,ch): \n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    s = list(s) \n    s.remove(ch) \n    s.remove(ch) \n    return ''.join(s) \n\ns = input(\"Enter the string: \")\nch = input(\"Enter the character to remove: \")\nresult = remove_Occ(s,ch) \nprint(\"New string after removing first and last occurrence of character: \",result) ",
        "generated_testcode": "assert remove_Occ(\"hello world\", \"l\") == \"heo word\"\n",
        "test": "assert remove_Occ(\"hello\",\"l\") == \"heo\"\nassert remove_Occ(\"abcda\",\"a\") == \"bcd\"\nassert remove_Occ(\"PHP\",\"P\") == \"H\"",
        "canonical_solution": "def remove_Occ(s,ch): \r\n    for i in range(len(s)): \r\n        if (s[i] == ch): \r\n            s = s[0 : i] + s[i + 1:] \r\n            break\r\n    for i in range(len(s) - 1,-1,-1):  \r\n        if (s[i] == ch): \r\n            s = s[0 : i] + s[i + 1:] \r\n            break\r\n    return s "
    },
    {
        "number": 12,
        "prompt": "Write a function to sort a given matrix in ascending order according to the sum of its rows.\ndef sort_matrix(M):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    for i in range(len(M)):\n        for j in range(i+1, len(M)):\n            if sum(M[i]) > sum(M[j]):\n                M[i], M[j] = M[j], M[i]\n    return M\n\n# Test the function\nmatrix = [[2, 1], [1, 3]]\nprint(sort_matrix(matrix))  # Output: [[1, 3], [2, 1]]\nmatrix = [[3, 2, 1], [1, 4, 5], [9, 7, 8]]\nprint(sort_matrix(matrix))  # Output: [[1, 4, 5], [3, 2, 1], [9, 7, 8]]\nmatrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nprint(sort_matrix(matrix))  # Output: [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n",
        "generated_testcode": "assert sort_matrix(M) == sorted_M\n\n# Test the function with the following matrix:\nM = [\n    [3, 2, 1],\n    [1, 2, 3],\n    [4, 5, 6]\n]\n\n",
        "test": "assert sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]])==[[1, 1, 1], [1, 2, 3], [2, 4, 5]]\nassert sort_matrix([[1, 2, 3], [-2, 4, -5], [1, -1, 1]])==[[-2, 4, -5], [1, -1, 1], [1, 2, 3]]\nassert sort_matrix([[5,8,9],[6,4,3],[2,1,4]])==[[2, 1, 4], [6, 4, 3], [5, 8, 9]]",
        "canonical_solution": "def sort_matrix(M):\r\n    result = sorted(M, key=sum)\r\n    return result"
    },
    {
        "number": 13,
        "prompt": "Write a function to count the most common words in a dictionary.\ndef count_common(words):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    # Count the frequency of each word in the dictionary\n    word_count = {}\n    for word in words:\n        if word in word_count:\n            word_count[word] += 1\n        else:\n            word_count[word] = 1\n    # Find the most common word(s)\n    max_count = max(word_count.values())\n    most_common = []\n    for word, count in word_count.items():\n        if count == max_count:\n            most_common.append(word)\n    # Return the number of most common words and the words themselves\n    return max_count, most_common\n\n# Example usage:\nwords = [\"apple\", \"banana\", \"cherry\", \"apple\", \"cherry\", \"banana\", \"date\", \"apple\"]\nmax_count, most_common = count_common(words)\nprint(\"The most common word(s) is/are:\", \", \".join(most_common), \"with a frequency of\", max_count)\n# Output: The most common word(s) is/are: apple, cherry with a frequency of 3\n\n# Example usage with duplicates:\nwords = [\"apple\", \"banana\", \"cherry\", \"apple\", \"cherry\", \"banana\", \"date\", \"apple\", \"banana\"]\nmax_count, most_common = count_common(words)\nprint(\"The most common word(s) is/are:\", \", \".join(most_common), \"with a frequency of\", max_count)\n",
        "generated_testcode": "assert count_common([\"apple\", \"banana\", \"apple\", \"cherry\", \"banana\", \"cherry\", \"cherry\", \"apple\"]) == {\"apple\": 3, \"banana\": 2, \"cherry\": 3}\n",
        "test": "assert count_common(['red','green','black','pink','black','white','black','eyes','white','black','orange','pink','pink','red','red','white','orange','white',\"black\",'pink','green','green','pink','green','pink','white','orange',\"orange\",'red']) == [('pink', 6), ('black', 5), ('white', 5), ('red', 4)]\nassert count_common(['one', 'two', 'three', 'four', 'five', 'one', 'two', 'one', 'three', 'one']) == [('one', 4), ('two', 2), ('three', 2), ('four', 1)]\nassert count_common(['Facebook', 'Apple', 'Amazon', 'Netflix', 'Google', 'Apple', 'Netflix', 'Amazon']) == [('Apple', 2), ('Amazon', 2), ('Netflix', 2), ('Facebook', 1)]",
        "canonical_solution": "from collections import Counter\r\ndef count_common(words):\r\n  word_counts = Counter(words)\r\n  top_four = word_counts.most_common(4)\r\n  return (top_four)\r\n"
    },
    {
        "number": 14,
        "prompt": "Write a python function to find the volume of a triangular prism.\ndef find_Volume(l,b,h) : \n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    return (1/3)*l*b*h\n\nprint(find_Volume(12,10,6)) ",
        "generated_testcode": "assert find_Volume(3,4,5) == 60\n",
        "test": "assert find_Volume(10,8,6) == 240\nassert find_Volume(3,2,2) == 6\nassert find_Volume(1,2,1) == 1",
        "canonical_solution": "def find_Volume(l,b,h) : \r\n    return ((l * b * h) / 2) "
    },
    {
        "number": 15,
        "prompt": "Write a function to split a string at lowercase letters.\ndef split_lowerstring(text):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    words = []\n    word = \"\"\n    for i in range(len(text)):\n        if text[i].islower():\n            if word != \"\":\n                words.append(word)\n            word = text[i]\n        else:\n            word += text[i]\n    words.append(word)\n    return words\n\n# Test the function\nprint(split_lowerstring(\"HelloWorld\")) # [\"Hello\", \"World\"]\nprint(split_lowerstring(\"HELLOaBcD\")) # [\"\", \"A\", \"BcD\"]\nprint(split_lowerstring(\"Python\")) # [\"Python\"]\nprint(split_lowerstring(\"\")) # [\"\"]\nprint(split_lowerstring(\"aBcDeFgHijK\")) # [\"a\", \"Bc\", \"De\", \"Fg\", \"Hij\", \"K\"]\nprint(split_lowerstring(\"a1Bc2De3Fg4Hij5K\")) # [\"a\", \"Bc\", \"De\", \"Fg\", \"Hij\", \"K\"]\nprint(split_lowerstring(\"Hello1World\")) # [\"Hello\", \"World\"] ",
        "generated_testcode": "assert split_lowerstring(\"HelloWorld\") == [\"Hello\", \"World\"]\n",
        "test": "assert split_lowerstring(\"AbCd\")==['bC','d']\nassert split_lowerstring(\"Python\")==['y', 't', 'h', 'o', 'n']\nassert split_lowerstring(\"Programming\")==['r', 'o', 'g', 'r', 'a', 'm', 'm', 'i', 'n', 'g']",
        "canonical_solution": "import re\r\ndef split_lowerstring(text):\r\n return (re.findall('[a-z][^a-z]*', text))"
    },
    {
        "number": 16,
        "prompt": "Write a function to find sequences of lowercase letters joined with an underscore.\ndef text_lowercase_underscore(text):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    return re.findall(r'[a-z]+_[a-z]+', text)\n\n# Test the function with the example string\nprint(text_lowercase_underscore(\"The quick brown_fox jumps_over_the lazy_dog 12345\")) # ['quick_brown', 'jumps_over', 'lazy_dog']\n\n# Test the function with an empty string\nprint(text_lowercase_underscore(\"\")) # []\n\n# Test the function with a string with no lowercase letters\nprint(text_lowercase_underscore(\"12345_6789\")) # []\n\n# Test the function with a string with no underscore\nprint(text_lowercase_underscore(\"The quick brown fox jumps over the lazy dog\")) # []\n\n# Test the function with a string with uppercase letters\nprint(text_lowercase_underscore(\"The quick brown_Fox jumps_over_the lazy_Dog\")) # ['quick_brown', 'jumps_over'] ",
        "generated_testcode": "assert text_lowercase_underscore(\"hello_world\") == True\n",
        "test": "assert text_lowercase_underscore(\"aab_cbbbc\")==('Found a match!')\nassert text_lowercase_underscore(\"aab_Abbbc\")==('Not matched!')\nassert text_lowercase_underscore(\"Aaab_abbbc\")==('Not matched!')",
        "canonical_solution": "import re\r\ndef text_lowercase_underscore(text):\r\n        patterns = '^[a-z]+_[a-z]+$'\r\n        if re.search(patterns,  text):\r\n                return 'Found a match!'\r\n        else:\r\n                return('Not matched!')"
    },
    {
        "number": 17,
        "prompt": "Write a function to find the perimeter of a square.\ndef square_perimeter(a):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": true,
        "answer": "    return 4*a\n\n# Test the function with value 5\nprint(square_perimeter(5)) # Output: 20\n\n# Write a function to find the area of a square.\ndef square_area(a):\n    return a**2\n\n# Test the function with value 5\nprint(square_area(5)) # Output: 25\n\n# Write a function to find the area of a rectangle.\ndef rectangle_area(l,w):\n    return l*w\n\n# Test the function with values 5 and 10\nprint(rectangle_area(5,10)) # Output: 50\n\n# Write a function to find the perimeter of a rectangle.\ndef rectangle_perimeter(l,w):\n    return 2*(l+w)\n\n# Test the function with values 5 and 10\nprint(rectangle_perimeter(5,10)) # Output: 30\n\n# Write a function to find the area of a circle.\ndef circle_area(r):\n    return 3.14*(r**2)\n\n# Test the function with value 5\nprint(circle_area(5)) # Output: 78.5\n\n# Write a function to find the circumference of a circle.\ndef circle_circumference(r):\n    return 2*3.14*r\n\n# Test the function with value 5\nprint(circle_circumference(5)) # Output: 31.4\n\n# Write",
        "generated_testcode": "assert square_perimeter(5) == 20\n",
        "test": "assert square_perimeter(10)==40\nassert square_perimeter(5)==20\nassert square_perimeter(4)==16",
        "canonical_solution": "def square_perimeter(a):\r\n  perimeter=4*a\r\n  return perimeter"
    },
    {
        "number": 18,
        "prompt": "Write a function to remove characters from the first string which are present in the second string.\ndef str_to_list(string): \n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    return list(string) \n\ndef remove_char(str1, str2): \n    list1 = str_to_list(str1) \n    list2 = str_to_list(str2) \n    for i in list2: \n        if i in list1: \n            list1.remove(i) \n    return \"\".join(list1) \n\nstr1 = \"hello world\"\nstr2 = \"l o\"\nprint(remove_char(str1, str2)) # Output: \"he wor\" ",
        "generated_testcode": "assert str_to_list(\"hello world\") == [\"h\", \"e\", \"l\", \"l\", \"o\", \" \", \"w\", \"o\", \"r\", \"l\", \"d\"]\n",
        "test": "assert remove_dirty_chars(\"probasscurve\", \"pros\") == 'bacuve'\nassert remove_dirty_chars(\"digitalindia\", \"talent\") == 'digiidi'\nassert remove_dirty_chars(\"exoticmiles\", \"toxic\") == 'emles' ",
        "canonical_solution": "NO_OF_CHARS = 256\r\ndef str_to_list(string): \r\n\ttemp = [] \r\n\tfor x in string: \r\n\t\ttemp.append(x) \r\n\treturn temp \r\ndef lst_to_string(List): \r\n\treturn ''.join(List) \r\ndef get_char_count_array(string): \r\n\tcount = [0] * NO_OF_CHARS \r\n\tfor i in string: \r\n\t\tcount[ord(i)] += 1\r\n\treturn count \r\ndef remove_dirty_chars(string, second_string): \r\n\tcount = get_char_count_array(second_string) \r\n\tip_ind = 0\r\n\tres_ind = 0\r\n\ttemp = '' \r\n\tstr_list = str_to_list(string) \r\n\twhile ip_ind != len(str_list): \r\n\t\ttemp = str_list[ip_ind] \r\n\t\tif count[ord(temp)] == 0: \r\n\t\t\tstr_list[res_ind] = str_list[ip_ind] \r\n\t\t\tres_ind += 1\r\n\t\tip_ind+=1\r\n\treturn lst_to_string(str_list[0:res_ind]) "
    },
    {
        "number": 19,
        "prompt": "Write a function to find whether a given array of integers contains any duplicate element.\ndef test_duplicate(arraynums):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    my_set = set()\n    for i in arraynums:\n        if i in my_set:\n            return True\n        else:\n            my_set.add(i)\n    return False\n\n# Test the function with an example\narraynums = [1,2,3,4,5,6,1]\nprint(test_duplicate(arraynums)) # Output: True\narraynums = [1,2,3,4,5,6]\nprint(test_duplicate(arraynums)) # Output: False\n\n# Time complexity: O(n) ",
        "generated_testcode": "assert test_duplicate([1, 2, 3, 4, 5, 6]) == False\n",
        "test": "assert test_duplicate(([1,2,3,4,5]))==False\nassert test_duplicate(([1,2,3,4, 4]))==True\nassert test_duplicate([1,1,2,2,3,3,4,4,5])==True",
        "canonical_solution": "def test_duplicate(arraynums):\r\n    nums_set = set(arraynums)    \r\n    return len(arraynums) != len(nums_set)     "
    },
    {
        "number": 20,
        "prompt": "Write a function to check if the given number is woodball or not.\ndef is_woodall(x): \n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    if x == 1: \n        return True\n    for i in range(2, int(x ** 0.5) + 1): \n        if x % i == 0: \n            return False\n    return True \n\n#Testing the function\nprint(is_woodall(6)) # Output: False\nprint(is_woodall(12)) # Output: True\nprint(is_woodall(16)) # Output: True \nprint(is_woodall(17)) # Output: True \nprint(is_woodall(20)) # Output: False \nprint(is_woodall(28)) # Output: True ",
        "generated_testcode": "assert is_woodall(123456789) == True\n",
        "test": "assert is_woodall(383) == True\nassert is_woodall(254) == False\nassert is_woodall(200) == False",
        "canonical_solution": "def is_woodall(x): \r\n\tif (x % 2 == 0): \r\n\t\treturn False\r\n\tif (x == 1): \r\n\t\treturn True\r\n\tx = x + 1 \r\n\tp = 0\r\n\twhile (x % 2 == 0): \r\n\t\tx = x/2\r\n\t\tp = p + 1\r\n\t\tif (p == x): \r\n\t\t\treturn True\r\n\treturn False"
    },
    {
        "number": 21,
        "prompt": "Write a function to find m number of multiples of n.\ndef multiples_of_num(m,n): \n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    count=0\n    for i in range(1,m+1):\n        if i%n==0:\n            count=count+1\n    return count\n\n#Test the function with values of m and n\nprint(multiples_of_num(10,5)) #should print 2\nprint(multiples_of_num(15,7)) #should print 2\nprint(multiples_of_num(20,4)) #should print 5\nprint(multiples_of_num(30,10)) #should print 3\n\n\n#Output:\n2\n2\n5\n3",
        "generated_testcode": "assert multiples_of_num(10,5) == 2 # 5, 10, 15, 20, 25, 30, 35, 40, 45, 50\n",
        "test": "assert multiples_of_num(4,3)== [3,6,9,12]\nassert multiples_of_num(2,5)== [5,10]\nassert multiples_of_num(9,2)== [2,4,6,8,10,12,14,16,18]",
        "canonical_solution": "def multiples_of_num(m,n): \r\n    multiples_of_num= list(range(n,(m+1)*n, n)) \r\n    return list(multiples_of_num)"
    },
    {
        "number": 22,
        "prompt": "Write a function to find the first duplicate element in a given array of integers.\ndef find_first_duplicate(nums):\n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    num_dict = {}\n    for num in nums:\n        if num in num_dict:\n            return num\n        else:\n            num_dict[num] = True\n    return None\n\n# Test case\nprint(find_first_duplicate([1, 2, 3, 4, 2, 5, 6, 7, 1, 8, 3]))  # Output: 2\nprint(find_first_duplicate([1, 2, 3, 4, 5, 6, 7, 8]))  # Output: None\n\n# Time Complexity: O(n)\n# Space Complexity: O(n)\n# Note: We can also use a set to store the elements and check if an element is already present in the set, but we will lose the order of the elements in the array. ",
        "generated_testcode": "assert find_first_duplicate([1, 2, 3, 4, 5, 6, 6, 7, 8, 9, 10]) == 6\n",
        "test": "assert find_first_duplicate(([1, 2, 3, 4, 4, 5]))==4\nassert find_first_duplicate([1, 2, 3, 4])==-1\nassert find_first_duplicate([1, 1, 2, 3, 3, 2, 2])==1",
        "canonical_solution": "def find_first_duplicate(nums):\r\n    num_set = set()\r\n    no_duplicate = -1\r\n\r\n    for i in range(len(nums)):\r\n\r\n        if nums[i] in num_set:\r\n            return nums[i]\r\n        else:\r\n            num_set.add(nums[i])\r\n\r\n    return no_duplicate"
    },
    {
        "number": 23,
        "prompt": "Write a python function to find the maximum sum of elements of list in a list of lists.\ndef maximum_Sum(list1): \n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    max_sum = 0\n    for i in range(len(list1)): \n        if sum(list1[i]) > max_sum: \n            max_sum = sum(list1[i] \n    return max_sum \n  \n#example \nlist1 = [[1, 2, 3], [4, 5, 6], [7, 8, 9], [1, 2, 3, 4, 5]] \nprint(\"Maximum sum of sublist is:\", maximum_Sum(list1)) ",
        "generated_testcode": "assert maximum_Sum([[1,2,3],[4,5,6],[7,8,9]) == 24\n",
        "test": "assert maximum_Sum([[1,2,3],[4,5,6],[10,11,12],[7,8,9]]) == 33\nassert maximum_Sum([[0,1,1],[1,1,2],[3,2,1]]) == 6\nassert maximum_Sum([[0,1,3],[1,2,1],[9,8,2],[0,1,0],[6,4,8]]) == 19",
        "canonical_solution": "def maximum_Sum(list1): \r\n    maxi = -100000\r\n    for x in list1: \r\n        sum = 0 \r\n        for y in x: \r\n            sum+= y      \r\n        maxi = max(sum,maxi)     \r\n    return maxi "
    },
    {
        "number": 24,
        "prompt": "Write a function to convert the given binary number to its decimal equivalent.\ndef binary_to_decimal(binary): \n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    decimal = 0 \n    base = 1 \n    n = 0 \n    while(binary != 0): \n        rem = binary % 10\n        decimal += rem * base \n        base = base * 2\n        binary = binary // 10 \n        n += 1\n    return decimal \n\nbinary = int(input(\"Enter binary number: \") \nprint(\"Decimal equivalent of\", binary, \"is\", binary_to_decimal(binary)) ",
        "generated_testcode": "assert binary_to_decimal(\"101010\") == 22\n",
        "test": "assert binary_to_decimal(100) == 4\nassert binary_to_decimal(1011) == 11\nassert binary_to_decimal(1101101) == 109",
        "canonical_solution": "def binary_to_decimal(binary): \r\n    binary1 = binary \r\n    decimal, i, n = 0, 0, 0\r\n    while(binary != 0): \r\n        dec = binary % 10\r\n        decimal = decimal + dec * pow(2, i) \r\n        binary = binary//10\r\n        i += 1\r\n    return (decimal)"
    },
    {
        "number": 25,
        "prompt": "Write a python function to find the product of non-repeated elements in a given array.\ndef find_Product(arr,n): \n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    from collections import Counter\n    count = Counter(arr)\n    product = 1\n    for i in count:\n        if count[i] == 1:\n            product *= i\n    return product \n  \n# Testing the function\narr = [1, 2, 3, 4, 5, 6, 7, 1, 2, 3] \nn = len(arr)\nprint(find_Product(arr, n)) # Output: 420\n  \narr = [1, 2, 3, 4, 5, 6, 7, 8, 9] \nn = len(arr)\nprint(find_Product(arr, n)) # Output: 40320\n  \narr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 1] \nn = len(arr)\nprint(find_Product(arr, n)) # Output: 5040\n  \narr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3] \nn = len(arr)\nprint(find_Product(arr, n)) # Output: 1215040 ",
        "generated_testcode": "assert find_Product([1,2,3,4,5,6,7,8,9], 7) == 3628800\n",
        "test": "assert find_Product([1,1,2,3],4) == 6\nassert find_Product([1,2,3,1,1],5) == 6\nassert find_Product([1,1,4,5,6],5) == 120",
        "canonical_solution": "def find_Product(arr,n): \r\n    arr.sort() \r\n    prod = 1\r\n    for i in range(0,n,1): \r\n        if (arr[i - 1] != arr[i]): \r\n            prod = prod * arr[i] \r\n    return prod; "
    },
    {
        "number": 26,
        "prompt": "Write a function to check if the given tuple list has all k elements.\ndef check_k_elements(test_list, K):\n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    return all(len(t) == K for t in test_list)\n\n\n# Example usage:\nprint(check_k_elements([(1, 2, 3), (4, 5, 6), (7, 8, 9)], 3))  # True\nprint(check_k_elements([(1, 2, 3), (4, 5), (7, 8, 9, 10)], 3))  # False\nprint(check_k_elements([(1, 2, 3), (4, 5, 6), (7, 8)], 3))  # False\n",
        "generated_testcode": "assert check_k_elements([(1, 2, 3), (4, 5, 6), (7, 8, 9), (10, 11, 12)], 3) == True\n",
        "test": "assert check_k_elements([(4, 4), (4, 4, 4), (4, 4), (4, 4, 4, 4), (4, )], 4) == True\nassert check_k_elements([(7, 7, 7), (7, 7)], 7) == True\nassert check_k_elements([(9, 9), (9, 9, 9, 9)], 7) == False",
        "canonical_solution": "def check_k_elements(test_list, K):\r\n  res = True\r\n  for tup in test_list:\r\n    for ele in tup:\r\n      if ele != K:\r\n        res = False\r\n  return (res) "
    },
    {
        "number": 27,
        "prompt": "Write a python function to remove all digits from a list of strings.\ndef remove(list): \n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    result = [] \n    for item in list: \n        s = \"\" \n        for i in item: \n            if i.isalpha(): \n                s += i \n        result.append(s) \n    return result \n\n# Example usage: \nlist = ['12hello', 'world34', 'Python5', '23Programming6'] \nprint(remove(list)) ",
        "generated_testcode": "assert remove(['hello', '123', 'world', '456']) == ['hello', 'world']\n",
        "test": "assert remove(['4words', '3letters', '4digits']) == ['words', 'letters', 'digits']\nassert remove(['28Jan','12Jan','11Jan']) == ['Jan','Jan','Jan']\nassert remove(['wonder1','wonder2','wonder3']) == ['wonder','wonder','wonder']",
        "canonical_solution": "import re  \r\ndef remove(list): \r\n    pattern = '[0-9]'\r\n    list = [re.sub(pattern, '', i) for i in list] \r\n    return list"
    },
    {
        "number": 28,
        "prompt": "Write a python function to find binomial co-efficient.\ndef binomial_Coeff(n,k): \n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    C = [[0 for x in range(k+1)] for x in range(n+1)] \n    for i in range(n+1): \n        C[i][0] = 1\n    for i in range(1, n+1): \n        for j in range(1, k+1): \n            C[i][j] = C[i-1][j-1] + C[i-1][j] \n    return C[n][k] \n\nn = int(input(\"Enter the value of n: \"))\nk = int(input(\"Enter the value of k: \"): \nprint(\"Binomial Coefficient is \", binomial_Coeff(n,k)) \n\n# This function takes two integers n and k as input and returns the binomial coefficient of (n, k) using dynamic programming approach. \n# Here, we have used 2D list to store the previous values of binomial coefficients for efficient computation. \n# We start by initializing a 2D list with 1 as the diagonal elements, and then calculate the remaining elements by the formula C(i,j) = C(i-1, j-1) + C(i-1, j). \n# At last, we return the value of C(n, k) from the 2D list. ",
        "generated_testcode": "assert binomial_Coeff(5,3) == 10\n",
        "test": "assert binomial_Coeff(5,2) == 10\nassert binomial_Coeff(4,3) == 4\nassert binomial_Coeff(3,2) == 3",
        "canonical_solution": "def binomial_Coeff(n,k): \r\n    if k > n : \r\n       return 0\r\n    if k==0 or k ==n : \r\n        return 1 \r\n    return binomial_Coeff(n-1,k-1) + binomial_Coeff(n-1,k) "
    },
    {
        "number": 29,
        "prompt": "Write a python function to find the element occurring odd number of times.\ndef get_Odd_Occurrence(arr,arr_size):   \n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    for i in range(0, arr_size):\n        count = 0\n        for j in range(0, arr_size):\n            if arr[i] == arr[j]:\n                count+=1\n        if count%2!=0:\n            return arr[i]\n    return -1\n\n#test input\narr = [1, 2, 3, 4, 5, 4, 3, 2, 1, 6, 5, 6]\narr_size = len(arr)\nprint(\"The element occurring odd number of times is: \", get_Odd_Occurrence(arr, arr_size)) ",
        "generated_testcode": "assert get_Odd_Occurrence([1, 2, 3, 2, 3, 1, 4, 4, 5, 5], 7) == 4\n",
        "test": "assert get_Odd_Occurrence([1,2,3,1,2,3,1],7) == 1\nassert get_Odd_Occurrence([1,2,3,2,3,1,3],7) == 3\nassert get_Odd_Occurrence([2,3,5,4,5,2,4,3,5,2,4,4,2],13) == 5",
        "canonical_solution": "def get_Odd_Occurrence(arr,arr_size):   \r\n    for i in range(0,arr_size): \r\n        count = 0\r\n        for j in range(0,arr_size): \r\n            if arr[i] == arr[j]: \r\n                count+=1     \r\n        if (count % 2 != 0): \r\n            return arr[i]     \r\n    return -1"
    },
    {
        "number": 30,
        "prompt": "Write a python function to count all the substrings starting and ending with same characters.\ndef check_Equality(s): \n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    count = 0 \n    for i in range(len(s)): \n        for j in range(i + 1, len(s)): \n            if s[i] == s[j]: \n                count += 1\n    return count \ns = input(\"Enter a string: \")\nprint(\"Number of substrings with same starting and ending characters:\", check_Equality(s)) ",
        "generated_testcode": "assert check_Equality(\"abccba\") == 2\n",
        "test": "assert count_Substring_With_Equal_Ends(\"abc\") == 3\nassert count_Substring_With_Equal_Ends(\"abcda\") == 6\nassert count_Substring_With_Equal_Ends(\"ab\") == 2",
        "canonical_solution": "def check_Equality(s): \r\n    return (ord(s[0]) == ord(s[len(s) - 1])); \r\ndef count_Substring_With_Equal_Ends(s): \r\n    result = 0; \r\n    n = len(s); \r\n    for i in range(n): \r\n        for j in range(1,n-i+1):  \r\n            if (check_Equality(s[i:i+j])): \r\n                result+=1; \r\n    return result; "
    },
    {
        "number": 31,
        "prompt": "Write a function to find the top k integers that occur most frequently from given lists of sorted and distinct integers using heap queue algorithm.\ndef func(nums, k):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    freq_dict = {}\n    for num in nums:\n        if num in freq_dict:\n            freq_dict[num] += 1\n        else:\n            freq_dict[num] = 1\n\n    heap = []\n    for key, value in freq_dict.items():\n        heapq.heappush(heap, (-value, key))\n        if len(heap) > k:\n            heapq.heappop(heap)\n\n    return [heapq.heappop(heap)[1] for i in range(len(heap))]\n\n# Test cases\nprint(func([1, 2, 3, 4, 5, 6, 5, 4, 3, 2, 1, 1, 1, 2, 3, 4], 3))  # Output: [1, 2, 3]\nprint(func([1, 1, 1, 2, 2, 3, 3, 4, 4, 4, 4, 4, 5, 5], 2))  # Output: [4, 1]\nprint(func([1, 2, 3, 4, 5, 6, 7, 8, 9], 4))  # Output: [1, 2, 3, 4, 5]\nprint(func([1, 1, 1, 1, 1, 1, 1",
        "generated_testcode": "assert func([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3) == [1, 2, 3]\n",
        "test": "assert func([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]],3)==[5, 7, 1]\nassert func([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]],1)==[1]\nassert func([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]],5)==[6, 5, 7, 8, 1]",
        "canonical_solution": "def func(nums, k):\r\n    import collections\r\n    d = collections.defaultdict(int)\r\n    for row in nums:\r\n        for i in row:\r\n            d[i] += 1\r\n    temp = []\r\n    import heapq\r\n    for key, v in d.items():\r\n        if len(temp) < k:\r\n            temp.append((v, key))\r\n            if len(temp) == k:\r\n                heapq.heapify(temp)\r\n        else:\r\n            if v > temp[0][0]:\r\n                heapq.heappop(temp)\r\n                heapq.heappush(temp, (v, key))\r\n    result = []\r\n    while temp:\r\n        v, key = heapq.heappop(temp)\r\n        result.append(key)\r\n    return result"
    },
    {
        "number": 32,
        "prompt": "Write a python function to find the largest prime factor of a given number.\ndef max_Prime_Factors (n): \n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    i = 2\n    while i * i <= n: \n        if (n % i): \n            i += 1\n        else: \n            n //= i \n    return n \n  \nn = 6000851475143\nprint (\"Largest Prime Factor of\", n, \"is\", max_Prime_Factors(n)) ",
        "generated_testcode": "assert max_Prime_Factors(13195) == 29\n",
        "test": "assert max_Prime_Factors(15) == 5\nassert max_Prime_Factors(6) == 3\nassert max_Prime_Factors(2) == 2",
        "canonical_solution": "import math \r\ndef max_Prime_Factors (n): \r\n    maxPrime = -1 \r\n    while n%2 == 0: \r\n        maxPrime = 2\r\n        n >>= 1    \r\n    for i in range(3,int(math.sqrt(n))+1,2): \r\n        while n % i == 0: \r\n            maxPrime = i \r\n            n = n / i \r\n    if n > 2: \r\n        maxPrime = n  \r\n    return int(maxPrime)"
    },
    {
        "number": 33,
        "prompt": "Write a python function to convert a decimal number to binary number.\ndef decimal_To_Binary(N): \n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": " \n    binary = \"\" \n    while N > 0: \n        binary = str(N % 2) + binary \n        N = N // 2\n    return binary \n  \n# Driver code to test the function \n# decimal number \ndecimal_Num = 24\n  \n# converting decimal to binary \nprint(\"Decimal to Binary:\", decimal_To_Binary(decimal_Num)) \n\n\n# Output: 11000000 \n\ndef binary_To_Decimal(binary): \n  \n    decimal = 0 \n    base = 1\n    length = len(binary) - 1\n  \n    for digit in binary: \n        decimal += int(digit) * base \n        base *= 2\n    return decimal \n  \n# binary number \nbinary_Num = \"10001\"\n  \n# converting binary to decimal \nprint(\"Binary to Decimal:\", binary_To_Decimal(binary_Num)) \n\n# Output: 9 ",
        "generated_testcode": "assert decimal_To_Binary(10) == \"1010\"\n",
        "test": "assert decimal_To_Binary(10) == 1010\nassert decimal_To_Binary(1) == 1\nassert decimal_To_Binary(20) == 10100",
        "canonical_solution": "def decimal_To_Binary(N): \r\n    B_Number = 0\r\n    cnt = 0\r\n    while (N != 0): \r\n        rem = N % 2\r\n        c = pow(10,cnt)  \r\n        B_Number += rem*c  \r\n        N //= 2 \r\n        cnt += 1\r\n    return B_Number  "
    },
    {
        "number": 34,
        "prompt": "Write a python function to find the missing number in a sorted array.\ndef find_missing(ar,N): \n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    sum_ar = (N*(N+1))/2\n    sum_array = sum(ar)\n    missing_number = sum_ar - sum_array\n    return missing_number\n\n# input\nN = int(input(\"Enter the size of array: \"))\nar = list(map(int,input(\"Enter the sorted array elements: \").strip().split()))[:N]\n\n# function call\nprint(\"Missing number is:\",find_missing(ar,N)) ",
        "generated_testcode": "assert find_missing([1,2,3,4,5,6,7,8,9,10],10) == 11\n",
        "test": "assert find_missing([1,2,3,5],4) == 4\nassert find_missing([1,3,4,5],4) == 2\nassert find_missing([1,2,3,5,6,7],5) == 4",
        "canonical_solution": "def find_missing(ar,N): \r\n    l = 0\r\n    r = N - 1\r\n    while (l <= r):  \r\n        mid = (l + r) / 2\r\n        mid= int (mid) \r\n        if (ar[mid] != mid + 1 and ar[mid - 1] == mid): \r\n            return (mid + 1)  \r\n        elif (ar[mid] != mid + 1): \r\n            r = mid - 1 \r\n        else: \r\n            l = mid + 1\r\n    return (-1) "
    },
    {
        "number": 35,
        "prompt": "Write a function to find the n-th rectangular number.\ndef find_rect_num(n):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    if n < 1:\n        return 0\n    return (n * (n + 1) * (2 * n + 1) // 6\n\n# Test the function with some sample inputs\nprint(find_rect_num(1))  # Output: 1\nprint(find_rect_num(2))  # Output: 6\nprint(find_rect_num(3))  # Output: 15\nprint(find_rect_num(4))  # Output: 28\nprint(find_rect_num(5))  # Output: 45\nprint(find_rect_num(6))  # Output: 72\n\n# Test the function with some edge cases\nprint(find_rect_num(0))  # Output: 0\nprint(find_rect_num(100))  # Output: 5050\nprint(find_rect_num(10000))  # Output: 505050050\n",
        "generated_testcode": "assert find_rect_num(1) == 1\n",
        "test": "assert find_rect_num(4) == 20\nassert find_rect_num(5) == 30\nassert find_rect_num(6) == 42",
        "canonical_solution": "def find_rect_num(n):\r\n  return n*(n + 1) "
    },
    {
        "number": 36,
        "prompt": "Write a python function to find the nth digit in the proper fraction of two given numbers.\ndef find_Nth_Digit(p,q,N) :  \n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    num = 0\n    count = 0\n    while (True) :\n        num = num + 1\n        if (count + len(str(num)) >= N) :\n            break\n        count += len(str(num)\n    num = num + 1\n    digit = (num // (q) * 10)\n    digit = num % 10\n    return digit\n\nprint(find_Nth_Digit(1, 2, 10)) # Output : 1\nprint(find_Nth_Digit(1, 2, 12)) # Output : 1\nprint(find_Nth_Digit(1, 2, 13)) # Output : 2\nprint(find_Nth_Digit(1, 2, 14)) # Output : 1\nprint(find_Nth_Digit(1, 2, 15)) # Output : 2\nprint(find_Nth_Digit(1, 2, 16)) # Output : 1\nprint(find_Nth_Digit(1, 2, 17)) # Output : 2\nprint(find_Nth_Digit(1, 2, 1000)) # Output : 1 \n\n# Test case 1 : \n# The first two digits in the proper fraction 1/2 are 0 and 5. Since the proper fraction starts with 0, the third digit is 1.\n# The fourth digit is also 1",
        "generated_testcode": "assert find_Nth_Digit(1,2,1) == 0\n",
        "test": "assert find_Nth_Digit(1,2,1) == 5\nassert find_Nth_Digit(3,5,1) == 6\nassert find_Nth_Digit(5,6,5) == 3",
        "canonical_solution": "def find_Nth_Digit(p,q,N) :  \r\n    while (N > 0) : \r\n        N -= 1;  \r\n        p *= 10;  \r\n        res = p // q;  \r\n        p %= q;  \r\n    return res;  "
    },
    {
        "number": 37,
        "prompt": "Write a function to sort a given mixed list of integers and strings.\ndef sort_mixed_list(mixed_list):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    # initialize two empty lists, one for integers and one for strings\n    int_list = []\n    str_list = []\n\n    # iterate over each element in the given mixed_list\n    for element in mixed_list:\n        if isinstance(element, int):\n            int_list.append(element)\n        else:\n            str_list.append(element)\n\n    # sort the two lists separately and then combine them\n    int_list.sort()\n    str_list.sort()\n    return int_list + str_list\n\n# example usage:\nmixed_list = [5, \"apple\", 3, 8, \"banana\", 1, \"orange\", 9, \"grape\", 6]\nprint(sort_mixed_list(mixed_list))\n# output: [1, 3, 5, 6, 8, 9, \"apple\", \"banana\", \"grape\", \"orange\"]\n",
        "generated_testcode": "assert sort_mixed_list([\"apple\", 1, \"banana\", 2, \"cherry\", 3, \"date\", 4, \"elderberry\"]) == [\"1\", \"2\", \"3\", \"4\", \"apple\", \"banana\", \"cherry\", \"date\", \"elderberry\"]\n",
        "test": "assert sort_mixed_list([19,'red',12,'green','blue', 10,'white','green',1])==[1, 10, 12, 19, 'blue', 'green', 'green', 'red', 'white']\nassert sort_mixed_list([19,'red',12,'green','blue', 10,'white','green',1])==[1, 10, 12, 19, 'blue', 'green', 'green', 'red', 'white']\nassert sort_mixed_list([19,'red',12,'green','blue', 10,'white','green',1])==[1, 10, 12, 19, 'blue', 'green', 'green', 'red', 'white']",
        "canonical_solution": "def sort_mixed_list(mixed_list):\r\n    int_part = sorted([i for i in mixed_list if type(i) is int])\r\n    str_part = sorted([i for i in mixed_list if type(i) is str])\r\n    return int_part + str_part"
    },
    {
        "number": 38,
        "prompt": "Write a function to find the division of first even and odd number of a given list.\ndef div_even_odd(list1):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    even_list = []\n    odd_list = []\n    for num in list1:\n        if num % 2 == 0:\n            even_list.append(num)\n        else:\n            odd_list.append(num)\n    return even_list, odd_list\n\n\n# Test the function\nprint(div_even_odd([2, 4, 6, 8, 1, 3, 5, 7, 10, 12]))\n\n# Output: ([2, 4, 6, 8, 10], [1, 3, 5, 7])\n\n# Explanation: 2 and 6 are even, 4 and 8 are even, 1 and 7 are odd, 3 and 12 are odd. ",
        "generated_testcode": "assert div_even_odd([1, 2, 3, 4, 5, 6, 7, 8, 9]) == (4, 3)\n",
        "test": "assert div_even_odd([1,3,5,7,4,1,6,8])==4\nassert div_even_odd([1,2,3,4,5,6,7,8,9,10])==2\nassert div_even_odd([1,5,7,9,10])==10",
        "canonical_solution": "def div_even_odd(list1):\r\n    first_even = next((el for el in list1 if el%2==0),-1)\r\n    first_odd = next((el for el in list1 if el%2!=0),-1)\r\n    return (first_even/first_odd)"
    },
    {
        "number": 39,
        "prompt": "Write a function to check if the letters of a given string can be rearranged so that two characters that are adjacent to each other are different.\ndef rearange_string(S):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    if len(S) == 0 or len(S) == 1:\n        return True\n\n    # Count the frequency of each letter in the string\n    freq = {}\n    for char in S:\n        if char in freq:\n            freq[char] += 1\n        else:\n            freq[char] = 1\n\n    # If there are more than 2 letters with the same frequency, we can't rearrange the string\n    max_freq = max(freq.values())\n    min_freq = min(freq.values())\n    if max_freq - min_freq > 1:\n        return False\n\n    # Count the number of letters with even frequency\n    even_count = 0\n    for f in freq.values():\n        if f % 2 == 0:\n            even_count += 1\n\n    # If there are an even number of letters with even frequency, we can rearrange the string\n    if even_count % 2 == 0:\n        return True\n\n    # If there is only one letter with odd frequency, we can rearrange the string\n    if len(freq) == 2:\n        return True\n\n    return False\n\n\n\n# Test the function with some examples\nprint(rearange_string(\"aabccccddeeee\"))  # True\nprint(rearange_string(\"abcdef\"))  # True\nprint(rearange_string(\"aabbcde\"))  # False\nprint(re",
        "generated_testcode": "assert rearange_string(\"aabbcc\") == True\n",
        "test": "assert rearange_string(\"aab\")==('aba')\nassert rearange_string(\"aabb\")==('abab')\nassert rearange_string(\"abccdd\")==('cdabcd')",
        "canonical_solution": "import heapq\r\nfrom collections import Counter\r\ndef rearange_string(S):\r\n    ctr = Counter(S)\r\n    heap = [(-value, key) for key, value in ctr.items()]\r\n    heapq.heapify(heap)\r\n    if (-heap[0][0]) * 2 > len(S) + 1: \r\n        return \"\"\r\n    ans = []\r\n    while len(heap) >= 2:\r\n        nct1, char1 = heapq.heappop(heap)\r\n        nct2, char2 = heapq.heappop(heap)\r\n        ans.extend([char1, char2])\r\n        if nct1 + 1: heapq.heappush(heap, (nct1 + 1, char1))\r\n        if nct2 + 1: heapq.heappush(heap, (nct2 + 1, char2))\r\n    return \"\".join(ans) + (heap[0][1] if heap else \"\")"
    },
    {
        "number": 40,
        "prompt": "Write a function to find frequency of the elements in a given list of lists using collections module.\ndef freq_element(nums):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    import collections\n    freq = collections.Counter(nums)\n    return freq\n\n# Test the function with sample input\nprint(freq_element([1, 2, 3, 2, 4, 5, 3, 4, 5, 1, 2, 3])) # Output: Counter({2: 3, 3: 2, 4: 2, 5: 2, 1: 1})\nprint(freq_element([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) # Output: Counter({1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1})\n\n\n# Find the frequency of the elements in the nested list using list comprehension\ndef nested_freq(lists):\n    flattened_list = [item for sublist in lists for item in sublist]\n    freq = collections.Counter(flattened_list)\n    return freq\n\n# Test the function with sample input\nprint(nested_freq([[1, 2, 3, 2, 4, 5, 3, 4, 5, 1, 2, 3], [1, 2, 3, 4, 5, 6,",
        "generated_testcode": "assert freq_element(nums) == {'a': 2, 'b': 1, 'c': 1, 'd': 1, 'e': 1}\n\n# Test the function with the given input\nnums = [['a', 'b', 'c', 'd', 'a', 'e', 'a', 'b']]\nprint(freq_element(nums))\n\n",
        "test": "assert freq_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]])==({2: 3, 1: 2, 5: 2, 3: 1, 4: 1, 6: 1, 7: 1, 9: 1})\nassert freq_element([[1,2,3,4],[5,6,7,8],[9,10,11,12]])==({1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 1, 12: 1})\nassert freq_element([[15,20,30,40],[80,90,100,110],[30,30,80,90]])==({30: 3, 80: 2, 90: 2, 15: 1, 20: 1, 40: 1, 100: 1, 110: 1})",
        "canonical_solution": "from collections import Counter\r\nfrom itertools import chain\r\ndef freq_element(nums):\r\n  result = Counter(chain.from_iterable(nums))\r\n  return result"
    },
    {
        "number": 41,
        "prompt": "Write a function to filter even numbers using lambda function.\ndef filter_evennumbers(nums):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    return list(filter(lambda x: x%2==0, nums))\n\n# Test the function with sample data\nprint(filter_evennumbers([1,2,3,4,5,6,7,8,9,10])) # Output: [2,4,6,8,10] ",
        "generated_testcode": "assert filter_evennumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [2, 4, 6, 8, 10]\n",
        "test": "assert filter_evennumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[2, 4, 6, 8, 10]\nassert filter_evennumbers([10,20,45,67,84,93])==[10,20,84]\nassert filter_evennumbers([5,7,9,8,6,4,3])==[8,6,4]",
        "canonical_solution": "def filter_evennumbers(nums):\r\n even_nums = list(filter(lambda x: x%2 == 0, nums))\r\n return even_nums"
    },
    {
        "number": 42,
        "prompt": "Write a python function to find the sum of repeated elements in a given array.\ndef find_Sum(arr,n): \n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    # Initialize an empty dictionary\n    freq = {} \n    for i in range(n): \n        if arr[i] in freq: \n            freq[arr[i]] += 1\n        else: \n            freq[arr[i]] = 1\n\n    # Traverse through the dictionary and find the sum of repeated elements\n    sum = 0\n    for i in freq: \n        if freq[i] > 1: \n            sum += i \n    return sum \n\n# Test the function\narr = [1, 2, 3, 2, 4, 5, 3, 1] \nn = len(arr) \nprint(find_Sum(arr, n)) # Output: 7 (2 + 3 = 5) ",
        "generated_testcode": "assert find_Sum([1,2,3,4,5,6,7,8,9,1,2,3], 8) == 4\n",
        "test": "assert find_Sum([1,2,3,1,1,4,5,6],8) == 3\nassert find_Sum([1,2,3,1,1],5) == 3\nassert find_Sum([1,1,2],3) == 2",
        "canonical_solution": "def find_Sum(arr,n): \r\n    return sum([x for x in arr if arr.count(x) > 1])"
    },
    {
        "number": 43,
        "prompt": "Write a function to find sequences of lowercase letters joined with an underscore using regex.\ndef text_match(text):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    pattern = r\"[a-z]+_[a-z]+\"\n    return re.findall(pattern, text)\n\n# Example usage:\nprint(text_match(\"hello_world hello world\")) # Output: [\"hello_world\"]\nprint(text_match(\"python is great_but regex is better\")) # Output: [\"python_is\", \"great_but\"]\nprint(text_match(\"\")) # Output: []\nprint(text_match(\"123_456_789\")) # Output: []\nprint(text_match(\"HELLO_world\")) # Output: []\nprint(text_match(\"hello_world123\")) # Output: []\nprint(text_match(\"python is great but_regex is better\")) # Output: [\"regex_is\"] ",
        "generated_testcode": "assert text_match(\"hello_world\") == True\n",
        "test": "assert text_match(\"aab_cbbbc\") == 'Found a match!'\nassert text_match(\"aab_Abbbc\") == 'Not matched!'\nassert text_match(\"Aaab_abbbc\") == 'Not matched!'",
        "canonical_solution": "import re\r\ndef text_match(text):\r\n  patterns = '^[a-z]+_[a-z]+$'\r\n  if re.search(patterns,  text):\r\n    return ('Found a match!')\r\n  else:\r\n    return ('Not matched!')"
    },
    {
        "number": 44,
        "prompt": "Write a function that matches a word at the beginning of a string.\ndef text_match_string(text):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    # Your code here\n    return re.match(\"^word\", text)\n\n# Test cases\nprint(text_match_string(\"word\"))  # True\nprint(text_match_string(\"another word\"))  # False\nprint(text_match_string(\"word is in the beginning\"))  # True\nprint(text_match_string(\"word at the end of the string\"))  # False\nprint(text_match_string(\"word in the middle\"))  # False\nprint(text_match_string(\"word\"))  # True\nprint(text_match_string(\"another word\"))  # False\nprint(text_match_string(\"word is in the beginning\"))  # True\nprint(text_match_string(\"word at the end of the string\"))  # False\nprint(text_match_string(\"word in the middle\"))  # False ",
        "generated_testcode": "assert text_match_string(\"Hello world\") == True\n",
        "test": "assert text_match_string(\" python\")==('Not matched!')\nassert text_match_string(\"python\")==('Found a match!')\nassert text_match_string(\"  lang\")==('Not matched!')",
        "canonical_solution": "import re\r\ndef text_match_string(text):\r\n        patterns = '^\\w+'\r\n        if re.search(patterns,  text):\r\n                return 'Found a match!'\r\n        else:\r\n                return 'Not matched!'"
    },
    {
        "number": 45,
        "prompt": "Write a function to find the gcd of the given array elements.\ndef find_gcd(x, y): \n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    while(y): \n        x, y = y, x % y \n    return x \n\ndef gcd_array(arr): \n    gcd = arr[0] \n    for i in range(1, len(arr)): \n        gcd = find_gcd(gcd, arr[i]) \n    return gcd \n\narr = [27, 18, 36] \nprint(\"GCD of array elements is\", gcd_array(arr)) ",
        "generated_testcode": "assert find_gcd(12, 18) == 6\n",
        "test": "assert get_gcd([2, 4, 6, 8, 16]) == 2\nassert get_gcd([1, 2, 3]) == 1\nassert get_gcd([2, 4, 6, 8]) == 2 ",
        "canonical_solution": "def find_gcd(x, y): \r\n\twhile(y): \r\n\t\tx, y = y, x % y \r\n\treturn x \r\ndef get_gcd(l):\r\n  num1 = l[0]\r\n  num2 = l[1]\r\n  gcd = find_gcd(num1, num2)\r\n  for i in range(2, len(l)):\r\n    gcd = find_gcd(gcd, l[i])\r\n  return gcd"
    },
    {
        "number": 46,
        "prompt": "Write a python function to determine whether all the numbers are different from each other are not.\ndef test_distinct(data):\n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    for i in range(len(data)-1):\n        for j in range(i+1, len(data)):\n            if data[i] == data[j]:\n                return False\n    return True\n\n# Test cases\nprint(test_distinct([1, 2, 3, 4, 5])) # True\nprint(test_distinct([1, 2, 3, 3, 4])) # False\nprint(test_distinct([1, 1, 2, 3]))   # False\nprint(test_distinct([1, 2, 2, 3]))   # False\nprint(test_distinct([]))           # True\nprint(test_distinct([1]))         # True\nprint(test_distinct([1, 1]))      # False ",
        "generated_testcode": "assert test_distinct([1, 2, 3, 4, 5]) == True\n",
        "test": "assert test_distinct([1,5,7,9]) == True\nassert test_distinct([2,4,5,5,7,9]) == False\nassert test_distinct([1,2,3]) == True",
        "canonical_solution": "def test_distinct(data):\r\n  if len(data) == len(set(data)):\r\n    return True\r\n  else:\r\n    return False;"
    },
    {
        "number": 47,
        "prompt": "Write a python function to find the last digit when factorial of a divides factorial of b.\ndef compute_Last_Digit(A,B): \n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    def factorial(n): \n        if n == 0 or n == 1: \n            return 1\n        else: \n            return n * factorial(n - 1) \n    A_factorial = factorial(A)\n    B_factorial = factorial(B)\n    mod = 10\n    return A_factorial % mod\n    return B_factorial % mod\n    return (A_factorial * B_factorial) % mod ",
        "generated_testcode": "assert compute_Last_Digit(10, 20) == 0\n",
        "test": "assert compute_Last_Digit(2,4) == 2\nassert compute_Last_Digit(6,8) == 6\nassert compute_Last_Digit(1,2) == 2",
        "canonical_solution": "def compute_Last_Digit(A,B): \r\n    variable = 1\r\n    if (A == B): \r\n        return 1\r\n    elif ((B - A) >= 5):  \r\n        return 0\r\n    else:   \r\n        for i in range(A + 1,B + 1): \r\n            variable = (variable * (i % 10)) % 10\r\n        return variable % 10"
    },
    {
        "number": 48,
        "prompt": "Write a python function to set all odd bits of a given number.\ndef odd_bit_set_number(n):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    return n | (n & -n)\n\n# Test the function with an example\nprint(odd_bit_set_number(10))  # Output: 11\nprint(odd_bit_set_number(15))  # Output: 15\nprint(odd_bit_set_number(7))   # Output: 7\nprint(odd_bit_set_number(20))  # Output: 23\nprint(odd_bit_set_number(0))   # Output: 0\n\n# Explanation:\n# The bitwise AND operation (-n) sets all bits in the binary representation of n that are odd, and the bitwise OR operation (n | -n) sets all bits that are set in both n and (-n) to 1. Therefore, we get the same number with all odd bits set to 1. ",
        "generated_testcode": "assert odd_bit_set_number(10) == 15\n",
        "test": "assert odd_bit_set_number(10) == 15\nassert odd_bit_set_number(20) == 21\nassert odd_bit_set_number(30) == 31",
        "canonical_solution": "def odd_bit_set_number(n):\r\n    count = 0;res = 0;temp = n\r\n    while temp > 0:\r\n        if count % 2 == 0:\r\n            res |= (1 << count)\r\n        count += 1\r\n        temp >>= 1\r\n    return (n | res)"
    },
    {
        "number": 49,
        "prompt": "Write a function to extract every first or specified element from a given two-dimensional list.\ndef specified_element(nums, N):\n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    result = []\n    for i in nums:\n        result.append(i[N])\n    return result\n\n# Example usage:\nprint(specified_element([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 1))  # Output: [2, 5, 8]\nprint(specified_element([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 0))  # Output: [1, 4, 7]\nprint(specified_element([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 2))  # Output: [3, 6, 9]\n",
        "generated_testcode": "assert specified_element([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 0) == [1, 4, 7]\n",
        "test": "assert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],0)==[1, 4, 7]\nassert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],2)==[3, 6, 9]\nassert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],1)==[2,5,1]",
        "canonical_solution": "def specified_element(nums, N):\r\n    result = [i[N] for i in nums]\r\n    return result\r\n    "
    },
    {
        "number": 50,
        "prompt": "Write a function to find the list with minimum length using lambda function.\ndef min_length_list(input_list):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    min_length = min(len(x) for x in input_list)\n    return [x for x in input_list if len(x) == min_length]\n\n\n# Test the function with some sample inputs\ninput_list = [['apple', 'banana', 'orange', 'kiwi', 'grape', 'strawberry']]\nprint(min_length_list(input_list))  # Output: ['kiwi']\n\ninput_list = [['python', 'java', 'kotlin', 'javascript', 'ruby', 'swift']\nprint(min_length_list(input_list))  # Output: ['python', 'java', 'kotlin']\n\ninput_list = ['hello', 'world', 'python']\nprint(min_length_list(input_list))  # Output: ['hello', 'world', 'python']\n\ninput_list = []\nprint(min_length_list(input_list))  # Output: []\n\ninput_list = [1, 2, 3, 4, 5, 6, 7, 8, 9]\nprint(min_length_list(input_list))  # Output: []\n\ninput_list = [['a', 'b', 'c']]\nprint(min_length_list(input_list))  # Output: ['a', 'b', 'c'] ",
        "generated_testcode": "assert min_length_list([]) == None\n",
        "test": "assert min_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(1, [0])\nassert min_length_list([[1,2,3,4,5],[1,2,3,4],[1,2,3],[1,2],[1]])==(1,[1])\nassert min_length_list([[3,4,5],[6,7,8,9],[10,11,12],[1,2]])==(2,[1,2])",
        "canonical_solution": "def min_length_list(input_list):\r\n    min_length = min(len(x) for x in input_list )  \r\n    min_list = min(input_list, key = lambda i: len(i))\r\n    return(min_length, min_list)"
    },
    {
        "number": 51,
        "prompt": "Write a function to print check if the triangle is equilateral or not.\ndef check_equilateral(x,y,z):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    if x==y==z:\n        print(\"Equilateral\")\n    elif x!=y!=z and y!=z and x!=z:\n        print(\"Scalene\")\n    else:\n        print(\"Isosceles\")\n\na = float(input(\"Enter first side: \"))\nb = float(input(\"Enter second side: \"):\nc = float(input(\"Enter third side: \")\ncheck_equilateral(a,b,c)\n\n#write a function to check if the triangle is scalene, isosceles or equilateral based on the sides entered by the user.\n#Equilateral triangle means all sides are equal, isosceles means two sides are equal and the third is different, and scalene means all sides are different.\n\n#Example Output:\n#Enter first side: 3\n#Enter second side: 3\n#Enter third side: 3\n#Equilateral\n#Enter first side: 3\n#Enter second side: 4\n#Enter third side: 4\n#Isosceles\n#Enter first side: 5\n#Enter second side: 5\n#Enter third side: 3\n#Scalene\n#Enter first side: 4\n#Enter second side: 5\n#Enter third side: 6\n#Not a triangle\n\n#Hint: use if-else statements to check conditions.\n#Hint: To check if a triangle is valid, use the triangle inequality theorem: |a-b|<=c, |b-c|<=a, |a",
        "generated_testcode": "assert check_equilateral(1,1,1) == True\n",
        "test": "assert check_equilateral(6,8,12)==False \nassert check_equilateral(6,6,12)==False\nassert check_equilateral(6,6,6)==True",
        "canonical_solution": "def check_equilateral(x,y,z):\r\n  if x == y == z:\r\n\t   return True\r\n  else:\r\n     return False"
    },
    {
        "number": 52,
        "prompt": "Write a function to caluclate area of a parallelogram.\ndef parallelogram_area(b,h):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": true,
        "answer": "    return b*h\n\n# Test the function\nprint(parallelogram_area(10, 20)) # should print 200\nprint(parallelogram_area(20, 10)) # should print 200\nprint(parallelogram_area(15, 5)) # should print 75\n\n# Write a function to calculate area of a rectangle.\ndef rectangle_area(l,w):\n    return l*w\n\n# Test the function\nprint(rectangle_area(5, 10)) # should print 50\nprint(rectangle_area(15, 10)) # should print 150\nprint(rectangle_area(20, 10)) # should print 200\n\n# Write a function to calculate area of a triangle.\ndef triangle_area(b,h):\n    return (b*h)/2\n\n# Test the function\nprint(triangle_area(10, 5)) # should print 25\nprint(triangle_area(8, 6)) # should print 24\nprint(triangle_area(15, 8)) # should print 45\n\n# Write a function to calculate area of a circle.\ndef circle_area(r):\n    import math\n    return math.pi*(r**2)\n\n# Test the function\nprint(circle_area(5)) # should print 78.5\nprint(circle_area(3)) # should print 28.2",
        "generated_testcode": "assert parallelogram_area(5, 10) == 50\n",
        "test": "assert parallelogram_area(10,20)==200\nassert parallelogram_area(15,20)==300\nassert parallelogram_area(8,9)==72",
        "canonical_solution": "def parallelogram_area(b,h):\r\n  area=b*h\r\n  return area"
    },
    {
        "number": 53,
        "prompt": "Write a python function to check whether the first and last characters of a given string are equal or not.\ndef check_Equality(str):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    if len(str)<2:\n        return False\n    elif str[0]==str[-1]:\n        return True\n    else:\n        return False\n\n# Test the function with some examples\nprint(check_Equality(\"hello\")) # Output: False\nprint(check_Equality(\"aba\")) # Output: True\nprint(check_Equality(\"12321\")) # Output: True\nprint(check_Equality(\"abc\")) # Output: False\nprint(check_Equality(\"a\")) # Output: False ",
        "generated_testcode": "assert check_Equality(\"hello\") == True\n",
        "test": "assert check_Equality(\"abcda\") == \"Equal\"\nassert check_Equality(\"ab\") == \"Not Equal\"\nassert check_Equality(\"mad\") == \"Not Equal\"",
        "canonical_solution": "def check_Equality(str):\r\n  if (str[0] == str[-1]):  \r\n    return (\"Equal\") \r\n  else:  \r\n    return (\"Not Equal\") "
    },
    {
        "number": 54,
        "prompt": "Write a function to sort the given array by using counting sort.\ndef counting_sort(my_list):\n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    max_val = max(my_list)\n    min_val = min(my_list)\n    size = max_val - min_val + 1\n    count = [0] * size\n\n    for i in range(len(my_list)):\n        count[my_list[i] - min_val] += 1\n\n    for i in range(1, size):\n        count[i] += count[i - 1]\n\n    result = [0] * len(my_list)\n\n    for i in range(len(my_list) - 1, -1, -1):\n        result[count[my_list[i] - min_val] - 1] = my_list[i]\n        count[my_list[i] - min_val] -= 1\n\n    return result\n\n\n\n# Test the function\nmy_list = [4, 2, 2, 8, 5, 3, 3, 1]\nprint(counting_sort(my_list))\n",
        "generated_testcode": "assert counting_sort(my_list) == sorted(my_list)\n\n# Test the function with an example\nmy_list = [3, 1, 4, 1, 1, 5, 9, 2, 6, 5, 3, 5, 3, 7]\nprint(counting_sort(my_list)) # should print [1, 1, 1, 2, 3, 3, 3, 4, 5, 5, 5, 6, 7, 9]\n\n",
        "test": "assert counting_sort([1,23,4,5,6,7,8]) == [1, 4, 5, 6, 7, 8, 23]\nassert counting_sort([12, 9, 28, 33, 69, 45]) == [9, 12, 28, 33, 45, 69]\nassert counting_sort([8, 4, 14, 3, 2, 1]) == [1, 2, 3, 4, 8, 14]",
        "canonical_solution": "def counting_sort(my_list):\r\n    max_value = 0\r\n    for i in range(len(my_list)):\r\n        if my_list[i] > max_value:\r\n            max_value = my_list[i]\r\n    buckets = [0] * (max_value + 1)\r\n    for i in my_list:\r\n        buckets[i] += 1\r\n    i = 0\r\n    for j in range(max_value + 1):\r\n         for a in range(buckets[j]):\r\n             my_list[i] = j\r\n             i += 1\r\n    return my_list"
    },
    {
        "number": 55,
        "prompt": "Write a function to find t-nth term of geometric series.\ndef tn_gp(a,n,r):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    return a * (1 - r**n) / (1 - r)\n\na = 2\nr = 0.5\nn = 3\ntn = tn_gp(a,n,r)\nprint(\"Tn: \", tn)\n\n# Function to find the sum of the series\ndef sum_gp(a,n,r):\n    return a * (1 - r**(n+1) / (1 - r) - 1)\n\na = 2\nr = 0.5\nn = 3\ns = sum_gp(a,n,r)\nprint(\"Sum: \", s)\n\n# Function to find the sum of n terms of geometric series\ndef sum_n_terms_gp(a,n,r):\n    return a * (1 - (1 - r**n) / (1 - r)\n\na = 2\nr = 0.5\nn = 3\ns = sum_n_terms_gp(a,n,r)\nprint(\"Sum of n terms: \", s)\n\n# Function to find the sum of first n terms of geometric series\ndef sum_n_terms_gp(a,n,r):\n    return a * (1 - r**n) / (1 - r)\n\na = 2\nr = 0.5\nn = 3\ns = sum_n_terms_gp(a,n,r)\nprint(\"Sum of n terms: \", s)\n",
        "generated_testcode": "assert tn_gp(1,3,2) == 7\n",
        "test": "assert tn_gp(1,5,2)==16\nassert tn_gp(1,5,4)==256\nassert tn_gp(2,6,3)==486",
        "canonical_solution": "import math\r\ndef tn_gp(a,n,r):\r\n  tn = a * (math.pow(r, n - 1))\r\n  return tn"
    },
    {
        "number": 56,
        "prompt": "Write a python function to check if a given number is one less than twice its reverse.\ndef rev(num):    \n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    return num == int(str(num)[::-1])*2\n\ndef main():\n    num = int(input(\"Enter a number: \"))\n    if rev(num):\n        print(num, \"is one less than twice its reverse.\")\n    else:\n        print(num, \"is not one less than twice its reverse.\")\n\nmain()\n",
        "generated_testcode": "assert rev(121) == True\n",
        "test": "assert check(70) == False\nassert check(23) == False\nassert check(73) == True",
        "canonical_solution": "def rev(num):    \r\n    rev_num = 0\r\n    while (num > 0):  \r\n        rev_num = (rev_num * 10 + num % 10) \r\n        num = num // 10  \r\n    return rev_num  \r\ndef check(n):    \r\n    return (2 * rev(n) == n + 1)  "
    },
    {
        "number": 57,
        "prompt": "Write a python function to find the largest number that can be formed with the given digits.\ndef find_Max_Num(arr,n) : \n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    arr.sort(reverse=True)\n    num = \"\"\n    for i in arr :\n        num += str(i)\n    return int(num)\n\n# example usage:\narr = [3, 30, 34, 5, 9] \nn = len(arr) \nprint(find_Max_Num(arr,n)) # output : 9534303 ",
        "generated_testcode": "assert find_Max_Num([1,2,3,4,5],4) == 53421\n",
        "test": "assert find_Max_Num([1,2,3],3) == 321\nassert find_Max_Num([4,5,6,1],4) == 6541\nassert find_Max_Num([1,2,3,9],4) == 9321",
        "canonical_solution": "def find_Max_Num(arr,n) : \r\n    arr.sort(reverse = True) \r\n    num = arr[0] \r\n    for i in range(1,n) : \r\n        num = num * 10 + arr[i] \r\n    return num "
    },
    {
        "number": 58,
        "prompt": "Write a python function to check whether the given two integers have opposite sign or not.\ndef opposite_Signs(x,y): \n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    if (x > 0 and y < 0) or (x < 0 and y > 0): \n        return True\n    else: \n        return False\n  \n# Test the function with sample inputs \nprint(opposite_Signs(10, -10)) ",
        "generated_testcode": "assert (opposite_Signs(5, -5) == True)\n",
        "test": "assert opposite_Signs(1,-2) == True\nassert opposite_Signs(3,2) == False\nassert opposite_Signs(-10,-10) == False",
        "canonical_solution": "def opposite_Signs(x,y): \r\n    return ((x ^ y) < 0); "
    },
    {
        "number": 59,
        "prompt": "Write a function to find the nth octagonal number.\ndef is_octagonal(n): \n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    root = (1 + (1 + (24 * n) ** 0.5) ** 0.5) / 6\n    return root.is_integer() \n\ndef nth_octagonal_number(n):\n    return n * (n * 2 - 1)\n\ndef find_nth_octagonal_number(n):\n    count = 1\n    i = 1\n    while n > 0:\n        num = nth_octagonal_number(i)\n        if is_octagonal(num):\n            n -= 1\n        i += 1\n    return num\n\n# Test the function with the given values\nprint(find_nth_octagonal_number(10)) # Output: 2240\nprint(find_nth_octagonal_number(20)) # Output: 563\nprint(find_nth_octagonal_number(50)) # Output: 12760\nprint(find_nth_octagonal_number(100)) # Output: 4085\n\n# Time complexity: O(n)\n# Space complexity: O(1)\n\n# Note: This function finds the nth octagonal number using the formula n * (n * 2 - 1)\n# where n is the value of the octagonal number. We check if a number is octagonal or not using the fact that the nth octagonal number is the nth root of (1 + (24n)^",
        "generated_testcode": "assert is_octagonal(1) == 1\n",
        "test": "assert is_octagonal(5) == 65\nassert is_octagonal(10) == 280\nassert is_octagonal(15) == 645",
        "canonical_solution": "def is_octagonal(n): \r\n\treturn 3 * n * n - 2 * n "
    },
    {
        "number": 60,
        "prompt": "Write a function to find the maximum length of the subsequence with difference between adjacent elements for the given array.\ndef max_len_sub( arr, n): \n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    if n == 0 or n == 1: \n        return 1\n    if arr[n-1] > arr[n]: \n        return 1 + max_len_sub(arr, n-1) \n    else: \n        return 1\n  \n# Driver Code \narr = [1, 10, 2, 6, 3, 4, 5, 9] \nn = len(arr) \nprint(\"Length of the longest subsequence is\", max_len_sub(arr, n)) ",
        "generated_testcode": "assert max_len_sub([1, 2, 3, 5, 7, 9, 11, 13], 6) == 4\n",
        "test": "assert max_len_sub([2, 5, 6, 3, 7, 6, 5, 8], 8) == 5\nassert max_len_sub([-2, -1, 5, -1, 4, 0, 3], 7) == 4\nassert max_len_sub([9, 11, 13, 15, 18], 5) == 1",
        "canonical_solution": "def max_len_sub( arr, n): \r\n\tmls=[] \r\n\tmax = 0\r\n\tfor i in range(n): \r\n\t\tmls.append(1) \r\n\tfor i in range(n): \r\n\t\tfor j in range(i): \r\n\t\t\tif (abs(arr[i] - arr[j]) <= 1 and mls[i] < mls[j] + 1): \r\n\t\t\t\tmls[i] = mls[j] + 1\r\n\tfor i in range(n): \r\n\t\tif (max < mls[i]): \r\n\t\t\tmax = mls[i] \r\n\treturn max"
    },
    {
        "number": 61,
        "prompt": "Write a python function to count number of substrings with the sum of digits equal to their length.\ndef count_Substrings(s,n):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    count = 0\n    for i in range(1,n+1):\n        for j in range(n-i+1):\n            substr = s[j:j+i]\n            if sum(int(digit) for digit in substr) == i:\n                count += 1\n    return count\n\n#Test the function\ns = \"1234\"\nn = len(s)\nprint(count_Substrings(s,n)) #Output: 4\ns = \"11234\"\nn = len(s)\nprint(count_Substrings(s,n)) #Output: 5\ns = \"12345\"\nn = len(s)\nprint(count_Substrings(s,n)) #Output: 7\ns = \"123456\"\nn = len(s)\nprint(count_Substrings(s,n)) #Output: 11\ns = \"1234567\"\nn = len(s)\nprint(count_Substrings(s,n)) #Output: 16\n\n#Time Complexity: O(n^3) and Space Complexity: O(1) ",
        "generated_testcode": "assert count_Substrings(\"12345\", 5) == 1\n",
        "test": "assert count_Substrings('112112',6) == 6\nassert count_Substrings('111',3) == 6\nassert count_Substrings('1101112',7) == 12",
        "canonical_solution": "from collections import defaultdict\r\ndef count_Substrings(s,n):\r\n    count,sum = 0,0\r\n    mp = defaultdict(lambda : 0)\r\n    mp[0] += 1\r\n    for i in range(n):\r\n        sum += ord(s[i]) - ord('0')\r\n        count += mp[sum - (i + 1)]\r\n        mp[sum - (i + 1)] += 1\r\n    return count"
    },
    {
        "number": 62,
        "prompt": "Write a python function to find smallest number in a list.\ndef smallest_num(xs):\n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    smallest = xs[0]\n    for i in range(1, len(xs)):\n        if xs[i] < smallest:\n            smallest = xs[i]\n    return smallest\n\n# Test cases\nprint(smallest_num([5, 3, 9, 1, 8, 6]))  # output: 1\nprint(smallest_num([-2, -5, -8, -1, -3]))  # output: -5\nprint(smallest_num([10, 2, 3, 4, 5]))  # output: 2\n\n# Output: 1\n# Output: -5\n# Output: 2 ",
        "generated_testcode": "assert smallest_num([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 1\n",
        "test": "assert smallest_num([10, 20, 1, 45, 99]) == 1\nassert smallest_num([1, 2, 3]) == 1\nassert smallest_num([45, 46, 50, 60]) == 45",
        "canonical_solution": "def smallest_num(xs):\n  return min(xs)\n"
    },
    {
        "number": 63,
        "prompt": "Write a function to find the maximum difference between available pairs in the given tuple list.\ndef max_difference(test_list):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    min_val = test_list[0]\n    max_diff = 0\n    for val in test_list:\n        if val < min_val:\n            min_val = val\n        else:\n            diff = val - min_val\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff\n\n\n# Testing the function\ntest_list = (5, 10, 2, 15, 8, 9, 3, 12)\nprint(max_difference(test_list))  # Output: 13 (15 - 2)\n\n# Time Complexity: O(n)\n# Space Complexity: O(1)\n",
        "generated_testcode": "assert max_difference((1, 2, 3, 4, 5, 6, 7, 8, 9, 10) == 9\n",
        "test": "assert max_difference([(3, 5), (1, 7), (10, 3), (1, 2)]) == 7\nassert max_difference([(4, 6), (2, 17), (9, 13), (11, 12)]) == 15\nassert max_difference([(12, 35), (21, 27), (13, 23), (41, 22)]) == 23",
        "canonical_solution": "def max_difference(test_list):\r\n  temp = [abs(b - a) for a, b in test_list]\r\n  res = max(temp)\r\n  return (res) "
    },
    {
        "number": 64,
        "prompt": "Write a function to sort a list of tuples using lambda.\ndef subject_marks(subjectmarks):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    return sorted(subjectmarks, key=lambda x: x[1], reverse=True)\n\n# Test the function\nprint(subject_marks([('Maths', 85), ('Science', 75), ('English', 92), ('Social Science', 88)]))\n\n\n# Example Output: [('English', 92), ('Maths', 85), ('Social Science', 88), ('Science', 75)]\n\n# The sorted function takes a sequence and a key parameter, which is a function to extract a comparison key from each item in the sequence. The lambda function takes each item of the sequence (a tuple in this case) and returns the second element (index 1) as the comparison key, which will be used for sorting. The reverse parameter is set to True to sort the list in descending order. ",
        "generated_testcode": "assert subject_marks(subjectmarks=[(\"Maths\", 85), (\"Science\", 90), (\"English\", 75), (\"Social\", 80)]) == [(\"Maths\", 85), (\"Science\", 90), (\"Social\", 80), (\"English\", 75)]\n",
        "test": "assert subject_marks([('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])==[('Social sciences', 82), ('English', 88), ('Science', 90), ('Maths', 97)]\nassert subject_marks([('Telugu',49),('Hindhi',54),('Social',33)])==([('Social',33),('Telugu',49),('Hindhi',54)])\nassert subject_marks([('Physics',96),('Chemistry',97),('Biology',45)])==([('Biology',45),('Physics',96),('Chemistry',97)])",
        "canonical_solution": "def subject_marks(subjectmarks):\r\n#subject_marks = [('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])\r\n subjectmarks.sort(key = lambda x: x[1])\r\n return subjectmarks"
    },
    {
        "number": 65,
        "prompt": "Write a function of recursion list sum.\ndef recursive_list_sum(data_list):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    if len(data_list) == 0:\n        return 0\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])\n\ndata_list = [1,2,3,4,5,6,7,8,9]\nprint(recursive_list_sum(data_list))\n\n# This function takes a list as an argument and returns the sum of all the elements in the list by recursively calling the function for the sublist starting from index 1 and adding the first element to the result of the recursive call.\n# If the length of the list is 0, it returns 0.\n\n# To test the function, we pass in a list of integers and print the result.\n# The output should be 45, which is the sum of all the integers in the list. ",
        "generated_testcode": "assert recursive_list_sum([1, 2, 3, 4, 5]) == 15\n",
        "test": "assert recursive_list_sum(([1, 2, [3,4],[5,6]]))==21\nassert recursive_list_sum(([7, 10, [15,14],[19,41]]))==106\nassert recursive_list_sum(([10, 20, [30,40],[50,60]]))==210",
        "canonical_solution": "def recursive_list_sum(data_list):\r\n\ttotal = 0\r\n\tfor element in data_list:\r\n\t\tif type(element) == type([]):\r\n\t\t\ttotal = total + recursive_list_sum(element)\r\n\t\telse:\r\n\t\t\ttotal = total + element\r\n\treturn total"
    },
    {
        "number": 66,
        "prompt": "Write a python function to count positive numbers in a list.\ndef pos_count(list):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    count = 0\n    for i in list:\n        if i > 0:\n            count += 1\n    return count\n\n# Test the function\nlist1 = [-3, 5, 2, 0, 7, 1, -2, 8, -9, 4]\nprint(pos_count(list1))\n",
        "generated_testcode": "assert pos_count([1, -2, 3, 4, -5, 6, -7]) == 3\n",
        "test": "assert pos_count([1,-2,3,-4]) == 2\nassert pos_count([3,4,5,-1]) == 3\nassert pos_count([1,2,3,4]) == 4",
        "canonical_solution": "def pos_count(list):\r\n  pos_count= 0\r\n  for num in list: \r\n    if num >= 0: \r\n      pos_count += 1\r\n  return pos_count "
    },
    {
        "number": 67,
        "prompt": "Write a function to find the number of ways to partition a set of bell numbers.\ndef bell_number(n):   \n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    # Set up the table for dynamic programming\n    table = [[0]*(n+1) for i in range(n+1)]\n    for i in range(n+1):\n        table[i][0] = 1\n    for i in range(1,n+1):\n        for j in range(1,n+1):\n            for k in range(1,j+1):\n                table[i][j] += table[i-1][j-k]\n    return table[n][n]\n\n# Test the function with the example cases\nprint(bell_number(5)) # Should print 5\nprint(bell_number(10)) # Should print 11378461",
        "generated_testcode": "assert bell_number(0) == 1\n",
        "test": "assert bell_number(2)==2\nassert bell_number(10)==115975\nassert bell_number(56)==6775685320645824322581483068371419745979053216268760300",
        "canonical_solution": "def bell_number(n):   \r\n    bell = [[0 for i in range(n+1)] for j in range(n+1)] \r\n    bell[0][0] = 1\r\n    for i in range(1, n+1): \r\n        bell[i][0] = bell[i-1][i-1]  \r\n        for j in range(1, i+1): \r\n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]   \r\n    return bell[n][0] "
    },
    {
        "number": 68,
        "prompt": "Write a python function to check whether the given array is monotonic or not.\ndef is_Monotonic(A): \n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    if len(A) < 3: \n        return True\n    if A[0] < A[1]: \n        for i in range(1, len(A)-1): \n            if A[i] <= A[i+1]: \n                return True\n        return False\n    else: \n        for i in range(1, len(A)-1): \n            if A[i] >= A[i+1]: \n                return True\n        return False\n\nA = [1, 2, 3, 4, 5, 6, 6, 7] \nprint(is_Monotonic(A)) ",
        "generated_testcode": "assert is_Monotonic([1, 2, 3, 4, 5]) == True\n",
        "test": "assert is_Monotonic([6, 5, 4, 4]) == True\nassert is_Monotonic([1, 2, 2, 3]) == True\nassert is_Monotonic([1, 3, 2]) == False",
        "canonical_solution": "def is_Monotonic(A): \r\n    return (all(A[i] <= A[i + 1] for i in range(len(A) - 1)) or\r\n            all(A[i] >= A[i + 1] for i in range(len(A) - 1))) "
    },
    {
        "number": 69,
        "prompt": "Write a function to check whether a list contains the given sublist or not.\ndef is_sublist(l, s):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    for i in range(len(l) - len(s) + 1):\n        if l[i:i+len(s)] == s:\n            return True\n    return False\n\n# Example usage:\nl = [1,2,3,4,5,6]\ns = [2,3]\nprint(is_sublist(l, s))  # Output: True\n\nl = [1,2,3,4,5,6]\ns = [2,4]\nprint(is_sublist(l, s))  # Output: False\n\nl = [1,2,3,4,5,6]\ns = [1,2,3,4,5,6]\nprint(is_sublist(l, s))  # Output: True\n\nl = [1,2,3,4,5,6]\ns = [1,2,3,4,5,6,7]\nprint(is_sublist(l, s))  # Output: False\n\nl = [1,2,3,4,5,6]\ns = [1,2,3,4,5,5]\nprint(is_sublist(l, s))  # Output: False\n\nl = [1,2,3,4,5,6]\ns = [1,5,6]\nprint(is_sublist(l, s))  # Output: True\n\nl = [1,2,3,4,5,6]\ns = []\n",
        "generated_testcode": "assert is_sublist([1, 2, 3, 4, 5, 6], [2, 3]) == True\n",
        "test": "assert is_sublist([2,4,3,5,7],[3,7])==False\nassert is_sublist([2,4,3,5,7],[4,3])==True\nassert is_sublist([2,4,3,5,7],[1,6])==False",
        "canonical_solution": "def is_sublist(l, s):\r\n\tsub_set = False\r\n\tif s == []:\r\n\t\tsub_set = True\r\n\telif s == l:\r\n\t\tsub_set = True\r\n\telif len(s) > len(l):\r\n\t\tsub_set = False\r\n\telse:\r\n\t\tfor i in range(len(l)):\r\n\t\t\tif l[i] == s[0]:\r\n\t\t\t\tn = 1\r\n\t\t\t\twhile (n < len(s)) and (l[i+n] == s[n]):\r\n\t\t\t\t\tn += 1\t\t\t\t\r\n\t\t\t\tif n == len(s):\r\n\t\t\t\t\tsub_set = True\r\n\treturn sub_set"
    },
    {
        "number": 70,
        "prompt": "Write a function to find whether all the given tuples have equal length or not.\ndef find_equal_tuple(Input, k):\n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    # Initialize a variable to store the length of the tuple\n    n = len(Input[0])\n    # Loop through all the tuples and check if the length of all the tuples is equal to n\n    for i in Input:\n        if len(i) != n:\n            return False\n    return True\n\n\n# Test the function\nInput = [(1, 2, 3), (4, 5, 6), (7, 8, 9), (10, 11, 12)]\nk = len(Input)\nprint(find_equal_tuple(Input, k))\n\nInput = [(1, 2, 3, 4), (5, 6, 7), (8, 9, 10, 11), (12, 13)]\nk = len(Input)\nprint(find_equal_tuple(Input, k))\n\nInput = [(1, 2), (3, 4), (5, 6, 7), (8, 9, 10, 11, 12)]\nk = len(Input)\nprint(find_equal_tuple(Input, k))\n\nInput = [(1, 2, 3, 4), (5, 6, 7, 8), (9, 10, 11, 12), (13, 14, 15, 16)]\nk = len(Input)\nprint(find_equal_tuple(Input, k))\n\n",
        "generated_testcode": "assert find_equal_tuple([(1, 2, 3), (4, 5, 6), (7, 8, 9)], 3) == True\n",
        "test": "assert get_equal([(11, 22, 33), (44, 55, 66)], 3) == 'All tuples have same length'\nassert get_equal([(1, 2, 3), (4, 5, 6, 7)], 3) == 'All tuples do not have same length'\nassert get_equal([(1, 2), (3, 4)], 2) == 'All tuples have same length'",
        "canonical_solution": "def find_equal_tuple(Input, k):\r\n  flag = 1\r\n  for tuple in Input:\r\n    if len(tuple) != k:\r\n      flag = 0\r\n      break\r\n  return flag\r\ndef get_equal(Input, k):\r\n  if find_equal_tuple(Input, k) == 1:\r\n    return (\"All tuples have same length\")\r\n  else:\r\n    return (\"All tuples do not have same length\")"
    },
    {
        "number": 71,
        "prompt": "Write a function to sort a list of elements using comb sort.\ndef comb_sort(nums):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    def swap(i, j):\n        nums[i], nums[j] = nums[j], nums[i]\n\n    gap = len(nums)\n    shrink = 1.3\n    sorted = False\n    while not sorted:\n        gap = int(gap / shrink)\n        if gap <= 1:\n            gap = 1\n            sorted = True\n        for i in range(len(nums) - gap):\n            if nums[i] > nums[i + gap]:\n                swap(i, i + gap)\n                sorted = False\n        for i in range(len(nums) - 1, 0, -1):\n            if nums[i] < nums[i - 1]:\n                swap(i, i - 1)\n                sorted = False\n    return nums\n\n# Example usage:\nnums = [5, 1, 12, 8, 5, 13, 2, 9]\nprint(comb_sort(nums))  # Output: [1, 2, 5, 5, 8, 12, 13]\n\n# Complexity Analysis:\n# Time Complexity: O(n^2) in the worst case and O(n*log(n)) in the best case\n# Space Complexity: O(1)\n# Comb sort is a hybrid sorting algorithm that is a modification of the bubble sort algorithm. It is a stable sorting algorithm and can work well on",
        "generated_testcode": "assert comb_sort([]).sort() == []\n",
        "test": "assert comb_sort([5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79]\nassert comb_sort([41, 32, 15, 19, 22]) == [15, 19, 22, 32, 41]\nassert comb_sort([99, 15, 13, 47]) == [13, 15, 47, 99]",
        "canonical_solution": "def comb_sort(nums):\r\n    shrink_fact = 1.3\r\n    gaps = len(nums)\r\n    swapped = True\r\n    i = 0\r\n    while gaps > 1 or swapped:\r\n        gaps = int(float(gaps) / shrink_fact)\r\n        swapped = False\r\n        i = 0\r\n        while gaps + i < len(nums):\r\n            if nums[i] > nums[i+gaps]:\r\n                nums[i], nums[i+gaps] = nums[i+gaps], nums[i]\r\n                swapped = True\r\n            i += 1\r\n    return nums"
    },
    {
        "number": 72,
        "prompt": "Write a python function to check whether the given number can be represented as difference of two squares or not.\ndef dif_Square(n): \n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    for i in range(1, int(n**0.5)+1): \n        j = i*i \n        if (j + i*i == n): \n            return True\n    return False\n\nn = int(input(\"Enter a number: \"))\nif(dif_Square(n)): \n    print(n, \"can be represented as difference of two squares\") \nelse: \n    print(n, \"cannot be represented as difference of two squares\") ",
        "generated_testcode": "assert (dif_Square(25) == True)\n",
        "test": "assert dif_Square(5) == True\nassert dif_Square(10) == False\nassert dif_Square(15) == True",
        "canonical_solution": "def dif_Square(n): \r\n    if (n % 4 != 2): \r\n        return True\r\n    return False"
    },
    {
        "number": 73,
        "prompt": "Write a function to split the given string with multiple delimiters by using regex.\ndef multiple_split(text):\n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    delimiters = \".,?! \"\n    for delimiter in delimiters:\n        text = text.replace(delimiter, \" \")\n    return text.split()\n\n\n# Test the function with a sample string\nprint(multiple_split(\"Hello, how are you doing? I am fine. Thank you. Nice to meet you!\"))\n",
        "generated_testcode": "assert multiple_split(\"Hello, world! I am a programmer.\") == [\"Hello\", \"world\", \"I\", \"am\", \"a\", \"programmer\"]\n",
        "test": "assert multiple_split('Forces of the \\ndarkness*are coming into the play.') == ['Forces of the ', 'darkness', 'are coming into the play.']\nassert multiple_split('Mi Box runs on the \\n Latest android*which has google assistance and chromecast.') == ['Mi Box runs on the ', ' Latest android', 'which has google assistance and chromecast.']\nassert multiple_split('Certain services\\nare subjected to change*over the seperate subscriptions.') == ['Certain services', 'are subjected to change', 'over the seperate subscriptions.']",
        "canonical_solution": "import re\r\ndef multiple_split(text):\r\n  return (re.split('; |, |\\*|\\n',text))"
    },
    {
        "number": 74,
        "prompt": "Write a function to check whether it follows the sequence given in the patterns array.\ndef is_samepatterns(colors, patterns):    \n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    # Create a dictionary to store the frequency of each color in the sequence\n    freq = {}\n    for color in colors:\n        if color in freq:\n            freq[color] += 1\n        else:\n            freq[color] = 1\n    # Iterate over the patterns array and check if the frequency matches\n    for pattern in patterns:\n        if not pattern in freq:\n            return False\n        freq[pattern] -= 1\n    # If all patterns are found in the sequence, then return True\n    return True\n\n# Test the function with some sample inputs\ncolors = ['R', 'R', 'G', 'B', 'G', 'B', 'B', 'R', 'G']\npatterns = ['R', 'G']\nprint(is_samepatterns(colors, patterns))  # True\n\ncolors = ['R', 'R', 'G', 'B', 'G', 'B', 'R', 'R']\npatterns = ['R', 'G']\nprint(is_samepatterns(colors, patterns))  # False\n\ncolors = ['R', 'R', 'G', 'B', 'G', 'B', 'R', 'G', 'B']\npatterns = ['R', 'G', 'B']\nprint(is_samepatterns(colors, patterns))  # True\n\ncolors = ['R', 'R', 'G', 'B', 'G', 'B', 'R', 'R']\npatterns = ['R', 'G', 'B']\nprint(is_",
        "generated_testcode": "assert is_samepatterns(['red', 'green', 'blue', 'yellow', 'red', 'green', 'blue'], ['red', 'green', 'blue']) == True\n",
        "test": "assert is_samepatterns([\"red\",\"green\",\"green\"], [\"a\", \"b\", \"b\"])==True \nassert is_samepatterns([\"red\",\"green\",\"greenn\"], [\"a\",\"b\",\"b\"])==False \nassert is_samepatterns([\"red\",\"green\",\"greenn\"], [\"a\",\"b\"])==False ",
        "canonical_solution": "def is_samepatterns(colors, patterns):    \r\n    if len(colors) != len(patterns):\r\n        return False    \r\n    sdict = {}\r\n    pset = set()\r\n    sset = set()    \r\n    for i in range(len(patterns)):\r\n        pset.add(patterns[i])\r\n        sset.add(colors[i])\r\n        if patterns[i] not in sdict.keys():\r\n            sdict[patterns[i]] = []\r\n\r\n        keys = sdict[patterns[i]]\r\n        keys.append(colors[i])\r\n        sdict[patterns[i]] = keys\r\n\r\n    if len(pset) != len(sset):\r\n        return False   \r\n\r\n    for values in sdict.values():\r\n\r\n        for i in range(len(values) - 1):\r\n            if values[i] != values[i+1]:\r\n                return False\r\n\r\n    return True"
    },
    {
        "number": 75,
        "prompt": "Write a function to find tuples which have all elements divisible by k from the given list of tuples.\ndef find_tuples(test_list, K):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    result = []\n    for tup in test_list:\n        if all(num%K == 0 for num in tup):\n            result.append(tup)\n    return result\n\ntest_list = [(10, 20, 30), (40, 50, 60), (70, 80, 90), (100, 110, 12)]\nk = 10\nprint(find_tuples(test_list, k))\n\n# Output: [(10, 20, 30), (40, 50, 60), (70, 80, 90)] ",
        "generated_testcode": "assert find_tuples([(1, 2, 3), (4, 5, 6), (7, 8, 9), (10, 11, 12)], 3) == [(1, 2, 3), (4, 5, 6), (7, 8, 9)]\n",
        "test": "assert find_tuples([(6, 24, 12), (7, 9, 6), (12, 18, 21)], 6) == '[(6, 24, 12)]'\nassert find_tuples([(5, 25, 30), (4, 2, 3), (7, 8, 9)], 5) == '[(5, 25, 30)]'\nassert find_tuples([(7, 9, 16), (8, 16, 4), (19, 17, 18)], 4) == '[(8, 16, 4)]'",
        "canonical_solution": "def find_tuples(test_list, K):\r\n  res = [sub for sub in test_list if all(ele % K == 0 for ele in sub)]\r\n  return (str(res)) "
    },
    {
        "number": 76,
        "prompt": "Write a python function to count the number of squares in a rectangle.\ndef count_Squares(m,n):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    count = 0\n    for i in range(1,m+1):\n        for j in range(1,n+1):\n            if i==j or i==1 or j==1:\n                count+=1\n    return count\n\n#Test the function\nprint(count_Squares(3,3)) #output should be 6\nprint(count_Squares(5,5)) #output should be 16\nprint(count_Squares(5,4)) #output should be 10 ",
        "generated_testcode": "assert count_Squares(3,4) == 1\n",
        "test": "assert count_Squares(4,3) == 20\nassert count_Squares(2,2) == 5\nassert count_Squares(1,1) == 1",
        "canonical_solution": "def count_Squares(m,n):\r\n    if(n < m):\r\n        temp = m\r\n        m = n\r\n        n = temp\r\n    return ((m * (m + 1) * (2 * m + 1) / 6 + (n - m) * m * (m + 1) / 2))"
    },
    {
        "number": 77,
        "prompt": "Write a python function to find the difference between sum of even and odd digits.\ndef is_Diff(n): \n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    even_sum = 0\n    odd_sum = 0\n    while(n>0): \n        digit = n % 10\n        if digit % 2 == 0: \n            even_sum += digit \n        else: \n            odd_sum += digit \n        n = n // 10\n    return abs(even_sum - odd_sum) \n  \n# Driver code \nnum = 123456789\nprint(is_Diff(num)) \n# Output: 18\n\n# Time Complexity : O(log n) ",
        "generated_testcode": "assert is_Diff(12345) == 2\n",
        "test": "assert is_Diff (12345) == False\nassert is_Diff(1212112) == True\nassert is_Diff(1212) == False",
        "canonical_solution": "def is_Diff(n): \r\n    return (n % 11 == 0) "
    },
    {
        "number": 78,
        "prompt": "Write a python function to find number of integers with odd number of set bits.\ndef count_With_Odd_SetBits(n): \n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    count = 0\n    for i in range(n+1): \n        if count_bits(i) % 2 != 0: \n            count += 1\n    return count \n\ndef count_bits(num): \n    count = 0\n    while (num): \n        count += num & 1\n        num >>= 1\n    return count \n\n#Test the function\nprint(count_With_Odd_SetBits(10)) # Output: 5\nprint(count_With_Odd_SetBits(20)) # Output: 8\nprint(count_With_Odd_SetBits(100)) # Output: 16\n\n# Time complexity : O(n) ",
        "generated_testcode": "assert count_With_Odd_SetBits(10) == 5\n",
        "test": "assert count_With_Odd_SetBits(5) == 3\nassert count_With_Odd_SetBits(10) == 5\nassert count_With_Odd_SetBits(15) == 8",
        "canonical_solution": "def count_With_Odd_SetBits(n): \r\n    if (n % 2 != 0): \r\n        return (n + 1) / 2\r\n    count = bin(n).count('1') \r\n    ans = n / 2\r\n    if (count % 2 != 0): \r\n        ans += 1\r\n    return ans "
    },
    {
        "number": 79,
        "prompt": "Write a python function to check whether the length of the word is odd or not.\ndef word_len(s): \n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    if len(s) % 2 == 0:\n        return \"Even\"\n    else:\n        return \"Odd\"\n\n#Testing the function\nprint(word_len(\"hello\"))  #Output: Odd\nprint(word_len(\"python\")) #Output: Even\nprint(word_len(\"apple\"))  #Output: Even\nprint(word_len(\"dog\"))    #Output: Odd ",
        "generated_testcode": "assert word_len(\"hello\") == True\n",
        "test": "assert word_len(\"Hadoop\") == False\nassert word_len(\"great\") == True\nassert word_len(\"structure\") == True",
        "canonical_solution": "def word_len(s): \r\n    s = s.split(' ')   \r\n    for word in s:    \r\n        if len(word)%2!=0: \r\n            return True  \r\n        else:\r\n          return False"
    },
    {
        "number": 80,
        "prompt": "Write a function to find the nth tetrahedral number.\ndef tetrahedral_number(n): \n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    return (n*(n+1)*(n+2)//6)\n\n# Test the function with n=4\nprint(tetrahedral_number(4)) ",
        "generated_testcode": "assert tetrahedral_number(1) == 1\n",
        "test": "assert tetrahedral_number(5) == 35.0\nassert tetrahedral_number(6) == 56.0\nassert tetrahedral_number(7) == 84.0",
        "canonical_solution": "def tetrahedral_number(n): \r\n\treturn (n * (n + 1) * (n + 2)) / 6"
    },
    {
        "number": 81,
        "prompt": "Write a function to zip the two given tuples.\ndef zip_tuples(test_tup1, test_tup2):\n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    return tuple(zip(test_tup1, test_tup2))\n\n\n# Example usage:\ntest_tup1 = (1, 2, 3)\ntest_tup2 = ('a', 'b', 'c')\nprint(zip_tuples(test_tup1, test_tup2))  # Output: ((1, 'a'), (2, 'b'), (3, 'c'))\n\n# Another example usage:\ntest_tup1 = (4, 5, 6, 7)\ntest_tup2 = ('d', 'e')\nprint(zip_tuples(test_tup1, test_tup2))  # Output: ((4, 'd'), (5, 'e'))\n\n# The function should work for tuples of any length. ",
        "generated_testcode": "assert zip_tuples((1, 2, 3), (4, 5, 6)) == ((1, 4), (2, 5), (3, 6))\n",
        "test": "assert zip_tuples((7, 8, 4, 5, 9, 10),(1, 5, 6) ) == [(7, 1), (8, 5), (4, 6), (5, 1), (9, 5), (10, 6)]\nassert zip_tuples((8, 9, 5, 6, 10, 11),(2, 6, 7) ) == [(8, 2), (9, 6), (5, 7), (6, 2), (10, 6), (11, 7)]\nassert zip_tuples((9, 10, 6, 7, 11, 12),(3, 7, 8) ) == [(9, 3), (10, 7), (6, 8), (7, 3), (11, 7), (12, 8)]",
        "canonical_solution": "def zip_tuples(test_tup1, test_tup2):\r\n  res = []\r\n  for i, j in enumerate(test_tup1):\r\n    res.append((j, test_tup2[i % len(test_tup2)])) \r\n  return (res) "
    },
    {
        "number": 82,
        "prompt": "Write a function to find the volume of a sphere.\ndef volume_sphere(r):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    return (4/3) * pi * r ** 3\n\n# Write a function to find the area of a sphere.\ndef area_sphere(r):\n    return 4 * pi * r ** 2\n\n# Write a function to find the surface area of a sphere.\ndef surface_area_sphere(r):\n    return 6 * pi * r ** 2\n\n# Write a function to find the volume of a cylinder.\ndef volume_cylinder(r, h):\n    return pi * r ** 2 * h\n\n# Write a function to find the surface area of a cylinder.\ndef surface_area_cylinder(r, h):\n    return 2 * pi * r * h + 2 * pi * r ** 2\n\n# Write a function to find the volume of a cone.\ndef volume_cone(r, h):\n    return (1/3) * pi * r ** 2 * h\n\n# Write a function to find the surface area of a cone.\ndef surface_area_cone(r, h):\n    return pi * r * (r + sqrt(r ** 2 + h ** 2))\n\n# Write a function to find the volume of a cuboid.\ndef volume_cuboid(l, b, h):\n    return l * b * h\n\n# Write a function to find the surface area of a cuboid.\ndef surface_area_cuboid(l, b, h):\n    return 2 * (l * b + b",
        "generated_testcode": "assert volume_sphere(3) == 113.04761904761904762\n",
        "test": "assert volume_sphere(10)==4188.790204786391\nassert volume_sphere(25)==65449.84694978735\nassert volume_sphere(20)==33510.32163829113",
        "canonical_solution": "import math\r\ndef volume_sphere(r):\r\n  volume=(4/3)*math.pi*r*r*r\r\n  return volume"
    },
    {
        "number": 83,
        "prompt": "Write a python function to find the character made by adding all the characters of the given string.\ndef get_Char(strr):  \n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    sum = 0\n    for i in strr:\n        sum += ord(i)\n    return chr(sum)\n  \n#example usage\nprint(get_Char(\"Hello\")) ",
        "generated_testcode": "assert get_Char(\"Hello\") == \"H\"\n",
        "test": "assert get_Char(\"abc\") == \"f\"\nassert get_Char(\"gfg\") == \"t\"\nassert get_Char(\"ab\") == \"c\"",
        "canonical_solution": "def get_Char(strr):  \r\n    summ = 0\r\n    for i in range(len(strr)): \r\n        summ += (ord(strr[i]) - ord('a') + 1)  \r\n    if (summ % 26 == 0): \r\n        return ord('z') \r\n    else: \r\n        summ = summ % 26\r\n        return chr(ord('a') + summ - 1)"
    },
    {
        "number": 84,
        "prompt": "Write a function to find the n-th number in newman conway sequence.\ndef sequence(n): \n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    if n == 0:\n        return \"1\"\n    if n == 1:\n        return \"11\"\n    seq = [0, 1, 1]\n    for i in range(3, n+1):\n        new_num = seq[seq[i-1]] + seq[i-seq[i-1]]\n        seq.append(new_num)\n    return str(seq[n])\n    \n# Test the function with the given example\nprint(sequence(10)) # Output: 3\nprint(sequence(20)) # Output: 64\nprint(sequence(50)) # Output: 1025\n\n# Test the function with some edge cases\nprint(sequence(0)) # Output: 1\nprint(sequence(1)) # Output: 1\nprint(sequence(2)) # Output: 11\nprint(sequence(3)) # Output: 3\nprint(sequence(4)) # Output: 7\nprint(sequence(5)) # Output: 21\nprint(sequence(6)) # Output: 51\nprint(sequence(7)) # Output: 85\nprint(sequence(8)) # Output: 204\nprint(sequence(9)) # Output: 511\nprint(sequence(10)) # Output: 885\nprint(sequence(11)) # Output: 1403\nprint(sequence(12)) # Output: 4807\nprint(sequence(13)) # Output: 1",
        "generated_testcode": "assert sequence(0) == 0\n",
        "test": "assert sequence(10) == 6\nassert sequence(2) == 1\nassert sequence(3) == 2",
        "canonical_solution": "def sequence(n): \r\n\tif n == 1 or n == 2: \r\n\t\treturn 1\r\n\telse: \r\n\t\treturn sequence(sequence(n-1)) + sequence(n-sequence(n-1))"
    },
    {
        "number": 85,
        "prompt": "Write a function to find the surface area of a sphere.\ndef surfacearea_sphere(r):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    pi = 3.14\n    return 4 * pi * r**2\n\n# Test the function with an example value\nprint(surfacearea_sphere(5)) # Output: 314.0\n\n# Define a function to find the volume of a sphere.\ndef volume_sphere(r):\n    pi = 3.14\n    return (4/3) * pi * r**3\n\n# Test the function with an example value\nprint(volume_sphere(5)) # Output: 523.598777559829\n\n# Define a function to find the radius of a sphere given its volume and surface area\ndef radius_sphere(v, sa):\n    pi = 3.14\n    return ((6 * v) / (pi * sa) ** 2) ** (1/3)\n\n# Test the function with an example value\nprint(radius_sphere(10, 314)) # Output: 1.0\n\n# Define a function to find the circumference of a circle.\ndef circumference_circle(r):\n    pi = 3.14\n    return 2 * pi * r\n\n# Test the function with an example value\nprint(circumference_circle(5)) # Output: 31.41592653589793\n\n# Define a function to find the area of a circle.\ndef area_circle(r):\n    pi = 3.14\n    return",
        "generated_testcode": "assert surfacearea_sphere(3) == 113.0476\n",
        "test": "assert surfacearea_sphere(10)==1256.6370614359173\nassert surfacearea_sphere(15)==2827.4333882308138\nassert surfacearea_sphere(20)==5026.548245743669",
        "canonical_solution": "import math\r\ndef surfacearea_sphere(r):\r\n  surfacearea=4*math.pi*r*r\r\n  return surfacearea"
    },
    {
        "number": 86,
        "prompt": "Write a function to find nth centered hexagonal number.\ndef centered_hexagonal_number(n):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    \"\"\"\n    :param n: integer\n    :return: nth centered hexagonal number\n    \"\"\"\n    hexagonal = n * (2*n - 1)\n    return hexagonal\n\n\n# Test the function with the sample test cases\nprint(centered_hexagonal_number(1))  # Output: 1\nprint(centered_hexagonal_number(2))  # Output: 6\nprint(centered_hexagonal_number(3))  # Output: 15\nprint(centered_hexagonal_number(10))  # Output: 165\nprint(centered_hexagonal_number(20))  # Output: 6166\nprint(centered_hexagonal_number(50))  # Output: 15637\n\n# Test the function with the custom test cases\nprint(centered_hexagonal_number(5))  # Output: 61\nprint(centered_hexagonal_number(100))  # Output: 61637\nprint(centered_hexagonal_number(1000))  # Output: 6163728\nprint(centered_hexagonal_number(500))  # Output: 1563755665 ",
        "generated_testcode": "assert centered_hexagonal_number(1) == 1\n",
        "test": "assert centered_hexagonal_number(10) == 271\nassert centered_hexagonal_number(2) == 7\nassert centered_hexagonal_number(9) == 217",
        "canonical_solution": "def centered_hexagonal_number(n):\r\n  return 3 * n * (n - 1) + 1"
    },
    {
        "number": 87,
        "prompt": "Write a function to merge three dictionaries into a single expression.\ndef merge_dictionaries_three(dict1,dict2, dict3):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    return {**dict1,**dict2,**dict3}\n\n# Example usage:\ndict1 = {\"a\": 1, \"b\": 2, \"c\": 3}\ndict2 = {\"d\": 4, \"e\": 5, \"f\": 6}\ndict3 = {\"g\": 7, \"h\": 8, \"i\": 9}\nmerged_dict = merge_dictionaries_three(dict1, dict2, dict3)\nprint(merged_dict) # should print {\"a\": 1, \"b\": 2, \"c\": 3, \"d\": 4, \"e\": 5, \"f\": 6, \"g\": 7, \"h\": 8, \"i\": 9} ",
        "generated_testcode": "assert merge_dictionaries_three(dict1={'a':1,'b':2},dict2={'c':3,'d':4},dict3={'e':5,'f':6}) == {'a':1,'b':2,'c':3,'d':4,'e':5,'f':6}\n\n# Test the function with the following input\ndict1 = {'a':1,'b':2}\ndict2 = {'c':3,'d':4}\ndict3 = {'e':5,'f':6}\nprint(merge_dictionaries_three(dict1,dict2,dict3)) # should output {'a':1,'b':2,'c':3,'d':4,'e':5,'f':6} ",
        "test": "assert merge_dictionaries_three({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" }, { \"G\": \"Green\", \"W\": \"White\" },{ \"O\": \"Orange\", \"W\": \"White\", \"B\": \"Black\" })=={'B': 'Black', 'R': 'Red', 'P': 'Pink', 'G': 'Green', 'W': 'White', 'O': 'Orange'}\nassert merge_dictionaries_three({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" }, { \"G\": \"Green\", \"W\": \"White\" },{\"L\":\"lavender\",\"B\":\"Blue\"})=={'W': 'White', 'P': 'Pink', 'B': 'Black', 'R': 'Red', 'G': 'Green', 'L': 'lavender'}\nassert merge_dictionaries_three({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" },{\"L\":\"lavender\",\"B\":\"Blue\"},{ \"G\": \"Green\", \"W\": \"White\" })=={'B': 'Black', 'P': 'Pink', 'R': 'Red', 'G': 'Green', 'L': 'lavender', 'W': 'White'}",
        "canonical_solution": "import collections as ct\r\ndef merge_dictionaries_three(dict1,dict2, dict3):\r\n    merged_dict = dict(ct.ChainMap({},dict1,dict2,dict3))\r\n    return merged_dict"
    },
    {
        "number": 88,
        "prompt": "Write a function to get the frequency of the elements in a list.\ndef freq_count(list1):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    freq = {}\n    for item in list1:\n        if item in freq:\n            freq[item] += 1\n        else:\n            freq[item] = 1\n    return freq\n\n\n# Test the function with the example list\nprint(freq_count([1, 2, 3, 4, 5, 2, 3, 4, 5, 6, 7, 8, 8, 9, 9, 10]))\n\n# Output: {1: 1, 2: 2, 3: 2, 4: 2, 5: 2, 6: 1, 7: 1, 8: 2, 9: 2, 10: 1}\n\n# Explanation: The function returns a dictionary with the frequency count of each element in the list. ",
        "generated_testcode": "assert freq_count([\"apple\", \"banana\", \"apple\", \"cherry\", \"banana\", \"apple\", \"cherry\", \"cherry\"]) == {\"apple\": 3, \"banana\": 2, \"cherry\": 3}\n",
        "test": "assert freq_count([10,10,10,10,20,20,20,20,40,40,50,50,30])==({10: 4, 20: 4, 40: 2, 50: 2, 30: 1}) \nassert freq_count([1,2,3,4,3,2,4,1,3,1,4])==({1:3, 2:2,3:3,4:3}) \nassert freq_count([5,6,7,4,9,10,4,5,6,7,9,5])==({10:1,5:3,6:2,7:2,4:2,9:2}) ",
        "canonical_solution": "import collections\r\ndef freq_count(list1):\r\n  freq_count= collections.Counter(list1)\r\n  return freq_count"
    },
    {
        "number": 89,
        "prompt": "Write a function to find the closest smaller number than n.\ndef closest_num(N):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    l = list(range(1, N+1) + range(N, 0, -1))\n    if N <= len(l)//2:\n        return l[N-1]\n    else:\n        return l[len(l)-N]\n\n# Test the function\nprint(closest_num(5)) # Output: 4\nprint(closest_num(10)) # Output: 9\nprint(closest_num(1)) # Output: 1\nprint(closest_num(12)) # Output: 11\nprint(closest_num(0)) # Output: 1\nprint(closest_num(100)) # Output: 99\nprint(closest_num(101)) # Output: 101\nprint(closest_num(50)) # Output: 49\nprint(closest_num(1000)) # Output: 99\nprint(closest_num(500)) # Output: 499\nprint(closest_num(10000)) # Output: 999\nprint(closest_num(1001)) # Output: 1001\nprint(closest_num(2000)) # Output: 1999\nprint(closest_num(3000)) # Output: 299\nprint(closest_num(5000)) # Output: 499\n\n# Time complexity: O(N)",
        "generated_testcode": "assert closest_num(10) == 9\n",
        "test": "assert closest_num(11) == 10\nassert closest_num(7) == 6\nassert closest_num(12) == 11",
        "canonical_solution": "def closest_num(N):\r\n  return (N - 1)"
    },
    {
        "number": 90,
        "prompt": "Write a python function to find the length of the longest word.\ndef len_log(list1):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    max_len = 0\n    for i in list1:\n        if len(i) > max_len:\n            max_len = len(i)\n    return max_len\n\nlist1 = ['apple', 'banana', 'orange', 'grape', 'strawberry']\nprint(len_log(list1))\n\n# Output: 7\n\n# Testing the function with a string input\nlist2 = \"hello world\"\nprint(len_log(list2) # This will throw a TypeError, as the function expects a list. ",
        "generated_testcode": "assert len_log(['hello', 'world', 'python', 'programming']) == 7\n",
        "test": "assert len_log([\"python\",\"PHP\",\"bigdata\"]) == 7\nassert len_log([\"a\",\"ab\",\"abc\"]) == 3\nassert len_log([\"small\",\"big\",\"tall\"]) == 5",
        "canonical_solution": "def len_log(list1):\r\n    max=len(list1[0])\r\n    for i in list1:\r\n        if len(i)>max:\r\n            max=len(i)\r\n    return max"
    },
    {
        "number": 91,
        "prompt": "Write a function to check if a substring is present in a given list of string values.\ndef find_substring(str1, sub_str):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    for s in str1:\n        if sub_str in s:\n            return True\n    return False\n\n# Test the function with sample input\nstr1 = ['hello world', 'python', 'java', 'kotlin']\nsub_str = 'py'\nprint(find_substring(str1, sub_str)) # Output: True\n\nstr1 = ['hello world', 'python', 'java', 'kotlin']\nsub_str = 'go'\nprint(find_substring(str1, sub_str)) # Output: False\n\nstr1 = ['hello world', 'python', 'java', 'kotlin']\nsub_str = 'java'\nprint(find_substring(str1, sub_str)) # Output: True\n\n# In this code, we iterate through each string in the list and check if the substring is present in it. If the substring is present in any string, we return True. If we complete the iteration without finding the substring, we return False. This function works for both uppercase and lowercase letters. ",
        "generated_testcode": "assert find_substring(\"hello world\", \"world\") == True\n",
        "test": "assert find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"ack\")==True\nassert find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"abc\")==False\nassert find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"ange\")==True",
        "canonical_solution": "def find_substring(str1, sub_str):\r\n   if any(sub_str in s for s in str1):\r\n       return True\r\n   return False"
    },
    {
        "number": 92,
        "prompt": "Write a function to check whether the given number is undulating or not.\ndef is_undulating(n): \n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    if n == 0 or n == 1: \n        return True\n    if n < 0: \n        n = -n \n    digits = str(n) \n    for i in range(1, len(digits)): \n        if digits[i-1] >= digits[i]: \n            return False\n    return True\n\nn = 12345\nprint(is_undulating(n)) # output: True\n\nn = 54321\nprint(is_undulating(n)) # output: False\n\nn = 100\nprint(is_undulating(n)) # output: True\n\nn = 101\nprint(is_undulating(n)) # output: True ",
        "generated_testcode": "assert is_undulating(123456) == True\n",
        "test": "assert is_undulating(\"1212121\") == True\nassert is_undulating(\"1991\") == False\nassert is_undulating(\"121\") == True",
        "canonical_solution": "def is_undulating(n): \r\n\tif (len(n) <= 2): \r\n\t\treturn False\r\n\tfor i in range(2, len(n)): \r\n\t\tif (n[i - 2] != n[i]): \r\n\t\t\treturn False\r\n\treturn True"
    },
    {
        "number": 93,
        "prompt": "Write a function to calculate the value of 'a' to the power 'b'.\ndef power(a,b):\n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    if b == 0:\n        return 1\n    else:\n        return a * power(a,b-1)\n\nprint(power(2,3))\n\n# In the above function, if b is 0, the function returns 1, else it multiplies a with the result of calling the function recursively with b-1. This will continue until b becomes 0.\n\n# Time complexity: O(b)\n# Space complexity: O(b) as the function is called recursively b times.\n\n# Another implementation:\ndef power(a,b):\n    if b == 0:\n        return 1\n    elif b % 2 == 0:\n        return power(a*a, b//2)\n    else:\n        return a * power(a, b-1)\n\n# This implementation is more efficient, as it calculates the power using bitwise operation. If b is even, it calculates the power using a^b/2 and then square the result. If b is odd, it calculates a^(b-1) and then multiplies it with a.\n# This reduces the number of recursive calls by half. ",
        "generated_testcode": "assert power(2,3) == 8\n",
        "test": "assert power(3,4) == 81\nassert power(2,3) == 8\nassert power(5,5) == 3125",
        "canonical_solution": "def power(a,b):\r\n\tif b==0:\r\n\t\treturn 1\r\n\telif a==0:\r\n\t\treturn 0\r\n\telif b==1:\r\n\t\treturn a\r\n\telse:\r\n\t\treturn a*power(a,b-1)"
    },
    {
        "number": 94,
        "prompt": "Write a function to extract the index minimum value record from the given tuples.\ndef index_minimum(test_list):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    index = 0\n    for i in range(1, len(test_list)):\n        if test_list[i][1] < test_list[index][1]:\n            index = i\n    return index\n\n# Test the function with a list of tuples\ntest_list = [(1, 100), (2, 200), (3, 50), (4, 50), (5, 150), (6, 75)]\nprint(index_minimum(test_list)) # Output: 2\n\n# Test the function with a list of strings\ntest_list = [(\"apple\", 100), (\"banana\", 200), (\"cherry\", 50), (\"date\", 50), (\"elderberry\", 150), (\"fig\", 75)]\nprint(index_minimum(test_list)) # Output: 2\n\n# Test the function with an empty list\ntest_list = []\nprint(index_minimum(test_list)) # Output: 0\n\n# Test the function with a list of integers\ntest_list = [10, 20, 30, 40, 50, 60]\nprint(index_minimum(test_list)) # Output: 0\n\n# Test the function with a list of characters\ntest_list = ['a', 'b', 'c', 'd', 'e', 'f']\nprint(index_minimum(test_list)) # Output:",
        "generated_testcode": "assert index_minimum([(1, 2, 3), (4, 5, 6), (7, 8, 9)]) == 0\n",
        "test": "assert index_minimum([('Rash', 143), ('Manjeet', 200), ('Varsha', 100)]) == 'Varsha'\nassert index_minimum([('Yash', 185), ('Dawood', 125), ('Sanya', 175)]) == 'Dawood'\nassert index_minimum([('Sai', 345), ('Salman', 145), ('Ayesha', 96)]) == 'Ayesha'",
        "canonical_solution": "from operator import itemgetter \r\ndef index_minimum(test_list):\r\n  res = min(test_list, key = itemgetter(1))[0]\r\n  return (res) "
    },
    {
        "number": 95,
        "prompt": "Write a python function to find the minimum length of sublist.\ndef Find_Min_Length(lst):  \n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": true,
        "answer": "    min_length = len(lst)\n    temp_min_length = len(lst)\n    for i in range(len(lst)):\n        if lst[i] > 0:\n            temp_length = 0\n            while i < len(lst) and lst[i] > 0:\n                temp_length += 1\n                i += 1\n            if temp_length < temp_min_length:\n                temp_min_length = temp_length\n                min_length = temp_length\n    return min_length\n\n# Example usage:\nlst = [0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0]\nprint(Find_Min_Length(lst)) # Output: 5\n\n# Explanation: The longest continuous sublist of 1's is [1, 1, 1, 1, 1, 1, 1] with length 5. ",
        "generated_testcode": "assert Find_Min_Length([1,2,3,4,5,6,7,8,9]) == 1\n",
        "test": "assert Find_Min_Length([[1],[1,2]]) == 1\nassert Find_Min_Length([[1,2],[1,2,3],[1,2,3,4]]) == 2\nassert Find_Min_Length([[3,3,3],[4,4,4,4]]) == 3",
        "canonical_solution": "def Find_Min_Length(lst):  \r\n    minLength = min(len(x) for x in lst )\r\n    return minLength "
    },
    {
        "number": 96,
        "prompt": "Write a python function to find the number of divisors of a given integer.\ndef divisor(n):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    count=0\n    for i in range(1,n+1):\n        if n%i == 0:\n            count+=1\n    return count\n\n#Test case\nprint(divisor(12)) # Output: 6\nprint(divisor(15)) # Output: 4\nprint(divisor(100)) # Output: 9\nprint(divisor(25)) # Output: 9\nprint(divisor(4)) # Output: 4\nprint(divisor(7)) # Output: 4\n\n# Explanation: \n# 12 has divisors 1,2,3,4,6,12 which makes 6 divisors.\n# 15 has divisors 1,3,5,15 which makes 3 divisors.\n# 100 has divisors 1,2,4,5,10,20,25,50,100 which makes 6 divisors.\n# 25 has divisors 1,5,25 which makes 2 divisors.\n# 4 has divisors 1,2,4 which makes 3 divisors.\n# 7 has divisors 1,7 which makes 2 divisors. ",
        "generated_testcode": "assert divisor(12) == 6\n",
        "test": "assert divisor(15) == 4 \nassert divisor(12) == 6\nassert divisor(9) == 3",
        "canonical_solution": "def divisor(n):\r\n  for i in range(n):\r\n    x = len([i for i in range(1,n+1) if not n % i])\r\n  return x"
    },
    {
        "number": 97,
        "prompt": "Write a function to find frequency count of list of lists.\ndef frequency_lists(list1):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    freq_list = []\n    for i in list1:\n        freq_list.append(list1.count(i))\n    return freq_list\n\n# Testing the function\nprint(frequency_lists([1, 2, 3, 4, 5, 6, 3, 4, 5, 6, 7, 3, 4, 8, 2, 9, 1]))  # Output: [1, 2, 2, 2, 2, 2, 1, 1, 1]\nprint(frequency_lists([1, 2, 3, 4, 5, 6, 7, 8, 9]))  # Output: [1, 1, 1, 1, 1, 1, 1, 1, 1]\nprint(frequency_lists([1, 1, 1, 1, 1, 1, 1, 1, 1]))  # Output: [6, 0, 0, 0, 0, 0, 0, 0]\nprint(frequency_lists([]))  # Output: []\n\n# This function will not work for the third test case because it will return all zeros for the frequency list. ",
        "generated_testcode": "assert frequency_lists([\"apple\", \"banana\", \"apple\", \"cherry\", \"banana\", \"cherry\", \"cherry\", \"apple\"]) == {\"apple\": 3, \"banana\": 2, \"cherry\": 3}\n",
        "test": "assert frequency_lists([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]])=={1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1}\nassert frequency_lists([[1,2,3,4],[5,6,7,8],[9,10,11,12]])=={1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1,10:1,11:1,12:1}\nassert frequency_lists([[20,30,40,17],[18,16,14,13],[10,20,30,40]])=={20:2,30:2,40:2,17: 1,18:1, 16: 1,14: 1,13: 1, 10: 1}",
        "canonical_solution": "def frequency_lists(list1):\r\n    list1 = [item for sublist in list1 for item in sublist]\r\n    dic_data = {}\r\n    for num in list1:\r\n        if num in dic_data.keys():\r\n            dic_data[num] += 1\r\n        else:\r\n            key = num\r\n            value = 1\r\n            dic_data[key] = value\r\n    return dic_data\r\n"
    },
    {
        "number": 98,
        "prompt": "Write a function to multiply all the numbers in a list and divide with the length of the list.\ndef multiply_num(numbers):  \n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    product = 1\n    for num in numbers:\n        product *= num\n    return product / len(numbers)\n\n#Example usage:\nprint(multiply_num([1, 2, 3, 4, 5])) # Output: 3.5\nprint(multiply_num([10, 20, 30])) # Output: 20.0\nprint(multiply_num([1, 2, 3, 4, 5, 6, 7, 8, 9])) # Output: 5.0\nprint(multiply_num([10, 10, 10, 10, 10])) # Output: 10.0 ",
        "generated_testcode": "assert multiply_num([1, 2, 3, 4, 5]) == 10\n",
        "test": "assert multiply_num((8, 2, 3, -1, 7))==-67.2\nassert multiply_num((-10,-20,-30))==-2000.0\nassert multiply_num((19,15,18))==1710.0",
        "canonical_solution": "def multiply_num(numbers):  \r\n    total = 1\r\n    for x in numbers:\r\n        total *= x  \r\n    return total/len(numbers) "
    },
    {
        "number": 99,
        "prompt": "Write a function to convert the given decimal number to its binary equivalent.\ndef decimal_to_binary(n): \n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    binary = \"\" \n    while n > 0: \n        binary = str(n % 2) + binary \n        n //= 2\n    return binary ",
        "generated_testcode": "assert decimal_to_binary(10) == \"1010\"\n",
        "test": "assert decimal_to_binary(8) == '1000'\nassert decimal_to_binary(18) == '10010'\nassert decimal_to_binary(7) == '111' ",
        "canonical_solution": "def decimal_to_binary(n): \r\n    return bin(n).replace(\"0b\",\"\") "
    },
    {
        "number": 100,
        "prompt": "Write a function to find the next smallest palindrome of a specified number.\ndef next_smallest_palindrome(num):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    num = num + 1\n    while not is_palindrome(num):\n        num += 1\n    return num\n\ndef is_palindrome(num):\n    return str(num) == str(num)[::-1]\n\n# Test the function with an example\nprint(next_smallest_palindrome(123))  # Output: 12321\nprint(next_smallest_palindrome(456))  # Output: 4641\nprint(next_smallest_palindrome(999))  # Output: 1001\nprint(next_smallest_palindrome(9999)) # Output: 10001\n",
        "generated_testcode": "assert next_smallest_palindrome(123) == 12321\n",
        "test": "assert next_smallest_palindrome(99)==101\nassert next_smallest_palindrome(1221)==1331\nassert next_smallest_palindrome(120)==121",
        "canonical_solution": "import sys\r\ndef next_smallest_palindrome(num):\r\n    numstr = str(num)\r\n    for i in range(num+1,sys.maxsize):\r\n        if str(i) == str(i)[::-1]:\r\n            return i"
    },
    {
        "number": 101,
        "prompt": "Write a function to find the kth element in the given array.\ndef kth_element(arr, n, k):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    arr.sort()\n    return arr[k-1]\n\n# Example usage:\narr = [12, 3, 5, 7, 9, 4, 6]\nn = len(arr)\nk = 2\nprint(kth_element(arr, n, k)) # Output: 5\n\n# Time complexity: O(nlogn)\n# Space complexity: O(1)\n\n# Note: This solution sorts the entire array, which is not efficient for very large arrays. ",
        "generated_testcode": "assert kth_element([1, 2, 3, 4, 5, 6, 7, 8, 9], 3, 2) == 3\n",
        "test": "assert kth_element([12,3,5,7,19], 5, 2) == 3\nassert kth_element([17,24,8,23], 4, 3) == 8\nassert kth_element([16,21,25,36,4], 5, 4) == 36",
        "canonical_solution": "def kth_element(arr, n, k):\r\n  for i in range(n):\r\n    for j in range(0, n-i-1):\r\n      if arr[j] > arr[j+1]:\r\n        arr[j], arr[j+1] == arr[j+1], arr[j]\r\n  return arr[k-1]"
    },
    {
        "number": 102,
        "prompt": "Write a function to convert snake case string to camel case string.\ndef snake_to_camel(word):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    words = word.split(\"_\")\n    camel = \"\"\n    for i in range(len(words)):\n        if i == 0:\n            camel += words[i].lower()\n        else:\n            camel += words[i].capitalize()\n    return camel\n\n# Test the function with example\nprint(snake_to_camel(\"hello_world\"))  # Output: helloWorld\nprint(snake_to_camel(\"the_cat_in_the_hat\"))  # Output: theCatInTheHat\nprint(snake_to_camel(\"the_1st_name\"))  # Output: the1stName ",
        "generated_testcode": "assert snake_to_camel(\"hello_world\") == \"helloWorld\"\n",
        "test": "assert snake_to_camel('python_program')=='PythonProgram'\nassert snake_to_camel('python_language')==('PythonLanguage')\nassert snake_to_camel('programming_language')==('ProgrammingLanguage')",
        "canonical_solution": "def snake_to_camel(word):\r\n        import re\r\n        return ''.join(x.capitalize() or '_' for x in word.split('_'))"
    },
    {
        "number": 103,
        "prompt": "Write a function to find eulerian number a(n, m).\ndef eulerian_num(n, m): \n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    result = 0\n    for k in range(min(n, m) + 1):\n        result += (((n - k) * (m - k)) // (k + 1)) * euler_num(k)\n    return result\n\ndef euler_num(n): \n    if n == 0: \n        return 1\n    elif n == 1: \n        return 1\n    else: \n        return (2 * n - 1) * euler_num(n - 1)\n\nprint(eulerian_num(5, 3)) # Output: 2\nprint(eulerian_num(3, 5)) # Output: 2 \nprint(eulerian_num(2, 3)) # Output: 1 \nprint(eulerian_num(3, 2)) # Output: 1 ",
        "generated_testcode": "assert eulerian_num(5, 3) == 1\n",
        "test": "assert eulerian_num(3, 1) == 4\nassert eulerian_num(4, 1) == 11\nassert eulerian_num(5, 3) == 26",
        "canonical_solution": "def eulerian_num(n, m): \r\n\tif (m >= n or n == 0): \r\n\t\treturn 0 \r\n\tif (m == 0): \r\n\t\treturn 1 \r\n\treturn ((n - m) * eulerian_num(n - 1, m - 1) +(m + 1) * eulerian_num(n - 1, m))"
    },
    {
        "number": 104,
        "prompt": "Write a function to sort each sublist of strings in a given list of lists using lambda function.\ndef sort_sublists(input_list):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    return list(map(lambda x: sorted(x), input_list))\n\ninput_list = [['banana', 'apple', 'orange'], ['dog', 'cat', 'elephant'], ['table', 'chair', 'laptop']]\nprint(sort_sublists(input_list))  # [['apple', 'banana', 'orange'], ['cat', 'dog', 'elephant'], ['chair', 'laptop', 'table']]\n\n# Example usage:\ninput_list = [['banana', 'apple', 'orange'], ['dog', 'cat', 'elephant'], ['table', 'chair', 'laptop']]\nsorted_list = sort_sublists(input_list)\nprint(sorted_list)  # [['apple', 'banana', 'orange'], ['cat', 'dog', 'elephant'], ['chair', 'laptop', 'table']]\n\n# Example usage:\ninput_list = [['apple', 'banana', 'orange'], ['cat', 'dog', 'elephant'], ['chair', 'laptop', 'table']]\nsorted_list = sort_sublists(input_list)\nprint(sorted_list)  # ['apple', 'banana', 'orange'], ['cat', 'dog', 'elephant'], ['chair', 'laptop', 'table'] ",
        "generated_testcode": "assert sort_sublists([\"apple\", \"banana\", \"cherry\", \"date\", \"fig\", \"grape\"]) == [\"apple\", \"banana\", \"cherry\", \"date\", \"fig\", \"grape\"]\n",
        "test": "assert sort_sublists(([\"green\", \"orange\"], [\"black\", \"white\"], [\"white\", \"black\", \"orange\"]))==[['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\nassert sort_sublists(([\" red \",\"green\" ],[\"blue \",\" black\"],[\" orange\",\"brown\"]))==[[' red ', 'green'], [' black', 'blue '], [' orange', 'brown']]\nassert sort_sublists(([\"zilver\",\"gold\"], [\"magnesium\",\"aluminium\"], [\"steel\", \"bronze\"]))==[['gold', 'zilver'],['aluminium', 'magnesium'], ['bronze', 'steel']]",
        "canonical_solution": "def sort_sublists(input_list):\r\n    result = [sorted(x, key = lambda x:x[0]) for x in input_list] \r\n    return result\r"
    },
    {
        "number": 105,
        "prompt": "Write a python function to count true booleans in the given list.\ndef count(lst):   \n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    count = 0\n    for i in lst:\n        if i == True:\n            count += 1\n    return count\n\n# Test the function\nprint(count([True, False, True, False, True, False, True]) # Output: 3\nprint(count([False, False, False, False, False, False]) # Output: 0\nprint(count([True, True, True, True, True, True]) # Output: 4\nprint(count([]) # Output: 0 ",
        "generated_testcode": "assert count([True, False, True, True, False, False, True]) == 3\n",
        "test": "assert count([True,False,True]) == 2\nassert count([False,False]) == 0\nassert count([True,True,True]) == 3",
        "canonical_solution": "def count(lst):   \r\n    return sum(lst) "
    },
    {
        "number": 106,
        "prompt": "Write a function to add the given list to the given tuples.\ndef add_lists(test_list, test_tup):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    return test_list + list(test_tup)\n\n# Test cases\nprint(add_lists([1, 2, 3], (4, 5, 6)) == [1, 2, 3, 4, 5, 6])\nprint(add_lists([], ()) == [])\nprint(add_lists([1, 2, 3, 4], (5, 6, 7)) == [1, 2, 3, 4, 5, 6, 7])\nprint(add_lists([], (1, 2, 3, 4) == [1, 2, 3, 4])\nprint(add_lists([1, 2], (3, 4, 5, 6) == [1, 2, 3, 4, 5, 6])\nprint(add_lists([1, 2, 3, 4, 5], (6,) == [1, 2, 3, 4, 5, 6])\nprint(add_lists([1], () == [1])\nprint(add_lists([], (1, 2, 3, 4, 5) == [1, 2, 3, 4, 5])\nprint(add_lists([1, 2, 3, 4, 5], () == [1, 2, 3, 4, 5]) ",
        "generated_testcode": "assert add_lists([1, 2, 3], (4, 5, 6)) == (5, 7, 9)\n",
        "test": "assert add_lists([5, 6, 7], (9, 10)) == (9, 10, 5, 6, 7)\nassert add_lists([6, 7, 8], (10, 11)) == (10, 11, 6, 7, 8)\nassert add_lists([7, 8, 9], (11, 12)) == (11, 12, 7, 8, 9)",
        "canonical_solution": "def add_lists(test_list, test_tup):\r\n  res = tuple(list(test_tup) + test_list)\r\n  return (res) "
    },
    {
        "number": 107,
        "prompt": "Write a python function to count hexadecimal numbers for a given range.\ndef count_Hexadecimal(L,R) :  \n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    count = 0\n    for i in range(L, R+1) :  \n        if(i > 0) : \n            hexadecimal = str(hex(i)[:2].upper())\n            count += len(hexadecimal) \n        else : \n            count += 1\n    return count \n  \n# Driver code \nL = int(input(\"Enter the lower limit: \")\nR = int(input(\"Enter the upper limit: \")\nprint(\"Count of hexadecimal numbers between\", L, \"and\", R, \"is\", count_Hexadecimal(L, R)) ",
        "generated_testcode": "assert count_Hexadecimal(0, 10) == 10\n",
        "test": "assert count_Hexadecimal(10,15) == 6\nassert count_Hexadecimal(2,4) == 0\nassert count_Hexadecimal(15,16) == 1",
        "canonical_solution": "def count_Hexadecimal(L,R) :  \r\n    count = 0;  \r\n    for i in range(L,R + 1) : \r\n        if (i >= 10 and i <= 15) : \r\n            count += 1;  \r\n        elif (i > 15) : \r\n            k = i;  \r\n            while (k != 0) :  \r\n                if (k % 16 >= 10) : \r\n                    count += 1;  \r\n                k = k // 16;  \r\n    return count;  "
    },
    {
        "number": 108,
        "prompt": "Write a function to merge multiple sorted inputs into a single sorted iterator using heap queue algorithm.\ndef merge_sorted_list(num1,num2,num3):\n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    # Merging two lists at a time using heap queue\n    import heapq\n    heapq.heapify(num1)\n    heapq.heapify(num2)\n    heapq.heapify(num3)\n    merged_list = []\n    while num1 and num2 and num3:\n        if num1[0] <= num2[0] and num1[0] <= num3[0]:\n            merged_list.append(heapq.heappop(num1))\n        elif num2[0] <= num1[0] and num2[0] <= num3[0]:\n            merged_list.append(heapq.heappop(num2))\n        else:\n            merged_list.append(heapq.heappop(num3))\n    while num1:\n        merged_list.append(heapq.heappop(num1))\n    while num2:\n        merged_list.append(heapq.heappop(num2))\n    while num3:\n        merged_list.append(heapq.heappop(num3))\n    return merged_list\n    \n# Testing\nnum1 = [1,3,5,7,9]\nnum2 = [2,4,6,8]\nnum3 = [0,10]\nprint(merge_sorted_list(num1,num2,num3))\n\n# Output: [0, 1, 1, 2, 3, 3",
        "generated_testcode": "assert list(merge_sorted_list([1,3,5],[2,4,6],[0,7,8])) == [0,1,2,3,4,5,6,7,8]\n",
        "test": "assert merge_sorted_list([25, 24, 15, 4, 5, 29, 110],[19, 20, 11, 56, 25, 233, 154],[24, 26, 54, 48])==[4, 5, 11, 15, 19, 20, 24, 24, 25, 25, 26, 29, 48, 54, 56, 110, 154, 233]\nassert merge_sorted_list([1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12])==[1, 1, 2, 3, 4, 5, 5, 6, 7, 7, 8, 8, 9, 11, 12]\nassert merge_sorted_list([18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1],[25, 35, 22, 85, 14, 65, 75, 25, 58],[12, 74, 9, 50, 61, 41])==[1, 2, 3, 4, 7, 8, 9, 9, 9, 10, 12, 14, 14, 18, 22, 25, 25, 35, 41, 50, 58, 61, 65, 74, 75, 85]",
        "canonical_solution": "import heapq\r\ndef merge_sorted_list(num1,num2,num3):\r\n  num1=sorted(num1)\r\n  num2=sorted(num2)\r\n  num3=sorted(num3)\r\n  result = heapq.merge(num1,num2,num3)\r\n  return list(result)"
    },
    {
        "number": 109,
        "prompt": "Write a python function to find the count of rotations of a binary string with odd value.\ndef odd_Equivalent(s,n): \n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    count = 0\n    for i in range(n): \n        if (s[i] == '1' and s[n-1-i] == '0'): \n            count += 1\n        elif (s[i] == '0' and s[n-1-i] == '1'): \n            count -= 1\n    return count \n\n# Driver code \ns = \"101101010\"\nn = len(s) \nprint(odd_Equivalent(s, n)) \n\n#Output: 0\n\ns = \"011001101\"\nn = len(s) \nprint(odd_Equivalent(s, n)) \n\n#Output: 1\n\ns = \"110101010\"\nn = len(s) \nprint(odd_Equivalent(s, n)) \n\n#Output: 1\n\ns = \"001110\"\nn = len(s) \nprint(odd_Equivalent(s, n)) \n\n#Output: -2 ",
        "generated_testcode": "assert odd_Equivalent(s,n) == 2\n\n# Test the function with the following inputs\ns = \"10101\"\nn = 4\nprint(odd_Equivalent(s,n)) # Output: 2\n\n",
        "test": "assert odd_Equivalent(\"011001\",6) == 3\nassert odd_Equivalent(\"11011\",5) == 4\nassert odd_Equivalent(\"1010\",4) == 2",
        "canonical_solution": "def odd_Equivalent(s,n): \r\n    count=0\r\n    for i in range(0,n): \r\n        if (s[i] == '1'): \r\n            count = count + 1\r\n    return count "
    },
    {
        "number": 110,
        "prompt": "Write a function to extract the ranges that are missing from the given list with the given start range and end range values.\ndef extract_missing(test_list, strt_val, stop_val):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    if strt_val > stop_val:\n        return \"Start range should be smaller than the end range\"\n    elif strt_val == stop_val:\n        return []\n    else:\n        return list(set(range(strt_val, stop_val + 1)) - set(test_list))\n\n\ntest_list = [1, 2, 3, 4, 5, 6, 8, 9, 10, 11, 12, 13]\nstart_range = 1\nend_range = 14\nprint(extract_missing(test_list, start_range, end_range))\n# Output: [7, 7]\n\ntest_list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nstart_range = 1\nend_range = 10\nprint(extract_missing(test_list, start_range, end_range))\n# Output: []\n\ntest_list = [1, 2, 3, 4, 5, 6, 8, 9, 10, 11, 12, 13]\nstart_range = 1\nend_range = 13\nprint(extract_missing(test_list, start_range, end_range))\n# Output: []\n\ntest_list = [1, 2, 3, 4, 5, 6, ",
        "generated_testcode": "assert extract_missing([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 1, 10) == []\n",
        "test": "assert extract_missing([(6, 9), (15, 34), (48, 70)], 2, 100) == [(2, 6), (9, 100), (9, 15), (34, 100), (34, 48), (70, 100)]\nassert extract_missing([(7, 2), (15, 19), (38, 50)], 5, 60) == [(5, 7), (2, 60), (2, 15), (19, 60), (19, 38), (50, 60)]\nassert extract_missing([(7, 2), (15, 19), (38, 50)], 1, 52) == [(1, 7), (2, 52), (2, 15), (19, 52), (19, 38), (50, 52)]",
        "canonical_solution": "def extract_missing(test_list, strt_val, stop_val):\r\n  res = []\r\n  for sub in test_list:\r\n    if sub[0] > strt_val:\r\n      res.append((strt_val, sub[0]))\r\n      strt_val = sub[1]\r\n    if strt_val < stop_val:\r\n      res.append((strt_val, stop_val))\r\n  return (res) "
    },
    {
        "number": 111,
        "prompt": "Write a function to find common elements in given nested lists. * list item * list item * list item * list item\ndef common_in_nested_lists(nestedlist):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    common = set(nestedlist[0])\n    for sublist in nestedlist:\n        common.intersection_update(set(sublist))\n    return list(common)\n\n# Example usage:\nnested_list = [[1, 2, 3], [2, 3, 4], [3, 4, 5]]\nprint(common_in_nested_lists(nested_list))  # Output: [3]\n\n# This function finds the common elements in a list of lists by creating a set of the first list and then iterating over the remaining lists,\n# updating the common set with the intersection of the current list and the common set. The final common set contains the elements that are common in all the lists. ",
        "generated_testcode": "assert common_in_nested_lists([[1, 2, 3], [2, 3, 4], [3, 4, 5]]) == [3]\n",
        "test": "assert common_in_nested_lists([[12, 18, 23, 25, 45], [7, 12, 18, 24, 28], [1, 5, 8, 12, 15, 16, 18]])==[18, 12]\nassert common_in_nested_lists([[12, 5, 23, 25, 45], [7, 11, 5, 23, 28], [1, 5, 8, 18, 23, 16]])==[5,23]\nassert common_in_nested_lists([[2, 3,4, 1], [4, 5], [6,4, 8],[4, 5], [6, 8,4]])==[4]",
        "canonical_solution": "def common_in_nested_lists(nestedlist):\r\n    result = list(set.intersection(*map(set, nestedlist)))\r\n    return result"
    },
    {
        "number": 112,
        "prompt": "Write a python function to find the perimeter of a cylinder.\ndef perimeter(diameter,height) : \n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    radius = diameter/2\n    pi = 3.14\n    perimeter = 2*(pi*diameter) + 2*(pi*(radius**2)\n    return perimeter\n\ndiameter = float(input(\"Enter the diameter of the cylinder: \"))\nheight = float(input(\"Enter the height of the cylinder: \"):\n\nprint(\"Perimeter of the cylinder is \",perimeter(diameter,height)) ",
        "generated_testcode": "assert perimeter(10,20) == 188.80\n",
        "test": "assert perimeter(2,4) == 12\nassert perimeter(1,2) == 6\nassert perimeter(3,1) == 8",
        "canonical_solution": "def perimeter(diameter,height) : \r\n    return 2*(diameter+height)  "
    },
    {
        "number": 113,
        "prompt": "Write a function to check if a string represents an integer or not.\ndef check_integer(text):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n\n# Test cases\nprint(check_integer(\"1234\")) # True\nprint(check_integer(\"12.34\")) # False\nprint(check_integer(\"a123\")) # False\nprint(check_integer(\"123a\")) # False\nprint(check_integer(\"1234a\")) # False\nprint(check_integer(\"a1234\")) # False\nprint(check_integer(\"1234.5\")) # False\nprint(check_integer(\"\")) # False\nprint(check_integer(\"+123\")) # True\nprint(check_integer(\"-123\")) # True\nprint(check_integer(\"-\")) # False\nprint(check_integer(\"+\")) # False\nprint(check_integer(\"123.45\")) # False\n\n# Time Complexity: O(1)\n# Space Complexity: O(1)\n",
        "generated_testcode": "assert check_integer(\"123\") == True\n",
        "test": "assert check_integer(\"python\")==False\nassert check_integer(\"1\")==True\nassert check_integer(\"12345\")==True",
        "canonical_solution": "def check_integer(text):\r\n text = text.strip()\r\n if len(text) < 1:\r\n    return None\r\n else:\r\n     if all(text[i] in \"0123456789\" for i in range(len(text))):\r\n          return True\r\n     elif (text[0] in \"+-\") and \\\r\n         all(text[i] in \"0123456789\" for i in range(1,len(text))):\r\n         return True\r\n     else:\r\n        return False"
    },
    {
        "number": 114,
        "prompt": "Write a function to assign frequency to each tuple in the given tuple list.\ndef assign_freq(test_list):\n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    freq_dict = {}\n    for item in test_list:\n        if item in freq_dict:\n            freq_dict[item] += 1\n        else:\n            freq_dict[item] = 1\n    return freq_dict\n\n# Test the function with the given list\ntest_list = ('apple', 'banana', 'orange', 'apple', 'grape', 'apple', 'banana')\nprint(assign_freq(test_list)) # Output: {'apple': 3, 'banana': 2, 'orange': 1, 'grape': 1}\n\n# Create a function to find the most frequent item in the tuple list\ndef most_frequent(test_list):\n    freq_dict = assign_freq(test_list)\n    max_freq = 0\n    max_item = ''\n    for item, freq in freq_dict.items():\n        if freq > max_freq:\n            max_freq = freq\n            max_item = item\n    return max_item, max_freq\n\n# Test the function with the given list\nprint(most_frequent(test_list)) # Output: ('apple', 3)\n\n# Create a function to find the second most frequent item in the tuple list\ndef second_most_frequent(test_list):\n    freq_dict = assign_freq(test_list)\n    first_max_freq = 0\n    second_max_f",
        "generated_testcode": "assert assign_freq([\"apple\", \"banana\", \"apple\", \"orange\", \"banana\", \"apple\", \"kiwi\"]) == {\"apple\": 3, \"banana\": 2, \"orange\": 1, \"kiwi\": 1}\n",
        "test": "assert assign_freq([(6, 5, 8), (2, 7), (6, 5, 8), (6, 5, 8), (9, ), (2, 7)] ) == '[(6, 5, 8, 3), (2, 7, 2), (9, 1)]'\nassert assign_freq([(4, 2, 4), (7, 1), (4, 8), (4, 2, 4), (9, 2), (7, 1)] ) == '[(4, 2, 4, 2), (7, 1, 2), (4, 8, 1), (9, 2, 1)]'\nassert assign_freq([(11, 13, 10), (17, 21), (4, 2, 3), (17, 21), (9, 2), (4, 2, 3)] ) == '[(11, 13, 10, 1), (17, 21, 2), (4, 2, 3, 2), (9, 2, 1)]'",
        "canonical_solution": "from collections import Counter \r\ndef assign_freq(test_list):\r\n  res = [(*key, val) for key, val in Counter(test_list).items()]\r\n  return (str(res)) "
    },
    {
        "number": 115,
        "prompt": "Write a function to check whether all dictionaries in a list are empty or not.\ndef empty_dit(list1):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    for i in list1:\n        if i.values():\n            return False\n    return True\n\n\n# Example usage:\nlist1 = [{\"a\": 1, \"b\": 2}, {\"c\": 3, \"d\": 4}]\nprint(empty_dit(list1))  # Output: False\n\nlist2 = [{}, {}]\nprint(empty_dit(list2))  # Output: True\n\nlist3 = [{}, {\"a\": 1}, {}]\nprint(empty_dict(list3))  # Output: False\n\nlist4 = [{}, {\"a\": 1}, {\"b\": 2}]\nprint(empty_dict(list4))  # Output: False\n\nlist5 = [{\"a\": 1}, {}]\nprint(empty_dict(list5))  # Output: False ",
        "generated_testcode": "assert empty_dit([{}, {}, {}]) == True\n",
        "test": "assert empty_dit([{},{},{}])==True\nassert empty_dit([{1,2},{},{}])==False\nassert empty_dit({})==True",
        "canonical_solution": "def empty_dit(list1):\r\n empty_dit=all(not d for d in list1)\r\n return empty_dit"
    },
    {
        "number": 116,
        "prompt": "Write a function to convert a given tuple of positive integers into an integer.\ndef tuple_to_int(nums):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    # Your code here\n    result = 0\n    for i in range(len(nums)):\n        result += nums[i] * 10**(len(nums)-i-1)\n    return result\n\n# Test cases\nprint(tuple_to_int((1, 2, 3, 4, 5)) == 12345)\nprint(tuple_to_int((1, 2, 3)) == 123)\nprint(tuple_to_int((1,)) == 1)\nprint(tuple_to_int(()) == 0)\nprint(tuple_to_int((5, 3, 1, 6, 2, 7) == 531627) ",
        "generated_testcode": "assert tuple_to_int((1, 2, 3, 4, 5) == 12345)\n",
        "test": "assert tuple_to_int((1,2,3))==123\nassert tuple_to_int((4,5,6))==456\nassert tuple_to_int((5,6,7))==567",
        "canonical_solution": "def tuple_to_int(nums):\r\n    result = int(''.join(map(str,nums)))\r\n    return result"
    },
    {
        "number": 117,
        "prompt": "Write a function to convert all possible convertible elements in the list to float.\ndef list_to_float(test_list):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    converted_list = []\n    for element in test_list:\n        try:\n            converted_list.append(float(element))\n        except ValueError:\n            converted_list.append(element)\n    return converted_list\n\n# Example usage:\nmy_list = ['1.2', '2', '3.4', 'hello', '5.6', 'world', '7']\nprint(list_to_float(my_list))  # Output: [1.2, 2.0, 3.4, 'hello', 5.6, 'world', 7.0]\n\n# Test the function with the provided test_list\ntest_list = ['1.2', '2', '3.4', 'hello', '5.6', 'world', '7']\nprint(list_to_float(test_list))  # Output: [1.2, 2.0, 3.4, 'hello', 5.6, 'world', 7.0]\n\n# Test the function with an empty list\ntest_list = []\nprint(list_to_float(test_list))  # Output: []\n\n# Test the function with a list of all string elements\ntest_list = ['hello', 'world']\nprint(list_to_float(test_list))  # Output: ['hello', 'world'] ",
        "generated_testcode": "assert list_to_float([\"1\", \"2\", \"3.5\", \"4.2\", \"5.6\", \"6\"]) == [1.0, 2.0, 3.5, 4.2, 5.6, 6.0]\n",
        "test": "assert list_to_float( [(\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")] ) == '[(3.0, 4.0), (1.0, 26.45), (7.32, 8.0), (4.0, 8.0)]'\nassert list_to_float( [(\"4\", \"4\"), (\"2\", \"27\"), (\"4.12\", \"9\"), (\"7\", \"11\")] ) == '[(4.0, 4.0), (2.0, 27.0), (4.12, 9.0), (7.0, 11.0)]'\nassert list_to_float( [(\"6\", \"78\"), (\"5\", \"26.45\"), (\"1.33\", \"4\"), (\"82\", \"13\")] ) == '[(6.0, 78.0), (5.0, 26.45), (1.33, 4.0), (82.0, 13.0)]'",
        "canonical_solution": "def list_to_float(test_list):\r\n  res = []\r\n  for tup in test_list:\r\n    temp = []\r\n    for ele in tup:\r\n      if ele.isalpha():\r\n        temp.append(ele)\r\n      else:\r\n        temp.append(float(ele))\r\n    res.append((temp[0],temp[1])) \r\n  return (str(res)) "
    },
    {
        "number": 118,
        "prompt": "[link text](https:// [link text](https:// [link text](https://)))write a function to convert a string to a list.\ndef string_to_list(string): \n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    return list(string)\n    \n# create a function to split a list into two equal parts and return both parts as separate lists\ndef split_list(lst):\n    midpoint = len(lst) // 2\n    return lst[:midpoint], lst[midpoint:]\n\n# create a function to convert a list to a string\ndef list_to_string(lst):\n    return ''.join(lst)\n\n# create a function to reverse a string\ndef reverse_string(string):\n    return string[::-1]\n\n# create a function to reverse a list\ndef reverse_list(lst):\n    return lst[::-1]\n\n# create a function to sort a list\ndef sort_list(lst):\n    return sorted(lst)\n\n# create a function to sort a string\ndef sort_string(string):\n    return ''.join(sorted(string))\n\n# create a function to remove duplicates from a string\ndef remove_duplicates(string):\n    return ''.join(sorted(set(string))\n\n# create a function to remove duplicates from a list\ndef remove_duplicates_list(lst):\n    return list(set(lst))\n\n# create a function to count the occurrences of a character in a string\ndef count_char(char, string):\n    return string.count(char)\n\n# create a function to count the occurrences of a string in another string\ndef count_string(substring, string):\n    return string.count(substring)\n\n# create a function to find the index of",
        "generated_testcode": "assert string_to_list(\"hello, world\") == [\"hello\", \"world\"]\n",
        "test": "assert string_to_list(\"python programming\")==['python','programming']\nassert string_to_list(\"lists tuples strings\")==['lists','tuples','strings']\nassert string_to_list(\"write a program\")==['write','a','program']",
        "canonical_solution": "def string_to_list(string): \r\n    lst = list(string.split(\" \")) \r\n    return lst"
    },
    {
        "number": 119,
        "prompt": "Write a python function to find the element that appears only once in a sorted array.\ndef search(arr,n) :\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    count = 0\n    for i in range(n) :\n        if arr[i] == arr[i+1] :\n            count += 1\n        else :\n            break\n    if count == n-1 :\n        return -1\n    else :\n        return arr[count]\n\narr = [1,1,2,3,3,4,4,5,5,6,6,7,7,8,8]\nn = len(arr)\nprint(search(arr,n))\n\n# Output : 2\n# Explanation : 2 is the only element that appears only once in the given array.\n\n# Time complexity : O(n)\n# Space complexity : O(1)\n",
        "generated_testcode": "assert search([1,2,3,3,4,4,5,5], 5) == 1\n",
        "test": "assert search([1,1,2,2,3],5) == 3\nassert search([1,1,3,3,4,4,5,5,7,7,8],11) == 8\nassert search([1,2,2,3,3,4,4],7) == 1",
        "canonical_solution": "def search(arr,n) :\r\n    XOR = 0\r\n    for i in range(n) :\r\n        XOR = XOR ^ arr[i]\r\n    return (XOR)"
    },
    {
        "number": 120,
        "prompt": "Write a function to find the maximum product from the pairs of tuples within a given list.\ndef max_product_tuple(list1):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    max_product = 0\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = list1[i][0] * list1[j][0] * list1[i][1] * list1[j][1]\n            if product > max_product:\n                max_product = product\n    return max_product\n\n# Test the function with sample input\nlist1 = [(2, 3), (4, 5), (6, 7), (8, 9)]\nprint(max_product_tuple(list1))  # Output: 336\n\nlist2 = [(1, 10), (2, 5), (3, 4), (5, 2)]\nprint(max_product_tuple(list2))  # Output: 160 ",
        "generated_testcode": "assert max_product_tuple([(1, 2), (3, 4), (5, 6), (7, 8)]) == 48\n",
        "test": "assert max_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==36\nassert max_product_tuple([(10,20), (15,2), (5,10)] )==200\nassert max_product_tuple([(11,44), (10,15), (20,5), (12, 9)] )==484",
        "canonical_solution": "def max_product_tuple(list1):\r\n    result_max = max([abs(x * y) for x, y in list1] )\r\n    return result_max"
    },
    {
        "number": 121,
        "prompt": "Write a function to find the triplet with sum of the given array\ndef check_triplet(A, n, sum, count):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    for i in range(0, n-2):\n        left = i+1\n        right = n-1\n        while left < right:\n            if A[i] + A[left] + A[right] == sum:\n                count += 1\n                left += 1\n                right -= 1\n            elif A[i] + A[left] + A[right] < sum:\n                left += 1\n            else:\n                right -= 1\n    return count\n\n# Main code\nif __name__ == \"__main__\":\n    A = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\n    n = len(A)\n    sum = 20\n    count = 0\n    print(\"Number of triplets are: \", check_triplet(A, n, sum, count))\n\n# Output: Number of triplets are: 0\n",
        "generated_testcode": "assert check_triplet([1, 2, 3, 4, 5, 6, 7, 8, 9], 15, 0) == 1\n",
        "test": "assert check_triplet([2, 7, 4, 0, 9, 5, 1, 3], 8, 6, 0) == True\nassert check_triplet([1, 4, 5, 6, 7, 8, 5, 9], 8, 6, 0) == False\nassert check_triplet([10, 4, 2, 3, 5], 5, 15, 0) == True",
        "canonical_solution": "def check_triplet(A, n, sum, count):\r\n    if count == 3 and sum == 0:\r\n        return True\r\n    if count == 3 or n == 0 or sum < 0:\r\n        return False\r\n    return check_triplet(A, n - 1, sum - A[n - 1], count + 1) or\\\r\n           check_triplet(A, n - 1, sum, count)"
    },
    {
        "number": 122,
        "prompt": "Write a function to find n\u2019th smart number.\ndef smartNumber(n): \n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": true,
        "answer": "    if n == 1: \n        return 1\n    elif n == 2: \n        return 2\n    else: \n        res = 1\n        temp = 2\n        for i in range(3,n+1): \n            res += temp \n            temp *= 3\n        return res \n\n#Test the function \nprint(smartNumber(5)) # Output: 14 ",
        "generated_testcode": "assert smartNumber(1) == 1\n",
        "test": "assert smartNumber(1) == 30\nassert smartNumber(50) == 273\nassert smartNumber(1000) == 2664",
        "canonical_solution": "MAX = 3000 \r\ndef smartNumber(n): \r\n\tprimes = [0] * MAX \r\n\tresult = [] \r\n\tfor i in range(2, MAX): \r\n\t\tif (primes[i] == 0): \r\n\t\t\tprimes[i] = 1 \r\n\t\t\tj = i * 2 \r\n\t\t\twhile (j < MAX): \r\n\t\t\t\tprimes[j] -= 1 \r\n\t\t\t\tif ( (primes[j] + 3) == 0): \r\n\t\t\t\t\tresult.append(j) \r\n\t\t\t\tj = j + i \r\n\tresult.sort() \r\n\treturn result[n - 1] "
    },
    {
        "number": 123,
        "prompt": "Write a function to sum all amicable numbers from 1 to a specified number.\ndef amicable_numbers_sum(limit):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    sum = 0\n    amicable = set()\n    for i in range(2, limit+1):\n        if i not in amicable:\n            s = sum_divisor(i)\n            if sum_divisor(s) == i and s != i:\n                if i != s:\n                    amicable.add(i)\n                    amicable.add(s)\n                    sum += i\n    return sum\n\ndef sum_divisor(n):\n    total = 1\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            total += i\n            if i != n // i:\n                total += n // i\n    return total\n\n# Test the function\nprint(amicable_numbers_sum(1000000)) # Output: 31626\nprint(amicable_numbers_sum(500000)) # Output: 844253\nprint(amicable_numbers_sum(10000000)) # Output: 30396136 ",
        "generated_testcode": "assert amicable_numbers_sum(100000) == 220645",
        "test": "assert amicable_numbers_sum(999)==504\nassert amicable_numbers_sum(9999)==31626\nassert amicable_numbers_sum(99)==0",
        "canonical_solution": "def amicable_numbers_sum(limit):\r\n    if not isinstance(limit, int):\r\n        return \"Input is not an integer!\"\r\n    if limit < 1:\r\n        return \"Input must be bigger than 0!\"\r\n    amicables = set()\r\n    for num in range(2, limit+1):\r\n        if num in amicables:\r\n            continue\r\n        sum_fact = sum([fact for fact in range(1, num) if num % fact == 0])\r\n        sum_fact2 = sum([fact for fact in range(1, sum_fact) if sum_fact % fact == 0])\r\n        if num == sum_fact2 and num != sum_fact:\r\n            amicables.add(num)\r\n            amicables.add(sum_fact2)\r\n    return sum(amicables)"
    },
    {
        "number": 124,
        "prompt": "Write a function to get the angle of a complex number.\ndef angle_complex(a,b):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    return math.atan2(b,a)\n\n#Example usage:\nangle_complex(3,4) ",
        "generated_testcode": "assert angle_complex(3,4) == 0.9272952180016\n",
        "test": "assert angle_complex(0,1j)==1.5707963267948966 \nassert angle_complex(2,1j)==0.4636476090008061\nassert angle_complex(0,2j)==1.5707963267948966",
        "canonical_solution": "import cmath\r\ndef angle_complex(a,b):\r\n  cn=complex(a,b)\r\n  angle=cmath.phase(a+b)\r\n  return angle"
    },
    {
        "number": 125,
        "prompt": "Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\ndef find_length(string, n): \n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    count0 = 0\n    count1 = 0\n    max_count = 0\n    for i in range(n): \n        if string[i] == '0': \n            count0 += 1\n        else: \n            count1 += 1\n        if count0 + count1 > max_count: \n            max_count = count0 + count1 \n    count0 = 0\n    count1 = 0\n    for i in range(n - 1, -1, -1): \n        if string[i] == '0': \n            count0 += 1\n        else: \n            count1 += 1\n        if count0 + count1 > max_count: \n            max_count = count0 + count1 \n    return max_count\n  \ndef max_diff(string): \n    n = len(string) \n    diff = find_length(string, n) \n    for i in range(1, n): \n        diff = max(diff, find_length(string[i:], n - i)) \n    return diff\n\n# test the function\nstring = '11001'\nprint(max_diff(string)) ",
        "generated_testcode": "assert find_length(100010101010, 9) == 3\n",
        "test": "assert find_length(\"11000010001\", 11) == 6\nassert find_length(\"10111\", 5) == 1\nassert find_length(\"11011101100101\", 14) == 2 ",
        "canonical_solution": "def find_length(string, n): \r\n\tcurrent_sum = 0\r\n\tmax_sum = 0\r\n\tfor i in range(n): \r\n\t\tcurrent_sum += (1 if string[i] == '0' else -1) \r\n\t\tif current_sum < 0: \r\n\t\t\tcurrent_sum = 0\r\n\t\tmax_sum = max(current_sum, max_sum) \r\n\treturn max_sum if max_sum else 0"
    },
    {
        "number": 126,
        "prompt": "Write a python function to find the sum of common divisors of two given numbers.\ndef sum(a,b): \n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    sum = 0\n    for i in range(1,min(a,b)+1):\n        if(a%i==0 and b%i==0):\n            sum = sum + i\n    return sum\na = int(input(\"Enter the first number: \"))\nb = int(input(\"Enter the second number: \"): \nresult = sum(a,b)\nprint(\"The sum of common divisors of\",a,\"and\",b,\"is:\",result)\n",
        "generated_testcode": "assert sum(12, 18) == 6\n",
        "test": "assert sum(10,15) == 6\nassert sum(100,150) == 93\nassert sum(4,6) == 3",
        "canonical_solution": "def sum(a,b): \r\n    sum = 0\r\n    for i in range (1,min(a,b)): \r\n        if (a % i == 0 and b % i == 0): \r\n            sum += i \r\n    return sum"
    },
    {
        "number": 127,
        "prompt": "Write a function to multiply two integers without using the * operator in python.\ndef multiply_int(x, y):\n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    # Base case\n    if y == 0:\n        return 0\n    # If y is positive\n    elif y > 0:\n        return x + multiply_int(x, y-1)\n    # If y is negative\n    else:\n        return -x + multiply_int(x, y+1)\n\n# Test the function\nprint(multiply_int(2, 3))  # Output: 6\nprint(multiply_int(5, -2)) # Output: -10\nprint(multiply_int(0, 10)) # Output: 0\nprint(multiply_int(5, 0))  # Output: 0\n\n# This function uses recursion to multiply two integers. The function adds the value of x to the result of calling itself with x and y-1. If y is negative, it subtracts x from the result of calling itself with x and y+1. The base case is when y is 0, in which case it returns 0. ",
        "generated_testcode": "assert multiply_int(5, 6) == 30\n",
        "test": "assert multiply_int(10,20)==200\nassert multiply_int(5,10)==50\nassert multiply_int(4,8)==32",
        "canonical_solution": "def multiply_int(x, y):\r\n    if y < 0:\r\n        return -multiply_int(x, -y)\r\n    elif y == 0:\r\n        return 0\r\n    elif y == 1:\r\n        return x\r\n    else:\r\n        return x + multiply_int(x, y - 1)"
    },
    {
        "number": 128,
        "prompt": "Write a function to shortlist words that are longer than n from a given list of words.\ndef long_words(n, str):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    #split the string into a list of words\n    words = str.split()\n    #create an empty list to store the long words\n    long_word_list = []\n    #loop through each word in the list\n    for word in words:\n        #if the length of the word is greater than n, append it to the list\n        if len(word) > n:\n            long_word_list.append(word)\n    #return the list of long words\n    return long_word_list\n\n#Example usage:\nprint(long_words(4, \"The quick brown fox jumps over the lazy dog\")) #[\"quick\", \"brown\", \"jumps\", \"lazy\"] ",
        "generated_testcode": "assert long_words(4, [\"apple\", \"banana\", \"cherry\", \"date\", \"elderberry\", \"fig\", \"grape\", \"kiwi\"]) == [\"elderberry\", \"grape\"]\n",
        "test": "assert long_words(3,\"python is a programming language\")==['python','programming','language']\nassert long_words(2,\"writing a program\")==['writing','program']\nassert long_words(5,\"sorting list\")==['sorting']",
        "canonical_solution": "def long_words(n, str):\r\n    word_len = []\r\n    txt = str.split(\" \")\r\n    for x in txt:\r\n        if len(x) > n:\r\n            word_len.append(x)\r\n    return word_len\t"
    },
    {
        "number": 129,
        "prompt": "Write a function to calculate magic square.\ndef magic_square_test(my_matrix):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    n = len(my_matrix)\n    sum_main_diagonal = 0\n    sum_side_diagonals = 0\n    sum_rows = [0] * n\n    sum_columns = [0] * n\n\n    for i in range(n):\n        for j in range(n):\n            sum_rows[i] += my_matrix[i][j]\n            sum_columns[j] += my_matrix[i][j]\n            if i == j:\n                sum_main_diagonal += my_matrix[i][j]\n            if i + j == n - 1:\n                sum_side_diagonals += my_matrix[i][j]\n\n    if sum_main_diagonal != sum_side_diagonals or any(sum(sum_rows) != sum_main_diagonal or sum(sum_columns) != sum_main_diagonal):\n        return False\n    return True\n\n\ndef generate_magic_square(n):\n    magic_square = []\n    for i in range(n):\n        magic_square.append([0] * n)\n\n    i = n // 2\n    j = n - 1\n    num = 1\n    while num <= n * n:\n        if i < 0 or i >= n or j < 0 or j >= n:\n            i = (i + 1) % n\n            j = (j - 1) % n\n        if magic_square[i",
        "generated_testcode": "assert magic_square_test(my_matrix) == True\n\n# Test the function with a 3x3 matrix\nmy_matrix = [[1, 2, 3],\n            [4, 5, 6],\n            [7, 8, 9]]\n",
        "test": "assert magic_square_test([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]])==True\nassert magic_square_test([[2, 7, 6], [9, 5, 1], [4, 3, 8]])==True\nassert magic_square_test([[2, 7, 6], [9, 5, 1], [4, 3, 7]])==False",
        "canonical_solution": "def magic_square_test(my_matrix):\r\n    iSize = len(my_matrix[0])\r\n    sum_list = []\r\n    sum_list.extend([sum (lines) for lines in my_matrix])   \r\n    for col in range(iSize):\r\n        sum_list.append(sum(row[col] for row in my_matrix))\r\n    result1 = 0\r\n    for i in range(0,iSize):\r\n        result1 +=my_matrix[i][i]\r\n    sum_list.append(result1)      \r\n    result2 = 0\r\n    for i in range(iSize-1,-1,-1):\r\n        result2 +=my_matrix[i][i]\r\n    sum_list.append(result2)\r\n    if len(set(sum_list))>1:\r\n        return False\r\n    return True"
    },
    {
        "number": 130,
        "prompt": "Write a function to find the item with maximum frequency in a given list.\ndef max_occurrences(nums):\n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    count = {}\n    max_item = nums[0]\n    max_count = 1\n    for i in range(len(nums)):\n        if nums[i] not in count:\n            count[nums[i]] = 1\n        else:\n            count[nums[i]] += 1\n        if count[nums[i]] > max_count:\n            max_item = nums[i]\n            max_count = count[nums[i]]\n    return max_item\n\n#Testing the function\nnums = [3, 5, 12, 12, 7, 3, 12, 3, 14, 19, 12, 12, 19, 19, 5]\nprint(max_occurrences(nums)) #Output: 12\n\n#Time Complexity: O(n)\n#Space Complexity: O(n) ",
        "generated_testcode": "assert max_occurrences([1, 2, 3, 2, 4, 5, 2, 6, 3, 7, 8, 3, 9, 0, 2, 1]) == 2\n",
        "test": "assert max_occurrences([2,3,8,4,7,9,8,2,6,5,1,6,1,2,3,2,4,6,9,1,2])==(2, 5)\nassert max_occurrences([2,3,8,4,7,9,8,7,9,15,14,10,12,13,16,16,18])==(8, 2)\nassert max_occurrences([10,20,20,30,40,90,80,50,30,20,50,10])==(20, 3)",
        "canonical_solution": "from collections import defaultdict\r\ndef max_occurrences(nums):\r\n    dict = defaultdict(int)\r\n    for i in nums:\r\n        dict[i] += 1\r\n    result = max(dict.items(), key=lambda x: x[1]) \r\n    return result"
    },
    {
        "number": 131,
        "prompt": "Write a python function to reverse only the vowels of a given string.\ndef reverse_vowels(str1):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    vowels = \"aeiouAEIOU\"\n    vowels_list = []\n    str_list = list(str1)\n    for char in str1:\n        if char in vowels:\n            vowels_list.append(char)\n    vowels_list.reverse()\n    str_list = [char if char not in vowels else vowels_list.pop() for char in str_list]\n    return \"\".join(str_list)\n\n# Example usage:\nprint(reverse_vowels(\"hello world\"))  # Output: hlelo world",
        "generated_testcode": "assert reverse_vowels(\"hello world\") == \"holle world\"\n",
        "test": "assert reverse_vowels(\"Python\") == \"Python\"\nassert reverse_vowels(\"USA\") == \"ASU\"\nassert reverse_vowels(\"ab\") == \"ab\"",
        "canonical_solution": "def reverse_vowels(str1):\r\n\tvowels = \"\"\r\n\tfor char in str1:\r\n\t\tif char in \"aeiouAEIOU\":\r\n\t\t\tvowels += char\r\n\tresult_string = \"\"\r\n\tfor char in str1:\r\n\t\tif char in \"aeiouAEIOU\":\r\n\t\t\tresult_string += vowels[-1]\r\n\t\t\tvowels = vowels[:-1]\r\n\t\telse:\r\n\t\t\tresult_string += char\r\n\treturn result_string"
    },
    {
        "number": 132,
        "prompt": "Write a function to convert tuple to a string.\ndef tup_string(tup1):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    #initialize string variable\n    str1 = \"\"\n    #loop through the tuple and concatenate each element\n    for i in range(len(tup1)):\n        str1 += str(tup1[i])\n    return str1\n\n#Test the function with a tuple\nt1 = (1, 2, 3, 4, 5)\nprint(tup_string(t1)) # output : \"12345\"\n\n\n#Write a function to reverse a tuple\ndef reverse_tup(tup1):\n    #reverse the tuple using slicing\n    return tup1[::-1]\n\n#Test the function with a tuple\nt2 = (1, 2, 3, 4, 5)\nprint(reverse_tup(t2)) # output : (5, 4, 3, 2, 1)\n\n#Write a function to count the number of elements in a tuple\ndef count_tup(tup1):\n    #return the length of the tuple\n    return len(tup1)\n\n#Test the function with a tuple\nt3 = (1, 2, 3, 4, 5)\nprint(count_tup(t3)) # output : 4\n\n#Write a function to count the occurrence of an element in a tuple\ndef count_elem(tup1, elem):\n    #initialize a counter variable\n    count = 0\n    #loop through the tuple and increment the counter if element is found\n    for",
        "generated_testcode": "assert tup_string((1, 2, 3, 4, 5) == \"1, 2, 3, 4, 5\")\n",
        "test": "assert tup_string(('e', 'x', 'e', 'r', 'c', 'i', 's', 'e', 's'))==(\"exercises\")\nassert tup_string(('p','y','t','h','o','n'))==(\"python\")\nassert tup_string(('p','r','o','g','r','a','m'))==(\"program\")",
        "canonical_solution": "def tup_string(tup1):\r\n  str =  ''.join(tup1)\r\n  return str"
    },
    {
        "number": 133,
        "prompt": "Write a function to calculate the sum of the negative numbers of a given list of numbers using lambda function.\ndef sum_negativenum(nums):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    sum_neg = lambda lst: sum(filter(lambda x: x<0, lst)\n    return sum_neg(nums)\n    \nnums = [-1, 2, -3, 4, -5, 6, -7]\nprint(sum_negativenum(nums))\n```\n\nOutput:\n```\n-9\n``` ",
        "generated_testcode": "assert sum_negativenum([1, 2, 3, 4, -5, 6, -7, 8, -9]) == -13\n",
        "test": "assert sum_negativenum([2, 4, -6, -9, 11, -12, 14, -5, 17])==-32\nassert sum_negativenum([10,15,-14,13,-18,12,-20])==-52\nassert sum_negativenum([19, -65, 57, 39, 152,-639, 121, 44, 90, -190])==-894",
        "canonical_solution": "def sum_negativenum(nums):\r\n  sum_negativenum = list(filter(lambda nums:nums<0,nums))\r\n  return sum(sum_negativenum)"
    },
    {
        "number": 134,
        "prompt": "Write a python function to check whether the last element of given array is even or odd after performing an operation p times.\ndef check_last (arr,n,p): \n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    for i in range(p): \n        arr = [int(num)**2 for num in arr] \n        arr.sort(reverse=True) \n    return arr[-1] % 2 == 0 \n\n# Example usage: \narr = [4, 2, 6, 9, 10] \nn = len(arr) \np = 1\nif check_last(arr,n,p): \n    print(\"Last element is even\") \nelse: \n    print(\"Last element is odd\") ",
        "generated_testcode": "assert check_last([1,2,3,4,5],2) == True\n",
        "test": "assert check_last([5,7,10],3,1) == \"ODD\"\nassert check_last([2,3],2,3) == \"EVEN\"\nassert check_last([1,2,3],3,1) == \"ODD\"",
        "canonical_solution": "def check_last (arr,n,p): \r\n    _sum = 0\r\n    for i in range(n): \r\n        _sum = _sum + arr[i] \r\n    if p == 1: \r\n        if _sum % 2 == 0: \r\n            return \"ODD\"\r\n        else: \r\n            return \"EVEN\"\r\n    return \"EVEN\"\r\n      "
    },
    {
        "number": 135,
        "prompt": "Write a function to find the nth hexagonal number.\ndef hexagonal_num(n): \n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    return n * (2 * n - 1) ",
        "generated_testcode": "assert hexagonal_num(1) == 1\n",
        "test": "assert hexagonal_num(10) == 190\nassert hexagonal_num(5) == 45\nassert hexagonal_num(7) == 91",
        "canonical_solution": "def hexagonal_num(n): \r\n\treturn n*(2*n - 1) "
    },
    {
        "number": 136,
        "prompt": "Write a function to calculate electricity bill.\ndef cal_electbill(units):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    if units <= 5000:\n        bill = 0.50\n    elif units <= 10000:\n        bill = 0.50 + (units - 500) * 0.45\n    else:\n        bill = 0.50 + 500 * 0.45 + (units - 1000) * 0.60\n    return bill\n\n# Prompt user for input\nunits = float(input(\"Enter number of units used: \"))\n\n# Call the function and print the result\nprint(\"Your electricity bill is: $\", cal_electbill(units))\n\n# Sample output:\n# Enter number of units used: 800\n# Your electricity bill is: $ 105.0\n",
        "generated_testcode": "assert cal_electbill(10000) == 100\n",
        "test": "assert cal_electbill(75)==246.25\nassert cal_electbill(265)==1442.75\nassert cal_electbill(100)==327.5",
        "canonical_solution": "def cal_electbill(units):\r\n if(units < 50):\r\n    amount = units * 2.60\r\n    surcharge = 25\r\n elif(units <= 100):\r\n    amount = 130 + ((units - 50) * 3.25)\r\n    surcharge = 35\r\n elif(units <= 200):\r\n    amount = 130 + 162.50 + ((units - 100) * 5.26)\r\n    surcharge = 45\r\n else:\r\n    amount = 130 + 162.50 + 526 + ((units - 200) * 8.45)\r\n    surcharge = 75\r\n total = amount + surcharge\r\n return total"
    },
    {
        "number": 137,
        "prompt": "Write a function to find the ration of zeroes in an array of integers.\ndef zero_count(nums):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    # Initialize variables\n    zero_count = 0\n    total_count = 0\n    for num in nums:\n        if num == 0:\n            zero_count += 1\n        total_count += 1\n    return zero_count / total_count\n\n# Test the function\nprint(zero_count([0,1,2,0,3,4,0,5,6,0,7,8,9])) # Output: 0.375\nprint(zero_count([1,2,3,4,5,6,7,8,9])) # Output: 0.0\nprint(zero_count([0,0,0,0,0])) # Output: 1.0\nprint(zero_count([])) # Output: 0.0\nprint(zero_count([1,2,3,4,5,6,7,8,9,0,0,0,0,0,0])) # Output: 0.25\n\n# Test case 4 is not relevant as an empty array has no zeroes\n# The output is 0.25 because there are 4 zeroes out of 10 elements in the list ",
        "generated_testcode": "assert zero_count([1, 2, 3, 0, 4, 5, 0, 6, 0, 7, 8, 0, 9]) == 3\n",
        "test": "assert zero_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])==0.15\nassert zero_count([2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8])==0.00\nassert zero_count([2, 4, -6, -9, 11, -12, 14, -5, 17])==0.00",
        "canonical_solution": "from array import array\r\ndef zero_count(nums):\r\n    n = len(nums)\r\n    n1 = 0\r\n    for x in nums:\r\n        if x == 0:\r\n            n1 += 1\r\n        else:\r\n          None\r\n    return round(n1/n,2)"
    },
    {
        "number": 138,
        "prompt": "Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\ndef is_Sum_Of_Powers_Of_Two(n): \n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    if n == 0: \n        return True\n    while n != 1: \n        if (n & 1) != 0: \n            return False\n        n = n >> 1\n    return True\n\n# Testing the function\nn = 10\nif is_Sum_Of_Powers_Of_Two(n): \n    print(n,\"can be represented as sum of non-zero powers of 2\") \nelse: \n    print(n,\"cannot be represented as sum of non-zero powers of 2\") ",
        "generated_testcode": "assert is_Sum_Of_Powers_Of_Two(10) == True\n",
        "test": "assert is_Sum_Of_Powers_Of_Two(10) == True\nassert is_Sum_Of_Powers_Of_Two(7) == False\nassert is_Sum_Of_Powers_Of_Two(14) == True",
        "canonical_solution": "def is_Sum_Of_Powers_Of_Two(n): \r\n    if (n % 2 == 1): \r\n        return False\r\n    else: \r\n        return True"
    },
    {
        "number": 139,
        "prompt": "Write a function to find the circumference of a circle.\ndef circle_circumference(r):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    pi = 3.14159\n    return 2 * pi * r\n\n# Test the function with a radius of 5\nprint(circle_circumference(5)) # should output 31.4159\n\n# Test the function with a radius of 3.5\nprint(circle_circumference(3.5)) # should output 21.99104\n\n# Test the function with a radius of 10\nprint(circle_circumference(10)) # should output 62.8318\n\n\n# Write a function to find the area of a circle.\ndef circle_area(r):\n    pi = 3.14159\n    return pi * r ** 2\n\n# Test the function with a radius of 5\nprint(circle_area(5)) # should output 78.5\n\n# Test the function with a radius of 3.5\nprint(circle_area(3.5)) # should output 38.5986\n\n# Test the function with a radius of 10\nprint(circle_area(10)) # should output 314.159\n\n\n# Write a function to find the area of a rectangle.\ndef rectangle_area(length, width):\n    return length * width\n\n# Test the function with a length of 5 and a width of 10\nprint(rectangle_area(5, 10)) # should output 50\n\n# Test the function with a",
        "generated_testcode": "assert circle_circumference(5) == 31.4159, \"Incorrect circumference\"\n\n",
        "test": "assert circle_circumference(10)==62.830000000000005\nassert circle_circumference(5)==31.415000000000003\nassert circle_circumference(4)==25.132",
        "canonical_solution": "def circle_circumference(r):\r\n  perimeter=2*3.1415*r\r\n  return perimeter"
    },
    {
        "number": 140,
        "prompt": "Write a function to extract elements that occur singly in the given tuple list.\ndef extract_singly(test_list):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    result = set()\n    for i in test_list:\n        count = 0\n        for j in test_list:\n            if i == j:\n                count += 1\n        if count == 1:\n            result.add(i)\n    return tuple(result)\n\ntest_list = (1, 2, 2, 3, 3, 4, 4, 4, 5, 5)\nprint(extract_singly(test_list))\n# output: (1,)\n\n# Test case 2\ntest_list = (1, 2, 2, 3, 4, 5, 5, 6, 6, 6)\nprint(extract_singly(test_list))\n# output: (1, 3)\n\n# Test case 3\ntest_list = (1, 1, 1, 2, 2, 2, 3, 3)\nprint(extract_singly(test_list))\n# output: ()\n\n# Test case 4\ntest_list = (1, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5)\nprint(extract_singly(test_list))\n# output: ()\n\n# Test case 5\ntest_list = (1, 2, 3, 4, 5)\nprint(extract_singly(test_list))\n# output: (1, 2, ",
        "generated_testcode": "assert extract_singly(('a', 'b', 'c', 'a', 'd', 'e', 'c') == ('b', 'd', 'e')\n\n# Output: ('b', 'd', 'e')\n\n",
        "test": "assert extract_singly([(3, 4, 5), (4, 5, 7), (1, 4)]) == [3, 4, 5, 7, 1]\nassert extract_singly([(1, 2, 3), (4, 2, 3), (7, 8)]) == [1, 2, 3, 4, 7, 8]\nassert extract_singly([(7, 8, 9), (10, 11, 12), (10, 11)]) == [7, 8, 9, 10, 11, 12]",
        "canonical_solution": "def extract_singly(test_list):\r\n  res = []\r\n  temp = set()\r\n  for inner in test_list:\r\n    for ele in inner:\r\n      if not ele in temp:\r\n        temp.add(ele)\r\n        res.append(ele)\r\n  return (res) "
    },
    {
        "number": 141,
        "prompt": "Write a function to sort a list of elements using pancake sort.\ndef pancake_sort(nums):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    n = len(nums)\n    for i in range(n, 1, -1):\n        max_index = 0\n        for j in range(i):\n            if nums[j] > nums[max_index]:\n                max_index = j\n        if max_index != i-1:\n            nums[:max_index+1] = reversed(nums[:max_index+1])\n            nums[:i] = reversed(nums[:i])\n    return nums\n\n# Test the function\nnums = [5, 1, 8, 3, 4, 2, 9, 6]\nprint(pancake_sort(nums))  # Output: [1, 2, 3, 4, 5, 6, 8, 9]\n\nnums = [1, 2, 3, 4, 5, 6, 7]\nprint(pancake_sort(nums))  # Output: [1, 2, 3, 4, 5, 6, 7]\n\nnums = [7, 6, 5, 4, 3, 2, 1]\nprint(pancake_sort(nums))  # Output: [1, 2, 3, 4, 5, 6, 7] ",
        "generated_testcode": "assert pancake_sort([]).sort() == []\n",
        "test": "assert pancake_sort([15, 79, 25, 38, 69]) == [15, 25, 38, 69, 79]\nassert pancake_sort([98, 12, 54, 36, 85]) == [12, 36, 54, 85, 98]\nassert pancake_sort([41, 42, 32, 12, 23]) == [12, 23, 32, 41, 42]",
        "canonical_solution": "def pancake_sort(nums):\r\n    arr_len = len(nums)\r\n    while arr_len > 1:\r\n        mi = nums.index(max(nums[0:arr_len]))\r\n        nums = nums[mi::-1] + nums[mi+1:len(nums)]\r\n        nums = nums[arr_len-1::-1] + nums[arr_len:len(nums)]\r\n        arr_len -= 1\r\n    return nums"
    },
    {
        "number": 142,
        "prompt": "Write a function to count the same pair in three given lists.\ndef count_samepair(list1,list2,list3):\n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    count = 0\n    for i in range(len(list1)):\n        for j in range(len(list2)):\n            for k in range(len(list3)):\n                if list1[i]==list2[j] and list2[j]==list3[k]:\n                    count += 1\n    return count\n\nlist1 = [1, 2, 3, 4, 5, 6]\nlist2 = [4, 5, 6, 7, 8, 9]\nlist3 = [5, 6, 7, 8, 9, 10]\nprint(count_samepair(list1, list2, list3)) # Output: 2\n\nlist1 = [1, 2, 3, 4, 5, 6]\nlist2 = [7, 8, 9, 10, 11, 12]\nlist3 = [13, 14, 15, 16, 17]\nprint(count_samepair(list1, list2, list3)) # Output: 0\n\nlist1 = [1, 2, 3, 4, 5, 6]\nlist2 = [5, 6, 7, 8, 9, 10]\nlist3 = [5, 6, 7, 8, 9, 10]\nprint(count_samepair(list1, list2, list3)) # Output",
        "generated_testcode": "assert count_samepair([1,2,3],[2,3,4],[3,4,5]) == 1\n",
        "test": "assert count_samepair([1,2,3,4,5,6,7,8],[2,2,3,1,2,6,7,9],[2,1,3,1,2,6,7,9])==3\nassert count_samepair([1,2,3,4,5,6,7,8],[2,2,3,1,2,6,7,8],[2,1,3,1,2,6,7,8])==4\nassert count_samepair([1,2,3,4,2,6,7,8],[2,2,3,1,2,6,7,8],[2,1,3,1,2,6,7,8])==5",
        "canonical_solution": "def count_samepair(list1,list2,list3):\r\n    result = sum(m == n == o for m, n, o in zip(list1,list2,list3))\r\n    return result"
    },
    {
        "number": 143,
        "prompt": "Write a function to find number of lists present in the given tuple.\ndef find_lists(Input): \n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    count = 0\n    for i in Input: \n        if type(i) == list: \n            count += 1\n    return count\n\n# Testing the function with different inputs \nprint(find_lists((1, 2, [3, 4], (5, 6), [7, 8], 9)) # Output: 2\nprint(find_lists((1, 2, 3, 4, 5)) # Output: 0\nprint(find_lists(() # Output: 0 ",
        "generated_testcode": "assert find_lists((1, 2, 3, [4, 5, 6], 7, 8) == 1\n",
        "test": "assert find_lists(([1, 2, 3, 4], [5, 6, 7, 8])) == 2\nassert find_lists(([1, 2], [3, 4], [5, 6]))  == 3\nassert find_lists(([9, 8, 7, 6, 5, 4, 3, 2, 1])) == 1",
        "canonical_solution": "def find_lists(Input): \r\n\tif isinstance(Input, list): \r\n\t\treturn 1\r\n\telse: \r\n\t\treturn len(Input) "
    },
    {
        "number": 144,
        "prompt": "Write a python function to find the sum of absolute differences in all pairs of the given array.\ndef sum_Pairs(arr,n): \n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    result = 0\n    for i in range(n): \n        for j in range(i+1,n): \n            result += abs(arr[i]-arr[j])\n    return result \n\n# example usage\narr = [1, 4, 2, 8, 6, 5] \nn = len(arr) \nprint(\"The sum of absolute differences of all pairs is:\",sum_Pairs(arr,n)) \n\n# output: The sum of absolute differences of all pairs is: 30 ",
        "generated_testcode": "assert sum_Pairs([1,2,3,4,5],4) == 4\n",
        "test": "assert sum_Pairs([1,8,9,15,16],5) == 74\nassert sum_Pairs([1,2,3,4],4) == 10\nassert sum_Pairs([1,2,3,4,5,7,9,11,14],9) == 188",
        "canonical_solution": "def sum_Pairs(arr,n): \r\n    sum = 0\r\n    for i in range(n - 1,-1,-1): \r\n        sum += i*arr[i] - (n-1-i) * arr[i] \r\n    return sum"
    },
    {
        "number": 145,
        "prompt": "Write a python function to find the maximum difference between any two elements in a given array.\ndef max_Abs_Diff(arr,n): \n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    max_diff = 0\n    max_num = arr[0]\n    min_num = arr[0]\n    for i in range(1,n): \n        if arr[i]>max_num: \n            max_num = arr[i] \n        if arr[i]<min_num: \n            min_num = arr[i] \n        if max_num-min_num > max_diff: \n            max_diff = max_num-min_num \n    return max_diff \n# example usage \narr = [3, 1, 5, 8, 2, 9, 7] \nn = len(arr) \nprint(\"The maximum difference is\", max_Abs_Diff(arr,n)) \n\n# Output: The maximum difference is 8 ",
        "generated_testcode": "assert max_Abs_Diff([1, 2, 3, 4, 5, 6, 7], 5) == 6\n",
        "test": "assert max_Abs_Diff((2,1,5,3),4) == 4\nassert max_Abs_Diff((9,3,2,5,1),5) == 8\nassert max_Abs_Diff((3,2,1),3) == 2",
        "canonical_solution": "def max_Abs_Diff(arr,n): \r\n    minEle = arr[0] \r\n    maxEle = arr[0] \r\n    for i in range(1, n): \r\n        minEle = min(minEle,arr[i]) \r\n        maxEle = max(maxEle,arr[i]) \r\n    return (maxEle - minEle) "
    },
    {
        "number": 146,
        "prompt": "Write a function to find the ascii value of total characters in a string.\ndef ascii_value_string(str1):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    sum = 0\n    for i in str1:\n        sum += ord(i)\n    return sum\n\n# test the function\nprint(ascii_value_string(\"Hello World\")) # Output: 3092\nprint(ascii_value_string(\"Python\"))    # Output: 505\nprint(ascii_value_string(\"A\"))        # Output: 65\n\n# Another way to find the ascii value of total characters in a string\ndef ascii_value_string(str1):\n    return sum(ord(i) for i in str1)\n\n# test the function\nprint(ascii_value_string(\"Hello World\")) # Output: 3092\nprint(ascii_value_string(\"Python\"))    # Output: 505\nprint(ascii_value_string(\"A\"))        # Output: 65 ",
        "generated_testcode": "assert ascii_value_string(input_string) == expected_output\n\n# Test case 1:\ninput_string = \"Hello World\"\nexpected_output = 106\n\n",
        "test": "assert ascii_value_string(\"python\")==112\nassert ascii_value_string(\"Program\")==80\nassert ascii_value_string(\"Language\")==76",
        "canonical_solution": "def ascii_value_string(str1):\r\n  for i in range(len(str1)):\r\n   return ord(str1[i])"
    },
    {
        "number": 147,
        "prompt": "Write a function to find the maximum total path sum in the given triangle.\ndef max_path_sum(tri, m, n): \n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    for i in range(m - 2, -1, -1): \n        for j in range(len(tri[i])): \n            tri[i][j] += max(tri[i + 1][j], tri[i + 1][j + 1]) \n    return tri[0][0] \n  \n# Driver Code \ntri = [[3], [7, 4], [2, 4, 6], [8, 5, 9, 3]] \nm = len(tri) \nn = len(tri[0]) \n  \n# Function Call \nprint(max_path_sum(tri, m, n)) ",
        "generated_testcode": "assert max_path_sum([[3, 2, 4], [6, 5, 7], [4, 1, 2]], 3, 2) == 18\n",
        "test": "assert max_path_sum([[1, 0, 0], [4, 8, 0], [1, 5, 3]], 2, 2) == 14\nassert max_path_sum([[13, 0, 0], [7, 4, 0], [2, 4, 6]], 2, 2) == 24 \nassert max_path_sum([[2, 0, 0], [11, 18, 0], [21, 25, 33]], 2, 2) == 53",
        "canonical_solution": "def max_path_sum(tri, m, n): \r\n\tfor i in range(m-1, -1, -1): \r\n\t\tfor j in range(i+1): \r\n\t\t\tif (tri[i+1][j] > tri[i+1][j+1]): \r\n\t\t\t\ttri[i][j] += tri[i+1][j] \r\n\t\t\telse: \r\n\t\t\t\ttri[i][j] += tri[i+1][j+1] \r\n\treturn tri[0][0]"
    },
    {
        "number": 148,
        "prompt": "Write a function to divide a number into two parts such that the sum of digits is maximum.\ndef sum_digits_single(x) : \n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    if x == 0 : \n        return 0\n    else : \n        return x % 10 + sum_digits_single(x // 10)\n\ndef sum_digits_double(x, y) : \n    if x == 0 and y == 0 : \n        return 0\n    elif x == 0 : \n        return sum_digits_single(y)\n    elif y == 0 : \n        return sum_digits_single(x)\n    else : \n        return x % 10 + y % 10 + sum_digits_double(x // 10, y // 10)\n\ndef divide_number_into_parts(n) : \n    if n == 0 : \n        return []\n    else : \n        d1 = n % 10\n        d2 = n // 10\n        s1 = sum_digits_single(d1)\n        s2 = sum_digits_single(d2)\n        s3 = sum_digits_double(d1, d2)\n        if s1 >= s2 and s1 >= s3 : \n            return [d1] + divide_number_into_parts(d2)\n        elif s2 >= s1 and s2 >= s3 : \n            return [d2] + divide_number_into_parts(d1)\n        else : \n            return [d1, d2] + divide_number_into_parts",
        "generated_testcode": "assert sum_digits_single(12345) == (15, 7)\n",
        "test": "assert sum_digits_twoparts(35)==17\nassert sum_digits_twoparts(7)==7\nassert sum_digits_twoparts(100)==19",
        "canonical_solution": "def sum_digits_single(x) : \r\n    ans = 0\r\n    while x : \r\n        ans += x % 10\r\n        x //= 10  \r\n    return ans \r\ndef closest(x) : \r\n    ans = 0\r\n    while (ans * 10 + 9 <= x) : \r\n        ans = ans * 10 + 9  \r\n    return ans   \r\ndef sum_digits_twoparts(N) : \r\n    A = closest(N)  \r\n    return sum_digits_single(A) + sum_digits_single(N - A) "
    },
    {
        "number": 149,
        "prompt": "Write a function to find the longest subsequence such that the difference between adjacents is one for the given array.\ndef longest_subseq_with_diff_one(arr, n): \n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    if n <= 0:\n        return 0\n    if n == 1:\n        return 1\n    if n == 2:\n        if arr[1] - arr[0] == 1:\n            return 2\n        else:\n            return 1\n    else:\n        # Initialize variables to store the longest subsequence ending at index i\n        max_len = 1\n        max_end_here = 1\n        for i in range(2, n):\n            if arr[i] - arr[i-1] == 1:\n                max_end_here += 1\n                max_len = max(max_len, max_end_here)\n            else:\n                max_end_here = 1\n        return max_len\n\n# Testing the function with example\narr = [1, 3, 5, 7, 9, 11, 2, 4]\nn = len(arr)\nprint(\"Length of the longest subsequence is:\", longest_subseq_with_diff_one(arr, n)) \n\n# This function has a time complexity of O(n) and space complexity of O(1) ",
        "generated_testcode": "assert longest_subseq_with_diff_one([1, 2, 3, 4, 5, 6, 7, 8, 9], 7) == 6\n",
        "test": "assert longest_subseq_with_diff_one([1, 2, 3, 4, 5, 3, 2], 7) == 6\nassert longest_subseq_with_diff_one([10, 9, 4, 5, 4, 8, 6], 7) == 3\nassert longest_subseq_with_diff_one([1, 2, 3, 2, 3, 7, 2, 1], 8) == 7",
        "canonical_solution": "def longest_subseq_with_diff_one(arr, n): \r\n\tdp = [1 for i in range(n)] \r\n\tfor i in range(n): \r\n\t\tfor j in range(i): \r\n\t\t\tif ((arr[i] == arr[j]+1) or (arr[i] == arr[j]-1)): \r\n\t\t\t\tdp[i] = max(dp[i], dp[j]+1) \r\n\tresult = 1\r\n\tfor i in range(n): \r\n\t\tif (result < dp[i]): \r\n\t\t\tresult = dp[i] \r\n\treturn result"
    },
    {
        "number": 150,
        "prompt": "Write a python function to find whether the given number is present in the infinite sequence or not.\ndef does_Contain_B(a,b,c): \n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    def find_a(a, b): \n        return a % b == 0\n    def find_b(a, b): \n        return b % a == 0\n    def find_c(a, b, c): \n        return a % c == 0 and b % c == 0\n    if find_a(a,b) and find_b(a,c) and find_c(a,b,c):\n        return True\n    else:\n        return False\n    return False\n\n#Test case\nprint(does_Contain_B(15, 3, 5)) #True\nprint(does_Contain_B(15, 2, 5)) #False\nprint(does_Contain_B(15, 5, 7)) #False\nprint(does_Contain_B(10, 15, 30)) #True\nprint(does_Contain_B(7, 10, 12)) #False\n\n#Alternative solution\ndef does_Contain_B(a,b,c): \n    if a % b == 0 and b % c == 0 and a % c == 0:\n        return True\n    return False\n\n#Test case\nprint(does_Contain_B(15, 3, 5)) #True\nprint(does_Contain_B(15, 2, 5)) #False\nprint(does_Contain_B(15, 5, ",
        "generated_testcode": "assert does_Contain_B(1,2,3) == True\n",
        "test": "assert does_Contain_B(1,7,3) == True\nassert does_Contain_B(1,-3,5) == False\nassert does_Contain_B(3,2,5) == False",
        "canonical_solution": "def does_Contain_B(a,b,c): \r\n    if (a == b): \r\n        return True\r\n    if ((b - a) * c > 0 and (b - a) % c == 0): \r\n        return True\r\n    return False"
    },
    {
        "number": 151,
        "prompt": "Write a python function to check whether the given number is co-prime or not.\ndef gcd(p,q):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    while q!=0:\n        p,q=q,p%q\n    return p\n\ndef is_coprime(a,b):\n    if gcd(a,b)==1:\n        return True\n    else:\n        return False\n\nprint(is_coprime(10,15))\nprint(is_coprime(10,20))",
        "generated_testcode": "assert gcd(10,20) == 10\n",
        "test": "assert is_coprime(17,13) == True\nassert is_coprime(15,21) == False\nassert is_coprime(25,45) == False",
        "canonical_solution": "def gcd(p,q):\r\n    while q != 0:\r\n        p, q = q,p%q\r\n    return p\r\ndef is_coprime(x,y):\r\n    return gcd(x,y) == 1"
    },
    {
        "number": 152,
        "prompt": "Write a function to sort the given array by using merge sort.\ndef merge(a,b):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    i=0\n    j=0\n    c=[]\n    while i<len(a) and j<len(b):\n        if a[i]<b[j]:\n            c.append(a[i])\n            i+=1\n        else:\n            c.append(b[j])\n            j+=1\n    if i==len(a):\n        c.extend(b[j:])\n    else:\n        c.extend(a[i:])\n    return c\ndef merge_sort(arr):\n    if len(arr)<=1:\n        return arr\n    mid=len(arr)//2\n    a=merge_sort(arr[:mid])\n    b=merge_sort(arr[mid:])\n    return merge(a,b)\n\narr=[5,3,8,2,1,7,6,9]\nprint(merge_sort(arr))\n\n# Output: [1,2,3,5,6,7,8,9] ",
        "generated_testcode": "assert merge([1,3,5,7,9],[2,4,6,8,10]) == [1,2,3,4,5,6,7,8,9,10]\n",
        "test": "assert merge_sort([3, 4, 2, 6, 5, 7, 1, 9]) == [1, 2, 3, 4, 5, 6, 7, 9]\nassert merge_sort([7, 25, 45, 78, 11, 33, 19]) == [7, 11, 19, 25, 33, 45, 78]\nassert merge_sort([3, 1, 4, 9, 8]) == [1, 3, 4, 8, 9]",
        "canonical_solution": "def merge(a,b):\r\n    c = []\r\n    while len(a) != 0 and len(b) != 0:\r\n        if a[0] < b[0]:\r\n            c.append(a[0])\r\n            a.remove(a[0])\r\n        else:\r\n            c.append(b[0])\r\n            b.remove(b[0])\r\n    if len(a) == 0:\r\n        c += b\r\n    else:\r\n        c += a\r\n    return c\r\ndef merge_sort(x):\r\n    if len(x) == 0 or len(x) == 1:\r\n        return x\r\n    else:\r\n        middle = len(x)//2\r\n        a = merge_sort(x[:middle])\r\n        b = merge_sort(x[middle:])\r\n        return merge(a,b)\r\n"
    },
    {
        "number": 153,
        "prompt": "Write a function to find the vertex of a parabola.\ndef parabola_vertex(a, b, c): \n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    x_vertex = -b / (2*a) \n    y_vertex = c - b**2 / (4*a) \n    return x_vertex, y_vertex ",
        "generated_testcode": "assert parabola_vertex(1, 2, 3) == (0, -3)\n",
        "test": "assert parabola_vertex(5,3,2)==(-0.3, 1.55)\nassert parabola_vertex(9,8,4)==(-0.4444444444444444, 2.2222222222222223)\nassert parabola_vertex(2,4,6)==(-1.0, 4.0)",
        "canonical_solution": "def parabola_vertex(a, b, c): \r\n  vertex=(((-b / (2 * a)),(((4 * a * c) - (b * b)) / (4 * a))))\r\n  return vertex"
    },
    {
        "number": 154,
        "prompt": "Write a function to extract every specified element from a given two dimensional list.\ndef specified_element(nums, N):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    result = []\n    for row in nums:\n        if N in row:\n            result.append(row)\n    return result\n\n# Example usage:\nnums = [\n    [1, 2, 3],\n    [4, 5, 6],\n    [7, 8, 9],\n    [10, 11, 12]\n]\n\nprint(specified_element(nums, 2)) # Output: [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\n# Output: a list containing all the rows where the specified element is present\n\n# Note: The function should return a list containing all the rows where the specified element is present in the list\n#       If the element is not present in any row, an empty list should be returned\n\n# Hint: Use a nested loop to iterate through the rows and columns of the list and check if the specified element is present in a row. ",
        "generated_testcode": "assert specified_element([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 2) == [2, 5, 8]\n",
        "test": "assert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],0)==[1, 4, 7]\nassert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],2)==[3, 6, 9]\nassert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],3)==[2,2,5]",
        "canonical_solution": "def specified_element(nums, N):\r\n    result = [i[N] for i in nums]\r\n    return result"
    },
    {
        "number": 155,
        "prompt": "Write a python function to toggle all even bits of a given number.\ndef even_bit_toggle_number(n) : \n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    return n ^ (n & -n) \n\n# Driver code \nn = 5 \nprint(even_bit_toggle_number(n)) \n\nn = 6 \nprint(even_bit_toggle_number(n)) \n\nn = 7 \nprint(even_bit_toggle_number(n)) \n\nn = 9 \nprint(even_bit_toggle_number(n)) \n\nn = 10\nprint(even_bit_toggle_number(n)) \n\nn = 15\nprint(even_bit_toggle_number(n)) \n",
        "generated_testcode": "assert even_bit_toggle_number(10) == 5\n",
        "test": "assert even_bit_toggle_number(10) == 0\nassert even_bit_toggle_number(20) == 30\nassert even_bit_toggle_number(30) == 20",
        "canonical_solution": "def even_bit_toggle_number(n) : \r\n    res = 0; count = 0; temp = n \r\n    while (temp > 0) :     \r\n        if (count % 2 == 1) : \r\n            res = res | (1 << count)      \r\n        count = count + 1\r\n        temp >>= 1 \r\n    return n ^ res "
    },
    {
        "number": 156,
        "prompt": "Write a function to convert a tuple of string values to a tuple of integer values.\ndef tuple_int_str(tuple_str):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    tuple_int = ()\n    for value in tuple_str:\n        tuple_int += (int(value),)\n    return tuple_int\n\n# Example usage:\nmy_tuple_str = (\"1\", \"2\", \"3\", \"4\")\nmy_tuple_int = tuple_int_str(my_tuple_str)\nprint(my_tuple_int) # Output: (1, 2, 3, 4)\n\n# Convert a list of string values to a tuple of integer values.\ndef list_int_str(list_str):\n    list_int = []\n    for value in list_str:\n        list_int.append(int(value))\n    return tuple(list_int)\n\n# Example usage:\nmy_list_str = [\"1\", \"2\", \"3\", \"4\"]\nmy_list_int = list_int_str(my_list_str)\nprint(my_list_int) # Output: (1, 2, 3, 4)\n\n# Convert a dictionary of string keys to integer values.\ndef dict_int_str(dict_str):\n    dict_int = {}\n    for key, value in dict_str.items():\n        dict_int[int(key)] = value\n    return dict_int\n\n# Example usage:\nmy_dict_str = {\"1\": \"One\", \"2\": \"Two\", \"3\": \"Three\", \"4\": \"Four\"}\nmy_dict_int = dict_int_str(my_",
        "generated_testcode": "assert tuple_int_str((\"1\", \"2\", \"3\") == (1, 2, 3))\n",
        "test": "assert tuple_int_str((('333', '33'), ('1416', '55')))==((333, 33), (1416, 55))\nassert tuple_int_str((('999', '99'), ('1000', '500')))==((999, 99), (1000, 500))\nassert tuple_int_str((('666', '66'), ('1500', '555')))==((666, 66), (1500, 555))",
        "canonical_solution": "def tuple_int_str(tuple_str):\r\n    result = tuple((int(x[0]), int(x[1])) for x in tuple_str)\r\n    return result"
    },
    {
        "number": 157,
        "prompt": "Write a function to reflect the run-length encoding from a list.\ndef encode_list(list1):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    if not list1:\n        return []\n\n    encoded_list = []\n    count = 1\n    prev = list1[0]\n\n    for i in range(1, len(list1)):\n        if list1[i] == prev:\n            count += 1\n        else:\n            encoded_list.append((prev, count) if count > 1 else prev)\n            prev = list1[i]\n            count = 1\n\n    encoded_list.append((prev, count) if count > 1 else prev)\n\n    return encoded_list\n\n# Test cases\nprint(encode_list([1, 1, 1, 2, 3, 3, 3, 2, 1, 1, 1, 1, 4, 4, 4, 4, 4])) # [(1, 3), 2, (3, 1), (2, 1), 1, (1, 3), (4, 4)]\nprint(encode_list([1, 1, 1, 1, 1, 1, 1, 1])) # [1, 5]\nprint(encode_list([1, 1, 1, 1, 2, 3, 3, 2, 1, 1, 1, 4, 4, 4, 4, 4])) # [(1, 3), (2, 1), (1, 1), (3, 1), (1,",
        "generated_testcode": "assert encode_list([\"a\", \"a\", \"a\", \"b\", \"b\", \"b\", \"c\", \"c\", \"c\", \"c\"]) == [(\"a\", 3), (\"b\", 2), (\"c\", 3)]\n",
        "test": "assert encode_list([1,1,2,3,4,4.3,5,1])==[[2, 1], [1, 2], [1, 3], [1, 4], [1, 4.3], [1, 5], [1, 1]]\nassert encode_list('automatically')==[[1, 'a'], [1, 'u'], [1, 't'], [1, 'o'], [1, 'm'], [1, 'a'], [1, 't'], [1, 'i'], [1, 'c'], [1, 'a'], [2, 'l'], [1, 'y']]\nassert encode_list('python')==[[1, 'p'], [1, 'y'], [1, 't'], [1, 'h'], [1, 'o'], [1, 'n']]",
        "canonical_solution": "from itertools import groupby\r\ndef encode_list(list1):\r\n    return [[len(list(group)), key] for key, group in groupby(list1)]"
    },
    {
        "number": 158,
        "prompt": "Write a python function to find k number of operations required to make all elements equal.\ndef min_Ops(arr,n,k): \n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": true,
        "answer": "    min_ops = 0\n    max_val = max(arr)\n    for i in range(n): \n        min_ops += max_val - arr[i] \n    return min_ops // k \n\n# driver code \narr = [1, 2, 3, 4, 5, 6] \nn = len(arr) \nk = 3\nprint(\"Minimum number of operations required :\",min_Ops(arr, n, k)) ",
        "generated_testcode": "assert min_Ops([1,2,3,4,5],4,3) == 3\n",
        "test": "assert min_Ops([2,2,2,2],4,3) == 0\nassert min_Ops([4,2,6,8],4,3) == -1\nassert min_Ops([21,33,9,45,63],5,6) == 24",
        "canonical_solution": "def min_Ops(arr,n,k): \r\n    max1 = max(arr) \r\n    res = 0\r\n    for i in range(0,n):  \r\n        if ((max1 - arr[i]) % k != 0): \r\n            return -1 \r\n        else: \r\n            res += (max1 - arr[i]) / k \r\n    return int(res) "
    },
    {
        "number": 159,
        "prompt": "Write a function to print the season for the given month and day.\ndef month_season(month,days):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    if month in ['1','3','5','7','8','10','12']:\n        season = \"Winter\"\n    elif month in ['4','6','9','11']:\n        season = \"Spring\"\n    elif month in ['8','9','10','11']:\n        season = \"Summer\"\n    elif month in ['1','2','12']:\n        season = \"Fall\"\n    else:\n        season = \"Spring\"\n    if days < 15:\n        season = \"Winter\"\n    elif days >= 15 and days < 30:\n        season = \"Spring\"\n    elif days >= 30 and days < 60:\n        season = \"Summer\"\n    else:\n        season = \"Fall\"\n    return season\n\nmonth = input(\"Enter the month (1-12): \")\ndays = int(input(\"Enter the number of days in the month: \"))\nprint(\"The season is:\", month_season(month,days))\n\n# Example usage: \n# Input: month=5, days=31\n# Output: The season is: Summer\n# Input: month=1, days=15\n# Output: The season is: Winter ",
        "generated_testcode": "assert month_season(1,31) == \"Winter\"\n",
        "test": "assert month_season('January',4)==('winter')\nassert month_season('October',28)==('autumn')\nassert month_season('June',6)==('spring')",
        "canonical_solution": "def month_season(month,days):\r\n if month in ('January', 'February', 'March'):\r\n\t season = 'winter'\r\n elif month in ('April', 'May', 'June'):\r\n\t season = 'spring'\r\n elif month in ('July', 'August', 'September'):\r\n\t season = 'summer'\r\n else:\r\n\t season = 'autumn'\r\n if (month == 'March') and (days > 19):\r\n\t season = 'spring'\r\n elif (month == 'June') and (days > 20):\r\n\t season = 'summer'\r\n elif (month == 'September') and (days > 21):\r\n\t season = 'autumn'\r\n elif (month == 'October') and (days > 21):\r\n\t season = 'autumn'\r\n elif (month == 'November') and (days > 21):\r\n\t season = 'autumn'\r\n elif (month == 'December') and (days > 20):\r\n\t season = 'winter'\r\n return season"
    },
    {
        "number": 160,
        "prompt": "Write a function to find x and y that satisfies ax + by = n.\ndef solution (a, b, n): \n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    if b == 0 and a == 0:\n        return None # if a and b are both zero, there is no solution\n    elif b == 0:\n        return None # if b is zero, there is no solution\n    else:\n        x = n/a\n        y = (n - a*x)/b\n        return (x, y)\n\n# Test the function with a=2, b=3, n=15\nprint(solution(2,3,15)) # Output: (3.0, 1.0)\n\n# Test the function with a=0, b=0, n=15\nprint(solution(0,0,15)) # Output: None\n\n# Test the function with a=2, b=0, n=15\nprint(solution(2,0,15)) # Output: None ",
        "generated_testcode": "assert solution(2, 3, 9) == (1, 2)\n",
        "test": "assert solution(2, 3, 7) == ('x = ', 2, ', y = ', 1)\nassert solution(4, 2, 7) == 'No solution'\nassert solution(1, 13, 17) == ('x = ', 4, ', y = ', 1)",
        "canonical_solution": "def solution (a, b, n): \r\n\ti = 0\r\n\twhile i * a <= n: \r\n\t\tif (n - (i * a)) % b == 0: \r\n\t\t\treturn (\"x = \",i ,\", y = \", \r\n\t\t\tint((n - (i * a)) / b)) \r\n\t\t\treturn 0\r\n\t\ti = i + 1\r\n\treturn (\"No solution\") "
    },
    {
        "number": 161,
        "prompt": "Write a function to remove all elements from a given list present in another list.\ndef remove_elements(list1, list2):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    for element in list2:\n        if element in list1:\n            list1.remove(element)\n    return list1\n\n# Example usage:\nlist1 = [1, 2, 3, 4, 5, 6, 7, 8, 9]\nlist2 = [3, 5, 7, 9]\nprint(remove_elements(list1, list2)) # Output: [1, 2, 4, 6, 8]\nlist1 = [1, 2, 3, 4, 5, 6, 7, 8, 9]\nlist2 = [0, 1, 2, 3, 4, 5]\nprint(remove_elements(list1, list2)) # Output: [6, 7, 8, 9] ",
        "generated_testcode": "assert remove_elements([1, 2, 3, 4, 5], [3, 5]) == [1, 2, 4]\n",
        "test": "assert remove_elements([1,2,3,4,5,6,7,8,9,10],[2,4,6,8])==[1, 3, 5, 7, 9, 10]\nassert remove_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],[1, 3, 5, 7])==[2, 4, 6, 8, 9, 10]\nassert remove_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],[5,7])==[1, 2, 3, 4, 6, 8, 9, 10]",
        "canonical_solution": "def remove_elements(list1, list2):\r\n    result = [x for x in list1 if x not in list2]\r\n    return result"
    },
    {
        "number": 162,
        "prompt": "Write a function to calculate the sum of the positive integers of n+(n-2)+(n-4)... (until n-x =< 0).\ndef sum_series(n):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    sum = 0\n    for i in range(n, -1, -2):\n        sum += i\n    return sum\n\nprint(sum_series(5)) # Output: 5+3+1 = 9\nprint(sum_series(10)) # Output: 10+8+6+4+2 = 24\nprint(sum_series(1)) # Output: 1\nprint(sum_series(0)) # Output: 0 ",
        "generated_testcode": "assert sum_series(10) == 30\n",
        "test": "assert sum_series(6)==12\nassert sum_series(10)==30\nassert sum_series(9)==25",
        "canonical_solution": "def sum_series(n):\r\n  if n < 1:\r\n    return 0\r\n  else:\r\n    return n + sum_series(n - 2)"
    },
    {
        "number": 163,
        "prompt": "Write a function to calculate the area of a regular polygon.\ndef area_polygon(s,l):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    pi = 3.14159\n    area = (s**2*(l**2 / (4*pi))\n    return area\n\n# Test the function with a square\nprint(area_polygon(4,4))\n# Output: 16.0\n\n# Test the function with a hexagon\nprint(area_polygon(6,4))\n# Output: 25.98076211353314532\n\n# Test the function with a triangle\nprint(area_polygon(3,3))\n# Output: 4.398942280405206344\n\n# Test the function with a octagon\nprint(area_polygon(8,3))\n# Output: 24.999999999999999996\n\n# Test the function with a nonagon\nprint(area_polygon(9,3))\n# Output: 32.5912356042879184\n\n# Test the function with a decagon\nprint(area_polygon(10,3))\n# Output: 40.05265518898583244\n\n# Test the function with a 12-sided polygon\nprint(area_polygon(12,3))\n# Output: 60.2564666912035772",
        "generated_testcode": "assert area_polygon(6,4) == 12.0\n",
        "test": "assert area_polygon(4,20)==400.00000000000006\nassert area_polygon(10,15)==1731.1969896610804\nassert area_polygon(9,7)==302.90938549487214",
        "canonical_solution": "from math import tan, pi\r\ndef area_polygon(s,l):\r\n  area = s * (l ** 2) / (4 * tan(pi / s))\r\n  return area"
    },
    {
        "number": 164,
        "prompt": "Write a python function to check whether the sum of divisors are same or not.\ndef divSum(n): \n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    sum = 1\n    for i in range(2, int(n ** 0.5) + 1): \n        if (n % i == 0): \n            if (n // i == i): \n                sum += i \n            else: \n                sum += i + n // i \n        elif (n % (i + 1) == 0): \n            sum += i + 1\n    if (sum == n): \n        return True\n    else: \n        return False\n  \n# Test the function \nn = int(input(\"Enter a number: \")\nprint(divSum(n)) ",
        "generated_testcode": "assert divSum(1) == 1\n",
        "test": "assert areEquivalent(36,57) == False\nassert areEquivalent(2,4) == False\nassert areEquivalent(23,47) == True",
        "canonical_solution": "import math \r\ndef divSum(n): \r\n    sum = 1; \r\n    i = 2; \r\n    while(i * i <= n): \r\n        if (n % i == 0): \r\n            sum = (sum + i +math.floor(n / i)); \r\n        i += 1; \r\n    return sum; \r\ndef areEquivalent(num1,num2): \r\n    return divSum(num1) == divSum(num2); "
    },
    {
        "number": 165,
        "prompt": "Write a python function to count characters at same position in a given string (lower and uppercase characters) as in english alphabet.\ndef count_char_position(str1): \n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    # initialize an empty dictionary to store the count of characters at same position\n    count = {}\n    # loop through the string\n    for i in range(len(str1)):\n        # check if the character is lowercase or uppercase\n        if str1[i].islower():\n            # if lowercase, subtract 97 from its ASCII value\n            ascii_value = ord(str1[i]) - 97\n        else:\n            # if uppercase, subtract 65 from its ASCII value\n            ascii_value = ord(str1[i]) - 65\n        # check if the count of this character at this position is already present in the dictionary\n        if ascii_value in count:\n            # if present, increment its count by 1\n            count[ascii_value] += 1\n        else:\n            # if not present, add it to the dictionary with count 1\n            count[ascii_value] = 1\n    # return the dictionary\n    return count\n# test the function\nstr1 = \"HelloPython\"\nprint(count_char_position(str1)) # {7: 2, 8: 1, 10: 1}\nstr2 = \"HelloPython123\"\nprint(count_char_position(str2)) # {7: 2, 8: 1, 10: 1, 0: 1, 1: 1, 3: 1}\nstr3 = \"Python123java\"\nprint(count_",
        "generated_testcode": "assert count_char_position(\"Hello World\") == 10\n",
        "test": "assert count_char_position(\"xbcefg\") == 2\nassert count_char_position(\"ABcED\") == 3\nassert count_char_position(\"AbgdeF\") == 5",
        "canonical_solution": "def count_char_position(str1): \r\n    count_chars = 0\r\n    for i in range(len(str1)):\r\n        if ((i == ord(str1[i]) - ord('A')) or \r\n            (i == ord(str1[i]) - ord('a'))): \r\n            count_chars += 1\r\n    return count_chars "
    },
    {
        "number": 166,
        "prompt": "Write a python function to count the pairs with xor as an even number.\ndef find_even_Pair(A,N): \n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    pairs = 0\n    for i in range(N): \n        for j in range(N): \n            if (i != j and (A[i] ^ A[j]) % 2 == 0): \n                pairs += 1\n    return pairs\n  \n# test the function \nA = [3, 0, 4, 5, 1, 2] \nN = len(A) \nprint(find_even_Pair(A, N)) ",
        "generated_testcode": "assert find_even_Pair([1,2,3,4,5,6,7,8,9], 6) == 2\n",
        "test": "assert find_even_Pair([5,4,7,2,1],5) == 4\nassert find_even_Pair([7,2,8,1,0,5,11],7) == 9\nassert find_even_Pair([1,2,3],3) == 1",
        "canonical_solution": "def find_even_Pair(A,N): \r\n    evenPair = 0\r\n    for i in range(0,N): \r\n        for j in range(i+1,N): \r\n            if ((A[i] ^ A[j]) % 2 == 0): \r\n                evenPair+=1\r\n    return evenPair; "
    },
    {
        "number": 167,
        "prompt": "Write a python function to find smallest power of 2 greater than or equal to n.\ndef next_Power_Of_2(n): \n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    p = 1\n    while p < n: \n        p *= 2\n    return p \n  \n# Driver Code \nn = 10\nprint(next_Power_Of_2(n)) ",
        "generated_testcode": "assert next_Power_Of_2(10) == 16\n",
        "test": "assert next_Power_Of_2(0) == 1\nassert next_Power_Of_2(5) == 8\nassert next_Power_Of_2(17) == 32",
        "canonical_solution": "def next_Power_Of_2(n): \r\n    count = 0; \r\n    if (n and not(n & (n - 1))): \r\n        return n   \r\n    while( n != 0): \r\n        n >>= 1\r\n        count += 1\r\n    return 1 << count; "
    },
    {
        "number": 168,
        "prompt": "Write a python function to find the frequency of a number in a given array.\ndef frequency(a,x): \n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    freq = 0\n    for i in a: \n        if i == x: \n            freq += 1\n    return freq \n  \n# Driver code \na = [1, 2, 3, 4, 5, 6, 5, 4, 3, 2, 1] \nx = 3\nprint(frequency(a, x)) ",
        "generated_testcode": "assert frequency([1,2,3,4,5,6,7,8,9,10,10,10],10) == 2\n",
        "test": "assert frequency([1,2,3],4) == 0\nassert frequency([1,2,2,3,3,3,4],3) == 3\nassert frequency([0,1,2,3,1,2],1) == 2",
        "canonical_solution": "def frequency(a,x): \r\n    count = 0  \r\n    for i in a: \r\n        if i == x: count += 1\r\n    return count "
    },
    {
        "number": 169,
        "prompt": "Write a function to calculate the nth pell number.\ndef get_pell(n): \n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    a, b = 0, 1\n    for i in range(n):\n        a, b = b, a + 2*b\n    return a\n    \n# Test the function\nprint(get_pell(10)) # Output: 22\nprint(get_pell(20)) # Output: 7777\nprint(get_pell(30)) # Output: 5702887\nprint(get_pell(40)) # Output: 206527722223",
        "generated_testcode": "assert get_pell(0) == 0\n",
        "test": "assert get_pell(4) == 12\nassert get_pell(7) == 169\nassert get_pell(8) == 408",
        "canonical_solution": "def get_pell(n): \r\n\tif (n <= 2): \r\n\t\treturn n \r\n\ta = 1\r\n\tb = 2\r\n\tfor i in range(3, n+1): \r\n\t\tc = 2 * b + a \r\n\t\ta = b \r\n\t\tb = c \r\n\treturn b "
    },
    {
        "number": 170,
        "prompt": "Write a function to find sum of the numbers in a list between the indices of a specified range.\ndef sum_range_list(list1, m, n):                                                                                                                                                                                                \n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    return sum(list1[m:n+1])\n\n# Example usage:\nlist1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nprint(sum_range_list(list1, 2, 5)) # Output: 22 (sum of numbers from index 2 to 5)\nprint(sum_range_list(list1, 4, 7)) # Output: 27 (sum of numbers from index 4 to 7) ",
        "generated_testcode": "assert sum_range_list([1, 2, 3, 4, 5, 6, 7, 8, 9], 2, 5) == 18\n",
        "test": "assert sum_range_list( [2,1,5,6,8,3,4,9,10,11,8,12],8,10)==29\nassert sum_range_list( [2,1,5,6,8,3,4,9,10,11,8,12],5,7)==16\nassert sum_range_list( [2,1,5,6,8,3,4,9,10,11,8,12],7,10)==38",
        "canonical_solution": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \r\n    sum_range = 0                                                                                                                                                                                                         \r\n    for i in range(m, n+1, 1):                                                                                                                                                                                        \r\n        sum_range += list1[i]                                                                                                                                                                                                  \r\n    return sum_range   "
    },
    {
        "number": 171,
        "prompt": "Write a function to find the perimeter of a pentagon.\ndef perimeter_pentagon(a):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    return 5 * a\n\n# Test the function with the example values\nprint(perimeter_pentagon(7)) # Output: 35\nprint(perimeter_pentagon(5)) # Output: 25\n\n# Write a function to find the area of a pentagon using the formula\ndef area_pentagon(a, h):\n    return 0.5 * a * h\n\n# Test the function with the example values\nprint(area_pentagon(7, 5)) # Output: 10.5\nprint(area_pentagon(10, 6)) # Output: 30\n\n# Create a function to find the volume of a cone\ndef volume_cone(r, h):\n    return 1/3 * math.pi * r**2 * h\n\n# Test the function with the example values\nprint(volume_cone(3, 5)) # Output: 94.24777795783171546\nprint(volume_cone(5, 6)) # Output: 215.0410618249226406\n\n# Create a function to find the surface area of a cone\ndef surface_area_cone(r, h):\n    return math.pi * r * (r**2 + h**2)**0.5\n\n# Test the function with the example values\nprint(surface_area_cone(3, 5)) # Output: 95.015",
        "generated_testcode": "assert perimeter_pentagon(5) == 15\n",
        "test": "assert perimeter_pentagon(5)==25\nassert perimeter_pentagon(10)==50\nassert perimeter_pentagon(15)==75",
        "canonical_solution": "import math\r\ndef perimeter_pentagon(a):\r\n  perimeter=(5*a)\r\n  return perimeter"
    },
    {
        "number": 172,
        "prompt": "Write a function to find the occurence of characters 'std' in the given string 1. list item 1. list item 1. list item 2. list item 2. list item 2. list item\ndef count_occurance(s):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    count_std = 0\n    for i in range(len(s)):\n        if s[i:i+3] == \"std\":\n            count_std += 1\n    return count_std\n\n# Testing the function\nprint(count_occurance(\"hello std world std\"))  # Output: 2\nprint(count_occurance(\"hello world\"))       # Output: 0\nprint(count_occurance(\"standard\"))         # Output: 1\nprint(count_occurance(\"standardization\"))   # Output: 1\nprint(count_occurance(\"standardization of string\")) # Output: 1\nprint(count_occurance(\"standardization of string in python\")) # Output: 2 \n\n# Output: 2 ",
        "generated_testcode": "assert count_occurance(\"standard\") == 1\n",
        "test": "assert count_occurance(\"letstdlenstdporstd\") == 3\nassert count_occurance(\"truststdsolensporsd\") == 1\nassert count_occurance(\"makestdsostdworthit\") == 2",
        "canonical_solution": "def count_occurance(s):\r\n  count=0\r\n  for i in range(len(s)):\r\n    if (s[i]== 's' and s[i+1]=='t' and s[i+2]== 'd'):\r\n      count = count + 1\r\n  return count"
    },
    {
        "number": 173,
        "prompt": "Write a function to remove everything except alphanumeric characters from a string.\ndef remove_splchar(text): \n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    import re\n    return re.sub(r'\\W+', '', text)\n\n# Test the function\nprint(remove_splchar(\"Hello, World! This is a test string. 123\"))\n\n# Output: \"HelloWorldThisisateststring123\" ",
        "generated_testcode": "assert remove_splchar(\"Hello, World!\") == \"HelloWorld\"\n",
        "test": "assert remove_splchar('python  @#&^%$*program123')==('pythonprogram123')\nassert remove_splchar('python %^$@!^&*()  programming24%$^^()    language')==('pythonprogramming24language')\nassert remove_splchar('python   ^%&^()(+_)(_^&67)                  program')==('python67program')",
        "canonical_solution": "import re\r\ndef remove_splchar(text): \r\n pattern = re.compile('[\\W_]+')\r\n return (pattern.sub('', text))"
    },
    {
        "number": 174,
        "prompt": "Write a function to group a sequence of key-value pairs into a dictionary of lists.\ndef group_keyvalue(l):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    d = {}\n    for key, value in l:\n        if key in d:\n            d[key].append(value)\n        else:\n            d[key] = [value]\n    return d\n\n# Example usage:\nl = [(\"a\", 1), (\"b\", 2), (\"a\", 3), (\"c\", 4), (\"b\", 5)]\ngroup_keyvalue(l)  # Output: {\"a\": [1, 3], \"b\": [2, 5], \"c\": [4]}\n\n# A dictionary comprehension could also be used:\ndef group_keyvalue(l):\n    return {key: [value for k, value in l if key == k] for key, _ in l}\n\n# Example usage:\nl = [(\"a\", 1), (\"b\", 2), (\"a\", 3), (\"c\", 4), (\"b\", 5)]\ngroup_keyvalue(l)  # Output: {\"a\": [1, 3], \"b\": [2, 5], \"c\": [4]}\n\n# Note that this solution assumes that the keys are unique. If there are duplicates, only the last value will be kept in the output. ",
        "generated_testcode": "assert group_keyvalue([\"a:1\", \"b:2\", \"a:3\", \"c:4\", \"b:5\", \"a:6\"]) == {\"a\": [\"1\", \"3\", \"6\"], \"b\": [\"2\", \"5\"], \"c\": [\"4\"]}\n",
        "test": "assert group_keyvalue([('yellow', 1), ('blue', 2), ('yellow', 3), ('blue', 4), ('red', 1)])=={'yellow': [1, 3], 'blue': [2, 4], 'red': [1]}\nassert group_keyvalue([('python', 1), ('python', 2), ('python', 3), ('python', 4), ('python', 5)])=={'python': [1,2,3,4,5]}\nassert group_keyvalue([('yellow',100), ('blue', 200), ('yellow', 300), ('blue', 400), ('red', 100)])=={'yellow': [100, 300], 'blue': [200, 400], 'red': [100]}",
        "canonical_solution": "def group_keyvalue(l):\r\n    result = {}\r\n    for k, v in l:\r\n         result.setdefault(k, []).append(v)\r\n    return result"
    },
    {
        "number": 175,
        "prompt": "Write a function to verify validity of a string of parentheses.\ndef is_valid_parenthese( str1):\n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    stack = []\n    for char in str1:\n        if char in [\"(\", \"{\", \"[\"]:\n            stack.append(char)\n        elif char in [\")\", \"}\", \"]\"]:\n            if not stack or not (char == \")\" and stack[-1] == \"(\" or char == \"}\" and stack[-1] == \"{\" or char == \"]\" and stack[-1] == \"[\"):\n                return False\n            stack.pop()\n    return not stack\n\n# Test the function\nstr1 = \"{[]()}\"\nif is_valid_parenthese(str1):\n    print(\"The parentheses are valid.\")\nelse:\n    print(\"The parentheses are invalid.\")\n\n# Output: The parentheses are valid.\n\nstr2 = \"({[]})\"\nif is_valid_parenthese(str2):\n    print(\"The parentheses are valid.\")\nelse:\n    print(\"The parentheses are invalid.\")\n\n# Output: The parentheses are valid.\n\nstr3 = \"({[}\"\nif is_valid_parenthese(str3):\n    print(\"The parentheses are valid.\")\nelse:\n    print(\"The parentheses are invalid.\")\n\n# Output: The parentheses are invalid.\n\nstr4 = \"({[]])\"\nif is_valid_parenthese(str4):\n    print(\"The parentheses are valid.\")\nelse:\n    print(\"The parentheses are invalid.\")\n\n# Output: The parentheses are invalid. ",
        "generated_testcode": "assert is_valid_parenthese(\"()\") == True\n",
        "test": "assert is_valid_parenthese(\"(){}[]\")==True\nassert is_valid_parenthese(\"()[{)}\")==False\nassert is_valid_parenthese(\"()\")==True",
        "canonical_solution": "def is_valid_parenthese( str1):\r\n        stack, pchar = [], {\"(\": \")\", \"{\": \"}\", \"[\": \"]\"}\r\n        for parenthese in str1:\r\n            if parenthese in pchar:\r\n                stack.append(parenthese)\r\n            elif len(stack) == 0 or pchar[stack.pop()] != parenthese:\r\n                return False\r\n        return len(stack) == 0"
    },
    {
        "number": 176,
        "prompt": "Write a function to find the perimeter of a triangle.\ndef perimeter_triangle(a,b,c):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    return a+b+c\n\n# Test the function\nprint(perimeter_triangle(3,4,5)) # 12\n\n# Define a function to calculate the area of a triangle.\ndef area_triangle(a,b,c):\n    s = (a+b+c)/2\n    return (s*(s-a)*(s-b)*(s-c)) ** 0.5\n\n# Test the function\nprint(area_triangle(3,4,5)) # 6.0\n\n# Define a function to check if a triangle is valid.\ndef is_triangle(a,b,c):\n    return a+b>c and a+c>b and b+c>a\n\n# Test the function\nprint(is_triangle(3,4,5)) # True\nprint(is_triangle(3,4,10)) # False\n\n# Define a function to find the maximum side length of a triangle.\ndef max_side(a,b,c):\n    return max(a,b,c)\n\n# Test the function\nprint(max_side(3,4,5)) # 5\n\n# Define a function to calculate the semi-perimeter of a triangle.\ndef semi_perimeter_triangle(a,b,c):\n    return (a+b+c)/2\n\n# Test the function\nprint(semi_perimeter_triangle(3,4,5)) # 6.0\n\n# Define a function to calculate the area of a triangle using Heron'",
        "generated_testcode": "assert perimeter_triangle(3,4,5) == 12\n",
        "test": "assert perimeter_triangle(10,20,30)==60\nassert perimeter_triangle(3,4,5)==12\nassert perimeter_triangle(25,35,45)==105",
        "canonical_solution": "def perimeter_triangle(a,b,c):\r\n  perimeter=a+b+c\r\n  return perimeter"
    },
    {
        "number": 177,
        "prompt": "Write a python function to find two distinct numbers such that their lcm lies within the given range.\ndef answer(L,R): \n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    result = []\n    for i in range(L, R+1): \n        for j in range(i+1, R+1): \n            lcm = i*j\n            if lcm > R: \n                break\n            hcf = gcd(i,j) \n            if lcm == i*j: \n                result.append([i, j]) \n    return result\n\ndef gcd(a,b): \n    if(b == 0): \n        return a \n    else: \n        return gcd(b, a%b) \n\nL = int(input())\nR = int(input())\nprint(answer(L,R))\n\n# example test case: \n# input: \n# 10 20\n# output: \n# [[10, 12], [12, 15], [15, 20]] \n# explanation: The LCM of any two numbers between 10 and 20 is 10*12, 10*15, or 15*20. \n# However, since the LCM of 10 and 12 is not in the range of 10 to 20, we only return the LCMs of 12 and 15, 15 and 20. ",
        "generated_testcode": "assert answer(1, 10) == (2, 3)\n",
        "test": "assert answer(3,8) == (3,6)\nassert answer(2,6) == (2,4)\nassert answer(1,3) == (1,2)",
        "canonical_solution": "def answer(L,R): \r\n    if (2 * L <= R): \r\n        return (L ,2*L)\r\n    else: \r\n        return (-1) "
    },
    {
        "number": 178,
        "prompt": "Write a function to search some literals strings in a string.\ndef string_literals(patterns,text):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    for pattern in patterns:\n        if pattern in text:\n            return True\n    return False\n\n# Test the function with some sample inputs\nprint(string_literals(['cat','dog'],'The cat in the hat')) # True\nprint(string_literals(['cat','fish'],'The cat in the hat')) # True\nprint(string_literals(['cat','fish'],'The dog is in the hat')) # False\nprint(string_literals(['dog'],'The cat in the hat')) # False\nprint(string_literals(['mouse','fish'],'The cat in the hat')) # True\nprint(string_literals([],'The cat in the hat')) # False ",
        "generated_testcode": "assert string_literals(['hello', 'world'], 'hello world') == True\n",
        "test": "assert string_literals(['language'],'python language')==('Matched!')\nassert string_literals(['program'],'python language')==('Not Matched!')\nassert string_literals(['python'],'programming language')==('Not Matched!')",
        "canonical_solution": "import re\r\ndef string_literals(patterns,text):\r\n  for pattern in patterns:\r\n     if re.search(pattern,  text):\r\n       return ('Matched!')\r\n     else:\r\n       return ('Not Matched!')"
    },
    {
        "number": 179,
        "prompt": "Write a function to find if the given number is a keith number or not.\ndef is_num_keith(x): \n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    num = str(x)\n    for i in range(len(num)):\n        if num.count(num[i]) != int(num[i]):\n            return False\n    return True ",
        "generated_testcode": "assert is_num_keith(1) == True\n",
        "test": "assert is_num_keith(14) == True\nassert is_num_keith(12) == False\nassert is_num_keith(197) == True",
        "canonical_solution": "def is_num_keith(x): \r\n\tterms = [] \r\n\ttemp = x \r\n\tn = 0 \r\n\twhile (temp > 0): \r\n\t\tterms.append(temp % 10) \r\n\t\ttemp = int(temp / 10) \r\n\t\tn+=1 \r\n\tterms.reverse() \r\n\tnext_term = 0 \r\n\ti = n \r\n\twhile (next_term < x): \r\n\t\tnext_term = 0 \r\n\t\tfor j in range(1,n+1): \r\n\t\t\tnext_term += terms[i - j] \r\n\t\tterms.append(next_term) \r\n\t\ti+=1 \r\n\treturn (next_term == x) "
    },
    {
        "number": 180,
        "prompt": "Write a function to calculate distance between two points using latitude and longitude.\ndef distance_lat_long(slat,slon,elat,elon):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    from math import radians, cos, sin, asin, sqrt, atan2\n    r = 6371 #Radius of the earth in km\n    slat = radians(slat)\n    slon = radians(slon)\n    elat = radians(elat)\n    elon = radians(elon)\n\n    dlat = abs(slat - elat)\n    dlon = abs(slon - elon)\n    a = sin(dlat/2)**2 + cos(slat)*cos(elat)*sin(dlon/2)**2\n    c = 2*atan2(sqrt(a), sqrt(1-a))\n    distance = r*c\n    return distance\n\n# Sample Usage:\n# distance_lat_long(19.10931895,72.8676787, 19.11137961,72.8769322) # Output: 3.91845407171255776\n\n# Here, the function takes in the latitude and longitude of two points as input and returns the distance between them in km. ",
        "generated_testcode": "assert distance_lat_long(37.77493,-122.4194,37.8716,-122.2583) == 10.34\n\n",
        "test": "assert distance_lat_long(23.5,67.5,25.5,69.5)==12179.372041317429\nassert distance_lat_long(10.5,20.5,30.5,40.5)==6069.397933300514\nassert distance_lat_long(10,20,30,40)==6783.751974994595",
        "canonical_solution": "from math import radians, sin, cos, acos\r\ndef distance_lat_long(slat,slon,elat,elon):\r\n dist = 6371.01 * acos(sin(slat)*sin(elat) + cos(slat)*cos(elat)*cos(slon - elon))\r\n return dist"
    },
    {
        "number": 181,
        "prompt": "Write a function to find the longest common prefix in the given set of strings.\ndef common_prefix_util(str1, str2): \n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    i = 0\n    while i < len(str1) and i < len(str2) and str1[i] == str2[i]: \n        i += 1\n    return str1[:i] \n\ndef longest_common_prefix(strs): \n    if not strs: \n        return \"\"\n    prefix = strs[0]\n    for i in range(1, len(strs)): \n        prefix = common_prefix_util(prefix, strs[i]) \n        if not prefix: \n            break\n    return prefix \n\n# Example usage:\nstrs = [\"flower\", \"flow\", \"flight\"] \nprint(\"Longest common prefix:\", longest_common_prefix(strs)) # Output: \"fl\" ",
        "generated_testcode": "assert common_prefix_util(\"flower\", \"flow\") == \"fl\"\n",
        "test": "assert common_prefix([\"tablets\", \"tables\", \"taxi\", \"tamarind\"], 4) == 'ta'\nassert common_prefix([\"apples\", \"ape\", \"april\"], 3) == 'ap'\nassert common_prefix([\"teens\", \"teenager\", \"teenmar\"], 3) == 'teen'",
        "canonical_solution": "def common_prefix_util(str1, str2): \r\n\tresult = \"\"; \r\n\tn1 = len(str1) \r\n\tn2 = len(str2) \r\n\ti = 0\r\n\tj = 0\r\n\twhile i <= n1 - 1 and j <= n2 - 1: \r\n\t\tif (str1[i] != str2[j]): \r\n\t\t\tbreak\r\n\t\tresult += str1[i] \r\n\t\ti += 1\r\n\t\tj += 1\r\n\treturn (result) \r\ndef common_prefix (arr, n): \r\n\tprefix = arr[0] \r\n\tfor i in range (1, n): \r\n\t\tprefix = common_prefix_util(prefix, arr[i]) \r\n\treturn (prefix) "
    },
    {
        "number": 182,
        "prompt": "Write a function to find uppercase, lowercase, special character and numeric values using regex.\ndef find_character(string):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    uppercase = 0\n    lowercase = 0\n    special_char = 0\n    numeric = 0\n    for i in string:\n        if i.isupper():\n            uppercase += 1\n        elif i.islower():\n            lowercase += 1\n        elif i.isdigit():\n            numeric += 1\n        else:\n            special_char += 1\n    return uppercase, lowercase, special_char, numeric\n\n\n# Test the function with an example string\nprint(find_character(\"Hello, World1\"))\n# Output: (1, 8, 0, 1)\n\n# Test the function with another example string\nprint(find_character(\"This is a test string!@#\"))\n# Output: (1, 10, 2, 0)\n\n# Test the function with an empty string\nprint(find_character(\"\"))\n# Output: (0, 0, 0, 0)\n\n# Test the function with a string with only special characters\nprint(find_character(\"!@#$%^&*()_+-=\")\n# Output: (0, 0, 11, 0) ",
        "generated_testcode": "assert find_character(\"Hello123\") == (1, 4, 0, 3)\n",
        "test": "assert find_character(\"ThisIsGeeksforGeeks\") == (['T', 'I', 'G', 'G'], ['h', 'i', 's', 's', 'e', 'e', 'k', 's', 'f', 'o', 'r', 'e', 'e', 'k', 's'], [], [])\nassert find_character(\"Hithere2\") == (['H'], ['i', 't', 'h', 'e', 'r', 'e'], ['2'], [])\nassert find_character(\"HeyFolks32\") == (['H', 'F'], ['e', 'y', 'o', 'l', 'k', 's'], ['3', '2'], [])",
        "canonical_solution": "import re\r\ndef find_character(string):\r\n  uppercase_characters = re.findall(r\"[A-Z]\", string) \r\n  lowercase_characters = re.findall(r\"[a-z]\", string) \r\n  numerical_characters = re.findall(r\"[0-9]\", string) \r\n  special_characters = re.findall(r\"[, .!?]\", string) \r\n  return uppercase_characters, lowercase_characters, numerical_characters, special_characters"
    },
    {
        "number": 183,
        "prompt": "Write a function to count all the distinct pairs having a difference of k in any array.\ndef count_pairs(arr, n, k):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[j] - arr[i] == k:\n                count += 1\n    return count\n\n# Driver code\narr = [1, 5, 7, 5, 9, 3, 9, 4]\nn = len(arr)\nk = 4\nprint(count_pairs(arr, n, k))\n\n\n# Time Complexity: O(n^2) ",
        "generated_testcode": "assert count_pairs([1, 2, 3, 4, 5, 6, 7], 3, 2) == 2\n",
        "test": "assert count_pairs([1, 5, 3, 4, 2], 5, 3) == 2\nassert count_pairs([8, 12, 16, 4, 0, 20], 6, 4) == 5\nassert count_pairs([2, 4, 1, 3, 4], 5, 2) == 3",
        "canonical_solution": "def count_pairs(arr, n, k):\r\n  count=0;\r\n  for i in range(0,n):\r\n    for j in range(i+1, n):\r\n      if arr[i] - arr[j] == k or arr[j] - arr[i] == k:\r\n        count += 1\r\n  return count"
    },
    {
        "number": 184,
        "prompt": "Write a function to find all the values in a list that are greater than a specified number.\ndef greater_specificnum(list,num):\n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    result = []\n    for i in list:\n        if i > num:\n            result.append(i)\n    return result\n\n# Test the function with an example list and number\nprint(greater_specificnum([1, 5, 7, 3, 9, 2, 8, 4], 5))\n\n# Output: [7, 9, 8]\n\n# Another example\nprint(greater_specificnum([-2, -5, -10, -7, -3, -8], -6))\n\n# Output: [] ",
        "generated_testcode": "assert greater_specificnum([1,2,3,4,5,6,7,8,9,10], 5) == [6,7,8,9,10]\n",
        "test": "assert greater_specificnum([220, 330, 500],200)==True\nassert greater_specificnum([12, 17, 21],20)==False\nassert greater_specificnum([1,2,3,4],10)==False",
        "canonical_solution": "def greater_specificnum(list,num):\r\n greater_specificnum=all(x >= num for x in list)\r\n return greater_specificnum"
    },
    {
        "number": 185,
        "prompt": "Write a function to find the focus of a parabola.\ndef parabola_focus(a, b, c): \n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    focus = -b/(2*a) \n    return focus \n\n# Find the vertex of a parabola \ndef parabola_vertex(a, b, c, focus): \n    x_vertex = -b/(2*a) \n    y_vertex = -1/2*a*(x_vertex*x_vertex) + c \n    return x_vertex, y_vertex \n\n# Find the equation of a parabola \ndef parabola_eq(a, b, c, focus): \n    vertex = parabola_vertex(a, b, c, focus) \n    eq = \"y = \" + str(a) + \"x^2 + \" + str(b) + \"x + \" + str(c) + \"  and focus = (\" + str(focus) + \",0)\"\n    return eq \n\n# Get input from user \na = float(input(\"Enter coefficient a: \")) \nb = float(input(\"Enter coefficient b: \")) \nc = float(input(\"Enter coefficient c: \")\n\n# Find the focus \nfocus = parabola_focus(a, b, c) \n\n# Find the equation of the parabola \neq = parabola_eq(a, b, c, focus) \nprint(\"Parabola equation: \", eq) \n\n# Find the vertex of the parabola \nx_vertex, y_vertex = parabola_vertex(",
        "generated_testcode": "assert parabola_focus(1, 10, -15) == 1\n",
        "test": "assert parabola_focus(5,3,2)==(-0.3, 1.6)\nassert parabola_focus(9,8,4)==(-0.4444444444444444, 2.25)\nassert parabola_focus(2,4,6)==(-1.0, 4.125)",
        "canonical_solution": "def parabola_focus(a, b, c): \r\n  focus= (((-b / (2 * a)),(((4 * a * c) - (b * b) + 1) / (4 * a))))\r\n  return focus"
    },
    {
        "number": 186,
        "prompt": "Write a function to search some literals strings in a string by using regex.\ndef check_literals(text, patterns):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    for pattern in patterns:\n        if re.search(pattern, text):\n            print(f\"Found {pattern} in the text\")\n        else:\n            print(f\"Didn't find {pattern} in the text\")\n\n\n# Example usage:\ntext = \"The quick brown fox jumps over the lazy dog\"\npatterns = [\"quick\", \"brown\", \"over\"]\ncheck_literals(text, patterns) # Output: Found quick in the text\n                            #         Found brown in the text\n                            #         Found over in the text\n\n# or\ntext = \"The quick brown fox jumps over the lazy dog\"\npatterns = [\"cat\", \"dog\", \"fish\"]\ncheck_literals(text, patterns) # Output: Didn't find cat in the text\n                            #         Didn't find dog in the text\n                            #         Found fish in the text\n\n# or\ntext = \"The quick brown fox jumps over the lazy dog\"\npatterns = [\"^The\", \"dog$\", \"jumps\"]\ncheck_literals(text, patterns) # Output: Found ^The in the text\n                            #         Didn't find dog$ in the text\n                            #         Found jumps in the text ",
        "generated_testcode": "assert check_literals(\"Hello, world!\", [\"hello\", \"world\"]) == True\n",
        "test": "assert check_literals('The quick brown fox jumps over the lazy dog.',['fox']) == 'Matched!'\nassert check_literals('The quick brown fox jumps over the lazy dog.',['horse']) == 'Not Matched!'\nassert check_literals('The quick brown fox jumps over the lazy dog.',['lazy']) == 'Matched!'",
        "canonical_solution": "import re\r\ndef check_literals(text, patterns):\r\n  for pattern in patterns:\r\n    if re.search(pattern,  text):\r\n        return ('Matched!')\r\n    else:\r\n        return ('Not Matched!')"
    },
    {
        "number": 187,
        "prompt": "Write a function to find the longest common subsequence for the given two sequences.\ndef longest_common_subsequence(X, Y, m, n): \n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    dp = [[0] * (n + 1) for _ in range(m + 1)] \n    for i in range(m + 1): \n        for j in range(n + 1): \n            if i == 0 or j == 0: \n                dp[i][j] = 0\n            elif X[i-1] == Y[j-1]: \n                dp[i][j] = 1 + dp[i-1][j-1] \n            else: \n                dp[i][j] = max(dp[i-1][j], dp[i][j-1]) \n    return dp[m][n] \n\ndef print_longest_common_subsequence(X, Y, m, n): \n    i, j = m, n\n    lcs = [] \n    while i > 0 and j > 0: \n        if X[i-1] == Y[j-1]: \n            lcs.append(X[i-1]) \n            i -= 1\n            j -= 1\n        elif dp[i-1][j] > dp[i][j-1]: \n            i -= 1\n        else: \n            j -= 1\n    lcs = ''.join(lcs[::-1]) \n    return lcs \n\nX = input()\nY = input()\nm = len(X) \nn = len(Y) ",
        "generated_testcode": "assert longest_common_subsequence([1, 2, 3, 4, 5], [2, 4, 6, 8], 4, 4) == 2\n",
        "test": "assert longest_common_subsequence(\"AGGTAB\" , \"GXTXAYB\", 6, 7) == 4\nassert longest_common_subsequence(\"ABCDGH\" , \"AEDFHR\", 6, 6) == 3\nassert longest_common_subsequence(\"AXYT\" , \"AYZX\", 4, 4) == 2",
        "canonical_solution": "def longest_common_subsequence(X, Y, m, n): \r\n    if m == 0 or n == 0: \r\n       return 0 \r\n    elif X[m-1] == Y[n-1]: \r\n       return 1 + longest_common_subsequence(X, Y, m-1, n-1) \r\n    else: \r\n       return max(longest_common_subsequence(X, Y, m, n-1), longest_common_subsequence(X, Y, m-1, n))"
    },
    {
        "number": 188,
        "prompt": "Write a python function to check whether the given number can be represented by product of two squares or not.\ndef prod_Square(n):\n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    for i in range(1, int(n**0.5)+1):\n        if n%i == 0:\n            if (int(n**0.5) == i):\n                return True\n            elif (int(n**0.5) == n//i):\n                return True\n            elif (int(n**0.5) == (n//i)**2):\n                return True\n            elif (i**2) * (n//i)**2 == n:\n                return True\n    return False\nprint(prod_Square(9))\nprint(prod_Square(16))\nprint(prod_Square(10))\nprint(prod_Square(18))\nprint(prod_Square(25))\nprint(prod_Square(28))\nprint(prod_Square(36))\n\n# Output:\n# True\n# True\n# True\n# True\n# True\n# True\n# False\n\n# Time Complexity: O(sqrt(n))\n# Space Complexity: O(1)\n\n# Test Cases:\n# Input: \n# 9\n# Output: True\n# Explanation: 9 can be represented as the product of two squares 3*3 = 9.\n\n# Input:\n# 16\n# Output: True\n# Explanation: 16 can be represented as the product of two squares 4*4 = 16.\n\n# Input:\n# 10\n# Output: True\n#",
        "generated_testcode": "assert prod_Square(12) == True\n",
        "test": "assert prod_Square(25) == False\nassert prod_Square(30) == False\nassert prod_Square(16) == True",
        "canonical_solution": "def prod_Square(n):\r\n    for i in range(2,(n) + 1):\r\n        if (i*i < (n+1)):\r\n            for j in range(2,n + 1):\r\n                if ((i*i*j*j) == n):\r\n                    return True;\r\n    return False;"
    },
    {
        "number": 189,
        "prompt": "Write a python function to find the first missing positive number.\ndef first_Missing_Positive(arr,n): \n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    # Create a boolean array of size n+1 and initialize all elements as True\n    is_present = [True] * (n+1) \n    # Traverse through the array and mark the visited elements as False\n    for i in range(n): \n        if (arr[i] > 0 and arr[i] <= n and arr[i] != i+1): \n            is_present[arr[i]] = False\n    # Traverse through the array again and find the first index that is True\n    for i in range(n+1): \n        if (is_present[i] == True): \n            return i\n    return n+1\n# Test the function \narr = [3, 4, -1, 1, 1, 1, 2, 3, 2, 5, 5] \nn = len(arr) \nprint(first_Missing_Positive(arr, n)) \n# Output: 4 ",
        "generated_testcode": "assert first_Missing_Positive([3, 4, -1, 1, 1, 1, 2, 3, 2, 5, 4], 8) == 6\n",
        "test": "assert first_Missing_Positive([1,2,3,-1,5],5) == 4\nassert first_Missing_Positive([0,-1,-2,1,5,8],6) == 2\nassert first_Missing_Positive([0,1,2,5,-8],5) == 3",
        "canonical_solution": "def first_Missing_Positive(arr,n): \r\n    ptr = 0\r\n    for i in range(n):\r\n        if arr[i] == 1:\r\n            ptr = 1\r\n            break\r\n    if ptr == 0:\r\n        return(1)\r\n    for i in range(n):\r\n        if arr[i] <= 0 or arr[i] > n:\r\n            arr[i] = 1\r\n    for i in range(n):\r\n        arr[(arr[i] - 1) % n] += n\r\n    for i in range(n):\r\n        if arr[i] <= n:\r\n            return(i + 1)\r\n    return(n + 1)"
    },
    {
        "number": 190,
        "prompt": "Write a python function to count the number of integral co-ordinates that lie inside a square.\ndef count_Intgral_Points(x1,y1,x2,y2): \n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    count = 0\n    for i in range(x1,x2+1):\n        for j in range(y1,y2+1):\n            if i == x1 or i == x2 or j == y1 or j == y2:\n                continue\n            else:\n                count += 1\n    return count\n\nx1 = int(input(\"Enter the value of x1: \"))\ny1 = int(input(\"Enter the value of y1: \"): \nx2 = int(input(\"Enter the value of x2: \"))\ny2 = int(input(\"Enter the value of y2: \")\nprint(\"Number of integral points inside the given square: \", count_Intgral_Points(x1,y1,x2,y2)) ",
        "generated_testcode": "assert count_Intgral_Points(0,0,2,2) == 4\n",
        "test": "assert count_Intgral_Points(1,1,4,4) == 4\nassert count_Intgral_Points(1,2,1,2) == 1\nassert count_Intgral_Points(4,2,6,4) == 1",
        "canonical_solution": "def count_Intgral_Points(x1,y1,x2,y2): \r\n    return ((y2 - y1 - 1) * (x2 - x1 - 1)) "
    },
    {
        "number": 191,
        "prompt": "Write a function to check whether the given month name contains 30 days or not.\ndef check_monthnumber(monthname3):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": true,
        "answer": "    month_dict = {'January':31, 'February':28, 'March':31, 'April':30, 'May':31, 'June':30, 'July':31, 'August':31, 'September':30, 'October':31, 'November':30, 'December':31}\n    for key in month_dict:\n        if monthname3 == key:\n            return True\n    return False\n\n# Test the function with the input value\nprint(check_monthnumber('July')) # True\nprint(check_monthnumber('February')) # False\nprint(check_monthnumber('April')) # True\nprint(check_monthnumber('December')) # True\nprint(check_monthnumber('January')) # True\nprint(check_monthnumber('Test')) # False\n\n# Write a function to convert celsius to fahrenheit\ndef celsius_to_fahrenheit(celsius):\n    fahrenheit = (celsius * 9/5) + 32\n    return fahrenheit\n\n# Test the function with an example value\nprint(celsius_to_fahrenheit(20)) # 68\n\n# Write a function to convert fahrenheit to celsius\ndef fahrenheit_to_celsius(fahrenheit):\n    celsius = (fahrenheit - 32) * 5/9\n    return celsius\n\n# Test the function",
        "generated_testcode": "assert check_monthnumber(\"January\") == True\n",
        "test": "assert check_monthnumber(\"February\")==False\nassert check_monthnumber(\"June\")==True\nassert check_monthnumber(\"April\")==True",
        "canonical_solution": "def check_monthnumber(monthname3):\r\n  if monthname3 ==\"April\" or monthname3== \"June\" or monthname3== \"September\" or monthname3== \"November\":\r\n    return True\r\n  else:\r\n    return False"
    },
    {
        "number": 192,
        "prompt": "Write a python function to check whether a string has atleast one letter and one number.\ndef check_String(str): \n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    count_letter = 0\n    count_digit = 0\n    for i in str: \n        if i.isalpha(): \n            count_letter += 1\n        elif i.isdigit(): \n            count_digit += 1\n    return count_letter > 0 and count_digit > 0\n  \n# Test the function \nstr = \"aB12c3y4u\"\nif (check_String(str)): \n    print(\"The string has atleast one letter and one number\") \nelse: \n    print(\"The string does not have atleast one letter and one number\") ",
        "generated_testcode": "assert check_String(\"Hello123\") == True\n",
        "test": "assert check_String('thishasboth29') == True\nassert check_String('python') == False\nassert check_String ('string') == False",
        "canonical_solution": "def check_String(str): \r\n    flag_l = False\r\n    flag_n = False\r\n    for i in str: \r\n        if i.isalpha(): \r\n            flag_l = True  \r\n        if i.isdigit(): \r\n            flag_n = True\r\n    return flag_l and flag_n "
    },
    {
        "number": 193,
        "prompt": "Write a function to remove the duplicates from the given tuple.\ndef remove_tuple(test_tup):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    return tuple(set(test_tup))\n\n# test the function\ntest_tup = (1, 2, 2, 3, 4, 5, 3, 1)\nprint(remove_tuple(test_tup))\n# output should be (1, 2, 3, 4, 5)\n",
        "generated_testcode": "assert remove_tuple(('a', 'b', 'c', 'a', 'd', 'c') == ('a', 'b', 'c', 'd')\n\n# Output: ('a', 'b', 'c', 'd')\n\n",
        "test": "assert remove_tuple((1, 3, 5, 2, 3, 5, 1, 1, 3)) == (1, 2, 3, 5)\nassert remove_tuple((2, 3, 4, 4, 5, 6, 6, 7, 8, 8)) == (2, 3, 4, 5, 6, 7, 8)\nassert remove_tuple((11, 12, 13, 11, 11, 12, 14, 13)) == (11, 12, 13, 14)",
        "canonical_solution": "def remove_tuple(test_tup):\r\n  res = tuple(set(test_tup))\r\n  return (res) "
    },
    {
        "number": 194,
        "prompt": "Write a python function to convert octal number to decimal number.\ndef octal_To_Decimal(n):  \n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    decimal = 0  \n    base = 1\n    while (n != 0):  \n        last_digit = n % 10  \n        decimal += last_digit * base  \n        base = base * 8  \n        n = n // 10  \n    return decimal  \n  \n# Driver code  \noctal = 12345  \nprint(f\"Octal Equivalent of {octal} is {octal_To_Decimal(octal)} in Decimal\") ",
        "generated_testcode": "assert octal_To_Decimal(10) == 8\n",
        "test": "assert octal_To_Decimal(25) == 21\nassert octal_To_Decimal(30) == 24\nassert octal_To_Decimal(40) == 32",
        "canonical_solution": "def octal_To_Decimal(n):  \r\n    num = n; \r\n    dec_value = 0; \r\n    base = 1; \r\n    temp = num; \r\n    while (temp): \r\n        last_digit = temp % 10; \r\n        temp = int(temp / 10); \r\n        dec_value += last_digit*base; \r\n        base = base * 8; \r\n    return dec_value; "
    },
    {
        "number": 195,
        "prompt": "Write a python function to find the first position of an element in a sorted array.\ndef first(arr,x,n): \n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": true,
        "answer": "    low = 0\n    high = n-1\n    result = -1\n    while low <= high and arr[low] <= x and arr[high] >= x: \n        mid = low + (high - low) // 2\n        if arr[mid] == x: \n            result = mid \n            high = mid - 1\n        elif arr[mid] < x: \n            low = mid + 1\n        else: \n            high = mid - 1\n    return result \n\narr = [ 2, 3, 4, 4, 4, 5, 6, 6, 7, 7, 7, 8, 9, 9 ] \nx = 6\nn = len(arr) \nprint(\"First position of\", x, \"is\", first(arr, x, n)) \n\n# Output: First position of 6 is 4 ",
        "generated_testcode": "assert first([1,2,3,4,4,5,6,7,8],4,6) == 3\n",
        "test": "assert first([1,2,3,4,5,6,6],6,6) == 5\nassert first([1,2,2,2,3,2,2,4,2],2,9) == 1\nassert first([1,2,3],1,3) == 0",
        "canonical_solution": "def first(arr,x,n): \r\n    low = 0\r\n    high = n - 1\r\n    res = -1  \r\n    while (low <= high):\r\n        mid = (low + high) // 2 \r\n        if arr[mid] > x:\r\n            high = mid - 1\r\n        elif arr[mid] < x:\r\n            low = mid + 1\r\n        else:\r\n            res = mid\r\n            high = mid - 1\r\n    return res"
    },
    {
        "number": 196,
        "prompt": "Write a function to remove all the tuples with length k.\ndef remove_tuples(test_list, K):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    result = []\n    for i in test_list:\n        if len(i) != K:\n            result.append(i)\n    return result\n\ntest_list = [(1, 2, 3), (4, 5), (6, 7, 8, 9), (10, 11, 12, 13)]\nK = 2\nprint(remove_tuples(test_list, K))  # Output: [(4, 5), (10, 11, 12, 13)]\n\n# Explanation:\n# The function loops through each tuple in the list, checks if the length of the tuple is not equal to K, and appends it to the result list.\n# In this case, only the tuples with length 2 (4, 5) and 4 (10, 11, 12, 13) will be removed, leaving only (6, 7, 8, 9) which is not removed. ",
        "generated_testcode": "assert remove_tuples(test_list, 3) == [('a', 'b', 'c', 'd'), ('e', 'f', 'g', 'h')]\n",
        "test": "assert remove_tuples([(4, 5), (4, ), (8, 6, 7), (1, ), (3, 4, 6, 7)] , 1) == [(4, 5), (8, 6, 7), (3, 4, 6, 7)]\nassert remove_tuples([(4, 5), (4,5), (6, 7), (1, 2, 3), (3, 4, 6, 7)] ,2) == [(1, 2, 3), (3, 4, 6, 7)]\nassert remove_tuples([(1, 4, 4), (4, 3), (8, 6, 7), (1, ), (3, 6, 7)] , 3) == [(4, 3), (1,)]",
        "canonical_solution": "def remove_tuples(test_list, K):\r\n  res = [ele for ele in test_list if len(ele) != K]\r\n  return (res) "
    },
    {
        "number": 197,
        "prompt": "Write a function to perform the exponentiation of the given two tuples.\ndef find_exponentio(test_tup1, test_tup2):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] ** test_tup2[i],)\n    return result_tup\n\n# test the function\ntest_tup1 = (2, 3, 4)\ntest_tup2 = (5, 6, 7)\nprint(find_exponentio(test_tup1, test_tup2)) # output: (32, 729, 21878888)\n",
        "generated_testcode": "assert find_exponentio((2, 3, 4), (5, 6, 7)) == (32, 16807, 4096)\n",
        "test": "assert find_exponentio((10, 4, 5, 6), (5, 6, 7, 5)) == (100000, 4096, 78125, 7776)\nassert find_exponentio((11, 5, 6, 7), (6, 7, 8, 6)) == (1771561, 78125, 1679616, 117649)\nassert find_exponentio((12, 6, 7, 8), (7, 8, 9, 7)) == (35831808, 1679616, 40353607, 2097152)",
        "canonical_solution": "def find_exponentio(test_tup1, test_tup2):\r\n  res = tuple(ele1 ** ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\r\n  return (res)\r\n"
    },
    {
        "number": 198,
        "prompt": "Write a function to find the largest triangle that can be inscribed in an ellipse.\ndef largest_triangle(a,b): \n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    from math import sqrt\n    c = sqrt(a**2-b**2)\n    s = (a+b+c)/2\n    area = sqrt(s*(s-a)*(s-b)*(s-c))\n    return area\n\nprint(largest_triangle(3,4)) # Output: 3.0\n\n# Test the function with different inputs\nprint(largest_triangle(4,3)) # Output: 3.0\nprint(largest_triangle(5,5)) # Output: 6.0\nprint(largest_triangle(6,12)) # Output: 12.0 ",
        "generated_testcode": "assert largest_triangle(3,4) == 3\n",
        "test": "assert largest_triangle(4,2)==10.392304845413264\nassert largest_triangle(5,7)==4.639421805988064\nassert largest_triangle(9,1)==105.2220865598093",
        "canonical_solution": "import math\r\ndef largest_triangle(a,b): \r\n    if (a < 0 or b < 0): \r\n        return -1 \r\n    area = (3 * math.sqrt(3) * pow(a, 2)) / (4 * b);  \r\n    return area "
    },
    {
        "number": 199,
        "prompt": "Write a python function to find highest power of 2 less than or equal to given number.\ndef highest_Power_of_2(n): \n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    p = 1\n    while(p <= n): \n        p *= 2\n    return p // 2\n  \n# Driver program to test above function \nn = 13\nprint(\"Highest power of 2 less than or equal to\", n, \"is\", highest_Power_of_2(n)) ",
        "generated_testcode": "assert highest_Power_of_2(10) == 8\n",
        "test": "assert highest_Power_of_2(10) == 8\nassert highest_Power_of_2(19) == 16\nassert highest_Power_of_2(32) == 32",
        "canonical_solution": "def highest_Power_of_2(n): \r\n    res = 0; \r\n    for i in range(n, 0, -1):  \r\n        if ((i & (i - 1)) == 0): \r\n            res = i; \r\n            break;      \r\n    return res; "
    },
    {
        "number": 200,
        "prompt": "Write a function to find all index positions of the maximum values in a given list.\ndef position_max(list1):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    positions = []\n    max_val = list1[0]\n    for i in range(len(list1)):\n        if list1[i] > max_val:\n            max_val = list1[i]\n            positions = [i]\n        elif list1[i] == max_val:\n            positions.append(i)\n    return positions\n\n# test the function\nlist1 = [1, 3, 5, 5, 7, 9, 9, 9, 12]\nprint(position_max(list1))  # should return [2, 4, 5]\nlist2 = [1, 2, 3, 4, 5, 5, 6]\nprint(position_max(list2))  # should return [4]\nlist3 = [1]\nprint(position_max(list3))  # should return [0]\nlist4 = []\nprint(position_max(list4))  # should return []\nlist5 = [1, 2, 2, 3, 4, 5, 6, 7]\nprint(position_max(list5))  # should return [5] ",
        "generated_testcode": "assert position_max([1, 2, 3, 4, 5, 5, 6, 5, 7, 8, 9, 9]) == [3, 4, 6, 7]\n",
        "test": "assert position_max([12,33,23,10,67,89,45,667,23,12,11,10,54])==[7]\nassert position_max([1,2,2,2,4,4,4,5,5,5,5])==[7,8,9,10]\nassert position_max([2,1,5,6,8,3,4,9,10,11,8,12])==[11]",
        "canonical_solution": "def position_max(list1):\r\n    max_val = max(list1)\r\n    max_result = [i for i, j in enumerate(list1) if j == max_val]\r\n    return max_result"
    },
    {
        "number": 201,
        "prompt": "Write a python function to check whether the elements in a list are same or not.\ndef chkList(lst): \n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    return lst[1:] == lst[:-1]\n\nlst = [1,2,3,4,5,6,7,8,9,10]\nprint(chkList(lst)) ",
        "generated_testcode": "assert chkList([1, 2, 3, 4, 5]) == False\n",
        "test": "assert chkList(['one','one','one']) == True\nassert chkList(['one','Two','Three']) == False\nassert chkList(['bigdata','python','Django']) == False",
        "canonical_solution": "def chkList(lst): \r\n    return len(set(lst)) == 1"
    },
    {
        "number": 202,
        "prompt": "Write a function to remove even characters in a string.\ndef remove_even(str1):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    new_str = \"\"\n    for i in str1:\n        if ord(i) % 2 != 0:\n            new_str += i\n    return new_str\n\n# Test the function with an example string\nprint(remove_even(\"hello world\"))  # Output: \"h lwrld\"\nprint(remove_even(\"Python\"))      # Output: \"Phtn\"\nprint(remove_even(\"\"))           # Output: \"\"\nprint(remove_even(\"123456789\"))   # Output: \"1357\" ",
        "generated_testcode": "assert remove_even(\"hello\") == \"hlo\"\n",
        "test": "assert remove_even(\"python\")==(\"pto\")\nassert remove_even(\"program\")==(\"porm\")\nassert remove_even(\"language\")==(\"lnug\")",
        "canonical_solution": "def remove_even(str1):\r\n str2 = ''\r\n for i in range(1, len(str1) + 1):\r\n    if(i % 2 != 0):\r\n        str2 = str2 + str1[i - 1]\r\n return str2"
    },
    {
        "number": 203,
        "prompt": "Write a python function to find the hamming distance between given two integers.\ndef hamming_Distance(n1,n2) : \n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    x = n1 ^ n2\n    set_bits = 0\n    while x > 0: \n        set_bits += x & 1\n        x >>= 1\n    return set_bits \n\nn1 = 11\nn2 = 13\nprint(hamming_Distance(n1,n2)) ",
        "generated_testcode": "assert hamming_Distance(1, 4) == 2\n",
        "test": "assert hamming_Distance(4,8) == 2\nassert hamming_Distance(2,4) == 2\nassert hamming_Distance(1,2) == 2",
        "canonical_solution": "def hamming_Distance(n1,n2) : \r\n    x = n1 ^ n2  \r\n    setBits = 0\r\n    while (x > 0) : \r\n        setBits += x & 1\r\n        x >>= 1\r\n    return setBits  "
    },
    {
        "number": 204,
        "prompt": "Write a python function to count the occurrence of a given character in a string.\ndef count(s,c) : \n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    count = 0\n    for i in s :\n        if i == c :\n            count = count + 1\n    return count\n\ns = input(\"Enter a string: \")\nc = input(\"Enter a character to count: \")\nprint(\"Occurrence of\",c,\"is\",count(s,c))\n\n# Example usage:\n# Input:\n# Enter a string: Hello world\n# Enter a character to count: l\n# Output:\n# Occurrence of l is 3\n",
        "generated_testcode": "assert count(\"hello world\", \"l\") == 3\n",
        "test": "assert count(\"abcc\",\"c\") == 2\nassert count(\"ababca\",\"a\") == 3\nassert count(\"mnmm0pm\",\"m\") == 4",
        "canonical_solution": "def count(s,c) : \r\n    res = 0 \r\n    for i in range(len(s)) : \r\n        if (s[i] == c): \r\n            res = res + 1\r\n    return res "
    },
    {
        "number": 205,
        "prompt": "Write a function to find the inversions of tuple elements in the given tuple list.\ndef inversion_elements(test_tup):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    count = 0\n    for i in range(len(test_tup)):\n        for j in range(i+1, len(test_tup)):\n            if test_tup[i] > test_tup[j]:\n                count += 1\n    return count\n\n# Test case\ntest_tup = (4, 2, 1, 7, 5, 9, 3)\nprint(inversion_elements(test_tup)) # should return 4\n\n# Explanation: The inversions in the tuple are (4,2), (4,1), (4,7), (4,5), (4,3), (2,1), (2,7), (2,5), (2,3), (7,5), (7,3), (5,3) which is 10 elements in total\n# Therefore, the function should return 10, which is the count of inversions in the tuple. ",
        "generated_testcode": "assert inversion_elements((1, 2, 3, 4, 5, 6, 7, 8, 9) == 0\n",
        "test": "assert inversion_elements((7, 8, 9, 1, 10, 7)) == (-8, -9, -10, -2, -11, -8)\nassert inversion_elements((2, 4, 5, 6, 1, 7)) == (-3, -5, -6, -7, -2, -8)\nassert inversion_elements((8, 9, 11, 14, 12, 13)) == (-9, -10, -12, -15, -13, -14)",
        "canonical_solution": "def inversion_elements(test_tup):\r\n  res = tuple(list(map(lambda x: ~x, list(test_tup))))\r\n  return (res) "
    },
    {
        "number": 206,
        "prompt": "Write a function to perform the adjacent element concatenation in the given tuples.\ndef concatenate_elements(test_tup):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    result = \"\"\n    for i in range(len(test_tup) - 1):\n        result += str(test_tup[i]) + str(test_tup[i+1])\n    return result\n\n# Test the function with the given example\ntest_tup = (1, 2, 3, 4, 5, 6, 7, 8, 9)\nprint(concatenate_elements(test_tup))  # Output: \"12345678\"\n\n# Test the function with another tuple\ntest_tup = (\"a\", \"b\", \"c\", \"d\", \"e\", \"f\")\nprint(concatenate_elements(test_tup))  # Output: \"abcdef\"\n\n# Test the function with a single element tuple\ntest_tup = (\"A\",)\nprint(concatenate_elements(test_tup))  # Output: \"A\"\n\n# Test the function with an empty tuple\ntest_tup = ()\nprint(concatenate_elements(test_tup))  # Output: \"\"\n\n# Test the function with a tuple containing non-string elements\ntest_tup = (1, \"a\", 2, \"b\", 3, \"c\", 4)\nprint(concatenate_elements(test_tup))  # Output: \"1a2b3c\" ",
        "generated_testcode": "assert concatenate_elements((1, 2, 3, 4, 5, 6, 7, 8, 9) == (12, 34, 56, 78)\n",
        "test": "assert concatenate_elements((\"DSP \", \"IS \", \"BEST \", \"FOR \", \"ALL \", \"UTS\")) == ('DSP IS ', 'IS BEST ', 'BEST FOR ', 'FOR ALL ', 'ALL UTS')\nassert concatenate_elements((\"RES \", \"IS \", \"BEST \", \"FOR \", \"ALL \", \"QESR\")) == ('RES IS ', 'IS BEST ', 'BEST FOR ', 'FOR ALL ', 'ALL QESR')\nassert concatenate_elements((\"MSAM\", \"IS \", \"BEST \", \"FOR \", \"ALL \", \"SKD\")) == ('MSAMIS ', 'IS BEST ', 'BEST FOR ', 'FOR ALL ', 'ALL SKD')",
        "canonical_solution": "def concatenate_elements(test_tup):\r\n  res = tuple(i + j for i, j in zip(test_tup, test_tup[1:]))\r\n  return (res) "
    },
    {
        "number": 207,
        "prompt": "Write a function to count the longest repeating subsequences such that the two subsequences don\u2019t have same string characters at same positions.\ndef find_longest_repeating_subseq(str): \n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": true,
        "answer": "    n = len(str) \n    dp = [[0] * n for _ in range(n)] \n    ans = 0\n\n    for i in range(n): \n        dp[i][i] = 1\n\n    for l in range(2, n+1): \n        for i in range(n-l+1): \n            j = i + l - 1\n            if str[i] != str[j]: \n                dp[i][j] = max(dp[i+1][j], dp[i][j-1])\n            else: \n                dp[i][j] = dp[i+1][j-1] + 2\n            ans = max(ans, dp[i][j]) \n\n    return ans \n\n\n# Test the function with an example string \nstr = \"aabcd\"\nprint(\"Length of the longest repeating subsequences with no same characters at same positions is\", find_longest_repeating_subseq(str)) \n\n# Output: 3 ",
        "generated_testcode": "assert find_longest_repeating_subseq(\"abcabc\") == 3\n",
        "test": "assert find_longest_repeating_subseq(\"AABEBCDD\") == 3\nassert find_longest_repeating_subseq(\"aabb\") == 2\nassert find_longest_repeating_subseq(\"aab\") == 1",
        "canonical_solution": "def find_longest_repeating_subseq(str): \r\n\tn = len(str) \r\n\tdp = [[0 for k in range(n+1)] for l in range(n+1)] \r\n\tfor i in range(1, n+1): \r\n\t\tfor j in range(1, n+1): \r\n\t\t\tif (str[i-1] == str[j-1] and i != j): \r\n\t\t\t\tdp[i][j] = 1 + dp[i-1][j-1] \r\n\t\t\telse: \r\n\t\t\t\tdp[i][j] = max(dp[i][j-1], dp[i-1][j]) \r\n\treturn dp[n][n]"
    },
    {
        "number": 208,
        "prompt": "Write a function to check the given decimal with a precision of 2 by using regex.\ndef is_decimal(num):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    pattern = r'^[-+]?[0-9]*\\.[0-9]{1,2}$'\n    return bool(re.match(pattern, num))\n\n# Test the function with some test cases\nprint(is_decimal(\"1.5\")) # True\nprint(is_decimal(\"-3.75\")) # True\nprint(is_decimal(\"1.234\")) # False\nprint(is_decimal(\"1\")) # False\nprint(is_decimal(\"-2\")) # False\nprint(is_decimal(\"-3.000\")) # True\nprint(is_decimal(\"1.2345\")) # False\nprint(is_decimal(\"1.01\")) # True\nprint(is_decimal(\"0.01\")) # True\nprint(is_decimal(\"1e2\")) # False\nprint(is_decimal(\"1.23e4\")) # False\nprint(is_decimal(\"3.14159\")) # False\nprint(is_decimal(\"+3.14159\")) # True\n\n# Alternatively, you can use the following function\ndef is_decimal(num):\n    pattern = r'^[-+]?\\d*\\.\\d{1,2}$'\n    return bool(re.match(pattern, num))\n\n# Test the function with some test cases\nprint(is_decimal(\"1.5\")) # True\nprint(is_decimal(\"-3.75\")) # True\nprint(",
        "generated_testcode": "assert is_decimal(\"123.45\") == True\n",
        "test": "assert is_decimal('123.11') == True\nassert is_decimal('0.21') == True\nassert is_decimal('123.1214') == False",
        "canonical_solution": "import re\r\ndef is_decimal(num):\r\n  num_fetch = re.compile(r\"\"\"^[0-9]+(\\.[0-9]{1,2})?$\"\"\")\r\n  result = num_fetch.search(num)\r\n  return bool(result)"
    },
    {
        "number": 209,
        "prompt": "Write a function to delete the smallest element from the given heap and then insert a new item.\ndef heap_replace(heap,a):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    if len(heap) == 0:\n        return heap\n    elif len(heap) == 1:\n        if a < heap[0]:\n            return [a]\n        else:\n            return heap\n    else:\n        smallest = heap[0]\n        heap.pop(0)\n        heapq.heapify(heap)\n        heapq.heappush(heap,a)\n        return heap\n    \n#Example usage:\nheap = [5, 1, 12, 2, 7, 9, 3]\nheapq.heapify(heap)\nprint(heap)\nheap_replace(heap,8)\nprint(heap) # Output: [8, 1, 12, 2, 7, 9, 5]\nheap_replace(heap,4)\nprint(heap) # Output: [4, 1, 12, 2, 7, 9, 5] ",
        "generated_testcode": "assert heap_replace([1,2,3,4,5], 6) == [2,3,4,5]\n",
        "test": "assert heap_replace( [25, 44, 68, 21, 39, 23, 89],21)==[21, 25, 23, 44, 39, 68, 89]\nassert heap_replace([25, 44, 68, 21, 39, 23, 89],110)== [23, 25, 68, 44, 39, 110, 89]\nassert heap_replace([25, 44, 68, 21, 39, 23, 89],500)==[23, 25, 68, 44, 39, 500, 89]",
        "canonical_solution": "import heapq as hq\r\ndef heap_replace(heap,a):\r\n  hq.heapify(heap)\r\n  hq.heapreplace(heap, a)\r\n  return heap"
    },
    {
        "number": 210,
        "prompt": "Write a function to check that the given string contains only a certain set of characters(in this case a-z, a-z and 0-9) by using regex.\ndef is_allowed_specific_char(string):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    import re\n    pattern = re.compile('[^a-zA-Z0-9]')\n    if not pattern.search(string):\n        return True\n    else:\n        return False\n\n# Test cases\nprint(is_allowed_specific_char(\"abcde12345\")) # True\nprint(is_allowed_specific_char(\"abcde12345!\")) # False\nprint(is_allowed_specific_char(\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\")) # False\nprint(is_allowed_specific_char(\"abcde12345#\")) # False\nprint(is_allowed_specific_char(\"12345\")) # True\nprint(is_allowed_specific_char(\"\")) # True\n\n# The function should return True if the string only contains a-z, A-Z, 0-9, and false otherwise. ",
        "generated_testcode": "assert is_allowed_specific_char(\"hello123\") == True\n",
        "test": "assert is_allowed_specific_char(\"ABCDEFabcdef123450\") == True\nassert is_allowed_specific_char(\"*&%@#!}{\") == False\nassert is_allowed_specific_char(\"HELLOhowareyou98765\") == True",
        "canonical_solution": "import re\r\ndef is_allowed_specific_char(string):\r\n    get_char = re.compile(r'[^a-zA-Z0-9.]')\r\n    string = get_char.search(string)\r\n    return not bool(string)"
    },
    {
        "number": 211,
        "prompt": "Write a python function to count numbers whose oth and nth bits are set.\ndef count_Num(n): \n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    count = 0\n    for i in range(1, n+1):\n        if (i & (1 << n-1) != 0) and (i & (1 << (n-2) != 0):\n            count += 1\n    return count\n\n# Test the function\nprint(count_Num(3)) # Output: 2\nprint(count_Num(5)) # Output: 4 ",
        "generated_testcode": "assert count_Num(5) == 3\n",
        "test": "assert count_Num(2) == 1\nassert count_Num(3) == 2\nassert count_Num(1) == 1",
        "canonical_solution": "def count_Num(n): \r\n    if (n == 1): \r\n        return 1\r\n    count = pow(2,n - 2) \r\n    return count "
    },
    {
        "number": 212,
        "prompt": "Write a python function to find the sum of fourth power of n natural numbers.\ndef fourth_Power_Sum(n): \n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    sum = 0\n    for i in range(1, n+1): \n        sum += i**4\n    return sum \n\n#take input from user\nn = int(input(\"Enter the number of terms you want to calculate: \"))\n\n#calling the function\nprint(f\"The sum of fourth power of {n} natural numbers is {fourth_Power_Sum(n)}\") ",
        "generated_testcode": "assert fourth_Power_Sum(5) == 225\n",
        "test": "assert fourth_Power_Sum(2) == 17\nassert fourth_Power_Sum(4) == 354\nassert fourth_Power_Sum(6) == 2275",
        "canonical_solution": "import math  \r\ndef fourth_Power_Sum(n): \r\n    sum = 0\r\n    for i in range(1,n+1) : \r\n        sum = sum + (i*i*i*i) \r\n    return sum"
    },
    {
        "number": 213,
        "prompt": "Write a function to perform the concatenation of two string tuples.\ndef concatenate_strings(test_tup1, test_tup2):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    result = ''\n    for string in test_tup1:\n        result += string\n    for string in test_tup2:\n        result += string\n    return result\n\n# Example usage:\ntest_tup1 = ('Hello', 'world', '!', 'How', 'are', 'you')\ntest_tup2 = ('I', 'am', 'doing', 'great', 'today.')\nprint(concatenate_strings(test_tup1, test_tup2)) # Output: 'Hello world!How are youI am doing great today.'\n\n# Test cases\nprint(concatenate_strings(('Hello', 'world', '!', 'How', 'are', 'you'), ('I', 'am', 'doing', 'great', 'today.')) # Output: 'Hello world!How are youI am doing great today.'\nprint(concatenate_strings(('Python', 'is', 'awesome', '!'), ('I', 'love', 'it.')) # Output: 'Python is awesome!I love it.'\nprint(concatenate_strings(('a', 'b', 'c'), ('d', 'e', 'f')) # Output: 'abcdef'\nprint(concatenate_strings(('', '', ''), ('', '')) # Output: ''\nprint(concatenate_strings(('', 'a'), ('', 'b')) # Output: 'ab' ",
        "generated_testcode": "assert concatenate_strings((\"hello\", \"world\"), (\"python\", \"programming\")) == (\"helloworld\", \"pythonprogramming\")\n",
        "test": "assert concatenate_strings((\"Manjeet\", \"Nikhil\", \"Akshat\"), (\" Singh\", \" Meherwal\", \" Garg\")) == ('Manjeet Singh', 'Nikhil Meherwal', 'Akshat Garg')\nassert concatenate_strings((\"Shaik\", \"Ayesha\", \"Sanya\"), (\" Dawood\", \" Begum\", \" Singh\")) == ('Shaik Dawood', 'Ayesha Begum', 'Sanya Singh')\nassert concatenate_strings((\"Harpreet\", \"Priyanka\", \"Muskan\"), (\"Kour\", \" Agarwal\", \"Sethi\")) == ('HarpreetKour', 'Priyanka Agarwal', 'MuskanSethi')",
        "canonical_solution": "def concatenate_strings(test_tup1, test_tup2):\r\n  res = tuple(ele1 + ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\r\n  return (res) "
    },
    {
        "number": 214,
        "prompt": "Write a function to convert radians to degrees.\ndef degree_radian(radian):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    degree = radian * 180 / 3.14159\n    return degree\n\nprint(degree_radian(3.14159))\n\n# Write a function to convert Fahrenheit to Celsius\ndef fahrenheit_to_celsius(fahrenheit):\n    celsius = (fahrenheit - 32) * 5/9\n    return celsius\n\nprint(fahrenheit_to_celsius(32))\n\n# Write a function to convert Celsius to Fahrenheit\ndef celsius_to_fahrenheit(celsius):\n    fahrenheit = (celsius * 9/5) + 32\n    return fahrenheit\n\nprint(celsius_to_fahrenheit(0))\n\n# Write a function to calculate the area of a rectangle\ndef area_rectangle(length, width):\n    area = length * width\n    return area\n\nprint(area_rectangle(5, 10))\n\n# Write a function to calculate the volume of a sphere\ndef volume_sphere(radius):\n    volume = 4/3 * 3.14159 * radius ** 3\n    return volume\n\nprint(volume_sphere(5))\n\n# Write a function to calculate the area of a circle\ndef area_circle(radius):\n    area = 3.14159 * radius ** 2\n    return area\n\nprint(area_circle(5))\n\n# Write a function",
        "generated_testcode": "assert degree_radian(3.14159) == 180\n",
        "test": "assert degree_radian(90)==5156.620156177409\nassert degree_radian(60)==3437.746770784939\nassert degree_radian(120)==6875.493541569878",
        "canonical_solution": "import math\r\ndef degree_radian(radian):\r\n degree = radian*(180/math.pi)\r\n return degree"
    },
    {
        "number": 215,
        "prompt": "Write a function to decode a run-length encoded given list.\ndef decode_list(alist):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    decoded = []\n    for i in alist:\n        if isinstance(i, list):\n            decoded.extend([i[1]] * i[0])\n        else:\n            decoded.append(i)\n    return decoded\n\n# example usage:\nalist = [2, [1, 2, 3], 4, [1, \"a\"]]\nprint(decode_list(alist))  # [1, 1, 2, 2, 3, 4, \"a\"]\n\n# test with empty list:\nprint(decode_list([]))  # []\n\n# test with single element:\nprint(decode_list(5))  # [5]\n\n# test with a list of strings:\nprint(decode_list([2, \"a\", \"b\", 3, \"c\"])  # [\"a\", \"b\", \"b\", \"c\", \"c\", \"c\"]\n\n# test with negative numbers:\nprint(decode_list([-2, \"a\"])  # []\n\n# test with mixed input:\nprint(decode_list([\"a\", 1, 2, [3, \"b\"], [4, \"c\"])  # [\"a\", 1, 2, \"b\", \"b\", \"b\", \"b\", \"b\", \"c\"]\n\n# test with nested lists:\nprint(decode_list([[2, [1, \"a\"], 3, [1, [2, \"b\"], 2, \"c\"]])  # [\"",
        "generated_testcode": "assert decode_list([(1, 'a'), (4, 'b'), (2, 'c')]) == ['a', 'b', 'b', 'b', 'b', 'b', 'c', 'c']\n",
        "test": "assert decode_list([[2, 1], 2, 3, [2, 4], 5,1])==[1,1,2,3,4,4,5,1]\nassert decode_list(['a', 'u', 't', 'o', 'm', 'a', 't', 'i', 'c', 'a', [2, 'l'], 'y'])==['a', 'u', 't', 'o', 'm', 'a', 't', 'i', 'c', 'a', 'l', 'l', 'y']\nassert decode_list(['p', 'y', 't', 'h', 'o', 'n'])==['p', 'y', 't', 'h', 'o', 'n']",
        "canonical_solution": "def decode_list(alist):\r\n    def aux(g):\r\n        if isinstance(g, list):\r\n            return [(g[1], range(g[0]))]\r\n        else:\r\n            return [(g, [0])]\r\n    return [x for g in alist for x, R in aux(g) for i in R]"
    },
    {
        "number": 216,
        "prompt": "Write a function to check if a nested list is a subset of another nested list.\ndef check_subset_list(list1, list2): \n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    for i in range(len(list1)): \n        if list1[i] not in list2: \n            return False\n    return True\n\n# Example usage: \nlist1 = [1, 2, [3, 4, [5, 6]]] \nlist2 = [1, 2, [3, 4, [5, 6, 7]]\n\nprint(check_subset_list(list1, list2)) # Output: False\n\nlist1 = [1, 2, [3, 4, [5, 6]] \nlist2 = [1, 2, [3, 4, [5, 6]]\n\nprint(check_subset_list(list1, list2)) # Output: True\n\nlist1 = [1, 2, [3, 4, [5, 6]] \nlist2 = [1, 2, [3, 4, [5, 6, [7, 8]]\n\nprint(check_subset_list(list1, list2)) # Output: False\n\nlist1 = [1, 2, [3, 4, [5, 6]] \nlist2 = [1, 2, [3, 4, [5, 6, 7], 8]\n\nprint(check_subset_list(list1, list2)) # Output: False\n\nlist1 = [1, 2, [3, 4, [5, 6]] \nlist2 = [1",
        "generated_testcode": "assert check_subset_list([1, 2, [3, 4], 5], [1, 2, 3, 4, 5]) == True\n",
        "test": "assert check_subset_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14],[[12, 18, 23, 25, 45], [7, 11, 19, 24, 28], [1, 5, 8, 18, 15, 16]])==False\nassert check_subset_list([[2, 3, 1], [4, 5], [6, 8]],[[4, 5], [6, 8]])==True\nassert check_subset_list([['a', 'b'], ['e'], ['c', 'd']],[['g']])==False",
        "canonical_solution": "def check_subset_list(list1, list2): \r\n    l1, l2 = list1[0], list2[0] \r\n    exist = True\r\n    for i in list2: \r\n        if i not in list1: \r\n            exist = False\r\n    return exist "
    },
    {
        "number": 217,
        "prompt": "Write a python function to find the first repeated character in a given string.\ndef first_Repeated_Char(str): \n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    for i in range(len(str)): \n        if str[i] in str[:i]: \n            return str[i] \n    return -1\n\n# Test the function \nstr = \"geeksforgeeks\"\nprint(\"First repeated character is:\", first_Repeated_Char(str)) \n\n# Output: First repeated character is: e\n\n# Time complexity: O(n^2)\n\n# To improve the time complexity, we can use a dictionary to check the first occurrence of each character in the string\ndef first_Repeated_Char(str): \n    d = {}\n    for i in str: \n        if i in d: \n            return i \n        else: \n            d[i] = True\n    return -1\n\n# Test the function \nstr = \"geeksforgeeks\"\nprint(\"First repeated character is:\", first_Repeated_Char(str)) \n\n# Output: First repeated character is: e\n# Time complexity: O(n)\n",
        "generated_testcode": "assert first_Repeated_Char(\"hello\") == \"l\"\n",
        "test": "assert first_Repeated_Char(\"Google\") == \"o\"\nassert first_Repeated_Char(\"data\") == \"a\"\nassert first_Repeated_Char(\"python\") == '\\0'",
        "canonical_solution": "def first_Repeated_Char(str): \r\n    h = {}\r\n    for ch in str:\r\n        if ch in h: \r\n            return ch;\r\n        else: \r\n            h[ch] = 0\r\n    return '\\0'"
    },
    {
        "number": 218,
        "prompt": "Write a python function to find the minimum operations required to make two numbers equal.\ndef min_Operations(A,B):  \n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    if A < B:\n        A, B = B, A\n    count = 0\n    while A != B:\n        if A % 2 == 0 and B % 2 == 0:\n            A = A // 2\n            B = B // 2\n        elif A % 2 == 1 and B % 2 == 0:\n            A -= 1\n        else:\n            B -= 1\n        count += 1\n    return count\n\n# Testing the function\nprint(min_Operations(10, 7)) # Output: 3\nprint(min_Operations(100, 45)) # Output: 5\nprint(min_Operations(1, 1)) # Output: 0\nprint(min_Operations(1, 7)) # Output: -1\n",
        "generated_testcode": "assert min_Operations(1, 1) == 0\n",
        "test": "assert min_Operations(2,4) == 1\nassert min_Operations(4,10) == 4\nassert min_Operations(1,4) == 3",
        "canonical_solution": "import math   \r\ndef min_Operations(A,B):  \r\n    if (A > B): \r\n        swap(A,B)  \r\n    B = B // math.gcd(A,B);  \r\n    return B - 1"
    },
    {
        "number": 219,
        "prompt": "Write a function to extract maximum and minimum k elements in the given tuple.\ndef extract_min_max(test_tup, K):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    min_max = sorted(test_tup)[:K] + sorted(test_tup, reverse=True)[:K]\n    return min_max\n\n\n# Test the function with sample data\ntest_tup = (1, 5, 3, 7, 2, 9, 4, 6, 8)\nK = 3\nprint(extract_min_max(test_tup, K)) # Output: [1, 2, 3, 9, 8, 7]\n\n# Time Complexity : O(n)\n# Space Complexity : O(k)\n\n# Explanation:\n# We first sort the tuple in ascending order and take the first k elements and then sort it in descending order and take the next k elements. ",
        "generated_testcode": "assert extract_min_max((1, 2, 3, 4, 5, 6, 7, 8, 9, 10), 3) == (1, 10)\n",
        "test": "assert extract_min_max((5, 20, 3, 7, 6, 8), 2) == (3, 5, 8, 20)\nassert extract_min_max((4, 5, 6, 1, 2, 7), 3) == (1, 2, 4, 5, 6, 7)\nassert extract_min_max((2, 3, 4, 8, 9, 11, 7), 4) == (2, 3, 4, 7, 8, 9, 11)",
        "canonical_solution": "\r\ndef extract_min_max(test_tup, K):\r\n  res = []\r\n  test_tup = list(test_tup)\r\n  temp = sorted(test_tup)\r\n  for idx, val in enumerate(temp):\r\n    if idx < K or idx >= len(temp) - K:\r\n      res.append(val)\r\n  res = tuple(res)\r\n  return (res) "
    },
    {
        "number": 220,
        "prompt": "Write a function to replace maximum n occurrences of spaces, commas, or dots with a colon.\ndef replace_max_specialchar(text,n):\n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    special_chars = [\",\",\".\",\" \"]\n    max_count = 0\n    for char in special_chars:\n        count = text.count(char)\n        if count > max_count:\n            max_count = count\n    \n    for i in range(n):\n        if max_count > 0:\n            text = text.replace(special_chars[i],\":\",1)\n            max_count -= 1\n    \n    return text\n\n# Test the function with sample input\nprint(replace_max_specialchar(\"Hello, world. How are you?\",2)) ",
        "generated_testcode": "assert replace_max_specialchar(\"Hello, world. This is a test. This is only a test.\", 2) == \"Hello: world: This is a test. This is only a test.\"\n",
        "test": "assert replace_max_specialchar('Python language, Programming language.',2)==('Python:language: Programming language.')\nassert replace_max_specialchar('a b c,d e f',3)==('a:b:c:d e f')\nassert replace_max_specialchar('ram reshma,ram rahim',1)==('ram:reshma,ram rahim')",
        "canonical_solution": "import re\r\ndef replace_max_specialchar(text,n):\r\n return (re.sub(\"[ ,.]\", \":\", text, n))"
    },
    {
        "number": 221,
        "prompt": "Write a python function to find the first even number in a given list of numbers.\ndef first_even(nums):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    for num in nums:\n        if num % 2 == 0:\n            return num\n    return None\n\n#Test cases\nprint(first_even([1, 3, 5, 7, 9, 10, 12, 8])) # Output: 10\nprint(first_even([1, 3, 5, 7, 9, 11, 13])) # Output: None\n\n# Define a function called \"find_evens\" that takes a list of numbers as input and returns a list of all even numbers in the list.\ndef find_evens(nums):\n    evens = []\n    for num in nums:\n        if num % 2 == 0:\n            evens.append(num)\n    return evens\n\n#Test cases\nprint(find_evens([1, 3, 5, 7, 9, 10, 12, 8])) # Output: [10, 8]\nprint(find_evens([1, 3, 5, 7, 9, 11, 13])) # Output: []\n\n# Define a function called \"find_odds\" that takes a list of numbers as input and returns a list of all odd numbers in the list.\ndef find_odds(nums):\n    odds = []\n    for num in nums:\n        if num % 2 != 0:\n            odds.append(num)\n    return odds\n\n",
        "generated_testcode": "assert first_even([1, 3, 5, 7, 9, 10, 12, 15]) == 10\n",
        "test": "assert first_even ([1, 3, 5, 7, 4, 1, 6, 8]) == 4\nassert first_even([2, 3, 4]) == 2\nassert first_even([5, 6, 7]) == 6",
        "canonical_solution": "def first_even(nums):\r\n    first_even = next((el for el in nums if el%2==0),-1)\r\n    return first_even"
    },
    {
        "number": 222,
        "prompt": "Write a function to check if all the elements in tuple have same data type or not.\ndef check_type(test_tuple):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    for i in test_tuple:\n        if type(i) != type(test_tuple[0]:\n            return False\n    return True\n\n#Example usage:\nprint(check_type((\"hello\", \"world\", \"python\")) #Output: True\nprint(check_type((1,2,3,\"hello\")) #Output: False\nprint(check_type((1.5,2.5,3.5)) #Output: True\nprint(check_type((\"hello\", \"world\", 10)) #Output: False\n\n#Time Complexity: O(n) where n is the length of the tuple. ",
        "generated_testcode": "assert check_type((1, 2, 3, 4, 5) == True)\n",
        "test": "assert check_type((5, 6, 7, 3, 5, 6) ) == True\nassert check_type((1, 2, \"4\") ) == False\nassert check_type((3, 2, 1, 4, 5) ) == True",
        "canonical_solution": "def check_type(test_tuple):\r\n  res = True\r\n  for ele in test_tuple:\r\n    if not isinstance(ele, type(test_tuple[0])):\r\n      res = False\r\n      break\r\n  return (res) "
    },
    {
        "number": 223,
        "prompt": "Write a function to check for majority element in the given sorted array.\ndef is_majority(arr, n, x):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    if x in arr:\n        return True\n    return False\n\n# Test the function with the sample input\narr = [1, 2, 3, 3, 4, 4, 4, 4, 5, 6]\nx = 3\nn = len(arr)\nif is_majority(arr, n, x):\n    print(\"Majority element present\")\nelse:\n    print(\"Majority element not present\")\n\n# Output: Majority element not present\n\n# Test the function with the sample input\narr = [1, 2, 2, 2, 3, 4, 4, 4, 5, 5]\nx = 2\nn = len(arr)\nif is_majority(arr, n, x):\n    print(\"Majority element present\")\nelse:\n    print(\"Majority element not present\")\n\n# Output: Majority element present\n\n# Test the function with the sample input\narr = [1, 1, 1, 2, 2, 3, 4, 4]\nx = 1\nn = len(arr)\nif is_majority(arr, n, x):\n    print(\"Majority element present\")\nelse:\n    print(\"Majority element not present\")\n\n# Output: Majority element present\n\n# Test the function with the sample input\narr = [1, 2, 3, 4, 5]\nx = ",
        "generated_testcode": "assert is_majority([1, 2, 3, 3, 4, 5], 5, 3) == True\n",
        "test": "assert is_majority([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\nassert is_majority([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\nassert is_majority([1, 1, 1, 2, 2], 5, 1) == True",
        "canonical_solution": "def is_majority(arr, n, x):\r\n\ti = binary_search(arr, 0, n-1, x)\r\n\tif i == -1:\r\n\t\treturn False\r\n\tif ((i + n//2) <= (n -1)) and arr[i + n//2] == x:\r\n\t\treturn True\r\n\telse:\r\n\t\treturn False\r\ndef binary_search(arr, low, high, x):\r\n\tif high >= low:\r\n\t\tmid = (low + high)//2 \r\n\t\tif (mid == 0 or x > arr[mid-1]) and (arr[mid] == x):\r\n\t\t\treturn mid\r\n\t\telif x > arr[mid]:\r\n\t\t\treturn binary_search(arr, (mid + 1), high, x)\r\n\t\telse:\r\n\t\t\treturn binary_search(arr, low, (mid -1), x)\r\n\treturn -1"
    },
    {
        "number": 224,
        "prompt": "Write a python function to count set bits of a given number.\ndef count_Set_Bits(n): \n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    count = 0\n    while n: \n        count += n & 1\n        n >>= 1\n    return count \n\n# example usage\nn = 10\nprint(\"The number of set bits in\", n, \"is\", count_Set_Bits(n)) ",
        "generated_testcode": "assert count_Set_Bits(12) == 2\n",
        "test": "assert count_Set_Bits(2) == 1\nassert count_Set_Bits(4) == 1\nassert count_Set_Bits(6) == 2",
        "canonical_solution": "def count_Set_Bits(n): \r\n    count = 0\r\n    while (n): \r\n        count += n & 1\r\n        n >>= 1\r\n    return count "
    },
    {
        "number": 225,
        "prompt": "Write a python function to find the minimum element in a sorted and rotated array.\ndef find_Min(arr,low,high): \n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    if high < low: \n        return arr[0] \n    if high == low: \n        return arr[high] \n  \n    mid = (low + high)//2\n    if mid < high and arr[mid] > arr[mid+1]: \n        return arr[mid+1] \n    if mid > low and arr[mid] < arr[mid-1]: \n        return arr[mid] \n  \n    if arr[low] <= arr[mid]: \n        return find_Min(arr, mid+1, high) \n    return find_Min(arr, low, mid-1) \n  \n# Driver code \narr = [4, 5, 6, 7, 8, 9, 10, 11, 2, 3] \nn = len(arr) \nprint(\"Minimum element is\", find_Min(arr, 0, n-1)) ",
        "generated_testcode": "assert find_Min([4,5,6,7,0,1,2],0,5) == 0\n",
        "test": "assert find_Min([1,2,3,4,5],0,4) == 1\nassert find_Min([4,6,8],0,2) == 4\nassert find_Min([2,3,5,7,9],0,4) == 2",
        "canonical_solution": "def find_Min(arr,low,high): \r\n    while (low < high): \r\n        mid = low + (high - low) // 2;   \r\n        if (arr[mid] == arr[high]): \r\n            high -= 1; \r\n        elif (arr[mid] > arr[high]): \r\n            low = mid + 1; \r\n        else: \r\n            high = mid; \r\n    return arr[high]; "
    },
    {
        "number": 226,
        "prompt": "Write a python function to remove the characters which have odd index values of a given string.\ndef odd_values_string(str):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    result = \"\"\n    for i in range(len(str)):\n        if i % 2 == 0:\n            result += str[i]\n    return result\n\n# Test the function with an example\nprint(odd_values_string(\"hello\"))\n# Output: \"hlo\"\n",
        "generated_testcode": "assert odd_values_string(\"Hello World\") == \"Hlo Wrd\"\n",
        "test": "assert odd_values_string('abcdef') == 'ace'\nassert odd_values_string('python') == 'pto'\nassert odd_values_string('data') == 'dt'",
        "canonical_solution": "def odd_values_string(str):\r\n  result = \"\" \r\n  for i in range(len(str)):\r\n    if i % 2 == 0:\r\n      result = result + str[i]\r\n  return result"
    },
    {
        "number": 227,
        "prompt": "Write a function to find minimum of three numbers.\ndef min_of_three(a,b,c): \n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    return min(a,b,c)\n\n# Example usage:\nprint(min_of_three(2,5,1))  # Output: 1\nprint(min_of_three(7,3,9))  # Output: 3\nprint(min_of_three(-1,0,1)) # Output: -1 ",
        "generated_testcode": "assert min_of_three(1,2,3) == 1\n",
        "test": "assert min_of_three(10,20,0)==0\nassert min_of_three(19,15,18)==15\nassert min_of_three(-10,-20,-30)==-30",
        "canonical_solution": "def min_of_three(a,b,c): \r\n      if (a <= b) and (a <= c): \r\n        smallest = a \r\n      elif (b <= a) and (b <= c): \r\n        smallest = b \r\n      else: \r\n        smallest = c \r\n      return smallest "
    },
    {
        "number": 228,
        "prompt": "Write a python function to check whether all the bits are unset in the given range or not.\ndef all_Bits_Set_In_The_Given_Range(n,l,r):  \n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    mask = (1<<l) - (1<<r)\n    return (n & mask == 0)\n\n# Test the function with the sample inputs\nn = 5 #binary representation 0000000101\nl = 2\nr = 4\nprint(all_Bits_Set_In_The_Give_Range(n,l,r)) # Output: True\nn = 5\nl = 0\nr = 1\nprint(all_Bits_Set_In_The_Give_Range(n,l,r)) # Output: False\nn = 7\nl = 1\nr = 4\nprint(all_Bits_Set_In_The_Give_Range(n,l,r)) # Output: False ",
        "generated_testcode": "assert all_Bits_Set_In_The_Given_Range(10,2,4) == False\n",
        "test": "assert all_Bits_Set_In_The_Given_Range(4,1,2) == True\nassert all_Bits_Set_In_The_Given_Range(17,2,4) == True\nassert all_Bits_Set_In_The_Given_Range(39,4,6) == False",
        "canonical_solution": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \r\n    num = (((1 << r) - 1) ^ ((1 << (l - 1)) - 1)) \r\n    new_num = n & num\r\n    if (new_num == 0): \r\n        return True\r\n    return False"
    },
    {
        "number": 229,
        "prompt": "Write a function to re-arrange the elements of the given array so that all negative elements appear before positive ones.\ndef re_arrange_array(arr, n):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    # Initialize two pointers, one pointing to the first positive element and the other pointing to the last negative element\n    pos_index = -1\n    neg_index = 0\n    temp = 0\n\n    for i in range(n):\n        if arr[i] < 0:\n            neg_index += 1\n        else:\n            pos_index += 1\n            arr[i], arr[pos_index] = arr[pos_index], arr[i]\n            # Swap negative element to the beginning of the array\n            while pos_index != i:\n                pos_index += 1\n                arr[i], arr[pos_index] = arr[pos_index], arr[i]\n    return arr\n\n\n# Testing the function\narr = [12, 11, -1, -2, 14, -3, 6, 8, -7, -5, 2, 16]\nn = len(arr)\nprint(\"Original Array:\", arr)\nprint(\"Re-arranged Array:\", re_arrange_array(arr, n))\n\n# Output: [12, 11, 14, 6, 8, 2, 16, -1, -2, -3, -7] ",
        "generated_testcode": "assert re_arrange_array([1, -2, 5, -3, 0, 7, -1, 8], 6) == [-2, -3, -1, 1, 0, 5, 7, 8]\n",
        "test": "assert re_arrange_array([-1, 2, -3, 4, 5, 6, -7, 8, 9], 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9]\nassert re_arrange_array([12, -14, -26, 13, 15], 5) == [-14, -26, 12, 13, 15]\nassert re_arrange_array([10, 24, 36, -42, -39, -78, 85], 7) == [-42, -39, -78, 10, 24, 36, 85]",
        "canonical_solution": "def re_arrange_array(arr, n):\r\n  j=0\r\n  for i in range(0, n):\r\n    if (arr[i] < 0):\r\n      temp = arr[i]\r\n      arr[i] = arr[j]\r\n      arr[j] = temp\r\n      j = j + 1\r\n  return arr"
    },
    {
        "number": 230,
        "prompt": "Write a function to replace blank spaces with any character in a string.\ndef replace_blank(str1,char):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    str1 = str1.replace(\" \",char)\n    return str1\n\n# test the function with an example\nprint(replace_blank(\"hello world\",\"-\")) # expected output \"hello-world\"\nprint(replace_blank(\"Python is awesome\",\"*\")) # expected output \"Python*is*awesome\"\nprint(replace_blank(\"   \",\"_\")) # expected output \"___\" ",
        "generated_testcode": "assert replace_blank(\"hello world\",\"_\") == \"hello_world\"\n",
        "test": "assert replace_blank(\"hello people\",'@')==(\"hello@people\")\nassert replace_blank(\"python program language\",'$')==(\"python$program$language\")\nassert replace_blank(\"blank space\",\"-\")==(\"blank-space\")",
        "canonical_solution": "def replace_blank(str1,char):\r\n str2 = str1.replace(' ', char)\r\n return str2"
    },
    {
        "number": 231,
        "prompt": "Write a function to find the maximum sum in the given right triangle of numbers.\ndef max_sum(tri, n): \n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    # create a list to store the sum of each row\n    row_sum = [0]*n \n    # initialize the sum of first row\n    row_sum[0] = tri[0][0]\n    # iterate over each row\n    for i in range(1, n): \n        # initialize the sum of current row to be the maximum of previous row and diagonal element\n        row_sum[i] = tri[i][0] + row_sum[i-1] \n        # iterate over each element of current row\n        for j in range(1, i+1): \n            # check if the diagonal element is greater\n            if tri[i][j] + row_sum[i-1] > row_sum[i]: \n                row_sum[i] = tri[i][j] + row_sum[i-1] \n            else: \n                # otherwise, add the current element to the maximum element of previous row\n                row_sum[i] += tri[i][j] \n    # return the maximum element of last row\n    return row_sum[-1] \n# Example usage:\ntri = [[1, 2, 3],\n       [4, 5, 6],\n       [7, 8, 9]] \nn = len(tri) \nprint(max_sum(tri, n)) # Output: 20\n\ntri = [[1, 2, 3, 4],\n       [5, 6, 7, 8],\n       [",
        "generated_testcode": "assert max_sum([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3) == 24\n",
        "test": "assert max_sum([[1], [2,1], [3,3,2]], 3) == 6\nassert max_sum([[1], [1, 2], [4, 1, 12]], 3) == 15 \nassert max_sum([[2], [3,2], [13,23,12]], 3) == 28",
        "canonical_solution": "def max_sum(tri, n): \r\n\tif n > 1: \r\n\t\ttri[1][1] = tri[1][1]+tri[0][0] \r\n\t\ttri[1][0] = tri[1][0]+tri[0][0] \r\n\tfor i in range(2, n): \r\n\t\ttri[i][0] = tri[i][0] + tri[i-1][0] \r\n\t\ttri[i][i] = tri[i][i] + tri[i-1][i-1] \r\n\t\tfor j in range(1, i): \r\n\t\t\tif tri[i][j]+tri[i-1][j-1] >= tri[i][j]+tri[i-1][j]: \r\n\t\t\t\ttri[i][j] = tri[i][j] + tri[i-1][j-1] \r\n\t\t\telse: \r\n\t\t\t\ttri[i][j] = tri[i][j]+tri[i-1][j] \r\n\treturn (max(tri[n-1]))"
    },
    {
        "number": 232,
        "prompt": "Write a function to get the n largest items from a dataset.\ndef larg_nnum(list1,n):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    list1.sort()\n    list1.reverse()\n    result=[]\n    for i in range(n):\n        result.append(list1[i])\n    return result\n\nlist1=[4,5,2,7,1,8,3,9]\nn=3\nprint(larg_nnum(list1,n))\n\n# Output: [8, 7, 5]\n\n# Time Complexity: O(nlogn)",
        "generated_testcode": "assert larg_nnum([1,2,3,4,5,6,7,8,9,10],3) == [8,9,10]\n",
        "test": "assert larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],2)==[100,90]\nassert larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],5)==[100,90,80,70,60]\nassert larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],3)==[100,90,80]",
        "canonical_solution": "import heapq\r\ndef larg_nnum(list1,n):\r\n largest=heapq.nlargest(n,list1)\r\n return largest"
    },
    {
        "number": 233,
        "prompt": "Write a function to find the lateral surface area of a cylinder.\ndef lateralsuface_cylinder(r,h):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    return 2*3.14*r*h + 2*3.14*r*r\n\nprint(lateralsuface_cylinder(5,10)) # output: 314.159\n\n#Write a function to find the volume of a cylinder\ndef volume_cylinder(r,h):\n    return 3.14*r*r*h\n\nprint(volume_cylinder(5,10)) # output: 785.0\n\n#Write a function to find the volume of a sphere\ndef volume_sphere(r):\n    return 4/3*3.14*r*r*r\n\nprint(volume_sphere(5)) #output: 523.6\n\n#Write a function to find the surface area of a sphere\ndef surface_sphere(r):\n    return 4*3.14*r*r\n\nprint(surface_sphere(5)) #output: 314.159\n\n#Write a function to find the area of a triangle\ndef triangle_area(a,b,c):\n    s=(a+b+c)/2\n    return (s*(s-a)*(s-b)*(s-c))**0.5\n\nprint(triangle_area(3,4,5)) #output: 6.0\n\n#Write a function to find the area of a rectangle\ndef rectangle_area(l,w):\n    return l*w\n",
        "generated_testcode": "assert lateralsuface_cylinder(3, 5) == 314.1592653589793936\n",
        "test": "assert lateralsuface_cylinder(10,5)==314.15000000000003\nassert lateralsuface_cylinder(4,5)==125.66000000000001\nassert lateralsuface_cylinder(4,10)==251.32000000000002",
        "canonical_solution": "def lateralsuface_cylinder(r,h):\r\n  lateralsurface= 2*3.1415*r*h\r\n  return lateralsurface"
    },
    {
        "number": 234,
        "prompt": "Write a function to find the volume of a cube.\ndef volume_cube(l):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    return l ** 3\n\n# Write a function to find the surface area of a cube.\ndef surface_cube(l):\n    return (6 * l ** 2)\n\n# Write a function to find the volume of a sphere.\ndef volume_sphere(r):\n    return (4/3) * 3.14159 * (r ** 3)\n\n# Write a function to find the surface area of a sphere.\ndef surface_sphere(r):\n    return (4 * 3.14159 * r ** 2)\n\n# Write a function to find the volume of a cone.\ndef volume_cone(r, h):\n    return (1/3) * 3.14159 * r ** 2 * h\n\n# Write a function to find the surface area of a cone.\ndef surface_cone(r, h):\n    return 3.14159 * r * (r + (h ** 2) ** 0.5)\n\n# Write a function to find the volume of a cylinder.\ndef volume_cylinder(r, h):\n    return 3.14159 * r ** 2 * h\n\n# Write a function to find the surface area of a cylinder.\ndef surface_cylinder(r, h):\n    return 2 * 3.14159 * r ** 2 + 2 * 3.14159 * r * h\n\n# Write a function",
        "generated_testcode": "assert volume_cube(3) == 27\n",
        "test": "assert volume_cube(3)==27\nassert volume_cube(2)==8\nassert volume_cube(5)==125",
        "canonical_solution": "def volume_cube(l):\r\n  volume = l * l * l\r\n  return volume"
    },
    {
        "number": 235,
        "prompt": "Write a python function to set all even bits of a given number.\ndef even_bit_set_number(n): \n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    return n | (n & (-n) + 1)\n\n# Test the function with a few examples\nprint(even_bit_set_number(0b100101)) # Output: 0b111110\nprint(even_bit_set_number(0b110100)) # Output: 0b111110\nprint(even_bit_set_number(0b001101)) # Output: 0b111101\nprint(even_bit_set_number(0b101010)) # Output: 0b111110\nprint(even_bit_set_number(0b100111)) # Output: 0b111111\nprint(even_bit_set_number(0b000011)) # Output: 0b11111\nprint(even_bit_set_number(0b110000)) # Output: 0b11101\nprint(even_bit_set_number(0b10001)) # Output: 0b11011\n",
        "generated_testcode": "assert even_bit_set_number(10) == 10\n",
        "test": "assert even_bit_set_number(10) == 10\nassert even_bit_set_number(20) == 30\nassert even_bit_set_number(30) == 30",
        "canonical_solution": "def even_bit_set_number(n): \r\n    count = 0;res = 0;temp = n \r\n    while(temp > 0): \r\n        if (count % 2 == 1): \r\n            res |= (1 << count)\r\n        count+=1\r\n        temp >>= 1\r\n    return (n | res) "
    },
    {
        "number": 236,
        "prompt": "Write a python function to count the maximum number of equilateral triangles that can be formed within a given equilateral triangle.\ndef No_of_Triangle(N,K):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    if N%3==0 and K%3==0:\n        return 0\n    elif K%3==0:\n        return N//3\n    else:\n        return (N//3)+1\n\nif __name__ == \"__main__\":\n    N = int(input(\"Enter the length of the equilateral triangle: \"))\n    K = int(input(\"Enter the length of the side of the equilateral triangle: \"))\n    print(\"Number of equilateral triangles: \",No_of_Triangle(N,K))\n\n#Example\n#Input:\n#Enter the length of the equilateral triangle: 15\n#Enter the length of the side of the equilateral triangle: 5\n#Output:\n#Number of equilateral triangles: 3\n\n#Time Complexity: O(1)\n#Space Complexity: O(1)\n\n# Test Cases\n#Example Test Case 1\n#Input:\n#Enter the length of the equilateral triangle: 15\n#Enter the length of the side of the equilateral triangle: 5\n#Output:\n#Number of equilateral triangles: 3\n\n#Example Test Case 2\n#Input:\n#Enter the length of the equilateral triangle: 12\n#Enter the length of the side of the equilateral triangle: 6\n#Output:\n#Number of equilateral triangles: 2\n\n#Example Test Case 3\n#",
        "generated_testcode": "assert No_of_Triangle(3,2) == 1\n",
        "test": "assert No_of_Triangle(4,2) == 7\nassert No_of_Triangle(4,3) == 3\nassert No_of_Triangle(1,3) == -1",
        "canonical_solution": "def No_of_Triangle(N,K):\r\n    if (N < K):\r\n        return -1;\r\n    else:\r\n        Tri_up = 0;\r\n        Tri_up = ((N - K + 1) *(N - K + 2)) // 2;\r\n        Tri_down = 0;\r\n        Tri_down = ((N - 2 * K + 1) *(N - 2 * K + 2)) // 2;\r\n        return Tri_up + Tri_down;"
    },
    {
        "number": 237,
        "prompt": "Write a function to check the occurrences of records which occur similar times in the given tuples.\ndef check_occurences(test_list):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    count_dict = {}\n    for tup in test_list:\n        if tup[1] not in count_dict:\n            count_dict[tup[1]] = 0\n        count_dict[tup[1]] += 1\n    return count_dict\n\n\ndef main():\n    test_list = [(1, 1), (2, 1), (3, 2), (4, 2), (5, 1), (6, 2), (7, 2), (8, 2), (9, 1), (10, 1), (11, 2)]\n    result = check_occurences(test_list)\n    print(result)\n\nif __name__ == \"__main__\":\n    main()\n    ",
        "generated_testcode": "assert check_occurences(test_list) == expected_output\n\n# test_list = [(1, 2, 3), (2, 3, 4), (3, 4, 5), (1, 2, 3), (2, 3, 4), (3, 4, 5), (1, 2, 3), (2, 3, 4), (3, 4, 5), (1, 2, 3), (2, 3, 4), (3, 4, 5)]\n# expected_output = {(1, 2, 3): 3, (2, 3, 4): 3, (3, 4, 5): 3}\n\n",
        "test": "assert check_occurences([(3, 1), (1, 3), (2, 5), (5, 2), (6, 3)] ) == {(1, 3): 2, (2, 5): 2, (3, 6): 1}\nassert check_occurences([(4, 2), (2, 4), (3, 6), (6, 3), (7, 4)] ) == {(2, 4): 2, (3, 6): 2, (4, 7): 1}\nassert check_occurences([(13, 2), (11, 23), (12, 25), (25, 12), (16, 23)] ) == {(2, 13): 1, (11, 23): 1, (12, 25): 2, (16, 23): 1}",
        "canonical_solution": "from collections import Counter \r\ndef check_occurences(test_list):\r\n  res = dict(Counter(tuple(ele) for ele in map(sorted, test_list)))\r\n  return  (res) "
    },
    {
        "number": 238,
        "prompt": "Write a python function to count number of non-empty substrings of a given string.\ndef number_of_substrings(str): \n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    n = len(str)\n    count = 0\n    for i in range(n): \n        for j in range(i, n): \n            if str[i:j+1] != '': \n                count += 1\n    return count \n  \n# Testing the function \nstring = 'python'\nprint(\"Number of non-empty substrings of\", string, \"are\", number_of_substrings(string)) \n  \n# Output: Number of non-empty substrings of python are 20 \n",
        "generated_testcode": "assert number_of_substrings(\"abc\") == 6\n",
        "test": "assert number_of_substrings(\"abc\") == 6\nassert number_of_substrings(\"abcd\") == 10\nassert number_of_substrings(\"abcde\") == 15",
        "canonical_solution": "def number_of_substrings(str): \r\n\tstr_len = len(str); \r\n\treturn int(str_len * (str_len + 1) / 2); "
    },
    {
        "number": 239,
        "prompt": "Write a function to find the number of possible sequences of length n such that each of the next element is greater than or equal to twice of the previous element but less than or equal to m.\ndef get_total_number_of_sequences(m,n): \n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    dp = [0]*(m+1)\n    dp[0] = 1\n    for i in range(1,n+1):\n        for j in range(1,m+1):\n            dp[j] = dp[j-1] + (i>j) * dp[j-2]\n    return dp[m]\n\n#Test Cases\nprint(get_total_number_of_sequences(10,3)) # Output: 10\nprint(get_total_number_of_sequences(10,4)) # Output: 18\nprint(get_total_number_of_sequences(20,3)) # Output: 40\nprint(get_total_number_of_sequences(20,4)) # Output: 52\n\n#Time Complexity : O(m*n)\n#Space Complexity : O(m)\n\n#Explanation:\n#We create a dp array of size m+1 to store the number of sequences that can be formed for the length n for each of the elements from 0 to m.\n#We start with initializing the first element as 1 and iterate through the remaining elements.\n#For each element, we add the number of sequences that can be formed using the previous element as the next element and also the number of sequences that can be formed using the previous two elements as the next two elements. ",
        "generated_testcode": "assert get_total_number_of_sequences(5,3) == 1\n",
        "test": "assert get_total_number_of_sequences(10, 4) == 4\nassert get_total_number_of_sequences(5, 2) == 6\nassert get_total_number_of_sequences(16, 3) == 84",
        "canonical_solution": "def get_total_number_of_sequences(m,n): \r\n\tT=[[0 for i in range(n+1)] for i in range(m+1)] \r\n\tfor i in range(m+1): \r\n\t\tfor j in range(n+1): \r\n\t\t\tif i==0 or j==0: \r\n\t\t\t\tT[i][j]=0\r\n\t\t\telif i<j: \r\n\t\t\t\tT[i][j]=0\r\n\t\t\telif j==1: \r\n\t\t\t\tT[i][j]=i \r\n\t\t\telse: \r\n\t\t\t\tT[i][j]=T[i-1][j]+T[i//2][j-1] \r\n\treturn T[m][n]"
    },
    {
        "number": 240,
        "prompt": "Write a function to replace the last element of the list with another list.\ndef replace_list(list1,list2):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    list1.pop()\n    for i in list2:\n        list1.append(i)\n    return list1\n\n# Test the function with the following example\nmy_list = [1, 2, 3, 4, 5]\nnew_list = [6, 7, 8]\nprint(replace_list(my_list, new_list))  # Output: [1, 2, 3, 6, 7, 8]\n\n# Test the function with an empty list\nmy_list = []\nnew_list = [1, 2, 3]\nprint(replace_list(my_list, new_list))  # Output: [1, 2, 3]\n\n# Test the function with a list of length 1\nmy_list = [1]\nnew_list = [2, 3]\nprint(replace_list(my_list, new_list))  # Output: [2, 3] ",
        "generated_testcode": "assert replace_list([1,2,3,4],[5,6,7]) == [1,2,3,5,6,7]\n",
        "test": "assert replace_list([1, 3, 5, 7, 9, 10],[2, 4, 6, 8])==[1, 3, 5, 7, 9, 2, 4, 6, 8]\nassert replace_list([1,2,3,4,5],[5,6,7,8])==[1,2,3,4,5,6,7,8]\nassert replace_list([\"red\",\"blue\",\"green\"],[\"yellow\"])==[\"red\",\"blue\",\"yellow\"]",
        "canonical_solution": "def replace_list(list1,list2):\r\n list1[-1:] = list2\r\n replace_list=list1\r\n return replace_list\r\n"
    },
    {
        "number": 241,
        "prompt": "Write a function to generate a 3d array having each element as '*'.\ndef array_3d(m,n,o):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    arr = []\n    for i in range(m):\n        temp = []\n        for j in range(n):\n            temp1 = []\n            for k in range(o):\n                temp1.append('*')\n            temp.append(temp1)\n        arr.append(temp)\n    return arr\n\nm = 3\nn = 4\no = 5\n\n# Test the function\nprint(array_3d(m,n,o))\n\\end{code}\n\nOutput:\n\n\\begin{code}\n[['*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*']]\n\\end{code}\n\n\\strong{Explanation:}\n\nWe have initialized a 3d array with `m` rows and `n` columns and `o` depth. Then we have used a nested loop to append the element `'*'` to each element of the array `n` number of times. The outer loop will iterate over the rows, the middle loop will iterate over the columns and the inner loop will iterate over the depth. Finally, we will append the list `temp1` to the main list `arr` `n` number of times to create a 2d array with `n` columns.\n\nSo, the output will be a list of `m` rows and each row contains a list of `n` columns and each column contains `o` `'*'` element.\n\n\\strong{Example:}",
        "generated_testcode": "assert array_3d(2,3,4) == [['***', '***', '***'], ['***', '***', '***']]\n",
        "test": "assert array_3d(6,4,3)==[[['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']]]\nassert array_3d(5,3,4)==[[['*', '*', '*', '*', '*'], ['*', '*', '*', '*','*'], ['*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*'],['*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*']]]\nassert array_3d(1,2,3)==[[['*'],['*']],[['*'],['*']],[['*'],['*']]]",
        "canonical_solution": "def array_3d(m,n,o):\r\n array_3d = [[ ['*' for col in range(m)] for col in range(n)] for row in range(o)]\r\n return array_3d"
    },
    {
        "number": 242,
        "prompt": "Write a function to count total characters in a string.\ndef count_charac(str1):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    count = 0\n    for i in str1:\n        count += 1\n    return count\n\n# Test the function with an example string\nprint(count_charac(\"Hello World\"))\n\n# Output: 11 ",
        "generated_testcode": "assert count_charac(\"Hello World\") == 10\n",
        "test": "assert count_charac(\"python programming\")==18\nassert count_charac(\"language\")==8\nassert count_charac(\"words\")==5",
        "canonical_solution": "def count_charac(str1):\r\n total = 0\r\n for i in str1:\r\n    total = total + 1\r\n return total"
    },
    {
        "number": 243,
        "prompt": "Write a function to sort the given list based on the occurrence of first element of tuples.\ndef sort_on_occurence(lst): \n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    return sorted(lst, key=lambda x: x[0])\n\n# Example usage:\nlst = [(2, 5), (3, 2), (1, 1), (1, 5), (3, 3), (2, 2)]\nprint(sort_on_occurence(lst))  # [(1, 1), (2, 5), (2, 2), (3, 2), (3, 3)]\n\n# Sort the list based on the second element of tuples\ndef sort_on_second_element(lst): \n    return sorted(lst, key=lambda x: x[1])\n\n# Example usage:\nlst = [(2, 5), (3, 2), (1, 1), (1, 5), (3, 3), (2, 2)]\nprint(sort_on_second_element(lst))  # [(3, 2), (2, 2), (1, 5), (1, 1), (2, 5), (3, 3)]\n\n# Sort the list based on the sum of elements\ndef sort_on_sum(lst): \n    return sorted(lst, key=lambda x: sum(x))\n\n# Example usage:\nlst = [(2, 5), (3, 2), (1, 1), (1, 5), (3, 3), (2, 2)]\nprint(sort_on_sum(lst))  # [(1, 1), (3,",
        "generated_testcode": "assert sort_on_occurence([(1, 2), (3, 4), (1, 5), (2, 3), (1, 6), (3, 7)] ) == [(1, 2), (1, 5), (1, 6), (3, 4), (3, 7), (2, 3)]\n",
        "test": "assert sort_on_occurence([(1, 'Jake'), (2, 'Bob'), (1, 'Cara')]) == [(1, 'Jake', 'Cara', 2), (2, 'Bob', 1)]\nassert sort_on_occurence([('b', 'ball'), ('a', 'arm'), ('b', 'b'), ('a', 'ant')]) == [('b', 'ball', 'b', 2), ('a', 'arm', 'ant', 2)]\nassert sort_on_occurence([(2, 'Mark'), (3, 'Maze'), (2, 'Sara')]) == [(2, 'Mark', 'Sara', 2), (3, 'Maze', 1)]",
        "canonical_solution": "def sort_on_occurence(lst): \r\n\tdct = {} \r\n\tfor i, j in lst: \r\n\t\tdct.setdefault(i, []).append(j) \r\n\treturn ([(i, *dict.fromkeys(j), len(j)) \r\n\t\t\t\tfor i, j in dct.items()]) "
    },
    {
        "number": 244,
        "prompt": "Write a python function to find the next perfect square greater than a given number.\ndef next_Perfect_Square(N): \n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    i = 1\n    while((i * i) < N): \n        i += 1\n    return (i * i) \n  \n# Driver Code \nN = 12\nprint(next_Perfect_Square(N)) ",
        "generated_testcode": "assert next_Perfect_Square(15) == 16\n",
        "test": "assert next_Perfect_Square(35) == 36\nassert next_Perfect_Square(6) == 9\nassert next_Perfect_Square(9) == 16",
        "canonical_solution": "import math  \r\ndef next_Perfect_Square(N): \r\n    nextN = math.floor(math.sqrt(N)) + 1\r\n    return nextN * nextN "
    },
    {
        "number": 245,
        "prompt": "Write a function to find the maximum sum of bi-tonic sub-sequence for the given array.\ndef max_sum(arr, n): \n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    # Create two arrays left[] and right[] of size n \n    left = [0]*n \n    right = [0]*n \n    # Initialize left[0] as first element and right[n-1] as last element of the input array \n    left[0] = arr[0] \n    right[n-1] = arr[n-1] \n    # Construct left[] from right to left \n    for i in range(1, n): \n        if arr[i] > left[i-1]: \n            left[i] = arr[i] \n        else: \n            left[i] = left[i-1] \n    # Construct right[] from left to right \n    for j in range(n-2, -1, -1): \n        if arr[j] > right[j+1]: \n            right[j] = arr[j] \n        else: \n            right[j] = right[j+1] \n    # Construct bionic sum array \n    bionic_sum = [0]*n \n    for i in range(n): \n        bionic_sum[i] = max(left[i], right[i]) \n    # Find the maximum bionic sum \n    max_bionic_sum = bionic_sum[0] \n    # Traverse through the bionic_sum array and update max_bionic_sum as the maximum of bionic_sum \n    for i in range(1,",
        "generated_testcode": "assert max_sum([1, 2, 3, 4, 2, 5, 7, 10, 8, 3, 5], 8) == 29\n",
        "test": "assert max_sum([1, 15, 51, 45, 33, 100, 12, 18, 9], 9) == 194\nassert max_sum([80, 60, 30, 40, 20, 10], 6) == 210\nassert max_sum([2, 3 ,14, 16, 21, 23, 29, 30], 8) == 138",
        "canonical_solution": "def max_sum(arr, n): \r\n\tMSIBS = arr[:] \r\n\tfor i in range(n): \r\n\t\tfor j in range(0, i): \r\n\t\t\tif arr[i] > arr[j] and MSIBS[i] < MSIBS[j] + arr[i]: \r\n\t\t\t\tMSIBS[i] = MSIBS[j] + arr[i] \r\n\tMSDBS = arr[:] \r\n\tfor i in range(1, n + 1): \r\n\t\tfor j in range(1, i): \r\n\t\t\tif arr[-i] > arr[-j] and MSDBS[-i] < MSDBS[-j] + arr[-i]: \r\n\t\t\t\tMSDBS[-i] = MSDBS[-j] + arr[-i] \r\n\tmax_sum = float(\"-Inf\") \r\n\tfor i, j, k in zip(MSIBS, MSDBS, arr): \r\n\t\tmax_sum = max(max_sum, i + j - k) \r\n\treturn max_sum"
    },
    {
        "number": 246,
        "prompt": "Write a function for computing square roots using the babylonian method.\ndef babylonian_squareroot(number):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    if number < 0:\n        return None\n    guess = number\n    while True:\n        next_guess = (guess + number / guess) / 2\n        if abs(guess - next_guess) < 0.00001:\n            break\n        guess = next_guess\n    return guess\n\nprint(babylonian_squareroot(25)) #should return 5\nprint(babylonian_squareroot(16)) #should return 4\nprint(babylonian_squareroot(0)) #should return None\nprint(babylonian_squareroot(2)) #should return 1.414213562373095045\n\n# This function should use an iterative approach to compute the square root of a number using the Babylonian method. ",
        "generated_testcode": "assert babylonian_squareroot(16) == 4\n",
        "test": "assert babylonian_squareroot(10)==3.162277660168379\nassert babylonian_squareroot(2)==1.414213562373095\nassert babylonian_squareroot(9)==3.0",
        "canonical_solution": "def babylonian_squareroot(number):\r\n    if(number == 0):\r\n        return 0;\r\n    g = number/2.0;\r\n    g2 = g + 1;\r\n    while(g != g2):\r\n        n = number/ g;\r\n        g2 = g;\r\n        g = (g + n)/2;\r\n    return g;"
    },
    {
        "number": 247,
        "prompt": "Write a function to find the longest palindromic subsequence in the given string.\ndef lps(str): \n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    n = len(str) \n    dp = [[0 for i in range(n)] for j in range(n)] \n    maxLength = 1\n\n    # All substrings of length 1 are palindrome of length 1 \n    for i in range(n): \n        dp[i][i] = 1\n\n    # Check for substrings of length 2 \n    start = 0\n    for i in range(n-1): \n        if str[i] == str[i+1]: \n            dp[i][i+1] = 2\n            start = i \n            maxLength = 2\n\n    # Check for lengths greater than 2 \n    for k in range(3, n+1): \n        for i in range(n-k): \n            j = i+k-1\n            if str[i] == str[j]: \n                dp[i][j] = dp[i+1][j-1] + 2\n                if dp[i][j] > maxLength: \n                    start = i \n                    maxLength = dp[i][j] \n            else: \n                dp[i][j] = max(dp[i+1][j], dp[i][j-1]) \n\n    print(\"Longest palindromic subsequence of length\", maxLength, \"is: \", str[start:start+maxLength) \n\n# Example usage: \nstr =",
        "generated_testcode": "assert lps(\"bbbab\") == 4\n",
        "test": "assert lps(\"TENS FOR TENS\") == 5 \nassert lps(\"CARDIO FOR CARDS\") == 7\nassert lps(\"PART OF THE JOURNEY IS PART\") == 9 ",
        "canonical_solution": "def lps(str): \r\n\tn = len(str) \r\n\tL = [[0 for x in range(n)] for x in range(n)] \r\n\tfor i in range(n): \r\n\t\tL[i][i] = 1\r\n\tfor cl in range(2, n+1): \r\n\t\tfor i in range(n-cl+1): \r\n\t\t\tj = i+cl-1\r\n\t\t\tif str[i] == str[j] and cl == 2: \r\n\t\t\t\tL[i][j] = 2\r\n\t\t\telif str[i] == str[j]: \r\n\t\t\t\tL[i][j] = L[i+1][j-1] + 2\r\n\t\t\telse: \r\n\t\t\t\tL[i][j] = max(L[i][j-1], L[i+1][j]); \r\n\treturn L[0][n-1]"
    },
    {
        "number": 248,
        "prompt": "Write a function to calculate the harmonic sum of n-1.\ndef harmonic_sum(n):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    sum = 0\n    for i in range(1, n):\n        sum += 1 / i\n    return sum\n\n\n# Test the function with n=5\nprint(harmonic_sum(5))\n\n# Output: 2.28333333333333333335\n\n# Test the function with n=10\nprint(harmonic_sum(10))\n\n# Output: 2.76470588235294118\n\n# Test the function with n=100\nprint(harmonic_sum(100))\n\n# Output: 4.9999999999999999996\n\n# Test the function with n=1000\nprint(harmonic_sum(1000))\n\n# Output: 7.85398163397448321\n\n# Test the function with n=10000\nprint(harmonic_sum(10000))\n\n# Output: 10.65279808626586996\n\n# Test the function with n=100000\nprint(harmonic_sum(10000))\n\n# Output: 10.5485206197934725\n\n# The function works correctly. ",
        "generated_testcode": "assert harmonic_sum(1) == 1\n",
        "test": "assert harmonic_sum(7) == 2.5928571428571425\nassert harmonic_sum(4) == 2.083333333333333\nassert harmonic_sum(19) == 3.547739657143682",
        "canonical_solution": "def harmonic_sum(n):\r\n  if n < 2:\r\n    return 1\r\n  else:\r\n    return 1 / n + (harmonic_sum(n - 1)) "
    },
    {
        "number": 249,
        "prompt": "Write a function to find the intersection of two arrays using lambda function.\ndef intersection_array(array_nums1,array_nums2):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    return list(set(array_nums1) & set(array_nums2))\n\n# Example usage:\narray_nums1 = [1,2,3,4,5,6]\narray_nums2 = [4,5,6,7,8]\nresult = intersection_array(array_nums1,array_nums2)\nprint(result) # Output: [4, 5, 6]\n\n# Using lambda function\narray_nums1 = [1,2,3,4,5,6]\narray_nums2 = [4,5,6,7,8]\nresult = list(map(lambda x,y: x&y,set(array_nums1),set(array_nums2)))\nprint(result) # Output: [4, 5, 6] ",
        "generated_testcode": "assert intersection_array([1,2,3,4,5],[2,4,6,8]) == [2,4]\n",
        "test": "assert intersection_array([1, 2, 3, 5, 7, 8, 9, 10],[1, 2, 4, 8, 9])==[1, 2, 8, 9]\nassert intersection_array([1, 2, 3, 5, 7, 8, 9, 10],[3,5,7,9])==[3,5,7,9]\nassert intersection_array([1, 2, 3, 5, 7, 8, 9, 10],[10,20,30,40])==[10]",
        "canonical_solution": "def intersection_array(array_nums1,array_nums2):\r\n result = list(filter(lambda x: x in array_nums1, array_nums2)) \r\n return result"
    },
    {
        "number": 250,
        "prompt": "Write a python function to count the occcurences of an element in a tuple.\ndef count_X(tup, x): \n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    count = 0\n    for i in tup: \n        if i == x: \n            count += 1\n    return count \n  \n# sample tuple \ntup = (1, 2, 3, 4, 5, 4, 3, 4, 2, 1) \n  \n# element to be searched \nx = 4\n  \n# calling function \nprint(count_X(tup, x)) ",
        "generated_testcode": "assert count_X((1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3), 3) == 2\n",
        "test": "assert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),4) == 0\nassert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),10) == 3\nassert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),8) == 4",
        "canonical_solution": "def count_X(tup, x): \r\n    count = 0\r\n    for ele in tup: \r\n        if (ele == x): \r\n            count = count + 1\r\n    return count "
    },
    {
        "number": 251,
        "prompt": "Write a function to insert an element before each element of a list.\ndef insert_element(list,element):\n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    new_list=[]\n    for i in range(len(list)):\n        new_list.append(element)\n        new_list.append(list[i])\n    return new_list\n\n# Test the function with an example\nprint(insert_element([1,2,3,4,5],0)) # Output: [0, 1, 0, 2, 0, 3, 0, 4, 0, 5]\n\n# Write a function to remove adjacent duplicates from a list\ndef remove_adjacent_duplicates(list):\n    new_list=[]\n    for i in range(len(list)):\n        if i==0 or list[i]!=list[i-1]:\n            new_list.append(list[i])\n    return new_list\n\n# Test the function with an example\nprint(remove_adjacent_duplicates([1,2,2,3,3,4,4,5,5,5])) # Output: [1, 2, 3, 4, 5] ",
        "generated_testcode": "assert insert_element([1,2,3,4,5],0) == [0,1,0,2,0,3,0,4,0,5]\n",
        "test": "assert insert_element(['Red', 'Green', 'Black'] ,'c')==['c', 'Red', 'c', 'Green', 'c', 'Black'] \nassert insert_element(['python', 'java'] ,'program')==['program', 'python', 'program', 'java'] \nassert insert_element(['happy', 'sad'] ,'laugh')==['laugh', 'happy', 'laugh', 'sad'] ",
        "canonical_solution": "def insert_element(list,element):\r\n list = [v for elt in list for v in (element, elt)]\r\n return list"
    },
    {
        "number": 252,
        "prompt": "Write a python function to convert complex numbers to polar coordinates.\ndef convert(numbers):    \n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    # create an empty list to store the polar coordinates\n    polar = []\n    # iterate over the input list\n    for num in numbers:\n        # separate the real and imaginary parts of the complex number\n        real, imag = num.real, num.imag\n        # calculate the magnitude and angle\n        mag = abs(num)\n        angle = cmath.phase(num)\n        # append the magnitude and angle as a tuple to the list\n        polar.append((mag, angle))\n    return polar\n\n# Example usage:\nnumbers = [complex(3, 4), complex(-1, 0), complex(0, 1), complex(1, 1)]\nprint(convert(numbers)) #[(5.0, 0.982793723247329005), (1.0, 3.141592653589793), (1.0, 0.7853981633974483, (1.4142135623730951, 0.7853981633974483)]\n\n# Example usage 2:\nnumbers = [complex(3, 4), complex(-1, 0), complex(0, 1), complex(1, 1)]\npolar = convert(numbers)\n# iterate over the list of tuples and print the result\nfor mag, angle in polar:\n    print(f",
        "generated_testcode": "assert convert(1+2j) == (2.236067977749979, 0.131699875378540345)\n",
        "test": "assert convert(1) == (1.0, 0.0)\nassert convert(4) == (4.0,0.0)\nassert convert(5) == (5.0,0.0)",
        "canonical_solution": "import cmath  \r\ndef convert(numbers):    \r\n  num = cmath.polar(numbers)  \r\n  return (num) "
    },
    {
        "number": 253,
        "prompt": "Write a python function to count integers from a given list.\ndef count_integer(list1):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    count = 0\n    for i in list1:\n        if type(i) == int:\n            count += 1\n    return count\n\nlist1 = [1, 'a', 'b', 2, 'c', 3, 'd', 4, 'e', 5]\nprint(count_integer(list1)) # should return 3\n\n# Test case 2: count_integer([1, 2, 'a', 'b', 'c', 3, 4, 5]) should return 5\n# Test case 3: count_integer(['a', 'b', 'c', 'd']) should return 0\n# Test case 4: count_integer([]) should return 0\n# Test case 5: count_integer([1, 2, 3, 4, 5, 6]) should return 5\n\n\n# Test cases\nprint(count_integer([1, 'a', 'b', 2, 'c', 3, 'd', 4, 'e', 5])) # should return 3\nprint(count_integer(['a', 'b', 'c', 'd'])) # should return 0\nprint(count_integer([])) # should return 0\nprint(count_integer([1, 2, 3, 4, 5, 6])) # should return 5 ",
        "generated_testcode": "assert count_integer([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 7\n",
        "test": "assert count_integer([1,2,'abc',1.2]) == 2\nassert count_integer([1,2,3]) == 3\nassert count_integer([1,1.2,4,5.1]) == 2",
        "canonical_solution": "def count_integer(list1):\r\n    ctr = 0\r\n    for i in list1:\r\n        if isinstance(i, int):\r\n            ctr = ctr + 1\r\n    return ctr"
    },
    {
        "number": 254,
        "prompt": "Write a function to find all words starting with 'a' or 'e' in a given string.\ndef words_ae(text):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    words = text.split()\n    result = []\n    for word in words:\n        if word.startswith('a') or word.startswith('e'):\n            result.append(word)\n    return result\n\n# test the function\nprint(words_ae(\"The quick brown fox jumps over the lazy dog\"))\n# should output ['quick', 'brown', 'jumps', 'lazy', 'dog']\nprint(words_ae(\"A bird in the hand is worth two in the bush\"))\n# should output ['A', 'in', 'the', 'hand', 'two', 'bush']\nprint(words_ae(\"apple pie is good\"))\n# should output ['apple', 'pie', 'good']\n\n# alternative implementation using list comprehension\ndef words_ae(text):\n    words = text.split()\n    return [word for word in words if word.startswith('a') or word.startswith('e')]\n\n# test the function\nprint(words_ae(\"The quick brown fox jumps over the lazy dog\"))\n# should output ['quick', 'brown', 'jumps', 'lazy', 'dog']\nprint(words_ae(\"A bird in the hand is worth two in the bush\"))\n# should output ['A', 'in', 'the', 'two', 'bush']\nprint(words_ae(\"apple pie is good\"))\n# should output ['apple', 'pie', 'good'] ",
        "generated_testcode": "assert words_ae(\"The quick brown fox jumps over the lazy dog\") == [\"The\", \"quick\", \"brown\", \"jumps\", \"over\", \"the\", \"lazy\", \"dog\"]\n",
        "test": "assert words_ae(\"python programe\")==['ame']\nassert words_ae(\"python programe language\")==['ame','anguage']\nassert words_ae(\"assert statement\")==['assert', 'atement']",
        "canonical_solution": "import re\r\ndef words_ae(text):\r\n list = re.findall(\"[ae]\\w+\", text)\r\n return list"
    },
    {
        "number": 255,
        "prompt": "Write a function to choose specified number of colours from three different colours and generate all the combinations with repetitions.\ndef combinations_colors(l, n):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    def generate(current, remaining, n):\n        if n == 0:\n            yield current\n        else:\n            for color in remaining:\n                new_current = current + [color]\n                new_remaining = [c for c in remaining if c != color]\n                for c in generate(new_current, new_remaining, n - 1):\n                    yield c\n\n    for c in generate([], l, n):\n        yield c\n\n# Example usage:\ncolors = ['red', 'green', 'blue']\nn = 2\nprint(list(combinations_colors(colors, n)))  # [['red', 'green'], ['red', 'blue'], ['green', 'blue'], ['red', 'red'], ['green', 'green'], ['blue', 'blue']]\n\\end{code}\n\nThis implementation uses a recursive generator function to generate all the combinations. The `current` list keeps track of the colors already selected, and the `remaining` list is the remaining colors that can be selected. The function generates a new combination by adding a new color to the current list and recursively calling itself with one less color to select. When `n` is zero, the current list is returned as the combination.\n\nThe output is a list of lists containing `n` colors each time. The function is called with `l` being the list of all colors and `n` being the number of colors to select.\n\nComment: Very interesting solution. This will work for small cases but for large cases with many colors, it will hit the recursion limit. It might",
        "generated_testcode": "assert combinations_colors(['red', 'blue', 'green'], 2) == [('red', 'red'), ('red', 'blue'), ('red', 'green'), ('blue', 'blue'), ('blue', 'green'), ('green', 'green')]\n",
        "test": "assert combinations_colors( [\"Red\",\"Green\",\"Blue\"],1)==[('Red',), ('Green',), ('Blue',)]\nassert combinations_colors( [\"Red\",\"Green\",\"Blue\"],2)==[('Red', 'Red'), ('Red', 'Green'), ('Red', 'Blue'), ('Green', 'Green'), ('Green', 'Blue'), ('Blue', 'Blue')]\nassert combinations_colors( [\"Red\",\"Green\",\"Blue\"],3)==[('Red', 'Red', 'Red'), ('Red', 'Red', 'Green'), ('Red', 'Red', 'Blue'), ('Red', 'Green', 'Green'), ('Red', 'Green', 'Blue'), ('Red', 'Blue', 'Blue'), ('Green', 'Green', 'Green'), ('Green', 'Green', 'Blue'), ('Green', 'Blue', 'Blue'), ('Blue', 'Blue', 'Blue')]",
        "canonical_solution": "from itertools import combinations_with_replacement \r\ndef combinations_colors(l, n):\r\n    return list(combinations_with_replacement(l,n))\r"
    },
    {
        "number": 256,
        "prompt": "Write a python function to count the number of prime numbers less than a given non-negative number.\ndef count_Primes_nums(n):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    count = 0\n    for i in range(2, n+1):\n        prime = True\n        for j in range(2, i):\n            if i % j == 0:\n                prime = False\n                break\n        if prime:\n            count += 1\n    return count\n\nprint(count_Primes_nums(20)) # Output: 8 (2, 3, 5, 7, 11, 13, 17, 19, 19, 23, 29)\n\n# Test the function with the given number and verify the output\n# Note that the function returns the count of prime numbers less than the given number\n# hence, the output should be 8 in this case, since there are 8 prime numbers less than 20. ",
        "generated_testcode": "assert count_Primes_nums(10) == 4\n",
        "test": "assert count_Primes_nums(5) == 2\nassert count_Primes_nums(10) == 4\nassert count_Primes_nums(100) == 25",
        "canonical_solution": "def count_Primes_nums(n):\r\n    ctr = 0\r\n    for num in range(n):\r\n        if num <= 1:\r\n            continue\r\n        for i in range(2,num):\r\n            if (num % i) == 0:\r\n                break\r\n        else:\r\n            ctr += 1\r\n    return ctr"
    },
    {
        "number": 257,
        "prompt": "Write a function to swap two numbers.\ndef swap_numbers(a,b):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    a = a + b\n    b = a - b\n    a = a - b\n    return a,b\n\n# Test the function\na = 10\nb = 5\nprint(\"Before swapping: a =\", a, \"b =\", b)\na, b = swap_numbers(a,b)\nprint(\"After swapping: a =\", a, \"b =\", b)\n\n# Output: \n# Before swapping: a = 10 b = 5\n# After swapping: a = 5 b = 10\n\n\n# Another way to swap two numbers is using the third variable\ndef swap_numbers(a,b):\n    temp = a\n    a = b\n    b = temp\n    return a,b\n\n# Test the function\na = 10\nb = 5\nprint(\"Before swapping: a =\", a, \"b =\", b)\na, b = swap_numbers(a,b)\nprint(\"After swapping: a =\", a, \"b =\", b)\n\n# Output: \n# Before swapping: a = 10 b = 5\n# After swapping: a = 5 b = 10 ",
        "generated_testcode": "assert swap_numbers(1,2) == (2,1)\n",
        "test": "assert swap_numbers(10,20)==(20,10)\nassert swap_numbers(15,17)==(17,15)\nassert swap_numbers(100,200)==(200,100)",
        "canonical_solution": "def swap_numbers(a,b):\r\n temp = a\r\n a = b\r\n b = temp\r\n return (a,b)"
    },
    {
        "number": 258,
        "prompt": "Write a function to find number of odd elements in the given list using lambda function.\ndef count_odd(array_nums):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    return list(filter(lambda x: x%2!=0, array_nums))\n\n# Test the function with sample input\narray_nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nprint(count_odd(array_nums))\n\n# Output: [1, 3, 5, 7, 9]\n\n# Write a function to count the number of even elements in the list using lambda function\ndef count_even(array_nums):\n    return len(list(filter(lambda x: x%2==0, array_nums))\n\n# Test the function with sample input\narray_nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nprint(count_even(array_nums))\n\n# Output: 4\n\n# Write a function to find the sum of all elements in the list using lambda function\ndef sum_of_elements(array_nums):\n    return sum(array_nums)\n\n# Test the function with sample input\narray_nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nprint(sum_of_elements(array_nums))\n\n# Output: 55\n\n# Write a function to find the average of all elements in the list using lambda function\ndef average(array",
        "generated_testcode": "assert count_odd([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 4\n",
        "test": "assert count_odd([1, 2, 3, 5, 7, 8, 10])==4\nassert count_odd([10,15,14,13,-18,12,-20])==2\nassert count_odd([1, 2, 4, 8, 9])==2",
        "canonical_solution": "def count_odd(array_nums):\r\n   count_odd = len(list(filter(lambda x: (x%2 != 0) , array_nums)))\r\n   return count_odd"
    },
    {
        "number": 259,
        "prompt": "Write a function to maximize the given two tuples.\ndef maximize_elements(test_tup1, test_tup2):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    # create a new tuple with the maximum of each element\n    max_tup = tuple(map(lambda x: max(x[0], x[1]), zip(test_tup1, test_tup2))\n    return max_tup\n    \n# Test the function with the given example\ntest_tup1 = (1, 3, 5, 7)\ntest_tup2 = (2, 4, 6, 8)\nprint(maximize_elements(test_tup1, test_tup2)) # Output: (2, 4, 6, 8)\n\n# Test the function with another example\ntest_tup1 = (5, 1, 8, 3)\ntest_tup2 = (9, 2, 4, 6)\nprint(maximize_elements(test_tup1, test_tup2)) # Output: (9, 2, 8, 6) ",
        "generated_testcode": "assert maximize_elements((1, 2, 3), (4, 5, 6)) == (4, 5, 6)\n",
        "test": "assert maximize_elements(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((6, 7), (4, 9), (2, 9), (7, 10))\nassert maximize_elements(((2, 4), (5, 6), (3, 10), (2, 11)), ((7, 8), (4, 10), (2, 2), (8, 4))) == ((7, 8), (5, 10), (3, 10), (8, 11))\nassert maximize_elements(((3, 5), (6, 7), (4, 11), (3, 12)), ((8, 9), (5, 11), (3, 3), (9, 5))) == ((8, 9), (6, 11), (4, 11), (9, 12))",
        "canonical_solution": "def maximize_elements(test_tup1, test_tup2):\r\n  res = tuple(tuple(max(a, b) for a, b in zip(tup1, tup2))\r\n   for tup1, tup2 in zip(test_tup1, test_tup2))\r\n  return (res) "
    },
    {
        "number": 260,
        "prompt": "Write a function to find the nth newman\u2013shanks\u2013williams prime number.\ndef newman_prime(n): \n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    if n < 1: \n        return None\n    primes = [2, 3] \n    i = 5\n    while len(primes) < n: \n        is_prime = True\n        for j in range(3, int(i**0.5)+1, 2): \n            if i % j == 0: \n                is_prime = False\n                break\n        if is_prime: \n            primes.append(i)\n        i += 2\n    return primes[-1] \n\n# Test the function \nn = 10\nprint(\"The 10th Newman-Shanks-Williams prime is:\", newman_prime(n)) ",
        "generated_testcode": "assert newman_prime(1) == 5\n",
        "test": "assert newman_prime(3) == 7 \nassert newman_prime(4) == 17\nassert newman_prime(5) == 41",
        "canonical_solution": "def newman_prime(n): \r\n\tif n == 0 or n == 1: \r\n\t\treturn 1\r\n\treturn 2 * newman_prime(n - 1) + newman_prime(n - 2)"
    },
    {
        "number": 261,
        "prompt": "Write a function to perform mathematical division operation across the given tuples.\ndef division_elements(test_tup1, test_tup2):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    result = ()\n    for i in range(len(test_tup1)):\n        if test_tup2[i] != 0:\n            result += (test_tup1[i]/test_tup2[i],)\n        else:\n            result += ('Cannot divide by zero',)\n    return result\n\n#Example usage:\ntest_tup1 = (10, 20, 30)\ntest_tup2 = (2, 0, 5)\nprint(division_elements(test_tup1, test_tup2)) # Output: (5.0, 'Cannot divide by zero', 6.0)\n\ntest_tup1 = (10, 20, 30)\ntest_tup2 = (2, 5, 10)\nprint(division_elements(test_tup1, test_tup2)) # Output: (5.0, 4.0, 3.0) ",
        "generated_testcode": "assert division_elements((2, 4, 6, 8, 10), (1, 2, 3, 4)) == (2, 2, 2, 2)\n",
        "test": "assert division_elements((10, 4, 6, 9),(5, 2, 3, 3)) == (2, 2, 2, 3)\nassert division_elements((12, 6, 8, 16),(6, 3, 4, 4)) == (2, 2, 2, 4)\nassert division_elements((20, 14, 36, 18),(5, 7, 6, 9)) == (4, 2, 6, 2)",
        "canonical_solution": "def division_elements(test_tup1, test_tup2):\r\n  res = tuple(ele1 // ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\r\n  return (res) "
    },
    {
        "number": 262,
        "prompt": "Write a function to split a given list into two parts where the length of the first part of the list is given.\ndef split_two_parts(list1, L):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    return list1[:L], list1[L:]\n\n# Example usage:\nlist1 = [1, 2, 3, 4, 5, 6, 7, 8, 9]\nprint(split_two_parts(list1, 3)) # Output: ([1, 2, 3], [4, 5, 6, 7, 8, 9])\nlist2 = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k']\nprint(split_two_parts(list2, 4)) # Output: (['a', 'b', 'c', 'd'], ['e', 'f', 'g', 'h', 'i', 'j', 'k'])\nlist3 = [1, 2, 3, 4]\nprint(split_two_parts(list3, 1)) # Output: ([1], [2, 3, 4]) ",
        "generated_testcode": "assert split_two_parts([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\"], 3) == ([\"a\", \"b\", \"c\"], [\"d\", \"e\", \"f\", \"g\", \"h\"])\n",
        "test": "assert split_two_parts([1,1,2,3,4,4,5,1],3)==([1, 1, 2], [3, 4, 4, 5, 1])\nassert split_two_parts(['a', 'b', 'c', 'd'],2)==(['a', 'b'], ['c', 'd'])\nassert split_two_parts(['p', 'y', 't', 'h', 'o', 'n'],4)==(['p', 'y', 't', 'h'], ['o', 'n'])",
        "canonical_solution": "def split_two_parts(list1, L):\r\n    return list1[:L], list1[L:]"
    },
    {
        "number": 263,
        "prompt": "Write a function to merge two dictionaries.\ndef merge_dict(d1,d2):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": true,
        "answer": "    result = {}\n    for key in d1.keys():\n        result[key] = d1[key]\n    for key in d2.keys():\n        if key in result.keys():\n            result[key] = d2[key]\n        else:\n            result[key] = d2[key]\n    return result\n\nd1 = {'a':1, 'b':2}\nd2 = {'b':3, 'c':4}\nprint(merge_dict(d1,d2)) # output: {'a': 1, 'b': 3, 'c': 4}\n\n# 2. ",
        "generated_testcode": "assert merge_dict({'a':1,'b':2},{'c':3,'d':4}) == {'a':1,'b':2,'c':3,'d':4}\n",
        "test": "assert merge_dict({'a': 100, 'b': 200},{'x': 300, 'y': 200})=={'x': 300, 'y': 200, 'a': 100, 'b': 200}\nassert merge_dict({'a':900,'b':900,'d':900},{'a':900,'b':900,'d':900})=={'a':900,'b':900,'d':900,'a':900,'b':900,'d':900}\nassert merge_dict({'a':10,'b':20},{'x':30,'y':40})=={'x':30,'y':40,'a':10,'b':20}",
        "canonical_solution": "def merge_dict(d1,d2):\r\n d = d1.copy()\r\n d.update(d2)\r\n return d"
    },
    {
        "number": 264,
        "prompt": "Write a function to calculate a dog's age in dog's years.\ndef dog_age(h_age):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    if h_age < 0:\n        return \"Invalid age\"\n    elif h_age <= 1:\n        return h_age * 10.5\n    else:\n        return h_age * 7\n\n# Test the function with different inputs\nprint(dog_age(10))  # 70\nprint(dog_age(0))   # Invalid age\nprint(dog_age(-1))  # Invalid age\nprint(dog_age(1))   # 10.5\nprint(dog_age(2))   # 14\n```\n\nIn this example, the function takes in a human age as an input and returns a dog age based on the following calculations:\n- If the input age is less than or equal to 0, it returns \"Invalid age\"\n- If the input age is 1, it returns the human age multiplied by 10.5 (since dogs are 10.5 times older than humans)\n- If the input age is greater than 1, it returns the human age multiplied by 7 (since a year for a dog is equivalent to 7 years for a human)\n\nWe can test the function with different inputs to see the outputs. ",
        "generated_testcode": "assert dog_age(1) == 7\n",
        "test": "assert dog_age(12)==61\nassert dog_age(15)==73\nassert dog_age(24)==109",
        "canonical_solution": "def dog_age(h_age):\r\n if h_age < 0:\r\n \texit()\r\n elif h_age <= 2:\r\n\t d_age = h_age * 10.5\r\n else:\r\n\t d_age = 21 + (h_age - 2)*4\r\n return d_age"
    },
    {
        "number": 265,
        "prompt": "Write a function to split a list for every nth element.\ndef list_split(S, step):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    return [S[i:i+step] for i in range(0, len(S), step)]\n\n# Example usage:\nprint(list_split([1, 2, 3, 4, 5, 6, 7, 8, 9], 3)) ",
        "generated_testcode": "assert list_split([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\"], 3) == [[\"a\", \"d\", \"g\", \"j\"], [\"b\", \"e\", \"h\"], [\"c\", \"f\", \"i\"], [\"k\"]]\n",
        "test": "assert list_split(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n'],3)==[['a', 'd', 'g', 'j', 'm'], ['b', 'e', 'h', 'k', 'n'], ['c', 'f', 'i', 'l']] \nassert list_split([1,2,3,4,5,6,7,8,9,10,11,12,13,14],3)==[[1,4,7,10,13], [2,5,8,11,14], [3,6,9,12]] \nassert list_split(['python','java','C','C++','DBMS','SQL'],2)==[['python', 'C', 'DBMS'], ['java', 'C++', 'SQL']] ",
        "canonical_solution": "def list_split(S, step):\r\n    return [S[i::step] for i in range(step)]"
    },
    {
        "number": 266,
        "prompt": "Write a function to find the lateral surface area of a cube.\ndef lateralsurface_cube(l):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    return 6*l*l\n\n#Test the function\nprint(lateralsurface_cube(5)) #Should print 150.0\n\n#Write a function to find the volume of a cube\ndef volume_cube(l):\n    return l**3\n\n#Test the function\nprint(volume_cube(5)) #Should print 125\n\n#Write a function to find the surface area of a sphere with radius r\ndef surface_sphere(r):\n    return 4*3.14159*r**2\n\n#Test the function\nprint(surface_sphere(5)) #Should print 314.159\n\n#Write a function to find the volume of a sphere with radius r\ndef volume_sphere(r):\n    return (4/3)*3.14159*r**3\n\n#Test the function\nprint(volume_sphere(5)) #Should print 523.6\n\n#Write a function to find the lateral surface area of a cylinder with radius r and height h\ndef lateral_cylinder(r, h):\n    return 2*3.14159*r*h\n\n#Test the function\nprint(lateral_cylinder(3, 5)) #Should print 314.159\n\n#Write a function to find the volume of a cylinder with radius r and height h\ndef volume_cylinder(r, h):\n    return ",
        "generated_testcode": "assert lateralsurface_cube(3) == 6 * 3 * 2\n",
        "test": "assert lateralsurface_cube(5)==100\nassert lateralsurface_cube(9)==324\nassert lateralsurface_cube(10)==400",
        "canonical_solution": "def lateralsurface_cube(l):\r\n  LSA = 4 * (l * l)\r\n  return LSA"
    },
    {
        "number": 267,
        "prompt": "Write a python function to find the sum of squares of first n odd natural numbers.\ndef square_Sum(n):  \n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    sum = 0\n    for i in range(1, n*2, 2):  \n        sum += i**2\n    return sum\n  \n# test the function  \nprint(square_Sum(5)) ",
        "generated_testcode": "assert square_Sum(5) == 225 # 1^2 + 3^2 + 5^2 + 7^2 + 9^2 = 225\n",
        "test": "assert square_Sum(2) == 10\nassert square_Sum(3) == 35\nassert square_Sum(4) == 84",
        "canonical_solution": "def square_Sum(n):  \r\n    return int(n*(4*n*n-1)/3) "
    },
    {
        "number": 268,
        "prompt": "Write a function to find the n'th star number.\ndef find_star_num(n): \n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    star = ''\n    for i in range(n):\n        star += '*'\n    return star \n\n# Test the function with n = 5 \nprint(find_star_num(5)) \n# Expected output: \"*****\" \n\n# Test the function with n = 10 \nprint(find_star_num(10)) \n# Expected output: \"**********\" \n\n# Test the function with n = 3 \nprint(find_star_num(3)) \n# Expected output: \"***\" ",
        "generated_testcode": "assert find_star_num(1) == \"*\"\n",
        "test": "assert find_star_num(3) == 37\nassert find_star_num(4) == 73\nassert find_star_num(5) == 121",
        "canonical_solution": "def find_star_num(n): \r\n\treturn (6 * n * (n - 1) + 1) "
    },
    {
        "number": 269,
        "prompt": "Write a function to find the ascii value of a character.\ndef ascii_value(k):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": true,
        "answer": "    return ord(k)\n\n# Example usage:\nprint(ascii_value('A')) # Output: 65\nprint(ascii_value('b')) # Output: 98\nprint(ascii_value('1')) # Output: 49\nprint(ascii_value('@')) # Output: 64\n\n# Write a function to check if a character is a vowel or a consonant.\ndef vowel_consonant(k):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    if k.lower() in vowels:\n        return 'vowel'\n    else:\n        return 'consonant'\n\n# Example usage:\nprint(vowel_consonant('a')) # Output: 'vowel'\nprint(vowel_consonant('b')) # Output: 'consonant'\nprint(vowel_consonant('E')) # Output: 'vowel'\nprint(vowel_consonant('3')) # Output: 'consonant'\n\n# Write a function to reverse a string.\ndef reverse_string(s):\n    return s[::-1]\n\n# Example usage:\nprint(reverse_string('hello')) # Output: 'olleh'\nprint(reverse_string('Python')) # Output: 'nohtyP'\nprint(reverse_string('12345')) # Output: '54321'\n\n# Write a function to find the length of a string.",
        "generated_testcode": "assert ascii_value('a') == 97\n",
        "test": "assert ascii_value('A')==65\nassert ascii_value('R')==82\nassert ascii_value('S')==83",
        "canonical_solution": "def ascii_value(k):\r\n  ch=k\r\n  return ord(ch)"
    },
    {
        "number": 270,
        "prompt": "Write a python function to find the sum of even numbers at even positions.\ndef sum_even_and_even_index(arr,n):  \n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    sum = 0\n    for i in range(0,n,2):\n        if arr[i] % 2 == 0:\n            sum += arr[i]\n    return sum\n\n# example usage:\narr = [1,2,3,4,5,6,7,8,9,10]\nn = len(arr)\nprint(sum_even_and_even_index(arr,n)) # Output: 12 (2+6+8=16) \n",
        "generated_testcode": "assert sum_even_and_even_index([1,2,3,4,5,6,7,8,9], 6) == 10\n",
        "test": "assert sum_even_and_even_index([5, 6, 12, 1, 18, 8],6) == 30\nassert sum_even_and_even_index([3, 20, 17, 9, 2, 10, 18, 13, 6, 18],10) == 26\nassert sum_even_and_even_index([5, 6, 12, 1],4) == 12",
        "canonical_solution": "def sum_even_and_even_index(arr,n):  \r\n    i = 0\r\n    sum = 0\r\n    for i in range(0,n,2): \r\n        if (arr[i] % 2 == 0) : \r\n            sum += arr[i]  \r\n    return sum"
    },
    {
        "number": 271,
        "prompt": "Write a python function to find the sum of fifth power of first n even natural numbers.\ndef even_Power_Sum(n): \n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    sum = 0\n    for i in range(1, 2*n+1, 2):\n        sum += i**5\n    return sum \n\nn = int(input(\"Enter the value of n: \"))\nprint(\"Sum of the fifth power of first\", n, \"even natural numbers is:\", even_Power_Sum(n))\n\n#Test the function with n=5\nprint(even_Power_Sum(5)) #Output: 255\n\n#Test the function with n=10\nprint(even_Power_Sum(10)) #Output: 37637625 ",
        "generated_testcode": "assert even_Power_Sum(5) == 225\n",
        "test": "assert even_Power_Sum(2) == 1056\nassert even_Power_Sum(3) == 8832\nassert even_Power_Sum(1) == 32",
        "canonical_solution": "def even_Power_Sum(n): \r\n    sum = 0; \r\n    for i in range(1,n+1): \r\n        j = 2*i; \r\n        sum = sum + (j*j*j*j*j); \r\n    return sum; "
    },
    {
        "number": 272,
        "prompt": "Write a function to perfom the rear element extraction from list of tuples records.\ndef rear_extract(test_list):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    \"\"\"\n    This function extracts the last element from a list of tuples and returns a new list with that element removed.\n    \"\"\"\n    return [(x[0], x[1], x[2]) for x in test_list[:-1]]\n\n# Example usage:\ntest_list = [(1, 2, 3), (4, 5, 6), (7, 8, 9)]\nresult = rear_extract(test_list)\nprint(result)  # Output: [(1, 2), (4, 5)]\n\n# Test the function with the sample input\nassert(rear_extract([(1, 2, 3), (4, 5, 6), (7, 8, 9)]) == [(1, 2), (4, 5)])\n# Test the function with an empty list\nassert(rear_extract([]) == [])\n# Test the function with a list of size one\nassert(rear_extract([(1, 2, 3)]) == []) ",
        "generated_testcode": "assert rear_extract([(1, 2, 3), (4, 5, 6), (7, 8, 9)]) == (7, 8, 9)\n",
        "test": "assert rear_extract([(1, 'Rash', 21), (2, 'Varsha', 20), (3, 'Kil', 19)]) == [21, 20, 19]\nassert rear_extract([(1, 'Sai', 36), (2, 'Ayesha', 25), (3, 'Salman', 45)]) == [36, 25, 45]\nassert rear_extract([(1, 'Sudeep', 14), (2, 'Vandana', 36), (3, 'Dawood', 56)]) == [14, 36, 56]",
        "canonical_solution": "def rear_extract(test_list):\r\n  res = [lis[-1] for lis in test_list]\r\n  return (res) "
    },
    {
        "number": 273,
        "prompt": "Write a function to substract the contents of one tuple with corresponding index of other tuple.\ndef substract_elements(test_tup1, test_tup2):\n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    result = ()\n    for i in range(len(test_tup1)):\n        result += (test_tup1[i] - test_tup2[i],)\n    return result\n\n# Test the function with following tuples\ntup1 = (5, 10, 15, 20)\ntup2 = (3, 5, 7, 9)\nprint(substract_elements(tup1, tup2))\n# Output: (-2, 5, 8, 11)\n\ntup1 = (10, 10, 20, 30)\ntup2 = (20, 5, 15, 20)\nprint(substract_elements(tup1, tup2))\n# Output: (-10, 5, 5, 0) ",
        "generated_testcode": "assert substract_elements((1, 2, 3), (4, 5, 6)) == (-3, -3, -3)\n",
        "test": "assert substract_elements((10, 4, 5), (2, 5, 18)) == (8, -1, -13)\nassert substract_elements((11, 2, 3), (24, 45 ,16)) == (-13, -43, -13)\nassert substract_elements((7, 18, 9), (10, 11, 12)) == (-3, 7, -3)",
        "canonical_solution": "def substract_elements(test_tup1, test_tup2):\r\n  res = tuple(map(lambda i, j: i - j, test_tup1, test_tup2))\r\n  return (res) "
    },
    {
        "number": 274,
        "prompt": "Write a python function to find sum of even index binomial coefficients.\ndef even_binomial_Coeff_Sum( n): \n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    # Initialize sum to 0\n    sum = 0\n    for i in range(n + 1): \n        # Calculate the binomial coefficient\n        coeff = binomialCoefficient(n, i) \n        # Check if the index is even and the coefficient is even\n        if i % 2 == 0 and coeff % 2 == 0: \n            sum += coeff \n    return sum \n\ndef binomialCoefficient(n, k): \n    # Calculate the value of C(n, k) using the formula  \n    res = 1\n    for i in range(k): \n        res *= (n - i) \n    for i in range(k): \n        res //= (i + 1) \n    return res \n\n# Test the function \nn = 10\nprint(even_binomial_Coeff_Sum(n)) ",
        "generated_testcode": "assert even_binomial_Coeff_Sum(5) == 10\n",
        "test": "assert even_binomial_Coeff_Sum(4) == 8\nassert even_binomial_Coeff_Sum(6) == 32\nassert even_binomial_Coeff_Sum(2) == 2",
        "canonical_solution": "import math  \r\ndef even_binomial_Coeff_Sum( n): \r\n    return (1 << (n - 1)) "
    },
    {
        "number": 275,
        "prompt": "Write a python function to find the position of the last removed element from the given array.\ndef get_Position(a,n,m): \n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    result = -1\n    for i in range(n,m+1,-1):\n        if a[i] == a[i-1]:\n            result = i\n    return result\n \n#Driver code\na = [1,2,3,4,4,5,5,5]\nn = 0\nm = len(a)-1\nprint(get_Position(a,n,m))\n",
        "generated_testcode": "assert get_Position([1,2,3,4,5,6,7,8,9], 7, 6) == 6\n",
        "test": "assert get_Position([2,5,4],3,2) == 2\nassert get_Position([4,3],2,2) == 2\nassert get_Position([1,2,3,4],4,1) == 4",
        "canonical_solution": "import math as mt \r\ndef get_Position(a,n,m): \r\n    for i in range(n): \r\n        a[i] = (a[i] // m + (a[i] % m != 0))  \r\n    result,maxx = -1,-1\r\n    for i in range(n - 1,-1,-1): \r\n        if (maxx < a[i]): \r\n            maxx = a[i] \r\n            result = i \r\n    return result + 1"
    },
    {
        "number": 276,
        "prompt": "Write a function to find the volume of a cylinder.\ndef volume_cylinder(r,h):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    pi = 3.14159\n    return (pi * r**2 * h)\n\nprint(volume_cylinder(5,10)) # Output: 785. ",
        "generated_testcode": "assert volume_cylinder(3, 5) == 152.36\n",
        "test": "assert volume_cylinder(10,5)==1570.7500000000002\nassert volume_cylinder(4,5)==251.32000000000002\nassert volume_cylinder(4,10)==502.64000000000004",
        "canonical_solution": "def volume_cylinder(r,h):\r\n  volume=3.1415*r*r*h\r\n  return volume"
    },
    {
        "number": 277,
        "prompt": "Write a function to filter a dictionary based on values.\ndef dict_filter(dict,n):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    filtered_dict = {}\n    for key, value in dict.items():\n        if value > n:\n            filtered_dict[key] = value\n    return filtered_dict\n\n# Example usage:\nd = {'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5, 'f': 6}\nprint(dict_filter(d, 3))  # Output: {'c': 3, 'd': 4, 'e': 5, 'f': 6}\nprint(dict_filter(d, 2))  # Output: {'c': 3, 'd': 4, 'e': 5}\nprint(dict_filter(d, 4))  # Output: {'d': 4, 'e': 5, 'f': 6}\nprint(dict_filter(d, 6))  # Output: {'f': 6} ",
        "generated_testcode": "assert dict_filter({'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5}, 3) == {'a': 1, 'b': 2, 'c': 3}\n",
        "test": "assert dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},170)=={'Cierra Vega': 175, 'Alden Cantrell': 180, 'Pierre Cox': 190}\nassert dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},180)=={ 'Alden Cantrell': 180, 'Pierre Cox': 190}\nassert dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},190)=={ 'Pierre Cox': 190}",
        "canonical_solution": "def dict_filter(dict,n):\r\n result = {key:value for (key, value) in dict.items() if value >=n}\r\n return result"
    },
    {
        "number": 278,
        "prompt": "Write a function to find the element count that occurs before the record in the given tuple.\ndef count_first_elements(test_tup):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    count = 0\n    for i in range(len(test_tup)):\n        if i == 0:\n            continue\n        if test_tup[i][0] == test_tup[i-1][0]:\n            count += 1\n        else:\n            break\n    return count\n\n# Test the function with an example tuple\ntest_tup = ((1, 2), (1, 3), (1, 4), (2, 5), (2, 6), (2, 7), (3, 8), (3, 9), (3, 10))\nprint(count_first_elements(test_tup))  # Output: 2\n\n# Test the function with another tuple\ntest_tup = ((1, 2), (1, 3), (1, 4), (2, 5), (2, 6), (3, 7), (3, 8), (3, 9), (3, 10))\nprint(count_first_elements(test_tup))  # Output: 2\n\n# Test the function with a tuple containing only one element\ntest_tup = ((1, 2),)\nprint(count_first_elements(test_tup))  # Output: 0\n\n# Test the function with an empty tuple\ntest_tup = ()\nprint(count_first_elements(test_tup))  # Output: 0\n",
        "generated_testcode": "assert count_first_elements(('a', 'b', 'c', 'a', 'd', 'a', 'e', 'f', 'a') == 3\n\n# The output should be 3, as there are 3 elements before the first 'a' in the tuple. ",
        "test": "assert count_first_elements((1, 5, 7, (4, 6), 10) ) == 3\nassert count_first_elements((2, 9, (5, 7), 11) ) == 2\nassert count_first_elements((11, 15, 5, 8, (2, 3), 8) ) == 4",
        "canonical_solution": "def count_first_elements(test_tup):\r\n  for count, ele in enumerate(test_tup):\r\n    if isinstance(ele, tuple):\r\n      break\r\n  return (count) "
    },
    {
        "number": 279,
        "prompt": "Write a function to find the nth decagonal number.\ndef is_num_decagonal(n): \n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    num = (n * (3 * n - 1) // 2)\n    return num ",
        "generated_testcode": "assert is_num_decagonal(1) == 1\n",
        "test": "assert is_num_decagonal(3) == 27\nassert is_num_decagonal(7) == 175\nassert is_num_decagonal(10) == 370",
        "canonical_solution": "def is_num_decagonal(n): \r\n\treturn 4 * n * n - 3 * n "
    },
    {
        "number": 280,
        "prompt": "Write a function to search an element in the given array by using sequential search.\ndef sequential_search(dlist, item):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": true,
        "answer": "    pos = 0\n    found = False\n    while pos < len(dlist) and not found:\n        if dlist[pos] == item:\n            found = True\n        else:\n            pos = pos + 1\n    return found\n\n# Example usage:\ndlist = [2, 6, 4, 8, 9, 10]\nprint(sequential_search(dlist, 6)) # True\nprint(sequential_search(dlist, 7)) # False\n\n# Time Complexity: O(n)\n\n# Write a function to search an element in the given array by using binary search.\ndef binary_search(alist, item):\n    first = 0\n    last = len(alist) - 1\n    found = False\n    while first <= last and not found:\n        mid = (first + last) // 2\n        if alist[mid] == item:\n            found = True\n        else:\n            if item < alist[mid]:\n                last = mid - 1\n            else:\n                first = mid + 1\n    return found\n\n# Example usage:\nalist = [2, 4, 6, 8, 9, 10]\nprint(binary_search(alist, 6)) # True\nprint(binary_search(alist, 7)) # False\n\n# Time Complexity: O(log n) ",
        "generated_testcode": "assert sequential_search([1, 2, 3, 4, 5, 6, 7, 8, 9], 5) == True\n",
        "test": "assert sequential_search([11,23,58,31,56,77,43,12,65,19],31) == (True, 3)\nassert sequential_search([12, 32, 45, 62, 35, 47, 44, 61],61) == (True, 7)\nassert sequential_search([9, 10, 17, 19, 22, 39, 48, 56],48) == (True, 6)",
        "canonical_solution": "def sequential_search(dlist, item):\r\n    pos = 0\r\n    found = False\r\n    while pos < len(dlist) and not found:\r\n        if dlist[pos] == item:\r\n            found = True\r\n        else:\r\n            pos = pos + 1\r\n    return found, pos"
    },
    {
        "number": 281,
        "prompt": "Write a python function to check if the elements of a given list are unique or not.\ndef all_unique(test_list):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    #Create a set from the list\n    unique_set = set(test_list)\n    #Check if the length of the set and list are equal or not\n    if len(unique_set) == len(test_list):\n        return True\n    else:\n        return False\n\n#Test the function\ntest_list = [1,2,3,4,5,6]\nprint(all_unique(test_list)) #True\ntest_list = [1,2,3,4,5,5]\nprint(all_unique(test_list)) #False ",
        "generated_testcode": "assert all_unique([1, 2, 3, 4, 5]) == True\n",
        "test": "assert all_unique([1,2,3]) == True\nassert all_unique([1,2,1,2]) == False\nassert all_unique([1,2,3,4,5]) == True",
        "canonical_solution": "def all_unique(test_list):\r\n    if len(test_list) > len(set(test_list)):\r\n        return False\r\n    return True"
    },
    {
        "number": 282,
        "prompt": "Write a function to substaract two lists using map and lambda function.\ndef sub_list(nums1,nums2):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    return list(map(lambda x,y: x-y, nums1, nums2))\n\n# Example usage:\nnums1 = [1,2,3,4]\nnums2 = [5,6,7]\nprint(sub_list(nums1,nums2)) #[-4, -4, -4]\n\n# Output: [-4, -4, -4] ",
        "generated_testcode": "assert sub_list([1,2,3],[4,5,6]) == [-3,-3,-3]\n",
        "test": "assert sub_list([1, 2, 3],[4,5,6])==[-3,-3,-3]\nassert sub_list([1,2],[3,4])==[-2,-2]\nassert sub_list([90,120],[50,70])==[40,50]",
        "canonical_solution": "def sub_list(nums1,nums2):\r\n  result = map(lambda x, y: x - y, nums1, nums2)\r\n  return list(result)"
    },
    {
        "number": 283,
        "prompt": "Write a python function to check whether the frequency of each digit is less than or equal to the digit itself.\ndef validate(n): \n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    digits = str(n) \n    count = [0] * 10\n    for i in range(len(digits)): \n        count[int(digits[i])] += 1\n    for i in range(10): \n        if count[i] > i: \n            return False\n    return True\n  \n# Driver code \nn = 1234 \nif validate(n): \n    print(\"Yes\") \nelse: \n    print(\"No\") ",
        "generated_testcode": "assert validate(123456789) == True\n",
        "test": "assert validate(1234) == True\nassert validate(51241) == False\nassert validate(321) == True",
        "canonical_solution": "def validate(n): \r\n    for i in range(10): \r\n        temp = n;  \r\n        count = 0; \r\n        while (temp): \r\n            if (temp % 10 == i): \r\n                count+=1;  \r\n            if (count > i): \r\n                return False\r\n            temp //= 10; \r\n    return True"
    },
    {
        "number": 284,
        "prompt": "Write a function to check whether all items of a list are equal to a given string.\ndef check_element(list,element):\n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    for i in list:\n        if i != element:\n            return False\n    return True\n\n# Example usage:\nprint(check_element(['apple','apple','apple','apple'], 'apple')) # Output: True\nprint(check_element(['apple','orange','banana'], 'apple')) # Output: False\nprint(check_element([], 'apple')) # Output: False\n\n# Test your function with the test cases above. ",
        "generated_testcode": "assert check_element(['a','a','a','a'],'a') == True\n",
        "test": "assert check_element([\"green\", \"orange\", \"black\", \"white\"],'blue')==False\nassert check_element([1,2,3,4],7)==False\nassert check_element([\"green\", \"green\", \"green\", \"green\"],'green')==True",
        "canonical_solution": "def check_element(list,element):\r\n  check_element=all(v== element for v in list)\r\n  return check_element"
    },
    {
        "number": 285,
        "prompt": "Write a function that matches a string that has an a followed by two to three 'b'.\ndef text_match_two_three(text):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    return re.search(r'a{1,3}b{2,3}', text)\n\n# Example usage:\nprint(text_match_two_three('abb'))  # True\nprint(text_match_two_three('abbbb'))  # True\nprint(text_match_two_three('aabbb'))  # True\nprint(text_match_two_three('ab'))  # False\nprint(text_match_two_three('aaabbb'))  # False\nprint(text_match_two_three('abbbbb'))  # False\nprint(text_match_two_three('aabb'))  # True\n```\n\nOutput:\n```\nTrue\nTrue\nTrue\nFalse\nFalse\nFalse\nTrue\n```\n\nExplanation:\n- `a{1,3}` matches one or three 'a' characters.\n- `b{2,3}` matches two or three 'b' characters.\n- The pattern `a{1,3}b{2,3}` matches a string that has one or three 'a' characters followed by two or three 'b' characters. ",
        "generated_testcode": "assert text_match_two_three(\"abbb\") == True\n",
        "test": "assert text_match_two_three(\"ac\")==('Not matched!')\nassert text_match_two_three(\"dc\")==('Not matched!')\nassert text_match_two_three(\"abbbba\")==('Found a match!')",
        "canonical_solution": "import re\r\ndef text_match_two_three(text):\r\n        patterns = 'ab{2,3}'\r\n        if re.search(patterns,  text):\r\n                return 'Found a match!'\r\n        else:\r\n                return('Not matched!')"
    },
    {
        "number": 286,
        "prompt": "Write a function to find the largest sum of contiguous array in the modified array which is formed by repeating the given array k times.\ndef max_sub_array_sum_repeated(a, n, k): \n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    max_sum = 0\n    for i in range(n): \n        sum = 0\n        for j in range(i, n*k, n): \n            sum += a[j%n] \n            max_sum = max(max_sum, sum) \n    return max_sum \n\n# example usage \na = [1,2,3,4] \nn = len(a) \nk = 3\nprint(\"Largest sum of repeated array is\", max_sub_array_sum_repeated(a, n, k)) # Output: 12 ",
        "generated_testcode": "assert max_sub_array_sum_repeated([1, 2, -5, 3, 4, -2, 7, 10, 8], 3, 2) == 33\n",
        "test": "assert max_sub_array_sum_repeated([10, 20, -30, -1], 4, 3) == 30\nassert max_sub_array_sum_repeated([-1, 10, 20], 3, 2) == 59\nassert max_sub_array_sum_repeated([-1, -2, -3], 3, 3) == -1",
        "canonical_solution": "def max_sub_array_sum_repeated(a, n, k): \r\n\tmax_so_far = -2147483648\r\n\tmax_ending_here = 0\r\n\tfor i in range(n*k): \r\n\t\tmax_ending_here = max_ending_here + a[i%n] \r\n\t\tif (max_so_far < max_ending_here): \r\n\t\t\tmax_so_far = max_ending_here \r\n\t\tif (max_ending_here < 0): \r\n\t\t\tmax_ending_here = 0\r\n\treturn max_so_far"
    },
    {
        "number": 287,
        "prompt": "Write a python function to find the sum of squares of first n even natural numbers.\ndef square_Sum(n):  \n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    sum = 0\n    for i in range(1, n+1):\n        if i%2 == 0:\n            sum += i**2\n    return sum\nprint(square_Sum(10)) \n\nOutput: 220\nExplanation: 2^2 + 4^2 + 6^2 + 8^2 + 10^2 = 4+16+36+64+100 = 130\n\nThe function takes an integer n as input and returns the sum of squares of first n even natural numbers. ",
        "generated_testcode": "assert square_Sum(10) == 285\n",
        "test": "assert square_Sum(2) == 20\nassert square_Sum(3) == 56\nassert square_Sum(4) == 120",
        "canonical_solution": "def square_Sum(n):  \r\n    return int(2*n*(n+1)*(2*n+1)/3)"
    },
    {
        "number": 288,
        "prompt": "Write a function to count array elements having modular inverse under given prime number p equal to itself.\ndef modular_inverse(arr, N, P):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    # Initialize count of elements with modular inverse as 0\n    count = 0\n    for i in arr:\n        # Check if modular inverse of i is equal to i\n        if pow(i, P - 2, P) == 1:\n            count += 1\n    return count\n\n\n# Test the function\narr = [1, 2, 3, 4, 5, 6, 7, 8, 9]\nN = 10\nP = 7\nprint(\"Count of elements with modular inverse:\", modular_inverse(arr, N, P))  # Output: 2\n\n# Explanation: Only 1 and 6 satisfy the condition, as 2^6 = 6 (mod 7) and 5^6 = 1 (mod 7) ",
        "generated_testcode": "assert modular_inverse([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 11) == 3\n",
        "test": "assert modular_inverse([ 1, 6, 4, 5 ], 4, 7) == 2\nassert modular_inverse([1, 3, 8, 12, 12], 5, 13) == 3\nassert modular_inverse([2, 3, 4, 5], 4, 6) == 1",
        "canonical_solution": "def modular_inverse(arr, N, P):\r\n\tcurrent_element = 0\r\n\tfor i in range(0, N):\r\n\t\tif ((arr[i] * arr[i]) % P == 1):\r\n\t\t\tcurrent_element = current_element + 1\r\n\treturn current_element"
    },
    {
        "number": 289,
        "prompt": "Write a python function to calculate the number of odd days in a given year.\ndef odd_Days(N): \n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    #Creating a list of all the days in the year\n    days = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]\n    #Variable to store the count of odd days\n    count = 0\n    #Traversing through the list and checking if the day is odd or not\n    for day in days:\n        if day % 2 != 0:\n            count += 1\n    #Printing the count of odd days\n    print(\"The number of odd days in the year is:\", count)\n    \n#Taking input for the year\nN = int(input(\"Enter the number of years: \"))\n#Calling the function\nodd_Days(N) ",
        "generated_testcode": "assert odd_Days(2020) == 256\n",
        "test": "assert odd_Days(100) == 5\nassert odd_Days(50) ==6\nassert odd_Days(75) == 2",
        "canonical_solution": "def odd_Days(N): \r\n    hund1 = N // 100\r\n    hund4 = N // 400\r\n    leap = N >> 2\r\n    ordd = N - leap \r\n    if (hund1): \r\n        ordd += hund1 \r\n        leap -= hund1 \r\n    if (hund4): \r\n        ordd -= hund4 \r\n        leap += hund4 \r\n    days = ordd + leap * 2\r\n    odd = days % 7\r\n    return odd "
    },
    {
        "number": 290,
        "prompt": "Write a function to find the list of lists with maximum length.\ndef max_length(list1):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    max_len = 0\n    result = []\n    for l in list1:\n        if len(l) > max_len:\n            max_len = len(l)\n            result = [l]\n        elif len(l) == max_len:\n            result.append(l)\n    return result\n\n# Test cases\nprint(max_length([[1, 2], [3, 4, 5], [6, 7], [8, 9, 10], [11, 12, 13, 14], [15, 16, 17, 18, 19]]))  # Output: [[11, 12, 13, 14], [15, 16, 17, 18, 19]]\nprint(max_length([[1, 2], [3, 4, 5], [6, 7], [8, 9, 10], [11, 12, 13], [14, 15]]))  # Output: [[8, 9, 10], [11, 12, 13]]\nprint(max_length([[1, 2], [3, 4], [5, 6], [7], [8, 9, 10, 11]]))  # Output: [[8, 9, 10, 11]]\nprint(max_length([[1], [",
        "generated_testcode": "assert max_length([\"apple\", \"banana\", \"cherry\", \"date\", \"elderberry\"]) == [\"apple\", \"banana\", \"cherry\", \"date\", \"elderberry\"]\n",
        "test": "assert max_length([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [13, 15, 17])\nassert max_length([[1], [5, 7], [10, 12, 14,15]])==(4, [10, 12, 14,15])\nassert max_length([[5], [15,20,25]])==(3, [15,20,25])",
        "canonical_solution": "def max_length(list1):\r\n    max_length = max(len(x) for x in  list1 )  \r\n    max_list = max((x) for x in   list1)\r\n    return(max_length, max_list)"
    },
    {
        "number": 291,
        "prompt": "Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\ndef count_no_of_ways(n, k): \n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    dp = [0] * k \n    dp[0] = 1 \n    for i in range(1, n): \n        prev = dp[:] \n        for j in range(1, k): \n            dp[j] = dp[j-1] + (j-1) * prev[j] \n            for m in range(j): \n                if m != 0: \n                    dp[j] += prev[m] \n            dp[0] = prev[j] \n    return dp[-1] \n\n# test the function \nn = 5\nk = 3\nprint(count_no_of_ways(n, k)) ",
        "generated_testcode": "assert count_no_of_ways(3, 2) == 6\n",
        "test": "assert count_no_of_ways(2, 4) == 16\nassert count_no_of_ways(3, 2) == 6\nassert count_no_of_ways(4, 4) == 228",
        "canonical_solution": "def count_no_of_ways(n, k): \r\n\tdp = [0] * (n + 1) \r\n\ttotal = k \r\n\tmod = 1000000007\r\n\tdp[1] = k \r\n\tdp[2] = k * k\t \r\n\tfor i in range(3,n+1): \r\n\t\tdp[i] = ((k - 1) * (dp[i - 1] + dp[i - 2])) % mod \r\n\treturn dp[n]"
    },
    {
        "number": 292,
        "prompt": "Write a python function to find quotient of two numbers.\ndef find(n,m):  \n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    return n//m \n  \nn = 25  \nm = 4\n  \nprint(find(n,m)) ",
        "generated_testcode": "assert find(10,5) == 2\n",
        "test": "assert find(10,3) == 3\nassert find(4,2) == 2\nassert find(20,5) == 4",
        "canonical_solution": "def find(n,m):  \r\n    q = n//m \r\n    return (q)"
    },
    {
        "number": 293,
        "prompt": "Write a function to find the third side of a right angled triangle.\ndef otherside_rightangle(w,h):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    side = (w**2 + h**2) ** 0.5\n    return side\n\n# Test the function\nprint(otherside_rightangle(4, 3)) # Output: 5.0\nprint(otherside_rightangle(3, 4)) # Output: 5.0\nprint(otherside_rightangle(5, 12)) # Output: 13.0\nprint(otherside_rightangle(12, 5)) # Output: 13.0\n\n# The above function takes in two arguments and returns the side of a right angled triangle that is not given as input.\n# It calculates the hypotenuse by using the Pythagorean theorem.\n\n# The Pythagorean theorem states that in a right-angled triangle, the square of the hypotenuse (the longest side) is the sum of the squares of the other two sides.\n# In this case, we are given the lengths of the other two sides and need to find the length of the hypotenuse. ",
        "generated_testcode": "assert otherside_rightangle(3,4) == 5\n",
        "test": "assert otherside_rightangle(7,8)==10.63014581273465\nassert otherside_rightangle(3,4)==5\nassert otherside_rightangle(7,15)==16.55294535724685",
        "canonical_solution": "import math\r\ndef otherside_rightangle(w,h):\r\n  s=math.sqrt((w*w)+(h*h))\r\n  return s"
    },
    {
        "number": 294,
        "prompt": "Write a function to find the maximum value in a given heterogeneous list.\ndef max_val(listval):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    max = listval[0]\n    for i in range(1, len(listval)):\n        if listval[i] > max:\n            max = listval[i]\n    return max\n\nprint(max_val([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 'a', 'b', 'c', 'd', 'e'])  # 10\nprint(max_val(['a', 'b', 'c', 'd', 'e']) # 'e'\nprint(max_val([1, 2, 3, 'a', 'b', 'c', 'd']) # 'd' ",
        "generated_testcode": "assert max_val([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 9\n",
        "test": "assert max_val(['Python', 3, 2, 4, 5, 'version'])==5\nassert max_val(['Python', 15, 20, 25])==25\nassert max_val(['Python', 30, 20, 40, 50, 'version'])==50",
        "canonical_solution": "def max_val(listval):\r\n     max_val = max(i for i in listval if isinstance(i, int)) \r\n     return(max_val)"
    },
    {
        "number": 295,
        "prompt": "Write a function to return the sum of all divisors of a number.\ndef sum_div(number):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    divisors = []\n    for i in range(1, number + 1):\n        if number % i == 0:\n            divisors.append(i)\n    return sum(divisors)\n\n# Test the function with an example\nprint(sum_div(12)) # should return 18 (1+2+3+4+6+12)\nprint(sum_div(15)) # should return 16 (1+3+5+15)\nprint(sum_div(20)) # should return 42 (1+2+4+5+8+10+20)\n\n# Test the function with edge cases\nprint(sum_div(1)) # should return 1\nprint(sum_div(3)) # should return 4\nprint(sum_div(7)) # should return 12 (1+7) ",
        "generated_testcode": "assert sum_div(12) == 18\n",
        "test": "assert sum_div(8)==7\nassert sum_div(12)==16\nassert sum_div(7)==1",
        "canonical_solution": "def sum_div(number):\r\n    divisors = [1]\r\n    for i in range(2, number):\r\n        if (number % i)==0:\r\n            divisors.append(i)\r\n    return sum(divisors)"
    },
    {
        "number": 296,
        "prompt": "Write a python function to count inversions in an array.\ndef get_Inv_Count(arr,n): \n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": true,
        "answer": "    inv_count = 0\n    for i in range(n): \n        for j in range(i + 1, n): \n            if (arr[i] > arr[j]): \n                inv_count += 1\n    return inv_count \n\ndef merge(arr, l, m, r): \n    n1 = m - l + 1\n    n2 = r - m \n  \n    L = [0] * n1 \n    R = [0] * n2 \n  \n    for i in range(0, n1): \n        L[i] = arr[l + i] \n  \n    for j in range(0, n2): \n        R[j] = arr[m + 1 + j] \n  \n    i = 0    \n    j = 0    \n    k = l    \n  \n    while i < n1 and j < n2: \n        if L[i] <= R[j]: \n            arr[k] = L[i] \n            i += 1\n        else: \n            arr[k] = R[j] \n            j += 1\n            inv_count[0] += n1 - i \n        k += 1\n  \n    while i < n1: \n        arr[k] = L[i] \n        i += 1\n        k += 1\n  \n    while j < n2: \n        arr[k] = R[j]",
        "generated_testcode": "assert get_Inv_Count([1, 2, 3, 4, 5, 6, 7], 5) == 0\n",
        "test": "assert get_Inv_Count([1,20,6,4,5],5) == 5\nassert get_Inv_Count([1,2,1],3) == 1\nassert get_Inv_Count([1,2,5,6,1],5) == 3",
        "canonical_solution": "def get_Inv_Count(arr,n): \r\n    inv_count = 0\r\n    for i in range(n): \r\n        for j in range(i + 1,n): \r\n            if (arr[i] > arr[j]): \r\n                inv_count += 1\r\n    return inv_count "
    },
    {
        "number": 297,
        "prompt": "Write a function to flatten a given nested list structure.\ndef flatten_list(list1):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    flattened_list = []\n    for i in list1:\n        if type(i) == list:\n            flattened_list.extend(flatten_list(i))\n        else:\n            flattened_list.append(i)\n    return flattened_list\n\n# Test Cases\nprint(flatten_list([1, 2, [3, 4], [5, [6, 7]]))  # Output: [1, 2, 3, 4, 5, 6, 7]\nprint(flatten_list([1, [2, [3, 4], [5, 6], 7, [8, 9]])  # Output: [1, 2, 3, 4, 5, 6, 7, 8, 9]\nprint(flatten_list([[[1, 2, 3, 4], 5, [6, 7], [8, 9]])  # Output: [1, 2, 3, 4, 5, 6, 7, 8, 9]\nprint(flatten_list([[[1, 2, [3, [4, 5]], 6, [7, 8, 9]])  # Output: [1, 2, 3, 4, 5, 6, 7, 8, 9]\nprint(flatten_list([])  # Output: []\nprint(flatten_list([[[]]) ",
        "generated_testcode": "assert flatten_list([1, [2, [3, 4], 5, [6, [7, 8]]) == [1, 2, 3, 4, 5, 6, 7, 8]\n",
        "test": "assert flatten_list([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]])==[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]\nassert flatten_list([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]])==[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]\nassert flatten_list([[1,2,3], [4,5,6], [10,11,12], [7,8,9]])==[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]",
        "canonical_solution": "def flatten_list(list1):\r\n    result_list = []\r\n    if not list1: return result_list\r\n    stack = [list(list1)]\r\n    while stack:\r\n        c_num = stack.pop()\r\n        next = c_num.pop()\r\n        if c_num: stack.append(c_num)\r\n        if isinstance(next, list):\r\n            if next: stack.append(list(next))\r\n        else: result_list.append(next)\r\n    result_list.reverse()\r\n    return result_list "
    },
    {
        "number": 298,
        "prompt": "Write a function to find the nested list elements which are present in another list.\ndef intersection_nested_lists(l1, l2):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    result = []\n    for sublist in l1:\n        if type(sublist) == list:\n            for element in sublist:\n                if element in l2:\n                    result.append(element)\n        elif sublist in l2:\n            result.append(sublist)\n    return result\n\n# Example usage:\nl1 = [[1, 2, 3], 4, 5, [6, 7, 8], 9]\nl2 = [1, 2, 3, 4, 5]\nprint(intersection_nested_lists(l1, l2))  # Output: [1, 2, 3, 4, 5]\n\n# Example usage:\nl1 = [[1, [2, 3], 4, 5], 6, [7, 8, 9], [10, 11, [12, 13, 14]]]\nl2 = [1, 2, 3, 4, 5, 6, 7]\nprint(intersection_nested_lists(l1, l2))  # Output: [1, 2, 3, 4, 5, 6, 7] ",
        "generated_testcode": "assert intersection_nested_lists([[1, 2, 3], [4, 5], [6, 7]], [1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]\n",
        "test": "assert intersection_nested_lists( [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14],[[12, 18, 23, 25, 45], [7, 11, 19, 24, 28], [1, 5, 8, 18, 15, 16]])==[[12], [7, 11], [1, 5, 8]]\nassert intersection_nested_lists([[2, 3, 1], [4, 5], [6, 8]], [[4, 5], [6, 8]])==[[], []]\nassert intersection_nested_lists(['john','amal','joel','george'],[['john'],['jack','john','mary'],['howard','john'],['jude']])==[['john'], ['john'], ['john'], []]",
        "canonical_solution": "def intersection_nested_lists(l1, l2):\r\n    result = [[n for n in lst if n in l1] for lst in l2]\r\n    return result"
    },
    {
        "number": 299,
        "prompt": "Write a function to calculate the maximum aggregate from the list of tuples.\ndef max_aggregate(stdata):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    max_agg = 0\n    for i in range(len(stdata)):\n        for j in range(len(stdata[i])):\n            if max_agg < stdata[i][j][1]:\n                max_agg = stdata[i][j][1]\n    return max_agg\n\n# Example usage:\nstdata = [(\"apple\", 3), (\"banana\", 4), (\"orange\", 5), (\"grape\", 2), (\"kiwi\", 8)]\nprint(max_aggregate(stdata)) # Output: 8 ",
        "generated_testcode": "assert max_aggregate([(1, 2, 3), (4, 5, 6), (7, 8, 9)]) == 24\n",
        "test": "assert max_aggregate([('Juan Whelan',90),('Sabah Colley',88),('Peter Nichols',7),('Juan Whelan',122),('Sabah Colley',84)])==('Juan Whelan', 212)\nassert max_aggregate([('Juan Whelan',50),('Sabah Colley',48),('Peter Nichols',37),('Juan Whelan',22),('Sabah Colley',14)])==('Juan Whelan', 72)\nassert max_aggregate([('Juan Whelan',10),('Sabah Colley',20),('Peter Nichols',30),('Juan Whelan',40),('Sabah Colley',50)])==('Sabah Colley', 70)",
        "canonical_solution": "from collections import defaultdict\r\ndef max_aggregate(stdata):\r\n    temp = defaultdict(int)\r\n    for name, marks in stdata:\r\n        temp[name] += marks\r\n    return max(temp.items(), key=lambda x: x[1])"
    },
    {
        "number": 300,
        "prompt": "Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\ndef count_binary_seq(n): \n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    dp = [[0 for j in range(2)] for i in range(n+1)] \n    mod = 10**9 + 7\n    for i in range(n+1): \n        dp[i][0] = 1\n        dp[i][1] = 1\n    for l in range(2, 2*n+1): \n        for i in range(n+1): \n            dp[i][0] = ((dp[i][0] * pow(2, n-i, mod)) + dp[i][1]) % mod \n            if i > 0: \n                dp[i][1] = (dp[i-1][0] + dp[i][1]) % mod \n    return dp[n][0] \n\nn = int(input())\nprint(count_binary_seq(n)) ",
        "generated_testcode": "assert count_binary_seq(2) == 2\n",
        "test": "assert count_binary_seq(1) == 2.0\nassert count_binary_seq(2) == 6.0\nassert count_binary_seq(3) == 20.0",
        "canonical_solution": "def count_binary_seq(n): \r\n\tnCr = 1\r\n\tres = 1\r\n\tfor r in range(1, n + 1): \r\n\t\tnCr = (nCr * (n + 1 - r)) / r \r\n\t\tres += nCr * nCr \r\n\treturn res "
    },
    {
        "number": 301,
        "prompt": "Write a function to find the depth of a dictionary.\ndef dict_depth(d):\n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    if not isinstance(d, dict) or len(d) == 0:\n        return 0\n    max_depth = 0\n    for v in d.values():\n        if isinstance(v, dict):\n            depth = dict_depth(v) + 1\n        else:\n            depth = 1\n        if depth > max_depth:\n            max_depth = depth\n    return max_depth\n\n# Example usage:\nd = {\n    'a': 1,\n    'b': {\n        'c': 2,\n        'd': {\n            'e': 3,\n            'f': 4\n        }\n    }\n}\nprint(dict_depth(d)) # Output: 2\n\n# Test with empty dictionary\nprint(dict_depth({})) # Output: 0\n\n# Test with non-dictionary input\nprint(dict_depth(123)) # Output: 0\n\n# Test with nested dictionary\nd = {\n    'a': 1,\n    'b': {\n        'c': 2,\n        'd': {\n            'e': 3,\n            'f': {\n                'g': 4\n            }\n        }\n    }\n}\nprint(dict_depth(d)) # Output: 3 ",
        "generated_testcode": "assert dict_depth({}) == 0\n",
        "test": "assert dict_depth({'a':1, 'b': {'c': {'d': {}}}})==4\nassert dict_depth({'a':1, 'b': {'c':'python'}})==2\nassert dict_depth({1: 'Sun', 2: {3: {4:'Mon'}}})==3",
        "canonical_solution": "def dict_depth(d):\r\n    if isinstance(d, dict):\r\n        return 1 + (max(map(dict_depth, d.values())) if d else 0)\r\n    return 0"
    },
    {
        "number": 302,
        "prompt": "Write a python function to find the most significant bit number which is also a set bit.\ndef set_Bit_Number(n): \n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    i = 1\n    while i <= n: \n        if (n & i) == i: \n            return i \n        i <<= 1\n  \n# Driver code \nn = 22 \nprint(set_Bit_Number(n)) ",
        "generated_testcode": "assert set_Bit_Number(10) == 2\n",
        "test": "assert set_Bit_Number(6) == 4\nassert set_Bit_Number(10) == 8\nassert set_Bit_Number(18) == 16",
        "canonical_solution": "def set_Bit_Number(n): \r\n    if (n == 0): \r\n        return 0; \r\n    msb = 0; \r\n    n = int(n / 2); \r\n    while (n > 0): \r\n        n = int(n / 2); \r\n        msb += 1; \r\n    return (1 << msb)"
    },
    {
        "number": 303,
        "prompt": "Write a python function to check whether the count of inversion of two types are same or not.\ndef solve(a,n):   \n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    count = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            if a[i] > a[j]:\n                count += 1\n    return count\n\ndef solve1(a,n):   \n    count = 0\n    for i in range(n-1):\n        for j in range(i+1,n):\n            if a[i] > a[j]:\n                count += 1\n    return count\n\ndef main():\n    a = list(map(int, input().split()))\n    n = len(a)\n    print(solve(a,n))\n    print(solve1(a,n))\n    \nif __name__ == \"__main__\":\n    main()\n    \n#Example Testcase\n#Input:\n# 1 2 3 4 5 6 7\n#Output:\n# 6\n#5\n#Explanation:\n#For the first function, we count the number of inversions, which are 6.\n#For the second function, we count the number of inversions for the last element as well, so it will count 5 inversions. \n#Since both functions are calculating the same thing, we get the same output. ",
        "generated_testcode": "assert solve([1,2,3,4,5,6,7],5) == True\n",
        "test": "assert solve([1,0,2],3) == True\nassert solve([1,2,0],3) == False\nassert solve([1,2,1],3) == True",
        "canonical_solution": "import sys \r\ndef solve(a,n):   \r\n    mx = -sys.maxsize - 1\r\n    for j in range(1,n):  \r\n        if (mx > a[j]):  \r\n            return False  \r\n        mx = max(mx,a[j - 1])    \r\n    return True"
    },
    {
        "number": 304,
        "prompt": "Write a python function to find element at a given index after number of rotations.\ndef find_Element(arr,ranges,rotations,index) :  \n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    # finding the number of rotations  \n    rotations = rotations % len(arr)  \n    # finding the effective index  \n    eff_index = index - rotations  \n    if eff_index < 0:  \n        eff_index += len(arr)  \n    return arr[eff_index]  \n\n# example usage  \narr = [1, 2, 3, 4, 5, 6, 7, 8, 9]  \nranges = 2  \nrotations = 3  \nindex = 5  \nprint(find_Element(arr,ranges,rotations,index)) ",
        "generated_testcode": "assert find_Element([1,2,3,4,5,6,7],5,2,3) == 4\n",
        "test": "assert find_Element([1,2,3,4,5],[[0,2],[0,3]],2,1) == 3\nassert find_Element([1,2,3,4],[[0,1],[0,2]],1,2) == 3\nassert find_Element([1,2,3,4,5,6],[[0,1],[0,2]],1,1) == 1",
        "canonical_solution": "def find_Element(arr,ranges,rotations,index) :  \r\n    for i in range(rotations - 1,-1,-1 ) : \r\n        left = ranges[i][0] \r\n        right = ranges[i][1] \r\n        if (left <= index and right >= index) : \r\n            if (index == left) : \r\n                index = right \r\n            else : \r\n                index = index - 1 \r\n    return arr[index] "
    },
    {
        "number": 305,
        "prompt": "Write a function to match two words from a list of words starting with letter 'p'.\ndef start_withp(words):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    start_with_p = []\n    for word in words:\n        if word[0] == 'p':\n            start_with_p.append(word)\n    return start_with_p\n\nwords = ['python', 'php', 'ruby', 'perl', 'java', 'javascript']\nprint(start_withp(words)) # Output: ['python', 'php']\n\n#Using list comprehension\ndef start_withp(words):\n    return [word for word in words if word[0] == 'p']\n\nwords = ['python', 'php', 'ruby', 'perl', 'java', 'javascript']\nprint(start_withp(words)) # Output: ['python', 'php']\n\n#Using filter()\ndef start_withp(words):\n    return list(filter(lambda word: word[0] == 'p', words))\n\nwords = ['python', 'php', 'ruby', 'perl', 'java', 'javascript']\nprint(start_withp(words)) # Output: ['python', 'php']\n\n#Using regular expression\nimport re\ndef start_withp(words):\n    return list(filter(lambda word: re.match(r'^p', word), words))\n\nwords = ['python', 'php', 'ruby', 'perl', 'java', 'javascript']\nprint(start_withp(words)) # Output: ['python', 'php'] ",
        "generated_testcode": "assert start_withp(['python', 'perl', 'php', 'ruby', 'java']) == ['python', 'php']\n",
        "test": "assert start_withp([\"Python PHP\", \"Java JavaScript\", \"c c++\"])==('Python', 'PHP')\nassert start_withp([\"Python Programming\",\"Java Programming\"])==('Python','Programming')\nassert start_withp([\"Pqrst Pqr\",\"qrstuv\"])==('Pqrst','Pqr')",
        "canonical_solution": "import re\r\ndef start_withp(words):\r\n for w in words:\r\n        m = re.match(\"(P\\w+)\\W(P\\w+)\", w)\r\n        if m:\r\n            return m.groups()"
    },
    {
        "number": 306,
        "prompt": "Write a function to find the maximum sum of increasing subsequence from prefix till ith index and also including a given kth element which is after i, i.e., k > i .\ndef max_sum_increasing_subseq(a, n, index, k):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    a.sort()\n    dp = [0] * (n + 1)\n    dp[0] = 0\n    max_sum = 0\n\n    for i in range(1, n + 1):\n        dp[i] = dp[i - 1] + a[i - 1]\n        for j in range(i):\n            if a[i - 1] > a[j]:\n                dp[i] = max(dp[i], dp[j])\n        if i == k:\n            max_sum = dp[i]\n\n    return max(dp[index], max_sum)\n\n\n\nif __name__ == '__main__':\n    a = [2, 11, 3, 7, 5, 1, 8, 6]\n    n = len(a)\n    index = 3\n    k = 4\n    print(max_sum_increasing_subseq(a, n, index, k))\n",
        "generated_testcode": "assert max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5], 3, 2) == 106\n",
        "test": "assert max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5 ], 7, 4, 6) == 11\nassert max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5 ], 7, 2, 5) == 7\nassert max_sum_increasing_subseq([11, 15, 19, 21, 26, 28, 31], 7, 2, 4) == 71",
        "canonical_solution": "def max_sum_increasing_subseq(a, n, index, k):\r\n\tdp = [[0 for i in range(n)] \r\n\t\t\tfor i in range(n)]\r\n\tfor i in range(n):\r\n\t\tif a[i] > a[0]:\r\n\t\t\tdp[0][i] = a[i] + a[0]\r\n\t\telse:\r\n\t\t\tdp[0][i] = a[i]\r\n\tfor i in range(1, n):\r\n\t\tfor j in range(n):\r\n\t\t\tif a[j] > a[i] and j > i:\r\n\t\t\t\tif dp[i - 1][i] + a[j] > dp[i - 1][j]:\r\n\t\t\t\t\tdp[i][j] = dp[i - 1][i] + a[j]\r\n\t\t\t\telse:\r\n\t\t\t\t\tdp[i][j] = dp[i - 1][j]\r\n\t\t\telse:\r\n\t\t\t\tdp[i][j] = dp[i - 1][j]\r\n\treturn dp[index][k]"
    },
    {
        "number": 307,
        "prompt": "Write a function to get a colon of a tuple.\ndef colon_tuplex(tuplex,m,n):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    # Define the tuple\n    t = (1,2,3,4,5,6)\n    # Return the mth element of the tuple\n    return t[n-1]\n    # Define the tuple\nt = (1,2,3,4,5,6)\n# Print the result\nprint(colon_tuplex(t,3,2)) # Output: 3\n\n# Write a function to get the last element of a tuple\ndef last_element(tup):\n    # Return the last element of the tuple\n    return tup[-1]\n# Define the tuple\nt = (1,2,3,4,5,6)\n# Print the result\nprint(last_element(t)) # Output: 6\n\n# Write a function to get the first and last element of a tuple\ndef first_last(tup):\n    # Return a tuple of the first and last element of the tuple\n    return (tup[0], tup[-1])\n# Define the tuple\nt = (1,2,3,4,5,6)\n# Print the result\nprint(first_last(t)) # Output: (1, 6)\n\n# Write a function to count the number of elements in a tuple\ndef count_elements(tup):\n    # Return the number of elements in the tuple\n    return len(tup)\n# Define the tuple\nt = (1,2,3,4,5,6)\n# Print the result\nprint(count_elements(t)) # Output: 5",
        "generated_testcode": "assert colon_tuplex((1,2,3,4,5,6,7,8,9),2,5) == (3,4,5,6)\n",
        "test": "assert colon_tuplex((\"HELLO\", 5, [], True) ,2,50)==(\"HELLO\", 5, [50], True) \nassert colon_tuplex((\"HELLO\", 5, [], True) ,2,100)==((\"HELLO\", 5, [100],True))\nassert colon_tuplex((\"HELLO\", 5, [], True) ,2,500)==(\"HELLO\", 5, [500], True)",
        "canonical_solution": "from copy import deepcopy\r\ndef colon_tuplex(tuplex,m,n):\r\n  tuplex_colon = deepcopy(tuplex)\r\n  tuplex_colon[m].append(n)\r\n  return tuplex_colon"
    },
    {
        "number": 308,
        "prompt": "Write a function to find the specified number of largest products from two given lists.\ndef large_product(nums1, nums2, N):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    products = []\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            products.append(nums1[i] * nums2[j])\n    products.sort(reverse=True)\n    return products[:N]\n\n# Test the function\nnums1 = [1, 2, 3, 4, 5]\nnums2 = [10, 20, 30, 40, 50]\nN = 3\nprint(large_product(nums1, nums2, N))\n# Output: [200, 150, 120]\n\nnums1 = [2, 3, 4, 5, 6]\nnums2 = [10, 20, 30, 40, 50, 60]\nN = 2\nprint(large_product(nums1, nums2, N))\n# Output: [600, 360] ",
        "generated_testcode": "assert large_product([1, 2, 3, 4, 5], [6, 7, 8, 9], 2) == [56, 68]\n",
        "test": "assert large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],3)==[60, 54, 50]\nassert large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],4)==[60, 54, 50, 48]\nassert large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],5)==[60, 54, 50, 48, 45]",
        "canonical_solution": "def large_product(nums1, nums2, N):\r\n    result = sorted([x*y for x in nums1 for y in nums2], reverse=True)[:N]\r\n    return result"
    },
    {
        "number": 309,
        "prompt": "Write a python function to find the maximum of two numbers.\ndef maximum(a,b):   \n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    if a>=b:\n        return a\n    else:\n        return b\n        \nprint(maximum(20,40)) # should return 40\nprint(maximum(100,50)) # should return 100\nprint(maximum(45,45)) # should return 45\n\n# The function should return the maximum of two numbers given as parameters. ",
        "generated_testcode": "assert maximum(10, 20) == 20\n",
        "test": "assert maximum(5,10) == 10\nassert maximum(-1,-2) == -1\nassert maximum(9,7) == 9",
        "canonical_solution": "def maximum(a,b):   \r\n    if a >= b: \r\n        return a \r\n    else: \r\n        return b "
    },
    {
        "number": 310,
        "prompt": "Write a function to convert a given string to a tuple.\ndef string_to_tuple(str1):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    return tuple(str1.split(','))\n\n# Example usage:\nstr1 = \"apple,banana,cherry\"\nprint(string_to_tuple(str1))  # Output: ('apple', 'banana', 'cherry')\n\n# To check if the input string contains only alphanumeric characters or not\ndef is_alphanumeric(str1):\n    return str1.isalnum()\n\n# Example usage:\nprint(is_alphanumeric(\"apple123\"))  # Output: True\nprint(is_alphanumeric(\"apple#123\"))  # Output: False\n\n# To remove spaces from a string\ndef remove_spaces(str1):\n    return str1.replace(\" \", \"\")\n\n# Example usage:\nprint(remove_spaces(\"hello world\"))  # Output: helloworld\n\n# To check if the input string is an integer or not\ndef is_integer(str1):\n    try:\n        int(str1)\n        return True\n    except ValueError:\n        return False\n\n# Example usage:\nprint(is_integer(\"123\"))  # Output: True\nprint(is_integer(\"123.45\"))  # Output: False\nprint(is_integer(\"abc\"))  # Output: False\n\n# To convert a string to lowercase\ndef to_lowercase(str1):\n    return str1.lower()\n\n# Example usage:\nprint(to_lowercase(\"Hello World\"))  # Output: hello world\n\n# To convert",
        "generated_testcode": "assert string_to_tuple(\"hello\") == (\"h\", \"e\", \"l\", \"l\", \"o\")\n",
        "test": "assert string_to_tuple(\"python 3.0\")==('p', 'y', 't', 'h', 'o', 'n', '3', '.', '0')\nassert string_to_tuple(\"item1\")==('i', 't', 'e', 'm', '1')\nassert string_to_tuple(\"15.10\")==('1', '5', '.', '1', '0')",
        "canonical_solution": "def string_to_tuple(str1):\r\n    result = tuple(x for x in str1 if not x.isspace()) \r\n    return result"
    },
    {
        "number": 311,
        "prompt": "Write a python function to set the left most unset bit.\ndef set_left_most_unset_bit(n): \n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    return n | (n + 1)\n\n#Test the function\nprint(set_left_most_unset_bit(9)) #Output: 10\nprint(set_left_most_unset_bit(0)) #Output: 1\nprint(set_left_most_unset_bit(1)) #Output: 2\nprint(set_left_most_unset_bit(8)) #Output: 9\n\n#Explanation:\n#The left most unset bit in binary representation of a number is the first bit from the right that is 0, and we can set it to 1 by adding 1 to the number.\n#For example, in binary, 9 is 1001 and its left most unset bit is the third bit (counting from right) which is 0, so we add 1 to it to set it to 1000, giving us 10.\n#0 has no unset bits, so we add 1 to get 1.\n#1 has only the leftmost bit set, so we add 1 to it to get 2.\n#8 has the leftmost bit set, so we add 1 to get 10000, which has all bits set except the leftmost. ",
        "generated_testcode": "assert set_left_most_unset_bit(0b111101) == 0b1000000\n",
        "test": "assert set_left_most_unset_bit(10) == 14\nassert set_left_most_unset_bit(12) == 14\nassert set_left_most_unset_bit(15) == 15",
        "canonical_solution": "def set_left_most_unset_bit(n): \r\n    if not (n & (n + 1)): \r\n        return n \r\n    pos, temp, count = 0, n, 0 \r\n    while temp: \r\n        if not (temp & 1): \r\n            pos = count      \r\n        count += 1; temp>>=1\r\n    return (n | (1 << (pos))) "
    },
    {
        "number": 312,
        "prompt": "Write a function to find the volume of a cone.\ndef volume_cone(r,h):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    volume = (1/3)*3.14*(r**2)*h\n    return volume\n\n# Test your function with these values\nprint(volume_cone(5, 10)) # should return 523.6\nprint(volume_cone(7, 12)) # should return 1560.52\nprint(volume_cone(10, 15)) # should return 5236.03\n\n# Write a function to find the volume of a cylinder\ndef volume_cylinder(r,h):\n    volume = 3.14*(r**2)*h\n    return volume\n\n# Test your function with these values\nprint(volume_cylinder(5, 10)) # should return 314.159\nprint(volume_cylinder(7, 12)) # should return 506.283\nprint(volume_cylinder(10, 15)) # should return 942.4778\n\n# Write a function to find the volume of a sphere\ndef volume_sphere(r):\n    volume = (4/3)*3.14*(r**3)\n    return volume\n\n# Test your function with these values\nprint(volume_sphere(5)) # should return 523.6\nprint(volume_sphere(7)) # should return 1509.4\nprint(volume_sphere(10)) # should return 4189",
        "generated_testcode": "assert volume_cone(3,5) == 113.04761904761904762\n",
        "test": "assert volume_cone(5,12)==314.15926535897927\nassert volume_cone(10,15)==1570.7963267948965\nassert volume_cone(19,17)==6426.651371693521",
        "canonical_solution": "import math\r\ndef volume_cone(r,h):\r\n  volume = (1.0/3) * math.pi * r * r * h\r\n  return volume"
    },
    {
        "number": 313,
        "prompt": "Write a python function to print positive numbers in a list.\ndef pos_nos(list1):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    for i in list1:\n        if i > 0:\n            print(i)\n\nlist1 = [-2, 0, 3, -4, 5, 6, 7, -9, 8, 10, -12, 13]\npos_nos(list1)\n\n# Output: 3 5 6 7 8 10 13\n\n# Explanation: The function loops through the list and prints only the positive numbers. ",
        "generated_testcode": "assert pos_nos([-1, 2, 0, 3, -4, 5, 6, -7]) == [2, 3, 5, 6]\n",
        "test": "assert pos_nos([-1,-2,1,2]) == 1,2\nassert pos_nos([3,4,-5]) == 3,4\nassert pos_nos([-2,-3,1]) == 1",
        "canonical_solution": "def pos_nos(list1):\r\n  for num in list1: \r\n    if num >= 0: \r\n       return num "
    },
    {
        "number": 314,
        "prompt": "Write a function to find out the maximum sum such that no two chosen numbers are adjacent for the given rectangular grid of dimension 2 x n.\ndef max_sum_rectangular_grid(grid, n) : \n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    # Initialize variables to store the maximum sum and the maximum sum excluding the current element\n    max_sum = float('-inf')\n    max_sum_exclude = float('-inf')\n    for i in range(n) :\n        for j in range(n) :\n            # Calculate the maximum sum excluding the current element\n            if i == 0 or j == 0 :\n                max_sum_exclude = grid[i][j]\n            else :\n                max_sum_exclude = max(max_sum_exclude, grid[i-1][j], grid[i][j-1])\n            \n            # Calculate the maximum sum including the current element\n            max_sum = max(max_sum, max_sum_exclude + grid[i][j])\n            \n    return max_sum\n\n# Test the function with sample input\ngrid = [[1, 2, 3, 4], [5, 6, 7]]\nn = 3\nprint(max_sum_rectangular_grid(grid, n)) # Output : 20\n\ngrid = [[1, 2, 3, 4], [5, 6, 7], [8, 9, 10]]\nn = 3\nprint(max_sum_rectangular_grid(grid, n)) # Output : 33\n\ngrid = [[1, 2, 3, 4], [5, 6, 7], [8, 9, 10], [11,",
        "generated_testcode": "assert max_sum_rectangular_grid([[1, 2, 3, 4, 5], [6, 7, 8, 9]], 2) == 20\n",
        "test": "assert max_sum_rectangular_grid([ [1, 4, 5], [2, 0, 0 ] ], 3) == 7\nassert max_sum_rectangular_grid([ [ 1, 2, 3, 4, 5], [ 6, 7, 8, 9, 10] ], 5) == 24\nassert max_sum_rectangular_grid([ [7, 9, 11, 15, 19], [21, 25, 28, 31, 32] ], 5) == 81",
        "canonical_solution": "def max_sum_rectangular_grid(grid, n) : \r\n\tincl = max(grid[0][0], grid[1][0]) \r\n\texcl = 0\r\n\tfor i in range(1, n) : \r\n\t\texcl_new = max(excl, incl) \r\n\t\tincl = excl + max(grid[0][i], grid[1][i]) \r\n\t\texcl = excl_new \r\n\treturn max(excl, incl)"
    },
    {
        "number": 315,
        "prompt": "Write a python function to find the first maximum length of even word.\ndef find_Max_Len_Even(str): \n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    str = str.split()\n    max_len = 0\n    even_word = \"\"\n    for word in str:\n        if len(word)%2 == 0:\n            if len(word) > max_len:\n                max_len = len(word)\n                even_word = word\n    return even_word \n\n# test the function\nprint(find_Max_Len_Even(\"I am a good boy\"))  # Output: \"good\" ",
        "generated_testcode": "assert find_Max_Len_Even(\"Python is awesome\") == 4\n",
        "test": "assert find_Max_Len_Even(\"python language\") == \"language\"\nassert find_Max_Len_Even(\"maximum even length\") == \"length\"\nassert find_Max_Len_Even(\"eve\") == \"-1\"",
        "canonical_solution": "def find_Max_Len_Even(str): \r\n    n = len(str) \r\n    i = 0\r\n    currlen = 0\r\n    maxlen = 0\r\n    st = -1\r\n    while (i < n): \r\n        if (str[i] == ' '): \r\n            if (currlen % 2 == 0): \r\n                if (maxlen < currlen): \r\n                    maxlen = currlen \r\n                    st = i - currlen \r\n            currlen = 0 \r\n        else : \r\n            currlen += 1\r\n        i += 1\r\n    if (currlen % 2 == 0): \r\n        if (maxlen < currlen): \r\n            maxlen = currlen \r\n            st = i - currlen \r\n    if (st == -1): \r\n        return \"-1\" \r\n    return str[st: st + maxlen] "
    },
    {
        "number": 316,
        "prompt": "Write a function to find the index of the last occurrence of a given number in a sorted array.\ndef find_last_occurrence(A, x):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    lo, hi = 0, len(A) - 1\n    while lo < hi:\n        mid = (lo + hi) // 2\n        if A[mid] < x:\n            lo = mid + 1\n        else:\n            hi = mid\n    return lo if A[lo] == x else -1\n\n# Test cases\nprint(find_last_occurrence([1, 2, 3, 3, 3, 4, 5], 3))  # 3\nprint(find_last_occurrence([1, 2, 3, 3, 3, 4, 5], 6))  # -1\nprint(find_last_occurrence([1, 2, 3, 3, 3, 4, 5], 1))  # 0\nprint(find_last_occurrence([1, 2, 3, 3, 3, 4, 5], 5))  # 4\nprint(find_last_occurrence([1, 2, 3, 3, 3, 4, 5], 2))  # 1\nprint(find_last_occurrence([1, 2, 3, 3, 3, 4, 5], 4))  # 4\nprint(find_last_occurrence([1, 2, 3, 3, 3, 4, 5], 3))  # 3\nprint(find_last_occurrence([1",
        "generated_testcode": "assert find_last_occurrence([1, 2, 3, 4, 4, 4, 5, 6, 7], 4) == 3\n",
        "test": "assert find_last_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5) == 3\nassert find_last_occurrence([2, 3, 5, 8, 6, 6, 8, 9, 9, 9], 9) == 9\nassert find_last_occurrence([2, 2, 1, 5, 6, 6, 6, 9, 9, 9], 6) == 6",
        "canonical_solution": "def find_last_occurrence(A, x):\r\n    (left, right) = (0, len(A) - 1)\r\n    result = -1\r\n    while left <= right:\r\n        mid = (left + right) // 2\r\n        if x == A[mid]:\r\n            result = mid\r\n            left = mid + 1\r\n        elif x < A[mid]:\r\n            right = mid - 1\r\n        else:\r\n            left = mid + 1\r\n    return result "
    },
    {
        "number": 317,
        "prompt": "Write a function to reflect the modified run-length encoding from a list.\ndef modified_encode(alist):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    if not alist:\n        return []\n    result = []\n    count = 1\n    for i in range(1, len(alist)):\n        if alist[i] == alist[i-1]:\n            count += 1\n        else:\n            result.append((alist[i-1], count))\n            count = 1\n    result.append((alist[-1], count) if count != 1 else alist[-1])\n    return result\n\n# Test the function\nalist = [1, 1, 1, 2, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 5, 5, 5]\nprint(modified_encode(alist))  # [(1, 3), 2, (3, 4), (4, 4), 5, 2]\n",
        "generated_testcode": "assert modified_encode([\"a\", \"a\", \"a\", \"b\", \"b\", \"b\", \"c\", \"c\", \"c\", \"c\", \"c\"]) == [(\"a\", 3), (\"b\", 2), (\"c\", 3)]\n",
        "test": "assert modified_encode([1,1,2,3,4,4,5,1])==[[2, 1], 2, 3, [2, 4], 5, 1]\nassert modified_encode('automatically')==['a', 'u', 't', 'o', 'm', 'a', 't', 'i', 'c', 'a', [2, 'l'], 'y']\nassert modified_encode('python')==['p', 'y', 't', 'h', 'o', 'n']",
        "canonical_solution": "from itertools import groupby\r\ndef modified_encode(alist):\r\n        def ctr_ele(el):\r\n            if len(el)>1: return [len(el), el[0]]\r\n            else: return el[0]\r\n        return [ctr_ele(list(group)) for key, group in groupby(alist)]"
    },
    {
        "number": 318,
        "prompt": "Write a python function to find the maximum volume of a cuboid with given sum of sides.\ndef max_volume (s): \n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    max_vol = 0\n    for i in range(1,s):\n        for j in range(i, s):\n            for k in range(j, s):\n                if i*i + j*j + k*k == s:\n                    vol = i*j*k\n                    if vol > max_vol:\n                        max_vol = vol\n                        length = i\n                        breath = j\n                        height = k\n    return (length, breath, height, max_vol)\n\ns = int(input(\"Enter the sum of sides of the cuboid: \"))\nlength, breath, height, vol = max_volume(s)\nprint(\"Length: \", length, \" Breath: \", breath, \" Height: \", height, \" Max volume: \", vol)\n\n# Example Output: \n# Enter the sum of sides of the cuboid: 12\n# Length:  2 Breath:  2 Height:  2 Max volume:  8 ",
        "generated_testcode": "assert max_volume(10) == 1\n",
        "test": "assert max_volume(8) == 18\nassert max_volume(4) == 2\nassert max_volume(1) == 0",
        "canonical_solution": "def max_volume (s): \r\n    maxvalue = 0\r\n    i = 1\r\n    for i in range(s - 1): \r\n        j = 1\r\n        for j in range(s): \r\n            k = s - i - j \r\n            maxvalue = max(maxvalue, i * j * k)         \r\n    return maxvalue "
    },
    {
        "number": 319,
        "prompt": "Write a function to find all five characters long word in the given string by using regex.\ndef find_long_word(text):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    words = text.split()\n    result = []\n    for word in words:\n        if len(word) == 5:\n            result.append(word)\n    return result\n\n# Test cases\nprint(find_long_word(\"Python is a high-level programming language\"))  # Output: ['Python']\nprint(find_long_word(\"Hello, world!\"))  # Output: []\nprint(find_long_word(\"I am a developer at Google\"))  # Output: []\nprint(find_long_word(\"Regular expressions are very powerful tool\"))  # Output: ['Regular', 'powerful']\n\n# Using regex\nimport re\n\ndef find_long_word_regex(text):\n    pattern = r\"\\b\\w{5}\\b\"\n    return re.findall(pattern, text)\n\n# Test cases\nprint(find_long_word_regex(\"Python is a high-level programming language\"))  # Output: ['Python']\nprint(find_long_word_regex(\"Hello, world!\"))  # Output: []\nprint(find_long_word_regex(\"I am a developer at Google\"))  # Output: []\nprint(find_long_word_regex(\"Regular expressions are very powerful tool\"))  # Output: ['Regular', 'powerful'] ",
        "generated_testcode": "assert find_long_word(\"The quick brown fox jumps over the lazy dog\") == \"quick\"\n",
        "test": "assert find_long_word('Please move back to strem') == ['strem']\nassert find_long_word('4K Ultra HD streaming player') == ['Ultra']\nassert find_long_word('Streaming Media Player') == ['Media']",
        "canonical_solution": "import re\r\ndef find_long_word(text):\r\n  return (re.findall(r\"\\b\\w{5}\\b\", text))"
    },
    {
        "number": 320,
        "prompt": "Write a function to calculate the difference between the squared sum of first n natural numbers and the sum of squared first n natural numbers.\ndef sum_difference(n):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    sum_of_squares = (n*(n+1)*(2*n+1))/6\n    square_of_sum = (n*(n+1)*(2*n+1)/3\n    return int(square_of_sum**2 - sum_of_squares)\n\nprint(sum_difference(100)) # Output: 25164150\nprint(sum_difference(50))  # Output: 20842870\nprint(sum_difference(1000)) # Output: 1679009060\nprint(sum_difference(10000)) # Output: 251641500\n\n# We are using the formula for sum of squares of first n natural numbers and the formula for sum of first n natural numbers. \n# The formula for the sum of squares of first n natural numbers is given by (n*(n+1)*(2n+1)/6 and the formula for the sum of first n natural numbers is given by (n*(n+1)/2. \n# The formula for the difference between the two is given by (n*(n+1)*(2n+1)(3n+1)/12. ",
        "generated_testcode": "assert sum_difference(10) == 2640\n",
        "test": "assert sum_difference(12)==5434\nassert sum_difference(20)==41230\nassert sum_difference(54)==2151270",
        "canonical_solution": "def sum_difference(n):\r\n    sumofsquares = 0\r\n    squareofsum = 0\r\n    for num in range(1, n+1):\r\n        sumofsquares += num * num\r\n        squareofsum += num\r\n    squareofsum = squareofsum ** 2\r\n    return squareofsum - sumofsquares"
    },
    {
        "number": 321,
        "prompt": "Write a function to find the demlo number for the given number.\ndef find_demlo(s): \n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    #If the length of the string is 1 then return the number itself\n    if len(s) == 1:\n        return int(s)\n    \n    #If the length of the string is more than 1, then\n    #check if the number is even or odd\n    if int(s) % 2 == 0:\n        #If even then divide the number by 2 and recursively call the function\n        return find_demlo(str(int(s)//2) + str(int(s)//2))\n    else:\n        #If odd then multiply the number by 3 and 1 and add 1 and recursively call the function\n        return find_demlo(str(int(s)*3 + 1)\n    \n    #Test the function with an example\n    print(find_demlo(\"123\"))\n    print(find_demlo(\"456\"))\n    print(find_demlo(\"15\"))\n    print(find_demlo(\"27\"))\n\nOutput:\n46\n46\n165\n87\n\n\nExplanation:\n123 -> 123 -> 154 -> 154 -> 165\n456 -> 456 -> 228 -> 114 -> 57 -> 87\n15 -> 46\n27 -> 87 ",
        "generated_testcode": "assert find_demlo(123456) == 123456\n",
        "test": "assert find_demlo(\"111111\") == '12345654321'\nassert find_demlo(\"1111\") == '1234321'\nassert find_demlo(\"13333122222\") == '123456789101110987654321'",
        "canonical_solution": "def find_demlo(s): \r\n\tl = len(s) \r\n\tres = \"\" \r\n\tfor i in range(1,l+1): \r\n\t\tres = res + str(i) \r\n\tfor i in range(l-1,0,-1): \r\n\t\tres = res + str(i) \r\n\treturn res \t"
    },
    {
        "number": 322,
        "prompt": "Write a function to find all index positions of the minimum values in a given list.\ndef position_min(list1):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    min_value = min(list1)\n    result = []\n    for i in range(len(list1)):\n        if list1[i] == min_value:\n            result.append(i)\n    return result\n\n# Example usage:\nprint(position_min([3, 2, 7, 2, 1, 4, 2, 8, 5, 1]))  # Output: [2, 3, 6]\nprint(position_min([5, 10, 8, 9, 7, 3, 11]))  # Output: [4]\nprint(position_min([1, 1, 1, 1, 1, 1, 1]))  # Output: [0, 1, 2, 3, 4]\nprint(position_min([]))  # Output: []\n\n# Test your function with the examples above and see if it produces the expected output. ",
        "generated_testcode": "assert position_min([3, 5, 1, 2, 7, 5, 2]) == [2, 4]\n",
        "test": "assert position_min([12,33,23,10,67,89,45,667,23,12,11,10,54])==[3,11]\nassert position_min([1,2,2,2,4,4,4,5,5,5,5])==[0]\nassert position_min([2,1,5,6,8,3,4,9,10,11,8,12])==[1]",
        "canonical_solution": "def position_min(list1):\r\n    min_val = min(list1)\r\n    min_result = [i for i, j in enumerate(list1) if j == min_val]\r\n    return min_result"
    },
    {
        "number": 323,
        "prompt": "Write a function to re-arrange the given array in alternating positive and negative items.\ndef right_rotate(arr, n, out_of_place, cur):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    for i in range(cur, out_of_place):\n        arr[i], arr[out_of_place] = arr[out_of_place], arr[i]\n    out_of_place += 1\n    return out_of_place\n\ndef rearrange_array(arr, n):\n    out_of_place = 0\n    for i in range(n):\n        if (arr[i] >= 0 and arr[out_of_place] < 0) or (arr[i] < 0 and arr[out_of_place] >= 0):\n            out_of_place = right_rotate(arr, n, out_of_place)\n        else:\n            i += 1\n    return arr\n\n# test the function\narr = [1, -2, 3, -4, 5, 6, -7, 8, 9, -10]\nn = len(arr)\nprint(\"Array after rearrangement is:\", rearrange_array(arr, n)) ",
        "generated_testcode": "assert right_rotate([1, -2, 3, -4, 5, -6, 7, -8], 6, 0) == [1, -2, 3, -4, 5, -6, 7, -8]\n",
        "test": "assert re_arrange([-5, -2, 5, 2, 4,\t7, 1, 8, 0, -8], 10) == [-5, 5, -2, 2, -8, 4, 7, 1, 8, 0]\nassert re_arrange([1, 2, 3, -4, -1, 4], 6) == [-4, 1, -1, 2, 3, 4]\nassert re_arrange([4, 7, 9, 77, -4, 5, -3, -9], 8) == [-4, 4, -3, 7, -9, 9, 77, 5]",
        "canonical_solution": "def right_rotate(arr, n, out_of_place, cur):\r\n\ttemp = arr[cur]\r\n\tfor i in range(cur, out_of_place, -1):\r\n\t\tarr[i] = arr[i - 1]\r\n\tarr[out_of_place] = temp\r\n\treturn arr\r\ndef re_arrange(arr, n):\r\n\tout_of_place = -1\r\n\tfor index in range(n):\r\n\t\tif (out_of_place >= 0):\r\n\t\t\tif ((arr[index] >= 0 and arr[out_of_place] < 0) or\r\n\t\t\t(arr[index] < 0 and arr[out_of_place] >= 0)):\r\n\t\t\t\tarr = right_rotate(arr, n, out_of_place, index)\r\n\t\t\t\tif (index-out_of_place > 2):\r\n\t\t\t\t\tout_of_place += 2\r\n\t\t\t\telse:\r\n\t\t\t\t\tout_of_place = - 1\r\n\t\tif (out_of_place == -1):\r\n\t\t\tif ((arr[index] >= 0 and index % 2 == 0) or\r\n\t\t\t (arr[index] < 0 and index % 2 == 1)):\r\n\t\t\t\tout_of_place = index\r\n\treturn arr"
    },
    {
        "number": 324,
        "prompt": "Write a function to extract the sum of alternate chains of tuples.\ndef sum_of_alternates(test_tuple):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    sum_of_alts = 0\n    # check if tuple is empty\n    if len(test_tuple) == 0:\n        return 0\n    # get the first element of the tuple\n    first_element = test_tuple[0]\n    # traverse through the tuple\n    for i in range(len(test_tuple)):\n        # check if the element is even or odd\n        if i % 2 == 0:\n            # if even, add to sum\n            sum_of_alts += test_tuple[i][0]\n        else:\n            # if odd, add the second element\n            sum_of_alts += test_tuple[i][1]\n    return sum_of_alts\n\n# test the function with some examples\nprint(sum_of_alternates(((1,2), (3,4), (5,6), (7,8))) == 12)\nprint(sum_of_alternates(((1,2,3), (4,5,6), (7,8,9), (10,11,12)) == 20)\nprint(sum_of_alternates(()) == 0)\n\n# test the function with some edge cases\nprint(sum_of_alternates(((1,) == 1)\nprint(sum_of_alternates(((1,2,3) == 4)\nprint(sum_of_alternates(((1,2,3,4) == 6)\nprint(sum_of_",
        "generated_testcode": "assert sum_of_alternates((1, 2, 3, 4, 5, 6, 7, 8, 9) == 25\n",
        "test": "assert sum_of_alternates((5, 6, 3, 6, 10, 34)) == (46, 18)\nassert sum_of_alternates((1, 2, 3, 4, 5)) == (6, 9)\nassert sum_of_alternates((6, 7, 8, 9, 4, 5)) == (21, 18)",
        "canonical_solution": "def sum_of_alternates(test_tuple):\r\n  sum1 = 0\r\n  sum2 = 0\r\n  for idx, ele in enumerate(test_tuple):\r\n    if idx % 2:\r\n      sum1 += ele\r\n    else:\r\n      sum2 += ele\r\n  return ((sum1),(sum2)) "
    },
    {
        "number": 325,
        "prompt": "Write a python function to find the minimum number of squares whose sum is equal to a given number.\ndef get_Min_Squares(n):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    min_squares = [0] * (n + 1)\n    for i in range(1, n + 1):\n        min_squares[i] = i\n        j = 1\n        while (j * j <= i):\n            min_squares[i] = min(min_squares[i], min_squares[i - j * j] + 1)\n            j += 1\n    return min_squares[n]\n\n\nn = int(input(\"Enter a number: \"))\nprint(\"Minimum number of squares required:\", get_Min_Squares(n))\n\n# Test case\n# get_Min_Squares(17) -> Output: 4 (4^2 + 9^2)\n# get_Min_Squares(25) -> Output: 2 (5^2 + 2^2)\n# get_Min_Squares(36) -> Output: 4 (4^2 + 4^2 + 16^2)\n# get_Min_Squares(100) -> Output: 4 (10^2 + 10^2 + 2^2 + 2^2)\n\n# Time Complexity: O(n * sqrt(n)) ",
        "generated_testcode": "assert get_Min_Squares(17) == 1\n",
        "test": "assert get_Min_Squares(6) == 3\nassert get_Min_Squares(2) == 2\nassert get_Min_Squares(4) == 1",
        "canonical_solution": "def get_Min_Squares(n):\r\n    if n <= 3:\r\n        return n;\r\n    res = n \r\n    for x in range(1,n + 1):\r\n        temp = x * x;\r\n        if temp > n:\r\n            break\r\n        else:\r\n            res = min(res,1 + get_Min_Squares(n  - temp)) \r\n    return res;"
    },
    {
        "number": 326,
        "prompt": "Write a function to get the word with most number of occurrences in the given strings list.\ndef most_occurrences(test_list):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    # create a dictionary to store word and its frequency\n    word_dict = {}\n\n    # iterate over each word in the list and count the frequency\n    for word in test_list:\n        if word not in word_dict:\n            word_dict[word] = 1\n        else:\n            word_dict[word] += 1\n\n    # find the word with max frequency\n    max_freq = 0\n    max_word = ''\n    for k, v in word_dict.items():\n        if v > max_freq:\n            max_freq = v\n            max_word = k\n\n    return max_word\n\n\n# test the function\ntest_list = ['apple', 'banana', 'apple', 'orange', 'apple', 'grape', 'orange', 'banana']\nprint(most_occurrences(test_list))\n# expected output: 'apple'\n\n# test case 2\ntest_list2 = ['cat', 'dog', 'dog', 'cat', 'fish', 'cat']\nprint(most_occurrences(test_list2))\n# expected output: 'cat'\n\n# test case 3\ntest_list3 = ['apple', 'banana', 'orange', 'grape']\nprint(most_occurrences(test_list3))\n# expected output: 'apple' ",
        "generated_testcode": "assert most_occurrences(['apple', 'banana', 'apple', 'orange', 'apple', 'pear', 'apple', 'pear']) == 'apple'\n",
        "test": "assert most_occurrences([\"UTS is best for RTF\", \"RTF love UTS\", \"UTS is best\"] ) == 'UTS'\nassert most_occurrences([\"Its been a great year\", \"this year is so worse\", \"this year is okay\"] ) == 'year'\nassert most_occurrences([\"Families can be reunited\", \"people can be reunited\", \"Tasks can be achieved \"] ) == 'can'",
        "canonical_solution": "from collections import defaultdict \r\n\r\ndef most_occurrences(test_list):\r\n  temp = defaultdict(int)\r\n  for sub in test_list:\r\n    for wrd in sub.split():\r\n      temp[wrd] += 1\r\n  res = max(temp, key=temp.get)\r\n  return (str(res)) "
    },
    {
        "number": 327,
        "prompt": "Write a function to print check if the triangle is isosceles or not.\ndef check_isosceles(x,y,z):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    if x == y or x == z or y == z:\n        print(\"Triangle is isosceles\")\n    else:\n        print(\"Triangle is not isosceles\")\n        \n#Example usage:\ncheck_isosceles(3,4,5) #Output: Triangle is not isosceles\ncheck_isosceles(3,4,4) #Output: Triangle is isosceles\n\n#Write a function to find the maximum value from three numbers\ndef find_max(x,y,z):\n    if x >= y and x >= z:\n        return x\n    elif y >= x and y >= z:\n        return y\n    else:\n        return z\n    \n#Example usage:\nprint(find_max(10,20,30)) #Output: 30\n\n#Write a function to find the minimum value from three numbers\ndef find_min(x,y,z):\n    if x <= y and x <= z:\n        return x\n    elif y <= x and y <= z:\n        return y\n    else:\n        return z\n\n#Example usage:\nprint(find_min(10,20,30)) #Output: 10\n\n#Write a function to find the average of three numbers\ndef find_average(x,y,z):\n    return (x+y+z)/3\n\n#Example usage:\nprint(find_average(20,10,30)) #Output: 20",
        "generated_testcode": "assert check_isosceles(3,4,4) == True\n",
        "test": "assert check_isosceles(6,8,12)==False \nassert check_isosceles(6,6,12)==True\nassert check_isosceles(6,16,20)==False",
        "canonical_solution": "def check_isosceles(x,y,z):\r\n  if x==y or y==z or z==x:\r\n\t   return True\r\n  else:\r\n     return False"
    },
    {
        "number": 328,
        "prompt": "Write a function to rotate a given list by specified number of items to the left direction.\ndef rotate_left(list1,m,n):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    n = n%len(list1)\n    for i in range(n):\n        list1.insert(0,list1.pop())\n    return list1\n\n#Test the function\nprint(rotate_left([1,2,3,4,5,6],2))\nprint(rotate_left([1,2,3,4,5,6,7],3))\nprint(rotate_left([1,2,3,4,5,6],6))\n\n# Output: [3, 4, 5, 6, 1, 2]\n#        [4, 5, 6, 7, 1, 2, 3]\n#        [6, 1, 2, 3, 4, 5] ",
        "generated_testcode": "assert rotate_left([1,2,3,4,5,6,7],2) == [4,5,6,7,1,2]\n",
        "test": "assert rotate_left([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],3,4)==[4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4]\nassert rotate_left([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],2,2)==[3, 4, 5, 6, 7, 8, 9, 10, 1, 2]\nassert rotate_left([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],5,2)==[6, 7, 8, 9, 10, 1, 2]",
        "canonical_solution": "def rotate_left(list1,m,n):\r\n  result =  list1[m:]+list1[:n]\r\n  return result"
    },
    {
        "number": 329,
        "prompt": "Write a python function to count negative numbers in a list.\ndef neg_count(list):\n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    count = 0\n    for i in list:\n        if i < 0:\n            count += 1\n    return count\n\n# test the function with an example list\nmy_list = [1, -2, 3, -4, 5, -6, 7, -8, 9, -10]\nprint(neg_count(my_list)) # output should be 4\n\n# Write a python function to count the number of zeros in a list.\ndef zero_count(list):\n    count = 0\n    for i in list:\n        if i == 0:\n            count += 1\n    return count\n\n# test the function with an example list\nmy_list = [1, 2, 0, 3, 0, 4, 5, 0, 6, 0, 7, 8, 9]\nprint(zero_count(my_list)) # output should be 3\n\n# Write a python function to count the number of even numbers in a list.\ndef even_count(list):\n    count = 0\n    for i in list:\n        if i % 2 == 0:\n            count += 1\n    return count\n\n# test the function with an example list\nmy_list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nprint(even_count(my_list)) # output should be 4\n\n# Write a python function",
        "generated_testcode": "assert neg_count([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 0\n",
        "test": "assert neg_count([-1,-2,3,-4,-5]) == 4\nassert neg_count([1,2,3]) == 0\nassert neg_count([1,2,-3,-10,20]) == 2",
        "canonical_solution": "def neg_count(list):\r\n  neg_count= 0\r\n  for num in list: \r\n    if num <= 0: \r\n      neg_count += 1\r\n  return neg_count "
    },
    {
        "number": 330,
        "prompt": "Write a function to find all three, four, five characters long words in the given string by using regex.\ndef find_char(text):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": true,
        "answer": "    import re\n    pattern = r'\\b\\w{3,5}\\b'\n    result = re.findall(pattern, text)\n    return result\n\n# Test the function\ntext = \"This is a sample text to find all three, four or five characters long words in it.\"\nprint(find_char(text)) # Output: ['This', 'sample', 'text', 'find', 'three,', 'four', 'or', 'five', 'characters']\n\n# This function will find all words with length 3 to 5 characters long.\n# \\b stands for word boundary\n# \\w matches any alphanumeric character (letters, digits, and underscores)\n# {3,5} specifies that the word length should be between 3 to 5\n# \\w{3,5} matches any word with length between 3 to 5\n# \\b\\w{3,5}\\b ensures that it matches only complete words and not partial words\n\n# Explanation:\n# \\b matches the empty string, but only at the beginning or end of a word\n# \\w matches any alphanumeric character, including underscore\n# \\w{3,5} matches any sequence of 3 to 5 alphanumeric characters (including underscore)\n# \\b\\w{3,5}\\b ensures that we match complete words and not partial words\n# \\b matches the empty string, but only at the beginning or end of a word\n# So \\b\\w{3,5}\\b matches any word with length between 3 to",
        "generated_testcode": "assert find_char(\"Hello World\") == [\"Hello\", \"World\"]\n",
        "test": "assert find_char('For the four consumer complaints contact manager AKR reddy') == ['For', 'the', 'four', 'AKR', 'reddy']\nassert find_char('Certain service are subject to change MSR') == ['are', 'MSR']\nassert find_char('Third party legal desclaimers') == ['Third', 'party', 'legal']",
        "canonical_solution": "import re\r\ndef find_char(text):\r\n  return (re.findall(r\"\\b\\w{3,5}\\b\", text))"
    },
    {
        "number": 331,
        "prompt": "Write a python function to count unset bits of a given number.\ndef count_unset_bits(n): \n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    count = 0\n    while n: \n        count += 1\n        n &= (n - 1) \n    return count ",
        "generated_testcode": "assert count_unset_bits(10) == 2\n",
        "test": "assert count_unset_bits(2) == 1\nassert count_unset_bits(4) == 2\nassert count_unset_bits(6) == 1",
        "canonical_solution": "def count_unset_bits(n): \r\n    count = 0\r\n    x = 1\r\n    while(x < n + 1): \r\n        if ((x & n) == 0): \r\n            count += 1\r\n        x = x << 1\r\n    return count  "
    },
    {
        "number": 332,
        "prompt": "Write a function to count character frequency of a given string.\ndef char_frequency(str1):\n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    dict = {}\n    for n in str1:\n        if n in dict:\n            dict[n] += 1\n        else:\n            dict[n] = 1\n    return dict\n\n# Test the function\nprint(char_frequency(\"hello\"))\nprint(char_frequency(\"Python\"))\nprint(char_frequency(\"The quick brown fox jumps over the lazy dog\"))\n",
        "generated_testcode": "assert char_frequency(\"hello world\") == {'h': 1, 'e': 1, 'l': 3, 'o': 2, ' ': 1, 'w': 1, 'r': 1, 'd': 1}\n",
        "test": "assert char_frequency('python')=={'p': 1, 'y': 1, 't': 1, 'h': 1, 'o': 1, 'n': 1}\nassert char_frequency('program')=={'p': 1, 'r': 2, 'o': 1, 'g': 1, 'a': 1, 'm': 1}\nassert char_frequency('language')=={'l': 1, 'a': 2, 'n': 1, 'g': 2, 'u': 1, 'e': 1}",
        "canonical_solution": "def char_frequency(str1):\r\n    dict = {}\r\n    for n in str1:\r\n        keys = dict.keys()\r\n        if n in keys:\r\n            dict[n] += 1\r\n        else:\r\n            dict[n] = 1\r\n    return dict"
    },
    {
        "number": 333,
        "prompt": "Write a python function to sort a list according to the second element in sublist.\ndef Sort(sub_li): \n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    return sorted(sub_li, key = lambda x: x[1]) \n  \n# initial list \nli = [[2, 5, 3], [1, 2, 8], [5, 6, 1], [4, 9, 7], [3, 0, 2]] \n  \n# using lambda function with sorted() \n# sorting the list in ascending order based on the second element \nresult = Sort(li) \n  \nprint(\"Sorted list:\", result) ",
        "generated_testcode": "assert Sort(sub_li) == sorted(sub_li, key=lambda x: x[1])\n\n# The function should return a new list sorted by the second element in each sublist. ",
        "test": "assert Sort([['a', 10], ['b', 5], ['c', 20], ['d', 15]]) == [['b', 5], ['a', 10], ['d', 15], ['c', 20]]\nassert Sort([['452', 10], ['256', 5], ['100', 20], ['135', 15]]) == [['256', 5], ['452', 10], ['135', 15], ['100', 20]]\nassert Sort([['rishi', 10], ['akhil', 5], ['ramya', 20], ['gaur', 15]]) == [['akhil', 5], ['rishi', 10], ['gaur', 15], ['ramya', 20]]",
        "canonical_solution": "def Sort(sub_li): \r\n    sub_li.sort(key = lambda x: x[1]) \r\n    return sub_li "
    },
    {
        "number": 334,
        "prompt": "Write a python function to check whether the triangle is valid or not if sides are given.\ndef check_Validity(a,b,c):  \n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    if a+b>c and a+c>b and b+c>a:  \n        return True\n    else:  \n        return False \na=int(input(\"Enter first side: \"))\nb=int(input(\"Enter second side: \"): \nc=int(input(\"Enter third side: \")\nif check_Validity(a,b,c)==True:  \n    if a**2+b**2==c**2 or a**2+c**2==b**2 or b**2+c**2==a**2:  \n        print(\"It is a valid triangle\")  \n    else:  \n        print(\"It is not a valid triangle\")  \nelse:  \n    print(\"It is not a valid triangle\")  \n#Example\ncheck_Validity(5,4,3)  #It is a valid triangle\ncheck_Validity(7,8,9)  #It is not a valid triangle\ncheck_Validity(3,4,5)  #It is not a valid triangle ",
        "generated_testcode": "assert check_Validity(3,4,5) == True\n",
        "test": "assert check_Validity(1,2,3) == False\nassert check_Validity(2,3,5) == False\nassert check_Validity(7,10,5) == True",
        "canonical_solution": "def check_Validity(a,b,c):  \r\n    if (a + b <= c) or (a + c <= b) or (b + c <= a) : \r\n        return False\r\n    else: \r\n        return True        "
    },
    {
        "number": 335,
        "prompt": "Write a function to find the sum of arithmetic progression.\ndef ap_sum(a,n,d):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    \"\"\"\n    This function takes in the first term, the number of terms and the common difference of an arithmetic progression as input and returns the sum of the arithmetic progression.\n    \"\"\"\n    return (n/2)*(2*a+(n-1)*d)\n\n#Test the function\nprint(ap_sum(1,10,2)) #Output: 55\nprint(ap_sum(1,10,5)) #Output: 30\nprint(ap_sum(2,5,4))  #Output: 30\nprint(ap_sum(1,3,1))  #Output: 6\nprint(ap_sum(5,10,3)) #Output: 100\n",
        "generated_testcode": "assert ap_sum(1,10,2) == 55\n",
        "test": "assert ap_sum(1,5,2)==25\nassert ap_sum(2,6,4)==72\nassert ap_sum(1,4,5)==34",
        "canonical_solution": "def ap_sum(a,n,d):\r\n  total = (n * (2 * a + (n - 1) * d)) / 2\r\n  return total"
    },
    {
        "number": 336,
        "prompt": "Write a function to check whether the given month name contains 28 days or not.\ndef check_monthnum(monthname1):\n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    month_days = {'February': 28, 'June': 30, 'April': 30, 'September': 30, 'November': 30}\n    if monthname1 in month_days:\n        return True\n    else:\n        return False\n\n\n# Test the function\nprint(check_monthnum('February'))  # Output: True\nprint(check_monthnum('June'))    # Output: True\nprint(check_monthnum('January')) # Output: False\nprint(check_monthnum('April'))   # Output: True\nprint(check_monthnum('March'))   # Output: False\nprint(check_monthnum('September'))# Output: True\nprint(check_monthnum('November'))# Output: True\nprint(check_monthnum('December'))# Output: False\n\n\n# Create a dictionary of month names and corresponding days in a year\nmonth_days = {'January': 31, 'February': 28, 'March': 31, 'April': 30, 'May': 31, 'June': 30, 'July': 31, 'August': 31, 'September': 30, 'October': 31, 'November': 30, 'December': 31}\n\n# Write a function to calculate the total number of days in a year\ndef total_days(year):\n    total = 0\n",
        "generated_testcode": "assert check_monthnum(\"February\") == True\n",
        "test": "assert check_monthnum(\"February\")==True\nassert check_monthnum(\"January\")==False\nassert check_monthnum(\"March\")==False",
        "canonical_solution": "def check_monthnum(monthname1):\r\n  if monthname1 == \"February\":\r\n    return True\r\n  else:\r\n    return False"
    },
    {
        "number": 337,
        "prompt": "Write a function that matches a word at the end of a string, with optional punctuation.\ndef text_match_word(text):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    import re\n    pattern = re.compile(r'\\w+$')\n    return pattern.search(text)\n\n# Test cases\nprint(text_match_word(\"Hello, world!\"))  # Output: None\nprint(text_match_word(\"This is a test.\"))  # Output: \"test\"\nprint(text_match_word(\"This is a test\"))  # Output: \"test\"\nprint(text_match_word(\"Test\"))  # Output: \"Test\"\nprint(text_match_word(\"Test.\"))  # Output: \"Test\"\nprint(text_match_word(\"Testing...\"))  # Output: \"Testing\"\nprint(text_match_word(\"Testing.\"))  # Output: \"Testing\"\nprint(text_match_word(\"Testing\"))  # Output: \"Testing\"\nprint(text_match_word(\"Testing! \"))  # Output: \"Testing\" ",
        "generated_testcode": "assert text_match_word(\"Hello, world!\") == True\n",
        "test": "assert text_match_word(\"python.\")==('Found a match!')\nassert text_match_word(\"python.\")==('Found a match!')\nassert text_match_word(\"  lang  .\")==('Not matched!')",
        "canonical_solution": "import re\r\ndef text_match_word(text):\r\n        patterns = '\\w+\\S*$'\r\n        if re.search(patterns,  text):\r\n                return 'Found a match!'\r\n        else:\r\n                return 'Not matched!'"
    },
    {
        "number": 338,
        "prompt": "Write a python function to count the number of substrings with same first and last characters.\ndef check_Equality(s): \n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    count = 0\n    for i in range(len(s)): \n        for j in range(i + 1, len(s) + 1): \n            if s[i] == s[j-1]: \n                count += 1\n    return count \n  \n# Driver Code \ns = \"aabbaa\"\nprint(check_Equality(s)) ",
        "generated_testcode": "assert check_Equality(\"abcd\") == 1\n",
        "test": "assert count_Substring_With_Equal_Ends('aba') == 4\nassert count_Substring_With_Equal_Ends('abcab') == 7\nassert count_Substring_With_Equal_Ends('abc') == 3",
        "canonical_solution": "def check_Equality(s): \r\n    return (ord(s[0]) == ord(s[len(s) - 1])); \r\ndef count_Substring_With_Equal_Ends(s): \r\n    result = 0; \r\n    n = len(s); \r\n    for i in range(n):\r\n        for j in range(1,n-i+1): \r\n            if (check_Equality(s[i:i+j])): \r\n                result+=1; \r\n    return result; "
    },
    {
        "number": 339,
        "prompt": "Write a python function to find the maximum occuring divisor in an interval.\ndef find_Divisor(x,y):  \n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    if x>y:  \n        x,y = y,x # swap values if x > y  \n    for i in range(x,0,-1):  \n        if x%i == 0 and y%i == 0:  \n            return i  \n    return None\n\n# Test the function\nprint(find_Divisor(12,18)) # Output: 6\nprint(find_Divisor(16,24)) # Output: 8\nprint(find_Divisor(17,23)) # Output: 1 ",
        "generated_testcode": "assert find_Divisor(10,20) == 5\n",
        "test": "assert find_Divisor(2,2) == 2\nassert find_Divisor(2,5) == 2\nassert find_Divisor(5,10) == 2",
        "canonical_solution": "def find_Divisor(x,y):  \r\n    if (x==y): \r\n        return y \r\n    return 2"
    },
    {
        "number": 340,
        "prompt": "Write a python function to find the sum of the three lowest positive numbers from a given list of numbers.\ndef sum_three_smallest_nums(lst):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    lst.sort()\n    return lst[0] + lst[1] + lst[2]\n\n\n# Example usage:\nprint(sum_three_smallest_nums([5, 8, 12, -3, 1, 6, 2, 7, 4]))  # Output: 16\nprint(sum_three_smallest_nums([10, 10, 10, 10, 10, 10]))  # Output: 30\nprint(sum_three_smallest_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))  # Output: 14\nprint(sum_three_smallest_nums([1, 2, 3, 4, 5]))  # Output: 6\nprint(sum_three_smallest_nums([-5, -10, -20, -30, -40]))  # Output: -5\n\n# Test cases\nprint(sum_three_smallest_nums([5, 8, 12, -3, 1, 6, 2, 7, 4]) == 16)\nprint(sum_three_smallest_nums([10, 10, 10, 10, 10]) == 30)\nprint(sum_three_smallest_nums([1, 2, 3, 4",
        "generated_testcode": "assert sum_three_smallest_nums([5, 8, 12, 18, 21, 3, 9, 1, 7]) == 17\n",
        "test": "assert sum_three_smallest_nums([10,20,30,40,50,60,7]) == 37\nassert sum_three_smallest_nums([1,2,3,4,5]) == 6\nassert sum_three_smallest_nums([0,1,2,3,4,5]) == 6",
        "canonical_solution": "def sum_three_smallest_nums(lst):\r\n\treturn sum(sorted([x for x in lst if x > 0])[:3])"
    },
    {
        "number": 341,
        "prompt": "Write a function to convert the given set into ordered tuples.\ndef set_to_tuple(s):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    return tuple(sorted(s))\n\n# Example usage:\ns = {1, 2, 3, 4}\nprint(set_to_tuple(s))  # Output: (1, 2, 3, 4)\n\ns = {4, 3, 2, 1}\nprint(set_to_tuple(s))  # Output: (1, 2, 3, 4)\n\ns = {1, 2, 3, 3, 4}\nprint(set_to_tuple(s))  # Output: (1, 2, 3, 4)\n\ns = {2, 3, 4, 5, 1, 2, 3, 4}\nprint(set_to_tuple(s))  # Output: (1, 2, 3, 4, 5) ",
        "generated_testcode": "assert set_to_tuple({1, 2, 3}) == (1, 2, 3)\n",
        "test": "assert set_to_tuple({1, 2, 3, 4, 5}) == (1, 2, 3, 4, 5)\nassert set_to_tuple({6, 7, 8, 9, 10, 11}) == (6, 7, 8, 9, 10, 11)\nassert set_to_tuple({12, 13, 14, 15, 16}) == (12, 13, 14, 15, 16)",
        "canonical_solution": "def set_to_tuple(s):\r\n  t = tuple(sorted(s))\r\n  return (t)"
    },
    {
        "number": 342,
        "prompt": "Write a function to find the smallest range that includes at-least one element from each of the given arrays.\n    def __init__(self, value, list_num, index):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "       self.value = value\n        self.list_num = list_num\n        self.index = index\n\ndef min_range_finder(arr1, arr2, arr3):\n    # function to find the smallest range that includes at-least one element from each of the given arrays\n    # Initialize the result array\n    result = []\n\n    # Initialize variables to store the length of the arrays\n    n1 = len(arr1)\n    n2 = len(arr2)\n    n3 = len(arr3)\n\n    # Initialize pointers for all the arrays\n    i = 0\n    j = 0\n    k = 0\n\n    # Initialize the current minimum and maximum values\n    curr_min = float('inf')\n    curr_max = float('-inf')\n\n    # Loop until all the pointers are in their respective arrays\n    while i < n1 and j < n2 and k < n3:\n\n        # Calculate the minimum value among the three arrays\n        min_val = min(arr1[i], arr2[j], arr3[k])\n\n        # If the minimum value is less than the current minimum, update the current minimum\n        if min_val < curr_min:\n            curr_min = min_val\n            curr_max = max(arr1[i], arr2[j], arr3[k])\n\n        # If the minimum value is equal to the current minimum, check for the maximum value\n        elif min_val == curr_min:\n            curr_max = max(",
        "generated_testcode": "assert smallest_range([[1, 10, 20], [5, 15], [1, 2, 20]) == (1, 20)\n",
        "test": "assert find_minimum_range([[3, 6, 8, 10, 15], [1, 5, 12], [4, 8, 15, 16], [2, 6]]) == (4, 6)\nassert find_minimum_range([[ 2, 3, 4, 8, 10, 15 ], [1, 5, 12], [7, 8, 15, 16], [3, 6]]) == (4, 7)\nassert find_minimum_range([[4, 7, 9, 11, 16], [2, 6, 13], [5, 9, 16, 17], [3, 7]]) == (5, 7)",
        "canonical_solution": "from heapq import heappop, heappush\r\nclass Node:\r\n    def __init__(self, value, list_num, index):\r\n        self.value = value\r\n        self.list_num = list_num\r\n        self.index = index\r\n    def __lt__(self, other):\r\n        return self.value < other.value\r\ndef find_minimum_range(list):\r\n    high = float('-inf')\r\n    p = (0, float('inf'))\r\n    pq = []\r\n    for i in range(len(list)):\r\n        heappush(pq, Node(list[i][0], i, 0))\r\n        high = max(high, list[i][0])\r\n    while True:\r\n        top = heappop(pq)\r\n        low = top.value\r\n        i = top.list_num\r\n        j = top.index\r\n        if high - low < p[1] - p[0]:\r\n            p = (low, high)\r\n        if j == len(list[i]) - 1:\r\n            return p\r\n        heappush(pq, Node(list[i][j + 1], i, j + 1))\r\n        high = max(high, list[i][j + 1])"
    },
    {
        "number": 343,
        "prompt": "Write a function to calculate the number of digits and letters in a string.\ndef dig_let(s):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    digits = 0\n    letters = 0\n    for i in s:\n        if i.isdigit():\n            digits += 1\n        elif i.isalpha():\n            letters += 1\n    return (digits, letters)\n\n# Example usage\nprint(dig_let(\"Hello123\")) # output: (1, 5)\nprint(dig_let(\"123456\")) # output: (5, 0)\nprint(dig_let(\"abcdefg\")) # output: (0, 6)\nprint(dig_let(\"\")) # output: (0, 0)\nprint(dig_let(\"123abc\")) # output: (3, 3)\nprint(dig_let(\"abc123\")) # output: (3, 3)\n\n# Test the function with edge cases\nprint(dig_let(\"123\")) # output: (3, 0)\nprint(dig_let(\"abc\")) # output: (0, 3)\nprint(dig_let(\"1\")) # output: (1, 0)\nprint(dig_let(\"a\")) # output: (0, 1)\nprint(dig_let(\"\")) # output: (0, 0) ",
        "generated_testcode": "assert dig_let(\"Hello123\") == (3, 5)\n",
        "test": "assert dig_let(\"python\")==(6,0)\nassert dig_let(\"program\")==(7,0)\nassert dig_let(\"python3.0\")==(6,2)",
        "canonical_solution": "def dig_let(s):\r\n d=l=0\r\n for c in s:\r\n    if c.isdigit():\r\n        d=d+1\r\n    elif c.isalpha():\r\n        l=l+1\r\n    else:\r\n        pass\r\n return (l,d)"
    },
    {
        "number": 344,
        "prompt": "Write a python function to find number of elements with odd factors in a given range.\ndef count_Odd_Squares(n,m): \n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    count = 0\n    for i in range(n,m+1):\n        if (i%2!=0) and (i**(0.5).is_integer()):\n            count+=1\n    return count\n\n# Testing the function with some sample inputs\nprint(count_Odd_Squares(1,10)) # Output: 2\nprint(count_Odd_Squares(1,15)) # Output: 6\nprint(count_Odd_Squares(1,20)) # Output: 6\nprint(count_Odd_Squares(1,30)) # Output: 10 ",
        "generated_testcode": "assert count_Odd_Squares(1, 10) == 3\n",
        "test": "assert count_Odd_Squares(5,100) == 8\nassert count_Odd_Squares(8,65) == 6\nassert count_Odd_Squares(2,5) == 1",
        "canonical_solution": "def count_Odd_Squares(n,m): \r\n    return int(m**0.5) - int((n-1)**0.5) "
    },
    {
        "number": 345,
        "prompt": "Write a function to find the difference between two consecutive numbers in a given list.\ndef diff_consecutivenums(nums):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    #initialize variables\n    diffs = []\n    n = len(nums)\n    for i in range(n-1):\n        diff = nums[i+1] - nums[i]\n        diffs.append(diff)\n    return diffs\n\n#test the function with a sample input\nprint(diff_consecutivenums([1, 5, 9, 13, 19, 25, 31]))\n#Output: [4, 4, 4, 6]\n\n#improve the function by handling cases where the list has only one or no element\ndef diff_consecutivenums_improved(nums):\n    if len(nums) < 2:\n        return \"Invalid Input\"\n    else:\n        diffs = []\n        n = len(nums)\n        for i in range(n-1):\n            diff = nums[i+1] - nums[i]\n            diffs.append(diff)\n        return diffs\n\n#test the improved function with a sample input\nprint(diff_consecutivenums_improved([1, 5, 9, 13, 19, 25, 31]))\n#Output: [4, 4, 4, 6]\nprint(diff_consecutivenums_improved([1]))\n#Output: Invalid Input\nprint(diff_consecutivenums_improved([]))\n#Output: Invalid",
        "generated_testcode": "assert diff_consecutivenums([1, 2, 3, 4, 5, 6, 7]) == [1, 1, 1, 1]\n",
        "test": "assert diff_consecutivenums([1, 1, 3, 4, 4, 5, 6, 7])==[0, 2, 1, 0, 1, 1, 1]\nassert diff_consecutivenums([4, 5, 8, 9, 6, 10])==[1, 3, 1, -3, 4]\nassert diff_consecutivenums([0, 1, 2, 3, 4, 4, 4, 4, 5, 7])==[1, 1, 1, 1, 0, 0, 0, 1, 2]",
        "canonical_solution": "def diff_consecutivenums(nums):\r\n    result = [b-a for a, b in zip(nums[:-1], nums[1:])]\r\n    return result"
    },
    {
        "number": 346,
        "prompt": "Write a function to find entringer number e(n, k).\ndef zigzag(n, k): \n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    if k == 1: \n        return n\n    elif n % 2 == 0: \n        return n * n // 2\n    else: \n        return n * (n - 1) // 2\n\nn = int(input(\"Enter the value of n: \")) \nk = int(input(\"Enter the value of k: \")) \nprint(\"ZigZag entringer number for n =\", n, \"and k =\", k, \"is:\", zigzag(n, k)) ",
        "generated_testcode": "assert zigzag(5, 3) == 1\n",
        "test": "assert zigzag(4, 3) == 5\nassert zigzag(4, 2) == 4\nassert zigzag(3, 1) == 1",
        "canonical_solution": "def zigzag(n, k): \r\n\tif (n == 0 and k == 0): \r\n\t\treturn 1\r\n\tif (k == 0): \r\n\t\treturn 0\r\n\treturn zigzag(n, k - 1) + zigzag(n - 1, n - k)"
    },
    {
        "number": 347,
        "prompt": "Write a python function to count the number of squares in a rectangle.\ndef count_Squares(m,n): \n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    count = 0\n    for i in range(1,m+1): \n        for j in range(1,n+1): \n            for k in range(1,m+1): \n                if(i<=k and j<=k): \n                    count+=1\n    return count \n\n# Test the function with sample inputs \nprint(count_Squares(3,3)) \nprint(count_Squares(4,5)) \nprint(count_Squares(5,4)) ",
        "generated_testcode": "assert count_Squares(3, 4) == 1\n",
        "test": "assert count_Squares(4,3) == 20\nassert count_Squares(1,2) == 2\nassert count_Squares(2,2) == 5",
        "canonical_solution": "def count_Squares(m,n): \r\n    if (n < m): \r\n        temp = m \r\n        m = n \r\n        n = temp \r\n    return n * (n + 1) * (3 * m - n + 1) // 6"
    },
    {
        "number": 348,
        "prompt": "Write a function to count sequences of given length having non-negative prefix sums that can be generated by given values.\ndef bin_coff(n, r): \n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    dp = [0] * (n+1) \n    dp[0] = 1\n    for i in range(1, n+1): \n        for j in range(1, r+1): \n            if i-j >= 0: \n                dp[i] += dp[i-j] \n    return dp[n] \n\ndef count_sequences(n, k, r): \n    return bin_coff(n+k-1, r) - bin_coff(n+k-2, r) \n\ndef count_sequences_with_sum(n, k, r): \n    res = 0\n    for i in range(1, r+1): \n        res += count_sequences(n, k, i) \n    return res \n\ndef main(): \n    n, k, r = map(int, input().split())\n    print(count_sequences_with_sum(n, k, r)) \n\nmain() ",
        "generated_testcode": "assert bin_coff(5, 3) == 10\n",
        "test": "assert find_ways(4) == 2\nassert find_ways(6) == 5\nassert find_ways(8) == 14",
        "canonical_solution": "def bin_coff(n, r): \r\n\tval = 1\r\n\tif (r > (n - r)): \r\n\t\tr = (n - r) \r\n\tfor i in range(0, r): \r\n\t\tval *= (n - i) \r\n\t\tval //= (i + 1) \r\n\treturn val \r\ndef find_ways(M): \r\n\tn = M // 2\r\n\ta = bin_coff(2 * n, n) \r\n\tb = a // (n + 1) \r\n\treturn (b) "
    },
    {
        "number": 349,
        "prompt": "Write a python function to check whether the given string is a binary string or not.\ndef check(string) :\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    for char in string :\n        if char not in ['0', '1'] :\n            return False\n    return True\n\nstring = input(\"Enter a string : \")\nif check(string) :\n    print(\"The given string is a binary string\")\nelse :\n    print(\"The given string is not a binary string\")\n\n# Test case\n# Enter a string : 1010101010\n# Output : The given string is a binary string\n\n# Enter a string : 123456\n# Output : The given string is not a binary string\n\n# Time Complexity : O(n)\n# Space Complexity : O(1) (since we are not using any additional data structure) ",
        "generated_testcode": "assert check(string) == True\n",
        "test": "assert check(\"01010101010\") == \"Yes\"\nassert check(\"name0\") == \"No\"\nassert check(\"101\") == \"Yes\"",
        "canonical_solution": "def check(string) :\r\n    p = set(string) \r\n    s = {'0', '1'} \r\n    if s == p or p == {'0'} or p == {'1'}: \r\n        return (\"Yes\") \r\n    else : \r\n        return (\"No\") "
    },
    {
        "number": 350,
        "prompt": "Write a python function to minimize the length of the string by removing occurrence of only one character.\ndef minimum_Length(s) : \n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": true,
        "answer": "    count = {} \n    for i in s : \n        if i in count : \n            count[i] += 1\n        else : \n            count[i] = 1\n    min_length = len(s) \n    for i in count : \n        if count[i] > 1 : \n            min_length -= count[i] - 1\n    return min_length \n\n# example usage \ns = \"sssssss\"\nprint(minimum_Length(s)) # Output: 2\n\ns = \"hello\"\nprint(minimum_Length(s)) # Output: 4\n\ns = \"aaaaa\"\nprint(minimum_Length(s)) # Output: 2\n\ns = \"abcd\"\nprint(minimum_Length(s)) # Output: 4 ",
        "generated_testcode": "assert minimum_Length(\"aabcc\") == 3\n",
        "test": "assert minimum_Length(\"mnm\") == 1\nassert minimum_Length(\"abcda\") == 3\nassert minimum_Length(\"abcb\") == 2",
        "canonical_solution": "def minimum_Length(s) : \r\n    maxOcc = 0\r\n    n = len(s) \r\n    arr = [0]*26\r\n    for i in range(n) : \r\n        arr[ord(s[i]) -ord('a')] += 1\r\n    for i in range(26) : \r\n        if arr[i] > maxOcc : \r\n            maxOcc = arr[i] \r\n    return n - maxOcc "
    },
    {
        "number": 351,
        "prompt": "Write a python function to find the first element occurring k times in a given array.\ndef first_Element(arr,n,k): \n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    freq = {}\n    for i in range(n):\n        if arr[i] in freq:\n            freq[arr[i]] += 1\n        else:\n            freq[arr[i]] = 1\n    for i in range(n):\n        if freq[arr[i]] == k:\n            return arr[i]\n    return -1\n\n# Testing the function\narr = [1,2,3,2,1,4,5,2,6,7,2,8,9,2]\nk = 2\nn = len(arr)\nprint(first_Element(arr,n,k))\n\n# Output: 2 ",
        "generated_testcode": "assert first_Element(arr=[1,2,3,4,5,6,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,10],n=9,k=3) == 1\n",
        "test": "assert first_Element([0,1,2,3,4,5],6,1) == 0\nassert first_Element([1,2,1,3,4],5,2) == 1\nassert first_Element([2,3,4,3,5,7,1,2,3,5],10,2) == 2",
        "canonical_solution": "def first_Element(arr,n,k): \r\n    count_map = {}; \r\n    for i in range(0, n): \r\n        if(arr[i] in count_map.keys()): \r\n            count_map[arr[i]] += 1\r\n        else: \r\n            count_map[arr[i]] = 1\r\n        i += 1\r\n    for i in range(0, n):  \r\n        if (count_map[arr[i]] == k): \r\n            return arr[i] \r\n        i += 1 \r\n    return -1"
    },
    {
        "number": 352,
        "prompt": "Write a python function to check whether all the characters in a given string are unique.\ndef unique_Characters(str):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    # Create a dictionary to store the frequency of each character\n    freq = {}\n    for char in str:\n        if char in freq:\n            freq[char] += 1\n        else:\n            freq[char] = 1\n    # Check if any character frequency is greater than 1\n    for char in freq:\n        if freq[char] > 1:\n            return False\n    return True\n\n# Test the function\nprint(unique_Characters(\"abcd\"))  # True\nprint(unique_Characters(\"abca\"))  # False\nprint(unique_Characters(\"hello\"))  # False\nprint(unique_Characters(\"abcde\"))  # True\n\n#Time Complexity: O(n) and Space Complexity: O(min(n, m)\n\n# where n is the length of the string and m is the range of ASCII characters.\n# The worst case scenario is when all characters are unique, then the space complexity is O(min(n, 256) ",
        "generated_testcode": "assert unique_Characters(\"abcdefg\") == True\n",
        "test": "assert unique_Characters('aba') == False\nassert unique_Characters('abc') == True\nassert unique_Characters('abab') == False",
        "canonical_solution": "def unique_Characters(str):\r\n    for i in range(len(str)):\r\n        for j in range(i + 1,len(str)): \r\n            if (str[i] == str[j]):\r\n                return False;\r\n    return True;"
    },
    {
        "number": 353,
        "prompt": "Write a function to remove a specified column from a given nested list.\ndef remove_column(list1, n):\n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    for i in range(len(list1)):\n        list1[i] = list1[i][:n] + list1[i][n+1:]\n    return list1\n\n# Test the function with a sample list\nlist1 = [[1,2,3],[4,5,6],[7,8,9]]\nprint(remove_column(list1, 1)) ",
        "generated_testcode": "assert remove_column([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 1) == [[1, 3], [4, 6], [7, 9]]\n",
        "test": "assert remove_column([[1, 2, 3], [2, 4, 5], [1, 1, 1]],0)==[[2, 3], [4, 5], [1, 1]]\nassert remove_column([[1, 2, 3], [-2, 4, -5], [1, -1, 1]],2)==[[1, 2], [-2, 4], [1, -1]]\nassert remove_column([[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]],0)==[[3], [7], [3], [15, 17], [7], [11]]",
        "canonical_solution": "def remove_column(list1, n):\r\n   for i in list1: \r\n    del i[n] \r\n   return list1"
    },
    {
        "number": 354,
        "prompt": "Write a function to find t-nth term of arithemetic progression.\ndef tn_ap(a,n,d):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    return a+(n-1)*d\n\n#User input\na = int(input(\"Enter the first term of AP: \"))\nn = int(input(\"Enter the number of terms: \"))\nd = int(input(\"Enter the common difference: \"))\n\n#Find the nth term\ntn = tn_ap(a,n,d)\n\n#Print the result\nprint(\"The t-nth term of the AP is:\",tn)\n\n#Example \n#a=2, n=5, d=3\n#tn_ap(a,n,d) = 2+4*3 = 14\n#Output: The t-nth term of the AP is: 14 ",
        "generated_testcode": "assert tn_ap(1,5,2) == 13\n",
        "test": "assert tn_ap(1,5,2)==9\nassert tn_ap(2,6,4)==22\nassert tn_ap(1,4,5)==16",
        "canonical_solution": "def tn_ap(a,n,d):\r\n  tn = a + (n - 1) * d\r\n  return tn"
    },
    {
        "number": 355,
        "prompt": "Write a python function to count the number of rectangles in a circle of radius r.\ndef count_Rectangles(radius):  \n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    count = 0\n    for i in range(1, radius+1):\n        for j in range(i+1, radius+1):\n            count += 1\n    return count\n\n# Test the function\nprint(count_Rectangles(5)) # Expected output: 25\nprint(count_Rectangles(3)) # Expected output: 9\nprint(count_Rectangles(1)) # Expected output: 1\nprint(count_Rectangles(0)) # Expected output: 0\nprint(count_Rectangles(-2)) # Expected output: 0 ",
        "generated_testcode": "assert count_Rectangles(1) == 1\n",
        "test": "assert count_Rectangles(2) == 8\nassert count_Rectangles(1) == 1\nassert count_Rectangles(0) == 0",
        "canonical_solution": "def count_Rectangles(radius):  \r\n    rectangles = 0 \r\n    diameter = 2 * radius \r\n    diameterSquare = diameter * diameter \r\n    for a in range(1, 2 * radius):  \r\n        for b in range(1, 2 * radius): \r\n            diagnalLengthSquare = (a * a +  b * b)  \r\n            if (diagnalLengthSquare <= diameterSquare) : \r\n                rectangles += 1\r\n    return rectangles "
    },
    {
        "number": 356,
        "prompt": "Write a function to find the third angle of a triangle using two angles.\ndef find_angle(a,b):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    c = 180 - a - b\n    return c\n\n# Test your function with the following example\nprint(find_angle(60, 30)) # Output: 90\nprint(find_angle(45, 45)) # Output: 90\nprint(find_angle(90, 30)) # Output: 60\nprint(find_angle(20, 60)) # Output: 100\nprint(find_angle(120, 30)) # Output: 50\n\n# Your function should also work for other inputs\nprint(find_angle(50, 20)) # Output: 80\nprint(find_angle(100, 40)) # Output: 120\nprint(find_angle(80, 50)) # Output: 50\n\n# Bonus: Add error handling to the function to return an error message if the input is not valid (e.g. a+b > 180)\ndef find_angle(a,b):\n    if a + b > 180:\n        return \"Error: Input is not valid\"\n    else:\n        c = 180 - a - b\n        return c\n\nprint(find_angle(90, 30)) # Output: 60\nprint(find_angle(20, 60)) # Output: 100\nprint(find_angle(120, 30)) # Output:",
        "generated_testcode": "assert find_angle(30,60) == 90\n",
        "test": "assert find_angle(47,89)==44\nassert find_angle(45,95)==40\nassert find_angle(50,40)==90",
        "canonical_solution": "def find_angle(a,b):\r\n c = 180 - (a + b)\r\n return c\r\n"
    },
    {
        "number": 357,
        "prompt": "Write a function to find the maximum element of all the given tuple records.\ndef find_max(test_list):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    max_list = []\n    for i in test_list:\n        max_list.append(max(i))\n    return max(max_list)\n\n\n# Test the function with the given example\nexample_list = [(1,2,3,4,5), (6,7,8,9), (10,11,12,13)]\nprint(find_max(example_list)) # Output: 13\n\n# Test the function with an empty tuple\nempty_list = []\nprint(find_max(empty_list)) # Output: None\n\n# Test the function with a single element tuple\nsingle_tuple = (1,2,3)\nprint(find_max(single_tuple)) # Output: TypeError: 'int' object is not iterable\n\n# Test the function with a tuple containing a single element\nsingle_element = (10,)\nprint(find_max(single_element)) # Output: TypeError: 'int' object is not iterable\n\n# Test the function with a tuple containing non-integer values\nnon_integer_tuple = (1.5, 'two', 3.7, 'four')\nprint(find_max(non_integer_tuple)) # Output: TypeError: '>' not supported between instances of 'float' and 'str' ",
        "generated_testcode": "assert find_max([(1, 2, 3), (4, 5, 6), (7, 8, 9)]) == 9\n",
        "test": "assert find_max([(2, 4), (6, 7), (5, 1), (6, 10), (8, 7)]) == 10\nassert find_max([(3, 5), (7, 8), (6, 2), (7, 11), (9, 8)]) == 11\nassert find_max([(4, 6), (8, 9), (7, 3), (8, 12), (10, 9)]) == 12",
        "canonical_solution": "def find_max(test_list):\r\n  res = max(int(j) for i in test_list for j in i)\r\n  return (res) "
    },
    {
        "number": 358,
        "prompt": "Write a function to find modulo division of two lists using map and lambda function.\ndef moddiv_list(nums1,nums2):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    return list(map(lambda x,y: x%y,nums1,nums2))\n\nnums1 = [20,25,30,35,40]\nnums2 = [2,5,10,7]\nprint(moddiv_list(nums1,nums2))\n\n# Output: [0, 0, 0, 3, 3]\n\n# List Comprehension to find squares of even numbers from a list\n\n# Using List Comprehension\ndef square_evens(nums):\n    return [num**2 for num in nums if num%2==0]\n\nnums = [1,2,3,4,5,6,7,8,9]\nprint(square_evens(nums))\n\n# Output: [4, 16, 36, 64]\n\n# Filter even numbers from a list using map and lambda function\n\ndef filter_even(nums):\n    return list(filter(lambda x: x%2==0, nums))\n\nnums = [1,2,3,4,5,6,7,8,9]\nprint(filter_even(nums))\n\n# Output: [2, 4, 6, 8]\n\n# Using list comprehension\ndef filter_even(nums):\n    return [num for num in nums if num%2==0]\n\nnums = [1,2,3,4,5,6",
        "generated_testcode": "assert moddiv_list([1,2,3,4,5],[2,3,4,5]) == [1,1,1,1]\n",
        "test": "assert moddiv_list([4,5,6],[1, 2, 3])==[0, 1, 0]\nassert moddiv_list([3,2],[1,4])==[0, 2]\nassert moddiv_list([90,120],[50,70])==[40, 50]",
        "canonical_solution": "def moddiv_list(nums1,nums2):\r\n  result = map(lambda x, y: x % y, nums1, nums2)\r\n  return list(result)"
    },
    {
        "number": 359,
        "prompt": "Write a python function to check whether one root of the quadratic equation is twice of the other or not.\ndef Check_Solution(a,b,c): \n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    #calculating the discriminant\n    d = b**2 - 4*a*c\n    #if discriminant is less than 0 then roots are imaginary\n    if d < 0: \n        return False\n    #if discriminant is equal to 0 then roots are equal\n    elif d == 0: \n        return True\n    #if discriminant is greater than 0 then roots are real\n    else: \n        #calculating the two roots\n        root1 = (-b + math.sqrt(d))/(2*a) \n        root2 = (-b - math.sqrt(d))/(2*a) \n        #if roots are equal then return true\n        if root1 == root2:\n            return True\n        else:\n            return False\n#test the function\nprint(Check_Solution(2,4,-8)) #Output: True\nprint(Check_Solution(1,3,-4)) #Output: False\nprint(Check_Solution(1,5,-6)) #Output: False ",
        "generated_testcode": "assert Check_Solution(1,2,3) == True\n",
        "test": "assert Check_Solution(1,3,2) == \"Yes\"\nassert Check_Solution(1,2,3) == \"No\"\nassert Check_Solution(1,-5,6) == \"No\"",
        "canonical_solution": "def Check_Solution(a,b,c): \r\n    if (2*b*b == 9*a*c): \r\n        return (\"Yes\"); \r\n    else: \r\n        return (\"No\"); "
    },
    {
        "number": 360,
        "prompt": "Write a function to find the n\u2019th carol number.\ndef get_carol(n): \n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": true,
        "answer": "    if n < 0 or n > 5:\n        return None\n    else: \n        carol_number = ['', 'We three kings', 'We wish you a merry Christmas', 'Good Christmas to you', 'Bring us a tip', 'We wish you a merry Christmas', 'We wish you a merry Christmas and a happy new year']\n        return carol_number[n] ",
        "generated_testcode": "assert get_carol(1) == \"We three kings\"\n",
        "test": "assert get_carol(2) == 7\nassert get_carol(4) == 223\nassert get_carol(5) == 959",
        "canonical_solution": "def get_carol(n): \r\n\tresult = (2**n) - 1\r\n\treturn result * result - 2"
    },
    {
        "number": 361,
        "prompt": "Write a function to remove empty lists from a given list of lists.\ndef remove_empty(list1):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    return [l for l in list1 if l]\n\n#Example usage:\nlist1 = [[], [1, 2, 3], [], [4, 5], [], [6, 7, 8], []]\nprint(remove_empty(list1)) # Output: [[1, 2, 3], [4, 5], [6, 7, 8]]\nlist2 = [[], [1], [], [2], [3, 4, 5, 6], [], [7, 8, 9]]\nprint(remove_empty(list2)) # Output: [[1], [2], [3, 4, 5, 6], [7, 8, 9]] ",
        "generated_testcode": "assert remove_empty([[1, 2, 3], [], [4, 5], [6, 7, 8], []]) == [[1, 2, 3], [4, 5], [6, 7, 8]]\n",
        "test": "assert remove_empty([[], [], [], 'Red', 'Green', [1,2], 'Blue', [], []])==['Red', 'Green', [1, 2], 'Blue']\nassert remove_empty([[], [], [],[],[], 'Green', [1,2], 'Blue', [], []])==[ 'Green', [1, 2], 'Blue']\nassert remove_empty([[], [], [], 'Python',[],[], 'programming', 'language',[],[],[], [], []])==['Python', 'programming', 'language']",
        "canonical_solution": "def remove_empty(list1):\r\n  remove_empty = [x for x in list1 if x]\r\n  return remove_empty"
    },
    {
        "number": 362,
        "prompt": "Write a python function to find the item with maximum occurrences in a given list.\ndef max_occurrences(nums):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    max_count = 0\n    max_item = None\n    counts = {}\n    for num in nums:\n        if num in counts:\n            counts[num] += 1\n        else:\n            counts[num] = 1\n        if counts[num] > max_count:\n            max_count = counts[num]\n            max_item = num\n    return max_item\n\n# Test the function with sample data\nnums = [1, 2, 3, 4, 4, 4, 5, 5, 5, 6, 6, 6, 6, 6]\nprint(max_occurrences(nums)) # Output: 6\n\nnums = [1, 2, 3, 4, 4, 5, 5, 5, 6, 6, 7, 7, 7, 7, 7]\nprint(max_occurrences(nums)) # Output: 7\n\nnums = [1, 2, 3, 4, 5, 6, 7, 8, 9]\nprint(max_occurrences(nums)) # Output: None (since all items have occurrence 1)\n\nnums = []\nprint(max_occurrences(nums)) # Output: None (since list is empty) ",
        "generated_testcode": "assert max_occurrences([1, 2, 3, 2, 4, 5, 2, 6, 2, 3, 7, 2, 8, 9, 2]) == 2\n",
        "test": "assert max_occurrences([1,2,3,1,2,3,12,4,2]) ==  2\nassert max_occurrences([1,2,6,7,0,1,0,1,0]) == 1,0\nassert max_occurrences([1,2,3,1,2,4,1]) == 1",
        "canonical_solution": "def max_occurrences(nums):\r\n    max_val = 0\r\n    result = nums[0] \r\n    for i in nums:\r\n        occu = nums.count(i)\r\n        if occu > max_val:\r\n            max_val = occu\r\n            result = i \r\n    return result"
    },
    {
        "number": 363,
        "prompt": "Write a function to add the k elements to each element in the tuple.\ndef add_K_element(test_list, K):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    new_list = []\n    for element in test_list:\n        new_list.append(element + K)\n    return new_list\n\n\ntest_list = (1, 2, 3, 4, 5, 6, 7)\nK = 2\n\nresult = add_K_element(test_list, K)\nprint(result)  # output: [3, 4, 5, 6, 7, 8]\n\n# You can also use list comprehension\ndef add_K_element(test_list, K):\n    return [element + K for element in test_list]\n\nresult = add_K_element(test_list, K)\nprint(result)  # output: [3, 4, 5, 6, 7, 8]\n\n# Example 2:\n# Write a function to double each element in a tuple.\ndef double_tuple_elements(test_tuple):\n    new_tuple = ()\n    for element in test_tuple:\n        new_tuple += (element * 2,)\n    return new_tuple\n\ntest_tuple = (1, 2, 3, 4, 5, 6)\nresult = double_tuple_elements(test_tuple)\nprint(result)  # output: (2, 4, 6, 8, 10)\n\n# You can also use list comprehension\ndef double_tuple_elements(test_tuple):\n    return tuple([element * 2",
        "generated_testcode": "assert add_K_element([1, 2, 3, 4, 5], 2) == (3, 4, 5, 6)\n",
        "test": "assert add_K_element([(1, 3, 4), (2, 4, 6), (3, 8, 1)], 4) == [(5, 7, 8), (6, 8, 10), (7, 12, 5)]\nassert add_K_element([(1, 2, 3), (4, 5, 6), (7, 8, 9)], 8) == [(9, 10, 11), (12, 13, 14), (15, 16, 17)]\nassert add_K_element([(11, 12, 13), (14, 15, 16), (17, 18, 19)], 9) == [(20, 21, 22), (23, 24, 25), (26, 27, 28)]",
        "canonical_solution": "def add_K_element(test_list, K):\r\n  res = [tuple(j + K for j in sub ) for sub in test_list]\r\n  return (res) "
    },
    {
        "number": 364,
        "prompt": "Write a function to find the number of flips required to make the given binary string a sequence of alternate characters.\ndef make_flip(ch): \n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    count = 0\n    for i in range(len(ch)-1): \n        if ch[i] != ch[i+1]: \n            count += 1\n    return count \n\ndef min_flips(ch): \n    n = len(ch) \n    count = make_flip(ch) \n    if count % 2 == 0: \n        return count \n    else: \n        return count + 1\n\nch = input()\nprint(min_flips(ch)) ",
        "generated_testcode": "assert make_flip(ch = \"01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101",
        "test": "assert min_flip_to_make_string_alternate(\"0001010111\") == 2\nassert min_flip_to_make_string_alternate(\"001\") == 1\nassert min_flip_to_make_string_alternate(\"010111011\") == 2 ",
        "canonical_solution": "def make_flip(ch): \r\n\treturn '1' if (ch == '0') else '0'\r\ndef get_flip_with_starting_charcter(str, expected): \r\n\tflip_count = 0\r\n\tfor i in range(len( str)): \r\n\t\tif (str[i] != expected): \r\n\t\t\tflip_count += 1\r\n\t\texpected = make_flip(expected) \r\n\treturn flip_count \r\ndef min_flip_to_make_string_alternate(str): \r\n\treturn min(get_flip_with_starting_charcter(str, '0'),get_flip_with_starting_charcter(str, '1')) "
    },
    {
        "number": 365,
        "prompt": "Write a python function to count the number of digits of a given number.\ndef count_Digit(n):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    count=0\n    while n!=0:\n        n=n//10\n        count+=1\n    return count\n\n#calling function\nprint(count_Digit(123456))\n\n#output: 4\n",
        "generated_testcode": "assert count_Digit(12345) == 4\n",
        "test": "assert count_Digit(12345) == 5\nassert count_Digit(11223305) == 8\nassert count_Digit(4123459) == 7",
        "canonical_solution": "def count_Digit(n):\r\n    count = 0\r\n    while n != 0:\r\n        n //= 10\r\n        count += 1\r\n    return count"
    },
    {
        "number": 366,
        "prompt": "Write a python function to find the largest product of the pair of adjacent elements from a given list of integers.\ndef adjacent_num_product(list_nums):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    max_product = 0\n    n = len(list_nums)\n    for i in range(n-1):\n        product = list_nums[i] * list_nums[i+1]\n        if product > max_product:\n            max_product = product\n    return max_product\n\n#Example usage:\nprint(adjacent_num_product([-10, -10, 5, 2, 8, -20, -5, 15])) # Output: 800 (-10 * -5)\nprint(adjacent_num_product([-10, -2, 3, 4, -5, -100, 8, 10])) # Output: 40 (-5 * 8)\nprint(adjacent_num_product([-10, -2, -5, 3, 0, 6, 2, 8, -10, -10, -1])) # Output: 50 (3 * 6)\nprint(adjacent_num_product([-10, -2, -5, -3, -6, -10, -10, -1])) # Output: 50 (-5 * -6)\nprint(adjacent_num_product([1, 2, 3, 4, 5, 6, 7, 8, 9])) # Output: 42 (7 * 8) ",
        "generated_testcode": "assert adjacent_num_product([1, 2, 3, 4, 5, 6]) == 12\n",
        "test": "assert adjacent_num_product([1,2,3,4,5,6]) == 30\nassert adjacent_num_product([1,2,3,4,5]) == 20\nassert adjacent_num_product([2,3]) == 6",
        "canonical_solution": "def adjacent_num_product(list_nums):\r\n    return max(a*b for a, b in zip(list_nums, list_nums[1:]))"
    },
    {
        "number": 367,
        "prompt": "Write a function to check if a binary tree is balanced or not.\n\tdef __init__(self, data): \n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "\t\tself.data = data \n\t\tself.left = None\n\t\tself.right = None\n\ndef isBalanced(root): \n\tif root is None: \n\t\treturn True\n\n\tif abs(getHeight(root.left) - getHeight(root.right)) <= 1 and isBalanced(root.left) is True and isBalanced(root.right) is True: \n\t\treturn True\n\n\treturn False\n\ndef getHeight(node): \n\tif node is None: \n\t\treturn 0\n\n\treturn 1 + max(getHeight(node.left), getHeight(node.right)) \n\n# Create a root node \nroot = TreeNode(1) \nroot.left = TreeNode(2) \nroot.right = TreeNode(3) \nroot.left.left = TreeNode(4) \nroot.left.right = TreeNode(5) \nroot.right.left = TreeNode(6) \nroot.right.right = TreeNode(7) \n\nif isBalanced(root): \n\tprint(\"The Binary Tree is balanced\") \nelse: \n\tprint(\"The Binary Tree is not balanced\") ",
        "generated_testcode": "assert is_balanced(root) == True\n\n",
        "test": "assert is_tree_balanced(root) == False\nassert is_tree_balanced(root1) == True\nassert is_tree_balanced(root2) == False ",
        "canonical_solution": "class Node: \r\n\tdef __init__(self, data): \r\n\t\tself.data = data \r\n\t\tself.left = None\r\n\t\tself.right = None\r\ndef get_height(root): \r\n\tif root is None: \r\n\t\treturn 0\r\n\treturn max(get_height(root.left), get_height(root.right)) + 1\r\ndef is_tree_balanced(root): \r\n\tif root is None: \r\n\t\treturn True\r\n\tlh = get_height(root.left) \r\n\trh = get_height(root.right) \r\n\tif (abs(lh - rh) <= 1) and is_tree_balanced( \r\n\troot.left) is True and is_tree_balanced( root.right) is True: \r\n\t\treturn True\r\n\treturn False"
    },
    {
        "number": 368,
        "prompt": "Write a function to repeat the given tuple n times.\ndef repeat_tuples(test_tup, N):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    return test_tup * N\n\n# Example usage:\ntest_tup = (1,2,3)\nN = 3\nresult = repeat_tuples(test_tup, N)\nprint(result)  # Output: (1, 2, 3, 1, 2, 3, 1, 2, 3) ",
        "generated_testcode": "assert repeat_tuples((1, 2, 3), 3) == ((1, 2, 3), (1, 2, 3), (1, 2, 3))\n",
        "test": "assert repeat_tuples((1, 3), 4) == ((1, 3), (1, 3), (1, 3), (1, 3))\nassert repeat_tuples((1, 2), 3) == ((1, 2), (1, 2), (1, 2))\nassert repeat_tuples((3, 4), 5) == ((3, 4), (3, 4), (3, 4), (3, 4), (3, 4))",
        "canonical_solution": "def repeat_tuples(test_tup, N):\r\n  res = ((test_tup, ) * N)\r\n  return (res) "
    },
    {
        "number": 369,
        "prompt": "Write a function to find the lateral surface area of cuboid\ndef lateralsurface_cuboid(l,w,h):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    return 2*(2*l*w + 2*w*h + 2*h*l)\n\n# Test the function with an example cuboid\nprint(lateralsurface_cuboid(5,10,3)) # should print 60\n\n# Test the function with another example cuboid\nprint(lateralsurface_cuboid(7,4,5)) # should print 94 ",
        "generated_testcode": "assert lateralsurface_cuboid(5, 5, 5) == 6 * 5 * 2 + 5 * 5 * 2 + 5 * 5 * 2\nprint(lateralsurface_cuboid(5, 5, 5)) # should output 60\n\n# Write a function to find the volume of a cuboid\ndef volume_cuboid(l,w,h):\n    pass\n\n",
        "test": "assert lateralsurface_cuboid(8,5,6)==156\nassert lateralsurface_cuboid(7,9,10)==320\nassert lateralsurface_cuboid(10,20,30)==1800",
        "canonical_solution": "def lateralsurface_cuboid(l,w,h):\r\n  LSA = 2*h*(l+w)\r\n  return LSA"
    },
    {
        "number": 370,
        "prompt": "Write a function to sort a tuple by its float element.\ndef float_sort(price):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    return price[1]\n\ndef sort_prices(prices):\n    return sorted(prices, key=float_sort)\n\nprint(sort_prices([(\"apple\", 1.5), (\"banana\", 0.6), (\"orange\", 0.9), (\"kiwi\", 2.3)]));\n\n# Output: [('banana', 0.6), ('apple', 1.5), ('kiwi', 2.3), ('orange', 0.9)]\n\n# Explanation: \n# The float_sort function takes a tuple as an argument and returns the second element of the tuple (i.e. the price). \n# The sorted function is used to sort the prices tuple based on the prices using the float_sort function as the key. \n# The key argument is used to specify the sorting criteria. The sorted function returns a new sorted list of tuples. \n# The result is [('banana', 0.6), ('apple', 1.5), ('orange', 0.9), ('kiwi', 2.3)] as the prices are sorted in ascending order. ",
        "generated_testcode": "assert float_sort((1.5, 2.3, 3.7, 1.1) == (1.1, 1.5, 2.3, 3.7)\n",
        "test": "assert float_sort([('item1', '12.20'), ('item2', '15.10'), ('item3', '24.5')])==[('item3', '24.5'), ('item2', '15.10'), ('item1', '12.20')] \nassert float_sort([('item1', '15'), ('item2', '10'), ('item3', '20')])==[('item3', '20'), ('item1', '15'), ('item2', '10')] \nassert float_sort([('item1', '5'), ('item2', '10'), ('item3', '14')])==[('item3', '14'), ('item2', '10'), ('item1', '5')] ",
        "canonical_solution": "def float_sort(price):\r\n  float_sort=sorted(price, key=lambda x: float(x[1]), reverse=True)\r\n  return float_sort"
    },
    {
        "number": 371,
        "prompt": "Write a function to find the smallest missing element in a sorted array.\ndef smallest_missing(A, left_element, right_element):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    if left_element == right_element:\n        return A[left_element] + 1\n    mid = (left_element + right_element) // 2\n    if A[mid] == mid + 1:\n        return smallest_missing(A, mid + 1, right_element)\n    else:\n        return smallest_missing(A, left_element, mid)\n\nA = [1, 2, 4, 5, 6, 8, 9, 10, 11, 12, 13]\nprint(smallest_missing(A, 0, len(A) - 1))\n\n# Time Complexity: O(log(n) + n)\n# Space Complexity: O(1)\n\n\n# Example:\n# A = [1, 2, 4, 5, 6, 8, 9, 10, 11, 12, 13]\n# left = 0, right = 6\n# mid = (0 + 6) // 2 = 3\n# A[3] = 5 which is equal to 3 + 1\n# smallest_missing(A, 3 + 1, 6) = smallest_missing(A, 4, 6)\n# left = 4, right = 6\n# mid = (4 + 6) // 2 = 5\n# A[5] = 8 which is equal to 5 + 1\n# smallest_missing(A",
        "generated_testcode": "assert smallest_missing([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 1, 10) == 0\n",
        "test": "assert smallest_missing([0, 1, 2, 3, 4, 5, 6], 0, 6) == 7\nassert smallest_missing([0, 1, 2, 6, 9, 11, 15], 0, 6) == 3\nassert smallest_missing([1, 2, 3, 4, 6, 9, 11, 15], 0, 7) == 0",
        "canonical_solution": "def smallest_missing(A, left_element, right_element):\r\n    if left_element > right_element:\r\n        return left_element\r\n    mid = left_element + (right_element - left_element) // 2\r\n    if A[mid] == mid:\r\n        return smallest_missing(A, mid + 1, right_element)\r\n    else:\r\n        return smallest_missing(A, left_element, mid - 1)"
    },
    {
        "number": 372,
        "prompt": "Write a function to sort a given list of elements in ascending order using heap queue algorithm.\ndef heap_assending(nums):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    heapq.heapify(nums)  # O(n)\n    return [heapq.heappop(nums) for i in range(len(nums))]  # O(nlogn)\n\n# Write a function to sort a given list of elements in descending order using heap queue algorithm.\ndef heap_descending(nums):\n    heapq.heapify(nums)  # O(n)\n    return [heapq.heappop(nums) for i in range(len(nums)-1, -1, -1)]  # O(nlogn)\n\n# Write a function to sort a given list of elements in ascending order using quicksort algorithm.\ndef quicksort_assending(nums):\n    if len(nums) <= 1:\n        return nums\n    else:\n        pivot = nums[0]\n        left = [x for x in nums[1:] if x <= pivot]\n        right = [x for x in nums[1:] if x > pivot]\n        return quicksort_assending(left) + [pivot] + quicksort_assending(right)\n\n# Write a function to sort a given list of elements in descending order using quicksort algorithm.\ndef quicksort_descending(nums):\n    if len(nums) <= 1:\n        return nums\n    else:\n        pivot = nums[0]\n        left = [x for x in nums[1:] if x >= pivot]\n",
        "generated_testcode": "assert heap_assending(nums) == sorted(nums)\n\n# Test the function with an example\nnums = [3, 1, 5, 2, 4, 6, 7, 8, 9, 10]\nprint(heap_assending(nums)) # should print [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\n",
        "test": "assert heap_assending([18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1])==[1, 2, 3, 4, 7, 8, 9, 9, 10, 14, 18]\nassert heap_assending([25, 35, 22, 85, 14, 65, 75, 25, 58])==[14, 22, 25, 25, 35, 58, 65, 75, 85]\nassert heap_assending([1, 3, 5, 7, 9, 2, 4, 6, 8, 0])==[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]",
        "canonical_solution": "import heapq as hq\r\ndef heap_assending(nums):\r\n  hq.heapify(nums)\r\n  s_result = [hq.heappop(nums) for i in range(len(nums))]\r\n  return s_result"
    },
    {
        "number": 373,
        "prompt": "Write a function to find the volume of a cuboid.\ndef volume_cuboid(l,w,h):\n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    volume = l*w*h\n    return volume\n\n# Test the function\nprint(volume_cuboid(5,10,20)) # Should print 10000\nprint(volume_cuboid(5,10,20)) # Should print 1000\n\n# Write a function to find the surface area of a cuboid\ndef surface_cuboid(l,w,h):\n    surface_area = 2*(l*w + l*h + w*h)\n    return surface_area\n\n# Test the function\nprint(surface_cuboid(5,10,20)) # Should print 1200\nprint(surface_cuboid(5,10,20)) # Should print 120\n\n# Write a function to find the volume of a sphere\ndef volume_sphere(r):\n    pi = 3.14\n    volume = (4/3)*pi*(r**3)\n    return volume\n\n# Test the function\nprint(volume_sphere(5)) # Should print 523.6\nprint(volume_sphere(10)) # Should print 12566.34\n\n# Write a function to find the surface area of a sphere\ndef surface_sphere(r):\n    pi = 3.14\n    surface_area = 4*pi*(r**2)\n    return surface_area\n\n# Test the function\nprint(surface_sphere(5))",
        "generated_testcode": "assert volume_cuboid(3,4,5) == 60\n",
        "test": "assert volume_cuboid(1,2,3)==6\nassert volume_cuboid(5,7,9)==315\nassert volume_cuboid(10,15,21)==3150",
        "canonical_solution": "def volume_cuboid(l,w,h):\r\n  volume=l*w*h\r\n  return volume"
    },
    {
        "number": 374,
        "prompt": "Write a function to print all permutations of a given string including duplicates.\ndef permute_string(str):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    if len(str) == 0:\n        return ['']\n    if len(str) == 1:\n        return [str]\n\n    result = []\n    for i in range(len(str)):\n        first = str[i]\n        rem = str[:i] + str[i+1:]\n        for p in permute_string(rem):\n            for j in range(len(p) + 1):\n                result.append(p[:j] + first + p[j:])\n\n    return result\n\n# test the function\nprint(permute_string('abc'))\nprint(permute_string('aab'))\nprint(permute_string('aaa'))\n\n# time complexity: O(n*n!)\n# space complexity: O(n!) ",
        "generated_testcode": "assert permute_string(\"abc\") == [\"abc\", \"acb\", \"bac\", \"bca\", \"cab\", \"cba\"]\n",
        "test": "assert permute_string('ab')==['ab', 'ba']\nassert permute_string('abc')==['abc', 'bac', 'bca', 'acb', 'cab', 'cba']\nassert permute_string('abcd')==['abcd', 'bacd', 'bcad', 'bcda', 'acbd', 'cabd', 'cbad', 'cbda', 'acdb', 'cadb', 'cdab', 'cdba', 'abdc', 'badc', 'bdac', 'bdca', 'adbc', 'dabc', 'dbac', 'dbca', 'adcb', 'dacb', 'dcab', 'dcba']",
        "canonical_solution": "def permute_string(str):\r\n    if len(str) == 0:\r\n        return ['']\r\n    prev_list = permute_string(str[1:len(str)])\r\n    next_list = []\r\n    for i in range(0,len(prev_list)):\r\n        for j in range(0,len(str)):\r\n            new_str = prev_list[i][0:j]+str[0]+prev_list[i][j:len(str)-1]\r\n            if new_str not in next_list:\r\n                next_list.append(new_str)\r\n    return next_list"
    },
    {
        "number": 375,
        "prompt": "Write a function to round the given number to the nearest multiple of a specific number.\ndef round_num(n,m):\n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    if n % m == 0:\n        return n\n    elif n % m >= m/2:\n        return n + (m - (n % m) + 1)\n    else:\n        return n - n % m\n\n# Test the function\nprint(round_num(12,5))  # Expected output: 15\nprint(round_num(7,3))   # Expected output: 9\nprint(round_num(21,5))  # Expected output: 20\nprint(round_num(27,10)) # Expected output: 30\nprint(round_num(34,7))  # Expected output: 35\nprint(round_num(49,15)) # Expected output: 60\n\n# The function should return the nearest multiple of the second argument if the first argument is not already a multiple of it. ",
        "generated_testcode": "assert round_num(10,5) == 10\n",
        "test": "assert round_num(4722,10)==4720\nassert round_num(1111,5)==1110\nassert round_num(219,2)==218",
        "canonical_solution": "def round_num(n,m):\r\n    a = (n //m) * m\r\n    b = a + m\r\n    return (b if n - a > b - n else a)"
    },
    {
        "number": 376,
        "prompt": "Write a function to remove tuple elements that occur more than once and replace the duplicates with some custom value.\ndef remove_replica(test_tup):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    new_tup = []\n    for i in test_tup:\n        if i not in new_tup:\n            new_tup.append(i)\n        else:\n            new_tup.append(\"Duplicate\")\n    return tuple(new_tup)\n\ntest_tup = (1, 2, 3, 3, 4, 5, 2, 6, 7, 7, 8, 9, 10, 10)\nprint(remove_replica(test_tup))\n\n# Output: (1, 2, 'Duplicate', 3, 'Duplicate', 4, 'Duplicate', 5, 6, 'Duplicate', 7, 'Duplicate', 8, 'Duplicate')\n\n# Explanation: The output tuple has the duplicates replaced with the string 'Duplicate'. ",
        "generated_testcode": "assert remove_replica(('a', 'b', 'c', 'a', 'd', 'e', 'c') == ('a', 'b', 'c', 'd', 'e', 'replaced')\n",
        "test": "assert remove_replica((1, 1, 4, 4, 4, 5, 5, 6, 7, 7)) == (1, 'MSP', 4, 'MSP', 'MSP', 5, 'MSP', 6, 7, 'MSP')\nassert remove_replica((2, 3, 4, 4, 5, 6, 6, 7, 8, 9, 9)) == (2, 3, 4, 'MSP', 5, 6, 'MSP', 7, 8, 9, 'MSP')\nassert remove_replica((2, 2, 5, 4, 5, 7, 5, 6, 7, 7)) == (2, 'MSP', 5, 4, 'MSP', 7, 'MSP', 6, 'MSP', 'MSP')",
        "canonical_solution": "def remove_replica(test_tup):\r\n  temp = set()\r\n  res = tuple(ele if ele not in temp and not temp.add(ele) \r\n\t\t\t\telse 'MSP' for ele in test_tup)\r\n  return (res)"
    },
    {
        "number": 377,
        "prompt": "Write a python function to remove all occurrences of a character in a given string.\ndef remove_Char(s,c) :  \n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    return s.replace(c, \"\") \n  \n# test the function \ns = \"hello world\"\nc = \"l\"\nprint(remove_Char(s,c)) ",
        "generated_testcode": "assert remove_Char(\"hello world\", \"l\") == \"heo word\"\n",
        "test": "assert remove_Char(\"aba\",'a') == \"b\"\nassert remove_Char(\"toggle\",'g') == \"tole\"\nassert remove_Char(\"aabbc\",'b') == \"aac\"",
        "canonical_solution": "def remove_Char(s,c) :  \r\n    counts = s.count(c) \r\n    s = list(s) \r\n    while counts :  \r\n        s.remove(c) \r\n        counts -= 1 \r\n    s = '' . join(s)   \r\n    return (s) "
    },
    {
        "number": 378,
        "prompt": "Write a python function to shift last element to first position in the given list.\ndef move_first(test_list):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    last_element = test_list.pop()\n    test_list.insert(0, last_element)\n    return test_list\n\n# Test the function with a sample list\ntest_list = [1, 2, 3, 4, 5, 6]\nprint(move_first(test_list))\n\n# Output: [6, 1, 2, 3, 4, 5]\n\n# Test the function with an empty list\ntest_list = []\nprint(move_first(test_list))\n# Output: []\n\n# Test the function with a list containing only one element\ntest_list = [1]\nprint(move_first(test_list))\n# Output: [1]\n\n# Test the function with a list containing two elements\ntest_list = [1, 2]\nprint(move_first(test_list))\n# Output: [2, 1]\n\n# Test the function with a list containing negative and positive integers\ntest_list = [-1, 2, 3, 4, -5]\nprint(move_first(test_list))\n# Output: [-5, -1, 2, 3, 4]\n\n# Test the function with a list containing string elements\ntest_list = ['a', 'b', 'c', 'd']\nprint(move_first(test_list))\n# Output: ['d', 'a', 'b', 'c']\n\n# Test the function with a list containing a mix of different data types\n",
        "generated_testcode": "assert move_first([1, 2, 3, 4, 5]) == [5, 1, 2, 3]\n",
        "test": "assert move_first([1,2,3,4]) == [4,1,2,3]\nassert move_first([0,1,2,3]) == [3,0,1,2]\nassert move_first([9,8,7,1]) == [1,9,8,7]",
        "canonical_solution": "def move_first(test_list):\r\n  test_list = test_list[-1:] + test_list[:-1]  \r\n  return test_list"
    },
    {
        "number": 379,
        "prompt": "Write a function to find the surface area of a cuboid.\ndef surfacearea_cuboid(l,w,h):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    return 2*(l*w+w*h+h*l) + 2*(l*h + w*h)\n\n#Test the function\nprint(surfacearea_cuboid(10,10,10)) #200\nprint(surfacearea_cuboid(2,3,4)) #52\n\n#Write a function to find the volume of a cuboid\ndef volume_cuboid(l,w,h):\n    return l*w*h\n\n#Test the function\nprint(volume_cuboid(10,10,10)) #10000\nprint(volume_cuboid(2,3,4)) #24\n\n#Write a function to find the volume of a sphere\nimport math\n\ndef volume_sphere(r):\n    return 4/3 * math.pi * r**3\n\n#Test the function\nprint(volume_sphere(5)) #523.6\nprint(volume_sphere(3)) #113.04\n\n#Write a function to find the area of a sphere\ndef surface_sphere(r):\n    return 4 * math.pi * r**2\n\n#Test the function\nprint(surface_sphere(5)) #314.1592653589793\nprint(surface_sphere(3)) #28.2743333882308138\n\n#Write a function",
        "generated_testcode": "assert surfacearea_cuboid(2,3,4) == 2*(2*3+2*4+3*4) + 2*2*3 + 2*3*4 + 2*4*4\n\n",
        "test": "assert surfacearea_cuboid(1,2,3)==22\nassert surfacearea_cuboid(5,7,9)==286\nassert surfacearea_cuboid(10,15,21)==1350",
        "canonical_solution": "def surfacearea_cuboid(l,w,h):\r\n  SA = 2*(l*w + l * h + w * h)\r\n  return SA"
    },
    {
        "number": 380,
        "prompt": "Write a function to generate a two-dimensional array.\ndef multi_list(rownum,colnum):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    return [[0]*colnum for i in range(rownum)]\n\n# Function to print the two-dimensional array\ndef print_list(mlist):\n    for row in mlist:\n        print(row)\n\n# User input for the number of rows and columns\nrownum = int(input(\"Enter the number of rows: \"))\ncolnum = int(input(\"Enter the number of columns: \"):\")\n\n# Generate and print the two-dimensional array\nmylist = multi_list(rownum, colnum)\nprint(\"Two-dimensional list:\")\nprint_list(mylist)\n\n# Function to update the two-dimensional array\ndef update_list(mlist, row, col, value):\n    mlist[row][col] = value\n    return mlist\n\n# User input for the row, column and value to update\nrow = int(input(\"Enter the row number: \")\ncol = int(input(\"Enter the column number: \")\nvalue = int(input(\"Enter the value to update: \")\n\n# Update the two-dimensional array\nmylist = update_list(mylist, row, col, value)\nprint(\"Updated list:\")\nprint_list(mylist) \n\n# Function to delete a row from the two-dimensional array\ndef delete_row(mlist, row):\n    del mlist[row]\n    return mlist\n\n# User input for the row to delete\nrow = int(input(\"Enter the row number to delete: \")\n\n# Delete the row from the two-dimensional array",
        "generated_testcode": "assert multi_list(3,4) == [[0,0,0,0],[0,0,0,0],[0,0,0,0]]\n",
        "test": "assert multi_list(3,4)==[[0, 0, 0, 0], [0, 1, 2, 3], [0, 2, 4, 6]] \nassert multi_list(5,7)==[[0, 0, 0, 0, 0, 0, 0], [0, 1, 2, 3, 4, 5, 6], [0, 2, 4, 6, 8, 10, 12], [0, 3, 6, 9, 12, 15, 18], [0, 4, 8, 12, 16, 20, 24]]\nassert multi_list(10,15)==[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14], [0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28], [0, 3, 6, 9, 12, 15, 18, 21, 24, 27, 30, 33, 36, 39, 42], [0, 4, 8, 12, 16, 20, 24, 28, 32, 36, 40, 44, 48, 52, 56], [0, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70], [0, 6, 12, 18, 24, 30, 36, 42, 48, 54, 60, 66, 72, 78, 84], [0, 7, 14, 21, 28, 35, 42, 49, 56, 63, 70, 77, 84, 91, 98], [0, 8, 16, 24, 32, 40, 48, 56, 64, 72, 80, 88, 96, 104, 112], [0, 9, 18, 27, 36, 45, 54, 63, 72, 81, 90, 99, 108, 117, 126]]",
        "canonical_solution": "def multi_list(rownum,colnum):\r\n  multi_list = [[0 for col in range(colnum)] for row in range(rownum)]\r\n  for row in range(rownum):\r\n    for col in range(colnum):\r\n        multi_list[row][col]= row*col\r\n  return multi_list\r\n"
    },
    {
        "number": 381,
        "prompt": "Write a function to sort a list of lists by a given index of the inner list.\ndef index_on_inner_list(list_data, index_no):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    sorted_list = sorted(list_data, key=lambda x: x[index_no])\n    return sorted_list\n\ndef main():\n    list_data = [\n        [3, 1, 4],\n        [2, 3, 1],\n        [1, 2, 4],\n        [4, 1, 3]\n    ]\n    index_no = 1\n    sorted_list = index_on_inner_list(list_data, index_no)\n    print(sorted_list)\n\nif __name__ == \"__main__\":\n    main()\n\\end{code}\n\nOutput:\n\n\\begin{code}\n[[1, 2, 4], [2, 3, 1], [3, 1, 4], [4, 1, 3]]\n\\end{code}",
        "generated_testcode": "assert index_on_inner_list(list_data, 1) == sorted(list_data, key=lambda x: x[1])\n\n# Test the function with the following list_data\nlist_data = [\n    ['apple', 3, 'red'],\n    ['banana', 2, 'yellow'],\n    ['orange', 1, 'orange'],\n    ['grape', 4, 'purple']\n]\n\n",
        "test": "assert index_on_inner_list([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,0)==[('Beau Turnbull', 94, 98), ('Brady Kent', 97, 96), ('Greyson Fulton', 98, 99), ('Wyatt Knott', 91, 94)]\nassert index_on_inner_list([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,1)==[('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98), ('Brady Kent', 97, 96), ('Greyson Fulton', 98, 99)]\nassert index_on_inner_list([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,2)==[('Wyatt Knott', 91, 94), ('Brady Kent', 97, 96), ('Beau Turnbull', 94, 98), ('Greyson Fulton', 98, 99)]",
        "canonical_solution": "from operator import itemgetter\r\ndef index_on_inner_list(list_data, index_no):\r\n    result = sorted(list_data, key=itemgetter(index_no))\r\n    return result"
    },
    {
        "number": 382,
        "prompt": "Write a function to find the number of rotations in a circularly sorted array.\ndef find_rotation_count(A):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    n = len(A)\n    low = 0\n    high = n-1\n\n    while low < high and A[low] > A[high]:\n        mid = (low + high) // 2\n\n        if A[mid] > A[high]:\n            low = mid + 1\n        else:\n            high = mid\n\n    return low\n\nA = [4, 5, 6, 7, 8, 9, 10, 1, 2, 3]\nprint(find_rotation_count(A))  # Output: 5\n\n# Time Complexity: O(log(n) + k)\n# Space Complexity: O(1)\n# k is the number of rotations in the array\n\n# Another approach to find the rotation count is to use binary search with modified condition.\ndef find_rotation_count(A):\n    low = 0\n    high = len(A) - 1\n\n    while low < high:\n        mid = (low + high) // 2\n\n        if A[low] > A[mid]:\n            low = mid + 1\n        else:\n            high = mid\n\n    return low\n\nA = [4, 5, 6, 7, 8, 9, 10, 1, 2, 3]\nprint(find_rotation_count(A))  # Output: 5\n\n# Time Complexity: O(log(n))\n# Space Complexity: O",
        "generated_testcode": "assert find_rotation_count([4, 5, 6, 7, 8, 9, 10, 1, 2, 3]) == 5\n",
        "test": "assert find_rotation_count([8, 9, 10, 1, 2, 3, 4, 5, 6, 7]) == 3\nassert find_rotation_count([8, 9, 10,2, 5, 6]) == 3\nassert find_rotation_count([2, 5, 6, 8, 9, 10]) == 0",
        "canonical_solution": "def find_rotation_count(A):\r\n    (left, right) = (0, len(A) - 1)\r\n    while left <= right:\r\n        if A[left] <= A[right]:\r\n            return left\r\n        mid = (left + right) // 2\r\n        next = (mid + 1) % len(A)\r\n        prev = (mid - 1 + len(A)) % len(A)\r\n        if A[mid] <= A[next] and A[mid] <= A[prev]:\r\n            return mid\r\n        elif A[mid] <= A[right]:\r\n            right = mid - 1\r\n        elif A[mid] >= A[left]:\r\n            left = mid + 1\r\n    return -1"
    },
    {
        "number": 383,
        "prompt": "Write a python function to toggle all odd bits of a given number.\ndef even_bit_toggle_number(n) : \n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    return n ^ (n & 0xAAAAAAAA)\n\n# Python function to toggle all even bits of a given number \ndef odd_bit_toggle_number(n) : \n    return n ^ (n & 0x55555555555)\n\n# Driver code \nif __name__ == '__main__' : \n    num = int(input(\"Enter a number: \"))\n    print(\"Even bits toggled number:\", even_bit_toggle_number(num))\n    print(\"Odd bits toggled number:\", odd_bit_toggle_number(num)) ",
        "generated_testcode": "assert even_bit_toggle_number(10) == 5\n",
        "test": "assert even_bit_toggle_number(10) == 15\nassert even_bit_toggle_number(20) == 1\nassert even_bit_toggle_number(30) == 11",
        "canonical_solution": "def even_bit_toggle_number(n) : \r\n    res = 0; count = 0; temp = n    \r\n    while(temp > 0 ) : \r\n        if (count % 2 == 0) : \r\n            res = res | (1 << count)      \r\n        count = count + 1\r\n        temp >>= 1 \r\n    return n ^ res "
    },
    {
        "number": 384,
        "prompt": "Write a python function to find the frequency of the smallest value in a given array.\ndef frequency_Of_Smallest(n,arr): \n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    freq = 0\n    for i in range(n): \n        if arr[i] == min(arr): \n            freq += 1\n    return freq \n  \n# example \narr = [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10] \nn = len(arr) \nprint(frequency_Of_Smallest(n, arr)) ",
        "generated_testcode": "assert frequency_Of_Smallest(5,[1,2,3,4,5,5]) == 1\n",
        "test": "assert frequency_Of_Smallest(5,[1,2,3,4,3]) == 1\nassert frequency_Of_Smallest(7,[3,1,2,5,6,2,3]) == 1\nassert frequency_Of_Smallest(7,[3,3,6,3,7,4,9]) == 3",
        "canonical_solution": "def frequency_Of_Smallest(n,arr): \r\n    mn = arr[0] \r\n    freq = 1\r\n    for i in range(1,n): \r\n        if (arr[i] < mn): \r\n            mn = arr[i] \r\n            freq = 1\r\n        elif (arr[i] == mn): \r\n            freq += 1\r\n    return freq "
    },
    {
        "number": 385,
        "prompt": "Write a function to find the n'th perrin number using recursion.\ndef get_perrin(n):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    if n == 1:\n        return 1\n    elif n % 2 == 0:\n        return n * get_perrin(n//2)\n    else:\n        return n * get_perrin((n+1)//2)\n\nn = int(input(\"Enter the value of n: \"))\nprint(\"The n'th perrin number is:\", get_perrin(n))\n\n# Output:\n# Enter the value of n: 7\n# The n'th perrin number is: 21\n\n# Time Complexity : O(2^n) ",
        "generated_testcode": "assert get_perrin(1) == 1\n",
        "test": "assert get_perrin(9) == 12\nassert get_perrin(4) == 2\nassert get_perrin(6) == 5",
        "canonical_solution": "def get_perrin(n):\r\n  if (n == 0):\r\n    return 3\r\n  if (n == 1):\r\n    return 0\r\n  if (n == 2):\r\n    return 2 \r\n  return get_perrin(n - 2) + get_perrin(n - 3)"
    },
    {
        "number": 386,
        "prompt": "Write a function to find out the minimum no of swaps required for bracket balancing in the given string.\ndef swap_count(s):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": true,
        "answer": "    stack = []\n    count = 0\n    for char in s:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if not stack or stack[-1] == ')':\n                count += 1\n            else:\n                stack.pop()\n    return count\n\n# Test the function\ns = '()()()()()('\nprint(swap_count(s)) # Output: 1\n\ns = '()()()()()()'\nprint(swap_count(s)) # Output: 0\n\ns = ')(()('\nprint(swap_count(s)) # Output: 3\n\ns = '(()()'\nprint(swap_count(s)) # Output: 1\n\ns = '()(()'\nprint(swap_count(s)) # Output: 2\n\n# Time Complexity: O(n), Space Complexity: O(n)",
        "generated_testcode": "assert swap_count(\"{[()]}\") == 0\n",
        "test": "assert swap_count(\"[]][][\") == 2\nassert swap_count(\"[[][]]\") == 0\nassert swap_count(\"[[][]]][\") == 1",
        "canonical_solution": "def swap_count(s):\r\n\tchars = s\r\n\tcount_left = 0\r\n\tcount_right = 0\r\n\tswap = 0\r\n\timbalance = 0; \r\n\tfor i in range(len(chars)):\r\n\t\tif chars[i] == '[':\r\n\t\t\tcount_left += 1\r\n\t\t\tif imbalance > 0:\r\n\t\t\t\tswap += imbalance\r\n\t\t\t\timbalance -= 1\r\n\t\telif chars[i] == ']':\r\n\t\t\tcount_right += 1\r\n\t\t\timbalance = (count_right - count_left) \r\n\treturn swap"
    },
    {
        "number": 387,
        "prompt": "Write a python function to check whether the hexadecimal number is even or odd.\ndef even_or_odd(N): \n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    # Convert the hexadecimal to decimal number\n    decimal_number = int(N, 16) \n    # Check if the decimal number is even or odd\n    if decimal_number % 2 == 0: \n        return \"Even\"\n    else: \n        return \"Odd\"\n  \n# Take the input hexadecimal number\nN = input(\"Enter the hexadecimal number: \")\n  \n# Print the result\nprint(even_or_odd(N)) ",
        "generated_testcode": "assert even_or_odd(\"A\") == \"even\"\n",
        "test": "assert even_or_odd(\"AB3454D\") ==\"Odd\"\nassert even_or_odd(\"ABC\") == \"Even\"\nassert even_or_odd(\"AAD\") == \"Odd\"",
        "canonical_solution": "def even_or_odd(N): \r\n    l = len(N) \r\n    if (N[l-1] =='0'or N[l-1] =='2'or \r\n        N[l-1] =='4'or N[l-1] =='6'or \r\n        N[l-1] =='8'or N[l-1] =='A'or \r\n        N[l-1] =='C'or N[l-1] =='E'): \r\n        return (\"Even\") \r\n    else: \r\n        return (\"Odd\") "
    },
    {
        "number": 388,
        "prompt": "Write a python function to find the highest power of 2 that is less than or equal to n.\ndef highest_Power_of_2(n): \n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    power_of_2 = 1\n    while power_of_2 <= n: \n        power_of_2 *= 2\n    return power_of_2 // 2\n\n# Test the function \nprint(highest_Power_of_2(10)) # Output: 8 ",
        "generated_testcode": "assert highest_Power_of_2(10) == 8\n",
        "test": "assert highest_Power_of_2(10) == 8\nassert highest_Power_of_2(19) == 16\nassert highest_Power_of_2(32) == 32",
        "canonical_solution": "def highest_Power_of_2(n): \r\n    res = 0; \r\n    for i in range(n, 0, -1): \r\n        if ((i & (i - 1)) == 0): \r\n            res = i; \r\n            break; \r\n    return res; "
    },
    {
        "number": 389,
        "prompt": "Write a function to find the n'th lucas number.\ndef find_lucas(n): \n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    if n == 0: \n        return 2\n    elif n == 1: \n        return 1\n    else: \n        return find_lucas(n-1) + find_lucas(n-2) \n\n# Test the function \nprint(find_lucas(10)) # Output: 54\n",
        "generated_testcode": "assert find_lucas(0) == 2\n",
        "test": "assert find_lucas(9) == 76\nassert find_lucas(4) == 7\nassert find_lucas(3) == 4",
        "canonical_solution": "def find_lucas(n): \r\n\tif (n == 0): \r\n\t\treturn 2\r\n\tif (n == 1): \r\n\t\treturn 1\r\n\treturn find_lucas(n - 1) + find_lucas(n - 2) "
    },
    {
        "number": 390,
        "prompt": "Write a function to insert a given string at the beginning of all items in a list.\ndef add_string(list,string):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": true,
        "answer": "    new_list = []\n    for item in list:\n        new_list.append(string + item)\n    return new_list\n\n# Test the function\nprint(add_string(['apple', 'banana', 'cherry'], 'hello ')) # Output: ['hello apple', 'hello banana', 'hello cherry']\nprint(add_string(['dog', 'cat', 'elephant'], 'animal_')) # Output: ['animal_dog', 'animal_cat', 'animal_elephant'] ",
        "generated_testcode": "assert add_string(['apple','banana','orange'],'fruit: ') == ['fruit: apple', 'fruit: banana', 'fruit: orange']\n",
        "test": "assert add_string([1,2,3,4],'temp{0}')==['temp1', 'temp2', 'temp3', 'temp4']\nassert add_string(['a','b','c','d'], 'python{0}')==[ 'pythona', 'pythonb', 'pythonc', 'pythond']\nassert add_string([5,6,7,8],'string{0}')==['string5', 'string6', 'string7', 'string8']",
        "canonical_solution": "def add_string(list,string):\r\n add_string=[string.format(i) for i in  list]\r\n return add_string"
    },
    {
        "number": 391,
        "prompt": "Write a function to convert more than one list to nested dictionary.\ndef convert_list_dictionary(l1, l2, l3):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    dictionary = {}\n    for i in range(len(l1)):\n        dictionary[l1[i]] = [l2[i], l3[i]]\n    return dictionary\n\n#Test the function with sample data\nl1 = ['a', 'b', 'c', 'd']\nl2 = [1, 2, 3, 4]\nl3 = ['x', 'y', 'z', 'w']\nprint(convert_list_dictionary(l1, l2, l3))\n\n\n# Output: {'a': [1, 'x'], 'b': [2, 'y'], 'c': [3, 'z'], 'd': [4, 'w']}\n\n# In this function, we have used a dictionary to store the key-value pairs from the list. The keys are the elements from the first list and the values are a list of two elements, which are the elements from the second and third list.\n# The function takes three lists as input and returns a nested dictionary. \n# The function takes three lists, l1, l2, and l3, and iterates over the elements of the first list using a for loop. \n# For each element in l1, it assigns a list of two elements as a value to the key in the dictionary. The first element of the nested list is taken from l2 and the second element is taken from l3. ",
        "generated_testcode": "assert convert_list_dictionary([\"a\", \"b\", \"c\"], [1, 2, 3], [True, False, True]) == {\"a\": {\"1\": True, \"2\": False, \"3\": True}\n                                                                               \"b\": {\"1\": True, \"2\": False, \"3\": True}\n                                                                               \"c\": {\"1\": True, \"2\": False, \"3\": True}}\n\n# Test the function with the given input and expected output. ",
        "test": "assert convert_list_dictionary([\"S001\", \"S002\", \"S003\", \"S004\"],[\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"] ,[85, 98, 89, 92])==[{'S001': {'Adina Park': 85}}, {'S002': {'Leyton Marsh': 98}}, {'S003': {'Duncan Boyle': 89}}, {'S004': {'Saim Richards': 92}}]\nassert convert_list_dictionary([\"abc\",\"def\",\"ghi\",\"jkl\"],[\"python\",\"program\",\"language\",\"programs\"],[100,200,300,400])==[{'abc':{'python':100}},{'def':{'program':200}},{'ghi':{'language':300}},{'jkl':{'programs':400}}]\nassert convert_list_dictionary([\"A1\",\"A2\",\"A3\",\"A4\"],[\"java\",\"C\",\"C++\",\"DBMS\"],[10,20,30,40])==[{'A1':{'java':10}},{'A2':{'C':20}},{'A3':{'C++':30}},{'A4':{'DBMS':40}}]",
        "canonical_solution": "def convert_list_dictionary(l1, l2, l3):\r\n     result = [{x: {y: z}} for (x, y, z) in zip(l1, l2, l3)]\r\n     return result"
    },
    {
        "number": 392,
        "prompt": "Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\ndef get_max_sum (n):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": true,
        "answer": "    memo = {}\n    def helper(n):\n        if n in memo:\n            return memo[n]\n        if n <= 1:\n            return n\n        if n % 2 == 0:\n            x = helper(n/2)\n        else:\n            x = 0\n        if n % 3 == 0:\n            y = helper(n/3)\n        else:\n            y = 0\n        if n % 4 == 0:\n            z = helper(n/4)\n        else:\n            z = 0\n        if n % 5 == 0:\n            w = helper(n/5)\n        else:\n            w = 0\n        memo[n] = max(x, y, z, w, n) + min(x, y, z, w)\n        return memo[n]\n    return helper(n)\n\nprint(get_max_sum(24))\nprint(get_max_sum(100))\nprint(get_max_sum(15))\n",
        "generated_testcode": "assert get_max_sum(10) == 10\n",
        "test": "assert get_max_sum(60) == 106\nassert get_max_sum(10) == 12\nassert get_max_sum(2) == 2",
        "canonical_solution": "def get_max_sum (n):\r\n\tres = list()\r\n\tres.append(0)\r\n\tres.append(1)\r\n\ti = 2\r\n\twhile i<n + 1:\r\n\t\tres.append(max(i, (res[int(i / 2)] \r\n\t\t\t\t\t\t+ res[int(i / 3)] +\r\n\t\t\t\t\t\t\tres[int(i / 4)]\r\n\t\t\t\t\t\t+ res[int(i / 5)])))\r\n\t\ti = i + 1\r\n\treturn res[n]"
    },
    {
        "number": 393,
        "prompt": "Write a function to find the list with maximum length using lambda function.\ndef max_length_list(input_list):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    return max(input_list, key=len)\n\n# Test cases\nprint(max_length_list([[1, 2, 3], [4, 5, 6], [7, 8, 9, 10], [11]])) # Output: [7, 8, 9, 10]\nprint(max_length_list([\"apple\", \"banana\", \"cherry\", \"orange\", \"kiwi\", \"mango\"])) # Output: mango\nprint(max_length_list([1, 2, 3, 4, 5, 6])) # Output: [1, 2, 3, 4, 5, 6]\nprint(max_length_list([])) # Output: []\n\n# Explanation:\n# Here, the lambda function is used as the key argument to the max() function. This function returns the maximum element from the list of lists based on the length of the list. ",
        "generated_testcode": "assert max_length_list([[1, 2, 3], [4, 5], [6, 7, 8, 9], [10]] == [6, 7, 8, 9]\n",
        "test": "assert max_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [13, 15, 17])\nassert max_length_list([[1,2,3,4,5],[1,2,3,4],[1,2,3],[1,2],[1]])==(5,[1,2,3,4,5])\nassert max_length_list([[3,4,5],[6,7,8,9],[10,11,12]])==(4,[6,7,8,9])",
        "canonical_solution": "def max_length_list(input_list):\r\n    max_length = max(len(x) for x in input_list )   \r\n    max_list = max(input_list, key = lambda i: len(i))    \r\n    return(max_length, max_list)"
    },
    {
        "number": 394,
        "prompt": "Write a function to check if given tuple is distinct or not.\ndef check_distinct(test_tup):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    if len(test_tup) == len(set(test_tup):\n        return True\n    else:\n        return False\n\n# Test the function with a tuple\ntup = (1, 2, 3, 4, 5, 6, 7, 8)\nprint(check_distinct(tup)) # Output: True\n\ntup = (1, 2, 3, 2, 4, 5, 6, 7)\nprint(check_distinct(tup)) # Output: False\n\ntup = (1, 2, 3, 4, 5, 6, 6, 7)\nprint(check_distinct(tup)) # Output: False\n```\n\nIn the function `check_distinct`, we are checking if the length of the tuple is equal to the length of the set of the tuple. If the length of the tuple and set of the tuple is equal, then they have distinct elements, otherwise they have repeated elements. ",
        "generated_testcode": "assert check_distinct((1, 2, 3, 4, 5, 6) == True)\n",
        "test": "assert check_distinct((1, 4, 5, 6, 1, 4)) == False\nassert check_distinct((1, 4, 5, 6)) == True\nassert check_distinct((2, 3, 4, 5, 6)) == True",
        "canonical_solution": "def check_distinct(test_tup):\r\n  res = True\r\n  temp = set()\r\n  for ele in test_tup:\r\n    if ele in temp:\r\n      res = False\r\n      break\r\n    temp.add(ele)\r\n  return (res) "
    },
    {
        "number": 395,
        "prompt": "Write a python function to find the first non-repeated character in a given string.\ndef first_non_repeating_character(str1):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    # create a dictionary to store the frequency count of each character\n    char_count = {}\n\n    # iterate through the string and count the frequency of each character\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n\n    # iterate through the string again and find the first character with frequency of 1\n    for char in str1:\n        if char_count[char] == 1:\n            return char\n\n    # if no character has frequency of 1, return None\n    return None\n\n# test the function\nprint(first_non_repeating_character(\"geeksforgeeks\"))  # Output: 'g'\nprint(first_non_repeating_character(\"hello world\"))   # Output: 'w'\nprint(first_non_repeating_character(\"aabbccdd\"))     # Output: None\n\n\n# Time Complexity : O(n)\n# Space Complexity : O(n)\n# The time complexity of this solution is O(n) as we iterate through the string twice.\n# The space complexity is also O(n) as we are using a dictionary to store the frequency count of each character. ",
        "generated_testcode": "assert first_non_repeating_character(\"abcdabcdfg\") == \"f\"\n",
        "test": "assert first_non_repeating_character(\"abcabc\") == None\nassert first_non_repeating_character(\"abc\") == \"a\"\nassert first_non_repeating_character(\"ababc\") == \"c\"",
        "canonical_solution": "def first_non_repeating_character(str1):\r\n  char_order = []\r\n  ctr = {}\r\n  for c in str1:\r\n    if c in ctr:\r\n      ctr[c] += 1\r\n    else:\r\n      ctr[c] = 1 \r\n      char_order.append(c)\r\n  for c in char_order:\r\n    if ctr[c] == 1:\r\n      return c\r\n  return None"
    },
    {
        "number": 396,
        "prompt": "Write a function to check whether the given string starts and ends with the same character or not using regex.\ndef check_char(string): \n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    pattern = r'^(.)$'\n    if re.match(pattern, string):\n        return True\n    else:\n        return False\n\n# Test the function with sample inputs\nprint(check_char(\"a\")) # Output: True\nprint(check_char(\"abc\")) # Output: False\nprint(check_char(\"aa\")) # Output: True\nprint(check_char(\"aba\")) # Output: False\n```\n\nHere, `^` and `$` represent the start and end of the string respectively. The `.` matches any character, and `()` captures it into a group. The pattern `^(.)$` matches a string of length 1, where the first character is the same as the last character. \n\nThis function works by matching the first and last character of the string with a regex pattern and returns `True` if they are the same, else it returns `False`. ",
        "generated_testcode": "assert check_char(\"hello\") == False\n",
        "test": "assert check_char(\"abba\") == \"Valid\"\nassert check_char(\"a\") == \"Valid\"\nassert check_char(\"abcd\") == \"Invalid\"",
        "canonical_solution": "import re  \r\nregex = r'^[a-z]$|^([a-z]).*\\1$'\r\ndef check_char(string): \r\n\tif(re.search(regex, string)): \r\n\t\treturn \"Valid\" \r\n\telse: \r\n\t\treturn \"Invalid\" "
    },
    {
        "number": 397,
        "prompt": "Write a function to find the median of three specific numbers.\ndef median_numbers(a,b,c):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": true,
        "answer": "    sorted_nums = sorted([a,b,c])\n    return sorted_nums[1]\n\n# Test cases\nprint(median_numbers(1,2,3)) # Output: 2\nprint(median_numbers(5,3,1)) # Output: 3\nprint(median_numbers(10,10,10)) # Output: 10\nprint(median_numbers(7,7,7)) # Output: 7\nprint(median_numbers(10,3,5)) # Output: 5\n\n# In this function we first sort the numbers in ascending order and then return the middle element. We could also use the built-in function `sorted()` to sort the list. ",
        "generated_testcode": "assert median_numbers(1,2,3) == 2\n",
        "test": "assert median_numbers(25,55,65)==55.0\nassert median_numbers(20,10,30)==20.0\nassert median_numbers(15,45,75)==45.0",
        "canonical_solution": "def median_numbers(a,b,c):\r\n if a > b:\r\n    if a < c:\r\n        median = a\r\n    elif b > c:\r\n        median = b\r\n    else:\r\n        median = c\r\n else:\r\n    if a > c:\r\n        median = a\r\n    elif b < c:\r\n        median = b\r\n    else:\r\n        median = c\r\n return median"
    },
    {
        "number": 398,
        "prompt": "Write a function to compute the sum of digits of each number of a given list.\ndef sum_of_digits(nums):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    return [sum(int(digit) for num in nums for digit in str(num)]\n\n# Example usage:\nprint(sum_of_digits([123, 456, 789]))  # Output: [6, 18, 21]\nprint(sum_of_digits([12, 345, 678, 90]))  # Output: [3, 12, 21, 9]\nprint(sum_of_digits([1, 10, 100]))  # Output: [2, 2, 3] ",
        "generated_testcode": "assert sum_of_digits([12, 34, 56, 78, 90]) == [12, 15, 13, 17]\n",
        "test": "assert sum_of_digits([10,2,56])==14\nassert sum_of_digits([[10,20,4,5,'b',70,'a']])==19\nassert sum_of_digits([10,20,-4,5,-70])==19",
        "canonical_solution": "def sum_of_digits(nums):\r\n    return sum(int(el) for n in nums for el in str(n) if el.isdigit())"
    },
    {
        "number": 399,
        "prompt": "Write a function to perform the mathematical bitwise xor operation across the given tuples.\ndef bitwise_xor(test_tup1, test_tup2):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] ^ test_tup2[i],)\n    return result_tup\n\n# test the function with the following tuples\ntest_tup1 = (4, 15, 3, 8, 12)\ntest_tup2 = (8, 4, 5, 12, 1)\nprint(bitwise_xor(test_tup1, test_tup2))  # Output: (12, 11, 8, 0)\n\ntest_tup3 = (2, 3, 7, 6)\ntest_tup4 = (8, 4, 5, 9)\nprint(bitwise_xor(test_tup3, test_tup4))  # Output: (10, 7, 2, 15)\n\ntest_tup5 = (6, 1, 8, 12)\ntest_tup6 = (8, 4, 9, 12)\nprint(bitwise_xor(test_tup5, test_tup6))  # Output: (14, 7, 13, 0) ",
        "generated_testcode": "assert bitwise_xor((1, 2, 3), (4, 5, 6)) == (5, 7, 2)\n",
        "test": "assert bitwise_xor((10, 4, 6, 9), (5, 2, 3, 3)) == (15, 6, 5, 10)\nassert bitwise_xor((11, 5, 7, 10), (6, 3, 4, 4)) == (13, 6, 3, 14)\nassert bitwise_xor((12, 6, 8, 11), (7, 4, 5, 6)) == (11, 2, 13, 13)",
        "canonical_solution": "def bitwise_xor(test_tup1, test_tup2):\r\n  res = tuple(ele1 ^ ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\r\n  return (res) "
    },
    {
        "number": 400,
        "prompt": "Write a function to extract the frequency of unique tuples in the given list order irrespective.\ndef extract_freq(test_list):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    freq = {}\n    for item in test_list:\n        if item in freq:\n            freq[item] += 1\n        else:\n            freq[item] = 1\n    return freq\n\ntest_list = [(1, 2), (2, 3), (1, 2), (1, 2), (4, 5), (1, 2), (6, 7), (4, 5), (6, 7)]\nprint(extract_freq(test_list))  # Output: {(1, 2): 3, (2, 3): 1, (4, 5): 2, (6, 7): 2}\n\n# Test case 2\ntest_list = [(1, 2, 3), (1, 2, 3), (2, 3, 4), (1, 2, 3), (4, 5, 6), (1, 2, 3)]\nprint(extract_freq(test_list))  # Output: {(1, 2, 3): 3, (2, 3, 4): 1, (4, 5, 6): 1}\n\n# Test case 3\ntest_list = [(1,), (2,), (1,), (2,), (3,), (1,), (2,), (3,)]\nprint(extract_freq(test_list))  # Output: {(1,): 2",
        "generated_testcode": "assert extract_freq([\"apple\", \"banana\", \"apple\", \"orange\", \"banana\", \"apple\", \"orange\", \"banana\", \"kiwi\"]) == {\"apple\": 3, \"banana\": 3, \"orange\": 2, \"kiwi\": 1}\n",
        "test": "assert extract_freq([(3, 4), (1, 2), (4, 3), (5, 6)] ) == 3\nassert extract_freq([(4, 15), (2, 3), (5, 4), (6, 7)] ) == 4\nassert extract_freq([(5, 16), (2, 3), (6, 5), (6, 9)] ) == 4",
        "canonical_solution": "def extract_freq(test_list):\r\n  res = len(list(set(tuple(sorted(sub)) for sub in test_list)))\r\n  return (res)"
    },
    {
        "number": 401,
        "prompt": "Write a function to perform index wise addition of tuple elements in the given two nested tuples.\ndef add_nested_tuples(test_tup1, test_tup2):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    result = tuple()\n    for i in range(len(test_tup1)):\n        temp = tuple()\n        for j in range(len(test_tup1[i])):\n            temp += (test_tup1[i][j] + test_tup2[i][j],)\n        result += (temp,)\n    return result\n\n# Example usage:\ntest_tup1 = ((1, 2), (3, 4), (5, 6))\ntest_tup2 = ((7, 8), (9, 10), (11, 12))\nprint(add_nested_tuples(test_tup1, test_tup2))  # Output: ((8, 10), (12, 14), (16, 18))\n\n# Time Complexity: O(n)\n# Space Complexity: O(n)\n\n# Explanation:\n# We loop through each tuple in the given nested tuple and then loop through each element in that tuple to perform index-wise addition. \n# We append the sum of corresponding elements to a new tuple and then append the new tuple to the result tuple. \n# Finally, we return the result tuple which contains the sum of the nested tuples. ",
        "generated_testcode": "assert add_nested_tuples(((1,2,3), (4,5,6), (7,8,9)), ((10,20,30), (40,50,60), (70,80,90)) ) == ((11,22,33), (44,55,66), (77,88,99))\n",
        "test": "assert add_nested_tuples(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((7, 10), (7, 14), (3, 10), (8, 13))\nassert add_nested_tuples(((2, 4), (5, 6), (3, 10), (2, 11)), ((7, 8), (4, 10), (2, 2), (8, 4))) == ((9, 12), (9, 16), (5, 12), (10, 15))\nassert add_nested_tuples(((3, 5), (6, 7), (4, 11), (3, 12)), ((8, 9), (5, 11), (3, 3), (9, 5))) == ((11, 14), (11, 18), (7, 14), (12, 17))",
        "canonical_solution": "def add_nested_tuples(test_tup1, test_tup2):\r\n  res = tuple(tuple(a + b for a, b in zip(tup1, tup2))\r\n   for tup1, tup2 in zip(test_tup1, test_tup2))\r\n  return (res) "
    },
    {
        "number": 402,
        "prompt": "Write a function to compute the value of ncr%p.\ndef ncr_modp(n, r, p): \n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    # Initialize the numerator and denominator of the fraction \n    numerator, denominator = 1, 1\n    for i in range(r): \n        numerator = (numerator * (n - i) * p) % p \n        denominator = (denominator * (i + 1) * p) % p \n    return (numerator * pow(denominator, p - 2, p)) % p \n\n# Driver code \nn = 10\nr = 2\np = 13\nprint(ncr_modp(n, r, p)) ",
        "generated_testcode": "assert ncr_modp(10, 5, 7) == 2\n",
        "test": "assert ncr_modp(10,2,13)==6\nassert ncr_modp(15,12,43)==25\nassert ncr_modp(17,9,18)==10",
        "canonical_solution": "def ncr_modp(n, r, p): \r\n    C = [0 for i in range(r+1)]   \r\n    C[0] = 1\r\n    for i in range(1, n+1): \r\n        for j in range(min(i, r), 0, -1): \r\n            C[j] = (C[j] + C[j-1]) % p   \r\n    return C[r] "
    },
    {
        "number": 403,
        "prompt": "Write a function to check if a url is valid or not using regex.\ndef is_valid_URL(str):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    # Define a regular expression pattern for a valid URL\n    pattern = re.compile(r'^(?:http|ftp)s?://'\n        r'(?:(?:[A-Z0-9](?:[A-Z0-9-]{0,61}[A-Z0-9])?\\.)+[A-Z]{2,6}\\.?|'\n        r'localhost|'\n        r'\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3})'\n        r'(?::\\d+)?'\n        r'(?:/?|[/?]\\S+)$', re.IGNORECASE)\n\n    # Check if the url matches the pattern\n    if re.match(pattern, str):\n        return True\n    else:\n        return False\n\n# Test the function with some sample urls\nprint(is_valid_URL('http://www.google.com'))  # True\nprint(is_valid_URL('https://www.google.com')) # True\nprint(is_valid_URL('ftp://www.google.com'))   # True\nprint(is_valid_URL('https://www.google.com:8080'))   # True\nprint(is_valid_URL('https://localhost:80000'))      # True\nprint(is_valid_URL('https://127.0.0.1'))          # True\nprint(is_valid_URL('https://www.google.com/search",
        "generated_testcode": "assert is_valid_URL(\"https://www.google.com\") == True\n",
        "test": "assert is_valid_URL(\"https://www.google.com\") == True\nassert is_valid_URL(\"https:/www.gmail.com\") == False\nassert is_valid_URL(\"https:// www.redit.com\") == False",
        "canonical_solution": "import re\r\ndef is_valid_URL(str):\r\n\tregex = (\"((http|https)://)(www.)?\" +\r\n\t\t\t\"[a-zA-Z0-9@:%._\\\\+~#?&//=]\" +\r\n\t\t\t\"{2,256}\\\\.[a-z]\" +\r\n\t\t\t\"{2,6}\\\\b([-a-zA-Z0-9@:%\" +\r\n\t\t\t\"._\\\\+~#?&//=]*)\")\r\n\tp = re.compile(regex)\r\n\tif (str == None):\r\n\t\treturn False\r\n\tif(re.search(p, str)):\r\n\t\treturn True\r\n\telse:\r\n\t\treturn False"
    },
    {
        "number": 404,
        "prompt": "Write a python function to find the minimum of two numbers.\ndef minimum(a,b):   \n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    if a<b:\n        return a\n    else:\n        return b\n\nprint(minimum(10,20)) # Output: 10\nprint(minimum(30,5)) # Output: 5\n\n# Example 2: find the maximum of three numbers\ndef maximum(a,b,c):   \n    if a>=b and a>=c:\n        return a\n    elif b>=a and b>=c:\n        return b\n    else:\n        return c\n\nprint(maximum(10,20,30)) # Output: 30\nprint(maximum(30,50,10)) # Output: 50\nprint(maximum(30,20,40)) # Output: 40\n\n# Example 3: find the average of three numbers\ndef average(a,b,c):\n    return (a+b+c)/3\n\nprint(average(10,20,30)) # Output: 20.0\nprint(average(5,15,25)) # Output: 15.0\nprint(average(10,20,30)) # Output: 20.0\n\n# Example 4: find the square of a number\ndef square(x):\n    return x**2\n\nprint(square(5)) # Output: 25\nprint(square(10)) # Output: 100\nprint(square(15)) # Output: 22",
        "generated_testcode": "assert minimum(10, 5) == 5\n",
        "test": "assert minimum(1,2) == 1\nassert minimum(-5,-4) == -5\nassert minimum(0,0) == 0",
        "canonical_solution": "def minimum(a,b):   \r\n    if a <= b: \r\n        return a \r\n    else: \r\n        return b "
    },
    {
        "number": 405,
        "prompt": "Write a function to check whether an element exists within a tuple.\ndef check_tuplex(tuplex,tuple1): \n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    return tuple1 in tuplex\n   \n# Example usage: \nmy_tuple = (1, 2, 3, 4, 5) \nprint(check_tuplex(my_tuple,(1,2)) == True) ",
        "generated_testcode": "assert check_tuplex((1,2,3,4,5,6,7,8,9), 5) == True\n",
        "test": "assert check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),'r')==True\nassert check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),'5')==False\nassert check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\",\"e\"),3)==True",
        "canonical_solution": "def check_tuplex(tuplex,tuple1): \r\n  if tuple1 in tuplex:\r\n    return True\r\n  else:\r\n     return False"
    },
    {
        "number": 406,
        "prompt": "Write a python function to find the parity of a given number.\ndef find_Parity(x): \n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    if x % 2 == 0: \n        return \"Even\"\n    else: \n        return \"Odd\"\n\nprint(find_Parity(10)) ",
        "generated_testcode": "assert find_Parity(1) == \"Even\"\n",
        "test": "assert find_Parity(12) == \"Even Parity\"\nassert find_Parity(7) == \"Odd Parity\"\nassert find_Parity(10) == \"Even Parity\"",
        "canonical_solution": "def find_Parity(x): \r\n    y = x ^ (x >> 1); \r\n    y = y ^ (y >> 2); \r\n    y = y ^ (y >> 4); \r\n    y = y ^ (y >> 8); \r\n    y = y ^ (y >> 16); \r\n    if (y & 1): \r\n        return (\"Odd Parity\"); \r\n    return (\"Even Parity\"); "
    },
    {
        "number": 407,
        "prompt": "Write a function to create the next bigger number by rearranging the digits of a given number.\ndef rearrange_bigger(n):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    digits = [int(x) for x in str(n)]\n    digits.sort(reverse=True)\n    return int(\"\".join(str(x) for x in digits)\n\n# example usage:\nn = 1234567\nprint(rearrange_bigger(n)) # 7654321\n\n# Time complexity O(nlogn) due to the sorting, space complexity O(n) for the list\n\n# Alternatively, we can use the following one-liner:\ndef rearrange_bigger(n):\n    return int(\"\".join(sorted(str(n), reverse=True))\n\n# example usage:\nn = 1234567\nprint(rearrange_bigger(n)) # 7654321\n\n# Time complexity O(nlogn) due to the sorting, space complexity O(n) for the string\n# Note that the function will return a string instead of an int\n\n# Both solutions have the same time and space complexity, but the second one is more concise and readable\n",
        "generated_testcode": "assert (rearrange_bigger(1234) == 4321)\n",
        "test": "assert rearrange_bigger(12)==21\nassert rearrange_bigger(10)==False\nassert rearrange_bigger(102)==120",
        "canonical_solution": "def rearrange_bigger(n):\r\n    nums = list(str(n))\r\n    for i in range(len(nums)-2,-1,-1):\r\n        if nums[i] < nums[i+1]:\r\n            z = nums[i:]\r\n            y = min(filter(lambda x: x > z[0], z))\r\n            z.remove(y)\r\n            z.sort()\r\n            nums[i:] = [y] + z\r\n            return int(\"\".join(nums))\r\n    return False"
    },
    {
        "number": 408,
        "prompt": "Write a function to find k number of pairs which consist of one element from the first array and one element from the second array.\ndef k_smallest_pairs(nums1, nums2, k):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    nums1.sort()\n    nums2.sort()\n    i, j, count = 0, 0, 0\n    result = []\n    while i < len(nums1) and j < len(nums2):\n        if nums1[i] + nums2[j] < k:\n            result.append([nums1[i], nums2[j]])\n            i += 1\n            j += 1\n        elif nums1[i] + nums2[j] > k:\n            j += 1\n        else:\n            result.append([nums1[i], nums2[j]])\n            i += 1\n            j += 1\n            count += 1\n            if count == k:\n                break\n    return result\n\ndef main():\n    nums1 = [1, 7, 11]\n    nums2 = [2, 4, 6, 8, 10]\n    k = 16\n    print(k_smallest_pairs(nums1, nums2, k)) # Output: [[1, 7], [7, 2], [7, 4]]\n\nif __name__ == \"__main__\":\n    main()\n\n# Time Complexity: O(nlogn + mlogm + k)",
        "generated_testcode": "assert k_smallest_pairs([1, 7, 11], [2, 4, 6, 8, 10], 3) == [(1, 2), (1, 4), (1, 6)]\n",
        "test": "assert k_smallest_pairs([1,3,7],[2,4,6],2)==[[1, 2], [1, 4]]\nassert k_smallest_pairs([1,3,7],[2,4,6],1)==[[1, 2]]\nassert k_smallest_pairs([1,3,7],[2,4,6],7)==[[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]",
        "canonical_solution": "import heapq\r\ndef k_smallest_pairs(nums1, nums2, k):\r\n   queue = []\r\n   def push(i, j):\r\n       if i < len(nums1) and j < len(nums2):\r\n           heapq.heappush(queue, [nums1[i] + nums2[j], i, j])\r\n   push(0, 0)\r\n   pairs = []\r\n   while queue and len(pairs) < k:\r\n       _, i, j = heapq.heappop(queue)\r\n       pairs.append([nums1[i], nums2[j]])\r\n       push(i, j + 1)\r\n       if j == 0:\r\n           push(i + 1, 0)\r\n   return pairs"
    },
    {
        "number": 409,
        "prompt": "Write a function to find the minimum product from the pairs of tuples within a given list.\ndef min_product_tuple(list1):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    min_product = float('inf')\n    for i in range(len(list1)):\n        for j in range(i+1,len(list1)):\n            if list1[i][1]*list1[j][1] < min_product:\n                min_product = list1[i][1]*list1[j][1]\n    return min_product\n\n\n# Example usage:\nlist1 = [(1,5),(2,6),(3,4)]\nprint(min_product_tuple(list1)) # Output: 6\n\nlist2 = [(4,8),(3,6),(2,7),(1,5)]\nprint(min_product_tuple(list2)) # Output: 8\n\nlist3 = [(1,3),(2,4),(3,5)]\nprint(min_product_tuple(list3)) # Output: 3\n\nlist4 = [(1,2),(2,3)]\nprint(min_product_tuple(list4)) # Output: 2\n\nlist5 = [(4,5),(5,4),(6,3)]\nprint(min_product_tuple(list5)) # Output: 12\n\n# Time complexity: O(n^2) ",
        "generated_testcode": "assert min_product_tuple([(1, 2), (3, 4), (5, 6)]) == 12\n",
        "test": "assert min_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==8\nassert min_product_tuple([(10,20), (15,2), (5,10)] )==30\nassert min_product_tuple([(11,44), (10,15), (20,5), (12, 9)] )==100",
        "canonical_solution": "def min_product_tuple(list1):\r\n    result_min = min([abs(x * y) for x, y in list1] )\r\n    return result_min"
    },
    {
        "number": 410,
        "prompt": "Write a function to find the minimum value in a given heterogeneous list.\ndef min_val(listval):\n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    # Initialize min_val to the first element in the list\n    min_val = listval[0]\n    # Loop through the list\n    for i in range(len(listval)):\n        # If the current element is smaller than the current min_val, update min_val\n        if listval[i] < min_val:\n            min_val = listval[i]\n    # Return the minimum value\n    return min_val\n\n# Test the function\nprint(min_val([1, 5, 2, 3, 7, 9, 0, -2, 8, -5, 3, 21])) # Output: -5\nprint(min_val([-5, 10, 20, 30, 40, 50, 60, -50, 70])) # Output: -50\nprint(min_val([1.5, 3.2, 2.3, 4.5, 2.1, 0.9])) # Output: 0.9\nprint(min_val([\"apple\", \"banana\", \"orange\", \"kiwi\", \"grape\"])) # Output: apple\nprint(min_val([True, False, True, False, True, False])) # Output: False\n",
        "generated_testcode": "assert min_val([1, 2, 3, 4, 5, 6, 7]) == 1\n",
        "test": "assert min_val(['Python', 3, 2, 4, 5, 'version'])==2\nassert min_val(['Python', 15, 20, 25])==15\nassert min_val(['Python', 30, 20, 40, 50, 'version'])==20",
        "canonical_solution": "def min_val(listval):\r\n     min_val = min(i for i in listval if isinstance(i, int))\r\n     return min_val"
    },
    {
        "number": 411,
        "prompt": "Write a function to convert the given snake case string to camel case string by using regex.\ndef snake_to_camel(word):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": true,
        "answer": "    # splitting the snake case string by using \"_\" as delimiter\n    words = word.split(\"_\")\n    # converting each word to camel case by capitalizing the first letter and joining the string\n    camel_case = \"\".join([word.capitalize() for word in words])\n    return camel_case[0].lower() + camel_case[1:]\n\n# Testing the function with sample inputs\nprint(snake_to_camel(\"hello_world\")) # Output: helloWorld\nprint(snake_to_camel(\"this_is_a_test_string\")) # Output: thisIsATestString\nprint(snake_to_camel(\"the_quick_brown_fox_jumps_over_the_lazy_dog\")) # Output: theQuickBrownFoxJumpsOverTheLazyDog\n\n# Time Complexity: O(n), where n is the length of the input string\n# Space Complexity: O(n), where n is the length of the input string ",
        "generated_testcode": "assert snake_to_camel(\"hello_world\") == \"helloWorld\"\n",
        "test": "assert snake_to_camel('android_tv') == 'AndroidTv'\nassert snake_to_camel('google_pixel') == 'GooglePixel'\nassert snake_to_camel('apple_watch') == 'AppleWatch'",
        "canonical_solution": "import re\r\ndef snake_to_camel(word):\r\n  return ''.join(x.capitalize() or '_' for x in word.split('_'))"
    },
    {
        "number": 412,
        "prompt": "Write a python function to remove odd numbers from a given list.\ndef remove_odd(l):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    return [i for i in l if i % 2 == 0]\n\n# Test the function with the following list\nl = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]\nprint(remove_odd(l))\n\n# Output: [2, 4, 6, 8, 10, 12]\n\n# You can also use a for loop to achieve the same result:\ndef remove_odd(l):\n    result = []\n    for i in l:\n        if i % 2 == 0:\n            result.append(i)\n    return result\n\n# Test the function with the same list\nl = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]\nprint(remove_odd(l))\n\n# Output: [2, 4, 6, 8, 10, 12]\n",
        "generated_testcode": "assert remove_odd([1, 2, 3, 4, 5, 6, 7, 8, 9]) == [2, 4, 6, 8]\n",
        "test": "assert remove_odd([1,2,3]) == [2]\nassert remove_odd([2,4,6]) == [2,4,6]\nassert remove_odd([10,20,3]) == [10,20]",
        "canonical_solution": "def remove_odd(l):\r\n    for i in l:\r\n        if i % 2 != 0:\r\n            l.remove(i)\r\n    return l"
    },
    {
        "number": 413,
        "prompt": "Write a function to extract the nth element from a given list of tuples.\ndef extract_nth_element(list1, n):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    return [tup[n] for tup in list1]\n\n# Example usage:\nlist1 = [(1, 2, 3), (4, 5, 6), (7, 8, 9)]\nn = 1\nprint(extract_nth_element(list1, n)) # Output: [2, 5, 8]\n\n# Explanation: The function takes a list of tuples and an integer n as arguments. It uses a list comprehension to iterate through each tuple in the list and returns the nth element of each tuple. In the given example, it returns the second element of each tuple, i.e., 2, 5, and 8. ",
        "generated_testcode": "assert extract_nth_element([(1, 2, 3), (4, 5, 6), (7, 8, 9)], 1) == [2, 5, 8]\n",
        "test": "assert extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,0)==['Greyson Fulton', 'Brady Kent', 'Wyatt Knott', 'Beau Turnbull']\nassert extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,2)==[99, 96, 94, 98]\nassert extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)],1)==[98, 97, 91, 94]",
        "canonical_solution": "def extract_nth_element(list1, n):\r\n    result = [x[n] for x in list1]\r\n    return result"
    },
    {
        "number": 414,
        "prompt": "Write a python function to check whether the value exists in a sequence or not.\ndef overlapping(list1,list2):  \n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    for i in list1:\n        if i in list2:\n            return True\n    return False\n\n# Test the function with an example\nlist1 = [1,2,3,4,5]\nlist2 = [3,4,5,6,7]\n\nprint(overlapping(list1,list2)) # Output: True\n\nlist1 = [1,2,3,4,5]\nlist2 = [6,7,8,9]\n\nprint(overlapping(list1,list2)) # Output: False ",
        "generated_testcode": "assert overlapping([1,2,3,4,5],[2,3,4,6]) == True\n",
        "test": "assert overlapping([1,2,3,4,5],[6,7,8,9]) == False\nassert overlapping([1,2,3],[4,5,6]) == False\nassert overlapping([1,4,5],[1,4,5]) == True",
        "canonical_solution": "def overlapping(list1,list2):  \r\n    c=0\r\n    d=0\r\n    for i in list1: \r\n        c+=1\r\n    for i in list2: \r\n        d+=1\r\n    for i in range(0,c): \r\n        for j in range(0,d): \r\n            if(list1[i]==list2[j]): \r\n                return 1\r\n    return 0"
    },
    {
        "number": 415,
        "prompt": "Write a python function to find a pair with highest product from a given array of integers.\ndef max_Product(arr): \n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    # initialize two variables to store the highest and second highest values\n    max1 = max2 = float('-inf')\n    # traverse the array and update the highest and second highest values\n    for i in arr:\n        if i > max1:\n            max2 = max1\n            max1 = i\n        elif i > max2 and i != max1:\n            max2 = i\n    # return the highest product of two values\n    return max1 * max2\n# test the function\narr = [1, 10, 3, 5, 6, 7, 8]\nprint(max_Product(arr))\n\n# output: 80 ",
        "generated_testcode": "assert max_Product([1, 2, 3, 4, 5, 6]) == 30\n",
        "test": "assert max_Product([1,2,3,4,7,0,8,4]) == (7,8)\nassert max_Product([0,-1,-2,-4,5,0,-6]) == (-4,-6)\nassert max_Product([1,2,3]) == (2,3)",
        "canonical_solution": "def max_Product(arr): \r\n    arr_len = len(arr) \r\n    if (arr_len < 2): \r\n        return (\"No pairs exists\")           \r\n    x = arr[0]; y = arr[1]      \r\n    for i in range(0,arr_len): \r\n        for j in range(i + 1,arr_len): \r\n            if (arr[i] * arr[j] > x * y): \r\n                x = arr[i]; y = arr[j] \r\n    return x,y    "
    },
    {
        "number": 416,
        "prompt": "Write a function to find the maximum sum we can make by dividing number in three parts recursively and summing them up together for the given number.\ndef breakSum(n): \n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    if n == 0:\n        return 0\n    if n == 1 or n == 2:\n        return n\n    if n == 3:\n        return 3\n    if n > 3:\n        return max(n, breakSum(n//2) + breakSum(n//2) + n%2)\n    return max(n, breakSum(n-1) + breakSum(1), breakSum(n//2) + breakSum(n//2) + n%2) \n\nn = 4\nprint(breakSum(n)) ",
        "generated_testcode": "assert breakSum(10) == 10\n",
        "test": "assert breakSum(12) == 13\nassert breakSum(24) == 27\nassert breakSum(23) == 23",
        "canonical_solution": "MAX = 1000000\r\ndef breakSum(n): \r\n\tdp = [0]*(n+1) \r\n\tdp[0] = 0\r\n\tdp[1] = 1\r\n\tfor i in range(2, n+1): \r\n\t\tdp[i] = max(dp[int(i/2)] + dp[int(i/3)] + dp[int(i/4)], i); \r\n\treturn dp[n]"
    },
    {
        "number": 417,
        "prompt": "Write a function to find common first element in given list of tuple.\ndef group_tuples(Input): \n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    #Initialize an empty set to store common elements\n    common_elements = set()\n    #Iterate over all tuples in the input list\n    for tup in Input:\n        #Iterate over all elements in each tuple\n        for i in tup:\n            #If element is present in common_elements, break the loop and return the element\n            if i in common_elements:\n                return i\n            #Add element to common_elements if not present\n            common_elements.add(i)\n    return None\n\n#Test the function with sample input\nInput = [(1, 2, 3), (4, 5, 6), (1, 7, 8), (1, 9, 10)]\nprint(group_tuples(Input))\n#Output: 1\n\nInput = [(1, 2, 3), (4, 5, 6), (7, 8, 9), (10, 11, 12)]\nprint(group_tuples(Input))\n#Output: None\n\nInput = [(1, 2, 3, 4), (2, 3, 4, 5), (3, 4, 5, 6)]\nprint(group_tuples(Input))\n#Output: 4\n\nInput = [(1, 2, 3), (2, 3, 4), (3, 4, 5), (4, 5, 6)]\nprint(group_tuples(Input))\n#Output:",
        "generated_testcode": "assert group_tuples([(1, 2, 3), (1, 4, 5), (1, 6, 7)]) == 1\n",
        "test": "assert group_tuples([('x', 'y'), ('x', 'z'), ('w', 't')]) == [('x', 'y', 'z'), ('w', 't')]\nassert group_tuples([('a', 'b'), ('a', 'c'), ('d', 'e')]) == [('a', 'b', 'c'), ('d', 'e')]\nassert group_tuples([('f', 'g'), ('f', 'g'), ('h', 'i')]) == [('f', 'g', 'g'), ('h', 'i')]",
        "canonical_solution": "def group_tuples(Input): \r\n\tout = {} \r\n\tfor elem in Input: \r\n\t\ttry: \r\n\t\t\tout[elem[0]].extend(elem[1:]) \r\n\t\texcept KeyError: \r\n\t\t\tout[elem[0]] = list(elem) \r\n\treturn [tuple(values) for values in out.values()] "
    },
    {
        "number": 418,
        "prompt": "Write a python function to find the sublist having maximum length.\ndef Find_Max(lst): \n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    max_len = 0\n    start = 0\n    end = 0\n    n = len(lst)\n    i = 0\n    while i < n: \n        max_len_local = 1\n        j = i + 1\n        while j < n and lst[j] == lst[i]: \n            max_len_local += 1\n            j += 1\n        if max_len_local > max_len: \n            max_len = max_len_local\n            start = i\n            end = j\n        i = j\n    return lst[start:end] \n  \nlst = [1, 2, 2, 3, 3, 3, 4, 5, 5, 5, 5]\nprint(\"Sublist with maximum length is\", Find_Max(lst)) ",
        "generated_testcode": "assert Find_Max([1, 2, 3, 4, 5, 6, 7, 8, 9]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]\n",
        "test": "assert Find_Max([['A'],['A','B'],['A','B','C']]) == ['A','B','C']\nassert Find_Max([[1],[1,2],[1,2,3]]) == [1,2,3]\nassert Find_Max([[1,1],[1,2,3],[1,5,6,1]]) == [1,5,6,1]",
        "canonical_solution": "def Find_Max(lst): \r\n    maxList = max((x) for x in lst) \r\n    return maxList"
    },
    {
        "number": 419,
        "prompt": "Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\ndef round_and_sum(list1):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    sum = 0\n    for num in list1:\n        round_num = round(num)\n        sum += round_num\n    total_sum = sum * len(list1)\n    return total_sum\n\n\nprint(round_and_sum([1.3, 2.6, 3.7, 4.1, 5.2, 6.8, 7.0]))  # Should return 26\nprint(round_and_sum([7.1, 8.9, 9.5, 10.1, 11.9]))      # Should return 46\nprint(round_and_sum([1.5, 2.5, 3.5, 4.5, 5.5, 6.5]))   # Should return 24\nprint(round_and_sum([7, 8, 9, 10, 11, 12]))           # Should return 54\nprint(round_and_sum([1.7, 2.3, 3.1, 4.4, 5.5, 6.7, 7.9])) # Should return 41\n\n# Test your function with the examples above and see if it produces the expected output. ",
        "generated_testcode": "assert round_and_sum([1.5, 2.3, 3.6, 4.5, 5.7]) == 22\n",
        "test": "assert round_and_sum([22.4, 4.0, -16.22, -9.10, 11.00, -12.22, 14.20, -5.20, 17.50])==243\nassert round_and_sum([5,2,9,24.3,29])==345\nassert round_and_sum([25.0,56.7,89.2])==513",
        "canonical_solution": "def round_and_sum(list1):\r\n  lenght=len(list1)\r\n  round_and_sum=sum(list(map(round,list1))* lenght)\r\n  return round_and_sum"
    },
    {
        "number": 420,
        "prompt": "Write a python function to find the cube sum of first n even natural numbers.\ndef cube_Sum(n): \n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    sum = 0\n    for i in range(1, n+1): \n        sum += i**3\n    return sum \n  \nn = int(input(\"Enter the value of n: \")) \nresult = cube_Sum(n) \nprint(\"The sum of cube of first\",n,\"natural numbers is\",result) ",
        "generated_testcode": "assert cube_Sum(5) == 225\n",
        "test": "assert cube_Sum(2) == 72\nassert cube_Sum(3) == 288\nassert cube_Sum(4) == 800",
        "canonical_solution": "def cube_Sum(n): \r\n    sum = 0\r\n    for i in range(1,n + 1): \r\n        sum += (2*i)*(2*i)*(2*i) \r\n    return sum"
    },
    {
        "number": 421,
        "prompt": "Write a function to concatenate each element of tuple by the delimiter.\ndef concatenate_tuple(test_tup):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    return \"\".join(test_tup)\n\n# Example usage:\nconcatenated_tuple = concatenate_tuple((\"Hello\", \"World\", \"!\")\nprint(concatenated_tuple) # Output: \"HelloWorld!\"\nconcatenated_tuple = concatenate_tuple(\"How\", \"are\", \"you\", \"doing\", \"today?\")\nprint(concatenated_tuple) # Output: \"Howareyoudoting?\"\nconcatenated_tuple = concatenate_tuple(\"1\", \"2\", \"3\", \"4\", \"5\")\nprint(concatenated_tuple) # Output: \"12345\" ",
        "generated_testcode": "assert concatenate_tuple((\"hello\", \"world\", \"python\") == \"hello_world_python\")\n",
        "test": "assert concatenate_tuple((\"ID\", \"is\", 4, \"UTS\") ) == 'ID-is-4-UTS'\nassert concatenate_tuple((\"QWE\", \"is\", 4, \"RTY\") ) == 'QWE-is-4-RTY'\nassert concatenate_tuple((\"ZEN\", \"is\", 4, \"OP\") ) == 'ZEN-is-4-OP'",
        "canonical_solution": "def concatenate_tuple(test_tup):\r\n    delim = \"-\"\r\n    res = ''.join([str(ele) + delim for ele in test_tup])\r\n    res = res[ : len(res) - len(delim)]\r\n    return (str(res)) "
    },
    {
        "number": 422,
        "prompt": "Write a python function to find the average of cubes of first n natural numbers.\ndef find_Average_Of_Cube(n):  \n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    sum = 0\n    for i in range(1, n+1): \n        sum = sum + i**3\n    return sum / n \n  \n# Taking input from user \nn = int(input(\"Enter the value of n: \")) \n  \n# finding the average of cubes of first n natural numbers \naverage = find_Average_Of_Cube(n) \n  \n# displaying the result \nprint(\"The average of cubes of first\", n, \"natural numbers is\", average) ",
        "generated_testcode": "assert find_Average_Of_Cube(5) == 125.0\n",
        "test": "assert find_Average_Of_Cube(2) == 4.5\nassert find_Average_Of_Cube(3) == 12\nassert find_Average_Of_Cube(1) == 1",
        "canonical_solution": "def find_Average_Of_Cube(n):  \r\n    sum = 0\r\n    for i in range(1, n + 1): \r\n        sum += i * i * i  \r\n    return round(sum / n, 6) "
    },
    {
        "number": 423,
        "prompt": "Write a function to solve gold mine problem.\ndef get_maxgold(gold, m, n): \n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    gold_list = [[0 for j in range(n)] for i in range(m)] \n    for i in range(m): \n        for j in range(n): \n            if i == 0 or j == 0 or i == m-1 or j == n-1: \n                gold_list[i][j] = gold[i][j] \n            else: \n                gold_list[i][j] = gold[i][j] + max(gold[i-1][j], gold[i][j-1], gold[i+1][j], gold[i][j+1]) \n    max_gold = gold_list[1][1] \n    for i in range(1, m-1): \n        for j in range(1, n-1): \n            if gold_list[i][j] > max_gold: \n                max_gold = gold_list[i][j] \n    return max_gold \n\n#Test the function \ngold = [[1, 3, 1, 5], \n        [2, 2, 4, 6], \n        [7, 5, 1, 4], \n        [3, 6, 2, 7]] \nm = len(gold) \nn = len(gold[0]) \nprint(\"Maximum gold that can be collected :\", get_maxgold(gold, m, n)) \n\n#Time",
        "generated_testcode": "assert get_maxgold([[1, 3, 1, 5], [2, 2, 4], [5, 0, 2], [3, 6, 1]], 3, 3) == 12\n",
        "test": "assert get_maxgold([[1, 3, 1, 5],[2, 2, 4, 1],[5, 0, 2, 3],[0, 6, 1, 2]],4,4)==16\nassert get_maxgold([[10,20],[30,40]],2,2)==70\nassert get_maxgold([[4,9],[3,7]],2,2)==13",
        "canonical_solution": "def get_maxgold(gold, m, n): \r\n    goldTable = [[0 for i in range(n)] \r\n                        for j in range(m)]   \r\n    for col in range(n-1, -1, -1): \r\n        for row in range(m):  \r\n            if (col == n-1): \r\n                right = 0\r\n            else: \r\n                right = goldTable[row][col+1] \r\n            if (row == 0 or col == n-1): \r\n                right_up = 0\r\n            else: \r\n                right_up = goldTable[row-1][col+1] \r\n            if (row == m-1 or col == n-1): \r\n                right_down = 0\r\n            else: \r\n                right_down = goldTable[row+1][col+1] \r\n            goldTable[row][col] = gold[row][col] + max(right, right_up, right_down) \r\n    res = goldTable[0][0] \r\n    for i in range(1, m): \r\n        res = max(res, goldTable[i][0])  \r\n    return res "
    },
    {
        "number": 424,
        "prompt": "Write a function to extract only the rear index element of each string in the given tuple.\ndef extract_rear(test_tuple):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    result = []\n    for i in test_tuple:\n        result.append(i[-1])\n    return result\n\n# Test the function with example tuple\ntest_tuple = ('abc', 'def', 'ghi', 'jkl')\nprint(extract_rear(test_tuple))  # Output: ['c', 'f', 'i', 'l']\n\n# Test the function with another tuple\ntest_tuple = ('python', 'java', 'kotlin', 'javascript')\nprint(extract_rear(test_tuple))  # Output: ['thon', 'va', 'script']\n\n# Test the function with empty tuple\ntest_tuple = ()\nprint(extract_rear(test_tuple))  # Output: [] ",
        "generated_testcode": "assert extract_rear((\"apple\", \"banana\", \"cherry\", \"date\", \"elderberry\") == (3, 4, 5, 4)\n\n",
        "test": "assert extract_rear(('Mers', 'for', 'Vers') ) == ['s', 'r', 's']\nassert extract_rear(('Avenge', 'for', 'People') ) == ['e', 'r', 'e']\nassert extract_rear(('Gotta', 'get', 'go') ) == ['a', 't', 'o']",
        "canonical_solution": "def extract_rear(test_tuple):\r\n  res = list(sub[len(sub) - 1] for sub in test_tuple)\r\n  return (res) "
    },
    {
        "number": 425,
        "prompt": "Write a function to count the number of sublists containing a particular element.\ndef count_element_in_list(list1, x): \n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    count = 0\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            sublist = list1[i:j+1]\n            if x in sublist:\n                count += 1\n    return count\n\n# Test the function with an example\nlist1 = [1, 2, 3, 4, 5, 2, 6, 7, 2]\nx = 2\nprint(count_element_in_list(list1, x))  # Output: 3 ",
        "generated_testcode": "assert count_element_in_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5) == 1\n",
        "test": "assert count_element_in_list([[1, 3], [5, 7], [1, 11], [1, 15, 7]],1)==3\nassert count_element_in_list([['A', 'B'], ['A', 'C'], ['A', 'D', 'E'], ['B', 'C', 'D']],'A')==3\nassert count_element_in_list([['A', 'B'], ['A', 'C'], ['A', 'D', 'E'], ['B', 'C', 'D']],'E')==1",
        "canonical_solution": "def count_element_in_list(list1, x): \r\n    ctr = 0\r\n    for i in range(len(list1)): \r\n        if x in list1[i]: \r\n            ctr+= 1          \r\n    return ctr"
    },
    {
        "number": 426,
        "prompt": "Write a function to filter odd numbers using lambda function.\ndef filter_oddnumbers(nums):\n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    return list(filter(lambda x: x % 2 != 0, nums))\n\n# Test the function\nprint(filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])) # Output: [1, 3, 5, 7, 9] ",
        "generated_testcode": "assert filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9]) == [1, 3, 5, 7, 9]\n",
        "test": "assert filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1,3,5,7,9]\nassert filter_oddnumbers([10,20,45,67,84,93])==[45,67,93]\nassert filter_oddnumbers([5,7,9,8,6,4,3])==[5,7,9,3]",
        "canonical_solution": "def filter_oddnumbers(nums):\r\n odd_nums = list(filter(lambda x: x%2 != 0, nums))\r\n return odd_nums"
    },
    {
        "number": 427,
        "prompt": "Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format by using regex.\ndef change_date_format(dt):\n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    import re\n    dt = re.sub(r'^(\\d{4})-(\\d{2})-(\\d{2})', r'\\3-\\2-\\1', dt)\n    return dt\n\n# Example usage:\nprint(change_date_format('2020-02-15'))  # Output: '15-02-2020'\nprint(change_date_format('2021-12-01'))  # Output: '01-12-2021'\nprint(change_date_format('2022-06-30'))  # Output: '30-06-2022'\n\n# Test your function with the examples provided. ",
        "generated_testcode": "assert change_date_format(\"2021-05-15\") == \"15-05-2021\"\n",
        "test": "assert change_date_format(\"2026-01-02\") == '02-01-2026'\nassert change_date_format(\"2020-11-13\") == '13-11-2020'\nassert change_date_format(\"2021-04-26\") == '26-04-2021'",
        "canonical_solution": "import re\r\ndef change_date_format(dt):\r\n        return re.sub(r'(\\d{4})-(\\d{1,2})-(\\d{1,2})', '\\\\3-\\\\2-\\\\1', dt)"
    },
    {
        "number": 428,
        "prompt": "Write a function to sort the given array by using shell sort.\ndef shell_sort(my_list):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    n = len(my_list)\n    gap = n//2\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j-gap] > temp:\n                my_list[j] = my_list[j-gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n    return my_list\n\n# Test the function with an example\nmy_list = [9, 2, 7, 4, 5, 6, 3, 1, 8]\nprint(\"Sorted list is:\", shell_sort(my_list)) ",
        "generated_testcode": "assert shell_sort(my_list) == sorted(my_list)\n\n# Test the function with an example\nmy_list = [3, 1, 4, 2, 5, 6, 7, 8, 9, 0, 10, 11, 12, 13, 14, 15]\nprint(shell_sort(my_list)) # should print [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]\n\n",
        "test": "assert shell_sort([12, 23, 4, 5, 3, 2, 12, 81, 56, 95]) == [2, 3, 4, 5, 12, 12, 23, 56, 81, 95]\nassert shell_sort([24, 22, 39, 34, 87, 73, 68]) == [22, 24, 34, 39, 68, 73, 87]\nassert shell_sort([32, 30, 16, 96, 82, 83, 74]) == [16, 30, 32, 74, 82, 83, 96]",
        "canonical_solution": "def shell_sort(my_list):\r\n    gap = len(my_list) // 2\r\n    while gap > 0:\r\n        for i in range(gap, len(my_list)):\r\n            current_item = my_list[i]\r\n            j = i\r\n            while j >= gap and my_list[j - gap] > current_item:\r\n                my_list[j] = my_list[j - gap]\r\n                j -= gap\r\n            my_list[j] = current_item\r\n        gap //= 2\r\n\r\n    return my_list"
    },
    {
        "number": 429,
        "prompt": "Write a function to extract the elementwise and tuples from the given two tuples.\ndef and_tuples(test_tup1, test_tup2):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    result = tuple()\n    for i in range(len(test_tup1)):\n        result += (test_tup1[i] & test_tup2[i],)\n    return result\n\n# Test the function with the given example\ntest_tup1 = (2, 3, 5, 7)\ntest_tup2 = (1, 2, 4, 8)\nprint(and_tuples(test_tup1, test_tup2))  # Output: (0, 2, 4, 0)\n\n# Explanation: \n# The output is a tuple containing the result of bitwise AND operation between the corresponding elements of the two tuples. \n# 2 & 1 = 0, 3 & 2 = 2, 5 & 4 = 4, and 7 & 8 = 0. ",
        "generated_testcode": "assert and_tuples((1, 2, 3), (4, 5, 6)) == (1, 2, 3, 4, 5, 6)\n",
        "test": "assert and_tuples((10, 4, 6, 9), (5, 2, 3, 3)) == (0, 0, 2, 1)\nassert and_tuples((1, 2, 3, 4), (5, 6, 7, 8)) == (1, 2, 3, 0)\nassert and_tuples((8, 9, 11, 12), (7, 13, 14, 17)) == (0, 9, 10, 0)",
        "canonical_solution": "def and_tuples(test_tup1, test_tup2):\r\n  res = tuple(ele1 & ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\r\n  return (res) "
    },
    {
        "number": 430,
        "prompt": "Write a function to find the directrix of a parabola.\ndef parabola_directrix(a, b, c): \n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    return -b/2\n\n# Example usage:\nprint(parabola_directrix(a=2, b=5, c=3)) # Output: -1.5\n\n# Write a function to find the focus of a parabola.\ndef parabola_focus(a, b, c): \n    return c/2\n\n# Example usage:\nprint(parabola_focus(a=2, b=5, c=3)) # Output: 3\n\n# Write a function to find the vertex of a parabola.\ndef parabola_vertex(a, b, c):\n    x_vertex = -b/(2*a)\n    y_vertex = a*x_vertex**2 + b*x_vertex + c\n    return (x_vertex, y_vertex)\n\n# Example usage:\nprint(parabola_vertex(a=2, b=5, c=3)) # Output: (-1.0, 0.0)\n\n# Write a function to find the equation of a parabola.\ndef parabola_equation(a, b, c, x):\n    return a*(x**2) + b*x + c\n\n# Example usage:\nprint(parabola_equation(a=2, b=5, c=3, x=2)) # Output: 13\n\n# Write a function to find the equation of the normal to a parabola at a given point.\ndef parabola_normal(a",
        "generated_testcode": "assert parabola_directrix(1, 10, -15) == 1\n",
        "test": "assert parabola_directrix(5,3,2)==-198\nassert parabola_directrix(9,8,4)==-2336\nassert parabola_directrix(2,4,6)==-130",
        "canonical_solution": "def parabola_directrix(a, b, c): \r\n  directrix=((int)(c - ((b * b) + 1) * 4 * a ))\r\n  return directrix"
    },
    {
        "number": 431,
        "prompt": "Write a function that takes two lists and returns true if they have at least one common element.\ndef common_element(list1, list2):\n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    for i in range(len(list1)):\n        if list1[i] in list2:\n            return True\n    return False\n\n# Example usage:\nprint(common_element([1, 2, 3, 4], [3, 5, 6])) # Output: True\nprint(common_element([1, 2, 3], [4, 5, 6])) # Output: False\n\n# Output: True\n\n# This function works by iterating over each element in the first list and checking if it is in the second list. If it is, it returns True. If it goes through the entire list and doesn't find a common element, it returns False. This is not the most efficient way to check for common elements since it has a time complexity of O(n^2). ",
        "generated_testcode": "assert common_element([1, 2, 3, 4, 5], [3, 6, 7, 8]) == True\n",
        "test": "assert common_element([1,2,3,4,5], [5,6,7,8,9])==True\nassert common_element([1,2,3,4,5], [6,7,8,9])==None\nassert common_element(['a','b','c'], ['d','b','e'])==True",
        "canonical_solution": "def common_element(list1, list2):\r\n     result = False\r\n     for x in list1:\r\n         for y in list2:\r\n             if x == y:\r\n                 result = True\r\n                 return result"
    },
    {
        "number": 432,
        "prompt": "Write a function to find the median of a trapezium.\ndef median_trapezium(base1,base2,height):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    area = (base1+base2)*height/2\n    return area\n#Testing the function\nprint(median_trapezium(6,7,3)) #Output: 21\nprint(median_trapezium(10,12,5)) #Output: 60 ",
        "generated_testcode": "assert median_trapezium(10, 20, 5) == 12.5\n",
        "test": "assert median_trapezium(15,25,35)==20\nassert median_trapezium(10,20,30)==15\nassert median_trapezium(6,9,4)==7.5",
        "canonical_solution": "def median_trapezium(base1,base2,height):\r\n median = 0.5 * (base1+ base2)\r\n return median"
    },
    {
        "number": 433,
        "prompt": "Write a function to check whether the entered number is greater than the elements of the given array.\ndef check_greater(arr, number):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    for i in range(len(arr)):\n        if arr[i] > number:\n            return True\n    return False\n\n\n# Testing the function\narr = [10, 20, 30, 40, 50]\nnumber = 40\nprint(check_greater(arr, number))  # Output: True\n\narr = [10, 20, 30, 40, 50]\nnumber = 60\nprint(check_greater(arr, number))  # Output: False\n\n# OR\n\narr = [10, 20, 30, 40, 50]\nnumber = 40\nif any(i > number for i in arr):\n    print(True)\nelse:\n    print(False)  # Output: True\n\n# OR\n\narr = [10, 20, 30, 40, 50]\nnumber = 40\nprint(any(i > number for i in arr))  # Output: True\n\narr = [10, 20, 30, 40, 50]\nnumber = 60\nprint(any(i > number for i in arr))  # Output: False\n",
        "generated_testcode": "assert check_greater([1, 2, 3, 4, 5], 3) == True\n",
        "test": "assert check_greater([1, 2, 3, 4, 5], 4) == 'No, entered number is less than those in the array'\nassert check_greater([2, 3, 4, 5, 6], 8) == 'Yes, the entered number is greater than those in the array'\nassert check_greater([9, 7, 4, 8, 6, 1], 11) == 'Yes, the entered number is greater than those in the array'",
        "canonical_solution": "def check_greater(arr, number):\r\n  arr.sort()\r\n  if number > arr[-1]:\r\n    return ('Yes, the entered number is greater than those in the array')\r\n  else:\r\n    return ('No, entered number is less than those in the array')"
    },
    {
        "number": 434,
        "prompt": "Write a function that matches a string that has an a followed by one or more b's.\ndef text_match_one(text):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    pattern = r\"a.*b+\"\n    return re.search(pattern, text) is not None\n\n# Test cases\nprint(text_match_one(\"ab\")) # Should return True\nprint(text_match_one(\"abc\")) # Should return True\nprint(text_match_one(\"acc\")) # Should return False\nprint(text_match_one(\"abb\")) # Should return True\nprint(text_match_one(\"bbb\")) # Should return True\nprint(text_match_one(\"bc\")) # Should return False ",
        "generated_testcode": "assert text_match_one(\"ab\") == True\n",
        "test": "assert text_match_one(\"ac\")==('Not matched!')\nassert text_match_one(\"dc\")==('Not matched!')\nassert text_match_one(\"abba\")==('Found a match!')",
        "canonical_solution": "import re\r\ndef text_match_one(text):\r\n        patterns = 'ab+?'\r\n        if re.search(patterns,  text):\r\n                return 'Found a match!'\r\n        else:\r\n                return('Not matched!')\r\n"
    },
    {
        "number": 435,
        "prompt": "Write a python function to find the last digit of a given number.\ndef last_Digit(n) :\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    return n % 10\n\n# Test the function with an example\nprint(last_Digit(10)) # Output: 0\nprint(last_Digit(23)) # Output: 3\nprint(last_Digit(42)) # Output: 2\nprint(last_Digit(100)) # Output: 0\n\n# Test the function with an edge case\nprint(last_Digit(0)) # Output: 0\n\n# Test the function with a negative number\nprint(last_Digit(-10)) # Output: 0\nprint(last_Digit(-23)) # Output: 3\nprint(last_Digit(-42)) # Output: 2\nprint(last_Digit(-100)) # Output: 0 ",
        "generated_testcode": "assert last_Digit(1234) == 4\n",
        "test": "assert last_Digit(123) == 3\nassert last_Digit(25) == 5\nassert last_Digit(30) == 0",
        "canonical_solution": "def last_Digit(n) :\r\n    return (n % 10) "
    },
    {
        "number": 436,
        "prompt": "Write a python function to print negative numbers in a list.\ndef neg_nos(list1):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": true,
        "answer": "    neg_num = []\n    for num in list1:\n        if num < 0:\n            neg_num.append(num)\n    return neg_num\n\nlist1 = [10, -20, 0, -30, 40, -50, -60, 70, -80, -90]\nresult = neg_nos(list1)\nprint(\"Negative numbers in the list are: \", result)\n\n# Output: Negative numbers in the list are: [-20, -30, -50, -60, -80, -90] ",
        "generated_testcode": "assert neg_nos([1, -2, 3, -4, 5, -6, 7, -8]) == [-2, -4, -6, -8]\n",
        "test": "assert neg_nos([-1,4,5,-6]) == -1,-6\nassert neg_nos([-1,-2,3,4]) == -1,-2\nassert neg_nos([-7,-6,8,9]) == -7,-6",
        "canonical_solution": "def neg_nos(list1):\r\n  for num in list1: \r\n    if num < 0: \r\n       return num "
    },
    {
        "number": 437,
        "prompt": "Write a function to remove odd characters in a string.\ndef remove_odd(str1):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    result = \"\"\n    for i in str1:\n        if i.isdigit() or i.isalpha():\n            result += i\n    return result\n\n\n# Test the function with sample input\nprint(remove_odd(\"Hello123World456\"))  # Output: Helloworld ",
        "generated_testcode": "assert remove_odd(\"Hello World!\") == \"Helo Wrd\"\n",
        "test": "assert remove_odd(\"python\")==(\"yhn\")\nassert remove_odd(\"program\")==(\"rga\")\nassert remove_odd(\"language\")==(\"agae\")",
        "canonical_solution": "def remove_odd(str1):\r\n str2 = ''\r\n for i in range(1, len(str1) + 1):\r\n    if(i % 2 == 0):\r\n        str2 = str2 + str1[i - 1]\r\n return str2"
    },
    {
        "number": 438,
        "prompt": "Write a function to count bidirectional tuple pairs.\ndef count_bidirectional(test_list):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j] and test_list[i] == test_list[-j-1]:\n                count += 1\n    return count\n\n# Test the function\ntest_list = [1, 2, 2, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 8, 8, 9]\nprint(count_bidirectional(test_list)) # Output: 3\n\ntest_list = [1, 2, 3, 4, 4, 5, 6, 6, 7, 8, 8, 9, 9]\nprint(count_bidirectional(test_list)) # Output: 2\n\ntest_list = [1, 2, 3, 4, 5, 6, 7, 8, 9]\nprint(count_bidirectional(test_list)) # Output: 0 ",
        "generated_testcode": "assert count_bidirectional([(1, 2), (2, 1), (3, 4), (4, 3), (5, 6), (6, 5)]) == 2\n",
        "test": "assert count_bidirectional([(5, 6), (1, 2), (6, 5), (9, 1), (6, 5), (2, 1)] ) == '3'\nassert count_bidirectional([(5, 6), (1, 3), (6, 5), (9, 1), (6, 5), (2, 1)] ) == '2'\nassert count_bidirectional([(5, 6), (1, 2), (6, 5), (9, 2), (6, 5), (2, 1)] ) == '4'",
        "canonical_solution": "def count_bidirectional(test_list):\r\n  res = 0\r\n  for idx in range(0, len(test_list)):\r\n    for iidx in range(idx + 1, len(test_list)):\r\n      if test_list[iidx][0] == test_list[idx][1] and test_list[idx][1] == test_list[iidx][0]:\r\n        res += 1\r\n  return (str(res)) "
    },
    {
        "number": 439,
        "prompt": "Write a function to convert a list of multiple integers into a single integer.\ndef multiple_to_single(L):\n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    result = \"\"\n    for i in L:\n        result += str(i)\n    return int(result)\n\n# Test cases\nprint(multiple_to_single([1, 2, 3, 4])) # should return 1234\nprint(multiple_to_single([-1, 5, 9, 0])) # should return -159\nprint(multiple_to_single([12, 34, 56, 789])) # should return 123456789\nprint(multiple_to_single([0])) # should return 0\n\n# output:\n# 1234\n# -159\n# 123456789\n# 0 ",
        "generated_testcode": "assert multiple_to_single([1, 2, 3, 4, 5]) == 12345\n",
        "test": "assert multiple_to_single([11, 33, 50])==113350\nassert multiple_to_single([-1,2,3,4,5,6])==-123456\nassert multiple_to_single([10,15,20,25])==10152025",
        "canonical_solution": "def multiple_to_single(L):\r\n  x = int(\"\".join(map(str, L)))\r\n  return x"
    },
    {
        "number": 440,
        "prompt": "Write a function to find all adverbs and their positions in a given sentence.\ndef find_adverb_position(text):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    adverbs = []\n    words = text.split()\n    for i in range(len(words)):\n        if words[i].endswith(\"ly\") and words[i] not in [\"likely\", \"clearly\", \"probably\"]:\n            adverbs.append(words[i])\n            adverbs.append(i)\n    return adverbs\n\n\nprint(find_adverb_position(\"The boss is likely to give us a promotion\"))  # Output: ['likely', 3]\nprint(find_adverb_position(\"She left the office quickly\"))  # Output: ['quickly', 2]\nprint(find_adverb_position(\"The dog ran fast and jumped over the fence\"))  # Output: []\nprint(find_adverb_position(\"I was feeling happy and excited\"))  # Output: ['happy', 2]\nprint(find_adverb_position(\"The students are usually very attentive in class\"))  # Output: ['usually', 2]\nprint(find_adverb_position(\"She is well known for her quick wit\"))  # Output: ['quickly', 3]\nprint(find_adverb_position(\"The car turned quickly but the driver was not paying attention\"))  # Output: ['quickly', 2, 'quickly', 6]\nprint(find_adverb_position(\"The old man was moving slowly\"))  # Output: ['slowly', 4]\nprint(find_adverb_position(\"The children were playing quietly\"))  # Output:",
        "generated_testcode": "assert find_adverb_position(\"The dog is running quickly.\") == [(\"quickly\", 10)]\n",
        "test": "assert find_adverb_position(\"clearly!! we can see the sky\")==(0, 7, 'clearly')\nassert find_adverb_position(\"seriously!! there are many roses\")==(0, 9, 'seriously')\nassert find_adverb_position(\"unfortunately!! sita is going to home\")==(0, 13, 'unfortunately')",
        "canonical_solution": "import re\r\ndef find_adverb_position(text):\r\n for m in re.finditer(r\"\\w+ly\", text):\r\n    return (m.start(), m.end(), m.group(0))"
    },
    {
        "number": 441,
        "prompt": "Write a function to find the surface area of a cube.\ndef surfacearea_cube(l):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    return 6 * (l ** 2)\n\n# Test the function with an example value\nprint(surfacearea_cube(3)) # Output: 54 ",
        "generated_testcode": "assert surfacearea_cube(3) == 54\n",
        "test": "assert surfacearea_cube(5)==150\nassert surfacearea_cube(3)==54\nassert surfacearea_cube(10)==600",
        "canonical_solution": "def surfacearea_cube(l):\r\n  surfacearea= 6*l*l\r\n  return surfacearea"
    },
    {
        "number": 442,
        "prompt": "Write a function to find the ration of positive numbers in an array of integers.\ndef positive_count(nums):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    count = 0\n    for num in nums:\n        if num > 0:\n            count += 1\n    return count/len(nums)\n\nprint(positive_count([1,2,-3,4,5,-6]))  # Output: 0.4\nprint(positive_count([-1,-2,-3,-4,-5,-6])) # Output: 0.0\nprint(positive_count([1,2,3,4,5,6])) # Output: 1.0\nprint(positive_count([0,0,0,0,0,0])) # Output: 0.0\nprint(positive_count([1,2,3,4,5,-6,-7])) # Output: 0.66666666666666666666\n\n# The output is a floating number that represents the ratio of positive numbers to the total number of elements in the array. ",
        "generated_testcode": "assert positive_count([1, -2, 3, 4, -5, 6]) == 3/5\n",
        "test": "assert positive_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])==0.54\nassert positive_count([2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8])==0.69\nassert positive_count([2, 4, -6, -9, 11, -12, 14, -5, 17])==0.56",
        "canonical_solution": "from array import array\r\ndef positive_count(nums):\r\n    n = len(nums)\r\n    n1 = 0\r\n    for x in nums:\r\n        if x > 0:\r\n            n1 += 1\r\n        else:\r\n          None\r\n    return round(n1/n,2)"
    },
    {
        "number": 443,
        "prompt": "Write a python function to find the largest negative number from the given list.\ndef largest_neg(list1): \n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    largest = -1000000000\n    for i in list1: \n        if i < 0 and i > largest: \n            largest = i \n    return largest \n  \nlist1 = [-20, -5, -100, -70, -15, -30] \nprint(\"Largest negative number is:\", largest_neg(list1)) ",
        "generated_testcode": "assert largest_neg([-5, -3, -7, -1, -2, -8, -4]) == -1\n",
        "test": "assert largest_neg([1,2,3,-4,-6]) == -6\nassert largest_neg([1,2,3,-8,-9]) == -9\nassert largest_neg([1,2,3,4,-1]) == -1",
        "canonical_solution": "def largest_neg(list1): \r\n    max = list1[0] \r\n    for x in list1: \r\n        if x < max : \r\n             max = x  \r\n    return max"
    },
    {
        "number": 444,
        "prompt": "Write a function to trim each tuple by k in the given tuple list.\ndef trim_tuple(test_list, K):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    return tuple(x[K:] for x in test_list)\n\n\n# Example usage:\ntest_list = ((1, 2, 3, 4, 5, 6), (7, 8, 9, 10, 11, 12), (13, 14, 15, 16, 17, 18, 19), (20, 21, 22, 23, 24, 25, 26, 27))\nk = 2\nprint(trim_tuple(test_list, k))  # Output: ((3, 4, 5, 6), (9, 10, 11, 12), (15, 16, 17, 18, 19), (22, 23, 24, 25, 26, 27))\n\n\n# Example usage with another tuple and k\ntest_list = ((1, 2, 3), (4, 5, 6, 7, 8), (9, 10, 11, 12, 13, 14))\nk = 1\nprint(trim_tuple(test_list, k))  # Output: ((2, 3), (5, 6, 7, 8), (10, 11, 12, 13)) ",
        "generated_testcode": "assert trim_tuple(test_list=[(1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3) == (4, 5, 6, 7, 8, 9, 10)\n",
        "test": "assert trim_tuple([(5, 3, 2, 1, 4), (3, 4, 9, 2, 1),(9, 1, 2, 3, 5), (4, 8, 2, 1, 7)], 2) == '[(2,), (9,), (2,), (2,)]'\nassert trim_tuple([(5, 3, 2, 1, 4), (3, 4, 9, 2, 1), (9, 1, 2, 3, 5), (4, 8, 2, 1, 7)], 1) == '[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]'\nassert trim_tuple([(7, 8, 4, 9), (11, 8, 12, 4),(4, 1, 7, 8), (3, 6, 9, 7)], 1) == '[(8, 4), (8, 12), (1, 7), (6, 9)]'",
        "canonical_solution": "def trim_tuple(test_list, K):\r\n  res = []\r\n  for ele in test_list:\r\n    N = len(ele)\r\n    res.append(tuple(list(ele)[K: N - K]))\r\n  return (str(res)) "
    },
    {
        "number": 445,
        "prompt": "Write a function to perform index wise multiplication of tuple elements in the given two tuples.\ndef index_multiplication(test_tup1, test_tup2):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] * test_tup2[i])\n    return tuple(result)\n\n\n# Test the function with the sample input\ntest_tup1 = (2, 3, 4, 5, 6)\ntest_tup2 = (5, 6, 7, 8)\nprint(index_multiplication(test_tup1, test_tup2)) # (10, 18, 28, 48)\n\n# Test the function with another input\ntest_tup3 = (1, 2, 3, 4, 5)\ntest_tup4 = (10, 20, 30, 40, 50)\nprint(index_multiplication(test_tup3, test_tup4)) # (10, 40, 90, 200) ",
        "generated_testcode": "assert index_multiplication((1, 2, 3), (4, 5, 6)) == (4, 10, 18)\n",
        "test": "assert index_multiplication(((1, 3), (4, 5), (2, 9), (1, 10)),((6, 7), (3, 9), (1, 1), (7, 3)) ) == ((6, 21), (12, 45), (2, 9), (7, 30))\nassert index_multiplication(((2, 4), (5, 6), (3, 10), (2, 11)),((7, 8), (4, 10), (2, 2), (8, 4)) ) == ((14, 32), (20, 60), (6, 20), (16, 44))\nassert index_multiplication(((3, 5), (6, 7), (4, 11), (3, 12)),((8, 9), (5, 11), (3, 3), (9, 5)) ) == ((24, 45), (30, 77), (12, 33), (27, 60))",
        "canonical_solution": "def index_multiplication(test_tup1, test_tup2):\r\n  res = tuple(tuple(a * b for a, b in zip(tup1, tup2))\r\n   for tup1, tup2 in zip(test_tup1, test_tup2))\r\n  return (res) "
    },
    {
        "number": 446,
        "prompt": "Write a python function to count the occurence of all elements of list in a tuple.\ndef count_Occurrence(tup, lst): \n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    count_dict = {} \n    for i in tup: \n        count_dict[i] = lst.count(i) \n    return count_dict\n  \n# Example usage: \ntup = (1, 2, 3, 4, 5, 4, 6, 3, 2, 7, 8, 1, 3, 9) \nlst = [1, 2, 3, 4, 5, 6, 7, 8, 9] \nprint(count_Occurrence(tup, lst)) ",
        "generated_testcode": "assert count_Occurrence(('a', 'b', 'c', 'd', 'a', 'b', 'c', 'd', 'a', 'b', 'c', 'd', 'a', 'b', 'c', 'd'), ['a', 'b', 'c', 'd']) == (4, 3, 3, 3)\n",
        "test": "assert count_Occurrence(('a', 'a', 'c', 'b', 'd'),['a', 'b'] ) == 3\nassert count_Occurrence((1, 2, 3, 1, 4, 6, 7, 1, 4),[1, 4, 7]) == 6\nassert count_Occurrence((1,2,3,4,5,6),[1,2]) == 2",
        "canonical_solution": "from collections import Counter \r\ndef count_Occurrence(tup, lst): \r\n    count = 0\r\n    for item in tup: \r\n        if item in lst: \r\n            count+= 1 \r\n    return count  "
    },
    {
        "number": 447,
        "prompt": "Write a function to find cubes of individual elements in a list using lambda function.\ndef cube_nums(nums):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    return list(map(lambda x: x**3, nums))\n\n\n#Test the function with a sample list\nnums = [1,2,3,4,5]\nprint(cube_nums(nums)) # Output: [1, 8, 27, 64]\n\n\n# Define a function to calculate the sum of cubes of numbers in a list using lambda function.\ndef sum_cubes(nums):\n    return sum(map(lambda x: x**3, nums))\n\n#Test the function with a sample list\nprint(sum_cubes(nums)) # Output: 100\n\n\n# Define a function to find the square root of each element in a list using lambda function.\ndef sqrt_nums(nums):\n    return list(map(lambda x: x**0.5, nums))\n\n#Test the function with a sample list\nprint(sqrt_nums(nums)) # Output: [1.0, 1.414213562373095045, 1.73205080756887722, 2.0]\n\n# Define a function to find the average of a list using lambda function.\ndef average(nums):\n    return sum(nums)/len(nums)\n\n#Test the function with a sample list\nprint(average(nums)) # Output: 3.0\n\n# Define a function to",
        "generated_testcode": "assert cube_nums([1, 2, 3, 4, 5]) == [1, 8, 27, 64]\n",
        "test": "assert cube_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]\nassert cube_nums([10,20,30])==([1000, 8000, 27000])\nassert cube_nums([12,15])==([1728, 3375])",
        "canonical_solution": "def cube_nums(nums):\r\n cube_nums = list(map(lambda x: x ** 3, nums))\r\n return cube_nums"
    },
    {
        "number": 448,
        "prompt": "Write a function to calculate the sum of perrin numbers.\ndef cal_sum(n): \n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    sum = 0\n    while n > 0: \n        sum += n % 10\n        n //= 10\n    return sum \n\n# Function to check if a number is perrin or not\ndef is_perrin(n): \n    original_num = n \n    temp = n \n    while n > 0: \n        sum = cal_sum(n) \n        n = n // 10\n        if n == 0: \n            break\n        n = cal_sum(n) \n    if original_num == sum: \n        return True\n    else: \n        return False\n\n# Function to find the nth perrin number\ndef find_perrin(n): \n    count = 0\n    i = 1\n    while count < n: \n        if is_perrin(i): \n            count += 1\n        i += 1\n    return i - 1\n\n# Driver code\nif __name__ == \"__main__\": \n    n = 5\n    print(find_perrin(n)) ",
        "generated_testcode": "assert cal_sum(1) == 1\n",
        "test": "assert cal_sum(9) == 49\nassert cal_sum(10) == 66\nassert cal_sum(11) == 88",
        "canonical_solution": "def cal_sum(n): \r\n\ta = 3\r\n\tb = 0\r\n\tc = 2\r\n\tif (n == 0): \r\n\t\treturn 3\r\n\tif (n == 1): \r\n\t\treturn 3\r\n\tif (n == 2): \r\n\t\treturn 5\r\n\tsum = 5\r\n\twhile (n > 2): \r\n\t\td = a + b \r\n\t\tsum = sum + d \r\n\t\ta = b \r\n\t\tb = c \r\n\t\tc = d \r\n\t\tn = n-1\r\n\treturn sum"
    },
    {
        "number": 449,
        "prompt": "Write a python function to check whether the triangle is valid or not if 3 points are given.\ndef check_Triangle(x1,y1,x2,y2,x3,y3): \n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    if ((x1**2 + y1**2)**0.5) + ((x2**2 + y2**2)**0.5) > (x3**2 + y3**2)**0.5 and (x1**2 + y1**2)**0.5 + (x2**2 + y2**2)**0.5 > (x3**2 + y3**2)**0.5 and (x2**2 + y2**2)**0.5 + (x3**2 + y3**2)**0.5 > (x1**2 + y1**2)**0.5:\n        return True\n    else:\n        return False\nx1 = int(input(\"Enter the value of x1: \"))\ny1 = int(input(\"Enter the value of y1: \"))\nx2 = int(input(\"Enter the value of x2: \"))\ny2 = int(input(\"Enter the value of y2: \"))\nx3 = int(input(\"Enter the value of x3: \"))\ny3 = int(input(\"Enter the value of y3: \"))\nif check_Triangle(x1,y1,x2,y2,x3,y3):\n    print(\"It is a valid triangle.\")\nelse:\n    print(\"It is not a valid triangle.\") ",
        "generated_testcode": "assert check_Triangle(0,0,0,0,3,3) == True\n",
        "test": "assert check_Triangle(1,5,2,5,4,6) == 'Yes'\nassert check_Triangle(1,1,1,4,1,5) == 'No'\nassert check_Triangle(1,1,1,1,1,1) == 'No'",
        "canonical_solution": "def check_Triangle(x1,y1,x2,y2,x3,y3): \r\n    a = (x1*(y2-y3)+x2*(y3-y1)+x3*(y1-y2))   \r\n    if a == 0: \r\n        return ('No') \r\n    else: \r\n        return ('Yes') "
    },
    {
        "number": 450,
        "prompt": "Write a function to extract specified size of strings from a give list of string values.\ndef extract_string(str, l):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    result = []\n    for i in range(0, len(str), l):\n        result.append(str[i:i+l])\n    return result\n\n#Testing the function\nprint(extract_string(\"HelloWorld\", 3))\nprint(extract_string(\"Python\", 2))\nprint(extract_string(\"Java\", 4))\nprint(extract_string(\"JavaScript\", 6))\n\n\n# Output:\n# ['Hel', 'loW', 'orl', 'd']\n# ['Py', 'th', 'on']\n# ['Java', 'Script']\n# ['Javas', 'cript']\n\n\n# The function takes in two arguments, a string and the length of the substrings you want to extract from it. It then iterates through the string in steps of the given length, appending each substring to the result list. ",
        "generated_testcode": "assert extract_string(['hello', 'world', 'python', 'programming'], 3) == ['hel', 'wor', 'pro']\n",
        "test": "assert extract_string(['Python', 'list', 'exercises', 'practice', 'solution'] ,8)==['practice', 'solution']\nassert extract_string(['Python', 'list', 'exercises', 'practice', 'solution'] ,6)==['Python']\nassert extract_string(['Python', 'list', 'exercises', 'practice', 'solution'] ,9)==['exercises']",
        "canonical_solution": "def extract_string(str, l):\r\n    result = [e for e in str if len(e) == l] \r\n    return result"
    },
    {
        "number": 451,
        "prompt": "Write a function to remove all whitespaces from the given string using regex.\ndef remove_whitespaces(text1):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    return re.sub(r\"\\s+\", \"\", text1)\n\n# Example usage:\ntext1 = \"Python is a great programming language.\"\nnew_text1 = remove_whitespaces(text1)\nprint(new_text1)  # Output: \"Pythonisagreatprogramminglanguage.\" ",
        "generated_testcode": "assert remove_whitespaces(\"Hello World\") == \"HelloWorld\"\n",
        "test": "assert remove_whitespaces(' Google    Flutter ') == 'GoogleFlutter'\nassert remove_whitespaces(' Google    Dart ') == 'GoogleDart'\nassert remove_whitespaces(' iOS    Swift ') == 'iOSSwift'",
        "canonical_solution": "import re\r\ndef remove_whitespaces(text1):\r\n  return (re.sub(r'\\s+', '',text1))"
    },
    {
        "number": 452,
        "prompt": "Write a function that gives loss amount if the given amount has loss else return none.\ndef loss_amount(actual_cost,sale_amount): \n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    if actual_cost > sale_amount:\n        return actual_cost - sale_amount\n    else:\n        return None\n\nprint(loss_amount(1000,50))   # Output: 50\nprint(loss_amount(50,100))   # Output: None\n\n# Writing a function to find the largest number in the list\ndef largest_num(numbers):\n    max_num = numbers[0]\n    for i in numbers:\n        if i > max_num:\n            max_num = i\n    return max_num\n\nprint(largest_num([10,20,30,40,50,60,70]))   # Output: 70\nprint(largest_num([100,200,300,400,500]))   # Output: 500\n\n# Write a function to find the smallest number in the list\ndef smallest_num(numbers):\n    min_num = numbers[0]\n    for i in numbers:\n        if i < min_num:\n            min_num = i\n    return min_num\n\nprint(smallest_num([10,20,30,40,50,60,70]))   # Output: 10\nprint(smallest_num([100,200,300,400,500]))   # Output: 100\n\n# Write a function to count the number of v",
        "generated_testcode": "assert loss_amount(10000, 800) == 200\n",
        "test": "assert loss_amount(1500,1200)==None\nassert loss_amount(100,200)==100\nassert loss_amount(2000,5000)==3000",
        "canonical_solution": "def loss_amount(actual_cost,sale_amount): \r\n  if(sale_amount > actual_cost):\r\n    amount = sale_amount - actual_cost\r\n    return amount\r\n  else:\r\n    return None"
    },
    {
        "number": 453,
        "prompt": "Write a python function to find the sum of even factors of a number.\ndef sumofFactors(n) : \n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    sum = 0\n    for i in range(1,n+1) : \n        if n % i == 0 : \n            sum += i \n    return sum \n  \n# take input from user \nn = int(input(\"Enter a number: \")) \n  \n# find sum of factors of number \nsum = sumofFactors(n) \n  \n# check if sum of factors is even \nif sum % 2 == 0 : \n    print(\"Sum of even factors of\", n, \"is\", sum) \nelse : \n    print(n, \"has no even factors\") ",
        "generated_testcode": "assert sumofFactors(12) == 16\n",
        "test": "assert sumofFactors(18) == 26\nassert sumofFactors(30) == 48\nassert sumofFactors(6) == 8",
        "canonical_solution": "import math \r\ndef sumofFactors(n) : \r\n    if (n % 2 != 0) : \r\n        return 0\r\n    res = 1\r\n    for i in range(2, (int)(math.sqrt(n)) + 1) :    \r\n        count = 0\r\n        curr_sum = 1\r\n        curr_term = 1\r\n        while (n % i == 0) : \r\n            count= count + 1\r\n            n = n // i \r\n            if (i == 2 and count == 1) : \r\n                curr_sum = 0\r\n            curr_term = curr_term * i \r\n            curr_sum = curr_sum + curr_term \r\n        res = res * curr_sum  \r\n    if (n >= 2) : \r\n        res = res * (1 + n) \r\n    return res "
    },
    {
        "number": 454,
        "prompt": "Write a function that matches a word containing 'z'.\ndef text_match_wordz(text):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    pattern = re.compile(r'\\w*z\\w*')\n    return bool(pattern.search(text))\n\n# Test cases\nprint(text_match_wordz(\"The quick brown fox jumps over the lazy dog.\")) # True\nprint(text_match_wordz(\"Python is awesome\")) # True\nprint(text_match_wordz(\"Hello world\")) # False\nprint(text_match_wordz(\"She sells seashells by the seashore.\")) # True\nprint(text_match_wordz(\"Does this function work?\")) # True\nprint(text_match_wordz(\"I love zebras, they are so awesome!\")) # True\nprint(text_match_wordz(\"No 'z' here.\") # False\n\n# Explanation:\n\n# The pattern '\\w*z\\w*' matches any word that contains the letter 'z' by searching for zero or more word characters (\\w*) before and after it. The search() method returns a match object if there is a match, which we convert to a boolean using bool(). ",
        "generated_testcode": "assert text_match_wordz(\"The quick brown fox jumps over the lazy dog\") == True\n",
        "test": "assert text_match_wordz(\"pythonz.\")==('Found a match!')\nassert text_match_wordz(\"xyz.\")==('Found a match!')\nassert text_match_wordz(\"  lang  .\")==('Not matched!')",
        "canonical_solution": "import re\r\ndef text_match_wordz(text):\r\n        patterns = '\\w*z.\\w*'\r\n        if re.search(patterns,  text):\r\n                return 'Found a match!'\r\n        else:\r\n                return('Not matched!')"
    },
    {
        "number": 455,
        "prompt": "Write a function to check whether the given month number contains 31 days or not.\ndef check_monthnumb_number(monthnum2):\n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    if monthnum2 in [4, 6, 9, 11]:\n        return True\n    elif monthnum2 == 2:\n        return False\n    else:\n        return True\n\n# testing the function\nprint(check_monthnumb_number(2)) # False\nprint(check_monthnumb_number(9)) # True\nprint(check_monthnumb_number(5)) # True\n\n# Write a function to get the number of days in the given month\ndef get_days(monthnum):\n    if monthnum == 2:\n        return 28\n    elif monthnum in [4, 6, 9, 11]:\n        return 30\n    else:\n        return 31\n\n# testing the function\nprint(get_days(2)) # 28\nprint(get_days(5)) # 31\nprint(get_days(9)) # 30\n\n# write a function to get the name of the month\ndef get_month_name(monthnum):\n    month_names = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"]\n    return month_names[monthnum-1]\n\n# testing the function\nprint(get_month_name(4)) # April\nprint(get_month_name(7)) # July\nprint(get_month_name(12))",
        "generated_testcode": "assert check_monthnumb_number(1) == True\n",
        "test": "assert check_monthnumb_number(5)==True\nassert check_monthnumb_number(2)==False\nassert check_monthnumb_number(6)==False",
        "canonical_solution": "def check_monthnumb_number(monthnum2):\r\n  if(monthnum2==1 or monthnum2==3 or monthnum2==5 or monthnum2==7 or monthnum2==8 or monthnum2==10 or monthnum2==12):\r\n    return True\r\n  else:\r\n    return False"
    },
    {
        "number": 456,
        "prompt": "Write a function to reverse strings in a given list of string values.\ndef reverse_string_list(stringlist):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    new_list = []\n    for string in stringlist:\n        new_list.append(string[::-1])\n    return new_list\n\n# Example usage:\nstring_list = ['hello', 'world', 'python', 'programming']\nprint(reverse_string_list(string_list))  # Output: ['olleh', 'dlrow', 'noitcnagro', 'gnimmargorp']\n\n# Example usage 2:\nstring_list = ['cat', 'dog', 'tiger', 'elephant']\nprint(reverse_string_list(string_list))  # Output: ['tac', 'god', 'guerpi', 'htnafelppine'] ",
        "generated_testcode": "assert reverse_string_list(['hello', 'world', 'python']) == ['olleh', 'dlrow', 'nohtyp']\n",
        "test": "assert reverse_string_list(['Red', 'Green', 'Blue', 'White', 'Black'])==['deR', 'neerG', 'eulB', 'etihW', 'kcalB']\nassert reverse_string_list(['john','amal','joel','george'])==['nhoj','lama','leoj','egroeg']\nassert reverse_string_list(['jack','john','mary'])==['kcaj','nhoj','yram']",
        "canonical_solution": "def reverse_string_list(stringlist):\r\n    result = [x[::-1] for x in stringlist]\r\n    return result"
    },
    {
        "number": 457,
        "prompt": "Write a python function to find the sublist having minimum length.\ndef Find_Min(lst): \n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    if len(lst) == 0: \n        return 0\n    min_length = len(lst[0]) \n    for i in range(len(lst)): \n        if len(lst[i]) < min_length: \n            min_length = len(lst[i]) \n    return min_length \n  \ndef Find_Max(lst): \n    if len(lst) == 0: \n        return 0\n    max_length = len(lst[0]) \n    for i in range(len(lst)): \n        if len(lst[i]) > max_length: \n            max_length = len(lst[i]) \n    return max_length \n  \ndef Find_Min_Sublist(lst): \n    min_length = Find_Min(lst) \n    min_sublist = [] \n    for i in range(len(lst)): \n        if len(lst[i]) == min_length: \n            min_sublist.append(lst[i]) \n    return min_sublist \n  \nlst = [[\"apple\", \"banana\", \"orange\", \"kiwi\", \"grapes\"] \nprint(\"Sublist of minimum length:\", Find_Min_Sublist(lst)) \n  \nlst = [[\"hello\", \"world\", \"python\", \"programming\"] \nprint(\"Sublist of minimum length:\", Find_Min_Sublist(lst)) \n  \nlst = [\"a\", \"ab\", \"abc\", \"",
        "generated_testcode": "assert Find_Min([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 1\n",
        "test": "assert Find_Min([[1],[1,2],[1,2,3]]) == [1]\nassert Find_Min([[1,1],[1,1,1],[1,2,7,8]]) == [1,1]\nassert Find_Min([['x'],['x','y'],['x','y','z']]) == ['x']",
        "canonical_solution": "def Find_Min(lst): \r\n    minList = min((x) for x in lst) \r\n    return minList"
    },
    {
        "number": 458,
        "prompt": "Write a function to find the area of a rectangle.\ndef rectangle_area(l,b):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    return l*b\n\n#Test the function with the given length and breadth\nprint(rectangle_area(10,20))  #Output: 200\n\n#Function to find the perimeter of a rectangle.\ndef rectangle_perimeter(l,b):\n    return 2*(l+b)\n\n#Test the function with the given length and breadth\nprint(rectangle_perimeter(10,20)) #Output: 60\n\n#Function to find the area of a triangle using Heron's formula\ndef triangle_area(a,b,c):\n    s=(a+b+c)/2\n    area=np.sqrt(s*(s-a)*(s-b)*(s-c))\n    return area\n\n#Test the function with given sides of the triangle\nprint(triangle_area(3,4,5)) #Output: 6.0\n\n#Function to find the area of a circle using the radius\ndef circle_area(r):\n    pi=np.pi\n    return pi*r**2\n\n#Test the function with a given radius\nprint(circle_area(5)) #Output: 78.5398163339744834\n\n#Function to find the area of a square\ndef square_area(s):\n    return s**2\n\n#Test the function with a given side\nprint(square_area(4)) #Output: 16\n\n#Function to find the volume of a rectangular pr",
        "generated_testcode": "assert rectangle_area(5, 10) == 50\n",
        "test": "assert rectangle_area(10,20)==200\nassert rectangle_area(10,5)==50\nassert rectangle_area(4,2)==8",
        "canonical_solution": "def rectangle_area(l,b):\r\n  area=l*b\r\n  return area"
    },
    {
        "number": 459,
        "prompt": "Write a function to remove uppercase substrings from a given string by using regex.\ndef remove_uppercase(str1):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    return re.sub(r'\\b[A-Z]+\\b', '', str1)\n\nprint(remove_uppercase(\"HelloWorld\")) # Output: \"HelloWorld\"\nprint(remove_uppercase(\"TheQuickBrownFox\")) # Output: \"TheQuickBrownFox\"\nprint(remove_uppercase(\"ThisIsAStringExample\")) # Output: \"ThisIsAStringExample\"\nprint(remove_uppercase(\"HELLOthereMYnameISjohn\")) # Output: \"HELLOthereMYnameISjohn\"\nprint(remove_uppercase(\"123456789\")) # Output: \"123456789\" \n\n# regex pattern explanation: \n# r' indicates a raw string\n# \\b indicates a word boundary\n# [A-Z] matches any uppercase letter from A to Z\n# + indicates one or more occurrences of the preceding character\n# \\b indicates a word boundary\n# \\b indicates a word boundary\n# so the pattern matches one or more uppercase letters surrounded by word boundaries ",
        "generated_testcode": "assert remove_uppercase(\"HelloWorld\") == \"HW\"\n",
        "test": "assert remove_uppercase('cAstyoUrFavoRitETVshoWs') == 'cstyoravoitshos'\nassert remove_uppercase('wAtchTheinTernEtrAdIo') == 'wtchheinerntrdo'\nassert remove_uppercase('VoicESeaRchAndreComMendaTionS') == 'oiceachndreomendaion'",
        "canonical_solution": "import re\r\ndef remove_uppercase(str1):\r\n  remove_upper = lambda text: re.sub('[A-Z]', '', text)\r\n  result =  remove_upper(str1)\r\n  return (result)"
    },
    {
        "number": 460,
        "prompt": "Write a python function to get the first element of each sublist.\ndef Extract(lst): \n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    return [sublist[0] for sublist in lst]\n  \n# example usage \nlst = [[1,2,3],[4,5,6],[7,8,9]]\nprint(Extract(lst) ) # Output: [1,4,7] ",
        "generated_testcode": "assert Extract([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [1, 4, 7]\n",
        "test": "assert Extract([[1, 2], [3, 4, 5], [6, 7, 8, 9]]) == [1, 3, 6]\nassert Extract([[1,2,3],[4, 5]]) == [1,4]\nassert Extract([[9,8,1],[1,2]]) == [9,1]",
        "canonical_solution": "def Extract(lst): \r\n    return [item[0] for item in lst] "
    },
    {
        "number": 461,
        "prompt": "Write a python function to count the upper case characters in a given string.\ndef upper_ctr(str):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    count = 0\n    for i in str:\n        if i.isupper():\n            count += 1\n    return count\n\n#Test the function with an example\nprint(upper_ctr(\"Python Programming\"))  # Output: 3\nprint(upper_ctr(\"Hello World\"))      # Output: 1\nprint(upper_ctr(\"alphabet\"))        # Output: 0 ",
        "generated_testcode": "assert upper_ctr(\"Hello World\") == 2\n",
        "test": "assert upper_ctr('PYthon') == 1\nassert upper_ctr('BigData') == 1\nassert upper_ctr('program') == 0",
        "canonical_solution": "def upper_ctr(str):\r\n    upper_ctr = 0\r\n    for i in range(len(str)):\r\n          if str[i] >= 'A' and str[i] <= 'Z': upper_ctr += 1\r\n          return upper_ctr"
    },
    {
        "number": 462,
        "prompt": "Write a function to find all possible combinations of the elements of a given list.\ndef combinations_list(list1):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    if len(list1) == 0:\n        return [[]]\n    elif len(list1) == 1:\n        return [list1]\n    else:\n        result = []\n        for i in range(len(list1)):\n            remaining_list = list1[:i] + list1[i+1:]\n            for comb in combinations_list(remaining_list):\n                result.append([list1[i]] + comb)\n        return result\n\n\nprint(combinations_list([1,2,3,4]))\n\n# Output: [[1, 2, 3, 4], [1, 2, 4], [1, 3, 4], [2, 3, 4], [1, 2], [1, 3], [1, 4], [2, 3], [2, 4], [3, 4], [1], [2], [3], [4]]\n",
        "generated_testcode": "assert combinations_list([1, 2, 3]) == [[1], [2], [3], [1, 2], [1, 3], [2, 3], [1, 2, 3]]\n",
        "test": "assert combinations_list(['orange', 'red', 'green', 'blue'])==[[], ['orange'], ['red'], ['red', 'orange'], ['green'], ['green', 'orange'], ['green', 'red'], ['green', 'red', 'orange'], ['blue'], ['blue', 'orange'], ['blue', 'red'], ['blue', 'red', 'orange'], ['blue', 'green'], ['blue', 'green', 'orange'], ['blue', 'green', 'red'], ['blue', 'green', 'red', 'orange']]\nassert combinations_list(['red', 'green', 'blue', 'white', 'black', 'orange'])==[[], ['red'], ['green'], ['green', 'red'], ['blue'], ['blue', 'red'], ['blue', 'green'], ['blue', 'green', 'red'], ['white'], ['white', 'red'], ['white', 'green'], ['white', 'green', 'red'], ['white', 'blue'], ['white', 'blue', 'red'], ['white', 'blue', 'green'], ['white', 'blue', 'green', 'red'], ['black'], ['black', 'red'], ['black', 'green'], ['black', 'green', 'red'], ['black', 'blue'], ['black', 'blue', 'red'], ['black', 'blue', 'green'], ['black', 'blue', 'green', 'red'], ['black', 'white'], ['black', 'white', 'red'], ['black', 'white', 'green'], ['black', 'white', 'green', 'red'], ['black', 'white', 'blue'], ['black', 'white', 'blue', 'red'], ['black', 'white', 'blue', 'green'], ['black', 'white', 'blue', 'green', 'red'], ['orange'], ['orange', 'red'], ['orange', 'green'], ['orange', 'green', 'red'], ['orange', 'blue'], ['orange', 'blue', 'red'], ['orange', 'blue', 'green'], ['orange', 'blue', 'green', 'red'], ['orange', 'white'], ['orange', 'white', 'red'], ['orange', 'white', 'green'], ['orange', 'white', 'green', 'red'], ['orange', 'white', 'blue'], ['orange', 'white', 'blue', 'red'], ['orange', 'white', 'blue', 'green'], ['orange', 'white', 'blue', 'green', 'red'], ['orange', 'black'], ['orange', 'black', 'red'], ['orange', 'black', 'green'], ['orange', 'black', 'green', 'red'], ['orange', 'black', 'blue'], ['orange', 'black', 'blue', 'red'], ['orange', 'black', 'blue', 'green'], ['orange', 'black', 'blue', 'green', 'red'], ['orange', 'black', 'white'], ['orange', 'black', 'white', 'red'], ['orange', 'black', 'white', 'green'], ['orange', 'black', 'white', 'green', 'red'], ['orange', 'black', 'white', 'blue'], ['orange', 'black', 'white', 'blue', 'red'], ['orange', 'black', 'white', 'blue', 'green'], ['orange', 'black', 'white', 'blue', 'green', 'red']]\nassert combinations_list(['red', 'green', 'black', 'orange'])==[[], ['red'], ['green'], ['green', 'red'], ['black'], ['black', 'red'], ['black', 'green'], ['black', 'green', 'red'], ['orange'], ['orange', 'red'], ['orange', 'green'], ['orange', 'green', 'red'], ['orange', 'black'], ['orange', 'black', 'red'], ['orange', 'black', 'green'], ['orange', 'black', 'green', 'red']]",
        "canonical_solution": "def combinations_list(list1):\r\n    if len(list1) == 0:\r\n        return [[]]\r\n    result = []\r\n    for el in combinations_list(list1[1:]):\r\n        result += [el, el+[list1[0]]]\r\n    return result"
    },
    {
        "number": 463,
        "prompt": "Write a function to find the maximum product subarray of the given array.\ndef max_subarray_product(arr):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    if len(arr) == 0:\n        return 0\n    if len(arr) == 1:\n        return arr[0]\n    if len(arr) == 2:\n        return max(arr[0], arr[1])\n\n    max_product = max(arr[0], arr[1])\n    min_product = min(arr[0], arr[1])\n    max_so_far = max(arr[0], arr[1])\n\n    for i in range(2, len(arr)):\n        temp_max = max_product\n        max_product = max(arr[i], max_product * arr[i], min_product * arr[i])\n        min_product = min(arr[i], min_product * arr[i], temp_max)\n        max_so_far = max(max_so_far, max_product)\n\n    return max_so_far\n\n# Test the function with the given example\narr = [2, 3, -2, 4, -5, 1, -5, 8]\nprint(max_subarray_product(arr))  # Output: 24\n\n# Test the function with the example where there are only negative numbers\narr = [-2, -3, -4, -5, -1, -5, -8]\nprint(max_subarray_product(arr))  # Output: 40\n\n# Test the function with the example where all numbers are negative\narr = [-2, -3, -",
        "generated_testcode": "assert max_subarray_product([-1, -2, 3, -4, 5, 2, -10, 7]) == 168\n",
        "test": "assert max_subarray_product([1, -2, -3, 0, 7, -8, -2]) == 112\nassert max_subarray_product([6, -3, -10, 0, 2]) == 180 \nassert max_subarray_product([-2, -40, 0, -2, -3]) == 80",
        "canonical_solution": "def max_subarray_product(arr):\r\n\tn = len(arr)\r\n\tmax_ending_here = 1\r\n\tmin_ending_here = 1\r\n\tmax_so_far = 0\r\n\tflag = 0\r\n\tfor i in range(0, n):\r\n\t\tif arr[i] > 0:\r\n\t\t\tmax_ending_here = max_ending_here * arr[i]\r\n\t\t\tmin_ending_here = min (min_ending_here * arr[i], 1)\r\n\t\t\tflag = 1\r\n\t\telif arr[i] == 0:\r\n\t\t\tmax_ending_here = 1\r\n\t\t\tmin_ending_here = 1\r\n\t\telse:\r\n\t\t\ttemp = max_ending_here\r\n\t\t\tmax_ending_here = max (min_ending_here * arr[i], 1)\r\n\t\t\tmin_ending_here = temp * arr[i]\r\n\t\tif (max_so_far < max_ending_here):\r\n\t\t\tmax_so_far = max_ending_here\r\n\tif flag == 0 and max_so_far == 0:\r\n\t\treturn 0\r\n\treturn max_so_far"
    },
    {
        "number": 464,
        "prompt": "Write a function to check if all values are same in a dictionary.\ndef check_value(dict, n):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": true,
        "answer": "    value = list(dict.values())[0]\n    for v in dict.values():\n        if v != value:\n            return False\n    return True\n\n# Test cases\nprint(check_value({\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1}, 4))  # True\nprint(check_value({\"a\": 1, \"b\": 2, \"c\": 1, \"d\": 1}, 4))  # False\nprint(check_value({\"a\": 1, \"b\": 2, \"c\": 2, \"d\": 2}, 4))  # True\nprint(check_value({\"a\": 1, \"b\": 2, \"c\": 2, \"d\": 3}, 4))  # False\nprint(check_value({\"a\": 1, \"b\": 2, \"c\": 3, \"d\": 3}, 4))  # False ",
        "generated_testcode": "assert check_value({'a': 1, 'b': 1, 'c': 1}, 1) == True\n",
        "test": "assert check_value({'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12},10)==False\nassert check_value({'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12},12)==True\nassert check_value({'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12},5)==False",
        "canonical_solution": "def check_value(dict, n):\r\n    result = all(x == n for x in dict.values()) \r\n    return result"
    },
    {
        "number": 465,
        "prompt": "Write a function to drop empty items from a given dictionary.\ndef drop_empty(dict1):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    new_dict = {k: v for k, v in dict1.items() if v != \"\"}\n    return new_dict\n\n# Testing the function with sample input\nmy_dict = {'a': 'apple', 'b': '', 'c': 'cat', 'd': '', 'e': 'dog', 'f': ''}\nprint(drop_empty(my_dict))\n\n# Output: {'a': 'apple', 'c': 'cat', 'e': 'dog'}\n\n# Explanation: The function iterates over the dictionary items and checks if the value is an empty string, if it is then it ignores that key-value pair.\n# If the value is not an empty string, it is added to a new dictionary which is returned as the output.\n",
        "generated_testcode": "assert drop_empty({'a': 1, 'b': 2, 'c': None, 'd': 3, 'e': None}) == {'a': 1, 'd': 3}\n",
        "test": "assert drop_empty({'c1': 'Red', 'c2': 'Green', 'c3':None})=={'c1': 'Red', 'c2': 'Green'}\nassert drop_empty({'c1': 'Red', 'c2': None, 'c3':None})=={'c1': 'Red'}\nassert drop_empty({'c1': None, 'c2': 'Green', 'c3':None})=={ 'c2': 'Green'}",
        "canonical_solution": "def drop_empty(dict1):\r\n  dict1 = {key:value for (key, value) in dict1.items() if value is not None}\r\n  return dict1"
    },
    {
        "number": 466,
        "prompt": "Write a function to find the peak element in the given array.\ndef find_peak_util(arr, low, high, n): \n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    # Base Case \n    if high == low: \n        return low \n    if high == 1: \n        return 0\n    mid = (low + high) // 2\n    if (mid == 0 or arr[mid - 1] <= arr[mid]) and (mid == n - 1 or arr[mid + 1] <= arr[mid]): \n        return mid \n    if mid > 0 and arr[mid - 1] > arr[mid]: \n        return find_peak_util(arr, low, mid - 1, n) \n    return find_peak_util(arr, mid + 1, high, n) \n\ndef find_peak(arr, n): \n    return find_peak_util(arr, 0, n, n) \n\n# Test the function with the example \narr = [1, 3, 20, 4, 5, 19, 25, 6, 21, 7] \nn = len(arr) \nprint(\"Index of the peak element is\", find_peak(arr, n)) \n\n# Output: \n# Index of the peak element is 2\n\n# Time Complexity : O(log n) ",
        "generated_testcode": "assert find_peak_util([1, 2, 3, 4, 5, 6, 7, 8, 9], 0, 6, 7) == 6\n",
        "test": "assert find_peak([1, 3, 20, 4, 1, 0], 6) == 2\nassert find_peak([2, 3, 4, 5, 6], 5) == 4\nassert find_peak([8, 9, 11, 12, 14, 15], 6) == 5 ",
        "canonical_solution": "def find_peak_util(arr, low, high, n): \r\n\tmid = low + (high - low)/2\r\n\tmid = int(mid) \r\n\tif ((mid == 0 or arr[mid - 1] <= arr[mid]) and\r\n\t\t(mid == n - 1 or arr[mid + 1] <= arr[mid])): \r\n\t\treturn mid \r\n\telif (mid > 0 and arr[mid - 1] > arr[mid]): \r\n\t\treturn find_peak_util(arr, low, (mid - 1), n) \r\n\telse: \r\n\t\treturn find_peak_util(arr, (mid + 1), high, n) \r\ndef find_peak(arr, n): \r\n\treturn find_peak_util(arr, 0, n - 1, n) "
    },
    {
        "number": 467,
        "prompt": "Write a python function to convert decimal number to octal number.\ndef decimal_to_Octal(deciNum):\n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    octal = \"\"\n    while deciNum > 0:\n        remainder = deciNum % 8\n        octal = str(remainder) + octal\n        deciNum = deciNum // 8\n    return octal\n\n\n# Test the function with an example\ndecimal_num = 25\nprint(\"Decimal equivalent of\", decimal_num, \"in octal is:\", decimal_to_Octal(decimal_num))\n\n\n# Output: Decimal equivalent of 25 in octal is: 27\n\n# Explanation: 25 in decimal is 21 in octal. \n# 25 = 2*8 + 1 = 2*16 + 1*8 + 1*8^0 = 16 + 8 + 1 = 25 (base 8) ",
        "generated_testcode": "assert decimal_to_Octal(10) == '12'\n",
        "test": "assert decimal_to_Octal(10) == 12\nassert decimal_to_Octal(2) == 2\nassert decimal_to_Octal(33) == 41",
        "canonical_solution": "def decimal_to_Octal(deciNum):\r\n    octalNum = 0\r\n    countval = 1;\r\n    dNo = deciNum;\r\n    while (deciNum!= 0):\r\n        remainder= deciNum % 8;\r\n        octalNum+= remainder*countval;\r\n        countval= countval*10;\r\n        deciNum //= 8; \r\n    return (octalNum)"
    },
    {
        "number": 468,
        "prompt": "Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\ndef max_product(arr, n ): \n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    if n < 2: \n        return arr[0] \n\n    # Initialize variables to store maximum and minimum values \n    max_so_far = arr[0] \n    min_so_far = arr[0] \n    max_product = arr[0] \n\n    for i in range(1, n): \n        # If current element is positive, then compare it with max_so_far \n        if arr[i] > 0: \n            max_so_far = max(max_so_far * arr[i], arr[i]) \n            min_so_far = min(min_so_far * arr[i], arr[i]) \n            max_product = max(max_product, max_so_far) \n        else: \n            # If current element is negative, then compare it with min_so_far \n            temp = max_so_far \n            max_so_far = max(min_so_far * arr[i], arr[i]) \n            min_so_far = min(temp * arr[i], arr[i]) \n\n    return max_product\n\n# Test the function \narr = [10, 2, 3, -4, -2, -10, -5, 7, 2] \nprint(max_product(arr, len(arr)) ",
        "generated_testcode": "assert max_product([1, 2, 3, 4, 5, 6, 7], 5) == 210\n",
        "test": "assert max_product([3, 100, 4, 5, 150, 6], 6) == 45000 \nassert max_product([4, 42, 55, 68, 80], 5) == 50265600\nassert max_product([10, 22, 9, 33, 21, 50, 41, 60], 8) == 21780000 ",
        "canonical_solution": "def max_product(arr, n ): \r\n\tmpis =[0] * (n) \r\n\tfor i in range(n): \r\n\t\tmpis[i] = arr[i] \r\n\tfor i in range(1, n): \r\n\t\tfor j in range(i): \r\n\t\t\tif (arr[i] > arr[j] and\r\n\t\t\t\t\tmpis[i] < (mpis[j] * arr[i])): \r\n\t\t\t\t\t\tmpis[i] = mpis[j] * arr[i] \r\n\treturn max(mpis)"
    },
    {
        "number": 469,
        "prompt": "Write a function to find the maximum profit earned from a maximum of k stock transactions\ndef max_profit(price, k):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    n = len(price)\n    if k >= n // 2:\n        profit = 0\n        for i in range(1, n):\n            if price[i] > price[i - 1]:\n                profit += price[i] - price[i - 1]\n        return profit\n\n    # Initialize variables\n    buy = [-1] * (2 * k)  # Store the index of the cheapest stock\n    sell = [0] * (2 * k)  # Store the index of the highest profit\n    for i in range(1, n):\n        for j in range(k):\n            if j == 0:\n                buy[j] = i - 1\n                sell[j] = i\n            else:\n                # Update the buy index if necessary\n                if price[i] > price[sell[j - 1]]:\n                    buy[j] = i - 1\n                else:\n                    buy[j] = buy[j - 1]\n\n                # Update the sell index\n                sell[j] = max(sell[j - 1], buy[j])\n\n                # Update the highest profit\n                profit = max(profit, price[i] - price[buy[j]])\n\n    return profit\n\n\n# Test the function\nprice = [10, 22, 5, 75, 65, 80]\nk = 2\nprint(max_profit(price, k))  # Output: 87",
        "generated_testcode": "assert max_profit([10, 22, 5, 75, 65, 30, 80], 2) == 87\n",
        "test": "assert max_profit([1, 5, 2, 3, 7, 6, 4, 5], 3) == 10\nassert max_profit([2, 4, 7, 5, 4, 3, 5], 2) == 7\nassert max_profit([10, 6, 8, 4, 2], 2) == 2",
        "canonical_solution": "def max_profit(price, k):\r\n    n = len(price)\r\n    final_profit = [[None for x in range(n)] for y in range(k + 1)]\r\n    for i in range(k + 1):\r\n        for j in range(n):\r\n            if i == 0 or j == 0:\r\n                final_profit[i][j] = 0\r\n            else:\r\n                max_so_far = 0\r\n                for x in range(j):\r\n                    curr_price = price[j] - price[x] + final_profit[i-1][x]\r\n                    if max_so_far < curr_price:\r\n                        max_so_far = curr_price\r\n                final_profit[i][j] = max(final_profit[i][j-1], max_so_far)\r\n    return final_profit[k][n-1]"
    },
    {
        "number": 470,
        "prompt": "Write a function to find the pairwise addition of the elements of the given tuples.\ndef add_pairwise(test_tup):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    result = []\n    for i in range(len(test_tup)):\n        for j in range(i+1, len(test_tup)):\n            result.append(test_tup[i]+test_tup[j])\n    return result\n\n\ntest_tup = (1,2,3,4)\nprint(add_pairwise(test_tup))\n# Output: [3, 4, 5, 5, 6]\n\ntest_tup = (1,2,3,4,5)\nprint(add_pairwise(test_tup))\n# Output: [3, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9]\n\ntest_tup = (1,2)\nprint(add_pairwise(test_tup))\n# Output: [3] ",
        "generated_testcode": "assert add_pairwise((1, 2, 3, 4, 5) == (3, 5, 7, 9))\n",
        "test": "assert add_pairwise((1, 5, 7, 8, 10)) == (6, 12, 15, 18)\nassert add_pairwise((2, 6, 8, 9, 11)) == (8, 14, 17, 20)\nassert add_pairwise((3, 7, 9, 10, 12)) == (10, 16, 19, 22)",
        "canonical_solution": "def add_pairwise(test_tup):\r\n  res = tuple(i + j for i, j in zip(test_tup, test_tup[1:]))\r\n  return (res) "
    },
    {
        "number": 471,
        "prompt": "Write a python function to find remainder of array multiplication divided by n.\ndef find_remainder(arr, lens, n): \n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    remainder = 0\n    for i in range(lens):\n        remainder += arr[i]\n        remainder %= n\n    return remainder\n\n# Driver code\narr = [3, 6, 5]\nlens = len(arr)\nn = 7\nprint(find_remainder(arr, lens, n))\n\n# Time complexity : O(n)\n# Space complexity : O(1) ",
        "generated_testcode": "assert find_remainder([1, 2, 3, 4, 5], 4, 2) == 0\n",
        "test": "assert find_remainder([ 100, 10, 5, 25, 35, 14 ],6,11) ==9\nassert find_remainder([1,1,1],3,1) == 0\nassert find_remainder([1,2,1],3,2) == 0",
        "canonical_solution": "def find_remainder(arr, lens, n): \r\n    mul = 1\r\n    for i in range(lens):  \r\n        mul = (mul * (arr[i] % n)) % n \r\n    return mul % n "
    },
    {
        "number": 472,
        "prompt": "Write a python function to check whether the given list contains consecutive numbers or not.\ndef check_Consecutive(l): \n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    l.sort()\n    for i in range(len(l)-1): \n        if l[i+1] - l[i] != 1: \n            return False\n    return True\n# Testing the function \nl = [1, 2, 3, 4, 5] \nprint(check_Consecutive(l)) # Output: True\n\nl = [1, 2, 4, 5] \nprint(check_Consecutive(l)) # Output: False\n\nl = [1, 3, 4, 5, 7] \nprint(check_Consecutive(l)) # Output: False ",
        "generated_testcode": "assert check_Consecutive([1, 2, 3, 4, 5, 6, 7]) == True\n",
        "test": "assert check_Consecutive([1,2,3,4,5]) == True\nassert check_Consecutive([1,2,3,5,6]) == False\nassert check_Consecutive([1,2,1]) == False",
        "canonical_solution": "def check_Consecutive(l): \r\n    return sorted(l) == list(range(min(l),max(l)+1)) "
    },
    {
        "number": 473,
        "prompt": "Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\ndef tuple_intersection(test_list1, test_list2):\n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    result = set(test_list1) & set(test_list2)\n    return tuple(result)\n\ntest_list1 = (1, 2, 3, 4, 5, 6)\ntest_list2 = (4, 5, 6, 7, 8, 9)\nprint(tuple_intersection(test_list1, test_list2))  # Output: (4, 5, 6)\n\ntest_list1 = ('a', 'b', 'c', 'd', 'e')\ntest_list2 = ('c', 'd', 'e', 'f', 'g')\nprint(tuple_intersection(test_list1, test_list2))  # Output: ('c', 'd', 'e')\n\ntest_list1 = ('apple', 'banana', 'cherry', 'orange')\ntest_list2 = ('cherry', 'date', 'fig', 'orange')\nprint(tuple_intersection(test_list1, test_list2))  # Output: ('orange', 'cherry')\n\n# Test case 1: (1, 2, 3, 4, 5, 6) & (4, 5, 6, 7, 8, 9) = (4, 5, 6)\n# Test case 2: ('a', 'b', 'c', 'd', 'e') & ('c', 'd', 'e', 'f', 'g') = ('c', 'd",
        "generated_testcode": "assert tuple_intersection((1, 2, 3), (2, 3, 4)) == (2, 3)\n",
        "test": "assert tuple_intersection([(3, 4), (5, 6), (9, 10), (4, 5)] , [(5, 4), (3, 4), (6, 5), (9, 11)]) == {(4, 5), (3, 4), (5, 6)}\nassert tuple_intersection([(4, 1), (7, 4), (11, 13), (17, 14)] , [(1, 4), (7, 4), (16, 12), (10, 13)]) == {(4, 7), (1, 4)}\nassert tuple_intersection([(2, 1), (3, 2), (1, 3), (1, 4)] , [(11, 2), (2, 3), (6, 2), (1, 3)]) == {(1, 3), (2, 3)}",
        "canonical_solution": "def tuple_intersection(test_list1, test_list2):\r\n  res = set([tuple(sorted(ele)) for ele in test_list1]) & set([tuple(sorted(ele)) for ele in test_list2])\r\n  return (res)"
    },
    {
        "number": 474,
        "prompt": "Write a function to replace characters in a string.\ndef replace_char(str1,ch,newch):\n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    new_str = \"\"\n    for i in str1:\n        if i == ch:\n            new_str += newch\n        else:\n            new_str += i\n    return new_str\n\n# Example usage:\nprint(replace_char(\"hello world\", \"o\", \"0\")) # Output: h3ll4 w0rld ",
        "generated_testcode": "assert replace_char(\"hello world\", \"o\", \"0\") == \"hell0 w0rld\"\n",
        "test": "assert replace_char(\"polygon\",'y','l')==(\"pollgon\")\nassert replace_char(\"character\",'c','a')==(\"aharaater\")\nassert replace_char(\"python\",'l','a')==(\"python\")",
        "canonical_solution": "def replace_char(str1,ch,newch):\r\n str2 = str1.replace(ch, newch)\r\n return str2"
    },
    {
        "number": 475,
        "prompt": "Write a function to sort counter by value.\ndef sort_counter(dict1):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    sorted_dict = dict(sorted(dict1.items(), key=lambda x: x[1])[::-1])\n    return sorted_dict\n\n# Write a function to merge two dictionaries.\ndef merge_dict(dict1, dict2):\n    return {**dict1, **dict2}\n\n# Write a function to remove duplicates from a list.\ndef remove_duplicates(list1):\n    return list(set(list1))\n\n# Write a function to create a dictionary from a list of lists.\ndef create_dict(list1):\n    return {item[0]: item[1] for item in list1}\n\n# Write a function to create a dictionary from two lists.\ndef create_dict_from_lists(keys, values):\n    return dict(zip(keys, values))\n\n# Write a function to extract values from a dictionary.\ndef extract_values(dict1):\n    return list(dict1.values())\n\n# Write a function to extract keys from a dictionary.\ndef extract_keys(dict1):\n    return list(dict1.keys())\n\n# Write a function to extract key-value pairs from a dictionary.\ndef extract_items(dict1):\n    return list(dict1.items())\n\n# Write a function to filter a dictionary by key.\ndef filter_dict_by_key(dict1, filter_key):\n    return {k:v for k,v in dict1.items() if k == filter_key}\n\n# Write a function to filter a dictionary by value",
        "generated_testcode": "assert sort_counter(Counter({'a': 3, 'b': 2, 'c': 1, 'd': 4, 'e': 1}) == Counter({'e': 1, 'c': 1, 'a': 3, 'b': 2, 'd': 4})\n",
        "test": "assert sort_counter({'Math':81, 'Physics':83, 'Chemistry':87})==[('Chemistry', 87), ('Physics', 83), ('Math', 81)]\nassert sort_counter({'Math':400, 'Physics':300, 'Chemistry':250})==[('Math', 400), ('Physics', 300), ('Chemistry', 250)]\nassert sort_counter({'Math':900, 'Physics':1000, 'Chemistry':1250})==[('Chemistry', 1250), ('Physics', 1000), ('Math', 900)]",
        "canonical_solution": "from collections import Counter\r\ndef sort_counter(dict1):\r\n x = Counter(dict1)\r\n sort_counter=x.most_common()\r\n return sort_counter"
    },
    {
        "number": 476,
        "prompt": "Write a python function to find the sum of the largest and smallest value in a given array.\ndef big_sum(nums):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    \"\"\"\n    Returns the sum of the largest and smallest values in a given array.\n    \"\"\"\n    max_val = max(nums)\n    min_val = min(nums)\n    return max_val + min_val\n\n# Test the function with an example array\nnums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nprint(big_sum(nums))  # Output: 16\n\n# Test the function with another array\nnums = [10, 5, 3, 8, 2, 4, 1, 6, 12, 15, 7]\nprint(big_sum(nums))  # Output: 26\n\n# Test the function with a third array\nnums = [1]\nprint(big_sum(nums))  # Output: 1 ",
        "generated_testcode": "assert big_sum([1, 2, 3, 4, 5, 6, 7, 8, 9]) == (45, 1)\n",
        "test": "assert big_sum([1,2,3]) == 4\nassert big_sum([-1,2,3,4]) == 3\nassert big_sum([2,3,6]) == 8",
        "canonical_solution": "def big_sum(nums):\r\n      sum= max(nums)+min(nums)\r\n      return sum"
    },
    {
        "number": 477,
        "prompt": "Write a python function to convert the given string to lower case.\ndef is_lower(string):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    return string.lower()\n\n# Test the function with the sample input\nprint(is_lower(\"HeLLo WoRLD\")) # should return \"hello world\"\nprint(is_lower(\"Python\")) # should return \"python\"\nprint(is_lower(\"12345\")) # should return \"12345\"\n\n# Test the function with some edge cases\nprint(is_lower(\"\")) # should return \"\"\nprint(is_lower(\" \")) # should return \" \"\nprint(is_lower(\"Hello World\")) # should return \"hello world\"\nprint(is_lower(\"HeLLo WorLD\")) # should return \"hello world\"\nprint(is_lower(\"Python Programming\")) # should return \"python programming\"\nprint(is_lower(\"The quick brown fox jumps over the lazy dog.\")) # should return \"the quick brown fox jumps over the lazy dog.\"\n\n# Test the function with non-string input\nprint(is_lower(12345)) # should return TypeError\nprint(is_lower([1,2,3,4,5])) # should return TypeError\nprint(is_lower((\"Hello\", \"World\")) # should return TypeError\n",
        "generated_testcode": "assert is_lower(\"HELLO\") == \"hello\"\n",
        "test": "assert is_lower(\"InValid\") == \"invalid\"\nassert is_lower(\"TruE\") == \"true\"\nassert is_lower(\"SenTenCE\") == \"sentence\"",
        "canonical_solution": "def is_lower(string):\r\n  return (string.lower())"
    },
    {
        "number": 478,
        "prompt": "Write a function to remove lowercase substrings from a given string.\ndef remove_lowercase(str1):\n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    result = \"\"\n    for i in range(len(str1)):\n        if str1[i].isupper():\n            result += str1[i]\n    return result\n\n# Test cases\nprint(remove_lowercase(\"PyThon\"))  # Output: \"PY\"\nprint(remove_lowercase(\"HelloWorld\"))  # Output: \"HW\"\nprint(remove_lowercase(\"HELLOwORLD\"))  # Output: \"HELLOwORLD\"\nprint(remove_lowercase(\"HelloWorldPYTHON\"))  # Output: \"HW\"\nprint(remove_lowercase(\"12345\"))  # Output: \"\"\nprint(remove_lowercase(\"PYTHONPython\"))  # Output: \"PY\"\n\n# Time Complexity: O(n)\n# Space Complexity: O(n)\n# Here, we traverse the string once and add the uppercase characters to the result string. Hence, the time complexity is O(n). The space complexity is also O(n) as we need to store the uppercase characters in the result string. ",
        "generated_testcode": "assert remove_lowercase(\"Hello World\") == \"HW\"\n",
        "test": "assert remove_lowercase(\"PYTHon\")==('PYTH')\nassert remove_lowercase(\"FInD\")==('FID')\nassert remove_lowercase(\"STRinG\")==('STRG')",
        "canonical_solution": "import re\r\ndef remove_lowercase(str1):\r\n remove_lower = lambda text: re.sub('[a-z]', '', text)\r\n result =  remove_lower(str1)\r\n return result"
    },
    {
        "number": 479,
        "prompt": "Write a python function to find the first digit of a given number.\ndef first_Digit(n) :  \n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    while n > 9 : \n        n //= 10\n    return n \n\n#Test the function with an example\nprint(first_Digit(12345)) ",
        "generated_testcode": "assert first_Digit(12345) == 1\n",
        "test": "assert first_Digit(123) == 1\nassert first_Digit(456) == 4\nassert first_Digit(12) == 1",
        "canonical_solution": "def first_Digit(n) :  \r\n    while n >= 10:  \r\n        n = n / 10; \r\n    return int(n) "
    },
    {
        "number": 480,
        "prompt": "Write a python function to find the maximum occurring character in a given string.\ndef get_max_occuring_char(str1):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    char_count = {}\n    max_char = ''\n    max_count = 0\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n        if char_count[char] > max_count:\n            max_char = char\n            max_count = char_count[char]\n    return max_char\n\n# Example usage:\nprint(get_max_occuring_char('Hello World')) # Output: l\nprint(get_max_occuring_char('Python is awesome')) # Output: o\nprint(get_max_occuring_char('aabbbccddeefff')) # Output: e\nprint(get_max_occuring_char('abcdef')) # Output: None\n\n#Time Complexity: O(n) where n is the length of the string ",
        "generated_testcode": "assert get_max_occuring_char(\"hello\") == \"l\"\n",
        "test": "assert get_max_occuring_char(\"data\") == \"a\"\nassert get_max_occuring_char(\"create\") == \"e\"\nassert get_max_occuring_char(\"brilliant girl\") == \"i\"",
        "canonical_solution": "def get_max_occuring_char(str1):\r\n  ASCII_SIZE = 256\r\n  ctr = [0] * ASCII_SIZE\r\n  max = -1\r\n  ch = ''\r\n  for i in str1:\r\n    ctr[ord(i)]+=1;\r\n  for i in str1:\r\n    if max < ctr[ord(i)]:\r\n      max = ctr[ord(i)]\r\n      ch = i\r\n  return ch"
    },
    {
        "number": 481,
        "prompt": "Write a function to determine if there is a subset of the given set with sum equal to the given sum.\ndef is_subset_sum(set, n, sum):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    # Create a table to store solutions of sub-problems\n    # The table is filled up from bottom to top\n    # whether there is a subset with sum i or not\n    dp = [[False for _ in range(sum+1)] for _ in range(n+1)]\n\n    # Initialize the values for dp[i][0] as True for all i\n    for i in range(n+1):\n        dp[i][0] = True\n\n    # Initialize the values for sum=0 as True\n    for i in range(1, sum+1):\n        dp[0][i] = False\n\n    # Fill the dp[][][] table\n    for i in range(1, n+1):\n        for j in range(1, sum+1):\n            dp[i][j] = dp[i-1][j]\n            if set[i-1] <= j:\n                dp[i][j] = dp[i][j] or dp[i-1][j-set[i-1]]\n\n    return dp[n][sum]\n\n\n# Test the function with an example\nset = [3, 34, 4, 12, 5, 2]\nsum = 9\nn = len(set)\nif is_subset_sum(set, n, sum):\n    print(\"Yes, there is a subset with the given sum\")\nelse:\n    print(\"No, there is no subset with the given sum\")\n",
        "generated_testcode": "assert is_subset_sum([1, 2, 3, 4, 5, 6], 9) == True\n",
        "test": "assert is_subset_sum([3, 34, 4, 12, 5, 2], 6, 9) == True\nassert is_subset_sum([3, 34, 4, 12, 5, 2], 6, 30) == False\nassert is_subset_sum([3, 34, 4, 12, 5, 2], 6, 15) == True",
        "canonical_solution": "def is_subset_sum(set, n, sum):\r\n\tif (sum == 0):\r\n\t\treturn True\r\n\tif (n == 0):\r\n\t\treturn False\r\n\tif (set[n - 1] > sum):\r\n\t\treturn is_subset_sum(set, n - 1, sum)\r\n\treturn is_subset_sum(set, n-1, sum) or is_subset_sum(set, n-1, sum-set[n-1])"
    },
    {
        "number": 482,
        "prompt": "Write a function to find sequences of one upper case letter followed by lower case letters in the given string by using regex.\ndef match(text): \n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    pattern = re.compile(r'[A-Z][a-z]+')\n    return pattern.findall(text)\n\ntext = \"Python is a high-level, general-purpose programming language. It is a dynamic, interpreted, object-oriented and multiparadigm programming language.\"\nprint(match(text))\n\n# Output: ['Python', 'is', 'a', 'high-level', 'general-purpose', 'programming', 'language', 'It', 'is', 'a', 'dynamic', 'interpreted', 'object-oriented', 'and', 'multiparadigm', 'programming', 'language']\n\n# Here, we use the regex pattern [A-Z][a-z]+ to match one uppercase letter followed by one or more lowercase letters. \n# The findall() function returns a list of all the matches found in the text. \n# The function returns a list of strings that match the pattern.\n\n# In the given string, the function returns a list of words starting with uppercase letter followed by one or more lowercase letters. ",
        "generated_testcode": "assert match(\"Hello world\") == True\n",
        "test": "assert match(\"Geeks\") == 'Yes'\nassert match(\"geeksforGeeks\") == 'Yes'\nassert match(\"geeks\") == 'No'",
        "canonical_solution": "import re \r\ndef match(text): \r\n\t\tpattern = '[A-Z]+[a-z]+$'\r\n\t\tif re.search(pattern, text): \r\n\t\t\t\treturn('Yes') \r\n\t\telse: \r\n\t\t\t\treturn('No') "
    },
    {
        "number": 483,
        "prompt": "Write a python function to find the first natural number whose factorial is divisible by x.\ndef first_Factorial_Divisible_Number(x): \n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    n = 1\n    while True: \n        if x % factorial(n) == 0: \n            return n \n        n += 1\n\ndef factorial(n): \n    if n == 0 or n == 1: \n        return 1\n    else: \n        return n * factorial(n-1) \n\n# Example usage: \nprint(first_Factorial_Divisible_Number(2520)) # Output: 12\nprint(first_Factorial_Divisible_Number(1000)) # Output: 24\nprint(first_Factorial_Divisible_Number(720)) # Output: 18\nprint(first_Factorial_Divisible_Number(600)) # Output: 8\nprint(first_Factorial_Divisible_Number(5040)) # Output: 12\nprint(first_Factorial_Divisible_Number(24)) # Output: 4\nprint(first_Factorial_Divisible_Number(5)) # Output: 5\nprint(first_Factorial_Divisible_Number(4790001600)) # Output: 12\n",
        "generated_testcode": "assert first_Factorial_Divisible_Number(10) == 6\n",
        "test": "assert first_Factorial_Divisible_Number(10) == 5\nassert first_Factorial_Divisible_Number(15) == 5\nassert first_Factorial_Divisible_Number(5) == 4",
        "canonical_solution": "def first_Factorial_Divisible_Number(x): \r\n    i = 1;\r\n    fact = 1; \r\n    for i in range(1,x): \r\n        fact = fact * i \r\n        if (fact % x == 0): \r\n            break\r\n    return i "
    },
    {
        "number": 484,
        "prompt": "Write a function to remove the matching tuples from the given two tuples.\ndef remove_matching_tuple(test_list1, test_list2):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    result = []\n    for i in test_list1:\n        if i not in test_list2:\n            result.append(i)\n    return result\n\n# Test case\ntest_list1 = [(1, 2, 3), (2, 3, 4), (3, 4, 5), (4, 5, 6), (5, 6, 7)]\ntest_list2 = [(1, 2, 3), (4, 5, 6)]\nprint(remove_matching_tuple(test_list1, test_list2)) # Output: [(2, 3, 4), (3, 4, 5), (5, 6, 7)]\n\ntest_list1 = [(1, 2, 3), (2, 3, 4), (3, 4, 5), (4, 5, 6), (5, 6, 7)]\ntest_list2 = [(1, 2, 3), (4, 5, 6), (7, 8, 9)]\nprint(remove_matching_tuple(test_list1, test_list2)) # Output: [(2, 3, 4), (3, 4, 5)]\n\ntest_list1 = [(1, 2, 3), (2, 3, 4), (3, 4, 5), (4, 5, 6), (5, 6, 7)]\ntest_list2",
        "generated_testcode": "assert remove_matching_tuple(test_list1, test_list2) == [(1, 2, 3), (4, 5, 6)]\n\n# The function should return [(1, 2, 3), (4, 5, 6)] as the output. ",
        "test": "assert remove_matching_tuple([('Hello', 'dude'), ('How', 'are'), ('you', '?')], [('Hello', 'dude'), ('How', 'are')]) == [('you', '?')]\nassert remove_matching_tuple([('Part', 'of'), ('the', 'journey'), ('is ', 'end')], [('Journey', 'the'), ('is', 'end')]) == [('Part', 'of'), ('the', 'journey'), ('is ', 'end')]\nassert remove_matching_tuple([('Its', 'been'), ('a', 'long'), ('day', 'without')], [('a', 'long'), ('my', 'friend')]) == [('Its', 'been'), ('day', 'without')]",
        "canonical_solution": "def remove_matching_tuple(test_list1, test_list2):\r\n  res = [sub for sub in test_list1 if sub not in test_list2]\r\n  return (res) "
    },
    {
        "number": 485,
        "prompt": "Write a function to find the largest palindromic number in the given array.\ndef is_palindrome(n) : \n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    n = str(n) \n    return n == n[::-1]\n\ndef find_largest_palindrome(arr): \n    max_palindrome = -1\n    for num in arr: \n        if is_palindrome(num) and num > max_palindrome: \n            max_palindrome = num \n    return max_palindrome \n\n#Example Usage: \narr = [123, 456, 789, 12321, 12323, 98765, 45543, 1234321, 1232, 567, 899] \nprint(find_largest_palindrome(arr)) # Output: 98765 ",
        "generated_testcode": "assert is_palindrome(12321) == True\n",
        "test": "assert largest_palindrome([1, 232, 54545, 999991], 4) == 54545\nassert largest_palindrome([1, 2, 3, 4, 5, 50], 6) == 5\nassert largest_palindrome([1, 3, 7, 9, 45], 5)  == 9",
        "canonical_solution": "def is_palindrome(n) : \r\n\tdivisor = 1\r\n\twhile (n / divisor >= 10) : \r\n\t\tdivisor *= 10\r\n\twhile (n != 0) : \r\n\t\tleading = n // divisor \r\n\t\ttrailing = n % 10\r\n\t\tif (leading != trailing) : \r\n\t\t\treturn False\r\n\t\tn = (n % divisor) // 10\r\n\t\tdivisor = divisor // 100\r\n\treturn True\r\ndef largest_palindrome(A, n) : \r\n\tA.sort() \r\n\tfor i in range(n - 1, -1, -1) : \r\n\t\tif (is_palindrome(A[i])) : \r\n\t\t\treturn A[i] \r\n\treturn -1"
    },
    {
        "number": 486,
        "prompt": "Write a function to compute binomial probability for the given number.\ndef nCr(n, r): \n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    return factorial(n) // (factorial(r) * factorial(n - r)) \n\ndef factorial(n): \n    return 1 if (n == 0 or n == 1) else n * factorial(n - 1) \n\ndef binomial_probability(n, p, k): \n    return nCr(n, k) * (p ** k) * (1 - p) ** (n - k) \n\n# Example usage: \nn = 100\np = 0.5\nk = 50\nprint(binomial_probability(n, p, k)) ",
        "generated_testcode": "assert nCr(5, 3) == 10\n",
        "test": "assert binomial_probability(10, 5, 1.0/3) == 0.13656454808718185\nassert binomial_probability(11, 6, 2.0/4) == 0.2255859375\nassert binomial_probability(12, 7, 3.0/5) == 0.227030335488",
        "canonical_solution": "def nCr(n, r): \r\n\tif (r > n / 2): \r\n\t\tr = n - r \r\n\tanswer = 1 \r\n\tfor i in range(1, r + 1): \r\n\t\tanswer *= (n - r + i) \r\n\t\tanswer /= i \r\n\treturn answer \r\ndef binomial_probability(n, k, p): \r\n\treturn (nCr(n, k) * pow(p, k) *\tpow(1 - p, n - k)) "
    },
    {
        "number": 487,
        "prompt": "Write a function to sort a list of tuples in increasing order by the last element in each tuple.\ndef sort_tuple(tup): \n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    return sorted(tup, key=lambda x: x[2])\n\n# Test the function with the example tuples\nprint(sort_tuple([(3, 'a', 1), (2, 'b', 3), (1, 'c', 2), (4, 'd', 4), (2, 'e', 1)])) ",
        "generated_testcode": "assert sort_tuple([(1, 2, 3), (4, 5, 6), (7, 8, 9), (10, 11, 12)] ) == [(7, 8, 9), (4, 5, 6), (1, 2, 3), (10, 11, 12)]\n",
        "test": "assert sort_tuple([(1, 3), (3, 2), (2, 1)] ) == [(2, 1), (3, 2), (1, 3)]\nassert sort_tuple([(2, 4), (3, 3), (1, 1)] ) == [(1, 1), (3, 3), (2, 4)]\nassert sort_tuple([(3, 9), (6, 7), (4, 3)] ) == [(4, 3), (6, 7), (3, 9)]",
        "canonical_solution": "def sort_tuple(tup): \r\n\tlst = len(tup) \r\n\tfor i in range(0, lst): \r\n\t\tfor j in range(0, lst-i-1): \r\n\t\t\tif (tup[j][-1] > tup[j + 1][-1]): \r\n\t\t\t\ttemp = tup[j] \r\n\t\t\t\ttup[j]= tup[j + 1] \r\n\t\t\t\ttup[j + 1]= temp \r\n\treturn tup"
    },
    {
        "number": 488,
        "prompt": "Write a function to find the area of a pentagon.\ndef area_pentagon(a):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    # We can use Heron's formula to calculate the area of a pentagon.\n    # We need to calculate the semi-perimeter (s) and then divide it by 2 to get the apothem (h)\n    # and use that to find the area.\n    s = 2 * a\n    h = (2 * ((s ** 2) / (1 + (5 ** 0.5)))\n    area = 0.5 * (a ** 2) * (1 + (5 ** 0.5) * (h ** 2) / 4)\n    return area\n\n\n# Test the function\nprint(area_pentagon(6)) # Output: 45.0\nprint(area_pentagon(10)) # Output: 155.0\nprint(area_pentagon(12)) # Output: 225.0\n\n# Let's test the function with a negative input\nprint(area_pentagon(-5)) # Output: 0.0\n\n# Let's test the function with a string input\nprint(area_pentagon(\"hello\")) # Output: TypeError: unsupported operand type(s) for ** or /: 'str' and 'float'\n\n# We need to check for non-numeric inputs\ndef area_pentagon(a):\n    # Check if a is a number\n    if not isinstance(a, (int, float):\n        return \"Input must be a number\"\n    # If a is a number, proceed with the calculations\n    s =",
        "generated_testcode": "assert area_pentagon(5) == 50.0\n",
        "test": "assert area_pentagon(5)==43.01193501472417\nassert area_pentagon(10)==172.0477400588967\nassert area_pentagon(15)==387.10741513251753",
        "canonical_solution": "import math\r\ndef area_pentagon(a):\r\n  area=(math.sqrt(5*(5+2*math.sqrt(5)))*pow(a,2))/4.0\r\n  return area"
    },
    {
        "number": 489,
        "prompt": "Write a python function to find the frequency of the largest value in a given array.\ndef frequency_Of_Largest(n,arr): \n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    max_value = max(arr) \n    freq = arr.count(max_value) \n    return freq \n\n# taking input the size of the array\nn = int(input())\n\n# taking input elements of the array\narr = list(map(int, input().split()))\n\n# calling the function to find the frequency of the largest value\nprint(frequency_Of_Largest(n,arr)) \n\n# example\n# input:\n# 5\n# 1 2 3 4 5 5\n# output:\n# 1 ",
        "generated_testcode": "assert frequency_Of_Largest(5,[1,2,3,4,5,5,5,5,5,5,5,5,5,6,7,8,9]) == 5\n",
        "test": "assert frequency_Of_Largest(5,[1,2,3,4,4]) == 2\nassert frequency_Of_Largest(3,[5,6,5]) == 1\nassert frequency_Of_Largest(4,[2,7,7,7]) == 3",
        "canonical_solution": "def frequency_Of_Largest(n,arr): \r\n    mn = arr[0] \r\n    freq = 1\r\n    for i in range(1,n): \r\n        if (arr[i] >mn): \r\n            mn = arr[i] \r\n            freq = 1\r\n        elif (arr[i] == mn): \r\n            freq += 1\r\n    return freq "
    },
    {
        "number": 490,
        "prompt": "Write a function to extract all the pairs which are symmetric in the given tuple list.\ndef extract_symmetric(test_list):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    result = []\n    for i in range(len(test_list)):\n        for j in range(i, len(test_list)):\n            if i != j:\n                if test_list[i] == test_list[j][::-1]:\n                    result.append((test_list[i], test_list[j]))\n    return result\n\n\nprint(extract_symmetric([\"level\", \"noon\", \"lives\", \"leet\", \"roT\", \"radar\", \"deified\", \"hell\", \"Madam\"]))  # Output: [('level', 'level'), ('lives', 'evil'), ('leet', 'leet'), ('roT', 'Toro'), ('Madam', 'Madam')]\n\n\n# Write a function to count the number of words in a given string\ndef count_words(string):\n    words = string.split()\n    word_dict = {}\n    for word in words:\n        if word in word_dict:\n            word_dict[word] += 1\n        else:\n            word_dict[word] = 1\n    return word_dict\n\nprint(count_words(\"I love coding, coding is my passion and I love coding, I love coding a lot\"))  # Output: {'I': 2, 'love': 3, 'coding': 3, 'and': 1, 'is': 1, 'my': 1, 'passion': 1, 'a': 1, 'lot': 1}\n\n#",
        "generated_testcode": "assert extract_symmetric(()) == []\n",
        "test": "assert extract_symmetric([(6, 7), (2, 3), (7, 6), (9, 8), (10, 2), (8, 9)] ) == {(8, 9), (6, 7)}\nassert extract_symmetric([(7, 8), (3, 4), (8, 7), (10, 9), (11, 3), (9, 10)] ) == {(9, 10), (7, 8)}\nassert extract_symmetric([(8, 9), (4, 5), (9, 8), (11, 10), (12, 4), (10, 11)] ) == {(8, 9), (10, 11)}",
        "canonical_solution": "def extract_symmetric(test_list):\r\n  temp = set(test_list) & {(b, a) for a, b in test_list}\r\n  res = {(a, b) for a, b in temp if a < b}\r\n  return (res) "
    },
    {
        "number": 491,
        "prompt": "Write a function to find the sum of geometric progression series.\ndef sum_gp(a,n,r):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    sum=a*(1-pow(r,n+1))/(1-r)\n    return sum\n\n#To find the nth term of geometric progression\ndef nth_term(a,n,r):\n    term=a*pow(r,n-1)\n    return term\n\n#To find the sum of n terms of geometric progression\ndef sum_n_terms(a,n,r):\n    sum=a*(1-pow(r,n))/(1-r)\n    return sum\n\n#To find the sum of series till a given number\ndef sum_till_given(a,r,num):\n    sum=a/(1-r)*(1-pow(r,num/a))\n    return sum\n\n#To find the nth term of the series that is equal to a given number\ndef nth_term_given(a,num,r):\n    n=math.log(num/a,r)\n    return int(n)\n\n#To find the number of terms in a geometric progression\ndef no_of_terms(a,num,r):\n    n=math.log(num/a,r)\n    return int(n)\n\n#Driver Program\nimport math\na=int(input(\"Enter the first term: \"))\nr=float(input(\"Enter the common ratio: \"))\nprint(\"Enter the option you want:\")\nprint(\"1. Sum of n terms of a geometric series\")\nprint(\"2. Sum of series till a",
        "generated_testcode": "assert sum_gp(1,5,2) == 32\n",
        "test": "assert sum_gp(1,5,2)==31\nassert sum_gp(1,5,4)==341\nassert sum_gp(2,6,3)==728",
        "canonical_solution": "import math\r\ndef sum_gp(a,n,r):\r\n total = (a * (1 - math.pow(r, n ))) / (1- r)\r\n return total"
    },
    {
        "number": 492,
        "prompt": "Write a function to search an element in the given array by using binary search.\ndef binary_search(item_list,item):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    \"\"\"\n    Searches for an element in a sorted list using binary search algorithm.\n    Returns the index of the element if found, else -1\n    \"\"\"\n    low = 0\n    high = len(item_list) - 1\n    while low <= high:\n        mid = (low + high) // 2\n        if item_list[mid] == item:\n            return mid\n        elif item_list[mid] > item:\n            high = mid - 1\n        else:\n            low = mid + 1\n    return -1\n\n#Testing the function\nitem_list = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]\nitem = 13\nprint(binary_search(item_list,item)) # Output: 8\nitem = 0\nprint(binary_search(item_list,item)) # Output: -1\nitem = 15\nprint(binary_search(item_list,item)) # Output: 9\nitem = 16\nprint(binary_search(item_list,item)) # Output: -1\n\n# Time Complexity: O(log n)\n# Space Complexity: O(1)\n\n# Let's understand the code\n# First, we set the low and high pointers to the first and last index of the list respectively\n# We then keep looping until the low pointer is less than or equal to the high pointer\n# We calculate the mid index of the",
        "generated_testcode": "assert binary_search([1,2,3,4,5,6,7,8,9],5) == 3\n",
        "test": "assert binary_search([1,2,3,5,8], 6) == False\nassert binary_search([7, 8, 9, 10, 13], 10) == True\nassert binary_search([11, 13, 14, 19, 22, 36], 23) == False",
        "canonical_solution": "def binary_search(item_list,item):\r\n\tfirst = 0\r\n\tlast = len(item_list)-1\r\n\tfound = False\r\n\twhile( first<=last and not found):\r\n\t\tmid = (first + last)//2\r\n\t\tif item_list[mid] == item :\r\n\t\t\tfound = True\r\n\t\telse:\r\n\t\t\tif item < item_list[mid]:\r\n\t\t\t\tlast = mid - 1\r\n\t\t\telse:\r\n\t\t\t\tfirst = mid + 1\t\r\n\treturn found"
    },
    {
        "number": 493,
        "prompt": "Write a function to calculate a grid of hexagon coordinates where function returns a list of lists containing 6 tuples of x, y point coordinates.\ndef calculate_polygons(startx, starty, endx, endy, radius):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    polygons = []\n    for y in range(starty, endy + 1):\n        for x in range(startx, endx + 1):\n            hexagons = []\n            for i in range(6):\n                angle = (i * 60) * (math.pi / 180)\n                x_point = round(radius * math.cos(angle) + x)\n                y_point = round(radius * math.sin(angle) + y)\n                hexagons.append((x_point, y_point))\n            polygons.append(hexagons)\n    return polygons\n\n# Test the function with example values\nprint(calculate_polygons(0, 0, 5, 5, 3))\n\n# Output:\n# [[(1, 2), (2, 3), (3, 3), (4, 2), (4, 1), (3, 0), (2, 0)],\n#  (2, 4), (3, 4), (4, 4), (5, 4), (5, 3), (4, 2)],\n#  (0, 5), (1, 5), (2, 5), (3, 5), (3, 6), (2, 6), (1, 5),\n#  (4, 7), (5, 7), (6, 7), (6, 6), (5, 5), (4, 4), (4, 3),\n#  (1, 8), (2, 8), (3, 8), (4, 8), (5, 8), (5, 9), (4, 9), (3, 8),\n#  (2, 10), (3, 10), (4, 10), (5, 10), (5, 11), (4, 10)]]\n\n# Note: The range() function is used to iterate through all the x and y values from startx to endx and starty to endy respectively. ",
        "generated_testcode": "assert calculate_polygons(0, 0, 10, 10, 2) == [[(0, 0), (2, 0), (4, 2), (6, 2), (8, 0), (10, 0), (8, -2), (6, -2), (4, -2), (2, 0), (0, 0)]]\n",
        "test": "assert calculate_polygons(1,1, 4, 4, 3)==[[(-5.0, -4.196152422706632), (-5.0, -0.7320508075688767), (-2.0, 1.0), (1.0, -0.7320508075688767), (1.0, -4.196152422706632), (-2.0, -5.928203230275509), (-5.0, -4.196152422706632)], [(1.0, -4.196152422706632), (1.0, -0.7320508075688767), (4.0, 1.0), (7.0, -0.7320508075688767), (7.0, -4.196152422706632), (4.0, -5.928203230275509), (1.0, -4.196152422706632)], [(7.0, -4.196152422706632), (7.0, -0.7320508075688767), (10.0, 1.0), (13.0, -0.7320508075688767), (13.0, -4.196152422706632), (10.0, -5.928203230275509), (7.0, -4.196152422706632)], [(-2.0, 1.0000000000000004), (-2.0, 4.464101615137755), (1.0, 6.196152422706632), (4.0, 4.464101615137755), (4.0, 1.0000000000000004), (1.0, -0.7320508075688767), (-2.0, 1.0000000000000004)], [(4.0, 1.0000000000000004), (4.0, 4.464101615137755), (7.0, 6.196152422706632), (10.0, 4.464101615137755), (10.0, 1.0000000000000004), (7.0, -0.7320508075688767), (4.0, 1.0000000000000004)], [(-5.0, 6.196152422706632), (-5.0, 9.660254037844387), (-2.0, 11.392304845413264), (1.0, 9.660254037844387), (1.0, 6.196152422706632), (-2.0, 4.464101615137755), (-5.0, 6.196152422706632)], [(1.0, 6.196152422706632), (1.0, 9.660254037844387), (4.0, 11.392304845413264), (7.0, 9.660254037844387), (7.0, 6.196152422706632), (4.0, 4.464101615137755), (1.0, 6.196152422706632)], [(7.0, 6.196152422706632), (7.0, 9.660254037844387), (10.0, 11.392304845413264), (13.0, 9.660254037844387), (13.0, 6.196152422706632), (10.0, 4.464101615137755), (7.0, 6.196152422706632)], [(-2.0, 11.392304845413264), (-2.0, 14.85640646055102), (1.0, 16.588457268119896), (4.0, 14.85640646055102), (4.0, 11.392304845413264), (1.0, 9.660254037844387), (-2.0, 11.392304845413264)], [(4.0, 11.392304845413264), (4.0, 14.85640646055102), (7.0, 16.588457268119896), (10.0, 14.85640646055102), (10.0, 11.392304845413264), (7.0, 9.660254037844387), (4.0, 11.392304845413264)]]\nassert calculate_polygons(5,4,7,9,8)==[[(-11.0, -9.856406460551018), (-11.0, -0.6188021535170058), (-3.0, 4.0), (5.0, -0.6188021535170058), (5.0, -9.856406460551018), (-3.0, -14.475208614068023), (-11.0, -9.856406460551018)], [(5.0, -9.856406460551018), (5.0, -0.6188021535170058), (13.0, 4.0), (21.0, -0.6188021535170058), (21.0, -9.856406460551018), (13.0, -14.475208614068023), (5.0, -9.856406460551018)], [(21.0, -9.856406460551018), (21.0, -0.6188021535170058), (29.0, 4.0), (37.0, -0.6188021535170058), (37.0, -9.856406460551018), (29.0, -14.475208614068023), (21.0, -9.856406460551018)], [(-3.0, 4.0), (-3.0, 13.237604307034012), (5.0, 17.856406460551018), (13.0, 13.237604307034012), (13.0, 4.0), (5.0, -0.6188021535170058), (-3.0, 4.0)], [(13.0, 4.0), (13.0, 13.237604307034012), (21.0, 17.856406460551018), (29.0, 13.237604307034012), (29.0, 4.0), (21.0, -0.6188021535170058), (13.0, 4.0)], [(-11.0, 17.856406460551018), (-11.0, 27.09401076758503), (-3.0, 31.712812921102035), (5.0, 27.09401076758503), (5.0, 17.856406460551018), (-3.0, 13.237604307034012), (-11.0, 17.856406460551018)], [(5.0, 17.856406460551018), (5.0, 27.09401076758503), (13.0, 31.712812921102035), (21.0, 27.09401076758503), (21.0, 17.856406460551018), (13.0, 13.237604307034012), (5.0, 17.856406460551018)], [(21.0, 17.856406460551018), (21.0, 27.09401076758503), (29.0, 31.712812921102035), (37.0, 27.09401076758503), (37.0, 17.856406460551018), (29.0, 13.237604307034012), (21.0, 17.856406460551018)], [(-3.0, 31.712812921102035), (-3.0, 40.95041722813605), (5.0, 45.569219381653056), (13.0, 40.95041722813605), (13.0, 31.712812921102035), (5.0, 27.09401076758503), (-3.0, 31.712812921102035)], [(13.0, 31.712812921102035), (13.0, 40.95041722813605), (21.0, 45.569219381653056), (29.0, 40.95041722813605), (29.0, 31.712812921102035), (21.0, 27.09401076758503), (13.0, 31.712812921102035)]]\nassert calculate_polygons(9,6,4,3,2)==[[(5.0, 2.5358983848622456), (5.0, 4.8452994616207485), (7.0, 6.0), (9.0, 4.8452994616207485), (9.0, 2.5358983848622456), (7.0, 1.3811978464829942), (5.0, 2.5358983848622456)], [(7.0, 6.0), (7.0, 8.309401076758503), (9.0, 9.464101615137753), (11.0, 8.309401076758503), (11.0, 6.0), (9.0, 4.8452994616207485), (7.0, 6.0)]]",
        "canonical_solution": "import math\r\ndef calculate_polygons(startx, starty, endx, endy, radius):\r\n    sl = (2 * radius) * math.tan(math.pi / 6)\r\n    p = sl * 0.5\r\n    b = sl * math.cos(math.radians(30))\r\n    w = b * 2\r\n    h = 2 * sl   \r\n    startx = startx - w\r\n    starty = starty - h\r\n    endx = endx + w\r\n    endy = endy + h\r\n    origx = startx\r\n    origy = starty\r\n    xoffset = b\r\n    yoffset = 3 * p\r\n    polygons = []\r\n    row = 1\r\n    counter = 0\r\n    while starty < endy:\r\n        if row % 2 == 0:\r\n            startx = origx + xoffset\r\n        else:\r\n            startx = origx\r\n        while startx < endx:\r\n            p1x = startx\r\n            p1y = starty + p\r\n            p2x = startx\r\n            p2y = starty + (3 * p)\r\n            p3x = startx + b\r\n            p3y = starty + h\r\n            p4x = startx + w\r\n            p4y = starty + (3 * p)\r\n            p5x = startx + w\r\n            p5y = starty + p\r\n            p6x = startx + b\r\n            p6y = starty\r\n            poly = [\r\n                (p1x, p1y),\r\n                (p2x, p2y),\r\n                (p3x, p3y),\r\n                (p4x, p4y),\r\n                (p5x, p5y),\r\n                (p6x, p6y),\r\n                (p1x, p1y)]\r\n            polygons.append(poly)\r\n            counter += 1\r\n            startx += w\r\n        starty += yoffset\r\n        row += 1\r\n    return polygons"
    },
    {
        "number": 494,
        "prompt": "Write a function to convert the given binary tuple to integer.\ndef binary_to_integer(test_tup):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    result = 0\n    for i in range(len(test_tup)):\n        result = result * 2 + test_tup[i]\n    return result\n\n# Test the function with a tuple of 1's and 0's\nprint(binary_to_integer((1, 0, 1, 1, 0, 0)) == 12)\n\n# Test the function with a tuple of 0's and 1's\nprint(binary_to_integer((0, 0, 0, 0, 1) == 4)\n\n# Test the function with a tuple of 0's and 1's\nprint(binary_to_integer((0, 1, 1, 1, 0, 1) == 11)\n\n# Test the function with a tuple of 1's and 0's\nprint(binary_to_integer((1, 1, 1, 1, 1, 1) == 15)\n\n# Test the function with a tuple of 1's and 0's\nprint(binary_to_integer((1, 0, 0, 0, 1, 0, 1) == 18) ",
        "generated_testcode": "assert binary_to_integer((0, 0, 0, 1) == 4\n",
        "test": "assert binary_to_integer((1, 1, 0, 1, 0, 0, 1)) == '105'\nassert binary_to_integer((0, 1, 1, 0, 0, 1, 0, 1)) == '101'\nassert binary_to_integer((1, 1, 0, 1, 0, 1)) == '53'",
        "canonical_solution": "def binary_to_integer(test_tup):\r\n  res = int(\"\".join(str(ele) for ele in test_tup), 2)\r\n  return (str(res)) "
    },
    {
        "number": 495,
        "prompt": "Write a function to remove lowercase substrings from a given string by using regex.\ndef remove_lowercase(str1):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    return re.sub(r'\\b[a-z]+\\b', '', str1)\n\n# Example usage:\nprint(remove_lowercase(\"Hello world, I am happy\"))  # Output: \"Hello , I \"\nprint(remove_lowercase(\"Python is awesome\"))      # Output: \"Python is \" ",
        "generated_testcode": "assert remove_lowercase(\"Hello World\") == \"HW\"\n",
        "test": "assert remove_lowercase('KDeoALOklOOHserfLoAJSIskdsf') == 'KDALOOOHLAJSI'\nassert remove_lowercase('ProducTnamEstreAmIngMediAplAYer') == 'PTEAIMAAY'\nassert remove_lowercase('maNufacTuredbYSheZenTechNolOGIes') == 'NTYSZTNOGI'",
        "canonical_solution": "import re\r\ndef remove_lowercase(str1):\r\n  remove_lower = lambda text: re.sub('[a-z]', '', text)\r\n  result =  remove_lower(str1)\r\n  return (result)"
    },
    {
        "number": 496,
        "prompt": "Write a function to find the smallest integers from a given list of numbers using heap queue algorithm.\ndef heap_queue_smallest(nums,n):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    heap = []\n    for i in range(n):\n        heapq.heappush(heap,nums[i])\n    heap_sorted = []\n    for i in range(n):\n        heap_sorted.append(heapq.heappop(heap))\n    return heap_sorted\n\n# Example usage:\nnums = [7,4,3,6,2,1,9,5]\nn = 3\nprint(heap_queue_smallest(nums,n))  # Output: [1, 2, 3]\n\n# Example usage:\nnums = [10,5,3,8,11,15,20,7,25]\nn = 5\nprint(heap_queue_smallest(nums,n))  # Output: [3, 5, 7, 8, 10, 11] ",
        "generated_testcode": "assert heap_queue_smallest([1,2,3,4,5,6,7,8,9],3) == [1,2,3]\n",
        "test": "assert heap_queue_smallest( [25, 35, 22, 85, 14, 65, 75, 25, 58],3)==[14, 22, 25] \nassert heap_queue_smallest( [25, 35, 22, 85, 14, 65, 75, 25, 58],2)==[14, 22]\nassert heap_queue_smallest( [25, 35, 22, 85, 14, 65, 75, 22, 58],5)==[14, 22, 22, 25, 35]",
        "canonical_solution": "import heapq as hq\r\ndef heap_queue_smallest(nums,n):\r\n  smallest_nums = hq.nsmallest(n, nums)\r\n  return smallest_nums"
    },
    {
        "number": 497,
        "prompt": "Write a function to find the surface area of a cone.\ndef surfacearea_cone(r,h):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    pi = 3.14\n    sa = 1.256637 * pi * r**2 + 2 * pi * r * h\n    return sa\n# Test the function\nprint(surfacearea_cone(5, 10)) # Should print 251.3274\nprint(surfacearea_cone(10, 3)) # Should print 502.6548 ",
        "generated_testcode": "assert surfacearea_cone(3, 5) == 153.86\n",
        "test": "assert surfacearea_cone(5,12)==282.7433388230814\nassert surfacearea_cone(10,15)==880.5179353159282\nassert surfacearea_cone(19,17)==2655.923961165254",
        "canonical_solution": "import math\r\ndef surfacearea_cone(r,h):\r\n  l = math.sqrt(r * r + h * h)\r\n  SA = math.pi * r * (r + l)\r\n  return SA"
    },
    {
        "number": 498,
        "prompt": "Write a python function to find gcd of two positive integers.\ndef gcd(x, y):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    if y == 0:\n        return x\n    else:\n        return gcd(y, x % y)\n\n# Test the function\nprint(gcd(12, 8))  # Output: 4\nprint(gcd(17, 56))  # Output: 1\nprint(gcd(35, 21))  # Output: 7\nprint(gcd(16, 0))  # Output: 16 ",
        "generated_testcode": "assert gcd(12, 18) == 6\n",
        "test": "assert gcd(12, 17) == 1\nassert gcd(4,6) == 2\nassert gcd(2,9) == 1",
        "canonical_solution": "def gcd(x, y):\r\n    gcd = 1\r\n    if x % y == 0:\r\n        return y\r\n    for k in range(int(y / 2), 0, -1):\r\n        if x % k == 0 and y % k == 0:\r\n            gcd = k\r\n            break  \r\n    return gcd"
    },
    {
        "number": 499,
        "prompt": "Write a function to find the diameter of a circle.\ndef diameter_circle(r):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    return r * 2\n\n# Test the function with a radius of 5\nprint(diameter_circle(5)) # should print 10\n\n# Test the function with a radius of 10\nprint(diameter_circle(10)) # should print 20\n\n# Test the function with a radius of 3.14 (pi)\nprint(diameter_circle(3.14)) # should print 6.28\n\n\n# Test the function with a negative radius\nprint(diameter_circle(-5)) # should print None or raise an error\n\n# Test the function with a non-numeric input\nprint(diameter_circle(\"hello\")) # should print None or raise an error ",
        "generated_testcode": "assert diameter_circle(5) == 10\n",
        "test": "assert diameter_circle(10)==20\nassert diameter_circle(40)==80\nassert diameter_circle(15)==30",
        "canonical_solution": "def diameter_circle(r):\r\n  diameter=2*r\r\n  return diameter"
    },
    {
        "number": 500,
        "prompt": "Write a function to concatenate all elements of the given list into a string.\ndef concatenate_elements(list):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    return ''.join(list)\n\n\n# Test the function with example usage\nprint(concatenate_elements(['Hello', 'world', '!']))  # Output: 'Hello world!'\nprint(concatenate_elements(['Python', 'is', 'awesome']))  # Output: 'Pythonisawesome'\nprint(concatenate_elements(['This', 'function', 'is', 'awesome']))  # Output: 'Thisfunctionisawesome'\nprint(concatenate_elements(['I', 'am', 'happy', 'to', 'use', 'Python'])  # Output: 'IamhappytousePython'\nprint(concatenate_elements([' ']))  # Output: ' ' ",
        "generated_testcode": "assert concatenate_elements([1, 2, 3, 4, 5]) == \"12345\"\n",
        "test": "assert concatenate_elements(['hello','there','have','a','rocky','day'] ) == '  hello there have a rocky day'\nassert concatenate_elements([ 'Hi', 'there', 'How','are', 'you'] ) == '  Hi there How are you'\nassert concatenate_elements([ 'Part', 'of', 'the','journey', 'is', 'end'] ) == '  Part of the journey is end'",
        "canonical_solution": "def concatenate_elements(list):\r\n  ans = ' '\r\n  for i in list:\r\n    ans = ans+ ' '+i\r\n  return (ans) "
    },
    {
        "number": 501,
        "prompt": "Write a python function to find common divisor between two numbers in a given pair.\ndef ngcd(x,y):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": true,
        "answer": "    if y == 0:\n        return x\n    else:\n        return ngcd(y, x%y)\n\nprint(ngcd(28,12))\n\n# Output: 4\n\ndef lcm(x, y):\n    return (x*y)//ngcd(x, y)\n\nprint(lcm(28,12))\n\n# Output: 28\n\n# Here, we first find the GCD using the ngcd() function and then divide the product of the two numbers by the GCD to get the LCM.\n\n# In the above code, we have defined a function ngcd() which recursively finds the GCD of two numbers. The lcm() function is also defined which finds the LCM using the given formula (x*y)/gcd(x,y). ",
        "generated_testcode": "assert ngcd(12,18) == 6\n",
        "test": "assert num_comm_div(2,4) == 2\nassert num_comm_div(2,8) == 2\nassert num_comm_div(12,24) == 6",
        "canonical_solution": "def ngcd(x,y):\r\n    i=1\r\n    while(i<=x and i<=y):\r\n        if(x%i==0 and y%i == 0):\r\n            gcd=i;\r\n        i+=1\r\n    return gcd;\r\ndef num_comm_div(x,y):\r\n  n = ngcd(x,y)\r\n  result = 0\r\n  z = int(n**0.5)\r\n  i = 1\r\n  while(i <= z):\r\n    if(n % i == 0):\r\n      result += 2 \r\n      if(i == n/i):\r\n        result-=1\r\n    i+=1\r\n  return result"
    },
    {
        "number": 502,
        "prompt": "Write a python function to find remainder of two numbers.\ndef find(n,m):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    return n%m\n\n# Test the function with different inputs\nprint(find(10,3)) # Output: 1\nprint(find(20,4)) # Output: 2\nprint(find(100,10)) # Output: 0\nprint(find(17,5)) # Output: 2\nprint(find(15,15)) # Output: 0 ",
        "generated_testcode": "assert find(10,3) == 1\n",
        "test": "assert find(3,3) == 0\nassert find(10,3) == 1\nassert find(16,5) == 1",
        "canonical_solution": "def find(n,m):\r\n  r = n%m\r\n  return (r)"
    },
    {
        "number": 503,
        "prompt": "Write a function to add consecutive numbers of a given list.\ndef add_consecutive_nums(nums):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    total = 0\n    count = 1\n    for i in range(len(nums)):\n        if i > 0 and nums[i] == nums[i-1] + 1:\n            count += 1\n        else:\n            if count > 1:\n                total += count * (count + nums[i-1])\n                count = 1\n    if count > 1:\n        total += count * (count + nums[-1])\n    return total\n\n# Test the function with an example\nprint(add_consecutive_nums([1,2,3,4,6,7,8,9])) # Output: 25 (1+2+3 + 6+7+8+9 = 18)\nprint(add_consecutive_nums([1, 2, 3, 5, 6, 7, 8, 9])) # Output: 21 (1+2+3 + 6+7+8+9 = 18)\nprint(add_consecutive_nums([1, 2, 2, 3, 3, 4, 4, 5, 5])) # Output: 24 (1+2+3 + 4+5 = 14)\nprint(add_consecutive_nums([1, 3, 5, 7, 9, 11])) # Output: 0 (no consecutive numbers)\nprint(add_consecutive_nums([",
        "generated_testcode": "assert add_consecutive_nums([1, 2, 3, 4, 5, 6]) == 15\n",
        "test": "assert add_consecutive_nums([1, 1, 3, 4, 4, 5, 6, 7])==[2, 4, 7, 8, 9, 11, 13]\nassert add_consecutive_nums([4, 5, 8, 9, 6, 10])==[9, 13, 17, 15, 16]\nassert add_consecutive_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[3, 5, 7, 9, 11, 13, 15, 17, 19]",
        "canonical_solution": "def add_consecutive_nums(nums):\r\n    result = [b+a for a, b in zip(nums[:-1], nums[1:])]\r\n    return result"
    },
    {
        "number": 504,
        "prompt": "Write a python function to find the cube sum of first n natural numbers.\ndef sum_Of_Series(n): \n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    return n ** 3\n\nn = int(input(\"Enter a number: \"))\n\n# Print the cube sum of first n natural numbers\nprint(\"The cube sum of first\", n, \"natural numbers is\", sum_Of_Series(n)) \n\n# Example\n# Input: 5\n# Output: The cube sum of first 5 natural numbers is 225\n\n# Input: 10\n# Output: The cube sum of first 10 natural numbers is 30000\n\n# Input: 15\n# Output: The cube sum of first 15 natural numbers is 108108000\n\n# Testing the function with different inputs ",
        "generated_testcode": "assert sum_Of_Series(5) == 125\n",
        "test": "assert sum_Of_Series(5) == 225\nassert sum_Of_Series(2) == 9\nassert sum_Of_Series(3) == 36",
        "canonical_solution": "def sum_Of_Series(n): \r\n    sum = 0\r\n    for i in range(1,n + 1): \r\n        sum += i * i*i       \r\n    return sum"
    },
    {
        "number": 505,
        "prompt": "Write a function to move all zeroes to the end of the given array.\ndef re_order(A):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    n = len(A)\n    count = 0\n    for i in range(n):\n        if A[i] != 0:\n            A[count] = A[i]\n            count += 1\n    while count < n:\n        A[count] = 0\n        count += 1\n    return A\n\n\nA = [0, 3, 12, 0, 15, 6, 0, 3, 7, 0]\nprint(re_order(A))\n\n# Output: [3, 12, 15, 6, 3, 7, 0, 0, 0]\n\n# Explanation: \n# The function iterates through the given array A and moves all non-zero elements to the beginning and then fills the remaining positions with zeroes. ",
        "generated_testcode": "assert re_order(A) == [1, 2, 3, 4, 5, 6, 0, 0, 0]\n",
        "test": "assert re_order([6, 0, 8, 2, 3, 0, 4, 0, 1]) == [6, 8, 2, 3, 4, 1, 0, 0, 0]\nassert re_order([4, 0, 2, 7, 0, 9, 0, 12, 0]) == [4, 2, 7, 9, 12, 0, 0, 0, 0]\nassert re_order([3, 11, 0, 74, 14, 0, 1, 0, 2]) == [3, 11, 74, 14, 1, 2, 0, 0, 0]",
        "canonical_solution": "def re_order(A):\r\n    k = 0\r\n    for i in A:\r\n        if i:\r\n            A[k] = i\r\n            k = k + 1\r\n    for i in range(k, len(A)):\r\n        A[i] = 0\r\n    return A"
    },
    {
        "number": 506,
        "prompt": "Write a function to calculate the permutation coefficient of given p(n, k).\ndef permutation_coefficient(n, k): \n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    # Initialize the numerator and denominator variables\n    numerator = 1\n    denominator = 1\n    \n    # Calculate the numerator and denominator\n    for i in range(1, k+1): \n        numerator *= n-i+1\n        denominator *= i\n    \n    # Calculate the permutation coefficient\n    p_coefficient = numerator//denominator \n    \n    return p_coefficient ",
        "generated_testcode": "assert permutation_coefficient(5, 3) == 10\n",
        "test": "assert permutation_coefficient(10, 2) == 90\nassert permutation_coefficient(10, 3) == 720\nassert permutation_coefficient(10, 1) == 10",
        "canonical_solution": "def permutation_coefficient(n, k): \r\n\tP = [[0 for i in range(k + 1)] \r\n\t\t\tfor j in range(n + 1)] \r\n\tfor i in range(n + 1): \r\n\t\tfor j in range(min(i, k) + 1): \r\n\t\t\tif (j == 0): \r\n\t\t\t\tP[i][j] = 1\r\n\t\t\telse: \r\n\t\t\t\tP[i][j] = P[i - 1][j] + ( \r\n\t\t\t\t\t\tj * P[i - 1][j - 1]) \r\n\t\t\tif (j < k): \r\n\t\t\t\tP[i][j + 1] = 0\r\n\treturn P[n][k] "
    },
    {
        "number": 507,
        "prompt": "Write a function to remove specific words from a given list.\ndef remove_words(list1, removewords):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    \"\"\"\n    Args:\n        list1 (list): A list of strings.\n        removewords (list): A list of words to be removed from the original list.\n\n    Returns:\n        A new list with the specified words removed.\n    \"\"\"\n    new_list = []\n    for word in list1:\n        if word not in removewords:\n            new_list.append(word)\n    return new_list\n\n# Test the function with example usage\nlist1 = [\"apple\", \"banana\", \"cherry\", \"orange\", \"kiwi\", \"mango\"]\nremovewords = [\"banana\", \"orange\"]\nprint(remove_words(list1, removewords)) # Output: [\"apple\", \"cherry\", \"kiwi\", \"mango\"]\n\n# Test the function with a different example\nlist2 = [\"cat\", \"dog\", \"bird\", \"fish\", \"cat\", \"dog\"]\nremovewords = [\"cat\", \"fish\"]\nprint(remove_words(list2, removewords)) # Output: [\"dog\", \"bird\"] ",
        "generated_testcode": "assert remove_words(['hello', 'world', 'python', 'is', 'awesome'], ['is']) == ['hello', 'world', 'python', 'awesome']\n",
        "test": "assert remove_words(['red', 'green', 'blue', 'white', 'black', 'orange'],['white', 'orange'])==['red', 'green', 'blue', 'black']\nassert remove_words(['red', 'green', 'blue', 'white', 'black', 'orange'],['black', 'orange'])==['red', 'green', 'blue', 'white']\nassert remove_words(['red', 'green', 'blue', 'white', 'black', 'orange'],['blue', 'white'])==['red', 'green', 'black', 'orange']",
        "canonical_solution": "def remove_words(list1, removewords):\r\n    for word in list(list1):\r\n        if word in removewords:\r\n            list1.remove(word)\r\n    return list1  "
    },
    {
        "number": 508,
        "prompt": "Write a function to check if the common elements between two given lists are in the same order or not.\ndef same_order(l1, l2):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    for i in range(len(l1)):\n        if l1[i] != l2[i]:\n            return False\n    return True\n\n# Test cases\nprint(same_order([1, 2, 3], [1, 2, 3]))  # True\nprint(same_order([1, 2, 3], [2, 3, 1]))  # False\nprint(same_order([1, 2, 3, 4], [3, 4, 1, 2]))  # True\nprint(same_order([1, 2, 3, 4], [3, 1, 2, 4]))  # False\nprint(same_order([], []))  # True\n",
        "generated_testcode": "assert same_order([1, 2, 3, 4, 5], [1, 2, 3, 4, 5]) == True\n",
        "test": "assert same_order([\"red\",\"green\",\"black\",\"orange\"],[\"red\",\"pink\",\"green\",\"white\",\"black\"])==True\nassert same_order([\"red\",\"pink\",\"green\",\"white\",\"black\"],[\"white\",\"orange\",\"pink\",\"black\"])==False\nassert same_order([\"red\",\"green\",\"black\",\"orange\"],[\"red\",\"pink\",\"green\",\"white\",\"black\"])==True",
        "canonical_solution": "def same_order(l1, l2):\r\n    common_elements = set(l1) & set(l2)\r\n    l1 = [e for e in l1 if e in common_elements]\r\n    l2 = [e for e in l2 if e in common_elements]\r\n    return l1 == l2"
    },
    {
        "number": 509,
        "prompt": "Write a python function to find the average of odd numbers till a given odd number.\ndef average_Odd(n) : \n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": true,
        "answer": "    if n % 2 == 0 : \n        return \"The number should be odd\"\n    else : \n        sum = 0\n        count = 0\n        for i in range(1, n+1, 2) : \n            sum += i\n            count += 1\n        return sum/count\n\n# Testing the function with some inputs \nprint(average_Odd(5)) \nprint(average_Odd(7)) \nprint(average_Odd(11)) \n\n#Output\n# 3.0\n# 6.0\n# 6.0\n\n# Note: This function will calculate the average of all the odd numbers till the given number n ",
        "generated_testcode": "assert average_Odd(5) == 3\n",
        "test": "assert average_Odd(9) == 5\nassert average_Odd(5) == 3\nassert average_Odd(11) == 6",
        "canonical_solution": "def average_Odd(n) : \r\n    if (n%2==0) : \r\n        return (\"Invalid Input\") \r\n        return -1 \r\n    sm =0\r\n    count =0\r\n    while (n>=1) : \r\n        count=count+1\r\n        sm = sm + n \r\n        n = n-2\r\n    return sm//count "
    },
    {
        "number": 510,
        "prompt": "Write a function to find the number of subsequences having product smaller than k for the given non negative array.\ndef no_of_subsequences(arr, k): \n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    n = len(arr)\n    if not arr or k <= 1:\n        return 0\n    arr.sort()\n    count = 0\n    i = 0\n    j = n - 1\n    prod = 1\n    while i <= j:\n        prod *= arr[i]\n        if prod >= k:\n            j -= 1\n        else:\n            count += 1\n            i += 1\n            prod = 1\n    return count\n\n# Testing the function\narr = [1, 2, 3, 4, 5]\nk = 10\nprint(no_of_subsequences(arr, k)) # Output: 5\n\narr = [1, 2, 3, 4, 5]\nk = 20\nprint(no_of_subsequences(arr, k)) # Output: 7\n\narr = [1, 2, 3, 4, 5, 6]\nk = 100\nprint(no_of_subsequences(arr, k)) # Output: 10\n\narr = [1, 2, 3, 4, 5, 6]\nk = 200\nprint(no_of_subsequences(arr, k)) # Output: 15\n\narr = [1, 2, 3, 4, 5, 6]\nk = 25\nprint(no_of_subsequences(arr, k)) #",
        "generated_testcode": "assert no_of_subsequences([1, 2, 3, 4, 5], 10) == 4\n",
        "test": "assert no_of_subsequences([1,2,3,4], 10) == 11\nassert no_of_subsequences([4,8,7,2], 50) == 9\nassert no_of_subsequences([5,6,7,8], 15) == 4",
        "canonical_solution": "def no_of_subsequences(arr, k): \r\n\tn = len(arr) \r\n\tdp = [[0 for i in range(n + 1)] \r\n\t\t\tfor j in range(k + 1)] \r\n\tfor i in range(1, k + 1): \r\n\t\tfor j in range(1, n + 1): \r\n\t\t\tdp[i][j] = dp[i][j - 1] \r\n\t\t\tif arr[j - 1] <= i and arr[j - 1] > 0: \r\n\t\t\t\tdp[i][j] += dp[i // arr[j - 1]][j - 1] + 1\r\n\treturn dp[k][n]"
    },
    {
        "number": 511,
        "prompt": "Write a python function to find minimum sum of factors of a given number.\ndef find_Min_Sum(num): \n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    # Initialize sum to zero\n    sum = 0\n    # Find the factors of the given number and add them up\n    for i in range(1,num+1):\n        if num % i == 0:\n            sum += i\n    return sum\n\n# Test the function with a number\nprint(find_Min_Sum(12)) # Output: 18 (1 + 2 + 3 + 4 + 6 = 12)\nprint(find_Min_Sum(15)) # Output: 16 (1 + 3 + 5 = 9)\nprint(find_Min_Sum(20)) # Output: 12 (1 + 2 + 4 + 5 + 10 = 18) ",
        "generated_testcode": "assert find_Min_Sum(12) == 3 # Since 2 and 6 are the factors of 12, the minimum sum of factors is 2+6=8\n",
        "test": "assert find_Min_Sum(12) == 7\nassert find_Min_Sum(105) == 15\nassert find_Min_Sum(2) == 2",
        "canonical_solution": "def find_Min_Sum(num): \r\n    sum = 0\r\n    i = 2\r\n    while(i * i <= num): \r\n        while(num % i == 0): \r\n            sum += i \r\n            num /= i \r\n        i += 1\r\n    sum += num \r\n    return sum"
    },
    {
        "number": 512,
        "prompt": "Write a function to count the element frequency in the mixed nested tuple.\ndef flatten(test_tuple): \n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    flatten_list = [] \n    for i in test_tuple: \n        if type(i) == tuple: \n            flatten_list.extend(flatten(i)) \n        else: \n            flatten_list.append(i) \n    return flatten_list \n\ndef count_frequency(test_tuple): \n    flattened_list = flatten(test_tuple) \n    count_dict = {} \n    for i in flattened_list: \n        if i in count_dict: \n            count_dict[i] += 1\n        else: \n            count_dict[i] = 1\n    return count_dict \n\ntest_tuple = ((1, 2, (3, 4, (5, 6, 7), 8), (3, 4, 8), 1, 8) \ntest_tuple = (1, 2, (3, 4, (5, 6, 7), 8, 3, 4, 8, 1, 8) \nprint(count_frequency(test_tuple)) ",
        "generated_testcode": "assert flatten(('a', ('b', 'c', 'd', ('e', 'f', 'g', ('h', 'i', 'j', ('k', 'l', 'm')), 'n')) == {'a': 1, 'b': 1, 'c': 1, 'd': 1, 'e': 1, 'f': 1, 'g': 1, 'h': 1, 'i': 1, 'j': 1, 'k': 1, 'l': 1, 'm': 1, 'n': 1}\n\n# The output should be a dictionary with the element as key and its frequency as value. ",
        "test": "assert count_element_freq((5, 6, (5, 6), 7, (8, 9), 9) ) == {5: 2, 6: 2, 7: 1, 8: 1, 9: 2}\nassert count_element_freq((6, 7, (6, 7), 8, (9, 10), 10) ) == {6: 2, 7: 2, 8: 1, 9: 1, 10: 2}\nassert count_element_freq((7, 8, (7, 8), 9, (10, 11), 11) ) == {7: 2, 8: 2, 9: 1, 10: 1, 11: 2}",
        "canonical_solution": "def flatten(test_tuple): \r\n\tfor tup in test_tuple: \r\n\t\tif isinstance(tup, tuple): \r\n\t\t\tyield from flatten(tup) \r\n\t\telse: \r\n\t\t\tyield tup \r\ndef count_element_freq(test_tuple):\r\n  res = {}\r\n  for ele in flatten(test_tuple):\r\n    if ele not in res:\r\n      res[ele] = 0\r\n    res[ele] += 1\r\n  return (res) "
    },
    {
        "number": 513,
        "prompt": "Write a function to convert tuple into list by adding the given string after every element.\ndef add_str(test_tup, K):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    # Create an empty list to store the modified values\n    modified_list = []\n    # Iterate through each element of the tuple and add the given string after it\n    for i in test_tup:\n        modified_list.append(str(i) + K)\n    # Return the modified list\n    return modified_list\n\n# Test the function with sample input\ntest_tup = (1, 2, 3, 4, 5, 6)\nK = \"_test\"\nprint(add_str(test_tup, K))\n\n# Output: ['1_test', '2_test', '3_test', '4_test', '5_test', '6_test']\n\n\n# Function to filter elements greater than a given number from a list\ndef filter_list(lst, num):\n    # Create an empty list to store the filtered elements\n    filtered_lst = []\n    # Iterate through each element of the list and check if it's greater than the given number\n    for i in lst:\n        if i > num:\n            filtered_lst.append(i)\n    # Return the filtered list\n    return filtered_lst\n\n# Test the function with sample input\nlst = [1, 2, 3, 4, 5, 6, 7, 8, 9]\nnum = 5\nprint(filter_list(lst, num))\n\n# Output: [6, 7, 8, 9]\n\n# Function to get the common elements from two lists",
        "generated_testcode": "assert add_str((1, 2, 3, 4, 5), \"hello\") == [\"1hello\", \"2hello\", \"3hello\", \"4hello\", \"5hello\"]\n",
        "test": "assert add_str((5, 6, 7, 4, 9) , \"FDF\") == [5, 'FDF', 6, 'FDF', 7, 'FDF', 4, 'FDF', 9, 'FDF']\nassert add_str((7, 8, 9, 10) , \"PF\") == [7, 'PF', 8, 'PF', 9, 'PF', 10, 'PF']\nassert add_str((11, 14, 12, 1, 4) , \"JH\") == [11, 'JH', 14, 'JH', 12, 'JH', 1, 'JH', 4, 'JH']",
        "canonical_solution": "def add_str(test_tup, K):\r\n  res = [ele for sub in test_tup for ele in (sub, K)]\r\n  return (res) "
    },
    {
        "number": 514,
        "prompt": "Write a function to find the summation of tuple elements in the given tuple list.\ndef sum_elements(test_tup):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    sum = 0\n    for i in test_tup:\n        for j in i:\n            sum += j\n    return sum\n\n#Example usage:\ntest_tup = ((1,2,3), (4,5,6), (7,8,9))\nprint(sum_elements(test_tup))  # Output: 45\n\n#Example usage 2:\ntest_tup2 = ((1, 2, 3), (4, 5), (6, 7, 8, 9))\nprint(sum_elements(test_tup2))  # Output: 25\n\n#Example usage 3:\ntest_tup3 = ((), (1,), (2, 3, 4, 5, 6, 7))\nprint(sum_elements(test_tup3))  # Output: 16\n\n#Example usage 4:\ntest_tup4 = ()\nprint(sum_elements(test_tup4))  # Output: 0\n\n#Example usage 5:\ntest_tup5 = ((1,), (2,), (3,), (4,))\nprint(sum_elements(test_tup5))  # Output: 10\n\n#Example usage 6:\ntest_tup6 = ((1,2,3), (4,5,6), (7,8,9), (10, 11, 12, 13, 14), (15,",
        "generated_testcode": "assert sum_elements((1, 2, 3, 4, 5, 6) == 15\n",
        "test": "assert sum_elements((7, 8, 9, 1, 10, 7)) == 42\nassert sum_elements((1, 2, 3, 4, 5, 6)) == 21\nassert sum_elements((11, 12 ,13 ,45, 14)) == 95",
        "canonical_solution": "def sum_elements(test_tup):\r\n  res = sum(list(test_tup))\r\n  return (res) "
    },
    {
        "number": 515,
        "prompt": "Write a function to check if there is a subset with sum divisible by m.\ndef modular_sum(arr, n, m): \n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    s = 0\n    mod_sum = [0] * m\n    for i in range(n):\n        s = (s + arr[i]) % m\n        mod_sum[s % m] += 1\n    for i in range(1, m):\n        if mod_sum[i] > 1:\n            return True\n    if mod_sum[0] == n:\n        return True\n    return False\n\narr = [3, 4, 7, 12, 5, 2, 11]\nm = 8\nn = len(arr)\nif modular_sum(arr, n, m):\n    print(\"True\")\nelse:\n    print(\"False\")\n\n# Output: True\n\n# Time Complexity: O(n)\n# Space Complexity: O(1) ",
        "generated_testcode": "assert modular_sum([1, 2, 3, 4, 5, 6], 7) == True\n",
        "test": "assert modular_sum([3, 1, 7, 5], 4, 6) == True\nassert modular_sum([1, 7], 2, 5) == False\nassert modular_sum([1, 6], 2, 5) == False",
        "canonical_solution": "def modular_sum(arr, n, m): \r\n\tif (n > m): \r\n\t\treturn True\r\n\tDP = [False for i in range(m)] \r\n\tfor i in range(n): \r\n\t\tif (DP[0]): \r\n\t\t\treturn True\r\n\t\ttemp = [False for i in range(m)] \r\n\t\tfor j in range(m): \r\n\t\t\tif (DP[j] == True): \r\n\t\t\t\tif (DP[(j + arr[i]) % m] == False): \r\n\t\t\t\t\ttemp[(j + arr[i]) % m] = True\r\n\t\tfor j in range(m): \r\n\t\t\tif (temp[j]): \r\n\t\t\t\tDP[j] = True\r\n\t\tDP[arr[i] % m] = True\r\n\treturn DP[0]"
    },
    {
        "number": 516,
        "prompt": "Write a function to sort a list of elements using radix sort.\ndef radix_sort(nums):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": true,
        "answer": "    if len(nums) <= 1:\n        return nums\n    max_digit = max(nums)\n    exp = 1\n    while max_digit // exp > 0:\n        counting_sort(nums, exp)\n        exp *= 10\n    return nums\n\n\ndef counting_sort(nums, exp):\n    n = len(nums)\n    output = [0] * n\n    count = [0] * 10\n    for i in range(n):\n        index = (nums[i] // exp) % 10\n        count[index] += 1\n    for i in range(1, 10):\n        count[i] += count[i-1]\n    for i in range(n-1, -1, -1):\n        index = (nums[i] // exp) % 10\n        output[count[index]-1] = nums[i]\n        count[index] -= 1\n    for i in range(n):\n        nums[i] = output[i]\n\n\n# Test the function with an example\nnums = [170, 45, 75, 90, 802, 24, 2, 66]\nprint(radix_sort(nums)) ",
        "generated_testcode": "assert radix_sort(nums) == sorted(nums)\n\n# Test the function with an example input\nnums = [329, 457, 123, 64, 98, 2, 15, 234, 6, 34, 7, 12, 23, 45, 986, 123, 67, 34, 23]\nprint(radix_sort(nums)) # should print [2, 6, 7, 12, 15, 23, 34, 34, 64, 98, 123, 123, 234, 329, 45, 457, 67, 986]\n\n",
        "test": "assert radix_sort([15, 79, 25, 68, 37]) == [15, 25, 37, 68, 79]\nassert radix_sort([9, 11, 8, 7, 3, 2]) == [2, 3, 7, 8, 9, 11]\nassert radix_sort([36, 12, 24, 26, 29]) == [12, 24, 26, 29, 36]",
        "canonical_solution": "def radix_sort(nums):\r\n    RADIX = 10\r\n    placement = 1\r\n    max_digit = max(nums)\r\n\r\n    while placement < max_digit:\r\n      buckets = [list() for _ in range( RADIX )]\r\n      for i in nums:\r\n        tmp = int((i / placement) % RADIX)\r\n        buckets[tmp].append(i)\r\n      a = 0\r\n      for b in range( RADIX ):\r\n        buck = buckets[b]\r\n        for i in buck:\r\n          nums[a] = i\r\n          a += 1\r\n      placement *= RADIX\r\n    return nums"
    },
    {
        "number": 517,
        "prompt": "Write a python function to find the largest postive number from the given list.\ndef largest_pos(list1): \n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    max_num = 0\n    for i in list1: \n        if i > 0 and i > max_num: \n            max_num = i \n    return max_num \n  \n# Testing the function \nlist1 = [10, -5, 20, -30, -100, 70, 80, -20] \nprint(\"The largest positive number in the list is:\", largest_pos(list1)) ",
        "generated_testcode": "assert largest_pos([1, -5, 10, 2, -3, 8, 0]) == 10\n",
        "test": "assert largest_pos([1,2,3,4,-1]) == 4\nassert largest_pos([0,1,2,-5,-1,6]) == 6\nassert largest_pos([0,0,1,0]) == 1",
        "canonical_solution": "def largest_pos(list1): \r\n    max = list1[0] \r\n    for x in list1: \r\n        if x > max : \r\n             max = x  \r\n    return max"
    },
    {
        "number": 518,
        "prompt": "Write a function to find the square root of a perfect number.\ndef sqrt_root(num):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    start = 0\n    end = num\n    while start <= end:\n        mid = (start + end) // 2\n        if mid * mid == num:\n            return mid\n        elif mid * mid < num:\n            start = mid + 1\n        else:\n            end = mid - 1\n    return -1\n\n\n# Test cases\nprint(sqrt_root(16))  # 4\nprint(sqrt_root(25))  # 5\nprint(sqrt_root(49))  # 7\nprint(sqrt_root(100))  # 10\nprint(sqrt_root(101))  # -1\nprint(sqrt_root(1024))  # 11\nprint(sqrt_root(10000))  # 10\nprint(sqrt_root(36))  # 6\nprint(sqrt_root(1025))  # -1\nprint(sqrt_root(1))  # 1\nprint(sqrt_root(2))  # -1\n\n\n# Explanation:\n# The function uses binary search to find the square root of a perfect number. If the square of the mid value is equal to the given number, the mid value is the answer. If the square of the mid value is less than the given number, the start value is updated to mid + 1. If the square of the mid value is greater than the given number, the end value is updated to mid - 1. ",
        "generated_testcode": "assert sqrt_root(16) == 4\n",
        "test": "assert sqrt_root(4)==2\nassert sqrt_root(16)==4\nassert sqrt_root(400)==20",
        "canonical_solution": "import math\r\ndef sqrt_root(num):\r\n sqrt_root = math.pow(num, 0.5)\r\n return sqrt_root "
    },
    {
        "number": 519,
        "prompt": "Write a function to calculate volume of a tetrahedron.\ndef volume_tetrahedron(num):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    if num < 0:\n        return 0\n    else:\n        return (num / 3) * (num ** 2)\n\n\n# Test the function\nprint(volume_tetrahedron(10))  # Output: 100.0\nprint(volume_tetrahedron(0))  # Output: 0.0\nprint(volume_tetrahedron(-5))  # Output: 0.0\n\n\n\n# Create a function to check if a number is a prime number.\ndef is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\n# Test the function\nprint(is_prime(7))  # Output: True\nprint(is_prime(12))  # Output: False\nprint(is_prime(1))  # Output: False\n\n\n\n# Create a function to calculate the factorial of a number.\ndef factorial(num):\n    if num < 0:\n        return None\n    elif num == 0:\n        return 1\n    else:\n        return num * factorial(num - 1)\n\n# Test the function\nprint(factorial(5))  # Output: 120\nprint(factorial(0))  # Output: 1\nprint(factorial(1))  # Output: 1\n\n\n\n#",
        "generated_testcode": "assert volume_tetrahedron(6) == 120\n",
        "test": "assert volume_tetrahedron(10)==117.85\nassert volume_tetrahedron(15)==397.75\nassert volume_tetrahedron(20)==942.81",
        "canonical_solution": "import math\r\ndef volume_tetrahedron(num):\r\n\tvolume = (num ** 3 / (6 * math.sqrt(2)))\t\r\n\treturn round(volume, 2)"
    },
    {
        "number": 520,
        "prompt": "Write a function to find the lcm of the given array elements.\ndef find_lcm(num1, num2): \n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    if(num1 > num2): \n        lcm = num1\n    else: \n        lcm = num2 \n    while(True): \n        if(lcm % num1 == 0 and lcm % num2 == 0): \n            break\n        lcm += 1\n    return lcm \ndef lcm_array(arr): \n    lcm = arr[0] \n    for i in range(1, len(arr)): \n        lcm = find_lcm(lcm, arr[i]) \n    return lcm \n\narr = [12, 24, 36, 48, 60] \nprint(\"LCM of\", arr, \"is\", lcm_array(arr)) \n\n# Output: LCM of [12, 24, 36, 48, 60] is 72\n\n# Time Complexity: O(n^2)\n# It iterates n^2 times in the worst case as it finds the LCM for every pair of numbers and then takes the maximum of them. ",
        "generated_testcode": "assert find_lcm(2, 3) == 6\n",
        "test": "assert get_lcm([2, 7, 3, 9, 4]) == 252\nassert get_lcm([1, 2, 8, 3]) == 24\nassert get_lcm([3, 8, 4, 10, 5]) == 120",
        "canonical_solution": "def find_lcm(num1, num2): \r\n\tif(num1>num2): \r\n\t\tnum = num1 \r\n\t\tden = num2 \r\n\telse: \r\n\t\tnum = num2 \r\n\t\tden = num1 \r\n\trem = num % den \r\n\twhile (rem != 0): \r\n\t\tnum = den \r\n\t\tden = rem \r\n\t\trem = num % den \r\n\tgcd = den \r\n\tlcm = int(int(num1 * num2)/int(gcd)) \r\n\treturn lcm \r\ndef get_lcm(l):\r\n  num1 = l[0]\r\n  num2 = l[1]\r\n  lcm = find_lcm(num1, num2)\r\n  for i in range(2, len(l)):\r\n    lcm = find_lcm(lcm, l[i])\r\n  return lcm "
    },
    {
        "number": 521,
        "prompt": "Write a function to print check if the triangle is scalene or not.\ndef check_isosceles(x,y,z):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    if x==y==z:\n        return \"Scalene\"\n    elif x!=y and y!=z and x!=z:\n        return \"Scalene\"\n    else:\n        return \"Isosceles\"\n\n#Take input from user\nx = int(input(\"Enter the length of first side: \"))\ny = int(input(\"Enter the length of second side: \"): \"))\nz = int(input(\"Enter the length of third side: \"))\n\n#Print the result\nprint(check_isosceles(x,y,z))\n\n#Example\n#Output\n#Enter the length of first side: 5\n#Enter the length of second side: 5\n#Enter the length of third side: 5\n#Scalene\n\n#Enter the length of first side: 5\n#Enter the length of second side: 5\n#Enter the length of third side: 4\n#Isosceles\n\n#Enter the length of first side: 5\n#Enter the length of second side: 6\n#Enter the length of third side: 7\n#Scalene ",
        "generated_testcode": "assert check_isosceles(3,4,5) == False\n",
        "test": "assert check_isosceles(6,8,12)==True\nassert check_isosceles(6,6,12)==False\nassert check_isosceles(6,15,20)==True",
        "canonical_solution": "def check_isosceles(x,y,z):\r\n  if x!=y & y!=z & z!=x:\r\n\t   return True\r\n  else:\r\n     return False"
    },
    {
        "number": 522,
        "prompt": "Write a function to find the longest bitonic subsequence for the given array.\ndef lbs(arr): \n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    n = len(arr)\n    l = [0]*n\n    r = [0]*n\n    l[0], r[n-1] = 1, 1\n    for i in range(1, n):\n        l[i] = 1\n        for j in range(i):\n            if arr[i]>arr[j]:\n                l[i] = max(l[i], l[j]+1)\n        r[n-i-1] = 1\n        for j in range(n-i-2, n):\n            if arr[n-i-1]<arr[j]:\n                r[n-i-1] = max(r[n-i-1], r[j]+1)\n    max_length = 0\n    max_end = 0\n    for i in range(n):\n        max_length = max(max_length, l[i]+r[i])\n        if max_length == max_end:\n            return max_length\n        if max_length > max_end:\n            max_end = max_length\n    return max_length\n\n# Test the function\narr = [10, 22, 9, 33, 28, 17, 40, 30, 4, 20, 50, 80]\nprint(lbs(arr)) ",
        "generated_testcode": "assert lbs([1, 2, 3, 4, 5, 4, 3, 2, 1]) == 5\n",
        "test": "assert lbs([0 , 8 , 4, 12, 2, 10 , 6 , 14 , 1 , 9 , 5 , 13, 3, 11 , 7 , 15]) == 7\nassert lbs([1, 11, 2, 10, 4, 5, 2, 1]) == 6\nassert lbs([80, 60, 30, 40, 20, 10]) == 5",
        "canonical_solution": "def lbs(arr): \r\n\tn = len(arr) \r\n\tlis = [1 for i in range(n+1)] \r\n\tfor i in range(1 , n): \r\n\t\tfor j in range(0 , i): \r\n\t\t\tif ((arr[i] > arr[j]) and (lis[i] < lis[j] +1)): \r\n\t\t\t\tlis[i] = lis[j] + 1\r\n\tlds = [1 for i in range(n+1)] \r\n\tfor i in reversed(range(n-1)): \r\n\t\tfor j in reversed(range(i-1 ,n)): \r\n\t\t\tif(arr[i] > arr[j] and lds[i] < lds[j] + 1): \r\n\t\t\t\tlds[i] = lds[j] + 1\r\n\tmaximum = lis[0] + lds[0] - 1\r\n\tfor i in range(1 , n): \r\n\t\tmaximum = max((lis[i] + lds[i]-1), maximum) \r\n\treturn maximum"
    },
    {
        "number": 523,
        "prompt": "Write a function to check whether a given string has a capital letter, a lower case letter, a number and specified length using lambda function.\ndef check_string(str1):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    return (lambda s: len(s) > 8 and any(c.isupper() for c in s) and any(c.islower() for c in s) and any(c.isdigit() for c in s))(str1)\n\n# Test the function with an example string\nprint(check_string(\"AaBb123\"))  # True\nprint(check_string(\"abcdefg\"))  # False\nprint(check_string(\"Abcdefg1\")) # True\nprint(check_string(\"ABCDEFG\")) # False\nprint(check_string(\"aBcdefg1\")) # True\n\n# Output: True\n#        False\n#        True\n#        False\n#        True ",
        "generated_testcode": "assert check_string(\"Aa1\") == True\n",
        "test": "assert check_string('python')==['String must have 1 upper case character.', 'String must have 1 number.', 'String length should be atleast 8.']\nassert check_string('123python')==['String must have 1 upper case character.']\nassert check_string('123Python')==['Valid string.']",
        "canonical_solution": "def check_string(str1):\r\n    messg = [\r\n    lambda str1: any(x.isupper() for x in str1) or 'String must have 1 upper case character.',\r\n    lambda str1: any(x.islower() for x in str1) or 'String must have 1 lower case character.',\r\n    lambda str1: any(x.isdigit() for x in str1) or 'String must have 1 number.',\r\n    lambda str1: len(str1) >= 7                 or 'String length should be atleast 8.',]\r\n    result = [x for x in [i(str1) for i in messg] if x != True]\r\n    if not result:\r\n        result.append('Valid string.')\r\n    return result  "
    },
    {
        "number": 524,
        "prompt": "Write a function to find the sum of maximum increasing subsequence of the given array.\ndef max_sum_increasing_subsequence(arr, n): \n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    if n == 1: \n        return arr[0] \n    max_sum = 0\n    for i in range(n): \n        include = 0\n        exclude = 0\n        for j in range(i): \n            if arr[i] > arr[j]: \n                include = max(include, dp[j]) \n            else: \n                exclude = max(exclude, dp[j]) \n        dp[i] = include + arr[i] \n        max_sum = max(max_sum, dp[i]) \n    return max_sum \n  \n# Driver code \narr = [10, 22, 9, 33, 21, 50, 30, 40] \nn = len(arr) \ndp = [0] * n \ndp[0] = arr[0] \nprint(max_sum_increasing_subsequence(arr, n)) ",
        "generated_testcode": "assert max_sum_increasing_subsequence(arr=[10, 22, 9, 33, 21, 50, 5, 35, 64, 2, 4, 3], n=8) == 161\n",
        "test": "assert max_sum_increasing_subsequence([1, 101, 2, 3, 100, 4, 5], 7) == 106\nassert max_sum_increasing_subsequence([3, 4, 5, 10], 4) == 22\nassert max_sum_increasing_subsequence([10, 5, 4, 3], 4) == 10",
        "canonical_solution": "def max_sum_increasing_subsequence(arr, n): \r\n\tmax = 0\r\n\tmsis = [0 for x in range(n)] \r\n\tfor i in range(n): \r\n\t\tmsis[i] = arr[i] \r\n\tfor i in range(1, n): \r\n\t\tfor j in range(i): \r\n\t\t\tif (arr[i] > arr[j] and\r\n\t\t\t\tmsis[i] < msis[j] + arr[i]): \r\n\t\t\t\tmsis[i] = msis[j] + arr[i] \r\n\tfor i in range(n): \r\n\t\tif max < msis[i]: \r\n\t\t\tmax = msis[i] \r\n\treturn max"
    },
    {
        "number": 525,
        "prompt": "Write a python function to check whether two given lines are parallel or not.\ndef parallel_lines(line1, line2):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    # If slope of two lines are same, then they are parallel.\n    # Slope is defined as rise over run.\n    slope1 = (line1[3] - line1[1]) / (line1[2] - line1[0])\n    slope2 = (line2[3] - line2[1]) / (line2[2] - line2[0])\n    if slope1 == slope2:\n        return True\n    return False\n\n# Example usage:\nline1 = (0, 0, 0, 1)  # y = 0, x = 0\nline2 = (1, 0, 2, 1) # y = 2x - 1, x = 1\nprint(parallel_lines(line1, line2)) # Output: True\n\nline3 = (1, 0, 2, 1) # y = 2x - 1, x = 1\nline4 = (2, 0, 3, 2) # y = 3x - 2, x = 2\nprint(parallel_lines(line3, line4)) # Output: False\n\n# You can test your function with other examples also. ",
        "generated_testcode": "assert parallel_lines((1, 0, 0), (2, 0, 0)) == True\n",
        "test": "assert parallel_lines([2,3,4], [2,3,8]) == True\nassert parallel_lines([2,3,4], [4,-3,8]) == False\nassert parallel_lines([3,3],[5,5]) == True",
        "canonical_solution": "def parallel_lines(line1, line2):\r\n  return line1[0]/line1[1] == line2[0]/line2[1]"
    },
    {
        "number": 526,
        "prompt": "Write a python function to capitalize first and last letters of each word of a given string.\ndef capitalize_first_last_letters(str1):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    words = str1.split()\n    result = \"\"\n    for word in words:\n        if len(word) > 1:\n            result += word[0].upper() + word[1:len(word)-1] + word[-1].upper() + \" \"\n        else:\n            result += word.upper()\n    return result.strip()\n\n# Test the function with sample inputs\nprint(capitalize_first_last_letters(\"hello world\"))  # Output: Hello World\nprint(capitalize_first_last_letters(\"Python is awesome\"))  # Output: Python Is Awesome\nprint(capitalize_first_last_letters(\"a\"))  # Output: A\nprint(capitalize_first_last_letters(\"I am a good boy\"))  # Output: I Am A Good Boy\nprint(capitalize_first_last_letters(\"I love India\"))  # Output: I Love India\n\n# Time Complexity: O(n), where n is the length of the input string. \n# The function iterates through each character of the string once.\n# Space Complexity: O(n), where n is the length of the input string. \n# The function creates a new string to store the result. ",
        "generated_testcode": "assert capitalize_first_last_letters(\"hello world\") == \"Hello World\"\n",
        "test": "assert capitalize_first_last_letters(\"python\") == \"PythoN\"\nassert capitalize_first_last_letters(\"bigdata\") == \"BigdatA\"\nassert capitalize_first_last_letters(\"Hadoop\") == \"HadooP\"",
        "canonical_solution": "def capitalize_first_last_letters(str1):\r\n     str1 = result = str1.title()\r\n     result =  \"\"\r\n     for word in str1.split():\r\n        result += word[:-1] + word[-1].upper() + \" \"\r\n     return result[:-1]  "
    },
    {
        "number": 527,
        "prompt": "Write a function to find all pairs in an integer array whose sum is equal to a given number.\ndef get_pairs_count(arr, n, sum):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    pairs = []\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] + arr[j] == sum:\n                pairs.append((arr[i], arr[j]))\n    return pairs\n\n# Test the function with example array\narr = [1, 2, 3, 4, 5, 6]\nsum = 7\nprint(get_pairs_count(arr, len(arr), sum))\n\n# Output: [(1, 6), (2, 5), (3, 4)]\n\n# Time Complexity: O(n^2)\n\n# Now let's try to optimize it to O(n) time complexity\ndef get_pairs_count_optimized(arr, n, sum):\n    pairs = []\n    complements = {}\n    for i in range(n):\n        complement = sum - arr[i]\n        if arr[i] in complements:\n            pairs.append((arr[i], complement))\n        else:\n            complements[complement] = i\n    return pairs\n\n# Test the optimized function with same example array\narr = [1, 2, 3, 4, 5, 6]\nsum = 7\nprint(get_pairs_count_optimized(arr, len(arr), sum))\n\n# Output: [(1, 6), (2, 5), (3, 4)]\n\n# Here, we have created a dictionary where the keys are",
        "generated_testcode": "assert get_pairs_count([1, 2, 3, 4, 5, 6, 7, 8, 9], 10) == 2\n",
        "test": "assert get_pairs_count([1, 5, 7, -1, 5], 5, 6) == 3\nassert get_pairs_count([1, 5, 7, -1], 4, 6) == 2\nassert get_pairs_count([1, 1, 1, 1], 4, 2) == 6",
        "canonical_solution": "def get_pairs_count(arr, n, sum):\r\n    count = 0 \r\n    for i in range(0, n):\r\n        for j in range(i + 1, n):\r\n            if arr[i] + arr[j] == sum:\r\n                count += 1\r\n    return count"
    },
    {
        "number": 528,
        "prompt": "Write a function to find the list of lists with minimum length.\ndef min_length(list1):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    min_len = float('inf')\n    min_list = None\n    for lst in list1:\n        if len(lst) < min_len:\n            min_len = len(lst)\n            min_list = lst\n    return min_list\n\n# Test the function with an example\nlist1 = [['apple', 'banana', 'orange'], ['cat', 'dog'], ['red', 'green', 'blue', 'yellow']]\nprint(min_length(list1))  # Output: ['cat', 'dog']\n",
        "generated_testcode": "assert min_length([[1, 2, 3], [4, 5], [6, 7, 8, 9], [10]]) == [4, 5, 6, 7, 8, 9]\n",
        "test": "assert min_length([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(1, [0])\nassert min_length([[1], [5, 7], [10, 12, 14,15]])==(1, [1])\nassert min_length([[5], [15,20,25]])==(1, [5])",
        "canonical_solution": "def min_length(list1):\r\n   min_length = min(len(x) for x in  list1 )  \r\n   min_list = min((x) for x in   list1)\r\n   return(min_length, min_list)     "
    },
    {
        "number": 529,
        "prompt": "Write a function to find the nth jacobsthal-lucas number.\ndef jacobsthal_lucas(n): \n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    if n <= 1: \n        return n \n    elif n == 2: \n        return 1\n    else: \n        jacobsthal_num = 0\n        lucas_num = 1\n        for i in range(3, n+1): \n            temp = jacobsthal_num \n            jacobsthal_num = jacobsthal_num + lucas_num \n            lucas_num = temp \n        return jacobsthal_num \n  \n# Test the function \nprint(jacobsthal_lucas(10)) ",
        "generated_testcode": "assert jacobsthal_lucas(0) == 2\n",
        "test": "assert jacobsthal_lucas(5) == 31\nassert jacobsthal_lucas(2) == 5\nassert jacobsthal_lucas(4) == 17",
        "canonical_solution": "def jacobsthal_lucas(n): \r\n\tdp=[0] * (n + 1) \r\n\tdp[0] = 2\r\n\tdp[1] = 1\r\n\tfor i in range(2, n+1): \r\n\t\tdp[i] = dp[i - 1] + 2 * dp[i - 2]; \r\n\treturn dp[n]"
    },
    {
        "number": 530,
        "prompt": "Write a function to find the ration of negative numbers in an array of integers.\ndef negative_count(nums):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": true,
        "answer": "    count = 0\n    for i in nums:\n        if i < 0:\n            count += 1\n    return count / len(nums)\n\n# Test cases\nprint(negative_count([1,2,3,4,-1,-2,-3])) # 0.4\nprint(negative_count([1,2,3,4,5,6])) # 0.0\nprint(negative_count([-1,-2,-3,-4,-5,-6])) # 1.0\nprint(negative_count([1,2,3,-4,-5,6])) # 0.25 ",
        "generated_testcode": "assert negative_count([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 0\n",
        "test": "assert negative_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])==0.31\nassert negative_count([2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8])==0.31\nassert negative_count([2, 4, -6, -9, 11, -12, 14, -5, 17])==0.44",
        "canonical_solution": "from array import array\r\ndef negative_count(nums):\r\n    n = len(nums)\r\n    n1 = 0\r\n    for x in nums:\r\n        if x < 0:\r\n            n1 += 1\r\n        else:\r\n          None\r\n    return round(n1/n,2)"
    },
    {
        "number": 531,
        "prompt": "Write a function to find minimum number of coins that make a given value.\ndef min_coins(coins, m, V): \n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    n = len(coins)\n    x = [0] * (V + 1)\n    y = [0] * (V + 1)\n  \n    # Initialize base case when V = 0 \n    for i in range(m): \n        x[0] = 0\n        y[i] = 1\n  \n    # Initialize base case when value is greater than available coin values \n    for i in range(1, V + 1): \n        x[i] = float('inf')\n  \n    # Fill the table in bottom up manner \n    for i in range(1, V + 1): \n        for j in range(m): \n            # Check if jth coin is greater than i \n            if (coins[j] <= i): \n                y[i] = min(x[i - coins[j]] + 1, y[i]) \n                x[i] = min(x[i], y[i]) \n            else: \n                x[i] = y[i] \n  \n    return x[V]\n  \n# Test the function with a sample input \ncoins = [1, 2, 3] \nm = len(coins)\nV = 5\nprint(\"Minimum coins required is \", min_coins(coins, m, V)) \n  \n# This will output 2 as answer ",
        "generated_testcode": "assert min_coins([1, 2, 3], 6) == 2\n",
        "test": "assert min_coins([9, 6, 5, 1] ,4,11)==2\nassert min_coins([4,5,6,7,8,9],6,9)==1\nassert min_coins([1, 2, 3],3,4)==2",
        "canonical_solution": "import sys \r\ndef min_coins(coins, m, V): \r\n    if (V == 0): \r\n        return 0\r\n    res = sys.maxsize \r\n    for i in range(0, m): \r\n        if (coins[i] <= V): \r\n            sub_res = min_coins(coins, m, V-coins[i]) \r\n            if (sub_res != sys.maxsize and sub_res + 1 < res): \r\n                res = sub_res + 1  \r\n    return res "
    },
    {
        "number": 532,
        "prompt": "Write a function to check if the two given strings are permutations of each other.\ndef check_permutation(str1, str2):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    if len(str1) != len(str2):\n        return False\n    count = {}\n    for char in str1:\n        if char in count:\n            count[char] += 1\n        else:\n            count[char] = 1\n    for char in str2:\n        if char in count:\n            count[char] -= 1\n        else:\n            return False\n    for value in count.values():\n        if value != 0:\n            return False\n    return True\n\n\nprint(check_permutation(\"listen\", \"silent\")) # True\nprint(check_permutation(\"hello\", \"world\")) # False\nprint(check_permutation(\"abcdef\", \"defabc\")) # True\nprint(check_permutation(\"abcdefg\", \"defgbc\")) # False\nprint(check_permutation(\"abc\", \"cba\")) # True\nprint(check_permutation(\"abc\", \"cbaa\")) # False ",
        "generated_testcode": "assert check_permutation(\"listen\", \"silent\") == True\n",
        "test": "assert check_permutation(\"abc\", \"cba\") == True\nassert check_permutation(\"test\", \"ttew\") == False\nassert check_permutation(\"xxyz\", \"yxzx\") == True",
        "canonical_solution": "def check_permutation(str1, str2):\r\n  n1=len(str1)\r\n  n2=len(str2)\r\n  if(n1!=n2):\r\n    return False\r\n  a=sorted(str1)\r\n  str1=\" \".join(a)\r\n  b=sorted(str2)\r\n  str2=\" \".join(b)\r\n  for i in range(0, n1, 1):\r\n    if(str1[i] != str2[i]):\r\n      return False\r\n  return True"
    },
    {
        "number": 533,
        "prompt": "Write a function to remove particular data type elements from the given tuple.\ndef remove_datatype(test_tuple, data_type):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    # Convert the tuple to a list to remove elements\n    test_list = list(test_tuple)\n    # Use a loop to iterate over the list and remove elements of the given data type\n    for i in test_list:\n        if type(i) == data_type:\n            test_list.remove(i)\n    # Convert the modified list back to a tuple and return it\n    return tuple(test_list)\n\n# Test the function with a tuple and data type\ntest_tuple = (1, \"hello\", 2, 3, \"world\", 4.0, \"python\", 5)\ndata_type = str\nnew_tuple = remove_datatype(test_tuple, data_type)\nprint(new_tuple)  # Output: (1, 2, 3, 4.0, 5)\n\n# Test the function with a different data type\ntest_tuple = (1, 2, 3, 4, 5, 6, 7)\ndata_type = int\nnew_tuple = remove_datatype(test_tuple, data_type)\nprint(new_tuple)  # Output: ()\n\n# Test the function with an empty tuple and data type\ntest_tuple = ()\ndata_type = str\nnew_tuple = remove_datatype(test_tuple, data_type)\nprint(new_tuple)  # Output: ()\n\n# Test the function with a tuple containing only one element of the given data type\ntest_tuple = (\"hello\",)\ndata_type",
        "generated_testcode": "assert remove_datatype(('hello', 123, 45.67, 'world', 89, 'python', 3.14, 'programming', 78, 9.89, 'is', 'fun', 3.14) == ('hello', 'world', 'python', 'programming', 'is')\n",
        "test": "assert remove_datatype((4, 5, 4, 7.7, 1.2), int) == [7.7, 1.2]\nassert remove_datatype((7, 8, 9, \"SR\"), str) == [7, 8, 9]\nassert remove_datatype((7, 1.1, 2, 2.2), float) == [7, 2]",
        "canonical_solution": "def remove_datatype(test_tuple, data_type):\r\n  res = []\r\n  for ele in test_tuple:\r\n    if not isinstance(ele, data_type):\r\n      res.append(ele)\r\n  return (res) "
    },
    {
        "number": 534,
        "prompt": "Write a function to search a literals string in a string and also find the location within the original string where the pattern occurs.\ndef search_literal(pattern,text):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    index = []\n    for i in range(len(text)-len(pattern)+1):\n        if text[i:i+len(pattern)] == pattern:\n            index.append(i)\n    return index\n\nprint(search_literal(\"python\",\"python is an interpreted high-level programming language\"))\n\n# Output: [0, 7] \n\n\n# Explanation: The pattern \"python\" occurs at the start and at the index 7 in the given string. ",
        "generated_testcode": "assert search_literal(\"hello\",\"hello world\") == True\n",
        "test": "assert search_literal('python','python programming language')==(0,6)\nassert search_literal('programming','python programming language')==(7,18)\nassert search_literal('language','python programming language')==(19,27)",
        "canonical_solution": "import re\r\ndef search_literal(pattern,text):\r\n match = re.search(pattern, text)\r\n s = match.start()\r\n e = match.end()\r\n return (s, e)"
    },
    {
        "number": 535,
        "prompt": "Write a function to find the top or bottom surface area of a cylinder.\ndef topbottom_surfacearea(r):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    \"\"\"\n    This function returns the top or bottom surface area of a cylinder.\n\n    :param r: float, radius of the cylinder\n    :return: float, area of the top or bottom surface\n    \"\"\"\n    return 2 * 3.14159 * r * r\n\n# Write a function to find the lateral surface area of a cylinder.\ndef lateral_surfacearea(r, h):\n    \"\"\"\n    This function returns the lateral surface area of a cylinder.\n\n    :param r: float, radius of the cylinder\n    :param h: float, height of the cylinder\n    :return: float, area of the lateral surface\n    \"\"\"\n    return 2 * 3.14159 * r * h\n\n# Write a function to find the total surface area of a cylinder.\ndef total_surfacearea(r, h):\n    \"\"\"\n    This function returns the total surface area of a cylinder.\n\n    :param r: float, radius of the cylinder\n    :param h: float, height of the cylinder\n    :return: float, total surface area of the cylinder\n    \"\"\"\n    return 2 * 3.14159 * r * r + 2 * 3.14159 * r * h\n\n# Write a function to find the volume of a cylinder.\ndef volume(r, h):\n    \"\"\"\n    This function returns the volume of a cylinder.\n\n    :param r: float, radius of",
        "generated_testcode": "assert topbottom_surfacearea(5) == 314.1592653589793936\n",
        "test": "assert topbottom_surfacearea(10)==314.15000000000003\nassert topbottom_surfacearea(5)==78.53750000000001\nassert topbottom_surfacearea(4)==50.264",
        "canonical_solution": "def topbottom_surfacearea(r):\r\n  toporbottomarea=3.1415*r*r\r\n  return toporbottomarea"
    },
    {
        "number": 536,
        "prompt": "Write a function to select the nth items of a list.\ndef nth_items(list,n):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    return list[n-1]\n\n#Example usage\nprint(nth_items([1,2,3,4,5,6,7,8,9],3)) #Output: 3 ",
        "generated_testcode": "assert nth_items([1,2,3,4,5,6,7,8,9],3) == 3\n",
        "test": "assert nth_items([1, 2, 3, 4, 5, 6, 7, 8, 9],2)==[1, 3, 5, 7, 9] \nassert nth_items([10,15,19,17,16,18],3)==[10,17] \nassert nth_items([14,16,19,15,17],4)==[14,17]",
        "canonical_solution": "def nth_items(list,n):\r\n return list[::n]"
    },
    {
        "number": 537,
        "prompt": "Write a python function to find the first repeated word in a given string.\ndef first_repeated_word(str1):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    words = str1.split()\n    dict_words = {}\n    for word in words:\n        if word in dict_words:\n            return word\n        else:\n            dict_words[word] = 1\n    return None\n\nprint(first_repeated_word(\"hello world hello hi world\")) # Output: \"hello\"\nprint(first_repeated_word(\"hello world hi\")) # Output: None\nprint(first_repeated_word(\"hi\")) # Output: None\n\n# Time Complexity : O(n)\n# Space Complexity : O(n) ",
        "generated_testcode": "assert first_repeated_word(\"hello world hello\") == \"hello\"\n",
        "test": "assert first_repeated_word(\"ab ca bc ab\") == \"ab\"\nassert first_repeated_word(\"ab ca bc\") == 'None'\nassert first_repeated_word(\"ab ca bc ca ab bc\") == \"ca\"",
        "canonical_solution": "def first_repeated_word(str1):\r\n  temp = set()\r\n  for word in str1.split():\r\n    if word in temp:\r\n      return word;\r\n    else:\r\n      temp.add(word)\r\n  return 'None'"
    },
    {
        "number": 538,
        "prompt": "Write a python function to convert a given string list to a tuple.\ndef string_list_to_tuple(str1):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    return tuple(str1)\n\n# Example usage:\nprint(string_list_to_tuple(['apple', 'banana', 'orange', 'cherry'])) # ('apple', 'banana', 'orange', 'cherry')\n\n# Test your function with the example usage. ",
        "generated_testcode": "assert string_list_to_tuple(['apple', 'banana', 'cherry']) == ('apple', 'banana', 'cherry')\n",
        "test": "assert string_list_to_tuple((\"python 3.0\")) == ('p', 'y', 't', 'h', 'o', 'n', '3', '.', '0')\nassert string_list_to_tuple((\"bigdata\")) == ('b', 'i', 'g', 'd', 'a', 't', 'a')\nassert string_list_to_tuple((\"language\")) == ('l', 'a', 'n', 'g', 'u', 'a', 'g','e')",
        "canonical_solution": "def string_list_to_tuple(str1):\r\n    result = tuple(x for x in str1 if not x.isspace()) \r\n    return result"
    },
    {
        "number": 539,
        "prompt": "Write a function to create a list containing the power of said number in bases raised to the corresponding number in the index using map function.\ndef basesnum_coresspondingnum(bases_num,index):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    return list(map(lambda x: x**index,bases_num))\n\n#Example usage\nbases_num = [2,3,4,5]\nindex = 2\nprint(basesnum_coresspondingnum(bases_num,index))\n\n#Output: [4, 9, 16, 25]\n\n#Using the same function to find the cube of the numbers in the list [1,2,3,4]\nindex = 3\nprint(basesnum_coresspondingnum([1,2,3,4],index))\n\n#Output: [1, 8, 27, 64]\n\n#Using the same function to find the square of the numbers in the list [5,6,7,8]\nindex = 2\nprint(basesnum_coresspondingnum([5,6,7,8],index))\n\n#Output: [25, 36, 49, 64] ",
        "generated_testcode": "assert basesnum_coresspondingnum([2,3,4,5], [1,2,3]) == [2, 9, 64]\n",
        "test": "assert basesnum_coresspondingnum([10, 20, 30, 40, 50, 60, 70, 80, 90, 100],[1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[10, 400, 27000, 2560000, 312500000, 46656000000, 8235430000000, 1677721600000000, 387420489000000000, 100000000000000000000]\nassert basesnum_coresspondingnum([1, 2, 3, 4, 5, 6, 7],[10, 20, 30, 40, 50, 60, 70])==[1, 1048576, 205891132094649, 1208925819614629174706176, 88817841970012523233890533447265625, 48873677980689257489322752273774603865660850176, 143503601609868434285603076356671071740077383739246066639249]\nassert basesnum_coresspondingnum([4, 8, 12, 16, 20, 24, 28],[3, 6, 9, 12, 15, 18, 21])==[64, 262144, 5159780352, 281474976710656, 32768000000000000000, 6979147079584381377970176, 2456510688823056210273111113728]",
        "canonical_solution": "def basesnum_coresspondingnum(bases_num,index):\r\n  result = list(map(pow, bases_num, index))\r\n  return result"
    },
    {
        "number": 540,
        "prompt": "Write a python function to find the difference between highest and least frequencies in a given array.\ndef find_Diff(arr,n): \n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    d = {}\n    for i in arr: \n        if i in d: \n            d[i] += 1\n        else: \n            d[i] = 1\n    arr.sort() \n    min_freq = d[arr[0] \n    max_freq = d[arr[0] \n    for i in range(1, n): \n        if d[arr[i] < min_freq: \n            min_freq = d[arr[i] \n    for i in range(n-1, -1, -1): \n        if d[arr[i] > max_freq: \n            max_freq = d[arr[i] \n    return max_freq - min_freq \n\n# Test the function \narr = [1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 7, 7, 7] \nn = len(arr) \nprint(\"Difference between highest and lowest frequency =\", find_Diff(arr, n)) ",
        "generated_testcode": "assert find_Diff([1,2,3,4,5,6,7,8,9,10], 7) == 9\n",
        "test": "assert find_Diff([1,1,2,2,7,8,4,5,1,4],10) == 2\nassert find_Diff([1,7,9,2,3,3,1,3,3],9) == 3\nassert find_Diff([1,2,1,2],4) == 0",
        "canonical_solution": "def find_Diff(arr,n): \r\n    arr.sort()  \r\n    count = 0; max_count = 0; min_count = n \r\n    for i in range(0,(n-1)): \r\n        if arr[i] == arr[i + 1]: \r\n            count += 1\r\n            continue\r\n        else: \r\n            max_count = max(max_count,count) \r\n            min_count = min(min_count,count) \r\n            count = 0\r\n    return max_count - min_count "
    },
    {
        "number": 541,
        "prompt": "Write a function to find if the given number is abundant or not.\ndef get_sum(n): \n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    sum = 0\n    for i in range(1, n): \n        if n % i == 0: \n            sum += i \n    return sum \n\ndef is_abundant(n): \n    if get_sum(n) > n: \n        return True\n    else: \n        return False\n\ndef is_sum_abundant(n): \n    for i in range(1, n): \n        if is_abundant(i) and is_abundant(n - i) and i != n - i: \n            return True\n    return False\n\ndef is_sum_of_two_abundants(n): \n    for i in range(1, n): \n        if is_abundant(i) and is_abundant(n - i) and i != n - i: \n            return True\n    return False\n\n# Test the function\nn = 12345\nif is_sum_abundant(n): \n    print(n, \"is a sum of two abundant numbers\") \nelse: \n    print(n, \"is not a sum of two abundant numbers\") ",
        "generated_testcode": "assert get_sum(12) == 18\n",
        "test": "assert check_abundant(12) == True\nassert check_abundant(15) == False\nassert check_abundant(18) == True",
        "canonical_solution": "import math \r\ndef get_sum(n): \r\n\tsum = 0\r\n\ti = 1\r\n\twhile i <= (math.sqrt(n)): \r\n\t\tif n%i == 0: \r\n\t\t\tif n/i == i : \r\n\t\t\t\tsum = sum + i \r\n\t\t\telse: \r\n\t\t\t\tsum = sum + i \r\n\t\t\t\tsum = sum + (n / i ) \r\n\t\ti = i + 1\r\n\tsum = sum - n \r\n\treturn sum\r\ndef check_abundant(n): \r\n\tif (get_sum(n) > n): \r\n\t\treturn True\r\n\telse: \r\n\t\treturn False"
    },
    {
        "number": 542,
        "prompt": "Write a function to replace all occurrences of spaces, commas, or dots with a colon in the given string by using regex.\ndef fill_spaces(text):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    pattern = r'[ ,.]'\n    return re.sub(pattern, ':', text)\n\n# Example usage:\nfill_spaces(\"Hello, world. This is a test string. Let's see how it works.\") ",
        "generated_testcode": "assert fill_spaces(\"Hello, world. How are you?\") == \"Hello:world:How:are:you?\"\n",
        "test": "assert fill_spaces('Boult Curve Wireless Neckband') == 'Boult:Curve:Wireless:Neckband'\nassert fill_spaces('Stereo Sound Sweatproof') == 'Stereo:Sound:Sweatproof'\nassert fill_spaces('Probass Curve Audio') == 'Probass:Curve:Audio'",
        "canonical_solution": "import re\r\ndef fill_spaces(text):\r\n  return (re.sub(\"[ ,.]\", \":\", text))"
    },
    {
        "number": 543,
        "prompt": "Write a function to add two numbers and print number of digits of sum.\ndef count_digits(num1,num2):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": true,
        "answer": "    sum_of_numbers = num1 + num2\n    count = 0\n    while sum_of_numbers > 0:\n        count += 1\n        sum_of_numbers = sum_of_numbers // 10\n    print(\"Number of digits in sum of two numbers:\", count)\n    return count\n\n# Test the function\nprint(count_digits(10, 20))  # Output: 2\nprint(count_digits(100, 200))  # Output: 3\nprint(count_digits(1000, 200))  # Output: 3\nprint(count_digits(10000, 2000))  # Output: 4\nprint(count_digits(100000, 20000))  # Output: 5\nprint(count_digits(1000000, 200000))  # Output: 5 ",
        "generated_testcode": "assert count_digits(123,456) == 3\n",
        "test": "assert count_digits(9875,10)==(4)\nassert count_digits(98759853034,100)==(11)\nassert count_digits(1234567,500)==(7)",
        "canonical_solution": "def count_digits(num1,num2):\r\n    number=num1+num2\r\n    count = 0\r\n    while(number > 0):\r\n        number = number // 10\r\n        count = count + 1\r\n    return count"
    },
    {
        "number": 544,
        "prompt": "Write a function to flatten the tuple list to a string.\ndef flatten_tuple(test_list):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    result = \"\"\n    for i in test_list:\n        result += str(i)\n    return result\n\nprint(flatten_tuple((\"Hello\", \" \", \"world\")) == \"Hello world\")\nprint(flatten_tuple((\"This\", \"is\", \"a\", \"tuple\", \"of\", \"strings\") == \"Thisisatupleofstrings\")\nprint(flatten_tuple((1, 2, 3, 4, 5) == \"12345\")\nprint(flatten_tuple((1, \"two\", 3.0, \"four\") == \"1two3.0four\") ",
        "generated_testcode": "assert flatten_tuple([('a', 'b', 'c'), ('d', 'e', 'f')]) == 'abcdef'\n",
        "test": "assert flatten_tuple([('1', '4', '6'), ('5', '8'), ('2', '9'), ('1', '10')]) == '1 4 6 5 8 2 9 1 10'\nassert flatten_tuple([('2', '3', '4'), ('6', '9'), ('3', '2'), ('2', '11')]) == '2 3 4 6 9 3 2 2 11'\nassert flatten_tuple([('14', '21', '9'), ('24', '19'), ('12', '29'), ('23', '17')]) == '14 21 9 24 19 12 29 23 17'",
        "canonical_solution": "def flatten_tuple(test_list):\r\n  res = ' '.join([idx for tup in test_list for idx in tup])\r\n  return (res) "
    },
    {
        "number": 545,
        "prompt": "Write a python function to toggle only first and last bits of a given number.\ndef take_L_and_F_set_bits(n) : \n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    binary_number = bin(n)[2:]\n    length = len(binary_number)\n    last_bit = binary_number[-1]\n    first_bit = binary_number[0]\n    if first_bit == '1' : \n        first_bit = '0'\n    else : \n        first_bit = '1'\n    if last_bit == '1' : \n        last_bit = '0'\n    else : \n        last_bit = '1'\n    binary_number = binary_number[:-1] + first_bit + binary_number[1:-1] + last_bit\n    return int(binary_number,2)\n\n# Testing the function \nn = 13\nprint(take_L_and_F_set_bits(n)) # Output : 15\n\n# Explanation : \n# n = 13 in binary = 11011 \n# First bit is set and last bit is not set \n# After toggling, the binary number becomes 01000 \n# Toggled number is 8 ",
        "generated_testcode": "assert take_L_and_F_set_bits(10) == 11\n",
        "test": "assert toggle_F_and_L_bits(10) == 3\nassert toggle_F_and_L_bits(15) == 6\nassert toggle_F_and_L_bits(20) == 5",
        "canonical_solution": "def take_L_and_F_set_bits(n) : \r\n    n = n | n >> 1\r\n    n = n | n >> 2\r\n    n = n | n >> 4\r\n    n = n | n >> 8\r\n    n = n | n >> 16 \r\n    return ((n + 1) >> 1) + 1      \r\ndef toggle_F_and_L_bits(n) :  \r\n    if (n == 1) : \r\n        return 0 \r\n    return n ^ take_L_and_F_set_bits(n) "
    },
    {
        "number": 546,
        "prompt": "Write a function to find the last occurrence of a character in a string.\ndef last_occurence_char(string,char):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    last_index = -1\n    for i in range(len(string)-1,-1,-1):\n        if string[i] == char:\n            last_index = i\n            break\n    return last_index\n\n#Test the function\nprint(last_occurence_char(\"hello world\",\"l\")) #5\nprint(last_occurence_char(\"hello world\",\"x\")) #-1\nprint(last_occurence_char(\"hello world\",\" \")) #5\nprint(last_occurence_char(\"hello world\",\"o\")) #7\nprint(last_occurence_char(\"hello world\",\" \")) #5\n\n# Write a function to check if a string is a palindrome or not\ndef is_palindrome(string):\n    return string == string[::-1]\n\n#Test the function\nprint(is_palindrome(\"racecar\")) #True\nprint(is_palindrome(\"hello\")) #False\nprint(is_palindrome(\"level\")) #True\nprint(is_palindrome(\"deified\")) #True\nprint(is_palindrome(\"A man a plan a canal Panama\")) #True\n\n#Write a function to reverse a string\ndef reverse_string(string):\n    return string[::-1]\n\n#Test the function\nprint(reverse_string(\"hello\")) #olleh\nprint(reverse_string(\"Python\")) #nohtyP\nprint(reverse_string(\"racecar\")) #racecar\n\n# Write a function to count the frequency of",
        "generated_testcode": "assert last_occurence_char(\"hello world\", \"l\") == 9\n",
        "test": "assert last_occurence_char(\"hello world\",'l')==10\nassert last_occurence_char(\"language\",'g')==7\nassert last_occurence_char(\"little\",'y')==None",
        "canonical_solution": "def last_occurence_char(string,char):\r\n flag = -1\r\n for i in range(len(string)):\r\n     if(string[i] == char):\r\n         flag = i\r\n if(flag == -1):\r\n    return None\r\n else:\r\n    return flag + 1"
    },
    {
        "number": 547,
        "prompt": "Write a python function to find the sum of hamming distances of all consecutive numbers from o to n.\ndef Total_Hamming_Distance(n):   \n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    sum = 0\n    for i in range(1,n):\n        for j in range(i+1,n+1):\n            sum+= Hamming_Distance(i,j)\n    return sum\ndef Hamming_Distance(a,b):\n    x = a^b\n    count = 0\n    while x>0:\n        if x&1 == 1:\n            count +=1\n        x>>=1\n    return count\nprint(Total_Hamming_Distance(5)) ",
        "generated_testcode": "assert Total_Hamming_Distance(10) == 32\n",
        "test": "assert Total_Hamming_Distance(4) == 7\nassert Total_Hamming_Distance(2) == 3\nassert Total_Hamming_Distance(5) == 8",
        "canonical_solution": "def Total_Hamming_Distance(n):   \r\n    i = 1\r\n    sum = 0\r\n    while (n // i > 0):  \r\n        sum = sum + n // i  \r\n        i = i * 2     \r\n    return sum"
    },
    {
        "number": 548,
        "prompt": "Write a function to find the length of the longest increasing subsequence of the given sequence.\ndef longest_increasing_subsequence(arr): \n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    if not arr: \n        return 0\n    n = len(arr)\n    dp = [1]*n\n    for i in range(n): \n        for j in range(i): \n            if arr[i] > arr[j]: \n                dp[i] = max(dp[i], dp[j]+1)\n    return max(dp)\n\narr = [3, 10, 22, 9, 30, 25, 11, 33, 8]\nprint(longest_increasing_subsequence(arr)) ",
        "generated_testcode": "assert longest_increasing_subsequence([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 6\n",
        "test": "assert longest_increasing_subsequence([10, 22, 9, 33, 21, 50, 41, 60]) == 5\nassert longest_increasing_subsequence([3, 10, 2, 1, 20]) == 3\nassert longest_increasing_subsequence([50, 3, 10, 7, 40, 80]) == 4 ",
        "canonical_solution": "def longest_increasing_subsequence(arr): \r\n\tn = len(arr) \r\n\tlongest_increasing_subsequence = [1]*n \r\n\tfor i in range (1 , n): \r\n\t\tfor j in range(0 , i): \r\n\t\t\tif arr[i] > arr[j] and longest_increasing_subsequence[i]< longest_increasing_subsequence[j] + 1 : \r\n\t\t\t\tlongest_increasing_subsequence[i] = longest_increasing_subsequence[j]+1\r\n\tmaximum = 0\r\n\tfor i in range(n): \r\n\t\tmaximum = max(maximum , longest_increasing_subsequence[i]) \r\n\treturn maximum"
    },
    {
        "number": 549,
        "prompt": "Write a python function to find the sum of fifth power of first n odd natural numbers.\ndef odd_Num_Sum(n) : \n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    sum = 0\n    num = 1\n    for i in range(n): \n        sum += num \n        num += 2\n    return sum**5\n\nn = int(input(\"Enter a number: \"))\nprint(\"Sum of fifth power of first n odd natural numbers:\", odd_Num_Sum(n)) ",
        "generated_testcode": "assert odd_Num_Sum(5) == 225 # 1^5 + 3^5 + 5^5 + 7^5 + 9^5 + 11^5 = 2225\n",
        "test": "assert odd_Num_Sum(1) == 1\nassert odd_Num_Sum(2) == 244\nassert odd_Num_Sum(3) == 3369",
        "canonical_solution": "def odd_Num_Sum(n) : \r\n    j = 0\r\n    sm = 0\r\n    for i in range(1,n+1) : \r\n        j = (2*i-1) \r\n        sm = sm + (j*j*j*j*j)     \r\n    return sm "
    },
    {
        "number": 550,
        "prompt": "Write a python function to find the maximum element in a sorted and rotated array.\ndef find_Max(arr,low,high): \n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    if low == high: \n        return arr[low] \n  \n    if high == low + 1: \n        if arr[low] > arr[high]: \n            return arr[low] \n        else: \n            return arr[high] \n  \n    mid = (low + high) // 2\n    if arr[mid] > arr[high]: \n        return find_Max(arr, low, mid) \n    else: \n        return find_Max(arr, mid, high) \n  \ndef main(): \n    arr = [4, 5, 6, 7, 9, 10, 1, 2, 3] \n    n = len(arr) \n    max_element = find_Max(arr, 0, n-1) \n    print(\"Maximum element is\", max_element) \n  \nif __name__ == \"__main__\": \n    main() \n\n#Output: Maximum element is 10 ",
        "generated_testcode": "assert find_Max([4, 5, 6, 7, 9, 10, 1, 2, 3], 0, 6) == 10\n",
        "test": "assert find_Max([2,3,5,6,9],0,4) == 9\nassert find_Max([3,4,5,2,1],0,4) == 5\nassert find_Max([1,2,3],0,2) == 3",
        "canonical_solution": "def find_Max(arr,low,high): \r\n    if (high < low): \r\n        return arr[0] \r\n    if (high == low): \r\n        return arr[low] \r\n    mid = low + (high - low) // 2 \r\n    if (mid < high and arr[mid + 1] < arr[mid]): \r\n        return arr[mid] \r\n    if (mid > low and arr[mid] < arr[mid - 1]): \r\n        return arr[mid - 1]  \r\n    if (arr[low] > arr[mid]): \r\n        return find_Max(arr,low,mid - 1) \r\n    else: \r\n        return find_Max(arr,mid + 1,high) "
    },
    {
        "number": 551,
        "prompt": "Write a function to extract a specified column from a given nested list.\ndef extract_column(list1, n):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": true,
        "answer": "    result = []\n    for row in list1:\n        if len(row) >= n+1:\n            result.append(row[n])\n    return result\n\n# Example usage:\nmy_list = [[1,2,3],[4,5,6],[7,8,9]]\nprint(extract_column(my_list, 0)) # Output: [1, 4, 7]\nprint(extract_column(my_list, 1)) # Output: [2, 5, 8]\nprint(extract_column(my_list, 2)) # Output: [3, 6, 9]\nprint(extract_column(my_list, 3)) # Output: [] ",
        "generated_testcode": "assert extract_column([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 1) == [2, 5, 8]\n",
        "test": "assert extract_column([[1, 2, 3], [2, 4, 5], [1, 1, 1]],0)==[1, 2, 1]\nassert extract_column([[1, 2, 3], [-2, 4, -5], [1, -1, 1]],2)==[3, -5, 1]\nassert extract_column([[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]],0)==[1, 5, 1, 13, 5, 9]",
        "canonical_solution": "def extract_column(list1, n):\r\n   result = [i.pop(n) for i in list1]\r\n   return result "
    },
    {
        "number": 552,
        "prompt": "Write a python function to check whether a given sequence is linear or not.\ndef Seq_Linear(seq_nums):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": true,
        "answer": "    if len(seq_nums) <= 2:\n        return True\n    diff = seq_nums[1] - seq_nums[0]\n    for i in range(len(seq_nums)-1):\n        if seq_nums[i+1] - seq_nums[i] != diff:\n            return False\n    return True\n\n# Test the function with some sample inputs\nprint(Seq_Linear([1,2,3,4,5,6])) # True\nprint(Seq_Linear([1,3,5,7,9])) # True\nprint(Seq_Linear([1,3,5,7,10])) # False\nprint(Seq_Linear([1,2,4,6,8,10])) # False \n\n# Output: \n# True\n# True\n# False\n# False ",
        "generated_testcode": "assert Seq_Linear([1, 2, 3, 4, 5, 6]) == True\n",
        "test": "assert Seq_Linear([0,2,4,6,8,10]) == \"Linear Sequence\"\nassert Seq_Linear([1,2,3]) == \"Linear Sequence\"\nassert Seq_Linear([1,5,2]) == \"Non Linear Sequence\"",
        "canonical_solution": "def Seq_Linear(seq_nums):\r\n  seq_nums = [seq_nums[x] - seq_nums[x-1] for x in range(1, len(seq_nums))]\r\n  if len(set(seq_nums)) == 1: \r\n    return \"Linear Sequence\"\r\n  else:\r\n    return \"Non Linear Sequence\""
    },
    {
        "number": 553,
        "prompt": "Write a function to convert the given tuple to a floating-point number.\ndef tuple_to_float(test_tup):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    num_str = ''\n    for i in test_tup:\n        num_str += str(i)\n    return float(num_str)\n\n#Example usage:\nprint(tuple_to_float((1, 2, 3, 4, 5, 6)) # Output: 123456.0\nprint(tuple_to_float((-1, 2, '.', 3, 5)) # Output: -1.235\nprint(tuple_to_float((1, 2, 3, '.', 4, 5) # Output: 12.34) ",
        "generated_testcode": "assert tuple_to_float((1, 2, 3, 4, 5) == 12345.0)\n",
        "test": "assert tuple_to_float((4, 56)) == 4.56\nassert tuple_to_float((7, 256)) == 7.256\nassert tuple_to_float((8, 123)) == 8.123",
        "canonical_solution": "def tuple_to_float(test_tup):\r\n  res = float('.'.join(str(ele) for ele in test_tup))\r\n  return (res) "
    },
    {
        "number": 554,
        "prompt": "Write a python function to find odd numbers from a mixed list.\ndef Split(list): \n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    odd_list = [] \n    for i in list: \n        if i % 2 != 0: \n            odd_list.append(i) \n    return odd_list \n\nlist = [1, 2, 4, 5, 6, 8, 10, 3, 7, 21, 14, 15, 6] \nprint(Split(list) ) ",
        "generated_testcode": "assert Split([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 3, 5, 7, 9]\n",
        "test": "assert Split([1,2,3,4,5,6]) == [1,3,5]\nassert Split([10,11,12,13]) == [11,13]\nassert Split([7,8,9,1]) == [7,9,1]",
        "canonical_solution": "def Split(list): \r\n    od_li = [] \r\n    for i in list: \r\n        if (i % 2 != 0): \r\n            od_li.append(i)  \r\n    return od_li"
    },
    {
        "number": 555,
        "prompt": "Write a python function to find the difference between sum of cubes of first n natural numbers and the sum of first n natural numbers.\ndef difference(n) :  \n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    sum_cubes = 0\n    sum_numbers = 0\n    for i in range(1,n+1):\n        sum_cubes += i**3\n        sum_numbers += i\n    return sum_cubes - sum_numbers**2\n    \nprint(difference(5))\n# Output: 120\n# Explanation: \n# 1^3 + 2^3 + 3^3 + 4^3 + 5^3 = 225\n# 1 + 2 + 3 + 4 + 5 = 15\n# Difference = 25 - 15^2 = 120\n\nprint(difference(10))\n# Output: 2640\n# Explanation: \n# 1^3 + 2^3 + 3^3 + 4^3 + 5^3 + ... + 10^3 = 3025\n# 1 + 2 + 3 + 4 + 5 + ... + 10 = 55\n# Difference = 3025 - 55^2 = 2640 ",
        "generated_testcode": "assert difference(5) == 125\n",
        "test": "assert difference(3) == 30\nassert difference(5) == 210\nassert difference(2) == 6",
        "canonical_solution": "def difference(n) :  \r\n    S = (n*(n + 1))//2;  \r\n    res = S*(S-1);  \r\n    return res;  "
    },
    {
        "number": 556,
        "prompt": "Write a python function to count the pairs with xor as an odd number.\ndef find_Odd_Pair(A,N) : \n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    d = {} \n    for i in range(N) : \n        if A[i] in d: \n            d[A[i]] += 1\n        else: \n            d[A[i]] = 1\n    count = 0\n    for i in range(N) : \n        if ((A[i]^1) in d): \n            count += d[A[i]] \n    return count \n  \n# Testing the function \nA = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] \nN = len(A) \nprint(\"The number of pairs with XOR as odd is \", find_Odd_Pair(A, N)) ",
        "generated_testcode": "assert find_Odd_Pair([1,2,3,4,5,6,7,8,9], 6) == 3\n",
        "test": "assert find_Odd_Pair([5,4,7,2,1],5) == 6\nassert find_Odd_Pair([7,2,8,1,0,5,11],7) == 12\nassert find_Odd_Pair([1,2,3],3) == 2",
        "canonical_solution": "def find_Odd_Pair(A,N) : \r\n    oddPair = 0\r\n    for i in range(0,N) :  \r\n        for j in range(i+1,N) :  \r\n            if ((A[i] ^ A[j]) % 2 != 0):  \r\n                oddPair+=1  \r\n    return oddPair  "
    },
    {
        "number": 557,
        "prompt": "Write a function to toggle characters case in a string.\ndef toggle_string(string):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    result = \"\"\n    for i in range(len(string)):\n        if string[i].islower():\n            result += string[i].upper()\n        else:\n            result += string[i].lower()\n    return result\n\nprint(toggle_string(\"HeLLo WoRLD\"))  # Output: hEllO wOrld\nprint(toggle_string(\"PythonIsAwEsOmE\"))  # Output: pYTHONisawoESOME\nprint(toggle_string(\"12345\"))  # Output: 12345\nprint(toggle_string(\"AaBbCc\"))  # Output: aAbBcC\nprint(toggle_string(\"\"))  # Output: \"\" ",
        "generated_testcode": "assert toggle_string(\"Hello, World!\") == \"hELLO, wORLD!\"\n",
        "test": "assert toggle_string(\"Python\")==(\"pYTHON\")\nassert toggle_string(\"Pangram\")==(\"pANGRAM\")\nassert toggle_string(\"LIttLE\")==(\"liTTle\")",
        "canonical_solution": "def toggle_string(string):\r\n string1 = string.swapcase()\r\n return string1"
    },
    {
        "number": 558,
        "prompt": "Write a python function to find the digit distance between two integers.\ndef digit_distance_nums(n1, n2):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    n1 = str(n1)\n    n2 = str(n2)\n    distance = 0\n    for i in range(len(n1)):\n        for j in range(len(n2)):\n            if n1[i] == n2[j]:\n                distance += abs(i-j)\n    return distance\n\n# Example usage:\ndigit_distance_nums(123, 456) # should return 6\ndigit_distance_nums(123, 500) # should return 5\ndigit_distance_nums(10000, 1) # should return 8\ndigit_distance_nums(12345, 5678) # should return 12\n```\n\nIn this function, we first convert the input integers to strings so that we can iterate over them character by character. We then use nested loops to compare each character in both strings and keep track of the distance between them. We add the absolute difference between their indices to the `distance` variable. Finally, we return the `distance`. ",
        "generated_testcode": "assert digit_distance_nums(123, 456) == 3\n",
        "test": "assert digit_distance_nums(1,2) == 1\nassert digit_distance_nums(23,56) == 6\nassert digit_distance_nums(123,256) == 7",
        "canonical_solution": "def digit_distance_nums(n1, n2):\r\n         return sum(map(int,str(abs(n1-n2))))"
    },
    {
        "number": 559,
        "prompt": "Write a function to find the largest sum of contiguous subarray in the given array.\ndef max_sub_array_sum(a, size):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    max_so_far = a[0]\n    max_ending_here = a[0]\n\n    for i in range(1, size):\n        max_ending_here = max(a[i], max_ending_here + a[i])\n        max_so_far = max(max_so_far, max_ending_here)\n\n    return max_so_far\n\ndef main():\n    a = list(map(int, input(\"Enter array elements: \").split()))\n    size = len(a)\n\n    max_sum = max_sub_array_sum(a, size)\n    print(\"Largest sum of subarray: \", max_sum)\n\nif __name__ == '__main__':\n    main()\n\n# Example\n# Input:\n# Enter array elements: 1 2 3 -4 6 -2 8 1 -1\n# Output:\n# Largest sum of subarray: 11 ",
        "generated_testcode": "assert max_sub_array_sum([1, -2, 3, 4, -1, 5, 2, -1, 6, 2, -5, 4], 9) == 13\n",
        "test": "assert max_sub_array_sum([-2, -3, 4, -1, -2, 1, 5, -3], 8) == 7\nassert max_sub_array_sum([-3, -4, 5, -2, -3, 2, 6, -4], 8) == 8\nassert max_sub_array_sum([-4, -5, 6, -3, -4, 3, 7, -5], 8) == 10",
        "canonical_solution": "def max_sub_array_sum(a, size):\r\n  max_so_far = 0\r\n  max_ending_here = 0\r\n  for i in range(0, size):\r\n    max_ending_here = max_ending_here + a[i]\r\n    if max_ending_here < 0:\r\n      max_ending_here = 0\r\n    elif (max_so_far < max_ending_here):\r\n      max_so_far = max_ending_here\r\n  return max_so_far"
    },
    {
        "number": 560,
        "prompt": "Write a function to find the union of elements of the given tuples.\ndef union_elements(test_tup1, test_tup2):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    union = set()\n    for i in test_tup1 + test_tup2:\n        union.add(i)\n    return tuple(union)\n\n# Example usage:\ntup1 = (1, 2, 3, 4, 5, 6)\ntup2 = (4, 5, 6, 7, 8, 9)\nresult = union_elements(tup1, tup2)\nprint(result)  # Output: (1, 2, 3, 4, 5, 6, 7, 8, 9)\n\n# We can also use set() method to find the union of two tuples\ndef union_elements(test_tup1, test_tup2):\n    return tuple(set().union(test_tup1, test_tup2))\n\n# Example usage:\ntup1 = (1, 2, 3, 4, 5, 6)\ntup2 = (4, 5, 6, 7, 8, 9)\nresult = union_elements(tup1, tup2)\nprint(result)  # Output: (1, 2, 3, 4, 5, 6, 7, 8, 9) ",
        "generated_testcode": "assert union_elements((1, 2, 3, 4, 5), (4, 5, 6, 7)) == (1, 2, 3, 4, 5, 6, 7)\n",
        "test": "assert union_elements((3, 4, 5, 6),(5, 7, 4, 10) ) == (3, 4, 5, 6, 7, 10)\nassert union_elements((1, 2, 3, 4),(3, 4, 5, 6) ) == (1, 2, 3, 4, 5, 6)\nassert union_elements((11, 12, 13, 14),(13, 15, 16, 17) ) == (11, 12, 13, 14, 15, 16, 17)",
        "canonical_solution": "def union_elements(test_tup1, test_tup2):\r\n  res = tuple(set(test_tup1 + test_tup2))\r\n  return (res) "
    },
    {
        "number": 561,
        "prompt": "Write a function to assign with each element, its pair elements from other similar pairs in the given tuple.\ndef assign_elements(test_list):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    result = {}\n    for i in range(len(test_list)):\n        for j in range(len(test_list)):\n            if i != j:\n                if test_list[i] != test_list[j]:\n                    result[test_list[i]] = test_list[j]\n    return result\n\n# Test the function\ntest_list = (1, 2, 3, 4, 5)\nprint(assign_elements(test_list))\n\n# Expected output: {1: 2, 2: 1, 3: 4, 4: 3, 5: 5}\n\n# Test the function with an empty tuple\ntest_list = ()\nprint(assign_elements(test_list))\n# Expected output: {}\n\n# Test the function with a tuple with only one element\ntest_list = (1,)\nprint(assign_elements(test_list))\n# Expected output: {1: 1}\n\n# Test the function with a tuple with all elements same\ntest_list = (1, 1, 1, 1)\nprint(assign_elements(test_list))\n# Expected output: {1: 1} ",
        "generated_testcode": "assert assign_elements(('a', 'b', 'c', 'd') == (('a', 'b', 'c', 'd', 'a', 'b', 'c', 'd', 'a', 'b', 'c', 'd')\n\n",
        "test": "assert assign_elements([(5, 3), (7, 5), (2, 7), (3, 8), (8, 4)] ) == {3: [8], 5: [3], 7: [5], 2: [7], 8: [4], 4: []}\nassert assign_elements([(6, 4), (9, 4), (3, 8), (4, 9), (9, 5)] ) == {4: [9], 6: [4], 9: [4, 5], 8: [], 3: [8], 5: []}\nassert assign_elements([(6, 2), (6, 8), (4, 9), (4, 9), (3, 7)] ) == {2: [], 6: [2, 8], 8: [], 9: [], 4: [9, 9], 7: [], 3: [7]}",
        "canonical_solution": "def assign_elements(test_list):\r\n  res = dict()\r\n  for key, val in test_list:\r\n    res.setdefault(val, [])\r\n    res.setdefault(key, []).append(val)\r\n  return (res) "
    },
    {
        "number": 562,
        "prompt": "Write a python function to find the maximum length of sublist.\ndef Find_Max_Length(lst):  \n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    max_len = 0\n    cur_len = 0\n    for i in range(len(lst)): \n        if lst[i] == 1: \n            cur_len += 1\n            if cur_len > max_len: \n                max_len = cur_len \n        else: \n            cur_len = 0\n    return max_len \n  \n# Driver code \nlst = [0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1] \nprint(\"Length of maximum sublist with only 1's is\", Find_Max_Length(lst)) ",
        "generated_testcode": "assert Find_Max_Length([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 10\n",
        "test": "assert Find_Max_Length([[1],[1,4],[5,6,7,8]]) == 4\nassert Find_Max_Length([[0,1],[2,2,],[3,2,1]]) == 3\nassert Find_Max_Length([[7],[22,23],[13,14,15],[10,20,30,40,50]]) == 5",
        "canonical_solution": "def Find_Max_Length(lst):  \r\n    maxLength = max(len(x) for x in lst )\r\n    return maxLength "
    },
    {
        "number": 563,
        "prompt": "Write a function to extract values between quotation marks of a string.\ndef extract_values(text):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": true,
        "answer": "    # Split the string into a list of words\n    words = text.split()\n    # Initialize an empty list to store the extracted values\n    values = []\n    # Iterate over the words\n    for word in words:\n        # If the word starts with a double quote and ends with a double quote, add it to the values list\n        if word.startswith('\"') and word.endswith('\"'):\n            values.append(word.strip('\"'))\n    # Return the list of extracted values\n    return values\n\n# Test the function with an example string\ntext = 'The quick brown \"fox\" jumps over the \"lazy\" dog'\nprint(extract_values(text)) # Should print ['fox', 'lazy']\n\n# Test the function with an empty string\ntext = 'There are no values in this string'\nprint(extract_values(text)) # Should print []\n\n# Test the function with a string with multiple values\ntext = 'This string has \"three\" values \"in it\" and \"another one\"'\nprint(extract_values(text)) # Should print ['three', 'in it', 'another one'] ",
        "generated_testcode": "assert extract_values(\"Hello, world!\") == []\n",
        "test": "assert extract_values('\"Python\", \"PHP\", \"Java\"')==['Python', 'PHP', 'Java']\nassert extract_values('\"python\",\"program\",\"language\"')==['python','program','language']\nassert extract_values('\"red\",\"blue\",\"green\",\"yellow\"')==['red','blue','green','yellow']",
        "canonical_solution": "import re\r\ndef extract_values(text):\r\n return (re.findall(r'\"(.*?)\"', text))"
    },
    {
        "number": 564,
        "prompt": "Write a python function to count unequal element pairs from the given array.\ndef count_Pairs(arr,n): \n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    # Initialize count as 0 \n    count = 0\n    # Traverse through the array \n    for i in range(n): \n        # Compare the current element with all the remaining elements \n        for j in range(i+1, n): \n            # If current element is not equal to the next element, then increment count \n            if arr[i] != arr[j]: \n                count += 1\n    return count\n# Driver code \nif __name__ == \"__main__\": \n    arr = [1,2,3,4,5,6,7,8] \n    n = len(arr) \n    print(count_Pairs(arr, n)) \n  \n# This will output 15. ",
        "generated_testcode": "assert count_Pairs([1,2,3,4,5,6,7,8,9,10],7) == 35\n",
        "test": "assert count_Pairs([1,2,1],3) == 2\nassert count_Pairs([1,1,1,1],4) == 0\nassert count_Pairs([1,2,3,4,5],5) == 10",
        "canonical_solution": "def count_Pairs(arr,n): \r\n    cnt = 0; \r\n    for i in range(n): \r\n        for j in range(i + 1,n): \r\n            if (arr[i] != arr[j]): \r\n                cnt += 1; \r\n    return cnt; "
    },
    {
        "number": 565,
        "prompt": "Write a python function to split a string into characters.\ndef split(word): \n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    return [char for char in word]\n\nprint(split(\"hello\")) # ['h', 'e', 'l', 'l', 'o']\n\n# Write a function to return the frequency of each character in a string.\ndef char_frequency(word):\n    frequency = {}\n    for char in word:\n        if char in frequency:\n            frequency[char] += 1\n        else:\n            frequency[char] = 1\n    return frequency\n\nprint(char_frequency(\"hello\")) # {'h': 1, 'e': 1, 'l': 2, 'o': 1}\n\n# Write a function to reverse a string.\ndef reverse(word):\n    return word[::-1]\n\nprint(reverse(\"hello\")) # \"olleh\"\n\n# Write a function to check if a string is a palindrome.\ndef is_palindrome(word):\n    return word == word[::-1]\n\nprint(is_palindrome(\"racecar\")) # True\nprint(is_palindrome(\"hello\")) # False\n\n# Write a function to remove whitespace from a string.\ndef remove_whitespace(word):\n    return word.replace(\" \", \"\")\n\nprint(remove_whitespace(\"hello world\")) # \"helloworld\"\n\n# Write a function to convert a string to uppercase.\ndef to_upper(word):\n    return word.upper()\n\nprint(to_upper(\"hello\")) # \"HELLO\"\n\n# Write a function to convert",
        "generated_testcode": "assert split(\"hello\") == ['h', 'e', 'l', 'l', 'o']\n",
        "test": "assert split('python') == ['p','y','t','h','o','n']\nassert split('Name') == ['N','a','m','e']\nassert split('program') == ['p','r','o','g','r','a','m']",
        "canonical_solution": "def split(word): \r\n    return [char for char in word] "
    },
    {
        "number": 566,
        "prompt": "Write a function to get the sum of a non-negative integer.\ndef sum_digits(n):\n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    if n == 0:\n        return 0\n    else:\n        return n % 10 + sum_digits(n // 10)\n\n# Test the function\nprint(sum_digits(12345))  # Output: 15\nprint(sum_digits(99))  # Output: 18\nprint(sum_digits(0))  # Output: 0\nprint(sum_digits(100000000))  # Output: 1\n\n\n# A recursive function to find the factorial of a non-negative integer\ndef factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n - 1)\n\n# Test the function\nprint(factorial(5))  # Output: 120\nprint(factorial(0))  # Output: 1\n\n# A recursive function to compute the nth Fibonacci number\ndef fibonacci(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fibonacci(n - 1) + fibonacci(n - 2)\n\n# Test the function\nprint(fibonacci(0))  # Output: 0\nprint(fibonacci(1))  # Output: 1\nprint(fibonacci(6))  # Output: 8\n\n# A recursive function to print",
        "generated_testcode": "assert sum_digits(123) == 6\n",
        "test": "assert sum_digits(345)==12\nassert sum_digits(12)==3\nassert sum_digits(97)==16",
        "canonical_solution": "def sum_digits(n):\r\n  if n == 0:\r\n    return 0\r\n  else:\r\n    return n % 10 + sum_digits(int(n / 10))"
    },
    {
        "number": 567,
        "prompt": "Write a function to check whether a specified list is sorted or not.\ndef issort_list(list1):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    for i in range(len(list1)-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True\n\n# Test the function\nlist1 = [1, 2, 3, 4, 5, 6]\nprint(issort_list(list1)) # Should print True\nlist2 = [1, 3, 2, 4, 5, 6]\nprint(issort_list(list2)) # Should print False\n\n# Another implementation using all() function\ndef issort_list(list1):\n    return all(list1[i] <= list1[i+1] for i in range(len(list1)-1))\n\n# Test the function\nlist1 = [1, 2, 3, 4, 5, 6]\nprint(issort_list(list1)) # Should print True\nlist2 = [1, 3, 2, 4, 5, 6]\nprint(issort_list(list2)) # Should print False\n\n# Using sorted() function to check whether the sorted list is same as the given list\ndef issort_list(list1):\n    return list1 == sorted(list1)\n\n# Test the function\nlist1 = [1, 2, 3, 4, 5, 6]\nprint(issort_list(list1)) # Should print True\nlist2 = [1, 3, 2, 4, 5, 6",
        "generated_testcode": "assert issort_list([1, 2, 3, 4, 5, 6]) == True\n",
        "test": "assert issort_list([1,2,4,6,8,10,12,14,16,17])==True\nassert issort_list([1, 2, 4, 6, 8, 10, 12, 14, 20, 17])==False\nassert issort_list([1, 2, 4, 6, 8, 10,15,14,20])==False",
        "canonical_solution": "def issort_list(list1):\r\n    result = all(list1[i] <= list1[i+1] for i in range(len(list1)-1))\r\n    return result"
    },
    {
        "number": 568,
        "prompt": "Write a function to create a list of empty dictionaries.\ndef empty_list(length):\n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    empty_dicts = []\n    for i in range(length):\n        empty_dicts.append({})\n    return empty_dicts\n\n\n# Test your function\nprint(empty_list(3))  # Output: [{}, {}, {}]\nprint(empty_list(5))  # Output: [{}, {}, {}, {}, {}, {}]\nprint(empty_list(0))  # Output: []\nprint(empty_list(1))  # Output: [{}] ",
        "generated_testcode": "assert empty_list(3) == [{}, {}, {}]\n",
        "test": "assert empty_list(5)==[{},{},{},{},{}]\nassert empty_list(6)==[{},{},{},{},{},{}]\nassert empty_list(7)==[{},{},{},{},{},{},{}]",
        "canonical_solution": "def empty_list(length):\r\n empty_list = [{} for _ in range(length)]\r\n return empty_list"
    },
    {
        "number": 569,
        "prompt": "Write a function to sort each sublist of strings in a given list of lists.\ndef sort_sublists(list1):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    new_list = []\n    for sublist in list1:\n        new_list.append(sorted(sublist))\n    return new_list\n\n# Test the function with an example\nlist1 = [['apple', 'banana', 'cherry'], ['dog', 'cat', 'elephant'], ['tree', 'flower', 'house']]\nprint(sort_sublists(list1))  # Output: [['apple', 'banana', 'cherry'], ['cat', 'dog', 'elephant'], ['flower', 'house', 'tree']]\n\n# Test the function with another example\nlist2 = [['apple', 'banana', 'cherry', 'date'], ['dog', 'cat', 'elephant', 'fox'], ['tree', 'flower', 'house', 'goat']]\nprint(sort_sublists(list2))  # Output: [['apple', 'banana', 'cherry', 'date'], ['cat', 'dog', 'elephant', 'fox'], ['flower', 'house', 'goat', 'tree']] ",
        "generated_testcode": "assert sort_sublists([\"apple\", \"banana\", \"cherry\", \"date\", \"fig\", \"grape\"]) == [\"apple\", \"banana\", \"cherry\", \"date\", \"fig\", \"grape\"]\n",
        "test": "assert sort_sublists([['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange']])==[['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\nassert sort_sublists([['green', 'orange'], ['black'], ['green', 'orange'], ['white']])==[['green', 'orange'], ['black'], ['green', 'orange'], ['white']]\nassert sort_sublists([['a','b'],['d','c'],['g','h'] , ['f','e']])==[['a', 'b'], ['c', 'd'], ['g', 'h'], ['e', 'f']]",
        "canonical_solution": "def sort_sublists(list1):\r\n    result = list(map(sorted,list1)) \r\n    return result"
    },
    {
        "number": 570,
        "prompt": "Write a function to remove words from a given list of strings containing a character or string.\ndef remove_words(list1, charlist):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    newlist = []\n    for i in list1:\n        for char in charlist:\n            if char not in i:\n                newlist.append(i)\n    return newlist\n\n# Test the function\nlist1 = [\"apple\", \"banana\", \"orange\", \"grape\", \"kiwi\", \"pear\"]\ncharlist = [\"a\", \"r\", \"p\"]\nprint(remove_words(list1, charlist))  # Output: [\"banana\", \"kiwi\"]\n\n# Write a function to check if a string is a palindrome. A palindrome is a word, phrase, number, or sequence that reads the same backward as forward, e.g., \"racecar\", \"Was it a car or a cat I saw?\", etc.\ndef is_palindrome(s):\n    return s == s[::-1]\n\n# Test the function\nprint(is_palindrome(\"racecar\"))  # Output: True\nprint(is_palindrome(\"Was it a car or a cat I saw?\"))  # Output: True\nprint(is_palindrome(\"Hello, world!\"))  # Output: False\n\n# Write a function to reverse a string using a loop.\ndef reverse_string(s):\n    reversed_s = \"\"\n    for i in range(len(s)-1, -1, -1):\n        reversed_s += s[i]\n    return reversed_s\n\n# Test the function\nprint(reverse_string(\"hello world\")) ",
        "generated_testcode": "assert remove_words(['hello', 'world', 'python', 'java', 'javascript', 'c++'], ['o', '+']) == ['hell', 'w', 'pyth', 'jav', 'c']\n",
        "test": "assert remove_words(['Red color', 'Orange#', 'Green', 'Orange @', \"White\"],['#', 'color', '@'])==['Red', '', 'Green', 'Orange', 'White']\nassert remove_words(['Red &', 'Orange+', 'Green', 'Orange @', 'White'],['&', '+', '@'])==['Red', '', 'Green', 'Orange', 'White']\nassert remove_words(['Red &', 'Orange+', 'Green', 'Orange @', 'White'],['@'])==['Red &', 'Orange+', 'Green', 'Orange', 'White']",
        "canonical_solution": "def remove_words(list1, charlist):\r\n    new_list = []\r\n    for line in list1:\r\n        new_words = ' '.join([word for word in line.split() if not any([phrase in word for phrase in charlist])])\r\n        new_list.append(new_words)\r\n    return new_list"
    },
    {
        "number": 571,
        "prompt": "Write a function to find maximum possible sum of disjoint pairs for the given array of integers and a number k.\ndef max_sum_pair_diff_lessthan_K(arr, N, K): \n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    arr.sort()\n    max_sum = 0\n    for i in range(N): \n        for j in range(i + 1, N): \n            if arr[j] - arr[i] < K: \n                max_sum = max(max_sum, arr[j] - arr[i]) \n    return max_sum \n\n# Test the function with the given example\narr = [1, 3, 5, 7, 9, 11] \nN = len(arr) \nK = 3\nprint(\"Maximum possible sum of disjoint pairs with difference less than K:\", max_sum_pair_diff_lessthan_K(arr, N, K)) \n\n# Output: Maximum possible sum of disjoint pairs with difference less than K: 6\n\n# Time complexity: O(N^2)\n# Since we need to compare all possible pairs, we have to visit all the elements of the array and compare them with each other. So, time complexity is O(N^2)\n# Space complexity: O(1)\n# We are using constant extra space. ",
        "generated_testcode": "assert max_sum_pair_diff_lessthan_K([1, 2, 3, 4, 5, 6, 7], 3) == 10\n",
        "test": "assert max_sum_pair_diff_lessthan_K([3, 5, 10, 15, 17, 12, 9], 7, 4) == 62\nassert max_sum_pair_diff_lessthan_K([5, 15, 10, 300], 4, 12) == 25\nassert max_sum_pair_diff_lessthan_K([1, 2, 3, 4, 5, 6], 6, 6) == 21",
        "canonical_solution": "def max_sum_pair_diff_lessthan_K(arr, N, K): \r\n\tarr.sort() \r\n\tdp = [0] * N \r\n\tdp[0] = 0\r\n\tfor i in range(1, N): \r\n\t\tdp[i] = dp[i-1] \r\n\t\tif (arr[i] - arr[i-1] < K): \r\n\t\t\tif (i >= 2): \r\n\t\t\t\tdp[i] = max(dp[i], dp[i-2] + arr[i] + arr[i-1]); \r\n\t\t\telse: \r\n\t\t\t\tdp[i] = max(dp[i], arr[i] + arr[i-1]); \r\n\treturn dp[N - 1]"
    },
    {
        "number": 572,
        "prompt": "Write a python function to remove two duplicate numbers from a given number of lists.\ndef two_unique_nums(nums):\n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    return list(set(nums) - set([x for x in nums if nums.count(x) > 1])\n\n# Test case:\nnums = [1,2,3,4,5,6,5,4,3,2,1]\nprint(two_unique_nums(nums))  # Output: [1,2,3,4,5,6]\n\n# Explanation: The function first converts the list to a set to remove duplicates. Then it iterates through the list and removes any\n# element that occurs more than once. The - operator removes the duplicates from the set. The final set is converted back to a list and returned. ",
        "generated_testcode": "assert two_unique_nums(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n",
        "test": "assert two_unique_nums([1,2,3,2,3,4,5]) == [1, 4, 5]\nassert two_unique_nums([1,2,3,2,4,5]) == [1, 3, 4, 5]\nassert two_unique_nums([1,2,3,4,5]) == [1, 2, 3, 4, 5]",
        "canonical_solution": "def two_unique_nums(nums):\r\n  return [i for i in nums if nums.count(i)==1]"
    },
    {
        "number": 573,
        "prompt": "Write a python function to calculate the product of the unique numbers of a given list.\ndef unique_product(list_data):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    product = 1\n    for i in set(list_data):\n        product *= i\n    return product\n\n# Test the function with the sample list\nsample_list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nprint(unique_product(sample_list)) ",
        "generated_testcode": "assert unique_product([1, 2, 3, 4, 5, 6]) == 120\n",
        "test": "assert unique_product([10, 20, 30, 40, 20, 50, 60, 40]) ==  720000000\nassert unique_product([1, 2, 3, 1,]) == 6\nassert unique_product([7, 8, 9, 0, 1, 1]) == 0",
        "canonical_solution": "def unique_product(list_data):\r\n    temp = list(set(list_data))\r\n    p = 1\r\n    for i in temp:\r\n        p *= i\r\n    return p"
    },
    {
        "number": 574,
        "prompt": "Write a function to find the surface area of a cylinder.\ndef surfacearea_cylinder(r,h):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    side_area = 2*3.14*r*h\n    top_area = 3.14*r*r\n    bottom_area = 3.14*r*r\n    lateral_area = 2*3.14*r*r\n    total_area = 2*side_area + 2*top_area + 2*bottom_area\n    return total_area\n\n# Test the function with a radius of 5 and a height of 10\nprint(surfacearea_cylinder(5,10)) # Output: 314.15929204101698633\n\n# Test the function with a radius of 3.5 and a height of 7.8\nprint(surfacearea_cylinder(3.5, 7.8)) # Output: 250.9404725746404767\n\n# Write a function to find the volume of a cylinder\ndef volume_cylinder(r,h):\n    volume = 3.14*r*r*h\n    return volume\n\n# Test the function with a radius of 5 and a height of 10\nprint(volume_cylinder(5,10)) # Output: 157.079632679489669\n\n# Test the function with a radius of 3.5 and a height of 7.8\nprint(volume_",
        "generated_testcode": "assert surfacearea_cylinder(3, 5) == 314.1592653589793936\n",
        "test": "assert surfacearea_cylinder(10,5)==942.45\nassert surfacearea_cylinder(4,5)==226.18800000000002\nassert surfacearea_cylinder(4,10)==351.848",
        "canonical_solution": "def surfacearea_cylinder(r,h):\r\n  surfacearea=((2*3.1415*r*r) +(2*3.1415*r*h))\r\n  return surfacearea"
    },
    {
        "number": 575,
        "prompt": "Write a python function to find nth number in a sequence which is not a multiple of a given number.\ndef count_no (A,N,L,R): \n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    count = 0\n    for i in range(L,R+1): \n        if i%A != 0: \n            count += 1\n            if count == N: \n                return i \n    return -1\n\n#Take input of N, A and L, R\nN = int(input(\"Enter the value of N: \"))\nA = int(input(\"Enter the value of A: \"))\nL = int(input(\"Enter the value of L: \"))\nR = int(input(\"Enter the value of R: \"))\n\n#Calling the function and printing the result\nprint(count_no(A,N,L,R)) ",
        "generated_testcode": "assert count_no(2,3,10) == 12\n",
        "test": "assert count_no(2,3,1,10) == 5\nassert count_no(3,6,4,20) == 11\nassert count_no(5,10,4,20) == 16",
        "canonical_solution": "def count_no (A,N,L,R): \r\n    count = 0\r\n    for i in range (L,R + 1): \r\n        if (i % A != 0): \r\n            count += 1\r\n        if (count == N): \r\n            break\r\n    return (i) "
    },
    {
        "number": 576,
        "prompt": "Write a python function to check whether an array is subarray of another or not.\ndef is_Sub_Array(A,B,n,m): \n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    j = 0\n    for i in range(n): \n        if A[i] == B[j]: \n            j += 1\n        if j == m: \n            return True\n    return False\n  \n# Driver code \nA = [1,2,3,4,5,6,7,8,9] \nB = [2,3,4] \nn = len(A) \nm = len(B)\nif is_Sub_Array(A, B, n, m): \n    print(\"Yes\") \nelse: \n    print(\"No\") \n  \nA = [1,2,3,4,5,6,7,8,9] \nB = [1, 4, 6, 9] \nn = len(A) \nm = len(B)\nif is_Sub_Array(A, B, n, m): \n    print(\"Yes\") \nelse: \n    print(\"No\") \n  \nA = [1,2,3,4,5,6,7,8,9] \nB = [2, 5, 8] \nn = len(A) \nm = len(B)\nif is_Sub_Array(A, B, n, m): \n    print(\"Yes\") \nelse: \n    print(\"No\") ",
        "generated_testcode": "assert is_Sub_Array([1,2,3,4,5,6,7,8,9],[2,4,6,8],7,4) == True\n",
        "test": "assert is_Sub_Array([1,4,3,5],[1,2],4,2) == False\nassert is_Sub_Array([1,2,1],[1,2,1],3,3) == True\nassert is_Sub_Array([1,0,2,2],[2,2,0],4,3) ==False",
        "canonical_solution": "def is_Sub_Array(A,B,n,m): \r\n    i = 0; j = 0; \r\n    while (i < n and j < m):  \r\n        if (A[i] == B[j]): \r\n            i += 1; \r\n            j += 1; \r\n            if (j == m): \r\n                return True;  \r\n        else: \r\n            i = i - j + 1; \r\n            j = 0;       \r\n    return False; "
    },
    {
        "number": 577,
        "prompt": "Write a python function to find the last digit in factorial of a given number.\ndef last_Digit_Factorial(n): \n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    if n == 0 or n == 1:\n        return 1\n    else:\n        return (n*last_Digit_Factorial(n-1))%10\n        \nn = int(input())\nprint(last_Digit_Factorial(n))\n\n# Time complexity : O(n)\n# Space complexity : O(n)\n",
        "generated_testcode": "assert last_Digit_Factorial(5) == 5\n",
        "test": "assert last_Digit_Factorial(4) == 4\nassert last_Digit_Factorial(21) == 0\nassert last_Digit_Factorial(30) == 0",
        "canonical_solution": "def last_Digit_Factorial(n): \r\n    if (n == 0): return 1\r\n    elif (n <= 2): return n  \r\n    elif (n == 3): return 6\r\n    elif (n == 4): return 4 \r\n    else: \r\n      return 0"
    },
    {
        "number": 578,
        "prompt": "Write a function to interleave lists of the same length.\ndef interleave_lists(list1,list2,list3):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    result = []\n    for i in range(len(list1)):\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n    return result\n\n# Test the function with some sample data\nprint(interleave_lists([1,2,3],[4,5,6],[7,8,9]))  # Output: [1, 4, 7, 2, 5, 8, 3, 6, 9]\nprint(interleave_lists([1,2],[4,5],[7,8]))       # Output: [1, 4, 7, 2, 5]\nprint(interleave_lists([1],[4],[7]))            # Output: [1, 4, 7]\nprint(interleave_lists([],[],[],[]))           # Output: []\n\n# Using list comprehension\ndef interleave_lists(list1,list2,list3):\n    return [x for t in zip(list1,list2,list3) for x in t]\n\n# Test the function with some sample data\nprint(interleave_lists([1,2,3],[4,5,6],[7,8,9]))  # Output: [1, 4, 7, 2, 5, 8, 3, 6, 9]\nprint(interleave_lists([1,2],[4,5],[7,8]) )       # Output:",
        "generated_testcode": "assert interleave_lists([1,2,3],[4,5,6],[7,8,9]) == [1,4,7,2,5,8,3,6,9]\n",
        "test": "assert interleave_lists([1,2,3,4,5,6,7],[10,20,30,40,50,60,70],[100,200,300,400,500,600,700])==[1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700]\nassert interleave_lists([10,20],[15,2],[5,10])==[10,15,5,20,2,10]\nassert interleave_lists([11,44], [10,15], [20,5])==[11,10,20,44,15,5]",
        "canonical_solution": "def interleave_lists(list1,list2,list3):\r\n    result = [el for pair in zip(list1, list2, list3) for el in pair]\r\n    return result"
    },
    {
        "number": 579,
        "prompt": "Write a function to find the dissimilar elements in the given two tuples.\ndef find_dissimilar(test_tup1, test_tup2):\n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    return tuple(x for x in set(test_tup1) ^ set(test_tup2))\n\n# Example usage:\ntest_tup1 = (1, 2, 3, 4, 5, 6)\ntest_tup2 = (4, 5, 6, 7, 8, 9)\nprint(find_dissimilar(test_tup1, test_tup2)) # Output: (1, 2, 3, 7, 8, 9)\n\n# Time Complexity: O(n)",
        "generated_testcode": "assert find_dissimilar((1, 2, 3, 4, 5), (1, 2, 3, 4, 5)) == ()\n",
        "test": "assert find_dissimilar((3, 4, 5, 6), (5, 7, 4, 10)) == (3, 6, 7, 10)\nassert find_dissimilar((1, 2, 3, 4), (7, 2, 3, 9)) == (1, 4, 7, 9)\nassert find_dissimilar((21, 11, 25, 26), (26, 34, 21, 36)) == (34, 36, 11, 25)",
        "canonical_solution": "def find_dissimilar(test_tup1, test_tup2):\r\n  res = tuple(set(test_tup1) ^ set(test_tup2))\r\n  return (res) "
    },
    {
        "number": 580,
        "prompt": "Write a function to extract the even elements in the nested mixed tuple.\ndef even_ele(test_tuple, even_fnc): \n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    if isinstance(test_tuple, tuple):\n        result = []\n        for element in test_tuple:\n            if isinstance(element, tuple):\n                result.extend(even_ele(element, even_fnc) if even_fnc(element) else [])\n            elif even_fnc(element):\n                result.append(element)\n        return tuple(result)\n    else:\n        return ()\n\n# test case\ntest_tuple = (1, 2, (3, 4, 5, 6), 7, (8, 9, 10, (11, 12), 13) , 14)\nprint(even_ele(test_tuple, lambda x: x % 2 == 0)) # output (2, 4, 6, 8, 10, 12)\nprint(even_ele(test_tuple, lambda x: x % 2 != 0)) # output (1, 3, 5, 7, 9, 11, 13)\n\n# The function takes a tuple and a function as input parameters. It checks whether the element is a tuple or not, if it is a tuple then it will call the function recursively with the nested tuple and append the result to the result list. If it is not a tuple, it will check the even condition and append it to the result list if it satisfies the condition. \n# The output is a tuple of even elements. ",
        "generated_testcode": "assert even_ele(('a', 2, (3, 4, 'b', (5, 6, 7), 8, (9, 10), 'c', 11, 12), 13) == (2, 4, 6, 8, 12)\n",
        "test": "assert extract_even((4, 5, (7, 6, (2, 4)), 6, 8)) == (4, (6, (2, 4)), 6, 8)\nassert extract_even((5, 6, (8, 7, (4, 8)), 7, 9)) == (6, (8, (4, 8)))\nassert extract_even((5, 6, (9, 8, (4, 6)), 8, 10)) == (6, (8, (4, 6)), 8, 10)",
        "canonical_solution": "def even_ele(test_tuple, even_fnc): \r\n\tres = tuple() \r\n\tfor ele in test_tuple: \r\n\t\tif isinstance(ele, tuple): \r\n\t\t\tres += (even_ele(ele, even_fnc), ) \r\n\t\telif even_fnc(ele): \r\n\t\t\tres += (ele, ) \r\n\treturn res \r\ndef extract_even(test_tuple):\r\n  res = even_ele(test_tuple, lambda x: x % 2 == 0)\r\n  return (res) "
    },
    {
        "number": 581,
        "prompt": "Write a python function to find the surface area of the square pyramid.\ndef surface_Area(b,s): \n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    # calculate the length of the base\n    length_base = (b**2 / (4 * (s ** 2)) * (3 * (s ** 2) - b ** 2)) ** 0.5\n    # calculate the height of the pyramid\n    height = length_base * (b ** 2 / (2 * s) * 1/3)\n    # calculate the slant height of the pyramid\n    slant_height = (length_base ** 2 + height ** 2) ** 0.5\n    # calculate the surface area of the base\n    base_area = b ** 2\n    # calculate the area of each side of the pyramid\n    side_area = b * slant_height / 2\n    # calculate the total area of the pyramid\n    total_area = side_area * 4 + base_area\n    # calculate the surface area of the pyramid\n    surface_area = 4 * total_area\n    return surface_area\n\n# take input from user\nb = float(input(\"Enter the base length of the pyramid: \"))\ns = float(input(\"Enter the slant of the pyramid: \"))\n\n# print the surface area of the pyramid\nprint(\"The surface area of the pyramid is\", surface_Area(b, s)) ",
        "generated_testcode": "assert surface_Area(4, 6) == 144.0\n",
        "test": "assert surface_Area(3,4) == 33\nassert surface_Area(4,5) == 56\nassert surface_Area(1,2) == 5",
        "canonical_solution": "def surface_Area(b,s): \r\n    return 2 * b * s + pow(b,2) "
    },
    {
        "number": 582,
        "prompt": "Write a function to check if a dictionary is empty or not.\ndef my_dict(dict1):\n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    if not dict1:\n        return True\n    else:\n        return False\n\nprint(my_dict({})) # Output: True\nprint(my_dict({'a':1, 'b':2})) # Output: False ",
        "generated_testcode": "assert my_dict({}) == True\n",
        "test": "assert my_dict({10})==False\nassert my_dict({11})==False\nassert my_dict({})==True",
        "canonical_solution": "def my_dict(dict1):\r\n  if bool(dict1):\r\n     return False\r\n  else:\r\n     return True"
    },
    {
        "number": 583,
        "prompt": "Write a function for nth catalan number.\ndef catalan_number(num):\n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    if num == 0 or num == 1:\n        return 1\n    else:\n        result = 0\n        for i in range(num):\n            result += catalan_number(i) * catalan_number(num-1-i)\n        return result\n\n# Test\nprint(catalan_number(0)) # Output: 1\nprint(catalan_number(1)) # Output: 1\nprint(catalan_number(2)) # Output: 2\nprint(catalan_number(3)) # Output: 5\nprint(catalan_number(4)) # Output: 14\nprint(catalan_number(5)) # Output: 42\nprint(catalan_number(6)) # Output: 132\nprint(catalan_number(7)) # Output: 429\nprint(catalan_number(8)) # Output: 1430\nprint(catalan_number(9)) # Output: 4862\n\n# Time Complexity: O(n*n!)\n# Space Complexity: O(n) ",
        "generated_testcode": "assert catalan_number(0) == 1\n",
        "test": "assert catalan_number(10)==16796\nassert catalan_number(9)==4862\nassert catalan_number(7)==429",
        "canonical_solution": "def catalan_number(num):\r\n    if num <=1:\r\n         return 1   \r\n    res_num = 0\r\n    for i in range(num):\r\n        res_num += catalan_number(i) * catalan_number(num-i-1)\r\n    return res_num"
    },
    {
        "number": 584,
        "prompt": "Write a function to find all adverbs and their positions in a given sentence by using regex.\ndef find_adverbs(text):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    import re\n    adverbs = re.findall(r'\\b\\w+ly\\b', text)\n    positions = [text.find(adverb) for adverb in adverbs]\n    return (adverbs, positions)\n\n# Example usage:\ntext = \"This is a beautifully written sentence. The function works perfectly.\"\nprint(find_adverbs(text)) # (['beautifully', 'perfectly'], [10, 45])\n\ntext = \"He walked slowly, but not too slowly.\"\nprint(find_adverbs(text)) # (['slowly', 'not too slowly'], [12, 21])\n\ntext = \"The dog was running quickly and happily.\"\nprint(find_adverbs(text)) # (['quickly', 'happily'], [15, 27])\n```\n\nThis function uses the regular expression `\\b\\w+ly\\b` to match all words ending in -ly. The `\\b` matches word boundaries and `\\w+` matches one or more word characters. The function then finds the positions of each adverb in the text by using the `find()` method of the string. The `find()` method returns the index of the first character of the matched word, so we need to add the length of the word to get the position of the last character. The `find()` method returns -1 if the word is not found, so we can filter out the adverbs that are not found in the text. ",
        "generated_testcode": "assert find_adverbs(\"The dog is running quickly.\") == [(\"quickly\", 10)]\n",
        "test": "assert find_adverbs(\"Clearly, he has no excuse for such behavior.\") == '0-7: Clearly'\nassert find_adverbs(\"Please handle the situation carefuly\") == '28-36: carefuly'\nassert find_adverbs(\"Complete the task quickly\") == '18-25: quickly'",
        "canonical_solution": "import re\r\ndef find_adverbs(text):\r\n  for m in re.finditer(r\"\\w+ly\", text):\r\n    return ('%d-%d: %s' % (m.start(), m.end(), m.group(0)))"
    },
    {
        "number": 585,
        "prompt": "Write a function to find the n - expensive price items from a given dataset using heap queue algorithm.\ndef expensive_items(items,n):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    heap = []\n    for item in items:\n        heapq.heappush(heap,item)\n        if len(heap) > n:\n            heapq.heappop(heap)\n    return [heapq.heappop(heap) for i in range(n)]\n\nitems = [3, 2, 1, 5, 6, 7, 4, 2, 9]\nn = 3\nprint(expensive_items(items,n)) #[7, 6, 9]\n\n#using max heap\nitems = [3, 2, 1, 5, 6, 7, 4, 2, 9]\nn = 3\nheap = []\nfor i in items:\n    heap.append(i)\n    if len(heap) > n:\n        heap.sort(reverse=True)\n        heap.pop()\nprint(heap) #[9, 7, 6]\n#Output: [9, 7, 6]\n\n#using min heap\nitems = [3, 2, 1, 5, 6, 7, 4, 2, 9]\nn = 3\nheap = []\nfor i in items:\n    heap.append(i)\n    if len(heap) > n:\n        heap.sort()\n        heap.pop(0)\nprint(heap) #[2, 2, 5]\n#Output: [2, ",
        "generated_testcode": "assert expensive_items(items, 3) == [('item3', 100), ('item2', 90), ('item1', 80)]\n",
        "test": "assert expensive_items([{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}],1)==[{'name': 'Item-2', 'price': 555.22}]\nassert expensive_items([{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}, {'name': 'Item-3', 'price': 45.09}],2)==[{'name': 'Item-2', 'price': 555.22},{'name': 'Item-1', 'price': 101.1}]\nassert expensive_items([{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}, {'name': 'Item-3', 'price': 45.09},{'name': 'Item-4', 'price': 22.75}],1)==[{'name': 'Item-2', 'price': 555.22}]",
        "canonical_solution": "import heapq\r\ndef expensive_items(items,n):\r\n  expensive_items = heapq.nlargest(n, items, key=lambda s: s['price'])\r\n  return expensive_items"
    },
    {
        "number": 586,
        "prompt": "Write a python function to split the array and add the first part to the end.\ndef split_Arr(a,n,k):  \n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    return a[n:] + a[:n]\n\n#Example usage\narr = [1,2,3,4,5,6,7,8,9]\nn=3\nk=2\nprint(split_Arr(arr,n,k)) #[4,5,6,7,8,9,1,2,3]\n\n#This function splits the array at index n and adds the first part to the end, so that the first k elements are added to the end.\n#The first argument is the array, second argument is the index to split and the third argument is the number of elements to add at the beginning. ",
        "generated_testcode": "assert split_Arr([1,2,3,4,5,6,7,8,9],3,2) == [1,2,3,4,5,6,7,8,9,1,2]\n",
        "test": "assert split_Arr([12,10,5,6,52,36],6,2) == [5,6,52,36,12,10]\nassert split_Arr([1,2,3,4],4,1) == [2,3,4,1]\nassert split_Arr([0,1,2,3,4,5,6,7],8,3) == [3,4,5,6,7,0,1,2]",
        "canonical_solution": "def split_Arr(a,n,k):  \r\n   b = a[:k] \r\n   return (a[k::]+b[::]) "
    },
    {
        "number": 587,
        "prompt": "Write a function to convert a list to a tuple.\ndef list_tuple(listx):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": true,
        "answer": "    return tuple(listx)\n\n# Write a function to convert a tuple to a list.\ndef tuple_list(tuplex):\n    return list(tuplex)\n\n# Write a function to check if an item is in a list.\ndef is_in_list(item, listx):\n    return item in listx\n\n# Write a function to get the length of a list.\ndef length_list(listx):\n    return len(listx)\n\n# Write a function to remove the nth element from a list.\ndef remove_nth_element(listx, n):\n    listx.pop(n-1)\n    return listx\n\n# Write a function to add an element to a list at a specific index.\ndef add_element(listx, index, element):\n    listx.insert(index, element)\n    return listx\n\n# Write a function to join two lists.\ndef join_lists(list1, list2):\n    return list1 + list2\n\n# Write a function to merge two lists into a dictionary.\ndef list_to_dict(list1, list2):\n    return dict(zip(list1, list2))\n\n# Write a function to remove the first element from a list.\ndef remove_first_element(listx):\n    return listx[1:]\n\n# Write a function to remove the last element from a list.\ndef remove_last_element(listx):\n    return listx[:-1]\n\n# Write a function to clear a list.\n",
        "generated_testcode": "assert list_tuple([1, 2, 3, 4, 5]) == (1, 2, 3, 4, 5)\n",
        "test": "assert list_tuple([5, 10, 7, 4, 15, 3])==(5, 10, 7, 4, 15, 3)\nassert list_tuple([2, 4, 5, 6, 2, 3, 4, 4, 7])==(2, 4, 5, 6, 2, 3, 4, 4, 7)\nassert list_tuple([58,44,56])==(58,44,56)",
        "canonical_solution": "def list_tuple(listx):\r\n  tuplex = tuple(listx)\r\n  return tuplex"
    },
    {
        "number": 588,
        "prompt": "Write a python function to find the difference between largest and smallest value in a given array.\ndef big_diff(nums):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    return max(nums) - min(nums)\n    \n# Example usage:\nnums = [10, 2, 5, 8, 12, 18, 0]\nprint(big_diff(nums))  # Output: 18\n\nnums = [100, -10, -200, 200, -50, -100]\nprint(big_diff(nums))  # Output: 300 ",
        "generated_testcode": "assert big_diff([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 8\n",
        "test": "assert big_diff([1,2,3,4]) == 3\nassert big_diff([4,5,12]) == 8\nassert big_diff([9,2,3]) == 7",
        "canonical_solution": "def big_diff(nums):\r\n     diff= max(nums)-min(nums)\r\n     return diff"
    },
    {
        "number": 589,
        "prompt": "Write a function to find perfect squares between two given numbers.\ndef perfect_squares(a, b):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    result = []\n    for i in range(a, b+1):\n        if int(i**(1/2) + 0.5)**2 == i:\n            result.append(i)\n    return result\n\nprint(perfect_squares(1, 20)) #[1, 4, 9, 16]\nprint(perfect_squares(25, 30)) #[25]\nprint(perfect_squares(100, 140)) #[100]\nprint(perfect_squares(1, 50)) #[1, 4, 9, 16, 25, 36]\nprint(perfect_squares(1, 100)) #[1, 4, 9, 16, 25, 36, 49] ",
        "generated_testcode": "assert perfect_squares(1, 25) == [1, 4, 9, 16, 25]\n",
        "test": "assert perfect_squares(1,30)==[1, 4, 9, 16, 25]\nassert perfect_squares(50,100)==[64, 81, 100]\nassert perfect_squares(100,200)==[100, 121, 144, 169, 196]",
        "canonical_solution": "def perfect_squares(a, b):\r\n    lists=[]\r\n    for i in range (a,b+1):\r\n        j = 1;\r\n        while j*j <= i:\r\n            if j*j == i:\r\n                 lists.append(i)  \r\n            j = j+1\r\n        i = i+1\r\n    return lists"
    },
    {
        "number": 590,
        "prompt": "Write a function to convert polar coordinates to rectangular coordinates.\ndef polar_rect(x,y):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    r = (x**2 + y**2)**0.5\n    theta = math.atan(y/x)\n    return (r, theta)\n\n# Get input from user\nx = float(input(\"Enter x: \"))\ny = float(input(\"Enter y: \"):\n\n# Call the function\nrect_coords = polar_rect(x,y)\n\n# Print the result\nprint(\"Polar Coordinates:\", rect_coords)\n",
        "generated_testcode": "assert polar_rect(3, 45) == (3, 3)\n",
        "test": "assert polar_rect(3,4)==((5.0, 0.9272952180016122), (-2+2.4492935982947064e-16j))\nassert polar_rect(4,7)==((8.06225774829855, 1.0516502125483738), (-2+2.4492935982947064e-16j))\nassert polar_rect(15,17)==((22.67156809750927, 0.8478169733934057), (-2+2.4492935982947064e-16j))",
        "canonical_solution": "import cmath\r\ndef polar_rect(x,y):\r\n cn = complex(x,y)\r\n cn=cmath.polar(cn)\r\n cn1 = cmath.rect(2, cmath.pi)\r\n return (cn,cn1)"
    },
    {
        "number": 591,
        "prompt": "Write a python function to interchange the first and last elements in a list.\ndef swap_List(newList): \n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    first = newList[0]\n    last = newList[-1]\n    newList[0] = last\n    newList[-1] = first\n    return newList\n\n# test the function\nlist1 = [1, 2, 3, 4, 5, 6, 7]\nprint(swap_List(list1))  # Output: [7, 2, 3, 4, 5, 6, 1] ",
        "generated_testcode": "assert swap_List([1, 2, 3, 4, 5]) == [5, 2, 3, 4]\n",
        "test": "assert swap_List([12, 35, 9, 56, 24]) == [24, 35, 9, 56, 12]\nassert swap_List([1, 2, 3]) == [3, 2, 1]\nassert swap_List([4, 5, 6]) == [6, 5, 4]",
        "canonical_solution": "def swap_List(newList): \r\n    size = len(newList) \r\n    temp = newList[0] \r\n    newList[0] = newList[size - 1] \r\n    newList[size - 1] = temp  \r\n    return newList "
    },
    {
        "number": 592,
        "prompt": "Write a python function to find sum of product of binomial co-efficients.\ndef binomial_Coeff(n,k): \n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": " \n    C = 1\n    for i in range(k): \n        C *= (n - i) \n      \n    for i in range(k): \n        C //= (i + 1) \n          \n    return C \n  \n# function to calculate sum of all binomial co-efficients \ndef sum_binomial_Coeff(n): \n    sum = 0\n    for i in range(n+1): \n        sum += binomial_Coeff(n, i) \n    return sum \n  \n# Driver code \nn = 5\nprint(\"Sum of Binomial Coefficients upto\", n, \n        \"is\", sum_binomial_Coeff(n)) ",
        "generated_testcode": "assert binomial_Coeff(5,3) == 10\n",
        "test": "assert sum_Of_product(3) == 15\nassert sum_Of_product(4) == 56\nassert sum_Of_product(1) == 1",
        "canonical_solution": "def binomial_Coeff(n,k): \r\n    C = [0] * (k + 1); \r\n    C[0] = 1; # nC0 is 1 \r\n    for i in range(1,n + 1):  \r\n        for j in range(min(i, k),0,-1): \r\n            C[j] = C[j] + C[j - 1]; \r\n    return C[k]; \r\ndef sum_Of_product(n): \r\n    return binomial_Coeff(2 * n,n - 1); "
    },
    {
        "number": 593,
        "prompt": "Write a function to remove leading zeroes from an ip address.\ndef removezero_ip(ip):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    return '.'.join(str(int(part) for part in ip.split('.'))\n\n# Example usage\nremovezero_ip(\"1.0.0.1\") # returns \"1.0.1\"\nremovezero_ip(\"1.0.0.0.1\") # returns \"1.0.1\"\nremovezero_ip(\"1.0.0.255.255\") # returns \"1.0.255.255\"\nremovezero_ip(\"0.0.0.0\") # returns \"0\"\n",
        "generated_testcode": "assert removezero_ip(\"192.0.1.1\") == \"192.1.1\"\n",
        "test": "assert removezero_ip(\"216.08.094.196\")==('216.8.94.196') \nassert removezero_ip(\"12.01.024\")==('12.1.24') \nassert removezero_ip(\"216.08.094.0196\")==('216.8.94.196') ",
        "canonical_solution": "import re\r\ndef removezero_ip(ip):\r\n string = re.sub('\\.[0]*', '.', ip)\r\n return string\r"
    },
    {
        "number": 594,
        "prompt": "Write a function to find the difference of first even and odd number of a given list.\ndef diff_even_odd(list1):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    even_sum = 0\n    odd_sum = 0\n    for i in list1:\n        if i % 2 == 0:\n            even_sum += i\n        else:\n            odd_sum += i\n    return abs(odd_sum - even_sum)\n\n\n\nprint(diff_even_odd([1, 2, 3, 4, 5, 6, 7, 8, 9]))  # Output: 2\nprint(diff_even_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))  # Output: 0\nprint(diff_even_odd([2, 4, 6, 8, 10]))  # Output: 0\nprint(diff_even_odd([1, 3, 5, 7, 9]))  # Output: 16\nprint(diff_even_odd([]))  # Output: 0\nprint(diff_even_odd([0]))  # Output: 0\nprint(diff_even_odd([1]))  # Output: 0\nprint(diff_even_odd([2]))  # Output: 0\nprint(diff_even_odd([2, 4]))  # Output: 0\nprint(diff_even_odd([1, 3, 5]))  # Output: 2\nprint(diff_even_odd([2, 4, 6]))  # Output: 0\nprint",
        "generated_testcode": "assert diff_even_odd([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 6\n",
        "test": "assert diff_even_odd([1,3,5,7,4,1,6,8])==3\nassert diff_even_odd([1,2,3,4,5,6,7,8,9,10])==1\nassert diff_even_odd([1,5,7,9,10])==9",
        "canonical_solution": "def diff_even_odd(list1):\r\n    first_even = next((el for el in list1 if el%2==0),-1)\r\n    first_odd = next((el for el in list1 if el%2!=0),-1)\r\n    return (first_even-first_odd)"
    },
    {
        "number": 595,
        "prompt": "Write a python function to count minimum number of swaps required to convert one binary string to another.\ndef min_Swaps(str1,str2) : \n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    n1,n2 = len(str1),len(str2)\n    if n1 != n2 : \n        return -1\n    count = 0\n    for i in range(n1) : \n        if str1[i] != str2[i] : \n            count += 1\n    return count\n\n# Testing the function with sample inputs\nstr1 = \"101010\"\nstr2 = \"011010\"\nprint(\"Minimum number of swaps required to convert\",str1,\"to\",str2,\"is\",min_Swaps(str1,str2)) # Output : 2\n\nstr1 = \"101010\"\nstr2 = \"010101\"\nprint(\"Minimum number of swaps required to convert\",str1,\"to\",str2,\"is\",min_Swaps(str1,str2)) # Output : 3\n\nstr1 = \"101010\"\nstr2 = \"001110\"\nprint(\"Minimum number of swaps required to convert\",str1,\"to\",str2,\"is\",min_Swaps(str1,str2)) # Output : -1\n\nstr1 = \"101010\"\nstr2 = \"000011\"\nprint(\"Minimum number of swaps required to convert\",str1,\"to\",str2,\"is\",min_Swaps(str1,str2)) # Output : -1\n\nstr1 = \"101",
        "generated_testcode": "assert min_Swaps(\"101010\",\"010101\") == 2\n",
        "test": "assert min_Swaps(\"1101\",\"1110\") == 1\nassert min_Swaps(\"111\",\"000\") == \"Not Possible\"\nassert min_Swaps(\"111\",\"110\") == \"Not Possible\"",
        "canonical_solution": "def min_Swaps(str1,str2) : \r\n    count = 0\r\n    for i in range(len(str1)) :  \r\n        if str1[i] != str2[i] : \r\n            count += 1\r\n    if count % 2 == 0 : \r\n        return (count // 2) \r\n    else : \r\n        return (\"Not Possible\") "
    },
    {
        "number": 596,
        "prompt": "Write a function to find the size of the given tuple.\ndef tuple_size(tuple_list):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    return len(tuple_list)\n\n# Test the function with the example tuples\nprint(tuple_size((1, 2, 3)) == 3)  # Output: True\nprint(tuple_size(()) == 0)        # Output: True\nprint(tuple_size((1, \"a\", 3.14)) == 3)   # Output: True\nprint(tuple_size(((1, 2, 3)) == 1)      # Output: True\n\\end{code}\n\nI am getting the error message \"TypeError: tuple_size() takes 1 positional argument but 3 were given\" for the last line of code, I don't understand why. Can anyone explain what's happening here?\n\nAnswer: The error is caused by the fact that you are using the wrong parenthesis, you need to use `tuple_size(((1, 2, 3))` instead of `tuple_size((1, 2, 3)`. Here's the correct code:\n\n\\begin{code}\ndef tuple_size(tuple_list):\n    return len(tuple_list)\n\nprint(tuple_size((1, 2, 3) == 3)  # Output: True\nprint(tuple_size(()) == 0)      # Output: True\nprint(tuple_size((1, \"a\", 3.14) == 3)   # Output: True\nprint(tuple_size(((1, 2, 3) == 1)      # Output: True",
        "generated_testcode": "assert tuple_size((1, 2, 3, 4, 5, 6) == 5\n",
        "test": "assert tuple_size((\"A\", 1, \"B\", 2, \"C\", 3) ) == sys.getsizeof((\"A\", 1, \"B\", 2, \"C\", 3))\nassert tuple_size((1, \"Raju\", 2, \"Nikhil\", 3, \"Deepanshu\") ) == sys.getsizeof((1, \"Raju\", 2, \"Nikhil\", 3, \"Deepanshu\"))\nassert tuple_size(((1, \"Lion\"), ( 2, \"Tiger\"), (3, \"Fox\"), (4, \"Wolf\"))  ) == sys.getsizeof(((1, \"Lion\"), ( 2, \"Tiger\"), (3, \"Fox\"), (4, \"Wolf\")))",
        "canonical_solution": "import sys \r\ndef tuple_size(tuple_list):\r\n  return (sys.getsizeof(tuple_list)) "
    },
    {
        "number": 597,
        "prompt": "Write a function to find kth element from the given two sorted arrays.\ndef find_kth(arr1, arr2, m, n, k):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    if m > n:\n        return find_kth(arr2, arr1, n, m, k)\n\n    if m == 0:\n        return arr2[k-1]\n\n    if n == 0:\n        return arr1[k-1]\n\n    if k == 1:\n        return min(arr1[0], arr2[0])\n\n    i = min(k//2, m)\n    j = min(k-i, n)\n\n    if arr1[i-1] < arr2[j-1]:\n        return find_kth(arr1[i:], arr2, m-i, n, k-i)\n    else:\n        return find_kth(arr1, arr2[j:], m, n-j, k-j)\n\n\narr1 = [1, 3, 5, 7, 9]\narr2 = [2, 4, 6, 8, 10, 12]\nk = 5\nm = len(arr1)\nn = len(arr2)\nprint(find_kth(arr1, arr2, m, n, k))\n# Output: 5\n\narr1 = [1, 3, 5, 7, 9]\narr2 = [2, 4, 6, 8, 10, 12]\nk = 6\nm = len(arr1)\nn = len(arr2)\nprint(",
        "generated_testcode": "assert find_kth([1, 3, 5, 7, 9], [2, 4, 6, 8, 10], 4, 5) == 5\n",
        "test": "assert find_kth([2, 3, 6, 7, 9], [1, 4, 8, 10], 5, 4, 5) == 6\nassert find_kth([100, 112, 256, 349, 770], [72, 86, 113, 119, 265, 445, 892], 5, 7, 7) == 256\nassert find_kth([3, 4, 7, 8, 10], [2, 5, 9, 11], 5, 4, 6) == 8",
        "canonical_solution": "def find_kth(arr1, arr2, m, n, k):\r\n\tsorted1 = [0] * (m + n)\r\n\ti = 0\r\n\tj = 0\r\n\td = 0\r\n\twhile (i < m and j < n):\r\n\t\tif (arr1[i] < arr2[j]):\r\n\t\t\tsorted1[d] = arr1[i]\r\n\t\t\ti += 1\r\n\t\telse:\r\n\t\t\tsorted1[d] = arr2[j]\r\n\t\t\tj += 1\r\n\t\td += 1\r\n\twhile (i < m):\r\n\t\tsorted1[d] = arr1[i]\r\n\t\td += 1\r\n\t\ti += 1\r\n\twhile (j < n):\r\n\t\tsorted1[d] = arr2[j]\r\n\t\td += 1\r\n\t\tj += 1\r\n\treturn sorted1[k - 1]"
    },
    {
        "number": 598,
        "prompt": "Write a function to check whether the given number is armstrong or not.\ndef armstrong_number(number):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    # Convert the given number to string\n    number = str(number)\n    # Find the length of the number\n    length = len(number)\n    # Initialize sum of the number\n    sum = 0\n    # Iterate through each digit of the number\n    for digit in number:\n        # Square the digit and add it to the sum\n        sum += int(digit)**length\n    # Check if the sum is equal to the original number\n    if sum == int(number):\n        return True\n    else:\n        return False\n\n# Test the function\nprint(armstrong_number(153)) # True\nprint(armstrong_number(371)) # True\nprint(armstrong_number(370)) # False\nprint(armstrong_number(407)) # True\nprint(armstrong_number(1634)) # True ",
        "generated_testcode": "assert armstrong_number(153) == True\n",
        "test": "assert armstrong_number(153)==True\nassert armstrong_number(259)==False\nassert armstrong_number(4458)==False",
        "canonical_solution": "def armstrong_number(number):\r\n sum = 0\r\n times = 0\r\n temp = number\r\n while temp > 0:\r\n           times = times + 1\r\n           temp = temp // 10\r\n temp = number\r\n while temp > 0:\r\n           reminder = temp % 10\r\n           sum = sum + (reminder ** times)\r\n           temp //= 10\r\n if number == sum:\r\n           return True\r\n else:\r\n           return False"
    },
    {
        "number": 599,
        "prompt": "Write a function to find sum and average of first n natural numbers.\ndef sum_average(number):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    if number < 0:\n        return \"Invalid input. Please enter a positive integer.\"\n    elif number == 0:\n        return 0, 0\n    else:\n        sum = 0\n        for i in range(1, number+1):\n            sum += i\n        average = sum / number\n        return sum, average\n\n# Test cases\nprint(sum_average(0)) # Output: 0,0\nprint(sum_average(5)) # Output: 15,3.0\nprint(sum_average(-1)) # Output: Invalid input. Please enter a positive integer.\n",
        "generated_testcode": "assert sum_average(5) == (15, 3)\n",
        "test": "assert sum_average(10)==(55, 5.5)\nassert sum_average(15)==(120, 8.0)\nassert sum_average(20)==(210, 10.5)",
        "canonical_solution": "def sum_average(number):\r\n total = 0\r\n for value in range(1, number + 1):\r\n    total = total + value\r\n average = total / number\r\n return (total,average)"
    },
    {
        "number": 600,
        "prompt": "Write a python function to check whether the given number is even or not using bitwise operator.\ndef is_Even(n) : \n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    return n & 1 == 0\n\nprint(is_Even(20))  # True\nprint(is_Even(21))  # False \n\n# In this code, we are using bitwise AND operator (&) to check the last bit of the binary representation of the number. If the last bit is 0 then the number is even otherwise it's odd. \n# The bitwise AND operator (&) returns 0 if the last bit of the binary representation of the number is 0, otherwise it returns 1. \n# So, if n & 1 == 0, then the number is even. ",
        "generated_testcode": "assert is_Even(4) == True\n",
        "test": "assert is_Even(1) == False\nassert is_Even(2) == True\nassert is_Even(3) == False",
        "canonical_solution": "def is_Even(n) : \r\n    if (n^1 == n+1) :\r\n        return True; \r\n    else :\r\n        return False; "
    },
    {
        "number": 601,
        "prompt": "Write a function to find the longest chain which can be formed from the given set of pairs.\n\tdef __init__(self, a, b): \n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "       self.a = a \n        self.b = b \n  \n    # Function to find the longest chain \n    def longestChain(self): \n        n = len(self.a) \n        a = self.a \n        b = self.b \n        sort_a = sorted(a) \n        sort_b = sorted(b) \n  \n        # Initialize variables to store the longest chain length and its last element \n        max_chain_length = 1\n        last_element = sort_a[0] \n  \n        for i in range(1, n): \n            if sort_a[i] != sort_a[i - 1]: \n                # If the current element is greater than the last element, start a new chain \n                if sort_a[i] > sort_a[i - 1]: \n                    # Update the longest chain length and its last element \n                    if sort_a[i] < sort_b[0]: \n                        max_chain_length += 1\n                        last_element = sort_a[i] \n                else: \n                    # If the current element is less than the last element, find the smallest element in b \n                    # which is greater than or equal to the current element \n                    index = binarySearch(sort_b, sort_a[i]) \n                    if index != -1: \n                        max_chain_length += 1\n                        last_element = sort_b[index",
        "generated_testcode": "assert longest_chain([(1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 7)]) == 5\n",
        "test": "assert max_chain_length([Pair(5, 24), Pair(15, 25),Pair(27, 40), Pair(50, 60)], 4) == 3\nassert max_chain_length([Pair(1, 2), Pair(3, 4),Pair(5, 6), Pair(7, 8)], 4) == 4\nassert max_chain_length([Pair(19, 10), Pair(11, 12),Pair(13, 14), Pair(15, 16), Pair(31, 54)], 5) == 5",
        "canonical_solution": "class Pair(object): \r\n\tdef __init__(self, a, b): \r\n\t\tself.a = a \r\n\t\tself.b = b \r\ndef max_chain_length(arr, n): \r\n\tmax = 0\r\n\tmcl = [1 for i in range(n)] \r\n\tfor i in range(1, n): \r\n\t\tfor j in range(0, i): \r\n\t\t\tif (arr[i].a > arr[j].b and\r\n\t\t\t\tmcl[i] < mcl[j] + 1): \r\n\t\t\t\tmcl[i] = mcl[j] + 1\r\n\tfor i in range(n): \r\n\t\tif (max < mcl[i]): \r\n\t\t\tmax = mcl[i] \r\n\treturn max"
    },
    {
        "number": 602,
        "prompt": "Write a python function to find the first repeated character in a given string.\ndef first_repeated_char(str1):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    count = {}\n    for char in str1:\n        if char in count:\n            count[char] += 1\n        else:\n            count[char] = 1\n    for char in str1:\n        if count[char] > 1:\n            return char\n    return None\n\n# Test the function\nprint(first_repeated_char(\"geeksforgeeks\")) # Output: e\nprint(first_repeated_char(\"abcd\")) # Output: None\n\n# Time Complexity: O(n)\n# Space Complexity: O(min(n, k)) where n is the length of the string and k is the number of unique characters in the string. ",
        "generated_testcode": "assert first_repeated_char(\"hello\") == \"l\"\n",
        "test": "assert first_repeated_char(\"abcabc\") == \"a\"\nassert first_repeated_char(\"abc\") == \"None\"\nassert first_repeated_char(\"123123\") == \"1\"",
        "canonical_solution": "def first_repeated_char(str1):\r\n  for index,c in enumerate(str1):\r\n    if str1[:index+1].count(c) > 1:\r\n      return c \r\n  return \"None\""
    },
    {
        "number": 603,
        "prompt": "Write a function to get a lucid number smaller than or equal to n.\ndef get_ludic(n):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    lucid_numbers = []\n    for i in range(1, n+1):\n        # Create a list of prime factors of i\n        factors = get_prime_factors(i)\n        # Check if all the prime factors are consecutive integers\n        if factors == list(range(factors[0], factors[-1]+1)):\n            lucid_numbers.append(i)\n    return lucid_numbers[-1]\n\n\ndef get_prime_factors(n):\n    factors = []\n    # Check for divisibility by 2\n    while n % 2 == 0:\n        factors.append(2)\n        n //= 2\n    # Check for odd prime factors\n    i = 3\n    while i <= n**0.5:\n        while n % i == 0:\n            factors.append(i)\n            n //= i\n        i += 2\n    # If n is a prime factor, append it\n    if n > 2:\n        factors.append(n)\n    return factors\n\n# Test the function\nn = int(input(\"Enter a number: \"))\nprint(\"The smallest lucid number smaller than or equal to\", n, \"is\", get_ludic(n))\n",
        "generated_testcode": "assert get_ludic(10) == 5\n",
        "test": "assert get_ludic(10) == [1, 2, 3, 5, 7]\nassert get_ludic(25) == [1, 2, 3, 5, 7, 11, 13, 17, 23, 25]\nassert get_ludic(45) == [1, 2, 3, 5, 7, 11, 13, 17, 23, 25, 29, 37, 41, 43]",
        "canonical_solution": "def get_ludic(n):\r\n\tludics = []\r\n\tfor i in range(1, n + 1):\r\n\t\tludics.append(i)\r\n\tindex = 1\r\n\twhile(index != len(ludics)):\r\n\t\tfirst_ludic = ludics[index]\r\n\t\tremove_index = index + first_ludic\r\n\t\twhile(remove_index < len(ludics)):\r\n\t\t\tludics.remove(ludics[remove_index])\r\n\t\t\tremove_index = remove_index + first_ludic - 1\r\n\t\tindex += 1\r\n\treturn ludics"
    },
    {
        "number": 604,
        "prompt": "Write a function to reverse words in a given string.\ndef reverse_words(s):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    words = s.split(\" \")\n    return \" \".join(reversed(words))\n\n\n# Test cases\nprint(reverse_words(\"hello world\"))  # Output: \"world hello\"\nprint(reverse_words(\"  hello    world  \"))  # Output: \"world hello\"\nprint(reverse_words(\"  hello     world  test  \"))  # Output: \"test world hello\"\nprint(reverse_words(\"  \"))  # Output: \"\"\nprint(reverse_words(\"a\"))  # Output: \"a\"\nprint(reverse_words(\"\"))  # Output: \"\"\n\n# Time Complexity: O(N) \n# where N is the length of the input string. \n# We split the string into words and reverse the list of words in constant time, and then join the list of words in linear time. \n# The space complexity is also O(N) as we need to store the list of words. ",
        "generated_testcode": "assert reverse_words(\"hello world\") == \"world hello\"\n",
        "test": "assert reverse_words(\"python program\")==(\"program python\")\nassert reverse_words(\"java language\")==(\"language java\")\nassert reverse_words(\"indian man\")==(\"man indian\")",
        "canonical_solution": "def reverse_words(s):\r\n        return ' '.join(reversed(s.split()))"
    },
    {
        "number": 605,
        "prompt": "Write a function to check if the given integer is a prime number.\ndef prime_num(num):\n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    if num < 2:\n        return False\n    for i in range(2, int(num/2)+1):\n        if num % i == 0:\n            return False\n    return True\n\n# Test the function\nprint(prime_num(7))  # True\nprint(prime_num(12)) # False\nprint(prime_num(1))  # False\nprint(prime_num(0))  # False\nprint(prime_num(10)) # False\nprint(prime_num(2))  # True\nprint(prime_num(97)) # True\n\n# Extra: modify the function to check for twin primes\ndef twin_prime(num):\n    if prime_num(num) and prime_num(num+2):\n        return True\n    else:\n        return False\n\nprint(twin_prime(11))  # True\nprint(twin_prime(17)) # True\nprint(twin_prime(29)) # True\nprint(twin_prime(15)) # False\nprint(twin_prime(2))  # False\nprint(twin_prime(10)) # False\nprint(twin_prime(41)) # True\n\n# Extra: modify the function to check for prime factors\ndef prime_factors(num):\n    factors = []\n    i = 2\n    while i <= num:\n        if num % i == 0 and prime_num(i):\n            factors.append(i)\n",
        "generated_testcode": "assert prime_num(7) == True\n",
        "test": "assert prime_num(13)==True\nassert prime_num(7)==True\nassert prime_num(-1010)==False",
        "canonical_solution": "def prime_num(num):\r\n  if num >=1:\r\n   for i in range(2, num//2):\r\n     if (num % i) == 0:\r\n                return False\r\n     else:\r\n                return True\r\n  else:\r\n          return False"
    },
    {
        "number": 606,
        "prompt": "Write a function to convert degrees to radians.\ndef radian_degree(degree):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    return degree * (3.14 / 180)\n\n# Write a function to convert radians to degrees.\ndef degree_radian(radian):\n    return radian * (180 / 3.14)\n\n# Define a function to calculate the distance between two points.\ndef distance(x1, y1, x2, y2):\n    return ((x1 - x2)**2 + (y1 - y2)**2)**0.5\n\n# Define a function to calculate the area of a circle with radius r.\ndef circle_area(r):\n    return 3.14 * r**2\n\n# Define a function to calculate the area of a rectangle with length and width.\ndef rectangle_area(length, width):\n    return length * width\n\n# Define a function to calculate the area of a triangle given the base and height.\ndef triangle_area(base, height):\n    return 0.5 * base * height\n\n# Define a function to calculate the volume of a sphere with radius r.\ndef sphere_volume(r):\n    return (4/3) * 3.14 * r**3\n\n# Define a function to calculate the volume of a cylinder with radius r and height h.\ndef cylinder_volume(r, h):\n    return 3.14 * r**2 * h\n\n# Define a function to calculate the surface area of a sphere with radius r.\ndef sphere_surface_area(r):\n    return 4 * 3.",
        "generated_testcode": "assert radian_degree(90) == 1.57079632679\n",
        "test": "assert radian_degree(90)==1.5707963267948966\nassert radian_degree(60)==1.0471975511965976\nassert radian_degree(120)==2.0943951023931953",
        "canonical_solution": "import math\r\ndef radian_degree(degree):\r\n radian = degree*(math.pi/180)\r\n return radian"
    },
    {
        "number": 607,
        "prompt": "Write a function to search a literals string in a string and also find the location within the original string where the pattern occurs by using regex.\ndef find_literals(text, pattern):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    matches = re.findall(pattern, text)\n    if matches:\n        print(\"Found pattern at indices:\", end=\" \")\n        for match in matches:\n            print(text.index(match), end=\", \")\n        print(\"\\n\")\n    else:\n        print(\"Pattern not found in string\\n\")\n\n# Example usage\ntext = \"Hello world, how are you doing today? What about you?\"\npattern = \"yo\"\nfind_literals(text, pattern)\n\ntext = \"Python is a great language\"\npattern = \"python\"\nfind_literals(text, pattern)\n\ntext = \"Hello world, how are you doing today? What about you?\"\npattern = \"you\"\nfind_literals(text, pattern)\n\ntext = \"Hello world, how are you doing today? What about you?\"\npattern = \"about\"\nfind_literals(text, pattern)\n\ntext = \"Hello world, how are you doing today? What about you?\"\npattern = \"are\"\nfind_literals(text, pattern)\n\ntext = \"Hello world, how are you doing today? What about you?\"\npattern = \"today\"\nfind_literals(text, pattern)\n\ntext = \"Hello world, how are you doing today? What about you?\"\npattern = \"not_found\"\nfind_literals(text, pattern)\n\ntext = \"Hello world, how are you doing today? What about you?\"\npattern = \"t\"\nfind_literals(text, pattern)\n\ntext = \"Hello",
        "generated_testcode": "assert find_literals(\"Hello world\", \"world\") == (6, 11)\n",
        "test": "assert find_literals('The quick brown fox jumps over the lazy dog.', 'fox') == ('fox', 16, 19)\nassert find_literals('Its been a very crazy procedure right', 'crazy') == ('crazy', 16, 21)\nassert find_literals('Hardest choices required strongest will', 'will') == ('will', 35, 39)",
        "canonical_solution": "import re\r\npattern = 'fox'\r\ntext = 'The quick brown fox jumps over the lazy dog.'\r\ndef find_literals(text, pattern):\r\n  match = re.search(pattern, text)\r\n  s = match.start()\r\n  e = match.end()\r\n  return (match.re.pattern, s, e)"
    },
    {
        "number": 608,
        "prompt": "Write a python function to find nth bell number.\ndef bell_Number(n): \n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": true,
        "answer": "    bell = [0] * (n + 1) \n    bell[0] = 1\n    for i in range(1, n + 1): \n        bell[i] = bell[i-1] \n        for j in range(i): \n            bell[i] += bell[j] * bell[i-j-1] \n    return bell[n] \n\n#Test the function \nn = 5\nprint(\"The nth Bell number is\", bell_Number(n)) ",
        "generated_testcode": "assert bell_Number(0) == 1\n",
        "test": "assert bell_Number(2) == 2\nassert bell_Number(3) == 5\nassert bell_Number(4) == 15",
        "canonical_solution": "def bell_Number(n): \r\n    bell = [[0 for i in range(n+1)] for j in range(n+1)] \r\n    bell[0][0] = 1\r\n    for i in range(1, n+1):\r\n        bell[i][0] = bell[i-1][i-1]\r\n        for j in range(1, i+1): \r\n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1] \r\n    return bell[n][0] "
    },
    {
        "number": 609,
        "prompt": "Write a python function to find minimum possible value for the given periodic function.\ndef floor_Min(A,B,N):\n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    A = int(A)\n    B = int(B)\n    N = int(N)\n    min_val = A\n    for i in range(A,B+1):\n        if i%N < min_val:\n            min_val = i%N\n    return min_val\n\n# Test the function\nprint(floor_Min(2,15,5)) # Output: 2\nprint(floor_Min(10,25,7)) # Output: 3\nprint(floor_Min(100,200,25)) # Output: 0\nprint(floor_Min(20,40,10)) # Output: 20\nprint(floor_Min(-10,20,3)) # Output: -10\nprint(floor_Min(-25,-15,5)) # Output: 0\nprint(floor_Min(-10,5,2)) # Output: 0 ",
        "generated_testcode": "assert floor_Min(1,2,3) == 1\n",
        "test": "assert floor_Min(10,20,30) == 15\nassert floor_Min(1,2,1) == 0\nassert floor_Min(11,10,9) == 9",
        "canonical_solution": "def floor_Min(A,B,N):\r\n    x = max(B - 1,N)\r\n    return (A*x) // B"
    },
    {
        "number": 610,
        "prompt": "Write a python function to remove the k'th element from a given list.\ndef remove_kth_element(list1, L):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    if len(list1) < L:\n        return \"Invalid index\"\n    else:\n        list1.pop(L-1)\n        return list1\n\n# Test the function\nlist1 = [1, 2, 3, 4, 5, 6, 7]\nprint(remove_kth_element(list1, 3))  # Output: [1, 2, 4, 5]\nprint(list1)                        # Output: [1, 2, 4, 5]\nprint(remove_kth_element(list1, 1))  # Output: [2, 4, 5]\nprint(list1)                        # Output: [2, 4, 5] ",
        "generated_testcode": "assert remove_kth_element([1, 2, 3, 4, 5, 6, 7, 8, 9], 3) == [1, 2, 4, 5, 6, 7, 8]\n",
        "test": "assert remove_kth_element([1,1,2,3,4,4,5,1],3)==[1, 1, 3, 4, 4, 5, 1]\nassert remove_kth_element([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4],4)==[0, 0, 1, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]\nassert remove_kth_element([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10],5)==[10,10,15,19, 18, 17, 26, 26, 17, 18, 10]",
        "canonical_solution": "def remove_kth_element(list1, L):\r\n    return  list1[:L-1] + list1[L:]"
    },
    {
        "number": 611,
        "prompt": "Write a function to find the maximum of nth column from the given tuple list.\ndef max_of_nth(test_list, N):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    max_value = float('-inf')\n    for i in range(len(test_list)):\n        if test_list[i][N] > max_value:\n            max_value = test_list[i][N]\n    return max_value\n\n\n# Test the function with an example\ntest_list = [(1, 2, 3), (4, 5, 6), (7, 8, 9)]\nN = 2\nprint(max_of_nth(test_list, N)) # Output: 9\n\n# Example usage:\n# max_of_nth(test_list, 0) => 7\n# max_of_nth(test_list, 1) => 5\n# max_of_nth(test_list, 2) => 9\n# max_of_nth(test_list, 3) => Error (since the length of tuple is 3)\n# max_of_nth(test_list, -1) => Error (since the index should be non-negative)\n",
        "generated_testcode": "assert max_of_nth([(1, 2, 3), (4, 5, 6), (7, 8, 9)], 2) == 8\n",
        "test": "assert max_of_nth([(5, 6, 7), (1, 3, 5), (8, 9, 19)], 2) == 19\nassert max_of_nth([(6, 7, 8), (2, 4, 6), (9, 10, 20)], 1) == 10\nassert max_of_nth([(7, 8, 9), (3, 5, 7), (10, 11, 21)], 1) == 11",
        "canonical_solution": "def max_of_nth(test_list, N):\r\n  res = max([sub[N] for sub in test_list])\r\n  return (res) "
    },
    {
        "number": 612,
        "prompt": "Write a python function to merge the first and last elements separately in a list of lists.\ndef merge(lst):  \n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    merged_list = []\n    for i in lst:\n        merged_list.append([i[0] + i[-1]])\n    return merged_list\n\n# Example usage:\nprint(merge([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) ) # Output: [[19], [12], [16]] ",
        "generated_testcode": "assert merge([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [[1, 4, 7], [2, 5, 8], [3, 6, 9]]\n",
        "test": "assert merge([['x', 'y'], ['a', 'b'], ['m', 'n']]) == [['x', 'a', 'm'], ['y', 'b', 'n']]\nassert merge([[1, 2], [3, 4], [5, 6], [7, 8]]) == [[1, 3, 5, 7], [2, 4, 6, 8]]\nassert merge([['x', 'y','z' ], ['a', 'b','c'], ['m', 'n','o']]) == [['x', 'a', 'm'], ['y', 'b', 'n'],['z', 'c','o']]",
        "canonical_solution": "def merge(lst):  \r\n    return [list(ele) for ele in list(zip(*lst))] "
    },
    {
        "number": 613,
        "prompt": "Write a function to find the maximum value in record list as tuple attribute in the given tuple list.\ndef maximum_value(test_list):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    max_value = test_list[0][2]\n    for i in test_list:\n        if i[2] > max_value:\n            max_value = i[2]\n    return max_value\n\n# Test the function with the given example\nexample_list = [(1, 'John', 25), (2, 'Alice', 30), (3, 'Bob', 17), (4, 'Mike', 28), (5, 'Jessica', 22), (6, 'Mary', 28)]\nprint(maximum_value(example_list)) # Output: 30\n\n# Test the function with empty list\nexample_list = []\nprint(maximum_value(example_list)) # Output: None\n\n# Test the function with a single element list\nexample_list = [(1, 'John', 25)]\nprint(maximum_value(example_list)) # Output: 25\n\n# Test the function with a list with negative values\nexample_list = [(1, 'John', -5), (2, 'Alice', -30), (3, 'Bob', -17), (4, 'Mike', -28), (5, 'Jessica', -22), (6, 'Mary', -28)]\nprint(maximum_value(example_list)) # Output: -30\n\n# Test the function with a list with all the same values\nexample_list = [(1, 'John', 25",
        "generated_testcode": "assert maximum_value([(1, 2, 3), (4, 5, 6), (7, 8, 9)]) == 9\n",
        "test": "assert maximum_value([('key1', [3, 4, 5]), ('key2', [1, 4, 2]), ('key3', [9, 3])]) == [('key1', 5), ('key2', 4), ('key3', 9)]\nassert maximum_value([('key1', [4, 5, 6]), ('key2', [2, 5, 3]), ('key3', [10, 4])]) == [('key1', 6), ('key2', 5), ('key3', 10)]\nassert maximum_value([('key1', [5, 6, 7]), ('key2', [3, 6, 4]), ('key3', [11, 5])]) == [('key1', 7), ('key2', 6), ('key3', 11)]",
        "canonical_solution": "def maximum_value(test_list):\r\n  res = [(key, max(lst)) for key, lst in test_list]\r\n  return (res) "
    },
    {
        "number": 614,
        "prompt": "Write a function to find the cumulative sum of all the values that are present in the given tuple list.\ndef cummulative_sum(test_list):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    sum = 0\n    result_list = []\n    for i in test_list:\n        sum += i\n        result_list.append(sum)\n    return result_list\n\n# Test the function\nprint(cummulative_sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))  # Output: [1, 3, 6, 10, 15, 21, 28, 36, 45, 55]\nprint(cummulative_sum([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10]))  # Output: [-1, -3, -6, -10, -15, -21, -28, -36, -45, -55]\nprint(cummulative_sum([1, 2, 3, 4, 5, -6, 7, 8, -9, 10]))  # Output: [1, 3, 6, 10, 6, 13, 20, 28, 19]\n",
        "generated_testcode": "assert cummulative_sum([1, 2, 3, 4, 5]) == [1, 3, 6, 10, 15]\n",
        "test": "assert cummulative_sum([(1, 3), (5, 6, 7), (2, 6)]) == 30\nassert cummulative_sum([(2, 4), (6, 7, 8), (3, 7)]) == 37\nassert cummulative_sum([(3, 5), (7, 8, 9), (4, 8)]) == 44",
        "canonical_solution": "def cummulative_sum(test_list):\r\n  res = sum(map(sum, test_list))\r\n  return (res)"
    },
    {
        "number": 615,
        "prompt": "Write a function to find average value of the numbers in a given tuple of tuples.\ndef average_tuple(nums):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    # Your code here\n    avg = 0\n    count = 0\n    for i in nums:\n        avg += sum(i)\n        count += len(i)\n    return avg/count\n    \n# Test cases\nprint(average_tuple(((1, 2, 3), (4, 5, 6))) == 3.5)  # Output: True\nprint(average_tuple(((1, 2, 3, 4), (4, 5, 6, 7), (7, 8, 9, 10)) == 5.333)  # Output: True\nprint(average_tuple(((1, 2, 3), (4, 5, 6), (7, 8, 9, 10)) == 5.33)  # Output: False\nprint(average_tuple(((1, 2, 3)) == 2)  # Output: False\nprint(average_tuple(()) == \"Invalid input\")  # Output: False\n\n# Test the function with the sample test cases\nprint(average_tuple(((1, 2, 3, 4, 5, 6)))  # Output: 3.5\nprint(average_tuple(((1, 2, 3, 4, 5, 6, 7, 8, 9, 10)) == 5.5)  # Output: True\nprint(average_tuple((",
        "generated_testcode": "assert average_tuple(((1, 2, 3), (4, 5, 6)) == 3.5\n",
        "test": "assert average_tuple(((10, 10, 10, 12), (30, 45, 56, 45), (81, 80, 39, 32), (1, 2, 3, 4)))==[30.5, 34.25, 27.0, 23.25]\nassert average_tuple(((1, 1, -5), (30, -15, 56), (81, -60, -39), (-10, 2, 3)))== [25.5, -18.0, 3.75]\nassert average_tuple( ((100, 100, 100, 120), (300, 450, 560, 450), (810, 800, 390, 320), (10, 20, 30, 40)))==[305.0, 342.5, 270.0, 232.5]",
        "canonical_solution": "def average_tuple(nums):\r\n    result = [sum(x) / len(x) for x in zip(*nums)]\r\n    return result"
    },
    {
        "number": 616,
        "prompt": "Write a function to perfom the modulo of tuple elements in the given two tuples.\ndef tuple_modulo(test_tup1, test_tup2):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    mod_tup = tuple()\n    for i in range(len(test_tup1)):\n        mod_tup += (test_tup1[i] % test_tup2[i],)\n    return mod_tup\n\n# Test the function with sample inputs\ntest_tup1 = (5, 10, 15)\ntest_tup2 = (3, 4, 5)\nprint(tuple_modulo(test_tup1, test_tup2)) # Output: (2, 2, 0)\n\n# Test with different input values\ntest_tup1 = (10, 20, 30)\ntest_tup2 = (5, 10, 15)\nprint(tuple_modulo(test_tup1, test_tup2)) # Output: (0, 0, 5)\n\n# Test with single value tuples\ntest_tup1 = (10,)\ntest_tup2 = (5,)\nprint(tuple_modulo(test_tup1, test_tup2)) # Output: (0,)\n\n# Test with tuple of different lengths\ntest_tup1 = (5, 10, 15)\ntest_tup2 = (3, 4)\nprint(tuple_modulo(test_tup1, test_tup2)) # Output: ValueError: Tuples have different lengths\n\n# Test with non-integer input\ntest_",
        "generated_testcode": "assert tuple_modulo((2, 4, 6, 8, 10), (3, 5, 7, 11)) == (2, 4, 2, 10)\n",
        "test": "assert tuple_modulo((10, 4, 5, 6), (5, 6, 7, 5)) == (0, 4, 5, 1)\nassert tuple_modulo((11, 5, 6, 7), (6, 7, 8, 6)) == (5, 5, 6, 1)\nassert tuple_modulo((12, 6, 7, 8), (7, 8, 9, 7)) == (5, 6, 7, 1)",
        "canonical_solution": "def tuple_modulo(test_tup1, test_tup2):\r\n  res = tuple(ele1 % ele2 for ele1, ele2 in zip(test_tup1, test_tup2)) \r\n  return (res) "
    },
    {
        "number": 617,
        "prompt": "Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\ndef min_Jumps(a, b, d): \n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    if a == 0 and b == 0: \n        return 0\n    if a == d and b == 0: \n        return 0\n    elif a < 0 or b < 0 or a > 10000000000000 or b > 1000000000000: \n        return -1\n    elif a == 0 or b == 0: \n        return 1 + min_Jumps(abs(b), abs(a), d)\n    elif a < d: \n        return 1 + min_Jumps(abs(a), abs(b), d)\n    elif b < d: \n        return 1 + min_Jumps(abs(a), abs(b), d)\n    elif a == d and b == d: \n        return 1\n    else: \n        return min(min_Jumps(a-d, b, d), min_Jumps(a, b-d, d)) \n\n\n# Function to check if the given point can be reached or not\ndef can_reach_point(a, b, d): \n    if a == d and b == 0: \n        return True\n    elif a == 0 and b == d: \n        return True\n    elif a < 0 or b < 0 or a > 1000000000000 or b > 100000000000: ",
        "generated_testcode": "assert min_Jumps(1, 0, 2) == 1\n",
        "test": "assert min_Jumps(3,4,11)==3.5\nassert min_Jumps(3,4,0)==0\nassert min_Jumps(11,14,11)==1",
        "canonical_solution": "def min_Jumps(a, b, d): \r\n    temp = a \r\n    a = min(a, b) \r\n    b = max(temp, b) \r\n    if (d >= b): \r\n        return (d + b - 1) / b \r\n    if (d == 0): \r\n        return 0\r\n    if (d == a): \r\n        return 1\r\n    else:\r\n        return 2"
    },
    {
        "number": 618,
        "prompt": "Write a function to divide two lists using map and lambda function.\ndef div_list(nums1,nums2):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    return list(map(lambda x,y: x/y,nums1,nums2))\n\n# Test the function with sample inputs\nnums1 = [10,20,30,40,50]\nnums2 = [2,4,10,10,5]\nprint(div_list(nums1,nums2)) # Output: [5.0, 5.0, 3.0, 10.0]\n\n# Write a function to calculate the square of each element in a list using map and lambda function\ndef square_list(nums):\n    return list(map(lambda x: x**2,nums))\n\n# Test the function with sample inputs\nnums = [1,2,3,4,5]\nprint(square_list(nums)) # Output: [1, 4, 9, 16, 25]\n\n# Write a function to filter even numbers from a list using filter and lambda function\ndef filter_even(nums):\n    return list(filter(lambda x: x%2==0,nums))\n\n# Test the function with sample inputs\nnums = [1,2,3,4,5,6,7,8,9,10]\nprint(filter_even(nums)) # Output: [2, 4, 6, 8, 10] ",
        "generated_testcode": "assert div_list([1,2,3,4],[2,2,2,2]) == [0.5,1.0,1.5,2.0]\n",
        "test": "assert div_list([4,5,6],[1, 2, 3])==[4.0,2.5,2.0]\nassert div_list([3,2],[1,4])==[3.0, 0.5]\nassert div_list([90,120],[50,70])==[1.8, 1.7142857142857142]",
        "canonical_solution": "def div_list(nums1,nums2):\r\n  result = map(lambda x, y: x / y, nums1, nums2)\r\n  return list(result)"
    },
    {
        "number": 619,
        "prompt": "Write a function to move all the numbers in it to the given string.\ndef move_num(test_str):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    result = \"\"\n    for i in test_str:\n        if i.isdigit():\n            result += i\n    return result\n\nprint(move_num(\"Hello world 123\"))  # Output: \"123\"\nprint(move_str(\"Hello 345 678 World\"))  # Output: \"345678\"\nprint(move_str(\"Python is awesome 789\"))  # Output: \"789\" \nprint(move_str(\"abcde\"))  # Output: \"\"\n```\n\nOutput:\n\n```\n123\n345678\n789\n```\n\nExplanation:\n\n- The function takes a string as input.\n- The `isdigit()` method checks if the character is a digit or not.\n- If the character is a digit, it is added to the result string.\n- Finally, the result string is returned.\n\nThis function moves all the digits from the input string to the output string. ",
        "generated_testcode": "assert move_num(\"Hello 123 World 456\") == \"Hello World\"\n",
        "test": "assert move_num('I1love143you55three3000thousand') == 'Iloveyouthreethousand1143553000'\nassert move_num('Avengers124Assemble') == 'AvengersAssemble124'\nassert move_num('Its11our12path13to14see15things16do17things') == 'Itsourpathtoseethingsdothings11121314151617'",
        "canonical_solution": "def move_num(test_str):\r\n  res = ''\r\n  dig = ''\r\n  for ele in test_str:\r\n    if ele.isdigit():\r\n      dig += ele\r\n    else:\r\n      res += ele\r\n  res += dig\r\n  return (res) "
    },
    {
        "number": 620,
        "prompt": "Write a function to find the largest subset where each pair is divisible.\ndef largest_subset(a, n):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    a.sort()\n    # print(a)\n    dp = [1] * n\n    max_len = 1\n    for i in range(1, n):\n        for j in range(i):\n            if a[i] % a[j] == 0:\n                dp[i] = max(dp[j] + 1, dp[i])\n                max_len = max(dp[i], max_len)\n    return max_len\n\n\nn = int(input())\na = list(map(int, input().split()))\nprint(largest_subset(a, n))\n\n# Example usage:\n# Input:\n# 3\n# 4 6 12 8\n# Output:\n# 2\n\n# Input:\n# 4\n# 2 3 4 6 8\n# Output:\n# 4\n\n# Explanation:\n# For the first example, the largest subset where each pair is divisible is {4, 6} and {8} and the length is 2.\n# For the second example, the largest subset is {2, 4, 6, 8} and the length is 4. ",
        "generated_testcode": "assert largest_subset([1, 2, 3, 4, 5, 6, 7, 8, 9], 3) == [1, 3, 9]\n",
        "test": "assert largest_subset([ 1, 3, 6, 13, 17, 18 ], 6) == 4\nassert largest_subset([10, 5, 3, 15, 20], 5) == 3\nassert largest_subset([18, 1, 3, 6, 13, 17], 6) == 4",
        "canonical_solution": "def largest_subset(a, n):\r\n\tdp = [0 for i in range(n)]\r\n\tdp[n - 1] = 1; \r\n\tfor i in range(n - 2, -1, -1):\r\n\t\tmxm = 0;\r\n\t\tfor j in range(i + 1, n):\r\n\t\t\tif a[j] % a[i] == 0 or a[i] % a[j] == 0:\r\n\t\t\t\tmxm = max(mxm, dp[j])\r\n\t\tdp[i] = 1 + mxm\r\n\treturn max(dp)"
    },
    {
        "number": 621,
        "prompt": "Write a function to increment the numeric values in the given strings by k.\ndef increment_numerics(test_list, K):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    result_list = []\n    for item in test_list:\n        try:\n            num = int(item)\n            result_list.append(str(num + K))\n        except ValueError:\n            result_list.append(item)\n    return result_list\n\n\ntest_list = [\"123\", \"abc\", \"456\", \"def\"]\nK = 100\nprint(increment_numerics(test_list, K))  # Output: ['123', 'abc', '556', 'def']\n\ntest_list = [\"abc\", \"def\", \"ghi\", \"789\"]\nK = 200\nprint(increment_numerics(test_list, K))  # Output: ['abc', 'def', 'ghi', '989']\n\ntest_list = []\nK = 10\nprint(increment_numerics(test_list, K))  # Output: [] ",
        "generated_testcode": "assert increment_numerics([\"hello123\", \"world456\", \"python789\"], 10) == [\"hello1333\", \"world5666\", \"python899\"]\n",
        "test": "assert increment_numerics([\"MSM\", \"234\", \"is\", \"98\", \"123\", \"best\", \"4\"] , 6) == ['MSM', '240', 'is', '104', '129', 'best', '10']\nassert increment_numerics([\"Dart\", \"356\", \"is\", \"88\", \"169\", \"Super\", \"6\"] , 12) == ['Dart', '368', 'is', '100', '181', 'Super', '18']\nassert increment_numerics([\"Flutter\", \"451\", \"is\", \"44\", \"96\", \"Magnificent\", \"12\"] , 33) == ['Flutter', '484', 'is', '77', '129', 'Magnificent', '45']",
        "canonical_solution": "def increment_numerics(test_list, K):\r\n  res = [str(int(ele) + K) if ele.isdigit() else ele for ele in test_list]\r\n  return res "
    },
    {
        "number": 622,
        "prompt": "Write a function to find the median of two sorted arrays of same size.\ndef get_median(arr1, arr2, n):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    if n % 2 == 0:\n        mid = n // 2\n        mid1 = (arr1[mid - 1] + arr1[mid]) / 2\n        mid2 = (arr2[mid - 1] + arr2[mid]) / 2\n        return (mid1 + mid2) / 2\n    else:\n        mid = n // 2\n        return (arr1[mid] + arr2[mid]) / 2\n\n\n# Function to merge two sorted arrays\ndef merge_arrays(arr1, arr2, n):\n    merged_arr = []\n    i = 0\n    j = 0\n\n    while i < n and j < n:\n        if arr1[i] < arr2[j]:\n            merged_arr.append(arr1[i])\n            i += 1\n        else:\n            merged_arr.append(arr2[j])\n            j += 1\n\n    while i < n:\n        merged_arr.append(arr1[i])\n        i += 1\n\n    while j < n:\n        merged_arr.append(arr2[j])\n        j += 1\n\n    return merged_arr\n\n# Function to find median of two sorted arrays\ndef findMedianSortedArrays(nums1, nums2):\n    if len(nums1) != len(nums2):\n        raise ValueError(\"Both arrays should be of equal size\")\n\n    n = len(nums1",
        "generated_testcode": "assert get_median([1, 3, 5, 7, 9], [2, 4, 6, 8], 4) == 5\n",
        "test": "assert get_median([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0\nassert get_median([2, 4, 8, 9], [7, 13, 19, 28], 4) == 8.5\nassert get_median([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6) == 25.0",
        "canonical_solution": "def get_median(arr1, arr2, n):\r\n  i = 0\r\n  j = 0\r\n  m1 = -1\r\n  m2 = -1\r\n  count = 0\r\n  while count < n + 1:\r\n    count += 1\r\n    if i == n:\r\n      m1 = m2\r\n      m2 = arr2[0]\r\n      break\r\n    elif j == n:\r\n      m1 = m2\r\n      m2 = arr1[0]\r\n      break\r\n    if arr1[i] <= arr2[j]:\r\n      m1 = m2\r\n      m2 = arr1[i]\r\n      i += 1\r\n    else:\r\n      m1 = m2\r\n      m2 = arr2[j]\r\n      j += 1\r\n  return (m1 + m2)/2"
    },
    {
        "number": 623,
        "prompt": "Write a function to find the n-th power of individual elements in a list using lambda function.\ndef nth_nums(nums,n):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    return list(map(lambda x: pow(x,n), nums))\n\n# Example usage:\nnums = [2,3,4]\nn = 2\nprint(nth_nums(nums,n))  # Output: [4, 9, 16]\n",
        "generated_testcode": "assert nth_nums([1,2,3,4,5],2) == [1,4,9,25]\n",
        "test": "assert nth_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],2)==[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]\nassert nth_nums([10,20,30],3)==([1000, 8000, 27000])\nassert nth_nums([12,15],5)==([248832, 759375])",
        "canonical_solution": "def nth_nums(nums,n):\r\n nth_nums = list(map(lambda x: x ** n, nums))\r\n return nth_nums"
    },
    {
        "number": 624,
        "prompt": "Write a python function to convert the given string to upper case.\ndef is_upper(string):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    return string.isupper()\n\n\n# Test cases\nprint(is_upper(\"HELLO\"))  # True\nprint(is_upper(\"hello\"))  # False\nprint(is_upper(\"Hello\"))  # False\nprint(is_upper(\"123\"))    # False\nprint(is_upper(\"\"))      # False\nprint(is_upper(\"HELLO WORLD\"))  # False\n\n# The function should return True if the string contains only uppercase letters, False otherwise. \n# If the string is empty, it should return False.\n\n# In the last example, the function should return False because it contains a space. ",
        "generated_testcode": "assert is_upper(\"HELLO\") == True\n",
        "test": "assert is_upper(\"person\") ==\"PERSON\"\nassert is_upper(\"final\") == \"FINAL\"\nassert is_upper(\"Valid\") == \"VALID\"",
        "canonical_solution": "def is_upper(string):\r\n  return (string.upper())"
    },
    {
        "number": 625,
        "prompt": "Write a python function to interchange first and last elements in a given list.\ndef swap_List(newList): \n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    # Swapping the first and last elements\n    newList[0], newList[-1] = newList[-1], newList[0] \n    # Return the modified list\n    return newList\n# Testing the function\nnewList = [1, 2, 3, 4, 5] \nprint(\"Original List:\", newList)\nnewList = swap_List(newList) \nprint(\"Swapped List:\", newList) ",
        "generated_testcode": "assert swap_List([1, 2, 3, 4, 5]) == [5, 2, 3, 4]\n",
        "test": "assert swap_List([1,2,3]) == [3,2,1]\nassert swap_List([1,2,3,4,4]) == [4,2,3,4,1]\nassert swap_List([4,5,6]) == [6,5,4]",
        "canonical_solution": "def swap_List(newList): \r\n    size = len(newList) \r\n    temp = newList[0] \r\n    newList[0] = newList[size - 1] \r\n    newList[size - 1] = temp   \r\n    return newList "
    },
    {
        "number": 626,
        "prompt": "Write a python function to find the largest triangle that can be inscribed in the semicircle.\ndef triangle_area(r) :  \n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    import math  \n    #calculating the area of a semicircle  \n    area = math.pi * r * r  \n    #calculating the side of the triangle  \n    side = 2 * math.sqrt(area / 3.0)  \n    #calculating the height of the triangle  \n    height = side * math.sqrt(3) / 2.0  \n    #returning the area of the triangle  \n    return side, height  \n  \ndef inscribed_triangle(r) :  \n    #finding the area of the semicircle  \n    area = math.pi * r * r  \n    #finding the area of the largest triangle  \n    side, height = triangle_area(r)  \n    #calculating the area of the triangle  \n    area_tri = 0.5 * side * height  \n    #returning the area of the triangle  \n    return area_tri  \n  \n#inputting the radius of the semicircle  \nradius = float(input(\"Enter the radius of the semicircle : \"))  \n#finding the largest triangle  \nlargest_tri = inscribed_triangle(radius)  \n#printing the largest triangle  \nprint(\"Largest Triangle that can be inscribed in the semicircle : \", largest_tri) ",
        "generated_testcode": "assert triangle_area(3) == 9.0\n",
        "test": "assert triangle_area(0) == 0\nassert triangle_area(-1) == -1\nassert triangle_area(2) == 4",
        "canonical_solution": "def triangle_area(r) :  \r\n    if r < 0 : \r\n        return -1\r\n    return r * r "
    },
    {
        "number": 627,
        "prompt": "Write a python function to find the smallest missing number from the given array.\ndef find_First_Missing(array,start,end): \n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    if start > end: \n        return -1\n    elif start == end: \n        return start \n    mid = (start + end) // 2\n    if (mid - 1 >= 0 and array[mid] == mid): \n        return find_First_Missing(array, mid + 1, end) \n    else: \n        return find_First_Missing(array, start, mid - 1) \n\ndef find_Smallest_Missing(array, n): \n    # Find the first missing number \n    res = find_First_Missing(array, 0, n - 1) \n    if res == -1: \n        return n \n    else: \n        return res \n\n# Driver Code \narray = [1, 2, 3, 4, 5, 6, 7, 8, 10] \nn = len(array) \nprint(find_Smallest_Missing(array, n)) ",
        "generated_testcode": "assert find_First_Missing([1,2,3,4,5,6,7,8,9,10],0,9) == 0\n",
        "test": "assert find_First_Missing([0,1,2,3],0,3) == 4\nassert find_First_Missing([0,1,2,6,9],0,4) == 3\nassert find_First_Missing([2,3,5,8,9],0,4) == 0",
        "canonical_solution": "def find_First_Missing(array,start,end): \r\n    if (start > end): \r\n        return end + 1\r\n    if (start != array[start]): \r\n        return start; \r\n    mid = int((start + end) / 2) \r\n    if (array[mid] == mid): \r\n        return find_First_Missing(array,mid+1,end) \r\n    return find_First_Missing(array,start,mid) "
    },
    {
        "number": 628,
        "prompt": "Write a function to replace all spaces in the given string with character * list item * list item * list item * list item '%20'.\ndef replace_spaces(string):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    return string.replace(\" \", \"%20\")\n\nprint(replace_spaces(\"hello world\"))  # \"hello%20world\"\nprint(replace_spaces(\"hello   world\"))  # \"hello%20%20%20%20world\"\nprint(replace_spaces(\"   hello   world   \"))  # \"%20%20hello%20%20%20world%20%20\"\nprint(replace_spaces(\"Python is awesome\"))  # \"Python%20is%20awesome\"\n\n# Test cases\nprint(replace_spaces(\"hello world\"))  # \"hello%20world\"\nprint(replace_spaces(\"Python is awesome\"))  # \"Python%20is%20awesome\"\nprint(replace_spaces(\"   hello   world   \"))  # \"%20%20hello%20%20world%20%20\"\nprint(replace_spaces(\"Alice and Bob are friends\"))  # \"Alice%20and%20Bob%20are%20friends\"\nprint(replace_spaces(\"  Bob    loves  Alice \"))  # \"%20Bob%20%20%20%20loves%20%20Alice%20\"\nprint(replace_spaces(\"Python is awesome  \"))  # \"Python%20is%20awesome%20\"\n\n# Solution\ndef replace_spaces(string):\n    return string.replace(\" \", \"%20\")",
        "generated_testcode": "assert replace_spaces(\"hello world\") == \"hello%20world\"\n",
        "test": "assert replace_spaces(\"My Name is Dawood\") == 'My%20Name%20is%20Dawood'\nassert replace_spaces(\"I am a Programmer\") == 'I%20am%20a%20Programmer'\nassert replace_spaces(\"I love Coding\") == 'I%20love%20Coding'",
        "canonical_solution": "MAX=1000;\r\ndef replace_spaces(string):\r\n  string=string.strip()\r\n  i=len(string)\r\n  space_count=string.count(' ')\r\n  new_length = i + space_count*2\r\n  if new_length > MAX:\r\n    return -1\r\n  index = new_length-1\r\n  string=list(string)\r\n  for f in range(i-2, new_length-2):\r\n    string.append('0')\r\n  for j in range(i-1, 0, -1):\r\n    if string[j] == ' ':\r\n      string[index] = '0'\r\n      string[index-1] = '2'\r\n      string[index-2] = '%'\r\n      index=index-3\r\n    else:\r\n      string[index] = string[j]\r\n      index -= 1\r\n  return ''.join(string)"
    },
    {
        "number": 629,
        "prompt": "Write a python function to find even numbers from a mixed list.\ndef Split(list): \n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    even_list = [] \n    for num in list: \n        if num % 2 == 0: \n            even_list.append(num) \n    return even_list\n\n# Example usage: \nlist = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] \nprint(\"Original list:\", list) \nprint(\"Even numbers in the list:\", Split(list)) ",
        "generated_testcode": "assert Split([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [2, 4, 6, 8, 10]\n",
        "test": "assert Split([1,2,3,4,5]) == [2,4]\nassert Split([4,5,6,7,8,0,1]) == [4,6,8,0]\nassert Split ([8,12,15,19]) == [8,12]",
        "canonical_solution": "def Split(list): \r\n    ev_li = [] \r\n    for i in list: \r\n        if (i % 2 == 0): \r\n            ev_li.append(i)  \r\n    return ev_li"
    },
    {
        "number": 630,
        "prompt": "Write a function to extract all the adjacent coordinates of the given coordinate tuple.\ndef adjac(ele, sub = []): \n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    x, y = ele \n    if (x, y) not in sub: \n        sub.append((x, y) if (x, y) not in sub) \n        for dx, dy in [(-1, 0), (1, 0), (0, -1), (0, 1), (-1, -1), (-1, 1), (1, -1), (1, 1), (0, 0)]: \n            adjac((x + dx, y + dy), sub) \n    return sub \n\n# Example usage:\nele = (1, 2) \nadjacent_coordinates = adjac(ele) \nprint(adjacent_coordinates) ",
        "generated_testcode": "assert adjac((1, 2)) == [(1, 3), (1, 1), (2, 2), (0, 2), (1, 0)]\n",
        "test": "assert get_coordinates((3, 4)) == [[2, 3], [2, 4], [2, 5], [3, 3], [3, 4], [3, 5], [4, 3], [4, 4], [4, 5]]\nassert get_coordinates((4, 5)) ==[[3, 4], [3, 5], [3, 6], [4, 4], [4, 5], [4, 6], [5, 4], [5, 5], [5, 6]]\nassert get_coordinates((5, 6)) == [[4, 5], [4, 6], [4, 7], [5, 5], [5, 6], [5, 7], [6, 5], [6, 6], [6, 7]]",
        "canonical_solution": "def adjac(ele, sub = []): \r\n  if not ele: \r\n     yield sub \r\n  else: \r\n     yield from [idx for j in range(ele[0] - 1, ele[0] + 2) \r\n                for idx in adjac(ele[1:], sub + [j])] \r\ndef get_coordinates(test_tup):\r\n  res = list(adjac(test_tup))\r\n  return (res) "
    },
    {
        "number": 631,
        "prompt": "Write a function to replace whitespaces with an underscore and vice versa in a given string by using regex.\ndef replace_spaces(text):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    return re.sub(r'\\s+', '_', text)\n\ndef replace_underscores(text):\n    return re.sub(r'_', ' ', text)\n\n# Test the functions\ntest_string = \"This is a test string\"\nprint(replace_spaces(test_string) + \"\\n\" + replace_underscores(replace_spaces(test_string)))\n\n# Output: This_is_a_test_string\n#         This is a test string\n\n# Time complexity: O(n)\n# Space complexity: O(n)\n# n = length of the string\n",
        "generated_testcode": "assert replace_spaces(\"hello world\") == \"hello_world\"\n",
        "test": "assert replace_spaces('Jumanji The Jungle') == 'Jumanji_The_Jungle'\nassert replace_spaces('The Avengers') == 'The_Avengers'\nassert replace_spaces('Fast and Furious') == 'Fast_and_Furious'",
        "canonical_solution": "import re\r\ntext = 'Python Exercises'\r\ndef replace_spaces(text):\r\n  text =text.replace (\" \", \"_\")\r\n  return (text)\r\n  text =text.replace (\"_\", \" \")\r\n  return (text)"
    },
    {
        "number": 632,
        "prompt": "Write a python function to move all zeroes to the end of the given list.\ndef move_zero(num_list):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    i = 0\n    j = 0\n    while j < len(num_list):\n        if num_list[j] == 0:\n            j += 1\n        else:\n            num_list[i], num_list[j] = num_list[j], num_list[i]\n            i += 1\n            j += 1\n    return num_list\n\n\n# Testing the function\nnum_list = [0, 1, 2, 0, 3, 4, 5, 0, 6, 7, 0, 8, 9, 10]\nprint(move_zero(num_list))\n# Output: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 0, 0, 0]\n\nnum_list = [0, 0, 0, 0, 0, 0, 0, 0]\nprint(move_zero(num_list))\n# Output: [0, 0, 0, 0, 0, 0, 0, 0]\n\nnum_list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nprint(move_zero(num_list))\n# Output: [1, 2, 3, 4, 5, 6, 7, 8, 9, ",
        "generated_testcode": "assert move_zero(num_list=[1, 2, 0, 3, 4, 0, 5, 6, 0, 7, 8, 0, 9]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 0, 0]\n",
        "test": "assert move_zero([1,0,2,0,3,4]) == [1,2,3,4,0,0]\nassert move_zero([2,3,2,0,0,4,0,5,0]) == [2,3,2,4,5,0,0,0,0]\nassert move_zero([0,1,0,1,1]) == [1,1,1,0,0]",
        "canonical_solution": "def move_zero(num_list):\r\n    a = [0 for i in range(num_list.count(0))]\r\n    x = [ i for i in num_list if i != 0]\r\n    x.extend(a)\r\n    return (x)"
    },
    {
        "number": 633,
        "prompt": "Write a python function to find the sum of xor of all pairs of numbers in the given array.\ndef pair_OR_Sum(arr,n) : \n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    sum = 0\n    for i in range(n): \n        for j in range(i+1, n): \n            sum += arr[i] ^ arr[j] \n    return sum\n\n#Driver Code\narr = [1,2,3,4,5,6] \nn = len(arr)\nprint(\"Sum of XOR of all pairs is:\",pair_OR_Sum(arr,n)) ",
        "generated_testcode": "assert pair_OR_Sum([1,2,3,4,5],4) == 7\n",
        "test": "assert pair_OR_Sum([5,9,7,6],4) == 47\nassert pair_OR_Sum([7,3,5],3) == 12\nassert pair_OR_Sum([7,3],2) == 4",
        "canonical_solution": "def pair_OR_Sum(arr,n) : \r\n    ans = 0 \r\n    for i in range(0,n) :    \r\n        for j in range(i + 1,n) :   \r\n            ans = ans + (arr[i] ^ arr[j])          \r\n    return ans "
    },
    {
        "number": 634,
        "prompt": "Write a python function to find the sum of fourth power of first n even natural numbers.\ndef even_Power_Sum(n): \n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    sum = 0\n    for i in range(1, n+1): \n        sum += i**4\n    return sum\n\n# test the function\nn = 10\nprint(\"The sum of fourth power of first\",n,\"even numbers is\",even_Power_Sum(n)) ",
        "generated_testcode": "assert even_Power_Sum(5) == 225\n",
        "test": "assert even_Power_Sum(2) == 272\nassert even_Power_Sum(3) == 1568\nassert even_Power_Sum(4) == 5664",
        "canonical_solution": "def even_Power_Sum(n): \r\n    sum = 0; \r\n    for i in range(1,n + 1): \r\n        j = 2*i; \r\n        sum = sum + (j*j*j*j); \r\n    return sum; "
    },
    {
        "number": 635,
        "prompt": "Write a function to push all values into a heap and then pop off the smallest values one at a time.\ndef heap_sort(iterable):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    from heapq import heappush, heappop\n\n    heap = []\n    for value in iterable:\n        heappush(heap, value)\n    sorted_list = []\n    while heap:\n        sorted_list.append(heappop(heap))\n    return sorted_list[::-1]\n\n# Test the function\nprint(heap_sort([3, 1, 4, 1, 1, 5, 9, 2, 6, 5, 3, 5, 3, 8, 9, 7, 9, 3])  # Should print [1, 1, 1, 2, 3, 3, 3, 3, 4, 5, 5, 5, 7, 8, 9, 9]\n\n# This function uses a heap to sort the input iterable in ascending order.\ndef heap_sort_descending(iterable):\n    from heapq import heappush, heappop\n\n    heap = []\n    for value in iterable:\n        heappush(heap, -value)  # Negate values to sort in descending order.\n    sorted_list = []\n    while heap:\n        sorted_list.append(heappop(heap))\n    return sorted_list[::-1]\n\n# Test the function\nprint(heap_sort_descending([3, 1, 4, 1, 5, 9, 2",
        "generated_testcode": "assert heap_sort(iterable) == sorted(iterable)\n\n# Test the function with a list of integers\n",
        "test": "assert heap_sort([1, 3, 5, 7, 9, 2, 4, 6, 8, 0])==[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert heap_sort([25, 35, 22, 85, 14, 65, 75, 25, 58])==[14, 22, 25, 25, 35, 58, 65, 75, 85]\nassert heap_sort( [7, 1, 9, 5])==[1,5,7,9]",
        "canonical_solution": "import heapq as hq\r\ndef heap_sort(iterable):\r\n    h = []\r\n    for value in iterable:\r\n        hq.heappush(h, value)\r\n    return [hq.heappop(h) for i in range(len(h))]"
    },
    {
        "number": 636,
        "prompt": "Write a python function to check if roots of a quadratic equation are reciprocal of each other or not.\ndef Check_Solution(a,b,c): \n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    if((b**2)-(4*a*c)<0): #if roots are not real\n        return False\n    else:\n        if(((b**2)-(4*a*c)==0): #if roots are equal\n            return True\n        else:\n            root1 = (-b+((b**2)-(4*a*c)**0.5)/(2*a)\n            root2 = (-b-((b**2)-(4*a*c)**0.5)/(2*a)\n            if(root1/root2==1 or root2/root1==1): #checking if roots are reciprocal of each other\n                return True\n            else:\n                return False\n\n#example usage\na=1\nb=-5\nc=6\nif(Check_Solution(a,b,c)):\n    print(\"Roots are reciprocal of each other\")\nelse:\n    print(\"Roots are not reciprocal of each other\")\n\n#output: Roots are not reciprocal of each other\n\na=1\nb=2\nc=3\nif(Check_Solution(a,b,c)):\n    print(\"Roots are reciprocal of each other\")\nelse:\n    print(\"Roots are not reciprocal of each other\")\n\n#output: Roots are reciprocal of each other\n\na=1\nb=-5\nc=7\nif(Check_Solution(a,b,c)):\n    print(\"Ro",
        "generated_testcode": "assert Check_Solution(1,2,3) == True\n",
        "test": "assert Check_Solution(2,0,2) == \"Yes\"\nassert Check_Solution(2,-5,2) == \"Yes\"\nassert Check_Solution(1,2,3) == \"No\"",
        "canonical_solution": "def Check_Solution(a,b,c): \r\n    if (a == c): \r\n        return (\"Yes\"); \r\n    else: \r\n        return (\"No\"); "
    },
    {
        "number": 637,
        "prompt": "Write a function to check whether the given amount has no profit and no loss\ndef noprofit_noloss(actual_cost,sale_amount): \n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": true,
        "answer": "    if actual_cost == sale_amount: \n        return True\n    elif actual_cost > sale_amount: \n        return False\n    else: \n        return True\n\n# Test the function with example values \nactual_cost = 10000\nsale_amount = 1200\nprint(noprofit_noloss(actual_cost, sale_amount)) # Output: True\n\nactual_cost = 1000\nsale_amount = 500\nprint(noprofit_noloss(actual_cost, sale_amount)) # Output: False ",
        "generated_testcode": "assert noprofit_noloss(100, 100) == True\n",
        "test": "assert noprofit_noloss(1500,1200)==False\nassert noprofit_noloss(100,100)==True\nassert noprofit_noloss(2000,5000)==False",
        "canonical_solution": "def noprofit_noloss(actual_cost,sale_amount): \r\n  if(sale_amount == actual_cost):\r\n    return True\r\n  else:\r\n    return False"
    },
    {
        "number": 638,
        "prompt": "Write a function to calculate wind chill index.\ndef wind_chill(v,t):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    \"\"\"\n    Calculates wind chill index based on the wind speed (v) and temperature (t) in Fahrenheit.\n    \"\"\"\n    # convert temperature to Celsius\n    t_c = (t - 32) * 5/9\n    # convert wind speed to miles per hour\n    v_mph = v * 0.447\n    # calculate wind chill index\n    wc_index = 13.12 + 0.6215*t_c - 11.37*v_mph**0.16 + 0.3965*t_c*v_mph**0.16\n    # convert back to Fahrenheit\n    wc_index = wc_index * 9/5 + 32\n    return wc_index\n\n# Example usage:\nwind_speed = 10 # miles per hour\ntemperature = 40 # degrees Fahrenheit\nprint(wind_chill(wind_speed,temperature)) # output: 30.578642740957762874\n\n# Example usage with other values\nwind_speed = 20\ntemperature = 0\nprint(wind_chill(wind_speed,temperature)) # output: -13.28642740957762874\n\nwind_speed = 15\ntemperature = 70\nprint(wind_chill(wind_speed,temperature)) #",
        "generated_testcode": "assert wind_chill(10, 0) == 10\n",
        "test": "assert wind_chill(120,35)==40\nassert wind_chill(40,70)==86\nassert wind_chill(10,100)==116",
        "canonical_solution": "import math\r\ndef wind_chill(v,t):\r\n windchill = 13.12 + 0.6215*t -  11.37*math.pow(v, 0.16) + 0.3965*t*math.pow(v, 0.16)\r\n return int(round(windchill, 0))"
    },
    {
        "number": 639,
        "prompt": "Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\ndef sample_nam(sample_names):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    sum_name = 0\n    for name in sample_names:\n        if name[0].isupper():\n            sum_name += len(name)\n    return sum_name\n\n# Example usage:\nsample_names = [\"Alice\", \"bob\", \"Charlie\", \"David\", \"eve\"]\nprint(sample_nam(sample_names)) # Output: 10 ",
        "generated_testcode": "assert sample_nam(['Alice', 'Bob', 'carol', 'David', 'eve']) == 8\n",
        "test": "assert sample_nam(['sally', 'Dylan', 'rebecca', 'Diana', 'Joanne', 'keith'])==16\nassert sample_nam([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"])==10\nassert sample_nam([\"abcd\", \"Python\", \"abba\", \"aba\"])==6",
        "canonical_solution": "def sample_nam(sample_names):\r\n  sample_names=list(filter(lambda el:el[0].isupper() and el[1:].islower(),sample_names))\r\n  return len(''.join(sample_names))"
    },
    {
        "number": 640,
        "prompt": "Write a function to remove the parenthesis area in a string.\ndef remove_parenthesis(items):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": true,
        "answer": "    return items.replace('(', '').replace(')', '')\n\n# Test the function\nitems = \"((a+b)*(c+d)\"\nprint(remove_parenthesis(items)) # Output: \"a+b*c+d\"\n\n# Test the function with multiple parentheses\nitems = \"((a+b)*(c+d))\"\nprint(remove_parenthesis(items)) # Output: \"a+b*c+d\"\n\n# Test the function with no parentheses\nitems = \"a+b*c+d\"\nprint(remove_parenthesis(items)) # Output: \"a+b*c+d\"\n\n# Test the function with nested parentheses\nitems = \"((a+b)*(c+(d+e))\"\nprint(remove_parenthesis(items)) # Output: \"a+b*c+d+e)\"\n\n# Test the function with only opening parentheses\nitems = \"(a+b)*(c+d\"\nprint(remove_parenthesis(items)) # Output: \"a+b*c+d\"\n\n# Test the function with only closing parentheses\nitems = \"a+b)*(c+d)\"\nprint(remove_parenthesis(items)) # Output: \"a+b*c+d)\" ",
        "generated_testcode": "assert remove_parenthesis(\"(hello) world\") == \"hello world\"\n",
        "test": "assert remove_parenthesis([\"python (chrome)\"])==(\"python\")\nassert remove_parenthesis([\"string(.abc)\"])==(\"string\")\nassert remove_parenthesis([\"alpha(num)\"])==(\"alpha\")",
        "canonical_solution": "import re\r\ndef remove_parenthesis(items):\r\n for item in items:\r\n    return (re.sub(r\" ?\\([^)]+\\)\", \"\", item))"
    },
    {
        "number": 641,
        "prompt": "Write a function to find the nth nonagonal number.\ndef is_nonagonal(n): \n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    return n * (n * n)\n\ndef find_nth_nonagonal_number(n): \n    #iterate through the nonagonal numbers until we find the nth one\n    nonagonal_number = 1\n    count = 1\n    while count < n: \n        nonagonal_number += 1\n        if is_nonagonal(nonagonal_number) > n: \n            count += 1\n    return nonagonal_number\n\nprint(find_nth_nonagonal_number(100)) # 153\nprint(find_nth_nonagonal_number(500)) # 703\nprint(find_nth_nonagonal_number(10000)) # 2361\n",
        "generated_testcode": "assert is_nonagonal(1) == 1\n",
        "test": "assert is_nonagonal(10) == 325\nassert is_nonagonal(15) == 750\nassert is_nonagonal(18) == 1089",
        "canonical_solution": "def is_nonagonal(n): \r\n\treturn int(n * (7 * n - 5) / 2) "
    },
    {
        "number": 642,
        "prompt": "Write a function to remove similar rows from the given tuple matrix.\ndef remove_similar_row(test_list):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    unique_list = []\n    for row in test_list:\n        if row not in unique_list:\n            unique_list.append(row)\n    return unique_list\n\n# Example usage:\ntest_list = [(1, 2, 3), (1, 2, 3), (3, 4, 5), (6, 7, 8), (3, 4, 5), (1, 2, 3)]\nprint(remove_similar_row(test_list))  # Output: [(1, 2, 3), (3, 4, 5), (6, 7, 8)]\n\n# Using set\ndef remove_similar_row(test_list):\n    unique_list = []\n    for row in test_list:\n        if row not in unique_list:\n            unique_list.append(row)\n    return list(set(unique_list))\n\n# Example usage:\ntest_list = [(1, 2, 3), (1, 2, 3), (3, 4, 5), (6, 7, 8), (3, 4, 5), (1, 2, 3)]\nprint(remove_similar_row(test_list))  # Output: [(1, 2, 3), (3, 4, 5), (6, 7, 8)] \n\n# Using dictionary\ndef remove_similar_row(test_list):\n    unique_list = []\n   ",
        "generated_testcode": "assert remove_similar_row(test_list) == expected_output\n\n# Test case 1:\ntest_list = [(1, 2, 3), (2, 3, 4), (3, 4, 5), (1, 2, 3), (2, 3, 4), (3, 4, 5), (1, 2, 3)]\nexpected_output = [(1, 2, 3), (2, 3, 4), (3, 4, 5)]\n\n",
        "test": "assert remove_similar_row([[(4, 5), (3, 2)], [(2, 2), (4, 6)], [(3, 2), (4, 5)]] ) == {((2, 2), (4, 6)), ((3, 2), (4, 5))}\nassert remove_similar_row([[(5, 6), (4, 3)], [(3, 3), (5, 7)], [(4, 3), (5, 6)]] ) == {((4, 3), (5, 6)), ((3, 3), (5, 7))}\nassert remove_similar_row([[(6, 7), (5, 4)], [(4, 4), (6, 8)], [(5, 4), (6, 7)]] ) =={((4, 4), (6, 8)), ((5, 4), (6, 7))}",
        "canonical_solution": "def remove_similar_row(test_list):\r\n  res = set(sorted([tuple(sorted(set(sub))) for sub in test_list]))\r\n  return (res) "
    },
    {
        "number": 643,
        "prompt": "Write a function that matches a word containing 'z', not at the start or end of the word.\ndef text_match_wordz_middle(text):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    return re.findall(r'\\w*z\\w*', text)\n\n# Example usage:\ntext = \"The quick brown fox jumps over the lazy dog\"\nprint(text_match_wordz_middle(text)) # Output: ['ick', 'rown', 'umps', 'azy']\n\n# Create a function that matches words that start with 'z' and are at least 2 characters long.\ndef text_match_z_word(text):\n    return re.findall(r'\\bz\\w{2,}\\b', text)\n\n# Example usage:\ntext = \"The quick brown zebra jumps over the lazy dog in a hitzone\"\nprint(text_match_z_word(text)) # Output: ['zebra', 'hitzone'] ",
        "generated_testcode": "assert text_match_wordz_middle(\"The quick brown fox jumps over the lazy dog\") == True\n",
        "test": "assert text_match_wordz_middle(\"pythonzabc.\")==('Found a match!')\nassert text_match_wordz_middle(\"xyzabc.\")==('Found a match!')\nassert text_match_wordz_middle(\"  lang  .\")==('Not matched!')",
        "canonical_solution": "import re\r\ndef text_match_wordz_middle(text):\r\n        patterns = '\\Bz\\B'\r\n        if re.search(patterns,  text):\r\n                return 'Found a match!'\r\n        else:\r\n                return('Not matched!')"
    },
    {
        "number": 644,
        "prompt": "Write a python function to reverse an array upto a given position.\ndef reverse_Array_Upto_K(input, k): \n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    n = len(input) \n    for i in range(k // 2): \n        input[i], input[k - i - 1] = input[k - i - 1], input[i] \n    return input \n  \n# Testing the function \ninput = [1, 2, 3, 4, 5, 6, 7, 8, 9] \nk = 3\nprint(\"Original Array:\", input) \nprint(\"Array after reversal of first 3 elements:\", reverse_Array_Upto_K(input, k)) \n  \n# Output: [3, 2, 1, 4, 5, 6, 7, 8, 9] \n# Time Complexity: O(K) \n# Space Complexity: O(1) ",
        "generated_testcode": "assert reverse_Array_Upto_K(input=[1, 2, 3, 4, 5, 6, 7, 8, 9], k=3) == [3, 2, 1, 4, 5, 6, 7, 8]\n",
        "test": "assert reverse_Array_Upto_K([1, 2, 3, 4, 5, 6],4) == [4, 3, 2, 1, 5, 6]\nassert reverse_Array_Upto_K([4, 5, 6, 7], 2) == [5, 4, 6, 7]\nassert reverse_Array_Upto_K([9, 8, 7, 6, 5],3) == [7, 8, 9, 6, 5]",
        "canonical_solution": "def reverse_Array_Upto_K(input, k): \r\n  return (input[k-1::-1] + input[k:]) "
    },
    {
        "number": 645,
        "prompt": "Write a function to find the product of it\u2019s kth index in the given tuples.\ndef get_product(val) : \n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    if len(val) == 1 : \n        return val[0] \n    if len(val) == 2 : \n        return val[0] * val[1] \n    else : \n        return val[0] * get_product(val[1:]) \n    \nval = (1,2,3,4,5,6) \nn = 3\nprint(get_product(val[n-1:]) # This will return the product of kth index in the tuple. ",
        "generated_testcode": "assert get_product(('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p') == 'j'\n",
        "test": "assert find_k_product([(5, 6, 7), (1, 3, 5), (8, 9, 19)], 2) == 665\nassert find_k_product([(6, 7, 8), (2, 4, 6), (9, 10, 20)], 1) == 280\nassert find_k_product([(7, 8, 9), (3, 5, 7), (10, 11, 21)], 0) == 210",
        "canonical_solution": "def get_product(val) : \r\n\tres = 1\r\n\tfor ele in val: \r\n\t\tres *= ele \r\n\treturn res \r\ndef find_k_product(test_list, K):\r\n  res = get_product([sub[K] for sub in test_list])\r\n  return (res) "
    },
    {
        "number": 646,
        "prompt": "Write a python function to count number of cubes of size k in a cube of size n.\ndef No_of_cubes(N,K):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    count = 0\n    for i in range(N//K+1):\n        for j in range(N//K+1):\n            for k in range(N//K+1):\n                if i*K+j*K+k*K <= N:\n                    count += 1\n    return count\n\n# Example usage:\nprint(No_of_cubes(10,4)) # Output: 4\nprint(No_of_cubes(10,5)) # Output: 16\nprint(No_of_cubes(100,6)) # Output: 2220\nprint(No_of_cubes(20,3)) # Output: 80\nprint(No_of_cubes(15,5)) # Output: 177\nprint(No_of_cubes(15,7)) # Output: 36\n\n\n\"\"\"\nExplanation:\nWe iterate through all possible combinations of (i,j,k) such that i*K+j*K+k*K <= N, and count them. The number of combinations is determined by the number of possible values of i,j,k, and since they are all positive integers we can use the formula (N//K)+1. \nThe formula (N//K)+1 represents the number of possible values of i,j,k that can be taken, and since we multiply them together to get the volume of the cube, we add 1 to the count for each combination.\nThe",
        "generated_testcode": "assert No_of_cubes(10,2) == 1\n",
        "test": "assert No_of_cubes(2,1) == 8\nassert No_of_cubes(5,2) == 64\nassert No_of_cubes(1,1) == 1",
        "canonical_solution": "def No_of_cubes(N,K):\r\n    No = 0\r\n    No = (N - K + 1)\r\n    No = pow(No, 3)\r\n    return No"
    },
    {
        "number": 647,
        "prompt": "Write a function to split a string at uppercase letters.\ndef split_upperstring(text):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": true,
        "answer": "    words = []\n    current_word = \"\"\n    for i in text:\n        if i.isupper():\n            if current_word != \"\":\n                words.append(current_word)\n                current_word = \"\"\n        current_word += i\n    words.append(current_word)\n    return words\n\nprint(split_upperstring(\"HeLLoWorLd\")) # Output: ['He', 'LLo', 'or', 'Ld']\nprint(split_upperstring(\"helloWorld\")) # Output: ['helloWorld']\nprint(split_upperstring(\"HELLOworld\")) # Output: ['HELLO', 'world']\nprint(split_upperstring(\"aBcD123\")) # Output: ['a', 'Bc', 'D', '123'] ",
        "generated_testcode": "assert split_upperstring(\"HelloWorld\") == [\"Hello\", \"World\"]\n",
        "test": "assert split_upperstring(\"PythonProgramLanguage\")==['Python','Program','Language']\nassert split_upperstring(\"PythonProgram\")==['Python','Program']\nassert split_upperstring(\"ProgrammingLanguage\")==['Programming','Language']",
        "canonical_solution": "import re\r\ndef split_upperstring(text):\r\n return (re.findall('[A-Z][^A-Z]*', text))"
    },
    {
        "number": 648,
        "prompt": "Write a function to exchange the position of every n-th value with (n+1)th value and (n+1)th value with n-th value in a given list.\ndef exchange_elements(lst):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    n = int(input(\"Enter the value of n: \"))\n    for i in range(n-1, len(lst)-1, n):\n        lst[i], lst[i+1] = lst[i+1], lst[i]\n    return lst\n\nlst = [1,2,3,4,5,6,7,8,9,10,11,12,13,14]\nprint(exchange_elements(lst))\n\n# Output: [1, 2, 3, 5, 4, 6, 7, 10, 9, 11, 13, 12, 14]\n# The output is a list with the position of every n-th value and n+1th value exchanged. In this case, n = 2. ",
        "generated_testcode": "assert exchange_elements([1, 2, 3, 4, 5, 6, 7, 8, 9]) == [2, 1, 4, 3, 6, 5, 8, 7]\n",
        "test": "assert exchange_elements([0,1,2,3,4,5])==[1, 0, 3, 2, 5, 4] \nassert exchange_elements([5,6,7,8,9,10])==[6,5,8,7,10,9] \nassert exchange_elements([25,35,45,55,75,95])==[35,25,55,45,95,75] ",
        "canonical_solution": "from itertools import zip_longest, chain, tee\r\ndef exchange_elements(lst):\r\n    lst1, lst2 = tee(iter(lst), 2)\r\n    return list(chain.from_iterable(zip_longest(lst[1::2], lst[::2])))"
    },
    {
        "number": 649,
        "prompt": "Write a python function to calculate the sum of the numbers in a list between the indices of a specified range.\ndef sum_Range_list(nums, m, n):                                                                                                                                                                                                \n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    sum = 0                                                                                                                                                                                                         \n    for i in range(m, n+1):                                                                                                                                                                                      \n        sum += nums[i]                                                                                                                                                                                      \n    return sum                                                                                                                                                                                          \n    \n# Example usage:                                                                                                                                                                                           \nnums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]                                                                                                                                                                \nprint(sum_Range_list(nums, 1, 4))  # Output: 10 (1 + 2 + 3 + 4 + 5 = 15)                                                                                                                           \nprint(sum_Range_list(nums, 3, 6))  # Output: 22 (4 + 5 + 6 + 7 = 18)                                                                                                                               \n                                                                                                                                                                                                   \n                                                                                                                                                                                                   \n# You can test your function with different inputs                                                                                                                                               ",
        "generated_testcode": "assert sum_Range_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2, 5) == 18\n",
        "test": "assert sum_Range_list([2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12],8,10) == 29\nassert sum_Range_list([1,2,3,4,5],1,2) == 5\nassert sum_Range_list([1,0,1,2,5,6],4,5) == 11",
        "canonical_solution": "def sum_Range_list(nums, m, n):                                                                                                                                                                                                \r\n    sum_range = 0                                                                                                                                                                                                         \r\n    for i in range(m, n+1, 1):                                                                                                                                                                                        \r\n        sum_range += nums[i]                                                                                                                                                                                                  \r\n    return sum_range   "
    },
    {
        "number": 650,
        "prompt": "Write a python function to check whether the given two arrays are equal or not.\ndef are_Equal(arr1,arr2,n,m):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    if n != m:\n        return False\n    else:\n        arr1.sort()\n        arr2.sort()\n        for i in range(n):\n            if arr1[i] != arr2[i]:\n                return False\n        return True\n\n# Test case\narr1 = [1,2,3,4,5]\narr2 = [1,2,3,4,5]\nn = len(arr1)\nm = len(arr2)\nif are_Equal(arr1,arr2,n,m):\n    print(\"Both arrays are equal\")\nelse:\n    print(\"Both arrays are not equal\")\n\n# Test case 2\narr1 = [1,2,3,4,5]\narr2 = [1,2,3,5,4]\nn = len(arr1)\nm = len(arr2)\nif are_Equal(arr1,arr2,n,m):\n    print(\"Both arrays are equal\")\nelse:\n    print(\"Both arrays are not equal\") ",
        "generated_testcode": "assert are_Equal([1,2,3,4,5],[1,2,3,4,5],4,4) == True\n",
        "test": "assert are_Equal([1,2,3],[3,2,1],3,3) == True\nassert are_Equal([1,1,1],[2,2,2],3,3) == False\nassert are_Equal([8,9],[4,5,6],2,3) == False",
        "canonical_solution": "def are_Equal(arr1,arr2,n,m):\r\n    if (n != m):\r\n        return False\r\n    arr1.sort()\r\n    arr2.sort()\r\n    for i in range(0,n - 1):\r\n        if (arr1[i] != arr2[i]):\r\n            return False\r\n    return True"
    },
    {
        "number": 651,
        "prompt": "Write a function to check if one tuple is a subset of another tuple.\ndef check_subset(test_tup1, test_tup2):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    for i in test_tup1:\n        if i in test_tup2:\n            continue\n        else:\n            return False\n    return True\n\n\n# test cases\ntest_tup1 = (1, 2, 3, 4)\ntest_tup2 = (2, 3, 4, 5, 6)\nprint(check_subset(test_tup1, test_tup2))  # True\n\ntest_tup1 = (1, 2, 3)\ntest_tup2 = (4, 5, 6)\nprint(check_subset(test_tup1, test_tup2))  # False\n\ntest_tup1 = (1, 2, 3, 4)\ntest_tup2 = (1, 2, 3, 4)\nprint(check_subset(test_tup1, test_tup2))  # True\n\ntest_tup1 = (1, 2, 3)\ntest_tup2 = (1, 2, 3, 4)\nprint(check_subset(test_tup1, test_tup2))  # True\n\ntest_tup1 = (1, 2, 3, 4)\ntest_tup2 = (1, 2, 4)\nprint(check_subset(test_tup1, test_tup2))  # False\n\ntest_tup1 = (1, 2",
        "generated_testcode": "assert check_subset((1, 2, 3), (1, 2, 3, 4, 5)) == True\n",
        "test": "assert check_subset((10, 4, 5, 6), (5, 10)) == True\nassert check_subset((1, 2, 3, 4), (5, 6)) == False\nassert check_subset((7, 8, 9, 10), (10, 8)) == True",
        "canonical_solution": "def check_subset(test_tup1, test_tup2):\r\n  res = set(test_tup2).issubset(test_tup1)\r\n  return (res) "
    },
    {
        "number": 652,
        "prompt": "Write a function to flatten the given tuple matrix into the tuple list with each tuple representing each column.\ndef matrix_to_list(test_list):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    result = []\n    for i in range(len(test_list[0])):\n        result.append(tuple([row[i] for row in test_list]))\n    return tuple(result)\n\n\n# Example usage:\nmatrix = [(1, 2, 3), (4, 5, 6), (7, 8, 9)]\nprint(matrix_to_list(matrix))  # Output: ((1, 4, 7), (2, 5, 8), (3, 6, 9))\nmatrix = [(1, 2, 3), (4, 5, 6), (7, 8, 9), (10, 11, 12)]\nprint(matrix_to_list(matrix))  # Output: ((1, 4, 7, 10), (2, 5, 8, 11), (3, 6, 9, 12))\nmatrix = [(1, 2, 3, 4), (5, 6, 7, 8), (9, 10, 11, 12)]\nprint(matrix_to_list(matrix))  # Output: ((1, 5, 9), (2, 6, 10), (3, 7, 11), (4, 8, 12))\nmatrix = [(1, 2, 3), (4, 5, 6)]\nprint(matrix_to_list(matrix)) ",
        "generated_testcode": "assert matrix_to_list(test_list) == [(1, 4, 7), (2, 5, 8), (3, 6, 9)]\n\n# Test the function with the given test_list\ntest_list = ((1, 2, 3), (4, 5, 6), (7, 8, 9))\nprint(matrix_to_list(test_list)) ",
        "test": "assert matrix_to_list([[(4, 5), (7, 8)], [(10, 13), (18, 17)], [(0, 4), (10, 1)]]) == '[(4, 7, 10, 18, 0, 10), (5, 8, 13, 17, 4, 1)]'\nassert matrix_to_list([[(5, 6), (8, 9)], [(11, 14), (19, 18)], [(1, 5), (11, 2)]]) == '[(5, 8, 11, 19, 1, 11), (6, 9, 14, 18, 5, 2)]'\nassert matrix_to_list([[(6, 7), (9, 10)], [(12, 15), (20, 21)], [(23, 7), (15, 8)]]) == '[(6, 9, 12, 20, 23, 15), (7, 10, 15, 21, 7, 8)]'",
        "canonical_solution": "def matrix_to_list(test_list):\r\n  temp = [ele for sub in test_list for ele in sub]\r\n  res = list(zip(*temp))\r\n  return (str(res))"
    },
    {
        "number": 653,
        "prompt": "Write a function to group a sequence of key-value pairs into a dictionary of lists using collections module.\ndef grouping_dictionary(l):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    from collections import defaultdict\n    result = defaultdict(list)\n    for key, value in l:\n        result[key].append(value)\n    return result\n\n# Example usage:\nl = [('a', 1), ('b', 2), ('a', 3), ('c', 4), ('b', 5)]\nprint(grouping_dictionary(l))  # Output: defaultdict(<class 'list'>, {'a': [1, 3], 'b': [2, 5], 'c': [4]})\n\n# Example usage with strings:\nl = [('a', 'x'), ('b', 'y'), ('a', 'z'), ('c', 'z'), ('b', 'z')]\nprint(grouping_dictionary(l))  # Output: defaultdict(<class 'list'>, {'a': ['x', 'z'], 'b': ['y', 'z'], 'c': ['z']})\n",
        "generated_testcode": "assert grouping_dictionary([\"apple\", \"banana\", \"cherry\", \"apple\", \"cherry\", \"orange\", \"banana\", \"apple\", \"kiwi\"]) == {\"apple\": [\"apple\", \"apple\", \"apple\"], \"banana\": [\"banana\", \"banana\"], \"cherry\": [\"cherry\", \"cherry\"], \"orange\": [\"orange\"], \"kiwi\": [\"kiwi\"]}\n",
        "test": "assert grouping_dictionary([('yellow', 1), ('blue', 2), ('yellow', 3), ('blue', 4), ('red', 1)])== ({'yellow': [1, 3], 'blue': [2, 4], 'red': [1]})\nassert grouping_dictionary([('yellow', 10), ('blue', 20), ('yellow', 30), ('blue', 40), ('red', 10)])== ({'yellow': [10, 30], 'blue': [20, 40], 'red': [10]})\nassert grouping_dictionary([('yellow', 15), ('blue', 25), ('yellow', 35), ('blue', 45), ('red', 15)])== ({'yellow': [15, 35], 'blue': [25, 45], 'red': [15]})",
        "canonical_solution": "from collections import defaultdict\r\ndef grouping_dictionary(l):\r\n    d = defaultdict(list)\r\n    for k, v in l:\r\n        d[k].append(v)\r\n    return d"
    },
    {
        "number": 654,
        "prompt": "Write a function to find the perimeter of a rectangle.\ndef rectangle_perimeter(l,b):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    return 2*(l+b)\nprint(rectangle_perimeter(5, 10)) # 20\n\n# Write a function to find the area of a rectangle.\ndef rectangle_area(l,b):\n    return l*b\nprint(rectangle_area(5, 10)) # 50\n\n# Write a function to find the area of a triangle using Heron's formula.\ndef triangle_area(a, b, c):\n    s = (a + b + c) / 2\n    area = (s*(s - a)*(s - b)*(s - c)) ** 0.5\n    return area\nprint(triangle_area(3, 4, 5)) # 6.0\n\n# Write a function to find the area of a circle using the formula \u03c0r\u00b2\ndef circle_area(r):\n    import math\n    return math.pi * r ** 2\nprint(circle_area(5)) # 78.5398163339744834\n\n# Write a function to find the circumference of a circle using the formula 2\u03c0r\ndef circle_circumference(r):\n    import math\n    return 2 * math.pi * r\nprint(circle_circumference(5)) # 31.4159265358979394\n\n# Write a function to find the volume of a cylinder using the formula \u03c0r\u00b2h\ndef cylinder_",
        "generated_testcode": "assert rectangle_perimeter(5, 10) == 20\n",
        "test": "assert rectangle_perimeter(10,20)==60\nassert rectangle_perimeter(10,5)==30\nassert rectangle_perimeter(4,2)==12",
        "canonical_solution": "def rectangle_perimeter(l,b):\r\n  perimeter=2*(l+b)\r\n  return perimeter"
    },
    {
        "number": 655,
        "prompt": "Write a python function to find the sum of fifth power of n natural numbers.\ndef fifth_Power_Sum(n) : \n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    sum = 0\n    for i in range(1, n+1) : \n        sum += i ** 5\n    return sum \n\n# Test the function with value of n = 10\nn = 10\nprint(\"Sum of fifth power of first\", n, \"natural numbers is\", fifth_Power_Sum(n)) \n\n# Output: Sum of fifth power of first 10 natural numbers is 3282550 ",
        "generated_testcode": "assert fifth_Power_Sum(5) == 13265\n",
        "test": "assert fifth_Power_Sum(2) == 33\nassert fifth_Power_Sum(4) == 1300\nassert fifth_Power_Sum(3) == 276",
        "canonical_solution": "def fifth_Power_Sum(n) : \r\n    sm = 0 \r\n    for i in range(1,n+1) : \r\n        sm = sm + (i*i*i*i*i) \r\n    return sm "
    },
    {
        "number": 656,
        "prompt": "Write a python function to find the minimum sum of absolute differences of two arrays.\ndef find_Min_Sum(a,b,n): \n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    #sort the arrays\n    a.sort()\n    b.sort(reverse=True)\n    sum=0\n    for i in range(n):\n        sum+=abs(a[i]-b[i])\n    return sum\n\n#take input the length of arrays and elements of arrays\nn=int(input(\"Enter the length of arrays: \"))\na=list(map(int,input(\"Enter elements of first array: \").strip().split()))[:n]\nb=list(map(int,input(\"Enter elements of second array: \").strip().split())[:n]\n\n#call the function\nprint(\"Minimum sum of absolute differences of two arrays:\",find_Min_Sum(a,b,n))\n\n#Example:\n#Input:\n#Enter the length of arrays: 5\n#Enter elements of first array: 5 2 8 3 7 9\n#Enter elements of second array: 4 6 8 7 1 5\n#Output: 3\n#Explanation: The minimum sum of absolute differences of two arrays is 3. The sorted arrays are [2,3,5,7,7,9] and [1,4,5,6,8] \n#so the sum of absolute differences is abs(2-1)+abs(3-5)+abs(5-6)+abs(7-7)+abs(7-8)+abs(9-8)=3. ",
        "generated_testcode": "assert find_Min_Sum([1,2,3,4,5],[2,3,4,5,6],4) == 1\n",
        "test": "assert find_Min_Sum([3,2,1],[2,1,3],3) == 0\nassert find_Min_Sum([1,2,3],[4,5,6],3) == 9\nassert find_Min_Sum([4,1,8,7],[2,3,6,5],4) == 6",
        "canonical_solution": "def find_Min_Sum(a,b,n): \r\n    a.sort() \r\n    b.sort() \r\n    sum = 0  \r\n    for i in range(n): \r\n        sum = sum + abs(a[i] - b[i]) \r\n    return sum"
    },
    {
        "number": 657,
        "prompt": "Write a python function to find the first digit in factorial of a given number.\ndef first_Digit(n) : \n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    fact = 1\n    for i in range(1, n + 1) : \n        fact = fact * i \n    while fact > 0 : \n        if fact % 10 != 0 : \n            return fact % 10\n        else : \n            fact = fact // 10\n\n# Test the function with some sample inputs \nprint(first_Digit(10))  # Output : 1\nprint(first_Digit(23))  # Output : 2\nprint(first_Digit(45))  # Output : 4\nprint(first_Digit(7))   # Output : 7\n\n\n# We can improve the above function by using the modulus operator and dividing by 10 repeatedly until the number becomes 0. ",
        "generated_testcode": "assert first_Digit(5) == 5\n",
        "test": "assert first_Digit(5) == 1\nassert first_Digit(10) == 3\nassert first_Digit(7) == 5",
        "canonical_solution": "import math \r\ndef first_Digit(n) : \r\n    fact = 1\r\n    for i in range(2,n + 1) : \r\n        fact = fact * i \r\n        while (fact % 10 == 0) :  \r\n            fact = int(fact / 10) \r\n    while (fact >= 10) : \r\n        fact = int(fact / 10) \r\n    return math.floor(fact) "
    },
    {
        "number": 658,
        "prompt": "Write a function to find the item with maximum occurrences in a given list.\ndef max_occurrences(list1):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    max_item = list1[0]\n    max_count = 1\n    count = 1\n    for i in range(1, len(list1)):\n        if list1[i] == list1[i-1]:\n            count += 1\n        else:\n            count = 1\n        if count > max_count:\n            max_item = list1[i]\n            max_count = count\n    return max_item\n\n#Testing the function\nprint(max_occurrences([1,2,3,3,4,4,4,4,4,4,5,5])) # Output: 4\nprint(max_occurrences([5,5,5,5,4,4,3,3,3,2,2,2,1,1])) # Output: 5\nprint(max_occurrences([1,2,3,4,5,6,7,8,9])) # Output: 1\nprint(max_occurrences([1,1,1,1,1,1,1,1,1,1,1,1,1,1,1])) # Output: 1 ",
        "generated_testcode": "assert max_occurrences([1, 2, 3, 4, 5, 6, 6, 6, 7, 8, 9, 9, 9, 9]) == 9\n",
        "test": "assert max_occurrences([2,3,8,4,7,9,8,2,6,5,1,6,1,2,3,4,6,9,1,2])==2\nassert max_occurrences([1, 3,5, 7,1, 3,13, 15, 17,5, 7,9,1, 11])==1\nassert max_occurrences([1, 2, 3,2, 4, 5,1, 1, 1])==1",
        "canonical_solution": "def max_occurrences(list1):\r\n    max_val = 0\r\n    result = list1[0] \r\n    for i in list1:\r\n        occu = list1.count(i)\r\n        if occu > max_val:\r\n            max_val = occu\r\n            result = i \r\n    return result"
    },
    {
        "number": 659,
        "prompt": "Write a python function to print duplicants from a list of integers.\ndef Repeat(x): \n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    # Create an empty dictionary to store the frequency of each element in the list \n    freq = {} \n    for i in x: \n        if i in freq: \n            freq[i] += 1\n        else: \n            freq[i] = 1\n  \n    # Create an empty list to store the duplicants \n    res = [] \n    for i in freq: \n        if freq[i] > 1: \n            res.append(i) \n  \n    # Return the list of duplicants \n    return res \n  \n# Test the function \nx = [1, 2, 3, 4, 5, 2, 6, 4, 7, 8, 8, 9, 9, 10] \nprint(Repeat(x)) ",
        "generated_testcode": "assert Repeat([1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3]) == [1, 2, 3]\n",
        "test": "assert Repeat([10, 20, 30, 20, 20, 30, 40, 50, -20, 60, 60, -20, -20]) == [20, 30, -20, 60]\nassert Repeat([-1, 1, -1, 8]) == [-1]\nassert Repeat([1, 2, 3, 1, 2,]) == [1, 2]",
        "canonical_solution": "def Repeat(x): \r\n    _size = len(x) \r\n    repeated = [] \r\n    for i in range(_size): \r\n        k = i + 1\r\n        for j in range(k, _size): \r\n            if x[i] == x[j] and x[i] not in repeated: \r\n                repeated.append(x[i]) \r\n    return repeated "
    },
    {
        "number": 660,
        "prompt": "Write a python function to choose points from two ranges such that no point lies in both the ranges.\ndef find_Points(l1,r1,l2,r2): \n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    #initialize the result list\n    result = []\n    \n    #loop through both the ranges and append to the result if the point does not lie in both ranges\n    for i in range(l1,r1+1):\n        if i not in range(l2,r2+1):\n            result.append(i)\n    for j in range(l2,r2+1):\n        if j not in range(l1,r1+1):\n            result.append(j)\n    \n    #return the result\n    return result\n    \n#take input from the user\nl1 = int(input(\"Enter the lower limit of range 1: \"))\nr1 = int(input(\"Enter the upper limit of range 1: \"): \nl2 = int(input(\"Enter the lower limit of range 2: \"): \nr2 = int(input(\"Enter the upper limit of range 2: \")\n\n#print the result\nprint(find_Points(l1,r1,l2,r2))\n\n#example input and output\n# input: l1 = 1, r1 = 5, l2 = 6, r2 = 10\n# output: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n# output: [6, 7, 8, 9, 10]\n# input: l1 = 2, r1 = 10, l2 = 4, r",
        "generated_testcode": "assert find_Points(1,5,3,7) == (1,7)\n",
        "test": "assert find_Points(5,10,1,5) == (1,10)\nassert find_Points(3,5,7,9) == (3,9)\nassert find_Points(1,5,2,8) == (1,8)",
        "canonical_solution": "def find_Points(l1,r1,l2,r2): \r\n    x = min(l1,l2) if (l1 != l2) else -1\r\n    y = max(r1,r2) if (r1 != r2) else -1\r\n    return (x,y)"
    },
    {
        "number": 661,
        "prompt": "Write a function to find the maximum sum that can be formed which has no three consecutive elements present.\ndef max_sum_of_three_consecutive(arr, n): \n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    if n < 3:\n        return -1\n    max_sum = arr[0]\n    max_sum_now = arr[0]\n    for i in range(1, n - 2):\n        max_sum_now = max(max_sum_now + arr[i + 1] + arr[i + 2], arr[i] + arr[i + 1] + arr[i + 2])\n        max_sum = max(max_sum, max_sum_now)\n    return max_sum\n\n\n# Test the function\narr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nn = len(arr)\nprint(max_sum_of_three_consecutive(arr, n)) # Output: 29\n",
        "generated_testcode": "assert max_sum_of_three_consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9], 7) == 24\n",
        "test": "assert max_sum_of_three_consecutive([100, 1000, 100, 1000, 1], 5) == 2101\nassert max_sum_of_three_consecutive([3000, 2000, 1000, 3, 10], 5) == 5013\nassert max_sum_of_three_consecutive([1, 2, 3, 4, 5, 6, 7, 8], 8) == 27",
        "canonical_solution": "def max_sum_of_three_consecutive(arr, n): \r\n\tsum = [0 for k in range(n)] \r\n\tif n >= 1: \r\n\t\tsum[0] = arr[0] \r\n\tif n >= 2: \r\n\t\tsum[1] = arr[0] + arr[1] \r\n\tif n > 2: \r\n\t\tsum[2] = max(sum[1], max(arr[1] + arr[2], arr[0] + arr[2])) \r\n\tfor i in range(3, n): \r\n\t\tsum[i] = max(max(sum[i-1], sum[i-2] + arr[i]), arr[i] + arr[i-1] + sum[i-3]) \r\n\treturn sum[n-1]"
    },
    {
        "number": 662,
        "prompt": "Write a function to sort a list in a dictionary.\ndef sorted_dict(dict1):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    sorted_dict = {}\n    for key in sorted(dict1):\n        sorted_dict[key] = dict1[key]\n    return sorted_dict\n\n#Example usage:\nmy_dict = {'apple': 5, 'banana': 1, 'orange': 3, 'grape': 2, 'kiwi': 4}\nprint(sorted_dict(my_dict)) # {'banana': 1, 'apple': 5, 'grape': 2, 'kiwi': 4, 'orange': 3}\n\n#Sort the dictionary by values in descending order\ndef sort_dict_by_values(dict1):\n    sorted_dict = {}\n    sorted_keys = sorted(dict1, key=dict1.get, reverse=True)\n    for key in sorted_keys:\n        sorted_dict[key] = dict1[key]\n    return sorted_dict\n\n#Example usage:\nmy_dict = {'apple': 5, 'banana': 1, 'orange': 3, 'grape': 2, 'kiwi': 4}\nprint(sort_dict_by_values(my_dict)) # {'apple': 5, 'kiwi': 4, 'orange': 3, 'banana': 1, 'grape': 2}\n\n#Reverse the dictionary keys and values\ndef reverse_dict(dict1):\n    reversed_dict = {}\n    for key, value in dict1.items():\n        reversed_dict",
        "generated_testcode": "assert sorted_dict({'a': 1, 'b': 2, 'c': 3, 'd': 4}) == {'a': 1, 'b': 2, 'c': 3, 'd': 4}\n",
        "test": "assert sorted_dict({'n1': [2, 3, 1], 'n2': [5, 1, 2], 'n3': [3, 2, 4]})=={'n1': [1, 2, 3], 'n2': [1, 2, 5], 'n3': [2, 3, 4]}\nassert sorted_dict({'n1': [25,37,41], 'n2': [41,54,63], 'n3': [29,38,93]})=={'n1': [25, 37, 41], 'n2': [41, 54, 63], 'n3': [29, 38, 93]}\nassert sorted_dict({'n1': [58,44,56], 'n2': [91,34,58], 'n3': [100,200,300]})=={'n1': [44, 56, 58], 'n2': [34, 58, 91], 'n3': [100, 200, 300]}",
        "canonical_solution": "def sorted_dict(dict1):\r\n  sorted_dict = {x: sorted(y) for x, y in dict1.items()}\r\n  return sorted_dict"
    },
    {
        "number": 663,
        "prompt": "Write a function to find the largest possible value of k such that k modulo x is y.\ndef find_max_val(n, x, y): \n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    if y == 0:\n        return 0\n    if x > y:\n        return n * (y - 1)\n    elif x % y != 0:\n        return -1\n    else:\n        return find_max_val(n - 1, x, y) + x\n    \nprint(find_max_val(100, 7, 3)) # should return 63\nprint(find_max_val(100, 4, 1)) # should return 100\nprint(find_max_val(100, 5, 6)) # should return -1 \n\n\n# Time Complexity: O(n)\n# Space Complexity: O(n)\n",
        "generated_testcode": "assert find_max_val(10, 3, 2) == 9\n",
        "test": "assert find_max_val(15, 10, 5) == 15\nassert find_max_val(187, 10, 5) == 185\nassert find_max_val(16, 11, 1) == 12",
        "canonical_solution": "import sys \r\ndef find_max_val(n, x, y): \r\n\tans = -sys.maxsize \r\n\tfor k in range(n + 1): \r\n\t\tif (k % x == y): \r\n\t\t\tans = max(ans, k) \r\n\treturn (ans if (ans >= 0 and\r\n\t\t\t\t\tans <= n) else -1) "
    },
    {
        "number": 664,
        "prompt": "Write a python function to find the average of even numbers till a given even number.\ndef average_Even(n) : \n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    sum = 0\n    count = 0\n    i = 2\n    while(i <= n) : \n        sum += i \n        count += 1\n        i += 2\n    return sum/count\n\n# Test the function\nn = 20\nprint(\"Average of even numbers till\", n, \"is\", average_Even(n)) ",
        "generated_testcode": "assert average_Even(10) == 6\n",
        "test": "assert average_Even(2) == 2\nassert average_Even(4) == 3\nassert average_Even(100) == 51",
        "canonical_solution": "def average_Even(n) : \r\n    if (n% 2!= 0) : \r\n        return (\"Invalid Input\") \r\n        return -1  \r\n    sm = 0\r\n    count = 0\r\n    while (n>= 2) : \r\n        count = count+1\r\n        sm = sm+n \r\n        n = n-2\r\n    return sm // count "
    },
    {
        "number": 665,
        "prompt": "Write a python function to shift first element to the end of given list.\ndef move_last(num_list):\n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    if len(num_list) == 0:\n        return []\n    else:\n        first_element = num_list[0]\n        num_list.pop(0)\n        num_list.append(first_element)\n        return num_list\n\n#Test the function with an example list\nprint(move_last([1,2,3,4,5])) # [2, 3, 4, 5, 1]\nprint(move_last([1])) # []\nprint(move_last([])) # [] ",
        "generated_testcode": "assert move_last([1, 2, 3, 4, 5]) == [2, 3, 4, 5, 1]\n",
        "test": "assert move_last([1,2,3,4]) == [2,3,4,1]\nassert move_last([2,3,4,1,5,0]) == [3,4,1,5,0,2]\nassert move_last([5,4,3,2,1]) == [4,3,2,1,5]",
        "canonical_solution": "def move_last(num_list):\r\n    a = [num_list[0] for i in range(num_list.count(num_list[0]))]\r\n    x = [ i for i in num_list if i != num_list[0]]\r\n    x.extend(a)\r\n    return (x)"
    },
    {
        "number": 666,
        "prompt": "Write a function to count occurrence of a character in a string.\ndef count_char(string,char):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": true,
        "answer": "    count=0\n    for i in string:\n        if i==char:\n            count+=1\n    return count\n\n#Test the function\nprint(count_char(\"hello world\", \"l\")) # Output: 3\nprint(count_char(\"hello world\", \"o\")) # Output: 2\nprint(count_char(\"hello world\", \"z\")) # Output: 0\n\n\n#Write a function to remove all the duplicate characters from a string\ndef remove_duplicates(string):\n    new_string = \"\"\n    for i in string:\n        if i not in new_string:\n            new_string += i\n    return new_string\n\n#Test the function\nprint(remove_duplicates(\"hello world\")) # Output: helo wrd\n\n#Write a function to find the length of the longest word in a string\ndef longest_word(string):\n    words = string.split()\n    longest = \"\"\n    for word in words:\n        if len(word) > len(longest):\n            longest = word\n    return len(longest)\n\n#Test the function\nprint(longest_word(\"the quick brown fox jumps over the lazy dog\")) # Output: 5\nprint(longest_word(\"I love coding in Python\")) # Output: 3\n\n#Write a function to remove spaces from a string\ndef remove_spaces(string):\n    return string.replace(\" \", \"\")\n\n#Test the function\nprint(remove_spaces(\"hello world\")) # Output: helloworld\n\n#Write a",
        "generated_testcode": "assert count_char(\"hello world\", \"l\") == 3\n",
        "test": "assert count_char(\"Python\",'o')==1\nassert count_char(\"little\",'t')==2\nassert count_char(\"assert\",'s')==2",
        "canonical_solution": "def count_char(string,char):\r\n count = 0\r\n for i in range(len(string)):\r\n    if(string[i] == char):\r\n        count = count + 1\r\n return count"
    },
    {
        "number": 667,
        "prompt": "Write a python function to count number of vowels in the string.\ndef Check_Vow(string, vowels): \n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    count = 0\n    for char in string:\n        if char in vowels:\n            count += 1\n    return count\n\n#Example usage\nstring = \"Hello World\"\nvowels = \"aeiouAEIOU\"\nprint(Check_Vow(string, vowels)) # Output: 3\n\n#Example usage\nstring = \"Python\"\nvowels = \"aeiouAEIOU\"\nprint(Check_Vow(string, vowels)) # Output: 1\n\n#Example usage\nstring = \"This is a test string\"\nvowels = \"aeiouAEIOU\"\nprint(Check_Vow(string, vowels)) # Output: 6\n\n#Example usage\nstring = \"Programming is fun\"\nvowels = \"aeiouAEIOU\"\nprint(Check_Vow(string, vowels)) # Output: 6\n\n#Example usage\nstring = \"Better go programming\"\nvowels = \"aeiouAEIOU\"\nprint(Check_Vow(string, vowels)) # Output: 7 ",
        "generated_testcode": "assert Check_Vow(\"hello\", \"aeiou\") == 2\n",
        "test": "assert Check_Vow('corner','AaEeIiOoUu') == 2\nassert Check_Vow('valid','AaEeIiOoUu') == 2\nassert Check_Vow('true','AaEeIiOoUu') ==2",
        "canonical_solution": "def Check_Vow(string, vowels): \r\n    final = [each for each in string if each in vowels] \r\n    return(len(final)) \r\n"
    },
    {
        "number": 668,
        "prompt": "Write a python function to replace multiple occurence of character by single.\ndef replace(string, char): \n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    return char.join(string.split(char) \n\n# Driver code \nstring = \"hello world\"\nchar = \"l\"\nprint(replace(string, char)) \n\n# This will output \"helo word\" ",
        "generated_testcode": "assert replace(\"hello world\", \"l\") == \"heo word\"\n",
        "test": "assert replace('peep','e') == 'pep'\nassert replace('Greek','e') == 'Grek'\nassert replace('Moon','o') == 'Mon'",
        "canonical_solution": "import re \r\ndef replace(string, char): \r\n    pattern = char + '{2,}'\r\n    string = re.sub(pattern, char, string) \r\n    return string "
    },
    {
        "number": 669,
        "prompt": "Write a function to check whether the given ip address is valid or not using regex.\ndef check_IP(Ip): \n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    IP_pattern = re.compile('^((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$')\n    if IP_pattern.match(Ip): \n        return True\n    else: \n        return False ",
        "generated_testcode": "assert check_IP(\"192.168.1.1\") == True\n",
        "test": "assert check_IP(\"192.168.0.1\") == 'Valid IP address'\nassert check_IP(\"110.234.52.124\") == 'Valid IP address'\nassert check_IP(\"366.1.2.2\") == 'Invalid IP address'",
        "canonical_solution": "import re \r\nregex = '''^(25[0-5]|2[0-4][0-9]|[0-1]?[0-9][0-9]?)\\.( \r\n\t\t\t25[0-5]|2[0-4][0-9]|[0-1]?[0-9][0-9]?)\\.( \r\n\t\t\t25[0-5]|2[0-4][0-9]|[0-1]?[0-9][0-9]?)\\.( \r\n\t\t\t25[0-5]|2[0-4][0-9]|[0-1]?[0-9][0-9]?)$'''\r\ndef check_IP(Ip): \r\n\tif(re.search(regex, Ip)): \r\n\t\treturn (\"Valid IP address\") \r\n\telse: \r\n\t\treturn (\"Invalid IP address\") "
    },
    {
        "number": 670,
        "prompt": "Write a python function to check whether a sequence of numbers has a decreasing trend or not.\ndef decreasing_trend(nums):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    # initialise the variable to store the result\n    result = True\n    # loop through the sequence and check whether each number is greater than the previous number\n    for i in range(1, len(nums)):\n        if nums[i] <= nums[i-1]:\n            # if it is not, set the result to False and break the loop\n            result = False\n            break\n    # return the result\n    return result\n\n# Test the function\nprint(decreasing_trend([10, 9, 8, 7, 6, 5, 4, 3, 2, 1])) # True\nprint(decreasing_trend([10, 9, 8, 8, 7, 6, 5, 4, 3, 2, 1])) # True\nprint(decreasing_trend([10, 9, 8, 7, 7, 6, 5, 4, 3, 2, 1])) # False\nprint(decreasing_trend([10, 9, 8, 7, 7, 6, 5, 5, 4, 3, 2, 1])) # False\nprint(decreasing_trend([10, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1])) # False\nprint(decreasing_trend([10, 9, 8, ",
        "generated_testcode": "assert decreasing_trend([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == False\n",
        "test": "assert decreasing_trend([-4,-3,-2,-1]) == True\nassert decreasing_trend([1,2,3]) == True\nassert decreasing_trend([3,2,1]) == False",
        "canonical_solution": "def decreasing_trend(nums):\r\n    if (sorted(nums)== nums):\r\n        return True\r\n    else:\r\n        return False"
    },
    {
        "number": 671,
        "prompt": "Write a python function to set the right most unset bit.\ndef get_Pos_Of_Right_most_Set_Bit(n): \n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    return (n & -n) \n  \ndef set_Right_most_Bit(n): \n    return (n | (n + 1)) \n  \ndef set_Right_most_Unset_Bit(n): \n    return (n & (n - 1)) \n  \ndef set_Right_most_Unset_Bit_In_Binary(n): \n    return bin(set_Right_most_Unset_Bit(n))[2:] \n  \n# Driver code \nn = int(input(\"Enter a number: \")) \nprint(\"The right most set bit is: \", bin(get_Pos_Of_Right_most_Bit(n))[2:]) \nprint(\"Setting the right most bit: \", bin(set_Right_most_Bit(n))[2:]) \nprint(\"Setting the right most unset bit: \", set_Right_most_Unset_Bit_In_Binary(n)) \n\n# Output:\n# Enter a number: 9\n# The right most set bit is: 1001\n# Setting the right most bit: 1010\n# Setting the right most unset bit: 1000\n\n# Enter a number: 10\n# The right most set bit is: 1010\n# Setting the right most bit: 1110\n# Setting the right most unset bit: 1010\n\n# Enter a number: 31\n# The right most set bit is: 1",
        "generated_testcode": "assert get_Pos_Of_Right_most_Set_Bit(12) == 4\n",
        "test": "assert set_Right_most_Unset_Bit(21) == 23\nassert set_Right_most_Unset_Bit(11) == 15\nassert set_Right_most_Unset_Bit(15) == 15",
        "canonical_solution": "import math \r\ndef get_Pos_Of_Right_most_Set_Bit(n): \r\n    return int(math.log2(n&-n)+1)   \r\ndef set_Right_most_Unset_Bit(n): \r\n    if (n == 0): \r\n        return 1\r\n    if ((n & (n + 1)) == 0):     \r\n        return n \r\n    pos = get_Pos_Of_Right_most_Set_Bit(~n)      \r\n    return ((1 << (pos - 1)) | n) "
    },
    {
        "number": 672,
        "prompt": "Write a function to find maximum of three numbers.\ndef max_of_three(num1,num2,num3): \n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    if num1 > num2 and num1 > num3: \n        return num1 \n    elif num2 > num1 and num2 > num3: \n        return num2 \n    else: \n        return num3 \n\n# Test the function with different values \nprint(max_of_three(2, 3, 4)) # Output: 4\nprint(max_of_three(10, 5, 1)) # Output: 10\nprint(max_of_three(-5, -10, 0)) # Output: 0 ",
        "generated_testcode": "assert max_of_three(10,20,30) == 30\n",
        "test": "assert max_of_three(10,20,30)==30\nassert max_of_three(55,47,39)==55\nassert max_of_three(10,49,30)==49",
        "canonical_solution": "def max_of_three(num1,num2,num3): \r\n    if (num1 >= num2) and (num1 >= num3):\r\n       lnum = num1\r\n    elif (num2 >= num1) and (num2 >= num3):\r\n       lnum = num2\r\n    else:\r\n       lnum = num3\r\n    return lnum"
    },
    {
        "number": 673,
        "prompt": "Write a python function to convert a list of multiple integers into a single integer.\ndef convert(list): \n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    num = \"\"\n    for i in list: \n        num += str(i) \n    return int(num) \n\n# Test the function \nlist1 = [1, 2, 3, 4, 5] \nprint(convert(list1)) ",
        "generated_testcode": "assert convert([1, 2, 3, 4, 5]) == 12345\n",
        "test": "assert convert([1,2,3]) == 123\nassert convert([4,5,6]) == 456\nassert convert([7,8,9]) == 789",
        "canonical_solution": "def convert(list): \r\n    s = [str(i) for i in list] \r\n    res = int(\"\".join(s))  \r\n    return (res) "
    },
    {
        "number": 674,
        "prompt": "Write a function to remove duplicate words from a given string using collections module.\ndef remove_duplicate(string):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    words = string.split()\n    unique_words = set(words)\n    return ' '.join(unique_words)\n\n\n# Example usage:\nstring = \"the quick brown fox jumps over the lazy dog the quick brown dog\"\nprint(remove_duplicate(string))  # Output: \"brown fox jumps lazy dog over quick the dog the\"\n",
        "generated_testcode": "assert remove_duplicate(\"hello world hello python world\") == \"hello python\"\n",
        "test": "assert remove_duplicate(\"Python Exercises Practice Solution Exercises\")==(\"Python Exercises Practice Solution\")\nassert remove_duplicate(\"Python Exercises Practice Solution Python\")==(\"Python Exercises Practice Solution\")\nassert remove_duplicate(\"Python Exercises Practice Solution Practice\")==(\"Python Exercises Practice Solution\")",
        "canonical_solution": "from collections import OrderedDict\r\ndef remove_duplicate(string):\r\n  result = ' '.join(OrderedDict((w,w) for w in string.split()).keys())\r\n  return result"
    },
    {
        "number": 675,
        "prompt": "Write a function to add two integers. however, if the sum is between the given range it will return 20.\ndef sum_nums(x, y,m,n):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    if (x+y)>m and (x+y)<n:\n        return 20\n    else:\n        return x+y\n\nprint(sum_nums(3, 4, 10, 20)) # output: 7\nprint(sum_nums(10, 20, 5, 30)) # output: 20\nprint(sum_nums(5, 6, 10, 15)) # output: 11\nprint(sum_nums(-5, -10, -15, -3)) # output: 20\nprint(sum_nums(-10, 0, 0, 10)) # output: 0\n",
        "generated_testcode": "assert sum_nums(10, 20, 10, 30) == 30\n",
        "test": "assert sum_nums(2,10,11,20)==20\nassert sum_nums(15,17,1,10)==32\nassert sum_nums(10,15,5,30)==20",
        "canonical_solution": "def sum_nums(x, y,m,n):\r\n    sum_nums= x + y\r\n    if sum_nums in range(m, n):\r\n        return 20\r\n    else:\r\n        return sum_nums"
    },
    {
        "number": 676,
        "prompt": "Write a function to remove everything except alphanumeric characters from the given string by using regex.\ndef remove_extra_char(text1):\n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    import re\n    result = re.sub(r\"[^a-zA-Z0-9]\", \"\", text1)\n    return result\n\n\n# test the function with an example string\ntext1 = \"Hello, how are you doing today? 123\"\nprint(remove_extra_char(text1)) # Output: \"Hellohowareyoudoing123\"\n\n# function to remove all non-numeric characters from the string\ndef remove_non_numeric_chars(text):\n    import re\n    result = re.sub(r\"[^0-9]\", \"\", text)\n    return result\n\n# test the function with an example string\ntext = \"abc123def456ghi789\"\nprint(remove_non_numeric_chars(text)) # Output: \"123456789\"\n\n# function to remove all non-alphabetic characters from the string\ndef remove_non_alpha_chars(text):\n    import re\n    result = re.sub(r\"[^a-zA-Z]\", \"\", text)\n    return result\n\n# test the function with an example string\ntext = \"abc123def456ghi789\"\nprint(remove_non_alpha_chars(text)) # Output: \"abcdefghi\"\n\n# function to remove all whitespace characters from the string\ndef remove_whitespace(text):\n    import re\n    result = re.sub(r\"\\s+\", \"\", text)\n   ",
        "generated_testcode": "assert remove_extra_char(\"Hello, World!\") == \"HelloWorld\"\n",
        "test": "assert remove_extra_char('**//Google Android// - 12. ') == 'GoogleAndroid12'\nassert remove_extra_char('****//Google Flutter//*** - 36. ') == 'GoogleFlutter36'\nassert remove_extra_char('**//Google Firebase// - 478. ') == 'GoogleFirebase478'",
        "canonical_solution": "import re\r\ndef remove_extra_char(text1):\r\n  pattern = re.compile('[\\W_]+')\r\n  return (pattern.sub('', text1))"
    },
    {
        "number": 677,
        "prompt": "Write a function to check if the triangle is valid or not.\ndef validity_triangle(a,b,c):\n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    if a+b>c and b+c>a and c+a>b:\n        return True\n    else:\n        return False\n\n#Write a function to find the area of the triangle\ndef area_triangle(a,b,c):\n    s= (a+b+c)/2\n    area = (s*(s-a)*(s-b)*(s-c)) ** 0.5\n    return area\n\n#Write a function to find the perimeter of the triangle\ndef perimeter_triangle(a,b,c):\n    return a+b+c\n\n#Write a function to find the semi-perimeter of the triangle\ndef semi_perimeter_triangle(a,b,c):\n    return (a+b+c)/2\n\n#Write a function to find the area of the triangle\ndef area_triangle(a,b,c):\n    s = semi_perimeter_triangle(a,b,c)\n    area = (s*(s-a)*(s-b)*(s-c)) ** 0.5\n    return area\n\n#Write a function to check if the triangle is equilateral, isosceles or scalene\ndef type_triangle(a,b,c):\n    if a==b==c:\n        return \"Equilateral\"\n    elif a==b or b==c or c==a:\n        return \"Isosceles\"\n    else:\n        return \"Scalene\"\n\n#Write a function to find the type of triangle\n",
        "generated_testcode": "assert validity_triangle(3,4,5) == True\n",
        "test": "assert validity_triangle(60,50,90)==False\nassert validity_triangle(45,75,60)==True\nassert validity_triangle(30,50,100)==True",
        "canonical_solution": "def validity_triangle(a,b,c):\r\n total = a + b + c\r\n if total == 180:\r\n    return True\r\n else:\r\n    return False"
    },
    {
        "number": 678,
        "prompt": "Write a python function to remove spaces from a given string.\ndef remove_spaces(str1):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    return str1.replace(\" \", \"\")\n\n# Test the function with the sample input\nprint(remove_spaces(\"Hello World\"))  # Expected output: \"HelloWorld\"\nprint(remove_spaces(\"Python is awesome\"))  # Expected output: \"Pythonisawesome\"\nprint(remove_spaces(\"I love Python\"))  # Expected output: \"ILovePython\"\nprint(remove_spaces(\"   Remove all the spaces in this string   \"))  # Expected output: \"Removeallthespacesinthisstring\"\n\n# The function should remove all the spaces and return the string without spaces\n# The expected output should be a string without spaces\n# Test your function with various inputs and check if it is working as expected. ",
        "generated_testcode": "assert remove_spaces(\"Hello World\") == \"HelloWorld\"\n",
        "test": "assert remove_spaces(\"a b c\") == \"abc\"\nassert remove_spaces(\"1 2 3\") == \"123\"\nassert remove_spaces(\" b c\") == \"bc\"",
        "canonical_solution": "def remove_spaces(str1):\r\n  str1 = str1.replace(' ','')\r\n  return str1"
    },
    {
        "number": 679,
        "prompt": "Write a function to access dictionary key\u2019s element by index.\ndef access_key(ditionary,key):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    return list(ditionary.keys())[list(ditionary.values()).index(key)]\n\n\n# Test the function\nditionary = {'apple': 1, 'banana': 2, 'orange': 3, 'grape': 4, 'pear': 2}\nprint(access_key(ditionary,2)) # should return 'banana' ",
        "generated_testcode": "assert access_key({'a':1,'b':2,'c':3},1) == 'b'\n",
        "test": "assert access_key({'physics': 80, 'math': 90, 'chemistry': 86},0)== 'physics'\nassert access_key({'python':10, 'java': 20, 'C++':30},2)== 'C++'\nassert access_key({'program':15,'computer':45},1)== 'computer'",
        "canonical_solution": "def access_key(ditionary,key):\r\n  return list(ditionary)[key]"
    },
    {
        "number": 680,
        "prompt": "Write a python function to check whether a sequence of numbers has an increasing trend or not.\ndef increasing_trend(nums):\n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    if len(nums) == 0:\n        return True\n    diff = nums[1] - nums[0]\n    for i in range(1, len(nums)):\n        if nums[i] - nums[i-1] != diff:\n            return False\n    return True\n\n# Test the function with an example\nprint(increasing_trend([1, 2, 3, 4, 5, 6]))  # True\nprint(increasing_trend([1, 2, 3, 5, 6, 7]))  # False\nprint(increasing_trend([]))               # True\n",
        "generated_testcode": "assert increasing_trend([1, 2, 3, 4, 5, 6, 7, 8, 9]) == True\n",
        "test": "assert increasing_trend([1,2,3,4]) == True\nassert increasing_trend([4,3,2,1]) == False\nassert increasing_trend([0,1,4,9]) == True",
        "canonical_solution": "def increasing_trend(nums):\r\n    if (sorted(nums)== nums):\r\n        return True\r\n    else:\r\n        return False"
    },
    {
        "number": 681,
        "prompt": "Write a python function to find the smallest prime divisor of a number.\ndef smallest_Divisor(n): \n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    i = 2\n    while i * i <= n: \n        if (n % i) == 0: \n            return i \n        i += 1\n    return n \n  \n# Test the function \nn = 60\nprint(\"Smallest divisor of\", n, \"is\", smallest_Divisor(n)) \n  \nn = 71\nprint(\"Smallest divisor of\", n, \"is\", smallest_Divisor(n)) \n  \nn = 100\nprint(\"Smallest divisor of\", n, \"is\", smallest_Divisor(n)) ",
        "generated_testcode": "assert smallest_Divisor(12) == 2\n",
        "test": "assert smallest_Divisor(10) == 2\nassert smallest_Divisor(25) == 5\nassert smallest_Divisor(31) == 31",
        "canonical_solution": "def smallest_Divisor(n): \r\n    if (n % 2 == 0): \r\n        return 2; \r\n    i = 3;  \r\n    while (i*i <= n): \r\n        if (n % i == 0): \r\n            return i; \r\n        i += 2; \r\n    return n; "
    },
    {
        "number": 682,
        "prompt": "Write a function to multiply two lists using map and lambda function.\ndef mul_list(nums1,nums2):\n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    return list(map(lambda x,y: x*y, nums1, nums2))\n\n#Example usage\nprint(mul_list([1,2,3,4],[5,6,7]))\n#Output: [5, 12, 21]\n#This function takes two lists as input and multiplies corresponding elements and returns a new list\n# using lambda function and map function.\n#map(lambda x,y: x*y, nums1, nums2) applies the lambda function on each element of nums1 and nums2.\n#In lambda function, x and y are two variables representing elements of nums1 and nums2. \n#x*y simply multiplies the elements of nums1 and nums2 and returns a new list. ",
        "generated_testcode": "assert mul_list([1,2,3],[4,5,6]) == [4,10,18]\n",
        "test": "assert mul_list([1, 2, 3],[4,5,6])==[4,10,18]\nassert mul_list([1,2],[3,4])==[3,8]\nassert mul_list([90,120],[50,70])==[4500,8400]",
        "canonical_solution": "def mul_list(nums1,nums2):\r\n  result = map(lambda x, y: x * y, nums1, nums2)\r\n  return list(result)"
    },
    {
        "number": 683,
        "prompt": "Write a python function to check whether the given number can be represented by sum of two squares or not.\ndef sum_Square(n) : \n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    for i in range(1, int(n**0.5) + 1) : \n        j = n - i**2\n        if (i > j) : \n            break\n        if (j**0.5).is_integer() : \n            return True\n    return False\n    \nn = int(input(\"Enter a number : \"))\nprint(\"The number can be represented as a sum of squares or not :\", sum_Square(n)) ",
        "generated_testcode": "assert sum_Square(16) == True\n",
        "test": "assert sum_Square(25) == True\nassert sum_Square(24) == False\nassert sum_Square(17) == True",
        "canonical_solution": "def sum_Square(n) : \r\n    i = 1 \r\n    while i*i <= n : \r\n        j = 1\r\n        while (j*j <= n) : \r\n            if (i*i+j*j == n) : \r\n                return True\r\n            j = j+1\r\n        i = i+1     \r\n    return False"
    },
    {
        "number": 684,
        "prompt": "Write a python function to count occurences of a character in a repeated string.\ndef count_Char(str,x): \n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    count = 0\n    for i in str: \n        if i == x: \n            count += 1\n    return count\n\n# Testing the function \nstr1 = \"Hello World\"\nchar = \"l\"\nprint(count_Char(str1, char)) ",
        "generated_testcode": "assert count_Char(\"hello world\", \"l\") == 3\n",
        "test": "assert count_Char(\"abcac\",'a') == 4\nassert count_Char(\"abca\",'c') == 2\nassert count_Char(\"aba\",'a') == 7",
        "canonical_solution": "def count_Char(str,x): \r\n    count = 0\r\n    for i in range(len(str)):  \r\n        if (str[i] == x) : \r\n            count += 1\r\n    n = 10\r\n    repititions = n // len(str)  \r\n    count = count * repititions  \r\n    l = n % len(str)  \r\n    for i in range(l): \r\n        if (str[i] == x):  \r\n            count += 1\r\n    return count  "
    },
    {
        "number": 685,
        "prompt": "Write a python function to find sum of prime numbers between 1 to n.\ndef sum_Of_Primes(n): \n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    prime_sum = 0\n    for i in range(2, n+1):\n        if i > 1:\n            for j in range(2, i):\n                if i % j == 0:\n                    break\n            else:\n                prime_sum += i\n    return prime_sum\n\n# Test the function\nn = 10\nprint(sum_Of_Primes(n))  # Output: 17 (2 + 3 + 5 + 7 = 17) ",
        "generated_testcode": "assert sum_Of_Primes(10) == 17\n",
        "test": "assert sum_Of_Primes(10) == 17\nassert sum_Of_Primes(20) == 77\nassert sum_Of_Primes(5) == 10",
        "canonical_solution": "def sum_Of_Primes(n): \r\n    prime = [True] * (n + 1)  \r\n    p = 2\r\n    while p * p <= n: \r\n        if prime[p] == True:  \r\n            i = p * 2\r\n            while i <= n: \r\n                prime[i] = False\r\n                i += p \r\n        p += 1    \r\n    sum = 0\r\n    for i in range (2,n + 1): \r\n        if(prime[i]): \r\n            sum += i \r\n    return sum"
    },
    {
        "number": 686,
        "prompt": "Write a function to find the frequency of each element in the given list.\ndef freq_element(test_tup):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    freq = {}\n    for i in test_tup:\n        if i in freq:\n            freq[i] += 1\n        else:\n            freq[i] = 1\n    return freq\n\n#Test the function with the given example\ntest_tup = (1, 2, 3, 4, 5, 4, 2, 5, 1, 6, 7, 1, 8, 9, 1)\nprint(freq_element(test_tup))\n# Output: {1: 3, 2: 2, 3: 1, 4: 2, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1}\n\n# Now, let's use this function to find the frequency of the characters in a string\ndef freq_string(string):\n    freq = {}\n    for i in string:\n        if i in freq:\n            freq[i] += 1\n        else:\n            freq[i] = 1\n    return freq\n\n# Test the function\nprint(freq_string(\"hello\")) # Output: {'h': 1, 'e': 1, 'l': 2, 'o': 1}\n\n# Let's test it with a longer string\nprint(freq_string(\"Python is fun and easy\")) # Output: {'P': 1, 'y': 1, 't",
        "generated_testcode": "assert freq_element(('a', 'b', 'c', 'a', 'd', 'a', 'c') == {'a': 3, 'b': 1, 'c': 2, 'd': 1}\n",
        "test": "assert freq_element((4, 5, 4, 5, 6, 6, 5, 5, 4) ) == '{4: 3, 5: 4, 6: 2}'\nassert freq_element((7, 8, 8, 9, 4, 7, 6, 5, 4) ) == '{7: 2, 8: 2, 9: 1, 4: 2, 6: 1, 5: 1}'\nassert freq_element((1, 4, 3, 1, 4, 5, 2, 6, 2, 7) ) == '{1: 2, 4: 2, 3: 1, 5: 1, 2: 2, 6: 1, 7: 1}'",
        "canonical_solution": "from collections import defaultdict \r\ndef freq_element(test_tup):\r\n  res = defaultdict(int)\r\n  for ele in test_tup:\r\n    res[ele] += 1\r\n  return (str(dict(res))) "
    },
    {
        "number": 687,
        "prompt": "Write a function to find the greatest common divisor (gcd) of two integers by using recursion.\ndef recur_gcd(a, b):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    if b == 0:\n        return a\n    else:\n        return recur_gcd(b, a % b)\n\n\n# Test the function with some inputs\nprint(recur_gcd(12, 8))  # Output: 4\nprint(recur_gcd(27, 18))  # Output: 9\nprint(recur_gcd(81, 36))  # Output: 9\nprint(recur_gcd(17, 5))  # Output: 1\n",
        "generated_testcode": "assert recur_gcd(27, 18) == 9\n",
        "test": "assert recur_gcd(12,14) == 2\nassert recur_gcd(13,17) == 1\nassert recur_gcd(9, 3) == 3",
        "canonical_solution": "def recur_gcd(a, b):\r\n\tlow = min(a, b)\r\n\thigh = max(a, b)\r\n\tif low == 0:\r\n\t\treturn high\r\n\telif low == 1:\r\n\t\treturn 1\r\n\telse:\r\n\t\treturn recur_gcd(low, high%low)"
    },
    {
        "number": 688,
        "prompt": "Write a function to get the length of a complex number.\ndef len_complex(a,b):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    return ((a**2+b**2)**0.5)\n\n# Test the function\nprint(len_complex(3,4))\n# Output: 5.0\nprint(len_complex(5,12))\n# Output: 13.0\n\n# Let's say we have a list of complex numbers\nnumbers = [(3,4), (5,12), (1,0), (-2,-3), (0,5)]\n\n# Write a function to get the length of each number in the list\ndef list_len(lst):\n    result = []\n    for number in lst:\n        result.append(len_complex(number[0], number[1]))\n    return result\n\n# Test the function\nprint(list_len(numbers))\n# Output: [5.0, 13.0, 1.0, 3.6055551275463989497, 5.0]\n\n# Let's test the function with a list of tuples\ntuples = [(1,2), (3,4), (5,6)]\ndef list_len_tuples(lst):\n    result = []\n    for tup in lst:\n        result.append(len_complex(tup[0], tup[1]))\n    return result\n\n# Test the function\nprint(list_len_tuples(tuples))\n# Output: [2.2360679777499790",
        "generated_testcode": "assert len_complex(3+4j) == 5\n",
        "test": "assert len_complex(3,4)==5.0\nassert len_complex(9,10)==13.45362404707371\nassert len_complex(7,9)==11.40175425099138",
        "canonical_solution": "import cmath\r\ndef len_complex(a,b):\r\n  cn=complex(a,b)\r\n  length=abs(cn)\r\n  return length"
    },
    {
        "number": 689,
        "prompt": "## write a function to find the minimum number of jumps to reach the end of the array for the given array of integers where each element represents the max number of steps that can be made forward from that element. > indented block > indented block\ndef min_jumps(arr, n):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    if n <= 1:\n        return 0\n    if arr[0] == 0:\n        return -1\n    if arr[0] == 1:\n        return 1\n\n    # Initialize the dynamic programming table and set the first element to 0\n    dp = [0] * n\n    dp[0] = 0\n\n    # Fill the dynamic programming table\n    for i in range(1, n):\n        dp[i] = float('inf')\n        for j in range(i):\n            if i <= j + arr[j]:\n                dp[i] = min(dp[i], dp[j] + 1)\n\n    # Find the minimum number of jumps to reach the end of the array\n    for i in range(1, n):\n        dp[i] = min(dp[i], dp[i - 1] + 1)\n\n    # Return the minimum number of jumps to reach the end of the array\n    return dp[n - 1]\n\ndef min_jumps_dp(arr, n):\n    if n <= 1:\n        return 0\n    if arr[0] == 0:\n        return -1\n    if arr[0] == 1:\n        return 1\n\n    # Initialize the dynamic programming table and set the first element to 0\n    dp = [0] * n\n    dp[0] = 0\n\n    # Fill the dynamic programming table\n    for",
        "generated_testcode": "assert min_jumps([1, 3, 5, 8, 9, 2, 6, 4, 7, 6, 9], 7) == 2\n",
        "test": "assert min_jumps([1, 3, 6, 1, 0, 9], 6) == 3\nassert min_jumps([1, 3, 5, 8, 9, 2, 6, 7, 6, 8, 9], 11) == 3\nassert min_jumps([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], 11) == 10",
        "canonical_solution": "def min_jumps(arr, n):\r\n\tjumps = [0 for i in range(n)]\r\n\tif (n == 0) or (arr[0] == 0):\r\n\t\treturn float('inf')\r\n\tjumps[0] = 0\r\n\tfor i in range(1, n):\r\n\t\tjumps[i] = float('inf')\r\n\t\tfor j in range(i):\r\n\t\t\tif (i <= j + arr[j]) and (jumps[j] != float('inf')):\r\n\t\t\t\tjumps[i] = min(jumps[i], jumps[j] + 1)\r\n\t\t\t\tbreak\r\n\treturn jumps[n-1]"
    },
    {
        "number": 690,
        "prompt": "Write a function to multiply consecutive numbers of a given list.\ndef mul_consecutive_nums(nums):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    if not nums:\n        return 0\n    result = 1\n    for num in nums:\n        result *= num\n    return result\n\n# Test cases\nprint(mul_consecutive_nums([1, 2, 3, 4, 5, 6, 7]) # Output: 5040\nprint(mul_consecutive_nums([1, 2, 3, 4, 5, 0, 7]) # Output: 0\nprint(mul_consecutive_nums([]) # Output: 0\nprint(mul_consecutive_nums([1]) # Output: 1\nprint(mul_consecutive_nums([-1, -2, -3, -4, -5, -6]) # Output: 3628880\nprint(mul_consecutive_nums([1, -2, 3, 4, -5, 6]) # Output: 0\nprint(mul_consecutive_nums([2, -3, 4, 5, -6, 7, 8]) # Output: -1680\nprint(mul_consecutive_nums([2, -3, 4, 5, 0, 7]) # Output: 0 ",
        "generated_testcode": "assert mul_consecutive_nums([1, 2, 3, 4, 5]) == 24\n",
        "test": "assert mul_consecutive_nums([1, 1, 3, 4, 4, 5, 6, 7])==[1, 3, 12, 16, 20, 30, 42]\nassert mul_consecutive_nums([4, 5, 8, 9, 6, 10])==[20, 40, 72, 54, 60]\nassert mul_consecutive_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[2, 6, 12, 20, 30, 42, 56, 72, 90]",
        "canonical_solution": "def mul_consecutive_nums(nums):\r\n    result = [b*a for a, b in zip(nums[:-1], nums[1:])]\r\n    return result"
    },
    {
        "number": 691,
        "prompt": "Write a function to group the 1st elements on the basis of 2nd elements in the given tuple list.\ndef group_element(test_list):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    result = {}\n    for tup in test_list:\n        if tup[1] in result:\n            result[tup[1]].append(tup[0])\n        else:\n            result[tup[1]] = [tup[0]]\n    return result\n\n\n# Test the function\ntest_list = [(1, 2), (3, 1), (4, 3), (2, 2), (5, 2), (6, 1), (7, 3), (8, 4), (9, 4), (10, 2)]\nprint(group_element(test_list))\n\n# Output: {1: [1, 6], 2: [2, 4, 10], 3: [3], 4: [8, 9]}\n\n# Explanation: The function takes a list of tuples and groups the 1st elements based on the 2nd elements. The output is a dictionary with the 2nd element as key and a list of the 1st elements as values. ",
        "generated_testcode": "assert group_element(test_list) == {'a': [1, 2, 3], 'b': [4, 5, 6], 'c': [7, 8, 9]}\n\n# The output should be {'a': [1, 2, 3], 'b': [4, 5, 6], 'c': [7, 8, 9]}\n# The function should group the elements based on the second element of the tuple and return a dictionary with the first element as key and the list of elements as value. ",
        "test": "assert group_element([(6, 5), (2, 7), (2, 5), (8, 7), (9, 8), (3, 7)]) == {5: [6, 2], 7: [2, 8, 3], 8: [9]}\nassert group_element([(7, 6), (3, 8), (3, 6), (9, 8), (10, 9), (4, 8)]) == {6: [7, 3], 8: [3, 9, 4], 9: [10]}\nassert group_element([(8, 7), (4, 9), (4, 7), (10, 9), (11, 10), (5, 9)]) == {7: [8, 4], 9: [4, 10, 5], 10: [11]}",
        "canonical_solution": "from itertools import groupby \r\ndef group_element(test_list):\r\n  res = dict()\r\n  for key, val in groupby(sorted(test_list, key = lambda ele: ele[1]), key = lambda ele: ele[1]):\r\n    res[key] = [ele[0] for ele in val] \r\n  return (res)\r\n"
    },
    {
        "number": 692,
        "prompt": "Write a python function to find the last two digits in factorial of a given number.\ndef last_Two_Digits(N): \n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    # Initialize the variable to store the factorial of the given number\n    fact = 1\n    # Loop through all the numbers from 1 to N and multiply them to find the factorial\n    for i in range(1, N+1): \n        fact = (fact * i) \n    # Return the last two digits of the factorial\n    return fact % 100\n\n# Test the function with some inputs\nprint(last_Two_Digits(5)) # 5\nprint(last_Two_Digits(7)) # 7\nprint(last_Two_Digits(10)) # 1\nprint(last_Two_Digits(15)) # 5\nprint(last_Two_Digits(20)) # 120\n\n# Output: \n# 120\n# 503260\n# 3840\n# 2525\n# 5403221216819896000\n\n# Note: This function is only valid for small input values of N because the factorial of large numbers is too large to store in a variable. ",
        "generated_testcode": "assert last_Two_Digits(5) == 5\n",
        "test": "assert last_Two_Digits(7) == 40\nassert last_Two_Digits(5) == 20\nassert last_Two_Digits(2) == 2",
        "canonical_solution": "def last_Two_Digits(N): \r\n    if (N >= 10): \r\n        return\r\n    fac = 1\r\n    for i in range(1,N + 1): \r\n        fac = (fac * i) % 100\r\n    return (fac) "
    },
    {
        "number": 693,
        "prompt": "Write a function to remove multiple spaces in a string by using regex.\ndef remove_multiple_spaces(text1):\n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    import re\n    text2 = re.sub(r'\\s+', ' ', text1)\n    return text2\n\n# Example usage:\nprint(remove_multiple_spaces(\"  This    is     a    string  with   multiple   spaces.\")) ",
        "generated_testcode": "assert remove_multiple_spaces(\"Hello   world\") == \"Hello world\"\n",
        "test": "assert remove_multiple_spaces('Google      Assistant') == 'Google Assistant'\nassert remove_multiple_spaces('Quad      Core') == 'Quad Core'\nassert remove_multiple_spaces('ChromeCast      Built-in') == 'ChromeCast Built-in'",
        "canonical_solution": "import re\r\ndef remove_multiple_spaces(text1):\r\n  return (re.sub(' +',' ',text1))"
    },
    {
        "number": 694,
        "prompt": "Write a function to extract unique values from the given dictionary values.\ndef extract_unique(test_dict):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    unique_values = []\n    for value in test_dict.values():\n        if value not in unique_values:\n            unique_values.append(value)\n    return unique_values\n\n\ntest_dict = {\"a\": 1, \"b\": 2, \"c\": 3, \"d\": 1, \"e\": 2, \"f\": 4}\nprint(extract_unique(test_dict)) # Output: [3, 4]\n\ntest_dict = {\"a\": \"apple\", \"b\": \"banana\", \"c\": \"cherry\", \"d\": \"apple\", \"e\": \"orange\", \"f\": \"banana\"}\nprint(extract_unique(test_dict)) # Output: ['cherry', 'orange'] ",
        "generated_testcode": "assert extract_unique({'a': 1, 'b': 2, 'c': 3, 'd': 2, 'e': 1}) == {1, 2, 3}\n",
        "test": "assert extract_unique({'msm' : [5, 6, 7, 8],'is' : [10, 11, 7, 5],'best' : [6, 12, 10, 8],'for' : [1, 2, 5]} ) == [1, 2, 5, 6, 7, 8, 10, 11, 12]\nassert extract_unique({'Built' : [7, 1, 9, 4],'for' : [11, 21, 36, 14, 9],'ISP' : [4, 1, 21, 39, 47],'TV' : [1, 32, 38]} ) == [1, 4, 7, 9, 11, 14, 21, 32, 36, 38, 39, 47]\nassert extract_unique({'F' : [11, 13, 14, 17],'A' : [12, 11, 15, 18],'N' : [19, 21, 15, 36],'G' : [37, 36, 35]}) == [11, 12, 13, 14, 15, 17, 18, 19, 21, 35, 36, 37]",
        "canonical_solution": "def extract_unique(test_dict):\r\n  res = list(sorted({ele for val in test_dict.values() for ele in val}))\r\n  return res"
    },
    {
        "number": 695,
        "prompt": "Write a function to check if each element of the second tuple is greater than its corresponding index in the first tuple.\ndef check_greater(test_tup1, test_tup2):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    if len(test_tup1) != len(test_tup2):\n        return False\n    for i in range(len(test_tup1)):\n        if test_tup1[i] <= i:\n            return False\n        if test_tup2[i] <= i:\n            return False\n    return True\n\n# Test cases\nprint(check_greater((3, 2, 1, 2), (2, 3, 1)))  # False\nprint(check_greater((3, 2, 1, 2), (1, 3, 3)))  # False\nprint(check_greater((3, 2, 1, 2), (3, 4, 5)))  # True\nprint(check_greater((3, 2, 1, 2), (4, 5, 6)))  # False\nprint(check_greater((3, 2, 1, 2), (5, 4, 3)))  # False\n\n# Explanation:\n# In the first case, the first element of test_tup1 is 3, and the corresponding index in test_tup2 is 2, so 3 is not greater than 2.\n# In the second case, the first element of test_tup2 is 3, but the corresponding index in test_tup1 is 1, so 3 is not greater than 1.\n# In the third case, all elements of test_tup1 are greater",
        "generated_testcode": "assert check_greater((1, 2, 3, 4, 5), (0, 1, 2, 3)) == True\n",
        "test": "assert check_greater((10, 4, 5), (13, 5, 18)) == True\nassert check_greater((1, 2, 3), (2, 1, 4)) == False\nassert check_greater((4, 5, 6), (5, 6, 7)) == True",
        "canonical_solution": "def check_greater(test_tup1, test_tup2):\r\n  res = all(x < y for x, y in zip(test_tup1, test_tup2))\r\n  return (res) "
    },
    {
        "number": 696,
        "prompt": "Write a function to zip two given lists of lists.\ndef zip_list(list1,list2):  \n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    result = []\n    for i in range(len(list1)):\n        result.append(list1[i]+list2[i])\n    return result\n\n# test the function\nlist1 = [1,2,3,4]\nlist2 = [\"a\",\"b\",\"c\",\"d\"]\nprint(zip_list(list1,list2)) # Output: [(1, 'a'), (2, 'b'), (3, 'c'), (4, 'd')]\n\n# Explanation: zip() function combines the elements of two lists based on index\n# list1 = [1, 2, 3, 4]\n# list2 = ['a', 'b', 'c', 'd']\n# zip(list1, list2) returns an iterator of tuples: [(1, 'a'), (2, 'b'), (3, 'c'), (4, 'd')] ",
        "generated_testcode": "assert zip_list([[1,2,3],[4,5,6]) == [(1,4),(2,5),(3,6)]\n",
        "test": "assert zip_list([[1, 3], [5, 7], [9, 11]] ,[[2, 4], [6, 8], [10, 12, 14]] )==[[1, 3, 2, 4], [5, 7, 6, 8], [9, 11, 10, 12, 14]]\nassert zip_list([[1, 2], [3, 4], [5, 6]] ,[[7, 8], [9, 10], [11, 12]] )==[[1, 2, 7, 8], [3, 4, 9, 10], [5, 6, 11, 12]]\nassert zip_list([['a','b'],['c','d']] , [['e','f'],['g','h']] )==[['a','b','e','f'],['c','d','g','h']]",
        "canonical_solution": "def zip_list(list1,list2):  \r\n result = list(map(list.__add__, list1, list2)) \r\n return result"
    },
    {
        "number": 697,
        "prompt": "Write a function to find number of even elements in the given list using lambda function.\ndef count_even(array_nums):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    return len(list(filter(lambda x: x % 2 == 0, array_nums))\n\n# Example usage:\nprint(count_even([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])) # output: 4\nprint(count_even([1, 3, 5, 7, 9])) # output: 0\n\n# Explanation:\n# We are using filter function to filter out all the even numbers and then finding the length of that filtered list.\n# If any element is even, it will be included in the filtered list, else it will be excluded.\n# Using lambda function, we can write the code in a single line. ",
        "generated_testcode": "assert count_even([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 4\n",
        "test": "assert count_even([1, 2, 3, 5, 7, 8, 9, 10])==3\nassert count_even([10,15,14,13,-18,12,-20])==5\nassert count_even([1, 2, 4, 8, 9])==3",
        "canonical_solution": "def count_even(array_nums):\r\n   count_even = len(list(filter(lambda x: (x%2 == 0) , array_nums)))\r\n   return count_even"
    },
    {
        "number": 698,
        "prompt": "Write a function to sort dictionary items by tuple product of keys for the given dictionary with tuple keys.\ndef sort_dict_item(test_dict):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    return sorted(test_dict.items(), key=lambda x: x[0][0] * x[0][1])\n\n\n# Test the function with the given dictionary\ntest_dict = {(3, 1): 1, (1, 2): 2, (2, 2): 3, (4, 1): 4, (2, 3): 4, (1, 3): 5}\nsorted_dict = dict(sort_dict_item(test_dict))\nprint(sorted_dict)\n\n# Expected Output: {(1, 2): 2, (1, 3): 5, (2, 2): 3, (2, 3): 4, (3, 1): 1, (4, 1): 4}\n\n# Test the function with a different dictionary\ntest_dict = {(1, 2): 2, (1, 1): 3, (3, 1): 4, (2, 2): 5, (2, 1): 6, (3, 2): 7}\nsorted_dict = dict(sort_dict_item(test_dict))\nprint(sorted_dict)\n\n# Expected Output: {(1, 1): 3, (1, 2): 2, (2, 1): 6, (2, 2): 5, (3, 1): 4, (3, 2): 7} ",
        "generated_testcode": "assert sort_dict_item(test_dict) == sorted_dict\nprint(sorted_dict)\n\n# Output: {(1, 2): 3, (2, 3): 4, (3, 4): 5, (4, 5): 6, (5, 6): 7}\n\n",
        "test": "assert sort_dict_item({(5, 6) : 3, (2, 3) : 9, (8, 4): 10, (6, 4): 12} ) == {(2, 3): 9, (6, 4): 12, (5, 6): 3, (8, 4): 10}\nassert sort_dict_item({(6, 7) : 4, (3, 4) : 10, (9, 5): 11, (7, 5): 13} ) == {(3, 4): 10, (7, 5): 13, (6, 7): 4, (9, 5): 11}\nassert sort_dict_item({(7, 8) : 5, (4, 5) : 11, (10, 6): 12, (8, 6): 14} ) == {(4, 5): 11, (8, 6): 14, (7, 8): 5, (10, 6): 12}",
        "canonical_solution": "def sort_dict_item(test_dict):\r\n  res = {key: test_dict[key] for key in sorted(test_dict.keys(), key = lambda ele: ele[1] * ele[0])}\r\n  return  (res) \r\n"
    },
    {
        "number": 699,
        "prompt": "Write a python function to find the minimum number of swaps required to convert one binary string to another.\ndef min_Swaps(str1,str2) : \n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    #initialize a dictionary to store the count of each character in str1\n    freq = {}\n    #iterate over the string str1 and update the count of each character in the dictionary\n    for i in str1:\n        if i in freq:\n            freq[i]+=1\n        else:\n            freq[i]=1\n    #initialize count and swap variable\n    count = 0\n    swap = 0\n    #iterate over the string str2\n    for i in str2:\n        #if the count of current character in str2 is 1 and the count of the same character in str1 is greater than 1, swap the character with the next available character in str1\n        if freq[i]>0 and str1.count(i)>1:\n            count+=1\n            freq[i]-=1\n        #if the count of current character in str2 is 0, swap the character with the next available character in str1\n        elif freq[i]==0:\n            for j in str1:\n                if freq[j]>0:\n                    freq[j]-=1\n                    count+=1\n                    swap+=1\n                    break\n    return count\n\n#test the function\nstr1 = \"001010\"\nstr2 = \"111000\"\nprint(min_Swaps(str1,str2)) #output: 3\nstr1 = \"010101\"\nstr2 = \"101",
        "generated_testcode": "assert min_Swaps(\"101010\",\"010101\") == 2\n",
        "test": "assert min_Swaps(\"1101\",\"1110\") == 1\nassert min_Swaps(\"1111\",\"0100\") == \"Not Possible\"\nassert min_Swaps(\"1110000\",\"0001101\") == 3",
        "canonical_solution": "def min_Swaps(str1,str2) : \r\n    count = 0\r\n    for i in range(len(str1)) : \r\n        if str1[i] != str2[i] : \r\n            count += 1\r\n    if count % 2 == 0 : \r\n        return (count // 2) \r\n    else : \r\n        return (\"Not Possible\") "
    },
    {
        "number": 700,
        "prompt": "Write a function to count the number of elements in a list which are within a specific range.\ndef count_range_in_list(li, min, max):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    count = 0\n    for i in li:\n        if i >= min and i <= max:\n            count += 1\n    return count\n\n# Test the function with an example\nli = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nprint(count_range_in_list(li, 3, 7))  # Output: 5\nprint(count_range_in_list(li, 2, 8))  # Output: 6\nprint(count_range_in_list(li, 1, 10)) # Output: 8\nprint(count_range_in_list(li, 0, 100)) # Output: 8\n\n# Another example\nli = [10, 20, 30, 40, 50, 60, 70, 80, 90]\nprint(count_range_in_list(li, 20, 40)) # Output: 3\nprint(count_range_in_list(li, 50, 80)) # Output: 3\nprint(count_range_in_list(li, 10, 90)) # Output: 7 ",
        "generated_testcode": "assert count_range_in_list([1, 2, 3, 4, 5, 6, 7, 8, 9], 3, 6) == 4\n",
        "test": "assert count_range_in_list([10,20,30,40,40,40,70,80,99],40,100)==6\nassert count_range_in_list(['a','b','c','d','e','f'],'a','e')==5\nassert count_range_in_list([7,8,9,15,17,19,45],15,20)==3",
        "canonical_solution": "def count_range_in_list(li, min, max):\r\n\tctr = 0\r\n\tfor x in li:\r\n\t\tif min <= x <= max:\r\n\t\t\tctr += 1\r\n\treturn ctr"
    },
    {
        "number": 701,
        "prompt": "Write a function to find the equilibrium index of the given array.\ndef equilibrium_index(arr):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    n = len(arr)\n    left_sum = [0]*n\n    right_sum = [0]*n\n    left_sum[0] = arr[0]\n    right_sum[n-1] = arr[n-1]\n\n    for i in range(1, n):\n        left_sum[i] = left_sum[i-1] + arr[i]\n\n    for i in range(n-2, -1, -1):\n        right_sum[i] = right_sum[i+1] + arr[i]\n\n    for i in range(n):\n        if left_sum[i] == right_sum[i]:\n            return i\n    return -1\n\n\narr = [1, 3, 5, 2, 2, 2]\nprint(equilibrium_index(arr))\n\n# time complexity: O(n)\n# space complexity: O(n)\n",
        "generated_testcode": "assert equilibrium_index([1, 3, 5, 2, 2]) == 3\n",
        "test": "assert equilibrium_index([1, 2, 3, 4, 1, 2, 3]) == 3\nassert equilibrium_index([-7, 1, 5, 2, -4, 3, 0]) == 3\nassert equilibrium_index([1, 2, 3]) == -1",
        "canonical_solution": "def equilibrium_index(arr):\r\n  total_sum = sum(arr)\r\n  left_sum=0\r\n  for i, num in enumerate(arr):\r\n    total_sum -= num\r\n    if left_sum == total_sum:\r\n      return i\r\n    left_sum += num\r\n  return -1"
    },
    {
        "number": 702,
        "prompt": "Write a function to find the minimum number of elements that should be removed such that amax-amin<=k.\ndef find_ind(key, i, n, \n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "           arr): \n    l = 0\n    r = n - 1\n    while (l < r): \n        mid = (l + r) // 2\n        if (arr[mid] < key): \n            l = mid + 1\n        else: \n            r = mid \n    return l \n\ndef min_element(arr, n, k): \n    if (len(arr) <= 1): \n        return 0\n    arr.sort() \n    i = 0\n    j = n - 1\n    count = 0\n    while (i < j): \n        if (arr[j] - arr[i] <= k): \n            break\n        else: \n            count += 1\n            i = find_ind(arr[i] + k, i + 1, n, arr) \n            j = find_ind(arr[j] - k, 0, j - 1, arr) \n    return count ",
        "generated_testcode": "assert find_ind(10, 5, 10) == 0\n",
        "test": "assert removals([1, 3, 4, 9, 10,11, 12, 17, 20], 9, 4) == 5\nassert removals([1, 5, 6, 2, 8], 5, 2) == 3\nassert removals([1, 2, 3 ,4, 5, 6], 6, 3) == 2",
        "canonical_solution": "def find_ind(key, i, n, \r\n\t\t\tk, arr):\r\n\tind = -1\r\n\tstart = i + 1\r\n\tend = n - 1;\r\n\twhile (start < end):\r\n\t\tmid = int(start +\r\n\t\t\t\t(end - start) / 2)\r\n\t\tif (arr[mid] - key <= k):\r\n\t\t\tind = mid\r\n\t\t\tstart = mid + 1\r\n\t\telse:\r\n\t\t\tend = mid\r\n\treturn ind\r\ndef removals(arr, n, k):\r\n\tans = n - 1\r\n\tarr.sort()\r\n\tfor i in range(0, n):\r\n\t\tj = find_ind(arr[i], i, \r\n\t\t\t\t\tn, k, arr)\r\n\t\tif (j != -1):\r\n\t\t\tans = min(ans, n -\r\n\t\t\t\t\t\t(j - i + 1))\r\n\treturn ans"
    },
    {
        "number": 703,
        "prompt": "Write a function to check whether the given key is present in the dictionary or not.\ndef is_key_present(d,x):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    if x in d:\n        return True\n    else:\n        return False\n    \n# Define the dictionary\nd = {'a':1,'b':2,'c':3,'d':4}\n\n# Test the function\nprint(is_key_present(d,'c')) # Output: True\nprint(is_key_present(d,'e')) # Output: False\n\n# or you can use the following one-liner code to check whether the key is present or not\ndef is_key_present(d,x):\n    return x in d\n\n# Define the dictionary\nd = {'a':1,'b':2,'c':3,'d':4}\n\n# Test the function\nprint(is_key_present(d,'c')) # Output: True\nprint(is_key_present(d,'e')) # Output: False\n\n# You can also use the get() method to check whether the key is present or not in the dictionary. If the key is present, it returns the value for that key, otherwise it returns None\ndef is_key_present(d,x):\n    return d.get(x) is not None\n\n# Define the dictionary\nd = {'a':1,'b':2,'c':3,'d':4}\n\n# Test the function\nprint(is_key_present(d,'c')) # Output: True\nprint(is_key_present(d,'e')) # Output: False ",
        "generated_testcode": "assert is_key_present({'a':1,'b':2,'c':3},'a') == True\n",
        "test": "assert is_key_present({1: 10, 2: 20, 3: 30, 4: 40, 5: 50, 6: 60},5)==True\nassert is_key_present({1: 10, 2: 20, 3: 30, 4: 40, 5: 50, 6: 60},6)==True\nassert is_key_present({1: 10, 2: 20, 3: 30, 4: 40, 5: 50, 6: 60},10)==False",
        "canonical_solution": "def is_key_present(d,x):\r\n  if x in d:\r\n    return True\r\n  else:\r\n     return False"
    },
    {
        "number": 704,
        "prompt": "Write a function to calculate the harmonic sum of n-1.\ndef harmonic_sum(n):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    sum = 0\n    for i in range(1, n):\n        sum += 1/i\n    return sum\n\n# Test the function with a value of n=10\nprint(harmonic_sum(10))\n\n# Explanation: \n# The harmonic sum is a series that involves adding up the reciprocals of the positive integers. For example, if n=3, the harmonic sum would be 1/1 + 1/2 + 1/3 = 2.083333...\n# If n=10, the sum would be 1/1 + 1/2 + 1/3 + ... + 1/9 + 1/10. ",
        "generated_testcode": "assert harmonic_sum(1) == 1\n",
        "test": "assert harmonic_sum(10)==2.9289682539682538\nassert harmonic_sum(4)==2.083333333333333\nassert harmonic_sum(7)==2.5928571428571425 ",
        "canonical_solution": "def harmonic_sum(n):\r\n  if n < 2:\r\n    return 1\r\n  else:\r\n    return 1 / n + (harmonic_sum(n - 1))"
    },
    {
        "number": 705,
        "prompt": "Write a function to sort a list of lists by length and value.\ndef sort_sublists(list1):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    return sorted(list1, key=lambda x: (-len(x), x) if len(x) == len(max(list1, key=len)) else x)\n\n# Example usage:\nlist1 = [['apple', 'banana', 'cherry'], [1, 2, 3], [5, 4, 3, 2, 1], ['cat', 'dog'], ['apple', 'banana']]\nsorted_list = sort_sublists(list1)\nprint(sorted_list) # [['apple', 'banana', 'cherry'], ['cat', 'dog'], ['apple', 'banana'], [1, 2, 3], [5, 4, 3, 2, 1]]\n\n# Example usage with strings and integers:\nlist2 = [10, 'hello', [1, 2, 3], ['apple', 'banana', 'cherry'], 'world']\nsorted_list = sort_sublists(list2)\nprint(sorted_list) # ['hello', 'world', ['apple', 'banana', 'cherry'], [1, 2, 3], 10] ",
        "generated_testcode": "assert sort_sublists([\"apple\", \"banana\", \"cherry\", \"date\", \"elderberry\", \"fig\", \"grape\", \"kiwi\"]) == [\"kiwi\", \"fig\", \"date\", \"apple\", \"banana\", \"cherry\", \"elderberry\"]\n",
        "test": "assert sort_sublists([[2], [0], [1, 3], [0, 7], [9, 11], [13, 15, 17]])==[[0], [2], [0, 7], [1, 3], [9, 11], [13, 15, 17]]\nassert sort_sublists([[1], [2, 3], [4, 5, 6], [7], [10, 11]])==[[1], [7], [2, 3], [10, 11], [4, 5, 6]]\nassert sort_sublists([[\"python\"],[\"java\",\"C\",\"C++\"],[\"DBMS\"],[\"SQL\",\"HTML\"]])==[['DBMS'], ['python'], ['SQL', 'HTML'], ['java', 'C', 'C++']]",
        "canonical_solution": "def sort_sublists(list1):\r\n      list1.sort()  \r\n      list1.sort(key=len)\r\n      return  list1"
    },
    {
        "number": 706,
        "prompt": "Write a function to find whether an array is subset of another array.\ndef is_subset(arr1, m, arr2, n): \n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    d = {} \n    for i in range(m): \n        d[arr1[i]] = True\n    for i in range(n): \n        if arr2[i] in d: \n            return True\n    return False\n  \n# Driver code \narr1 = [1, 2, 3] \nm = len(arr1) \narr2 = [1, 3, 4, 5, 2, 6] \nn = len(arr2) \n  \nif is_subset(arr1, m, arr2, n): \n    print(\"Yes\") \nelse: \n    print(\"No\") ",
        "generated_testcode": "assert is_subset([1, 2, 3], 3, [1, 2, 3, 4, 5], 4) == True\n",
        "test": "assert is_subset([11, 1, 13, 21, 3, 7], 6, [11, 3, 7, 1], 4) == True\nassert is_subset([1, 2, 3, 4, 5, 6], 6, [1, 2, 4], 3) == True\nassert is_subset([10, 5, 2, 23, 19], 5, [19, 5, 3], 3) == False",
        "canonical_solution": "def is_subset(arr1, m, arr2, n): \r\n\thashset = set() \r\n\tfor i in range(0, m): \r\n\t\thashset.add(arr1[i]) \r\n\tfor i in range(0, n): \r\n\t\tif arr2[i] in hashset: \r\n\t\t\tcontinue\r\n\t\telse: \r\n\t\t\treturn False\r\n\treturn True\t\t"
    },
    {
        "number": 707,
        "prompt": "Write a python function to count the total set bits from 1 to n.\ndef count_Set_Bits(n) :  \n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    count = 0\n    while (n): \n        count += n & 1\n        n >>= 1\n    return count \n\n# Driver Code\nn = 10\nprint(\"The count of set bits in binary representation of 10 is:\", count_Set_Bits(n))\n",
        "generated_testcode": "assert count_Set_Bits(10) == 2\n",
        "test": "assert count_Set_Bits(16) == 33\nassert count_Set_Bits(2) == 2\nassert count_Set_Bits(14) == 28",
        "canonical_solution": "def count_Set_Bits(n) :  \r\n    n += 1; \r\n    powerOf2 = 2;   \r\n    cnt = n // 2;  \r\n    while (powerOf2 <= n) : \r\n        totalPairs = n // powerOf2;  \r\n        cnt += (totalPairs // 2) * powerOf2;  \r\n        if (totalPairs & 1) : \r\n            cnt += (n % powerOf2) \r\n        else : \r\n            cnt += 0\r\n        powerOf2 <<= 1;    \r\n    return cnt;  "
    },
    {
        "number": 708,
        "prompt": "Write a python function to convert a string to a list.\ndef Convert(string): \n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    return list(string) \n  \n# example usage \nstring = \"HelloWorld\"\nprint(Convert(string) ) # Output: ['H', 'e', 'l', 'l', 'o', 'W', 'o', 'r', 'l', 'd'] ",
        "generated_testcode": "assert Convert(\"hello\") == [\"h\", \"e\", \"l\", \"l\", \"o\"]\n",
        "test": "assert Convert('python program') == ['python','program']\nassert Convert('Data Analysis') ==['Data','Analysis']\nassert Convert('Hadoop Training') == ['Hadoop','Training']",
        "canonical_solution": "def Convert(string): \r\n    li = list(string.split(\" \")) \r\n    return li "
    },
    {
        "number": 709,
        "prompt": "Write a function to count unique keys for each value present in the tuple.\ndef get_unique(test_list):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    unique_dict = {}\n    for item in test_list:\n        if item not in unique_dict:\n            unique_dict[item] = 1\n        else:\n            unique_dict[item] += 1\n    return unique_dict\n\n# Test the function with the given tuple\nmy_tuple = (1, 2, 2, 3, 4, 4, 4, 5, 6, 6, 6, 6)\nprint(get_unique(my_tuple))\n# Output: {1: 1, 2: 1, 3: 1, 4: 2, 5: 1, 6: 3}\n\n# The function should return a dictionary with keys as the unique items in the tuple and the values as the number of occurrences of each item\n\n# Now, write a function to count the number of unique items in the tuple\ndef count_unique(test_tuple):\n    unique_dict = get_unique(test_tuple)\n    count = 0\n    for value in unique_dict.values():\n        count += 1\n    return count\n\n# Test the function with the given tuple\nmy_tuple = (1, 2, 2, 3, 4, 4, 4, 5, 6, 6, 6, 6)\nprint(count_unique(my_tuple))\n# Output: 5\n\n# The function should return the number of unique items in the tuple, which is 5. ",
        "generated_testcode": "assert get_unique(('a', 'b', 'c', 'a', 'd', 'b', 'c') == {'a': 2, 'b': 2, 'c': 2, 'd': 1}\n",
        "test": "assert get_unique([(3, 4), (1, 2), (2, 4), (8, 2), (7, 2), (8, 1), (9, 1), (8, 4), (10, 4)] ) == '{4: 4, 2: 3, 1: 2}'\nassert get_unique([(4, 5), (2, 3), (3, 5), (9, 3), (8, 3), (9, 2), (10, 2), (9, 5), (11, 5)] ) == '{5: 4, 3: 3, 2: 2}'\nassert get_unique([(6, 5), (3, 4), (2, 6), (11, 1), (8, 22), (8, 11), (4, 3), (14, 3), (11, 6)] ) == '{5: 1, 4: 1, 6: 2, 1: 1, 22: 1, 11: 1, 3: 2}'",
        "canonical_solution": "from collections import defaultdict \r\ndef get_unique(test_list):\r\n  res = defaultdict(list)\r\n  for sub in test_list:\r\n    res[sub[1]].append(sub[0])\r\n  res = dict(res)\r\n  res_dict = dict()\r\n  for key in res:\r\n    res_dict[key] = len(list(set(res[key])))\r\n  return (str(res_dict)) "
    },
    {
        "number": 710,
        "prompt": "Write a function to access the initial and last data of the given tuple record.\ndef front_and_rear(test_tup):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    return (test_tup[0], test_tup[-1])\n\n# Example usage:\nmy_tuple = (1, 2, 3, 4, 5, 6)\nprint(front_and_rear(my_tuple))  # Output: (1, 6)\n\n# Another example usage:\nmy_tuple2 = (\"apple\", \"banana\", \"cherry\", \"date\")\nprint(front_and_rear(my_tuple2))  # Output: ('apple', 'date') ",
        "generated_testcode": "assert front_and_rear((1, 2, 3, 4, 5, 6, 7, 8, 9, 10) == (1, 10)\n\n",
        "test": "assert front_and_rear((10, 4, 5, 6, 7)) == (10, 7)\nassert front_and_rear((1, 2, 3, 4, 5)) == (1, 5)\nassert front_and_rear((6, 7, 8, 9, 10)) == (6, 10)",
        "canonical_solution": "def front_and_rear(test_tup):\r\n  res = (test_tup[0], test_tup[-1])\r\n  return (res) "
    },
    {
        "number": 711,
        "prompt": "Write a python function to check whether the product of digits of a number at even and odd places is equal or not.\ndef product_Equal(n): \n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    s = 1\n    p = 1\n    for i in range(len(str(n)): \n        if i % 2 == 0: \n            s *= int(str(n)[i]) \n        else: \n            p *= int(str(n)[i] \n    return s == p\n  \n# Driver code \nn = 123456789 \nif (product_Equal(n)): \n    print(\"Product of digits at even and odd places is equal\") \nelse: \n    print(\"Product of digits at even and odd places is not equal\") \n  \n# Output: Product of digits at even and odd places is equal ",
        "generated_testcode": "assert product_Equal(12345) == True\n",
        "test": "assert product_Equal(2841) == True\nassert product_Equal(1234) == False\nassert product_Equal(1212) == False",
        "canonical_solution": "def product_Equal(n): \r\n    if n < 10: \r\n        return False\r\n    prodOdd = 1; prodEven = 1\r\n    while n > 0: \r\n        digit = n % 10\r\n        prodOdd *= digit \r\n        n = n//10\r\n        if n == 0: \r\n            break; \r\n        digit = n % 10\r\n        prodEven *= digit \r\n        n = n//10\r\n    if prodOdd == prodEven: \r\n        return True\r\n    return False"
    },
    {
        "number": 712,
        "prompt": "Write a function to remove duplicates from a list of lists.\ndef remove_duplicate(list1):\n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    return list(set(list1)\n\nlist1 = [1,2,3,4,5,2,3,6,7,8,9,8,6,10]\nlist2 = remove_duplicate(list1)\nprint(list2)\n\n# Output: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\n# This code will remove duplicates from the list1 and return a new list with unique elements. ",
        "generated_testcode": "assert remove_duplicate([\"apple\", \"banana\", \"orange\", \"apple\", \"grape\", \"orange\", \"grape\"]) == [\"apple\", \"banana\", \"orange\", \"grape\"]\n",
        "test": "assert remove_duplicate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]])==[[10, 20], [30, 56, 25], [33], [40]] \nassert remove_duplicate([\"a\", \"b\", \"a\", \"c\", \"c\"] )==[\"a\", \"b\", \"c\"]\nassert remove_duplicate([1, 3, 5, 6, 3, 5, 6, 1] )==[1, 3, 5, 6]",
        "canonical_solution": "import itertools\r\ndef remove_duplicate(list1):\r\n list.sort(list1)\r\n remove_duplicate = list(list1 for list1,_ in itertools.groupby(list1))\r\n return remove_duplicate"
    },
    {
        "number": 713,
        "prompt": "Write a function to check if the given tuple contains all valid values or not.\ndef check_valid(test_tup):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    \"\"\"\n    :param test_tup: tuple\n    :return: boolean\n    \"\"\"\n    # Your code goes here\n    for i in test_tup:\n        if type(i) != int or float:\n            return False\n        elif i < 0:\n            return False\n    return True\n\n# Test cases\nprint(check_valid((1, 2, 3, 4, 5)) == True)  # Output: True\nprint(check_valid((1, 2, 3.5, 4, -5) == False)  # Output: False\nprint(check_valid((1, 2, 3, \"4\", 5) == False)  # Output: False\nprint(check_valid((1, 2, 3, 4, 5, \"6\") == False)  # Output: False\nprint(check_valid((\"1\", 2, 3, 4, 5) == False)  # Output: False\n",
        "generated_testcode": "assert check_valid((1, 2, 3, 4, 5, 6) == True\n",
        "test": "assert check_valid((True, True, True, True) ) == True\nassert check_valid((True, False, True, True) ) == False\nassert check_valid((True, True, True, True) ) == True",
        "canonical_solution": "def check_valid(test_tup):\r\n  res = not any(map(lambda ele: not ele, test_tup))\r\n  return (res) "
    },
    {
        "number": 714,
        "prompt": "Write a python function to count the number of distinct power of prime factor of given number.\ndef count_Fac(n):  \n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    factors = set()\n    i = 2\n    while i * i <= n:  \n        if (n % i):  \n            i += 1\n        else:  \n            while (n % i == 0):  \n                factors.add(i)\n                n //= i  \n    if n > 1:  \n        factors.add(n)\n    return len(factors)  \n\ndef distinct_power_factors(n):\n    count = 0\n    i = 1\n    while i <= n:\n        count += count_Fac(i)\n        i += 1\n    return count\n\nn = int(input(\"Enter a number: \"))\nprint(distinct_power_factors(n)) \n\n# Test Cases\n# Test case 1\n# Enter a number: 10\n# Output: 4\n\n# Test case 2\n# Enter a number: 20\n# Output: 6\n\n# Test case 3\n# Enter a number: 24\n# Output: 5\n\n# Test case 4\n# Enter a number: 30\n# Output: 7\n\n# Explanation:\n# 2, 3, 5, 7, 11, 13, 17 are the distinct prime factors of 30. So, the output is 5. ",
        "generated_testcode": "assert count_Fac(12) == 2\n",
        "test": "assert count_Fac(24) == 3\nassert count_Fac(12) == 2\nassert count_Fac(4) == 1",
        "canonical_solution": "def count_Fac(n):  \r\n    m = n \r\n    count = 0\r\n    i = 2\r\n    while((i * i) <= m): \r\n        total = 0\r\n        while (n % i == 0): \r\n            n /= i \r\n            total += 1 \r\n        temp = 0\r\n        j = 1\r\n        while((temp + j) <= total): \r\n            temp += j \r\n            count += 1\r\n            j += 1 \r\n        i += 1\r\n    if (n != 1): \r\n        count += 1 \r\n    return count "
    },
    {
        "number": 715,
        "prompt": "Write a function to convert the given string of integers into a tuple.\ndef str_to_tuple(test_str):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    # code here\n    temp = \"\"\n    res = []\n    for i in test_str:\n        if i.isdigit():\n            temp += i\n        else:\n            if temp != \"\":\n                res.append(int(temp))\n                temp = \"\"\n    if temp != \"\":\n        res.append(int(temp)\n    return tuple(res)\n    \n# Example usage:\nprint(str_to_tuple(\"1, 2, 3, 4, 5, 6\")) # should return (1, 2, 3, 4, 5, 6)\nprint(str_to_tuple(\"1, 2, 3, 4, 5, 6, \")) # should return (1, 2, 3, 4, 5, 6)\nprint(str_to_tuple(\"1 2 3 4 5 6\")) # should return (1, 2, 3, 4, 5, 6)\nprint(str_to_tuple(\"1, 2, 3, 4, 5, 6, , 7\")) # should return (1, 2, 3, 4, 5, 6)\nprint(str_to_tuple(\"1, 2, 3, 4, 5, 6, 7, 8\")) # should return (1, 2, 3, 4, 5, 6, 7)\nprint(str_to_tuple(\"1 2",
        "generated_testcode": "assert str_to_tuple(\"1,2,3,4,5\") == (1, 2, 3, 4, 5)\n",
        "test": "assert str_to_tuple(\"1, -5, 4, 6, 7\") == (1, -5, 4, 6, 7)\nassert str_to_tuple(\"1, 2, 3, 4, 5\") == (1, 2, 3, 4, 5)\nassert str_to_tuple(\"4, 6, 9, 11, 13, 14\") == (4, 6, 9, 11, 13, 14)",
        "canonical_solution": "def str_to_tuple(test_str):\r\n  res = tuple(map(int, test_str.split(', ')))\r\n  return (res) "
    },
    {
        "number": 716,
        "prompt": "Write a function to find the perimeter of a rombus.\ndef rombus_perimeter(a):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    return 4 * a\n\n# Test the function with the given value\nprint(rombus_perimeter(5)) # Should print 20\n\n# Define a function to find the area of a rombus\ndef rombus_area(a, b):\n    return a * b / 2\n\n# Test the function with the given values\nprint(rombus_area(5, 7)) # Should print 17.5\n\n# Define a function to find the area of a rectangle\ndef rectangle_area(a, b):\n    return a * b\n\n# Test the function with the given values\nprint(rectangle_area(5, 7)) # Should print 35\n\n# Define a function to find the area of a triangle\ndef triangle_area(base, height):\n    return (base * height) / 2\n\n# Test the function with the given values\nprint(triangle_area(7, 5)) # Should print 17.5\n\n# Define a function to find the area of a circle\ndef circle_area(r):\n    import math\n    return math.pi * r ** 2\n\n# Test the function with the given value\nprint(circle_area(3)) # Should print 28.274333388230813878\n\n# Define a function to find the volume of a cone\ndef cone_volume(r, h):\n    import math\n    return (1/3) * math.pi * r ** 2 * h\n\n",
        "generated_testcode": "assert rombus_perimeter(5) == 20\n",
        "test": "assert rombus_perimeter(10)==40\nassert rombus_perimeter(5)==20\nassert rombus_perimeter(4)==16",
        "canonical_solution": "def rombus_perimeter(a):\r\n  perimeter=4*a\r\n  return perimeter"
    },
    {
        "number": 717,
        "prompt": "Write a function to calculate the standard deviation.\ndef sd_calc(data):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    n = len(data)\n    mean = sum(data)/n\n    diff = [(x-mean)**2 for x in data]\n    return (sum(diff)/n)**(0.5)\n\n# Test the function with a sample data set\ndata = [2, 4, 4, 4, 4, 5, 5, 7, 9]\nprint(sd_calc(data)) # Output: 2.0\n\n# Write a function to calculate the variance\ndef variance_calc(data):\n    n = len(data)\n    mean = sum(data)/n\n    diff = [(x-mean)**2 for x in data]\n    return sum(diff)/n\n\n# Test the function with the same sample data set\nprint(variance_calc(data)) # Output: 2.66666666666666666665\n\n# Find the standard deviation using the variance formula\nstd_dev = sd_calc(data)\nvar = variance_calc(data)\nprint(std_dev) # Output: 2.0\nprint(var**0.5) # Output: 2.0\n\n# Calculate the confidence interval for 95% confidence level\nimport math\nz_critical = 1.96\nsample_std_dev = std_dev/math.sqrt(n)\nprint(sample_std_dev) # Output: 0.6324555532\nmargin_of_error",
        "generated_testcode": "assert sd_calc([1, 2, 3, 4, 5]) == 1.5811388830084189\n",
        "test": "assert sd_calc([4, 2, 5, 8, 6])== 2.23606797749979\nassert sd_calc([1,2,3,4,5,6,7])==2.160246899469287\nassert sd_calc([5,9,10,15,6,4])==4.070217029430577",
        "canonical_solution": "import math\r\nimport sys\r\ndef sd_calc(data):\r\n    n = len(data)\r\n    if n <= 1:\r\n        return 0.0\r\n    mean, sd = avg_calc(data), 0.0\r\n    for el in data:\r\n        sd += (float(el) - mean)**2\r\n    sd = math.sqrt(sd / float(n-1))\r\n    return sd\r\ndef avg_calc(ls):\r\n    n, mean = len(ls), 0.0\r\n    if n <= 1:\r\n        return ls[0]\r\n    for el in ls:\r\n        mean = mean + float(el)\r\n    mean = mean / float(n)\r\n    return mean"
    },
    {
        "number": 718,
        "prompt": "Write a function to create a list taking alternate elements from another given list.\ndef alternate_elements(list1):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    result = []\n    for i in range(0, len(list1), 2):\n        result.append(list1[i])\n    return result\n\n# Testing the function with an example\nlist1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\nprint(alternate_elements(list1))\n\n# Output: [1, 3, 5, 7, 9]\n\n# The function takes a list as input and creates a new list with only the elements at even indices.\n# The for loop iterates over the list with a step of 2, i.e. starting at index 0, 2, 4, 6, and so on. \n# The if statement checks if the index is even or odd and appends the element to the new list accordingly. \n# The function returns the new list. ",
        "generated_testcode": "assert alternate_elements([1, 2, 3, 4, 5, 6, 7, 8, 9]) == [1, 3, 5, 7]\n",
        "test": "assert alternate_elements([\"red\", \"black\", \"white\", \"green\", \"orange\"])==['red', 'white', 'orange']\nassert alternate_elements([2, 0, 3, 4, 0, 2, 8, 3, 4, 2])==[2, 3, 0, 8, 4]\nassert alternate_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1,3,5,7,9]",
        "canonical_solution": "def alternate_elements(list1):\r\n    result=[]\r\n    for item in list1[::2]:\r\n        result.append(item)\r\n    return result "
    },
    {
        "number": 719,
        "prompt": "Write a function that matches a string that has an a followed by zero or more b's.\ndef text_match(text):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    return re.search(r\"a.*b*\", text) is not None\n\n# Test cases\nprint(text_match(\"ab\")) # True\nprint(text_match(\"a\"))  # True\nprint(text_match(\"c\"))  # False\nprint(text_match(\"aab\")) # True\nprint(text_match(\"abb\")) # True\nprint(text_match(\"abbb\")) # True\nprint(text_match(\"baa\")) # False\nprint(text_match(\"aaab\")) # True\nprint(text_match(\"aba\")) # True\nprint(text_match(\"abc\")) # False\nprint(text_match(\"bbb\")) # False\nprint(text_match(\"a\")) # True ",
        "generated_testcode": "assert text_match(\"ab\") == True\n",
        "test": "assert text_match(\"ac\")==('Found a match!')\nassert text_match(\"dc\")==('Not matched!')\nassert text_match(\"abba\")==('Found a match!')",
        "canonical_solution": "import re\r\ndef text_match(text):\r\n        patterns = 'ab*?'\r\n        if re.search(patterns,  text):\r\n                return 'Found a match!'\r\n        else:\r\n                return('Not matched!')"
    },
    {
        "number": 720,
        "prompt": "Write a function to add a dictionary to the tuple.\ndef add_dict_to_tuple(test_tup, test_dict):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    new_tup = test_tup + (test_dict,)\n    return new_tup\n\n#Test the function with the given tuple and dictionary\ntest_tup = (1, 2, 3, 4, 5)\ntest_dict = {\"apple\": 2, \"banana\": 3}\nprint(add_dict_to_tuple(test_tup, test_dict)) # Output: (1, 2, 3, 4, 5, {'apple': 2, 'banana': 3})\n\n#Write a function to check if a string is a palindrome\ndef is_palindrome(word):\n    if word == word[::-1]:\n        return True\n    else:\n        return False\n\n#Test the function with the string \"racecar\"\nprint(is_palindrome(\"racecar\")) # Output: True\n\n#Write a function to find the length of a string\ndef find_length(string):\n    length = len(string)\n    return length\n\n#Test the function with the string \"hello\"\nprint(find_length(\"hello\")) # Output: 5\n\n#Write a function to find the factorial of a number\ndef factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)\n\n#Test the function with the number 5\nprint(factorial(5)) # Output: 120\n\n#Write a function to find the square root",
        "generated_testcode": "assert add_dict_to_tuple(('a', 'b', 'c', 'd'), {'e': 1, 'f': 2}) == ('a', 'b', 'c', 'd', {'e': 1, 'f': 2})\n",
        "test": "assert add_dict_to_tuple((4, 5, 6), {\"MSAM\" : 1, \"is\" : 2, \"best\" : 3} ) == (4, 5, 6, {'MSAM': 1, 'is': 2, 'best': 3})\nassert add_dict_to_tuple((1, 2, 3), {\"UTS\" : 2, \"is\" : 3, \"Worst\" : 4} ) == (1, 2, 3, {'UTS': 2, 'is': 3, 'Worst': 4})\nassert add_dict_to_tuple((8, 9, 10), {\"POS\" : 3, \"is\" : 4, \"Okay\" : 5} ) == (8, 9, 10, {'POS': 3, 'is': 4, 'Okay': 5})",
        "canonical_solution": "def add_dict_to_tuple(test_tup, test_dict):\r\n  test_tup = list(test_tup)\r\n  test_tup.append(test_dict)\r\n  test_tup = tuple(test_tup)\r\n  return (test_tup) "
    },
    {
        "number": 721,
        "prompt": "Write a function to find a path with the maximum average over all existing paths for the given square matrix of size n*n.\ndef maxAverageOfPath(cost, N): \n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    dp = [[0 for j in range(N)] for i in range(N)]\n    dp[0][0] = cost[0][0]\n    for i in range(1, N):\n        dp[0][i] = dp[0][i-1] + cost[0][i]\n        dp[i][0] = dp[i-1][0] + cost[i][0]\n    for i in range(1, N):\n        for j in range(1, N):\n            dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + cost[i][j]\n    for i in range(1, N):\n        for j in range(1, N):\n            dp[i][j] = max(dp[i][j], dp[i-1][j], dp[i][j-1]) + cost[i][j]\n    return dp[N-1][N-1]/(N*N)\n\ncost = [[1,2,3],\n        [4,5,6],\n        [7,8,9]]\nN = 3\nprint(maxAverageOfPath(cost, N)) # Output: 6.0\n\ncost = [[1,2,3,4],\n        [5,6,7,8],\n        [9,10,11,12],\n        [13,14,15,16]]\nN",
        "generated_testcode": "assert maxAverageOfPath([[1,2,3],[4,5,6],[7,8,9]], 3) == 6.67\n",
        "test": "assert maxAverageOfPath([[1, 2, 3], [6, 5, 4], [7, 3, 9]], 3) == 5.2\nassert maxAverageOfPath([[2, 3, 4], [7, 6, 5], [8, 4, 10]], 3) == 6.2\nassert maxAverageOfPath([[3, 4, 5], [8, 7, 6], [9, 5, 11]], 3) == 7.2 ",
        "canonical_solution": "M = 100\r\ndef maxAverageOfPath(cost, N): \r\n\tdp = [[0 for i in range(N + 1)] for j in range(N + 1)] \r\n\tdp[0][0] = cost[0][0] \r\n\tfor i in range(1, N): \r\n\t\tdp[i][0] = dp[i - 1][0] + cost[i][0] \r\n\tfor j in range(1, N): \r\n\t\tdp[0][j] = dp[0][j - 1] + cost[0][j] \r\n\tfor i in range(1, N): \r\n\t\tfor j in range(1, N): \r\n\t\t\tdp[i][j] = max(dp[i - 1][j], \r\n\t\t\t\t\t\tdp[i][j - 1]) + cost[i][j] \r\n\treturn dp[N - 1][N - 1] / (2 * N - 1)"
    },
    {
        "number": 722,
        "prompt": "Write a function to filter the height and width of students which are stored in a dictionary.\ndef filter_data(students,h,w):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    filtered_students = []\n    for student in students:\n        if student[\"height\"]>h and student[\"width\"]<w:\n            filtered_students.append(student)\n    return filtered_students\n\nstudents = [\n    {\"name\": \"Alice\", \"height\": 180, \"width\": 80},\n    {\"name\": \"Bob\", \"height\": 170, \"width\": 70},\n    {\"name\": \"Charlie\", \"height\": 160, \"width\": 60},\n    {\"name\": \"David\", \"height\": 150, \"width\": 50},\n]\nprint(filter_data(students,170,60))\n#Output should be [{'name': 'Bob', 'height': 170, 'width': 70}]\n#since only Bob has a height greater than 170 and a width less than 60. ",
        "generated_testcode": "assert filter_data(students, 170, 60) == [{'name': 'John', 'age': 16, 'height': 170, 'width': 60}, {'name': 'Alice', 'age': 15, 'height': 170, 'width': 60}]\n",
        "test": "assert filter_data({'Cierra Vega': (6.2, 70), 'Alden Cantrell': (5.9, 65), 'Kierra Gentry': (6.0, 68), 'Pierre Cox': (5.8, 66)},6.0,70)=={'Cierra Vega': (6.2, 70)}\nassert filter_data({'Cierra Vega': (6.2, 70), 'Alden Cantrell': (5.9, 65), 'Kierra Gentry': (6.0, 68), 'Pierre Cox': (5.8, 66)},5.9,67)=={'Cierra Vega': (6.2, 70),'Kierra Gentry': (6.0, 68)}\nassert filter_data({'Cierra Vega': (6.2, 70), 'Alden Cantrell': (5.9, 65), 'Kierra Gentry': (6.0, 68), 'Pierre Cox': (5.8, 66)},5.7,64)=={'Cierra Vega': (6.2, 70),'Alden Cantrell': (5.9, 65),'Kierra Gentry': (6.0, 68),'Pierre Cox': (5.8, 66)}",
        "canonical_solution": "def filter_data(students,h,w):\r\n    result = {k: s for k, s in students.items() if s[0] >=h and s[1] >=w}\r\n    return result    "
    },
    {
        "number": 723,
        "prompt": "Write a function to count the same pair in two given lists using map function.\ndef count_same_pair(nums1, nums2):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    mapping = {}\n    count = 0\n    for num in nums1:\n        mapping[num] = mapping.get(num, 0) + 1\n    for num in nums2:\n        if num in mapping and mapping[num] > 0:\n            count += 1\n            mapping[num] -= 1\n    return count\n\n# Test the function with example\nnums1 = [1, 2, 3, 4, 5, 6, 7]\nnums2 = [3, 4, 5, 6, 7, 8]\nprint(count_same_pair(nums1, nums2))  # Output: 3\n\n# Example explanation:\n# The same pairs in nums1 and nums2 are 3, 4, 5, 6, 7\n\n# Test the function with empty list\nnums1 = []\nnums2 = [1, 2, 3, 4, 5]\nprint(count_same_pair(nums1, nums2))  # Output: 0\n\n# Test the function with a list with repeated element\nnums1 = [1, 1, 1, 2, 2, 3]\nnums2 = [1, 1, 2, 2, 3]\nprint(count_same_pair(nums1, nums2))  # Output: 3\n# The same pairs in nums1 and nums2 are 1, 1",
        "generated_testcode": "assert count_same_pair([1, 2, 3, 4, 5], [3, 4, 5, 6]) == 2\n",
        "test": "assert count_same_pair([1, 2, 3, 4, 5, 6, 7, 8],[2, 2, 3, 1, 2, 6, 7, 9])==4\nassert count_same_pair([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8],[2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8])==11\nassert count_same_pair([2, 4, -6, -9, 11, -12, 14, -5, 17],[2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8])==1",
        "canonical_solution": "from operator import eq\r\ndef count_same_pair(nums1, nums2):\r\n    result = sum(map(eq, nums1, nums2))\r\n    return result"
    },
    {
        "number": 724,
        "prompt": "Write a function to calculate the sum of all digits of the base to the specified power.\ndef power_base_sum(base, power):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    # initialize sum to 0\n    sum = 0\n    # convert base to string and iterate over the characters\n    for digit in str(base):\n        # add the digit raised to the power to the sum\n        sum += int(digit) ** power\n    return sum\n\nprint(power_base_sum(123, 2)) # Output: 1 + 2^2 + 3^2 = 10 + 4 + 9 = 23\nprint(power_base_sum(456, 3)) # Output: 4^3 + 5^3 + 6^3 = 64 + 125 + 216 = 305\nprint(power_base_sum(789, 1)) # Output: 7 + 8 + 9 = 24\nprint(power_base_sum(1000, 0)) # Output: 1^0 + 0^0 + 0^0 = 1 + 0 + 0 = 1\nprint(power_base_sum(9, 4)) # Output: 9^4 = 81 ",
        "generated_testcode": "assert power_base_sum(2, 10) == 12\n",
        "test": "assert power_base_sum(2,100)==115\nassert power_base_sum(8,10)==37\nassert power_base_sum(8,15)==62",
        "canonical_solution": "def power_base_sum(base, power):\r\n    return sum([int(i) for i in str(pow(base, power))])"
    },
    {
        "number": 725,
        "prompt": "Write a function to extract values between quotation marks of the given string by using regex.\ndef extract_quotation(text1):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    import re\n    pattern = re.compile(r'\"(.*?)\"')\n    matches = re.findall(pattern, text1)\n    return matches\n\ntext1 = \"\\\"This is a test\\\"\"\nprint(extract_quotation(text1))  # Output: ['This is a test']\ntext2 = \"\\\"This is a test\\\" and \\\"This is another test\\\"\"\nprint(extract_quotation(text2))  # Output: ['This is a test', 'This is another test']\ntext3 = \"This is a test with no quotation marks\"\nprint(extract_quotation(text3))  # Output: []\n\n# Extract email addresses from a given string using regex\ndef extract_email(text2):\n    import re\n    pattern = re.compile(r'\\b[\\w.-]+@[\\w.-]+\\.[a-z]{2,}\\b')\n    matches = re.findall(pattern, text2)\n    return matches\n\ntext2 = \"Please email me at test@example.com or support@example.org\"\nprint(extract_email(text2))  # Output: ['test@example.com', 'support@example.org']\ntext3 = \"This is not an email address\"\nprint(extract_email(text3))  # Output: []\n\n# Extract IP addresses from a given string using regex\ndef extract_ip(text3):\n    import re\n    pattern = re.compile(r'\\d{1,3}\\.\\d{1,3}\\.\\d{",
        "generated_testcode": "assert extract_quotation(\"Hello, 'world'\") == \"world\"\n",
        "test": "assert extract_quotation('Cortex \"A53\" Based \"multi\" tasking \"Processor\"') == ['A53', 'multi', 'Processor']\nassert extract_quotation('Cast your \"favorite\" entertainment \"apps\"') == ['favorite', 'apps']\nassert extract_quotation('Watch content \"4k Ultra HD\" resolution with \"HDR 10\" Support') == ['4k Ultra HD', 'HDR 10']",
        "canonical_solution": "import re\r\ndef extract_quotation(text1):\r\n  return (re.findall(r'\"(.*?)\"', text1))"
    },
    {
        "number": 726,
        "prompt": "Write a function to multiply the adjacent elements of the given tuple.\ndef multiply_elements(test_tup):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    result = 1\n    for i in range(len(test_tup)-1):\n        result *= test_tup[i]\n    return result\n\n# Test the function with the given test case\ntest_tup = (2, 3, 4, 5)\nprint(multiply_elements(test_tup))  # Output: 24\n\n# Test the function with an empty tuple\ntest_tup = ()\nprint(multiply_elements(test_tup))  # Output: 1\n\n# Test the function with a single element tuple\ntest_tup = (5,)\nprint(multiply_elements(test_tup))  # Output: 5\n\n# Test the function with a tuple with negative numbers\ntest_tup = (-2, 4, -3, 6)\nprint(multiply_elements(test_tup))  # Output: -48\n\n# Test the function with a tuple with floating point numbers\ntest_tup = (1.5, 2.5, 3.5, 4.5)\nprint(multiply_elements(test_tup))  # Output: 30.0\n\n# Test the function with a tuple with a mix of numbers and strings\ntest_tup = (2, 3, 4, \"hello\")\nprint(multiply_elements(test_tup))  # Output: 6\n\n# Test the function with a tuple with all strings\ntest_tup = (\"hello\", \"world\",",
        "generated_testcode": "assert multiply_elements((1, 2, 3, 4, 5, 6) == 24)\n",
        "test": "assert multiply_elements((1, 5, 7, 8, 10)) == (5, 35, 56, 80)\nassert multiply_elements((2, 4, 5, 6, 7)) == (8, 20, 30, 42)\nassert multiply_elements((12, 13, 14, 9, 15)) == (156, 182, 126, 135)",
        "canonical_solution": "def multiply_elements(test_tup):\r\n  res = tuple(i * j for i, j in zip(test_tup, test_tup[1:]))\r\n  return (res) "
    },
    {
        "number": 727,
        "prompt": "Write a function to remove all characters except letters and numbers using regex\ndef remove_char(S):\n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    import re\n    return re.sub('[^a-zA-Z0-9]', '', S)\n\n# Example usage:\nprint(remove_char('Hello, World! 123'))  # Output: 'HelloWorld123'\nprint(remove_char('This is a test string'))  # Output: 'Thisisateststring'\nprint(remove_char('12345!@#$%^&*(abcde'))  # Output: '12345abcde'\nprint(remove_char('abcdefghijklmnopqrstuvwxyz'))  # Output: 'abcdefghijklmnopqrstuvwxyz'\nprint(remove_char('@#$%^&*'))  # Output: ''\nprint(remove_char(''))  # Output: '' ",
        "generated_testcode": "assert remove_char(\"Hello, World! 123\") == \"HelloWorld123\"\n",
        "test": "assert remove_char(\"123abcjw:, .@! eiw\") == '123abcjweiw'\nassert remove_char(\"Hello1234:, ! Howare33u\") == 'Hello1234Howare33u'\nassert remove_char(\"Cool543Triks@:, Make@987Trips\") == 'Cool543TriksMake987Trips' ",
        "canonical_solution": "import re \r\ndef remove_char(S):\r\n  result = re.sub('[\\W_]+', '', S) \r\n  return result"
    },
    {
        "number": 728,
        "prompt": "Write a function to sum elements in two lists.\ndef sum_list(lst1,lst2):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    result = []\n    for i in range(len(lst1)):\n        result.append(lst1[i] + lst2[i])\n    return result\n\n# Test the function with the given example\nlst1 = [1,2,3,4]\nlst2 = [5,6,7,8]\nprint(sum_list(lst1, lst2)) #[6,8,10,12]\n\n# Test the function with a longer list\nlst1 = [1,2,3,4,5,6]\nlst2 = [7,8,9,10,11]\nprint(sum_list(lst1, lst2)) #[8,10,12,14,16] ",
        "generated_testcode": "assert sum_list([1,2,3],[4,5,6]) == [5,7,9]\n",
        "test": "assert sum_list([10,20,30],[15,25,35])==[25,45,65]\nassert sum_list([1,2,3],[5,6,7])==[6,8,10]\nassert sum_list([15,20,30],[15,45,75])==[30,65,105]",
        "canonical_solution": "def sum_list(lst1,lst2):\r\n  res_list = [lst1[i] + lst2[i] for i in range(len(lst1))] \r\n  return res_list"
    },
    {
        "number": 729,
        "prompt": "Write a function to add two lists using map and lambda function.\ndef add_list(nums1,nums2):\n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    return list(map(lambda x,y: x+y,nums1,nums2))\n\n# Test the function with some sample inputs\nnums1 = [1,2,3,4]\nnums2 = [5,6,7,8]\nprint(add_list(nums1,nums2)) # Output should be [6, 8, 10, 12]\n\n# Note: This function assumes that both lists have same length. ",
        "generated_testcode": "assert add_list([1,2,3],[4,5,6]) == [5,7,9]\n",
        "test": "assert add_list([1, 2, 3],[4,5,6])==[5, 7, 9]\nassert add_list([1,2],[3,4])==[4,6]\nassert add_list([10,20],[50,70])==[60,90]",
        "canonical_solution": "def add_list(nums1,nums2):\r\n  result = map(lambda x, y: x + y, nums1, nums2)\r\n  return list(result)"
    },
    {
        "number": 730,
        "prompt": "Write a function to remove consecutive duplicates of a given list.\ndef consecutive_duplicates(nums):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    result = []\n    prev = None\n    for num in nums:\n        if num != prev:\n            result.append(num)\n            prev = num\n    return result\n\n# Example usage:\nprint(consecutive_duplicates([1, 2, 2, 2, 3, 4, 4, 4, 5, 6, 6, 6]))  # Output: [1, 2, 3, 4, 5, 6]\nprint(consecutive_duplicates([1, 1, 2, 2, 2, 3, 3, 3]))        # Output: [1, 2, 3]\nprint(consecutive_duplicates([1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3]))  # Output: [1, 2, 3] ",
        "generated_testcode": "assert consecutive_duplicates(nums=[1, 2, 2, 3, 3, 4, 4, 5, 5, 5, 6, 6, 6, 7, 8, 8, 8, 9, 9, 9]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]\n",
        "test": "assert consecutive_duplicates([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4 ])==[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4]\nassert consecutive_duplicates([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10])==[10, 15, 19, 18, 17, 26, 17, 18, 10]\nassert consecutive_duplicates(['a', 'a', 'b', 'c', 'd', 'd'])==['a', 'b', 'c', 'd']",
        "canonical_solution": "from itertools import groupby\r\ndef consecutive_duplicates(nums):\r\n    return [key for key, group in groupby(nums)] "
    },
    {
        "number": 731,
        "prompt": "Write a function to find the lateral surface area of a cone.\ndef lateralsurface_cone(r,h):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    import math\n    lateralsurface = math.pi * r * math.sqrt(r**2 + h**2)\n    return lateralsurface\nprint(lateralsurface_cone(4, 6)) #should return 140.75566557421717434\n\n# Write a function to find the volume of a cone.\ndef volume_cone(r,h):\n    import math\n    volume = 1/3 * math.pi * r**2 * h\n    return volume\nprint(volume_cone(4, 6)) #should return 60.28809523884261077\n\n# Write a function to find the surface area of a sphere.\ndef surface_sphere(r):\n    import math\n    surface = 4 * math.pi * r**2\n    return surface\nprint(surface_sphere(4)) #should return 50.26548245743666924\n\n# Write a function to find the volume of a sphere.\ndef volume_sphere(r):\n    import math\n    volume = (4/3) * math.pi * r**3\n    return volume\nprint(volume_sphere(4)) #should return 125.66370614359173244\n\n# Write a function to find the surface area of a cylinder.\ndef surface_cy",
        "generated_testcode": "assert lateralsurface_cone(3,5) == 94.04\n",
        "test": "assert lateralsurface_cone(5,12)==204.20352248333654\nassert lateralsurface_cone(10,15)==566.3586699569488\nassert lateralsurface_cone(19,17)==1521.8090132193388",
        "canonical_solution": "import math\r\ndef lateralsurface_cone(r,h):\r\n  l = math.sqrt(r * r + h * h)\r\n  LSA = math.pi * r  * l\r\n  return LSA"
    },
    {
        "number": 732,
        "prompt": "Write a function to replace all occurrences of spaces, commas, or dots with a colon.\ndef replace_specialchar(text):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    text = text.replace(\" \", \":\")\n    text = text.replace(\",\", \":\")\n    text = text.replace(\".\", \":\")\n    return text\n\n# Test the function with sample input\nprint(replace_specialchar(\"Hello, world. How are you? I'm fine.\")) # \"Hello:world:How:are:you?:I'm:fine.\"\n\n# Remove all special characters except hyphens and spaces\ndef remove_specialchar(text):\n    result = \"\"\n    for char in text:\n        if char.isalnum() or char == \" \":\n            result += char\n    return result\n\n# Test the function with sample input\nprint(remove_specialchar(\"Hello, world. How are you? I'm fine.\")) # \"Hello world How are you I'm fine\"\n\n# Replace all occurrences of vowels with asterisks\ndef replace_vowels(text):\n    vowels = \"aeiouAEIOU\"\n    result = \"\"\n    for char in text:\n        if char in vowels:\n            result += \"*\"\n        else:\n            result += char\n    return result\n\n# Test the function with sample input\nprint(replace_vowels(\"Hello, world. How are you? I'm fine.\")) # \"H*ll*, w*rld. H*w *s y*u? I'm *n* f*n*.\"\n\n# Count the occurrences of each word in a string\ndef count_words(text):",
        "generated_testcode": "assert replace_specialchar(\"Hello, world!\") == \"Hello:world!\"\n",
        "test": "assert replace_specialchar('Python language, Programming language.')==('Python:language::Programming:language:')\nassert replace_specialchar('a b c,d e f')==('a:b:c:d:e:f')\nassert replace_specialchar('ram reshma,ram rahim')==('ram:reshma:ram:rahim')",
        "canonical_solution": "import re\r\ndef replace_specialchar(text):\r\n return (re.sub(\"[ ,.]\", \":\", text))\r"
    },
    {
        "number": 733,
        "prompt": "Write a function to find the index of the first occurrence of a given number in a sorted array.\ndef find_first_occurrence(A, x):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    left, right = 0, len(A) - 1\n    result = -1\n    while left <= right:\n        mid = left + (right - left) // 2\n        if A[mid] < x:\n            left = mid + 1\n        elif A[mid] > x:\n            right = mid - 1\n        else:\n            result = mid\n            right = mid - 1\n    return result\n\n# Test the function with some inputs\nA = [1, 2, 3, 4, 4, 4, 4, 5, 6, 7, 7, 7, 8, 9]\nprint(find_first_occurrence(A, 4))  # Output: 2\nprint(find_first_occurrence(A, 7))  # Output: 5\nprint(find_first_occurrence(A, 5))  # Output: 5\nprint(find_first_occurrence(A, 10)) # Output: -1\n\n\n# Write a function to find the index of the last occurrence of a given number in a sorted array.\ndef find_last_occurrence(A, x):\n    left, right = 0, len(A) - 1\n    result = -1\n    while left <= right:\n        mid = left + (right - left) // 2\n        if A[mid] < x:\n            left = mid + 1\n        elif A[mid] > x:\n            right = mid",
        "generated_testcode": "assert find_first_occurrence([1, 2, 3, 4, 4, 4, 5, 6, 7], 4) == 2\n",
        "test": "assert find_first_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5) == 1\nassert find_first_occurrence([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5) == 2\nassert find_first_occurrence([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6) == 4",
        "canonical_solution": "def find_first_occurrence(A, x):\r\n    (left, right) = (0, len(A) - 1)\r\n    result = -1\r\n    while left <= right:\r\n        mid = (left + right) // 2\r\n        if x == A[mid]:\r\n            result = mid\r\n            right = mid - 1\r\n        elif x < A[mid]:\r\n            right = mid - 1\r\n        else:\r\n            left = mid + 1\r\n    return result"
    },
    {
        "number": 734,
        "prompt": "Write a python function to find sum of products of all possible subarrays.\ndef sum_Of_Subarray_Prod(arr,n):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    res=[]\n    for i in range(n):\n        prod=1\n        for j in range(i,n):\n            prod*=arr[j]\n            res.append(prod)\n    return res\n\narr=list(map(int,input(\"Enter elements of array: \").split()))\nn=len(arr)\nprint(\"Sum of all possible subarray products is:\",sum_Of_Subarray_Prod(arr,n))\n\n#Example\n#Input: Enter elements of array: 1 2 3 4 5\n#Output: Sum of all possible subarray products is: [120, 60, 30, 24, 12, 8, 4, 3, 2, 1] \n#Explanation: Subarrays of [1, 2, 3, 4, 5] are: \n#[1], [2], [3], [4], [5], [1, 2], [2, 3], [3, 4], [4, 5], [1, 2, 3], [2, 3, 4], [3, 4, 5], [1, 2, 3, 4], [2, 3, 4, 5], [1, 2, 3, 4, 5]\n#Their products are 1*1=1, 2*1=2, 3*1=3, 4*1=4, 1*",
        "generated_testcode": "assert sum_Of_Subarray_Prod([1,2,3,4,5],4) == 220\n",
        "test": "assert sum_Of_Subarray_Prod([1,2,3],3) == 20\nassert sum_Of_Subarray_Prod([1,2],2) == 5\nassert sum_Of_Subarray_Prod([1,2,3,4],4) == 84",
        "canonical_solution": "def sum_Of_Subarray_Prod(arr,n):\r\n    ans = 0\r\n    res = 0\r\n    i = n - 1\r\n    while (i >= 0):\r\n        incr = arr[i]*(1 + res)\r\n        ans += incr\r\n        res = incr\r\n        i -= 1\r\n    return (ans)"
    },
    {
        "number": 735,
        "prompt": "Write a python function to toggle bits of the number except the first and the last bit.\ndef set_middle_bits(n):  \n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    return (n & 1) << n.bit_length() | (~n & ((1 << n.bit_length() - 2) - 1) << 1) | (n & 1)\n\nn = int(input(\"Enter a number: \"))\nprint(\"Number after toggling the middle bits: \", set_middle_bits(n))\n",
        "generated_testcode": "assert set_middle_bits(10) == 11\n",
        "test": "assert toggle_middle_bits(9) == 15\nassert toggle_middle_bits(10) == 12\nassert toggle_middle_bits(11) == 13",
        "canonical_solution": "def set_middle_bits(n):  \r\n    n |= n >> 1; \r\n    n |= n >> 2; \r\n    n |= n >> 4; \r\n    n |= n >> 8; \r\n    n |= n >> 16;  \r\n    return (n >> 1) ^ 1\r\ndef toggle_middle_bits(n): \r\n    if (n == 1): \r\n        return 1\r\n    return n ^ set_middle_bits(n) "
    },
    {
        "number": 736,
        "prompt": "Write a function to locate the left insertion point for a specified value in sorted order.\ndef left_insertion(a, x):\n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    left = 0\n    right = len(a) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if a[mid] == x:\n            return mid\n        elif a[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return left\n\ndef binary_search_left(a, x):\n    return left_insertion(a, x)\n\n# Test the function with an example\na = [1, 2, 3, 4, 5, 6, 7, 8, 9]\nx = 6\nprint(binary_search_left(a, x))  # Output: 4 (6 is inserted at index 4)\n\n# Test the function with an example where the value is not found\na = [1, 2, 3, 4, 5, 6, 7, 8, 9]\nx = 10\nprint(binary_search_left(a, x))  # Output: 6 (10 is inserted at index 6)\n\n# Test the function with an example where the array has only one element\na = [1]\nx = 2\nprint(binary_search_left(a, x))  # Output: 1 (2 is inserted at index 1)\n\n# Test the function with an empty array\na = []\nx = 5\nprint(binary_search_left(a, x))  # Output",
        "generated_testcode": "assert left_insertion([1, 2, 3, 4, 5, 6], 3) == 2\n",
        "test": "assert left_insertion([1,2,4,5],6)==4\nassert left_insertion([1,2,4,5],3)==2\nassert left_insertion([1,2,4,5],7)==4",
        "canonical_solution": "import bisect\r\ndef left_insertion(a, x):\r\n    i = bisect.bisect_left(a, x)\r\n    return i"
    },
    {
        "number": 737,
        "prompt": "Write a function to check whether the given string is starting with a vowel or not using regex.\ndef check_str(string): \n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    import re\n    pattern = re.compile(r'^[aeiouAEIOU]')\n    if pattern.match(string):\n        return True\n    else:\n        return False\n\nprint(check_str(\"apple\")) # True\nprint(check_str(\"banana\")) # False\nprint(check_str(\"Elephant\")) # False\nprint(check_str(\"Aardvark\")) # True\nprint(check_str(\"Ox\")) # True ",
        "generated_testcode": "assert check_str(\"apple\") == True\n",
        "test": "assert check_str(\"annie\") == 'Valid'\nassert check_str(\"dawood\") == 'Invalid'\nassert check_str(\"Else\") == 'Valid'",
        "canonical_solution": "import re \r\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\r\ndef check_str(string): \r\n\tif(re.search(regex, string)): \r\n\t\treturn (\"Valid\") \r\n\telse: \r\n\t\treturn (\"Invalid\") "
    },
    {
        "number": 738,
        "prompt": "Write a function to calculate the geometric sum of n-1.\ndef geometric_sum(n):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    sum = 1\n    for i in range(n-1):\n        sum = sum * (1/(1+i)\n    return sum\n\n# Test the function with n=5\nprint(geometric_sum(5))\n# This should print 1.234\n\n# The result should be 1.234, as the sum of the geometric series 1/(1+i) from i=0 to i=4 is 1/(1+0)+1/(1+1)+1/(1+2)+1/(1+3)+1/(1+4) = 1/2+1/3+1/5+1/7 = 1 + 0.5 + 0.33 + 0.28 = 1.234 ",
        "generated_testcode": "assert geometric_sum(5) == 14.38\n",
        "test": "assert geometric_sum(7) == 1.9921875\nassert geometric_sum(4) == 1.9375\nassert geometric_sum(8) == 1.99609375",
        "canonical_solution": "def geometric_sum(n):\r\n  if n < 0:\r\n    return 0\r\n  else:\r\n    return 1 / (pow(2, n)) + geometric_sum(n - 1)"
    },
    {
        "number": 739,
        "prompt": "Write a python function to find the index of smallest triangular number with n digits.\ndef find_Index(n): \n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    index = 0\n    count = 1\n    triangular = 1\n    while True:\n        index += 1\n        triangular += index\n        if len(str(triangular)) == n:\n            return index\n        \nprint(find_Index(3)) # Output: 143\nprint(find_Index(4)) # Output: 153\nprint(find_Index(5)) # Output: 165\n\n# Time Complexity: O(n)\n# Space Complexity: O(1)\n\n# Method 2: Using math formula\ndef find_Index(n): \n    return (n*(n+1)//2)\n\nprint(find_Index(3)) # Output: 143\nprint(find_Index(4)) # Output: 153\nprint(find_Method(5)) # Output: 165 ",
        "generated_testcode": "assert find_Index(1) == 1\n",
        "test": "assert find_Index(2) == 4\nassert find_Index(3) == 14\nassert find_Index(4) == 45",
        "canonical_solution": "import math \r\ndef find_Index(n): \r\n    x = math.sqrt(2 * math.pow(10,(n - 1))); \r\n    return round(x); "
    },
    {
        "number": 740,
        "prompt": "Write a function to convert the given tuple to a key-value dictionary using adjacent elements.\ndef tuple_to_dict(test_tup):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    result = {}\n    for i in range(0, len(test_tup), 2):\n        result[test_tup[i]] = test_tup[i+1]\n    return result\n\n# Test your function with the following input\ntest_tup = (1, 2, 'a', 'b', 'key', 'value', 'hello', 'world')\nprint(tuple_to_dict(test_tup))  # Output: {1: 2, 'a': 'b', 'key': 'value', 'hello': 'world'}\n\n# Test your function with empty tuple\ntest_tup = ()\nprint(tuple_to_dict(test_tup))  # Output: {}\n\n# Test your function with odd length tuple\ntest_tup = (1, 2, 'a', 'b', 'key')\nprint(tuple_to_dict(test_tup))  # Output: {1: 2, 'a': 'b'}\n\n# Test your function with even length tuple\ntest_tup = (1, 2, 'a', 'b', 'key', 'value')\nprint(tuple_to_dict(test_tup))  # Output: {1: 2, 'a': 'b', 'key': 'value'} ",
        "generated_testcode": "assert tuple_to_dict((1, 2, 3, 4, 5, 6, 7, 8) == {1: 2, 3: 4, 5: 6, 7: 8})\n",
        "test": "assert tuple_to_dict((1, 5, 7, 10, 13, 5)) == {1: 5, 7: 10, 13: 5}\nassert tuple_to_dict((1, 2, 3, 4, 5, 6)) == {1: 2, 3: 4, 5: 6}\nassert tuple_to_dict((7, 8, 9, 10, 11, 12)) == {7: 8, 9: 10, 11: 12}",
        "canonical_solution": "def tuple_to_dict(test_tup):\r\n  res = dict(test_tup[idx : idx + 2] for idx in range(0, len(test_tup), 2))\r\n  return (res) "
    },
    {
        "number": 741,
        "prompt": "Write a python function to check whether all the characters are same or not.\ndef all_Characters_Same(s) :\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    return len(set(s)) == 1\n\n# Test the function\ns = \"aaa\"\nif all_Characters_Same(s) :\n    print(\"All characters are same\")\nelse :\n    print(\"All characters are not same\")\n\n# Output: All characters are same\n\ns = \"abc\"\nif all_Characters_Same(s) :\n    print(\"All characters are same\")\nelse :\n    print(\"All characters are not same\")\n\n# Output: All characters are not same\n\ns = \"bbb\"\nif all_Characters_Same(s) :\n    print(\"All characters are same\")\nelse :\n    print(\"All characters are not same\")\n\n# Output: All characters are same\n\ns = \"123\"\nif all_Characters_Same(s) :\n    print(\"All characters are same\")\nelse :\n    print(\"All characters are not same\")\n\n# Output: All characters are not same\n\n# Time Complexity: O(n)\n# Space Complexity: O(n) ",
        "generated_testcode": "assert all_Characters_Same(\"aaa\") == True\n",
        "test": "assert all_Characters_Same(\"python\") == False\nassert all_Characters_Same(\"aaa\") == True\nassert all_Characters_Same(\"data\") == False",
        "canonical_solution": "def all_Characters_Same(s) :\r\n    n = len(s)\r\n    for i in range(1,n) :\r\n        if s[i] != s[0] :\r\n            return False\r\n    return True"
    },
    {
        "number": 742,
        "prompt": "Write a function to caluclate the area of a tetrahedron.\ndef area_tetrahedron(side):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    return (3 * side ** 2 / 4 * (1 + ((3 / 5) ** 0.5)) ** 0.5)\n\n# Test the function with side length 4\nprint(area_tetrahedron(4)) # Output: 8.98974318823473368\n\n# Test the function with side length 6\nprint(area_tetrahedron(6)) # Output: 36.04565088721410696\n\n# Test the function with side length 10\nprint(area_tetrahedron(10)) # Output: 168.5181855787342553\n\n# Test the function with side length 12\nprint(area_tetrahedron(12)) # Output: 332.21271054767311745\n\n# Test the function with side length 20\nprint(area_tetrahedron(20)) # Output: 1667.1132615146618745",
        "generated_testcode": "assert area_tetrahedron(6) == 12.0\n",
        "test": "assert area_tetrahedron(3)==15.588457268119894\nassert area_tetrahedron(20)==692.8203230275509\nassert area_tetrahedron(10)==173.20508075688772",
        "canonical_solution": "import math\r\ndef area_tetrahedron(side):\r\n  area = math.sqrt(3)*(side*side)\r\n  return area"
    },
    {
        "number": 743,
        "prompt": "Write a function to rotate a given list by specified number of items to the right direction.\ndef rotate_right(list1,m,n):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    n=n%len(list1)\n    return list1[n:]+list1[:n]\n\n#Example usage:\nlist1 = [1,2,3,4,5,6,7]\nn=2\nprint(rotate_right(list1,n)) #[5,6,7,1,2,3]\n\nlist2 = [1,2,3,4,5,6,7]\nn=4\nprint(rotate_right(list2,n)) #[3,4,5,6,7,1]\n\nlist3 = [1,2,3,4,5,6,7]\nn=-1\nprint(rotate_right(list3,n)) #[1,2,3,4,5,6]\n\nlist4 = [1,2,3,4,5,6,7]\nn=6\nprint(rotate_right(list4,n)) #[1,2,3,4,5,6,7]\n\nlist5 = [1,2,3,4,5,6,7]\nn=7\nprint(rotate_right(list5,n)) #[7,1,2,3,4,5,6]\n\n# Test the function with the given test cases\nlist6 = [1,2,3,4,5,6,7]\nn=0\nprint(rotate_right(list6,n)) #[1,2,3,4,5,6,7]\n\nlist7 = []\nn=2\n",
        "generated_testcode": "assert rotate_right([1,2,3,4,5,6,7],2) == [5,6,7,1,2,3]\n",
        "test": "assert rotate_right([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],3,4)==[8, 9, 10, 1, 2, 3, 4, 5, 6]\nassert rotate_right([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],2,2)==[9, 10, 1, 2, 3, 4, 5, 6, 7, 8]\nassert rotate_right([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],5,2)==[6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8]",
        "canonical_solution": "def rotate_right(list1,m,n):\r\n  result =  list1[-(m):]+list1[:-(n)]\r\n  return result"
    },
    {
        "number": 744,
        "prompt": "Write a function to check if the given tuple has any none value or not.\ndef check_none(test_tup):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    return None in test_tup\n\n#Test the function\ntest_tup = (1, None, 3, None, 5, 7, None)\nprint(check_none(test_tup))  # Output: True\n\ntest_tup = (1, 2, 3, 4, 5, 6)\nprint(check_none(test_tup))  # Output: False\n\n#Write a function to check if the given tuple is sorted in ascending order or not\ndef is_sorted(test_tup):\n    return all(test_tup[i] <= test_tup[i+1] for i in range(len(test_tup)-1))\n\n#Test the function\ntest_tup = (1, 2, 3, 4, 5, 6)\nprint(is_sorted(test_tup))  # Output: True\n\ntest_tup = (1, 3, 2, 4, 5, 6)\nprint(is_sorted(test_tup))  # Output: False\n\n#Write a function to get the length of the tuple\ndef get_length(test_tup):\n    return len(test_tup)\n\n#Test the function\ntest_tup = (1, 2, 3, 4, 5, 6)\nprint(get_length(test_tup))  # Output: 5\n\n#Write a function to count the number of occurrences of a",
        "generated_testcode": "assert check_none((1, 2, 3, 4, 5)) == False\n",
        "test": "assert check_none((10, 4, 5, 6, None)) == True\nassert check_none((7, 8, 9, 11, 14)) == False\nassert check_none((1, 2, 3, 4, None)) == True",
        "canonical_solution": "def check_none(test_tup):\r\n  res = any(map(lambda ele: ele is None, test_tup))\r\n  return (res) "
    },
    {
        "number": 745,
        "prompt": "Write a function to find numbers within a given range where every number is divisible by every digit it contains.\ndef divisible_by_digits(startnum, endnum):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    def has_no_divisors(n):\n        for digit in str(n):\n            if n % int(digit) != 0:\n                return False\n        return True\n\n    result = []\n    for i in range(startnum, endnum+1):\n        if has_no_divisors(i):\n            result.append(i)\n    return result\n\n# Example usage:\nprint(divisible_by_digits(10, 50)) # [12, 20, 30, 40, 50]\nprint(divisible_by_digits(10000, 20000)) # [1200, 1300, 1400, 1500, 1600, 1700, 1800, 1900, 2000]\nprint(divisible_by_digits(100000, 1000000)) # [12000, 13000, 14000, 15000, 16000, 17000, 18000, 19000] ",
        "generated_testcode": "assert divisible_by_digits(10, 100) == [12, 20, 30, 40, 50, 60, 70, 80, 90]\n",
        "test": "assert divisible_by_digits(1,22)==[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]\nassert divisible_by_digits(1,15)==[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]\nassert divisible_by_digits(20,25)==[22, 24]",
        "canonical_solution": "def divisible_by_digits(startnum, endnum):\r\n    return [n for n in range(startnum, endnum+1) \\\r\n                if not any(map(lambda x: int(x) == 0 or n%int(x) != 0, str(n)))]"
    },
    {
        "number": 746,
        "prompt": "Write a function to find area of a sector.\ndef sector_area(r,a):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    pi = 3.14\n    return pi*r*r*a/360\n\n# Testing the function\nprint(\"Area of sector with radius 4 and angle of 30 degrees is:\", sector_area(4,30))\nprint(\"Area of sector with radius 6 and angle of 45 degrees is:\", sector_area(6,45)) ",
        "generated_testcode": "assert sector_area(3, 2*3.14) == 12.56\n",
        "test": "assert sector_area(4,45)==6.285714285714286\nassert sector_area(9,45)==31.82142857142857\nassert sector_area(9,360)==None",
        "canonical_solution": "def sector_area(r,a):\r\n    pi=22/7\r\n    if a >= 360:\r\n        return None\r\n    sectorarea = (pi*r**2) * (a/360)\r\n    return sectorarea"
    },
    {
        "number": 747,
        "prompt": "Write a function to find the longest common subsequence for the given three string sequence.\ndef lcs_of_three(X, Y, Z, m, n, o): \n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    # Create a table to store lengths of longest common suffixes of substrings\n    # ending at i-th char of X, j-th char of Y, k-th char of Z\n    dp = [[[0 for k in range(o+1)] for j in range(n+1)] for i in range(m+1)] \n\n    # Initialize all table entries to 0\n    for i in range(m+1):\n        for j in range(n+1):\n            for k in range(o+1):\n                dp[i][j][k] = 0\n    \n    # Fill the table in bottom-up manner using the recurrence\n    for i in range(m+1):\n        for j in range(n+1):\n            for k in range(o+1):\n                if i == 0 or j == 0 or k == 0:\n                    dp[i][j][k] = 0\n                elif X[i-1] == Y[j-1] and X[i-1] == Z[k-1]:\n                    dp[i][j][k] = dp[i-1][j-1][k-1] + 1\n                else:\n                    dp[i][j][k] = max(dp[i-1][j][k], dp[i][j-1][k], dp[i][j][k-1])\n    \n    # LCS will be the value in the last cell of the table\n",
        "generated_testcode": "assert lcs_of_three(\"AGGTAB\", \"GXTXAYB\", \"AGGXAB\", 6, 6, 6) == 4\n",
        "test": "assert lcs_of_three('AGGT12', '12TXAYB', '12XBA', 6, 7, 5) == 2\nassert lcs_of_three('Reels', 'Reelsfor', 'ReelsforReels', 5, 8, 13) == 5 \nassert lcs_of_three('abcd1e2', 'bc12ea', 'bd1ea', 7, 6, 5) == 3",
        "canonical_solution": "def lcs_of_three(X, Y, Z, m, n, o): \r\n\tL = [[[0 for i in range(o+1)] for j in range(n+1)] \r\n\t\tfor k in range(m+1)] \r\n\tfor i in range(m+1): \r\n\t\tfor j in range(n+1): \r\n\t\t\tfor k in range(o+1): \r\n\t\t\t\tif (i == 0 or j == 0 or k == 0): \r\n\t\t\t\t\tL[i][j][k] = 0\r\n\t\t\t\telif (X[i-1] == Y[j-1] and\r\n\t\t\t\t\tX[i-1] == Z[k-1]): \r\n\t\t\t\t\tL[i][j][k] = L[i-1][j-1][k-1] + 1\r\n\t\t\t\telse: \r\n\t\t\t\t\tL[i][j][k] = max(max(L[i-1][j][k], \r\n\t\t\t\t\tL[i][j-1][k]), \r\n\t\t\t\t\t\t\t\t\tL[i][j][k-1]) \r\n\treturn L[m][n][o]"
    },
    {
        "number": 748,
        "prompt": "Write a function to put spaces between words starting with capital letters in a given string by using regex.\ndef capital_words_spaces(str1):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    return re.sub(r\"(\\b[A-Z])\", r\" \\1\", str1)\n\n# Test the function with the given example\nprint(capital_words_spaces(\"ThisIsATestString\"))  # Output: \"This Is A Test String\"\n\n# Test the function with an empty string\nprint(capital_words_spaces(\"\"))  # Output: \"\"\n\n# Test the function with a string with no capital letters\nprint(capital_words_spaces(\"this is a test string\"))  # Output: \"this is a test string\"\n\n# Test the function with a string with only capital letters\nprint(capital_words_spaces(\"THISISTESTSTRING\"))  # Output: \"THIS IS TEST STRING\" ",
        "generated_testcode": "assert capital_words_spaces(\"PythonIsAwesome\") == \"Python Is Awesome\"\n",
        "test": "assert capital_words_spaces(\"Python\") == 'Python'\nassert capital_words_spaces(\"PythonProgrammingExamples\") == 'Python Programming Examples'\nassert capital_words_spaces(\"GetReadyToBeCodingFreak\") == 'Get Ready To Be Coding Freak'",
        "canonical_solution": "import re\r\ndef capital_words_spaces(str1):\r\n  return re.sub(r\"(\\w)([A-Z])\", r\"\\1 \\2\", str1)"
    },
    {
        "number": 749,
        "prompt": "Write a function to sort a given list of strings of numbers numerically.\ndef sort_numeric_strings(nums_str):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    nums = list(map(int, nums_str))\n    nums.sort()\n    return [str(num) for num in nums]\n\n# Example usage:\nprint(sort_numeric_strings(['1', '5', '2', '4', '3']))  # Output: ['1', '2', '3', '4', '5']\nprint(sort_numeric_strings(['100', '200', '15', '50']))  # Output: ['50', '100', '15', '200']\nprint(sort_numeric_strings(['1000', '20', '500', '5000', '200']))  # Output: ['100', '200', '20', '500', '500']\nprint(sort_numeric_strings(['10000', '20', '5000', '100', '500']))  # Output: ['100', '1000', '20', '500', '500'] ",
        "generated_testcode": "assert sort_numeric_strings(['1', '2', '10', '5', '3', '1']) == ['1', '1', '2', '3', '5', '10']\n",
        "test": "assert sort_numeric_strings( ['4','12','45','7','0','100','200','-12','-500'])==[-500, -12, 0, 4, 7, 12, 45, 100, 200]\nassert sort_numeric_strings(['2','3','8','4','7','9','8','2','6','5','1','6','1','2','3','4','6','9','1','2'])==[1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9]\nassert sort_numeric_strings(['1','3','5','7','1', '3','13', '15', '17','5', '7 ','9','1', '11'])==[1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17]",
        "canonical_solution": "def sort_numeric_strings(nums_str):\r\n    result = [int(x) for x in nums_str]\r\n    result.sort()\r\n    return result"
    },
    {
        "number": 750,
        "prompt": "Write a function to add the given tuple to the given list.\ndef add_tuple(test_list, test_tup):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    test_list.append(test_tup)\n    return test_list\n\n# Test the function with the example inputs\ntest_list = [1, 2, 3, 4, 5]\ntest_tup = (6, 7, 8)\nprint(add_tuple(test_list, test_tup))\n# Output: [1, 2, 3, 4, 5, (6, 7, 8)]\n\n# Test the function with the same list and a different tuple\ntest_list = [1, 2, 3, 4, 5]\ntest_tup = (9, 10, 11)\nprint(add_tuple(test_list, test_tup))\n# Output: [1, 2, 3, 4, 5, (9, 10, 11)] ",
        "generated_testcode": "assert add_tuple(test_list, test_tup) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]\n\n# Test the function with the following inputs\ntest_list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\ntest_tup = (11, 12, 13, 14, 15)\n\n",
        "test": "assert add_tuple([5, 6, 7], (9, 10)) == [5, 6, 7, 9, 10]\nassert add_tuple([6, 7, 8], (10, 11)) == [6, 7, 8, 10, 11]\nassert add_tuple([7, 8, 9], (11, 12)) == [7, 8, 9, 11, 12]",
        "canonical_solution": "def add_tuple(test_list, test_tup):\r\n  test_list += test_tup\r\n  return (test_list) "
    },
    {
        "number": 751,
        "prompt": "Write a function to check if the given array represents min heap or not.\ndef check_min_heap(arr, i):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    if i < len(arr):\n        left = 2 * i + 1\n        right = 2 * i + 2\n        if left < len(arr) and arr[left] < arr[i]:\n            return False\n        if right < len(arr) and arr[right] < arr[i]:\n            return False\n        return True\n    return True\n\n\ndef is_min_heap(arr):\n    for i in range(len(arr)):\n        if not check_min_heap(arr, i):\n            return False\n    return True\n\n# Test the function with an example\narr = [4, 10, 3, 5, 1, 2]\nprint(is_min_heap(arr))  # Output: False\n\narr = [4, 10, 3, 5, 1, 2, 6, 11, 8]\nprint(is_min_heap(arr))  # Output: False\n\narr = [4, 10, 11, 5, 1, 2, 6, 8]\nprint(is_min_heap(arr))  # Output: True\n\narr = [4, 10, 11, 5, 1, 2, 6, 8, 20]\nprint(is_min_heap(arr))  # Output: False ",
        "generated_testcode": "assert check_min_heap([4, 2, 6, 2, 8, 3, 1, 5], 0) == True\n",
        "test": "assert check_min_heap([1, 2, 3, 4, 5, 6], 0) == True\nassert check_min_heap([2, 3, 4, 5, 10, 15], 0) == True\nassert check_min_heap([2, 10, 4, 5, 3, 15], 0) == False",
        "canonical_solution": "def check_min_heap(arr, i):\r\n    if 2 * i + 2 > len(arr):\r\n        return True\r\n    left_child = (arr[i] <= arr[2 * i + 1]) and check_min_heap(arr, 2 * i + 1)\r\n    right_child = (2 * i + 2 == len(arr)) or (arr[i] <= arr[2 * i + 2] \r\n                                      and check_min_heap(arr, 2 * i + 2))\r\n    return left_child and right_child"
    },
    {
        "number": 752,
        "prompt": "Write a function to find the nth jacobsthal number.\ndef jacobsthal_num(n): \n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": true,
        "answer": "    if n <= 0: \n        return 0\n    elif n == 1: \n        return 1\n    else: \n        return jacobsthal_num(n-1) + 2*jacobsthal_num(n-2) \n\n# Test the function \nn = 5\nprint(jacobsthal_num(n)) ",
        "generated_testcode": "assert jacobsthal_num(0) == 0\n",
        "test": "assert jacobsthal_num(5) == 11\nassert jacobsthal_num(2) == 1\nassert jacobsthal_num(4) == 5",
        "canonical_solution": "def jacobsthal_num(n): \r\n\tdp = [0] * (n + 1) \r\n\tdp[0] = 0\r\n\tdp[1] = 1\r\n\tfor i in range(2, n+1): \r\n\t\tdp[i] = dp[i - 1] + 2 * dp[i - 2] \r\n\treturn dp[n]"
    },
    {
        "number": 753,
        "prompt": "Write a function to find minimum k records from tuple list.\ndef min_k(test_list, K):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    return sorted(test_list, key=lambda x: x[1])[:K]\n\n# Example usage:\ntest_list = [(1, 2), (2, 3), (3, 1), (4, 4), (5, 5), (6, 4), (7, 3), (8, 2)]\nprint(min_k(test_list, 3)) # Output: [(3, 1), (7, 3), (8, 2)]\nprint(min_k(test_list, 5)) # Output: [(1, 2), (2, 3), (3, 1), (4, 4), (5, 5)]\nprint(min_k(test_list, 1)) # Output: [(8, 2)])\n\n# Time complexity: O(NlogN) because of the sorting step\n# Space complexity: O(N) because of the sorted list",
        "generated_testcode": "assert min_k(test_list, 3) == [('a', 1), ('b', 2), ('c', 3)]\n",
        "test": "assert min_k([('Manjeet', 10), ('Akshat', 4), ('Akash', 2), ('Nikhil', 8)], 2) == [('Akash', 2), ('Akshat', 4)]\nassert min_k([('Sanjeev', 11), ('Angat', 5), ('Akash', 3), ('Nepin', 9)], 3) == [('Akash', 3), ('Angat', 5), ('Nepin', 9)]\nassert min_k([('tanmay', 14), ('Amer', 11), ('Ayesha', 9), ('SKD', 16)], 1) == [('Ayesha', 9)]",
        "canonical_solution": "def min_k(test_list, K):\r\n  res = sorted(test_list, key = lambda x: x[1])[:K]\r\n  return (res) "
    },
    {
        "number": 754,
        "prompt": "Write a function to find common index elements from three lists.\ndef extract_index_list(l1, l2, l3):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    common = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3:\n            common.append(i)\n    return common\n\nl1 = [1,2,3,4,5,6,7,8,9]\nl2 = [3,4,6,7,9,10,11,12]\nl3 = [4,6,8,9,10,15,20]\n\nprint(extract_index_list(l1, l2, l3)) # Output: [1, 2, 4]\n\n# 1, 2, and 4 are the indices where the elements are common in all three lists. ",
        "generated_testcode": "assert extract_index_list([1, 2, 3, 4, 5], [2, 4, 6, 8], [4, 2, 1]) == [1, 2]\n",
        "test": "assert extract_index_list([1, 1, 3, 4, 5, 6, 7],[0, 1, 2, 3, 4, 5, 7],[0, 1, 2, 3, 4, 5, 7])==[1, 7]\nassert extract_index_list([1, 1, 3, 4, 5, 6, 7],[0, 1, 2, 3, 4, 6, 5],[0, 1, 2, 3, 4, 6, 7])==[1, 6]\nassert extract_index_list([1, 1, 3, 4, 6, 5, 6],[0, 1, 2, 3, 4, 5, 7],[0, 1, 2, 3, 4, 5, 7])==[1, 5]",
        "canonical_solution": "def extract_index_list(l1, l2, l3):\r\n    result = []\r\n    for m, n, o in zip(l1, l2, l3):\r\n        if (m == n == o):\r\n            result.append(m)\r\n    return result"
    },
    {
        "number": 755,
        "prompt": "Write a function to find the second smallest number in a list.\ndef second_smallest(numbers):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    # your code here\n    numbers = list(set(numbers) - {max(numbers)})\n    return min(numbers)\n\n# Example usage:\nnumbers = [10, 23, 7, 9, 11, 23, 10, 5, 23, 20]\nprint(second_smallest(numbers))  # Output: 7\n\n# Test cases\nprint(second_smallest([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 2)  # Should print True\nprint(second_smallest([1, 2, 3, 4, 4, 5, 6, 7, 8, 9]) == 2)  # Should print True\nprint(second_smallest([1, 1, 1, 1, 1, 1, 1, 1]) == 1)  # Should print True\nprint(second_smallest([1]) == 1)  # Should print True\nprint(second_smallest([]) == None)  # Should print None ",
        "generated_testcode": "assert second_smallest([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 2\n",
        "test": "assert second_smallest([1, 2, -8, -2, 0, -2])==-2\nassert second_smallest([1, 1, -0.5, 0, 2, -2, -2])==-0.5\nassert second_smallest([2,2])==None",
        "canonical_solution": "def second_smallest(numbers):\r\n  if (len(numbers)<2):\r\n    return\r\n  if ((len(numbers)==2)  and (numbers[0] == numbers[1]) ):\r\n    return\r\n  dup_items = set()\r\n  uniq_items = []\r\n  for x in numbers:\r\n    if x not in dup_items:\r\n      uniq_items.append(x)\r\n      dup_items.add(x)\r\n  uniq_items.sort()    \r\n  return  uniq_items[1] "
    },
    {
        "number": 756,
        "prompt": "Write a function that matches a string that has an a followed by zero or one 'b'.\ndef text_match_zero_one(text):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    return re.search(r'a.*b?', text)\n\n# Test cases\nprint(text_match_zero_one('a')) # should return True\nprint(text_match_zero_one('ab')) # should return True\nprint(text_match_zero_one('abc')) # should return True\nprint(text_match_zero_one('aab')) # should return False\nprint(text_match_zero_one('b')) # should return False\n\n# Output:\n# <re.Match object; span=(0, 1), match='a'>\n# <re.Match object; span=(0, 2), match='ab'>\n# <re.Match object; span=(0, 2), match='abc'>\n# None\n# None\n\n# Write a function that matches a string that has 'a' followed by 'b' and 'c' with zero or one 'd'.\ndef text_match_zero_one_two(text):\n    return re.search(r'a.*?b.*?c.*?d?', text)\n\n# Test cases\nprint(text_match_zero_one_two('ab')) # should return True\nprint(text_match_zero_one_two('abc')) # should return True\nprint(text_match_zero_one_two('aac')) # should return True\nprint(text_match_zero_one_two('adc')) # should return False\n\n# Output:\n# <re.Match object; span=(0, 2), match='ab'>\n",
        "generated_testcode": "assert text_match_zero_one(\"a\") == True\n",
        "test": "assert text_match_zero_one(\"ac\")==('Found a match!')\nassert text_match_zero_one(\"dc\")==('Not matched!')\nassert text_match_zero_one(\"abbbba\")==('Found a match!')",
        "canonical_solution": "import re\r\ndef text_match_zero_one(text):\r\n        patterns = 'ab?'\r\n        if re.search(patterns,  text):\r\n                return 'Found a match!'\r\n        else:\r\n                return('Not matched!')"
    },
    {
        "number": 757,
        "prompt": "Write a function to count the pairs of reverse strings in the given string list.\ndef count_reverse_pairs(test_list):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j][::-1]:\n                count += 1\n    return count\n\ntest_list = [\"race\", \"noon\", \"level\", \"down\", \"elbow\", \"are\", \"level\", \"recluse\"]\nprint(count_reverse_pairs(test_list)) # Output: 3 \n\n# Time Complexity: O(n^2)\n# Space Complexity: O(1) ",
        "generated_testcode": "assert count_reverse_pairs(['abc', 'cba', 'bac', 'cab', 'bca']) == 2\n",
        "test": "assert count_reverse_pairs([\"julia\", \"best\", \"tseb\", \"for\", \"ailuj\"])== '2'\nassert count_reverse_pairs([\"geeks\", \"best\", \"for\", \"skeeg\"]) == '1'\nassert count_reverse_pairs([\"makes\", \"best\", \"sekam\", \"for\", \"rof\"]) == '2' ",
        "canonical_solution": "def count_reverse_pairs(test_list):\r\n  res = sum([1 for idx in range(0, len(test_list)) for idxn in range(idx, len( \r\n\ttest_list)) if test_list[idxn] == str(''.join(list(reversed(test_list[idx]))))]) \r\n  return str(res)"
    },
    {
        "number": 758,
        "prompt": "Write a function to count number of unique lists within a list.\ndef unique_sublists(list1):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    unique_list = []\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            if list1[i] != list1[j]:\n                unique_list.append([list1[i], list1[j]])\n    return len(unique_list)\n\n# Test cases\nprint(unique_sublists([1, 2, 3, 4, 5])) # Output: 10\nprint(unique_sublists([1, 2, 2, 3, 4, 4])) # Output: 6\nprint(unique_sublists([1, 2, 3, 4, 5, 6])) # Output: 15\nprint(unique_sublists([1, 2, 2, 3, 3, 4, 4, 5, 5])) # Output: 20\nprint(unique_sublists([1, 1, 2, 3, 3, 4, 4, 5, 5])) # Output: 15\nprint(unique_sublists([1, 1, 2, 2, 3, 3, 4, 4, 5, 5])) # Output: 10\nprint(unique_sublists([1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6])) # Output: 21\nprint(unique_sublists([1",
        "generated_testcode": "assert unique_sublists([\"a\", \"b\", \"c\", \"a\", \"b\", \"c\"]) == 2\n",
        "test": "assert unique_sublists([[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]] )=={(1, 3): 2, (5, 7): 2, (13, 15, 17): 1, (9, 11): 1}\nassert unique_sublists([['green', 'orange'], ['black'], ['green', 'orange'], ['white']])=={('green', 'orange'): 2, ('black',): 1, ('white',): 1}\nassert unique_sublists([[10, 20, 30, 40], [60, 70, 50, 50], [90, 100, 200]])=={(10, 20, 30, 40): 1, (60, 70, 50, 50): 1, (90, 100, 200): 1}",
        "canonical_solution": "def unique_sublists(list1):\r\n    result ={}\r\n    for l in  list1: \r\n        result.setdefault(tuple(l), list()).append(1) \r\n    for a, b in result.items(): \r\n        result[a] = sum(b)\r\n    return result"
    },
    {
        "number": 759,
        "prompt": "Write a function to check a decimal with a precision of 2.\ndef is_decimal(num):\n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    if isinstance(num, str):\n        num = float(num)\n    if isinstance(num, float):\n        return len(str(num).split('.')[1]) <= 2\n    return False\n\n# Test the function\nprint(is_decimal(\"3.45\"))  # Output: True\nprint(is_decimal(\"3.456\"))  # Output: False\nprint(is_decimal(3.456))  # Output: False\nprint(is_decimal(3.45))  # Output: True\nprint(is_decimal(3))  # Output: False\nprint(is_decimal(\"3\"))  # Output: False\n",
        "generated_testcode": "assert is_decimal(3.14) == True\n",
        "test": "assert is_decimal('123.11')==True\nassert is_decimal('e666.86')==False\nassert is_decimal('3.124587')==False",
        "canonical_solution": "def is_decimal(num):\r\n    import re\r\n    dnumre = re.compile(r\"\"\"^[0-9]+(\\.[0-9]{1,2})?$\"\"\")\r\n    result = dnumre.search(num)\r\n    return bool(result)"
    },
    {
        "number": 760,
        "prompt": "Write a python function to check whether an array contains only one distinct element or not.\ndef unique_Element(arr,n):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    if len(set(arr)) == 1:\n        return True\n    else:\n        return False\n\n#test the function\narr = [2,2,2,2,2,2,2,2,2]\nn = len(arr)\nif unique_Element(arr,n):\n    print(\"True\")\nelse:\n    print(\"False\")\n\n# output: True ",
        "generated_testcode": "assert unique_Element([1,2,3,4,5,6],5) == False\n",
        "test": "assert unique_Element([1,1,1],3) == 'YES'\nassert unique_Element([1,2,1,2],4) == 'NO'\nassert unique_Element([1,2,3,4,5],5) == 'NO'",
        "canonical_solution": "def unique_Element(arr,n):\r\n    s = set(arr)\r\n    if (len(s) == 1):\r\n        return ('YES')\r\n    else:\r\n        return ('NO')"
    },
    {
        "number": 761,
        "prompt": "Write a function to caluclate arc length of an angle.\ndef arc_length(d,a):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    import math\n    return d * math.radians(a)\n\ndef main():\n    d = float(input(\"Enter the distance: \"))\n    a = float(input(\"Enter the angle in degrees: \"))\n    result = arc_length(d,a)\n    print(\"The arc length is:\",result)\n\nif __name__ == \"__main__\":\n    main()\n",
        "generated_testcode": "assert arc_length(1, 90) == 0.5\n",
        "test": "assert arc_length(9,45)==3.5357142857142856\nassert arc_length(9,480)==None\nassert arc_length(5,270)==11.785714285714285",
        "canonical_solution": "def arc_length(d,a):\r\n    pi=22/7\r\n    if a >= 360:\r\n        return None\r\n    arclength = (pi*d) * (a/360)\r\n    return arclength"
    },
    {
        "number": 762,
        "prompt": "Write a function to check whether the given month number contains 30 days or not.\ndef check_monthnumber_number(monthnum3):\n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    if monthnum3 in [4, 6, 9, 11]:\n        return True\n    elif monthnum3 == 2:\n        return False\n    else:\n        return True\n\n# Test the function with input month number 4\nprint(check_monthnumber_number(4))  # should return True\n\n# Test the function with input month number 2\nprint(check_monthnumber_number(2))  # should return False\n\n# Test the function with input month number 9\nprint(check_monthnumber_number(9))  # should return True\n\n# Test the function with input month number 11\nprint(check_monthnumber_number(11))  # should return True\n\n# Test the function with input month number 5\nprint(check_monthnumber_number(5))  # should return True\n\n# Test the function with input month number 1\nprint(check_monthnumber_number(1))  # should return True\n\n# Test the function with input month number 12\nprint(check_monthnumber_number(12))  # should return True\n\n# Test the function with input month number 3\nprint(check_monthnumber_number(3))  # should return True\n\n# Test the function with input month number 7\nprint(check_monthnumber_number(7))  # should return True\n\n# Test the function with input month number 8\nprint(check_monthnumber_number(8))  # should return True\n\n# Test the function with input month number ",
        "generated_testcode": "assert check_monthnumber_number(1) == True\n",
        "test": "assert check_monthnumber_number(6)==True\nassert check_monthnumber_number(2)==False\nassert check_monthnumber_number(12)==False",
        "canonical_solution": "def check_monthnumber_number(monthnum3):\r\n  if(monthnum3==4 or monthnum3==6 or monthnum3==9 or monthnum3==11):\r\n    return True\r\n  else:\r\n    return False"
    },
    {
        "number": 763,
        "prompt": "Write a python function to find the minimum difference between any two elements in a given array.\ndef find_Min_Diff(arr,n): \n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    arr.sort() \n    min_diff = abs(arr[1] - arr[0]) \n    for i in range(1, n): \n        if abs(arr[i] - arr[i-1]) < min_diff: \n            min_diff = abs(arr[i] - arr[i-1]) \n    return min_diff \n  \n# Driver code \narr = [3, 8, -5, 10, 2, -2, 0, 11, 13] \nn = len(arr) \nprint(find_Min_Diff(arr, n)) ",
        "generated_testcode": "assert find_Min_Diff([1, 3, 5, 12, 15, 19, 26], 5) == 2\n",
        "test": "assert find_Min_Diff((1,5,3,19,18,25),6) == 1\nassert find_Min_Diff((4,3,2,6),4) == 1\nassert find_Min_Diff((30,5,20,9),4) == 4",
        "canonical_solution": "def find_Min_Diff(arr,n): \r\n    arr = sorted(arr) \r\n    diff = 10**20 \r\n    for i in range(n-1): \r\n        if arr[i+1] - arr[i] < diff: \r\n            diff = arr[i+1] - arr[i]  \r\n    return diff "
    },
    {
        "number": 764,
        "prompt": "Write a python function to count numeric values in a given string.\ndef number_ctr(str):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    count = 0\n    for i in range(len(str)):\n        if str[i].isdigit():\n            count += 1\n    return count\n\n# Test the function\nprint(number_ctr(\"Hello World 123 456\"))  # Should return 5\nprint(number_ctr(\"abcdefg\"))  # Should return 0\nprint(number_ctr(\"123 456 789\"))  # Should return 6\nprint(number_ctr(\"12abc34 56def\"))  # Should return 5\n\n# Output: \n# 5\n# 0\n# 6\n# 5\n\n# Explanation:\n# In the first example, there are 5 numeric values in the string.\n# In the second example, there are no numeric values in the string.\n# In the third example, there are 6 numeric values in the string.\n# In the fourth example, there are 5 numeric values in the string. ",
        "generated_testcode": "assert number_ctr(\"Hello 123 World 456\") == 2\n",
        "test": "assert number_ctr('program2bedone') == 1\nassert number_ctr('3wonders') ==1\nassert number_ctr('123') == 3",
        "canonical_solution": "def number_ctr(str):\r\n      number_ctr= 0\r\n      for i in range(len(str)):\r\n          if str[i] >= '0' and str[i] <= '9': number_ctr += 1     \r\n      return  number_ctr"
    },
    {
        "number": 765,
        "prompt": "Write a function to find nth polite number.\ndef is_polite(n): \n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    if n < 1: \n        return False\n    return str(n) == str(n)[::-1]\n\ndef polite_number(n): \n    count = 0\n    num = 0\n    while True: \n        if is_polite(num): \n            count += 1\n        if count == n: \n            return num\n        num += 1\n\n# Test the function \nprint(polite_number(10)) \nprint(polite_number(15)) \nprint(polite_number(25)) ",
        "generated_testcode": "assert is_polite(1) == True\n",
        "test": "assert is_polite(7) == 11\nassert is_polite(4) == 7\nassert is_polite(9) == 13",
        "canonical_solution": "import math \r\ndef is_polite(n): \r\n\tn = n + 1\r\n\treturn (int)(n+(math.log((n + math.log(n, 2)), 2))) "
    },
    {
        "number": 766,
        "prompt": "Write a function to iterate over all pairs of consecutive items in a given list.\ndef pair_wise(l1):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    for i in range(len(l1)-1):\n        yield (l1[i], l1[i+1])\n\n# Example usage:\nl1 = [1,2,3,4,5,6]\nfor p in pair_wise(l1):\n    print(p)\n# Output: (1,2) (2,3) (3,4) (4,5) (5,6)\n\n# or\n\nl2 = [1,2,3]\nfor p in pair_wise(l2):\n    print(p[0] * p[1])\n# Output: 2 6\n\n# or\n\ndef square_pairs(l1):\n    for i in pair_wise(l1):\n        yield i[0] ** 2 + i[1] ** 2\n\nl3 = [1,2,3,4,5]\nprint(list(square_pairs(l3))\n# Output: [5, 13, 25, 41]\n```\n\nThis function takes advantage of Python's lazy evaluation and the `yield` keyword to create a generator that yields pairs of consecutive elements. It does not create a list in memory, but instead yields the pairs on the fly as needed. It also handles lists of length 1 or 0 without erroring out. ",
        "generated_testcode": "assert pair_wise([1, 2, 3, 4, 5]) == [(1, 2), (2, 3), (3, 4), (4, 5)]\n",
        "test": "assert pair_wise([1,1,2,3,3,4,4,5])==[(1, 1), (1, 2), (2, 3), (3, 3), (3, 4), (4, 4), (4, 5)]\nassert pair_wise([1,5,7,9,10])==[(1, 5), (5, 7), (7, 9), (9, 10)]\nassert pair_wise([1,2,3,4,5,6,7,8,9,10])==[(1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 7), (7, 8), (8, 9), (9, 10)]",
        "canonical_solution": "def pair_wise(l1):\r\n    temp = []\r\n    for i in range(len(l1) - 1):\r\n        current_element, next_element = l1[i], l1[i + 1]\r\n        x = (current_element, next_element)\r\n        temp.append(x)\r\n    return temp"
    },
    {
        "number": 767,
        "prompt": "Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019.\ndef get_Pairs_Count(arr,n,sum):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    pairs_count = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            if(arr[i]+arr[j] == sum):\n                pairs_count += 1\n    return pairs_count\n\n# Test the function\narr = [1,2,3,4,5,6,7]\nn = len(arr)\nsum = 7\nprint(\"Pairs count:\", get_Pairs_Count(arr,n,sum)) ",
        "generated_testcode": "assert get_Pairs_Count([1,2,3,4,5,6,7,8,9],7) == 2\n",
        "test": "assert get_Pairs_Count([1,1,1,1],4,2) == 6\nassert get_Pairs_Count([1,5,7,-1,5],5,6) == 3\nassert get_Pairs_Count([1,-2,3],3,1) == 1",
        "canonical_solution": "def get_Pairs_Count(arr,n,sum):\r\n    count = 0  \r\n    for i in range(0,n):\r\n        for j in range(i + 1,n):\r\n            if arr[i] + arr[j] == sum:\r\n                count += 1\r\n    return count"
    },
    {
        "number": 768,
        "prompt": "Write a python function to check for odd parity of a given number.\ndef check_Odd_Parity(x): \n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    return x & 1 \n\n# Test the function with some sample inputs \nprint(check_Odd_Parity(3))  # Output: 1 \nprint(check_Odd_Parity(4))  # Output: 0 \nprint(check_Odd_Parity(7))  # Output: 1 \nprint(check_Odd_Parity(10)) # Output: 0 \nprint(check_Odd_Parity(11)) # Output: 1 ",
        "generated_testcode": "assert check_Odd_Parity(5) == True\n",
        "test": "assert check_Odd_Parity(13) == True\nassert check_Odd_Parity(21) == True\nassert check_Odd_Parity(18) == False",
        "canonical_solution": "def check_Odd_Parity(x): \r\n    parity = 0\r\n    while (x != 0): \r\n        x = x & (x - 1) \r\n        parity += 1\r\n    if (parity % 2 == 1): \r\n        return True\r\n    else: \r\n        return False"
    },
    {
        "number": 769,
        "prompt": "Write a python function to get the difference between two lists.\ndef Diff(li1,li2):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    return (list(set(li1) - set(li2)))\n\n#Test the function\nli1 = [1,2,3,4,5,6,7,8,9]\nli2 = [1,2,3,8,9,10]\nprint(Diff(li1,li2)) #Output: [4, 5, 6, 7, 10]\n\nli1 = [1,2,3,4,5,6,7,8,9]\nli2 = [5,6,7,8,9]\nprint(Diff(li1,li2)) #Output: [1, 2, 3, 4] \n\nli1 = [1,2,3,4,5,6,7,8,9]\nli2 = [1,2,3,4,5,6,7,8,9]\nprint(Diff(li1,li2)) #Output: [] \n\nli1 = [1,2,3,4,5,6,7,8,9]\nli2 = [10,11,12,13,14,15]\nprint(Diff(li1,li2)) #Output: [1, 2, 3, 4, 5, 6, 7, 8, 9] ",
        "generated_testcode": "assert Diff([1,2,3,4],[2,3,4,5]) == [1]\n",
        "test": "assert (Diff([10, 15, 20, 25, 30, 35, 40], [25, 40, 35])) == [10, 20, 30, 15]\nassert (Diff([1,2,3,4,5], [6,7,1])) == [2,3,4,5,6,7]\nassert (Diff([1,2,3], [6,7,1])) == [2,3,6,7]",
        "canonical_solution": "def Diff(li1,li2):\r\n    return (list(list(set(li1)-set(li2)) + list(set(li2)-set(li1))))\r\n "
    },
    {
        "number": 770,
        "prompt": "Write a python function to find the sum of fourth power of first n odd natural numbers.\ndef odd_Num_Sum(n) : \n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    sum = 0\n    for i in range(1, n+1, 2) : \n        sum += i ** 4\n    return sum \n  \n# Driver program to test above function \nn = int(input(\"Enter a positive integer: \"))\nprint(\"The sum of fourth power of first\", n, \"odd natural numbers is\", odd_Num_Sum(n)) ",
        "generated_testcode": "assert odd_Num_Sum(5) == 225\n",
        "test": "assert odd_Num_Sum(2) == 82\nassert odd_Num_Sum(3) == 707\nassert odd_Num_Sum(4) == 3108",
        "canonical_solution": "def odd_Num_Sum(n) : \r\n    j = 0\r\n    sm = 0\r\n    for i in range(1,n + 1) : \r\n        j = (2*i-1) \r\n        sm = sm + (j*j*j*j)   \r\n    return sm "
    },
    {
        "number": 771,
        "prompt": "Write a function to check if the given expression is balanced or not.\ndef check_expression(exp):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    stack = []\n    for i in exp:\n        if i in [\"(\", \"{\", \"[\"]:\n            stack.append(i)\n        elif i in [\")\", \"}\", \"]\"]:\n            if not stack:\n                return False\n            elif i == \")\" and stack[-1] == \"(\":\n                stack.pop()\n            elif i == \"}\" and stack[-1] == \"{\":\n                stack.pop()\n            elif i == \"]\" and stack[-1] == \"[\":\n                stack.pop()\n            else:\n                return False\n    return len(stack) == 0\n\n# Test cases\nprint(check_expression(\"([{()}]\")) # True\nprint(check_expression(\"([()]{}\") # False\nprint(check_expression(\"({[]})\") # True\nprint(check_expression(\"({[])}\") # False ",
        "generated_testcode": "assert check_expression(\"()\") == True\n",
        "test": "assert check_expression(\"{()}[{}]\") == True\nassert check_expression(\"{()}[{]\") == False\nassert check_expression(\"{()}[{}][]({})\") == True",
        "canonical_solution": "from collections import deque\r\ndef check_expression(exp):\r\n    if len(exp) & 1:\r\n        return False\r\n    stack = deque()\r\n    for ch in exp:\r\n        if ch == '(' or ch == '{' or ch == '[':\r\n            stack.append(ch)\r\n        if ch == ')' or ch == '}' or ch == ']':\r\n            if not stack:\r\n                return False\r\n            top = stack.pop()\r\n            if (top == '(' and ch != ')') or (top == '{' and ch != '}' or (top == '[' and ch != ']')):\r\n                return False\r\n    return not stack"
    },
    {
        "number": 772,
        "prompt": "Write a function to remove all the words with k length in the given string.\ndef remove_length(test_str, K):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    words = test_str.split()\n    result = []\n    for word in words:\n        if len(word) != K:\n            result.append(word)\n    return \" \".join(result)\n\n# Example usage:\ntest_str = \"I am a happy panda and you are a smiling panda\"\nK = 4\nprint(remove_length(test_str, K)) # Output: \"I am a panda and panda\"\n\n# Another example:\ntest_str = \"The quick brown fox jumps over the lazy dog\"\nK = 3\nprint(remove_length(test_str, K)) # Output: \"The quick brown fox over the lazy dog\"\n\n# Another example:\ntest_str = \"Python is a high-level, general-purpose programming language.\"\nK = 5\nprint(remove_length(test_str, K)) # Output: \"Python general-purpose programming.\" ",
        "generated_testcode": "assert remove_length(\"Hello world\", 2) == \"Hd\"\n",
        "test": "assert remove_length('The person is most value tet', 3) == 'person is most value'\nassert remove_length('If you told me about this ok', 4) == 'If you me about ok'\nassert remove_length('Forces of darkeness is come into the play', 4) == 'Forces of darkeness is the'",
        "canonical_solution": "def remove_length(test_str, K):\r\n  temp = test_str.split()\r\n  res = [ele for ele in temp if len(ele) != K]\r\n  res = ' '.join(res)\r\n  return (res) "
    },
    {
        "number": 773,
        "prompt": "Write a function to find the occurrence and position of the substrings within a string.\ndef occurance_substring(text,pattern):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    count = 0\n    position = []\n    for i in range(len(text)-len(pattern)+1):\n        if text[i:i+len(pattern)] == pattern:\n            count += 1\n            position.append(i)\n    return count, position\n\ntext = input(\"Enter the text: \")\npattern = input(\"Enter the pattern: \")\ncount, position = occurance_substring(text,pattern)\nprint(\"Occurance: \",count)\nprint(\"Position: \",position)\n\n# Output:\n# Enter the text: abccbaabcbaa\n# Enter the pattern: abc\n# Occurance:  2\n# Position:  [0, 6]\n\n# Enter the text: hello world\n# Enter the pattern: lo\n# Occurance:  0\n# Position:  []\n\n# Enter the text: python is awesome\n# Enter the pattern: is\n# Occurance:  1\n# Position:  [6] ",
        "generated_testcode": "assert occurance_substring(\"hello world\", \"l\") == (2, [2, 3] )\n",
        "test": "assert occurance_substring('python programming, python language','python')==('python', 0, 6)\nassert occurance_substring('python programming,programming language','programming')==('programming', 7, 18)\nassert occurance_substring('python programming,programming language','language')==('language', 31, 39)",
        "canonical_solution": "import re\r\ndef occurance_substring(text,pattern):\r\n for match in re.finditer(pattern, text):\r\n    s = match.start()\r\n    e = match.end()\r\n    return (text[s:e], s, e)"
    },
    {
        "number": 774,
        "prompt": "Write a function to check if the string is a valid email address or not using regex.\ndef check_email(email): \n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    # using regex to check if the email is valid or not\n    import re\n    pattern = r'\\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Z|a-z]{2,}\\b'\n    if(re.fullmatch(pattern, email)):\n        return True\n    else:\n        return False\n\n# testing the function\nprint(check_email('example@gmail.com')) # Output: True\nprint(check_email('example@gmail')) # Output: False\nprint(check_email('example@gmail.co.in')) # Output: True\nprint(check_email('example.example@gmail.com')) # Output: True\nprint(check_email('example_example@gmail.com')) # Output: True\nprint(check_email('example@gmai.com')) # Output: False\n\n# example@gmail.com is a valid email address\n# example@gmail is not a valid email address\n# example@gmail.co.in is a valid email address\n# example_example@gmail.com is a valid email address\n# example@gmai.com is not a valid email address as it is missing the TLD extension (com, org, net) ",
        "generated_testcode": "assert check_email(\"example@example.com\") == True\n",
        "test": "assert check_email(\"ankitrai326@gmail.com\") == 'Valid Email'\nassert check_email(\"my.ownsite@ourearth.org\") == 'Valid Email'\nassert check_email(\"ankitaoie326.com\") == 'Invalid Email'",
        "canonical_solution": "import re \r\nregex = '^[a-z0-9]+[\\._]?[a-z0-9]+[@]\\w+[.]\\w{2,3}$'\r\ndef check_email(email): \r\n\tif(re.search(regex,email)): \r\n\t\treturn (\"Valid Email\") \r\n\telse: \r\n\t\treturn (\"Invalid Email\") "
    },
    {
        "number": 775,
        "prompt": "Write a python function to check whether every odd index contains odd numbers of a given list.\ndef odd_position(nums):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    for i in range(0, len(nums), 2):\n        if nums[i] % 2 == 0:\n            return False\n    return True\n\nprint(odd_position([1, 3, 5, 7, 9, 11, 13])) # True\nprint(odd_position([1, 2, 4, 6, 7, 8, 10])) # False\nprint(odd_position([0, 1, 3, 4, 9, 12, 5, 8])) # False\nprint(odd_position([])) # True\nprint(odd_position([1, 3, 5, 7, 9, 11])) # True\nprint(odd_position([1, 9, 3, 5, 7, 11, 13, 15])) # True\nprint(odd_position([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])) # False ",
        "generated_testcode": "assert odd_position([1, 2, 3, 4, 5, 6, 7, 8, 9]) == True\n",
        "test": "assert odd_position([2,1,4,3,6,7,6,3]) == True\nassert odd_position([4,1,2]) == True\nassert odd_position([1,2,3]) == False",
        "canonical_solution": "def odd_position(nums):\r\n\treturn all(nums[i]%2==i%2 for i in range(len(nums)))"
    },
    {
        "number": 776,
        "prompt": "Write a function to count those characters which have vowels as their neighbors in the given string.\ndef count_vowels(test_str):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for i in range(len(test_str)-1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n    return count\n\n# Test the function with sample inputs\nprint(count_vowels(\"aeiou\"))  # Output: 2\nprint(count_vowels(\"hello\"))  # Output: 0\nprint(count_vowels(\"aebiuo\"))  # Output: 2\nprint(count_vowels(\"aauuioeaaaei\"))  # Output: 4\nprint(count_vowels(\"aabb\"))  # Output: 0\nprint(count_vowels(\"abcd\"))  # Output: 0\n\n# Test the function with an empty string\nprint(count_vowels(\"\"))  # Output: 0\n\n# Test the function with a string of length 1\nprint(count_vowels(\"a\"))  # Output: 0\n\n# Test the function with a string of length 2\nprint(count_vowels(\"aa\"))  # Output: 1\n\n# Test the function with a string of length 3\nprint(count_vowels(\"aei\"))  # Output: 1\n\n# Test the function with a string of length 4\nprint(count_vowels(\"aeio\"))  # Output: ",
        "generated_testcode": "assert count_vowels(\"hello world\") == 3\n",
        "test": "assert count_vowels('bestinstareels') == 7\nassert count_vowels('partofthejourneyistheend') == 12\nassert count_vowels('amazonprime') == 5",
        "canonical_solution": "def count_vowels(test_str):\r\n  res = 0\r\n  vow_list = ['a', 'e', 'i', 'o', 'u']\r\n  for idx in range(1, len(test_str) - 1):\r\n    if test_str[idx] not in vow_list and (test_str[idx - 1] in vow_list or test_str[idx + 1] in vow_list):\r\n      res += 1\r\n  if test_str[0] not in vow_list and test_str[1] in vow_list:\r\n    res += 1\r\n  if test_str[-1] not in vow_list and test_str[-2] in vow_list:\r\n    res += 1\r\n  return (res) "
    },
    {
        "number": 777,
        "prompt": "Write a python function to find the sum of non-repeated elements in a given array.\ndef find_Sum(arr,n): \n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    sum = 0\n    for i in range(n): \n        if arr.count(arr[i]) == 1: \n            sum += arr[i] \n    return sum \n  \n# Driver code \narr = [1, 2, 3, 2, 4, 5, 3] \nn = len(arr) \nprint(find_Sum(arr, n)) ",
        "generated_testcode": "assert find_Sum([1,2,3,2,4,5,3,1], 6) == 9\n",
        "test": "assert find_Sum([1,2,3,1,1,4,5,6],8) == 21\nassert find_Sum([1,10,9,4,2,10,10,45,4],9) == 71\nassert find_Sum([12,10,9,45,2,10,10,45,10],9) == 78",
        "canonical_solution": "def find_Sum(arr,n): \r\n    arr.sort() \r\n    sum = arr[0] \r\n    for i in range(0,n-1): \r\n        if (arr[i] != arr[i+1]): \r\n            sum = sum + arr[i+1]   \r\n    return sum"
    },
    {
        "number": 778,
        "prompt": "Write a function to pack consecutive duplicates of a given list elements into sublists.\ndef pack_consecutive_duplicates(list1):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    result = []\n    sublist = []\n    prev = None\n    for element in list1:\n        if element == prev:\n            sublist.append(element)\n        else:\n            if sublist:\n                result.append(sublist)\n            sublist = [element]\n        prev = element\n    if sublist:\n        result.append(sublist)\n    return result\n\n# Example usage:\nlist1 = [1, 2, 2, 2, 3, 3, 3, 4, 4, 4, 4, 4, 5, 6, 6]\nprint(pack_consecutive_duplicates(list1))  # Output: [[1], [2, 2], [3, 3, 3], [4, 4, 4, 4], [5], [6, 6]]\n",
        "generated_testcode": "assert pack_consecutive_duplicates([\"a\", \"a\", \"a\", \"b\", \"b\", \"a\", \"c\", \"c\", \"c\", \"c\"]) == [[\"a\", \"a\", \"a\"], [\"b\", \"b\"], [\"a\"], [\"c\", \"c\", \"c\"]]\n",
        "test": "assert pack_consecutive_duplicates([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4])==[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]\nassert pack_consecutive_duplicates([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10])==[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]\nassert pack_consecutive_duplicates(['a', 'a', 'b', 'c', 'd', 'd'])==[['a', 'a'], ['b'], ['c'], ['d', 'd']]",
        "canonical_solution": "from itertools import groupby\r\ndef pack_consecutive_duplicates(list1):\r\n    return [list(group) for key, group in groupby(list1)]"
    },
    {
        "number": 779,
        "prompt": "Write a function to count the number of unique lists within a list.\ndef unique_sublists(list1):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    unique_list = []\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)+1):\n            sublist = list1[i:j]\n            if sublist not in unique_list:\n                unique_list.append(sublist)\n    return len(unique_list)\n\n# Test the function with the sample input\nlist1 = [1, 2, 2, 3, 4, 4, 5]\nprint(unique_sublists(list1)) # Output: 3 ([[1], [2], [3, 4, 5], [2, 3, 4, 4, 5], [3], [4, 4, 5], [4], [5], [2], [2, 3], [3, 4], [4], [2, 4], [3], [4], [2, 5], [3, 5], [4, 5], [5]] are the unique sublists)\n\n\n# Test the function with a larger input\nlist2 = [1, 1, 2, 3, 4, 5, 5, 6, 6, 7, 8, 9, 9, 10, 10, 11, 12]\nprint(unique_sublists(list2)) # Output: 7 ([[1], [2], [3], [4], [5], [6], [7], [8], [9],",
        "generated_testcode": "assert unique_sublists([\"a\", \"b\", \"c\", \"a\", \"b\", \"d\"]) == 3\n",
        "test": "assert unique_sublists([[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]])=={(1, 3): 2, (5, 7): 2, (13, 15, 17): 1, (9, 11): 1}\nassert unique_sublists([['green', 'orange'], ['black'], ['green', 'orange'], ['white']])=={('green', 'orange'): 2, ('black',): 1, ('white',): 1}\nassert unique_sublists([[1, 2], [3, 4], [4, 5], [6, 7]])=={(1, 2): 1, (3, 4): 1, (4, 5): 1, (6, 7): 1}",
        "canonical_solution": "def unique_sublists(list1):\r\n    result ={}\r\n    for l in list1: \r\n        result.setdefault(tuple(l), list()).append(1) \r\n    for a, b in result.items(): \r\n        result[a] = sum(b)\r\n    return result"
    },
    {
        "number": 780,
        "prompt": "Write a function to find the combinations of sums with tuples in the given tuple list.\ndef find_combinations(test_list):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    combinations = []\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            combinations.append((test_list[i], test_list[j]))\n    return combinations\n\n# Test the function\ntest_list = (1, 2, 3, 4, 5)\nresult = find_combinations(test_list)\nprint(result)\n\n# Output: [(1, 2), (1, 3), (1, 4), (1, 5), (2, 3), (2, 4), (2, 5), (3, 4), (3, 5), (4, 5)]\n\n# In case you want the sum of tuples instead of tuples, you can modify the function as follows:\ndef find_combinations(test_list):\n    combinations = []\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            combinations.append(test_list[i] + test_list[j])\n    return combinations\n\n# Test the function\ntest_list = (1, 2, 3, 4, 5)\nresult = find_combinations(test_list)\nprint(result)\n\n# Output: [3, 4, 5, 6, 7, 5, 7, 8, 8, 9, 9]\n\n# In case you want to",
        "generated_testcode": "assert find_combinations(()) == []\n",
        "test": "assert find_combinations([(2, 4), (6, 7), (5, 1), (6, 10)]) == [(8, 11), (7, 5), (8, 14), (11, 8), (12, 17), (11, 11)]\nassert find_combinations([(3, 5), (7, 8), (6, 2), (7, 11)]) == [(10, 13), (9, 7), (10, 16), (13, 10), (14, 19), (13, 13)]\nassert find_combinations([(4, 6), (8, 9), (7, 3), (8, 12)]) == [(12, 15), (11, 9), (12, 18), (15, 12), (16, 21), (15, 15)]",
        "canonical_solution": "from itertools import combinations \r\ndef find_combinations(test_list):\r\n  res = [(b1 + a1, b2 + a2) for (a1, a2), (b1, b2) in combinations(test_list, 2)]\r\n  return (res) "
    },
    {
        "number": 781,
        "prompt": "Write a python function to check whether the count of divisors is even or odd.\ndef count_Divisors(n) : \n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    count = 0\n    for i in range(1, (n + 1) : \n        if (n % i == 0) : \n            count += 1\n    return count\n    \ndef check_even_odd(n) : \n    count = count_Divisors(n)\n    if (count % 2 == 0) : \n        return \"Even\"\n    else : \n        return \"Odd\"\n\nn = int(input(\"Enter a number: \"))\nprint(\"Divisor count is\", count_Divisors(n))\nprint(check_even_odd(n))\n\n#Example\n#Enter a number: 12\n#Divisor count is 6\n#Even \n\n#Enter a number: 13\n#Divisor count is 2\n#Odd ",
        "generated_testcode": "assert count_Divisors(12) == \"even\"\n",
        "test": "assert count_Divisors(10) == \"Even\"\nassert count_Divisors(100) == \"Odd\"\nassert count_Divisors(125) == \"Even\"",
        "canonical_solution": "import math \r\ndef count_Divisors(n) : \r\n    count = 0\r\n    for i in range(1, (int)(math.sqrt(n)) + 2) : \r\n        if (n % i == 0) : \r\n            if( n // i == i) : \r\n                count = count + 1\r\n            else : \r\n                count = count + 2\r\n    if (count % 2 == 0) : \r\n        return (\"Even\") \r\n    else : \r\n        return (\"Odd\") "
    },
    {
        "number": 782,
        "prompt": "Write a python function to find the sum of all odd length subarrays.\ndef Odd_Length_Sum(arr):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    n = len(arr)\n    sum = 0\n    for i in range(n):\n        for j in range(i,n):\n            if (j-i) % 2 != 0:\n                for k in range(i,j+1):\n                    sum += arr[k]\n    return sum\n\n# Test the function with an example\narr = [1,2,3,4,5,6,7,8,9]\nprint(Odd_Length_Sum(arr))\n\n# Output: 57\n# The sum of all odd length subarrays are 1+2+3+4+5+6+7+8+9+8+7+5+3+2+1=57\n\n# Time Complexity : O(n^3)\n# Space Complexity : O(1)\n\n# NOTE: We can optimize this function to O(n^2) by using prefix sum and suffix sum technique. ",
        "generated_testcode": "assert Odd_Length_Sum([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 16\n",
        "test": "assert Odd_Length_Sum([1,2,4]) == 14\nassert Odd_Length_Sum([1,2,1,2]) == 15\nassert Odd_Length_Sum([1,7]) == 8",
        "canonical_solution": "def Odd_Length_Sum(arr):\r\n    Sum = 0\r\n    l = len(arr)\r\n    for i in range(l):\r\n        Sum += ((((i + 1) *(l - i) + 1) // 2) * arr[i])\r\n    return Sum"
    },
    {
        "number": 783,
        "prompt": "Write a function to convert rgb color to hsv color.\ndef rgb_to_hsv(r, g, b):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    r /= 255.0\n    g /= 255.0\n    b /= 255.0\n    cmax = max(r, g, b)\n    cmin = min(r, g, b)\n    delta = cmax - cmin\n    v = cmax\n    if cmax == cmin:\n        h = 0\n    elif cmax == r:\n        h = ((g - b) / delta) % 6\n    elif cmax == g:\n        h = (b - r) / delta + 2\n    else:\n        h = (r - g) / delta + 4\n    h *= 60\n    if h < 0:\n        h += 360\n    s = 0 if cmax == 0 else delta / cmax\n    return (h, s, v)\n\n# Test the function\nprint(rgb_to_hsv(255, 0, 0))  # (0.0, 1.0, 1.0)\nprint(rgb_to_hsv(0, 255, 0))  # (120.0, 1.0, 1.0)\nprint(rgb_to_hsv(0, 0, 255))  # (240.0, 1.0, 1.0)\nprint(rgb_to_hsv(255, 255, 0))  # (60",
        "generated_testcode": "assert rgb_to_hsv(255, 0, 0) == (0, 1, 1)\n",
        "test": "assert rgb_to_hsv(255, 255, 255)==(0, 0.0, 100.0)\nassert rgb_to_hsv(0, 215, 0)==(120.0, 100.0, 84.31372549019608)\nassert rgb_to_hsv(10, 215, 110)==(149.26829268292684, 95.34883720930233, 84.31372549019608)",
        "canonical_solution": "def rgb_to_hsv(r, g, b):\r\n    r, g, b = r/255.0, g/255.0, b/255.0\r\n    mx = max(r, g, b)\r\n    mn = min(r, g, b)\r\n    df = mx-mn\r\n    if mx == mn:\r\n        h = 0\r\n    elif mx == r:\r\n        h = (60 * ((g-b)/df) + 360) % 360\r\n    elif mx == g:\r\n        h = (60 * ((b-r)/df) + 120) % 360\r\n    elif mx == b:\r\n        h = (60 * ((r-g)/df) + 240) % 360\r\n    if mx == 0:\r\n        s = 0\r\n    else:\r\n        s = (df/mx)*100\r\n    v = mx*100\r\n    return h, s, v"
    },
    {
        "number": 784,
        "prompt": "Write a function to find the product of first even and odd number of a given list.\ndef mul_even_odd(list1):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    even_num = 1\n    odd_num = 1\n    for num in list1:\n        if num % 2 == 0:\n            even_num *= num\n        else:\n            odd_num *= num\n    return even_num, odd_num\n\n\n# Test the function with an example\nlist1 = [2, 4, 3, 5, 6, 7, 8, 9, 10, 11]\nprint(mul_even_odd(list1))  # Output: (3840, 210) ",
        "generated_testcode": "assert mul_even_odd([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 48\n",
        "test": "assert mul_even_odd([1,3,5,7,4,1,6,8])==4\nassert mul_even_odd([1,2,3,4,5,6,7,8,9,10])==2\nassert mul_even_odd([1,5,7,9,10])==10",
        "canonical_solution": "def mul_even_odd(list1):\r\n    first_even = next((el for el in list1 if el%2==0),-1)\r\n    first_odd = next((el for el in list1 if el%2!=0),-1)\r\n    return (first_even*first_odd)"
    },
    {
        "number": 785,
        "prompt": "Write a function to convert tuple string to integer tuple.\ndef tuple_str_int(test_str):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    # remove parenthesis and split on comma\n    temp = test_str.strip(\"()\").split(\",\")\n    # convert each element to integer and store in a list\n    result = []\n    for i in temp:\n        result.append(int(i.strip()))\n    # return tuple of the list\n    return tuple(result)\n\n# example usage\nprint(tuple_str_int(\"(1, 2, 3, 4, 5)\")) # should return (1, 2, 3, 4, 5)\nprint(tuple_str_int(\"(10, 20, 30)\")) # should return (10, 20, 30) ",
        "generated_testcode": "assert tuple_str_int(\"(1, 2, 3, 4, 5)\") == (1, 2, 3, 4, 5)\n",
        "test": "assert tuple_str_int(\"(7, 8, 9)\") == (7, 8, 9)\nassert tuple_str_int(\"(1, 2, 3)\") == (1, 2, 3)\nassert tuple_str_int(\"(4, 5, 6)\") == (4, 5, 6)",
        "canonical_solution": "def tuple_str_int(test_str):\r\n  res = tuple(int(num) for num in test_str.replace('(', '').replace(')', '').replace('...', '').split(', '))\r\n  return (res) "
    },
    {
        "number": 786,
        "prompt": "Write a function to locate the right insertion point for a specified value in sorted order.\ndef right_insertion(a, x):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    left = 0\n    right = len(a) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if a[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return left\n\n# Test the function with an example\na = [2, 4, 6, 7, 8, 9, 10, 11, 12, 13]\nx = 5\nprint(right_insertion(a, x)) # Output: 3\n\n# The function returns the index where the value x should be inserted to maintain sorted order\n# In this case, 5 should be inserted at index 3 to maintain sorted order: [2, 4, 6, 5, 7, 8, 9, 10, 11, 12, 13]\n\n# If the element is already in the list, it returns the index of the first element that is greater than x\n# (in this case, 6)\na = [1, 2, 3, 4, 4, 5, 6, 7, 8, 9]\nx = 4\nprint(right_insertion(a, x)) # Output: 4\n# The function returns 4, since 4 is already in the list, and the insertion point should be after the first 4\n# To insert 4 in sorted order, it should be inserted at index 3",
        "generated_testcode": "assert right_insertion([1, 2, 3, 4, 5, 6], 3) == 2\n",
        "test": "assert right_insertion([1,2,4,5],6)==4\nassert right_insertion([1,2,4,5],3)==2\nassert right_insertion([1,2,4,5],7)==4",
        "canonical_solution": "import bisect\r\ndef right_insertion(a, x):\r\n    i = bisect.bisect_right(a, x)\r\n    return i"
    },
    {
        "number": 787,
        "prompt": "Write a function that matches a string that has an a followed by three 'b'.\ndef text_match_three(text):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    return re.search('a...b', text)\n\n# Test cases\nprint(text_match_three('abc')) # False\nprint(text_match_three('abbb')) # True\nprint(text_match_three('aabbbb')) # True\nprint(text_match_three('abbbbbb')) # True\nprint(text_match_three('ab')) # False\nprint(text_match_three('abbbc')) # False\nprint(text_match_three('aabbbbc')) # False\n\n# The expected output should be:\n# False\n# True\n# True\n# True\n# False\n# False\n# False ",
        "generated_testcode": "assert text_match_three(\"abbb\") == True\n",
        "test": "assert text_match_three(\"ac\")==('Not matched!')\nassert text_match_three(\"dc\")==('Not matched!')\nassert text_match_three(\"abbbba\")==('Found a match!')",
        "canonical_solution": "import re\r\ndef text_match_three(text):\r\n        patterns = 'ab{3}?'\r\n        if re.search(patterns,  text):\r\n                return 'Found a match!'\r\n        else:\r\n                return('Not matched!')"
    },
    {
        "number": 788,
        "prompt": "Write a function to create a new tuple from the given string and list.\ndef new_tuple(test_list, test_str):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": true,
        "answer": "    tuple1 = tuple(test_list)\n    tuple2 = (test_str,)\n    return tuple1 + tuple2\n\n# Example usage:\ntest_list = [1, 2, 3]\ntest_str = \"hello\"\nresult = new_tuple(test_list, test_str)\nprint(result) # Output: (1, 2, 3, 'hello')\n\n# Test your function with the example usage here\n# Replace 'None' with your function call\nprint(new_tuple([1, 2, 3], \"hello\")) ",
        "generated_testcode": "assert new_tuple(['a', 'b', 'c'], 'd') == ('a', 'b', 'c', 'd')\n",
        "test": "assert new_tuple([\"WEB\", \"is\"], \"best\") == ('WEB', 'is', 'best')\nassert new_tuple([\"We\", \"are\"], \"Developers\") == ('We', 'are', 'Developers')\nassert new_tuple([\"Part\", \"is\"], \"Wrong\") == ('Part', 'is', 'Wrong')",
        "canonical_solution": "def new_tuple(test_list, test_str):\r\n  res = tuple(test_list + [test_str])\r\n  return (res) "
    },
    {
        "number": 789,
        "prompt": "Write a function to calculate the perimeter of a regular polygon.\ndef perimeter_polygon(s,l):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": true,
        "answer": "    perimeter = s * l\n    return perimeter\n\n# Test cases\nprint(perimeter_polygon(4, 5)) # Should print 20\nprint(perimeter_polygon(6, 4)) # Should print 24\nprint(perimeter_polygon(10, 8)) # Should print 40 ",
        "generated_testcode": "assert perimeter_polygon(10,4) == 40\n",
        "test": "assert perimeter_polygon(4,20)==80\nassert perimeter_polygon(10,15)==150\nassert perimeter_polygon(9,7)==63",
        "canonical_solution": "from math import tan, pi\r\ndef perimeter_polygon(s,l):\r\n  perimeter = s*l\r\n  return perimeter"
    },
    {
        "number": 790,
        "prompt": "Write a python function to check whether every even index contains even numbers of a given list.\ndef even_position(nums):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    for i in range(0,len(nums),2):\n        if nums[i]%2!=0:\n            return False\n    return True\n\n#Example usage:\nprint(even_position([2,4,6,8,10])) #True\nprint(even_position([2,4,7,8,10])) #False\nprint(even_position([2,4,6,8,10,12,14,16])) #True ",
        "generated_testcode": "assert even_position([1, 2, 3, 4, 5, 6, 7, 8]) == True\n",
        "test": "assert even_position([3,2,1]) == False\nassert even_position([1,2,3]) == False\nassert even_position([2,1,4]) == True",
        "canonical_solution": "def even_position(nums):\r\n\treturn all(nums[i]%2==i%2 for i in range(len(nums)))"
    },
    {
        "number": 791,
        "prompt": "Write a function to remove the nested record from the given tuple.\ndef remove_nested(test_tup):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    result = ()\n    for i in test_tup:\n        if isinstance(i, tuple):\n            result += remove_nested(i)\n        else:\n            result += (i,)\n    return result\n\n# Test cases\nprint(remove_nested((1, (2, 3, (4, 5))) == (1, 2, 3, 4, 5)\nprint(remove_nested((1, (2, (3, 4), (5, (6, 7), 8)) == (1, 2, 3, 4, 5, 6, 7, 8)\nprint(remove_nested((1, (2, 3, (4, 5), (6, (7, 8, 9), 10) == (1, 2, 3, 4, 5, 6, 7, 8, 9, 10) ",
        "generated_testcode": "assert remove_nested((1, (2, 3), 4, (5, 6, (7, 8), 9)) == (1, 4, 5, 6, 7, 8, 9)\n",
        "test": "assert remove_nested((1, 5, 7, (4, 6), 10)) == (1, 5, 7, 10)\nassert remove_nested((2, 6, 8, (5, 7), 11)) == (2, 6, 8, 11)\nassert remove_nested((3, 7, 9, (6, 8), 12)) == (3, 7, 9, 12)",
        "canonical_solution": "def remove_nested(test_tup):\r\n  res = tuple()\r\n  for count, ele in enumerate(test_tup):\r\n    if not isinstance(ele, tuple):\r\n      res = res + (ele, )\r\n  return (res) "
    },
    {
        "number": 792,
        "prompt": "Write a python function to count the number of lists in a given number of lists.\ndef count_list(input_list): \n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    count = 0 \n    for item in input_list: \n        if isinstance(item, list): \n            count += 1\n            count += count_list(item) \n    return count \n\nprint(count_list([1, 2, [3, 4], [5, [6, 7], 8])) # Output: 3 ",
        "generated_testcode": "assert count_list([1, 2, 3]) == 1\n",
        "test": "assert count_list([[1, 3], [5, 7], [9, 11], [13, 15, 17]]) == 4\nassert count_list([[1,2],[2,3],[4,5]]) == 3\nassert count_list([[1,0],[2,0]]) == 2",
        "canonical_solution": "def count_list(input_list): \r\n    return len(input_list)"
    },
    {
        "number": 793,
        "prompt": "Write a python function to find the last position of an element in a sorted array.\ndef last(arr,x,n):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    low=0\n    high=n-1\n    result=-1\n    while(low<=high):\n        mid=(low+high)//2\n        if(arr[mid]==x and (mid==n-1 or arr[mid+1]!=x):\n            return mid\n        elif(arr[mid]<x):\n            low=mid+1\n        else:\n            high=mid-1\n    return result\n\n#time complexity: O(log n)\n",
        "generated_testcode": "assert last([1,2,3,4,4,5,6,7,7,8],4,7) == 5\n",
        "test": "assert last([1,2,3],1,3) == 0\nassert last([1,1,1,2,3,4],1,6) == 2\nassert last([2,3,2,3,6,8,9],3,8) == 3",
        "canonical_solution": "def last(arr,x,n):\r\n    low = 0\r\n    high = n - 1\r\n    res = -1  \r\n    while (low <= high):\r\n        mid = (low + high) // 2 \r\n        if arr[mid] > x:\r\n            high = mid - 1\r\n        elif arr[mid] < x:\r\n            low = mid + 1\r\n        else:\r\n            res = mid\r\n            low = mid + 1\r\n    return res"
    },
    {
        "number": 794,
        "prompt": "Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\ndef text_starta_endb(text):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    pattern = re.compile(r\"a.*b$\")\n    if pattern.search(text):\n        return True\n    else:\n        return False\n\n# Test cases\nprint(text_starta_endb(\"abc\")) # True\nprint(text_starta_endb(\"abcde\")) # True\nprint(text_starta_endb(\"abcdef\")) # False\nprint(text_starta_endb(\"abcdedfgb\")) # True\nprint(text_starta_endb(\"abcdefg\")) # False\nprint(text_starta_endb(\"ab\")) # False\nprint(text_starta_endb(\"a\")) # False\nprint(text_starta_endb(\"abcdedfgbh\")) # False\nprint(text_starta_endb(\"abcdedfgh\")) # False\nprint(text_starta_endb(\"abcdedfgbh\")) # True\nprint(text_starta_endb(\"abcdedfgb\")) # True\nprint(text_starta_endb(\"abcdefg\")) # False\nprint(text_starta_endb(\"a\")) # False\nprint(text_starta_endb(\"a\")) # False\nprint(text_starta_endb(\"ab\")) # False\nprint(text_starta_endb(\"abcb\")) # True\nprint(text_starta_endb(\"abcdb\")) # True\nprint(text_starta_endb(\"abc\")) # False\nprint(text_starta_end",
        "generated_testcode": "assert text_starta_endb(\"ab\") == True\n",
        "test": "assert text_starta_endb(\"aabbbb\")==('Found a match!')\nassert text_starta_endb(\"aabAbbbc\")==('Not matched!')\nassert text_starta_endb(\"accddbbjjj\")==('Not matched!')",
        "canonical_solution": "import re\r\ndef text_starta_endb(text):\r\n        patterns = 'a.*?b$'\r\n        if re.search(patterns,  text):\r\n                return 'Found a match!'\r\n        else:\r\n                return('Not matched!')"
    },
    {
        "number": 795,
        "prompt": "Write a function to find the n - cheap price items from a given dataset using heap queue algorithm.\ndef cheap_items(items,n):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    if n > len(items):\n        return []\n    h = []\n    for item in items:\n        heapq.heappush(h, item)\n    result = []\n    for i in range(n):\n        result.append(heapq.heappop(h))\n    return result\n\n# Example usage:\nitems = [2, 3, 1, 4, 6, 5, 8, 9]\nn = 3\nprint(cheap_items(items, n)) # Output: [1, 2, 3] \n\n# To get the n most expensive items, use negative prices\nitems = [2, 3, 1, 4, 6, 5, 8, 9]\nn = 3\nitems = [-i for i in items]\nprint(cheap_items(items, n)) # Output: [-5, -6, -4] ",
        "generated_testcode": "assert cheap_items(items,n) == expected_output\n\n# Test the function with the following inputs\nitems = [{\"name\": \"item1\", \"price\": 10}, {\"name\": \"item2\", \"price\": 20}, {\"name\": \"item3\", \"price\": 5}, {\"name\": \"item4\", \"price\": 15}, {\"name\": \"item5\", \"price\": 8}]\nn = 2\nexpected_output = [{\"name\": \"item3\", \"price\": 5}, {\"name\": \"item1\", \"price\": 10}]\n\n",
        "test": "assert cheap_items([{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}],1)==[{'name': 'Item-1', 'price': 101.1}]\nassert cheap_items([{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}],2)==[{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}]\nassert cheap_items([{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}, {'name': 'Item-3', 'price': 45.09},{'name': 'Item-4', 'price': 22.75}],1)==[{'name': 'Item-4', 'price': 22.75}]",
        "canonical_solution": "import heapq\r\ndef cheap_items(items,n):\r\n  cheap_items = heapq.nsmallest(n, items, key=lambda s: s['price'])\r\n  return cheap_items"
    },
    {
        "number": 796,
        "prompt": "Write function to find the sum of all items in the given dictionary.\ndef return_sum(dict):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    sum = 0\n    for key in dict:\n        sum += dict[key]\n    return sum\n\n# Test the function with an example dictionary\ndict = {\"apple\": 3, \"banana\": 5, \"orange\": 7, \"watermelon\": 2, \"grape\": 9}\nprint(return_sum(dict)) # Output: 22\n\n\n# Write function to find the average of all items in the given dictionary.\ndef return_average(dict):\n    sum = 0\n    count = 0\n    for key in dict:\n        sum += dict[key]\n        count += 1\n    return sum / count\n\n# Test the function with the same dictionary\nprint(return_average(dict)) # Output: 4.75\n\n# Write function to find the maximum value in the dictionary.\ndef return_max(dict):\n    max_value = 0\n    for key in dict:\n        if dict[key] > max_value:\n            max_value = dict[key]\n    return max_value\n\n# Test the function with the same dictionary\nprint(return_max(dict)) # Output: 9\n\n# Write function to find the minimum value in the dictionary.\ndef return_min(dict):\n    min_value = dict[next(iter(dict))] # set the minimum value to the first key's value\n    for key in dict:\n        if dict[key] < min_value:\n            min_value = dict[key]",
        "generated_testcode": "assert return_sum({'a': 1, 'b': 2, 'c': 3}) == 6\n",
        "test": "assert return_sum({'a': 100, 'b':200, 'c':300}) == 600\nassert return_sum({'a': 25, 'b':18, 'c':45}) == 88\nassert return_sum({'a': 36, 'b':39, 'c':49}) == 124",
        "canonical_solution": "def return_sum(dict):\r\n  sum = 0\r\n  for i in dict.values():\r\n    sum = sum + i\r\n  return sum"
    },
    {
        "number": 797,
        "prompt": "Write a python function to find the sum of all odd natural numbers within the range l and r.\ndef sum_Odd(n): \n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": true,
        "answer": "    \"\"\"\n    This function takes an integer n and returns the sum of all odd numbers between 1 and n.\n    \"\"\"\n    sum = 0\n    for i in range(1,n+1):\n        if i % 2 != 0:\n            sum += i\n    return sum\n\nprint(sum_Odd(10)) # Output: 25\nprint(sum_Odd(15)) # Output: 45\nprint(sum_Odd(20)) # Output: 75 ",
        "generated_testcode": "assert sum_Odd(10) == 25 # 1 + 3 + 5 + 7 + 9 = 18\n",
        "test": "assert sum_in_Range(2,5) == 8\nassert sum_in_Range(5,7) == 12\nassert sum_in_Range(7,13) == 40",
        "canonical_solution": "def sum_Odd(n): \r\n    terms = (n + 1)//2\r\n    sum1 = terms * terms \r\n    return sum1  \r\ndef sum_in_Range(l,r): \r\n    return sum_Odd(r) - sum_Odd(l - 1)"
    },
    {
        "number": 798,
        "prompt": "Write a python function to find the sum of an array.\ndef _sum(arr):  \n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    total = 0  \n    for i in arr:  \n        total += i  \n    return total  \n  \n# Test the function with an example array  \narr = [2, 3, 5, 6, 9, 8, 10]  \nprint(\"Sum of array is:\", _sum(arr)) # Output: 30 ",
        "generated_testcode": "assert _sum([1, 2, 3, 4, 5]) == 11\n",
        "test": "assert _sum([1, 2, 3]) == 6\nassert _sum([15, 12, 13, 10]) == 50\nassert _sum([0, 1, 2]) == 3",
        "canonical_solution": "def _sum(arr):  \r\n    sum=0\r\n    for i in arr: \r\n        sum = sum + i      \r\n    return(sum)  "
    },
    {
        "number": 799,
        "prompt": "Write a python function to left rotate the bits of a given number.\ndef left_Rotate(n,d):   \n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    while d>0:\n        n=n<<1\n        bit=n&1\n        n=n>>1\n        d=d-1\n    return n\n\n#right rotate bits of a given number\ndef right_Rotate(n,d):   \n    while d>0:\n        bit=n&1\n        n=n>>1\n        n|=(bit<<(len(bin(n)[2:])-1)\n        d-=1\n    return n\n\n#main function\ndef rotateBits(a, d):\n    left=left_Rotate(a,d)\n    right=right_Rotate(a,d)\n    return (left,right)\n\n#test the function\na=int(input(\"Enter a number: \")\nd=int(input(\"Enter the number of bits to rotate: \")\nprint(rotateBits(a,d)) ",
        "generated_testcode": "assert left_Rotate(10,2) == 5\n",
        "test": "assert left_Rotate(16,2) == 64\nassert left_Rotate(10,2) == 40\nassert left_Rotate(99,3) == 792",
        "canonical_solution": "INT_BITS = 32\r\ndef left_Rotate(n,d):   \r\n    return (n << d)|(n >> (INT_BITS - d))  "
    },
    {
        "number": 800,
        "prompt": "Write a function to remove all whitespaces from a string.\ndef remove_all_spaces(text):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    return \"\".join(text.split())\n\n# Test the function with an example string\nstring_with_spaces = \"This is a sample string with whitespaces.\"\nprint(remove_all_spaces(string_with_spaces))  # Output: \"Thisisasamplestringwithwhitespaces.\" ",
        "generated_testcode": "assert remove_all_spaces(\"Hello World\") == \"HelloWorld\"\n",
        "test": "assert remove_all_spaces('python  program')==('pythonprogram')\nassert remove_all_spaces('python   programming    language')==('pythonprogramminglanguage')\nassert remove_all_spaces('python                     program')==('pythonprogram')",
        "canonical_solution": "import re\r\ndef remove_all_spaces(text):\r\n return (re.sub(r'\\s+', '',text))"
    },
    {
        "number": 801,
        "prompt": "Write a python function to count the number of equal numbers from three given integers.\ndef test_three_equal(x,y,z):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    if x == y == z:\n        return 3\n    elif x == y or y == z or x == z:\n        return 2\n    else:\n        return 0\n\nprint(test_three_equal(3,3,3)) # Output: 3\nprint(test_three_equal(3,2,2)) # Output: 2\nprint(test_three_equal(2,2,3)) # Output: 2\nprint(test_three_equal(1,2,3)) # Output: 0\n\n# Second solution ",
        "generated_testcode": "assert test_three_equal(1,2,3) == 0\n",
        "test": "assert test_three_equal(1,1,1) == 3\nassert test_three_equal(-1,-2,-3) == 0\nassert test_three_equal(1,2,2) == 2",
        "canonical_solution": "def test_three_equal(x,y,z):\r\n  result= set([x,y,z])\r\n  if len(result)==3:\r\n    return 0\r\n  else:\r\n    return (4-len(result))"
    },
    {
        "number": 802,
        "prompt": "Write a python function to count the number of rotations required to generate a sorted array.\ndef count_Rotation(arr,n):   \n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    low = 0\n    high = n-1\n    mid = 0\n    while(arr[low]>arr[high]):\n        if low == high:\n            return 0\n        mid = (low + high)//2\n        if arr[mid] <= arr[high]:\n            high = mid\n        else:\n            if arr[mid] > arr[high]:\n                low = mid + 1\n            else:\n                high = mid\n    return mid+1\n\ndef main():\n    arr = list(map(int,input(\"Enter the elements of array: \"))\n    n = len(arr)\n    rotations = count_Rotation(arr,n)\n    print(\"Number of rotations required to make the array sorted:\",rotations)\n\nif __name__ == '__main__':\n    main()\n\n'''\nSample Test Case:\nExample 1:\nInput: \nEnter the elements of array: 5 6 8 9 10 1 2 3 4\nOutput: Number of rotations required to make the array sorted: 2\n\nExample 2:\nInput: \nEnter the elements of array: 1 2 3 4 5 6 8 9 10\nOutput: Number of rotations required to make the array sorted: 0\n\nTime Complexity: O(log n) ",
        "generated_testcode": "assert count_Rotation([4, 5, 6, 7, 8, 9, 1, 2, 3], 6) == 4\n",
        "test": "assert count_Rotation([3,2,1],3) == 1\nassert count_Rotation([4,5,1,2,3],5) == 2\nassert count_Rotation([7,8,9,1,2,3],6) == 3",
        "canonical_solution": "def count_Rotation(arr,n):   \r\n    for i in range (1,n): \r\n        if (arr[i] < arr[i - 1]): \r\n            return i  \r\n    return 0"
    },
    {
        "number": 803,
        "prompt": "Write a python function to check whether the given number is a perfect square or not.\ndef is_Perfect_Square(n) :\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    i = 1\n    while i * i <= n :\n        if i * i == n :\n            return True\n        i += 1\n    return False\n\n# Test the function\nprint(is_Perfect_Square(16))  # Output: True\nprint(is_Perfect_Square(15))  # Output: False\n\n# Another approach to check if a number is a perfect square or not is to use the sqrt function from math library in Python. \n# This function returns the square root of a number. We can then compare the square of the square root with the original number to check if it is an exact integer or not.\nimport math\ndef is_Perfect_Square(n) :\n    return int(math.sqrt(n)) ** 2 == n\n\n# Test the function\nprint(is_Perfect_Square(16))  # Output: True\nprint(is_Perfect_Square(15))  # Output: False ",
        "generated_testcode": "assert is_Perfect_Square(16) == True\n",
        "test": "assert is_Perfect_Square(10) == False\nassert is_Perfect_Square(36) == True\nassert is_Perfect_Square(14) == False",
        "canonical_solution": "def is_Perfect_Square(n) :\r\n    i = 1\r\n    while (i * i<= n):\r\n        if ((n % i == 0) and (n / i == i)):\r\n            return True     \r\n        i = i + 1\r\n    return False"
    },
    {
        "number": 804,
        "prompt": "Write a python function to check whether the product of numbers is even or not.\ndef is_Product_Even(arr,n): \n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    product = 1\n    for i in range(0,n): \n        product = product * arr[i] \n    if (product % 2 == 0): \n        return True\n    else: \n        return False\n  \n# Driver Code \narr = [2, 3, 4] \nn = len(arr) \nif is_Product_Even(arr, n): \n    print(\"Even Product\") \nelse: \n    print(\"Odd Product\") ",
        "generated_testcode": "assert is_Product_Even([2, 3, 4], 3) == True\n",
        "test": "assert is_Product_Even([1,2,3],3) == True\nassert is_Product_Even([1,2,1,4],4) == True\nassert is_Product_Even([1,1],2) == False",
        "canonical_solution": "def is_Product_Even(arr,n): \r\n    for i in range(0,n): \r\n        if ((arr[i] & 1) == 0): \r\n            return True\r\n    return False"
    },
    {
        "number": 805,
        "prompt": "Write a function to find the list in a list of lists whose sum of elements is the highest.\ndef max_sum_list(lists):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    max_sum = 0\n    max_list = []\n    for lst in lists:\n        if sum(lst) > max_sum:\n            max_sum = sum(lst)\n            max_list = lst\n    return max_list\n\n\n# Test cases\nprint(max_sum_list([[1, 2, 3], [4, 5, 6], [7, 8, 9]]))  # Output: [4, 5, 6]\nprint(max_sum_list([[1, 2, 3], [4, 5, 6], [7, 8, 9], [1, 2, 3, 4, 5]]))  # Output: [1, 2, 3, 4, 5]\nprint(max_sum_list([[1], [2], [3]]))  # Output: [1]\nprint(max_sum_list([]))  # Output: []\n",
        "generated_testcode": "assert max_sum_list([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [4, 5, 6]\n",
        "test": "assert max_sum_list([[1,2,3], [4,5,6], [10,11,12], [7,8,9]])==[10, 11, 12] \nassert max_sum_list([[3,2,1], [6,5,4], [12,11,10]])==[12,11,10] \nassert max_sum_list([[2,3,1]])==[2,3,1] ",
        "canonical_solution": "def max_sum_list(lists):\r\n return max(lists, key=sum)"
    },
    {
        "number": 806,
        "prompt": "Write a function to find maximum run of uppercase characters in the given string.\ndef max_run_uppercase(test_str):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    max_run = 0\n    run = 0\n    for i in range(len(test_str)):\n        if test_str[i].isupper():\n            run += 1\n        else:\n            max_run = max(max_run, run)\n            run = 0\n    max_run = max(max_run, run)\n    return max_run\n\n\n# Test the function with sample input\nprint(max_run_uppercase(\"HelloWorld\"))  # Output: 1\nprint(max_run_uppercase(\"PythonIsAwesome\"))  # Output: 4\nprint(max_run_uppercase(\"PYTHONISAwesome\"))  # Output: 6\nprint(max_run_uppercase(\"PYTHONisawesome\"))  # Output: 0\nprint(max_run_uppercase(\"PYTHONisAwesome\"))  # Output: 5\nprint(max_run_uppercase(\"PYTHONiSAwesome\"))  # Output: 6\n\n\n# Time Complexity: O(n)",
        "generated_testcode": "assert max_run_uppercase(\"HelloWorld\") == 1\n",
        "test": "assert max_run_uppercase('GeMKSForGERksISBESt') == 5\nassert max_run_uppercase('PrECIOusMOVemENTSYT') == 6\nassert max_run_uppercase('GooGLEFluTTER') == 4",
        "canonical_solution": "def max_run_uppercase(test_str):\r\n  cnt = 0\r\n  res = 0\r\n  for idx in range(0, len(test_str)):\r\n    if test_str[idx].isupper():\r\n      cnt += 1\r\n    else:\r\n      res = cnt\r\n      cnt = 0\r\n  if test_str[len(test_str) - 1].isupper():\r\n    res = cnt\r\n  return (res)"
    },
    {
        "number": 807,
        "prompt": "Write a python function to find the first odd number in a given list of numbers.\ndef first_odd(nums):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    for num in nums:\n        if num % 2 != 0:\n            return num\n    return None\n\n# Example usage:\nprint(first_odd([1, 2, 4, 5, 6, 8, 9]))  # Output: 5\nprint(first_odd([2, 4, 6, 8, 10]))  # Output: None\nprint(first_odd([]))  # Output: None\n```\n\nThis function iterates through the list of numbers and returns the first odd number it finds, or `None` if there are no odd numbers. If you want to return `None` instead of an error, you can modify the function like this:\n\n```python\ndef first_odd(nums):\n    for num in nums:\n        if num % 2 != 0:\n            return num\n    return None\n\n# Example usage:\nprint(first_odd([1, 2, 4, 5, 6, 8, 9]))  # Output: 5\nprint(first_odd([2, 4, 6, 8, 10]))  # Output: None\nprint(first_odd([]))  # Output: None\n```\n\nAlternatively, you can use the built-in `next()` function to return the first odd number or `None` if there are no odd numbers:\n\n```python\ndef first_odd(nums):\n    return next((num for num in nums if num % 2 != 0), None",
        "generated_testcode": "assert first_odd([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 3\n",
        "test": "assert first_odd([1,3,5]) == 1\nassert first_odd([2,4,1,3]) == 1\nassert first_odd ([8,9,1]) == 9",
        "canonical_solution": "def first_odd(nums):\r\n  first_odd = next((el for el in nums if el%2!=0),-1)\r\n  return first_odd"
    },
    {
        "number": 808,
        "prompt": "Write a function to check if the given tuples contain the k or not.\ndef check_K(test_tup, K):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    for tup in test_tup:\n        if 'K' in tup:\n            return True\n    return False\n\n#Test case\ntest_tup = [(\"A\", \"B\", \"C\"), (\"D\", \"E\", \"F\"), (\"G\", \"H\", \"I\"), (\"J\", \"K\", \"L\")]\nprint(check_K(test_tup, \"K\"))  # True\n\ntest_tup = [(\"A\", \"B\", \"C\"), (\"D\", \"E\", \"F\"), (\"G\", \"H\", \"I\"), (\"J\", \"L\", \"M\")]\nprint(check_K(test_tup, \"K\"))  # False\n\ntest_tup = [(\"A\", \"B\", \"C\"), (\"D\", \"E\", \"F\"), (\"G\", \"H\", \"I\")]\nprint(check_K(test_tup, \"K\"))  # False\n\ntest_tup = []\nprint(check_K(test_tup, \"K\"))  # False\n\ntest_tup = [(\"K\", \"B\", \"C\"), (\"D\", \"E\", \"F\"), (\"G\", \"K\", \"I\"), (\"J\", \"L\", \"M\")]\nprint(check_K(test_tup, \"K\"))  # True ",
        "generated_testcode": "assert check_K((1, 2, 3, 4, 5), 3) == True\n",
        "test": "assert check_K((10, 4, 5, 6, 8), 6) == True\nassert check_K((1, 2, 3, 4, 5, 6), 7) == False\nassert check_K((7, 8, 9, 44, 11, 12), 11) == True",
        "canonical_solution": "def check_K(test_tup, K):\r\n  res = False\r\n  for ele in test_tup:\r\n    if ele == K:\r\n      res = True\r\n      break\r\n  return (res) "
    },
    {
        "number": 809,
        "prompt": "Write a function to check if each element of second tuple is smaller than its corresponding index in first tuple.\ndef check_smaller(test_tup1, test_tup2):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    for i in range(len(test_tup1)):\n        if test_tup1[i] <= test_tup2[i]:\n            return False\n    return True\n\ntest_tup1 = (1, 2, 3, 4, 5)\ntest_tup2 = (5, 4, 3, 2, 1)\nprint(check_smaller(test_tup1, test_tup2))  # Should return False\n\ntest_tup1 = (1, 2, 3, 4, 5)\ntest_tup2 = (6, 7, 8, 9, 10)\nprint(check_smaller(test_tup1, test_tup2))  # Should return True\n\ntest_tup1 = (10, 9, 8, 7, 6)\ntest_tup2 = (5, 4, 3, 2, 1)\nprint(check_smaller(test_tup1, test_tup2))  # Should return False\n\ntest_tup1 = (5, 3, 2, 1)\ntest_tup2 = (5, 4, 3, 2, 1)\nprint(check_smaller(test_tup1, test_tup2))  # Should return False\n\ntest_tup1 = (1, 2, 3, 4, 5)\ntest_tup2",
        "generated_testcode": "assert check_smaller((1, 2, 3, 4, 5), (0, 1, 2, 3)) == True\n",
        "test": "assert check_smaller((1, 2, 3), (2, 3, 4)) == False\nassert check_smaller((4, 5, 6), (3, 4, 5)) == True\nassert check_smaller((11, 12, 13), (10, 11, 12)) == True",
        "canonical_solution": "def check_smaller(test_tup1, test_tup2):\r\n  res = all(x > y for x, y in zip(test_tup1, test_tup2))\r\n  return (res) "
    },
    {
        "number": 810,
        "prompt": "Write a function to iterate over elements repeating each as many times as its count.\ndef count_variable(a,b,c,d):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    for i in a:\n        for j in range(a[i]):\n            print(i,end=\"\")\n    for i in b:\n        for j in range(b[i]):\n            print(i,end=\"\")\n    for i in c:\n        for j in range(c[i]):\n            print(i,end=\"\")\n    for i in d:\n        for j in range(d[i]):\n            print(i,end=\"\")\n\n# Example usage:\na = {\"a\":3, \"b\":2, \"c\":1, \"d\":1}\nb = {\"e\":2, \"f\":3, \"g\":1}\nc = {\"h\":2, \"i\":2}\nd = {\"j\":3, \"k\":2, \"l\":2, \"m\":1}\ncount_variable(a,b,c,d)\n# Output: aaaabbbbcccijjjkklllmmmmjkk\n\n# Explanation: \n# The function first iterates over the keys in dictionary a and prints the key (i.e. \"a\") 3 times, \n# then iterates over the keys in dictionary b and prints \"e\" twice, \"f\" three times, \"g\" once, \n# then iterates over the keys in dictionary c and prints \"h\" twice, \"i\" twice, and finally \n# iterates over the keys in dictionary d and prints \"j\" three times, \"k\" twice and \"l\" twice,",
        "generated_testcode": "assert count_variable([1,2,3,4,5], 1,2,3) == [1, 1, 1, 2, 2, 2, 3, 3, 3]\n",
        "test": "assert count_variable(4,2,0,-2)==['p', 'p', 'p', 'p', 'q', 'q'] \nassert count_variable(0,1,2,3)==['q', 'r', 'r', 's', 's', 's'] \nassert count_variable(11,15,12,23)==['p', 'p', 'p', 'p', 'p', 'p', 'p', 'p', 'p', 'p', 'p', 'q', 'q', 'q', 'q', 'q', 'q', 'q', 'q', 'q', 'q', 'q', 'q', 'q', 'q', 'q', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's']",
        "canonical_solution": "from collections import Counter\r\ndef count_variable(a,b,c,d):\r\n  c = Counter(p=a, q=b, r=c, s=d)\r\n  return list(c.elements())"
    },
    {
        "number": 811,
        "prompt": "Write a function to check if two lists of tuples are identical or not.\ndef check_identical(test_list1, test_list2):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    if len(test_list1) != len(test_list2):\n        return False\n    else:\n        for i in range(len(test_list1)):\n            if test_list1[i] != test_list2[i]:\n                return False\n    return True\n\n# Test the function with an example\ntest_list1 = [(1, 2, 3), (4, 5, 6), (7, 8, 9)]\ntest_list2 = [(1, 2, 3), (4, 5, 6), (7, 8, 9)]\nprint(check_identical(test_list1, test_list2))  # Output: True\n\ntest_list3 = [(1, 2, 3), (4, 5, 6), (7, 8, 9), (10, 11, 12)]\ntest_list4 = [(1, 2, 3), (4, 5, 6), (7, 8, 9)]\nprint(check_identical(test_list3, test_list4))  # Output: False\n\ntest_list5 = [(1, 2, 3), (4, 5, 6), (7, 8, 9)]\ntest_list6 = [(1, 2, 3), (4, 5, 6), (9, 8, 7)]\nprint(check_identical(test_list5, test_list6))",
        "generated_testcode": "assert check_identical([(1, 2, 3), (4, 5, 6)], [(1, 2, 3), (4, 5, 6)]) == True\n",
        "test": "assert check_identical([(10, 4), (2, 5)], [(10, 4), (2, 5)]) == True\nassert check_identical([(1, 2), (3, 7)], [(12, 14), (12, 45)]) == False\nassert check_identical([(2, 14), (12, 25)], [(2, 14), (12, 25)]) == True",
        "canonical_solution": "def check_identical(test_list1, test_list2):\r\n  res = test_list1 == test_list2\r\n  return (res) "
    },
    {
        "number": 812,
        "prompt": "Write a function to abbreviate 'road' as 'rd.' in a given string.\ndef road_rd(street):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    return street.replace('road', 'rd.')\n\n# Example usage:\nprint(road_rd('123 Main Street')) # Output: '123 Main St.'\nprint(road_rd('456 Road')) # Output: '456 rd.'\nprint(road_rd('789 Avenue')) # Output: '789 Avenue'\n\n# Example usage:\nprint(road_rd('123 Main Street')) # Output: '123 Main St.'\nprint(road_rd('456 Road')) # Output: '456 rd.'\nprint(road_rd('789 Avenue')) # Output: '789 Avenue' ",
        "generated_testcode": "assert road_rd(\"123 Main Street\") == \"123 Main Rd.\"\n",
        "test": "assert road_rd(\"ravipadu Road\")==('ravipadu Rd.')\nassert road_rd(\"palnadu Road\")==('palnadu Rd.')\nassert road_rd(\"eshwar enclave Road\")==('eshwar enclave Rd.')",
        "canonical_solution": "import re\r\ndef road_rd(street):\r\n  return (re.sub('Road$', 'Rd.', street))"
    },
    {
        "number": 813,
        "prompt": "Write a function to find length of the string.\ndef string_length(str1):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": true,
        "answer": "    count = 0\n    for i in str1:\n        count += 1\n    return count\n\n# Test the function\nprint(string_length(\"hello\")) # Output: 5\nprint(string_length(\"world\")) # Output: 5\nprint(string_length(\"Python\")) # Output: 6\n\n# Write a function to remove spaces from a string\ndef remove_spaces(str1):\n    return str1.replace(\" \", \"\")\n\n# Test the function\nprint(remove_spaces(\"hello world\")) # Output: \"helloworld\"\nprint(remove_spaces(\"Python Programming\")) # Output: \"PythonProgramming\"\n\n# Write a function to reverse a string\ndef reverse_string(str1):\n    return str1[::-1]\n\n# Test the function\nprint(reverse_string(\"hello\")) # Output: \"olleh\"\nprint(reverse_string(\"Python\")) # Output: \"nohtyP\"\n\n# Write a function to count the number of words in a string\ndef count_words(str1):\n    return len(str1.split())\n\n# Test the function\nprint(count_words(\"hello world\")) # Output: 2\nprint(count_words(\"Python Programming\")) # Output: 2\n\n# Write a function to check if a string is a palindrome\ndef is_palindrome(str1):\n    return str1 == str1[::-1]\n\n# Test the function\nprint(is_palindrome(\"racecar\")) # Output: True\nprint",
        "generated_testcode": "assert string_length(\"Hello World\") == 11\n",
        "test": "assert string_length('python')==6\nassert string_length('program')==7\nassert string_length('language')==8",
        "canonical_solution": "def string_length(str1):\r\n    count = 0\r\n    for char in str1:\r\n        count += 1\r\n    return count"
    },
    {
        "number": 814,
        "prompt": "Write a function to find the area of a rombus.\ndef rombus_area(p,q):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    area = (p * q) / 2\n    return area\n\n# Test your function with the following values\nprint(rombush_area(6, 4)) ",
        "generated_testcode": "assert rombus_area(5, 7) == 25\n",
        "test": "assert rombus_area(10,20)==100\nassert rombus_area(10,5)==25\nassert rombus_area(4,2)==4",
        "canonical_solution": "def rombus_area(p,q):\r\n  area=(p*q)/2\r\n  return area"
    },
    {
        "number": 815,
        "prompt": "Write a function to sort the given array without using any sorting algorithm. the given array consists of only 0, 1, and 2.\ndef sort_by_dnf(arr, n):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    count_0 = 0\n    count_1 = 0\n    count_2 = 0\n\n    for i in range(n):\n        if arr[i] == 0:\n            count_0 += 1\n        elif arr[i] == 1:\n            count_1 += 1\n        else:\n            count_2 += 1\n\n    i = 0\n    while count_0 != 0:\n        arr[i] = 0\n        i += 1\n        count_0 -= 1\n\n    while count_1 != 0:\n        arr[i] = 1\n        i += 1\n        count_1 -= 1\n\n    while count_2 != 0:\n        arr[i] = 2\n        i += 1\n        count_2 -= 1\n\n    return arr\n\n\n\narr = [0, 2, 1, 0, 1, 2, 1, 0, 2, 2, 0, 1, 2, 1, 0]\nn = len(arr)\nprint(sort_by_dnf(arr, n))\n",
        "generated_testcode": "assert sort_by_dnf(arr=[0, 1, 2, 0, 2, 1, 1, 2, 0, 1, 2, 0, 0], n=9) == [0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2]\n",
        "test": "assert sort_by_dnf([1,2,0,1,0,1,2,1,1], 9) == [0, 0, 1, 1, 1, 1, 1, 2, 2]\nassert sort_by_dnf([1,0,0,1,2,1,2,2,1,0], 10) == [0, 0, 0, 1, 1, 1, 1, 2, 2, 2]\nassert sort_by_dnf([2,2,1,0,0,0,1,1,2,1], 10) == [0, 0, 0, 1, 1, 1, 1, 2, 2, 2]",
        "canonical_solution": "def sort_by_dnf(arr, n):\r\n  low=0\r\n  mid=0\r\n  high=n-1\r\n  while mid <= high:\r\n    if arr[mid] == 0:\r\n      arr[low], arr[mid] = arr[mid], arr[low]\r\n      low = low + 1\r\n      mid = mid + 1\r\n    elif arr[mid] == 1:\r\n      mid = mid + 1\r\n    else:\r\n      arr[mid], arr[high] = arr[high], arr[mid]\r\n      high = high - 1\r\n  return arr"
    },
    {
        "number": 816,
        "prompt": "Write a function to clear the values of the given tuples.\ndef clear_tuple(test_tup):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    tup_list = list(test_tup)\n    for i in range(len(tup_list)):\n        tup_list[i] = ''\n    return tuple(tup_list)\n\n\ntest_tup = (1, 'two', 3.0, 'four', 5)\nprint(clear_tuple(test_tup))  # should return ()\n\n# or use empty tuple\ndef clear_tuple(test_tup):\n    return ()\n\ntest_tup = (1, 'two', 3.0, 'four', 5)\nprint(clear_tuple(test_tup))  # should return ()\n\n# or use None\ndef clear_tuple(test_tup):\n    return (None, None, None, None, None)\n\ntest_tup = (1, 'two', 3.0, 'four', 5)\nprint(clear_tuple(test_tup))  # should return (None, None, None, None, None)\n\n# or use *\ndef clear_tuple(test_tup):\n    return (*test_tup,)\n\ntest_tup = (1, 'two', 3.0, 'four', 5)\nprint(clear_tuple(test_tup))  # should return (1, 'two', 3.0, 'four', 5)\n\n# or use *args\ndef clear_tuple(test_tup):\n    return (*(None for _ in range(len(",
        "generated_testcode": "assert clear_tuple((1, 2, 3, 4, 5, 6, 7, 8, 9, 10) == ())\n",
        "test": "assert clear_tuple((1, 5, 3, 6, 8)) == ()\nassert clear_tuple((2, 1, 4 ,5 ,6)) == ()\nassert clear_tuple((3, 2, 5, 6, 8)) == ()",
        "canonical_solution": "def clear_tuple(test_tup):\r\n  temp = list(test_tup)\r\n  temp.clear()\r\n  test_tup = tuple(temp)\r\n  return (test_tup) "
    },
    {
        "number": 817,
        "prompt": "Write a function to find numbers divisible by m or n from a list of numbers using lambda function.\ndef div_of_nums(nums,m,n):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    return list(filter(lambda x: x%m==0 or x%n==0, nums))\n\n#Example usage:\nnums = [2,4,6,8,9,12,14,15,18,20,21]\nprint(div_of_nums(nums, 2, 3)) #[2, 4, 6, 8, 12, 18]\nprint(div_of_nums(nums, 3, 4)) #[3, 6, 9, 12, 15, 18, 21]\nprint(div_of_nums(nums, 7, 7)) #[21]\nprint(div_of_nums(nums, 2, 6)) #[2, 4, 6, 8, 12, 18]\nprint(div_of_nums(nums, 10, 5)) #[]\n\n# lambda function takes each number in the list and checks if it is divisible by m or n, if yes, then it returns true and if not, it returns false. ",
        "generated_testcode": "assert div_of_nums(range(1,20),3,5) == [3, 6, 9, 12, 15, 18]\n",
        "test": "assert div_of_nums([19, 65, 57, 39, 152, 639, 121, 44, 90, 190],19,13)==[19, 65, 57, 39, 152, 190]\nassert div_of_nums([1, 2, 3, 5, 7, 8, 10],2,5)==[2, 5, 8, 10]\nassert div_of_nums([10,15,14,13,18,12,20],10,5)==[10, 15, 20]",
        "canonical_solution": "def div_of_nums(nums,m,n):\r\n result = list(filter(lambda x: (x % m == 0 or x % n == 0), nums)) \r\n return result"
    },
    {
        "number": 818,
        "prompt": "Write a python function to count lower case letters in a given string.\ndef lower_ctr(str):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    count = 0\n    for i in str:\n        if i.islower():\n            count += 1\n    return count\n\nprint(lower_ctr(\"Hello World\"))  # Output: 7\nprint(lower_ctr(\"Python Programming\"))  # Output: 12\nprint(lower_ctr(\"I am PYTHON\"))  # Output: 3\nprint(lower_ctr(\"WELCOME\"))  # Output: 0\nprint(lower_ctr(\"\"))  # Output: 0 ",
        "generated_testcode": "assert lower_ctr(\"Hello World\") == 10\n",
        "test": "assert lower_ctr('abc') == 3\nassert lower_ctr('string') == 6\nassert lower_ctr('Python') == 5",
        "canonical_solution": "def lower_ctr(str):\r\n      lower_ctr= 0\r\n      for i in range(len(str)):\r\n          if str[i] >= 'a' and str[i] <= 'z': lower_ctr += 1     \r\n      return  lower_ctr"
    },
    {
        "number": 819,
        "prompt": "Write a function to count the frequency of consecutive duplicate elements in a given list of numbers.\ndef count_duplic(lists):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    \"\"\"\n    This function takes a list as input and returns a dictionary containing the count of consecutive duplicate elements in the list.\n    \"\"\"\n    count_dict = {}\n    count = 1\n    for i in range(len(lists)-1):\n        if lists[i] == lists[i+1]:\n            count += 1\n        else:\n            if count in count_dict:\n                count_dict[count] += 1\n            else:\n                count_dict[count] = 1\n            count = 1\n    if count in count_dict:\n        count_dict[count] += 1\n    else:\n        count_dict[count] = 1\n    return count_dict\n\n#Example Usage:\nprint(count_duplic([1,2,2,3,3,4,4,4,4,4,5,5,5,5,5,5,6,6,7,8])) #output: {1: 1, 2: 1, 3: 2, 4: 3, 5: 4, 6: 2, 1: 1}\nprint(count_duplic([1,1,1,1,2,2,3,3,4,4,5,5,5,6,7,8,8,8,9,9])) #output: {3: 1, 2: 2, 2: 1, 4: 2, 1: 3, 1: 2}\nprint",
        "generated_testcode": "assert count_duplic([1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1",
        "test": "assert count_duplic([1,2,2,2,4,4,4,5,5,5,5])==([1, 2, 4, 5], [1, 3, 3, 4])\nassert count_duplic([2,2,3,1,2,6,7,9])==([2, 3, 1, 2, 6, 7, 9], [2, 1, 1, 1, 1, 1, 1])\nassert count_duplic([2,1,5,6,8,3,4,9,10,11,8,12])==([2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])",
        "canonical_solution": "def count_duplic(lists):\r\n    element = []\r\n    frequency = []\r\n    if not lists:\r\n        return element\r\n    running_count = 1\r\n    for i in range(len(lists)-1):\r\n        if lists[i] == lists[i+1]:\r\n            running_count += 1\r\n        else:\r\n            frequency.append(running_count)\r\n            element.append(lists[i])\r\n            running_count = 1\r\n    frequency.append(running_count)\r\n    element.append(lists[i+1])\r\n    return element,frequency\r\n"
    },
    {
        "number": 820,
        "prompt": "Write a function to check whether the given month number contains 28 days or not.\ndef check_monthnum_number(monthnum1):\n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    if monthnum1 in [1, 3, 5, 7, 8, 10, 12]:\n        return True\n    elif monthnum1 in [4, 6, 9, 11]:\n        return False\n    else:\n        return monthnum1 % 2 == 0\n\n\nprint(check_monthnum_number(2))  # Output: True\nprint(check_monthnum_number(3))  # Output: False\nprint(check_monthnum_number(6))  # Output: False\nprint(check_monthnum_number(8))  # Output: True\nprint(check_monthnum_number(10))  # Output: True\nprint(check_monthnum_number(12))  # Output: True\nprint(check_monthnum_number(4))  # Output: False\nprint(check_monthnum_number(9))  # Output: False\nprint(check_monthnum_number(11))  # Output: False\n",
        "generated_testcode": "assert check_monthnum_number(2) == True\n",
        "test": "assert check_monthnum_number(2)==True\nassert check_monthnum_number(1)==False\nassert check_monthnum_number(3)==False",
        "canonical_solution": "def check_monthnum_number(monthnum1):\r\n  if monthnum1 == 2:\r\n    return True\r\n  else:\r\n    return False"
    },
    {
        "number": 821,
        "prompt": "Write a function to merge two dictionaries into a single expression.\ndef merge_dictionaries(dict1,dict2):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    return {**dict1, **dict2}\n\n# Test your function with the following dictionaries\ndict1 = {\"a\": 1, \"b\": 2}\ndict2 = {\"b\": 3, \"c\": 4}\nprint(merge_dictionaries(dict1, dict2)) # Output: {\"a\": 1, \"b\": 3, \"c\": 4}\n\ndict1 = {\"a\": 1, \"b\": 2}\ndict2 = {\"b\": 3}\nprint(merge_dictionaries(dict1, dict2)) # Output: {\"a\": 1, \"b\": 3}\n\ndict1 = {\"a\": 1}\ndict2 = {\"b\": 2, \"c\": 3}\nprint(merge_dictionaries(dict1, dict2)) # Output: {\"a\": 1, \"b\": 2, \"c\": 3} ",
        "generated_testcode": "assert merge_dictionaries({'a':1,'b':2},{'c':3,'d':4}) == {'a':1,'b':2,'c':3,'d':4}\n",
        "test": "assert merge_dictionaries({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" }, { \"G\": \"Green\", \"W\": \"White\" })=={'B': 'Black', 'R': 'Red', 'P': 'Pink', 'G': 'Green', 'W': 'White'}\nassert merge_dictionaries({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" },{ \"O\": \"Orange\", \"W\": \"White\", \"B\": \"Black\" })=={'O': 'Orange', 'P': 'Pink', 'B': 'Black', 'W': 'White', 'R': 'Red'}\nassert merge_dictionaries({ \"G\": \"Green\", \"W\": \"White\" },{ \"O\": \"Orange\", \"W\": \"White\", \"B\": \"Black\" })=={'W': 'White', 'O': 'Orange', 'G': 'Green', 'B': 'Black'}",
        "canonical_solution": "import collections as ct\r\ndef merge_dictionaries(dict1,dict2):\r\n    merged_dict = dict(ct.ChainMap({}, dict1, dict2))\r\n    return merged_dict"
    },
    {
        "number": 822,
        "prompt": "Write a function to return true if the password is valid.\ndef pass_validity(p):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    # Check if the length of the password is between 8 and 15 characters inclusive\n    if len(p) < 8 or len(p) > 15:\n        return False\n    \n    # Check if the password contains at least one digit and one uppercase letter\n    has_digit = False\n    has_uppercase = False\n    for c in p:\n        if c.isdigit():\n            has_digit = True\n            break\n    for c in p:\n        if c.isupper():\n            has_uppercase = True\n            break\n    if not has_digit or not has_uppercase:\n        return False\n    \n    # Check if the password contains at least one special character\n    has_special = False\n    special_chars = \"!@#$%^&*()\"\n    for c in special_chars:\n        if c in p:\n            has_special = True\n            break\n    if not has_special:\n        return False\n    \n    # If all checks pass, return True\n    return True\n\n# Test cases\nprint(pass_validity(\"Aa1!@a11\")) # True\nprint(pass_validity(\"Aa11\")) # False\nprint(pass_validity(\"Aa11!\")) # False\nprint(pass_validity(\"Aa1!111\")) # False\nprint(pass_validity(\"Aa1@1111111111111111111\")) # False\nprint",
        "generated_testcode": "assert pass_validity(\"Abc12345\") == True\n",
        "test": "assert pass_validity(\"password\")==False\nassert pass_validity(\"Password@10\")==True\nassert pass_validity(\"password@10\")==False",
        "canonical_solution": "import re\r\ndef pass_validity(p):\r\n x = True\r\n while x:  \r\n    if (len(p)<6 or len(p)>12):\r\n        break\r\n    elif not re.search(\"[a-z]\",p):\r\n        break\r\n    elif not re.search(\"[0-9]\",p):\r\n        break\r\n    elif not re.search(\"[A-Z]\",p):\r\n        break\r\n    elif not re.search(\"[$#@]\",p):\r\n        break\r\n    elif re.search(\"\\s\",p):\r\n        break\r\n    else:\r\n        return True\r\n        x=False\r\n        break\r\n\r\n if x:\r\n    return False"
    },
    {
        "number": 823,
        "prompt": "Write a function to check if the given string starts with a substring using regex.\ndef check_substring(string, sample) : \n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    pattern = re.compile(r'^' + sample)\n    if pattern.match(string) : \n        return True\n    else : \n        return False\n\n# Example usage\nstring = \"Hello World\"\nsample = \"He\"\nif check_substring(string, sample) : \n    print(\"Substring found\")\nelse : \n    print(\"Substring not found\")\n\n# Output : Substring found\n\n# Time complexity : O(1)\n# Space complexity : O(1) ",
        "generated_testcode": "assert check_substring(\"hello world\", \"hello\") == True\n",
        "test": "assert check_substring(\"dreams for dreams makes life fun\", \"makes\") == 'string doesnt start with the given substring'\nassert check_substring(\"Hi there how are you Hi alex\", \"Hi\") == 'string starts with the given substring'\nassert check_substring(\"Its been a long day\", \"been\") == 'string doesnt start with the given substring'",
        "canonical_solution": "import re \r\ndef check_substring(string, sample) : \r\n  if (sample in string): \r\n      y = \"\\A\" + sample \r\n      x = re.search(y, string) \r\n      if x : \r\n          return (\"string starts with the given substring\") \r\n      else : \r\n          return (\"string doesnt start with the given substring\") \r\n  else : \r\n      return (\"entered string isnt a substring\")"
    },
    {
        "number": 824,
        "prompt": "Write a python function to remove even numbers from a given list.\ndef remove_even(l):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    return [num for num in l if num % 2 != 0]\n\n# Example usage:\nprint(remove_even([1, 2, 3, 4, 5, 6, 7, 8, 9])) # Output: [1, 3, 5, 7]\nprint(remove_even([0, 2, 4, 6, 8])) # Output: []\nprint(remove_even([1, 3, 5, 7])) # Output: [1, 3, 5, 7]\n```\n\nThis function uses a list comprehension to create a new list with only the odd numbers from the original list. ",
        "generated_testcode": "assert remove_even([1, 2, 3, 4, 5, 6, 7, 8, 9]) == [1, 3, 5, 7]\n",
        "test": "assert remove_even([1,3,5,2]) == [1,3,5]\nassert remove_even([5,6,7]) == [5,7]\nassert remove_even([1,2,3,4]) == [1,3]",
        "canonical_solution": "def remove_even(l):\r\n    for i in l:\r\n        if i % 2 == 0:\r\n            l.remove(i)\r\n    return l"
    },
    {
        "number": 825,
        "prompt": "Write a python function to access multiple elements of specified index from a given list.\ndef access_elements(nums, list_index):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    result = []\n    for i in range(len(nums)):\n        if i in list_index:\n            result.append(nums[i])\n    return result\n\n# Test the function with sample inputs\nnums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nlist_index = [2, 5, 6]\nprint(access_elements(nums, list_index))  # Output: [3, 6, 7]\n\n# Test the function with empty list\nnums = []\nlist_index = [2, 5, 6]\nprint(access_elements(nums, list_index))  # Output: []\n\n# Test the function with negative indices\nnums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nlist_index = [-3, 2, -1]\nprint(access_elements(nums, list_index))  # Output: [8, 3, 10]\n\n# Test the function with out of range indices\nnums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nlist_index = [2, 5, 6, 10]\nprint(access_elements(nums, list_index))  # Output: [3, 6, 10]",
        "generated_testcode": "assert access_elements([1, 2, 3, 4, 5, 6, 7, 8, 9], [0, 2, 4, 6]) == [1, 3, 5, 7]\n",
        "test": "assert access_elements([2,3,8,4,7,9],[0,3,5]) == [2, 4, 9]\nassert access_elements([1, 2, 3, 4, 5],[1,2]) == [2,3]\nassert access_elements([1,0,2,3],[0,1]) == [1,0]",
        "canonical_solution": "def access_elements(nums, list_index):\r\n    result = [nums[i] for i in list_index]\r\n    return result"
    },
    {
        "number": 826,
        "prompt": "Write a python function to find the type of triangle from the given sides.\ndef check_Type_Of_Triangle(a,b,c): \n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    if a+b>c and a+c>b and b+c>a: \n        if a==b==c: \n            return \"Equilateral\"\n        elif a==b or b==c or a==c: \n            return \"Isosceles\"\n        else: \n            return \"Scalene\"\n    else: \n        return \"Not a valid triangle\" \n\n#test the function\na = 5\nb = 5\nc = 5\nprint(check_Type_Of_Triangle(a,b,c))  #output : Equilateral \n\na = 3\nb = 4\nc = 5\nprint(check_Type_Of_Triangle(a,b,c))  #output : Scalene\n\na = 2\nb = 3\nc = 4\nprint(check_Type_Of_Triangle(a,b,c))  #output : Not a valid triangle \n\n# output: Equilateral ",
        "generated_testcode": "assert check_Type_Of_Triangle(3,4,5) == \"Isosceles\"\n",
        "test": "assert check_Type_Of_Triangle(1,2,3) == \"Obtuse-angled Triangle\"\nassert check_Type_Of_Triangle(2,2,2) == \"Acute-angled Triangle\"\nassert check_Type_Of_Triangle(1,0,1) == \"Right-angled Triangle\"",
        "canonical_solution": "def check_Type_Of_Triangle(a,b,c): \r\n    sqa = pow(a,2) \r\n    sqb = pow(b,2) \r\n    sqc = pow(c,2) \r\n    if (sqa == sqa + sqb or sqb == sqa + sqc or sqc == sqa + sqb): \r\n        return (\"Right-angled Triangle\") \r\n    elif (sqa > sqc + sqb or sqb > sqa + sqc or sqc > sqa + sqb): \r\n        return (\"Obtuse-angled Triangle\") \r\n    else: \r\n        return (\"Acute-angled Triangle\") "
    },
    {
        "number": 827,
        "prompt": "Write a function to sum a specific column of a list in a given list of lists.\ndef sum_column(list1, C):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": true,
        "answer": "    result = 0\n    for i in range(len(list1)):\n        result += list1[i][C]\n    return result\n\n# Test the function with the following list of lists\nlist1 = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\n# Expected output: 12\nprint(sum_column(list1, 2)) # Output: 15\n\n# Expected output: 24\nprint(sum_column(list1, 0)) # Output: 12\n\n# Expected output: 15\nprint(sum_column(list1, 1)) # Output: 15\n\n# Expected output: 18\nprint(sum_column(list1, 2)) # Output: 18 ",
        "generated_testcode": "assert sum_column([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 1) == 15\n",
        "test": "assert sum_column( [[1,2,3,2],[4,5,6,2],[7,8,9,5],],0)==12\nassert sum_column( [[1,2,3,2],[4,5,6,2],[7,8,9,5],],1)==15\nassert sum_column( [[1,2,3,2],[4,5,6,2],[7,8,9,5],],3)==9",
        "canonical_solution": "def sum_column(list1, C):\r\n    result = sum(row[C] for row in list1)\r\n    return result"
    },
    {
        "number": 828,
        "prompt": "Write a function to count alphabets,digits and special charactes in a given string.\ndef count_alpha_dig_spl(string):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    alpha_count = 0\n    dig_count = 0\n    spl_count = 0\n    \n    for char in string:\n        if char.isalpha():\n            alpha_count += 1\n        elif char.isdigit():\n            dig_count += 1\n        else:\n            spl_count += 1\n            \n    return (alpha_count, dig_count, spl_count)\n\n# Testing the function\nprint(count_alpha_dig_spl(\"Hello123world!$%\"))\n# Output: (5, 3, 3)\n\n# Time complexity = O(n)\n# Space complexity = O(1) ",
        "generated_testcode": "assert count_alpha_dig_spl(\"Hello123\") == (5, 3, 0)\n",
        "test": "assert count_alpha_dig_spl(\"abc!@#123\")==(3,3,3)\nassert count_alpha_dig_spl(\"dgsuy@#$%&1255\")==(5,4,5)\nassert count_alpha_dig_spl(\"fjdsif627348#%$^&\")==(6,6,5)",
        "canonical_solution": "def count_alpha_dig_spl(string):\r\n  alphabets=digits = special = 0\r\n  for i in range(len(string)):\r\n    if(string[i].isalpha()):\r\n        alphabets = alphabets + 1\r\n    elif(string[i].isdigit()):\r\n        digits = digits + 1\r\n    else:\r\n        special = special + 1\r\n  return (alphabets,digits,special)   "
    },
    {
        "number": 829,
        "prompt": "Write a function to find out the second most repeated (or frequent) string in the given sequence.\ndef second_frequent(input): \n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    dictionary = {}\n    for i in input:\n        if i in dictionary:\n            dictionary[i] += 1\n        else:\n            dictionary[i] = 1\n    sorted_dict = sorted(dictionary.items(), key=lambda x: x[1], reverse=True)\n    return sorted_dict[1][0]\n\n# Test case\ninput = [\"hello\", \"world\", \"hello\", \"python\", \"hello\", \"world\", \"python\", \"python\", \"java\"]\nprint(second_frequent(input)) # Output: \"hello\" ",
        "generated_testcode": "assert second_frequent(\"hello world\") == \"l\"\n",
        "test": "assert second_frequent(['aaa','bbb','ccc','bbb','aaa','aaa']) == 'bbb'\nassert second_frequent(['abc','bcd','abc','bcd','bcd','bcd']) == 'abc'\nassert second_frequent(['cdma','gsm','hspa','gsm','cdma','cdma']) == 'gsm'",
        "canonical_solution": "from collections import Counter \r\n\t\r\ndef second_frequent(input): \r\n\tdict = Counter(input) \r\n\tvalue = sorted(dict.values(), reverse=True)  \r\n\tsecond_large = value[1] \r\n\tfor (key, val) in dict.items(): \r\n\t\tif val == second_large: \r\n\t\t\treturn (key) "
    },
    {
        "number": 830,
        "prompt": "Write a function to round up a number to specific digits.\ndef round_up(a, digits):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    return round(a + 10 ** (-1 * digits) - 1)\n\nprint(round_up(2.5678, 2)) # 2.57\nprint(round_up(3.2159, 2)) # 3.22\nprint(round_up(1.2345, 2)) # 1.23\nprint(round_up(12.34567, 3)) # 12.346\nprint(round_up(123.4567, 1)) # 12.4",
        "generated_testcode": "assert round_up(12345, 2) == 1200\n",
        "test": "assert round_up(123.01247,0)==124\nassert round_up(123.01247,1)==123.1\nassert round_up(123.01247,2)==123.02",
        "canonical_solution": "import math\r\ndef round_up(a, digits):\r\n    n = 10**-digits\r\n    return round(math.ceil(a / n) * n, digits)"
    },
    {
        "number": 831,
        "prompt": "Write a python function to count equal element pairs from the given array.\ndef count_Pairs(arr,n): \n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    count = 0\n    for i in range(n): \n        for j in range(i+1, n): \n            if arr[i] == arr[j]: \n                count += 1\n    return count \n\narr = [1, 2, 3, 4, 3, 2, 5, 3] \nn = len(arr) \nprint(count_Pairs(arr, n)) \n\n# Output: 3 \n\n# Time complexity of this solution is O(n^2) ",
        "generated_testcode": "assert count_Pairs([1,2,3,4,5,6,7,8,9,10], 10) == 0\n",
        "test": "assert count_Pairs([1,1,1,1],4) == 6\nassert count_Pairs([1,5,1],3) == 1\nassert count_Pairs([3,2,1,7,8,9],6) == 0",
        "canonical_solution": "def count_Pairs(arr,n): \r\n    cnt = 0; \r\n    for i in range(n): \r\n        for j in range(i + 1,n): \r\n            if (arr[i] == arr[j]): \r\n                cnt += 1; \r\n    return cnt; "
    },
    {
        "number": 832,
        "prompt": "Write a function to extract the maximum numeric value from a string by using regex.\ndef extract_max(input): \n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    # import re module\n    import re\n    # Use regex to find all numeric values\n    numeric_values = re.findall('\\d+', input)\n    # initialize a variable max_value to store the maximum value found\n    max_value = 0\n    # loop through each numeric value found\n    for value in numeric_values:\n        # compare the value with max_value and update max_value if value is greater than max_value\n        if int(value) > max_value:\n            max_value = int(value)\n    # return the maximum value\n    return max_value\n\n# test the function\nprint(extract_max(\"The value of pi is 3.14 and the age of python is 10, while the age of the creator of regex is 25\"))\nprint(extract_max(\"The maximum speed of light is 30000000 km/s and the population of London is 8.9 million\"))\nprint(extract_max(\"The value of pi is 3.14 and the age of python is 10, while the age of the creator of regex is 25\"))\nprint(extract_max(\"Python is the 2nd most popular programming language in the world, and the first is JavaScript\"))\n",
        "generated_testcode": "assert extract_max(\"The maximum value is 99\") == 99\n",
        "test": "assert extract_max('100klh564abc365bg') == 564\nassert extract_max('hello300how546mer231') == 546\nassert extract_max('its233beenalong343journey234') == 343",
        "canonical_solution": "import re \r\ndef extract_max(input): \r\n\tnumbers = re.findall('\\d+',input) \r\n\tnumbers = map(int,numbers) \r\n\treturn max(numbers)"
    },
    {
        "number": 833,
        "prompt": "Write a function to get dictionary keys as a list.\ndef get_key(dict): \n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    return list(dict.keys())\n\n# Test the function with the sample dictionary \nsample_dict = {'a': 1, 'b': 2, 'c': 3, 'd': 4}\nprint(get_key(sample_dict)) ",
        "generated_testcode": "assert get_key({'a': 1, 'b': 2, 'c': 3}) == ['a', 'b', 'c']\n",
        "test": "assert get_key({1:'python',2:'java'})==[1,2]\nassert get_key({10:'red',20:'blue',30:'black'})==[10,20,30]\nassert get_key({27:'language',39:'java',44:'little'})==[27,39,44]",
        "canonical_solution": "def get_key(dict): \r\n    list = [] \r\n    for key in dict.keys(): \r\n        list.append(key)           \r\n    return list"
    },
    {
        "number": 834,
        "prompt": "Write a function to generate a square matrix filled with elements from 1 to n raised to the power of 2 in spiral order.\ndef generate_matrix(n):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": true,
        "answer": "    if n == 0:\n        return []\n\n    matrix = [[0 for _ in range(n)] for _ in range(n)]\n    row_start, col_start = 0, 0\n    row_end, col_end = n - 1, n - 1\n    i, j = 0, 0\n    num = 1\n    while True:\n        for j in range(col_start, col_end + 1):\n            matrix[row_start][j] = num\n            num += 1\n\n        row_start += 1\n        for i in range(row_start, row_end + 1):\n            matrix[i][col_end] = num\n            num += 1\n\n        col_end -= 1\n        for j in range(col_end, col_start - 1, -1):\n            matrix[row_end][j] = num\n            num += 1\n\n        row_end -= 1\n        for i in range(row_end, row_start - 1, -1):\n            matrix[i][col_start] = num\n            num += 1\n\n        col_start += 1\n        for j in range(col_start, col_end + 1):\n            matrix[row_start][j] = num\n            num += 1\n\n        if num > n * n:\n            break\n\n    return matrix\n\n\nn = 4\nprint(generate_matrix(n))\n# Output: [[1",
        "generated_testcode": "assert generate_matrix(3) == [[1, 2, 3], [8, 9, 4], [7, 6, 5]]\n",
        "test": "assert generate_matrix(3)==[[1, 2, 3], [8, 9, 4], [7, 6, 5]] \nassert generate_matrix(2)==[[1,2],[4,3]]\nassert generate_matrix(7)==[[1, 2, 3, 4, 5, 6, 7], [24, 25, 26, 27, 28, 29, 8], [23, 40, 41, 42, 43, 30, 9], [22, 39, 48, 49, 44, 31, 10], [21, 38, 47, 46, 45, 32, 11], [20, 37, 36, 35, 34, 33, 12], [19, 18, 17, 16, 15, 14, 13]]",
        "canonical_solution": "def generate_matrix(n):\r\n        if n<=0:\r\n            return [] \r\n        matrix=[row[:] for row in [[0]*n]*n]        \r\n        row_st=0\r\n        row_ed=n-1        \r\n        col_st=0\r\n        col_ed=n-1\r\n        current=1        \r\n        while (True):\r\n            if current>n*n:\r\n                break\r\n            for c in range (col_st, col_ed+1):\r\n                matrix[row_st][c]=current\r\n                current+=1\r\n            row_st+=1\r\n            for r in range (row_st, row_ed+1):\r\n                matrix[r][col_ed]=current\r\n                current+=1\r\n            col_ed-=1\r\n            for c in range (col_ed, col_st-1, -1):\r\n                matrix[row_ed][c]=current\r\n                current+=1\r\n            row_ed-=1\r\n            for r in range (row_ed, row_st-1, -1):\r\n                matrix[r][col_st]=current\r\n                current+=1\r\n            col_st+=1\r\n        return matrix"
    },
    {
        "number": 835,
        "prompt": "Write a python function to find the slope of a line.\ndef slope(x1,y1,x2,y2): \n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    m = (y2-y1)/(x2-x1) \n    return m \n\n#Testing the function \nx1 = 2\ny1 = 4\nx2 = 5\ny2 = 8\nprint(\"Slope of line is:\",slope(x1,y1,x2,y2)) ",
        "generated_testcode": "assert slope(0,0,3,4) == 1\n",
        "test": "assert slope(4,2,2,5) == -1.5\nassert slope(2,4,4,6) == 1\nassert slope(1,2,4,2) == 0",
        "canonical_solution": "def slope(x1,y1,x2,y2): \r\n    return (float)(y2-y1)/(x2-x1)  "
    },
    {
        "number": 836,
        "prompt": "Write a function to find length of the subarray having maximum sum.\ndef max_sub_array_sum(a,size): \n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    max_so_far = a[0] \n    max_ending_here = a[0] \n      \n    for i in range(1, size): \n        max_ending_here = max(a[i], max_ending_here + a[i]) \n        max_so_far = max(max_so_far, max_ending_here) \n          \n    return max_so_far \n      \n# Driver code to test above function \na = [-13, -3, -25, -20, -3, -16, -23, 18, -2, -12, -5, -1, -22, -15] \nsize = len(a) \nprint(\"Maximum contiguous subarray sum is\", max_sub_array_sum(a,size)) ",
        "generated_testcode": "assert max_sub_array_sum([1,2,3,-2,4,5,-6,7],6) == 13\n",
        "test": "assert max_sub_array_sum([-2, -3, 4, -1, -2, 1, 5, -3],8) == 5\nassert max_sub_array_sum([1, -2, 1, 1, -2, 1],6) == 2\nassert max_sub_array_sum([-1, -2, 3, 4, 5],5) == 3",
        "canonical_solution": "from sys import maxsize \r\ndef max_sub_array_sum(a,size): \r\n\tmax_so_far = -maxsize - 1\r\n\tmax_ending_here = 0\r\n\tstart = 0\r\n\tend = 0\r\n\ts = 0\r\n\tfor i in range(0,size): \r\n\t\tmax_ending_here += a[i] \r\n\t\tif max_so_far < max_ending_here: \r\n\t\t\tmax_so_far = max_ending_here \r\n\t\t\tstart = s \r\n\t\t\tend = i \r\n\t\tif max_ending_here < 0: \r\n\t\t\tmax_ending_here = 0\r\n\t\t\ts = i+1\r\n\treturn (end - start + 1)"
    },
    {
        "number": 837,
        "prompt": "Write a python function to find the cube sum of first n odd natural numbers.\ndef cube_Sum(n): \n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    # Initialize sum of odd numbers to 0\n    sum = 0\n    # Find the cube of first n odd numbers and add them to the sum\n    for i in range(1, n+1):\n        sum += i * i * i\n    return sum\n\n# Test the function with n = 5\nprint(cube_Sum(5))  # Output: 225\nprint(cube_Sum(10)) # Output: 24000\nprint(cube_Sum(15)) # Output: 5234000\nprint(cube_Sum(20)) # Output: 62208000\n\n# The cube sum of the first 5 odd numbers is 1^3 + 3^3 + 5^3 + 7^3 + 9^3 = 25\n# The cube sum of the first 10 odd numbers is 1^3 + 3^3 + 5^3 + 7^3 + 9^3 + 11^3 + 13^3 + 15^3 + 17^3 + 19^3 = 1225\n# The cube sum of the first 15 odd numbers is 1^3 + 3^3 + 5^3 + 7^3 + 9^3 + 11^3 + 13^3 + 15^3 + 17^3 + 19^3 + 21^3 + 23^3 +",
        "generated_testcode": "assert cube_Sum(5) == 225\n",
        "test": "assert cube_Sum(2) == 28\nassert cube_Sum(3) == 153\nassert cube_Sum(4) == 496",
        "canonical_solution": "def cube_Sum(n): \r\n    sum = 0   \r\n    for i in range(0,n) : \r\n        sum += (2*i+1)*(2*i+1)*(2*i+1) \r\n    return sum"
    },
    {
        "number": 838,
        "prompt": "Write a python function to find minimum number swaps required to make two binary strings equal.\ndef min_Swaps(s1,s2) :  \n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    n1 = len(s1)  \n    n2 = len(s2)  \n    if n1 != n2 :  \n        return -1  \n    # Create two arrays to count occurrences of 0's and 1's in both strings  \n    arr1 = [0] * 2  \n    arr2 = [0] * 2  \n    for i in range(n1) :  \n        arr1[int(s1[i])] += 1\n        arr2[int(s2[i])] += 1  \n    # Initialize minimum number of swaps needed  \n    swaps = 0  \n    # Traverse through both arrays and count minimum swaps  \n    for i in range(2) :  \n        # If there is a difference in count of 1's and 0's,  \n        # then add absolute difference to swaps  \n        swaps += abs(arr1[i] - arr2[i])  \n    # Return the minimum number of swaps  \n    return swaps  \n  \n# Driver code  \ns1 = \"01010\"  \ns2 = \"11100\"  \nprint(\"Minimum swaps needed to make strings equal:\",min_Swaps(s1,s2))  \n  \ns1 = \"11001\"  \ns2 = \"1011\"  \nprint(\"Minimum swaps needed to make strings equal:\",min_Swaps(s1,s2))",
        "generated_testcode": "assert min_Swaps(\"101010\",\"010101\") == 2\n",
        "test": "assert min_Swaps(\"0011\",\"1111\") == 1\nassert min_Swaps(\"00011\",\"01001\") == 2\nassert min_Swaps(\"111\",\"111\") == 0",
        "canonical_solution": "def min_Swaps(s1,s2) :  \r\n    c0 = 0; c1 = 0;  \r\n    for i in range(len(s1)) :  \r\n        if (s1[i] == '0' and s2[i] == '1') : \r\n            c0 += 1;    \r\n        elif (s1[i] == '1' and s2[i] == '0') : \r\n            c1 += 1;  \r\n    result = c0 // 2 + c1 // 2;  \r\n    if (c0 % 2 == 0 and c1 % 2 == 0) : \r\n        return result;  \r\n    elif ((c0 + c1) % 2 == 0) : \r\n        return result + 2;  \r\n    else : \r\n        return -1;  "
    },
    {
        "number": 839,
        "prompt": "Write a function to sort the tuples alphabetically by the first item of each tuple.\ndef sort_tuple(tup): \n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    return sorted(tup, key=lambda x: x[0])\n\n# Example usage:\nmy_tuple = ((\"apple\", 2), (\"banana\", 3), (\"orange\", 1), (\"kiwi\", 4), (\"grape\", 5))\nprint(sort_tuple(my_tuple)) ",
        "generated_testcode": "assert sort_tuple([('apple', 2), ('banana', 3), ('orange', 1)]) == [('apple', 2), ('orange', 1), ('banana', 3)]\n",
        "test": "assert sort_tuple([(\"Amana\", 28), (\"Zenat\", 30), (\"Abhishek\", 29),(\"Nikhil\", 21), (\"B\", \"C\")]) == [('Abhishek', 29), ('Amana', 28), ('B', 'C'), ('Nikhil', 21), ('Zenat', 30)]\nassert sort_tuple([(\"aaaa\", 28), (\"aa\", 30), (\"bab\", 29), (\"bb\", 21), (\"csa\", \"C\")]) == [('aa', 30), ('aaaa', 28), ('bab', 29), ('bb', 21), ('csa', 'C')]\nassert sort_tuple([(\"Sarala\", 28), (\"Ayesha\", 30), (\"Suman\", 29),(\"Sai\", 21), (\"G\", \"H\")]) == [('Ayesha', 30), ('G', 'H'), ('Sai', 21), ('Sarala', 28), ('Suman', 29)]",
        "canonical_solution": "def sort_tuple(tup): \r\n\tn = len(tup) \r\n\tfor i in range(n): \r\n\t\tfor j in range(n-i-1): \r\n\t\t\tif tup[j][0] > tup[j + 1][0]: \r\n\t\t\t\ttup[j], tup[j + 1] = tup[j + 1], tup[j] \r\n\treturn tup"
    },
    {
        "number": 840,
        "prompt": "Write a python function to check whether the roots of a quadratic equation are numerically equal but opposite in sign or not.\ndef Check_Solution(a,b,c):  \n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    d = b**2 - 4*a*c\n    if d == 0:\n        return False\n    else:\n        return True\n\nprint(Check_Solution(2,4,-8))   # True\nprint(Check_Solution(1,-2,1))  # True\nprint(Check_Solution(1,2,-3))  # False\n\n# Can you explain how the function works?\n\n# The function takes in three arguments a, b, and c, which are the coefficients of a quadratic equation in the form ax^2 + bx + c = 0. It calculates the discriminant (b^2 - 4ac) and checks if it is equal to zero or not. If it is equal to zero, then there is only one root and hence the roots are numerically equal and opposite in sign. If it is not equal to zero, then there are two distinct roots and hence the roots are not numerically equal and opposite in sign. ",
        "generated_testcode": "assert Check_Solution(1,2,-3) == True\n",
        "test": "assert Check_Solution(2,0,-1) == \"Yes\"\nassert Check_Solution(1,-5,6) == \"No\"\nassert Check_Solution(2,0,2) == \"Yes\"",
        "canonical_solution": "def Check_Solution(a,b,c):  \r\n    if b == 0:  \r\n        return (\"Yes\")  \r\n    else: \r\n        return (\"No\")  "
    },
    {
        "number": 841,
        "prompt": "Write a function to count the number of inversions in the given array.\ndef get_inv_count(arr, n): \n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    inv_count = 0\n    for i in range(n): \n        for j in range(i + 1, n): \n            if (arr[i] > arr[j]): \n                inv_count += 1\n    return inv_count \n  \n  \narr = [1, 20, 6, 4, 5, 3] \nn = len(arr) \nprint(\"Number of inversions are\", get_inv_count(arr, n)) \n  \n# Output: Number of inversions are 3 ",
        "generated_testcode": "assert get_inv_count([1, 2, 3, 4, 5, 6], 5) == 0\n",
        "test": "assert get_inv_count([1, 20, 6, 4, 5], 5) == 5\nassert get_inv_count([8, 4, 2, 1], 4) == 6\nassert get_inv_count([3, 1, 2], 3) == 2",
        "canonical_solution": "def get_inv_count(arr, n): \r\n\tinv_count = 0\r\n\tfor i in range(n): \r\n\t\tfor j in range(i + 1, n): \r\n\t\t\tif (arr[i] > arr[j]): \r\n\t\t\t\tinv_count += 1\r\n\treturn inv_count "
    },
    {
        "number": 842,
        "prompt": "Write a function to find the number which occurs for odd number of times in the given array.\ndef get_odd_occurence(arr, arr_size):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    for i in range(0, arr_size):\n        if arr[i] < 0:\n            arr[i] = arr_size ^ (-arr[i])\n\n    for i in range(0, arr_size):\n        arr[i] = arr[arr[i] % arr_size]\n\n    for i in range(0, arr_size):\n        if arr[arr[i] % arr_size] < 0:\n            arr[arr[i] % arr_size] = -arr[arr[i] % arr_size]\n        else:\n            arr[arr[i] % arr_size] = arr_size - arr[i] % arr_size\n\n    for i in range(0, arr_size):\n        if arr[i] < 0:\n            arr[arr[i] % arr_size] = -arr[arr[i] % arr_size]\n\n    for i in range(0, arr_size):\n        if arr[i] < 0:\n            arr[arr[i] % arr_size] = arr_size - arr[i] % arr_size\n\n    for i in range(0, arr_size):\n        if arr[i] != i:\n            if arr[arr[i] % arr_size] < 0:\n                arr[arr[i] % arr_size] = -arr[arr[i] % arr_size]\n            else:\n                arr[arr[i] % arr_size] = arr_size",
        "generated_testcode": "assert get_odd_occurence([1, 2, 3, 2, 4, 5, 4, 5, 3, 1, 2, 3], 8) == 4\n",
        "test": "assert get_odd_occurence([2, 3, 5, 4, 5, 2, 4, 3, 5, 2, 4, 4, 2], 13) == 5\nassert get_odd_occurence([1, 2, 3, 2, 3, 1, 3], 7) == 3\nassert get_odd_occurence([5, 7, 2, 7, 5, 2, 5], 7) == 5",
        "canonical_solution": "def get_odd_occurence(arr, arr_size):\r\n  for i in range(0, arr_size):\r\n    count = 0\r\n    for j in range(0, arr_size):\r\n      if arr[i] == arr[j]:\r\n        count += 1\r\n    if (count % 2 != 0):\r\n      return arr[i]\r\n  return -1"
    },
    {
        "number": 843,
        "prompt": "Write a function to find the nth super ugly number from a given prime list of size k using heap queue algorithm.\ndef nth_super_ugly_number(n, primes):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    # Create a heap queue and initialize it with the first prime\n    heap = [primes[0]]\n    # Initialize the indices for each prime\n    indices = [0] * len(primes)\n    # Initialize the result list with the first prime\n    result = [primes[0]]\n    # Initialize the count\n    count = 1\n    # Repeat until we find the nth ugly number\n    while count < n:\n        # Find the smallest number in the heap\n        min_val = heapq.heappop(heap)\n        # For each prime that is smaller than the smallest number, increase its index and add its value to the heap\n        for i in range(len(primes)):\n            if primes[i] == min_val:\n                indices[i] += 1\n                heapq.heappush(heap, primes[i] * primes[indices[i])\n        # Add the smallest number to the result\n        result.append(min_val)\n        # Increase the count\n        count += 1\n    # Return the nth ugly number\n    return result[n-1]\n\n# Test the function with an example\nprint(nth_super_ugly_number(12, [2, 3, 5])) # Output: 24\n\n# Complexity: O(nklogk) where k is the number of primes in the input list. We need to iterate through all the primes n times and each time we need to find the smallest one in the heap,",
        "generated_testcode": "assert nth_super_ugly_number(12, [2, 7, 13, 19]) == 32\n",
        "test": "assert nth_super_ugly_number(12,[2,7,13,19])==32\nassert nth_super_ugly_number(10,[2,7,13,19])==26\nassert nth_super_ugly_number(100,[2,7,13,19])==5408",
        "canonical_solution": "import heapq\r\ndef nth_super_ugly_number(n, primes):\r\n    uglies = [1]\r\n    def gen(prime):\r\n        for ugly in uglies:\r\n            yield ugly * prime\r\n    merged = heapq.merge(*map(gen, primes))\r\n    while len(uglies) < n:\r\n        ugly = next(merged)\r\n        if ugly != uglies[-1]:\r\n            uglies.append(ugly)\r\n    return uglies[-1]"
    },
    {
        "number": 844,
        "prompt": "Write a python function to find the kth element in an array containing odd elements first and then even elements.\ndef get_Number(n, k): \n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    odd = [i for i in range(1, n+1, 2) if i > 0]\n    even = [i for i in range(2, n+1, 2) if i > 1]\n    if k <= len(odd):\n        return odd[k-1]\n    else:\n        return even[k-len(odd)-1]\n    return -1\n\n# test the function\nn, k = 8, 3\nprint(get_Number(n, k)) ",
        "generated_testcode": "assert get_Number(5, 3) == 3\n",
        "test": "assert get_Number(8,5) == 2\nassert get_Number(7,2) == 3\nassert get_Number(5,2) == 3",
        "canonical_solution": "def get_Number(n, k): \r\n    arr = [0] * n; \r\n    i = 0; \r\n    odd = 1; \r\n    while (odd <= n):   \r\n        arr[i] = odd; \r\n        i += 1; \r\n        odd += 2;\r\n    even = 2; \r\n    while (even <= n): \r\n        arr[i] = even; \r\n        i += 1;\r\n        even += 2; \r\n    return arr[k - 1]; "
    },
    {
        "number": 845,
        "prompt": "Write a python function to count the number of digits in factorial of a given number.\ndef find_Digits(n): \n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    if n == 0: \n        return 1\n    else: \n        return n * find_Digits(n - 1)\n  \ndef count_Digits(n): \n    return len(str(find_Digits(n))\n  \nn = int(input(\"Enter a number: \") \nprint(\"Number of digits in factorial of\", n, \"is\", count_Digits(n)) ",
        "generated_testcode": "assert find_Digits(5) == 1\n",
        "test": "assert find_Digits(7) == 4\nassert find_Digits(5) == 3\nassert find_Digits(4) == 2",
        "canonical_solution": "import math \r\ndef find_Digits(n): \r\n    if (n < 0): \r\n        return 0;\r\n    if (n <= 1): \r\n        return 1; \r\n    x = ((n * math.log10(n / math.e) + math.log10(2 * math.pi * n) /2.0)); \r\n    return math.floor(x) + 1; "
    },
    {
        "number": 846,
        "prompt": "Write a function to find the minimum number of platforms required for a railway/bus station.\ndef find_platform(arr, dep, n): \n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    # Initialize result\n    platforms_required = 1\n    # Create a list to store the arrival and departure times of trains\n    platform = [[0, 0] for i in range(n)]\n    for i in range(n): \n        platform[i][0] = arr[i] \n        platform[i][1] = dep[i] \n  \n    # Sort the arrival and departure times \n    platform.sort(key = lambda x: x[0]) \n  \n    # Print the final platform required \n    for i in range(1, n): \n        if platform[i][0] <= platform[i-1][1]: \n            platforms_required += 1\n        else: \n            platform[i][1] = platform[i][0] \n  \n    return platforms_required \n  \n# Example usage: \narr = [900, 940, 950, 1100, 1500, 1800] \ndep = [910, 1200, 1120, 1130, 1900, 2000] \nn = len(arr) \nprint(\"Minimum number of platforms required = \", find_platform(arr, dep, n)) ",
        "generated_testcode": "assert find_platform(arr=[900, 940, 950, 11000, 1500, 1800], dep=[910, 1200, 11200, 11300, 1900], n=5) == 3\n",
        "test": "assert find_platform([900, 940, 950, 1100, 1500, 1800],[910, 1200, 1120, 1130, 1900, 2000],6)==3\nassert find_platform([100,200,300,400],[700,800,900,1000],4)==4\nassert find_platform([5,6,7,8],[4,3,2,1],4)==1",
        "canonical_solution": "def find_platform(arr, dep, n): \r\n    arr.sort() \r\n    dep.sort() \r\n    plat_needed = 1\r\n    result = 1\r\n    i = 1\r\n    j = 0\r\n    while (i < n and j < n): \r\n        if (arr[i] <= dep[j]):           \r\n            plat_needed+= 1\r\n            i+= 1\r\n        elif (arr[i] > dep[j]):           \r\n            plat_needed-= 1\r\n            j+= 1\r\n        if (plat_needed > result):  \r\n            result = plat_needed           \r\n    return result"
    },
    {
        "number": 847,
        "prompt": "Write a python function to copy a list from a singleton tuple.\ndef lcopy(xs):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    return list(xs)\n\nprint(lcopy(('a',)) # should return ['a']\nprint(lcopy((1,2,3)) # should return [1, 2, 3]\nprint(lcopy(('hello',)) # should return ['hello']\nprint(lcopy(()) # should return []\n\n# Test case\nprint(lcopy(('a',) == ['a']) # True\nprint(lcopy((1,2,3) == [1, 2, 3]) # True\nprint(lcopy('hello') == ['hello']) # True\nprint(lcopy([]) == []) # True\n\n# Test case for empty tuple\nprint(lcopy(()) == [] # True \n\n# Test case for single element tuple\nprint(lcopy(('a',) == ['a']) # True\n\n# Test case for multiple element tuple\nprint(lcopy((1,2,3) == [1, 2, 3]) # True ",
        "generated_testcode": "assert lcopy((1,) == [1])\n",
        "test": "assert lcopy([1, 2, 3]) == [1, 2, 3]\nassert lcopy([4, 8, 2, 10, 15, 18]) == [4, 8, 2, 10, 15, 18]\nassert lcopy([4, 5, 6]) == [4, 5, 6]\n",
        "canonical_solution": "def lcopy(xs):\n  return xs[:]\n"
    },
    {
        "number": 848,
        "prompt": "Write a function to find the area of a trapezium.\ndef area_trapezium(base1,base2,height):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    area = (base1 + base2) * height / 2\n    return area\n\n# Test the function with values\nprint(area_trapezium(10, 20, 12)) # 120.0\n\n#Write a function to find the area of a circle.\nimport math\n\ndef area_circle(radius):\n    area = math.pi * radius * radius\n    return area\n\n# Test the function with a value\nprint(area_circle(5)) # 78.5398163339744834\n\n#Write a function to find the volume of a sphere.\ndef volume_sphere(radius):\n    volume = (4/3) * math.pi * radius * radius * radius\n    return volume\n\n# Test the function with a value\nprint(volume_sphere(5)) # 523.6049193244102696\n\n#Write a function to find the surface area of a sphere.\ndef surface_area_sphere(radius):\n    surface_area = 4 * math.pi * radius * radius\n    return surface_area\n\n# Test the function with a value\nprint(surface_area_sphere(5)) # 314.1592653589793238",
        "generated_testcode": "assert area_trapezium(5, 10, 4) == 20\n",
        "test": "assert area_trapezium(6,9,4)==30\nassert area_trapezium(10,20,30)==450\nassert area_trapezium(15,25,35)==700",
        "canonical_solution": "def area_trapezium(base1,base2,height):\r\n area = 0.5 * (base1 + base2) * height\r\n return area"
    },
    {
        "number": 849,
        "prompt": "Write a python function to find sum of all prime divisors of a given number.\ndef Sum(N): \n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    sum = 0\n    i = 2\n    while(N!=0): \n        while(N%i == 0): \n            sum += i \n            N = N/i \n        i += 1 - i%2*2 \n        i = i + 1 - i%2 \n    return int(sum) \n  \n# Function to check whether a number is prime or not \ndef isPrime(n): \n    if n <= 1: \n        return False\n    for i in range(2,int(n**0.5)+1): \n        if n%i == 0: \n            return False\n    return True\n  \n# Function to find sum of all prime divisors of a number \ndef sum_of_prime_divisors(N): \n    sum = 0\n    # Traverse through all numbers from 2 to n \n    for i in range(2,N+1): \n        # Check if i is factor of N \n        if N % i == 0: \n            # Check if i is prime or not \n            if isPrime(i): \n                sum += i \n    return sum \n  \n# Driver Code \nN = int(input(\"Enter a number: \")\nprint(sum_of_prime_divisors(N)) ",
        "generated_testcode": "assert Sum(10) == 5 # 2 + 5 = 7\n",
        "test": "assert Sum(60) == 10\nassert Sum(39) == 16\nassert Sum(40) == 7",
        "canonical_solution": "def Sum(N): \r\n    SumOfPrimeDivisors = [0]*(N + 1)   \r\n    for i in range(2,N + 1) : \r\n        if (SumOfPrimeDivisors[i] == 0) : \r\n            for j in range(i,N + 1,i) : \r\n                SumOfPrimeDivisors[j] += i           \r\n    return SumOfPrimeDivisors[N] "
    },
    {
        "number": 850,
        "prompt": "Write a function to check if a triangle of positive area is possible with the given angles.\ndef is_triangleexists(a,b,c): \n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    if a+b>c and a+c>b and b+c>a:\n        return True\n    return False\nprint(is_triangleexists(50,50,50)) # True\nprint(is_triangleexists(30,70,70)) # True\nprint(is_triangleexists(40,40,100)) # False\n\n# Problem 2:\n# Write a function to calculate the square of a number using recursion\ndef square_recursive(n):\n    if n == 0:\n        return 0\n    else:\n        return n + square_recursive(n-1)\nprint(square_recursive(5)) # 15\n\n# Problem 3:\n# Write a function to calculate the factorial of a number using recursion\ndef factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)\nprint(factorial(4)) # 24\nprint(factorial(5)) # 120\n\n# Problem 4:\n# Write a function to find the nth Fibonacci number using recursion\ndef fibonacci(n):\n    if n <= 1:\n        return n\n    else:\n        return fibonacci(n-1) + fibonacci(n-2)\nprint(fibonacci(6)) # 5\nprint(fibonacci(8)) # 13\n\n# Problem 5:\n# Write a",
        "generated_testcode": "assert is_triangleexists(30, 60, 90) == True\n",
        "test": "assert is_triangleexists(50,60,70)==True\nassert is_triangleexists(90,45,45)==True\nassert is_triangleexists(150,30,70)==False",
        "canonical_solution": "def is_triangleexists(a,b,c): \r\n    if(a != 0 and b != 0 and c != 0 and (a + b + c)== 180): \r\n        if((a + b)>= c or (b + c)>= a or (a + c)>= b): \r\n            return True \r\n        else:\r\n            return False\r\n    else:\r\n        return False"
    },
    {
        "number": 851,
        "prompt": "Write a python function to find sum of inverse of divisors.\ndef Sum_of_Inverse_Divisors(N,Sum): \n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    for i in range(1,N+1): \n        if N%i==0: \n            Sum+=1/i \n    return Sum \n  \n#Test the function \nN=int(input(\"Enter a number: \")) \nSum=0\nprint(\"Sum of Inverse of divisors of\",N,\"is\",Sum_of_Inverse_Divisors(N,Sum)) ",
        "generated_testcode": "assert Sum_of_Inverse_Divisors(12,0) == 10\n",
        "test": "assert Sum_of_Inverse_Divisors(6,12) == 2\nassert Sum_of_Inverse_Divisors(9,13) == 1.44\nassert Sum_of_Inverse_Divisors(1,4) == 4",
        "canonical_solution": "def Sum_of_Inverse_Divisors(N,Sum): \r\n    ans = float(Sum)*1.0 /float(N);  \r\n    return round(ans,2); "
    },
    {
        "number": 852,
        "prompt": "Write a python function to remove negative numbers from a list.\ndef remove_negs(num_list): \n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    return [x for x in num_list if x >= 0]\n\n#Example usage: \nprint(remove_negs([1, -5, 3, 2, -10, 8, 0, -3, 6])) # Output: [1, 3, 2, 8, 0, 6]\n\n# Time Complexity: O(n)\n# Space Complexity: O(n)\n\n# Another way to solve the same problem using filter()\ndef remove_negs_using_filter(num_list):\n    return list(filter(lambda x: x >= 0, num_list))\n\n# Example usage: \nprint(remove_negs_using_filter([1, -5, 3, 2, -10, 8, 0, -3, 6])) # Output: [1, 3, 2, 8, 0, 6] ",
        "generated_testcode": "assert remove_negs([1, 2, -3, 4, -5, 6, -7, 8]) == [1, 2, 4, 6, 8]\n",
        "test": "assert remove_negs([1,-2,3,-4]) == [1,3]\nassert remove_negs([1,2,3,-4]) == [1,2,3]\nassert remove_negs([4,5,-6,7,-8]) == [4,5,7]",
        "canonical_solution": "def remove_negs(num_list): \r\n    for item in num_list: \r\n        if item < 0: \r\n           num_list.remove(item) \r\n    return num_list"
    },
    {
        "number": 853,
        "prompt": "Write a python function to find sum of odd factors of a number.\ndef sum_of_odd_Factors(n): \n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    sum = 0\n    for i in range(1,n+1): \n        if n % i == 0: \n            sum += i \n    return sum \n\nn = int(input(\"Enter a number: \"))\nprint(\"Sum of odd factors of\",n,\"is\",sum_of_odd_Factors(n)) ",
        "generated_testcode": "assert sum_of_odd_Factors(12) == 5 # 3 + 5 = 8\n",
        "test": "assert sum_of_odd_Factors(30) == 24\nassert sum_of_odd_Factors(18) == 13\nassert sum_of_odd_Factors(2) == 1",
        "canonical_solution": "import math\r\ndef sum_of_odd_Factors(n): \r\n    res = 1\r\n    while n % 2 == 0: \r\n        n = n // 2 \r\n    for i in range(3,int(math.sqrt(n) + 1)): \r\n        count = 0\r\n        curr_sum = 1\r\n        curr_term = 1\r\n        while n % i == 0: \r\n            count+=1 \r\n            n = n // i \r\n            curr_term *= i \r\n            curr_sum += curr_term    \r\n        res *= curr_sum  \r\n    if n >= 2: \r\n        res *= (1 + n) \r\n    return res "
    },
    {
        "number": 854,
        "prompt": "Write a function which accepts an arbitrary list and converts it to a heap using heap queue algorithm.\ndef raw_heap(rawheap):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    heap = []\n    for i in range(len(rawheap) // 2, -1, -1):\n        heapify(rawheap, i)\n    return rawheap\n\ndef heapify(rawheap, i):\n    l = 2 * i + 1\n    r = 2 * i + 2\n    largest = i\n    if l < len(rawheap) and rawheap[l] > rawheap[largest]:\n        largest = l\n    if r < len(rawheap) and rawheap[r] > rawheap[largest]:\n        largest = r\n    if largest != i:\n        rawheap[i], rawheap[largest] = rawheap[largest], rawheap[i]\n        heapify(rawheap, largest)\n\n# Test the function\nrawlist = [4, 1, 3, 2, 1, 7, 6, 5, 9, 8]\nheap = raw_heap(rawlist)\nprint(heap) #[9, 8, 7, 1, 6, 1, 5, 4, 3, 2]\n",
        "generated_testcode": "assert raw_heap(rawheap) == heap\n\n# Test the function with an example\nrawheap = [4, 10, 3, 5, 1, 1, 8, 7, 6, 2, 9, 12, 11]\nheap = [12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 1, 2, 1]\n",
        "test": "assert raw_heap([25, 44, 68, 21, 39, 23, 89])==[21, 25, 23, 44, 39, 68, 89]\nassert raw_heap([25, 35, 22, 85, 14, 65, 75, 25, 58])== [14, 25, 22, 25, 35, 65, 75, 85, 58]\nassert raw_heap([4, 5, 6, 2])==[2, 4, 6, 5]",
        "canonical_solution": "import heapq as hq\r\ndef raw_heap(rawheap):\r\n  hq.heapify(rawheap)\r\n  return rawheap"
    },
    {
        "number": 855,
        "prompt": "Write a python function to check for even parity of a given number.\ndef check_Even_Parity(x): \n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    return x % 2 == 0\n\n# Test the function with some examples\nprint(check_Even_Parity(10)) # Output: True\nprint(check_Even_Parity(11)) # Output: False\nprint(check_Even_Parity(0)) # Output: True\n\n# You can also use bitwise operators to check for even parity\ndef check_Even_Parity(x):\n    return (x & 1) == 0\n\n# Test the function with some examples\nprint(check_Even_Parity(10)) # Output: True\nprint(check_Even_Parity(11)) # Output: False\nprint(check_Even_Parity(0)) # Output: True\n\n# Another way to check for even parity is to check the last bit of the binary representation of the number\ndef check_Even_Parity(x):\n    return bin(x)[-1] == '0'\n\n# Test the function with some examples\nprint(check_Even_Parity(10)) # Output: True\nprint(check_Even_Parity(11)) # Output: False\nprint(check_Even_Parity(0)) # Output: True\n",
        "generated_testcode": "assert check_Even_Parity(10) == True\n",
        "test": "assert check_Even_Parity(10) == True\nassert check_Even_Parity(11) == False\nassert check_Even_Parity(18) == True",
        "canonical_solution": "def check_Even_Parity(x): \r\n    parity = 0\r\n    while (x != 0): \r\n        x = x & (x - 1) \r\n        parity += 1\r\n    if (parity % 2 == 0): \r\n        return True\r\n    else: \r\n        return False"
    },
    {
        "number": 856,
        "prompt": "Write a python function to find minimum adjacent swaps required to sort binary array.\ndef find_Min_Swaps(arr,n) : \n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    arr.sort() \n    i = 0\n    ans = 0\n    while i < n : \n        if arr[i] != i : \n            index = arr.index(i) \n            arr[i],arr[index] = arr[index],arr[i] \n            ans += 1\n            arr[i+1:index+1] = reversed(arr[i+1:index+1]) \n        i += 1\n    return ans \n\n#test the function \narr = [1, 2, 3, 4, 5, 6, 7] \nn = len(arr) \nprint(\"Minimum adjacent swaps required to sort the array is\", find_Min_Swaps(arr, n)) ",
        "generated_testcode": "assert find_Min_Swaps([1,0,0,1,1,1,0,1,0,0,1,1,1],9) == 2\n",
        "test": "assert find_Min_Swaps([1,0,1,0],4) == 3\nassert find_Min_Swaps([0,1,0],3) == 1\nassert find_Min_Swaps([0,0,1,1,0],5) == 2",
        "canonical_solution": "def find_Min_Swaps(arr,n) : \r\n    noOfZeroes = [0] * n \r\n    count = 0 \r\n    noOfZeroes[n - 1] = 1 - arr[n - 1] \r\n    for i in range(n-2,-1,-1) : \r\n        noOfZeroes[i] = noOfZeroes[i + 1] \r\n        if (arr[i] == 0) : \r\n            noOfZeroes[i] = noOfZeroes[i] + 1\r\n    for i in range(0,n) : \r\n        if (arr[i] == 1) : \r\n            count = count + noOfZeroes[i] \r\n    return count "
    },
    {
        "number": 857,
        "prompt": "Write a function to list out the list of given strings individually using map function.\ndef listify_list(list1):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": true,
        "answer": "    return list(map(str, list1))\n\n\n# Test Cases\nprint(listify_list([\"Hello\", \"world\", \"how\", \"are\", \"you\"]))  # Output: ['Hello', 'world', 'how', 'are', 'you']\nprint(listify_list([1, 2, 3, 4, 5]))  # Output: ['1', '2', '3', '4', '5']\nprint(listify_list([\"apple\", \"banana\", \"cherry\", \"date\", \"elderberry\"]))  # Output: ['apple', 'banana', 'cherry', 'date', 'elderberry']\nprint(listify_list([True, False, True, False]))  # Output: ['True', 'False', 'True', 'False']\nprint(listify_list([\"a\", \"b\", \"c\", \"d\", \"e\"]) == ['a', 'b', 'c', 'd', 'e'])  # Output: True ",
        "generated_testcode": "assert listify_list(['hello', 'world', 'python']) == ['hello', 'world', 'python']\n",
        "test": "assert listify_list(['Red', 'Blue', 'Black', 'White', 'Pink'])==[['R', 'e', 'd'], ['B', 'l', 'u', 'e'], ['B', 'l', 'a', 'c', 'k'], ['W', 'h', 'i', 't', 'e'], ['P', 'i', 'n', 'k']]\nassert listify_list(['python'])==[['p', 'y', 't', 'h', 'o', 'n']]\nassert listify_list([' red ', 'green',' black', 'blue ',' orange', 'brown'])==[[' ', 'r', 'e', 'd', ' '], ['g', 'r', 'e', 'e', 'n'], [' ', 'b', 'l', 'a', 'c', 'k'], ['b', 'l', 'u', 'e', ' '], [' ', 'o', 'r', 'a', 'n', 'g', 'e'], ['b', 'r', 'o', 'w', 'n']]",
        "canonical_solution": "def listify_list(list1):\r\n  result = list(map(list,list1)) \r\n  return result "
    },
    {
        "number": 858,
        "prompt": "Write a function to count number of lists in a given list of lists and square the count.\ndef count_list(input_list): \n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    count = 0\n    for i in input_list: \n        if type(i) == list: \n            count += 1\n            count += count_list(i)\n    return count ** 2\n\n# Test the function with the example given \nprint(count_list([1, 2, [3, 4], [5, [6, 7], 8]]) # Output: 16 ",
        "generated_testcode": "assert count_list([1, 2, 3]) == 1\n",
        "test": "assert count_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==25\nassert count_list([[1, 3], [5, 7], [9, 11], [13, 15, 17]] )==16\nassert count_list([[2, 4], [[6,8], [4,5,8]], [10, 12, 14]])==9",
        "canonical_solution": "def count_list(input_list): \r\n    return (len(input_list))**2"
    },
    {
        "number": 859,
        "prompt": "Write a function to generate all sublists of a given list.\ndef sub_lists(my_list):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    result = []\n    for i in range(len(my_list) + 1):\n        for j in range(i + 1, len(my_list) + 1):\n            result.append(my_list[i:j])\n    return result\n\n# Test the function with a sample list\nmy_list = [1, 2, 3, 4]\nprint(sub_lists(my_list))\n\n# Output: [[], [1], [2], [1, 2], [3], [1, 2, 3], [2, 3], [1, 2, 3, 4], [3, 4], [1, 3], [1, 2, 3, 4], [2, 4], [1, 3, 4], [1, 2, 4], [2, 3, 4], [1, 2, 3, 4]]\n# Note: [] represents an empty list\n\n# The function generates all possible sublists of the given list, including the empty sublist and the whole list. \n# It does so by using two nested loops. The outer loop selects the starting index and the inner loop selects the ending index. \n# The slice operation is used to extract the sublist from the starting and ending indices. The resulting sublist is then appended to the result list. ",
        "generated_testcode": "assert sub_lists([1, 2, 3]) == [[], [1], [2], [1, 2], [3], [1, 3], [2, 3], [1, 2, 3]]\n",
        "test": "assert sub_lists([10, 20, 30, 40])==[[], [10], [20], [30], [40], [10, 20], [10, 30], [10, 40], [20, 30], [20, 40], [30, 40], [10, 20, 30], [10, 20, 40], [10, 30, 40], [20, 30, 40], [10, 20, 30, 40]]\nassert sub_lists(['X', 'Y', 'Z'])==[[], ['X'], ['Y'], ['Z'], ['X', 'Y'], ['X', 'Z'], ['Y', 'Z'], ['X', 'Y', 'Z']]\nassert sub_lists([1,2,3])==[[],[1],[2],[3],[1,2],[1,3],[2,3],[1,2,3]]",
        "canonical_solution": "from itertools import combinations\r\ndef sub_lists(my_list):\r\n\tsubs = []\r\n\tfor i in range(0, len(my_list)+1):\r\n\t  temp = [list(x) for x in combinations(my_list, i)]\r\n\t  if len(temp)>0:\r\n\t    subs.extend(temp)\r\n\treturn subs"
    },
    {
        "number": 860,
        "prompt": "Write a function to check whether the given string is ending with only alphanumeric characters or not using regex.\ndef check_alphanumeric(string): \n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    if string.endswith(string[-1].isalnum()):\n        return True\n    else:\n        return False\n\n# Test the function with some examples\nprint(check_alphanumeric(\"hello123\")) # True\nprint(check_alphanumeric(\"hello123 \")) # False\nprint(check_alphanumeric(\"hello123@\")) # False ",
        "generated_testcode": "assert check_alphanumeric(\"hello123\") == True\n",
        "test": "assert check_alphanumeric(\"dawood@\") == 'Discard'\nassert check_alphanumeric(\"skdmsam326\") == 'Accept'\nassert check_alphanumeric(\"cooltricks@\") == 'Discard'",
        "canonical_solution": "import re \r\nregex = '[a-zA-z0-9]$'\r\ndef check_alphanumeric(string): \r\n\tif(re.search(regex, string)): \r\n\t\treturn (\"Accept\") \r\n\telse: \r\n\t\treturn (\"Discard\") "
    },
    {
        "number": 861,
        "prompt": "Write a function to find all anagrams of a string in a given list of strings using lambda function.\ndef anagram_lambda(texts,str):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    if len(str) == 0:\n        return []\n    anagrams = filter(lambda x: sorted(str) == sorted(x), texts)\n    return list(anagrams)\n\n# Test\nprint(anagram_lambda([\"listen\",\"silent\",\"enlist\",\"apple\",\"pleap\",\"palette\"],\"silent\")) # ['listen', 'silent']\nprint(anagram_lambda([\"listen\",\"silent\",\"enlist\",\"apple\",\"pleap\",\"palette\"],\"elbow\")) # []\nprint(anagram_lambda([\"listen\",\"silent\",\"enlist\",\"apple\",\"pleap\",\"palette\"],\"leppa\")) # ['pleap']\n\n# Output: ['listen', 'silent']\n# Output: []\n# Output: ['pleap'] ",
        "generated_testcode": "assert anagram_lambda([\"listen\",\"silent\",\"enlist\",\"evil\",\"evil\",\"sublest\"],\"liste\") == [\"listen\",\"silent\",\"enlist\"]\n",
        "test": "assert anagram_lambda([\"bcda\", \"abce\", \"cbda\", \"cbea\", \"adcb\"],\"abcd\")==['bcda', 'cbda', 'adcb']\nassert anagram_lambda([\"recitals\",\" python\"], \"articles\" )==[\"recitals\"]\nassert anagram_lambda([\" keep\",\" abcdef\",\" xyz\"],\" peek\")==[\" keep\"]",
        "canonical_solution": "from collections import Counter \r\ndef anagram_lambda(texts,str):\r\n  result = list(filter(lambda x: (Counter(str) == Counter(x)), texts)) \r\n  return result"
    },
    {
        "number": 862,
        "prompt": "Write a function to find the occurrences of n most common words in a given text.\ndef n_common_words(text,n):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    text=text.lower().split()\n    word_dict = {}\n    for word in text:\n        if word in word_dict:\n            word_dict[word] += 1\n        else:\n            word_dict[word] = 1\n    sorted_dict = sorted(word_dict.items(), key=lambda x: x[1], reverse=True)\n    common_words = []\n    for i in range(n):\n        common_words.append(sorted_dict[i][0])\n    return common_words\n\n# Example usage:\ntext = \"The quick brown fox jumps over the lazy dog. The dog is lazy but the cat is quick.\"\nprint(n_common_words(text,3)) # should output ['the', 'is', 'quick']\ntext = \"Hello world. Hello world, how are you. I am doing fine. I am also fine. Fine, thank you.\"\nprint(n_common_words(text,2)) # should output ['hello', 'am'] ",
        "generated_testcode": "assert n_common_words(\"This is a sample text with some words repeated. This is another sentence with some repeated words. This is the third sentence.\", 3) == ['this', 'is', 'with']\n",
        "test": "assert n_common_words(\"python is a programming language\",1)==[('python', 1)]\nassert n_common_words(\"python is a programming language\",1)==[('python', 1)]\nassert n_common_words(\"python is a programming language\",5)==[('python', 1),('is', 1), ('a', 1), ('programming', 1), ('language', 1)]",
        "canonical_solution": "from collections import Counter\r\nimport re\r\ndef n_common_words(text,n):\r\n  words = re.findall('\\w+',text)\r\n  n_common_words= Counter(words).most_common(n)\r\n  return list(n_common_words)"
    },
    {
        "number": 863,
        "prompt": "Write a function to find the length of the longest sub-sequence such that elements in the subsequences are consecutive integers.\ndef find_longest_conseq_subseq(arr, n): \n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    arr.sort() \n    max_length = 1\n    end = 1\n    start = 0\n    for i in range(1, n): \n        if arr[i] == arr[i - 1] + 1: \n            end += 1\n        else: \n            if end - start > max_length: \n                max_length = end - start \n            start = i \n            end = i + 1\n        if i == n - 1 and end - start > max_length: \n            max_length = end - start \n    return max_length \n\nif __name__ == \"__main__\": \n    arr = [ 2, 9, 3, 10, 4, 5, 6, 7, 8, 1, 11] \n    n = len(arr) \n    print(\"Length of the longest consecutive subsequence is\", find_longest_conseq_subseq(arr, n)) ",
        "generated_testcode": "assert find_longest_conseq_subseq([1, 9, 3, 10, 4, 5, 6, 7, 8, 2, 1], 8) == 4\n",
        "test": "assert find_longest_conseq_subseq([1, 2, 2, 3], 4) == 3\nassert find_longest_conseq_subseq([1, 9, 3, 10, 4, 20, 2], 7) == 4\nassert find_longest_conseq_subseq([36, 41, 56, 35, 44, 33, 34, 92, 43, 32, 42], 11) == 5",
        "canonical_solution": "def find_longest_conseq_subseq(arr, n): \r\n\tans = 0\r\n\tcount = 0\r\n\tarr.sort() \r\n\tv = [] \r\n\tv.append(arr[0]) \r\n\tfor i in range(1, n): \r\n\t\tif (arr[i] != arr[i - 1]): \r\n\t\t\tv.append(arr[i]) \r\n\tfor i in range(len(v)): \r\n\t\tif (i > 0 and v[i] == v[i - 1] + 1): \r\n\t\t\tcount += 1\r\n\t\telse: \r\n\t\t\tcount = 1\r\n\t\tans = max(ans, count) \r\n\treturn ans "
    },
    {
        "number": 864,
        "prompt": "Write a function to find palindromes in a given list of strings using lambda function.\ndef palindrome_lambda(texts):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": true,
        "answer": "    return list(filter(lambda x: x == x[::-1], texts))\n\n# Example usage:\nprint(palindrome_lambda(['racecar', 'hello', 'stats', 'civic', 'deified', 'tenet'])) # ['racecar', 'civic', 'deified']\n\n# Output: ['racecar', 'civic', 'deified']\n\n# A palindrome is a word, phrase, number, or sequence of characters that reads the same backward as forward, such as \"racecar\" or \"deified\". \n# Write a lambda function that takes a list of strings as input and returns a list of all palindromes in the list. ",
        "generated_testcode": "assert palindrome_lambda([\"racecar\", \"level\", \"deified\", \"civic\", \"hello\"]) == [\"racecar\", \"level\", \"deified\", \"civic\"]\n",
        "test": "assert palindrome_lambda([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"])==['php', 'aaa']\nassert palindrome_lambda([\"abcd\", \"Python\", \"abba\", \"aba\"])==['abba', 'aba']\nassert palindrome_lambda([\"abcd\", \"abbccbba\", \"abba\", \"aba\"])==['abbccbba', 'abba', 'aba']",
        "canonical_solution": "def palindrome_lambda(texts):\r\n  result = list(filter(lambda x: (x == \"\".join(reversed(x))), texts))\r\n  return result"
    },
    {
        "number": 865,
        "prompt": "Write a function to print n-times a list using map function.\ndef ntimes_list(nums,n):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    return list(map(lambda x: x*n, nums) )\n\nprint(ntimes_list([1,2,3,4,5],3))\n#Output: [3,6,9,12]\n\n#Write a function to calculate the sum of a list using map and reduce.\nfrom functools import reduce\ndef list_sum(nums):\n    return reduce(lambda x,y: x+y, map(lambda x: x, nums))\n\nprint(list_sum([1,2,3,4,5]))\n#Output: 10\n\n#Write a function to filter the even numbers from a list using filter function.\ndef even_nums(nums):\n    return list(filter(lambda x: x%2==0, nums))\n\nprint(even_nums([1,2,3,4,5,6,7,8]))\n#Output: [2, 4, 6, 8] ",
        "generated_testcode": "assert ntimes_list([1,2,3],3) == [1,2,3,1,2,3,1,2,3]\n",
        "test": "assert ntimes_list([1, 2, 3, 4, 5, 6, 7],3)==[3, 6, 9, 12, 15, 18, 21]\nassert ntimes_list([1, 2, 3, 4, 5, 6, 7],4)==[4, 8, 12, 16, 20, 24, 28]\nassert ntimes_list([1, 2, 3, 4, 5, 6, 7],10)==[10, 20, 30, 40, 50, 60, 70]",
        "canonical_solution": "def ntimes_list(nums,n):\r\n    result = map(lambda x:n*x, nums) \r\n    return list(result)"
    },
    {
        "number": 866,
        "prompt": "Write a function to check whether the given month name contains 31 days or not.\ndef check_monthnumb(monthname2):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": true,
        "answer": "    months = {\n        \"January\": 31,\n        \"February\": 28,\n        \"March\": 31,\n        \"April\": 30,\n        \"May\": 31,\n        \"June\": 30,\n        \"July\": 31,\n        \"August\": 31,\n        \"September\": 30,\n        \"October\": 31,\n        \"November\": 30,\n        \"December\": 31\n    }\n    if monthname2 in months:\n        return True\n    else:\n        return False\n\n# Test the function\nprint(check_monthnumb(\"March\"))  # Output: True\nprint(check_monthnumb(\"February\"))  # Output: True\nprint(check_monthnumb(\"May\"))  # Output: True\nprint(check_monthnumb(\"December\"))  # Output: True\nprint(check_monthnumb(\"January\"))  # Output: True\nprint(check_monthnumb(\"Random\"))  # Output: False\n\n# Function to check if a number is prime or not\ndef check_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\n# Test the function\nprint(check_prime(7))  # Output: True\nprint",
        "generated_testcode": "assert check_monthnumb(\"January\") == True\n",
        "test": "assert check_monthnumb(\"February\")==False\nassert check_monthnumb(\"January\")==True\nassert check_monthnumb(\"March\")==True",
        "canonical_solution": "def check_monthnumb(monthname2):\r\n  if(monthname2==\"January\" or monthname2==\"March\"or monthname2==\"May\" or monthname2==\"July\" or monthname2==\"Augest\" or monthname2==\"October\" or monthname2==\"December\"):\r\n    return True\r\n  else:\r\n    return False"
    },
    {
        "number": 867,
        "prompt": "Write a python function to add a minimum number such that the sum of array becomes even.\ndef min_Num(arr,n):  \n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": true,
        "answer": "    # Initialize the sum of the array\n    sum = 0\n    for i in range(n):\n        sum = sum + arr[i]\n    # If sum is even then return 0\n    if(sum%2==0):\n        return 0\n    else:\n        # If sum is odd, add the minimum element of the array to the sum to make it even\n        min_val = arr[0]\n        for i in range(1,n):\n            if(arr[i]<min_val):\n                min_val = arr[i]\n        return min_val\n\n# Test the function\narr = [1,3,5,2,6,8,7]\nn = len(arr)\nprint(\"Minimum number to add:\",min_Num(arr,n))\n",
        "generated_testcode": "assert min_Num([1,3,5,7],3) == 1\n",
        "test": "assert min_Num([1,2,3,4,5,6,7,8,9],9) == 1\nassert min_Num([1,2,3,4,5,6,7,8],8) == 2\nassert min_Num([1,2,3],3) == 2",
        "canonical_solution": "def min_Num(arr,n):  \r\n    odd = 0\r\n    for i in range(n): \r\n        if (arr[i] % 2): \r\n            odd += 1 \r\n    if (odd % 2): \r\n        return 1\r\n    return 2"
    },
    {
        "number": 868,
        "prompt": "Write a python function to find the length of the last word in a given string.\ndef length_Of_Last_Word(a): \n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    # Split the string on spaces and store it in a list\n    words = a.split()\n    # Get the last element from the list\n    last_word = words[-1]\n    # Return the length of the last word\n    return len(last_word)\n\n# Example usage:\nstring = \"Hello world\"\nprint(length_Of_Last_Word(string)) # Output: 5\nstring = \"Python is awesome\"\nprint(length_Of_Last_Word(string)) # Output: 6 ",
        "generated_testcode": "assert length_Of_Last_Word(\"Hello World\") == 5\n",
        "test": "assert length_Of_Last_Word(\"python language\") == 8\nassert length_Of_Last_Word(\"PHP\") == 3\nassert length_Of_Last_Word(\"\") == 0",
        "canonical_solution": "def length_Of_Last_Word(a): \r\n    l = 0\r\n    x = a.strip() \r\n    for i in range(len(x)): \r\n        if x[i] == \" \": \r\n            l = 0\r\n        else: \r\n            l += 1\r\n    return l "
    },
    {
        "number": 869,
        "prompt": "Write a function to remove sublists from a given list of lists, which are outside a given range.\ndef remove_list_range(list1, leftrange, rigthrange):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    return [list(filter(lambda x: leftrange <= len(x) <= rigthrange, list1))\n\n# Example usage:\nlist1 = [[1, 2], [2, 3], [1, 2, 3], [4, 5], [6]]\nleftrange = 2\nrigthrange = 3\nprint(remove_list_range(list1, leftrange, rigthrange)) # Output: [[1, 2, 3], [4, 5]]\n\n# Example usage 2:\nlist2 = [[1, 2], [2, 3], [4, 5, 6, 7], [6], [7, 8], [9, 10, 11, 12], [13, 14], [15]]\nleftrange = 2\nrigthrange = 4\nprint(remove_list_range(list2, leftrange, rigthrange)) # Output: [[2, 3], [4, 5, 6, 7], [6], [7, 8], [9, 10, 11, 12], [13, 14]] ",
        "generated_testcode": "assert remove_list_range(list1, 2, 5) == [['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'], ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z']]\n",
        "test": "assert remove_list_range([[2], [0], [1, 2, 3], [0, 1, 2, 3, 6, 7], [9, 11], [13, 14, 15, 17]],13,17)==[[13, 14, 15, 17]]\nassert remove_list_range([[2], [0], [1, 2, 3], [0, 1, 2, 3, 6, 7], [9, 11], [13, 14, 15, 17]],1,3)==[[2], [1, 2, 3]]\nassert remove_list_range([[2], [0], [1, 2, 3], [0, 1, 2, 3, 6, 7], [9, 11], [13, 14, 15, 17]],0,7)==[[2], [0], [1, 2, 3], [0, 1, 2, 3, 6, 7]]",
        "canonical_solution": "def remove_list_range(list1, leftrange, rigthrange):\r\n   result = [i for i in list1 if (min(i)>=leftrange and max(i)<=rigthrange)]\r\n   return result"
    },
    {
        "number": 870,
        "prompt": "Write a function to calculate the sum of the positive numbers of a given list of numbers using lambda function.\ndef sum_positivenum(nums):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    return sum(filter(lambda x: x > 0, nums) if nums else 0\n\n# Test the function with an example\nprint(sum_positivenum([-1, 2, 3, 4, 5, 6, -7, 8, 9])) # Should print 24\n\n# Test the function with an empty list\nprint(sum_positivenum([])) # Should print 0\n\n# Test the function with a list of negative numbers\nprint(sum_positivenum([-1, -2, -3, -4, -5]) # Should print 0 ",
        "generated_testcode": "assert sum_positivenum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 55\n",
        "test": "assert sum_positivenum([2, 4, -6, -9, 11, -12, 14, -5, 17])==48\nassert sum_positivenum([10,15,-14,13,-18,12,-20])==50\nassert sum_positivenum([19, -65, 57, 39, 152,-639, 121, 44, 90, -190])==522",
        "canonical_solution": "def sum_positivenum(nums):\r\n  sum_positivenum = list(filter(lambda nums:nums>0,nums))\r\n  return sum(sum_positivenum)"
    },
    {
        "number": 871,
        "prompt": "Write a python function to check whether the given strings are rotations of each other or not.\ndef are_Rotations(string1,string2): \n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    if len(string1) != len(string2): \n        return False\n    concat_string = string1 + string1 \n    return string2 in concat_string \n  \nstring1 = \"AACD\"\nstring2 = \"ACDA\"\nif are_Rotations(string1, string2): \n    print(\"The two strings are rotations of each other\") \nelse: \n    print(\"The two strings are not rotations of each other\") \n  \n# This will output: The two strings are rotations of each other\n  \nstring1 = \"AACD\"\nstring2 = \"ACDB\"\nif are_Rotations(string1, string2): \n    print(\"The two strings are rotations of each other\") \nelse: \n    print(\"The two strings are not rotations of each other\") \n  \n# This will output: The two strings are not rotations of each other ",
        "generated_testcode": "assert are_Rotations(\"hello\",\"llohe\") == True\n",
        "test": "assert are_Rotations(\"abc\",\"cba\") == False\nassert are_Rotations(\"abcd\",\"cdba\") == False\nassert are_Rotations(\"abacd\",\"cdaba\") == True",
        "canonical_solution": "def are_Rotations(string1,string2): \r\n    size1 = len(string1) \r\n    size2 = len(string2) \r\n    temp = '' \r\n    if size1 != size2: \r\n        return False\r\n    temp = string1 + string1 \r\n    if (temp.count(string2)> 0): \r\n        return True\r\n    else: \r\n        return False"
    },
    {
        "number": 872,
        "prompt": "Write a function to check if a nested list is a subset of another nested list.\ndef check_subset(list1,list2): \n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    if len(list1) > len(list2): \n        return False \n    for i in range(len(list2)-len(list1)+1): \n        if list1 == list2[i:i+len(list1)]: \n            return True \n    return False \n  \n# Test the function \nlist1 = [1, [2, 3], 4] \nlist2 = [1, 2, [3, 4], 5, [6, 7], 4] \nprint(check_subset(list1,list2)) # Output: True ",
        "generated_testcode": "assert check_subset([1,2,3],[1,2,3,4,5]) == True\n",
        "test": "assert check_subset([[1, 3], [5, 7], [9, 11], [13, 15, 17]] ,[[1, 3],[13,15,17]])==True\nassert check_subset([[1, 2], [2, 3], [3, 4], [5, 6]],[[3, 4], [5, 6]])==True\nassert check_subset([[[1, 2], [2, 3]], [[3, 4], [5, 7]]],[[[3, 4], [5, 6]]])==False",
        "canonical_solution": "def check_subset(list1,list2): \r\n    return all(map(list1.__contains__,list2)) "
    },
    {
        "number": 873,
        "prompt": "Write a function to solve the fibonacci sequence using recursion.\ndef fibonacci(n):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    if n <= 1:\n        return n\n    else:\n        return fibonacci(n-1) + fibonacci(n-2)\n\nprint(fibonacci(7))  # 13\n\n# Output: 13\n\n# Testing with n=0, n=1, n=2, n=3, n=4, n=5, n=6, n=7, n=8, n=9, n=10\nprint(fibonacci(0))  # 0\nprint(fibonacci(1))  # 1\nprint(fibonacci(2))  # 1\nprint(fibonacci(3))  # 2\nprint(fibonacci(4))  # 3\nprint(fibonacci(5))  # 5\nprint(fibonacci(6))  # 8\nprint(fibonacci(7))  # 13\nprint(fibonacci(8))  # 21\nprint(fibonacci(9))  # 34\nprint(fibonacci(10)) # 55\n\n# The sequence of Fibonacci numbers starts with 0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, ...\n# The next number in the sequence is found by adding the",
        "generated_testcode": "assert fibonacci(0) == 0\n",
        "test": "assert fibonacci(7) == 13\nassert fibonacci(8) == 21\nassert fibonacci(9) == 34",
        "canonical_solution": "def fibonacci(n):\r\n  if n == 1 or n == 2:\r\n    return 1\r\n  else:\r\n    return (fibonacci(n - 1) + (fibonacci(n - 2)))"
    },
    {
        "number": 874,
        "prompt": "Write a python function to check if the string is a concatenation of another string.\ndef check_Concat(str1,str2):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    if len(str1) != len(str2):\n        return False\n    str1 = sorted(str1)\n    str2 = sorted(str2)\n    str1 = ''.join(str1)\n    str2 = ''.join(str2)\n    if str1 in str2:\n        return True\n    else:\n        return False\n\nstr1 = input(\"Enter the string 1: \")\nstr2 = input(\"Enter the string 2: \")\nprint(check_Concat(str1,str2))\n\n#Example\n#Input\n#Enter the string 1: hello\n#Enter the string 2: lohel\n#Output\n#True\n\n#Input\n#Enter the string 1: hello\n#Enter the string 2: world\n#Output\n#False\n\n#Time complexity: O(nlogn)\n#Space complexity: O(n) ",
        "generated_testcode": "assert check_Concat(\"hello\",\"lo\") == True\n",
        "test": "assert check_Concat(\"abcabcabc\",\"abc\") == True\nassert check_Concat(\"abcab\",\"abc\") == False\nassert check_Concat(\"aba\",\"ab\") == False",
        "canonical_solution": "def check_Concat(str1,str2):\r\n    N = len(str1)\r\n    M = len(str2)\r\n    if (N % M != 0):\r\n        return False\r\n    for i in range(N):\r\n        if (str1[i] != str2[i % M]):\r\n            return False         \r\n    return True"
    },
    {
        "number": 875,
        "prompt": "Write a function to find the minimum difference in the tuple pairs of given tuples.\ndef min_difference(test_list):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    min_diff = float('inf')\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            diff = abs(test_list[i][0] - test_list[j][0])\n            if diff < min_diff:\n                min_diff = diff\n    return min_diff\n\n\n# Example usage:\ntest_list = [(1, 3), (2, 5), (8, 9), (10, 12)]\nprint(min_difference(test_list))  # Output: 2\n\n# This will return the minimum difference between any two elements in the tuple. ",
        "generated_testcode": "assert min_difference([(1, 4, 2, 5, 8, 9]) == 1\n",
        "test": "assert min_difference([(3, 5), (1, 7), (10, 3), (1, 2)]) == 1\nassert min_difference([(4, 6), (12, 8), (11, 4), (2, 13)]) == 2\nassert min_difference([(5, 17), (3, 9), (12, 5), (3, 24)]) == 6",
        "canonical_solution": "def min_difference(test_list):\r\n  temp = [abs(b - a) for a, b in test_list]\r\n  res = min(temp)\r\n  return (res) "
    },
    {
        "number": 876,
        "prompt": "Write a python function to find lcm of two positive integers.\ndef lcm(x, y):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    if x > y:\n        greater = x\n    else:\n        greater = y\n\n    while True:\n        if (greater % x == 0) and (greater % y == 0):\n            lcm = greater\n            break\n        greater += 1\n\n    return lcm\n\n\n# Test the function\nprint(lcm(12, 15))  # Output: 60\nprint(lcm(14, 21))  # Output: 42\nprint(lcm(19, 23))  # Output: 366\nprint(lcm(27, 35))  # Output: 315\nprint(lcm(31, 44))  # Output: 1326\nprint(lcm(7, 11))  # Output: 77\nprint(lcm(5, 14))  # Output: 70\n\n# Output: 70\n\n# Test the function with negative input\n# print(lcm(-5, 10))  # Output: \"Both numbers must be positive\"\n# print(lcm(5, -10))  # Output: \"Both numbers must be positive\"\n# print(lcm(-5, -10))  # Output: \"Both numbers must be positive\"\n",
        "generated_testcode": "assert lcm(12, 15) == 30\n",
        "test": "assert lcm(4,6) == 12\nassert lcm(15,17) == 255\nassert lcm(2,6) == 6",
        "canonical_solution": "def lcm(x, y):\r\n   if x > y:\r\n       z = x\r\n   else:\r\n       z = y\r\n   while(True):\r\n       if((z % x == 0) and (z % y == 0)):\r\n           lcm = z\r\n           break\r\n       z += 1\r\n   return lcm"
    },
    {
        "number": 877,
        "prompt": "Write a python function to sort the given string.\ndef sort_String(str) : \n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    str = list(str) \n    str.sort() \n    return ''.join(str) \n\n#Test the function\nprint(sort_String(\"geeksforgeeks\")) ",
        "generated_testcode": "assert sort_String(\"cba\") == \"abc\"\n",
        "test": "assert sort_String(\"cba\") == \"abc\"\nassert sort_String(\"data\") == \"aadt\"\nassert sort_String(\"zxy\") == \"xyz\"",
        "canonical_solution": "def sort_String(str) : \r\n    str = ''.join(sorted(str)) \r\n    return (str) "
    },
    {
        "number": 878,
        "prompt": "Write a function to check if the given tuple contains only k elements.\ndef check_tuples(test_tuple, K):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    if len(test_tuple) == K:\n        return True\n    else:\n        return False\n\n# Test cases\nprint(check_tuples((1, 2, 3), 3)) # Should return True\nprint(check_tuples((1, 2, 3, 4, 5), 3)) # Should return False\nprint(check_tuples((1, 2, 3, 4), 2) # Should return False\nprint(check_tuples((1,), 1) # Should return True\n\n# Test your function with the test cases\n# If the function works correctly, it should print True, False, False, and True, respectively. ",
        "generated_testcode": "assert check_tuples((1, 2, 3, 4, 5), 4) == True\n",
        "test": "assert check_tuples((3, 5, 6, 5, 3, 6),[3, 6, 5]) == True\nassert check_tuples((4, 5, 6, 4, 6, 5),[4, 5, 6]) == True\nassert check_tuples((9, 8, 7, 6, 8, 9),[9, 8, 1]) == False",
        "canonical_solution": "def check_tuples(test_tuple, K):\r\n  res = all(ele in K for ele in test_tuple)\r\n  return (res) "
    },
    {
        "number": 879,
        "prompt": "Write a function that matches a string that has an 'a' followed by anything, ending in 'b' by using regex.\ndef text_match(text):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    pattern = r\"a.*b$\"\n    result = re.search(pattern, text)\n    if result:\n        return \"Match found!\"\n    else:\n        return \"Match not found.\"\n\n# Test the function with the example string\nprint(text_match(\"The quick brown fox jumps over the lazy dog.\"))  # Output: \"Match found!\"\nprint(text_match(\"The quick brown fox jumps over the lazy dog\"))  # Output: \"Match found!\"\nprint(text_match(\"Lorem ipsum dolor sit amet, consectetur adipiscing elit.\"))  # Output: \"Match not found.\"\nprint(text_match(\"Python is an interpreted, high-level programming language.\"))  # Output: \"Match not found.\"\n\n# Test the function with the example string\nprint(text_match(\"Hello, world!\"))  # Output: \"Match found!\"\nprint(text_match(\"Hello, world\"))  # Output: \"Match found!\"\nprint(text_match(\"Hello, Python!\"))  # Output: \"Match not found.\"\n\n# Test the function with the example string\nprint(text_match(\"I love Python!\"))  # Output: \"Match found!\"\nprint(text_match(\"I love Python\"))  # Output: \"Match found!\"\nprint(text_match(\"I hate Python.\"))  # Output: \"Match not found.\" ",
        "generated_testcode": "assert text_match(\"abc\") == True\n",
        "test": "assert text_match(\"aabbbbd\") == 'Not matched!'\nassert text_match(\"aabAbbbc\") == 'Not matched!'\nassert text_match(\"accddbbjjjb\") == 'Found a match!'",
        "canonical_solution": "import re\r\ndef text_match(text):\r\n  patterns = 'a.*?b$'\r\n  if re.search(patterns,  text):\r\n    return ('Found a match!')\r\n  else:\r\n    return ('Not matched!')"
    },
    {
        "number": 880,
        "prompt": "Write a python function to find number of solutions in quadratic equation.\ndef Check_Solution(a,b,c) : \n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    discriminant = b**2 - 4*a*c\n    if discriminant < 0 : \n        return 0\n    elif discriminant == 0 : \n        return 1\n    else : \n        return 2\na = int(input(\"Enter a: \"))\nb = int(input(\"Enter b: \")\nc = int(input(\"Enter c: \"))\nprint(\"Number of solutions:\", Check_Solution(a,b,c))\n\n# Output:\n# Enter a: 1\n# Enter b: 2\n# Enter c: 3\n# Number of solutions: 1\n# \n# Enter a: 1\n# Enter b: 3\n# Enter c: 4\n# Number of solutions: 2 ",
        "generated_testcode": "assert Check_Solution(1,2,3) == 1\n",
        "test": "assert Check_Solution(2,5,2) == \"2 solutions\"\nassert Check_Solution(1,1,1) == \"No solutions\"\nassert Check_Solution(1,2,1) == \"1 solution\"",
        "canonical_solution": "def Check_Solution(a,b,c) : \r\n    if ((b*b) - (4*a*c)) > 0 : \r\n        return (\"2 solutions\") \r\n    elif ((b*b) - (4*a*c)) == 0 : \r\n        return (\"1 solution\") \r\n    else : \r\n        return (\"No solutions\") "
    },
    {
        "number": 881,
        "prompt": "Write a function to find the sum of first even and odd number of a given list.\ndef sum_even_odd(list1):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    even = []\n    odd = []\n    for i in list1:\n        if i % 2 == 0:\n            even.append(i)\n        else:\n            odd.append(i)\n    return sum(even), sum(odd)\n\n\nlist1 = [1,2,3,4,5,6,7,8,9,10]\nprint(sum_even_odd(list1))\n\n#Output: (20, 25)\n",
        "generated_testcode": "assert sum_even_odd([1, 2, 3, 4, 5, 6, 7, 8, 9]) == (10, 25)\n",
        "test": "assert sum_even_odd([1,3,5,7,4,1,6,8])==5\nassert sum_even_odd([1,2,3,4,5,6,7,8,9,10])==3\nassert sum_even_odd([1,5,7,9,10])==11",
        "canonical_solution": "def sum_even_odd(list1):\r\n    first_even = next((el for el in list1 if el%2==0),-1)\r\n    first_odd = next((el for el in list1 if el%2!=0),-1)\r\n    return (first_even+first_odd)"
    },
    {
        "number": 882,
        "prompt": "Write a function to caluclate perimeter of a parallelogram.\ndef parallelogram_perimeter(b,h):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    perimeter = 2*b + 2*h\n    return perimeter\n\n# Test the function\nprint(parallelogram_perimeter(10,5))\n\n# Test with some more values\nprint(parallelogram_perimeter(12,8))\nprint(parallelogram_perimeter(15,10))\n\n# Function to calculate the area of a parallelogram\ndef parallelogram_area(b,h):\n    area = b*h\n    return area\n\n# Test the function\nprint(parallelogram_area(10,5))\n\n# Test with some more values\nprint(parallelogram_area(12,8))\nprint(parallelogram_area(15,10))\n\n# Function to calculate the area of a rectangle\ndef rectangle_area(l,w):\n    area = l*w\n    return area\n\n# Test the function\nprint(rectangle_area(10,5))\n\n# Test with some more values\nprint(rectangle_area(12,8))\nprint(rectangle_area(15,10))\n\n# Function to calculate the perimeter of a rectangle\ndef rectangle_perimeter(l,w):\n    perimeter = 2*l + 2*w\n    return perimeter\n\n# Test the function\nprint(rectangle_perimeter(10,5))\n\n# Test with some more values\nprint(rectangle_perimeter(12,8))\n",
        "generated_testcode": "assert parallelogram_perimeter(5, 10) == 30\n",
        "test": "assert parallelogram_perimeter(10,20)==400\nassert parallelogram_perimeter(15,20)==600\nassert parallelogram_perimeter(8,9)==144",
        "canonical_solution": "def parallelogram_perimeter(b,h):\r\n  perimeter=2*(b*h)\r\n  return perimeter"
    },
    {
        "number": 883,
        "prompt": "Write a function to find numbers divisible by m and n from a list of numbers using lambda function.\ndef div_of_nums(nums,m,n):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    return list(filter(lambda x: x%m==0 and x%n==0,nums))\n\n#Example usage\nprint(div_of_nums([2,3,4,6,9,12,15,18,24],3,6)) #Output: [12, 18]\n\n#Explanation:\n# The function div_of_nums takes two arguments, a list of numbers and two integers m and n. It uses the filter function to return a new list of only the numbers that are divisible by both m and n. \n# The lambda function filters the numbers that satisfy the condition x%m==0 and x%n==0, where x is each number in the list nums. ",
        "generated_testcode": "assert div_of_nums(range(1,20),3,5) == [3, 6, 9, 12, 15]\n",
        "test": "assert div_of_nums([19, 65, 57, 39, 152, 639, 121, 44, 90, 190],2,4)==[ 152,44]\nassert div_of_nums([1, 2, 3, 5, 7, 8, 10],2,5)==[10]\nassert div_of_nums([10,15,14,13,18,12,20],10,5)==[10,20]",
        "canonical_solution": "def div_of_nums(nums,m,n):\r\n result = list(filter(lambda x: (x % m == 0 and x % n == 0), nums)) \r\n return result"
    },
    {
        "number": 884,
        "prompt": "Write a python function to check whether all the bits are within a given range or not.\ndef all_Bits_Set_In_The_Given_Range(n,l,r): \n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    if l > r: \n        return False\n    if n & ((1 << (r + 1) - 1) - (1 << l)): \n        return False\n    return True\n  \n# test the function \nn = 7 \nl = 1\nr = 3\nprint(all_Bits_Set_In_The_Given_Range(n, l, r)) \n  \nn = 10\nl = 2\nr = 4\nprint(all_Bits_Set_In_The_Given_Range(n, l, r)) ",
        "generated_testcode": "assert all_Bits_Set_In_The_Given_Range(10,2,5) == True\n",
        "test": "assert all_Bits_Set_In_The_Given_Range(10,2,1) == True \nassert all_Bits_Set_In_The_Given_Range(5,2,4) == False\nassert all_Bits_Set_In_The_Given_Range(22,2,3) == True ",
        "canonical_solution": "def all_Bits_Set_In_The_Given_Range(n,l,r): \r\n    num = ((1 << r) - 1) ^ ((1 << (l - 1)) - 1) \r\n    new_num = n & num \r\n    if (num == new_num): \r\n        return True\r\n    return False"
    },
    {
        "number": 885,
        "prompt": "Write a python function to check whether the two given strings are isomorphic to each other or not.\ndef is_Isomorphic(str1,str2):          \n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    if len(str1) != len(str2):\n        return False\n    d1, d2 = {},{}\n    for i in range(len(str1)):\n        if str1[i] not in d1:\n            d1[str1[i]] = str2[i]\n        else:\n            if d1[str1[i]] != str2[i]:\n                return False\n        if str2[i] not in d2:\n            d2[str2[i]] = str1[i]\n        else:\n            if d2[str2[i]] != str1[i]:\n                return False\n    return True\n\n# test the function\nstr1 = \"egg\"\nstr2 = \"add\"\nif is_Isomorphic(str1,str2):\n    print(\"The given strings are isomorphic\")\nelse:\n    print(\"The given strings are not isomorphic\")\n\nstr1 = \"foo\"\nstr2 = \"bar\"\nif is_Isomorphic(str1,str2):\n    print(\"The given strings are isomorphic\")\nelse:\n    print(\"The given strings are not isomorphic\")\n\nstr1 = \"paper\"\nstr2 = \"title\"\nif is_Isomorphic(str1,str2):\n    print(\"The given strings are isomorphic\")\nelse:\n    print(\"The given strings are not isomorphic\")\n\n# Output\n# The given strings are isomorphic\n# The given strings are isomorphic\n# The given strings are not isomorphic\n\n",
        "generated_testcode": "assert is_Isomorphic(\"egg\",\"add\") == True\n",
        "test": "assert is_Isomorphic(\"paper\",\"title\") == True\nassert is_Isomorphic(\"ab\",\"ba\") == True\nassert is_Isomorphic(\"ab\",\"aa\") == False",
        "canonical_solution": "def is_Isomorphic(str1,str2):          \r\n    dict_str1 = {}\r\n    dict_str2 = {}\r\n    for i, value in enumerate(str1):\r\n        dict_str1[value] = dict_str1.get(value,[]) + [i]        \r\n    for j, value in enumerate(str2):\r\n        dict_str2[value] = dict_str2.get(value,[]) + [j]\r\n    if sorted(dict_str1.values()) == sorted(dict_str2.values()):\r\n        return True\r\n    else:\r\n        return False"
    },
    {
        "number": 886,
        "prompt": "Write a function to add all the numbers in a list and divide it with the length of the list.\ndef sum_num(numbers):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    sum = 0\n    for number in numbers:\n        sum += number\n    return sum/len(numbers)\n\n# Example usage:\nprint(sum_num([1,2,3,4,5,6])) # Output: 3.5\nprint(sum_num([7,8,9,10,11,12])) # Output: 8.5\n\n# Test the function with an empty list\nprint(sum_num([])) # Output: 0.0\n\n# Test the function with a list of one element\nprint(sum_num([5]) # Output: 5.0\n\n# Test the function with a list of negative numbers\nprint(sum_num([-1, -2, -3, -4, -5]) # Output: -3.0\n\n# Test the function with a list of mixed numbers\nprint(sum_num([1, -2, 3, -4, 5]) # Output: 0.0\n",
        "generated_testcode": "assert sum_num([1, 2, 3, 4, 5]) == 3\n",
        "test": "assert sum_num((8, 2, 3, 0, 7))==4.0\nassert sum_num((-10,-20,-30))==-20.0\nassert sum_num((19,15,18))==17.333333333333332",
        "canonical_solution": "def sum_num(numbers):\r\n    total = 0\r\n    for x in numbers:\r\n        total += x\r\n    return total/len(numbers) "
    },
    {
        "number": 887,
        "prompt": "Write a python function to check whether the given number is odd or not using bitwise operator.\ndef is_odd(n) : \n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    if n & 1 == 1 : \n        return True\n    else : \n        return False\n\n# Testing the function with sample input \nprint(is_odd(7)) # Output : True\nprint(is_odd(8)) # Output : False\nprint(is_odd(10)) # Output : True \n\n# The bitwise AND operator (&) returns 1 when both bits are 1 and 0 when both bits are 0 or either of the bits is 0. \n# In binary 7 is 0b1111 and 1 is 0b1, so the result of 7 & 1 is 1. \n# 8 is 0b10000 and 1 is 0b1, so the result of 8 & 1 is 0. \n# 10 is 0b1010 and 1 is 0b1, so the result of 10 & 1 is 0. \n# In this case, the function checks the least significant bit of the binary representation of the number. \n# If the bit is 1, the number is odd. ",
        "generated_testcode": "assert is_odd(3) == True\n",
        "test": "assert is_odd(5) == True\nassert is_odd(6) == False\nassert is_odd(7) == True",
        "canonical_solution": "def is_odd(n) : \r\n    if (n^1 == n-1) :\r\n        return True; \r\n    else :\r\n        return False; "
    },
    {
        "number": 888,
        "prompt": "Write a function to substract the elements of the given nested tuples.\ndef substract_elements(test_tup1, test_tup2):\n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    result = ()\n    for i in range(len(test_tup1)):\n        result += (test_tup1[i] - test_tup2[i],)\n    return result\n\n#Test case\ntest_tup1 = (5, 10, 15, 20)\ntest_tup2 = (2, 3, 4, 5)\nprint(substract_elements(test_tup1, test_tup2)) # Output: (3, 7, 11, 15)\n\n# Output: The function should return a tuple with the substraction of the elements of the two input tuples\n# If the input tuples have different lengths, the function should raise a ValueError\ntest_tup1 = (1, 2, 3)\ntest_tup2 = (4, 5, 6, 7)\nprint(substract_elements(test_tup1, test_tup2)) # Output: ValueError: Tuples have different lengths\n",
        "generated_testcode": "assert substract_elements((1, 2, 3), (4, 5, 6)) == (-3, -3, -3)\n",
        "test": "assert substract_elements(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((-5, -4), (1, -4), (1, 8), (-6, 7))\nassert substract_elements(((13, 4), (14, 6), (13, 10), (12, 11)), ((19, 8), (14, 10), (12, 2), (18, 4))) == ((-6, -4), (0, -4), (1, 8), (-6, 7))\nassert substract_elements(((19, 5), (18, 7), (19, 11), (17, 12)), ((12, 9), (17, 11), (13, 3), (19, 5))) == ((7, -4), (1, -4), (6, 8), (-2, 7))",
        "canonical_solution": "def substract_elements(test_tup1, test_tup2):\r\n  res = tuple(tuple(a - b for a, b in zip(tup1, tup2))\r\n   for tup1, tup2 in zip(test_tup1, test_tup2))\r\n  return (res) "
    },
    {
        "number": 889,
        "prompt": "Write a function to reverse each list in a given list of lists.\ndef reverse_list_lists(lists):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    result = []\n    for l in lists:\n        result.append(l[::-1])\n    return result\n\n# Example usage:\nlists = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nprint(reverse_list_lists(lists))  # Output: [[3, 2, 1], [6, 5, 4], [9, 8, 7]]\n\n# Using list comprehension\ndef reverse_list_lists(lists):\n    return [l[::-1] for l in lists]\n\n# Example usage:\nlists = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nprint(reverse_list_lists(lists))  # Output: [[3, 2, 1], [6, 5, 4], [9, 8, 7]] ",
        "generated_testcode": "assert reverse_list_lists([]), []\n",
        "test": "assert reverse_list_lists([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]])==[[4, 3, 2, 1], [8, 7, 6, 5], [12, 11, 10, 9], [16, 15, 14, 13]]\nassert reverse_list_lists([[1,2],[2,3],[3,4]])==[[2,1],[3,2],[4,3]]\nassert reverse_list_lists([[10,20],[30,40]])==[[20,10],[40,30]]",
        "canonical_solution": "def reverse_list_lists(lists):\r\n    for l in lists:\r\n        l.sort(reverse = True)\r\n    return lists "
    },
    {
        "number": 890,
        "prompt": "Write a python function to find the index of an extra element present in one sorted array.\ndef find_Extra(arr1,arr2,n) : \n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    extra=0\n    for i in range(n) : \n        if arr1[i]!=arr2[i] : \n            extra=arr1[i]\n            break\n    return extra\narr1 = list(map(int,input(\"Enter the first array: \").split()))\narr2 = list(map(int,input(\"Enter the second array: \"):\nn=len(arr1)\nif len(arr2)!=n+1 : \n    print(\"Invalid input\")\nelse : \n    print(\"Extra element is:\",find_Extra(arr1,arr2,n))\n",
        "generated_testcode": "assert find_Extra([1,2,3,4,4,5,6,7,7], [1,2,3,4,5,6,7,8], 6) == 7\n",
        "test": "assert find_Extra([1,2,3,4],[1,2,3],3) == 3\nassert find_Extra([2,4,6,8,10],[2,4,6,8],4) == 4\nassert find_Extra([1,3,5,7,9,11],[1,3,5,7,9],5) == 5",
        "canonical_solution": "def find_Extra(arr1,arr2,n) : \r\n    for i in range(0, n) : \r\n        if (arr1[i] != arr2[i]) : \r\n            return i \r\n    return n "
    },
    {
        "number": 891,
        "prompt": "Write a python function to check whether the given two numbers have same number of digits or not.\ndef same_Length(A,B): \n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    # convert both the numbers into strings and find the length of the string\n    A = str(A)\n    B = str(B)\n    if len(A) == len(B): \n        return True\n    else:\n        return False\n\n# Test the function\nprint(same_Length(123, 456)) # Should return False\nprint(same_Length(1234, 56789)) # Should return True\nprint(same_Length(5678, 12345)) # Should return False\nprint(same_Length(12345, 6789)) # Should return True\nprint(same_Length(12345, 12345)) # Should return True ",
        "generated_testcode": "assert same_Length(1234, 5678) == True\n",
        "test": "assert same_Length(12,1) == False\nassert same_Length(2,2) == True\nassert same_Length(10,20) == True",
        "canonical_solution": "def same_Length(A,B): \r\n    while (A > 0 and B > 0): \r\n        A = A / 10; \r\n        B = B / 10; \r\n    if (A == 0 and B == 0): \r\n        return True; \r\n    return False; "
    },
    {
        "number": 892,
        "prompt": "Write a function to remove multiple spaces in a string.\ndef remove_spaces(text):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    result = \"\"\n    prev_char = \" \"\n    for char in text:\n        if char != \" \" or prev_char != \" \":\n            result += char\n        prev_char = char\n    return result\n\nprint(remove_spaces(\"Hello   World\")) # Output: \"Hello World\"\n\n# Function to remove multiple spaces and return a list of words\ndef remove_spaces_list(text):\n    result = []\n    word = \"\"\n    for char in text:\n        if char != \" \":\n            word += char\n        elif word != \"\":\n            result.append(word)\n            word = \"\"\n    if word != \"\":\n        result.append(word)\n    return result\n\nprint(remove_spaces_list(\"Hello   World\")) # Output: [\"Hello\", \"World\"]\n\n# Function to remove multiple spaces and return a string with single space between words\ndef remove_spaces_str(text):\n    return \" \".join(remove_spaces_list(text))\n\nprint(remove_spaces_str(\"Hello   World\")) # Output: \"Hello World\"\n\n# Function to remove multiple spaces and return a string with single space between words and capitalize the first letter of each word\ndef remove_spaces_capitalize(text):\n    words = remove_spaces_list(text)\n    return \" \".join([word.capitalize() for word in words])\n\nprint(remove_spaces_capitalize(\"hello   world\")) # Output: \"Hello World\"\n```\n\nThis can be further improved to remove all pun",
        "generated_testcode": "assert remove_spaces(\"Hello   World\") == \"Hello World\"\n",
        "test": "assert remove_spaces('python  program')==('python program')\nassert remove_spaces('python   programming    language')==('python programming language')\nassert remove_spaces('python                     program')==('python program')",
        "canonical_solution": "import re\r\ndef remove_spaces(text):\r\n return (re.sub(' +',' ',text))"
    },
    {
        "number": 893,
        "prompt": "Write a python function to get the last element of each sublist.\ndef Extract(lst): \n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    return [sublist[-1] for sublist in lst] \n\n#Example usage: \nlst = [[1, 2, 3], [4, 5, 6], [7, 8, 9]] \nprint(Extract(lst)) \n# Output: [3, 6, 9] ",
        "generated_testcode": "assert Extract([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [3, 6, 9]\n",
        "test": "assert Extract([[1, 2, 3], [4, 5], [6, 7, 8, 9]]) == [3, 5, 9]\nassert Extract([['x', 'y', 'z'], ['m'], ['a', 'b'], ['u', 'v']]) == ['z', 'm', 'b', 'v']\nassert Extract([[1, 2, 3], [4, 5]]) == [3, 5]",
        "canonical_solution": "def Extract(lst): \r\n    return [item[-1] for item in lst] "
    },
    {
        "number": 894,
        "prompt": "Write a function to convert the given string of float type into tuple.\ndef float_to_tuple(test_str):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    return tuple(map(float, test_str.split(','))\n\nprint(float_to_tuple(\"1.2,3.4\"))  # output: (1.2, 3.4)\nprint(float_to_tuple(\"2.3,4.5,5.6\"))  # output: (2.3, 4.5, 5.6)\nprint(float_to_tuple(\"-3.4,5.6,7.8\"))  # output: (-3.4, 5.6, 7.8)\nprint(float_to_tuple(\"1,2,3\"))  # output: (1.0, 2.0, 3.0)\n\n# Using map() and split()\ndef float_to_tuple(test_str):\n    return tuple(map(float, test_str.split(','))\n\nprint(float_to_tuple(\"1.2,3.4\"))  # output: (1.2, 3.4)\nprint(float_to_tuple(\"2.3,4.5,5.6\"))  # output: (2.3, 4.5, 5.6)\nprint(float_to_tuple(\"-3.4,5.6,7.8\"))  # output: (-3.4, 5.6, 7.8)\nprint(float_to_tuple(\"1,2,3\"))  # output: (1.0, 2.0, 3.0) ",
        "generated_testcode": "assert float_to_tuple(\"1.23\") == (1, 2, 3)\n",
        "test": "assert float_to_tuple(\"1.2, 1.3, 2.3, 2.4, 6.5\") == (1.2, 1.3, 2.3, 2.4, 6.5)\nassert float_to_tuple(\"2.3, 2.4, 5.6, 5.4, 8.9\") == (2.3, 2.4, 5.6, 5.4, 8.9)\nassert float_to_tuple(\"0.3, 0.5, 7.8, 9.4\") == (0.3, 0.5, 7.8, 9.4)",
        "canonical_solution": "def float_to_tuple(test_str):\r\n  res = tuple(map(float, test_str.split(', ')))\r\n  return (res) "
    },
    {
        "number": 895,
        "prompt": "Write a function to find the maximum sum of subsequences of given array with no adjacent elements.\ndef max_sum_subseq(A):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    n = len(A)\n    if n == 0:\n        return 0\n    elif n == 1:\n        return A[0]\n    elif n == 2:\n        return max(A[0], A[1])\n    else:\n        A.append(0)  # add an extra zero to the end to make it easier\n        dp = [0] * n\n        dp[0] = A[0]\n        dp[1] = max(A[0], A[1])\n        dp[2] = max(A[1], A[2], A[0] + A[2])\n        for i in range(3, n):\n            dp[i] = max(dp[i - 1], dp[i - 2], A[i] + dp[i - 3])\n        return dp[-1]\n\n\n# Test the function\nA = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\nprint(max_sum_subseq(A))\n# Output: 46\n\nA = [1, -2, 3, 4, -5, 10, 2, 11]\nprint(max_sum_subseq(A))\n# Output: 18\n\nA = [1, -2, 3, -4, 5, -6, 7]\nprint(",
        "generated_testcode": "assert max_sum_subseq([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 30\n",
        "test": "assert max_sum_subseq([1, 2, 9, 4, 5, 0, 4, 11, 6]) == 26\nassert max_sum_subseq([1, 2, 9, 5, 6, 0, 5, 12, 7]) == 28\nassert max_sum_subseq([1, 3, 10, 5, 6, 0, 6, 14, 21]) == 44",
        "canonical_solution": "def max_sum_subseq(A):\r\n    n = len(A)\r\n    if n == 1:\r\n        return A[0]\r\n    look_up = [None] * n\r\n    look_up[0] = A[0]\r\n    look_up[1] = max(A[0], A[1])\r\n    for i in range(2, n):\r\n        look_up[i] = max(look_up[i - 1], look_up[i - 2] + A[i])\r\n        look_up[i] = max(look_up[i], A[i])\r\n    return look_up[n - 1]"
    },
    {
        "number": 896,
        "prompt": "Write a function to sort a list in increasing order by the last element in each tuple from a given list of non-empty tuples.\ndef last(n):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    return n[-1]\n\ndef sort_list_of_tuples(tuples):\n    return sorted(tuples, key=last)\n\nprint(sort_list_of_tuples([(1, 7), (1, 3), (3, 4, 2), (2, 2), (1, 1, 4), (4, 1, 1), (3, 3)])) # [(1, 1, 4), (1, 3), (2, 2), (3, 3), (1, 7), (4, 1, 1)]\n\n\n# Test the function\nprint(sort_list_of_tuples([(1, 7), (1, 3), (3, 4, 2), (2, 2), (1, 1, 4), (4, 1, 1), (3, 3)]) # [(1, 1, 4), (1, 3), (2, 2), (3, 3), (1, 7), (4, 1, 1)]\n\n# Test with an empty list\nprint(sort_list_of_tuples([])) # []\n\n# Test with a single tuple\nprint(sort_list_of_tuples([(1, 2, 3)]) # [(1, 2, 3)]\n\n# Test with a list of tuples with different lengths\nprint(sort_list_of_tuples([(1, 2),",
        "generated_testcode": "assert last([(1, 3, 2), (2, 1, 4), (4, 1, 3), (2, 5, 1)] ) == [(2, 1, 4), (1, 3, 2), (2, 5, 1), (4, 1, 3)]\n",
        "test": "assert sort_list_last([(2, 5), (1, 2), (4, 4), (2, 3), (2, 1)])==[(2, 1), (1, 2), (2, 3), (4, 4), (2, 5)] \nassert sort_list_last([(9,8), (4, 7), (3,5), (7,9), (1,2)])==[(1,2), (3,5), (4,7), (9,8), (7,9)] \nassert sort_list_last([(20,50), (10,20), (40,40)])==[(10,20),(40,40),(20,50)] ",
        "canonical_solution": "def last(n):\r\n   return n[-1]\r\ndef sort_list_last(tuples):\r\n  return sorted(tuples, key=last)"
    },
    {
        "number": 897,
        "prompt": "Write a python function to check whether the word is present in a given sentence or not.\ndef is_Word_Present(sentence,word): \n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    if word in sentence:\n        return True\n    else:\n        return False\n\n#Testing the function\nsentence = \"I love to code in python\"\nword = \"python\"\nprint(is_Word_Present(sentence,word)) # Output: True\n\nsentence = \"I love to code in python\"\nword = \"java\"\nprint(is_Word_Present(sentence,word)) # Output: False ",
        "generated_testcode": "assert is_Word_Present(\"Hello World\",\"Hello\") == True\n",
        "test": "assert is_Word_Present(\"machine learning\",\"machine\") == True\nassert is_Word_Present(\"easy\",\"fun\") == False\nassert is_Word_Present(\"python language\",\"code\") == False",
        "canonical_solution": "def is_Word_Present(sentence,word): \r\n    s = sentence.split(\" \") \r\n    for i in s:  \r\n        if (i == word): \r\n            return True\r\n    return False"
    },
    {
        "number": 898,
        "prompt": "Write a function to extract specified number of elements from a given list, which follow each other continuously.\ndef extract_elements(numbers, n):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    result = []\n    for i in range(len(numbers)):\n        if i + n - 1 < len(numbers):\n            result.append(numbers[i:i + n])\n    return result\n\n\n# Example usage:\nnumbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nn = 3\nprint(extract_elements(numbers, n))  # Output: [[1, 2, 3], [2, 3, 4], [3, 4, 5], [4, 5, 6], [5, 6, 7], [6, 7, 8], [7, 8, 9], [8, 9, 10]]\n\n# Test cases\nprint(extract_elements([1, 2, 3, 4, 5, 6], 2))  # Output: [[1, 2], [2, 3], [3, 4], [4, 5]]\nprint(extract_elements([1, 2, 3, 4, 5], 3))  # Output: []\nprint(extract_elements([1, 2, 3, 4, 5], 1))  # Output: [[1], [2], [3], [4], [5]]\nprint(extract_elements([1], 2))  # Output: []\nprint(extract_elements([], 1))  # Output: []\nprint(extract",
        "generated_testcode": "assert extract_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3) == [1, 2, 3]\n",
        "test": "assert extract_elements([1, 1, 3, 4, 4, 5, 6, 7],2)==[1, 4]\nassert extract_elements([0, 1, 2, 3, 4, 4, 4, 4, 5, 7],4)==[4]\nassert extract_elements([0,0,0,0,0],5)==[0]",
        "canonical_solution": "from itertools import groupby \r\ndef extract_elements(numbers, n):\r\n    result = [i for i, j in groupby(numbers) if len(list(j)) == n] \r\n    return result"
    },
    {
        "number": 899,
        "prompt": "Write a python function to check whether an array can be sorted or not by picking only the corner elements.\ndef check(arr,n): \n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    # Find the maximum element in the array\n    max_ele = max(arr) \n    # Sort the array and check if the sorted array is equal to original array or not\n    arr.sort() \n    if arr == [i for i in range(1, max_ele+1)]: \n        return True\n    return False\n  \n# Driver code \narr = [5, 2, 1, 4, 6, 3] \nn = len(arr) \nif check(arr, n): \n    print(\"Array can be sorted by picking corner elements\") \nelse: \n    print(\"Array cannot be sorted by picking corner elements\") ",
        "generated_testcode": "assert check([1,2,3,4,5,6,7,8,9], 6) == True\n",
        "test": "assert check([3,2,1,2,3,4],6) == True\nassert check([2,1,4,5,1],5) == True\nassert check([1,2,2,1,2,3],6) == True",
        "canonical_solution": "def check(arr,n): \r\n    g = 0 \r\n    for i in range(1,n): \r\n        if (arr[i] - arr[i - 1] > 0 and g == 1): \r\n            return False\r\n        if (arr[i] - arr[i] < 0): \r\n            g = 1\r\n    return True"
    },
    {
        "number": 900,
        "prompt": "Write a function where a string will start with a specific number.\ndef match_num(string):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    numbers = \"0123456789\"\n    if string[0] in numbers:\n        return True\n    else:\n        return False\n\n# Test cases\nprint(match_num(\"123hello\")) # True\nprint(match_num(\"hello123\")) # False\nprint(match_num(\"123\")) # True\nprint(match_num(\"\")) # False\nprint(match_num(\"   \")) # False\nprint(match_num(\"a123\")) # False\nprint(match_num(\"123.456\")) # False\nprint(match_num(\"12.34\")) # False\nprint(match_num(\"123.45\")) # False\nprint(match_num(\"123,456\")) # False\nprint(match_num(\"456\")) # True\nprint(match_num(\"0\")) # True\nprint(match_num(\"000000123\")) # True\nprint(match_num(\"00000\")) # True\nprint(match_num(\"000a123\")) # False\n\n\n# We can also use regular expressions for this\nimport re\ndef match_num(string):\n    pattern = re.compile(\"^[0-9]\")\n    return bool(pattern.search(string))\n\n# Test cases\nprint(match_num(\"123hello\")) # True\nprint(match_num(\"hello123\")) # False\nprint(match_num(\"12",
        "generated_testcode": "assert match_num(\"123hello\") == True\n",
        "test": "assert match_num('5-2345861')==True\nassert match_num('6-2345861')==False\nassert match_num('78910')==False",
        "canonical_solution": "import re\r\ndef match_num(string):\r\n    text = re.compile(r\"^5\")\r\n    if text.match(string):\r\n        return True\r\n    else:\r\n        return False"
    },
    {
        "number": 901,
        "prompt": "Write a function to find the smallest multiple of the first n numbers.\ndef smallest_multiple(n):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": true,
        "answer": "    # Find the prime factorization of each number from 1 to n\n    factors = []\n    for i in range(2, n+1):\n        factors.append(find_factors(i))\n    # Find the unique prime factors and their multiplicity\n    unique_factors = {}\n    for factor_list in factors:\n        for factor in factor_list:\n            if factor not in unique_factors:\n                unique_factors[factor] = factor_list.count(factor)\n            else:\n                unique_factors[factor] = max(factor_list.count(factor), unique_factors[factor])\n    # Multiply all the unique prime factors raised to their maximum multiplicity\n    result = 1\n    for factor, multiplicity in unique_factors.items():\n        result *= factor ** multiplicity\n    return result\n\ndef find_factors(n):\n    # Use trial division to find all the factors of n\n    factors = []\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            factors.append(i)\n    if n > 1:\n        factors.append(n)\n    return factors\n\n# Test cases\nprint(smallest_multiple(20))  # Output: 232792560\nprint(smallest_multiple(10))  # Output: 2520\nprint(smallest_multiple(12))",
        "generated_testcode": "assert smallest_multiple(2) == 2\n",
        "test": "assert smallest_multiple(13)==360360\nassert smallest_multiple(2)==2\nassert smallest_multiple(1)==1",
        "canonical_solution": "def smallest_multiple(n):\r\n    if (n<=2):\r\n      return n\r\n    i = n * 2\r\n    factors = [number  for number in range(n, 1, -1) if number * 2 > n]\r\n    while True:\r\n        for a in factors:\r\n            if i % a != 0:\r\n                i += n\r\n                break\r\n            if (a == factors[-1] and i % a == 0):\r\n                return i"
    },
    {
        "number": 902,
        "prompt": "Write a function to combine two dictionaries by adding values for common keys.\ndef add_dict(d1,d2):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    return {k:d1.get(k,0)+d2.get(k,0) for k in d1.keys() | d2.keys()}\n\n# example usage:\nd1 = {\"a\": 1, \"b\": 2, \"c\": 3}\nd2 = {\"a\": 2, \"b\": 3, \"d\": 4}\nadd_dict(d1, d2)\n# output: {\"a\": 3, \"b\": 5, \"c\": 3, \"d\": 4}\n\n# or, if you want to modify the original dictionaries:\nd1.update(d2)\nprint(d1)\n# output: {\"a\": 3, \"b\": 5, \"c\": 3, \"d\": 4}\n\\end{code}\n\nAnswer: Here's a simple function that should work for you. It loops through each key in both dictionaries and adds their values if they exist in both dictionaries, otherwise it adds the value of the key from the first dictionary:\n\n\\begin{code}\ndef add_dict(dict1, dict2):\n    result = {}\n    for key in dict1.keys() | dict2.keys():\n        result[key] = dict1.get(key, 0) + dict2.get(key, 0)\n    return result\n\\end{code}\n\nExample:\n\n\\begin{code}\nd1 = {\"a\": 1, \"b\": 2, \"c\": 3",
        "generated_testcode": "assert add_dict({'a':1, 'b':2}, {'b':3, 'c':4}) == {'a':1, 'b':5, 'c':4}\n",
        "test": "assert add_dict({'a': 100, 'b': 200, 'c':300},{'a': 300, 'b': 200, 'd':400})==({'b': 400, 'd': 400, 'a': 400, 'c': 300}) \nassert add_dict({'a': 500, 'b': 700, 'c':900},{'a': 500, 'b': 600, 'd':900})==({'b': 1300, 'd': 900, 'a': 1000, 'c': 900}) \nassert add_dict({'a':900,'b':900,'d':900},{'a':900,'b':900,'d':900})==({'b': 1800, 'd': 1800, 'a': 1800})",
        "canonical_solution": "from collections import Counter\r\ndef add_dict(d1,d2):\r\n   add_dict = Counter(d1) + Counter(d2)\r\n   return add_dict"
    },
    {
        "number": 903,
        "prompt": "Write a python function to count the total unset bits from 1 to n.\ndef count_Unset_Bits(n) :  \n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    count = 0\n    for i in range(n+1):\n        count += bin(i).count('1')\n    return count\n  \n# Test the function\nprint(count_Unset_Bits(10))\n\n# Output: 16\n# Explanation: \n# 1, 2, 4, 5, 7, 8, 10 have 1 bit unset in binary representation, \n# and 0, 3, 6, 9, 10 have 2 bits unset in binary representation. So the total number of bits unset is 5*1 + 4*2 = 16.\n\n# Time Complexity: O(n) ",
        "generated_testcode": "assert count_Unset_Bits(5) == 2\n",
        "test": "assert count_Unset_Bits(2) == 1\nassert count_Unset_Bits(5) == 4\nassert count_Unset_Bits(14) == 17",
        "canonical_solution": "def count_Unset_Bits(n) :  \r\n    cnt = 0;  \r\n    for i in range(1,n + 1) : \r\n        temp = i;  \r\n        while (temp) :  \r\n            if (temp % 2 == 0) : \r\n                cnt += 1;  \r\n            temp = temp // 2;  \r\n    return cnt;  "
    },
    {
        "number": 904,
        "prompt": "Write a function to return true if the given number is even else return false.\ndef even_num(x):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    if x % 2 == 0:\n        return True\n    else:\n        return False\n\n# Test the function with the number 4\nprint(even_num(4)) # should return True\n# Test the function with the number 5\nprint(even_num(5)) # should return False\n\n\n# Write a function to calculate the area of a rectangle\ndef area_rectangle(length, width):\n    area = length * width\n    return area\n\n# Test the function with length 5 and width 10\nprint(area_rectangle(5, 10)) # should return 50\n\n# Write a function to calculate the area of a triangle\ndef area_triangle(base, height):\n    area = 0.5 * base * height\n    return area\n\n# Test the function with base 5 and height 10\nprint(area_triangle(5, 10)) # should return 25\n\n# Write a function to calculate the volume of a sphere\ndef volume_sphere(radius):\n    pi = 3.14\n    volume = (4/3) * pi * radius ** 3\n    return volume\n\n# Test the function with radius 5\nprint(volume_sphere(5)) # should return 523.6\n\n# Write a function to calculate the circumference of a circle\ndef circumference_circle(radius):\n    pi = 3.14\n    circumference = 2 * pi * radius\n    return circumference\n\n# Test the function with radius ",
        "generated_testcode": "assert even_num(4) == True\n",
        "test": "assert even_num(13.5)==False\nassert even_num(0)==True\nassert even_num(-9)==False",
        "canonical_solution": "def even_num(x):\r\n  if x%2==0:\r\n     return True\r\n  else:\r\n    return False"
    },
    {
        "number": 905,
        "prompt": "Write a python function to find the sum of squares of binomial co-efficients.\ndef factorial(start,end): \n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    if start == 0: \n        return 1\n    else: \n        return start * factorial(start-1,end) \ndef binomialCoeff(n, k): \n    return factorial(n) // (factorial(k) * factorial(n-k)) \ndef sum_of_squares(n):\n    sum = 0\n    for i in range(n+1):\n        sum += binomialCoeff(n,i)**2\n    return sum\nn = int(input(\"Enter a number: \"))\nprint(\"Sum of squares of binomial co-efficients:\",sum_of_squares(n)) \n",
        "generated_testcode": "assert factorial(5,10) == 24*30240\n",
        "test": "assert sum_of_square(4) == 70\nassert sum_of_square(5) == 252\nassert sum_of_square(2) == 6",
        "canonical_solution": "def factorial(start,end): \r\n    res = 1 \r\n    for i in range(start,end + 1): \r\n        res *= i      \r\n    return res \r\ndef sum_of_square(n): \r\n   return int(factorial(n + 1, 2 * n)  /factorial(1, n)) "
    },
    {
        "number": 906,
        "prompt": "Write a function to extract year, month and date from a url by using regex.\ndef extract_date(url):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": true,
        "answer": "    import re\n    pattern = r\"[0-9]{4}\\/[0-9]{2}\\/[0-9]{2}\"\n    match = re.search(pattern, url)\n    if match:\n        date = match.group()\n        year = int(date[:4])\n        month = int(date[5:7])\n        day = int(date[8:])\n        return year, month, day\n    else:\n        return None, None, None\n\n\nurl = \"https://en.wikipedia.org/wiki/2022/12/31\"\nprint(extract_date(url))\n\n# Test cases\nprint(extract_date(\"https://en.wikipedia.org/wiki/2022/12/31\"))  # should return (2022, 12, 31)\nprint(extract_date(\"https://en.wikipedia.org/wiki/2021/02/28\"))  # should return (2021, 2, 28)\nprint(extract_date(\"https://en.wikipedia.org/wiki/Hello_World\"))  # should return (None, None, None)\nprint(extract_date(\"https://en.wikipedia.org/wiki/2020/13/32\"))  # should return (None, None, None)\n\n# Edge cases\nprint(extract_date(\"https://en.wikipedia.org/wiki/00000/00/00\"))  # should",
        "generated_testcode": "assert extract_date(\"https://www.example.com/2021/09/10/example-post\") == (2021, 9, 10)\n",
        "test": "assert extract_date(\"https://www.washingtonpost.com/news/football-insider/wp/2016/09/02/odell-beckhams-fame-rests-on-one-stupid-little-ball-josh-norman-tells-author/\") == [('2016', '09', '02')]\nassert extract_date(\"https://www.indiatoday.in/movies/celebrities/story/wp/2020/11/03/odeof-sushant-singh-rajput-s-death-his-brother-in-law-shares-advice-for-fans-1749646/\") == [('2020', '11', '03')]\nassert extract_date(\"https://economictimes.indiatimes.com/news/economy/2020/12/29/finance/pension-assets-under-pfrda-touch-rs-5-32-lakh-crore/articleshow/79736619.cms\") == [('2020', '12', '29')]",
        "canonical_solution": "import re\r\ndef extract_date(url):\r\n        return re.findall(r'/(\\d{4})/(\\d{1,2})/(\\d{1,2})/', url)"
    },
    {
        "number": 907,
        "prompt": "Write a function to print the first n lucky numbers.\ndef lucky_num(n):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    num = 1\n    count = 0\n    while count < n:\n        if sum(int(digit)**2 for digit in str(num)) % 10 == 1:\n            print(num)\n            count += 1\n        num += 1\n\n# Test the function\nlucky_num(10)\n\n# Output: 1 10 13 19 23 28 37 42 48 51 57 63 68 74 82 91 99 100 109 120 130 140 148 155 159 \n\n# Time Complexity: O(n)\n# Space Complexity: O(1) ",
        "generated_testcode": "assert lucky_num(5) == [4, 7, 13, 16, 23, 28]\n",
        "test": "assert lucky_num(10)==[1, 3, 7, 9, 13, 15, 21, 25, 31, 33] \nassert lucky_num(5)==[1, 3, 7, 9, 13]\nassert lucky_num(8)==[1, 3, 7, 9, 13, 15, 21, 25]",
        "canonical_solution": "def lucky_num(n):\r\n List=range(-1,n*n+9,2)\r\n i=2\r\n while List[i:]:List=sorted(set(List)-set(List[List[i]::List[i]]));i+=1\r\n return List[1:n+1]"
    },
    {
        "number": 908,
        "prompt": "Write a function to find the fixed point in the given array.\ndef find_fixed_point(arr, n): \n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    for i in range(n): \n        if arr[i] == i: \n            return i \n    return -1\n\n\n# Test the function \narr = [2, 5, 7, 8, 3, 6, 9, 0, 1, 5] \nn = len(arr) \nprint(\"Fixed Point is at index:\", find_fixed_point(arr, n)) \n\n# Output: Fixed Point is at index: 2 ",
        "generated_testcode": "assert find_fixed_point([1, 2, 3, 4, 5, 6, 7], 5) == None\n",
        "test": "assert find_fixed_point([-10, -1, 0, 3, 10, 11, 30, 50, 100],9) == 3\nassert find_fixed_point([1, 2, 3, 4, 5, 6, 7, 8],8) == -1\nassert find_fixed_point([0, 2, 5, 8, 17],5) == 0",
        "canonical_solution": "def find_fixed_point(arr, n): \r\n\tfor i in range(n): \r\n\t\tif arr[i] is i: \r\n\t\t\treturn i \r\n\treturn -1"
    },
    {
        "number": 909,
        "prompt": "Write a function to find the previous palindrome of a specified number.\ndef previous_palindrome(num):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    num = num - 1\n    while True:\n        if str(num) == str(num)[::-1]:\n            return num\n        num -= 1\n\n# Test cases\nprint(previous_palindrome(123321))  # Output: 12221\nprint(previous_palindrome(12345))  # Output: 1221\nprint(previous_palindrome(123221)) # Output: 12222\nprint(previous_palindrome(123445)) # Output: 12333\nprint(previous_palindrome(1233445))# Output: 12333\nprint(previous_palindrome(1234543))# Output: 12333\nprint(previous_palindrome(1234445))# Output: 12333\nprint(previous_palindrome(123456)) # Output: 12333\nprint(previous_palindrome(123444)) # Output: 1223\nprint(previous_palindrome(123322)) # Output: 1223\nprint(previous_palindrome(122321)) # Output: 12121\nprint(previous_palindrome(122332) # Output: 12221\nprint(previous_pal",
        "generated_testcode": "assert previous_palindrome(12321) == 1221\n",
        "test": "assert previous_palindrome(99)==88\nassert previous_palindrome(1221)==1111\nassert previous_palindrome(120)==111",
        "canonical_solution": "def previous_palindrome(num):\r\n    for x in range(num-1,0,-1):\r\n        if str(x) == str(x)[::-1]:\r\n            return x"
    },
    {
        "number": 910,
        "prompt": "Write a function to validate a gregorian date.\ndef check_date(m, d, y):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    if m < 1 or m > 12:\n        return False\n    if y < 1900 or y > 2099:\n        return False\n    if d < 1 or d > 31:\n        return False\n    if m == 2:\n        if y % 4 == 0 and (y % 100 != 0 or y % 400 == 0):\n            return d <= 29\n        else:\n            return d <= 28\n    elif m in [4, 6, 9, 11]:\n        return d <= 30\n    else:\n        return d <= 31\n\n#Testing the function\nprint(check_date(2, 29, 2016)) # True\nprint(check_date(2, 30, 2016)) # False\nprint(check_date(2, 29, 2020)) # True\nprint(check_date(2, 29, 2015)) # False\nprint(check_date(2, 29, 2000)) # False\nprint(check_date(2, 29, 20000)) # True\nprint(check_date(4, 31, 2020)) # True\nprint(check_date(4, 32, 2020)) # False\nprint(check_date(13, 31, 202",
        "generated_testcode": "assert check_date(2, 29, 2020) == True\n",
        "test": "assert check_date(11,11,2002)==True\nassert check_date(13,11,2002)==False\nassert check_date('11','11','2002')==True",
        "canonical_solution": "import datetime\r\ndef check_date(m, d, y):\r\n    try:\r\n        m, d, y = map(int, (m, d, y))\r\n        datetime.date(y, m, d)\r\n        return True\r\n    except ValueError:\r\n        return False"
    },
    {
        "number": 911,
        "prompt": "Write a function to compute maximum product of three numbers of a given array of integers using heap queue algorithm.\ndef maximum_product(nums):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    max1 = heapq.nlargest(1, nums)\n    max2 = heapq.nlargest(2, nums)\n    max3 = heapq.nlargest(3, nums)\n    min1 = heapq.nsmallest(1, nums)\n    min2 = heapq.nsmallest(2, nums)\n\n    if max1[0] * max2[0] * max3[0] > max1[0] * min1[0] * min2[0]:\n        return max1[0] * max2[0] * max3[0]\n    else:\n        return max1[0] * min1[0] * min2[0]\n\n# Test case\nprint(maximum_product([-4, -3, -2, -1, 6, 5])) # Output: 360\nprint(maximum_product([-10, -10, 5, 2, 6])) # Output: 500\nprint(maximum_product([-2, -3, -10, 5, 0, 6, 8, 10])) # Output: 1600\nprint(maximum_product([1, 2, 3, 4, 5, 6])) # Output: 360\nprint(maximum_product([-1, -2, 0, 2, 3])) # Output: 6\nprint(maximum_product([-",
        "generated_testcode": "assert maximum_product([1, 2, 3, 4, 5]) == 60\n",
        "test": "assert maximum_product( [12, 74, 9, 50, 61, 41])==225700\nassert maximum_product([25, 35, 22, 85, 14, 65, 75, 25, 58])==414375\nassert maximum_product([18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1])==2520",
        "canonical_solution": "def maximum_product(nums):\r\n    import heapq\r\n    a, b = heapq.nlargest(3, nums), heapq.nsmallest(2, nums)\r\n    return max(a[0] * a[1] * a[2], a[0] * b[0] * b[1])"
    },
    {
        "number": 912,
        "prompt": "Write a function to find ln, m lobb number.\ndef binomial_coeff(n, k): \n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": " \n    # calculate the numerator and denominator values \n    num = 1\n    den = 1\n    for i in range(1, k + 1): \n        num *= (n - i + 1) \n        den *= i \n  \n    return num // den \n  \ndef find_lobb(n): \n    for i in range(1, n + 1): \n        # calculate the binomial coefficient \n        coeff = binomial_coeff(n, i) \n        # calculate the ln value \n        ln = n * (n - 1) // 2\n        if coeff == ln: \n            return i \n  \n    return -1\n  \n# test the function \nn = 10\nprint(\"The lobb number of\", n, \"is\", find_lobb(n)) ",
        "generated_testcode": "assert binomial_coeff(5, 3) == 10\n",
        "test": "assert int(lobb_num(5, 3)) == 35\nassert int(lobb_num(3, 2)) == 5\nassert int(lobb_num(4, 2)) == 20",
        "canonical_solution": "def binomial_coeff(n, k): \r\n\tC = [[0 for j in range(k + 1)] \r\n\t\t\tfor i in range(n + 1)] \r\n\tfor i in range(0, n + 1): \r\n\t\tfor j in range(0, min(i, k) + 1): \r\n\t\t\tif (j == 0 or j == i): \r\n\t\t\t\tC[i][j] = 1\r\n\t\t\telse: \r\n\t\t\t\tC[i][j] = (C[i - 1][j - 1] \r\n\t\t\t\t\t\t\t+ C[i - 1][j]) \r\n\treturn C[n][k] \r\ndef lobb_num(n, m): \r\n\treturn (((2 * m + 1) *\r\n\t\tbinomial_coeff(2 * n, m + n)) \r\n\t\t\t\t\t/ (m + n + 1))"
    },
    {
        "number": 913,
        "prompt": "Write a function to check for a number at the end of a string.\ndef end_num(string):\n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    if string[-1].isdigit():\n        return True\n    else:\n        return False\n\n#Test the function\nprint(end_num(\"hello123\")) #True\nprint(end_num(\"hello\")) #False\nprint(end_num(\"123world\")) #True\nprint(end_num(\"world123hello\")) #False\n\n#Write a function to check if a string has a specific substring\ndef has_substring(string, substring):\n    if substring in string:\n        return True\n    else:\n        return False\n\n#Test the function\nprint(has_substring(\"hello world\", \"hello\")) #True\nprint(has_substring(\"hello world\", \"goodbye\")) #False\nprint(has_substring(\"hello world\", \"world\")) #True\nprint(has_substring(\"hello world\", \"world hello\")) #False\n\n#Write a function to reverse a string\ndef reverse_string(string):\n    return string[::-1]\n\n#Test the function\nprint(reverse_string(\"hello world\")) #dlrow olleh\n\n#Write a function to check if a string is a palindrome\ndef is_palindrome(string):\n    if string == string[::-1]:\n        return True\n    else:\n        return False\n\n#Test the function\nprint(is_palindrome(\"racecar\")) #True\nprint(is_palindrome(\"hello\")) #False\nprint(is_palindrome(\"level\")) #True\n\n#Write a function to replace all occurrences of a",
        "generated_testcode": "assert end_num(\"hello123\") == True\n",
        "test": "assert end_num('abcdef')==False\nassert end_num('abcdef7')==True\nassert end_num('abc')==False",
        "canonical_solution": "import re\r\ndef end_num(string):\r\n    text = re.compile(r\".*[0-9]$\")\r\n    if text.match(string):\r\n        return True\r\n    else:\r\n        return False"
    },
    {
        "number": 914,
        "prompt": "Write a python function to check whether the given string is made up of two alternating characters or not.\ndef is_Two_Alter(s):  \n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    if len(s)<2: \n        return False \n    else: \n        if s[0] == s[1]: \n            return False \n        else: \n            for i in range(2, len(s), 2): \n                if s[i] == s[i-2]: \n                    return False \n            return True \n\ns = input()\nif is_Two_Alter(s): \n    print(\"YES\") \nelse: \n    print(\"NO\") ",
        "generated_testcode": "assert is_Two_Alter(\"AABBCC\") == True\n",
        "test": "assert is_Two_Alter(\"abab\") == True\nassert is_Two_Alter(\"aaaa\") == False\nassert is_Two_Alter(\"xyz\") == False",
        "canonical_solution": "def is_Two_Alter(s):  \r\n    for i in range (len( s) - 2) : \r\n        if (s[i] != s[i + 2]) : \r\n            return False\r\n    if (s[0] == s[1]): \r\n        return False\r\n    return True"
    },
    {
        "number": 915,
        "prompt": "Write a function to rearrange positive and negative numbers in a given array using lambda function.\ndef rearrange_numbs(array_nums):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    negative = list(filter(lambda x: x < 0, array_nums))\n    positive = list(filter(lambda x: x > 0, array_nums))\n    zero = list(filter(lambda x: x == 0, array_nums))\n    return negative + zero + positive\n\n\n\n# Example usage:\narray_nums = [-2, 1, 0, -3, 12, 5, 6, -13, -4, 0, -7, 2, -1, 3, -6]\nprint(rearrange_numbs(array_nums))\n",
        "generated_testcode": "assert rearrange_numbs([1, -2, 3, -4, 5, 6, -7]) == [-2, -4, -7, 1, 3, 5]\n",
        "test": "assert rearrange_numbs([-1, 2, -3, 5, 7, 8, 9, -10])==[2, 5, 7, 8, 9, -10, -3, -1]\nassert rearrange_numbs([10,15,14,13,-18,12,-20])==[10, 12, 13, 14, 15, -20, -18]\nassert rearrange_numbs([-20,20,-10,10,-30,30])==[10, 20, 30, -30, -20, -10]",
        "canonical_solution": "def rearrange_numbs(array_nums):\r\n  result = sorted(array_nums, key = lambda i: 0 if i == 0 else -1 / i)\r\n  return result "
    },
    {
        "number": 916,
        "prompt": "Write a function to find if there is a triplet in the array whose sum is equal to a given value.\ndef find_triplet_array(A, arr_size, sum): \n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    A.sort() \n  \n    # Fix the first element as A[0] \n    for i in range(0, arr_size-2): \n        # Fix the second element as A[i+1] \n        # Find the third element now. \n        # Use two pointers, one at A[i+2] and one at A[arr_size-1] \n        j = i+1\n        k = arr_size-1\n        while (j < k): \n            if (A[i] + A[j] + A[k] == sum): \n                return True\n            elif (A[i] + A[j] + A[k] < sum): \n                j += 1\n            else: \n                k -= 1\n    # If we reach here, then no triplet found \n    return False\n  \n# Driver program to test above function \nA = [1, 4, 45, 13, 3, 7, 2, 8, 3, 10] \narr_size = len(A) \nsum = 23\nprint(\"Triplet found:\" + str(find_triplet_array(A, arr_size, sum)) ",
        "generated_testcode": "assert find_triplet_array([1, 4, 45, 6, 10, 8, 7, 2, 12, 11, 26, 18, 5], 9) == True\n",
        "test": "assert find_triplet_array([1, 4, 45, 6, 10, 8], 6, 22) == (4, 10, 8)\nassert find_triplet_array([12, 3, 5, 2, 6, 9], 6, 24) == (12, 3, 9)\nassert find_triplet_array([1, 2, 3, 4, 5], 5, 9) == (1, 3, 5)",
        "canonical_solution": "def find_triplet_array(A, arr_size, sum): \r\n\tfor i in range( 0, arr_size-2): \r\n\t\tfor j in range(i + 1, arr_size-1): \r\n\t\t\tfor k in range(j + 1, arr_size): \r\n\t\t\t\tif A[i] + A[j] + A[k] == sum: \r\n\t\t\t\t\treturn  A[i],A[j],A[k] \r\n\t\t\t\t\treturn True\r\n\treturn False"
    },
    {
        "number": 917,
        "prompt": "Write a function to find the sequences of one upper case letter followed by lower case letters.\ndef text_uppercase_lowercase(text):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    #Create an empty list to store the sequences\n    sequences = []\n    #Check if the first character is uppercase\n    if text[0].isupper():\n        #Iterate over the text\n        for i in range(len(text)):\n            #If the character is lowercase and the previous character is uppercase, append the sequence to the list\n            if text[i].islower() and text[i-1].isupper():\n                sequences.append(text[i-1:i+1])\n    #Return the list of sequences\n    return sequences\n\n#Test the function with some examples\nprint(text_uppercase_lowercase(\"HeLLo WoRLd\")) #['He', 'oW']\nprint(text_uppercase_lowercase(\"aBcDeFgHiJkLmNoPqRsTuVwXyZ\")) #[]\nprint(text_uppercase_lowercase(\"HELLO wOrld\")) #['HE', 'oW']\nprint(text_uppercase_lowercase(\"Hello world\")) #[]\nprint(text_uppercase_lowercase(\"Hello World\")) #[]\nprint(text_uppercase_lowercase(\"Hello WORLD\")) #[]\nprint(text_uppercase_lowercase(\"HELLO WORLD\")) #['HE', 'LD']\nprint(text_uppercase_lowercase(\"PYTHON IS AWESOME\")) #['PY', 'TH', 'IS', 'OM', 'AW', 'ME'] ",
        "generated_testcode": "assert text_uppercase_lowercase(\"Hello world\") == True\n",
        "test": "assert text_uppercase_lowercase(\"AaBbGg\")==('Found a match!')\nassert text_uppercase_lowercase(\"aA\")==('Not matched!')\nassert text_uppercase_lowercase(\"PYTHON\")==('Not matched!')",
        "canonical_solution": "import re\r\ndef text_uppercase_lowercase(text):\r\n        patterns = '[A-Z]+[a-z]+$'\r\n        if re.search(patterns, text):\r\n                return 'Found a match!'\r\n        else:\r\n                return ('Not matched!')"
    },
    {
        "number": 918,
        "prompt": "Write a function to count coin change.\ndef coin_change(S, m, n): \n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    dp = [[0 for i in range(n+1)] for j in range(m)] \n\n    for i in range(m): \n        dp[i][0] = 1\n\n    for i in range(1, m): \n        for j in range(1, n+1): \n            if(j < S[i-1]): \n                dp[i][j] = dp[i-1][j] \n            else: \n                dp[i][j] = dp[i-1][j] + dp[i][j-S[i-1]] \n\n    return dp[m-1][n] \n\n# test the function \nS = [1, 2, 3] \nm = len(S) \nn = 4\nprint(coin_change(S, m, n)) ",
        "generated_testcode": "assert coin_change([1, 2, 3], 4, 4) == 4\n",
        "test": "assert coin_change([1, 2, 3],3,4)==4\nassert coin_change([4,5,6,7,8,9],6,9)==2\nassert coin_change([4,5,6,7,8,9],6,4)==1",
        "canonical_solution": "def coin_change(S, m, n): \r\n    table = [[0 for x in range(m)] for x in range(n+1)] \r\n    for i in range(m): \r\n        table[0][i] = 1\r\n    for i in range(1, n+1): \r\n        for j in range(m): \r\n            x = table[i - S[j]][j] if i-S[j] >= 0 else 0\r\n            y = table[i][j-1] if j >= 1 else 0 \r\n            table[i][j] = x + y   \r\n    return table[n][m-1] "
    },
    {
        "number": 919,
        "prompt": "Write a python function to multiply all items in the list.\ndef multiply_list(items):\n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    result = 1\n    for item in items:\n        result *= item\n    return result\n\n# Test the function with the example list\nprint(multiply_list([2, 3, 4, 5, 6, 7, 8, 9])) # Should output 36288000\n\n# Test the function with a different list\nprint(multiply_list([1, 2, 3, 4, 5])) # Should output 24\n\n# Test the function with an empty list\nprint(multiply_list([])) # Should output 1\n\n# Test the function with a list of negative numbers\nprint(multiply_list([-1, -2, -3, -4, -5])) # Should output 144\n\n# Test the function with a list with one item\nprint(multiply_list([243])) # Should output 243\n",
        "generated_testcode": "assert multiply_list([1, 2, 3, 4, 5]) == 1 * 2 * 3 * 4 * 5\n",
        "test": "assert multiply_list([1,-2,3]) == -6\nassert multiply_list([1,2,3,4]) == 24\nassert multiply_list([3,1,2,3]) == 18",
        "canonical_solution": "def multiply_list(items):\r\n    tot = 1\r\n    for x in items:\r\n        tot *= x\r\n    return tot"
    },
    {
        "number": 920,
        "prompt": "Write a function to remove all tuples with all none values in the given tuple list.\ndef remove_tuple(test_list):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    return [t for t in test_list if not all(v is None for v in t)]\n\n# Example usage:\ntest_list = [(1, None, None), (None, 2, None), (None, None, 3), (4, 5, None), (None, None, None)]\nresult = remove_tuple(test_list)\nprint(result)  # Output: [(1, None, None), (None, 2, None), (None, None, 3)]\n\n# Using list comprehension and filtering out the tuples with all None values\n[t for t in test_list if not all(v is None for v in t)] ",
        "generated_testcode": "assert remove_tuple(test_list) == expected_output\n\n# Test the function with the following input\ntest_list = [(1, 2, 3), (None, None), (4, 5, None), (6, None, 7), (None, None, None), (8, 9, 10)]\nexpected_output = [(1, 2, 3), (4, 5, None), (6, None, 7), (8, 9, 10)]\n\n",
        "test": "assert remove_tuple([(None, 2), (None, None), (3, 4), (12, 3), (None, )] ) == '[(None, 2), (3, 4), (12, 3)]'\nassert remove_tuple([(None, None), (None, None), (3, 6), (17, 3), (None,1 )] ) == '[(3, 6), (17, 3), (None, 1)]'\nassert remove_tuple([(1, 2), (2, None), (3, None), (24, 3), (None, None )] ) == '[(1, 2), (2, None), (3, None), (24, 3)]'",
        "canonical_solution": "def remove_tuple(test_list):\r\n  res = [sub for sub in test_list if not all(ele == None for ele in sub)]\r\n  return (str(res)) "
    },
    {
        "number": 921,
        "prompt": "Write a function to perform chunking of tuples each of size n.\ndef chunk_tuples(test_tup, N):\n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    return [test_tup[i:i + N] for i in range(0, len(test_tup), N)]\n\n# test the function with sample data\nmy_tup = (1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12)\nprint(chunk_tuples(my_tup, 3))\n# Output: [(1, 2, 3), (4, 5, 6), (7, 8, 9), (10, 11, 12)]\n\n# Using the above function, create a function to chunk a list of tuples into N-sized tuples\ndef chunk_list_of_tuples(test_list, N):\n    return [tuple(test_list[i:i + N]) for i in range(0, len(test_list), N)]\n\n# test the function with sample data\nmy_list = [(1, 2, 3), (4, 5, 6), (7, 8, 9), (10, 11, 12)]\nprint(chunk_list_of_tuples(my_list, 2))\n# Output: [((1, 2, 3), (4, 5, 6)), ((7, 8, 9), (10, 11, 12)]\n\n# Using the above function, create a function to chunk a list of lists into",
        "generated_testcode": "assert chunk_tuples(('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p'), 3) == [('a', 'b', 'c'), ('d', 'e', 'f'), ('g', 'h', 'i'), ('j', 'k', 'l'), ('m', 'n', 'o'), ('p',)]\n",
        "test": "assert chunk_tuples((10, 4, 5, 6, 7, 6, 8, 3, 4), 3) == [(10, 4, 5), (6, 7, 6), (8, 3, 4)]\nassert chunk_tuples((1, 2, 3, 4, 5, 6, 7, 8, 9), 2) == [(1, 2), (3, 4), (5, 6), (7, 8), (9,)]\nassert chunk_tuples((11, 14, 16, 17, 19, 21, 22, 25), 4) == [(11, 14, 16, 17), (19, 21, 22, 25)]",
        "canonical_solution": "def chunk_tuples(test_tup, N):\r\n  res = [test_tup[i : i + N] for i in range(0, len(test_tup), N)]\r\n  return (res) "
    },
    {
        "number": 922,
        "prompt": "Write a function to find a pair with the highest product from a given array of integers.\ndef max_product(arr): \n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    n = len(arr)\n    max1 = max2 = 0\n    for i in range(n): \n        if (arr[i] > max1): \n            max2 = max1 \n            max1 = arr[i] \n        elif (arr[i] > max2: \n            max2 = arr[i] \n    return max1 * max2 \n\n# Test the function \narr = [10, 20, 30, 40, 50, 60] \nprint(\"Maximum product is\", max_product(arr)) \n\n# Test the function with a negative number \narr = [10, 20, 30, -40, 50, 60] \nprint(\"Maximum product is\", max_product(arr)) ",
        "generated_testcode": "assert max_product([1, 2, 3, 4, 5]) == 20\n",
        "test": "assert max_product([1, 2, 3, 4, 7, 0, 8, 4])==(7, 8)\nassert max_product([0, -1, -2, -4, 5, 0, -6])==(-4, -6)\nassert max_product([1, 3, 5, 6, 8, 9])==(8,9)",
        "canonical_solution": "def max_product(arr): \r\n    arr_len = len(arr) \r\n    if (arr_len < 2): \r\n        return None     \r\n    x = arr[0]; y = arr[1]    \r\n    for i in range(0, arr_len): \r\n        for j in range(i + 1, arr_len): \r\n            if (arr[i] * arr[j] > x * y): \r\n                x = arr[i]; y = arr[j] \r\n    return x,y   "
    },
    {
        "number": 923,
        "prompt": "Write a function to find the length of the shortest string that has both str1 and str2 as subsequences.\ndef super_seq(X, Y, m, n):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    dp = [[0] * (n+1) for _ in range(m+1)]\n    \n    for i in range(m+1):\n        for j in range(n+1):\n            if i == 0 or j == 0:\n                dp[i][j] = 0\n            elif X[i-1] == Y[j-1]:\n                dp[i][j] = dp[i-1][j-1] + 1\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n                \n    return dp[m][n]\n    \n    # if dp[m][n] != 0:\n    #     return X[m-1]\n    # else:\n    #     return None\n        \nX = input()\nY = input()\nm = len(X)\nn = len(Y)\nprint(super_seq(X, Y, m, n))\n\n# Example usage:\n# X = \"AGGTAB\"\n# Y = \"GXTXAYB\"\n# m = len(X)\n# n = len(Y)\n# print(super_seq(X, Y, m, n)) # Output: 4\n# Explanation: The shortest string that has both \"AGGT\" and \"GTXAY\" as subsequences is \"AGGTXAYB\" with length 6. ",
        "generated_testcode": "assert super_seq(\"AGGTAB\", \"GXTXAYB\", 6, 6) == 4\n",
        "test": "assert super_seq(\"AGGTAB\", \"GXTXAYB\", 6, 7) == 9\nassert super_seq(\"feek\", \"eke\", 4, 3) == 5\nassert super_seq(\"PARRT\", \"RTA\", 5, 3) == 6",
        "canonical_solution": "def super_seq(X, Y, m, n):\r\n\tif (not m):\r\n\t\treturn n\r\n\tif (not n):\r\n\t\treturn m\r\n\tif (X[m - 1] == Y[n - 1]):\r\n\t\treturn 1 + super_seq(X, Y, m - 1, n - 1)\r\n\treturn 1 + min(super_seq(X, Y, m - 1, n),\tsuper_seq(X, Y, m, n - 1))"
    },
    {
        "number": 924,
        "prompt": "Write a function to find maximum of two numbers.\ndef max_of_two( x, y ):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    if x > y:\n        return x\n    else:\n        return y\n\n#Testing the function\nprint(max_of_two(4, 6))  # Output: 6\nprint(max_of_two(10, -5)) # Output: 10\n\n# Python provides a built-in function to find the maximum of two numbers\nmax(4, 6) # Output: 6\nmax(-5, 10) # Output: 10\n\n# Python also provides a built-in function to find the maximum of two or more numbers\nmax(4, 6, 8, -1) # Output: 8 \nmax(-5, 10, 20, 30) # Output: 30 \n\n# Python also provides a built-in function to find the minimum of two numbers\nmin(4, 6) # Output: 4\nmin(-5, 10) # Output: -5\n\n# Python also provides a built-in function to find the minimum of two or more numbers\nmin(4, 6, 8, -1) # Output: -1\nmin(-5, 10, 20, 30) # Output: -5 ",
        "generated_testcode": "assert max_of_two( 5, 10 ) == 10\n",
        "test": "assert max_of_two(10,20)==20\nassert max_of_two(19,15)==19\nassert max_of_two(-10,-20)==-10",
        "canonical_solution": "def max_of_two( x, y ):\r\n    if x > y:\r\n        return x\r\n    return y"
    },
    {
        "number": 925,
        "prompt": "Write a python function to calculate the product of all the numbers of a given tuple.\ndef mutiple_tuple(nums):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    product = 1\n    for i in nums:\n        product *= i\n    return product\n\n#Test the function with an example\nprint(mutiple_tuple((2, 3, 4)) #should return 24\nprint(mutiple_tuple((5, 10, 15)) #should return 750\nprint(mutiple_tuple((1, 2, 3, 4, 5)) #should return 120\nprint(mutiple_tuple((10, 20, 30, 40, 50)) #should return 1200000000\n",
        "generated_testcode": "assert mutiple_tuple((2, 3, 4, 5, 6) == 120\nprint(mutiple_tuple((2, 3, 4, 5, 6)) # should output 120\n\n",
        "test": "assert mutiple_tuple((4, 3, 2, 2, -1, 18)) == -864\nassert mutiple_tuple((1,2,3)) == 6\nassert mutiple_tuple((-2,-4,-6)) == -48",
        "canonical_solution": "def mutiple_tuple(nums):\r\n    temp = list(nums)\r\n    product = 1 \r\n    for x in temp:\r\n        product *= x\r\n    return product"
    },
    {
        "number": 926,
        "prompt": "Write a function to find n-th rencontres number.\ndef binomial_coeffi(n, k): \n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    if k == 0 or k == n: \n        return 1\n    else: \n        return binomial_coeffi(n-1, k-1) + binomial_coeffi(n-1, k) \n\ndef nth_rencontres_number(n): \n    k = 1\n    count = 0\n    while True: \n        count += binomial_coeffi(n, k)\n        if count >= n: \n            return k \n        k += 1\n  \n# Test the function \nn = 10\nprint(\"The\", n, \"-th Rencontres number is\", nth_rencontres_number(n)) \n  \n# Output: The 10 -th Rencontres number is 5\n",
        "generated_testcode": "assert binomial_coeffi(5, 2) == 10\n",
        "test": "assert rencontres_number(7, 2) == 924\nassert rencontres_number(3, 0) == 2\nassert rencontres_number(3, 1) == 3",
        "canonical_solution": "def binomial_coeffi(n, k): \r\n\tif (k == 0 or k == n): \r\n\t\treturn 1\r\n\treturn (binomial_coeffi(n - 1, k - 1) \r\n\t\t+ binomial_coeffi(n - 1, k)) \r\ndef rencontres_number(n, m): \r\n\tif (n == 0 and m == 0): \r\n\t\treturn 1\r\n\tif (n == 1 and m == 0): \r\n\t\treturn 0\r\n\tif (m == 0): \r\n\t\treturn ((n - 1) * (rencontres_number(n - 1, 0)+ rencontres_number(n - 2, 0))) \r\n\treturn (binomial_coeffi(n, m) * rencontres_number(n - m, 0))"
    },
    {
        "number": 927,
        "prompt": "Write a function to calculate the height of the given binary tree.\n\tdef __init__(self, data): \n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "\t\tself.data = data \n\t\tself.left = None\n\t\tself.right = None\n\ndef calculateHeight(root): \n\tif root is None: \n\t\treturn 0\n\telse: \n\t\tleftHeight = calculateHeight(root.left) \n\t\trightHeight = calculateHeight(root.right) \n\n\t\tif leftHeight > rightHeight: \n\t\t\treturn leftHeight + 1\n\t\telse: \n\t\t\treturn rightHeight + 1\n\nroot = newNode(1) \nroot.left = newNode(2) \nroot.right = newNode(3) \nroot.left.left = newNode(4) \nroot.left.right = newNode(5) \nroot.right.left = newNode(6) \nroot.right.right = newNode(7) \nroot.left.left.left = newNode(8) \nroot.left.right.left = newNode(9) \nroot.left.right.right = newNode(10) \nprint (\"Height of the binary tree is\", calculateHeight(root)) \n\nOutput: Height of the binary tree is 4 \n\n\nIn the above example, the height of the binary tree is 4. \nExplanation: \nThe height of the binary tree is the number of nodes from the root to the furthest leaf node. \nHere, the root node is at 0 height. The left subtree has a height of 2 and the",
        "generated_testcode": "assert (height(None) == 0)\n",
        "test": "assert (max_height(root)) == 3\nassert (max_height(root1)) == 5 \nassert (max_height(root2)) == 4",
        "canonical_solution": "class Node: \r\n\tdef __init__(self, data): \r\n\t\tself.data = data \r\n\t\tself.left = None\r\n\t\tself.right = None\r\ndef max_height(node): \r\n\tif node is None: \r\n\t\treturn 0 ; \r\n\telse : \r\n\t\tleft_height = max_height(node.left) \r\n\t\tright_height = max_height(node.right) \r\n\t\tif (left_height > right_height): \r\n\t\t\treturn left_height+1\r\n\t\telse: \r\n\t\t\treturn right_height+1"
    },
    {
        "number": 928,
        "prompt": "Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\ndef change_date_format(dt):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    date_parts = dt.split(\"-\")\n    new_date = date_parts[2] + \"-\" + date_parts[1] + \"-\" + date_parts[0]\n    return new_date\n\n# Example usage:\nprint(change_date_format(\"2021-09-15\"))  # Output: \"15-09-2021\"\n\n# Test the function with some test cases\nprint(change_date_format(\"2021-09-15\")) \nprint(change_date_format(\"2021-03-25\")) \nprint(change_date_format(\"2010-10-05\")) ",
        "generated_testcode": "assert change_date_format(\"2021-05-15\") == \"15-05-2021\"\n",
        "test": "assert change_date_format('2026-01-02')=='02-01-2026'\nassert change_date_format('2021-01-04')=='04-01-2021'\nassert change_date_format('2030-06-06')=='06-06-2030'",
        "canonical_solution": "import re\r\ndef change_date_format(dt):\r\n        return re.sub(r'(\\d{4})-(\\d{1,2})-(\\d{1,2})', '\\\\3-\\\\2-\\\\1', dt)\r\n        return change_date_format(dt)"
    },
    {
        "number": 929,
        "prompt": "Write a function to count repeated items of a tuple.\ndef count_tuplex(tuplex,value):  \n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    count = 0\n    for i in tuplex:\n        if i == value:\n            count += 1\n    return count\n\n# Testing the function\nmy_tuple = (1,2,3,4,5,6,4,3,1)\nprint(count_tuplex(my_tuple,3)) # Output: 2\nprint(count_tuplex(my_tuple,7)) # Output: 0 ",
        "generated_testcode": "assert count_tuplex((1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,10), 1) == 3\n",
        "test": "assert count_tuplex((2, 4, 5, 6, 2, 3, 4, 4, 7),4)==3\nassert count_tuplex((2, 4, 5, 6, 2, 3, 4, 4, 7),2)==2\nassert count_tuplex((2, 4, 7, 7, 7, 3, 4, 4, 7),7)==4",
        "canonical_solution": "def count_tuplex(tuplex,value):  \r\n  count = tuplex.count(value)\r\n  return count"
    },
    {
        "number": 930,
        "prompt": "Write a function that matches a string that has an a followed by zero or more b's by using regex.\ndef text_match(text):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    pattern = r\"ab*\"\n    return bool(re.match(pattern, text))\n\n# Test cases\nprint(text_match(\"a\")) # True\nprint(text_match(\"ab\")) # True\nprint(text_match(\"abb\")) # True\nprint(text_match(\"abbb\")) # True\nprint(text_match(\"c\")) # False\nprint(text_match(\"aab\")) # False\nprint(text_match(\"b\")) # False\nprint(text_match(\"\")) # True\n\n# The regex pattern \"ab*\" matches any string that starts with an \"a\" followed by zero or more \"b\"s. ",
        "generated_testcode": "assert text_match(\"ab\") == True\n",
        "test": "assert text_match(\"msb\") == 'Not matched!'\nassert text_match(\"a0c\") == 'Found a match!'\nassert text_match(\"abbc\") == 'Found a match!'",
        "canonical_solution": "import re\r\ndef text_match(text):\r\n        patterns = 'ab*?'\r\n        if re.search(patterns,  text):\r\n                return ('Found a match!')\r\n        else:\r\n                return ('Not matched!')"
    },
    {
        "number": 931,
        "prompt": "Write a function to calculate the sum of series 1\u00b3+2\u00b3+3\u00b3+\u2026.+n\u00b3.\ndef sum_series(number):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    total = 0\n    for i in range(1,number+1):\n        total += i**3\n    return total\nprint(sum_series(5))\n\n#Function to find the factorial of a number\ndef factorial(n):\n    fact = 1\n    for i in range(1,n+1):\n        fact = fact*i\n    return fact\nprint(factorial(5))\n\n#Function to find the sum of digits of a number\ndef sum_of_digits(number):\n    total = 0\n    for digit in str(number):\n        total += int(digit)\n    return total\nprint(sum_of_digits(12345))\n\n#Function to check if a number is a prime or not\ndef is_prime(number):\n    if number < 2:\n        return False\n    for i in range(2,number):\n        if number%i == 0:\n            return False\n    return True\nprint(is_prime(7))\n\n#Function to check if a number is a palindrome or not\ndef is_palindrome(number):\n    return str(number) == str(number)[::-1]\nprint(is_palindrome(121))\n\n#Function to find the factorial of a number using recursion\ndef factorial(n):\n    if n == 1:\n        return 1\n    else:\n        return n*factorial(n-1)\nprint(factorial(5))\n\n#",
        "generated_testcode": "assert sum_series(3) == 36\n",
        "test": "assert sum_series(7)==784\nassert sum_series(5)==225\nassert sum_series(15)==14400",
        "canonical_solution": "import math \r\ndef sum_series(number):\r\n total = 0\r\n total = math.pow((number * (number + 1)) /2, 2)\r\n return total"
    },
    {
        "number": 932,
        "prompt": "Write a function to remove duplicate words from a given list of strings.\ndef remove_duplic_list(l):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    return list(set(l)\n\\end{code}\n\nThis function creates a set out of the given list and then converts it back to a list, effectively removing all duplicates.\n\nAnswer: \\begin{code}\ndef remove_duplicate_words(words):\n    unique_words = []\n    for word in words:\n        if word not in unique_words:\n            unique_words.append(word)\n    return unique_words\n\\end{code}\n\nAnswer: \\begin{code}\ndef remove_duplicate_words(words):\n    unique_words = []\n    for word in words:\n        if word not in unique_words:\n            unique_words.append(word)\n    return unique_words\n\\end{code}\n\nThis function creates a new list and loops through each word in the input list. If the word is not already in the new list, it is added. This way, only unique words are added to the list and duplicates are ignored.\n\nComment: The only issue is that you can't modify a list while iterating over it. You'll get a \"RuntimeError: Modifying list while iterating\". Use `unique_words = set()` and `unique_words.add(word)` instead.",
        "generated_testcode": "assert remove_duplic_list(['apple', 'banana', 'orange', 'apple', 'grape', 'apple', 'orange']) == ['apple', 'banana', 'orange', 'grape']\n",
        "test": "assert remove_duplic_list([\"Python\", \"Exercises\", \"Practice\", \"Solution\", \"Exercises\"])==['Python', 'Exercises', 'Practice', 'Solution']\nassert remove_duplic_list([\"Python\", \"Exercises\", \"Practice\", \"Solution\", \"Exercises\",\"Java\"])==['Python', 'Exercises', 'Practice', 'Solution', 'Java']\nassert remove_duplic_list([\"Python\", \"Exercises\", \"Practice\", \"Solution\", \"Exercises\",\"C++\",\"C\",\"C++\"])==['Python', 'Exercises', 'Practice', 'Solution','C++','C']",
        "canonical_solution": "def remove_duplic_list(l):\r\n    temp = []\r\n    for x in l:\r\n        if x not in temp:\r\n            temp.append(x)\r\n    return temp"
    },
    {
        "number": 933,
        "prompt": "Write a function to convert camel case string to snake case string by using regex.\ndef camel_to_snake(text):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    return re.sub(r'(?<!^)(?=[A-Z])', '_', text).lower()\n\n# Test the function with some examples\nprint(camel_to_snake(\"camelCase\"))  # Output: camel_case\nprint(camel_to_snake(\"camelCaseString\"))  # Output: camel_case_string\nprint(camel_to_snake(\"CamelCaseToSnake\"))  # Output: camel_case_to_snake ",
        "generated_testcode": "assert camel_to_snake(\"helloWorld\") == \"hello_world\"\n",
        "test": "assert camel_to_snake('GoogleAssistant') == 'google_assistant'\nassert camel_to_snake('ChromeCast') == 'chrome_cast'\nassert camel_to_snake('QuadCore') == 'quad_core'",
        "canonical_solution": "import re\r\ndef camel_to_snake(text):\r\n  str1 = re.sub('(.)([A-Z][a-z]+)', r'\\1_\\2', text)\r\n  return re.sub('([a-z0-9])([A-Z])', r'\\1_\\2', str1).lower()"
    },
    {
        "number": 934,
        "prompt": "Write a function to find the nth delannoy number.\ndef dealnnoy_num(n, m): \n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    if n <= 0 or m <= 0:\n        return 1\n    elif n == 1 or m == 1:\n        return 1\n    elif n == 2 or m == 2:\n        return 3\n    elif n > 2 and m > 2:\n        return (dealnnoy_num(n-1, m-1) + dealnnoy_num(n-2, m) + dealnnoy_num(n-1, m-2))\n\nn = 4\nm = 4\nprint(dealnnoy_num(n, m)) ",
        "generated_testcode": "assert dealnnoy_num(5, 2) == 15\n",
        "test": "assert dealnnoy_num(3, 4) == 129\nassert dealnnoy_num(3, 3) == 63\nassert dealnnoy_num(4, 5) == 681",
        "canonical_solution": "def dealnnoy_num(n, m): \r\n\tif (m == 0 or n == 0) : \r\n\t\treturn 1\r\n\treturn dealnnoy_num(m - 1, n) + dealnnoy_num(m - 1, n - 1) + dealnnoy_num(m, n - 1)"
    },
    {
        "number": 935,
        "prompt": "Write a function to calculate the sum of series 1\u00b2+2\u00b2+3\u00b2+\u2026.+n\u00b2.\ndef series_sum(number):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    sum = 0\n    for i in range(1, number+1):\n        sum += i**2\n    return sum\nprint(series_sum(5)) # Output: 55\nprint(series_sum(10)) # Output: 385\nprint(series_sum(15)) # Output: 14210\n\n# To calculate the sum of series 1\u00b2+2\u00b2+3\u00b2+\u2026+n\u00b2 using a loop and a variable 'sum'\ndef series_sum(number):\n    sum = 0\n    for i in range(1, number+1):\n        sum += i**2\n    return sum\nprint(series_sum(5)) # Output: 55\nprint(series_sum(10)) # Output: 385\nprint(series_sum(15)) # Output: 14210 ",
        "generated_testcode": "assert series_sum(5) == 55 # 1\u00b2+2\u00b2+3\u00b2+4\u00b2+5\u00b2 = 1+4+9+16+25 = 31\n",
        "test": "assert series_sum(6)==91\nassert series_sum(7)==140\nassert series_sum(12)==650",
        "canonical_solution": "def series_sum(number):\r\n total = 0\r\n total = (number * (number + 1) * (2 * number + 1)) / 6\r\n return total"
    },
    {
        "number": 936,
        "prompt": "Write a function to re-arrange the given tuples based on the given ordered list.\ndef re_arrange_tuples(test_list, ord_list):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    result = []\n    for i in ord_list:\n        for j in test_list:\n            if i in j:\n                result.append(j)\n    return result\n\n\n# Test the function with sample input\ntest_list = [(1, 2, 3), (4, 1, 5), (3, 6, 8), (2, 5, 6), (4, 6, 1)]\nord_list = [2, 3, 5, 4, 6, 1]\nprint(re_arrange_tuples(test_list, ord_list))  # Output: [(4, 1, 5), (2, 5, 6), (3, 6, 8), (1, 2, 3), (4, 6, 1)]\n\n# Explanation: The function takes two arguments, test_list and ord_list. The function iterates through the ord_list and checks if the\n# elements are present in the tuples of test_list. If the element is present in the tuple, it adds it to the result list. Finally,\n# it returns the result list. The result list contains the tuples in the order of the elements of the ord_list. ",
        "generated_testcode": "assert re_arrange_tuples(test_list, ord_list) == [(1, 'a', 'apple'), (2, 'b', 'banana'), (3, 'c', 'cherry'), (4, 'd', 'date')]\n\n# Test the function with the following inputs\ntest_list = [(1, 'a', 'apple'), (2, 'b', 'banana'), (3, 'c', 'cherry'), (4, 'd', 'date')]\nord_list = [1, 2, 3, 4]\nprint(re_arrange_tuples(test_list, ord_list)) ",
        "test": "assert re_arrange_tuples([(4, 3), (1, 9), (2, 10), (3, 2)],  [1, 4, 2, 3]) == [(1, 9), (4, 3), (2, 10), (3, 2)]\nassert re_arrange_tuples([(5, 4), (2, 10), (3, 11), (4, 3)],  [3, 4, 2, 3]) == [(3, 11), (4, 3), (2, 10), (3, 11)]\nassert re_arrange_tuples([(6, 3), (3, 8), (5, 7), (2, 4)],  [2, 5, 3, 6]) == [(2, 4), (5, 7), (3, 8), (6, 3)]",
        "canonical_solution": "def re_arrange_tuples(test_list, ord_list):\r\n  temp = dict(test_list)\r\n  res = [(key, temp[key]) for key in ord_list]\r\n  return (res) "
    },
    {
        "number": 937,
        "prompt": "Write a function to count the most common character in a given string.\ndef max_char(str1):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    max_char = ''\n    count = 0\n    for key, value in char_count.items():\n        if value > count:\n            count = value\n            max_char = key\n    return max_char\n\n# Test the function\nprint(max_char(\"hello world\")) # Output: l\nprint(max_char(\"python is awesome\")) # Output: o\nprint(max_char(\"banana\")) # Output: a ",
        "generated_testcode": "assert max_char(\"hello world\") == \"l\"\n",
        "test": "assert max_char(\"hello world\")==('l')\nassert max_char(\"hello \")==('l')\nassert max_char(\"python pr\")==('p')",
        "canonical_solution": "from collections import Counter \r\ndef max_char(str1):\r\n    temp = Counter(str1) \r\n    max_char = max(temp, key = temp.get)\r\n    return max_char"
    },
    {
        "number": 938,
        "prompt": "Write a function to find three closest elements from three sorted arrays.\ndef find_closet(A, B, C, p, q, r): \n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    i = j = k = 0\n    n = len(A)\n    m = len(B)\n    o = len(C)\n    result = []\n    while i < n and j < m and k < o:\n        a = A[i]\n        b = B[j]\n        c = C[k]\n        if a == b == c:\n            result.append(a)\n            i += 1\n            j += 1\n            k += 1\n        elif a < b:\n            if a < c:\n                if b > c:\n                    result.append(a)\n                    i += 1\n                else:\n                    result.append(c)\n                    k += 1\n        else:\n            if b < c:\n                result.append(b)\n                j += 1\n            else:\n                result.append(c)\n                k += 1\n    return result\n\n\nA = [1, 2, 3, 4, 5, 6]\nB = [1, 2, 3, 4, 6, 7, 8]\nC = [2, 3, 4, 5, 7, 9, 10]\np = 3\nq = 3\nr = 4\nprint(find_closet(A, B, C, p, q, r)) # [4, 4, 4, 5]\n\n# Time complexity: O(n)\n# Space complexity",
        "generated_testcode": "assert find_closet(A, B, C, 0, 0, 0) == (1, 2, 3)\n",
        "test": "assert find_closet([1, 4, 10],[2, 15, 20],[10, 12],3,3,2) == (10, 15, 10)\nassert find_closet([20, 24, 100],[2, 19, 22, 79, 800],[10, 12, 23, 24, 119],3,5,5) == (24, 22, 23)\nassert find_closet([2, 5, 11],[3, 16, 21],[11, 13],3,3,2) == (11, 16, 11)",
        "canonical_solution": "import sys \r\n\r\ndef find_closet(A, B, C, p, q, r): \r\n\tdiff = sys.maxsize \r\n\tres_i = 0\r\n\tres_j = 0\r\n\tres_k = 0\r\n\ti = 0\r\n\tj = 0\r\n\tk = 0\r\n\twhile(i < p and j < q and k < r): \r\n\t\tminimum = min(A[i], min(B[j], C[k])) \r\n\t\tmaximum = max(A[i], max(B[j], C[k])); \r\n\t\tif maximum-minimum < diff: \r\n\t\t\tres_i = i \r\n\t\t\tres_j = j \r\n\t\t\tres_k = k \r\n\t\t\tdiff = maximum - minimum; \r\n\t\tif diff == 0: \r\n\t\t\tbreak\r\n\t\tif A[i] == minimum: \r\n\t\t\ti = i+1\r\n\t\telif B[j] == minimum: \r\n\t\t\tj = j+1\r\n\t\telse: \r\n\t\t\tk = k+1\r\n\treturn A[res_i],B[res_j],C[res_k]"
    },
    {
        "number": 939,
        "prompt": "Write a function to sort a list of dictionaries using lambda function.\ndef sorted_models(models):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": true,
        "answer": "    return sorted(models, key=lambda x: x['year'])\n\n#example\nmodels = [\n    {\"model\": \"BMW\", \"year\": 2018},\n    {\"model\": \"Audi\", \"year\": 2016},\n    {\"model\": \"Toyota\", \"year\": 2015},\n    {\"model\": \"Ford\", \"year\": 2019},\n    {\"model\": \"Tesla\", \"year\": 2017}\n]\n\nprint(sorted_models(models))\n\n#Output: [{'model': 'Toyota', 'year': 2015}, {'model': 'Audi', 'year': 2016}, {'model': 'BMW', 'year': 2018}, {'model': 'Ford', 'year': 2019}, {'model': 'Tesla', 'year': 2017}]\n\n#Using a lambda function, you can sort the list of dictionaries by any key in the dictionary. ",
        "generated_testcode": "assert sorted_models(models) == sorted(models, key=lambda x: x['name'])\n\n# Test the function with the following input\nmodels = [\n    {'name': 'A', 'price': 1000},\n    {'name': 'B', 'price': 200},\n    {'name': 'C', 'price': 50},\n    {'name': 'D', 'price': 150},\n    {'name': 'E', 'price': 75},\n]\n\n",
        "test": "assert sorted_models([{'make':'Nokia', 'model':216, 'color':'Black'}, {'make':'Mi Max', 'model':2, 'color':'Gold'}, {'make':'Samsung', 'model': 7, 'color':'Blue'}])==[{'make': 'Nokia', 'model': 216, 'color': 'Black'}, {'make': 'Samsung', 'model': 7, 'color': 'Blue'}, {'make': 'Mi Max', 'model': 2, 'color': 'Gold'}]\nassert sorted_models([{'make':'Vivo', 'model':20,'color':'Blue'},{'make': 'oppo','model':17,'color':'Gold'},{'make':'Apple','model':11,'color':'red'}])==([{'make':'Vivo', 'model':20,'color':'Blue'},{'make': 'oppo','model':17,'color':'Gold'},{'make':'Apple','model':11,'color':'red'}])\nassert sorted_models([{'make':'micromax','model':40,'color':'grey'},{'make':'poco','model':60,'color':'blue'}])==([{'make':'poco','model':60,'color':'blue'},{'make':'micromax','model':40,'color':'grey'}])",
        "canonical_solution": "def sorted_models(models):\r\n sorted_models = sorted(models, key = lambda x: x['color'])\r\n return sorted_models"
    },
    {
        "number": 940,
        "prompt": "Write a function to sort the given array by using heap sort.\ndef heap_sort(arr):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    n = len(arr)\n    for i in range(n // 2 - 1, -1, -1):\n        heapify(arr, n, i)\n    for i in range(n - 1, 0, -1):\n        arr[i], arr[0] = arr[0], arr[i]\n        heapify(arr, i, 0)\n    return arr\n\ndef heapify(arr, n, i):\n    largest = i\n    left = 2 * i + 1\n    right = 2 * i + 2\n    if left < n and arr[left] > arr[largest]:\n        largest = left\n    if right < n and arr[right] > arr[largest]:\n        largest = right\n    if largest != i:\n        arr[i], arr[largest] = arr[largest], arr[i]\n        heapify(arr, n, largest)\n\narr = [12, 11, 13, 5, 7, 6, 10, 18, 2, 9]\nheap_sort(arr)\nprint(arr)\n\n# Output: [2, 5, 6, 7, 9, 10, 11, 12, 13, 18]\n\n# Explanation:\n# In the first iteration of the outer loop, we start from the middle of the array and move towards the beginning, as the last parent node will always be the last element in",
        "generated_testcode": "assert heap_sort([4, 2, 1, 6, 3, 7, 9, 5]) == [1, 2, 3, 4, 5, 6, 7]\n",
        "test": "assert heap_sort([12, 2, 4, 5, 2, 3]) == [2, 2, 3, 4, 5, 12]\nassert heap_sort([32, 14, 5, 6, 7, 19]) == [5, 6, 7, 14, 19, 32]\nassert heap_sort([21, 15, 29, 78, 65]) == [15, 21, 29, 65, 78]",
        "canonical_solution": "def heap_sort(arr):\r\n    heapify(arr)  \r\n    end = len(arr) - 1\r\n    while end > 0:\r\n        arr[end], arr[0] = arr[0], arr[end]\r\n        shift_down(arr, 0, end - 1)\r\n        end -= 1\r\n    return arr\r\n\r\ndef heapify(arr):\r\n    start = len(arr) // 2\r\n    while start >= 0:\r\n        shift_down(arr, start, len(arr) - 1)\r\n        start -= 1\r\ndef shift_down(arr, start, end):\r\n    root = start\r\n    while root * 2 + 1 <= end:\r\n        child = root * 2 + 1\r\n        if child + 1 <= end and arr[child] < arr[child + 1]:\r\n            child += 1\r\n        if child <= end and arr[root] < arr[child]:\r\n            arr[root], arr[child] = arr[child], arr[root]\r\n            root = child\r\n        else:\r\n            return\r\n"
    },
    {
        "number": 941,
        "prompt": "Write a function to count the elements in a list until an element is a tuple.\ndef count_elim(num):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    count = 0\n    for i in num:\n        if isinstance(i, tuple):\n            break\n        count += 1\n    return count\n\n# Test case\nprint(count_elim([1, 2, 3, 4, (5, 6), 7, 8, 9])) # Output: 4\nprint(count_elim([1, 2, (3, 4), (5, 6), 7, 8])) # Output: 2\nprint(count_elim([(1, 2), (3, 4), (5, 6), 7, 8])) # Output: 0\nprint(count_elim([1, 2, 3, 4, 5, 6, 7, 8]) # Output: 6\nprint(count_elim([]) # Output: 0 ",
        "generated_testcode": "assert count_elim([1, 2, 3, 4, (5, 6), 7, 8, 9]) == 4\n",
        "test": "assert count_elim([10,20,30,(10,20),40])==3\nassert count_elim([10,(20,30),(10,20),40])==1\nassert count_elim([(10,(20,30,(10,20),40))])==0",
        "canonical_solution": "def count_elim(num):\r\n  count_elim = 0\r\n  for n in num:\r\n    if isinstance(n, tuple):\r\n        break\r\n    count_elim += 1\r\n  return count_elim"
    },
    {
        "number": 942,
        "prompt": "Write a function to check if any list element is present in the given list.\ndef check_element(test_tup, check_list):\n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    # check if any element in test_tup is present in check_list\n    for item in test_tup:\n        if item in check_list:\n            return True\n    return False\n\n\n# Test the function with sample input\ntest_tup = (1, 2, 3, 4, 5, 6)\ncheck_list = [2, 7, 8, 9, 10]\nprint(check_element(test_tup, check_list))  # Output: True\n\ntest_tup = (1, 2, 3, 4, 5, 6)\ncheck_list = [7, 8, 9, 10]\nprint(check_element(test_tup, check_list))  # Output: False\n\ntest_tup = (1, 2, 3, 4, 5)\ncheck_list = (5, 6, 7, 8)\nprint(check_element(test_tup, check_list))  # Output: True\n\ntest_tup = (1, 2, 3, 4)\ncheck_list = (5, 6, 7, 8)\nprint(check_element(test_tup, check_list))  # Output: False\n\ntest_tup = ('a', 'b', 'c', 'd')\ncheck_list = ('d', 'e', 'f')\nprint(check_element(test_tup, check_list))",
        "generated_testcode": "assert check_element((1, 2, 3), [1, 4, 5, 6]) == True\n",
        "test": "assert check_element((4, 5, 7, 9, 3),  [6, 7, 10, 11]) == True\nassert check_element((1, 2, 3, 4),  [4, 6, 7, 8, 9]) == True\nassert check_element((3, 2, 1, 4, 5),  [9, 8, 7, 6]) == False",
        "canonical_solution": "def check_element(test_tup, check_list):\r\n  res = False\r\n  for ele in check_list:\r\n    if ele in test_tup:\r\n      res = True\r\n      break\r\n  return (res) "
    },
    {
        "number": 943,
        "prompt": "Write a function to combine two given sorted lists using heapq module.\ndef combine_lists(num1,num2):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    return heapq.merge(num1,num2)\n\n# Test the function with sample lists\nnum1 = [1,3,5,7,9]\nnum2 = [2,4,6,8]\nprint(list(combine_lists(num1,num2)) # output should be [1,2,3,4,5,6,7,8] ",
        "generated_testcode": "assert combine_lists([1,3,5,7],[2,4,6,8]) == [1,2,3,4,5,6,7,8]\n",
        "test": "assert combine_lists([1, 3, 5, 7, 9, 11],[0, 2, 4, 6, 8, 10])==[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]\nassert combine_lists([1, 3, 5, 6, 8, 9], [2, 5, 7, 11])==[1,2,3,5,5,6,7,8,9,11]\nassert combine_lists([1,3,7],[2,4,6])==[1,2,3,4,6,7]",
        "canonical_solution": "from heapq import merge\r\ndef combine_lists(num1,num2):\r\n  combine_lists=list(merge(num1, num2))\r\n  return combine_lists"
    },
    {
        "number": 944,
        "prompt": "Write a function to separate and print the numbers and their position of a given string.\ndef num_position(text):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    numbers = []\n    positions = []\n    for i in range(len(text)):\n        if text[i].isdigit():\n            numbers.append(int(text[i]));\n            positions.append(i)\n    print(\"Numbers:\", numbers)\n    print(\"Positions:\", positions)\n\n# Test the function\ntext = \"hello 123 world 456 test 789\"\nnum_position(text)\n",
        "generated_testcode": "assert num_position(\"Hello 123 World 456\") == \"1: 123\\n2: 456\"\n",
        "test": "assert num_position(\"there are 70 flats in this apartment\")==10\nassert num_position(\"every adult have 32 teeth\")==17\nassert num_position(\"isha has 79 chocolates in her bag\")==9",
        "canonical_solution": "import re\r\ndef num_position(text):\r\n for m in re.finditer(\"\\d+\", text):\r\n    return m.start()"
    },
    {
        "number": 945,
        "prompt": "Write a function to convert the given tuples into set.\ndef tuple_to_set(t):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    return set(t)\n\n# Test the function with the example tuples\nt1 = (1, 2, 3, 4, 5, 6)\nt2 = (2, 4, 6, 8, 10)\nprint(tuple_to_set(t1)) # Expected output: {1, 2, 3, 4, 5, 6}\nprint(tuple_to_set(t2)) # Expected output: {2, 4, 6, 8, 10} ",
        "generated_testcode": "assert tuple_to_set((\"apple\", \"banana\", \"cherry\", \"apple\") == {\"apple\", \"banana\", \"cherry\"}\n",
        "test": "assert tuple_to_set(('x', 'y', 'z') ) == {'y', 'x', 'z'}\nassert tuple_to_set(('a', 'b', 'c') ) == {'c', 'a', 'b'}\nassert tuple_to_set(('z', 'd', 'e') ) == {'d', 'e', 'z'}",
        "canonical_solution": "def tuple_to_set(t):\r\n  s = set(t)\r\n  return (s) "
    },
    {
        "number": 946,
        "prompt": "Write a function to find the most common elements and their counts of a specified text.\ndef most_common_elem(s,a):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    from collections import Counter\n    c = Counter(s)\n    return c.most_common(a)\n\n# Example usage:\ntext = \"hello world\"\na = 2\nprint(most_common_elem(text,a)) # Output: [('l', 3), ('o', 2)]\n\n# Explanation:\n# In this example, we have used the Counter() function from the collections module to count the frequency of each element in the string 'hello world'.\n# Then, we have used the most_common() function to find the most common elements in the string, and specified the number of elements to return (a=2). ",
        "generated_testcode": "assert most_common_elem(\"hello world\", 2) == {\"l\": 3, \"o\": 2}\n",
        "test": "assert most_common_elem('lkseropewdssafsdfafkpwe',3)==[('s', 4), ('e', 3), ('f', 3)] \nassert most_common_elem('lkseropewdssafsdfafkpwe',2)==[('s', 4), ('e', 3)]\nassert most_common_elem('lkseropewdssafsdfafkpwe',7)==[('s', 4), ('e', 3), ('f', 3), ('k', 2), ('p', 2), ('w', 2), ('d', 2)]",
        "canonical_solution": "from collections import Counter \r\ndef most_common_elem(s,a):\r\n  most_common_elem=Counter(s).most_common(a)\r\n  return most_common_elem"
    },
    {
        "number": 947,
        "prompt": "Write a python function to find the length of the shortest word.\ndef len_log(list1):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    return min(len(word) for word in list1)\n\nlist1 = ['apple', 'banana', 'orange', 'kiwi']\nprint(len_log(list1)) # Output: 4\n\nlist2 = ['python', 'programming', 'language']\nprint(len_log(list2)) # Output: 5\n\nlist3 = ['cat', 'dog', 'elephant']\nprint(len_log(list3)) # Output: 3 ",
        "generated_testcode": "assert len_log(['apple', 'banana', 'cherry', 'date', 'fig']) == 3\n",
        "test": "assert len_log([\"win\",\"lose\",\"great\"]) == 3\nassert len_log([\"a\",\"ab\",\"abc\"]) == 1\nassert len_log([\"12\",\"12\",\"1234\"]) == 2",
        "canonical_solution": "def len_log(list1):\r\n    min=len(list1[0])\r\n    for i in list1:\r\n        if len(i)<min:\r\n            min=len(i)\r\n    return min"
    },
    {
        "number": 948,
        "prompt": "Write a function to get an item of a tuple.\ndef get_item(tup1,index):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    return tup1[index]\n\n#Example usage:\ntup1 = (1,2,3,4,5)\nprint(get_item(tup1,2)) # Output: 3\n\n# Write a function to convert a tuple to a list\ndef tuple_to_list(tup1):\n    return list(tup1)\n\n#Example usage:\ntup1 = (1,2,3,4,5)\nprint(tuple_to_list(tup1)) # Output: [1, 2, 3, 4, 5]\n\n# Write a function to convert a list to a tuple\ndef list_to_tuple(lst1):\n    return tuple(lst1)\n\n#Example usage:\nlst1 = [1,2,3,4,5]\nprint(list_to_tuple(lst1)) # Output: (1, 2, 3, 4, 5)\n\n# Write a function to get the length of a tuple\ndef length_of_tuple(tup1):\n    return len(tup1)\n\n#Example usage:\ntup1 = (1,2,3,4,5)\nprint(length_of_tuple(tup1)) # Output: 4\n\n# Write a function to check if an item is present in a tuple\ndef item_in_tuple(tup1,item):\n    if item in tup1:\n        return True\n    else:\n        return False\n\n#Example usage:\n",
        "generated_testcode": "assert get_item((1,2,3,4,5,6),2) == 3\n",
        "test": "assert get_item((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),3)==('e')\nassert get_item((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),-4)==('u')\nassert get_item((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),-3)==('r')",
        "canonical_solution": "def get_item(tup1,index):\r\n  item = tup1[index]\r\n  return item"
    },
    {
        "number": 949,
        "prompt": "Write a function to sort the given tuple list basis the total digits in tuple.\ndef count_digs(tup):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    \"\"\"\n    Given a tuple of integers, sort the tuple based on the total number of digits in the integers.\n    \"\"\"\n    return len(str(tup[0]) + str(tup[1]) + str(tup[2]))\n\ndef sort_tuple_by_digits(tup_list):\n    return sorted(tup_list, key=count_digs)\n\ntup_list = [(12, 34, 56), (1, 123, 456), (123, 4, 5), (7, 89, 9), (1, 10, 11)]\nprint(sort_tuple_by_digits(tup_list)) # Output: [(1, 10, 11), (1, 12, 456), (123, 4, 5), (12, 34, 56), (7, 89, 9)]\n\n# Test with negative integers\ntup_list = [(-123, 4, 5), (-1, 10, 11), (12, 34, 56), (1, -123, 456), (7, 89, 9)]\nprint(sort_tuple_by_digits(tup_list)) # Output: [(-1, 10, 11), (1, -123, 456), (-123,",
        "generated_testcode": "assert count_digs(('123', '456', '789') == 27)\n",
        "test": "assert sort_list([(3, 4, 6, 723), (1, 2), (12345,), (134, 234, 34)] ) == '[(1, 2), (12345,), (3, 4, 6, 723), (134, 234, 34)]'\nassert sort_list([(3, 4, 8), (1, 2), (1234335,), (1345, 234, 334)] ) == '[(1, 2), (3, 4, 8), (1234335,), (1345, 234, 334)]'\nassert sort_list([(34, 4, 61, 723), (1, 2), (145,), (134, 23)] ) == '[(1, 2), (145,), (134, 23), (34, 4, 61, 723)]'",
        "canonical_solution": "def count_digs(tup):\r\n  return sum([len(str(ele)) for ele in tup ]) \r\ndef sort_list(test_list):\r\n  test_list.sort(key = count_digs)\r\n  return (str(test_list))"
    },
    {
        "number": 950,
        "prompt": "Write a function to display sign of the chinese zodiac for given year.\ndef chinese_zodiac(year):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    if year % 12 == 8 or year % 12 == 0:\n        return \"rat\"\n    elif year % 12 == 9 or year % 12 == 1:\n        return \"ox\"\n    elif year % 12 == 10 or year % 12 == 2:\n        return \"tiger\"\n    elif year % 12 == 11 or year % 12 == 3:\n        return \"rabbit\"\n    elif year % 12 == 4:\n        return \"dragon\"\n    elif year % 12 == 5:\n        return \"snake\"\n    elif year % 12 == 6:\n        return \"horse\"\n    elif year % 12 == 7:\n        return \"goat\"\n    elif year % 12 == 12:\n        return \"monkey\"\n    elif year % 12 == 1 or year % 12 == 0:\n        return \"rooster\"\n    elif year % 12 == 2:\n        return \"dog\"\n    elif year % 12 == 3:\n        return \"pig\"\n    elif year % 12 == 4:\n        return \"rat\"\n    elif year % 12 == 5:\n        return \"ox\"\n    elif year % 12 == 6:\n        return \"tiger\"\n    elif year % 12 == 7:\n        return \"rabbit\"\n   ",
        "generated_testcode": "assert chinese_zodiac(1996) == \"Rat\"\n",
        "test": "assert chinese_zodiac(1997)==('Ox')\nassert chinese_zodiac(1998)==('Tiger')\nassert chinese_zodiac(1994)==('Dog')",
        "canonical_solution": "def chinese_zodiac(year):\r\n if (year - 2000) % 12 == 0:\r\n     sign = 'Dragon'\r\n elif (year - 2000) % 12 == 1:\r\n     sign = 'Snake'\r\n elif (year - 2000) % 12 == 2:\r\n     sign = 'Horse'\r\n elif (year - 2000) % 12 == 3:\r\n     sign = 'sheep'\r\n elif (year - 2000) % 12 == 4:\r\n     sign = 'Monkey'\r\n elif (year - 2000) % 12 == 5:\r\n     sign = 'Rooster'\r\n elif (year - 2000) % 12 == 6:\r\n     sign = 'Dog'\r\n elif (year - 2000) % 12 == 7:\r\n     sign = 'Pig'\r\n elif (year - 2000) % 12 == 8:\r\n     sign = 'Rat'\r\n elif (year - 2000) % 12 == 9:\r\n     sign = 'Ox'\r\n elif (year - 2000) % 12 == 10:\r\n     sign = 'Tiger'\r\n else:\r\n     sign = 'Hare'\r\n return sign"
    },
    {
        "number": 951,
        "prompt": "Write a function to find the maximum of similar indices in two lists of tuples.\ndef max_similar_indices(test_list1, test_list2):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    max_indices = []\n    max_sum = 0\n    for i, tup1 in enumerate(test_list1):\n        for j, tup2 in enumerate(test_list2):\n            if tup1[0] == tup2[0]:\n                if sum(tup1) == sum(tup2):\n                    if sum(tup1) > max_sum:\n                        max_sum = sum(tup1)\n                        max_indices = [(i, j)]\n                    elif sum(tup1) == max_sum:\n                        max_indices.append((i, j))\n    return max_indices\n\n# Test the function with the given test case\ntest_list1 = [(1, 2, 3), (4, 5, 6), (7, 8, 9), (10, 11, 12)]\ntest_list2 = [(2, 3, 1), (4, 5, 6), (8, 9, 7), (10, 12, 11)]\nprint(max_similar_indices(test_list1, test_list2))\n",
        "generated_testcode": "assert max_similar_indices([(1, 2, 3), (4, 5, 6), (7, 8, 9)], [(1, 2, 3), (4, 5, 6), (7, 8, 9)]) == [0, 1, 2]\n",
        "test": "assert max_similar_indices([(2, 4), (6, 7), (5, 1)],[(5, 4), (8, 10), (8, 14)]) == [(5, 4), (8, 10), (8, 14)]\nassert max_similar_indices([(3, 5), (7, 8), (6, 2)],[(6, 5), (9, 11), (9, 15)]) == [(6, 5), (9, 11), (9, 15)]\nassert max_similar_indices([(4, 6), (8, 9), (7, 3)],[(7, 6), (10, 12), (10, 16)]) == [(7, 6), (10, 12), (10, 16)]",
        "canonical_solution": "def max_similar_indices(test_list1, test_list2):\r\n  res = [(max(x[0], y[0]), max(x[1], y[1]))\r\n   for x, y in zip(test_list1, test_list2)]\r\n  return (res) "
    },
    {
        "number": 952,
        "prompt": "Write a function to compute the value of ncr mod p.\ndef nCr_mod_p(n, r, p): \n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": " \n    C = [0] * (r + 1) \n    C[0] = 1\n  \n    # Calculate value of Binomial Coefficient using the formula: nCr = (n! / (r! * (n-r)!). \n    for i in range(1, n + 1): \n        prev_c = 1\n        curr_c = i \n        for j in range(1, min(i, r) + 1): \n            C[j] = (prev_c * curr_c) % p \n            prev_c = C[j] \n            curr_c = curr_c * (i - j) % p \n  \n    return C[r] ",
        "generated_testcode": "assert nCr_mod_p(5, 3, 10) == 10\n",
        "test": "assert nCr_mod_p(10, 2, 13) == 6\nassert nCr_mod_p(11, 3, 14) == 11\nassert nCr_mod_p(18, 14, 19) == 1",
        "canonical_solution": "def nCr_mod_p(n, r, p): \r\n\tif (r > n- r): \r\n\t\tr = n - r \r\n\tC = [0 for i in range(r + 1)] \r\n\tC[0] = 1 \r\n\tfor i in range(1, n + 1): \r\n\t\tfor j in range(min(i, r), 0, -1): \r\n\t\t\tC[j] = (C[j] + C[j-1]) % p \r\n\treturn C[r] "
    },
    {
        "number": 953,
        "prompt": "Write a python function to find the minimun number of subsets with distinct elements.\ndef subset(ar, n): \n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    def dfs(ar, start, n, i, path): \n        if i == n: \n            return\n        if len(path) == k: \n            return\n        dfs(ar, start + 1, n, i + 1, path) \n        path.append(ar[start]) \n        dfs(ar, start + 1, n, i + 1, path) \n        path.pop() \n        return\n    k = len(ar) \n    dfs(ar, 0, 0, 0, []) \n\n# Example usage: \narr = [1, 2, 3, 4] \nn = len(arr) \nsubset(arr, n) ",
        "generated_testcode": "assert subset([1, 2, 3], 3) == 3\n",
        "test": "assert subset([1, 2, 3, 4],4) == 1\nassert subset([5, 6, 9, 3, 4, 3, 4],7) == 2\nassert subset([1, 2, 3 ],3) == 1",
        "canonical_solution": "def subset(ar, n): \r\n    res = 0\r\n    ar.sort() \r\n    for i in range(0, n) : \r\n        count = 1\r\n        for i in range(n - 1): \r\n            if ar[i] == ar[i + 1]: \r\n                count+=1\r\n            else: \r\n                break \r\n        res = max(res, count)  \r\n    return res "
    },
    {
        "number": 954,
        "prompt": "Write a function that gives profit amount if the given amount has profit else return none.\ndef profit_amount(actual_cost,sale_amount): \n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    if sale_amount > actual_cost: \n        return sale_amount - actual_cost \n    else: \n        return None\n\n# Test the function with some sample inputs \nprint(profit_amount(100, 150)) # Output: 50 \nprint(profit_amount(100, 50))  # Output: None ",
        "generated_testcode": "assert profit_amount(100, 150) == 50\n",
        "test": "assert profit_amount(1500,1200)==300\nassert profit_amount(100,200)==None\nassert profit_amount(2000,5000)==None",
        "canonical_solution": "def profit_amount(actual_cost,sale_amount): \r\n if(actual_cost > sale_amount):\r\n    amount = actual_cost - sale_amount\r\n    return amount\r\n else:\r\n    return None"
    },
    {
        "number": 955,
        "prompt": "Write a function to find out, if the given number is abundant.\ndef is_abundant(n):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    sum = 0\n    for i in range(1, n):\n        if n % i == 0:\n            sum += i\n    if sum > n:\n        return True\n    else:\n        return False\n\ndef find_sum_of_two_numbers(n):\n    numbers = []\n    for i in range(1, n):\n        if is_abundant(i) and i not in numbers:\n            numbers.append(i)\n            for j in range(i, n):\n                if is_abundant(j) and i + j == n:\n                    return True\n    return False\n\ndef find_sum_of_three_numbers(n):\n    for i in range(1, n):\n        for j in range(i+1, n):\n            if is_abundant(i) and is_abundant(j) and i + j == n:\n                return True\n    return False\n\ndef find_sum_of_four_numbers(n):\n    for i in range(1, n):\n        for j in range(i+1, n):\n            for k in range(j+1, n):\n                if is_abundant(i) and is_abustant(j) and is_abundant(k) and i + j + k == n:\n                    return True\n    return False\n\ndef find_sum_of_five_numbers(n):\n    for i in range(1, n):\n        for j in range(",
        "generated_testcode": "assert is_abundant(12) == True\n",
        "test": "assert is_abundant(12)==True\nassert is_abundant(13)==False\nassert is_abundant(9)==False",
        "canonical_solution": "def is_abundant(n):\r\n    fctrsum = sum([fctr for fctr in range(1, n) if n % fctr == 0])\r\n    return fctrsum > n"
    },
    {
        "number": 956,
        "prompt": "Write a function to split the given string at uppercase letters by using regex.\ndef split_list(text):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    result = re.findall('[A-Z][^A-Z]*', text)\n    return result\n\n# Test the function with the given string\ntext = \"HelloWorldPythonRegex\"\nprint(split_list(text))  # Output: ['Hello', 'World', 'Python', 'Regex']\n```\n\nIn the above code, we have used `re.findall()` function to find all the non-overlapping matches of the pattern `[A-Z][^A-Z]*`. `[A-Z]` matches an uppercase letter and `[^A-Z]*` matches any character that is not an uppercase letter zero or more times. The `*` quantifier ensures that it matches as many characters as possible. So, it matches all the characters between two uppercase letters. This pattern will match all the uppercase letters and the characters between them and returns a list of all the matched strings. ",
        "generated_testcode": "assert split_list(\"HelloWorld\") == [\"Hello\", \"World\"]\n",
        "test": "assert split_list(\"LearnToBuildAnythingWithGoogle\") == ['Learn', 'To', 'Build', 'Anything', 'With', 'Google']\nassert split_list(\"ApmlifyingTheBlack+DeveloperCommunity\") == ['Apmlifying', 'The', 'Black+', 'Developer', 'Community']\nassert split_list(\"UpdateInTheGoEcoSystem\") == ['Update', 'In', 'The', 'Go', 'Eco', 'System']",
        "canonical_solution": "import re\r\ndef split_list(text):\r\n  return (re.findall('[A-Z][^A-Z]*', text))"
    },
    {
        "number": 957,
        "prompt": "Write a python function to get the position of rightmost set bit.\ndef get_First_Set_Bit_Pos(n):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    count = 0\n    while (n!=0):\n        n &= (n-1)\n        count += 1\n    return count\n\n# Test the function\nn = 56\nprint(get_First_Set_Bit_Pos(n)) # Output: 5\n\nn = 24\nprint(get_First_Set_Bit_Pos(n)) # Output: 4\n\nn = 8\nprint(get_First_Set_Bit_Pos(n)) # Output: 3\n\nn = 0\nprint(get_First_Set_Bit_Pos(n)) # Output: 0\n\nn = 16\nprint(get_First_Set_Bit_Pos(n)) # Output: 5\n\n# Time Complexity: O(log(n))\n# Space Complexity: O(1) ",
        "generated_testcode": "assert get_First_Set_Bit_Pos(12) == 4\n",
        "test": "assert get_First_Set_Bit_Pos(12) == 3\nassert get_First_Set_Bit_Pos(18) == 2\nassert get_First_Set_Bit_Pos(16) == 5",
        "canonical_solution": "import math\r\ndef get_First_Set_Bit_Pos(n):\r\n     return math.log2(n&-n)+1"
    },
    {
        "number": 958,
        "prompt": "Write a function to convert an integer into a roman numeral.\ndef int_to_roman( num):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    val = [\n            10000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1\n        ]\n    syb = [\n            \"M\", \"CM\", \"D\", \"CD\", \"C\", \"XC\", \"L\", \"XL\", \"X\", \"IX\", \"V\", \"IV\", \"I\"\n        ]\n    roman_num = ''\n    i = 0\n    while num > 0:\n        for _ in range(num // val[i]):\n            roman_num += syb[i]\n            num -= val[i]\n        i += 1\n    return roman_num\n\n# Test the function with some sample values\nprint(int_to_roman(39999))  # should output \"MMMCMXCIX\"\nprint(int_to_roman(2008))   # should output \"MMVIII\"\nprint(int_to_roman(1666))   # should output \"MDCLXVI\" ",
        "generated_testcode": "assert int_to_roman(1) == \"I\"\n",
        "test": "assert int_to_roman(1)==(\"I\")\nassert int_to_roman(50)==(\"L\")\nassert int_to_roman(4)==(\"IV\")",
        "canonical_solution": "def int_to_roman( num):\r\n        val = [1000, 900, 500, 400,100, 90, 50, 40,10, 9, 5, 4,1]\r\n        syb = [\"M\", \"CM\", \"D\", \"CD\",\"C\", \"XC\", \"L\", \"XL\",\"X\", \"IX\", \"V\", \"IV\",\"I\"]\r\n        roman_num = ''\r\n        i = 0\r\n        while  num > 0:\r\n            for _ in range(num // val[i]):\r\n                roman_num += syb[i]\r\n                num -= val[i]\r\n            i += 1\r\n        return roman_num"
    },
    {
        "number": 959,
        "prompt": "Write a python function to find the average of a list.\ndef Average(lst): \n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    return sum(lst) / len(lst) \n  \n# Testing the function \nlst = [2, 6, 3, 8, 10] \nprint(\"Average of the list\", lst, \"is:\", Average(lst)) \n# Output: Average of the list [2, 6, 3, 8, 10] is: 5.0 ",
        "generated_testcode": "assert Average([1, 2, 3, 4, 5]) == 3\n",
        "test": "assert Average([15, 9, 55, 41, 35, 20, 62, 49]) == 35.75\nassert Average([4, 5, 1, 2, 9, 7, 10, 8]) == 5.75\nassert Average([1,2,3]) == 2",
        "canonical_solution": "def Average(lst): \r\n    return sum(lst) / len(lst) "
    },
    {
        "number": 960,
        "prompt": "Write a function to solve tiling problem.\ndef get_noOfways(n):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    if n == 1 or n == 2:\n        return n\n    if n == 3:\n        return 2\n    dp = [0] * (n + 1)\n    dp[1] = 1\n    dp[2] = 2\n    dp[3] = 2\n    for i in range(4, n + 1):\n        dp[i] = dp[i - 1] + dp[i - 2] + dp[i - 3]\n    return dp[n]\n\n\nn = int(input())\nprint(get_noOfways(n))\n\n# Output:\n# 1\n# 2\n# 3\n# 5\n# 11\n# 23\n# 54\n",
        "generated_testcode": "assert get_noOfways(3) == 1\n",
        "test": "assert get_noOfways(4)==3\nassert get_noOfways(3)==2\nassert get_noOfways(5)==5",
        "canonical_solution": "def get_noOfways(n):\r\n    if (n == 0):\r\n        return 0;\r\n    if (n == 1):\r\n        return 1; \r\n    return get_noOfways(n - 1) + get_noOfways(n - 2);"
    },
    {
        "number": 961,
        "prompt": "Write a function to convert a roman numeral to an integer.\ndef roman_to_int(s):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    roman_dict = {'I': 1, 'V': 5, 'X': 10, 'L': 50, 'C': 100, 'D': 500, 'M': 1000, 'IV': 4, 'IX': 9, 'XL': 40, 'XC': 90, 'CD': 400, 'CM': 900}\n    decimal = 0\n    for i in range(len(s)):\n        if i > 0 and roman_dict[s[i]] > roman_dict[s[i-1]:\n            decimal -= roman_dict[s[i-1]]\n        decimal += roman_dict[s[i]\n    return decimal\n\n# Test the function\nprint(roman_to_int('XXV')) # Should output 25\nprint(roman_to_int('XXXIX')) # Should output 39\nprint(roman_to_int('MMXIV')) # Should output 2014\nprint(roman_to_int('CDXLVIII')) # Should output 448\nprint(roman_to_int('MMMCMXCIV')) # Should output 3900",
        "generated_testcode": "assert roman_to_int(\"III\") == 3\n",
        "test": "assert roman_to_int('MMMCMLXXXVI')==3986\nassert roman_to_int('MMMM')==4000\nassert roman_to_int('C')==100",
        "canonical_solution": "def roman_to_int(s):\r\n        rom_val = {'I': 1, 'V': 5, 'X': 10, 'L': 50, 'C': 100, 'D': 500, 'M': 1000}\r\n        int_val = 0\r\n        for i in range(len(s)):\r\n            if i > 0 and rom_val[s[i]] > rom_val[s[i - 1]]:\r\n                int_val += rom_val[s[i]] - 2 * rom_val[s[i - 1]]\r\n            else:\r\n                int_val += rom_val[s[i]]\r\n        return int_val"
    },
    {
        "number": 962,
        "prompt": "Write a python function to find the sum of all even natural numbers within the range l and r.\ndef sum_Natural(n): \n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    sum = 0\n    for i in range(2, n+1): \n        sum = sum + i \n    return sum \n\n# take input from user \nl = int(input(\"Enter a lower bound: \")) \nr = int(input(\"Enter a upper bound: \"): \n\n# function call \nsum = sum_Natural(r) - sum_Natural(l-1) \n\n# output \nprint(\"Sum of even numbers between\", l, \"and\", r, \"is\", sum) ",
        "generated_testcode": "assert sum_Natural(10) == 30\n",
        "test": "assert sum_Even(2,5) == 6\nassert sum_Even(3,8) == 18\nassert sum_Even(4,6) == 10",
        "canonical_solution": "def sum_Natural(n): \r\n    sum = (n * (n + 1)) \r\n    return int(sum) \r\ndef sum_Even(l,r): \r\n    return (sum_Natural(int(r / 2)) - sum_Natural(int((l - 1) / 2))) "
    },
    {
        "number": 963,
        "prompt": "Write a function to calculate the discriminant value.\ndef discriminant_value(x,y,z):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    return x**2 - 4*y*z\n\n# Test the function\nprint(discriminant_value(1,2,3))  # Output: 3\nprint(discriminant_value(4,5,6))  # Output: -180\nprint(discriminant_value(0,0,0))  # Output: 0\n\n#Write a function to calculate the sum of two numbers\ndef sum_of_two_numbers(x,y):\n    return x+y\n\n# Test the function\nprint(sum_of_two_numbers(2,4))  # Output: 6\nprint(sum_of_two_numbers(-5,8)) # Output: 3\n\n#Write a function to calculate the area of a rectangle\ndef area_of_rectangle(length, breadth):\n    return length * breadth\n\n# Test the function\nprint(area_of_rectangle(5,4))   # Output: 20\nprint(area_of_rectangle(10,3))  # Output: 30\n\n#Write a function to calculate the area of a triangle\ndef area_of_triangle(base, height):\n    return 0.5 * base * height\n\n# Test the function\nprint(area_of_triangle(6, 8))  # Output: 24.0\nprint(area_of_triangle(9, 6))  # Output: 27.0\n\n#Write a function to calculate the perimeter of a",
        "generated_testcode": "assert discriminant_value(1,2,3) == 1\n",
        "test": "assert discriminant_value(4,8,2)==(\"Two solutions\",32)\nassert discriminant_value(5,7,9)==(\"no real solution\",-131)\nassert discriminant_value(0,0,9)==(\"one solution\",0)",
        "canonical_solution": "def discriminant_value(x,y,z):\r\n    discriminant = (y**2) - (4*x*z)\r\n    if discriminant > 0:\r\n        return (\"Two solutions\",discriminant)\r\n    elif discriminant == 0:\r\n        return (\"one solution\",discriminant)\r\n    elif discriminant < 0:\r\n        return (\"no real solution\",discriminant)"
    },
    {
        "number": 964,
        "prompt": "Write a python function to check whether the length of the word is even or not.\ndef word_len(s): \n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    #take input\n    s=input(\"Enter the string: \")\n    #check the length of the string\n    if len(s)%2==0:\n        return True\n    else:\n        return False\n#calling the function\nprint(word_len(s)) ",
        "generated_testcode": "assert word_len(\"hello\") == True\n",
        "test": "assert word_len(\"program\") == False\nassert word_len(\"solution\") == True\nassert word_len(\"data\") == True",
        "canonical_solution": "def word_len(s): \r\n    s = s.split(' ')   \r\n    for word in s:    \r\n        if len(word)%2==0: \r\n            return True  \r\n        else:\r\n          return False"
    },
    {
        "number": 965,
        "prompt": "Write a function to convert camel case string to snake case string.\ndef camel_to_snake(text):\n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    snake = ''\n    for i, letter in enumerate(text):\n        if i == 0 or letter.isupper():\n            snake += '_' + letter.lower()\n        else:\n            snake += letter\n    return snake.strip('_')\n\n# Test the function\nprint(camel_to_snake('helloWorld'))  # Output: hello_world\nprint(camel_to_snake('camelCase'))  # Output: camel_case\nprint(camel_to_snake('theQuickBrownFox'))  # Output: the_quick_brown_fox\nprint(camel_to_snake('myHTMLString'))  # Output: my_html_string\nprint(camel_to_snake('longCamelCaseString'))  # Output: long_camel_case_string\n\n# Time Complexity: O(n)\n# Space Complexity: O(n)\n",
        "generated_testcode": "assert camel_to_snake(\"helloWorld\") == \"hello_world\"\n",
        "test": "assert camel_to_snake('PythonProgram')==('python_program')\nassert camel_to_snake('pythonLanguage')==('python_language')\nassert camel_to_snake('ProgrammingLanguage')==('programming_language')",
        "canonical_solution": "def camel_to_snake(text):\r\n        import re\r\n        str1 = re.sub('(.)([A-Z][a-z]+)', r'\\1_\\2', text)\r\n        return re.sub('([a-z0-9])([A-Z])', r'\\1_\\2', str1).lower()"
    },
    {
        "number": 966,
        "prompt": "Write a function to remove an empty tuple from a list of tuples.\ndef remove_empty(tuple1): #L = [(), (), ('',), ('a', 'b'), ('a', 'b', 'c'), ('d')]\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    result = []\n    for i in tuple1:\n        if i:\n            result.append(i)\n    return result\n\n#Example usage:\nL = [(), (), ('',), ('a', 'b'), ('a', 'b', 'c'), ('d')]\nprint(remove_empty(L)) #Output: [('a', 'b'), ('a', 'b', 'c'), ('d')]\n\n# Time complexity: O(n)\n# Space complexity: O(n)\n\n#Written by Sifat Hosen\n",
        "generated_testcode": "assert remove_empty([(), (), ('',), ('a', 'b'), ('a', 'b', 'c'), ('d')]) == [('a', 'b', 'c'), ('d')]\n\n",
        "test": "assert remove_empty([(), (), ('',), ('a', 'b'), ('a', 'b', 'c'), ('d')])==[('',), ('a', 'b'), ('a', 'b', 'c'), 'd']  \nassert remove_empty([(), (), ('',), (\"python\"), (\"program\")])==[('',), (\"python\"), (\"program\")]  \nassert remove_empty([(), (), ('',), (\"java\")])==[('',),(\"java\") ]  ",
        "canonical_solution": "def remove_empty(tuple1): #L = [(), (), ('',), ('a', 'b'), ('a', 'b', 'c'), ('d')]\r\n   tuple1 = [t for t in tuple1 if t]\r\n   return tuple1"
    },
    {
        "number": 967,
        "prompt": "Write a python function to accept the strings which contains all vowels.\ndef check(string): \n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'] \n    for i in string: \n        if i in vowels: \n            return True\n    return False\n\nstring = input(\"Enter a string: \")\nif check(string): \n    print(\"The string contains vowels\") \nelse: \n    print(\"The string does not contain vowels\") ",
        "generated_testcode": "assert check(\"hello\") == True\n",
        "test": "assert check(\"SEEquoiaL\") == 'accepted'\nassert check('program') == \"not accepted\"\nassert check('fine') == \"not accepted\"",
        "canonical_solution": "def check(string): \r\n  if len(set(string).intersection(\"AEIOUaeiou\"))>=5: \r\n    return ('accepted') \r\n  else: \r\n    return (\"not accepted\") "
    },
    {
        "number": 968,
        "prompt": "Write a python function to find maximum possible value for the given periodic function.\ndef floor_Max(A,B,N):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    return (A//B)*N\n\n#Example:\n#Input:\n#A = 6\n#B = 3\n#N = 5\n#Output: 15\n#Explanation: \n# 6//3 = 2, which means there are 2 full periods in 5 units. \n#So the maximum possible value is 2*3 = 6.\n\n#Input:\n#A = 10\n#B = 4\n#N = 7\n#Output: 28\n#Explanation: \n#There are 2 full periods and 1 partial period in 7 units. \n#So the maximum possible value is (2*4) + (1*2) = 8.\n\n#Input:\n#A = 15\n#B = 5\n#N = 12\n#Output: 20\n#Explanation: \n#There are 3 full periods and 1 partial period in 12 units. \n#So the maximum possible value is (3*5) + (1*5) = 15. ",
        "generated_testcode": "assert floor_Max(1,2,3) == 6\n",
        "test": "assert floor_Max(11,10,9) == 9\nassert floor_Max(5,7,4) == 2\nassert floor_Max(2,2,1) == 1",
        "canonical_solution": "def floor_Max(A,B,N):\r\n    x = min(B - 1,N)\r\n    return (A*x) // B"
    },
    {
        "number": 969,
        "prompt": "Write a function to join the tuples if they have similar initial elements.\ndef join_tuples(test_list):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    result = []\n    for i in range(len(test_list)):\n        for j in range(len(test_list) - 1):\n            if test_list[i][0] == test_list[j + 1][0]:\n                result.append(test_list[i] + test_list[j + 1])\n                test_list.pop(j + 1)\n            else:\n                result.append(test_list[i])\n    return result\n\n\n# Test the function with the example\ntest_list = [(1, 2), (3, 4), (1, 5), (3, 6), (2, 7), (4, 8)]\nprint(join_tuples(test_list))  # Output: [(1, 2, 5), (3, 4, 6), (2, 7), (4, 8)]\n\n# Test the function with an empty list\ntest_list = []\nprint(join_tuples(test_list))  # Output: []\n\n# Test the function with a list with no repeating initial elements\ntest_list = [(1, 2), (3, 4), (5, 6), (7, 8)]\nprint(join_tuples(test_list))  # Output: [(1, 2), (3, 4), (5, 6), (7, 8)]\n\n# Test the function with a list with repeating elements but not adjacent\ntest_list = [(1, 2",
        "generated_testcode": "assert join_tuples(test_list) == [('a', 'b', 'c', 'd'), ('e', 'f', 'g'), ('h', 'i', 'j', 'k', 'l'), ('m', 'n', 'o', 'p', 'q', 'r')]\n\n# The output should be [('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r')]\n\n",
        "test": "assert join_tuples([(5, 6), (5, 7), (6, 8), (6, 10), (7, 13)] ) == [(5, 6, 7), (6, 8, 10), (7, 13)]\nassert join_tuples([(6, 7), (6, 8), (7, 9), (7, 11), (8, 14)] ) == [(6, 7, 8), (7, 9, 11), (8, 14)]\nassert join_tuples([(7, 8), (7, 9), (8, 10), (8, 12), (9, 15)] ) == [(7, 8, 9), (8, 10, 12), (9, 15)]",
        "canonical_solution": "def join_tuples(test_list):\r\n  res = []\r\n  for sub in test_list:\r\n    if res and res[-1][0] == sub[0]:\r\n      res[-1].extend(sub[1:])\r\n    else:\r\n      res.append([ele for ele in sub])\r\n  res = list(map(tuple, res))\r\n  return (res) "
    },
    {
        "number": 970,
        "prompt": "Write a function to find minimum of two numbers.\ndef min_of_two( x, y ):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": true,
        "answer": "    if x < y:\n        return x\n    else:\n        return y\n\n# Test the function with the following code\nprint(min_of_two(5, 8)) # should return 5\nprint(min_of_two(10, 4)) # should return 4\nprint(min_of_two(1, -3)) # should return -3\n\n# Function to find the maximum of two numbers\ndef max_of_two( x, y ):\n    if x > y:\n        return x\n    else:\n        return y\n\n# Test the function with the following code\nprint(max_of_two(5, 8)) # should return 8\nprint(max_of_two(10, 4)) # should return 10\nprint(max_of_two(1, -3)) # should return 1\n\n# Function to find the sum of two numbers\ndef sum_of_two( x, y ):\n    return x + y\n\n# Test the function with the following code\nprint(sum_of_two(5, 8)) # should return 13\nprint(sum_of_two(10, 4)) # should return 14\nprint(sum_of_two(1, -3)) # should return -2\n\n# Function to find the absolute value of a number\ndef abs_value( x ):\n    if x < 0:\n        return -x\n    else:\n        return x\n\n# Test the function with the following code",
        "generated_testcode": "assert min_of_two( 3, 5 ) == 3\n",
        "test": "assert min_of_two(10,20)==10\nassert min_of_two(19,15)==15\nassert min_of_two(-10,-20)==-20",
        "canonical_solution": "def min_of_two( x, y ):\r\n    if x < y:\r\n        return x\r\n    return y"
    },
    {
        "number": 971,
        "prompt": "Write a function to find the maximum number of segments of lengths a, b and c that can be formed from n.\ndef maximum_segments(n, a, b, c) : \n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    # Create a dictionary to store the frequency of each length\n    freq = {}\n    # Initialize all the frequencies to 0\n    freq[a] = 0\n    freq[b] = 0\n    freq[c] = 0\n    \n    # Iterate through the length of n and increment the frequency of each length accordingly\n    for i in range(1, n+1) : \n        if i % a == 0 : \n            freq[a] += 1\n        if i % b == 0 : \n            freq[b] += 1\n        if i % c == 0 : \n            freq[c] += 1\n    \n    # Initialize the count of segments as 0\n    count = 0\n    \n    # Iterate through the lengths and increment the count based on the maximum number of segments that can be formed\n    for i in freq.values() : \n        count += i // 2\n    \n    return count\n\n# Test the function with sample inputs\nprint(maximum_segments(10, 2, 3, 5)) # Output : 3\nprint(maximum_segments(20, 2, 3, 5)) # Output : 5\nprint(maximum_segments(35, 5, 7, 9)) # Output : 13\n\n# Time Complexity : O(n) ",
        "generated_testcode": "assert maximum_segments(10, 2, 3) == 3\n",
        "test": "assert maximum_segments(7, 5, 2, 5) == 2\nassert maximum_segments(17, 2, 1, 3) == 17\nassert maximum_segments(18, 16, 3, 6) == 6",
        "canonical_solution": "def maximum_segments(n, a, b, c) : \r\n\tdp = [-1] * (n + 10) \r\n\tdp[0] = 0\r\n\tfor i in range(0, n) : \r\n\t\tif (dp[i] != -1) : \r\n\t\t\tif(i + a <= n ): \r\n\t\t\t\tdp[i + a] = max(dp[i] + 1, \r\n\t\t\t\t\t\t\tdp[i + a]) \r\n\t\t\tif(i + b <= n ): \r\n\t\t\t\tdp[i + b] = max(dp[i] + 1, \r\n\t\t\t\t\t\t\tdp[i + b]) \r\n\t\t\tif(i + c <= n ): \r\n\t\t\t\tdp[i + c] = max(dp[i] + 1, \r\n\t\t\t\t\t\t\tdp[i + c]) \r\n\treturn dp[n]"
    },
    {
        "number": 972,
        "prompt": "Write a function to concatenate the given two tuples to a nested tuple.\ndef concatenate_nested(test_tup1, test_tup2):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    result = ()\n    for i in range(len(test_tup1)):\n        result += (test_tup1[i] + test_tup2[i],)\n    return result\n\n# Example usage:\ntest_tup1 = ((1,2), (3,4), (5,6))\ntest_tup2 = ((7,8), (9,10), (11,12))\nprint(concatenate_nested(test_tup1, test_tup2))  # Output: ((1, 2, 7, 8), (3, 4, 9, 10), (5, 6, 11, 12))\n\n# Test your function with the example below:\ntest_tup3 = ((1, 2), (3, 4, 5), (6, 7))\ntest_tup4 = ((8, 9), (10,), (11, 12, 13))\nprint(concatenate_nested(test_tup3, test_tup4))  # Output: ((1, 2, 8, 9), (3, 4, 5, 10), (6, 7, 11, 12, 13))\n\n# Note: In the case where the two tuples have different lengths, you can assume that the shorter tuple will be padded with None values. ",
        "generated_testcode": "assert concatenate_nested((1, 2, (3, 4), (5, 6)), (7, 8, 9)) == (1, 2, (3, 4, 7, 8, 9)\n\n",
        "test": "assert concatenate_nested((3, 4), (5, 6)) == (3, 4, 5, 6)\nassert concatenate_nested((1, 2), (3, 4)) == (1, 2, 3, 4)\nassert concatenate_nested((4, 5), (6, 8)) == (4, 5, 6, 8)",
        "canonical_solution": "def concatenate_nested(test_tup1, test_tup2):\r\n  res = test_tup1 + test_tup2\r\n  return (res) "
    },
    {
        "number": 973,
        "prompt": "Write a python function to left rotate the string.\ndef left_rotate(s,d):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    return s[d:] + s[:d]\n\n#Test Cases\nprint(left_rotate(\"hello\", 2)) #llohel\nprint(left_rotate(\"world\", 3)) #lo w\nprint(left_rotate(\"python\", 1)) #onpython ",
        "generated_testcode": "assert left_rotate(\"hello\", 2) == \"llohe\"\n",
        "test": "assert left_rotate(\"python\",2) == \"thonpy\"   \nassert left_rotate(\"bigdata\",3 ) == \"databig\" \nassert left_rotate(\"hadoop\",1 ) == \"adooph\" ",
        "canonical_solution": "def left_rotate(s,d):\r\n    tmp = s[d : ] + s[0 : d]\r\n    return tmp  "
    },
    {
        "number": 974,
        "prompt": "Write a function to find the minimum total path sum in the given triangle.\ndef min_sum_path(A): \n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": false,
        "answer": "    n = len(A)\n    for i in range(n-2, -1, -1):\n        for j in range(i+1):\n            A[i][j] += min(A[i+1][j], A[i+1][j+1])\n    return A[0][0]\n\ndef min_sum_path_bottom_up(A): \n    n = len(A)\n    for i in range(n-2, -1, -1):\n        for j in range(i+1):\n            A[i][j] += min(A[i+1][j], A[i+1][j+1])\n    return A[0][0]\n\ndef min_sum_path_space_optimized(A): \n    n = len(A)\n    for i in range(n-2, -1, -1):\n        for j in range(i+1):\n            A[i][j] += min(A[i+1][j], A[i+1][j+1])\n    return A[0][0]\n\n# Test the function with an example\nA = [[3, 4, 5], [1, 2, 1], [1, 2, 3]]\nprint(min_sum_path(A)) ",
        "generated_testcode": "assert min_sum_path([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 13\n",
        "test": "assert min_sum_path([[ 2 ], [3, 9 ], [1, 6, 7 ]]) == 6\nassert min_sum_path([[ 2 ], [3, 7 ], [8, 5, 6 ]]) == 10 \nassert min_sum_path([[ 3 ], [6, 4 ], [5, 2, 7 ]]) == 9",
        "canonical_solution": "def min_sum_path(A): \r\n\tmemo = [None] * len(A) \r\n\tn = len(A) - 1\r\n\tfor i in range(len(A[n])): \r\n\t\tmemo[i] = A[n][i] \r\n\tfor i in range(len(A) - 2, -1,-1): \r\n\t\tfor j in range( len(A[i])): \r\n\t\t\tmemo[j] = A[i][j] + min(memo[j], \r\n\t\t\t\t\t\t\t\t\tmemo[j + 1]) \r\n\treturn memo[0]"
    }
]