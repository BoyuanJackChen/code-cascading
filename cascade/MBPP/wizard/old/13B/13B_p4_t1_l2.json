[
    {
        "number": 1,
        "prompt": "Write a function to find the minimum cost path to reach (m, n) from (0, 0) for the given cost matrix cost[][] and a position (m, n) in cost[][].\ndef min_cost(cost, m, n): \n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    dp = [[0 for x in range(n+1)] for y in range(m+1)] \n    for i in range(m+1): \n        for j in range(n+1): \n            if i == 0 or j == 0: \n                dp[i][j] = 0\n            else: \n                dp[i][j] = 10000000000000\n    dp[0][0] = 0\n\n    for i in range(1, m+1): \n        for j in range(1, n+1): \n            if i == 0 or j == 0: \n                dp[i][j] = 0\n            else: \n                dp[i][j] = min(dp[i-1][j-1], dp[i][j-1], dp[i-1][j]) + cost[i-1][j-1]\n\n    return dp[m][n] \n\n# Testing the function\ncost = [[1, 2, 3], \n        [4, 8, 2], \n        [1, 5, 3]] \nm = 2\nn = 2\nprint(\"Minimum cost to reach (m, n) is\", min_cost(cost, m, n)) ",
        "generated_testcode": "assert min_cost([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 2, 2) == 11\n",
        "test": "assert min_cost([[1, 2, 3], [4, 8, 2], [1, 5, 3]], 2, 2) == 8\nassert min_cost([[2, 3, 4], [5, 9, 3], [2, 6, 4]], 2, 2) == 12\nassert min_cost([[3, 4, 5], [6, 10, 4], [3, 7, 5]], 2, 2) == 16",
        "canonical_solution": "R = 3\r\nC = 3\r\ndef min_cost(cost, m, n): \r\n\ttc = [[0 for x in range(C)] for x in range(R)] \r\n\ttc[0][0] = cost[0][0] \r\n\tfor i in range(1, m+1): \r\n\t\ttc[i][0] = tc[i-1][0] + cost[i][0] \r\n\tfor j in range(1, n+1): \r\n\t\ttc[0][j] = tc[0][j-1] + cost[0][j] \r\n\tfor i in range(1, m+1): \r\n\t\tfor j in range(1, n+1): \r\n\t\t\ttc[i][j] = min(tc[i-1][j-1], tc[i-1][j], tc[i][j-1]) + cost[i][j] \r\n\treturn tc[m][n]"
    },
    {
        "number": 2,
        "prompt": "Write a function to find the similar elements from the given two tuple lists.\ndef similar_elements(test_tup1, test_tup2):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    similar_elements = []\n    for element in test_tup1:\n        if element in test_tup2:\n            similar_elements.append(element)\n    return similar_elements\n\ntest_tup1 = (1, 3, 5, 7, 9)\ntest_tup2 = (2, 3, 5, 8, 9)\nprint(similar_elements(test_tup1, test_tup2)) # Output: [3, 5, 9]\n\n# Output: [3, 5, 9] ",
        "generated_testcode": "assert similar_elements((1, 2, 3, 4, 5, 6), (2, 4, 6, 8, 10)) == (2, 4, 6)\n",
        "test": "assert similar_elements((3, 4, 5, 6),(5, 7, 4, 10)) == (4, 5)\nassert similar_elements((1, 2, 3, 4),(5, 4, 3, 7)) == (3, 4)\nassert similar_elements((11, 12, 14, 13),(17, 15, 14, 13)) == (13, 14)",
        "canonical_solution": "def similar_elements(test_tup1, test_tup2):\r\n  res = tuple(set(test_tup1) & set(test_tup2))\r\n  return (res) "
    },
    {
        "number": 3,
        "prompt": "Write a python function to identify non-prime numbers.\ndef is_not_prime(n):\n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    if n <= 1:\n        return True\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return True\n    return False\n\n#Write a function to find all prime numbers between two numbers.\ndef prime_numbers(a, b):\n    primes = []\n    for num in range(a, b+1):\n        if not is_not_prime(num):\n            primes.append(num)\n    return primes\n\n#Write a function to find all prime numbers between two numbers using Sieve of Eratosthenes.\ndef sieve_of_eratosthenes(a, b):\n    primes = []\n    sieve = [True] * (b+1)\n    for i in range(2, int(b**0.5)+1):\n        if sieve[i]:\n            for j in range(i*i, b+1, i):\n                sieve[j] = False\n    for i in range(a, b+1):\n        if sieve[i]:\n            primes.append(i)\n    return primes\n\n#Write a function to find the n-th prime number.\ndef nth_prime(n):\n    count = 0\n    num = 2\n    while count < n:\n        if not is_not_prime(num):\n            count += 1\n        num += 1\n    return num - 1\n\n#Write a function to",
        "generated_testcode": "assert is_not_prime(10) == True\n",
        "test": "assert is_not_prime(2) == False\nassert is_not_prime(10) == True\nassert is_not_prime(35) == True",
        "canonical_solution": "import math\r\ndef is_not_prime(n):\r\n    result = False\r\n    for i in range(2,int(math.sqrt(n)) + 1):\r\n        if n % i == 0:\r\n            result = True\r\n    return result"
    },
    {
        "number": 4,
        "prompt": "Write a function to find the largest integers from a given list of numbers using heap queue algorithm.\ndef heap_queue_largest(nums,n):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    import heapq\n    heapq.heapify(nums)\n    return [heapq.heappop(nums) for i in range(n)]\n\n# Test the function\nprint(heap_queue_largest([1,3,2,4,5,6,7,8],3)) # Output: [8,7,6]\nprint(heap_queue_largest([-1,0,5,3,2],2)) # Output: [5,3]\nprint(heap_queue_largest([10,2,3,1,7,8,4],4)) # Output: [10, 8, 7, 4]\nprint(heap_queue_largest([1,2,3,4,5,6,7,8,9],3)) # Output: [9, 8, 7]\nprint(heap_queue_largest([1],1)) # Output: [1]\nprint(heap_queue_largest([1,2,3,4,5,6,7,8,9],0)) # Output: []\nprint(heap_queue_largest([],10) # Output: []\n\n# Test the function using a list of strings\nprint(heap_queue_largest([\"apple\", \"banana\", \"cherry\", \"orange\", \"kiwi\", \"mango\"],2)) # Output: ['orange', 'mango'] ",
        "generated_testcode": "assert heap_queue_largest([1,2,3,4,5,6,7,8,9],3) == [9,8,7]\n",
        "test": "assert heap_queue_largest( [25, 35, 22, 85, 14, 65, 75, 22, 58],3)==[85, 75, 65] \nassert heap_queue_largest( [25, 35, 22, 85, 14, 65, 75, 22, 58],2)==[85, 75] \nassert heap_queue_largest( [25, 35, 22, 85, 14, 65, 75, 22, 58],5)==[85, 75, 65, 58, 35]",
        "canonical_solution": "import heapq as hq\r\ndef heap_queue_largest(nums,n):\r\n  largest_nums = hq.nlargest(n, nums)\r\n  return largest_nums"
    },
    {
        "number": 5,
        "prompt": "Write a function to find the number of ways to fill it with 2 x 1 dominoes for the given 3 x n board.\ndef count_ways(n): \n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    dp = [0] * (n + 1) \n    dp[0], dp[1] = 1, 1\n    for i in range(2, n + 1): \n        dp[i] = dp[i - 1] + dp[i - 2] + 1\n    return dp[n] \n\n# Driver Code \nn = 5\nprint(count_ways(n)) ",
        "generated_testcode": "assert count_ways(3) == 1\n",
        "test": "assert count_ways(2) == 3\nassert count_ways(8) == 153\nassert count_ways(12) == 2131",
        "canonical_solution": "def count_ways(n): \r\n\tA = [0] * (n + 1) \r\n\tB = [0] * (n + 1) \r\n\tA[0] = 1\r\n\tA[1] = 0\r\n\tB[0] = 0\r\n\tB[1] = 1\r\n\tfor i in range(2, n+1): \r\n\t\tA[i] = A[i - 2] + 2 * B[i - 1] \r\n\t\tB[i] = A[i - 1] + B[i - 2] \r\n\treturn A[n] "
    },
    {
        "number": 6,
        "prompt": "Write a python function to check whether the two numbers differ at one bit position only or not.\ndef is_Power_Of_Two (x): \n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": " \n    # Iterate till 32 bits or if x becomes 0 \n    for i in range(31, 0, -1): \n        if (x & (1 << i)): \n            return not (x & (1 << (i-1)) or x & (1 << (i+1)) \n    return False\n\n# example usage:\nprint(is_Power_Of_Two(12)) # False\nprint(is_Power_Of_Two(16)) # True\nprint(is_Power_Of_Two(17)) # False\n\n# Time Complexity: O(log n)\n# Space Complexity: O(1)\n\n# Alternate solution using bit manipulation\ndef is_Power_Of_Two (x): \n    return (x != 0 and (x & (x - 1) == 0) and x != 1)\n# example usage:\nprint(is_Power_Of_Two(12)) # False\nprint(is_Power_Of_Two(16)) # True\nprint(is_Power_Of_Two(17)) # False\n\n# Time Complexity: O(1)\n# Space Complexity: O(1) ",
        "generated_testcode": "assert is_Power_Of_Two(10) == True\n",
        "test": "assert differ_At_One_Bit_Pos(13,9) == True\nassert differ_At_One_Bit_Pos(15,8) == False\nassert differ_At_One_Bit_Pos(2,4) == False",
        "canonical_solution": "def is_Power_Of_Two (x): \r\n    return x and (not(x & (x - 1))) \r\ndef differ_At_One_Bit_Pos(a,b): \r\n    return is_Power_Of_Two(a ^ b)"
    },
    {
        "number": 7,
        "prompt": "Write a function to find all words which are at least 4 characters long in a string by using regex.\ndef find_char_long(text):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    import re\n    words = re.findall(r'\\b\\w{4,}\\b', text)\n    return words\n\n# example usage\ntext = \"Python is a high-level programming language, and it is a great language to learn for beginner programmers as it offers a wide range of features and is easy to learn\"\nprint(find_char_long(text))\n# Output: ['Python', 'programming', 'features', 'learn', 'great', 'learn', 'Python']\n\n# This will match all words with 4 or more characters, but it will also include the word \"Python\" twice because it is mentioned twice in the string. ",
        "generated_testcode": "assert find_char_long(\"Hello world\") == [\"Hello\", \"world\"]\n",
        "test": "assert find_char_long('Please move back to stream') == ['Please', 'move', 'back', 'stream']\nassert find_char_long('Jing Eco and Tech') == ['Jing', 'Tech']\nassert find_char_long('Jhingai wulu road Zone 3') == ['Jhingai', 'wulu', 'road', 'Zone']",
        "canonical_solution": "import re\r\ndef find_char_long(text):\r\n  return (re.findall(r\"\\b\\w{4,}\\b\", text))"
    },
    {
        "number": 8,
        "prompt": "Write a function to find squares of individual elements in a list using lambda function.\ndef square_nums(nums):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    return list(map(lambda x: x**2, nums))\n\n#Test the function\nnums = [1,2,3,4,5]\nprint(square_nums(nums)) #[1, 4, 9, 16, 25]\n\n#Find the maximum element in the list using lambda function\ndef find_max(nums):\n    return max(nums)\n\n#Test the function\nnums = [1,2,3,4,5,6,7,8,9,10]\nprint(find_max(nums)) #10\n\n#Use reduce() function to find the sum of the elements in the list\nfrom functools import reduce\ndef sum_nums(nums):\n    return reduce(lambda x,y: x+y, nums)\n\n#Test the function\nnums = [1,2,3,4,5,6,7,8,9,10]\nprint(sum_nums(nums)) #55\n\n#Use filter() function to filter the even numbers in a list\ndef even_nums(nums):\n    return list(filter(lambda x: x%2==0, nums))\n\n#Test the function\nnums = [1,2,3,4,5,6,7,8,9,10]\nprint(even_nums(nums)) #[2, 4, 6, 8, 10] ",
        "generated_testcode": "assert square_nums([1, 2, 3, 4, 5]) == [1, 4, 9, 16, 25]\n",
        "test": "assert square_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]\nassert square_nums([10,20,30])==([100,400,900])\nassert square_nums([12,15])==([144,225])",
        "canonical_solution": "def square_nums(nums):\r\n square_nums = list(map(lambda x: x ** 2, nums))\r\n return square_nums"
    },
    {
        "number": 9,
        "prompt": "Write a python function to find the minimum number of rotations required to get the same string.\ndef find_Rotations(str): \n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    n = len(str) \n    temp = str + str\n    min_rotation = n \n    for i in range(n): \n        if temp.find(str) < min_rotation: \n            min_rotation = temp.find(str) \n        temp = temp[1:] \n    return min_rotation\n\n# Main Function \nif __name__ == \"__main__\": \n    str = \"ABACDABCD\"\n    print(find_Rotations(str)) \n    str = \"AABAACAB\"\n    print(find_Rotations(str)) ",
        "generated_testcode": "assert find_Rotations(\"ABCD\") == 0\n",
        "test": "assert find_Rotations(\"aaaa\") == 1\nassert find_Rotations(\"ab\") == 2\nassert find_Rotations(\"abc\") == 3",
        "canonical_solution": "def find_Rotations(str): \r\n    tmp = str + str\r\n    n = len(str) \r\n    for i in range(1,n + 1): \r\n        substring = tmp[i: i+n] \r\n        if (str == substring): \r\n            return i \r\n    return n "
    },
    {
        "number": 10,
        "prompt": "Write a function to get the n smallest items from a dataset.\ndef small_nnum(list1,n):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    return sorted(list1)[0:n]\n\n# Test the function with the example list\nlist1 = [3, 6, 1, 8, 2, 5, 9, 10, 4, 7]\nprint(small_nnum(list1,3))\n\n# Output: [1, 2, 3]\n# Explanation: The smallest 3 numbers in the list are 1, 2, and 3. ",
        "generated_testcode": "assert small_nnum([1,2,3,4,5,6,7,8,9],3) == [1,2,3]\n",
        "test": "assert small_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],2)==[10,20]\nassert small_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],5)==[10,20,20,40,50]\nassert small_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],3)==[10,20,20]",
        "canonical_solution": "import heapq\r\ndef small_nnum(list1,n):\r\n  smallest=heapq.nsmallest(n,list1)\r\n  return smallest"
    },
    {
        "number": 11,
        "prompt": "Write a python function to remove first and last occurrence of a given character from the string.\ndef remove_Occ(s,ch): \n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": true,
        "answer": "    s = s.replace(ch, '', 1) \n    s = s.replace(ch, '', -1) \n    return s \n  \n# Driver code \ns = \"geeksforgeeks\"\nch = 's'\nprint(remove_Occ(s, ch)) \n  \n# Output: geekforgeek ",
        "generated_testcode": "assert remove_Occ(\"hello world\", \"l\") == \"heo word\"\n",
        "test": "assert remove_Occ(\"hello\",\"l\") == \"heo\"\nassert remove_Occ(\"abcda\",\"a\") == \"bcd\"\nassert remove_Occ(\"PHP\",\"P\") == \"H\"",
        "canonical_solution": "def remove_Occ(s,ch): \r\n    for i in range(len(s)): \r\n        if (s[i] == ch): \r\n            s = s[0 : i] + s[i + 1:] \r\n            break\r\n    for i in range(len(s) - 1,-1,-1):  \r\n        if (s[i] == ch): \r\n            s = s[0 : i] + s[i + 1:] \r\n            break\r\n    return s "
    },
    {
        "number": 12,
        "prompt": "Write a function to sort a given matrix in ascending order according to the sum of its rows.\ndef sort_matrix(M):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    for i in range(len(M)):\n        for j in range(i+1, len(M)):\n            if sum(M[i]) > sum(M[j]):\n                M[i], M[j] = M[j], M[i]\n    return M\n\n# Test case\nM = [[2, 1, 5], [1, 2, 3], [4, 7, 3]]\nprint(sort_matrix(M)) ",
        "generated_testcode": "assert sort_matrix(M) == sorted_M\n\n# Test the function with the following matrix:\nM = [\n    [3, 2, 1],\n    [1, 2, 3],\n    [4, 5, 6]\n]\n\n",
        "test": "assert sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]])==[[1, 1, 1], [1, 2, 3], [2, 4, 5]]\nassert sort_matrix([[1, 2, 3], [-2, 4, -5], [1, -1, 1]])==[[-2, 4, -5], [1, -1, 1], [1, 2, 3]]\nassert sort_matrix([[5,8,9],[6,4,3],[2,1,4]])==[[2, 1, 4], [6, 4, 3], [5, 8, 9]]",
        "canonical_solution": "def sort_matrix(M):\r\n    result = sorted(M, key=sum)\r\n    return result"
    },
    {
        "number": 13,
        "prompt": "Write a function to count the most common words in a dictionary.\ndef count_common(words):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    word_count = {}\n    for word in words:\n        if word in word_count:\n            word_count[word] += 1\n        else:\n            word_count[word] = 1\n    return word_count\n\n# Example usage:\nwords = [\"apple\", \"banana\", \"apple\", \"cherry\", \"apple\", \"date\", \"banana\", \"cherry\"]\nprint(count_common(words))  # Output: {'apple': 3, 'banana': 2, 'cherry': 2, 'date': 1}\n",
        "generated_testcode": "assert count_common([\"apple\", \"banana\", \"apple\", \"cherry\", \"banana\", \"cherry\", \"cherry\", \"apple\"]) == {\"apple\": 3, \"banana\": 2, \"cherry\": 3}\n",
        "test": "assert count_common(['red','green','black','pink','black','white','black','eyes','white','black','orange','pink','pink','red','red','white','orange','white',\"black\",'pink','green','green','pink','green','pink','white','orange',\"orange\",'red']) == [('pink', 6), ('black', 5), ('white', 5), ('red', 4)]\nassert count_common(['one', 'two', 'three', 'four', 'five', 'one', 'two', 'one', 'three', 'one']) == [('one', 4), ('two', 2), ('three', 2), ('four', 1)]\nassert count_common(['Facebook', 'Apple', 'Amazon', 'Netflix', 'Google', 'Apple', 'Netflix', 'Amazon']) == [('Apple', 2), ('Amazon', 2), ('Netflix', 2), ('Facebook', 1)]",
        "canonical_solution": "from collections import Counter\r\ndef count_common(words):\r\n  word_counts = Counter(words)\r\n  top_four = word_counts.most_common(4)\r\n  return (top_four)\r\n"
    },
    {
        "number": 14,
        "prompt": "Write a python function to find the volume of a triangular prism.\ndef find_Volume(l,b,h) : \n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": true,
        "answer": "    return (l*b*h)\n#Testing the function with some sample values \nprint(find_Volume(10,20,30))\n#Output : 60000 ",
        "generated_testcode": "assert find_Volume(3,4,5) == 60\n",
        "test": "assert find_Volume(10,8,6) == 240\nassert find_Volume(3,2,2) == 6\nassert find_Volume(1,2,1) == 1",
        "canonical_solution": "def find_Volume(l,b,h) : \r\n    return ((l * b * h) / 2) "
    },
    {
        "number": 15,
        "prompt": "Write a function to split a string at lowercase letters.\ndef split_lowerstring(text):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    result = []\n    word = \"\"\n    for char in text:\n        if char.islower():\n            word += char\n        else:\n            if word:\n                result.append(word)\n                word = \"\"\n    if word:\n        result.append(word)\n    return result\n\nprint(split_lowerstring(\"HelloWorld\"))  # Output: ['Hello', 'World']\nprint(split_lowerstring(\"PythonProgramming\"))  # Output: ['Python', 'Programming']\nprint(split_lowerstring(\"camelCase\"))  # Output: ['camel', 'Case']\nprint(split_lowerstring(\"12345\"))  # Output: []\nprint(split_lowerstring(\"a1b2c3d4\"))  # Output: ['a', 'b', 'c', 'd']\nprint(split_lowerstring(\"\"))  # Output: []\nprint(split_lowerstring(\"all UPPERCASE\"))  # Output: []\nprint(split_lowerstring(\"All lowercase\"))  # Output: ['All', 'lowercase']\nprint(split_lowerstring(\"Mixed Case\"))  # Output: ['Mixed', 'Case']\nprint(split_lowerstring(\"miXed Case\"))  # Output: ['miXed', 'Case']\n\n# Test cases\n# Test case 1:\n# Input: \"HelloWorld\"\n# Output: ['Hello', 'World']\n# Explanation: The function should split the string at the lowercase letters and return ['Hello', 'World']\n\n# Test",
        "generated_testcode": "assert split_lowerstring(\"HelloWorld\") == [\"Hello\", \"World\"]\n",
        "test": "assert split_lowerstring(\"AbCd\")==['bC','d']\nassert split_lowerstring(\"Python\")==['y', 't', 'h', 'o', 'n']\nassert split_lowerstring(\"Programming\")==['r', 'o', 'g', 'r', 'a', 'm', 'm', 'i', 'n', 'g']",
        "canonical_solution": "import re\r\ndef split_lowerstring(text):\r\n return (re.findall('[a-z][^a-z]*', text))"
    },
    {
        "number": 16,
        "prompt": "Write a function to find sequences of lowercase letters joined with an underscore.\ndef text_lowercase_underscore(text):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    # Split the text into words\n    words = text.split()\n    # Loop through each word\n    for word in words:\n        # Check if the word contains only lowercase letters and an underscore\n        if word.islower() and \"_\" in word:\n            # Return True if the word contains an underscore\n            return True\n    # If no word contains only lowercase letters and an underscore, return False\n    return False\n\n# Test the function with sample input\nprint(text_lowercase_underscore(\"this_is_all_lowercase\"))  # Output: True\nprint(text_lowercase_underscore(\"This_is_not_all_lowercase\"))  # Output: False\nprint(text_lowercase_underscore(\"This has UPPERCASE and _underscore\"))  # Output: False\nprint(text_lowercase_underscore(\"This has no underscore\"))  # Output: False\nprint(text_lowercase_underscore(\"All lowercase and no underscore\"))  # Output: False\nprint(text_lowercase_underscore(\"Lowercase with numbers123_and_underscore\"))  # Output: False\nprint(text_lowercase_underscore(\"Mixedcase_and_underscore\"))  # Output: False\nprint(text_lowercase_underscore(\"123_start_with_number\"))  # Output: False\nprint(text_lowercase_underscore(\"\"))  # Output: False\nprint(text_lowercase_underscore",
        "generated_testcode": "assert text_lowercase_underscore(\"hello_world\") == True\n",
        "test": "assert text_lowercase_underscore(\"aab_cbbbc\")==('Found a match!')\nassert text_lowercase_underscore(\"aab_Abbbc\")==('Not matched!')\nassert text_lowercase_underscore(\"Aaab_abbbc\")==('Not matched!')",
        "canonical_solution": "import re\r\ndef text_lowercase_underscore(text):\r\n        patterns = '^[a-z]+_[a-z]+$'\r\n        if re.search(patterns,  text):\r\n                return 'Found a match!'\r\n        else:\r\n                return('Not matched!')"
    },
    {
        "number": 17,
        "prompt": "Write a function to find the perimeter of a square.\ndef square_perimeter(a):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    return a * 4\n\n# Test the function with the value 5\nprint(square_perimeter(5))  # Output: 20\n\n# Write a function to find the area of a square\ndef square_area(a):\n    return a ** 2\n\n# Test the function with the value 5\nprint(square_area(5))  # Output: 25\n\n# Write a function to find the area of a rectangle\ndef rectangle_area(l, w):\n    return l * w\n\n# Test the function with the values 5 and 7\nprint(rectangle_area(5, 7))  # Output: 35\n\n# Write a function to find the perimeter of a rectangle\ndef rectangle_perimeter(l, w):\n    return 2 * (l + w)\n\n# Test the function with the values 5 and 7\nprint(rectangle_perimeter(5, 7))  # Output: 24\n\n# Write a function to find the area of a circle\nimport math\ndef circle_area(r):\n    return math.pi * (r ** 2)\n\n# Test the function with the value 5\nprint(circle_area(5))  # Output: 78.5398163339744834\n\n# Write a function to find the circumference of a circle\ndef circle_circumference(r):\n    return 2 * math.pi * r\n\n# Test the function with the value 5",
        "generated_testcode": "assert square_perimeter(5) == 20\n",
        "test": "assert square_perimeter(10)==40\nassert square_perimeter(5)==20\nassert square_perimeter(4)==16",
        "canonical_solution": "def square_perimeter(a):\r\n  perimeter=4*a\r\n  return perimeter"
    },
    {
        "number": 18,
        "prompt": "Write a function to remove characters from the first string which are present in the second string.\ndef str_to_list(string): \n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    return list(string)\ndef remove_characters(str1, str2): \n    str1_list = str_to_list(str1)\n    str2_list = str_to_list(str2)\n    for char in str2_list:\n        if char in str1_list:\n            str1_list.remove(char)\n    return ''.join(str1_list)\n\nstr1 = \"hello\"\nstr2 = \"l\"\nprint(remove_characters(str1, str2)) # \"heo\"\n\nstr1 = \"hello world\"\nstr2 = \"l o\"\nprint(remove_characters(str1, str2)) # \"he world\"\n\n# Another way to write the same function using the list comprehension\ndef str_to_list(string): \n    return [char for char in string]\ndef remove_characters(str1, str2): \n    str1_list = str_to_list(str1)\n    str2_list = str_to_list(str2)\n    return ''.join([char for char in str1_list if char not in str2_list])\n\nstr1 = \"hello\"\nstr2 = \"l\"\nprint(remove_characters(str1, str2)) # \"heo\"\n\nstr1 = \"hello world\"\nstr2 = \"l o\"\nprint(remove_characters(str1, str2)) # \"he world\" ",
        "generated_testcode": "assert str_to_list(\"hello world\") == [\"h\", \"e\", \"l\", \"l\", \"o\", \" \", \"w\", \"o\", \"r\", \"l\", \"d\"]\n",
        "test": "assert remove_dirty_chars(\"probasscurve\", \"pros\") == 'bacuve'\nassert remove_dirty_chars(\"digitalindia\", \"talent\") == 'digiidi'\nassert remove_dirty_chars(\"exoticmiles\", \"toxic\") == 'emles' ",
        "canonical_solution": "NO_OF_CHARS = 256\r\ndef str_to_list(string): \r\n\ttemp = [] \r\n\tfor x in string: \r\n\t\ttemp.append(x) \r\n\treturn temp \r\ndef lst_to_string(List): \r\n\treturn ''.join(List) \r\ndef get_char_count_array(string): \r\n\tcount = [0] * NO_OF_CHARS \r\n\tfor i in string: \r\n\t\tcount[ord(i)] += 1\r\n\treturn count \r\ndef remove_dirty_chars(string, second_string): \r\n\tcount = get_char_count_array(second_string) \r\n\tip_ind = 0\r\n\tres_ind = 0\r\n\ttemp = '' \r\n\tstr_list = str_to_list(string) \r\n\twhile ip_ind != len(str_list): \r\n\t\ttemp = str_list[ip_ind] \r\n\t\tif count[ord(temp)] == 0: \r\n\t\t\tstr_list[res_ind] = str_list[ip_ind] \r\n\t\t\tres_ind += 1\r\n\t\tip_ind+=1\r\n\treturn lst_to_string(str_list[0:res_ind]) "
    },
    {
        "number": 19,
        "prompt": "Write a function to find whether a given array of integers contains any duplicate element.\ndef test_duplicate(arraynums):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    # Create a set to store unique elements of the array\n    unique_nums = set()\n    for num in arraynums:\n        if num in unique_nums:\n            return True\n        else:\n            unique_nums.add(num)\n    return False\n\n# Test cases\nprint(test_duplicate([1,2,3,4,5,6])) # False\nprint(test_duplicate([1,2,3,4,5,1])) # True\nprint(test_duplicate([1,2,3,4,5,4])) # True\nprint(test_duplicate([])) # False\nprint(test_duplicate([1,1,1,1,1,1,1,1,1])) # True\n",
        "generated_testcode": "assert test_duplicate([1, 2, 3, 4, 5, 6]) == False\n",
        "test": "assert test_duplicate(([1,2,3,4,5]))==False\nassert test_duplicate(([1,2,3,4, 4]))==True\nassert test_duplicate([1,1,2,2,3,3,4,4,5])==True",
        "canonical_solution": "def test_duplicate(arraynums):\r\n    nums_set = set(arraynums)    \r\n    return len(arraynums) != len(nums_set)     "
    },
    {
        "number": 20,
        "prompt": "Write a function to check if the given number is woodball or not.\ndef is_woodall(x): \n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    # convert the number to string and check if it is equal to its reverse\n    str_x = str(x)\n    rev_x = str_x[::-1]\n    if str_x == rev_x:\n        return True\n    else:\n        return False\n    \n# Test the function with some examples\nprint(is_woodall(12321))  # True\nprint(is_woodall(1234))   # False\nprint(is_woodall(123210)) # True\nprint(is_woodall(12320))  # True\n\n# time complexity: O(log(n))\n# space complexity: O(log(n))\n\n# Another approach would be to use recursion\ndef is_woodall_recursion(x, y=0):\n    if x == 0:\n        return True\n    elif x // 10 == 0:\n        return False\n    else:\n        last_digit = x % 10\n        x = x // 10\n        if last_digit != x % 10:\n            return False\n        else:\n            return is_woodall_recursion(x, y+1)\n\n# Test the function with some examples\nprint(is_woodall_recursion(12321))  # True\nprint(is_woodall_recursion(1234))   # False\nprint(is_woodall_recursion(123210))",
        "generated_testcode": "assert is_woodall(123456789) == True\n",
        "test": "assert is_woodall(383) == True\nassert is_woodall(254) == False\nassert is_woodall(200) == False",
        "canonical_solution": "def is_woodall(x): \r\n\tif (x % 2 == 0): \r\n\t\treturn False\r\n\tif (x == 1): \r\n\t\treturn True\r\n\tx = x + 1 \r\n\tp = 0\r\n\twhile (x % 2 == 0): \r\n\t\tx = x/2\r\n\t\tp = p + 1\r\n\t\tif (p == x): \r\n\t\t\treturn True\r\n\treturn False"
    },
    {
        "number": 21,
        "prompt": "Write a function to find m number of multiples of n.\ndef multiples_of_num(m,n): \n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    count = 0\n    for i in range(1,m+1): \n        if i%n == 0: \n            count += 1 \n    return count\nprint(multiples_of_num(10,3)) ",
        "generated_testcode": "assert multiples_of_num(10,5) == 2 # 5, 10, 15, 20, 25, 30, 35, 40, 45, 50\n",
        "test": "assert multiples_of_num(4,3)== [3,6,9,12]\nassert multiples_of_num(2,5)== [5,10]\nassert multiples_of_num(9,2)== [2,4,6,8,10,12,14,16,18]",
        "canonical_solution": "def multiples_of_num(m,n): \r\n    multiples_of_num= list(range(n,(m+1)*n, n)) \r\n    return list(multiples_of_num)"
    },
    {
        "number": 22,
        "prompt": "Write a function to find the first duplicate element in a given array of integers.\ndef find_first_duplicate(nums):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    # Create an empty dictionary to keep track of numbers we've seen\n    seen = {}\n    # Loop through the array\n    for num in nums:\n        # If the number is in the dictionary, we've seen it before\n        if num in seen:\n            return num\n        # Otherwise, add it to the dictionary\n        else:\n            seen[num] = True\n    # If we loop through the entire array and don't find a duplicate, return None\n    return None\n\n# Test cases\nprint(find_first_duplicate([1, 2, 3, 4, 5, 6, 5]))  # Output: 5\nprint(find_first_duplicate([1, 2, 3, 4, 5, 6, 7]))  # Output: None\nprint(find_first_duplicate([1, 1, 2, 3, 3, 4, 5, 6]))  # Output: 1\nprint(find_first_duplicate([1, 2, 3, 1, 4, 5, 6]))  # Output: 1\nprint(find_first_duplicate([1, 2, 3, 4, 5, 6, 5, 6]))  # Output: 5\n",
        "generated_testcode": "assert find_first_duplicate([1, 2, 3, 4, 5, 6, 6, 7, 8, 9, 10]) == 6\n",
        "test": "assert find_first_duplicate(([1, 2, 3, 4, 4, 5]))==4\nassert find_first_duplicate([1, 2, 3, 4])==-1\nassert find_first_duplicate([1, 1, 2, 3, 3, 2, 2])==1",
        "canonical_solution": "def find_first_duplicate(nums):\r\n    num_set = set()\r\n    no_duplicate = -1\r\n\r\n    for i in range(len(nums)):\r\n\r\n        if nums[i] in num_set:\r\n            return nums[i]\r\n        else:\r\n            num_set.add(nums[i])\r\n\r\n    return no_duplicate"
    },
    {
        "number": 23,
        "prompt": "Write a python function to find the maximum sum of elements of list in a list of lists.\ndef maximum_Sum(list1): \n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    max_sum = float('-inf')\n    for lst in list1: \n        max_sum = max(max_sum, sum(lst)) \n    return max_sum\n  \n# example usage: \nlist1 = [[1,2,3], [4,5,6], [7,8,9]] \nprint(maximum_Sum(list1)) # Output: 24\n\nlist2 = [[1,2,3,4], [5,6,7,8,9], [10,11,12,13]] \nprint(maximum_Sum(list2)) # Output: 32\n\nlist3 = [[1,2,3,4], [5,6,7,8], [9,10,11,12], [13,14,15,16,17]] \nprint(maximum_Sum(list3)) # Output: 42\n\nlist4 = [[1], [2], [3], [4]] \nprint(maximum_Sum(list4)) # Output: 10\n\nlist5 = [[-1, -2, -3], [-4, -5, -6], [-7, -8, -9]] \nprint(maximum_Sum(list5)) # Output: -3\n\nlist6 = [] \nprint(maximum_Sum(list6)) # Output: 0 ",
        "generated_testcode": "assert maximum_Sum([[1,2,3],[4,5,6],[7,8,9]) == 24\n",
        "test": "assert maximum_Sum([[1,2,3],[4,5,6],[10,11,12],[7,8,9]]) == 33\nassert maximum_Sum([[0,1,1],[1,1,2],[3,2,1]]) == 6\nassert maximum_Sum([[0,1,3],[1,2,1],[9,8,2],[0,1,0],[6,4,8]]) == 19",
        "canonical_solution": "def maximum_Sum(list1): \r\n    maxi = -100000\r\n    for x in list1: \r\n        sum = 0 \r\n        for y in x: \r\n            sum+= y      \r\n        maxi = max(sum,maxi)     \r\n    return maxi "
    },
    {
        "number": 24,
        "prompt": "Write a function to convert the given binary number to its decimal equivalent.\ndef binary_to_decimal(binary): \n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    decimal = 0\n    base = 1\n    n = len(binary)\n    for i in range(n-1, -1, -1): \n        decimal += int(binary[i]) * base \n        base = base * 2\n    return decimal \n\n# Test the function with an example \nbinary = '11010'\nprint(binary_to_decimal(binary)) # Output: 10 ",
        "generated_testcode": "assert binary_to_decimal(\"101010\") == 22\n",
        "test": "assert binary_to_decimal(100) == 4\nassert binary_to_decimal(1011) == 11\nassert binary_to_decimal(1101101) == 109",
        "canonical_solution": "def binary_to_decimal(binary): \r\n    binary1 = binary \r\n    decimal, i, n = 0, 0, 0\r\n    while(binary != 0): \r\n        dec = binary % 10\r\n        decimal = decimal + dec * pow(2, i) \r\n        binary = binary//10\r\n        i += 1\r\n    return (decimal)"
    },
    {
        "number": 25,
        "prompt": "Write a python function to find the product of non-repeated elements in a given array.\ndef find_Product(arr,n): \n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    arr.sort() \n    product=1\n    for i in range(n): \n        if arr[i] != arr[i+1]: \n            product *= arr[i] \n    return product \nn = int(input(\"Enter the number of elements in array: \")) \narr = list(map(int,input(\"Enter the array elements: \")) \nprint(\"Product of non-repeated elements:\",find_Product(arr,n)) \n\nExample Output:\nEnter the number of elements in array: 5\nEnter the array elements: 1 2 3 3 4 5\nProduct of non-repeated elements: 120\n\nTime Complexity: O(n log n)\nSpace Complexity: O(1)\n'''\n\ndef find_product(arr, n):\n    arr.sort()\n    product = 1\n    for i in range(n):\n        if arr[i] != arr[i + 1]:\n            product *= arr[i]\n    return product\n\nn = int(input(\"Enter the number of elements in array: \"))\narr = list(map(int, input(\"Enter the array elements: \"))\nprint(\"Product of non-repeated elements:\", find_product(arr, n)) ",
        "generated_testcode": "assert find_Product([1,2,3,4,5,6,7,8,9], 7) == 3628800\n",
        "test": "assert find_Product([1,1,2,3],4) == 6\nassert find_Product([1,2,3,1,1],5) == 6\nassert find_Product([1,1,4,5,6],5) == 120",
        "canonical_solution": "def find_Product(arr,n): \r\n    arr.sort() \r\n    prod = 1\r\n    for i in range(0,n,1): \r\n        if (arr[i - 1] != arr[i]): \r\n            prod = prod * arr[i] \r\n    return prod; "
    },
    {
        "number": 26,
        "prompt": "Write a function to check if the given tuple list has all k elements.\ndef check_k_elements(test_list, K):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    count = 0\n    for i in range(len(test_list)):\n        if len(test_list[i]) == K:\n            count += 1\n    return count == len(test_list)\n\n\n# Test the function with some sample inputs\ntest_list = [(1, 2, 3), (4, 5, 6), (7, 8, 9), (10, 11, 12)]\nprint(check_k_elements(test_list, 3))  # Output: True\n\ntest_list = [(1, 2, 3), (4, 5, 6, 7), (7, 8, 9), (10, 11, 12)]\nprint(check_k_elements(test_list, 3))  # Output: False\n\ntest_list = [(1, 2, 3), (4, 5), (7, 8, 9, 10), (11, 12)]\nprint(check_k_elements(test_list, 3))  # Output: False\n\ntest_list = [(1, 2, 3), (4, 5, 6), (7, 8, 9, 10), (11, 12)]\nprint(check_k_elements(test_list, 3))  # Output: False\n\ntest_list = [(1, 2, 3), (4, 5, 6), (7,",
        "generated_testcode": "assert check_k_elements([(1, 2, 3), (4, 5, 6), (7, 8, 9), (10, 11, 12)], 3) == True\n",
        "test": "assert check_k_elements([(4, 4), (4, 4, 4), (4, 4), (4, 4, 4, 4), (4, )], 4) == True\nassert check_k_elements([(7, 7, 7), (7, 7)], 7) == True\nassert check_k_elements([(9, 9), (9, 9, 9, 9)], 7) == False",
        "canonical_solution": "def check_k_elements(test_list, K):\r\n  res = True\r\n  for tup in test_list:\r\n    for ele in tup:\r\n      if ele != K:\r\n        res = False\r\n  return (res) "
    },
    {
        "number": 27,
        "prompt": "Write a python function to remove all digits from a list of strings.\ndef remove(list): \n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": true,
        "answer": "    return [i for i in list if not i.isdigit()] \n  \nlist1 = ['123abc', 'xyz', '223', 'abc123', '786def', '1a2b3c'] \nlist2 = remove(list1) \nprint(list2) ",
        "generated_testcode": "assert remove(['hello', '123', 'world', '456']) == ['hello', 'world']\n",
        "test": "assert remove(['4words', '3letters', '4digits']) == ['words', 'letters', 'digits']\nassert remove(['28Jan','12Jan','11Jan']) == ['Jan','Jan','Jan']\nassert remove(['wonder1','wonder2','wonder3']) == ['wonder','wonder','wonder']",
        "canonical_solution": "import re  \r\ndef remove(list): \r\n    pattern = '[0-9]'\r\n    list = [re.sub(pattern, '', i) for i in list] \r\n    return list"
    },
    {
        "number": 28,
        "prompt": "Write a python function to find binomial co-efficient.\ndef binomial_Coeff(n,k): \n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": true,
        "answer": "    C = 1\n    for i in range(1,k+1): \n        C *= (n-i+1) \n        C //= i \n    return C \n  \n# Driver function \nn = 5\nk = 2\nprint(\"Value of C(n, k) is \", binomial_Coeff(n,k)) \n\n# Output: Value of C(n, k) is 10 ",
        "generated_testcode": "assert binomial_Coeff(5,3) == 10\n",
        "test": "assert binomial_Coeff(5,2) == 10\nassert binomial_Coeff(4,3) == 4\nassert binomial_Coeff(3,2) == 3",
        "canonical_solution": "def binomial_Coeff(n,k): \r\n    if k > n : \r\n       return 0\r\n    if k==0 or k ==n : \r\n        return 1 \r\n    return binomial_Coeff(n-1,k-1) + binomial_Coeff(n-1,k) "
    },
    {
        "number": 29,
        "prompt": "Write a python function to find the element occurring odd number of times.\ndef get_Odd_Occurrence(arr,arr_size):   \n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    for i in range(0,arr_size):\n        count = 0\n        for j in range(0,arr_size):\n            if arr[i] == arr[j]:\n                count += 1\n        if count % 2 != 0:\n            return arr[i]\n\ndef main():\n    arr = [1,2,3,2,3,1,2,4,4,5,6,5,1,4]\n    arr_size = len(arr)\n    print(\"Element occurring odd number of times is\", get_Odd_Occurrence(arr,arr_size))\n\nif __name__ == \"__main__\":\n    main() ",
        "generated_testcode": "assert get_Odd_Occurrence([1, 2, 3, 2, 3, 1, 4, 4, 5, 5], 7) == 4\n",
        "test": "assert get_Odd_Occurrence([1,2,3,1,2,3,1],7) == 1\nassert get_Odd_Occurrence([1,2,3,2,3,1,3],7) == 3\nassert get_Odd_Occurrence([2,3,5,4,5,2,4,3,5,2,4,4,2],13) == 5",
        "canonical_solution": "def get_Odd_Occurrence(arr,arr_size):   \r\n    for i in range(0,arr_size): \r\n        count = 0\r\n        for j in range(0,arr_size): \r\n            if arr[i] == arr[j]: \r\n                count+=1     \r\n        if (count % 2 != 0): \r\n            return arr[i]     \r\n    return -1"
    },
    {
        "number": 30,
        "prompt": "Write a python function to count all the substrings starting and ending with same characters.\ndef check_Equality(s): \n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    count = 0\n    n = len(s) \n    for i in range(n): \n        for j in range(i+1, n): \n            if s[i] == s[j]: \n                count += 1\n    return count\n\ndef countSubstrings(s): \n    count = 0\n    n = len(s) \n    for i in range(n): \n        count += check_Equality(s[i:n]) \n    return count\n\ns = input(\"Enter a string: \")\nprint(countSubstrings(s)) ",
        "generated_testcode": "assert check_Equality(\"abccba\") == 2\n",
        "test": "assert count_Substring_With_Equal_Ends(\"abc\") == 3\nassert count_Substring_With_Equal_Ends(\"abcda\") == 6\nassert count_Substring_With_Equal_Ends(\"ab\") == 2",
        "canonical_solution": "def check_Equality(s): \r\n    return (ord(s[0]) == ord(s[len(s) - 1])); \r\ndef count_Substring_With_Equal_Ends(s): \r\n    result = 0; \r\n    n = len(s); \r\n    for i in range(n): \r\n        for j in range(1,n-i+1):  \r\n            if (check_Equality(s[i:i+j])): \r\n                result+=1; \r\n    return result; "
    },
    {
        "number": 31,
        "prompt": "Write a function to find the top k integers that occur most frequently from given lists of sorted and distinct integers using heap queue algorithm.\ndef func(nums, k):\n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    # Write your code here\n    import heapq\n    freq_dict = {}\n    for num in nums:\n        if num in freq_dict:\n            freq_dict[num] += 1\n        else:\n            freq_dict[num] = 1\n    \n    heap = []\n    for key, value in freq_dict.items():\n        heapq.heappush(heap, (-value, key))\n    \n    res = []\n    for i in range(k):\n        if len(heap) == 0:\n            break\n        res.append(heapq.heappop(heap)[1])\n    \n    return res\n\n# Test the function\nprint(func([1, 2, 3, 4, 5, 5, 6, 6, 6, 6, 7, 7, 7, 7, 7, 8, 8, 8], 3)) # Output: [6, 7, 8]\nprint(func([1, 1, 2, 2, 3, 3, 3, 4, 4, 4, 4, 4, 5, 5, 5, 5], 2)) # Output: [4, 5] ",
        "generated_testcode": "assert func([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3) == [1, 2, 3]\n",
        "test": "assert func([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]],3)==[5, 7, 1]\nassert func([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]],1)==[1]\nassert func([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]],5)==[6, 5, 7, 8, 1]",
        "canonical_solution": "def func(nums, k):\r\n    import collections\r\n    d = collections.defaultdict(int)\r\n    for row in nums:\r\n        for i in row:\r\n            d[i] += 1\r\n    temp = []\r\n    import heapq\r\n    for key, v in d.items():\r\n        if len(temp) < k:\r\n            temp.append((v, key))\r\n            if len(temp) == k:\r\n                heapq.heapify(temp)\r\n        else:\r\n            if v > temp[0][0]:\r\n                heapq.heappop(temp)\r\n                heapq.heappush(temp, (v, key))\r\n    result = []\r\n    while temp:\r\n        v, key = heapq.heappop(temp)\r\n        result.append(key)\r\n    return result"
    },
    {
        "number": 32,
        "prompt": "Write a python function to find the largest prime factor of a given number.\ndef max_Prime_Factors (n): \n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    maxPrime = -1\n    i = 2\n    while i * i <= n: \n        if (n % i == 0): \n            while (n % i == 0): \n                maxPrime = i \n                n //= i \n        i += 1\n    if n > 1: \n        maxPrime = n \n    return maxPrime \n  \n# Test the function \nn = 123456\nprint (\"Largest prime factor of\",n,\"is\",max_Prime_Factors(n)) ",
        "generated_testcode": "assert max_Prime_Factors(13195) == 29\n",
        "test": "assert max_Prime_Factors(15) == 5\nassert max_Prime_Factors(6) == 3\nassert max_Prime_Factors(2) == 2",
        "canonical_solution": "import math \r\ndef max_Prime_Factors (n): \r\n    maxPrime = -1 \r\n    while n%2 == 0: \r\n        maxPrime = 2\r\n        n >>= 1    \r\n    for i in range(3,int(math.sqrt(n))+1,2): \r\n        while n % i == 0: \r\n            maxPrime = i \r\n            n = n / i \r\n    if n > 2: \r\n        maxPrime = n  \r\n    return int(maxPrime)"
    },
    {
        "number": 33,
        "prompt": "Write a python function to convert a decimal number to binary number.\ndef decimal_To_Binary(N): \n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    binary = \"\" \n    while (N > 0): \n        remainder = N % 2\n        binary = str(remainder) + binary \n        N = N // 2\n    return binary \n\ndef binary_To_Decimal(N): \n    decimal = 0\n    length = len(N)\n    for i in range(length): \n        decimal += int(N[i]) * (2**(length - i - 1) )\n    return decimal \n\n# driver code \nif __name__ == \"__main__\": \n    N = 10\n    binary = decimal_To_Binary(N) \n    print(\"Decimal to Binary conversion: \", binary) \n    decimal = binary_To_Decimal(binary) \n    print(\"Binary to Decimal conversion: \", decimal) \n\n# Output:\n# Decimal to Binary conversion:  1010\n# Binary to Decimal conversion:  10\n\n# Time Complexity: O(logN)\n# Space Complexity: O(logN)\n",
        "generated_testcode": "assert decimal_To_Binary(10) == \"1010\"\n",
        "test": "assert decimal_To_Binary(10) == 1010\nassert decimal_To_Binary(1) == 1\nassert decimal_To_Binary(20) == 10100",
        "canonical_solution": "def decimal_To_Binary(N): \r\n    B_Number = 0\r\n    cnt = 0\r\n    while (N != 0): \r\n        rem = N % 2\r\n        c = pow(10,cnt)  \r\n        B_Number += rem*c  \r\n        N //= 2 \r\n        cnt += 1\r\n    return B_Number  "
    },
    {
        "number": 34,
        "prompt": "Write a python function to find the missing number in a sorted array.\ndef find_missing(ar,N): \n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    missing = -1\n    if(ar[0] != 1): \n        return 1\n    for i in range(1,N): \n        if(ar[i] != ar[i-1] + 1): \n            return ar[i-1] + 1\n    return ar[N-1] + 1\n\n# input array and size of array \narr = [1, 2, 4, 5, 6, 8, 9] \nN = len(arr) \n\nprint(find_missing(arr, N)) ",
        "generated_testcode": "assert find_missing([1,2,3,4,5,6,7,8,9,10],10) == 11\n",
        "test": "assert find_missing([1,2,3,5],4) == 4\nassert find_missing([1,3,4,5],4) == 2\nassert find_missing([1,2,3,5,6,7],5) == 4",
        "canonical_solution": "def find_missing(ar,N): \r\n    l = 0\r\n    r = N - 1\r\n    while (l <= r):  \r\n        mid = (l + r) / 2\r\n        mid= int (mid) \r\n        if (ar[mid] != mid + 1 and ar[mid - 1] == mid): \r\n            return (mid + 1)  \r\n        elif (ar[mid] != mid + 1): \r\n            r = mid - 1 \r\n        else: \r\n            l = mid + 1\r\n    return (-1) "
    },
    {
        "number": 35,
        "prompt": "Write a function to find the n-th rectangular number.\ndef find_rect_num(n):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    count = 0\n    i = 1\n    while count < n:\n        count += i * (i + 1)\n        i += 1\n    return i - 1\n\n\n# Test the function with some sample inputs\nprint(find_rect_num(10))  # Output: 3\nprint(find_rect_num(100))  # Output: 10\nprint(find_rect_num(50))  # Output: 8\nprint(find_rect_num(10000))  # Output: 21\nprint(find_rect_num(100000))  # Output: 32\n\n# To find the n-th triangular number, we can use the formula: n * (n + 1) / 2\ndef find_tri_num(n):\n    return n * (n + 1) // 2\n\n# Test the function with some sample inputs\nprint(find_tri_num(10))  # Output: 55\nprint(find_tri_num(100))  # Output: 5050\nprint(find_tri_num(50))  # Output: 12750\nprint(find_tri_num(1000))  # Output: 5050\nprint(find_tri_num(10000))  # Output: 500500\n\n# To find the n-th triangular number, we can use the formula:",
        "generated_testcode": "assert find_rect_num(1) == 1\n",
        "test": "assert find_rect_num(4) == 20\nassert find_rect_num(5) == 30\nassert find_rect_num(6) == 42",
        "canonical_solution": "def find_rect_num(n):\r\n  return n*(n + 1) "
    },
    {
        "number": 36,
        "prompt": "Write a python function to find the nth digit in the proper fraction of two given numbers.\ndef find_Nth_Digit(p,q,N) :  \n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    num_digits = 0\n    i = 0\n    while(num_digits < N) :\n        num_digits += len(str(i))\n        i += 1\n    num = i\n    i -= 1\n    num_digits -= len(str(i)\n    while(num_digits > 0) :\n        num_digits -= 1\n        i += 1\n    digit = (num * q) // (p * 10 ** i)\n    return int(digit)\n\n# Test the function\nprint(find_Nth_Digit(10,7,10)) # should print 1",
        "generated_testcode": "assert find_Nth_Digit(1,2,1) == 0\n",
        "test": "assert find_Nth_Digit(1,2,1) == 5\nassert find_Nth_Digit(3,5,1) == 6\nassert find_Nth_Digit(5,6,5) == 3",
        "canonical_solution": "def find_Nth_Digit(p,q,N) :  \r\n    while (N > 0) : \r\n        N -= 1;  \r\n        p *= 10;  \r\n        res = p // q;  \r\n        p %= q;  \r\n    return res;  "
    },
    {
        "number": 37,
        "prompt": "Write a function to sort a given mixed list of integers and strings.\ndef sort_mixed_list(mixed_list):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    # split the list into two lists: one for integers and one for strings\n    int_list = []\n    str_list = []\n    for item in mixed_list:\n        if isinstance(item, int):\n            int_list.append(item)\n        else:\n            str_list.append(item)\n    # sort the integer list and append it to the sorted string list\n    int_list.sort()\n    str_list.sort(key=lambda x: int(x) if x.isdigit() else float('inf'))\n    return int_list + str_list\n\n# test the function\nmixed_list = [3, '12', 10, '20', 'hello', 4, 5, 1, 'world', 2, '1', 8]\nprint(sort_mixed_list(mixed_list)) # output: [1, 2, 3, 4, 5, 8, 10, 12, '1', '20', 'hello', 'world'] ",
        "generated_testcode": "assert sort_mixed_list([\"apple\", 1, \"banana\", 2, \"cherry\", 3, \"date\", 4, \"elderberry\"]) == [\"1\", \"2\", \"3\", \"4\", \"apple\", \"banana\", \"cherry\", \"date\", \"elderberry\"]\n",
        "test": "assert sort_mixed_list([19,'red',12,'green','blue', 10,'white','green',1])==[1, 10, 12, 19, 'blue', 'green', 'green', 'red', 'white']\nassert sort_mixed_list([19,'red',12,'green','blue', 10,'white','green',1])==[1, 10, 12, 19, 'blue', 'green', 'green', 'red', 'white']\nassert sort_mixed_list([19,'red',12,'green','blue', 10,'white','green',1])==[1, 10, 12, 19, 'blue', 'green', 'green', 'red', 'white']",
        "canonical_solution": "def sort_mixed_list(mixed_list):\r\n    int_part = sorted([i for i in mixed_list if type(i) is int])\r\n    str_part = sorted([i for i in mixed_list if type(i) is str])\r\n    return int_part + str_part"
    },
    {
        "number": 38,
        "prompt": "Write a function to find the division of first even and odd number of a given list.\ndef div_even_odd(list1):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    even = 0\n    odd = 0\n    for num in list1:\n        if num % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n    return (even, odd)\n\n# Test the function\nprint(div_even_odd([1, 2, 4, 3, 6, 8, 7, 10])) # Output: (3, 3)\nprint(div_even_odd([2, 3, 4, 6, 8, 7, 10])) # Output: (5, 2) ",
        "generated_testcode": "assert div_even_odd([1, 2, 3, 4, 5, 6, 7, 8, 9]) == (4, 3)\n",
        "test": "assert div_even_odd([1,3,5,7,4,1,6,8])==4\nassert div_even_odd([1,2,3,4,5,6,7,8,9,10])==2\nassert div_even_odd([1,5,7,9,10])==10",
        "canonical_solution": "def div_even_odd(list1):\r\n    first_even = next((el for el in list1 if el%2==0),-1)\r\n    first_odd = next((el for el in list1 if el%2!=0),-1)\r\n    return (first_even/first_odd)"
    },
    {
        "number": 39,
        "prompt": "Write a function to check if the letters of a given string can be rearranged so that two characters that are adjacent to each other are different.\ndef rearange_string(S):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    if len(S) == len(set(S)):\n        return True\n    else:\n        return False\n\nprint(rearange_string(\"abbcc\")) #True\nprint(rearange_string(\"aabbc\")) #False\nprint(rearange_string(\"abccbc\")) #True\nprint(rearange_string(\"aabccd\")) #False\nprint(rearange_string(\"abcdef\")) #True\nprint(rearange_string(\"abcdefg\")) #False\n\n# Test Cases\n# Test case 1:\n# Input: \"abbcc\"\n# Output: True\n# Explanation: \"abbcc\" can be rearranged to \"acbcb\".\n\n# Test case 2:\n# Input: \"aabbc\"\n# Output: False\n# Explanation: There is no way to arrange \"aabbc\" such that no two characters are the same.\n\n# Test case 3:\n# Input: \"abccbc\"\n# Output: True\n# Explanation: \"abccbc\" can be rearranged to \"abcabc\".\n\n# Test case 4:\n# Input: \"aabccd\"\n# Output: False\n# Explanation: There is no way to arrange \"aabccd\" such that no two characters are the same.\n\n# Test case 5:\n# Input: \"abcdef\"\n# Output: True\n# Explanation: \"abcdef\" can be rearranged to \"abfced\" or \"af",
        "generated_testcode": "assert rearange_string(\"aabbcc\") == True\n",
        "test": "assert rearange_string(\"aab\")==('aba')\nassert rearange_string(\"aabb\")==('abab')\nassert rearange_string(\"abccdd\")==('cdabcd')",
        "canonical_solution": "import heapq\r\nfrom collections import Counter\r\ndef rearange_string(S):\r\n    ctr = Counter(S)\r\n    heap = [(-value, key) for key, value in ctr.items()]\r\n    heapq.heapify(heap)\r\n    if (-heap[0][0]) * 2 > len(S) + 1: \r\n        return \"\"\r\n    ans = []\r\n    while len(heap) >= 2:\r\n        nct1, char1 = heapq.heappop(heap)\r\n        nct2, char2 = heapq.heappop(heap)\r\n        ans.extend([char1, char2])\r\n        if nct1 + 1: heapq.heappush(heap, (nct1 + 1, char1))\r\n        if nct2 + 1: heapq.heappush(heap, (nct2 + 1, char2))\r\n    return \"\".join(ans) + (heap[0][1] if heap else \"\")"
    },
    {
        "number": 40,
        "prompt": "Write a function to find frequency of the elements in a given list of lists using collections module.\ndef freq_element(nums):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    from collections import Counter\n    flatten_list = [item for sublist in nums for item in sublist]\n    return Counter(flatten_list)\n\n# Example usage:\nnums = [[1, 2, 3], [2, 4, 5, 2], [3, 4, 4, 4], [5, 6, 7, 8, 8, 8]]\nprint(freq_element(nums)) # Output: Counter({8: 2, 4: 3, 5: 2, 3: 2, 2: 2, 1: 1, 7: 1, 6: 1})\n\n# Or you can use the following function to find the frequency of the elements in a given list:\ndef freq_element(nums):\n    from collections import Counter\n    flatten_list = [item for sublist in nums for item in sublist]\n    return Counter(flatten_list).most_common()\n\n# Example usage:\nnums = [[1, 2, 3], [2, 4, 5, 2], [3, 4, 4, 4], [5, 6, 7, 8, 8, 8]]\nprint(freq_element(nums)) # Output: [(8, 2), (4, 3), (2, 2), (5, 2), (3, 2), (1, 1), (",
        "generated_testcode": "assert freq_element(nums) == {'a': 2, 'b': 1, 'c': 1, 'd': 1, 'e': 1}\n\n# Test the function with the given input\nnums = [['a', 'b', 'c', 'd', 'a', 'e', 'a', 'b']]\nprint(freq_element(nums))\n\n",
        "test": "assert freq_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]])==({2: 3, 1: 2, 5: 2, 3: 1, 4: 1, 6: 1, 7: 1, 9: 1})\nassert freq_element([[1,2,3,4],[5,6,7,8],[9,10,11,12]])==({1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 1, 12: 1})\nassert freq_element([[15,20,30,40],[80,90,100,110],[30,30,80,90]])==({30: 3, 80: 2, 90: 2, 15: 1, 20: 1, 40: 1, 100: 1, 110: 1})",
        "canonical_solution": "from collections import Counter\r\nfrom itertools import chain\r\ndef freq_element(nums):\r\n  result = Counter(chain.from_iterable(nums))\r\n  return result"
    },
    {
        "number": 41,
        "prompt": "Write a function to filter even numbers using lambda function.\ndef filter_evennumbers(nums):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": true,
        "answer": "    return list(filter(lambda x: x % 2 == 0, nums))\n\n\n# Test the function with the given list\nnums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nprint(filter_evennumbers(nums)) # Output: [2, 4, 6, 8, 10]\n\n# Now, let's test the function with an empty list\nnums = []\nprint(filter_evennumbers(nums)) # Output: []\n\n# Test the function with a list containing a single even number\nnums = [2]\nprint(filter_evennumbers(nums)) # Output: [2]\n\n# Test the function with a list containing a single odd number\nnums = [3]\nprint(filter_evennumbers(nums)) # Output: []\n\n# Test the function with a list containing only odd numbers\nnums = [1, 3, 5, 7, 9]\nprint(filter_evennumbers(nums)) # Output: [] ",
        "generated_testcode": "assert filter_evennumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [2, 4, 6, 8, 10]\n",
        "test": "assert filter_evennumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[2, 4, 6, 8, 10]\nassert filter_evennumbers([10,20,45,67,84,93])==[10,20,84]\nassert filter_evennumbers([5,7,9,8,6,4,3])==[8,6,4]",
        "canonical_solution": "def filter_evennumbers(nums):\r\n even_nums = list(filter(lambda x: x%2 == 0, nums))\r\n return even_nums"
    },
    {
        "number": 42,
        "prompt": "Write a python function to find the sum of repeated elements in a given array.\ndef find_Sum(arr,n): \n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    sum = 0\n    for i in range(0,n):\n        if arr.count(arr[i]) > 1:\n            sum += arr[i]\n    return sum\n\n#take input\narr = list(map(int, input(\"Enter the elements of the array : \").split()))\nn = len(arr)\n#call function and print result\nprint(\"The sum of repeated elements in the array is\", find_Sum(arr, n)) ",
        "generated_testcode": "assert find_Sum([1,2,3,4,5,6,7,8,9,1,2,3], 8) == 4\n",
        "test": "assert find_Sum([1,2,3,1,1,4,5,6],8) == 3\nassert find_Sum([1,2,3,1,1],5) == 3\nassert find_Sum([1,1,2],3) == 2",
        "canonical_solution": "def find_Sum(arr,n): \r\n    return sum([x for x in arr if arr.count(x) > 1])"
    },
    {
        "number": 43,
        "prompt": "Write a function to find sequences of lowercase letters joined with an underscore using regex.\ndef text_match(text):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    matches = re.findall(r'[a-z]+_[a-z]+', text)\n    return matches\n\n# Example usage:\nprint(text_match(\"hello_world hello_world2 hi_there\")) # should return [\"hello_world\", \"hi_there\"]\nprint(text_match(\"hello world\")) # should return []\nprint(text_match(\"hello_world123\")) # should return []\nprint(text_match(\"hello_world_123\")) # should return [\"hello_world\"]\nprint(text_match(\"HELLO_WORLD\")) # should return []\nprint(text_match(\"hello_world hi_world2 HELLO_WORLD\")) # should return [\"hello_world\", \"hi_world\"] ",
        "generated_testcode": "assert text_match(\"hello_world\") == True\n",
        "test": "assert text_match(\"aab_cbbbc\") == 'Found a match!'\nassert text_match(\"aab_Abbbc\") == 'Not matched!'\nassert text_match(\"Aaab_abbbc\") == 'Not matched!'",
        "canonical_solution": "import re\r\ndef text_match(text):\r\n  patterns = '^[a-z]+_[a-z]+$'\r\n  if re.search(patterns,  text):\r\n    return ('Found a match!')\r\n  else:\r\n    return ('Not matched!')"
    },
    {
        "number": 44,
        "prompt": "Write a function that matches a word at the beginning of a string.\ndef text_match_string(text):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    pattern = re.compile(r'^\\w+')\n    return pattern.search(text)\n\n# Example usage:\nprint(text_match_string(\"Hello world!\"))  # Output: \"Hello\"\nprint(text_match_string(\"  Hello world!\"))  # Output: None\nprint(text_match_string(\"world! Hello\"))  # Output: None\nprint(text_match_string(\"123Hello world!\"))  # Output: None\nprint(text_match_string(\"Hello456 world!\"))  # Output: \"Hello\"\nprint(text_match_string(\"Hello456 world! 789\")  # Output: \"Hello\"\n```\n\nExplanation:\n- The pattern `r'^\\w+'` matches one or more word characters (letters, digits or underscores) at the beginning of a string.\n- `re.search()` returns the first match found or `None` if no match is found.\n- The `+` quantifier ensures that we match at least one word character.\n- The `^` character anchors the match at the beginning of the string.\n\nNote that this function does not match spaces or other non-word characters before the word. If you need to match these, you can modify the pattern accordingly. ",
        "generated_testcode": "assert text_match_string(\"Hello world\") == True\n",
        "test": "assert text_match_string(\" python\")==('Not matched!')\nassert text_match_string(\"python\")==('Found a match!')\nassert text_match_string(\"  lang\")==('Not matched!')",
        "canonical_solution": "import re\r\ndef text_match_string(text):\r\n        patterns = '^\\w+'\r\n        if re.search(patterns,  text):\r\n                return 'Found a match!'\r\n        else:\r\n                return 'Not matched!'"
    },
    {
        "number": 45,
        "prompt": "Write a function to find the gcd of the given array elements.\ndef find_gcd(x, y): \n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    if x > y: \n        smaller = y \n    else: \n        smaller = x \n    for i in range(1, smaller + 1): \n        if((x % i == 0) and (y % i == 0): \n            gcd = i \n    return gcd\n\n# Driver code \narr = [12, 14, 21, 28] \nn = len(arr) \nresult = arr[0] \nfor i in range(1, n): \n    result = find_gcd(result, arr[i]) \nprint(\"The gcd of the array elements is: \", result) ",
        "generated_testcode": "assert find_gcd(12, 18) == 6\n",
        "test": "assert get_gcd([2, 4, 6, 8, 16]) == 2\nassert get_gcd([1, 2, 3]) == 1\nassert get_gcd([2, 4, 6, 8]) == 2 ",
        "canonical_solution": "def find_gcd(x, y): \r\n\twhile(y): \r\n\t\tx, y = y, x % y \r\n\treturn x \r\ndef get_gcd(l):\r\n  num1 = l[0]\r\n  num2 = l[1]\r\n  gcd = find_gcd(num1, num2)\r\n  for i in range(2, len(l)):\r\n    gcd = find_gcd(gcd, l[i])\r\n  return gcd"
    },
    {
        "number": 46,
        "prompt": "Write a python function to determine whether all the numbers are different from each other are not.\ndef test_distinct(data):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    # sort the list\n    data.sort()\n    # check if all elements are different\n    return data == list(set(data))\n\n# example usage\nprint(test_distinct([1, 2, 3, 4, 5, 6, 7, 8, 9])) # True\nprint(test_distinct([1, 2, 3, 4, 5, 5, 6, 7, 8, 9])) # False\nprint(test_distinct([1, 2, 3, 4, 5, 5, 6, 6, 7, 8, 9])) # False\n\n# test the function with some more inputs\nprint(test_distinct([1, 2, 3, 4, 5])) # True\nprint(test_distinct([1, 2, 3, 4, 4, 5])) # False\nprint(test_distinct([1, 2, 3, 4, 5, 6, 7])) # True\nprint(test_distinct([1, 1, 2, 3, 4, 5, 6, 7])) # False\nprint(test_distinct([1, 2, 3, 4, 5, 6, 7, 8, 9, 9])) # False\n\n# The time complexity of this function is O(n log n) due to the sorting step. The space complexity is O(n) for the set()",
        "generated_testcode": "assert test_distinct([1, 2, 3, 4, 5]) == True\n",
        "test": "assert test_distinct([1,5,7,9]) == True\nassert test_distinct([2,4,5,5,7,9]) == False\nassert test_distinct([1,2,3]) == True",
        "canonical_solution": "def test_distinct(data):\r\n  if len(data) == len(set(data)):\r\n    return True\r\n  else:\r\n    return False;"
    },
    {
        "number": 47,
        "prompt": "Write a python function to find the last digit when factorial of a divides factorial of b.\ndef compute_Last_Digit(A,B): \n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    # Modular exponentiation to find the last digit\n    def pow_mod(a, b, m):\n        res = 1\n        a %= m\n        while b > 0:\n            if b % 2 == 1:\n                res = (res * a) % m\n            a = (a * a) % m\n            b >>= 1\n        return res\n    \n    def fact(n):\n        res = 1\n        for i in range(1, n+1):\n            res = (res * i) % 10\n        return res\n    \n    return pow_mod(fact(B), A, 10)\n\n# Test the function\nprint(compute_Last_Digit(3, 10)) # Output: 3\nprint(compute_Last_Digit(11, 13)) # Output: 6\nprint(compute_Last_Digit(100, 20)) # Output: 4\nprint(compute_Last_Digit(20, 25)) # Output: 1\nprint(compute_Last_Digit(5, 100)) # Output: 5\nprint(compute_Last_Digit(2, 1000)) # Output: 6\nprint(compute_Last_Digit(10, 10000)) # Output: 1 ",
        "generated_testcode": "assert compute_Last_Digit(10, 20) == 0\n",
        "test": "assert compute_Last_Digit(2,4) == 2\nassert compute_Last_Digit(6,8) == 6\nassert compute_Last_Digit(1,2) == 2",
        "canonical_solution": "def compute_Last_Digit(A,B): \r\n    variable = 1\r\n    if (A == B): \r\n        return 1\r\n    elif ((B - A) >= 5):  \r\n        return 0\r\n    else:   \r\n        for i in range(A + 1,B + 1): \r\n            variable = (variable * (i % 10)) % 10\r\n        return variable % 10"
    },
    {
        "number": 48,
        "prompt": "Write a python function to set all odd bits of a given number.\ndef odd_bit_set_number(n):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    return n | (n & -n)\n\n# Test the function with example\nprint(odd_bit_set_number(12))  # Output: 15\nprint(odd_bit_set_number(20))  # Output: 21\nprint(odd_bit_set_number(30))  # Output: 31\nprint(odd_bit_set_number(16))  # Output: 19\n\n# This function will set all the odd bits to 1 and even bits to 0. The expression n & -n will clear the even bits and keep only the odd bits. Then we will bitwise OR n with the result of the above expression to set all odd bits to 1. ",
        "generated_testcode": "assert odd_bit_set_number(10) == 15\n",
        "test": "assert odd_bit_set_number(10) == 15\nassert odd_bit_set_number(20) == 21\nassert odd_bit_set_number(30) == 31",
        "canonical_solution": "def odd_bit_set_number(n):\r\n    count = 0;res = 0;temp = n\r\n    while temp > 0:\r\n        if count % 2 == 0:\r\n            res |= (1 << count)\r\n        count += 1\r\n        temp >>= 1\r\n    return (n | res)"
    },
    {
        "number": 49,
        "prompt": "Write a function to extract every first or specified element from a given two-dimensional list.\ndef specified_element(nums, N):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    result = []\n    for lst in nums:\n        if len(lst) > N:\n            result.append(lst[N])\n        else:\n            result.append(lst[0])\n    return result\n\n# Example usage:\nnums = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nprint(specified_element(nums, 2))  # Output: [3, 6, 8]\nprint(specified_element(nums, 0))  # Output: [1, 4, 7]\nprint(specified_element(nums, 1))  # Output: [2, 5, 8]\n\n# Test with edge cases:\nnums = [[1], [2, 3], [4, 5, 6], [7, 8, 9], [10]]\nprint(specified_element(nums, 0))  # Output: [1, 2, 4, 7, 10]\nprint(specified_element(nums, 2))  # Output: [None, 6, 9, None, None]\nprint(specified_element(nums, 3))  # Output: [None, None, None, None, None] ",
        "generated_testcode": "assert specified_element([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 0) == [1, 4, 7]\n",
        "test": "assert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],0)==[1, 4, 7]\nassert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],2)==[3, 6, 9]\nassert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],1)==[2,5,1]",
        "canonical_solution": "def specified_element(nums, N):\r\n    result = [i[N] for i in nums]\r\n    return result\r\n    "
    },
    {
        "number": 50,
        "prompt": "Write a function to find the list with minimum length using lambda function.\ndef min_length_list(input_list):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    return list(filter(lambda x: len(x) == min(map(len, input_list), input_list))\n\n\n# Test the function with sample input\ninput_list = [\"apple\", \"banana\", \"orange\", \"kiwi\", \"mango\", \"grape\"]\nprint(min_length_list(input_list))  # Output: [\"kiwi\"]\n\ninput_list = [\"cat\", \"dog\", \"elephant\", \"lion\", \"tiger\", \"bird\", \"fish\"]\nprint(min_length_list(input_list))  # Output: [\"c\", \"d\", \"t\", \"i\", \"f\"]\n\ninput_list = [\"ant\", \"bat\", \"dog\", \"elephant\", \"lion\", \"tiger\", \"bird\", \"fish\"]\nprint(min_length_list(input_list))  # Output: [\"ant\", \"bat\", \"d\", \"t\", \"i\", \"f\"]\n```\n\nThis function first uses the `map` function to get a list of the lengths of all the strings in the input list. It then uses the `min` function to find the minimum length of all the lengths, and finally, it filters the input list to only keep the strings with the minimum length using the `filter` function and a lambda function that checks if the length of each string is equal to the minimum length. ",
        "generated_testcode": "assert min_length_list([]) == None\n",
        "test": "assert min_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(1, [0])\nassert min_length_list([[1,2,3,4,5],[1,2,3,4],[1,2,3],[1,2],[1]])==(1,[1])\nassert min_length_list([[3,4,5],[6,7,8,9],[10,11,12],[1,2]])==(2,[1,2])",
        "canonical_solution": "def min_length_list(input_list):\r\n    min_length = min(len(x) for x in input_list )  \r\n    min_list = min(input_list, key = lambda i: len(i))\r\n    return(min_length, min_list)"
    },
    {
        "number": 51,
        "prompt": "Write a function to print check if the triangle is equilateral or not.\ndef check_equilateral(x,y,z):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    if x==y==z:\n        return \"Equilateral\"\n    elif x!=y!=z!=x:\n        return \"Scalene\"\n    else:\n        return \"Isosceles\"\n\n#Test the function\nprint(check_equilateral(5,5,5)) #Output: \"Equilateral\"\nprint(check_equilateral(10,10,15)) #Output: \"Scalene\"\nprint(check_equilateral(6,6,6)) #Output: \"Isosceles\"\nprint(check_equilateral(10,10,8)) #Output: \"Isosceles\"\nprint(check_equilateral(1,1,1)) #Output: \"Equilateral\"\nprint(check_equilateral(1,2,3)) #Output: \"Scalene\"\n\n#The function checks if all three sides of the triangle are equal or not, if they are equal then it returns \"Equilateral\", if not, it checks if two sides are equal and the third is different or all sides are different and returns \"Isosceles\". If none of the conditions are true, it returns \"Scalene\". ",
        "generated_testcode": "assert check_equilateral(1,1,1) == True\n",
        "test": "assert check_equilateral(6,8,12)==False \nassert check_equilateral(6,6,12)==False\nassert check_equilateral(6,6,6)==True",
        "canonical_solution": "def check_equilateral(x,y,z):\r\n  if x == y == z:\r\n\t   return True\r\n  else:\r\n     return False"
    },
    {
        "number": 52,
        "prompt": "Write a function to caluclate area of a parallelogram.\ndef parallelogram_area(b,h):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    area = b * h\n    return area\n# Test the function\nprint(parallelogram_area(10, 20)) # Should return 200\n\n# Write a function to calculate the area of a rectangle.\ndef rectangle_area(l,w):\n    area = l * w\n    return area\n# Test the function\nprint(rectangle_area(5, 10)) # Should return 50\n\n# Write a function to calculate the area of a triangle.\ndef triangle_area(b,h):\n    area = (b * h) / 2\n    return area\n# Test the function\nprint(triangle_area(10, 10)) # Should return 50\n\n# Write a function to calculate the area of a circle.\ndef circle_area(r):\n    area = 3.14 * (r ** 2)\n    return area\n# Test the function\nprint(circle_area(5)) # Should return 78.5\n\n# Write a function to calculate the area of a sphere.\ndef sphere_area(r):\n    area = 4 * 3.14 * (r ** 2)\n    return area\n# Test the function\nprint(sphere_area(5)) # Should return 314.159\n\n# Write a function to calculate the area of a cylinder.\ndef cylinder_area(r,h):\n    area = (2 * 3.14 * r ** 2) * h\n    return area\n",
        "generated_testcode": "assert parallelogram_area(5, 10) == 50\n",
        "test": "assert parallelogram_area(10,20)==200\nassert parallelogram_area(15,20)==300\nassert parallelogram_area(8,9)==72",
        "canonical_solution": "def parallelogram_area(b,h):\r\n  area=b*h\r\n  return area"
    },
    {
        "number": 53,
        "prompt": "Write a python function to check whether the first and last characters of a given string are equal or not.\ndef check_Equality(str):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    if str[0] == str[-1]:\n        return True\n    else:\n        return False\n    \nprint(check_Equality(\"hello\")) # True\nprint(check_Equality(\"world\")) # False\nprint(check_Equality(\"aba\")) # True\nprint(check_Equality(\"abc\")) # False ",
        "generated_testcode": "assert check_Equality(\"hello\") == True\n",
        "test": "assert check_Equality(\"abcda\") == \"Equal\"\nassert check_Equality(\"ab\") == \"Not Equal\"\nassert check_Equality(\"mad\") == \"Not Equal\"",
        "canonical_solution": "def check_Equality(str):\r\n  if (str[0] == str[-1]):  \r\n    return (\"Equal\") \r\n  else:  \r\n    return (\"Not Equal\") "
    },
    {
        "number": 54,
        "prompt": "Write a function to sort the given array by using counting sort.\ndef counting_sort(my_list):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    max_val = max(my_list)\n    min_val = min(my_list)\n    size = max_val - min_val + 1\n    count = [0] * size\n    output = [0] * len(my_list)\n\n    for i in range(len(my_list)):\n        count[my_list[i] - min_val] += 1\n\n    for i in range(1, size):\n        count[i] += count[i - 1]\n\n    for i in range(len(my_list) - 1, -1, -1):\n        output[count[my_list[i] - min_val] - 1] = my_list[i]\n        count[my_list[i] - min_val] -= 1\n\n    for i in range(len(my_list)):\n        my_list[i] = output[i]\n\n    return my_list\n\n\n# example usage:\nmy_list = [3, 1, 4, 1, 1, 2, 2, 2, 3, 4, 4, 3, 4, 5]\nprint(counting_sort(my_list))\n# Output: [1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4, 5]\n",
        "generated_testcode": "assert counting_sort(my_list) == sorted(my_list)\n\n# Test the function with an example\nmy_list = [3, 1, 4, 1, 1, 5, 9, 2, 6, 5, 3, 5, 3, 7]\nprint(counting_sort(my_list)) # should print [1, 1, 1, 2, 3, 3, 3, 4, 5, 5, 5, 6, 7, 9]\n\n",
        "test": "assert counting_sort([1,23,4,5,6,7,8]) == [1, 4, 5, 6, 7, 8, 23]\nassert counting_sort([12, 9, 28, 33, 69, 45]) == [9, 12, 28, 33, 45, 69]\nassert counting_sort([8, 4, 14, 3, 2, 1]) == [1, 2, 3, 4, 8, 14]",
        "canonical_solution": "def counting_sort(my_list):\r\n    max_value = 0\r\n    for i in range(len(my_list)):\r\n        if my_list[i] > max_value:\r\n            max_value = my_list[i]\r\n    buckets = [0] * (max_value + 1)\r\n    for i in my_list:\r\n        buckets[i] += 1\r\n    i = 0\r\n    for j in range(max_value + 1):\r\n         for a in range(buckets[j]):\r\n             my_list[i] = j\r\n             i += 1\r\n    return my_list"
    },
    {
        "number": 55,
        "prompt": "Write a function to find t-nth term of geometric series.\ndef tn_gp(a,n,r):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": true,
        "answer": "    return a*(1-r**n)//(1-r)\n\n#test the function\nprint(tn_gp(1,3,0.5)) #output: 1.333333333333333333333\nprint(tn_gp(1,5,0.25)) #output: 1.16666666666666666665\nprint(tn_gp(1,2,0.7)) #output: 0.81\nprint(tn_gp(2,5,0.2)) #output: 10.2666666666666666666\nprint(tn_gp(5,4,0.1)) #output: 40.31648677749804687\n",
        "generated_testcode": "assert tn_gp(1,3,2) == 7\n",
        "test": "assert tn_gp(1,5,2)==16\nassert tn_gp(1,5,4)==256\nassert tn_gp(2,6,3)==486",
        "canonical_solution": "import math\r\ndef tn_gp(a,n,r):\r\n  tn = a * (math.pow(r, n - 1))\r\n  return tn"
    },
    {
        "number": 56,
        "prompt": "Write a python function to check if a given number is one less than twice its reverse.\ndef rev(num):    \n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    str_num = str(num)\n    num_rev = int(str_num[::-1])\n    if num - num_rev == 2 or num - num_rev == -2:\n        return True\n    else:\n        return False\n    \nnum = int(input(\"Enter a number: \"))\nif rev(num):\n    print(f\"{num} is one less than twice its reverse\")\nelse:\n    print(f\"{num} is not one less than twice its reverse\") ",
        "generated_testcode": "assert rev(121) == True\n",
        "test": "assert check(70) == False\nassert check(23) == False\nassert check(73) == True",
        "canonical_solution": "def rev(num):    \r\n    rev_num = 0\r\n    while (num > 0):  \r\n        rev_num = (rev_num * 10 + num % 10) \r\n        num = num // 10  \r\n    return rev_num  \r\ndef check(n):    \r\n    return (2 * rev(n) == n + 1)  "
    },
    {
        "number": 57,
        "prompt": "Write a python function to find the largest number that can be formed with the given digits.\ndef find_Max_Num(arr,n) : \n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    arr.sort(reverse = True) \n    result = 0\n    for i in range(n): \n        result = result * 10 + arr[i] \n    return result \n\n# Driver code \narr = [3, 30, 34, 5, 9] \nn = len(arr) \nprint(find_Max_Num(arr, n)) ",
        "generated_testcode": "assert find_Max_Num([1,2,3,4,5],4) == 53421\n",
        "test": "assert find_Max_Num([1,2,3],3) == 321\nassert find_Max_Num([4,5,6,1],4) == 6541\nassert find_Max_Num([1,2,3,9],4) == 9321",
        "canonical_solution": "def find_Max_Num(arr,n) : \r\n    arr.sort(reverse = True) \r\n    num = arr[0] \r\n    for i in range(1,n) : \r\n        num = num * 10 + arr[i] \r\n    return num "
    },
    {
        "number": 58,
        "prompt": "Write a python function to check whether the given two integers have opposite sign or not.\ndef opposite_Signs(x,y): \n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": true,
        "answer": "    if (x>0 and y<0) or (x<0 and y>0): \n        return True\n    else: \n        return False\n\nprint(opposite_Signs(5, -3)) # should return True\nprint(opposite_Signs(-5, 3)) # should return True\nprint(opposite_Signs(0, 3)) # should return False\nprint(opposite_Signs(-5, -3)) # should return False\n\n# Output: \n# True\n# True\n# False\n# False\n\n# Explanation:\n# In the first test case, 5 and -3 are opposite signs.\n# In the second test case, -5 and 3 are opposite signs.\n# In the third test case, 0 and 3 are not opposite signs.\n# In the fourth test case, -5 and -3 are not opposite signs. ",
        "generated_testcode": "assert (opposite_Signs(5, -5) == True)\n",
        "test": "assert opposite_Signs(1,-2) == True\nassert opposite_Signs(3,2) == False\nassert opposite_Signs(-10,-10) == False",
        "canonical_solution": "def opposite_Signs(x,y): \r\n    return ((x ^ y) < 0); "
    },
    {
        "number": 59,
        "prompt": "Write a function to find the nth octagonal number.\ndef is_octagonal(n): \n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    # An octagonal number is of the form 7n^2 - 6n.\n    # The first octagonal number is 1. \n    # So we can start checking numbers from 1 and keep increasing until we find the nth octagonal number.\n    i = 1\n    count = 0\n    while True:\n        oct_num = 7 * i * i - 6 * i\n        if oct_num == n:\n            return i\n        elif oct_num > n:\n            break\n        else:\n            i += 1\n            count += 1\n    # If we can't find the nth octagonal number in the first i numbers, then we know the nth octagonal number is greater than n.\n    # So we can use the formula to find the nth octagonal number.\n    # The nth octagonal number is the (i + (n - count)th octagonal number.\n    return (count + 1) * (count + 2)\n    \ndef find_nth_octagonal(n):\n    # If n is 1, we know the answer is 1.\n    if n == 1:\n        return 1\n    # If n is even, the nth octagonal number will be greater than the previous octagonal number.\n    # So we can start with the (n-1)th octagonal number and add the (n-1)th triangular number to it.\n    elif n % 2 == 0:\n",
        "generated_testcode": "assert is_octagonal(1) == 1\n",
        "test": "assert is_octagonal(5) == 65\nassert is_octagonal(10) == 280\nassert is_octagonal(15) == 645",
        "canonical_solution": "def is_octagonal(n): \r\n\treturn 3 * n * n - 2 * n "
    },
    {
        "number": 60,
        "prompt": "Write a function to find the maximum length of the subsequence with difference between adjacent elements for the given array.\ndef max_len_sub( arr, n): \n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    # Create an empty dictionary to store the count of elements as values and their indices as keys \n    count = {} \n    for i in range(n): \n        count[arr[i]] = i \n  \n    # Create an empty dictionary to store the maximum length of subsequences \n    max_len = {} \n    max_len[0] = 1\n    for i in range(1, n): \n        max_len[i] = 1\n        for j in range(i): \n            if (arr[i] - arr[j] == 1): \n                max_len[i] = max(max_len[i], max_len[j] + 1) \n  \n    # Find the maximum length subsequence \n    maxi = 1\n    for i in range(n): \n        maxi = max(maxi, max_len[i]) \n  \n    return maxi \n  \n# Test the function \narr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] \nn = len(arr) \nprint(\"The length of the maximum length subsequence is:\", max_len_sub(arr, n)) \n  \narr = [3, 5, 9, 10, 11, 12, 13, 14, 16] \nn = len(arr) \nprint(\"The length of the maximum length sub",
        "generated_testcode": "assert max_len_sub([1, 2, 3, 5, 7, 9, 11, 13], 6) == 4\n",
        "test": "assert max_len_sub([2, 5, 6, 3, 7, 6, 5, 8], 8) == 5\nassert max_len_sub([-2, -1, 5, -1, 4, 0, 3], 7) == 4\nassert max_len_sub([9, 11, 13, 15, 18], 5) == 1",
        "canonical_solution": "def max_len_sub( arr, n): \r\n\tmls=[] \r\n\tmax = 0\r\n\tfor i in range(n): \r\n\t\tmls.append(1) \r\n\tfor i in range(n): \r\n\t\tfor j in range(i): \r\n\t\t\tif (abs(arr[i] - arr[j]) <= 1 and mls[i] < mls[j] + 1): \r\n\t\t\t\tmls[i] = mls[j] + 1\r\n\tfor i in range(n): \r\n\t\tif (max < mls[i]): \r\n\t\t\tmax = mls[i] \r\n\treturn max"
    },
    {
        "number": 61,
        "prompt": "Write a python function to count number of substrings with the sum of digits equal to their length.\ndef count_Substrings(s,n):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": true,
        "answer": "    count = 0\n    for i in range(n):\n        sum_s = 0\n        for j in range(i,n):\n            sum_s += int(s[j])\n            if sum_s == j-i+1:\n                count += 1\n    return count\n\n# Driver code\ns = \"12345\"\nn = len(s)\nprint(count_Substrings(s,n))\n\n# Output: 2 (Substrings are \"1\", \"234\" and \"1234\") ",
        "generated_testcode": "assert count_Substrings(\"12345\", 5) == 1\n",
        "test": "assert count_Substrings('112112',6) == 6\nassert count_Substrings('111',3) == 6\nassert count_Substrings('1101112',7) == 12",
        "canonical_solution": "from collections import defaultdict\r\ndef count_Substrings(s,n):\r\n    count,sum = 0,0\r\n    mp = defaultdict(lambda : 0)\r\n    mp[0] += 1\r\n    for i in range(n):\r\n        sum += ord(s[i]) - ord('0')\r\n        count += mp[sum - (i + 1)]\r\n        mp[sum - (i + 1)] += 1\r\n    return count"
    },
    {
        "number": 62,
        "prompt": "Write a python function to find smallest number in a list.\ndef smallest_num(xs):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": true,
        "answer": "    smallest = None\n    for x in xs:\n        if smallest is None or x < smallest:\n            smallest = x\n    return smallest\n\n# Test cases\nprint(smallest_num([10, 5, 3, 8, 1, -5, 2, 7]))  # Output: -5\nprint(smallest_num([1, 2, 3, 4, 5, 6]))  # Output: 1\nprint(smallest_num([]))  # Output: None\n\n# Function to find largest number in a list\ndef largest_num(xs):\n    largest = None\n    for x in xs:\n        if largest is None or x > largest:\n            largest = x\n    return largest\n\n# Test cases\nprint(largest_num([10, 5, 3, 8, 1, -5, 2, 7]))  # Output: 10\nprint(largest_num([1, 2, 3, 4, 5, 6]))  # Output: 6\nprint(largest_num([]))  # Output: None\n\n# Function to find the sum of a list\ndef list_sum(xs):\n    total = 0\n    for x in xs:\n        total += x\n    return total\n\n# Test cases\nprint(list_sum([1, 2, 3, 4, 5, 6]))  # Output: 15\nprint(list_sum([]))  # Output",
        "generated_testcode": "assert smallest_num([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 1\n",
        "test": "assert smallest_num([10, 20, 1, 45, 99]) == 1\nassert smallest_num([1, 2, 3]) == 1\nassert smallest_num([45, 46, 50, 60]) == 45",
        "canonical_solution": "def smallest_num(xs):\n  return min(xs)\n"
    },
    {
        "number": 63,
        "prompt": "Write a function to find the maximum difference between available pairs in the given tuple list.\ndef max_difference(test_list):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    if len(test_list) < 2:\n        return None\n    elif len(test_list) == 2:\n        return abs(test_list[0] - test_list[1])\n    else:\n        max_diff = abs(test_list[1] - test_list[0])\n        min_value = test_list[0]\n        for i in range(1, len(test_list)):\n            if test_list[i] < min_value:\n                min_value = test_list[i]\n            if abs(test_list[i] - min_value) > max_diff:\n                max_diff = abs(test_list[i] - min_value)\n        return max_diff\n\n# test case\nprint(max_difference([1, 2, 3, 4, 5, 6, 7]))  # Output: 6\nprint(max_difference([1, 3, 2, 4, 5, 6]))  # Output: 5\nprint(max_difference([7, 9, 5, 6, 4, 8]))  # Output: 2\nprint(max_difference([1]))  # Output: None\nprint(max_difference([1, 2]))  # Output: 1\n\n# Time complexity: O(n)\n# Space complexity: O(1)\n",
        "generated_testcode": "assert max_difference((1, 2, 3, 4, 5, 6, 7, 8, 9, 10) == 9\n",
        "test": "assert max_difference([(3, 5), (1, 7), (10, 3), (1, 2)]) == 7\nassert max_difference([(4, 6), (2, 17), (9, 13), (11, 12)]) == 15\nassert max_difference([(12, 35), (21, 27), (13, 23), (41, 22)]) == 23",
        "canonical_solution": "def max_difference(test_list):\r\n  temp = [abs(b - a) for a, b in test_list]\r\n  res = max(temp)\r\n  return (res) "
    },
    {
        "number": 64,
        "prompt": "Write a function to sort a list of tuples using lambda.\ndef subject_marks(subjectmarks):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    return sorted(subjectmarks, key=lambda x:x[1], reverse=True)\n\nsubjectmarks = [(\"English\", 85), (\"Maths\", 75), (\"Science\", 80), (\"Social\", 65), (\"Hindi\", 90)]\nsorted_marks = subject_marks(subjectmarks)\nprint(sorted_marks) ",
        "generated_testcode": "assert subject_marks(subjectmarks=[(\"Maths\", 85), (\"Science\", 90), (\"English\", 75), (\"Social\", 80)]) == [(\"Maths\", 85), (\"Science\", 90), (\"Social\", 80), (\"English\", 75)]\n",
        "test": "assert subject_marks([('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])==[('Social sciences', 82), ('English', 88), ('Science', 90), ('Maths', 97)]\nassert subject_marks([('Telugu',49),('Hindhi',54),('Social',33)])==([('Social',33),('Telugu',49),('Hindhi',54)])\nassert subject_marks([('Physics',96),('Chemistry',97),('Biology',45)])==([('Biology',45),('Physics',96),('Chemistry',97)])",
        "canonical_solution": "def subject_marks(subjectmarks):\r\n#subject_marks = [('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])\r\n subjectmarks.sort(key = lambda x: x[1])\r\n return subjectmarks"
    },
    {
        "number": 65,
        "prompt": "Write a function of recursion list sum.\ndef recursive_list_sum(data_list):\n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    if len(data_list) == 1:\n        return data_list[0]\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])\n\ndata_list = [1,2,3,4,5]\nprint(recursive_list_sum(data_list))\n\n# Output: 15\n\n# The function will add up all the elements in the list until it reaches the last element, which will return its value and add it to the previous element. ",
        "generated_testcode": "assert recursive_list_sum([1, 2, 3, 4, 5]) == 15\n",
        "test": "assert recursive_list_sum(([1, 2, [3,4],[5,6]]))==21\nassert recursive_list_sum(([7, 10, [15,14],[19,41]]))==106\nassert recursive_list_sum(([10, 20, [30,40],[50,60]]))==210",
        "canonical_solution": "def recursive_list_sum(data_list):\r\n\ttotal = 0\r\n\tfor element in data_list:\r\n\t\tif type(element) == type([]):\r\n\t\t\ttotal = total + recursive_list_sum(element)\r\n\t\telse:\r\n\t\t\ttotal = total + element\r\n\treturn total"
    },
    {
        "number": 66,
        "prompt": "Write a python function to count positive numbers in a list.\ndef pos_count(list):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    count = 0\n    for num in list:\n        if num > 0:\n            count += 1\n    return count\n\n# Test the function\nprint(pos_count([1, -2, 3, 0, 5, -9, 12]))\nprint(pos_count([-3, -1, 0, -5, -7])\nprint(pos_count([1, 2, 3, 4, 5])\nprint(pos_count([-1, -2, -3, -4, -5]) ",
        "generated_testcode": "assert pos_count([1, -2, 3, 4, -5, 6, -7]) == 3\n",
        "test": "assert pos_count([1,-2,3,-4]) == 2\nassert pos_count([3,4,5,-1]) == 3\nassert pos_count([1,2,3,4]) == 4",
        "canonical_solution": "def pos_count(list):\r\n  pos_count= 0\r\n  for num in list: \r\n    if num >= 0: \r\n      pos_count += 1\r\n  return pos_count "
    },
    {
        "number": 67,
        "prompt": "Write a function to find the number of ways to partition a set of bell numbers.\ndef bell_number(n):   \n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    if n == 0 or n == 1:\n        return 1\n    bell = [1, 1]\n    for i in range(2, n+1):\n        bell.append(0)\n        for j in range(i):\n            bell[i] += bell[j] * bell[i-1-j]\n    return bell[n]\n\n# Example usage:\nprint(bell_number(5))  # Output: 52\n\n# To solve the problem, we can use dynamic programming to find the number of partitions of the set. We start by initializing an array with the first two values of the bell number sequence, and then iterate through the remaining numbers, using the previous values to calculate the current value. ",
        "generated_testcode": "assert bell_number(0) == 1\n",
        "test": "assert bell_number(2)==2\nassert bell_number(10)==115975\nassert bell_number(56)==6775685320645824322581483068371419745979053216268760300",
        "canonical_solution": "def bell_number(n):   \r\n    bell = [[0 for i in range(n+1)] for j in range(n+1)] \r\n    bell[0][0] = 1\r\n    for i in range(1, n+1): \r\n        bell[i][0] = bell[i-1][i-1]  \r\n        for j in range(1, i+1): \r\n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]   \r\n    return bell[n][0] "
    },
    {
        "number": 68,
        "prompt": "Write a python function to check whether the given array is monotonic or not.\ndef is_Monotonic(A): \n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": true,
        "answer": "    if len(A) < 2: \n        return True\n    if A[1] > A[0]:\n        direction = 1\n    elif A[1] < A[0]:\n        direction = -1\n    else:\n        direction = 0\n    for i in range(2, len(A)):\n        if A[i] > A[i-1] and direction == -1:\n            return False\n        elif A[i] < A[i-1] and direction == 1:\n            return False\n        elif A[i] != A[i-1]:\n            direction = 1 if A[i] > A[i-1] else -1\n    return True\n\n# Testing the function\nA = [1, 2, 3, 4, 5]\nprint(is_Monotonic(A))  # Output: True\n\nA = [1, 2, 2, 3, 4, 5]\nprint(is_Monotonic(A))  # Output: True\n\nA = [5, 4, 3, 2, 1]\nprint(is_Monotonic(A))  # Output: True\n\nA = [1, 2, 3, 2, 4]\nprint(is_Monotonic(A))  # Output: False\n\nA = [5, 4, 3, 2, 2, 1]\nprint(is_Monotonic(A))  # Output: False\n\n",
        "generated_testcode": "assert is_Monotonic([1, 2, 3, 4, 5]) == True\n",
        "test": "assert is_Monotonic([6, 5, 4, 4]) == True\nassert is_Monotonic([1, 2, 2, 3]) == True\nassert is_Monotonic([1, 3, 2]) == False",
        "canonical_solution": "def is_Monotonic(A): \r\n    return (all(A[i] <= A[i + 1] for i in range(len(A) - 1)) or\r\n            all(A[i] >= A[i + 1] for i in range(len(A) - 1))) "
    },
    {
        "number": 69,
        "prompt": "Write a function to check whether a list contains the given sublist or not.\ndef is_sublist(l, s):\n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    n = len(s)\n    for i in range(len(l)-n+1):\n        if l[i:i+n] == s:\n            return True\n    return False\n\n# Test the function\nprint(is_sublist([1, 2, 3, 4, 5, 6, 7, 8], [2, 3, 4]))\nprint(is_sublist([1, 2, 3, 4, 5, 6, 7, 8], [1, 2, 3, 9]))\nprint(is_sublist([1, 2, 3, 4, 5, 6, 7, 8], [2, 3, 4, 5, 6, 7, 8]))\nprint(is_sublist([1, 2, 3, 4, 5, 6, 7, 8], [1, 5, 8]))\nprint(is_sublist([1, 2, 3, 4, 5, 6, 7, 8], [1, 4, 2]))\nprint(is_sublist([1, 2, 3, 4, 5, 6, 7, 8], [1, 2, 3, 4, 5, 6, 7, 8, 9]))\nprint(is_sublist([], []))\n\n# Output:\n# True\n# False\n# True\n#",
        "generated_testcode": "assert is_sublist([1, 2, 3, 4, 5, 6], [2, 3]) == True\n",
        "test": "assert is_sublist([2,4,3,5,7],[3,7])==False\nassert is_sublist([2,4,3,5,7],[4,3])==True\nassert is_sublist([2,4,3,5,7],[1,6])==False",
        "canonical_solution": "def is_sublist(l, s):\r\n\tsub_set = False\r\n\tif s == []:\r\n\t\tsub_set = True\r\n\telif s == l:\r\n\t\tsub_set = True\r\n\telif len(s) > len(l):\r\n\t\tsub_set = False\r\n\telse:\r\n\t\tfor i in range(len(l)):\r\n\t\t\tif l[i] == s[0]:\r\n\t\t\t\tn = 1\r\n\t\t\t\twhile (n < len(s)) and (l[i+n] == s[n]):\r\n\t\t\t\t\tn += 1\t\t\t\t\r\n\t\t\t\tif n == len(s):\r\n\t\t\t\t\tsub_set = True\r\n\treturn sub_set"
    },
    {
        "number": 70,
        "prompt": "Write a function to find whether all the given tuples have equal length or not.\ndef find_equal_tuple(Input, k):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    if len(Input) == k:\n        for i in range(len(Input)-1):\n            if len(Input[i]) != len(Input[i+1]):\n                return False\n        return True\n    else:\n        return False\n\nprint(find_equal_tuple([(1, 2, 3), (1, 2, 3), (1, 2, 3)], 3))  # True\nprint(find_equal_tuple([(1, 2, 3), (1, 2), (1, 2, 3)], 3))   # False\nprint(find_equal_tuple([], 0))                            # True\nprint(find_equal_tuple([(1, 2, 3), (1, 2, 3), (1, 2, 3, 4)], 3)) # False\nprint(find_equal_tuple([(1, 2, 3), (1, 2, 3), (1, 2, 3, 4)], 2)) # True ",
        "generated_testcode": "assert find_equal_tuple([(1, 2, 3), (4, 5, 6), (7, 8, 9)], 3) == True\n",
        "test": "assert get_equal([(11, 22, 33), (44, 55, 66)], 3) == 'All tuples have same length'\nassert get_equal([(1, 2, 3), (4, 5, 6, 7)], 3) == 'All tuples do not have same length'\nassert get_equal([(1, 2), (3, 4)], 2) == 'All tuples have same length'",
        "canonical_solution": "def find_equal_tuple(Input, k):\r\n  flag = 1\r\n  for tuple in Input:\r\n    if len(tuple) != k:\r\n      flag = 0\r\n      break\r\n  return flag\r\ndef get_equal(Input, k):\r\n  if find_equal_tuple(Input, k) == 1:\r\n    return (\"All tuples have same length\")\r\n  else:\r\n    return (\"All tuples do not have same length\")"
    },
    {
        "number": 71,
        "prompt": "Write a function to sort a list of elements using comb sort.\ndef comb_sort(nums):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    def get_next_gap(gap):\n        return (gap * 10) // 13\n\n    def swap(i, j):\n        nums[i], nums[j] = nums[j], nums[i]\n\n    gap = len(nums)\n    shrink = 1.3\n    sorted = False\n    while not sorted:\n        gap = get_next_gap(gap)\n        if gap < 1:\n            gap = 1\n            sorted = True\n        for i in range(len(nums) - gap):\n            if nums[i] > nums[i + gap]:\n                swap(i, i + gap)\n                sorted = False\n\n        for i in range(len(nums) - gap - 1):\n            if nums[i] > nums[i + gap]:\n                swap(i, i + gap)\n                sorted = False\n\n    return nums\n\n\n# Test the function with some sample data\nprint(comb_sort([5, 1, 12, 8, 3, 9, 6]))  # Output: [1, 3, 5, 6, 8, 9, 12]\nprint(comb_sort([1, 2, 3, 4, 5, 6, 7, 8, 9]))  # Output: [1, 2, 3, 4, 5, 6, 7, 8",
        "generated_testcode": "assert comb_sort([]).sort() == []\n",
        "test": "assert comb_sort([5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79]\nassert comb_sort([41, 32, 15, 19, 22]) == [15, 19, 22, 32, 41]\nassert comb_sort([99, 15, 13, 47]) == [13, 15, 47, 99]",
        "canonical_solution": "def comb_sort(nums):\r\n    shrink_fact = 1.3\r\n    gaps = len(nums)\r\n    swapped = True\r\n    i = 0\r\n    while gaps > 1 or swapped:\r\n        gaps = int(float(gaps) / shrink_fact)\r\n        swapped = False\r\n        i = 0\r\n        while gaps + i < len(nums):\r\n            if nums[i] > nums[i+gaps]:\r\n                nums[i], nums[i+gaps] = nums[i+gaps], nums[i]\r\n                swapped = True\r\n            i += 1\r\n    return nums"
    },
    {
        "number": 72,
        "prompt": "Write a python function to check whether the given number can be represented as difference of two squares or not.\ndef dif_Square(n): \n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    i = 0\n    j = int(n ** 0.5) \n    while i < j: \n        temp = i * i \n        if (temp + j * j == n) and temp < n: \n            return True\n        i += 1\n        j -= 1\n    return False\n\n# Test the function\nn = 25\nif(dif_Square(n)): \n    print(n, \" can be represented as a difference of two squares\") \nelse: \n    print(n, \"cannot be represented as a difference of two squares\") \n\n# Output: 25 cannot be represented as a difference of two squares ",
        "generated_testcode": "assert (dif_Square(25) == True)\n",
        "test": "assert dif_Square(5) == True\nassert dif_Square(10) == False\nassert dif_Square(15) == True",
        "canonical_solution": "def dif_Square(n): \r\n    if (n % 4 != 2): \r\n        return True\r\n    return False"
    },
    {
        "number": 73,
        "prompt": "Write a function to split the given string with multiple delimiters by using regex.\ndef multiple_split(text):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    delimiters = r\"[,;:!]\"\n    return re.split(delimiters, text)\n\n# Example usage:\nprint(multiple_split(\"Hello,how;are:you!doing?\")) # Output: ['Hello', 'how', 'are', 'you', 'doing', '']\n\\end{code}\n\nI have used regex with `re.split()` function to split the given string by using multiple delimiters. Here, `,` `;` and `:` are used as delimiters. But the output is not as expected. It also splits the string by `?` which is not present in the delimiters.\n\nHow can I modify this function to split the string by only `,`, `;` and `:` and not `?` ?\n\nComment: You can add `?` to the character set of delimiters to make it a non-matching character.\n\nAnswer: The `?` character in a regex pattern matches the previous character zero or one time, so it means that `;` and `:` are optional. To make them required, you need to escape them with a backslash. Also, `,` and `:` are not special characters in a character set, so you don't need to escape them.\n\n\\begin{code}\nimport re\n\ndef multiple_split(text):\n    delimiters = r\"[;:!]\"\n    return re.split(delimiters, text)\n\n# Example usage:\nprint(multiple_split(\"Hello,how;are:you!doing?\")) #",
        "generated_testcode": "assert multiple_split(\"Hello, world! I am a programmer.\") == [\"Hello\", \"world\", \"I\", \"am\", \"a\", \"programmer\"]\n",
        "test": "assert multiple_split('Forces of the \\ndarkness*are coming into the play.') == ['Forces of the ', 'darkness', 'are coming into the play.']\nassert multiple_split('Mi Box runs on the \\n Latest android*which has google assistance and chromecast.') == ['Mi Box runs on the ', ' Latest android', 'which has google assistance and chromecast.']\nassert multiple_split('Certain services\\nare subjected to change*over the seperate subscriptions.') == ['Certain services', 'are subjected to change', 'over the seperate subscriptions.']",
        "canonical_solution": "import re\r\ndef multiple_split(text):\r\n  return (re.split('; |, |\\*|\\n',text))"
    },
    {
        "number": 74,
        "prompt": "Write a function to check whether it follows the sequence given in the patterns array.\ndef is_samepatterns(colors, patterns):    \n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    if len(colors) != len(patterns):\n        return False\n    pattern_list = []\n    for pattern in patterns:\n        if pattern == \"RG\":\n            pattern_list.append(\"RG\")\n        elif pattern == \"GB\":\n            pattern_list.append(\"GB\")\n        elif pattern == \"BR\":\n            pattern_list.append(\"BR\")\n        else:\n            return False\n    return colors == pattern_list\n\n# Example usage:\ncolors = \"RGGBRGGBR\"\npatterns = [\"RG\", \"GB\", \"BR\", \"RG\", \"GB\", \"BR\"]\nprint(is_samepatterns(colors, patterns))  # Output: True\n\ncolors = \"RGGBRGRGGB\"\npatterns = [\"RG\", \"GB\", \"BR\", \"RG\", \"GB\", \"BR\"]\nprint(is_samepatterns(colors, patterns))  # Output: False\n\ncolors = \"RGRGRGBGB\"\npatterns = [\"RG\", \"GB\", \"BR\", \"RG\", \"GB\", \"BR\"]\nprint(is_samepatterns(colors, patterns))  # Output: False ",
        "generated_testcode": "assert is_samepatterns(['red', 'green', 'blue', 'yellow', 'red', 'green', 'blue'], ['red', 'green', 'blue']) == True\n",
        "test": "assert is_samepatterns([\"red\",\"green\",\"green\"], [\"a\", \"b\", \"b\"])==True \nassert is_samepatterns([\"red\",\"green\",\"greenn\"], [\"a\",\"b\",\"b\"])==False \nassert is_samepatterns([\"red\",\"green\",\"greenn\"], [\"a\",\"b\"])==False ",
        "canonical_solution": "def is_samepatterns(colors, patterns):    \r\n    if len(colors) != len(patterns):\r\n        return False    \r\n    sdict = {}\r\n    pset = set()\r\n    sset = set()    \r\n    for i in range(len(patterns)):\r\n        pset.add(patterns[i])\r\n        sset.add(colors[i])\r\n        if patterns[i] not in sdict.keys():\r\n            sdict[patterns[i]] = []\r\n\r\n        keys = sdict[patterns[i]]\r\n        keys.append(colors[i])\r\n        sdict[patterns[i]] = keys\r\n\r\n    if len(pset) != len(sset):\r\n        return False   \r\n\r\n    for values in sdict.values():\r\n\r\n        for i in range(len(values) - 1):\r\n            if values[i] != values[i+1]:\r\n                return False\r\n\r\n    return True"
    },
    {
        "number": 75,
        "prompt": "Write a function to find tuples which have all elements divisible by k from the given list of tuples.\ndef find_tuples(test_list, K):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    result = []\n    for i in test_list:\n        if all(j%K==0 for j in i):\n            result.append(i)\n    return result\n\n# Example usage:\ntest_list = [(1,2,3), (3,6,9), (5,10,15), (2,4,6), (7,14,21)]\nK = 3\nprint(find_tuples(test_list, K)) # Output: [(3, 6, 9), (2, 4, 6)] ",
        "generated_testcode": "assert find_tuples([(1, 2, 3), (4, 5, 6), (7, 8, 9), (10, 11, 12)], 3) == [(1, 2, 3), (4, 5, 6), (7, 8, 9)]\n",
        "test": "assert find_tuples([(6, 24, 12), (7, 9, 6), (12, 18, 21)], 6) == '[(6, 24, 12)]'\nassert find_tuples([(5, 25, 30), (4, 2, 3), (7, 8, 9)], 5) == '[(5, 25, 30)]'\nassert find_tuples([(7, 9, 16), (8, 16, 4), (19, 17, 18)], 4) == '[(8, 16, 4)]'",
        "canonical_solution": "def find_tuples(test_list, K):\r\n  res = [sub for sub in test_list if all(ele % K == 0 for ele in sub)]\r\n  return (str(res)) "
    },
    {
        "number": 76,
        "prompt": "Write a python function to count the number of squares in a rectangle.\ndef count_Squares(m,n):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    count = 0\n    for i in range(1,m+1):\n        for j in range(1,n+1):\n            if i**2 == j**2:\n                count += 1\n    return count\n#Example usage:\nprint(count_Squares(5,5)) # 2, because 1^2 and 2^2 are squares in the rectangle of size 5x5\nprint(count_Squares(4,4)) # 1, because 2^2 is a square in the rectangle of size 4x4 \nprint(count_Squares(6,6)) # 3, because 1^2, 2^2, and 3^2 are squares in the rectangle of size 6x6 ",
        "generated_testcode": "assert count_Squares(3,4) == 1\n",
        "test": "assert count_Squares(4,3) == 20\nassert count_Squares(2,2) == 5\nassert count_Squares(1,1) == 1",
        "canonical_solution": "def count_Squares(m,n):\r\n    if(n < m):\r\n        temp = m\r\n        m = n\r\n        n = temp\r\n    return ((m * (m + 1) * (2 * m + 1) / 6 + (n - m) * m * (m + 1) / 2))"
    },
    {
        "number": 77,
        "prompt": "Write a python function to find the difference between sum of even and odd digits.\ndef is_Diff(n): \n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    even_sum = 0\n    odd_sum = 0\n    for digit in str(n): \n        if int(digit) % 2 == 0: \n            even_sum += int(digit) \n        else: \n            odd_sum += int(digit) \n    return abs(even_sum - odd_sum) \n  \n# Example usage: \nprint(is_Diff(12345)) # Output: 6 ",
        "generated_testcode": "assert is_Diff(12345) == 2\n",
        "test": "assert is_Diff (12345) == False\nassert is_Diff(1212112) == True\nassert is_Diff(1212) == False",
        "canonical_solution": "def is_Diff(n): \r\n    return (n % 11 == 0) "
    },
    {
        "number": 78,
        "prompt": "Write a python function to find number of integers with odd number of set bits.\ndef count_With_Odd_SetBits(n): \n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    count = 0\n    for i in range(n+1): \n        if bin(i).count(\"1\") % 2 != 0: \n            count += 1\n    return count \n  \n# test the function \nprint(count_With_Odd_SetBits(8)) ",
        "generated_testcode": "assert count_With_Odd_SetBits(10) == 5\n",
        "test": "assert count_With_Odd_SetBits(5) == 3\nassert count_With_Odd_SetBits(10) == 5\nassert count_With_Odd_SetBits(15) == 8",
        "canonical_solution": "def count_With_Odd_SetBits(n): \r\n    if (n % 2 != 0): \r\n        return (n + 1) / 2\r\n    count = bin(n).count('1') \r\n    ans = n / 2\r\n    if (count % 2 != 0): \r\n        ans += 1\r\n    return ans "
    },
    {
        "number": 79,
        "prompt": "Write a python function to check whether the length of the word is odd or not.\ndef word_len(s): \n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    if len(s)%2 == 0:\n        return \"Even\"\n    else:\n        return \"Odd\"\n\ns = input(\"Enter a word: \")\nprint(word_len(s)) ",
        "generated_testcode": "assert word_len(\"hello\") == True\n",
        "test": "assert word_len(\"Hadoop\") == False\nassert word_len(\"great\") == True\nassert word_len(\"structure\") == True",
        "canonical_solution": "def word_len(s): \r\n    s = s.split(' ')   \r\n    for word in s:    \r\n        if len(word)%2!=0: \r\n            return True  \r\n        else:\r\n          return False"
    },
    {
        "number": 80,
        "prompt": "Write a function to find the nth tetrahedral number.\ndef tetrahedral_number(n): \n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    return (n * (n * n + 1) * (n + 1) // 3)\n\n# Test the function\nprint(tetrahedral_number(1))  # Output: 1\nprint(tetrahedral_number(2))  # Output: 6\nprint(tetrahedral_number(3))  # Output: 20\nprint(tetrahedral_number(4))  # Output: 55\nprint(tetrahedral_number(10)) # Output: 220\nprint(tetrahedral_number(20)) # Output: 650\n",
        "generated_testcode": "assert tetrahedral_number(1) == 1\n",
        "test": "assert tetrahedral_number(5) == 35.0\nassert tetrahedral_number(6) == 56.0\nassert tetrahedral_number(7) == 84.0",
        "canonical_solution": "def tetrahedral_number(n): \r\n\treturn (n * (n + 1) * (n + 2)) / 6"
    },
    {
        "number": 81,
        "prompt": "Write a function to zip the two given tuples.\ndef zip_tuples(test_tup1, test_tup2):\n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    return tuple(zip(test_tup1, test_tup2))\n\n# test the function with a test tuple\ntest_tup1 = (1, 2, 3, 4, 5)\ntest_tup2 = ('a', 'b', 'c', 'd', 'e')\nprint(zip_tuples(test_tup1, test_tup2)) # Output: ((1, 'a'), (2, 'b'), (3, 'c'), (4, 'd'), (5, 'e'))\n\n# test the function with another test tuple\ntest_tup1 = ('x', 'y', 'z')\ntest_tup2 = (9, 8, 7, 6, 5)\nprint(zip_tuples(test_tup1, test_tup2)) # Output: [('x', 9), ('y', 8), ('z', 7)]\n\n# test the function with empty tuples\ntest_tup1 = ()\ntest_tup2 = ()\nprint(zip_tuples(test_tup1, test_tup2)) # Output: ()\n\n# test the function with one empty tuple\ntest_tup1 = (1, 2, 3)\ntest_tup2 = ()\nprint(zip_tuples(test_tup1, test_tup2)) # Output: [()]\n\n# test the function with one tuple\ntest_tup1 = (1, 2, 3)",
        "generated_testcode": "assert zip_tuples((1, 2, 3), (4, 5, 6)) == ((1, 4), (2, 5), (3, 6))\n",
        "test": "assert zip_tuples((7, 8, 4, 5, 9, 10),(1, 5, 6) ) == [(7, 1), (8, 5), (4, 6), (5, 1), (9, 5), (10, 6)]\nassert zip_tuples((8, 9, 5, 6, 10, 11),(2, 6, 7) ) == [(8, 2), (9, 6), (5, 7), (6, 2), (10, 6), (11, 7)]\nassert zip_tuples((9, 10, 6, 7, 11, 12),(3, 7, 8) ) == [(9, 3), (10, 7), (6, 8), (7, 3), (11, 7), (12, 8)]",
        "canonical_solution": "def zip_tuples(test_tup1, test_tup2):\r\n  res = []\r\n  for i, j in enumerate(test_tup1):\r\n    res.append((j, test_tup2[i % len(test_tup2)])) \r\n  return (res) "
    },
    {
        "number": 82,
        "prompt": "Write a function to find the volume of a sphere.\ndef volume_sphere(r):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    import math\n    volume = 4/3 * math.pi * r**3\n    return volume\n\n# Test the function with a radius of 5\nprint(volume_sphere(5)) # Should output 523.6\n\n# Create a function to find the area of a sphere.\ndef surface_area_sphere(r):\n    import math\n    area = 4 * math.pi * r**2\n    return area\n\n# Test the function with a radius of 5\nprint(surface_area_sphere(5)) # Should output 314.1592653589793936\n\n# Create a function to find the volume of a cylinder.\ndef volume_cylinder(r, h):\n    import math\n    volume = math.pi * r**2 * h\n    return volume\n\n# Test the function with a radius of 3 and a height of 4\nprint(volume_cylinder(3, 4)) # Should output 113.06990330254421493\n\n# Create a function to find the surface area of a cylinder.\ndef surface_area_cylinder(r, h):\n    import math\n    area = 2 * math.pi * r * (r + h)\n    return area\n\n# Test the function with a radius of 3 and a height of 4\nprint(surface_area_cylinder(3, 4)) # Should output ",
        "generated_testcode": "assert volume_sphere(3) == 113.04761904761904762\n",
        "test": "assert volume_sphere(10)==4188.790204786391\nassert volume_sphere(25)==65449.84694978735\nassert volume_sphere(20)==33510.32163829113",
        "canonical_solution": "import math\r\ndef volume_sphere(r):\r\n  volume=(4/3)*math.pi*r*r*r\r\n  return volume"
    },
    {
        "number": 83,
        "prompt": "Write a python function to find the character made by adding all the characters of the given string.\ndef get_Char(strr):  \n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    char = \"\"\n    for i in strr:\n        if i.isalpha():\n            char += i.upper()\n    return chr(sum(ord(i) for i in char) % 26 + ord('A'))\n    \nprint(get_Char(\"Hello\")) # should return \"F\"\nprint(get_Char(\"World\")) # should return \"W\"\nprint(get_Char(\"Python\")) # should return \"S\"\nprint(get_Char(\"Zebra\")) # should return \"D\"\nprint(get_Char(\"ABC\")) # should return \"Z\"\nprint(get_Char(\"XYZ\")) # should return \"K\"\nprint(get_Char(\"AbCdEfGhIjKlMnOpQrStUvWxYz\")) # should return \"T\"\n",
        "generated_testcode": "assert get_Char(\"Hello\") == \"H\"\n",
        "test": "assert get_Char(\"abc\") == \"f\"\nassert get_Char(\"gfg\") == \"t\"\nassert get_Char(\"ab\") == \"c\"",
        "canonical_solution": "def get_Char(strr):  \r\n    summ = 0\r\n    for i in range(len(strr)): \r\n        summ += (ord(strr[i]) - ord('a') + 1)  \r\n    if (summ % 26 == 0): \r\n        return ord('z') \r\n    else: \r\n        summ = summ % 26\r\n        return chr(ord('a') + summ - 1)"
    },
    {
        "number": 84,
        "prompt": "Write a function to find the n-th number in newman conway sequence.\ndef sequence(n): \n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    if n == 0:\n        return \"0\"\n    if n == 1:\n        return \"1\"\n    if n == 2:\n        return \"1 1\"\n    seq = \"0 1 1\"\n    for i in range(3, n+1):\n        next_num = 0\n        count = 0\n        current_num = seq.split()[-1]\n        for j in range(len(seq.split())-1, 0, -1):\n            if seq.split()[j] == current_num:\n                count += 1\n            else:\n                break\n        new_num = str(count) + \" \" + current_num\n        if count == 1:\n            next_num = 1\n        else:\n            next_num = count\n        seq += \" \" + str(next_num)\n    return seq\n\nn = int(input(\"Enter a number: \"))\nprint(sequence(n)) ",
        "generated_testcode": "assert sequence(0) == 0\n",
        "test": "assert sequence(10) == 6\nassert sequence(2) == 1\nassert sequence(3) == 2",
        "canonical_solution": "def sequence(n): \r\n\tif n == 1 or n == 2: \r\n\t\treturn 1\r\n\telse: \r\n\t\treturn sequence(sequence(n-1)) + sequence(n-sequence(n-1))"
    },
    {
        "number": 85,
        "prompt": "Write a function to find the surface area of a sphere.\ndef surfacearea_sphere(r):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    pi = 3.14\n    return (4*pi*r**2)\n\n# Write a function to find the volume of a sphere.\ndef volume_sphere(r):\n    pi = 3.14\n    return (4/3*pi*r**3)\n\n# Write a function to find the area of a cylinder.\ndef area_cylinder(r, h):\n    pi = 3.14\n    return (2*pi*r*h) + (2*pi*r**2)\n\n# Write a function to find the volume of a cylinder.\ndef volume_cylinder(r, h):\n    pi = 3.14\n    return (pi*r**2*h)\n\n# Write a function to find the surface area of a cone.\ndef surfacearea_cone(r, h):\n    pi = 3.14\n    return (pi*r*(r**2 + h**2)**0.5)\n\n# Write a function to find the volume of a cone.\ndef volume_cone(r, h):\n    pi = 3.14\n    return (1/3*pi*r**2*h)\n\n# Write a function to find the surface area of a cuboid.\ndef surfacearea_cuboid(l, w, h):\n    return (2*l*w + 2*w*h + 2*h*l)\n\n# Write a function to find the volume of a cuboid.\n",
        "generated_testcode": "assert surfacearea_sphere(3) == 113.0476\n",
        "test": "assert surfacearea_sphere(10)==1256.6370614359173\nassert surfacearea_sphere(15)==2827.4333882308138\nassert surfacearea_sphere(20)==5026.548245743669",
        "canonical_solution": "import math\r\ndef surfacearea_sphere(r):\r\n  surfacearea=4*math.pi*r*r\r\n  return surfacearea"
    },
    {
        "number": 86,
        "prompt": "Write a function to find nth centered hexagonal number.\ndef centered_hexagonal_number(n):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    return (n * (2 * n - 1) * (n * 3) + 1) // 3\n\n# Test the function with some sample inputs\nfor i in range(1, 10):\n    print(centered_hexagonal_number(i))\n\n# Output: 1 6 15 28 45 66 91 120 153 190 231 276 323\n\n# Example of a centered hexagonal number: 1, 6, 15, 28, 45, 66, 91, 120, 153, 190, 231, 276, 323, 390, 459, 528, 603, 681, 766, 850, 941, 1035, 1136, 1245, 1360, 1501, 1650, 1716, 1800, 1906, 2019, 2140, 2279, 2426, 2591, 2760, 2939, 3126, 3329, 3540, 3769, 3916, 410",
        "generated_testcode": "assert centered_hexagonal_number(1) == 1\n",
        "test": "assert centered_hexagonal_number(10) == 271\nassert centered_hexagonal_number(2) == 7\nassert centered_hexagonal_number(9) == 217",
        "canonical_solution": "def centered_hexagonal_number(n):\r\n  return 3 * n * (n - 1) + 1"
    },
    {
        "number": 87,
        "prompt": "Write a function to merge three dictionaries into a single expression.\ndef merge_dictionaries_three(dict1,dict2, dict3):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    merged_dict = {}\n    for key in dict1.keys():\n        merged_dict[key] = dict1[key]\n    for key in dict2.keys():\n        merged_dict[key] = dict2[key]\n    for key in dict3.keys():\n        merged_dict[key] = dict3[key]\n    return merged_dict\n\ndict1 = {'a': 1, 'b': 2, 'c': 3}\ndict2 = {'d': 4, 'e': 5, 'f': 6}\ndict3 = {'g': 7, 'h': 8, 'i': 9}\n\nprint(merge_dictionaries_three(dict1,dict2, dict3))\n# Output: {'a': 1, 'c': 3, 'b': 2, 'g': 7, 'e': 5, 'h': 8, 'f': 6, 'd': 4, 'i': 9} ",
        "generated_testcode": "assert merge_dictionaries_three(dict1={'a':1,'b':2},dict2={'c':3,'d':4},dict3={'e':5,'f':6}) == {'a':1,'b':2,'c':3,'d':4,'e':5,'f':6}\n\n# Test the function with the following input\ndict1 = {'a':1,'b':2}\ndict2 = {'c':3,'d':4}\ndict3 = {'e':5,'f':6}\nprint(merge_dictionaries_three(dict1,dict2,dict3)) # should output {'a':1,'b':2,'c':3,'d':4,'e':5,'f':6} ",
        "test": "assert merge_dictionaries_three({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" }, { \"G\": \"Green\", \"W\": \"White\" },{ \"O\": \"Orange\", \"W\": \"White\", \"B\": \"Black\" })=={'B': 'Black', 'R': 'Red', 'P': 'Pink', 'G': 'Green', 'W': 'White', 'O': 'Orange'}\nassert merge_dictionaries_three({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" }, { \"G\": \"Green\", \"W\": \"White\" },{\"L\":\"lavender\",\"B\":\"Blue\"})=={'W': 'White', 'P': 'Pink', 'B': 'Black', 'R': 'Red', 'G': 'Green', 'L': 'lavender'}\nassert merge_dictionaries_three({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" },{\"L\":\"lavender\",\"B\":\"Blue\"},{ \"G\": \"Green\", \"W\": \"White\" })=={'B': 'Black', 'P': 'Pink', 'R': 'Red', 'G': 'Green', 'L': 'lavender', 'W': 'White'}",
        "canonical_solution": "import collections as ct\r\ndef merge_dictionaries_three(dict1,dict2, dict3):\r\n    merged_dict = dict(ct.ChainMap({},dict1,dict2,dict3))\r\n    return merged_dict"
    },
    {
        "number": 88,
        "prompt": "Write a function to get the frequency of the elements in a list.\ndef freq_count(list1):\n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    freq = {}\n    for i in list1:\n        if i in freq:\n            freq[i] += 1\n        else:\n            freq[i] = 1\n    return freq\n\n# Test the function with a sample list\nlist1 = [1, 2, 3, 4, 5, 6, 4, 2, 1, 3, 7, 8, 9, 8, 3]\nprint(freq_count(list1))\n# Output: {1: 2, 2: 2, 3: 3, 4: 2, 5: 1, 6: 1, 7: 1, 8: 2, 9: 1}\n\n# Alternatively, you can use the Counter method in the collections module\nfrom collections import Counter\ndef freq_count(list1):\n    return Counter(list1)\n\n# Test the function with a sample list\nlist1 = [1, 2, 3, 4, 5, 6, 4, 2, 1, 3, 7, 8, 9, 8, 3]\nprint(freq_count(list1))\n# Output: Counter({1: 2, 2: 2, 3: 3, 4: 2, 5: 1, 6: 1, 7: 1, 8: 2, 9: 1})\n",
        "generated_testcode": "assert freq_count([\"apple\", \"banana\", \"apple\", \"cherry\", \"banana\", \"apple\", \"cherry\", \"cherry\"]) == {\"apple\": 3, \"banana\": 2, \"cherry\": 3}\n",
        "test": "assert freq_count([10,10,10,10,20,20,20,20,40,40,50,50,30])==({10: 4, 20: 4, 40: 2, 50: 2, 30: 1}) \nassert freq_count([1,2,3,4,3,2,4,1,3,1,4])==({1:3, 2:2,3:3,4:3}) \nassert freq_count([5,6,7,4,9,10,4,5,6,7,9,5])==({10:1,5:3,6:2,7:2,4:2,9:2}) ",
        "canonical_solution": "import collections\r\ndef freq_count(list1):\r\n  freq_count= collections.Counter(list1)\r\n  return freq_count"
    },
    {
        "number": 89,
        "prompt": "Write a function to find the closest smaller number than n.\ndef closest_num(N):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    if N == 1:\n        return 0\n    closest_num = 1\n    for i in range(2, N):\n        if i * i > N:\n            break\n        if abs(i * i - N) < abs(closest_num * closest_num - N):\n            closest_num = i\n    return closest_num\n\n\n# Test the function with the example inputs\nprint(closest_num(16))  # Should print 4\nprint(closest_num(25))  # Should print 5\nprint(closest_num(30))  # Should print 5\nprint(closest_num(49))  # Should print 7\nprint(closest_num(50))  # Should print 8\n\n# Time Complexity: O(sqrt(n))\n# Space Complexity: O(1)\n\n\n# Another approach using binary search\ndef closest_num_binary_search(N):\n    low, high = 0, N\n    closest_num = 1\n    while low <= high:\n        mid = (low + high) // 2\n        if mid * mid == N:\n            return mid\n        if mid * mid > N:\n            high = mid - 1\n        else:\n            closest_num = mid\n            low = mid + 1\n    return closest_num\n\n# Test the function with the example inputs\nprint(closest_num_binary_search(16))  # Should print 4\nprint(closest_",
        "generated_testcode": "assert closest_num(10) == 9\n",
        "test": "assert closest_num(11) == 10\nassert closest_num(7) == 6\nassert closest_num(12) == 11",
        "canonical_solution": "def closest_num(N):\r\n  return (N - 1)"
    },
    {
        "number": 90,
        "prompt": "Write a python function to find the length of the longest word.\ndef len_log(list1):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    max_len = 0\n    for word in list1:\n        if len(word) > max_len:\n            max_len = len(word)\n    return max_len\n\n#Test the function\nword_list = ['hello', 'world', 'python', 'programming']\nprint(len_log(word_list)) # Output: 8\n\n# Explanation: The longest word in the list is 'programming' with length 10.\n\n\n\n# Write a python function to reverse a string\ndef reverse_string(s):\n    return s[::-1]\n\n# Test the function\nprint(reverse_string('hello world')) # Output: 'dlrow olleh'\n\n# Explanation: The function takes a string as input and returns the reverse of the string. \n\n\n\n# Write a python function to check if a string is a palindrome\ndef is_palindrome(s):\n    return s.lower() == s[::-1].lower()\n\n# Test the function\nprint(is_palindrome('racecar')) # Output: True\nprint(is_palindrome('hello')) # Output: False\n\n# Explanation: The function returns True for 'racecar' and False for 'hello'.\n\n\n\n# Write a python function to check if a number is prime\ndef is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, n):\n        if n % i == 0:\n            return False\n",
        "generated_testcode": "assert len_log(['hello', 'world', 'python', 'programming']) == 7\n",
        "test": "assert len_log([\"python\",\"PHP\",\"bigdata\"]) == 7\nassert len_log([\"a\",\"ab\",\"abc\"]) == 3\nassert len_log([\"small\",\"big\",\"tall\"]) == 5",
        "canonical_solution": "def len_log(list1):\r\n    max=len(list1[0])\r\n    for i in list1:\r\n        if len(i)>max:\r\n            max=len(i)\r\n    return max"
    },
    {
        "number": 91,
        "prompt": "Write a function to check if a substring is present in a given list of string values.\ndef find_substring(str1, sub_str):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    for i in range(len(str1)):\n        if sub_str in str1[i]:\n            return True\n    return False\n\n# example usage\nstr1 = ['hello', 'world', 'python', 'java', 'python', 'programming']\nsub_str = 'python'\nprint(find_substring(str1, sub_str)) # Output: True\n\nstr1 = ['hello', 'world', 'java', 'programming']\nsub_str = 'python'\nprint(find_substring(str1, sub_str)) # Output: False\n\n# example usage with multiple substrings\nstr1 = ['hello', 'world', 'java', 'python', 'programming']\nsub_strs = ['python', 'java']\nfor sub in sub_strs:\n    if find_substring(str1, sub):\n        print(f'{sub} is present in the list')\n    else:\n        print(f'{sub} is not present in the list') # Output: python is present in the list, java is present in the list\n\n# example usage with no matches\nstr1 = ['hello', 'world', 'java', 'programming']\nsub_strs = ['go', 'c++']\nfor sub in sub_strs:\n    if find_substring(str1, sub):\n        print(f'{sub} is present in the list')\n    else:\n        print(f'{sub} is not present in the list') # Output: go is not present in the list, c++ is not present in the",
        "generated_testcode": "assert find_substring(\"hello world\", \"world\") == True\n",
        "test": "assert find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"ack\")==True\nassert find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"abc\")==False\nassert find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"ange\")==True",
        "canonical_solution": "def find_substring(str1, sub_str):\r\n   if any(sub_str in s for s in str1):\r\n       return True\r\n   return False"
    },
    {
        "number": 92,
        "prompt": "Write a function to check whether the given number is undulating or not.\ndef is_undulating(n): \n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    while n > 0: \n        if n % 10 == 0: \n            return False\n        n //= 10\n        n -= 1\n    return True\n  \n# Driver code \nn = 1234543 \nif(is_undulating(n)): \n    print(\"Number is Undulating\") \nelse: \n    print(\"Number is not Undulating\") \n\n# Output: Number is not Undulating ",
        "generated_testcode": "assert is_undulating(123456) == True\n",
        "test": "assert is_undulating(\"1212121\") == True\nassert is_undulating(\"1991\") == False\nassert is_undulating(\"121\") == True",
        "canonical_solution": "def is_undulating(n): \r\n\tif (len(n) <= 2): \r\n\t\treturn False\r\n\tfor i in range(2, len(n)): \r\n\t\tif (n[i - 2] != n[i]): \r\n\t\t\treturn False\r\n\treturn True"
    },
    {
        "number": 93,
        "prompt": "Write a function to calculate the value of 'a' to the power 'b'.\ndef power(a,b):\n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    if b == 0:\n        return 1\n    elif b < 0:\n        return 1 / power(a, -b)\n    elif b % 2 == 0:\n        return power(a * a, b / 2)\n    else:\n        return a * power(a * a, (b - 1) / 2)\n\n# Test the function\nprint(power(2, 10))  # Output: 1024\nprint(power(3, 3))   # Output: 27\nprint(power(5, 0))   # Output: 1\nprint(power(2, -3))  # Output: 0.125\nprint(power(10, -2)) # Output: 0.01\nprint(power(0, 5))   # Output: 0\nprint(power(10, -5)) # Output: 0.000001 ",
        "generated_testcode": "assert power(2,3) == 8\n",
        "test": "assert power(3,4) == 81\nassert power(2,3) == 8\nassert power(5,5) == 3125",
        "canonical_solution": "def power(a,b):\r\n\tif b==0:\r\n\t\treturn 1\r\n\telif a==0:\r\n\t\treturn 0\r\n\telif b==1:\r\n\t\treturn a\r\n\telse:\r\n\t\treturn a*power(a,b-1)"
    },
    {
        "number": 94,
        "prompt": "Write a function to extract the index minimum value record from the given tuples.\ndef index_minimum(test_list):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": true,
        "answer": "    min_index = 0\n    min_value = test_list[0][0]\n    for i in range(len(test_list)):\n        if test_list[i][0] < min_value:\n            min_index = i\n            min_value = test_list[i][0]\n    return min_index\n\ntest_list = [(2, 3), (6, 4), (8, 0), (1, 9), (7, 5), (3, 1)]\nprint(index_minimum(test_list))  # Output: 2\n\n# Output: 2\n# Explanation: The minimum value is 1, and its index is 2. ",
        "generated_testcode": "assert index_minimum([(1, 2, 3), (4, 5, 6), (7, 8, 9)]) == 0\n",
        "test": "assert index_minimum([('Rash', 143), ('Manjeet', 200), ('Varsha', 100)]) == 'Varsha'\nassert index_minimum([('Yash', 185), ('Dawood', 125), ('Sanya', 175)]) == 'Dawood'\nassert index_minimum([('Sai', 345), ('Salman', 145), ('Ayesha', 96)]) == 'Ayesha'",
        "canonical_solution": "from operator import itemgetter \r\ndef index_minimum(test_list):\r\n  res = min(test_list, key = itemgetter(1))[0]\r\n  return (res) "
    },
    {
        "number": 95,
        "prompt": "Write a python function to find the minimum length of sublist.\ndef Find_Min_Length(lst):  \n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    n = len(lst)  \n    if n < 2:  \n        return 0  \n    min_length = n  \n    for i in range(n):  \n        curr_length = 1  \n        for j in range(i+1, n):  \n            if lst[j] >= lst[i]:  \n                curr_length += 1  \n            else:  \n                break  \n        min_length = min(min_length, curr_length)  \n    return min_length  \n  \n# main function  \nlst = [3, 5, 1, 8, 7, 2, 9, 6]  \nprint(Find_Min_Length(lst))  \n  \n# Output: 3 ",
        "generated_testcode": "assert Find_Min_Length([1,2,3,4,5,6,7,8,9]) == 1\n",
        "test": "assert Find_Min_Length([[1],[1,2]]) == 1\nassert Find_Min_Length([[1,2],[1,2,3],[1,2,3,4]]) == 2\nassert Find_Min_Length([[3,3,3],[4,4,4,4]]) == 3",
        "canonical_solution": "def Find_Min_Length(lst):  \r\n    minLength = min(len(x) for x in lst )\r\n    return minLength "
    },
    {
        "number": 96,
        "prompt": "Write a python function to find the number of divisors of a given integer.\ndef divisor(n):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count\n\n#Test the function\nprint(divisor(12))  # Output: 6\nprint(divisor(15))  # Output: 4\nprint(divisor(17))  # Output: 2\n\n#This function will return the number of divisors of the given integer. If the number is prime, it will return 2. ",
        "generated_testcode": "assert divisor(12) == 6\n",
        "test": "assert divisor(15) == 4 \nassert divisor(12) == 6\nassert divisor(9) == 3",
        "canonical_solution": "def divisor(n):\r\n  for i in range(n):\r\n    x = len([i for i in range(1,n+1) if not n % i])\r\n  return x"
    },
    {
        "number": 97,
        "prompt": "Write a function to find frequency count of list of lists.\ndef frequency_lists(list1):\n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    freq_dict = {}\n    for i in list1:\n        if i in freq_dict:\n            freq_dict[i] += 1\n        else:\n            freq_dict[i] = 1\n    return freq_dict\n\n# Test the function\nprint(frequency_lists([1, 2, 2, 3, 4, 3, 5, 3, 2, 4, 5]))  # Output: {1: 1, 2: 2, 3: 3, 4: 2, 5: 2}\nprint(frequency_lists([1, 2, 2, 3, 4, 3, 5, 3, 2, 4, 5, 1, 2, 3, 4, 5]))  # Output: {1: 2, 2: 3, 3: 4, 4: 3, 5: 3}\nprint(frequency_lists([1, 2, 2, 3, 4, 3, 5, 3, 2, 4, 5, 1, 2, 3, 4, 5, 6, 7, 8, 9, 7, 9, 8, 10]))  # Output: {1: 2, 2: 3, 3: 4, 4: 3, 5: 3, 6: 1, ",
        "generated_testcode": "assert frequency_lists([\"apple\", \"banana\", \"apple\", \"cherry\", \"banana\", \"cherry\", \"cherry\", \"apple\"]) == {\"apple\": 3, \"banana\": 2, \"cherry\": 3}\n",
        "test": "assert frequency_lists([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]])=={1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1}\nassert frequency_lists([[1,2,3,4],[5,6,7,8],[9,10,11,12]])=={1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1,10:1,11:1,12:1}\nassert frequency_lists([[20,30,40,17],[18,16,14,13],[10,20,30,40]])=={20:2,30:2,40:2,17: 1,18:1, 16: 1,14: 1,13: 1, 10: 1}",
        "canonical_solution": "def frequency_lists(list1):\r\n    list1 = [item for sublist in list1 for item in sublist]\r\n    dic_data = {}\r\n    for num in list1:\r\n        if num in dic_data.keys():\r\n            dic_data[num] += 1\r\n        else:\r\n            key = num\r\n            value = 1\r\n            dic_data[key] = value\r\n    return dic_data\r\n"
    },
    {
        "number": 98,
        "prompt": "Write a function to multiply all the numbers in a list and divide with the length of the list.\ndef multiply_num(numbers):  \n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    product = 1\n    for i in numbers:\n        product *= i\n    return product/len(numbers)\n\n# Test the function with the list [1,2,3,4,5,6]\nprint(multiply_num([1,2,3,4,5,6]) # should return 3\n# Test the function with the list [7,7,7,7,7,7]\nprint(multiply_num([7,7,7,7,7]) # should return 7\n# Test the function with the list [0, 100, 50]\nprint(multiply_num([0, 100, 50]) # should return 25\n# Test the function with the list [1]\nprint(multiply_num([1]) # should return 1\n# Test the function with the list [] (empty list)\nprint(multiply_num([])) # should return 0 ",
        "generated_testcode": "assert multiply_num([1, 2, 3, 4, 5]) == 10\n",
        "test": "assert multiply_num((8, 2, 3, -1, 7))==-67.2\nassert multiply_num((-10,-20,-30))==-2000.0\nassert multiply_num((19,15,18))==1710.0",
        "canonical_solution": "def multiply_num(numbers):  \r\n    total = 1\r\n    for x in numbers:\r\n        total *= x  \r\n    return total/len(numbers) "
    },
    {
        "number": 99,
        "prompt": "Write a function to convert the given decimal number to its binary equivalent.\ndef decimal_to_binary(n): \n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    binary = \"\" \n    while (n > 0): \n        remainder = n % 2\n        binary = str(remainder) + binary \n        n = n // 2\n    return binary \n  \n# Test the function \nprint(decimal_to_binary(10)) ",
        "generated_testcode": "assert decimal_to_binary(10) == \"1010\"\n",
        "test": "assert decimal_to_binary(8) == '1000'\nassert decimal_to_binary(18) == '10010'\nassert decimal_to_binary(7) == '111' ",
        "canonical_solution": "def decimal_to_binary(n): \r\n    return bin(n).replace(\"0b\",\"\") "
    },
    {
        "number": 100,
        "prompt": "Write a function to find the next smallest palindrome of a specified number.\ndef next_smallest_palindrome(num):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    if num <= 0:\n        return 1\n    str_num = str(num)\n    n = len(str_num)\n    is_odd = n % 2 != 0\n    mid = n // 2\n    left = str_num[:mid]\n    right = str_num[mid+1:] if is_odd else str_num[mid:]\n    right = right[::-1]\n\n    if left > right:\n        right = str(int(left) - 1)\n        left = right\n    else:\n        right = str(int(left) + 1)\n    left = left[::-1]\n\n    return int(left + right) if is_odd else int(left + right + '0')\n\n\n# Test cases\nprint(next_smallest_palindrome(123))  # Output: 12321\nprint(next_smallest_palindrome(1331))  # Output: 13431\nprint(next_smallest_palindrome(12345))  # Output: 12421\nprint(next_smallest_palindrome(999))  # Output: 1001\nprint(next_smallest_palindrome(1221))  # Output: 1331\nprint(next_smallest_palindrome(12321))  # Output: 133131\nprint(next_smallest_",
        "generated_testcode": "assert next_smallest_palindrome(123) == 12321\n",
        "test": "assert next_smallest_palindrome(99)==101\nassert next_smallest_palindrome(1221)==1331\nassert next_smallest_palindrome(120)==121",
        "canonical_solution": "import sys\r\ndef next_smallest_palindrome(num):\r\n    numstr = str(num)\r\n    for i in range(num+1,sys.maxsize):\r\n        if str(i) == str(i)[::-1]:\r\n            return i"
    },
    {
        "number": 101,
        "prompt": "Write a function to find the kth element in the given array.\ndef kth_element(arr, n, k):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    if k < 1 or k > n:\n        return \"Invalid k\"\n    return quick_select(arr, 0, n - 1, k)\n\ndef quick_select(arr, left, right, k):\n    if left == right:\n        return arr[left]\n\n    pivot_index = partition(arr, left, right)\n    if k == pivot_index:\n        return arr[k]\n    elif k < pivot_index:\n        return quick_select(arr, left, pivot_index - 1, k)\n    else:\n        return quick_select(arr, pivot_index + 1, right, k)\n\ndef partition(arr, left, right):\n    pivot_index = (left + right) // 2\n    pivot = arr[pivot_index]\n    arr[pivot_index], arr[right] = arr[right], arr[pivot_index]\n    i = left\n    for j in range(left, right):\n        if arr[j] < pivot:\n            arr[i], arr[j] = arr[j], arr[i]\n            i += 1\n    arr[i], arr[right] = arr[right], arr[i]\n    return i\n\n\n# Test the function with an example\narr = [7, 10, 4, 3, 20, 12, 11, 1, 9]\nprint(kth_element(arr, len(arr), 3))  # Output:",
        "generated_testcode": "assert kth_element([1, 2, 3, 4, 5, 6, 7, 8, 9], 3, 2) == 3\n",
        "test": "assert kth_element([12,3,5,7,19], 5, 2) == 3\nassert kth_element([17,24,8,23], 4, 3) == 8\nassert kth_element([16,21,25,36,4], 5, 4) == 36",
        "canonical_solution": "def kth_element(arr, n, k):\r\n  for i in range(n):\r\n    for j in range(0, n-i-1):\r\n      if arr[j] > arr[j+1]:\r\n        arr[j], arr[j+1] == arr[j+1], arr[j]\r\n  return arr[k-1]"
    },
    {
        "number": 102,
        "prompt": "Write a function to convert snake case string to camel case string.\ndef snake_to_camel(word):\n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    words = word.split(\"_\")\n    return words[0] + \"\".join(word.capitalize() for word in words[1:])\n\n# Test the function\nprint(snake_to_camel(\"hello_world\"))  # Output: \"helloWorld\"\nprint(snake_to_camel(\"hello_world_python\"))  # Output: \"helloWorldPython\"\nprint(snake_to_camel(\"the_quick_brown_fox_jumps_over_the_lazy_dog\"))  # Output: \"theQuickBrownFoxJumpsOverTheLazyDog\" ",
        "generated_testcode": "assert snake_to_camel(\"hello_world\") == \"helloWorld\"\n",
        "test": "assert snake_to_camel('python_program')=='PythonProgram'\nassert snake_to_camel('python_language')==('PythonLanguage')\nassert snake_to_camel('programming_language')==('ProgrammingLanguage')",
        "canonical_solution": "def snake_to_camel(word):\r\n        import re\r\n        return ''.join(x.capitalize() or '_' for x in word.split('_'))"
    },
    {
        "number": 103,
        "prompt": "Write a function to find eulerian number a(n, m).\ndef eulerian_num(n, m): \n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    if n > m: \n        return eulerian_num(m, n) \n    if n == 0 or m == 0: \n        return 1\n    if n == 1 and m == 1: \n        return 2\n    if n == 1 and m > 1: \n        return 2 * m - 1\n    if m == 1 and n > 1: \n        return 2 * n - 1\n    if n == m: \n        return 2 * eulerian_num(n-1, m-1) \n    if n == 1 or m == 1: \n        return 1\n    else: \n        return eulerian_num(n-1, m) + eulerian_num(n, m-1) \n\n# Test the function \nn = 3\nm = 3\nprint(eulerian_num(n, m)) \n\n# Output: 8\nn = 2\nm = 2\nprint(eulerian_num(n, m)) \n\n# Output: 3\nn = 3\nm = 4\nprint(eulerian_num(n, m)) \n\n# Output: 12 ",
        "generated_testcode": "assert eulerian_num(5, 3) == 1\n",
        "test": "assert eulerian_num(3, 1) == 4\nassert eulerian_num(4, 1) == 11\nassert eulerian_num(5, 3) == 26",
        "canonical_solution": "def eulerian_num(n, m): \r\n\tif (m >= n or n == 0): \r\n\t\treturn 0 \r\n\tif (m == 0): \r\n\t\treturn 1 \r\n\treturn ((n - m) * eulerian_num(n - 1, m - 1) +(m + 1) * eulerian_num(n - 1, m))"
    },
    {
        "number": 104,
        "prompt": "Write a function to sort each sublist of strings in a given list of lists using lambda function.\ndef sort_sublists(input_list):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": true,
        "answer": "    return list(map(lambda x: sorted(x), input_list))\n\n# Example usage:\ninput_list = [[\"apple\", \"banana\", \"cat\", \"dog\"], [\"zebra\", \"elephant\", \"lion\"], [\"car\", \"bike\", \"plane\", \"boat\"]]\nprint(sort_sublists(input_list)) # [['apple', 'banana', 'cat', 'dog'], ['elephant', 'lion', 'zebra'], ['bike', 'boat', 'car', 'plane']]\n\n# Explanation:\n# The function takes in a list of lists, and then applies the lambda function to each sublist using the map() function.\n# The lambda function sorts the sublist using the built-in sorted() function and returns a new sorted sublist. Finally, the map() function returns a new list of sorted sublists. ",
        "generated_testcode": "assert sort_sublists([\"apple\", \"banana\", \"cherry\", \"date\", \"fig\", \"grape\"]) == [\"apple\", \"banana\", \"cherry\", \"date\", \"fig\", \"grape\"]\n",
        "test": "assert sort_sublists(([\"green\", \"orange\"], [\"black\", \"white\"], [\"white\", \"black\", \"orange\"]))==[['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\nassert sort_sublists(([\" red \",\"green\" ],[\"blue \",\" black\"],[\" orange\",\"brown\"]))==[[' red ', 'green'], [' black', 'blue '], [' orange', 'brown']]\nassert sort_sublists(([\"zilver\",\"gold\"], [\"magnesium\",\"aluminium\"], [\"steel\", \"bronze\"]))==[['gold', 'zilver'],['aluminium', 'magnesium'], ['bronze', 'steel']]",
        "canonical_solution": "def sort_sublists(input_list):\r\n    result = [sorted(x, key = lambda x:x[0]) for x in input_list] \r\n    return result\r"
    },
    {
        "number": 105,
        "prompt": "Write a python function to count true booleans in the given list.\ndef count(lst):   \n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    count = 0\n    for element in lst:\n        if element == True:\n            count += 1\n    return count\n\n# Test the function with an example\nprint(count([True, False, True, True, False, False, True, False, False, True, False])  # should print 4\nprint(count([False, False, False, False, False, False, True, False, False, False])   # should print 1\nprint(count([])   # should print 0\nprint(count([True, True, True, True, True, True])   # should print 4\nprint(count([False, False, False, False])   # should print 0 ",
        "generated_testcode": "assert count([True, False, True, True, False, False, True]) == 3\n",
        "test": "assert count([True,False,True]) == 2\nassert count([False,False]) == 0\nassert count([True,True,True]) == 3",
        "canonical_solution": "def count(lst):   \r\n    return sum(lst) "
    },
    {
        "number": 106,
        "prompt": "Write a function to add the given list to the given tuples.\ndef add_lists(test_list, test_tup):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    result_list = []\n    for i in range(len(test_tup)):\n        result_list.append(test_list[i] + test_tup[i])\n    return tuple(result_list)\n\n# Test cases\nprint(add_lists([1, 2, 3], (4, 5, 6)) == (5, 7, 9)) # True\nprint(add_lists([10, 20, 30], (4, 5, 6)) == (14, 25, 36)) # True\nprint(add_lists([1, 2, 3], (4, 5, 6, 7)) == (5, 7, 9, 7)) # False\nprint(add_lists([1, 2], (4, 5, 6)) == (5, 7)) # False\n\n# Test the function with edge cases\nprint(add_lists([], ()) == () # True\nprint(add_lists([1], ()) == (1,) # True\nprint(add_lists([1], (2, 3, 4)) == (3, 3, 4) # False\nprint(add_lists([1, 2], (3, 4)) == (4, 6) # False\nprint(add_lists([1, 2], (3,)) == (4,) # True\n\n# Test the function with larger list and tuples\nprint(add_lists([1, 2",
        "generated_testcode": "assert add_lists([1, 2, 3], (4, 5, 6)) == (5, 7, 9)\n",
        "test": "assert add_lists([5, 6, 7], (9, 10)) == (9, 10, 5, 6, 7)\nassert add_lists([6, 7, 8], (10, 11)) == (10, 11, 6, 7, 8)\nassert add_lists([7, 8, 9], (11, 12)) == (11, 12, 7, 8, 9)",
        "canonical_solution": "def add_lists(test_list, test_tup):\r\n  res = tuple(list(test_tup) + test_list)\r\n  return (res) "
    },
    {
        "number": 107,
        "prompt": "Write a python function to count hexadecimal numbers for a given range.\ndef count_Hexadecimal(L,R) :  \n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    count = 0\n    for i in range(L,R+1) :\n        hexa = hex(i)\n        if hexa[2:].isdigit() :\n            count += 1\n    return count\n    \n#test the function\nprint(count_Hexadecimal(1,100)) ",
        "generated_testcode": "assert count_Hexadecimal(0, 10) == 10\n",
        "test": "assert count_Hexadecimal(10,15) == 6\nassert count_Hexadecimal(2,4) == 0\nassert count_Hexadecimal(15,16) == 1",
        "canonical_solution": "def count_Hexadecimal(L,R) :  \r\n    count = 0;  \r\n    for i in range(L,R + 1) : \r\n        if (i >= 10 and i <= 15) : \r\n            count += 1;  \r\n        elif (i > 15) : \r\n            k = i;  \r\n            while (k != 0) :  \r\n                if (k % 16 >= 10) : \r\n                    count += 1;  \r\n                k = k // 16;  \r\n    return count;  "
    },
    {
        "number": 108,
        "prompt": "Write a function to merge multiple sorted inputs into a single sorted iterator using heap queue algorithm.\ndef merge_sorted_list(num1,num2,num3):\n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    heap = []\n    i = j = k = 0\n    while i < len(num1) and j < len(num2) and k < len(num3):\n        if num1[i] < num2[j] and num1[i] < num3[k]:\n            heap.append(num1[i])\n            i += 1\n        elif num2[j] < num1[i] and num2[j] < num3[k]:\n            heap.append(num2[j])\n            j += 1\n        else:\n            heap.append(num3[k])\n            k += 1\n    while i < len(num1):\n        heap.append(num1[i])\n        i += 1\n    while j < len(num2):\n        heap.append(num2[j])\n        j += 1\n    while k < len(num3):\n        heap.append(num3[k])\n        k += 1\n    return heap\n\n#Test the function\nnum1 = [1, 2, 3, 4, 5, 6]\nnum2 = [2, 3, 4, 5, 6, 7]\nnum3 = [3, 4, 5, 6, 7, 8]\nprint(merge_sorted_list(num1, num2, num3))  # Output: [1, 2, 2, 3, 3, 3, 4, 4,",
        "generated_testcode": "assert list(merge_sorted_list([1,3,5],[2,4,6],[0,7,8])) == [0,1,2,3,4,5,6,7,8]\n",
        "test": "assert merge_sorted_list([25, 24, 15, 4, 5, 29, 110],[19, 20, 11, 56, 25, 233, 154],[24, 26, 54, 48])==[4, 5, 11, 15, 19, 20, 24, 24, 25, 25, 26, 29, 48, 54, 56, 110, 154, 233]\nassert merge_sorted_list([1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12])==[1, 1, 2, 3, 4, 5, 5, 6, 7, 7, 8, 8, 9, 11, 12]\nassert merge_sorted_list([18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1],[25, 35, 22, 85, 14, 65, 75, 25, 58],[12, 74, 9, 50, 61, 41])==[1, 2, 3, 4, 7, 8, 9, 9, 9, 10, 12, 14, 14, 18, 22, 25, 25, 35, 41, 50, 58, 61, 65, 74, 75, 85]",
        "canonical_solution": "import heapq\r\ndef merge_sorted_list(num1,num2,num3):\r\n  num1=sorted(num1)\r\n  num2=sorted(num2)\r\n  num3=sorted(num3)\r\n  result = heapq.merge(num1,num2,num3)\r\n  return list(result)"
    },
    {
        "number": 109,
        "prompt": "Write a python function to find the count of rotations of a binary string with odd value.\ndef odd_Equivalent(s,n): \n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    count = 0\n    for i in range(n): \n        if s[i] == '1': \n            count += 1\n    return count\ndef count_rotations(s): \n    n = len(s) \n    rotations = [] \n    for i in range(n): \n        s = s + s[0] \n        s = s[1:] \n        rotations.append(s) \n    count = 0\n    for i in range(n): \n        if odd_Equivalent(rotations[i], n) % 2 != 0: \n            count += 1\n    return count \n\n# Driver code \nif __name__ == \"__main__\": \n    s = \"01101\"\n    print(count_rotations(s)) \n    \n# Output: 2 ",
        "generated_testcode": "assert odd_Equivalent(s,n) == 2\n\n# Test the function with the following inputs\ns = \"10101\"\nn = 4\nprint(odd_Equivalent(s,n)) # Output: 2\n\n",
        "test": "assert odd_Equivalent(\"011001\",6) == 3\nassert odd_Equivalent(\"11011\",5) == 4\nassert odd_Equivalent(\"1010\",4) == 2",
        "canonical_solution": "def odd_Equivalent(s,n): \r\n    count=0\r\n    for i in range(0,n): \r\n        if (s[i] == '1'): \r\n            count = count + 1\r\n    return count "
    },
    {
        "number": 110,
        "prompt": "Write a function to extract the ranges that are missing from the given list with the given start range and end range values.\ndef extract_missing(test_list, strt_val, stop_val):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": true,
        "answer": "    missing_list = []\n    for i in range(strt_val, stop_val+1):\n        if i not in test_list:\n            missing_list.append(i)\n    return missing_list\n\ntest_list = [1, 3, 4, 7, 10]\nstrt_val = 1\nstop_val = 12\n\nprint(extract_missing(test_list, strt_val, stop_val)) ",
        "generated_testcode": "assert extract_missing([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 1, 10) == []\n",
        "test": "assert extract_missing([(6, 9), (15, 34), (48, 70)], 2, 100) == [(2, 6), (9, 100), (9, 15), (34, 100), (34, 48), (70, 100)]\nassert extract_missing([(7, 2), (15, 19), (38, 50)], 5, 60) == [(5, 7), (2, 60), (2, 15), (19, 60), (19, 38), (50, 60)]\nassert extract_missing([(7, 2), (15, 19), (38, 50)], 1, 52) == [(1, 7), (2, 52), (2, 15), (19, 52), (19, 38), (50, 52)]",
        "canonical_solution": "def extract_missing(test_list, strt_val, stop_val):\r\n  res = []\r\n  for sub in test_list:\r\n    if sub[0] > strt_val:\r\n      res.append((strt_val, sub[0]))\r\n      strt_val = sub[1]\r\n    if strt_val < stop_val:\r\n      res.append((strt_val, stop_val))\r\n  return (res) "
    },
    {
        "number": 111,
        "prompt": "Write a function to find common elements in given nested lists. * list item * list item * list item * list item\ndef common_in_nested_lists(nestedlist):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    common_elements = []\n    first_list = nestedlist[0]\n    for i in range(1, len(nestedlist)):\n        common_elements = list(set(common_elements) & set(nestedlist[i]))\n    return common_elements\n\n# Example usage:\nnested_list = [[1, 2, 3, 4], [2, 3, 4, 5], [3, 4, 5, 6], [4, 5, 6, 7]]\nprint(common_in_nested_lists(nested_list))  # Output: [4]\n\nnested_list = [[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]]\nprint(common_in_nested_lists(nested_list))  # Output: []\n\nnested_list = [[1, 2, 3, 4], [2, 3, 4, 5], [3, 4, 5, 6], [4, 5, 6, 7], [1, 2, 3, 4, 5]]\nprint(common_in_nested_lists(nested_list))  # Output: [4] ",
        "generated_testcode": "assert common_in_nested_lists([[1, 2, 3], [2, 3, 4], [3, 4, 5]]) == [3]\n",
        "test": "assert common_in_nested_lists([[12, 18, 23, 25, 45], [7, 12, 18, 24, 28], [1, 5, 8, 12, 15, 16, 18]])==[18, 12]\nassert common_in_nested_lists([[12, 5, 23, 25, 45], [7, 11, 5, 23, 28], [1, 5, 8, 18, 23, 16]])==[5,23]\nassert common_in_nested_lists([[2, 3,4, 1], [4, 5], [6,4, 8],[4, 5], [6, 8,4]])==[4]",
        "canonical_solution": "def common_in_nested_lists(nestedlist):\r\n    result = list(set.intersection(*map(set, nestedlist)))\r\n    return result"
    },
    {
        "number": 112,
        "prompt": "Write a python function to find the perimeter of a cylinder.\ndef perimeter(diameter,height) : \n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    return 2*3.14*diameter + 2*3.14*diameter*height\n\nprint(perimeter(10,10)) # 62.83185307179586416\n\n# Function to find the volume of a cylinder\ndef volume(diameter, height) : \n    return 3.14*(diameter/2)**2*height\n\nprint(volume(10,10)) # 314.1592653589793106\n\n# Function to find the surface area of a cylinder\ndef surface_area(diameter, height) : \n    return 2*3.14*diameter*diameter + 2*3.14*diameter*height\n\nprint(surface_area(10,10)) # 314.1592653589793106\n\n# Function to find the area of a circle\ndef area(diameter) : \n    return 3.14*(diameter/2)**2\n\nprint(area(10)) # 78.5398163397448338\n\n# Function to find the volume of a sphere\ndef sphere_volume(radius) : \n    return (4/3)*3.14*(radius**3)\n\nprint(sphere_volume(",
        "generated_testcode": "assert perimeter(10,20) == 188.80\n",
        "test": "assert perimeter(2,4) == 12\nassert perimeter(1,2) == 6\nassert perimeter(3,1) == 8",
        "canonical_solution": "def perimeter(diameter,height) : \r\n    return 2*(diameter+height)  "
    },
    {
        "number": 113,
        "prompt": "Write a function to check if a string represents an integer or not.\ndef check_integer(text):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": true,
        "answer": "    # remove leading and trailing white spaces\n    text = text.strip()\n    # check if the first character is a minus sign or a digit\n    if len(text) == 0 or (len(text) == 1 and not text[0].isdigit() and text[0] != '-'):\n        return False\n    # check if all characters are digits or minus sign\n    for char in text:\n        if not char.isdigit() and char != '-':\n            return False\n    # check if the number is out of the range of an integer\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n\n# test cases\nprint(check_integer(\"123\"))  # True\nprint(check_integer(\" 123\"))  # True\nprint(check_integer(\"-123\"))  # True\nprint(check_integer(\"123 \"))  # True\nprint(check_integer(\"123.4\"))  # False\nprint(check_integer(\"12 3\"))  # False\nprint(check_integer(\"abc\"))  # False\nprint(check_integer(\"123a\"))  # False\nprint(check_integer(\"123412341234123412341234123412341234123412341234123412341234123412341234\")) ",
        "generated_testcode": "assert check_integer(\"123\") == True\n",
        "test": "assert check_integer(\"python\")==False\nassert check_integer(\"1\")==True\nassert check_integer(\"12345\")==True",
        "canonical_solution": "def check_integer(text):\r\n text = text.strip()\r\n if len(text) < 1:\r\n    return None\r\n else:\r\n     if all(text[i] in \"0123456789\" for i in range(len(text))):\r\n          return True\r\n     elif (text[0] in \"+-\") and \\\r\n         all(text[i] in \"0123456789\" for i in range(1,len(text))):\r\n         return True\r\n     else:\r\n        return False"
    },
    {
        "number": 114,
        "prompt": "Write a function to assign frequency to each tuple in the given tuple list.\ndef assign_freq(test_list):\n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    freq_dict = {}\n    for i in test_list:\n        if i in freq_dict:\n            freq_dict[i] += 1\n        else:\n            freq_dict[i] = 1\n    return freq_dict\n\ntest_list = [(1, 2, 3), (2, 3, 4), (1, 2, 3), (4, 5, 6), (1, 2, 3), (7, 8, 9), (4, 5, 6)]\nprint(assign_freq(test_list))\n\n# Output: {(1, 2, 3): 3, (2, 3, 4): 1, (4, 5, 6): 2, (7, 8, 9): 1}\n",
        "generated_testcode": "assert assign_freq([\"apple\", \"banana\", \"apple\", \"orange\", \"banana\", \"apple\", \"kiwi\"]) == {\"apple\": 3, \"banana\": 2, \"orange\": 1, \"kiwi\": 1}\n",
        "test": "assert assign_freq([(6, 5, 8), (2, 7), (6, 5, 8), (6, 5, 8), (9, ), (2, 7)] ) == '[(6, 5, 8, 3), (2, 7, 2), (9, 1)]'\nassert assign_freq([(4, 2, 4), (7, 1), (4, 8), (4, 2, 4), (9, 2), (7, 1)] ) == '[(4, 2, 4, 2), (7, 1, 2), (4, 8, 1), (9, 2, 1)]'\nassert assign_freq([(11, 13, 10), (17, 21), (4, 2, 3), (17, 21), (9, 2), (4, 2, 3)] ) == '[(11, 13, 10, 1), (17, 21, 2), (4, 2, 3, 2), (9, 2, 1)]'",
        "canonical_solution": "from collections import Counter \r\ndef assign_freq(test_list):\r\n  res = [(*key, val) for key, val in Counter(test_list).items()]\r\n  return (str(res)) "
    },
    {
        "number": 115,
        "prompt": "Write a function to check whether all dictionaries in a list are empty or not.\ndef empty_dit(list1):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    for i in range(len(list1)):\n        if len(list1[i]) == 0:\n            return False\n    return True\n\nlist1 = [{},{'a': 1}, {}]\nprint(empty_dit(list1)) # False\n\nlist2 = [{'a': 1}, {'b': 2}, {'c': 3}]\nprint(empty_dit(list2)) # False\n\nlist3 = [{}, {}, {}]\nprint(empty_dit(list3)) # True ",
        "generated_testcode": "assert empty_dit([{}, {}, {}]) == True\n",
        "test": "assert empty_dit([{},{},{}])==True\nassert empty_dit([{1,2},{},{}])==False\nassert empty_dit({})==True",
        "canonical_solution": "def empty_dit(list1):\r\n empty_dit=all(not d for d in list1)\r\n return empty_dit"
    },
    {
        "number": 116,
        "prompt": "Write a function to convert a given tuple of positive integers into an integer.\ndef tuple_to_int(nums):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    result = 0\n    for i in range(len(nums)):\n        result += nums[i] * (10**(len(nums)-1-i)\n    return result\n\n# Example usage:\nprint(tuple_to_int((1, 2, 3)) # Output: 123\nprint(tuple_to_int((0, 0, 1)) # Output: 100\nprint(tuple_to_int((5,) )    # Output: 5\nprint(tuple_to_int((9, 9, 9) # Output: 999\nprint(tuple_to_int((0,)    # Output: 0\n\n# Test the function with various inputs\nfor nums in [(1, 2, 3), (0, 0, 1), (5,), (9, 9, 9), (0,)]:\n    print(tuple_to_int(nums))\n\n# Test the function with some edge cases\nfor nums in [(), (1, 2, 3, 0), (1, 2, 3, 4), (1, 2, 3, 4, 5), (1, -1), (1, -2), (1, 2, -3), (1, -2, 3)]:\n    print(tuple_to_int(nums)) # Output: None\n\n# If the input is an empty tuple or contains non-positive integers, return None\n# If",
        "generated_testcode": "assert tuple_to_int((1, 2, 3, 4, 5) == 12345)\n",
        "test": "assert tuple_to_int((1,2,3))==123\nassert tuple_to_int((4,5,6))==456\nassert tuple_to_int((5,6,7))==567",
        "canonical_solution": "def tuple_to_int(nums):\r\n    result = int(''.join(map(str,nums)))\r\n    return result"
    },
    {
        "number": 117,
        "prompt": "Write a function to convert all possible convertible elements in the list to float.\ndef list_to_float(test_list):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    for i in range(len(test_list)):\n        if isinstance(test_list[i], str):\n            try:\n                test_list[i] = float(test_list[i])\n            except ValueError:\n                pass\n    return test_list\n\n\n# Test the function with some sample inputs\nprint(list_to_float(['1', '2.0', '3.5', 'four', '6'])) # [1.0, 2.0, 3.5, 'four', 6.0]\nprint(list_to_float(['1', 'two', '3', '4.5'])) # [1.0, 'two', 3.0, 4.5]\nprint(list_to_float(['one', 'two', 'three'])) # ['one', 'two', 'three']\nprint(list_to_float([1, 2, 3, 4, 5, 6])) # [1, 2, 3, 4, 5, 6]\nprint(list_to_float([])) # []\n\n# Another approach using list comprehension\ndef list_to_float2(test_list):\n    return [float(i) if isinstance(i, str) and i.replace('.', '', 1).isdigit() else i for i in test_list]\n\nprint(list_to_float2(['1', '2.0', '3.5', 'four', '6'])) # [1.0, 2.0,",
        "generated_testcode": "assert list_to_float([\"1\", \"2\", \"3.5\", \"4.2\", \"5.6\", \"6\"]) == [1.0, 2.0, 3.5, 4.2, 5.6, 6.0]\n",
        "test": "assert list_to_float( [(\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")] ) == '[(3.0, 4.0), (1.0, 26.45), (7.32, 8.0), (4.0, 8.0)]'\nassert list_to_float( [(\"4\", \"4\"), (\"2\", \"27\"), (\"4.12\", \"9\"), (\"7\", \"11\")] ) == '[(4.0, 4.0), (2.0, 27.0), (4.12, 9.0), (7.0, 11.0)]'\nassert list_to_float( [(\"6\", \"78\"), (\"5\", \"26.45\"), (\"1.33\", \"4\"), (\"82\", \"13\")] ) == '[(6.0, 78.0), (5.0, 26.45), (1.33, 4.0), (82.0, 13.0)]'",
        "canonical_solution": "def list_to_float(test_list):\r\n  res = []\r\n  for tup in test_list:\r\n    temp = []\r\n    for ele in tup:\r\n      if ele.isalpha():\r\n        temp.append(ele)\r\n      else:\r\n        temp.append(float(ele))\r\n    res.append((temp[0],temp[1])) \r\n  return (str(res)) "
    },
    {
        "number": 118,
        "prompt": "[link text](https:// [link text](https:// [link text](https://)))write a function to convert a string to a list.\ndef string_to_list(string): \n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    return list(string)\n\n#example: string_to_list(\"hello\") returns [\"h\", \"e\", \"l\", \"l\", \"o\"] ",
        "generated_testcode": "assert string_to_list(\"hello, world\") == [\"hello\", \"world\"]\n",
        "test": "assert string_to_list(\"python programming\")==['python','programming']\nassert string_to_list(\"lists tuples strings\")==['lists','tuples','strings']\nassert string_to_list(\"write a program\")==['write','a','program']",
        "canonical_solution": "def string_to_list(string): \r\n    lst = list(string.split(\" \")) \r\n    return lst"
    },
    {
        "number": 119,
        "prompt": "Write a python function to find the element that appears only once in a sorted array.\ndef search(arr,n) :\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    for i in range(0,n) :\n        if i == 0 or arr[i] != arr[i-1] :\n            count = 1\n            j = i+1\n            while j<n and arr[j] == arr[i] :\n                count += 1\n                j += 1\n            if count%2 != 0 :\n                return arr[i]\n    return None\n\n#Test the function\narr = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7]\nn = len(arr)\nprint(search(arr,n)) # Output : 2\n\n# Time Complexity : O(n)\n# Space Complexity : O(1)\n",
        "generated_testcode": "assert search([1,2,3,3,4,4,5,5], 5) == 1\n",
        "test": "assert search([1,1,2,2,3],5) == 3\nassert search([1,1,3,3,4,4,5,5,7,7,8],11) == 8\nassert search([1,2,2,3,3,4,4],7) == 1",
        "canonical_solution": "def search(arr,n) :\r\n    XOR = 0\r\n    for i in range(n) :\r\n        XOR = XOR ^ arr[i]\r\n    return (XOR)"
    },
    {
        "number": 120,
        "prompt": "Write a function to find the maximum product from the pairs of tuples within a given list.\ndef max_product_tuple(list1):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    max_product = float('-inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = list1[i][0]*list1[j][0]*list1[i][1]*list1[j][1]\n            if product > max_product:\n                max_product = product\n    return max_product\n\n\n# Example usage:\nlist1 = [(2, 3), (4, 5), (7, 8), (1, 9)]\nprint(max_product_tuple(list1))  # Output: 360\n\n# Test case 2:\nlist2 = [(1, 2), (3, 4), (5, 6), (7, 8)]\nprint(max_product_tuple(list2))  # Output: 48\n\n# Test case 3:\nlist3 = [(1, 2), (3, 4), (5, 6), (7, 8), (9, 10)]\nprint(max_product_tuple(list3))  # Output: 360\n",
        "generated_testcode": "assert max_product_tuple([(1, 2), (3, 4), (5, 6), (7, 8)]) == 48\n",
        "test": "assert max_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==36\nassert max_product_tuple([(10,20), (15,2), (5,10)] )==200\nassert max_product_tuple([(11,44), (10,15), (20,5), (12, 9)] )==484",
        "canonical_solution": "def max_product_tuple(list1):\r\n    result_max = max([abs(x * y) for x, y in list1] )\r\n    return result_max"
    },
    {
        "number": 121,
        "prompt": "Write a function to find the triplet with sum of the given array\ndef check_triplet(A, n, sum, count):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    A.sort()\n    for i in range(n - 2):\n        left = i + 1\n        right = n - 1\n        while left < right:\n            if A[i] + A[left] + A[right] == sum:\n                count += 1\n                left += 1\n                right -= 1\n            elif A[i] + A[left] + A[right] < sum:\n                left += 1\n            else:\n                right -= 1\n    return count\n\n\nA = [1, 4, 45, 1, 6, 10, 8]\nn = len(A)\nsum = 22\ncount = 0\nprint(\"Count of triplets is \", check_triplet(A, n, sum, count))\n\n# Output: Count of triplets is 2\n# Time Complexity: O(n^2)\n# Space Complexity: O(1)\n\n# Note: The above solution has a time complexity of O(n^2) and space complexity of O(1) as it sorts the array and then traverses it. ",
        "generated_testcode": "assert check_triplet([1, 2, 3, 4, 5, 6, 7, 8, 9], 15, 0) == 1\n",
        "test": "assert check_triplet([2, 7, 4, 0, 9, 5, 1, 3], 8, 6, 0) == True\nassert check_triplet([1, 4, 5, 6, 7, 8, 5, 9], 8, 6, 0) == False\nassert check_triplet([10, 4, 2, 3, 5], 5, 15, 0) == True",
        "canonical_solution": "def check_triplet(A, n, sum, count):\r\n    if count == 3 and sum == 0:\r\n        return True\r\n    if count == 3 or n == 0 or sum < 0:\r\n        return False\r\n    return check_triplet(A, n - 1, sum - A[n - 1], count + 1) or\\\r\n           check_triplet(A, n - 1, sum, count)"
    },
    {
        "number": 122,
        "prompt": "Write a function to find n\u2019th smart number.\ndef smartNumber(n): \n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    def isPrime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    \n    def isArmstrong(n):\n        sum = 0\n        temp = n\n        while n > 0:\n            digit = n % 10\n            sum += digit ** 3\n            n = n // 10\n        return temp == sum\n    \n    def isPalindrome(n):\n        return str(n) == str(n)[::-1]\n    \n    def isPerfect(n):\n        sum = 0\n        for i in range(1, n):\n            if n % i == 0:\n                sum += i\n        return n == sum\n    \n    count = 0\n    num = 0\n    while count < n:\n        if isPrime(num) and isArmstrong(num) and isPalindrome(num) and isPerfect(num):\n            count += 1\n        num += 1\n    return num - 1\n\n# Test the function\nprint(smartNumber(10)) # Output: 29\nprint(smartNumber(20)) # Output: 43\nprint(smartNumber(30)) # Output: 54\nprint(smartNumber(40)) # Output: 75\nprint(smartNumber(50))",
        "generated_testcode": "assert smartNumber(1) == 1\n",
        "test": "assert smartNumber(1) == 30\nassert smartNumber(50) == 273\nassert smartNumber(1000) == 2664",
        "canonical_solution": "MAX = 3000 \r\ndef smartNumber(n): \r\n\tprimes = [0] * MAX \r\n\tresult = [] \r\n\tfor i in range(2, MAX): \r\n\t\tif (primes[i] == 0): \r\n\t\t\tprimes[i] = 1 \r\n\t\t\tj = i * 2 \r\n\t\t\twhile (j < MAX): \r\n\t\t\t\tprimes[j] -= 1 \r\n\t\t\t\tif ( (primes[j] + 3) == 0): \r\n\t\t\t\t\tresult.append(j) \r\n\t\t\t\tj = j + i \r\n\tresult.sort() \r\n\treturn result[n - 1] "
    },
    {
        "number": 123,
        "prompt": "Write a function to sum all amicable numbers from 1 to a specified number.\ndef amicable_numbers_sum(limit):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    \"\"\"\n    Returns the sum of all amicable numbers up to the given limit.\n    \"\"\"\n    # Initialize the sum of amicable numbers\n    amicable_sum = 0\n    \n    # Loop through each number from 1 to the given limit\n    for num in range(1, limit + 1):\n        # Calculate the proper divisor sum\n        divisor_sum = sum_divisors(num)\n        \n        # Calculate the sum of the divisors of the divisor sum\n        divisor_sum_divisor_sum = sum_divisors(divisor_sum)\n        \n        # If the sum of divisors of the number and the sum of the divisors of its sum are equal to each other and the number is not the same as its sum of divisors, add to the sum of amicable numbers\n        if divisor_sum_divisor_sum == num and divisor_sum != num:\n            amicable_sum += num\n    \n    return amicable_sum\n\ndef sum_divisors(num):\n    \"\"\"\n    Returns the sum of all divisors of a given number.\n    \"\"\"\n    # Initialize the sum of divisors\n    divisor_sum = 0\n    \n    # Loop through each number from 1 to the given number\n    for i in range(1, num):\n        # If the number is a divisor, add it to the sum of divisors\n        if num % i == 0:\n            divisor_sum += i\n    ",
        "generated_testcode": "assert amicable_numbers_sum(100000) == 220645",
        "test": "assert amicable_numbers_sum(999)==504\nassert amicable_numbers_sum(9999)==31626\nassert amicable_numbers_sum(99)==0",
        "canonical_solution": "def amicable_numbers_sum(limit):\r\n    if not isinstance(limit, int):\r\n        return \"Input is not an integer!\"\r\n    if limit < 1:\r\n        return \"Input must be bigger than 0!\"\r\n    amicables = set()\r\n    for num in range(2, limit+1):\r\n        if num in amicables:\r\n            continue\r\n        sum_fact = sum([fact for fact in range(1, num) if num % fact == 0])\r\n        sum_fact2 = sum([fact for fact in range(1, sum_fact) if sum_fact % fact == 0])\r\n        if num == sum_fact2 and num != sum_fact:\r\n            amicables.add(num)\r\n            amicables.add(sum_fact2)\r\n    return sum(amicables)"
    },
    {
        "number": 124,
        "prompt": "Write a function to get the angle of a complex number.\ndef angle_complex(a,b):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    angle = math.atan2(b,a)\n    return angle\n\n# Example usage:\nprint(angle_complex(3,4)) # 0.927295218001683725\nprint(angle_complex(-3,4)) # 2.356194490189362016\nprint(angle_complex(3,-4)) # -0.927295218001683725\nprint(angle_complex(-3,-4)) # -2.356194490189362016\n",
        "generated_testcode": "assert angle_complex(3,4) == 0.9272952180016\n",
        "test": "assert angle_complex(0,1j)==1.5707963267948966 \nassert angle_complex(2,1j)==0.4636476090008061\nassert angle_complex(0,2j)==1.5707963267948966",
        "canonical_solution": "import cmath\r\ndef angle_complex(a,b):\r\n  cn=complex(a,b)\r\n  angle=cmath.phase(a+b)\r\n  return angle"
    },
    {
        "number": 125,
        "prompt": "Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\ndef find_length(string, n): \n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    max_diff = 0\n    ones = 0\n    zeros = 0\n    for i in range(n): \n        if string[i] == '0': \n            zeros += 1\n        else: \n            ones += 1\n        if i > 0 and string[i - 1] == '1': \n            zeros -= 1\n        max_diff = max(max_diff, ones - zeros) \n    zeros = 0\n    ones = 0\n    for i in range(n - 1, -1, -1): \n        if string[i] == '0': \n            zeros += 1\n        else: \n            ones += 1\n        if i < n - 1 and string[i + 1] == '1': \n            zeros -= 1\n        max_diff = max(max_diff, ones - zeros) \n    return max_diff \n  \ndef max_binary_gap(binary_str): \n    n = len(binary_str) \n    return find_length(binary_str, n) \n  \n# Test the function with the example given \nbinary_str = '100101011'\nprint(max_binary_gap(binary_str)) \n\n# Output: 2\n# Explanation: The binary gap in the given string is '10101' which has 2 zeros and 3 ones. ",
        "generated_testcode": "assert find_length(100010101010, 9) == 3\n",
        "test": "assert find_length(\"11000010001\", 11) == 6\nassert find_length(\"10111\", 5) == 1\nassert find_length(\"11011101100101\", 14) == 2 ",
        "canonical_solution": "def find_length(string, n): \r\n\tcurrent_sum = 0\r\n\tmax_sum = 0\r\n\tfor i in range(n): \r\n\t\tcurrent_sum += (1 if string[i] == '0' else -1) \r\n\t\tif current_sum < 0: \r\n\t\t\tcurrent_sum = 0\r\n\t\tmax_sum = max(current_sum, max_sum) \r\n\treturn max_sum if max_sum else 0"
    },
    {
        "number": 126,
        "prompt": "Write a python function to find the sum of common divisors of two given numbers.\ndef sum(a,b): \n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    if a == b:\n        return a\n    else:\n        for i in range(min(a,b), 1, -1):\n            if a%i == 0 and b%i == 0:\n                return i + sum(a//i, b//i)\n    return 0\n\nprint(sum(12,18)) ",
        "generated_testcode": "assert sum(12, 18) == 6\n",
        "test": "assert sum(10,15) == 6\nassert sum(100,150) == 93\nassert sum(4,6) == 3",
        "canonical_solution": "def sum(a,b): \r\n    sum = 0\r\n    for i in range (1,min(a,b)): \r\n        if (a % i == 0 and b % i == 0): \r\n            sum += i \r\n    return sum"
    },
    {
        "number": 127,
        "prompt": "Write a function to multiply two integers without using the * operator in python.\ndef multiply_int(x, y):\n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    if x == 0 or y == 0:\n        return 0\n    elif x > 0 and y > 0:\n        result = 0\n        for i in range(y):\n            result += x\n        return result\n    elif x < 0 and y > 0:\n        result = 0\n        for i in range(y):\n            result -= x\n        return result\n    elif x > 0 and y < 0:\n        result = 0\n        for i in range(abs(y)):\n            result -= x\n        return result\n    elif x < 0 and y < 0:\n        result = 0\n        for i in range(abs(y)):\n            result += x\n        return result\n\n# Test cases\nprint(multiply_int(5, 6))  # Output: 30\nprint(multiply_int(-5, 6))  # Output: -30\nprint(multiply_int(5, -6))  # Output: -30\nprint(multiply_int(-5, -6))  # Output: 30\nprint(multiply_int(0, 6))  # Output: 0\nprint(multiply_int(5, 0))  # Output: 0\nprint(multiply_int(1, 1))  # Output: 1\nprint(multiply_int(-5, -5))  # Output: 25\nprint(multiply_int(100, 10))  # Output",
        "generated_testcode": "assert multiply_int(5, 6) == 30\n",
        "test": "assert multiply_int(10,20)==200\nassert multiply_int(5,10)==50\nassert multiply_int(4,8)==32",
        "canonical_solution": "def multiply_int(x, y):\r\n    if y < 0:\r\n        return -multiply_int(x, -y)\r\n    elif y == 0:\r\n        return 0\r\n    elif y == 1:\r\n        return x\r\n    else:\r\n        return x + multiply_int(x, y - 1)"
    },
    {
        "number": 128,
        "prompt": "Write a function to shortlist words that are longer than n from a given list of words.\ndef long_words(n, str):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    #your code here\n    long_list = []\n    for word in str:\n        if len(word) > n:\n            long_list.append(word)\n    return long_list\n\n# Example usage:\nwords = [\"apple\", \"banana\", \"cherry\", \"date\", \"elderberry\", \"fig\", \"grape\"]\nprint(long_words(5, words)) # Output: [\"elderberry\", \"grape\"] ",
        "generated_testcode": "assert long_words(4, [\"apple\", \"banana\", \"cherry\", \"date\", \"elderberry\", \"fig\", \"grape\", \"kiwi\"]) == [\"elderberry\", \"grape\"]\n",
        "test": "assert long_words(3,\"python is a programming language\")==['python','programming','language']\nassert long_words(2,\"writing a program\")==['writing','program']\nassert long_words(5,\"sorting list\")==['sorting']",
        "canonical_solution": "def long_words(n, str):\r\n    word_len = []\r\n    txt = str.split(\" \")\r\n    for x in txt:\r\n        if len(x) > n:\r\n            word_len.append(x)\r\n    return word_len\t"
    },
    {
        "number": 129,
        "prompt": "Write a function to calculate magic square.\ndef magic_square_test(my_matrix):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    # check if magic square\n    n = len(my_matrix)\n    # check if matrix is a square matrix\n    if n == len(my_matrix[0]):\n        # check if sum of diagonal is equal\n        sum_diagonal1 = sum([my_matrix[i][i] for i in range(n)])\n        sum_diagonal2 = sum([my_matrix[i][n - i - 1] for i in range(n)])\n        if sum_diagonal1 != sum_diagonal2:\n            return False\n        # check if sum of rows is equal\n        for i in range(n):\n            if sum(my_matrix[i]) != sum_diagonal1:\n                return False\n        # check if sum of columns is equal\n        for j in range(n):\n            col_sum = 0\n            for i in range(n):\n                col_sum += my_matrix[i][j]\n            if col_sum != sum_diagonal1:\n                return False\n        return True\n    else:\n        return False\n\n\n# Testing the function\nmatrix = [[2, 7, 6],\n          [9, 5, 1],\n          [4, 3, 8]]\nprint(magic_square_test(matrix))  # Output: True\n\nmatrix = [[2, 7, 6],\n          [9, 5, 1],\n          [4, 3, 9]]\nprint(mag",
        "generated_testcode": "assert magic_square_test(my_matrix) == True\n\n# Test the function with a 3x3 matrix\nmy_matrix = [[1, 2, 3],\n            [4, 5, 6],\n            [7, 8, 9]]\n",
        "test": "assert magic_square_test([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]])==True\nassert magic_square_test([[2, 7, 6], [9, 5, 1], [4, 3, 8]])==True\nassert magic_square_test([[2, 7, 6], [9, 5, 1], [4, 3, 7]])==False",
        "canonical_solution": "def magic_square_test(my_matrix):\r\n    iSize = len(my_matrix[0])\r\n    sum_list = []\r\n    sum_list.extend([sum (lines) for lines in my_matrix])   \r\n    for col in range(iSize):\r\n        sum_list.append(sum(row[col] for row in my_matrix))\r\n    result1 = 0\r\n    for i in range(0,iSize):\r\n        result1 +=my_matrix[i][i]\r\n    sum_list.append(result1)      \r\n    result2 = 0\r\n    for i in range(iSize-1,-1,-1):\r\n        result2 +=my_matrix[i][i]\r\n    sum_list.append(result2)\r\n    if len(set(sum_list))>1:\r\n        return False\r\n    return True"
    },
    {
        "number": 130,
        "prompt": "Write a function to find the item with maximum frequency in a given list.\ndef max_occurrences(nums):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    freq_dict = {}\n    max_freq = 0\n    max_num = None\n    for num in nums:\n        if num in freq_dict:\n            freq_dict[num] += 1\n        else:\n            freq_dict[num] = 1\n        if freq_dict[num] > max_freq:\n            max_freq = freq_dict[num]\n            max_num = num\n    return max_num\n\n# Test the function with an example\nnums = [1, 2, 3, 4, 3, 2, 1, 1, 5, 6, 1, 6, 5]\nprint(max_occurrences(nums))  # Output: 1\n\n# Test the function with another example\nnums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nprint(max_occurrences(nums))  # Output: None (since there is no item with maximum frequency)\n\n# Test the function with an empty list\nnums = []\nprint(max_occurrences(nums))  # Output: None (since there is no item with maximum frequency) ",
        "generated_testcode": "assert max_occurrences([1, 2, 3, 2, 4, 5, 2, 6, 3, 7, 8, 3, 9, 0, 2, 1]) == 2\n",
        "test": "assert max_occurrences([2,3,8,4,7,9,8,2,6,5,1,6,1,2,3,2,4,6,9,1,2])==(2, 5)\nassert max_occurrences([2,3,8,4,7,9,8,7,9,15,14,10,12,13,16,16,18])==(8, 2)\nassert max_occurrences([10,20,20,30,40,90,80,50,30,20,50,10])==(20, 3)",
        "canonical_solution": "from collections import defaultdict\r\ndef max_occurrences(nums):\r\n    dict = defaultdict(int)\r\n    for i in nums:\r\n        dict[i] += 1\r\n    result = max(dict.items(), key=lambda x: x[1]) \r\n    return result"
    },
    {
        "number": 131,
        "prompt": "Write a python function to reverse only the vowels of a given string.\ndef reverse_vowels(str1):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    vowels = set(['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'])\n    new_str = ''\n    left, right = 0, len(str1) - 1\n\n    while left < right:\n        if str1[left] not in vowels:\n            new_str += str1[left]\n            left += 1\n        elif str1[right] not in vowels:\n            new_str += str1[right]\n            right -= 1\n        else:\n            new_str += str1[right]\n            right -= 1\n            left += 1\n\n    return new_str + str1[left:right+1]\n\n# Test the function with some examples\nprint(reverse_vowels('hello world'))  # Output: hlelo wrold\nprint(reverse_vowels('Python'))  # Output: Python\nprint(reverse_vowels('aeiou'))  # Output: uioe\nprint(reverse_vowels('AEIOU'))  # Output: UEOIA\nprint(reverse_vowels('abracadabra'))  # Output: abracadabra\nprint(reverse_vowels('leetcode'))  # Output: leotcede\n",
        "generated_testcode": "assert reverse_vowels(\"hello world\") == \"holle world\"\n",
        "test": "assert reverse_vowels(\"Python\") == \"Python\"\nassert reverse_vowels(\"USA\") == \"ASU\"\nassert reverse_vowels(\"ab\") == \"ab\"",
        "canonical_solution": "def reverse_vowels(str1):\r\n\tvowels = \"\"\r\n\tfor char in str1:\r\n\t\tif char in \"aeiouAEIOU\":\r\n\t\t\tvowels += char\r\n\tresult_string = \"\"\r\n\tfor char in str1:\r\n\t\tif char in \"aeiouAEIOU\":\r\n\t\t\tresult_string += vowels[-1]\r\n\t\t\tvowels = vowels[:-1]\r\n\t\telse:\r\n\t\t\tresult_string += char\r\n\treturn result_string"
    },
    {
        "number": 132,
        "prompt": "Write a function to convert tuple to a string.\ndef tup_string(tup1):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    return str(tup1)\n\n# Example usage:\ntup1 = (1, 2, 3, 4, 5, 6)\nprint(tup_string(tup1))  # Output: (1, 2, 3, 4, 5, 6)\n\n# Output: ('a', 'b', 'c', 'd', 'e')\ntup2 = ('a', 'b', 'c', 'd', 'e')\nprint(tup_string(tup2)) ",
        "generated_testcode": "assert tup_string((1, 2, 3, 4, 5) == \"1, 2, 3, 4, 5\")\n",
        "test": "assert tup_string(('e', 'x', 'e', 'r', 'c', 'i', 's', 'e', 's'))==(\"exercises\")\nassert tup_string(('p','y','t','h','o','n'))==(\"python\")\nassert tup_string(('p','r','o','g','r','a','m'))==(\"program\")",
        "canonical_solution": "def tup_string(tup1):\r\n  str =  ''.join(tup1)\r\n  return str"
    },
    {
        "number": 133,
        "prompt": "Write a function to calculate the sum of the negative numbers of a given list of numbers using lambda function.\ndef sum_negativenum(nums):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    return sum(filter(lambda x: x<0, nums) if nums else 0\n\n# Test the function with sample input\nprint(sum_negativenum([1, -2, 3, -4, 5, -6, 7])) # Output: -10\nprint(sum_negativenum([1, 2, 3, 4, 5, 6])     # Output: 0\n\n# Test the function with an empty list\nprint(sum_negativenum([]                    # Output: 0\n\n# Test the function with a list containing only one negative number\nprint(sum_negativenum([-1]                # Output: -1\n\n# Test the function with a list containing only one positive number\nprint(sum_negativenum([1]                # Output: 0\n\n# Test the function with a list containing no number\nprint(sum_negativenum()                  # Output: 0\n\n# Test the function with a list containing only one negative number as a string\nprint(sum_negativenum(['-1']            # Output: -1\n\n# Test the function with a list containing one negative number and one string\nprint(sum_negativenum([-1, '2']         # Output: -1\n\n# Test the function with a list containing one negative number and one float\nprint(sum_negativenum([-1, 2.5]         # Output: -1\n\n# Test the function with a list containing one negative number, one string and one float\nprint(sum",
        "generated_testcode": "assert sum_negativenum([1, 2, 3, 4, -5, 6, -7, 8, -9]) == -13\n",
        "test": "assert sum_negativenum([2, 4, -6, -9, 11, -12, 14, -5, 17])==-32\nassert sum_negativenum([10,15,-14,13,-18,12,-20])==-52\nassert sum_negativenum([19, -65, 57, 39, 152,-639, 121, 44, 90, -190])==-894",
        "canonical_solution": "def sum_negativenum(nums):\r\n  sum_negativenum = list(filter(lambda nums:nums<0,nums))\r\n  return sum(sum_negativenum)"
    },
    {
        "number": 134,
        "prompt": "Write a python function to check whether the last element of given array is even or odd after performing an operation p times.\ndef check_last (arr,n,p): \n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    for i in range(p):\n        arr.sort()\n        arr.reverse()\n    return 'even' if arr[0]%2==0 else 'odd'\n\n#Example usage\narr = [1,4,2,3,5,6]\nn = len(arr)\np = 3\nprint(check_last(arr,n,p)) #output: odd\n\narr = [1,2,4,3,6]\nn = len(arr)\np = 3\nprint(check_last(arr,n,p)) #output: even ",
        "generated_testcode": "assert check_last([1,2,3,4,5],2) == True\n",
        "test": "assert check_last([5,7,10],3,1) == \"ODD\"\nassert check_last([2,3],2,3) == \"EVEN\"\nassert check_last([1,2,3],3,1) == \"ODD\"",
        "canonical_solution": "def check_last (arr,n,p): \r\n    _sum = 0\r\n    for i in range(n): \r\n        _sum = _sum + arr[i] \r\n    if p == 1: \r\n        if _sum % 2 == 0: \r\n            return \"ODD\"\r\n        else: \r\n            return \"EVEN\"\r\n    return \"EVEN\"\r\n      "
    },
    {
        "number": 135,
        "prompt": "Write a function to find the nth hexagonal number.\ndef hexagonal_num(n): \n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": true,
        "answer": "    return n*(2*n - 1)\n\n# Test the function with the first few values\nprint(hexagonal_num(1))  # 1\nprint(hexagonal_num(2))  # 6\nprint(hexagonal_num(3))  # 15\nprint(hexagonal_num(4))  # 28\nprint(hexagonal_num(5))  # 45\n\n# Test the function with a negative number\nprint(hexagonal_num(-1))  # error: cannot divide by zero\n\n# Test the function with a non-integer input\nprint(hexagonal_num(2.5))  # error: cannot multiply sequence by non-int of type 'float'\n\n# Test the function with a large number\nprint(hexagonal_num(10000))  # 499995000\n\n# Test the function with a very large number\nprint(hexagonal_num(100000000))  # 25508750250009547125\n\n# Find the first 10 hexagonal numbers\nfor i in range(1, 11):\n    print(hexagonal_num(i))\n",
        "generated_testcode": "assert hexagonal_num(1) == 1\n",
        "test": "assert hexagonal_num(10) == 190\nassert hexagonal_num(5) == 45\nassert hexagonal_num(7) == 91",
        "canonical_solution": "def hexagonal_num(n): \r\n\treturn n*(2*n - 1) "
    },
    {
        "number": 136,
        "prompt": "Write a function to calculate electricity bill.\ndef cal_electbill(units):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    if units <= 5000:\n        return units * 5\n    elif units <= 10000:\n        return (5000 * 5) + (units - 500) * 10\n    else:\n        return (5000 * 5) + (10000 * 10) + (units - 1000) * 15\n\nunits = int(input(\"Enter the units consumed: \"))\nprint(\"Electricity bill:\", cal_electbill(units))\n\n# Output:\n# Enter the units consumed: 750\n# Electricity bill: 7500\n\n# Enter the units consumed: 1500\n# Electricity bill: 15000\n\n# Enter the units consumed: 2000\n# Electricity bill: 1500 + (500 * 10) + (500 * 15) = 22500\n\n# Enter the units consumed: 0\n# Electricity bill: 0\n\n# Enter the units consumed: -500\n# Invalid input. Please enter a positive number. ",
        "generated_testcode": "assert cal_electbill(10000) == 100\n",
        "test": "assert cal_electbill(75)==246.25\nassert cal_electbill(265)==1442.75\nassert cal_electbill(100)==327.5",
        "canonical_solution": "def cal_electbill(units):\r\n if(units < 50):\r\n    amount = units * 2.60\r\n    surcharge = 25\r\n elif(units <= 100):\r\n    amount = 130 + ((units - 50) * 3.25)\r\n    surcharge = 35\r\n elif(units <= 200):\r\n    amount = 130 + 162.50 + ((units - 100) * 5.26)\r\n    surcharge = 45\r\n else:\r\n    amount = 130 + 162.50 + 526 + ((units - 200) * 8.45)\r\n    surcharge = 75\r\n total = amount + surcharge\r\n return total"
    },
    {
        "number": 137,
        "prompt": "Write a function to find the ration of zeroes in an array of integers.\ndef zero_count(nums):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    count = 0\n    for i in nums:\n        if i == 0:\n            count += 1\n    return count\n\ndef zero_ratio(nums):\n    total = len(nums)\n    count = zero_count(nums)\n    return count / total\n\n# Test the function with an example array\nnums = [1, 2, 3, 0, 4, 5, 0, 6, 7, 0, 8, 9, 0, 10]\nprint(zero_ratio(nums)) # Output: 0.3\n\n# Test the function with an empty array\nnums2 = []\nprint(zero_ratio(nums2)) # Output: 0.0\n\n# Test the function with an array of all zeroes\nnums3 = [0, 0, 0, 0, 0, 0]\nprint(zero_ratio(nums3)) # Output: 1.0\n\n# Test the function with an array of non-zero integers\nnums4 = [1, 2, 3, 4, 5, 6, 7, 8, 9]\nprint(zero_ratio(nums4)) # Output: 0.0\n```\n\nThis function takes an array of integers as input, counts the number of zeroes, and then calculates and returns the ratio of zeroes to the length of the array. It should work for any array of integers, including empty arrays and",
        "generated_testcode": "assert zero_count([1, 2, 3, 0, 4, 5, 0, 6, 0, 7, 8, 0, 9]) == 3\n",
        "test": "assert zero_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])==0.15\nassert zero_count([2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8])==0.00\nassert zero_count([2, 4, -6, -9, 11, -12, 14, -5, 17])==0.00",
        "canonical_solution": "from array import array\r\ndef zero_count(nums):\r\n    n = len(nums)\r\n    n1 = 0\r\n    for x in nums:\r\n        if x == 0:\r\n            n1 += 1\r\n        else:\r\n          None\r\n    return round(n1/n,2)"
    },
    {
        "number": 138,
        "prompt": "Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\ndef is_Sum_Of_Powers_Of_Two(n): \n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": true,
        "answer": "    if n == 0: \n        return True\n    i = 1\n    while i <= n: \n        if i == n: \n            return True\n        if n % i == 0: \n            if is_Sum_Of_Powers_Of_Two(n - i): \n                return True\n        i = i * 2\n    return False\n\nn = 8\nif is_Sum_Of_Powers_Of_Two(n): \n    print(n, \"can be represented as sum of non-zero powers of 2\") \nelse: \n    print(n, \"cannot be represented as sum of non-zero powers of 2\") ",
        "generated_testcode": "assert is_Sum_Of_Powers_Of_Two(10) == True\n",
        "test": "assert is_Sum_Of_Powers_Of_Two(10) == True\nassert is_Sum_Of_Powers_Of_Two(7) == False\nassert is_Sum_Of_Powers_Of_Two(14) == True",
        "canonical_solution": "def is_Sum_Of_Powers_Of_Two(n): \r\n    if (n % 2 == 1): \r\n        return False\r\n    else: \r\n        return True"
    },
    {
        "number": 139,
        "prompt": "Write a function to find the circumference of a circle.\ndef circle_circumference(r):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": true,
        "answer": "    return 2 * 3.14159 * r\n\n#Write a function to find the area of a circle.\ndef circle_area(r):\n    return 3.14159 * r * r\n\n#Write a function to find the volume of a sphere using the formula V = 4/3 * pi * r^3\ndef sphere_volume(r):\n    return (4/3) * 3.14159 * r**3\n\n#Write a function to find the volume of a cylinder using the formula V = pi * r^2 * h\ndef cylinder_volume(r, h):\n    return 3.14159 * r**2 * h\n\n#Write a function to find the surface area of a cylinder using the formula SA = 2 * pi * r * (r + h)\ndef cylinder_surface_area(r, h):\n    return 2 * 3.14159 * r * (r + h)\n\n#Write a function to find the surface area of a cone using the formula SA = pi * r * l * sqrt(r^2 + h^2)\ndef cone_surface_area(r, h):\n    return 3.14159 * r * h * (r**2 + h**2)**0.5\n\n#Write a function to find the surface area of a sphere using the formula SA = 4 * pi * r^2\ndef sphere_surface_area(r):\n    return",
        "generated_testcode": "assert circle_circumference(5) == 31.4159, \"Incorrect circumference\"\n\n",
        "test": "assert circle_circumference(10)==62.830000000000005\nassert circle_circumference(5)==31.415000000000003\nassert circle_circumference(4)==25.132",
        "canonical_solution": "def circle_circumference(r):\r\n  perimeter=2*3.1415*r\r\n  return perimeter"
    },
    {
        "number": 140,
        "prompt": "Write a function to extract elements that occur singly in the given tuple list.\ndef extract_singly(test_list):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    #Create an empty dictionary to store the count of elements in the tuple\n    count_dict = {}\n    for i in test_list:\n        if i in count_dict:\n            count_dict[i] += 1\n        else:\n            count_dict[i] = 1\n    #Create an empty list to store the elements that occur only once\n    result = []\n    for key in count_dict:\n        if count_dict[key] == 1:\n            result.append(key)\n    return result\n\n#Test the function with example tuple\ntest_list = (1, 2, 2, 3, 4, 4, 5, 5, 5, 6)\nprint(extract_singly(test_list))\n\n#Output: [1, 3, 6]\n\n#Time Complexity: O(n)\n#Space Complexity: O(n) ",
        "generated_testcode": "assert extract_singly(('a', 'b', 'c', 'a', 'd', 'e', 'c') == ('b', 'd', 'e')\n\n# Output: ('b', 'd', 'e')\n\n",
        "test": "assert extract_singly([(3, 4, 5), (4, 5, 7), (1, 4)]) == [3, 4, 5, 7, 1]\nassert extract_singly([(1, 2, 3), (4, 2, 3), (7, 8)]) == [1, 2, 3, 4, 7, 8]\nassert extract_singly([(7, 8, 9), (10, 11, 12), (10, 11)]) == [7, 8, 9, 10, 11, 12]",
        "canonical_solution": "def extract_singly(test_list):\r\n  res = []\r\n  temp = set()\r\n  for inner in test_list:\r\n    for ele in inner:\r\n      if not ele in temp:\r\n        temp.add(ele)\r\n        res.append(ele)\r\n  return (res) "
    },
    {
        "number": 141,
        "prompt": "Write a function to sort a list of elements using pancake sort.\ndef pancake_sort(nums):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    n = len(nums)\n    while n > 1:\n        max_index = 0\n        for i in range(n):\n            if nums[i] > nums[max_index]:\n                max_index = i\n        nums = flip(nums, max_index+1)\n        nums = flip(nums, n)\n        n -= 1\n    return nums\n\ndef flip(nums, k):\n    start = 0\n    end = k-1\n    while start < end:\n        nums[start], nums[end] = nums[end], nums[start]\n        start += 1\n        end -= 1\n    return nums\n\n# Test the function with an example list\nnums = [32, 23, 1, 56, 4, 3, 89, 7]\nprint(pancake_sort(nums)) # Output: [1, 3, 4, 7, 23, 32, 56, 89] ",
        "generated_testcode": "assert pancake_sort([]).sort() == []\n",
        "test": "assert pancake_sort([15, 79, 25, 38, 69]) == [15, 25, 38, 69, 79]\nassert pancake_sort([98, 12, 54, 36, 85]) == [12, 36, 54, 85, 98]\nassert pancake_sort([41, 42, 32, 12, 23]) == [12, 23, 32, 41, 42]",
        "canonical_solution": "def pancake_sort(nums):\r\n    arr_len = len(nums)\r\n    while arr_len > 1:\r\n        mi = nums.index(max(nums[0:arr_len]))\r\n        nums = nums[mi::-1] + nums[mi+1:len(nums)]\r\n        nums = nums[arr_len-1::-1] + nums[arr_len:len(nums)]\r\n        arr_len -= 1\r\n    return nums"
    },
    {
        "number": 142,
        "prompt": "Write a function to count the same pair in three given lists.\ndef count_samepair(list1,list2,list3):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    count=0\n    for i in range(len(list1)):\n        for j in range(len(list2)):\n            for k in range(len(list3)):\n                if(list1[i]==list2[j] and list2[j]==list3[k]):\n                    count+=1\n    return count\nlist1=[1,2,3,4,5]\nlist2=[2,3,4,5]\nlist3=[4,5,6,7]\nprint(count_samepair(list1,list2,list3))\n#Output: 2\n#Here, there are 2 common elements between the lists (4 and 5) ",
        "generated_testcode": "assert count_samepair([1,2,3],[2,3,4],[3,4,5]) == 1\n",
        "test": "assert count_samepair([1,2,3,4,5,6,7,8],[2,2,3,1,2,6,7,9],[2,1,3,1,2,6,7,9])==3\nassert count_samepair([1,2,3,4,5,6,7,8],[2,2,3,1,2,6,7,8],[2,1,3,1,2,6,7,8])==4\nassert count_samepair([1,2,3,4,2,6,7,8],[2,2,3,1,2,6,7,8],[2,1,3,1,2,6,7,8])==5",
        "canonical_solution": "def count_samepair(list1,list2,list3):\r\n    result = sum(m == n == o for m, n, o in zip(list1,list2,list3))\r\n    return result"
    },
    {
        "number": 143,
        "prompt": "Write a function to find number of lists present in the given tuple.\ndef find_lists(Input): \n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    count = 0 \n    for i in Input: \n        if type(i) == list: \n            count += 1\n    return count \n\n#Testing the function\nprint(find_lists((1, 2, 3, [4, 5, 6], [7, 8, 9], 10)) # Output: 2\nprint(find_lists((1, 2, 3, 4, 5, 6)) # Output: 0\nprint(find_lists([1, 2, 3, [4, 5, 6]) # Output: 1 ",
        "generated_testcode": "assert find_lists((1, 2, 3, [4, 5, 6], 7, 8) == 1\n",
        "test": "assert find_lists(([1, 2, 3, 4], [5, 6, 7, 8])) == 2\nassert find_lists(([1, 2], [3, 4], [5, 6]))  == 3\nassert find_lists(([9, 8, 7, 6, 5, 4, 3, 2, 1])) == 1",
        "canonical_solution": "def find_lists(Input): \r\n\tif isinstance(Input, list): \r\n\t\treturn 1\r\n\telse: \r\n\t\treturn len(Input) "
    },
    {
        "number": 144,
        "prompt": "Write a python function to find the sum of absolute differences in all pairs of the given array.\ndef sum_Pairs(arr,n): \n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    sum_pairs = 0\n    for i in range(n): \n        for j in range(i + 1, n): \n            sum_pairs += abs(arr[i] - arr[j]) \n    return sum_pairs \n  \n# Driver code \narr = [1, 3, -5, 7, 2, -9] \nn = len(arr) \nprint(\"Sum of absolute differences of all pairs is\", sum_Pairs(arr, n)) \n  \n# Output: Sum of absolute differences of all pairs is 26 ",
        "generated_testcode": "assert sum_Pairs([1,2,3,4,5],4) == 4\n",
        "test": "assert sum_Pairs([1,8,9,15,16],5) == 74\nassert sum_Pairs([1,2,3,4],4) == 10\nassert sum_Pairs([1,2,3,4,5,7,9,11,14],9) == 188",
        "canonical_solution": "def sum_Pairs(arr,n): \r\n    sum = 0\r\n    for i in range(n - 1,-1,-1): \r\n        sum += i*arr[i] - (n-1-i) * arr[i] \r\n    return sum"
    },
    {
        "number": 145,
        "prompt": "Write a python function to find the maximum difference between any two elements in a given array.\ndef max_Abs_Diff(arr,n): \n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    # Initialize max_diff as minimum integer\n    max_diff = -sys.maxsize-1\n    # Initialize minimum element as maximum integer\n    min_element = sys.maxsize\n    # Traverse through all the elements of array and find the minimum element and maximum difference\n    for i in range(n): \n        if arr[i] < min_element: \n            min_element = arr[i] \n        elif arr[i] - min_element > max_diff: \n            max_diff = arr[i] - min_element \n    return max_diff\n# Test the function with example array \narr = [1, 3, -7, 9, 2, 5] \nn = len(arr) \nprint(\"Maximum difference is\", max_Abs_Diff(arr, n)) \n\n# Output: Maximum difference is 16\n\n# Time Complexity: O(n) ",
        "generated_testcode": "assert max_Abs_Diff([1, 2, 3, 4, 5, 6, 7], 5) == 6\n",
        "test": "assert max_Abs_Diff((2,1,5,3),4) == 4\nassert max_Abs_Diff((9,3,2,5,1),5) == 8\nassert max_Abs_Diff((3,2,1),3) == 2",
        "canonical_solution": "def max_Abs_Diff(arr,n): \r\n    minEle = arr[0] \r\n    maxEle = arr[0] \r\n    for i in range(1, n): \r\n        minEle = min(minEle,arr[i]) \r\n        maxEle = max(maxEle,arr[i]) \r\n    return (maxEle - minEle) "
    },
    {
        "number": 146,
        "prompt": "Write a function to find the ascii value of total characters in a string.\ndef ascii_value_string(str1):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    ascii_sum = 0\n    for i in str1:\n        ascii_sum += ord(i)\n    return ascii_sum\n\nprint(ascii_value_string(\"hello\")) # Output: 529\n\n# Write a function to find the sum of digits of a number\ndef sum_of_digits(num):\n    sum = 0\n    while num != 0:\n        digit = num % 10\n        sum += digit\n        num //= 10\n    return sum\n\nprint(sum_of_digits(123)) # Output: 6\n\n# Write a function to find the factorial of a number\ndef factorial(num):\n    if num == 0:\n        return 1\n    else:\n        return num * factorial(num-1)\n\nprint(factorial(4)) # Output: 24\n\n# Write a function to find the length of a string\ndef string_length(str1):\n    count = 0\n    for i in str1:\n        count += 1\n    return count\n\nprint(string_length(\"hello\")) # Output: 5\n\n# Write a function to find the frequency of a character in a string\ndef char_frequency(str1, char):\n    count = 0\n    for i in str1:\n        if i == char:\n            count += 1\n    return count\n\nprint(char_frequency(\"hello\", \"l\")) # Output: 2\n\n# Write a function",
        "generated_testcode": "assert ascii_value_string(input_string) == expected_output\n\n# Test case 1:\ninput_string = \"Hello World\"\nexpected_output = 106\n\n",
        "test": "assert ascii_value_string(\"python\")==112\nassert ascii_value_string(\"Program\")==80\nassert ascii_value_string(\"Language\")==76",
        "canonical_solution": "def ascii_value_string(str1):\r\n  for i in range(len(str1)):\r\n   return ord(str1[i])"
    },
    {
        "number": 147,
        "prompt": "Write a function to find the maximum total path sum in the given triangle.\ndef max_path_sum(tri, m, n): \n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    for i in range(m - 1, -1, -1): \n        for j in range(0, n): \n            if j <= i: \n                tri[i][j] += max(tri[i + 1][j], tri[i + 1][j + 1]) \n    return tri[0][0] \n\ndef maxPathSum(tri):\n    m = len(tri) \n    n = len(tri[0])\n    for i in range(m - 2, -1, -1): \n        for j in range(0, i + 1): \n            tri[i][j] += max(tri[i + 1][j], tri[i + 1][j + 1]) \n    return max(tri[0])\n\ndef main():\n    tri = [[1,2,3],[4,5,6],[7,8,9]]\n    print(maxPathSum(tri))\n\nif __name__ == \"__main__\":\n    main() ",
        "generated_testcode": "assert max_path_sum([[3, 2, 4], [6, 5, 7], [4, 1, 2]], 3, 2) == 18\n",
        "test": "assert max_path_sum([[1, 0, 0], [4, 8, 0], [1, 5, 3]], 2, 2) == 14\nassert max_path_sum([[13, 0, 0], [7, 4, 0], [2, 4, 6]], 2, 2) == 24 \nassert max_path_sum([[2, 0, 0], [11, 18, 0], [21, 25, 33]], 2, 2) == 53",
        "canonical_solution": "def max_path_sum(tri, m, n): \r\n\tfor i in range(m-1, -1, -1): \r\n\t\tfor j in range(i+1): \r\n\t\t\tif (tri[i+1][j] > tri[i+1][j+1]): \r\n\t\t\t\ttri[i][j] += tri[i+1][j] \r\n\t\t\telse: \r\n\t\t\t\ttri[i][j] += tri[i+1][j+1] \r\n\treturn tri[0][0]"
    },
    {
        "number": 148,
        "prompt": "Write a function to divide a number into two parts such that the sum of digits is maximum.\ndef sum_digits_single(x) : \n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    # Converting number to string\n    x = str(x) \n    # Length of the number\n    n = len(x) \n    # Initializing two parts as zero\n    part1 = 0\n    part2 = 0\n    # Finding the mid-index\n    mid = n // 2\n    # Adding first half of the number to part1\n    for i in range(mid) : \n        part1 += int(x[i]) \n    # Adding last half of the number to part2\n    for j in range(mid, n) : \n        part2 += int(x[j]) \n    # Returning the sum of the parts\n    return part1 + part2 \n\n# Function to find the maximum sum of digits by dividing the number into two parts\ndef max_sum_divide(x) : \n    # Converting number to string\n    x = str(x) \n    # Length of the number\n    n = len(x) \n    # Checking if the number is even or odd\n    if n % 2 == 0 : \n        # If even then calculating the sum of both halves\n        s = max(sum_digits_single(x), sum_digits_single(x[:n//2] + x[n//2:]) + 1) \n    else : \n        # If odd then calculating the sum of two halves\n        s = max(sum_digits_single(x), sum_digits_single(",
        "generated_testcode": "assert sum_digits_single(12345) == (15, 7)\n",
        "test": "assert sum_digits_twoparts(35)==17\nassert sum_digits_twoparts(7)==7\nassert sum_digits_twoparts(100)==19",
        "canonical_solution": "def sum_digits_single(x) : \r\n    ans = 0\r\n    while x : \r\n        ans += x % 10\r\n        x //= 10  \r\n    return ans \r\ndef closest(x) : \r\n    ans = 0\r\n    while (ans * 10 + 9 <= x) : \r\n        ans = ans * 10 + 9  \r\n    return ans   \r\ndef sum_digits_twoparts(N) : \r\n    A = closest(N)  \r\n    return sum_digits_single(A) + sum_digits_single(N - A) "
    },
    {
        "number": 149,
        "prompt": "Write a function to find the longest subsequence such that the difference between adjacents is one for the given array.\ndef longest_subseq_with_diff_one(arr, n): \n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    if n == 0 or n == 1: \n        return n \n    max_len = 1\n    max_end = arr[0] \n    curr_end = arr[0] \n    curr_len = 1\n    for i in range(1, n): \n        if arr[i] - max_end == 1: \n            curr_len += 1\n            max_end = arr[i] \n        elif arr[i] - max_end == 0: \n            continue\n        else: \n            max_len = max(max_len, curr_len) \n            curr_end = arr[i] \n            curr_len = 1\n    max_len = max(max_len, curr_len) \n    return max_len ",
        "generated_testcode": "assert longest_subseq_with_diff_one([1, 2, 3, 4, 5, 6, 7, 8, 9], 7) == 6\n",
        "test": "assert longest_subseq_with_diff_one([1, 2, 3, 4, 5, 3, 2], 7) == 6\nassert longest_subseq_with_diff_one([10, 9, 4, 5, 4, 8, 6], 7) == 3\nassert longest_subseq_with_diff_one([1, 2, 3, 2, 3, 7, 2, 1], 8) == 7",
        "canonical_solution": "def longest_subseq_with_diff_one(arr, n): \r\n\tdp = [1 for i in range(n)] \r\n\tfor i in range(n): \r\n\t\tfor j in range(i): \r\n\t\t\tif ((arr[i] == arr[j]+1) or (arr[i] == arr[j]-1)): \r\n\t\t\t\tdp[i] = max(dp[i], dp[j]+1) \r\n\tresult = 1\r\n\tfor i in range(n): \r\n\t\tif (result < dp[i]): \r\n\t\t\tresult = dp[i] \r\n\treturn result"
    },
    {
        "number": 150,
        "prompt": "Write a python function to find whether the given number is present in the infinite sequence or not.\ndef does_Contain_B(a,b,c): \n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    i=0\n    while True:\n        if a==b or a==c:\n            return True\n        elif b==c:\n            return False\n        else:\n            a,b=b,c\n            b,c=c,(a*b)%10\n            i+=1\n            if i==50:\n                return False\n\n#test cases\nprint(does_Contain_B(2,1,1))\nprint(does_Contain_B(1,1,1))\nprint(does_Contain_B(2,2,1))\nprint(does_Contain_B(1,10,3))\nprint(does_Contain_B(3,5,16))\nprint(does_Contain_B(4,2,6))\nprint(does_Contain_B(1,3,9))\nprint(does_Contain_B(1,7,9))\nprint(does_Contain_B(3,5,21))\nprint(does_Contain_B(2,5,3))\nprint(does_Contain_B(1,2,5))\nprint(does_Contain_B(7,3,9))\nprint(does_Contain_B(1,10,19))\nprint(does_Contain_B(2,3,7))\n\n#output\n# True\n# True\n# True\n# True\n# True\n# False\n# False\n# True\n# False\n# True\n#",
        "generated_testcode": "assert does_Contain_B(1,2,3) == True\n",
        "test": "assert does_Contain_B(1,7,3) == True\nassert does_Contain_B(1,-3,5) == False\nassert does_Contain_B(3,2,5) == False",
        "canonical_solution": "def does_Contain_B(a,b,c): \r\n    if (a == b): \r\n        return True\r\n    if ((b - a) * c > 0 and (b - a) % c == 0): \r\n        return True\r\n    return False"
    },
    {
        "number": 151,
        "prompt": "Write a python function to check whether the given number is co-prime or not.\ndef gcd(p,q):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    while q != 0:\n        p, q = q, p%q\n    return p\n\ndef is_co_prime(x, y):\n    if gcd(x,y) == 1:\n        return True\n    else:\n        return False\n\n# Example usage:\nx = 15\ny = 25\nprint(is_co_prime(x,y)) # Output: True\n\n# or you can call the function with user input\n# x = int(input(\"Enter a number: \")\n# y = int(input(\"Enter another number: \")\n# print(is_co_prime(x,y)) ",
        "generated_testcode": "assert gcd(10,20) == 10\n",
        "test": "assert is_coprime(17,13) == True\nassert is_coprime(15,21) == False\nassert is_coprime(25,45) == False",
        "canonical_solution": "def gcd(p,q):\r\n    while q != 0:\r\n        p, q = q,p%q\r\n    return p\r\ndef is_coprime(x,y):\r\n    return gcd(x,y) == 1"
    },
    {
        "number": 152,
        "prompt": "Write a function to sort the given array by using merge sort.\ndef merge(a,b):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    c = []\n    i=j=0\n    while i<len(a) and j<len(b):\n        if a[i]<b[j]:\n            c.append(a[i])\n            i+=1\n        else:\n            c.append(b[j])\n            j+=1\n    if i==len(a):\n        c.extend(b[j:])\n    else:\n        c.extend(a[i:])\n    return c\n\ndef mergesort(arr):\n    if len(arr)<=1:\n        return arr\n    mid = len(arr)//2\n    left = mergesort(arr[:mid])\n    right = mergesort(arr[mid:])\n    return merge(left,right)\n\narr = [3,1,4,2,6,5,8,7]\nprint(mergesort(arr))\n\n#Output: [1, 2, 3, 4, 5, 6, 7, 8]\n\n#Time Complexity: O(nlogn) ",
        "generated_testcode": "assert merge([1,3,5,7,9],[2,4,6,8,10]) == [1,2,3,4,5,6,7,8,9,10]\n",
        "test": "assert merge_sort([3, 4, 2, 6, 5, 7, 1, 9]) == [1, 2, 3, 4, 5, 6, 7, 9]\nassert merge_sort([7, 25, 45, 78, 11, 33, 19]) == [7, 11, 19, 25, 33, 45, 78]\nassert merge_sort([3, 1, 4, 9, 8]) == [1, 3, 4, 8, 9]",
        "canonical_solution": "def merge(a,b):\r\n    c = []\r\n    while len(a) != 0 and len(b) != 0:\r\n        if a[0] < b[0]:\r\n            c.append(a[0])\r\n            a.remove(a[0])\r\n        else:\r\n            c.append(b[0])\r\n            b.remove(b[0])\r\n    if len(a) == 0:\r\n        c += b\r\n    else:\r\n        c += a\r\n    return c\r\ndef merge_sort(x):\r\n    if len(x) == 0 or len(x) == 1:\r\n        return x\r\n    else:\r\n        middle = len(x)//2\r\n        a = merge_sort(x[:middle])\r\n        b = merge_sort(x[middle:])\r\n        return merge(a,b)\r\n"
    },
    {
        "number": 153,
        "prompt": "Write a function to find the vertex of a parabola.\ndef parabola_vertex(a, b, c): \n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    return -b/(2*a)\n\n# Write a function to find the focus of a parabola.\ndef parabola_focus(a, vertex): \n    return a*vertex*vertex/2\n\n# Write a function to find the directrix of a parabola.\ndef parabola_directrix(a, vertex): \n    return a*(vertex + 2)\n\n# Find the vertex, focus, and directrix of a parabola\ndef parabola_info(a, b, c): \n    vertex = parabola_vertex(a, b, c)\n    focus = parabola_focus(a, vertex)\n    directrix = parabola_directrix(a, vertex)\n    return vertex, focus, directrix\n\n# Test the function with example values\nprint(parabola_info(1, -6, 9)) # Output: (-3.0, 3.0, 0.0)\n\n\n# Find the vertex, focus, and directrix of a parabola\ndef parabola_info(a, b, c): \n    vertex = parabola_vertex(a, b, c)\n    focus = parabola_focus(a, vertex)\n    directrix = parabola_directrix(a, vertex)\n    return vertex, focus, directrix\n\n# Test the function with example values\nprint(parabola_info(1, -6, 9)) # Output: (-3.0, 3.",
        "generated_testcode": "assert parabola_vertex(1, 2, 3) == (0, -3)\n",
        "test": "assert parabola_vertex(5,3,2)==(-0.3, 1.55)\nassert parabola_vertex(9,8,4)==(-0.4444444444444444, 2.2222222222222223)\nassert parabola_vertex(2,4,6)==(-1.0, 4.0)",
        "canonical_solution": "def parabola_vertex(a, b, c): \r\n  vertex=(((-b / (2 * a)),(((4 * a * c) - (b * b)) / (4 * a))))\r\n  return vertex"
    },
    {
        "number": 154,
        "prompt": "Write a function to extract every specified element from a given two dimensional list.\ndef specified_element(nums, N):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    return [row[N-1] for row in nums]\n\n# Example usage:\nnums = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nprint(specified_element(nums, 2))  # Output: [3, 6, 9]\n\n# This function returns the last element of each row of the given two dimensional list\n# specified by the index N. \n# The input is a two dimensional list of integers and an integer N, \n# and the output is a list of integers. ",
        "generated_testcode": "assert specified_element([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 2) == [2, 5, 8]\n",
        "test": "assert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],0)==[1, 4, 7]\nassert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],2)==[3, 6, 9]\nassert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],3)==[2,2,5]",
        "canonical_solution": "def specified_element(nums, N):\r\n    result = [i[N] for i in nums]\r\n    return result"
    },
    {
        "number": 155,
        "prompt": "Write a python function to toggle all even bits of a given number.\ndef even_bit_toggle_number(n) : \n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    return n ^ (n & 0xAAAAAAAA)\n\n# Driver code \nnum = int(input(\"Enter a number : \")) \nprint(\"Number after toggling even bits is :\", even_bit_toggle_number(num)) ",
        "generated_testcode": "assert even_bit_toggle_number(10) == 5\n",
        "test": "assert even_bit_toggle_number(10) == 0\nassert even_bit_toggle_number(20) == 30\nassert even_bit_toggle_number(30) == 20",
        "canonical_solution": "def even_bit_toggle_number(n) : \r\n    res = 0; count = 0; temp = n \r\n    while (temp > 0) :     \r\n        if (count % 2 == 1) : \r\n            res = res | (1 << count)      \r\n        count = count + 1\r\n        temp >>= 1 \r\n    return n ^ res "
    },
    {
        "number": 156,
        "prompt": "Write a function to convert a tuple of string values to a tuple of integer values.\ndef tuple_int_str(tuple_str):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    return tuple(map(int, tuple_str))\n\n# Test the function with the example tuple\nprint(tuple_int_str(('1', '2', '3', '4', '5'))) # Output: (1, 2, 3, 4, 5)\n\n# Test the function with another tuple\nprint(tuple_int_str(('-1', '0', '5', '10000')) # Output: (-1, 0, 5, 10000) ",
        "generated_testcode": "assert tuple_int_str((\"1\", \"2\", \"3\") == (1, 2, 3))\n",
        "test": "assert tuple_int_str((('333', '33'), ('1416', '55')))==((333, 33), (1416, 55))\nassert tuple_int_str((('999', '99'), ('1000', '500')))==((999, 99), (1000, 500))\nassert tuple_int_str((('666', '66'), ('1500', '555')))==((666, 66), (1500, 555))",
        "canonical_solution": "def tuple_int_str(tuple_str):\r\n    result = tuple((int(x[0]), int(x[1])) for x in tuple_str)\r\n    return result"
    },
    {
        "number": 157,
        "prompt": "Write a function to reflect the run-length encoding from a list.\ndef encode_list(list1):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    new_list = []\n    count = 1\n    for i in range(len(list1)-1):\n        if list1[i] == list1[i+1]:\n            count += 1\n        else:\n            new_list.append((list1[i], count) if count != 1 else list1[i])\n            count = 1\n    new_list.append((list1[i+1], count) if count != 1 else list1[i+1])\n    return new_list\n\n# Test the function\nlist1 = [1, 1, 1, 1, 2, 3, 3, 3, 3, 2, 2, 2, 4, 5, 5, 4, 4, 4, 4]\nprint(encode_list(list1)) # [(1, 3), 2, (3, 3), 2, (2, 2), (4, 1), 5, (5, 1), (4, 3)]\nlist2 = [1, 1, 1, 1, 1, 2, 3, 3, 3, 3, 2, 2, 2, 2, 4, 5, 5, 4, 4, 4, 4]\nprint(encode_list(list2)) # [(1, 4), 2, (3, 3), 2, (2, 2), (4, 2",
        "generated_testcode": "assert encode_list([\"a\", \"a\", \"a\", \"b\", \"b\", \"b\", \"c\", \"c\", \"c\", \"c\"]) == [(\"a\", 3), (\"b\", 2), (\"c\", 3)]\n",
        "test": "assert encode_list([1,1,2,3,4,4.3,5,1])==[[2, 1], [1, 2], [1, 3], [1, 4], [1, 4.3], [1, 5], [1, 1]]\nassert encode_list('automatically')==[[1, 'a'], [1, 'u'], [1, 't'], [1, 'o'], [1, 'm'], [1, 'a'], [1, 't'], [1, 'i'], [1, 'c'], [1, 'a'], [2, 'l'], [1, 'y']]\nassert encode_list('python')==[[1, 'p'], [1, 'y'], [1, 't'], [1, 'h'], [1, 'o'], [1, 'n']]",
        "canonical_solution": "from itertools import groupby\r\ndef encode_list(list1):\r\n    return [[len(list(group)), key] for key, group in groupby(list1)]"
    },
    {
        "number": 158,
        "prompt": "Write a python function to find k number of operations required to make all elements equal.\ndef min_Ops(arr,n,k): \n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    # Initialize a variable 'ans' to store minimum operations required to make all elements equal\n    ans = 0\n    # Traverse the array\n    for i in range(n): \n        # If current element is not equal to k\n        if arr[i] != k: \n            # Add the difference between current element and k to ans\n            ans += abs(arr[i]-k) \n            # Update the array element as k\n            arr[i] = k \n    # Return the minimum operations required\n    return ans \n\n# Test the function with sample input\narr = [1, 2, 3, 4, 5] \nn = len(arr) \nk = 3\nprint(min_Ops(arr, n, k))\n\n# Output: 5 ",
        "generated_testcode": "assert min_Ops([1,2,3,4,5],4,3) == 3\n",
        "test": "assert min_Ops([2,2,2,2],4,3) == 0\nassert min_Ops([4,2,6,8],4,3) == -1\nassert min_Ops([21,33,9,45,63],5,6) == 24",
        "canonical_solution": "def min_Ops(arr,n,k): \r\n    max1 = max(arr) \r\n    res = 0\r\n    for i in range(0,n):  \r\n        if ((max1 - arr[i]) % k != 0): \r\n            return -1 \r\n        else: \r\n            res += (max1 - arr[i]) / k \r\n    return int(res) "
    },
    {
        "number": 159,
        "prompt": "Write a function to print the season for the given month and day.\ndef month_season(month,days):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": true,
        "answer": "    if month in [12, 1, 2]:\n        season = \"Winter\"\n    elif month in [3, 4, 5]:\n        season = \"Spring\"\n    elif month in [6, 7, 8]:\n        season = \"Summer\"\n    elif month in [9, 10, 11]:\n        season = \"Fall\"\n    else:\n        season = \"Winter\"\n    return season\n\n# Test cases\nprint(month_season(1, 20)) # Output: \"Winter\"\nprint(month_season(6, 15)) # Output: \"Summer\"\nprint(month_season(12, 21)) # Output: \"Winter\"\nprint(month_season(9, 1)) # Output: \"Fall\"\nprint(month_season(5, 31)) # Output: \"Spring\"\n",
        "generated_testcode": "assert month_season(1,31) == \"Winter\"\n",
        "test": "assert month_season('January',4)==('winter')\nassert month_season('October',28)==('autumn')\nassert month_season('June',6)==('spring')",
        "canonical_solution": "def month_season(month,days):\r\n if month in ('January', 'February', 'March'):\r\n\t season = 'winter'\r\n elif month in ('April', 'May', 'June'):\r\n\t season = 'spring'\r\n elif month in ('July', 'August', 'September'):\r\n\t season = 'summer'\r\n else:\r\n\t season = 'autumn'\r\n if (month == 'March') and (days > 19):\r\n\t season = 'spring'\r\n elif (month == 'June') and (days > 20):\r\n\t season = 'summer'\r\n elif (month == 'September') and (days > 21):\r\n\t season = 'autumn'\r\n elif (month == 'October') and (days > 21):\r\n\t season = 'autumn'\r\n elif (month == 'November') and (days > 21):\r\n\t season = 'autumn'\r\n elif (month == 'December') and (days > 20):\r\n\t season = 'winter'\r\n return season"
    },
    {
        "number": 160,
        "prompt": "Write a function to find x and y that satisfies ax + by = n.\ndef solution (a, b, n): \n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    x, y = 0, n // a\n    while y*b - x*a != n:\n        x, y = x + 1, y - (n - x*a)//b\n    return x, y\n\nprint(solution(2, 3, 15)) # Output: (4, 5)\nprint(solution(3, 5, 12)) # Output: (2, -1)\nprint(solution(1, 1, 1)) # Output: (1, 1)\nprint(solution(1, 1, 2)) # Output: (2, 1)\nprint(solution(3, 1, 6)) # Output: (2, 0)\nprint(solution(1, 3, 2)) # Output: None (No solution)\n",
        "generated_testcode": "assert solution(2, 3, 9) == (1, 2)\n",
        "test": "assert solution(2, 3, 7) == ('x = ', 2, ', y = ', 1)\nassert solution(4, 2, 7) == 'No solution'\nassert solution(1, 13, 17) == ('x = ', 4, ', y = ', 1)",
        "canonical_solution": "def solution (a, b, n): \r\n\ti = 0\r\n\twhile i * a <= n: \r\n\t\tif (n - (i * a)) % b == 0: \r\n\t\t\treturn (\"x = \",i ,\", y = \", \r\n\t\t\tint((n - (i * a)) / b)) \r\n\t\t\treturn 0\r\n\t\ti = i + 1\r\n\treturn (\"No solution\") "
    },
    {
        "number": 161,
        "prompt": "Write a function to remove all elements from a given list present in another list.\ndef remove_elements(list1, list2):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    # Using a loop to iterate over the elements of list1\n    for i in range(len(list1)-1, -1, -1):\n        if list1[i] in list2:\n            # Removing the elements present in list2\n            list1.remove(list1[i])\n    # Returning the new list\n    return list1\n\n# Example usage\nlist1 = [1, 2, 3, 4, 5, 6, 7, 8, 9]\nlist2 = [2, 4, 6, 8]\nprint(remove_elements(list1, list2)) # Output: [1, 3, 5, 7, 9]\nlist1 = [1, 2, 3, 4, 5, 6, 7, 8, 9]\nlist2 = []\nprint(remove_elements(list1, list2)) # Output: [1, 2, 3, 4, 5, 6, 7, 8, 9]\nlist1 = [1, 2, 3, 4, 5, 6, 7, 8, 9]\nlist2 = [10, 11, 12]\nprint(remove_elements(list1, list2)) # Output: [1, 2, 3, 4, 5, 6, 7, 8, 9] ",
        "generated_testcode": "assert remove_elements([1, 2, 3, 4, 5], [3, 5]) == [1, 2, 4]\n",
        "test": "assert remove_elements([1,2,3,4,5,6,7,8,9,10],[2,4,6,8])==[1, 3, 5, 7, 9, 10]\nassert remove_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],[1, 3, 5, 7])==[2, 4, 6, 8, 9, 10]\nassert remove_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],[5,7])==[1, 2, 3, 4, 6, 8, 9, 10]",
        "canonical_solution": "def remove_elements(list1, list2):\r\n    result = [x for x in list1 if x not in list2]\r\n    return result"
    },
    {
        "number": 162,
        "prompt": "Write a function to calculate the sum of the positive integers of n+(n-2)+(n-4)... (until n-x =< 0).\ndef sum_series(n):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    if n<0:\n        return 0\n    return n + sum_series(n-2)\n\n# Test the function\nprint(sum_series(10)) # Output: 25 (10 + 8 + 6 + 4 + 2)\nprint(sum_series(100)) # Output: 10100 (100 + 98 + 96 + 94 + 92 + 90 + 88 + 86 + 84 + 82 + 80 + 78 + 76 + 74 + 72 + 70 + 68 + 66 + 64 + 62 + 60 + 58 + 56 + 54 + 52 + 50 + 48 + 46 + 44 + 42 + 40 + 38 + 36 + 34 + 32 + 30 + 28 + 26 + 24 + 22 + 20 + 18 + 16 + 14 + 12 + 10 + 8 + 6 + 4 + 2)\nprint(sum_series(5)) # Output: 10 (5 + 3 + 1)\nprint(sum_series(-5)) # Output: 0 (n < 0) ",
        "generated_testcode": "assert sum_series(10) == 30\n",
        "test": "assert sum_series(6)==12\nassert sum_series(10)==30\nassert sum_series(9)==25",
        "canonical_solution": "def sum_series(n):\r\n  if n < 1:\r\n    return 0\r\n  else:\r\n    return n + sum_series(n - 2)"
    },
    {
        "number": 163,
        "prompt": "Write a function to calculate the area of a regular polygon.\ndef area_polygon(s,l):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    return (s*l)/2\n\n# Test the function with a square\nprint(area_polygon(4,5)) # Expected output: 20\n\n# Test the function with a triangle\nprint(area_polygon(3,10)) # Expected output: 15\n\n# Test the function with a hexagon\nprint(area_polygon(6,7)) # Expected output: 21",
        "generated_testcode": "assert area_polygon(6,4) == 12.0\n",
        "test": "assert area_polygon(4,20)==400.00000000000006\nassert area_polygon(10,15)==1731.1969896610804\nassert area_polygon(9,7)==302.90938549487214",
        "canonical_solution": "from math import tan, pi\r\ndef area_polygon(s,l):\r\n  area = s * (l ** 2) / (4 * tan(pi / s))\r\n  return area"
    },
    {
        "number": 164,
        "prompt": "Write a python function to check whether the sum of divisors are same or not.\ndef divSum(n): \n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    sum = 0\n    for i in range(1, n+1): \n        if (n % i == 0): \n            sum += i \n    return sum\n\nn = int(input(\"Enter a number: \")\nm = divSum(n)\nif(m == n):\n    print(\"Sum of divisors and the number are same.\")\nelse:\n    print(\"Sum of divisors and the number are not same.\") \n    ",
        "generated_testcode": "assert divSum(1) == 1\n",
        "test": "assert areEquivalent(36,57) == False\nassert areEquivalent(2,4) == False\nassert areEquivalent(23,47) == True",
        "canonical_solution": "import math \r\ndef divSum(n): \r\n    sum = 1; \r\n    i = 2; \r\n    while(i * i <= n): \r\n        if (n % i == 0): \r\n            sum = (sum + i +math.floor(n / i)); \r\n        i += 1; \r\n    return sum; \r\ndef areEquivalent(num1,num2): \r\n    return divSum(num1) == divSum(num2); "
    },
    {
        "number": 165,
        "prompt": "Write a python function to count characters at same position in a given string (lower and uppercase characters) as in english alphabet.\ndef count_char_position(str1): \n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    lower_count = [0]*26\n    upper_count = [0]*26\n    for i in range(len(str1)): \n        if str1[i].islower(): \n            index = ord(str1[i]) - ord('a') \n            lower_count[index] += 1\n        elif str1[i].isupper(): \n            index = ord(str1[i]) - ord('A') \n            upper_count[index] += 1\n  \n    # Traversing through the count array and printing the result \n    print(\"Characters at same position in lower and uppercase are:\") \n    for i in range(26): \n        if (lower_count[i] > 0 or upper_count[i] > 0): \n            print(chr(i+ord('a')), chr(i+ord('A')), lower_count[i], upper_count[i]) \n\nstr1 = \"HelloWorld\"\ncount_char_position(str1) ",
        "generated_testcode": "assert count_char_position(\"Hello World\") == 10\n",
        "test": "assert count_char_position(\"xbcefg\") == 2\nassert count_char_position(\"ABcED\") == 3\nassert count_char_position(\"AbgdeF\") == 5",
        "canonical_solution": "def count_char_position(str1): \r\n    count_chars = 0\r\n    for i in range(len(str1)):\r\n        if ((i == ord(str1[i]) - ord('A')) or \r\n            (i == ord(str1[i]) - ord('a'))): \r\n            count_chars += 1\r\n    return count_chars "
    },
    {
        "number": 166,
        "prompt": "Write a python function to count the pairs with xor as an even number.\ndef find_even_Pair(A,N): \n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    even_count = 0\n    for i in range(N): \n        for j in range(i+1, N): \n            if (A[i]^A[j]) % 2 == 0: \n                even_count += 1\n    return even_count \n\nA = [1, 3, 5, 2, 4, 7, 6] \nN = len(A) \nprint(find_even_Pair(A,N)) ",
        "generated_testcode": "assert find_even_Pair([1,2,3,4,5,6,7,8,9], 6) == 2\n",
        "test": "assert find_even_Pair([5,4,7,2,1],5) == 4\nassert find_even_Pair([7,2,8,1,0,5,11],7) == 9\nassert find_even_Pair([1,2,3],3) == 1",
        "canonical_solution": "def find_even_Pair(A,N): \r\n    evenPair = 0\r\n    for i in range(0,N): \r\n        for j in range(i+1,N): \r\n            if ((A[i] ^ A[j]) % 2 == 0): \r\n                evenPair+=1\r\n    return evenPair; "
    },
    {
        "number": 167,
        "prompt": "Write a python function to find smallest power of 2 greater than or equal to n.\ndef next_Power_Of_2(n): \n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    if n == 0: \n        return 1\n    i = 1\n    while (1 << i) < n: \n        i += 1\n    return (1 << i) \n\n# Driver code \nn = 4\nprint(\"Smallest power of 2 greater than or equal to\", n, \"is\", next_Power_Of_2(n)) ",
        "generated_testcode": "assert next_Power_Of_2(10) == 16\n",
        "test": "assert next_Power_Of_2(0) == 1\nassert next_Power_Of_2(5) == 8\nassert next_Power_Of_2(17) == 32",
        "canonical_solution": "def next_Power_Of_2(n): \r\n    count = 0; \r\n    if (n and not(n & (n - 1))): \r\n        return n   \r\n    while( n != 0): \r\n        n >>= 1\r\n        count += 1\r\n    return 1 << count; "
    },
    {
        "number": 168,
        "prompt": "Write a python function to find the frequency of a number in a given array.\ndef frequency(a,x): \n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    freq = 0\n    for i in range(len(a)): \n        if a[i] == x: \n            freq += 1\n    return freq\n\n#Testing the function\na = [1,2,3,4,5,6,5,7,8,5,9,5]\nx = 5\nprint(frequency(a,x)) ",
        "generated_testcode": "assert frequency([1,2,3,4,5,6,7,8,9,10,10,10],10) == 2\n",
        "test": "assert frequency([1,2,3],4) == 0\nassert frequency([1,2,2,3,3,3,4],3) == 3\nassert frequency([0,1,2,3,1,2],1) == 2",
        "canonical_solution": "def frequency(a,x): \r\n    count = 0  \r\n    for i in a: \r\n        if i == x: count += 1\r\n    return count "
    },
    {
        "number": 169,
        "prompt": "Write a function to calculate the nth pell number.\ndef get_pell(n): \n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return (2 * get_pell(n-1)) + get_pell(n-2)\n    \nprint(get_pell(3)) # Output: 5\nprint(get_pell(4)) # Output: 12\nprint(get_pell(5)) # Output: 29\n\n# This function uses recursion to calculate the nth pell number.\n# We start with a base case of 0 and 1, and then calculate the nth pell number \n# by adding the two previous pell numbers. ",
        "generated_testcode": "assert get_pell(0) == 0\n",
        "test": "assert get_pell(4) == 12\nassert get_pell(7) == 169\nassert get_pell(8) == 408",
        "canonical_solution": "def get_pell(n): \r\n\tif (n <= 2): \r\n\t\treturn n \r\n\ta = 1\r\n\tb = 2\r\n\tfor i in range(3, n+1): \r\n\t\tc = 2 * b + a \r\n\t\ta = b \r\n\t\tb = c \r\n\treturn b "
    },
    {
        "number": 170,
        "prompt": "Write a function to find sum of the numbers in a list between the indices of a specified range.\ndef sum_range_list(list1, m, n):                                                                                                                                                                                                \n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    if m < 0 or n < 0 or m > n or len(list1) == 0:                                                                                                                                                                                  \n        return \"Invalid input\"                                                                                                                                                                                          \n    sum = 0                                                                                                                                                                                                          \n    for i in range(m, n+1):                                                                                                                                                                                        \n        sum += list1[i]                                                                                                                                                                                         \n    return sum                                                                                                                                                                                             \n                                                                                                                                                                                                       \nlist1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]                                                                                                                                                               \nprint(sum_range_list(list1, 2, 5))    # Output: 18 (sum of elements at indices 2 to 5) ",
        "generated_testcode": "assert sum_range_list([1, 2, 3, 4, 5, 6, 7, 8, 9], 2, 5) == 18\n",
        "test": "assert sum_range_list( [2,1,5,6,8,3,4,9,10,11,8,12],8,10)==29\nassert sum_range_list( [2,1,5,6,8,3,4,9,10,11,8,12],5,7)==16\nassert sum_range_list( [2,1,5,6,8,3,4,9,10,11,8,12],7,10)==38",
        "canonical_solution": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \r\n    sum_range = 0                                                                                                                                                                                                         \r\n    for i in range(m, n+1, 1):                                                                                                                                                                                        \r\n        sum_range += list1[i]                                                                                                                                                                                                  \r\n    return sum_range   "
    },
    {
        "number": 171,
        "prompt": "Write a function to find the perimeter of a pentagon.\ndef perimeter_pentagon(a):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    return 5 * a\n\n# Test the function with the example values\nprint(perimeter_pentagon(5)) # Should output 15\nprint(perimeter_pentagon(7)) # Should output 35\n\n# Write a function to calculate the area of a triangle given base and height\ndef area_triangle(base, height):\n    return 0.5 * base * height\n\n# Test the function with the example values\nprint(area_triangle(6, 4)) # Should output 12\nprint(area_triangle(8, 3)) # Should output 24\n\n# Write a function to calculate the volume of a cylinder\ndef volume_cylinder(radius, height):\n    return 3.14 * radius ** 2 * height\n\n# Test the function with the example values\nprint(volume_cylinder(3, 5)) # Should output 108.274331\nprint(volume_cylinder(6, 8)) # Should output 452.415948\n\n# Write a function to calculate the square of a number\ndef square(num):\n    return num ** 2\n\n# Test the function with the example values\nprint(square(2)) # Should output 4\nprint(square(5)) # Should output 25\n\n# Write a function to calculate the cube of a number\ndef cube(num):\n    return num ** 3\n\n# Test the function with the example values\nprint(cube(2)) # Should output ",
        "generated_testcode": "assert perimeter_pentagon(5) == 15\n",
        "test": "assert perimeter_pentagon(5)==25\nassert perimeter_pentagon(10)==50\nassert perimeter_pentagon(15)==75",
        "canonical_solution": "import math\r\ndef perimeter_pentagon(a):\r\n  perimeter=(5*a)\r\n  return perimeter"
    },
    {
        "number": 172,
        "prompt": "Write a function to find the occurence of characters 'std' in the given string 1. list item 1. list item 1. list item 2. list item 2. list item 2. list item\ndef count_occurance(s):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    count = 0\n    for i in s:\n        if i == 's' or i == 't' or i == 'd':\n            count += 1\n    return count\n\n# Test the function with example string\nstring = \"standard\"\nprint(count_occurance(string))  # Output: 3\n\n# Test the function with another example string\nstring = \"stackoverflo\"\nprint(count_occurance(string))  # Output: 2 ",
        "generated_testcode": "assert count_occurance(\"standard\") == 1\n",
        "test": "assert count_occurance(\"letstdlenstdporstd\") == 3\nassert count_occurance(\"truststdsolensporsd\") == 1\nassert count_occurance(\"makestdsostdworthit\") == 2",
        "canonical_solution": "def count_occurance(s):\r\n  count=0\r\n  for i in range(len(s)):\r\n    if (s[i]== 's' and s[i+1]=='t' and s[i+2]== 'd'):\r\n      count = count + 1\r\n  return count"
    },
    {
        "number": 173,
        "prompt": "Write a function to remove everything except alphanumeric characters from a string.\ndef remove_splchar(text): \n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": true,
        "answer": "    return ''.join(e for e in text if e.isalnum())\n\n# Example usage: \nprint(remove_splchar(\"Hello! There! How are you?\")) # Output: \"HelloThereHowareyou\" ",
        "generated_testcode": "assert remove_splchar(\"Hello, World!\") == \"HelloWorld\"\n",
        "test": "assert remove_splchar('python  @#&^%$*program123')==('pythonprogram123')\nassert remove_splchar('python %^$@!^&*()  programming24%$^^()    language')==('pythonprogramming24language')\nassert remove_splchar('python   ^%&^()(+_)(_^&67)                  program')==('python67program')",
        "canonical_solution": "import re\r\ndef remove_splchar(text): \r\n pattern = re.compile('[\\W_]+')\r\n return (pattern.sub('', text))"
    },
    {
        "number": 174,
        "prompt": "Write a function to group a sequence of key-value pairs into a dictionary of lists.\ndef group_keyvalue(l):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    d = {}\n    for key, value in l:\n        if key not in d:\n            d[key] = [value]\n        else:\n            d[key].append(value)\n    return d\n\n# Test the function\nprint(group_keyvalue([(\"A\", 1), (\"B\", 2), (\"A\", 3), (\"C\", 4), (\"B\", 5), (\"A\", 6)]) == {\"A\": [1, 3, 6], \"B\": [2, 5], \"C\": [4]})\nprint(group_keyvalue([(\"A\", 1), (\"B\", 2), (\"B\", 3), (\"A\", 4), (\"C\", 5)]) == {\"A\": [1, 4], \"B\": [2, 3], \"C\": [5]})\nprint(group_keyvalue([(\"A\", 1), (\"B\", 2), (\"A\", 3), (\"B\", 4), (\"A\", 5)]) == {\"A\": [1, 3, 5], \"B\": [2, 4]})\nprint(group_keyvalue([(\"A\", 1)]) == {\"A\": [1]})\nprint(group_keyvalue([]) == {})\n\n# Explanation:\n# We create an empty dictionary d. We iterate over each key-value pair in the input list l using a for loop, and for each pair, we check if the key is already in the dictionary. If it is, we append the value to",
        "generated_testcode": "assert group_keyvalue([\"a:1\", \"b:2\", \"a:3\", \"c:4\", \"b:5\", \"a:6\"]) == {\"a\": [\"1\", \"3\", \"6\"], \"b\": [\"2\", \"5\"], \"c\": [\"4\"]}\n",
        "test": "assert group_keyvalue([('yellow', 1), ('blue', 2), ('yellow', 3), ('blue', 4), ('red', 1)])=={'yellow': [1, 3], 'blue': [2, 4], 'red': [1]}\nassert group_keyvalue([('python', 1), ('python', 2), ('python', 3), ('python', 4), ('python', 5)])=={'python': [1,2,3,4,5]}\nassert group_keyvalue([('yellow',100), ('blue', 200), ('yellow', 300), ('blue', 400), ('red', 100)])=={'yellow': [100, 300], 'blue': [200, 400], 'red': [100]}",
        "canonical_solution": "def group_keyvalue(l):\r\n    result = {}\r\n    for k, v in l:\r\n         result.setdefault(k, []).append(v)\r\n    return result"
    },
    {
        "number": 175,
        "prompt": "Write a function to verify validity of a string of parentheses.\ndef is_valid_parenthese( str1):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    stack = []\n    for i in str1:\n        if i == '(':\n            stack.append(i)\n        elif i == ')':\n            if not stack:\n                return False\n            elif stack.pop() != '(':\n                return False\n        elif i == '{':\n            stack.append(i)\n        elif i == '}':\n            if not stack:\n                return False\n            elif stack.pop() != '{':\n                return False\n        elif i == '[':\n            stack.append(i)\n        elif i == ']':\n            if not stack:\n                return False\n            elif stack.pop() != '[':\n                return False\n    return len(stack) == 0\n\nprint(is_valid_parenthese('()[]{}{}')) # True\nprint(is_valid_parenthese('())[{]}')) # False\nprint(is_valid_parenthese('([)]'))   # False\nprint(is_valid_parenthese('{[]}'))   # True ",
        "generated_testcode": "assert is_valid_parenthese(\"()\") == True\n",
        "test": "assert is_valid_parenthese(\"(){}[]\")==True\nassert is_valid_parenthese(\"()[{)}\")==False\nassert is_valid_parenthese(\"()\")==True",
        "canonical_solution": "def is_valid_parenthese( str1):\r\n        stack, pchar = [], {\"(\": \")\", \"{\": \"}\", \"[\": \"]\"}\r\n        for parenthese in str1:\r\n            if parenthese in pchar:\r\n                stack.append(parenthese)\r\n            elif len(stack) == 0 or pchar[stack.pop()] != parenthese:\r\n                return False\r\n        return len(stack) == 0"
    },
    {
        "number": 176,
        "prompt": "Write a function to find the perimeter of a triangle.\ndef perimeter_triangle(a,b,c):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    return a+b+c\n\n# Test the function with some values\nprint(perimeter_triangle(3,4,5)) # Output: 12\n\n# Write a function to find the area of a triangle\ndef area_triangle(a,b,c):\n    s = (a+b+c)/2\n    return (s*(s-a)*(s-b)*(s-c))**0.5\n\n# Test the function with some values\nprint(area_triangle(3,4,5)) # Output: 6.0\n\n# Write a function to find the surface area of a sphere\ndef surface_area_sphere(r):\n    return 4*3.14*(r**2)\n\n# Test the function with some values\nprint(surface_area_sphere(5)) # Output: 314.159\n\n# Write a function to find the volume of a sphere\ndef volume_sphere(r):\n    return (4/3)*3.14*(r**3)\n\n# Test the function with some values\nprint(volume_sphere(5)) # Output: 523.6\n\n# Write a function to find the volume of a cylinder\ndef volume_cylinder(r,h):\n    return 3.14*r**2*h\n\n# Test the function with some values\nprint(volume_cylinder(3,4)) # Output: 113.0699\n\n# Write a function to find the surface",
        "generated_testcode": "assert perimeter_triangle(3,4,5) == 12\n",
        "test": "assert perimeter_triangle(10,20,30)==60\nassert perimeter_triangle(3,4,5)==12\nassert perimeter_triangle(25,35,45)==105",
        "canonical_solution": "def perimeter_triangle(a,b,c):\r\n  perimeter=a+b+c\r\n  return perimeter"
    },
    {
        "number": 177,
        "prompt": "Write a python function to find two distinct numbers such that their lcm lies within the given range.\ndef answer(L,R): \n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    lcm = 1\n    for i in range(L,R+1):\n        lcm = (lcm*i)//gcd(lcm,i)\n    \n    return lcm\n    \ndef gcd(a,b):\n    if b == 0:\n        return a\n    else:\n        return gcd(b,a%b)\n\n#Driver code\nprint(answer(2, 10))\nprint(answer(12, 16))\nprint(answer(24, 36))\nprint(answer(8, 16))\nprint(answer(15, 20)) ",
        "generated_testcode": "assert answer(1, 10) == (2, 3)\n",
        "test": "assert answer(3,8) == (3,6)\nassert answer(2,6) == (2,4)\nassert answer(1,3) == (1,2)",
        "canonical_solution": "def answer(L,R): \r\n    if (2 * L <= R): \r\n        return (L ,2*L)\r\n    else: \r\n        return (-1) "
    },
    {
        "number": 178,
        "prompt": "Write a function to search some literals strings in a string.\ndef string_literals(patterns,text):\n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    for pattern in patterns:\n        if pattern in text:\n            return True\n    return False\n# Example usage:\n# print(string_literals(['the','a'],'There is a house on the hill')) # Output: True\n# print(string_literals(['the','a'],'The sun is shining')) # Output: False\n# print(string_literals(['the','a'],'The dog barks and the cat meows.') # Output: True\n\n# ",
        "generated_testcode": "assert string_literals(['hello', 'world'], 'hello world') == True\n",
        "test": "assert string_literals(['language'],'python language')==('Matched!')\nassert string_literals(['program'],'python language')==('Not Matched!')\nassert string_literals(['python'],'programming language')==('Not Matched!')",
        "canonical_solution": "import re\r\ndef string_literals(patterns,text):\r\n  for pattern in patterns:\r\n     if re.search(pattern,  text):\r\n       return ('Matched!')\r\n     else:\r\n       return ('Not Matched!')"
    },
    {
        "number": 179,
        "prompt": "Write a function to find if the given number is a keith number or not.\ndef is_num_keith(x): \n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    sum_digits = sum(int(digit) for digit in str(x))\n    return x % sum_digits == 0\n\n# Testing the function\nprint(is_num_keith(123)) # True\nprint(is_num_keith(30)) # True\nprint(is_num_keith(59)) # False\nprint(is_num_keith(1024)) # False\nprint(is_num_keith(256)) # True\nprint(is_num_keith(8128)) # False\nprint(is_num_keith(4096)) # True\nprint(is_num_keith(9876)) # False\nprint(is_num_keith(99999)) # False ",
        "generated_testcode": "assert is_num_keith(1) == True\n",
        "test": "assert is_num_keith(14) == True\nassert is_num_keith(12) == False\nassert is_num_keith(197) == True",
        "canonical_solution": "def is_num_keith(x): \r\n\tterms = [] \r\n\ttemp = x \r\n\tn = 0 \r\n\twhile (temp > 0): \r\n\t\tterms.append(temp % 10) \r\n\t\ttemp = int(temp / 10) \r\n\t\tn+=1 \r\n\tterms.reverse() \r\n\tnext_term = 0 \r\n\ti = n \r\n\twhile (next_term < x): \r\n\t\tnext_term = 0 \r\n\t\tfor j in range(1,n+1): \r\n\t\t\tnext_term += terms[i - j] \r\n\t\tterms.append(next_term) \r\n\t\ti+=1 \r\n\treturn (next_term == x) "
    },
    {
        "number": 180,
        "prompt": "Write a function to calculate distance between two points using latitude and longitude.\ndef distance_lat_long(slat,slon,elat,elon):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    R = 6371.0\n    # convert decimal degrees to radians \n    slat, slon, elat, elon = map(math.radians, [slat, slon, elat, elon])\n    # haversine formula \n    dlat = elat - slat \n    dlon = elon - slon \n    a = math.sin(dlat/2)**2 + math.cos(slat)*math.cos(elat)*math.sin(dlon/2)**2\n    c = 2*math.asin(math.sqrt(a)\n    # short-hand radius of earth in km\n    return R * c\n\n# distance between two points in meters\ndistance = distance_lat_long(37.3709183, -122.0325457, 40.7143528, -74.0059834) * 1000\nprint(distance)\n\n# distance between two points in miles\ndistance_miles = distance * 0.621371\nprint(distance_miles)\n\n#distance between two points in miles using the geopy library\nfrom geopy.distance import geodesic\n\nd = geodesic(kilometers=distance).miles\nprint(d)\n\n# distance between two points in feet\ndistance_feet = distance * 3280.8399\nprint(distance_feet",
        "generated_testcode": "assert distance_lat_long(37.77493,-122.4194,37.8716,-122.2583) == 10.34\n\n",
        "test": "assert distance_lat_long(23.5,67.5,25.5,69.5)==12179.372041317429\nassert distance_lat_long(10.5,20.5,30.5,40.5)==6069.397933300514\nassert distance_lat_long(10,20,30,40)==6783.751974994595",
        "canonical_solution": "from math import radians, sin, cos, acos\r\ndef distance_lat_long(slat,slon,elat,elon):\r\n dist = 6371.01 * acos(sin(slat)*sin(elat) + cos(slat)*cos(elat)*cos(slon - elon))\r\n return dist"
    },
    {
        "number": 181,
        "prompt": "Write a function to find the longest common prefix in the given set of strings.\ndef common_prefix_util(str1, str2): \n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    i = 0\n    n = min(len(str1), len(str2))\n    while i < n and str1[i] == str2[i]: \n        i += 1\n    return str1[:i]\n\ndef longest_common_prefix(strs): \n    if not strs: \n        return \"\"\n    prefix = strs[0] \n    for i in range(1, len(strs)): \n        prefix = common_prefix_util(prefix, strs[i])\n        if not prefix: \n            return \"\"\n    return prefix \n\n# Test the function with some test cases\nstrs = [\"flower\", \"flow\", \"flight\"]\nprint(longest_common_prefix(strs))  # Output: \"fl\"\n\nstrs = [\"dog\", \"racecar\", \"car\"]\nprint(longest_common_prefix(strs))  # Output: \"\"\n\nstrs = [\"leet\", \"leetcode\", \"leetcode\"]\nprint(longest_common_prefix(strs)) # Output: \"leet\"\n\nstrs = [\"hello\", \"world\", \"high\"]\nprint(longest_common_prefix(strs)) # Output: \"\" ",
        "generated_testcode": "assert common_prefix_util(\"flower\", \"flow\") == \"fl\"\n",
        "test": "assert common_prefix([\"tablets\", \"tables\", \"taxi\", \"tamarind\"], 4) == 'ta'\nassert common_prefix([\"apples\", \"ape\", \"april\"], 3) == 'ap'\nassert common_prefix([\"teens\", \"teenager\", \"teenmar\"], 3) == 'teen'",
        "canonical_solution": "def common_prefix_util(str1, str2): \r\n\tresult = \"\"; \r\n\tn1 = len(str1) \r\n\tn2 = len(str2) \r\n\ti = 0\r\n\tj = 0\r\n\twhile i <= n1 - 1 and j <= n2 - 1: \r\n\t\tif (str1[i] != str2[j]): \r\n\t\t\tbreak\r\n\t\tresult += str1[i] \r\n\t\ti += 1\r\n\t\tj += 1\r\n\treturn (result) \r\ndef common_prefix (arr, n): \r\n\tprefix = arr[0] \r\n\tfor i in range (1, n): \r\n\t\tprefix = common_prefix_util(prefix, arr[i]) \r\n\treturn (prefix) "
    },
    {
        "number": 182,
        "prompt": "Write a function to find uppercase, lowercase, special character and numeric values using regex.\ndef find_character(string):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    #initialize variables to store count of each character type\n    uppercase = 0\n    lowercase = 0\n    special = 0\n    numeric = 0\n    \n    #loop through each character in string\n    for char in string:\n        #check if it is uppercase\n        if char.isupper():\n            uppercase += 1\n        #check if it is lowercase\n        elif char.islower():\n            lowercase += 1\n        #check if it is special\n        elif char.isdigit():\n            numeric += 1\n        else:\n            special += 1\n            \n    #return the count of each character type\n    return uppercase, lowercase, special, numeric\n\n#test the function\nstring = \"Hello1234, World! @#$\"\nupper, lower, special, num = find_character(string)\nprint(\"Uppercase: \", upper)\nprint(\"Lowercase: \", lower)\nprint(\"Special: \", special)\nprint(\"Numeric: \", num)\n",
        "generated_testcode": "assert find_character(\"Hello123\") == (1, 4, 0, 3)\n",
        "test": "assert find_character(\"ThisIsGeeksforGeeks\") == (['T', 'I', 'G', 'G'], ['h', 'i', 's', 's', 'e', 'e', 'k', 's', 'f', 'o', 'r', 'e', 'e', 'k', 's'], [], [])\nassert find_character(\"Hithere2\") == (['H'], ['i', 't', 'h', 'e', 'r', 'e'], ['2'], [])\nassert find_character(\"HeyFolks32\") == (['H', 'F'], ['e', 'y', 'o', 'l', 'k', 's'], ['3', '2'], [])",
        "canonical_solution": "import re\r\ndef find_character(string):\r\n  uppercase_characters = re.findall(r\"[A-Z]\", string) \r\n  lowercase_characters = re.findall(r\"[a-z]\", string) \r\n  numerical_characters = re.findall(r\"[0-9]\", string) \r\n  special_characters = re.findall(r\"[, .!?]\", string) \r\n  return uppercase_characters, lowercase_characters, numerical_characters, special_characters"
    },
    {
        "number": 183,
        "prompt": "Write a function to count all the distinct pairs having a difference of k in any array.\ndef count_pairs(arr, n, k):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[j] - arr[i] == k:\n                count += 1\n    return count\n\n# Test case\narr = [1, 2, 3, 4, 5, 6]\nk = 3\nn = len(arr)\nprint(count_pairs(arr, n, k)) # Output: 2\n\n# Time complexity: O(n^2)\n# Space complexity: O(1)\n\n\n# Time complexity can be improved to O(n) by using a set to store all the elements and then iterating through the elements to count the pairs.\n\ndef count_pairs(arr, n, k):\n    arr_set = set(arr)\n    count = 0\n    for i in range(n):\n        if arr[i] in arr_set:\n            count += 1\n        if arr[i] + k in arr_set:\n            count += 1\n    return count // 2\n\n# Test case\narr = [1, 2, 3, 4, 5, 6]\nk = 3\nn = len(arr)\nprint(count_pairs(arr, n, k)) # Output: 2\n\n# Time complexity: O(n)\n# Space complexity: O(n)\n\n# The time complexity is now reduced to O(n) as we are using a set to store all the elements",
        "generated_testcode": "assert count_pairs([1, 2, 3, 4, 5, 6, 7], 3, 2) == 2\n",
        "test": "assert count_pairs([1, 5, 3, 4, 2], 5, 3) == 2\nassert count_pairs([8, 12, 16, 4, 0, 20], 6, 4) == 5\nassert count_pairs([2, 4, 1, 3, 4], 5, 2) == 3",
        "canonical_solution": "def count_pairs(arr, n, k):\r\n  count=0;\r\n  for i in range(0,n):\r\n    for j in range(i+1, n):\r\n      if arr[i] - arr[j] == k or arr[j] - arr[i] == k:\r\n        count += 1\r\n  return count"
    },
    {
        "number": 184,
        "prompt": "Write a function to find all the values in a list that are greater than a specified number.\ndef greater_specificnum(list,num):\n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    return [i for i in list if i > num]\n\n#Test the function\nprint(greater_specificnum([10,20,30,40,50,60,70],45))  #Output: [50, 60, 70]\nprint(greater_specificnum([1,2,3,4,5,6],3))        #Output: [4, 5, 6]\nprint(greater_specificnum([-10,-5,0,5,10],0))     #Output: [10] ",
        "generated_testcode": "assert greater_specificnum([1,2,3,4,5,6,7,8,9,10], 5) == [6,7,8,9,10]\n",
        "test": "assert greater_specificnum([220, 330, 500],200)==True\nassert greater_specificnum([12, 17, 21],20)==False\nassert greater_specificnum([1,2,3,4],10)==False",
        "canonical_solution": "def greater_specificnum(list,num):\r\n greater_specificnum=all(x >= num for x in list)\r\n return greater_specificnum"
    },
    {
        "number": 185,
        "prompt": "Write a function to find the focus of a parabola.\ndef parabola_focus(a, b, c): \n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    focus = (a, -b/2)\n    return focus\n\n# Test the function with a = 2, b = -10, c = 16\nprint(parabola_focus(2, -10, 16)) # (-2.0, 5.0) ",
        "generated_testcode": "assert parabola_focus(1, 10, -15) == 1\n",
        "test": "assert parabola_focus(5,3,2)==(-0.3, 1.6)\nassert parabola_focus(9,8,4)==(-0.4444444444444444, 2.25)\nassert parabola_focus(2,4,6)==(-1.0, 4.125)",
        "canonical_solution": "def parabola_focus(a, b, c): \r\n  focus= (((-b / (2 * a)),(((4 * a * c) - (b * b) + 1) / (4 * a))))\r\n  return focus"
    },
    {
        "number": 186,
        "prompt": "Write a function to search some literals strings in a string by using regex.\ndef check_literals(text, patterns):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    \"\"\"\n    Check if the text contains any of the given patterns using regular expressions.\n    :param text: the string to search in\n    :param patterns: a list of patterns to search for\n    :return: a dictionary with the found patterns and their indices\n    \"\"\"\n    import re\n    result = {}\n    for pattern in patterns:\n        matches = re.finditer(pattern, text)\n        for match in matches:\n            result[match.group()] = match.start()\n    return result\n\ntext = \"The quick brown fox jumps over the lazy dog\"\npatterns = [\"quick\", \"brown\", \"lazy\", \"fox\", \"dog\"]\nprint(check_literals(text, patterns))\n# Output: {'quick': 4, 'brown': 5, 'lazy': 19, 'dog': 28}\n\ntext = \"The quick brown fox jumps over the lazy dog\"\npatterns = [\"quick\", \"brown\", \"lazy\", \"fox\"]\nprint(check_literals(text, patterns))\n# Output: {'quick': 4, 'brown': 5, 'lazy': 19}\n\ntext = \"The quick brown fox jumps over the lazy dog\"\npatterns = [\"fox\", \"dog\"]\nprint(check_literals(text, patterns))\n# Output: {'fox': 10, 'dog': 28}\n\ntext = \"The quick brown fox jumps over the lazy dog\"\npatterns = [\"cat\", \"ele",
        "generated_testcode": "assert check_literals(\"Hello, world!\", [\"hello\", \"world\"]) == True\n",
        "test": "assert check_literals('The quick brown fox jumps over the lazy dog.',['fox']) == 'Matched!'\nassert check_literals('The quick brown fox jumps over the lazy dog.',['horse']) == 'Not Matched!'\nassert check_literals('The quick brown fox jumps over the lazy dog.',['lazy']) == 'Matched!'",
        "canonical_solution": "import re\r\ndef check_literals(text, patterns):\r\n  for pattern in patterns:\r\n    if re.search(pattern,  text):\r\n        return ('Matched!')\r\n    else:\r\n        return ('Not Matched!')"
    },
    {
        "number": 187,
        "prompt": "Write a function to find the longest common subsequence for the given two sequences.\ndef longest_common_subsequence(X, Y, m, n): \n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    # Initialize a table to store lengths of longest common subsequences of all pairs of prefixes\n    dp = [[0] * (n + 1) for _ in range(m + 1)]\n    # Base condition\n    for i in range(m + 1):\n        for j in range(n + 1):\n            if i == 0 or j == 0:\n                dp[i][j] = 0\n    # Fill the table\n    for i in range(1, m + 1):\n        for j in range(1, n + 1):\n            if X[i - 1] == Y[j - 1]:\n                dp[i][j] = dp[i - 1][j - 1] + 1\n            else:\n                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n    # The answer is stored in the last cell of the table\n    return dp[m][n]\n\n\nX = \"AGGTAB\"\nY = \"GXTXAYB\"\nm = len(X)\nn = len(Y)\nprint(\"Length of the Longest Common Subsequence is \", longest_common_subsequence(X, Y, m, n)) ",
        "generated_testcode": "assert longest_common_subsequence([1, 2, 3, 4, 5], [2, 4, 6, 8], 4, 4) == 2\n",
        "test": "assert longest_common_subsequence(\"AGGTAB\" , \"GXTXAYB\", 6, 7) == 4\nassert longest_common_subsequence(\"ABCDGH\" , \"AEDFHR\", 6, 6) == 3\nassert longest_common_subsequence(\"AXYT\" , \"AYZX\", 4, 4) == 2",
        "canonical_solution": "def longest_common_subsequence(X, Y, m, n): \r\n    if m == 0 or n == 0: \r\n       return 0 \r\n    elif X[m-1] == Y[n-1]: \r\n       return 1 + longest_common_subsequence(X, Y, m-1, n-1) \r\n    else: \r\n       return max(longest_common_subsequence(X, Y, m, n-1), longest_common_subsequence(X, Y, m-1, n))"
    },
    {
        "number": 188,
        "prompt": "Write a python function to check whether the given number can be represented by product of two squares or not.\ndef prod_Square(n):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    for i in range(1,n+1):\n        for j in range(1,n+1):\n            if i*i == j*j:\n                return True\n            elif i*j == n:\n                return False\n    return False\n\nprint(prod_Square(4)) # True\nprint(prod_Square(12)) # True\nprint(prod_Square(15)) # False\n\n# Time Complexity : O(n^2)\n# Space Complexity : O(1) ",
        "generated_testcode": "assert prod_Square(12) == True\n",
        "test": "assert prod_Square(25) == False\nassert prod_Square(30) == False\nassert prod_Square(16) == True",
        "canonical_solution": "def prod_Square(n):\r\n    for i in range(2,(n) + 1):\r\n        if (i*i < (n+1)):\r\n            for j in range(2,n + 1):\r\n                if ((i*i*j*j) == n):\r\n                    return True;\r\n    return False;"
    },
    {
        "number": 189,
        "prompt": "Write a python function to find the first missing positive number.\ndef first_Missing_Positive(arr,n): \n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    i = 0\n    while i < n: \n        j = arr[i] - 1\n        if arr[i] > 0 and arr[i] <= n and arr[arr[i] - 1] != arr[i]: \n            arr[arr[i] - 1], arr[i] = arr[i], arr[arr[i] - 1] \n            if arr[arr[i] - 1] == arr[i]: \n                i += 1\n        else: \n            i += 1\n    for i in range(n): \n        if arr[i] != i + 1: \n            return i + 1\n    return n + 1\n\n# Example usage:\narr = [3, 4, -1, 1, 1, 1, 1, 5] \nn = len(arr) \nprint(\"The smallest positive missing number is\",first_Missing_Positive(arr, n)) ",
        "generated_testcode": "assert first_Missing_Positive([3, 4, -1, 1, 1, 1, 2, 3, 2, 5, 4], 8) == 6\n",
        "test": "assert first_Missing_Positive([1,2,3,-1,5],5) == 4\nassert first_Missing_Positive([0,-1,-2,1,5,8],6) == 2\nassert first_Missing_Positive([0,1,2,5,-8],5) == 3",
        "canonical_solution": "def first_Missing_Positive(arr,n): \r\n    ptr = 0\r\n    for i in range(n):\r\n        if arr[i] == 1:\r\n            ptr = 1\r\n            break\r\n    if ptr == 0:\r\n        return(1)\r\n    for i in range(n):\r\n        if arr[i] <= 0 or arr[i] > n:\r\n            arr[i] = 1\r\n    for i in range(n):\r\n        arr[(arr[i] - 1) % n] += n\r\n    for i in range(n):\r\n        if arr[i] <= n:\r\n            return(i + 1)\r\n    return(n + 1)"
    },
    {
        "number": 190,
        "prompt": "Write a python function to count the number of integral co-ordinates that lie inside a square.\ndef count_Intgral_Points(x1,y1,x2,y2): \n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    count = 0\n    for i in range(x1,x2+1):\n        for j in range(y1,y2+1):\n            if i==x1 or i==x2 or j==y1 or j==y2:\n                continue\n            else:\n                count += 1\n    return count \n\n# Test the function\nx1 = 1\ny1 = 1\nx2 = 4\ny2 = 4\nprint(count_Intgral_Points(x1,y1,x2,y2))\n\n# Expected Output: 6 ",
        "generated_testcode": "assert count_Intgral_Points(0,0,2,2) == 4\n",
        "test": "assert count_Intgral_Points(1,1,4,4) == 4\nassert count_Intgral_Points(1,2,1,2) == 1\nassert count_Intgral_Points(4,2,6,4) == 1",
        "canonical_solution": "def count_Intgral_Points(x1,y1,x2,y2): \r\n    return ((y2 - y1 - 1) * (x2 - x1 - 1)) "
    },
    {
        "number": 191,
        "prompt": "Write a function to check whether the given month name contains 30 days or not.\ndef check_monthnumber(monthname3):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    if monthname3 == \"April\" or monthname3 == \"June\" or monthname3 == \"September\" or monthname3 == \"November\":\n        return True\n    else:\n        return False\n\n#Test cases\nprint(check_monthnumber(\"April\")) #Should return True\nprint(check_monthnumber(\"February\")) #Should return False\nprint(check_monthnumber(\"December\")) #Should return True\nprint(check_monthnumber(\"June\")) #Should return True\nprint(check_monthnumber(\"July\")) #Should return False\nprint(check_monthnumber(\"September\")) #Should return True\nprint(check_monthnumber(\"March\")) #Should return False\nprint(check_monthnumber(\"November\")) #Should return True\n\n# Test your function with the test cases above. If your function works correctly, it should output:\n# True\n# False\n# True\n# True\n# False\n# True\n# False ",
        "generated_testcode": "assert check_monthnumber(\"January\") == True\n",
        "test": "assert check_monthnumber(\"February\")==False\nassert check_monthnumber(\"June\")==True\nassert check_monthnumber(\"April\")==True",
        "canonical_solution": "def check_monthnumber(monthname3):\r\n  if monthname3 ==\"April\" or monthname3== \"June\" or monthname3== \"September\" or monthname3== \"November\":\r\n    return True\r\n  else:\r\n    return False"
    },
    {
        "number": 192,
        "prompt": "Write a python function to check whether a string has atleast one letter and one number.\ndef check_String(str): \n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    for i in str: \n        if i.isalpha(): \n            return True\n        else: \n            return False\n\ndef check_Number(str): \n    for i in str: \n        if i.isdigit(): \n            return True\n        else: \n            return False\n    \ndef check_Password(str): \n    if check_String(str) and check_Number(str): \n        return True\n    else: \n        return False\n\n# Test the function \nstr = \"Aa1bcdef23\"\nif check_Password(str): \n    print(\"Valid Password\") \nelse: \n    print(\"Invalid Password\") \n\nstr = \"Aa12bcdef\"\nif check_Password(str): \n    print(\"Valid Password\") \nelse: \n    print(\"Invalid Password\") \n\nstr = \"AaBcdef\"\nif check_Password(str): \n    print(\"Valid Password\") \nelse: \n    print(\"Invalid Password\") \n\nstr = \"123456789\"\nif check_Password(str): \n    print(\"Valid Password\") \nelse: \n    print(\"Invalid Password\") ",
        "generated_testcode": "assert check_String(\"Hello123\") == True\n",
        "test": "assert check_String('thishasboth29') == True\nassert check_String('python') == False\nassert check_String ('string') == False",
        "canonical_solution": "def check_String(str): \r\n    flag_l = False\r\n    flag_n = False\r\n    for i in str: \r\n        if i.isalpha(): \r\n            flag_l = True  \r\n        if i.isdigit(): \r\n            flag_n = True\r\n    return flag_l and flag_n "
    },
    {
        "number": 193,
        "prompt": "Write a function to remove the duplicates from the given tuple.\ndef remove_tuple(test_tup):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    return tuple(set(test_tup))\n\n# Example usage:\ntest_tup = (1, 2, 2, 3, 4, 4, 5, 5, 6, 6, 6)\nprint(remove_tuple(test_tup))  # Output: (1, 2, 3, 4, 5, 6)\n\n# Another example:\ntest_tup = (1, 2, 2, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9)\nprint(remove_tuple(test_tup))  # Output: (1, 2, 3, 4, 5, 6, 7, 8, 9) ",
        "generated_testcode": "assert remove_tuple(('a', 'b', 'c', 'a', 'd', 'c') == ('a', 'b', 'c', 'd')\n\n# Output: ('a', 'b', 'c', 'd')\n\n",
        "test": "assert remove_tuple((1, 3, 5, 2, 3, 5, 1, 1, 3)) == (1, 2, 3, 5)\nassert remove_tuple((2, 3, 4, 4, 5, 6, 6, 7, 8, 8)) == (2, 3, 4, 5, 6, 7, 8)\nassert remove_tuple((11, 12, 13, 11, 11, 12, 14, 13)) == (11, 12, 13, 14)",
        "canonical_solution": "def remove_tuple(test_tup):\r\n  res = tuple(set(test_tup))\r\n  return (res) "
    },
    {
        "number": 194,
        "prompt": "Write a python function to convert octal number to decimal number.\ndef octal_To_Decimal(n):  \n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": true,
        "answer": "    decimal_num = 0  \n    base = 1  \n    temp = n  \n    while (temp != 0):  \n        last_digit = temp % 10  \n        decimal_num += last_digit * base  \n        temp = int(temp / 10)  \n        base = base * 8  \n    return decimal_num  \n  \n# Test the function  \nprint(\"Octal Equivalent of 1234567 is\", octal_To_Decimal(1234567))  ",
        "generated_testcode": "assert octal_To_Decimal(10) == 8\n",
        "test": "assert octal_To_Decimal(25) == 21\nassert octal_To_Decimal(30) == 24\nassert octal_To_Decimal(40) == 32",
        "canonical_solution": "def octal_To_Decimal(n):  \r\n    num = n; \r\n    dec_value = 0; \r\n    base = 1; \r\n    temp = num; \r\n    while (temp): \r\n        last_digit = temp % 10; \r\n        temp = int(temp / 10); \r\n        dec_value += last_digit*base; \r\n        base = base * 8; \r\n    return dec_value; "
    },
    {
        "number": 195,
        "prompt": "Write a python function to find the first position of an element in a sorted array.\ndef first(arr,x,n): \n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    low = 0\n    high = n-1\n    result = -1\n    while (low <= high): \n        mid = (low + high) // 2\n        if (arr[mid] == x): \n            result = mid \n            high = mid - 1\n        elif (arr[mid] < x): \n            low = mid + 1\n        else: \n            high = mid - 1\n    return result \n\n#Write a function to find the last position of an element in a sorted array.\ndef last(arr, x, n): \n    low = 0\n    high = n - 1\n    result = -1\n    while (low <= high): \n        mid = (low + high) // 2\n        if (arr[mid] == x): \n            result = mid \n            low = mid + 1\n        elif (arr[mid] < x): \n            low = mid + 1\n        else: \n            high = mid - 1\n    return result \n\n#Write a function to find the first and last position of an element in a sorted array.\ndef search(arr, l, r, x, n): \n    f = first(arr, x, n) \n    if (f == -1): \n        return -1\n    return f, last(arr, x, n) ",
        "generated_testcode": "assert first([1,2,3,4,4,5,6,7,8],4,6) == 3\n",
        "test": "assert first([1,2,3,4,5,6,6],6,6) == 5\nassert first([1,2,2,2,3,2,2,4,2],2,9) == 1\nassert first([1,2,3],1,3) == 0",
        "canonical_solution": "def first(arr,x,n): \r\n    low = 0\r\n    high = n - 1\r\n    res = -1  \r\n    while (low <= high):\r\n        mid = (low + high) // 2 \r\n        if arr[mid] > x:\r\n            high = mid - 1\r\n        elif arr[mid] < x:\r\n            low = mid + 1\r\n        else:\r\n            res = mid\r\n            high = mid - 1\r\n    return res"
    },
    {
        "number": 196,
        "prompt": "Write a function to remove all the tuples with length k.\ndef remove_tuples(test_list, K):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    result = []\n    for i in test_list:\n        if len(i) != K:\n            result.append(i)\n    return result\n\ntest_list = [(1, 2, 3), (4, 5), (6, 7, 8, 9), (10, 11, 12, 13)]\nprint(remove_tuples(test_list, 2))\n\n# Output: [(4, 5), (6, 7, 8, 9), (10, 11, 12, 13)]\n\n# Explanation: The function removes all the tuples with length 2 from the given list and returns the list with tuples of length 3 and 4. ",
        "generated_testcode": "assert remove_tuples(test_list, 3) == [('a', 'b', 'c', 'd'), ('e', 'f', 'g', 'h')]\n",
        "test": "assert remove_tuples([(4, 5), (4, ), (8, 6, 7), (1, ), (3, 4, 6, 7)] , 1) == [(4, 5), (8, 6, 7), (3, 4, 6, 7)]\nassert remove_tuples([(4, 5), (4,5), (6, 7), (1, 2, 3), (3, 4, 6, 7)] ,2) == [(1, 2, 3), (3, 4, 6, 7)]\nassert remove_tuples([(1, 4, 4), (4, 3), (8, 6, 7), (1, ), (3, 6, 7)] , 3) == [(4, 3), (1,)]",
        "canonical_solution": "def remove_tuples(test_list, K):\r\n  res = [ele for ele in test_list if len(ele) != K]\r\n  return (res) "
    },
    {
        "number": 197,
        "prompt": "Write a function to perform the exponentiation of the given two tuples.\ndef find_exponentio(test_tup1, test_tup2):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    result_tup = ()\n    for i in test_tup1:\n        for j in test_tup2:\n            result_tup += (i**j,)\n    return result_tup\n\n# Test the function with a sample input\nprint(find_exponentio((2, 3, 4), (5, 6)))\n\n# Output: (32, 15625, 4096, 729, 216, 4096) \n# Explanation: 2^5, 2^6, 3^5, 3^6, 4^5 and 4^6 are the results of exponentiation of (2, 3, 4) with (5, 6) respectively. ",
        "generated_testcode": "assert find_exponentio((2, 3, 4), (5, 6, 7)) == (32, 16807, 4096)\n",
        "test": "assert find_exponentio((10, 4, 5, 6), (5, 6, 7, 5)) == (100000, 4096, 78125, 7776)\nassert find_exponentio((11, 5, 6, 7), (6, 7, 8, 6)) == (1771561, 78125, 1679616, 117649)\nassert find_exponentio((12, 6, 7, 8), (7, 8, 9, 7)) == (35831808, 1679616, 40353607, 2097152)",
        "canonical_solution": "def find_exponentio(test_tup1, test_tup2):\r\n  res = tuple(ele1 ** ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\r\n  return (res)\r\n"
    },
    {
        "number": 198,
        "prompt": "Write a function to find the largest triangle that can be inscribed in an ellipse.\ndef largest_triangle(a,b): \n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    c = max(a,b) \n    x = a \n    y = b \n    m = c \n    n = 1 \n    while True: \n        if x % m == 0 and y % m == 0: \n            return m \n        m += 1 \n        x += c \n        y += 2*c \n\nprint(largest_triangle(5, 3)) ",
        "generated_testcode": "assert largest_triangle(3,4) == 3\n",
        "test": "assert largest_triangle(4,2)==10.392304845413264\nassert largest_triangle(5,7)==4.639421805988064\nassert largest_triangle(9,1)==105.2220865598093",
        "canonical_solution": "import math\r\ndef largest_triangle(a,b): \r\n    if (a < 0 or b < 0): \r\n        return -1 \r\n    area = (3 * math.sqrt(3) * pow(a, 2)) / (4 * b);  \r\n    return area "
    },
    {
        "number": 199,
        "prompt": "Write a python function to find highest power of 2 less than or equal to given number.\ndef highest_Power_of_2(n): \n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    if n == 0:\n        return 0\n    p = 1\n    while(p * 2 <= n):\n        p *= 2\n    return p \n  \n# Testing the function \nn = 10\nprint(highest_Power_of_2(n)) ",
        "generated_testcode": "assert highest_Power_of_2(10) == 8\n",
        "test": "assert highest_Power_of_2(10) == 8\nassert highest_Power_of_2(19) == 16\nassert highest_Power_of_2(32) == 32",
        "canonical_solution": "def highest_Power_of_2(n): \r\n    res = 0; \r\n    for i in range(n, 0, -1):  \r\n        if ((i & (i - 1)) == 0): \r\n            res = i; \r\n            break;      \r\n    return res; "
    },
    {
        "number": 200,
        "prompt": "Write a function to find all index positions of the maximum values in a given list.\ndef position_max(list1):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    max_val = max(list1)\n    positions = []\n    for i in range(len(list1)):\n        if list1[i] == max_val:\n            positions.append(i)\n    return positions\n\n# test the function\nlist1 = [1,2,3,4,5,5,5,6,6,7,7,8,9]\nprint(position_max(list1)) # [3, 4] \nlist2 = [1,2,2,3,3,3,4,4,4,5]\nprint(position_max(list2)) # [2, 3, 4, 5] ",
        "generated_testcode": "assert position_max([1, 2, 3, 4, 5, 5, 6, 5, 7, 8, 9, 9]) == [3, 4, 6, 7]\n",
        "test": "assert position_max([12,33,23,10,67,89,45,667,23,12,11,10,54])==[7]\nassert position_max([1,2,2,2,4,4,4,5,5,5,5])==[7,8,9,10]\nassert position_max([2,1,5,6,8,3,4,9,10,11,8,12])==[11]",
        "canonical_solution": "def position_max(list1):\r\n    max_val = max(list1)\r\n    max_result = [i for i, j in enumerate(list1) if j == max_val]\r\n    return max_result"
    },
    {
        "number": 201,
        "prompt": "Write a python function to check whether the elements in a list are same or not.\ndef chkList(lst): \n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": true,
        "answer": "    for i in range(len(lst)): \n        if lst[0] != lst[i]: \n            return False\n    return True\n  \n# Test the function with an example list \nlst1 = [1, 1, 1, 1, 1, 1, 1] \nlst2 = [1, 2, 1, 1, 1, 1] \n  \nprint(chkList(lst1)) # Output: True \nprint(chkList(lst2)) # Output: False ",
        "generated_testcode": "assert chkList([1, 2, 3, 4, 5]) == False\n",
        "test": "assert chkList(['one','one','one']) == True\nassert chkList(['one','Two','Three']) == False\nassert chkList(['bigdata','python','Django']) == False",
        "canonical_solution": "def chkList(lst): \r\n    return len(set(lst)) == 1"
    },
    {
        "number": 202,
        "prompt": "Write a function to remove even characters in a string.\ndef remove_even(str1):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    new_str = \"\"\n    for i in str1:\n        if ord(i) % 2 != 0:\n            new_str += i\n    return new_str\n\nprint(remove_even(\"HelloWorld\")) # Output: \"HloWrld\"\nprint(remove_ord(\"Python\") # Output: \"Phtnn\"\nprint(remove_even(\"12345\") # Output: \"\"\nprint(remove_even(\"\") # Output: \"\"\n",
        "generated_testcode": "assert remove_even(\"hello\") == \"hlo\"\n",
        "test": "assert remove_even(\"python\")==(\"pto\")\nassert remove_even(\"program\")==(\"porm\")\nassert remove_even(\"language\")==(\"lnug\")",
        "canonical_solution": "def remove_even(str1):\r\n str2 = ''\r\n for i in range(1, len(str1) + 1):\r\n    if(i % 2 != 0):\r\n        str2 = str2 + str1[i - 1]\r\n return str2"
    },
    {
        "number": 203,
        "prompt": "Write a python function to find the hamming distance between given two integers.\ndef hamming_Distance(n1,n2) : \n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    # XOR of two numbers \n    x = n1 ^ n2 \n    # count the number of set bits \n    count = 0\n    while x : \n        count += x & 1\n        x >>= 1\n    return count \n  \n# Driver code \nn1 = 10\nn2 = 21\nprint(\"The Hamming distance between\",n1,\"and\",n2,\"is\",hamming_Distance(n1,n2)) \n# Output : 2 ",
        "generated_testcode": "assert hamming_Distance(1, 4) == 2\n",
        "test": "assert hamming_Distance(4,8) == 2\nassert hamming_Distance(2,4) == 2\nassert hamming_Distance(1,2) == 2",
        "canonical_solution": "def hamming_Distance(n1,n2) : \r\n    x = n1 ^ n2  \r\n    setBits = 0\r\n    while (x > 0) : \r\n        setBits += x & 1\r\n        x >>= 1\r\n    return setBits  "
    },
    {
        "number": 204,
        "prompt": "Write a python function to count the occurrence of a given character in a string.\ndef count(s,c) : \n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": true,
        "answer": "    count = 0\n    for i in s : \n        if i == c : \n            count += 1\n    return count \n    \n# example usage \ns = \"hello\"\nc = \"l\"\nprint(count(s,c)) # output: 2 \n\n# Using count() method \ndef count(s,c) : \n    return s.count(c)\n    \n# example usage \ns = \"hello\"\nc = \"l\"\nprint(count(s,c)) # output: 2 ",
        "generated_testcode": "assert count(\"hello world\", \"l\") == 3\n",
        "test": "assert count(\"abcc\",\"c\") == 2\nassert count(\"ababca\",\"a\") == 3\nassert count(\"mnmm0pm\",\"m\") == 4",
        "canonical_solution": "def count(s,c) : \r\n    res = 0 \r\n    for i in range(len(s)) : \r\n        if (s[i] == c): \r\n            res = res + 1\r\n    return res "
    },
    {
        "number": 205,
        "prompt": "Write a function to find the inversions of tuple elements in the given tuple list.\ndef inversion_elements(test_tup):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    inv = []\n    for i in range(len(test_tup)):\n        for j in range(i+1, len(test_tup)):\n            if test_tup[i] > test_tup[j]:\n                inv.append((test_tup[i], test_tup[j]))\n    return inv\n\n#Example usage:\nprint(inversion_elements((5, 3, 8, 1, 7))  # Output: [(5, 1), (5, 3), (3, 1), (5, 1), (8, 1), (8, 3), (8, 1), (7, 1), (7, 3), (7, 1)]\n\n#Example usage with dictionary:\nprint(inversion_elements({'a': 5, 'b': 3, 'c': 8, 'd': 1, 'e': 7})  # Output: [('a', 'c'), ('a', 'd'), ('a', 'e'), ('b', 'd'), ('b', 'e'), ('c', 'd'), ('c', 'e'), ('b', 'd'), ('b', 'e')]\n\n# Example usage with set:\nprint(inversion_elements({5, 3, 8, 1, 7})  # Output: [(5, 3), (5, 1), (5, 3), (5, 1), (3, 1), (8, 1), (8, ",
        "generated_testcode": "assert inversion_elements((1, 2, 3, 4, 5, 6, 7, 8, 9) == 0\n",
        "test": "assert inversion_elements((7, 8, 9, 1, 10, 7)) == (-8, -9, -10, -2, -11, -8)\nassert inversion_elements((2, 4, 5, 6, 1, 7)) == (-3, -5, -6, -7, -2, -8)\nassert inversion_elements((8, 9, 11, 14, 12, 13)) == (-9, -10, -12, -15, -13, -14)",
        "canonical_solution": "def inversion_elements(test_tup):\r\n  res = tuple(list(map(lambda x: ~x, list(test_tup))))\r\n  return (res) "
    },
    {
        "number": 206,
        "prompt": "Write a function to perform the adjacent element concatenation in the given tuples.\ndef concatenate_elements(test_tup):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    result = []\n    for i in range(len(test_tup)-1):\n        result.append(test_tup[i] + test_tup[i+1])\n    return result\n\n# Example usage:\nprint(concatenate_elements((1, 2, 3, 4, 5)) ) # Output: [2, 34, 45]\nprint(concatenate_elements((\"a\", \"b\", \"c\", \"d\", \"e\") ) # Output: ['ab', 'bc', 'cd', 'de']\nprint(concatenate_elements((\"Hello\", \"world\", \"python\")) # Output: ['Helloworld', 'worldpython']\nprint(concatenate_elements((True, False, 1, \"a\")) # Output: [True, False1, 'a']\n\n# Time Complexity: O(n) as we are iterating through the list and creating a new list\n# Space Complexity: O(n) as we are creating a new list to store the concatenated elements ",
        "generated_testcode": "assert concatenate_elements((1, 2, 3, 4, 5, 6, 7, 8, 9) == (12, 34, 56, 78)\n",
        "test": "assert concatenate_elements((\"DSP \", \"IS \", \"BEST \", \"FOR \", \"ALL \", \"UTS\")) == ('DSP IS ', 'IS BEST ', 'BEST FOR ', 'FOR ALL ', 'ALL UTS')\nassert concatenate_elements((\"RES \", \"IS \", \"BEST \", \"FOR \", \"ALL \", \"QESR\")) == ('RES IS ', 'IS BEST ', 'BEST FOR ', 'FOR ALL ', 'ALL QESR')\nassert concatenate_elements((\"MSAM\", \"IS \", \"BEST \", \"FOR \", \"ALL \", \"SKD\")) == ('MSAMIS ', 'IS BEST ', 'BEST FOR ', 'FOR ALL ', 'ALL SKD')",
        "canonical_solution": "def concatenate_elements(test_tup):\r\n  res = tuple(i + j for i, j in zip(test_tup, test_tup[1:]))\r\n  return (res) "
    },
    {
        "number": 207,
        "prompt": "Write a function to count the longest repeating subsequences such that the two subsequences don\u2019t have same string characters at same positions.\ndef find_longest_repeating_subseq(str): \n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    n = len(str)\n    dp = [0] * n\n    dp[0] = 1\n    for i in range(1, n): \n        dp[i] = 1\n        for j in range(i): \n            if str[i] != str[j] and dp[j] == dp[i-1]: \n                dp[i] += 1\n    return max(dp) ",
        "generated_testcode": "assert find_longest_repeating_subseq(\"abcabc\") == 3\n",
        "test": "assert find_longest_repeating_subseq(\"AABEBCDD\") == 3\nassert find_longest_repeating_subseq(\"aabb\") == 2\nassert find_longest_repeating_subseq(\"aab\") == 1",
        "canonical_solution": "def find_longest_repeating_subseq(str): \r\n\tn = len(str) \r\n\tdp = [[0 for k in range(n+1)] for l in range(n+1)] \r\n\tfor i in range(1, n+1): \r\n\t\tfor j in range(1, n+1): \r\n\t\t\tif (str[i-1] == str[j-1] and i != j): \r\n\t\t\t\tdp[i][j] = 1 + dp[i-1][j-1] \r\n\t\t\telse: \r\n\t\t\t\tdp[i][j] = max(dp[i][j-1], dp[i-1][j]) \r\n\treturn dp[n][n]"
    },
    {
        "number": 208,
        "prompt": "Write a function to check the given decimal with a precision of 2 by using regex.\ndef is_decimal(num):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    if re.match(r'^-?\\d+(\\.\\d{1,2})?$', num):\n        return True\n    else:\n        return False\n\n# Test cases\nprint(is_decimal(\"3.14\")) # True\nprint(is_decimal(\"3.14159\")) # False\nprint(is_decimal(\"-3.14\")) # True\nprint(is_decimal(\"0\")) # True\nprint(is_decimal(\"0.0\")) # True\nprint(is_decimal(\"123.456\")) # False\nprint(is_decimal(\"0.00\")) # True\nprint(is_decimal(\"1.\")) # True\nprint(is_decimal(\"1.000000\")) # True\nprint(is_decimal(\"1.00001\")) # False\nprint(is_decimal(\"-1.23\")) # True\nprint(is_decimal(\"1.234\")) # False\nprint(is_decimal(\"1.2345\")) # False\nprint(is_decimal(\"1.23.\")) # False\nprint(is_decimal(\".\")) # False\nprint(is_decimal(\"-\")) # False\nprint(is_decimal(\"1.2.3\")) # False\nprint(is_decimal(\"1,234\")) # False\nprint(is_decimal(\"3,14\")) # False\nprint(is_decimal(\"1.23.",
        "generated_testcode": "assert is_decimal(\"123.45\") == True\n",
        "test": "assert is_decimal('123.11') == True\nassert is_decimal('0.21') == True\nassert is_decimal('123.1214') == False",
        "canonical_solution": "import re\r\ndef is_decimal(num):\r\n  num_fetch = re.compile(r\"\"\"^[0-9]+(\\.[0-9]{1,2})?$\"\"\")\r\n  result = num_fetch.search(num)\r\n  return bool(result)"
    },
    {
        "number": 209,
        "prompt": "Write a function to delete the smallest element from the given heap and then insert a new item.\ndef heap_replace(heap,a):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    smallest = heap[0]\n    last_element = heap.pop()\n    if heap:\n        new_root = heapq.heappop(heap)\n        heapq.heappush(heap,a)\n        return new_root\n    else:\n        return None\n\n#Write a function to check if a binary tree is a binary search tree\ndef is_binary_search_tree(root):\n    def helper(node, min_val=float('-inf'), max_val=float('inf')):\n        if not node:\n            return True\n        if not min_val < node.val < max_val:\n            return False\n        return (helper(node.left, min_val, node.val) and helper(node.right, node.val, max_val))\n    return helper(root)\n\n#Find the kth smallest element in a binary search tree\ndef kth_smallest(root, k):\n    stack = []\n    while root or stack:\n        while root:\n            stack.append(root)\n            root = root.left\n        root = stack.pop()\n        k -= 1\n        if k == 0:\n            return root.val\n        root = root.right\n\n#Find the median of a stream of numbers\nclass MedianFinder:\n\n    def __init__(self):\n        self.min_heap = []\n        self.max_heap = []\n\n    def addNum(self, num):\n        heapq.heappush(",
        "generated_testcode": "assert heap_replace([1,2,3,4,5], 6) == [2,3,4,5]\n",
        "test": "assert heap_replace( [25, 44, 68, 21, 39, 23, 89],21)==[21, 25, 23, 44, 39, 68, 89]\nassert heap_replace([25, 44, 68, 21, 39, 23, 89],110)== [23, 25, 68, 44, 39, 110, 89]\nassert heap_replace([25, 44, 68, 21, 39, 23, 89],500)==[23, 25, 68, 44, 39, 500, 89]",
        "canonical_solution": "import heapq as hq\r\ndef heap_replace(heap,a):\r\n  hq.heapify(heap)\r\n  hq.heapreplace(heap, a)\r\n  return heap"
    },
    {
        "number": 210,
        "prompt": "Write a function to check that the given string contains only a certain set of characters(in this case a-z, a-z and 0-9) by using regex.\ndef is_allowed_specific_char(string):\n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    import re\n    allowed_chars = re.compile(r'^[a-zA-Z0-9]+$') # a-z, A-Z, 0-9\n    return bool(allowed_chars.match(string))\n\nprint(is_allowed_specific_char(\"hello123world\")) # True\nprint(is_allowed_specific_char(\"Hello123world\")) # False\nprint(is_allowed_specific_char(\"hello123world#\")) # False\nprint(is_allowed_specific_char(\"hello_world\")) # False\nprint(is_allowed_specific_char(\"hello@world\")) # False\nprint(is_allowed_specific_char(\"hello world\")) # False\nprint(is_allowed_specific_char(\"hello*world\")) # False\nprint(is_allowed_specific_char(\"12345\")) # True\nprint(is_allowed_specific_char(\"hello\")) # True\nprint(is_allowed_specific_char(\"world\")) # True\nprint(is_allowed_specific_char(\"HelloWorld123\")) # False\nprint(is_allowed_specific_char(\"HelloWorld123!\")) # False\nprint(is_allowed_specific_char(\"12345#\")) # False\nprint(is_allowed_specific_char(\"hello#world\")) # False\nprint(is_allowed_specific_char(\"hello world\")) # False\nprint(is_allowed_specific_char(\"hello*world\")) # False\n\n# This function checks if the given string",
        "generated_testcode": "assert is_allowed_specific_char(\"hello123\") == True\n",
        "test": "assert is_allowed_specific_char(\"ABCDEFabcdef123450\") == True\nassert is_allowed_specific_char(\"*&%@#!}{\") == False\nassert is_allowed_specific_char(\"HELLOhowareyou98765\") == True",
        "canonical_solution": "import re\r\ndef is_allowed_specific_char(string):\r\n    get_char = re.compile(r'[^a-zA-Z0-9.]')\r\n    string = get_char.search(string)\r\n    return not bool(string)"
    },
    {
        "number": 211,
        "prompt": "Write a python function to count numbers whose oth and nth bits are set.\ndef count_Num(n): \n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    return bin(n)[2:].count('1')\n\n# Driver code \nn = int(input())\nprint(count_Num(n))\n",
        "generated_testcode": "assert count_Num(5) == 3\n",
        "test": "assert count_Num(2) == 1\nassert count_Num(3) == 2\nassert count_Num(1) == 1",
        "canonical_solution": "def count_Num(n): \r\n    if (n == 1): \r\n        return 1\r\n    count = pow(2,n - 2) \r\n    return count "
    },
    {
        "number": 212,
        "prompt": "Write a python function to find the sum of fourth power of n natural numbers.\ndef fourth_Power_Sum(n): \n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    sum = 0\n    for i in range(1, n+1): \n        sum += i**4\n    return sum \n  \n# Driver code \nn = 10\nprint(fourth_Power_Sum(n)) ",
        "generated_testcode": "assert fourth_Power_Sum(5) == 225\n",
        "test": "assert fourth_Power_Sum(2) == 17\nassert fourth_Power_Sum(4) == 354\nassert fourth_Power_Sum(6) == 2275",
        "canonical_solution": "import math  \r\ndef fourth_Power_Sum(n): \r\n    sum = 0\r\n    for i in range(1,n+1) : \r\n        sum = sum + (i*i*i*i) \r\n    return sum"
    },
    {
        "number": 213,
        "prompt": "Write a function to perform the concatenation of two string tuples.\ndef concatenate_strings(test_tup1, test_tup2):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    return test_tup1 + test_tup2\n\n# Test the function with the given test_tup1 and test_tup2\ntest_tup1 = (\"Hello\", \"world\")\ntest_tup2 = (\"Python\", \"Programming\")\nprint(concatenate_strings(test_tup1, test_tup2)) # Output: (\"Hello\", \"world\", \"Python\", \"Programming\")\n\n# Function to concatenate two integer tuples\ndef concatenate_integers(test_tup1, test_tup2):\n    return test_tup1 + test_tup2\n\n# Test the function with the given test_tup1 and test_tup2\ntest_tup1 = (1, 2, 3)\ntest_tup2 = (4, 5, 6)\nprint(concatenate_integers(test_tup1, test_tup2)) # Output: (1, 2, 3, 4, 5, 6)\n\n# Function to concatenate two floating point tuples\ndef concatenate_floats(test_tup1, test_tup2):\n    return test_tup1 + test_tup2\n\n# Test the function with the given test_tup1 and test_tup2\ntest_tup1 = (1.5, 2.5, 3.5)\ntest_tup2 = (4.5, 5.5, 6.5)",
        "generated_testcode": "assert concatenate_strings((\"hello\", \"world\"), (\"python\", \"programming\")) == (\"helloworld\", \"pythonprogramming\")\n",
        "test": "assert concatenate_strings((\"Manjeet\", \"Nikhil\", \"Akshat\"), (\" Singh\", \" Meherwal\", \" Garg\")) == ('Manjeet Singh', 'Nikhil Meherwal', 'Akshat Garg')\nassert concatenate_strings((\"Shaik\", \"Ayesha\", \"Sanya\"), (\" Dawood\", \" Begum\", \" Singh\")) == ('Shaik Dawood', 'Ayesha Begum', 'Sanya Singh')\nassert concatenate_strings((\"Harpreet\", \"Priyanka\", \"Muskan\"), (\"Kour\", \" Agarwal\", \"Sethi\")) == ('HarpreetKour', 'Priyanka Agarwal', 'MuskanSethi')",
        "canonical_solution": "def concatenate_strings(test_tup1, test_tup2):\r\n  res = tuple(ele1 + ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\r\n  return (res) "
    },
    {
        "number": 214,
        "prompt": "Write a function to convert radians to degrees.\ndef degree_radian(radian):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    degree = (radian * 180 / 3.14159)\n    return degree\n\n# Test the function with some example values\nprint(degree_radian(3.14159))  # Output: 179.99999999999999996\nprint(degree_radian(1.57079632679))  # Output: 90.0\nprint(degree_radian(0))  # Output: 0.0\nprint(degree_radian(0.7853981633974483))  # Output: 45.0\n\n# To convert degrees to radians, we need to multiply the degree value by pi/180. Here is the function to do that:\ndef radian_degree(degree):\n    radian = (degree * 3.14159 / 180)\n    return radian\n\n# Test the function with some example values\nprint(radian_degree(180))  # Output: 3.14159\nprint(radian_degree(90))  # Output: 1.57079632679\nprint(radian_degree(0))  # Output: 0.0\nprint(radian_degree(45))  # Output: 0.7853981633",
        "generated_testcode": "assert degree_radian(3.14159) == 180\n",
        "test": "assert degree_radian(90)==5156.620156177409\nassert degree_radian(60)==3437.746770784939\nassert degree_radian(120)==6875.493541569878",
        "canonical_solution": "import math\r\ndef degree_radian(radian):\r\n degree = radian*(180/math.pi)\r\n return degree"
    },
    {
        "number": 215,
        "prompt": "Write a function to decode a run-length encoded given list.\ndef decode_list(alist):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    decoded_list = []\n    for i in range(0, len(alist), 2):\n        decoded_list += [alist[i+1]] * alist[i]\n    return decoded_list\n\n# Test the function with an example list\nprint(decode_list([4, 5, 1, 2, 3, 2, 7, 9, 1, 2])) # should return [5, 5, 5, 5, 5, 5, 5, 7, 7, 7, 7, 1, 1, 1]\nprint(decode_list([1, 2, 3, 3, 4, 5, 1, 6, 1, 7])) # should return [2, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 5, 6, 6, 7]\nprint(decode_list([1, 2, 3, 4, 5, 1, 6, 7, 1, 8, 2, 9, 1, 10])) # should return [2, 3, 4, 5, 6, 7, 8, 9, 10]\nprint(decode_list([1, 3, 4, 2, 5, 1, 6, 1, 7, 3, 8, 1, ",
        "generated_testcode": "assert decode_list([(1, 'a'), (4, 'b'), (2, 'c')]) == ['a', 'b', 'b', 'b', 'b', 'b', 'c', 'c']\n",
        "test": "assert decode_list([[2, 1], 2, 3, [2, 4], 5,1])==[1,1,2,3,4,4,5,1]\nassert decode_list(['a', 'u', 't', 'o', 'm', 'a', 't', 'i', 'c', 'a', [2, 'l'], 'y'])==['a', 'u', 't', 'o', 'm', 'a', 't', 'i', 'c', 'a', 'l', 'l', 'y']\nassert decode_list(['p', 'y', 't', 'h', 'o', 'n'])==['p', 'y', 't', 'h', 'o', 'n']",
        "canonical_solution": "def decode_list(alist):\r\n    def aux(g):\r\n        if isinstance(g, list):\r\n            return [(g[1], range(g[0]))]\r\n        else:\r\n            return [(g, [0])]\r\n    return [x for g in alist for x, R in aux(g) for i in R]"
    },
    {
        "number": 216,
        "prompt": "Write a function to check if a nested list is a subset of another nested list.\ndef check_subset_list(list1, list2): \n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    for i in list1: \n        if i in list2: \n            return True\n    return False\n\n# Test the function with sample inputs \nlist1 = [1, [2, 3, [4, 5, [6, 7]]] , 8] \nlist2 = [1, 2, 3, 4, 5, 6, 7, 8, 9] \nprint(check_subset_list(list1, list2)) ",
        "generated_testcode": "assert check_subset_list([1, 2, [3, 4], 5], [1, 2, 3, 4, 5]) == True\n",
        "test": "assert check_subset_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14],[[12, 18, 23, 25, 45], [7, 11, 19, 24, 28], [1, 5, 8, 18, 15, 16]])==False\nassert check_subset_list([[2, 3, 1], [4, 5], [6, 8]],[[4, 5], [6, 8]])==True\nassert check_subset_list([['a', 'b'], ['e'], ['c', 'd']],[['g']])==False",
        "canonical_solution": "def check_subset_list(list1, list2): \r\n    l1, l2 = list1[0], list2[0] \r\n    exist = True\r\n    for i in list2: \r\n        if i not in list1: \r\n            exist = False\r\n    return exist "
    },
    {
        "number": 217,
        "prompt": "Write a python function to find the first repeated character in a given string.\ndef first_Repeated_Char(str): \n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    # Initialize an empty dictionary to store the frequency of each character\n    freq = {}\n    for i in str: \n        if i in freq: \n            freq[i] += 1\n        else: \n            freq[i] = 1\n    # Traverse through the string to find the first repeated character \n    for i in str: \n        if freq[i] > 1: \n            return i \n    # If no repeated character is found, return -1 \n    return -1\n  \n# Test the function \nprint(first_Repeated_Char(\"geeksforgeeks\")) ",
        "generated_testcode": "assert first_Repeated_Char(\"hello\") == \"l\"\n",
        "test": "assert first_Repeated_Char(\"Google\") == \"o\"\nassert first_Repeated_Char(\"data\") == \"a\"\nassert first_Repeated_Char(\"python\") == '\\0'",
        "canonical_solution": "def first_Repeated_Char(str): \r\n    h = {}\r\n    for ch in str:\r\n        if ch in h: \r\n            return ch;\r\n        else: \r\n            h[ch] = 0\r\n    return '\\0'"
    },
    {
        "number": 218,
        "prompt": "Write a python function to find the minimum operations required to make two numbers equal.\ndef min_Operations(A,B):  \n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    if A == B: \n        return 0\n    else:\n        # Using XOR operation to find the minimum number of operations required\n        # to make A and B equal\n        return bin(A^B).count('1') ",
        "generated_testcode": "assert min_Operations(1, 1) == 0\n",
        "test": "assert min_Operations(2,4) == 1\nassert min_Operations(4,10) == 4\nassert min_Operations(1,4) == 3",
        "canonical_solution": "import math   \r\ndef min_Operations(A,B):  \r\n    if (A > B): \r\n        swap(A,B)  \r\n    B = B // math.gcd(A,B);  \r\n    return B - 1"
    },
    {
        "number": 219,
        "prompt": "Write a function to extract maximum and minimum k elements in the given tuple.\ndef extract_min_max(test_tup, K):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    max_elements = heapq.nlargest(K, test_tup)\n    min_elements = heapq.nsmallest(K, test_tup)\n    return (max_elements, min_elements)\n\n# Test the function\ntest_tup = (2, 9, 4, 5, 1, 8, 3, 6, 7, 0)\nK = 3\nprint(extract_min_max(test_tup, K))\n# Output: ([9, 8, 7], [0, 1, 2])\n\n# Let's test the function with a negative K value\nK = -3\nprint(extract_min_max(test_tup, K)) # Error\n# Output: ValueError: kth (negative) element cannot be less than 1\n\n# Let's test the function with a value of K that is greater than the length of the tuple\nK = 10\nprint(extract_min_max(test_tup, K)) # Error\n# Output: ValueError: kth element cannot be greater than the length of the list\n\n# Let's test the function with a non-integer value of K\nK = 3.5\nprint(extract_min_max(test_tup, K)) # Error\n# Output: TypeError: 'float' object cannot be interpreted as an integer\n\n# Let's test the function with a non-tuple input\ntest_list = [2, 9, 4, 5, ",
        "generated_testcode": "assert extract_min_max((1, 2, 3, 4, 5, 6, 7, 8, 9, 10), 3) == (1, 10)\n",
        "test": "assert extract_min_max((5, 20, 3, 7, 6, 8), 2) == (3, 5, 8, 20)\nassert extract_min_max((4, 5, 6, 1, 2, 7), 3) == (1, 2, 4, 5, 6, 7)\nassert extract_min_max((2, 3, 4, 8, 9, 11, 7), 4) == (2, 3, 4, 7, 8, 9, 11)",
        "canonical_solution": "\r\ndef extract_min_max(test_tup, K):\r\n  res = []\r\n  test_tup = list(test_tup)\r\n  temp = sorted(test_tup)\r\n  for idx, val in enumerate(temp):\r\n    if idx < K or idx >= len(temp) - K:\r\n      res.append(val)\r\n  res = tuple(res)\r\n  return (res) "
    },
    {
        "number": 220,
        "prompt": "Write a function to replace maximum n occurrences of spaces, commas, or dots with a colon.\ndef replace_max_specialchar(text,n):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    # Split the text into words\n    words = text.split()\n    count = 0\n    new_text = \"\"\n    # Loop over the words\n    for word in words:\n        # Split the word into characters\n        chars = list(word)\n        # Loop over the characters in the word\n        for i in range(len(chars)):\n            if chars[i] == \",\":\n                # If comma found, increment count and replace it with a colon\n                count += 1\n                chars[i] = \":\"\n            elif chars[i] == \".\":\n                # If dot found, increment count and replace it with a colon\n                count += 1\n                chars[i] = \":\"\n            elif count < n:\n                # If special characters are found and not exceeded the maximum, replace with a colon\n                chars[i] = \":\"\n        new_text += \"\".join(chars) + \" \"\n    return new_text\n\n# Test the function\ntext = \"hello, world. how are you today? i hope, you are doing well. and. me too.\"\nn = 2\nprint(replace_max_specialchar(text,n)) # Output: \"hello: world: how are you today? i hope, you are doing well. and. me too\" \n\n# Test the function with different inputs\ntext = \"hello, world. how are you today? i hope, you are doing well. and. me too.\"\nn = 3\nprint(replace_max_specialchar(text,n)) #",
        "generated_testcode": "assert replace_max_specialchar(\"Hello, world. This is a test. This is only a test.\", 2) == \"Hello: world: This is a test. This is only a test.\"\n",
        "test": "assert replace_max_specialchar('Python language, Programming language.',2)==('Python:language: Programming language.')\nassert replace_max_specialchar('a b c,d e f',3)==('a:b:c:d e f')\nassert replace_max_specialchar('ram reshma,ram rahim',1)==('ram:reshma,ram rahim')",
        "canonical_solution": "import re\r\ndef replace_max_specialchar(text,n):\r\n return (re.sub(\"[ ,.]\", \":\", text, n))"
    },
    {
        "number": 221,
        "prompt": "Write a python function to find the first even number in a given list of numbers.\ndef first_even(nums):\n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    for num in nums:\n        if num % 2 == 0:\n            return num\n    return None\n\nprint(first_even([1, 3, 5, 8, 10, 2, 7, 9]))  # Output: 8\nprint(first_even([1, 3, 5, 7, 9]))        # Output: None\n",
        "generated_testcode": "assert first_even([1, 3, 5, 7, 9, 10, 12, 15]) == 10\n",
        "test": "assert first_even ([1, 3, 5, 7, 4, 1, 6, 8]) == 4\nassert first_even([2, 3, 4]) == 2\nassert first_even([5, 6, 7]) == 6",
        "canonical_solution": "def first_even(nums):\r\n    first_even = next((el for el in nums if el%2==0),-1)\r\n    return first_even"
    },
    {
        "number": 222,
        "prompt": "Write a function to check if all the elements in tuple have same data type or not.\ndef check_type(test_tuple):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    if len(test_tuple) == 0:\n        return True\n    else:\n        return all(isinstance(test_tuple[0], type(test_tuple[0])) and check_type(test_tuple[1:])\n\n# Example usage:\nprint(check_type((1, 2, 3, 4, 5)) # True\nprint(check_type((\"hello\", 2, 3, 4, 5)) # False\nprint(check_type((1, \"hello\", 3, 4, \"world\") # False\nprint(check_type(()) # True ",
        "generated_testcode": "assert check_type((1, 2, 3, 4, 5) == True)\n",
        "test": "assert check_type((5, 6, 7, 3, 5, 6) ) == True\nassert check_type((1, 2, \"4\") ) == False\nassert check_type((3, 2, 1, 4, 5) ) == True",
        "canonical_solution": "def check_type(test_tuple):\r\n  res = True\r\n  for ele in test_tuple:\r\n    if not isinstance(ele, type(test_tuple[0])):\r\n      res = False\r\n      break\r\n  return (res) "
    },
    {
        "number": 223,
        "prompt": "Write a function to check for majority element in the given sorted array.\ndef is_majority(arr, n, x):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": true,
        "answer": "    left = 0\n    right = n-1\n    while left < right:\n        mid = (left + right) // 2\n        if arr[mid] == x:\n            return True\n        elif arr[mid] < x:\n            left = mid + 1\n        else:\n            right = mid\n    return False\n\ndef majority_element(arr, n):\n    if n == 1:\n        return arr[0]\n    elif n == 2:\n        return arr[0]\n    else:\n        majority_index = n // 2\n        if arr[majority_index] == arr[majority_index-1] and arr[majority_index] == arr[majority_index+1]:\n            return arr[majority_index]\n        elif arr[majority_index-1] == arr[majority_index+1]:\n            return arr[majority_index-1]\n        elif is_majority(arr, n, arr[majority_index]):\n            return arr[majority_index]\n        elif is_majority(arr, n, arr[majority_index-1]):\n            return arr[majority_index-1]\n        else:\n            return arr[majority_index+1]\n\n# Testing the function\narr = [1, 2, 3, 3, 3, 3, 4]\nn = len(arr)\nprint(majority_element(arr, n)) ",
        "generated_testcode": "assert is_majority([1, 2, 3, 3, 4, 5], 5, 3) == True\n",
        "test": "assert is_majority([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\nassert is_majority([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\nassert is_majority([1, 1, 1, 2, 2], 5, 1) == True",
        "canonical_solution": "def is_majority(arr, n, x):\r\n\ti = binary_search(arr, 0, n-1, x)\r\n\tif i == -1:\r\n\t\treturn False\r\n\tif ((i + n//2) <= (n -1)) and arr[i + n//2] == x:\r\n\t\treturn True\r\n\telse:\r\n\t\treturn False\r\ndef binary_search(arr, low, high, x):\r\n\tif high >= low:\r\n\t\tmid = (low + high)//2 \r\n\t\tif (mid == 0 or x > arr[mid-1]) and (arr[mid] == x):\r\n\t\t\treturn mid\r\n\t\telif x > arr[mid]:\r\n\t\t\treturn binary_search(arr, (mid + 1), high, x)\r\n\t\telse:\r\n\t\t\treturn binary_search(arr, low, (mid -1), x)\r\n\treturn -1"
    },
    {
        "number": 224,
        "prompt": "Write a python function to count set bits of a given number.\ndef count_Set_Bits(n): \n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    count = 0\n    while n: \n        count += n & 1\n        n >>= 1\n    return count \n\n# Test the function \nn = 10\nprint(\"Count of set bits in\", n, \"is\", count_Set_Bits(n)) ",
        "generated_testcode": "assert count_Set_Bits(12) == 2\n",
        "test": "assert count_Set_Bits(2) == 1\nassert count_Set_Bits(4) == 1\nassert count_Set_Bits(6) == 2",
        "canonical_solution": "def count_Set_Bits(n): \r\n    count = 0\r\n    while (n): \r\n        count += n & 1\r\n        n >>= 1\r\n    return count "
    },
    {
        "number": 225,
        "prompt": "Write a python function to find the minimum element in a sorted and rotated array.\ndef find_Min(arr,low,high): \n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    if high < low: \n        return arr[0] \n\n    if high == low: \n        return arr[low] \n\n    mid = int(low + (high - low) / 2) \n\n    if mid < high and arr[mid] > arr[mid + 1]: \n        return arr[mid + 1] \n\n    if mid > low and arr[mid] < arr[mid - 1]: \n        return arr[mid] \n\n    if arr[low] > arr[mid]: \n        return find_Min(arr, mid + 1, high) \n    return find_Min(arr, low, mid - 1) \n\n\ndef main(): \n    arr = [4, 5, 6, 7, 8, 9, 10, 11, 12, 1, 2, 3] \n    n = len(arr) \n    print(\"Minimum element is\", find_Min(arr, 0, n - 1)) \n\nif __name__ == \"__main__\": \n    main() ",
        "generated_testcode": "assert find_Min([4,5,6,7,0,1,2],0,5) == 0\n",
        "test": "assert find_Min([1,2,3,4,5],0,4) == 1\nassert find_Min([4,6,8],0,2) == 4\nassert find_Min([2,3,5,7,9],0,4) == 2",
        "canonical_solution": "def find_Min(arr,low,high): \r\n    while (low < high): \r\n        mid = low + (high - low) // 2;   \r\n        if (arr[mid] == arr[high]): \r\n            high -= 1; \r\n        elif (arr[mid] > arr[high]): \r\n            low = mid + 1; \r\n        else: \r\n            high = mid; \r\n    return arr[high]; "
    },
    {
        "number": 226,
        "prompt": "Write a python function to remove the characters which have odd index values of a given string.\ndef odd_values_string(str):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    result = \"\"\n    for i in range(len(str)):\n        if i % 2 == 0:\n            result += str[i]\n    return result\n\n# Testing the function\nprint(odd_values_string(\"Python\")) # Expected output: \"Pyhn\"\nprint(odd_values_string(\"Hello World\")) # Expected output: \"Helo Wrd\"\nprint(odd_values_string(\"abcdefg\")) # Expected output: \"ace\"\nprint(odd_values_string(\"\")) # Expected output: \"\" ",
        "generated_testcode": "assert odd_values_string(\"Hello World\") == \"Hlo Wrd\"\n",
        "test": "assert odd_values_string('abcdef') == 'ace'\nassert odd_values_string('python') == 'pto'\nassert odd_values_string('data') == 'dt'",
        "canonical_solution": "def odd_values_string(str):\r\n  result = \"\" \r\n  for i in range(len(str)):\r\n    if i % 2 == 0:\r\n      result = result + str[i]\r\n  return result"
    },
    {
        "number": 227,
        "prompt": "Write a function to find minimum of three numbers.\ndef min_of_three(a,b,c): \n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    minimum = a \n    if b < minimum: \n        minimum = b \n    if c < minimum: \n        minimum = c \n    return minimum \n\n# test the function with some values \nprint(min_of_three(3, 5, 7)) ",
        "generated_testcode": "assert min_of_three(1,2,3) == 1\n",
        "test": "assert min_of_three(10,20,0)==0\nassert min_of_three(19,15,18)==15\nassert min_of_three(-10,-20,-30)==-30",
        "canonical_solution": "def min_of_three(a,b,c): \r\n      if (a <= b) and (a <= c): \r\n        smallest = a \r\n      elif (b <= a) and (b <= c): \r\n        smallest = b \r\n      else: \r\n        smallest = c \r\n      return smallest "
    },
    {
        "number": 228,
        "prompt": "Write a python function to check whether all the bits are unset in the given range or not.\ndef all_Bits_Set_In_The_Given_Range(n,l,r):  \n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": true,
        "answer": "    for i in range(l,r+1):\n        if n&(1<<i):\n            return 0\n    return 1\n\n#Test the function\nn = 12 # binary is 11000\nl = 1\nr = 2\nprint(all_Bits_Set_In_The_Given_Range(n,l,r)) #Output: 0\n\nn = 7 # binary is 1111\nl = 0\nr = 2\nprint(all_Bits_Set_In_The_Given_Range(n,l,r)) #Output: 1 ",
        "generated_testcode": "assert all_Bits_Set_In_The_Given_Range(10,2,4) == False\n",
        "test": "assert all_Bits_Set_In_The_Given_Range(4,1,2) == True\nassert all_Bits_Set_In_The_Given_Range(17,2,4) == True\nassert all_Bits_Set_In_The_Given_Range(39,4,6) == False",
        "canonical_solution": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \r\n    num = (((1 << r) - 1) ^ ((1 << (l - 1)) - 1)) \r\n    new_num = n & num\r\n    if (new_num == 0): \r\n        return True\r\n    return False"
    },
    {
        "number": 229,
        "prompt": "Write a function to re-arrange the elements of the given array so that all negative elements appear before positive ones.\ndef re_arrange_array(arr, n):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    j = 0\n    for i in range(0, n):\n        if arr[i] < 0:\n            arr[i], arr[j] = arr[j], arr[i]\n            j += 1\n    print(\"Re-arranged array : \", arr)\n\n\n\narr = [12, 11, -5, 2, -3, 8, -1, 6]\nn = len(arr)\nre_arrange_array(arr, n)\n\n# output: Re-arranged array :  [-5, -3, -1, 12, 11, 2, 8, 6]\n\n# Explanation: Negative numbers are placed at the beginning of the array.\n",
        "generated_testcode": "assert re_arrange_array([1, -2, 5, -3, 0, 7, -1, 8], 6) == [-2, -3, -1, 1, 0, 5, 7, 8]\n",
        "test": "assert re_arrange_array([-1, 2, -3, 4, 5, 6, -7, 8, 9], 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9]\nassert re_arrange_array([12, -14, -26, 13, 15], 5) == [-14, -26, 12, 13, 15]\nassert re_arrange_array([10, 24, 36, -42, -39, -78, 85], 7) == [-42, -39, -78, 10, 24, 36, 85]",
        "canonical_solution": "def re_arrange_array(arr, n):\r\n  j=0\r\n  for i in range(0, n):\r\n    if (arr[i] < 0):\r\n      temp = arr[i]\r\n      arr[i] = arr[j]\r\n      arr[j] = temp\r\n      j = j + 1\r\n  return arr"
    },
    {
        "number": 230,
        "prompt": "Write a function to replace blank spaces with any character in a string.\ndef replace_blank(str1,char):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    str1 = str1.replace(\" \",char)\n    return str1\n\n#test the function\nstring = \"hello world\"\nprint(replace_blank(string, \"-\"))\n\n#expected output: \"hello-world\"\n\n#Test case 2:\nstring = \"  python  is  awesome  \"\nprint(replace_blank(string,\"_\"))\n#expected output: \"__python__is__awesome__\"\n\n#Test case 3:\nstring = \"   \"\nprint(replace_blank(string,\"*\"))\n#expected output: \"***\" ",
        "generated_testcode": "assert replace_blank(\"hello world\",\"_\") == \"hello_world\"\n",
        "test": "assert replace_blank(\"hello people\",'@')==(\"hello@people\")\nassert replace_blank(\"python program language\",'$')==(\"python$program$language\")\nassert replace_blank(\"blank space\",\"-\")==(\"blank-space\")",
        "canonical_solution": "def replace_blank(str1,char):\r\n str2 = str1.replace(' ', char)\r\n return str2"
    },
    {
        "number": 231,
        "prompt": "Write a function to find the maximum sum in the given right triangle of numbers.\ndef max_sum(tri, n): \n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": true,
        "answer": "    max_sum = 0\n    for i in range(n): \n        for j in range(n): \n            if j < i: \n                tri[i][j] = 0\n            elif j == i: \n                tri[i][j] += tri[i-1][j-1] \n            else: \n                tri[i][j] += max(tri[i-1][j], tri[i][j-1]) \n            max_sum = max(max_sum, tri[i][j]) \n    return max_sum \n  \n# Driver code \ntri = [[1, 2, 3], \n       [4, 5, 6], \n       [7, 8, 9]] \n  \nn = len(tri) \n  \nprint(max_sum(tri, n)) ",
        "generated_testcode": "assert max_sum([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3) == 24\n",
        "test": "assert max_sum([[1], [2,1], [3,3,2]], 3) == 6\nassert max_sum([[1], [1, 2], [4, 1, 12]], 3) == 15 \nassert max_sum([[2], [3,2], [13,23,12]], 3) == 28",
        "canonical_solution": "def max_sum(tri, n): \r\n\tif n > 1: \r\n\t\ttri[1][1] = tri[1][1]+tri[0][0] \r\n\t\ttri[1][0] = tri[1][0]+tri[0][0] \r\n\tfor i in range(2, n): \r\n\t\ttri[i][0] = tri[i][0] + tri[i-1][0] \r\n\t\ttri[i][i] = tri[i][i] + tri[i-1][i-1] \r\n\t\tfor j in range(1, i): \r\n\t\t\tif tri[i][j]+tri[i-1][j-1] >= tri[i][j]+tri[i-1][j]: \r\n\t\t\t\ttri[i][j] = tri[i][j] + tri[i-1][j-1] \r\n\t\t\telse: \r\n\t\t\t\ttri[i][j] = tri[i][j]+tri[i-1][j] \r\n\treturn (max(tri[n-1]))"
    },
    {
        "number": 232,
        "prompt": "Write a function to get the n largest items from a dataset.\ndef larg_nnum(list1,n):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    sorted_list = sorted(list1, reverse=True)\n    return sorted_list[:n]\n\n#Testing the function\nprint(larg_nnum([4,5,1,2,9,10,12,15],3)) #Output: [15, 12, 10] \n\n#To get the n smallest items from a dataset, you can use the same function and pass reverse as False\ndef small_nnum(list1,n):\n    sorted_list = sorted(list1, reverse=False)\n    return sorted_list[:n]\n\n#Testing the function\nprint(small_nnum([4,5,1,2,9,10,12,15],3)) #Output: [1, 2, 4] ",
        "generated_testcode": "assert larg_nnum([1,2,3,4,5,6,7,8,9,10],3) == [8,9,10]\n",
        "test": "assert larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],2)==[100,90]\nassert larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],5)==[100,90,80,70,60]\nassert larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],3)==[100,90,80]",
        "canonical_solution": "import heapq\r\ndef larg_nnum(list1,n):\r\n largest=heapq.nlargest(n,list1)\r\n return largest"
    },
    {
        "number": 233,
        "prompt": "Write a function to find the lateral surface area of a cylinder.\ndef lateralsuface_cylinder(r,h):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    lateral_area = 2*3.14*r*h\n    return lateral_area\n\n# Call the function to calculate the lateral surface area of a cylinder with radius 5 and height 4\nradius = 5\nheight = 4\nprint(\"The lateral surface area of the cylinder is:\", lateralsuface_cylinder(radius, height)) # Output: 157.08\n\n\n# Write a function to calculate the surface area of a cylinder.\ndef surface_area_cylinder(r,h):\n    lateral_area = lateralsuface_cylinder(r,h)\n    circular_area = 3.14*(r**2)\n    total_area = 2*lateral_area + 2*circular_area\n    return total_area\n\n# Call the function to calculate the surface area of a cylinder with radius 5 and height 4\nradius = 5\nheight = 4\nprint(\"The surface area of the cylinder is:\", surface_area_cylinder(radius, height)) # Output: 318.82\n\n# Write a function to calculate the volume of a cylinder.\ndef volume_cylinder(r,h):\n    volume = 3.14*(r**2)*h\n    return volume\n\n# Call the function to calculate the volume of a cylinder with radius 5 and height 4\nradius = 5\nheight = 4\nprint(\"The volume of the cylinder is:\",",
        "generated_testcode": "assert lateralsuface_cylinder(3, 5) == 314.1592653589793936\n",
        "test": "assert lateralsuface_cylinder(10,5)==314.15000000000003\nassert lateralsuface_cylinder(4,5)==125.66000000000001\nassert lateralsuface_cylinder(4,10)==251.32000000000002",
        "canonical_solution": "def lateralsuface_cylinder(r,h):\r\n  lateralsurface= 2*3.1415*r*h\r\n  return lateralsurface"
    },
    {
        "number": 234,
        "prompt": "Write a function to find the volume of a cube.\ndef volume_cube(l):\n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    return l ** 3\n\nprint(volume_cube(5)) # Output: 125\n\n# Write a function to find the surface area of a cube.\ndef surface_area_cube(l):\n    return 6 * (l ** 2)\n\nprint(surface_area_cube(5)) # Output: 150\n\n# Write a function to find the area of a rectangle.\ndef area_rectangle(length, width):\n    return length * width\n\nprint(area_rectangle(5, 10)) # Output: 50\n\n# Write a function to find the area of a triangle.\ndef area_triangle(base, height):\n    return 0.5 * base * height\n\nprint(area_triangle(10, 5)) # Output: 25.0\n\n# Write a function to find the area of a circle.\ndef area_circle(radius):\n    import math\n    return math.pi * radius ** 2\n\nprint(area_circle(5)) # Output: 78.5398163339744834\n\n# Write a function to find the volume of a sphere.\ndef volume_sphere(radius):\n    import math\n    return (4 / 3) * math.pi * radius ** 3\n\nprint(volume_sphere(5)) # Output: 523.604919225166006\n\n# Write a function to find the",
        "generated_testcode": "assert volume_cube(3) == 27\n",
        "test": "assert volume_cube(3)==27\nassert volume_cube(2)==8\nassert volume_cube(5)==125",
        "canonical_solution": "def volume_cube(l):\r\n  volume = l * l * l\r\n  return volume"
    },
    {
        "number": 235,
        "prompt": "Write a python function to set all even bits of a given number.\ndef even_bit_set_number(n): \n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    return n | (n & -n)\n\n# Test the function with an example\nprint(even_bit_set_number(15)) # Output: 15 (0b11111)\nprint(even_bit_set_number(7))  # Output: 7  (0b1111) ",
        "generated_testcode": "assert even_bit_set_number(10) == 10\n",
        "test": "assert even_bit_set_number(10) == 10\nassert even_bit_set_number(20) == 30\nassert even_bit_set_number(30) == 30",
        "canonical_solution": "def even_bit_set_number(n): \r\n    count = 0;res = 0;temp = n \r\n    while(temp > 0): \r\n        if (count % 2 == 1): \r\n            res |= (1 << count)\r\n        count+=1\r\n        temp >>= 1\r\n    return (n | res) "
    },
    {
        "number": 236,
        "prompt": "Write a python function to count the maximum number of equilateral triangles that can be formed within a given equilateral triangle.\ndef No_of_Triangle(N,K):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    # Write your code here\n    if N == 1:\n        return 1\n    else:\n        return (N*K) + (N-2)\n\n\nif __name__ == \"__main__\":\n    N = int(input())\n    K = int(input())\n    print(No_of_Triangle(N,K))\n\n# Example Input\n# 3\n# 4\n# Example Output\n# 13 ",
        "generated_testcode": "assert No_of_Triangle(3,2) == 1\n",
        "test": "assert No_of_Triangle(4,2) == 7\nassert No_of_Triangle(4,3) == 3\nassert No_of_Triangle(1,3) == -1",
        "canonical_solution": "def No_of_Triangle(N,K):\r\n    if (N < K):\r\n        return -1;\r\n    else:\r\n        Tri_up = 0;\r\n        Tri_up = ((N - K + 1) *(N - K + 2)) // 2;\r\n        Tri_down = 0;\r\n        Tri_down = ((N - 2 * K + 1) *(N - 2 * K + 2)) // 2;\r\n        return Tri_up + Tri_down;"
    },
    {
        "number": 237,
        "prompt": "Write a function to check the occurrences of records which occur similar times in the given tuples.\ndef check_occurences(test_list):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    counts = {}\n    for tup in test_list:\n        if tup not in counts:\n            counts[tup] = 0\n        counts[tup] += 1\n\n    for tup in counts:\n        if counts[tup] > 1:\n            return tup\n\n# Test the function with sample input\nprint(check_occurences([(1, 2), (2, 3), (1, 2), (1, 2), (4, 5)])) # Output: (1, 2)\nprint(check_occurences([(5, 6), (7, 8), (9, 10)])) # Output: None\nprint(check_occurences([(1, 1), (2, 2), (3, 3), (4, 4), (5, 5)])) # Output: (1, 1)\n\n# Time Complexity: O(n) ",
        "generated_testcode": "assert check_occurences(test_list) == expected_output\n\n# test_list = [(1, 2, 3), (2, 3, 4), (3, 4, 5), (1, 2, 3), (2, 3, 4), (3, 4, 5), (1, 2, 3), (2, 3, 4), (3, 4, 5), (1, 2, 3), (2, 3, 4), (3, 4, 5)]\n# expected_output = {(1, 2, 3): 3, (2, 3, 4): 3, (3, 4, 5): 3}\n\n",
        "test": "assert check_occurences([(3, 1), (1, 3), (2, 5), (5, 2), (6, 3)] ) == {(1, 3): 2, (2, 5): 2, (3, 6): 1}\nassert check_occurences([(4, 2), (2, 4), (3, 6), (6, 3), (7, 4)] ) == {(2, 4): 2, (3, 6): 2, (4, 7): 1}\nassert check_occurences([(13, 2), (11, 23), (12, 25), (25, 12), (16, 23)] ) == {(2, 13): 1, (11, 23): 1, (12, 25): 2, (16, 23): 1}",
        "canonical_solution": "from collections import Counter \r\ndef check_occurences(test_list):\r\n  res = dict(Counter(tuple(ele) for ele in map(sorted, test_list)))\r\n  return  (res) "
    },
    {
        "number": 238,
        "prompt": "Write a python function to count number of non-empty substrings of a given string.\ndef number_of_substrings(str): \n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    n = len(str) \n    count = 0\n    for i in range(n): \n        for j in range(i, n): \n            if str[i:j+1] != \"\": \n                count += 1\n    return count \n  \n# Testing the function \nstr = \"geeksforgeeks\"\nprint(\"Number of non-empty substrings in given string are:\",number_of_substrings(str)) ",
        "generated_testcode": "assert number_of_substrings(\"abc\") == 6\n",
        "test": "assert number_of_substrings(\"abc\") == 6\nassert number_of_substrings(\"abcd\") == 10\nassert number_of_substrings(\"abcde\") == 15",
        "canonical_solution": "def number_of_substrings(str): \r\n\tstr_len = len(str); \r\n\treturn int(str_len * (str_len + 1) / 2); "
    },
    {
        "number": 239,
        "prompt": "Write a function to find the number of possible sequences of length n such that each of the next element is greater than or equal to twice of the previous element but less than or equal to m.\ndef get_total_number_of_sequences(m,n): \n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    dp = [1] * m\n    for i in range(1, n):\n        for j in range(1, m):\n            dp[j] += dp[j-1]\n        for j in range(m-1, 0, -1):\n            dp[j-1] += dp[j]\n    return dp[-1]\n\nprint(get_total_number_of_sequences(6,5)) # Output: 4\n# All possible sequences are: \n# 1,2,4,6\n# 1,2,5,6\n# 1,3,6\n# 1,4,5\n\n# The output should be 4. ",
        "generated_testcode": "assert get_total_number_of_sequences(5,3) == 1\n",
        "test": "assert get_total_number_of_sequences(10, 4) == 4\nassert get_total_number_of_sequences(5, 2) == 6\nassert get_total_number_of_sequences(16, 3) == 84",
        "canonical_solution": "def get_total_number_of_sequences(m,n): \r\n\tT=[[0 for i in range(n+1)] for i in range(m+1)] \r\n\tfor i in range(m+1): \r\n\t\tfor j in range(n+1): \r\n\t\t\tif i==0 or j==0: \r\n\t\t\t\tT[i][j]=0\r\n\t\t\telif i<j: \r\n\t\t\t\tT[i][j]=0\r\n\t\t\telif j==1: \r\n\t\t\t\tT[i][j]=i \r\n\t\t\telse: \r\n\t\t\t\tT[i][j]=T[i-1][j]+T[i//2][j-1] \r\n\treturn T[m][n]"
    },
    {
        "number": 240,
        "prompt": "Write a function to replace the last element of the list with another list.\ndef replace_list(list1,list2):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": true,
        "answer": "    list1.pop()\n    list1.extend(list2)\n    return list1\n\n# Test the function with sample lists\nlist1 = [1,2,3,4,5]\nlist2 = [6,7,8]\nprint(replace_list(list1,list2)) # Output: [1, 2, 3, 6, 7, 8] ",
        "generated_testcode": "assert replace_list([1,2,3,4],[5,6,7]) == [1,2,3,5,6,7]\n",
        "test": "assert replace_list([1, 3, 5, 7, 9, 10],[2, 4, 6, 8])==[1, 3, 5, 7, 9, 2, 4, 6, 8]\nassert replace_list([1,2,3,4,5],[5,6,7,8])==[1,2,3,4,5,6,7,8]\nassert replace_list([\"red\",\"blue\",\"green\"],[\"yellow\"])==[\"red\",\"blue\",\"yellow\"]",
        "canonical_solution": "def replace_list(list1,list2):\r\n list1[-1:] = list2\r\n replace_list=list1\r\n return replace_list\r\n"
    },
    {
        "number": 241,
        "prompt": "Write a function to generate a 3d array having each element as '*'.\ndef array_3d(m,n,o):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    return [['*' for j in range(n)] for i in range(m)]\n    # for i in range(m):\n    #     row = []\n    #     for j in range(n):\n    #         row.append('*')\n    #     array.append(row)\n    # return array\n\n# print(array_3d(2,3,4))\n\n# Write a function to generate a 2d array having each element as '*'.\ndef array_2d(m,n):\n    return [['*' for j in range(n)] for i in range(m)]\n    # array = []\n    # for i in range(m):\n    #     row = []\n    #     for j in range(n):\n    #         row.append('*')\n    #     array.append(row)\n    # return array\n\n# print(array_2d(2,3))\n\n# Write a function to generate a 1d array having each element as '*'.\ndef array_1d(n):\n    return ['*' for i in range(n)]\n    # array = []\n    # for i in range(n):\n    #     array.append('*')\n    # return array\n\n# print(array_1d(3))\n\n# Write a function to print the elements of a 2d array.\ndef print_array_2d(array):\n    for i in range(len(array)):\n        for j in range(len(array[i",
        "generated_testcode": "assert array_3d(2,3,4) == [['***', '***', '***'], ['***', '***', '***']]\n",
        "test": "assert array_3d(6,4,3)==[[['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']]]\nassert array_3d(5,3,4)==[[['*', '*', '*', '*', '*'], ['*', '*', '*', '*','*'], ['*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*'],['*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*']]]\nassert array_3d(1,2,3)==[[['*'],['*']],[['*'],['*']],[['*'],['*']]]",
        "canonical_solution": "def array_3d(m,n,o):\r\n array_3d = [[ ['*' for col in range(m)] for col in range(n)] for row in range(o)]\r\n return array_3d"
    },
    {
        "number": 242,
        "prompt": "Write a function to count total characters in a string.\ndef count_charac(str1):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    count = 0\n    for i in str1:\n        count += 1\n    return count\n\n# Test the function\nprint(count_charac(\"hello\")) # Output: 5\n\n# Write a function to count unique characters in a string\ndef count_unique_char(str1):\n    char_list = []\n    for i in str1:\n        if i not in char_list:\n            char_list.append(i)\n    return len(char_list)\n\n# Test the function\nprint(count_unique_char(\"hello\")) # Output: 4\n\n# Write a function to count the frequency of each character in a string\ndef char_frequency(str1):\n    freq_dict = {}\n    for i in str1:\n        if i in freq_dict:\n            freq_dict[i] += 1\n        else:\n            freq_dict[i] = 1\n    return freq_dict\n\n# Test the function\nprint(char_frequency(\"hello\")) # Output: {'h': 1, 'e': 1, 'l': 2, 'o': 1}\n\n# Write a function to count the frequency of a character in a string\ndef count_char(char, str1):\n    count = 0\n    for i in str1:\n        if i == char:\n            count += 1\n    return count\n\n# Test the function\nprint(count_char(\"l\", \"hello\")) # Output: 2\n\n# Write a",
        "generated_testcode": "assert count_charac(\"Hello World\") == 10\n",
        "test": "assert count_charac(\"python programming\")==18\nassert count_charac(\"language\")==8\nassert count_charac(\"words\")==5",
        "canonical_solution": "def count_charac(str1):\r\n total = 0\r\n for i in str1:\r\n    total = total + 1\r\n return total"
    },
    {
        "number": 243,
        "prompt": "Write a function to sort the given list based on the occurrence of first element of tuples.\ndef sort_on_occurence(lst): \n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    lst.sort(key=lambda x:x[0]) \n    return lst \n\n#Test the function \nprint(sort_on_occurence([(1, 2), (3, 4), (1, 1), (2, 3), (1, 3), (2, 4), (3, 1)])) #[(1, 2), (3, 1), (1, 1), (2, 3), (1, 3), (2, 4)]\nprint(sort_on_occurence([(5, 1), (3, 2), (4, 1), (2, 1), (1, 1), (4, 2)])) #[(1, 1), (2, 1), (4, 1), (5, 1), (3, 2), (4, 2)] ",
        "generated_testcode": "assert sort_on_occurence([(1, 2), (3, 4), (1, 5), (2, 3), (1, 6), (3, 7)] ) == [(1, 2), (1, 5), (1, 6), (3, 4), (3, 7), (2, 3)]\n",
        "test": "assert sort_on_occurence([(1, 'Jake'), (2, 'Bob'), (1, 'Cara')]) == [(1, 'Jake', 'Cara', 2), (2, 'Bob', 1)]\nassert sort_on_occurence([('b', 'ball'), ('a', 'arm'), ('b', 'b'), ('a', 'ant')]) == [('b', 'ball', 'b', 2), ('a', 'arm', 'ant', 2)]\nassert sort_on_occurence([(2, 'Mark'), (3, 'Maze'), (2, 'Sara')]) == [(2, 'Mark', 'Sara', 2), (3, 'Maze', 1)]",
        "canonical_solution": "def sort_on_occurence(lst): \r\n\tdct = {} \r\n\tfor i, j in lst: \r\n\t\tdct.setdefault(i, []).append(j) \r\n\treturn ([(i, *dict.fromkeys(j), len(j)) \r\n\t\t\t\tfor i, j in dct.items()]) "
    },
    {
        "number": 244,
        "prompt": "Write a python function to find the next perfect square greater than a given number.\ndef next_Perfect_Square(N): \n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    import math\n    # find the square root of the given number \n    sqrt_N = math.sqrt(N) \n    # if square root is an integer \n    if (sqrt_N == int(sqrt_N)): \n        # return the next square \n        return (int(sqrt_N) + 1) ** 2\n    # else find the next integer square root \n    else: \n        return int(math.ceil(sqrt_N)) ** 2\n\n# test the function \nN = 15\nprint(next_Perfect_Square(N)) ",
        "generated_testcode": "assert next_Perfect_Square(15) == 16\n",
        "test": "assert next_Perfect_Square(35) == 36\nassert next_Perfect_Square(6) == 9\nassert next_Perfect_Square(9) == 16",
        "canonical_solution": "import math  \r\ndef next_Perfect_Square(N): \r\n    nextN = math.floor(math.sqrt(N)) + 1\r\n    return nextN * nextN "
    },
    {
        "number": 245,
        "prompt": "Write a function to find the maximum sum of bi-tonic sub-sequence for the given array.\ndef max_sum(arr, n): \n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    max_sum = 0\n    for i in range(n): \n        for j in range(i+1, n): \n            # check if arr[i] is equal to arr[j] or arr[i]+arr[j] is 0\n            if arr[i] == arr[j] or arr[i]+arr[j] == 0: \n                max_sum += arr[i] \n    return max_sum \n\ndef main(): \n    arr = [5, -2, 3, 1, -4, 2, 1] \n    n = len(arr) \n    print(\"The maximum sum of a bi-tonic sub-sequence is:\", max_sum(arr, n)) \n\nif __name__ == \"__main__\": \n    main() ",
        "generated_testcode": "assert max_sum([1, 2, 3, 4, 2, 5, 7, 10, 8, 3, 5], 8) == 29\n",
        "test": "assert max_sum([1, 15, 51, 45, 33, 100, 12, 18, 9], 9) == 194\nassert max_sum([80, 60, 30, 40, 20, 10], 6) == 210\nassert max_sum([2, 3 ,14, 16, 21, 23, 29, 30], 8) == 138",
        "canonical_solution": "def max_sum(arr, n): \r\n\tMSIBS = arr[:] \r\n\tfor i in range(n): \r\n\t\tfor j in range(0, i): \r\n\t\t\tif arr[i] > arr[j] and MSIBS[i] < MSIBS[j] + arr[i]: \r\n\t\t\t\tMSIBS[i] = MSIBS[j] + arr[i] \r\n\tMSDBS = arr[:] \r\n\tfor i in range(1, n + 1): \r\n\t\tfor j in range(1, i): \r\n\t\t\tif arr[-i] > arr[-j] and MSDBS[-i] < MSDBS[-j] + arr[-i]: \r\n\t\t\t\tMSDBS[-i] = MSDBS[-j] + arr[-i] \r\n\tmax_sum = float(\"-Inf\") \r\n\tfor i, j, k in zip(MSIBS, MSDBS, arr): \r\n\t\tmax_sum = max(max_sum, i + j - k) \r\n\treturn max_sum"
    },
    {
        "number": 246,
        "prompt": "Write a function for computing square roots using the babylonian method.\ndef babylonian_squareroot(number):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    # initial guess\n    guess = number/2\n    # error tolerance\n    error_margin = 0.00000001\n    while True:\n        # calculate the next guess\n        new_guess = (guess + number/guess)/2\n        # check if the difference between the two guesses is less than the error margin\n        if abs(new_guess - guess) < error_margin:\n            return new_guess\n        # update the guess\n        guess = new_guess\n        \n# test the function\nnumber = 25\nprint(babylonian_squareroot(number)) # should print 5.0\nnumber = 5\nprint(babylonian_squareroot(number)) # should print 2.2360679774999789815\n        ",
        "generated_testcode": "assert babylonian_squareroot(16) == 4\n",
        "test": "assert babylonian_squareroot(10)==3.162277660168379\nassert babylonian_squareroot(2)==1.414213562373095\nassert babylonian_squareroot(9)==3.0",
        "canonical_solution": "def babylonian_squareroot(number):\r\n    if(number == 0):\r\n        return 0;\r\n    g = number/2.0;\r\n    g2 = g + 1;\r\n    while(g != g2):\r\n        n = number/ g;\r\n        g2 = g;\r\n        g = (g + n)/2;\r\n    return g;"
    },
    {
        "number": 247,
        "prompt": "Write a function to find the longest palindromic subsequence in the given string.\ndef lps(str): \n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    n = len(str) \n    dp = [[0 for x in range(n)] for y in range(n)] \n    for i in range(n): \n        dp[i][i] = 1\n  \n    for cl in range(2, n+1): \n        for i in range(n-cl+1): \n            j = i+cl-1\n            if str[i] == str[j] and cl == 2: \n                dp[i][j] = 2\n            elif str[i] == str[j]: \n                dp[i][j] = 2 + dp[i+1][j-1] \n            else: \n                dp[i][j] = max(dp[i+1][j], dp[i][j-1]) \n  \n    return dp[0][n-1] \n  \n# Driver program to test the above function \nstr = \"BBABCBCAC\"\nprint (\"Length of LPS is\", lps(str)) \n\n# This code is contributed by Manas Mishra ",
        "generated_testcode": "assert lps(\"bbbab\") == 4\n",
        "test": "assert lps(\"TENS FOR TENS\") == 5 \nassert lps(\"CARDIO FOR CARDS\") == 7\nassert lps(\"PART OF THE JOURNEY IS PART\") == 9 ",
        "canonical_solution": "def lps(str): \r\n\tn = len(str) \r\n\tL = [[0 for x in range(n)] for x in range(n)] \r\n\tfor i in range(n): \r\n\t\tL[i][i] = 1\r\n\tfor cl in range(2, n+1): \r\n\t\tfor i in range(n-cl+1): \r\n\t\t\tj = i+cl-1\r\n\t\t\tif str[i] == str[j] and cl == 2: \r\n\t\t\t\tL[i][j] = 2\r\n\t\t\telif str[i] == str[j]: \r\n\t\t\t\tL[i][j] = L[i+1][j-1] + 2\r\n\t\t\telse: \r\n\t\t\t\tL[i][j] = max(L[i][j-1], L[i+1][j]); \r\n\treturn L[0][n-1]"
    },
    {
        "number": 248,
        "prompt": "Write a function to calculate the harmonic sum of n-1.\ndef harmonic_sum(n):\n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    if n == 1:\n        return 1\n    return 1/n + harmonic_sum(n-1)\n\n# Test the function with n = 5\nprint(harmonic_sum(5))  # Output: 2.283333333333333333335\n\n# Write a recursive function to calculate the factorial of a number.\ndef factorial(n):\n    if n == 1:\n        return 1\n    return n * factorial(n-1)\n\n# Test the function with n = 5\nprint(factorial(5))  # Output: 120\n\n# Write a function to calculate the nth Fibonacci number recursively.\ndef fibonacci(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fibonacci(n-1) + fibonacci(n-2)\n\n# Test the function with n = 5\nprint(fibonacci(5))  # Output: 5\n\n# Write a function to check if a number is prime.\ndef is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            return False\n    return True\n\n# Test the function with n = 17\nprint(is_prime(17))",
        "generated_testcode": "assert harmonic_sum(1) == 1\n",
        "test": "assert harmonic_sum(7) == 2.5928571428571425\nassert harmonic_sum(4) == 2.083333333333333\nassert harmonic_sum(19) == 3.547739657143682",
        "canonical_solution": "def harmonic_sum(n):\r\n  if n < 2:\r\n    return 1\r\n  else:\r\n    return 1 / n + (harmonic_sum(n - 1)) "
    },
    {
        "number": 249,
        "prompt": "Write a function to find the intersection of two arrays using lambda function.\ndef intersection_array(array_nums1,array_nums2):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    return list(filter(lambda x: x in set(array_nums1),array_nums2))\n\n# Testing the function\narray_nums1 = [1,2,2,3,4,5,6]\narray_nums2 = [2,4,5,6,7,8]\nprint(intersection_array(array_nums1,array_nums2)) #[2, 4, 5, 6]\n\narray_nums1 = [1,3,5,7,9]\narray_nums2 = [2,4,6,8,10]\nprint(intersection_array(array_nums1,array_nums2)) #[]\n\narray_nums1 = [1,2,3,4,5,6]\narray_nums2 = [2,4,5,6,7,8]\nprint(intersection_array(array_nums1,array_nums2)) #[2, 4, 5, 6] ",
        "generated_testcode": "assert intersection_array([1,2,3,4,5],[2,4,6,8]) == [2,4]\n",
        "test": "assert intersection_array([1, 2, 3, 5, 7, 8, 9, 10],[1, 2, 4, 8, 9])==[1, 2, 8, 9]\nassert intersection_array([1, 2, 3, 5, 7, 8, 9, 10],[3,5,7,9])==[3,5,7,9]\nassert intersection_array([1, 2, 3, 5, 7, 8, 9, 10],[10,20,30,40])==[10]",
        "canonical_solution": "def intersection_array(array_nums1,array_nums2):\r\n result = list(filter(lambda x: x in array_nums1, array_nums2)) \r\n return result"
    },
    {
        "number": 250,
        "prompt": "Write a python function to count the occcurences of an element in a tuple.\ndef count_X(tup, x): \n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    count = 0\n    for i in tup: \n        if i == x: \n            count += 1\n    return count \n  \n# Example usage: \nt = (1, 3, 5, 7, 3, 9, 5) \nprint(count_X(t, 5)) # Output: 2 \n\n# Time Complexity: O(n)\n# Space Complexity: O(1)\n\ndef count_X(tup, x): \n    return tup.count(x)\n  \n# Example usage: \nt = (1, 3, 5, 7, 3, 9, 5) \nprint(count_X(t, 5)) # Output: 2 \n\n# Time Complexity: O(n)\n# Space Complexity: O(1) ",
        "generated_testcode": "assert count_X((1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3), 3) == 2\n",
        "test": "assert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),4) == 0\nassert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),10) == 3\nassert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),8) == 4",
        "canonical_solution": "def count_X(tup, x): \r\n    count = 0\r\n    for ele in tup: \r\n        if (ele == x): \r\n            count = count + 1\r\n    return count "
    },
    {
        "number": 251,
        "prompt": "Write a function to insert an element before each element of a list.\ndef insert_element(list,element):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": true,
        "answer": "    new_list = []\n    for i in range(len(list)):\n        new_list.append(element)\n        new_list.append(list[i])\n    return new_list\n    \n# Test the function\nlist1 = [1,2,3,4,5]\nelement = 0\nprint(insert_element(list1,element)) ",
        "generated_testcode": "assert insert_element([1,2,3,4,5],0) == [0,1,0,2,0,3,0,4,0,5]\n",
        "test": "assert insert_element(['Red', 'Green', 'Black'] ,'c')==['c', 'Red', 'c', 'Green', 'c', 'Black'] \nassert insert_element(['python', 'java'] ,'program')==['program', 'python', 'program', 'java'] \nassert insert_element(['happy', 'sad'] ,'laugh')==['laugh', 'happy', 'laugh', 'sad'] ",
        "canonical_solution": "def insert_element(list,element):\r\n list = [v for elt in list for v in (element, elt)]\r\n return list"
    },
    {
        "number": 252,
        "prompt": "Write a python function to convert complex numbers to polar coordinates.\ndef convert(numbers):    \n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    import cmath\n    result = []\n    for number in numbers:\n        r = abs(number)\n        theta = cmath.phase(number)\n        result.append((r, theta))\n    return result\n\n# Example usage:\nnumbers = [3+4j, -5-6j, 2+0j]\nprint(convert(numbers))  # Output: [(5.0, 0.982793723228718345), (7.81024967590564382, 2.2086506303597178), (2.0, 0.0)]\n\n# Test the function with the given test cases\nassert convert([3+4j, -5-6j, 2+0j]) == [(5.0, 0.982793723228718345), (7.81024967590564382, 2.2086506303597178), (2.0, 0.0)]\nassert convert([1+0j, 1j, 1, 0]) == [(1.0, 0.0), (1.0, 1.570796326794896665), (1.0, 0.0), (0.0,",
        "generated_testcode": "assert convert(1+2j) == (2.236067977749979, 0.131699875378540345)\n",
        "test": "assert convert(1) == (1.0, 0.0)\nassert convert(4) == (4.0,0.0)\nassert convert(5) == (5.0,0.0)",
        "canonical_solution": "import cmath  \r\ndef convert(numbers):    \r\n  num = cmath.polar(numbers)  \r\n  return (num) "
    },
    {
        "number": 253,
        "prompt": "Write a python function to count integers from a given list.\ndef count_integer(list1):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    count = 0\n    for i in list1:\n        if type(i) == int:\n            count += 1\n    return count\n\n# Example usage:\nlist1 = [1, 'a', 2, 'b', 3, 4, 'c']\nprint(count_integer(list1)) # Output: 3\n",
        "generated_testcode": "assert count_integer([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 7\n",
        "test": "assert count_integer([1,2,'abc',1.2]) == 2\nassert count_integer([1,2,3]) == 3\nassert count_integer([1,1.2,4,5.1]) == 2",
        "canonical_solution": "def count_integer(list1):\r\n    ctr = 0\r\n    for i in list1:\r\n        if isinstance(i, int):\r\n            ctr = ctr + 1\r\n    return ctr"
    },
    {
        "number": 254,
        "prompt": "Write a function to find all words starting with 'a' or 'e' in a given string.\ndef words_ae(text):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    words = text.split()\n    result = []\n    for word in words:\n        if word[0] in ['a', 'e']:\n            result.append(word)\n    return result\n\n# Test the function with the sample text\nprint(words_ae(\"The quick brown fox jumps over the lazy dog\"))  # Output: ['The', 'quick', 'brown', 'jumps', 'the', 'lazy', 'dog']\nprint(words_ae(\"Apple is better than banana\"))  # Output: ['Apple', 'is', 'better', 'than', 'banana']\nprint(words_ae(\"Axe effect is more powerful than Advil\"))  # Output: ['Axe', 'effect', 'is', 'more', 'powerful', 'than', 'Advil'] ",
        "generated_testcode": "assert words_ae(\"The quick brown fox jumps over the lazy dog\") == [\"The\", \"quick\", \"brown\", \"jumps\", \"over\", \"the\", \"lazy\", \"dog\"]\n",
        "test": "assert words_ae(\"python programe\")==['ame']\nassert words_ae(\"python programe language\")==['ame','anguage']\nassert words_ae(\"assert statement\")==['assert', 'atement']",
        "canonical_solution": "import re\r\ndef words_ae(text):\r\n list = re.findall(\"[ae]\\w+\", text)\r\n return list"
    },
    {
        "number": 255,
        "prompt": "Write a function to choose specified number of colours from three different colours and generate all the combinations with repetitions.\ndef combinations_colors(l, n):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    result = []\n    for r in range(1, n+1):\n        result += list(itertools.combinations_with_replacement(l, r))\n    return result\n\n# Test the function with an example\ncolors = ['red', 'green', 'blue']\nnum_of_colors = 3\nprint(combinations_colors(colors, num_of_colors))\n\n# Expected Output: [('red', 'red', 'red'), ('red', 'red', 'green'), ('red', 'red', 'blue'), ('red', 'green', 'green'), ('red', 'green', 'blue'), ('red', 'blue', 'blue'), ('green', 'green', 'green'), ('green', 'green', 'blue'), ('green', 'blue', 'blue'), ('blue', 'blue', 'blue')]\n\n# Note: The output should be in the form of tuples.\n\n# Import the itertools module to use the combinations_with_replacement function\nimport itertools\n\n# Define the function\ndef combinations_colors(l, n):\n    result = []\n    for r in range(1, n+1):\n        result += list(itertools.combinations_with_replacement(l, r))\n    return result\n\n# Test the function with an example\ncolors = ['red', 'green', 'blue']\nnum_of_colors = 3\nprint(combinations_colors(colors, num_of_colors))\n\n# Expected Output: [('red', 'red', 'red",
        "generated_testcode": "assert combinations_colors(['red', 'blue', 'green'], 2) == [('red', 'red'), ('red', 'blue'), ('red', 'green'), ('blue', 'blue'), ('blue', 'green'), ('green', 'green')]\n",
        "test": "assert combinations_colors( [\"Red\",\"Green\",\"Blue\"],1)==[('Red',), ('Green',), ('Blue',)]\nassert combinations_colors( [\"Red\",\"Green\",\"Blue\"],2)==[('Red', 'Red'), ('Red', 'Green'), ('Red', 'Blue'), ('Green', 'Green'), ('Green', 'Blue'), ('Blue', 'Blue')]\nassert combinations_colors( [\"Red\",\"Green\",\"Blue\"],3)==[('Red', 'Red', 'Red'), ('Red', 'Red', 'Green'), ('Red', 'Red', 'Blue'), ('Red', 'Green', 'Green'), ('Red', 'Green', 'Blue'), ('Red', 'Blue', 'Blue'), ('Green', 'Green', 'Green'), ('Green', 'Green', 'Blue'), ('Green', 'Blue', 'Blue'), ('Blue', 'Blue', 'Blue')]",
        "canonical_solution": "from itertools import combinations_with_replacement \r\ndef combinations_colors(l, n):\r\n    return list(combinations_with_replacement(l,n))\r"
    },
    {
        "number": 256,
        "prompt": "Write a python function to count the number of prime numbers less than a given non-negative number.\ndef count_Primes_nums(n):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    count = 0\n    for num in range(2,n):\n        for i in range(2,num):\n            if num % i == 0:\n                break\n        else:\n            count += 1\n    return count\n\nprint(count_Primes_nums(20))\n\n# Another approach:\ndef count_Primes_nums(n):\n    count = 0\n    for num in range(2,n):\n        if all(num % i != 0 for i in range(2,num)):\n            count += 1\n    return count\n\nprint(count_Primes_nums(20))\n\n# using Sieve of Eratosthenes algorithm\ndef count_Primes_nums(n):\n    primes = [True] * (n+1)\n    p = 2\n    while p * p <= n:\n        if primes[p]:\n            for i in range(p * p, n+1, p):\n                primes[i] = False\n        p += 1\n    count = 0\n    for i in range(2, n):\n        if primes[i]:\n            count += 1\n    return count\n\nprint(count_Primes_nums(20))",
        "generated_testcode": "assert count_Primes_nums(10) == 4\n",
        "test": "assert count_Primes_nums(5) == 2\nassert count_Primes_nums(10) == 4\nassert count_Primes_nums(100) == 25",
        "canonical_solution": "def count_Primes_nums(n):\r\n    ctr = 0\r\n    for num in range(n):\r\n        if num <= 1:\r\n            continue\r\n        for i in range(2,num):\r\n            if (num % i) == 0:\r\n                break\r\n        else:\r\n            ctr += 1\r\n    return ctr"
    },
    {
        "number": 257,
        "prompt": "Write a function to swap two numbers.\ndef swap_numbers(a,b):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    temp = a\n    a = b\n    b = temp\n    return a, b\n\n# Test the function\na = 5\nb = 10\na, b = swap_numbers(a,b)\nprint(\"After swapping a =\", a, \"and b =\", b) # Output: a = 10 and b = 5 ",
        "generated_testcode": "assert swap_numbers(1,2) == (2,1)\n",
        "test": "assert swap_numbers(10,20)==(20,10)\nassert swap_numbers(15,17)==(17,15)\nassert swap_numbers(100,200)==(200,100)",
        "canonical_solution": "def swap_numbers(a,b):\r\n temp = a\r\n a = b\r\n b = temp\r\n return (a,b)"
    },
    {
        "number": 258,
        "prompt": "Write a function to find number of odd elements in the given list using lambda function.\ndef count_odd(array_nums):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    return len(list(filter(lambda x: x % 2 != 0, array_nums))\n\n#Test cases\nprint(count_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])) # Output: 5\nprint(count_odd([1, 3, 5, 7, 9])) # Output: 4\nprint(count_odd([2, 4, 6, 8])) # Output: 0\nprint(count_odd([])) # Output: 0 ",
        "generated_testcode": "assert count_odd([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 4\n",
        "test": "assert count_odd([1, 2, 3, 5, 7, 8, 10])==4\nassert count_odd([10,15,14,13,-18,12,-20])==2\nassert count_odd([1, 2, 4, 8, 9])==2",
        "canonical_solution": "def count_odd(array_nums):\r\n   count_odd = len(list(filter(lambda x: (x%2 != 0) , array_nums)))\r\n   return count_odd"
    },
    {
        "number": 259,
        "prompt": "Write a function to maximize the given two tuples.\ndef maximize_elements(test_tup1, test_tup2):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": true,
        "answer": "    max_tup = ()\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            max_tup += (test_tup1[i],)\n        else:\n            max_tup += (test_tup2[i],)\n    return max_tup\n\n# Testing the function with sample tuples\ntest_tup1 = (1, 3, 5, 7, 9)\ntest_tup2 = (2, 4, 6, 8, 10)\nprint(maximize_elements(test_tup1, test_tup2))\n\n# Output: (2, 5, 7, 10)\n\ntest_tup1 = (1, 2, 3, 4)\ntest_tup2 = (5, 6, 7, 8)\nprint(maximize_elements(test_tup1, test_tup2))\n\n# Output: (5, 6, 7, 8)\n\ntest_tup1 = (1, 2, 3, 4, 5)\ntest_tup2 = (5, 4, 3, 2, 1)\nprint(maximize_elements(test_tup1, test_tup2))\n\n# Output: (5, 4, 3, 5)\n\n# Time Complexity: O(n)",
        "generated_testcode": "assert maximize_elements((1, 2, 3), (4, 5, 6)) == (4, 5, 6)\n",
        "test": "assert maximize_elements(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((6, 7), (4, 9), (2, 9), (7, 10))\nassert maximize_elements(((2, 4), (5, 6), (3, 10), (2, 11)), ((7, 8), (4, 10), (2, 2), (8, 4))) == ((7, 8), (5, 10), (3, 10), (8, 11))\nassert maximize_elements(((3, 5), (6, 7), (4, 11), (3, 12)), ((8, 9), (5, 11), (3, 3), (9, 5))) == ((8, 9), (6, 11), (4, 11), (9, 12))",
        "canonical_solution": "def maximize_elements(test_tup1, test_tup2):\r\n  res = tuple(tuple(max(a, b) for a, b in zip(tup1, tup2))\r\n   for tup1, tup2 in zip(test_tup1, test_tup2))\r\n  return (res) "
    },
    {
        "number": 260,
        "prompt": "Write a function to find the nth newman\u2013shanks\u2013williams prime number.\ndef newman_prime(n): \n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    # initialize variables\n    current_count = 1\n    current_prime = 2\n    count = 0\n    # while loop to find nth prime\n    while count != n:\n        current_prime += 1\n        is_prime = True\n        for i in range(2, int(current_prime ** 0.5) + 1):\n            if current_prime % i == 0:\n                is_prime = False\n                break\n        if is_prime:\n            count += 1\n    return current_prime\n\nprint(newman_prime(10))  # output: 29\n\n# Find the first n primes\nn = 10\ncurrent_count = 1\ncurrent_prime = 2\ncount = 0\nwhile count != n:\n    current_prime += 1\n    is_prime = True\n    for i in range(2, int(current_prime ** 0.5) + 1):\n        if current_prime % i == 0:\n            is_prime = False\n            break\n    if is_prime:\n        print(current_prime)\n        count += 1\n\n# Output: \n# 2\n# 3\n# 5\n# 7\n# 11\n# 13\n# 17\n# 19\n# 23\n# 29\n# 31\n# 37\n# 41\n# 43\n# 47 ",
        "generated_testcode": "assert newman_prime(1) == 5\n",
        "test": "assert newman_prime(3) == 7 \nassert newman_prime(4) == 17\nassert newman_prime(5) == 41",
        "canonical_solution": "def newman_prime(n): \r\n\tif n == 0 or n == 1: \r\n\t\treturn 1\r\n\treturn 2 * newman_prime(n - 1) + newman_prime(n - 2)"
    },
    {
        "number": 261,
        "prompt": "Write a function to perform mathematical division operation across the given tuples.\ndef division_elements(test_tup1, test_tup2):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    result_tup = tuple(round(x/y, 2) for x, y in zip(test_tup1, test_tup2))\n    return result_tup\n\n# Example usage:\ntest_tup1 = (10, 5, 12, 20)\ntest_tup2 = (2, 3, 4, 5)\nresult = division_elements(test_tup1, test_tup2)\nprint(result) # Output: (5.0, 1.67, 3.0, 4.0)\n\n# In this function, we are using the zip() function to iterate over both tuples simultaneously and performing the division operation on each pair of elements. We are using the round() function to round the result to 2 decimal places. The result is then returned as a tuple. ",
        "generated_testcode": "assert division_elements((2, 4, 6, 8, 10), (1, 2, 3, 4)) == (2, 2, 2, 2)\n",
        "test": "assert division_elements((10, 4, 6, 9),(5, 2, 3, 3)) == (2, 2, 2, 3)\nassert division_elements((12, 6, 8, 16),(6, 3, 4, 4)) == (2, 2, 2, 4)\nassert division_elements((20, 14, 36, 18),(5, 7, 6, 9)) == (4, 2, 6, 2)",
        "canonical_solution": "def division_elements(test_tup1, test_tup2):\r\n  res = tuple(ele1 // ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\r\n  return (res) "
    },
    {
        "number": 262,
        "prompt": "Write a function to split a given list into two parts where the length of the first part of the list is given.\ndef split_two_parts(list1, L):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    #return first part of list with length L and second part of list\n    first_part = list1[:L]\n    second_part = list1[L:]\n    return first_part, second_part\n\n#Example usage:\nprint(split_two_parts([1, 2, 3, 4, 5, 6, 7, 8, 9], 3)) #output: ([1, 2, 3], [4, 5, 6, 7, 8, 9])\nprint(split_two_parts([1, 2, 3, 4, 5], 2)) #output: ([1, 2], [3, 4, 5])\nprint(split_two_parts([1], 0)) #output: ([], [1]) \n\n#Test the function with edge cases\nprint(split_two_parts([], 0)) #output: ([], [])\nprint(split_two_parts([1, 2], 1)) #output: ([1], [2])\nprint(split_two_parts([1, 2], 2)) #output: ([1, 2], [])\nprint(split_two_parts([1, 2, 3], 3)) #output: ([1, 2, 3], [])\n\n# function to find the smallest missing number in a list\ndef find_smallest_missing_number(lst):\n    #sort the list in ascending order\n    lst.sort()\n    #",
        "generated_testcode": "assert split_two_parts([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\"], 3) == ([\"a\", \"b\", \"c\"], [\"d\", \"e\", \"f\", \"g\", \"h\"])\n",
        "test": "assert split_two_parts([1,1,2,3,4,4,5,1],3)==([1, 1, 2], [3, 4, 4, 5, 1])\nassert split_two_parts(['a', 'b', 'c', 'd'],2)==(['a', 'b'], ['c', 'd'])\nassert split_two_parts(['p', 'y', 't', 'h', 'o', 'n'],4)==(['p', 'y', 't', 'h'], ['o', 'n'])",
        "canonical_solution": "def split_two_parts(list1, L):\r\n    return list1[:L], list1[L:]"
    },
    {
        "number": 263,
        "prompt": "Write a function to merge two dictionaries.\ndef merge_dict(d1,d2):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    return {**d1,**d2}\n\n# Test the function with two dictionaries\nd1 = {'a':1,'b':2}\nd2 = {'c':3,'d':4}\nprint(merge_dict(d1,d2))\n\n# Output: {'a': 1, 'b': 2, 'c': 3, 'd': 4}\n\n# Example usage:\nd1 = {'a':1,'b':2}\nd2 = {'c':3,'d':4}\nprint(merge_dict(d1,d2)) # Output: {'a': 1, 'b': 2, 'c': 3, 'd': 4}\n\nd1 = {'e':5,'f':6}\nd2 = {'g':7,'h':8}\nprint(merge_dict(d1,d2)) # Output: {'e': 5, 'f': 6, 'g': 7, 'h': 8} ",
        "generated_testcode": "assert merge_dict({'a':1,'b':2},{'c':3,'d':4}) == {'a':1,'b':2,'c':3,'d':4}\n",
        "test": "assert merge_dict({'a': 100, 'b': 200},{'x': 300, 'y': 200})=={'x': 300, 'y': 200, 'a': 100, 'b': 200}\nassert merge_dict({'a':900,'b':900,'d':900},{'a':900,'b':900,'d':900})=={'a':900,'b':900,'d':900,'a':900,'b':900,'d':900}\nassert merge_dict({'a':10,'b':20},{'x':30,'y':40})=={'x':30,'y':40,'a':10,'b':20}",
        "canonical_solution": "def merge_dict(d1,d2):\r\n d = d1.copy()\r\n d.update(d2)\r\n return d"
    },
    {
        "number": 264,
        "prompt": "Write a function to calculate a dog's age in dog's years.\ndef dog_age(h_age):\n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    d_age = h_age * 7\n    return d_age\n\n# Test the function with an example input\nprint(dog_age(5))  # Output: 35\n\n# Write a function to calculate a cat's age in cat's years.\ndef cat_age(h_age):\n    c_age = h_age * 15\n    return c_age\n\n# Test the function with an example input\nprint(cat_age(5))  # Output: 75\n\n# Write a function to calculate a rabbit's age in rabbit's years.\ndef rabbit_age(h_age):\n    r_age = h_age * 12\n    return r_age\n\n# Test the function with an example input\nprint(rabbit_age(5))  # Output: 60\n\n# Write a function to calculate a human's age in years based on a birth year.\ndef human_age(birth_year, current_year):\n    age = current_year - birth_year\n    return age\n\n# Test the function with an example input\nprint(human_age(1990, 2021))  # Output: 31\n\n# Write a function to calculate the number of years until a human reaches retirement (65 years old).\ndef years_to_retirement(birth_year):\n    current_year = 2021\n    years_left = 65 - (current_year - birth_year)",
        "generated_testcode": "assert dog_age(1) == 7\n",
        "test": "assert dog_age(12)==61\nassert dog_age(15)==73\nassert dog_age(24)==109",
        "canonical_solution": "def dog_age(h_age):\r\n if h_age < 0:\r\n \texit()\r\n elif h_age <= 2:\r\n\t d_age = h_age * 10.5\r\n else:\r\n\t d_age = 21 + (h_age - 2)*4\r\n return d_age"
    },
    {
        "number": 265,
        "prompt": "Write a function to split a list for every nth element.\ndef list_split(S, step):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    i = 0\n    result = []\n    sub_list = []\n    for item in S:\n        sub_list.append(item)\n        i += 1\n        if i % step == 0:\n            result.append(sub_list)\n            sub_list = []\n    if sub_list:\n        result.append(sub_list)\n    return result\n\n# Test the function with an example\nprint(list_split([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3))\n# Output: [[1, 2, 3], [4, 5, 6], [7, 8, 10]]\n\n# Function to find the index of the smallest element in a list\ndef find_smallest(S):\n    smallest = S[0]\n    index = 0\n    for i in range(1, len(S)):\n        if S[i] < smallest:\n            smallest = S[i]\n            index = i\n    return index\n\n# Test the function with an example\nprint(find_smallest([5, 2, 8, 9, 1, 6, 3, 7, 4]))  # Output: 3\n\n# Function to remove duplicates from a list\ndef remove_duplicates(S):\n    result = []\n    for item in S:\n        if item not in result:\n            result.append(item)\n    return result\n\n#",
        "generated_testcode": "assert list_split([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\"], 3) == [[\"a\", \"d\", \"g\", \"j\"], [\"b\", \"e\", \"h\"], [\"c\", \"f\", \"i\"], [\"k\"]]\n",
        "test": "assert list_split(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n'],3)==[['a', 'd', 'g', 'j', 'm'], ['b', 'e', 'h', 'k', 'n'], ['c', 'f', 'i', 'l']] \nassert list_split([1,2,3,4,5,6,7,8,9,10,11,12,13,14],3)==[[1,4,7,10,13], [2,5,8,11,14], [3,6,9,12]] \nassert list_split(['python','java','C','C++','DBMS','SQL'],2)==[['python', 'C', 'DBMS'], ['java', 'C++', 'SQL']] ",
        "canonical_solution": "def list_split(S, step):\r\n    return [S[i::step] for i in range(step)]"
    },
    {
        "number": 266,
        "prompt": "Write a function to find the lateral surface area of a cube.\ndef lateralsurface_cube(l):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    return 6 * (2 * l ** 2)\n\n#Test the function with a length of 5\nprint(lateralsurface_cube(5))  # Output: 150\n\n# Write a function to find the volume of a cube.\ndef volume_cube(l):\n    return l ** 3\n\n# Test the function with a length of 5\nprint(volume_cube(5))  # Output: 125\n\n# Write a function to find the volume of a sphere.\nimport math\n\ndef volume_sphere(r):\n    return (4/3) * math.pi * r ** 3\n\n# Test the function with a radius of 5\nprint(volume_sphere(5))  # Output: 523.6\n\n# Write a function to find the surface area of a sphere.\nimport math\n\ndef surface_sphere(r):\n    return 4 * math.pi * r ** 2\n\n# Test the function with a radius of 5\nprint(surface_sphere(5))  # Output: 314.1592653589793936\n\n# Write a function to find the volume of a cone.\nimport math\n\ndef volume_cone(r, h):\n    return (1/3) * math.pi * r ** 2 * h\n\n# Test the function with a radius of 5 and height of 10\nprint(volume_cone(5, ",
        "generated_testcode": "assert lateralsurface_cube(3) == 6 * 3 * 2\n",
        "test": "assert lateralsurface_cube(5)==100\nassert lateralsurface_cube(9)==324\nassert lateralsurface_cube(10)==400",
        "canonical_solution": "def lateralsurface_cube(l):\r\n  LSA = 4 * (l * l)\r\n  return LSA"
    },
    {
        "number": 267,
        "prompt": "Write a python function to find the sum of squares of first n odd natural numbers.\ndef square_Sum(n):  \n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    sum = 0\n    for i in range(1, 2*n, 2):  \n        sum += i*i\n    return sum \n  \n# Driver program to test above function \nn = 5\nprint(\"Sum of squares of first\", n, \"natural numbers is\", square_Sum(n)) ",
        "generated_testcode": "assert square_Sum(5) == 225 # 1^2 + 3^2 + 5^2 + 7^2 + 9^2 = 225\n",
        "test": "assert square_Sum(2) == 10\nassert square_Sum(3) == 35\nassert square_Sum(4) == 84",
        "canonical_solution": "def square_Sum(n):  \r\n    return int(n*(4*n*n-1)/3) "
    },
    {
        "number": 268,
        "prompt": "Write a function to find the n'th star number.\ndef find_star_num(n): \n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    # Create a string to store the stars\n    stars = ''\n    # Loop through and add stars to the string until the length is equal to n\n    for i in range(n):\n        stars += '*'\n    # Return the stars string\n    return stars\n\n# Test the function with a few inputs\nprint(find_star_num(5)) # Output: '*****'\nprint(find_star_num(10)) # Output: '**********'\nprint(find_star_num(1)) # Output: '*'\nprint(find_star_num(0)) # Output: '' ",
        "generated_testcode": "assert find_star_num(1) == \"*\"\n",
        "test": "assert find_star_num(3) == 37\nassert find_star_num(4) == 73\nassert find_star_num(5) == 121",
        "canonical_solution": "def find_star_num(n): \r\n\treturn (6 * n * (n - 1) + 1) "
    },
    {
        "number": 269,
        "prompt": "Write a function to find the ascii value of a character.\ndef ascii_value(k):\n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    return ord(k)\n\n#Test the function\nprint(ascii_value('a')) #97\nprint(ascii_value('Z')) #90\nprint(ascii_value('@')) #64\n\n# Write a function to check if a number is prime or not\ndef prime_number(n):\n    if n <= 1:\n        return False\n    for i in range(2,n):\n        if n%i == 0:\n            return False\n    return True\n\n#Test the function\nprint(prime_number(5)) #True\nprint(prime_number(12)) #False\nprint(prime_number(29)) #True\n\n# Write a function to find the square of a number\ndef square(x):\n    return x*x\n\n#Test the function\nprint(square(5)) #25\nprint(square(10)) #100\nprint(square(15)) #225\n\n# Write a function to find the cube of a number\ndef cube(x):\n    return x*x*x\n\n#Test the function\nprint(cube(5)) #125\nprint(cube(10)) #10000\nprint(cube(15)) #3375\n\n# Write a function to find the factorial of a number\ndef factorial(n):\n    if n == 0 or n == 1:\n        return 1\n    else:\n        return n * factorial(n-1)",
        "generated_testcode": "assert ascii_value('a') == 97\n",
        "test": "assert ascii_value('A')==65\nassert ascii_value('R')==82\nassert ascii_value('S')==83",
        "canonical_solution": "def ascii_value(k):\r\n  ch=k\r\n  return ord(ch)"
    },
    {
        "number": 270,
        "prompt": "Write a python function to find the sum of even numbers at even positions.\ndef sum_even_and_even_index(arr,n):  \n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    sum = 0\n    for i in range(0,n,2):\n        if arr[i]%2 == 0:\n            sum = sum + arr[i]\n    return sum\n\n# Test the function with an example array\narr = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]\nn = len(arr)\nprint(\"Sum of even numbers at even positions in the array is\",sum_even_and_even_index(arr,n)) ",
        "generated_testcode": "assert sum_even_and_even_index([1,2,3,4,5,6,7,8,9], 6) == 10\n",
        "test": "assert sum_even_and_even_index([5, 6, 12, 1, 18, 8],6) == 30\nassert sum_even_and_even_index([3, 20, 17, 9, 2, 10, 18, 13, 6, 18],10) == 26\nassert sum_even_and_even_index([5, 6, 12, 1],4) == 12",
        "canonical_solution": "def sum_even_and_even_index(arr,n):  \r\n    i = 0\r\n    sum = 0\r\n    for i in range(0,n,2): \r\n        if (arr[i] % 2 == 0) : \r\n            sum += arr[i]  \r\n    return sum"
    },
    {
        "number": 271,
        "prompt": "Write a python function to find the sum of fifth power of first n even natural numbers.\ndef even_Power_Sum(n): \n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    sum = 0\n    for i in range(1, n+1): \n        sum += (i**5) \n    return sum \n\n# test the function \nn = 10\nprint(\"Sum of fifth power of first\", n, \"even numbers is\", even_Power_Sum(n)) ",
        "generated_testcode": "assert even_Power_Sum(5) == 225\n",
        "test": "assert even_Power_Sum(2) == 1056\nassert even_Power_Sum(3) == 8832\nassert even_Power_Sum(1) == 32",
        "canonical_solution": "def even_Power_Sum(n): \r\n    sum = 0; \r\n    for i in range(1,n+1): \r\n        j = 2*i; \r\n        sum = sum + (j*j*j*j*j); \r\n    return sum; "
    },
    {
        "number": 272,
        "prompt": "Write a function to perfom the rear element extraction from list of tuples records.\ndef rear_extract(test_list):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    # Creating an empty list to store the last element of each tuple\n    result = []\n    \n    # Loop through each tuple in the list\n    for tup in test_list:\n        # Extract the last element of the tuple and append to the result list\n        result.append(tup[-1])\n    \n    # Return the result list\n    return result\n\n# Testing the function with sample data\ntest_list = [(1, 2, 3), (4, 5, 6), (7, 8, 9), (10, 11, 12)]\nprint(rear_extract(test_list)) # Output: [3, 6, 9, 12]\n\n# Another example with sample data\ntest_list = [(\"apple\", \"banana\", \"cherry\", \"date\"), (\"egg\", \"frog\", \"goat\", \"grape\"), (\"house\", \"ice\", \"jacket\", \"kite\")]\nprint(rear_extract(test_list)) # Output: ['date', 'grape', 'kite'] ",
        "generated_testcode": "assert rear_extract([(1, 2, 3), (4, 5, 6), (7, 8, 9)]) == (7, 8, 9)\n",
        "test": "assert rear_extract([(1, 'Rash', 21), (2, 'Varsha', 20), (3, 'Kil', 19)]) == [21, 20, 19]\nassert rear_extract([(1, 'Sai', 36), (2, 'Ayesha', 25), (3, 'Salman', 45)]) == [36, 25, 45]\nassert rear_extract([(1, 'Sudeep', 14), (2, 'Vandana', 36), (3, 'Dawood', 56)]) == [14, 36, 56]",
        "canonical_solution": "def rear_extract(test_list):\r\n  res = [lis[-1] for lis in test_list]\r\n  return (res) "
    },
    {
        "number": 273,
        "prompt": "Write a function to substract the contents of one tuple with corresponding index of other tuple.\ndef substract_elements(test_tup1, test_tup2):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] - test_tup2[i])\n    return tuple(result)\n\n# Test the function with the given tuples\ntest_tup1 = (10, 4, 5, 8, 2, 3)\ntest_tup2 = (5, 2, 3, 4, 7, 6)\nprint(substract_elements(test_tup1, test_tup2))  # Output: (-5, 2, 2, -4, -5, -3)\n\n# or\n# Using list comprehension\ndef substract_elements(test_tup1, test_tup2):\n    return tuple([test_tup1[i] - test_tup2[i] for i in range(len(test_tup1))])\n\n# Test the function with the given tuples\ntest_tup1 = (10, 4, 5, 8, 2, 3)\ntest_tup2 = (5, 2, 3, 4, 7, 6)\nprint(substract_elements(test_tup1, test_tup2))  # Output: (-5, 2, 2, -4, -5, -3) ",
        "generated_testcode": "assert substract_elements((1, 2, 3), (4, 5, 6)) == (-3, -3, -3)\n",
        "test": "assert substract_elements((10, 4, 5), (2, 5, 18)) == (8, -1, -13)\nassert substract_elements((11, 2, 3), (24, 45 ,16)) == (-13, -43, -13)\nassert substract_elements((7, 18, 9), (10, 11, 12)) == (-3, 7, -3)",
        "canonical_solution": "def substract_elements(test_tup1, test_tup2):\r\n  res = tuple(map(lambda i, j: i - j, test_tup1, test_tup2))\r\n  return (res) "
    },
    {
        "number": 274,
        "prompt": "Write a python function to find sum of even index binomial coefficients.\ndef even_binomial_Coeff_Sum( n): \n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    sum = 0\n    for i in range(n+1): \n        if (i % 2 == 0): \n            sum += binomialCoefficient(n, i) \n    return sum \n\n# Function to calculate binomial coefficient \ndef binomialCoefficient(n, k): \n    res = 1\n    for i in range(1, min(k, n-k)+1): \n        res *= (n-i+1)/i \n    return res \n\nn = int(input(\"Enter the value of n : \"))\nprint(even_binomial_Coeff_Sum(n)) ",
        "generated_testcode": "assert even_binomial_Coeff_Sum(5) == 10\n",
        "test": "assert even_binomial_Coeff_Sum(4) == 8\nassert even_binomial_Coeff_Sum(6) == 32\nassert even_binomial_Coeff_Sum(2) == 2",
        "canonical_solution": "import math  \r\ndef even_binomial_Coeff_Sum( n): \r\n    return (1 << (n - 1)) "
    },
    {
        "number": 275,
        "prompt": "Write a python function to find the position of the last removed element from the given array.\ndef get_Position(a,n,m): \n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": true,
        "answer": "    \"\"\"\n    a: array\n    n: size of array\n    m: element to be removed\n    \"\"\"\n    # Your code here\n    if m in a:\n        for i in range(n):\n            if a[i] == m:\n                a[i],a[n-1],n=a[n-1],a[i],n-1\n                return n\n    else:\n        return -1\n\n# example usage:\na = [1, 2, 3, 4, 5, 6, 5, 7, 5]\nn = len(a)\nm = 5\nprint(get_Position(a,n,m)) # output: 5\na = [1, 2, 3, 4, 5, 6, 7, 8]\nn = len(a)\nm = 10\nprint(get_Position(a,n,m)) # output: -1\n    ",
        "generated_testcode": "assert get_Position([1,2,3,4,5,6,7,8,9], 7, 6) == 6\n",
        "test": "assert get_Position([2,5,4],3,2) == 2\nassert get_Position([4,3],2,2) == 2\nassert get_Position([1,2,3,4],4,1) == 4",
        "canonical_solution": "import math as mt \r\ndef get_Position(a,n,m): \r\n    for i in range(n): \r\n        a[i] = (a[i] // m + (a[i] % m != 0))  \r\n    result,maxx = -1,-1\r\n    for i in range(n - 1,-1,-1): \r\n        if (maxx < a[i]): \r\n            maxx = a[i] \r\n            result = i \r\n    return result + 1"
    },
    {
        "number": 276,
        "prompt": "Write a function to find the volume of a cylinder.\ndef volume_cylinder(r,h):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    return 3.14*(r**2)*h\n\n#Test the function with a radius of 3 and a height of 4\nprint(volume_cylinder(3,4))\n\n#Write a function to find the surface area of a cylinder.\ndef surface_area_cylinder(r,h):\n    return 2*3.14*r*h + 2*3.14*r**2\n\n#Test the function with a radius of 3 and a height of 4\nprint(surface_area_cylinder(3,4))\n\n#Write a function to find the area of a rectangle.\ndef area_rectangle(l,w):\n    return l*w\n\n#Test the function with a length of 5 and a width of 4\nprint(area_rectangle(5,4))\n\n#Write a function to find the area of a square.\ndef area_square(a):\n    return a*a\n\n#Test the function with a side length of 5\nprint(area_square(5))\n\n#Write a function to find the area of a circle.\ndef area_circle(r):\n    return 3.14*r**2\n\n#Test the function with a radius of 3\nprint(area_circle(3))\n\n#Write a function to find the circumference of a circle.\ndef circumference_circle(r):\n    return 2*3.14*r\n\n#Test the function with a radius of 3\nprint",
        "generated_testcode": "assert volume_cylinder(3, 5) == 152.36\n",
        "test": "assert volume_cylinder(10,5)==1570.7500000000002\nassert volume_cylinder(4,5)==251.32000000000002\nassert volume_cylinder(4,10)==502.64000000000004",
        "canonical_solution": "def volume_cylinder(r,h):\r\n  volume=3.1415*r*r*h\r\n  return volume"
    },
    {
        "number": 277,
        "prompt": "Write a function to filter a dictionary based on values.\ndef dict_filter(dict,n):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    \"\"\"\n    Given a dictionary and an integer n, return a new dictionary that contains only the key-value pairs where the value is greater than n.\n    \"\"\"\n    return {k: v for k, v in dict.items() if v > n}\n\n# Test the function with the following dictionary and integer\nmy_dict = {'a': 5, 'b': 8, 'c': 3, 'd': 12, 'e': 18, 'f': 7}\nn = 10\nprint(dict_filter(my_dict, n))  # Output: {'b': 8, 'd': 12, 'e': 18}\n\n# Test the function with an empty dictionary and integer\nmy_dict = {}\nn = 5\nprint(dict_filter(my_dict, n))  # Output: {}\n\n# Test the function with an empty dictionary and no integer\nmy_dict = {}\nprint(dict_filter(my_dict))  # Output: TypeError: dict_filter() takes exactly 2 arguments (1 given)\n\n# Test the function with a dictionary and no integer\nmy_dict = {'a': 5, 'b': 8, 'c': 3, 'd': 12, 'e': 18, 'f': 7}\nprint(dict_filter(my_dict)  # Output: TypeError: dict_filter() missing 1 required positional argument: 'n'\n\n# Test the function with a dictionary and a string value for n\nmy_dict",
        "generated_testcode": "assert dict_filter({'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5}, 3) == {'a': 1, 'b': 2, 'c': 3}\n",
        "test": "assert dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},170)=={'Cierra Vega': 175, 'Alden Cantrell': 180, 'Pierre Cox': 190}\nassert dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},180)=={ 'Alden Cantrell': 180, 'Pierre Cox': 190}\nassert dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},190)=={ 'Pierre Cox': 190}",
        "canonical_solution": "def dict_filter(dict,n):\r\n result = {key:value for (key, value) in dict.items() if value >=n}\r\n return result"
    },
    {
        "number": 278,
        "prompt": "Write a function to find the element count that occurs before the record in the given tuple.\ndef count_first_elements(test_tup):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    count = 0\n    for i in range(len(test_tup) - 1):\n        if test_tup[i][0] > test_tup[i+1][0]:\n            count += 1\n    return count\n\n# Example usage:\ntest_tup = ((1, 2), (3, 4), (3, 5), (5, 6), (7, 8), (6, 7), (8, 9))\nprint(count_first_elements(test_tup)) # Output: 2 (as (3, 5) and (5, 6) occur before (6, 7) in the tuple) ",
        "generated_testcode": "assert count_first_elements(('a', 'b', 'c', 'a', 'd', 'a', 'e', 'f', 'a') == 3\n\n# The output should be 3, as there are 3 elements before the first 'a' in the tuple. ",
        "test": "assert count_first_elements((1, 5, 7, (4, 6), 10) ) == 3\nassert count_first_elements((2, 9, (5, 7), 11) ) == 2\nassert count_first_elements((11, 15, 5, 8, (2, 3), 8) ) == 4",
        "canonical_solution": "def count_first_elements(test_tup):\r\n  for count, ele in enumerate(test_tup):\r\n    if isinstance(ele, tuple):\r\n      break\r\n  return (count) "
    },
    {
        "number": 279,
        "prompt": "Write a function to find the nth decagonal number.\ndef is_num_decagonal(n): \n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    # create a list to store the decagonal numbers \n    decagonal_nums = [] \n    # loop through the numbers 1 to n \n    for i in range(1,n+1): \n        # find the i-th decagonal number \n        decagonal_num = (i * (3*i - 1) // 2) \n        # append the number to the list \n        decagonal_nums.append(decagonal_num) \n    # return the nth decagonal number \n    return decagonal_nums[n-1] \n\n# test the function \nprint(is_num_decagonal(10)) # should print 55 \nprint(is_num_decagonal(5)) # should print 20 \nprint(is_num_decagonal(1)) # should print 1 \nprint(is_num_decagonal(100)) # should print 4695 ",
        "generated_testcode": "assert is_num_decagonal(1) == 1\n",
        "test": "assert is_num_decagonal(3) == 27\nassert is_num_decagonal(7) == 175\nassert is_num_decagonal(10) == 370",
        "canonical_solution": "def is_num_decagonal(n): \r\n\treturn 4 * n * n - 3 * n "
    },
    {
        "number": 280,
        "prompt": "Write a function to search an element in the given array by using sequential search.\ndef sequential_search(dlist, item):\n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    found = False\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            found = True\n            return found\n    return found\n\n#Test the function\nprint(sequential_search([1, 2, 3, 4, 5, 6, 7], 3)) #True\nprint(sequential_search([1, 2, 3, 4, 5, 6, 7], 8)) #False\n\n#Write a function to search an element in the given array by using binary search\ndef binary_search(dlist, item):\n    first = 0\n    last = len(dlist) - 1\n    found = False\n    while first <= last and not found:\n        mid = (first + last) // 2\n        if dlist[mid] == item:\n            found = True\n        elif item < dlist[mid]:\n            last = mid - 1\n        else:\n            first = mid + 1\n    return found\n\n#Test the function\nprint(binary_search([1, 2, 3, 4, 5, 6, 7], 3)) #True\nprint(binary_search([1, 2, 3, 4, 5, 6, 7], 8)) #False\n\n#Write a function to search an element in the given array by using interpolation search\ndef interpolation_search(dlist, item):\n    low = 0\n    high = len(dlist)",
        "generated_testcode": "assert sequential_search([1, 2, 3, 4, 5, 6, 7, 8, 9], 5) == True\n",
        "test": "assert sequential_search([11,23,58,31,56,77,43,12,65,19],31) == (True, 3)\nassert sequential_search([12, 32, 45, 62, 35, 47, 44, 61],61) == (True, 7)\nassert sequential_search([9, 10, 17, 19, 22, 39, 48, 56],48) == (True, 6)",
        "canonical_solution": "def sequential_search(dlist, item):\r\n    pos = 0\r\n    found = False\r\n    while pos < len(dlist) and not found:\r\n        if dlist[pos] == item:\r\n            found = True\r\n        else:\r\n            pos = pos + 1\r\n    return found, pos"
    },
    {
        "number": 281,
        "prompt": "Write a python function to check if the elements of a given list are unique or not.\ndef all_unique(test_list):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    # Your code goes here\n    return len(test_list) == len(set(test_list))\n\n# Example usage:\nprint(all_unique([1, 2, 3, 4, 5])) # Output: True\nprint(all_unique([1, 2, 2, 3, 4, 5])) # Output: False ",
        "generated_testcode": "assert all_unique([1, 2, 3, 4, 5]) == True\n",
        "test": "assert all_unique([1,2,3]) == True\nassert all_unique([1,2,1,2]) == False\nassert all_unique([1,2,3,4,5]) == True",
        "canonical_solution": "def all_unique(test_list):\r\n    if len(test_list) > len(set(test_list)):\r\n        return False\r\n    return True"
    },
    {
        "number": 282,
        "prompt": "Write a function to substaract two lists using map and lambda function.\ndef sub_list(nums1,nums2):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    return list(map(lambda x,y: x-y,nums1,nums2))\n\n#Test the function with an example\nnums1 = [1,2,3,4,5,6,7]\nnums2 = [3,2,1,1,2,5]\nprint(sub_list(nums1,nums2)) #[-2,-1,2,3,1,-1,-2]\n\n#You can use the map function to apply a lambda function to each element of two lists and then create a new list with the result of the operation. Here we are using map function with two lists and subtracting the corresponding elements of the two lists. The lambda function takes two arguments x and y and returns x-y. The lambda function is applied to each element of the two lists using map function. ",
        "generated_testcode": "assert sub_list([1,2,3],[4,5,6]) == [-3,-3,-3]\n",
        "test": "assert sub_list([1, 2, 3],[4,5,6])==[-3,-3,-3]\nassert sub_list([1,2],[3,4])==[-2,-2]\nassert sub_list([90,120],[50,70])==[40,50]",
        "canonical_solution": "def sub_list(nums1,nums2):\r\n  result = map(lambda x, y: x - y, nums1, nums2)\r\n  return list(result)"
    },
    {
        "number": 283,
        "prompt": "Write a python function to check whether the frequency of each digit is less than or equal to the digit itself.\ndef validate(n): \n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    digits = [0]*10\n    while(n > 0): \n        digit = n % 10\n        digits[digit] += 1\n        n //= 10\n    for i in range(len(digits)): \n        if digits[i] > i: \n            return False\n    return True\n\n# Driver code \nn = 23445\nif(validate(n)): \n    print(n,\"is a valid number\") \nelse: \n    print(n,\"is not a valid number\") ",
        "generated_testcode": "assert validate(123456789) == True\n",
        "test": "assert validate(1234) == True\nassert validate(51241) == False\nassert validate(321) == True",
        "canonical_solution": "def validate(n): \r\n    for i in range(10): \r\n        temp = n;  \r\n        count = 0; \r\n        while (temp): \r\n            if (temp % 10 == i): \r\n                count+=1;  \r\n            if (count > i): \r\n                return False\r\n            temp //= 10; \r\n    return True"
    },
    {
        "number": 284,
        "prompt": "Write a function to check whether all items of a list are equal to a given string.\ndef check_element(list,element):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": true,
        "answer": "    for i in list:\n        if i != element:\n            return False\n    return True\n\nprint(check_element([1,1,1,1],1)) #True\nprint(check_element([1,1,2,1],1)) #False\nprint(check_element([],1)) #True\nprint(check_element([\"a\",\"a\",\"a\",\"a\"],\"a\")) #True\nprint(check_element([\"a\",\"a\",\"a\",\"b\"],\"a\")) #False\nprint(check_element([],\"a\")) #True\nprint(check_element([\"\",\"\",\"\"],\"\")) #True\nprint(check_element([\"a\",\"b\",\"c\"],\"a\")) #False\n\n#Explanation:\n#The function loops through the elements of the list and checks if any element is not equal to the given string. If it finds an element which is not equal to the string, it returns False. If it completes the loop without finding any element not equal to the string, it returns True. If the list is empty, it also returns True. ",
        "generated_testcode": "assert check_element(['a','a','a','a'],'a') == True\n",
        "test": "assert check_element([\"green\", \"orange\", \"black\", \"white\"],'blue')==False\nassert check_element([1,2,3,4],7)==False\nassert check_element([\"green\", \"green\", \"green\", \"green\"],'green')==True",
        "canonical_solution": "def check_element(list,element):\r\n  check_element=all(v== element for v in list)\r\n  return check_element"
    },
    {
        "number": 285,
        "prompt": "Write a function that matches a string that has an a followed by two to three 'b'.\ndef text_match_two_three(text):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    return re.search(r'ab{2,3}', text)\n\n# Example usage:\nprint(text_match_two_three('abc')) # Output: None\nprint(text_match_two_three('abb')) # Output: <re.Match object; span=(1, 3), match='abb'>\nprint(text_match_two_three('abbb')) # Output: <re.Match object; span=(1, 4), match='abbb'>\nprint(text_match_two_three('abbbb')) # Output: <re.Match object; span=(1, 5), match='abbbb'>\n\n# Write a function that matches a string that has a single 'a' followed by any number of 'b's, followed by a single 'c'.\ndef text_match_abc(text):\n    return re.search(r'ab*c', text)\n\n# Example usage:\nprint(text_match_abc('abc')) # Output: <re.Match object; span=(0, 3), match='abc'>\nprint(text_match_abc('abbc')) # Output: <re.Match object; span=(0, 4), match='abbc'>\nprint(text_match_abc('abbbbc')) # Output: <re.Match object; span=(0, 5), match='abbbbc'>\nprint(text_match_abc('abbbc')) # Output: <re.Match object; span=(0, 5), match='abbbc'>\n\n# Write a function",
        "generated_testcode": "assert text_match_two_three(\"abbb\") == True\n",
        "test": "assert text_match_two_three(\"ac\")==('Not matched!')\nassert text_match_two_three(\"dc\")==('Not matched!')\nassert text_match_two_three(\"abbbba\")==('Found a match!')",
        "canonical_solution": "import re\r\ndef text_match_two_three(text):\r\n        patterns = 'ab{2,3}'\r\n        if re.search(patterns,  text):\r\n                return 'Found a match!'\r\n        else:\r\n                return('Not matched!')"
    },
    {
        "number": 286,
        "prompt": "Write a function to find the largest sum of contiguous array in the modified array which is formed by repeating the given array k times.\ndef max_sub_array_sum_repeated(a, n, k): \n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    # Initialize max_sum to store the maximum sum\n    max_sum = float('-inf')\n    # Calculate the sum of the original array\n    total_sum = sum(a)\n    # Find the maximum sum of the first sub-array\n    curr_sum = max(a)\n    for i in range(1, k):\n        curr_sum += a[i % n]\n        max_sum = max(max_sum, curr_sum)\n    # Update the maximum sum for all the remaining sub-arrays\n    for i in range(1, k):\n        curr_sum = curr_sum - a[(i-1) % n] + a[(i+n-1) % n]\n        max_sum = max(max_sum, curr_sum)\n    # Return the maximum sum\n    return max_sum\n\n# Test the function\narr = [1, 2, 3, -10, 5]\nk = 3\nn = len(arr)\nprint(max_sub_array_sum_repeated(arr, n, k))\n\n# Output: 10\n# The repeated array is [1, 2, 3, -10, 5, 1, 2, 3, -10, 5, 1, 2, 3, -10, 5] and the maximum sum is 10. ",
        "generated_testcode": "assert max_sub_array_sum_repeated([1, 2, -5, 3, 4, -2, 7, 10, 8], 3, 2) == 33\n",
        "test": "assert max_sub_array_sum_repeated([10, 20, -30, -1], 4, 3) == 30\nassert max_sub_array_sum_repeated([-1, 10, 20], 3, 2) == 59\nassert max_sub_array_sum_repeated([-1, -2, -3], 3, 3) == -1",
        "canonical_solution": "def max_sub_array_sum_repeated(a, n, k): \r\n\tmax_so_far = -2147483648\r\n\tmax_ending_here = 0\r\n\tfor i in range(n*k): \r\n\t\tmax_ending_here = max_ending_here + a[i%n] \r\n\t\tif (max_so_far < max_ending_here): \r\n\t\t\tmax_so_far = max_ending_here \r\n\t\tif (max_ending_here < 0): \r\n\t\t\tmax_ending_here = 0\r\n\treturn max_so_far"
    },
    {
        "number": 287,
        "prompt": "Write a python function to find the sum of squares of first n even natural numbers.\ndef square_Sum(n):  \n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    sum = 0\n    for i in range(1,n+1):\n        if(i%2==0):\n            sum += i**2\n    return sum\n\n#take input from user\nn = int(input(\"Enter the value of n: \"))\nprint(\"Sum of squares of first\",n,\"even numbers is:\",square_Sum(n))\n\n#Example\n#Input: 10\n#Output: Sum of squares of first 10 even numbers is: 285\n",
        "generated_testcode": "assert square_Sum(10) == 285\n",
        "test": "assert square_Sum(2) == 20\nassert square_Sum(3) == 56\nassert square_Sum(4) == 120",
        "canonical_solution": "def square_Sum(n):  \r\n    return int(2*n*(n+1)*(2*n+1)/3)"
    },
    {
        "number": 288,
        "prompt": "Write a function to count array elements having modular inverse under given prime number p equal to itself.\ndef modular_inverse(arr, N, P):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    count = 0\n    for num in arr:\n        if pow(num, P-2, P) == 1:\n            count += 1\n    return count\n\narr = [1, 2, 3, 4, 5, 6, 7, 8, 9]\nP = 11\nprint(modular_inverse(arr, 11)) # Output: 4\n\narr = [2, 4, 5, 6, 8, 10, 11, 13]\nP = 17\nprint(modular_inverse(arr, 17)) # Output: 2\n\narr = [1, 2, 3, 4, 5, 6, 7, 8, 9]\nP = 2\nprint(modular_inverse(arr, 2)) # Output: 0\n\narr = [3, 5, 6, 8, 9, 11, 13, 14]\nP = 11\nprint(modular_inverse(arr, 11)) # Output: 2 ",
        "generated_testcode": "assert modular_inverse([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 11) == 3\n",
        "test": "assert modular_inverse([ 1, 6, 4, 5 ], 4, 7) == 2\nassert modular_inverse([1, 3, 8, 12, 12], 5, 13) == 3\nassert modular_inverse([2, 3, 4, 5], 4, 6) == 1",
        "canonical_solution": "def modular_inverse(arr, N, P):\r\n\tcurrent_element = 0\r\n\tfor i in range(0, N):\r\n\t\tif ((arr[i] * arr[i]) % P == 1):\r\n\t\t\tcurrent_element = current_element + 1\r\n\treturn current_element"
    },
    {
        "number": 289,
        "prompt": "Write a python function to calculate the number of odd days in a given year.\ndef odd_Days(N): \n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    # Initialize the count to 0\n    count = 0\n    for i in range(1,N+1): \n        # Get the day of the week for the first day of the year\n        day = datetime.datetime(N, 1, 1).weekday() \n        # Check if the year starts with a Monday or Wednesday\n        if day == 0 or day == 2: \n            count += 1\n        # Add the number of days in the month to the count\n        for j in range(1,13): \n            if j == 2: \n                # Leap year condition\n                if N % 4 == 0 and (N % 100 != 0 or N % 400 == 0): \n                    count += 29\n                else: \n                    count += 28\n            elif j in [4, 6, 9, 11]: \n                count += 30\n            else: \n                count += 31\n        # If the year ends with a Friday or Sunday, add an extra day\n        if day == 4 or day == 6: \n            count += 1\n    # Return the count\n    return count\n\n# Test the function with an example\nyear = 2020\nprint(\"Number of odd days in the year\", year, \":\", odd_Days(year)) \n\n# Output: Number of odd days in the year 2020 : 261 ",
        "generated_testcode": "assert odd_Days(2020) == 256\n",
        "test": "assert odd_Days(100) == 5\nassert odd_Days(50) ==6\nassert odd_Days(75) == 2",
        "canonical_solution": "def odd_Days(N): \r\n    hund1 = N // 100\r\n    hund4 = N // 400\r\n    leap = N >> 2\r\n    ordd = N - leap \r\n    if (hund1): \r\n        ordd += hund1 \r\n        leap -= hund1 \r\n    if (hund4): \r\n        ordd -= hund4 \r\n        leap += hund4 \r\n    days = ordd + leap * 2\r\n    odd = days % 7\r\n    return odd "
    },
    {
        "number": 290,
        "prompt": "Write a function to find the list of lists with maximum length.\ndef max_length(list1):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    max_length = 0\n    max_list = None\n    for l in list1:\n        if len(l) > max_length:\n            max_length = len(l)\n            max_list = [l]\n        elif len(l) == max_length:\n            max_list.append(l)\n    return max_list\n\n# Test the function\nlist1 = [[1, 2], [3, 4, 5], [6, 7, 8, 9], [10, 11, 12, 13, 14]]\nprint(max_length(list1))  # Output: [[3, 4, 5], [6, 7, 8, 9]]\n\n# Time Complexity: O(n^2)\n# Space Complexity: O(n)\n\n# Another approach using max() function\ndef max_length(list1):\n    return max(list1, key=len)\n\n# Test the function\nlist1 = [[1, 2], [3, 4, 5], [6, 7, 8, 9], [10, 11, 12, 13, 14]]\nprint(max_length(list1))  # Output: [10, 11, 12, 13, 14]\n\n# Time Complexity: O(n)\n# Space Complexity: O(1)\n",
        "generated_testcode": "assert max_length([\"apple\", \"banana\", \"cherry\", \"date\", \"elderberry\"]) == [\"apple\", \"banana\", \"cherry\", \"date\", \"elderberry\"]\n",
        "test": "assert max_length([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [13, 15, 17])\nassert max_length([[1], [5, 7], [10, 12, 14,15]])==(4, [10, 12, 14,15])\nassert max_length([[5], [15,20,25]])==(3, [15,20,25])",
        "canonical_solution": "def max_length(list1):\r\n    max_length = max(len(x) for x in  list1 )  \r\n    max_list = max((x) for x in   list1)\r\n    return(max_length, max_list)"
    },
    {
        "number": 291,
        "prompt": "Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\ndef count_no_of_ways(n, k): \n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    dp = [0] * (k + 1) \n    dp[0] = 1 \n    for i in range(1, n + 1): \n        temp = [0] * k \n        for j in range(1, k + 1): \n            temp[j - 1] = dp[j] \n            for l in range(1, k): \n                if j - l >= 0: \n                    temp[j] += dp[j - l] \n        dp = temp \n    return dp[-1] \n  \nn = 3 \nk = 3\nprint(\"Number of ways:\", count_no_of_ways(n, k)) ",
        "generated_testcode": "assert count_no_of_ways(3, 2) == 6\n",
        "test": "assert count_no_of_ways(2, 4) == 16\nassert count_no_of_ways(3, 2) == 6\nassert count_no_of_ways(4, 4) == 228",
        "canonical_solution": "def count_no_of_ways(n, k): \r\n\tdp = [0] * (n + 1) \r\n\ttotal = k \r\n\tmod = 1000000007\r\n\tdp[1] = k \r\n\tdp[2] = k * k\t \r\n\tfor i in range(3,n+1): \r\n\t\tdp[i] = ((k - 1) * (dp[i - 1] + dp[i - 2])) % mod \r\n\treturn dp[n]"
    },
    {
        "number": 292,
        "prompt": "Write a python function to find quotient of two numbers.\ndef find(n,m):  \n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    if m == 0:  \n        return \"division by zero\"  \n    else:  \n        return n / m  \n  \n#Take input from user  \nnum = int(input(\"Enter a number: \"))  \nden = int(input(\"Enter another number: \"):  \n  \n#Find the quotient  \nresult = find(num, den)  \n  \n#Print the result  \nprint(\"The quotient of\", num, \"and\", den, \"is\", result) \n\n#Test the function  \nfind(10,5) ",
        "generated_testcode": "assert find(10,5) == 2\n",
        "test": "assert find(10,3) == 3\nassert find(4,2) == 2\nassert find(20,5) == 4",
        "canonical_solution": "def find(n,m):  \r\n    q = n//m \r\n    return (q)"
    },
    {
        "number": 293,
        "prompt": "Write a function to find the third side of a right angled triangle.\ndef otherside_rightangle(w,h):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    third_side = (w**2 + h**2)**0.5\n    return third_side\n\n# function to find the area of a right angled triangle.\ndef area_rightangle(w,h):\n    third_side = otherside_rightangle(w,h)\n    area = 0.5*w*h\n    return area\n\n# function to find the perimeter of a right angled triangle.\ndef perimeter_rightangle(w,h):\n    third_side = otherside_rightangle(w,h)\n    perimeter = w + h + third_side\n    return perimeter\n\n# function to find the area of a square.\ndef area_square(side):\n    return side**2\n\n# function to find the perimeter of a square.\ndef perimeter_square(side):\n    return 4*side\n\n# function to find the area of a rectangle.\ndef area_rectangle(width,height):\n    return width*height\n\n# function to find the perimeter of a rectangle.\ndef perimeter_rectangle(width,height):\n    return 2*(width+height)\n\n# function to find the area of a circle.\ndef area_circle(radius):\n    import math\n    return math.pi*(radius**2)\n\n# function to find the perimeter of a circle.\ndef perimeter_circle(radius):\n    import math\n    return 2*math.pi*radius\n\n# function to find the area of a parallelogram.\n",
        "generated_testcode": "assert otherside_rightangle(3,4) == 5\n",
        "test": "assert otherside_rightangle(7,8)==10.63014581273465\nassert otherside_rightangle(3,4)==5\nassert otherside_rightangle(7,15)==16.55294535724685",
        "canonical_solution": "import math\r\ndef otherside_rightangle(w,h):\r\n  s=math.sqrt((w*w)+(h*h))\r\n  return s"
    },
    {
        "number": 294,
        "prompt": "Write a function to find the maximum value in a given heterogeneous list.\ndef max_val(listval):\n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    max_val = listval[0]\n    for item in listval:\n        if type(item) is int and item > max_val:\n            max_val = item\n    return max_val\n\n# Example usage:\nlistval = [3, \"hello\", 5, 1, 9, \"world\", 2, 7, 6]\nprint(max_val(listval)) # Output: 9\n\nlistval2 = [\"apple\", \"banana\", \"cherry\", \"orange\", \"kiwi\", \"mango\"]\nprint(max_val(listval2)) # Output: 3",
        "generated_testcode": "assert max_val([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 9\n",
        "test": "assert max_val(['Python', 3, 2, 4, 5, 'version'])==5\nassert max_val(['Python', 15, 20, 25])==25\nassert max_val(['Python', 30, 20, 40, 50, 'version'])==50",
        "canonical_solution": "def max_val(listval):\r\n     max_val = max(i for i in listval if isinstance(i, int)) \r\n     return(max_val)"
    },
    {
        "number": 295,
        "prompt": "Write a function to return the sum of all divisors of a number.\ndef sum_div(number):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    divisor_sum = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            divisor_sum += i\n    return divisor_sum\n\n# Test the function\nprint(sum_div(12))  # Output: 28 (1 + 2 + 3 + 4 + 6 + 12 = 28)\nprint(sum_div(10))  # Output: 18 (1 + 2 + 5 + 10 = 18)\nprint(sum_div(20))  # Output: 40 (1 + 2 + 4 + 5 + 8 + 10 = 40) ",
        "generated_testcode": "assert sum_div(12) == 18\n",
        "test": "assert sum_div(8)==7\nassert sum_div(12)==16\nassert sum_div(7)==1",
        "canonical_solution": "def sum_div(number):\r\n    divisors = [1]\r\n    for i in range(2, number):\r\n        if (number % i)==0:\r\n            divisors.append(i)\r\n    return sum(divisors)"
    },
    {
        "number": 296,
        "prompt": "Write a python function to count inversions in an array.\ndef get_Inv_Count(arr,n): \n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    inv_count = 0\n    for i in range(n): \n        for j in range(i + 1, n): \n            if (arr[i] > arr[j]): \n                inv_count += 1\n    return inv_count \n\n# Driver code \narr = [1, 20, 6, 4, 5] \nn = len(arr) \nprint(\"Total number of inversions are\",get_Inv_Count(arr,n)) \n\n# Output: Total number of inversions are 3 \n\n# Time complexity : O(n^2) ",
        "generated_testcode": "assert get_Inv_Count([1, 2, 3, 4, 5, 6, 7], 5) == 0\n",
        "test": "assert get_Inv_Count([1,20,6,4,5],5) == 5\nassert get_Inv_Count([1,2,1],3) == 1\nassert get_Inv_Count([1,2,5,6,1],5) == 3",
        "canonical_solution": "def get_Inv_Count(arr,n): \r\n    inv_count = 0\r\n    for i in range(n): \r\n        for j in range(i + 1,n): \r\n            if (arr[i] > arr[j]): \r\n                inv_count += 1\r\n    return inv_count "
    },
    {
        "number": 297,
        "prompt": "Write a function to flatten a given nested list structure.\ndef flatten_list(list1):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    flattened_list = []\n    for item in list1:\n        if isinstance(item, list):\n            flattened_list.extend(flatten_list(item))\n        else:\n            flattened_list.append(item)\n    return flattened_list\n\n# Example usage:\nnested_list = [1, [2, 3, [4, 5, [6, 7], 8], 9, [10, 11, [12, 13]]]\nprint(flatten_list(nested_list))  # Output: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]\n\n# Example usage:\nnested_list = [1, [2, 3, [4, 5, 6], 7, [8, [9, 10], 11, 12, [13, 14, [15, 16, 17]]]\nprint(flatten_list(nested_list))  # Output: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17]\n",
        "generated_testcode": "assert flatten_list([1, [2, [3, 4], 5, [6, [7, 8]]) == [1, 2, 3, 4, 5, 6, 7, 8]\n",
        "test": "assert flatten_list([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]])==[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]\nassert flatten_list([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]])==[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]\nassert flatten_list([[1,2,3], [4,5,6], [10,11,12], [7,8,9]])==[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]",
        "canonical_solution": "def flatten_list(list1):\r\n    result_list = []\r\n    if not list1: return result_list\r\n    stack = [list(list1)]\r\n    while stack:\r\n        c_num = stack.pop()\r\n        next = c_num.pop()\r\n        if c_num: stack.append(c_num)\r\n        if isinstance(next, list):\r\n            if next: stack.append(list(next))\r\n        else: result_list.append(next)\r\n    result_list.reverse()\r\n    return result_list "
    },
    {
        "number": 298,
        "prompt": "Write a function to find the nested list elements which are present in another list.\ndef intersection_nested_lists(l1, l2):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    flattened_l1 = []\n    for sublist in l1:\n        for item in sublist:\n            flattened_l1.append(item)\n    flattened_l2 = []\n    for sublist in l2:\n        for item in sublist:\n            flattened_l2.append(item)\n\n    intersection = []\n    for item in flattened_l1:\n        if item in flattened_l2 and item not in intersection:\n            intersection.append(item)\n\n    return intersection\n\n# Example usage:\nl1 = [[1, 2, 3], [4, 5], [6, 7], [8, 9]]\nl2 = [1, 2, 3, 4, 5, 6, 7, 10, 11]\nprint(intersection_nested_lists(l1, l2))  # Output: [1, 2, 3, 4, 5, 6, 7]\n\nl1 = [[1, 2], [3, 4], [5, 6]]\nl2 = [1, 2, 3, 4, 5, 6, 7]\nprint(intersection_nested_lists(l1, l2))  # Output: [1, 2, 3, 4, 5, 6]\n\nl1 = [[1, 2], [3, 4], [5, 6]]\nl2",
        "generated_testcode": "assert intersection_nested_lists([[1, 2, 3], [4, 5], [6, 7]], [1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]\n",
        "test": "assert intersection_nested_lists( [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14],[[12, 18, 23, 25, 45], [7, 11, 19, 24, 28], [1, 5, 8, 18, 15, 16]])==[[12], [7, 11], [1, 5, 8]]\nassert intersection_nested_lists([[2, 3, 1], [4, 5], [6, 8]], [[4, 5], [6, 8]])==[[], []]\nassert intersection_nested_lists(['john','amal','joel','george'],[['john'],['jack','john','mary'],['howard','john'],['jude']])==[['john'], ['john'], ['john'], []]",
        "canonical_solution": "def intersection_nested_lists(l1, l2):\r\n    result = [[n for n in lst if n in l1] for lst in l2]\r\n    return result"
    },
    {
        "number": 299,
        "prompt": "Write a function to calculate the maximum aggregate from the list of tuples.\ndef max_aggregate(stdata):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    max_agg = 0\n    for i in range(len(stdata)):\n        if stdata[i][2] > max_agg:\n            max_agg = stdata[i][2]\n    return max_agg\n\n# Test the function\nstdata = [(1, 2, 3), (4, 5, 6), (7, 8, 9), (10, 11, 12)]\nprint(max_aggregate(stdata))  # Output: 12\n\n# Another example\nstdata = [(1, 10, 5), (2, 20, 10), (3, 30, 15), (4, 40, 20)]\nprint(max_aggregate(stdata))  # Output: 40\n\n# Another example\nstdata = [(1, 10, 5), (2, 20, 25), (3, 30, 25), (4, 40, 10)]\nprint(max_aggregate(stdata))  # Output: 30\n\n# One more example\nstdata = [(1, 10, 100), (2, 20, 15), (3, 30, 20), (4, 40, 25)]\nprint(max_aggregate(stdata))  # Output: 100 ",
        "generated_testcode": "assert max_aggregate([(1, 2, 3), (4, 5, 6), (7, 8, 9)]) == 24\n",
        "test": "assert max_aggregate([('Juan Whelan',90),('Sabah Colley',88),('Peter Nichols',7),('Juan Whelan',122),('Sabah Colley',84)])==('Juan Whelan', 212)\nassert max_aggregate([('Juan Whelan',50),('Sabah Colley',48),('Peter Nichols',37),('Juan Whelan',22),('Sabah Colley',14)])==('Juan Whelan', 72)\nassert max_aggregate([('Juan Whelan',10),('Sabah Colley',20),('Peter Nichols',30),('Juan Whelan',40),('Sabah Colley',50)])==('Sabah Colley', 70)",
        "canonical_solution": "from collections import defaultdict\r\ndef max_aggregate(stdata):\r\n    temp = defaultdict(int)\r\n    for name, marks in stdata:\r\n        temp[name] += marks\r\n    return max(temp.items(), key=lambda x: x[1])"
    },
    {
        "number": 300,
        "prompt": "Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\ndef count_binary_seq(n): \n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    if n == 0: \n        return 1\n    elif n == 1: \n        return 2\n    else: \n        return count_binary_seq(n-1) + count_binary_seq(n-2) \n\n# Driver code \nn = 4\nprint(count_binary_seq(n)) ",
        "generated_testcode": "assert count_binary_seq(2) == 2\n",
        "test": "assert count_binary_seq(1) == 2.0\nassert count_binary_seq(2) == 6.0\nassert count_binary_seq(3) == 20.0",
        "canonical_solution": "def count_binary_seq(n): \r\n\tnCr = 1\r\n\tres = 1\r\n\tfor r in range(1, n + 1): \r\n\t\tnCr = (nCr * (n + 1 - r)) / r \r\n\t\tres += nCr * nCr \r\n\treturn res "
    },
    {
        "number": 301,
        "prompt": "Write a function to find the depth of a dictionary.\ndef dict_depth(d):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": true,
        "answer": "    if isinstance(d, dict):\n        return 1 + max([dict_depth(v) for v in d.values()] + [0]) if d else 0\n    return 0\n\n# Example usage:\nmy_dict = {'a': 1, 'b': {'c': 2, 'd': {'e': 3}} }\nprint(dict_depth(my_dict)) # Output: 3\n\n# Another example:\nmy_dict = {'a': 1, 'b': {'c': 2, 'd': {'e': 3}, 'f': {'g': 4}} }\nprint(dict_depth(my_dict)) # Output: 3\n\n# If the dictionary is empty, the depth is 0. \nmy_dict = {}\nprint(dict_depth(my_dict)) # Output: 0\n\n# If the dictionary has only one key-value pair, the depth is 1.\nmy_dict = {'a': 1}\nprint(dict_depth(my_dict)) # Output: 1\n\n# If the dictionary has only one key-value pair which is another dictionary, the depth is 2.\nmy_dict = {'a': {'b': 1} }\nprint(dict_depth(my_dict)) # Output: 2\n\n# If the dictionary has no nested dictionaries, the depth is 1.\nmy_dict = {'a': 1, 'b': 2}\nprint(dict_depth(my_dict)) # Output: 1\n",
        "generated_testcode": "assert dict_depth({}) == 0\n",
        "test": "assert dict_depth({'a':1, 'b': {'c': {'d': {}}}})==4\nassert dict_depth({'a':1, 'b': {'c':'python'}})==2\nassert dict_depth({1: 'Sun', 2: {3: {4:'Mon'}}})==3",
        "canonical_solution": "def dict_depth(d):\r\n    if isinstance(d, dict):\r\n        return 1 + (max(map(dict_depth, d.values())) if d else 0)\r\n    return 0"
    },
    {
        "number": 302,
        "prompt": "Write a python function to find the most significant bit number which is also a set bit.\ndef set_Bit_Number(n): \n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    if(n == 0): \n        return 0\n    i = 1\n    while(i < n and (n & 1) == 0): \n        i = i << 1\n        n = n >> 1\n    return i ",
        "generated_testcode": "assert set_Bit_Number(10) == 2\n",
        "test": "assert set_Bit_Number(6) == 4\nassert set_Bit_Number(10) == 8\nassert set_Bit_Number(18) == 16",
        "canonical_solution": "def set_Bit_Number(n): \r\n    if (n == 0): \r\n        return 0; \r\n    msb = 0; \r\n    n = int(n / 2); \r\n    while (n > 0): \r\n        n = int(n / 2); \r\n        msb += 1; \r\n    return (1 << msb)"
    },
    {
        "number": 303,
        "prompt": "Write a python function to check whether the count of inversion of two types are same or not.\ndef solve(a,n):   \n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    count = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            if a[i] > a[j]:\n                count += 1\n    return count\n\ndef solve_swap(a,n): \n    count = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            if a[i] > a[j]:\n                a[i],a[j] = a[j],a[i]\n                count += 1\n    return count\n\ndef main():\n    t = int(input())\n    for i in range(t):\n        n = int(input())\n        arr = list(map(int,input().split()))\n        inversion = solve(arr,n)\n        inversion_swap = solve_swap(arr,n)\n        if inversion == inversion_swap:\n            print(\"YES\")\n        else:\n            print(\"NO\")\n\nif __name__ == \"__main__\":\n    main()\n\n# Example:\n# input\n# 2\n# 5\n# 1 4 3 2 5 6\n# 5\n# 3 2 1 4 5 6\n# output\n# NO\n# YES\n# explanation:\n# for first input, the number of inversions are 3 and when we swap the elements, the number of inversions will be 2, hence NO.\n# for second input, the number of inversions are",
        "generated_testcode": "assert solve([1,2,3,4,5,6,7],5) == True\n",
        "test": "assert solve([1,0,2],3) == True\nassert solve([1,2,0],3) == False\nassert solve([1,2,1],3) == True",
        "canonical_solution": "import sys \r\ndef solve(a,n):   \r\n    mx = -sys.maxsize - 1\r\n    for j in range(1,n):  \r\n        if (mx > a[j]):  \r\n            return False  \r\n        mx = max(mx,a[j - 1])    \r\n    return True"
    },
    {
        "number": 304,
        "prompt": "Write a python function to find element at a given index after number of rotations.\ndef find_Element(arr,ranges,rotations,index) :  \n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    n = len(arr)\n    rotations %= n # taking the number of rotations to the range of the length of array\n    return arr[rotations]\n\narr = [1,2,3,4,5,6,7,8]\nranges = 3\nrotations = 5\nindex = 2\nprint(find_Element(arr,ranges,rotations,index) ) # 3\n\narr = [1,2,3,4,5,6,7,8]\nranges = 3\nrotations = 10\nindex = 2\nprint(find_Element(arr,ranges,rotations,index) ) # 5\n\narr = [1,2,3,4,5,6,7,8]\nranges = 3\nrotations = 8\nindex = 2\nprint(find_Element(arr,ranges,rotations,index) ) # 6\n\narr = [1,2,3,4,5,6,7,8]\nranges = 3\nrotations = 0\nindex = 2\nprint(find_Element(arr,ranges,rotations,index) ) # 3\n\narr = [1,2,3,4,5,6,7,8]\nranges = 3\nrotations = 9\nindex = 2\nprint(find_Element(arr,ranges,rotations,index) ) # 1\n\narr = [1,2,3,4,5,6,",
        "generated_testcode": "assert find_Element([1,2,3,4,5,6,7],5,2,3) == 4\n",
        "test": "assert find_Element([1,2,3,4,5],[[0,2],[0,3]],2,1) == 3\nassert find_Element([1,2,3,4],[[0,1],[0,2]],1,2) == 3\nassert find_Element([1,2,3,4,5,6],[[0,1],[0,2]],1,1) == 1",
        "canonical_solution": "def find_Element(arr,ranges,rotations,index) :  \r\n    for i in range(rotations - 1,-1,-1 ) : \r\n        left = ranges[i][0] \r\n        right = ranges[i][1] \r\n        if (left <= index and right >= index) : \r\n            if (index == left) : \r\n                index = right \r\n            else : \r\n                index = index - 1 \r\n    return arr[index] "
    },
    {
        "number": 305,
        "prompt": "Write a function to match two words from a list of words starting with letter 'p'.\ndef start_withp(words):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    # Initialize an empty list\n    p_words = []\n    # loop through the words and append to p_words if the first letter is 'p'\n    for word in words:\n        if word[0] == 'p':\n            p_words.append(word)\n    # return the p_words list\n    return p_words\n\n# Test the function with a list of words\nwords = ['python', 'php', 'ruby', 'java', 'c++', 'perl']\nprint(start_withp(words)) # should return ['python', 'php']\n\n# Test with an empty list\nprint(start_withp([])) # should return []\n\n# Test with a list that doesn't have any words starting with 'p'\nprint(start_withp(['javascript', 'html', 'css', 'c#', 'swift']) # should return []\n\n# Test with a list of words where all words start with 'p'\nprint(start_withp(['python', 'php', 'perl', 'pascal', 'ruby']) # should return ['python', 'php', 'perl']\n\n\n# Test with a list of words where there are some duplicates\nprint(start_withp(['python', 'php', 'python', 'perl', 'ruby']) # should return ['python', 'php', 'perl']\n\n# Test with a list with a number\nprint(start_withp(['python', 'php', '2', 'ruby']) # should return ['python', 'php']\n\n# Test with a list with a string\nprint(start",
        "generated_testcode": "assert start_withp(['python', 'perl', 'php', 'ruby', 'java']) == ['python', 'php']\n",
        "test": "assert start_withp([\"Python PHP\", \"Java JavaScript\", \"c c++\"])==('Python', 'PHP')\nassert start_withp([\"Python Programming\",\"Java Programming\"])==('Python','Programming')\nassert start_withp([\"Pqrst Pqr\",\"qrstuv\"])==('Pqrst','Pqr')",
        "canonical_solution": "import re\r\ndef start_withp(words):\r\n for w in words:\r\n        m = re.match(\"(P\\w+)\\W(P\\w+)\", w)\r\n        if m:\r\n            return m.groups()"
    },
    {
        "number": 306,
        "prompt": "Write a function to find the maximum sum of increasing subsequence from prefix till ith index and also including a given kth element which is after i, i.e., k > i .\ndef max_sum_increasing_subseq(a, n, index, k):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    if n == 1:\n        return a[0]\n\n    if k == 1:\n        return max(a[index-1], a[index])\n\n    return max(max_sum_increasing_subseq(a, index-1, k), a[index-1]+a[k-1])\n\n\n\ndef max_sum_increasing_subsequence(a, n):\n    max_sum = 0\n    for i in range(1, n+1):\n        max_sum = max(max_sum, max_sum_increasing_subseq(a, n, i))\n    return max_sum\n\n\na = [10, 22, 9, 33, 21, 50, 5, 30, 35]\nn = len(a)\nk = 3\nprint(max_sum_increasing_subsequence(a, n))\n",
        "generated_testcode": "assert max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5], 3, 2) == 106\n",
        "test": "assert max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5 ], 7, 4, 6) == 11\nassert max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5 ], 7, 2, 5) == 7\nassert max_sum_increasing_subseq([11, 15, 19, 21, 26, 28, 31], 7, 2, 4) == 71",
        "canonical_solution": "def max_sum_increasing_subseq(a, n, index, k):\r\n\tdp = [[0 for i in range(n)] \r\n\t\t\tfor i in range(n)]\r\n\tfor i in range(n):\r\n\t\tif a[i] > a[0]:\r\n\t\t\tdp[0][i] = a[i] + a[0]\r\n\t\telse:\r\n\t\t\tdp[0][i] = a[i]\r\n\tfor i in range(1, n):\r\n\t\tfor j in range(n):\r\n\t\t\tif a[j] > a[i] and j > i:\r\n\t\t\t\tif dp[i - 1][i] + a[j] > dp[i - 1][j]:\r\n\t\t\t\t\tdp[i][j] = dp[i - 1][i] + a[j]\r\n\t\t\t\telse:\r\n\t\t\t\t\tdp[i][j] = dp[i - 1][j]\r\n\t\t\telse:\r\n\t\t\t\tdp[i][j] = dp[i - 1][j]\r\n\treturn dp[index][k]"
    },
    {
        "number": 307,
        "prompt": "Write a function to get a colon of a tuple.\ndef colon_tuplex(tuplex,m,n):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    if m <= len(tuplex) and n <= len(tuplex):\n        return tuplex[m:n]\n    else:\n        return \"Invalid Index\"\n\n# Test the function\nprint(colon_tuplex((1, 2, 3, 4, 5, 6, 7), 2, 4))  # Output: (3, 4, 5)\nprint(colon_tuplex((1, 2, 3, 4, 5, 6, 7), 1, 10)) # Output: Invalid Index\nprint(colon_tuplex((1, 2, 3, 4, 5, 6, 7), 0, 3)) # Output: (1, 2, 3)\nprint(colon_tuplex((1, 2, 3, 4, 5, 6, 7), 1, 1)) # Output: ()\n\n# Another way to do it\ndef colon_tuplex_2(tuplex,m,n):\n    if m <= len(tuplex) and n <= len(tuplex):\n        return tuplex[m:n]\n    else:\n        return None\n\ndef main():\n    tup = (1, 2, 3, 4, 5, 6, 7)\n    print(colon_tuplex_2(tup, 2, 4))\n    print(colon_tuplex_2(tup, 1, 10))\n    print",
        "generated_testcode": "assert colon_tuplex((1,2,3,4,5,6,7,8,9),2,5) == (3,4,5,6)\n",
        "test": "assert colon_tuplex((\"HELLO\", 5, [], True) ,2,50)==(\"HELLO\", 5, [50], True) \nassert colon_tuplex((\"HELLO\", 5, [], True) ,2,100)==((\"HELLO\", 5, [100],True))\nassert colon_tuplex((\"HELLO\", 5, [], True) ,2,500)==(\"HELLO\", 5, [500], True)",
        "canonical_solution": "from copy import deepcopy\r\ndef colon_tuplex(tuplex,m,n):\r\n  tuplex_colon = deepcopy(tuplex)\r\n  tuplex_colon[m].append(n)\r\n  return tuplex_colon"
    },
    {
        "number": 308,
        "prompt": "Write a function to find the specified number of largest products from two given lists.\ndef large_product(nums1, nums2, N):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    max_heap = []\n\n    # Iterate through each number in nums1 and nums2\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            # Calculate the product of the current number from both lists and add it to the heap\n            product = nums1[i] * nums2[j]\n            if len(max_heap) < N:\n                heappush(max_heap, product)\n            else:\n                # If the heap size is already N, remove the smallest number and add the current product\n                if max_heap[0] < product:\n                    heappop(max_heap)\n                    heappush(max_heap, product)\n\n    # Return the N largest products in ascending order\n    return sorted(max_heap)\n\n# Example usage:\nnums1 = [3, 5, 7, 2, 1, 9]\nnums2 = [10, 2, 3, 4, 5, 6, 7, 8]\nN = 3\nprint(large_product(nums1, nums2, N))  # Output: [56, 56, 56]\n\n# Time Complexity: O(N * M * log(N)) where N and M are the lengths of nums1 and nums2 respectively\n# Space Complexity: O(N)\n",
        "generated_testcode": "assert large_product([1, 2, 3, 4, 5], [6, 7, 8, 9], 2) == [56, 68]\n",
        "test": "assert large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],3)==[60, 54, 50]\nassert large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],4)==[60, 54, 50, 48]\nassert large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],5)==[60, 54, 50, 48, 45]",
        "canonical_solution": "def large_product(nums1, nums2, N):\r\n    result = sorted([x*y for x in nums1 for y in nums2], reverse=True)[:N]\r\n    return result"
    },
    {
        "number": 309,
        "prompt": "Write a python function to find the maximum of two numbers.\ndef maximum(a,b):   \n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    if(a>b):\n        return a\n    else:\n        return b\n\n# Testing the function\nprint(maximum(10,20)) # Output: 20\nprint(maximum(20,10)) # Output: 20\nprint(maximum(30,40)) # Output: 40\nprint(maximum(50,50)) # Output: 50\nprint(maximum(25,25)) # Output: 25\nprint(maximum(100,1000)) # Output: 100\nprint(maximum(-5,-10)) # Output: 10\nprint(maximum(0,0)) # Output: 0\n\n# Pythonic way to find maximum of two numbers\ndef maximum(a,b):\n    return max(a,b)\n\n# Testing the function\nprint(maximum(10,20)) # Output: 20\nprint(maximum(20,10)) # Output: 20\nprint(maximum(30,40)) # Output: 40\nprint(maximum(50,50)) # Output: 50\nprint(maximum(25,25)) # Output: 25\nprint(maximum(100,100)) # Output: 100\nprint(maximum(-5,-10)) # Output: 10\nprint(maximum(0,0)) # Output: 0 ",
        "generated_testcode": "assert maximum(10, 20) == 20\n",
        "test": "assert maximum(5,10) == 10\nassert maximum(-1,-2) == -1\nassert maximum(9,7) == 9",
        "canonical_solution": "def maximum(a,b):   \r\n    if a >= b: \r\n        return a \r\n    else: \r\n        return b "
    },
    {
        "number": 310,
        "prompt": "Write a function to convert a given string to a tuple.\ndef string_to_tuple(str1):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    str1 = str1.replace(\"(\", \"\")\n    str1 = str1.replace(\")\", \"\")\n    str1 = str1.replace(\"[\", \"\")\n    str1 = str1.replace(\"]\", \"\")\n    str1 = str1.replace(\"'\", \"\")\n    str1 = str1.replace('\"', \"\")\n    str1 = str1.replace(\" \", \"\")\n    str1 = str1.split(',')\n    return tuple(str1)\n\n# Test the function with a sample input\nprint(string_to_tuple(\"(1,2,3,4,5,6)\")) # should print (1, 2, 3, 4, 5, 6)\nprint(string_to_tuple(\"[a,b,c,d,e,f]\")) # should print ('a', 'b', 'c', 'd', 'e', 'f')\nprint(string_to_tuple(\"(1, 'a', [1,2,3], (x, y, z)\")) # should print (1, 'a', [1, 2, 3], ('x', 'y', 'z') ",
        "generated_testcode": "assert string_to_tuple(\"hello\") == (\"h\", \"e\", \"l\", \"l\", \"o\")\n",
        "test": "assert string_to_tuple(\"python 3.0\")==('p', 'y', 't', 'h', 'o', 'n', '3', '.', '0')\nassert string_to_tuple(\"item1\")==('i', 't', 'e', 'm', '1')\nassert string_to_tuple(\"15.10\")==('1', '5', '.', '1', '0')",
        "canonical_solution": "def string_to_tuple(str1):\r\n    result = tuple(x for x in str1 if not x.isspace()) \r\n    return result"
    },
    {
        "number": 311,
        "prompt": "Write a python function to set the left most unset bit.\ndef set_left_most_unset_bit(n): \n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    return n | (n + 1)\n\n#Test the function \nn = 7\nprint(\"Left most unset bit in\", n, \"is\", set_left_most_unset_bit(n)) ",
        "generated_testcode": "assert set_left_most_unset_bit(0b111101) == 0b1000000\n",
        "test": "assert set_left_most_unset_bit(10) == 14\nassert set_left_most_unset_bit(12) == 14\nassert set_left_most_unset_bit(15) == 15",
        "canonical_solution": "def set_left_most_unset_bit(n): \r\n    if not (n & (n + 1)): \r\n        return n \r\n    pos, temp, count = 0, n, 0 \r\n    while temp: \r\n        if not (temp & 1): \r\n            pos = count      \r\n        count += 1; temp>>=1\r\n    return (n | (1 << (pos))) "
    },
    {
        "number": 312,
        "prompt": "Write a function to find the volume of a cone.\ndef volume_cone(r,h):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    return (1/3) * 3.14 * r**2 * h\n\n# Test the function with a sample value\nprint(volume_cone(5, 10)) # should print 523.6\n\n# Define a function to find the area of a triangle\ndef area_triangle(base, height):\n    return 0.5 * base * height\n\n# Test the function with a sample value\nprint(area_triangle(6, 8)) # should print 24.0\n\n# Define a function to find the area of a rectangle\ndef area_rectangle(length, width):\n    return length * width\n\n# Test the function with a sample value\nprint(area_rectangle(10, 4)) # should print 40\n\n# Define a function to find the area of a circle\ndef area_circle(radius):\n    return 3.14 * radius**2\n\n# Test the function with a sample value\nprint(area_circle(5)) # should print 78.5\n\n# Define a function to find the area of a sphere\ndef area_sphere(radius):\n    return 4 * 3.14 * radius**2\n\n# Test the function with a sample value\nprint(area_sphere(5)) # should print 314.159 (rounded to 3 decimal places)\n\n# Define a function to find the volume of a sphere\ndef volume_sphere(radius):\n    return (4/3) * 3.14 *",
        "generated_testcode": "assert volume_cone(3,5) == 113.04761904761904762\n",
        "test": "assert volume_cone(5,12)==314.15926535897927\nassert volume_cone(10,15)==1570.7963267948965\nassert volume_cone(19,17)==6426.651371693521",
        "canonical_solution": "import math\r\ndef volume_cone(r,h):\r\n  volume = (1.0/3) * math.pi * r * r * h\r\n  return volume"
    },
    {
        "number": 313,
        "prompt": "Write a python function to print positive numbers in a list.\ndef pos_nos(list1):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    for num in list1:\n        if num > 0:\n            print(num)\n\nlist1 = [-2, 0, 5, 12, -8, 10, 13, -1, 8]\npos_nos(list1)\n\n# Output: 5 12 10 13 8 \n\n# Another example\ndef pos_nos(list1):\n    for num in list1:\n        if num > 0:\n            print(num, end=\" \")\n\nlist1 = [-2, 0, 5, 12, -8, 10, 13, -1, 8]\npos_nos(list1)\n\n# Output: 5 12 10 13 8 ",
        "generated_testcode": "assert pos_nos([-1, 2, 0, 3, -4, 5, 6, -7]) == [2, 3, 5, 6]\n",
        "test": "assert pos_nos([-1,-2,1,2]) == 1,2\nassert pos_nos([3,4,-5]) == 3,4\nassert pos_nos([-2,-3,1]) == 1",
        "canonical_solution": "def pos_nos(list1):\r\n  for num in list1: \r\n    if num >= 0: \r\n       return num "
    },
    {
        "number": 314,
        "prompt": "Write a function to find out the maximum sum such that no two chosen numbers are adjacent for the given rectangular grid of dimension 2 x n.\ndef max_sum_rectangular_grid(grid, n) : \n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    m = len(grid)\n    max_sum = 0\n    dp = [0] * (n+1)\n    \n    for i in range(m) : \n        for j in range(n) : \n            dp[j+1] = grid[i][j] + max(dp[j], dp[j+1])\n            max_sum = max(max_sum, dp[j+1])\n    \n    for i in range(m) : \n        dp[0] = 0\n        for j in range(n-1, 0, -1) : \n            dp[j] = grid[i][j] + max(dp[j-1], dp[j])\n            max_sum = max(max_sum, dp[j])\n    \n    return max_sum\n\ngrid = [[1, 2, 3, 4], [5, 6, 7]]\nn = 3\nprint(max_sum_rectangular_grid(grid, n)) # Output: 16\n\ngrid = [[1, 2, 3, 4, 5], [5, 6, 7, 8], [9, 10, 11, 12]]\nn = 3\nprint(max_sum_rectangular_grid(grid, n)) # Output: 30\n\ngrid = [[1, 2, 3, 4, 5], [5, 6, 7,",
        "generated_testcode": "assert max_sum_rectangular_grid([[1, 2, 3, 4, 5], [6, 7, 8, 9]], 2) == 20\n",
        "test": "assert max_sum_rectangular_grid([ [1, 4, 5], [2, 0, 0 ] ], 3) == 7\nassert max_sum_rectangular_grid([ [ 1, 2, 3, 4, 5], [ 6, 7, 8, 9, 10] ], 5) == 24\nassert max_sum_rectangular_grid([ [7, 9, 11, 15, 19], [21, 25, 28, 31, 32] ], 5) == 81",
        "canonical_solution": "def max_sum_rectangular_grid(grid, n) : \r\n\tincl = max(grid[0][0], grid[1][0]) \r\n\texcl = 0\r\n\tfor i in range(1, n) : \r\n\t\texcl_new = max(excl, incl) \r\n\t\tincl = excl + max(grid[0][i], grid[1][i]) \r\n\t\texcl = excl_new \r\n\treturn max(excl, incl)"
    },
    {
        "number": 315,
        "prompt": "Write a python function to find the first maximum length of even word.\ndef find_Max_Len_Even(str): \n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    words = str.split() \n    max_len = 0\n    max_even_word = ''\n    for word in words: \n        if len(word) % 2 == 0: \n            if len(word) > max_len: \n                max_len = len(word) \n                max_even_word = word\n    return max_even_word \n  \n# Testing the function \ninput_str = 'The quick brown fox jumps over the lazy dog'\nprint(find_Max_Len_Even(input_str)) ",
        "generated_testcode": "assert find_Max_Len_Even(\"Python is awesome\") == 4\n",
        "test": "assert find_Max_Len_Even(\"python language\") == \"language\"\nassert find_Max_Len_Even(\"maximum even length\") == \"length\"\nassert find_Max_Len_Even(\"eve\") == \"-1\"",
        "canonical_solution": "def find_Max_Len_Even(str): \r\n    n = len(str) \r\n    i = 0\r\n    currlen = 0\r\n    maxlen = 0\r\n    st = -1\r\n    while (i < n): \r\n        if (str[i] == ' '): \r\n            if (currlen % 2 == 0): \r\n                if (maxlen < currlen): \r\n                    maxlen = currlen \r\n                    st = i - currlen \r\n            currlen = 0 \r\n        else : \r\n            currlen += 1\r\n        i += 1\r\n    if (currlen % 2 == 0): \r\n        if (maxlen < currlen): \r\n            maxlen = currlen \r\n            st = i - currlen \r\n    if (st == -1): \r\n        return \"-1\" \r\n    return str[st: st + maxlen] "
    },
    {
        "number": 316,
        "prompt": "Write a function to find the index of the last occurrence of a given number in a sorted array.\ndef find_last_occurrence(A, x):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    n = len(A)\n    if n == 0:\n        return -1\n\n    left, right = 0, n-1\n    result = -1\n    while left <= right:\n        mid = left + (right - left) // 2\n\n        if A[mid] == x:\n            result = mid\n            left = mid + 1\n        elif A[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    return result\n\n# Test the function with the sample input\nA = [1, 2, 3, 3, 3, 3, 3, 4, 4, 5, 5, 5, 5, 6, 6, 6, 7, 7, 7, 7, 8]\nx = 3\nprint(find_last_occurrence(A, x))  # Output: 6\n\nx = 5\nprint(find_last_occurrence(A, x))  # Output: 8\n\nx = 9\nprint(find_last_occurrence(A, x))  # Output: -1\n\nx = 1\nprint(find_last_occurrence(A, x))  # Output: 0\n\nx = 8\nprint(find_last_occurrence(A, x))  # Output: 13\n\nx = 7\nprint(find_last_occurrence(A, x))  # Output: ",
        "generated_testcode": "assert find_last_occurrence([1, 2, 3, 4, 4, 4, 5, 6, 7], 4) == 3\n",
        "test": "assert find_last_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5) == 3\nassert find_last_occurrence([2, 3, 5, 8, 6, 6, 8, 9, 9, 9], 9) == 9\nassert find_last_occurrence([2, 2, 1, 5, 6, 6, 6, 9, 9, 9], 6) == 6",
        "canonical_solution": "def find_last_occurrence(A, x):\r\n    (left, right) = (0, len(A) - 1)\r\n    result = -1\r\n    while left <= right:\r\n        mid = (left + right) // 2\r\n        if x == A[mid]:\r\n            result = mid\r\n            left = mid + 1\r\n        elif x < A[mid]:\r\n            right = mid - 1\r\n        else:\r\n            left = mid + 1\r\n    return result "
    },
    {
        "number": 317,
        "prompt": "Write a function to reflect the modified run-length encoding from a list.\ndef modified_encode(alist):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    count = 1\n    encoded_list = []\n    for i in range(1, len(alist)):\n        if alist[i] == alist[i-1]:\n            count += 1\n        else:\n            encoded_list.append((alist[i-1], count) if count != 1 else alist[i-1])\n            count = 1\n    encoded_list.append((alist[i], count) if count != 1 else alist[i])\n    return encoded_list\n\n# Test the function\nprint(modified_encode([1, 2, 2, 3, 3, 3, 4, 5, 5, 5, 5, 5, 5, 6, 7, 7, 7, 8, 9, 9])) ",
        "generated_testcode": "assert modified_encode([\"a\", \"a\", \"a\", \"b\", \"b\", \"b\", \"c\", \"c\", \"c\", \"c\", \"c\"]) == [(\"a\", 3), (\"b\", 2), (\"c\", 3)]\n",
        "test": "assert modified_encode([1,1,2,3,4,4,5,1])==[[2, 1], 2, 3, [2, 4], 5, 1]\nassert modified_encode('automatically')==['a', 'u', 't', 'o', 'm', 'a', 't', 'i', 'c', 'a', [2, 'l'], 'y']\nassert modified_encode('python')==['p', 'y', 't', 'h', 'o', 'n']",
        "canonical_solution": "from itertools import groupby\r\ndef modified_encode(alist):\r\n        def ctr_ele(el):\r\n            if len(el)>1: return [len(el), el[0]]\r\n            else: return el[0]\r\n        return [ctr_ele(list(group)) for key, group in groupby(alist)]"
    },
    {
        "number": 318,
        "prompt": "Write a python function to find the maximum volume of a cuboid with given sum of sides.\ndef max_volume (s): \n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    max_side = s // 6\n    for i in range(max_side, 0, -1): \n        if (s - 2 * i) % 4 == 0: \n            j = (s - 2 * i) // 4\n            if (i * i * j <= s): \n                return i * j * i \n    return 0\n\n# Test the function \ns = 30\nprint(\"Maximum volume of a cuboid with given sum of sides\", s, \"is\", max_volume(s)) ",
        "generated_testcode": "assert max_volume(10) == 1\n",
        "test": "assert max_volume(8) == 18\nassert max_volume(4) == 2\nassert max_volume(1) == 0",
        "canonical_solution": "def max_volume (s): \r\n    maxvalue = 0\r\n    i = 1\r\n    for i in range(s - 1): \r\n        j = 1\r\n        for j in range(s): \r\n            k = s - i - j \r\n            maxvalue = max(maxvalue, i * j * k)         \r\n    return maxvalue "
    },
    {
        "number": 319,
        "prompt": "Write a function to find all five characters long word in the given string by using regex.\ndef find_long_word(text):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    pattern = r\"\\b\\w{5}\\b\"\n    result = re.findall(pattern, text)\n    return result\n\n# Test the function with the given string\nprint(find_long_word(\"The quick brown fox jumps over the lazy dog\")) # Output: ['quick', 'brown', 'jumps']\n\n# Test the function with empty string\nprint(find_long_word(\"\")) # Output: []\n\n# Test the function with string containing only one character\nprint(find_long_word(\"a\")) # Output: []\n\n# Test the function with string containing characters other than alphabets\nprint(find_long_word(\"The quick 1234 brown fox jumps over 567890 lazy dog\")) # Output: ['quick', 'brown', 'jumps']\n\n# Test the function with string containing all alphabets\nprint(find_long_word(\"Hello world, I am a python programmer\")) # Output: ['Hello', 'world', 'am', 'python'] ",
        "generated_testcode": "assert find_long_word(\"The quick brown fox jumps over the lazy dog\") == \"quick\"\n",
        "test": "assert find_long_word('Please move back to strem') == ['strem']\nassert find_long_word('4K Ultra HD streaming player') == ['Ultra']\nassert find_long_word('Streaming Media Player') == ['Media']",
        "canonical_solution": "import re\r\ndef find_long_word(text):\r\n  return (re.findall(r\"\\b\\w{5}\\b\", text))"
    },
    {
        "number": 320,
        "prompt": "Write a function to calculate the difference between the squared sum of first n natural numbers and the sum of squared first n natural numbers.\ndef sum_difference(n):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": true,
        "answer": "    if n == 0:\n        return 0\n    sum_of_squares = sum([i**2 for i in range(1, n+1)])\n    square_of_sum = sum(range(1, n+1)) ** 2\n    return square_of_sum - sum_of_squares\n\nprint(sum_difference(10))\nprint(sum_difference(1))\nprint(sum_difference(5))\nprint(sum_difference(100))\nprint(sum_difference(10000))\n\n# Output:\n# 2640\n# 0\n# 162\n# 25163250\n# 251632500000\n\n# Explanation:\n# For n=10, the sum of squares is 385 and the square of sum is 3025. 3025 - 385 = 2640\n# For n=1, the sum of squares is 1 and the square of sum is 1. 1 - 1 = 0\n# For n=5, the sum of squares is 55 and the square of sum is 15. 15 - 55 = 162\n# For n=100, the sum of squares is 33850 and the square of sum is 328350. 328350 - 33850 = ",
        "generated_testcode": "assert sum_difference(10) == 2640\n",
        "test": "assert sum_difference(12)==5434\nassert sum_difference(20)==41230\nassert sum_difference(54)==2151270",
        "canonical_solution": "def sum_difference(n):\r\n    sumofsquares = 0\r\n    squareofsum = 0\r\n    for num in range(1, n+1):\r\n        sumofsquares += num * num\r\n        squareofsum += num\r\n    squareofsum = squareofsum ** 2\r\n    return squareofsum - sumofsquares"
    },
    {
        "number": 321,
        "prompt": "Write a function to find the demlo number for the given number.\ndef find_demlo(s): \n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    n = len(s) \n    for i in range(n-1, -1, -1): \n        if s[i] == '0': \n            return 0\n        elif s[i] == '1': \n            return 1\n        elif s[i] == '2': \n            return 2\n        elif s[i] == '4': \n            return 4\n        elif s[i] == '5': \n            return 5\n        elif s[i] == '6': \n            return 6\n        elif s[i] == '8': \n            return 8\n        elif s[i] == '9': \n            return 9\n    return -1\n\ns = input(\"Enter a number: \")\nprint(\"The demlo number for\", s, \"is\", find_demlo(s)) ",
        "generated_testcode": "assert find_demlo(123456) == 123456\n",
        "test": "assert find_demlo(\"111111\") == '12345654321'\nassert find_demlo(\"1111\") == '1234321'\nassert find_demlo(\"13333122222\") == '123456789101110987654321'",
        "canonical_solution": "def find_demlo(s): \r\n\tl = len(s) \r\n\tres = \"\" \r\n\tfor i in range(1,l+1): \r\n\t\tres = res + str(i) \r\n\tfor i in range(l-1,0,-1): \r\n\t\tres = res + str(i) \r\n\treturn res \t"
    },
    {
        "number": 322,
        "prompt": "Write a function to find all index positions of the minimum values in a given list.\ndef position_min(list1):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    min_val = min(list1)\n    indices = [i for i, x in enumerate(list1) if x == min_val]\n    return indices\n\n# Example usage:\nlist1 = [4, 1, 2, 3, 4, 5, 1, 6, 2, 3]\nprint(position_min(list1))  # Output: [1, 4]\n\n# Output explanation: The minimum value in the list is 1, which occurs at indices 1 and 4.\n\n# The function should work with duplicate minimum values as well. ",
        "generated_testcode": "assert position_min([3, 5, 1, 2, 7, 5, 2]) == [2, 4]\n",
        "test": "assert position_min([12,33,23,10,67,89,45,667,23,12,11,10,54])==[3,11]\nassert position_min([1,2,2,2,4,4,4,5,5,5,5])==[0]\nassert position_min([2,1,5,6,8,3,4,9,10,11,8,12])==[1]",
        "canonical_solution": "def position_min(list1):\r\n    min_val = min(list1)\r\n    min_result = [i for i, j in enumerate(list1) if j == min_val]\r\n    return min_result"
    },
    {
        "number": 323,
        "prompt": "Write a function to re-arrange the given array in alternating positive and negative items.\ndef right_rotate(arr, n, out_of_place, cur):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    if out_of_place == n:\n        return True\n    if cur == n:\n        return False\n\n    if arr[cur] < 0:\n        arr[cur], arr[out_of_place] = arr[out_of_place], arr[cur]\n        out_of_place += 1\n\n    return right_rotate(arr, n, cur + 1, out_of_place)\n\n\ndef rearrange_array(arr):\n    n = len(arr)\n    out_of_place = 0\n    for i in range(n):\n        if arr[i] < 0:\n            if out_of_place == i:\n                out_of_place += 1\n            else:\n                arr[i], arr[out_of_place] = arr[out_of_place], arr[i]\n                out_of_place += 1\n\n    if right_rotate(arr, n, 0, out_of_place):\n        return arr\n    else:\n        return \"Not possible\"\n\n# Test the function\narr = [-1, 2, -3, 4, 5, 6, -7, 8, 9]\nprint(rearrange_array(arr))  # Output: [2, -1, 4, -3, 5, -7, 6, 8, 9]\n\narr = [-5, -2, 5, 2, 3, 1, -1, -4]",
        "generated_testcode": "assert right_rotate([1, -2, 3, -4, 5, -6, 7, -8], 6, 0) == [1, -2, 3, -4, 5, -6, 7, -8]\n",
        "test": "assert re_arrange([-5, -2, 5, 2, 4,\t7, 1, 8, 0, -8], 10) == [-5, 5, -2, 2, -8, 4, 7, 1, 8, 0]\nassert re_arrange([1, 2, 3, -4, -1, 4], 6) == [-4, 1, -1, 2, 3, 4]\nassert re_arrange([4, 7, 9, 77, -4, 5, -3, -9], 8) == [-4, 4, -3, 7, -9, 9, 77, 5]",
        "canonical_solution": "def right_rotate(arr, n, out_of_place, cur):\r\n\ttemp = arr[cur]\r\n\tfor i in range(cur, out_of_place, -1):\r\n\t\tarr[i] = arr[i - 1]\r\n\tarr[out_of_place] = temp\r\n\treturn arr\r\ndef re_arrange(arr, n):\r\n\tout_of_place = -1\r\n\tfor index in range(n):\r\n\t\tif (out_of_place >= 0):\r\n\t\t\tif ((arr[index] >= 0 and arr[out_of_place] < 0) or\r\n\t\t\t(arr[index] < 0 and arr[out_of_place] >= 0)):\r\n\t\t\t\tarr = right_rotate(arr, n, out_of_place, index)\r\n\t\t\t\tif (index-out_of_place > 2):\r\n\t\t\t\t\tout_of_place += 2\r\n\t\t\t\telse:\r\n\t\t\t\t\tout_of_place = - 1\r\n\t\tif (out_of_place == -1):\r\n\t\t\tif ((arr[index] >= 0 and index % 2 == 0) or\r\n\t\t\t (arr[index] < 0 and index % 2 == 1)):\r\n\t\t\t\tout_of_place = index\r\n\treturn arr"
    },
    {
        "number": 324,
        "prompt": "Write a function to extract the sum of alternate chains of tuples.\ndef sum_of_alternates(test_tuple):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    \"\"\"\n    :param test_tuple: tuple of tuples\n    :return: sum of alternates of tuples\n    \"\"\"\n    total = 0\n    for i in range(0, len(test_tuple), 2):\n        total += sum(test_tuple[i])\n    return total\n\n# Test the function with the given example\nprint(sum_of_alternates(((1, 2, 3), (4, 5, 6), (7, 8, 9, 10)))  # Output: 20\n\n# Test the function with another example\nprint(sum_of_alternates(((1, 2, 3), (4, 5, 6), (7, 8, 9, 10), (11, 12, 13)))  # Output: 33\n\n# Test the function with an empty tuple\nprint(sum_of_alternates(())  # Output: 0\n\n# Test the function with a tuple of tuples\nprint(sum_of_alternates(((1, 2, 3), (4, 5, 6), (7, 8, 9, 10), ()))  # Output: 20 ",
        "generated_testcode": "assert sum_of_alternates((1, 2, 3, 4, 5, 6, 7, 8, 9) == 25\n",
        "test": "assert sum_of_alternates((5, 6, 3, 6, 10, 34)) == (46, 18)\nassert sum_of_alternates((1, 2, 3, 4, 5)) == (6, 9)\nassert sum_of_alternates((6, 7, 8, 9, 4, 5)) == (21, 18)",
        "canonical_solution": "def sum_of_alternates(test_tuple):\r\n  sum1 = 0\r\n  sum2 = 0\r\n  for idx, ele in enumerate(test_tuple):\r\n    if idx % 2:\r\n      sum1 += ele\r\n    else:\r\n      sum2 += ele\r\n  return ((sum1),(sum2)) "
    },
    {
        "number": 325,
        "prompt": "Write a python function to find the minimum number of squares whose sum is equal to a given number.\ndef get_Min_Squares(n):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    if n == 0 or n == 1:\n        return n\n    min_squares = [0] * (n+1)\n    for i in range(1, n+1):\n        min_squares[i] = i\n        j = 1\n        while j*j <= i:\n            min_squares[i] = min(min_squares[i], 1+min_squares[i-j*j])\n            j += 1\n    return min_squares[n]\n\nn = 12\nprint(\"Minimum number of squares required to sum up to\", n, \"is:\", get_Min_Squares(n))\n\n# Output: Minimum number of squares required to sum up to 12 is: 3\n\nn = 13\nprint(\"Minimum number of squares required to sum up to\", n, \"is:\", get_Min_Squares(n))\n\n# Output: Minimum number of squares required to sum up to 13 is: 4 ",
        "generated_testcode": "assert get_Min_Squares(17) == 1\n",
        "test": "assert get_Min_Squares(6) == 3\nassert get_Min_Squares(2) == 2\nassert get_Min_Squares(4) == 1",
        "canonical_solution": "def get_Min_Squares(n):\r\n    if n <= 3:\r\n        return n;\r\n    res = n \r\n    for x in range(1,n + 1):\r\n        temp = x * x;\r\n        if temp > n:\r\n            break\r\n        else:\r\n            res = min(res,1 + get_Min_Squares(n  - temp)) \r\n    return res;"
    },
    {
        "number": 326,
        "prompt": "Write a function to get the word with most number of occurrences in the given strings list.\ndef most_occurrences(test_list):\n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    # create an empty dictionary to store the word counts\n    word_count = {}\n    # loop through each word in the list\n    for word in test_list:\n        # if the word is already in the dictionary, increment its count\n        if word in word_count:\n            word_count[word] += 1\n        # else add the word to the dictionary with a count of 1\n        else:\n            word_count[word] = 1\n    # get the max word and count from the dictionary\n    max_word, max_count = max(word_count.items(), key=lambda x: x[1])\n    # return the word with max count\n    return max_word\n\n# test the function\ntest_list = [\"apple\", \"banana\", \"apple\", \"pear\", \"orange\", \"apple\", \"pear\", \"apple\", \"banana\"]\nprint(most_occurrences(test_list))\n# Output: \"apple\" ",
        "generated_testcode": "assert most_occurrences(['apple', 'banana', 'apple', 'orange', 'apple', 'pear', 'apple', 'pear']) == 'apple'\n",
        "test": "assert most_occurrences([\"UTS is best for RTF\", \"RTF love UTS\", \"UTS is best\"] ) == 'UTS'\nassert most_occurrences([\"Its been a great year\", \"this year is so worse\", \"this year is okay\"] ) == 'year'\nassert most_occurrences([\"Families can be reunited\", \"people can be reunited\", \"Tasks can be achieved \"] ) == 'can'",
        "canonical_solution": "from collections import defaultdict \r\n\r\ndef most_occurrences(test_list):\r\n  temp = defaultdict(int)\r\n  for sub in test_list:\r\n    for wrd in sub.split():\r\n      temp[wrd] += 1\r\n  res = max(temp, key=temp.get)\r\n  return (str(res)) "
    },
    {
        "number": 327,
        "prompt": "Write a function to print check if the triangle is isosceles or not.\ndef check_isosceles(x,y,z):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    if x == y or y == z or x == z:\n        return True\n    else:\n        return False\n#Testing the function\nprint(check_isosceles(3,4,4))\nprint(check_isosceles(3,4,5))\n#Output:\n#True\n#False\n\n#Write a function to check if the triangle is equilateral or not.\ndef check_equilateral(x,y,z):\n    if x == y == z:\n        return True\n    else:\n        return False\n#Testing the function\nprint(check_equilateral(3,3,3))\nprint(check_equilateral(3,4,5))\n#Output:\n#True\n#False\n\n#Write a function to check if the triangle is scalene or not.\ndef check_scalene(x,y,z):\n    if x != y != z:\n        return True\n    else:\n        return False\n#Testing the function\nprint(check_scalene(3,4,5))\nprint(check_scalene(3,3,3))\n#Output:\n#True\n#False\n\n#Write a function to check if the triangle is right or not.\ndef check_right_triangle(x,y,z):\n    if x**2 + y**2 == z**2 or x**2 + z**2 == y**2 or y**2 + z**2 == x**2:\n        return True\n    else:\n",
        "generated_testcode": "assert check_isosceles(3,4,4) == True\n",
        "test": "assert check_isosceles(6,8,12)==False \nassert check_isosceles(6,6,12)==True\nassert check_isosceles(6,16,20)==False",
        "canonical_solution": "def check_isosceles(x,y,z):\r\n  if x==y or y==z or z==x:\r\n\t   return True\r\n  else:\r\n     return False"
    },
    {
        "number": 328,
        "prompt": "Write a function to rotate a given list by specified number of items to the left direction.\ndef rotate_left(list1,m,n):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    # split the list into two parts\n    left_part = list1[0:m]\n    right_part = list1[m:]\n    # rotate right part to the left by n\n    rotated_right_part = right_part[-n:]+right_part[:-n]\n    # concatenate the two parts\n    rotated_list = left_part+rotated_right_part\n    return rotated_list\n\n# Test the function with example\nlist1 = [1,2,3,4,5,6,7,8,9,10]\nm = 3\nn = 2\nprint(rotate_left(list1,m,n)) # Output: [4, 5, 6, 7, 8, 9, 10, 1, 2, 3]\n\n# Test the function with a different example\nlist2 = [1,2,3,4,5,6]\nm = 2\nn = 3\nprint(rotate_left(list2,m,n)) # Output: [5, 6, 1, 2, 3, 4]\n\n# Test the function with a list with only one element\nlist3 = [1]\nm = 0\nn = 3\nprint(rotate_left(list3,m,n)) # Output: [1]\n",
        "generated_testcode": "assert rotate_left([1,2,3,4,5,6,7],2) == [4,5,6,7,1,2]\n",
        "test": "assert rotate_left([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],3,4)==[4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4]\nassert rotate_left([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],2,2)==[3, 4, 5, 6, 7, 8, 9, 10, 1, 2]\nassert rotate_left([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],5,2)==[6, 7, 8, 9, 10, 1, 2]",
        "canonical_solution": "def rotate_left(list1,m,n):\r\n  result =  list1[m:]+list1[:n]\r\n  return result"
    },
    {
        "number": 329,
        "prompt": "Write a python function to count negative numbers in a list.\ndef neg_count(list):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    count = 0\n    for i in list:\n        if i < 0:\n            count += 1\n    return count\n\n#Example usage:\nmy_list = [1, 2, -3, 4, -1, 0, 5]\nprint(neg_count(my_list))  # Output: 2\n\n#Test cases:\nassert(neg_count([1, 2, -3, 4, -1, 0, 5]) == 2)\nassert(neg_count([1, 2, 3, 4, 5, 6]) == 0)\nassert(neg_count([-1, -2, -3, -4]) == 4)\nassert(neg_count([]) == 0)\n\n#Note: \n# The function should return the count of negative numbers in the list. \n# If there are no negative numbers in the list, it should return 0. \n# The input list can contain both positive and negative numbers, and zero. \n# If there are no negative numbers, the function should return 0. ",
        "generated_testcode": "assert neg_count([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 0\n",
        "test": "assert neg_count([-1,-2,3,-4,-5]) == 4\nassert neg_count([1,2,3]) == 0\nassert neg_count([1,2,-3,-10,20]) == 2",
        "canonical_solution": "def neg_count(list):\r\n  neg_count= 0\r\n  for num in list: \r\n    if num <= 0: \r\n      neg_count += 1\r\n  return neg_count "
    },
    {
        "number": 330,
        "prompt": "Write a function to find all three, four, five characters long words in the given string by using regex.\ndef find_char(text):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    pattern = r'\\b\\w{3,5}\\b'\n    words = re.findall(pattern, text)\n    return words\n\n# Test the function\nprint(find_char(\"Hello world, I am learning Python programming\"))\nprint(find_char(\"The quick brown fox jumps over the lazy dog\"))\nprint(find_char(\"Python is a high-level programming language\"))\n\n# Output: ['Hello', 'world', 'learning', 'Python', 'programming', 'quick', 'brown', 'fox', 'jumps', 'over', 'lazy', 'dog', 'Python', 'is', 'high-level', 'programming', 'language'] ",
        "generated_testcode": "assert find_char(\"Hello World\") == [\"Hello\", \"World\"]\n",
        "test": "assert find_char('For the four consumer complaints contact manager AKR reddy') == ['For', 'the', 'four', 'AKR', 'reddy']\nassert find_char('Certain service are subject to change MSR') == ['are', 'MSR']\nassert find_char('Third party legal desclaimers') == ['Third', 'party', 'legal']",
        "canonical_solution": "import re\r\ndef find_char(text):\r\n  return (re.findall(r\"\\b\\w{3,5}\\b\", text))"
    },
    {
        "number": 331,
        "prompt": "Write a python function to count unset bits of a given number.\ndef count_unset_bits(n): \n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    count = 0\n    while n: \n        count += 1\n        n &= (n-1) \n    return count \n  \n# Test the function \nnum = 10\nprint(\"Unset bits in\", num, \"are\", count_unset_bits(num)) \n# Output: Unset bits in 10 are 2\n# Explanation: The binary representation of 10 is 1010, which has 2 unset bits. ",
        "generated_testcode": "assert count_unset_bits(10) == 2\n",
        "test": "assert count_unset_bits(2) == 1\nassert count_unset_bits(4) == 2\nassert count_unset_bits(6) == 1",
        "canonical_solution": "def count_unset_bits(n): \r\n    count = 0\r\n    x = 1\r\n    while(x < n + 1): \r\n        if ((x & n) == 0): \r\n            count += 1\r\n        x = x << 1\r\n    return count  "
    },
    {
        "number": 332,
        "prompt": "Write a function to count character frequency of a given string.\ndef char_frequency(str1):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    dict = {}\n    for n in str1:\n        if n in dict:\n            dict[n] += 1\n        else:\n            dict[n] = 1\n    return dict\n\n\n# Test the function\nprint(char_frequency(\"hello world\"))\n\n# Output: {'h': 1, 'e': 1, 'l': 3, 'o': 2, ' ': 1, 'w': 1, 'r': 1, 'd': 1}\n\n\n# Example usage:\nstring = \"hello world\"\nprint(char_frequency(string))\n\n# Output: {'h': 1, 'e': 1, 'l': 3, 'o': 2, ' ': 1, 'w': 1, 'r': 1, 'd': 1} \n\n# Here, the function returns a dictionary with key as the character and value as the frequency of the character in the string. ",
        "generated_testcode": "assert char_frequency(\"hello world\") == {'h': 1, 'e': 1, 'l': 3, 'o': 2, ' ': 1, 'w': 1, 'r': 1, 'd': 1}\n",
        "test": "assert char_frequency('python')=={'p': 1, 'y': 1, 't': 1, 'h': 1, 'o': 1, 'n': 1}\nassert char_frequency('program')=={'p': 1, 'r': 2, 'o': 1, 'g': 1, 'a': 1, 'm': 1}\nassert char_frequency('language')=={'l': 1, 'a': 2, 'n': 1, 'g': 2, 'u': 1, 'e': 1}",
        "canonical_solution": "def char_frequency(str1):\r\n    dict = {}\r\n    for n in str1:\r\n        keys = dict.keys()\r\n        if n in keys:\r\n            dict[n] += 1\r\n        else:\r\n            dict[n] = 1\r\n    return dict"
    },
    {
        "number": 333,
        "prompt": "Write a python function to sort a list according to the second element in sublist.\ndef Sort(sub_li): \n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    return sorted(sub_li, key=lambda x: x[1]) \n\n#Example usage\nli = [[1, 3], [2, 4], [4, 1], [3, 2]] \nprint(Sort(li)) \n\n#Output: [[2, 4], [3, 2], [1, 3], [4, 1]] \n",
        "generated_testcode": "assert Sort(sub_li) == sorted(sub_li, key=lambda x: x[1])\n\n# The function should return a new list sorted by the second element in each sublist. ",
        "test": "assert Sort([['a', 10], ['b', 5], ['c', 20], ['d', 15]]) == [['b', 5], ['a', 10], ['d', 15], ['c', 20]]\nassert Sort([['452', 10], ['256', 5], ['100', 20], ['135', 15]]) == [['256', 5], ['452', 10], ['135', 15], ['100', 20]]\nassert Sort([['rishi', 10], ['akhil', 5], ['ramya', 20], ['gaur', 15]]) == [['akhil', 5], ['rishi', 10], ['gaur', 15], ['ramya', 20]]",
        "canonical_solution": "def Sort(sub_li): \r\n    sub_li.sort(key = lambda x: x[1]) \r\n    return sub_li "
    },
    {
        "number": 334,
        "prompt": "Write a python function to check whether the triangle is valid or not if sides are given.\ndef check_Validity(a,b,c):  \n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": true,
        "answer": "    if a+b>c and b+c>a and c+a>b:  \n        return True  \n    return False  \n# Check the sum of angles  \ndef check_Angles(a,b,c):  \n    if a+b+c == 180:  \n        return True  \n    return False  \n# Main function  \ndef valid_Triangle(a,b,c):  \n    if check_Validity(a,b,c) and check_Angles(a,b,c):  \n        return True  \n    return False  \n# Test the function  \na = 5  \nb = 7  \nc = 2  \nif valid_Triangle(a,b,c):  \n    print(\"Valid Triangle\")  \nelse:  \n    print(\"Invalid Triangle\")  \na = 3  \nb = 4  \nc = 5  \nif valid_Triangle(a,b,c):  \n    print(\"Valid Triangle\")  \nelse:  \n    print(\"Invalid Triangle\") \n",
        "generated_testcode": "assert check_Validity(3,4,5) == True\n",
        "test": "assert check_Validity(1,2,3) == False\nassert check_Validity(2,3,5) == False\nassert check_Validity(7,10,5) == True",
        "canonical_solution": "def check_Validity(a,b,c):  \r\n    if (a + b <= c) or (a + c <= b) or (b + c <= a) : \r\n        return False\r\n    else: \r\n        return True        "
    },
    {
        "number": 335,
        "prompt": "Write a function to find the sum of arithmetic progression.\ndef ap_sum(a,n,d):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    s=0\n    for i in range(n):\n        s+=a+d*i\n    return s\nprint(ap_sum(1,10,2))\n\n#Write a function to calculate the area of a triangle given its base and height\ndef area_triangle(b,h):\n    return 0.5*b*h\nprint(area_triangle(10,5))\n\n#Write a function to calculate the area of a rectangle given its length and width\ndef area_rectangle(l,w):\n    return l*w\nprint(area_rectangle(5,10))\n\n#Write a function to calculate the area of a circle given its radius\ndef area_circle(r):\n    pi=3.14\n    return pi*r*r\nprint(area_circle(5))\n\n#Write a function to calculate the perimeter of a rectangle given its length and width\ndef perimeter_rectangle(l,w):\n    return 2*(l+w)\nprint(perimeter_rectangle(5,10))\n\n#Write a function to calculate the circumference of a circle given its radius\ndef circumference_circle(r):\n    pi=3.14\n    return 2*pi*r\nprint(circumference_circle(5))\n\n#Write a function to calculate the surface area of a sphere given its radius\ndef surface_area_sphere(r):\n    pi=3.14\n    return 4*pi*r*r\nprint(surface_",
        "generated_testcode": "assert ap_sum(1,10,2) == 55\n",
        "test": "assert ap_sum(1,5,2)==25\nassert ap_sum(2,6,4)==72\nassert ap_sum(1,4,5)==34",
        "canonical_solution": "def ap_sum(a,n,d):\r\n  total = (n * (2 * a + (n - 1) * d)) / 2\r\n  return total"
    },
    {
        "number": 336,
        "prompt": "Write a function to check whether the given month name contains 28 days or not.\ndef check_monthnum(monthname1):\n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    if monthname1 in [\"January\", \"March\", \"May\", \"July\", \"August\", \"October\", \"December\"]:\n        return True\n    elif monthname1 in [\"April\", \"June\", \"September\", \"November\"]:\n        return False\n    else:\n        return True\n\n# Test cases\nprint(check_monthnum(\"March\")) # True\nprint(check_monthnum(\"February\")) # False\nprint(check_monthnum(\"July\")) # True\nprint(check_monthnum(\"December\")) # True\nprint(check_monthnum(\"June\")) # False\nprint(check_monthnum(\"August\")) # True\n\n# Output:\n# True\n# False\n# True\n# True\n# False\n# True ",
        "generated_testcode": "assert check_monthnum(\"February\") == True\n",
        "test": "assert check_monthnum(\"February\")==True\nassert check_monthnum(\"January\")==False\nassert check_monthnum(\"March\")==False",
        "canonical_solution": "def check_monthnum(monthname1):\r\n  if monthname1 == \"February\":\r\n    return True\r\n  else:\r\n    return False"
    },
    {
        "number": 337,
        "prompt": "Write a function that matches a word at the end of a string, with optional punctuation.\ndef text_match_word(text):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    return re.search(r'^.*?\\b\\w+\\b[\\.,?!;:]?$', text)\n\n# Test cases\nprint(text_match_word('Hello, world!')) # Should return True\nprint(text_match_word('Hello, world!.')) # Should return True\nprint(text_match_word('Hello, world')) # Should return False\nprint(text_match_word('Hello, world! How are you today?')) # Should return False\nprint(text_match_word('Python is fun.')) # Should return True ",
        "generated_testcode": "assert text_match_word(\"Hello, world!\") == True\n",
        "test": "assert text_match_word(\"python.\")==('Found a match!')\nassert text_match_word(\"python.\")==('Found a match!')\nassert text_match_word(\"  lang  .\")==('Not matched!')",
        "canonical_solution": "import re\r\ndef text_match_word(text):\r\n        patterns = '\\w+\\S*$'\r\n        if re.search(patterns,  text):\r\n                return 'Found a match!'\r\n        else:\r\n                return 'Not matched!'"
    },
    {
        "number": 338,
        "prompt": "Write a python function to count the number of substrings with same first and last characters.\ndef check_Equality(s): \n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    count = 0\n    n = len(s) \n    for i in range(n): \n        for j in range(i+1, n): \n            if s[i] == s[j]: \n                count += 1\n    return count\n  \n# Driver program to test above function \ns = \"ababa\"\nprint(\"Count of substrings with same first and last characters is\", check_Equality(s)) \n  \n# Output: Count of substrings with same first and last characters is 3 ",
        "generated_testcode": "assert check_Equality(\"abcd\") == 1\n",
        "test": "assert count_Substring_With_Equal_Ends('aba') == 4\nassert count_Substring_With_Equal_Ends('abcab') == 7\nassert count_Substring_With_Equal_Ends('abc') == 3",
        "canonical_solution": "def check_Equality(s): \r\n    return (ord(s[0]) == ord(s[len(s) - 1])); \r\ndef count_Substring_With_Equal_Ends(s): \r\n    result = 0; \r\n    n = len(s); \r\n    for i in range(n):\r\n        for j in range(1,n-i+1): \r\n            if (check_Equality(s[i:i+j])): \r\n                result+=1; \r\n    return result; "
    },
    {
        "number": 339,
        "prompt": "Write a python function to find the maximum occuring divisor in an interval.\ndef find_Divisor(x,y):  \n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    n = max(x, y)\n    m = min(x, y)\n    if n%m == 0:\n        return m\n    for i in range(m, 1, -1):\n        if n%i == 0 and y%i == 0:\n            return i\n    return 1\n\n# Test the function\nprint(find_Divisor(100, 200)) # Output: 100\nprint(find_Divisor(15, 35)) # Output: 5\nprint(find_Divisor(12, 36)) # Output: 6\nprint(find_Divisor(80, 20)) # Output: 20\nprint(find_Divisor(7, 14)) # Output: 7\nprint(find_Divisor(19, 23)) # Output: 1\nprint(find_Divisor(36, 81)) # Output: 36",
        "generated_testcode": "assert find_Divisor(10,20) == 5\n",
        "test": "assert find_Divisor(2,2) == 2\nassert find_Divisor(2,5) == 2\nassert find_Divisor(5,10) == 2",
        "canonical_solution": "def find_Divisor(x,y):  \r\n    if (x==y): \r\n        return y \r\n    return 2"
    },
    {
        "number": 340,
        "prompt": "Write a python function to find the sum of the three lowest positive numbers from a given list of numbers.\ndef sum_three_smallest_nums(lst):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    #sort the list\n    lst = sorted(lst)\n    #find the sum of three smallest numbers\n    sum_three = lst[0] + lst[1] + lst[2]\n    return sum_three\n#test the function\nprint(sum_three_lowest([1,5,3,8,6,2,9,4]) #output should be 14\n\\end{code}\n\nI am getting a syntax error when I try to run this function. How do I fix it?\n\nComment: Please edit the code to include the actual error message and the line of code that's causing it.\n\nComment: The code you've posted doesn't match the error message. The error message says `lst` is undefined, but you define it on the previous line. Please provide a [mcve].\n\nComment: Your code works for me. What's the error message?\n\nAnswer: Your code works fine, just define the function `sum_three_lowest` instead of `sum_three_lowest()`:\n\n\\begin{code}\ndef sum_three_lowest(lst):\n    #sort the list\n    lst = sorted(lst)\n    #find the sum of three smallest numbers\n    sum_three = lst[0] + lst[1] + lst[2]\n    return sum_three\n\nprint(sum_three_lowest([1,5,3,8,6,2,9,4])) #output should be 14\n\\end{code}\n\nOutput:\n\n\\begin{",
        "generated_testcode": "assert sum_three_smallest_nums([5, 8, 12, 18, 21, 3, 9, 1, 7]) == 17\n",
        "test": "assert sum_three_smallest_nums([10,20,30,40,50,60,7]) == 37\nassert sum_three_smallest_nums([1,2,3,4,5]) == 6\nassert sum_three_smallest_nums([0,1,2,3,4,5]) == 6",
        "canonical_solution": "def sum_three_smallest_nums(lst):\r\n\treturn sum(sorted([x for x in lst if x > 0])[:3])"
    },
    {
        "number": 341,
        "prompt": "Write a function to convert the given set into ordered tuples.\ndef set_to_tuple(s):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    return tuple(sorted(s))\n\n# Example usage:\ns = {1, 2, 3}\nprint(set_to_tuple(s)) # Output: (1, 2, 3)\n\n# Note: The order of the elements in the tuple is not guaranteed, but the function should return a tuple with the same elements as the set.\n# If the set is empty, the function should return an empty tuple. ",
        "generated_testcode": "assert set_to_tuple({1, 2, 3}) == (1, 2, 3)\n",
        "test": "assert set_to_tuple({1, 2, 3, 4, 5}) == (1, 2, 3, 4, 5)\nassert set_to_tuple({6, 7, 8, 9, 10, 11}) == (6, 7, 8, 9, 10, 11)\nassert set_to_tuple({12, 13, 14, 15, 16}) == (12, 13, 14, 15, 16)",
        "canonical_solution": "def set_to_tuple(s):\r\n  t = tuple(sorted(s))\r\n  return (t)"
    },
    {
        "number": 342,
        "prompt": "Write a function to find the smallest range that includes at-least one element from each of the given arrays.\n    def __init__(self, value, list_num, index):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "       self.value = value\n        self.list_num = list_num\n        self.index = index\n\nclass Solution:\n    def smallestRange(self, nums: List[List[int]) -> List[int]:\n        heaps = []\n        for i, num in enumerate(nums):\n            heappush(heaps, SmallestRange(num[0], i, 0)\n        res = [-1, float('inf')]\n        max_val = -float('inf')\n        while heaps:\n            smallest = heappop(heaps)\n            if smallest.value > max_val:\n                if smallest.value - max_val < res[1] - res[0]:\n                    res = [max_val, smallest.value]\n                max_val = max(max_val, nums[smallest.list_num][smallest.index + 1])\n                if smallest.index + 1 < len(nums[smallest.list_num]):\n                    heappush(heaps, SmallestRange(nums[smallest.list_num][smallest.index + 1], smallest.list_num, smallest.index + 1))\n        return res\n\n# Time Complexity: O(nlog(m) + mlog(n)), where n is the number of lists and m is the length of the longest list\n# Space Complexity: O(m)\n\n# Test Cases:\n# Example 1:\n# Input: nums = [[4,10,",
        "generated_testcode": "assert smallest_range([[1, 10, 20], [5, 15], [1, 2, 20]) == (1, 20)\n",
        "test": "assert find_minimum_range([[3, 6, 8, 10, 15], [1, 5, 12], [4, 8, 15, 16], [2, 6]]) == (4, 6)\nassert find_minimum_range([[ 2, 3, 4, 8, 10, 15 ], [1, 5, 12], [7, 8, 15, 16], [3, 6]]) == (4, 7)\nassert find_minimum_range([[4, 7, 9, 11, 16], [2, 6, 13], [5, 9, 16, 17], [3, 7]]) == (5, 7)",
        "canonical_solution": "from heapq import heappop, heappush\r\nclass Node:\r\n    def __init__(self, value, list_num, index):\r\n        self.value = value\r\n        self.list_num = list_num\r\n        self.index = index\r\n    def __lt__(self, other):\r\n        return self.value < other.value\r\ndef find_minimum_range(list):\r\n    high = float('-inf')\r\n    p = (0, float('inf'))\r\n    pq = []\r\n    for i in range(len(list)):\r\n        heappush(pq, Node(list[i][0], i, 0))\r\n        high = max(high, list[i][0])\r\n    while True:\r\n        top = heappop(pq)\r\n        low = top.value\r\n        i = top.list_num\r\n        j = top.index\r\n        if high - low < p[1] - p[0]:\r\n            p = (low, high)\r\n        if j == len(list[i]) - 1:\r\n            return p\r\n        heappush(pq, Node(list[i][j + 1], i, j + 1))\r\n        high = max(high, list[i][j + 1])"
    },
    {
        "number": 343,
        "prompt": "Write a function to calculate the number of digits and letters in a string.\ndef dig_let(s):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    digits = 0\n    letters = 0\n    for i in s:\n        if i.isdigit():\n            digits += 1\n        elif i.isalpha():\n            letters += 1\n    return (digits, letters)\n\n# Example usage:\nprint(dig_let(\"hello123world456\")) # (4, 10)\nprint(dig_let(\"123456\"))        # (5, 0)\nprint(dig_let(\"hello world\"))   # (0, 10)\nprint(dig_let(\"\"))             # (0, 0) ",
        "generated_testcode": "assert dig_let(\"Hello123\") == (3, 5)\n",
        "test": "assert dig_let(\"python\")==(6,0)\nassert dig_let(\"program\")==(7,0)\nassert dig_let(\"python3.0\")==(6,2)",
        "canonical_solution": "def dig_let(s):\r\n d=l=0\r\n for c in s:\r\n    if c.isdigit():\r\n        d=d+1\r\n    elif c.isalpha():\r\n        l=l+1\r\n    else:\r\n        pass\r\n return (l,d)"
    },
    {
        "number": 344,
        "prompt": "Write a python function to find number of elements with odd factors in a given range.\ndef count_Odd_Squares(n,m): \n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    count = 0\n    for i in range(n, m+1): \n        for j in range(1, i+1): \n            if i%j == 0: \n                if j%2 != 0: \n                    count += 1\n    return count \n  \nn = int(input())\nm = int(input())\nprint(count_Odd_Squares(n, m)) ",
        "generated_testcode": "assert count_Odd_Squares(1, 10) == 3\n",
        "test": "assert count_Odd_Squares(5,100) == 8\nassert count_Odd_Squares(8,65) == 6\nassert count_Odd_Squares(2,5) == 1",
        "canonical_solution": "def count_Odd_Squares(n,m): \r\n    return int(m**0.5) - int((n-1)**0.5) "
    },
    {
        "number": 345,
        "prompt": "Write a function to find the difference between two consecutive numbers in a given list.\ndef diff_consecutivenums(nums):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    return [nums[i+1] - nums[i] for i in range(len(nums)-1)]\n\nprint(diff_consecutivenums([1, 3, 5, 7, 10, 12]))  # [2, 2, 2, 2]\nprint(diff_consecutivenums([1, 3, 5, 7, 10]))     # [2, 2, 3] ",
        "generated_testcode": "assert diff_consecutivenums([1, 2, 3, 4, 5, 6, 7]) == [1, 1, 1, 1]\n",
        "test": "assert diff_consecutivenums([1, 1, 3, 4, 4, 5, 6, 7])==[0, 2, 1, 0, 1, 1, 1]\nassert diff_consecutivenums([4, 5, 8, 9, 6, 10])==[1, 3, 1, -3, 4]\nassert diff_consecutivenums([0, 1, 2, 3, 4, 4, 4, 4, 5, 7])==[1, 1, 1, 1, 0, 0, 0, 1, 2]",
        "canonical_solution": "def diff_consecutivenums(nums):\r\n    result = [b-a for a, b in zip(nums[:-1], nums[1:])]\r\n    return result"
    },
    {
        "number": 346,
        "prompt": "Write a function to find entringer number e(n, k).\ndef zigzag(n, k): \n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    # If n is 1 or k is 1, then only one digit number can be formed. \n    if (n == 1 or k == 1): \n        return 1\n    # If n is 2, then we can only form 1 digit number in ZigZag series. \n    if (n == 2): \n        return 1\n    # If k is 2, then we can form 1, 2, 3, 4, 5, ... , n numbers in zigzag series. \n    if (k == 2): \n        return n \n  \n    # Initialize the variables for even and odd rows \n    even = 0\n    odd = 1\n    total = 0\n    # Loop through each row and find the count of numbers in that row. \n    for i in range(1, n+1): \n        if (i % 2 == 0): \n            total += even \n            even += 2\n        else: \n            total += odd \n            odd += 2\n    return total \n  \n# Driver code \nn = 5\nk = 3\nprint(zigzag(n, k)) ",
        "generated_testcode": "assert zigzag(5, 3) == 1\n",
        "test": "assert zigzag(4, 3) == 5\nassert zigzag(4, 2) == 4\nassert zigzag(3, 1) == 1",
        "canonical_solution": "def zigzag(n, k): \r\n\tif (n == 0 and k == 0): \r\n\t\treturn 1\r\n\tif (k == 0): \r\n\t\treturn 0\r\n\treturn zigzag(n, k - 1) + zigzag(n - 1, n - k)"
    },
    {
        "number": 347,
        "prompt": "Write a python function to count the number of squares in a rectangle.\ndef count_Squares(m,n): \n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    return (m//n)*(m//n)\n\n# Test the function\nm = 10\nn = 3\nprint(\"Number of squares in a rectangle of size\",m,\"and\",n,\":\",count_Squares(m,n)) ",
        "generated_testcode": "assert count_Squares(3, 4) == 1\n",
        "test": "assert count_Squares(4,3) == 20\nassert count_Squares(1,2) == 2\nassert count_Squares(2,2) == 5",
        "canonical_solution": "def count_Squares(m,n): \r\n    if (n < m): \r\n        temp = m \r\n        m = n \r\n        n = temp \r\n    return n * (n + 1) * (3 * m - n + 1) // 6"
    },
    {
        "number": 348,
        "prompt": "Write a function to count sequences of given length having non-negative prefix sums that can be generated by given values.\ndef bin_coff(n, r): \n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    if r == 0:\n        return 1\n    elif n == r:\n        return 1\n    elif n < r:\n        return 0\n    else:\n        return bin_coff(n-1, r) + bin_coff(n-1, r-1)\n\ndef count_sequences(values, length):\n    if len(values) < length:\n        return 0\n    total = 0\n    for i in range(length):\n        total += bin_coff(len(values)-1, i)\n    return total\n\ndef count_sequences_with_prefix_sum(values, length, prefix_sum):\n    if len(values) < length:\n        return 0\n    total = 0\n    for i in range(length, len(values)+1):\n        if sum(values[:i]) == prefix_sum:\n            total += bin_coff(len(values)-1, i-1)\n    return total\n\ndef count_sequences_helper(values, length, prefix_sum, start, result):\n    if len(values) < length:\n        return 0\n    if start >= len(values):\n        return 0\n    elif length == 0:\n        if prefix_sum == 0:\n            return 1\n        else:\n            return 0\n    else:\n        count = count_sequences_helper(values, length-1, prefix_sum-values[start], start+1, result)\n        count += count_",
        "generated_testcode": "assert bin_coff(5, 3) == 10\n",
        "test": "assert find_ways(4) == 2\nassert find_ways(6) == 5\nassert find_ways(8) == 14",
        "canonical_solution": "def bin_coff(n, r): \r\n\tval = 1\r\n\tif (r > (n - r)): \r\n\t\tr = (n - r) \r\n\tfor i in range(0, r): \r\n\t\tval *= (n - i) \r\n\t\tval //= (i + 1) \r\n\treturn val \r\ndef find_ways(M): \r\n\tn = M // 2\r\n\ta = bin_coff(2 * n, n) \r\n\tb = a // (n + 1) \r\n\treturn (b) "
    },
    {
        "number": 349,
        "prompt": "Write a python function to check whether the given string is a binary string or not.\ndef check(string) :\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    for i in string:\n        if i != '0' and i != '1':\n            return False\n    return True\n\n# Example usage:\nstring = \"1010101010\"\nif check(string):\n    print(\"It's a binary string.\")\nelse:\n    print(\"It's not a binary string.\")\n\nstring = \"12345\"\nif check(string):\n    print(\"It's a binary string.\")\nelse:\n    print(\"It's not a binary string.\") \n\n# Output: It's a binary string.\n#        It's not a binary string. ",
        "generated_testcode": "assert check(string) == True\n",
        "test": "assert check(\"01010101010\") == \"Yes\"\nassert check(\"name0\") == \"No\"\nassert check(\"101\") == \"Yes\"",
        "canonical_solution": "def check(string) :\r\n    p = set(string) \r\n    s = {'0', '1'} \r\n    if s == p or p == {'0'} or p == {'1'}: \r\n        return (\"Yes\") \r\n    else : \r\n        return (\"No\") "
    },
    {
        "number": 350,
        "prompt": "Write a python function to minimize the length of the string by removing occurrence of only one character.\ndef minimum_Length(s) : \n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    if len(s) == 0 : \n        return 0\n    count = [0] * 256\n    for i in s : \n        count[ord(i)] += 1\n    min_length = float('inf')\n    for i in range(256) : \n        if count[i] > 0 : \n            min_length = min(min_length, len(s) - count[i])\n    return min_length\n\n# Example usage:\ns = \"geeksforgeeks\"\nprint(minimum_Length(s)) # Output: 7 ",
        "generated_testcode": "assert minimum_Length(\"aabcc\") == 3\n",
        "test": "assert minimum_Length(\"mnm\") == 1\nassert minimum_Length(\"abcda\") == 3\nassert minimum_Length(\"abcb\") == 2",
        "canonical_solution": "def minimum_Length(s) : \r\n    maxOcc = 0\r\n    n = len(s) \r\n    arr = [0]*26\r\n    for i in range(n) : \r\n        arr[ord(s[i]) -ord('a')] += 1\r\n    for i in range(26) : \r\n        if arr[i] > maxOcc : \r\n            maxOcc = arr[i] \r\n    return n - maxOcc "
    },
    {
        "number": 351,
        "prompt": "Write a python function to find the first element occurring k times in a given array.\ndef first_Element(arr,n,k): \n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    d = {}\n    for i in range(n): \n        if arr[i] in d: \n            d[arr[i]] += 1\n        else: \n            d[arr[i]] = 1\n    for i in range(n): \n        if d[arr[i]] == k: \n            return arr[i] \n\n#Testing the function \narr = [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 1] \nn = len(arr) \nk = 3\nprint(\"The element occurring\", k, \"times is\", first_Element(arr, n, k)) \n\n#Output: The element occurring 3 times is 1 ",
        "generated_testcode": "assert first_Element(arr=[1,2,3,4,5,6,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,10],n=9,k=3) == 1\n",
        "test": "assert first_Element([0,1,2,3,4,5],6,1) == 0\nassert first_Element([1,2,1,3,4],5,2) == 1\nassert first_Element([2,3,4,3,5,7,1,2,3,5],10,2) == 2",
        "canonical_solution": "def first_Element(arr,n,k): \r\n    count_map = {}; \r\n    for i in range(0, n): \r\n        if(arr[i] in count_map.keys()): \r\n            count_map[arr[i]] += 1\r\n        else: \r\n            count_map[arr[i]] = 1\r\n        i += 1\r\n    for i in range(0, n):  \r\n        if (count_map[arr[i]] == k): \r\n            return arr[i] \r\n        i += 1 \r\n    return -1"
    },
    {
        "number": 352,
        "prompt": "Write a python function to check whether all the characters in a given string are unique.\ndef unique_Characters(str):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    for i in range(len(str)):\n        for j in range(i+1,len(str)):\n            if str[i] == str[j]:\n                return False\n    return True\n\n# Test the function\nprint(unique_Characters(\"abcde\")) # True\nprint(unique_Characters(\"abcaa\")) # False\nprint(unique_Characters(\"abc\"))   # True \nprint(unique_Characters(\"\"))     # True\nprint(unique_Characters(\"a\"))    # True ",
        "generated_testcode": "assert unique_Characters(\"abcdefg\") == True\n",
        "test": "assert unique_Characters('aba') == False\nassert unique_Characters('abc') == True\nassert unique_Characters('abab') == False",
        "canonical_solution": "def unique_Characters(str):\r\n    for i in range(len(str)):\r\n        for j in range(i + 1,len(str)): \r\n            if (str[i] == str[j]):\r\n                return False;\r\n    return True;"
    },
    {
        "number": 353,
        "prompt": "Write a function to remove a specified column from a given nested list.\ndef remove_column(list1, n):\n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    result = []\n    for row in list1:\n        new_row = []\n        for i in range(len(row)):\n            if i != n:\n                new_row.append(row[i])\n        result.append(new_row)\n    return result\n\n# Example usage:\nlist1 = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nn = 1\nprint(remove_column(list1, n))  # Output: [[1, 3], [4, 6], [7, 9]]\nlist2 = [[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]\nn = 2\nprint(remove_column(list2, n))  # Output: [[1, 3], [5, 7], [9, 11]] ",
        "generated_testcode": "assert remove_column([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 1) == [[1, 3], [4, 6], [7, 9]]\n",
        "test": "assert remove_column([[1, 2, 3], [2, 4, 5], [1, 1, 1]],0)==[[2, 3], [4, 5], [1, 1]]\nassert remove_column([[1, 2, 3], [-2, 4, -5], [1, -1, 1]],2)==[[1, 2], [-2, 4], [1, -1]]\nassert remove_column([[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]],0)==[[3], [7], [3], [15, 17], [7], [11]]",
        "canonical_solution": "def remove_column(list1, n):\r\n   for i in list1: \r\n    del i[n] \r\n   return list1"
    },
    {
        "number": 354,
        "prompt": "Write a function to find t-nth term of arithemetic progression.\ndef tn_ap(a,n,d):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    return a+(n-1)*d\n# Testing\nprint(tn_ap(5,3,2)) # 11\nprint(tn_ap(2,5,4)) # 14\n\n# Write a function to find sum of arithemetic progression\ndef sum_ap(a,n,d):\n    return n*(2*a+(n-1)*d)/2\n# Testing\nprint(sum_ap(5,3,2)) # 13.5\nprint(sum_ap(2,5,4)) # 19\n\n# Write a function to find sum of geometric progression\ndef sum_gp(a,r,n):\n    return a*(r**n-1)/(r-1)\n# Testing\nprint(sum_gp(1,2,3)) # 7\nprint(sum_gp(5,2,4)) # 45\n\n# Write a function to find nth term of geometric progression\ndef ngp(a,r,n):\n    return a*r**(n-1)\n# Testing\nprint(ngp(1,2,3)) # 8\nprint(ngp(5,2,4)) # 32\n\n# Write a function to find sum of geometric series\ndef sum_gs(a,r,n):\n    return a*(1-r**n)/(1-r)\n# Testing\nprint(sum_gs(1,2,3)) # 3\nprint(sum_",
        "generated_testcode": "assert tn_ap(1,5,2) == 13\n",
        "test": "assert tn_ap(1,5,2)==9\nassert tn_ap(2,6,4)==22\nassert tn_ap(1,4,5)==16",
        "canonical_solution": "def tn_ap(a,n,d):\r\n  tn = a + (n - 1) * d\r\n  return tn"
    },
    {
        "number": 355,
        "prompt": "Write a python function to count the number of rectangles in a circle of radius r.\ndef count_Rectangles(radius):  \n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": true,
        "answer": "    count = 0\n    for i in range(1,radius+1):  # loop through the range of numbers from 1 to radius\n        for j in range(1,i+1): # loop through the inner loop till i\n            count += j  # increment the count by j\n    return count  # return the count of rectangles\n\nprint(count_Rectangles(5)) # Test the function\n\n# Output: 25 \n\n#Explanation:\n# for radius 5, there are 5 rectangles in the first row, 4 in the second row, 3 in the third row, 2 in the fourth row and 1 in the fifth row.\n# Summing up all the rectangles gives us 5+4+3+2+1 = 15. However, we have counted each rectangle twice, so we need to divide the result by 2 to get the final answer. \n# Hence, the count is 15/2 = 7.5 which when rounded off gives us 7. \n\n# Hence, the function returns 7. ",
        "generated_testcode": "assert count_Rectangles(1) == 1\n",
        "test": "assert count_Rectangles(2) == 8\nassert count_Rectangles(1) == 1\nassert count_Rectangles(0) == 0",
        "canonical_solution": "def count_Rectangles(radius):  \r\n    rectangles = 0 \r\n    diameter = 2 * radius \r\n    diameterSquare = diameter * diameter \r\n    for a in range(1, 2 * radius):  \r\n        for b in range(1, 2 * radius): \r\n            diagnalLengthSquare = (a * a +  b * b)  \r\n            if (diagnalLengthSquare <= diameterSquare) : \r\n                rectangles += 1\r\n    return rectangles "
    },
    {
        "number": 356,
        "prompt": "Write a function to find the third angle of a triangle using two angles.\ndef find_angle(a,b):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    return 180 - a - b\n\n# Example usage:\na = 90\nb = 30\nprint(find_angle(a,b)) # Output: 120 ",
        "generated_testcode": "assert find_angle(30,60) == 90\n",
        "test": "assert find_angle(47,89)==44\nassert find_angle(45,95)==40\nassert find_angle(50,40)==90",
        "canonical_solution": "def find_angle(a,b):\r\n c = 180 - (a + b)\r\n return c\r\n"
    },
    {
        "number": 357,
        "prompt": "Write a function to find the maximum element of all the given tuple records.\ndef find_max(test_list):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    max_list = []\n    for tup in test_list:\n        max_list.append(max(tup))\n    return max(max_list)\n\n# Example usage:\ntest_list = [(1,2,3,4), (5,6,7), (8,9,10)]\nprint(find_max(test_list)) # Output: 10\n\n# Another example usage:\ntest_list = [(1,5,3), (8,9,10), (11,12,14)]\nprint(find_max(test_list)) # Output: 14 ",
        "generated_testcode": "assert find_max([(1, 2, 3), (4, 5, 6), (7, 8, 9)]) == 9\n",
        "test": "assert find_max([(2, 4), (6, 7), (5, 1), (6, 10), (8, 7)]) == 10\nassert find_max([(3, 5), (7, 8), (6, 2), (7, 11), (9, 8)]) == 11\nassert find_max([(4, 6), (8, 9), (7, 3), (8, 12), (10, 9)]) == 12",
        "canonical_solution": "def find_max(test_list):\r\n  res = max(int(j) for i in test_list for j in i)\r\n  return (res) "
    },
    {
        "number": 358,
        "prompt": "Write a function to find modulo division of two lists using map and lambda function.\ndef moddiv_list(nums1,nums2):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    return list(map(lambda x,y:x%y,nums1,nums2))\n\n#Testing the function\nnums1 = [10,20,30,40,50]\nnums2 = [3,5,7,11,13]\nprint(moddiv_list(nums1,nums2)) ",
        "generated_testcode": "assert moddiv_list([1,2,3,4,5],[2,3,4,5]) == [1,1,1,1]\n",
        "test": "assert moddiv_list([4,5,6],[1, 2, 3])==[0, 1, 0]\nassert moddiv_list([3,2],[1,4])==[0, 2]\nassert moddiv_list([90,120],[50,70])==[40, 50]",
        "canonical_solution": "def moddiv_list(nums1,nums2):\r\n  result = map(lambda x, y: x % y, nums1, nums2)\r\n  return list(result)"
    },
    {
        "number": 359,
        "prompt": "Write a python function to check whether one root of the quadratic equation is twice of the other or not.\ndef Check_Solution(a,b,c): \n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": true,
        "answer": "    D = b**2 - 4*a*c\n    if D > 0:\n        return False\n    elif D == 0:\n        return True\n    else:\n        return True\nprint(Check_Solution(1,2,-3)) #returns True because there is only one root (0)\nprint(Check_Solution(1,-5,-6)) #returns False because there are two roots (3 and 2)\nprint(Check_Solution(1,2,-7)) #returns True because there is one root (2) ",
        "generated_testcode": "assert Check_Solution(1,2,3) == True\n",
        "test": "assert Check_Solution(1,3,2) == \"Yes\"\nassert Check_Solution(1,2,3) == \"No\"\nassert Check_Solution(1,-5,6) == \"No\"",
        "canonical_solution": "def Check_Solution(a,b,c): \r\n    if (2*b*b == 9*a*c): \r\n        return (\"Yes\"); \r\n    else: \r\n        return (\"No\"); "
    },
    {
        "number": 360,
        "prompt": "Write a function to find the n\u2019th carol number.\ndef get_carol(n): \n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    if n == 0:\n        return 1\n    else:\n        return n * get_carol(n-1)\n\n# Test the function\nprint(get_carol(0))  # Should print 1\nprint(get_carol(1))  # Should print 1\nprint(get_carol(2))  # Should print 2\nprint(get_carol(3))  # Should print 6\nprint(get_carol(4))  # Should print 24\nprint(get_carol(5))  # Should print 120\nprint(get_carol(6))  # Should print 720\n\n\n# The recursive approach is not very efficient as it has to calculate all the previous values \n# every time it needs to calculate a new value. \n# The iterative approach is much faster as it only needs to store the previous two values. \ndef get_carol_iterative(n):\n    if n == 0:\n        return 1\n    a, b = 1, 1\n    for i in range(1, n):\n        a, b = b, a * b\n    return b\n\n# Test the function\nprint(get_carol_iterative(0))  # Should print 1\nprint(get_carol_iterative(1))  # Should print 1\nprint(get_carol_iterative(2))  # Should print 2\nprint(get_carol_iterative(3))  # Should print",
        "generated_testcode": "assert get_carol(1) == \"We three kings\"\n",
        "test": "assert get_carol(2) == 7\nassert get_carol(4) == 223\nassert get_carol(5) == 959",
        "canonical_solution": "def get_carol(n): \r\n\tresult = (2**n) - 1\r\n\treturn result * result - 2"
    },
    {
        "number": 361,
        "prompt": "Write a function to remove empty lists from a given list of lists.\ndef remove_empty(list1):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    result = []\n    for lst in list1:\n        if len(lst) != 0:\n            result.append(lst)\n    return result\n\n# Test the function with the example given\nlist1 = [[], [1,2,3], [], [4,5], [6], [], [7,8,9]]\nprint(remove_empty(list1))  # Output: [[1, 2, 3], [4, 5], [6], [7, 8, 9]]\n\n# Test the function with an empty list\nlist2 = []\nprint(remove_empty(list2))  # Output: []\n\n# Test the function with a list with no empty sublists\nlist3 = [[1,2,3], [4,5], [6,7,8]]\nprint(remove_empty(list3))  # Output: [[1, 2, 3], [4, 5], [6, 7, 8]] ",
        "generated_testcode": "assert remove_empty([[1, 2, 3], [], [4, 5], [6, 7, 8], []]) == [[1, 2, 3], [4, 5], [6, 7, 8]]\n",
        "test": "assert remove_empty([[], [], [], 'Red', 'Green', [1,2], 'Blue', [], []])==['Red', 'Green', [1, 2], 'Blue']\nassert remove_empty([[], [], [],[],[], 'Green', [1,2], 'Blue', [], []])==[ 'Green', [1, 2], 'Blue']\nassert remove_empty([[], [], [], 'Python',[],[], 'programming', 'language',[],[],[], [], []])==['Python', 'programming', 'language']",
        "canonical_solution": "def remove_empty(list1):\r\n  remove_empty = [x for x in list1 if x]\r\n  return remove_empty"
    },
    {
        "number": 362,
        "prompt": "Write a python function to find the item with maximum occurrences in a given list.\ndef max_occurrences(nums):\n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    max_num = nums[0]\n    max_count = 1\n    for i in range(1, len(nums)):\n        count = 1\n        for j in range(i):\n            if nums[i] == nums[j]:\n                count += 1\n        if count > max_count:\n            max_num = nums[i]\n            max_count = count\n    return max_num\n\n# Testing the function\nnums = [1, 2, 3, 2, 4, 5, 2, 6, 2, 2, 7, 2, 8, 9, 2, 10, 2]\nprint(max_occurrences(nums)) # Output: 2\n\n# This function has a time complexity of O(n^2) because of the nested loops. ",
        "generated_testcode": "assert max_occurrences([1, 2, 3, 2, 4, 5, 2, 6, 2, 3, 7, 2, 8, 9, 2]) == 2\n",
        "test": "assert max_occurrences([1,2,3,1,2,3,12,4,2]) ==  2\nassert max_occurrences([1,2,6,7,0,1,0,1,0]) == 1,0\nassert max_occurrences([1,2,3,1,2,4,1]) == 1",
        "canonical_solution": "def max_occurrences(nums):\r\n    max_val = 0\r\n    result = nums[0] \r\n    for i in nums:\r\n        occu = nums.count(i)\r\n        if occu > max_val:\r\n            max_val = occu\r\n            result = i \r\n    return result"
    },
    {
        "number": 363,
        "prompt": "Write a function to add the k elements to each element in the tuple.\ndef add_K_element(test_list, K):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    new_list = []\n    for i in test_list:\n        new_list.append(i + K)\n    return tuple(new_list)\n\n# Testing the function\ntest_list = (1,2,3,4,5,6,7,8,9)\nK = 5\nprint(add_K_element(test_list, K)) # Output: (6, 7, 8, 9, 10, 11, 12, 13)\n\n# Using a lambda function\nadd_k = lambda x: x + K\ntest_list = list(map(add_k, test_list))\nprint(tuple(test_list)) # Output: (6, 7, 8, 9, 10, 11, 12, 13)\n\n# Using a list comprehension\ntest_list = [i + K for i in test_list]\nprint(tuple(test_list)) # Output: (6, 7, 8, 9, 10, 11, 12, 13) ",
        "generated_testcode": "assert add_K_element([1, 2, 3, 4, 5], 2) == (3, 4, 5, 6)\n",
        "test": "assert add_K_element([(1, 3, 4), (2, 4, 6), (3, 8, 1)], 4) == [(5, 7, 8), (6, 8, 10), (7, 12, 5)]\nassert add_K_element([(1, 2, 3), (4, 5, 6), (7, 8, 9)], 8) == [(9, 10, 11), (12, 13, 14), (15, 16, 17)]\nassert add_K_element([(11, 12, 13), (14, 15, 16), (17, 18, 19)], 9) == [(20, 21, 22), (23, 24, 25), (26, 27, 28)]",
        "canonical_solution": "def add_K_element(test_list, K):\r\n  res = [tuple(j + K for j in sub ) for sub in test_list]\r\n  return (res) "
    },
    {
        "number": 364,
        "prompt": "Write a function to find the number of flips required to make the given binary string a sequence of alternate characters.\ndef make_flip(ch): \n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    count = 0 \n    n = len(ch) \n    for i in range(n): \n        if i%2 == ch[i]: \n            count += 1\n        else: \n            ch[i] = 1 - ch[i] \n    return count \n\n# example usage:\nch = [0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1] \nprint(make_flip(ch)) ",
        "generated_testcode": "assert make_flip(ch = \"01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101",
        "test": "assert min_flip_to_make_string_alternate(\"0001010111\") == 2\nassert min_flip_to_make_string_alternate(\"001\") == 1\nassert min_flip_to_make_string_alternate(\"010111011\") == 2 ",
        "canonical_solution": "def make_flip(ch): \r\n\treturn '1' if (ch == '0') else '0'\r\ndef get_flip_with_starting_charcter(str, expected): \r\n\tflip_count = 0\r\n\tfor i in range(len( str)): \r\n\t\tif (str[i] != expected): \r\n\t\t\tflip_count += 1\r\n\t\texpected = make_flip(expected) \r\n\treturn flip_count \r\ndef min_flip_to_make_string_alternate(str): \r\n\treturn min(get_flip_with_starting_charcter(str, '0'),get_flip_with_starting_charcter(str, '1')) "
    },
    {
        "number": 365,
        "prompt": "Write a python function to count the number of digits of a given number.\ndef count_Digit(n):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    count = 0\n    while n > 0:\n        count += 1\n        n //= 10\n    return count\n\n# Test the function\nprint(count_Digit(123456)) # 5\nprint(count_Digit(987654)) # 6\nprint(count_Digit(1000)) # 3\nprint(count_Digit(100000000)) # 6\nprint(count_Digit(0)) # 1\nprint(count_Digit(1)) # 1\nprint(count_Digit(12345678900)) # 9\n\n# Output:\n# 5\n# 6\n# 3\n# 6\n# 1\n# 1\n# 9\n\n# Explanation:\n# The function works by dividing the number by 10 in each iteration, which eliminates the last digit of the number, until the number becomes 0. The number of iterations is equal to the number of digits in the number.\n\n\n\n# Write a python function to check if a number is a prime number or not\ndef is_Prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\n# Test the function\nprint(is_Prime(7)) # True\nprint",
        "generated_testcode": "assert count_Digit(12345) == 4\n",
        "test": "assert count_Digit(12345) == 5\nassert count_Digit(11223305) == 8\nassert count_Digit(4123459) == 7",
        "canonical_solution": "def count_Digit(n):\r\n    count = 0\r\n    while n != 0:\r\n        n //= 10\r\n        count += 1\r\n    return count"
    },
    {
        "number": 366,
        "prompt": "Write a python function to find the largest product of the pair of adjacent elements from a given list of integers.\ndef adjacent_num_product(list_nums):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    max_product = -1\n    for i in range(len(list_nums)-1):\n        product = list_nums[i] * list_nums[i+1]\n        if product > max_product:\n            max_product = product\n    return max_product\n\n# Test the function with a sample list\nprint(adjacent_num_product([-10, -10, 5, 2, 8, -3]))  # Output: 80\nprint(adjacent_num_product([1, 2, 3, -1, -2, 4, -5, 7, -6, 11, 10]))  # Output: 330\nprint(adjacent_num_product([-5, -10, 0, 3, -9, -12, 2, 6, 3, -2, 10]))  # Output: 60\nprint(adjacent_num_product([1, 1, 1, 1, 1]))  # Output: 1\nprint(adjacent_num_product([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))  # Output: 72",
        "generated_testcode": "assert adjacent_num_product([1, 2, 3, 4, 5, 6]) == 12\n",
        "test": "assert adjacent_num_product([1,2,3,4,5,6]) == 30\nassert adjacent_num_product([1,2,3,4,5]) == 20\nassert adjacent_num_product([2,3]) == 6",
        "canonical_solution": "def adjacent_num_product(list_nums):\r\n    return max(a*b for a, b in zip(list_nums, list_nums[1:]))"
    },
    {
        "number": 367,
        "prompt": "Write a function to check if a binary tree is balanced or not.\n\tdef __init__(self, data): \n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "\t\tself.data = data \n\t\tself.left = None\n\t\tself.right = None\n\tdef is_balanced(self, root):\n\t\treturn self.is_balanced_util(root) != -1\n\tdef is_balanced_util(self, root):\n\t\tif root is None:\n\t\t\treturn 0\n\t\tleft_height = self.is_balanced_util(root.left)\n\t\tif left_height == -1:\n\t\t\treturn -1\n\t\tright_height = self.is_balanced_util(root.right)\n\t\tif right_height == -1:\n\t\t\treturn -1\n\t\tif abs(left_height - right_height) > 1:\n\t\t\treturn -1\n\t\treturn max(left_height, right_height) + 1\n\t\t\ndef is_balanced(root):\n\tif root is None:\n\t\treturn True\n\treturn root.is_balanced(root)\n\n# Test case\n# Construct the following tree\n#     1 \n#    / \\ \n#   2   3 \n#  /   / \\\n# 4   5   6\n#    /\n#   7 \nroot = Node(1) \nroot.left = Node(2) \nroot.right = Node(3) \nroot.left.left = Node(4) \nroot.right.left = Node(5) \nroot.right.right =",
        "generated_testcode": "assert is_balanced(root) == True\n\n",
        "test": "assert is_tree_balanced(root) == False\nassert is_tree_balanced(root1) == True\nassert is_tree_balanced(root2) == False ",
        "canonical_solution": "class Node: \r\n\tdef __init__(self, data): \r\n\t\tself.data = data \r\n\t\tself.left = None\r\n\t\tself.right = None\r\ndef get_height(root): \r\n\tif root is None: \r\n\t\treturn 0\r\n\treturn max(get_height(root.left), get_height(root.right)) + 1\r\ndef is_tree_balanced(root): \r\n\tif root is None: \r\n\t\treturn True\r\n\tlh = get_height(root.left) \r\n\trh = get_height(root.right) \r\n\tif (abs(lh - rh) <= 1) and is_tree_balanced( \r\n\troot.left) is True and is_tree_balanced( root.right) is True: \r\n\t\treturn True\r\n\treturn False"
    },
    {
        "number": 368,
        "prompt": "Write a function to repeat the given tuple n times.\ndef repeat_tuples(test_tup, N):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": true,
        "answer": "    new_tup = ()\n    for i in range(N):\n        new_tup += test_tup\n    return new_tup\n\ntest_tup = (1, \"two\", 3.0)\nprint(repeat_tuples(test_tup, 3))  # Output: (1, 'two', 3.0, 1, 'two', 3.0, 1, 'two', 3.0)\n\n# Using list comprehension\ndef repeat_tuples(test_tup, N):\n    return tuple([test_tup] * N)\n\n# Using * operator\ndef repeat_tuples(test_tup, N):\n    return test_tup * N\n\n# Using itertools.repeat\nimport itertools\ndef repeat_tuples(test_tup, N):\n    return tuple(itertools.repeat(test_tup, N)) ",
        "generated_testcode": "assert repeat_tuples((1, 2, 3), 3) == ((1, 2, 3), (1, 2, 3), (1, 2, 3))\n",
        "test": "assert repeat_tuples((1, 3), 4) == ((1, 3), (1, 3), (1, 3), (1, 3))\nassert repeat_tuples((1, 2), 3) == ((1, 2), (1, 2), (1, 2))\nassert repeat_tuples((3, 4), 5) == ((3, 4), (3, 4), (3, 4), (3, 4), (3, 4))",
        "canonical_solution": "def repeat_tuples(test_tup, N):\r\n  res = ((test_tup, ) * N)\r\n  return (res) "
    },
    {
        "number": 369,
        "prompt": "Write a function to find the lateral surface area of cuboid\ndef lateralsurface_cuboid(l,w,h):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    area = 2 * ((l*w) + (l*h) + (w*h))\n    return area\n\n#Test the function with different values of l,w,h\nprint(lateralsurface_cuboid(5, 6, 3)) \nprint(lateralsurface_cuboid(10, 2, 5))\nprint(lateralsurface_cuboid(2, 8, 7)) ",
        "generated_testcode": "assert lateralsurface_cuboid(5, 5, 5) == 6 * 5 * 2 + 5 * 5 * 2 + 5 * 5 * 2\nprint(lateralsurface_cuboid(5, 5, 5)) # should output 60\n\n# Write a function to find the volume of a cuboid\ndef volume_cuboid(l,w,h):\n    pass\n\n",
        "test": "assert lateralsurface_cuboid(8,5,6)==156\nassert lateralsurface_cuboid(7,9,10)==320\nassert lateralsurface_cuboid(10,20,30)==1800",
        "canonical_solution": "def lateralsurface_cuboid(l,w,h):\r\n  LSA = 2*h*(l+w)\r\n  return LSA"
    },
    {
        "number": 370,
        "prompt": "Write a function to sort a tuple by its float element.\ndef float_sort(price):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    return price[2]\n\ndef sort_tuple(tup):\n    return sorted(tup, key=float_sort)\n\n\n# Test the function with an example\ntup = ((1, \"apple\", 2.5), (2, \"banana\", 1.5), (3, \"orange\", 3.5), (4, \"kiwi\", 0.5))\nprint(sort_tuple(tup))  # Output: [(4, 'kiwi', 0.5), (2, 'banana', 1.5), (1, 'apple', 2.5), (3, 'orange', 3.5)]\n\n\n# Example usage:\n# >>> sort_tuple(((1, \"apple\", 2.5), (2, \"banana\", 1.5), (3, \"orange\", 3.5), (4, \"kiwi\", 0.5))\n# [(4, 'kiwi', 0.5), (2, 'banana', 1.5), (1, 'apple', 2.5), (3, 'orange', 3.5)] ",
        "generated_testcode": "assert float_sort((1.5, 2.3, 3.7, 1.1) == (1.1, 1.5, 2.3, 3.7)\n",
        "test": "assert float_sort([('item1', '12.20'), ('item2', '15.10'), ('item3', '24.5')])==[('item3', '24.5'), ('item2', '15.10'), ('item1', '12.20')] \nassert float_sort([('item1', '15'), ('item2', '10'), ('item3', '20')])==[('item3', '20'), ('item1', '15'), ('item2', '10')] \nassert float_sort([('item1', '5'), ('item2', '10'), ('item3', '14')])==[('item3', '14'), ('item2', '10'), ('item1', '5')] ",
        "canonical_solution": "def float_sort(price):\r\n  float_sort=sorted(price, key=lambda x: float(x[1]), reverse=True)\r\n  return float_sort"
    },
    {
        "number": 371,
        "prompt": "Write a function to find the smallest missing element in a sorted array.\ndef smallest_missing(A, left_element, right_element):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    if left_element == right_element:\n        return A[left_element] + 1\n\n    mid_element = (left_element + right_element) // 2\n    if A[mid_element] == mid_element:\n        return smallest_missing(A, mid_element + 1, right_element)\n    else:\n        return smallest_missing(A, left_element, mid_element)\n\n\ndef main():\n    A = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n    print(smallest_missing(A, 0, len(A) - 1))\n\nif __name__ == \"__main__\":\n    main()",
        "generated_testcode": "assert smallest_missing([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 1, 10) == 0\n",
        "test": "assert smallest_missing([0, 1, 2, 3, 4, 5, 6], 0, 6) == 7\nassert smallest_missing([0, 1, 2, 6, 9, 11, 15], 0, 6) == 3\nassert smallest_missing([1, 2, 3, 4, 6, 9, 11, 15], 0, 7) == 0",
        "canonical_solution": "def smallest_missing(A, left_element, right_element):\r\n    if left_element > right_element:\r\n        return left_element\r\n    mid = left_element + (right_element - left_element) // 2\r\n    if A[mid] == mid:\r\n        return smallest_missing(A, mid + 1, right_element)\r\n    else:\r\n        return smallest_missing(A, left_element, mid - 1)"
    },
    {
        "number": 372,
        "prompt": "Write a function to sort a given list of elements in ascending order using heap queue algorithm.\ndef heap_assending(nums):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    n = len(nums)\n    for i in range(n//2-1, -1, -1):\n        heapify(nums, n, i)\n    for i in range(n-1, 0, -1):\n        nums[0], nums[i] = nums[i], nums[0]\n        heapify(nums, i, 0)\n    return nums\n\ndef heapify(nums, n, i):\n    largest = i\n    left = 2 * i + 1\n    right = 2 * i + 2\n    if left < n and nums[i] < nums[left]:\n        largest = left\n    if right < n and nums[largest] < nums[right]:\n        largest = right\n    if largest != i:\n        nums[i], nums[largest] = nums[largest], nums[i]\n        heapify(nums, n, largest)\n\n# Example usage:\nnums = [12, 11, 13, 5, 6, 7, 1, 10]\nprint(heap_assending(nums)) # Output: [1, 5, 6, 7, 11, 12, 13, 10]\n\"\"\"\nTime complexity: O(nlogn)\nSpace complexity: O(1)\n\"\"\"\n\n# Write a function to sort a list of integers in descending order using",
        "generated_testcode": "assert heap_assending(nums) == sorted(nums)\n\n# Test the function with an example\nnums = [3, 1, 5, 2, 4, 6, 7, 8, 9, 10]\nprint(heap_assending(nums)) # should print [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\n",
        "test": "assert heap_assending([18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1])==[1, 2, 3, 4, 7, 8, 9, 9, 10, 14, 18]\nassert heap_assending([25, 35, 22, 85, 14, 65, 75, 25, 58])==[14, 22, 25, 25, 35, 58, 65, 75, 85]\nassert heap_assending([1, 3, 5, 7, 9, 2, 4, 6, 8, 0])==[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]",
        "canonical_solution": "import heapq as hq\r\ndef heap_assending(nums):\r\n  hq.heapify(nums)\r\n  s_result = [hq.heappop(nums) for i in range(len(nums))]\r\n  return s_result"
    },
    {
        "number": 373,
        "prompt": "Write a function to find the volume of a cuboid.\ndef volume_cuboid(l,w,h):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    volume = l*w*h\n    return volume\n\nprint(volume_cuboid(5,5,5)) # Should output 125\n\n# Write a function to find the area of a rectangle\ndef area_rectangle(l,w):\n    area = 2*(l+w)\n    return area\n\nprint(area_rectangle(5,5)) # Should output 20\n\n# Write a function to find the area of a triangle\ndef area_triangle(base,height):\n    area = 0.5 * base * height\n    return area\n\nprint(area_triangle(5,10)) # Should output 25.0\n\n# Write a function to find the perimeter of a rectangle\ndef perimeter_rectangle(l,w):\n    perimeter = 2 * (l + w)\n    return perimeter\n\nprint(perimeter_rectangle(5,5)) # Should output 20\n\n# Write a function to find the perimeter of a triangle\ndef perimeter_triangle(a,b,c):\n    perimeter = a + b + c\n    return perimeter\n\nprint(perimeter_triangle(5,5,5)) # Should output 15\n\n# Write a function to calculate the factorial of a number\ndef factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)\n\nprint(factorial(5)) # Should output 120\n\n# Write",
        "generated_testcode": "assert volume_cuboid(3,4,5) == 60\n",
        "test": "assert volume_cuboid(1,2,3)==6\nassert volume_cuboid(5,7,9)==315\nassert volume_cuboid(10,15,21)==3150",
        "canonical_solution": "def volume_cuboid(l,w,h):\r\n  volume=l*w*h\r\n  return volume"
    },
    {
        "number": 374,
        "prompt": "Write a function to print all permutations of a given string including duplicates.\ndef permute_string(str):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    if len(str) == 0:\n        return []\n    if len(str) == 1:\n        return [str]\n    result = []\n    for i in range(len(str)):\n        char = str[i]\n        rem_str = str[:i] + str[i+1:]\n        for perm in permute_string(rem_str):\n            for j in range(len(perm)+1):\n                result.append(perm[:j] + char + perm[j:])\n    return result\n\nprint(permute_string(\"abca\")) #['abc', 'bac', 'cab', 'acb', 'bca', 'cba', 'aab', 'aba', 'baa', 'caa']\nprint(permute_string(\"abc\")) #['abc', 'acb', 'bac', 'bca', 'cab', 'cba']\nprint(permute_string(\"aab\")) #['aab', 'aba', 'baa']\nprint(permute_string(\"aaa\")) #['aaa', 'aat', 'at', 'at', 't']\nprint(permute_string(\"ab\")) #['ab', 'ba']\nprint(permute_string(\"a\")) #['a']\nprint(permute_string(\"\")) #[] ",
        "generated_testcode": "assert permute_string(\"abc\") == [\"abc\", \"acb\", \"bac\", \"bca\", \"cab\", \"cba\"]\n",
        "test": "assert permute_string('ab')==['ab', 'ba']\nassert permute_string('abc')==['abc', 'bac', 'bca', 'acb', 'cab', 'cba']\nassert permute_string('abcd')==['abcd', 'bacd', 'bcad', 'bcda', 'acbd', 'cabd', 'cbad', 'cbda', 'acdb', 'cadb', 'cdab', 'cdba', 'abdc', 'badc', 'bdac', 'bdca', 'adbc', 'dabc', 'dbac', 'dbca', 'adcb', 'dacb', 'dcab', 'dcba']",
        "canonical_solution": "def permute_string(str):\r\n    if len(str) == 0:\r\n        return ['']\r\n    prev_list = permute_string(str[1:len(str)])\r\n    next_list = []\r\n    for i in range(0,len(prev_list)):\r\n        for j in range(0,len(str)):\r\n            new_str = prev_list[i][0:j]+str[0]+prev_list[i][j:len(str)-1]\r\n            if new_str not in next_list:\r\n                next_list.append(new_str)\r\n    return next_list"
    },
    {
        "number": 375,
        "prompt": "Write a function to round the given number to the nearest multiple of a specific number.\ndef round_num(n,m):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    return m * round(n/m)\n\n# Test cases\nprint(round_num(12,5)) # Should print 10\nprint(round_num(7,5)) # Should print 10\nprint(round_num(17,5)) # Should print 20\nprint(round_num(10,3)) # Should print 12\nprint(round_num(11,3)) # Should print 12\nprint(round_num(16,3)) # Should print 18\nprint(round_num(2,5)) # Should print 5\nprint(round_num(3,5)) # Should print 5\nprint(round_num(0,5)) # Should print 0\nprint(round_num(-10,5)) # Should print -10\nprint(round_num(-15,5)) # Should print -15\nprint(round_num(-23,5)) # Should print -20 ",
        "generated_testcode": "assert round_num(10,5) == 10\n",
        "test": "assert round_num(4722,10)==4720\nassert round_num(1111,5)==1110\nassert round_num(219,2)==218",
        "canonical_solution": "def round_num(n,m):\r\n    a = (n //m) * m\r\n    b = a + m\r\n    return (b if n - a > b - n else a)"
    },
    {
        "number": 376,
        "prompt": "Write a function to remove tuple elements that occur more than once and replace the duplicates with some custom value.\ndef remove_replica(test_tup):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    #Create an empty list to store unique elements\n    unique_list = []\n    #Create a dictionary to store the count of each element\n    count_dict = {}\n    #Iterate over the tuple\n    for i in test_tup:\n        #If the element is not in the dictionary, add it to the dictionary with count 1\n        if i not in count_dict:\n            count_dict[i] = 1\n        #If the element is already in the dictionary, increment its count\n        else:\n            count_dict[i] += 1\n    #Iterate over the dictionary and add the elements to the unique_list if their count is 1\n    for key, value in count_dict.items():\n        if value == 1:\n            unique_list.append(key)\n    #Return the tuple of unique elements\n    return tuple(unique_list)\n\n#Example usage\ntup = (1, 2, 2, 3, 4, 5, 6, 6, 6)\nprint(remove_replica(tup)) #Output: (1, 2, 3, 4, 5)\n",
        "generated_testcode": "assert remove_replica(('a', 'b', 'c', 'a', 'd', 'e', 'c') == ('a', 'b', 'c', 'd', 'e', 'replaced')\n",
        "test": "assert remove_replica((1, 1, 4, 4, 4, 5, 5, 6, 7, 7)) == (1, 'MSP', 4, 'MSP', 'MSP', 5, 'MSP', 6, 7, 'MSP')\nassert remove_replica((2, 3, 4, 4, 5, 6, 6, 7, 8, 9, 9)) == (2, 3, 4, 'MSP', 5, 6, 'MSP', 7, 8, 9, 'MSP')\nassert remove_replica((2, 2, 5, 4, 5, 7, 5, 6, 7, 7)) == (2, 'MSP', 5, 4, 'MSP', 7, 'MSP', 6, 'MSP', 'MSP')",
        "canonical_solution": "def remove_replica(test_tup):\r\n  temp = set()\r\n  res = tuple(ele if ele not in temp and not temp.add(ele) \r\n\t\t\t\telse 'MSP' for ele in test_tup)\r\n  return (res)"
    },
    {
        "number": 377,
        "prompt": "Write a python function to remove all occurrences of a character in a given string.\ndef remove_Char(s,c) :  \n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    return s.replace(c, \"\") \n  \n# Test the function  \ns = \"hello world\"\nc = \"l\"\nprint(remove_Char(s, c)) ",
        "generated_testcode": "assert remove_Char(\"hello world\", \"l\") == \"heo word\"\n",
        "test": "assert remove_Char(\"aba\",'a') == \"b\"\nassert remove_Char(\"toggle\",'g') == \"tole\"\nassert remove_Char(\"aabbc\",'b') == \"aac\"",
        "canonical_solution": "def remove_Char(s,c) :  \r\n    counts = s.count(c) \r\n    s = list(s) \r\n    while counts :  \r\n        s.remove(c) \r\n        counts -= 1 \r\n    s = '' . join(s)   \r\n    return (s) "
    },
    {
        "number": 378,
        "prompt": "Write a python function to shift last element to first position in the given list.\ndef move_first(test_list):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    last_element = test_list.pop()  # pop the last element from the list\n    test_list.insert(0, last_element)  # insert it at the beginning of the list\n    return test_list\n\n\n# Test the function with a sample list\ntest_list = [1, 2, 3, 4, 5]\nprint(move_first(test_list))\n\n# Output: [5, 1, 2, 3]\n\n# The function should return [5, 1, 2, 3] as the last element 5 is moved to the first position. ",
        "generated_testcode": "assert move_first([1, 2, 3, 4, 5]) == [5, 1, 2, 3]\n",
        "test": "assert move_first([1,2,3,4]) == [4,1,2,3]\nassert move_first([0,1,2,3]) == [3,0,1,2]\nassert move_first([9,8,7,1]) == [1,9,8,7]",
        "canonical_solution": "def move_first(test_list):\r\n  test_list = test_list[-1:] + test_list[:-1]  \r\n  return test_list"
    },
    {
        "number": 379,
        "prompt": "Write a function to find the surface area of a cuboid.\ndef surfacearea_cuboid(l,w,h):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    return 2*((2*l*w)+(2*w*h)+(2*h*l))\n\nprint(surfacearea_cuboid(2,3,4)) # 32\n\n# Write a function to find the volume of a cuboid.\ndef volume_cuboid(l,w,h):\n    return l*w*h\n\nprint(volume_cuboid(2,3,4)) # 24\n\n# Write a function to find the area of a sphere.\nimport math\ndef area_sphere(r):\n    return 4*math.pi*r*r\n\nprint(area_sphere(3)) # 113.04\n\n# Write a function to find the volume of a sphere.\nimport math\ndef volume_sphere(r):\n    return (4/3)*math.pi*r*r*r\n\nprint(volume_sphere(3)) # 113.04\n\n# Write a function to find the area of a cylinder.\nimport math\ndef area_cylinder(r,h):\n    return 2*math.pi*r*r*h\n\nprint(area_cylinder(3,4)) # 113.04\n\n# Write a function to find the volume of a cylinder.\nimport math\ndef volume_cylinder(r,h):\n    return math.pi*r*r*h\n\nprint(volume_cylinder(3,4)) # ",
        "generated_testcode": "assert surfacearea_cuboid(2,3,4) == 2*(2*3+2*4+3*4) + 2*2*3 + 2*3*4 + 2*4*4\n\n",
        "test": "assert surfacearea_cuboid(1,2,3)==22\nassert surfacearea_cuboid(5,7,9)==286\nassert surfacearea_cuboid(10,15,21)==1350",
        "canonical_solution": "def surfacearea_cuboid(l,w,h):\r\n  SA = 2*(l*w + l * h + w * h)\r\n  return SA"
    },
    {
        "number": 380,
        "prompt": "Write a function to generate a two-dimensional array.\ndef multi_list(rownum,colnum):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": true,
        "answer": "    matrix=[]\n    for i in range(rownum):\n        row=[]\n        for j in range(colnum):\n            row.append(0)\n        matrix.append(row)\n    return matrix\n\n#Test the function\nprint(multi_list(3,4))\n\n#This function returns a 3x4 array with all elements initialized to 0\n\n#Write a function to fill a two-dimensional array with random numbers\nimport random\n\ndef fill_random(matrix,rownum,colnum):\n    for i in range(rownum):\n        for j in range(colnum):\n            matrix[i][j]=random.randint(0,9)\n    return matrix\n\n#Test the function\nmatrix=multi_list(3,4)\nprint(fill_random(matrix,3,4))\n\n#This function fills a 3x4 array with random integers between 0 and 9\n\n#Write a function to print a two-dimensional array\ndef print_array(matrix,rownum,colnum):\n    for i in range(rownum):\n        for j in range(colnum):\n            print(matrix[i][j],end=\" \")\n        print()\n\n#Test the function\nmatrix=fill_random(matrix,3,4)\nprint_array(matrix,3,4)\n\n#This function prints the array row by row with each element separated by a space and a newline after each row is complete\n\n#Write a function to calculate the sum of all the elements in a two-dimensional",
        "generated_testcode": "assert multi_list(3,4) == [[0,0,0,0],[0,0,0,0],[0,0,0,0]]\n",
        "test": "assert multi_list(3,4)==[[0, 0, 0, 0], [0, 1, 2, 3], [0, 2, 4, 6]] \nassert multi_list(5,7)==[[0, 0, 0, 0, 0, 0, 0], [0, 1, 2, 3, 4, 5, 6], [0, 2, 4, 6, 8, 10, 12], [0, 3, 6, 9, 12, 15, 18], [0, 4, 8, 12, 16, 20, 24]]\nassert multi_list(10,15)==[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14], [0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28], [0, 3, 6, 9, 12, 15, 18, 21, 24, 27, 30, 33, 36, 39, 42], [0, 4, 8, 12, 16, 20, 24, 28, 32, 36, 40, 44, 48, 52, 56], [0, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70], [0, 6, 12, 18, 24, 30, 36, 42, 48, 54, 60, 66, 72, 78, 84], [0, 7, 14, 21, 28, 35, 42, 49, 56, 63, 70, 77, 84, 91, 98], [0, 8, 16, 24, 32, 40, 48, 56, 64, 72, 80, 88, 96, 104, 112], [0, 9, 18, 27, 36, 45, 54, 63, 72, 81, 90, 99, 108, 117, 126]]",
        "canonical_solution": "def multi_list(rownum,colnum):\r\n  multi_list = [[0 for col in range(colnum)] for row in range(rownum)]\r\n  for row in range(rownum):\r\n    for col in range(colnum):\r\n        multi_list[row][col]= row*col\r\n  return multi_list\r\n"
    },
    {
        "number": 381,
        "prompt": "Write a function to sort a list of lists by a given index of the inner list.\ndef index_on_inner_list(list_data, index_no):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    \"\"\"\n    Sorts a list of lists by the given index of the inner list.\n\n    Args:\n    list_data (list): List of lists.\n    index_no (int): Index to sort by.\n\n    Returns:\n    list: Sorted list of lists.\n    \"\"\"\n    return sorted(list_data, key=lambda x: x[index_no])\n\n# Example usage:\nlist_data = [\n    ['apple', 3, 2],\n    ['banana', 1, 4],\n    ['orange', 5, 2],\n    ['pear', 1, 3]\n]\n\nindex_on_inner_list(list_data, 1)  # Output: [['banana', 1, 4], ['pear', 1, 3], ['apple', 3, 2], ['orange', 5, 2]]\nindex_on_inner_list(list_data, 2)  # Output: [['pear', 1, 3], ['apple', 3, 2], ['banana', 1, 4], ['orange', 5, 2]]\nindex_on_inner_list(list_data, 0)  # Output: ['apple', 3, 2], ['banana', 1, 4], ['orange', 5, 2], ['pear', 1, 3] ",
        "generated_testcode": "assert index_on_inner_list(list_data, 1) == sorted(list_data, key=lambda x: x[1])\n\n# Test the function with the following list_data\nlist_data = [\n    ['apple', 3, 'red'],\n    ['banana', 2, 'yellow'],\n    ['orange', 1, 'orange'],\n    ['grape', 4, 'purple']\n]\n\n",
        "test": "assert index_on_inner_list([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,0)==[('Beau Turnbull', 94, 98), ('Brady Kent', 97, 96), ('Greyson Fulton', 98, 99), ('Wyatt Knott', 91, 94)]\nassert index_on_inner_list([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,1)==[('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98), ('Brady Kent', 97, 96), ('Greyson Fulton', 98, 99)]\nassert index_on_inner_list([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,2)==[('Wyatt Knott', 91, 94), ('Brady Kent', 97, 96), ('Beau Turnbull', 94, 98), ('Greyson Fulton', 98, 99)]",
        "canonical_solution": "from operator import itemgetter\r\ndef index_on_inner_list(list_data, index_no):\r\n    result = sorted(list_data, key=itemgetter(index_no))\r\n    return result"
    },
    {
        "number": 382,
        "prompt": "Write a function to find the number of rotations in a circularly sorted array.\ndef find_rotation_count(A):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    n = len(A)\n    start = 0\n    end = n - 1\n    mid = 0\n\n    while A[start] >= A[end]:\n        if start == end or start + 1 == end:\n            return end + 1\n        mid = (start + end) // 2\n        if A[mid] > A[end]:\n            start = mid\n        else:\n            end = mid\n    return mid + 1\n\n\n# Test the function with an example\nA = [4, 5, 6, 7, 8, 9, 10, 1, 2, 3]\nprint(\"Number of rotations: \", find_rotation_count(A))\n\n# Output: 4\n",
        "generated_testcode": "assert find_rotation_count([4, 5, 6, 7, 8, 9, 10, 1, 2, 3]) == 5\n",
        "test": "assert find_rotation_count([8, 9, 10, 1, 2, 3, 4, 5, 6, 7]) == 3\nassert find_rotation_count([8, 9, 10,2, 5, 6]) == 3\nassert find_rotation_count([2, 5, 6, 8, 9, 10]) == 0",
        "canonical_solution": "def find_rotation_count(A):\r\n    (left, right) = (0, len(A) - 1)\r\n    while left <= right:\r\n        if A[left] <= A[right]:\r\n            return left\r\n        mid = (left + right) // 2\r\n        next = (mid + 1) % len(A)\r\n        prev = (mid - 1 + len(A)) % len(A)\r\n        if A[mid] <= A[next] and A[mid] <= A[prev]:\r\n            return mid\r\n        elif A[mid] <= A[right]:\r\n            right = mid - 1\r\n        elif A[mid] >= A[left]:\r\n            left = mid + 1\r\n    return -1"
    },
    {
        "number": 383,
        "prompt": "Write a python function to toggle all odd bits of a given number.\ndef even_bit_toggle_number(n) : \n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    return (n & (n + 1)) \n  \n# Testing the function \nn = 25\nprint(even_bit_toggle_number(n)) ",
        "generated_testcode": "assert even_bit_toggle_number(10) == 5\n",
        "test": "assert even_bit_toggle_number(10) == 15\nassert even_bit_toggle_number(20) == 1\nassert even_bit_toggle_number(30) == 11",
        "canonical_solution": "def even_bit_toggle_number(n) : \r\n    res = 0; count = 0; temp = n    \r\n    while(temp > 0 ) : \r\n        if (count % 2 == 0) : \r\n            res = res | (1 << count)      \r\n        count = count + 1\r\n        temp >>= 1 \r\n    return n ^ res "
    },
    {
        "number": 384,
        "prompt": "Write a python function to find the frequency of the smallest value in a given array.\ndef frequency_Of_Smallest(n,arr): \n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    smallest_value = min(arr)\n    count = arr.count(smallest_value)\n    return count\n\n# Test the function with example\narr = [1,2,3,4,5,4,5,6,6,7,7,8,8,9,9,9]\nprint(frequency_Of_Smallest(len(arr), arr)) # Output: 1\n\narr = [1,2,3,4,4,5,5,6,7,7,8,8,9,9,9]\nprint(frequency_Of_Smallest(len(arr), arr)) # Output: 1 ",
        "generated_testcode": "assert frequency_Of_Smallest(5,[1,2,3,4,5,5]) == 1\n",
        "test": "assert frequency_Of_Smallest(5,[1,2,3,4,3]) == 1\nassert frequency_Of_Smallest(7,[3,1,2,5,6,2,3]) == 1\nassert frequency_Of_Smallest(7,[3,3,6,3,7,4,9]) == 3",
        "canonical_solution": "def frequency_Of_Smallest(n,arr): \r\n    mn = arr[0] \r\n    freq = 1\r\n    for i in range(1,n): \r\n        if (arr[i] < mn): \r\n            mn = arr[i] \r\n            freq = 1\r\n        elif (arr[i] == mn): \r\n            freq += 1\r\n    return freq "
    },
    {
        "number": 385,
        "prompt": "Write a function to find the n'th perrin number using recursion.\ndef get_perrin(n):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        return get_perrin(get_perrin(n - 1) + get_perrin(n - 2))\n\n\nn = int(input(\"Enter the value of n: \"))\nprint(\"The n'th perrin number is:\", get_perrin(n))\n\n# Output:\n# Enter the value of n: 7\n# The n'th perrin number is: 20\n\n# Time Complexity: O(2^n)\n# Space Complexity: O(n) ",
        "generated_testcode": "assert get_perrin(1) == 1\n",
        "test": "assert get_perrin(9) == 12\nassert get_perrin(4) == 2\nassert get_perrin(6) == 5",
        "canonical_solution": "def get_perrin(n):\r\n  if (n == 0):\r\n    return 3\r\n  if (n == 1):\r\n    return 0\r\n  if (n == 2):\r\n    return 2 \r\n  return get_perrin(n - 2) + get_perrin(n - 3)"
    },
    {
        "number": 386,
        "prompt": "Write a function to find out the minimum no of swaps required for bracket balancing in the given string.\ndef swap_count(s):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    stack = []\n    count = 0\n    for i in s:\n        if i == '(':\n            stack.append(i)\n        elif i == ')':\n            if not stack:\n                count += 1\n            else:\n                stack.pop()\n    return count + len(stack)\n\n\n# test the function\ns = \"(()()()\"\nprint(swap_count(s))  # output should be 1\ns = \"((()))\"\nprint(swap_count(s))  # output should be 0\ns = \"())(\"\nprint(swap_count(s))  # output should be 1\ns = \"())((\"\nprint(swap_count(s))  # output should be 2\ns = \"((()(()()(\"\nprint(swap_count(s))  # output should be 4\ns = \"())()(())\"\nprint(swap_count(s))  # output should be 2\ns = \"((((()())\"\nprint(swap_count(s))  # output should be 3\ns = \"())(()()(\"\nprint(swap_count(s))  # output should be 3\ns = \"(()((())\"\nprint(swap_count(s))  # output should be 3\ns = \"\"\nprint(swap_count(s))  # output should be 0\n\n# time complexity : O(n)\n# space complexity : O(n)\n",
        "generated_testcode": "assert swap_count(\"{[()]}\") == 0\n",
        "test": "assert swap_count(\"[]][][\") == 2\nassert swap_count(\"[[][]]\") == 0\nassert swap_count(\"[[][]]][\") == 1",
        "canonical_solution": "def swap_count(s):\r\n\tchars = s\r\n\tcount_left = 0\r\n\tcount_right = 0\r\n\tswap = 0\r\n\timbalance = 0; \r\n\tfor i in range(len(chars)):\r\n\t\tif chars[i] == '[':\r\n\t\t\tcount_left += 1\r\n\t\t\tif imbalance > 0:\r\n\t\t\t\tswap += imbalance\r\n\t\t\t\timbalance -= 1\r\n\t\telif chars[i] == ']':\r\n\t\t\tcount_right += 1\r\n\t\t\timbalance = (count_right - count_left) \r\n\treturn swap"
    },
    {
        "number": 387,
        "prompt": "Write a python function to check whether the hexadecimal number is even or odd.\ndef even_or_odd(N): \n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    return \"Even\" if int(N, 16) % 2 == 0 else \"Odd\"\n\n# Test the function with sample inputs\nprint(even_or_odd(\"A\")) # Output: Odd\nprint(even_or_odd(\"F\")) # Output: Even\nprint(even_or_odd(\"15\")) # Output: Odd\nprint(even_or_odd(\"10\")) # Output: Even\nprint(even_or_odd(\"2E\")) # Output: Even ",
        "generated_testcode": "assert even_or_odd(\"A\") == \"even\"\n",
        "test": "assert even_or_odd(\"AB3454D\") ==\"Odd\"\nassert even_or_odd(\"ABC\") == \"Even\"\nassert even_or_odd(\"AAD\") == \"Odd\"",
        "canonical_solution": "def even_or_odd(N): \r\n    l = len(N) \r\n    if (N[l-1] =='0'or N[l-1] =='2'or \r\n        N[l-1] =='4'or N[l-1] =='6'or \r\n        N[l-1] =='8'or N[l-1] =='A'or \r\n        N[l-1] =='C'or N[l-1] =='E'): \r\n        return (\"Even\") \r\n    else: \r\n        return (\"Odd\") "
    },
    {
        "number": 388,
        "prompt": "Write a python function to find the highest power of 2 that is less than or equal to n.\ndef highest_Power_of_2(n): \n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    power = 0\n    while (2**power) <= n: \n        power += 1\n    return 2**(power-1)\n\n# Test the function with some inputs \nprint(highest_Power_of_2(10)) # Output: 8 \nprint(highest_Power_of_2(12)) # Output: 8 \nprint(highest_Power_of_2(16)) # Output: 16 \nprint(highest_Power_of_2(17)) # Output: 16 \nprint(highest_Power_of_2(20)) # Output: 16 \nprint(highest_Power_of_2(32)) # Output: 32 \nprint(highest_Power_of_2(33)) # Output: 32 \nprint(highest_Power_of_2(64)) # Output: 64 \nprint(highest_Power_of_2(65)) # Output: 64 \n\n# Explanation: The function works by iterating through powers of 2 (2^1, 2^2, 2^3, 2^4, etc.) until it finds the highest power of 2 less than or equal to n. If n is a power of 2 itself, it returns n. If n is between powers of 2 (i.e. 11, 13, 17, etc.), it returns the previous power of 2. ",
        "generated_testcode": "assert highest_Power_of_2(10) == 8\n",
        "test": "assert highest_Power_of_2(10) == 8\nassert highest_Power_of_2(19) == 16\nassert highest_Power_of_2(32) == 32",
        "canonical_solution": "def highest_Power_of_2(n): \r\n    res = 0; \r\n    for i in range(n, 0, -1): \r\n        if ((i & (i - 1)) == 0): \r\n            res = i; \r\n            break; \r\n    return res; "
    },
    {
        "number": 389,
        "prompt": "Write a function to find the n'th lucas number.\ndef find_lucas(n): \n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": true,
        "answer": "    if n == 0: \n        return 2\n    elif n == 1: \n        return 1\n    else: \n        return find_lucas(n - 1) + find_lucas(n - 2)\n\n# Test the function\nn = 10\nprint(\"The\", n,\"th Lucas number is:\", find_lucas(n)) ",
        "generated_testcode": "assert find_lucas(0) == 2\n",
        "test": "assert find_lucas(9) == 76\nassert find_lucas(4) == 7\nassert find_lucas(3) == 4",
        "canonical_solution": "def find_lucas(n): \r\n\tif (n == 0): \r\n\t\treturn 2\r\n\tif (n == 1): \r\n\t\treturn 1\r\n\treturn find_lucas(n - 1) + find_lucas(n - 2) "
    },
    {
        "number": 390,
        "prompt": "Write a function to insert a given string at the beginning of all items in a list.\ndef add_string(list,string):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    return [string + item for item in list]\n\n# Example usage:\nmy_list = ['apple', 'banana', 'cherry']\nnew_list = add_string(my_list, 'fruit: ')\nprint(new_list) # Output: ['fruit: apple', 'fruit: banana', 'fruit: cherry'] ",
        "generated_testcode": "assert add_string(['apple','banana','orange'],'fruit: ') == ['fruit: apple', 'fruit: banana', 'fruit: orange']\n",
        "test": "assert add_string([1,2,3,4],'temp{0}')==['temp1', 'temp2', 'temp3', 'temp4']\nassert add_string(['a','b','c','d'], 'python{0}')==[ 'pythona', 'pythonb', 'pythonc', 'pythond']\nassert add_string([5,6,7,8],'string{0}')==['string5', 'string6', 'string7', 'string8']",
        "canonical_solution": "def add_string(list,string):\r\n add_string=[string.format(i) for i in  list]\r\n return add_string"
    },
    {
        "number": 391,
        "prompt": "Write a function to convert more than one list to nested dictionary.\ndef convert_list_dictionary(l1, l2, l3):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    result = {}\n    for i in range(len(l1)):\n        result[l1[i]] = {l2[i]: l3[i]}\n    return result\n\n\nl1 = [\"a\", \"b\", \"c\"]\nl2 = [1, 2, 3]\nl3 = [\"x\", \"y\", \"z\"]\nprint(convert_list_dictionary(l1, l2, l3))\n\nl1 = [\"A\", \"B\", \"C\"]\nl2 = [\"apple\", \"banana\", \"orange\"]\nl3 = [\"red\", \"yellow\", \"orange\"]\nprint(convert_list_dictionary(l1, l2, l3))\n\n# output:\n# {'a': 1, 'b': 2, 'c': 3}\n# {'A': {'apple': 'red', 'banana': 'yellow', 'orange': 'orange'}\n#  'B': {'apple': 'yellow', 'banana': 'orange', 'orange': 'red'}\n#  'C': {'apple': 'orange', 'banana': 'red', 'orange': 'yellow'}\n\n# Explanation:\n# First, we create an empty dictionary called result. Then, we iterate through the list l1 using a for loop and we add key-value pairs to the dictionary using the values of l1[i] as keys and a dictionary as values. The values of this dictionary are created by using a dictionary comprehension where the key is l2[i] and the value",
        "generated_testcode": "assert convert_list_dictionary([\"a\", \"b\", \"c\"], [1, 2, 3], [True, False, True]) == {\"a\": {\"1\": True, \"2\": False, \"3\": True}\n                                                                               \"b\": {\"1\": True, \"2\": False, \"3\": True}\n                                                                               \"c\": {\"1\": True, \"2\": False, \"3\": True}}\n\n# Test the function with the given input and expected output. ",
        "test": "assert convert_list_dictionary([\"S001\", \"S002\", \"S003\", \"S004\"],[\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"] ,[85, 98, 89, 92])==[{'S001': {'Adina Park': 85}}, {'S002': {'Leyton Marsh': 98}}, {'S003': {'Duncan Boyle': 89}}, {'S004': {'Saim Richards': 92}}]\nassert convert_list_dictionary([\"abc\",\"def\",\"ghi\",\"jkl\"],[\"python\",\"program\",\"language\",\"programs\"],[100,200,300,400])==[{'abc':{'python':100}},{'def':{'program':200}},{'ghi':{'language':300}},{'jkl':{'programs':400}}]\nassert convert_list_dictionary([\"A1\",\"A2\",\"A3\",\"A4\"],[\"java\",\"C\",\"C++\",\"DBMS\"],[10,20,30,40])==[{'A1':{'java':10}},{'A2':{'C':20}},{'A3':{'C++':30}},{'A4':{'DBMS':40}}]",
        "canonical_solution": "def convert_list_dictionary(l1, l2, l3):\r\n     result = [{x: {y: z}} for (x, y, z) in zip(l1, l2, l3)]\r\n     return result"
    },
    {
        "number": 392,
        "prompt": "Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\ndef get_max_sum (n):\n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    if n <= 1:\n        return n\n    else:\n        a = get_max_sum(n/2)\n        b = get_max_sum(n/3)\n        c = get_max_sum(n/4)\n        d = get_max_sum(n/5)\n        return max(n, a, b, c, d)\n\n# Test the function with some sample inputs\nprint(get_max_sum(10)) # should return 10\nprint(get_max_sum(15)) # should return 15\nprint(get_max_sum(16)) # should return 16\nprint(get_max_sum(20)) # should return 20\nprint(get_max_sum(100)) # should return 100\nprint(get_max_sum(150)) # should return 150\nprint(get_max_sum(25)) # should return 25\nprint(get_max_sum(1000)) # should return 100\n\n# This function has a time complexity of O(2^n) because it keeps calling itself until it reaches base case, but it is not efficient for large inputs. ",
        "generated_testcode": "assert get_max_sum(10) == 10\n",
        "test": "assert get_max_sum(60) == 106\nassert get_max_sum(10) == 12\nassert get_max_sum(2) == 2",
        "canonical_solution": "def get_max_sum (n):\r\n\tres = list()\r\n\tres.append(0)\r\n\tres.append(1)\r\n\ti = 2\r\n\twhile i<n + 1:\r\n\t\tres.append(max(i, (res[int(i / 2)] \r\n\t\t\t\t\t\t+ res[int(i / 3)] +\r\n\t\t\t\t\t\t\tres[int(i / 4)]\r\n\t\t\t\t\t\t+ res[int(i / 5)])))\r\n\t\ti = i + 1\r\n\treturn res[n]"
    },
    {
        "number": 393,
        "prompt": "Write a function to find the list with maximum length using lambda function.\ndef max_length_list(input_list):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    max_length = max(input_list, key=lambda x: len(x))\n    return max_length\n\n\ninput_list = [\"apple\", \"banana\", \"orange\", \"grape\", \"kiwi\", \"mango\", \"pear\"]\nprint(max_length_list(input_list))\n# Output: \"kiwi\"\n\ninput_list = [1, 2, [3, 4], [5, 6, 7], [8, 9, 10, 11], [12, 13, 14, 15, 16]]\nprint(max_length_list(input_list))\n# Output: [8, 9, 10, 11]\n\ninput_list = [{\"name\": \"John\", \"age\": 30}, {\"name\": \"Alice\", \"age\": 25}, {\"name\": \"Bob\", \"age\": 35}]\nprint(max_length_list(input_list))\n# Output: {\"name\": \"Alice\", \"age\": 25}\n\n# In this example, we have used lambda function to determine the length of each element in the list and return the element with the maximum length. ",
        "generated_testcode": "assert max_length_list([[1, 2, 3], [4, 5], [6, 7, 8, 9], [10]] == [6, 7, 8, 9]\n",
        "test": "assert max_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [13, 15, 17])\nassert max_length_list([[1,2,3,4,5],[1,2,3,4],[1,2,3],[1,2],[1]])==(5,[1,2,3,4,5])\nassert max_length_list([[3,4,5],[6,7,8,9],[10,11,12]])==(4,[6,7,8,9])",
        "canonical_solution": "def max_length_list(input_list):\r\n    max_length = max(len(x) for x in input_list )   \r\n    max_list = max(input_list, key = lambda i: len(i))    \r\n    return(max_length, max_list)"
    },
    {
        "number": 394,
        "prompt": "Write a function to check if given tuple is distinct or not.\ndef check_distinct(test_tup):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    #Create an empty set\n    s = set()\n    #Iterate through the tuple\n    for i in test_tup:\n        #If the element is already in the set, return False\n        if i in s:\n            return False\n        #If not, add it to the set\n        else:\n            s.add(i)\n    #If all elements are distinct, return True\n    return True\n\n#Test the function\ntest_tup = (1, 2, 3, 4, 5, 6)\nprint(check_distinct(test_tup)) #True\ntest_tup = (1, 2, 3, 3, 5, 6)\nprint(check_distinct(test_tup)) #False\n\n\n#This function uses a set to keep track of the elements seen in the tuple and returns False if a duplicate is found, otherwise returns True.\n#This is because sets cannot have duplicates, so if an element is already in the set, it means it has been seen before and the tuple is not distinct. ",
        "generated_testcode": "assert check_distinct((1, 2, 3, 4, 5, 6) == True)\n",
        "test": "assert check_distinct((1, 4, 5, 6, 1, 4)) == False\nassert check_distinct((1, 4, 5, 6)) == True\nassert check_distinct((2, 3, 4, 5, 6)) == True",
        "canonical_solution": "def check_distinct(test_tup):\r\n  res = True\r\n  temp = set()\r\n  for ele in test_tup:\r\n    if ele in temp:\r\n      res = False\r\n      break\r\n    temp.add(ele)\r\n  return (res) "
    },
    {
        "number": 395,
        "prompt": "Write a python function to find the first non-repeated character in a given string.\ndef first_non_repeating_character(str1):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    freq = {}\n    for char in str1:\n        if char in freq:\n            freq[char] += 1\n        else:\n            freq[char] = 1\n\n    for char in str1:\n        if freq[char] == 1:\n            return char\n    return None\n\n\n# Test the function with some sample inputs\nprint(first_non_repeating_character(\"abaccdeff\")) # Output: 'b'\nprint(first_non_repeating_character(\"aabbccdd\")) # Output: None\nprint(first_non_repeating_character(\"aaaaaa\")) # Output: None\nprint(first_non_repeating_character(\"aabbcddd\")) # Output: 'c' ",
        "generated_testcode": "assert first_non_repeating_character(\"abcdabcdfg\") == \"f\"\n",
        "test": "assert first_non_repeating_character(\"abcabc\") == None\nassert first_non_repeating_character(\"abc\") == \"a\"\nassert first_non_repeating_character(\"ababc\") == \"c\"",
        "canonical_solution": "def first_non_repeating_character(str1):\r\n  char_order = []\r\n  ctr = {}\r\n  for c in str1:\r\n    if c in ctr:\r\n      ctr[c] += 1\r\n    else:\r\n      ctr[c] = 1 \r\n      char_order.append(c)\r\n  for c in char_order:\r\n    if ctr[c] == 1:\r\n      return c\r\n  return None"
    },
    {
        "number": 396,
        "prompt": "Write a function to check whether the given string starts and ends with the same character or not using regex.\ndef check_char(string): \n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    pattern = '^(\\w).*\\1$'\n    if re.search(pattern, string):\n        return True\n    else:\n        return False\n\n# Example usage:\nprint(check_char('hellohello')) # Output: True\nprint(check_char('worlds')) # Output: False\nprint(check_char('Python')) # Output: True\nprint(check_char('abba')) # Output: True\nprint(check_char('abcd')) # Output: False ",
        "generated_testcode": "assert check_char(\"hello\") == False\n",
        "test": "assert check_char(\"abba\") == \"Valid\"\nassert check_char(\"a\") == \"Valid\"\nassert check_char(\"abcd\") == \"Invalid\"",
        "canonical_solution": "import re  \r\nregex = r'^[a-z]$|^([a-z]).*\\1$'\r\ndef check_char(string): \r\n\tif(re.search(regex, string)): \r\n\t\treturn \"Valid\" \r\n\telse: \r\n\t\treturn \"Invalid\" "
    },
    {
        "number": 397,
        "prompt": "Write a function to find the median of three specific numbers.\ndef median_numbers(a,b,c):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    numbers = [a,b,c]\n    numbers.sort()\n    return numbers[1]\n\n# Example usage:\nprint(median_numbers(2,5,3)) # Output: 3\nprint(median_numbers(10,1,5)) # Output: 5\nprint(median_numbers(5,5,5)) # Output: 5\n\n# Explanation:\n# The function takes three numbers as input and creates a list of those numbers. It then sorts the list in ascending order and returns the middle value as the median.\n# The median is the middle number in a list of three numbers, which can be determined by finding the second index (remembering that Python indexes start at 0). \n# If there are three even numbers, the median is the average of the middle two. ",
        "generated_testcode": "assert median_numbers(1,2,3) == 2\n",
        "test": "assert median_numbers(25,55,65)==55.0\nassert median_numbers(20,10,30)==20.0\nassert median_numbers(15,45,75)==45.0",
        "canonical_solution": "def median_numbers(a,b,c):\r\n if a > b:\r\n    if a < c:\r\n        median = a\r\n    elif b > c:\r\n        median = b\r\n    else:\r\n        median = c\r\n else:\r\n    if a > c:\r\n        median = a\r\n    elif b < c:\r\n        median = b\r\n    else:\r\n        median = c\r\n return median"
    },
    {
        "number": 398,
        "prompt": "Write a function to compute the sum of digits of each number of a given list.\ndef sum_of_digits(nums):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    result = []\n    for num in nums:\n        digit_sum = 0\n        for digit in str(num):\n            digit_sum += int(digit)\n        result.append(digit_sum)\n    return result\n\nprint(sum_of_digits([123, 456, 789])) # [6, 18, 27]\nprint(sum_of_digits([1234, 567, 890])) # [10, 21, 17]\nprint(sum_of_digits([12, 345, 6789])) # [3, 14, 27]\nprint(sum_of_digits([1, 23, 456, 7890]) # [1, 9, 14]) ",
        "generated_testcode": "assert sum_of_digits([12, 34, 56, 78, 90]) == [12, 15, 13, 17]\n",
        "test": "assert sum_of_digits([10,2,56])==14\nassert sum_of_digits([[10,20,4,5,'b',70,'a']])==19\nassert sum_of_digits([10,20,-4,5,-70])==19",
        "canonical_solution": "def sum_of_digits(nums):\r\n    return sum(int(el) for n in nums for el in str(n) if el.isdigit())"
    },
    {
        "number": 399,
        "prompt": "Write a function to perform the mathematical bitwise xor operation across the given tuples.\ndef bitwise_xor(test_tup1, test_tup2):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] ^ test_tup2[i],)\n    return result_tup\n\n# Testing the function\ntest_tup1 = (5, 6, 9, 3)\ntest_tup2 = (7, 2, 8, 5)\nprint(bitwise_xor(test_tup1, test_tup2))  # Output: (2, 4, 1, 6)\n\n# Time Complexity: O(n)\n# Space Complexity: O(n)\n# Here, we iterate through the tuples and perform the bitwise xor operation for each element and store it in a new tuple. ",
        "generated_testcode": "assert bitwise_xor((1, 2, 3), (4, 5, 6)) == (5, 7, 2)\n",
        "test": "assert bitwise_xor((10, 4, 6, 9), (5, 2, 3, 3)) == (15, 6, 5, 10)\nassert bitwise_xor((11, 5, 7, 10), (6, 3, 4, 4)) == (13, 6, 3, 14)\nassert bitwise_xor((12, 6, 8, 11), (7, 4, 5, 6)) == (11, 2, 13, 13)",
        "canonical_solution": "def bitwise_xor(test_tup1, test_tup2):\r\n  res = tuple(ele1 ^ ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\r\n  return (res) "
    },
    {
        "number": 400,
        "prompt": "Write a function to extract the frequency of unique tuples in the given list order irrespective.\ndef extract_freq(test_list):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    from collections import Counter\n    freq_dict = Counter(test_list)\n    unique_tuples = []\n    for key in freq_dict:\n        unique_tuples.append(key)\n    return unique_tuples\n\n# Test the function\ntest_list = [(1, 2, 3), (1, 2, 3), (2, 3, 4), (1, 2, 3), (2, 3, 4), (4, 5, 6), (4, 5, 6), (4, 5, 6)]\nprint(extract_freq(test_list))\n\n# Output: [(1, 2, 3), (2, 3, 4), (4, 5, 6)]\n\n# Explanation: (1, 2, 3) and (2, 3, 4) occur twice and (4, 5, 6) occurs thrice. The function returns a list with unique tuples. ",
        "generated_testcode": "assert extract_freq([\"apple\", \"banana\", \"apple\", \"orange\", \"banana\", \"apple\", \"orange\", \"banana\", \"kiwi\"]) == {\"apple\": 3, \"banana\": 3, \"orange\": 2, \"kiwi\": 1}\n",
        "test": "assert extract_freq([(3, 4), (1, 2), (4, 3), (5, 6)] ) == 3\nassert extract_freq([(4, 15), (2, 3), (5, 4), (6, 7)] ) == 4\nassert extract_freq([(5, 16), (2, 3), (6, 5), (6, 9)] ) == 4",
        "canonical_solution": "def extract_freq(test_list):\r\n  res = len(list(set(tuple(sorted(sub)) for sub in test_list)))\r\n  return (res)"
    },
    {
        "number": 401,
        "prompt": "Write a function to perform index wise addition of tuple elements in the given two nested tuples.\ndef add_nested_tuples(test_tup1, test_tup2):\n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    result = ()\n    for i in range(len(test_tup1)):\n        result += (tuple(map(lambda x, y: x + y, test_tup1[i], test_tup2[i])) ,)\n    return result\n\n# Example usage:\ntest_tup1 = ((1, 2, 3), (4, 5, 6), (7, 8, 9))\ntest_tup2 = ((10, 20, 30), (40, 50, 60), (70, 80, 90))\nprint(add_nested_tuples(test_tup1, test_tup2)) # Output: ((11, 22, 33), (44, 55, 66), (77, 88, 99))\n\n# Explanation:\n# The function iterates over the two tuples element-wise using range(len(test_tup1)) and performs element-wise addition using map() function and lambda function.\n# The resulting tuple is added to the result tuple using the += operator. ",
        "generated_testcode": "assert add_nested_tuples(((1,2,3), (4,5,6), (7,8,9)), ((10,20,30), (40,50,60), (70,80,90)) ) == ((11,22,33), (44,55,66), (77,88,99))\n",
        "test": "assert add_nested_tuples(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((7, 10), (7, 14), (3, 10), (8, 13))\nassert add_nested_tuples(((2, 4), (5, 6), (3, 10), (2, 11)), ((7, 8), (4, 10), (2, 2), (8, 4))) == ((9, 12), (9, 16), (5, 12), (10, 15))\nassert add_nested_tuples(((3, 5), (6, 7), (4, 11), (3, 12)), ((8, 9), (5, 11), (3, 3), (9, 5))) == ((11, 14), (11, 18), (7, 14), (12, 17))",
        "canonical_solution": "def add_nested_tuples(test_tup1, test_tup2):\r\n  res = tuple(tuple(a + b for a, b in zip(tup1, tup2))\r\n   for tup1, tup2 in zip(test_tup1, test_tup2))\r\n  return (res) "
    },
    {
        "number": 402,
        "prompt": "Write a function to compute the value of ncr%p.\ndef ncr_modp(n, r, p): \n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    C = 10**9 + 9\n    if r > n:\n        return 0\n    if r == 0 or r == n:\n        return 1\n    if r == 1:\n        return n\n    \n    # Calculate nCr using the formula nCr = (n-1)C(r-1) + (n-1)C(r)\n    nCr = [0] * (n+1)\n    nCr[0] = 1\n    for i in range(1, n+1):\n        nCr[i] = 1\n        for j in range(1, i+1):\n            nCr[i] = (nCr[i] + nCr[i-j]) % C\n    return nCr[r] * inverse_modulo(factorial_modulo(n, C) * inverse_modulo(factorial_modulo(n-r, C) % C, C) % C) % C\n    \ndef factorial_modulo(n, p):\n    C = 10**9 + 9\n    fact = 1\n    for i in range(1, n+1):\n        fact = (fact * i) % C\n    return fact\n\ndef inverse_modulo(n, p):\n    return pow(n, p-2, p)\n\nn, r, p = map(int, input().split())\nprint(ncr_modp(n, r, p)) ",
        "generated_testcode": "assert ncr_modp(10, 5, 7) == 2\n",
        "test": "assert ncr_modp(10,2,13)==6\nassert ncr_modp(15,12,43)==25\nassert ncr_modp(17,9,18)==10",
        "canonical_solution": "def ncr_modp(n, r, p): \r\n    C = [0 for i in range(r+1)]   \r\n    C[0] = 1\r\n    for i in range(1, n+1): \r\n        for j in range(min(i, r), 0, -1): \r\n            C[j] = (C[j] + C[j-1]) % p   \r\n    return C[r] "
    },
    {
        "number": 403,
        "prompt": "Write a function to check if a url is valid or not using regex.\ndef is_valid_URL(str):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    pattern = re.compile(\n        r'^(?:http|ftp)s?://'  # http:// or https:// or ftp://\n        r'(?:(?:[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?\\.)+(?:[a-zA-Z]{2,6}\\.?|[a-zA-Z0-9-]{2,}\\.?)|'  # domain name\n        r'localhost|'  # localhost\n        r'\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3})'  # ip address\n        r'(?::\\d{1,5})?'  # port\n        r'(?:[/?#]\\S*)?$'  # resource path\n        )\n    return pattern.match(str)\n\n# Example usage:\nprint(is_valid_URL('https://www.example.com'))  # True\nprint(is_valid_URL('http://www.example.com'))  # True\nprint(is_valid_URL('https://www.google.com/search?q=python+regex'))  # True\nprint(is_valid_URL('www.example.com'))  # False\nprint(is_valid_URL('example.com'))  # False\nprint(is_valid_URL('https://192.168.0.1'))  # True\nprint(is_valid",
        "generated_testcode": "assert is_valid_URL(\"https://www.google.com\") == True\n",
        "test": "assert is_valid_URL(\"https://www.google.com\") == True\nassert is_valid_URL(\"https:/www.gmail.com\") == False\nassert is_valid_URL(\"https:// www.redit.com\") == False",
        "canonical_solution": "import re\r\ndef is_valid_URL(str):\r\n\tregex = (\"((http|https)://)(www.)?\" +\r\n\t\t\t\"[a-zA-Z0-9@:%._\\\\+~#?&//=]\" +\r\n\t\t\t\"{2,256}\\\\.[a-z]\" +\r\n\t\t\t\"{2,6}\\\\b([-a-zA-Z0-9@:%\" +\r\n\t\t\t\"._\\\\+~#?&//=]*)\")\r\n\tp = re.compile(regex)\r\n\tif (str == None):\r\n\t\treturn False\r\n\tif(re.search(p, str)):\r\n\t\treturn True\r\n\telse:\r\n\t\treturn False"
    },
    {
        "number": 404,
        "prompt": "Write a python function to find the minimum of two numbers.\ndef minimum(a,b):   \n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    if a<b:\n        return a\n    else:\n        return b\nprint(minimum(10,20)) # should print 10\nprint(minimum(30,20)) # should print 20\n\n# Now let's write a function to find the maximum of two numbers\ndef maximum(a,b):   \n    if a>b:\n        return a\n    else:\n        return b\nprint(maximum(10,20)) # should print 20\nprint(maximum(30,20)) # should print 30\n\n# Now let's write a function to find the average of two numbers\ndef average(a,b):   \n    return (a+b)/2\nprint(average(10,20)) # should print 15\nprint(average(30,20)) # should print 25\n\n# Now let's write a function to check if a number is even or odd\ndef even_or_odd(num):\n    if num%2 == 0:\n        return \"Even\"\n    else:\n        return \"Odd\"\nprint(even_or_odd(10)) # should print Even\nprint(even_or_odd(15)) # should print Odd\n\n# Now let's write a function to find the factorial of a number\ndef factorial(num):\n    fact = 1\n    for i in range(1,num+1):\n        fact = fact*i\n    return",
        "generated_testcode": "assert minimum(10, 5) == 5\n",
        "test": "assert minimum(1,2) == 1\nassert minimum(-5,-4) == -5\nassert minimum(0,0) == 0",
        "canonical_solution": "def minimum(a,b):   \r\n    if a <= b: \r\n        return a \r\n    else: \r\n        return b "
    },
    {
        "number": 405,
        "prompt": "Write a function to check whether an element exists within a tuple.\ndef check_tuplex(tuplex,tuple1): \n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    if tuple1 in tuplex: \n        return True \n    else: \n        return False \n\n# Test the function with a tuple \ntuplex = (1, 2, 3, 4, 5, 6) \ntuple1 = 2 \nif check_tuplex(tuplex, tuple1): \n    print(\"Element exists\") \nelse: \n    print(\"Element does not exist\") ",
        "generated_testcode": "assert check_tuplex((1,2,3,4,5,6,7,8,9), 5) == True\n",
        "test": "assert check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),'r')==True\nassert check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),'5')==False\nassert check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\",\"e\"),3)==True",
        "canonical_solution": "def check_tuplex(tuplex,tuple1): \r\n  if tuple1 in tuplex:\r\n    return True\r\n  else:\r\n     return False"
    },
    {
        "number": 406,
        "prompt": "Write a python function to find the parity of a given number.\ndef find_Parity(x): \n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    if x % 2 == 0: \n        return 'Even'\n    else: \n        return 'Odd' \n  \n# Test the function with an example number \nn = 7\nprint(find_Parity(n)) # Output: Odd \nn = 8\nprint(find_Parity(n)) # Output: Even\n\n# Using a class to create a Bank Account \nclass BankAccount: \n    def __init__(self, owner, balance):\n        self.owner = owner\n        self.balance = balance\n\n    def deposit(self, amount):\n        self.balance += amount\n        return self.balance\n\n    def withdraw(self, amount):\n        if self.balance >= amount:\n            self.balance -= amount\n            return self.balance\n        else:\n            return 'Insufficient funds'\n\n    def check_balance(self):\n        return self.balance\n\n# Create an object of BankAccount class \na = BankAccount('John', 10000)\nprint(a.owner) # Output: John\nprint(a.deposit(500)) # Output: 1500\nprint(a.withdraw(200)) # Output: 1300\nprint(a.check_balance()) # Output: 1300\n\n# Using a class to represent a student\nclass Student: \n    def __init__(self, name, roll_no, marks):\n        self",
        "generated_testcode": "assert find_Parity(1) == \"Even\"\n",
        "test": "assert find_Parity(12) == \"Even Parity\"\nassert find_Parity(7) == \"Odd Parity\"\nassert find_Parity(10) == \"Even Parity\"",
        "canonical_solution": "def find_Parity(x): \r\n    y = x ^ (x >> 1); \r\n    y = y ^ (y >> 2); \r\n    y = y ^ (y >> 4); \r\n    y = y ^ (y >> 8); \r\n    y = y ^ (y >> 16); \r\n    if (y & 1): \r\n        return (\"Odd Parity\"); \r\n    return (\"Even Parity\"); "
    },
    {
        "number": 407,
        "prompt": "Write a function to create the next bigger number by rearranging the digits of a given number.\ndef rearrange_bigger(n):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    digits = list(str(n))\n    digits.sort(reverse=True)\n    while digits[0] == '0':\n        digits.pop(0)\n    n = int(''.join(digits) + ''.join(sorted(digits[:-1]))\n    return n\n\n# Test the function\nprint(rearrange_bigger(123456789))  # should print 987654321\nprint(rearrange_bigger(1230564))   # should print 654321\nprint(rearrange_bigger(123456))    # should print 654321\nprint(rearrange_bigger(1234))     # should print 4321\nprint(rearrange_bigger(120))      # should print 21\nprint(rearrange_bigger(12))      # should print 21\nprint(rearrange_bigger(100))     # should print 1\nprint(rearrange_bigger(123455))   # should print 554321\nprint(rearrange_bigger(123445))   # should print 54321\nprint(rearrange_bigger(10))      # should print 1\nprint(rearrange_bigger(21))      # should print 21\nprint(rearrange_",
        "generated_testcode": "assert (rearrange_bigger(1234) == 4321)\n",
        "test": "assert rearrange_bigger(12)==21\nassert rearrange_bigger(10)==False\nassert rearrange_bigger(102)==120",
        "canonical_solution": "def rearrange_bigger(n):\r\n    nums = list(str(n))\r\n    for i in range(len(nums)-2,-1,-1):\r\n        if nums[i] < nums[i+1]:\r\n            z = nums[i:]\r\n            y = min(filter(lambda x: x > z[0], z))\r\n            z.remove(y)\r\n            z.sort()\r\n            nums[i:] = [y] + z\r\n            return int(\"\".join(nums))\r\n    return False"
    },
    {
        "number": 408,
        "prompt": "Write a function to find k number of pairs which consist of one element from the first array and one element from the second array.\ndef k_smallest_pairs(nums1, nums2, k):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    nums1.sort()\n    nums2.sort()\n    res = []\n    i = 0\n    j = 0\n    while k > 0:\n        if nums1[i] + nums2[j] < 0:\n            i += 1\n        elif nums1[i] + nums2[j] > 0:\n            j += 1\n        else:\n            res.append((nums1[i], nums2[j]));\n            k -= 1\n            i += 1\n            j += 1\n    return res\n\n# Test the function\nnums1 = [1, 7, 11]\nnums2 = [2, 4, 6]\nk = 3\nprint(k_smallest_pairs(nums1, nums2, k))\n# Output: [(1, 2), (1, 4), (7, 2)]\n\nnums1 = [1, 1, 2, 2, 3]\nnums2 = [1, 2, 3]\nk = 5\nprint(k_smallest_pairs(nums1, nums2, k))\n# Output: [(1, 1), (1, 1), (1, 2), (1, 2), (2, 2)]\n\nnums1 = [1, 2]\nnums2 = [3]\nk = 1\nprint(k_smallest_pairs",
        "generated_testcode": "assert k_smallest_pairs([1, 7, 11], [2, 4, 6, 8, 10], 3) == [(1, 2), (1, 4), (1, 6)]\n",
        "test": "assert k_smallest_pairs([1,3,7],[2,4,6],2)==[[1, 2], [1, 4]]\nassert k_smallest_pairs([1,3,7],[2,4,6],1)==[[1, 2]]\nassert k_smallest_pairs([1,3,7],[2,4,6],7)==[[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]",
        "canonical_solution": "import heapq\r\ndef k_smallest_pairs(nums1, nums2, k):\r\n   queue = []\r\n   def push(i, j):\r\n       if i < len(nums1) and j < len(nums2):\r\n           heapq.heappush(queue, [nums1[i] + nums2[j], i, j])\r\n   push(0, 0)\r\n   pairs = []\r\n   while queue and len(pairs) < k:\r\n       _, i, j = heapq.heappop(queue)\r\n       pairs.append([nums1[i], nums2[j]])\r\n       push(i, j + 1)\r\n       if j == 0:\r\n           push(i + 1, 0)\r\n   return pairs"
    },
    {
        "number": 409,
        "prompt": "Write a function to find the minimum product from the pairs of tuples within a given list.\ndef min_product_tuple(list1):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    min_product = float('inf')\n    min_pairs = []\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = list1[i][0] * list1[j][1]\n            if product < min_product:\n                min_product = product\n                min_pairs = [(list1[i][1], list1[j][1])]\n            elif product == min_product:\n                min_pairs.append((list1[i][1], list1[j][1]))\n    return min_product, min_pairs\n\n# Test the function\nprint(min_product_tuple([(1, 'A'), (2, 'B'), (3, 'C'), (4, 'D'), (5, 'E')]))  # Output: (2, [('A', 'C'), ('B', 'D')])\nprint(min_product_tuple([(1, 'A'), (2, 'B'), (3, 'C'), (4, 'D'), (5, 'E'), (6, 'F')]))  # Output: (6, [('A', 'C'), ('B', 'D'), ('A', 'F'), ('B', 'E'), ('C', 'F')])\nprint(min_product_tuple([(1, 'A'), (1, 'B'), (1, 'C'), (1, 'D')]))  # Output: (1, [('A', 'B'), ('A', '",
        "generated_testcode": "assert min_product_tuple([(1, 2), (3, 4), (5, 6)]) == 12\n",
        "test": "assert min_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==8\nassert min_product_tuple([(10,20), (15,2), (5,10)] )==30\nassert min_product_tuple([(11,44), (10,15), (20,5), (12, 9)] )==100",
        "canonical_solution": "def min_product_tuple(list1):\r\n    result_min = min([abs(x * y) for x, y in list1] )\r\n    return result_min"
    },
    {
        "number": 410,
        "prompt": "Write a function to find the minimum value in a given heterogeneous list.\ndef min_val(listval):\n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    if len(listval) == 0:\n        return None\n    min_val = listval[0]\n    for val in listval:\n        if type(val) is not str:\n            if val < min_val:\n                min_val = val\n    return min_val\n\n# Test the function\nprint(min_val([1, 2, 3, 4, 5, 6, 7, 8, 9, \"hello\", 0]))  # output: 0\nprint(min_val([1, 2, 3, 4, 5, 6, 7, 8, \"hello\", 9]))   # output: None\nprint(min_val([]))                                 # output: None\nprint(min_val([1, \"hello\", 3, 4, 5, 6, 7, 8, 9]))   # output: None\nprint(min_val([1]))                              # output: 1 ",
        "generated_testcode": "assert min_val([1, 2, 3, 4, 5, 6, 7]) == 1\n",
        "test": "assert min_val(['Python', 3, 2, 4, 5, 'version'])==2\nassert min_val(['Python', 15, 20, 25])==15\nassert min_val(['Python', 30, 20, 40, 50, 'version'])==20",
        "canonical_solution": "def min_val(listval):\r\n     min_val = min(i for i in listval if isinstance(i, int))\r\n     return min_val"
    },
    {
        "number": 411,
        "prompt": "Write a function to convert the given snake case string to camel case string by using regex.\ndef snake_to_camel(word):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    return re.sub(r\"(_+)(\\w)\", lambda match: match.group(2).upper(), word)\n\n# Test the function\nprint(snake_to_camel(\"hello_world\"))  # Output: \"helloWorld\"\nprint(snake_to_camel(\"hey_there_world\"))  # Output: \"heyThereWorld\"\nprint(snake_to_camel(\"this_is_a_test\"))  # Output: \"thisIsATest\"\n```\n\nIn this function, we use the `re.sub()` method from the `re` module to replace all occurrences of `_` followed by a word character (`\\w`) with the same word character in uppercase. The `lambda` function in the `re.sub()` method captures the first group of `_` and the second group of word character and returns only the second group in uppercase.\n\nThis function will work for any snake case string with one or more `_` separating words. ",
        "generated_testcode": "assert snake_to_camel(\"hello_world\") == \"helloWorld\"\n",
        "test": "assert snake_to_camel('android_tv') == 'AndroidTv'\nassert snake_to_camel('google_pixel') == 'GooglePixel'\nassert snake_to_camel('apple_watch') == 'AppleWatch'",
        "canonical_solution": "import re\r\ndef snake_to_camel(word):\r\n  return ''.join(x.capitalize() or '_' for x in word.split('_'))"
    },
    {
        "number": 412,
        "prompt": "Write a python function to remove odd numbers from a given list.\ndef remove_odd(l):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    return [num for num in l if num % 2 == 0]\n\n# Example usage:\nlst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nprint(remove_odd(lst))  # Output: [2, 4, 6, 8, 10]\n\n# To remove even numbers, you can change the condition to num % 2 == 1\ndef remove_even(l):\n    return [num for num in l if num % 2 == 1]\n\n# Example usage:\nlst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nprint(remove_even(lst))  # Output: [1, 3, 5, 7] ",
        "generated_testcode": "assert remove_odd([1, 2, 3, 4, 5, 6, 7, 8, 9]) == [2, 4, 6, 8]\n",
        "test": "assert remove_odd([1,2,3]) == [2]\nassert remove_odd([2,4,6]) == [2,4,6]\nassert remove_odd([10,20,3]) == [10,20]",
        "canonical_solution": "def remove_odd(l):\r\n    for i in l:\r\n        if i % 2 != 0:\r\n            l.remove(i)\r\n    return l"
    },
    {
        "number": 413,
        "prompt": "Write a function to extract the nth element from a given list of tuples.\ndef extract_nth_element(list1, n):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": true,
        "answer": "    return [t[n] for t in list1]\n\n# Example usage:\nlist1 = [(1, 2, 3), (4, 5, 6), (7, 8, 9)]\nprint(extract_nth_element(list1, 1))  # Output: [2, 5, 8]\nprint(extract_nth_element(list1, 2))  # Output: [3, 6, 9]\n\n# Explanation:\n# The function takes a list of tuples and an index n as input and returns a list of the nth element of each tuple in the original list. ",
        "generated_testcode": "assert extract_nth_element([(1, 2, 3), (4, 5, 6), (7, 8, 9)], 1) == [2, 5, 8]\n",
        "test": "assert extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,0)==['Greyson Fulton', 'Brady Kent', 'Wyatt Knott', 'Beau Turnbull']\nassert extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,2)==[99, 96, 94, 98]\nassert extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)],1)==[98, 97, 91, 94]",
        "canonical_solution": "def extract_nth_element(list1, n):\r\n    result = [x[n] for x in list1]\r\n    return result"
    },
    {
        "number": 414,
        "prompt": "Write a python function to check whether the value exists in a sequence or not.\ndef overlapping(list1,list2):  \n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    for i in range(len(list1)):  \n        for j in range(len(list2)):  \n            if list1[i] == list2[j]:  \n                return True  \n    return False  \n  \n# test the function  \nlist1 = [1, 2, 3, 4, 5, 6]  \nlist2 = [4, 5, 6, 7, 8]  \nlist3 = [10, 11, 12, 13]  \n  \nif overlapping(list1, list2):  \n    print(\"Overlap found\")  \nelse:  \n    print(\"No overlap found\")  \n  \nif overlapping(list1, list3):  \n    print(\"Overlap found\")  \nelse:  \n    print(\"No overlap found\") ",
        "generated_testcode": "assert overlapping([1,2,3,4,5],[2,3,4,6]) == True\n",
        "test": "assert overlapping([1,2,3,4,5],[6,7,8,9]) == False\nassert overlapping([1,2,3],[4,5,6]) == False\nassert overlapping([1,4,5],[1,4,5]) == True",
        "canonical_solution": "def overlapping(list1,list2):  \r\n    c=0\r\n    d=0\r\n    for i in list1: \r\n        c+=1\r\n    for i in list2: \r\n        d+=1\r\n    for i in range(0,c): \r\n        for j in range(0,d): \r\n            if(list1[i]==list2[j]): \r\n                return 1\r\n    return 0"
    },
    {
        "number": 415,
        "prompt": "Write a python function to find a pair with highest product from a given array of integers.\ndef max_Product(arr): \n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    arr.sort()\n    n = len(arr)\n    if n==2:\n        return arr[0]*arr[1]\n    elif arr[n-1]<0:\n        return max(arr[0]*arr[1],arr[n-1]*arr[n-2])\n    else:\n        return arr[-1]*arr[-2]\n\n# Example usage:\narr = [1, 10, 3, -5, 8, 2]\nprint(max_Product(arr)) # Output: 80\n\n# Time complexity: O(nlogn) for sorting the array, O(1) for finding the maximum product. ",
        "generated_testcode": "assert max_Product([1, 2, 3, 4, 5, 6]) == 30\n",
        "test": "assert max_Product([1,2,3,4,7,0,8,4]) == (7,8)\nassert max_Product([0,-1,-2,-4,5,0,-6]) == (-4,-6)\nassert max_Product([1,2,3]) == (2,3)",
        "canonical_solution": "def max_Product(arr): \r\n    arr_len = len(arr) \r\n    if (arr_len < 2): \r\n        return (\"No pairs exists\")           \r\n    x = arr[0]; y = arr[1]      \r\n    for i in range(0,arr_len): \r\n        for j in range(i + 1,arr_len): \r\n            if (arr[i] * arr[j] > x * y): \r\n                x = arr[i]; y = arr[j] \r\n    return x,y    "
    },
    {
        "number": 416,
        "prompt": "Write a function to find the maximum sum we can make by dividing number in three parts recursively and summing them up together for the given number.\ndef breakSum(n): \n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": true,
        "answer": "    if n == 0: \n        return 0\n    elif n <= 2: \n        return n \n    else: \n        return max(n, breakSum(n//2) + breakSum(n//3) + breakSum(n//4)) \n\n# Driver code \nn = 10\nprint(breakSum(n)) ",
        "generated_testcode": "assert breakSum(10) == 10\n",
        "test": "assert breakSum(12) == 13\nassert breakSum(24) == 27\nassert breakSum(23) == 23",
        "canonical_solution": "MAX = 1000000\r\ndef breakSum(n): \r\n\tdp = [0]*(n+1) \r\n\tdp[0] = 0\r\n\tdp[1] = 1\r\n\tfor i in range(2, n+1): \r\n\t\tdp[i] = max(dp[int(i/2)] + dp[int(i/3)] + dp[int(i/4)], i); \r\n\treturn dp[n]"
    },
    {
        "number": 417,
        "prompt": "Write a function to find common first element in given list of tuple.\ndef group_tuples(Input): \n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": true,
        "answer": "    first_element = None\n    for tuple_ in Input: \n        if first_element is None: \n            first_element = tuple_[0] \n        elif first_element == tuple_[0]: \n            continue \n        else: \n            return None\n    return first_element\n\n# Test the function with sample input\nInput = [(1, 2, 3), (1, 4, 5), (1, 6, 7), (1, 8, 9)] \nprint(group_tuples(Input)) ",
        "generated_testcode": "assert group_tuples([(1, 2, 3), (1, 4, 5), (1, 6, 7)]) == 1\n",
        "test": "assert group_tuples([('x', 'y'), ('x', 'z'), ('w', 't')]) == [('x', 'y', 'z'), ('w', 't')]\nassert group_tuples([('a', 'b'), ('a', 'c'), ('d', 'e')]) == [('a', 'b', 'c'), ('d', 'e')]\nassert group_tuples([('f', 'g'), ('f', 'g'), ('h', 'i')]) == [('f', 'g', 'g'), ('h', 'i')]",
        "canonical_solution": "def group_tuples(Input): \r\n\tout = {} \r\n\tfor elem in Input: \r\n\t\ttry: \r\n\t\t\tout[elem[0]].extend(elem[1:]) \r\n\t\texcept KeyError: \r\n\t\t\tout[elem[0]] = list(elem) \r\n\treturn [tuple(values) for values in out.values()] "
    },
    {
        "number": 418,
        "prompt": "Write a python function to find the sublist having maximum length.\ndef Find_Max(lst): \n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    max_len = 1\n    start = 0\n    end = 0\n    n = len(lst)\n    for i in range(n): \n        count = 1\n        j = i + 1\n        while j < n and lst[j] >= lst[i]: \n            count += 1\n            j += 1\n        while j < n and lst[j] == lst[i]: \n            j += 1\n        if count > max_len: \n            max_len = count\n            start = i\n            end = j - 1\n        i = j \n    return lst[start:end+1] \n  \n# example usage \nlst = [1, 2, 2, 3, 3, 4, 5, 1, 2, 2, 3, 1, 2, 3, 4, 5, 6, 6, 7, 8, 9, 9, 9] \nprint(\"The maximum length sublist is\", Find_Max(lst)) ",
        "generated_testcode": "assert Find_Max([1, 2, 3, 4, 5, 6, 7, 8, 9]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]\n",
        "test": "assert Find_Max([['A'],['A','B'],['A','B','C']]) == ['A','B','C']\nassert Find_Max([[1],[1,2],[1,2,3]]) == [1,2,3]\nassert Find_Max([[1,1],[1,2,3],[1,5,6,1]]) == [1,5,6,1]",
        "canonical_solution": "def Find_Max(lst): \r\n    maxList = max((x) for x in lst) \r\n    return maxList"
    },
    {
        "number": 419,
        "prompt": "Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\ndef round_and_sum(list1):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    rounded_list = []\n    for num in list1:\n        rounded_list.append(round(num))\n    return sum(rounded_list) * len(rounded_list)\n\n# Test the function with a sample list\nprint(round_and_sum([1.5, 2.3, 4.6, 5.7, 7.1, 8.9]))\n\n# Output: 25\n# Explanation: The rounded list is [2, 2, 5, 6, 8] and the sum is 2 + 2 + 5 + 6 + 8 = 19, and the length of the list is 4. Therefore, the total is 19 * 4 = 76. \n\n# Write a function to calculate the square of the sum of a list of numbers\ndef square_sum(list1):\n    return sum(list1) ** 2\n\n# Test the function with a sample list\nprint(square_sum([1, 2, 3, 4, 5]))\n\n# Output: 50\n# Explanation: The sum of the list is 1 + 2 + 3 + 4 + 5 = 15 and the square of 15 is 15 * 15 = 225. \n\n# Write a function to calculate the sum of the absolute differences between the largest and smallest numbers in a list\ndef sum_abs_diff(list1):\n    min_num = min(list1)\n",
        "generated_testcode": "assert round_and_sum([1.5, 2.3, 3.6, 4.5, 5.7]) == 22\n",
        "test": "assert round_and_sum([22.4, 4.0, -16.22, -9.10, 11.00, -12.22, 14.20, -5.20, 17.50])==243\nassert round_and_sum([5,2,9,24.3,29])==345\nassert round_and_sum([25.0,56.7,89.2])==513",
        "canonical_solution": "def round_and_sum(list1):\r\n  lenght=len(list1)\r\n  round_and_sum=sum(list(map(round,list1))* lenght)\r\n  return round_and_sum"
    },
    {
        "number": 420,
        "prompt": "Write a python function to find the cube sum of first n even natural numbers.\ndef cube_Sum(n): \n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": true,
        "answer": "    sum = 0\n    for i in range(1, n+1): \n        sum += i**3\n    return sum \n\n# Test the function with n = 5\nprint(cube_Sum(5)) ",
        "generated_testcode": "assert cube_Sum(5) == 225\n",
        "test": "assert cube_Sum(2) == 72\nassert cube_Sum(3) == 288\nassert cube_Sum(4) == 800",
        "canonical_solution": "def cube_Sum(n): \r\n    sum = 0\r\n    for i in range(1,n + 1): \r\n        sum += (2*i)*(2*i)*(2*i) \r\n    return sum"
    },
    {
        "number": 421,
        "prompt": "Write a function to concatenate each element of tuple by the delimiter.\ndef concatenate_tuple(test_tup):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    return delimiter.join(test_tup)\n\n# Test the function with a tuple\ntest_tup = (\"apple\", \"banana\", \"cherry\")\nprint(concatenate_tuple(test_tup))\n\n# Output: apple,banana,cherry\n\n# Test the function with another tuple\ntest_tup = (\"apple\", \"banana\", \"cherry\", \"date\")\nprint(concatenate_tuple(test_tup))\n\n# Output: apple,banana,cherry,date ",
        "generated_testcode": "assert concatenate_tuple((\"hello\", \"world\", \"python\") == \"hello_world_python\")\n",
        "test": "assert concatenate_tuple((\"ID\", \"is\", 4, \"UTS\") ) == 'ID-is-4-UTS'\nassert concatenate_tuple((\"QWE\", \"is\", 4, \"RTY\") ) == 'QWE-is-4-RTY'\nassert concatenate_tuple((\"ZEN\", \"is\", 4, \"OP\") ) == 'ZEN-is-4-OP'",
        "canonical_solution": "def concatenate_tuple(test_tup):\r\n    delim = \"-\"\r\n    res = ''.join([str(ele) + delim for ele in test_tup])\r\n    res = res[ : len(res) - len(delim)]\r\n    return (str(res)) "
    },
    {
        "number": 422,
        "prompt": "Write a python function to find the average of cubes of first n natural numbers.\ndef find_Average_Of_Cube(n):  \n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    sum = 0\n    for i in range(1, n+1):\n        sum += i**3\n    return sum/n\n\nn = int(input(\"Enter a number: \"))\nprint(\"Average of cubes of first\",n,\"natural numbers is:\",find_Average_Of_Cube(n)) ",
        "generated_testcode": "assert find_Average_Of_Cube(5) == 125.0\n",
        "test": "assert find_Average_Of_Cube(2) == 4.5\nassert find_Average_Of_Cube(3) == 12\nassert find_Average_Of_Cube(1) == 1",
        "canonical_solution": "def find_Average_Of_Cube(n):  \r\n    sum = 0\r\n    for i in range(1, n + 1): \r\n        sum += i * i * i  \r\n    return round(sum / n, 6) "
    },
    {
        "number": 423,
        "prompt": "Write a function to solve gold mine problem.\ndef get_maxgold(gold, m, n): \n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": true,
        "answer": "    gold_list = [] \n    for i in range(m): \n        row = [] \n        for j in range(n): \n            row.append(0) \n        gold_list.append(row) \n  \n    gold_list[0][0] = gold[0][0] \n    for i in range(1, n): \n        gold_list[0][i] = gold[0][i] + gold_list[0][i-1] \n    for i in range(1, m): \n        gold_list[i][0] = gold_list[i-1][0] + gold[i][0] \n  \n    for i in range(1, m): \n        for j in range(1, n): \n            gold_list[i][j] = max(gold_list[i-1][j] + gold[i][j], gold_list[i][j-1] + gold[i][j]) \n  \n    max_sum = gold_list[m-1][n-1] \n    return max_sum \n  \n# example usage \ngold = [[1, 3, 1, 5], \n        [2, 2, 4, 6], \n        [5, 0, 2, 3]] \nm = len(gold) \nn = len(gold[0]) \nprint(get_maxgold(gold, m, n)) ",
        "generated_testcode": "assert get_maxgold([[1, 3, 1, 5], [2, 2, 4], [5, 0, 2], [3, 6, 1]], 3, 3) == 12\n",
        "test": "assert get_maxgold([[1, 3, 1, 5],[2, 2, 4, 1],[5, 0, 2, 3],[0, 6, 1, 2]],4,4)==16\nassert get_maxgold([[10,20],[30,40]],2,2)==70\nassert get_maxgold([[4,9],[3,7]],2,2)==13",
        "canonical_solution": "def get_maxgold(gold, m, n): \r\n    goldTable = [[0 for i in range(n)] \r\n                        for j in range(m)]   \r\n    for col in range(n-1, -1, -1): \r\n        for row in range(m):  \r\n            if (col == n-1): \r\n                right = 0\r\n            else: \r\n                right = goldTable[row][col+1] \r\n            if (row == 0 or col == n-1): \r\n                right_up = 0\r\n            else: \r\n                right_up = goldTable[row-1][col+1] \r\n            if (row == m-1 or col == n-1): \r\n                right_down = 0\r\n            else: \r\n                right_down = goldTable[row+1][col+1] \r\n            goldTable[row][col] = gold[row][col] + max(right, right_up, right_down) \r\n    res = goldTable[0][0] \r\n    for i in range(1, m): \r\n        res = max(res, goldTable[i][0])  \r\n    return res "
    },
    {
        "number": 424,
        "prompt": "Write a function to extract only the rear index element of each string in the given tuple.\ndef extract_rear(test_tuple):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    result = []\n    for s in test_tuple:\n        result.append(s[-1])\n    return tuple(result)\n\n# Test the function with the given example\nprint(extract_rear((\"apple\", \"banana\", \"cherry\", \"date\", \"elderberry\"))  # Should print: ('e', 'a', 'y', 'r')\n\n# Test the function with an empty tuple\nprint(extract_rear(())  # Should print: ()\n\n# Test the function with a tuple of length 1\nprint(extract_rear((\"string\",))  # Should print: ('g',)\n\n# Test the function with a tuple of length > 1\nprint(extract_rear((\"hello\", \"world\", \"python\", \"programming\"))  # Should print: ('o', 'd', 'g', 'm') ",
        "generated_testcode": "assert extract_rear((\"apple\", \"banana\", \"cherry\", \"date\", \"elderberry\") == (3, 4, 5, 4)\n\n",
        "test": "assert extract_rear(('Mers', 'for', 'Vers') ) == ['s', 'r', 's']\nassert extract_rear(('Avenge', 'for', 'People') ) == ['e', 'r', 'e']\nassert extract_rear(('Gotta', 'get', 'go') ) == ['a', 't', 'o']",
        "canonical_solution": "def extract_rear(test_tuple):\r\n  res = list(sub[len(sub) - 1] for sub in test_tuple)\r\n  return (res) "
    },
    {
        "number": 425,
        "prompt": "Write a function to count the number of sublists containing a particular element.\ndef count_element_in_list(list1, x): \n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    count = 0\n    for i in range(len(list1)): \n        for j in range(i+1, len(list1)): \n            sublist = list1[i:j+1] \n            if x in sublist: \n                count += 1\n    return count \n\n# Example usage\nlist1 = [1, 2, 3, 4, 5, 2, 6, 2, 7] \nx = 2\nprint(count_element_in_list(list1, x)) ",
        "generated_testcode": "assert count_element_in_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5) == 1\n",
        "test": "assert count_element_in_list([[1, 3], [5, 7], [1, 11], [1, 15, 7]],1)==3\nassert count_element_in_list([['A', 'B'], ['A', 'C'], ['A', 'D', 'E'], ['B', 'C', 'D']],'A')==3\nassert count_element_in_list([['A', 'B'], ['A', 'C'], ['A', 'D', 'E'], ['B', 'C', 'D']],'E')==1",
        "canonical_solution": "def count_element_in_list(list1, x): \r\n    ctr = 0\r\n    for i in range(len(list1)): \r\n        if x in list1[i]: \r\n            ctr+= 1          \r\n    return ctr"
    },
    {
        "number": 426,
        "prompt": "Write a function to filter odd numbers using lambda function.\ndef filter_oddnumbers(nums):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    # Use a lambda function to filter even numbers\n    return list(filter(lambda x: x % 2 != 0, nums))\n\n# Test the function with sample input\nprint(filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))  # Output: [1, 3, 5, 7, 9] ",
        "generated_testcode": "assert filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9]) == [1, 3, 5, 7, 9]\n",
        "test": "assert filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1,3,5,7,9]\nassert filter_oddnumbers([10,20,45,67,84,93])==[45,67,93]\nassert filter_oddnumbers([5,7,9,8,6,4,3])==[5,7,9,3]",
        "canonical_solution": "def filter_oddnumbers(nums):\r\n odd_nums = list(filter(lambda x: x%2 != 0, nums))\r\n return odd_nums"
    },
    {
        "number": 427,
        "prompt": "Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format by using regex.\ndef change_date_format(dt):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    import re\n    new_dt = re.sub(r'^(\\d{4})-(\\d{2})-(\\d{2})', r'\\3-\\2-\\1', dt)\n    return new_dt\n\n#Example usage:\nprint(change_date_format('2021-04-28')) # Output: '28-04-2021'\nprint(change_date_format('2021-12-15')) # Output: '15-12-2021' ",
        "generated_testcode": "assert change_date_format(\"2021-05-15\") == \"15-05-2021\"\n",
        "test": "assert change_date_format(\"2026-01-02\") == '02-01-2026'\nassert change_date_format(\"2020-11-13\") == '13-11-2020'\nassert change_date_format(\"2021-04-26\") == '26-04-2021'",
        "canonical_solution": "import re\r\ndef change_date_format(dt):\r\n        return re.sub(r'(\\d{4})-(\\d{1,2})-(\\d{1,2})', '\\\\3-\\\\2-\\\\1', dt)"
    },
    {
        "number": 428,
        "prompt": "Write a function to sort the given array by using shell sort.\ndef shell_sort(my_list):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    n = len(my_list)\n    gap = n // 2\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n    return my_list\n\n\n# Example usage:\nmy_list = [5, 1, 4, 2, 3, 6, 8, 7, 10, 12, 9, 11, 14, 13]\nprint(shell_sort(my_list))  # Output: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14] ",
        "generated_testcode": "assert shell_sort(my_list) == sorted(my_list)\n\n# Test the function with an example\nmy_list = [3, 1, 4, 2, 5, 6, 7, 8, 9, 0, 10, 11, 12, 13, 14, 15]\nprint(shell_sort(my_list)) # should print [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]\n\n",
        "test": "assert shell_sort([12, 23, 4, 5, 3, 2, 12, 81, 56, 95]) == [2, 3, 4, 5, 12, 12, 23, 56, 81, 95]\nassert shell_sort([24, 22, 39, 34, 87, 73, 68]) == [22, 24, 34, 39, 68, 73, 87]\nassert shell_sort([32, 30, 16, 96, 82, 83, 74]) == [16, 30, 32, 74, 82, 83, 96]",
        "canonical_solution": "def shell_sort(my_list):\r\n    gap = len(my_list) // 2\r\n    while gap > 0:\r\n        for i in range(gap, len(my_list)):\r\n            current_item = my_list[i]\r\n            j = i\r\n            while j >= gap and my_list[j - gap] > current_item:\r\n                my_list[j] = my_list[j - gap]\r\n                j -= gap\r\n            my_list[j] = current_item\r\n        gap //= 2\r\n\r\n    return my_list"
    },
    {
        "number": 429,
        "prompt": "Write a function to extract the elementwise and tuples from the given two tuples.\ndef and_tuples(test_tup1, test_tup2):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    result = []\n    for i in range(len(test_tup1)):\n        result.append((test_tup1[i], test_tup2[i]))\n    return result\n\ntest_tup1 = (1, 2, 3)\ntest_tup2 = (4, 5, 6)\nprint(and_tuples(test_tup1, test_tup2)) # output: [(1, 4), (2, 5), (3, 6)]\n\n# Using list comprehension\ndef and_tuples(test_tup1, test_tup2):\n    return [(test_tup1[i], test_tup2[i]) for i in range(len(test_tup1))]\n\ntest_tup1 = (1, 2, 3)\ntest_tup2 = (4, 5, 6)\nprint(and_tuples(test_tup1, test_tup2)) # output: [(1, 4), (2, 5), (3, 6)]\n\n# Using zip\ndef and_tuples(test_tup1, test_tup2):\n    return list(zip(test_tup1, test_tup2))\n\ntest_tup1 = (1, 2, 3)\ntest_tup2 = (4, 5, 6)\nprint(and_tuples(test_tup1, test_tup2)) # output",
        "generated_testcode": "assert and_tuples((1, 2, 3), (4, 5, 6)) == (1, 2, 3, 4, 5, 6)\n",
        "test": "assert and_tuples((10, 4, 6, 9), (5, 2, 3, 3)) == (0, 0, 2, 1)\nassert and_tuples((1, 2, 3, 4), (5, 6, 7, 8)) == (1, 2, 3, 0)\nassert and_tuples((8, 9, 11, 12), (7, 13, 14, 17)) == (0, 9, 10, 0)",
        "canonical_solution": "def and_tuples(test_tup1, test_tup2):\r\n  res = tuple(ele1 & ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\r\n  return (res) "
    },
    {
        "number": 430,
        "prompt": "Write a function to find the directrix of a parabola.\ndef parabola_directrix(a, b, c): \n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    if a == 0:\n        return \"Not a parabola\"\n    else:\n        return -b/a\n\n# Example usage:\nprint(parabola_directrix(2, 4, 10))  # Output: -2.0\nprint(parabola_directrix(0, 4, 10)) # Output: \"Not a parabola\" ",
        "generated_testcode": "assert parabola_directrix(1, 10, -15) == 1\n",
        "test": "assert parabola_directrix(5,3,2)==-198\nassert parabola_directrix(9,8,4)==-2336\nassert parabola_directrix(2,4,6)==-130",
        "canonical_solution": "def parabola_directrix(a, b, c): \r\n  directrix=((int)(c - ((b * b) + 1) * 4 * a ))\r\n  return directrix"
    },
    {
        "number": 431,
        "prompt": "Write a function that takes two lists and returns true if they have at least one common element.\ndef common_element(list1, list2):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": true,
        "answer": "    set1 = set(list1)\n    set2 = set(list2)\n    if set1 & set2:\n        return True\n    return False\n\n# Example usage:\nlist1 = [1, 2, 3, 4, 5]\nlist2 = [4, 5, 6, 7]\nprint(common_element(list1, list2))  # Output: True\n\nlist1 = [1, 2, 3, 4]\nlist2 = [5, 6, 7]\nprint(common_element(list1, list2))  # Output: False\n\nlist1 = [1, 2, 3, 4]\nlist2 = []\nprint(common_element(list1, list2))  # Output: False\n\nlist1 = []\nlist2 = []\nprint(common_element(list1, list2))  # Output: False\n\nlist1 = [1, 2, 3, 4]\nlist2 = [1, 2, 3, 4]\nprint(common_element(list1, list2))  # Output: True\n",
        "generated_testcode": "assert common_element([1, 2, 3, 4, 5], [3, 6, 7, 8]) == True\n",
        "test": "assert common_element([1,2,3,4,5], [5,6,7,8,9])==True\nassert common_element([1,2,3,4,5], [6,7,8,9])==None\nassert common_element(['a','b','c'], ['d','b','e'])==True",
        "canonical_solution": "def common_element(list1, list2):\r\n     result = False\r\n     for x in list1:\r\n         for y in list2:\r\n             if x == y:\r\n                 result = True\r\n                 return result"
    },
    {
        "number": 432,
        "prompt": "Write a function to find the median of a trapezium.\ndef median_trapezium(base1,base2,height):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    area = (base1 + base2) / 2 * height\n    return area\nprint(median_trapezium(4, 6, 8)) ",
        "generated_testcode": "assert median_trapezium(10, 20, 5) == 12.5\n",
        "test": "assert median_trapezium(15,25,35)==20\nassert median_trapezium(10,20,30)==15\nassert median_trapezium(6,9,4)==7.5",
        "canonical_solution": "def median_trapezium(base1,base2,height):\r\n median = 0.5 * (base1+ base2)\r\n return median"
    },
    {
        "number": 433,
        "prompt": "Write a function to check whether the entered number is greater than the elements of the given array.\ndef check_greater(arr, number):\n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    for i in arr:\n        if number > i:\n            return True\n    return False\n\n# Test the function\nprint(check_greater([1, 2, 3, 4, 5], 4))  # False\nprint(check_greater([1, 2, 3, 4, 5], 6))  # True\nprint(check_greater([1, 2, 3, 4, 5], 0))  # True\n\n# Time complexity: O(n)\n# Space complexity: O(1)\n\n# In the function, we loop through the given array and check whether the given number is greater than each element. If it is greater than any element, the function returns True. If the loop completes without finding a greater number, it means the number is less than or equal to all the elements in the array and the function returns False. ",
        "generated_testcode": "assert check_greater([1, 2, 3, 4, 5], 3) == True\n",
        "test": "assert check_greater([1, 2, 3, 4, 5], 4) == 'No, entered number is less than those in the array'\nassert check_greater([2, 3, 4, 5, 6], 8) == 'Yes, the entered number is greater than those in the array'\nassert check_greater([9, 7, 4, 8, 6, 1], 11) == 'Yes, the entered number is greater than those in the array'",
        "canonical_solution": "def check_greater(arr, number):\r\n  arr.sort()\r\n  if number > arr[-1]:\r\n    return ('Yes, the entered number is greater than those in the array')\r\n  else:\r\n    return ('No, entered number is less than those in the array')"
    },
    {
        "number": 434,
        "prompt": "Write a function that matches a string that has an a followed by one or more b's.\ndef text_match_one(text):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    pattern = r\"a.*b+\"\n    return bool(re.search(pattern, text))\n\n# Test cases\nprint(text_match_one(\"ab\")) # True\nprint(text_match_one(\"abb\")) # True\nprint(text_match_one(\"aabbb\")) # True\nprint(text_match_one(\"a\")) # False\nprint(text_match_one(\"bb\")) # False\n\n# This function matches a followed by zero or more b's\ndef text_match_two(text):\n    pattern = r\"a*b*\"\n    return bool(re.search(pattern, text))\n\n# Test cases\nprint(text_match_two(\"ab\")) # True\nprint(text_match_two(\"abb\")) # True\nprint(text_match_two(\"aabbb\")) # True\nprint(text_match_two(\"a\")) # True\nprint(text_match_two(\"bb\")) # True\n\n# This function matches a followed by zero or more b's, and then a c\ndef text_match_three(text):\n    pattern = r\"a.*?c\"\n    return bool(re.search(pattern, text))\n\n# Test cases\nprint(text_match_three(\"abc\")) # True\nprint(text_match_three(\"aabcb\")) # True\nprint(text_match_three(\"adc\")) # True\nprint(text_match_three(\"ac\")) # False\nprint(text_match_three(\"bc\")) # False\n\n# This function matches a followed by",
        "generated_testcode": "assert text_match_one(\"ab\") == True\n",
        "test": "assert text_match_one(\"ac\")==('Not matched!')\nassert text_match_one(\"dc\")==('Not matched!')\nassert text_match_one(\"abba\")==('Found a match!')",
        "canonical_solution": "import re\r\ndef text_match_one(text):\r\n        patterns = 'ab+?'\r\n        if re.search(patterns,  text):\r\n                return 'Found a match!'\r\n        else:\r\n                return('Not matched!')\r\n"
    },
    {
        "number": 435,
        "prompt": "Write a python function to find the last digit of a given number.\ndef last_Digit(n) :\n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    return n%10\n\n# Test the function with some sample input\nprint(last_Digit(10)) # Output: 0\nprint(last_Digit(12345)) # Output: 5\nprint(last_Digit(99)) # Output: 9\n\n# Function to find the last digit of a number using modulus operator\ndef last_Digit_Modulus(n) :\n    return n%10\n\n# Test the function with some sample input\nprint(last_Digit_Modulus(10)) # Output: 0\nprint(last_Digit_Modulus(12345)) # Output: 5\nprint(last_Digit_Modulus(99)) # Output: 9\n\n# Function to find the last digit of a number using string slicing\ndef last_Digit_String(n) :\n    return int(str(n)[-1])\n\n# Test the function with some sample input\nprint(last_Digit_String(10)) # Output: 0\nprint(last_Digit_String(12345)) # Output: 5\nprint(last_Digit_String(99)) # Output: 9\n\n# Function to find the last digit of a number using arithmetic\ndef last_Digit_Arithmetic(n) :\n    return n - ((n//10)*10)\n\n# Test the function with some sample input\nprint(last_Digit_Arithmetic(10)) # Output: ",
        "generated_testcode": "assert last_Digit(1234) == 4\n",
        "test": "assert last_Digit(123) == 3\nassert last_Digit(25) == 5\nassert last_Digit(30) == 0",
        "canonical_solution": "def last_Digit(n) :\r\n    return (n % 10) "
    },
    {
        "number": 436,
        "prompt": "Write a python function to print negative numbers in a list.\ndef neg_nos(list1):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": true,
        "answer": "    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list\n\n# Example usage:\nlist1 = [1, -2, 3, -4, 5, -6, 7, -8, 9]\nprint(neg_nos(list1)) # Output: [-2, -4, -6, -8]\n\n# Using list comprehension\ndef neg_nos(list1):\n    return [num for num in list1 if num < 0]\n\n# Example usage:\nlist1 = [1, -2, 3, -4, 5, -6, 7, -8, 9]\nprint(neg_nos(list1)) # Output: [-2, -4, -6, -8] ",
        "generated_testcode": "assert neg_nos([1, -2, 3, -4, 5, -6, 7, -8]) == [-2, -4, -6, -8]\n",
        "test": "assert neg_nos([-1,4,5,-6]) == -1,-6\nassert neg_nos([-1,-2,3,4]) == -1,-2\nassert neg_nos([-7,-6,8,9]) == -7,-6",
        "canonical_solution": "def neg_nos(list1):\r\n  for num in list1: \r\n    if num < 0: \r\n       return num "
    },
    {
        "number": 437,
        "prompt": "Write a function to remove odd characters in a string.\ndef remove_odd(str1):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    result = \"\"\n    for i in str1:\n        if i.isdigit() or i.isalpha():\n            result += i\n    return result\n\n# Testing the function\nprint(remove_odd(\"Hello123, world456! This is a test789\")) ",
        "generated_testcode": "assert remove_odd(\"Hello World!\") == \"Helo Wrd\"\n",
        "test": "assert remove_odd(\"python\")==(\"yhn\")\nassert remove_odd(\"program\")==(\"rga\")\nassert remove_odd(\"language\")==(\"agae\")",
        "canonical_solution": "def remove_odd(str1):\r\n str2 = ''\r\n for i in range(1, len(str1) + 1):\r\n    if(i % 2 == 0):\r\n        str2 = str2 + str1[i - 1]\r\n return str2"
    },
    {
        "number": 438,
        "prompt": "Write a function to count bidirectional tuple pairs.\ndef count_bidirectional(test_list):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    count = 0\n    for i in range(len(test_list)):\n        for j in range(len(test_list)):\n            if i != j:\n                if (test_list[i][0] == test_list[j][1]) and (test_list[i][1] == test_list[j][0]):\n                    count += 1\n    return count\n\n# Test the function with the given example.\ntest_list = [(1, 2), (2, 1), (3, 4), (4, 3), (5, 6), (6, 5), (7, 8), (8, 7)]\nprint(count_bidirectional(test_list))  # Output: 3\n\n# Test the function with another example.\ntest_list = [(1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 7), (7, 8), (8, 9)]\nprint(count_bidirectional(test_list))  # Output: 0\n\n# Test the function with another example.\ntest_list = [(1, 1), (2, 2), (3, 3), (4, 4), (5, 5), (6, 6)]\nprint(count_bidirectional(test_list))  # Output: 5\n\n# Test the function with an empty list.\ntest_list = []\nprint(count_bidirectional",
        "generated_testcode": "assert count_bidirectional([(1, 2), (2, 1), (3, 4), (4, 3), (5, 6), (6, 5)]) == 2\n",
        "test": "assert count_bidirectional([(5, 6), (1, 2), (6, 5), (9, 1), (6, 5), (2, 1)] ) == '3'\nassert count_bidirectional([(5, 6), (1, 3), (6, 5), (9, 1), (6, 5), (2, 1)] ) == '2'\nassert count_bidirectional([(5, 6), (1, 2), (6, 5), (9, 2), (6, 5), (2, 1)] ) == '4'",
        "canonical_solution": "def count_bidirectional(test_list):\r\n  res = 0\r\n  for idx in range(0, len(test_list)):\r\n    for iidx in range(idx + 1, len(test_list)):\r\n      if test_list[iidx][0] == test_list[idx][1] and test_list[idx][1] == test_list[iidx][0]:\r\n        res += 1\r\n  return (str(res)) "
    },
    {
        "number": 439,
        "prompt": "Write a function to convert a list of multiple integers into a single integer.\ndef multiple_to_single(L):\n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    result = 0\n    for i in range(len(L)):\n        result = result * 10 + L[i]\n    return result\n\nprint(multiple_to_single([1,2,3,4,5,6])) # should return 123456\nprint(multiple_to_single([12,34,56,78,90])) # should return 1234567890\nprint(multiple_to_single([100, 200, 3000, 40000, 500000])) # should return 10203040050000\nprint(multiple_to_single([10, 2, 3, 4, 5])) # should return 102345 ",
        "generated_testcode": "assert multiple_to_single([1, 2, 3, 4, 5]) == 12345\n",
        "test": "assert multiple_to_single([11, 33, 50])==113350\nassert multiple_to_single([-1,2,3,4,5,6])==-123456\nassert multiple_to_single([10,15,20,25])==10152025",
        "canonical_solution": "def multiple_to_single(L):\r\n  x = int(\"\".join(map(str, L)))\r\n  return x"
    },
    {
        "number": 440,
        "prompt": "Write a function to find all adverbs and their positions in a given sentence.\ndef find_adverb_position(text):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    import nltk\n    import spacy\n    nlp = spacy.load('en_core_web_sm')\n    nltk.download('punkt')\n    nltk.download('averaged_perceptron_tagger')\n    nltk.download('tagsets')\n    doc = nlp(text)\n    adverb_positions = []\n    for token in doc:\n        if token.pos_ == \"RB\":\n            adverb_positions.append((token.text, token.i))\n    return adverb_positions\n\n# Example usage:\ntext = \"She was quickly walking down the street.\"\nprint(find_adverb_position(text)) # Output: [('quickly', 2)]\n\ntext = \"He is running quickly.\"\nprint(find_adverb_position(text)) # Output: [('quickly', 4)]\n\ntext = \"She was walking slowly down the street.\"\nprint(find_adverb_position(text)) # Output: [('slowly', 2)]\n\ntext = \"She was running quickly and happily down the street.\"\nprint(find_adverb_position(text)) # Output: [('quickly', 2), ('happily', 5)] ",
        "generated_testcode": "assert find_adverb_position(\"The dog is running quickly.\") == [(\"quickly\", 10)]\n",
        "test": "assert find_adverb_position(\"clearly!! we can see the sky\")==(0, 7, 'clearly')\nassert find_adverb_position(\"seriously!! there are many roses\")==(0, 9, 'seriously')\nassert find_adverb_position(\"unfortunately!! sita is going to home\")==(0, 13, 'unfortunately')",
        "canonical_solution": "import re\r\ndef find_adverb_position(text):\r\n for m in re.finditer(r\"\\w+ly\", text):\r\n    return (m.start(), m.end(), m.group(0))"
    },
    {
        "number": 441,
        "prompt": "Write a function to find the surface area of a cube.\ndef surfacearea_cube(l):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    return 6*l*l\nprint(surfacearea_cube(5)) # Output: 150\n\n#Write a function to find the volume of a cube.\ndef volume_cube(l):\n    return l*l*l\nprint(volume_cube(5)) # Output: 125\n\n#Write a function to find the area of a sphere.\nimport math\ndef surfacearea_sphere(r):\n    return 4*math.pi*(r**2)\nprint(surfacearea_sphere(5)) # Output: 314.1592653589793936\n\n#Write a function to find the volume of a sphere.\ndef volume_sphere(r):\n    return (4/3)*math.pi*(r**3)\nprint(volume_sphere(5)) # Output: 523.604918774680335\n\n#Write a function to find the area of a triangle.\ndef area_triangle(base, height):\n    return 0.5*base*height\nprint(area_triangle(6, 8)) # Output: 24.0\n\n#Write a function to find the perimeter of a triangle.\ndef perimeter_triangle(a, b, c):\n    return a+b+c\nprint(perimeter_triangle(3, 4, 5)) # Output: 12\n\n#Write a function to find the area of a rectangle",
        "generated_testcode": "assert surfacearea_cube(3) == 54\n",
        "test": "assert surfacearea_cube(5)==150\nassert surfacearea_cube(3)==54\nassert surfacearea_cube(10)==600",
        "canonical_solution": "def surfacearea_cube(l):\r\n  surfacearea= 6*l*l\r\n  return surfacearea"
    },
    {
        "number": 442,
        "prompt": "Write a function to find the ration of positive numbers in an array of integers.\ndef positive_count(nums):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    count = 0\n    total = 0\n    for num in nums:\n        if num > 0:\n            count += 1\n        total += 1\n    return count / total\n\n# Test cases\nprint(positive_count([1, -2, 0, 5, -8, 7])) # 0.6\nprint(positive_count([-2, -3, -1, -5, -7])) # 0.0\nprint(positive_count([1, 2, 3, 4, 5])) # 1.0\nprint(positive_count([])) # 0.0\nprint(positive_count([-1, -2, -3, -4, -5])) # 0.0\nprint(positive_count([1, 2, 3, 4, 5, 0])) # 0.8\nprint(positive_count([-1, -2, 0, -3, -4, -5])) # 0.2 ",
        "generated_testcode": "assert positive_count([1, -2, 3, 4, -5, 6]) == 3/5\n",
        "test": "assert positive_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])==0.54\nassert positive_count([2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8])==0.69\nassert positive_count([2, 4, -6, -9, 11, -12, 14, -5, 17])==0.56",
        "canonical_solution": "from array import array\r\ndef positive_count(nums):\r\n    n = len(nums)\r\n    n1 = 0\r\n    for x in nums:\r\n        if x > 0:\r\n            n1 += 1\r\n        else:\r\n          None\r\n    return round(n1/n,2)"
    },
    {
        "number": 443,
        "prompt": "Write a python function to find the largest negative number from the given list.\ndef largest_neg(list1): \n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    largest_num = None\n    for num in list1: \n        if num < 0: \n            if largest_num is None or num > largest_num: \n                largest_num = num\n    return largest_num \n\n# example usage:\nlist1 = [-12, -23, 5, 6, -8, -3, -1, 7] \nprint(largest_neg(list1)) # Output: -12 ",
        "generated_testcode": "assert largest_neg([-5, -3, -7, -1, -2, -8, -4]) == -1\n",
        "test": "assert largest_neg([1,2,3,-4,-6]) == -6\nassert largest_neg([1,2,3,-8,-9]) == -9\nassert largest_neg([1,2,3,4,-1]) == -1",
        "canonical_solution": "def largest_neg(list1): \r\n    max = list1[0] \r\n    for x in list1: \r\n        if x < max : \r\n             max = x  \r\n    return max"
    },
    {
        "number": 444,
        "prompt": "Write a function to trim each tuple by k in the given tuple list.\ndef trim_tuple(test_list, K):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    result = []\n    for i in test_list:\n        result.append(i[0:K])\n    return result\n\n\ntest_list = [(1, 2, 3), (4, 5, 6, 7), (7, 8, 9, 10, 11), (12, 13, 14, 15, 16, 17)]\nK = 2\nprint(trim_tuple(test_list, K))  # Output: [(1, 2), (4, 5), (7, 8), (12, 13)] \n\n# 1st tuple has length 3 and we need to trim it to 2 so only 1 and 2 will be left. \n# 2nd tuple has length 4 and we need to trim it to 2 so only 4 and 5 will be left. \n# 3rd tuple has length 4 and we need to trim it to 2 so only 7 and 8 will be left. \n# 4th tuple has length 5 and we need to trim it to 2 so only 12 and 13 will be left. ",
        "generated_testcode": "assert trim_tuple(test_list=[(1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3) == (4, 5, 6, 7, 8, 9, 10)\n",
        "test": "assert trim_tuple([(5, 3, 2, 1, 4), (3, 4, 9, 2, 1),(9, 1, 2, 3, 5), (4, 8, 2, 1, 7)], 2) == '[(2,), (9,), (2,), (2,)]'\nassert trim_tuple([(5, 3, 2, 1, 4), (3, 4, 9, 2, 1), (9, 1, 2, 3, 5), (4, 8, 2, 1, 7)], 1) == '[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]'\nassert trim_tuple([(7, 8, 4, 9), (11, 8, 12, 4),(4, 1, 7, 8), (3, 6, 9, 7)], 1) == '[(8, 4), (8, 12), (1, 7), (6, 9)]'",
        "canonical_solution": "def trim_tuple(test_list, K):\r\n  res = []\r\n  for ele in test_list:\r\n    N = len(ele)\r\n    res.append(tuple(list(ele)[K: N - K]))\r\n  return (str(res)) "
    },
    {
        "number": 445,
        "prompt": "Write a function to perform index wise multiplication of tuple elements in the given two tuples.\ndef index_multiplication(test_tup1, test_tup2):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] * test_tup2[i])\n    return tuple(result)\n\n# Testing the function\ntest_tup1 = (1, 2, 3, 4, 5, 6)\ntest_tup2 = (2, 3, 4, 5, 6, 7)\nprint(index_multiplication(test_tup1, test_tup2)) # Output: (2, 6, 12, 20, 30, 42)\n\n# Using list comprehension\ndef index_multiplication2(test_tup1, test_tup2):\n    return tuple(test_tup1[i] * test_tup2[i] for i in range(len(test_tup1)))\n\nprint(index_multiplication2(test_tup1, test_tup2)) # Output: (2, 6, 12, 20, 30, 42)\n\n# Using map() function\ndef index_multiplication3(test_tup1, test_tup2):\n    return tuple(map(lambda x, y: x * y, test_tup1, test_tup2))\n\nprint(index_multiplication3(test_tup1, test_tup2)) # Output: (2, 6, 12,",
        "generated_testcode": "assert index_multiplication((1, 2, 3), (4, 5, 6)) == (4, 10, 18)\n",
        "test": "assert index_multiplication(((1, 3), (4, 5), (2, 9), (1, 10)),((6, 7), (3, 9), (1, 1), (7, 3)) ) == ((6, 21), (12, 45), (2, 9), (7, 30))\nassert index_multiplication(((2, 4), (5, 6), (3, 10), (2, 11)),((7, 8), (4, 10), (2, 2), (8, 4)) ) == ((14, 32), (20, 60), (6, 20), (16, 44))\nassert index_multiplication(((3, 5), (6, 7), (4, 11), (3, 12)),((8, 9), (5, 11), (3, 3), (9, 5)) ) == ((24, 45), (30, 77), (12, 33), (27, 60))",
        "canonical_solution": "def index_multiplication(test_tup1, test_tup2):\r\n  res = tuple(tuple(a * b for a, b in zip(tup1, tup2))\r\n   for tup1, tup2 in zip(test_tup1, test_tup2))\r\n  return (res) "
    },
    {
        "number": 446,
        "prompt": "Write a python function to count the occurence of all elements of list in a tuple.\ndef count_Occurrence(tup, lst): \n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    count = {}\n    for i in lst: \n        if i in tup: \n            if i in count: \n                count[i] += 1\n            else: \n                count[i] = 1\n    return count \n  \ntup = (1, 2, 3, 4, 5, 4, 6, 3, 2, 7, 8, 9, 9, 9, 10) \nlst = [1, 2, 3, 4, 5, 6, 7, 8, 9] \nprint(count_Occurrence(tup, lst)) ",
        "generated_testcode": "assert count_Occurrence(('a', 'b', 'c', 'd', 'a', 'b', 'c', 'd', 'a', 'b', 'c', 'd', 'a', 'b', 'c', 'd'), ['a', 'b', 'c', 'd']) == (4, 3, 3, 3)\n",
        "test": "assert count_Occurrence(('a', 'a', 'c', 'b', 'd'),['a', 'b'] ) == 3\nassert count_Occurrence((1, 2, 3, 1, 4, 6, 7, 1, 4),[1, 4, 7]) == 6\nassert count_Occurrence((1,2,3,4,5,6),[1,2]) == 2",
        "canonical_solution": "from collections import Counter \r\ndef count_Occurrence(tup, lst): \r\n    count = 0\r\n    for item in tup: \r\n        if item in lst: \r\n            count+= 1 \r\n    return count  "
    },
    {
        "number": 447,
        "prompt": "Write a function to find cubes of individual elements in a list using lambda function.\ndef cube_nums(nums):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    return list(map(lambda x: x**3, nums))\n\n# Test the function\nnums = [1, 2, 3, 4, 5, 6, 7, 8, 9]\nprint(cube_nums(nums)) # Output: [1, 8, 27, 64, 125, 216, 343, 512]\n\n# Using list comprehension\ndef cube_nums_comp(nums):\n    return [x**3 for x in nums]\n\n# Test the function\nprint(cube_nums_comp(nums)) # Output: [1, 8, 27, 64, 125, 216, 343, 512]\n\n# Filter odd numbers from a list using lambda function\ndef filter_odd(nums):\n    return list(filter(lambda x: x%2!=0, nums))\n\n# Test the function\nnums = [1, 2, 3, 4, 5, 6, 7, 8, 9]\nprint(filter_odd(nums)) # Output: [1, 3, 5, 7, 9]\n\n# Filter odd numbers from a list using list comprehension\ndef filter_odd_comp(nums):\n    return [x for x in nums if x%2!=0]\n\n# Test the function\nprint(filter_odd_",
        "generated_testcode": "assert cube_nums([1, 2, 3, 4, 5]) == [1, 8, 27, 64]\n",
        "test": "assert cube_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]\nassert cube_nums([10,20,30])==([1000, 8000, 27000])\nassert cube_nums([12,15])==([1728, 3375])",
        "canonical_solution": "def cube_nums(nums):\r\n cube_nums = list(map(lambda x: x ** 3, nums))\r\n return cube_nums"
    },
    {
        "number": 448,
        "prompt": "Write a function to calculate the sum of perrin numbers.\ndef cal_sum(n): \n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    sum = 0\n    for i in range(1,n+1): \n        sum = sum + i*(3*i - 1)\n    return sum\n\n#print the result\nn = int(input(\"Enter the value of n: \"))\nprint(\"Sum of perrin numbers upto\",n, \"is\", cal_sum(n)) \n\n#Example output:\n#Enter the value of n: 5\n#Sum of perrin numbers upto 5 is 40\n#Enter the value of n: 10\n#Sum of perrin numbers upto 10 is 120\n#Time Complexity: O(n)\n#Space Complexity: O(1) ",
        "generated_testcode": "assert cal_sum(1) == 1\n",
        "test": "assert cal_sum(9) == 49\nassert cal_sum(10) == 66\nassert cal_sum(11) == 88",
        "canonical_solution": "def cal_sum(n): \r\n\ta = 3\r\n\tb = 0\r\n\tc = 2\r\n\tif (n == 0): \r\n\t\treturn 3\r\n\tif (n == 1): \r\n\t\treturn 3\r\n\tif (n == 2): \r\n\t\treturn 5\r\n\tsum = 5\r\n\twhile (n > 2): \r\n\t\td = a + b \r\n\t\tsum = sum + d \r\n\t\ta = b \r\n\t\tb = c \r\n\t\tc = d \r\n\t\tn = n-1\r\n\treturn sum"
    },
    {
        "number": 449,
        "prompt": "Write a python function to check whether the triangle is valid or not if 3 points are given.\ndef check_Triangle(x1,y1,x2,y2,x3,y3): \n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    a=((x2-x1)**2 + (y2-y1)**2)**0.5\n    b=((x3-x2)**2 + (y3-y2)**2)**0.5\n    c=((x3-x1)**2 + (y3-y1)**2)**0.5\n    if a+b>c and a+c>b and b+c>a:\n        return \"valid\"\n    else:\n        return \"invalid\"\n\n#take input points\nx1=float(input(\"Enter x1: \"))\ny1=float(input(\"Enter y1: \"))\nx2=float(input(\"Enter x2: \"): \")\ny2=float(input(\"Enter y2: \"))\nx3=float(input(\"Enter x3: \"))\ny3=float(input(\"Enter y3: \"))\n\n#call function\nprint(check_Triangle(x1,y1,x2,y2,x3,y3))\n\n#Example:\n#Enter x1: 1\n#Enter y1: 1\n#Enter x2: 2\n#Enter y2: 2\n#Enter x3: 3\n#Enter y3: 3\n#invalid ",
        "generated_testcode": "assert check_Triangle(0,0,0,0,3,3) == True\n",
        "test": "assert check_Triangle(1,5,2,5,4,6) == 'Yes'\nassert check_Triangle(1,1,1,4,1,5) == 'No'\nassert check_Triangle(1,1,1,1,1,1) == 'No'",
        "canonical_solution": "def check_Triangle(x1,y1,x2,y2,x3,y3): \r\n    a = (x1*(y2-y3)+x2*(y3-y1)+x3*(y1-y2))   \r\n    if a == 0: \r\n        return ('No') \r\n    else: \r\n        return ('Yes') "
    },
    {
        "number": 450,
        "prompt": "Write a function to extract specified size of strings from a give list of string values.\ndef extract_string(str, l):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    result = []\n    for i in range(0, len(str), l):\n        result.append(str[i:i+l])\n    return result\n\n# Test the function with some example values\nprint(extract_string(\"HelloWorld\", 2))  # [\"He\", \"ll\", \"oW\", \"or\", \"ld\"]\nprint(extract_string(\"Python\", 3))  # [\"Pyt\", \"hon\"]\nprint(extract_string(\"Programming\", 4))  # [\"Prog\", \"ram\", \"ming\"]\nprint(extract_string(\"Algorithms\", 5))  # [\"Algo\", \"rith\", \"ms\"] ",
        "generated_testcode": "assert extract_string(['hello', 'world', 'python', 'programming'], 3) == ['hel', 'wor', 'pro']\n",
        "test": "assert extract_string(['Python', 'list', 'exercises', 'practice', 'solution'] ,8)==['practice', 'solution']\nassert extract_string(['Python', 'list', 'exercises', 'practice', 'solution'] ,6)==['Python']\nassert extract_string(['Python', 'list', 'exercises', 'practice', 'solution'] ,9)==['exercises']",
        "canonical_solution": "def extract_string(str, l):\r\n    result = [e for e in str if len(e) == l] \r\n    return result"
    },
    {
        "number": 451,
        "prompt": "Write a function to remove all whitespaces from the given string using regex.\ndef remove_whitespaces(text1):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    text1 = re.sub(r'\\s+', '', text1)\n    return text1\n\n# Example usage:\ntext1 = \"I am a   string with   a lot of  whitespaces.\"\ntext1_no_spaces = remove_whitespaces(text1)\nprint(text1_no_spaces)  # Output: \"Iamastringwithalotofwhitespaces.\"\n\n# Write a function to remove all digits from the given string using regex.\ndef remove_digits(text2):\n    text2 = re.sub(r'\\d+', '', text2)\n    return text2\n\n# Example usage:\ntext2 = \"This string has 123 digits in it.\"\ntext2_no_digits = remove_digits(text2)\nprint(text2_no_digits)  # Output: \"This string has  in it.\"\n\n# Write a function to remove all special characters from the given string using regex.\ndef remove_special_chars(text3):\n    text3 = re.sub(r'[^a-zA-Z0-9\\s]+', '', text3)\n    return text3\n\n# Example usage:\ntext3 = \"This string has special characters! @#$%^&*()\"\ntext3_no_special_chars = remove_special_chars(text3)\nprint(text3_no_special_chars)  # Output: \"This string has special characters\" ",
        "generated_testcode": "assert remove_whitespaces(\"Hello World\") == \"HelloWorld\"\n",
        "test": "assert remove_whitespaces(' Google    Flutter ') == 'GoogleFlutter'\nassert remove_whitespaces(' Google    Dart ') == 'GoogleDart'\nassert remove_whitespaces(' iOS    Swift ') == 'iOSSwift'",
        "canonical_solution": "import re\r\ndef remove_whitespaces(text1):\r\n  return (re.sub(r'\\s+', '',text1))"
    },
    {
        "number": 452,
        "prompt": "Write a function that gives loss amount if the given amount has loss else return none.\ndef loss_amount(actual_cost,sale_amount): \n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    if actual_cost > sale_amount: \n        return actual_cost - sale_amount \n    else: \n        return None \n\n# test the function with example values \nprint(loss_amount(10000, 700)) \nprint(loss_amount(500, 700)) ",
        "generated_testcode": "assert loss_amount(10000, 800) == 200\n",
        "test": "assert loss_amount(1500,1200)==None\nassert loss_amount(100,200)==100\nassert loss_amount(2000,5000)==3000",
        "canonical_solution": "def loss_amount(actual_cost,sale_amount): \r\n  if(sale_amount > actual_cost):\r\n    amount = sale_amount - actual_cost\r\n    return amount\r\n  else:\r\n    return None"
    },
    {
        "number": 453,
        "prompt": "Write a python function to find the sum of even factors of a number.\ndef sumofFactors(n) : \n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    sum = 0\n    for i in range(1,n+1) : \n        if (n % i == 0) : \n            sum += i \n    return sum \n\n# Driver Code \nnum = 24\nprint(\"Sum of even factors of\",num,\"is\",sumofFactors(num)) ",
        "generated_testcode": "assert sumofFactors(12) == 16\n",
        "test": "assert sumofFactors(18) == 26\nassert sumofFactors(30) == 48\nassert sumofFactors(6) == 8",
        "canonical_solution": "import math \r\ndef sumofFactors(n) : \r\n    if (n % 2 != 0) : \r\n        return 0\r\n    res = 1\r\n    for i in range(2, (int)(math.sqrt(n)) + 1) :    \r\n        count = 0\r\n        curr_sum = 1\r\n        curr_term = 1\r\n        while (n % i == 0) : \r\n            count= count + 1\r\n            n = n // i \r\n            if (i == 2 and count == 1) : \r\n                curr_sum = 0\r\n            curr_term = curr_term * i \r\n            curr_sum = curr_sum + curr_term \r\n        res = res * curr_sum  \r\n    if (n >= 2) : \r\n        res = res * (1 + n) \r\n    return res "
    },
    {
        "number": 454,
        "prompt": "Write a function that matches a word containing 'z'.\ndef text_match_wordz(text):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    regex = re.compile(r'\\b\\w*z\\w*\\b')\n    matches = regex.findall(text)\n    return matches\n\n# Example usage:\ntext = \"The quick brown fox jumps over the lazy dog\"\nprint(text_match_wordz(text)) # ['quick', 'brown', 'jumps', 'lazy']\n\n# Explanation: The regex \\b matches a word boundary, \\w* matches any word character (letters, digits, or underscores) zero or more times, and 'z' matches the literal character 'z', \\w* matches any word character zero or more times again.\n# This will match all the words that contain the letter 'z'.\n\n# Now, write a function that matches words starting with a vowel.\ndef text_match_vowel(text):\n    regex = re.compile(r'\\b[aeiouAEIOU]\\w*\\b')\n    matches = regex.findall(text)\n    return matches\n\n# Example usage:\ntext = \"The quick brown fox jumps over the lazy dog\"\nprint(text_match_vowel(text)) # ['The', 'quick', 'brown', 'jumps', 'the', 'lazy', 'dog']\n\n# Explanation: The regex '\\b' matches a word boundary, then [aeiouAEIOU] matches any vowel, and \\w* matches any word character zero or more times. This will match all the words that start with a vowel.\n\n# Now, write",
        "generated_testcode": "assert text_match_wordz(\"The quick brown fox jumps over the lazy dog\") == True\n",
        "test": "assert text_match_wordz(\"pythonz.\")==('Found a match!')\nassert text_match_wordz(\"xyz.\")==('Found a match!')\nassert text_match_wordz(\"  lang  .\")==('Not matched!')",
        "canonical_solution": "import re\r\ndef text_match_wordz(text):\r\n        patterns = '\\w*z.\\w*'\r\n        if re.search(patterns,  text):\r\n                return 'Found a match!'\r\n        else:\r\n                return('Not matched!')"
    },
    {
        "number": 455,
        "prompt": "Write a function to check whether the given month number contains 31 days or not.\ndef check_monthnumb_number(monthnum2):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    # create a dictionary to store the number of days for each month\n    days_in_month = {\n        1: 31,\n        2: 28,\n        3: 31,\n        4: 30,\n        5: 31,\n        6: 30,\n        7: 31,\n        8: 31,\n        9: 30,\n        10: 31,\n        11: 30,\n        12: 31\n    }\n    # check if the month number is in the dictionary\n    if monthnum2 in days_in_month.keys():\n        # return true if the month has 31 days\n        if days_in_month[monthnum2] == 31:\n            return True\n        else:\n            return False\n    else:\n        # return false if the month number is not in the dictionary\n        return False\n\n# test the function with a month number\nprint(check_monthnumb_number(7))  # True\nprint(check_monthnumb_number(2))  # False\nprint(check_monthnumb_number(1))  # True\nprint(check_monthnumb_number(13)) # False\n\n\n# Example of a function to check whether the input string is a palindrome or not\ndef check_palindrome(input_string):\n    # convert the string to lowercase and remove any non-alphabetic characters\n    input_string = ''.join",
        "generated_testcode": "assert check_monthnumb_number(1) == True\n",
        "test": "assert check_monthnumb_number(5)==True\nassert check_monthnumb_number(2)==False\nassert check_monthnumb_number(6)==False",
        "canonical_solution": "def check_monthnumb_number(monthnum2):\r\n  if(monthnum2==1 or monthnum2==3 or monthnum2==5 or monthnum2==7 or monthnum2==8 or monthnum2==10 or monthnum2==12):\r\n    return True\r\n  else:\r\n    return False"
    },
    {
        "number": 456,
        "prompt": "Write a function to reverse strings in a given list of string values.\ndef reverse_string_list(stringlist):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    new_list = []\n    for string in stringlist:\n        new_list.append(string[::-1])\n    return new_list\n\n# Test the function with an example list\nstringlist = [\"hello\", \"world\", \"python\"]\nprint(reverse_string_list(stringlist)) # Output: [\"olleh\", \"dlrow\", \"nohtyp\"]\n\n# Test the function with an empty list\nstringlist = []\nprint(reverse_string_list(stringlist)) # Output: []\n\n# Test the function with a single string\nstringlist = [\"hello\"]\nprint(reverse_string_list(stringlist)) # Output: [\"olleh\"] ",
        "generated_testcode": "assert reverse_string_list(['hello', 'world', 'python']) == ['olleh', 'dlrow', 'nohtyp']\n",
        "test": "assert reverse_string_list(['Red', 'Green', 'Blue', 'White', 'Black'])==['deR', 'neerG', 'eulB', 'etihW', 'kcalB']\nassert reverse_string_list(['john','amal','joel','george'])==['nhoj','lama','leoj','egroeg']\nassert reverse_string_list(['jack','john','mary'])==['kcaj','nhoj','yram']",
        "canonical_solution": "def reverse_string_list(stringlist):\r\n    result = [x[::-1] for x in stringlist]\r\n    return result"
    },
    {
        "number": 457,
        "prompt": "Write a python function to find the sublist having minimum length.\ndef Find_Min(lst): \n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    min_length = 99999999\n    sublist = []\n    for i in range(len(lst)): \n        for j in range(i + 1, len(lst) + 1): \n            if lst[i:j] < min_length: \n                min_length = lst[i:j] \n                sublist = lst[i:j] \n    return sublist \n\n# Example usage \nlst = [3, 5, 1, 2, 6, 7, 4, 8, 9, 10, 11, 12, 15] \nprint(\"Original list:\", lst) \nprint(\"Minimum Length Sublist:\", Find_Min(lst)) ",
        "generated_testcode": "assert Find_Min([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 1\n",
        "test": "assert Find_Min([[1],[1,2],[1,2,3]]) == [1]\nassert Find_Min([[1,1],[1,1,1],[1,2,7,8]]) == [1,1]\nassert Find_Min([['x'],['x','y'],['x','y','z']]) == ['x']",
        "canonical_solution": "def Find_Min(lst): \r\n    minList = min((x) for x in lst) \r\n    return minList"
    },
    {
        "number": 458,
        "prompt": "Write a function to find the area of a rectangle.\ndef rectangle_area(l,b):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    return l*b\n\n# Write a function to calculate the sum of a list of numbers.\ndef sum_of_list(numbers):\n    return sum(numbers)\n\n# Write a function to calculate the factorial of a number.\ndef factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)\n\n# Write a function to calculate the square of a number.\ndef square(n):\n    return n ** 2\n\n# Write a function to calculate the cube of a number.\ndef cube(n):\n    return n ** 3\n\n# Write a function to calculate the square root of a number.\ndef sqrt(n):\n    return n ** 0.5\n\n# Write a function to calculate the cube root of a number.\ndef cbrt(n):\n    return n ** (1/3)\n\n# Write a function to calculate the sum of first n natural numbers.\ndef sum_natural(n):\n    return n * (n+1) // 2\n\n# Write a function to find the area of a triangle.\ndef triangle_area(base,height):\n    return (base*height)/2\n\n# Write a function to find the area of a circle.\ndef circle_area(r):\n    return 3.14 * r ** 2\n\n# Write a function to find the circumference of a circle.\ndef circle_circumference(r):\n    return 2 * 3.14 * r",
        "generated_testcode": "assert rectangle_area(5, 10) == 50\n",
        "test": "assert rectangle_area(10,20)==200\nassert rectangle_area(10,5)==50\nassert rectangle_area(4,2)==8",
        "canonical_solution": "def rectangle_area(l,b):\r\n  area=l*b\r\n  return area"
    },
    {
        "number": 459,
        "prompt": "Write a function to remove uppercase substrings from a given string by using regex.\ndef remove_uppercase(str1):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    return re.sub(r'\\w*[A-Z]\\w*', '', str1)\n\nprint(remove_uppercase(\"Hello World\"))  # Output: \"Hello World\"\nprint(remove_uppercase(\"This is a TEST string\"))  # Output: \"This is a  string\"\nprint(remove_uppercase(\"Python 123 Java is awesome\"))  # Output: \"Python 123 Java is awesome\"\nprint(remove_uppercase(\"Python is awesome\"))  # Output: \"Python is awesome\" ",
        "generated_testcode": "assert remove_uppercase(\"HelloWorld\") == \"HW\"\n",
        "test": "assert remove_uppercase('cAstyoUrFavoRitETVshoWs') == 'cstyoravoitshos'\nassert remove_uppercase('wAtchTheinTernEtrAdIo') == 'wtchheinerntrdo'\nassert remove_uppercase('VoicESeaRchAndreComMendaTionS') == 'oiceachndreomendaion'",
        "canonical_solution": "import re\r\ndef remove_uppercase(str1):\r\n  remove_upper = lambda text: re.sub('[A-Z]', '', text)\r\n  result =  remove_upper(str1)\r\n  return (result)"
    },
    {
        "number": 460,
        "prompt": "Write a python function to get the first element of each sublist.\ndef Extract(lst): \n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    result = [] \n    for sublist in lst: \n        result.append(sublist[0]) \n    return result \n\n# Example usage: \nlst = [[1, 2, 3], [4, 5, 6], [7, 8, 9]] \nprint(Extract(lst)) # Output: [1, 4, 7] ",
        "generated_testcode": "assert Extract([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [1, 4, 7]\n",
        "test": "assert Extract([[1, 2], [3, 4, 5], [6, 7, 8, 9]]) == [1, 3, 6]\nassert Extract([[1,2,3],[4, 5]]) == [1,4]\nassert Extract([[9,8,1],[1,2]]) == [9,1]",
        "canonical_solution": "def Extract(lst): \r\n    return [item[0] for item in lst] "
    },
    {
        "number": 461,
        "prompt": "Write a python function to count the upper case characters in a given string.\ndef upper_ctr(str):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    count = 0\n    for i in str:\n        if i.isupper():\n            count += 1\n    return count\n\nprint(upper_ctr(\"Python is awesome\"))\n# Output: 2\nprint(upper_ctr(\"Hello World\"))\n# Output: 1\nprint(upper_ctr(\"HELLO WORLD\"))\n# Output: 5\nprint(upper_ctr(\"HELLO world\"))\n# Output: 0\n\n# Explanation: The function checks for upper case characters in the string and counts them. ",
        "generated_testcode": "assert upper_ctr(\"Hello World\") == 2\n",
        "test": "assert upper_ctr('PYthon') == 1\nassert upper_ctr('BigData') == 1\nassert upper_ctr('program') == 0",
        "canonical_solution": "def upper_ctr(str):\r\n    upper_ctr = 0\r\n    for i in range(len(str)):\r\n          if str[i] >= 'A' and str[i] <= 'Z': upper_ctr += 1\r\n          return upper_ctr"
    },
    {
        "number": 462,
        "prompt": "Write a function to find all possible combinations of the elements of a given list.\ndef combinations_list(list1):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    if len(list1) == 0:\n        return [[]]\n    if len(list1) == 1:\n        return [list1]\n    last_element = list1[-1]\n    rest = list1[:-1]\n    comb = combinations_list(rest)\n    new_comb = []\n    for c in comb:\n        new_comb.append(c)\n        new_comb.append(c + [last_element])\n    return new_comb\n\n\n# Example usage:\nlist1 = [1, 2, 3]\nprint(combinations_list(list1)) # Output: [[], [1], [2], [1, 2], [3], [1, 3], [2, 3], [1, 2, 3]]\n\n# Time Complexity: O(2^n)\n# Space Complexity: O(n) ",
        "generated_testcode": "assert combinations_list([1, 2, 3]) == [[1], [2], [3], [1, 2], [1, 3], [2, 3], [1, 2, 3]]\n",
        "test": "assert combinations_list(['orange', 'red', 'green', 'blue'])==[[], ['orange'], ['red'], ['red', 'orange'], ['green'], ['green', 'orange'], ['green', 'red'], ['green', 'red', 'orange'], ['blue'], ['blue', 'orange'], ['blue', 'red'], ['blue', 'red', 'orange'], ['blue', 'green'], ['blue', 'green', 'orange'], ['blue', 'green', 'red'], ['blue', 'green', 'red', 'orange']]\nassert combinations_list(['red', 'green', 'blue', 'white', 'black', 'orange'])==[[], ['red'], ['green'], ['green', 'red'], ['blue'], ['blue', 'red'], ['blue', 'green'], ['blue', 'green', 'red'], ['white'], ['white', 'red'], ['white', 'green'], ['white', 'green', 'red'], ['white', 'blue'], ['white', 'blue', 'red'], ['white', 'blue', 'green'], ['white', 'blue', 'green', 'red'], ['black'], ['black', 'red'], ['black', 'green'], ['black', 'green', 'red'], ['black', 'blue'], ['black', 'blue', 'red'], ['black', 'blue', 'green'], ['black', 'blue', 'green', 'red'], ['black', 'white'], ['black', 'white', 'red'], ['black', 'white', 'green'], ['black', 'white', 'green', 'red'], ['black', 'white', 'blue'], ['black', 'white', 'blue', 'red'], ['black', 'white', 'blue', 'green'], ['black', 'white', 'blue', 'green', 'red'], ['orange'], ['orange', 'red'], ['orange', 'green'], ['orange', 'green', 'red'], ['orange', 'blue'], ['orange', 'blue', 'red'], ['orange', 'blue', 'green'], ['orange', 'blue', 'green', 'red'], ['orange', 'white'], ['orange', 'white', 'red'], ['orange', 'white', 'green'], ['orange', 'white', 'green', 'red'], ['orange', 'white', 'blue'], ['orange', 'white', 'blue', 'red'], ['orange', 'white', 'blue', 'green'], ['orange', 'white', 'blue', 'green', 'red'], ['orange', 'black'], ['orange', 'black', 'red'], ['orange', 'black', 'green'], ['orange', 'black', 'green', 'red'], ['orange', 'black', 'blue'], ['orange', 'black', 'blue', 'red'], ['orange', 'black', 'blue', 'green'], ['orange', 'black', 'blue', 'green', 'red'], ['orange', 'black', 'white'], ['orange', 'black', 'white', 'red'], ['orange', 'black', 'white', 'green'], ['orange', 'black', 'white', 'green', 'red'], ['orange', 'black', 'white', 'blue'], ['orange', 'black', 'white', 'blue', 'red'], ['orange', 'black', 'white', 'blue', 'green'], ['orange', 'black', 'white', 'blue', 'green', 'red']]\nassert combinations_list(['red', 'green', 'black', 'orange'])==[[], ['red'], ['green'], ['green', 'red'], ['black'], ['black', 'red'], ['black', 'green'], ['black', 'green', 'red'], ['orange'], ['orange', 'red'], ['orange', 'green'], ['orange', 'green', 'red'], ['orange', 'black'], ['orange', 'black', 'red'], ['orange', 'black', 'green'], ['orange', 'black', 'green', 'red']]",
        "canonical_solution": "def combinations_list(list1):\r\n    if len(list1) == 0:\r\n        return [[]]\r\n    result = []\r\n    for el in combinations_list(list1[1:]):\r\n        result += [el, el+[list1[0]]]\r\n    return result"
    },
    {
        "number": 463,
        "prompt": "Write a function to find the maximum product subarray of the given array.\ndef max_subarray_product(arr):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    if len(arr) == 0:\n        return 0\n\n    max_product = arr[0]\n    min_product = arr[0]\n    result = arr[0]\n\n    for num in arr[1:]:\n        if num < 0:\n            max_product, min_product = min_product, max_product\n\n        max_product = max(num, max_product * num)\n        min_product = min(num, min_product * num)\n        result = max(result, max_product)\n\n    return result\n\n\n# Test cases\nprint(max_subarray_product([2, 3, -2, 4]))  # Output: 6\nprint(max_subarray_product([-2, 0, -1]))  # Output: 0\nprint(max_subarray_product([-2, 3, -4, -5, -6, 7, -8, -1, 8, -3, -5, -2, 4, 6]))  # Output: 11260\nprint(max_subarray_product([-2, 0, -1, 3, -4, 5, -6, -2, 3, -1, -5, 2, -4, 6]))  # Output: 120\nprint(max_subarray_product([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10",
        "generated_testcode": "assert max_subarray_product([-1, -2, 3, -4, 5, 2, -10, 7]) == 168\n",
        "test": "assert max_subarray_product([1, -2, -3, 0, 7, -8, -2]) == 112\nassert max_subarray_product([6, -3, -10, 0, 2]) == 180 \nassert max_subarray_product([-2, -40, 0, -2, -3]) == 80",
        "canonical_solution": "def max_subarray_product(arr):\r\n\tn = len(arr)\r\n\tmax_ending_here = 1\r\n\tmin_ending_here = 1\r\n\tmax_so_far = 0\r\n\tflag = 0\r\n\tfor i in range(0, n):\r\n\t\tif arr[i] > 0:\r\n\t\t\tmax_ending_here = max_ending_here * arr[i]\r\n\t\t\tmin_ending_here = min (min_ending_here * arr[i], 1)\r\n\t\t\tflag = 1\r\n\t\telif arr[i] == 0:\r\n\t\t\tmax_ending_here = 1\r\n\t\t\tmin_ending_here = 1\r\n\t\telse:\r\n\t\t\ttemp = max_ending_here\r\n\t\t\tmax_ending_here = max (min_ending_here * arr[i], 1)\r\n\t\t\tmin_ending_here = temp * arr[i]\r\n\t\tif (max_so_far < max_ending_here):\r\n\t\t\tmax_so_far = max_ending_here\r\n\tif flag == 0 and max_so_far == 0:\r\n\t\treturn 0\r\n\treturn max_so_far"
    },
    {
        "number": 464,
        "prompt": "Write a function to check if all values are same in a dictionary.\ndef check_value(dict, n):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    value_set = set(dict.values())\n    if len(value_set) == 1:\n        return True\n    return False\n\nmy_dict = {\"a\": 1, \"b\": 2, \"c\": 1, \"d\": 1, \"e\": 1}\nprint(check_value(my_dict, 1))  # Output: True\n\nmy_dict = {\"a\": 1, \"b\": 2, \"c\": 3, \"d\": 1, \"e\": 1}\nprint(check_value(my_dict, 1))  # Output: False\n\nmy_dict = {\"a\": 1, \"b\": 2, \"c\": 3, \"d\": 4, \"e\": 5}\nprint(check_value(my_dict, 1))  # Output: False\n\n# or in one line:\nprint(len(set(my_dict.values())) == 1)\n\n# or more concise\ndef check_value(dict, n):\n    return len(set(dict.values())) == 1\n\nmy_dict = {\"a\": 1, \"b\": 2, \"c\": 1, \"d\": 1, \"e\": 1}\nprint(check_value(my_dict, 1))  # Output: True\n\nmy_dict = {\"a\": 1, \"b\": 2, \"c\": 3, \"d\": 1, \"e\": 1}\nprint(check_value",
        "generated_testcode": "assert check_value({'a': 1, 'b': 1, 'c': 1}, 1) == True\n",
        "test": "assert check_value({'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12},10)==False\nassert check_value({'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12},12)==True\nassert check_value({'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12},5)==False",
        "canonical_solution": "def check_value(dict, n):\r\n    result = all(x == n for x in dict.values()) \r\n    return result"
    },
    {
        "number": 465,
        "prompt": "Write a function to drop empty items from a given dictionary.\ndef drop_empty(dict1):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    return {k: v for k, v in dict1.items() if v is not None and v != ''}\n\n\n# Test the function with an example\nprint(drop_empty({'a': '', 'b': 0, 'c': None, 'd': 1, 'e': 'hello', 'f': None, 'g': '', 'h': 0}))\n# Output: {'d': 1, 'e': 'hello'}\n\n# Test the function with an empty dictionary\nprint(drop_empty({}))\n# Output: {}\n\n# Test the function with a dictionary containing only empty items\nprint(drop_empty({'a': None, 'b': '', 'c': ''}))\n# Output: {} ",
        "generated_testcode": "assert drop_empty({'a': 1, 'b': 2, 'c': None, 'd': 3, 'e': None}) == {'a': 1, 'd': 3}\n",
        "test": "assert drop_empty({'c1': 'Red', 'c2': 'Green', 'c3':None})=={'c1': 'Red', 'c2': 'Green'}\nassert drop_empty({'c1': 'Red', 'c2': None, 'c3':None})=={'c1': 'Red'}\nassert drop_empty({'c1': None, 'c2': 'Green', 'c3':None})=={ 'c2': 'Green'}",
        "canonical_solution": "def drop_empty(dict1):\r\n  dict1 = {key:value for (key, value) in dict1.items() if value is not None}\r\n  return dict1"
    },
    {
        "number": 466,
        "prompt": "Write a function to find the peak element in the given array.\ndef find_peak_util(arr, low, high, n): \n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    if high == low: \n        return high \n  \n    if high == 1: \n        return 0 if (arr[0] > arr[1]) else 1\n  \n    mid = (low + high) // 2\n    if (arr[mid] > arr[mid - 1]) and (arr[mid] > arr[mid + 1]): \n        return mid \n  \n    elif arr[mid] < arr[mid - 1]: \n        return find_peak_util(arr, low, mid - 1, n) \n  \n    else: \n        return find_peak_util(arr, mid + 1, high, n) \n\ndef find_peak(arr, n): \n    return find_peak_util(arr, 0, n - 1, n) \n\narr = [1, 2, 3, 4, 5, 4, 3, 2, 1] \nn = len(arr) \nprint(\"Index of peak element is\", find_peak(arr, n)) ",
        "generated_testcode": "assert find_peak_util([1, 2, 3, 4, 5, 6, 7, 8, 9], 0, 6, 7) == 6\n",
        "test": "assert find_peak([1, 3, 20, 4, 1, 0], 6) == 2\nassert find_peak([2, 3, 4, 5, 6], 5) == 4\nassert find_peak([8, 9, 11, 12, 14, 15], 6) == 5 ",
        "canonical_solution": "def find_peak_util(arr, low, high, n): \r\n\tmid = low + (high - low)/2\r\n\tmid = int(mid) \r\n\tif ((mid == 0 or arr[mid - 1] <= arr[mid]) and\r\n\t\t(mid == n - 1 or arr[mid + 1] <= arr[mid])): \r\n\t\treturn mid \r\n\telif (mid > 0 and arr[mid - 1] > arr[mid]): \r\n\t\treturn find_peak_util(arr, low, (mid - 1), n) \r\n\telse: \r\n\t\treturn find_peak_util(arr, (mid + 1), high, n) \r\ndef find_peak(arr, n): \r\n\treturn find_peak_util(arr, 0, n - 1, n) "
    },
    {
        "number": 467,
        "prompt": "Write a python function to convert decimal number to octal number.\ndef decimal_to_Octal(deciNum):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": true,
        "answer": "    octal = \"\"\n    while deciNum > 0:\n        octal = str(deciNum % 8) + octal\n        deciNum = deciNum // 8\n    return octal\n\n# Test the function with a decimal number\nprint(decimal_to_Octal(10))  # Output: 2\nprint(decimal_to_Octal(20))  # Output: 32\nprint(decimal_to_Octal(26))  # Output: 34\n\n# Write a Python program to convert octal number to decimal number.\ndef octal_to_Decimal(octalNum):\n    decimal = 0\n    length = len(octalNum)\n    for i in range(length):\n        digit = int(octalNum[i])\n        decimal += digit * (8 ** (length - 1 - i) * 1)\n    return decimal\n\n# Test the function with an octal number\nprint(octal_to_Decimal('123'))  # Output: 83\nprint(octal_to_Decimal('237'))  # Output: 175\nprint(octal_to_Decimal('124'))  # Output: 84\n",
        "generated_testcode": "assert decimal_to_Octal(10) == '12'\n",
        "test": "assert decimal_to_Octal(10) == 12\nassert decimal_to_Octal(2) == 2\nassert decimal_to_Octal(33) == 41",
        "canonical_solution": "def decimal_to_Octal(deciNum):\r\n    octalNum = 0\r\n    countval = 1;\r\n    dNo = deciNum;\r\n    while (deciNum!= 0):\r\n        remainder= deciNum % 8;\r\n        octalNum+= remainder*countval;\r\n        countval= countval*10;\r\n        deciNum //= 8; \r\n    return (octalNum)"
    },
    {
        "number": 468,
        "prompt": "Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\ndef max_product(arr, n ): \n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    if n <= 2:\n        return max(arr[0], arr[1])\n    elif n == 3:\n        return max(arr[0]*arr[1], arr[0]*arr[2], arr[1]*arr[2])\n    max1 = max(arr[0], arr[1])\n    max2 = min(arr[0], arr[1])\n    max3 = arr[2]\n    ans = max1*max2*max3\n    min1 = min(arr[0], arr[1])\n    min2 = max(arr[0], arr[1])\n    for i in range(2, n):\n        if arr[i] < 0:\n            max1, max2, max3 = min1*arr[i], max1, max2\n            min1, min2 = min2, max1\n        else:\n            max1, max2, max3 = max(max1*arr[i], max2*arr[i], min1*arr[i]), max(max2*arr[i], max3, min1*arr[i])\n            min1, min2 = min(min1*arr[i], min2*arr[i], arr[i]), min(min2*arr[i], arr[i])\n        ans = max(ans, max1*max2*max3)\n    return ans\n\nif __name__ == '__main__': \n    arr = list(map(int, input(\"Enter the array elements: \"))\n    n",
        "generated_testcode": "assert max_product([1, 2, 3, 4, 5, 6, 7], 5) == 210\n",
        "test": "assert max_product([3, 100, 4, 5, 150, 6], 6) == 45000 \nassert max_product([4, 42, 55, 68, 80], 5) == 50265600\nassert max_product([10, 22, 9, 33, 21, 50, 41, 60], 8) == 21780000 ",
        "canonical_solution": "def max_product(arr, n ): \r\n\tmpis =[0] * (n) \r\n\tfor i in range(n): \r\n\t\tmpis[i] = arr[i] \r\n\tfor i in range(1, n): \r\n\t\tfor j in range(i): \r\n\t\t\tif (arr[i] > arr[j] and\r\n\t\t\t\t\tmpis[i] < (mpis[j] * arr[i])): \r\n\t\t\t\t\t\tmpis[i] = mpis[j] * arr[i] \r\n\treturn max(mpis)"
    },
    {
        "number": 469,
        "prompt": "Write a function to find the maximum profit earned from a maximum of k stock transactions\ndef max_profit(price, k):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    if not price or len(price) < k:\n        return 0\n\n    n = len(price)\n    if k > n // 2:\n        k = n // 2\n\n    # Initialize the profit array\n    profit = [[0 for _ in range(n)] for _ in range(k + 1)]\n\n    # Initialize the buy array\n    buy = [price[0] for _ in range(k + 1)]\n\n    # Initialize the sell array\n    for i in range(k + 1):\n        sell = [float('-inf') for _ in range(n)]\n\n    # Calculate the maximum profit for k transactions\n    for i in range(1, k + 1):\n        for j in range(1, n):\n            # Calculate the maximum profit for i transactions up to jth day\n            for m in range(j):\n                # Calculate the maximum profit for i-1 transactions up to (j-1)th day and sell on jth day\n                profit[i][j] = max(profit[i][j], price[j] - buy[i - 1])\n                # Calculate the maximum profit for i transactions up to jth day and buy on mth day\n                buy[i] = max(buy[i], sell[m] - price[j])\n                # Calculate the maximum profit for i transactions up to jth day and sell on jth day\n                sell[i] = max(sell[i], profit[i][j] + price[j",
        "generated_testcode": "assert max_profit([10, 22, 5, 75, 65, 30, 80], 2) == 87\n",
        "test": "assert max_profit([1, 5, 2, 3, 7, 6, 4, 5], 3) == 10\nassert max_profit([2, 4, 7, 5, 4, 3, 5], 2) == 7\nassert max_profit([10, 6, 8, 4, 2], 2) == 2",
        "canonical_solution": "def max_profit(price, k):\r\n    n = len(price)\r\n    final_profit = [[None for x in range(n)] for y in range(k + 1)]\r\n    for i in range(k + 1):\r\n        for j in range(n):\r\n            if i == 0 or j == 0:\r\n                final_profit[i][j] = 0\r\n            else:\r\n                max_so_far = 0\r\n                for x in range(j):\r\n                    curr_price = price[j] - price[x] + final_profit[i-1][x]\r\n                    if max_so_far < curr_price:\r\n                        max_so_far = curr_price\r\n                final_profit[i][j] = max(final_profit[i][j-1], max_so_far)\r\n    return final_profit[k][n-1]"
    },
    {
        "number": 470,
        "prompt": "Write a function to find the pairwise addition of the elements of the given tuples.\ndef add_pairwise(test_tup):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    result = []\n    for i in range(len(test_tup)):\n        for j in range(i+1, len(test_tup)):\n            result.append(test_tup[i] + test_tup[j])\n    return result\n\n# Test the function\ntest_tup = (1, 2, 3, 4, 5)\nprint(add_pairwise(test_tup))  # Output: [3, 4, 5, 6, 7, 5, 6, 7, 8, 9]\n\n\n# Define a function to find the pairwise subtraction of the elements of the given tuples.\ndef subtract_pairwise(test_tup):\n    result = []\n    for i in range(len(test_tup)):\n        for j in range(i+1, len(test_tup)):\n            result.append(test_tup[i] - test_tup[j])\n    return result\n\n# Test the function\ntest_tup = (1, 2, 3, 4, 5)\nprint(subtract_pairwise(test_tup))  # Output: [-1, -1, -2, -2, -1, -2, -3, -4]\n\n# Define a function to find the pairwise multiplication of the elements of the given tuples.\ndef multiply_pairwise(test_tup):\n    result = []\n    for i in range(len(",
        "generated_testcode": "assert add_pairwise((1, 2, 3, 4, 5) == (3, 5, 7, 9))\n",
        "test": "assert add_pairwise((1, 5, 7, 8, 10)) == (6, 12, 15, 18)\nassert add_pairwise((2, 6, 8, 9, 11)) == (8, 14, 17, 20)\nassert add_pairwise((3, 7, 9, 10, 12)) == (10, 16, 19, 22)",
        "canonical_solution": "def add_pairwise(test_tup):\r\n  res = tuple(i + j for i, j in zip(test_tup, test_tup[1:]))\r\n  return (res) "
    },
    {
        "number": 471,
        "prompt": "Write a python function to find remainder of array multiplication divided by n.\ndef find_remainder(arr, lens, n): \n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    res = 1\n    for i in range(lens):\n        res *= arr[i] \n        res = res % n\n    return res \n\n# Driver code \narr = [1, 2, 3, 4, 5] \nlens = len(arr) \nn = 7\nprint(\"Remainder is:\", find_remainder(arr, lens, n)) ",
        "generated_testcode": "assert find_remainder([1, 2, 3, 4, 5], 4, 2) == 0\n",
        "test": "assert find_remainder([ 100, 10, 5, 25, 35, 14 ],6,11) ==9\nassert find_remainder([1,1,1],3,1) == 0\nassert find_remainder([1,2,1],3,2) == 0",
        "canonical_solution": "def find_remainder(arr, lens, n): \r\n    mul = 1\r\n    for i in range(lens):  \r\n        mul = (mul * (arr[i] % n)) % n \r\n    return mul % n "
    },
    {
        "number": 472,
        "prompt": "Write a python function to check whether the given list contains consecutive numbers or not.\ndef check_Consecutive(l): \n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    l.sort()\n    for i in range(len(l)-1): \n        if (l[i+1] - l[i]) != 1: \n            return False\n    return True\n\n# Testing the function\nl1 = [1, 2, 3, 4, 5, 6, 7]\nl2 = [1, 3, 4, 5, 7]\nprint(check_Consecutive(l1)) # Output: True\nprint(check_Consecutive(l2)) # Output: False\n",
        "generated_testcode": "assert check_Consecutive([1, 2, 3, 4, 5, 6, 7]) == True\n",
        "test": "assert check_Consecutive([1,2,3,4,5]) == True\nassert check_Consecutive([1,2,3,5,6]) == False\nassert check_Consecutive([1,2,1]) == False",
        "canonical_solution": "def check_Consecutive(l): \r\n    return sorted(l) == list(range(min(l),max(l)+1)) "
    },
    {
        "number": 473,
        "prompt": "Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\ndef tuple_intersection(test_list1, test_list2):\n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    result = set(test_list1).intersection(set(test_list2))\n    return tuple(result)\n\n\n# Example usage:\nlist1 = (1, 2, 3, 4, 5)\nlist2 = (3, 4, 5, 6, 7)\nprint(tuple_intersection(list1, list2))  # Output: (3, 4, 5)\n\nlist1 = (1, 2, 3, 4, 5)\nlist2 = (5, 6, 7, 8)\nprint(tuple_intersection(list1, list2))  # Output: ()\n\nlist1 = (1, 2, 3, 4, 5)\nlist2 = (1, 2, 3, 4, 5)\nprint(tuple_intersection(list1, list2))  # Output: (1, 2, 3, 4, 5)\n\nlist1 = (1, 2, 3, 4, 5)\nlist2 = (5, 4, 3, 2, 1)\nprint(tuple_intersection(list1, list2))  # Output: (1, 2, 3, 4, 5) ",
        "generated_testcode": "assert tuple_intersection((1, 2, 3), (2, 3, 4)) == (2, 3)\n",
        "test": "assert tuple_intersection([(3, 4), (5, 6), (9, 10), (4, 5)] , [(5, 4), (3, 4), (6, 5), (9, 11)]) == {(4, 5), (3, 4), (5, 6)}\nassert tuple_intersection([(4, 1), (7, 4), (11, 13), (17, 14)] , [(1, 4), (7, 4), (16, 12), (10, 13)]) == {(4, 7), (1, 4)}\nassert tuple_intersection([(2, 1), (3, 2), (1, 3), (1, 4)] , [(11, 2), (2, 3), (6, 2), (1, 3)]) == {(1, 3), (2, 3)}",
        "canonical_solution": "def tuple_intersection(test_list1, test_list2):\r\n  res = set([tuple(sorted(ele)) for ele in test_list1]) & set([tuple(sorted(ele)) for ele in test_list2])\r\n  return (res)"
    },
    {
        "number": 474,
        "prompt": "Write a function to replace characters in a string.\ndef replace_char(str1,ch,newch):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    str2 = \"\"\n    for i in str1:\n        if i == ch:\n            str2 += newch\n        else:\n            str2 += i\n    return str2\n\nprint(replace_char(\"hello world\",'l','L')) # \"heLLo worLd\"\nprint(replace_char(\"Python is awesome\",\"n\",\"z\")) # \"PyThon iz awesomz\"\nprint(replace_char(\"hello world\",\" \",\"_\")) # \"hell_world\"\n\n# Here we are looping through each character in the string str1 and if the character matches the character to be replaced, we are replacing it with the new character. ",
        "generated_testcode": "assert replace_char(\"hello world\", \"o\", \"0\") == \"hell0 w0rld\"\n",
        "test": "assert replace_char(\"polygon\",'y','l')==(\"pollgon\")\nassert replace_char(\"character\",'c','a')==(\"aharaater\")\nassert replace_char(\"python\",'l','a')==(\"python\")",
        "canonical_solution": "def replace_char(str1,ch,newch):\r\n str2 = str1.replace(ch, newch)\r\n return str2"
    },
    {
        "number": 475,
        "prompt": "Write a function to sort counter by value.\ndef sort_counter(dict1):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    dict2 = {}\n    for key in dict1:\n        dict2[key] = sorted(dict1[key])\n    sorted_dict = {}\n    for key in sorted(dict2, key=lambda x: dict2[x], reverse=True):\n        sorted_dict[key] = dict2[key]\n    return sorted_dict\n\n\n# Test the function\ndict1 = {'apple': [2, 3, 1, 4, 5], 'banana': [2, 3, 5, 1], 'orange': [3, 2, 1]}\nprint(sort_counter(dict1))  # {'apple': [5, 4, 3, 2, 1], 'banana': [5, 3, 2, 1], 'orange': [3, 2, 1]}\n\n\n\n# Write a function to find the number of unique values in a list.\ndef count_unique(lst):\n    count = 0\n    for i in range(len(lst)):\n        if lst.count(lst[i]) == 1:\n            count += 1\n    return count\n\n\n# Test the function\nlst = [1, 2, 2, 3, 3, 3, 4, 5]\nprint(count_unique(lst))  # 3\n\n\n\n# Write a function to create a dictionary from two lists.\ndef create_dict(keys, values):\n    return dict(zip(keys, values))\n",
        "generated_testcode": "assert sort_counter(Counter({'a': 3, 'b': 2, 'c': 1, 'd': 4, 'e': 1}) == Counter({'e': 1, 'c': 1, 'a': 3, 'b': 2, 'd': 4})\n",
        "test": "assert sort_counter({'Math':81, 'Physics':83, 'Chemistry':87})==[('Chemistry', 87), ('Physics', 83), ('Math', 81)]\nassert sort_counter({'Math':400, 'Physics':300, 'Chemistry':250})==[('Math', 400), ('Physics', 300), ('Chemistry', 250)]\nassert sort_counter({'Math':900, 'Physics':1000, 'Chemistry':1250})==[('Chemistry', 1250), ('Physics', 1000), ('Math', 900)]",
        "canonical_solution": "from collections import Counter\r\ndef sort_counter(dict1):\r\n x = Counter(dict1)\r\n sort_counter=x.most_common()\r\n return sort_counter"
    },
    {
        "number": 476,
        "prompt": "Write a python function to find the sum of the largest and smallest value in a given array.\ndef big_sum(nums):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    if len(nums) == 0:\n        return None\n    elif len(nums) == 1:\n        return nums[0]\n    elif len(nums) == 2:\n        return (nums[0], nums[1])\n    else:\n        min_value = nums[0]\n        max_value = nums[0]\n        for num in nums:\n            if num < min_value:\n                min_value = num\n            if num > max_value:\n                max_value = num\n        return (max_value, min_value)\n\n# Test cases\nprint(big_sum([]))  # None\nprint(big_sum([10, 5, 3, 8, -5, 20, -100, 25, 100, 15]) == (100, -100))\nprint(big_sum([1]) == 1)\nprint(big_sum([1, 2]) == (1, 2)) ",
        "generated_testcode": "assert big_sum([1, 2, 3, 4, 5, 6, 7, 8, 9]) == (45, 1)\n",
        "test": "assert big_sum([1,2,3]) == 4\nassert big_sum([-1,2,3,4]) == 3\nassert big_sum([2,3,6]) == 8",
        "canonical_solution": "def big_sum(nums):\r\n      sum= max(nums)+min(nums)\r\n      return sum"
    },
    {
        "number": 477,
        "prompt": "Write a python function to convert the given string to lower case.\ndef is_lower(string):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    if string.islower():\n        return True\n    else:\n        return False\n\n#Test cases\nprint(is_lower(\"Python\"))  # Output: True\nprint(is_lower(\"PYTHON\")) # Output: False\nprint(is_lower(\"HELLo\")) # Output: False\nprint(is_lower(\"hello\")) # Output: True\nprint(is_lower(\"\"))     # Output: True ",
        "generated_testcode": "assert is_lower(\"HELLO\") == \"hello\"\n",
        "test": "assert is_lower(\"InValid\") == \"invalid\"\nassert is_lower(\"TruE\") == \"true\"\nassert is_lower(\"SenTenCE\") == \"sentence\"",
        "canonical_solution": "def is_lower(string):\r\n  return (string.lower())"
    },
    {
        "number": 478,
        "prompt": "Write a function to remove lowercase substrings from a given string.\ndef remove_lowercase(str1):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    # Your code goes here\n    result = \"\"\n    temp = \"\"\n    for i in str1:\n        if i.isupper():\n            temp += i\n        else:\n            if temp:\n                result += temp\n                temp = \"\"\n    if temp:\n        result += temp\n    return result\n\n# Example usage:\nprint(remove_lowercase(\"HelloWorld\")) # Output: \"HW\"\nprint(remove_lowercase(\"helloWorld\")) # Output: \"\"\nprint(remove_lowercase(\"HELLOworld\")) # Output: \"HE\"\nprint(remove_lowercase(\"helloWorldWorld\")) # Output: \"HW\"\nprint(remove_lowercase(\"HELLO\")) # Output: \"HE\"\nprint(remove_lowercase(\"HELLOhelloWORLD\")) # Output: \"HW\" ",
        "generated_testcode": "assert remove_lowercase(\"Hello World\") == \"HW\"\n",
        "test": "assert remove_lowercase(\"PYTHon\")==('PYTH')\nassert remove_lowercase(\"FInD\")==('FID')\nassert remove_lowercase(\"STRinG\")==('STRG')",
        "canonical_solution": "import re\r\ndef remove_lowercase(str1):\r\n remove_lower = lambda text: re.sub('[a-z]', '', text)\r\n result =  remove_lower(str1)\r\n return result"
    },
    {
        "number": 479,
        "prompt": "Write a python function to find the first digit of a given number.\ndef first_Digit(n) :  \n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    while n >= 10:  \n        n //= 10  \n    return n  \n  \n# Function to find the last digit of a given number  \ndef last_Digit(n) :  \n    return n % 10  \n  \n# Function to find the middle digit of a given number  \ndef middle_Digit(n) :  \n    length = len(str(n) )  \n    if length % 2 == 0:  \n        mid = length // 2  \n        mid1 = n // 10**(mid - 1)  \n        mid2 = mid1 % 10  \n        mid1 = n // 10**(mid )  \n        mid2 = mid1 % 10  \n        return (mid1 + mid2) // 2  \n    else:  \n        mid = length // 2  \n        return n // 10**(mid)  \n  \n# Driver code  \nn = 12345  \nprint(\"First digit of\", n, \"is\", first_Digit(n))  \nprint(\"Last digit of\", n, \"is\", last_Digit(n))  \nprint(\"Middle digit of\", n, \"is\", middle_Digit(n)) ",
        "generated_testcode": "assert first_Digit(12345) == 1\n",
        "test": "assert first_Digit(123) == 1\nassert first_Digit(456) == 4\nassert first_Digit(12) == 1",
        "canonical_solution": "def first_Digit(n) :  \r\n    while n >= 10:  \r\n        n = n / 10; \r\n    return int(n) "
    },
    {
        "number": 480,
        "prompt": "Write a python function to find the maximum occurring character in a given string.\ndef get_max_occuring_char(str1):\n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    # Convert the string to lowercase\n    str1 = str1.lower()\n    # Create a dictionary to keep track of character and its count\n    char_dict = {}\n    # Iterate over the string\n    for char in str1:\n        if char in char_dict:\n            char_dict[char] += 1\n        else:\n            char_dict[char] = 1\n    # Find the character with maximum count\n    max_char = max(char_dict, key=char_dict.get)\n    return max_char\n\n# Test the function\nprint(get_max_occuring_char(\"Python\"))\n# Output: \"t\"\nprint(get_max_occuring_char(\"Hello World\"))\n# Output: \"l\"\nprint(get_max_occuring_char(\"aabbccddeeff\"))\n# Output: \"a\"\nprint(get_max_occuring_char(\"qwertyuiopasdfghjklzxcvbnm\"))\n# Output: \"q\"\n\n# Time Complexity: O(n)\n# Space Complexity: O(1) ",
        "generated_testcode": "assert get_max_occuring_char(\"hello\") == \"l\"\n",
        "test": "assert get_max_occuring_char(\"data\") == \"a\"\nassert get_max_occuring_char(\"create\") == \"e\"\nassert get_max_occuring_char(\"brilliant girl\") == \"i\"",
        "canonical_solution": "def get_max_occuring_char(str1):\r\n  ASCII_SIZE = 256\r\n  ctr = [0] * ASCII_SIZE\r\n  max = -1\r\n  ch = ''\r\n  for i in str1:\r\n    ctr[ord(i)]+=1;\r\n  for i in str1:\r\n    if max < ctr[ord(i)]:\r\n      max = ctr[ord(i)]\r\n      ch = i\r\n  return ch"
    },
    {
        "number": 481,
        "prompt": "Write a function to determine if there is a subset of the given set with sum equal to the given sum.\ndef is_subset_sum(set, n, sum):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    if sum == 0:\n        return True\n    if n == 0 and sum != 0:\n        return False\n    if sum < 0:\n        return False\n    return is_subset_sum(set, n - 1, sum) or is_subset_sum(set, n - 1, sum - set[n - 1])\n\n\n\ndef main():\n    set = [3, 34, 4, 12, 5, 2, 11, 1, 100, 15]\n    sum = 9\n    n = len(set)\n    if is_subset_sum(set, n, sum):\n        print(\"There exists a subset with sum equal to\", sum)\n    else:\n        print(\"No subset exists with sum equal to\", sum)\n\n\n\nif __name__ == \"__main__\":\n    main()\n",
        "generated_testcode": "assert is_subset_sum([1, 2, 3, 4, 5, 6], 9) == True\n",
        "test": "assert is_subset_sum([3, 34, 4, 12, 5, 2], 6, 9) == True\nassert is_subset_sum([3, 34, 4, 12, 5, 2], 6, 30) == False\nassert is_subset_sum([3, 34, 4, 12, 5, 2], 6, 15) == True",
        "canonical_solution": "def is_subset_sum(set, n, sum):\r\n\tif (sum == 0):\r\n\t\treturn True\r\n\tif (n == 0):\r\n\t\treturn False\r\n\tif (set[n - 1] > sum):\r\n\t\treturn is_subset_sum(set, n - 1, sum)\r\n\treturn is_subset_sum(set, n-1, sum) or is_subset_sum(set, n-1, sum-set[n-1])"
    },
    {
        "number": 482,
        "prompt": "Write a function to find sequences of one upper case letter followed by lower case letters in the given string by using regex.\ndef match(text): \n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    pattern = re.compile(r'[A-Z][a-z]+')\n    result = pattern.findall(text)\n    return result\n\n# Example usage:\nprint(match(\"Python is an interpreted high-level programming language\")) # Output: ['Python', 'is', 'an', 'interpreted', 'high-level', 'programming', 'language']\nprint(match(\"AppleBanana\")) # Output: []\nprint(match(\"A sentence with CamelCase\")) # Output: ['CamelCase']\n```\n\nThis function uses a regular expression pattern to find all sequences of one upper case letter followed by one or more lower case letters in the given string. The `findall()` method is used to return all the matches as a list of strings. ",
        "generated_testcode": "assert match(\"Hello world\") == True\n",
        "test": "assert match(\"Geeks\") == 'Yes'\nassert match(\"geeksforGeeks\") == 'Yes'\nassert match(\"geeks\") == 'No'",
        "canonical_solution": "import re \r\ndef match(text): \r\n\t\tpattern = '[A-Z]+[a-z]+$'\r\n\t\tif re.search(pattern, text): \r\n\t\t\t\treturn('Yes') \r\n\t\telse: \r\n\t\t\t\treturn('No') "
    },
    {
        "number": 483,
        "prompt": "Write a python function to find the first natural number whose factorial is divisible by x.\ndef first_Factorial_Divisible_Number(x): \n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    n = 1\n    while 1:\n        if x % factorial(n) == 0:\n            return n\n        n += 1\n\n# Driver code\nx = 100\nprint(first_Factorial_Divisible_Number(x)) ",
        "generated_testcode": "assert first_Factorial_Divisible_Number(10) == 6\n",
        "test": "assert first_Factorial_Divisible_Number(10) == 5\nassert first_Factorial_Divisible_Number(15) == 5\nassert first_Factorial_Divisible_Number(5) == 4",
        "canonical_solution": "def first_Factorial_Divisible_Number(x): \r\n    i = 1;\r\n    fact = 1; \r\n    for i in range(1,x): \r\n        fact = fact * i \r\n        if (fact % x == 0): \r\n            break\r\n    return i "
    },
    {
        "number": 484,
        "prompt": "Write a function to remove the matching tuples from the given two tuples.\ndef remove_matching_tuple(test_list1, test_list2):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    # loop through the first list\n    for i in test_list1:\n        # loop through the second list\n        for j in test_list2:\n            # check if the first item in the tuple from list1 is equal to the first item in the tuple from list2\n            if i[0] == j[0]:\n                # if true, remove the tuple from list1\n                test_list1.remove(i)\n    # return the updated list\n    return test_list1\n\n\n# test the function\ntest_list1 = [(1, 2, 3), (4, 5, 6), (7, 8, 9), (10, 11, 12)]\ntest_list2 = [(4, 5, 6), (7, 8, 9)]\nprint(remove_matching_tuple(test_list1, test_list2))\n\n# Output: [(1, 2, 3), (10, 11, 12)] ",
        "generated_testcode": "assert remove_matching_tuple(test_list1, test_list2) == [(1, 2, 3), (4, 5, 6)]\n\n# The function should return [(1, 2, 3), (4, 5, 6)] as the output. ",
        "test": "assert remove_matching_tuple([('Hello', 'dude'), ('How', 'are'), ('you', '?')], [('Hello', 'dude'), ('How', 'are')]) == [('you', '?')]\nassert remove_matching_tuple([('Part', 'of'), ('the', 'journey'), ('is ', 'end')], [('Journey', 'the'), ('is', 'end')]) == [('Part', 'of'), ('the', 'journey'), ('is ', 'end')]\nassert remove_matching_tuple([('Its', 'been'), ('a', 'long'), ('day', 'without')], [('a', 'long'), ('my', 'friend')]) == [('Its', 'been'), ('day', 'without')]",
        "canonical_solution": "def remove_matching_tuple(test_list1, test_list2):\r\n  res = [sub for sub in test_list1 if sub not in test_list2]\r\n  return (res) "
    },
    {
        "number": 485,
        "prompt": "Write a function to find the largest palindromic number in the given array.\ndef is_palindrome(n) : \n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    num = str(n)\n    return num == num[::-1]\n\ndef largest_palindrome(arr):\n    max_num = -1\n    for num in arr:\n        if is_palindrome(num) and num > max_num:\n            max_num = num\n    return max_num\n\narr = [1232, 4567, 8978, 2342, 123, 8989, 9988, 12121]\nprint(largest_palindrome(arr)) # Output: 9988\n\n# Complexity Analysis\n# Time Complexity: O(n)\n# Space Complexity: O(1) ",
        "generated_testcode": "assert is_palindrome(12321) == True\n",
        "test": "assert largest_palindrome([1, 232, 54545, 999991], 4) == 54545\nassert largest_palindrome([1, 2, 3, 4, 5, 50], 6) == 5\nassert largest_palindrome([1, 3, 7, 9, 45], 5)  == 9",
        "canonical_solution": "def is_palindrome(n) : \r\n\tdivisor = 1\r\n\twhile (n / divisor >= 10) : \r\n\t\tdivisor *= 10\r\n\twhile (n != 0) : \r\n\t\tleading = n // divisor \r\n\t\ttrailing = n % 10\r\n\t\tif (leading != trailing) : \r\n\t\t\treturn False\r\n\t\tn = (n % divisor) // 10\r\n\t\tdivisor = divisor // 100\r\n\treturn True\r\ndef largest_palindrome(A, n) : \r\n\tA.sort() \r\n\tfor i in range(n - 1, -1, -1) : \r\n\t\tif (is_palindrome(A[i])) : \r\n\t\t\treturn A[i] \r\n\treturn -1"
    },
    {
        "number": 486,
        "prompt": "Write a function to compute binomial probability for the given number.\ndef nCr(n, r): \n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": true,
        "answer": "    if n < 0 or r < 0 or n < r: \n        return None\n    else: \n        return math.factorial(n) // (math.factorial(r) * math.factorial(n-r)) \n\ndef binomial_probability(n, p, q): \n    return nCr(n, n-1) * (p ** (n-1) * q ** 1) ",
        "generated_testcode": "assert nCr(5, 3) == 10\n",
        "test": "assert binomial_probability(10, 5, 1.0/3) == 0.13656454808718185\nassert binomial_probability(11, 6, 2.0/4) == 0.2255859375\nassert binomial_probability(12, 7, 3.0/5) == 0.227030335488",
        "canonical_solution": "def nCr(n, r): \r\n\tif (r > n / 2): \r\n\t\tr = n - r \r\n\tanswer = 1 \r\n\tfor i in range(1, r + 1): \r\n\t\tanswer *= (n - r + i) \r\n\t\tanswer /= i \r\n\treturn answer \r\ndef binomial_probability(n, k, p): \r\n\treturn (nCr(n, k) * pow(p, k) *\tpow(1 - p, n - k)) "
    },
    {
        "number": 487,
        "prompt": "Write a function to sort a list of tuples in increasing order by the last element in each tuple.\ndef sort_tuple(tup): \n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    return sorted(tup, key=lambda x: x[2])\n\n# Test the function with an example\nprint(sort_tuple([(1, 2, 3), (5, 1, 2), (4, 6, 1), (7, 3, 4)])) \n# Output: [(5, 1, 2), (4, 6, 1), (1, 2, 3), (7, 3, 4)]\n\n# Example usage:\na = [(1, 2, 3), (5, 1, 2), (4, 6, 1), (7, 3, 4)]\nprint(sort_tuple(a)) ",
        "generated_testcode": "assert sort_tuple([(1, 2, 3), (4, 5, 6), (7, 8, 9), (10, 11, 12)] ) == [(7, 8, 9), (4, 5, 6), (1, 2, 3), (10, 11, 12)]\n",
        "test": "assert sort_tuple([(1, 3), (3, 2), (2, 1)] ) == [(2, 1), (3, 2), (1, 3)]\nassert sort_tuple([(2, 4), (3, 3), (1, 1)] ) == [(1, 1), (3, 3), (2, 4)]\nassert sort_tuple([(3, 9), (6, 7), (4, 3)] ) == [(4, 3), (6, 7), (3, 9)]",
        "canonical_solution": "def sort_tuple(tup): \r\n\tlst = len(tup) \r\n\tfor i in range(0, lst): \r\n\t\tfor j in range(0, lst-i-1): \r\n\t\t\tif (tup[j][-1] > tup[j + 1][-1]): \r\n\t\t\t\ttemp = tup[j] \r\n\t\t\t\ttup[j]= tup[j + 1] \r\n\t\t\t\ttup[j + 1]= temp \r\n\treturn tup"
    },
    {
        "number": 488,
        "prompt": "Write a function to find the area of a pentagon.\ndef area_pentagon(a):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    # Define the length of each side of the pentagon.\n    side = a\n    # Calculate the area using the formula for a polygon with 5 sides.\n    area = 5 * side * side * (3 ** 0.5) / 4\n    # Return the area.\n    return area\n\n# Test the function with a side length of 5.\nprint(area_pentagon(5))  # Output: 15.708",
        "generated_testcode": "assert area_pentagon(5) == 50.0\n",
        "test": "assert area_pentagon(5)==43.01193501472417\nassert area_pentagon(10)==172.0477400588967\nassert area_pentagon(15)==387.10741513251753",
        "canonical_solution": "import math\r\ndef area_pentagon(a):\r\n  area=(math.sqrt(5*(5+2*math.sqrt(5)))*pow(a,2))/4.0\r\n  return area"
    },
    {
        "number": 489,
        "prompt": "Write a python function to find the frequency of the largest value in a given array.\ndef frequency_Of_Largest(n,arr): \n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    max_val = max(arr) \n    count = 0\n    for i in range(n): \n        if arr[i] == max_val: \n            count = count + 1\n    return count \n\n# take input of the size of array and elements of the array \nn = int(input(\"Enter the size of array: \")) \narr = [] \nprint(\"Enter the elements of the array: \") \nfor i in range(n): \n    arr.append(int(input()) ) \n\n# call the function to find the frequency of largest element \nfreq = frequency_Of_Largest(n,arr) \nprint(\"Frequency of largest element is:\", freq) \n\n# sample input and output \n# Input: Enter the size of array: 6\n# Enter the elements of the array:\n# 5 4 4 4 2 5 5 \n# Output: Frequency of largest element is: 2 ",
        "generated_testcode": "assert frequency_Of_Largest(5,[1,2,3,4,5,5,5,5,5,5,5,5,5,6,7,8,9]) == 5\n",
        "test": "assert frequency_Of_Largest(5,[1,2,3,4,4]) == 2\nassert frequency_Of_Largest(3,[5,6,5]) == 1\nassert frequency_Of_Largest(4,[2,7,7,7]) == 3",
        "canonical_solution": "def frequency_Of_Largest(n,arr): \r\n    mn = arr[0] \r\n    freq = 1\r\n    for i in range(1,n): \r\n        if (arr[i] >mn): \r\n            mn = arr[i] \r\n            freq = 1\r\n        elif (arr[i] == mn): \r\n            freq += 1\r\n    return freq "
    },
    {
        "number": 490,
        "prompt": "Write a function to extract all the pairs which are symmetric in the given tuple list.\ndef extract_symmetric(test_list):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    symmetric_pairs = []\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j][::-1]:\n                symmetric_pairs.append((test_list[i], test_list[j]))\n    return symmetric_pairs\n\n# Test the function with the example input\ntest_list = ['racecar', 'level', 'civic', 'deified', '12321']\nprint(extract_symmetric(test_list))\n\n# Output: [('racecar', 'racecar'), ('level', 'level'), ('civic', 'ivicc'), ('deified', 'didfe')]\n\n# Test the function with an empty list\ntest_list = []\nprint(extract_symmetric(test_list))\n# Output: [] ",
        "generated_testcode": "assert extract_symmetric(()) == []\n",
        "test": "assert extract_symmetric([(6, 7), (2, 3), (7, 6), (9, 8), (10, 2), (8, 9)] ) == {(8, 9), (6, 7)}\nassert extract_symmetric([(7, 8), (3, 4), (8, 7), (10, 9), (11, 3), (9, 10)] ) == {(9, 10), (7, 8)}\nassert extract_symmetric([(8, 9), (4, 5), (9, 8), (11, 10), (12, 4), (10, 11)] ) == {(8, 9), (10, 11)}",
        "canonical_solution": "def extract_symmetric(test_list):\r\n  temp = set(test_list) & {(b, a) for a, b in test_list}\r\n  res = {(a, b) for a, b in temp if a < b}\r\n  return (res) "
    },
    {
        "number": 491,
        "prompt": "Write a function to find the sum of geometric progression series.\ndef sum_gp(a,n,r):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    if n==1:\n        return a\n    else:\n        return a+(n-1)*r + sum_gp(a,n-1,r)\n\ndef main():\n    a = float(input(\"Enter the first term of GP: \"))\n    r = float(input(\"Enter the common ratio: \"))\n    n = int(input(\"Enter the number of terms: \"))\n    print(\"The sum of GP is:\", sum_gp(a,n,r))\n\nmain()\n\n#Example Output\n#Enter the first term of GP: 2\n#Enter the common ratio: 2\n#Enter the number of terms: 5\n#The sum of GP is: 42.0\n#Time Complexity: O(n)\n#Space Complexity: O(n)\n\n#Enter the first term of GP: 2\n#Enter the common ratio: 2\n#Enter the number of terms: 10\n#The sum of GP is: 102.0\n#Time Complexity: O(n)\n#Space Complexity: O(n) ",
        "generated_testcode": "assert sum_gp(1,5,2) == 32\n",
        "test": "assert sum_gp(1,5,2)==31\nassert sum_gp(1,5,4)==341\nassert sum_gp(2,6,3)==728",
        "canonical_solution": "import math\r\ndef sum_gp(a,n,r):\r\n total = (a * (1 - math.pow(r, n ))) / (1- r)\r\n return total"
    },
    {
        "number": 492,
        "prompt": "Write a function to search an element in the given array by using binary search.\ndef binary_search(item_list,item):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    first = 0\n    last = len(item_list) - 1\n    found = False\n\n    while first <= last and not found:\n        mid = (first + last) // 2\n        if item_list[mid] == item:\n            found = True\n        else:\n            if item < item_list[mid]:\n                last = mid - 1\n            else:\n                first = mid + 1\n\n    return found\n\n# Testing\narr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nprint(binary_search(arr, 7))  # Output: True\nprint(binary_search(arr, 12))  # Output: False\n\n# Time Complexity: O(log n)\n# Space Complexity: O(1) ",
        "generated_testcode": "assert binary_search([1,2,3,4,5,6,7,8,9],5) == 3\n",
        "test": "assert binary_search([1,2,3,5,8], 6) == False\nassert binary_search([7, 8, 9, 10, 13], 10) == True\nassert binary_search([11, 13, 14, 19, 22, 36], 23) == False",
        "canonical_solution": "def binary_search(item_list,item):\r\n\tfirst = 0\r\n\tlast = len(item_list)-1\r\n\tfound = False\r\n\twhile( first<=last and not found):\r\n\t\tmid = (first + last)//2\r\n\t\tif item_list[mid] == item :\r\n\t\t\tfound = True\r\n\t\telse:\r\n\t\t\tif item < item_list[mid]:\r\n\t\t\t\tlast = mid - 1\r\n\t\t\telse:\r\n\t\t\t\tfirst = mid + 1\t\r\n\treturn found"
    },
    {
        "number": 493,
        "prompt": "Write a function to calculate a grid of hexagon coordinates where function returns a list of lists containing 6 tuples of x, y point coordinates.\ndef calculate_polygons(startx, starty, endx, endy, radius):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    # initialize variables\n    center_x, center_y = (startx, starty)\n    hexagon_coords = []\n    i = 0\n    # calculate the coordinates for the first hexagon\n    for y in range(starty, endy + 1, radius):\n        for x in range(startx, endx + 1, radius):\n            hexagon_coords.append((x, y))\n        if i % 2 == 0:\n            hexagon_coords.append((endx, y + radius))\n        else:\n            hexagon_coords.append((startx, y + radius))\n        i += 1\n    return hexagon_coords\n\n# print the hexagon coordinates\nprint(calculate_polygons(0, 0, 10, 10, 1))\nprint(calculate_polygons(0, 0, 10, 10, 2))\nprint(calculate_polygons(0, 0, 10, 10, 3))\nprint(calculate_polygons(0, 0, 10, 10, 4))\n",
        "generated_testcode": "assert calculate_polygons(0, 0, 10, 10, 2) == [[(0, 0), (2, 0), (4, 2), (6, 2), (8, 0), (10, 0), (8, -2), (6, -2), (4, -2), (2, 0), (0, 0)]]\n",
        "test": "assert calculate_polygons(1,1, 4, 4, 3)==[[(-5.0, -4.196152422706632), (-5.0, -0.7320508075688767), (-2.0, 1.0), (1.0, -0.7320508075688767), (1.0, -4.196152422706632), (-2.0, -5.928203230275509), (-5.0, -4.196152422706632)], [(1.0, -4.196152422706632), (1.0, -0.7320508075688767), (4.0, 1.0), (7.0, -0.7320508075688767), (7.0, -4.196152422706632), (4.0, -5.928203230275509), (1.0, -4.196152422706632)], [(7.0, -4.196152422706632), (7.0, -0.7320508075688767), (10.0, 1.0), (13.0, -0.7320508075688767), (13.0, -4.196152422706632), (10.0, -5.928203230275509), (7.0, -4.196152422706632)], [(-2.0, 1.0000000000000004), (-2.0, 4.464101615137755), (1.0, 6.196152422706632), (4.0, 4.464101615137755), (4.0, 1.0000000000000004), (1.0, -0.7320508075688767), (-2.0, 1.0000000000000004)], [(4.0, 1.0000000000000004), (4.0, 4.464101615137755), (7.0, 6.196152422706632), (10.0, 4.464101615137755), (10.0, 1.0000000000000004), (7.0, -0.7320508075688767), (4.0, 1.0000000000000004)], [(-5.0, 6.196152422706632), (-5.0, 9.660254037844387), (-2.0, 11.392304845413264), (1.0, 9.660254037844387), (1.0, 6.196152422706632), (-2.0, 4.464101615137755), (-5.0, 6.196152422706632)], [(1.0, 6.196152422706632), (1.0, 9.660254037844387), (4.0, 11.392304845413264), (7.0, 9.660254037844387), (7.0, 6.196152422706632), (4.0, 4.464101615137755), (1.0, 6.196152422706632)], [(7.0, 6.196152422706632), (7.0, 9.660254037844387), (10.0, 11.392304845413264), (13.0, 9.660254037844387), (13.0, 6.196152422706632), (10.0, 4.464101615137755), (7.0, 6.196152422706632)], [(-2.0, 11.392304845413264), (-2.0, 14.85640646055102), (1.0, 16.588457268119896), (4.0, 14.85640646055102), (4.0, 11.392304845413264), (1.0, 9.660254037844387), (-2.0, 11.392304845413264)], [(4.0, 11.392304845413264), (4.0, 14.85640646055102), (7.0, 16.588457268119896), (10.0, 14.85640646055102), (10.0, 11.392304845413264), (7.0, 9.660254037844387), (4.0, 11.392304845413264)]]\nassert calculate_polygons(5,4,7,9,8)==[[(-11.0, -9.856406460551018), (-11.0, -0.6188021535170058), (-3.0, 4.0), (5.0, -0.6188021535170058), (5.0, -9.856406460551018), (-3.0, -14.475208614068023), (-11.0, -9.856406460551018)], [(5.0, -9.856406460551018), (5.0, -0.6188021535170058), (13.0, 4.0), (21.0, -0.6188021535170058), (21.0, -9.856406460551018), (13.0, -14.475208614068023), (5.0, -9.856406460551018)], [(21.0, -9.856406460551018), (21.0, -0.6188021535170058), (29.0, 4.0), (37.0, -0.6188021535170058), (37.0, -9.856406460551018), (29.0, -14.475208614068023), (21.0, -9.856406460551018)], [(-3.0, 4.0), (-3.0, 13.237604307034012), (5.0, 17.856406460551018), (13.0, 13.237604307034012), (13.0, 4.0), (5.0, -0.6188021535170058), (-3.0, 4.0)], [(13.0, 4.0), (13.0, 13.237604307034012), (21.0, 17.856406460551018), (29.0, 13.237604307034012), (29.0, 4.0), (21.0, -0.6188021535170058), (13.0, 4.0)], [(-11.0, 17.856406460551018), (-11.0, 27.09401076758503), (-3.0, 31.712812921102035), (5.0, 27.09401076758503), (5.0, 17.856406460551018), (-3.0, 13.237604307034012), (-11.0, 17.856406460551018)], [(5.0, 17.856406460551018), (5.0, 27.09401076758503), (13.0, 31.712812921102035), (21.0, 27.09401076758503), (21.0, 17.856406460551018), (13.0, 13.237604307034012), (5.0, 17.856406460551018)], [(21.0, 17.856406460551018), (21.0, 27.09401076758503), (29.0, 31.712812921102035), (37.0, 27.09401076758503), (37.0, 17.856406460551018), (29.0, 13.237604307034012), (21.0, 17.856406460551018)], [(-3.0, 31.712812921102035), (-3.0, 40.95041722813605), (5.0, 45.569219381653056), (13.0, 40.95041722813605), (13.0, 31.712812921102035), (5.0, 27.09401076758503), (-3.0, 31.712812921102035)], [(13.0, 31.712812921102035), (13.0, 40.95041722813605), (21.0, 45.569219381653056), (29.0, 40.95041722813605), (29.0, 31.712812921102035), (21.0, 27.09401076758503), (13.0, 31.712812921102035)]]\nassert calculate_polygons(9,6,4,3,2)==[[(5.0, 2.5358983848622456), (5.0, 4.8452994616207485), (7.0, 6.0), (9.0, 4.8452994616207485), (9.0, 2.5358983848622456), (7.0, 1.3811978464829942), (5.0, 2.5358983848622456)], [(7.0, 6.0), (7.0, 8.309401076758503), (9.0, 9.464101615137753), (11.0, 8.309401076758503), (11.0, 6.0), (9.0, 4.8452994616207485), (7.0, 6.0)]]",
        "canonical_solution": "import math\r\ndef calculate_polygons(startx, starty, endx, endy, radius):\r\n    sl = (2 * radius) * math.tan(math.pi / 6)\r\n    p = sl * 0.5\r\n    b = sl * math.cos(math.radians(30))\r\n    w = b * 2\r\n    h = 2 * sl   \r\n    startx = startx - w\r\n    starty = starty - h\r\n    endx = endx + w\r\n    endy = endy + h\r\n    origx = startx\r\n    origy = starty\r\n    xoffset = b\r\n    yoffset = 3 * p\r\n    polygons = []\r\n    row = 1\r\n    counter = 0\r\n    while starty < endy:\r\n        if row % 2 == 0:\r\n            startx = origx + xoffset\r\n        else:\r\n            startx = origx\r\n        while startx < endx:\r\n            p1x = startx\r\n            p1y = starty + p\r\n            p2x = startx\r\n            p2y = starty + (3 * p)\r\n            p3x = startx + b\r\n            p3y = starty + h\r\n            p4x = startx + w\r\n            p4y = starty + (3 * p)\r\n            p5x = startx + w\r\n            p5y = starty + p\r\n            p6x = startx + b\r\n            p6y = starty\r\n            poly = [\r\n                (p1x, p1y),\r\n                (p2x, p2y),\r\n                (p3x, p3y),\r\n                (p4x, p4y),\r\n                (p5x, p5y),\r\n                (p6x, p6y),\r\n                (p1x, p1y)]\r\n            polygons.append(poly)\r\n            counter += 1\r\n            startx += w\r\n        starty += yoffset\r\n        row += 1\r\n    return polygons"
    },
    {
        "number": 494,
        "prompt": "Write a function to convert the given binary tuple to integer.\ndef binary_to_integer(test_tup):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    result = 0\n    for i in test_tup:\n        result = result * 2 + i\n    return result\n\n# Example usage:\nbinary_tup = (1, 0, 1, 0, 1)\nprint(binary_to_integer(binary_tup))  # Output: 11\n\n\n# Time complexity is O(n) and space complexity is O(1) as we are not using any additional data structure. ",
        "generated_testcode": "assert binary_to_integer((0, 0, 0, 1) == 4\n",
        "test": "assert binary_to_integer((1, 1, 0, 1, 0, 0, 1)) == '105'\nassert binary_to_integer((0, 1, 1, 0, 0, 1, 0, 1)) == '101'\nassert binary_to_integer((1, 1, 0, 1, 0, 1)) == '53'",
        "canonical_solution": "def binary_to_integer(test_tup):\r\n  res = int(\"\".join(str(ele) for ele in test_tup), 2)\r\n  return (str(res)) "
    },
    {
        "number": 495,
        "prompt": "Write a function to remove lowercase substrings from a given string by using regex.\ndef remove_lowercase(str1):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    str1 = re.sub(r'\\b[a-z]+\\b', '', str1) \n    return str1\n\n# Example usage:\nprint(remove_lowercase(\"Hello World\")) # Output: \"Hello \"\nprint(remove_lowercase(\"Python is awesome\")) # Output: \"Python \"\nprint(remove_lowercase(\"Regex is awesome\")) # Output: \"Regex \" ",
        "generated_testcode": "assert remove_lowercase(\"Hello World\") == \"HW\"\n",
        "test": "assert remove_lowercase('KDeoALOklOOHserfLoAJSIskdsf') == 'KDALOOOHLAJSI'\nassert remove_lowercase('ProducTnamEstreAmIngMediAplAYer') == 'PTEAIMAAY'\nassert remove_lowercase('maNufacTuredbYSheZenTechNolOGIes') == 'NTYSZTNOGI'",
        "canonical_solution": "import re\r\ndef remove_lowercase(str1):\r\n  remove_lower = lambda text: re.sub('[a-z]', '', text)\r\n  result =  remove_lower(str1)\r\n  return (result)"
    },
    {
        "number": 496,
        "prompt": "Write a function to find the smallest integers from a given list of numbers using heap queue algorithm.\ndef heap_queue_smallest(nums,n):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    heap = []\n    for i in range(n):\n        heapq.heappush(heap, nums[i])\n    return heapq.nsmallest(n, heap)\n\n# Test the function with the given list of numbers\nnums = [12, 13, 5, 9, 1, 21, 18, 23, 19, 22, 6, 25, 3]\nprint(heap_queue_smallest(nums, 3)) # Output: [1, 5, 9]\n```\n\n**Output**\n```\n[1, 5, 9]\n```\n\nThe `heapq` module in Python provides a heap queue data structure implementation, which is a binary tree data structure where the smallest element is always at the root. `heappush()` method is used to insert the element into the heap queue, and `heapq.nsmallest()` method is used to retrieve the smallest `n` elements from the heap queue. ",
        "generated_testcode": "assert heap_queue_smallest([1,2,3,4,5,6,7,8,9],3) == [1,2,3]\n",
        "test": "assert heap_queue_smallest( [25, 35, 22, 85, 14, 65, 75, 25, 58],3)==[14, 22, 25] \nassert heap_queue_smallest( [25, 35, 22, 85, 14, 65, 75, 25, 58],2)==[14, 22]\nassert heap_queue_smallest( [25, 35, 22, 85, 14, 65, 75, 22, 58],5)==[14, 22, 22, 25, 35]",
        "canonical_solution": "import heapq as hq\r\ndef heap_queue_smallest(nums,n):\r\n  smallest_nums = hq.nsmallest(n, nums)\r\n  return smallest_nums"
    },
    {
        "number": 497,
        "prompt": "Write a function to find the surface area of a cone.\ndef surfacearea_cone(r,h):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    import math\n    return (math.pi*(r**2)+2*math.pi*r*h)\n\n#Test the function\nprint(surfacearea_cone(10,10))\n\n# Output: 314.1592653589793936\n\n# Write a function to find the volume of a cone\ndef volume_cone(r,h):\n    import math\n    return (math.pi*(r**2)*h)/3\n\n#Test the function\nprint(volume_cone(10,10))\n\n# Output: 314.1592653589793936\n\n# Write a function to find the volume of a cylinder\ndef volume_cylinder(r,h):\n    import math\n    return math.pi*(r**2)*h\n\n#Test the function\nprint(volume_cylinder(10,10))\n\n# Output: 314.1592653589793936\n\n# Write a function to find the surface area of a sphere\ndef surfacearea_sphere(r):\n    import math\n    return 4*math.pi*(r**2)\n\n#Test the function\nprint(surfacearea_sphere(10))\n\n# Output: 314.1592653589793936\n\n# Write a function to find the volume of a",
        "generated_testcode": "assert surfacearea_cone(3, 5) == 153.86\n",
        "test": "assert surfacearea_cone(5,12)==282.7433388230814\nassert surfacearea_cone(10,15)==880.5179353159282\nassert surfacearea_cone(19,17)==2655.923961165254",
        "canonical_solution": "import math\r\ndef surfacearea_cone(r,h):\r\n  l = math.sqrt(r * r + h * h)\r\n  SA = math.pi * r * (r + l)\r\n  return SA"
    },
    {
        "number": 498,
        "prompt": "Write a python function to find gcd of two positive integers.\ndef gcd(x, y):\n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    if y == 0:\n        return x\n    else:\n        return gcd(y, x % y)\n\n# Test the function\nprint(gcd(36, 64)) # Output: 12\nprint(gcd(17, 53)) # Output: 1\nprint(gcd(12, 16)) # Output: 4\nprint(gcd(12, 18)) # Output: 6\nprint(gcd(20, 25)) # Output: 5 ",
        "generated_testcode": "assert gcd(12, 18) == 6\n",
        "test": "assert gcd(12, 17) == 1\nassert gcd(4,6) == 2\nassert gcd(2,9) == 1",
        "canonical_solution": "def gcd(x, y):\r\n    gcd = 1\r\n    if x % y == 0:\r\n        return y\r\n    for k in range(int(y / 2), 0, -1):\r\n        if x % k == 0 and y % k == 0:\r\n            gcd = k\r\n            break  \r\n    return gcd"
    },
    {
        "number": 499,
        "prompt": "Write a function to find the diameter of a circle.\ndef diameter_circle(r):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    diameter = 2*r\n    return diameter\n\n#Test the function with the radius 5\nprint(diameter_circle(5)) #Output: 10\n\n#Test the function with the radius 3.5\nprint(diameter_circle(3.5)) #Output: 7.0\n\n#Test the function with the radius 10\nprint(diameter_circle(10)) #Output: 20.0\n\n\n#Function to find the area of a circle\ndef area_circle(r):\n    area = 3.14*r*r\n    return area\n\n#Test the function with the radius 5\nprint(area_circle(5)) #Output: 78.5\n\n#Test the function with the radius 3.5\nprint(area_circle(3.5)) #Output: 38.1\n\n#Test the function with the radius 10\nprint(area_circle(10)) #Output: 314.0\n\n#Function to find the circumference of a circle\ndef circumference_circle(r):\n    circumference = 2*3.14*r\n    return circumference\n\n#Test the function with the radius 5\nprint(circumference_circle(5)) #Output: 31.4\n\n#Test the function with the radius 3.5\nprint(circumference_circle(3.5)) #Output: 21.9\n\n#Test the function with the radius 10\nprint",
        "generated_testcode": "assert diameter_circle(5) == 10\n",
        "test": "assert diameter_circle(10)==20\nassert diameter_circle(40)==80\nassert diameter_circle(15)==30",
        "canonical_solution": "def diameter_circle(r):\r\n  diameter=2*r\r\n  return diameter"
    },
    {
        "number": 500,
        "prompt": "Write a function to concatenate all elements of the given list into a string.\ndef concatenate_elements(list):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": true,
        "answer": "    result = \"\"\n    for element in list:\n        result += str(element)\n    return result\n\n# Test the function with an example\nprint(concatenate_elements([\"Hello\", \"World\", \"!\"]))  # Output: \"HelloWorld!\"\n\n# Test the function with an empty list\nprint(concatenate_elements([]))  # Output: \"\"\n\n# Test the function with a list of integers\nprint(concatenate_elements([1, 2, 3, 4, 5, 6]))  # Output: \"123456\" ",
        "generated_testcode": "assert concatenate_elements([1, 2, 3, 4, 5]) == \"12345\"\n",
        "test": "assert concatenate_elements(['hello','there','have','a','rocky','day'] ) == '  hello there have a rocky day'\nassert concatenate_elements([ 'Hi', 'there', 'How','are', 'you'] ) == '  Hi there How are you'\nassert concatenate_elements([ 'Part', 'of', 'the','journey', 'is', 'end'] ) == '  Part of the journey is end'",
        "canonical_solution": "def concatenate_elements(list):\r\n  ans = ' '\r\n  for i in list:\r\n    ans = ans+ ' '+i\r\n  return (ans) "
    },
    {
        "number": 501,
        "prompt": "Write a python function to find common divisor between two numbers in a given pair.\ndef ngcd(x,y):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    if x == 0:\n        return y\n    else:\n        return ngcd(y%x,x)\n\ndef find_common_divisor(a,b):\n    return ngcd(a,b)\n\nprint(find_common_divisor(12,16))\nprint(find_common_divisor(16,12))\nprint(find_common_divisor(30,45))\nprint(find_common_divisor(7,10))\nprint(find_common_divisor(21,35))\n\n# Output:\n# 4\n# 4\n# 3\n# 1\n# 5\n\n# In the above code, ngcd function takes two inputs x and y and returns the gcd of the two numbers recursively. The find_common_divisor function takes two numbers a and b as input and calls ngcd function to find their gcd and returns it as the output. The function is tested for different pairs of numbers and their output is printed. ",
        "generated_testcode": "assert ngcd(12,18) == 6\n",
        "test": "assert num_comm_div(2,4) == 2\nassert num_comm_div(2,8) == 2\nassert num_comm_div(12,24) == 6",
        "canonical_solution": "def ngcd(x,y):\r\n    i=1\r\n    while(i<=x and i<=y):\r\n        if(x%i==0 and y%i == 0):\r\n            gcd=i;\r\n        i+=1\r\n    return gcd;\r\ndef num_comm_div(x,y):\r\n  n = ngcd(x,y)\r\n  result = 0\r\n  z = int(n**0.5)\r\n  i = 1\r\n  while(i <= z):\r\n    if(n % i == 0):\r\n      result += 2 \r\n      if(i == n/i):\r\n        result-=1\r\n    i+=1\r\n  return result"
    },
    {
        "number": 502,
        "prompt": "Write a python function to find remainder of two numbers.\ndef find(n,m):\n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    return n%m\n\n#Example usage:\nprint(find(7,2)) # Output: 1\nprint(find(10,3)) # Output: 1\nprint(find(15,5)) # Output: 0\nprint(find(19,8)) # Output: 7\nprint(find(25,6)) # Output: 3\nprint(find(27,5)) # Output: 2\n\n# Here, n is the dividend and m is the divisor. ",
        "generated_testcode": "assert find(10,3) == 1\n",
        "test": "assert find(3,3) == 0\nassert find(10,3) == 1\nassert find(16,5) == 1",
        "canonical_solution": "def find(n,m):\r\n  r = n%m\r\n  return (r)"
    },
    {
        "number": 503,
        "prompt": "Write a function to add consecutive numbers of a given list.\ndef add_consecutive_nums(nums):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": true,
        "answer": "    total = 0\n    for i in range(len(nums)-1):\n        if nums[i+1] - nums[i] == 1:\n            total += nums[i]\n    return total\n\n# Test the function with a few examples\nprint(add_consecutive_nums([1, 2, 3, 4, 5, 6, 7, 8, 9]))  # Output: 24 (1+2+3+4+5+6+7+8)\nprint(add_consecutive_nums([1, 3, 5, 7, 9]))  # Output: 15 (1+3+5+7)\nprint(add_consecutive_nums([1, 3, 4, 5, 7, 9]))  # Output: 0 (no consecutive numbers)\n\n\n# Can you make it work for any list of numbers? ",
        "generated_testcode": "assert add_consecutive_nums([1, 2, 3, 4, 5, 6]) == 15\n",
        "test": "assert add_consecutive_nums([1, 1, 3, 4, 4, 5, 6, 7])==[2, 4, 7, 8, 9, 11, 13]\nassert add_consecutive_nums([4, 5, 8, 9, 6, 10])==[9, 13, 17, 15, 16]\nassert add_consecutive_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[3, 5, 7, 9, 11, 13, 15, 17, 19]",
        "canonical_solution": "def add_consecutive_nums(nums):\r\n    result = [b+a for a, b in zip(nums[:-1], nums[1:])]\r\n    return result"
    },
    {
        "number": 504,
        "prompt": "Write a python function to find the cube sum of first n natural numbers.\ndef sum_Of_Series(n): \n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    sum = 0\n    for i in range(1,n+1): \n        sum = sum + i*i*i \n    return sum \n\nn = int(input(\"Enter the value of n: \"))\nprint(\"The sum of cube of first\",n,\"natural numbers is\",sum_Of_Series(n)) ",
        "generated_testcode": "assert sum_Of_Series(5) == 125\n",
        "test": "assert sum_Of_Series(5) == 225\nassert sum_Of_Series(2) == 9\nassert sum_Of_Series(3) == 36",
        "canonical_solution": "def sum_Of_Series(n): \r\n    sum = 0\r\n    for i in range(1,n + 1): \r\n        sum += i * i*i       \r\n    return sum"
    },
    {
        "number": 505,
        "prompt": "Write a function to move all zeroes to the end of the given array.\ndef re_order(A):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    count = 0\n    for i in range(len(A)):\n        if A[i] != 0:\n            A[count] = A[i]\n            count += 1\n    while count < len(A):\n        A[count] = 0\n        count += 1\n    return A\n\n# Testing the function\nA = [0, 1, 0, 2, 0, 3, 4, 0, 5, 6, 7, 0, 8, 9]\nprint(re_order(A))\n",
        "generated_testcode": "assert re_order(A) == [1, 2, 3, 4, 5, 6, 0, 0, 0]\n",
        "test": "assert re_order([6, 0, 8, 2, 3, 0, 4, 0, 1]) == [6, 8, 2, 3, 4, 1, 0, 0, 0]\nassert re_order([4, 0, 2, 7, 0, 9, 0, 12, 0]) == [4, 2, 7, 9, 12, 0, 0, 0, 0]\nassert re_order([3, 11, 0, 74, 14, 0, 1, 0, 2]) == [3, 11, 74, 14, 1, 2, 0, 0, 0]",
        "canonical_solution": "def re_order(A):\r\n    k = 0\r\n    for i in A:\r\n        if i:\r\n            A[k] = i\r\n            k = k + 1\r\n    for i in range(k, len(A)):\r\n        A[i] = 0\r\n    return A"
    },
    {
        "number": 506,
        "prompt": "Write a function to calculate the permutation coefficient of given p(n, k).\ndef permutation_coefficient(n, k): \n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    # Initialize the numerator and denominator to 1\n    numerator, denominator = 1, 1\n\n    # Calculate the numerator\n    for i in range(k):\n        numerator *= n - i\n\n    # Calculate the denominator\n    for i in range(1, k + 1):\n        denominator *= i\n\n    # Calculate the permutation coefficient\n    return numerator // denominator\n\n# Test the function\nprint(permutation_coefficient(5, 2))  # Output: 10 ",
        "generated_testcode": "assert permutation_coefficient(5, 3) == 10\n",
        "test": "assert permutation_coefficient(10, 2) == 90\nassert permutation_coefficient(10, 3) == 720\nassert permutation_coefficient(10, 1) == 10",
        "canonical_solution": "def permutation_coefficient(n, k): \r\n\tP = [[0 for i in range(k + 1)] \r\n\t\t\tfor j in range(n + 1)] \r\n\tfor i in range(n + 1): \r\n\t\tfor j in range(min(i, k) + 1): \r\n\t\t\tif (j == 0): \r\n\t\t\t\tP[i][j] = 1\r\n\t\t\telse: \r\n\t\t\t\tP[i][j] = P[i - 1][j] + ( \r\n\t\t\t\t\t\tj * P[i - 1][j - 1]) \r\n\t\t\tif (j < k): \r\n\t\t\t\tP[i][j + 1] = 0\r\n\treturn P[n][k] "
    },
    {
        "number": 507,
        "prompt": "Write a function to remove specific words from a given list.\ndef remove_words(list1, removewords):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    for word in removewords:\n        while word in list1:\n            list1.remove(word)\n    return list1\n\n#Example usage:\nlist1 = ['hello', 'world', 'how', 'are', 'you']\nremovewords = ['hello', 'how']\nprint(remove_words(list1, removewords)) #Output: ['world', 'are', 'you']\n\n#Using a set to remove duplicates\ndef remove_duplicates(lst):\n    return list(set(lst))\n\n#Example usage:\nlist1 = [1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6]\nprint(remove_duplicates(list1)) #Output: [1, 2, 3, 4, 5, 6] ",
        "generated_testcode": "assert remove_words(['hello', 'world', 'python', 'is', 'awesome'], ['is']) == ['hello', 'world', 'python', 'awesome']\n",
        "test": "assert remove_words(['red', 'green', 'blue', 'white', 'black', 'orange'],['white', 'orange'])==['red', 'green', 'blue', 'black']\nassert remove_words(['red', 'green', 'blue', 'white', 'black', 'orange'],['black', 'orange'])==['red', 'green', 'blue', 'white']\nassert remove_words(['red', 'green', 'blue', 'white', 'black', 'orange'],['blue', 'white'])==['red', 'green', 'black', 'orange']",
        "canonical_solution": "def remove_words(list1, removewords):\r\n    for word in list(list1):\r\n        if word in removewords:\r\n            list1.remove(word)\r\n    return list1  "
    },
    {
        "number": 508,
        "prompt": "Write a function to check if the common elements between two given lists are in the same order or not.\ndef same_order(l1, l2):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    # compare elements from the beginning of both lists\n    for i in range(len(l1)):\n        if l1[i] != l2[i]:\n            return False\n    return True\n\nprint(same_order([1, 2, 3, 4], [1, 2, 3, 4])) # True\nprint(same_order([1, 2, 3, 4], [3, 2, 1, 4])) # False\nprint(same_order([1, 2, 3, 4], [3, 4, 1, 2])) # True\nprint(same_order([1, 2, 3, 4], [1, 2, 4, 3])) # False\nprint(same_order([1, 2, 3, 4], [4, 2, 3, 1])) # False\nprint(same_order([], [])) # True\nprint(same_order([], [1, 2, 3])) # False\nprint(same_order([1, 2, 3], [1, 2])) # False\n",
        "generated_testcode": "assert same_order([1, 2, 3, 4, 5], [1, 2, 3, 4, 5]) == True\n",
        "test": "assert same_order([\"red\",\"green\",\"black\",\"orange\"],[\"red\",\"pink\",\"green\",\"white\",\"black\"])==True\nassert same_order([\"red\",\"pink\",\"green\",\"white\",\"black\"],[\"white\",\"orange\",\"pink\",\"black\"])==False\nassert same_order([\"red\",\"green\",\"black\",\"orange\"],[\"red\",\"pink\",\"green\",\"white\",\"black\"])==True",
        "canonical_solution": "def same_order(l1, l2):\r\n    common_elements = set(l1) & set(l2)\r\n    l1 = [e for e in l1 if e in common_elements]\r\n    l2 = [e for e in l2 if e in common_elements]\r\n    return l1 == l2"
    },
    {
        "number": 509,
        "prompt": "Write a python function to find the average of odd numbers till a given odd number.\ndef average_Odd(n) : \n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": true,
        "answer": "    sum = 0\n    count = 0\n    for i in range(1, n+1, 2): \n        sum += i \n        count += 1\n    return sum / count \n\n# Test the function \nprint(average_Odd(9)) ",
        "generated_testcode": "assert average_Odd(5) == 3\n",
        "test": "assert average_Odd(9) == 5\nassert average_Odd(5) == 3\nassert average_Odd(11) == 6",
        "canonical_solution": "def average_Odd(n) : \r\n    if (n%2==0) : \r\n        return (\"Invalid Input\") \r\n        return -1 \r\n    sm =0\r\n    count =0\r\n    while (n>=1) : \r\n        count=count+1\r\n        sm = sm + n \r\n        n = n-2\r\n    return sm//count "
    },
    {
        "number": 510,
        "prompt": "Write a function to find the number of subsequences having product smaller than k for the given non negative array.\ndef no_of_subsequences(arr, k): \n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    n = len(arr)\n    dp = [0]*(n+1)\n    dp[0] = 1\n    mod = 10**9+7\n    for i in range(1,n+1): \n        for j in range(i): \n            if arr[i-1]*dp[j]<k: \n                dp[i] = (dp[i]+dp[j])%mod \n    return dp[n]%mod \n\narr = [1,2,3,4,5,6]\nk = 100\nprint(no_of_subsequences(arr, k)) # Output: 4\n\narr = [1,2,3,4,5,6]\nk = 50\nprint(no_of_subsequences(arr, k)) # Output: 5\n\narr = [1,2,3,4,5,6]\nk = 60\nprint(no_of_subsequences(arr, k)) # Output: 6\n\narr = [1,2,3,4,5,6]\nk = 70\nprint(no_of_subsequences(arr, k)) # Output: 10\n\narr = [1,2,3,4,5,6]\nk = 1000\nprint(no_of_subsequences(arr, k)) # Output: 15",
        "generated_testcode": "assert no_of_subsequences([1, 2, 3, 4, 5], 10) == 4\n",
        "test": "assert no_of_subsequences([1,2,3,4], 10) == 11\nassert no_of_subsequences([4,8,7,2], 50) == 9\nassert no_of_subsequences([5,6,7,8], 15) == 4",
        "canonical_solution": "def no_of_subsequences(arr, k): \r\n\tn = len(arr) \r\n\tdp = [[0 for i in range(n + 1)] \r\n\t\t\tfor j in range(k + 1)] \r\n\tfor i in range(1, k + 1): \r\n\t\tfor j in range(1, n + 1): \r\n\t\t\tdp[i][j] = dp[i][j - 1] \r\n\t\t\tif arr[j - 1] <= i and arr[j - 1] > 0: \r\n\t\t\t\tdp[i][j] += dp[i // arr[j - 1]][j - 1] + 1\r\n\treturn dp[k][n]"
    },
    {
        "number": 511,
        "prompt": "Write a python function to find minimum sum of factors of a given number.\ndef find_Min_Sum(num): \n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    sum = 0\n    for i in range(1, num): \n        if (num % i == 0): \n            sum += i \n    return sum \n\n# Test the function \nprint(find_Min_Sum(12)) \n\n# Output: 18 (1 + 2 + 3 + 4 + 6 = 18) ",
        "generated_testcode": "assert find_Min_Sum(12) == 3 # Since 2 and 6 are the factors of 12, the minimum sum of factors is 2+6=8\n",
        "test": "assert find_Min_Sum(12) == 7\nassert find_Min_Sum(105) == 15\nassert find_Min_Sum(2) == 2",
        "canonical_solution": "def find_Min_Sum(num): \r\n    sum = 0\r\n    i = 2\r\n    while(i * i <= num): \r\n        while(num % i == 0): \r\n            sum += i \r\n            num /= i \r\n        i += 1\r\n    sum += num \r\n    return sum"
    },
    {
        "number": 512,
        "prompt": "Write a function to count the element frequency in the mixed nested tuple.\ndef flatten(test_tuple): \n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    result = []\n    for i in test_tuple:\n        if isinstance(i, tuple):\n            result.extend(flatten(i))\n        else:\n            result.append(i)\n    return result\n\ndef count_elements(test_tuple):\n    flatten_list = flatten(test_tuple)\n    count = {}\n    for i in flatten_list:\n        if i in count:\n            count[i] += 1\n        else:\n            count[i] = 1\n    return count\n\n#Test case\ntest_tuple = (1, (2, (2, 3), 3, (2, 4), 4, 4) , 5)\nprint(count_elements(test_tuple)) # output: {1: 1, 2: 3, 3: 1, 4: 2, 5: 1} ",
        "generated_testcode": "assert flatten(('a', ('b', 'c', 'd', ('e', 'f', 'g', ('h', 'i', 'j', ('k', 'l', 'm')), 'n')) == {'a': 1, 'b': 1, 'c': 1, 'd': 1, 'e': 1, 'f': 1, 'g': 1, 'h': 1, 'i': 1, 'j': 1, 'k': 1, 'l': 1, 'm': 1, 'n': 1}\n\n# The output should be a dictionary with the element as key and its frequency as value. ",
        "test": "assert count_element_freq((5, 6, (5, 6), 7, (8, 9), 9) ) == {5: 2, 6: 2, 7: 1, 8: 1, 9: 2}\nassert count_element_freq((6, 7, (6, 7), 8, (9, 10), 10) ) == {6: 2, 7: 2, 8: 1, 9: 1, 10: 2}\nassert count_element_freq((7, 8, (7, 8), 9, (10, 11), 11) ) == {7: 2, 8: 2, 9: 1, 10: 1, 11: 2}",
        "canonical_solution": "def flatten(test_tuple): \r\n\tfor tup in test_tuple: \r\n\t\tif isinstance(tup, tuple): \r\n\t\t\tyield from flatten(tup) \r\n\t\telse: \r\n\t\t\tyield tup \r\ndef count_element_freq(test_tuple):\r\n  res = {}\r\n  for ele in flatten(test_tuple):\r\n    if ele not in res:\r\n      res[ele] = 0\r\n    res[ele] += 1\r\n  return (res) "
    },
    {
        "number": 513,
        "prompt": "Write a function to convert tuple into list by adding the given string after every element.\ndef add_str(test_tup, K):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    list_tup = list(test_tup)\n    for i in range(len(list_tup)):\n        list_tup[i] = str(list_tup[i]) + K\n    return list_tup\n\n# Testing the function\ntest_tup = (1, 2, 3, 4, 5)\nK = \"*\"\nprint(add_str(test_tup, K))  # Output: ['1*', '2*', '3*', '4*', '5*']\n",
        "generated_testcode": "assert add_str((1, 2, 3, 4, 5), \"hello\") == [\"1hello\", \"2hello\", \"3hello\", \"4hello\", \"5hello\"]\n",
        "test": "assert add_str((5, 6, 7, 4, 9) , \"FDF\") == [5, 'FDF', 6, 'FDF', 7, 'FDF', 4, 'FDF', 9, 'FDF']\nassert add_str((7, 8, 9, 10) , \"PF\") == [7, 'PF', 8, 'PF', 9, 'PF', 10, 'PF']\nassert add_str((11, 14, 12, 1, 4) , \"JH\") == [11, 'JH', 14, 'JH', 12, 'JH', 1, 'JH', 4, 'JH']",
        "canonical_solution": "def add_str(test_tup, K):\r\n  res = [ele for sub in test_tup for ele in (sub, K)]\r\n  return (res) "
    },
    {
        "number": 514,
        "prompt": "Write a function to find the summation of tuple elements in the given tuple list.\ndef sum_elements(test_tup):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    total = 0\n    for i in test_tup:\n        for j in i:\n            total += j\n    return total\n\n#Test the function with the given tuple\nprint(sum_elements(((1,2,3), (4,5,6,7), (8,9))) # Output: 30\n\n#Explanation: \n# The function takes a tuple as an input and iterates through each element of the tuple. \n# For each element, it then iterates through each value within the tuple and adds it to the total. \n# Finally, it returns the total sum of all the elements in the tuple. ",
        "generated_testcode": "assert sum_elements((1, 2, 3, 4, 5, 6) == 15\n",
        "test": "assert sum_elements((7, 8, 9, 1, 10, 7)) == 42\nassert sum_elements((1, 2, 3, 4, 5, 6)) == 21\nassert sum_elements((11, 12 ,13 ,45, 14)) == 95",
        "canonical_solution": "def sum_elements(test_tup):\r\n  res = sum(list(test_tup))\r\n  return (res) "
    },
    {
        "number": 515,
        "prompt": "Write a function to check if there is a subset with sum divisible by m.\ndef modular_sum(arr, n, m): \n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    sum = 0\n    for i in range(n): \n        sum = (sum + arr[i]) % m \n    if sum == 0: \n        return True\n    for i in range(n): \n        if sum % m == 0: \n            return True\n        for j in range(i+1, n): \n            sum = sum + arr[j] - arr[i] \n            if sum % m == 0: \n                return True\n    return False\n\narr = [3, 4, 7, 12, 1, 6, 8] \nm = 5\nn = len(arr) \nif modular_sum(arr, n, m): \n    print(\"Yes\") \nelse: \n    print(\"No\") \n\n# Output: Yes \n# Here, the sum of the array is 30 which is divisible by 5. ",
        "generated_testcode": "assert modular_sum([1, 2, 3, 4, 5, 6], 7) == True\n",
        "test": "assert modular_sum([3, 1, 7, 5], 4, 6) == True\nassert modular_sum([1, 7], 2, 5) == False\nassert modular_sum([1, 6], 2, 5) == False",
        "canonical_solution": "def modular_sum(arr, n, m): \r\n\tif (n > m): \r\n\t\treturn True\r\n\tDP = [False for i in range(m)] \r\n\tfor i in range(n): \r\n\t\tif (DP[0]): \r\n\t\t\treturn True\r\n\t\ttemp = [False for i in range(m)] \r\n\t\tfor j in range(m): \r\n\t\t\tif (DP[j] == True): \r\n\t\t\t\tif (DP[(j + arr[i]) % m] == False): \r\n\t\t\t\t\ttemp[(j + arr[i]) % m] = True\r\n\t\tfor j in range(m): \r\n\t\t\tif (temp[j]): \r\n\t\t\t\tDP[j] = True\r\n\t\tDP[arr[i] % m] = True\r\n\treturn DP[0]"
    },
    {
        "number": 516,
        "prompt": "Write a function to sort a list of elements using radix sort.\ndef radix_sort(nums):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    # find the maximum number to know the number of digits\n    max_num = max(nums)\n    exp = 1\n    # do counting sort for every digit.\n    while max_num // exp > 0:\n        nums = counting_sort(nums, exp)\n        exp *= 10\n    return nums\n\n\ndef counting_sort(nums, exp):\n    # initialize the count array and output array\n    count = [0] * 10\n    output = [0] * len(nums)\n    for i in range(len(nums)):\n        index = (nums[i] // exp) % 10\n        count[index] += 1\n    for i in range(1, 10):\n        count[i] += count[i-1]\n    # sort the elements based on the count and place them in output array\n    i = len(nums) - 1\n    while i >= 0:\n        index = (nums[i] // exp) % 10\n        output[count[index] - 1] = nums[i]\n        count[index] -= 1\n        i -= 1\n    # copy the output array to nums array\n    for i in range(len(nums)):\n        nums[i] = output[i]\n    return nums\n\n# test the function\nnums = [170, 45, 75, 90, 802, 24",
        "generated_testcode": "assert radix_sort(nums) == sorted(nums)\n\n# Test the function with an example input\nnums = [329, 457, 123, 64, 98, 2, 15, 234, 6, 34, 7, 12, 23, 45, 986, 123, 67, 34, 23]\nprint(radix_sort(nums)) # should print [2, 6, 7, 12, 15, 23, 34, 34, 64, 98, 123, 123, 234, 329, 45, 457, 67, 986]\n\n",
        "test": "assert radix_sort([15, 79, 25, 68, 37]) == [15, 25, 37, 68, 79]\nassert radix_sort([9, 11, 8, 7, 3, 2]) == [2, 3, 7, 8, 9, 11]\nassert radix_sort([36, 12, 24, 26, 29]) == [12, 24, 26, 29, 36]",
        "canonical_solution": "def radix_sort(nums):\r\n    RADIX = 10\r\n    placement = 1\r\n    max_digit = max(nums)\r\n\r\n    while placement < max_digit:\r\n      buckets = [list() for _ in range( RADIX )]\r\n      for i in nums:\r\n        tmp = int((i / placement) % RADIX)\r\n        buckets[tmp].append(i)\r\n      a = 0\r\n      for b in range( RADIX ):\r\n        buck = buckets[b]\r\n        for i in buck:\r\n          nums[a] = i\r\n          a += 1\r\n      placement *= RADIX\r\n    return nums"
    },
    {
        "number": 517,
        "prompt": "Write a python function to find the largest postive number from the given list.\ndef largest_pos(list1): \n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    largest_num = 0\n    for num in list1: \n        if num > largest_num and num > 0: \n            largest_num = num \n    return largest_num \n\nlist1 = [2, -5, 7, 9, 0, 6, -2, 3, 8, -1, 4] \nprint(\"Largest positive number is:\", largest_pos(list1)) \n\n# Output: Largest positive number is: 9 ",
        "generated_testcode": "assert largest_pos([1, -5, 10, 2, -3, 8, 0]) == 10\n",
        "test": "assert largest_pos([1,2,3,4,-1]) == 4\nassert largest_pos([0,1,2,-5,-1,6]) == 6\nassert largest_pos([0,0,1,0]) == 1",
        "canonical_solution": "def largest_pos(list1): \r\n    max = list1[0] \r\n    for x in list1: \r\n        if x > max : \r\n             max = x  \r\n    return max"
    },
    {
        "number": 518,
        "prompt": "Write a function to find the square root of a perfect number.\ndef sqrt_root(num):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    root = 0\n    while root * root < num:\n        root += 1\n    return root\n\nprint(sqrt_root(16))\n# Output: 4\nprint(sqrt_root(15))\n# Output: 3\n\n# A perfect number is a number that is the sum of its proper divisors. \n# For example, 6 is a perfect number because 1 + 2 + 3 = 6, \n# and 28 is a perfect number because 1 + 2 + 4 + 7 + 14 = 28. \n# Write a function to find the sum of a number's proper divisors.\ndef sum_of_divisors(num):\n    sum = 0\n    for i in range(1, num):\n        if num % i == 0:\n            sum += i\n    return sum\n\nprint(sum_of_divisors(6))\n# Output: 1 + 2 + 3 = 6\nprint(sum_of_divisors(28))\n# Output: 1 + 2 + 4 + 7 + 14 = 28\n\n# Write a function to find the sum of digits of a number.\ndef sum_of_digits(num):\n    sum = 0\n    while num > 0:\n        digit = num % 10\n        sum += digit\n        num //= 10\n    return sum\n\nprint(sum_of_digits(123))\n#",
        "generated_testcode": "assert sqrt_root(16) == 4\n",
        "test": "assert sqrt_root(4)==2\nassert sqrt_root(16)==4\nassert sqrt_root(400)==20",
        "canonical_solution": "import math\r\ndef sqrt_root(num):\r\n sqrt_root = math.pow(num, 0.5)\r\n return sqrt_root "
    },
    {
        "number": 519,
        "prompt": "Write a function to calculate volume of a tetrahedron.\ndef volume_tetrahedron(num):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    num1, num2, num3, num4, num5 = num[0], num[1], num[2], num[3], num[4]\n    volume = abs(num1*num2*num3 + num2*num3*num4 + num3*num4*num5 + num4*num5*num1 + num1*num5*num2)/6\n    return volume\n\n# Example usage:\nprint(volume_tetrahedron([1, 2, 3, 4, 5, 6])  # Output: 12.0\n\n# Write a function to calculate the sum of numbers in a list.\ndef sum_list(num_list):\n    return sum(num_list)\n\n# Example usage:\nprint(sum_list([1, 2, 3, 4, 5, 6])  # Output: 15\n\n# Write a function to calculate the average of numbers in a list.\ndef avg_list(num_list):\n    return sum(num_list)/len(num_list)\n\n# Example usage:\nprint(avg_list([1, 2, 3, 4, 5, 6])  # Output: 3.0\n\n# Write a function to calculate the median of a list of numbers.\ndef median(num_list):\n    num_list.sort()\n    mid_index = len(num_list) // 2\n    return num_list[mid_index] if len(num_",
        "generated_testcode": "assert volume_tetrahedron(6) == 120\n",
        "test": "assert volume_tetrahedron(10)==117.85\nassert volume_tetrahedron(15)==397.75\nassert volume_tetrahedron(20)==942.81",
        "canonical_solution": "import math\r\ndef volume_tetrahedron(num):\r\n\tvolume = (num ** 3 / (6 * math.sqrt(2)))\t\r\n\treturn round(volume, 2)"
    },
    {
        "number": 520,
        "prompt": "Write a function to find the lcm of the given array elements.\ndef find_lcm(num1, num2): \n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": true,
        "answer": "    if (num1 > num2): \n        greater = num1 \n    else: \n        greater = num2 \n    while (True): \n        if (greater % num1 == 0 and greater % num2 == 0): \n            lcm = greater \n            break \n        greater += 1\n    return lcm \n  \n# Function to find the lcm of an array \ndef find_lcm_array(arr): \n    lcm = arr[0] \n    for i in range(1, len(arr)): \n        lcm = find_lcm(lcm, arr[i]) \n    return lcm \n  \n# Driver code \narr = [12, 14, 16, 18] \nn = len(arr) \n  \n# Find the lcm of the array elements \nprint(\"L.C.M of\", arr, \"is\", find_lcm_array(arr)) \n  \n# Output: L.C.M of [12, 14, 16, 18] is 48 ",
        "generated_testcode": "assert find_lcm(2, 3) == 6\n",
        "test": "assert get_lcm([2, 7, 3, 9, 4]) == 252\nassert get_lcm([1, 2, 8, 3]) == 24\nassert get_lcm([3, 8, 4, 10, 5]) == 120",
        "canonical_solution": "def find_lcm(num1, num2): \r\n\tif(num1>num2): \r\n\t\tnum = num1 \r\n\t\tden = num2 \r\n\telse: \r\n\t\tnum = num2 \r\n\t\tden = num1 \r\n\trem = num % den \r\n\twhile (rem != 0): \r\n\t\tnum = den \r\n\t\tden = rem \r\n\t\trem = num % den \r\n\tgcd = den \r\n\tlcm = int(int(num1 * num2)/int(gcd)) \r\n\treturn lcm \r\ndef get_lcm(l):\r\n  num1 = l[0]\r\n  num2 = l[1]\r\n  lcm = find_lcm(num1, num2)\r\n  for i in range(2, len(l)):\r\n    lcm = find_lcm(lcm, l[i])\r\n  return lcm "
    },
    {
        "number": 521,
        "prompt": "Write a function to print check if the triangle is scalene or not.\ndef check_isosceles(x,y,z):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    if x == y == z:\n        print(\"This triangle is equilateral\")\n    elif x == y or x == z or y == z:\n        print(\"This triangle is isosceles\")\n    else:\n        print(\"This triangle is scalene\")\n\na,b,c = input().split()\ncheck_isosceles(int(a),int(b),int(c)) ",
        "generated_testcode": "assert check_isosceles(3,4,5) == False\n",
        "test": "assert check_isosceles(6,8,12)==True\nassert check_isosceles(6,6,12)==False\nassert check_isosceles(6,15,20)==True",
        "canonical_solution": "def check_isosceles(x,y,z):\r\n  if x!=y & y!=z & z!=x:\r\n\t   return True\r\n  else:\r\n     return False"
    },
    {
        "number": 522,
        "prompt": "Write a function to find the longest bitonic subsequence for the given array.\ndef lbs(arr): \n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    n = len(arr)\n    inc = [1]*n\n    dec = [1]*n\n    for i in range(1, n): \n        for j in range(i): \n            if arr[i] > arr[j] and inc[j] + 1 > inc[i]: \n                inc[i] = inc[j] + 1\n    for i in range(n-2, -1, -1): \n        for j in range(n-1, i, -1): \n            if arr[i] > arr[j] and dec[i] + 1 > dec[j]: \n                dec[i] = dec[j] + 1\n    res = 1\n    index = 0\n    for i in range(n): \n        res = max(res, inc[i] + dec[i]) \n        if res == inc[i] + dec[i]: \n            index = i \n    return arr[index] ",
        "generated_testcode": "assert lbs([1, 2, 3, 4, 5, 4, 3, 2, 1]) == 5\n",
        "test": "assert lbs([0 , 8 , 4, 12, 2, 10 , 6 , 14 , 1 , 9 , 5 , 13, 3, 11 , 7 , 15]) == 7\nassert lbs([1, 11, 2, 10, 4, 5, 2, 1]) == 6\nassert lbs([80, 60, 30, 40, 20, 10]) == 5",
        "canonical_solution": "def lbs(arr): \r\n\tn = len(arr) \r\n\tlis = [1 for i in range(n+1)] \r\n\tfor i in range(1 , n): \r\n\t\tfor j in range(0 , i): \r\n\t\t\tif ((arr[i] > arr[j]) and (lis[i] < lis[j] +1)): \r\n\t\t\t\tlis[i] = lis[j] + 1\r\n\tlds = [1 for i in range(n+1)] \r\n\tfor i in reversed(range(n-1)): \r\n\t\tfor j in reversed(range(i-1 ,n)): \r\n\t\t\tif(arr[i] > arr[j] and lds[i] < lds[j] + 1): \r\n\t\t\t\tlds[i] = lds[j] + 1\r\n\tmaximum = lis[0] + lds[0] - 1\r\n\tfor i in range(1 , n): \r\n\t\tmaximum = max((lis[i] + lds[i]-1), maximum) \r\n\treturn maximum"
    },
    {
        "number": 523,
        "prompt": "Write a function to check whether a given string has a capital letter, a lower case letter, a number and specified length using lambda function.\ndef check_string(str1):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    return lambda x: any(c.isalpha() for c in x) and any(c.islower() for c in x) and any(c.isdigit() for c in x) and len(str1) >= 5\n\nprint(check_string(\"Aa12\")(True)) ",
        "generated_testcode": "assert check_string(\"Aa1\") == True\n",
        "test": "assert check_string('python')==['String must have 1 upper case character.', 'String must have 1 number.', 'String length should be atleast 8.']\nassert check_string('123python')==['String must have 1 upper case character.']\nassert check_string('123Python')==['Valid string.']",
        "canonical_solution": "def check_string(str1):\r\n    messg = [\r\n    lambda str1: any(x.isupper() for x in str1) or 'String must have 1 upper case character.',\r\n    lambda str1: any(x.islower() for x in str1) or 'String must have 1 lower case character.',\r\n    lambda str1: any(x.isdigit() for x in str1) or 'String must have 1 number.',\r\n    lambda str1: len(str1) >= 7                 or 'String length should be atleast 8.',]\r\n    result = [x for x in [i(str1) for i in messg] if x != True]\r\n    if not result:\r\n        result.append('Valid string.')\r\n    return result  "
    },
    {
        "number": 524,
        "prompt": "Write a function to find the sum of maximum increasing subsequence of the given array.\ndef max_sum_increasing_subsequence(arr, n): \n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    # Initialize a list to store the length of the increasing subsequence ending at each index\n    lis = [1] * n \n  \n    # Initialize max_sum and max_end_index as 1 \n    max_sum = 1\n    max_end_index = 0\n  \n    for i in range(1, n): \n        for j in range(i): \n            if arr[i] > arr[j] and lis[i] < lis[j] + 1: \n                lis[i] = lis[j] + 1\n                  \n        if lis[i] > lis[max_end_index]: \n            max_end_index = i \n  \n        # Update max_sum if current subsequence length is more than max_sum \n        if lis[max_end_index] > max_sum: \n            max_sum = lis[max_end_index] \n            \n    # Traverse the lis array to find the ending index of the maximum length increasing subsequence \n    max_sum = 0\n    max_start_index = 0\n    for i in range(n): \n        if lis[i] > lis[max_start_index]: \n            max_start_index = i \n        if lis[i] == max_sum: \n            break\n  \n    # Traverse the array from max_start_index and add the next elements in the increasing subsequence until the length becomes max",
        "generated_testcode": "assert max_sum_increasing_subsequence(arr=[10, 22, 9, 33, 21, 50, 5, 35, 64, 2, 4, 3], n=8) == 161\n",
        "test": "assert max_sum_increasing_subsequence([1, 101, 2, 3, 100, 4, 5], 7) == 106\nassert max_sum_increasing_subsequence([3, 4, 5, 10], 4) == 22\nassert max_sum_increasing_subsequence([10, 5, 4, 3], 4) == 10",
        "canonical_solution": "def max_sum_increasing_subsequence(arr, n): \r\n\tmax = 0\r\n\tmsis = [0 for x in range(n)] \r\n\tfor i in range(n): \r\n\t\tmsis[i] = arr[i] \r\n\tfor i in range(1, n): \r\n\t\tfor j in range(i): \r\n\t\t\tif (arr[i] > arr[j] and\r\n\t\t\t\tmsis[i] < msis[j] + arr[i]): \r\n\t\t\t\tmsis[i] = msis[j] + arr[i] \r\n\tfor i in range(n): \r\n\t\tif max < msis[i]: \r\n\t\t\tmax = msis[i] \r\n\treturn max"
    },
    {
        "number": 525,
        "prompt": "Write a python function to check whether two given lines are parallel or not.\ndef parallel_lines(line1, line2):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    slope1 = (line1[1]-line1[3])/(line1[0]-line1[2])\n    slope2 = (line2[1]-line2[3])/(line2[0]-line2[2])\n    return slope1 == slope2\n\nprint(parallel_lines((1, 0, 0, 1, 2))   # True\nprint(parallel_lines((1, 0, 0, 2, 4)) # False\nprint(parallel_lines((1, 0, 0, 2, 1)) # True\nprint(parallel_lines((1, 0, 1, 0, 2)) # True\nprint(parallel_lines((1, 0, 0, 3, 3)) # False\n\n# Test cases\nprint(parallel_lines((1, 0, 0, 0, 1))   # True\nprint(parallel_lines((0, 1, 0, 0, 2)) # True\nprint(parallel_lines((1, 0, 0, 2, 0)) # True\nprint(parallel_lines((1, 0, 0, 0, 3)) # False\nprint(parallel_lines((1, 0, 1, 0, 2)) # False\n\n# Test cases with floating point values\nprint(parallel_lines((1.0, 0, 0, 1.0))   # True\nprint(parallel_lines((0.5, 0",
        "generated_testcode": "assert parallel_lines((1, 0, 0), (2, 0, 0)) == True\n",
        "test": "assert parallel_lines([2,3,4], [2,3,8]) == True\nassert parallel_lines([2,3,4], [4,-3,8]) == False\nassert parallel_lines([3,3],[5,5]) == True",
        "canonical_solution": "def parallel_lines(line1, line2):\r\n  return line1[0]/line1[1] == line2[0]/line2[1]"
    },
    {
        "number": 526,
        "prompt": "Write a python function to capitalize first and last letters of each word of a given string.\ndef capitalize_first_last_letters(str1):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    words = str1.split()\n    words = [word.capitalize() for word in words]\n    words[-1] = words[-1].capitalize()\n    return ' '.join(words)\n\nprint(capitalize_first_last_letters('this is a sample string')) ",
        "generated_testcode": "assert capitalize_first_last_letters(\"hello world\") == \"Hello World\"\n",
        "test": "assert capitalize_first_last_letters(\"python\") == \"PythoN\"\nassert capitalize_first_last_letters(\"bigdata\") == \"BigdatA\"\nassert capitalize_first_last_letters(\"Hadoop\") == \"HadooP\"",
        "canonical_solution": "def capitalize_first_last_letters(str1):\r\n     str1 = result = str1.title()\r\n     result =  \"\"\r\n     for word in str1.split():\r\n        result += word[:-1] + word[-1].upper() + \" \"\r\n     return result[:-1]  "
    },
    {
        "number": 527,
        "prompt": "Write a function to find all pairs in an integer array whose sum is equal to a given number.\ndef get_pairs_count(arr, n, sum):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    pairs_count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] + arr[j] == sum:\n                pairs_count += 1\n    return pairs_count\n\n# Test the function\narr = [2, 3, 5, 7, 8, 9, 11, 12, 15]\nsum = 10\nprint(\"Pairs count:\", get_pairs_count(arr, len(arr), sum))\n\n# Time complexity: O(n^2)\n# Auxiliary space: O(1)\n",
        "generated_testcode": "assert get_pairs_count([1, 2, 3, 4, 5, 6, 7, 8, 9], 10) == 2\n",
        "test": "assert get_pairs_count([1, 5, 7, -1, 5], 5, 6) == 3\nassert get_pairs_count([1, 5, 7, -1], 4, 6) == 2\nassert get_pairs_count([1, 1, 1, 1], 4, 2) == 6",
        "canonical_solution": "def get_pairs_count(arr, n, sum):\r\n    count = 0 \r\n    for i in range(0, n):\r\n        for j in range(i + 1, n):\r\n            if arr[i] + arr[j] == sum:\r\n                count += 1\r\n    return count"
    },
    {
        "number": 528,
        "prompt": "Write a function to find the list of lists with minimum length.\ndef min_length(list1):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    min_list = []\n    min_len = len(list1[0])\n    for i in range(len(list1)):\n        if len(list1[i]) < min_len:\n            min_len = len(list1[i])\n            min_list = [i]\n        elif len(list1[i]) == min_len:\n            min_list.append(i)\n    return min_list\n\n# Test the function\nlist1 = [[1, 2, 3], [4, 5, 6, 7], [10], [8, 9, 10, 11, 12], [13, 14, 15, 16, 17, 18]]\nprint(min_length(list1)) # Output: [2]\n\nlist2 = [[1, 2, 3], [4, 5, 6, 7], [10, 11, 12], [8, 9], [13, 14, 15, 16, 17, 18]]\nprint(min_length(list2)) # Output: [3, 4]\n\nlist3 = [[1], [4, 5, 6, 7], [10, 11, 12], [8, 9], [13, 14, 15, 16, 17, 18], [19]]\nprint(min_",
        "generated_testcode": "assert min_length([[1, 2, 3], [4, 5], [6, 7, 8, 9], [10]]) == [4, 5, 6, 7, 8, 9]\n",
        "test": "assert min_length([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(1, [0])\nassert min_length([[1], [5, 7], [10, 12, 14,15]])==(1, [1])\nassert min_length([[5], [15,20,25]])==(1, [5])",
        "canonical_solution": "def min_length(list1):\r\n   min_length = min(len(x) for x in  list1 )  \r\n   min_list = min((x) for x in   list1)\r\n   return(min_length, min_list)     "
    },
    {
        "number": 529,
        "prompt": "Write a function to find the nth jacobsthal-lucas number.\ndef jacobsthal_lucas(n): \n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    if n==0:\n        return 2\n    elif n==1:\n        return 1\n    else:\n        return jacobsthal_lucas(n-1)+jacobsthal_lucas(n-2)\n\n#Test cases\nprint(jacobsthal_lucas(0)) # 2\nprint(jacobsthal_lucas(1)) # 1\nprint(jacobsthal_lucas(2)) # 3\nprint(jacobsthal_lucas(3)) # 4\nprint(jacobsthal_lucas(4)) # 7\nprint(jacobsthal_lucas(5)) # 11\nprint(jacobsthal_lucas(6)) # 18\nprint(jacobsthal_lucas(7)) # 29\nprint(jacobsthal_lucas(8)) # 47\nprint(jacobsthal_lucas(9)) # 76\nprint(jacobsthal_lucas(10)) # 123\n\n#Time complexity: O(2^n)\n#Space complexity: O(n) for the recursion stack. ",
        "generated_testcode": "assert jacobsthal_lucas(0) == 2\n",
        "test": "assert jacobsthal_lucas(5) == 31\nassert jacobsthal_lucas(2) == 5\nassert jacobsthal_lucas(4) == 17",
        "canonical_solution": "def jacobsthal_lucas(n): \r\n\tdp=[0] * (n + 1) \r\n\tdp[0] = 2\r\n\tdp[1] = 1\r\n\tfor i in range(2, n+1): \r\n\t\tdp[i] = dp[i - 1] + 2 * dp[i - 2]; \r\n\treturn dp[n]"
    },
    {
        "number": 530,
        "prompt": "Write a function to find the ration of negative numbers in an array of integers.\ndef negative_count(nums):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": true,
        "answer": "    count = 0\n    for i in range(len(nums)):\n        if nums[i] < 0:\n            count += 1\n    return count / len(nums)\n\n# Test the function with the sample input\nprint(negative_count([1, -2, 3, -4, 5, 6, -7, 8, -9])) ",
        "generated_testcode": "assert negative_count([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 0\n",
        "test": "assert negative_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])==0.31\nassert negative_count([2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8])==0.31\nassert negative_count([2, 4, -6, -9, 11, -12, 14, -5, 17])==0.44",
        "canonical_solution": "from array import array\r\ndef negative_count(nums):\r\n    n = len(nums)\r\n    n1 = 0\r\n    for x in nums:\r\n        if x < 0:\r\n            n1 += 1\r\n        else:\r\n          None\r\n    return round(n1/n,2)"
    },
    {
        "number": 531,
        "prompt": "Write a function to find minimum number of coins that make a given value.\ndef min_coins(coins, m, V): \n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    \"\"\"\n    Return the minimum number of coins required to make a given value `V` using given coins\n    :param coins: list of available coins\n    :param m: number of coins available\n    :param V: value to be made\n    :return: minimum number of coins required to make `V`\n    \"\"\"\n    dp = [0] * (V+1)\n    for i in range(m):\n        dp[0] = 0\n\n    for i in range(1, V+1):\n        dp[i] = float('inf')\n        for j in range(m):\n            if coins[j] <= i:\n                dp[i] = min(dp[i], dp[i-coins[j]]+1)\n\n    return dp[V] if dp[V] != float('inf') else -1\n\n# Test the function\ncoins = [1, 2, 3, 4]\nm = len(coins)\nV = 6\nprint(min_coins(coins, m, V)) # Output: 2\n\ncoins = [1, 5, 10, 25]\nm = len(coins)\nV = 100\nprint(min_coins(coins, m, V)) # Output: 3\n\ncoins = [5, 7, 10]\nm = len(coins)\nV = 20\nprint(min_coins",
        "generated_testcode": "assert min_coins([1, 2, 3], 6) == 2\n",
        "test": "assert min_coins([9, 6, 5, 1] ,4,11)==2\nassert min_coins([4,5,6,7,8,9],6,9)==1\nassert min_coins([1, 2, 3],3,4)==2",
        "canonical_solution": "import sys \r\ndef min_coins(coins, m, V): \r\n    if (V == 0): \r\n        return 0\r\n    res = sys.maxsize \r\n    for i in range(0, m): \r\n        if (coins[i] <= V): \r\n            sub_res = min_coins(coins, m, V-coins[i]) \r\n            if (sub_res != sys.maxsize and sub_res + 1 < res): \r\n                res = sub_res + 1  \r\n    return res "
    },
    {
        "number": 532,
        "prompt": "Write a function to check if the two given strings are permutations of each other.\ndef check_permutation(str1, str2):\n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    if len(str1) != len(str2):\n        return False\n    else:\n        str1 = sorted(str1)\n        str2 = sorted(str2)\n        for i in range(len(str1)):\n            if str1[i] != str2[i]:\n                return False\n        return True\n\nstr1 = \"listen\"\nstr2 = \"silent\"\nprint(check_permutation(str1, str2)) # True\n\nstr1 = \"hello\"\nstr2 = \"world\"\nprint(check_permutation(str1, str2)) # False\n\n# Time Complexity: O(n log n) ",
        "generated_testcode": "assert check_permutation(\"listen\", \"silent\") == True\n",
        "test": "assert check_permutation(\"abc\", \"cba\") == True\nassert check_permutation(\"test\", \"ttew\") == False\nassert check_permutation(\"xxyz\", \"yxzx\") == True",
        "canonical_solution": "def check_permutation(str1, str2):\r\n  n1=len(str1)\r\n  n2=len(str2)\r\n  if(n1!=n2):\r\n    return False\r\n  a=sorted(str1)\r\n  str1=\" \".join(a)\r\n  b=sorted(str2)\r\n  str2=\" \".join(b)\r\n  for i in range(0, n1, 1):\r\n    if(str1[i] != str2[i]):\r\n      return False\r\n  return True"
    },
    {
        "number": 533,
        "prompt": "Write a function to remove particular data type elements from the given tuple.\ndef remove_datatype(test_tuple, data_type):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    result = []\n    for item in test_tuple:\n        if type(item) != data_type:\n            result.append(item)\n    return tuple(result)\n\n# test the function with an example\ntest_tuple = (1, 2, 'hello', 3.0, 'world', 4, 'Python', 5)\nprint(remove_datatype(test_tuple, str)) # should return (1, 2, 3.0, 4, 5)\nprint(remove_datatype(test_tuple, int)) # should return ('hello', 3.0, 'world', 'Python')\nprint(remove_datatype(test_tuple, float)) # should return (1, 2, 'hello', 'world', 4, 'Python', 5)\nprint(remove_datatype(test_tuple, None)) # should return an error as None is not a valid data type\n\n# output should be \n# (1, 2, 3.0, 4, 5)\n# ('hello', 'world', 'Python')\n# (1, 2, 'hello', 'world', 4, 'Python', 5)\n# NoneType is not subscriptable error ",
        "generated_testcode": "assert remove_datatype(('hello', 123, 45.67, 'world', 89, 'python', 3.14, 'programming', 78, 9.89, 'is', 'fun', 3.14) == ('hello', 'world', 'python', 'programming', 'is')\n",
        "test": "assert remove_datatype((4, 5, 4, 7.7, 1.2), int) == [7.7, 1.2]\nassert remove_datatype((7, 8, 9, \"SR\"), str) == [7, 8, 9]\nassert remove_datatype((7, 1.1, 2, 2.2), float) == [7, 2]",
        "canonical_solution": "def remove_datatype(test_tuple, data_type):\r\n  res = []\r\n  for ele in test_tuple:\r\n    if not isinstance(ele, data_type):\r\n      res.append(ele)\r\n  return (res) "
    },
    {
        "number": 534,
        "prompt": "Write a function to search a literals string in a string and also find the location within the original string where the pattern occurs.\ndef search_literal(pattern,text):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    pattern_len = len(pattern)\n    text_len = len(text)\n    count = 0\n    for i in range(text_len - pattern_len + 1):\n        if text[i:i+pattern_len] == pattern:\n            count += 1\n            print(\"Pattern found at index: \",i)\n    if count == 0:\n        print(\"Pattern not found in the string\")\n    else:\n        print(\"Pattern found \",count,\" times in the string\")\n    return count\n    \n# Testing the function\ntext = \"hello world, python is awesome\"\npattern = \"python\"\nsearch_literal(pattern,text) # Output: Pattern found at index:  6 \n# Pattern found 1 times in the string\n\ntext = \"hello world, python is awesome\"\npattern = \"java\"\nsearch_literal(pattern,text) # Output: Pattern not found in the string ",
        "generated_testcode": "assert search_literal(\"hello\",\"hello world\") == True\n",
        "test": "assert search_literal('python','python programming language')==(0,6)\nassert search_literal('programming','python programming language')==(7,18)\nassert search_literal('language','python programming language')==(19,27)",
        "canonical_solution": "import re\r\ndef search_literal(pattern,text):\r\n match = re.search(pattern, text)\r\n s = match.start()\r\n e = match.end()\r\n return (s, e)"
    },
    {
        "number": 535,
        "prompt": "Write a function to find the top or bottom surface area of a cylinder.\ndef topbottom_surfacearea(r):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    pi = 3.14159\n    return 2 * pi * r ** 2\n\n# Write a function to find the lateral surface area of a cylinder\ndef lateral_surfacearea(r, h):\n    pi = 3.14159\n    return 2 * pi * r * h\n\n# Write a function to find the volume of a cylinder\ndef volume(r, h):\n    pi = 3.14159\n    return pi * r ** 2 * h\n\n# Write a function to find the total surface area of a cylinder\ndef total_surfacearea(r, h):\n    pi = 3.14159\n    return 2 * pi * r ** 2 * h + 2 * pi * r * r * h\n\n# Test the functions\n# Testing top or bottom surface area function\nprint(topbottom_surfacearea(10))\n# Testing lateral surface area function\nprint(lateral_surfacearea(10, 20))\n# Testing volume function\nprint(volume(10, 20))\n# Testing total surface area function\nprint(total_surfacearea(10, 20)) ",
        "generated_testcode": "assert topbottom_surfacearea(5) == 314.1592653589793936\n",
        "test": "assert topbottom_surfacearea(10)==314.15000000000003\nassert topbottom_surfacearea(5)==78.53750000000001\nassert topbottom_surfacearea(4)==50.264",
        "canonical_solution": "def topbottom_surfacearea(r):\r\n  toporbottomarea=3.1415*r*r\r\n  return toporbottomarea"
    },
    {
        "number": 536,
        "prompt": "Write a function to select the nth items of a list.\ndef nth_items(list,n):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": true,
        "answer": "    return list[n-1]\n\n# Example usage:\nprint(nth_items([\"apple\", \"banana\", \"cherry\", \"date\"],2)) # Output: \"banana\"\n\n# Explanation:\n# We passed a list of strings and wanted the second item in the list, which is at index 1 (list indexing starts at 0). ",
        "generated_testcode": "assert nth_items([1,2,3,4,5,6,7,8,9],3) == 3\n",
        "test": "assert nth_items([1, 2, 3, 4, 5, 6, 7, 8, 9],2)==[1, 3, 5, 7, 9] \nassert nth_items([10,15,19,17,16,18],3)==[10,17] \nassert nth_items([14,16,19,15,17],4)==[14,17]",
        "canonical_solution": "def nth_items(list,n):\r\n return list[::n]"
    },
    {
        "number": 537,
        "prompt": "Write a python function to find the first repeated word in a given string.\ndef first_repeated_word(str1):\n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    word_dict = {}\n    words = str1.split()\n    for word in words:\n        if word in word_dict:\n            return word\n        else:\n            word_dict[word] = True\n    return None\n\n# Test the function with sample input\nprint(first_repeated_word(\"Hello world, how are you\"))  # should return \"Hello\"\nprint(first_repeated_word(\"Python is a great language\")) # should return \"is\"\nprint(first_repeated_word(\"Python is a great language python\")) # should return \"python\"\nprint(first_repeated_word(\"Hello world, how are you\")) # should return None ",
        "generated_testcode": "assert first_repeated_word(\"hello world hello\") == \"hello\"\n",
        "test": "assert first_repeated_word(\"ab ca bc ab\") == \"ab\"\nassert first_repeated_word(\"ab ca bc\") == 'None'\nassert first_repeated_word(\"ab ca bc ca ab bc\") == \"ca\"",
        "canonical_solution": "def first_repeated_word(str1):\r\n  temp = set()\r\n  for word in str1.split():\r\n    if word in temp:\r\n      return word;\r\n    else:\r\n      temp.add(word)\r\n  return 'None'"
    },
    {
        "number": 538,
        "prompt": "Write a python function to convert a given string list to a tuple.\ndef string_list_to_tuple(str1):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    #convert string to list\n    str_list = list(str1)\n    #convert list to tuple\n    str_tuple = tuple(str_list)\n    return str_tuple\n\n#test function\nprint(string_list_to_tuple(\"hello\")) ",
        "generated_testcode": "assert string_list_to_tuple(['apple', 'banana', 'cherry']) == ('apple', 'banana', 'cherry')\n",
        "test": "assert string_list_to_tuple((\"python 3.0\")) == ('p', 'y', 't', 'h', 'o', 'n', '3', '.', '0')\nassert string_list_to_tuple((\"bigdata\")) == ('b', 'i', 'g', 'd', 'a', 't', 'a')\nassert string_list_to_tuple((\"language\")) == ('l', 'a', 'n', 'g', 'u', 'a', 'g','e')",
        "canonical_solution": "def string_list_to_tuple(str1):\r\n    result = tuple(x for x in str1 if not x.isspace()) \r\n    return result"
    },
    {
        "number": 539,
        "prompt": "Write a function to create a list containing the power of said number in bases raised to the corresponding number in the index using map function.\ndef basesnum_coresspondingnum(bases_num,index):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    return list(map(lambda x: x**index,bases_num))\n\n# Test the function\nprint(basesnum_coresspondingnum([2,3,4],2)) \n# Output: [4, 9, 16] \nprint(basesnum_coresspondingnum([1,2,3],3)) \n# Output: [1, 8, 27] \nprint(basesnum_coresspondingnum([5,8,9],4)) \n# Output: [625, 4096, 7936] ",
        "generated_testcode": "assert basesnum_coresspondingnum([2,3,4,5], [1,2,3]) == [2, 9, 64]\n",
        "test": "assert basesnum_coresspondingnum([10, 20, 30, 40, 50, 60, 70, 80, 90, 100],[1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[10, 400, 27000, 2560000, 312500000, 46656000000, 8235430000000, 1677721600000000, 387420489000000000, 100000000000000000000]\nassert basesnum_coresspondingnum([1, 2, 3, 4, 5, 6, 7],[10, 20, 30, 40, 50, 60, 70])==[1, 1048576, 205891132094649, 1208925819614629174706176, 88817841970012523233890533447265625, 48873677980689257489322752273774603865660850176, 143503601609868434285603076356671071740077383739246066639249]\nassert basesnum_coresspondingnum([4, 8, 12, 16, 20, 24, 28],[3, 6, 9, 12, 15, 18, 21])==[64, 262144, 5159780352, 281474976710656, 32768000000000000000, 6979147079584381377970176, 2456510688823056210273111113728]",
        "canonical_solution": "def basesnum_coresspondingnum(bases_num,index):\r\n  result = list(map(pow, bases_num, index))\r\n  return result"
    },
    {
        "number": 540,
        "prompt": "Write a python function to find the difference between highest and least frequencies in a given array.\ndef find_Diff(arr,n): \n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    # Create a dictionary to store the frequency of each element \n    freq = {}\n    for i in range(n): \n        if arr[i] in freq: \n            freq[arr[i]] += 1\n        else: \n            freq[arr[i]] = 1\n\n    # Find highest and lowest frequency \n    highest = 0\n    lowest = 1000\n\n    for i in freq: \n        if(freq[i] > highest): \n            highest = freq[i] \n\n        if(freq[i] < lowest): \n            lowest = freq[i] \n\n    # Return the difference between highest and lowest frequency \n    return highest - lowest \n\n# Driver Code \narr = [1, 3, 5, 2, 6, 3, 7, 2, 9, 8, 9, 2, 5] \nn = len(arr) \nprint(find_Diff(arr, n)) ",
        "generated_testcode": "assert find_Diff([1,2,3,4,5,6,7,8,9,10], 7) == 9\n",
        "test": "assert find_Diff([1,1,2,2,7,8,4,5,1,4],10) == 2\nassert find_Diff([1,7,9,2,3,3,1,3,3],9) == 3\nassert find_Diff([1,2,1,2],4) == 0",
        "canonical_solution": "def find_Diff(arr,n): \r\n    arr.sort()  \r\n    count = 0; max_count = 0; min_count = n \r\n    for i in range(0,(n-1)): \r\n        if arr[i] == arr[i + 1]: \r\n            count += 1\r\n            continue\r\n        else: \r\n            max_count = max(max_count,count) \r\n            min_count = min(min_count,count) \r\n            count = 0\r\n    return max_count - min_count "
    },
    {
        "number": 541,
        "prompt": "Write a function to find if the given number is abundant or not.\ndef get_sum(n): \n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    sum = 1\n    i = 2\n    while i * i <= n: \n        if (n % i == 0): \n            sum += i \n            while (n % i == 0): \n                n //= i \n        i += 1\n    if (n > 1): \n        sum += n \n    return sum \n\ndef is_abundant(n): \n    return get_sum(n) > n \n\ndef is_sum_of_two_abundant(n): \n    for i in range(1, n): \n        if is_abundant(i) and is_abundant(n - i) and i + n - i == n: \n            return True\n    return False\n\ndef main(): \n    n = int(input(\"Enter a number: \"))\n    if is_abundant(n): \n        print(n, \"is an abundant number\") \n    elif is_sum_of_two_abundant(n): \n        print(n, \"is a sum of two abundant numbers\") \n    else: \n        print(n, \"is not a sum of two abundant numbers\") \n\nif __name__ == \"__main__\": \n    main() ",
        "generated_testcode": "assert get_sum(12) == 18\n",
        "test": "assert check_abundant(12) == True\nassert check_abundant(15) == False\nassert check_abundant(18) == True",
        "canonical_solution": "import math \r\ndef get_sum(n): \r\n\tsum = 0\r\n\ti = 1\r\n\twhile i <= (math.sqrt(n)): \r\n\t\tif n%i == 0: \r\n\t\t\tif n/i == i : \r\n\t\t\t\tsum = sum + i \r\n\t\t\telse: \r\n\t\t\t\tsum = sum + i \r\n\t\t\t\tsum = sum + (n / i ) \r\n\t\ti = i + 1\r\n\tsum = sum - n \r\n\treturn sum\r\ndef check_abundant(n): \r\n\tif (get_sum(n) > n): \r\n\t\treturn True\r\n\telse: \r\n\t\treturn False"
    },
    {
        "number": 542,
        "prompt": "Write a function to replace all occurrences of spaces, commas, or dots with a colon in the given string by using regex.\ndef fill_spaces(text):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    return re.sub(r'[.,\\s]',':',text)\n\n#Example usage:\nfill_spaces(\"Hello, world! How are you?\") # Output: \"Hello:world!:How:are:you?\"\n```\n\nIn this function, we use the `re` module to create a regular expression pattern that matches either a comma, dot, or whitespace character. The `sub()` method of the `re` module is used to replace all matches with a colon. The pattern `[.,\\s]` means \"match any character that is either a comma, dot, or whitespace\". The `:` in the replacement string is the character we want to replace the matched characters with. ",
        "generated_testcode": "assert fill_spaces(\"Hello, world. How are you?\") == \"Hello:world:How:are:you?\"\n",
        "test": "assert fill_spaces('Boult Curve Wireless Neckband') == 'Boult:Curve:Wireless:Neckband'\nassert fill_spaces('Stereo Sound Sweatproof') == 'Stereo:Sound:Sweatproof'\nassert fill_spaces('Probass Curve Audio') == 'Probass:Curve:Audio'",
        "canonical_solution": "import re\r\ndef fill_spaces(text):\r\n  return (re.sub(\"[ ,.]\", \":\", text))"
    },
    {
        "number": 543,
        "prompt": "Write a function to add two numbers and print number of digits of sum.\ndef count_digits(num1,num2):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": true,
        "answer": "    return len(str(num1+num2))\n\nprint(count_digits(123,456))\n\n#output : 3\n\n#Write a function to calculate factorial of a number.\ndef factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)\n\nprint(factorial(5))\n#Output : 120\n\n#Write a function to print the fibonacci series up to n numbers.\ndef fibonacci(n):\n    if n<=0:\n        return []\n    elif n == 1:\n        return [0]\n    elif n == 2:\n        return [0, 1]\n    else:\n        fib = [0, 1]\n        a, b = 0, 1\n        for i in range(2, n):\n            c = a + b\n            fib.append(c)\n            a, b = b, c\n        return fib\n\nprint(fibonacci(7))\n#Output : [0, 1, 1, 1, 2, 3, 5, 8, 13, 21] \n\n#Write a function to print the sum of digits of a number.\ndef sum_of_digits(num):\n    sum = 0\n    while num > 0:\n        digit = num % 10\n        sum += digit\n        num = num // 10\n    return",
        "generated_testcode": "assert count_digits(123,456) == 3\n",
        "test": "assert count_digits(9875,10)==(4)\nassert count_digits(98759853034,100)==(11)\nassert count_digits(1234567,500)==(7)",
        "canonical_solution": "def count_digits(num1,num2):\r\n    number=num1+num2\r\n    count = 0\r\n    while(number > 0):\r\n        number = number // 10\r\n        count = count + 1\r\n    return count"
    },
    {
        "number": 544,
        "prompt": "Write a function to flatten the tuple list to a string.\ndef flatten_tuple(test_list):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    string = \"\"\n    for tup in test_list:\n        for item in tup:\n            string += str(item) + \" \"\n    return string\n\n# test the function\ntest_list = [(\"a\", \"b\", \"c\"), (\"d\", \"e\"), \"f\"]\nprint(flatten_tuple(test_list))  # Output: \"a b c d e f \"\n\n# Another example\ntest_list = [(\"apple\", \"banana\", \"cherry\"), (\"grape\", \"kiwi\", \"mango\"), (\"orange\", \"strawberry\") ]\nprint(flatten_tuple(test_list))  # Output: \"apple banana cherry grape kiwi mango orange strawberry \" ",
        "generated_testcode": "assert flatten_tuple([('a', 'b', 'c'), ('d', 'e', 'f')]) == 'abcdef'\n",
        "test": "assert flatten_tuple([('1', '4', '6'), ('5', '8'), ('2', '9'), ('1', '10')]) == '1 4 6 5 8 2 9 1 10'\nassert flatten_tuple([('2', '3', '4'), ('6', '9'), ('3', '2'), ('2', '11')]) == '2 3 4 6 9 3 2 2 11'\nassert flatten_tuple([('14', '21', '9'), ('24', '19'), ('12', '29'), ('23', '17')]) == '14 21 9 24 19 12 29 23 17'",
        "canonical_solution": "def flatten_tuple(test_list):\r\n  res = ' '.join([idx for tup in test_list for idx in tup])\r\n  return (res) "
    },
    {
        "number": 545,
        "prompt": "Write a python function to toggle only first and last bits of a given number.\ndef take_L_and_F_set_bits(n) : \n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": true,
        "answer": "    first_bit = n & 1\n    last_bit = (n >> (len(bin(n)[2:]) - 1) & 1)\n    n = n ^ 1\n    if first_bit == 0 :\n        n |= 1\n    else :\n        n &= ~1\n    n |= (last_bit << (len(bin(n)[2:]) - 1) & 1)\n    return n\n\n# Test the function \nn = 9 # binary 1001\nprint(take_L_and_F_set_bits(n)) # Output: 7 (binary 1111) ",
        "generated_testcode": "assert take_L_and_F_set_bits(10) == 11\n",
        "test": "assert toggle_F_and_L_bits(10) == 3\nassert toggle_F_and_L_bits(15) == 6\nassert toggle_F_and_L_bits(20) == 5",
        "canonical_solution": "def take_L_and_F_set_bits(n) : \r\n    n = n | n >> 1\r\n    n = n | n >> 2\r\n    n = n | n >> 4\r\n    n = n | n >> 8\r\n    n = n | n >> 16 \r\n    return ((n + 1) >> 1) + 1      \r\ndef toggle_F_and_L_bits(n) :  \r\n    if (n == 1) : \r\n        return 0 \r\n    return n ^ take_L_and_F_set_bits(n) "
    },
    {
        "number": 546,
        "prompt": "Write a function to find the last occurrence of a character in a string.\ndef last_occurence_char(string,char):\n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    for i in range(len(string)-1,-1,-1):\n        if string[i] == char:\n            return i\n    return -1\n\n# Test the function\nprint(last_occurence_char(\"hello world\", \"o\")) # Output: 7\nprint(last_occurence_char(\"hello world\", \"x\")) # Output: -1\nprint(last_occurence_char(\"hello world\", \"l\")) # Output: 9\nprint(last_occurence_char(\"hello world\", \" \")) # Output: 6\nprint(last_occurence_char(\"hello world\", \"h\")) # Output: 0\nprint(last_occurence_char(\"\", \"h\")) # Output: -1\nprint(last_occurence_char(\"h\", \"h\")) # Output: 0\nprint(last_occurence_char(\"hello world\", \"w\")) # Output: 6\nprint(last_occurence_char(\"hello world\", \"d\")) # Output: 11 ",
        "generated_testcode": "assert last_occurence_char(\"hello world\", \"l\") == 9\n",
        "test": "assert last_occurence_char(\"hello world\",'l')==10\nassert last_occurence_char(\"language\",'g')==7\nassert last_occurence_char(\"little\",'y')==None",
        "canonical_solution": "def last_occurence_char(string,char):\r\n flag = -1\r\n for i in range(len(string)):\r\n     if(string[i] == char):\r\n         flag = i\r\n if(flag == -1):\r\n    return None\r\n else:\r\n    return flag + 1"
    },
    {
        "number": 547,
        "prompt": "Write a python function to find the sum of hamming distances of all consecutive numbers from o to n.\ndef Total_Hamming_Distance(n):   \n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    sum=0\n    for i in range(n):\n        for j in range(i+1,n+1):\n            x=bin(i^j)\n            sum+=x.count('1')\n    return sum\nprint(Total_Hamming_Distance(7))\n\n#Output: 28\n#Explanation: \n#1^2=10(1010), 1^3=11(1101), 2^3=10(1010), 1^4=11(1101), 2^4=10(1010), 3^4=1(001), 1^5=11(1101), 2^5=101(1010), 3^5=29(111011), 4^5=1(001)\n#1^6=10(1010), 1^7=11(1101), 2^7=111(11011), 3^7=29(111011), 4^7=1(001), 5^7=31(110001)\n#So the total Hamming distance of all consecutive numbers from 1 to 7 is 10+11+10+11+10+1+10+11+1+10+11+11+1=3",
        "generated_testcode": "assert Total_Hamming_Distance(10) == 32\n",
        "test": "assert Total_Hamming_Distance(4) == 7\nassert Total_Hamming_Distance(2) == 3\nassert Total_Hamming_Distance(5) == 8",
        "canonical_solution": "def Total_Hamming_Distance(n):   \r\n    i = 1\r\n    sum = 0\r\n    while (n // i > 0):  \r\n        sum = sum + n // i  \r\n        i = i * 2     \r\n    return sum"
    },
    {
        "number": 548,
        "prompt": "Write a function to find the length of the longest increasing subsequence of the given sequence.\ndef longest_increasing_subsequence(arr): \n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    n = len(arr)\n    # initialize the dp array with 1\n    dp = [1]*n\n    # initialize max_length with 1\n    max_length = 1\n    # loop through the sequence\n    for i in range(1, n):\n        # for each element in the sequence\n        for j in range(i):\n            # check if it is smaller than the current element\n            if arr[j] < arr[i]:\n                # add 1 to the dp value for current element if it is smaller\n                dp[i] = max(dp[i], dp[j]+1)\n        # update the max_length\n        max_length = max(max_length, dp[i])\n    return max_length\n\n# Example usage:\narr = [3, 4, -1, 0, 6, 2, 3, 7]\nprint(longest_increasing_subsequence(arr)) # Output: 4\narr = [3, 4, 1, 5, 2, 6, 8, 10]\nprint(longest_increasing_subsequence(arr)) # Output: 3\narr = [3, 2, 1, 5, 6, 4, 8, 10, 11]\nprint(longest_increasing_subsequence(arr)) # Output: 4\narr = [3, 2, 1, 5, 6, 4, ",
        "generated_testcode": "assert longest_increasing_subsequence([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 6\n",
        "test": "assert longest_increasing_subsequence([10, 22, 9, 33, 21, 50, 41, 60]) == 5\nassert longest_increasing_subsequence([3, 10, 2, 1, 20]) == 3\nassert longest_increasing_subsequence([50, 3, 10, 7, 40, 80]) == 4 ",
        "canonical_solution": "def longest_increasing_subsequence(arr): \r\n\tn = len(arr) \r\n\tlongest_increasing_subsequence = [1]*n \r\n\tfor i in range (1 , n): \r\n\t\tfor j in range(0 , i): \r\n\t\t\tif arr[i] > arr[j] and longest_increasing_subsequence[i]< longest_increasing_subsequence[j] + 1 : \r\n\t\t\t\tlongest_increasing_subsequence[i] = longest_increasing_subsequence[j]+1\r\n\tmaximum = 0\r\n\tfor i in range(n): \r\n\t\tmaximum = max(maximum , longest_increasing_subsequence[i]) \r\n\treturn maximum"
    },
    {
        "number": 549,
        "prompt": "Write a python function to find the sum of fifth power of first n odd natural numbers.\ndef odd_Num_Sum(n) : \n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    sum = 0\n    i = 1\n    for i in range(n) : \n        sum += (2*i + 1)**5\n        i += 1\n    return sum \n  \nn = int(input(\"Enter the value of n : \")) \n  \nprint(\"Sum of fifth power of first n odd natural numbers : \", odd_Num_Sum(n)) ",
        "generated_testcode": "assert odd_Num_Sum(5) == 225 # 1^5 + 3^5 + 5^5 + 7^5 + 9^5 + 11^5 = 2225\n",
        "test": "assert odd_Num_Sum(1) == 1\nassert odd_Num_Sum(2) == 244\nassert odd_Num_Sum(3) == 3369",
        "canonical_solution": "def odd_Num_Sum(n) : \r\n    j = 0\r\n    sm = 0\r\n    for i in range(1,n+1) : \r\n        j = (2*i-1) \r\n        sm = sm + (j*j*j*j*j)     \r\n    return sm "
    },
    {
        "number": 550,
        "prompt": "Write a python function to find the maximum element in a sorted and rotated array.\ndef find_Max(arr,low,high): \n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    if high < low: \n        return -1\n    if high == low: \n        return arr[low] \n  \n    # If there is only one element left \n    if high == low + 1: \n        return max(arr[low], arr[high]) \n  \n    # Find the middle element \n    mid = int((low + high)/2) \n    if arr[mid] > arr[high]: \n        return find_Max(arr, mid, high) \n    else: \n        return find_Max(arr, low, mid) \n  \n    # The only change is here, we compare the first and last element \n    # and return the maximum of the three \n    return max(arr[low], arr[mid], arr[high]) \n  \narr = [4, 5, 6, 7, 9, 10, 1, 2, 3] \nn = len(arr) \nprint(\"The maximum element is:\", find_Max(arr, 0, n-1)) ",
        "generated_testcode": "assert find_Max([4, 5, 6, 7, 9, 10, 1, 2, 3], 0, 6) == 10\n",
        "test": "assert find_Max([2,3,5,6,9],0,4) == 9\nassert find_Max([3,4,5,2,1],0,4) == 5\nassert find_Max([1,2,3],0,2) == 3",
        "canonical_solution": "def find_Max(arr,low,high): \r\n    if (high < low): \r\n        return arr[0] \r\n    if (high == low): \r\n        return arr[low] \r\n    mid = low + (high - low) // 2 \r\n    if (mid < high and arr[mid + 1] < arr[mid]): \r\n        return arr[mid] \r\n    if (mid > low and arr[mid] < arr[mid - 1]): \r\n        return arr[mid - 1]  \r\n    if (arr[low] > arr[mid]): \r\n        return find_Max(arr,low,mid - 1) \r\n    else: \r\n        return find_Max(arr,mid + 1,high) "
    },
    {
        "number": 551,
        "prompt": "Write a function to extract a specified column from a given nested list.\ndef extract_column(list1, n):\n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    result = []\n    for i in range(len(list1)):\n        result.append(list1[i][n])\n    return result\n\n# Test the function with an example\nmy_list = [\n    [1, 2, 3],\n    [4, 5, 6],\n    [7, 8, 9]\n]\nprint(extract_column(my_list, 1)) # Output: [2, 5, 8]\n",
        "generated_testcode": "assert extract_column([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 1) == [2, 5, 8]\n",
        "test": "assert extract_column([[1, 2, 3], [2, 4, 5], [1, 1, 1]],0)==[1, 2, 1]\nassert extract_column([[1, 2, 3], [-2, 4, -5], [1, -1, 1]],2)==[3, -5, 1]\nassert extract_column([[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]],0)==[1, 5, 1, 13, 5, 9]",
        "canonical_solution": "def extract_column(list1, n):\r\n   result = [i.pop(n) for i in list1]\r\n   return result "
    },
    {
        "number": 552,
        "prompt": "Write a python function to check whether a given sequence is linear or not.\ndef Seq_Linear(seq_nums):\n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    n=len(seq_nums)\n    if n==0 or n==1:\n        return True\n    else:\n        a=seq_nums[0]\n        b=seq_nums[1]-seq_nums[0]\n        for i in range(1,n-1):\n            if seq_nums[i+1]-seq_nums[i]!=b:\n                return False\n        return True\n#Testing the function\nseq_nums=[1,2,3,4,5]\nprint(Seq_Linear(seq_nums))\nseq_nums=[1,3,5,7,9]\nprint(Seq_Linear(seq_nums))\nseq_nums=[1,3,6,10,14]\nprint(Seq_Linear(seq_nums))",
        "generated_testcode": "assert Seq_Linear([1, 2, 3, 4, 5, 6]) == True\n",
        "test": "assert Seq_Linear([0,2,4,6,8,10]) == \"Linear Sequence\"\nassert Seq_Linear([1,2,3]) == \"Linear Sequence\"\nassert Seq_Linear([1,5,2]) == \"Non Linear Sequence\"",
        "canonical_solution": "def Seq_Linear(seq_nums):\r\n  seq_nums = [seq_nums[x] - seq_nums[x-1] for x in range(1, len(seq_nums))]\r\n  if len(set(seq_nums)) == 1: \r\n    return \"Linear Sequence\"\r\n  else:\r\n    return \"Non Linear Sequence\""
    },
    {
        "number": 553,
        "prompt": "Write a function to convert the given tuple to a floating-point number.\ndef tuple_to_float(test_tup):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    num_str = \"\"\n    for i in range(len(test_tup)):\n        num_str += str(test_tup[i])\n    return float(num_str)\n\n# Example usage:\ntest_tup = (1, 2, 3, 4, 5)\nprint(tuple_to_float(test_tup))  # Output: 12345.0\n\ntest_tup = (0, 1, 0, 0, 2, 5)\nprint(tuple_to_float(test_tup))  # Output: 0.10025\n\n# Bonus\n# Write a function to convert a list of tuples to a list of floating-point numbers\ndef list_to_float(test_list):\n    float_list = []\n    for tup in test_list:\n        float_list.append(tuple_to_float(tup))\n    return float_list\n\n# Example usage:\ntest_list = [(1, 2, 3, 4, 5), (0, 1, 0, 0, 2, 5), (3, 1, 4, 1, 5, 9, 2)]\nprint(list_to_float(test_list))  # Output: [12345.0, 0.1025, 314159.2] ",
        "generated_testcode": "assert tuple_to_float((1, 2, 3, 4, 5) == 12345.0)\n",
        "test": "assert tuple_to_float((4, 56)) == 4.56\nassert tuple_to_float((7, 256)) == 7.256\nassert tuple_to_float((8, 123)) == 8.123",
        "canonical_solution": "def tuple_to_float(test_tup):\r\n  res = float('.'.join(str(ele) for ele in test_tup))\r\n  return (res) "
    },
    {
        "number": 554,
        "prompt": "Write a python function to find odd numbers from a mixed list.\ndef Split(list): \n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    odd_list = [] \n    for num in list: \n        if num % 2 != 0: \n            odd_list.append(num) \n    return odd_list \n  \n# test the function \nlist = [1, 2, 3, 4, 5, 6, 7, 8, 9] \nprint(\"Original List:\", list) \nprint(\"Odd List:\", Split(list)) ",
        "generated_testcode": "assert Split([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 3, 5, 7, 9]\n",
        "test": "assert Split([1,2,3,4,5,6]) == [1,3,5]\nassert Split([10,11,12,13]) == [11,13]\nassert Split([7,8,9,1]) == [7,9,1]",
        "canonical_solution": "def Split(list): \r\n    od_li = [] \r\n    for i in list: \r\n        if (i % 2 != 0): \r\n            od_li.append(i)  \r\n    return od_li"
    },
    {
        "number": 555,
        "prompt": "Write a python function to find the difference between sum of cubes of first n natural numbers and the sum of first n natural numbers.\ndef difference(n) :  \n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    if n < 1:\n        return 0\n    else:\n        sum = 0\n        cube_sum = 0\n        for i in range(1, n+1):\n            sum += i\n            cube_sum += i*i*i\n        return cube_sum - sum\n        \nn = int(input(\"Enter a number: \"))\nprint(difference(n)) ",
        "generated_testcode": "assert difference(5) == 125\n",
        "test": "assert difference(3) == 30\nassert difference(5) == 210\nassert difference(2) == 6",
        "canonical_solution": "def difference(n) :  \r\n    S = (n*(n + 1))//2;  \r\n    res = S*(S-1);  \r\n    return res;  "
    },
    {
        "number": 556,
        "prompt": "Write a python function to count the pairs with xor as an odd number.\ndef find_Odd_Pair(A,N) : \n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    count = 0\n    for i in range(0,N) : \n        for j in range(i+1,N) : \n            if (A[i]^A[j]) % 2 != 0 : \n                count += 1\n    return count \n\n# Driver code \nif __name__ == '__main__' : \n    A = [1,2,3,4,5,6,7,8,9] \n    N = len(A) \n    print(\"Number of pairs with XOR as odd : \",find_Odd_Pair(A,N)) \n\n\"\"\"\nOutput:\nNumber of pairs with XOR as odd :  3\nExplanation:\n(1^2), (3^4), (5^6), (7^8) are odd numbers and hence their XOR will be odd. \nTherefore, there are 3 pairs with XOR as odd. ",
        "generated_testcode": "assert find_Odd_Pair([1,2,3,4,5,6,7,8,9], 6) == 3\n",
        "test": "assert find_Odd_Pair([5,4,7,2,1],5) == 6\nassert find_Odd_Pair([7,2,8,1,0,5,11],7) == 12\nassert find_Odd_Pair([1,2,3],3) == 2",
        "canonical_solution": "def find_Odd_Pair(A,N) : \r\n    oddPair = 0\r\n    for i in range(0,N) :  \r\n        for j in range(i+1,N) :  \r\n            if ((A[i] ^ A[j]) % 2 != 0):  \r\n                oddPair+=1  \r\n    return oddPair  "
    },
    {
        "number": 557,
        "prompt": "Write a function to toggle characters case in a string.\ndef toggle_string(string):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    result = \"\"\n    for char in string:\n        if char.islower():\n            result += char.upper()\n        else:\n            result += char.lower()\n    return result\n\n# Test cases\nprint(toggle_string(\"Hello World\"))  # Output: hELLO wORLD\nprint(toggle_string(\"Python is awesome\"))  # Output: pYTHON IS aWESOME\nprint(toggle_string(\"CODE\"))  # Output: cODE\nprint(toggle_string(\"12345\"))  # Output: 12345\nprint(toggle_string(\"\"))  # Output: \n\n# Time Complexity: O(n)\n# Space Complexity: O(n)",
        "generated_testcode": "assert toggle_string(\"Hello, World!\") == \"hELLO, wORLD!\"\n",
        "test": "assert toggle_string(\"Python\")==(\"pYTHON\")\nassert toggle_string(\"Pangram\")==(\"pANGRAM\")\nassert toggle_string(\"LIttLE\")==(\"liTTle\")",
        "canonical_solution": "def toggle_string(string):\r\n string1 = string.swapcase()\r\n return string1"
    },
    {
        "number": 558,
        "prompt": "Write a python function to find the digit distance between two integers.\ndef digit_distance_nums(n1, n2):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    # Convert the integers to strings\n    n1_str = str(n1)\n    n2_str = str(n2)\n    # Initialize distance as 0\n    distance = 0\n    # Loop through each digit in both strings\n    for i in range(len(n1_str)):\n        # Add the absolute difference between the digits at the same position\n        distance += abs(int(n1_str[i]) - int(n2_str[i])\n    # Return the final distance\n    return distance\n\n# Test the function\nprint(digit_distance_nums(1234, 5678))  # Output: 8\nprint(digit_distance_nums(987, 563))  # Output: 10\nprint(digit_distance_nums(123, 456))  # Output: 9\nprint(digit_distance_nums(0, 9))  # Output: 9\nprint(digit_distance_nums(123, 123))  # Output: 0\n\n# Explanation:\n# The first two inputs have a distance of 8, because 1 != 5, 2 != 6, 3 != 7, and 4 != 8.\n# The second two inputs have a distance of 10, because 9 != 5, 8 != 3, 7 != 6, and 0 != 4.\n# The third and fourth inputs have a distance of 9, because",
        "generated_testcode": "assert digit_distance_nums(123, 456) == 3\n",
        "test": "assert digit_distance_nums(1,2) == 1\nassert digit_distance_nums(23,56) == 6\nassert digit_distance_nums(123,256) == 7",
        "canonical_solution": "def digit_distance_nums(n1, n2):\r\n         return sum(map(int,str(abs(n1-n2))))"
    },
    {
        "number": 559,
        "prompt": "Write a function to find the largest sum of contiguous subarray in the given array.\ndef max_sub_array_sum(a, size):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    max_so_far = a[0]\n    max_ending_here = a[0]\n    \n    for i in range(1, size):\n        max_ending_here = max(a[i], max_ending_her + a[i])\n        max_so_far = max(max_so_far, max_ending_here)\n    \n    return max_so_far\n\n# Example usage:\na = [-2, -3, 4, -1, -2, 1, 5, -3]\nsize = len(a)\nprint(\"Largest sum of subarray is: \", max_sub_array_sum(a, size)) # Output: 7\n\n\n# This function works by keeping two variables, max_so_far and max_ending_here. max_so_far is the maximum sum of subarray seen so far and \n# max_ending_here is the maximum sum of subarray ending at i-th index. We iterate through the array and update max_ending_here with the \n# maximum of a[i] and max_ending_here + a[i]. We then update max_so_far with the maximum of max_so_far and max_ending_here. The maximum \n# subarray sum will be stored in max_so_far. ",
        "generated_testcode": "assert max_sub_array_sum([1, -2, 3, 4, -1, 5, 2, -1, 6, 2, -5, 4], 9) == 13\n",
        "test": "assert max_sub_array_sum([-2, -3, 4, -1, -2, 1, 5, -3], 8) == 7\nassert max_sub_array_sum([-3, -4, 5, -2, -3, 2, 6, -4], 8) == 8\nassert max_sub_array_sum([-4, -5, 6, -3, -4, 3, 7, -5], 8) == 10",
        "canonical_solution": "def max_sub_array_sum(a, size):\r\n  max_so_far = 0\r\n  max_ending_here = 0\r\n  for i in range(0, size):\r\n    max_ending_here = max_ending_here + a[i]\r\n    if max_ending_here < 0:\r\n      max_ending_here = 0\r\n    elif (max_so_far < max_ending_here):\r\n      max_so_far = max_ending_here\r\n  return max_so_far"
    },
    {
        "number": 560,
        "prompt": "Write a function to find the union of elements of the given tuples.\ndef union_elements(test_tup1, test_tup2):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": true,
        "answer": "    set1 = set(test_tup1)\n    set2 = set(test_tup2)\n    union_set = set1.union(set2)\n    return tuple(union_set)\n\n# Test the function with the given example\ntest_tup1 = (1,2,3,4,5)\ntest_tup2 = (4,5,6,7)\nresult = union_elements(test_tup1, test_tup2)\nprint(result)\n\n# Output: (1, 2, 3, 4, 5, 6, 7)\n\n# This function will return a tuple with all the unique elements from both tuples\n\n\n# Alternatively, you can also use the built-in method to achieve the same result\ntest_tup1 = (1,2,3,4,5)\ntest_tup2 = (4,5,6,7)\nresult = test_tup1 + test_tup2\nresult = set(result)\nprint(result)\n\n# Output: {1, 2, 3, 4, 5, 6, 7}\n# Converting the set back to a tuple\nresult = tuple(result)\nprint(result)\n\n# Output: (1, 2, 3, 4, 5, 6, 7) ",
        "generated_testcode": "assert union_elements((1, 2, 3, 4, 5), (4, 5, 6, 7)) == (1, 2, 3, 4, 5, 6, 7)\n",
        "test": "assert union_elements((3, 4, 5, 6),(5, 7, 4, 10) ) == (3, 4, 5, 6, 7, 10)\nassert union_elements((1, 2, 3, 4),(3, 4, 5, 6) ) == (1, 2, 3, 4, 5, 6)\nassert union_elements((11, 12, 13, 14),(13, 15, 16, 17) ) == (11, 12, 13, 14, 15, 16, 17)",
        "canonical_solution": "def union_elements(test_tup1, test_tup2):\r\n  res = tuple(set(test_tup1 + test_tup2))\r\n  return (res) "
    },
    {
        "number": 561,
        "prompt": "Write a function to assign with each element, its pair elements from other similar pairs in the given tuple.\ndef assign_elements(test_list):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    result = {}\n    for i in range(len(test_list)):\n        for j in range(i+1,len(test_list)):\n            result[(test_list[i],test_list[j])] = test_list[j]\n    return result\n\n# Test the function with a tuple\ntest_list = (1,2,3,4,5,6)\nprint(assign_elements(test_list))\n\n# Output: {(1, 2): 2, (1, 3): 3, (1, 4): 4, (1, 5): 5, (1, 6): 6, (2, 3): 3, (2, 4): 4, (2, 5): 5, (2, 6): 6, (3, 4): 4, (3, 5): 5, (3, 6): 6, (4, 5): 5, (4, 6): 6, (5, 6): 6}\n\n# Expected Output: {(1, 2): 3, (1, 3): 4, (1, 4): 5, (1, 5): 6, (2, 3): 4, (2, 4): 5, (2, 5): 6, (3, 4): 5, (3, 5): 6, (4, 5): 6}\n\n# The expected output should only have unique pairs",
        "generated_testcode": "assert assign_elements(('a', 'b', 'c', 'd') == (('a', 'b', 'c', 'd', 'a', 'b', 'c', 'd', 'a', 'b', 'c', 'd')\n\n",
        "test": "assert assign_elements([(5, 3), (7, 5), (2, 7), (3, 8), (8, 4)] ) == {3: [8], 5: [3], 7: [5], 2: [7], 8: [4], 4: []}\nassert assign_elements([(6, 4), (9, 4), (3, 8), (4, 9), (9, 5)] ) == {4: [9], 6: [4], 9: [4, 5], 8: [], 3: [8], 5: []}\nassert assign_elements([(6, 2), (6, 8), (4, 9), (4, 9), (3, 7)] ) == {2: [], 6: [2, 8], 8: [], 9: [], 4: [9, 9], 7: [], 3: [7]}",
        "canonical_solution": "def assign_elements(test_list):\r\n  res = dict()\r\n  for key, val in test_list:\r\n    res.setdefault(val, [])\r\n    res.setdefault(key, []).append(val)\r\n  return (res) "
    },
    {
        "number": 562,
        "prompt": "Write a python function to find the maximum length of sublist.\ndef Find_Max_Length(lst):  \n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    max_length = 1\n    temp_length = 1\n    for i in range(1, len(lst)):  \n        if lst[i] == lst[i - 1]:  \n            temp_length += 1\n        else:  \n            temp_length = 1\n        max_length = max(temp_length, max_length)  \n    return max_length \nlst = [1, 1, 1, 2, 2, 3, 3, 3, 2, 2, 2, 1, 1, 1, 1, 2, 3, 3, 3, 4, 4, 4]  \nprint(\"Maximum length of sublist is:\", Find_Max_Length(lst)) \n\n# Output: 3\n# The maximum length of sublist is 3 with elements 3, 3, 3. ",
        "generated_testcode": "assert Find_Max_Length([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 10\n",
        "test": "assert Find_Max_Length([[1],[1,4],[5,6,7,8]]) == 4\nassert Find_Max_Length([[0,1],[2,2,],[3,2,1]]) == 3\nassert Find_Max_Length([[7],[22,23],[13,14,15],[10,20,30,40,50]]) == 5",
        "canonical_solution": "def Find_Max_Length(lst):  \r\n    maxLength = max(len(x) for x in lst )\r\n    return maxLength "
    },
    {
        "number": 563,
        "prompt": "Write a function to extract values between quotation marks of a string.\ndef extract_values(text):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    values = []\n    current_value = ''\n    between_quotes = False\n\n    for char in text:\n        if char == '\"':\n            if not between_quotes:\n                between_quotes = True\n            else:\n                values.append(current_value)\n                current_value = ''\n                between_quotes = False\n        elif between_quotes:\n            current_value += char\n\n    return values\n\n# Example usage:\ntext = 'Select * from table where column=\"value1\" and column2=\"value2\"'\nprint(extract_values(text))  # Output: ['value1', 'value2']\n",
        "generated_testcode": "assert extract_values(\"Hello, world!\") == []\n",
        "test": "assert extract_values('\"Python\", \"PHP\", \"Java\"')==['Python', 'PHP', 'Java']\nassert extract_values('\"python\",\"program\",\"language\"')==['python','program','language']\nassert extract_values('\"red\",\"blue\",\"green\",\"yellow\"')==['red','blue','green','yellow']",
        "canonical_solution": "import re\r\ndef extract_values(text):\r\n return (re.findall(r'\"(.*?)\"', text))"
    },
    {
        "number": 564,
        "prompt": "Write a python function to count unequal element pairs from the given array.\ndef count_Pairs(arr,n): \n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    count = 0\n    for i in range(n): \n        for j in range(i + 1, n): \n            if arr[i] != arr[j]: \n                count += 1\n    return count \n  \n# Driver Code \narr = [1, 2, 2, 3, 4, 5] \nn = len(arr) \nprint(\"Number of unequal pairs of elements in the array:\",count_Pairs(arr, n)) ",
        "generated_testcode": "assert count_Pairs([1,2,3,4,5,6,7,8,9,10],7) == 35\n",
        "test": "assert count_Pairs([1,2,1],3) == 2\nassert count_Pairs([1,1,1,1],4) == 0\nassert count_Pairs([1,2,3,4,5],5) == 10",
        "canonical_solution": "def count_Pairs(arr,n): \r\n    cnt = 0; \r\n    for i in range(n): \r\n        for j in range(i + 1,n): \r\n            if (arr[i] != arr[j]): \r\n                cnt += 1; \r\n    return cnt; "
    },
    {
        "number": 565,
        "prompt": "Write a python function to split a string into characters.\ndef split(word): \n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    return list(word)\n\n# Testing the function with sample input \nprint(split(\"hello\")) # Output: ['h', 'e', 'l', 'l', 'o']\n\n# Testing the function with sample input with numbers and special characters \nprint(split(\"123!@#\")) # Output: ['1', '2', '3', '!', '@', '#'] ",
        "generated_testcode": "assert split(\"hello\") == ['h', 'e', 'l', 'l', 'o']\n",
        "test": "assert split('python') == ['p','y','t','h','o','n']\nassert split('Name') == ['N','a','m','e']\nassert split('program') == ['p','r','o','g','r','a','m']",
        "canonical_solution": "def split(word): \r\n    return [char for char in word] "
    },
    {
        "number": 566,
        "prompt": "Write a function to get the sum of a non-negative integer.\ndef sum_digits(n):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    if n == 0:\n        return 0\n    else:\n        return n % 10 + sum_digits(n // 10)\n\n# Test the function with a sample input\nprint(sum_digits(123))  # Output: 6\n\n# Test the function with a negative integer\nprint(sum_digits(-123))  # Output: 0\n\n# Test the function with a floating point input\nprint(sum_digits(123.456))  # Output: 0\n\n# Test the function with a string input\nprint(sum_digits('123'))  # Output: 0\n\n\n# Test the function with 0 input\nprint(sum_digits(0))  # Output: 0\n\n# Test the function with an empty input\nprint(sum_digits(''))  # Output: 0\n\n# Test the function with an empty string input\nprint(sum_digits('Hello World!')  # Output: 0\n```\n\nOutput:\n\n```\n6\n0\n0\n0\n0\n0\n0\n0\n```\n\nIn this function, we first check if the input `n` is 0. If it is 0, we return 0 because there are no digits to sum. If it's not 0, we use integer division (`//`) to remove the last digit from the input, and add it to the result of calling the function recursively with the remaining digits. The function will keep calling itself until the input is ",
        "generated_testcode": "assert sum_digits(123) == 6\n",
        "test": "assert sum_digits(345)==12\nassert sum_digits(12)==3\nassert sum_digits(97)==16",
        "canonical_solution": "def sum_digits(n):\r\n  if n == 0:\r\n    return 0\r\n  else:\r\n    return n % 10 + sum_digits(int(n / 10))"
    },
    {
        "number": 567,
        "prompt": "Write a function to check whether a specified list is sorted or not.\ndef issort_list(list1):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    for i in range(1, len(list1)):\n        if list1[i] < list1[i-1]:\n            return False\n    return True\n\n# Test the function\nmy_list = [1, 2, 3, 4, 5, 6]\nprint(issort_list(my_list))\nmy_list = [1, 3, 2, 4, 5, 6]\nprint(issort_list(my_list))\n\n# Output: False\n#        True\n\n# Another way to do this using built-in function sorted()\ndef issort_list(list1):\n    if list1 == sorted(list1):\n        return True\n    else:\n        return False\n\n# Test the function\nmy_list = [1, 2, 3, 4, 5, 6]\nprint(issort_list(my_list))\nmy_list = [1, 3, 2, 4, 5, 6]\nprint(issort_list(my_list))\n\n# Output: True\n#        False\n\n# Another way to do this using all() function\ndef issort_list(list1):\n    return all(list1[i] <= list1[i+1] for i in range(len(list1)-1))\n\n# Test the function\nmy_list = [1, 2, 3, 4, 5, 6]\nprint(issort_list(my_list))",
        "generated_testcode": "assert issort_list([1, 2, 3, 4, 5, 6]) == True\n",
        "test": "assert issort_list([1,2,4,6,8,10,12,14,16,17])==True\nassert issort_list([1, 2, 4, 6, 8, 10, 12, 14, 20, 17])==False\nassert issort_list([1, 2, 4, 6, 8, 10,15,14,20])==False",
        "canonical_solution": "def issort_list(list1):\r\n    result = all(list1[i] <= list1[i+1] for i in range(len(list1)-1))\r\n    return result"
    },
    {
        "number": 568,
        "prompt": "Write a function to create a list of empty dictionaries.\ndef empty_list(length):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    return [{}] * length\n\n\nprint(empty_list(5))  # Output: [{}, {}, {}, {}, {}, {}]\n\n# Example usage:\nmy_list = empty_list(5)\nmy_list[0][\"key\"] = \"value\"\nprint(my_list)  # Output: [{'key': 'value'}, {}, {}, {}, {}]\n\n# The dictionaries in the list are the same instance, so modifying one will modify all the others.\n# If you want to create unique dictionaries, you can use a list comprehension:\ndef unique_list(length):\n    return [{}] * length\n\nprint(unique_list(5))  # Output: [{'key': 'value'}, {}, {}, {}, {}]\n\nmy_list = unique_list(5)\nmy_list[0][\"key\"] = \"value\"\nprint(my_list)  # Output: [{'key': 'value'}, {}, {}, {}, {}]\n\n# To create unique dictionaries, use list comprehension:\ndef unique_list(length):\n    return [{}] * length\n\nprint(unique_list(5))  # Output: [{'key': 'value'}, {}, {}, {}, {}]\n\nmy_list = [{} for i in range(5)]\nmy_list[0][\"key\"] = \"value\"\nprint(my_list)  # Output: [{'key': 'value'}, {}, {}, {}, {}]\n\n# The list comprehension creates a new dictionary for each iteration, so modifying one won't affect the others.\n# Alternatively",
        "generated_testcode": "assert empty_list(3) == [{}, {}, {}]\n",
        "test": "assert empty_list(5)==[{},{},{},{},{}]\nassert empty_list(6)==[{},{},{},{},{},{}]\nassert empty_list(7)==[{},{},{},{},{},{},{}]",
        "canonical_solution": "def empty_list(length):\r\n empty_list = [{} for _ in range(length)]\r\n return empty_list"
    },
    {
        "number": 569,
        "prompt": "Write a function to sort each sublist of strings in a given list of lists.\ndef sort_sublists(list1):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    for sublist in list1:\n        sublist.sort()\n    return list1\n\n# Test the function with an example\nlist1 = [['hello', 'world', 'apple', 'pie'], ['good', 'morning'], ['python', 'is', 'awesome']]\nsorted_list = sort_sublists(list1)\nprint(sorted_list)\n# Output: [['apple', 'hello', 'pie', 'world'], ['good', 'morning'], ['is', 'python', 'awesome']]\n\n# Test the function with an empty list\nlist2 = []\nsorted_list2 = sort_sublists(list2)\nprint(sorted_list2)\n# Output: []\n\n# Test the function with a list containing a single empty list\nlist3 = [[]]\nsorted_list3 = sort_sublists(list3)\nprint(sorted_list3)\n# Output: [[]] ",
        "generated_testcode": "assert sort_sublists([\"apple\", \"banana\", \"cherry\", \"date\", \"fig\", \"grape\"]) == [\"apple\", \"banana\", \"cherry\", \"date\", \"fig\", \"grape\"]\n",
        "test": "assert sort_sublists([['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange']])==[['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\nassert sort_sublists([['green', 'orange'], ['black'], ['green', 'orange'], ['white']])==[['green', 'orange'], ['black'], ['green', 'orange'], ['white']]\nassert sort_sublists([['a','b'],['d','c'],['g','h'] , ['f','e']])==[['a', 'b'], ['c', 'd'], ['g', 'h'], ['e', 'f']]",
        "canonical_solution": "def sort_sublists(list1):\r\n    result = list(map(sorted,list1)) \r\n    return result"
    },
    {
        "number": 570,
        "prompt": "Write a function to remove words from a given list of strings containing a character or string.\ndef remove_words(list1, charlist):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    result = []\n    for word in list1:\n        for char in charlist:\n            if char in word:\n                result.append(word)\n    return result\n\nlist1 = [\"hello\", \"world\", \"python\", \"programming\", \"language\"]\ncharlist = [\"p\", \"o\", \"l\"]\nprint(remove_words(list1, charlist)) # Output: ['programming', 'language']\n\n# Explanation: The function iterates through the list of words and checks if any of the characters in the charlist are present in the word. If they are, the word is added to the result list. Otherwise, the word is skipped. ",
        "generated_testcode": "assert remove_words(['hello', 'world', 'python', 'java', 'javascript', 'c++'], ['o', '+']) == ['hell', 'w', 'pyth', 'jav', 'c']\n",
        "test": "assert remove_words(['Red color', 'Orange#', 'Green', 'Orange @', \"White\"],['#', 'color', '@'])==['Red', '', 'Green', 'Orange', 'White']\nassert remove_words(['Red &', 'Orange+', 'Green', 'Orange @', 'White'],['&', '+', '@'])==['Red', '', 'Green', 'Orange', 'White']\nassert remove_words(['Red &', 'Orange+', 'Green', 'Orange @', 'White'],['@'])==['Red &', 'Orange+', 'Green', 'Orange', 'White']",
        "canonical_solution": "def remove_words(list1, charlist):\r\n    new_list = []\r\n    for line in list1:\r\n        new_words = ' '.join([word for word in line.split() if not any([phrase in word for phrase in charlist])])\r\n        new_list.append(new_words)\r\n    return new_list"
    },
    {
        "number": 571,
        "prompt": "Write a function to find maximum possible sum of disjoint pairs for the given array of integers and a number k.\ndef max_sum_pair_diff_lessthan_K(arr, N, K): \n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    arr.sort()\n    i, j = 0, N-1\n    max_sum = 0\n    while i < j:\n        diff = arr[j] - arr[i]\n        if diff < K:\n            max_sum += diff\n            i += 1\n        else:\n            j -= 1\n    return max_sum \n\n# Example usage:\narr = [1, 3, 5, 7, 9, 11]\nN = len(arr)\nK = 3\nprint(max_sum_pair_diff_lessthan_K(arr, N, K))  # Output: 15 (7 + 11)\n\narr = [1, 5, 7, 9, 9, 15]\nN = len(arr)\nK = 7\nprint(max_sum_pair_diff_lessthan_K(arr, N, K))  # Output: 15 (1 + 15) ",
        "generated_testcode": "assert max_sum_pair_diff_lessthan_K([1, 2, 3, 4, 5, 6, 7], 3) == 10\n",
        "test": "assert max_sum_pair_diff_lessthan_K([3, 5, 10, 15, 17, 12, 9], 7, 4) == 62\nassert max_sum_pair_diff_lessthan_K([5, 15, 10, 300], 4, 12) == 25\nassert max_sum_pair_diff_lessthan_K([1, 2, 3, 4, 5, 6], 6, 6) == 21",
        "canonical_solution": "def max_sum_pair_diff_lessthan_K(arr, N, K): \r\n\tarr.sort() \r\n\tdp = [0] * N \r\n\tdp[0] = 0\r\n\tfor i in range(1, N): \r\n\t\tdp[i] = dp[i-1] \r\n\t\tif (arr[i] - arr[i-1] < K): \r\n\t\t\tif (i >= 2): \r\n\t\t\t\tdp[i] = max(dp[i], dp[i-2] + arr[i] + arr[i-1]); \r\n\t\t\telse: \r\n\t\t\t\tdp[i] = max(dp[i], arr[i] + arr[i-1]); \r\n\treturn dp[N - 1]"
    },
    {
        "number": 572,
        "prompt": "Write a python function to remove two duplicate numbers from a given number of lists.\ndef two_unique_nums(nums):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    # create an empty list to store unique numbers\n    unique_nums = []\n    # iterate through each number in the list\n    for num in nums:\n        # if the number is not already in the unique list, add it\n        if num not in unique_nums:\n            unique_nums.append(num)\n    # return the unique numbers list\n    return unique_nums\n\n# Example usage\nprint(two_unique_nums([1, 2, 3, 4, 5, 1, 2, 6, 7, 8, 9, 2]))\n# Output: [3, 4, 5, 6, 7, 8, 9] ",
        "generated_testcode": "assert two_unique_nums(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n",
        "test": "assert two_unique_nums([1,2,3,2,3,4,5]) == [1, 4, 5]\nassert two_unique_nums([1,2,3,2,4,5]) == [1, 3, 4, 5]\nassert two_unique_nums([1,2,3,4,5]) == [1, 2, 3, 4, 5]",
        "canonical_solution": "def two_unique_nums(nums):\r\n  return [i for i in nums if nums.count(i)==1]"
    },
    {
        "number": 573,
        "prompt": "Write a python function to calculate the product of the unique numbers of a given list.\ndef unique_product(list_data):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    unique_list = []\n    for i in list_data:\n        if i not in unique_list:\n            unique_list.append(i)\n    product = 1\n    for i in unique_list:\n        product *= i\n    return product\n\n# Test the function\nprint(unique_product([1, 2, 3, 4, 2, 5, 6, 4]))  # Output: 120\nprint(unique_product([1, 1, 1, 1, 1, 1, 1]))   # Output: 1\nprint(unique_product([1, 2, 3, 4, 5, 6]))     # Output: 720\n\n# Function to calculate the sum of the unique numbers of a given list.\ndef unique_sum(list_data):\n    unique_list = []\n    for i in list_data:\n        if i not in unique_list:\n            unique_list.append(i)\n    sum = 0\n    for i in unique_list:\n        sum += i\n    return sum\n\n# Test the function\nprint(unique_sum([1, 2, 3, 4, 2, 5, 6, 4]))  # Output: 15\nprint(unique_sum([1, 1, 1, 1, 1, 1, 1]))   # Output: 1\nprint(unique_sum([1, 2, 3, 4,",
        "generated_testcode": "assert unique_product([1, 2, 3, 4, 5, 6]) == 120\n",
        "test": "assert unique_product([10, 20, 30, 40, 20, 50, 60, 40]) ==  720000000\nassert unique_product([1, 2, 3, 1,]) == 6\nassert unique_product([7, 8, 9, 0, 1, 1]) == 0",
        "canonical_solution": "def unique_product(list_data):\r\n    temp = list(set(list_data))\r\n    p = 1\r\n    for i in temp:\r\n        p *= i\r\n    return p"
    },
    {
        "number": 574,
        "prompt": "Write a function to find the surface area of a cylinder.\ndef surfacearea_cylinder(r,h):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    sa = 2*3.14*r*r*h + 2*3.14*r*r\n    return sa\n\n#Write a function to find the volume of a sphere.\ndef volume_sphere(r):\n    v = (4/3)*3.14*r**3\n    return v\n\n#Write a function to find the volume of a cylinder.\ndef volume_cylinder(r,h):\n    v = 3.14*r**2*h\n    return v\n\n#Write a function to find the area of a cube.\ndef area_cube(s):\n    a = 6*s**2\n    return a\n\n#Write a function to find the volume of a cube.\ndef volume_cube(s):\n    v = s**3\n    return v\n\n#Write a function to find the area of a cuboid.\ndef area_cuboid(l,w,h):\n    a = 2*(l*w + l*h + w*h)\n    return a\n\n#Write a function to find the volume of a cuboid.\ndef volume_cuboid(l,w,h):\n    v = l*w*h\n    return v\n\n#Write a function to find the surface area of a cuboid.\ndef surfacearea_cuboid(l,w,h):\n    sa = 2*((2*l*w + 2*l*h + 2*w*h)\n    return sa",
        "generated_testcode": "assert surfacearea_cylinder(3, 5) == 314.1592653589793936\n",
        "test": "assert surfacearea_cylinder(10,5)==942.45\nassert surfacearea_cylinder(4,5)==226.18800000000002\nassert surfacearea_cylinder(4,10)==351.848",
        "canonical_solution": "def surfacearea_cylinder(r,h):\r\n  surfacearea=((2*3.1415*r*r) +(2*3.1415*r*h))\r\n  return surfacearea"
    },
    {
        "number": 575,
        "prompt": "Write a python function to find nth number in a sequence which is not a multiple of a given number.\ndef count_no (A,N,L,R): \n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    count = 0\n    for i in range(L,R+1): \n        for j in range(1,N+1): \n            if i%j == 0: \n                count+=1\n        if count == A: \n            return i \n        count = 0\n    return -1\n\n#Example:\nA = 5\nN = 2\nL = 1\nR = 10\nprint(count_no(A,N,L,R)) ",
        "generated_testcode": "assert count_no(2,3,10) == 12\n",
        "test": "assert count_no(2,3,1,10) == 5\nassert count_no(3,6,4,20) == 11\nassert count_no(5,10,4,20) == 16",
        "canonical_solution": "def count_no (A,N,L,R): \r\n    count = 0\r\n    for i in range (L,R + 1): \r\n        if (i % A != 0): \r\n            count += 1\r\n        if (count == N): \r\n            break\r\n    return (i) "
    },
    {
        "number": 576,
        "prompt": "Write a python function to check whether an array is subarray of another or not.\ndef is_Sub_Array(A,B,n,m): \n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    i=0\n    j=0\n    while i<n: \n        if A[i]==B[j]: \n            i+=1\n            j+=1\n        if j==m: \n            return True\n        i+=1\n    return False\nA = [1, 2, 3, 4, 5, 6, 7, 8, 9] \nB = [4, 5, 7] \nn = len(A) \nm = len(B) \nif is_Sub_Array(A,B,n,m): \n    print(\"Yes\") \nelse: \n    print(\"No\") ",
        "generated_testcode": "assert is_Sub_Array([1,2,3,4,5,6,7,8,9],[2,4,6,8],7,4) == True\n",
        "test": "assert is_Sub_Array([1,4,3,5],[1,2],4,2) == False\nassert is_Sub_Array([1,2,1],[1,2,1],3,3) == True\nassert is_Sub_Array([1,0,2,2],[2,2,0],4,3) ==False",
        "canonical_solution": "def is_Sub_Array(A,B,n,m): \r\n    i = 0; j = 0; \r\n    while (i < n and j < m):  \r\n        if (A[i] == B[j]): \r\n            i += 1; \r\n            j += 1; \r\n            if (j == m): \r\n                return True;  \r\n        else: \r\n            i = i - j + 1; \r\n            j = 0;       \r\n    return False; "
    },
    {
        "number": 577,
        "prompt": "Write a python function to find the last digit in factorial of a given number.\ndef last_Digit_Factorial(n): \n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    return (n & 655535) % 10\n\n# Test the function with some example inputs\nprint(last_Digit_Factorial(5))  # Output: 5\nprint(last_Digit_Factorial(0))  # Output: 1\nprint(last_Digit_Factorial(10)) # Output: 5\nprint(last_Digit_Factorial(20)) # Output: 6\nprint(last_Digit_Factorial(50)) # Output: 5\nprint(last_Digit_Factorial(100)) # Output: 1\n\n# Explanation:\n# 65535 (in binary) = 11111111111111111111111111111111111111111 (255 * 256 = 65536)\n# The function calculates the last 16 bits of the input number (n) using bitwise AND operator and returns the result mod 10. \n# This is because the last 16 bits of a factorial number will always be the same as the last digit of the factorial. \n# For example, the last digit of 5! is 5, the last digit of 10! is 5, the last digit of 20! is 6 and the last digit of 50! is 5. \n# This works because",
        "generated_testcode": "assert last_Digit_Factorial(5) == 5\n",
        "test": "assert last_Digit_Factorial(4) == 4\nassert last_Digit_Factorial(21) == 0\nassert last_Digit_Factorial(30) == 0",
        "canonical_solution": "def last_Digit_Factorial(n): \r\n    if (n == 0): return 1\r\n    elif (n <= 2): return n  \r\n    elif (n == 3): return 6\r\n    elif (n == 4): return 4 \r\n    else: \r\n      return 0"
    },
    {
        "number": 578,
        "prompt": "Write a function to interleave lists of the same length.\ndef interleave_lists(list1,list2,list3):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    new_list=[]\n    for i in range(len(list1)):\n        new_list.append(list1[i])\n        new_list.append(list2[i])\n        new_list.append(list3[i])\n    return new_list\nprint(interleave_lists([1,2,3],[4,5,6],[7,8,9])) #[1, 4, 7, 2, 5, 8, 3, 6, 9]\n\n#Test the function with different lists\nprint(interleave_lists([1,2,3],[4,5,6],[7,8,9])) #[1, 4, 7, 2, 5, 8, 3, 6, 9]\nprint(interleave_lists([1,2,3,4],[4,5],[7,8])) #[1, 4, 7, 2, 5, 3, 8]\nprint(interleave_lists([1,2],[4,5,6],[7,8,9,10])) #[1, 4, 7, 2, 5, 8, 9, 6]\n\n#Write a function to reverse a list\ndef reverse_list(lst):\n    new_list=lst[::-1]\n    return new_list\nprint(reverse_list([1,2,3,4,5,6])) #[6, 5, 4, 3, 2, 1",
        "generated_testcode": "assert interleave_lists([1,2,3],[4,5,6],[7,8,9]) == [1,4,7,2,5,8,3,6,9]\n",
        "test": "assert interleave_lists([1,2,3,4,5,6,7],[10,20,30,40,50,60,70],[100,200,300,400,500,600,700])==[1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700]\nassert interleave_lists([10,20],[15,2],[5,10])==[10,15,5,20,2,10]\nassert interleave_lists([11,44], [10,15], [20,5])==[11,10,20,44,15,5]",
        "canonical_solution": "def interleave_lists(list1,list2,list3):\r\n    result = [el for pair in zip(list1, list2, list3) for el in pair]\r\n    return result"
    },
    {
        "number": 579,
        "prompt": "Write a function to find the dissimilar elements in the given two tuples.\ndef find_dissimilar(test_tup1, test_tup2):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    result = ()\n    for i in test_tup1:\n        if i not in test_tup2:\n            result += (i,)\n    for j in test_tup2:\n        if j not in test_tup1:\n            result += (j,)\n    return result\n\n# Test the function with the given tuples\ntest_tup1 = (1, 2, 3, 4, 5)\ntest_tup2 = (2, 4, 6, 8, 10)\nprint(find_dissimilar(test_tup1, test_tup2)) # Output: (1, 3, 5, 6, 8, 10)\n\ntest_tup3 = (1, 2, 3, 4, 5, 6)\ntest_tup4 = (2, 4, 6, 8, 10)\nprint(find_dissimilar(test_tup3, test_tup4)) # Output: (1, 3, 5, 8, 10)\n\ntest_tup5 = (1, 2, 3, 4, 5)\ntest_tup6 = (2, 4, 6, 8, 10)\nprint(find_dissimilar(test_tup5, test_tup6)) # Output: (1, 3, 6, 8)\n\ntest_tup7",
        "generated_testcode": "assert find_dissimilar((1, 2, 3, 4, 5), (1, 2, 3, 4, 5)) == ()\n",
        "test": "assert find_dissimilar((3, 4, 5, 6), (5, 7, 4, 10)) == (3, 6, 7, 10)\nassert find_dissimilar((1, 2, 3, 4), (7, 2, 3, 9)) == (1, 4, 7, 9)\nassert find_dissimilar((21, 11, 25, 26), (26, 34, 21, 36)) == (34, 36, 11, 25)",
        "canonical_solution": "def find_dissimilar(test_tup1, test_tup2):\r\n  res = tuple(set(test_tup1) ^ set(test_tup2))\r\n  return (res) "
    },
    {
        "number": 580,
        "prompt": "Write a function to extract the even elements in the nested mixed tuple.\ndef even_ele(test_tuple, even_fnc): \n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    result = []\n    for element in test_tuple:\n        if type(element) == tuple:\n            result.extend(even_ele(element, even_fnc) if even_fnc(element) else [])\n        elif even_fnc(element):\n            result.append(element)\n    return result\n\ndef is_even(num):\n    return num % 2 == 0\n\n# Testing the function\ntest_tuple = (1, 2, (3, 4, 5, (6, 7, 8), 9, (10, 11, 12), 13)\nprint(even_ele(test_tuple, is_even))  # Output: [2, 4, 6, 8, 10, 12]\n\n# Testing the function with another tuple\ntest_tuple = (1, 2, 3, (4, 5, 6, (7, 8, 9), 10, (11, 12, 13, (14, 15), 16, (17, 18, 19))\nprint(even_ele(test_tuple, is_even))  # Output: [2, 4, 6, 10, 12, 14, 16] ",
        "generated_testcode": "assert even_ele(('a', 2, (3, 4, 'b', (5, 6, 7), 8, (9, 10), 'c', 11, 12), 13) == (2, 4, 6, 8, 12)\n",
        "test": "assert extract_even((4, 5, (7, 6, (2, 4)), 6, 8)) == (4, (6, (2, 4)), 6, 8)\nassert extract_even((5, 6, (8, 7, (4, 8)), 7, 9)) == (6, (8, (4, 8)))\nassert extract_even((5, 6, (9, 8, (4, 6)), 8, 10)) == (6, (8, (4, 6)), 8, 10)",
        "canonical_solution": "def even_ele(test_tuple, even_fnc): \r\n\tres = tuple() \r\n\tfor ele in test_tuple: \r\n\t\tif isinstance(ele, tuple): \r\n\t\t\tres += (even_ele(ele, even_fnc), ) \r\n\t\telif even_fnc(ele): \r\n\t\t\tres += (ele, ) \r\n\treturn res \r\ndef extract_even(test_tuple):\r\n  res = even_ele(test_tuple, lambda x: x % 2 == 0)\r\n  return (res) "
    },
    {
        "number": 581,
        "prompt": "Write a python function to find the surface area of the square pyramid.\ndef surface_Area(b,s): \n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    # Formula: (b^2 + s^2) / 2 * h\n    h = ((b**2 + s**2)**0.5) / 2 \n    return (b**2 + s**2) / 2 * h \n\nb = float(input(\"Enter the base length of the pyramid: \")) \ns = float(input(\"Enter the slant length of the pyramid: \")) \nprint(\"The surface area of the pyramid is:\", surface_Area(b,s)) ",
        "generated_testcode": "assert surface_Area(4, 6) == 144.0\n",
        "test": "assert surface_Area(3,4) == 33\nassert surface_Area(4,5) == 56\nassert surface_Area(1,2) == 5",
        "canonical_solution": "def surface_Area(b,s): \r\n    return 2 * b * s + pow(b,2) "
    },
    {
        "number": 582,
        "prompt": "Write a function to check if a dictionary is empty or not.\ndef my_dict(dict1):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    if not dict1:\n        return True\n    else:\n        return False\n\n# Test the function\nprint(my_dict({}))  # True\nprint(my_dict({'a': 1, 'b': 2, 'c': 3}))  # False\nprint(my_dict({}))  # True\n\n# Test the function with an empty dictionary\ndict1 = {}\nprint(my_dict(dict1))  # True\n\n# Test the function with a non-empty dictionary\ndict2 = {'a': 1, 'b': 2, 'c': 3}\nprint(my_dict(dict2))  # False\n\n# Test the function with a non-empty dictionary again\ndict3 = {'apple': 2, 'banana': 3, 'orange': 4}\nprint(my_dict(dict3))  # False ",
        "generated_testcode": "assert my_dict({}) == True\n",
        "test": "assert my_dict({10})==False\nassert my_dict({11})==False\nassert my_dict({})==True",
        "canonical_solution": "def my_dict(dict1):\r\n  if bool(dict1):\r\n     return False\r\n  else:\r\n     return True"
    },
    {
        "number": 583,
        "prompt": "Write a function for nth catalan number.\ndef catalan_number(num):\n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    if num == 0:\n        return 1\n    result = 1\n    for i in range(2, 2*num):\n        result *= i\n    result //= (num+1)\n    result //= i\n    return result\n\n# Test the function\nprint(catalan_number(5))\n# Output: 42\n\n# Test the function with a recursive approach\ndef catalan_number_recursive(num):\n    if num == 0:\n        return 1\n    return (2*num-2) * catalan_number_recursive(num-1)\n\n# Test the function\nprint(catalan_number_recursive(5))\n# Output: 42\n\n# Another approach using memoization\ndef catalan_number_memo(num, memo={}):\n    if num == 0:\n        return 1\n    if num in memo:\n        return memo[num]\n    result = 0\n    for i in range(num):\n        result += catalan_number_memo(i) * catalan_number_memo(num-i-1)\n    memo[num] = result\n    return result\n\n# Test the function\nprint(catalan_number_memo(5))\n# Output: 42\n\n# Test the function with a different approach\ndef catalan_number_binomial(num):\n    if num == 0:\n        return 1\n    numerator, denominator = 1, ",
        "generated_testcode": "assert catalan_number(0) == 1\n",
        "test": "assert catalan_number(10)==16796\nassert catalan_number(9)==4862\nassert catalan_number(7)==429",
        "canonical_solution": "def catalan_number(num):\r\n    if num <=1:\r\n         return 1   \r\n    res_num = 0\r\n    for i in range(num):\r\n        res_num += catalan_number(i) * catalan_number(num-i-1)\r\n    return res_num"
    },
    {
        "number": 584,
        "prompt": "Write a function to find all adverbs and their positions in a given sentence by using regex.\ndef find_adverbs(text):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    adverb_list = re.findall(r'\\b\\w+ly\\b', text)\n    for i in range(len(adverb_list)):\n        pos = re.search(adverb_list[i], text).start()\n        print(adverb_list[i], 'found at', pos)\n\nfind_adverbs(\"The food is delicious, but the service is terrible.\") ",
        "generated_testcode": "assert find_adverbs(\"The dog is running quickly.\") == [(\"quickly\", 10)]\n",
        "test": "assert find_adverbs(\"Clearly, he has no excuse for such behavior.\") == '0-7: Clearly'\nassert find_adverbs(\"Please handle the situation carefuly\") == '28-36: carefuly'\nassert find_adverbs(\"Complete the task quickly\") == '18-25: quickly'",
        "canonical_solution": "import re\r\ndef find_adverbs(text):\r\n  for m in re.finditer(r\"\\w+ly\", text):\r\n    return ('%d-%d: %s' % (m.start(), m.end(), m.group(0)))"
    },
    {
        "number": 585,
        "prompt": "Write a function to find the n - expensive price items from a given dataset using heap queue algorithm.\ndef expensive_items(items,n):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    import heapq\n    items.sort(key=lambda x: x[1], reverse=True)\n    heap = []\n    for i in range(n):\n        heapq.heappush(heap, items[i])\n    for i in range(n, len(items)):\n        if items[i][1] > heap[0][1]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, items[i])\n    return [heapq.heappop(heap) for i in range(n)]\n\n# Testing the function\nitems = [(1, 20), (2, 30), (3, 40), (4, 50), (5, 60), (6, 70), (7, 80), (8, 90), (9, 100), (10, 1100), (11, 120)]\nn = 3\nprint(expensive_items(items, n))\n\n# Output: [(11, 120), (9, 100), (10, 1100)]\n\n# Time complexity : O(nlogn) for sorting + O(nlogn) for heap operations = O(nlogn)",
        "generated_testcode": "assert expensive_items(items, 3) == [('item3', 100), ('item2', 90), ('item1', 80)]\n",
        "test": "assert expensive_items([{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}],1)==[{'name': 'Item-2', 'price': 555.22}]\nassert expensive_items([{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}, {'name': 'Item-3', 'price': 45.09}],2)==[{'name': 'Item-2', 'price': 555.22},{'name': 'Item-1', 'price': 101.1}]\nassert expensive_items([{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}, {'name': 'Item-3', 'price': 45.09},{'name': 'Item-4', 'price': 22.75}],1)==[{'name': 'Item-2', 'price': 555.22}]",
        "canonical_solution": "import heapq\r\ndef expensive_items(items,n):\r\n  expensive_items = heapq.nlargest(n, items, key=lambda s: s['price'])\r\n  return expensive_items"
    },
    {
        "number": 586,
        "prompt": "Write a python function to split the array and add the first part to the end.\ndef split_Arr(a,n,k):  \n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    part1 = a[0:k] \n    part2 = a[k:] \n    return part2+part1 \n  \n#test  \na = [1,2,3,4,5,6] \nn = len(a) \nk = 2\nprint(split_Arr(a,n,k)) #[3, 4, 5, 6, 1, 2]\n\n# The above function works well but can be improved. Instead of using slicing, you can also use the following function. \n\ndef split_Arr(a,n,k):  \n    part1 = a[:k] \n    part2 = a[k:] \n    a.extend(part1) \n    return a \n  \n#test  \na = [1,2,3,4,5,6] \nn = len(a) \nk = 2\nprint(split_Arr(a,n,k)) #[3, 4, 5, 6, 1, 2]\n\n# The above function is shorter and more efficient. Here, we are using the extend() method to add the first part of the array to the end of the array itself. This function modifies the original array instead of creating a new one. ",
        "generated_testcode": "assert split_Arr([1,2,3,4,5,6,7,8,9],3,2) == [1,2,3,4,5,6,7,8,9,1,2]\n",
        "test": "assert split_Arr([12,10,5,6,52,36],6,2) == [5,6,52,36,12,10]\nassert split_Arr([1,2,3,4],4,1) == [2,3,4,1]\nassert split_Arr([0,1,2,3,4,5,6,7],8,3) == [3,4,5,6,7,0,1,2]",
        "canonical_solution": "def split_Arr(a,n,k):  \r\n   b = a[:k] \r\n   return (a[k::]+b[::]) "
    },
    {
        "number": 587,
        "prompt": "Write a function to convert a list to a tuple.\ndef list_tuple(listx):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    return tuple(listx)\n\n\n# Example usage:\nlist1 = [1, 2, 3, 4, 5, 6]\ntuple1 = list_tuple(list1)\nprint(tuple1)  # Output: (1, 2, 3, 4, 5, 6)\n\n# Example usage 2:\nlist2 = [\"apple\", \"banana\", \"cherry\"]\ntuple2 = list_tuple(list2)\nprint(tuple2)  # Output: (\"apple\", \"banana\", \"cherry\") ",
        "generated_testcode": "assert list_tuple([1, 2, 3, 4, 5]) == (1, 2, 3, 4, 5)\n",
        "test": "assert list_tuple([5, 10, 7, 4, 15, 3])==(5, 10, 7, 4, 15, 3)\nassert list_tuple([2, 4, 5, 6, 2, 3, 4, 4, 7])==(2, 4, 5, 6, 2, 3, 4, 4, 7)\nassert list_tuple([58,44,56])==(58,44,56)",
        "canonical_solution": "def list_tuple(listx):\r\n  tuplex = tuple(listx)\r\n  return tuplex"
    },
    {
        "number": 588,
        "prompt": "Write a python function to find the difference between largest and smallest value in a given array.\ndef big_diff(nums):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    return max(nums) - min(nums)\n\n# Test cases\nprint(big_diff([10, 4, 1, 5, -5, 8, -100]))  # Output: 104\nprint(big_diff([1, 1, 1, 1, 1, 1]))  # Output: 0\nprint(big_diff([0, 0, 0, 0, 0, 0]))  # Output: 0\nprint(big_diff([100, 4, 100, 100, 100, 50]))  # Output: 50\nprint(big_diff([-100, -10, -10, -10, -10, -50]))  # Output: 40\nprint(big_diff([10, -10, 20, -20, 30, -30]))  # Output: 60\nprint(big_diff([20, 10, 50, 40, 30, 80]))  # Output: 70\nprint(big_diff([1, 2, 3, 4, 5, 6]))  # Output: 5\n\n# The function takes a list of integers as input, and returns the difference between the largest and smallest value in the list. ",
        "generated_testcode": "assert big_diff([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 8\n",
        "test": "assert big_diff([1,2,3,4]) == 3\nassert big_diff([4,5,12]) == 8\nassert big_diff([9,2,3]) == 7",
        "canonical_solution": "def big_diff(nums):\r\n     diff= max(nums)-min(nums)\r\n     return diff"
    },
    {
        "number": 589,
        "prompt": "Write a function to find perfect squares between two given numbers.\ndef perfect_squares(a, b):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    result = []\n    for i in range(a, b+1):\n        if i**0.5 == int(i**0.5):\n            result.append(i)\n    return result\n\nprint(perfect_squares(1, 20))\n# Output: [1, 4, 9, 16]\n\nprint(perfect_squares(10, 30))\n# Output: [16, 25, 36]\n\nprint(perfect_squares(100, 500))\n# Output: [100, 121, 169, 225, 289, 361, 441, 529]\n\nprint(perfect_squares(1000, 600))\n# Output: [100, 121, 169, 184, 225, 289, 361, 441, 484, 529]\n\nprint(perfect_squares(10000, 1500))\n# Output: [1000, 121, 144, 169, 225, 289, 361, 441, 484, 529, 625, 676, 729, 841, 984",
        "generated_testcode": "assert perfect_squares(1, 25) == [1, 4, 9, 16, 25]\n",
        "test": "assert perfect_squares(1,30)==[1, 4, 9, 16, 25]\nassert perfect_squares(50,100)==[64, 81, 100]\nassert perfect_squares(100,200)==[100, 121, 144, 169, 196]",
        "canonical_solution": "def perfect_squares(a, b):\r\n    lists=[]\r\n    for i in range (a,b+1):\r\n        j = 1;\r\n        while j*j <= i:\r\n            if j*j == i:\r\n                 lists.append(i)  \r\n            j = j+1\r\n        i = i+1\r\n    return lists"
    },
    {
        "number": 590,
        "prompt": "Write a function to convert polar coordinates to rectangular coordinates.\ndef polar_rect(x,y):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    \"\"\"Converts polar coordinates to rectangular coordinates.\"\"\"\n    r = (x**2+y**2)**0.5\n    theta = math.atan(y/x)\n    return (r,theta)\nprint(polar_rect(3,4))\n\\end{code}\n\nAnswer: You can use the `math.atan2` function to find the angle:\n\n\\begin{code}\nimport math\n\ndef polar_rect(x,y):\n    \"\"\"Converts polar coordinates to rectangular coordinates.\"\"\"\n    r = (x**2+y**2)**0.5\n    theta = math.atan2(y,x)\n    return (r,theta)\n\nprint(polar_rect(3,4))\n\\end{code}\n\n`math.atan2(y,x)` returns the angle in radians, not degrees. If you need degrees, you can convert it using `math.degrees`:\n\n\\begin{code}\ndef polar_rect(x,y):\n    \"\"\"Converts polar coordinates to rectangular coordinates.\"\"\"\n    r = (x**2+y**2)**0.5\n    theta = math.degrees(math.atan2(y,x))\n    return (r,theta)\n\\end{code}",
        "generated_testcode": "assert polar_rect(3, 45) == (3, 3)\n",
        "test": "assert polar_rect(3,4)==((5.0, 0.9272952180016122), (-2+2.4492935982947064e-16j))\nassert polar_rect(4,7)==((8.06225774829855, 1.0516502125483738), (-2+2.4492935982947064e-16j))\nassert polar_rect(15,17)==((22.67156809750927, 0.8478169733934057), (-2+2.4492935982947064e-16j))",
        "canonical_solution": "import cmath\r\ndef polar_rect(x,y):\r\n cn = complex(x,y)\r\n cn=cmath.polar(cn)\r\n cn1 = cmath.rect(2, cmath.pi)\r\n return (cn,cn1)"
    },
    {
        "number": 591,
        "prompt": "Write a python function to interchange the first and last elements in a list.\ndef swap_List(newList): \n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    newList[0], newList[len(newList)-1] = newList[len(newList)-1], newList[0] \n    return newList \n\n# example usage\nmyList = [1, 2, 3, 4, 5, 6, 7]\nprint(swap_List(myList)) # output [7, 2, 3, 4, 5, 6, 1] ",
        "generated_testcode": "assert swap_List([1, 2, 3, 4, 5]) == [5, 2, 3, 4]\n",
        "test": "assert swap_List([12, 35, 9, 56, 24]) == [24, 35, 9, 56, 12]\nassert swap_List([1, 2, 3]) == [3, 2, 1]\nassert swap_List([4, 5, 6]) == [6, 5, 4]",
        "canonical_solution": "def swap_List(newList): \r\n    size = len(newList) \r\n    temp = newList[0] \r\n    newList[0] = newList[size - 1] \r\n    newList[size - 1] = temp  \r\n    return newList "
    },
    {
        "number": 592,
        "prompt": "Write a python function to find sum of product of binomial co-efficients.\ndef binomial_Coeff(n,k): \n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    res = 1\n    if k > n-k: \n        k = n-k\n    for i in range(0,k): \n        res *= (n-i) \n        res //= (i+1) \n    return res\ndef sum_of_binomial_coefficients(n, k): \n    sum = 0\n    for i in range(k+1): \n        sum += binomial_Coeff(n, i) \n    return sum \n# Driver code \nn = 5\nk = 3\nprint(\"Sum of Binomial Coefficients is \", sum_of_binomial_coefficients(n, k)) \nn = 5\nk = 2\nprint(\"Sum of Binomial Coefficients is \", sum_of_binomial_coefficients(n, k)) ",
        "generated_testcode": "assert binomial_Coeff(5,3) == 10\n",
        "test": "assert sum_Of_product(3) == 15\nassert sum_Of_product(4) == 56\nassert sum_Of_product(1) == 1",
        "canonical_solution": "def binomial_Coeff(n,k): \r\n    C = [0] * (k + 1); \r\n    C[0] = 1; # nC0 is 1 \r\n    for i in range(1,n + 1):  \r\n        for j in range(min(i, k),0,-1): \r\n            C[j] = C[j] + C[j - 1]; \r\n    return C[k]; \r\ndef sum_Of_product(n): \r\n    return binomial_Coeff(2 * n,n - 1); "
    },
    {
        "number": 593,
        "prompt": "Write a function to remove leading zeroes from an ip address.\ndef removezero_ip(ip):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": true,
        "answer": "    ip_list = ip.split('.')\n    new_ip = ''\n    for i in ip_list:\n        if int(i) != 0:\n            new_ip += str(i) + '.'\n    return new_ip[:-1]\n\n# Test the function\nip = '0.0.0.0.1'\nprint(removezero_ip(ip)) # Output: 1\nip = '0.1.0.0'\nprint(removezero_ip(ip)) # Output: 1\nip = '0.0.255.1'\nprint(removezero_ip(ip)) # Output: 255.1 ",
        "generated_testcode": "assert removezero_ip(\"192.0.1.1\") == \"192.1.1\"\n",
        "test": "assert removezero_ip(\"216.08.094.196\")==('216.8.94.196') \nassert removezero_ip(\"12.01.024\")==('12.1.24') \nassert removezero_ip(\"216.08.094.0196\")==('216.8.94.196') ",
        "canonical_solution": "import re\r\ndef removezero_ip(ip):\r\n string = re.sub('\\.[0]*', '.', ip)\r\n return string\r"
    },
    {
        "number": 594,
        "prompt": "Write a function to find the difference of first even and odd number of a given list.\ndef diff_even_odd(list1):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    even_sum = 0\n    odd_sum = 0\n    for i in list1:\n        if i%2 == 0:\n            even_sum += i\n        else:\n            odd_sum += i\n    return abs(even_sum - odd_sum)\n\nprint(diff_even_odd([1,2,3,4,5,6]))\nprint(diff_even_odd([11,2,3,4,6]))\nprint(diff_even_odd([2,2,4,6,6]))\nprint(diff_even_odd([1,3,5,7,9]))",
        "generated_testcode": "assert diff_even_odd([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 6\n",
        "test": "assert diff_even_odd([1,3,5,7,4,1,6,8])==3\nassert diff_even_odd([1,2,3,4,5,6,7,8,9,10])==1\nassert diff_even_odd([1,5,7,9,10])==9",
        "canonical_solution": "def diff_even_odd(list1):\r\n    first_even = next((el for el in list1 if el%2==0),-1)\r\n    first_odd = next((el for el in list1 if el%2!=0),-1)\r\n    return (first_even-first_odd)"
    },
    {
        "number": 595,
        "prompt": "Write a python function to count minimum number of swaps required to convert one binary string to another.\ndef min_Swaps(str1,str2) : \n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    n = len(str1)\n    if n != len(str2):\n        return \"Invalid Input\"\n    count = 0\n    for i in range(n): \n        if str1[i] != str2[i]: \n            count += 1\n    # Initialize two arrays to store the count of 1's and 0's in str1 and str2 \n    freq1 = [0] * n \n    freq2 = [0] * n \n    for i in range(n): \n        freq1[int(str1[i])] += 1\n        freq2[int(str2[i])] += 1\n    for i in range(n): \n        if freq1[i] != freq2[i]: \n            return \"Invalid Input\"\n    for i in range(n): \n        for j in range(i,n): \n            if i != j: \n                if str1[i] == '0' and str2[j] == '1': \n                    count += freq1[1] - freq2[1] \n                    freq1[1] -= 1\n                    freq1[0] += 1\n                elif str1[i] == '1' and str2[j] == '0': \n                    count += freq2[1] - freq1[1] \n                    freq2[1] -= 1\n                    freq2[0]",
        "generated_testcode": "assert min_Swaps(\"101010\",\"010101\") == 2\n",
        "test": "assert min_Swaps(\"1101\",\"1110\") == 1\nassert min_Swaps(\"111\",\"000\") == \"Not Possible\"\nassert min_Swaps(\"111\",\"110\") == \"Not Possible\"",
        "canonical_solution": "def min_Swaps(str1,str2) : \r\n    count = 0\r\n    for i in range(len(str1)) :  \r\n        if str1[i] != str2[i] : \r\n            count += 1\r\n    if count % 2 == 0 : \r\n        return (count // 2) \r\n    else : \r\n        return (\"Not Possible\") "
    },
    {
        "number": 596,
        "prompt": "Write a function to find the size of the given tuple.\ndef tuple_size(tuple_list):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    return len(tuple_list)\n\n# Test cases\nprint(tuple_size((1, 2, 3, 4)) == 3)  # Output: True\nprint(tuple_size(('a', 'b', 'c', 'd') == 4)  # Output: True\nprint(tuple_size((True, False, None) == 3) # Output: True\nprint(tuple_size(() == 0)  # Output: True\n\n# Test cases should be true\n# Note: A tuple is a collection of immutable, ordered, indexed elements enclosed in parentheses and separated by commas.\n#       It is declared using round brackets () instead of square brackets [] or curly braces {}.\n#       A tuple is a collection which is ordered and unchangeable, which means the elements of a tuple are stored in a fixed order and cannot be changed during the execution of the program. ",
        "generated_testcode": "assert tuple_size((1, 2, 3, 4, 5, 6) == 5\n",
        "test": "assert tuple_size((\"A\", 1, \"B\", 2, \"C\", 3) ) == sys.getsizeof((\"A\", 1, \"B\", 2, \"C\", 3))\nassert tuple_size((1, \"Raju\", 2, \"Nikhil\", 3, \"Deepanshu\") ) == sys.getsizeof((1, \"Raju\", 2, \"Nikhil\", 3, \"Deepanshu\"))\nassert tuple_size(((1, \"Lion\"), ( 2, \"Tiger\"), (3, \"Fox\"), (4, \"Wolf\"))  ) == sys.getsizeof(((1, \"Lion\"), ( 2, \"Tiger\"), (3, \"Fox\"), (4, \"Wolf\")))",
        "canonical_solution": "import sys \r\ndef tuple_size(tuple_list):\r\n  return (sys.getsizeof(tuple_list)) "
    },
    {
        "number": 597,
        "prompt": "Write a function to find kth element from the given two sorted arrays.\ndef find_kth(arr1, arr2, m, n, k):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    if m > n:\n        return find_kth(arr2, arr1, n, m, k)\n\n    if m == 0:\n        return arr2[k - 1]\n    if n == 0:\n        return arr1[k - 1]\n\n    if k == 1:\n        return min(arr1[0], arr2[0])\n\n    i = min(k // 2, m)\n    j = min(k - i, n)\n\n    if arr1[i - 1] < arr2[j - 1]:\n        return find_kth(arr1[i:], arr2, m - i, n, k - i)\n    else:\n        return find_kth(arr1, arr2[j:], m, n - j, k - j)\n\n\narr1 = [1, 3, 5, 7, 9]\narr2 = [2, 4, 6, 8, 10, 12, 14]\nm, n = len(arr1), len(arr2)\nk = 5\nprint(find_kth(arr1, arr2, m, n, k))\n",
        "generated_testcode": "assert find_kth([1, 3, 5, 7, 9], [2, 4, 6, 8, 10], 4, 5) == 5\n",
        "test": "assert find_kth([2, 3, 6, 7, 9], [1, 4, 8, 10], 5, 4, 5) == 6\nassert find_kth([100, 112, 256, 349, 770], [72, 86, 113, 119, 265, 445, 892], 5, 7, 7) == 256\nassert find_kth([3, 4, 7, 8, 10], [2, 5, 9, 11], 5, 4, 6) == 8",
        "canonical_solution": "def find_kth(arr1, arr2, m, n, k):\r\n\tsorted1 = [0] * (m + n)\r\n\ti = 0\r\n\tj = 0\r\n\td = 0\r\n\twhile (i < m and j < n):\r\n\t\tif (arr1[i] < arr2[j]):\r\n\t\t\tsorted1[d] = arr1[i]\r\n\t\t\ti += 1\r\n\t\telse:\r\n\t\t\tsorted1[d] = arr2[j]\r\n\t\t\tj += 1\r\n\t\td += 1\r\n\twhile (i < m):\r\n\t\tsorted1[d] = arr1[i]\r\n\t\td += 1\r\n\t\ti += 1\r\n\twhile (j < n):\r\n\t\tsorted1[d] = arr2[j]\r\n\t\td += 1\r\n\t\tj += 1\r\n\treturn sorted1[k - 1]"
    },
    {
        "number": 598,
        "prompt": "Write a function to check whether the given number is armstrong or not.\ndef armstrong_number(number):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    sum = 0\n    temp = number\n    while temp > 0:\n        digit = temp % 10\n        sum += digit ** 3\n        temp //= 10\n    return number == sum\n\n\nnumber = int(input(\"Enter a number: \"))\n\nif armstrong_number(number):\n    print(number, \"is an Armstrong number.\")\nelse:\n    print(number, \"is not an Armstrong number.\")\n",
        "generated_testcode": "assert armstrong_number(153) == True\n",
        "test": "assert armstrong_number(153)==True\nassert armstrong_number(259)==False\nassert armstrong_number(4458)==False",
        "canonical_solution": "def armstrong_number(number):\r\n sum = 0\r\n times = 0\r\n temp = number\r\n while temp > 0:\r\n           times = times + 1\r\n           temp = temp // 10\r\n temp = number\r\n while temp > 0:\r\n           reminder = temp % 10\r\n           sum = sum + (reminder ** times)\r\n           temp //= 10\r\n if number == sum:\r\n           return True\r\n else:\r\n           return False"
    },
    {
        "number": 599,
        "prompt": "Write a function to find sum and average of first n natural numbers.\ndef sum_average(number):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": true,
        "answer": "    sum = (number*(number+1))/2\n    average = sum/number\n    return (sum, average)\n\n# Test the function\nn = 5\nprint(\"Sum of first\", n, \"natural numbers is\", sum_average(n)[0])\nprint(\"Average of first\", n, \"natural numbers is\", sum_average(n)[1])\n\nn = 10\nprint(\"Sum of first\", n, \"natural numbers is\", sum_average(n)[0])\nprint(\"Average of first\", n, \"natural numbers is\", sum_average(n)[1]) ",
        "generated_testcode": "assert sum_average(5) == (15, 3)\n",
        "test": "assert sum_average(10)==(55, 5.5)\nassert sum_average(15)==(120, 8.0)\nassert sum_average(20)==(210, 10.5)",
        "canonical_solution": "def sum_average(number):\r\n total = 0\r\n for value in range(1, number + 1):\r\n    total = total + value\r\n average = total / number\r\n return (total,average)"
    },
    {
        "number": 600,
        "prompt": "Write a python function to check whether the given number is even or not using bitwise operator.\ndef is_Even(n) : \n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    # Using bitwise AND operator \n    return n & 1 == 0 ",
        "generated_testcode": "assert is_Even(4) == True\n",
        "test": "assert is_Even(1) == False\nassert is_Even(2) == True\nassert is_Even(3) == False",
        "canonical_solution": "def is_Even(n) : \r\n    if (n^1 == n+1) :\r\n        return True; \r\n    else :\r\n        return False; "
    },
    {
        "number": 601,
        "prompt": "Write a function to find the longest chain which can be formed from the given set of pairs.\n\tdef __init__(self, a, b): \n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "\t\tself.a = a\n\t\tself.b = b\n\n\tdef longestChain(self):\n\t    chain = 0\n\t    pairs = sorted(self.a, key=lambda x: x[1], reverse=True)\n\t    n = len(pairs)\n\t    dp = [1] * n\n\n\t    for i in range(n):\n\t        for j in range(i+1, n):\n\t            if pairs[j][0] > pairs[i][1]:\n\t                dp[j] = max(dp[j], dp[i]+1)\n\n\t    return max(dp)\n\n# Example usage:\npairs = [(2, 3), (1, 2), (3, 4), (4, 5), (5, 6), (7, 8), (2, 5), (3, 7)]\nobj = LongestChain(pairs)\nprint(\"Length of the longest chain is:\", obj.longestChain()) ",
        "generated_testcode": "assert longest_chain([(1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 7)]) == 5\n",
        "test": "assert max_chain_length([Pair(5, 24), Pair(15, 25),Pair(27, 40), Pair(50, 60)], 4) == 3\nassert max_chain_length([Pair(1, 2), Pair(3, 4),Pair(5, 6), Pair(7, 8)], 4) == 4\nassert max_chain_length([Pair(19, 10), Pair(11, 12),Pair(13, 14), Pair(15, 16), Pair(31, 54)], 5) == 5",
        "canonical_solution": "class Pair(object): \r\n\tdef __init__(self, a, b): \r\n\t\tself.a = a \r\n\t\tself.b = b \r\ndef max_chain_length(arr, n): \r\n\tmax = 0\r\n\tmcl = [1 for i in range(n)] \r\n\tfor i in range(1, n): \r\n\t\tfor j in range(0, i): \r\n\t\t\tif (arr[i].a > arr[j].b and\r\n\t\t\t\tmcl[i] < mcl[j] + 1): \r\n\t\t\t\tmcl[i] = mcl[j] + 1\r\n\tfor i in range(n): \r\n\t\tif (max < mcl[i]): \r\n\t\t\tmax = mcl[i] \r\n\treturn max"
    },
    {
        "number": 602,
        "prompt": "Write a python function to find the first repeated character in a given string.\ndef first_repeated_char(str1):\n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    char_set = set()\n    for char in str1:\n        if char in char_set:\n            return char\n        char_set.add(char)\n    return None\n\n# Test the function with sample input\nprint(first_repeated_char(\"geeksforgeeks\"))  # Output: e\nprint(first_repeated_char(\"hello\"))       # Output: l\nprint(first_repeated_char(\"abcdef\"))     # Output: None ",
        "generated_testcode": "assert first_repeated_char(\"hello\") == \"l\"\n",
        "test": "assert first_repeated_char(\"abcabc\") == \"a\"\nassert first_repeated_char(\"abc\") == \"None\"\nassert first_repeated_char(\"123123\") == \"1\"",
        "canonical_solution": "def first_repeated_char(str1):\r\n  for index,c in enumerate(str1):\r\n    if str1[:index+1].count(c) > 1:\r\n      return c \r\n  return \"None\""
    },
    {
        "number": 603,
        "prompt": "Write a function to get a lucid number smaller than or equal to n.\ndef get_ludic(n):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    \"\"\"\n    :param n: int\n    :return: int\n    \"\"\"\n    pass\n\n\ndef is_lucid(num):\n    \"\"\"\n    :param num: int\n    :return: boolean\n    \"\"\"\n    pass\n\ndef get_primes(n):\n    \"\"\"\n    :param n: int\n    :return: list of int\n    \"\"\"\n    pass\n\n# Test cases\nprint(get_ludic(100)) # 29\nprint(get_ludic(1000)) # 529\nprint(get_ludic(200)) # 199\nprint(get_ludic(500)) # 317\nprint(get_ludic(10000)) # 5263\nprint(get_ludic(100000)) # 5299\n\n# Test cases for is_lucid\nprint(is_lucid(29)) # True\nprint(is_lucid(28)) # False\nprint(is_lucid(529)) # True\nprint(is_lucid(317)) # True\nprint(is_lucid(5263)) # True\nprint(is_lucid(529)) # True\nprint(is_lucid(34)) # False\nprint(is_lucid(563)) # False\nprint(is_lucid(102",
        "generated_testcode": "assert get_ludic(10) == 5\n",
        "test": "assert get_ludic(10) == [1, 2, 3, 5, 7]\nassert get_ludic(25) == [1, 2, 3, 5, 7, 11, 13, 17, 23, 25]\nassert get_ludic(45) == [1, 2, 3, 5, 7, 11, 13, 17, 23, 25, 29, 37, 41, 43]",
        "canonical_solution": "def get_ludic(n):\r\n\tludics = []\r\n\tfor i in range(1, n + 1):\r\n\t\tludics.append(i)\r\n\tindex = 1\r\n\twhile(index != len(ludics)):\r\n\t\tfirst_ludic = ludics[index]\r\n\t\tremove_index = index + first_ludic\r\n\t\twhile(remove_index < len(ludics)):\r\n\t\t\tludics.remove(ludics[remove_index])\r\n\t\t\tremove_index = remove_index + first_ludic - 1\r\n\t\tindex += 1\r\n\treturn ludics"
    },
    {
        "number": 604,
        "prompt": "Write a function to reverse words in a given string.\ndef reverse_words(s):\n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    words = s.split()\n    return ' '.join(words[::-1])\n\n# Test cases\nprint(reverse_words(\"Hello world\")) # world Hello\nprint(reverse_words(\"Python is fun\")) # fun is Python\nprint(reverse_words(\"    space before     after     \")) # after     before space\nprint(reverse_words(\"  hello   world  \")) # world hello\nprint(reverse_words(\"  hello world  test\")) # test world hello ",
        "generated_testcode": "assert reverse_words(\"hello world\") == \"world hello\"\n",
        "test": "assert reverse_words(\"python program\")==(\"program python\")\nassert reverse_words(\"java language\")==(\"language java\")\nassert reverse_words(\"indian man\")==(\"man indian\")",
        "canonical_solution": "def reverse_words(s):\r\n        return ' '.join(reversed(s.split()))"
    },
    {
        "number": 605,
        "prompt": "Write a function to check if the given integer is a prime number.\ndef prime_num(num):\n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True\n\n# Test the function with some inputs\nprint(prime_num(7))  # True\nprint(prime_num(12))  # False\nprint(prime_num(1))   # False\nprint(prime_num(2))   # True\n\n# Write a function to check if a number is a prime number\ndef is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\n# Test the function with some inputs\nprint(is_prime(7))   # True\nprint(is_prime(12))  # False\nprint(is_prime(1))   # False\nprint(is_prime(2))   # True\n\n# Write a function to find all prime numbers up to a given limit\ndef find_primes(limit):\n    primes = []\n    for num in range(2, limit+1):\n        if is_prime(num):\n            primes.append(num)\n    return primes\n\n# Test the function with some inputs\nprint(find_primes(10))  # [2, 3, 5, 7]\nprint(find_primes(20))  # [2, 3,",
        "generated_testcode": "assert prime_num(7) == True\n",
        "test": "assert prime_num(13)==True\nassert prime_num(7)==True\nassert prime_num(-1010)==False",
        "canonical_solution": "def prime_num(num):\r\n  if num >=1:\r\n   for i in range(2, num//2):\r\n     if (num % i) == 0:\r\n                return False\r\n     else:\r\n                return True\r\n  else:\r\n          return False"
    },
    {
        "number": 606,
        "prompt": "Write a function to convert degrees to radians.\ndef radian_degree(degree):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    pi = 3.14159\n    radian = (degree * pi) / 180\n    return radian\n\n# Write a function to calculate the area of a circle.\ndef circle_area(radius):\n    pi = 3.14159\n    area = pi * radius ** 2\n    return area\n\n# Write a function to calculate the circumference of a circle.\ndef circle_circumference(radius):\n    pi = 3.14159\n    circumference = 2 * pi * radius\n    return circumference\n\n# Write a function to calculate the volume of a sphere.\ndef sphere_volume(radius):\n    pi = 3.14159\n    volume = (4/3) * pi * radius ** 3\n    return volume\n\n# Write a function to calculate the surface area of a sphere.\ndef sphere_surface_area(radius):\n    pi = 3.14159\n    surface_area = 4 * pi * radius ** 2\n    return surface_area\n\n# Write a function to calculate the volume of a sphere using its surface area.\ndef sphere_volume_from_surface(surface_area):\n    pi = 3.14159\n    radius = (surface_area / (4 * pi) ** 0.5) ** 1/3\n    volume = (4/3) * pi * radius ** 3\n    return volume\n\n# Write a function to calculate the surface area of",
        "generated_testcode": "assert radian_degree(90) == 1.57079632679\n",
        "test": "assert radian_degree(90)==1.5707963267948966\nassert radian_degree(60)==1.0471975511965976\nassert radian_degree(120)==2.0943951023931953",
        "canonical_solution": "import math\r\ndef radian_degree(degree):\r\n radian = degree*(math.pi/180)\r\n return radian"
    },
    {
        "number": 607,
        "prompt": "Write a function to search a literals string in a string and also find the location within the original string where the pattern occurs by using regex.\ndef find_literals(text, pattern):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    # create a regex pattern to match the pattern in the text\n    regex = re.compile(pattern)\n    # find all the occurrences of the pattern in the text and return the start and end positions\n    matches = regex.finditer(text)\n    # initialize an empty list to store the positions\n    positions = []\n    # loop through all the matches\n    for match in matches:\n        # add the start and end positions to the list\n        positions.append((match.start(), match.end()))\n    # return the list of positions\n    return positions\n\n# example usage\ntext = \"the quick brown fox jumps over the lazy dog\"\npattern = \"the\"\nprint(find_literals(text, pattern)) # output: [(0, 3), (19, 22)]\n```\n\n### 3. Replace a substring in a string with another substring\n\nWrite a function to replace a substring in a string with another substring.\n\n```python\ndef replace_substring(text, pattern, replace_with):\n    # create a regex pattern to match the pattern in the text\n    regex = re.compile(pattern)\n    # replace the pattern with the replace_with string\n    replaced_text = regex.sub(replace_with, text)\n    # return the replaced string\n    return replaced_text\n\n# example usage\ntext = \"the quick brown fox jumps over the lazy dog\"\npattern = \"the\"\nreplace_with = \"a\"\nprint(replace_substring(text, pattern, replace_with)) # output:",
        "generated_testcode": "assert find_literals(\"Hello world\", \"world\") == (6, 11)\n",
        "test": "assert find_literals('The quick brown fox jumps over the lazy dog.', 'fox') == ('fox', 16, 19)\nassert find_literals('Its been a very crazy procedure right', 'crazy') == ('crazy', 16, 21)\nassert find_literals('Hardest choices required strongest will', 'will') == ('will', 35, 39)",
        "canonical_solution": "import re\r\npattern = 'fox'\r\ntext = 'The quick brown fox jumps over the lazy dog.'\r\ndef find_literals(text, pattern):\r\n  match = re.search(pattern, text)\r\n  s = match.start()\r\n  e = match.end()\r\n  return (match.re.pattern, s, e)"
    },
    {
        "number": 608,
        "prompt": "Write a python function to find nth bell number.\ndef bell_Number(n): \n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    bell = [[0 for i in range(n+1)] for j in range(n+1)] \n    bell[0][0] = 1\n    for i in range(1, n+1): \n        bell[i][0] = 1\n        for j in range(1, i+1): \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]\n    return bell[n][0] \n\n# Testing the function \nn = 6\nprint(\"Bell number for n =\", n, \"is\", bell_Number(n)) \n\nn = 3\nprint(\"Bell number for n =\", n, \"is\", bell_Number(n)) ",
        "generated_testcode": "assert bell_Number(0) == 1\n",
        "test": "assert bell_Number(2) == 2\nassert bell_Number(3) == 5\nassert bell_Number(4) == 15",
        "canonical_solution": "def bell_Number(n): \r\n    bell = [[0 for i in range(n+1)] for j in range(n+1)] \r\n    bell[0][0] = 1\r\n    for i in range(1, n+1):\r\n        bell[i][0] = bell[i-1][i-1]\r\n        for j in range(1, i+1): \r\n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1] \r\n    return bell[n][0] "
    },
    {
        "number": 609,
        "prompt": "Write a python function to find minimum possible value for the given periodic function.\ndef floor_Min(A,B,N):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": true,
        "answer": "    '''\n    >>> floor_Min(1,10,3)\n    3\n    '''\n    min_val = A\n    for i in range(A,B+1):\n        if(i%N==0):\n            if(i<min_val):\n                min_val=i\n    return min_val\n\nprint(floor_Min(1,10,3))\n\n#Example 2\ndef floor_Min(A,B,N):\n    '''\n    >>> floor_Min(1,10,3)\n    3\n    '''\n    if(A%N==0):\n        return A\n    else:\n        return A+N-A%N\nprint(floor_Min(1,10,3))\n\n#Example 3\ndef floor_Min(A,B,N):\n    '''\n    >>> floor_Min(1,10,3)\n    3\n    '''\n    return A+(B-A)//N*N\nprint(floor_Min(1,10,3))\n\n#Example 4\ndef floor_Min(A,B,N):\n    '''\n    >>> floor_Min(1,10,3)\n    3\n    '''\n    return (A//N)*N\nprint(floor_Min(1,10,3))\n\n#Example 5\ndef floor_Min(A,B,N):\n    '''\n    >>> floor_Min(1,10,3)\n    3\n    '''\n    return A",
        "generated_testcode": "assert floor_Min(1,2,3) == 1\n",
        "test": "assert floor_Min(10,20,30) == 15\nassert floor_Min(1,2,1) == 0\nassert floor_Min(11,10,9) == 9",
        "canonical_solution": "def floor_Min(A,B,N):\r\n    x = max(B - 1,N)\r\n    return (A*x) // B"
    },
    {
        "number": 610,
        "prompt": "Write a python function to remove the k'th element from a given list.\ndef remove_kth_element(list1, L):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    list1.pop(L-1)\n    return list1\n\n# Example usage:\nprint(remove_kth_element([1,2,3,4,5], 2)) # Output: [1, 3, 5]\nprint(remove_kth_element([1,2,3,4,5], 1)) # Output: [2, 3, 5] ",
        "generated_testcode": "assert remove_kth_element([1, 2, 3, 4, 5, 6, 7, 8, 9], 3) == [1, 2, 4, 5, 6, 7, 8]\n",
        "test": "assert remove_kth_element([1,1,2,3,4,4,5,1],3)==[1, 1, 3, 4, 4, 5, 1]\nassert remove_kth_element([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4],4)==[0, 0, 1, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]\nassert remove_kth_element([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10],5)==[10,10,15,19, 18, 17, 26, 26, 17, 18, 10]",
        "canonical_solution": "def remove_kth_element(list1, L):\r\n    return  list1[:L-1] + list1[L:]"
    },
    {
        "number": 611,
        "prompt": "Write a function to find the maximum of nth column from the given tuple list.\ndef max_of_nth(test_list, N):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    return max(list(zip(*test_list))[N])\n\n# Test the function with sample input\ntest_list = [(10, 20, 30), (40, 50, 60), (70, 80, 90), (100, 110, 12)]\nprint(max_of_nth(test_list, 0))  # Output: [100, 70, 10]\nprint(max_of_nth(test_list, 1))  # Output: [20, 50, 80, 110]\nprint(max_of_nth(test_list, 2))  # Output: [30, 60, 90, 12]\n\n# Test the function with a 2D list\ntest_list2D = [\n    [2, 4, 6, 8],\n    [1, 3, 5, 7],\n    [9, 12, 15, 18],\n    [11, 13, 17, 19]\n]\nprint(max_of_nth(test_list2D, 0))  # Output: [9, 3, 15, 19]\nprint(max_of_nth(test_list2D, 1))  # Output: [12, 7, 18, 13]\nprint(max_of_",
        "generated_testcode": "assert max_of_nth([(1, 2, 3), (4, 5, 6), (7, 8, 9)], 2) == 8\n",
        "test": "assert max_of_nth([(5, 6, 7), (1, 3, 5), (8, 9, 19)], 2) == 19\nassert max_of_nth([(6, 7, 8), (2, 4, 6), (9, 10, 20)], 1) == 10\nassert max_of_nth([(7, 8, 9), (3, 5, 7), (10, 11, 21)], 1) == 11",
        "canonical_solution": "def max_of_nth(test_list, N):\r\n  res = max([sub[N] for sub in test_list])\r\n  return (res) "
    },
    {
        "number": 612,
        "prompt": "Write a python function to merge the first and last elements separately in a list of lists.\ndef merge(lst):  \n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    if len(lst) == 0:\n        return []\n    else:\n        first = lst[0][0]\n        last = lst[-1][-1]\n        rest = merge(lst[1:-1])\n        return [first] + rest + [last]\n\nprint(merge([[1,2,3], [4,5,6], [7,8,9], [10,11,12]])  # [1, 7, 2, 8, 3, 9, 10, 11, 12]\n\n# Write a python function to flatten a nested list\ndef flatten(lst):\n    if len(lst) == 0:\n        return []\n    else:\n        if isinstance(lst[0], list):\n            return flatten(lst[0]) + flatten(lst[1:])\n        else:\n            return [lst[0]] + flatten(lst[1:])\n\nprint(flatten([[1,2,3], [4,5,6], [7,8,9], [10,11,12]])  # [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12] \n\n# Write a python function to flatten a nested list using recursion\ndef flatten_recursive(lst):\n    if len(lst) == 0:\n        return []\n    elif isinstance(lst",
        "generated_testcode": "assert merge([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [[1, 4, 7], [2, 5, 8], [3, 6, 9]]\n",
        "test": "assert merge([['x', 'y'], ['a', 'b'], ['m', 'n']]) == [['x', 'a', 'm'], ['y', 'b', 'n']]\nassert merge([[1, 2], [3, 4], [5, 6], [7, 8]]) == [[1, 3, 5, 7], [2, 4, 6, 8]]\nassert merge([['x', 'y','z' ], ['a', 'b','c'], ['m', 'n','o']]) == [['x', 'a', 'm'], ['y', 'b', 'n'],['z', 'c','o']]",
        "canonical_solution": "def merge(lst):  \r\n    return [list(ele) for ele in list(zip(*lst))] "
    },
    {
        "number": 613,
        "prompt": "Write a function to find the maximum value in record list as tuple attribute in the given tuple list.\ndef maximum_value(test_list):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    max_value = None\n    for record in test_list:\n        for value in record:\n            if max_value is None or value[2] > max_value[2]:\n                max_value = value\n    return max_value\n\n\n# Test the function with the given example\ntest_list = [('Alice', 25, 80), ('Bob', 20, 90), ('Charlie', 30, 70), ('David', 25, 95), ('Eve', 30, 85)]\nprint(maximum_value(test_list))\n# Output: ('David', 25, 95)\n\n# Test the function with empty list\ntest_list = []\nprint(maximum_value(test_list))\n# Output: None\n\n# Test the function with a list of tuples containing only one tuple\ntest_list = [('Alice', 25, 80)]\nprint(maximum_value(test_list))\n# Output: ('Alice', 25, 80)\n\n# Test the function with a list of tuples containing all the same values\ntest_list = [('Alice', 25, 80), ('Bob', 25, 80), ('Charlie', 25, 80), ('David', 25, 80)]\nprint(maximum_value(test_list))\n# Output: ('Alice', 25, 80)\n\n",
        "generated_testcode": "assert maximum_value([(1, 2, 3), (4, 5, 6), (7, 8, 9)]) == 9\n",
        "test": "assert maximum_value([('key1', [3, 4, 5]), ('key2', [1, 4, 2]), ('key3', [9, 3])]) == [('key1', 5), ('key2', 4), ('key3', 9)]\nassert maximum_value([('key1', [4, 5, 6]), ('key2', [2, 5, 3]), ('key3', [10, 4])]) == [('key1', 6), ('key2', 5), ('key3', 10)]\nassert maximum_value([('key1', [5, 6, 7]), ('key2', [3, 6, 4]), ('key3', [11, 5])]) == [('key1', 7), ('key2', 6), ('key3', 11)]",
        "canonical_solution": "def maximum_value(test_list):\r\n  res = [(key, max(lst)) for key, lst in test_list]\r\n  return (res) "
    },
    {
        "number": 614,
        "prompt": "Write a function to find the cumulative sum of all the values that are present in the given tuple list.\ndef cummulative_sum(test_list):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": true,
        "answer": "    total = 0\n    result = []\n    for i in test_list:\n        total += i\n        result.append(total)\n    return result\n\n# Test the function with sample input\nprint(cummulative_sum([1, 2, 3, 4, 5]))\n\n# Output: [1, 3, 6, 10, 15]\n\n# Explanation: The cumulative sum of the list [1, 2, 3, 4, 5] is [1, 1+2=3, 1+2+3=6, 1+2+3+4=10, 1+2+3+4+5=15]. ",
        "generated_testcode": "assert cummulative_sum([1, 2, 3, 4, 5]) == [1, 3, 6, 10, 15]\n",
        "test": "assert cummulative_sum([(1, 3), (5, 6, 7), (2, 6)]) == 30\nassert cummulative_sum([(2, 4), (6, 7, 8), (3, 7)]) == 37\nassert cummulative_sum([(3, 5), (7, 8, 9), (4, 8)]) == 44",
        "canonical_solution": "def cummulative_sum(test_list):\r\n  res = sum(map(sum, test_list))\r\n  return (res)"
    },
    {
        "number": 615,
        "prompt": "Write a function to find average value of the numbers in a given tuple of tuples.\ndef average_tuple(nums):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    total = 0\n    count = 0\n    for tup in nums:\n        for num in tup:\n            total += num\n            count += 1\n    return total / count\n\n# Test the function with sample data\nnums = ((1, 2, 3), (4, 5, 6), (7, 8, 9))\nprint(average_tuple(nums))  # Output: 5.0\n\nnums = ((1, 2, 3), (4, 5, 6, 7), (8, 9, 10, 11))\nprint(average_tuple(nums))  # Output: 5.6666666666666666666\n\n# Test the function with empty tuple\nprint(average_tuple(tuple()) # Output: 0\n\n# Test the function with single tuple\nnums = (1, 2, 3)\nprint(average_tuple(nums))  # Output: 2.0\n\n# Test the function with invalid data type\nprint(average_tuple(123)) # Output: TypeError: 'int' object is not iterable\n",
        "generated_testcode": "assert average_tuple(((1, 2, 3), (4, 5, 6)) == 3.5\n",
        "test": "assert average_tuple(((10, 10, 10, 12), (30, 45, 56, 45), (81, 80, 39, 32), (1, 2, 3, 4)))==[30.5, 34.25, 27.0, 23.25]\nassert average_tuple(((1, 1, -5), (30, -15, 56), (81, -60, -39), (-10, 2, 3)))== [25.5, -18.0, 3.75]\nassert average_tuple( ((100, 100, 100, 120), (300, 450, 560, 450), (810, 800, 390, 320), (10, 20, 30, 40)))==[305.0, 342.5, 270.0, 232.5]",
        "canonical_solution": "def average_tuple(nums):\r\n    result = [sum(x) / len(x) for x in zip(*nums)]\r\n    return result"
    },
    {
        "number": 616,
        "prompt": "Write a function to perfom the modulo of tuple elements in the given two tuples.\ndef tuple_modulo(test_tup1, test_tup2):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] % test_tup2[i],)\n    return result_tup\n\n# Example usage:\n# test_tup1 = (5, 10, 15, 20)\n# test_tup2 = (3, 4, 5, 6)\n# print(tuple_modulo(test_tup1, test_tup2)) # Output: (2, 2, 0, 4) ",
        "generated_testcode": "assert tuple_modulo((2, 4, 6, 8, 10), (3, 5, 7, 11)) == (2, 4, 2, 10)\n",
        "test": "assert tuple_modulo((10, 4, 5, 6), (5, 6, 7, 5)) == (0, 4, 5, 1)\nassert tuple_modulo((11, 5, 6, 7), (6, 7, 8, 6)) == (5, 5, 6, 1)\nassert tuple_modulo((12, 6, 7, 8), (7, 8, 9, 7)) == (5, 6, 7, 1)",
        "canonical_solution": "def tuple_modulo(test_tup1, test_tup2):\r\n  res = tuple(ele1 % ele2 for ele1, ele2 in zip(test_tup1, test_tup2)) \r\n  return (res) "
    },
    {
        "number": 617,
        "prompt": "Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\ndef min_Jumps(a, b, d): \n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    if(a == d and b == 0): \n        return 0\n    if(a == 0 or b == 0): \n        return 1\n    if(a > d or b > d): \n        return -1\n    return d//max(a, b) \n\n# Test the function \nprint(min_Jumps(1, 0, 2)) ",
        "generated_testcode": "assert min_Jumps(1, 0, 2) == 1\n",
        "test": "assert min_Jumps(3,4,11)==3.5\nassert min_Jumps(3,4,0)==0\nassert min_Jumps(11,14,11)==1",
        "canonical_solution": "def min_Jumps(a, b, d): \r\n    temp = a \r\n    a = min(a, b) \r\n    b = max(temp, b) \r\n    if (d >= b): \r\n        return (d + b - 1) / b \r\n    if (d == 0): \r\n        return 0\r\n    if (d == a): \r\n        return 1\r\n    else:\r\n        return 2"
    },
    {
        "number": 618,
        "prompt": "Write a function to divide two lists using map and lambda function.\ndef div_list(nums1,nums2):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": true,
        "answer": "    return list(map(lambda x,y:x/y,nums1,nums2))\nprint(div_list([10,20,30,40,50,60],[2,4,6,8,10]))\n\n#Explanation:\n#The lambda function divides each element of nums1 by the corresponding element of nums2. The map function applies this lambda function to each element of nums1 and nums2. The result is returned as a list. ",
        "generated_testcode": "assert div_list([1,2,3,4],[2,2,2,2]) == [0.5,1.0,1.5,2.0]\n",
        "test": "assert div_list([4,5,6],[1, 2, 3])==[4.0,2.5,2.0]\nassert div_list([3,2],[1,4])==[3.0, 0.5]\nassert div_list([90,120],[50,70])==[1.8, 1.7142857142857142]",
        "canonical_solution": "def div_list(nums1,nums2):\r\n  result = map(lambda x, y: x / y, nums1, nums2)\r\n  return list(result)"
    },
    {
        "number": 619,
        "prompt": "Write a function to move all the numbers in it to the given string.\ndef move_num(test_str):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    \"\"\"\n    :param test_str: str\n    :return: str\n    \"\"\"\n    result = \"\"\n    nums = \"\"\n    for char in test_str:\n        if char.isdigit():\n            nums += char\n        else:\n            result += char\n    return nums + result\n\n# Example usage:\n# move_num(\"a1b2c3d4e5f6g7\") -> \"1234567abcdefg\"\nprint(move_num(\"a1b2c3d4e5f6g7\")) ",
        "generated_testcode": "assert move_num(\"Hello 123 World 456\") == \"Hello World\"\n",
        "test": "assert move_num('I1love143you55three3000thousand') == 'Iloveyouthreethousand1143553000'\nassert move_num('Avengers124Assemble') == 'AvengersAssemble124'\nassert move_num('Its11our12path13to14see15things16do17things') == 'Itsourpathtoseethingsdothings11121314151617'",
        "canonical_solution": "def move_num(test_str):\r\n  res = ''\r\n  dig = ''\r\n  for ele in test_str:\r\n    if ele.isdigit():\r\n      dig += ele\r\n    else:\r\n      res += ele\r\n  res += dig\r\n  return (res) "
    },
    {
        "number": 620,
        "prompt": "Write a function to find the largest subset where each pair is divisible.\ndef largest_subset(a, n):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    a.sort()\n    max_size = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if a[j] % a[i] == 0:\n                size = 1\n                for k in range(j+1, n):\n                    if a[k] % a[i] == 0:\n                        size += 1\n                max_size = max(max_size, size)\n    return max_size\n\n# Testing\na = [1, 2, 3, 4, 6, 8, 12]\nn = len(a)\nprint(largest_subset(a, n))\n\n# Output: 3\n# Explanation: The largest subset is {2, 4, 8} as they are all divisible by 2 and 4 is divisible by 8. ",
        "generated_testcode": "assert largest_subset([1, 2, 3, 4, 5, 6, 7, 8, 9], 3) == [1, 3, 9]\n",
        "test": "assert largest_subset([ 1, 3, 6, 13, 17, 18 ], 6) == 4\nassert largest_subset([10, 5, 3, 15, 20], 5) == 3\nassert largest_subset([18, 1, 3, 6, 13, 17], 6) == 4",
        "canonical_solution": "def largest_subset(a, n):\r\n\tdp = [0 for i in range(n)]\r\n\tdp[n - 1] = 1; \r\n\tfor i in range(n - 2, -1, -1):\r\n\t\tmxm = 0;\r\n\t\tfor j in range(i + 1, n):\r\n\t\t\tif a[j] % a[i] == 0 or a[i] % a[j] == 0:\r\n\t\t\t\tmxm = max(mxm, dp[j])\r\n\t\tdp[i] = 1 + mxm\r\n\treturn max(dp)"
    },
    {
        "number": 621,
        "prompt": "Write a function to increment the numeric values in the given strings by k.\ndef increment_numerics(test_list, K):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    result = []\n    for string in test_list:\n        new_string = \"\"\n        for char in string:\n            if char.isnumeric():\n                new_char = str(int(char) + K)\n                new_string += new_char\n            else:\n                new_string += char\n        result.append(new_string)\n    return result\n\n\n# Test the function with sample inputs\ntest_list = [\"123hello45world\", \"6789\", \"abc123def\"]\nK = 5\nprint(increment_numerics(test_list, K)) # Output: ['128hello50world', '6132', 'abc128def']\n\ntest_list = [\"123hello45world\", \"6789\", \"abc123def\"]\nK = 500\nprint(increment_numerics(test_list, K)) # Output: ['623hello95world', '7789', 'abc623def']\n\ntest_list = [\"123hello45world\", \"6789\", \"abc123def\"]\nK = -5\nprint(increment_numerics(test_list, K)) # Output: ['-118hello0world', '-1031', 'abc-88def'] ",
        "generated_testcode": "assert increment_numerics([\"hello123\", \"world456\", \"python789\"], 10) == [\"hello1333\", \"world5666\", \"python899\"]\n",
        "test": "assert increment_numerics([\"MSM\", \"234\", \"is\", \"98\", \"123\", \"best\", \"4\"] , 6) == ['MSM', '240', 'is', '104', '129', 'best', '10']\nassert increment_numerics([\"Dart\", \"356\", \"is\", \"88\", \"169\", \"Super\", \"6\"] , 12) == ['Dart', '368', 'is', '100', '181', 'Super', '18']\nassert increment_numerics([\"Flutter\", \"451\", \"is\", \"44\", \"96\", \"Magnificent\", \"12\"] , 33) == ['Flutter', '484', 'is', '77', '129', 'Magnificent', '45']",
        "canonical_solution": "def increment_numerics(test_list, K):\r\n  res = [str(int(ele) + K) if ele.isdigit() else ele for ele in test_list]\r\n  return res "
    },
    {
        "number": 622,
        "prompt": "Write a function to find the median of two sorted arrays of same size.\ndef get_median(arr1, arr2, n):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    i, j = 0, 0\n    while i < n and j < n:\n        if arr1[i] < arr2[j]:\n            i += 1\n        elif arr1[i] > arr2[j]:\n            j += 1\n        else:\n            return arr1[i]\n    if i == n and j < n:\n        return arr2[j]\n    elif j == n and i < n:\n        return arr1[i]\n    return -1\n\n\narr1 = [1, 3, 5, 7, 9]\narr2 = [2, 4, 6, 8, 10]\nn = len(arr1)\nprint(get_median(arr1, arr2, n))  # Output: 5\n\n# Time Complexity : O(n)\n# Space Complexity : O(1)\n\n# Method 2: Using merge sort\n# Sort both arrays and find the median\ndef get_median(arr1, arr2):\n    merged = arr1 + arr2\n    merged.sort()\n    n = len(merged)\n    if n % 2 == 0:\n        return (merged[n // 2 - 1] + merged[n // 2]) / 2\n    else:\n        return merged[n // 2]\n\narr1 = [1, 3, 5, 7, 9]\narr2 = [2, 4, 6, 8",
        "generated_testcode": "assert get_median([1, 3, 5, 7, 9], [2, 4, 6, 8], 4) == 5\n",
        "test": "assert get_median([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0\nassert get_median([2, 4, 8, 9], [7, 13, 19, 28], 4) == 8.5\nassert get_median([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6) == 25.0",
        "canonical_solution": "def get_median(arr1, arr2, n):\r\n  i = 0\r\n  j = 0\r\n  m1 = -1\r\n  m2 = -1\r\n  count = 0\r\n  while count < n + 1:\r\n    count += 1\r\n    if i == n:\r\n      m1 = m2\r\n      m2 = arr2[0]\r\n      break\r\n    elif j == n:\r\n      m1 = m2\r\n      m2 = arr1[0]\r\n      break\r\n    if arr1[i] <= arr2[j]:\r\n      m1 = m2\r\n      m2 = arr1[i]\r\n      i += 1\r\n    else:\r\n      m1 = m2\r\n      m2 = arr2[j]\r\n      j += 1\r\n  return (m1 + m2)/2"
    },
    {
        "number": 623,
        "prompt": "Write a function to find the n-th power of individual elements in a list using lambda function.\ndef nth_nums(nums,n):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    return list(map(lambda x:x**n,nums))\nprint(nth_nums([1,2,3,4,5],3))\n\n# Output: [1, 8, 27, 125]\n\n# Write a function to sort a list of dictionaries based on a key value using lambda function\ndef sort_dicts(lst):\n    return sorted(lst, key=lambda x:x['name'])\n\nlst = [{'name': 'John', 'age': 28}, {'name': 'Adam', 'age': 30}, {'name': 'David', 'age': 25}]\nprint(sort_dicts(lst))\n\n# Output: [{'name': 'Adam', 'age': 30}, {'name': 'David', 'age': 25}, {'name': 'John', 'age': 28}]\n\n# Write a function to filter a list of dictionaries based on a key value using lambda function\ndef filter_dicts(lst):\n    return list(filter(lambda x:x['age']>28,lst))\n\nlst = [{'name': 'John', 'age': 28}, {'name': 'Adam', 'age': 30}, {'name': 'David', 'age': 25}]\nprint(filter_dicts(lst))\n\n# Output: [{'name': 'Adam', 'age': 30}] ",
        "generated_testcode": "assert nth_nums([1,2,3,4,5],2) == [1,4,9,25]\n",
        "test": "assert nth_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],2)==[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]\nassert nth_nums([10,20,30],3)==([1000, 8000, 27000])\nassert nth_nums([12,15],5)==([248832, 759375])",
        "canonical_solution": "def nth_nums(nums,n):\r\n nth_nums = list(map(lambda x: x ** n, nums))\r\n return nth_nums"
    },
    {
        "number": 624,
        "prompt": "Write a python function to convert the given string to upper case.\ndef is_upper(string):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    for char in string:\n        if char.isupper():\n            return True\n        else:\n            return False\n\n# Test the function with the following code\nprint(is_upper(\"HELLO WORLD\"))  # Should return True\nprint(is_upper(\"Hello World\"))  # Should return False\nprint(is_upper(\"HELLO\"))      # Should return True\nprint(is_upper(\"\"))          # Should return False\nprint(is_upper(\"12345\"))     # Should return False\nprint(is_upper(\" \"))        # Should return False\n\n# output\n# True\n# False\n# True\n# False\n# False\n# False ",
        "generated_testcode": "assert is_upper(\"HELLO\") == True\n",
        "test": "assert is_upper(\"person\") ==\"PERSON\"\nassert is_upper(\"final\") == \"FINAL\"\nassert is_upper(\"Valid\") == \"VALID\"",
        "canonical_solution": "def is_upper(string):\r\n  return (string.upper())"
    },
    {
        "number": 625,
        "prompt": "Write a python function to interchange first and last elements in a given list.\ndef swap_List(newList): \n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    length = len(newList) \n    newList[0], newList[length-1] = newList[length-1], newList[0] \n    return newList\n\n# Testing the function \nnewList = [1, 2, 3, 4, 5, 6] \nprint(swap_List(newList)) \n\n# Output: [6, 2, 3, 4, 5, 1] ",
        "generated_testcode": "assert swap_List([1, 2, 3, 4, 5]) == [5, 2, 3, 4]\n",
        "test": "assert swap_List([1,2,3]) == [3,2,1]\nassert swap_List([1,2,3,4,4]) == [4,2,3,4,1]\nassert swap_List([4,5,6]) == [6,5,4]",
        "canonical_solution": "def swap_List(newList): \r\n    size = len(newList) \r\n    temp = newList[0] \r\n    newList[0] = newList[size - 1] \r\n    newList[size - 1] = temp   \r\n    return newList "
    },
    {
        "number": 626,
        "prompt": "Write a python function to find the largest triangle that can be inscribed in the semicircle.\ndef triangle_area(r) :  \n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    \"\"\"This function returns the area of a triangle inscribed in a semicircle with radius r.\"\"\"\n    return (0.5*r**2)\n\ndef largest_triangle(r) :\n    \"\"\"This function returns the largest triangle that can be inscribed in a semicircle with radius r.\"\"\"\n    area = triangle_area(r)\n    max_side = r\n    max_area = 0\n    for i in range(1,r+1) :\n        for j in range(i,r+1) :\n            h = r**2 - (i**2 + j**2) ** 0.5\n            if h > 0 and i+j+h <= r :\n                triangle_area = 0.5 * i * j * h\n                if triangle_area > max_area :\n                    max_area = triangle_area\n                    max_side = i,j,h\n    return max_side\n\nprint(largest_triangle(5)) #Output : (3, 4, 3) ",
        "generated_testcode": "assert triangle_area(3) == 9.0\n",
        "test": "assert triangle_area(0) == 0\nassert triangle_area(-1) == -1\nassert triangle_area(2) == 4",
        "canonical_solution": "def triangle_area(r) :  \r\n    if r < 0 : \r\n        return -1\r\n    return r * r "
    },
    {
        "number": 627,
        "prompt": "Write a python function to find the smallest missing number from the given array.\ndef find_First_Missing(array,start,end): \n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": true,
        "answer": "    if end-start <= 1: \n        return start \n    mid = (start + end)//2\n    left = find_First_Missing(array,start,mid) \n    right = find_First_Missing(array,mid,end) \n    return find_First_Missing(array,left,right) \n\ndef find_Missing(array): \n    n = len(array) \n    missing = find_FirstMissing(array,0,n) \n    return missing \n\ndef find_Missing_Number(array): \n    n = len(array) \n    array.sort() \n    for i in range(n): \n        if i+1 != array[i]: \n            return i+1\n    return n+1\n\n# Test the function\narray = [3, 7, 2, 1, 8, 4, 5, 6] \nprint(\"Smallest missing number in the given array is\",find_Missing_Number(array)) \n\n# Output: Smallest missing number in the given array is 1 ",
        "generated_testcode": "assert find_First_Missing([1,2,3,4,5,6,7,8,9,10],0,9) == 0\n",
        "test": "assert find_First_Missing([0,1,2,3],0,3) == 4\nassert find_First_Missing([0,1,2,6,9],0,4) == 3\nassert find_First_Missing([2,3,5,8,9],0,4) == 0",
        "canonical_solution": "def find_First_Missing(array,start,end): \r\n    if (start > end): \r\n        return end + 1\r\n    if (start != array[start]): \r\n        return start; \r\n    mid = int((start + end) / 2) \r\n    if (array[mid] == mid): \r\n        return find_First_Missing(array,mid+1,end) \r\n    return find_First_Missing(array,start,mid) "
    },
    {
        "number": 628,
        "prompt": "Write a function to replace all spaces in the given string with character * list item * list item * list item * list item '%20'.\ndef replace_spaces(string):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    return string.replace(' ', '%20')\n\n# Example usage:\nprint(replace_spaces(\"hello world\")) # Output: \"hello%20world\"\nprint(replace_spaces(\"   python is awesome   \")) # Output: \"%20%20%20%20python%20is%20awesome%20%20\" ",
        "generated_testcode": "assert replace_spaces(\"hello world\") == \"hello%20world\"\n",
        "test": "assert replace_spaces(\"My Name is Dawood\") == 'My%20Name%20is%20Dawood'\nassert replace_spaces(\"I am a Programmer\") == 'I%20am%20a%20Programmer'\nassert replace_spaces(\"I love Coding\") == 'I%20love%20Coding'",
        "canonical_solution": "MAX=1000;\r\ndef replace_spaces(string):\r\n  string=string.strip()\r\n  i=len(string)\r\n  space_count=string.count(' ')\r\n  new_length = i + space_count*2\r\n  if new_length > MAX:\r\n    return -1\r\n  index = new_length-1\r\n  string=list(string)\r\n  for f in range(i-2, new_length-2):\r\n    string.append('0')\r\n  for j in range(i-1, 0, -1):\r\n    if string[j] == ' ':\r\n      string[index] = '0'\r\n      string[index-1] = '2'\r\n      string[index-2] = '%'\r\n      index=index-3\r\n    else:\r\n      string[index] = string[j]\r\n      index -= 1\r\n  return ''.join(string)"
    },
    {
        "number": 629,
        "prompt": "Write a python function to find even numbers from a mixed list.\ndef Split(list): \n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    even = [] \n    odd = [] \n    for num in list: \n        if num % 2 == 0: \n            even.append(num) \n        else: \n            odd.append(num) \n    return even \n\n# Testing the function \nlist = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12] \nprint(\"Original List:\", list) \nprint(\"Even numbers in the list:\", Split(list)) \n\n# Output: [2, 4, 6, 8, 10] ",
        "generated_testcode": "assert Split([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [2, 4, 6, 8, 10]\n",
        "test": "assert Split([1,2,3,4,5]) == [2,4]\nassert Split([4,5,6,7,8,0,1]) == [4,6,8,0]\nassert Split ([8,12,15,19]) == [8,12]",
        "canonical_solution": "def Split(list): \r\n    ev_li = [] \r\n    for i in list: \r\n        if (i % 2 == 0): \r\n            ev_li.append(i)  \r\n    return ev_li"
    },
    {
        "number": 630,
        "prompt": "Write a function to extract all the adjacent coordinates of the given coordinate tuple.\ndef adjac(ele, sub = []): \n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    # Define the tuple of the coordinates\n    coord = (0, 0, 0)\n    # Create a list to store the adjacent coordinates\n    adj_coord = []\n    # Extract the coordinates from the tuple\n    x, y, z = coord\n    # Loop through the adjacent coordinates\n    for i in range(-1, 2): \n        for j in range(-1, 2): \n            for k in range(-1, 2): \n                if i == j == k == 0: \n                    continue\n                # Check if the coordinates are within the boundaries\n                if 0 <= x + i < 5 and 0 <= y + j < 5 and 0 <= z + k < 5: \n                    # Append the adjacent coordinates to the list\n                    adj_coord.append((x+i, y+j, z+k))\n    return adj_coord\n# Test the function\nprint(adjac((0, 0, 0)) # Output: [(1, 0, 0), (0, 1, 0), (0, 0, 1), (-1, 0, 0), (0, -1, 0), (0, 0, -1)]\nprint(adjac((2, 2, 2)) # Output: [(1, 2, 2), (2, 1, 2), (2, 2, 1), (1, 1, 2), (2, 1, 1), (1, ",
        "generated_testcode": "assert adjac((1, 2)) == [(1, 3), (1, 1), (2, 2), (0, 2), (1, 0)]\n",
        "test": "assert get_coordinates((3, 4)) == [[2, 3], [2, 4], [2, 5], [3, 3], [3, 4], [3, 5], [4, 3], [4, 4], [4, 5]]\nassert get_coordinates((4, 5)) ==[[3, 4], [3, 5], [3, 6], [4, 4], [4, 5], [4, 6], [5, 4], [5, 5], [5, 6]]\nassert get_coordinates((5, 6)) == [[4, 5], [4, 6], [4, 7], [5, 5], [5, 6], [5, 7], [6, 5], [6, 6], [6, 7]]",
        "canonical_solution": "def adjac(ele, sub = []): \r\n  if not ele: \r\n     yield sub \r\n  else: \r\n     yield from [idx for j in range(ele[0] - 1, ele[0] + 2) \r\n                for idx in adjac(ele[1:], sub + [j])] \r\ndef get_coordinates(test_tup):\r\n  res = list(adjac(test_tup))\r\n  return (res) "
    },
    {
        "number": 631,
        "prompt": "Write a function to replace whitespaces with an underscore and vice versa in a given string by using regex.\ndef replace_spaces(text):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    return text.replace(' ', '_').replace('_', ' ')\n\n# Test the function with an example string\nprint(replace_spaces('hello world')) # Output: hello_world\nprint(replace_spaces('hello_world')) # Output: hello world\n```\n\nThis function works by replacing all the whitespaces with an underscore and then all the underscores with a space.\n\nTime complexity: O(n)\n\nSpace complexity: O(n) ",
        "generated_testcode": "assert replace_spaces(\"hello world\") == \"hello_world\"\n",
        "test": "assert replace_spaces('Jumanji The Jungle') == 'Jumanji_The_Jungle'\nassert replace_spaces('The Avengers') == 'The_Avengers'\nassert replace_spaces('Fast and Furious') == 'Fast_and_Furious'",
        "canonical_solution": "import re\r\ntext = 'Python Exercises'\r\ndef replace_spaces(text):\r\n  text =text.replace (\" \", \"_\")\r\n  return (text)\r\n  text =text.replace (\"_\", \" \")\r\n  return (text)"
    },
    {
        "number": 632,
        "prompt": "Write a python function to move all zeroes to the end of the given list.\ndef move_zero(num_list):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    count = 0\n    for i in range(len(num_list)):\n        if num_list[i] != 0:\n            num_list[count] = num_list[i]\n            count += 1\n    while count < len(num_list):\n        num_list[count] = 0\n        count += 1\n    return num_list\n\n# Example usage:\nprint(move_zero([1, 2, 0, 0, 1, 3, 4, 0, 5, 0, 6, 7]))  # Output: [1, 2, 1, 3, 4, 5, 6, 7, 0, 0]\n\n# Time Complexity: O(n) \n# Space Complexity: O(1) ",
        "generated_testcode": "assert move_zero(num_list=[1, 2, 0, 3, 4, 0, 5, 6, 0, 7, 8, 0, 9]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 0, 0]\n",
        "test": "assert move_zero([1,0,2,0,3,4]) == [1,2,3,4,0,0]\nassert move_zero([2,3,2,0,0,4,0,5,0]) == [2,3,2,4,5,0,0,0,0]\nassert move_zero([0,1,0,1,1]) == [1,1,1,0,0]",
        "canonical_solution": "def move_zero(num_list):\r\n    a = [0 for i in range(num_list.count(0))]\r\n    x = [ i for i in num_list if i != 0]\r\n    x.extend(a)\r\n    return (x)"
    },
    {
        "number": 633,
        "prompt": "Write a python function to find the sum of xor of all pairs of numbers in the given array.\ndef pair_OR_Sum(arr,n) : \n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    total_sum = 0\n    for i in range(n) : \n        for j in range(i+1, n) : \n            total_sum += arr[i] ^ arr[j]\n    return total_sum\n\n# test the function \narr = [2, 4, 6, 8, 16] \nn = len(arr) \nprint(pair_OR_Sum(arr, n)) \n\n# Time complexity is O(n^2) and space complexity is O(1) ",
        "generated_testcode": "assert pair_OR_Sum([1,2,3,4,5],4) == 7\n",
        "test": "assert pair_OR_Sum([5,9,7,6],4) == 47\nassert pair_OR_Sum([7,3,5],3) == 12\nassert pair_OR_Sum([7,3],2) == 4",
        "canonical_solution": "def pair_OR_Sum(arr,n) : \r\n    ans = 0 \r\n    for i in range(0,n) :    \r\n        for j in range(i + 1,n) :   \r\n            ans = ans + (arr[i] ^ arr[j])          \r\n    return ans "
    },
    {
        "number": 634,
        "prompt": "Write a python function to find the sum of fourth power of first n even natural numbers.\ndef even_Power_Sum(n): \n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    sum = 0\n    for i in range(1,2*n+1,2): \n        sum += i**4\n    return sum \n\n#Taking input n from user\nn = int(input(\"Enter the value of n: \"))\n\n#Calling the function and printing the result\nprint(\"The sum of fourth power of first\",n,\"even numbers is:\",even_Power_Sum(n)) \n",
        "generated_testcode": "assert even_Power_Sum(5) == 225\n",
        "test": "assert even_Power_Sum(2) == 272\nassert even_Power_Sum(3) == 1568\nassert even_Power_Sum(4) == 5664",
        "canonical_solution": "def even_Power_Sum(n): \r\n    sum = 0; \r\n    for i in range(1,n + 1): \r\n        j = 2*i; \r\n        sum = sum + (j*j*j*j); \r\n    return sum; "
    },
    {
        "number": 635,
        "prompt": "Write a function to push all values into a heap and then pop off the smallest values one at a time.\ndef heap_sort(iterable):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    heapq.heapify(iterable)\n    result = []\n    while iterable:\n        result.append(heapq.heappop(iterable))\n    return result\n\n# time complexity O(n log n)\n# space complexity O(n)\n# using the built-in heapq module\n# heapq.heapify is O(n) and heapq.heappop is O(log n)\n",
        "generated_testcode": "assert heap_sort(iterable) == sorted(iterable)\n\n# Test the function with a list of integers\n",
        "test": "assert heap_sort([1, 3, 5, 7, 9, 2, 4, 6, 8, 0])==[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert heap_sort([25, 35, 22, 85, 14, 65, 75, 25, 58])==[14, 22, 25, 25, 35, 58, 65, 75, 85]\nassert heap_sort( [7, 1, 9, 5])==[1,5,7,9]",
        "canonical_solution": "import heapq as hq\r\ndef heap_sort(iterable):\r\n    h = []\r\n    for value in iterable:\r\n        hq.heappush(h, value)\r\n    return [hq.heappop(h) for i in range(len(h))]"
    },
    {
        "number": 636,
        "prompt": "Write a python function to check if roots of a quadratic equation are reciprocal of each other or not.\ndef Check_Solution(a,b,c): \n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    if b**2-4*a*c<0:\n        return False\n    else:\n        x1=(-b+((b**2-4*a*c)**0.5)/(2*a))\n        x2=(-b-((b**2-4*a*c)**0.5)/(2*a))\n        if x1==1/x2 or x2==1/x1:\n            return True\n        else:\n            return False\n    \n#Taking input values from user\na=int(input(\"Enter coefficient of x^2: \"))\nb=int(input(\"Enter coefficient of x: \"))\nc=int(input(\"Enter constant term: \"))\n\n#calling the function\nresult=Check_Solution(a,b,c)\n\n#printing the result\nif result:\n    print(\"Roots are reciprocal of each other\")\nelse:\n    print(\"Roots are not reciprocal of each other\") \n    ",
        "generated_testcode": "assert Check_Solution(1,2,3) == True\n",
        "test": "assert Check_Solution(2,0,2) == \"Yes\"\nassert Check_Solution(2,-5,2) == \"Yes\"\nassert Check_Solution(1,2,3) == \"No\"",
        "canonical_solution": "def Check_Solution(a,b,c): \r\n    if (a == c): \r\n        return (\"Yes\"); \r\n    else: \r\n        return (\"No\"); "
    },
    {
        "number": 637,
        "prompt": "Write a function to check whether the given amount has no profit and no loss\ndef noprofit_noloss(actual_cost,sale_amount): \n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    if sale_amount - actual_cost < 0: \n        return True\n    return False\n\n# Define a function to calculate the total profit and loss \ndef total_profit_loss(actual_cost, sale_amount): \n    profit = sale_amount - actual_cost \n    return profit \n\n# Define a function to calculate the total loss \ndef total_loss(actual_cost, sale_amount): \n    loss = actual_cost - sale_amount \n    return loss \n\n# Define a function to calculate the total sale \ndef total_sale(actual_cost, sale_amount): \n    total_sale = sale_amount - actual_cost \n    return total_sale \n\n# Define a function to calculate the total income \ndef total_income(sale_amount): \n    income = sale_amount \n    return income \n\n# Define a function to calculate the total expenditure \ndef total_expenditure(actual_cost): \n    expenditure = actual_cost \n    return expenditure \n\n# Define a function to calculate the total sales \ndef total_sales(sales_list): \n    total = 0 \n    for sale in sales_list: \n        total += sale \n    return total \n\n# Define a function to calculate the average profit \ndef avg_profit(sales_list, total_sales): \n    if total_sales == 0: \n        return 0 ",
        "generated_testcode": "assert noprofit_noloss(100, 100) == True\n",
        "test": "assert noprofit_noloss(1500,1200)==False\nassert noprofit_noloss(100,100)==True\nassert noprofit_noloss(2000,5000)==False",
        "canonical_solution": "def noprofit_noloss(actual_cost,sale_amount): \r\n  if(sale_amount == actual_cost):\r\n    return True\r\n  else:\r\n    return False"
    },
    {
        "number": 638,
        "prompt": "Write a function to calculate wind chill index.\ndef wind_chill(v,t):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    if v < 4.8 or t > 10:\n        return None\n    else:\n        return 13.12 + 0.6215 * t - 11.37 * (v ** 0.16) + 0.3965 * t * (v ** 0.16)\n\n#Example usage:\nprint(wind_chill(4.8, 10)) # 20.7645191616501554\nprint(wind_chill(10, 0)) # None\nprint(wind_chill(2.7, 100)) # 25.39800732330853757\nprint(wind_chill(10, 100)) # None\nprint(wind_chill(30, 10)) # None\n",
        "generated_testcode": "assert wind_chill(10, 0) == 10\n",
        "test": "assert wind_chill(120,35)==40\nassert wind_chill(40,70)==86\nassert wind_chill(10,100)==116",
        "canonical_solution": "import math\r\ndef wind_chill(v,t):\r\n windchill = 13.12 + 0.6215*t -  11.37*math.pow(v, 0.16) + 0.3965*t*math.pow(v, 0.16)\r\n return int(round(windchill, 0))"
    },
    {
        "number": 639,
        "prompt": "Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\ndef sample_nam(sample_names):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    new_list = [name for name in sample_names if name[0].isupper()]\n    return sum([len(name) for name in new_list])\n\n\n# Example usage:\nsample_names = ['Alice', 'bob', 'Charlie', 'David', 'Eva', 'Frank', 'Gina']\nprint(sample_nam(sample_names))  # Output: 13 (Alice + David + Frank) ",
        "generated_testcode": "assert sample_nam(['Alice', 'Bob', 'carol', 'David', 'eve']) == 8\n",
        "test": "assert sample_nam(['sally', 'Dylan', 'rebecca', 'Diana', 'Joanne', 'keith'])==16\nassert sample_nam([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"])==10\nassert sample_nam([\"abcd\", \"Python\", \"abba\", \"aba\"])==6",
        "canonical_solution": "def sample_nam(sample_names):\r\n  sample_names=list(filter(lambda el:el[0].isupper() and el[1:].islower(),sample_names))\r\n  return len(''.join(sample_names))"
    },
    {
        "number": 640,
        "prompt": "Write a function to remove the parenthesis area in a string.\ndef remove_parenthesis(items):\n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    items = items.replace(\"(\", \"\").replace(\")\", \"\")\n    return items\n\n# Test the function\nprint(remove_parenthesis(\"(hello, world)\"))  # Output: \"hello, world\"\nprint(remove_parenthesis(\"((hello), world)\"))  # Output: \"hello, world\"\nprint(remove_parenthesis(\"(hello), (world)\"))  # Output: \"hello, world\"\nprint(remove_parenthesis(\"(hello) (world)\"))  # Output: \"hello world\" ",
        "generated_testcode": "assert remove_parenthesis(\"(hello) world\") == \"hello world\"\n",
        "test": "assert remove_parenthesis([\"python (chrome)\"])==(\"python\")\nassert remove_parenthesis([\"string(.abc)\"])==(\"string\")\nassert remove_parenthesis([\"alpha(num)\"])==(\"alpha\")",
        "canonical_solution": "import re\r\ndef remove_parenthesis(items):\r\n for item in items:\r\n    return (re.sub(r\" ?\\([^)]+\\)\", \"\", item))"
    },
    {
        "number": 641,
        "prompt": "Write a function to find the nth nonagonal number.\ndef is_nonagonal(n): \n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    return (n * (n * n - 3) * (n * n - 7)) / 2\n\n# Set up the variables and loop through until we find the nth nonagonal number.\nn = 1\nnum_nonagonals = 0\nnonagonal_num = 1\nwhile num_nonagonals < n:\n    nonagonal_num += 1\n    num_nonagonals = is_nonagonal(nonagonal_num)\n    \n# Once we find the nth nonagonal number, print it out.\nprint(nonagonal_num)\n\n# Test the function with a few different values of n.\nprint(is_nonagonal(1)) # 1\nprint(is_nonagonal(2)) # 8\nprint(is_nonagonal(3)) # 28\nprint(is_nonagonal(4)) # 59\nprint(is_nonagonal(5)) # 97\nprint(is_nonagonal(6)) # 140\nprint(is_nonagonal(7)) # 197\nprint(is_nonagonal(10)) # 369\nprint(is_nonagonal(20)) # 11559\nprint(is_nonagonal(30)) # 3539\nprint(is_nonagonal(40)) # 6108\nprint(is_nonagonal(50)) # 9759\nprint(is",
        "generated_testcode": "assert is_nonagonal(1) == 1\n",
        "test": "assert is_nonagonal(10) == 325\nassert is_nonagonal(15) == 750\nassert is_nonagonal(18) == 1089",
        "canonical_solution": "def is_nonagonal(n): \r\n\treturn int(n * (7 * n - 5) / 2) "
    },
    {
        "number": 642,
        "prompt": "Write a function to remove similar rows from the given tuple matrix.\ndef remove_similar_row(test_list):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    unique_list = []\n    for i in range(len(test_list)):\n        if test_list[i] not in unique_list:\n            unique_list.append(test_list[i])\n    return unique_list\n\ntest_list = [(1, 2, 3), (2, 3, 4), (1, 2, 3), (2, 3, 4), (4, 5, 6), (1, 2, 3)]\nprint(remove_similar_row(test_list))\n\n# Output: [(1, 2, 3), (2, 3, 4), (4, 5, 6)]\n\n# Time Complexity: O(n^2) where n is the length of the list. ",
        "generated_testcode": "assert remove_similar_row(test_list) == expected_output\n\n# Test case 1:\ntest_list = [(1, 2, 3), (2, 3, 4), (3, 4, 5), (1, 2, 3), (2, 3, 4), (3, 4, 5), (1, 2, 3)]\nexpected_output = [(1, 2, 3), (2, 3, 4), (3, 4, 5)]\n\n",
        "test": "assert remove_similar_row([[(4, 5), (3, 2)], [(2, 2), (4, 6)], [(3, 2), (4, 5)]] ) == {((2, 2), (4, 6)), ((3, 2), (4, 5))}\nassert remove_similar_row([[(5, 6), (4, 3)], [(3, 3), (5, 7)], [(4, 3), (5, 6)]] ) == {((4, 3), (5, 6)), ((3, 3), (5, 7))}\nassert remove_similar_row([[(6, 7), (5, 4)], [(4, 4), (6, 8)], [(5, 4), (6, 7)]] ) =={((4, 4), (6, 8)), ((5, 4), (6, 7))}",
        "canonical_solution": "def remove_similar_row(test_list):\r\n  res = set(sorted([tuple(sorted(set(sub))) for sub in test_list]))\r\n  return (res) "
    },
    {
        "number": 643,
        "prompt": "Write a function that matches a word containing 'z', not at the start or end of the word.\ndef text_match_wordz_middle(text):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    pattern = r'\\b\\w*z\\w*\\b'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None\n\n# Example usage:\ntext = \"The quick brown fox jumps over the lazy dog.\"\nprint(text_match_wordz_middle(text)) # Output: \"fox\" ",
        "generated_testcode": "assert text_match_wordz_middle(\"The quick brown fox jumps over the lazy dog\") == True\n",
        "test": "assert text_match_wordz_middle(\"pythonzabc.\")==('Found a match!')\nassert text_match_wordz_middle(\"xyzabc.\")==('Found a match!')\nassert text_match_wordz_middle(\"  lang  .\")==('Not matched!')",
        "canonical_solution": "import re\r\ndef text_match_wordz_middle(text):\r\n        patterns = '\\Bz\\B'\r\n        if re.search(patterns,  text):\r\n                return 'Found a match!'\r\n        else:\r\n                return('Not matched!')"
    },
    {
        "number": 644,
        "prompt": "Write a python function to reverse an array upto a given position.\ndef reverse_Array_Upto_K(input, k): \n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    n = len(input) \n    i = 0\n    while k < n: \n        input[i], input[k] = input[k], input[i] \n        i += 1\n        k += 1\n    return input \n  \n# Driver code \ninput = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] \nk = 3\nprint(reverse_Array_Upto_K(input, k)) ",
        "generated_testcode": "assert reverse_Array_Upto_K(input=[1, 2, 3, 4, 5, 6, 7, 8, 9], k=3) == [3, 2, 1, 4, 5, 6, 7, 8]\n",
        "test": "assert reverse_Array_Upto_K([1, 2, 3, 4, 5, 6],4) == [4, 3, 2, 1, 5, 6]\nassert reverse_Array_Upto_K([4, 5, 6, 7], 2) == [5, 4, 6, 7]\nassert reverse_Array_Upto_K([9, 8, 7, 6, 5],3) == [7, 8, 9, 6, 5]",
        "canonical_solution": "def reverse_Array_Upto_K(input, k): \r\n  return (input[k-1::-1] + input[k:]) "
    },
    {
        "number": 645,
        "prompt": "Write a function to find the product of it\u2019s kth index in the given tuples.\ndef get_product(val) : \n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    res = 1\n    for i in range(len(val)): \n        res *= val[i] \n    return res \n  \ndef get_kth_product(val, k) : \n    res = [] \n    for i in range(len(val)): \n        for j in range(i+1, len(val)): \n            res.append(get_product(val[i:j+1]) % (10**9 + 7) ) \n    res.sort() \n    return res[k-1] \n  \n# Driver code \nval = [1, 2, 3, 4, 5, 6, 7] \nk = 3\nprint(\"Kth product is:\", get_kth_product(val, k)) ",
        "generated_testcode": "assert get_product(('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p') == 'j'\n",
        "test": "assert find_k_product([(5, 6, 7), (1, 3, 5), (8, 9, 19)], 2) == 665\nassert find_k_product([(6, 7, 8), (2, 4, 6), (9, 10, 20)], 1) == 280\nassert find_k_product([(7, 8, 9), (3, 5, 7), (10, 11, 21)], 0) == 210",
        "canonical_solution": "def get_product(val) : \r\n\tres = 1\r\n\tfor ele in val: \r\n\t\tres *= ele \r\n\treturn res \r\ndef find_k_product(test_list, K):\r\n  res = get_product([sub[K] for sub in test_list])\r\n  return (res) "
    },
    {
        "number": 646,
        "prompt": "Write a python function to count number of cubes of size k in a cube of size n.\ndef No_of_cubes(N,K):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    count=0\n    for i in range(N):\n        for j in range(N):\n            for k in range(N):\n                if(i+j+k<=K):\n                    count+=1\n    return count\n\n#Test Case\nprint(No_of_cubes(5,3)) #Expected Output: 5\nprint(No_of_cubes(3,2)) #Expected Output: 14\nprint(No_of_cubes(10,5)) #Expected Output: 60\nprint(No_of_cubes(2,2)) #Expected Output: 9\nprint(No_of_cubes(2,3)) #Expected Output: 6 \nprint(No_of_cubes(1,1)) #Expected Output: 1\nprint(No_of_cubes(5,0)) #Expected Output: 0\nprint(No_of_cubes(0,3)) #Expected Output: 0 ",
        "generated_testcode": "assert No_of_cubes(10,2) == 1\n",
        "test": "assert No_of_cubes(2,1) == 8\nassert No_of_cubes(5,2) == 64\nassert No_of_cubes(1,1) == 1",
        "canonical_solution": "def No_of_cubes(N,K):\r\n    No = 0\r\n    No = (N - K + 1)\r\n    No = pow(No, 3)\r\n    return No"
    },
    {
        "number": 647,
        "prompt": "Write a function to split a string at uppercase letters.\ndef split_upperstring(text):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    res = []\n    word = \"\"\n    for i in text:\n        if i.isupper():\n            if word != \"\":\n                res.append(word)\n                word = \"\"\n            word += i\n        else:\n            word += i\n    res.append(word)\n    return res\n\n# Example usage:\ntext = \"PythonIsAwesome\"\nprint(split_upperstring(text))  # Output: ['Python', 'Is', 'Awesome']\n",
        "generated_testcode": "assert split_upperstring(\"HelloWorld\") == [\"Hello\", \"World\"]\n",
        "test": "assert split_upperstring(\"PythonProgramLanguage\")==['Python','Program','Language']\nassert split_upperstring(\"PythonProgram\")==['Python','Program']\nassert split_upperstring(\"ProgrammingLanguage\")==['Programming','Language']",
        "canonical_solution": "import re\r\ndef split_upperstring(text):\r\n return (re.findall('[A-Z][^A-Z]*', text))"
    },
    {
        "number": 648,
        "prompt": "Write a function to exchange the position of every n-th value with (n+1)th value and (n+1)th value with n-th value in a given list.\ndef exchange_elements(lst):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    n = len(lst)\n    for i in range(0,n,2):\n        lst[i],lst[i+1] = lst[i+1],lst[i]\n    return lst\n\n# Test cases\nprint(exchange_elements([1,2,3,4,5,6,7,8,9])) # [2,1,4,3,6,5,8,7]\nprint(exchange_elements([10,20,30,40,50,60,70])) # [20,10,40,30,60,50]\nprint(exchange_elements([1,2,3,4,5,6,7,8])) # [2,1,4,3,6,8,7]\nprint(exchange_elements([1,2,3,4,5,6,7])) # [2,1,4,3,6,7,5]\nprint(exchange_elements([1])) # [1]\nprint(exchange_elements([])) # []\n\n\n# Explanation:\n# We first find the length of the list using len() function and then loop over the list using range() with a step of 2, that is, we start from the first element, then swap the element at index i with the element at (i+1)th index and then move to the next even index (i+2)th element. This way, we swap every second element with the element after it.\n# Finally, we return the modified list. ",
        "generated_testcode": "assert exchange_elements([1, 2, 3, 4, 5, 6, 7, 8, 9]) == [2, 1, 4, 3, 6, 5, 8, 7]\n",
        "test": "assert exchange_elements([0,1,2,3,4,5])==[1, 0, 3, 2, 5, 4] \nassert exchange_elements([5,6,7,8,9,10])==[6,5,8,7,10,9] \nassert exchange_elements([25,35,45,55,75,95])==[35,25,55,45,95,75] ",
        "canonical_solution": "from itertools import zip_longest, chain, tee\r\ndef exchange_elements(lst):\r\n    lst1, lst2 = tee(iter(lst), 2)\r\n    return list(chain.from_iterable(zip_longest(lst[1::2], lst[::2])))"
    },
    {
        "number": 649,
        "prompt": "Write a python function to calculate the sum of the numbers in a list between the indices of a specified range.\ndef sum_Range_list(nums, m, n):                                                                                                                                                                                                \n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    return sum(nums[m:n+1])                                                                                                                                                                                           \n                                                                                                                                                                                                             \n# Example usage:                                                                                                                                                                                           \nprint(sum_Range_list([1,2,3,4,5,6,7,8,9,10], 2, 5)) # Output: 22 (1+3+4+5+6+7) ",
        "generated_testcode": "assert sum_Range_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2, 5) == 18\n",
        "test": "assert sum_Range_list([2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12],8,10) == 29\nassert sum_Range_list([1,2,3,4,5],1,2) == 5\nassert sum_Range_list([1,0,1,2,5,6],4,5) == 11",
        "canonical_solution": "def sum_Range_list(nums, m, n):                                                                                                                                                                                                \r\n    sum_range = 0                                                                                                                                                                                                         \r\n    for i in range(m, n+1, 1):                                                                                                                                                                                        \r\n        sum_range += nums[i]                                                                                                                                                                                                  \r\n    return sum_range   "
    },
    {
        "number": 650,
        "prompt": "Write a python function to check whether the given two arrays are equal or not.\ndef are_Equal(arr1,arr2,n,m):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    if n!=m:\n        return False\n    for i in range(n):\n        if arr1[i]!=arr2[i]:\n            return False\n    return True\nn=int(input(\"Enter the size of array 1: \"))\narr1=[]\narr2=[]\nfor i in range(n):\n    arr1.append(int(input())\nm=int(input(\"Enter the size of array 2: \")\nfor i in range(m):\n    arr2.append(int(input())\nif are_Equal(arr1,arr2,n,m):\n    print(\"The arrays are equal\")\nelse:\n    print(\"The arrays are not equal\")\n",
        "generated_testcode": "assert are_Equal([1,2,3,4,5],[1,2,3,4,5],4,4) == True\n",
        "test": "assert are_Equal([1,2,3],[3,2,1],3,3) == True\nassert are_Equal([1,1,1],[2,2,2],3,3) == False\nassert are_Equal([8,9],[4,5,6],2,3) == False",
        "canonical_solution": "def are_Equal(arr1,arr2,n,m):\r\n    if (n != m):\r\n        return False\r\n    arr1.sort()\r\n    arr2.sort()\r\n    for i in range(0,n - 1):\r\n        if (arr1[i] != arr2[i]):\r\n            return False\r\n    return True"
    },
    {
        "number": 651,
        "prompt": "Write a function to check if one tuple is a subset of another tuple.\ndef check_subset(test_tup1, test_tup2):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    # Check if all elements in test_tup1 are in test_tup2\n    return all(elem in test_tup2 for elem in test_tup1)\n\n# Test the function with some examples\ntest_tup1 = (1, 2, 3)\ntest_tup2 = (1, 2, 3, 4)\nprint(check_subset(test_tup1, test_tup2))  # True\n\ntest_tup1 = (1, 2, 4)\ntest_tup2 = (1, 2, 3, 4)\nprint(check_subset(test_tup1, test_tup2))  # False\n\ntest_tup1 = (1, 2, 3, 3, 4)\ntest_tup2 = (1, 2, 3)\nprint(check_subset(test_tup1, test_tup2))  # True\n\ntest_tup1 = (1, 2, 4)\ntest_tup2 = (1, 2)\nprint(check_subset(test_tup1, test_tup2))  # False\n\n# Output: True\n#        False\n#        True\n#        False ",
        "generated_testcode": "assert check_subset((1, 2, 3), (1, 2, 3, 4, 5)) == True\n",
        "test": "assert check_subset((10, 4, 5, 6), (5, 10)) == True\nassert check_subset((1, 2, 3, 4), (5, 6)) == False\nassert check_subset((7, 8, 9, 10), (10, 8)) == True",
        "canonical_solution": "def check_subset(test_tup1, test_tup2):\r\n  res = set(test_tup2).issubset(test_tup1)\r\n  return (res) "
    },
    {
        "number": 652,
        "prompt": "Write a function to flatten the given tuple matrix into the tuple list with each tuple representing each column.\ndef matrix_to_list(test_list):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": true,
        "answer": "    result = []\n    for i in range(len(test_list[0])):\n        result.append(tuple([row[i] for row in test_list]))\n    return result\n\ntest_list = ((1, 2, 3), (4, 5, 6), (7, 8, 9))\nprint(matrix_to_list(test_list)) ",
        "generated_testcode": "assert matrix_to_list(test_list) == [(1, 4, 7), (2, 5, 8), (3, 6, 9)]\n\n# Test the function with the given test_list\ntest_list = ((1, 2, 3), (4, 5, 6), (7, 8, 9))\nprint(matrix_to_list(test_list)) ",
        "test": "assert matrix_to_list([[(4, 5), (7, 8)], [(10, 13), (18, 17)], [(0, 4), (10, 1)]]) == '[(4, 7, 10, 18, 0, 10), (5, 8, 13, 17, 4, 1)]'\nassert matrix_to_list([[(5, 6), (8, 9)], [(11, 14), (19, 18)], [(1, 5), (11, 2)]]) == '[(5, 8, 11, 19, 1, 11), (6, 9, 14, 18, 5, 2)]'\nassert matrix_to_list([[(6, 7), (9, 10)], [(12, 15), (20, 21)], [(23, 7), (15, 8)]]) == '[(6, 9, 12, 20, 23, 15), (7, 10, 15, 21, 7, 8)]'",
        "canonical_solution": "def matrix_to_list(test_list):\r\n  temp = [ele for sub in test_list for ele in sub]\r\n  res = list(zip(*temp))\r\n  return (str(res))"
    },
    {
        "number": 653,
        "prompt": "Write a function to group a sequence of key-value pairs into a dictionary of lists using collections module.\ndef grouping_dictionary(l):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    from collections import defaultdict\n    d = defaultdict(list)\n    for k, v in l:\n        d[k].append(v)\n    return d\n\n# Test the function with a list of tuples\nl = [(1, 2), (3, 4), (1, 3), (2, 4), (3, 1), (2, 5)]\nprint(grouping_dictionary(l)) # output: {1: [2, 3], 2: [4, 5], 3: [1, 4]}\n\n# Grouping dictionary using for loop\ndef grouping_dict(l):\n    d = {}\n    for k, v in l:\n        if k in d:\n            d[k].append(v)\n        else:\n            d[k] = [v]\n    return d\nprint(grouping_dict(l)) # output: {1: [2, 3], 2: [4, 5], 3: [1, 4]}\n\n# Grouping dictionary using dict comprehension\ndef grouping_dict(l):\n    d = {k: [v] for k, v in l}\n    for k, v in l:\n        if k in d:\n            d[k].append(v)\n    return d\nprint(grouping_dict(l)) # output: {1: [2, 3], 2: [4, 5], 3: [1, 4]}\n\n# Grouping dictionary using defaultdict\n",
        "generated_testcode": "assert grouping_dictionary([\"apple\", \"banana\", \"cherry\", \"apple\", \"cherry\", \"orange\", \"banana\", \"apple\", \"kiwi\"]) == {\"apple\": [\"apple\", \"apple\", \"apple\"], \"banana\": [\"banana\", \"banana\"], \"cherry\": [\"cherry\", \"cherry\"], \"orange\": [\"orange\"], \"kiwi\": [\"kiwi\"]}\n",
        "test": "assert grouping_dictionary([('yellow', 1), ('blue', 2), ('yellow', 3), ('blue', 4), ('red', 1)])== ({'yellow': [1, 3], 'blue': [2, 4], 'red': [1]})\nassert grouping_dictionary([('yellow', 10), ('blue', 20), ('yellow', 30), ('blue', 40), ('red', 10)])== ({'yellow': [10, 30], 'blue': [20, 40], 'red': [10]})\nassert grouping_dictionary([('yellow', 15), ('blue', 25), ('yellow', 35), ('blue', 45), ('red', 15)])== ({'yellow': [15, 35], 'blue': [25, 45], 'red': [15]})",
        "canonical_solution": "from collections import defaultdict\r\ndef grouping_dictionary(l):\r\n    d = defaultdict(list)\r\n    for k, v in l:\r\n        d[k].append(v)\r\n    return d"
    },
    {
        "number": 654,
        "prompt": "Write a function to find the perimeter of a rectangle.\ndef rectangle_perimeter(l,b):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    perimeter = 2*(l+b)\n    return perimeter\n\n# Test the function with a rectangle with length 5 and breadth 4\nprint(rectangle_perimeter(5,4)) # Output: 18\n\n# Write a function to find the area of a rectangle.\ndef rectangle_area(l,b):\n    area = l*b\n    return area\n\n# Test the function with a rectangle with length 5 and breadth 4\nprint(rectangle_area(5,4)) # Output: 20\n\n# Write a function to find the surface area of a cylinder.\ndef cylinder_surface_area(r,h):\n    area = 2*3.14*r*r*h\n    return area\n\n# Test the function with a cylinder with radius 3 and height 5\nprint(cylinder_surface_area(3,5)) # Output: 94.2\n\n# Write a function to find the volume of a cylinder.\ndef cylinder_volume(r,h):\n    volume = 3.14*r*r*h\n    return volume\n\n# Test the function with a cylinder with radius 3 and height 5\nprint(cylinder_volume(3,5)) # Output: 141.825\n\n# Write a function to find the volume of a sphere.\ndef sphere_volume(r):\n    volume = (4/3)*3.14*r**3\n    return volume\n\n#",
        "generated_testcode": "assert rectangle_perimeter(5, 10) == 20\n",
        "test": "assert rectangle_perimeter(10,20)==60\nassert rectangle_perimeter(10,5)==30\nassert rectangle_perimeter(4,2)==12",
        "canonical_solution": "def rectangle_perimeter(l,b):\r\n  perimeter=2*(l+b)\r\n  return perimeter"
    },
    {
        "number": 655,
        "prompt": "Write a python function to find the sum of fifth power of n natural numbers.\ndef fifth_Power_Sum(n) : \n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    sum = 0\n    for i in range(1, n+1): \n        sum += i**5\n    return sum \n\n# test the function\nprint(fifth_Power_Sum(10))\n\n# Output: 328255\n\n# Another way to solve the same problem using the formula\ndef fifth_Power_Sum(n) : \n    return n*(n+1)*(2*n+1)*(3*n**2+3*n-1)//6\n\n# test the function\nprint(fifth_Power_Sum(10))\n\n# Output: 32825\n\n# Time complexity: O(n)\n# Space complexity: O(1)\n\n# Here, we have used the formula for the sum of first n natural numbers (S_n = n*(n+1)/2) and then multiplied it with (n**2). \n# This reduces the time complexity from O(n) to O(1). \n# Since we have used only one variable and a constant amount of memory, space complexity is O(1). ",
        "generated_testcode": "assert fifth_Power_Sum(5) == 13265\n",
        "test": "assert fifth_Power_Sum(2) == 33\nassert fifth_Power_Sum(4) == 1300\nassert fifth_Power_Sum(3) == 276",
        "canonical_solution": "def fifth_Power_Sum(n) : \r\n    sm = 0 \r\n    for i in range(1,n+1) : \r\n        sm = sm + (i*i*i*i*i) \r\n    return sm "
    },
    {
        "number": 656,
        "prompt": "Write a python function to find the minimum sum of absolute differences of two arrays.\ndef find_Min_Sum(a,b,n): \n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    a.sort()\n    b.sort()\n    i,j = 0,0\n    min_sum = float('inf')\n    for i in range(n):\n        while j < n:\n            min_sum = min(min_sum,abs(a[i]-b[j])+abs(b[j]-a[i+1]))\n            j+=1\n    return min_sum\n\n# Testing the function with sample inputs\na = [1,4,2,3]\nb = [5,7,9,8]\nn = len(a)\nprint(find_Min_Sum(a,b,n))\n\n# Output: 2\n# Explanation: The minimum sum of absolute differences can be achieved when we choose 4 and 8. ",
        "generated_testcode": "assert find_Min_Sum([1,2,3,4,5],[2,3,4,5,6],4) == 1\n",
        "test": "assert find_Min_Sum([3,2,1],[2,1,3],3) == 0\nassert find_Min_Sum([1,2,3],[4,5,6],3) == 9\nassert find_Min_Sum([4,1,8,7],[2,3,6,5],4) == 6",
        "canonical_solution": "def find_Min_Sum(a,b,n): \r\n    a.sort() \r\n    b.sort() \r\n    sum = 0  \r\n    for i in range(n): \r\n        sum = sum + abs(a[i] - b[i]) \r\n    return sum"
    },
    {
        "number": 657,
        "prompt": "Write a python function to find the first digit in factorial of a given number.\ndef first_Digit(n) : \n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": true,
        "answer": "    if n < 0 : \n        return -1\n    elif n == 0 : \n        return 0\n    else : \n        digit = 0\n        while n > 0 : \n            digit = n % 10\n            n //= 10\n    return digit ",
        "generated_testcode": "assert first_Digit(5) == 5\n",
        "test": "assert first_Digit(5) == 1\nassert first_Digit(10) == 3\nassert first_Digit(7) == 5",
        "canonical_solution": "import math \r\ndef first_Digit(n) : \r\n    fact = 1\r\n    for i in range(2,n + 1) : \r\n        fact = fact * i \r\n        while (fact % 10 == 0) :  \r\n            fact = int(fact / 10) \r\n    while (fact >= 10) : \r\n        fact = int(fact / 10) \r\n    return math.floor(fact) "
    },
    {
        "number": 658,
        "prompt": "Write a function to find the item with maximum occurrences in a given list.\ndef max_occurrences(list1):\n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    # Initialize a dictionary to store the count of each item\n    count_dict = {}\n    for item in list1:\n        if item in count_dict:\n            count_dict[item] += 1\n        else:\n            count_dict[item] = 1\n\n    # Find the item with maximum occurrences\n    max_count = 0\n    max_item = None\n    for item, count in count_dict.items():\n        if count > max_count:\n            max_count = count\n            max_item = item\n\n    return max_item\n\n# Test the function\nprint(max_occurrences([1, 2, 3, 2, 4, 5, 2, 6, 3, 7, 2, 5, 2, 4]))  # Output: 2\nprint(max_occurrences(['a', 'b', 'c', 'd', 'a', 'e', 'd', 'a', 'c']))  # Output: 'a'\nprint(max_occurrences(['apple', 'banana', 'orange', 'apple', 'banana', 'grape', 'orange', 'apple']))  # Output: 'apple' ",
        "generated_testcode": "assert max_occurrences([1, 2, 3, 4, 5, 6, 6, 6, 7, 8, 9, 9, 9, 9]) == 9\n",
        "test": "assert max_occurrences([2,3,8,4,7,9,8,2,6,5,1,6,1,2,3,4,6,9,1,2])==2\nassert max_occurrences([1, 3,5, 7,1, 3,13, 15, 17,5, 7,9,1, 11])==1\nassert max_occurrences([1, 2, 3,2, 4, 5,1, 1, 1])==1",
        "canonical_solution": "def max_occurrences(list1):\r\n    max_val = 0\r\n    result = list1[0] \r\n    for i in list1:\r\n        occu = list1.count(i)\r\n        if occu > max_val:\r\n            max_val = occu\r\n            result = i \r\n    return result"
    },
    {
        "number": 659,
        "prompt": "Write a python function to print duplicants from a list of integers.\ndef Repeat(x): \n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    for i in x: \n        if x.count(i) > 1: \n            print(i, end=\" \") \n  \nx = list(map(int, input(\"Enter integers separated by space: \").split())) \n  \nRepeat(x) \n\n# Example \n# Input: 1 2 3 1 4 2 5 6 2 7\n# Output: 1 2\n# Explanation: 1 and 2 are the duplicants in the list.\n\n# Time Complexity: O(n^2) ",
        "generated_testcode": "assert Repeat([1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3]) == [1, 2, 3]\n",
        "test": "assert Repeat([10, 20, 30, 20, 20, 30, 40, 50, -20, 60, 60, -20, -20]) == [20, 30, -20, 60]\nassert Repeat([-1, 1, -1, 8]) == [-1]\nassert Repeat([1, 2, 3, 1, 2,]) == [1, 2]",
        "canonical_solution": "def Repeat(x): \r\n    _size = len(x) \r\n    repeated = [] \r\n    for i in range(_size): \r\n        k = i + 1\r\n        for j in range(k, _size): \r\n            if x[i] == x[j] and x[i] not in repeated: \r\n                repeated.append(x[i]) \r\n    return repeated "
    },
    {
        "number": 660,
        "prompt": "Write a python function to choose points from two ranges such that no point lies in both the ranges.\ndef find_Points(l1,r1,l2,r2): \n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    if l1==r1: \n        return [l2] \n    if l2==r2: \n        return [l1] \n    if l1<l2: \n        return find_Points(l1,r1,l2+1,r2) \n    elif r1<r2: \n        return find_Points(l1+1,r1,l2,r2) \n    else: \n        return [l1] \n\n# test the function \nl1 = 1\nr1 = 5\nl2 = 3\nr2 = 7\npoints = find_Points(l1, r1, l2, r2) \nprint(\"Points in range 1:\",l1,\"to\",r1,\"and range 2:\",l2,\"to\",r2,\"are:\", points) ",
        "generated_testcode": "assert find_Points(1,5,3,7) == (1,7)\n",
        "test": "assert find_Points(5,10,1,5) == (1,10)\nassert find_Points(3,5,7,9) == (3,9)\nassert find_Points(1,5,2,8) == (1,8)",
        "canonical_solution": "def find_Points(l1,r1,l2,r2): \r\n    x = min(l1,l2) if (l1 != l2) else -1\r\n    y = max(r1,r2) if (r1 != r2) else -1\r\n    return (x,y)"
    },
    {
        "number": 661,
        "prompt": "Write a function to find the maximum sum that can be formed which has no three consecutive elements present.\ndef max_sum_of_three_consecutive(arr, n): \n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    if n == 0 or n == 1 or n == 2:\n        return arr[0]\n    max_sum = arr[0]\n    second_max = max(arr[0], arr[1])\n    third_max = min(arr[0], arr[1])\n    for i in range(2, n): \n        current_sum = arr[i] + max(second_max, third_max) \n        max_sum = max(max_sum, current_sum) \n        third_max = second_max \n        second_max = max(second_max, arr[i]) \n    return max_sum\n  \n# Test the function \narr = [5, 5, 10, 20, 10, 30] \nn = len(arr) \nprint(\"Maximum sum of elements not in three consecutive positions is\", max_sum_of_three_consecutive(arr, n)) ",
        "generated_testcode": "assert max_sum_of_three_consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9], 7) == 24\n",
        "test": "assert max_sum_of_three_consecutive([100, 1000, 100, 1000, 1], 5) == 2101\nassert max_sum_of_three_consecutive([3000, 2000, 1000, 3, 10], 5) == 5013\nassert max_sum_of_three_consecutive([1, 2, 3, 4, 5, 6, 7, 8], 8) == 27",
        "canonical_solution": "def max_sum_of_three_consecutive(arr, n): \r\n\tsum = [0 for k in range(n)] \r\n\tif n >= 1: \r\n\t\tsum[0] = arr[0] \r\n\tif n >= 2: \r\n\t\tsum[1] = arr[0] + arr[1] \r\n\tif n > 2: \r\n\t\tsum[2] = max(sum[1], max(arr[1] + arr[2], arr[0] + arr[2])) \r\n\tfor i in range(3, n): \r\n\t\tsum[i] = max(max(sum[i-1], sum[i-2] + arr[i]), arr[i] + arr[i-1] + sum[i-3]) \r\n\treturn sum[n-1]"
    },
    {
        "number": 662,
        "prompt": "Write a function to sort a list in a dictionary.\ndef sorted_dict(dict1):\n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    sorted_dict1 = {}\n    sorted_list = sorted(dict1.items(), key=lambda x: x[0])\n    for key, value in sorted_list:\n        sorted_dict1[key] = value\n    return sorted_dict1\n\n\n# Test the function with a dictionary\ndict1 = {'apple': 2, 'banana': 1, 'orange': 4, 'pear': 3}\nprint(sorted_dict(dict1))\n# Output: {'banana': 1, 'apple': 2, 'pear': 3, 'orange': 4}\n\n# Test the function with another dictionary\ndict2 = {'zebra': 1, 'elephant': 2, 'lion': 3, 'monkey': 4}\nprint(sorted_dict(dict2))\n# Output: {'elephant': 2, 'lion': 3, 'monkey': 4, 'zebra': 1} ",
        "generated_testcode": "assert sorted_dict({'a': 1, 'b': 2, 'c': 3, 'd': 4}) == {'a': 1, 'b': 2, 'c': 3, 'd': 4}\n",
        "test": "assert sorted_dict({'n1': [2, 3, 1], 'n2': [5, 1, 2], 'n3': [3, 2, 4]})=={'n1': [1, 2, 3], 'n2': [1, 2, 5], 'n3': [2, 3, 4]}\nassert sorted_dict({'n1': [25,37,41], 'n2': [41,54,63], 'n3': [29,38,93]})=={'n1': [25, 37, 41], 'n2': [41, 54, 63], 'n3': [29, 38, 93]}\nassert sorted_dict({'n1': [58,44,56], 'n2': [91,34,58], 'n3': [100,200,300]})=={'n1': [44, 56, 58], 'n2': [34, 58, 91], 'n3': [100, 200, 300]}",
        "canonical_solution": "def sorted_dict(dict1):\r\n  sorted_dict = {x: sorted(y) for x, y in dict1.items()}\r\n  return sorted_dict"
    },
    {
        "number": 663,
        "prompt": "Write a function to find the largest possible value of k such that k modulo x is y.\ndef find_max_val(n, x, y): \n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    max_val = 0\n    while y <= n:\n        max_val = max(max_val, y)\n        y += x\n    return max_val\n\n# Test the function with example inputs\nprint(find_max_val(10, 3, 1)) # Output: 3\nprint(find_max_val(10, 3, 2)) # Output: 9\nprint(find_max_val(10, 3, 4)) # Output: 9\nprint(find_max_val(10, 3, 5)) # Output: 9\nprint(find_max_val(10, 3, 6)) # Output: 12\nprint(find_max_val(10, 3, 7)) # Output: 12\nprint(find_max_val(10, 3, 8)) # Output: 15\n\n# Test the function with edge cases\nprint(find_max_val(1, 1, 0)) # Output: 0\nprint(find_max_val(1, 1, 1)) # Output: 1\nprint(find_max_val(1, 1, 2)) # Output: 1\nprint(find_max_val(1, 2, 0)) # Output: 0\nprint(find_max_val(1, 2, 1)) # Output: 1\nprint(find_max_val(1, 2, 2)) # Output",
        "generated_testcode": "assert find_max_val(10, 3, 2) == 9\n",
        "test": "assert find_max_val(15, 10, 5) == 15\nassert find_max_val(187, 10, 5) == 185\nassert find_max_val(16, 11, 1) == 12",
        "canonical_solution": "import sys \r\ndef find_max_val(n, x, y): \r\n\tans = -sys.maxsize \r\n\tfor k in range(n + 1): \r\n\t\tif (k % x == y): \r\n\t\t\tans = max(ans, k) \r\n\treturn (ans if (ans >= 0 and\r\n\t\t\t\t\tans <= n) else -1) "
    },
    {
        "number": 664,
        "prompt": "Write a python function to find the average of even numbers till a given even number.\ndef average_Even(n) : \n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    s = 0\n    count = 0\n    for i in range(2, n+1, 2) : \n        s += i \n        count += 1\n    return s / count \n\n# Test the function \nprint(\"Average of even numbers till 10 is : \", average_Even(10)) \nprint(\"Average of even numbers till 12 is : \", average_Even(12)) ",
        "generated_testcode": "assert average_Even(10) == 6\n",
        "test": "assert average_Even(2) == 2\nassert average_Even(4) == 3\nassert average_Even(100) == 51",
        "canonical_solution": "def average_Even(n) : \r\n    if (n% 2!= 0) : \r\n        return (\"Invalid Input\") \r\n        return -1  \r\n    sm = 0\r\n    count = 0\r\n    while (n>= 2) : \r\n        count = count+1\r\n        sm = sm+n \r\n        n = n-2\r\n    return sm // count "
    },
    {
        "number": 665,
        "prompt": "Write a python function to shift first element to the end of given list.\ndef move_last(num_list):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": true,
        "answer": "    # shift the first element to the end\n    num_list.append(num_list.pop(0))\n    return num_list\n\n# Test the function\nmy_list = [1, 2, 3, 4, 5, 6]\nprint(move_last(my_list))  # Output: [2, 3, 4, 5, 6, 1]\nmy_list = [7, 8, 9]\nprint(move_last(my_list))  # Output: [8, 9, 7]\n\n# Explanation: \n# In the first test case, the function removes the first element (1) from the list and adds it to the end of the list, which gives [2, 3, 4, 5, 6, 1]. \n# In the second test case, the function removes the first element (7) from the list and adds it to the end of the list, which gives [8, 9, 7]. ",
        "generated_testcode": "assert move_last([1, 2, 3, 4, 5]) == [2, 3, 4, 5, 1]\n",
        "test": "assert move_last([1,2,3,4]) == [2,3,4,1]\nassert move_last([2,3,4,1,5,0]) == [3,4,1,5,0,2]\nassert move_last([5,4,3,2,1]) == [4,3,2,1,5]",
        "canonical_solution": "def move_last(num_list):\r\n    a = [num_list[0] for i in range(num_list.count(num_list[0]))]\r\n    x = [ i for i in num_list if i != num_list[0]]\r\n    x.extend(a)\r\n    return (x)"
    },
    {
        "number": 666,
        "prompt": "Write a function to count occurrence of a character in a string.\ndef count_char(string,char):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    count = 0\n    for i in string:\n        if i == char:\n            count += 1\n    return count\n\n# Example usage\nprint(count_char(\"hello world\", \"l\")) # Output: 3\nprint(count_char(\"hello world\", \"o\")) # Output: 2\nprint(count_char(\"hello world\", \"z\")) # Output: 0\n",
        "generated_testcode": "assert count_char(\"hello world\", \"l\") == 3\n",
        "test": "assert count_char(\"Python\",'o')==1\nassert count_char(\"little\",'t')==2\nassert count_char(\"assert\",'s')==2",
        "canonical_solution": "def count_char(string,char):\r\n count = 0\r\n for i in range(len(string)):\r\n    if(string[i] == char):\r\n        count = count + 1\r\n return count"
    },
    {
        "number": 667,
        "prompt": "Write a python function to count number of vowels in the string.\ndef Check_Vow(string, vowels): \n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": true,
        "answer": "    count = 0\n    for i in string: \n        if i in vowels: \n            count += 1\n    return count \n  \n# Driver code \nstring = \"Python is a powerful language\"\nvowels = \"aeiouAEIOU\"\nprint(Check_Vow(string, vowels)) \n\n# Output: 4\n\ndef Check_Cons(string, consonants): \n    count = 0\n    for i in string: \n        if i in consonants: \n            count += 1\n    return count \n  \n# Driver code \nstring = \"Python is a powerful language\"\nconsonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\nprint(Check_Cons(string, consonants)) \n\n# Output: 10\n\ndef Count_Spaces(string):\n    count = 0\n    for i in string:\n        if i == \" \":\n            count += 1\n    return count\n\n# Driver code\nstring = \"Python is a powerful language\"\nprint(Count_Spaces(string))\n\n# Output: 3\n\ndef Count_Digits(string):\n    count = 0\n    for i in string:\n        if i.isdigit():\n            count += 1\n    return count\n\n# Driver code\nstring = \"Python is a powerful language\"\nprint(Count_Digits(string))\n\n#",
        "generated_testcode": "assert Check_Vow(\"hello\", \"aeiou\") == 2\n",
        "test": "assert Check_Vow('corner','AaEeIiOoUu') == 2\nassert Check_Vow('valid','AaEeIiOoUu') == 2\nassert Check_Vow('true','AaEeIiOoUu') ==2",
        "canonical_solution": "def Check_Vow(string, vowels): \r\n    final = [each for each in string if each in vowels] \r\n    return(len(final)) \r\n"
    },
    {
        "number": 668,
        "prompt": "Write a python function to replace multiple occurence of character by single.\ndef replace(string, char): \n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    result = \"\" \n    prev_char = string[0] \n    count = 1\n    for i in range(1, len(string)): \n        if string[i] == prev_char: \n            count += 1\n        else: \n            result += prev_char + str(count)\n            prev_char = string[i] \n            count = 1\n    result += prev_char + str(count) \n    return result \n\n# Test the function \nstring = \"aaabbbbcccddeefffgghh\"\nprint(replace(string, \"a\")) ",
        "generated_testcode": "assert replace(\"hello world\", \"l\") == \"heo word\"\n",
        "test": "assert replace('peep','e') == 'pep'\nassert replace('Greek','e') == 'Grek'\nassert replace('Moon','o') == 'Mon'",
        "canonical_solution": "import re \r\ndef replace(string, char): \r\n    pattern = char + '{2,}'\r\n    string = re.sub(pattern, char, string) \r\n    return string "
    },
    {
        "number": 669,
        "prompt": "Write a function to check whether the given ip address is valid or not using regex.\ndef check_IP(Ip): \n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    regex = \"^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])$\"\n    return re.match(regex, Ip) ",
        "generated_testcode": "assert check_IP(\"192.168.1.1\") == True\n",
        "test": "assert check_IP(\"192.168.0.1\") == 'Valid IP address'\nassert check_IP(\"110.234.52.124\") == 'Valid IP address'\nassert check_IP(\"366.1.2.2\") == 'Invalid IP address'",
        "canonical_solution": "import re \r\nregex = '''^(25[0-5]|2[0-4][0-9]|[0-1]?[0-9][0-9]?)\\.( \r\n\t\t\t25[0-5]|2[0-4][0-9]|[0-1]?[0-9][0-9]?)\\.( \r\n\t\t\t25[0-5]|2[0-4][0-9]|[0-1]?[0-9][0-9]?)\\.( \r\n\t\t\t25[0-5]|2[0-4][0-9]|[0-1]?[0-9][0-9]?)$'''\r\ndef check_IP(Ip): \r\n\tif(re.search(regex, Ip)): \r\n\t\treturn (\"Valid IP address\") \r\n\telse: \r\n\t\treturn (\"Invalid IP address\") "
    },
    {
        "number": 670,
        "prompt": "Write a python function to check whether a sequence of numbers has a decreasing trend or not.\ndef decreasing_trend(nums):\n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    if len(nums) <= 1:\n        return True\n    for i in range(len(nums) - 1):\n        if nums[i] < nums[i+1]:\n            return False\n    return True\n\n# Test cases\nprint(decreasing_trend([1,2,3,4,5,6,7,8,9,10])) # False\nprint(decreasing_trend([10,9,8,7,6,5,4,3,2,1])) # True\nprint(decreasing_trend([1,1,1,1,1])) # True\nprint(decreasing_trend([1])) # True\nprint(decreasing_trend([])) # True\n\n# Time complexity: O(n) ",
        "generated_testcode": "assert decreasing_trend([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == False\n",
        "test": "assert decreasing_trend([-4,-3,-2,-1]) == True\nassert decreasing_trend([1,2,3]) == True\nassert decreasing_trend([3,2,1]) == False",
        "canonical_solution": "def decreasing_trend(nums):\r\n    if (sorted(nums)== nums):\r\n        return True\r\n    else:\r\n        return False"
    },
    {
        "number": 671,
        "prompt": "Write a python function to set the right most unset bit.\ndef get_Pos_Of_Right_most_Set_Bit(n): \n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    return n & -n \n\n# Function to find the power of 2 \ndef power_of_two(n): \n    return 1 << n.bit_length() - 1\n\n# Function to find the next power of two \ndef next_power_of_two(n): \n    return 1 << n.bit_length() \n\n# Function to set the right most unset bit \ndef set_right_most_bit(n): \n    return n | get_Pos_Of_Right_most_Bit(n) \n\n# Function to find the next power of two greater than or equal to n \ndef get_next_power_of_two(n): \n    if n == 0: \n        return 1\n    else: \n        return next_power_of_two(n) \n\n# Function to find the next higher power of 2 greater than or equal to n \ndef next_higher_power_of_2(n): \n    return get_next_power_of_two(n) << 1\n\n# Function to find the previous power of two \ndef prev_power_of_two(n): \n    return (n >> 1) \n\n# Function to find the highest set bit in n \ndef highest_set_bit(n): \n    return n & -n \n\n# Function to find the position of the highest set bit \ndef position_of_highest_set_bit(n): \n    return n",
        "generated_testcode": "assert get_Pos_Of_Right_most_Set_Bit(12) == 4\n",
        "test": "assert set_Right_most_Unset_Bit(21) == 23\nassert set_Right_most_Unset_Bit(11) == 15\nassert set_Right_most_Unset_Bit(15) == 15",
        "canonical_solution": "import math \r\ndef get_Pos_Of_Right_most_Set_Bit(n): \r\n    return int(math.log2(n&-n)+1)   \r\ndef set_Right_most_Unset_Bit(n): \r\n    if (n == 0): \r\n        return 1\r\n    if ((n & (n + 1)) == 0):     \r\n        return n \r\n    pos = get_Pos_Of_Right_most_Set_Bit(~n)      \r\n    return ((1 << (pos - 1)) | n) "
    },
    {
        "number": 672,
        "prompt": "Write a function to find maximum of three numbers.\ndef max_of_three(num1,num2,num3): \n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    if num1>=num2 and num1>=num3:\n        return num1\n    elif num2>=num1 and num2>=num3:\n        return num2\n    else:\n        return num3\n    \n# test the function with values \nprint(max_of_three(10, 20, 30)) # output: 30 \nprint(max_of_three(50, 20, 10)) # output: 50 \nprint(max_of_three(100, 50, 100)) # output: 100 \n\n# Write a function to find the minimum of three numbers\ndef min_of_three(num1,num2,num3): \n    if num1<=num2 and num1<=num3:\n        return num1\n    elif num2<=num1 and num2<=num3:\n        return num2\n    else:\n        return num3\n    \n# test the function with values \nprint(min_of_three(10, 20, 30)) # output: 10 \nprint(min_of_three(50, 20, 10)) # output: 10 \nprint(min_of_three(100, 50, 100)) # output: 50 \n\n# Write a function to find the sum of three numbers\ndef sum_of_three(num1,num2,num3): \n    return num",
        "generated_testcode": "assert max_of_three(10,20,30) == 30\n",
        "test": "assert max_of_three(10,20,30)==30\nassert max_of_three(55,47,39)==55\nassert max_of_three(10,49,30)==49",
        "canonical_solution": "def max_of_three(num1,num2,num3): \r\n    if (num1 >= num2) and (num1 >= num3):\r\n       lnum = num1\r\n    elif (num2 >= num1) and (num2 >= num3):\r\n       lnum = num2\r\n    else:\r\n       lnum = num3\r\n    return lnum"
    },
    {
        "number": 673,
        "prompt": "Write a python function to convert a list of multiple integers into a single integer.\ndef convert(list): \n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": true,
        "answer": "    result = 0\n    for i in range(len(list)): \n        result = result * 10 + list[i] \n    return result \n  \n# Driver code \nlist = [1, 2, 3, 4, 5] \nprint(\"Original list:\", list) \n  \n# converting list to integer \ninteger = convert(list) \nprint(\"Integer value:\", integer) ",
        "generated_testcode": "assert convert([1, 2, 3, 4, 5]) == 12345\n",
        "test": "assert convert([1,2,3]) == 123\nassert convert([4,5,6]) == 456\nassert convert([7,8,9]) == 789",
        "canonical_solution": "def convert(list): \r\n    s = [str(i) for i in list] \r\n    res = int(\"\".join(s))  \r\n    return (res) "
    },
    {
        "number": 674,
        "prompt": "Write a function to remove duplicate words from a given string using collections module.\ndef remove_duplicate(string):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    word_list = string.split()\n    seen = set()\n    new_list = []\n    for word in word_list:\n        if word not in seen:\n            seen.add(word)\n            new_list.append(word)\n    return \" \".join(new_list)\n\n\n# Example usage:\nprint(remove_duplicate(\"This is a test string with some duplicate words this is a test\"))\n# Output: \"This string with some a is test\"\n\n# Explanation: The function will return a string with no duplicate words. ",
        "generated_testcode": "assert remove_duplicate(\"hello world hello python world\") == \"hello python\"\n",
        "test": "assert remove_duplicate(\"Python Exercises Practice Solution Exercises\")==(\"Python Exercises Practice Solution\")\nassert remove_duplicate(\"Python Exercises Practice Solution Python\")==(\"Python Exercises Practice Solution\")\nassert remove_duplicate(\"Python Exercises Practice Solution Practice\")==(\"Python Exercises Practice Solution\")",
        "canonical_solution": "from collections import OrderedDict\r\ndef remove_duplicate(string):\r\n  result = ' '.join(OrderedDict((w,w) for w in string.split()).keys())\r\n  return result"
    },
    {
        "number": 675,
        "prompt": "Write a function to add two integers. however, if the sum is between the given range it will return 20.\ndef sum_nums(x, y,m,n):\n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    if (x + y) < m or (x + y) > n:\n        return 20\n    else:\n        return x + y\nprint(sum_nums(5, 6, 10, 20)) ",
        "generated_testcode": "assert sum_nums(10, 20, 10, 30) == 30\n",
        "test": "assert sum_nums(2,10,11,20)==20\nassert sum_nums(15,17,1,10)==32\nassert sum_nums(10,15,5,30)==20",
        "canonical_solution": "def sum_nums(x, y,m,n):\r\n    sum_nums= x + y\r\n    if sum_nums in range(m, n):\r\n        return 20\r\n    else:\r\n        return sum_nums"
    },
    {
        "number": 676,
        "prompt": "Write a function to remove everything except alphanumeric characters from the given string by using regex.\ndef remove_extra_char(text1):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    import re\n    text2 = re.sub('[^a-zA-Z0-9]', '', text1)\n    return text2\n\n#Test the function with the following string\ntext1 = \"Hello, World! 123\"\nprint(remove_extra_char(text1)) # Expected output: \"Helloworld123\"\n\n# Test the function with the following string\ntext2 = \"This is a test@ string with# special characters.\"\nprint(remove_extra_char(text2)) # Expected output: \"Thisisateststringwithspecialcharacters.\" ",
        "generated_testcode": "assert remove_extra_char(\"Hello, World!\") == \"HelloWorld\"\n",
        "test": "assert remove_extra_char('**//Google Android// - 12. ') == 'GoogleAndroid12'\nassert remove_extra_char('****//Google Flutter//*** - 36. ') == 'GoogleFlutter36'\nassert remove_extra_char('**//Google Firebase// - 478. ') == 'GoogleFirebase478'",
        "canonical_solution": "import re\r\ndef remove_extra_char(text1):\r\n  pattern = re.compile('[\\W_]+')\r\n  return (pattern.sub('', text1))"
    },
    {
        "number": 677,
        "prompt": "Write a function to check if the triangle is valid or not.\ndef validity_triangle(a,b,c):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": true,
        "answer": "    if a+b>c and a+c>b and b+c>a:\n        return True\n    else:\n        return False\n\n# Test case 1\na,b,c = 3,4,5\nprint(validity_triangle(a,b,c)) # Should return True\n\n# Test case 2\na,b,c = 7,2,2\nprint(validity_triangle(a,b,c)) # Should return False\n\n# Test case 3\na,b,c = 1,2,3\nprint(validity_triangle(a,b,c)) # Should return False\n\n# Test case 4\na,b,c = 5,5,5\nprint(validity_triangle(a,b,c)) # Should return True\n\n# Test case 5\na,b,c = 10,10,10\nprint(validity_triangle(a,b,c)) # Should return True\n\n# Test case 6\na,b,c = 10,15,20\nprint(validity_triangle(a,b,c)) # Should return False\n\n# Test case 7\na,b,c = 1,2,5\nprint(validity_triangle(a,b,c)) # Should return False\n\n# Test case 8\na,b,c = 3,3,3\nprint(validity_triangle(a,b,c)) # Should return True\n\n# Test case 9\n",
        "generated_testcode": "assert validity_triangle(3,4,5) == True\n",
        "test": "assert validity_triangle(60,50,90)==False\nassert validity_triangle(45,75,60)==True\nassert validity_triangle(30,50,100)==True",
        "canonical_solution": "def validity_triangle(a,b,c):\r\n total = a + b + c\r\n if total == 180:\r\n    return True\r\n else:\r\n    return False"
    },
    {
        "number": 678,
        "prompt": "Write a python function to remove spaces from a given string.\ndef remove_spaces(str1):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    return str1.replace(\" \", \"\")\n\nprint(remove_spaces(\"hello world\"))  # Output: helloworld\nprint(remove_spaces(\"Python is fun\"))  # Output: Pythonisfun\nprint(remove_spaces(\"hi there\"))  # Output: hithere\nprint(remove_spaces(\"hey   there!\"))  # Output: heythere!\n\n# Second example\n# Function to remove all the spaces in a given string and replace them with a hyphen\ndef remove_spaces_with_hyphen(str1):\n    return str1.replace(\" \", \"-\")\n\nprint(remove_spaces_with_hyphen(\"hello world\"))  # Output: hello-world\nprint(remove_spaces_with_hyphen(\"Python is fun\"))  # Output: Python-is-fun\nprint(remove_spaces_with_hyphen(\"hi there\"))  # Output: hithere\nprint(remove_spaces_with_hyphen(\"hey   there!\"))  # Output: hey-there!\n\n# Third example\n# Function to remove all the spaces and replace them with an underscore\ndef remove_spaces_with_underscore(str1):\n    return str1.replace(\" \", \"_\")\n\nprint(remove_spaces_with_underscore(\"hello world\"))  # Output: hello_world\nprint(remove_spaces_with_underscore(\"Python is fun\"))  # Output: Python_is_fun\nprint(remove_spaces_with_underscore(\"hi there\"))  # Output: hithere\nprint",
        "generated_testcode": "assert remove_spaces(\"Hello World\") == \"HelloWorld\"\n",
        "test": "assert remove_spaces(\"a b c\") == \"abc\"\nassert remove_spaces(\"1 2 3\") == \"123\"\nassert remove_spaces(\" b c\") == \"bc\"",
        "canonical_solution": "def remove_spaces(str1):\r\n  str1 = str1.replace(' ','')\r\n  return str1"
    },
    {
        "number": 679,
        "prompt": "Write a function to access dictionary key\u2019s element by index.\ndef access_key(ditionary,key):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": true,
        "answer": "    return list(ditionary.keys())[key]\n\n# Example usage:\nmy_dict = {'apple': 1, 'banana': 2, 'orange': 3}\nprint(access_key(my_dict, 1)) # Output: 'banana'\nprint(access_key(my_dict, 0)) # Output: 'apple'\nprint(access_key(my_dict, 2)) # Output: 'orange'\n\n# Write a function to access dictionary value\u2019s element by index.\ndef access_value(ditionary,value):\n    return list(ditionary.values())[value]\n\n# Example usage:\nmy_dict = {'apple': 1, 'banana': 2, 'orange': 3}\nprint(access_value(my_dict, 1)) # Output: 2\nprint(access_value(my_dict, 0)) # Output: 1\nprint(access_value(my_dict, 2)) # Output: 3\n\n# Write a function to access dictionary key-value pair by index.\ndef access_item(ditionary,index):\n    return list(ditionary.items())[index]\n\n# Example usage:\nmy_dict = {'apple': 1, 'banana': 2, 'orange': 3}\nprint(access_item(my_dict, 1)) # Output: ('banana', 2)\nprint(access_item(my_dict, 0)) # Output:",
        "generated_testcode": "assert access_key({'a':1,'b':2,'c':3},1) == 'b'\n",
        "test": "assert access_key({'physics': 80, 'math': 90, 'chemistry': 86},0)== 'physics'\nassert access_key({'python':10, 'java': 20, 'C++':30},2)== 'C++'\nassert access_key({'program':15,'computer':45},1)== 'computer'",
        "canonical_solution": "def access_key(ditionary,key):\r\n  return list(ditionary)[key]"
    },
    {
        "number": 680,
        "prompt": "Write a python function to check whether a sequence of numbers has an increasing trend or not.\ndef increasing_trend(nums):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    for i in range(len(nums)-1):\n        if nums[i] > nums[i+1]:\n            return False\n    return True\n\n# Test cases\nprint(increasing_trend([1,2,3,4,5,6])) # Should print True\nprint(increasing_trend([1,2,5,3,4,6])) # Should print False\nprint(increasing_trend([1,2,2,3,4,5])) # Should print True\nprint(increasing_trend([1,2,2,2,3,4])) # Should print True\nprint(increasing_trend([1,1,2,3,4,5])) # Should print False\nprint(increasing_trend([1,2,2,2,2,3])) # Should print True\nprint(increasing_trend([1,2,3,2,4,5])) # Should print False ",
        "generated_testcode": "assert increasing_trend([1, 2, 3, 4, 5, 6, 7, 8, 9]) == True\n",
        "test": "assert increasing_trend([1,2,3,4]) == True\nassert increasing_trend([4,3,2,1]) == False\nassert increasing_trend([0,1,4,9]) == True",
        "canonical_solution": "def increasing_trend(nums):\r\n    if (sorted(nums)== nums):\r\n        return True\r\n    else:\r\n        return False"
    },
    {
        "number": 681,
        "prompt": "Write a python function to find the smallest prime divisor of a number.\ndef smallest_Divisor(n): \n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    def isPrime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n    \n    for i in range(2, n+1):\n        if n % i == 0 and isPrime(i):\n            return i\n        \nprint(smallest_Divisor(100)) # Output: 2\nprint(smallest_Divisor(15)) # Output: 3\nprint(smallest_Divisor(17)) # Output: 17\nprint(smallest_Divisor(123456)) # Output: 2\nprint(smallest_Divisor(25)) # Output: 5\nprint(smallest_Divisor(7)) # Output: 7\n\n# Time Complexity: O(sqrt(n))\n# Space Complexity: O(1)\n\n# You can also use Sieve of Eratosthenes algorithm to find prime numbers in O(nlog(logn)) time complexity and O(n) space complexity. ",
        "generated_testcode": "assert smallest_Divisor(12) == 2\n",
        "test": "assert smallest_Divisor(10) == 2\nassert smallest_Divisor(25) == 5\nassert smallest_Divisor(31) == 31",
        "canonical_solution": "def smallest_Divisor(n): \r\n    if (n % 2 == 0): \r\n        return 2; \r\n    i = 3;  \r\n    while (i*i <= n): \r\n        if (n % i == 0): \r\n            return i; \r\n        i += 2; \r\n    return n; "
    },
    {
        "number": 682,
        "prompt": "Write a function to multiply two lists using map and lambda function.\ndef mul_list(nums1,nums2):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": true,
        "answer": "    return list(map(lambda x, y: x*y,nums1,nums2))\n\n# Test the function with the following input\nnums1 = [2, 3, 4, 5, 6]\nnums2 = [7, 8, 9, 10]\nprint(mul_list(nums1,nums2)) ",
        "generated_testcode": "assert mul_list([1,2,3],[4,5,6]) == [4,10,18]\n",
        "test": "assert mul_list([1, 2, 3],[4,5,6])==[4,10,18]\nassert mul_list([1,2],[3,4])==[3,8]\nassert mul_list([90,120],[50,70])==[4500,8400]",
        "canonical_solution": "def mul_list(nums1,nums2):\r\n  result = map(lambda x, y: x * y, nums1, nums2)\r\n  return list(result)"
    },
    {
        "number": 683,
        "prompt": "Write a python function to check whether the given number can be represented by sum of two squares or not.\ndef sum_Square(n) : \n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    for i in range(1, int(n**0.5)+1) : \n        j = n - i*i \n        if (j*(j+1) == 2*i*i) : \n            return True\n    return False\n\nif __name__ == \"__main__\" : \n    n = int(input(\"Enter a number : \"))\n    if sum_Square(n) : \n        print(n, \"can be represented as sum of two squares\"\n    else : \n        print(n, \"cannot be represented as sum of two squares\" ",
        "generated_testcode": "assert sum_Square(16) == True\n",
        "test": "assert sum_Square(25) == True\nassert sum_Square(24) == False\nassert sum_Square(17) == True",
        "canonical_solution": "def sum_Square(n) : \r\n    i = 1 \r\n    while i*i <= n : \r\n        j = 1\r\n        while (j*j <= n) : \r\n            if (i*i+j*j == n) : \r\n                return True\r\n            j = j+1\r\n        i = i+1     \r\n    return False"
    },
    {
        "number": 684,
        "prompt": "Write a python function to count occurences of a character in a repeated string.\ndef count_Char(str,x): \n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    count = 0\n    for i in range(len(str)): \n        if str[i] == x: \n            count += 1\n    return count\n  \n# test the function \nstr = \"abcabc\"\nx = 'a'\nprint(\"Occurence of\", x,\"is :\",count_Char(str, x)) \n\n# Output: Occurence of a is : 2 ",
        "generated_testcode": "assert count_Char(\"hello world\", \"l\") == 3\n",
        "test": "assert count_Char(\"abcac\",'a') == 4\nassert count_Char(\"abca\",'c') == 2\nassert count_Char(\"aba\",'a') == 7",
        "canonical_solution": "def count_Char(str,x): \r\n    count = 0\r\n    for i in range(len(str)):  \r\n        if (str[i] == x) : \r\n            count += 1\r\n    n = 10\r\n    repititions = n // len(str)  \r\n    count = count * repititions  \r\n    l = n % len(str)  \r\n    for i in range(l): \r\n        if (str[i] == x):  \r\n            count += 1\r\n    return count  "
    },
    {
        "number": 685,
        "prompt": "Write a python function to find sum of prime numbers between 1 to n.\ndef sum_Of_Primes(n): \n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": true,
        "answer": "    # Initialize sum variable\n    sum = 0\n    # Loop through all numbers from 2 to n\n    for num in range(2, n+1): \n        # If the number is prime then add it to sum\n        if is_prime(num): \n            sum += num\n    return sum\n\n# Define a function to check if a number is prime or not\ndef is_prime(num): \n    if num < 2: \n        return False\n    # Loop through all numbers from 2 to n-1\n    for i in range(2, num): \n        # If num is divisible by any number between 2 and num-1, it is not prime\n        if num % i == 0: \n            return False\n    return True\n\n# Test the function\nprint(sum_Of_Primes(10)) # Output: 17\nprint(sum_Of_Primes(20)) # Output: 77\nprint(sum_Of_Primes(50)) # Output: 2233\nprint(sum_Of_Primes(100)) # Output: 1291\nprint(sum_Of_Primes(1000)) # Output: 12913",
        "generated_testcode": "assert sum_Of_Primes(10) == 17\n",
        "test": "assert sum_Of_Primes(10) == 17\nassert sum_Of_Primes(20) == 77\nassert sum_Of_Primes(5) == 10",
        "canonical_solution": "def sum_Of_Primes(n): \r\n    prime = [True] * (n + 1)  \r\n    p = 2\r\n    while p * p <= n: \r\n        if prime[p] == True:  \r\n            i = p * 2\r\n            while i <= n: \r\n                prime[i] = False\r\n                i += p \r\n        p += 1    \r\n    sum = 0\r\n    for i in range (2,n + 1): \r\n        if(prime[i]): \r\n            sum += i \r\n    return sum"
    },
    {
        "number": 686,
        "prompt": "Write a function to find the frequency of each element in the given list.\ndef freq_element(test_tup):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    freq_dict = {}\n    for i in test_tup:\n        if i in freq_dict:\n            freq_dict[i] += 1\n        else:\n            freq_dict[i] = 1\n    return freq_dict\n\n\ntest_tup = (1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1)\nprint(freq_element(test_tup))\n\n# Output: {1: 3, 2: 2, 3: 2, 4: 2, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1}\n",
        "generated_testcode": "assert freq_element(('a', 'b', 'c', 'a', 'd', 'a', 'c') == {'a': 3, 'b': 1, 'c': 2, 'd': 1}\n",
        "test": "assert freq_element((4, 5, 4, 5, 6, 6, 5, 5, 4) ) == '{4: 3, 5: 4, 6: 2}'\nassert freq_element((7, 8, 8, 9, 4, 7, 6, 5, 4) ) == '{7: 2, 8: 2, 9: 1, 4: 2, 6: 1, 5: 1}'\nassert freq_element((1, 4, 3, 1, 4, 5, 2, 6, 2, 7) ) == '{1: 2, 4: 2, 3: 1, 5: 1, 2: 2, 6: 1, 7: 1}'",
        "canonical_solution": "from collections import defaultdict \r\ndef freq_element(test_tup):\r\n  res = defaultdict(int)\r\n  for ele in test_tup:\r\n    res[ele] += 1\r\n  return (str(dict(res))) "
    },
    {
        "number": 687,
        "prompt": "Write a function to find the greatest common divisor (gcd) of two integers by using recursion.\ndef recur_gcd(a, b):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    if b == 0:\n        return a\n    else:\n        return recur_gcd(b, a % b)\n\n\nprint(recur_gcd(12, 16))\nprint(recur_gcd(20, 8))\nprint(recur_gcd(30, 42))\n\n\n# The function takes two integers as arguments and returns their gcd using recursion. The function first checks if the second integer is zero,\n# if it is, it returns the first integer as the gcd. Otherwise, it returns the gcd of the second integer and the remainder of the first integer\n# divided by the second integer. The function is called recursively with the second integer and the remainder of the first integer divided by the\n# second integer.\n\n# When you run the function, it will output:\n# 4\n# 4\n# 6\n# These are the gcd of the two integers passed as arguments. ",
        "generated_testcode": "assert recur_gcd(27, 18) == 9\n",
        "test": "assert recur_gcd(12,14) == 2\nassert recur_gcd(13,17) == 1\nassert recur_gcd(9, 3) == 3",
        "canonical_solution": "def recur_gcd(a, b):\r\n\tlow = min(a, b)\r\n\thigh = max(a, b)\r\n\tif low == 0:\r\n\t\treturn high\r\n\telif low == 1:\r\n\t\treturn 1\r\n\telse:\r\n\t\treturn recur_gcd(low, high%low)"
    },
    {
        "number": 688,
        "prompt": "Write a function to get the length of a complex number.\ndef len_complex(a,b):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    return (a**2 + b**2)**0.5\n\n# Test the function with the example inputs\nprint(len_complex(3, 4))  # Output: 5.0\nprint(len_complex(0, 5))  # Output: 5.0\nprint(len_complex(-2, 0)) # Output: 2.0\n\n# Test the function with some edge cases\nprint(len_complex(0, 0))  # Output: 0.0\nprint(len_complex(1, 1))  # Output: 1.414213562373095045\nprint(len_complex(-3, -4)) # Output: 5.0\nprint(len_complex(0, -5)) # Output: 5.0\n\n# Test the function with negative inputs\nprint(len_complex(-3, -4)) # Output: 5.0\nprint(len_complex(-5, -12)) # Output: 13.0\nprint(len_complex(0, -1))  # Output: 1.0\n\n# Test the function with floating point inputs\nprint(len_complex(1.5, 2.5)) # Output: 2.73205080756887722\nprint(len_complex(-1.5, -2.5)) # Output: 2.73205080756887722\nprint(len",
        "generated_testcode": "assert len_complex(3+4j) == 5\n",
        "test": "assert len_complex(3,4)==5.0\nassert len_complex(9,10)==13.45362404707371\nassert len_complex(7,9)==11.40175425099138",
        "canonical_solution": "import cmath\r\ndef len_complex(a,b):\r\n  cn=complex(a,b)\r\n  length=abs(cn)\r\n  return length"
    },
    {
        "number": 689,
        "prompt": "## write a function to find the minimum number of jumps to reach the end of the array for the given array of integers where each element represents the max number of steps that can be made forward from that element. > indented block > indented block\ndef min_jumps(arr, n):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    if n <= 1:\n        return 0\n    if arr[0] == 0:\n        return -1\n\n    jumps = 0\n    max_reach = arr[0]\n    steps = arr[0]\n    end = n - 1\n    max_steps = arr[0]\n\n    for i in range(1, n):\n        max_reach = max(max_reach, i + arr[i])\n        steps -= 1\n\n        if i == end:\n            return jumps + 1\n\n        if steps == 0:\n            jumps += 1\n            if i == max_reach:\n                return -1\n            steps = max_reach - i\n            max_steps = max_reach\n\n        elif i + arr[i] > max_steps:\n            max_reach = i + arr[i]\n\n    return -1\n\n\n\narr = [2, 3, 1, 1, 1, 4]\nn = len(arr)\nprint(min_jumps(arr, n))\n\narr = [3, 2, 1, 0, 4]\nn = len(arr)\nprint(min_jumps(arr, n))\n\narr = [2, 3, 1, 2, 4, 1, 2, 2, 3, 0, 0, 3]\nn = len(arr)\nprint(min_jumps(arr,",
        "generated_testcode": "assert min_jumps([1, 3, 5, 8, 9, 2, 6, 4, 7, 6, 9], 7) == 2\n",
        "test": "assert min_jumps([1, 3, 6, 1, 0, 9], 6) == 3\nassert min_jumps([1, 3, 5, 8, 9, 2, 6, 7, 6, 8, 9], 11) == 3\nassert min_jumps([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], 11) == 10",
        "canonical_solution": "def min_jumps(arr, n):\r\n\tjumps = [0 for i in range(n)]\r\n\tif (n == 0) or (arr[0] == 0):\r\n\t\treturn float('inf')\r\n\tjumps[0] = 0\r\n\tfor i in range(1, n):\r\n\t\tjumps[i] = float('inf')\r\n\t\tfor j in range(i):\r\n\t\t\tif (i <= j + arr[j]) and (jumps[j] != float('inf')):\r\n\t\t\t\tjumps[i] = min(jumps[i], jumps[j] + 1)\r\n\t\t\t\tbreak\r\n\treturn jumps[n-1]"
    },
    {
        "number": 690,
        "prompt": "Write a function to multiply consecutive numbers of a given list.\ndef mul_consecutive_nums(nums):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    result = 1\n    for num in nums:\n        result *= num\n    return result\n\n# Example usage:\nnums = [1, 2, 3, 4, 5]\nprint(mul_consecutive_nums(nums)) # Output: 120\n\n# Test with negative numbers:\nnums = [1, -2, 3, -4, 5]\nprint(mul_consecutive_nums(nums)) # Output: -120\n\n# Test with zero in the list:\nnums = [1, 0, 3, 4, 5]\nprint(mul_consecutive_nums(nums)) # Output: 0 ",
        "generated_testcode": "assert mul_consecutive_nums([1, 2, 3, 4, 5]) == 24\n",
        "test": "assert mul_consecutive_nums([1, 1, 3, 4, 4, 5, 6, 7])==[1, 3, 12, 16, 20, 30, 42]\nassert mul_consecutive_nums([4, 5, 8, 9, 6, 10])==[20, 40, 72, 54, 60]\nassert mul_consecutive_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[2, 6, 12, 20, 30, 42, 56, 72, 90]",
        "canonical_solution": "def mul_consecutive_nums(nums):\r\n    result = [b*a for a, b in zip(nums[:-1], nums[1:])]\r\n    return result"
    },
    {
        "number": 691,
        "prompt": "Write a function to group the 1st elements on the basis of 2nd elements in the given tuple list.\ndef group_element(test_list):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    result_dict = {}\n    for i in test_list:\n        if i[1] in result_dict:\n            result_dict[i[1]].append(i[0])\n        else:\n            result_dict[i[1]] = [i[0]]\n    return result_dict\n\n# Test the function\ntest_list = [(1, 'a'), (2, 'b'), (3, 'c'), (4, 'a'), (5, 'b'), (6, 'c'), (7, 'a')]\nprint(group_element(test_list))\n# Output: {'a': [1, 4, 7], 'b': [2, 5], 'c': [3, 6]}\n# The function returns a dictionary with the 2nd element as key and the corresponding first elements as a list. ",
        "generated_testcode": "assert group_element(test_list) == {'a': [1, 2, 3], 'b': [4, 5, 6], 'c': [7, 8, 9]}\n\n# The output should be {'a': [1, 2, 3], 'b': [4, 5, 6], 'c': [7, 8, 9]}\n# The function should group the elements based on the second element of the tuple and return a dictionary with the first element as key and the list of elements as value. ",
        "test": "assert group_element([(6, 5), (2, 7), (2, 5), (8, 7), (9, 8), (3, 7)]) == {5: [6, 2], 7: [2, 8, 3], 8: [9]}\nassert group_element([(7, 6), (3, 8), (3, 6), (9, 8), (10, 9), (4, 8)]) == {6: [7, 3], 8: [3, 9, 4], 9: [10]}\nassert group_element([(8, 7), (4, 9), (4, 7), (10, 9), (11, 10), (5, 9)]) == {7: [8, 4], 9: [4, 10, 5], 10: [11]}",
        "canonical_solution": "from itertools import groupby \r\ndef group_element(test_list):\r\n  res = dict()\r\n  for key, val in groupby(sorted(test_list, key = lambda ele: ele[1]), key = lambda ele: ele[1]):\r\n    res[key] = [ele[0] for ele in val] \r\n  return (res)\r\n"
    },
    {
        "number": 692,
        "prompt": "Write a python function to find the last two digits in factorial of a given number.\ndef last_Two_Digits(N): \n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    if N < 2:\n        return 1\n    else:\n        factorial = 1\n        for i in range(1, N+1):\n            factorial *= i\n        return factorial % 100\n\n# Test the function\nprint(last_Two_Digits(5)) # Expected output: 5\nprint(last_Two_Digits(10)) # Expected output: 385\nprint(last_Two_Digits(20)) # Expected output: 17\nprint(last_Two_Digits(100)) # Expected output: 648\nprint(last_Two_Digits(25)) # Expected output: 67\nprint(last_Two_Digits(1000)) # Expected output: 648\nprint(last_Two_Digits(500)) # Expected output: 648\nprint(last_Two_Digits(501)) # Expected output: 343\nprint(last_Two_Digits(10000)) # Expected output: 241\nprint(last_Two_Digits(5000)) # Expected output: 648\nprint(last_Two_Digits(100000)) # Expected output: 318\nprint(last_Two_Digits(1000000)) # Expected output: 618",
        "generated_testcode": "assert last_Two_Digits(5) == 5\n",
        "test": "assert last_Two_Digits(7) == 40\nassert last_Two_Digits(5) == 20\nassert last_Two_Digits(2) == 2",
        "canonical_solution": "def last_Two_Digits(N): \r\n    if (N >= 10): \r\n        return\r\n    fac = 1\r\n    for i in range(1,N + 1): \r\n        fac = (fac * i) % 100\r\n    return (fac) "
    },
    {
        "number": 693,
        "prompt": "Write a function to remove multiple spaces in a string by using regex.\ndef remove_multiple_spaces(text1):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    import re\n    text1 = re.sub(r'\\s+', ' ', text1)\n    return text1\n\ntext1 = \"This is    a     sample   text.   It has  multiple     spaces.\"\nprint(remove_multiple_spaces(text1)) ",
        "generated_testcode": "assert remove_multiple_spaces(\"Hello   world\") == \"Hello world\"\n",
        "test": "assert remove_multiple_spaces('Google      Assistant') == 'Google Assistant'\nassert remove_multiple_spaces('Quad      Core') == 'Quad Core'\nassert remove_multiple_spaces('ChromeCast      Built-in') == 'ChromeCast Built-in'",
        "canonical_solution": "import re\r\ndef remove_multiple_spaces(text1):\r\n  return (re.sub(' +',' ',text1))"
    },
    {
        "number": 694,
        "prompt": "Write a function to extract unique values from the given dictionary values.\ndef extract_unique(test_dict):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    unique_values = []\n    for value in test_dict.values():\n        if value not in unique_values:\n            unique_values.append(value)\n    return unique_values\n\n\n# Test the function with the given dictionary\ntest_dict = {\"a\": 1, \"b\": 2, \"c\": 3, \"d\": 1, \"e\": 4, \"f\": 2, \"g\": 5}\nprint(extract_unique(test_dict))  # Output: [1, 2, 3, 4, 5]\n\n\n# If you are getting an empty list as output, check your code. ",
        "generated_testcode": "assert extract_unique({'a': 1, 'b': 2, 'c': 3, 'd': 2, 'e': 1}) == {1, 2, 3}\n",
        "test": "assert extract_unique({'msm' : [5, 6, 7, 8],'is' : [10, 11, 7, 5],'best' : [6, 12, 10, 8],'for' : [1, 2, 5]} ) == [1, 2, 5, 6, 7, 8, 10, 11, 12]\nassert extract_unique({'Built' : [7, 1, 9, 4],'for' : [11, 21, 36, 14, 9],'ISP' : [4, 1, 21, 39, 47],'TV' : [1, 32, 38]} ) == [1, 4, 7, 9, 11, 14, 21, 32, 36, 38, 39, 47]\nassert extract_unique({'F' : [11, 13, 14, 17],'A' : [12, 11, 15, 18],'N' : [19, 21, 15, 36],'G' : [37, 36, 35]}) == [11, 12, 13, 14, 15, 17, 18, 19, 21, 35, 36, 37]",
        "canonical_solution": "def extract_unique(test_dict):\r\n  res = list(sorted({ele for val in test_dict.values() for ele in val}))\r\n  return res"
    },
    {
        "number": 695,
        "prompt": "Write a function to check if each element of the second tuple is greater than its corresponding index in the first tuple.\ndef check_greater(test_tup1, test_tup2):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    if len(test_tup1) == len(test_tup2):\n        for i in range(len(test_tup1)):\n            if test_tup1[i] <= test_tup2[i]:\n                return False\n        return True\n    else:\n        return False\n\n# Test cases\nprint(check_greater((1, 2, 3, 4, 5), (2, 3, 4, 5, 6))) # True\nprint(check_greater((1, 2, 3, 4), (0, 3, 5, 6))) # False\nprint(check_greater((1, 2, 3, 4), (0, 3, 5, 6, 7)) # False\nprint(check_greater((1, 2, 3, 4), (1, 2, 3, 4)) # True ",
        "generated_testcode": "assert check_greater((1, 2, 3, 4, 5), (0, 1, 2, 3)) == True\n",
        "test": "assert check_greater((10, 4, 5), (13, 5, 18)) == True\nassert check_greater((1, 2, 3), (2, 1, 4)) == False\nassert check_greater((4, 5, 6), (5, 6, 7)) == True",
        "canonical_solution": "def check_greater(test_tup1, test_tup2):\r\n  res = all(x < y for x, y in zip(test_tup1, test_tup2))\r\n  return (res) "
    },
    {
        "number": 696,
        "prompt": "Write a function to zip two given lists of lists.\ndef zip_list(list1,list2):  \n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    result = []\n    for i in range(len(list1)):\n        result.append(list(zip(list1[i],list2[i]))\n    return result\n\n#Example usage:\nlist1 = [['a', 'b', 'c'], [1, 2, 3]]\nlist2 = ['x', 'y', 'z']\nzip_list(list1, list2) # should return [('a', 'x'), ('b', 'y'), ('c', 'z')]\n\n# Test the function with the example\nprint(zip_list(list1, list2)) ",
        "generated_testcode": "assert zip_list([[1,2,3],[4,5,6]) == [(1,4),(2,5),(3,6)]\n",
        "test": "assert zip_list([[1, 3], [5, 7], [9, 11]] ,[[2, 4], [6, 8], [10, 12, 14]] )==[[1, 3, 2, 4], [5, 7, 6, 8], [9, 11, 10, 12, 14]]\nassert zip_list([[1, 2], [3, 4], [5, 6]] ,[[7, 8], [9, 10], [11, 12]] )==[[1, 2, 7, 8], [3, 4, 9, 10], [5, 6, 11, 12]]\nassert zip_list([['a','b'],['c','d']] , [['e','f'],['g','h']] )==[['a','b','e','f'],['c','d','g','h']]",
        "canonical_solution": "def zip_list(list1,list2):  \r\n result = list(map(list.__add__, list1, list2)) \r\n return result"
    },
    {
        "number": 697,
        "prompt": "Write a function to find number of even elements in the given list using lambda function.\ndef count_even(array_nums):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    return len(list(filter(lambda x: x % 2 == 0, array_nums))), lambda x: x % 2 == 0)\n\narray_nums = [1,2,3,4,5,6,7,8,9,10]\nprint(count_even(array_nums)) ",
        "generated_testcode": "assert count_even([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 4\n",
        "test": "assert count_even([1, 2, 3, 5, 7, 8, 9, 10])==3\nassert count_even([10,15,14,13,-18,12,-20])==5\nassert count_even([1, 2, 4, 8, 9])==3",
        "canonical_solution": "def count_even(array_nums):\r\n   count_even = len(list(filter(lambda x: (x%2 == 0) , array_nums)))\r\n   return count_even"
    },
    {
        "number": 698,
        "prompt": "Write a function to sort dictionary items by tuple product of keys for the given dictionary with tuple keys.\ndef sort_dict_item(test_dict):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    return sorted(test_dict.items(), key=lambda x: (x[0][0] * x[0][1] * x[1], x[1]))\n\n\n# Test the function with the example dictionary\ntest_dict = {(3, 1): 10, (1, 4): 20, (2, 3): 30}\nprint(sort_dict_item(test_dict))\n\n# Output: [(1, 4): 20, (3, 1): 10, (2, 3): 30]\n",
        "generated_testcode": "assert sort_dict_item(test_dict) == sorted_dict\nprint(sorted_dict)\n\n# Output: {(1, 2): 3, (2, 3): 4, (3, 4): 5, (4, 5): 6, (5, 6): 7}\n\n",
        "test": "assert sort_dict_item({(5, 6) : 3, (2, 3) : 9, (8, 4): 10, (6, 4): 12} ) == {(2, 3): 9, (6, 4): 12, (5, 6): 3, (8, 4): 10}\nassert sort_dict_item({(6, 7) : 4, (3, 4) : 10, (9, 5): 11, (7, 5): 13} ) == {(3, 4): 10, (7, 5): 13, (6, 7): 4, (9, 5): 11}\nassert sort_dict_item({(7, 8) : 5, (4, 5) : 11, (10, 6): 12, (8, 6): 14} ) == {(4, 5): 11, (8, 6): 14, (7, 8): 5, (10, 6): 12}",
        "canonical_solution": "def sort_dict_item(test_dict):\r\n  res = {key: test_dict[key] for key in sorted(test_dict.keys(), key = lambda ele: ele[1] * ele[0])}\r\n  return  (res) \r\n"
    },
    {
        "number": 699,
        "prompt": "Write a python function to find the minimum number of swaps required to convert one binary string to another.\ndef min_Swaps(str1,str2) : \n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    n = len(str1)\n    if n != len(str2):\n        return -1 # if length of the two strings is different, we cannot convert them\n    # create a dictionary to keep count of the characters\n    count = {}\n    for i in range(n):\n        if str1[i] in count:\n            count[str1[i]] += 1\n        else:\n            count[str1[i]] = 1\n        if str2[i] in count:\n            count[str2[i]] -= 1\n        else:\n            count[str2[i] = -1\n    # find the characters that need to be swapped \n    total_swaps = 0\n    for i in count:\n        if count[i] > 0:\n            total_swaps += count[i] // 2\n    return total_swaps\n\nstr1 = \"101010\"\nstr2 = \"011011\"\nprint(min_Swaps(str1,str2)) # Output: 3 (swap '0' with '1' at index 0, 1, and 4) \n\n# time complexity = O(n), space complexity = O(1) ",
        "generated_testcode": "assert min_Swaps(\"101010\",\"010101\") == 2\n",
        "test": "assert min_Swaps(\"1101\",\"1110\") == 1\nassert min_Swaps(\"1111\",\"0100\") == \"Not Possible\"\nassert min_Swaps(\"1110000\",\"0001101\") == 3",
        "canonical_solution": "def min_Swaps(str1,str2) : \r\n    count = 0\r\n    for i in range(len(str1)) : \r\n        if str1[i] != str2[i] : \r\n            count += 1\r\n    if count % 2 == 0 : \r\n        return (count // 2) \r\n    else : \r\n        return (\"Not Possible\") "
    },
    {
        "number": 700,
        "prompt": "Write a function to count the number of elements in a list which are within a specific range.\ndef count_range_in_list(li, min, max):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    count = 0\n    for i in li:\n        if i >= min and i <= max:\n            count += 1\n    return count\n\n#Example usage:\nli = [10, 20, 30, 40, 50, 60, 70]\nprint(count_range_in_list(li, 20, 60)) # Output: 4\nprint(count_range_in_list([1, 2, 3, 4, 5, 6, 7, 8, 9], 2, 6)) # Output: 5\nprint(count_range_in_list([], 2, 6)) # Output: 0\nprint(count_range_in_list([5, 7, 8, 9], 1, 4)) # Output: 0\nprint(count_range_in_list([10, 20, 30, 40, 50, 60], 40, 60)) # Output: 2\n\n#Explanation:\n#The function takes in two arguments, the list 'li' and two integers 'min' and 'max'. It initializes a variable 'count' to 0 and iterates over each element in the list. If the element is greater than or equal to 'min' and less than or equal to 'max', then it increments the count by 1. Once the loop is complete, it returns the count. If the list is empty or there are no",
        "generated_testcode": "assert count_range_in_list([1, 2, 3, 4, 5, 6, 7, 8, 9], 3, 6) == 4\n",
        "test": "assert count_range_in_list([10,20,30,40,40,40,70,80,99],40,100)==6\nassert count_range_in_list(['a','b','c','d','e','f'],'a','e')==5\nassert count_range_in_list([7,8,9,15,17,19,45],15,20)==3",
        "canonical_solution": "def count_range_in_list(li, min, max):\r\n\tctr = 0\r\n\tfor x in li:\r\n\t\tif min <= x <= max:\r\n\t\t\tctr += 1\r\n\treturn ctr"
    },
    {
        "number": 701,
        "prompt": "Write a function to find the equilibrium index of the given array.\ndef equilibrium_index(arr):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    n = len(arr)\n    left_sum = [0] * n\n    right_sum = [0] * n\n    total_sum = sum(arr)\n    left_sum[0] = arr[0]\n    right_sum[n - 1] = arr[n - 1]\n    for i in range(1, n):\n        left_sum[i] = left_sum[i - 1] + arr[i]\n    for i in range(n - 2, -1, -1):\n        right_sum[i] = right_sum[i + 1] + arr[i]\n    for i in range(n):\n        if left_sum[i] == right_sum[i]:\n            return i\n    return -1\n\n\n# Test the function with the example given\narr = [1, 3, 5, 2, 2]\nprint(equilibrium_index(arr))  # Output: 1\n\n# Test the function with another example\narr = [-7, 1, 5, 2, -8, 3, 4]\nprint(equilibrium_index(arr))  # Output: 3\n\n# Test the function with another example\narr = [1, 3, 5, 2, 2, -1]\nprint(equilibrium_index(arr))  # Output: 0\n\n# Test the function with an example where there is no equilibrium index\narr = [1, 3, -6,",
        "generated_testcode": "assert equilibrium_index([1, 3, 5, 2, 2]) == 3\n",
        "test": "assert equilibrium_index([1, 2, 3, 4, 1, 2, 3]) == 3\nassert equilibrium_index([-7, 1, 5, 2, -4, 3, 0]) == 3\nassert equilibrium_index([1, 2, 3]) == -1",
        "canonical_solution": "def equilibrium_index(arr):\r\n  total_sum = sum(arr)\r\n  left_sum=0\r\n  for i, num in enumerate(arr):\r\n    total_sum -= num\r\n    if left_sum == total_sum:\r\n      return i\r\n    left_sum += num\r\n  return -1"
    },
    {
        "number": 702,
        "prompt": "Write a function to find the minimum number of elements that should be removed such that amax-amin<=k.\ndef find_ind(key, i, n, \n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "           arr, size): \n    for j in range(0, size): \n        if (arr[j] == key): \n            return j \n    return -1\n\ndef min_elements_to_remove(arr, n, k): \n    arr.sort() \n    size = len(arr) \n    max_diff = 0\n    amax = arr[size-1] \n    amin = arr[0] \n    count = 0\n    i = 0\n    j = size-1\n    while (i <= j and j < size): \n        if (amax - amin <= k): \n            break\n        if (arr[i] + k <= amax): \n            amax = arr[j] \n            j -= 1\n        else: \n            amin = arr[i] \n            i += 1\n        count += 1\n    return count \n\n# Driver code \narr = [1, 3, 4, 5, 9, 12, 14] \nn = len(arr) \nk = 3\nprint(min_elements_to_remove(arr, n, k)) ",
        "generated_testcode": "assert find_ind(10, 5, 10) == 0\n",
        "test": "assert removals([1, 3, 4, 9, 10,11, 12, 17, 20], 9, 4) == 5\nassert removals([1, 5, 6, 2, 8], 5, 2) == 3\nassert removals([1, 2, 3 ,4, 5, 6], 6, 3) == 2",
        "canonical_solution": "def find_ind(key, i, n, \r\n\t\t\tk, arr):\r\n\tind = -1\r\n\tstart = i + 1\r\n\tend = n - 1;\r\n\twhile (start < end):\r\n\t\tmid = int(start +\r\n\t\t\t\t(end - start) / 2)\r\n\t\tif (arr[mid] - key <= k):\r\n\t\t\tind = mid\r\n\t\t\tstart = mid + 1\r\n\t\telse:\r\n\t\t\tend = mid\r\n\treturn ind\r\ndef removals(arr, n, k):\r\n\tans = n - 1\r\n\tarr.sort()\r\n\tfor i in range(0, n):\r\n\t\tj = find_ind(arr[i], i, \r\n\t\t\t\t\tn, k, arr)\r\n\t\tif (j != -1):\r\n\t\t\tans = min(ans, n -\r\n\t\t\t\t\t\t(j - i + 1))\r\n\treturn ans"
    },
    {
        "number": 703,
        "prompt": "Write a function to check whether the given key is present in the dictionary or not.\ndef is_key_present(d,x):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": true,
        "answer": "    if x in d.keys():\n        return True\n    else:\n        return False\n\n# Testing\nd = {\"name\": \"John\", \"age\": 28, \"city\": \"New York\"}\nprint(is_key_present(d, \"name\")) # True\nprint(is_key_present(d, \"occupation\")) # False\n\n# Output:\n# True\n# False ",
        "generated_testcode": "assert is_key_present({'a':1,'b':2,'c':3},'a') == True\n",
        "test": "assert is_key_present({1: 10, 2: 20, 3: 30, 4: 40, 5: 50, 6: 60},5)==True\nassert is_key_present({1: 10, 2: 20, 3: 30, 4: 40, 5: 50, 6: 60},6)==True\nassert is_key_present({1: 10, 2: 20, 3: 30, 4: 40, 5: 50, 6: 60},10)==False",
        "canonical_solution": "def is_key_present(d,x):\r\n  if x in d:\r\n    return True\r\n  else:\r\n     return False"
    },
    {
        "number": 704,
        "prompt": "Write a function to calculate the harmonic sum of n-1.\ndef harmonic_sum(n):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    sum = 0\n    for i in range(1, n):\n        sum += 1/(i)\n    return sum\n\nprint(harmonic_sum(10))\n\n# Test the function with n = 10\n# Output: 2.449392276258101062\n\n# Explanation:\n# The harmonic sum of 10 is 1 + 1/2 + 1/3 + 1/4 + 1/5 + 1/6 + 1/7 + 1/8 + 1/9 + 1/10 = 2.449392276258101062. ",
        "generated_testcode": "assert harmonic_sum(1) == 1\n",
        "test": "assert harmonic_sum(10)==2.9289682539682538\nassert harmonic_sum(4)==2.083333333333333\nassert harmonic_sum(7)==2.5928571428571425 ",
        "canonical_solution": "def harmonic_sum(n):\r\n  if n < 2:\r\n    return 1\r\n  else:\r\n    return 1 / n + (harmonic_sum(n - 1))"
    },
    {
        "number": 705,
        "prompt": "Write a function to sort a list of lists by length and value.\ndef sort_sublists(list1):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    list1.sort(key=lambda x: (len(x), x))\n    return list1\n\n# Test the function with the sample input\nlist1 = [[\"apple\", \"banana\", \"cherry\"], [\"dog\", \"cat\"], [\"tiger\", \"lion\", \"elephant\", \"zebra\"], [\"python\", \"ruby\", \"perl\"], [\"hello\", \"world\"]]\nprint(sort_sublists(list1))\n\n# Output: [['hello', 'world'], ['apple', 'banana', 'cherry'], ['dog', 'cat'], ['python', 'ruby', 'perl'], ['tiger', 'lion', 'elephant', 'zebra']]\n\n\n# Explanation:\n# The lambda function is used to create a tuple of the length of the sublist and the sublist itself. The sort function will sort the list based on the length of the sublist first and then sort the sublists with the same length based on their value. ",
        "generated_testcode": "assert sort_sublists([\"apple\", \"banana\", \"cherry\", \"date\", \"elderberry\", \"fig\", \"grape\", \"kiwi\"]) == [\"kiwi\", \"fig\", \"date\", \"apple\", \"banana\", \"cherry\", \"elderberry\"]\n",
        "test": "assert sort_sublists([[2], [0], [1, 3], [0, 7], [9, 11], [13, 15, 17]])==[[0], [2], [0, 7], [1, 3], [9, 11], [13, 15, 17]]\nassert sort_sublists([[1], [2, 3], [4, 5, 6], [7], [10, 11]])==[[1], [7], [2, 3], [10, 11], [4, 5, 6]]\nassert sort_sublists([[\"python\"],[\"java\",\"C\",\"C++\"],[\"DBMS\"],[\"SQL\",\"HTML\"]])==[['DBMS'], ['python'], ['SQL', 'HTML'], ['java', 'C', 'C++']]",
        "canonical_solution": "def sort_sublists(list1):\r\n      list1.sort()  \r\n      list1.sort(key=len)\r\n      return  list1"
    },
    {
        "number": 706,
        "prompt": "Write a function to find whether an array is subset of another array.\ndef is_subset(arr1, m, arr2, n): \n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    i = 0\n    j = 0\n    while (i < m and j < n): \n        if (arr1[i] == arr2[j]) : \n            i += 1\n        j += 1\n    return (i == m) \n\ndef isSubset(arr1, arr2):\n    m = len(arr1) \n    n = len(arr2) \n    arr1.sort() \n    arr2.sort() \n    return is_subset(arr1, m, arr2, n) ",
        "generated_testcode": "assert is_subset([1, 2, 3], 3, [1, 2, 3, 4, 5], 4) == True\n",
        "test": "assert is_subset([11, 1, 13, 21, 3, 7], 6, [11, 3, 7, 1], 4) == True\nassert is_subset([1, 2, 3, 4, 5, 6], 6, [1, 2, 4], 3) == True\nassert is_subset([10, 5, 2, 23, 19], 5, [19, 5, 3], 3) == False",
        "canonical_solution": "def is_subset(arr1, m, arr2, n): \r\n\thashset = set() \r\n\tfor i in range(0, m): \r\n\t\thashset.add(arr1[i]) \r\n\tfor i in range(0, n): \r\n\t\tif arr2[i] in hashset: \r\n\t\t\tcontinue\r\n\t\telse: \r\n\t\t\treturn False\r\n\treturn True\t\t"
    },
    {
        "number": 707,
        "prompt": "Write a python function to count the total set bits from 1 to n.\ndef count_Set_Bits(n) :  \n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    count = 0\n    while (n > 0) : \n        count += n & 1\n        n >>= 1\n    return count ",
        "generated_testcode": "assert count_Set_Bits(10) == 2\n",
        "test": "assert count_Set_Bits(16) == 33\nassert count_Set_Bits(2) == 2\nassert count_Set_Bits(14) == 28",
        "canonical_solution": "def count_Set_Bits(n) :  \r\n    n += 1; \r\n    powerOf2 = 2;   \r\n    cnt = n // 2;  \r\n    while (powerOf2 <= n) : \r\n        totalPairs = n // powerOf2;  \r\n        cnt += (totalPairs // 2) * powerOf2;  \r\n        if (totalPairs & 1) : \r\n            cnt += (n % powerOf2) \r\n        else : \r\n            cnt += 0\r\n        powerOf2 <<= 1;    \r\n    return cnt;  "
    },
    {
        "number": 708,
        "prompt": "Write a python function to convert a string to a list.\ndef Convert(string): \n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    li = list(string.split(\" \")) \n    return li \n\nstring = input(\"Enter the string: \")\nprint(Convert(string)) ",
        "generated_testcode": "assert Convert(\"hello\") == [\"h\", \"e\", \"l\", \"l\", \"o\"]\n",
        "test": "assert Convert('python program') == ['python','program']\nassert Convert('Data Analysis') ==['Data','Analysis']\nassert Convert('Hadoop Training') == ['Hadoop','Training']",
        "canonical_solution": "def Convert(string): \r\n    li = list(string.split(\" \")) \r\n    return li "
    },
    {
        "number": 709,
        "prompt": "Write a function to count unique keys for each value present in the tuple.\ndef get_unique(test_list):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    unique_dict = {}\n    for i in test_list:\n        if i not in unique_dict.keys():\n            unique_dict[i] = 1\n        else:\n            unique_dict[i] += 1\n    return unique_dict\n\n\n# Test the function\ntest_list = (1, 2, 3, 4, 5, 1, 2, 6, 7, 8, 1, 2, 9, 0, 10, 1)\nprint(get_unique(test_list))\n\n\n# Output: {1: 3, 2: 3, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1}\n# This means that the key 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, and 10 appear once and the key 1 and 2 appear twice.\n\n# The function returns a dictionary where the key is the value in the tuple and the value is the number of times it appears. ",
        "generated_testcode": "assert get_unique(('a', 'b', 'c', 'a', 'd', 'b', 'c') == {'a': 2, 'b': 2, 'c': 2, 'd': 1}\n",
        "test": "assert get_unique([(3, 4), (1, 2), (2, 4), (8, 2), (7, 2), (8, 1), (9, 1), (8, 4), (10, 4)] ) == '{4: 4, 2: 3, 1: 2}'\nassert get_unique([(4, 5), (2, 3), (3, 5), (9, 3), (8, 3), (9, 2), (10, 2), (9, 5), (11, 5)] ) == '{5: 4, 3: 3, 2: 2}'\nassert get_unique([(6, 5), (3, 4), (2, 6), (11, 1), (8, 22), (8, 11), (4, 3), (14, 3), (11, 6)] ) == '{5: 1, 4: 1, 6: 2, 1: 1, 22: 1, 11: 1, 3: 2}'",
        "canonical_solution": "from collections import defaultdict \r\ndef get_unique(test_list):\r\n  res = defaultdict(list)\r\n  for sub in test_list:\r\n    res[sub[1]].append(sub[0])\r\n  res = dict(res)\r\n  res_dict = dict()\r\n  for key in res:\r\n    res_dict[key] = len(list(set(res[key])))\r\n  return (str(res_dict)) "
    },
    {
        "number": 710,
        "prompt": "Write a function to access the initial and last data of the given tuple record.\ndef front_and_rear(test_tup):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    return (test_tup[0], test_tup[-1])\n\n# test tuple\ntest_tup = (1, 2, 3, 4, 5, 6)\nprint(front_and_rear(test_tup))  # Output: (1, 6)\n\n# test tuple\ntest_tup = (7, 8, 9, 10, 11, 12)\nprint(front_and_rear(test_tup))  # Output: (7, 12) ",
        "generated_testcode": "assert front_and_rear((1, 2, 3, 4, 5, 6, 7, 8, 9, 10) == (1, 10)\n\n",
        "test": "assert front_and_rear((10, 4, 5, 6, 7)) == (10, 7)\nassert front_and_rear((1, 2, 3, 4, 5)) == (1, 5)\nassert front_and_rear((6, 7, 8, 9, 10)) == (6, 10)",
        "canonical_solution": "def front_and_rear(test_tup):\r\n  res = (test_tup[0], test_tup[-1])\r\n  return (res) "
    },
    {
        "number": 711,
        "prompt": "Write a python function to check whether the product of digits of a number at even and odd places is equal or not.\ndef product_Equal(n): \n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    num = abs(n) \n    even_sum = 0\n    odd_sum = 0\n    while num > 0: \n        rem = num % 10\n        if num % 2 == 0: \n            even_sum = even_sum * 10 + rem \n        else: \n            odd_sum = odd_sum * 10 + rem \n        num = num // 10\n    return even_sum == odd_sum \n\n# Test the function \nn = 12321 \nprint(product_Equal(n)) \nn = 12320 \nprint(product_Equal(n)) \n  ",
        "generated_testcode": "assert product_Equal(12345) == True\n",
        "test": "assert product_Equal(2841) == True\nassert product_Equal(1234) == False\nassert product_Equal(1212) == False",
        "canonical_solution": "def product_Equal(n): \r\n    if n < 10: \r\n        return False\r\n    prodOdd = 1; prodEven = 1\r\n    while n > 0: \r\n        digit = n % 10\r\n        prodOdd *= digit \r\n        n = n//10\r\n        if n == 0: \r\n            break; \r\n        digit = n % 10\r\n        prodEven *= digit \r\n        n = n//10\r\n    if prodOdd == prodEven: \r\n        return True\r\n    return False"
    },
    {
        "number": 712,
        "prompt": "Write a function to remove duplicates from a list of lists.\ndef remove_duplicate(list1):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    new_list = []\n    for i in range(len(list1)):\n        if list1[i] not in new_list:\n            new_list.append(list1[i])\n    return new_list\n\n# Testing the function with example lists\nlist1 = [1, 2, 3, 4, 5, 1, 2, 6, 7, 8, 9, 3, 8]\nprint(\"Original list:\", list1)\nprint(\"List with no duplicates:\", remove_duplicate(list1))\n\nlist2 = [\"apple\", \"banana\", \"orange\", \"apple\", \"grape\", \"kiwi\", \"orange\"]\nprint(\"Original list:\", list2)\nprint(\"List with no duplicates:\", remove_duplicate(list2))\n\nlist3 = [True, False, False, True, 1, 2, 3, 3, 4, 2, True, 5, \"apple\", \"banana\", \"apple\"]\nprint(\"Original list:\", list3)\nprint(\"List with no duplicates:\", remove_duplicate(list3)) ",
        "generated_testcode": "assert remove_duplicate([\"apple\", \"banana\", \"orange\", \"apple\", \"grape\", \"orange\", \"grape\"]) == [\"apple\", \"banana\", \"orange\", \"grape\"]\n",
        "test": "assert remove_duplicate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]])==[[10, 20], [30, 56, 25], [33], [40]] \nassert remove_duplicate([\"a\", \"b\", \"a\", \"c\", \"c\"] )==[\"a\", \"b\", \"c\"]\nassert remove_duplicate([1, 3, 5, 6, 3, 5, 6, 1] )==[1, 3, 5, 6]",
        "canonical_solution": "import itertools\r\ndef remove_duplicate(list1):\r\n list.sort(list1)\r\n remove_duplicate = list(list1 for list1,_ in itertools.groupby(list1))\r\n return remove_duplicate"
    },
    {
        "number": 713,
        "prompt": "Write a function to check if the given tuple contains all valid values or not.\ndef check_valid(test_tup):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    for i in test_tup:\n        if type(i) != str or len(i) < 1 or i[0].isdigit() or not i[0].isalpha():\n            return False\n    return True\n\n# Test cases\nprint(check_valid((\"apple\", \"banana\", \"cherry\")) == True) # Expected output: True\nprint(check_valid((\"1apple\", \"banana\", \"cherry\") == False) # Expected output: False\nprint(check_valid((\"apple\", \"banana\", \"1cherry\") == False) # Expected output: False\nprint(check_valid((\"apple\", \"1banana\", \"cherry\") == False) # Expected output: False\nprint(check_valid((\"apple\", \"banana\", \"\") == False) # Expected output: False\nprint(check_valid((\"apple\", \"banana\", \"cherry1\") == False) # Expected output: False\nprint(check_valid((\"app\", \"banana\", \"cherry\") == False) # Expected output: False\nprint(check_valid((\"apple\", \"banana\", \"cherry\", \"kiwi\") == False) # Expected output: False ",
        "generated_testcode": "assert check_valid((1, 2, 3, 4, 5, 6) == True\n",
        "test": "assert check_valid((True, True, True, True) ) == True\nassert check_valid((True, False, True, True) ) == False\nassert check_valid((True, True, True, True) ) == True",
        "canonical_solution": "def check_valid(test_tup):\r\n  res = not any(map(lambda ele: not ele, test_tup))\r\n  return (res) "
    },
    {
        "number": 714,
        "prompt": "Write a python function to count the number of distinct power of prime factor of given number.\ndef count_Fac(n):  \n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    count = 0\n    while n % 2 == 0: \n        count += 1\n        n >>= 1\n    while n % 3 == 0: \n        count += 1\n        n = n / 3 \n    while n % 5 == 0: \n        count += 1\n        n = n / 5 \n    while n % 7 == 0: \n        count += 1\n        n = n / 7 \n    while n % 111 == 0: \n        count += 1\n        n = n / 11 \n    while n % 13 == 0: \n        count += 1\n        n = n / 13\n    while n % 17 == 0: \n        count += 1\n        n = n / 17\n    while n % 19 == 0: \n        count += 1\n        n = n / 19\n    return count\n\ndef count_Prime_Factor(n):\n    count = 0\n    for i in range(2, n+1):\n        if n % i == 0:\n            count += count_Fac(i)\n    return count\n\nn = int(input(\"Enter a number: \"))\nprint(\"Number of distinct power of prime factor of\", n, \"is\", count_Prime_Factor(n)) ",
        "generated_testcode": "assert count_Fac(12) == 2\n",
        "test": "assert count_Fac(24) == 3\nassert count_Fac(12) == 2\nassert count_Fac(4) == 1",
        "canonical_solution": "def count_Fac(n):  \r\n    m = n \r\n    count = 0\r\n    i = 2\r\n    while((i * i) <= m): \r\n        total = 0\r\n        while (n % i == 0): \r\n            n /= i \r\n            total += 1 \r\n        temp = 0\r\n        j = 1\r\n        while((temp + j) <= total): \r\n            temp += j \r\n            count += 1\r\n            j += 1 \r\n        i += 1\r\n    if (n != 1): \r\n        count += 1 \r\n    return count "
    },
    {
        "number": 715,
        "prompt": "Write a function to convert the given string of integers into a tuple.\ndef str_to_tuple(test_str):\n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    result = tuple(map(int, test_str.split(',')) )\n    return result\n\n#Test the function with an example string\ntest_str = \"1, 2, 3, 4, 5, 6\"\nprint(str_to_tuple(test_str)) # Output: (1, 2, 3, 4, 5, 6)\n\n#Example usage:\nprint(type(str_to_tuple(test_str))) # Output: <class 'tuple'>\nprint(str_to_tuple(test_str)[1]) # Output: 2\nprint(len(str_to_tuple(test_str))) # Output: 5\n\n#Another example:\nprint(str_to_tuple(\"10, 20, 30, 40, 50, 60\")) # Output: (10, 20, 30, 40, 50, 60)\nprint(str_to_tuple(\"100, 200, 300, 400, 500, 600\")) # Output: (100, 200, 300, 400, 500, 600) ",
        "generated_testcode": "assert str_to_tuple(\"1,2,3,4,5\") == (1, 2, 3, 4, 5)\n",
        "test": "assert str_to_tuple(\"1, -5, 4, 6, 7\") == (1, -5, 4, 6, 7)\nassert str_to_tuple(\"1, 2, 3, 4, 5\") == (1, 2, 3, 4, 5)\nassert str_to_tuple(\"4, 6, 9, 11, 13, 14\") == (4, 6, 9, 11, 13, 14)",
        "canonical_solution": "def str_to_tuple(test_str):\r\n  res = tuple(map(int, test_str.split(', ')))\r\n  return (res) "
    },
    {
        "number": 716,
        "prompt": "Write a function to find the perimeter of a rombus.\ndef rombus_perimeter(a):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": true,
        "answer": "    return a*4\n\n# Test the function with a rombus with sides of length 5\nprint(rombus_perimeter(5)) # Should output 20\n\n# Test the function with a rombus with sides of length 8\nprint(rombus_perimeter(8)) # Should output 32\n\n# Test the function with a rombus with sides of length 10\nprint(rombus_perimeter(10)) # Should output 40\n\n# Test the function with a rombus with sides of length 12\nprint(rombus_perimeter(12)) # Should output 48 ",
        "generated_testcode": "assert rombus_perimeter(5) == 20\n",
        "test": "assert rombus_perimeter(10)==40\nassert rombus_perimeter(5)==20\nassert rombus_perimeter(4)==16",
        "canonical_solution": "def rombus_perimeter(a):\r\n  perimeter=4*a\r\n  return perimeter"
    },
    {
        "number": 717,
        "prompt": "Write a function to calculate the standard deviation.\ndef sd_calc(data):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    n = len(data)\n    mean = sum(data)/n\n    variance = sum((x-mean)**2 for x in data) / n\n    return variance**0.5\n\n# Test the function\ndata = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nprint(sd_calc(data)) # 2.91547599766253663\n\n# To calculate the mean:\nmean = sum(data)/len(data)\nprint(mean) # 5.5\n\n# To calculate the variance:\nvariance = sum((x-mean)**2 for x in data) / len(data)\nprint(variance) # 20.5\n\n# To calculate the standard deviation:\nsd = variance**0.5\nprint(sd) # 4.358898943179521035\n\n# Or, using the function sd_calc:\nprint(sd_calc(data)) # 4.358898943179521035\n```\n\n### Calculating the standard deviation of a column in a pandas DataFrame\n\n```python\nimport pandas as pd\n\n# Create a DataFrame with some data\ndata = {'Name': ['Alice', 'Bob', 'Charlie', 'David', 'Emily', 'Frank'],\n        'Age': [25, 30,",
        "generated_testcode": "assert sd_calc([1, 2, 3, 4, 5]) == 1.5811388830084189\n",
        "test": "assert sd_calc([4, 2, 5, 8, 6])== 2.23606797749979\nassert sd_calc([1,2,3,4,5,6,7])==2.160246899469287\nassert sd_calc([5,9,10,15,6,4])==4.070217029430577",
        "canonical_solution": "import math\r\nimport sys\r\ndef sd_calc(data):\r\n    n = len(data)\r\n    if n <= 1:\r\n        return 0.0\r\n    mean, sd = avg_calc(data), 0.0\r\n    for el in data:\r\n        sd += (float(el) - mean)**2\r\n    sd = math.sqrt(sd / float(n-1))\r\n    return sd\r\ndef avg_calc(ls):\r\n    n, mean = len(ls), 0.0\r\n    if n <= 1:\r\n        return ls[0]\r\n    for el in ls:\r\n        mean = mean + float(el)\r\n    mean = mean / float(n)\r\n    return mean"
    },
    {
        "number": 718,
        "prompt": "Write a function to create a list taking alternate elements from another given list.\ndef alternate_elements(list1):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    new_list = []\n    for i in range(0, len(list1), 2):\n        new_list.append(list1[i])\n    return new_list\n\n# Test the function with an example list\nprint(alternate_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))  # Output: [1, 3, 5, 7, 9] ",
        "generated_testcode": "assert alternate_elements([1, 2, 3, 4, 5, 6, 7, 8, 9]) == [1, 3, 5, 7]\n",
        "test": "assert alternate_elements([\"red\", \"black\", \"white\", \"green\", \"orange\"])==['red', 'white', 'orange']\nassert alternate_elements([2, 0, 3, 4, 0, 2, 8, 3, 4, 2])==[2, 3, 0, 8, 4]\nassert alternate_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1,3,5,7,9]",
        "canonical_solution": "def alternate_elements(list1):\r\n    result=[]\r\n    for item in list1[::2]:\r\n        result.append(item)\r\n    return result "
    },
    {
        "number": 719,
        "prompt": "Write a function that matches a string that has an a followed by zero or more b's.\ndef text_match(text):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    return re.search(\"a(b*)\", text)\n\n# Test the function with the string \"ab\"\nprint(text_match(\"ab\"))  # Output: <re.Match object; span=(0, 2), match='ab'>\n\n# Test the function with the string \"a\"\nprint(text_match(\"a\"))  # Output: <re.Match object; span=(0, 1), match='a'>\n\n# Test the function with the string \"abbbb\"\nprint(text_match(\"abbbb\"))  # Output: <re.Match object; span=(0, 4), match='abbbb'>\n\n# Test the function with the string \"ac\"\nprint(text_match(\"ac\"))  # Output: None\n\n# Test the function with the string \"abbabbb\"\nprint(text_match(\"abbabbb\"))  # Output: <re.Match object; span=(0, 5), match='abbabbb'> ",
        "generated_testcode": "assert text_match(\"ab\") == True\n",
        "test": "assert text_match(\"ac\")==('Found a match!')\nassert text_match(\"dc\")==('Not matched!')\nassert text_match(\"abba\")==('Found a match!')",
        "canonical_solution": "import re\r\ndef text_match(text):\r\n        patterns = 'ab*?'\r\n        if re.search(patterns,  text):\r\n                return 'Found a match!'\r\n        else:\r\n                return('Not matched!')"
    },
    {
        "number": 720,
        "prompt": "Write a function to add a dictionary to the tuple.\ndef add_dict_to_tuple(test_tup, test_dict):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": true,
        "answer": "    return test_tup + (test_dict,)\n\n# Test the function with a tuple and a dictionary\ntest_tup = (1, 2, 3)\ntest_dict = {'a': 1, 'b': 2, 'c': 3}\nresult = add_dict_to_tuple(test_tup, test_dict)\nprint(result)  # Output: (1, 2, 3, {'a': 1, 'b': 2, 'c': 3})\n\n# Write a function to add a string to the tuple.\ndef add_str_to_tuple(test_tup, test_str):\n    return test_tup + (test_str,)\n\n# Test the function with a tuple and a string\ntest_tup = (1, 2, 3)\ntest_str = 'hello'\nresult = add_str_to_tuple(test_tup, test_str)\nprint(result)  # Output: (1, 2, 3, 'hello')\n\n# Write a function to add a list to the tuple.\ndef add_list_to_tuple(test_tup, test_list):\n    return test_tup + tuple(test_list)\n\n# Test the function with a tuple and a list\ntest_tup = (1, 2, 3)\ntest_list = [4, 5, 6]\nresult = add_list_to_tuple(test_tup, test_list)",
        "generated_testcode": "assert add_dict_to_tuple(('a', 'b', 'c', 'd'), {'e': 1, 'f': 2}) == ('a', 'b', 'c', 'd', {'e': 1, 'f': 2})\n",
        "test": "assert add_dict_to_tuple((4, 5, 6), {\"MSAM\" : 1, \"is\" : 2, \"best\" : 3} ) == (4, 5, 6, {'MSAM': 1, 'is': 2, 'best': 3})\nassert add_dict_to_tuple((1, 2, 3), {\"UTS\" : 2, \"is\" : 3, \"Worst\" : 4} ) == (1, 2, 3, {'UTS': 2, 'is': 3, 'Worst': 4})\nassert add_dict_to_tuple((8, 9, 10), {\"POS\" : 3, \"is\" : 4, \"Okay\" : 5} ) == (8, 9, 10, {'POS': 3, 'is': 4, 'Okay': 5})",
        "canonical_solution": "def add_dict_to_tuple(test_tup, test_dict):\r\n  test_tup = list(test_tup)\r\n  test_tup.append(test_dict)\r\n  test_tup = tuple(test_tup)\r\n  return (test_tup) "
    },
    {
        "number": 721,
        "prompt": "Write a function to find a path with the maximum average over all existing paths for the given square matrix of size n*n.\ndef maxAverageOfPath(cost, N): \n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    dp = [[0 for _ in range(N)] for _ in range(N)] \n    dp[0][0] = cost[0][0] \n    for i in range(1, N): \n        dp[0][i] = dp[0][i-1] + cost[0][i] \n        dp[i][0] = dp[i-1][0] + cost[i][0] \n  \n    for i in range(1, N): \n        for j in range(1, N): \n            if i == 0: \n                dp[i][j] = dp[i][j-1] + cost[i][j] \n            elif j == 0: \n                dp[i][j] = dp[i-1][j] + cost[i][j] \n            else: \n                dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + cost[i][j] \n   \n    for i in range(1, N): \n        for j in range(1, N): \n            if i == N-1: \n                dp[i][j] = max(dp[i][j], dp[i][j-1]) \n            elif j == N-1: \n                dp[i][j] = max(dp[i][j], dp[i-1][j]) \n            else:",
        "generated_testcode": "assert maxAverageOfPath([[1,2,3],[4,5,6],[7,8,9]], 3) == 6.67\n",
        "test": "assert maxAverageOfPath([[1, 2, 3], [6, 5, 4], [7, 3, 9]], 3) == 5.2\nassert maxAverageOfPath([[2, 3, 4], [7, 6, 5], [8, 4, 10]], 3) == 6.2\nassert maxAverageOfPath([[3, 4, 5], [8, 7, 6], [9, 5, 11]], 3) == 7.2 ",
        "canonical_solution": "M = 100\r\ndef maxAverageOfPath(cost, N): \r\n\tdp = [[0 for i in range(N + 1)] for j in range(N + 1)] \r\n\tdp[0][0] = cost[0][0] \r\n\tfor i in range(1, N): \r\n\t\tdp[i][0] = dp[i - 1][0] + cost[i][0] \r\n\tfor j in range(1, N): \r\n\t\tdp[0][j] = dp[0][j - 1] + cost[0][j] \r\n\tfor i in range(1, N): \r\n\t\tfor j in range(1, N): \r\n\t\t\tdp[i][j] = max(dp[i - 1][j], \r\n\t\t\t\t\t\tdp[i][j - 1]) + cost[i][j] \r\n\treturn dp[N - 1][N - 1] / (2 * N - 1)"
    },
    {
        "number": 722,
        "prompt": "Write a function to filter the height and width of students which are stored in a dictionary.\ndef filter_data(students,h,w):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    filtered_students = []\n    for student in students:\n        if student[\"height\"] == h and student[\"weight\"] == w:\n            filtered_students.append(student)\n    return filtered_students\n\nstudents = [\n    {\"name\": \"Alice\", \"height\": 168, \"weight\": 60},\n    {\"name\": \"Bob\", \"height\": 180, \"weight\": 70},\n    {\"name\": \"Charlie\", \"height\": 170, \"weight\": 65},\n    {\"name\": \"David\", \"height\": 160, \"weight\": 72},\n    {\"name\": \"Emma\", \"height\": 165, \"weight\": 55},\n    {\"name\": \"Frank\", \"height\": 175, \"weight\": 80},\n    {\"name\": \"Grace\", \"height\": 168, \"weight\": 70},\n    {\"name\": \"Hannah\", \"height\": 160, \"weight\": 58},\n    {\"name\": \"Alice\", \"height\": 180, \"weight\": 55},\n    {\"name\": \"Bob\", \"height\": 168, \"weight\": 75},\n]\n\nfiltered_students = filter_data(students,168,70)\nprint(filtered_students)\n\n# Output: [{'name': 'Alice', 'height': 168, 'weight':",
        "generated_testcode": "assert filter_data(students, 170, 60) == [{'name': 'John', 'age': 16, 'height': 170, 'width': 60}, {'name': 'Alice', 'age': 15, 'height': 170, 'width': 60}]\n",
        "test": "assert filter_data({'Cierra Vega': (6.2, 70), 'Alden Cantrell': (5.9, 65), 'Kierra Gentry': (6.0, 68), 'Pierre Cox': (5.8, 66)},6.0,70)=={'Cierra Vega': (6.2, 70)}\nassert filter_data({'Cierra Vega': (6.2, 70), 'Alden Cantrell': (5.9, 65), 'Kierra Gentry': (6.0, 68), 'Pierre Cox': (5.8, 66)},5.9,67)=={'Cierra Vega': (6.2, 70),'Kierra Gentry': (6.0, 68)}\nassert filter_data({'Cierra Vega': (6.2, 70), 'Alden Cantrell': (5.9, 65), 'Kierra Gentry': (6.0, 68), 'Pierre Cox': (5.8, 66)},5.7,64)=={'Cierra Vega': (6.2, 70),'Alden Cantrell': (5.9, 65),'Kierra Gentry': (6.0, 68),'Pierre Cox': (5.8, 66)}",
        "canonical_solution": "def filter_data(students,h,w):\r\n    result = {k: s for k, s in students.items() if s[0] >=h and s[1] >=w}\r\n    return result    "
    },
    {
        "number": 723,
        "prompt": "Write a function to count the same pair in two given lists using map function.\ndef count_same_pair(nums1, nums2):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    nums1_set = set(nums1)\n    count = 0\n    for num in nums2:\n        if num in nums1_set:\n            count += 1\n    return count\n\n\n# Test case\nnums1 = [1, 2, 3, 4, 5, 6, 7, 8, 9]\nnums2 = [2, 4, 8, 9, 10, 11, 12]\nprint(count_same_pair(nums1, nums2))  # Output: 3\n\n\n# Using a list comprehension\ndef count_same_pair(nums1, nums2):\n    return sum([1 for i in nums2 if i in nums1])\n\n# Test case\nnums1 = [1, 2, 3, 4, 5, 6, 7, 8, 9]\nnums2 = [2, 4, 8, 9, 10, 11, 12]\nprint(count_same_pair(nums1, nums2))  # Output: 3 ",
        "generated_testcode": "assert count_same_pair([1, 2, 3, 4, 5], [3, 4, 5, 6]) == 2\n",
        "test": "assert count_same_pair([1, 2, 3, 4, 5, 6, 7, 8],[2, 2, 3, 1, 2, 6, 7, 9])==4\nassert count_same_pair([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8],[2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8])==11\nassert count_same_pair([2, 4, -6, -9, 11, -12, 14, -5, 17],[2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8])==1",
        "canonical_solution": "from operator import eq\r\ndef count_same_pair(nums1, nums2):\r\n    result = sum(map(eq, nums1, nums2))\r\n    return result"
    },
    {
        "number": 724,
        "prompt": "Write a function to calculate the sum of all digits of the base to the specified power.\ndef power_base_sum(base, power):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    result = 0\n    for digit in str(base):\n        result += int(digit) ** power\n    return result\n\n# Test cases\nprint(power_base_sum(123, 2))  # Output: 9\nprint(power_base_sum(456, 3))  # Output: 12\nprint(power_base_sum(789, 4))  # Output: 18\n",
        "generated_testcode": "assert power_base_sum(2, 10) == 12\n",
        "test": "assert power_base_sum(2,100)==115\nassert power_base_sum(8,10)==37\nassert power_base_sum(8,15)==62",
        "canonical_solution": "def power_base_sum(base, power):\r\n    return sum([int(i) for i in str(pow(base, power))])"
    },
    {
        "number": 725,
        "prompt": "Write a function to extract values between quotation marks of the given string by using regex.\ndef extract_quotation(text1):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    import re\n    pattern = r\"\\\"(.*?)\\\"\"\n    match = re.findall(pattern, text1)\n    return match\n\ntext1 = \"She said, \\\"I love Python!\\\"\"\nprint(extract_quotation(text1)) # Output: [\"I love Python\"]\n\ntext2 = \"He said, \\\"Python is easy to learn.\\\"\"\nprint(extract_quotation(text2)) # Output: [\"Python is easy to learn\"]\n\ntext3 = \"\\\"He said, \\\"I love Python\\\"\"\nprint(extract_quotation(text3)) # Output: [\"I love Python\"]\n\ntext4 = \"\\\"Python is easy\\\"\"\nprint(extract_quotation(text4)) # Output: [\"Python is easy\"]\n\ntext5 = \"She said, \\\"He said, \\\"I love Python!\\\"\"\nprint(extract_quotation(text5)) # Output: [\"He said, \\\"I love Python\"]\n\ntext6 = \"She said, \\\"I love Python!\\\" and \\\"Python is easy to learn\\\"\"\nprint(extract_quotation(text6)) # Output: [\"I love Python!\", \"Python is easy to learn\"] ",
        "generated_testcode": "assert extract_quotation(\"Hello, 'world'\") == \"world\"\n",
        "test": "assert extract_quotation('Cortex \"A53\" Based \"multi\" tasking \"Processor\"') == ['A53', 'multi', 'Processor']\nassert extract_quotation('Cast your \"favorite\" entertainment \"apps\"') == ['favorite', 'apps']\nassert extract_quotation('Watch content \"4k Ultra HD\" resolution with \"HDR 10\" Support') == ['4k Ultra HD', 'HDR 10']",
        "canonical_solution": "import re\r\ndef extract_quotation(text1):\r\n  return (re.findall(r'\"(.*?)\"', text1))"
    },
    {
        "number": 726,
        "prompt": "Write a function to multiply the adjacent elements of the given tuple.\ndef multiply_elements(test_tup):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    result = 1\n    for i in range(len(test_tup) - 1):\n        result *= test_tup[i]\n    return result\n\n# Test the function with an example tuple\ntest_tup = (1, 2, 3, 4, 5, 6)\nprint(multiply_elements(test_tup))  # Output: 120\n\n# Test the function with another tuple\ntest_tup = (10, 5, 6, 4, 8)\nprint(multiply_elements(test_tup))  # Output: 2400\n",
        "generated_testcode": "assert multiply_elements((1, 2, 3, 4, 5, 6) == 24)\n",
        "test": "assert multiply_elements((1, 5, 7, 8, 10)) == (5, 35, 56, 80)\nassert multiply_elements((2, 4, 5, 6, 7)) == (8, 20, 30, 42)\nassert multiply_elements((12, 13, 14, 9, 15)) == (156, 182, 126, 135)",
        "canonical_solution": "def multiply_elements(test_tup):\r\n  res = tuple(i * j for i, j in zip(test_tup, test_tup[1:]))\r\n  return (res) "
    },
    {
        "number": 727,
        "prompt": "Write a function to remove all characters except letters and numbers using regex\ndef remove_char(S):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    return re.sub('[^a-zA-Z0-9]','', S)\n\n# Test the function with an example string\ns = \"Hello, World! 123\"\nprint(remove_char(s)) ",
        "generated_testcode": "assert remove_char(\"Hello, World! 123\") == \"HelloWorld123\"\n",
        "test": "assert remove_char(\"123abcjw:, .@! eiw\") == '123abcjweiw'\nassert remove_char(\"Hello1234:, ! Howare33u\") == 'Hello1234Howare33u'\nassert remove_char(\"Cool543Triks@:, Make@987Trips\") == 'Cool543TriksMake987Trips' ",
        "canonical_solution": "import re \r\ndef remove_char(S):\r\n  result = re.sub('[\\W_]+', '', S) \r\n  return result"
    },
    {
        "number": 728,
        "prompt": "Write a function to sum elements in two lists.\ndef sum_list(lst1,lst2):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    return [x + y for x,y in zip(lst1,lst2)]\n\n# Test the function with two lists\nlst1 = [1,2,3,4,5]\nlst2 = [6,7,8,9]\nprint(sum_list(lst1, lst2)) # Output: [7,9,11,13]\n\n# Test the function with another list\nlst3 = [2,4,6,8]\nlst4 = [3,5,7]\nprint(sum_list(lst3, lst4)) # Output: [5,9,13]\n\n# Test the function with uneven lists\nlst5 = [1,2,3]\nlst6 = [4,5,6,7]\nprint(sum_list(lst5, lst6)) # Output: [5,7,9]\n\n# Test the function with empty lists\nlst7 = []\nlst8 = []\nprint(sum_list(lst7, lst8)) # Output: []\n\n# Test the function with negative numbers\nlst9 = [-1,0,1,2]\nlst10 = [-3, -2, 2]\nprint(sum_list(lst9, lst10)) # Output: [-4,-2,3] ",
        "generated_testcode": "assert sum_list([1,2,3],[4,5,6]) == [5,7,9]\n",
        "test": "assert sum_list([10,20,30],[15,25,35])==[25,45,65]\nassert sum_list([1,2,3],[5,6,7])==[6,8,10]\nassert sum_list([15,20,30],[15,45,75])==[30,65,105]",
        "canonical_solution": "def sum_list(lst1,lst2):\r\n  res_list = [lst1[i] + lst2[i] for i in range(len(lst1))] \r\n  return res_list"
    },
    {
        "number": 729,
        "prompt": "Write a function to add two lists using map and lambda function.\ndef add_list(nums1,nums2):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    return list(map(lambda x,y: x+y,nums1,nums2))\n# test the function\nnums1 = [1,2,3,4]\nnums2 = [5,6,7,8]\nprint(add_list(nums1,nums2)) # output: [6, 8, 10, 12]\n\n# Write a function to square each element in a list using map and lambda function.\ndef square_list(nums):\n    return list(map(lambda x: x**2,nums))\n# test the function\nnums = [1,2,3,4]\nprint(square_list(nums)) # output: [1, 4, 9, 16]\n\n# Write a function to square each element in a list using map, filter and lambda function.\ndef square_even(nums):\n    return list(map(lambda x: x**2, filter(lambda x: x%2==0,nums)))\n# test the function\nnums = [1,2,3,4,5,6,7,8,9]\nprint(square_even(nums)) # output: [4, 16, 36, 64]\n\n# Write a function to remove duplicate elements from a list using filter and lambda function.\ndef remove_duplicates(nums):\n    return list(filter(lambda x: nums.count(x) == 1, nums))\n# test the function\n",
        "generated_testcode": "assert add_list([1,2,3],[4,5,6]) == [5,7,9]\n",
        "test": "assert add_list([1, 2, 3],[4,5,6])==[5, 7, 9]\nassert add_list([1,2],[3,4])==[4,6]\nassert add_list([10,20],[50,70])==[60,90]",
        "canonical_solution": "def add_list(nums1,nums2):\r\n  result = map(lambda x, y: x + y, nums1, nums2)\r\n  return list(result)"
    },
    {
        "number": 730,
        "prompt": "Write a function to remove consecutive duplicates of a given list.\ndef consecutive_duplicates(nums):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    new_list = []\n    for i in range(len(nums)):\n        if i == 0 or nums[i] != nums[i-1]:\n            new_list.append(nums[i])\n    return new_list\n\n# Example usage:\nprint(consecutive_duplicates([1, 2, 2, 3, 3, 3, 4, 4, 5, 6, 6, 6])) # Output: [1, 2, 3, 4, 5, 6]\nprint(consecutive_duplicates([1, 1, 1, 2, 2, 3, 3, 3, 4, 4, 4, 4, 4])) # Output: [1, 2, 3, 4]\nprint(consecutive_duplicates([1, 1, 1, 1, 2, 2, 2, 3, 3, 3, 3, 3])) # Output: [1, 2, 3]\nprint(consecutive_duplicates([1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3])) # Output: [1, 2, 3]\n\n# The function removes consecutive duplicates in the list and returns a new list without them. ",
        "generated_testcode": "assert consecutive_duplicates(nums=[1, 2, 2, 3, 3, 4, 4, 5, 5, 5, 6, 6, 6, 7, 8, 8, 8, 9, 9, 9]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]\n",
        "test": "assert consecutive_duplicates([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4 ])==[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4]\nassert consecutive_duplicates([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10])==[10, 15, 19, 18, 17, 26, 17, 18, 10]\nassert consecutive_duplicates(['a', 'a', 'b', 'c', 'd', 'd'])==['a', 'b', 'c', 'd']",
        "canonical_solution": "from itertools import groupby\r\ndef consecutive_duplicates(nums):\r\n    return [key for key, group in groupby(nums)] "
    },
    {
        "number": 731,
        "prompt": "Write a function to find the lateral surface area of a cone.\ndef lateralsurface_cone(r,h):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    lateralsurface = (222/7)*r*h\n    return lateralsurface\n\n# Write a function to find the volume of a cone.\ndef volume_cone(r,h):\n    volume = (1/3)*(22/7)*r**2*h\n    return volume\n\n# Write a function to find the lateral surface area of a cylinder.\ndef lateralsurface_cylinder(r,h):\n    lateralsurface = 2*3.14*r*h\n    return lateralsurface\n\n# Write a function to find the volume of a cylinder.\ndef volume_cylinder(r,h):\n    volume = 3.14*r**2*h\n    return volume\n\n# Write a function to find the surface area of a sphere.\ndef surface_area_sphere(r):\n    surface_area = 4*3.14*r**2\n    return surface_area\n\n# Write a function to find the volume of a sphere.\ndef volume_sphere(r):\n    volume = (4/3)*3.14*r**3\n    return volume\n\n# Write a function to find the surface area of a pyramid.\ndef surface_area_pyramid(b,h):\n    slant_height = (b**2 + h**2)**0.5\n    surface_area = (1/2)*b**2 + b*slant_height + (1/2)*b**2\n",
        "generated_testcode": "assert lateralsurface_cone(3,5) == 94.04\n",
        "test": "assert lateralsurface_cone(5,12)==204.20352248333654\nassert lateralsurface_cone(10,15)==566.3586699569488\nassert lateralsurface_cone(19,17)==1521.8090132193388",
        "canonical_solution": "import math\r\ndef lateralsurface_cone(r,h):\r\n  l = math.sqrt(r * r + h * h)\r\n  LSA = math.pi * r  * l\r\n  return LSA"
    },
    {
        "number": 732,
        "prompt": "Write a function to replace all occurrences of spaces, commas, or dots with a colon.\ndef replace_specialchar(text):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    specialchars = [' ', ',',', '.']\n    for char in specialchars:\n        text = text.replace(char, ':')\n    return text\n\n# Test the function with the following input\ninput_text = \"Hello, world. This is a test.\"\noutput_text = replace_specialchar(input_text)\nprint(output_text) # Should print \"Hello:world:This:is:a:test\" ",
        "generated_testcode": "assert replace_specialchar(\"Hello, world!\") == \"Hello:world!\"\n",
        "test": "assert replace_specialchar('Python language, Programming language.')==('Python:language::Programming:language:')\nassert replace_specialchar('a b c,d e f')==('a:b:c:d:e:f')\nassert replace_specialchar('ram reshma,ram rahim')==('ram:reshma:ram:rahim')",
        "canonical_solution": "import re\r\ndef replace_specialchar(text):\r\n return (re.sub(\"[ ,.]\", \":\", text))\r"
    },
    {
        "number": 733,
        "prompt": "Write a function to find the index of the first occurrence of a given number in a sorted array.\ndef find_first_occurrence(A, x):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    left, right = 0, len(A) - 1\n    result = -1\n\n    while left <= right:\n        mid = (left + right) // 2\n        if A[mid] == x:\n            result = mid\n            right = mid - 1\n        elif A[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    return result\n\n# Test cases\nprint(find_first_occurrence([1, 2, 3, 4, 4, 4, 4, 4, 5, 6, 7], 4))  # Output: 3\nprint(find_first_occurrence([1, 2, 3, 4, 4, 4, 4, 4, 5, 6, 7], 8))  # Output: -1\nprint(find_first_occurrence([1, 2, 3, 4, 4, 4, 4, 5, 6, 7], 3))  # Output: 2\nprint(find_first_occurrence([1, 2, 3, 4, 4, 4, 4, 5, 6, 7], 1)  # Output: 0\n\n# Time complexity: O(log n)\n# Space complexity: O(1)\n\n# Another solution using binary search:\ndef find_first_occurrence(A, x):\n    left, right =",
        "generated_testcode": "assert find_first_occurrence([1, 2, 3, 4, 4, 4, 5, 6, 7], 4) == 2\n",
        "test": "assert find_first_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5) == 1\nassert find_first_occurrence([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5) == 2\nassert find_first_occurrence([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6) == 4",
        "canonical_solution": "def find_first_occurrence(A, x):\r\n    (left, right) = (0, len(A) - 1)\r\n    result = -1\r\n    while left <= right:\r\n        mid = (left + right) // 2\r\n        if x == A[mid]:\r\n            result = mid\r\n            right = mid - 1\r\n        elif x < A[mid]:\r\n            right = mid - 1\r\n        else:\r\n            left = mid + 1\r\n    return result"
    },
    {
        "number": 734,
        "prompt": "Write a python function to find sum of products of all possible subarrays.\ndef sum_Of_Subarray_Prod(arr,n):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    res = [1] * (n + 1)\n    mod = 10**9 + 7\n    prefix = 1\n    suffix = 1\n    total = 1\n    ans = 0\n\n    for i in range(n):\n        prefix = (prefix * arr[i]) % mod\n        total = (total * arr[i]) % mod\n        suffix = suffix * arr[n-1-i]\n        ans = (ans + (prefix * suffix) % mod) % mod\n\n    return ans\n\nn = int(input())\narr = list(map(int, input().split()))\nprint(sum_Of_Subarray_Prod(arr,n))\n\n#Example input \n#5\n#1 2 3 4 5 6\n#Output: 35\n#Explanation: \n#Subarrays of [1, 2, 3, 4, 5, 6] are: \n#[1], [2], [3], [4], [5], [6], [1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [1, 2, 3], [2, 3, 4], [3, 4, 5], [4, 5, 6], [1, 2, 3, 4], [2, 3, 4, 5], [3, 4, 5, 6], [1, 2,",
        "generated_testcode": "assert sum_Of_Subarray_Prod([1,2,3,4,5],4) == 220\n",
        "test": "assert sum_Of_Subarray_Prod([1,2,3],3) == 20\nassert sum_Of_Subarray_Prod([1,2],2) == 5\nassert sum_Of_Subarray_Prod([1,2,3,4],4) == 84",
        "canonical_solution": "def sum_Of_Subarray_Prod(arr,n):\r\n    ans = 0\r\n    res = 0\r\n    i = n - 1\r\n    while (i >= 0):\r\n        incr = arr[i]*(1 + res)\r\n        ans += incr\r\n        res = incr\r\n        i -= 1\r\n    return (ans)"
    },
    {
        "number": 735,
        "prompt": "Write a python function to toggle bits of the number except the first and the last bit.\ndef set_middle_bits(n):  \n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    n = int(input(\"Enter a number: \")) \n    mask = ~(((1 << (n.bit_length() - 2)) - 1) << 1) \n    return n ^ mask \n\nprint(set_middle_bits(n))\n\n# Example:\n# Input: 1010101010\n# Output: 110101010 (all the bits except the first and the last bit are toggled) ",
        "generated_testcode": "assert set_middle_bits(10) == 11\n",
        "test": "assert toggle_middle_bits(9) == 15\nassert toggle_middle_bits(10) == 12\nassert toggle_middle_bits(11) == 13",
        "canonical_solution": "def set_middle_bits(n):  \r\n    n |= n >> 1; \r\n    n |= n >> 2; \r\n    n |= n >> 4; \r\n    n |= n >> 8; \r\n    n |= n >> 16;  \r\n    return (n >> 1) ^ 1\r\ndef toggle_middle_bits(n): \r\n    if (n == 1): \r\n        return 1\r\n    return n ^ set_middle_bits(n) "
    },
    {
        "number": 736,
        "prompt": "Write a function to locate the left insertion point for a specified value in sorted order.\ndef left_insertion(a, x):\n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    left = 0\n    right = len(a) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if a[mid] >= x:\n            right = mid - 1\n        else:\n            left = mid + 1\n    return left\n\n\n# Write a function to locate the right insertion point for a specified value in sorted order.\ndef right_insertion(a, x):\n    left = 0\n    right = len(a) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if a[mid] > x:\n            right = mid - 1\n        else:\n            left = mid + 1\n    return left\n\n# Use the two functions above to locate the insertion points and then insert x into the array.\ndef insert(a, x):\n    left = left_insertion(a, x)\n    right = right_insertion(a, x)\n    a.insert(right, x)\n    return a\n\n# Test the function with an example array and value\na = [1, 3, 5, 7, 9, 11, 13, 15]\nx = 8\nprint(insert(a, x))\n\n# Output: [1, 3, 5, 7, 8, 9, 11, 13, 15]\n\n# The function should return a list with the value 8 inserted between ",
        "generated_testcode": "assert left_insertion([1, 2, 3, 4, 5, 6], 3) == 2\n",
        "test": "assert left_insertion([1,2,4,5],6)==4\nassert left_insertion([1,2,4,5],3)==2\nassert left_insertion([1,2,4,5],7)==4",
        "canonical_solution": "import bisect\r\ndef left_insertion(a, x):\r\n    i = bisect.bisect_left(a, x)\r\n    return i"
    },
    {
        "number": 737,
        "prompt": "Write a function to check whether the given string is starting with a vowel or not using regex.\ndef check_str(string): \n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    import re \n    pattern = r'^[aeiouAEIOU]'\n    if re.search(pattern, string): \n        return True\n    else: \n        return False\n\n# Test the function \nprint(check_str(\"hello\"))  # False\nprint(check_str(\"apple\")) # True \nprint(check_str(\"Orange\")) # False \nprint(check_str(\"Elephant\")) # True ",
        "generated_testcode": "assert check_str(\"apple\") == True\n",
        "test": "assert check_str(\"annie\") == 'Valid'\nassert check_str(\"dawood\") == 'Invalid'\nassert check_str(\"Else\") == 'Valid'",
        "canonical_solution": "import re \r\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\r\ndef check_str(string): \r\n\tif(re.search(regex, string)): \r\n\t\treturn (\"Valid\") \r\n\telse: \r\n\t\treturn (\"Invalid\") "
    },
    {
        "number": 738,
        "prompt": "Write a function to calculate the geometric sum of n-1.\ndef geometric_sum(n):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    if n == 0:\n        return 0\n    return 1/4**(n-1)\n\n# Test cases\nprint(geometric_sum(3)) # should return 0.875\nprint(geometric_sum(4)) # should return 0.78125\nprint(geometric_sum(5)) # should return 0.953125\nprint(geometric_sum(6)) # should return 0.984375\n\n# Explanation:\n# The geometric sum of n-1 can be represented by (1-r^n)/(1-r), where r is the common ratio and n is the number of terms.\n# In this case, r = 1/4. So, the sum would be (1-r^n)/(1-r) = (1-1/4^n)/(1-1/4) = 1/(1-1/4) - 1/(4-1) = 4^n/(3-4)\n# We can rewrite this as 4^n/1-4n, so the answer is 4^n-1/(4^n-1) = 1/(1-1/4^n). \n# Since 1/4^n can be expressed as 4^(n-1), we can rewrite this as 1/(4^(n-1) - 1) and simplify the function to 1/(4^n-1). \n# If n=0, we return 0 since there are",
        "generated_testcode": "assert geometric_sum(5) == 14.38\n",
        "test": "assert geometric_sum(7) == 1.9921875\nassert geometric_sum(4) == 1.9375\nassert geometric_sum(8) == 1.99609375",
        "canonical_solution": "def geometric_sum(n):\r\n  if n < 0:\r\n    return 0\r\n  else:\r\n    return 1 / (pow(2, n)) + geometric_sum(n - 1)"
    },
    {
        "number": 739,
        "prompt": "Write a python function to find the index of smallest triangular number with n digits.\ndef find_Index(n): \n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    index = 1\n    triangular = 0\n    i = 1\n    while len(str(triangular)) < n:\n        triangular += i\n        i += 1\n        index += 1\n    return index\nprint(find_Index(2)) # Output: 10\nprint(find_Index(3)) # Output: 21\nprint(find_Index(4)) # Output: 30\nprint(find_Index(5)) # Output: 42\nprint(find_Index(6)) # Output: 56\n\n# Time complexity: O(n)\n# Space complexity: O(1)\n\n# Test cases\nprint(find_Index(2)) # Output: 10\nprint(find_Index(3)) # Output: 21\nprint(find_Index(4)) # Output: 30\nprint(find_Index(5)) # Output: 42\nprint(find_Index(6)) # Output: 56\nprint(find_Index(7)) # Output: 65\nprint(find_Index(8)) # Output: 72\nprint(find_Index(9)) # Output: 81 ",
        "generated_testcode": "assert find_Index(1) == 1\n",
        "test": "assert find_Index(2) == 4\nassert find_Index(3) == 14\nassert find_Index(4) == 45",
        "canonical_solution": "import math \r\ndef find_Index(n): \r\n    x = math.sqrt(2 * math.pow(10,(n - 1))); \r\n    return round(x); "
    },
    {
        "number": 740,
        "prompt": "Write a function to convert the given tuple to a key-value dictionary using adjacent elements.\ndef tuple_to_dict(test_tup):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    d = {}\n    for i in range(0, len(test_tup), 2):\n        key = test_tup[i]\n        value = test_tup[i+1]\n        d[key] = value\n    return d\n\n# Test the function\nt = (\"a\", 1, \"b\", 2, \"c\", 3, \"d\", 4)\nprint(tuple_to_dict(t))  # Output: {\"a\": 1, \"b\": 2, \"c\": 3, \"d\": 4}\n\n# Test the function with empty tuple\nt = ()\nprint(tuple_to_dict(t))  # Output: {}\n\n# Test the function with odd number of elements\nt = (\"a\", 1, \"b\", 2, \"c\")\nprint(tuple_to_dict(t))  # Output: ValueError: need more than 1 value to unpack\n\n# Test the function with string as an element\nt = (\"a\", \"1\", \"b\", 2, \"c\", 3, \"d\")\nprint(tuple_to_dict(t))  # Output: ValueError: invalid literal for int() with base 10: '1'\n\n# Test the function with non-string key\nt = (1, 1, \"b\", 2, \"c\", 3, 4)\nprint(tuple_to_dict(t))  # Output: ValueError: unhashable type: 'int'\n\n# Test the function",
        "generated_testcode": "assert tuple_to_dict((1, 2, 3, 4, 5, 6, 7, 8) == {1: 2, 3: 4, 5: 6, 7: 8})\n",
        "test": "assert tuple_to_dict((1, 5, 7, 10, 13, 5)) == {1: 5, 7: 10, 13: 5}\nassert tuple_to_dict((1, 2, 3, 4, 5, 6)) == {1: 2, 3: 4, 5: 6}\nassert tuple_to_dict((7, 8, 9, 10, 11, 12)) == {7: 8, 9: 10, 11: 12}",
        "canonical_solution": "def tuple_to_dict(test_tup):\r\n  res = dict(test_tup[idx : idx + 2] for idx in range(0, len(test_tup), 2))\r\n  return (res) "
    },
    {
        "number": 741,
        "prompt": "Write a python function to check whether all the characters are same or not.\ndef all_Characters_Same(s) :\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": true,
        "answer": "    if len(s) == 0 :\n        return True\n    first_char = s[0]\n    for char in s :\n        if char != first_char :\n            return False\n    return True\n\n# Testing the function\ns = \"hello\"\nif all_Characters_Same(s) :\n    print(\"All characters are same\")\nelse :\n    print(\"All characters are not same\")\n\ns = \"xyzxyz\"\nif all_Characters_Same(s) :\n    print(\"All characters are same\")\nelse :\n    print(\"All characters are not same\")\n\ns = \"abcabc\"\nif all_Characters_Same(s) :\n    print(\"All characters are same\")\nelse :\n    print(\"All characters are not same\")\n\n# Output:\n# All characters are not same\n# All characters are same\n# All characters are not same\n\n# Time Complexity : O(n) ",
        "generated_testcode": "assert all_Characters_Same(\"aaa\") == True\n",
        "test": "assert all_Characters_Same(\"python\") == False\nassert all_Characters_Same(\"aaa\") == True\nassert all_Characters_Same(\"data\") == False",
        "canonical_solution": "def all_Characters_Same(s) :\r\n    n = len(s)\r\n    for i in range(1,n) :\r\n        if s[i] != s[0] :\r\n            return False\r\n    return True"
    },
    {
        "number": 742,
        "prompt": "Write a function to caluclate the area of a tetrahedron.\ndef area_tetrahedron(side):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    area = (5*side*side) / (6*math.sqrt(3))\n    return area\n# calculate the volume of a tetrahedron\ndef volume_tetrahedron(side):\n    volume = (side*side*side) / (6)\n    return volume\n# calculate the surface area of a tetrahedron\ndef surface_tetrahedron(side):\n    surface_area = (2*side**2) * math.sqrt(3)\n    return surface_area\n# calculate the surface area of a cube\ndef surface_cube(side):\n    surface_area = 6 * (side*side)\n    return surface_area\n# calculate the volume of a cube\ndef volume_cube(side):\n    volume = side**3\n    return volume\n# calculate the surface area of a sphere\ndef surface_sphere(radius):\n    surface_area = 4 * math.pi * radius**2\n    return surface_area\n# calculate the volume of a sphere\ndef volume_sphere(radius):\n    volume = (4/3) * math.pi * radius**3\n    return volume\n\n# Testing the functions\nprint(area_tetrahedron(5)) # should print 10.82531754730547312\nprint(volume_tetrahedron(5)) # should print 1125\nprint(surface_tetrahedron(5)) # should print 50\nprint(surface_cube(5",
        "generated_testcode": "assert area_tetrahedron(6) == 12.0\n",
        "test": "assert area_tetrahedron(3)==15.588457268119894\nassert area_tetrahedron(20)==692.8203230275509\nassert area_tetrahedron(10)==173.20508075688772",
        "canonical_solution": "import math\r\ndef area_tetrahedron(side):\r\n  area = math.sqrt(3)*(side*side)\r\n  return area"
    },
    {
        "number": 743,
        "prompt": "Write a function to rotate a given list by specified number of items to the right direction.\ndef rotate_right(list1,m,n):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    for i in range(m):\n        temp = list1.pop()\n        list1.insert(0,temp)\n    return list1\n\n# test\nprint(rotate_right([1,2,3,4,5,6],2)) #[5,6,1,2,3]\nprint(rotate_right([1,2,3,4,5,6,7],3)) #[4,5,6,7,1,2]\nprint(rotate_right([1,2,3,4,5,6,7],7)) #[1,2,3,4,5,6,7]\nprint(rotate_right([1,2,3,4,5,6,7],0)) #[1,2,3,4,5,6,7]\n\n# Note: This function will not work for negative values of n and will not rotate the list completely by n times.\n#       If n is greater than the length of list, it will only rotate by n%len(list1) times.\n#       To rotate the list completely, we can change the loop to:\n#\n#       for i in range(n%len(list1)):\n#           temp = list1.pop()\n#           list1.insert(0,temp)\n#       return list1\n#\n#       This will rotate the list by n%len(list1) times. ",
        "generated_testcode": "assert rotate_right([1,2,3,4,5,6,7],2) == [5,6,7,1,2,3]\n",
        "test": "assert rotate_right([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],3,4)==[8, 9, 10, 1, 2, 3, 4, 5, 6]\nassert rotate_right([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],2,2)==[9, 10, 1, 2, 3, 4, 5, 6, 7, 8]\nassert rotate_right([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],5,2)==[6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8]",
        "canonical_solution": "def rotate_right(list1,m,n):\r\n  result =  list1[-(m):]+list1[:-(n)]\r\n  return result"
    },
    {
        "number": 744,
        "prompt": "Write a function to check if the given tuple has any none value or not.\ndef check_none(test_tup):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    for item in test_tup:\n        if item is None:\n            return True\n    return False\n\n\n# Test the function with a tuple\ntest_tup = (10, 20, 30, None, 40, 50)\nprint(check_none(test_tup))  # Output: True\n\ntest_tup = (10, 20, 30, 40, 50)\nprint(check_none(test_tup))  # Output: False\n",
        "generated_testcode": "assert check_none((1, 2, 3, 4, 5)) == False\n",
        "test": "assert check_none((10, 4, 5, 6, None)) == True\nassert check_none((7, 8, 9, 11, 14)) == False\nassert check_none((1, 2, 3, 4, None)) == True",
        "canonical_solution": "def check_none(test_tup):\r\n  res = any(map(lambda ele: ele is None, test_tup))\r\n  return (res) "
    },
    {
        "number": 745,
        "prompt": "Write a function to find numbers within a given range where every number is divisible by every digit it contains.\ndef divisible_by_digits(startnum, endnum):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    for num in range(startnum, endnum+1):\n        if all(num % digit == 0 for digit in range(10)):\n            yield num\n\n# Test cases\nprint(list(divisible_by_digits(10, 50)) # [10, 20, 30, 40, 50]\nprint(list(divisible_by_digits(100, 500)) # [120, 130, 140, 150, 160, 170, 180, 190, 200, 210, 220, 230, 240, 250, 260, 270, 280, 290, 300, 310, 320, 330, 340, 350, 360, 370, 380, 390, 400, 410, 420, 430, 440, 450, 460, 470, 480, 490, 500]\nprint(list(divisible_by_digits(10000, 20000)) # [10000, 11000, 1200",
        "generated_testcode": "assert divisible_by_digits(10, 100) == [12, 20, 30, 40, 50, 60, 70, 80, 90]\n",
        "test": "assert divisible_by_digits(1,22)==[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]\nassert divisible_by_digits(1,15)==[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]\nassert divisible_by_digits(20,25)==[22, 24]",
        "canonical_solution": "def divisible_by_digits(startnum, endnum):\r\n    return [n for n in range(startnum, endnum+1) \\\r\n                if not any(map(lambda x: int(x) == 0 or n%int(x) != 0, str(n)))]"
    },
    {
        "number": 746,
        "prompt": "Write a function to find area of a sector.\ndef sector_area(r,a):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    pi=22/7\n    area=pi*r*r*a/360\n    return area\n\n#Testing the function with some values\nprint(sector_area(5,30)) #50.265482457436669\nprint(sector_area(3,15)) #10.10825317645118242\nprint(sector_area(2,45)) #32.17205743115597644\nprint(sector_area(4,90)) #502.65482457436669 ",
        "generated_testcode": "assert sector_area(3, 2*3.14) == 12.56\n",
        "test": "assert sector_area(4,45)==6.285714285714286\nassert sector_area(9,45)==31.82142857142857\nassert sector_area(9,360)==None",
        "canonical_solution": "def sector_area(r,a):\r\n    pi=22/7\r\n    if a >= 360:\r\n        return None\r\n    sectorarea = (pi*r**2) * (a/360)\r\n    return sectorarea"
    },
    {
        "number": 747,
        "prompt": "Write a function to find the longest common subsequence for the given three string sequence.\ndef lcs_of_three(X, Y, Z, m, n, o): \n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    L = [[[0] * (o + 1) for i in range(n + 1)] for j in range(m + 1)] \n  \n    for i in range(m + 1): \n        for j in range(n + 1): \n            for k in range(o + 1): \n                if (i == 0 or j == 0 or k == 0): \n                    L[i][j][k] = 0\n                elif (X[i-1] == Y[j-1] and X[i-1] == Z[k-1]): \n                    L[i][j][k] = 1 + L[i-1][j-1][k-1] \n                else: \n                    L[i][j][k] = max(L[i-1][j][k], L[i][j-1][k], L[i][j][k-1]) \n                  \n    return L[m][n][o] \n  \n  \nX = \"AGGTAB\"\nY = \"GXTXAYB\"\nZ = \"GTXPXAYD\"\n  \nm = len(X) \nn = len(Y) \no = len(Z) \n  \nprint(\"Length of Longest Common Subsequence is\", lcs_of_three(X, Y, Z, m, n, o)) ",
        "generated_testcode": "assert lcs_of_three(\"AGGTAB\", \"GXTXAYB\", \"AGGXAB\", 6, 6, 6) == 4\n",
        "test": "assert lcs_of_three('AGGT12', '12TXAYB', '12XBA', 6, 7, 5) == 2\nassert lcs_of_three('Reels', 'Reelsfor', 'ReelsforReels', 5, 8, 13) == 5 \nassert lcs_of_three('abcd1e2', 'bc12ea', 'bd1ea', 7, 6, 5) == 3",
        "canonical_solution": "def lcs_of_three(X, Y, Z, m, n, o): \r\n\tL = [[[0 for i in range(o+1)] for j in range(n+1)] \r\n\t\tfor k in range(m+1)] \r\n\tfor i in range(m+1): \r\n\t\tfor j in range(n+1): \r\n\t\t\tfor k in range(o+1): \r\n\t\t\t\tif (i == 0 or j == 0 or k == 0): \r\n\t\t\t\t\tL[i][j][k] = 0\r\n\t\t\t\telif (X[i-1] == Y[j-1] and\r\n\t\t\t\t\tX[i-1] == Z[k-1]): \r\n\t\t\t\t\tL[i][j][k] = L[i-1][j-1][k-1] + 1\r\n\t\t\t\telse: \r\n\t\t\t\t\tL[i][j][k] = max(max(L[i-1][j][k], \r\n\t\t\t\t\tL[i][j-1][k]), \r\n\t\t\t\t\t\t\t\t\tL[i][j][k-1]) \r\n\treturn L[m][n][o]"
    },
    {
        "number": 748,
        "prompt": "Write a function to put spaces between words starting with capital letters in a given string by using regex.\ndef capital_words_spaces(str1):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    return re.sub(r\"([A-Z][a-z]+)\", r\" \\1\", str1)\n\n# Test the function\nprint(capital_words_spaces(\"HelloWorld\")) # \"Hello World\"\nprint(capital_words_spaces(\"PythonIsFun\")) # \"Python Is Fun\"\nprint(capital_words_spaces(\"PythonIsVeryFun\")) # \"Python Is Very Fun\"\n\n# Explanation:\n# The regex pattern [A-Z][a-z]+ matches any string that starts with an uppercase letter followed by one or more lowercase letters.\n# The \\1 in the replacement string represents the matched string (i.e., the word starting with a capital letter). We add a space before it. ",
        "generated_testcode": "assert capital_words_spaces(\"PythonIsAwesome\") == \"Python Is Awesome\"\n",
        "test": "assert capital_words_spaces(\"Python\") == 'Python'\nassert capital_words_spaces(\"PythonProgrammingExamples\") == 'Python Programming Examples'\nassert capital_words_spaces(\"GetReadyToBeCodingFreak\") == 'Get Ready To Be Coding Freak'",
        "canonical_solution": "import re\r\ndef capital_words_spaces(str1):\r\n  return re.sub(r\"(\\w)([A-Z])\", r\"\\1 \\2\", str1)"
    },
    {
        "number": 749,
        "prompt": "Write a function to sort a given list of strings of numbers numerically.\ndef sort_numeric_strings(nums_str):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": true,
        "answer": "    return sorted(nums_str, key=lambda x: int(x))\n\n#Example usage:\nprint(sort_numeric_strings([\"1\", \"12\", \"2\", \"15\", \"3\", \"5\", \"100\", \"25\"]))  # Output: [\"1\", \"2\", \"3\", \"12\", \"15\", \"25\", \"5\"]\n\n#Example usage:\nprint(sort_numeric_strings([\"543\", \"123\", \"9\", \"321\", \"64\", \"987\"]))  # Output: [\"9\", \"123\", \"321\", \"543\", \"64\"]\n\n#Example usage:\nprint(sort_numeric_strings([\"0\", \"0\", \"1\", \"00\", \"1\", \"01\", \"1\", \"2\", \"10\"]))  # Output: [\"0\", \"0\", \"00\", \"1\", \"1\", \"1\", \"1\", \"2\", \"10\"] ",
        "generated_testcode": "assert sort_numeric_strings(['1', '2', '10', '5', '3', '1']) == ['1', '1', '2', '3', '5', '10']\n",
        "test": "assert sort_numeric_strings( ['4','12','45','7','0','100','200','-12','-500'])==[-500, -12, 0, 4, 7, 12, 45, 100, 200]\nassert sort_numeric_strings(['2','3','8','4','7','9','8','2','6','5','1','6','1','2','3','4','6','9','1','2'])==[1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9]\nassert sort_numeric_strings(['1','3','5','7','1', '3','13', '15', '17','5', '7 ','9','1', '11'])==[1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17]",
        "canonical_solution": "def sort_numeric_strings(nums_str):\r\n    result = [int(x) for x in nums_str]\r\n    result.sort()\r\n    return result"
    },
    {
        "number": 750,
        "prompt": "Write a function to add the given tuple to the given list.\ndef add_tuple(test_list, test_tup):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    test_list.append(test_tup)\n    return test_list\n\n# Example usage:\ntest_list = [1, 2, 3, 4, 5]\ntest_tup = (6, 7, 8)\nadd_tuple(test_list, test_tup)\nprint(test_list)  # Output: [1, 2, 3, 4, 5, (6, 7, 8)]\n\n# Example usage:\ntest_list = ['a', 'b', 'c', 'd']\ntest_tup = ('e', 'f', 'g')\nadd_tuple(test_list, test_tup)\nprint(test_list)  # Output: ['a', 'b', 'c', 'd', ('e', 'f', 'g')]\n\n# Example usage:\ntest_list = []\ntest_tup = (1, 2)\nadd_tuple(test_list, test_tup)\nprint(test_list)  # Output: [(1, 2)]\n\n# Example usage:\ntest_list = ['hello']\ntest_tup = ('world',)\nadd_tuple(test_list, test_tup)\nprint(test_list)  # Output: ['hello', ('world',)] ",
        "generated_testcode": "assert add_tuple(test_list, test_tup) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]\n\n# Test the function with the following inputs\ntest_list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\ntest_tup = (11, 12, 13, 14, 15)\n\n",
        "test": "assert add_tuple([5, 6, 7], (9, 10)) == [5, 6, 7, 9, 10]\nassert add_tuple([6, 7, 8], (10, 11)) == [6, 7, 8, 10, 11]\nassert add_tuple([7, 8, 9], (11, 12)) == [7, 8, 9, 11, 12]",
        "canonical_solution": "def add_tuple(test_list, test_tup):\r\n  test_list += test_tup\r\n  return (test_list) "
    },
    {
        "number": 751,
        "prompt": "Write a function to check if the given array represents min heap or not.\ndef check_min_heap(arr, i):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    left_child = 2*i + 1\n    right_child = 2*i + 2\n    if left_child < len(arr) and arr[left_child] < arr[i]:\n        return False\n    if right_child < len(arr) and arr[right_child] < arr[i]:\n        return False\n    return True\n\ndef is_min_heap(arr):\n    for i in range(len(arr)):\n        if not check_min_heap(arr, i):\n            return False\n    return True\n\n# Test the function with sample input\nprint(is_min_heap([4, 10, 3, 5, 1, 2]))  # False\nprint(is_min_heap([1, 2, 3, 4, 10]))    # True\nprint(is_min_heap([1, 2, 3, 4, 10, 5])) # False\n\n# Time complexity: O(n^2)\n# Space complexity: O(1)\n\n# Time complexity of the function is O(n^2) as we need to check the heap property for each node, \n# and there can be at most O(n/2) nodes in a complete binary tree, which means we need to check\n# each node in the array.\n# Space complexity is O(1) as we are not using any additional data structure for the function. ",
        "generated_testcode": "assert check_min_heap([4, 2, 6, 2, 8, 3, 1, 5], 0) == True\n",
        "test": "assert check_min_heap([1, 2, 3, 4, 5, 6], 0) == True\nassert check_min_heap([2, 3, 4, 5, 10, 15], 0) == True\nassert check_min_heap([2, 10, 4, 5, 3, 15], 0) == False",
        "canonical_solution": "def check_min_heap(arr, i):\r\n    if 2 * i + 2 > len(arr):\r\n        return True\r\n    left_child = (arr[i] <= arr[2 * i + 1]) and check_min_heap(arr, 2 * i + 1)\r\n    right_child = (2 * i + 2 == len(arr)) or (arr[i] <= arr[2 * i + 2] \r\n                                      and check_min_heap(arr, 2 * i + 2))\r\n    return left_child and right_child"
    },
    {
        "number": 752,
        "prompt": "Write a function to find the nth jacobsthal number.\ndef jacobsthal_num(n): \n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    if n == 0: \n        return 0\n    elif n == 1: \n        return 1\n    else: \n        return 2*jacobsthal_num(n-1) + jacobsthal_num(n-2)\n\n# Test the function \nprint(jacobsthal_num(3)) # Output: 5 \nprint(jacobsthal_num(4)) # Output: 11 \nprint(jacobsthal_num(5)) # Output: 21 \nprint(jacobsthal_num(6)) # Output: 43 \n\n# It uses recursion to calculate the nth jacobsthal number. ",
        "generated_testcode": "assert jacobsthal_num(0) == 0\n",
        "test": "assert jacobsthal_num(5) == 11\nassert jacobsthal_num(2) == 1\nassert jacobsthal_num(4) == 5",
        "canonical_solution": "def jacobsthal_num(n): \r\n\tdp = [0] * (n + 1) \r\n\tdp[0] = 0\r\n\tdp[1] = 1\r\n\tfor i in range(2, n+1): \r\n\t\tdp[i] = dp[i - 1] + 2 * dp[i - 2] \r\n\treturn dp[n]"
    },
    {
        "number": 753,
        "prompt": "Write a function to find minimum k records from tuple list.\ndef min_k(test_list, K):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    return sorted(test_list, key=lambda x: x[1])[:K]\n\n\n# Example usage:\nprint(min_k([(\"apple\", 50), (\"banana\", 60), (\"grapes\", 30), (\"orange\", 10), (\"kiwi\", 40), (\"mango\", 70)], 3))\n# Output: [('apple', 50), ('grapes', 30), ('kiwi', 40)]\n",
        "generated_testcode": "assert min_k(test_list, 3) == [('a', 1), ('b', 2), ('c', 3)]\n",
        "test": "assert min_k([('Manjeet', 10), ('Akshat', 4), ('Akash', 2), ('Nikhil', 8)], 2) == [('Akash', 2), ('Akshat', 4)]\nassert min_k([('Sanjeev', 11), ('Angat', 5), ('Akash', 3), ('Nepin', 9)], 3) == [('Akash', 3), ('Angat', 5), ('Nepin', 9)]\nassert min_k([('tanmay', 14), ('Amer', 11), ('Ayesha', 9), ('SKD', 16)], 1) == [('Ayesha', 9)]",
        "canonical_solution": "def min_k(test_list, K):\r\n  res = sorted(test_list, key = lambda x: x[1])[:K]\r\n  return (res) "
    },
    {
        "number": 754,
        "prompt": "Write a function to find common index elements from three lists.\ndef extract_index_list(l1, l2, l3):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    index_list = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3:\n            index_list.append(i)\n    return index_list\n\n#Example usage:\nl1 = [1, 2, 3, 4, 5, 6]\nl2 = [2, 4, 6, 8, 10]\nl3 = [4, 6, 12, 14]\nprint(extract_index_list(l1, l2, l3))  # output: [1, 2]\n\n#Example usage 2:\nl1 = [1, 2, 3, 4, 5, 6]\nl2 = [7, 8, 9, 10, 11]\nl3 = [12, 13, 14, 15, 16]\nprint(extract_index_list(l1, l2, l3))  # output: []\n\n#Example usage 3:\nl1 = [1, 2, 3, 4, 5, 6]\nl2 = [1, 2, 3, 4, 5]\nl3 = [4, 5, 6, 7, 8]\nprint(extract_index_list(l1, l2, l3))  # output: [0, 1, 2, 3] ",
        "generated_testcode": "assert extract_index_list([1, 2, 3, 4, 5], [2, 4, 6, 8], [4, 2, 1]) == [1, 2]\n",
        "test": "assert extract_index_list([1, 1, 3, 4, 5, 6, 7],[0, 1, 2, 3, 4, 5, 7],[0, 1, 2, 3, 4, 5, 7])==[1, 7]\nassert extract_index_list([1, 1, 3, 4, 5, 6, 7],[0, 1, 2, 3, 4, 6, 5],[0, 1, 2, 3, 4, 6, 7])==[1, 6]\nassert extract_index_list([1, 1, 3, 4, 6, 5, 6],[0, 1, 2, 3, 4, 5, 7],[0, 1, 2, 3, 4, 5, 7])==[1, 5]",
        "canonical_solution": "def extract_index_list(l1, l2, l3):\r\n    result = []\r\n    for m, n, o in zip(l1, l2, l3):\r\n        if (m == n == o):\r\n            result.append(m)\r\n    return result"
    },
    {
        "number": 755,
        "prompt": "Write a function to find the second smallest number in a list.\ndef second_smallest(numbers):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": true,
        "answer": "    first_min = float('inf')\n    second_min = float('inf')\n    for number in numbers:\n        if number < first_min:\n            second_min = first_min\n            first_min = number\n        elif number < second_min and number != first_min:\n            second_min = number\n    return second_min\n\n\n# Test the function with the example list\nnumbers = [5, 9, 3, 1, 7, 8, 2, 4]\nprint(second_smallest(numbers))  # Output: 2\n\n# Test the function with a list of repeated numbers\nnumbers = [1, 1, 1, 1, 1, 1]\nprint(second_smallest(numbers))  # Output: None (there is no second smallest number)\n\n# Test the function with an empty list\nnumbers = []\nprint(second_smallest(numbers))  # Output: None (there is no second smallest number)\n\n# Test the function with a list with one element\nnumbers = [5]\nprint(second_smallest(numbers))  # Output: None (there is no second smallest number)\n\n# Test the function with a list with two elements\nnumbers = [5, 3]\nprint(second_smallest(numbers))  # Output: None (there is no second smallest number) ",
        "generated_testcode": "assert second_smallest([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 2\n",
        "test": "assert second_smallest([1, 2, -8, -2, 0, -2])==-2\nassert second_smallest([1, 1, -0.5, 0, 2, -2, -2])==-0.5\nassert second_smallest([2,2])==None",
        "canonical_solution": "def second_smallest(numbers):\r\n  if (len(numbers)<2):\r\n    return\r\n  if ((len(numbers)==2)  and (numbers[0] == numbers[1]) ):\r\n    return\r\n  dup_items = set()\r\n  uniq_items = []\r\n  for x in numbers:\r\n    if x not in dup_items:\r\n      uniq_items.append(x)\r\n      dup_items.add(x)\r\n  uniq_items.sort()    \r\n  return  uniq_items[1] "
    },
    {
        "number": 756,
        "prompt": "Write a function that matches a string that has an a followed by zero or one 'b'.\ndef text_match_zero_one(text):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    pattern = re.compile(r\"a(b?)\")\n    match = pattern.match(text)\n    if match:\n        return True\n    else:\n        return False\n\n# Test cases\nprint(text_match_zero_one(\"a\"))  # True\nprint(text_match_zero_one(\"ab\"))  # True\nprint(text_match_zero_one(\"ac\"))  # False\n\n# Write a function that matches a string that has an 'a' followed by zero or one 'b' and one or more 'c'.\ndef text_match_zero_one_more(text):\n    pattern = re.compile(r\"a(b?)(c+)\")\n    match = pattern.match(text)\n    if match:\n        return True\n    else:\n        return False\n\n# Test cases\nprint(text_match_zero_one_more(\"ac\"))  # True\nprint(text_match_zero_one_more(\"abc\"))  # True\nprint(text_match_zero_one_more(\"abcc\"))  # True\nprint(text_match_zero_one_more(\"a\"))  # False\n\n# Write a function that matches a string that has an 'a' followed by zero or one 'b', and then zero or more 'c'.\ndef text_match_zero_more(text):\n    pattern = re.compile(r\"a(b)?(c*)\")\n    match = pattern.match(text)\n    if match:\n        return True\n    else:\n        return",
        "generated_testcode": "assert text_match_zero_one(\"a\") == True\n",
        "test": "assert text_match_zero_one(\"ac\")==('Found a match!')\nassert text_match_zero_one(\"dc\")==('Not matched!')\nassert text_match_zero_one(\"abbbba\")==('Found a match!')",
        "canonical_solution": "import re\r\ndef text_match_zero_one(text):\r\n        patterns = 'ab?'\r\n        if re.search(patterns,  text):\r\n                return 'Found a match!'\r\n        else:\r\n                return('Not matched!')"
    },
    {
        "number": 757,
        "prompt": "Write a function to count the pairs of reverse strings in the given string list.\ndef count_reverse_pairs(test_list):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j][::-1]:\n                count += 1\n    return count\n\n# Test the function\ntest_list = [\"race\", \"silent\", \"listen\", \"level\", \"listen\", \"world\", \"cool\"]\nprint(count_reverse_pairs(test_list))  # Output: 2\n\ntest_list = [\"hello\", \"world\", \"hi\", \"world\", \"python\", \"java\"]\nprint(count_reverse_pairs(test_list))  # Output: 2\n\ntest_list = [\"hello\", \"world\", \"python\", \"java\"]\nprint(count_reverse_pairs(test_list))  # Output: 0\n\ntest_list = [\"race\", \"listen\", \"level\", \"silent\"]\nprint(count_reverse_pairs(test_list))  # Output: 2\n\ntest_list = [\"listen\", \"level\", \"silent\", \"race\"]\nprint(count_reverse_pairs(test_list))  # Output: 3\n\ntest_list = [\"hello\", \"world\", \"python\", \"java\", \"level\", \"race\", \"silent\"]\nprint(count_reverse_pairs(test_list))  # Output: 3 ",
        "generated_testcode": "assert count_reverse_pairs(['abc', 'cba', 'bac', 'cab', 'bca']) == 2\n",
        "test": "assert count_reverse_pairs([\"julia\", \"best\", \"tseb\", \"for\", \"ailuj\"])== '2'\nassert count_reverse_pairs([\"geeks\", \"best\", \"for\", \"skeeg\"]) == '1'\nassert count_reverse_pairs([\"makes\", \"best\", \"sekam\", \"for\", \"rof\"]) == '2' ",
        "canonical_solution": "def count_reverse_pairs(test_list):\r\n  res = sum([1 for idx in range(0, len(test_list)) for idxn in range(idx, len( \r\n\ttest_list)) if test_list[idxn] == str(''.join(list(reversed(test_list[idx]))))]) \r\n  return str(res)"
    },
    {
        "number": 758,
        "prompt": "Write a function to count number of unique lists within a list.\ndef unique_sublists(list1):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    unique_list = []\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)+1):\n            sublist = list1[i:j]\n            if sublist not in unique_list:\n                unique_list.append(sublist)\n    return len(unique_list)\n\n#Example usage\nlist1 = [1,2,3,4,5]\nprint(unique_sublists(list1)) # Output: 10\n\n# Time complexity: O(n^3)\n# Space complexity: O(n^2) due to the nested loops and the space used by the unique_list\n\n# A better solution with O(n^2) time complexity and O(n) space complexity is possible using dictionaries and hash tables. ",
        "generated_testcode": "assert unique_sublists([\"a\", \"b\", \"c\", \"a\", \"b\", \"c\"]) == 2\n",
        "test": "assert unique_sublists([[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]] )=={(1, 3): 2, (5, 7): 2, (13, 15, 17): 1, (9, 11): 1}\nassert unique_sublists([['green', 'orange'], ['black'], ['green', 'orange'], ['white']])=={('green', 'orange'): 2, ('black',): 1, ('white',): 1}\nassert unique_sublists([[10, 20, 30, 40], [60, 70, 50, 50], [90, 100, 200]])=={(10, 20, 30, 40): 1, (60, 70, 50, 50): 1, (90, 100, 200): 1}",
        "canonical_solution": "def unique_sublists(list1):\r\n    result ={}\r\n    for l in  list1: \r\n        result.setdefault(tuple(l), list()).append(1) \r\n    for a, b in result.items(): \r\n        result[a] = sum(b)\r\n    return result"
    },
    {
        "number": 759,
        "prompt": "Write a function to check a decimal with a precision of 2.\ndef is_decimal(num):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": true,
        "answer": "    if \".\" in str(num):\n        decimal_pos = str(num).find(\".\")\n        if len(str(num)[decimal_pos + 1:]) <= 2:\n            return True\n    else:\n        return False\n\n# Test the function\nprint(is_decimal(1.1)) # True\nprint(is_decimal(1.12)) # True\nprint(is_decimal(1.123)) # False\nprint(is_decimal(12.123)) # False\nprint(is_decimal(12.12)) # True\nprint(is_decimal(12.001)) # True\nprint(is_decimal(12)) # False\nprint(is_decimal(12.000)) # True\nprint(is_decimal(12.0001)) # False\nprint(is_decimal(\"12.12\")) # True\nprint(is_decimal(\"12.123\")) # False\nprint(is_decimal(\"12.1\")) # True\nprint(is_decimal(\"12.01\")) # True\nprint(is_decimal(\"12\")) # False\nprint(is_decimal(\"12.000\")) # True\nprint(is_decimal(\"12.001\")) # False\nprint(is_decimal(\"12.\")) # True ",
        "generated_testcode": "assert is_decimal(3.14) == True\n",
        "test": "assert is_decimal('123.11')==True\nassert is_decimal('e666.86')==False\nassert is_decimal('3.124587')==False",
        "canonical_solution": "def is_decimal(num):\r\n    import re\r\n    dnumre = re.compile(r\"\"\"^[0-9]+(\\.[0-9]{1,2})?$\"\"\")\r\n    result = dnumre.search(num)\r\n    return bool(result)"
    },
    {
        "number": 760,
        "prompt": "Write a python function to check whether an array contains only one distinct element or not.\ndef unique_Element(arr,n):\n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    if(len(set(arr)) == 1):\n        return True\n    else:\n        return False\n\n#Example usage:\narr = [1,1,1,1,1,1,1]\nn = len(arr)\nprint(unique_Element(arr,n)) ",
        "generated_testcode": "assert unique_Element([1,2,3,4,5,6],5) == False\n",
        "test": "assert unique_Element([1,1,1],3) == 'YES'\nassert unique_Element([1,2,1,2],4) == 'NO'\nassert unique_Element([1,2,3,4,5],5) == 'NO'",
        "canonical_solution": "def unique_Element(arr,n):\r\n    s = set(arr)\r\n    if (len(s) == 1):\r\n        return ('YES')\r\n    else:\r\n        return ('NO')"
    },
    {
        "number": 761,
        "prompt": "Write a function to caluclate arc length of an angle.\ndef arc_length(d,a):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    import math\n    return d*math.sin(math.radians(a))\n\nprint(arc_length(3,45))\n\n#Write a function to calculate area of a triangle\ndef area_triangle(base, height):\n    return 0.5*base*height\n\nprint(area_triangle(10,5))\n\n#Write a function to calculate area of a circle\ndef area_circle(radius):\n    import math\n    return math.pi*(radius**2)\n\nprint(area_circle(5))\n\n#Write a function to calculate circumference of a circle\ndef circumference_circle(radius):\n    import math\n    return 2*math.pi*radius\n\nprint(circumference_circle(5))\n\n#Write a function to calculate surface area of a sphere\ndef surface_area_sphere(radius):\n    import math\n    return 4*math.pi*(radius**2)\n\nprint(surface_area_sphere(5))\n\n#Write a function to calculate the volume of a sphere\ndef volume_sphere(radius):\n    import math\n    return (4/3)*math.pi*(radius**3)\n\nprint(volume_sphere(5))\n\n#Write a function to calculate the volume of a cone\ndef volume_cone(radius,height):\n    import math\n    return (1/3)*math.pi*(radius**2)*height\n\nprint(volume_cone(5,10))\n\n#Write a function to calculate the volume",
        "generated_testcode": "assert arc_length(1, 90) == 0.5\n",
        "test": "assert arc_length(9,45)==3.5357142857142856\nassert arc_length(9,480)==None\nassert arc_length(5,270)==11.785714285714285",
        "canonical_solution": "def arc_length(d,a):\r\n    pi=22/7\r\n    if a >= 360:\r\n        return None\r\n    arclength = (pi*d) * (a/360)\r\n    return arclength"
    },
    {
        "number": 762,
        "prompt": "Write a function to check whether the given month number contains 30 days or not.\ndef check_monthnumber_number(monthnum3):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": true,
        "answer": "    if monthnum3 == 1 or monthnum3 == 3 or monthnum3 == 5 or monthnum3 == 7 or monthnum3 == 8 or monthnum3 == 10 or monthnum3 == 12:\n        return True\n    elif monthnum3 == 4 or monthnum3 == 6 or monthnum3 == 9 or monthnum3 == 11:\n        return True\n    else:\n        return False\n\n#Test the function\nprint(check_monthnumber_number(3)) #True\nprint(check_monthnumber_number(4)) #True\nprint(check_monthnumber_number(2)) #False\nprint(check_monthnumber_number(11)) #True\nprint(check_monthnumber_number(10)) #True\nprint(check_monthnumber_number(9)) #True\nprint(check_monthnumber_number(13)) #Error: Month number should be between 1 and 12\n\n#Example output: \n#True\n#True\n#False\n#True\n#True\n#True \n\n#Explanation:\n#Months 1, 3, 5, 7, 8, 10, and 12 have 30 days in them.\n#Months 4, 6, 9, and 11 have 30 days in them.\n#Month 2 has 28 or 29 days depending on the year.\n#Month 13 is an invalid input. ",
        "generated_testcode": "assert check_monthnumber_number(1) == True\n",
        "test": "assert check_monthnumber_number(6)==True\nassert check_monthnumber_number(2)==False\nassert check_monthnumber_number(12)==False",
        "canonical_solution": "def check_monthnumber_number(monthnum3):\r\n  if(monthnum3==4 or monthnum3==6 or monthnum3==9 or monthnum3==11):\r\n    return True\r\n  else:\r\n    return False"
    },
    {
        "number": 763,
        "prompt": "Write a python function to find the minimum difference between any two elements in a given array.\ndef find_Min_Diff(arr,n): \n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    arr.sort() \n    min_diff = abs(arr[1] - arr[0]) \n    for i in range(1, n-1): \n        diff = abs(arr[i] - arr[i+1]) \n        if (diff < min_diff): \n            min_diff = diff \n    return min_diff \n\n#Testing the function\narr = [3, 4, 1, 6, 8, 2, 7] \nn = len(arr) \nprint(\"Minimum difference is\", find_Min_Diff(arr, n)) ",
        "generated_testcode": "assert find_Min_Diff([1, 3, 5, 12, 15, 19, 26], 5) == 2\n",
        "test": "assert find_Min_Diff((1,5,3,19,18,25),6) == 1\nassert find_Min_Diff((4,3,2,6),4) == 1\nassert find_Min_Diff((30,5,20,9),4) == 4",
        "canonical_solution": "def find_Min_Diff(arr,n): \r\n    arr = sorted(arr) \r\n    diff = 10**20 \r\n    for i in range(n-1): \r\n        if arr[i+1] - arr[i] < diff: \r\n            diff = arr[i+1] - arr[i]  \r\n    return diff "
    },
    {
        "number": 764,
        "prompt": "Write a python function to count numeric values in a given string.\ndef number_ctr(str):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    count = 0\n    for i in str:\n        if i.isdigit():\n            count += 1\n    return count\n\nprint(number_ctr(\"hello123world456\"))  # Output: 2\nprint(number_ctr(\"python3.7 is great\"))  # Output: 2\nprint(number_ctr(\"I have 3 cats and 2 dogs\"))  # Output: 2\nprint(number_ctr(\"123, 456, 789 are my numbers\"))  # Output: 6\nprint(number_ctr(\"\"))  # Output: 0\n\n# This function will count the number of digits in the string and return the count. ",
        "generated_testcode": "assert number_ctr(\"Hello 123 World 456\") == 2\n",
        "test": "assert number_ctr('program2bedone') == 1\nassert number_ctr('3wonders') ==1\nassert number_ctr('123') == 3",
        "canonical_solution": "def number_ctr(str):\r\n      number_ctr= 0\r\n      for i in range(len(str)):\r\n          if str[i] >= '0' and str[i] <= '9': number_ctr += 1     \r\n      return  number_ctr"
    },
    {
        "number": 765,
        "prompt": "Write a function to find nth polite number.\ndef is_polite(n): \n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": true,
        "answer": "    if n == 1 or n == 2: \n        return 1\n    else: \n        return 2 * (is_polite(n-1) + is_polite(n-2))\n\ndef nth_polite_number(n):\n    return is_polite(n) ",
        "generated_testcode": "assert is_polite(1) == True\n",
        "test": "assert is_polite(7) == 11\nassert is_polite(4) == 7\nassert is_polite(9) == 13",
        "canonical_solution": "import math \r\ndef is_polite(n): \r\n\tn = n + 1\r\n\treturn (int)(n+(math.log((n + math.log(n, 2)), 2))) "
    },
    {
        "number": 766,
        "prompt": "Write a function to iterate over all pairs of consecutive items in a given list.\ndef pair_wise(l1):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    for i in range(len(l1)-1):\n        yield (l1[i], l1[i+1])\n        \n# Example usage:\nl1 = [1, 2, 3, 4, 5, 6]\nfor a, b in pair_wise(l1):\n    print(a, b)\n\n# Output:\n# 1 2\n# 2 3\n# 3 4\n# 4 5\n# 5 6\n\n# Implement the same function using a generator expression.\ndef pair_wise_gen(l1):\n    return ((l1[i], l1[i+1]) for i in range(len(l1)-1))\n    \n# Example usage:\nl1 = [1, 2, 3, 4, 5, 6]\nfor a, b in pair_wise_gen(l1):\n    print(a, b)\n\n# Output:\n# 1 2\n# 2 3\n# 3 4\n# 4 5\n# 5 6 ",
        "generated_testcode": "assert pair_wise([1, 2, 3, 4, 5]) == [(1, 2), (2, 3), (3, 4), (4, 5)]\n",
        "test": "assert pair_wise([1,1,2,3,3,4,4,5])==[(1, 1), (1, 2), (2, 3), (3, 3), (3, 4), (4, 4), (4, 5)]\nassert pair_wise([1,5,7,9,10])==[(1, 5), (5, 7), (7, 9), (9, 10)]\nassert pair_wise([1,2,3,4,5,6,7,8,9,10])==[(1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 7), (7, 8), (8, 9), (9, 10)]",
        "canonical_solution": "def pair_wise(l1):\r\n    temp = []\r\n    for i in range(len(l1) - 1):\r\n        current_element, next_element = l1[i], l1[i + 1]\r\n        x = (current_element, next_element)\r\n        temp.append(x)\r\n    return temp"
    },
    {
        "number": 767,
        "prompt": "Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019.\ndef get_Pairs_Count(arr,n,sum):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    arr.sort()\n    i=0\n    j=n-1\n    count=0\n    while i<j:\n        if arr[i]+arr[j]==sum:\n            count+=1\n            i+=1\n            j-=1\n        elif arr[i]+arr[j]<sum:\n            i+=1\n        else:\n            j-=1\n    return count\n\n# Main function\narr = list(map(int,input().split()))\nn=len(arr)\nsum=int(input())\nprint(get_Pairs_Count(arr,n,sum))\n\n# TC:O(nlogn) + O(n) = O(nlogn)\n# SC:O(1)\n\n# Time complexity: O(nlogn) due to sorting and O(n) due to while loop\n# Space complexity: O(1) as we are not using any additional data structure to store the values.\n\n# Testcase 1\n# Input:\n# 5 3 7 1 8 2 9\n# 11\n# Output: 2\n\n# Testcase 2\n# Input:\n# 1 2 3 4 5 6 7\n# 10\n# Output: 2\n\n# Testcase 3\n# Input:\n# 1 2 3 4 5 6\n# 9\n# Output: 4\n\n# Testcase 4\n# Input:\n# 1 2 3 ",
        "generated_testcode": "assert get_Pairs_Count([1,2,3,4,5,6,7,8,9],7) == 2\n",
        "test": "assert get_Pairs_Count([1,1,1,1],4,2) == 6\nassert get_Pairs_Count([1,5,7,-1,5],5,6) == 3\nassert get_Pairs_Count([1,-2,3],3,1) == 1",
        "canonical_solution": "def get_Pairs_Count(arr,n,sum):\r\n    count = 0  \r\n    for i in range(0,n):\r\n        for j in range(i + 1,n):\r\n            if arr[i] + arr[j] == sum:\r\n                count += 1\r\n    return count"
    },
    {
        "number": 768,
        "prompt": "Write a python function to check for odd parity of a given number.\ndef check_Odd_Parity(x): \n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    return x % 2 != 0\n\n# Test the function with an example\nprint(check_Odd_Parity(5)) # Output: True\nprint(check_Odd_Parity(6)) # Output: False\n\n# Write a python function to check if a given number is prime\ndef check_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\n# Test the function with an example\nprint(check_prime(7)) # Output: True\nprint(check_prime(12)) # Output: False\n\n# Write a python function to check if a number is a perfect square\ndef is_perfect_square(n):\n    return n == int(n ** 0.5 + 0.5) ** 2\n\n# Test the function with an example\nprint(is_perfect_square(25)) # Output: True\nprint(is_perfect_square(10)) # Output: False\n\n# Write a python function to check if a given number is a palindrome\ndef is_palindrome(n):\n    return str(n) == str(n)[::-1]\n\n# Test the function with an example\nprint(is_palindrome(12321)) # Output: True\nprint(is_palindrome(12345)) # Output: False\n\n# Write",
        "generated_testcode": "assert check_Odd_Parity(5) == True\n",
        "test": "assert check_Odd_Parity(13) == True\nassert check_Odd_Parity(21) == True\nassert check_Odd_Parity(18) == False",
        "canonical_solution": "def check_Odd_Parity(x): \r\n    parity = 0\r\n    while (x != 0): \r\n        x = x & (x - 1) \r\n        parity += 1\r\n    if (parity % 2 == 1): \r\n        return True\r\n    else: \r\n        return False"
    },
    {
        "number": 769,
        "prompt": "Write a python function to get the difference between two lists.\ndef Diff(li1,li2):\n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    diff = []\n    for i in li1:\n        if i not in li2:\n            diff.append(i)\n    return diff\n\n#Example usage\nli1 = [1,2,3,4,5,6,7,8,9]\nli2 = [2,4,6,8,10]\nprint(Diff(li1,li2)) # Output: [1, 3, 5, 7, 9]\n\nli1 = [1,2,3,4,5]\nli2 = [2,4,6,8,10]\nprint(Diff(li1,li2)) # Output: [1, 3, 5] ",
        "generated_testcode": "assert Diff([1,2,3,4],[2,3,4,5]) == [1]\n",
        "test": "assert (Diff([10, 15, 20, 25, 30, 35, 40], [25, 40, 35])) == [10, 20, 30, 15]\nassert (Diff([1,2,3,4,5], [6,7,1])) == [2,3,4,5,6,7]\nassert (Diff([1,2,3], [6,7,1])) == [2,3,6,7]",
        "canonical_solution": "def Diff(li1,li2):\r\n    return (list(list(set(li1)-set(li2)) + list(set(li2)-set(li1))))\r\n "
    },
    {
        "number": 770,
        "prompt": "Write a python function to find the sum of fourth power of first n odd natural numbers.\ndef odd_Num_Sum(n) : \n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    sum = 0\n    for i in range(1, 2 * n + 1, 2): \n        sum = sum + i ** 4\n    return sum \n  \n# take input from user \nn = int(input(\"Enter a number: \")) \n  \n# call the function \nresult = odd_Num_Sum(n) \n  \n# print the result \nprint(\"The sum of fourth power of first n odd natural numbers is:\", result) ",
        "generated_testcode": "assert odd_Num_Sum(5) == 225\n",
        "test": "assert odd_Num_Sum(2) == 82\nassert odd_Num_Sum(3) == 707\nassert odd_Num_Sum(4) == 3108",
        "canonical_solution": "def odd_Num_Sum(n) : \r\n    j = 0\r\n    sm = 0\r\n    for i in range(1,n + 1) : \r\n        j = (2*i-1) \r\n        sm = sm + (j*j*j*j)   \r\n    return sm "
    },
    {
        "number": 771,
        "prompt": "Write a function to check if the given expression is balanced or not.\ndef check_expression(exp):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    stack = []\n    for i in range(len(exp)):\n        if exp[i] in ['(', '{', '[']:\n            stack.append(exp[i])\n        elif exp[i] in [')', '}', ']']:\n            if not stack:\n                return False\n            if ((exp[i] == ')' and stack[-1] == '(') or (exp[i] == '}' and stack[-1] == '{') or (exp[i] == ']' and stack[-1] == '['):\n                stack.pop()\n            else:\n                return False\n    return len(stack) == 0\n\n# Test the function\nexp = \"({[]})\"\nprint(check_expression(exp)) # True\n\nexp = \"({[]})(\"\nprint(check_expression(exp)) # False\n\nexp = \"({)}\"\nprint(check_expression(exp)) # False\n\nexp = \"{[]()}\"\nprint(check_expression(exp)) # True\n\nexp = \"{[}]\"\nprint(check_expression(exp)) # False\n\nexp = \"({[}]\"\nprint(check_expression(exp)) # False\n\nexp = \"{()\"\nprint(check_expression(exp)) # False\n\nexp = \"{{[()]\"\nprint(check_expression(exp)) # False\n\nexp = \"({[)}\"\nprint(check_expression(exp)) # False\n\nexp = \"{)\"\nprint(check_expression(exp)) # False\n\nexp = \"([",
        "generated_testcode": "assert check_expression(\"()\") == True\n",
        "test": "assert check_expression(\"{()}[{}]\") == True\nassert check_expression(\"{()}[{]\") == False\nassert check_expression(\"{()}[{}][]({})\") == True",
        "canonical_solution": "from collections import deque\r\ndef check_expression(exp):\r\n    if len(exp) & 1:\r\n        return False\r\n    stack = deque()\r\n    for ch in exp:\r\n        if ch == '(' or ch == '{' or ch == '[':\r\n            stack.append(ch)\r\n        if ch == ')' or ch == '}' or ch == ']':\r\n            if not stack:\r\n                return False\r\n            top = stack.pop()\r\n            if (top == '(' and ch != ')') or (top == '{' and ch != '}' or (top == '[' and ch != ']')):\r\n                return False\r\n    return not stack"
    },
    {
        "number": 772,
        "prompt": "Write a function to remove all the words with k length in the given string.\ndef remove_length(test_str, K):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    words = test_str.split()\n    result = [word for word in words if len(word) != K]\n    return \" \".join(result)\n\n# Test the function with sample input\ntest_str = \"apple banana cherry date fig grape mango\"\nprint(remove_length(test_str, 5))  # Output: \"date\"\ntest_str = \"apple banana cherry date fig mango\"\nprint(remove_list(test_str, 5) # Output: \"apple banana cherry mango\"\ntest_str = \"apple banana cherry date\"\nprint(remove_list(test_str, 5) # Output: \"apple banana cherry\"\n\n# Time Complexity : O(n) ",
        "generated_testcode": "assert remove_length(\"Hello world\", 2) == \"Hd\"\n",
        "test": "assert remove_length('The person is most value tet', 3) == 'person is most value'\nassert remove_length('If you told me about this ok', 4) == 'If you me about ok'\nassert remove_length('Forces of darkeness is come into the play', 4) == 'Forces of darkeness is the'",
        "canonical_solution": "def remove_length(test_str, K):\r\n  temp = test_str.split()\r\n  res = [ele for ele in temp if len(ele) != K]\r\n  res = ' '.join(res)\r\n  return (res) "
    },
    {
        "number": 773,
        "prompt": "Write a function to find the occurrence and position of the substrings within a string.\ndef occurance_substring(text,pattern):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    result = []\n    for i in range(len(text)-len(pattern)+1):\n        if text[i:i+len(pattern)] == pattern:\n            result.append(i)\n    return result\n\n# Test the function\ntext = \"Python is a programming language\"\npattern = \"is\"\nprint(occurance_substring(text, pattern)) #[3, 8]\ntext = \"Python is a programming language\"\npattern = \"not\"\nprint(occurance_substring(text, pattern)) #[]\ntext = \"Python is a programming language\"\npattern = \"a\"\nprint(occurance_substring(text, pattern)) #[5]\ntext = \"Python is a programming language\"\npattern = \"ng\"\nprint(occurance_substring(text, pattern)) #[13] ",
        "generated_testcode": "assert occurance_substring(\"hello world\", \"l\") == (2, [2, 3] )\n",
        "test": "assert occurance_substring('python programming, python language','python')==('python', 0, 6)\nassert occurance_substring('python programming,programming language','programming')==('programming', 7, 18)\nassert occurance_substring('python programming,programming language','language')==('language', 31, 39)",
        "canonical_solution": "import re\r\ndef occurance_substring(text,pattern):\r\n for match in re.finditer(pattern, text):\r\n    s = match.start()\r\n    e = match.end()\r\n    return (text[s:e], s, e)"
    },
    {
        "number": 774,
        "prompt": "Write a function to check if the string is a valid email address or not using regex.\ndef check_email(email): \n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    pattern = r'\\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Z|a-z]{2,}\\b'\n    if(re.fullmatch(pattern, email)):\n        return True\n    else:\n        return False\n\n# Test cases\nprint(check_email(\"example@gmail.com\"))  # True\nprint(check_email(\"example@yahoo.com.au\"))  # True\nprint(check_email(\"example@example.com\"))  # True\nprint(check_email(\"example@example.c\"))  # False\nprint(check_email(\"example@.com\"))  # False\nprint(check_email(\"example@.com.au\"))  # False\nprint(check_email(\"example.com\"))  # False\nprint(check_email(\"example@com\"))  # False\nprint(check_email(\"example@com.au\"))  # False\nprint(check_email(\"example@yahoo\"))  # False\nprint(check_email(\"example@gmail_com\"))  # False\nprint(check_email(\"example@yahoo..com\"))  # False\nprint(check_email(\"example@yahoo..com.com\"))  # False\nprint(check_email(\"example@yahoo.com.c\"))  # False\n\n# The regex pattern matches an email address with the following rules:\n# 1. It should start with one or more alphanumeric characters, dots or underscores\n# 2",
        "generated_testcode": "assert check_email(\"example@example.com\") == True\n",
        "test": "assert check_email(\"ankitrai326@gmail.com\") == 'Valid Email'\nassert check_email(\"my.ownsite@ourearth.org\") == 'Valid Email'\nassert check_email(\"ankitaoie326.com\") == 'Invalid Email'",
        "canonical_solution": "import re \r\nregex = '^[a-z0-9]+[\\._]?[a-z0-9]+[@]\\w+[.]\\w{2,3}$'\r\ndef check_email(email): \r\n\tif(re.search(regex,email)): \r\n\t\treturn (\"Valid Email\") \r\n\telse: \r\n\t\treturn (\"Invalid Email\") "
    },
    {
        "number": 775,
        "prompt": "Write a python function to check whether every odd index contains odd numbers of a given list.\ndef odd_position(nums):\n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    for i in range(0, len(nums), 2):\n        if nums[i] % 2 == 0:\n            return False\n    return True\n\nprint(odd_position([1, 3, 5, 7, 9, 11, 13])) # True\nprint(odd_position([1, 2, 3, 7, 9, 11, 13])) # False\nprint(odd_position([1, 3, 5, 7, 9, 11, 12])) # False\nprint(odd_position([])) # True ",
        "generated_testcode": "assert odd_position([1, 2, 3, 4, 5, 6, 7, 8, 9]) == True\n",
        "test": "assert odd_position([2,1,4,3,6,7,6,3]) == True\nassert odd_position([4,1,2]) == True\nassert odd_position([1,2,3]) == False",
        "canonical_solution": "def odd_position(nums):\r\n\treturn all(nums[i]%2==i%2 for i in range(len(nums)))"
    },
    {
        "number": 776,
        "prompt": "Write a function to count those characters which have vowels as their neighbors in the given string.\ndef count_vowels(test_str):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    vowels = 'aeiouAEIOU'\n    count = 0\n    for i in range(len(test_str) - 1):\n        if test_str[i] in vowels and test_str[i + 1] in vowels:\n            count += 1\n    return count\n\n# Test the function with some sample inputs\nprint(count_vowels('Hello World'))  # Output: 3\nprint(count_vowels('banana'))  # Output: 2\nprint(count_vowels('Apple Computer'))  # Output: 3\nprint(count_vowels('Python is fun'))  # Output: 2\n\n# Time Complexity: O(n) where n is the length of the string\n# Space Complexity: O(1) as we are using a constant space for vowels and count\n\n# Output: 3, 2, 3, 2 ",
        "generated_testcode": "assert count_vowels(\"hello world\") == 3\n",
        "test": "assert count_vowels('bestinstareels') == 7\nassert count_vowels('partofthejourneyistheend') == 12\nassert count_vowels('amazonprime') == 5",
        "canonical_solution": "def count_vowels(test_str):\r\n  res = 0\r\n  vow_list = ['a', 'e', 'i', 'o', 'u']\r\n  for idx in range(1, len(test_str) - 1):\r\n    if test_str[idx] not in vow_list and (test_str[idx - 1] in vow_list or test_str[idx + 1] in vow_list):\r\n      res += 1\r\n  if test_str[0] not in vow_list and test_str[1] in vow_list:\r\n    res += 1\r\n  if test_str[-1] not in vow_list and test_str[-2] in vow_list:\r\n    res += 1\r\n  return (res) "
    },
    {
        "number": 777,
        "prompt": "Write a python function to find the sum of non-repeated elements in a given array.\ndef find_Sum(arr,n): \n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    Sum = 0\n    for i in range(n): \n        if arr.count(arr[i]) == 1: \n            Sum += arr[i] \n    return Sum\n  \n# Driver code \narr = [1, 2, 3, 2, 4, 5, 3] \nn = len(arr) \nprint(\"Sum of non-repeated elements is\", find_Sum(arr, n)) ",
        "generated_testcode": "assert find_Sum([1,2,3,2,4,5,3,1], 6) == 9\n",
        "test": "assert find_Sum([1,2,3,1,1,4,5,6],8) == 21\nassert find_Sum([1,10,9,4,2,10,10,45,4],9) == 71\nassert find_Sum([12,10,9,45,2,10,10,45,10],9) == 78",
        "canonical_solution": "def find_Sum(arr,n): \r\n    arr.sort() \r\n    sum = arr[0] \r\n    for i in range(0,n-1): \r\n        if (arr[i] != arr[i+1]): \r\n            sum = sum + arr[i+1]   \r\n    return sum"
    },
    {
        "number": 778,
        "prompt": "Write a function to pack consecutive duplicates of a given list elements into sublists.\ndef pack_consecutive_duplicates(list1):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    new_list = []\n    count = 1\n    for i in range(1, len(list1)):\n        if list1[i] == list1[i - 1]:\n            count += 1\n        else:\n            new_list.append([list1[i - 1]] * count)\n            count = 1\n    new_list.append([list1[-1]] * count)\n    return new_list\n\n\n# Example usage:\nprint(pack_consecutive_duplicates([1, 2, 2, 2, 3, 3, 3, 4, 4, 4, 4, 5, 6, 6, 6, 6, 6, 6]))  # Output: [[1], [2, 2], [3, 3, 3], [4, 4, 4], [5], [6, 6, 6, 6, 6]]\nprint(pack_consecutive_duplicates([1, 2, 2, 2, 2, 3, 3, 3, 4, 4, 4, 4, 4, 5, 6, 6, 6, 6, 6, 6, 7, 7])  # Output: [[1], [2, 2, 2], [3, 3, 3], [4, 4, 4], [5], [6, 6, 6, 6], [7,",
        "generated_testcode": "assert pack_consecutive_duplicates([\"a\", \"a\", \"a\", \"b\", \"b\", \"a\", \"c\", \"c\", \"c\", \"c\"]) == [[\"a\", \"a\", \"a\"], [\"b\", \"b\"], [\"a\"], [\"c\", \"c\", \"c\"]]\n",
        "test": "assert pack_consecutive_duplicates([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4])==[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]\nassert pack_consecutive_duplicates([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10])==[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]\nassert pack_consecutive_duplicates(['a', 'a', 'b', 'c', 'd', 'd'])==[['a', 'a'], ['b'], ['c'], ['d', 'd']]",
        "canonical_solution": "from itertools import groupby\r\ndef pack_consecutive_duplicates(list1):\r\n    return [list(group) for key, group in groupby(list1)]"
    },
    {
        "number": 779,
        "prompt": "Write a function to count the number of unique lists within a list.\ndef unique_sublists(list1):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    unique_lists = set(map(tuple, list1))\n    return len(unique_lists)\n\n\n# Test the function with sample input\nlist1 = [[1, 2, 3], [2, 3, 4], [1, 2, 3], [4, 5, 6], [4, 5, 6], [1, 2, 3], [7, 8, 9]]\nprint(unique_sublists(list1))  # Output: 4\n\n\n# Output explanation: There are 4 unique lists in the given list: [1, 2, 3], [2, 3, 4], [4, 5, 6], and [7, 8, 9] ",
        "generated_testcode": "assert unique_sublists([\"a\", \"b\", \"c\", \"a\", \"b\", \"d\"]) == 3\n",
        "test": "assert unique_sublists([[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]])=={(1, 3): 2, (5, 7): 2, (13, 15, 17): 1, (9, 11): 1}\nassert unique_sublists([['green', 'orange'], ['black'], ['green', 'orange'], ['white']])=={('green', 'orange'): 2, ('black',): 1, ('white',): 1}\nassert unique_sublists([[1, 2], [3, 4], [4, 5], [6, 7]])=={(1, 2): 1, (3, 4): 1, (4, 5): 1, (6, 7): 1}",
        "canonical_solution": "def unique_sublists(list1):\r\n    result ={}\r\n    for l in list1: \r\n        result.setdefault(tuple(l), list()).append(1) \r\n    for a, b in result.items(): \r\n        result[a] = sum(b)\r\n    return result"
    },
    {
        "number": 780,
        "prompt": "Write a function to find the combinations of sums with tuples in the given tuple list.\ndef find_combinations(test_list):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    def combinations(idx, target_sum, current_sum, current_combination):\n        if current_sum == target_sum:\n            result.append(current_combination)\n            return\n        elif current_sum > target_sum or idx == len(test_list):\n            return\n        else:\n            combinations(idx + 1, target_sum, current_sum, current_combination + (test_list[idx],))\n            combinations(idx + 1, current_sum + test_list[idx], current_combination, current_combination)\n\n    result = []\n    for i in range(1, target_sum + 1):\n        combinations(0, i, ())\n    return result\n\n\nprint(find_combinations((1,2,3,4,5))\n# [(1,), (2,), (3,), (4,), (5,), (1, 2), (1, 3), (1, 4), (1, 5), (2, 3), (2, 4), (2, 5), (3, 4), (3, 5), (4, 5), (1, 2, 3), (1, 2, 4), (1, 2, 5), (1, 3, 4), (1, 3, 5), (1, 4, 5), (2, 3, 4), (2, 3, 5), (2, 4",
        "generated_testcode": "assert find_combinations(()) == []\n",
        "test": "assert find_combinations([(2, 4), (6, 7), (5, 1), (6, 10)]) == [(8, 11), (7, 5), (8, 14), (11, 8), (12, 17), (11, 11)]\nassert find_combinations([(3, 5), (7, 8), (6, 2), (7, 11)]) == [(10, 13), (9, 7), (10, 16), (13, 10), (14, 19), (13, 13)]\nassert find_combinations([(4, 6), (8, 9), (7, 3), (8, 12)]) == [(12, 15), (11, 9), (12, 18), (15, 12), (16, 21), (15, 15)]",
        "canonical_solution": "from itertools import combinations \r\ndef find_combinations(test_list):\r\n  res = [(b1 + a1, b2 + a2) for (a1, a2), (b1, b2) in combinations(test_list, 2)]\r\n  return (res) "
    },
    {
        "number": 781,
        "prompt": "Write a python function to check whether the count of divisors is even or odd.\ndef count_Divisors(n) : \n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    count = 0\n    for i in range(1,n+1) : \n        if (n % i == 0) : \n            count = count + 1\n    if (count % 2 == 0) : \n        return \"Even\"\n    else : \n        return \"Odd\"\n\n# Test the function with some sample inputs\nprint(count_Divisors(12)) # Output : Even\nprint(count_Divisors(7)) # Output : Odd\nprint(count_Divisors(8)) # Output : Even\n\n# Time Complexity : O(n)\n# Space Complexity : O(1) ",
        "generated_testcode": "assert count_Divisors(12) == \"even\"\n",
        "test": "assert count_Divisors(10) == \"Even\"\nassert count_Divisors(100) == \"Odd\"\nassert count_Divisors(125) == \"Even\"",
        "canonical_solution": "import math \r\ndef count_Divisors(n) : \r\n    count = 0\r\n    for i in range(1, (int)(math.sqrt(n)) + 2) : \r\n        if (n % i == 0) : \r\n            if( n // i == i) : \r\n                count = count + 1\r\n            else : \r\n                count = count + 2\r\n    if (count % 2 == 0) : \r\n        return (\"Even\") \r\n    else : \r\n        return (\"Odd\") "
    },
    {
        "number": 782,
        "prompt": "Write a python function to find the sum of all odd length subarrays.\ndef Odd_Length_Sum(arr):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    length=len(arr)\n    sum=0\n    for i in range(length):\n        for j in range(i,length):\n            if (j-i+1)%2!=0:\n                for k in range(i,j+1):\n                    sum+=arr[k]\n    return sum\n\n#driver code\narr=[1,2,3,4,5,6,7,8,9]\nprint(Odd_Length_Sum(arr)) \n#output 45\n\narr=[1,2,3,4,5,6,7,8,9,10]\nprint(Odd_Length_Sum(arr)) \n#output 165\n\narr=[10,20,30,40,50,60,70,80,90,100]\nprint(Odd_Length_Sum(arr)) \n#output 4100\n\narr=[100,200,300,400,500,600,700,800,900,1000]\nprint(Odd_Length_Sum(arr)) \n#output 13000\n\narr=[-10,20,-30,40,50,-60,70,-80,90,100]\nprint(Odd_Length_Sum(arr)) \n#output 0 ",
        "generated_testcode": "assert Odd_Length_Sum([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 16\n",
        "test": "assert Odd_Length_Sum([1,2,4]) == 14\nassert Odd_Length_Sum([1,2,1,2]) == 15\nassert Odd_Length_Sum([1,7]) == 8",
        "canonical_solution": "def Odd_Length_Sum(arr):\r\n    Sum = 0\r\n    l = len(arr)\r\n    for i in range(l):\r\n        Sum += ((((i + 1) *(l - i) + 1) // 2) * arr[i])\r\n    return Sum"
    },
    {
        "number": 783,
        "prompt": "Write a function to convert rgb color to hsv color.\ndef rgb_to_hsv(r, g, b):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    r /= 255.0\n    g /= 255.0\n    b /= 255.0\n    cmax = max(r, g, b)\n    cmin = min(r, g, b)\n    delta = cmax - cmin\n    if delta == 0:\n        hue = 0\n    elif cmax == r:\n        hue = ((g - b) / delta) % 6\n    elif cmax == g:\n        hue = (b - r) / delta + 2\n    else:\n        hue = (r - g) / delta + 4\n    hue = int(round(hue * 60))\n    if hue < 0:\n        hue += 360\n    saturation = 0 if cmax == 0 else (delta / cmax)\n    value = cmax\n    return (hue, int(round(saturation * 100), 0), int(round(value * 100))\n\n# Test the function\nprint(rgb_to_hsv(255, 0, 0))  # (0, 100, 100)\nprint(rgb_to_hsv(0, 255, 0))  # (120, 100, 100)\nprint(rgb_to_hsv(0, 0, 255))  # (240, 1",
        "generated_testcode": "assert rgb_to_hsv(255, 0, 0) == (0, 1, 1)\n",
        "test": "assert rgb_to_hsv(255, 255, 255)==(0, 0.0, 100.0)\nassert rgb_to_hsv(0, 215, 0)==(120.0, 100.0, 84.31372549019608)\nassert rgb_to_hsv(10, 215, 110)==(149.26829268292684, 95.34883720930233, 84.31372549019608)",
        "canonical_solution": "def rgb_to_hsv(r, g, b):\r\n    r, g, b = r/255.0, g/255.0, b/255.0\r\n    mx = max(r, g, b)\r\n    mn = min(r, g, b)\r\n    df = mx-mn\r\n    if mx == mn:\r\n        h = 0\r\n    elif mx == r:\r\n        h = (60 * ((g-b)/df) + 360) % 360\r\n    elif mx == g:\r\n        h = (60 * ((b-r)/df) + 120) % 360\r\n    elif mx == b:\r\n        h = (60 * ((r-g)/df) + 240) % 360\r\n    if mx == 0:\r\n        s = 0\r\n    else:\r\n        s = (df/mx)*100\r\n    v = mx*100\r\n    return h, s, v"
    },
    {
        "number": 784,
        "prompt": "Write a function to find the product of first even and odd number of a given list.\ndef mul_even_odd(list1):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    even = 1\n    odd = 1\n    for i in list1:\n        if i % 2 == 0:\n            even *= i\n        else:\n            odd *= i\n    return (even, odd)\n\n# Test the function with an example list\nprint(mul_even_odd([2, 3, 4, 6, 8, 7, 9, 10]))  # output should be (3840, 945)\nprint(mul_even_odd([1, 2, 3, 4, 5, 6, 7]))  # output should be (2, 120)\nprint(mul_even_odd([1, 2, 3, 4, 5, 6, 7, 8]))  # output should be (40320, 1)\nprint(mul_even_odd([1]))  # output should be (1, 1)\nprint(mul_even_odd([0, 0, 0, 0, 0, 0, 0]))  # output should be (0, 0)\nprint(mul_even_odd([2, 2, 4, 6, 8, 10]))  # output should be (240, 1) ",
        "generated_testcode": "assert mul_even_odd([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 48\n",
        "test": "assert mul_even_odd([1,3,5,7,4,1,6,8])==4\nassert mul_even_odd([1,2,3,4,5,6,7,8,9,10])==2\nassert mul_even_odd([1,5,7,9,10])==10",
        "canonical_solution": "def mul_even_odd(list1):\r\n    first_even = next((el for el in list1 if el%2==0),-1)\r\n    first_odd = next((el for el in list1 if el%2!=0),-1)\r\n    return (first_even*first_odd)"
    },
    {
        "number": 785,
        "prompt": "Write a function to convert tuple string to integer tuple.\ndef tuple_str_int(test_str):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    if test_str[0] != '(' or test_str[-1] != ')':\n        return None\n    if test_str[1:-1] == '':\n        return ()\n    else:\n        new_list = test_str[1:-1].split(',')\n        new_tuple = tuple(int(i) for i in new_list)\n        return new_tuple\n\nprint(tuple_str_int('()')) # Output: ()\nprint(tuple_str_int('(1, 2, 3)')) # Output: (1, 2, 3)\nprint(tuple_str_int('(1, 2, 3, 4)')) # Output: (1, 2, 3, 4)\nprint(tuple_str_int('(1, 2, 3, 4, 5)')) # Output: (1, 2, 3, 4, 5)\nprint(tuple_str_int('(1)')) # Output: None\nprint(tuple_str_int('(1, 2, 3, 4, 5, ')) # Output: None\nprint(tuple_str_int('(1, 2, 3, 4, 5, 6, 7')) # Output: None\nprint(tuple_str_int('(1, 2, 3, 4, \"5\")')) # Output: None\nprint(tuple_str_int('(1, 2, 3, \"4\")')) # Output",
        "generated_testcode": "assert tuple_str_int(\"(1, 2, 3, 4, 5)\") == (1, 2, 3, 4, 5)\n",
        "test": "assert tuple_str_int(\"(7, 8, 9)\") == (7, 8, 9)\nassert tuple_str_int(\"(1, 2, 3)\") == (1, 2, 3)\nassert tuple_str_int(\"(4, 5, 6)\") == (4, 5, 6)",
        "canonical_solution": "def tuple_str_int(test_str):\r\n  res = tuple(int(num) for num in test_str.replace('(', '').replace(')', '').replace('...', '').split(', '))\r\n  return (res) "
    },
    {
        "number": 786,
        "prompt": "Write a function to locate the right insertion point for a specified value in sorted order.\ndef right_insertion(a, x):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    left, right = 0, len(a) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if a[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return left\n\n# Example usage:\na = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nx = 7\nprint(right_insertion(a, x))  # Output: 3\nx = 1\nprint(right_insertion(a, x))  # Output: 0\nx = 10\nprint(right_insertion(a, x))  # Output: 6\nx = 4\nprint(right_insertion(a, x))  # Output: 3\nx = 0\nprint(right_insertion(a, x))  # Output: 0\nx = 11\nprint(right_insertion(a, x))  # Output: 7\nx = 5\nprint(right_insertion(a, x))  # Output: 4\nx = 2\nprint(right_insertion(a, x))  # Output: 1\nx = -1\nprint(right_insertion(a, x))  # Output: 0\nx = 1100\nprint(right_insertion(a, x))  # Output: 7\nx = -100",
        "generated_testcode": "assert right_insertion([1, 2, 3, 4, 5, 6], 3) == 2\n",
        "test": "assert right_insertion([1,2,4,5],6)==4\nassert right_insertion([1,2,4,5],3)==2\nassert right_insertion([1,2,4,5],7)==4",
        "canonical_solution": "import bisect\r\ndef right_insertion(a, x):\r\n    i = bisect.bisect_right(a, x)\r\n    return i"
    },
    {
        "number": 787,
        "prompt": "Write a function that matches a string that has an a followed by three 'b'.\ndef text_match_three(text):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    pattern = r\"a.*?b.*?b.*?b\"\n    if re.search(pattern, text):\n        return True\n    else:\n        return False\n\n# Test cases\nprint(text_match_three(\"abbb\"))  # True\nprint(text_match_three(\"abb\"))  # False\nprint(text_match_three(\"aabbbbb\"))  # True\nprint(text_match_three(\"bbba\"))  # False\nprint(text_match_three(\"aababab\"))  # True\nprint(text_match_three(\"abbabbb\"))  # True\nprint(text_match_three(\"aababbbb\"))  # True\nprint(text_match_three(\"bbbab\"))  # False\nprint(text_match_three(\"abbbab\"))  # True\nprint(text_match_three(\"abbabcb\"))  # False\nprint(text_match_three(\"aabbbc\"))  # False\nprint(text_match_three(\"abcbbbdef\"))  # False\nprint(text_match_three(\"abcbbbdefaabb\"))  # True\nprint(text_match_three(\"abcbbbdefabbb\"))  # True\nprint(text_match_three(\"abcdef\"))  # False\nprint(text_match_three(\"abcdefabbb\"))  # True ",
        "generated_testcode": "assert text_match_three(\"abbb\") == True\n",
        "test": "assert text_match_three(\"ac\")==('Not matched!')\nassert text_match_three(\"dc\")==('Not matched!')\nassert text_match_three(\"abbbba\")==('Found a match!')",
        "canonical_solution": "import re\r\ndef text_match_three(text):\r\n        patterns = 'ab{3}?'\r\n        if re.search(patterns,  text):\r\n                return 'Found a match!'\r\n        else:\r\n                return('Not matched!')"
    },
    {
        "number": 788,
        "prompt": "Write a function to create a new tuple from the given string and list.\ndef new_tuple(test_list, test_str):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    # create a new tuple\n    new_t = tuple(test_list)\n    # create a new tuple with the string and list\n    new_t = new_t + (test_str,)\n    return new_t\n\n# example usage:\nmy_list = [1, 2, 3, 4, 5]\nmy_str = \"hello\"\nnew_t = new_tuple(my_list, my_str)\nprint(new_t)  # output: (1, 2, 3, 4, 5, 'hello')\n\n# Example usage:\nmy_list = [1, 2, 3, 4, 5]\nmy_str = \"hello\"\nnew_t = new_tuple(my_list, my_str)\nprint(type(new_t))  # output: <class 'tuple'>\n\n# Example usage:\nmy_list = [1, 2, 3, 4, 5]\nmy_str = \"hello\"\nnew_t = new_tuple(my_list, my_str)\nprint(len(new_t))  # output: 5\n\n# Example usage:\nmy_list = [1, 2, 3, 4, 5]\nmy_str = \"hello\"\nnew_t = new_tuple(my_list, my_str)\nprint(new_t[3])  # output: 5\n\n# Example usage:\nmy_list = [1, 2,",
        "generated_testcode": "assert new_tuple(['a', 'b', 'c'], 'd') == ('a', 'b', 'c', 'd')\n",
        "test": "assert new_tuple([\"WEB\", \"is\"], \"best\") == ('WEB', 'is', 'best')\nassert new_tuple([\"We\", \"are\"], \"Developers\") == ('We', 'are', 'Developers')\nassert new_tuple([\"Part\", \"is\"], \"Wrong\") == ('Part', 'is', 'Wrong')",
        "canonical_solution": "def new_tuple(test_list, test_str):\r\n  res = tuple(test_list + [test_str])\r\n  return (res) "
    },
    {
        "number": 789,
        "prompt": "Write a function to calculate the perimeter of a regular polygon.\ndef perimeter_polygon(s,l):\n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    return s*l\n\n# Test cases\nprint(perimeter_polygon(2,6)) # Output: 12\nprint(perimeter_polygon(3,4)) # Output: 12\nprint(perimeter_polygon(10,10)) # Output: 30\nprint(perimeter_polygon(7,8)) # Output: 56\nprint(perimeter_polygon(1,10)) # Output: 10 ",
        "generated_testcode": "assert perimeter_polygon(10,4) == 40\n",
        "test": "assert perimeter_polygon(4,20)==80\nassert perimeter_polygon(10,15)==150\nassert perimeter_polygon(9,7)==63",
        "canonical_solution": "from math import tan, pi\r\ndef perimeter_polygon(s,l):\r\n  perimeter = s*l\r\n  return perimeter"
    },
    {
        "number": 790,
        "prompt": "Write a python function to check whether every even index contains even numbers of a given list.\ndef even_position(nums):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": true,
        "answer": "    # check if the length of nums is less than 2\n    if len(nums) < 2:\n        return False\n    # iterate over every second number in nums\n    for i in range(1, len(nums), 2):\n        # check if the number is even\n        if nums[i] % 2 != 0:\n            return False\n    return True\n\n# test the function\nprint(even_position([2, 4, 6, 8, 10])) # True\nprint(even_position([2, 5, 6, 8, 10])) # True\nprint(even_position([1, 3, 4, 6, 8])) # False\nprint(even_position([2, 4, 6, 9, 8])) # False ",
        "generated_testcode": "assert even_position([1, 2, 3, 4, 5, 6, 7, 8]) == True\n",
        "test": "assert even_position([3,2,1]) == False\nassert even_position([1,2,3]) == False\nassert even_position([2,1,4]) == True",
        "canonical_solution": "def even_position(nums):\r\n\treturn all(nums[i]%2==i%2 for i in range(len(nums)))"
    },
    {
        "number": 791,
        "prompt": "Write a function to remove the nested record from the given tuple.\ndef remove_nested(test_tup):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    result = []\n    for item in test_tup:\n        if type(item) == tuple:\n            for i in item:\n                result.append(i)\n        else:\n            result.append(item)\n    return tuple(result)\n\n# Test the function with sample data\ntest_tup = ((1, 2, (3, 4, (5, 6), 7), 8, (9, 10))\nprint(remove_nested(test_tup))  # Output: (1, 2, 3, 4, 5, 6, 7, 8, 9, 10)\n\n# Test the function with another tuple\ntest_tup = (1, 2, (3, 4), (5, 6, (7, 8, 9), 10, 11, (12, 13))\nprint(remove_nested(test_tup))  # Output: (1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13) ",
        "generated_testcode": "assert remove_nested((1, (2, 3), 4, (5, 6, (7, 8), 9)) == (1, 4, 5, 6, 7, 8, 9)\n",
        "test": "assert remove_nested((1, 5, 7, (4, 6), 10)) == (1, 5, 7, 10)\nassert remove_nested((2, 6, 8, (5, 7), 11)) == (2, 6, 8, 11)\nassert remove_nested((3, 7, 9, (6, 8), 12)) == (3, 7, 9, 12)",
        "canonical_solution": "def remove_nested(test_tup):\r\n  res = tuple()\r\n  for count, ele in enumerate(test_tup):\r\n    if not isinstance(ele, tuple):\r\n      res = res + (ele, )\r\n  return (res) "
    },
    {
        "number": 792,
        "prompt": "Write a python function to count the number of lists in a given number of lists.\ndef count_list(input_list): \n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    count = 0 \n    for i in input_list: \n        if type(i) == list: \n            count += 1\n            count += count_list(i) \n    return count ",
        "generated_testcode": "assert count_list([1, 2, 3]) == 1\n",
        "test": "assert count_list([[1, 3], [5, 7], [9, 11], [13, 15, 17]]) == 4\nassert count_list([[1,2],[2,3],[4,5]]) == 3\nassert count_list([[1,0],[2,0]]) == 2",
        "canonical_solution": "def count_list(input_list): \r\n    return len(input_list)"
    },
    {
        "number": 793,
        "prompt": "Write a python function to find the last position of an element in a sorted array.\ndef last(arr,x,n):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    l=0\n    u=n-1\n    pos=-1\n    while l<=u:\n        mid=(l+u)//2\n        if arr[mid]==x:\n            pos=mid\n            l=mid+1\n        elif arr[mid]<x:\n            l=mid+1\n        else:\n            u=mid-1\n    if pos!=-1:\n        return pos\n    else:\n        return -1\nn=int(input(\"Enter the number of elements:\"))\narr=[int(x) for x in input(\"Enter the sorted array elements: \").split()]\nx=int(input(\"Enter the element to be searched: \"))\nresult=last(arr,x,n)\nif result!=-1:\n    print(f\"Element {x} is found at position {result+1}\")\nelse:\n    print(\"Element not found in the array\")\n    ",
        "generated_testcode": "assert last([1,2,3,4,4,5,6,7,7,8],4,7) == 5\n",
        "test": "assert last([1,2,3],1,3) == 0\nassert last([1,1,1,2,3,4],1,6) == 2\nassert last([2,3,2,3,6,8,9],3,8) == 3",
        "canonical_solution": "def last(arr,x,n):\r\n    low = 0\r\n    high = n - 1\r\n    res = -1  \r\n    while (low <= high):\r\n        mid = (low + high) // 2 \r\n        if arr[mid] > x:\r\n            high = mid - 1\r\n        elif arr[mid] < x:\r\n            low = mid + 1\r\n        else:\r\n            res = mid\r\n            low = mid + 1\r\n    return res"
    },
    {
        "number": 794,
        "prompt": "Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\ndef text_starta_endb(text):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    pattern = re.compile(r'a.*b$')\n    match = pattern.search(text)\n    if match:\n        return True\n    else:\n        return False\n\n# Example usage:\nprint(text_starta_endb(\"ab\")) # True\nprint(text_starta_endb(\"abc\")) # True\nprint(text_starta_endb(\"abcde\")) # False\nprint(text_starta_endb(\"abcdea\")) # False\nprint(text_starta_endb(\"a\")) # False\nprint(text_starta_endb(\"aab\")) # True\nprint(text_starta_endb(\"abcdab\")) # True\nprint(text_starta_endb(\"abab\")) # False\nprint(text_starta_endb(\"abcab\")) # True\nprint(text_starta_endb(\"abd\")) # False\n```\n\nThis will return True if the string starts with an 'a' and ends with a 'b', and False otherwise. ",
        "generated_testcode": "assert text_starta_endb(\"ab\") == True\n",
        "test": "assert text_starta_endb(\"aabbbb\")==('Found a match!')\nassert text_starta_endb(\"aabAbbbc\")==('Not matched!')\nassert text_starta_endb(\"accddbbjjj\")==('Not matched!')",
        "canonical_solution": "import re\r\ndef text_starta_endb(text):\r\n        patterns = 'a.*?b$'\r\n        if re.search(patterns,  text):\r\n                return 'Found a match!'\r\n        else:\r\n                return('Not matched!')"
    },
    {
        "number": 795,
        "prompt": "Write a function to find the n - cheap price items from a given dataset using heap queue algorithm.\ndef cheap_items(items,n):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    min_heap = []\n    for item in items:\n        if len(min_heap)<n:\n            heapq.heappush(min_heap,item)\n        else:\n            if item[0] < min_heap[0][0]:\n                heapq.heappushpop(min_heap,item)\n    return min_heap\n\n# Test case\nitems = [(1,2),(3,4),(5,6),(7,8),(9,10),(11,12),(13,14)]\nprint(cheap_items(items,3)) #[(1, 2), (3, 4), (5, 6)]\nprint(cheap_items(items,2)) #[(1, 2), (3, 4)]\nprint(cheap_items(items,4)) #[(1, 2), (3, 4), (5, 6), (7, 8)]\nprint(cheap_items(items,1)) #[(1, 2)])\nprint(cheap_items(items,0)) []\n\n# Complexity analysis\n# Time complexity: O(nlogn) - We need to iterate over the array and push and pop n elements from the heap\n# Space complexity: O(n) - We need to store n elements in the heap ",
        "generated_testcode": "assert cheap_items(items,n) == expected_output\n\n# Test the function with the following inputs\nitems = [{\"name\": \"item1\", \"price\": 10}, {\"name\": \"item2\", \"price\": 20}, {\"name\": \"item3\", \"price\": 5}, {\"name\": \"item4\", \"price\": 15}, {\"name\": \"item5\", \"price\": 8}]\nn = 2\nexpected_output = [{\"name\": \"item3\", \"price\": 5}, {\"name\": \"item1\", \"price\": 10}]\n\n",
        "test": "assert cheap_items([{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}],1)==[{'name': 'Item-1', 'price': 101.1}]\nassert cheap_items([{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}],2)==[{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}]\nassert cheap_items([{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}, {'name': 'Item-3', 'price': 45.09},{'name': 'Item-4', 'price': 22.75}],1)==[{'name': 'Item-4', 'price': 22.75}]",
        "canonical_solution": "import heapq\r\ndef cheap_items(items,n):\r\n  cheap_items = heapq.nsmallest(n, items, key=lambda s: s['price'])\r\n  return cheap_items"
    },
    {
        "number": 796,
        "prompt": "Write function to find the sum of all items in the given dictionary.\ndef return_sum(dict):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": true,
        "answer": "    sum = 0\n    for i in dict.values():\n        sum += i\n    return sum\n\n# Test the function with the dictionary\nmy_dict = {'apple': 3, 'banana': 5, 'orange': 7, 'watermelon': 2, 'grapes': 10}\nprint(return_sum(my_dict))\n\n# Output: 24 ",
        "generated_testcode": "assert return_sum({'a': 1, 'b': 2, 'c': 3}) == 6\n",
        "test": "assert return_sum({'a': 100, 'b':200, 'c':300}) == 600\nassert return_sum({'a': 25, 'b':18, 'c':45}) == 88\nassert return_sum({'a': 36, 'b':39, 'c':49}) == 124",
        "canonical_solution": "def return_sum(dict):\r\n  sum = 0\r\n  for i in dict.values():\r\n    sum = sum + i\r\n  return sum"
    },
    {
        "number": 797,
        "prompt": "Write a python function to find the sum of all odd natural numbers within the range l and r.\ndef sum_Odd(n): \n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    # initializing the sum as 0 \n    sum = 0\n    # finding the sum of odd numbers in the range [l, r] \n    for i in range(n): \n        if i % 2 != 0: \n            sum += i \n    return sum\n\n# taking input values of l and r \nl = int(input(\"Enter lower limit: \")) \nr = int(input(\"Enter upper limit: \"): \n\n# calling the function to find the sum of odd numbers in the range \ns = sum_Odd(r) - sum_Odd(l-1) \n\n# printing the result \nprint(\"The sum of odd numbers in the range [{}, {}] is {}\".format(l, r, s) ",
        "generated_testcode": "assert sum_Odd(10) == 25 # 1 + 3 + 5 + 7 + 9 = 18\n",
        "test": "assert sum_in_Range(2,5) == 8\nassert sum_in_Range(5,7) == 12\nassert sum_in_Range(7,13) == 40",
        "canonical_solution": "def sum_Odd(n): \r\n    terms = (n + 1)//2\r\n    sum1 = terms * terms \r\n    return sum1  \r\ndef sum_in_Range(l,r): \r\n    return sum_Odd(r) - sum_Odd(l - 1)"
    },
    {
        "number": 798,
        "prompt": "Write a python function to find the sum of an array.\ndef _sum(arr):  \n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    sum = 0  \n    for i in arr:  \n        sum = sum + i  \n    return sum ",
        "generated_testcode": "assert _sum([1, 2, 3, 4, 5]) == 11\n",
        "test": "assert _sum([1, 2, 3]) == 6\nassert _sum([15, 12, 13, 10]) == 50\nassert _sum([0, 1, 2]) == 3",
        "canonical_solution": "def _sum(arr):  \r\n    sum=0\r\n    for i in arr: \r\n        sum = sum + i      \r\n    return(sum)  "
    },
    {
        "number": 799,
        "prompt": "Write a python function to left rotate the bits of a given number.\ndef left_Rotate(n,d):   \n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    return n<<d | n>>(32-d) \n\n#Write a python function to right rotate the bits of a given number.\ndef right_Rotate(n,d):  \n    return n>>d | n<<(32-d) \n\n#Test the functions \nprint(left_Rotate(10,2)) # 40\nprint(right_Rotate(10,2)) # 200\n\n#Test the functions with different inputs\nprint(left_Rotate(999,3)) # 192\nprint(right_Rotate(999,3)) # 392 ",
        "generated_testcode": "assert left_Rotate(10,2) == 5\n",
        "test": "assert left_Rotate(16,2) == 64\nassert left_Rotate(10,2) == 40\nassert left_Rotate(99,3) == 792",
        "canonical_solution": "INT_BITS = 32\r\ndef left_Rotate(n,d):   \r\n    return (n << d)|(n >> (INT_BITS - d))  "
    },
    {
        "number": 800,
        "prompt": "Write a function to remove all whitespaces from a string.\ndef remove_all_spaces(text):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    return text.replace(\" \", \"\")\n\n# Example usage:\nprint(remove_all_spaces(\"hello world\")) # Output: \"helloworld\"\nprint(remove_all_spaces(\"Python is awesome\")) # Output: \"Pythonisawesome\" ",
        "generated_testcode": "assert remove_all_spaces(\"Hello World\") == \"HelloWorld\"\n",
        "test": "assert remove_all_spaces('python  program')==('pythonprogram')\nassert remove_all_spaces('python   programming    language')==('pythonprogramminglanguage')\nassert remove_all_spaces('python                     program')==('pythonprogram')",
        "canonical_solution": "import re\r\ndef remove_all_spaces(text):\r\n return (re.sub(r'\\s+', '',text))"
    },
    {
        "number": 801,
        "prompt": "Write a python function to count the number of equal numbers from three given integers.\ndef test_three_equal(x,y,z):\n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    count = 0\n    if x == y and y == z:\n        count += 1\n    if x == y or y == z or x == z:\n        count += 1\n    return count\n\nprint(test_three_equal(3,3,3))  # Output: 2\nprint(test_three_equal(1,2,3))  # Output: 0\nprint(test_three_equal(5,5,5))  # Output: 2\nprint(test_three_equal(4,4,1))  # Output: 2\n\n# Explanation:\n# For the first example, x,y and z are all equal to 3, so count is incremented by 1.\n# For the second example, none of the numbers are equal, so count remains 0.\n# For the third example, x and y are equal to 5, so count is incremented by 1.\n# For the fourth example, x and z are equal to 4, so count is incremented by 1. ",
        "generated_testcode": "assert test_three_equal(1,2,3) == 0\n",
        "test": "assert test_three_equal(1,1,1) == 3\nassert test_three_equal(-1,-2,-3) == 0\nassert test_three_equal(1,2,2) == 2",
        "canonical_solution": "def test_three_equal(x,y,z):\r\n  result= set([x,y,z])\r\n  if len(result)==3:\r\n    return 0\r\n  else:\r\n    return (4-len(result))"
    },
    {
        "number": 802,
        "prompt": "Write a python function to count the number of rotations required to generate a sorted array.\ndef count_Rotation(arr,n):   \n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    # Find the minimum element in the array \n    for i in range(0,n): \n        if arr[i] < arr[n-1]: \n            break\n    # If the minimum element is at the first index, then array is already sorted\n    if i == 0: \n        return 0\n    # If the minimum element is not at the first index, then rotate the array until the element is found at the first index. \n    while i != n-1: \n        # Keep rotating the array until the minimum element is found\n        temp = arr[i]\n        j = i \n        while j > 0 and arr[j-1] > temp: \n            arr[j] = arr[j-1] \n            j -= 1\n        arr[j] = temp \n        i += 1\n    # The index j is the index of the minimum element in the rotated array\n    return j \n\n# Test the function with a sample array \narr = [5, 6, 7, 8, 9, 10, 1, 2, 3] \nn = len(arr)\nprint(\"Number of rotations:\",count_Rotation(arr, n)) \n",
        "generated_testcode": "assert count_Rotation([4, 5, 6, 7, 8, 9, 1, 2, 3], 6) == 4\n",
        "test": "assert count_Rotation([3,2,1],3) == 1\nassert count_Rotation([4,5,1,2,3],5) == 2\nassert count_Rotation([7,8,9,1,2,3],6) == 3",
        "canonical_solution": "def count_Rotation(arr,n):   \r\n    for i in range (1,n): \r\n        if (arr[i] < arr[i - 1]): \r\n            return i  \r\n    return 0"
    },
    {
        "number": 803,
        "prompt": "Write a python function to check whether the given number is a perfect square or not.\ndef is_Perfect_Square(n) :\n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    if n < 0 :\n        return False\n    i = 1\n    while i * i <= n :\n        if i * i == n :\n            return True\n        i += 1\n    return False\n# Testing\nprint(is_Perfect_Square(16)) # Output: True\nprint(is_Perfect_Square(15)) # Output: False\n\n# Time Complexity: O(sqrt(n)) ",
        "generated_testcode": "assert is_Perfect_Square(16) == True\n",
        "test": "assert is_Perfect_Square(10) == False\nassert is_Perfect_Square(36) == True\nassert is_Perfect_Square(14) == False",
        "canonical_solution": "def is_Perfect_Square(n) :\r\n    i = 1\r\n    while (i * i<= n):\r\n        if ((n % i == 0) and (n / i == i)):\r\n            return True     \r\n        i = i + 1\r\n    return False"
    },
    {
        "number": 804,
        "prompt": "Write a python function to check whether the product of numbers is even or not.\ndef is_Product_Even(arr,n): \n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    product = 1\n    for i in range(n):\n        product = product * arr[i]\n    if(product % 2 == 0):\n        return True\n    else:\n        return False\n \n# Driver code\narr = [2, 3, 4, 5]\nn = len(arr)\nif(is_Product_Even(arr, n)): \n    print(\"The product is even\") \nelse: \n    print(\"The product is odd\") ",
        "generated_testcode": "assert is_Product_Even([2, 3, 4], 3) == True\n",
        "test": "assert is_Product_Even([1,2,3],3) == True\nassert is_Product_Even([1,2,1,4],4) == True\nassert is_Product_Even([1,1],2) == False",
        "canonical_solution": "def is_Product_Even(arr,n): \r\n    for i in range(0,n): \r\n        if ((arr[i] & 1) == 0): \r\n            return True\r\n    return False"
    },
    {
        "number": 805,
        "prompt": "Write a function to find the list in a list of lists whose sum of elements is the highest.\ndef max_sum_list(lists):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    max_sum = 0\n    result = []\n    for lst in lists:\n        if sum(lst) > max_sum:\n            max_sum = sum(lst)\n            result = lst\n    return result\n\n# Example usage:\nprint(max_sum_list([[1, 2, 3], [4, 5], [6, 7, 8], [9, 10, 11, 12]]))  # Output: [6, 7, 8]\nprint(max_sum_list([[1], [-2], [-3, 4], [-5, -6], [7, 8, 9, 10]]))  # Output: [7, 8, 9, 10]\nprint(max_sum_list([[1, 2, 3], [4, 5], [-6, -7, -8], [-9, -10, -11, -12]]))  # Output: [-9, -10, -11, -12] ",
        "generated_testcode": "assert max_sum_list([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [4, 5, 6]\n",
        "test": "assert max_sum_list([[1,2,3], [4,5,6], [10,11,12], [7,8,9]])==[10, 11, 12] \nassert max_sum_list([[3,2,1], [6,5,4], [12,11,10]])==[12,11,10] \nassert max_sum_list([[2,3,1]])==[2,3,1] ",
        "canonical_solution": "def max_sum_list(lists):\r\n return max(lists, key=sum)"
    },
    {
        "number": 806,
        "prompt": "Write a function to find maximum run of uppercase characters in the given string.\ndef max_run_uppercase(test_str):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    max_count = 0\n    current_count = 0\n    for i in range(len(test_str)):\n        if test_str[i].isupper():\n            current_count += 1\n        else:\n            max_count = max(max_count, current_count)\n            current_count = 0\n    max_count = max(max_count, current_count)\n    return max_count\n\n\n# Test the function with example inputs\nprint(max_run_uppercase(\"HelloWORLD\"))  # Output: 5\nprint(max_run_uppercase(\"helloWorld\"))  # Output: 0\nprint(max_run_uppercase(\"HELLOworld\"))  # Output: 5\nprint(max_run_uppercase(\"HELLO WORLD\")) # Output: 5\n\n\n# Test the function with empty string\nprint(max_run_uppercase(\"\")) # Output: 0 ",
        "generated_testcode": "assert max_run_uppercase(\"HelloWorld\") == 1\n",
        "test": "assert max_run_uppercase('GeMKSForGERksISBESt') == 5\nassert max_run_uppercase('PrECIOusMOVemENTSYT') == 6\nassert max_run_uppercase('GooGLEFluTTER') == 4",
        "canonical_solution": "def max_run_uppercase(test_str):\r\n  cnt = 0\r\n  res = 0\r\n  for idx in range(0, len(test_str)):\r\n    if test_str[idx].isupper():\r\n      cnt += 1\r\n    else:\r\n      res = cnt\r\n      cnt = 0\r\n  if test_str[len(test_str) - 1].isupper():\r\n    res = cnt\r\n  return (res)"
    },
    {
        "number": 807,
        "prompt": "Write a python function to find the first odd number in a given list of numbers.\ndef first_odd(nums):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    for num in nums:\n        if num % 2 == 1:\n            return num\n    return None\n\n# Test cases\nprint(first_odd([1, 2, 4, 5, 6, 7, 8, 9])) # Output: 5\nprint(first_odd([2, 4, 6, 8, 10])) # Output: None\nprint(first_odd([2, 3, 4, 6, 7, 8, 9])) # Output: 3\nprint(first_odd([0])) # Output: None\nprint(first_odd([])) # Output: None\n\n# Using list comprehension\ndef first_odd(nums):\n    return next((num for num in nums if num % 2 == 1), None)\n\n# Test cases\nprint(first_odd([1, 2, 4, 5, 6, 7, 8, 9])) # Output: 5\nprint(first_odd([2, 4, 6, 8, 10])) # Output: None\nprint(first_odd([2, 3, 4, 6, 7, 8, 9])) # Output: 3\nprint(first_odd([0])) # Output: None\nprint(first_odd([])) # Output: None ",
        "generated_testcode": "assert first_odd([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 3\n",
        "test": "assert first_odd([1,3,5]) == 1\nassert first_odd([2,4,1,3]) == 1\nassert first_odd ([8,9,1]) == 9",
        "canonical_solution": "def first_odd(nums):\r\n  first_odd = next((el for el in nums if el%2!=0),-1)\r\n  return first_odd"
    },
    {
        "number": 808,
        "prompt": "Write a function to check if the given tuples contain the k or not.\ndef check_K(test_tup, K):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    for tup in test_tup:\n        if 'k' in tup:\n            return True\n    return False\n\n# Test cases\nprint(check_K([('A', 'B', 'C'), ('D', 'E', 'F')], 'k'))  # Output: False\nprint(check_K([('A', 'B', 'C'), ('K', 'E', 'F')], 'k'))  # Output: True\nprint(check_K([('K', 'B', 'C'), ('D', 'E', 'K')], 'k'))  # Output: True\nprint(check_K([('K', 'B', 'C'), ('D', 'E', 'F')], 'K') # Output: True\n",
        "generated_testcode": "assert check_K((1, 2, 3, 4, 5), 3) == True\n",
        "test": "assert check_K((10, 4, 5, 6, 8), 6) == True\nassert check_K((1, 2, 3, 4, 5, 6), 7) == False\nassert check_K((7, 8, 9, 44, 11, 12), 11) == True",
        "canonical_solution": "def check_K(test_tup, K):\r\n  res = False\r\n  for ele in test_tup:\r\n    if ele == K:\r\n      res = True\r\n      break\r\n  return (res) "
    },
    {
        "number": 809,
        "prompt": "Write a function to check if each element of second tuple is smaller than its corresponding index in first tuple.\ndef check_smaller(test_tup1, test_tup2):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    for i in range(len(test_tup1)):\n        if test_tup1[i] < i:\n            if test_tup1[i] > test_tup2[i]:\n                return False\n    return True\n\n# Test the function with sample inputs\ntest_tup1 = (1, 3, 5, 7, 9, 11)\ntest_tup2 = (0, 2, 4, 6, 8, 10)\nprint(check_smaller(test_tup1, test_tup2)) # should return True\n\ntest_tup3 = (2, 3, 5, 7, 9, 11)\ntest_tup4 = (0, 2, 4, 6, 8, 10)\nprint(check_smaller(test_tup3, test_tup4)) # should return False\n\ntest_tup5 = (2, 1, 4, 6, 8, 10)\ntest_tup6 = (0, 2, 3, 5, 7, 9)\nprint(check_smaller(test_tup5, test_tup6)) # should return True\n\ntest_tup7 = (2, 1, 5, 7, 9, 10)\ntest_tup8 = (0, 2, 4, 6, 8, 10)\nprint(",
        "generated_testcode": "assert check_smaller((1, 2, 3, 4, 5), (0, 1, 2, 3)) == True\n",
        "test": "assert check_smaller((1, 2, 3), (2, 3, 4)) == False\nassert check_smaller((4, 5, 6), (3, 4, 5)) == True\nassert check_smaller((11, 12, 13), (10, 11, 12)) == True",
        "canonical_solution": "def check_smaller(test_tup1, test_tup2):\r\n  res = all(x > y for x, y in zip(test_tup1, test_tup2))\r\n  return (res) "
    },
    {
        "number": 810,
        "prompt": "Write a function to iterate over elements repeating each as many times as its count.\ndef count_variable(a,b,c,d):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    arr = [a,b,c,d]\n    ans = \"\"\n    for i in range(len(arr)):\n        for j in range(arr[i]):\n            ans += str(i+1)\n    return ans\n\n#Test the function\nprint(count_variable(1,2,3,4)) # Output: 111122233334444\nprint(count_variable(1,0,3,0)) # Output: 13\nprint(count_variable(0,0,0,0)) # Output: \nprint(count_variable(2,3,1,0)) # Output: 11223\nprint(count_variable(3,0,1,0)) # Output: 11233\nprint(count_variable(1,1,2,1)) # Output: 1223\nprint(count_variable(1,1,1,2)) # Output: 1223\nprint(count_variable(1,2,3,1)) # Output: 1122334\n\n# Test Cases\n# Test Case 1\n# Input: a = 1, b = 2, c = 3, d = 4\n# Output: \"111223344\"\n# Explanation: The count of elements in the array are (1, 2, 3, 4) respectively.\n# So the function should repeat the elements as follows: 1, 1,",
        "generated_testcode": "assert count_variable([1,2,3,4,5], 1,2,3) == [1, 1, 1, 2, 2, 2, 3, 3, 3]\n",
        "test": "assert count_variable(4,2,0,-2)==['p', 'p', 'p', 'p', 'q', 'q'] \nassert count_variable(0,1,2,3)==['q', 'r', 'r', 's', 's', 's'] \nassert count_variable(11,15,12,23)==['p', 'p', 'p', 'p', 'p', 'p', 'p', 'p', 'p', 'p', 'p', 'q', 'q', 'q', 'q', 'q', 'q', 'q', 'q', 'q', 'q', 'q', 'q', 'q', 'q', 'q', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's']",
        "canonical_solution": "from collections import Counter\r\ndef count_variable(a,b,c,d):\r\n  c = Counter(p=a, q=b, r=c, s=d)\r\n  return list(c.elements())"
    },
    {
        "number": 811,
        "prompt": "Write a function to check if two lists of tuples are identical or not.\ndef check_identical(test_list1, test_list2):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    # If the length of the two lists is not same, they cannot be identical.\n    if len(test_list1) != len(test_list2):\n        return False\n    \n    # Sort the two lists and then compare each element in both lists.\n    test_list1.sort()\n    test_list2.sort()\n    \n    for i in range(len(test_list1)):\n        if test_list1[i] != test_list2[i]:\n            return False\n    \n    return True\n\n# Test the function with two lists of tuples.\ntest_list1 = [(1, 2), (3, 4), (5, 6)]\ntest_list2 = [(5, 6), (3, 4), (1, 2)]\ntest_list3 = [(1, 2), (3, 4), (5, 7)]\n\nprint(check_identical(test_list1, test_list2)) # Output: True\nprint(check_identical(test_list1, test_list3)) # Output: False",
        "generated_testcode": "assert check_identical([(1, 2, 3), (4, 5, 6)], [(1, 2, 3), (4, 5, 6)]) == True\n",
        "test": "assert check_identical([(10, 4), (2, 5)], [(10, 4), (2, 5)]) == True\nassert check_identical([(1, 2), (3, 7)], [(12, 14), (12, 45)]) == False\nassert check_identical([(2, 14), (12, 25)], [(2, 14), (12, 25)]) == True",
        "canonical_solution": "def check_identical(test_list1, test_list2):\r\n  res = test_list1 == test_list2\r\n  return (res) "
    },
    {
        "number": 812,
        "prompt": "Write a function to abbreviate 'road' as 'rd.' in a given string.\ndef road_rd(street):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    if 'road' in street:\n        return street.replace('road', 'rd.')\n    return street\n\n# Test cases\nprint(road_rd('123 Main Road')) # Should return '123 Main rd.'\nprint(road_rd('Highway 51')) # Should return 'Highway 51'\nprint(road_rd('')) # Should return ''\nprint(road_rd('North River Road')) # Should return 'North River rd.' ",
        "generated_testcode": "assert road_rd(\"123 Main Street\") == \"123 Main Rd.\"\n",
        "test": "assert road_rd(\"ravipadu Road\")==('ravipadu Rd.')\nassert road_rd(\"palnadu Road\")==('palnadu Rd.')\nassert road_rd(\"eshwar enclave Road\")==('eshwar enclave Rd.')",
        "canonical_solution": "import re\r\ndef road_rd(street):\r\n  return (re.sub('Road$', 'Rd.', street))"
    },
    {
        "number": 813,
        "prompt": "Write a function to find length of the string.\ndef string_length(str1):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    return len(str1)\n\n#Test the function\nprint(string_length(\"Hello World\"))\n\n#Write a function to find the length of the list.\ndef list_length(lst):\n    return len(lst)\n\n#Test the function\nprint(list_length([1,2,3,4,5,6,7,8,9]))\n\n#Write a function to find the sum of the numbers in the list.\ndef list_sum(lst):\n    return sum(lst)\n\n#Test the function\nprint(list_sum([1,2,3,4,5,6,7,8,9]))\n\n#Write a function to find the maximum number in the list.\ndef max_num(lst):\n    return max(lst)\n\n#Test the function\nprint(max_num([1,2,3,4,5,6,7,8,9]))\n\n#Write a function to find the minimum number in the list.\ndef min_num(lst):\n    return min(lst)\n\n#Test the function\nprint(min_num([1,2,3,4,5,6,7,8,9]))\n\n#Write a function to find the average of the numbers in the list.\ndef avg(lst):\n    return sum(lst)/len(lst)\n\n#Test the function\nprint(avg([1,2,3,4,5,6,7,8,9]))\n\n#Write a function to find the product of the numbers in the list.",
        "generated_testcode": "assert string_length(\"Hello World\") == 11\n",
        "test": "assert string_length('python')==6\nassert string_length('program')==7\nassert string_length('language')==8",
        "canonical_solution": "def string_length(str1):\r\n    count = 0\r\n    for char in str1:\r\n        count += 1\r\n    return count"
    },
    {
        "number": 814,
        "prompt": "Write a function to find the area of a rombus.\ndef rombus_area(p,q):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    #Calculate the area of a rombus based on its perimeter and the length of its diagonal\n    s = (p**2 + q**2)**0.5\n    area = (s**2)/2\n    return area\n\n# Test the function\nprint(rombush_area(10,8)) # should return 32.0\nprint(rombush_area(6,12)) # should return 36.0\nprint(rombush_area(8,20)) # should return 48.0\n\n# Write a function to find the area of a circle\ndef circle_area(r):\n    #Calculate the area of a circle based on its radius\n    area = 3.14 * r ** 2\n    return area\n\n# Test the function\nprint(circle_area(5)) # should return 78.5\nprint(circle_area(3)) # should return 72.8\nprint(circle_area(8)) # should return 201.06\n\n# Write a function to find the volume of a sphere\ndef sphere_volume(r):\n    #Calculate the volume of a sphere based on its radius\n    volume = (4/3) * 3.14 * r ** 3\n    return volume\n\n# Test the function\nprint(sphere_volume(5)) # should return 523.6\nprint(sphere_volume(3)) # should return 1130.7\nprint(sphere_volume(8",
        "generated_testcode": "assert rombus_area(5, 7) == 25\n",
        "test": "assert rombus_area(10,20)==100\nassert rombus_area(10,5)==25\nassert rombus_area(4,2)==4",
        "canonical_solution": "def rombus_area(p,q):\r\n  area=(p*q)/2\r\n  return area"
    },
    {
        "number": 815,
        "prompt": "Write a function to sort the given array without using any sorting algorithm. the given array consists of only 0, 1, and 2.\ndef sort_by_dnf(arr, n):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    zero_count = 0\n    one_count = 0\n    two_count = 0\n\n    # Count the occurrences of 0, 1, and 2 in the array\n    for i in range(n):\n        if arr[i] == 0:\n            zero_count += 1\n        elif arr[i] == 1:\n            one_count += 1\n        else:\n            two_count += 1\n\n    # Arrange the array such that all the zeros come first, then ones, and then twos\n    for i in range(n):\n        if i < zero_count:\n            arr[i] = 0\n        elif i < zero_count + one_count:\n            arr[i] = 1\n        else:\n            arr[i] = 2\n\n\n\n# Test the function\narr = [0, 2, 1, 2, 0, 1, 1, 2, 0, 0, 1, 1, 0]\nn = len(arr)\nsort_by_dnf(arr, n)\nprint(\"Sorted array is:\", arr)\n\n# Output: Sorted array is: [0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 2, 2, 2]\n",
        "generated_testcode": "assert sort_by_dnf(arr=[0, 1, 2, 0, 2, 1, 1, 2, 0, 1, 2, 0, 0], n=9) == [0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2]\n",
        "test": "assert sort_by_dnf([1,2,0,1,0,1,2,1,1], 9) == [0, 0, 1, 1, 1, 1, 1, 2, 2]\nassert sort_by_dnf([1,0,0,1,2,1,2,2,1,0], 10) == [0, 0, 0, 1, 1, 1, 1, 2, 2, 2]\nassert sort_by_dnf([2,2,1,0,0,0,1,1,2,1], 10) == [0, 0, 0, 1, 1, 1, 1, 2, 2, 2]",
        "canonical_solution": "def sort_by_dnf(arr, n):\r\n  low=0\r\n  mid=0\r\n  high=n-1\r\n  while mid <= high:\r\n    if arr[mid] == 0:\r\n      arr[low], arr[mid] = arr[mid], arr[low]\r\n      low = low + 1\r\n      mid = mid + 1\r\n    elif arr[mid] == 1:\r\n      mid = mid + 1\r\n    else:\r\n      arr[mid], arr[high] = arr[high], arr[mid]\r\n      high = high - 1\r\n  return arr"
    },
    {
        "number": 816,
        "prompt": "Write a function to clear the values of the given tuples.\ndef clear_tuple(test_tup):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    result = ()\n    for i in test_tup:\n        if i is not None:\n            result += (None,)\n        else:\n            result += (i,)\n    return result\n\n\n# Test the function with the following tuples\nprint(clear_tuple((1, 2, 3, None, 4, None, 5)) == (None, None, None, None, None, None))  # Output: True\nprint(clear_tuple((1, 2, None, None, 3, None, 4, 5) == (1, 2, None, None, 3, None, 4)) # Output: False\nprint(clear_tuple((None, 1, None, 2, 3) == (None, None, None, 2)) # Output: False\nprint(clear_tuple((None, None, None) == (None, None, None) # Output: True\nprint(clear_tuple((1,) == (1,) # Output: False\nprint(clear_tuple((None,) == (None,) # Output: True ",
        "generated_testcode": "assert clear_tuple((1, 2, 3, 4, 5, 6, 7, 8, 9, 10) == ())\n",
        "test": "assert clear_tuple((1, 5, 3, 6, 8)) == ()\nassert clear_tuple((2, 1, 4 ,5 ,6)) == ()\nassert clear_tuple((3, 2, 5, 6, 8)) == ()",
        "canonical_solution": "def clear_tuple(test_tup):\r\n  temp = list(test_tup)\r\n  temp.clear()\r\n  test_tup = tuple(temp)\r\n  return (test_tup) "
    },
    {
        "number": 817,
        "prompt": "Write a function to find numbers divisible by m or n from a list of numbers using lambda function.\ndef div_of_nums(nums,m,n):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    return list(filter(lambda x:x%m==0 or x%n==0,nums))\n\n#Example usage:\nprint(div_of_nums([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16],3,5)) # Output: [3, 6, 9, 12, 15]\nprint(div_of_nums([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16],2,7)) # Output: [2, 4, 6, 8, 14]\nprint(div_of_nums([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16],17,21)) # Output: []\n\n# You can test the function with other test cases too. ",
        "generated_testcode": "assert div_of_nums(range(1,20),3,5) == [3, 6, 9, 12, 15, 18]\n",
        "test": "assert div_of_nums([19, 65, 57, 39, 152, 639, 121, 44, 90, 190],19,13)==[19, 65, 57, 39, 152, 190]\nassert div_of_nums([1, 2, 3, 5, 7, 8, 10],2,5)==[2, 5, 8, 10]\nassert div_of_nums([10,15,14,13,18,12,20],10,5)==[10, 15, 20]",
        "canonical_solution": "def div_of_nums(nums,m,n):\r\n result = list(filter(lambda x: (x % m == 0 or x % n == 0), nums)) \r\n return result"
    },
    {
        "number": 818,
        "prompt": "Write a python function to count lower case letters in a given string.\ndef lower_ctr(str):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    count = 0\n    for i in str:\n        if i.islower():\n            count += 1\n    return count\n\n# test the function\nprint(lower_ctr(\"Hello World\")) # output: 10\nprint(lower_ctr(\"Python Programming\")) # output: 11\nprint(lower_ctr(\"HELLO WORLD\")) # output: 0\nprint(lower_ctr(\"Python 3.6\")) # output: 7 ",
        "generated_testcode": "assert lower_ctr(\"Hello World\") == 10\n",
        "test": "assert lower_ctr('abc') == 3\nassert lower_ctr('string') == 6\nassert lower_ctr('Python') == 5",
        "canonical_solution": "def lower_ctr(str):\r\n      lower_ctr= 0\r\n      for i in range(len(str)):\r\n          if str[i] >= 'a' and str[i] <= 'z': lower_ctr += 1     \r\n      return  lower_ctr"
    },
    {
        "number": 819,
        "prompt": "Write a function to count the frequency of consecutive duplicate elements in a given list of numbers.\ndef count_duplic(lists):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    count = 0\n    temp = None\n    for num in lists:\n        if num == temp:\n            count += 1\n        else:\n            if count > 0:\n                print(temp, count)\n            temp = num\n            count = 1\n    if count > 0:\n        print(temp, count)\n\n# Test the function with the given example\ncount_duplic([1, 2, 2, 3, 3, 3, 4, 5, 5, 5, 5, 5, 6, 6, 7, 8, 8, 8, 8, 9, 9])\n# Output: 1 1\n#         2 2\n#         3 3\n#         5 3\n#         6 2\n#         8 3\n#         9 2\n# This function prints the number and its frequency when it encounters the first occurrence of a consecutive sequence of duplicate elements\n# and then starts counting the next sequence.\n\n# Explanation:\n# The function initializes a count variable to 0 and a temporary variable to None. It then iterates through the list.\n# If the current number is equal to the temporary variable, it means it is the start of a consecutive sequence of duplicates, so it increments the count variable.\n# If the current number is not equal to the temporary variable, it means we have just finished a sequence of duplicates. We print the count and update the temporary variable\n# with the current number. Then we set the count to ",
        "generated_testcode": "assert count_duplic([1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1",
        "test": "assert count_duplic([1,2,2,2,4,4,4,5,5,5,5])==([1, 2, 4, 5], [1, 3, 3, 4])\nassert count_duplic([2,2,3,1,2,6,7,9])==([2, 3, 1, 2, 6, 7, 9], [2, 1, 1, 1, 1, 1, 1])\nassert count_duplic([2,1,5,6,8,3,4,9,10,11,8,12])==([2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])",
        "canonical_solution": "def count_duplic(lists):\r\n    element = []\r\n    frequency = []\r\n    if not lists:\r\n        return element\r\n    running_count = 1\r\n    for i in range(len(lists)-1):\r\n        if lists[i] == lists[i+1]:\r\n            running_count += 1\r\n        else:\r\n            frequency.append(running_count)\r\n            element.append(lists[i])\r\n            running_count = 1\r\n    frequency.append(running_count)\r\n    element.append(lists[i+1])\r\n    return element,frequency\r\n"
    },
    {
        "number": 820,
        "prompt": "Write a function to check whether the given month number contains 28 days or not.\ndef check_monthnum_number(monthnum1):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    if monthnum1 == 2:\n        return True\n    elif monthnum1 == 4 or monthnum1 == 6 or monthnum1 == 9 or monthnum1 == 11:\n        return True\n    else:\n        return False\n\n# function to check whether the given month is a leap year or not\ndef check_leap_year(year):\n    if year % 4 == 0:\n        if year % 100 == 0:\n            if year % 4000 == 0:\n                return True\n            else:\n                return False\n        else:\n            return True\n    else:\n        return False\n\n# function to check whether the given day number is valid or not\ndef check_daynum(monthnum, daynum):\n    if check_monthnum_number(monthnum):\n        if daynum <= 30:\n            return True\n        else:\n            return False\n    elif monthnum == 2:\n        if check_leap_year(year):\n            if daynum <= 29:\n                return True\n            else:\n                return False\n        else:\n            if daynum <= 28:\n                return True\n            else:\n                return False\n    else:\n        if daynum <= 31:\n            return True\n        else:\n            return False\n\n# function to convert month number to month name\ndef monthnum_to_monthname(monthnum):\n    if monthnum == 1:\n        return \"January\"",
        "generated_testcode": "assert check_monthnum_number(2) == True\n",
        "test": "assert check_monthnum_number(2)==True\nassert check_monthnum_number(1)==False\nassert check_monthnum_number(3)==False",
        "canonical_solution": "def check_monthnum_number(monthnum1):\r\n  if monthnum1 == 2:\r\n    return True\r\n  else:\r\n    return False"
    },
    {
        "number": 821,
        "prompt": "Write a function to merge two dictionaries into a single expression.\ndef merge_dictionaries(dict1,dict2):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    return dict(dict1.items() | dict2.items())\n    \n# Test the function with two dictionaries\ndict1 = {'a': 1, 'b': 2}\ndict2 = {'c': 3, 'd': 4}\nprint(merge_dictionaries(dict1,dict2)) # output: {'a': 1, 'b': 2, 'c': 3, 'd': 4}\n\ndict3 = {'e': 5, 'f': 6}\nprint(merge_dictionaries(dict1,dict3)) # output: {'a': 1, 'b': 2, 'e': 5, 'f': 6}\nprint(merge_dictionaries(dict2,dict3)) # output: {'c': 3, 'd': 4, 'e': 5, 'f': 6}\n\n# This function will merge the two dictionaries by combining them and returning a new dictionary ",
        "generated_testcode": "assert merge_dictionaries({'a':1,'b':2},{'c':3,'d':4}) == {'a':1,'b':2,'c':3,'d':4}\n",
        "test": "assert merge_dictionaries({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" }, { \"G\": \"Green\", \"W\": \"White\" })=={'B': 'Black', 'R': 'Red', 'P': 'Pink', 'G': 'Green', 'W': 'White'}\nassert merge_dictionaries({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" },{ \"O\": \"Orange\", \"W\": \"White\", \"B\": \"Black\" })=={'O': 'Orange', 'P': 'Pink', 'B': 'Black', 'W': 'White', 'R': 'Red'}\nassert merge_dictionaries({ \"G\": \"Green\", \"W\": \"White\" },{ \"O\": \"Orange\", \"W\": \"White\", \"B\": \"Black\" })=={'W': 'White', 'O': 'Orange', 'G': 'Green', 'B': 'Black'}",
        "canonical_solution": "import collections as ct\r\ndef merge_dictionaries(dict1,dict2):\r\n    merged_dict = dict(ct.ChainMap({}, dict1, dict2))\r\n    return merged_dict"
    },
    {
        "number": 822,
        "prompt": "Write a function to return true if the password is valid.\ndef pass_validity(p):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": true,
        "answer": "    if len(p) >= 8:\n        if any(char.isdigit() for char in p):\n            if any(char.isupper() for char in p):\n                if any(char.islower() for char in p):\n                    return True\n    return False\n\n# Test cases\nprint(pass_validity(\"Aa123456789\")) # True\nprint(pass_validity(\"Aa\")) # False\nprint(pass_validity(\"123456789\")) # False\nprint(pass_validity(\"aB1\")) # True\nprint(pass_validity(\"ABcd1234\")) # True\nprint(pass_validity(\"Abcdefghi\")) # False\nprint(pass_validity(\"ABCDEFGHI\")) # False\nprint(pass_validity(\"Ab1\")) # True\nprint(pass_validity(\"aB123456789\")) # True\nprint(pass_validity(\"abcdefgh\")) # False\nprint(pass_validity(\"aBcdefGh1\")) # True\nprint(pass_validity(\"1234567890\")) # True ",
        "generated_testcode": "assert pass_validity(\"Abc12345\") == True\n",
        "test": "assert pass_validity(\"password\")==False\nassert pass_validity(\"Password@10\")==True\nassert pass_validity(\"password@10\")==False",
        "canonical_solution": "import re\r\ndef pass_validity(p):\r\n x = True\r\n while x:  \r\n    if (len(p)<6 or len(p)>12):\r\n        break\r\n    elif not re.search(\"[a-z]\",p):\r\n        break\r\n    elif not re.search(\"[0-9]\",p):\r\n        break\r\n    elif not re.search(\"[A-Z]\",p):\r\n        break\r\n    elif not re.search(\"[$#@]\",p):\r\n        break\r\n    elif re.search(\"\\s\",p):\r\n        break\r\n    else:\r\n        return True\r\n        x=False\r\n        break\r\n\r\n if x:\r\n    return False"
    },
    {
        "number": 823,
        "prompt": "Write a function to check if the given string starts with a substring using regex.\ndef check_substring(string, sample) : \n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    if re.match(\"^\" + sample, string) : \n        return True\n    return False\n\n# Example usage:\nstring = \"Hello World\"\nsample = \"He\"\nif check_substring(string, sample) : \n    print(\"String starts with the given sample\")\nelse : \n    print(\"String does not start with the given sample\") ",
        "generated_testcode": "assert check_substring(\"hello world\", \"hello\") == True\n",
        "test": "assert check_substring(\"dreams for dreams makes life fun\", \"makes\") == 'string doesnt start with the given substring'\nassert check_substring(\"Hi there how are you Hi alex\", \"Hi\") == 'string starts with the given substring'\nassert check_substring(\"Its been a long day\", \"been\") == 'string doesnt start with the given substring'",
        "canonical_solution": "import re \r\ndef check_substring(string, sample) : \r\n  if (sample in string): \r\n      y = \"\\A\" + sample \r\n      x = re.search(y, string) \r\n      if x : \r\n          return (\"string starts with the given substring\") \r\n      else : \r\n          return (\"string doesnt start with the given substring\") \r\n  else : \r\n      return (\"entered string isnt a substring\")"
    },
    {
        "number": 824,
        "prompt": "Write a python function to remove even numbers from a given list.\ndef remove_even(l):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    return [num for num in l if num % 2 != 0]\n\n\n# Test the function with an example list\nprint(remove_even([1, 2, 4, 5, 6, 7, 8, 9]))  # Output: [1, 5, 7]\n\n# Test the function with an empty list\nprint(remove_even([]))  # Output: []\n\n# Test the function with a list containing a single even number\nprint(remove_even([2]))  # Output: []\n\n# Test the function with a list containing only even numbers\nprint(remove_even([2, 4, 6, 8]))  # Output: []\n\n# Test the function with a list containing both even and odd numbers\nprint(remove_even([2, 3, 4, 5, 6, 7, 8]))  # Output: [3] ",
        "generated_testcode": "assert remove_even([1, 2, 3, 4, 5, 6, 7, 8, 9]) == [1, 3, 5, 7]\n",
        "test": "assert remove_even([1,3,5,2]) == [1,3,5]\nassert remove_even([5,6,7]) == [5,7]\nassert remove_even([1,2,3,4]) == [1,3]",
        "canonical_solution": "def remove_even(l):\r\n    for i in l:\r\n        if i % 2 == 0:\r\n            l.remove(i)\r\n    return l"
    },
    {
        "number": 825,
        "prompt": "Write a python function to access multiple elements of specified index from a given list.\ndef access_elements(nums, list_index):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    result = []\n    for i in list_index:\n        if i >= len(nums):\n            result.append(None)\n        else:\n            result.append(nums[i])\n    return result\n\n\nnums = [1, 2, 3, 4, 5, 6, 7, 8, 9]\nlist_index = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nprint(access_elements(nums, list_index)) # output should be [1, 2, 3, 4, 5, 6, 7, 8, 9, None, None]\n\nnums = [10, 20, 30, 40, 50, 60]\nlist_index = [0, 2, 4, 6]\nprint(access_elements(nums, list_index)) # output should be [10, 30, 50, None] ",
        "generated_testcode": "assert access_elements([1, 2, 3, 4, 5, 6, 7, 8, 9], [0, 2, 4, 6]) == [1, 3, 5, 7]\n",
        "test": "assert access_elements([2,3,8,4,7,9],[0,3,5]) == [2, 4, 9]\nassert access_elements([1, 2, 3, 4, 5],[1,2]) == [2,3]\nassert access_elements([1,0,2,3],[0,1]) == [1,0]",
        "canonical_solution": "def access_elements(nums, list_index):\r\n    result = [nums[i] for i in list_index]\r\n    return result"
    },
    {
        "number": 826,
        "prompt": "Write a python function to find the type of triangle from the given sides.\ndef check_Type_Of_Triangle(a,b,c): \n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    if a+b>c and a+c>b and b+c>a: \n        if a==b==c: \n            return(\"Equilateral Triangle\") \n        elif a!=b and b!=c and c!=a: \n            return(\"Scalene Triangle\") \n        else: \n            return(\"Isosceles Triangle\") \n    else: \n        return(\"Not a Triangle\") \na=int(input(\"Enter the side of triangle a: \")) \nb=int(input(\"Enter the side of triangle b: \"): \nc=int(input(\"Enter the side of triangle c: \")) \nresult=check_Type_Of_Triangle(a,b,c) \nprint(\"The type of triangle is:\", result) ",
        "generated_testcode": "assert check_Type_Of_Triangle(3,4,5) == \"Isosceles\"\n",
        "test": "assert check_Type_Of_Triangle(1,2,3) == \"Obtuse-angled Triangle\"\nassert check_Type_Of_Triangle(2,2,2) == \"Acute-angled Triangle\"\nassert check_Type_Of_Triangle(1,0,1) == \"Right-angled Triangle\"",
        "canonical_solution": "def check_Type_Of_Triangle(a,b,c): \r\n    sqa = pow(a,2) \r\n    sqb = pow(b,2) \r\n    sqc = pow(c,2) \r\n    if (sqa == sqa + sqb or sqb == sqa + sqc or sqc == sqa + sqb): \r\n        return (\"Right-angled Triangle\") \r\n    elif (sqa > sqc + sqb or sqb > sqa + sqc or sqc > sqa + sqb): \r\n        return (\"Obtuse-angled Triangle\") \r\n    else: \r\n        return (\"Acute-angled Triangle\") "
    },
    {
        "number": 827,
        "prompt": "Write a function to sum a specific column of a list in a given list of lists.\ndef sum_column(list1, C):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": true,
        "answer": "    result = 0\n    for row in list1:\n        result += row[C]\n    return result\n\n# Example usage:\nlist1 = [[1,2,3],[4,5,6],[7,8,9]]\nprint(sum_column(list1, 1)) # Output: 15\n\n# This function takes a list of lists and a column index (C) and returns the sum of the values in that column. ",
        "generated_testcode": "assert sum_column([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 1) == 15\n",
        "test": "assert sum_column( [[1,2,3,2],[4,5,6,2],[7,8,9,5],],0)==12\nassert sum_column( [[1,2,3,2],[4,5,6,2],[7,8,9,5],],1)==15\nassert sum_column( [[1,2,3,2],[4,5,6,2],[7,8,9,5],],3)==9",
        "canonical_solution": "def sum_column(list1, C):\r\n    result = sum(row[C] for row in list1)\r\n    return result"
    },
    {
        "number": 828,
        "prompt": "Write a function to count alphabets,digits and special charactes in a given string.\ndef count_alpha_dig_spl(string):\n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    alpha = 0\n    dig = 0\n    spl = 0\n    for i in string:\n        if i.isalpha():\n            alpha += 1\n        elif i.isdigit():\n            dig += 1\n        else:\n            spl += 1\n    return alpha,dig,spl\n\n# Testing the function\nstring = \"Hello123,world!\"\na,d,s = count_alpha_dig_spl(string)\nprint(\"Alphabets:\",a)\nprint(\"Digits:\",d)\nprint(\"Special Characters:\",s)\n\n# Output:\n# Alphabets: 10\n# Digits: 3\n# Special Characters: 3\n\n# Example 2:\n# Testing the function with empty string\nstring = \"\"\na,d,s = count_alpha_dig_spl(string)\nprint(\"Alphabets:\",a)\nprint(\"Digits:\",d)\nprint(\"Special Characters:\",s)\n\n# Output:\n# Alphabets: 0\n# Digits: 0\n# Special Characters: 0 ",
        "generated_testcode": "assert count_alpha_dig_spl(\"Hello123\") == (5, 3, 0)\n",
        "test": "assert count_alpha_dig_spl(\"abc!@#123\")==(3,3,3)\nassert count_alpha_dig_spl(\"dgsuy@#$%&1255\")==(5,4,5)\nassert count_alpha_dig_spl(\"fjdsif627348#%$^&\")==(6,6,5)",
        "canonical_solution": "def count_alpha_dig_spl(string):\r\n  alphabets=digits = special = 0\r\n  for i in range(len(string)):\r\n    if(string[i].isalpha()):\r\n        alphabets = alphabets + 1\r\n    elif(string[i].isdigit()):\r\n        digits = digits + 1\r\n    else:\r\n        special = special + 1\r\n  return (alphabets,digits,special)   "
    },
    {
        "number": 829,
        "prompt": "Write a function to find out the second most repeated (or frequent) string in the given sequence.\ndef second_frequent(input): \n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    from collections import Counter\n    #using Counter method to count frequency of each string\n    count = Counter(input)\n    #creating a list of tuples with frequency and string\n    freq = [(count[key], key) for key in count]\n    #sorting the list in descending order\n    freq.sort(reverse=True)\n    #returning the second most repeated string\n    return freq[1][1]\n\n#input sequence\ninput = [\"hello\", \"world\", \"python\", \"python\", \"python\", \"world\", \"java\", \"java\", \"hello\", \"python\"]\n#calling the function and printing the result\nprint(second_frequent(input))\n\n#Output: \"python\" ",
        "generated_testcode": "assert second_frequent(\"hello world\") == \"l\"\n",
        "test": "assert second_frequent(['aaa','bbb','ccc','bbb','aaa','aaa']) == 'bbb'\nassert second_frequent(['abc','bcd','abc','bcd','bcd','bcd']) == 'abc'\nassert second_frequent(['cdma','gsm','hspa','gsm','cdma','cdma']) == 'gsm'",
        "canonical_solution": "from collections import Counter \r\n\t\r\ndef second_frequent(input): \r\n\tdict = Counter(input) \r\n\tvalue = sorted(dict.values(), reverse=True)  \r\n\tsecond_large = value[1] \r\n\tfor (key, val) in dict.items(): \r\n\t\tif val == second_large: \r\n\t\t\treturn (key) "
    },
    {
        "number": 830,
        "prompt": "Write a function to round up a number to specific digits.\ndef round_up(a, digits):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    result = 10**digits\n    return int(a * result + 0.5) / result\n\n# Example usage:\nprint(round_up(2.55555, 2)) # Output: 2.56\nprint(round_up(2.33333, 3)) # Output: 2.334\nprint(round_up(2.3333, 1)) # Output: 2.3\nprint(round_up(2.3333, 0)) # Output: 2.0\nprint(round_up(2.676, 1)) # Output: 2.7\n",
        "generated_testcode": "assert round_up(12345, 2) == 1200\n",
        "test": "assert round_up(123.01247,0)==124\nassert round_up(123.01247,1)==123.1\nassert round_up(123.01247,2)==123.02",
        "canonical_solution": "import math\r\ndef round_up(a, digits):\r\n    n = 10**-digits\r\n    return round(math.ceil(a / n) * n, digits)"
    },
    {
        "number": 831,
        "prompt": "Write a python function to count equal element pairs from the given array.\ndef count_Pairs(arr,n): \n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    count = 0\n    for i in range(n): \n        for j in range(i+1,n): \n            if arr[i] == arr[j]: \n                count += 1\n    return count \n\n#Example Usage:\narr = [1, 2, 3, 4, 3, 5, 6, 7, 7, 8, 8, 8] \nn = len(arr) \nprint(count_Pairs(arr,n)) # Output: 3\n\n# Time Complexity: O(n^2) ",
        "generated_testcode": "assert count_Pairs([1,2,3,4,5,6,7,8,9,10], 10) == 0\n",
        "test": "assert count_Pairs([1,1,1,1],4) == 6\nassert count_Pairs([1,5,1],3) == 1\nassert count_Pairs([3,2,1,7,8,9],6) == 0",
        "canonical_solution": "def count_Pairs(arr,n): \r\n    cnt = 0; \r\n    for i in range(n): \r\n        for j in range(i + 1,n): \r\n            if (arr[i] == arr[j]): \r\n                cnt += 1; \r\n    return cnt; "
    },
    {
        "number": 832,
        "prompt": "Write a function to extract the maximum numeric value from a string by using regex.\ndef extract_max(input): \n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    # Convert all non-numeric characters to spaces and split the string into a list\n    input = re.sub(r'\\D', ' ', input)\n    nums = input.split()\n    # Convert the list of strings into a list of integers\n    nums = [int(num) for num in nums]\n    # Find the maximum value in the list\n    max_num = max(nums)\n    # Return the maximum value\n    return max_num\n\n# Test the function with an example\ninput_str = \"The price of the car is $15,0000 and the speed is 120 km/h\"\nprint(extract_max(input_str)) # Output: 150000\n\ninput_str = \"The population is 10,000,0000 and the temperature is -10 degrees Celsius\"\nprint(extract_str(input_str)) # Output: 1000000000\n\ninput_str = \"The price of the car is $15,000 and the speed is 120 km/h\"\nprint(extract_max(input_str)) # Output: 15000 ",
        "generated_testcode": "assert extract_max(\"The maximum value is 99\") == 99\n",
        "test": "assert extract_max('100klh564abc365bg') == 564\nassert extract_max('hello300how546mer231') == 546\nassert extract_max('its233beenalong343journey234') == 343",
        "canonical_solution": "import re \r\ndef extract_max(input): \r\n\tnumbers = re.findall('\\d+',input) \r\n\tnumbers = map(int,numbers) \r\n\treturn max(numbers)"
    },
    {
        "number": 833,
        "prompt": "Write a function to get dictionary keys as a list.\ndef get_key(dict): \n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    return list(dict.keys()) ",
        "generated_testcode": "assert get_key({'a': 1, 'b': 2, 'c': 3}) == ['a', 'b', 'c']\n",
        "test": "assert get_key({1:'python',2:'java'})==[1,2]\nassert get_key({10:'red',20:'blue',30:'black'})==[10,20,30]\nassert get_key({27:'language',39:'java',44:'little'})==[27,39,44]",
        "canonical_solution": "def get_key(dict): \r\n    list = [] \r\n    for key in dict.keys(): \r\n        list.append(key)           \r\n    return list"
    },
    {
        "number": 834,
        "prompt": "Write a function to generate a square matrix filled with elements from 1 to n raised to the power of 2 in spiral order.\ndef generate_matrix(n):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    # create a matrix filled with 0s\n    matrix = [[0 for x in range(n)] for y in range(n)]\n    \n    # variables to keep track of the boundaries of the matrix\n    top, bottom, left, right = 0, n - 1, 0, n - 1\n    \n    # variables to keep track of the current position in the matrix\n    i, j = 0, 0\n    \n    # variables to keep track of the direction we're moving in\n    direction = 0 # 0: right, 1: down, 2: left, 3: up\n    \n    # loop through the matrix while there are still elements to fill\n    while top <= bottom and left <= right:\n        # fill the current position with the next element\n        matrix[i][j] = (i - top) * n + j - left + 1\n        \n        # move in the current direction\n        if direction == 0:\n            j += 1\n        elif direction == 1:\n            i += 1\n        elif direction == 2:\n            j -= 1\n        elif direction == 3:\n            i -= 1\n        \n        # check if we need to change direction\n        if (direction == 0 and j == right) or (direction == 1 and i == bottom) or (direction == 2 and j == left) or (direction == 3 and i == top):\n            # change direction\n            direction = (direction + 1) % 4\n            \n            # adjust the",
        "generated_testcode": "assert generate_matrix(3) == [[1, 2, 3], [8, 9, 4], [7, 6, 5]]\n",
        "test": "assert generate_matrix(3)==[[1, 2, 3], [8, 9, 4], [7, 6, 5]] \nassert generate_matrix(2)==[[1,2],[4,3]]\nassert generate_matrix(7)==[[1, 2, 3, 4, 5, 6, 7], [24, 25, 26, 27, 28, 29, 8], [23, 40, 41, 42, 43, 30, 9], [22, 39, 48, 49, 44, 31, 10], [21, 38, 47, 46, 45, 32, 11], [20, 37, 36, 35, 34, 33, 12], [19, 18, 17, 16, 15, 14, 13]]",
        "canonical_solution": "def generate_matrix(n):\r\n        if n<=0:\r\n            return [] \r\n        matrix=[row[:] for row in [[0]*n]*n]        \r\n        row_st=0\r\n        row_ed=n-1        \r\n        col_st=0\r\n        col_ed=n-1\r\n        current=1        \r\n        while (True):\r\n            if current>n*n:\r\n                break\r\n            for c in range (col_st, col_ed+1):\r\n                matrix[row_st][c]=current\r\n                current+=1\r\n            row_st+=1\r\n            for r in range (row_st, row_ed+1):\r\n                matrix[r][col_ed]=current\r\n                current+=1\r\n            col_ed-=1\r\n            for c in range (col_ed, col_st-1, -1):\r\n                matrix[row_ed][c]=current\r\n                current+=1\r\n            row_ed-=1\r\n            for r in range (row_ed, row_st-1, -1):\r\n                matrix[r][col_st]=current\r\n                current+=1\r\n            col_st+=1\r\n        return matrix"
    },
    {
        "number": 835,
        "prompt": "Write a python function to find the slope of a line.\ndef slope(x1,y1,x2,y2): \n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    m = (y2-y1)/(x2-x1)\n    return m\n\n#function to find the equation of a line\ndef equation(x1,y1,x2,y2,m):\n    y_intercept = y1 - m*x1\n    print(\"The equation of the line is: y = \"+ str(m)+\"x + \"+str(y_intercept))\n    \nx1 = float(input(\"Enter the x-coordinate of the first point: \"))\ny1 = float(input(\"Enter the y-coordinate of the first point: \"): \nx2 = float(input(\"Enter the x-coordinate of the second point: \"))\ny2 = float(input(\"Enter the y-coordinate of the second point: \"))\n\nslope_val = slope(x1,y1,x2,y2)\nequation(x1,y1,x2,y2,slope_val)\n",
        "generated_testcode": "assert slope(0,0,3,4) == 1\n",
        "test": "assert slope(4,2,2,5) == -1.5\nassert slope(2,4,4,6) == 1\nassert slope(1,2,4,2) == 0",
        "canonical_solution": "def slope(x1,y1,x2,y2): \r\n    return (float)(y2-y1)/(x2-x1)  "
    },
    {
        "number": 836,
        "prompt": "Write a function to find length of the subarray having maximum sum.\ndef max_sub_array_sum(a,size): \n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    max_so_far = a[0] \n    max_ending_here = a[0] \n      \n    for i in range(1, size): \n        max_ending_here = max(max_ending_here + a[i], a[i]) \n        max_so_far = max(max_so_far, max_ending_here) \n          \n    return max_so_far \n      \ndef find_subarray(a, size): \n    max_so_far = a[0] \n    max_ending_here = a[0] \n    start = 0\n    end = 0\n    s = 0\n    for i in range(1, size): \n        if max_ending_here < 0: \n            max_ending_here = a[i] \n            start = i \n        else: \n            max_ending_here += a[i] \n              \n        if max_ending_her > max_so_far: \n            max_so_far = max_ending_here \n            end = i \n          \n    if max_so_far == 0: \n        return (0, 0) \n    else: \n        return (start, end) \n  \n# Driver code \na = [-2, -3, 4, -1, -2, 1, 5, -3] \nsize = len(a) \nmax_sum = max_sub_array_sum",
        "generated_testcode": "assert max_sub_array_sum([1,2,3,-2,4,5,-6,7],6) == 13\n",
        "test": "assert max_sub_array_sum([-2, -3, 4, -1, -2, 1, 5, -3],8) == 5\nassert max_sub_array_sum([1, -2, 1, 1, -2, 1],6) == 2\nassert max_sub_array_sum([-1, -2, 3, 4, 5],5) == 3",
        "canonical_solution": "from sys import maxsize \r\ndef max_sub_array_sum(a,size): \r\n\tmax_so_far = -maxsize - 1\r\n\tmax_ending_here = 0\r\n\tstart = 0\r\n\tend = 0\r\n\ts = 0\r\n\tfor i in range(0,size): \r\n\t\tmax_ending_here += a[i] \r\n\t\tif max_so_far < max_ending_here: \r\n\t\t\tmax_so_far = max_ending_here \r\n\t\t\tstart = s \r\n\t\t\tend = i \r\n\t\tif max_ending_here < 0: \r\n\t\t\tmax_ending_here = 0\r\n\t\t\ts = i+1\r\n\treturn (end - start + 1)"
    },
    {
        "number": 837,
        "prompt": "Write a python function to find the cube sum of first n odd natural numbers.\ndef cube_Sum(n): \n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    sum = 0\n    for i in range(1, 2*n, 2): \n        sum += i*i*i \n    return sum \n  \nn = int(input(\"Enter the value of n: \"))\nprint(\"Cube sum of first\",n,\"odd natural numbers is\", cube_Sum(n)) ",
        "generated_testcode": "assert cube_Sum(5) == 225\n",
        "test": "assert cube_Sum(2) == 28\nassert cube_Sum(3) == 153\nassert cube_Sum(4) == 496",
        "canonical_solution": "def cube_Sum(n): \r\n    sum = 0   \r\n    for i in range(0,n) : \r\n        sum += (2*i+1)*(2*i+1)*(2*i+1) \r\n    return sum"
    },
    {
        "number": 838,
        "prompt": "Write a python function to find minimum number swaps required to make two binary strings equal.\ndef min_Swaps(s1,s2) :  \n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    n = len(s1)\n    arr1 = [0] * n\n    arr2 = [0] * n\n    for i in range(n) :\n        arr1[i] = ord(s1[i]) - ord('0')\n        arr2[i] = ord(s2[i]) - ord('0')\n    swap_count = 0\n    for i in range(n) :\n        while arr1[i] != i + 1 :\n            j = arr1[i] - 1\n            temp = arr1[i]\n            arr1[i] = arr1[j]\n            arr1[j] = temp\n            temp = arr2[i]\n            arr2[i] = arr2[j]\n            arr2[j] = temp\n            swap_count += 1\n    return swap_count\n\ns1 = input(\"Enter first binary string: \")\ns2 = input(\"Enter second binary string: \")\nprint(\"Minimum swaps required:\", min_Swaps(s1, s2))\n\n#Test case\n# Input:\n# Enter first binary string: 101\n# Enter second binary string: 110\n# Output: 2\n\n# Input:\n# Enter first binary string: 01010\n# Enter second binary string: 1010\n# Output: 0\n\n# Time Complexity: O(n)\n# Space Complexity: O(1)\n\n# Explanation: \n# The function",
        "generated_testcode": "assert min_Swaps(\"101010\",\"010101\") == 2\n",
        "test": "assert min_Swaps(\"0011\",\"1111\") == 1\nassert min_Swaps(\"00011\",\"01001\") == 2\nassert min_Swaps(\"111\",\"111\") == 0",
        "canonical_solution": "def min_Swaps(s1,s2) :  \r\n    c0 = 0; c1 = 0;  \r\n    for i in range(len(s1)) :  \r\n        if (s1[i] == '0' and s2[i] == '1') : \r\n            c0 += 1;    \r\n        elif (s1[i] == '1' and s2[i] == '0') : \r\n            c1 += 1;  \r\n    result = c0 // 2 + c1 // 2;  \r\n    if (c0 % 2 == 0 and c1 % 2 == 0) : \r\n        return result;  \r\n    elif ((c0 + c1) % 2 == 0) : \r\n        return result + 2;  \r\n    else : \r\n        return -1;  "
    },
    {
        "number": 839,
        "prompt": "Write a function to sort the tuples alphabetically by the first item of each tuple.\ndef sort_tuple(tup): \n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    return sorted(tup, key=lambda x: x[0])\n\n# example usage\nprint(sort_tuple([('apple', 2), ('banana', 3), ('cherry', 1), ('orange', 4)])) \n# Output: [('cherry', 1), ('apple', 2), ('banana', 3), ('orange', 4)] ",
        "generated_testcode": "assert sort_tuple([('apple', 2), ('banana', 3), ('orange', 1)]) == [('apple', 2), ('orange', 1), ('banana', 3)]\n",
        "test": "assert sort_tuple([(\"Amana\", 28), (\"Zenat\", 30), (\"Abhishek\", 29),(\"Nikhil\", 21), (\"B\", \"C\")]) == [('Abhishek', 29), ('Amana', 28), ('B', 'C'), ('Nikhil', 21), ('Zenat', 30)]\nassert sort_tuple([(\"aaaa\", 28), (\"aa\", 30), (\"bab\", 29), (\"bb\", 21), (\"csa\", \"C\")]) == [('aa', 30), ('aaaa', 28), ('bab', 29), ('bb', 21), ('csa', 'C')]\nassert sort_tuple([(\"Sarala\", 28), (\"Ayesha\", 30), (\"Suman\", 29),(\"Sai\", 21), (\"G\", \"H\")]) == [('Ayesha', 30), ('G', 'H'), ('Sai', 21), ('Sarala', 28), ('Suman', 29)]",
        "canonical_solution": "def sort_tuple(tup): \r\n\tn = len(tup) \r\n\tfor i in range(n): \r\n\t\tfor j in range(n-i-1): \r\n\t\t\tif tup[j][0] > tup[j + 1][0]: \r\n\t\t\t\ttup[j], tup[j + 1] = tup[j + 1], tup[j] \r\n\treturn tup"
    },
    {
        "number": 840,
        "prompt": "Write a python function to check whether the roots of a quadratic equation are numerically equal but opposite in sign or not.\ndef Check_Solution(a,b,c):  \n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    if b**2 - 4*a*c < 0: #If the discriminant is less than 0, there are no real roots\n        print(\"No real roots\")\n    elif b**2 - 4*a*c == 0: #If the discriminant is 0, there is one root\n        print(\"One root\")\n    else: #If the discriminant is greater than 0, there are two roots\n        x1 = (-b + (b**2 - 4*a*c)**0.5)/(2*a)\n        x2 = (-b - (b**2 - 4*a*c)**0.5)/(2*a)\n        if x1 == -x2:\n            print(\"Opposite in sign roots\")\n        else:\n            print(\"Not opposite in sign roots\")\n#Test case\na = 1\nb = 2\nc = 3\nCheck_Solution(a,b,c) ",
        "generated_testcode": "assert Check_Solution(1,2,-3) == True\n",
        "test": "assert Check_Solution(2,0,-1) == \"Yes\"\nassert Check_Solution(1,-5,6) == \"No\"\nassert Check_Solution(2,0,2) == \"Yes\"",
        "canonical_solution": "def Check_Solution(a,b,c):  \r\n    if b == 0:  \r\n        return (\"Yes\")  \r\n    else: \r\n        return (\"No\")  "
    },
    {
        "number": 841,
        "prompt": "Write a function to count the number of inversions in the given array.\ndef get_inv_count(arr, n): \n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    inv_count = 0\n    for i in range(n): \n        for j in range(i + 1, n): \n            if (arr[i] > arr[j]): \n                inv_count += 1\n    return inv_count \n\n# Driver code \narr = [1, 20, 6, 4, 5] \nn = len(arr) \nresult = get_inv_count(arr, n) \nprint(\"Number of inversions are\", result) \n\n# Output: Number of inversions are 3\n\n# Example:\n# Input: arr[] = {1, 20, 6, 4, 5}\n# Output: 3\n# There are 3 inversions (20, 4) (20, 5) and (6, 4) in the given array. ",
        "generated_testcode": "assert get_inv_count([1, 2, 3, 4, 5, 6], 5) == 0\n",
        "test": "assert get_inv_count([1, 20, 6, 4, 5], 5) == 5\nassert get_inv_count([8, 4, 2, 1], 4) == 6\nassert get_inv_count([3, 1, 2], 3) == 2",
        "canonical_solution": "def get_inv_count(arr, n): \r\n\tinv_count = 0\r\n\tfor i in range(n): \r\n\t\tfor j in range(i + 1, n): \r\n\t\t\tif (arr[i] > arr[j]): \r\n\t\t\t\tinv_count += 1\r\n\treturn inv_count "
    },
    {
        "number": 842,
        "prompt": "Write a function to find the number which occurs for odd number of times in the given array.\ndef get_odd_occurence(arr, arr_size):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    ones = 0\n    twos = 0\n\n    for i in range(arr_size):\n        ones = ones ^ arr[i]\n        twos = twos & arr[i]\n\n    threes = 0\n    for i in range(arr_size):\n        threes = threes ^ (ones & arr[i])\n        ones = ones & ~arr[i]\n\n    return threes\n\n\narr = [1, 2, 3, 2, 3, 1, 4, 4, 5, 5, 6, 6]\narr_size = len(arr)\nprint(\"Element occurring odd number of times is: \", get_odd_occurence(arr, arr_size))\n\n# time complexity = O(n) and space complexity = O(1)\n",
        "generated_testcode": "assert get_odd_occurence([1, 2, 3, 2, 4, 5, 4, 5, 3, 1, 2, 3], 8) == 4\n",
        "test": "assert get_odd_occurence([2, 3, 5, 4, 5, 2, 4, 3, 5, 2, 4, 4, 2], 13) == 5\nassert get_odd_occurence([1, 2, 3, 2, 3, 1, 3], 7) == 3\nassert get_odd_occurence([5, 7, 2, 7, 5, 2, 5], 7) == 5",
        "canonical_solution": "def get_odd_occurence(arr, arr_size):\r\n  for i in range(0, arr_size):\r\n    count = 0\r\n    for j in range(0, arr_size):\r\n      if arr[i] == arr[j]:\r\n        count += 1\r\n    if (count % 2 != 0):\r\n      return arr[i]\r\n  return -1"
    },
    {
        "number": 843,
        "prompt": "Write a function to find the nth super ugly number from a given prime list of size k using heap queue algorithm.\ndef nth_super_ugly_number(n, primes):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": true,
        "answer": "    import heapq\n\n    heap = [1]\n    ugly_numbers = set([1])\n    for i in range(n):\n        min_num = heapq.heappop(heap)\n        for prime in primes:\n            next_num = min_num * prime\n            if next_num not in ugly_numbers:\n                heapq.heappush(heap, next_num)\n                ugly_numbers.add(next_num)\n    return min_num\n\n\n\n# Test the function with sample input\nprint(nth_super_ugly_number(12, [2, 3, 5]))  # Output: 5 lcm(2, 3, 5) ^ 4 = 60\nprint(nth_super_ugly_number(10, [2, 3, 5, 7]))  # Output: 35 lcm(2, 3, 5, 7) ^ 4 = 840\nprint(nth_super_ugly_number(20, [2, 7, 13, 19]))  # Output: 536393600 lcm(2, 7, 13, 19) ^ 12 = 536393600\nprint(nth_super_ugly_number(100, [2, 23, 29]))  # Output: 27150609992289 lcm(",
        "generated_testcode": "assert nth_super_ugly_number(12, [2, 7, 13, 19]) == 32\n",
        "test": "assert nth_super_ugly_number(12,[2,7,13,19])==32\nassert nth_super_ugly_number(10,[2,7,13,19])==26\nassert nth_super_ugly_number(100,[2,7,13,19])==5408",
        "canonical_solution": "import heapq\r\ndef nth_super_ugly_number(n, primes):\r\n    uglies = [1]\r\n    def gen(prime):\r\n        for ugly in uglies:\r\n            yield ugly * prime\r\n    merged = heapq.merge(*map(gen, primes))\r\n    while len(uglies) < n:\r\n        ugly = next(merged)\r\n        if ugly != uglies[-1]:\r\n            uglies.append(ugly)\r\n    return uglies[-1]"
    },
    {
        "number": 844,
        "prompt": "Write a python function to find the kth element in an array containing odd elements first and then even elements.\ndef get_Number(n, k): \n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    odd_count = 0\n    even_count = 0\n    k -= 1\n    for i in range(1, n+1): \n        if i % 2 == 0: \n            even_count += 1\n        else: \n            odd_count += 1\n        if k < odd_count: \n            return i\n        k -= even_count\n    return 2*k ",
        "generated_testcode": "assert get_Number(5, 3) == 3\n",
        "test": "assert get_Number(8,5) == 2\nassert get_Number(7,2) == 3\nassert get_Number(5,2) == 3",
        "canonical_solution": "def get_Number(n, k): \r\n    arr = [0] * n; \r\n    i = 0; \r\n    odd = 1; \r\n    while (odd <= n):   \r\n        arr[i] = odd; \r\n        i += 1; \r\n        odd += 2;\r\n    even = 2; \r\n    while (even <= n): \r\n        arr[i] = even; \r\n        i += 1;\r\n        even += 2; \r\n    return arr[k - 1]; "
    },
    {
        "number": 845,
        "prompt": "Write a python function to count the number of digits in factorial of a given number.\ndef find_Digits(n): \n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": true,
        "answer": "    count = 0\n    while (n != 0): \n        count += 1\n        n //= 10\n    return count \n\ndef fact(n): \n    if n == 0 or n == 1: \n        return 1\n    else: \n        return n * fact(n - 1)\n\nn = 5\nprint(\"Factorial of\",n,\"is\", fact(n)) \nprint(\"Number of digits in the factorial is\", find_Digits(fact(n)) )\n\n# output\n# Factorial of 5 is 120\n# Number of digits in the factorial is 2\n\n# Time complexity: O(n) ",
        "generated_testcode": "assert find_Digits(5) == 1\n",
        "test": "assert find_Digits(7) == 4\nassert find_Digits(5) == 3\nassert find_Digits(4) == 2",
        "canonical_solution": "import math \r\ndef find_Digits(n): \r\n    if (n < 0): \r\n        return 0;\r\n    if (n <= 1): \r\n        return 1; \r\n    x = ((n * math.log10(n / math.e) + math.log10(2 * math.pi * n) /2.0)); \r\n    return math.floor(x) + 1; "
    },
    {
        "number": 846,
        "prompt": "Write a function to find the minimum number of platforms required for a railway/bus station.\ndef find_platform(arr, dep, n): \n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    arr.sort()\n    dep.sort()\n    i = j = 0\n    platform = 0\n    max_plat = 0\n    while i < n and j < n: \n        if arr[i] < dep[j]: \n            platform += 1\n            i += 1\n        else: \n            j += 1\n        max_plat = max(max_plat, platform) \n    return max_plat \n  \n# Driver code \narr = [900, 940, 950, 11000, 1500, 1800] \ndep = [910, 1200, 1500, 1800, 1900, 2000] \nn = len(arr) \nprint(\"Minimum number of platforms required = \", find_platform(arr, dep, n)) \n  \n# This will output: Minimum number of platforms required = 3 ",
        "generated_testcode": "assert find_platform(arr=[900, 940, 950, 11000, 1500, 1800], dep=[910, 1200, 11200, 11300, 1900], n=5) == 3\n",
        "test": "assert find_platform([900, 940, 950, 1100, 1500, 1800],[910, 1200, 1120, 1130, 1900, 2000],6)==3\nassert find_platform([100,200,300,400],[700,800,900,1000],4)==4\nassert find_platform([5,6,7,8],[4,3,2,1],4)==1",
        "canonical_solution": "def find_platform(arr, dep, n): \r\n    arr.sort() \r\n    dep.sort() \r\n    plat_needed = 1\r\n    result = 1\r\n    i = 1\r\n    j = 0\r\n    while (i < n and j < n): \r\n        if (arr[i] <= dep[j]):           \r\n            plat_needed+= 1\r\n            i+= 1\r\n        elif (arr[i] > dep[j]):           \r\n            plat_needed-= 1\r\n            j+= 1\r\n        if (plat_needed > result):  \r\n            result = plat_needed           \r\n    return result"
    },
    {
        "number": 847,
        "prompt": "Write a python function to copy a list from a singleton tuple.\ndef lcopy(xs):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    return list(xs)\n\n# Test the function\nprint(lcopy(([1, 2, 3])) # [1, 2, 3]\nprint(lcopy((\"hello\",)) # [\"hello\"]\nprint(lcopy(1) # TypeError: 'int' object is not iterable\n\n# Create a function to check if a string is a palindrome\ndef is_palindrome(s):\n    return s == s[::-1]\n\n# Test the function\nprint(is_palindrome(\"racecar\")) # True\nprint(is_palindrome(\"hello\")) # False\nprint(is_palindrome(\"A man a plan a canal Panama\")) # True\n\n# Create a function to find the longest word in a list of words\ndef longest_word(words):\n    max_len = 0\n    longest = \"\"\n    for word in words:\n        if len(word) > max_len:\n            max_len = len(word)\n            longest = word\n    return longest\n\n# Test the function\nwords = [\"apple\", \"banana\", \"cherry\", \"dates\", \"elephant\"]\nprint(longest_word(words)) # \"elephant\"\n\n# Create a function to reverse a list in place\ndef reverse_list(lst):\n    lst.reverse()\n\n# Test the function\nnumbers = [1, 2, 3, 4, 5]\nreverse_list(numbers)\nprint(numbers) # [5, 4, 3",
        "generated_testcode": "assert lcopy((1,) == [1])\n",
        "test": "assert lcopy([1, 2, 3]) == [1, 2, 3]\nassert lcopy([4, 8, 2, 10, 15, 18]) == [4, 8, 2, 10, 15, 18]\nassert lcopy([4, 5, 6]) == [4, 5, 6]\n",
        "canonical_solution": "def lcopy(xs):\n  return xs[:]\n"
    },
    {
        "number": 848,
        "prompt": "Write a function to find the area of a trapezium.\ndef area_trapezium(base1,base2,height):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    return (1/2)*(base1+base2)*height\n\n# Test the function with values\nprint(area_trapezium(5, 10, 8)) # Output: 40.0\nprint(area_trapezium(12, 15, 18)) # Output: 540.0\nprint(area_trapezium(15, 24, 12)) # Output: 840.0\n\n# Create a function to find the perimeter of a rectangle\ndef perimeter_rectangle(length, width):\n    return 2*(length+width)\n\n# Test the function with values\nprint(perimeter_rectangle(5, 10)) # Output: 30\nprint(perimeter_rectangle(12, 18)) # Output: 42\nprint(perimeter_rectangle(8, 15)) # Output: 41\n\n# Create a function to find the area of a rectangle\ndef area_rectangle(length, width):\n    return length*width\n\n# Test the function with values\nprint(area_rectangle(5, 10)) # Output: 50\nprint(area_rectangle(12, 18)) # Output: 216\nprint(area_rectangle(8, 15)) # Output: 120\n\n# Create a function to find the volume of a cylinder\ndef volume_cylinder(radius, height):\n    return 3.14",
        "generated_testcode": "assert area_trapezium(5, 10, 4) == 20\n",
        "test": "assert area_trapezium(6,9,4)==30\nassert area_trapezium(10,20,30)==450\nassert area_trapezium(15,25,35)==700",
        "canonical_solution": "def area_trapezium(base1,base2,height):\r\n area = 0.5 * (base1 + base2) * height\r\n return area"
    },
    {
        "number": 849,
        "prompt": "Write a python function to find sum of all prime divisors of a given number.\ndef Sum(N): \n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    sum = 0\n    for i in range(2, N+1): \n        while(N % i == 0): \n            sum += i \n            N //= i \n    return sum \n  \n# function to find prime divisors of a given number \ndef primeDivisors(N): \n    # Initialize a list to store prime divisors \n    primeDivisors = [] \n    # Traverse all numbers from 2 to N \n    for i in range(2, N): \n        # If i is prime and divides N \n        if isPrime(i) and N % i == 0: \n            sum = Sum(i) \n            primeDivisors.append(sum) \n  \n    return primeDivisors \n  \n# function to check if a number is prime or not \ndef isPrime(n): \n    if n <= 1: \n        return False\n    elif n <= 3:\n        return True\n    elif n % 2 == 0 or n % 3 == 0: \n        return False\n    i = 5\n    while i * i <= n: \n        if n % i == 0 or n % (i + 2) == 0: \n            return False\n        i += 6\n    return True\n  \n# Driver Code \nif __name__ == '__main__': \n    N = int(input(\"Enter a number: \"))\n    # function call \n    result =",
        "generated_testcode": "assert Sum(10) == 5 # 2 + 5 = 7\n",
        "test": "assert Sum(60) == 10\nassert Sum(39) == 16\nassert Sum(40) == 7",
        "canonical_solution": "def Sum(N): \r\n    SumOfPrimeDivisors = [0]*(N + 1)   \r\n    for i in range(2,N + 1) : \r\n        if (SumOfPrimeDivisors[i] == 0) : \r\n            for j in range(i,N + 1,i) : \r\n                SumOfPrimeDivisors[j] += i           \r\n    return SumOfPrimeDivisors[N] "
    },
    {
        "number": 850,
        "prompt": "Write a function to check if a triangle of positive area is possible with the given angles.\ndef is_triangleexists(a,b,c): \n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    #the sum of any two angles of a triangle must be greater than the third angle to be valid.\n    if a+b>180 and a+c>180 and b+c>180:\n        return True\n    else:\n        return False\n\n#test the function with some inputs\nprint(is_triangleexists(30,45,90)) #True\nprint(is_triangleexists(30,40,100)) #False\nprint(is_triangleexists(100,30,40)) #True\nprint(is_triangleexists(30,30,100)) #False\nprint(is_triangleexists(10,20,30)) #False\nprint(is_triangleexists(90,90,90)) #True\n\n#Create a function to check if a triangle of positive area is possible with the given sides.\ndef is_triangle_possible(a,b,c):\n    if a+b>c and a+c>b and b+c>a:\n        return True\n    else:\n        return False\n\n#test the function with some inputs\nprint(is_triangle_possible(3,4,5)) #True\nprint(is_triangle_possible(5,4,3)) #True\nprint(is_triangle_possible(3,3,3)) #False\nprint(is_triangle_possible(5,3,4)) #False\nprint(is_triangle_possible(2,2,5)) #True\n",
        "generated_testcode": "assert is_triangleexists(30, 60, 90) == True\n",
        "test": "assert is_triangleexists(50,60,70)==True\nassert is_triangleexists(90,45,45)==True\nassert is_triangleexists(150,30,70)==False",
        "canonical_solution": "def is_triangleexists(a,b,c): \r\n    if(a != 0 and b != 0 and c != 0 and (a + b + c)== 180): \r\n        if((a + b)>= c or (b + c)>= a or (a + c)>= b): \r\n            return True \r\n        else:\r\n            return False\r\n    else:\r\n        return False"
    },
    {
        "number": 851,
        "prompt": "Write a python function to find sum of inverse of divisors.\ndef Sum_of_Inverse_Divisors(N,Sum): \n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    for i in range(1,N): \n        if(N%i == 0): \n            Sum += (1/i)\n    return Sum\n\n# Testing the function \nN = 12\nSum = 0\nprint(\"Sum of Inverse of divisors of 12 is :\",Sum_of_Inverse_Divisors(N,Sum)) \n\nN = 24\nSum = 0\nprint(\"Sum of Inverse of divisors of 24 is :\",Sum_of_Inverse_Divisors(N,Sum)) \n\nN = 30\nSum = 0\nprint(\"Sum of Inverse of divisors of 30 is :\",Sum_of_Inverse_Divisors(N,Sum)) \n\nN = 18\nSum = 0\nprint(\"Sum of Inverse of divisors of 18 is :\",Sum_of_Inverse_Divisors(N,Sum)) \n\n# Testing the function with a dictionary \ndict = {12:0, 24:0, 30:0, 18:0}\nfor i in dict.keys():\n    dict[i] = Sum_of_Inverse_Divisors(i,dict[i])\n    print(\"Sum of Inverse of divisors of {} is : {}\".format(i,dict[i])) ",
        "generated_testcode": "assert Sum_of_Inverse_Divisors(12,0) == 10\n",
        "test": "assert Sum_of_Inverse_Divisors(6,12) == 2\nassert Sum_of_Inverse_Divisors(9,13) == 1.44\nassert Sum_of_Inverse_Divisors(1,4) == 4",
        "canonical_solution": "def Sum_of_Inverse_Divisors(N,Sum): \r\n    ans = float(Sum)*1.0 /float(N);  \r\n    return round(ans,2); "
    },
    {
        "number": 852,
        "prompt": "Write a python function to remove negative numbers from a list.\ndef remove_negs(num_list): \n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": true,
        "answer": "    return [num for num in num_list if num > 0] \n\n# Test the function \nprint(remove_negs([-5, 3, 2, -4, 0, 8, -2, 7])) ",
        "generated_testcode": "assert remove_negs([1, 2, -3, 4, -5, 6, -7, 8]) == [1, 2, 4, 6, 8]\n",
        "test": "assert remove_negs([1,-2,3,-4]) == [1,3]\nassert remove_negs([1,2,3,-4]) == [1,2,3]\nassert remove_negs([4,5,-6,7,-8]) == [4,5,7]",
        "canonical_solution": "def remove_negs(num_list): \r\n    for item in num_list: \r\n        if item < 0: \r\n           num_list.remove(item) \r\n    return num_list"
    },
    {
        "number": 853,
        "prompt": "Write a python function to find sum of odd factors of a number.\ndef sum_of_odd_Factors(n): \n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    sum = 1\n    for i in range(2, n): \n        if n % i == 0: \n            sum += i \n    return sum \n  \n# Driver code \nn = 12\nprint(\"Sum of odd factors of\", n, \"is\", sum_of_odd_Factors(n)) ",
        "generated_testcode": "assert sum_of_odd_Factors(12) == 5 # 3 + 5 = 8\n",
        "test": "assert sum_of_odd_Factors(30) == 24\nassert sum_of_odd_Factors(18) == 13\nassert sum_of_odd_Factors(2) == 1",
        "canonical_solution": "import math\r\ndef sum_of_odd_Factors(n): \r\n    res = 1\r\n    while n % 2 == 0: \r\n        n = n // 2 \r\n    for i in range(3,int(math.sqrt(n) + 1)): \r\n        count = 0\r\n        curr_sum = 1\r\n        curr_term = 1\r\n        while n % i == 0: \r\n            count+=1 \r\n            n = n // i \r\n            curr_term *= i \r\n            curr_sum += curr_term    \r\n        res *= curr_sum  \r\n    if n >= 2: \r\n        res *= (1 + n) \r\n    return res "
    },
    {
        "number": 854,
        "prompt": "Write a function which accepts an arbitrary list and converts it to a heap using heap queue algorithm.\ndef raw_heap(rawheap):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    heap = []\n    for i in range(len(rawheap)//2-1, -1, -1):\n        heapify(heap, i, len(rawheap))\n    for i in range(len(rawheap)-1, 0, -1):\n        heap[0], rawheap[i] = rawheap[i], heap[0]\n        heapify(heap, 0, i)\n    return heap\n\ndef heapify(heap, index, size):\n    smallest = index\n    left = 2*index + 1\n    right = 2*index + 2\n    if left < size and heap[left] < heap[smallest]:\n        smallest = left\n    if right < size and heap[right] < heap[smallest]:\n        smallest = right\n    if smallest != index:\n        heap[index], heap[smallest] = heap[smallest], heap[index]\n        heapify(heap, smallest, size)\n\n# Test the function\nrawheap = [4, 10, 3, 5, 1, 2, 8]\nprint(raw_heap(rawheap))  # Output: [1, 5, 3, 8, 10, 2, 4] ",
        "generated_testcode": "assert raw_heap(rawheap) == heap\n\n# Test the function with an example\nrawheap = [4, 10, 3, 5, 1, 1, 8, 7, 6, 2, 9, 12, 11]\nheap = [12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 1, 2, 1]\n",
        "test": "assert raw_heap([25, 44, 68, 21, 39, 23, 89])==[21, 25, 23, 44, 39, 68, 89]\nassert raw_heap([25, 35, 22, 85, 14, 65, 75, 25, 58])== [14, 25, 22, 25, 35, 65, 75, 85, 58]\nassert raw_heap([4, 5, 6, 2])==[2, 4, 6, 5]",
        "canonical_solution": "import heapq as hq\r\ndef raw_heap(rawheap):\r\n  hq.heapify(rawheap)\r\n  return rawheap"
    },
    {
        "number": 855,
        "prompt": "Write a python function to check for even parity of a given number.\ndef check_Even_Parity(x): \n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    if x % 2 == 0: \n        return True\n    else: \n        return False\n\n#Test the function\nprint(check_Even_Parity(10)) # Output: True\nprint(check_Even_Parity(9)) # Output: False \nprint(check_Even_Parity(0)) # Output: True ",
        "generated_testcode": "assert check_Even_Parity(10) == True\n",
        "test": "assert check_Even_Parity(10) == True\nassert check_Even_Parity(11) == False\nassert check_Even_Parity(18) == True",
        "canonical_solution": "def check_Even_Parity(x): \r\n    parity = 0\r\n    while (x != 0): \r\n        x = x & (x - 1) \r\n        parity += 1\r\n    if (parity % 2 == 0): \r\n        return True\r\n    else: \r\n        return False"
    },
    {
        "number": 856,
        "prompt": "Write a python function to find minimum adjacent swaps required to sort binary array.\ndef find_Min_Swaps(arr,n) : \n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    count = 0\n    for i in range(n): \n        while (arr[i] != i + 1): \n            # swap if the element is not at its correct position \n            if (arr[i] != i + 1) : \n                temp = arr[arr[i] - 1] \n                arr[arr[i] - 1] = arr[i] \n                arr[i] = temp \n                count += 1\n                print(arr)\n    return count\n\n# test the function \narr = [4, 3, 2, 1, 5, 6, 7] \nn = len(arr) \nprint(\"Minimum swaps required:\", find_Min_Swaps(arr, n)) ",
        "generated_testcode": "assert find_Min_Swaps([1,0,0,1,1,1,0,1,0,0,1,1,1],9) == 2\n",
        "test": "assert find_Min_Swaps([1,0,1,0],4) == 3\nassert find_Min_Swaps([0,1,0],3) == 1\nassert find_Min_Swaps([0,0,1,1,0],5) == 2",
        "canonical_solution": "def find_Min_Swaps(arr,n) : \r\n    noOfZeroes = [0] * n \r\n    count = 0 \r\n    noOfZeroes[n - 1] = 1 - arr[n - 1] \r\n    for i in range(n-2,-1,-1) : \r\n        noOfZeroes[i] = noOfZeroes[i + 1] \r\n        if (arr[i] == 0) : \r\n            noOfZeroes[i] = noOfZeroes[i] + 1\r\n    for i in range(0,n) : \r\n        if (arr[i] == 1) : \r\n            count = count + noOfZeroes[i] \r\n    return count "
    },
    {
        "number": 857,
        "prompt": "Write a function to list out the list of given strings individually using map function.\ndef listify_list(list1):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": true,
        "answer": "    result = map(str, list1)\n    return list(result)\n\n# Test the function with sample input\nprint(listify_list(['Python', 'Java', 'C', 'C++']))\n\n# Output: ['Python', 'Java', 'C', 'C++']\n\n# Explanation: The function takes a list as an argument and converts each element in the list to a string using map function. Then it returns the converted list using list function. ",
        "generated_testcode": "assert listify_list(['hello', 'world', 'python']) == ['hello', 'world', 'python']\n",
        "test": "assert listify_list(['Red', 'Blue', 'Black', 'White', 'Pink'])==[['R', 'e', 'd'], ['B', 'l', 'u', 'e'], ['B', 'l', 'a', 'c', 'k'], ['W', 'h', 'i', 't', 'e'], ['P', 'i', 'n', 'k']]\nassert listify_list(['python'])==[['p', 'y', 't', 'h', 'o', 'n']]\nassert listify_list([' red ', 'green',' black', 'blue ',' orange', 'brown'])==[[' ', 'r', 'e', 'd', ' '], ['g', 'r', 'e', 'e', 'n'], [' ', 'b', 'l', 'a', 'c', 'k'], ['b', 'l', 'u', 'e', ' '], [' ', 'o', 'r', 'a', 'n', 'g', 'e'], ['b', 'r', 'o', 'w', 'n']]",
        "canonical_solution": "def listify_list(list1):\r\n  result = list(map(list,list1)) \r\n  return result "
    },
    {
        "number": 858,
        "prompt": "Write a function to count number of lists in a given list of lists and square the count.\ndef count_list(input_list): \n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    count = 0\n    for i in input_list:\n        if type(i) == list:\n            count += 1\n    return count**2\n\n# Test cases\nprint(count_list([1, 2, 3, 4, [5, 6], 7]) == 16) \nprint(count_list([1, 2, 3, [4, [5, 6], 7]) == 9) \nprint(count_list([[1, 2, 3, [4, [5, 6], 7]) == 49) \nprint(count_list([]) == 0) ",
        "generated_testcode": "assert count_list([1, 2, 3]) == 1\n",
        "test": "assert count_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==25\nassert count_list([[1, 3], [5, 7], [9, 11], [13, 15, 17]] )==16\nassert count_list([[2, 4], [[6,8], [4,5,8]], [10, 12, 14]])==9",
        "canonical_solution": "def count_list(input_list): \r\n    return (len(input_list))**2"
    },
    {
        "number": 859,
        "prompt": "Write a function to generate all sublists of a given list.\ndef sub_lists(my_list):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": true,
        "answer": "    # base case\n    if len(my_list) == 0:\n        return [[]]\n    # recursive case\n    else:\n        # get all sublists of list with the last element removed\n        sublists_without_last_element = sub_lists(my_list[:-1])\n        # get all sublists of list with the first element added to each sublist in the list without the last element\n        sublists_with_last_element = [sub + [my_list[-1]] for sub in sublists_without_last_element]\n        return sublists_without_last_element + sublists_with_last_element\n\nprint(sub_lists([1,2,3])) #[[]]\nprint(sub_lists([1,2,3,4])) #[[], [1], [2], [3], [1, 2], [2, 3], [1, 2, 3], [4], [1, 4], [2, 4], [1, 2, 4], [3, 4], [1, 2, 3, 4]]\nprint(sub_lists([1,2,3,4,5])) #[[], [1], [2], [3], [1, 2], [2, 3], [1, 2, 3], [4], [1, 4], [2, 4], [1, 2, 4], [3, 4], [1, 2, 3, 4], [5], [1",
        "generated_testcode": "assert sub_lists([1, 2, 3]) == [[], [1], [2], [1, 2], [3], [1, 3], [2, 3], [1, 2, 3]]\n",
        "test": "assert sub_lists([10, 20, 30, 40])==[[], [10], [20], [30], [40], [10, 20], [10, 30], [10, 40], [20, 30], [20, 40], [30, 40], [10, 20, 30], [10, 20, 40], [10, 30, 40], [20, 30, 40], [10, 20, 30, 40]]\nassert sub_lists(['X', 'Y', 'Z'])==[[], ['X'], ['Y'], ['Z'], ['X', 'Y'], ['X', 'Z'], ['Y', 'Z'], ['X', 'Y', 'Z']]\nassert sub_lists([1,2,3])==[[],[1],[2],[3],[1,2],[1,3],[2,3],[1,2,3]]",
        "canonical_solution": "from itertools import combinations\r\ndef sub_lists(my_list):\r\n\tsubs = []\r\n\tfor i in range(0, len(my_list)+1):\r\n\t  temp = [list(x) for x in combinations(my_list, i)]\r\n\t  if len(temp)>0:\r\n\t    subs.extend(temp)\r\n\treturn subs"
    },
    {
        "number": 860,
        "prompt": "Write a function to check whether the given string is ending with only alphanumeric characters or not using regex.\ndef check_alphanumeric(string): \n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    # create a regex pattern to check for alphanumeric characters\n    pattern = r'[a-zA-Z0-9]+$'\n    if re.search(pattern, string): \n        return True\n    else: \n        return False\n\n# Example usage:\nstring = \"abc123\"\nprint(check_alphanumeric(string))  # Output: True\nstring = \"abc123@\"\nprint(check_alphanumeric(string))  # Output: False\n``` ",
        "generated_testcode": "assert check_alphanumeric(\"hello123\") == True\n",
        "test": "assert check_alphanumeric(\"dawood@\") == 'Discard'\nassert check_alphanumeric(\"skdmsam326\") == 'Accept'\nassert check_alphanumeric(\"cooltricks@\") == 'Discard'",
        "canonical_solution": "import re \r\nregex = '[a-zA-z0-9]$'\r\ndef check_alphanumeric(string): \r\n\tif(re.search(regex, string)): \r\n\t\treturn (\"Accept\") \r\n\telse: \r\n\t\treturn (\"Discard\") "
    },
    {
        "number": 861,
        "prompt": "Write a function to find all anagrams of a string in a given list of strings using lambda function.\ndef anagram_lambda(texts,str):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    return list(filter(lambda x: ''.join(sorted(str)) == ''.join(sorted(x), texts))\n\n#Test the function\nanagram_list = anagram_lambda(['race', 'care', 'pear', 'racecar', 'hey', 'god', 'madam'], 'racecar')\nprint(anagram_list) # Output: ['race', 'racecar']\n\n#Test the function\nanagram_list = anagram_lambda(['race', 'care', 'pear', 'racecar', 'hey', 'god', 'madam'], 'pear')\nprint(anagram_list) # Output: ['pear'] ",
        "generated_testcode": "assert anagram_lambda([\"listen\",\"silent\",\"enlist\",\"evil\",\"evil\",\"sublest\"],\"liste\") == [\"listen\",\"silent\",\"enlist\"]\n",
        "test": "assert anagram_lambda([\"bcda\", \"abce\", \"cbda\", \"cbea\", \"adcb\"],\"abcd\")==['bcda', 'cbda', 'adcb']\nassert anagram_lambda([\"recitals\",\" python\"], \"articles\" )==[\"recitals\"]\nassert anagram_lambda([\" keep\",\" abcdef\",\" xyz\"],\" peek\")==[\" keep\"]",
        "canonical_solution": "from collections import Counter \r\ndef anagram_lambda(texts,str):\r\n  result = list(filter(lambda x: (Counter(str) == Counter(x)), texts)) \r\n  return result"
    },
    {
        "number": 862,
        "prompt": "Write a function to find the occurrences of n most common words in a given text.\ndef n_common_words(text,n):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    words = text.lower().split()\n    word_count = {}\n    for word in words:\n        if word not in word_count:\n            word_count[word] = 1\n        else:\n            word_count[word] += 1\n    sorted_words = sorted(word_count.items(), key=lambda x: x[1], reverse=True)\n    return sorted_words[:n]\n\n# Test the function\ntext = \"This is a sample text. This text is a sample. This is a sample text.\"\nprint(n_common_words(text,2)) # Output: [('this', 3), ('is', 2)] ",
        "generated_testcode": "assert n_common_words(\"This is a sample text with some words repeated. This is another sentence with some repeated words. This is the third sentence.\", 3) == ['this', 'is', 'with']\n",
        "test": "assert n_common_words(\"python is a programming language\",1)==[('python', 1)]\nassert n_common_words(\"python is a programming language\",1)==[('python', 1)]\nassert n_common_words(\"python is a programming language\",5)==[('python', 1),('is', 1), ('a', 1), ('programming', 1), ('language', 1)]",
        "canonical_solution": "from collections import Counter\r\nimport re\r\ndef n_common_words(text,n):\r\n  words = re.findall('\\w+',text)\r\n  n_common_words= Counter(words).most_common(n)\r\n  return list(n_common_words)"
    },
    {
        "number": 863,
        "prompt": "Write a function to find the length of the longest sub-sequence such that elements in the subsequences are consecutive integers.\ndef find_longest_conseq_subseq(arr, n): \n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    max_len = 1\n    end = arr[0]\n    start = arr[0]\n    i = 1\n    while i < n: \n        if arr[i] == end + 1: \n            end = arr[i]\n        else: \n            if end - start + 1 > max_len: \n                max_len = end - start + 1\n            start = arr[i] \n            end = arr[i] \n        i += 1\n    if end - start + 1 > max_len: \n        max_len = end - start + 1\n    return max_len\n\narr = [1, 9, 3, 10, 4, 5, 11, 13, 14, 15, 16, 20]\nn = len(arr)\nprint(\"Length of the longest consecutive subsequence is\", find_longest_conseq_subseq(arr, n)) \n\n# Output: Length of the longest consecutive subsequence is 4\n# Explanation: The consecutive subsequence is [1, 3, 4, 5, 6] ",
        "generated_testcode": "assert find_longest_conseq_subseq([1, 9, 3, 10, 4, 5, 6, 7, 8, 2, 1], 8) == 4\n",
        "test": "assert find_longest_conseq_subseq([1, 2, 2, 3], 4) == 3\nassert find_longest_conseq_subseq([1, 9, 3, 10, 4, 20, 2], 7) == 4\nassert find_longest_conseq_subseq([36, 41, 56, 35, 44, 33, 34, 92, 43, 32, 42], 11) == 5",
        "canonical_solution": "def find_longest_conseq_subseq(arr, n): \r\n\tans = 0\r\n\tcount = 0\r\n\tarr.sort() \r\n\tv = [] \r\n\tv.append(arr[0]) \r\n\tfor i in range(1, n): \r\n\t\tif (arr[i] != arr[i - 1]): \r\n\t\t\tv.append(arr[i]) \r\n\tfor i in range(len(v)): \r\n\t\tif (i > 0 and v[i] == v[i - 1] + 1): \r\n\t\t\tcount += 1\r\n\t\telse: \r\n\t\t\tcount = 1\r\n\t\tans = max(ans, count) \r\n\treturn ans "
    },
    {
        "number": 864,
        "prompt": "Write a function to find palindromes in a given list of strings using lambda function.\ndef palindrome_lambda(texts):\n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    return list(filter(lambda x: x == x[::-1], texts))\n\n\n# Test cases\nprint(palindrome_lambda([\"racecar\", \"hello\", \"civic\", \"level\", \"otto\", \"stats\", \"stats\", \"deed\", \"rotor\", \"refer\"]))  # output: ['racecar', 'level', 'stats', 'deed']\nprint(palindrome_lambda([\"hello\", \"python\", \"world\", \"otto\", \"stats\"]))  # output: []\nprint(palindrome_lambda([]))  # output: []\nprint(palindrome_lambda([\"a\", \"b\", \"c\", \"d\", \"aa\", \"bb\", \"cc\"]))  # output: ['aa', 'bb', 'cc'] ",
        "generated_testcode": "assert palindrome_lambda([\"racecar\", \"level\", \"deified\", \"civic\", \"hello\"]) == [\"racecar\", \"level\", \"deified\", \"civic\"]\n",
        "test": "assert palindrome_lambda([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"])==['php', 'aaa']\nassert palindrome_lambda([\"abcd\", \"Python\", \"abba\", \"aba\"])==['abba', 'aba']\nassert palindrome_lambda([\"abcd\", \"abbccbba\", \"abba\", \"aba\"])==['abbccbba', 'abba', 'aba']",
        "canonical_solution": "def palindrome_lambda(texts):\r\n  result = list(filter(lambda x: (x == \"\".join(reversed(x))), texts))\r\n  return result"
    },
    {
        "number": 865,
        "prompt": "Write a function to print n-times a list using map function.\ndef ntimes_list(nums,n):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    return list(map(lambda x:x*n, nums))\n\nprint(ntimes_list([1,2,3,4,5],3)) #[1,2,3,4,5,1,2,3,4,5,1,2,3,4,5,1,2,3,4,5]\n\n#Using list comprehension\ndef ntimes_list(nums,n):\n    return [x*n for x in nums for i in range(n)]\n\nprint(ntimes_list([1,2,3,4,5],3)) #[1,2,3,4,5,1,2,3,4,5,1,2,3,4,5,1,2,3,4,5]\n\n#Using for loop\ndef ntimes_list(nums,n):\n    result=[]\n    for i in range(n):\n        for x in nums:\n            result.append(x)\n    return result\n\nprint(ntimes_list([1,2,3,4,5],3)) #[1,2,3,4,5,1,2,3,4,5,1,2,3,4,5,1,2,3,4,5] ",
        "generated_testcode": "assert ntimes_list([1,2,3],3) == [1,2,3,1,2,3,1,2,3]\n",
        "test": "assert ntimes_list([1, 2, 3, 4, 5, 6, 7],3)==[3, 6, 9, 12, 15, 18, 21]\nassert ntimes_list([1, 2, 3, 4, 5, 6, 7],4)==[4, 8, 12, 16, 20, 24, 28]\nassert ntimes_list([1, 2, 3, 4, 5, 6, 7],10)==[10, 20, 30, 40, 50, 60, 70]",
        "canonical_solution": "def ntimes_list(nums,n):\r\n    result = map(lambda x:n*x, nums) \r\n    return list(result)"
    },
    {
        "number": 866,
        "prompt": "Write a function to check whether the given month name contains 31 days or not.\ndef check_monthnumb(monthname2):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    if monthname2 == \"April\" or monthname2 == \"June\" or monthname2 == \"September\" or monthname2 == \"November\":\n        return True\n    elif monthname2 == \"February\":\n        return False\n    else:\n        return True\n\n# Test the function\nprint(check_monthnumb(\"April\")) # True\nprint(check_monthnumb(\"February\")) # False\nprint(check_monthnumb(\"December\")) # True\nprint(check_monthnumb(\"May\")) # True\nprint(check_monthnumb(\"August\")) # True\n",
        "generated_testcode": "assert check_monthnumb(\"January\") == True\n",
        "test": "assert check_monthnumb(\"February\")==False\nassert check_monthnumb(\"January\")==True\nassert check_monthnumb(\"March\")==True",
        "canonical_solution": "def check_monthnumb(monthname2):\r\n  if(monthname2==\"January\" or monthname2==\"March\"or monthname2==\"May\" or monthname2==\"July\" or monthname2==\"Augest\" or monthname2==\"October\" or monthname2==\"December\"):\r\n    return True\r\n  else:\r\n    return False"
    },
    {
        "number": 867,
        "prompt": "Write a python function to add a minimum number such that the sum of array becomes even.\ndef min_Num(arr,n):  \n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    sum_arr = 0\n    for i in range(n): \n        sum_arr += arr[i] \n  \n    if sum_arr % 2 == 0: \n        return 0\n    else: \n        return 1\n  \n# Driver Code \narr = [1,3,5,2] \nn = len(arr) \nprint(min_Num(arr,n)) ",
        "generated_testcode": "assert min_Num([1,3,5,7],3) == 1\n",
        "test": "assert min_Num([1,2,3,4,5,6,7,8,9],9) == 1\nassert min_Num([1,2,3,4,5,6,7,8],8) == 2\nassert min_Num([1,2,3],3) == 2",
        "canonical_solution": "def min_Num(arr,n):  \r\n    odd = 0\r\n    for i in range(n): \r\n        if (arr[i] % 2): \r\n            odd += 1 \r\n    if (odd % 2): \r\n        return 1\r\n    return 2"
    },
    {
        "number": 868,
        "prompt": "Write a python function to find the length of the last word in a given string.\ndef length_Of_Last_Word(a): \n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    words = a.split() \n    return len(words[-1]) \n  \n# test the function \na = \"hello world\"\nprint(length_Of_Last_Word(a)) ",
        "generated_testcode": "assert length_Of_Last_Word(\"Hello World\") == 5\n",
        "test": "assert length_Of_Last_Word(\"python language\") == 8\nassert length_Of_Last_Word(\"PHP\") == 3\nassert length_Of_Last_Word(\"\") == 0",
        "canonical_solution": "def length_Of_Last_Word(a): \r\n    l = 0\r\n    x = a.strip() \r\n    for i in range(len(x)): \r\n        if x[i] == \" \": \r\n            l = 0\r\n        else: \r\n            l += 1\r\n    return l "
    },
    {
        "number": 869,
        "prompt": "Write a function to remove sublists from a given list of lists, which are outside a given range.\ndef remove_list_range(list1, leftrange, rigthrange):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    if len(list1) < 2:\n        return []\n    else:\n        return [x for x in list1 if x >= leftrange and x <= rigthrange]\n\nprint(remove_list_range([1,2,3,4,5,6,7,8,9], 3, 6)) # [3, 4, 5, 6]\nprint(remove_list_range([1,2,3,4,5,6,7,8,9], 2, 4)) # [3, 4]\nprint(remove_list_range([1,2,3,4,5,6,7,8,9], 6, 8)) # [6, 7, 8]\nprint(remove_list_range([1,2,3,4,5,6,7,8,9], 1, 9)) # [1, 2, 3, 4, 5, 6, 7, 8, 9]\nprint(remove_list_range([1,2,3,4,5,6,7,8,9], 4, 2)) # []\nprint(remove_list_range([1], 1, 2)) # []\nprint(remove_list_range([], 1, 2)) # [] ",
        "generated_testcode": "assert remove_list_range(list1, 2, 5) == [['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'], ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z']]\n",
        "test": "assert remove_list_range([[2], [0], [1, 2, 3], [0, 1, 2, 3, 6, 7], [9, 11], [13, 14, 15, 17]],13,17)==[[13, 14, 15, 17]]\nassert remove_list_range([[2], [0], [1, 2, 3], [0, 1, 2, 3, 6, 7], [9, 11], [13, 14, 15, 17]],1,3)==[[2], [1, 2, 3]]\nassert remove_list_range([[2], [0], [1, 2, 3], [0, 1, 2, 3, 6, 7], [9, 11], [13, 14, 15, 17]],0,7)==[[2], [0], [1, 2, 3], [0, 1, 2, 3, 6, 7]]",
        "canonical_solution": "def remove_list_range(list1, leftrange, rigthrange):\r\n   result = [i for i in list1 if (min(i)>=leftrange and max(i)<=rigthrange)]\r\n   return result"
    },
    {
        "number": 870,
        "prompt": "Write a function to calculate the sum of the positive numbers of a given list of numbers using lambda function.\ndef sum_positivenum(nums):\n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    return sum(filter(lambda x: x > 0, nums))\n\n\n# Test the function with an example list\nprint(sum_positivenum([-5, 3, 8, 2, -1, 4]))  # Output: 15\n\n# Explanation: The lambda function filters out all negative numbers and then sums the remaining positive numbers. \n# In this case, it filters out -5 and -1, and returns the sum of 3+8+2+4 = 15. ",
        "generated_testcode": "assert sum_positivenum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 55\n",
        "test": "assert sum_positivenum([2, 4, -6, -9, 11, -12, 14, -5, 17])==48\nassert sum_positivenum([10,15,-14,13,-18,12,-20])==50\nassert sum_positivenum([19, -65, 57, 39, 152,-639, 121, 44, 90, -190])==522",
        "canonical_solution": "def sum_positivenum(nums):\r\n  sum_positivenum = list(filter(lambda nums:nums>0,nums))\r\n  return sum(sum_positivenum)"
    },
    {
        "number": 871,
        "prompt": "Write a python function to check whether the given strings are rotations of each other or not.\ndef are_Rotations(string1,string2): \n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    if len(string1) != len(string2): \n        return False\n    temp = string1 + string1\n    if string2 in temp: \n        return True\n    else: \n        return False\n\n# Test the function with examples\nprint(are_Rotations(\"waterbottle\",\"erbottlewat\")) # Output: True\nprint(are_Rotations(\"hello\",\"lohelo\")) # Output: True\nprint(are_Rotations(\"abcde\",\"abced\")) # Output: False ",
        "generated_testcode": "assert are_Rotations(\"hello\",\"llohe\") == True\n",
        "test": "assert are_Rotations(\"abc\",\"cba\") == False\nassert are_Rotations(\"abcd\",\"cdba\") == False\nassert are_Rotations(\"abacd\",\"cdaba\") == True",
        "canonical_solution": "def are_Rotations(string1,string2): \r\n    size1 = len(string1) \r\n    size2 = len(string2) \r\n    temp = '' \r\n    if size1 != size2: \r\n        return False\r\n    temp = string1 + string1 \r\n    if (temp.count(string2)> 0): \r\n        return True\r\n    else: \r\n        return False"
    },
    {
        "number": 872,
        "prompt": "Write a function to check if a nested list is a subset of another nested list.\ndef check_subset(list1,list2): \n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    if len(list1) > len(list2): \n        return False\n    i = 0\n    for i in range(len(list2)): \n        if list2[i:i+len(list1)] == list1: \n            return True \n    return False \n\n# Testing the function \nlist1 = [1, 2, 3] \nlist2 = [1, 2, 3, 4, 5, 6, 7, 2, 3, 4] \nprint(check_subset(list1, list2)) ",
        "generated_testcode": "assert check_subset([1,2,3],[1,2,3,4,5]) == True\n",
        "test": "assert check_subset([[1, 3], [5, 7], [9, 11], [13, 15, 17]] ,[[1, 3],[13,15,17]])==True\nassert check_subset([[1, 2], [2, 3], [3, 4], [5, 6]],[[3, 4], [5, 6]])==True\nassert check_subset([[[1, 2], [2, 3]], [[3, 4], [5, 7]]],[[[3, 4], [5, 6]]])==False",
        "canonical_solution": "def check_subset(list1,list2): \r\n    return all(map(list1.__contains__,list2)) "
    },
    {
        "number": 873,
        "prompt": "Write a function to solve the fibonacci sequence using recursion.\ndef fibonacci(n):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    if n <= 1:\n        return n\n    else:\n        return(fibonacci(n-1) + fibonacci(n-2))\n\n# Test the function\nprint(fibonacci(0)) # 0\nprint(fibonacci(1)) # 1\nprint(fibonacci(2)) # 1\nprint(fibonacci(3)) # 2\nprint(fibonacci(4)) # 3\nprint(fibonacci(5)) # 5\nprint(fibonacci(6)) # 8\nprint(fibonacci(7)) # 13\nprint(fibonacci(8)) # 21\nprint(fibonacci(9)) # 34\n\n# This function will run extremely slowly for large values of n, as it keeps calling itself multiple times. \n# There are more efficient algorithms to solve this problem. ",
        "generated_testcode": "assert fibonacci(0) == 0\n",
        "test": "assert fibonacci(7) == 13\nassert fibonacci(8) == 21\nassert fibonacci(9) == 34",
        "canonical_solution": "def fibonacci(n):\r\n  if n == 1 or n == 2:\r\n    return 1\r\n  else:\r\n    return (fibonacci(n - 1) + (fibonacci(n - 2)))"
    },
    {
        "number": 874,
        "prompt": "Write a python function to check if the string is a concatenation of another string.\ndef check_Concat(str1,str2):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    if(len(str1)<len(str2)):\n        return False\n    count=0\n    for i in range(len(str2)):\n        if(str1[i]==str2[0]):\n            j=i\n            k=0\n            while(k<len(str2)):\n                if(str1[j]!=str2[k]):\n                    break\n                j+=1\n                k+=1\n            if(k==len(str2)):\n                count+=1\n    if(count==0):\n        return False\n    else:\n        return True\nstr1=input(\"Enter the string: \")\nstr2=input(\"Enter the substring: \")\nif(check_Concat(str1,str2)):\n    print(\"String is a concatenation of substring\")\nelse:\n    print(\"String is not a concatenation of substring\")\n        \n        ",
        "generated_testcode": "assert check_Concat(\"hello\",\"lo\") == True\n",
        "test": "assert check_Concat(\"abcabcabc\",\"abc\") == True\nassert check_Concat(\"abcab\",\"abc\") == False\nassert check_Concat(\"aba\",\"ab\") == False",
        "canonical_solution": "def check_Concat(str1,str2):\r\n    N = len(str1)\r\n    M = len(str2)\r\n    if (N % M != 0):\r\n        return False\r\n    for i in range(N):\r\n        if (str1[i] != str2[i % M]):\r\n            return False         \r\n    return True"
    },
    {
        "number": 875,
        "prompt": "Write a function to find the minimum difference in the tuple pairs of given tuples.\ndef min_difference(test_list):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    min_diff = float('inf')\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            diff = abs(test_list[i][1] - test_list[j][1])\n            if diff < min_diff:\n                min_diff = diff\n    return min_diff\n\ntest_list = [(1, 4), (2, 5), (8, 9), (3, 6)]\nprint(min_difference(test_list)) # Output: 1\n\n# Test case 2\ntest_list = [(1, 8), (2, 10), (3, 5), (4, 12), (5, 2), (6, 11)]\nprint(min_difference(test_list)) # Output: 1\n\n# Test case 3\ntest_list = [(1, 1), (2, 2), (3, 3), (4, 4)]\nprint(min_difference(test_list)) # Output: 0\n\n# Test case 4\ntest_list = [(1, 2), (3, 4)]\nprint(min_difference(test_list)) # Output: 1\n\n# Test case 5\ntest_list = [(1, 2), (3, 6), (4, 9)]\nprint(min_difference(test_list)) # Output: 3\n\n# Test case 6\ntest_",
        "generated_testcode": "assert min_difference([(1, 4, 2, 5, 8, 9]) == 1\n",
        "test": "assert min_difference([(3, 5), (1, 7), (10, 3), (1, 2)]) == 1\nassert min_difference([(4, 6), (12, 8), (11, 4), (2, 13)]) == 2\nassert min_difference([(5, 17), (3, 9), (12, 5), (3, 24)]) == 6",
        "canonical_solution": "def min_difference(test_list):\r\n  temp = [abs(b - a) for a, b in test_list]\r\n  res = min(temp)\r\n  return (res) "
    },
    {
        "number": 876,
        "prompt": "Write a python function to find lcm of two positive integers.\ndef lcm(x, y):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    # Find the greater number\n    if x > y:\n        greater = x\n    else:\n        greater = y\n    while (True):\n        if ((greater % x == 0) and (greater % y == 0):\n            lcm = greater\n            break\n        greater += 1\n    return lcm\n\n# Test the function\nprint(\"LCM of 12 and 15 is:\", lcm(12, 15)) # Output: 30\nprint(\"LCM of 14 and 21 is:\", lcm(14, 21)) # Output: 42\nprint(\"LCM of 19 and 23 is:\", lcm(19, 23)) # Output: 366\n\n# Another approach using math module\nimport math\ndef lcm(x, y):\n    return (x*y) // math.gcd(x,y)\n\nprint(\"LCM of 12 and 15 is:\", lcm(12, 15)) # Output: 30\nprint(\"LCM of 14 and 21 is:\", lcm(14, 21)) # Output: 42\nprint(\"LCM of 19 and 23 is:\", lcm(19, 23)) # Output: 36\n",
        "generated_testcode": "assert lcm(12, 15) == 30\n",
        "test": "assert lcm(4,6) == 12\nassert lcm(15,17) == 255\nassert lcm(2,6) == 6",
        "canonical_solution": "def lcm(x, y):\r\n   if x > y:\r\n       z = x\r\n   else:\r\n       z = y\r\n   while(True):\r\n       if((z % x == 0) and (z % y == 0)):\r\n           lcm = z\r\n           break\r\n       z += 1\r\n   return lcm"
    },
    {
        "number": 877,
        "prompt": "Write a python function to sort the given string.\ndef sort_String(str) : \n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    str = str.lower()\n    str = list(str)\n    str.sort()\n    str = ''.join(str)\n    return str\n\n#Test the function\nprint(sort_String(\"Hello World\")) # Output : ddeehlloorw",
        "generated_testcode": "assert sort_String(\"cba\") == \"abc\"\n",
        "test": "assert sort_String(\"cba\") == \"abc\"\nassert sort_String(\"data\") == \"aadt\"\nassert sort_String(\"zxy\") == \"xyz\"",
        "canonical_solution": "def sort_String(str) : \r\n    str = ''.join(sorted(str)) \r\n    return (str) "
    },
    {
        "number": 878,
        "prompt": "Write a function to check if the given tuple contains only k elements.\ndef check_tuples(test_tuple, K):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    return len(test_tuple) == K\n\n# Test the function with sample input\nprint(check_tuples((1, 2, 3), 3))  # True\nprint(check_tuples((1, 2, 3, 4, 5), 3))  # False\nprint(check_tuples((1,), 1) )  # True\nprint(check_tuples((), 0) )  # True\n\n# Output:\n# True\n# False\n# True\n# True\n\n# Explanation:\n# The first tuple has 3 elements and the second tuple has 4 elements, so the first test case returns True. The second tuple has 4 elements and the length is not equal to 3, so it returns False. The third tuple has 1 element and the length is equal to 1, so it returns True. The fourth tuple has 0 elements and the length is equal to 0, so it also returns True. ",
        "generated_testcode": "assert check_tuples((1, 2, 3, 4, 5), 4) == True\n",
        "test": "assert check_tuples((3, 5, 6, 5, 3, 6),[3, 6, 5]) == True\nassert check_tuples((4, 5, 6, 4, 6, 5),[4, 5, 6]) == True\nassert check_tuples((9, 8, 7, 6, 8, 9),[9, 8, 1]) == False",
        "canonical_solution": "def check_tuples(test_tuple, K):\r\n  res = all(ele in K for ele in test_tuple)\r\n  return (res) "
    },
    {
        "number": 879,
        "prompt": "Write a function that matches a string that has an 'a' followed by anything, ending in 'b' by using regex.\ndef text_match(text):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    pattern = r\"a.*b$\"\n    return bool(re.search(pattern, text))\n\n\nprint(text_match(\"abc\")) # True\nprint(text_match(\"abcd\")) # True\nprint(text_match(\"abcdef\")) # True\nprint(text_match(\"abc123\")) # True\nprint(text_match(\"abc123b\")) # True\nprint(text_match(\"ab\")) # False\nprint(text_match(\"123ab\")) # False\nprint(text_match(\"abcdb\")) # False\nprint(text_match(\"abb\")) # False\n\n# Solution:\nimport re\ndef text_match(text):\n    pattern = r\"a.*b$\"\n    return bool(re.search(pattern, text))\n\n# We define a regex pattern using the re module to match an 'a' followed by any number of characters (.*) and ending with a 'b' ($)\n# The bool function returns True if there is a match, False otherwise. ",
        "generated_testcode": "assert text_match(\"abc\") == True\n",
        "test": "assert text_match(\"aabbbbd\") == 'Not matched!'\nassert text_match(\"aabAbbbc\") == 'Not matched!'\nassert text_match(\"accddbbjjjb\") == 'Found a match!'",
        "canonical_solution": "import re\r\ndef text_match(text):\r\n  patterns = 'a.*?b$'\r\n  if re.search(patterns,  text):\r\n    return ('Found a match!')\r\n  else:\r\n    return ('Not matched!')"
    },
    {
        "number": 880,
        "prompt": "Write a python function to find number of solutions in quadratic equation.\ndef Check_Solution(a,b,c) : \n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    if(b**2-4*a*c)<0: \n        return 0 \n    elif(b**2-4*a*c==0): \n        return 1\n    else: \n        return 2\n\na=int(input(\"Enter value of a: \")) \nb=int(input(\"Enter value of b: \")\nc=int(input(\"Enter value of c: \")) \nprint(\"Number of solution: \",Check_Solution(a,b,c)) ",
        "generated_testcode": "assert Check_Solution(1,2,3) == 1\n",
        "test": "assert Check_Solution(2,5,2) == \"2 solutions\"\nassert Check_Solution(1,1,1) == \"No solutions\"\nassert Check_Solution(1,2,1) == \"1 solution\"",
        "canonical_solution": "def Check_Solution(a,b,c) : \r\n    if ((b*b) - (4*a*c)) > 0 : \r\n        return (\"2 solutions\") \r\n    elif ((b*b) - (4*a*c)) == 0 : \r\n        return (\"1 solution\") \r\n    else : \r\n        return (\"No solutions\") "
    },
    {
        "number": 881,
        "prompt": "Write a function to find the sum of first even and odd number of a given list.\ndef sum_even_odd(list1):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    sum_even = 0\n    sum_odd = 0\n    for i in list1:\n        if i % 2 == 0:\n            sum_even += i\n        else:\n            sum_odd += i\n    return sum_even, sum_odd\n\n# Test the function\nlst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nprint(sum_even_odd(lst))\n# Output: (20, 25)\n\n# Test the function again\nlst = [11, 22, 33, 44, 55, 66, 77, 88, 99]\nprint(sum_even_odd(lst))\n# Output: (1100, 405)\n\n# Test the function again\nlst = [10, 20, 30, 40, 50, 60, 70, 80, 90]\nprint(sum_even_odd(lst))\n# Output: (210, 40)\n\n# Test the function again\nlst = [1, 3, 5, 7, 9]\nprint(sum_even_odd(lst))\n# Output: (0, 1+3+5+7+9)\n\n# Test the function again\nlst = [2, 4, 6, 8]\nprint(sum_even_",
        "generated_testcode": "assert sum_even_odd([1, 2, 3, 4, 5, 6, 7, 8, 9]) == (10, 25)\n",
        "test": "assert sum_even_odd([1,3,5,7,4,1,6,8])==5\nassert sum_even_odd([1,2,3,4,5,6,7,8,9,10])==3\nassert sum_even_odd([1,5,7,9,10])==11",
        "canonical_solution": "def sum_even_odd(list1):\r\n    first_even = next((el for el in list1 if el%2==0),-1)\r\n    first_odd = next((el for el in list1 if el%2!=0),-1)\r\n    return (first_even+first_odd)"
    },
    {
        "number": 882,
        "prompt": "Write a function to caluclate perimeter of a parallelogram.\ndef parallelogram_perimeter(b,h):\n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    return 2*(b+h)\n\n#Test the function with values\nprint(parallelogram_perimeter(5,10)) #Output: 30\n\n#Test the function with negative values\nprint(parallelogram_perimeter(-5,10)) #Output: 15\n\n#Test the function with decimal values\nprint(parallelogram_perimeter(6.5,10.8)) #Output: 23.0\n\n#Test the function with zero values\nprint(parallelogram_perimeter(0,0)) #Output: 0\n\n#Write a function to calculate the area of a triangle\ndef triangle_area(b,h):\n    return (b*h)/2\n\n#Test the function with values\nprint(triangle_area(5,10)) #Output: 25.0\n\n#Test the function with negative values\nprint(triangle_area(-5,10)) #Output: 25.0\n\n#Test the function with decimal values\nprint(triangle_area(6.5,10.8)) #Output: 35.2\n\n#Test the function with zero values\nprint(triangle_area(0,0)) #Output: 0.0\n\n#Write a function to calculate the area of a rectangle\ndef rectangle_area(l,w):\n    return l*w\n\n#Test the function with values\nprint(rectangle_area(5,10)) #Output: 50\n\n#Test the function with negative values",
        "generated_testcode": "assert parallelogram_perimeter(5, 10) == 30\n",
        "test": "assert parallelogram_perimeter(10,20)==400\nassert parallelogram_perimeter(15,20)==600\nassert parallelogram_perimeter(8,9)==144",
        "canonical_solution": "def parallelogram_perimeter(b,h):\r\n  perimeter=2*(b*h)\r\n  return perimeter"
    },
    {
        "number": 883,
        "prompt": "Write a function to find numbers divisible by m and n from a list of numbers using lambda function.\ndef div_of_nums(nums,m,n):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    return list(filter(lambda x: x%m == 0 and x%n == 0, nums))\n\n# Example usage:\nnums = [2,3,4,5,6,9,10,15,18,20,21,24,25,27,30,33,36,39,40,45,48,50,60,63,66,70,75,90]\nm = 3\nn = 5\nprint(div_of_nums(nums,m,n)) # Output: [15, 30, 45, 60, 75, 90]\n\n# Explanation:\n# 15, 30, 45, 60, 75 and 90 are the numbers in the list that are divisible by both 3 and 5.\n",
        "generated_testcode": "assert div_of_nums(range(1,20),3,5) == [3, 6, 9, 12, 15]\n",
        "test": "assert div_of_nums([19, 65, 57, 39, 152, 639, 121, 44, 90, 190],2,4)==[ 152,44]\nassert div_of_nums([1, 2, 3, 5, 7, 8, 10],2,5)==[10]\nassert div_of_nums([10,15,14,13,18,12,20],10,5)==[10,20]",
        "canonical_solution": "def div_of_nums(nums,m,n):\r\n result = list(filter(lambda x: (x % m == 0 and x % n == 0), nums)) \r\n return result"
    },
    {
        "number": 884,
        "prompt": "Write a python function to check whether all the bits are within a given range or not.\ndef all_Bits_Set_In_The_Given_Range(n,l,r): \n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    return (n & ((1 << l) - 1) & ~((1 << r + 1) - 1) == 0) \n  \n#example usage \nn = 10\nl = 2\nr = 6\nprint(all_Bits_Set_In_The_Given_Range(n,l,r)) # should return True ",
        "generated_testcode": "assert all_Bits_Set_In_The_Given_Range(10,2,5) == True\n",
        "test": "assert all_Bits_Set_In_The_Given_Range(10,2,1) == True \nassert all_Bits_Set_In_The_Given_Range(5,2,4) == False\nassert all_Bits_Set_In_The_Given_Range(22,2,3) == True ",
        "canonical_solution": "def all_Bits_Set_In_The_Given_Range(n,l,r): \r\n    num = ((1 << r) - 1) ^ ((1 << (l - 1)) - 1) \r\n    new_num = n & num \r\n    if (num == new_num): \r\n        return True\r\n    return False"
    },
    {
        "number": 885,
        "prompt": "Write a python function to check whether the two given strings are isomorphic to each other or not.\ndef is_Isomorphic(str1,str2):          \n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    if len(str1) != len(str2):\n        return False\n    dict1 = {}\n    dict2 = {}\n    for i in range(len(str1)):\n        if str1[i] not in dict1:\n            dict1[str1[i]] = str2[i]\n        elif dict1[str1[i]] != str2[i]:\n            return False\n        if str2[i] not in dict2:\n            dict2[str2[i]] = str1[i]\n        elif dict2[str2[i]] != str1[i]:\n            return False\n    return True\n    \n# Test the function\nstr1 = \"egg\"\nstr2 = \"add\"\nif is_Isomorphic(str1, str2):\n    print(\"The strings are isomorphic\")\nelse:\n    print(\"The strings are not isomorphic\")\n    \nstr1 = \"foo\"\nstr2 = \"bar\"\nif is_Isomorphic(str1, str2):\n    print(\"The strings are isomorphic\")\nelse:\n    print(\"The strings are not isomorphic\")\n    \nstr1 = \"paper\"\nstr2 = \"title\"\nif is_Isomorphic(str1, str2):\n    print(\"The strings are isomorphic\")\nelse:\n    print(\"The strings are not isomorphic\")\n    \nstr1 = \"hello\"\nstr2 = \"world\"\nif is_Isomorphic(str1, str2):\n    print(\"The strings are isomorphic\")\n",
        "generated_testcode": "assert is_Isomorphic(\"egg\",\"add\") == True\n",
        "test": "assert is_Isomorphic(\"paper\",\"title\") == True\nassert is_Isomorphic(\"ab\",\"ba\") == True\nassert is_Isomorphic(\"ab\",\"aa\") == False",
        "canonical_solution": "def is_Isomorphic(str1,str2):          \r\n    dict_str1 = {}\r\n    dict_str2 = {}\r\n    for i, value in enumerate(str1):\r\n        dict_str1[value] = dict_str1.get(value,[]) + [i]        \r\n    for j, value in enumerate(str2):\r\n        dict_str2[value] = dict_str2.get(value,[]) + [j]\r\n    if sorted(dict_str1.values()) == sorted(dict_str2.values()):\r\n        return True\r\n    else:\r\n        return False"
    },
    {
        "number": 886,
        "prompt": "Write a function to add all the numbers in a list and divide it with the length of the list.\ndef sum_num(numbers):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    sum = 0\n    for num in numbers:\n        sum += num\n    return sum/len(numbers)\n\n# Test the function\nprint(sum_num([1, 2, 3, 4, 5, 6]) # Output: 3.5\nprint(sum_num([10, 20, 30, 40, 50]) # Output: 30.0\nprint(sum_num([1, 10, 100, 1000, 10000]) # Output: 250.0\nprint(sum_num([0, 0, 0, 0]) # Output: 0.0\nprint(sum_num([1]) # Output: 1.0\nprint(sum_num([]) # Output: 0.0 ",
        "generated_testcode": "assert sum_num([1, 2, 3, 4, 5]) == 3\n",
        "test": "assert sum_num((8, 2, 3, 0, 7))==4.0\nassert sum_num((-10,-20,-30))==-20.0\nassert sum_num((19,15,18))==17.333333333333332",
        "canonical_solution": "def sum_num(numbers):\r\n    total = 0\r\n    for x in numbers:\r\n        total += x\r\n    return total/len(numbers) "
    },
    {
        "number": 887,
        "prompt": "Write a python function to check whether the given number is odd or not using bitwise operator.\ndef is_odd(n) : \n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    if n & 1 == 1 : \n        return True\n    else : \n        return False\n\n#test the function\nprint(is_odd(5)) # Output : True\nprint(is_odd(6)) # Output : False \n",
        "generated_testcode": "assert is_odd(3) == True\n",
        "test": "assert is_odd(5) == True\nassert is_odd(6) == False\nassert is_odd(7) == True",
        "canonical_solution": "def is_odd(n) : \r\n    if (n^1 == n-1) :\r\n        return True; \r\n    else :\r\n        return False; "
    },
    {
        "number": 888,
        "prompt": "Write a function to substract the elements of the given nested tuples.\ndef substract_elements(test_tup1, test_tup2):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": true,
        "answer": "    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] - test_tup2[i])\n    return tuple(result)\n\n# Test the function with the example\ntest_tup1 = (1, 2, 3)\ntest_tup2 = (4, 5, 6)\nprint(substract_elements(test_tup1, test_tup2))  # Output: (-3, -3, -3)\n\n# Test the function with another example\ntest_tup3 = (2, 4, 6)\ntest_tup4 = (1, 2, 3)\nprint(substract_elements(test_tup3, test_tup4))  # Output: (1, 2, 3)\n\n# Test the function with another example\ntest_tup5 = (10, 10, 10)\ntest_tup6 = (2, 4, 6)\nprint(substract_elements(test_tup5, test_tup6))  # Output: (8, 6, 4) ",
        "generated_testcode": "assert substract_elements((1, 2, 3), (4, 5, 6)) == (-3, -3, -3)\n",
        "test": "assert substract_elements(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((-5, -4), (1, -4), (1, 8), (-6, 7))\nassert substract_elements(((13, 4), (14, 6), (13, 10), (12, 11)), ((19, 8), (14, 10), (12, 2), (18, 4))) == ((-6, -4), (0, -4), (1, 8), (-6, 7))\nassert substract_elements(((19, 5), (18, 7), (19, 11), (17, 12)), ((12, 9), (17, 11), (13, 3), (19, 5))) == ((7, -4), (1, -4), (6, 8), (-2, 7))",
        "canonical_solution": "def substract_elements(test_tup1, test_tup2):\r\n  res = tuple(tuple(a - b for a, b in zip(tup1, tup2))\r\n   for tup1, tup2 in zip(test_tup1, test_tup2))\r\n  return (res) "
    },
    {
        "number": 889,
        "prompt": "Write a function to reverse each list in a given list of lists.\ndef reverse_list_lists(lists):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    return [list(reversed(l)) for l in lists]\n\n# Test cases\nprint(reverse_list_lists([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [[3, 2, 1], [6, 5, 4], [9, 8, 7]])\nprint(reverse_list_lists([[1], [2, 3], [4, 5, 6], [7, 8, 9, 10]]) == [[1], [3, 2], [6, 5, 4], [10, 8, 7]])\nprint(reverse_list_lists([]) == [])\nprint(reverse_list_lists([[1]) == [[1]])\n\n# Should print True, True, True, True, True\n# Complexity: O(n) where n is the total number of elements in all the lists. ",
        "generated_testcode": "assert reverse_list_lists([]), []\n",
        "test": "assert reverse_list_lists([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]])==[[4, 3, 2, 1], [8, 7, 6, 5], [12, 11, 10, 9], [16, 15, 14, 13]]\nassert reverse_list_lists([[1,2],[2,3],[3,4]])==[[2,1],[3,2],[4,3]]\nassert reverse_list_lists([[10,20],[30,40]])==[[20,10],[40,30]]",
        "canonical_solution": "def reverse_list_lists(lists):\r\n    for l in lists:\r\n        l.sort(reverse = True)\r\n    return lists "
    },
    {
        "number": 890,
        "prompt": "Write a python function to find the index of an extra element present in one sorted array.\ndef find_Extra(arr1,arr2,n) : \n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    i = 0\n    j = 0\n    while(i < n and j < n) : \n        if arr1[i] == arr2[j] : \n            i += 1\n            j += 1\n        else : \n            return i \n    if i == n : \n        return j \n    else : \n        return -1 \n  \narr1 = [1, 2, 3, 4, 5, 6, 7] \narr2 = [1, 2, 3, 4, 6, 5, 7, 8] \nn = len(arr1) \n  \nprint(find_Extra(arr1, arr2, n)) \n",
        "generated_testcode": "assert find_Extra([1,2,3,4,4,5,6,7,7], [1,2,3,4,5,6,7,8], 6) == 7\n",
        "test": "assert find_Extra([1,2,3,4],[1,2,3],3) == 3\nassert find_Extra([2,4,6,8,10],[2,4,6,8],4) == 4\nassert find_Extra([1,3,5,7,9,11],[1,3,5,7,9],5) == 5",
        "canonical_solution": "def find_Extra(arr1,arr2,n) : \r\n    for i in range(0, n) : \r\n        if (arr1[i] != arr2[i]) : \r\n            return i \r\n    return n "
    },
    {
        "number": 891,
        "prompt": "Write a python function to check whether the given two numbers have same number of digits or not.\ndef same_Length(A,B): \n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    A = str(A)\n    B = str(B)\n    if len(A) == len(B):\n        return True\n    else:\n        return False\n\n# Test Cases\nprint(same_Length(123,456)) # False\nprint(same_Length(123,45)) # True\nprint(same_Length(12345,6789)) # False\nprint(same_Length(999,9999)) # True\nprint(same_Length(1,12)) # True\nprint(same_Length(100,1000)) # False\nprint(same_Length(123456,789)) # False\nprint(same_Length(1234,12345)) # True\n\n# Output\n# False\n# True\n# False\n# False\n# True\n# True\n# True\n# False\n# False\n\n\n# Explanation:\n# Function takes two numbers as input and converts them into string. Then it checks the length of both the numbers and returns True if both the numbers have same number of digits, else False. ",
        "generated_testcode": "assert same_Length(1234, 5678) == True\n",
        "test": "assert same_Length(12,1) == False\nassert same_Length(2,2) == True\nassert same_Length(10,20) == True",
        "canonical_solution": "def same_Length(A,B): \r\n    while (A > 0 and B > 0): \r\n        A = A / 10; \r\n        B = B / 10; \r\n    if (A == 0 and B == 0): \r\n        return True; \r\n    return False; "
    },
    {
        "number": 892,
        "prompt": "Write a function to remove multiple spaces in a string.\ndef remove_spaces(text):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    \"\"\"\n    Remove multiple spaces in a string.\n    \"\"\"\n    return \" \".join(text.split())\n\n# Test the function\nprint(remove_spaces(\"Hello    world!  This is a test.\")) # Output: \"Hello world! This is a test.\"\n\n# Explanation: The function splits the string into a list of words using the split() method, removes the multiple spaces using the join() method and returns the string with single spaces between the words. ",
        "generated_testcode": "assert remove_spaces(\"Hello   World\") == \"Hello World\"\n",
        "test": "assert remove_spaces('python  program')==('python program')\nassert remove_spaces('python   programming    language')==('python programming language')\nassert remove_spaces('python                     program')==('python program')",
        "canonical_solution": "import re\r\ndef remove_spaces(text):\r\n return (re.sub(' +',' ',text))"
    },
    {
        "number": 893,
        "prompt": "Write a python function to get the last element of each sublist.\ndef Extract(lst): \n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    return [sublist[-1] for sublist in lst] \n\n# Example usage:\nlst = [[1, 2, 3], [4, 5, 6], [7, 8, 9]] \nprint(Extract(lst)) # Output: [3, 6, 9] ",
        "generated_testcode": "assert Extract([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [3, 6, 9]\n",
        "test": "assert Extract([[1, 2, 3], [4, 5], [6, 7, 8, 9]]) == [3, 5, 9]\nassert Extract([['x', 'y', 'z'], ['m'], ['a', 'b'], ['u', 'v']]) == ['z', 'm', 'b', 'v']\nassert Extract([[1, 2, 3], [4, 5]]) == [3, 5]",
        "canonical_solution": "def Extract(lst): \r\n    return [item[-1] for item in lst] "
    },
    {
        "number": 894,
        "prompt": "Write a function to convert the given string of float type into tuple.\ndef float_to_tuple(test_str):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    test_str = test_str.strip()\n    if '.' in test_str:\n        num_decimal = len(test_str) - test_str.index('.') - 1\n    else:\n        num_decimal = 0\n    int_part = test_str.split('.')[0]\n    decimal_part = test_str.split('.')[1]\n    if int_part == '':\n        int_part = '0'\n    if decimal_part == '':\n        decimal_part = '0'\n    result = (int_part, decimal_part, num_decimal)\n    return result\n\n# test the function with example\nprint(float_to_tuple('3.14159'))  # output: ('3', '14159', 4)\nprint(float_to_tuple('-2.0'))    # output: ('-2', '0', 1)\nprint(float_to_tuple('0.5'))     # output: ('0', '5', 1)\nprint(float_to_tuple('0'))      # output: ('0', '0', 0)\nprint(float_to_tuple('123456.00'))  # output: ('123456', '00', 2)\nprint(float_to_tuple('-123456'))   # output: ('-123456', '0', 0)\nprint(float_to_tuple('1",
        "generated_testcode": "assert float_to_tuple(\"1.23\") == (1, 2, 3)\n",
        "test": "assert float_to_tuple(\"1.2, 1.3, 2.3, 2.4, 6.5\") == (1.2, 1.3, 2.3, 2.4, 6.5)\nassert float_to_tuple(\"2.3, 2.4, 5.6, 5.4, 8.9\") == (2.3, 2.4, 5.6, 5.4, 8.9)\nassert float_to_tuple(\"0.3, 0.5, 7.8, 9.4\") == (0.3, 0.5, 7.8, 9.4)",
        "canonical_solution": "def float_to_tuple(test_str):\r\n  res = tuple(map(float, test_str.split(', ')))\r\n  return (res) "
    },
    {
        "number": 895,
        "prompt": "Write a function to find the maximum sum of subsequences of given array with no adjacent elements.\ndef max_sum_subseq(A):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    n = len(A)\n    incl = [0] * (n)\n    excl = [0] * (n)\n    excl[0] = 0\n    for i in range(n):\n        incl[i] = max(0, excl[i - 1]) + A[i]\n        excl[i] = max(incl[i - 1], excl[i])\n    return max(incl[n - 1], excl[n - 1])\n\n\n# Test the function\nA = [1, 2, 3, 4, 5, 6, 7, 8, 9]\nprint(max_sum_subseq(A))\n\n# Output: 33\n# Explanation: The maximum sum is obtained by removing the adjacent element 6 and 8, which gives 1 + 2 + 3 + 4 + 5 + 7 + 9 = 19\n\n# Test the function\nA = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nprint(max_sum_subseq(A))\n\n# Output: 40\n# Explanation: The maximum sum is obtained by removing the adjacent element 6, 8 and 9, which gives 1 + 2 + 3 + 4 + 5 + 10 = 19 ",
        "generated_testcode": "assert max_sum_subseq([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 30\n",
        "test": "assert max_sum_subseq([1, 2, 9, 4, 5, 0, 4, 11, 6]) == 26\nassert max_sum_subseq([1, 2, 9, 5, 6, 0, 5, 12, 7]) == 28\nassert max_sum_subseq([1, 3, 10, 5, 6, 0, 6, 14, 21]) == 44",
        "canonical_solution": "def max_sum_subseq(A):\r\n    n = len(A)\r\n    if n == 1:\r\n        return A[0]\r\n    look_up = [None] * n\r\n    look_up[0] = A[0]\r\n    look_up[1] = max(A[0], A[1])\r\n    for i in range(2, n):\r\n        look_up[i] = max(look_up[i - 1], look_up[i - 2] + A[i])\r\n        look_up[i] = max(look_up[i], A[i])\r\n    return look_up[n - 1]"
    },
    {
        "number": 896,
        "prompt": "Write a function to sort a list in increasing order by the last element in each tuple from a given list of non-empty tuples.\ndef last(n):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    return n[-1]\n\ndef sort_list_of_tuples(lst):\n    return sorted(lst, key=last)\n\n# Example usage:\nlst = [(1, 7), (1, 3), (3, 4, 1), (2, 2), (1, 1, 2), (4, 5, 3), (2, 5)]\nprint(sort_list_of_tuples(lst))  # Output: [(1, 1, 2), (1, 7), (2, 2), (2, 5), (3, 4, 1), (4, 5, 3)]\n",
        "generated_testcode": "assert last([(1, 3, 2), (2, 1, 4), (4, 1, 3), (2, 5, 1)] ) == [(2, 1, 4), (1, 3, 2), (2, 5, 1), (4, 1, 3)]\n",
        "test": "assert sort_list_last([(2, 5), (1, 2), (4, 4), (2, 3), (2, 1)])==[(2, 1), (1, 2), (2, 3), (4, 4), (2, 5)] \nassert sort_list_last([(9,8), (4, 7), (3,5), (7,9), (1,2)])==[(1,2), (3,5), (4,7), (9,8), (7,9)] \nassert sort_list_last([(20,50), (10,20), (40,40)])==[(10,20),(40,40),(20,50)] ",
        "canonical_solution": "def last(n):\r\n   return n[-1]\r\ndef sort_list_last(tuples):\r\n  return sorted(tuples, key=last)"
    },
    {
        "number": 897,
        "prompt": "Write a python function to check whether the word is present in a given sentence or not.\ndef is_Word_Present(sentence,word): \n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": true,
        "answer": "    if word in sentence: \n        return True \n    else: \n        return False \n  \n# Test the function \nsentence = \"python is an amazing language\" \nword = \"language\" \nif is_Word_Present(sentence,word): \n    print(\"The word is present in the sentence\") \nelse: \n    print(\"The word is not present in the sentence\") \n  \n# Output: The word is present in the sentence ",
        "generated_testcode": "assert is_Word_Present(\"Hello World\",\"Hello\") == True\n",
        "test": "assert is_Word_Present(\"machine learning\",\"machine\") == True\nassert is_Word_Present(\"easy\",\"fun\") == False\nassert is_Word_Present(\"python language\",\"code\") == False",
        "canonical_solution": "def is_Word_Present(sentence,word): \r\n    s = sentence.split(\" \") \r\n    for i in s:  \r\n        if (i == word): \r\n            return True\r\n    return False"
    },
    {
        "number": 898,
        "prompt": "Write a function to extract specified number of elements from a given list, which follow each other continuously.\ndef extract_elements(numbers, n):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    result = []\n    for i in range(len(numbers)):\n        if i + n - 1 < len(numbers):\n            result.append(numbers[i:i+n])\n    return result\n\n# Example usage:\nnumbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]\nprint(extract_elements(numbers, 3)) # Output: [[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12], [13, 14, 15]]\nprint(extract_elements(numbers, 4)) # Output: [[1, 2, 3, 4, 5], [5, 6, 7, 8], [8, 9, 10, 11], [11, 12, 13, 14], [14, 15, 16]] ",
        "generated_testcode": "assert extract_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3) == [1, 2, 3]\n",
        "test": "assert extract_elements([1, 1, 3, 4, 4, 5, 6, 7],2)==[1, 4]\nassert extract_elements([0, 1, 2, 3, 4, 4, 4, 4, 5, 7],4)==[4]\nassert extract_elements([0,0,0,0,0],5)==[0]",
        "canonical_solution": "from itertools import groupby \r\ndef extract_elements(numbers, n):\r\n    result = [i for i, j in groupby(numbers) if len(list(j)) == n] \r\n    return result"
    },
    {
        "number": 899,
        "prompt": "Write a python function to check whether an array can be sorted or not by picking only the corner elements.\ndef check(arr,n): \n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    # Initialize a variable to store the maximum element in the array\n    max_element = arr[0]\n    # Loop through the array\n    for i in range(1,n):\n        # Check if the current element is greater than the maximum element\n        if(arr[i] > max_element):\n            # If it is, update the maximum element\n            max_element = arr[i]\n    # Check if the last element is equal to the maximum element\n    if(arr[n-1] == max_element):\n        return True\n    else:\n        return False\n\n# Driver code\narr = [1,2,3,4,5,6,7,8,9]\nn = len(arr)\nif check(arr,n):\n    print(\"Array can be sorted by picking corner elements\")\nelse:\n    print(\"Array cannot be sorted by picking corner elements\")\n\narr = [1,2,3,4,5,6,7,10]\nn = len(arr)\nif check(arr,n):\n    print(\"Array can be sorted by picking corner elements\")\nelse:\n    print(\"Array cannot be sorted by picking corner elements\") ",
        "generated_testcode": "assert check([1,2,3,4,5,6,7,8,9], 6) == True\n",
        "test": "assert check([3,2,1,2,3,4],6) == True\nassert check([2,1,4,5,1],5) == True\nassert check([1,2,2,1,2,3],6) == True",
        "canonical_solution": "def check(arr,n): \r\n    g = 0 \r\n    for i in range(1,n): \r\n        if (arr[i] - arr[i - 1] > 0 and g == 1): \r\n            return False\r\n        if (arr[i] - arr[i] < 0): \r\n            g = 1\r\n    return True"
    },
    {
        "number": 900,
        "prompt": "Write a function where a string will start with a specific number.\ndef match_num(string):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    # get the first char of the string\n    first_char = string[0]\n    # convert it to int\n    num = int(first_char)\n    # check if it's in range of 0-9\n    if num in range(0, 9):\n        return True\n    else:\n        return False\n\n# Test cases\nprint(match_num(\"8hello\"))\nprint(match_num(\"a\"))\nprint(match_num(\"1world\"))\nprint(match_num(\"123\"))\nprint(match_num(\"2\"))\nprint(match_num(\"0\"))\nprint(match_num(\"9\"))\n\n# Expected output: \n# True\n# False\n# True\n# True\n# True\n# True\n# True ",
        "generated_testcode": "assert match_num(\"123hello\") == True\n",
        "test": "assert match_num('5-2345861')==True\nassert match_num('6-2345861')==False\nassert match_num('78910')==False",
        "canonical_solution": "import re\r\ndef match_num(string):\r\n    text = re.compile(r\"^5\")\r\n    if text.match(string):\r\n        return True\r\n    else:\r\n        return False"
    },
    {
        "number": 901,
        "prompt": "Write a function to find the smallest multiple of the first n numbers.\ndef smallest_multiple(n):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    from math import gcd\n    from functools import reduce\n    return reduce(lambda x, y: x * y // gcd(x, y), range(1, n + 1))\n\n\nprint(smallest_multiple(20)) # Output: 232792560\n\n# Test with Project Euler\nprint(smallest_multiple(20)) # Output: 232792560\n\n# or \n# def smallest_multiple(n):\n#     def gcd(a, b):\n#         while b:\n#             a, b = b, a % b\n#         return a\n#\n#     def lcm(a, b):\n#         return a * b // gcd(a, b)\n#\n#     return reduce(lcm, range(1, n + 1))\n#\n# print(smallest_multiple(20)) # Output: 232792560\n",
        "generated_testcode": "assert smallest_multiple(2) == 2\n",
        "test": "assert smallest_multiple(13)==360360\nassert smallest_multiple(2)==2\nassert smallest_multiple(1)==1",
        "canonical_solution": "def smallest_multiple(n):\r\n    if (n<=2):\r\n      return n\r\n    i = n * 2\r\n    factors = [number  for number in range(n, 1, -1) if number * 2 > n]\r\n    while True:\r\n        for a in factors:\r\n            if i % a != 0:\r\n                i += n\r\n                break\r\n            if (a == factors[-1] and i % a == 0):\r\n                return i"
    },
    {
        "number": 902,
        "prompt": "Write a function to combine two dictionaries by adding values for common keys.\ndef add_dict(d1,d2):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    result = {}\n    for key in d1:\n        if key in d2:\n            result[key] = d1[key] + d2[key]\n        else:\n            result[key] = d1[key]\n    for key in d2:\n        if key not in d1:\n            result[key] = d2[key]\n    return result\n\n# Test the function with an example\nd1 = {'a': 100, 'b': 200, 'c': 300}\nd2 = {'a': 100, 'b': 200, 'd': 400}\nprint(add_dict(d1,d2))\n# Output: {'a': 200, 'b': 400, 'c': 300, 'd': 400}\n\n# Test the function with another example\nd1 = {'a': 100, 'b': 200, 'c': 300}\nd2 = {'a': 200, 'd': 400, 'e': 500}\nprint(add_dict(d1,d2))\n# Output: {'a': 300, 'b': 200, 'c': 300, 'd': 400, 'e': 500} ",
        "generated_testcode": "assert add_dict({'a':1, 'b':2}, {'b':3, 'c':4}) == {'a':1, 'b':5, 'c':4}\n",
        "test": "assert add_dict({'a': 100, 'b': 200, 'c':300},{'a': 300, 'b': 200, 'd':400})==({'b': 400, 'd': 400, 'a': 400, 'c': 300}) \nassert add_dict({'a': 500, 'b': 700, 'c':900},{'a': 500, 'b': 600, 'd':900})==({'b': 1300, 'd': 900, 'a': 1000, 'c': 900}) \nassert add_dict({'a':900,'b':900,'d':900},{'a':900,'b':900,'d':900})==({'b': 1800, 'd': 1800, 'a': 1800})",
        "canonical_solution": "from collections import Counter\r\ndef add_dict(d1,d2):\r\n   add_dict = Counter(d1) + Counter(d2)\r\n   return add_dict"
    },
    {
        "number": 903,
        "prompt": "Write a python function to count the total unset bits from 1 to n.\ndef count_Unset_Bits(n) :  \n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    count = 0\n    for i in range(1, n+1) : \n        count += bin(i).count('0') \n    return count \n  \n# Test the function \nn = 5\nprint(\"Number of unset bits from 1 to\", n, \"is\", count_Unset_Bits(n)) \n  \n# Output: 15 ",
        "generated_testcode": "assert count_Unset_Bits(5) == 2\n",
        "test": "assert count_Unset_Bits(2) == 1\nassert count_Unset_Bits(5) == 4\nassert count_Unset_Bits(14) == 17",
        "canonical_solution": "def count_Unset_Bits(n) :  \r\n    cnt = 0;  \r\n    for i in range(1,n + 1) : \r\n        temp = i;  \r\n        while (temp) :  \r\n            if (temp % 2 == 0) : \r\n                cnt += 1;  \r\n            temp = temp // 2;  \r\n    return cnt;  "
    },
    {
        "number": 904,
        "prompt": "Write a function to return true if the given number is even else return false.\ndef even_num(x):\n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    if x%2==0:\n        return True\n    else:\n        return False\n#test cases\nprint(even_num(4)) #True\nprint(even_num(7)) #False\nprint(even_num(0)) #True\n\n#Write a function to return true if the given number is odd else return false.\ndef odd_num(x):\n    if x%2!=0:\n        return True\n    else:\n        return False\n#test cases\nprint(odd_num(4)) #False\nprint(odd_num(7)) #True\nprint(odd_num(0)) #False\n\n#Write a function to return true if the given number is divisible by 3 else return false.\ndef divisible_by_3(x):\n    if x%3==0:\n        return True\n    else:\n        return False\n#test cases\nprint(divisible_by_3(9)) #True\nprint(divisible_by_3(15)) #True\nprint(divisible_by_3(4)) #False\n\n#Write a function to return true if the given number is a multiple of 5 else return false.\ndef multiple_of_5(x):\n    if x%5==0:\n        return True\n    else:\n        return False\n#test cases\nprint(multiple_of_5(10)) #True\nprint(multiple_of_5(25)) #True\nprint(multiple_of_5(7)) #False\n\n#Write",
        "generated_testcode": "assert even_num(4) == True\n",
        "test": "assert even_num(13.5)==False\nassert even_num(0)==True\nassert even_num(-9)==False",
        "canonical_solution": "def even_num(x):\r\n  if x%2==0:\r\n     return True\r\n  else:\r\n    return False"
    },
    {
        "number": 905,
        "prompt": "Write a python function to find the sum of squares of binomial co-efficients.\ndef factorial(start,end): \n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    fact = 1\n    for i in range(start, end+1): \n        fact = fact * i \n    return fact\n\ndef binomial(n, k): \n    return factorial(n) // (factorial(k) * factorial(n-k)) \n\ndef sum_of_squares(n, r): \n    sum = 0\n    for i in range(r+1): \n        sum += binomial(n, i)**2\n    return sum \n  \nn = 5\nr = 3\nprint(\"Sum of squares of binomial co-efficients for n =\", n, \"and r =\", r, \"is\", sum_of_squares(n, r)) ",
        "generated_testcode": "assert factorial(5,10) == 24*30240\n",
        "test": "assert sum_of_square(4) == 70\nassert sum_of_square(5) == 252\nassert sum_of_square(2) == 6",
        "canonical_solution": "def factorial(start,end): \r\n    res = 1 \r\n    for i in range(start,end + 1): \r\n        res *= i      \r\n    return res \r\ndef sum_of_square(n): \r\n   return int(factorial(n + 1, 2 * n)  /factorial(1, n)) "
    },
    {
        "number": 906,
        "prompt": "Write a function to extract year, month and date from a url by using regex.\ndef extract_date(url):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    pattern = re.compile(r'(\\d{4})/(\\d{2})/(\\d{2})')\n    match = pattern.search(url)\n    if match:\n        year = match.group(1)\n        month = match.group(2)\n        date = match.group(3)\n        return f'{year}-{month}-{date}'\n    else:\n        return None\n\n# example usage\nurl = 'https://example.com/blog/2021/12/31/my-article'\nprint(extract_date(url))  # output: '2021-12-31'\n\nurl = 'https://example.com/blog/not-a-date'\nprint(extract_date(url))  # output: None\n```\n\nThis function takes a url string as input and tries to find a date pattern in the form of `yyyy/mm/dd` in it. If a match is found, it returns a string in the format `yyyy-mm-dd`, otherwise it returns `None`. Note that the regex pattern is slightly different from the one used in the previous examples, as we need to match the date with leading zeroes. ",
        "generated_testcode": "assert extract_date(\"https://www.example.com/2021/09/10/example-post\") == (2021, 9, 10)\n",
        "test": "assert extract_date(\"https://www.washingtonpost.com/news/football-insider/wp/2016/09/02/odell-beckhams-fame-rests-on-one-stupid-little-ball-josh-norman-tells-author/\") == [('2016', '09', '02')]\nassert extract_date(\"https://www.indiatoday.in/movies/celebrities/story/wp/2020/11/03/odeof-sushant-singh-rajput-s-death-his-brother-in-law-shares-advice-for-fans-1749646/\") == [('2020', '11', '03')]\nassert extract_date(\"https://economictimes.indiatimes.com/news/economy/2020/12/29/finance/pension-assets-under-pfrda-touch-rs-5-32-lakh-crore/articleshow/79736619.cms\") == [('2020', '12', '29')]",
        "canonical_solution": "import re\r\ndef extract_date(url):\r\n        return re.findall(r'/(\\d{4})/(\\d{1,2})/(\\d{1,2})/', url)"
    },
    {
        "number": 907,
        "prompt": "Write a function to print the first n lucky numbers.\ndef lucky_num(n):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    lucky_numbers = [4, 7, 8]\n    for i in range(n):\n        if i > 2:\n            lucky_numbers.append(lucky_numbers[i - 1] + lucky_numbers[i])\n    return lucky_numbers[:n]\n\nn = int(input(\"Enter a number: \"))\nprint(lucky_num(n))\n\n# Output: [4, 7, 8, 11, 15, 18, 23, 26, 34, 41, 49, 55, 66, 77, 90, 100, 117, 131, 148]\n\n# Explanation:\n# The lucky numbers are 4, 7, 8, 11, 15, 18, 23, 26, 34, 41, 49, 55, 66, 77, 90, 100, 117, 131, 148, 165, 182, 203, 221, 254, 286, 315, 346, 390, 431, 483, 540, 611, 684, 776, 895, 100",
        "generated_testcode": "assert lucky_num(5) == [4, 7, 13, 16, 23, 28]\n",
        "test": "assert lucky_num(10)==[1, 3, 7, 9, 13, 15, 21, 25, 31, 33] \nassert lucky_num(5)==[1, 3, 7, 9, 13]\nassert lucky_num(8)==[1, 3, 7, 9, 13, 15, 21, 25]",
        "canonical_solution": "def lucky_num(n):\r\n List=range(-1,n*n+9,2)\r\n i=2\r\n while List[i:]:List=sorted(set(List)-set(List[List[i]::List[i]]));i+=1\r\n return List[1:n+1]"
    },
    {
        "number": 908,
        "prompt": "Write a function to find the fixed point in the given array.\ndef find_fixed_point(arr, n): \n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    for i in range(n): \n        if arr[i] == i: \n            return i \n    return -1\n\n\n# Driver code\narr = [2, 5, 7, 8, 3, 6, 4, 0, 9, 1, 6] \nn = len(arr) \nprint(\"Fixed Point is\", find_fixed_point(arr, n)) ",
        "generated_testcode": "assert find_fixed_point([1, 2, 3, 4, 5, 6, 7], 5) == None\n",
        "test": "assert find_fixed_point([-10, -1, 0, 3, 10, 11, 30, 50, 100],9) == 3\nassert find_fixed_point([1, 2, 3, 4, 5, 6, 7, 8],8) == -1\nassert find_fixed_point([0, 2, 5, 8, 17],5) == 0",
        "canonical_solution": "def find_fixed_point(arr, n): \r\n\tfor i in range(n): \r\n\t\tif arr[i] is i: \r\n\t\t\treturn i \r\n\treturn -1"
    },
    {
        "number": 909,
        "prompt": "Write a function to find the previous palindrome of a specified number.\ndef previous_palindrome(num):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    # Convert the number to a string\n    num_str = str(num)\n    # Check if the number is already a palindrome\n    if num_str == num_str[::-1]:\n        return num - 1\n    # If not, reverse the string and look for the next smallest number that is a palindrome\n    else:\n        reverse_str = num_str[::-1]\n        # Look for the first non-matching digit\n        i = 0\n        while i < len(num_str) // 2:\n            if num_str[i] > reverse_str[i]:\n                break\n            i += 1\n        # If the first digit is smaller than the corresponding digit from the reverse string, remove it and repeat the process\n        if num_str[i] < reverse_str[i]:\n            num_str = num_str[:i] + str(int(num_str[i]) - 1) + num_str[i+1:]\n            return int(num_str)\n        # If the first digit is equal to the corresponding digit, remove it and add a 9 at the end\n        else:\n            num_str = num_str[:i] + str(int(num_str[i]) - 1) + '9' * (len(num_str) - i - 1)\n            return int(num_str)\n\n# Test cases\nprint(previous_palindrome(1331)) # Output: 12321\nprint(previous",
        "generated_testcode": "assert previous_palindrome(12321) == 1221\n",
        "test": "assert previous_palindrome(99)==88\nassert previous_palindrome(1221)==1111\nassert previous_palindrome(120)==111",
        "canonical_solution": "def previous_palindrome(num):\r\n    for x in range(num-1,0,-1):\r\n        if str(x) == str(x)[::-1]:\r\n            return x"
    },
    {
        "number": 910,
        "prompt": "Write a function to validate a gregorian date.\ndef check_date(m, d, y):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    if y < 1:\n        return False\n    if m < 1 or m > 12:\n        return False\n    if d < 1:\n        return False\n    if m == 2:\n        if is_leap_year(y):\n            return d <= 29\n        else:\n            return d <= 28\n    elif m in [4, 6, 9, 11]:\n        return d <= 30\n    elif m == 10:\n        return d <= 31\n    else:\n        return d <= 31\n\ndef is_leap_year(year):\n    if year % 4 != 0:\n        return False\n    elif year % 100 != 0:\n        return True\n    elif year % 400 != 0:\n        return False\n    else:\n        return True\n\n# test cases\nprint(check_date(2, 29, 20000)) # True\nprint(check_date(2, 29, 1900)) # False\nprint(check_date(2, 29, 2004)) # True\nprint(check_date(2, 30, 2017)) # False\nprint(check_date(2, 30, 2016)) # True\nprint(check_date(2, 31, 2017)) # False\nprint(check_date(2, 29,",
        "generated_testcode": "assert check_date(2, 29, 2020) == True\n",
        "test": "assert check_date(11,11,2002)==True\nassert check_date(13,11,2002)==False\nassert check_date('11','11','2002')==True",
        "canonical_solution": "import datetime\r\ndef check_date(m, d, y):\r\n    try:\r\n        m, d, y = map(int, (m, d, y))\r\n        datetime.date(y, m, d)\r\n        return True\r\n    except ValueError:\r\n        return False"
    },
    {
        "number": 911,
        "prompt": "Write a function to compute maximum product of three numbers of a given array of integers using heap queue algorithm.\ndef maximum_product(nums):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": true,
        "answer": "    max1 = max2 = max3 = float('-inf')\n    min1 = min2 = float('inf')\n\n    for num in nums:\n        if num > max1:\n            max3 = max2\n            max2 = max1\n            max1 = num\n        elif num > max2:\n            max3 = max2\n            max2 = num\n        elif num > max3:\n            max3 = num\n\n        if num < min1:\n            min2 = min1\n            min1 = num\n        elif num < min2:\n            min2 = num\n\n    return max(max1 * max2 * max3, max1 * min1 * min2)\n\n# Test cases\nprint(maximum_product([-10, -10, 5, 2, 6]))  # Output: 400\nprint(maximum_product([-10, -5, -3, 2, 6]))  # Output: 150\nprint(maximum_product([-2, -3, -10, -5, 0, 4]))  # Output: 240\n",
        "generated_testcode": "assert maximum_product([1, 2, 3, 4, 5]) == 60\n",
        "test": "assert maximum_product( [12, 74, 9, 50, 61, 41])==225700\nassert maximum_product([25, 35, 22, 85, 14, 65, 75, 25, 58])==414375\nassert maximum_product([18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1])==2520",
        "canonical_solution": "def maximum_product(nums):\r\n    import heapq\r\n    a, b = heapq.nlargest(3, nums), heapq.nsmallest(2, nums)\r\n    return max(a[0] * a[1] * a[2], a[0] * b[0] * b[1])"
    },
    {
        "number": 912,
        "prompt": "Write a function to find ln, m lobb number.\ndef binomial_coeff(n, k): \n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    result = 1\n    # calculate (n k)  \n    for i in range(1, k + 1): \n        result *= (n - i + 1) \n        result //= i \n    return result \n\ndef ln_lobb(n, k): \n    # calculate (n k) \n    binomial = binomial_coeff(n, k) \n    return binomial \n\n# Test the function \nn = 5\nk = 2\nprint(\"Binomial coefficient of\", n, \"and\", k, \"is\", ln_lobb(n, k)) ",
        "generated_testcode": "assert binomial_coeff(5, 3) == 10\n",
        "test": "assert int(lobb_num(5, 3)) == 35\nassert int(lobb_num(3, 2)) == 5\nassert int(lobb_num(4, 2)) == 20",
        "canonical_solution": "def binomial_coeff(n, k): \r\n\tC = [[0 for j in range(k + 1)] \r\n\t\t\tfor i in range(n + 1)] \r\n\tfor i in range(0, n + 1): \r\n\t\tfor j in range(0, min(i, k) + 1): \r\n\t\t\tif (j == 0 or j == i): \r\n\t\t\t\tC[i][j] = 1\r\n\t\t\telse: \r\n\t\t\t\tC[i][j] = (C[i - 1][j - 1] \r\n\t\t\t\t\t\t\t+ C[i - 1][j]) \r\n\treturn C[n][k] \r\ndef lobb_num(n, m): \r\n\treturn (((2 * m + 1) *\r\n\t\tbinomial_coeff(2 * n, m + n)) \r\n\t\t\t\t\t/ (m + n + 1))"
    },
    {
        "number": 913,
        "prompt": "Write a function to check for a number at the end of a string.\ndef end_num(string):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": true,
        "answer": "    if string[-1].isdigit():\n        return True\n    else:\n        return False\n    \n# Test the function with the string 'hello123'\nprint(end_num('hello123')) # Should return True\n# Test the function with the string 'hello'\nprint(end_num('hello')) # Should return False ",
        "generated_testcode": "assert end_num(\"hello123\") == True\n",
        "test": "assert end_num('abcdef')==False\nassert end_num('abcdef7')==True\nassert end_num('abc')==False",
        "canonical_solution": "import re\r\ndef end_num(string):\r\n    text = re.compile(r\".*[0-9]$\")\r\n    if text.match(string):\r\n        return True\r\n    else:\r\n        return False"
    },
    {
        "number": 914,
        "prompt": "Write a python function to check whether the given string is made up of two alternating characters or not.\ndef is_Two_Alter(s):  \n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    if len(s) < 2:\n        return False\n    if s[0] == s[1]:\n        return False\n    for i in range(2, len(s), 2):\n        if s[i] == s[i-2]:\n            return False\n    return True\n    \ns = input(\"Enter a string: \")\nif is_Two_Alter(s):\n    print(\"String is made up of two alternating characters\")\nelse:\n    print(\"String is not made up of two alternating characters\")\n    \n#Example:\n#Input:\n#Enter a string: aaabbccdd\n#Output: String is made up of two alternating characters\n\n#Input:\n#Enter a string: aaabcd\n#Output: String is not made up of two alternating characters\n\n#Time Complexity: O(n) ",
        "generated_testcode": "assert is_Two_Alter(\"AABBCC\") == True\n",
        "test": "assert is_Two_Alter(\"abab\") == True\nassert is_Two_Alter(\"aaaa\") == False\nassert is_Two_Alter(\"xyz\") == False",
        "canonical_solution": "def is_Two_Alter(s):  \r\n    for i in range (len( s) - 2) : \r\n        if (s[i] != s[i + 2]) : \r\n            return False\r\n    if (s[0] == s[1]): \r\n        return False\r\n    return True"
    },
    {
        "number": 915,
        "prompt": "Write a function to rearrange positive and negative numbers in a given array using lambda function.\ndef rearrange_numbs(array_nums):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    sorted_array = sorted(array_nums, key=lambda x: x<0)\n    return sorted_array\n\n# Test the function\nprint(rearrange_numbs([-3, -2, 5, 1, -1, 4, -6, 2, 0, 7, -4])) #[-3, -2, -1, -4, -6, 5, 1, 2, 0, 7]\nprint(rearrange_numbs([-1, -2, 3, -4, 5, -6, 2, 4, 0, -7])) #[-1, -2, -4, -6, -3, 5, 2, 4, 0, 3]\nprint(rearrange_numbs([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])) #[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nprint(rearrange_numbs([-10, -20, -30, -40, 50, 60, 70, 80, 90])) #[-10, -20, -30, -40, 50, 60, 70, 80, 90]\nprint(rearrange_numbs([1, -2, -3,",
        "generated_testcode": "assert rearrange_numbs([1, -2, 3, -4, 5, 6, -7]) == [-2, -4, -7, 1, 3, 5]\n",
        "test": "assert rearrange_numbs([-1, 2, -3, 5, 7, 8, 9, -10])==[2, 5, 7, 8, 9, -10, -3, -1]\nassert rearrange_numbs([10,15,14,13,-18,12,-20])==[10, 12, 13, 14, 15, -20, -18]\nassert rearrange_numbs([-20,20,-10,10,-30,30])==[10, 20, 30, -30, -20, -10]",
        "canonical_solution": "def rearrange_numbs(array_nums):\r\n  result = sorted(array_nums, key = lambda i: 0 if i == 0 else -1 / i)\r\n  return result "
    },
    {
        "number": 916,
        "prompt": "Write a function to find if there is a triplet in the array whose sum is equal to a given value.\ndef find_triplet_array(A, arr_size, sum): \n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    A.sort() \n    for i in range(0, arr_size-2): \n        left = i + 1\n        right = arr_size - 1\n        while (left < right): \n            if (A[i] + A[left] + A[right] == sum): \n                return True\n            elif (A[i] + A[left] + A[right] < sum): \n                left += 1\n            else: \n                right -= 1\n    return False\n\ndef main():\n    A = [1, 4, 45, 10, 6, 10, 12, 19, 20, 23, 4] \n    arr_size = len(A)\n    sum = 60\n    if (find_triplet_array(A, arr_size, sum)): \n        print(\"Triplet found\")\n    else: \n        print(\"No triplet found\") \n\nmain() ",
        "generated_testcode": "assert find_triplet_array([1, 4, 45, 6, 10, 8, 7, 2, 12, 11, 26, 18, 5], 9) == True\n",
        "test": "assert find_triplet_array([1, 4, 45, 6, 10, 8], 6, 22) == (4, 10, 8)\nassert find_triplet_array([12, 3, 5, 2, 6, 9], 6, 24) == (12, 3, 9)\nassert find_triplet_array([1, 2, 3, 4, 5], 5, 9) == (1, 3, 5)",
        "canonical_solution": "def find_triplet_array(A, arr_size, sum): \r\n\tfor i in range( 0, arr_size-2): \r\n\t\tfor j in range(i + 1, arr_size-1): \r\n\t\t\tfor k in range(j + 1, arr_size): \r\n\t\t\t\tif A[i] + A[j] + A[k] == sum: \r\n\t\t\t\t\treturn  A[i],A[j],A[k] \r\n\t\t\t\t\treturn True\r\n\treturn False"
    },
    {
        "number": 917,
        "prompt": "Write a function to find the sequences of one upper case letter followed by lower case letters.\ndef text_uppercase_lowercase(text):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": true,
        "answer": "    count = 0\n    is_upper = False\n    for i in range(len(text)):\n        if text[i].isupper():\n            is_upper = True\n            continue\n        if is_upper and text[i].islower():\n            count += 1\n            is_upper = False\n    return count\n\nprint(text_uppercase_lowercase(\"HeLLo WorLD!\")) # Output: 3\nprint(text_uppercase_lowercase(\"Python\")) # Output: 0\nprint(text_uppercase_lowercase(\"Hello world\")) # Output: 0\nprint(text_uppercase_lowercase(\"Hello WORLD\")) # Output: 1\nprint(text_uppercase_lowercase(\"HEllo wOrld\")) # Output: 2\nprint(text_uppercase_lowercase(\"HELLO wORLD\")) # Output: 2\n\n# Explanation:\n# The function iterates through the text and checks if the current character is uppercase. If it is, it sets the is_upper flag to True.\n# If the next character is lowercase and is_upper is True, it means that the previous character was uppercase and the current one is lowercase,\n# so it increments the count and resets the is_upper flag. The function returns the count after iterating through the entire string. ",
        "generated_testcode": "assert text_uppercase_lowercase(\"Hello world\") == True\n",
        "test": "assert text_uppercase_lowercase(\"AaBbGg\")==('Found a match!')\nassert text_uppercase_lowercase(\"aA\")==('Not matched!')\nassert text_uppercase_lowercase(\"PYTHON\")==('Not matched!')",
        "canonical_solution": "import re\r\ndef text_uppercase_lowercase(text):\r\n        patterns = '[A-Z]+[a-z]+$'\r\n        if re.search(patterns, text):\r\n                return 'Found a match!'\r\n        else:\r\n                return ('Not matched!')"
    },
    {
        "number": 918,
        "prompt": "Write a function to count coin change.\ndef coin_change(S, m, n): \n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    dp = [0] * (n+1) \n    dp[0] = 1\n    for i in range(m): \n        for j in range(S[i], n+1): \n            dp[j] += dp[j-S[i]] \n    return dp[n] \n\n# Driver code \nS = [1, 2, 3] \nm = len(S) \nn = 4\nprint(coin_change(S, m, n)) \n\n# Time Complexity: O(mn)\n# Space Complexity: O(n) ",
        "generated_testcode": "assert coin_change([1, 2, 3], 4, 4) == 4\n",
        "test": "assert coin_change([1, 2, 3],3,4)==4\nassert coin_change([4,5,6,7,8,9],6,9)==2\nassert coin_change([4,5,6,7,8,9],6,4)==1",
        "canonical_solution": "def coin_change(S, m, n): \r\n    table = [[0 for x in range(m)] for x in range(n+1)] \r\n    for i in range(m): \r\n        table[0][i] = 1\r\n    for i in range(1, n+1): \r\n        for j in range(m): \r\n            x = table[i - S[j]][j] if i-S[j] >= 0 else 0\r\n            y = table[i][j-1] if j >= 1 else 0 \r\n            table[i][j] = x + y   \r\n    return table[n][m-1] "
    },
    {
        "number": 919,
        "prompt": "Write a python function to multiply all items in the list.\ndef multiply_list(items):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    result = 1\n    for item in items:\n        result *= item\n    return result\n\n# Test the function with the list [1, 2, 3, 4]\nprint(multiply_list([1, 2, 3, 4]))  # Output: 24\n\n# Test the function with the list [1, -2, 0, 5]\nprint(multiply_list([1, -2, 0, 5]))  # Output: 0\n\n# Test the function with the list [1.5, 2.5, 3.5]\nprint(multiply_list([1.5, 2.5, 3.5]))  # Output: 9.375\n\n# Test the function with the empty list\nprint(multiply_list([]))  # Output: 1 ",
        "generated_testcode": "assert multiply_list([1, 2, 3, 4, 5]) == 1 * 2 * 3 * 4 * 5\n",
        "test": "assert multiply_list([1,-2,3]) == -6\nassert multiply_list([1,2,3,4]) == 24\nassert multiply_list([3,1,2,3]) == 18",
        "canonical_solution": "def multiply_list(items):\r\n    tot = 1\r\n    for x in items:\r\n        tot *= x\r\n    return tot"
    },
    {
        "number": 920,
        "prompt": "Write a function to remove all tuples with all none values in the given tuple list.\ndef remove_tuple(test_list):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    result = []\n    for i in test_list:\n        if not all(v is None for v in i):\n            result.append(i)\n    return result\n\n# Test the function with the following input\ntest_list = [(1,2,3,4), (None,None,None), (5,6,7), (None,None), (8,None,10), (11,12,13,14)]\nprint(remove_tuple(test_list)) # [(1, 2, 3, 4), (5, 6, 7), (8, None, 10), (11, 12, 13, 14)]\n\n# Expected Output: [(1, 2, 3, 4), (5, 6, 7), (8, None, 10), (11, 12, 13, 14)]\n# Since the second and third tuples have all None values, they should be removed. ",
        "generated_testcode": "assert remove_tuple(test_list) == expected_output\n\n# Test the function with the following input\ntest_list = [(1, 2, 3), (None, None), (4, 5, None), (6, None, 7), (None, None, None), (8, 9, 10)]\nexpected_output = [(1, 2, 3), (4, 5, None), (6, None, 7), (8, 9, 10)]\n\n",
        "test": "assert remove_tuple([(None, 2), (None, None), (3, 4), (12, 3), (None, )] ) == '[(None, 2), (3, 4), (12, 3)]'\nassert remove_tuple([(None, None), (None, None), (3, 6), (17, 3), (None,1 )] ) == '[(3, 6), (17, 3), (None, 1)]'\nassert remove_tuple([(1, 2), (2, None), (3, None), (24, 3), (None, None )] ) == '[(1, 2), (2, None), (3, None), (24, 3)]'",
        "canonical_solution": "def remove_tuple(test_list):\r\n  res = [sub for sub in test_list if not all(ele == None for ele in sub)]\r\n  return (str(res)) "
    },
    {
        "number": 921,
        "prompt": "Write a function to perform chunking of tuples each of size n.\ndef chunk_tuples(test_tup, N):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    result = []\n    temp = []\n    count = 0\n    for i in test_tup:\n        temp.append(i)\n        count += 1\n        if count % N == 0:\n            result.append(tuple(temp))\n            temp = []\n    if temp:\n        result.append(tuple(temp))\n    return result\n\n\n# Test the function\ntest_tup = (1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18)\nN = 3\nprint(chunk_tuples(test_tup, N))\n\n# Output: [(1, 2, 3), (4, 5, 6), (7, 8, 9), (10, 11, 12), (13, 14, 15), (16, 17, 18)]\n\n# Test the function with another input\ntest_tup = (1, 2, 3, 4, 5, 6, 7, 8, 9, 10)\nN = 4\nprint(chunk_tuples(test_tup, N))\n\n# Output: [(1, 2, 3, 4), (5, 6, 7, 8), (9, 10)]\n",
        "generated_testcode": "assert chunk_tuples(('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p'), 3) == [('a', 'b', 'c'), ('d', 'e', 'f'), ('g', 'h', 'i'), ('j', 'k', 'l'), ('m', 'n', 'o'), ('p',)]\n",
        "test": "assert chunk_tuples((10, 4, 5, 6, 7, 6, 8, 3, 4), 3) == [(10, 4, 5), (6, 7, 6), (8, 3, 4)]\nassert chunk_tuples((1, 2, 3, 4, 5, 6, 7, 8, 9), 2) == [(1, 2), (3, 4), (5, 6), (7, 8), (9,)]\nassert chunk_tuples((11, 14, 16, 17, 19, 21, 22, 25), 4) == [(11, 14, 16, 17), (19, 21, 22, 25)]",
        "canonical_solution": "def chunk_tuples(test_tup, N):\r\n  res = [test_tup[i : i + N] for i in range(0, len(test_tup), N)]\r\n  return (res) "
    },
    {
        "number": 922,
        "prompt": "Write a function to find a pair with the highest product from a given array of integers.\ndef max_product(arr): \n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    arr.sort() \n    if arr[0] < 0: \n        return arr[-1] * arr[-2] \n    else: \n        return max(arr[0] * arr[-1], arr[-1] * arr[-2]) \n  \n# Example usage: \narr = [1, 2, 3, -4, 5] \nprint(max_product(arr)) # Output: 15 \n\narr = [-10, -10, 5, 2, 6] \nprint(max_product(arr)) # Output: 50 \n\narr = [-2, -3, -4, -5, -1] \nprint(max_product(arr)) # Output: 10 ",
        "generated_testcode": "assert max_product([1, 2, 3, 4, 5]) == 20\n",
        "test": "assert max_product([1, 2, 3, 4, 7, 0, 8, 4])==(7, 8)\nassert max_product([0, -1, -2, -4, 5, 0, -6])==(-4, -6)\nassert max_product([1, 3, 5, 6, 8, 9])==(8,9)",
        "canonical_solution": "def max_product(arr): \r\n    arr_len = len(arr) \r\n    if (arr_len < 2): \r\n        return None     \r\n    x = arr[0]; y = arr[1]    \r\n    for i in range(0, arr_len): \r\n        for j in range(i + 1, arr_len): \r\n            if (arr[i] * arr[j] > x * y): \r\n                x = arr[i]; y = arr[j] \r\n    return x,y   "
    },
    {
        "number": 923,
        "prompt": "Write a function to find the length of the shortest string that has both str1 and str2 as subsequences.\ndef super_seq(X, Y, m, n):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    dp = [[0] * (n + 1) for i in range(m + 1)]\n    for i in range(m + 1):\n        for j in range(n + 1):\n            if i == 0:\n                dp[i][j] = j\n            elif j == 0:\n                dp[i][j] = i\n            elif X[i - 1] == Y[j - 1]:\n                dp[i][j] = dp[i - 1][j - 1] + 1\n            else:\n                dp[i][j] = 1 + min(dp[i - 1][j], dp[i][j - 1])\n    return dp[m][n]\n\n\n\ndef lcs(X, Y, m, n):\n    dp = [[0] * (n + 1) for i in range(m + 1)]\n    for i in range(m + 1):\n        for j in range(n + 1):\n            if i == 0 or j == 0:\n                dp[i][j] = 0\n            elif X[i - 1] == Y[j - 1]:\n                dp[i][j] = 1 + dp[i - 1][j - 1]\n            else:\n                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n    return",
        "generated_testcode": "assert super_seq(\"AGGTAB\", \"GXTXAYB\", 6, 6) == 4\n",
        "test": "assert super_seq(\"AGGTAB\", \"GXTXAYB\", 6, 7) == 9\nassert super_seq(\"feek\", \"eke\", 4, 3) == 5\nassert super_seq(\"PARRT\", \"RTA\", 5, 3) == 6",
        "canonical_solution": "def super_seq(X, Y, m, n):\r\n\tif (not m):\r\n\t\treturn n\r\n\tif (not n):\r\n\t\treturn m\r\n\tif (X[m - 1] == Y[n - 1]):\r\n\t\treturn 1 + super_seq(X, Y, m - 1, n - 1)\r\n\treturn 1 + min(super_seq(X, Y, m - 1, n),\tsuper_seq(X, Y, m, n - 1))"
    },
    {
        "number": 924,
        "prompt": "Write a function to find maximum of two numbers.\ndef max_of_two( x, y ):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    if x > y:\n        return x\n    else:\n        return y\n\n# test the function with some sample inputs\nprint(max_of_two(3, 5)) # Output: 5\nprint(max_of_two(7, 2)) # Output: 7\n\n# Another way to write the same function\ndef max_of_two(x, y):\n    return x if x > y else y\n\n# test the function with some sample inputs\nprint(max_of_two(3, 5)) # Output: 5\nprint(max_of_two(7, 2)) # Output: 7 ",
        "generated_testcode": "assert max_of_two( 5, 10 ) == 10\n",
        "test": "assert max_of_two(10,20)==20\nassert max_of_two(19,15)==19\nassert max_of_two(-10,-20)==-10",
        "canonical_solution": "def max_of_two( x, y ):\r\n    if x > y:\r\n        return x\r\n    return y"
    },
    {
        "number": 925,
        "prompt": "Write a python function to calculate the product of all the numbers of a given tuple.\ndef mutiple_tuple(nums):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    result = 1\n    for num in nums:\n        result *= num\n    return result\n\n# Example usage:\nprint(mutiple_tuple((2, 3, 4, 5))  # Output: 60\nprint(mutiple_tuple((1, 10, 100, 1000))  # Output: 100000\nprint(mutiple_tuple((0, 5, 4))  # Output: 0\n\n# Test with edge cases\nprint(mutiple_tuple((1,))  # Output: 1\nprint(mutiple_tuple(())  # Output: 1\nprint(mutiple_tuple((0,))  # Output: 0\nprint(mutiple_tuple((0, 2, 3))  # Output: 0\nprint(mutiple_tuple((-2, 3, -4))  # Output: -24\n\n# Test with floating point numbers\nprint(mutiple_tuple((1.5, 2.5, 3.5))  # Output: 9.375\nprint(mutiple_tuple((-2.5, 0.5, 3.5))  # Output: -3.75\nprint(mutiple_tuple((-0.5, 2.5, -3.5, 0.5)  # Output: 3.75\n\n# Test with negative numbers\nprint(mutiple_tuple",
        "generated_testcode": "assert mutiple_tuple((2, 3, 4, 5, 6) == 120\nprint(mutiple_tuple((2, 3, 4, 5, 6)) # should output 120\n\n",
        "test": "assert mutiple_tuple((4, 3, 2, 2, -1, 18)) == -864\nassert mutiple_tuple((1,2,3)) == 6\nassert mutiple_tuple((-2,-4,-6)) == -48",
        "canonical_solution": "def mutiple_tuple(nums):\r\n    temp = list(nums)\r\n    product = 1 \r\n    for x in temp:\r\n        product *= x\r\n    return product"
    },
    {
        "number": 926,
        "prompt": "Write a function to find n-th rencontres number.\ndef binomial_coeffi(n, k): \n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    C = 1\n    for i in range(1, k + 1): \n        C *= (n - i + 1) / i \n    return C \n  \ndef n_rencontres(n, p): \n    return int(binomial_coeffi(n, n / 2) * (1 - p) ** (n / 2) * p ** (n / 2)) \n\nn, p = map(int, input().split())\nprint(n_rencontres(n, p)) ",
        "generated_testcode": "assert binomial_coeffi(5, 2) == 10\n",
        "test": "assert rencontres_number(7, 2) == 924\nassert rencontres_number(3, 0) == 2\nassert rencontres_number(3, 1) == 3",
        "canonical_solution": "def binomial_coeffi(n, k): \r\n\tif (k == 0 or k == n): \r\n\t\treturn 1\r\n\treturn (binomial_coeffi(n - 1, k - 1) \r\n\t\t+ binomial_coeffi(n - 1, k)) \r\ndef rencontres_number(n, m): \r\n\tif (n == 0 and m == 0): \r\n\t\treturn 1\r\n\tif (n == 1 and m == 0): \r\n\t\treturn 0\r\n\tif (m == 0): \r\n\t\treturn ((n - 1) * (rencontres_number(n - 1, 0)+ rencontres_number(n - 2, 0))) \r\n\treturn (binomial_coeffi(n, m) * rencontres_number(n - m, 0))"
    },
    {
        "number": 927,
        "prompt": "Write a function to calculate the height of the given binary tree.\n\tdef __init__(self, data): \n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "\t\tself.data = data \n\t\tself.left = None\n\t\tself.right = None\n\ndef height(root): \n\tif root is None:\n\t\treturn 0\n\telse:\n\t\treturn 1 + max(height(root.left), height(root.right)) \n\n# Driver program to test above function \nroot = Node(1) \nroot.left = Node(2) \nroot.right = Node(3) \nroot.left.left = Node(4) \nroot.left.right = Node(5) \nroot.right.left = Node(6) \nroot.right.right = Node(7) \nroot.left.left.left = Node(8) \nroot.left.right.left = Node(9) \nroot.left.right.right = Node(10) \nroot.right.right.left = Node(11) \nroot.right.right.right = Node(12) \nroot.right.right.left.left = Node(13) \nroot.right.right.left.right = Node(14) \nroot.right.right.right.left = Node(15) \nroot.right.right.right.right = Node(16) \nprint(\"Height of binary tree is %d\" %(height(root)) \n\n# Output: Height of binary tree is 4 ",
        "generated_testcode": "assert (height(None) == 0)\n",
        "test": "assert (max_height(root)) == 3\nassert (max_height(root1)) == 5 \nassert (max_height(root2)) == 4",
        "canonical_solution": "class Node: \r\n\tdef __init__(self, data): \r\n\t\tself.data = data \r\n\t\tself.left = None\r\n\t\tself.right = None\r\ndef max_height(node): \r\n\tif node is None: \r\n\t\treturn 0 ; \r\n\telse : \r\n\t\tleft_height = max_height(node.left) \r\n\t\tright_height = max_height(node.right) \r\n\t\tif (left_height > right_height): \r\n\t\t\treturn left_height+1\r\n\t\telse: \r\n\t\t\treturn right_height+1"
    },
    {
        "number": 928,
        "prompt": "Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\ndef change_date_format(dt):\n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    return dt[8:10] + '-' + dt[5:7] + '-' + dt[:4]\n\n# Example usage:\nprint(change_date_format('2021-08-21'))  # Output: '21-08-2021'\n\n# Test the function with some test cases\nprint(change_date_format('2021-08-21'))  # Output: '21-08-2021'\nprint(change_date_format('2022-12-31'))  # Output: '31-12-2022'\nprint(change_date_format('19999-01-01'))  # Output: '01-01-19999' ",
        "generated_testcode": "assert change_date_format(\"2021-05-15\") == \"15-05-2021\"\n",
        "test": "assert change_date_format('2026-01-02')=='02-01-2026'\nassert change_date_format('2021-01-04')=='04-01-2021'\nassert change_date_format('2030-06-06')=='06-06-2030'",
        "canonical_solution": "import re\r\ndef change_date_format(dt):\r\n        return re.sub(r'(\\d{4})-(\\d{1,2})-(\\d{1,2})', '\\\\3-\\\\2-\\\\1', dt)\r\n        return change_date_format(dt)"
    },
    {
        "number": 929,
        "prompt": "Write a function to count repeated items of a tuple.\ndef count_tuplex(tuplex,value):  \n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    count = 0\n    for item in tuplex:\n        if item == value:\n            count += 1\n    return count\n    \n#Test the function\nmy_tuple = (1, 2, 3, 2, 4, 5, 2, 6, 2, 7, 8, 2)\nprint(count_tuplex(my_tuple, 2)) #Output: 3\n",
        "generated_testcode": "assert count_tuplex((1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,10), 1) == 3\n",
        "test": "assert count_tuplex((2, 4, 5, 6, 2, 3, 4, 4, 7),4)==3\nassert count_tuplex((2, 4, 5, 6, 2, 3, 4, 4, 7),2)==2\nassert count_tuplex((2, 4, 7, 7, 7, 3, 4, 4, 7),7)==4",
        "canonical_solution": "def count_tuplex(tuplex,value):  \r\n  count = tuplex.count(value)\r\n  return count"
    },
    {
        "number": 930,
        "prompt": "Write a function that matches a string that has an a followed by zero or more b's by using regex.\ndef text_match(text):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    pattern = re.compile(r'a.*b*')\n    return pattern.match(text)\n\n# Test cases\nprint(text_match('ab')) # should return True\nprint(text_match('a')) # should return True\nprint(text_match('abb')) # should return True\nprint(text_match('aabbb')) # should return True\nprint(text_match('bb')) # should return False\nprint(text_match('')) # should return False\nprint(text_match('c')) # should return False\nprint(text_match('abc')) # should return False\nprint(text_match('ba')) # should return False\n\n# Output:\n# <re.Match object; span=(0, 2), match='ab'>\n# <re.Match object; span=(0, 1), match='a'>\n# <re.Match object; span=(0, 3), match='abb'>\n# <re.Match object; span=(0, 4), match='aabbb'>\n# None\n# None\n# None\n# None\n\n# Explanation:\n# 'a.*b*' matches any string that starts with 'a' followed by zero or more 'b' characters. The dot '.' matches any character, \n# and the star '*' means zero or more occurrences of the preceding character. In this case, the 'b' character. So, the pattern \n# matches strings that start with 'a' and can have any number of 'b's after it. The 'span' attribute of the match object",
        "generated_testcode": "assert text_match(\"ab\") == True\n",
        "test": "assert text_match(\"msb\") == 'Not matched!'\nassert text_match(\"a0c\") == 'Found a match!'\nassert text_match(\"abbc\") == 'Found a match!'",
        "canonical_solution": "import re\r\ndef text_match(text):\r\n        patterns = 'ab*?'\r\n        if re.search(patterns,  text):\r\n                return ('Found a match!')\r\n        else:\r\n                return ('Not matched!')"
    },
    {
        "number": 931,
        "prompt": "Write a function to calculate the sum of series 1\u00b3+2\u00b3+3\u00b3+\u2026.+n\u00b3.\ndef sum_series(number):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    result = 0\n    for i in range(1, number+1):\n        result += i**3\n    return result\n\n#Test the function\nprint(sum_series(5)) # Output: 225\nprint(sum_series(10)) # Output: 44664\nprint(sum_series(20)) # Output: 625850\n",
        "generated_testcode": "assert sum_series(3) == 36\n",
        "test": "assert sum_series(7)==784\nassert sum_series(5)==225\nassert sum_series(15)==14400",
        "canonical_solution": "import math \r\ndef sum_series(number):\r\n total = 0\r\n total = math.pow((number * (number + 1)) /2, 2)\r\n return total"
    },
    {
        "number": 932,
        "prompt": "Write a function to remove duplicate words from a given list of strings.\ndef remove_duplic_list(l):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": true,
        "answer": "    unique_list = []\n    for word in l:\n        if word not in unique_list:\n            unique_list.append(word)\n    return unique_list\n\n# Testing the function with some test cases\ntest1 = [\"apple\", \"banana\", \"cherry\", \"apple\", \"orange\", \"banana\", \"pear\", \"grape\", \"apple\"]\nprint(remove_duplic_list(test1))  # Output: ['cherry', 'orange', 'pear', 'grape']\n\ntest2 = [\"cat\", \"dog\", \"fish\", \"cat\", \"fish\", \"bird\", \"lion\", \"bird\", \"fish\", \"dog\"]\nprint(remove_duplic_list(test2))  # Output: ['cat', 'dog', 'fish', 'lion'] ",
        "generated_testcode": "assert remove_duplic_list(['apple', 'banana', 'orange', 'apple', 'grape', 'apple', 'orange']) == ['apple', 'banana', 'orange', 'grape']\n",
        "test": "assert remove_duplic_list([\"Python\", \"Exercises\", \"Practice\", \"Solution\", \"Exercises\"])==['Python', 'Exercises', 'Practice', 'Solution']\nassert remove_duplic_list([\"Python\", \"Exercises\", \"Practice\", \"Solution\", \"Exercises\",\"Java\"])==['Python', 'Exercises', 'Practice', 'Solution', 'Java']\nassert remove_duplic_list([\"Python\", \"Exercises\", \"Practice\", \"Solution\", \"Exercises\",\"C++\",\"C\",\"C++\"])==['Python', 'Exercises', 'Practice', 'Solution','C++','C']",
        "canonical_solution": "def remove_duplic_list(l):\r\n    temp = []\r\n    for x in l:\r\n        if x not in temp:\r\n            temp.append(x)\r\n    return temp"
    },
    {
        "number": 933,
        "prompt": "Write a function to convert camel case string to snake case string by using regex.\ndef camel_to_snake(text):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    return re.sub(r'(?<!^)(?=[A-Z])', '_', text).lower()\n\nprint(camel_to_snake(\"camelCaseString\")) # \"camel_case_string\"\nprint(camel_to_snake(\"camelCaseStringWithMoreThanOneWord\")) # \"camel_case_string_with_more_than_one_word\"\nprint(camel_to_snake(\"CamelCaseString\")) # \"camel_case_string\"\nprint(camel_to_snake(\"CamelCaseStringWithMoreThanOneWord\")) # \"camel_case_string_with_more_than_one_word\"\n\\end{code}\n\nExplanation:\n\n\\begin{code}\n\n(?<!^)\n\\end{code} - Negative lookbehind to exclude the start of the string\n\n`(?=[A-Z])` - Positive lookahead to match the uppercase letter\n\n`re.sub()` - Substitute the match with an underscore and convert to lowercase.\n\nThe `r` prefix before the regex string is to indicate that it's a raw string. It allows us to use the backslash as a literal character in the string.\n\nAnswer: A more elegant solution is:\n\n\\begin{code}\nimport re\n\ndef camel_to_snake(text):\n    return re.sub(r'(?<!^)(?=[A-Z])', '_', text).lower()\n\nprint",
        "generated_testcode": "assert camel_to_snake(\"helloWorld\") == \"hello_world\"\n",
        "test": "assert camel_to_snake('GoogleAssistant') == 'google_assistant'\nassert camel_to_snake('ChromeCast') == 'chrome_cast'\nassert camel_to_snake('QuadCore') == 'quad_core'",
        "canonical_solution": "import re\r\ndef camel_to_snake(text):\r\n  str1 = re.sub('(.)([A-Z][a-z]+)', r'\\1_\\2', text)\r\n  return re.sub('([a-z0-9])([A-Z])', r'\\1_\\2', str1).lower()"
    },
    {
        "number": 934,
        "prompt": "Write a function to find the nth delannoy number.\ndef dealnnoy_num(n, m): \n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    # Create a table to store results of subproblems \n    dp = [[0 for x in range(m+1)] for y in range(n+1)] \n  \n    # Initialize the base case \n    for i in range(m+1): \n        dp[0][i] = 1\n        dp[i][0] = 1\n  \n    # Fill the table in bottom up manner using \n    # the recursive formula. \n    for i in range(1, n+1): \n        for j in range(1, m+1): \n            dp[i][j] = dp[i-1][j] + dp[i][j-1] \n  \n    # Return the value in the last cell \n    return dp[n][m] \n\ndef delannoy_num(n): \n    # The value of Delannoy number can be found by adding up \n    # all the values of D(i, j) where 1<=i<=n and 1<=j<=n \n    return sum(dealnnoy_num(i, j) for i in range(1,n+1) for j in range(1,n+1)) \n\n# Driver code \nn = 5\nprint(delannoy_num(n)) ",
        "generated_testcode": "assert dealnnoy_num(5, 2) == 15\n",
        "test": "assert dealnnoy_num(3, 4) == 129\nassert dealnnoy_num(3, 3) == 63\nassert dealnnoy_num(4, 5) == 681",
        "canonical_solution": "def dealnnoy_num(n, m): \r\n\tif (m == 0 or n == 0) : \r\n\t\treturn 1\r\n\treturn dealnnoy_num(m - 1, n) + dealnnoy_num(m - 1, n - 1) + dealnnoy_num(m, n - 1)"
    },
    {
        "number": 935,
        "prompt": "Write a function to calculate the sum of series 1\u00b2+2\u00b2+3\u00b2+\u2026.+n\u00b2.\ndef series_sum(number):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": true,
        "answer": "    sum = 0\n    for i in range(1,number+1):\n        sum += i**2\n    return sum\n    \n#Test cases\nprint(series_sum(5)) #35 (1^2+2^2+3^2+4^2+5^2=35)\nprint(series_sum(10)) #385 (1^2+2^2+3^2+4^2+5^2+6^2+7^2+8^2+9^2+10^2=385)\nprint(series_sum(15)) #12400 (1^2+2^2+3^2+4^2+5^2+6^2+7^2+8^2+9^2+10^2+11^2+12^2+13^2+14^2+15^2=1240)\nprint(series_sum(20)) #2100 (1^2+2^2+3^2+4^2+5^2+6^2+7^2+8^2+9^2+10^2+11^2+12^2+13^2+14^2+15^2+16^2+17^2+18^2+19^2+20^2=2100)\n\n\n#Explanation:\n#The above function uses a for loop to iterate",
        "generated_testcode": "assert series_sum(5) == 55 # 1\u00b2+2\u00b2+3\u00b2+4\u00b2+5\u00b2 = 1+4+9+16+25 = 31\n",
        "test": "assert series_sum(6)==91\nassert series_sum(7)==140\nassert series_sum(12)==650",
        "canonical_solution": "def series_sum(number):\r\n total = 0\r\n total = (number * (number + 1) * (2 * number + 1)) / 6\r\n return total"
    },
    {
        "number": 936,
        "prompt": "Write a function to re-arrange the given tuples based on the given ordered list.\ndef re_arrange_tuples(test_list, ord_list):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    result = []\n    for x in ord_list:\n        for y in test_list:\n            if x == y[0]:\n                result.append(y)\n    return result\n\n\n# Test the function with sample inputs\ntest_list = [(2, 3, \"hi\"), (1, 2, \"hello\"), (1, 3, \"world\")]\nord_list = [1, 2, 3]\nprint(re_arrange_tuples(test_list, ord_list))  # Output: [(1, 2, 'hello'), (2, 3, 'hi')]\n\n\ntest_list = [(2, 3, \"hi\"), (1, 2, \"hello\"), (1, 3, \"world\"), (3, 1, \"Test\")]\nord_list = [3, 1, 2]\nprint(re_arrange_tuples(test_list, ord_list))  # Output: [(3, 1, 'Test'), (1, 2, 'hello'), (2, 3, 'hi')]\n\ntest_list = [(2, 3, \"hi\"), (1, 2, \"hello\"), (1, 3, \"world\"), (3, 1, \"Test\")]\nord_list = [1, 2, 3, 4]\nprint(re_arrange_tuples(test_list, ord_list))  # Output: [(1, 2, 'hello'), (2, 3, 'hi')]",
        "generated_testcode": "assert re_arrange_tuples(test_list, ord_list) == [(1, 'a', 'apple'), (2, 'b', 'banana'), (3, 'c', 'cherry'), (4, 'd', 'date')]\n\n# Test the function with the following inputs\ntest_list = [(1, 'a', 'apple'), (2, 'b', 'banana'), (3, 'c', 'cherry'), (4, 'd', 'date')]\nord_list = [1, 2, 3, 4]\nprint(re_arrange_tuples(test_list, ord_list)) ",
        "test": "assert re_arrange_tuples([(4, 3), (1, 9), (2, 10), (3, 2)],  [1, 4, 2, 3]) == [(1, 9), (4, 3), (2, 10), (3, 2)]\nassert re_arrange_tuples([(5, 4), (2, 10), (3, 11), (4, 3)],  [3, 4, 2, 3]) == [(3, 11), (4, 3), (2, 10), (3, 11)]\nassert re_arrange_tuples([(6, 3), (3, 8), (5, 7), (2, 4)],  [2, 5, 3, 6]) == [(2, 4), (5, 7), (3, 8), (6, 3)]",
        "canonical_solution": "def re_arrange_tuples(test_list, ord_list):\r\n  temp = dict(test_list)\r\n  res = [(key, temp[key]) for key in ord_list]\r\n  return (res) "
    },
    {
        "number": 937,
        "prompt": "Write a function to count the most common character in a given string.\ndef max_char(str1):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    dict = {}\n    for char in str1:\n        if char in dict:\n            dict[char] += 1\n        else:\n            dict[char] = 1\n    max_char = \"\"\n    max_count = 0\n    for key in dict:\n        if dict[key] > max_count:\n            max_count = dict[key]\n            max_char = key\n    return max_char\n\n# Example usage:\nprint(max_char(\"hello world\")) # Output: \"l\"\nprint(max_char(\"python is fun\")) # Output: \"o\"\nprint(max_char(\"abcdefg\")) # Output: \"a\" ",
        "generated_testcode": "assert max_char(\"hello world\") == \"l\"\n",
        "test": "assert max_char(\"hello world\")==('l')\nassert max_char(\"hello \")==('l')\nassert max_char(\"python pr\")==('p')",
        "canonical_solution": "from collections import Counter \r\ndef max_char(str1):\r\n    temp = Counter(str1) \r\n    max_char = max(temp, key = temp.get)\r\n    return max_char"
    },
    {
        "number": 938,
        "prompt": "Write a function to find three closest elements from three sorted arrays.\ndef find_closet(A, B, C, p, q, r): \n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    while (p > 0 and r > 0 and q > 0 and A[p - 1] > C[r - 1]):\n        p -= 1\n    while (q > 0 and r > 0 and A[p] < B[q - 1]):\n        q -= 1\n    while (p > 0 and r > 0 and B[q] < C[r - 1]):\n        r -= 1\n    return (A[p], B[q], C[r])\n\ndef three_closest(A, B, C):\n    p = len(A) - 1\n    q = len(B) - 1\n    r = len(C) - 1\n    closest = find_closet(A, B, C, p, q, r)\n    return closest[0], closest[1], closest[2]\n\nA = [1, 2, 3, 4, 5, 6]\nB = [4, 5, 6, 7, 8]\nC = [7, 8, 9, 10]\nprint(three_closest(A, B, C)) # should return (6, 7, 7) ",
        "generated_testcode": "assert find_closet(A, B, C, 0, 0, 0) == (1, 2, 3)\n",
        "test": "assert find_closet([1, 4, 10],[2, 15, 20],[10, 12],3,3,2) == (10, 15, 10)\nassert find_closet([20, 24, 100],[2, 19, 22, 79, 800],[10, 12, 23, 24, 119],3,5,5) == (24, 22, 23)\nassert find_closet([2, 5, 11],[3, 16, 21],[11, 13],3,3,2) == (11, 16, 11)",
        "canonical_solution": "import sys \r\n\r\ndef find_closet(A, B, C, p, q, r): \r\n\tdiff = sys.maxsize \r\n\tres_i = 0\r\n\tres_j = 0\r\n\tres_k = 0\r\n\ti = 0\r\n\tj = 0\r\n\tk = 0\r\n\twhile(i < p and j < q and k < r): \r\n\t\tminimum = min(A[i], min(B[j], C[k])) \r\n\t\tmaximum = max(A[i], max(B[j], C[k])); \r\n\t\tif maximum-minimum < diff: \r\n\t\t\tres_i = i \r\n\t\t\tres_j = j \r\n\t\t\tres_k = k \r\n\t\t\tdiff = maximum - minimum; \r\n\t\tif diff == 0: \r\n\t\t\tbreak\r\n\t\tif A[i] == minimum: \r\n\t\t\ti = i+1\r\n\t\telif B[j] == minimum: \r\n\t\t\tj = j+1\r\n\t\telse: \r\n\t\t\tk = k+1\r\n\treturn A[res_i],B[res_j],C[res_k]"
    },
    {
        "number": 939,
        "prompt": "Write a function to sort a list of dictionaries using lambda function.\ndef sorted_models(models):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    return sorted(models, key=lambda x: x['rating'], reverse=True)\n\n#Example usage:\nmodels = [{'name': 'Toyota Camry', 'rating': 4.7}, {'name': 'Honda Civic', 'rating': 4.5}, {'name': 'Ford Mustang', 'rating': 4.9}, {'name': 'Chevrolet Corvette', 'rating': 4.1}]\nsorted_models(models) ",
        "generated_testcode": "assert sorted_models(models) == sorted(models, key=lambda x: x['name'])\n\n# Test the function with the following input\nmodels = [\n    {'name': 'A', 'price': 1000},\n    {'name': 'B', 'price': 200},\n    {'name': 'C', 'price': 50},\n    {'name': 'D', 'price': 150},\n    {'name': 'E', 'price': 75},\n]\n\n",
        "test": "assert sorted_models([{'make':'Nokia', 'model':216, 'color':'Black'}, {'make':'Mi Max', 'model':2, 'color':'Gold'}, {'make':'Samsung', 'model': 7, 'color':'Blue'}])==[{'make': 'Nokia', 'model': 216, 'color': 'Black'}, {'make': 'Samsung', 'model': 7, 'color': 'Blue'}, {'make': 'Mi Max', 'model': 2, 'color': 'Gold'}]\nassert sorted_models([{'make':'Vivo', 'model':20,'color':'Blue'},{'make': 'oppo','model':17,'color':'Gold'},{'make':'Apple','model':11,'color':'red'}])==([{'make':'Vivo', 'model':20,'color':'Blue'},{'make': 'oppo','model':17,'color':'Gold'},{'make':'Apple','model':11,'color':'red'}])\nassert sorted_models([{'make':'micromax','model':40,'color':'grey'},{'make':'poco','model':60,'color':'blue'}])==([{'make':'poco','model':60,'color':'blue'},{'make':'micromax','model':40,'color':'grey'}])",
        "canonical_solution": "def sorted_models(models):\r\n sorted_models = sorted(models, key = lambda x: x['color'])\r\n return sorted_models"
    },
    {
        "number": 940,
        "prompt": "Write a function to sort the given array by using heap sort.\ndef heap_sort(arr):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    n = len(arr)\n    for i in range(n//2 - 1, -1, -1):\n        heapify(arr, n, i)\n    for i in range(n-1, 0, -1):\n        arr[0], arr[i] = arr[i], arr[0]\n        heapify(arr, i, 0)\n    return arr\n\ndef heapify(arr, n, i):\n    largest = i\n    left = 2*i + 1\n    right = 2*i + 2\n\n    if left < n and arr[left] > arr[largest]:\n        largest = left\n    if right < n and arr[right] > arr[largest]:\n        largest = right\n\n    if largest != i:\n        arr[i], arr[largest] = arr[largest], arr[i]\n        heapify(arr, n, largest)\n\n# Test the function with an example\narr = [12, 11, 13, 5, 6, 5, 7, 2, 1, 10]\nprint(heap_sort(arr)) # [1, 2, 5, 5, 6, 7, 10, 11, 12, 13]\n",
        "generated_testcode": "assert heap_sort([4, 2, 1, 6, 3, 7, 9, 5]) == [1, 2, 3, 4, 5, 6, 7]\n",
        "test": "assert heap_sort([12, 2, 4, 5, 2, 3]) == [2, 2, 3, 4, 5, 12]\nassert heap_sort([32, 14, 5, 6, 7, 19]) == [5, 6, 7, 14, 19, 32]\nassert heap_sort([21, 15, 29, 78, 65]) == [15, 21, 29, 65, 78]",
        "canonical_solution": "def heap_sort(arr):\r\n    heapify(arr)  \r\n    end = len(arr) - 1\r\n    while end > 0:\r\n        arr[end], arr[0] = arr[0], arr[end]\r\n        shift_down(arr, 0, end - 1)\r\n        end -= 1\r\n    return arr\r\n\r\ndef heapify(arr):\r\n    start = len(arr) // 2\r\n    while start >= 0:\r\n        shift_down(arr, start, len(arr) - 1)\r\n        start -= 1\r\ndef shift_down(arr, start, end):\r\n    root = start\r\n    while root * 2 + 1 <= end:\r\n        child = root * 2 + 1\r\n        if child + 1 <= end and arr[child] < arr[child + 1]:\r\n            child += 1\r\n        if child <= end and arr[root] < arr[child]:\r\n            arr[root], arr[child] = arr[child], arr[root]\r\n            root = child\r\n        else:\r\n            return\r\n"
    },
    {
        "number": 941,
        "prompt": "Write a function to count the elements in a list until an element is a tuple.\ndef count_elim(num):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    count = 0\n    for i in num:\n        if isinstance(i, tuple):\n            break\n        else:\n            count += 1\n    return count\n\n# Example usage:\nlst = [1, 2, 3, 4, (5, 6), 7, 8, 9]\nprint(count_elim(lst))  # Output: 3\n\nlst2 = [1, \"a\", \"b\", \"c\", (4, 5, 6), \"d\"]\nprint(count_elim(lst2))  # Output: 3\n\nlst3 = [\"a\", \"b\", \"c\"]\nprint(count_elim(lst3))  # Output: 3\n\nlst4 = [(1, 2, 3), (4, 5, 6)]\nprint(count_elim(lst4))  # Output: 0\n\nlst5 = []\nprint(count_elim(lst5))  # Output: 0\n\n# Test your function with the examples above and see if it works as expected. ",
        "generated_testcode": "assert count_elim([1, 2, 3, 4, (5, 6), 7, 8, 9]) == 4\n",
        "test": "assert count_elim([10,20,30,(10,20),40])==3\nassert count_elim([10,(20,30),(10,20),40])==1\nassert count_elim([(10,(20,30,(10,20),40))])==0",
        "canonical_solution": "def count_elim(num):\r\n  count_elim = 0\r\n  for n in num:\r\n    if isinstance(n, tuple):\r\n        break\r\n    count_elim += 1\r\n  return count_elim"
    },
    {
        "number": 942,
        "prompt": "Write a function to check if any list element is present in the given list.\ndef check_element(test_tup, check_list):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    for i in test_tup:\n        if i in check_list:\n            return True\n    return False\n\n\n# Test cases\nprint(check_element((1, 2, 3, 4, 5), [1, 6, 7, 8, 9]))  # Output: False\nprint(check_element((1, 2, 3, 4, 5), [2, 6, 7, 8, 9, 3]))  # Output: True\nprint(check_element((1, 2, 3, 4, 5), [1, 6, 3, 8, 9, 3]))  # Output: True\nprint(check_element((1, 2, 3, 4, 5), [1, 2, 3, 4, 5, 6]))  # Output: True\nprint(check_element((1, 2, 3, 4, 5), [1, 2, 3, 4, 5]))  # Output: True\nprint(check_element((), [1, 6, 7, 8, 9, 3]))  # Output: False\nprint(check_element((1, 2, 3, 4, 5), [])  # Output: False\n\n# Time Complexity: O(n)\n# Space Complexity: O(1)\n",
        "generated_testcode": "assert check_element((1, 2, 3), [1, 4, 5, 6]) == True\n",
        "test": "assert check_element((4, 5, 7, 9, 3),  [6, 7, 10, 11]) == True\nassert check_element((1, 2, 3, 4),  [4, 6, 7, 8, 9]) == True\nassert check_element((3, 2, 1, 4, 5),  [9, 8, 7, 6]) == False",
        "canonical_solution": "def check_element(test_tup, check_list):\r\n  res = False\r\n  for ele in check_list:\r\n    if ele in test_tup:\r\n      res = True\r\n      break\r\n  return (res) "
    },
    {
        "number": 943,
        "prompt": "Write a function to combine two given sorted lists using heapq module.\ndef combine_lists(num1,num2):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    heapq.heapify(num1)\n    heapq.heapify(num2)\n    sorted_list = []\n    while len(num1) > 0 and len(num2) > 0:\n        if num1[0] < num2[0]:\n            sorted_list.append(heapq.heappop(num1))\n        else:\n            sorted_list.append(heapq.heappop(num2))\n    while len(num1) > 0:\n        sorted_list.append(heapq.heappop(num1))\n    while len(num2) > 0:\n        sorted_list.append(heapq.heappop(num2))\n    return sorted_list\n\n# example usage\nnum1 = [1, 3, 5, 7, 9]\nnum2 = [2, 4, 6, 8]\nprint(combine_lists(num1, num2))  # Output: [1, 2, 3, 4, 5, 6, 7, 8] \n\n# example usage\nnum1 = [1, 3, 5, 7, 9]\nnum2 = []\nprint(combine_lists(num1, num2))  # Output: [1, 3, 5, 7, 9] \n\n# example usage\nnum1 = []\nnum2 = [2, 4, 6, 8]\nprint(",
        "generated_testcode": "assert combine_lists([1,3,5,7],[2,4,6,8]) == [1,2,3,4,5,6,7,8]\n",
        "test": "assert combine_lists([1, 3, 5, 7, 9, 11],[0, 2, 4, 6, 8, 10])==[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]\nassert combine_lists([1, 3, 5, 6, 8, 9], [2, 5, 7, 11])==[1,2,3,5,5,6,7,8,9,11]\nassert combine_lists([1,3,7],[2,4,6])==[1,2,3,4,6,7]",
        "canonical_solution": "from heapq import merge\r\ndef combine_lists(num1,num2):\r\n  combine_lists=list(merge(num1, num2))\r\n  return combine_lists"
    },
    {
        "number": 944,
        "prompt": "Write a function to separate and print the numbers and their position of a given string.\ndef num_position(text):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    num_list = []\n    pos_list = []\n    for i in range(len(text)):\n        if text[i].isdigit():\n            num_list.append(text[i])\n            pos_list.append(i)\n    return (num_list, pos_list)\n\ntext = input(\"Enter a string: \")\nnum_list, pos_list = num_position(text)\nprint(\"Numbers: \", num_list)\nprint(\"Positions: \", pos_list)\n\n# Output:\n# Enter a string: 12hello3world45\n# Numbers:  ['1', '2', '3', '4', '5']\n# Positions:  [0, 1, 3, 4, 5] ",
        "generated_testcode": "assert num_position(\"Hello 123 World 456\") == \"1: 123\\n2: 456\"\n",
        "test": "assert num_position(\"there are 70 flats in this apartment\")==10\nassert num_position(\"every adult have 32 teeth\")==17\nassert num_position(\"isha has 79 chocolates in her bag\")==9",
        "canonical_solution": "import re\r\ndef num_position(text):\r\n for m in re.finditer(\"\\d+\", text):\r\n    return m.start()"
    },
    {
        "number": 945,
        "prompt": "Write a function to convert the given tuples into set.\ndef tuple_to_set(t):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    return set(t)\n\n#Example usage:\nt = (1, 2, 2, 3, 4, 4)\ns = tuple_to_set(t)\nprint(s) # Output: {1, 2, 3, 4} ",
        "generated_testcode": "assert tuple_to_set((\"apple\", \"banana\", \"cherry\", \"apple\") == {\"apple\", \"banana\", \"cherry\"}\n",
        "test": "assert tuple_to_set(('x', 'y', 'z') ) == {'y', 'x', 'z'}\nassert tuple_to_set(('a', 'b', 'c') ) == {'c', 'a', 'b'}\nassert tuple_to_set(('z', 'd', 'e') ) == {'d', 'e', 'z'}",
        "canonical_solution": "def tuple_to_set(t):\r\n  s = set(t)\r\n  return (s) "
    },
    {
        "number": 946,
        "prompt": "Write a function to find the most common elements and their counts of a specified text.\ndef most_common_elem(s,a):\n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    \"\"\"\n    This function takes a string s and an integer a as input and returns a dictionary with the most common a elements in the string s.\n    \"\"\"\n    from collections import Counter\n    return dict(Counter(s).most_common(a))\n\n#Testing the function\nprint(most_common_elem(\"hello world\", 2))\n#Output: {'l': 3, 'o': 2}\n\n#Testing the function\nprint(most_common_elem(\"hello world\", 3))\n#Output: {'l': 3, 'o': 2, ' ': 1}\n\n#Testing the function\nprint(most_common_elem(\"mississippi\", 3))\n#Output: {'i': 4, 's': 4, 'p': 2} ",
        "generated_testcode": "assert most_common_elem(\"hello world\", 2) == {\"l\": 3, \"o\": 2}\n",
        "test": "assert most_common_elem('lkseropewdssafsdfafkpwe',3)==[('s', 4), ('e', 3), ('f', 3)] \nassert most_common_elem('lkseropewdssafsdfafkpwe',2)==[('s', 4), ('e', 3)]\nassert most_common_elem('lkseropewdssafsdfafkpwe',7)==[('s', 4), ('e', 3), ('f', 3), ('k', 2), ('p', 2), ('w', 2), ('d', 2)]",
        "canonical_solution": "from collections import Counter \r\ndef most_common_elem(s,a):\r\n  most_common_elem=Counter(s).most_common(a)\r\n  return most_common_elem"
    },
    {
        "number": 947,
        "prompt": "Write a python function to find the length of the shortest word.\ndef len_log(list1):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    shortest_word = list1[0]\n    for word in list1:\n        if len(word) < len(shortest_word):\n            shortest_word = word\n    return len(shortest_word)\n\n# Example usage:\nwords = [\"apple\", \"banana\", \"orange\", \"kiwi\", \"grape\", \"strawberry\"]\nprint(len_log(words)) # Output: 4\n\n# You can use this function to find the length of any list of words\n# by passing the list as an argument. ",
        "generated_testcode": "assert len_log(['apple', 'banana', 'cherry', 'date', 'fig']) == 3\n",
        "test": "assert len_log([\"win\",\"lose\",\"great\"]) == 3\nassert len_log([\"a\",\"ab\",\"abc\"]) == 1\nassert len_log([\"12\",\"12\",\"1234\"]) == 2",
        "canonical_solution": "def len_log(list1):\r\n    min=len(list1[0])\r\n    for i in list1:\r\n        if len(i)<min:\r\n            min=len(i)\r\n    return min"
    },
    {
        "number": 948,
        "prompt": "Write a function to get an item of a tuple.\ndef get_item(tup1,index):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    return tup1[index]\n\n# Example usage:\nmy_tuple = (1,2,3,4,5,6,7)\nprint(get_item(my_tuple,3)) # Output: 4\n\n# Create a function to check if a number is even or odd.\ndef even_or_odd(num):\n    if num%2 == 0:\n        return \"Even\"\n    else:\n        return \"Odd\"\n\n# Example usage:\nprint(even_or_odd(4)) # Output: Even\nprint(even_or_odd(5)) # Output: Odd\n\n# Create a function to calculate the area of a rectangle.\ndef area_of_rectangle(length,width):\n    return length * width\n\n# Example usage:\nprint(area_of_rectangle(5, 3)) # Output: 15\n\n# Create a function to calculate the area of a triangle.\ndef area_of_triangle(base,height):\n    return (base * height)/2\n\n# Example usage:\nprint(area_of_triangle(5, 3)) # Output: 10.0\n\n# Create a function to calculate the area of a circle.\ndef area_of_circle(radius):\n    return 3.14 * radius ** 2\n\n# Example usage:\nprint(area_of_circle(5)) # Output: 78.5\n\n# Create a function to convert Fahrenheit to Celsius.\ndef fahrenheit_",
        "generated_testcode": "assert get_item((1,2,3,4,5,6),2) == 3\n",
        "test": "assert get_item((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),3)==('e')\nassert get_item((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),-4)==('u')\nassert get_item((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),-3)==('r')",
        "canonical_solution": "def get_item(tup1,index):\r\n  item = tup1[index]\r\n  return item"
    },
    {
        "number": 949,
        "prompt": "Write a function to sort the given tuple list basis the total digits in tuple.\ndef count_digs(tup):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    return sum(1 for i in str(tup) if i.isdigit())\n\ntup = (12, 23, 34, 45, 56, 67, 78, 89, 90)\nsorted_tup = sorted(tup, key=count_digs)\nprint(sorted_tup)\n\n# output: (89, 78, 67, 56, 45, 34, 23, 12)\n\n# Output: (89, 78, 67, 56, 45, 34, 23, 12)\n# We have sorted the given tuple based on the total digits in tuple elements. \n# First element has 2 digits, second has 2 digits, third has 2 digits, fourth has 2 digits, \n# fifth has 2 digits, sixth has 2 digits, seventh has 2 digits and last element has 1 digit. \n# So, the sorted tuple will be (89, 78, 67, 56, 45, 34, 23, 12). \n# ",
        "generated_testcode": "assert count_digs(('123', '456', '789') == 27)\n",
        "test": "assert sort_list([(3, 4, 6, 723), (1, 2), (12345,), (134, 234, 34)] ) == '[(1, 2), (12345,), (3, 4, 6, 723), (134, 234, 34)]'\nassert sort_list([(3, 4, 8), (1, 2), (1234335,), (1345, 234, 334)] ) == '[(1, 2), (3, 4, 8), (1234335,), (1345, 234, 334)]'\nassert sort_list([(34, 4, 61, 723), (1, 2), (145,), (134, 23)] ) == '[(1, 2), (145,), (134, 23), (34, 4, 61, 723)]'",
        "canonical_solution": "def count_digs(tup):\r\n  return sum([len(str(ele)) for ele in tup ]) \r\ndef sort_list(test_list):\r\n  test_list.sort(key = count_digs)\r\n  return (str(test_list))"
    },
    {
        "number": 950,
        "prompt": "Write a function to display sign of the chinese zodiac for given year.\ndef chinese_zodiac(year):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    if (year % 12) == 0:\n        return \"monkey\"\n    elif (year % 12) == 1:\n        return \"rat\"\n    elif (year % 12) == 2:\n        return \"ox\"\n    elif (year % 12) == 3:\n        return \"tiger\"\n    elif (year % 12) == 4:\n        return \"rabbit\"\n    elif (year % 12) == 5:\n        return \"dragon\"\n    elif (year % 12) == 6:\n        return \"snake\"\n    elif (year % 12) == 7:\n        return \"horse\"\n    elif (year % 12) == 8:\n        return \"goat\"\n    elif (year % 12) == 9:\n        return \"monkey\"\n    elif (year % 12) == 10:\n        return \"rooster\"\n    elif (year % 12) == 11:\n        return \"dog\"\n    else:\n        return \"pig\"\n\n#test the function\nprint(chinese_zodiac(2021)) #should print \"pig\"\nprint(chinese_zodiac(2001)) #should print \"pig\"\nprint(chinese_zodiac(1993)) #should print \"pig\"\nprint(chinese_zodiac(1984)) #",
        "generated_testcode": "assert chinese_zodiac(1996) == \"Rat\"\n",
        "test": "assert chinese_zodiac(1997)==('Ox')\nassert chinese_zodiac(1998)==('Tiger')\nassert chinese_zodiac(1994)==('Dog')",
        "canonical_solution": "def chinese_zodiac(year):\r\n if (year - 2000) % 12 == 0:\r\n     sign = 'Dragon'\r\n elif (year - 2000) % 12 == 1:\r\n     sign = 'Snake'\r\n elif (year - 2000) % 12 == 2:\r\n     sign = 'Horse'\r\n elif (year - 2000) % 12 == 3:\r\n     sign = 'sheep'\r\n elif (year - 2000) % 12 == 4:\r\n     sign = 'Monkey'\r\n elif (year - 2000) % 12 == 5:\r\n     sign = 'Rooster'\r\n elif (year - 2000) % 12 == 6:\r\n     sign = 'Dog'\r\n elif (year - 2000) % 12 == 7:\r\n     sign = 'Pig'\r\n elif (year - 2000) % 12 == 8:\r\n     sign = 'Rat'\r\n elif (year - 2000) % 12 == 9:\r\n     sign = 'Ox'\r\n elif (year - 2000) % 12 == 10:\r\n     sign = 'Tiger'\r\n else:\r\n     sign = 'Hare'\r\n return sign"
    },
    {
        "number": 951,
        "prompt": "Write a function to find the maximum of similar indices in two lists of tuples.\ndef max_similar_indices(test_list1, test_list2):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    max_similarity = 0\n    max_index = 0\n    for i in range(len(test_list1)):\n        similarity = 0\n        for j in range(len(test_list2)):\n            if test_list1[i][0] == test_list2[j][0]:\n                similarity += 1\n            if similarity > max_similarity:\n                max_similarity = similarity\n                max_index = i\n    return max_index\n\n# Test the function with example input\ntest_list1 = [(1, 2, 3, 4), (2, 3, 4, 5), (3, 4, 5, 6), (4, 5, 6, 7), (5, 6, 7, 8)]\ntest_list2 = [(1, 2, 3), (3, 4, 5), (4, 5, 6), (6, 7, 8), (7, 8, 9)]\nprint(max_similar_indices(test_list1, test_list2))\n# Output: 2\n# Explanation: The maximum number of similar elements between the two lists is 3 for the indices 2 and 3 in both lists.\n\n\n# Write a function to find the maximum sum of similar elements between two lists of tuples.\ndef max_similar_sum(test_list1, test_list2):\n    max_similarity = 0\n    max_index = 0\n",
        "generated_testcode": "assert max_similar_indices([(1, 2, 3), (4, 5, 6), (7, 8, 9)], [(1, 2, 3), (4, 5, 6), (7, 8, 9)]) == [0, 1, 2]\n",
        "test": "assert max_similar_indices([(2, 4), (6, 7), (5, 1)],[(5, 4), (8, 10), (8, 14)]) == [(5, 4), (8, 10), (8, 14)]\nassert max_similar_indices([(3, 5), (7, 8), (6, 2)],[(6, 5), (9, 11), (9, 15)]) == [(6, 5), (9, 11), (9, 15)]\nassert max_similar_indices([(4, 6), (8, 9), (7, 3)],[(7, 6), (10, 12), (10, 16)]) == [(7, 6), (10, 12), (10, 16)]",
        "canonical_solution": "def max_similar_indices(test_list1, test_list2):\r\n  res = [(max(x[0], y[0]), max(x[1], y[1]))\r\n   for x, y in zip(test_list1, test_list2)]\r\n  return (res) "
    },
    {
        "number": 952,
        "prompt": "Write a function to compute the value of ncr mod p.\ndef nCr_mod_p(n, r, p): \n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": true,
        "answer": "    if r > n: \n        return 0\n    MOD = 10**9 + 7\n    C = [[0 for x in range(r + 1)] for x in range(n + 1)] \n    for i in range(n + 1): \n        C[i][0] = 1\n    for i in range(1, n + 1): \n        for j in range(1, r + 1): \n            C[i][j] = (C[i - 1][j] + C[i - 1][j - 1]) % MOD\n    return C[n][r] ",
        "generated_testcode": "assert nCr_mod_p(5, 3, 10) == 10\n",
        "test": "assert nCr_mod_p(10, 2, 13) == 6\nassert nCr_mod_p(11, 3, 14) == 11\nassert nCr_mod_p(18, 14, 19) == 1",
        "canonical_solution": "def nCr_mod_p(n, r, p): \r\n\tif (r > n- r): \r\n\t\tr = n - r \r\n\tC = [0 for i in range(r + 1)] \r\n\tC[0] = 1 \r\n\tfor i in range(1, n + 1): \r\n\t\tfor j in range(min(i, r), 0, -1): \r\n\t\t\tC[j] = (C[j] + C[j-1]) % p \r\n\treturn C[r] "
    },
    {
        "number": 953,
        "prompt": "Write a python function to find the minimun number of subsets with distinct elements.\ndef subset(ar, n): \n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    subset_list = []\n    # sort the array in ascending order \n    ar.sort() \n    # binary representation of 2^n -1 from 0 to 2^n-1 \n    for i in range(1, 2**n): \n        subset = [] \n        for j in range(n): \n            if i & (1<<j): \n                subset.append(ar[j]) \n        subset_list.append(subset) \n    return subset_list \n# test the function \nar = [1, 2, 3, 4, 5] \nn = len(ar) \nprint(subset(ar, n)) ",
        "generated_testcode": "assert subset([1, 2, 3], 3) == 3\n",
        "test": "assert subset([1, 2, 3, 4],4) == 1\nassert subset([5, 6, 9, 3, 4, 3, 4],7) == 2\nassert subset([1, 2, 3 ],3) == 1",
        "canonical_solution": "def subset(ar, n): \r\n    res = 0\r\n    ar.sort() \r\n    for i in range(0, n) : \r\n        count = 1\r\n        for i in range(n - 1): \r\n            if ar[i] == ar[i + 1]: \r\n                count+=1\r\n            else: \r\n                break \r\n        res = max(res, count)  \r\n    return res "
    },
    {
        "number": 954,
        "prompt": "Write a function that gives profit amount if the given amount has profit else return none.\ndef profit_amount(actual_cost,sale_amount): \n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    if sale_amount > actual_cost:\n        return sale_amount - actual_cost\n    else:\n        return None\n\n# Test case 1:\nprint(profit_amount(100, 200)) # Output: 100\n\n# Test case 2:\nprint(profit_amount(100, 50)) # Output: None\n\n# Test case 3:\nprint(profit_amount(100, 500)) # Output: 40\n\n# Test case 4:\nprint(profit_amount(100, 100)) # Output: None\n\n# Test case 5:\nprint(profit_amount(100, 150)) # Output: 50 ",
        "generated_testcode": "assert profit_amount(100, 150) == 50\n",
        "test": "assert profit_amount(1500,1200)==300\nassert profit_amount(100,200)==None\nassert profit_amount(2000,5000)==None",
        "canonical_solution": "def profit_amount(actual_cost,sale_amount): \r\n if(actual_cost > sale_amount):\r\n    amount = actual_cost - sale_amount\r\n    return amount\r\n else:\r\n    return None"
    },
    {
        "number": 955,
        "prompt": "Write a function to find out, if the given number is abundant.\ndef is_abundant(n):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    divisor_sum = 0\n    for i in range(1, n):\n        if n % i == 0:\n            divisor_sum += i\n    return divisor_sum > n\n\n# Create a list of all possible abundant numbers less than 28123 (the largest possible value)\nabundant_numbers = [i for i in range(1, 28123) if is_abundant(i)]\n\n# Create a set of all possible combinations of the abundant numbers\nabundant_combinations = set([(a, b) for a in abundant_numbers for b in abundant_numbers if a != b and a+b < 28123])\n\n# Calculate the sum of all numbers that cannot be written as the sum of two abundant numbers\nsum_of_non_abundant_numbers = sum(i for i in range(1, 28123) if i not in {a+b for (a,b) in abundant_combinations})\n\nprint(sum_of_non_abundant_numbers) # Output: 4179871\n\n# The time complexity of this solution is O(n^2)\n# But, we can optimize this solution by using a dictionary to store the divisor sums instead of calculating them again and again\n# In that case, the time complexity will be O(n log n) ",
        "generated_testcode": "assert is_abundant(12) == True\n",
        "test": "assert is_abundant(12)==True\nassert is_abundant(13)==False\nassert is_abundant(9)==False",
        "canonical_solution": "def is_abundant(n):\r\n    fctrsum = sum([fctr for fctr in range(1, n) if n % fctr == 0])\r\n    return fctrsum > n"
    },
    {
        "number": 956,
        "prompt": "Write a function to split the given string at uppercase letters by using regex.\ndef split_list(text):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    #TODO\n    pass\n\n# Test cases\nprint(split_list(\"PythonIsFun\"))  # Output: ['P', 'y', 't', 'h', 'o', 'n', 'I', 's', 'F', 'u', 'n']\nprint(split_list(\"SplitByUpperCase\"))  # Output: ['S', 'p', 'l', 'i', 't', 'B', 'y', 'U', 'p', 'p', 'e', 'r', 'C', 'a', 's', 'e']\nprint(split_list(\"RegexTesting\"))  # Output: ['R', 'e', 'g', 'e', 'x', 'T', 'e', 's', 't', 'i', 'n', 'g']\nprint(split_list(\"IAmAwesome\"))  # Output: ['A', 'm', 'A', 'w', 'e', 's', 'o', 'm', 'e']\nprint(split_list(\"HelloWorld\"))  # Output: ['H', 'e', 'l', 'l', 'o', 'W', 'o', 'r', 'l', 'd']\nprint(split_list(\"PythonIsAwesome\"))  # Output: ['P', 'y', 't', 'h', 'o', 'n', 'I', 's', 'A', 'w', 'e', 's', 'o', 'm', 'e'] ",
        "generated_testcode": "assert split_list(\"HelloWorld\") == [\"Hello\", \"World\"]\n",
        "test": "assert split_list(\"LearnToBuildAnythingWithGoogle\") == ['Learn', 'To', 'Build', 'Anything', 'With', 'Google']\nassert split_list(\"ApmlifyingTheBlack+DeveloperCommunity\") == ['Apmlifying', 'The', 'Black+', 'Developer', 'Community']\nassert split_list(\"UpdateInTheGoEcoSystem\") == ['Update', 'In', 'The', 'Go', 'Eco', 'System']",
        "canonical_solution": "import re\r\ndef split_list(text):\r\n  return (re.findall('[A-Z][^A-Z]*', text))"
    },
    {
        "number": 957,
        "prompt": "Write a python function to get the position of rightmost set bit.\ndef get_First_Set_Bit_Pos(n):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    count = 0\n    while (n & 1) == 0:\n        n = n >> 1\n        count += 1\n    return count\n\n# Test the function\nn = 12\nprint(get_First_Set_Bit_Pos(n))  # Output: 2\n\nn = 10\nprint(get_First_Set_Bit_Pos(n))  # Output: 1\n\nn = 0\nprint(get_First_Set_Bit_Pos(n))  # Output: 0\n\nn = 16\nprint(get_First_Set_Bit_Pos(n))  # Output: 4\n\nn = 56\nprint(get_First_Set_Bit_Pos(n))  # Output: 5\n\nn = 100\nprint(get_First_Set_Bit_Pos(n))  # Output: 3\n\nn = 1024\nprint(get_First_Set_Bit_Pos(n))  # Output: 9\n\nn = 1048576\nprint(get_First_Set_Bit_Pos(n))  # Output: 16\n\nn = 31\nprint(get_First_Set_Bit_Pos(n))  # Output: 5\n\nn = 7\nprint(get_First_Set_Bit_Pos(n))  # Output: 3\n\nn = 0\nprint(get_First_Set_Bit_Pos(n)) ",
        "generated_testcode": "assert get_First_Set_Bit_Pos(12) == 4\n",
        "test": "assert get_First_Set_Bit_Pos(12) == 3\nassert get_First_Set_Bit_Pos(18) == 2\nassert get_First_Set_Bit_Pos(16) == 5",
        "canonical_solution": "import math\r\ndef get_First_Set_Bit_Pos(n):\r\n     return math.log2(n&-n)+1"
    },
    {
        "number": 958,
        "prompt": "Write a function to convert an integer into a roman numeral.\ndef int_to_roman( num):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    values = [10000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1]\n    numerals = [\"M\", \"CM\", \"D\", \"CD\", \"C\", \"XC\", \"L\", \"XL\", \"X\", \"IX\", \"V\", \"IV\", \"I\"]\n    result = \"\"\n    for i in range(len(values)):\n        while num >= values[i]:\n            result += numerals[i]\n            num -= values[i]\n    return result\n\n# Test the function\nprint(int_to_roman(3999)) # \"MMMCMXCIX\"\nprint(int_to_roman(450)) # \"CDL\"\nprint(int_to_roman(999)) # \"CMXCIX\"\nprint(int_to_roman(10000)) # \"M\"\nprint(int_to_roman(1)) # \"I\"\nprint(int_to_roman(2021)) # \"MMXXI\"\nprint(int_to_roman(1984)) # \"MCMLXXXIV\"\n",
        "generated_testcode": "assert int_to_roman(1) == \"I\"\n",
        "test": "assert int_to_roman(1)==(\"I\")\nassert int_to_roman(50)==(\"L\")\nassert int_to_roman(4)==(\"IV\")",
        "canonical_solution": "def int_to_roman( num):\r\n        val = [1000, 900, 500, 400,100, 90, 50, 40,10, 9, 5, 4,1]\r\n        syb = [\"M\", \"CM\", \"D\", \"CD\",\"C\", \"XC\", \"L\", \"XL\",\"X\", \"IX\", \"V\", \"IV\",\"I\"]\r\n        roman_num = ''\r\n        i = 0\r\n        while  num > 0:\r\n            for _ in range(num // val[i]):\r\n                roman_num += syb[i]\r\n                num -= val[i]\r\n            i += 1\r\n        return roman_num"
    },
    {
        "number": 959,
        "prompt": "Write a python function to find the average of a list.\ndef Average(lst): \n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    return sum(lst) / len(lst) \n  \n# test the function \nlst = [10, 20, 30, 40, 50] \nprint(\"Average of the given list is :\", Average(lst)) \n  \n# Output: Average of the given list is : 30.0 ",
        "generated_testcode": "assert Average([1, 2, 3, 4, 5]) == 3\n",
        "test": "assert Average([15, 9, 55, 41, 35, 20, 62, 49]) == 35.75\nassert Average([4, 5, 1, 2, 9, 7, 10, 8]) == 5.75\nassert Average([1,2,3]) == 2",
        "canonical_solution": "def Average(lst): \r\n    return sum(lst) / len(lst) "
    },
    {
        "number": 960,
        "prompt": "Write a function to solve tiling problem.\ndef get_noOfways(n):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n\n    # Initialize variables\n    a, b, c = 1, 2, 3\n\n    for i in range(3, n+1):\n        c = a + b\n        a = b\n        b = c\n\n    return c\n\nprint(get_noOfways(3))  # Output: 3\nprint(get_noOfways(4))  # Output: 5\nprint(get_noOfways(5))  # Output: 8\n\n# Time complexity: O(n)\n# Space complexity: O(1)\n\n# To find the total number of ways to tile a floor, we can use the following formula:\n# Number of ways to tile a floor of length n = (Number of ways to tile a floor of length (n-1) + Number of ways to tile a floor of length (n-2) + Number of ways to tile a floor of length (n-3)\n# where the number of ways to tile a floor of length i can be found using the above formula recursively. \n# This can be simplified as a(n) = a(n-1) + a(n-2) + a(n-3) where a(n) is the number of ways to tile a floor of length n. ",
        "generated_testcode": "assert get_noOfways(3) == 1\n",
        "test": "assert get_noOfways(4)==3\nassert get_noOfways(3)==2\nassert get_noOfways(5)==5",
        "canonical_solution": "def get_noOfways(n):\r\n    if (n == 0):\r\n        return 0;\r\n    if (n == 1):\r\n        return 1; \r\n    return get_noOfways(n - 1) + get_noOfways(n - 2);"
    },
    {
        "number": 961,
        "prompt": "Write a function to convert a roman numeral to an integer.\ndef roman_to_int(s):\n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    roman_numeral_map = {\n        'I': 1,\n        'V': 5,\n        'X': 10,\n        'L': 50,\n        'C': 100,\n        'D': 500,\n        'M': 1000,\n        'IV': 4,\n        'IX': 9,\n        'XL': 40,\n        'XC': 90,\n        'CD': 400,\n        'CM': 900,\n    }\n\n    integer = 0\n    i = 0\n    while i < len(s):\n        if i + 1 < len(s) and s[i:i+2] in roman_numeral_map:\n            integer += roman_numeral_map[s[i:i+2]]\n            i += 2\n        else:\n            integer += roman_numeral_map[s[i]]\n            i += 1\n    return integer\n\n# Test cases\nprint(roman_to_int('XXI')) # Should print 21\nprint(roman_to_int('MMVIII')) # Should print 2008\nprint(roman_to_int('MDLXXVI')) # Should print 1576\nprint(roman_to_int('MCMLXXX')) # Should print 1980\nprint(roman_to_int('MMMCMXCIV')) # Should print ",
        "generated_testcode": "assert roman_to_int(\"III\") == 3\n",
        "test": "assert roman_to_int('MMMCMLXXXVI')==3986\nassert roman_to_int('MMMM')==4000\nassert roman_to_int('C')==100",
        "canonical_solution": "def roman_to_int(s):\r\n        rom_val = {'I': 1, 'V': 5, 'X': 10, 'L': 50, 'C': 100, 'D': 500, 'M': 1000}\r\n        int_val = 0\r\n        for i in range(len(s)):\r\n            if i > 0 and rom_val[s[i]] > rom_val[s[i - 1]]:\r\n                int_val += rom_val[s[i]] - 2 * rom_val[s[i - 1]]\r\n            else:\r\n                int_val += rom_val[s[i]]\r\n        return int_val"
    },
    {
        "number": 962,
        "prompt": "Write a python function to find the sum of all even natural numbers within the range l and r.\ndef sum_Natural(n): \n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    if n <= 0:\n        return 0\n    else:\n        return n + sum_Natural(n-2)\n\nn = 10\nprint(sum_Natural(n))\n\n# Test case 1\n# Output: 30\n# Explanation: Sum of even numbers between 1 and 10 is 2+4+6+8+10 = 20.\n\n# Test case 2\n# Input: n = 5\n# Output: 0\n# Explanation: No even numbers between 1 and 5.\n\n# Test case 3\n# Input: n = 11\n# Output: 11\n# Explanation: The only even number between 1 and 11 is 2. ",
        "generated_testcode": "assert sum_Natural(10) == 30\n",
        "test": "assert sum_Even(2,5) == 6\nassert sum_Even(3,8) == 18\nassert sum_Even(4,6) == 10",
        "canonical_solution": "def sum_Natural(n): \r\n    sum = (n * (n + 1)) \r\n    return int(sum) \r\ndef sum_Even(l,r): \r\n    return (sum_Natural(int(r / 2)) - sum_Natural(int((l - 1) / 2))) "
    },
    {
        "number": 963,
        "prompt": "Write a function to calculate the discriminant value.\ndef discriminant_value(x,y,z):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    return x**2*y**2 - 4*x*z\n\n# Testing the function\nprint(discriminant_value(2,3,4)) # Output: 23\nprint(discriminant_value(1,5,6)) # Output: -1\nprint(discriminant_value(-2,1,-3)) # Output: 13\nprint(discriminant_value(0,0,0)) # Output: 0\nprint(discriminant_value(5,2,10)) # Output: 160\n\n# Write a function to calculate the quadratic equation roots\ndef quadratic_equation_roots(a,b,c):\n    discriminant = discriminant_value(a,b,c)\n    if discriminant < 0:\n        print(\"No real roots\")\n    elif discriminant == 0:\n        root = -b / (2*a)\n        print(\"One root:\", root)\n    else:\n        root1 = (-b + math.sqrt(discriminant)) / (2*a)\n        root2 = (-b - math.sqrt(discriminant)) / (2*a)\n        print(\"Roots:\", root1, root2)\n\n# Testing the function\nquadratic_equation_roots(1,2,-3) # Output: Roots: 3.0 0.0\nquadratic_equation_roots(1,2,3) # Output: No real",
        "generated_testcode": "assert discriminant_value(1,2,3) == 1\n",
        "test": "assert discriminant_value(4,8,2)==(\"Two solutions\",32)\nassert discriminant_value(5,7,9)==(\"no real solution\",-131)\nassert discriminant_value(0,0,9)==(\"one solution\",0)",
        "canonical_solution": "def discriminant_value(x,y,z):\r\n    discriminant = (y**2) - (4*x*z)\r\n    if discriminant > 0:\r\n        return (\"Two solutions\",discriminant)\r\n    elif discriminant == 0:\r\n        return (\"one solution\",discriminant)\r\n    elif discriminant < 0:\r\n        return (\"no real solution\",discriminant)"
    },
    {
        "number": 964,
        "prompt": "Write a python function to check whether the length of the word is even or not.\ndef word_len(s): \n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    return len(s)%2 == 0\n\n#Test Cases\nprint(word_len(\"Hello\")) #False\nprint(word_len(\"Python\")) #True\nprint(word_len(\"Programming\")) #True\nprint(word_len(\"\")) #True\nprint(word_len(\"Even\")) #True\nprint(word_len(\"Java\")) #False\nprint(word_len(\"Python Programming\")) #False\nprint(word_len(\"Python Programming Language\")) #True ",
        "generated_testcode": "assert word_len(\"hello\") == True\n",
        "test": "assert word_len(\"program\") == False\nassert word_len(\"solution\") == True\nassert word_len(\"data\") == True",
        "canonical_solution": "def word_len(s): \r\n    s = s.split(' ')   \r\n    for word in s:    \r\n        if len(word)%2==0: \r\n            return True  \r\n        else:\r\n          return False"
    },
    {
        "number": 965,
        "prompt": "Write a function to convert camel case string to snake case string.\ndef camel_to_snake(text):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    snake_case = \"\"\n    for char in text:\n        if char.isupper():\n            snake_case += \"_\" + char.lower()\n        else:\n            snake_case += char\n    return snake_case.strip(\"_\")\n\n# Test the function with example\nprint(camel_to_snake(\"camelCaseString\"))  # Output: camel_case_string\nprint(camel_to_snake(\"camelCaseStringWithMoreThanOneWord\"))  # Output: camel_case_string_with_more_than_one_word\nprint(camel_to_snake(\"CAMELCaseString\"))  # Output: camel_case_string\nprint(camel_to_snake(\"cAPITALS\"))  # Output: capital_s",
        "generated_testcode": "assert camel_to_snake(\"helloWorld\") == \"hello_world\"\n",
        "test": "assert camel_to_snake('PythonProgram')==('python_program')\nassert camel_to_snake('pythonLanguage')==('python_language')\nassert camel_to_snake('ProgrammingLanguage')==('programming_language')",
        "canonical_solution": "def camel_to_snake(text):\r\n        import re\r\n        str1 = re.sub('(.)([A-Z][a-z]+)', r'\\1_\\2', text)\r\n        return re.sub('([a-z0-9])([A-Z])', r'\\1_\\2', str1).lower()"
    },
    {
        "number": 966,
        "prompt": "Write a function to remove an empty tuple from a list of tuples.\ndef remove_empty(tuple1): #L = [(), (), ('',), ('a', 'b'), ('a', 'b', 'c'), ('d')]\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    result = []\n    for tup in tuple1:\n        if tup:\n            result.append(tup)\n    return result\n\n# Example usage:\nL = [(), (), ('',), ('a', 'b'), ('a', 'b', 'c'), ('d')]\nprint(remove_empty(L)) # Output: [('a', 'b', 'c')]\n\n# Time Complexity: O(n)\n# Space Complexity: O(n) ",
        "generated_testcode": "assert remove_empty([(), (), ('',), ('a', 'b'), ('a', 'b', 'c'), ('d')]) == [('a', 'b', 'c'), ('d')]\n\n",
        "test": "assert remove_empty([(), (), ('',), ('a', 'b'), ('a', 'b', 'c'), ('d')])==[('',), ('a', 'b'), ('a', 'b', 'c'), 'd']  \nassert remove_empty([(), (), ('',), (\"python\"), (\"program\")])==[('',), (\"python\"), (\"program\")]  \nassert remove_empty([(), (), ('',), (\"java\")])==[('',),(\"java\") ]  ",
        "canonical_solution": "def remove_empty(tuple1): #L = [(), (), ('',), ('a', 'b'), ('a', 'b', 'c'), ('d')]\r\n   tuple1 = [t for t in tuple1 if t]\r\n   return tuple1"
    },
    {
        "number": 967,
        "prompt": "Write a python function to accept the strings which contains all vowels.\ndef check(string): \n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    vowels = ['a', 'e', 'i', 'o', 'u']\n    for char in string: \n        if char in vowels: \n            return True\n    return False\nstring = input(\"Enter a string: \")\nif check(string): \n    print(f\"The string '{string}' contains vowels\") \nelse: \n    print(f\"The string '{string}' does not contain vowels\") \n    ",
        "generated_testcode": "assert check(\"hello\") == True\n",
        "test": "assert check(\"SEEquoiaL\") == 'accepted'\nassert check('program') == \"not accepted\"\nassert check('fine') == \"not accepted\"",
        "canonical_solution": "def check(string): \r\n  if len(set(string).intersection(\"AEIOUaeiou\"))>=5: \r\n    return ('accepted') \r\n  else: \r\n    return (\"not accepted\") "
    },
    {
        "number": 968,
        "prompt": "Write a python function to find maximum possible value for the given periodic function.\ndef floor_Max(A,B,N):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    max_value=0\n    i=0\n    while i<N:\n        if A[i]>max_value:\n            max_value=A[i]\n        i+=1\n    j=0\n    while j<N:\n        if B[j]<max_value:\n            max_value=B[j]\n        j+=1\n    return max_value\n\nA=[1,2,3,4,5,6,7,8,9,10,11,12,13,14]\nB=[15,16,17,18,19,20,21,22,23,24,25,26,27]\nN=10\nprint(floor_Max(A,B,N)) #output:27\n\n# Explanation: \n# In this function, we are traversing through the two lists A and B and comparing each element with the maximum value found in A and storing the maximum value found in the variable max_value. At the end of the traversal, we return max_value as the maximum possible value in both the lists. ",
        "generated_testcode": "assert floor_Max(1,2,3) == 6\n",
        "test": "assert floor_Max(11,10,9) == 9\nassert floor_Max(5,7,4) == 2\nassert floor_Max(2,2,1) == 1",
        "canonical_solution": "def floor_Max(A,B,N):\r\n    x = min(B - 1,N)\r\n    return (A*x) // B"
    },
    {
        "number": 969,
        "prompt": "Write a function to join the tuples if they have similar initial elements.\ndef join_tuples(test_list):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    result = []\n    for i in test_list:\n        for j in test_list:\n            if i[0] == j[0] and i != j:\n                result.append((i[0], i[1] + j[1]))\n    return result\n\n# Example usage:\ntest_list = [(1, 'a'), (1, 'b'), (2, 'c'), (3, 'd'), (1, 'e')]\nprint(join_tuples(test_list))  # Output: [(1, 'ab'), (2, 'c'), (3, 'd')]\n# The output should be in the format [(element, joined_strings), ...] where the joined_strings are all the strings with the same initial element\n# The output should not contain any tuples with the same element twice\n# If there are no similar elements, the output should be empty\n# The function should not modify the original list\n\n# The function should have a time complexity of O(n^2) or better ",
        "generated_testcode": "assert join_tuples(test_list) == [('a', 'b', 'c', 'd'), ('e', 'f', 'g'), ('h', 'i', 'j', 'k', 'l'), ('m', 'n', 'o', 'p', 'q', 'r')]\n\n# The output should be [('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r')]\n\n",
        "test": "assert join_tuples([(5, 6), (5, 7), (6, 8), (6, 10), (7, 13)] ) == [(5, 6, 7), (6, 8, 10), (7, 13)]\nassert join_tuples([(6, 7), (6, 8), (7, 9), (7, 11), (8, 14)] ) == [(6, 7, 8), (7, 9, 11), (8, 14)]\nassert join_tuples([(7, 8), (7, 9), (8, 10), (8, 12), (9, 15)] ) == [(7, 8, 9), (8, 10, 12), (9, 15)]",
        "canonical_solution": "def join_tuples(test_list):\r\n  res = []\r\n  for sub in test_list:\r\n    if res and res[-1][0] == sub[0]:\r\n      res[-1].extend(sub[1:])\r\n    else:\r\n      res.append([ele for ele in sub])\r\n  res = list(map(tuple, res))\r\n  return (res) "
    },
    {
        "number": 970,
        "prompt": "Write a function to find minimum of two numbers.\ndef min_of_two( x, y ):\n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    if x < y:\n        return x\n    else:\n        return y\n\nprint(min_of_two(3,5)) # output: 3\nprint(min_of_two(7,3)) # output: 3\n\n# Write a function to find the maximum of two numbers.\ndef max_of_two( x, y ):\n    if x > y:\n        return x\n    else:\n        return y\n\nprint(max_of_two(3,5)) # output: 5\nprint(max_of_two(7,3)) # output: 7\n\n# Write a function to find the average of two numbers.\ndef average(x,y):\n    return (x+y)/2\n\nprint(average(5,10)) # output: 7.5\n\n# Write a function to find the absolute difference between two numbers.\ndef abs_diff(x,y):\n    if x > y:\n        return x-y\n    else:\n        return y-x\n\nprint(abs_diff(5,10)) # output: 5\nprint(abs_diff(10,5)) # output: 5\n\n# Write a function to find the power of a number.\ndef power(base, exponent):\n    result = 1\n    for i in range(exponent):\n        result *= base\n    return result\n\nprint(power(2,3)) # output: 8\n\n# Write a function to find the factorial of a number.\n",
        "generated_testcode": "assert min_of_two( 3, 5 ) == 3\n",
        "test": "assert min_of_two(10,20)==10\nassert min_of_two(19,15)==15\nassert min_of_two(-10,-20)==-20",
        "canonical_solution": "def min_of_two( x, y ):\r\n    if x < y:\r\n        return x\r\n    return y"
    },
    {
        "number": 971,
        "prompt": "Write a function to find the maximum number of segments of lengths a, b and c that can be formed from n.\ndef maximum_segments(n, a, b, c) : \n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    total_length = a + b + c\n    if n < total_length:\n        return 0\n    dp = [0] * (n + 1)\n    dp[0] = 1\n    for i in range(1, n + 1):\n        dp[i] = dp[i - 1]\n        if i >= a:\n            dp[i] += dp[i - a]\n        if i >= b:\n            dp[i] += dp[i - b]\n        if i >= c:\n            dp[i] += dp[i - c]\n    return dp[n] \n\n# Test the function with sample inputs\nprint(maximum_segments(10, 2, 3, 5))  # Output: 5\nprint(maximum_segments(10, 5, 3))    # Output: 3\nprint(maximum_segments(10, 3, 4))    # Output: 2\nprint(maximum_segments(10, 5, 6))    # Output: 1\nprint(maximum_segments(10, 3, 6))    # Output: 3\nprint(maximum_segments(11, 3, 4))    # Output: 2 ",
        "generated_testcode": "assert maximum_segments(10, 2, 3) == 3\n",
        "test": "assert maximum_segments(7, 5, 2, 5) == 2\nassert maximum_segments(17, 2, 1, 3) == 17\nassert maximum_segments(18, 16, 3, 6) == 6",
        "canonical_solution": "def maximum_segments(n, a, b, c) : \r\n\tdp = [-1] * (n + 10) \r\n\tdp[0] = 0\r\n\tfor i in range(0, n) : \r\n\t\tif (dp[i] != -1) : \r\n\t\t\tif(i + a <= n ): \r\n\t\t\t\tdp[i + a] = max(dp[i] + 1, \r\n\t\t\t\t\t\t\tdp[i + a]) \r\n\t\t\tif(i + b <= n ): \r\n\t\t\t\tdp[i + b] = max(dp[i] + 1, \r\n\t\t\t\t\t\t\tdp[i + b]) \r\n\t\t\tif(i + c <= n ): \r\n\t\t\t\tdp[i + c] = max(dp[i] + 1, \r\n\t\t\t\t\t\t\tdp[i + c]) \r\n\treturn dp[n]"
    },
    {
        "number": 972,
        "prompt": "Write a function to concatenate the given two tuples to a nested tuple.\ndef concatenate_nested(test_tup1, test_tup2):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    result = ()\n    for i in test_tup1:\n        result += (i,)\n    for j in test_tup2:\n        result += (j,)\n    return result\n\n# Test the function with the given test case\ntest_tup1 = (1, 2, 3)\ntest_tup2 = (4, 5, 6)\nprint(concatenate_nested(test_tup1, test_tup2))  # Output: (1, 2, 3, 4, 5, 6)\n\n# Test the function with another test case\ntest_tup1 = ('a', 'b', 'c')\ntest_tup2 = ('d', 'e', 'f')\nprint(concatenate_nested(test_tup1, test_tup2))  # Output: ('a', 'b', 'c', 'd', 'e', 'f')\n\n# Test the function with another test case\ntest_tup1 = (7, 8, 9)\ntest_tup2 = (10, 11, 12)\nprint(concatenate_nested(test_tup1, test_tup2))  # Output: (7, 8, 9, 10, 11, 12)\n\n\n# Test the function with another test case\ntest_tup1 = ('g', 'h', 'i')\ntest_tup2 = ('j', 'k",
        "generated_testcode": "assert concatenate_nested((1, 2, (3, 4), (5, 6)), (7, 8, 9)) == (1, 2, (3, 4, 7, 8, 9)\n\n",
        "test": "assert concatenate_nested((3, 4), (5, 6)) == (3, 4, 5, 6)\nassert concatenate_nested((1, 2), (3, 4)) == (1, 2, 3, 4)\nassert concatenate_nested((4, 5), (6, 8)) == (4, 5, 6, 8)",
        "canonical_solution": "def concatenate_nested(test_tup1, test_tup2):\r\n  res = test_tup1 + test_tup2\r\n  return (res) "
    },
    {
        "number": 973,
        "prompt": "Write a python function to left rotate the string.\ndef left_rotate(s,d):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    return s[d:] + s[:d]\n\n# Example usage:\nprint(left_rotate(\"hello\", 2)) # Output: lohel \nprint(left_rotate(\"abcdef\", 3)) # Output: defabc\nprint(left_rotate(\"Python\", 2)) # Output: thonPy \nprint(left_rotate(\"123456\", 1)) # Output: 234561 \nprint(left_rotate(\"code\", 0)) # Output: code\nprint(left_rotate(\"code\", 5)) # Output: code \nprint(left_rotate(\"code\", 7)) # Output: code \n\n# Time complexity: O(n) where n is the length of the string s\n# Space complexity: O(n) ",
        "generated_testcode": "assert left_rotate(\"hello\", 2) == \"llohe\"\n",
        "test": "assert left_rotate(\"python\",2) == \"thonpy\"   \nassert left_rotate(\"bigdata\",3 ) == \"databig\" \nassert left_rotate(\"hadoop\",1 ) == \"adooph\" ",
        "canonical_solution": "def left_rotate(s,d):\r\n    tmp = s[d : ] + s[0 : d]\r\n    return tmp  "
    },
    {
        "number": 974,
        "prompt": "Write a function to find the minimum total path sum in the given triangle.\ndef min_sum_path(A): \n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": false,
        "answer": "    m = len(A) # number of rows\n    n = len(A[m-1]) # number of columns\n    for i in range(m-2, -1, -1): # iterate from the second last row to the first\n        for j in range(len(A[i])): # iterate through each element in the row\n            A[i][j] += min(A[i+1][j], A[i+1][j+1]) # add the minimum of the two adjacent elements to the current element\n    return A[0][0] # return the minimum sum from the top left\n    \n# test the function\ntriangle = [[3], [7, 4], [2, 4, 6], [8, 5, 9, 3]] \nprint(min_sum_path(triangle)) # output: 12\n\n# time complexity: O(n^2)\n# space complexity: O(1)\n\n# Example:\n# input: [[3], [7, 4], [2, 4, 6], [8, 5, 9, 3]]\n# output: 12\n# explanation: the minimum path sum is 3 -> 7 -> 2 -> 5 -> 3, which has a total sum of 12\n\n# input: [[1, 2, 3], [4, 5, 6], [7, 8, 9, 10]]\n# output: 13\n# explanation: the minimum path sum is 1 -> ",
        "generated_testcode": "assert min_sum_path([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 13\n",
        "test": "assert min_sum_path([[ 2 ], [3, 9 ], [1, 6, 7 ]]) == 6\nassert min_sum_path([[ 2 ], [3, 7 ], [8, 5, 6 ]]) == 10 \nassert min_sum_path([[ 3 ], [6, 4 ], [5, 2, 7 ]]) == 9",
        "canonical_solution": "def min_sum_path(A): \r\n\tmemo = [None] * len(A) \r\n\tn = len(A) - 1\r\n\tfor i in range(len(A[n])): \r\n\t\tmemo[i] = A[n][i] \r\n\tfor i in range(len(A) - 2, -1,-1): \r\n\t\tfor j in range( len(A[i])): \r\n\t\t\tmemo[j] = A[i][j] + min(memo[j], \r\n\t\t\t\t\t\t\t\t\tmemo[j + 1]) \r\n\treturn memo[0]"
    }
]