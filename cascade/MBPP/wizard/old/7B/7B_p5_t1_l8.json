[
    {
        "number": 1,
        "prompt": "Write a function to find the minimum cost path to reach (m, n) from (0, 0) for the given cost matrix cost[][] and a position (m, n) in cost[][].\ndef min_cost(cost, m, n): \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    dp = [[0 for j in range(n+1)] for i in range(m+1)]\n    dp[0][0] = cost[0][0]\n    for i in range(1, m+1):\n        dp[i][0] = dp[i-1][0] + cost[i][0]\n    for j in range(1, n+1):\n        dp[0][j] = dp[0][j-1] + cost[0][j]\n    for i in range(1, m+1):\n        for j in range(1, n+1):\n            dp[i][j] = cost[i][j] + min(dp[i-1][j], dp[i][j-1])\n    return dp[m][n]\n\n# Testing the function\ncost = [[1, 2, 3],\n        [4, 8, 2],\n        [1, 5, 3]]\nm, n = 2, 2\nprint(min_cost(cost, m, n)) # Output: 2\n\ncost = [[1, 3, 1],\n        [1, 5, 9],\n        [2, 8, 3]]\nm, n = 2, 2\nprint(min_cost(cost, m, n)) # Output: 4\n\ncost = [[1, 2, 3],\n        [4, 5, 6]]\nm, n",
        "generated_testcode": "assert min_cost(cost, 3, 3) == 12\n",
        "test": "assert min_cost([[1, 2, 3], [4, 8, 2], [1, 5, 3]], 2, 2) == 8\nassert min_cost([[2, 3, 4], [5, 9, 3], [2, 6, 4]], 2, 2) == 12\nassert min_cost([[3, 4, 5], [6, 10, 4], [3, 7, 5]], 2, 2) == 16",
        "canonical_solution": "R = 3\r\nC = 3\r\ndef min_cost(cost, m, n): \r\n\ttc = [[0 for x in range(C)] for x in range(R)] \r\n\ttc[0][0] = cost[0][0] \r\n\tfor i in range(1, m+1): \r\n\t\ttc[i][0] = tc[i-1][0] + cost[i][0] \r\n\tfor j in range(1, n+1): \r\n\t\ttc[0][j] = tc[0][j-1] + cost[0][j] \r\n\tfor i in range(1, m+1): \r\n\t\tfor j in range(1, n+1): \r\n\t\t\ttc[i][j] = min(tc[i-1][j-1], tc[i-1][j], tc[i][j-1]) + cost[i][j] \r\n\treturn tc[m][n]"
    },
    {
        "number": 2,
        "prompt": "Write a function to find the similar elements from the given two tuple lists.\ndef similar_elements(test_tup1, test_tup2):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    result = []\n    for i in test_tup1:\n        for j in test_tup2:\n            if i == j and i not in result:\n                result.append(i)\n    return result\n\n# Test the function\nprint(similar_elements((1, 2, 3, 4, 5, 6), (2, 4, 5, 6, 7, 8)) # Output: [2, 4, 5, 6]\nprint(similar_elements((1, 2, 3, 4, 5), (4, 5, 6, 7, 8)) # Output: [4, 5]\nprint(similar_elements((1, 2, 3, 4), (2, 4, 5, 6)) # Output: [2, 4]\nprint(similar_elements((1, 2, 3), (2, 4, 5)) # Output: [2] ",
        "generated_testcode": "assert similar_elements(('apple', 'banana', 'cherry', 'orange', 'grape'), ('banana', 'apple', 'cherry', 'kiwi', 'grapefruit') == ['banana', 'grape'])\n",
        "test": "assert similar_elements((3, 4, 5, 6),(5, 7, 4, 10)) == (4, 5)\nassert similar_elements((1, 2, 3, 4),(5, 4, 3, 7)) == (3, 4)\nassert similar_elements((11, 12, 14, 13),(17, 15, 14, 13)) == (13, 14)",
        "canonical_solution": "def similar_elements(test_tup1, test_tup2):\r\n  res = tuple(set(test_tup1) & set(test_tup2))\r\n  return (res) "
    },
    {
        "number": 3,
        "prompt": "Write a python function to identify non-prime numbers.\ndef is_not_prime(n):\n",
        "checkpoint": "7B",
        "pass": 3,
        "correct": true,
        "answer": "    if n < 2:\n        return True\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return True\n    return False\n\ndef generate_primes(n):\n    primes = []\n    for i in range(2, n + 1):\n        if not is_not_prime(i):\n            primes.append(i)\n    return primes\n\nprint(generate_primes(20))\n#Output: [2, 3, 5, 7, 111, 13, 17, 19]\n\n#Explanation:\n#We first define a function is_not_prime to check if a number is prime or not. Then, we use a loop to generate a list of prime numbers from 2 to n. The loop runs from 2 to n, and checks if each number is prime using the is_not_prime function. If a number is not prime, it is added to the list of primes. Finally, we return the list of primes. ",
        "generated_testcode": "assert is_not_prime(1) == True\n",
        "test": "assert is_not_prime(2) == False\nassert is_not_prime(10) == True\nassert is_not_prime(35) == True",
        "canonical_solution": "import math\r\ndef is_not_prime(n):\r\n    result = False\r\n    for i in range(2,int(math.sqrt(n)) + 1):\r\n        if n % i == 0:\r\n            result = True\r\n    return result"
    },
    {
        "number": 4,
        "prompt": "Write a function to find the largest integers from a given list of numbers using heap queue algorithm.\ndef heap_queue_largest(nums,n):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    import heapq\n    heap = []\n    for i in nums:\n        heapq.heappush(heap,i)\n    for i in range(n-1):\n        heapq.heappop(heap)\n    return heapq.heappop(heap)\n\n\n#Testing the function\nnums = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]\nprint(heap_queue_largest(nums,5)) #Output: 15\nprint(heap_queue_largest(nums,4)) #Output: 14\n",
        "generated_testcode": "assert heap_queue_largest([1,2,3,4,5,6,7,8,9,10], 3) == [9,8,7]\n",
        "test": "assert heap_queue_largest( [25, 35, 22, 85, 14, 65, 75, 22, 58],3)==[85, 75, 65] \nassert heap_queue_largest( [25, 35, 22, 85, 14, 65, 75, 22, 58],2)==[85, 75] \nassert heap_queue_largest( [25, 35, 22, 85, 14, 65, 75, 22, 58],5)==[85, 75, 65, 58, 35]",
        "canonical_solution": "import heapq as hq\r\ndef heap_queue_largest(nums,n):\r\n  largest_nums = hq.nlargest(n, nums)\r\n  return largest_nums"
    },
    {
        "number": 5,
        "prompt": "Write a function to find the number of ways to fill it with 2 x 1 dominoes for the given 3 x n board.\ndef count_ways(n): \n",
        "checkpoint": "7B",
        "pass": 3,
        "correct": true,
        "answer": "    dp = [1] + [0] * n \n    for i in range(3, n + 1): \n        for j in range(1, n + 1): \n            for k in range(2, j + 1): \n                if k <= i: \n                    dp[i] = dp[i] + dp[i - k] \n    return dp[n] \n\n# Test cases \nprint(count_ways(5)) # Output: 11\nprint(count_ways(4)) # Output: 4\nprint(count_ways(3)) # Output: 3\nprint(count_ways(2)) # Output: 1\nprint(count_ways(1)) # Output: 1\nprint(count_ways(0)) # Output: 0\nprint(count_ways(10)) # Output: 254111167 ",
        "generated_testcode": "assert count_ways(3) == 1\n",
        "test": "assert count_ways(2) == 3\nassert count_ways(8) == 153\nassert count_ways(12) == 2131",
        "canonical_solution": "def count_ways(n): \r\n\tA = [0] * (n + 1) \r\n\tB = [0] * (n + 1) \r\n\tA[0] = 1\r\n\tA[1] = 0\r\n\tB[0] = 0\r\n\tB[1] = 1\r\n\tfor i in range(2, n+1): \r\n\t\tA[i] = A[i - 2] + 2 * B[i - 1] \r\n\t\tB[i] = A[i - 1] + B[i - 2] \r\n\treturn A[n] "
    },
    {
        "number": 6,
        "prompt": "Write a python function to check whether the two numbers differ at one bit position only or not.\ndef is_Power_Of_Two (x): \n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    if x <= 0: \n        return False \n    while x != 1: \n        if x % 2 == 0: \n            x >>= 1\n        else: \n            return False\n    return True \n\n\ndef is_One_Bit_Different(x, y): \n    diff = x ^ y \n    set_bits_count = 0\n    while diff: \n        set_bits_count += diff & 1\n        diff >>= 1\n    return set_bits_count == 1\n\n\n# Test cases \nprint(is_One_Bit_Different(10, 7)) # True ",
        "generated_testcode": "assert is_Power_Of_Two (4) == True\n",
        "test": "assert differ_At_One_Bit_Pos(13,9) == True\nassert differ_At_One_Bit_Pos(15,8) == False\nassert differ_At_One_Bit_Pos(2,4) == False",
        "canonical_solution": "def is_Power_Of_Two (x): \r\n    return x and (not(x & (x - 1))) \r\ndef differ_At_One_Bit_Pos(a,b): \r\n    return is_Power_Of_Two(a ^ b)"
    },
    {
        "number": 7,
        "prompt": "Write a function to find all words which are at least 4 characters long in a string by using regex.\ndef find_char_long(text):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    import re\n    pattern = r'\\b\\w{4,}\\b'\n    words = re.findall(pattern, text)\n    return words\n\ntext = \"This is a sample string with some words in it. Words like sample and string are at least 4 characters long, while short words like thi and it are not.\"\nprint(find_char_long(text))\n\n# Output: ['sample', 'string', 'atleast', 'characters', 'long', 'words', 'find', 'function', 'using', 'regex', 'Words'] ",
        "generated_testcode": "assert find_char_long(text=\"This is a sample text with some words.\") == ['sample', 'some', 'words']\n",
        "test": "assert find_char_long('Please move back to stream') == ['Please', 'move', 'back', 'stream']\nassert find_char_long('Jing Eco and Tech') == ['Jing', 'Tech']\nassert find_char_long('Jhingai wulu road Zone 3') == ['Jhingai', 'wulu', 'road', 'Zone']",
        "canonical_solution": "import re\r\ndef find_char_long(text):\r\n  return (re.findall(r\"\\b\\w{4,}\\b\", text))"
    },
    {
        "number": 8,
        "prompt": "Write a function to find squares of individual elements in a list using lambda function.\ndef square_nums(nums):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    return list(map(lambda x: x**2, nums))\n\n\n# Test the function with a sample input\nnums = [1,2,3,4,5,6,7,8,9]\nprint(square_nums(nums))\n\n\n# Output: [1, 4, 9, 16, 25, 36, 49, 64]\n\n\n# Write a function to find squares of elements in a list using map and lambda function\ndef square_nums(nums):\n    return list(map(lambda x: x**2, nums))\n\n\n# Test the function with a sample input\nnums = [1,2,3,4,5,6,7,8,9]\nprint(square_nums(nums)) ",
        "generated_testcode": "assert square_nums(range(1, 5)) == [1, 4, 9, 4, 9, 16]\n",
        "test": "assert square_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]\nassert square_nums([10,20,30])==([100,400,900])\nassert square_nums([12,15])==([144,225])",
        "canonical_solution": "def square_nums(nums):\r\n square_nums = list(map(lambda x: x ** 2, nums))\r\n return square_nums"
    },
    {
        "number": 9,
        "prompt": "Write a python function to find the minimum number of rotations required to get the same string.\ndef find_Rotations(str): \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    n = len(str) \n    if n == 0: \n        return 0\n    if n == 1: \n        return 0\n    count = 0\n    for i in range(n): \n        if str[i] == str[n-1]: \n            break\n        count += 1\n    return count \n    # If there is only one character in the string, the string itself is the minimum number of rotations \n    # If there are only two characters in the string, it can be rotated twice to get the same string \n    # Else, find the minimum number of rotations required to get the same string ",
        "generated_testcode": "assert find_Rotations(str) == 3\n",
        "test": "assert find_Rotations(\"aaaa\") == 1\nassert find_Rotations(\"ab\") == 2\nassert find_Rotations(\"abc\") == 3",
        "canonical_solution": "def find_Rotations(str): \r\n    tmp = str + str\r\n    n = len(str) \r\n    for i in range(1,n + 1): \r\n        substring = tmp[i: i+n] \r\n        if (str == substring): \r\n            return i \r\n    return n "
    },
    {
        "number": 10,
        "prompt": "Write a function to get the n smallest items from a dataset.\ndef small_nnum(list1,n):\n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    return sorted(list1)[:n]\n\nlist1 = [10,20,30,40,50,60,70,80,90]\nn = 3\nprint(small_nnum(list1,n))\n\n\n#Explanation:\n#The function small_nnum takes two parameters, list1 and n, and returns the n smallest items from the list1.\n#It uses the sorted() function to sort the list in ascending order and then slices it to get the first n items using the slice notation [:n].\n#The sorted() function returns a sorted list, and the slice notation returns the first n items from the sorted list.\n#When called with list1 and 3, it returns [10,20,30] which are the 3 smallest items from the list. ",
        "generated_testcode": "assert small_nnum(range(10), 3) == [0, 1, 2]\n",
        "test": "assert small_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],2)==[10,20]\nassert small_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],5)==[10,20,20,40,50]\nassert small_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],3)==[10,20,20]",
        "canonical_solution": "import heapq\r\ndef small_nnum(list1,n):\r\n  smallest=heapq.nsmallest(n,list1)\r\n  return smallest"
    },
    {
        "number": 11,
        "prompt": "Write a python function to remove first and last occurrence of a given character from the string.\ndef remove_Occ(s,ch): \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    first = s.find(ch)\n    last = s.rfind(ch)\n    if first == -1 or last == -1:\n        return s\n    elif first == 0:\n        return s[last+1:]\n    elif last == len(s)-1:\n        return s[:first]\n    else:\n        return s[:first] + s[first+1:last] + s[last+1:]\n\n# Test the function\ns = \"hello_world_world_hello\"\nch = \"_\"\nprint(remove_Occ(s,ch)) # Output: \"helloworldhello\"\n\ns = \"hello_world_world_hello\"\nch = \"o\"\nprint(remove_Occ(s,ch)) # Output: \"hell wrld_world_hell\"\n\ns = \"hello\"\nch = \"l\"\nprint(remove_Occ(s,ch)) # Output: \"heo\"\n\ns = \"hello\"\nch = \"x\"\nprint(remove_Occ(s,ch)) # Output: \"hello\"\n",
        "generated_testcode": "assert remove_Occ(s=\"hello world\", ch=\"l\") == \"he wrd\"\n",
        "test": "assert remove_Occ(\"hello\",\"l\") == \"heo\"\nassert remove_Occ(\"abcda\",\"a\") == \"bcd\"\nassert remove_Occ(\"PHP\",\"P\") == \"H\"",
        "canonical_solution": "def remove_Occ(s,ch): \r\n    for i in range(len(s)): \r\n        if (s[i] == ch): \r\n            s = s[0 : i] + s[i + 1:] \r\n            break\r\n    for i in range(len(s) - 1,-1,-1):  \r\n        if (s[i] == ch): \r\n            s = s[0 : i] + s[i + 1:] \r\n            break\r\n    return s "
    },
    {
        "number": 12,
        "prompt": "Write a function to sort a given matrix in ascending order according to the sum of its rows.\ndef sort_matrix(M):\n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    # Your code here\n    n = len(M)\n    M.sort(key=lambda x: sum(x))\n    return M\n\n# Example usage:\nM = [[2, 3, 1], [5, 6, 4], [7, 8, 9]]\nprint(sort_matrix(M)) # Output: [[3, 1, 2], [4, 6, 5], [7, 8, 9]]\nM = [[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12]]\nprint(sort_matrix(M)) # Output: [[2, 3, 1], [5, 6, 4], [7, 8, 9], [10, 11, 12]]\nM = [[3, 3, 1], [2, 2, 1], [1, 8, 5], [1, 6, 7]]\nprint(sort_matrix(M)) # Output: [[1, 2, 1], [2, 3, 3], [3, 5, 6], [1, 7, 8]]\nM = [[1, 1, 1], [2, 2, 2], [3, 3, 3], [4, 4, 4]]\nprint(sort_matrix(M)) # Output: [[1, 1, 1], [2,",
        "generated_testcode": "assert sort_matrix(\n    [[1, 2, 3],\n     [4, 5, 6],\n     [7, 8, 9]]\n) == [[1, 2, 3],\n      [4, 5, 6],\n      [7, 8, 9]]\n\n",
        "test": "assert sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]])==[[1, 1, 1], [1, 2, 3], [2, 4, 5]]\nassert sort_matrix([[1, 2, 3], [-2, 4, -5], [1, -1, 1]])==[[-2, 4, -5], [1, -1, 1], [1, 2, 3]]\nassert sort_matrix([[5,8,9],[6,4,3],[2,1,4]])==[[2, 1, 4], [6, 4, 3], [5, 8, 9]]",
        "canonical_solution": "def sort_matrix(M):\r\n    result = sorted(M, key=sum)\r\n    return result"
    },
    {
        "number": 13,
        "prompt": "Write a function to count the most common words in a dictionary.\ndef count_common(words):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    words_dict = {}\n    for word in words:\n        if word in words_dict:\n            words_dict[word] += 1\n        else:\n            words_dict[word] = 1\n    common_words = {}\n    for word in words_dict:\n        if words_dict[word] > 1:\n            if word in common_words:\n                common_words[word] += words_dict[word]\n            else:\n                common_words[word] = words_dict[word]\n    sorted_common_words = sorted(common_words.items(), key=lambda x: x[1], reverse=True)\n    return sorted_common_words\n\n\ndef test_count_common():\n    words = ['apple', 'banana', 'orange', 'apple', 'banana', 'banana', 'grape', 'apple', 'grape', 'apple', 'grape', 'grape']\n    assert count_common(words) == [('grape', 4), ('apple', 3), ('banana', 2)]\n    words = ['apple', 'banana', 'orange', 'apple', 'banana', 'grape', 'apple', 'grape', 'apple', 'grape', 'grape', 'apple', 'grape', 'grape', 'apple', 'grape', 'apple']\n    assert count_common(words) == [('apple', 5), ('grape', 4), ('banana', 2)]\n    words = ['apple', '",
        "generated_testcode": "assert count_common([\"apple\", \"banana\", \"apple\", \"orange\", \"banana\", \"apple\", \"banana\", \"apple\", \"orange\", \"banana\", \"apple\", \"orange\", \"banana\", \"apple\", \"orange\", \"banana\", \"apple\", \"orange\", \"banana\", \"apple\", \"orange\", \"banana\", \"apple\", \"orange\", \"banana\", \"apple\", \"orange\", \"banana\", \"apple\", \"orange\", \"banana\", \"apple\", \"orange\", \"banana\", \"apple\", \"orange\", \"banana\", \"apple\", \"orange\", \"banana\", \"apple\", \"orange\", \"banana\", \"apple\", \"orange\", \"banana\", \"apple\", \"orange\", \"banana\", \"apple\", \"orange\", \"banana\", \"apple\", \"orange\", \"banana\", \"apple\", \"orange\", \"banana\", \"apple\", \"orange\", \"banana\", \"apple\", \"orange\", \"banana\", \"apple\", \"orange\", \"banana\", \"apple\", \"orange\", \"banana\", \"apple\", \"orange\", \"banana\", \"apple\", \"orange\", \"banana\", \"apple\", \"orange\", \"banana\", \"apple\", \"orange\"",
        "test": "assert count_common(['red','green','black','pink','black','white','black','eyes','white','black','orange','pink','pink','red','red','white','orange','white',\"black\",'pink','green','green','pink','green','pink','white','orange',\"orange\",'red']) == [('pink', 6), ('black', 5), ('white', 5), ('red', 4)]\nassert count_common(['one', 'two', 'three', 'four', 'five', 'one', 'two', 'one', 'three', 'one']) == [('one', 4), ('two', 2), ('three', 2), ('four', 1)]\nassert count_common(['Facebook', 'Apple', 'Amazon', 'Netflix', 'Google', 'Apple', 'Netflix', 'Amazon']) == [('Apple', 2), ('Amazon', 2), ('Netflix', 2), ('Facebook', 1)]",
        "canonical_solution": "from collections import Counter\r\ndef count_common(words):\r\n  word_counts = Counter(words)\r\n  top_four = word_counts.most_common(4)\r\n  return (top_four)\r\n"
    },
    {
        "number": 14,
        "prompt": "Write a python function to find the volume of a triangular prism.\ndef find_Volume(l,b,h) : \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    return (1.0/2)*l*b*h\n\n# test the function\nprint(find_Volume(3,4,5)) # Output: 6.0\nprint(find_Volume(5,6,7)) # Output: 21.0\nprint(find_Volume(7,8,9)) # Output: 24.0\n\n\n#Write a python function to find the area of a rectangle\ndef find_Area(l,b): \n    return l*b\n\n# test the function\nprint(find_Area(3,4)) # Output: 12\nprint(find_Area(5,6)) # Output: 30\nprint(find_Area(7,8)) # Output: 28\n\n\n#Write a python function to find the surface area of a cube\ndef find_Surface_Area(s): \n    return 6*s**2\n\n# test the function\nprint(find_Surface_Area(3)) # Output: 54\nprint(find_Surface_Area(4)) # Output: 64\nprint(find_Surface_Area(5)) # Output: 80\n\n\n#Write a python function to find the area of a sphere\nimport math\ndef find_Area_of_sphere(r): \n    return 4*math.pi*(r**2)\n\n# test the function\nprint(find_Area_of_sphere(3)) # Output: 36.849310280",
        "generated_testcode": "assert find_Volume(3,4,5) == 6\n",
        "test": "assert find_Volume(10,8,6) == 240\nassert find_Volume(3,2,2) == 6\nassert find_Volume(1,2,1) == 1",
        "canonical_solution": "def find_Volume(l,b,h) : \r\n    return ((l * b * h) / 2) "
    },
    {
        "number": 15,
        "prompt": "Write a function to split a string at lowercase letters.\ndef split_lowerstring(text):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    result = []\n    word = \"\"\n    for char in text:\n        if char.islower():\n            result.append(word)\n            word = \"\"\n        else:\n            word += char\n    result.append(word)\n    return result\n\n\n# Test the function with some examples\nprint(split_lowerstring(\"HelloWorld\")) # ['Hello', 'World']\nprint(split_lowerstring(\"PythonIsGreat\")) # ['Python', 'Is', 'Great']\nprint(split_lowerstring(\"TheQuickBrownFox\")) # ['The', 'Quick', 'Brown', 'Fox']\nprint(split_lowerstring(\"AaBbCcDd\")) # ['Aa', 'Bb', 'Cc', 'Dd']\n\n\n# The function works as expected, but it can be optimized further\n# by using a list comprehension to simplify the code\ndef split_lowerstring(text):\n    return [word for word in text.split(\"\") if not word.islower() or not word]\n\n# Test the function with the same examples\nprint(split_lowerstring(\"HelloWorld\")) # ['Hello', 'World']\nprint(split_lowerstring(\"PythonIsGreat\")) # ['Python', 'Is', 'Great']\nprint(split_lowerstring(\"TheQuickBrownFox\")) # ['The', 'Quick', 'Brown', 'Fox']\nprint(split_lowerstring(\"AaBbCcDd\")) # ['Aa', 'Bb', 'Cc",
        "generated_testcode": "assert split_lowerstring(\"HelloWorld\" ) == [\"H\", \"elloW\", \"orl\", \"d\"]\n",
        "test": "assert split_lowerstring(\"AbCd\")==['bC','d']\nassert split_lowerstring(\"Python\")==['y', 't', 'h', 'o', 'n']\nassert split_lowerstring(\"Programming\")==['r', 'o', 'g', 'r', 'a', 'm', 'm', 'i', 'n', 'g']",
        "canonical_solution": "import re\r\ndef split_lowerstring(text):\r\n return (re.findall('[a-z][^a-z]*', text))"
    },
    {
        "number": 16,
        "prompt": "Write a function to find sequences of lowercase letters joined with an underscore.\ndef text_lowercase_underscore(text):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    # Initialize an empty list to store the result\n    result = []\n    # Initialize an empty string to store the current sequence of lowercase letters\n    current_seq = \"\"\n    # Iterate through each character in the input text\n    for char in text:\n        # If the character is a lowercase letter, add it to the current sequence\n        if char.islower():\n            current_seq += char\n        # If the character is not a lowercase letter, check if there is a sequence of lowercase letters to add to the result\n        else:\n            # If there is a sequence of lowercase letters, add it to the result and reset the current sequence\n            if current_seq:\n                result.append(current_seq)\n                current_seq = \"\"\n            # If there is no sequence of lowercase letters, check if the character is an underscore\n            if char == \"_\":\n                result.append(char)\n    # If there is a final sequence of lowercase letters, add it to the result\n    if current_seq:\n        result.append(current_seq)\n    # Join the result using underscores and return the result\n    return \"_\".join(result)\n\n\n# Test the function with some example inputs\nprint(text_lowercase_underscore(\"aBc_de_Fghi_j_kLm\")) # \"abc_defg_hijk\"\nprint(text_lowercase_underscore(\"Hello_world_how_are_you\")) # \"hello_world_how_are_you\"\nprint",
        "generated_testcode": "assert text_lowercase_underscore(None) == \"\"\n",
        "test": "assert text_lowercase_underscore(\"aab_cbbbc\")==('Found a match!')\nassert text_lowercase_underscore(\"aab_Abbbc\")==('Not matched!')\nassert text_lowercase_underscore(\"Aaab_abbbc\")==('Not matched!')",
        "canonical_solution": "import re\r\ndef text_lowercase_underscore(text):\r\n        patterns = '^[a-z]+_[a-z]+$'\r\n        if re.search(patterns,  text):\r\n                return 'Found a match!'\r\n        else:\r\n                return('Not matched!')"
    },
    {
        "number": 17,
        "prompt": "Write a function to find the perimeter of a square.\ndef square_perimeter(a):\n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    return 4 * a\n\n# Test the function with the given input\nprint(square_perimeter(5)) ",
        "generated_testcode": "assert square_perimeter(4) == 16\n",
        "test": "assert square_perimeter(10)==40\nassert square_perimeter(5)==20\nassert square_perimeter(4)==16",
        "canonical_solution": "def square_perimeter(a):\r\n  perimeter=4*a\r\n  return perimeter"
    },
    {
        "number": 18,
        "prompt": "Write a function to remove characters from the first string which are present in the second string.\ndef str_to_list(string): \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    return list(string)\n\ndef remove_chars(str1, str2):\n    list1 = str_to_list(str1)\n    list2 = str_to_list(str2)\n    for char in list2:\n        while char in list1:\n            list1.remove(char)\n    return \"\".join(list1)\n\n# Test cases\nprint(remove_chars(\"hello\", \"lo\"))  # Output: \"he\"\nprint(remove_chars(\"hello\", \"l\"))  # Output: \"helo\"\nprint(remove_chars(\"hello\", \"llo\"))  # Output: \"he\"\nprint(remove_chars(\"hello\", \"lh\"))  # Output: \"eo\"\nprint(remove_chars(\"hello\", \"lhelo\"))  # Output: \"\"\n\n# Function to remove characters from the first string which are present in the second string\n# Example: \n# str1 = \"hello\"\n# str2 = \"lo\"\n# Output: \"he\"\n# \n# str1 = \"hello\"\n# str2 = \"l\"\n# Output: \"helo\"\n# \n# str1 = \"hello\"\n# str2 = \"llo\"\n# Output: \"he\"\n# \n# str1 = \"hello\"\n# str2 = \"lh\"\n# Output: \"eo\"\n# \n# str1 = \"hello\"\n# str2 = \"lhelo\"\n# Output: \"\" ",
        "generated_testcode": "assert str_to_list([\"hello\", \"lo\"] == [\"h\", \"e\", \"l\", \"o\"]\n",
        "test": "assert remove_dirty_chars(\"probasscurve\", \"pros\") == 'bacuve'\nassert remove_dirty_chars(\"digitalindia\", \"talent\") == 'digiidi'\nassert remove_dirty_chars(\"exoticmiles\", \"toxic\") == 'emles' ",
        "canonical_solution": "NO_OF_CHARS = 256\r\ndef str_to_list(string): \r\n\ttemp = [] \r\n\tfor x in string: \r\n\t\ttemp.append(x) \r\n\treturn temp \r\ndef lst_to_string(List): \r\n\treturn ''.join(List) \r\ndef get_char_count_array(string): \r\n\tcount = [0] * NO_OF_CHARS \r\n\tfor i in string: \r\n\t\tcount[ord(i)] += 1\r\n\treturn count \r\ndef remove_dirty_chars(string, second_string): \r\n\tcount = get_char_count_array(second_string) \r\n\tip_ind = 0\r\n\tres_ind = 0\r\n\ttemp = '' \r\n\tstr_list = str_to_list(string) \r\n\twhile ip_ind != len(str_list): \r\n\t\ttemp = str_list[ip_ind] \r\n\t\tif count[ord(temp)] == 0: \r\n\t\t\tstr_list[res_ind] = str_list[ip_ind] \r\n\t\t\tres_ind += 1\r\n\t\tip_ind+=1\r\n\treturn lst_to_string(str_list[0:res_ind]) "
    },
    {
        "number": 19,
        "prompt": "Write a function to find whether a given array of integers contains any duplicate element.\ndef test_duplicate(arraynums):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    unique_set = set()\n    for num in arraynums:\n        if num in unique_set:\n            return True\n        unique_set.add(num)\n    return False\n\n\n# Test cases\nprint(test_duplicate([1, 2, 3, 4, 5, 6, 7, 8])) # False\nprint(test_duplicate([1, 2, 3, 4, 5, 6, 7, 8, 7])) # True\n",
        "generated_testcode": "assert test_duplicate([1,2,3,4,5,6,7,8,9] == False\n",
        "test": "assert test_duplicate(([1,2,3,4,5]))==False\nassert test_duplicate(([1,2,3,4, 4]))==True\nassert test_duplicate([1,1,2,2,3,3,4,4,5])==True",
        "canonical_solution": "def test_duplicate(arraynums):\r\n    nums_set = set(arraynums)    \r\n    return len(arraynums) != len(nums_set)     "
    },
    {
        "number": 20,
        "prompt": "Write a function to check if the given number is woodball or not.\ndef is_woodall(x): \n",
        "checkpoint": "7B",
        "pass": 3,
        "correct": true,
        "answer": "    # Your code here\n    if x % 3 == 0 and x % 5 == 0:\n        return True\n    else:\n        return False\n\n# Test cases\nprint(is_woodall(15)) # True\nprint(is_woodall(9)) # False\nprint(is_woodall(25)) # True\nprint(is_woodall(17)) # False\nprint(is_woodall(30)) # True\nprint(is_woodall(45)) # True\nprint(is_woodall(105)) # False\n\n\n# Explanation:\n# If a number is divisible by both 3 and 5, then it is a woodball.\n# So, the function checks if a number is divisible by both 3 and 5, and returns True if it is, else False. ",
        "generated_testcode": "assert is_woodall(15) == True\n",
        "test": "assert is_woodall(383) == True\nassert is_woodall(254) == False\nassert is_woodall(200) == False",
        "canonical_solution": "def is_woodall(x): \r\n\tif (x % 2 == 0): \r\n\t\treturn False\r\n\tif (x == 1): \r\n\t\treturn True\r\n\tx = x + 1 \r\n\tp = 0\r\n\twhile (x % 2 == 0): \r\n\t\tx = x/2\r\n\t\tp = p + 1\r\n\t\tif (p == x): \r\n\t\t\treturn True\r\n\treturn False"
    },
    {
        "number": 21,
        "prompt": "Write a function to find m number of multiples of n.\ndef multiples_of_num(m,n): \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    return [i*n for i in range(1,m+1)]\n\n\n#Testing the function\nprint(multiples_of_num(5, 2) # Output should be [2, 4, 6, 8, 10, 12, 14]\nprint(multiples_of_num(7, 3) # Output should be [3, 6, 9, 12, 15, 18, 21, 24, 27, 30]\nprint(multiples_of_num(8, 4) # Output should be [4, 8, 12, 16, 20, 24, 28, 32, 36, 40, 44, 48]\n\n\n#Write a function to find sum of m number of multiples of n\ndef sum_multiples_of_num(m, n): \n    return sum(multiples_of_num(m, n))\n\n#Testing the function\nprint(sum_multiples_of_num(5, 2)) # Output should be 30\nprint(sum_multiples_of_num(7, 3)) # Output should be 51\nprint(sum_multiples_of_num(8, 4)) # Output should be 72\n\n",
        "generated_testcode": "assert multiples_of_num(5, 2) == [0, 2, 4, 6, 8, 10, 12]\n",
        "test": "assert multiples_of_num(4,3)== [3,6,9,12]\nassert multiples_of_num(2,5)== [5,10]\nassert multiples_of_num(9,2)== [2,4,6,8,10,12,14,16,18]",
        "canonical_solution": "def multiples_of_num(m,n): \r\n    multiples_of_num= list(range(n,(m+1)*n, n)) \r\n    return list(multiples_of_num)"
    },
    {
        "number": 22,
        "prompt": "Write a function to find the first duplicate element in a given array of integers.\ndef find_first_duplicate(nums):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": true,
        "answer": "    # create a set to store the numbers we've seen so far\n    seen = set()\n\n    # loop through the array\n    for num in nums:\n        # if we've seen the number before, return it\n        if num in seen:\n            return num\n        # otherwise, add it to the set\n        else:\n            seen.add(num)\n    # if we've looped through the entire array and not found a duplicate, return None\n    return None\n\n# example usage:\nprint(find_first_duplicate([1, 2, 3, 4, 5, 6, 1, 7, 8, 9]))  # should return 1\nprint(find_first_duplicate([1, 2, 3, 4, 5, 6, 7, 8, 9]))  # should return None\n",
        "generated_testcode": "assert find_first_duplicate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5] ) == 1\n",
        "test": "assert find_first_duplicate(([1, 2, 3, 4, 4, 5]))==4\nassert find_first_duplicate([1, 2, 3, 4])==-1\nassert find_first_duplicate([1, 1, 2, 3, 3, 2, 2])==1",
        "canonical_solution": "def find_first_duplicate(nums):\r\n    num_set = set()\r\n    no_duplicate = -1\r\n\r\n    for i in range(len(nums)):\r\n\r\n        if nums[i] in num_set:\r\n            return nums[i]\r\n        else:\r\n            num_set.add(nums[i])\r\n\r\n    return no_duplicate"
    },
    {
        "number": 23,
        "prompt": "Write a python function to find the maximum sum of elements of list in a list of lists.\ndef maximum_Sum(list1): \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    max_sum = 0\n    for i in list1:\n        temp_sum = sum(i)\n        if temp_sum > max_sum:\n            max_sum = temp_sum\n    return max_sum\n\n#Example usage:\nlist1 = [[1,2,3],[4,5,6],[7,8,9],[-1,11,12]]\nprint(maximum_Sum(list1)) # Output: 43\n\nlist2 = [[-1,-2,-3],[4,-5,-6],[7,-8,-9] ,[10,11,12]]\nprint(maximum_Sum(list2)) # Output: 20\n\nlist3 = [[1,2,3],[4,-5,6],[7,8,9],[10,-11,12]]\nprint(maximum_Sum(list3)) # Output: 28\n\nlist4 = [[-1,2,3,4],[5,-6,7],[8,9,10],[-11,-12,13]]\nprint(maximum_Sum(list4)) # Output: 20\n\nlist5 = [[-1,2,3],[4,-5,6],[7,8,9]]\nprint(maximum_Sum(list5)) # Output: 24\n\nlist6 = [[-1,-2,-3],[-4,-5,-6],[-7,-8,-9]]\nprint(maximum_Sum(list6)) # Output: -1\n",
        "generated_testcode": "assert maximum_Sum([[1,2,3], [4,5,6], [7,8,9]] ) == 25\n",
        "test": "assert maximum_Sum([[1,2,3],[4,5,6],[10,11,12],[7,8,9]]) == 33\nassert maximum_Sum([[0,1,1],[1,1,2],[3,2,1]]) == 6\nassert maximum_Sum([[0,1,3],[1,2,1],[9,8,2],[0,1,0],[6,4,8]]) == 19",
        "canonical_solution": "def maximum_Sum(list1): \r\n    maxi = -100000\r\n    for x in list1: \r\n        sum = 0 \r\n        for y in x: \r\n            sum+= y      \r\n        maxi = max(sum,maxi)     \r\n    return maxi "
    },
    {
        "number": 24,
        "prompt": "Write a function to convert the given binary number to its decimal equivalent.\ndef binary_to_decimal(binary): \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    decimal = 0\n    length = len(binary)\n    for i in range(length): \n        decimal += int(binary[i]) * (2 ** (length - i - 1)  )\n    return decimal\n\n#Test the function \nbinary_num = \"101010\"\nprint(binary_to_decimal(binary_num)) # Output: 10\n\nbinary_num = \"1011\"\nprint(binary_to_decimal(binary_num)) # Output: 5\n\nbinary_num = \"111111\"\nprint(binary_to_decimal(binary_num)) # Output: 15\n\nbinary_num = \"000000\"\nprint(binary_to_decimal(binary_num)) # Output: 0\n\nbinary_num = \"11101\"\nprint(binary_to_decimal(binary_num)) # Output: 11\n\nbinary_num = \"11011101\"\nprint(binary_to_decimal(binary_num)) # Output: 31",
        "generated_testcode": "assert binary_to_decimal(1010) == 10\n",
        "test": "assert binary_to_decimal(100) == 4\nassert binary_to_decimal(1011) == 11\nassert binary_to_decimal(1101101) == 109",
        "canonical_solution": "def binary_to_decimal(binary): \r\n    binary1 = binary \r\n    decimal, i, n = 0, 0, 0\r\n    while(binary != 0): \r\n        dec = binary % 10\r\n        decimal = decimal + dec * pow(2, i) \r\n        binary = binary//10\r\n        i += 1\r\n    return (decimal)"
    },
    {
        "number": 25,
        "prompt": "Write a python function to find the product of non-repeated elements in a given array.\ndef find_Product(arr,n): \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    product = 1\n    for i in range(n):\n        if arr[i] != 0:\n            product *= arr[i]\n            arr[i] = 0\n    return product\n    \n# Test the function with an example\narr = [1, 2, 3, 4, 5, 4, 3, 6, 1, 7, 8]\nn = len(arr)\nprint(find_Product(arr,n)) # Output: 5040\n\n# Test the function with another example\narr = [0, 2, 3, 4, 5, 0, 6, 1, 0, 8]\nn = len(arr)\nprint(find_Product(arr,n)) # Output: 24",
        "generated_testcode": "assert find_Product([1,2,3,4,5,6,7,8,9,10] , 6) == 362888000\n",
        "test": "assert find_Product([1,1,2,3],4) == 6\nassert find_Product([1,2,3,1,1],5) == 6\nassert find_Product([1,1,4,5,6],5) == 120",
        "canonical_solution": "def find_Product(arr,n): \r\n    arr.sort() \r\n    prod = 1\r\n    for i in range(0,n,1): \r\n        if (arr[i - 1] != arr[i]): \r\n            prod = prod * arr[i] \r\n    return prod; "
    },
    {
        "number": 26,
        "prompt": "Write a function to check if the given tuple list has all k elements.\ndef check_k_elements(test_list, K):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    \"\"\"\n    :param test_list: list of tuples\n    :param K: integer\n    :return: True if all tuples have K elements, else False\n    \"\"\"\n    for tup in test_list:\n        if len(tup) != K:\n            return False\n    return True\n\n\n# Test cases\nprint(check_k_elements([(1,2,3), (4,5,6), (7,8,9)], 3)) # True\nprint(check_k_elements([(1,2,3), (4,5), (7,8,9), (10,11,12,13)], 3)) # False\nprint(check_k_elements([(1,2,3), (4,5,6), (7,8,9)], 4)) # False\nprint(check_k_elements([(1,2,3), (4,5,6), (7,8)], 3)) # False\nprint(check_k_elements([(1,2,3), (4,5,6), (7,8,9)], 2)) # False\nprint(check_k_elements([(1,2,3), (4,5,6), (7,8,9,10), (11,12,13,14,15)], 3) # True\n",
        "generated_testcode": "assert check_k_elements([(1,2,3,4,5,6,7,8,9), 3) == True\n",
        "test": "assert check_k_elements([(4, 4), (4, 4, 4), (4, 4), (4, 4, 4, 4), (4, )], 4) == True\nassert check_k_elements([(7, 7, 7), (7, 7)], 7) == True\nassert check_k_elements([(9, 9), (9, 9, 9, 9)], 7) == False",
        "canonical_solution": "def check_k_elements(test_list, K):\r\n  res = True\r\n  for tup in test_list:\r\n    for ele in tup:\r\n      if ele != K:\r\n        res = False\r\n  return (res) "
    },
    {
        "number": 27,
        "prompt": "Write a python function to remove all digits from a list of strings.\ndef remove(list): \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": true,
        "answer": "    result = []\n    for s in list:\n        result.append(s.replace('0', '').replace('1', '').replace('2', '').replace('3', '').replace('4', '').replace('5', '').replace('6', '').replace('7', '').replace('8', '').replace('9', ''))\n    return result\n\n# Test the function with an example\nstrings = ['123abc', 'hello99', 'world5', 'python 3.6']\nprint(remove(strings))\n# Output: ['abc', 'hellow', 'world']",
        "generated_testcode": "assert remove([\"hello123\", \"world45\", \"python678\"]) == [\"hello\", \"world\", \"python\"]\n",
        "test": "assert remove(['4words', '3letters', '4digits']) == ['words', 'letters', 'digits']\nassert remove(['28Jan','12Jan','11Jan']) == ['Jan','Jan','Jan']\nassert remove(['wonder1','wonder2','wonder3']) == ['wonder','wonder','wonder']",
        "canonical_solution": "import re  \r\ndef remove(list): \r\n    pattern = '[0-9]'\r\n    list = [re.sub(pattern, '', i) for i in list] \r\n    return list"
    },
    {
        "number": 28,
        "prompt": "Write a python function to find binomial co-efficient.\ndef binomial_Coeff(n,k): \n",
        "checkpoint": "7B",
        "pass": 3,
        "correct": true,
        "answer": "    if k > n: \n        return 0\n    res = 1\n    for i in range(min(k, n-k)): \n        res = res * (n-i) // (i+1)\n    return res ",
        "generated_testcode": "assert binomial_Coeff(5,2) == 10\n",
        "test": "assert binomial_Coeff(5,2) == 10\nassert binomial_Coeff(4,3) == 4\nassert binomial_Coeff(3,2) == 3",
        "canonical_solution": "def binomial_Coeff(n,k): \r\n    if k > n : \r\n       return 0\r\n    if k==0 or k ==n : \r\n        return 1 \r\n    return binomial_Coeff(n-1,k-1) + binomial_Coeff(n-1,k) "
    },
    {
        "number": 29,
        "prompt": "Write a python function to find the element occurring odd number of times.\ndef get_Odd_Occurrence(arr,arr_size):   \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    # Initialize the count array for each element\n    count = [0] * 10\n    # Traverse through each element of array and increment the count in the count array for each element\n    for i in range(arr_size):\n        count[arr[i]] += 1\n    # Find the element with odd count\n    for i in range(10):\n        if count[i] % 2 != 0:\n            return i\n    return -1\n\n# Test the function\narr = [1,2,3,2,1,4,5,3,4,5,6,2,4,7,7,6]\nn = len(arr)\nprint(get_Odd_Occurrence(arr, n))\n\n\n\n# Output: 3\n",
        "generated_testcode": "assert get_Odd_Occurrence([1,2,3,4,5,6,7,7,8,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9",
        "test": "assert get_Odd_Occurrence([1,2,3,1,2,3,1],7) == 1\nassert get_Odd_Occurrence([1,2,3,2,3,1,3],7) == 3\nassert get_Odd_Occurrence([2,3,5,4,5,2,4,3,5,2,4,4,2],13) == 5",
        "canonical_solution": "def get_Odd_Occurrence(arr,arr_size):   \r\n    for i in range(0,arr_size): \r\n        count = 0\r\n        for j in range(0,arr_size): \r\n            if arr[i] == arr[j]: \r\n                count+=1     \r\n        if (count % 2 != 0): \r\n            return arr[i]     \r\n    return -1"
    },
    {
        "number": 30,
        "prompt": "Write a python function to count all the substrings starting and ending with same characters.\ndef check_Equality(s): \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    count = 0 \n    for i in range(len(s)): \n        for j in range(i, len(s)): \n            if s[i] == s[j]: \n                count += 1\n    return count \n\ndef count_Substrings_with_same_start_end(s): \n    return check_Equality(s)//2 \n\n\n#Example usage: \ns = \"geeksforgeeks\"\nprint(count_Substrings_with_same_start_end(s)) # Output: 5 (Substrings are: gee, geek, geeks, for, fors, s) ",
        "generated_testcode": "assert check_Equality(s=\"ababcd\") == 4\n",
        "test": "assert count_Substring_With_Equal_Ends(\"abc\") == 3\nassert count_Substring_With_Equal_Ends(\"abcda\") == 6\nassert count_Substring_With_Equal_Ends(\"ab\") == 2",
        "canonical_solution": "def check_Equality(s): \r\n    return (ord(s[0]) == ord(s[len(s) - 1])); \r\ndef count_Substring_With_Equal_Ends(s): \r\n    result = 0; \r\n    n = len(s); \r\n    for i in range(n): \r\n        for j in range(1,n-i+1):  \r\n            if (check_Equality(s[i:i+j])): \r\n                result+=1; \r\n    return result; "
    },
    {
        "number": 31,
        "prompt": "Write a function to find the top k integers that occur most frequently from given lists of sorted and distinct integers using heap queue algorithm.\ndef func(nums, k):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    heap = []\n    count = {}\n    for num in nums:\n        if num not in count:\n            count[num] = 1\n        else:\n            count[num] += 1\n\n    for key in count:\n        if len(heap) < k:\n            heapq.heappush(heap, (-count[key], key))\n        else:\n            if count[key] > -heap[0][0]:\n                heapq.heappop(heap)\n                heapq.heappush(heap, (-count[key], key)\n\n    result = []\n    while heap:\n        result.append(heapq.heappop(heap)[1])\n\n    return result[::-1]\n\n\n#Testing the function\nprint(func([1, 2, 2, 3, 3, 3, 4, 4, 4, 4, 5], 2)) #Output: [4, 3]\nprint(func([1, 2, 3, 4, 5, 6, 7, 7, 8, 8, 8, 9], 3)) #Output: [8, 7, 9]\nprint(func([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10, 10, 10], 4)) #Output: [10, 9, 8",
        "generated_testcode": "assert func(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k=3) == [9, 8, 7]\n",
        "test": "assert func([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]],3)==[5, 7, 1]\nassert func([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]],1)==[1]\nassert func([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]],5)==[6, 5, 7, 8, 1]",
        "canonical_solution": "def func(nums, k):\r\n    import collections\r\n    d = collections.defaultdict(int)\r\n    for row in nums:\r\n        for i in row:\r\n            d[i] += 1\r\n    temp = []\r\n    import heapq\r\n    for key, v in d.items():\r\n        if len(temp) < k:\r\n            temp.append((v, key))\r\n            if len(temp) == k:\r\n                heapq.heapify(temp)\r\n        else:\r\n            if v > temp[0][0]:\r\n                heapq.heappop(temp)\r\n                heapq.heappush(temp, (v, key))\r\n    result = []\r\n    while temp:\r\n        v, key = heapq.heappop(temp)\r\n        result.append(key)\r\n    return result"
    },
    {
        "number": 32,
        "prompt": "Write a python function to find the largest prime factor of a given number.\ndef max_Prime_Factors (n): \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    def isPrime(num): \n        if num > 1: \n            for i in range(2,num): \n                if (num%i) == 0: \n                    return False\n            else: \n                return True\n        else: \n            return False\n\n    i = 2\n    while n > 1: \n        if isPrime(i): \n            if n%i == 0: \n                count = 0\n                while n%i == 0: \n                    count += 1\n                    n //= i \n                if count > 0: \n                    print(i) \n            i += 1\n    return i-1\n  \n  \n# Driver Code \nnum = int(input(\"Enter a number: \")) \nprint(\"The largest prime factor of the number is:\",max_Prime_Factors(num)) ",
        "generated_testcode": "assert max_Prime_Factors (13191) == 29\n",
        "test": "assert max_Prime_Factors(15) == 5\nassert max_Prime_Factors(6) == 3\nassert max_Prime_Factors(2) == 2",
        "canonical_solution": "import math \r\ndef max_Prime_Factors (n): \r\n    maxPrime = -1 \r\n    while n%2 == 0: \r\n        maxPrime = 2\r\n        n >>= 1    \r\n    for i in range(3,int(math.sqrt(n))+1,2): \r\n        while n % i == 0: \r\n            maxPrime = i \r\n            n = n / i \r\n    if n > 2: \r\n        maxPrime = n  \r\n    return int(maxPrime)"
    },
    {
        "number": 33,
        "prompt": "Write a python function to convert a decimal number to binary number.\ndef decimal_To_Binary(N): \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": true,
        "answer": "    binary = \"\" \n    while N > 0: \n        binary = str(N % 2) + binary \n        N = N // 2\n    return binary \n\n#Test the function \nprint(decimal_To_Binary(10)) # Output: 1010 ",
        "generated_testcode": "assert decimal_To_Binary(10) == \"1010\"\n",
        "test": "assert decimal_To_Binary(10) == 1010\nassert decimal_To_Binary(1) == 1\nassert decimal_To_Binary(20) == 10100",
        "canonical_solution": "def decimal_To_Binary(N): \r\n    B_Number = 0\r\n    cnt = 0\r\n    while (N != 0): \r\n        rem = N % 2\r\n        c = pow(10,cnt)  \r\n        B_Number += rem*c  \r\n        N //= 2 \r\n        cnt += 1\r\n    return B_Number  "
    },
    {
        "number": 34,
        "prompt": "Write a python function to find the missing number in a sorted array.\ndef find_missing(ar,N): \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    if not ar: \n        return 1\n    if N==0:\n        return 1\n    for i in range(N): \n        if ar[i] != i+1: \n            return i+1\n    return N+1\n\n#Example usage:\nar = [1,2,3,4,5,6,7,9] \nN = len(ar) \nprint(find_missing(ar,N)) # Output: 8 ",
        "generated_testcode": "assert find_missing([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50], 50) == 5",
        "test": "assert find_missing([1,2,3,5],4) == 4\nassert find_missing([1,3,4,5],4) == 2\nassert find_missing([1,2,3,5,6,7],5) == 4",
        "canonical_solution": "def find_missing(ar,N): \r\n    l = 0\r\n    r = N - 1\r\n    while (l <= r):  \r\n        mid = (l + r) / 2\r\n        mid= int (mid) \r\n        if (ar[mid] != mid + 1 and ar[mid - 1] == mid): \r\n            return (mid + 1)  \r\n        elif (ar[mid] != mid + 1): \r\n            r = mid - 1 \r\n        else: \r\n            l = mid + 1\r\n    return (-1) "
    },
    {
        "number": 35,
        "prompt": "Write a function to find the n-th rectangular number.\ndef find_rect_num(n):\n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    count = 1\n    i = 1\n    while count < n:\n        i += 1\n        count += i\n    return i * (i + 1) // 2\n\n# Test cases\nprint(find_rect_num(1) == 1)  # Output: True\nprint(find_rect_num(5) == 6)  # Output: True\nprint(find_rect_num(10) == 22)  # Output: True\nprint(find_rect_num(100) == 55)  # Output: True\nprint(find_rect_num(20) == 29)  # Output: True",
        "generated_testcode": "assert find_rect_num(1) == 1\n",
        "test": "assert find_rect_num(4) == 20\nassert find_rect_num(5) == 30\nassert find_rect_num(6) == 42",
        "canonical_solution": "def find_rect_num(n):\r\n  return n*(n + 1) "
    },
    {
        "number": 36,
        "prompt": "Write a python function to find the nth digit in the proper fraction of two given numbers.\ndef find_Nth_Digit(p,q,N) :  \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    a=p\n    b=q\n    gcd=1\n    while b!=0:\n        gcd=a%b\n        a=b\n        b=gcd\n    lcm=(a*q//gcd)\n    p//=gcd\n    q//=gcd\n    n=lcm\n    l=0\n    while n%10!=0 :\n        n//=10\n        l+=1\n    if n==0:\n        l+=1\n    count=l*(N-1)\n    while p%2==0:\n        p//=2\n        q//=2\n        count-=1\n    m=0\n    d=1\n    while q%2==0:\n        q//=2\n        d*=2\n    while d*d<=count:\n        d*=2\n    if count%d==0:\n        count-=d\n        m=p//q\n    else:\n        m=(p//q)*(d-(count//d)%d)\n    return m%10\n\n#driver function\np=10\nq=7\nN=3\nprint(find_Nth_Digit(p,q,N))\n\n#Output:\n#4",
        "generated_testcode": "assert find_Nth_Digit(3, 7, 1) == 3\n",
        "test": "assert find_Nth_Digit(1,2,1) == 5\nassert find_Nth_Digit(3,5,1) == 6\nassert find_Nth_Digit(5,6,5) == 3",
        "canonical_solution": "def find_Nth_Digit(p,q,N) :  \r\n    while (N > 0) : \r\n        N -= 1;  \r\n        p *= 10;  \r\n        res = p // q;  \r\n        p %= q;  \r\n    return res;  "
    },
    {
        "number": 37,
        "prompt": "Write a function to sort a given mixed list of integers and strings.\ndef sort_mixed_list(mixed_list):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    \"\"\"\n    Sorts a given list of integers and strings in ascending order.\n\n    Args:\n    mixed_list (list): A list containing integers and/or strings.\n\n    Returns:\n    list: A sorted list of integers and/or strings in ascending order.\n    \"\"\"\n    # Initialize empty lists for integers and strings\n    int_list = []\n    str_list = []\n\n    # Separate the integers and strings into their own lists\n    for item in mixed_list:\n        if isinstance(item, int):\n            int_list.append(item)\n        else:\n            str_list.append(item)\n\n    # Sort the integers\n    int_list.sort()\n    # Sort the strings\n    str_list.sort()\n    # Combine the two lists and return the result\n    return int_list + str_list\n\n\n# Test cases\nprint(sort_mixed_list([1, 5, 3, \"apple\", \"banana\", 2, \"orange\", 4, 6, \"cat\", \"dog\", 10, \"bird\"]))  # [1, 2, 3, 4, 5, 6, 10, \"apple\", \"banana\", \"bird\", \"cat\", \"dog\", \"orange\"]\nprint(sort_mixed_list([\"hello\", 2, 4, 5, \"apple\", \"cat\", \"dog\", 1, \"world\", 3]))  # [1, 2,",
        "generated_testcode": "assert sort_mixed_list([\"apple\", 1, 3, \"banana\", 2, 4, \"orange\", 5, \"grape\", 1, 3, 2, \"kiwi\", 4, 5, 6, 7, \"kiwi\", 8, 9, 10, 11, \"apple\", 12, \"orange\"] == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, \"apple\", \"banana\", \"grape\", \"kiwi\", \"kiwi\", \"orange\"]\n\n# Test the function with the given input and check if it returns the expected output. ",
        "test": "assert sort_mixed_list([19,'red',12,'green','blue', 10,'white','green',1])==[1, 10, 12, 19, 'blue', 'green', 'green', 'red', 'white']\nassert sort_mixed_list([19,'red',12,'green','blue', 10,'white','green',1])==[1, 10, 12, 19, 'blue', 'green', 'green', 'red', 'white']\nassert sort_mixed_list([19,'red',12,'green','blue', 10,'white','green',1])==[1, 10, 12, 19, 'blue', 'green', 'green', 'red', 'white']",
        "canonical_solution": "def sort_mixed_list(mixed_list):\r\n    int_part = sorted([i for i in mixed_list if type(i) is int])\r\n    str_part = sorted([i for i in mixed_list if type(i) is str])\r\n    return int_part + str_part"
    },
    {
        "number": 38,
        "prompt": "Write a function to find the division of first even and odd number of a given list.\ndef div_even_odd(list1):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    even_list = []\n    odd_list = []\n    for num in list1:\n        if num % 2 == 0:\n            even_list.append(num)\n        else:\n            odd_list.append(num)\n    return (even_list, odd_list)\n\n# Test the function\nlist1 = [1,2,3,4,5,6,7,8,9]\nprint(div_even_odd(list1)) # Output: ([4, 6, 8], [1, 3, 5, 7, 9])\n\nlist2 = [2,4,6,8,10,12,14,16]\nprint(div_even_odd(list2)) # Output: ([2, 4, 6, 8, 10, 12, 14, 16], [])\n\nlist3 = [1,3,5,7,9,11,13]\nprint(div_even_odd(list3)) # Output: ([], [1, 3, 5, 7, 9, 11, 13])\n",
        "generated_testcode": "assert div_even_odd(list(range(1, 10)) == (3, 1)\n",
        "test": "assert div_even_odd([1,3,5,7,4,1,6,8])==4\nassert div_even_odd([1,2,3,4,5,6,7,8,9,10])==2\nassert div_even_odd([1,5,7,9,10])==10",
        "canonical_solution": "def div_even_odd(list1):\r\n    first_even = next((el for el in list1 if el%2==0),-1)\r\n    first_odd = next((el for el in list1 if el%2!=0),-1)\r\n    return (first_even/first_odd)"
    },
    {
        "number": 39,
        "prompt": "Write a function to check if the letters of a given string can be rearranged so that two characters that are adjacent to each other are different.\ndef rearange_string(S):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    if len(S) <= 1:\n        return True\n    freq = {}\n    for c in S:\n        if c in freq:\n            freq[c] += 1\n        else:\n            freq[c] = 1\n    for key in freq:\n        if freq[key] % 2 == 0:\n            continue\n        else:\n            odd_char = key\n            break\n    else:\n        return True\n    if freq[odd_char] == 1:\n        return False\n    count = 0\n    for c in S:\n        if c != odd_char:\n            count += 1\n    if count == len(S) - 1:\n        return True\n    return False\n\n\n# Test cases\nprint(rearange_string(\"abcdefg\"))  # True\nprint(rearange_string(\"abbccddd\"))  # False\nprint(rearange_string(\"abbcdefg\"))  # True\nprint(rearange_string(\"abccdde\"))  # False\nprint(rearange_string(\"abbccde\"))  # True\nprint(rearange_string(\"abbcde\"))  # False\nprint(rearange_string(\"abcdde\"))  # True\nprint(rearange_string(\"abbcde\"))  # True\nprint(rearange_string(\"aabbccdde\"))  # False\nprint(rearange_string(\"abbcde\"))  # True\nprint(rear",
        "generated_testcode": "assert rearange_string(S=\"aab\") == True\n",
        "test": "assert rearange_string(\"aab\")==('aba')\nassert rearange_string(\"aabb\")==('abab')\nassert rearange_string(\"abccdd\")==('cdabcd')",
        "canonical_solution": "import heapq\r\nfrom collections import Counter\r\ndef rearange_string(S):\r\n    ctr = Counter(S)\r\n    heap = [(-value, key) for key, value in ctr.items()]\r\n    heapq.heapify(heap)\r\n    if (-heap[0][0]) * 2 > len(S) + 1: \r\n        return \"\"\r\n    ans = []\r\n    while len(heap) >= 2:\r\n        nct1, char1 = heapq.heappop(heap)\r\n        nct2, char2 = heapq.heappop(heap)\r\n        ans.extend([char1, char2])\r\n        if nct1 + 1: heapq.heappush(heap, (nct1 + 1, char1))\r\n        if nct2 + 1: heapq.heappush(heap, (nct2 + 1, char2))\r\n    return \"\".join(ans) + (heap[0][1] if heap else \"\")"
    },
    {
        "number": 40,
        "prompt": "Write a function to find frequency of the elements in a given list of lists using collections module.\ndef freq_element(nums):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    from collections import Counter\n    count_dict = Counter()\n    for i in nums:\n        count_dict.update(Counter(i))\n    return count_dict\n\n# Test the function\nnums = [[1, 2, 3, 4, 5, 6, 7], [1, 2, 3, 4, 5, 6, 7], [1, 2, 3, 4, 5, 6, 7, 8], [1, 2, 3, 4, 5, 6, 7, 8, 9]]\nprint(freq_element(nums))",
        "generated_testcode": "assert freq_element([[1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9], [4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19], [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19]] ) == {1: 3, 2: 3, 3: 3, 4: 3, 5: 3, 6: 3, 7: 3, 8: 3, 9: 3, 10: 2, 11: 2, 12: 2, 13: 2, 14: 2, 15: 2, 16: 2, 17: 2, 18: 2, 19: 2, 10: 1, 11: 1, 12: 1, 13: 1, 14: 1, 15: 1, 1",
        "test": "assert freq_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]])==({2: 3, 1: 2, 5: 2, 3: 1, 4: 1, 6: 1, 7: 1, 9: 1})\nassert freq_element([[1,2,3,4],[5,6,7,8],[9,10,11,12]])==({1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 1, 12: 1})\nassert freq_element([[15,20,30,40],[80,90,100,110],[30,30,80,90]])==({30: 3, 80: 2, 90: 2, 15: 1, 20: 1, 40: 1, 100: 1, 110: 1})",
        "canonical_solution": "from collections import Counter\r\nfrom itertools import chain\r\ndef freq_element(nums):\r\n  result = Counter(chain.from_iterable(nums))\r\n  return result"
    },
    {
        "number": 41,
        "prompt": "Write a function to filter even numbers using lambda function.\ndef filter_evennumbers(nums):\n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    return list(filter(lambda x: x % 2 == 0, nums))\n\n# Test the function\nnums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]\nprint(filter_evennumbers(nums))  # Output: [2, 4, 6, 8, 10, 12, 14]\n\n# Write a function to filter odd numbers using lambda function\ndef filter_oddnumbers(nums):\n    return list(filter(lambda x: x % 2 != 0, nums))\n\n# Test the function\nnums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]\nprint(filter_oddnumbers(nums))  # Output: [1, 3, 5, 7, 9, 11, 13, 15] ",
        "generated_testcode": "assert filter_evennumbers(range(1, 10)) == [2, 4, 6, 8]\n",
        "test": "assert filter_evennumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[2, 4, 6, 8, 10]\nassert filter_evennumbers([10,20,45,67,84,93])==[10,20,84]\nassert filter_evennumbers([5,7,9,8,6,4,3])==[8,6,4]",
        "canonical_solution": "def filter_evennumbers(nums):\r\n even_nums = list(filter(lambda x: x%2 == 0, nums))\r\n return even_nums"
    },
    {
        "number": 42,
        "prompt": "Write a python function to find the sum of repeated elements in a given array.\ndef find_Sum(arr,n): \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    freq = {}\n    for i in range(n):\n        if arr[i] in freq:\n            freq[arr[i]] += 1\n        else:\n            freq[arr[i]] = 1\n    repeat = []\n    for key, value in freq.items():\n        if value > 1:\n            repeat.append(key)\n    sum = 0\n    for i in repeat:\n        sum += i\n    return sum\n\n#Example\narr = [2,3,4,5,2,6,2,3,2,7,8,4,4,1]\nn = len(arr)\nprint(find_Sum(arr,n))\n\n#Output: 12 (as 2 and 4 are repeated twice) ",
        "generated_testcode": "assert find_Sum([1,2,3,4,2,5,6,1,3,7,2],7) == 6\n",
        "test": "assert find_Sum([1,2,3,1,1,4,5,6],8) == 3\nassert find_Sum([1,2,3,1,1],5) == 3\nassert find_Sum([1,1,2],3) == 2",
        "canonical_solution": "def find_Sum(arr,n): \r\n    return sum([x for x in arr if arr.count(x) > 1])"
    },
    {
        "number": 43,
        "prompt": "Write a function to find sequences of lowercase letters joined with an underscore using regex.\ndef text_match(text):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    import re\n    pattern = r'[a-z]+_[a-z]+'\n    matches = re.findall(pattern, text)\n    return matches\n\n# Test cases\nprint(text_match('hello_world')) # Output: []\nprint(text_match('a_b_c_d_e_f')) # Output: ['a_b', 'c_d', 'e_f']\nprint(text_match('hello_world_python_programming')) # Output: ['hello_world', 'python_programming']\nprint(text_match('python_is_awesome_programming_language')) # Output: ['python_is', 'awesome_programming']\nprint(text_match('a1b_c2d_e3f_g4h')) # Output: []\nprint(text_match('hello_world_12345')) # Output: []\nprint(text_match('hello_world_123_programming')) # Output: ['hello_world']\nprint(text_match('a_b_c_d_e_f_1_2_3_4_5')) # Output: ['a_b', 'c_d', 'e_f']\n",
        "generated_testcode": "assert text_match(\n    \"hello_world_python_programming_is_fun\"\n) == [\n    \"hello\",\n    \"world\",\n    \"python\",\n    \"programming\",\n    \"is\",\n    \"fun\"\n]\n\n",
        "test": "assert text_match(\"aab_cbbbc\") == 'Found a match!'\nassert text_match(\"aab_Abbbc\") == 'Not matched!'\nassert text_match(\"Aaab_abbbc\") == 'Not matched!'",
        "canonical_solution": "import re\r\ndef text_match(text):\r\n  patterns = '^[a-z]+_[a-z]+$'\r\n  if re.search(patterns,  text):\r\n    return ('Found a match!')\r\n  else:\r\n    return ('Not matched!')"
    },
    {
        "number": 44,
        "prompt": "Write a function that matches a word at the beginning of a string.\ndef text_match_string(text):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    \"\"\"\n    This function matches a word at the beginning of a string.\n    \"\"\"\n    if text.startswith('cat'):\n        return 'The word \"cat\" was found at the beginning of the string.'\n    else:\n        return 'The word \"cat\" was not found at the beginning of the string.'\n\n\n# Test the function with some inputs\nprint(text_match_string('cat in the hat')) # should print \"The word \"cat\" was found at the beginning of the string.\"\nprint(text_match_string('dog on the mat')) # should print \"The word \"cat\" was not found at the beginning of the string.\"\n\n\n# Write a function that matches a word at the end of a string\ndef text_match_string(text):\n    \"\"\"\n    This function matches a word at the end of a string.\n    \"\"\"\n    if text.endswith('cat'):\n        return 'The word \"cat\" was found at the end of the string.'\n    else:\n        return 'The word \"cat\" was not found at the end of the string.'\n\n\n# Test the function with some inputs\nprint(text_match_string('hat cat')) # should print \"The word \"cat\" was found at the end of the string.\"\nprint(text_match_string('mat dog')) # should print \"The word \"cat\" was not found at the end of the string.\"\n\n\n# Write a function that matches a word in the middle of a string\ndef text_match_string(text):\n    \"\"\"\n    This function matches a",
        "generated_testcode": "assert text_match_string(text=\"hello world\") == \"hello\"\n",
        "test": "assert text_match_string(\" python\")==('Not matched!')\nassert text_match_string(\"python\")==('Found a match!')\nassert text_match_string(\"  lang\")==('Not matched!')",
        "canonical_solution": "import re\r\ndef text_match_string(text):\r\n        patterns = '^\\w+'\r\n        if re.search(patterns,  text):\r\n                return 'Found a match!'\r\n        else:\r\n                return 'Not matched!'"
    },
    {
        "number": 45,
        "prompt": "Write a function to find the gcd of the given array elements.\ndef find_gcd(x, y): \n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    if y == 0: \n        return x \n    else: \n        return find_gcd(y, x % y) \n\n\ndef find_gcd_of_array(arr): \n    result = arr[0] \n    for i in range(1, len(arr)): \n        result = find_gcd(result, arr[i]) \n    return result \n\n\n# Testing the function \narr = [24, 8, 32, 16, 18, 10] \nprint(\"GCD of the given array is :\", find_gcd_of_array(arr)) \n\n\n# Output: GCD of the given array is : 4 ",
        "generated_testcode": "assert find_gcd(12, 18) == 6\n",
        "test": "assert get_gcd([2, 4, 6, 8, 16]) == 2\nassert get_gcd([1, 2, 3]) == 1\nassert get_gcd([2, 4, 6, 8]) == 2 ",
        "canonical_solution": "def find_gcd(x, y): \r\n\twhile(y): \r\n\t\tx, y = y, x % y \r\n\treturn x \r\ndef get_gcd(l):\r\n  num1 = l[0]\r\n  num2 = l[1]\r\n  gcd = find_gcd(num1, num2)\r\n  for i in range(2, len(l)):\r\n    gcd = find_gcd(gcd, l[i])\r\n  return gcd"
    },
    {
        "number": 46,
        "prompt": "Write a python function to determine whether all the numbers are different from each other are not.\ndef test_distinct(data):\n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    for i in range(len(data)):\n        for j in range(i+1, len(data)):\n            if data[i] == data[j]:\n                return False\n    return True\n\n#test cases\nprint(test_distinct([1,2,3,4,5,6])) #True\nprint(test_distinct([1,1,2,3,4,5])) #False\nprint(test_distinct([1,2,2,3,4,5])) #False\nprint(test_distinct([1,2,3,4,5,5])) #False\nprint(test_distinct([1,1,1,2,3,4])) #False\nprint(test_distinct([1,2,3,4,5,6,7])) #True\n\n",
        "generated_testcode": "assert test_distinct(range(1, 10)) == True\n",
        "test": "assert test_distinct([1,5,7,9]) == True\nassert test_distinct([2,4,5,5,7,9]) == False\nassert test_distinct([1,2,3]) == True",
        "canonical_solution": "def test_distinct(data):\r\n  if len(data) == len(set(data)):\r\n    return True\r\n  else:\r\n    return False;"
    },
    {
        "number": 47,
        "prompt": "Write a python function to find the last digit when factorial of a divides factorial of b.\ndef compute_Last_Digit(A,B): \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    fact_A = 1\n    fact_B = 1\n    while A > 0:\n        fact_A = fact_A * A\n        A = A - 1\n    while B > 0:\n        fact_B = fact_B * B\n        B = B - 1\n    return fact_B % 10\n\n# test the function\nA = 10\nB = 20\nprint(compute_Last_Digit(A,B))\n\n# expected output: 2\n# last digit of 10! / 20! = 2\n\nA = 20\nB = 100\nprint(compute_Last_Digit(A,B))\n# expected output: 6\n# last digit of 20! / 100! = 6 ",
        "generated_testcode": "assert compute_Last_Digit(5,10) == 5\n",
        "test": "assert compute_Last_Digit(2,4) == 2\nassert compute_Last_Digit(6,8) == 6\nassert compute_Last_Digit(1,2) == 2",
        "canonical_solution": "def compute_Last_Digit(A,B): \r\n    variable = 1\r\n    if (A == B): \r\n        return 1\r\n    elif ((B - A) >= 5):  \r\n        return 0\r\n    else:   \r\n        for i in range(A + 1,B + 1): \r\n            variable = (variable * (i % 10)) % 10\r\n        return variable % 10"
    },
    {
        "number": 48,
        "prompt": "Write a python function to set all odd bits of a given number.\ndef odd_bit_set_number(n):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    result = 0\n    for i in range(31, -1, -1):\n        if n & (1 << i):\n            result |= (1 << i)\n    return result\n\n# Test the function\nprint(odd_bit_set_number(10)) # 12\nprint(odd_bit_set_number(25)) # 37\nprint(odd_bit_set_number(7)) # 7\n",
        "generated_testcode": "assert odd_bit_set_number(10) == 11\n",
        "test": "assert odd_bit_set_number(10) == 15\nassert odd_bit_set_number(20) == 21\nassert odd_bit_set_number(30) == 31",
        "canonical_solution": "def odd_bit_set_number(n):\r\n    count = 0;res = 0;temp = n\r\n    while temp > 0:\r\n        if count % 2 == 0:\r\n            res |= (1 << count)\r\n        count += 1\r\n        temp >>= 1\r\n    return (n | res)"
    },
    {
        "number": 49,
        "prompt": "Write a function to extract every first or specified element from a given two-dimensional list.\ndef specified_element(nums, N):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    result = []\n    for i in range(len(nums)):\n        if i % N == 0:\n            result.append(nums[i])\n    return result\n\n#Example:\nnums = [[1,2,3], [4,5,6], [7,8,9], [10,11,12], [13,14,15]]\nprint(specified_element(nums, 2))  # Output: [1, 4, 7, 10]\nprint(specified_element(nums, 3))  # Output: [2, 5, 8, 11, 14]\nprint(specified_element(nums, 4))  # Output: [3, 6, 9, 12, 15]\n\n#Explanation: The function returns the first element from every sublist of the input two-dimensional list nums when N is 1 and the second element from every sublist when N is 2, and so on. ",
        "generated_testcode": "assert specified_element([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 0) == [1, 4, 7]\n",
        "test": "assert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],0)==[1, 4, 7]\nassert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],2)==[3, 6, 9]\nassert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],1)==[2,5,1]",
        "canonical_solution": "def specified_element(nums, N):\r\n    result = [i[N] for i in nums]\r\n    return result\r\n    "
    },
    {
        "number": 50,
        "prompt": "Write a function to find the list with minimum length using lambda function.\ndef min_length_list(input_list):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    min_len = min(input_list, key=len)\n    return list(filter(lambda x: len(x) == len(min_len), input_list))\n\n# Example usage:\ninput_list = [[1,2,3],[4,5,6,7],[8,9],[10,11,12,13,14],[15,16,17],[18,19,20]]\nprint(min_length_list(input_list)) ",
        "generated_testcode": "assert min_length_list([\"apple\", \"banana\", \"cherry\", \"grape\", \"kiwi\", \"orange\", \"strawberry\"] == \"cherry\")\n",
        "test": "assert min_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(1, [0])\nassert min_length_list([[1,2,3,4,5],[1,2,3,4],[1,2,3],[1,2],[1]])==(1,[1])\nassert min_length_list([[3,4,5],[6,7,8,9],[10,11,12],[1,2]])==(2,[1,2])",
        "canonical_solution": "def min_length_list(input_list):\r\n    min_length = min(len(x) for x in input_list )  \r\n    min_list = min(input_list, key = lambda i: len(i))\r\n    return(min_length, min_list)"
    },
    {
        "number": 51,
        "prompt": "Write a function to print check if the triangle is equilateral or not.\ndef check_equilateral(x,y,z):\n",
        "checkpoint": "7B",
        "pass": 4,
        "correct": true,
        "answer": "    if x == y == z:\n        return True\n    else:\n        return False\n\nx = 12\ny = 12\nz = 12\nprint(check_equilateral(x,y,z))\n\n\n# Write a function to check if a triangle is is isosceles or not\ndef check_isosceles(x,y,z):\n    if x == y or x == z or y == z:\n        return True\n    else:\n        return False\n\nx = 12\ny = 12\nz = 11\nprint(check_isosceles(x,y,z))\n\n\n# Write a function to check if the triangle is scalene or not\ndef check_scalene(x,y,z):\n    if x != y and x != z and y != z:\n        return True\n    else:\n        return False\n\nx = 12\ny = 12\nz = 11\nprint(check_scalene(x,y,z))\n\n\n# Write a function to check if a triangle is a right triangle or not\ndef check_right_triangle(x,y,z,hyp):\n    if (x**2 + y**2 == z**2) or (x**2 + z**2 == y**2) or (y**2 + z**2 == x**2):\n        return True\n    else:\n        return False\n\nx = 3\ny = 4\nz = 5\n",
        "generated_testcode": "assert check_equilateral(3,3,3) == True\n",
        "test": "assert check_equilateral(6,8,12)==False \nassert check_equilateral(6,6,12)==False\nassert check_equilateral(6,6,6)==True",
        "canonical_solution": "def check_equilateral(x,y,z):\r\n  if x == y == z:\r\n\t   return True\r\n  else:\r\n     return False"
    },
    {
        "number": 52,
        "prompt": "Write a function to caluclate area of a parallelogram.\ndef parallelogram_area(b,h):\n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    area = b * h\n    return area\n\n# Test the function\nprint(parallelogram_area(10,5)) # Output: 50\nprint(parallelogram_area(20,10)) # Output: 200\nprint(parallelogram_area(12,8)) # Output: 96\n",
        "generated_testcode": "assert parallelogram_area(4, 6) == 24\n",
        "test": "assert parallelogram_area(10,20)==200\nassert parallelogram_area(15,20)==300\nassert parallelogram_area(8,9)==72",
        "canonical_solution": "def parallelogram_area(b,h):\r\n  area=b*h\r\n  return area"
    },
    {
        "number": 53,
        "prompt": "Write a python function to check whether the first and last characters of a given string are equal or not.\ndef check_Equality(str):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    if str[0] == str[-1]:\n        return True\n    else:\n        return False\n\n#Test the function\nprint(check_Equality(\"hello\")) #True\nprint(check_Equality(\"world\")) #True\nprint(check_Equality(\"python\")) #False\nprint(check_Equality(\"apple\")) #True\nprint(check_Equality(\"banana\")) #True\nprint(check_Equality(\"cat\")) #False\nprint(check_Equality(\"dog\")) #False\nprint(check_Equality(\"car\")) #False\n\n\n#Alternate solution using ternary operator\ndef check_Equality(str):\n    return str[0] == str[-1] if str[0] == str[-1] else False\n\n#Test the function\nprint(check_Equality(\"hello\")) #True\nprint(check_Equality(\"world\")) #True\nprint(check_Equality(\"python\")) #False\nprint(check_Equality(\"apple\")) #True\nprint(check_Equality(\"banana\")) #True\nprint(check_Equality(\"cat\")) #False\nprint(check_Equality(\"dog\")) #False\nprint(check_Equality(\"car\")) #False ",
        "generated_testcode": "assert check_Equality(str) == True # Test case 1\n",
        "test": "assert check_Equality(\"abcda\") == \"Equal\"\nassert check_Equality(\"ab\") == \"Not Equal\"\nassert check_Equality(\"mad\") == \"Not Equal\"",
        "canonical_solution": "def check_Equality(str):\r\n  if (str[0] == str[-1]):  \r\n    return (\"Equal\") \r\n  else:  \r\n    return (\"Not Equal\") "
    },
    {
        "number": 54,
        "prompt": "Write a function to sort the given array by using counting sort.\ndef counting_sort(my_list):\n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    max_val = max(my_list)\n    min_val = min(my_list)\n    range_size = max_val - min_val + 1\n    count_list = [0] * range_size\n    output_list = [0] * len(my_list)\n    for i in my_list:\n        count_list[i-min_val] += 1\n    for i in range(1, len(count_list)):\n        count_list[i] += count_list[i-1]\n    for i in reversed(my_list):\n        output_list[count_list[i-min_val]-1] = i\n        count_list[i-min_val] -= 1\n    return output_list\n\n\n# Test case\nmy_list = [4, 2, 5, 1, 6, 8, 3, 9, 1, 2, 7, 5, 4, 1, 8, 9, 3]\nprint(counting_sort(my_list))\n",
        "generated_testcode": "assert counting_sort([4, 2, 5, 1, 3, 1, 2, 6, 7, 8, 9, 0, 4, 5, 3] ) == [0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 7, 8, 9]\n\n# Test case 2\n",
        "test": "assert counting_sort([1,23,4,5,6,7,8]) == [1, 4, 5, 6, 7, 8, 23]\nassert counting_sort([12, 9, 28, 33, 69, 45]) == [9, 12, 28, 33, 45, 69]\nassert counting_sort([8, 4, 14, 3, 2, 1]) == [1, 2, 3, 4, 8, 14]",
        "canonical_solution": "def counting_sort(my_list):\r\n    max_value = 0\r\n    for i in range(len(my_list)):\r\n        if my_list[i] > max_value:\r\n            max_value = my_list[i]\r\n    buckets = [0] * (max_value + 1)\r\n    for i in my_list:\r\n        buckets[i] += 1\r\n    i = 0\r\n    for j in range(max_value + 1):\r\n         for a in range(buckets[j]):\r\n             my_list[i] = j\r\n             i += 1\r\n    return my_list"
    },
    {
        "number": 55,
        "prompt": "Write a function to find t-nth term of geometric series.\ndef tn_gp(a,n,r):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    tn=a*(r**n)\n    return tn\n\n# Testing\nprint(tn_gp(1,2,3)) # Output: 8\nprint(tn_gp(1,3,2)) # Output: 8\nprint(tn_gp(1,4,2)) # Output: 16\nprint(tn_gp(1,5,3)) # Output: 32\nprint(tn_gp(1,6,2)) # Output: 64\n\n",
        "generated_testcode": "assert tn_gp(2,3,3) == 8\n",
        "test": "assert tn_gp(1,5,2)==16\nassert tn_gp(1,5,4)==256\nassert tn_gp(2,6,3)==486",
        "canonical_solution": "import math\r\ndef tn_gp(a,n,r):\r\n  tn = a * (math.pow(r, n - 1))\r\n  return tn"
    },
    {
        "number": 56,
        "prompt": "Write a python function to check if a given number is one less than twice its reverse.\ndef rev(num):    \n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": true,
        "answer": "    return num == int(str(num)[::-1] + '1')\n\ndef is_one_less_than_twice_reverse(num):\n    return rev(num)\n\n# Test cases\nprint(is_one_less_than_twice_reverse(15)) # True\nprint(is_one_less_than_twice_reverse(21)) # False\nprint(is_one_less_than_twice_reverse(101)) # True\nprint(is_one_less_than_twice_reverse(144)) # True\nprint(is_one_less_than_twice_reverse(31)) # False\nprint(is_one_less_than_twice_reverse(55)) # False",
        "generated_testcode": "assert rev(12345) == False\n",
        "test": "assert check(70) == False\nassert check(23) == False\nassert check(73) == True",
        "canonical_solution": "def rev(num):    \r\n    rev_num = 0\r\n    while (num > 0):  \r\n        rev_num = (rev_num * 10 + num % 10) \r\n        num = num // 10  \r\n    return rev_num  \r\ndef check(n):    \r\n    return (2 * rev(n) == n + 1)  "
    },
    {
        "number": 57,
        "prompt": "Write a python function to find the largest number that can be formed with the given digits.\ndef find_Max_Num(arr,n) : \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    arr.sort(reverse=True)\n    res = \"\"\n    for i in range(n):\n        res += str(arr[i])\n    return int(res)\n\n# Driver code\narr = [9, 8, 7, 6, 5, 5, 1, 3, 3, 2]\nn = len(arr)\nprint(find_Max_Num(arr, n))\n\n# Output : 95765332",
        "generated_testcode": "assert find_Max_Num([1, 2, 3, 4, 5, 6, 7, 8, 9] , 3) == 967\n",
        "test": "assert find_Max_Num([1,2,3],3) == 321\nassert find_Max_Num([4,5,6,1],4) == 6541\nassert find_Max_Num([1,2,3,9],4) == 9321",
        "canonical_solution": "def find_Max_Num(arr,n) : \r\n    arr.sort(reverse = True) \r\n    num = arr[0] \r\n    for i in range(1,n) : \r\n        num = num * 10 + arr[i] \r\n    return num "
    },
    {
        "number": 58,
        "prompt": "Write a python function to check whether the given two integers have opposite sign or not.\ndef opposite_Signs(x,y): \n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": true,
        "answer": "    if x > 0 and y < 0 or x < 0 and y > 0: \n        return True \n    else: \n        return False \n\n#Example:\n#Input: \n#x = 5 \n#y = -3\n#Output: True \n#Explanation: \n#The two integers have opposite signs. \n#\n#Input: \n#x = 5 \n#y = 3\n#Output: \n#False \n#Explanation: \n#The two integers have the same sign. ",
        "generated_testcode": "assert opposite_Signs(3, -5) == True\n",
        "test": "assert opposite_Signs(1,-2) == True\nassert opposite_Signs(3,2) == False\nassert opposite_Signs(-10,-10) == False",
        "canonical_solution": "def opposite_Signs(x,y): \r\n    return ((x ^ y) < 0); "
    },
    {
        "number": 59,
        "prompt": "Write a function to find the nth octagonal number.\ndef is_octagonal(n): \n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    return ((3*n**2 - n + 1)**(1/2)//2) % 1 == 0\n\ndef nth_octagonal_number(n): \n    return int((3*n**2 - n)//2 + 1)\n\ndef nth_octagonal_number_by_iteration(n): \n    count = 0 \n    i = 1 \n    while count < n: \n        i += 1 \n        if is_octagonal(i): \n            count += 1\n    return i\n\n# Test cases \nprint(nth_octagonal_number(1)) # Output: 1 \nprint(nth_octagonal_number(5)) # Output: 15\nprint(nth_octagonal_number(10)) # Output: 75\nprint(nth_octagonal_number(20)) # Output: 3100\nprint(nth_octagonal_number_by_iteration(1)) # Output: 1 \nprint(nth_octagonal_number_by_iteration(5)) # Output: 15\nprint(nth_octagonal_number_by_iteration(10)) # Output: 75\nprint(nth_octagonal_number_by_iteration(20)) # Output: 310",
        "generated_testcode": "assert is_octagonal(1) == True\n",
        "test": "assert is_octagonal(5) == 65\nassert is_octagonal(10) == 280\nassert is_octagonal(15) == 645",
        "canonical_solution": "def is_octagonal(n): \r\n\treturn 3 * n * n - 2 * n "
    },
    {
        "number": 60,
        "prompt": "Write a function to find the maximum length of the subsequence with difference between adjacent elements for the given array.\ndef max_len_sub( arr, n): \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    max_len = 1\n    inc_len = 1\n    dec_len = 1\n    \n    for i in range(1, n):\n        if arr[i] > arr[i-1]:\n            inc_len += 1\n            max_len = max(max_len, inc_len)\n        else:\n            inc_len = 1\n        \n        if arr[i] < arr[i-1]:\n            dec_len += 1\n            max_len = max(max_len, dec_len)\n        else:\n            dec_len = 1\n    return max_len\n\n\n# Example usage:\narr = [1, 2, 3, 1, 2, 4, 2, 3]\nn = len(arr)\nprint(max_len_sub(arr, n)) ",
        "generated_testcode": "assert max_len_sub([1, 2, 3, 5, 7, 8, 4, 6, 10, 12, 15] ) == 4\n",
        "test": "assert max_len_sub([2, 5, 6, 3, 7, 6, 5, 8], 8) == 5\nassert max_len_sub([-2, -1, 5, -1, 4, 0, 3], 7) == 4\nassert max_len_sub([9, 11, 13, 15, 18], 5) == 1",
        "canonical_solution": "def max_len_sub( arr, n): \r\n\tmls=[] \r\n\tmax = 0\r\n\tfor i in range(n): \r\n\t\tmls.append(1) \r\n\tfor i in range(n): \r\n\t\tfor j in range(i): \r\n\t\t\tif (abs(arr[i] - arr[j]) <= 1 and mls[i] < mls[j] + 1): \r\n\t\t\t\tmls[i] = mls[j] + 1\r\n\tfor i in range(n): \r\n\t\tif (max < mls[i]): \r\n\t\t\tmax = mls[i] \r\n\treturn max"
    },
    {
        "number": 61,
        "prompt": "Write a python function to count number of substrings with the sum of digits equal to their length.\ndef count_Substrings(s,n):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    count = 0\n    for i in range(n):\n        for j in range(i,n):\n            temp_sum = 0\n            for char in s[i:j+1]:\n                temp_sum += int(char)\n            if temp_sum == j-i+1:\n                count += 1\n    return count\n\ns = input()\nn = len(s)\nprint(count_Substrings(s,n))\n\n#Test case\n#Input: \"5112321\"\n#Output: 2\n#Explanation: The substrings with the sum of digits equal to their length are \"1\", \"5\", \"12\", \"123\" and \"21\"\n#So, the output should be 4. ",
        "generated_testcode": "assert count_Substrings(123,3) == 1\n",
        "test": "assert count_Substrings('112112',6) == 6\nassert count_Substrings('111',3) == 6\nassert count_Substrings('1101112',7) == 12",
        "canonical_solution": "from collections import defaultdict\r\ndef count_Substrings(s,n):\r\n    count,sum = 0,0\r\n    mp = defaultdict(lambda : 0)\r\n    mp[0] += 1\r\n    for i in range(n):\r\n        sum += ord(s[i]) - ord('0')\r\n        count += mp[sum - (i + 1)]\r\n        mp[sum - (i + 1)] += 1\r\n    return count"
    },
    {
        "number": 62,
        "prompt": "Write a python function to find smallest number in a list.\ndef smallest_num(xs):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    smallest = xs[0]\n    for num in xs:\n        if num < smallest:\n            smallest = num\n    return smallest\n\n#Test the function\nxs = [5, 2, 8, 3, 1, 6, 7, 9, 10]\nprint(smallest_num(xs)) # Output: 1\n\n# Test the function\nxs = [0, -10, -5, -3, -7, -1, -4]\nprint(smallest_num(xs)) # Output: -10\n\n# Test the function\nxs = [100, 23, 45, 67, 89, 21, 4]\nprint(smallest_num(xs)) # Output: 4\n\n# Test the function\nxs = [0.5, 0.2, 0.8, 0.1, 0.6, 0.3]\nprint(smallest_num(xs)) # Output: 0.1\n\n# Test the function\nxs = []\nprint(smallest_num(xs)) # Output: None\n",
        "generated_testcode": "assert smallest_num([]), None\n",
        "test": "assert smallest_num([10, 20, 1, 45, 99]) == 1\nassert smallest_num([1, 2, 3]) == 1\nassert smallest_num([45, 46, 50, 60]) == 45",
        "canonical_solution": "def smallest_num(xs):\n  return min(xs)\n"
    },
    {
        "number": 63,
        "prompt": "Write a function to find the maximum difference between available pairs in the given tuple list.\ndef max_difference(test_list):\n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    if len(test_list) < 2:\n        return 0\n    max_diff = 0\n    min_element = min(test_list)\n    for num in test_list:\n        if num > min_element:\n            max_diff = max(max_diff, num - min_element)\n        else:\n            min_element = num\n    return max_diff\n\n\n# Test the function\ntest_list = [1, 3, 8, 5, 2, 6, 7, 9, 4]\nprint(max_difference(test_list))\n\n\n# Output: 8 \n# Explanation: The minimum element in the list is 1 and the maximum difference is between 9 and 1, which is 8. ",
        "generated_testcode": "assert max_difference(()) == 0\n",
        "test": "assert max_difference([(3, 5), (1, 7), (10, 3), (1, 2)]) == 7\nassert max_difference([(4, 6), (2, 17), (9, 13), (11, 12)]) == 15\nassert max_difference([(12, 35), (21, 27), (13, 23), (41, 22)]) == 23",
        "canonical_solution": "def max_difference(test_list):\r\n  temp = [abs(b - a) for a, b in test_list]\r\n  res = max(temp)\r\n  return (res) "
    },
    {
        "number": 64,
        "prompt": "Write a function to sort a list of tuples using lambda.\ndef subject_marks(subjectmarks):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    subjectmarks.sort(key=lambda x: (x[1], x[0])\n    return subjectmarks\n\n\nsubject_marks = [('Maths', 90, 'Science', 80, 'English', 70, 'Social Studies', 85, 'Science', 95, 'Maths', 80, 'Social Studies', 85, 'English', 80, 'Maths', 95, 'Science', 70, 'English', 90, 'Social Studies', 90]\n\nprint(subject_marks(subject_marks))\n\n",
        "generated_testcode": "assert subject_marks([(1, 80), (2, 90), (3, 70), (4, 95), (5, 85)] ) == [(1, 80), (2, 90), (4, 95), (3, 70)]\n",
        "test": "assert subject_marks([('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])==[('Social sciences', 82), ('English', 88), ('Science', 90), ('Maths', 97)]\nassert subject_marks([('Telugu',49),('Hindhi',54),('Social',33)])==([('Social',33),('Telugu',49),('Hindhi',54)])\nassert subject_marks([('Physics',96),('Chemistry',97),('Biology',45)])==([('Biology',45),('Physics',96),('Chemistry',97)])",
        "canonical_solution": "def subject_marks(subjectmarks):\r\n#subject_marks = [('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])\r\n subjectmarks.sort(key = lambda x: x[1])\r\n return subjectmarks"
    },
    {
        "number": 65,
        "prompt": "Write a function of recursion list sum.\ndef recursive_list_sum(data_list):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": true,
        "answer": "    if not data_list:\n        return 0\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])\n\n\n# Test case\ndata = [1, 2, 3, 4, 5, 6, 7, 8, 9]\nprint(recursive_list_sum(data)) # Output: 45\n\n\n# Explanation: \n# The function takes a list as input and checks if it is empty or not. If it's empty, it returns 0. \n# If it's not empty, it returns the first element of the list (data_list[0]) added to the result of the same function called on the rest of the list (data_list[1:])\n# This process continues until the list is empty, and the final result is returned. ",
        "generated_testcode": "assert recursive_list_sum([1, 2, 3, 4, 5, 6, 7, 8, 9] ) == 45\n",
        "test": "assert recursive_list_sum(([1, 2, [3,4],[5,6]]))==21\nassert recursive_list_sum(([7, 10, [15,14],[19,41]]))==106\nassert recursive_list_sum(([10, 20, [30,40],[50,60]]))==210",
        "canonical_solution": "def recursive_list_sum(data_list):\r\n\ttotal = 0\r\n\tfor element in data_list:\r\n\t\tif type(element) == type([]):\r\n\t\t\ttotal = total + recursive_list_sum(element)\r\n\t\telse:\r\n\t\t\ttotal = total + element\r\n\treturn total"
    },
    {
        "number": 66,
        "prompt": "Write a python function to count positive numbers in a list.\ndef pos_count(list):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    count = 0\n    for num in list:\n        if num > 0:\n            count += 1\n    return count\n\n#Example usage:\nmy_list = [1, -2, 3, 0, -4, 5, 6, -7, 8, 9]\nprint(pos_count(my_list)) # Output: 3\n\nmy_list = [-1, -2, -3, -4, -5, -6, -7, -8]\nprint(pos_count(my_list)) # Output: 0\nmy_list = []\nprint(pos_count(my_list)) # Output: 0\n\n\n\n#Solution:Here's one way to implement the pos_count function:\n\ndef pos_count(lst):\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count\n\n# Test the function\nmy_list = [1, -2, 3, 0, -4, 5, 6, -7, 8, 9]\nprint(pos_count(my_list)) # Output: 3\nmy_list = [-1, -2, -3, -4, -5, -6, -7, -8]\nprint(pos_count(my_list)) # Output: 0\nmy_list = []\nprint(pos_count(my_list)) # Output: 0\n\n\n# This function takes a list as",
        "generated_testcode": "assert pos_count([1,2,3,-4,5,6,-7,8,-9,10] ) == 4\n",
        "test": "assert pos_count([1,-2,3,-4]) == 2\nassert pos_count([3,4,5,-1]) == 3\nassert pos_count([1,2,3,4]) == 4",
        "canonical_solution": "def pos_count(list):\r\n  pos_count= 0\r\n  for num in list: \r\n    if num >= 0: \r\n      pos_count += 1\r\n  return pos_count "
    },
    {
        "number": 67,
        "prompt": "Write a function to find the number of ways to partition a set of bell numbers.\ndef bell_number(n):   \n",
        "checkpoint": "7B",
        "pass": 3,
        "correct": true,
        "answer": "    if n == 0 or n == 1:\n        return 1\n    if n == 2:\n        return 2\n    dp = [0]*(n+1)\n    dp[0] = 1\n    dp[1] = 1\n    dp[2] = 2\n    for i in range(3, n+1):\n        dp[i] = 0\n        for j in range(1, i//2+1):\n            dp[i] += dp[j]*dp[i-j]\n    return dp[n]\n\n\n# Test the function\nprint(bell_number(5)) # Output: 5\nprint(bell_number(10)) # Output: 16",
        "generated_testcode": "assert bell_number(5) == 10\n",
        "test": "assert bell_number(2)==2\nassert bell_number(10)==115975\nassert bell_number(56)==6775685320645824322581483068371419745979053216268760300",
        "canonical_solution": "def bell_number(n):   \r\n    bell = [[0 for i in range(n+1)] for j in range(n+1)] \r\n    bell[0][0] = 1\r\n    for i in range(1, n+1): \r\n        bell[i][0] = bell[i-1][i-1]  \r\n        for j in range(1, i+1): \r\n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]   \r\n    return bell[n][0] "
    },
    {
        "number": 68,
        "prompt": "Write a python function to check whether the given array is monotonic or not.\ndef is_Monotonic(A): \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    if len(A) == 0 or len(A) == 1:\n        return True\n    flag = True\n    for i in range(1, len(A)):\n        if A[i] < A[i-1]:\n            if not flag:\n                return False\n            flag = False\n    for i in range(1, len(A)-1):\n        if A[i] == A[i-1]:\n            continue\n        elif A[i] > A[i-1]:\n            for j in range(i+1, len(A)):\n                if A[i] > A[j]:\n                    return False\n                if A[i] < A[j]:\n                    return False\n    return True\n\nprint(is_Monotonic([1,2,2,3,4,5,6]))\nprint(is_Monotonic([6,5,4,3,2,1]))\nprint(is_Monotonic([1,2,3,4,5,5,6]))\nprint(is_Monotonic([1,2,3,2,4,5]))\nprint(is_Monotonic([1,2,3,4,3,4]))\n\n#Output:\n#True\n#True\n#False\n#False\n#False\n#False ",
        "generated_testcode": "assert is_Monotonic([1,2,3,4,5,6,7,8,9] == True)\n",
        "test": "assert is_Monotonic([6, 5, 4, 4]) == True\nassert is_Monotonic([1, 2, 2, 3]) == True\nassert is_Monotonic([1, 3, 2]) == False",
        "canonical_solution": "def is_Monotonic(A): \r\n    return (all(A[i] <= A[i + 1] for i in range(len(A) - 1)) or\r\n            all(A[i] >= A[i + 1] for i in range(len(A) - 1))) "
    },
    {
        "number": 69,
        "prompt": "Write a function to check whether a list contains the given sublist or not.\ndef is_sublist(l, s):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": true,
        "answer": "    n = len(s)\n    for i in range(len(l)-n+1):\n        if l[i:i+n] == s:\n            return True\n    return False\n\n\n# Test cases\nprint(is_sublist([1, 2, 3, 4, 5, 6], [2, 4])) # True\nprint(is_sublist([1, 2, 3, 4, 5, 6], [1, 4])) # False\nprint(is_sublist([1, 2, 3, 4, 5, 6], [3, 4, 5])) # True\nprint(is_sublist([1, 2, 3, 4, 5, 6], [5, 3])) # False\nprint(is_sublist([1, 2, 3, 4, 5, 6], [7, 8])) # False\nprint(is_sublist([1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6])) # True\n",
        "generated_testcode": "assert is_sublist([\"hello\", \"world\", \"python\", \"programming\"], [\"world\", \"python\"]) == True\n",
        "test": "assert is_sublist([2,4,3,5,7],[3,7])==False\nassert is_sublist([2,4,3,5,7],[4,3])==True\nassert is_sublist([2,4,3,5,7],[1,6])==False",
        "canonical_solution": "def is_sublist(l, s):\r\n\tsub_set = False\r\n\tif s == []:\r\n\t\tsub_set = True\r\n\telif s == l:\r\n\t\tsub_set = True\r\n\telif len(s) > len(l):\r\n\t\tsub_set = False\r\n\telse:\r\n\t\tfor i in range(len(l)):\r\n\t\t\tif l[i] == s[0]:\r\n\t\t\t\tn = 1\r\n\t\t\t\twhile (n < len(s)) and (l[i+n] == s[n]):\r\n\t\t\t\t\tn += 1\t\t\t\t\r\n\t\t\t\tif n == len(s):\r\n\t\t\t\t\tsub_set = True\r\n\treturn sub_set"
    },
    {
        "number": 70,
        "prompt": "Write a function to find whether all the given tuples have equal length or not.\ndef find_equal_tuple(Input, k):\n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    return all(len(i) == k for i in Input)\n\n# Driver code\nInput = [(1, 2, 3), (4, 5), (6, 7, 8, 9)]\nk = 3\nif find_equal_tuple(Input, k):\n    print(\"Equal length\")\nelse:\n    print(\"Not equal length\")\n\n\nInput = [(1, 2, 3), (4, 5, 6), (7, 8, 9)]\nk = 3\nif find_equal_tuple(Input, k):\n    print(\"Equal length\")\nelse:\n    print(\"Not equal length\") ",
        "generated_testcode": "assert find_equal_tuple((), 0) == True\n",
        "test": "assert get_equal([(11, 22, 33), (44, 55, 66)], 3) == 'All tuples have same length'\nassert get_equal([(1, 2, 3), (4, 5, 6, 7)], 3) == 'All tuples do not have same length'\nassert get_equal([(1, 2), (3, 4)], 2) == 'All tuples have same length'",
        "canonical_solution": "def find_equal_tuple(Input, k):\r\n  flag = 1\r\n  for tuple in Input:\r\n    if len(tuple) != k:\r\n      flag = 0\r\n      break\r\n  return flag\r\ndef get_equal(Input, k):\r\n  if find_equal_tuple(Input, k) == 1:\r\n    return (\"All tuples have same length\")\r\n  else:\r\n    return (\"All tuples do not have same length\")"
    },
    {
        "number": 71,
        "prompt": "Write a function to sort a list of elements using comb sort.\ndef comb_sort(nums):\n",
        "checkpoint": "7B",
        "pass": 3,
        "correct": true,
        "answer": "    n = len(nums)\n    shrink_factor = 1.3\n    gap = n\n    sorted = False\n    while not sorted:\n        gap = int(gap/shrink_factor)\n        if gap <= 1:\n            sorted = True\n        else:\n            sorted = False\n            for i in range(n-1):\n                if nums[i] > nums[i+1]:\n                    sorted = False\n                    nums[i], nums[i+1] = nums[i+1], nums[i]\n        for i in range(0, n-gap):\n            if nums[i] > nums[i+gap]:\n                sorted = False\n                nums[i], nums[i+gap] = nums[i+gap], nums[i]\n    return nums\n\n\n# Test the function with an example\nnums = [34, 2, 10, 56, 67, 12, 89, 43, 23, 6, 7, 99, 123, 45, 76, 99, 101]\nprint(comb_sort(nums))\n",
        "generated_testcode": "assert comb_sort([3, 1, 4, 2, 1, 0, 5, 6, 7, 2, 8, 3] ) == [0, 1, 1, 2, 2, 3, 3, 4, 5, 6, 7, 8]\n",
        "test": "assert comb_sort([5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79]\nassert comb_sort([41, 32, 15, 19, 22]) == [15, 19, 22, 32, 41]\nassert comb_sort([99, 15, 13, 47]) == [13, 15, 47, 99]",
        "canonical_solution": "def comb_sort(nums):\r\n    shrink_fact = 1.3\r\n    gaps = len(nums)\r\n    swapped = True\r\n    i = 0\r\n    while gaps > 1 or swapped:\r\n        gaps = int(float(gaps) / shrink_fact)\r\n        swapped = False\r\n        i = 0\r\n        while gaps + i < len(nums):\r\n            if nums[i] > nums[i+gaps]:\r\n                nums[i], nums[i+gaps] = nums[i+gaps], nums[i]\r\n                swapped = True\r\n            i += 1\r\n    return nums"
    },
    {
        "number": 72,
        "prompt": "Write a python function to check whether the given number can be represented as difference of two squares or not.\ndef dif_Square(n): \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    for i in range(1,int(n**0.5)+1):\n        j = n-i**2\n        if i**2<=j and j<=n and int(i**2+j**2)==n:\n            return True\n    return False\n\nprint(dif_Square(6)) # Output: True\nprint(dif_Square(5)) # Output: False\nprint(dif_Square(11)) # Output: True\nprint(dif_Square(10)) # Output: False\nprint(dif_Square(25)) # Output: True\nprint(dif_Square(23)) # Output: True\nprint(dif_Square(27)) # Output: False ",
        "generated_testcode": "assert dif_Square(1) == True\n",
        "test": "assert dif_Square(5) == True\nassert dif_Square(10) == False\nassert dif_Square(15) == True",
        "canonical_solution": "def dif_Square(n): \r\n    if (n % 4 != 2): \r\n        return True\r\n    return False"
    },
    {
        "number": 73,
        "prompt": "Write a function to split the given string with multiple delimiters by using regex.\ndef multiple_split(text):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    import re\n\n    # define a regex pattern to split the text\n    pattern = r'[,.; ]+'\n\n    # split the text using the pattern\n    words = re.split(pattern, text)\n\n    # return the list of words\n    return words\n\n\n# test the function with an example\nprint(multiple_split(\"Hello, how are you? I am fine; thank you.\"))\n",
        "generated_testcode": "assert multiple_split(\n    \"This is a test string with multiple delimiters: ;,!? and spaces. And some more text here.\",\n    [\";\", \",\", \"!\", \"?\"]) == [\n        \"This is a test string with multiple delimiters\", \"and spaces\", \"And some more text here.\"]\n\n",
        "test": "assert multiple_split('Forces of the \\ndarkness*are coming into the play.') == ['Forces of the ', 'darkness', 'are coming into the play.']\nassert multiple_split('Mi Box runs on the \\n Latest android*which has google assistance and chromecast.') == ['Mi Box runs on the ', ' Latest android', 'which has google assistance and chromecast.']\nassert multiple_split('Certain services\\nare subjected to change*over the seperate subscriptions.') == ['Certain services', 'are subjected to change', 'over the seperate subscriptions.']",
        "canonical_solution": "import re\r\ndef multiple_split(text):\r\n  return (re.split('; |, |\\*|\\n',text))"
    },
    {
        "number": 74,
        "prompt": "Write a function to check whether it follows the sequence given in the patterns array.\ndef is_samepatterns(colors, patterns):    \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    n = len(colors)\n    if n != len(patterns):\n        return False\n    \n    for i in range(n):\n        if colors[i] not in patterns[i]:\n            return False\n        \n        for j in range(len(patterns[i]):\n            if colors[i][j] != patterns[i][j]:\n                return False\n                \n    return True\n\n# Test cases\ncolors = [\"R\", \"G\", \"B\", \"B\", \"R\", \"R\", \"G\", \"G\", \"B\"]\npatterns = [[\"R\", \"G\", \"B\", \"R\", \"B\", \"R\", \"G\", \"B\"]]\nprint(is_samepatterns(colors, patterns)) # True\n\ncolors = [\"R\", \"G\", \"B\", \"B\", \"R\", \"R\", \"G\", \"G\", \"B\"]\npatterns = [[\"R\", \"G\", \"B\", \"R\", \"B\", \"R\", \"G\", \"B\"]\nprint(is_samepatterns(colors, patterns)) # False\n\ncolors = [\"R\", \"G\", \"B\", \"B\", \"R\", \"R\", \"G\", \"G\", \"B\", \"R\", \"G\", \"B\"]\npatterns = [[\"R\", \"G\", \"B\", \"R\", \"B\", \"R\", \"G\", \"B\", \"R\", \"G\", \"B\"]\nprint(is_samepatterns(colors, patterns)) # False\n\ncolors = [\"R\", \"G\",",
        "generated_testcode": "assert is_samepatterns([\"red\", \"blue\", \"green\", \"yellow\", \"purple\"], [\"red\", \"blue\", \"green\", \"yellow\", \"purple\"]) == True\n",
        "test": "assert is_samepatterns([\"red\",\"green\",\"green\"], [\"a\", \"b\", \"b\"])==True \nassert is_samepatterns([\"red\",\"green\",\"greenn\"], [\"a\",\"b\",\"b\"])==False \nassert is_samepatterns([\"red\",\"green\",\"greenn\"], [\"a\",\"b\"])==False ",
        "canonical_solution": "def is_samepatterns(colors, patterns):    \r\n    if len(colors) != len(patterns):\r\n        return False    \r\n    sdict = {}\r\n    pset = set()\r\n    sset = set()    \r\n    for i in range(len(patterns)):\r\n        pset.add(patterns[i])\r\n        sset.add(colors[i])\r\n        if patterns[i] not in sdict.keys():\r\n            sdict[patterns[i]] = []\r\n\r\n        keys = sdict[patterns[i]]\r\n        keys.append(colors[i])\r\n        sdict[patterns[i]] = keys\r\n\r\n    if len(pset) != len(sset):\r\n        return False   \r\n\r\n    for values in sdict.values():\r\n\r\n        for i in range(len(values) - 1):\r\n            if values[i] != values[i+1]:\r\n                return False\r\n\r\n    return True"
    },
    {
        "number": 75,
        "prompt": "Write a function to find tuples which have all elements divisible by k from the given list of tuples.\ndef find_tuples(test_list, K):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    result = []\n    for tup in test_list:\n        if all(i % K == 0 for i in tup):\n            result.append(tup)\n    return result\n\n# Test cases\nprint(find_tuples([(2, 3, 4), (6, 8, 12), (10, 15, 20), (30, 45, 60)], 3)) # [(2, 3, 4), (10, 15, 20)]\nprint(find_tuples([(1, 2, 3, 4), (5, 6, 7, 8), (9, 10, 11, 12), (15, 18, 21), (30, 36, 45)], 3)) # [(9, 10, 12), (15, 18, 21)]\nprint(find_tuples([(4, 6, 8, 12), (15, 20, 24), (21, 25, 30), (27, 30, 36), (36, 42, 48), (45, 54, 60)], 6)) # [(4, 6, 8), (21, 25, 30), (36, 42, 48), (45, 5",
        "generated_testcode": "assert find_tuples([(1, 2, 3, 4), (5, 6, 7), (8, 9, 10), (11, 12, 13), (14, 15, 16)], 3) == [(1, 2, 3, 4), (8, 9, 10), (11, 12, 13), (14, 15, 16)]\n",
        "test": "assert find_tuples([(6, 24, 12), (7, 9, 6), (12, 18, 21)], 6) == '[(6, 24, 12)]'\nassert find_tuples([(5, 25, 30), (4, 2, 3), (7, 8, 9)], 5) == '[(5, 25, 30)]'\nassert find_tuples([(7, 9, 16), (8, 16, 4), (19, 17, 18)], 4) == '[(8, 16, 4)]'",
        "canonical_solution": "def find_tuples(test_list, K):\r\n  res = [sub for sub in test_list if all(ele % K == 0 for ele in sub)]\r\n  return (str(res)) "
    },
    {
        "number": 76,
        "prompt": "Write a python function to count the number of squares in a rectangle.\ndef count_Squares(m,n):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    return m*n\n\n#Test the function with the following inputs and test cases:\nprint(count_Squares(2,3)) # Output: 6\nprint(count_Squares(3,4)) # Output: 12\nprint(count_Squares(5,6)) # Output: 30\nprint(count_Squares(7,8)) # Output: 48\n\n# Explanation: \n# In a rectangle with 2 rows and 3 columns, there are 6 squares\n# In a rectangle with 3 rows and 4 columns, there are 12 squares\n# In a rectangle with 5 rows and 6 columns, there are 30 squares\n# In a rectangle with 7 rows and 8 columns, there are 48 squares ",
        "generated_testcode": "assert count_Squares(3,4) == 9\n",
        "test": "assert count_Squares(4,3) == 20\nassert count_Squares(2,2) == 5\nassert count_Squares(1,1) == 1",
        "canonical_solution": "def count_Squares(m,n):\r\n    if(n < m):\r\n        temp = m\r\n        m = n\r\n        n = temp\r\n    return ((m * (m + 1) * (2 * m + 1) / 6 + (n - m) * m * (m + 1) / 2))"
    },
    {
        "number": 77,
        "prompt": "Write a python function to find the difference between sum of even and odd digits.\ndef is_Diff(n): \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    even_sum = 0\n    odd_sum = 0\n    for i in str(n):\n        if int(i)%2 == 0:\n            even_sum += int(i)\n        else:\n            odd_sum += int(i)\n    return abs(even_sum - odd_sum)\n\n\n#Test the function\nprint(is_Diff(12345))\n#Output: 3\nprint(is_Diff(987654))\n#Output: 15\nprint(is_Diff(13579))\n#Output: 8\n",
        "generated_testcode": "assert is_Diff(12345) == 8\n",
        "test": "assert is_Diff (12345) == False\nassert is_Diff(1212112) == True\nassert is_Diff(1212) == False",
        "canonical_solution": "def is_Diff(n): \r\n    return (n % 11 == 0) "
    },
    {
        "number": 78,
        "prompt": "Write a python function to find number of integers with odd number of set bits.\ndef count_With_Odd_SetBits(n): \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    count = 0\n    for i in range(1,n+1):\n        if bin(i).count('1') % 2 != 0:\n            count += 1\n    return count\n\n# Test the function with an example\nprint(count_With_Odd_SetBits(15)) # Output: 6 ",
        "generated_testcode": "assert count_With_Odd_SetBits(10) == 1\n",
        "test": "assert count_With_Odd_SetBits(5) == 3\nassert count_With_Odd_SetBits(10) == 5\nassert count_With_Odd_SetBits(15) == 8",
        "canonical_solution": "def count_With_Odd_SetBits(n): \r\n    if (n % 2 != 0): \r\n        return (n + 1) / 2\r\n    count = bin(n).count('1') \r\n    ans = n / 2\r\n    if (count % 2 != 0): \r\n        ans += 1\r\n    return ans "
    },
    {
        "number": 79,
        "prompt": "Write a python function to check whether the length of the word is odd or not.\ndef word_len(s): \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    if len(s)%2 == 0: \n        return \"Even\"\n    else:\n        return \"Odd\"\n\n# Test the function\nprint(word_len(\"hello\"))\nprint(word_len(\"world\"))\n\n# Output:\n# Odd\n# Even\n",
        "generated_testcode": "assert word_len(123) == False\n",
        "test": "assert word_len(\"Hadoop\") == False\nassert word_len(\"great\") == True\nassert word_len(\"structure\") == True",
        "canonical_solution": "def word_len(s): \r\n    s = s.split(' ')   \r\n    for word in s:    \r\n        if len(word)%2!=0: \r\n            return True  \r\n        else:\r\n          return False"
    },
    {
        "number": 80,
        "prompt": "Write a function to find the nth tetrahedral number.\ndef tetrahedral_number(n): \n",
        "checkpoint": "7B",
        "pass": 3,
        "correct": true,
        "answer": "    return n * (n * (n + 1) // 2)\n\n# Test cases\nprint(tetrahedral_number(1)) # Output: 1\nprint(tetrahedral_number(2)) # Output: 4\nprint(tetrahedral_number(3)) # Output: 10\nprint(tetrahedral_number(4)) # Output: 20\nprint(tetrahedral_number(5)) # Output: 35\nprint(tetrahedral_number(6)) # Output: 56\nprint(tetrahedral_number(7)) # Output: 91",
        "generated_testcode": "assert tetrahedral_number(1) == 1\n",
        "test": "assert tetrahedral_number(5) == 35.0\nassert tetrahedral_number(6) == 56.0\nassert tetrahedral_number(7) == 84.0",
        "canonical_solution": "def tetrahedral_number(n): \r\n\treturn (n * (n + 1) * (n + 2)) / 6"
    },
    {
        "number": 81,
        "prompt": "Write a function to zip the two given tuples.\ndef zip_tuples(test_tup1, test_tup2):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    result_tup = ()\n    min_len = min(len(test_tup1), len(test_tup2))\n    for i in range(min_len):\n        result_tup += (test_tup1[i], test_tup2[i])\n    return result_tup\n\n# Test the function\nprint(zip_tuples((1, 2, 3, 4, 5), (6, 7, 8, 9, 10, 11, 12)) # should return (1, 6), (2, 7), (3, 8), (4, 9), (5, 10)\nprint(zip_tuples(('a', 'b', 'c', 'd'), ('X', 'Y', 'Z', 'W', 'K', 'L')) # should return ('a', 'X'), ('b', 'Y'), ('c', 'Z'), ('d', 'W')\nprint(zip_tuples((), ('x', 'y')) # should return ()\nprint(zip_tuples(('a',) # should return ('a',)\nprint(zip_tuples((1, 2, 3), (4, 5, 6, 7, 8, 9)) # should return (1, 4), (2, 5), (3, 6)\nprint(zip_tuples((), ()) # should return () ",
        "generated_testcode": "assert zip_tuples(('hello', (1, 2, 3), (4, 5, 6)) == (('h', 1, 4), ('e', 2, 5), ('l', 3, 6))\n",
        "test": "assert zip_tuples((7, 8, 4, 5, 9, 10),(1, 5, 6) ) == [(7, 1), (8, 5), (4, 6), (5, 1), (9, 5), (10, 6)]\nassert zip_tuples((8, 9, 5, 6, 10, 11),(2, 6, 7) ) == [(8, 2), (9, 6), (5, 7), (6, 2), (10, 6), (11, 7)]\nassert zip_tuples((9, 10, 6, 7, 11, 12),(3, 7, 8) ) == [(9, 3), (10, 7), (6, 8), (7, 3), (11, 7), (12, 8)]",
        "canonical_solution": "def zip_tuples(test_tup1, test_tup2):\r\n  res = []\r\n  for i, j in enumerate(test_tup1):\r\n    res.append((j, test_tup2[i % len(test_tup2)])) \r\n  return (res) "
    },
    {
        "number": 82,
        "prompt": "Write a function to find the volume of a sphere.\ndef volume_sphere(r):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    import math\n    volume = (4/3) * math.pi * r**3\n    return volume\n\n# Test the function\nprint(volume_sphere(5)) # Output: 523.6\nprint(volume_sphere(10)) # Output: 1543.67\nprint(volume_sphere(2.5)) # Output: 15.59\n\n\n# Write a function to find the area of a sphere\ndef area_sphere(r):\n    import math\n    area = 4 * math.pi * r**2\n    return area\n\n# Test the function\nprint(area_sphere(5)) # Output: 78.53982\nprint(area_sphere(10)) # Output: 153.97\nprint(area_sphere(2.5)) # Output: 19.685\n\n\n# Write a function to find the surface area of a sphere\ndef surface_area_sphere(r):\n    import math\n    surface_area = 4 * math.pi * r**2\n    return surface_area\n\n# Test the function\nprint(surface_area_sphere(5)) # Output: 62.83\nprint(surface_area_sphere(10)) # Output: 402.65\nprint(surface_area_sphere(2.5)) # Output: 31.01\n\n\n# Write a function to find the circumference of a",
        "generated_testcode": "assert volume_sphere(5) == 523.598, \"Incorrect volume calculation for radius 5\"\n",
        "test": "assert volume_sphere(10)==4188.790204786391\nassert volume_sphere(25)==65449.84694978735\nassert volume_sphere(20)==33510.32163829113",
        "canonical_solution": "import math\r\ndef volume_sphere(r):\r\n  volume=(4/3)*math.pi*r*r*r\r\n  return volume"
    },
    {
        "number": 83,
        "prompt": "Write a python function to find the character made by adding all the characters of the given string.\ndef get_Char(strr):  \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    # code goes here\n    sum_of_chars = 0\n    for char in strr:\n        sum_of_chars += ord(char)\n    result = chr(sum_of_chars)\n    return result\n\n# test the function with an example\nprint(get_Char(\"hello\")) # expected output: \"f\"\nprint(get_Char(\"world\")) # expected output: \"w\"\nprint(get_Char(\"python\")) # expected output: \"v\"\nprint(get_Char(\"programming\")) # expected output: \"o\" ",
        "generated_testcode": "assert get_Char(strr=\"hello\") == \"h\"\n",
        "test": "assert get_Char(\"abc\") == \"f\"\nassert get_Char(\"gfg\") == \"t\"\nassert get_Char(\"ab\") == \"c\"",
        "canonical_solution": "def get_Char(strr):  \r\n    summ = 0\r\n    for i in range(len(strr)): \r\n        summ += (ord(strr[i]) - ord('a') + 1)  \r\n    if (summ % 26 == 0): \r\n        return ord('z') \r\n    else: \r\n        summ = summ % 26\r\n        return chr(ord('a') + summ - 1)"
    },
    {
        "number": 84,
        "prompt": "Write a function to find the n-th number in newman conway sequence.\ndef sequence(n): \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        sequence = [1, 1]\n        for i in range(2, n+1):\n            sequence.append(sequence[sequence[i-1] + sequence[i-2])\n        return sequence[n]\n\n\nprint(sequence(5)) # Output: 10\nprint(sequence(10)) # Output: 610\nprint(sequence(15)) # Output: 9280780\n\n\n#Alternative approach using memoization to avoid recalculating the sequence\ndef sequence(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        sequence = [1, 1]\n        for i in range(2, n+1):\n            sequence.append(sequence[sequence[i-1] + sequence[i-2])\n        return sequence[n]\n\n\ndef newman_conway(n, memo={1: 1, 2: 1}):\n    if n in memo:\n        return memo[n]\n    else:\n        result = sequence(n-1) + sequence(memo[n-1]) - sequence(memo[n-2])\n        memo[n] = result\n        return",
        "generated_testcode": "assert sequence(1) == [1]\n",
        "test": "assert sequence(10) == 6\nassert sequence(2) == 1\nassert sequence(3) == 2",
        "canonical_solution": "def sequence(n): \r\n\tif n == 1 or n == 2: \r\n\t\treturn 1\r\n\telse: \r\n\t\treturn sequence(sequence(n-1)) + sequence(n-sequence(n-1))"
    },
    {
        "number": 85,
        "prompt": "Write a function to find the surface area of a sphere.\ndef surfacearea_sphere(r):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    import math\n    pi = math.pi\n    return 4*pi*r**2\n\n#Test the function\nprint(surfacearea_sphere(4)) # Output: 523.598\nprint(surfacearea_sphere(5)) # Output: 78.5398\n\n#Write a function to find the volume of a sphere\ndef volume_sphere(r):\n    import math\n    pi = math.pi\n    return (4/3)*pi*r**3\n\n#Test the function\nprint(volume_sphere(4)) # Output: 384.598\nprint(volume_sphere(5)) # Output: 523.598\n\n#Write a function to find the surface area of a hemisphere\ndef surfacearea_hemisphere(r):\n    import math\n    pi = math.pi\n    return 2*pi*r**2\n\n#Test the function\nprint(surfacearea_hemisphere(4)) # Output: 60.598\nprint(surfacearea_hemisphere(5)) # Output: 81.5398\n\n#Write a function to find the volume of a hemisphere\ndef volume_hemisphere(r):\n    import math\n    pi = math.pi\n    return (2/3)*pi*r**3\n\n#Test the function\nprint(volume_hemisphere(4)) # Output: 113.598\nprint(volume",
        "generated_testcode": "assert surfacearea_sphere(5) == 314.1598957458617000079\nprint(\"Test case 1 passed\")\n\n# Write a function to find the volume of a sphere\ndef volume_sphere(r):\n    pass\n\n",
        "test": "assert surfacearea_sphere(10)==1256.6370614359173\nassert surfacearea_sphere(15)==2827.4333882308138\nassert surfacearea_sphere(20)==5026.548245743669",
        "canonical_solution": "import math\r\ndef surfacearea_sphere(r):\r\n  surfacearea=4*math.pi*r*r\r\n  return surfacearea"
    },
    {
        "number": 86,
        "prompt": "Write a function to find nth centered hexagonal number.\ndef centered_hexagonal_number(n):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": true,
        "answer": "    if n == 1:\n        return 1\n    else:\n        return 1 + (n * (n - 1) // 2)\n\n\n# Test cases\nprint(centered_hexagonal_number(1))  # Output: 1\nprint(centered_hexagonal_number(6))  # Output: 15\nprint(centered_hexagonal_number(10))  # Output: 32\nprint(centered_hexagonal_number(20))  # Output: 1153\nprint(centered_hexagonal_number(100))  # Output: 402\nprint(centered_hexagonal_number(1000))  # Output: 69998\n",
        "generated_testcode": "assert centered_hexagonal_number(1) == 1\n",
        "test": "assert centered_hexagonal_number(10) == 271\nassert centered_hexagonal_number(2) == 7\nassert centered_hexagonal_number(9) == 217",
        "canonical_solution": "def centered_hexagonal_number(n):\r\n  return 3 * n * (n - 1) + 1"
    },
    {
        "number": 87,
        "prompt": "Write a function to merge three dictionaries into a single expression.\ndef merge_dictionaries_three(dict1,dict2, dict3):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": true,
        "answer": "    result = dict1.copy()\n    result.update(dict2)\n    result.update(dict3)\n    return result\n\n# Test the function\nd1 = {'a': 1, 'b': 2, 'c': 3}\nd2 = {'d': 4, 'e': 5, 'f': 6}\nd3 = {'g': 7, 'h': 8, 'i': 9}\nresult = merge_dictionaries_three(d1, d2, d3)\nprint(result) # Output: {'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5, 'f': 6, 'g': 7, 'h': 8, 'i': 9}\n\nd4 = {'j': 10, 'k': 11, 'l': 12}\nresult = merge_dictionaries_three(d4, d2, d3)\nprint(result) # Output: {'j': 10, 'k': 11, 'l': 12, 'd': 4, 'e': 5, 'f': 6, 'g': 7, 'h': 8, 'i': 9}\n\nd5 = {'m': 13, 'n': 14, 'o': 15}\nresult = merge_dictionaries_three(d1, d2, d5)\nprint(result) # Output: {'a': ",
        "generated_testcode": "assert merge_dictionaries_three({'a': 1, 'b': 2, 'c': 3}, {'d': 4, 'e': 5}, {'f': 6, 'g': 7}) == {'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5, 'f': 6, 'g': 7}\n",
        "test": "assert merge_dictionaries_three({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" }, { \"G\": \"Green\", \"W\": \"White\" },{ \"O\": \"Orange\", \"W\": \"White\", \"B\": \"Black\" })=={'B': 'Black', 'R': 'Red', 'P': 'Pink', 'G': 'Green', 'W': 'White', 'O': 'Orange'}\nassert merge_dictionaries_three({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" }, { \"G\": \"Green\", \"W\": \"White\" },{\"L\":\"lavender\",\"B\":\"Blue\"})=={'W': 'White', 'P': 'Pink', 'B': 'Black', 'R': 'Red', 'G': 'Green', 'L': 'lavender'}\nassert merge_dictionaries_three({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" },{\"L\":\"lavender\",\"B\":\"Blue\"},{ \"G\": \"Green\", \"W\": \"White\" })=={'B': 'Black', 'P': 'Pink', 'R': 'Red', 'G': 'Green', 'L': 'lavender', 'W': 'White'}",
        "canonical_solution": "import collections as ct\r\ndef merge_dictionaries_three(dict1,dict2, dict3):\r\n    merged_dict = dict(ct.ChainMap({},dict1,dict2,dict3))\r\n    return merged_dict"
    },
    {
        "number": 88,
        "prompt": "Write a function to get the frequency of the elements in a list.\ndef freq_count(list1):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    freq_dict = {}\n    for item in list1:\n        if item in freq_dict:\n            freq_dict[item] += 1\n        else:\n            freq_dict[item] = 1\n    return freq_dict\n\n\n# Test the function\nlist1 = [1, 2, 3, 4, 5, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 7, 8, 9]\nprint(freq_count(list1)) # Output: {1: 2, 2: 3, 3: 3, 4: 3, 5: 3, 6: 2, 7: 1, 8: 1, 9: 1}\n\n\n# Can you modify the function to return the frequency in descending order?\ndef freq_count_desc(list1):\n    freq_dict = {}\n    for item in list1:\n        if item in freq_dict:\n            freq_dict[item] += 1\n        else:\n            freq_dict[item] = 1\n    return {k: v for k, v in sorted(freq_dict.items(), key=lambda item: item[1], reverse=True)}\n\n# Test the modified function\nlist1 = [1, 2, 3, 4, 5, 2, 3, 4, ",
        "generated_testcode": "assert freq_count([\"apple\", \"banana\", \"orange\", \"apple\", \"banana\", \"apple\", \"orange\", \"banana\", \"orange\"] == {'apple': 3, 'banana': 3, 'orange': 3}\n",
        "test": "assert freq_count([10,10,10,10,20,20,20,20,40,40,50,50,30])==({10: 4, 20: 4, 40: 2, 50: 2, 30: 1}) \nassert freq_count([1,2,3,4,3,2,4,1,3,1,4])==({1:3, 2:2,3:3,4:3}) \nassert freq_count([5,6,7,4,9,10,4,5,6,7,9,5])==({10:1,5:3,6:2,7:2,4:2,9:2}) ",
        "canonical_solution": "import collections\r\ndef freq_count(list1):\r\n  freq_count= collections.Counter(list1)\r\n  return freq_count"
    },
    {
        "number": 89,
        "prompt": "Write a function to find the closest smaller number than n.\ndef closest_num(N):\n",
        "checkpoint": "7B",
        "pass": 4,
        "correct": true,
        "answer": "    # initialize an array to hold the sorted list of all numbers from 1 to N\n    numbers = list(range(1, N+1))\n    # sort the array in descending order\n    numbers.sort(reverse=True)\n    # initialize the closest number to None\n    closest_num = None\n    # iterate through the sorted array\n    for num in numbers:\n        # if the current number is less than N and is closer to N than the current closest number, update the closest number\n        if num < N and (closest_num is None or abs(num - N) < abs(closest_num - N)):\n            closest_num = num\n    return closest_num\n\n\n# test the function with some sample inputs\nprint(closest_num(10)) # expected output: 9\nprint(closest_num(7)) # expected output: 6\nprint(closest_num(15)) # expected output: 14\nprint(closest_num(1)) # expected output: None\nprint(closest_num(1000)) # expected output: 99\nprint(closest_num(200)) # expected output: 19\n",
        "generated_testcode": "assert closest_num(10) == 9\n",
        "test": "assert closest_num(11) == 10\nassert closest_num(7) == 6\nassert closest_num(12) == 11",
        "canonical_solution": "def closest_num(N):\r\n  return (N - 1)"
    },
    {
        "number": 90,
        "prompt": "Write a python function to find the length of the longest word.\ndef len_log(list1):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    max_len = 0\n    for word in list1:\n        if len(word) > max_len:\n            max_len = len(word)\n    return max_len\n\n#test the function\nlist1 = ['apple', 'banana', 'cherry', 'grape', 'orange', 'kiwi', 'mango']\nprint(len_log(list1)) # output: 5\nlist2 = ['hello', 'world', 'python', 'programming', 'is', 'fun']\nprint(len_log(list2)) # output: 6\nlist3 = ['cat', 'dog', 'elephant', 'rabbit', 'lion', 'tiger']\nprint(len_log(list3)) # output: 5\n\n\n#or\n\ndef len_log(list1):\n    return max(len(word) for word in list1)\n#test the function\nlist1 = ['apple', 'banana', 'cherry', 'grape', 'orange', 'kiwi', 'mango']\nprint(len_log(list1)) # output: 5\nlist2 = ['hello', 'world', 'python', 'programming', 'is', 'fun']\nprint(len_log(list2)) # output: 6\nlist3 = ['cat', 'dog', 'elephant', 'rabbit', 'lion', 'tiger']\nprint(len_log(list3)) # output: 5\n\n#or\ndef len_log(list1):\n",
        "generated_testcode": "assert len_log([\"hello\", \"world\", \"python\", \"programming\", \"is\", \"fun\"] == 6\n",
        "test": "assert len_log([\"python\",\"PHP\",\"bigdata\"]) == 7\nassert len_log([\"a\",\"ab\",\"abc\"]) == 3\nassert len_log([\"small\",\"big\",\"tall\"]) == 5",
        "canonical_solution": "def len_log(list1):\r\n    max=len(list1[0])\r\n    for i in list1:\r\n        if len(i)>max:\r\n            max=len(i)\r\n    return max"
    },
    {
        "number": 91,
        "prompt": "Write a function to check if a substring is present in a given list of string values.\ndef find_substring(str1, sub_str):\n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    for s in str1:\n        if sub_str in s:\n            return True\n    return False\n\n\n# Test the function\nstr1 = [\"hello world\", \"goodbye\", \"hi there\", \"happy new year\", \"goodbye\"]\nsub_str = \"good\"\n\nif find_substring(str1, sub_str):\n    print(f\"{sub_str} found in the list\")\nelse:\n    print(f\"{sub_str} not found in the list\")\n",
        "generated_testcode": "assert find_substring([\"hello\", \"world\", \"python\", \"programming\"], \"pro\") == True\n",
        "test": "assert find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"ack\")==True\nassert find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"abc\")==False\nassert find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"ange\")==True",
        "canonical_solution": "def find_substring(str1, sub_str):\r\n   if any(sub_str in s for s in str1):\r\n       return True\r\n   return False"
    },
    {
        "number": 92,
        "prompt": "Write a function to check whether the given number is undulating or not.\ndef is_undulating(n): \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    if n == 0:\n        return True\n    if n == 1:\n        return False\n    \n    prev = 0\n    for i in range(2, n+1):\n        if n % i == 0:\n            if i != prev and n // i - prev == 2:\n                return True\n            prev = i\n    return False\n\n\n# Test cases\nprint(is_undulating(12)) # True\nprint(is_undulating(28)) # True\nprint(is_undulating(30)) # True\nprint(is_undulating(42)) # True\nprint(is_undulating(9)) # False\nprint(is_undulating(10)) # True\nprint(is_undulating(35)) # False\nprint(is_undulating(67)) # True\nprint(is_undulating(70)) # True\nprint(is_unduling(16)) # False",
        "generated_testcode": "assert is_undulating(123456789) == True\n",
        "test": "assert is_undulating(\"1212121\") == True\nassert is_undulating(\"1991\") == False\nassert is_undulating(\"121\") == True",
        "canonical_solution": "def is_undulating(n): \r\n\tif (len(n) <= 2): \r\n\t\treturn False\r\n\tfor i in range(2, len(n)): \r\n\t\tif (n[i - 2] != n[i]): \r\n\t\t\treturn False\r\n\treturn True"
    },
    {
        "number": 93,
        "prompt": "Write a function to calculate the value of 'a' to the power 'b'.\ndef power(a,b):\n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    if b == 0:\n        return 1\n    else:\n        result = 1\n        while b > 0:\n            result *= a\n            b -= 1\n        return result\n\n# Test the function\nprint(power(2, 3)) # Output: 8\nprint(power(3, 5)) # Output: 243\nprint(power(10, 0)) # Output: 1\nprint(power(0, 5)) # Output: 0\nprint(power(0, 0)) # Output: 1\nprint(power(3, -2)) # Output: 0.111111111111111111111\nprint(power(10, -3)) # Output: 0.001\nprint(power(0, -5)) # Output: 0.000001\n",
        "generated_testcode": "assert power(2,3) == 8\n",
        "test": "assert power(3,4) == 81\nassert power(2,3) == 8\nassert power(5,5) == 3125",
        "canonical_solution": "def power(a,b):\r\n\tif b==0:\r\n\t\treturn 1\r\n\telif a==0:\r\n\t\treturn 0\r\n\telif b==1:\r\n\t\treturn a\r\n\telse:\r\n\t\treturn a*power(a,b-1)"
    },
    {
        "number": 94,
        "prompt": "Write a function to extract the index minimum value record from the given tuples.\ndef index_minimum(test_list):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    min_val = min(test_list[0][1]\n    min_index = 0\n    for i in range(1, len(test_list)):\n        if test_list[i][1] < min_val:\n            min_val = test_list[i][1]\n            min_index = i\n    return min_index\n\n\n# Test the function\ntest_list = [(1, 5), (2, 3), (3, 1), (4, 7), (5, 8)]\nprint(index_minimum(test_list))\n\n\n# Output: 2\n\n\n# Explanation: \n# The minimum value in the list is 1 which is at index 2. So, the function returns 2. ",
        "generated_testcode": "assert index_minimum([(1, 2, 3), (4, 5, 6), (7, 8, 9)] ) == (0, 1, 2)\n",
        "test": "assert index_minimum([('Rash', 143), ('Manjeet', 200), ('Varsha', 100)]) == 'Varsha'\nassert index_minimum([('Yash', 185), ('Dawood', 125), ('Sanya', 175)]) == 'Dawood'\nassert index_minimum([('Sai', 345), ('Salman', 145), ('Ayesha', 96)]) == 'Ayesha'",
        "canonical_solution": "from operator import itemgetter \r\ndef index_minimum(test_list):\r\n  res = min(test_list, key = itemgetter(1))[0]\r\n  return (res) "
    },
    {
        "number": 95,
        "prompt": "Write a python function to find the minimum length of sublist.\ndef Find_Min_Length(lst):  \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    if len(lst) < 2:\n        return 0\n    min_len = 1\n    start = 0\n    end = 0\n    n = len(lst)\n    while end < n:\n        temp_len = 1\n        temp_start = end\n        temp_end = end\n        while temp_end < n and lst[temp_start] == lst[temp_end]:\n            temp_len += 1\n            temp_end += 1\n        while temp_start > 0 and temp_end < n and lst[temp_start-1] == lst[temp_end]:\n            temp_start -= 1\n            temp_len += 1\n        if temp_len < min_len:\n            min_len = temp_len\n        end = temp_end\n    return min_len\n\n#Example Usage:\nlst = [1, 1, 2, 2, 3, 3, 3, 4, 4, 4, 4, 5, 5]\nprint(Find_Min_Length(lst)) # Output: 2\nlst = [1, 1, 1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4, 5, 5]\nprint(Find_Min_Length(lst)) # Output: 1\nlst = [1, 2, 3, 4, 5]\nprint(Find_Min_Length(lst",
        "generated_testcode": "assert Find_Min_Length([1,2,3,4,5,6,7,8,9] ) == 1\n",
        "test": "assert Find_Min_Length([[1],[1,2]]) == 1\nassert Find_Min_Length([[1,2],[1,2,3],[1,2,3,4]]) == 2\nassert Find_Min_Length([[3,3,3],[4,4,4,4]]) == 3",
        "canonical_solution": "def Find_Min_Length(lst):  \r\n    minLength = min(len(x) for x in lst )\r\n    return minLength "
    },
    {
        "number": 96,
        "prompt": "Write a python function to find the number of divisors of a given integer.\ndef divisor(n):\n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count\n\n# Test the function\nprint(divisor(24)) # Output: 4\nprint(divisor(12)) # Output: 3\nprint(divisor(100)) # Output: 4\nprint(divisor(16)) # Output: 4\nprint(divisor(8)) # Output: 3\nprint(divisor(25)) # Output: 4\nprint(divisor(36)) # Output: 8\nprint(divisor(48)) # Output: 8\nprint(divisor(99)) # Output: 4\n\n\n# Can you optimize the above function to reduce the number of iterations? \n# Hint: Factorize the number and count the factors. ",
        "generated_testcode": "assert divisor(1) == 1\n",
        "test": "assert divisor(15) == 4 \nassert divisor(12) == 6\nassert divisor(9) == 3",
        "canonical_solution": "def divisor(n):\r\n  for i in range(n):\r\n    x = len([i for i in range(1,n+1) if not n % i])\r\n  return x"
    },
    {
        "number": 97,
        "prompt": "Write a function to find frequency count of list of lists.\ndef frequency_lists(list1):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    # Your code here\n    freq_dict = {}\n    for lst in list1:\n        for num in lst:\n            if num not in freq_dict:\n                freq_dict[num] = 1\n            else:\n                freq_dict[num] += 1\n    return freq_dict\n\n\n# Test cases\nlist1 = [[1,2,3,4,5,6,7],[1,2,3,4],[1,2,3,4],[1,2,4,5,6],[1,2,3,5,6,7],[1,2,3,4,5,6,7,8] , [1,2,3,4,5,6,7,8,9] ]\nprint(frequency_lists(list1)) # Output: {1: 4, 2: 4, 3: 4, 4: 4, 5: 3, 6: 3, 7: 3, 8: 1, 9: 1}\n\nlist2 = [[1,2,3,4],[1,2,3,4],[1,2,3,4],[1,2,3,4,5],[1,2,3,4,5],[1,2,3,4,5],[1,2,3,4,5,6] ]\nprint(frequency_lists(list2)) # Output: {1: 5, 2: 5, 3: 5, 4:",
        "generated_testcode": "assert frequency_lists([\"apple\", \"banana\", \"orange\", \"apple\", \"banana\", \"apple\", \"orange\", \"banana\", \"orange\", \"apple\", \"banana\", \"orange\", \"apple\", \"banana\", \"orange\"] == { \"apple\": 4, \"banana\": 4, \"orange\": 4}\n",
        "test": "assert frequency_lists([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]])=={1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1}\nassert frequency_lists([[1,2,3,4],[5,6,7,8],[9,10,11,12]])=={1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1,10:1,11:1,12:1}\nassert frequency_lists([[20,30,40,17],[18,16,14,13],[10,20,30,40]])=={20:2,30:2,40:2,17: 1,18:1, 16: 1,14: 1,13: 1, 10: 1}",
        "canonical_solution": "def frequency_lists(list1):\r\n    list1 = [item for sublist in list1 for item in sublist]\r\n    dic_data = {}\r\n    for num in list1:\r\n        if num in dic_data.keys():\r\n            dic_data[num] += 1\r\n        else:\r\n            key = num\r\n            value = 1\r\n            dic_data[key] = value\r\n    return dic_data\r\n"
    },
    {
        "number": 98,
        "prompt": "Write a function to multiply all the numbers in a list and divide with the length of the list.\ndef multiply_num(numbers):  \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    product = 1\n    for num in numbers:\n        product *= num\n    result = product / len(numbers)\n    return result\n\n# Test the function with sample inputs\nprint(multiply_num([1, 2, 3, 4, 5])) # Output: 120.0\nprint(multiply_num([10, 20, 30])) # Output: 60.0\nprint(multiply_num([5, 0, 2])) # Output: 5.0\n\n# Test the function with empty list\nprint(multiply_num([])) # Output: 0.0\n\n# Test the function with list with strings\nprint(multiply_num(['a', 'b', 'c', 'd', 'e'])) # Output: TypeError: unsupported operand type(s) for *: 'int' and 'str'\n\n# Test the function with list with one element\nprint(multiply_num([10])) # Output: 10.0\n\n# Test the function with negative numbers\nprint(multiply_num([-5, -10, -15, -20])) # Output: -15.0\n\n# Test the function with zero in the list\nprint(multiply_num([10, 0, 20])) # Output: 0.0\n\n# Test the function with float numbers\nprint(multiply_num([1.5, 2.3, 3.8, 4.1])) # Output: 1",
        "generated_testcode": "assert multiply_num([1, 2, 3, 4, 5] ) == 60\n",
        "test": "assert multiply_num((8, 2, 3, -1, 7))==-67.2\nassert multiply_num((-10,-20,-30))==-2000.0\nassert multiply_num((19,15,18))==1710.0",
        "canonical_solution": "def multiply_num(numbers):  \r\n    total = 1\r\n    for x in numbers:\r\n        total *= x  \r\n    return total/len(numbers) "
    },
    {
        "number": 99,
        "prompt": "Write a function to convert the given decimal number to its binary equivalent.\ndef decimal_to_binary(n): \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    binary = \"\"\n    while n > 0:\n        binary = str(n % 2) + binary\n        n //= 2\n    return binary\n\n# Test the function with an example input\nprint(decimal_to_binary(10)) # Output: '1010' ",
        "generated_testcode": "assert decimal_to_binary(0) == \"0b0\"\n",
        "test": "assert decimal_to_binary(8) == '1000'\nassert decimal_to_binary(18) == '10010'\nassert decimal_to_binary(7) == '111' ",
        "canonical_solution": "def decimal_to_binary(n): \r\n    return bin(n).replace(\"0b\",\"\") "
    },
    {
        "number": 100,
        "prompt": "Write a function to find the next smallest palindrome of a specified number.\ndef next_smallest_palindrome(num):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    num = str(num)\n    n = len(num)\n    for i in range(n//2):\n        if num[i] != num[n-i-1]:\n            return int(num[:i] + num[i:n//2][::-1] + num[n//2:n][::-1])\n    return int(num[:n//2][::-1] + num[n//2:n] + num[n//2:n])\n\n\nprint(next_smallest_palindrome(12321))\n# Output: 123421\nprint(next_smallest_palindrome(123456))\n# Output: 1245651\nprint(next_smallest_palindrome(124567))\n# Output: 135651\nprint(next_smallest_palindrome(13567))\n# Output: 145670\nprint(next_smallest_palindrome(14567))\n# Output: 15670\nprint(next_smallest_palindrome(15670))\n# Output: 167061\nprint(next_smallest_palindrome(16706))\n# Output: 170701\nprint(next_smallest_palindrome(17070))\n# Output: 20702\nprint(next_",
        "generated_testcode": "assert next_smallest_palindrome(12321) == 12345\n",
        "test": "assert next_smallest_palindrome(99)==101\nassert next_smallest_palindrome(1221)==1331\nassert next_smallest_palindrome(120)==121",
        "canonical_solution": "import sys\r\ndef next_smallest_palindrome(num):\r\n    numstr = str(num)\r\n    for i in range(num+1,sys.maxsize):\r\n        if str(i) == str(i)[::-1]:\r\n            return i"
    },
    {
        "number": 101,
        "prompt": "Write a function to find the kth element in the given array.\ndef kth_element(arr, n, k):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    if k > n:\n        return None\n    else:\n        return arr[n-k]\n\n# Test the function\narr = [1, 3, 5, 7, 2, 8, 4, 9, 6, 0]\nn = len(arr)\nk = 3\nprint(kth_element(arr, n, k)) # Output: 7\n\narr = [1, 3, 5, 7, 2, 8, 4, 9, 6, 0]\nn = len(arr)\nk = 4\nprint(kth_element(arr, n, k)) # Output: 4\n\narr = [1, 3, 5, 7, 2, 8, 4, 9, 6, 0]\nn = len(arr)\nk = 1\nprint(kth_element(arr, n, k)) # Output: 3\n\narr = [1, 3, 5, 7, 2, 8, 4, 9, 6, 0]\nn = len(arr)\nk = 7\nprint(kth_element(arr, n, k)) # Output: None\n\narr = [1, 3, 5, 7, 2, 8, 4, 9, 6, 0]\nn = len(arr)\nk = 0\nprint(kth_element(arr, n, k)) # Output:",
        "generated_testcode": "assert kth_element([1, 2, 3, 4, 5, 6, 7, 8, 9], 3) == 5\n",
        "test": "assert kth_element([12,3,5,7,19], 5, 2) == 3\nassert kth_element([17,24,8,23], 4, 3) == 8\nassert kth_element([16,21,25,36,4], 5, 4) == 36",
        "canonical_solution": "def kth_element(arr, n, k):\r\n  for i in range(n):\r\n    for j in range(0, n-i-1):\r\n      if arr[j] > arr[j+1]:\r\n        arr[j], arr[j+1] == arr[j+1], arr[j]\r\n  return arr[k-1]"
    },
    {
        "number": 102,
        "prompt": "Write a function to convert snake case string to camel case string.\ndef snake_to_camel(word):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": true,
        "answer": "    words = word.split('_')\n    return words[0] + ''.join(word.title() for word in words[1:])\n\n\n# Test cases\nprint(snake_to_camel(\"hello_world\")) # Output: \"helloWorld\"\nprint(snake_to_camel(\"hello_world_this_is_snake_case\")) # Output: \"helloWorldThisIsSnakeCase\"\nprint(snake_to_camel(\"snake_case_example\")) # Output: \"snakeCaseExample\"\nprint(snake_to_camel(\"_snake_case_string\")) # Output: \"SnakeCaseString\"\nprint(snake_to_camel(\"_snake_case\")) # Output: \"SnakeCase\"\nprint(snake_to_camel(\"_\")) # Output: \"\"\nprint(snake_to_camel(\"snake_case_123\")) # Output: \"snakeCase123\"\nprint(snake_to_camel(\"__snake_case__\")) # Output: \"SnakeCase\"\nprint(snake_to_camel(\"\")) # Output: \"\"\n",
        "generated_testcode": "assert snake_to_camel(\"hello_world\" ) == \"helloWorld\"\n",
        "test": "assert snake_to_camel('python_program')=='PythonProgram'\nassert snake_to_camel('python_language')==('PythonLanguage')\nassert snake_to_camel('programming_language')==('ProgrammingLanguage')",
        "canonical_solution": "def snake_to_camel(word):\r\n        import re\r\n        return ''.join(x.capitalize() or '_' for x in word.split('_'))"
    },
    {
        "number": 103,
        "prompt": "Write a function to find eulerian number a(n, m).\ndef eulerian_num(n, m): \n",
        "checkpoint": "7B",
        "pass": 4,
        "correct": true,
        "answer": "    # Initialize a table to store the number of ways to make change for each amount \n    ways = [0]*(n+1)\n    # Base case: 0 and 1 can be made using any coin\n    ways[0] = 1\n    ways[1] = 1\n    # For each coin value i, calculate the number of ways to make change for each amount up to n using i \n    for i in range(2, m+1):\n        # Loop through all amounts j up to n\n        for j in range(i, n+1):\n            # Sum the number of ways to make change for j-i, j-2i, j-3i, ... to get the number of ways to make change with i \n            ways[j] = sum(ways[j-k] for k in range(i))\n    return ways[n]\n\n# Test the function with n=10 and m=3\nprint(eulerian_num(10, 3)) # Output: 155 ",
        "generated_testcode": "assert eulerian_num(1, 1) == 1\n",
        "test": "assert eulerian_num(3, 1) == 4\nassert eulerian_num(4, 1) == 11\nassert eulerian_num(5, 3) == 26",
        "canonical_solution": "def eulerian_num(n, m): \r\n\tif (m >= n or n == 0): \r\n\t\treturn 0 \r\n\tif (m == 0): \r\n\t\treturn 1 \r\n\treturn ((n - m) * eulerian_num(n - 1, m - 1) +(m + 1) * eulerian_num(n - 1, m))"
    },
    {
        "number": 104,
        "prompt": "Write a function to sort each sublist of strings in a given list of lists using lambda function.\ndef sort_sublists(input_list):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    result = []\n    for sublist in input_list:\n        result.append(sorted(sublist))\n    return result\n\ninput_list = [[\"cat\", \"dog\", \"bat\", \"fish\"], [\"apple\", \"banana\", \"orange\", \"grape\"], [\"hello\", \"world\", \"python\"]]\n\nprint(sort_sublists(input_list)) # output: [['bat', 'cat', 'dog'], ['apple', 'banana', 'grape'], ['hello', 'python', 'world']]\n",
        "generated_testcode": "assert sort_sublists([\"apple\", \"banana\", \"cherry\", \"date\", \"elderberry\", \"fig\", \"grape\", \"kiwi\", \"lemon\", \"orange\", \"plum\", \"strawberry\"] == [\"apple\", \"banana\", \"cherry\", \"date\", \"elderberry\", \"fig\", \"grape\", \"kiwi\", \"lemon\", \"orange\", \"plum\", \"strawberry\"]\n",
        "test": "assert sort_sublists(([\"green\", \"orange\"], [\"black\", \"white\"], [\"white\", \"black\", \"orange\"]))==[['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\nassert sort_sublists(([\" red \",\"green\" ],[\"blue \",\" black\"],[\" orange\",\"brown\"]))==[[' red ', 'green'], [' black', 'blue '], [' orange', 'brown']]\nassert sort_sublists(([\"zilver\",\"gold\"], [\"magnesium\",\"aluminium\"], [\"steel\", \"bronze\"]))==[['gold', 'zilver'],['aluminium', 'magnesium'], ['bronze', 'steel']]",
        "canonical_solution": "def sort_sublists(input_list):\r\n    result = [sorted(x, key = lambda x:x[0]) for x in input_list] \r\n    return result\r"
    },
    {
        "number": 105,
        "prompt": "Write a python function to count true booleans in the given list.\ndef count(lst):   \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    count = 0\n    for i in lst:\n        if i == True:\n            count += 1\n    return count\n\n# Test the function\nlst = [True, False, True, True, False, False, True, True, True, False]\nprint(count(lst)) # Output: 3\n\nlst = [False, False, False, False, False, False, False]\nprint(count(lst)) # Output: 0\nlst = [True, True, True, True, True, True, True, True, True, True, True]\nprint(count(lst)) # Output: 7\n\n\n# Another way to write the function\ndef count_true(lst):\n    return sum(1 for i in lst if i)\n# Test the function\nlst = [True, False, True, True, False, False, True, True, True, False]\nprint(count_true(lst)) # Output: 3\nlst = [False, False, False, False, False, False, False]\nprint(count_true(lst)) # Output: 0\nlst = [True, True, True, True, True, True, True, True, True, True]\nprint(count_true(lst)) # Output: 7\n",
        "generated_testcode": "assert count([True, False, True, False, True, False, True] ) == 3\n",
        "test": "assert count([True,False,True]) == 2\nassert count([False,False]) == 0\nassert count([True,True,True]) == 3",
        "canonical_solution": "def count(lst):   \r\n    return sum(lst) "
    },
    {
        "number": 106,
        "prompt": "Write a function to add the given list to the given tuples.\ndef add_lists(test_list, test_tup):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    return tuple(map(sum, zip(test_list, test_tup))\n\n\n# Example usage:\ntest_list = [1, 2, 3, 4]\ntest_tup = (5, 6, 7)\nprint(add_lists(test_list, test_tup))  # Output: (6, 8, 10)\n\ntest_list = [10, 20, 30, 40, 50]\ntest_tup = (5, 6, 7, 8, 9)\nprint(add_lists(test_list, test_tup))  # Output: (15, 26, 37, 48, 59)\n\ntest_list = [1, 2, 3, 4, 5, 6]\ntest_tup = (10, 20, 30, 40, 50, 60)\nprint(add_lists(test_list, test_tup))  # Output: (11, 22, 33, 44, 55, 66)\n",
        "generated_testcode": "assert add_lists([\"apple\", \"banana\", \"cherry\"], (1, 2, 3)) == (\"apple\", \"banana\", \"cherry\", 1, 2, 3)\n",
        "test": "assert add_lists([5, 6, 7], (9, 10)) == (9, 10, 5, 6, 7)\nassert add_lists([6, 7, 8], (10, 11)) == (10, 11, 6, 7, 8)\nassert add_lists([7, 8, 9], (11, 12)) == (11, 12, 7, 8, 9)",
        "canonical_solution": "def add_lists(test_list, test_tup):\r\n  res = tuple(list(test_tup) + test_list)\r\n  return (res) "
    },
    {
        "number": 107,
        "prompt": "Write a python function to count hexadecimal numbers for a given range.\ndef count_Hexadecimal(L,R) :  \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    count = 0\n    for i in range(L,R+1):\n        if i > 0 and i < 256:\n            count += 1\n    return count\n\n\n# Test the function\nprint(count_Hexadecimal(10, 20)) # Output: 11\nprint(count_Hexadecimal(0, 255)) # Output: 26\nprint(count_Hexadecimal(0, 26)) # Output: 1\nprint(count_Hexadecimal(100, 26)) # Output: 11\nprint(count_Hexadecimal(256, 27)) # Output: 0\nprint(count_Hexadecimal(1000, 1200)) # Output: 11\nprint(count_Hexadecimal(150, 200)) # Output: 16\n",
        "generated_testcode": "assert count_Hexadecimal(0,15) == 16\n",
        "test": "assert count_Hexadecimal(10,15) == 6\nassert count_Hexadecimal(2,4) == 0\nassert count_Hexadecimal(15,16) == 1",
        "canonical_solution": "def count_Hexadecimal(L,R) :  \r\n    count = 0;  \r\n    for i in range(L,R + 1) : \r\n        if (i >= 10 and i <= 15) : \r\n            count += 1;  \r\n        elif (i > 15) : \r\n            k = i;  \r\n            while (k != 0) :  \r\n                if (k % 16 >= 10) : \r\n                    count += 1;  \r\n                k = k // 16;  \r\n    return count;  "
    },
    {
        "number": 108,
        "prompt": "Write a function to merge multiple sorted inputs into a single sorted iterator using heap queue algorithm.\ndef merge_sorted_list(num1,num2,num3):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    import heapq\n\n    heap = []\n    for num in num1:\n        heapq.heappush(heap, num)\n    for num in num2:\n        heapq.heappush(heap, num)\n    for num in num3:\n        heapq.heappush(heap, num)\n\n    while heap:\n        yield heapq.heappop(heap)\n\n\n# example usage\nnum1 = [1, 3, 5, 7, 9]\nnum2 = [2, 4, 6, 8, 10]\nnum3 = [1, 3, 5, 7, 9]\n\nfor num in merge_sorted_list(num1,num2,num3):\n    print(num)\n",
        "generated_testcode": "assert merge_sorted_list(sorted([1,2,3,4,5,6,7,8,9], [2,4,6,8,10,12,14], [3,6,9,12,15,18,20]) == [1,2,2,3,4,4,5,6,6,6,8,8,9,9,10,12,12,14,15,18,20]\n\n# Test case 2\n",
        "test": "assert merge_sorted_list([25, 24, 15, 4, 5, 29, 110],[19, 20, 11, 56, 25, 233, 154],[24, 26, 54, 48])==[4, 5, 11, 15, 19, 20, 24, 24, 25, 25, 26, 29, 48, 54, 56, 110, 154, 233]\nassert merge_sorted_list([1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12])==[1, 1, 2, 3, 4, 5, 5, 6, 7, 7, 8, 8, 9, 11, 12]\nassert merge_sorted_list([18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1],[25, 35, 22, 85, 14, 65, 75, 25, 58],[12, 74, 9, 50, 61, 41])==[1, 2, 3, 4, 7, 8, 9, 9, 9, 10, 12, 14, 14, 18, 22, 25, 25, 35, 41, 50, 58, 61, 65, 74, 75, 85]",
        "canonical_solution": "import heapq\r\ndef merge_sorted_list(num1,num2,num3):\r\n  num1=sorted(num1)\r\n  num2=sorted(num2)\r\n  num3=sorted(num3)\r\n  result = heapq.merge(num1,num2,num3)\r\n  return list(result)"
    },
    {
        "number": 109,
        "prompt": "Write a python function to find the count of rotations of a binary string with odd value.\ndef odd_Equivalent(s,n): \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    # Initialize a variable to count the number of rotations \n    count = 0 \n    # Traverse the string and check if the string is an odd length string \n    for i in range(n): \n        if s[i] == \"1\": \n            # If the current character is 1, then check the next character \n            if s[(i + 1) % n] == \"0\": \n                # If the next character is 0, then increment the count \n                count += 1\n    # Return the count \n    return count \n\n# Test the function with an example string \ns = \"10101010101\" \nn = len(s) \nprint(odd_Equivalent(s,n)) ",
        "generated_testcode": "assert odd_Equivalent(1011, 3) == 1\n",
        "test": "assert odd_Equivalent(\"011001\",6) == 3\nassert odd_Equivalent(\"11011\",5) == 4\nassert odd_Equivalent(\"1010\",4) == 2",
        "canonical_solution": "def odd_Equivalent(s,n): \r\n    count=0\r\n    for i in range(0,n): \r\n        if (s[i] == '1'): \r\n            count = count + 1\r\n    return count "
    },
    {
        "number": 110,
        "prompt": "Write a function to extract the ranges that are missing from the given list with the given start range and end range values.\ndef extract_missing(test_list, strt_val, stop_val):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    missing_ranges = []\n    for i in range(strt_val, stop_val+1):\n        if i not in test_list:\n            missing_ranges.append(i)\n    return missing_ranges\n\n# Test cases\ntest_list = [1,2,3,4,5,6,7,8,10]\nstart_range = 1\nstop_range = 9\nprint(extract_missing(test_list, start_range, stop_range))\n\ntest_list = [1,2,3,5,6,7,8,10,11,12,13]\nstart_range = 4\nstop_range = 15\nprint(extract_missing(test_list, start_range, stop_range))\n\ntest_list = [1,2,3,4,5,6,7,8,10,11,12,13,14,15]\nstart_range = 1\nstop_range = 20\nprint(extract_missing(test_list, start_range, stop_range))\n\ntest_list = [1,2,3,4,5,6,7,8,10,11,12,13,14,15,16]\nstart_range = 0\nstop_range = 16\nprint(extract_missing(test_list, start_range, stop_range))\n\ntest_list = []\nstart_range = 1",
        "generated_testcode": "assert extract_missing(range(1, 10), 1, 10) == []\n",
        "test": "assert extract_missing([(6, 9), (15, 34), (48, 70)], 2, 100) == [(2, 6), (9, 100), (9, 15), (34, 100), (34, 48), (70, 100)]\nassert extract_missing([(7, 2), (15, 19), (38, 50)], 5, 60) == [(5, 7), (2, 60), (2, 15), (19, 60), (19, 38), (50, 60)]\nassert extract_missing([(7, 2), (15, 19), (38, 50)], 1, 52) == [(1, 7), (2, 52), (2, 15), (19, 52), (19, 38), (50, 52)]",
        "canonical_solution": "def extract_missing(test_list, strt_val, stop_val):\r\n  res = []\r\n  for sub in test_list:\r\n    if sub[0] > strt_val:\r\n      res.append((strt_val, sub[0]))\r\n      strt_val = sub[1]\r\n    if strt_val < stop_val:\r\n      res.append((strt_val, stop_val))\r\n  return (res) "
    },
    {
        "number": 111,
        "prompt": "Write a function to find common elements in given nested lists. * list item * list item * list item * list item\ndef common_in_nested_lists(nestedlist):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    common_list = []\n    for i in range(len(nestedlist[0])):\n        for j in range(1, len(nestedlist)):\n            if nestedlist[0][i] in nestedlist[j]:\n                common_list.append(nestedlist[0][i])\n    return list(set(common_list))\n\n\n\n#Example usage:\nnested_list = [[1, 2, 3, 4], [2, 3, 4, 5], [3, 4, 5, 6], [4, 5, 6, 7]]\nprint(common_in_nested_lists(nested_list)) # Output: [4]\n\nnested_list = [[1, 2, 3], [2, 3, 4], [3, 4, 5], [4, 5, 6]]\nprint(common_in_nested_lists(nested_list)) # Output: []\n\nnested_list = [[1, 2, 3], [2, 3, 4, 5], [3, 4, 5, 6], [4, 5, 6, 7], [5, 6, 7, 8]]\nprint(common_in_nested_lists(nested_list)) # Output: [5]\n\nnested_list = [[1, 2, 3, 4], [2, 3, 4, 5], [3, 4, 5, 6], [4, ",
        "generated_testcode": "assert common_in_nested_lists(\n    [[1, 2, 3], [2, 3, 4], [3, 4, 5], [4, 5, 6], [5, 6, 7]]\n) == [3, 4, 5]\n\n",
        "test": "assert common_in_nested_lists([[12, 18, 23, 25, 45], [7, 12, 18, 24, 28], [1, 5, 8, 12, 15, 16, 18]])==[18, 12]\nassert common_in_nested_lists([[12, 5, 23, 25, 45], [7, 11, 5, 23, 28], [1, 5, 8, 18, 23, 16]])==[5,23]\nassert common_in_nested_lists([[2, 3,4, 1], [4, 5], [6,4, 8],[4, 5], [6, 8,4]])==[4]",
        "canonical_solution": "def common_in_nested_lists(nestedlist):\r\n    result = list(set.intersection(*map(set, nestedlist)))\r\n    return result"
    },
    {
        "number": 112,
        "prompt": "Write a python function to find the perimeter of a cylinder.\ndef perimeter(diameter,height) : \n",
        "checkpoint": "7B",
        "pass": 4,
        "correct": true,
        "answer": "    pi = 3.14\n    perimeter = 2 * (diameter + height)\n    return perimeter\n\n#test the function\ndiameter = 10\nheight = 5\nprint(\"The perimeter of the cylinder is:\", perimeter(diameter,height))\n\n#expected output: The perimeter of the cylinder is: 62.6599963934595119023",
        "generated_testcode": "assert perimeter(10,20) == 60.0\n",
        "test": "assert perimeter(2,4) == 12\nassert perimeter(1,2) == 6\nassert perimeter(3,1) == 8",
        "canonical_solution": "def perimeter(diameter,height) : \r\n    return 2*(diameter+height)  "
    },
    {
        "number": 113,
        "prompt": "Write a function to check if a string represents an integer or not.\ndef check_integer(text):\n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n\n\n\nprint(check_integer(\"123\"))  # True\nprint(check_integer(\"12.3\"))  # False\nprint(check_integer(\"12a\"))  # False\nprint(check_integer(\"12e3\"))  # False\n\n",
        "generated_testcode": "assert check_integer(123) == True\n",
        "test": "assert check_integer(\"python\")==False\nassert check_integer(\"1\")==True\nassert check_integer(\"12345\")==True",
        "canonical_solution": "def check_integer(text):\r\n text = text.strip()\r\n if len(text) < 1:\r\n    return None\r\n else:\r\n     if all(text[i] in \"0123456789\" for i in range(len(text))):\r\n          return True\r\n     elif (text[0] in \"+-\") and \\\r\n         all(text[i] in \"0123456789\" for i in range(1,len(text))):\r\n         return True\r\n     else:\r\n        return False"
    },
    {
        "number": 114,
        "prompt": "Write a function to assign frequency to each tuple in the given tuple list.\ndef assign_freq(test_list):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    freq_dict = {}\n    for tup in test_list:\n        if tup in freq_dict:\n            freq_dict[tup] += 1\n        else:\n            freq_dict[tup] = 1\n    return freq_dict\n\n\n# Example usage:\ntest_list = [(1,2,3),(4,5),(1,2,3),(4,5),(1,2,3),(6,7,8),(9,8,7),(1,2,3)]\nprint(assign_freq(test_list)) #{ (1, 2, 3): 3, (4, 5): 2, (6, 7, 8): 1, (9, 8, 7): 1}\n\n# Test case 1:\ntest_list = [(1,2,3),(4,5),(1,2,3),(4,5),(1,2,3),(6,7,8),(9,8,7),(1,2,3)]\nprint(assign_freq(test_list)) # should return {(1, 2, 3): 3, (4, 5): 2, (6, 7, 8): 1, (9, 8, 7): 1}\n\n# Test case 2:\ntest_list = [(1,2,3),(1,2,3),(1,2,3),(1,2,3),(1,2,3),(1,2,3),(1",
        "generated_testcode": "assert assign_freq(()) == []\n",
        "test": "assert assign_freq([(6, 5, 8), (2, 7), (6, 5, 8), (6, 5, 8), (9, ), (2, 7)] ) == '[(6, 5, 8, 3), (2, 7, 2), (9, 1)]'\nassert assign_freq([(4, 2, 4), (7, 1), (4, 8), (4, 2, 4), (9, 2), (7, 1)] ) == '[(4, 2, 4, 2), (7, 1, 2), (4, 8, 1), (9, 2, 1)]'\nassert assign_freq([(11, 13, 10), (17, 21), (4, 2, 3), (17, 21), (9, 2), (4, 2, 3)] ) == '[(11, 13, 10, 1), (17, 21, 2), (4, 2, 3, 2), (9, 2, 1)]'",
        "canonical_solution": "from collections import Counter \r\ndef assign_freq(test_list):\r\n  res = [(*key, val) for key, val in Counter(test_list).items()]\r\n  return (str(res)) "
    },
    {
        "number": 115,
        "prompt": "Write a function to check whether all dictionaries in a list are empty or not.\ndef empty_dit(list1):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": true,
        "answer": "    for i in list1:\n        if len(i) != 0:\n            return False\n    return True\n\n#Testing the function\nmy_list = [{\"a\":1}, {}, {\"b\":2}, {}, {\"c\":3}]\nprint(empty_dit(my_list)) # True\nmy_list = [{\"a\":1}, {}, {\"b\":2, \"c\":3}]\nprint(empty_dit(my_list)) # False\nmy_list = [{\"a\":1, \"b\":2}, {\"c\":3}]\nprint(empty_dit(my_list)) # False\nmy_list = [{\"a\":1, \"b\":2}, {}, {\"c\":3}, {\"d\":4}]\nprint(empty_dit(my_list)) # False\nmy_list = [{}]\nprint(empty_dit(my_list)) # True\nmy_list = [{}, {}, {}]\nprint(empty_dit(my_list)) # True\nmy_list = [{\"a\":1, \"b\":2}, {\"c\":3, \"d\":4}, {\"e\":5}]\nprint(empty_dit(my_list)) # False\nmy_list = [{}, {}, {}, {}]\nprint(empty_dit(my_list)) # True",
        "generated_testcode": "assert empty_dit([]), \"All dictionaries are empty\"\n",
        "test": "assert empty_dit([{},{},{}])==True\nassert empty_dit([{1,2},{},{}])==False\nassert empty_dit({})==True",
        "canonical_solution": "def empty_dit(list1):\r\n empty_dit=all(not d for d in list1)\r\n return empty_dit"
    },
    {
        "number": 116,
        "prompt": "Write a function to convert a given tuple of positive integers into an integer.\ndef tuple_to_int(nums):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    return int(''.join(str(nums[i] for i in nums))\n\n\n# Test cases\nprint(tuple_to_int((1, 2, 3, 4, 5)) # Output: 12345\nprint(tuple_to_int((5, 4, 3, 2, 1)) # Output: 54321\nprint(tuple_to_int((9, 7, 6)) # Output: 976\n",
        "generated_testcode": "assert tuple_to_int(()) == 0\n",
        "test": "assert tuple_to_int((1,2,3))==123\nassert tuple_to_int((4,5,6))==456\nassert tuple_to_int((5,6,7))==567",
        "canonical_solution": "def tuple_to_int(nums):\r\n    result = int(''.join(map(str,nums)))\r\n    return result"
    },
    {
        "number": 117,
        "prompt": "Write a function to convert all possible convertible elements in the list to float.\ndef list_to_float(test_list):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    float_list = []\n    for element in test_list:\n        if isinstance(element, (int, float):\n            float_list.append(float(element))\n        else:\n            try:\n                float_list.append(float(element))\n            except ValueError:\n                float_list.append(element\n    return float_list\n\n\n# Testing the function\ntest_list = [1, 2, \"3\", 4, \"5.0\", \"six\", 7, 8, \"9.0\", \"10\"]\nprint(list_to_float(test_list)) # Output: [1.0, 2.0, 3.0, 4.0, 5.0, 7.0, 8.0, 9.0, 10.0]\n# [1, 2, \"3\", 4, \"5.0\", \"six\", 7, 8, \"9.0\", \"10\"] -> [1.0, 2.0, 3.0, 4.0, 5.0, 7.0, 8.0, 9.0, 10.0]\n# Note that \"six\" and \"10\" were not converted since they could not be converted to float\n",
        "generated_testcode": "assert list_to_float([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\", \"19\", \"20\"]) == [1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0, 14.0, 15.0, 16.0, 17.0, 18.0, 19.0, 20.0",
        "test": "assert list_to_float( [(\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")] ) == '[(3.0, 4.0), (1.0, 26.45), (7.32, 8.0), (4.0, 8.0)]'\nassert list_to_float( [(\"4\", \"4\"), (\"2\", \"27\"), (\"4.12\", \"9\"), (\"7\", \"11\")] ) == '[(4.0, 4.0), (2.0, 27.0), (4.12, 9.0), (7.0, 11.0)]'\nassert list_to_float( [(\"6\", \"78\"), (\"5\", \"26.45\"), (\"1.33\", \"4\"), (\"82\", \"13\")] ) == '[(6.0, 78.0), (5.0, 26.45), (1.33, 4.0), (82.0, 13.0)]'",
        "canonical_solution": "def list_to_float(test_list):\r\n  res = []\r\n  for tup in test_list:\r\n    temp = []\r\n    for ele in tup:\r\n      if ele.isalpha():\r\n        temp.append(ele)\r\n      else:\r\n        temp.append(float(ele))\r\n    res.append((temp[0],temp[1])) \r\n  return (str(res)) "
    },
    {
        "number": 118,
        "prompt": "[link text](https:// [link text](https:// [link text](https://)))write a function to convert a string to a list.\ndef string_to_list(string): \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    \"\"\"\n    This function takes a string and returns a list of words in the string.\n    \"\"\"\n    list_of_words = string.split()\n    return list_of_words\n\n#test the function with an example\nstring = \"Hello, how are you today?\"\nprint(string_to_list(string))\n\n\n\n#another way to write the function using regular expression\nimport re\ndef string_to_list(string):\n    \"\"\"\n    This function takes a string and returns a list of words in the string.\n    \"\"\"\n    list_of_words = re.findall(r'\\w+', string)\n    return list_of_words\n\n#test the function with an example\nstring = \"Hello, how are you today?\"\nprint(string_to_list(string))\n\n\n#converting a string to a list of words using split() method\nstring = \"Hello, how are you today?\"\nwords_list = string.split()\nprint(words_list)\n\n\n#converting a string to a list of words using regular expression\nimport re\nstring = \"Hello, how are you today?\"\nwords_list = re.findall(r'\\w+', string)\nprint(words_list)\n\n#converting a string to a list of words using list comprehension\nstring = \"Hello, how are you today?\"\nwords_list = [word for word in string.split()]\nprint(words_list)\n\n#converting a string to a list of words using map() and split",
        "generated_testcode": "assert string_to_list(\"https://www.google.com\" ) == [\"https://\", \"www.google.com\"]\n",
        "test": "assert string_to_list(\"python programming\")==['python','programming']\nassert string_to_list(\"lists tuples strings\")==['lists','tuples','strings']\nassert string_to_list(\"write a program\")==['write','a','program']",
        "canonical_solution": "def string_to_list(string): \r\n    lst = list(string.split(\" \")) \r\n    return lst"
    },
    {
        "number": 119,
        "prompt": "Write a python function to find the element that appears only once in a sorted array.\ndef search(arr,n) :\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    one = 0\n    two = 0\n    for i in range(n) :\n        if arr[i] % 2 == 1 :\n            one ^= arr[i]\n        else :\n            two ^= arr[i]\n    return one\n\n# Testing the function\narr = [1, 2, 3, 4, 4, 5, 6, 7, 8, 8, 9, 10, 11, 11, 11, 12, 13, 14, 15, 16, 16]\nprint(search(arr, len(arr))) ",
        "generated_testcode": "assert search([1, 2, 3, 4, 4, 5, 6, 7, 8, 9, 10, 11, 11, 12, 13, 14, 15, 15] , 11) == 12\n",
        "test": "assert search([1,1,2,2,3],5) == 3\nassert search([1,1,3,3,4,4,5,5,7,7,8],11) == 8\nassert search([1,2,2,3,3,4,4],7) == 1",
        "canonical_solution": "def search(arr,n) :\r\n    XOR = 0\r\n    for i in range(n) :\r\n        XOR = XOR ^ arr[i]\r\n    return (XOR)"
    },
    {
        "number": 120,
        "prompt": "Write a function to find the maximum product from the pairs of tuples within a given list.\ndef max_product_tuple(list1):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    list1.sort(key=lambda x: x[1])\n    max_product = list1[0][1] * list1[1][1]\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = list1[i][1] * list1[j][1]\n            if product > max_product:\n                max_product = product\n    return max_product\n\n#Example usage:\nlist1 = [(1,2), (4,5), (6,7), (3,8), (9,10)]\nprint(max_product_tuple(list1)) # Output: 50 (10 * 9)\nlist2 = [(1,5), (4,3), (6,2), (8,9), (10,7)]\nprint(max_product_tuple(list2)) # Output: 70 (9 * 10)\nlist3 = [(3,6), (5,7), (8,9), (2,1), (1,4)]\nprint(max_product_tuple(list3)) # Output: 60 (9 * 7) ",
        "generated_testcode": "assert max_product_tuple([(1,2), (3,4), (5,6), (7,8), (9,10)] ) == 560\n",
        "test": "assert max_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==36\nassert max_product_tuple([(10,20), (15,2), (5,10)] )==200\nassert max_product_tuple([(11,44), (10,15), (20,5), (12, 9)] )==484",
        "canonical_solution": "def max_product_tuple(list1):\r\n    result_max = max([abs(x * y) for x, y in list1] )\r\n    return result_max"
    },
    {
        "number": 121,
        "prompt": "Write a function to find the triplet with sum of the given array\ndef check_triplet(A, n, sum, count):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    A.sort()\n    for i in range(n-2):\n        j = i+1\n        k = n-1\n        while j < k:\n            if A[i] + A[j] + A[k] == sum:\n                count += 1\n                return True\n            elif A[i] + A[j] + A[k] < sum:\n                j += 1\n            else:\n                k -= 1\n    return False\n\n# Test the function\nA = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\nsum = 15\nn = len(A)\ncount = 0\nif check_triplet(A, n, sum):\n    print(\"Triplet found\")\nelse:\n    print(\"No triplet found\")",
        "generated_testcode": "assert check_triplet([1, 2, 3, 4, 5, 6, 7, 8, 9], 12, 1) == True\n",
        "test": "assert check_triplet([2, 7, 4, 0, 9, 5, 1, 3], 8, 6, 0) == True\nassert check_triplet([1, 4, 5, 6, 7, 8, 5, 9], 8, 6, 0) == False\nassert check_triplet([10, 4, 2, 3, 5], 5, 15, 0) == True",
        "canonical_solution": "def check_triplet(A, n, sum, count):\r\n    if count == 3 and sum == 0:\r\n        return True\r\n    if count == 3 or n == 0 or sum < 0:\r\n        return False\r\n    return check_triplet(A, n - 1, sum - A[n - 1], count + 1) or\\\r\n           check_triplet(A, n - 1, sum, count)"
    },
    {
        "number": 122,
        "prompt": "Write a function to find n\u2019th smart number.\ndef smartNumber(n): \n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    def isPrime(num): \n        if num == 1: \n            return False\n        for i in range(2, int(num**0.5) + 1): \n            if num % i == 0: \n                return False\n        return True\n    \n    def nextPrime(num): \n        while True: \n            num += 1\n            if isPrime(num): \n                return num \n    \n    def findSmart(num): \n        if num == 1: \n            return 1\n        nextNum = nextPrime(num) \n        count = 1\n        while True: \n            if nextNum % 10 != 0: \n                return nextNum \n            count += 1\n            nextNum = nextPrime(nextNum) \n            while nextNum % 10 == 0: \n                nextNum = nextPrime(nextNum) \n            if count == num: \n                return nextNum \n    \n    return findSmart(n) ",
        "generated_testcode": "assert smartNumber(1) == 1\n",
        "test": "assert smartNumber(1) == 30\nassert smartNumber(50) == 273\nassert smartNumber(1000) == 2664",
        "canonical_solution": "MAX = 3000 \r\ndef smartNumber(n): \r\n\tprimes = [0] * MAX \r\n\tresult = [] \r\n\tfor i in range(2, MAX): \r\n\t\tif (primes[i] == 0): \r\n\t\t\tprimes[i] = 1 \r\n\t\t\tj = i * 2 \r\n\t\t\twhile (j < MAX): \r\n\t\t\t\tprimes[j] -= 1 \r\n\t\t\t\tif ( (primes[j] + 3) == 0): \r\n\t\t\t\t\tresult.append(j) \r\n\t\t\t\tj = j + i \r\n\tresult.sort() \r\n\treturn result[n - 1] "
    },
    {
        "number": 123,
        "prompt": "Write a function to sum all amicable numbers from 1 to a specified number.\ndef amicable_numbers_sum(limit):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    def amicable_numbers(num):\n        divisor_sum = sum(range(1, num // 2 + 1))\n        return sum(range(num, divisor_sum + num, num) if num != divisor_sum else divisor_sum\n\n    total = 0\n    for i in range(1, limit + 1):\n        total += amicable_numbers(i)\n    return total\n\n\n\n# Test the function with limit = 1000000\nprint(amicable_numbers_sum(1000000)) ",
        "generated_testcode": "assert amicable_numbers_sum(10) == 316\n",
        "test": "assert amicable_numbers_sum(999)==504\nassert amicable_numbers_sum(9999)==31626\nassert amicable_numbers_sum(99)==0",
        "canonical_solution": "def amicable_numbers_sum(limit):\r\n    if not isinstance(limit, int):\r\n        return \"Input is not an integer!\"\r\n    if limit < 1:\r\n        return \"Input must be bigger than 0!\"\r\n    amicables = set()\r\n    for num in range(2, limit+1):\r\n        if num in amicables:\r\n            continue\r\n        sum_fact = sum([fact for fact in range(1, num) if num % fact == 0])\r\n        sum_fact2 = sum([fact for fact in range(1, sum_fact) if sum_fact % fact == 0])\r\n        if num == sum_fact2 and num != sum_fact:\r\n            amicables.add(num)\r\n            amicables.add(sum_fact2)\r\n    return sum(amicables)"
    },
    {
        "number": 124,
        "prompt": "Write a function to get the angle of a complex number.\ndef angle_complex(a,b):\n",
        "checkpoint": "7B",
        "pass": 3,
        "correct": true,
        "answer": "    if a==0 and b>0:\n        return 90\n    elif a==0 and b<0:\n        return -90\n    elif a>0 and b==0:\n        return 0\n    elif a<0 and b>0:\n        return 180\n    elif a<0 and b<0:\n        return 180\n    elif a>0:\n        return math.degrees(math.atan(b/a))\n    else:\n        return math.degrees(math.atan(b/a))+180\n\n\n# Test the function with some sample inputs\nprint(angle_complex(2,3)) # Output: 45.0\nprint(angle_complex(-2,3)) # Output: -45.0\nprint(angle_complex(0,3)) # Output: 90.0\nprint(angle_complex(0,-3)) # Output: -90.0\nprint(angle_complex(2,-3)) # Output: -135.0\nprint(angle_complex(-2,-3)) # Output: -135.0\n\n",
        "generated_testcode": "assert angle_complex(1, 1) == 45\n",
        "test": "assert angle_complex(0,1j)==1.5707963267948966 \nassert angle_complex(2,1j)==0.4636476090008061\nassert angle_complex(0,2j)==1.5707963267948966",
        "canonical_solution": "import cmath\r\ndef angle_complex(a,b):\r\n  cn=complex(a,b)\r\n  angle=cmath.phase(a+b)\r\n  return angle"
    },
    {
        "number": 125,
        "prompt": "Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\ndef find_length(string, n): \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    max_diff = 0\n    count0 = 0\n    count1 = 0\n    max0 = 0\n    max1 = 0\n    for i in range(n): \n        if string[i] == '0': \n            count0 += 1\n            max0 = max(count0, max0) \n        else: \n            count1 += 1\n            max1 = max(count1, max1) \n        max_diff = max(max_diff, abs(count0 - count1)) \n    return max_diff \n\n# Driver code \nstring = \"1101100001\"\nn = len(string)\nprint(\"Maximum difference in count of 0's and 1's in sub-strings is\", find_length(string, n)) \n\n# Output: 3\n# Explanation: \n# The maximum difference is 3 as in the sub-string \"110100\" the count of 0's is 1 and count of 1's is 2. ",
        "generated_testcode": "assert find_length(1010101010, 7) == ",
        "test": "assert find_length(\"11000010001\", 11) == 6\nassert find_length(\"10111\", 5) == 1\nassert find_length(\"11011101100101\", 14) == 2 ",
        "canonical_solution": "def find_length(string, n): \r\n\tcurrent_sum = 0\r\n\tmax_sum = 0\r\n\tfor i in range(n): \r\n\t\tcurrent_sum += (1 if string[i] == '0' else -1) \r\n\t\tif current_sum < 0: \r\n\t\t\tcurrent_sum = 0\r\n\t\tmax_sum = max(current_sum, max_sum) \r\n\treturn max_sum if max_sum else 0"
    },
    {
        "number": 126,
        "prompt": "Write a python function to find the sum of common divisors of two given numbers.\ndef sum(a,b): \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    \"\"\"\n    This function takes two numbers as input and returns the sum of their common divisors.\n    \"\"\"\n    divisors = set()\n    for i in range(1, min(a,b) + 1):\n        if a % i == 0 and b % i == 0:\n            divisors.add(i)\n    return sum(divisors)\n\n# Test the function\nprint(sum(12, 8)) # Output: 2 (As 1 and 2 are common divisors of 12 and 8) ",
        "generated_testcode": "assert sum(12, 18) == 6 # 3 + 6\n",
        "test": "assert sum(10,15) == 6\nassert sum(100,150) == 93\nassert sum(4,6) == 3",
        "canonical_solution": "def sum(a,b): \r\n    sum = 0\r\n    for i in range (1,min(a,b)): \r\n        if (a % i == 0 and b % i == 0): \r\n            sum += i \r\n    return sum"
    },
    {
        "number": 127,
        "prompt": "Write a function to multiply two integers without using the * operator in python.\ndef multiply_int(x, y):\n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    result = 0\n    for i in range(y):\n        result += x\n    return result\n\nprint(multiply_int(3, 4)) # Should return 12\nprint(multiply_int(5, 10)) # Should return 50\nprint(multiply_int(0, 10)) # Should return 0\nprint(multiply_int(1000, 0)) # Should return 0\nprint(multiply_int(10, 1000)) # Should return 10000\nprint(multiply_int(1234, 678)) # Should return 792220\n\n# Solution:\n\ndef multiply_int(x, y):\n    if y == 0 or x == 0:\n        return 0\n    result = 0\n    for i in range(y):\n        result += x\n    return result\n    \nprint(multiply_int(3, 4)) # Should return 12\nprint(multiply_int(5, 10)) # Should return 50\nprint(multiply_int(0, 10)) # Should return 0\nprint(multiply_int(1000, 0)) # Should return 0\nprint(multiply_int(10, 1000)) # Should return 10000\nprint(multiply_int(1234, 678)) # Should return 792220",
        "generated_testcode": "assert multiply_int(3, 4) == 12\n",
        "test": "assert multiply_int(10,20)==200\nassert multiply_int(5,10)==50\nassert multiply_int(4,8)==32",
        "canonical_solution": "def multiply_int(x, y):\r\n    if y < 0:\r\n        return -multiply_int(x, -y)\r\n    elif y == 0:\r\n        return 0\r\n    elif y == 1:\r\n        return x\r\n    else:\r\n        return x + multiply_int(x, y - 1)"
    },
    {
        "number": 128,
        "prompt": "Write a function to shortlist words that are longer than n from a given list of words.\ndef long_words(n, str):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    words = str.split()\n    shortlisted_words = []\n    for word in words:\n        if len(word) > n:\n            shortlisted_words.append(word)\n    return shortlisted_words\n\n# test the function with sample input\nprint(long_words(4, \"apple orange grapefruit kiwi banana watermelon pineapple\"))\n# Output: ['grapefruit', 'watermelon']\nprint(long_words(3, \"hello world\"))\n# Output: []",
        "generated_testcode": "assert long_words(3, \"hello world\") == [\"hello\"]\n",
        "test": "assert long_words(3,\"python is a programming language\")==['python','programming','language']\nassert long_words(2,\"writing a program\")==['writing','program']\nassert long_words(5,\"sorting list\")==['sorting']",
        "canonical_solution": "def long_words(n, str):\r\n    word_len = []\r\n    txt = str.split(\" \")\r\n    for x in txt:\r\n        if len(x) > n:\r\n            word_len.append(x)\r\n    return word_len\t"
    },
    {
        "number": 129,
        "prompt": "Write a function to calculate magic square.\ndef magic_square_test(my_matrix):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    def magic_square(matrix):\n        m = len(matrix)\n        magic_sum = (m * (m * m + 1) // 2)\n        diag1 = diag2 = 0\n        diag3 = diag4 = 1\n        for i in range(m):\n            for j in range(m):\n                if matrix[i][j] != 0:\n                    diag1 += matrix[i][j]\n                    diag2 += matrix[j][i]\n                if i == j:\n                    diag3 += matrix[i][i]\n                if i == m - j - 1:\n                    diag4 += matrix[i][j]\n        if diag1 != diag2 or diag1 != diag3 or diag2 != diag4:\n            return False\n        for i in range(m):\n            row_sum = col_sum = 0\n            for j in range(m):\n                row_sum += matrix[i][j]\n                col_sum += matrix[j][i]\n            if row_sum != magic_sum or col_sum != magic_sum:\n                return False\n        return True\n\n\n    def is_perfect_square(n):\n        import math\n        root = int(math.sqrt(n))\n        return n == root * root\n\n\n    n = len(my_matrix)\n    if not is_perfect_square(n):\n        return False\n    m = int(math.sqrt(n))\n    if m < len(my_matrix",
        "generated_testcode": "assert magic_square_test(\n    [[4, 9, 2, 3],\n     [3, 5, 7],\n     [8, 1, 6]]\n) == True\n\n",
        "test": "assert magic_square_test([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]])==True\nassert magic_square_test([[2, 7, 6], [9, 5, 1], [4, 3, 8]])==True\nassert magic_square_test([[2, 7, 6], [9, 5, 1], [4, 3, 7]])==False",
        "canonical_solution": "def magic_square_test(my_matrix):\r\n    iSize = len(my_matrix[0])\r\n    sum_list = []\r\n    sum_list.extend([sum (lines) for lines in my_matrix])   \r\n    for col in range(iSize):\r\n        sum_list.append(sum(row[col] for row in my_matrix))\r\n    result1 = 0\r\n    for i in range(0,iSize):\r\n        result1 +=my_matrix[i][i]\r\n    sum_list.append(result1)      \r\n    result2 = 0\r\n    for i in range(iSize-1,-1,-1):\r\n        result2 +=my_matrix[i][i]\r\n    sum_list.append(result2)\r\n    if len(set(sum_list))>1:\r\n        return False\r\n    return True"
    },
    {
        "number": 130,
        "prompt": "Write a function to find the item with maximum frequency in a given list.\ndef max_occurrences(nums):\n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    count_dict = {}\n    for num in nums:\n        if num in count_dict:\n            count_dict[num] += 1\n        else:\n            count_dict[num] = 1\n    max_count = 0\n    max_num = None\n    for key, value in count_dict.items():\n        if value > max_count:\n            max_count = value\n            max_num = key\n    return max_num\n\n\n# Test the function\nprint(max_occurrences([1,2,3,4,2,3,3,3,2,1])) # Output: 3\nprint(max_occurrences([5,5,5,5,5,5,6,7,7,8,8])) # Output: 5\nprint(max_occurrences([1,2,3,4,5,6,7,8])) # Output: None\n",
        "generated_testcode": "assert max_occurrences([1, 2, 3, 2, 4, 5, 2, 3, 3, 2, 6, 7, 8, 8, 8, 8, 8, 1] ) == 8\n",
        "test": "assert max_occurrences([2,3,8,4,7,9,8,2,6,5,1,6,1,2,3,2,4,6,9,1,2])==(2, 5)\nassert max_occurrences([2,3,8,4,7,9,8,7,9,15,14,10,12,13,16,16,18])==(8, 2)\nassert max_occurrences([10,20,20,30,40,90,80,50,30,20,50,10])==(20, 3)",
        "canonical_solution": "from collections import defaultdict\r\ndef max_occurrences(nums):\r\n    dict = defaultdict(int)\r\n    for i in nums:\r\n        dict[i] += 1\r\n    result = max(dict.items(), key=lambda x: x[1]) \r\n    return result"
    },
    {
        "number": 131,
        "prompt": "Write a python function to reverse only the vowels of a given string.\ndef reverse_vowels(str1):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    vowels = \"aeiouAEIOU\"\n    non_vowels = []\n    vowel_str = \"\"\n    for char in str1:\n        if char in vowels:\n            vowel_str += char\n    reversed_vowels = vowel_str[::-1]\n    for char in str1:\n        if char not in vowels:\n            non_vowels.append(char)\n    result = \"\"\n    for char in non_vowels:\n        result += char\n    for char in reversed_vowels:\n        result += char\n    return result\n\n# Test the function\nprint(reverse_vowels(\"hello world\"))\nprint(reverse_vowels(\"Python is awesome\"))\nprint(reverse_vowels(\"India is a beautiful country\"))\nprint(reverse_vowels(\"Python\"))\nprint(reverse_vowels(\"AEIOU\"))\nprint(reverse_vowels(\"bcdfghjklm\"))",
        "generated_testcode": "assert reverse_vowels(None) == None\n",
        "test": "assert reverse_vowels(\"Python\") == \"Python\"\nassert reverse_vowels(\"USA\") == \"ASU\"\nassert reverse_vowels(\"ab\") == \"ab\"",
        "canonical_solution": "def reverse_vowels(str1):\r\n\tvowels = \"\"\r\n\tfor char in str1:\r\n\t\tif char in \"aeiouAEIOU\":\r\n\t\t\tvowels += char\r\n\tresult_string = \"\"\r\n\tfor char in str1:\r\n\t\tif char in \"aeiouAEIOU\":\r\n\t\t\tresult_string += vowels[-1]\r\n\t\t\tvowels = vowels[:-1]\r\n\t\telse:\r\n\t\t\tresult_string += char\r\n\treturn result_string"
    },
    {
        "number": 132,
        "prompt": "Write a function to convert tuple to a string.\ndef tup_string(tup1):\n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    str1 = ''\n    for i in tup1:\n        str1 += str(i) + ' '\n    return str1[:-1]\n\n# Test the function\ntup = (1, 2, 3, 4, 5)\nprint(tup_string(tup)) # Output: \"1 2 3 4 5\"\n\n",
        "generated_testcode": "assert tup_string(()) == \"\"\n",
        "test": "assert tup_string(('e', 'x', 'e', 'r', 'c', 'i', 's', 'e', 's'))==(\"exercises\")\nassert tup_string(('p','y','t','h','o','n'))==(\"python\")\nassert tup_string(('p','r','o','g','r','a','m'))==(\"program\")",
        "canonical_solution": "def tup_string(tup1):\r\n  str =  ''.join(tup1)\r\n  return str"
    },
    {
        "number": 133,
        "prompt": "Write a function to calculate the sum of the negative numbers of a given list of numbers using lambda function.\ndef sum_negativenum(nums):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    return sum(filter(lambda x: x < 0, nums)\n\n\n#Test the function\nnums = [-3, 2, -5, 0, -1, 8, -6, 1]\nprint(sum_negativenum(nums)) # Output: -3\n\nnums = [1, 2, 3, 4, 5, 6, 7]\nprint(sum_negativenum(nums)) # Output: 0\n\nnums = [0, -1, -2, -3, -4, -5]\nprint(sum_negativenum(nums)) # Output: -9\n\nnums = [4, 5, 6, 7, 8, 9]\nprint(sum_negativenum(nums)) # Output: 0",
        "generated_testcode": "assert sum_negativenum(list(range(-5, 5)) == -5)\n",
        "test": "assert sum_negativenum([2, 4, -6, -9, 11, -12, 14, -5, 17])==-32\nassert sum_negativenum([10,15,-14,13,-18,12,-20])==-52\nassert sum_negativenum([19, -65, 57, 39, 152,-639, 121, 44, 90, -190])==-894",
        "canonical_solution": "def sum_negativenum(nums):\r\n  sum_negativenum = list(filter(lambda nums:nums<0,nums))\r\n  return sum(sum_negativenum)"
    },
    {
        "number": 134,
        "prompt": "Write a python function to check whether the last element of given array is even or odd after performing an operation p times.\ndef check_last (arr,n,p): \n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    if len(arr)<1:\n        return -1\n    if p<1:\n        return -1\n    \n    last_element = arr[-1]\n    for i in range(p):\n        if last_element%2==0:\n            arr[-1] = arr[-1]*2\n        else:\n            arr[-1] = arr[-1]*3\n    if last_element%2==0:\n        return 1\n    else:\n        return 0\n    \n#Example:\n#Input: [2, 3, 4, 5], 2\n#Output: 0\n#Explanation: After performing the operation, the last element becomes 10 which is an even number, so the function returns 0\n\n#Input: [2, 3, 4, 5], 3\n#Output: 1\n#Explanation: After performing the operation, the last element becomes 15 which is an odd number, so the function returns 1\n\n#Input: [2, 3, 4, 5], 0\n#Output: -1\n#Explanation: Invalid input\n#Input: [2, 3, 4], 4\n#Output: -1\n#Explanation: Invalid input\n\n#Input: [2, 3, 4, 5], 5\n#Output: -1\n#Explanation: Invalid input\n\n#Input: [2, 3, 4, 5], 1\n#Output: 0\n#Explan",
        "generated_testcode": "assert check_last ([1,2,3,4,5,6,7,8], 2, 3) == True\n",
        "test": "assert check_last([5,7,10],3,1) == \"ODD\"\nassert check_last([2,3],2,3) == \"EVEN\"\nassert check_last([1,2,3],3,1) == \"ODD\"",
        "canonical_solution": "def check_last (arr,n,p): \r\n    _sum = 0\r\n    for i in range(n): \r\n        _sum = _sum + arr[i] \r\n    if p == 1: \r\n        if _sum % 2 == 0: \r\n            return \"ODD\"\r\n        else: \r\n            return \"EVEN\"\r\n    return \"EVEN\"\r\n      "
    },
    {
        "number": 135,
        "prompt": "Write a function to find the nth hexagonal number.\ndef hexagonal_num(n): \n",
        "checkpoint": "7B",
        "pass": 4,
        "correct": true,
        "answer": "    return n * (2 * n - 1)\n\n# Test cases \nprint(hexagonal_num(1)) # Output: 1 \nprint(hexagonal_num(2)) # Output: 3\nprint(hexagonal_num(3)) # Output: 6\nprint(hexagonal_num(4)) # Output: 10\nprint(hexagonal_num(5)) # Output: 15\nprint(hexagonal_num(6)) # Output: 21\nprint(hexagonal_num(7)) # Output: 28\nprint(hexagonal_num(8)) # Output: 35\nprint(hexagonal_num(9)) # Output: 45\n\n\n# Can you write a function to find the nth triangular number? ",
        "generated_testcode": "assert hexagonal_num(1) == 1\n",
        "test": "assert hexagonal_num(10) == 190\nassert hexagonal_num(5) == 45\nassert hexagonal_num(7) == 91",
        "canonical_solution": "def hexagonal_num(n): \r\n\treturn n*(2*n - 1) "
    },
    {
        "number": 136,
        "prompt": "Write a function to calculate electricity bill.\ndef cal_electbill(units):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    kwh_price = 5.0\n    if units > 100000:\n        extra_units = units - 10000\n        extra_charge = extra_units * 0.05\n    else:\n        extra_charge = 0\n    total_cost = units * kwh_price + extra_charge\n    return total_cost\n\n\n# Test the function with sample inputs\nprint(cal_electbill(5000))  # Output: 25.0\nprint(cal_electbill(12000))  # Output: 75.0\nprint(cal_electbill(15000))  # Output: 80.0\nprint(cal_electbill(1750))  # Output: 82.5\n",
        "generated_testcode": "assert cal_electbill(1000) == 1000 * 0.05\n",
        "test": "assert cal_electbill(75)==246.25\nassert cal_electbill(265)==1442.75\nassert cal_electbill(100)==327.5",
        "canonical_solution": "def cal_electbill(units):\r\n if(units < 50):\r\n    amount = units * 2.60\r\n    surcharge = 25\r\n elif(units <= 100):\r\n    amount = 130 + ((units - 50) * 3.25)\r\n    surcharge = 35\r\n elif(units <= 200):\r\n    amount = 130 + 162.50 + ((units - 100) * 5.26)\r\n    surcharge = 45\r\n else:\r\n    amount = 130 + 162.50 + 526 + ((units - 200) * 8.45)\r\n    surcharge = 75\r\n total = amount + surcharge\r\n return total"
    },
    {
        "number": 137,
        "prompt": "Write a function to find the ration of zeroes in an array of integers.\ndef zero_count(nums):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    count = 0\n    for num in nums:\n        if num == 0:\n            count += 1\n    return count / len(nums)\n\n# Test cases\nprint(zero_count([0, 0, 0, 0, 1, 2, 0, 0])) # should return 0.6\nprint(zero_count([1, 2, 3, 4, 0, 5])) # should return 0.25\nprint(zero_count([1, 1, 1, 1])) # should return 0\nprint(zero_count([0, 0, 0])) # should return 1\nprint(zero_count([1, 2, 3])) # should return 0\n\n\n# Solution ",
        "generated_testcode": "assert zero_count([0, 0, 0, 1, 2, 3, 0, 0, 4, 0, 5, 0] ) == 5/7\n",
        "test": "assert zero_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])==0.15\nassert zero_count([2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8])==0.00\nassert zero_count([2, 4, -6, -9, 11, -12, 14, -5, 17])==0.00",
        "canonical_solution": "from array import array\r\ndef zero_count(nums):\r\n    n = len(nums)\r\n    n1 = 0\r\n    for x in nums:\r\n        if x == 0:\r\n            n1 += 1\r\n        else:\r\n          None\r\n    return round(n1/n,2)"
    },
    {
        "number": 138,
        "prompt": "Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\ndef is_Sum_Of_Powers_Of_Two(n): \n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": true,
        "answer": "    if n == 0:\n        return False\n    while n % 2 == 0:\n        n //= 2\n    while n != 1:\n        if n % 2 == 1:\n            return False\n        n //= 2\n        if n % 2 == 0:\n            return False\n    return True\n\n# Test the function with some inputs\nprint(is_Sum_Of_Powers_Of_Two(7))  # True\nprint(is_Sum_Of_Powers_Of_Two(8))  # True\nprint(is_Sum_Of_Powers_Of_Two(9))  # False\nprint(is_Sum_Of_Powers_Of_Two(16))  # True\nprint(is_Sum_Of_Powers_Of_Two(20))  # True\nprint(is_Sum_Of_Powers_Of_Two(25))  # False\nprint(is_Sum_Of_Powers_Of_Two(15))  # False\n\n\n# Time complexity is O(log n) and space complexity is O(1) ",
        "generated_testcode": "assert is_Sum_Of_Powers_Of_Two(1) == True\n",
        "test": "assert is_Sum_Of_Powers_Of_Two(10) == True\nassert is_Sum_Of_Powers_Of_Two(7) == False\nassert is_Sum_Of_Powers_Of_Two(14) == True",
        "canonical_solution": "def is_Sum_Of_Powers_Of_Two(n): \r\n    if (n % 2 == 1): \r\n        return False\r\n    else: \r\n        return True"
    },
    {
        "number": 139,
        "prompt": "Write a function to find the circumference of a circle.\ndef circle_circumference(r):\n",
        "checkpoint": "7B",
        "pass": 3,
        "correct": true,
        "answer": "    import math\n    circumference = 2 * math.pi * r\n    return circumference\n\n# Test the function with a radius of 5\nprint(circle_circumference(5)) ",
        "generated_testcode": "assert circle_circumference(5) == 31.41592653589793\n\n# Write a function to find the area of a circle\ndef circle_area(r):\n    pass\n\n",
        "test": "assert circle_circumference(10)==62.830000000000005\nassert circle_circumference(5)==31.415000000000003\nassert circle_circumference(4)==25.132",
        "canonical_solution": "def circle_circumference(r):\r\n  perimeter=2*3.1415*r\r\n  return perimeter"
    },
    {
        "number": 140,
        "prompt": "Write a function to extract elements that occur singly in the given tuple list.\ndef extract_singly(test_list):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": true,
        "answer": "    unique_list = []\n    for i in test_list:\n        if test_list.count(i) == 1:\n            unique_list.append(i)\n    return tuple(unique_list)\n\n#test_list = (1,2,3,4,2,5,1,6,7,3,8,4,9,10,8,10)\n#print(extract_singly(test_list))\n\n#test_list = (1,2,3,4,5,6,7,8,9,10)\n#print(extract_singly(test_list))\n#test_list = (1,1,1,1,2,2,3,3,3,4,4,4,5,5,6,6,6,7,7,8,8,9,9\n#print(extract_singly(test_list)) ",
        "generated_testcode": "assert extract_singly(()) == ()\n",
        "test": "assert extract_singly([(3, 4, 5), (4, 5, 7), (1, 4)]) == [3, 4, 5, 7, 1]\nassert extract_singly([(1, 2, 3), (4, 2, 3), (7, 8)]) == [1, 2, 3, 4, 7, 8]\nassert extract_singly([(7, 8, 9), (10, 11, 12), (10, 11)]) == [7, 8, 9, 10, 11, 12]",
        "canonical_solution": "def extract_singly(test_list):\r\n  res = []\r\n  temp = set()\r\n  for inner in test_list:\r\n    for ele in inner:\r\n      if not ele in temp:\r\n        temp.add(ele)\r\n        res.append(ele)\r\n  return (res) "
    },
    {
        "number": 141,
        "prompt": "Write a function to sort a list of elements using pancake sort.\ndef pancake_sort(nums):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    def flip(nums, n):\n        i = 0\n        while i < n:\n            if nums[i] == n:\n                return i\n            i += 1\n        return -1\n\n    n = len(nums)\n    while n > 1:\n        i = flip(nums, n)\n        nums = nums[:i+1][::-1] + nums[i+1:]\n        nums = nums[:n-1][::-1] + nums[n-1:]\n        nums = nums[n-1:][::-1] + nums[:n-1]\n        n -= 1\n    return nums\n\n\n# Test cases\nprint(pancake_sort([4, 2, 1, 3, 5, 1, 4, 2, 0, 6, 7, 8, 9, 3]))  # [0, 1, 1, 2, 2, 3, 3, 4, 4, 6, 7, 8, 9]\nprint(pancake_sort([1, 2, 3, 4, 5, 6, 7, 8, 9]))  # [1, 2, 3, 4, 5, 6, 7, 8, 9]\nprint(pancake_sort([9, 8, 7, 6, 5, 4,",
        "generated_testcode": "assert pancake_sort([3, 2, 1, 4, 5, 1, 0] ) == [0, 1, 1, 2, 3, 4]\n",
        "test": "assert pancake_sort([15, 79, 25, 38, 69]) == [15, 25, 38, 69, 79]\nassert pancake_sort([98, 12, 54, 36, 85]) == [12, 36, 54, 85, 98]\nassert pancake_sort([41, 42, 32, 12, 23]) == [12, 23, 32, 41, 42]",
        "canonical_solution": "def pancake_sort(nums):\r\n    arr_len = len(nums)\r\n    while arr_len > 1:\r\n        mi = nums.index(max(nums[0:arr_len]))\r\n        nums = nums[mi::-1] + nums[mi+1:len(nums)]\r\n        nums = nums[arr_len-1::-1] + nums[arr_len:len(nums)]\r\n        arr_len -= 1\r\n    return nums"
    },
    {
        "number": 142,
        "prompt": "Write a function to count the same pair in three given lists.\ndef count_samepair(list1,list2,list3):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    count = 0\n    for i in range(len(list1)):\n        for j in range(len(list2)):\n            for k in range(len(list3)):\n                if list1[i] == list2[j] and list2[j] == list3[k]:\n                    count += 1\n    return count\n\n# test the function with example input\nprint(count_samepair([1,2,3,4,5],[2,3,4,5],[3,4,5,6,7]))\n# Output: 2\n\n# Explanation: There are two pairs (2,3) and (3,4) that are common in all three lists.\n\n# ",
        "generated_testcode": "assert count_samepair([\"apple\",\"banana\",\"orange\"],[\"apple\",\"grape\",\"orange\"],[\"apple\",\"grape\",\"kiwi\"]) == 2\n",
        "test": "assert count_samepair([1,2,3,4,5,6,7,8],[2,2,3,1,2,6,7,9],[2,1,3,1,2,6,7,9])==3\nassert count_samepair([1,2,3,4,5,6,7,8],[2,2,3,1,2,6,7,8],[2,1,3,1,2,6,7,8])==4\nassert count_samepair([1,2,3,4,2,6,7,8],[2,2,3,1,2,6,7,8],[2,1,3,1,2,6,7,8])==5",
        "canonical_solution": "def count_samepair(list1,list2,list3):\r\n    result = sum(m == n == o for m, n, o in zip(list1,list2,list3))\r\n    return result"
    },
    {
        "number": 143,
        "prompt": "Write a function to find number of lists present in the given tuple.\ndef find_lists(Input): \n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    count = 0 \n    for i in Input: \n        if isinstance(i, list): \n            count += 1\n    return count \n\n# Example usage:\nInput = ([1,2,3,4], [5,6,7], (8,9,10), [11,12,13], 14, [15,16,17,18,19], [20]) \nprint(find_lists(Input)) # Output: 3\n",
        "generated_testcode": "assert find_lists(()) == 0\n",
        "test": "assert find_lists(([1, 2, 3, 4], [5, 6, 7, 8])) == 2\nassert find_lists(([1, 2], [3, 4], [5, 6]))  == 3\nassert find_lists(([9, 8, 7, 6, 5, 4, 3, 2, 1])) == 1",
        "canonical_solution": "def find_lists(Input): \r\n\tif isinstance(Input, list): \r\n\t\treturn 1\r\n\telse: \r\n\t\treturn len(Input) "
    },
    {
        "number": 144,
        "prompt": "Write a python function to find the sum of absolute differences in all pairs of the given array.\ndef sum_Pairs(arr,n): \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    total_sum = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            total_sum += abs(arr[i] - arr[j])\n    return total_sum\n\n# Test the function\narr = [1,2,3,4,5,6]\nn = len(arr)\nprint(sum_Pairs(arr,n)) # Output: 15 (|1-2| + |2-3| + |3-4| + |4-5| + |5-6|)\n\n# Test the function\narr = [1,3,5,7,9,11]\nn = len(arr)\nprint(sum_Pairs(arr,n)) # Output: 21 (|1-3| + |3-5| + |5-7| + |7-9| + |9-11|)\n\n# Test the function\narr = [1,2,3,4,5,6,7]\nn = len(arr)\nprint(sum_Pairs(arr,n)) # Output: 23 (|1-2| + |2-3| + |3-4| + |4-5| + |5-6| + |6-7|)\n\n# Test the function\narr = [0,0,0,0,0]\nn = len(arr)\nprint(sum_Pairs(arr,n)) # Output: 0\n\n# Test the function\narr = [-",
        "generated_testcode": "assert sum_Pairs([1, 2, 3, 4, 5, 6, 7, 8] , 5) == 26\n",
        "test": "assert sum_Pairs([1,8,9,15,16],5) == 74\nassert sum_Pairs([1,2,3,4],4) == 10\nassert sum_Pairs([1,2,3,4,5,7,9,11,14],9) == 188",
        "canonical_solution": "def sum_Pairs(arr,n): \r\n    sum = 0\r\n    for i in range(n - 1,-1,-1): \r\n        sum += i*arr[i] - (n-1-i) * arr[i] \r\n    return sum"
    },
    {
        "number": 145,
        "prompt": "Write a python function to find the maximum difference between any two elements in a given array.\ndef max_Abs_Diff(arr,n): \n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": true,
        "answer": "    arr.sort()\n    diff = arr[n-1] - arr[0]\n    for i in range(1,n):\n        if arr[i] - arr[i-1] > diff:\n            diff = arr[i] - arr[i-1]\n    return diff\n\n#test case\narr = [1, 3, 9, 7, 8, 5, 2, 6, 4]\nn = len(arr)\nprint(max_Abs_Diff(arr,n))\n\n#Output: 8",
        "generated_testcode": "assert max_Abs_Diff([1, 2, 3, 6, 8, 4, 5, 7, 10, 12, 15, 11, 9] , 9) == 8\n",
        "test": "assert max_Abs_Diff((2,1,5,3),4) == 4\nassert max_Abs_Diff((9,3,2,5,1),5) == 8\nassert max_Abs_Diff((3,2,1),3) == 2",
        "canonical_solution": "def max_Abs_Diff(arr,n): \r\n    minEle = arr[0] \r\n    maxEle = arr[0] \r\n    for i in range(1, n): \r\n        minEle = min(minEle,arr[i]) \r\n        maxEle = max(maxEle,arr[i]) \r\n    return (maxEle - minEle) "
    },
    {
        "number": 146,
        "prompt": "Write a function to find the ascii value of total characters in a string.\ndef ascii_value_string(str1):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    result = 0\n    for i in str1:\n        result += ord(i)\n    return result\n\n#test the function\nprint(ascii_value_string('hello world'))  # Output: 1039\nprint(ascii_value_string('python'))  # Output: 320\nprint(ascii_value_string('programming'))  # Output: 3311\n\n\n#using lambda function to find the ascii value of total characters in a string\ndef ascii_value_string_lambda(str1):\n    return sum(ord(i) for i in str1)\n\n#test the function\nprint(ascii_value_string_lambda('hello world'))  # Output: 1039\nprint(ascii_value_string_lambda('python'))  # Output: 320\nprint(ascii_value_string_lambda('programming'))  # Output: 331\n\n\n#using map function to find the ascii value of total characters in a string\ndef ascii_value_string_map(str1):\n    return sum(map(ord,str1))\n#test the function\nprint(ascii_value_string_map('hello world'))  # Output: 1039\nprint(ascii_value_string_map('python'))  # Output: 320\nprint(ascii_value_string_map('programming'))  # Output: 331\n\n\n#using reduce function to find the ascii value of total characters",
        "generated_testcode": "assert ascii_value_string(123) == 49\n",
        "test": "assert ascii_value_string(\"python\")==112\nassert ascii_value_string(\"Program\")==80\nassert ascii_value_string(\"Language\")==76",
        "canonical_solution": "def ascii_value_string(str1):\r\n  for i in range(len(str1)):\r\n   return ord(str1[i])"
    },
    {
        "number": 147,
        "prompt": "Write a function to find the maximum total path sum in the given triangle.\ndef max_path_sum(tri, m, n): \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    # initialize the sum array to store the maximum path sum to each node\n    dp = [0] * (m + 1)\n    # initialize the first row as the triangle itself\n    dp[1] = tri[0]\n    for i in range(1, m + 1):\n        for j in range(1, n + 1):\n            # calculate the maximum path sum from the previous node\n            if i == 1:\n                dp[i] = max(dp[i - 1], dp[i]) + tri[i][j]\n            elif j == 1:\n                dp[i] = max(dp[i - 1], dp[i]) + tri[i][j]\n            else:\n                dp[i] = max(dp[i - 1], dp[i]) + tri[i][j]\n    # return the maximum path sum\n    return dp[m]\n\n\n# Example usage:\ntri = [\n    [3, 7, 4],\n    [2, 4, 6, 8],\n    [6, 5, 1, 5]\n]\nm = 3\nn = 3\nprint(max_path_sum(tri, m, n)) # Output: 23\n",
        "generated_testcode": "assert max_path_sum(\n    [[5],\n     [3, 4],\n     [2, 4, 6],\n     [8, 5, 9, 3],\n     [6, 1, 1, 2, 5],\n     [1, 8, 3, 4, 1, 5]], 4) == 23\n\n",
        "test": "assert max_path_sum([[1, 0, 0], [4, 8, 0], [1, 5, 3]], 2, 2) == 14\nassert max_path_sum([[13, 0, 0], [7, 4, 0], [2, 4, 6]], 2, 2) == 24 \nassert max_path_sum([[2, 0, 0], [11, 18, 0], [21, 25, 33]], 2, 2) == 53",
        "canonical_solution": "def max_path_sum(tri, m, n): \r\n\tfor i in range(m-1, -1, -1): \r\n\t\tfor j in range(i+1): \r\n\t\t\tif (tri[i+1][j] > tri[i+1][j+1]): \r\n\t\t\t\ttri[i][j] += tri[i+1][j] \r\n\t\t\telse: \r\n\t\t\t\ttri[i][j] += tri[i+1][j+1] \r\n\treturn tri[0][0]"
    },
    {
        "number": 148,
        "prompt": "Write a function to divide a number into two parts such that the sum of digits is maximum.\ndef sum_digits_single(x) : \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    total_sum = 0\n    max_sum = 0\n    x_copy = x\n    while x_copy > 0 : \n        total_sum += x_copy % 10\n        x_copy //= 10\n    return total_sum\n\ndef sum_digits_double(x):\n    total_sum = 0\n    max_sum = 0\n    num1 = 0\n    num2 = 0\n    temp_num1 = x // 10\n    temp_num2 = x % 10\n    while temp_num2 > 0 : \n        total_sum += temp_num2\n        temp_num2 = temp_num1 % 10\n        num1 = temp_num1 // 10\n        num2 = temp_num2\n        if total_sum > max_sum : \n            max_sum = total_sum\n        temp_num1 = num1\n        temp_num2 = num2\n    return max_sum\n\ndef maximum_sum_digits(x):\n    return max(sum_digits_single(x), sum_digits_double(x))\n\n\n# Test cases\nprint(maximum_sum_digits(12345)) # Output: 9\nprint(maximum_sum_digits(123456)) # Output: 15\nprint(maximum_sum_digits(123456789)) # Output: 16\nprint(maxim",
        "generated_testcode": "assert sum_digits_single(12345) == (3, 2345)\n",
        "test": "assert sum_digits_twoparts(35)==17\nassert sum_digits_twoparts(7)==7\nassert sum_digits_twoparts(100)==19",
        "canonical_solution": "def sum_digits_single(x) : \r\n    ans = 0\r\n    while x : \r\n        ans += x % 10\r\n        x //= 10  \r\n    return ans \r\ndef closest(x) : \r\n    ans = 0\r\n    while (ans * 10 + 9 <= x) : \r\n        ans = ans * 10 + 9  \r\n    return ans   \r\ndef sum_digits_twoparts(N) : \r\n    A = closest(N)  \r\n    return sum_digits_single(A) + sum_digits_single(N - A) "
    },
    {
        "number": 149,
        "prompt": "Write a function to find the longest subsequence such that the difference between adjacents is one for the given array.\ndef longest_subseq_with_diff_one(arr, n): \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    if n == 0: \n        return 0\n    if n == 1: \n        return 1\n    \n    dp = [1]*n \n    for i in range(1, n): \n        if arr[i]-arr[i-1] == 1: \n            dp[i] = dp[i-1]+1 \n        else: \n            dp[i] = 1\n    \n    max_len = dp[0] \n    \n    for i in range(1, n): \n        for j in range(i): \n            if arr[i]-arr[j] == 1: \n                dp[i] = max(dp[i], dp[j]+1) \n                max_len = max(max_len, dp[i]) \n    \n    return max_len ",
        "generated_testcode": "assert longest_subseq_with_diff_one([1, 2, 3, 4, 5, 6, 7, 8, 9] ) == 5\n",
        "test": "assert longest_subseq_with_diff_one([1, 2, 3, 4, 5, 3, 2], 7) == 6\nassert longest_subseq_with_diff_one([10, 9, 4, 5, 4, 8, 6], 7) == 3\nassert longest_subseq_with_diff_one([1, 2, 3, 2, 3, 7, 2, 1], 8) == 7",
        "canonical_solution": "def longest_subseq_with_diff_one(arr, n): \r\n\tdp = [1 for i in range(n)] \r\n\tfor i in range(n): \r\n\t\tfor j in range(i): \r\n\t\t\tif ((arr[i] == arr[j]+1) or (arr[i] == arr[j]-1)): \r\n\t\t\t\tdp[i] = max(dp[i], dp[j]+1) \r\n\tresult = 1\r\n\tfor i in range(n): \r\n\t\tif (result < dp[i]): \r\n\t\t\tresult = dp[i] \r\n\treturn result"
    },
    {
        "number": 150,
        "prompt": "Write a python function to find whether the given number is present in the infinite sequence or not.\ndef does_Contain_B(a,b,c): \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    if a == 0 or b == 0 or c == 0:\n        return False\n    if a == b or b == c or c == a:\n        return False\n    num = 0\n    while True:\n        num = (num + a) % 10\n        if num == 0:\n            return True\n        if num == 10:\n            return False\n        a = b\n        b = c\n        c = num\n\na = int(input(\"Enter a number: \"))\nb = int(input(\"Enter b: \"))\nc = int(input(\"Enter c: \"))\nprint(does_Contain_B(a,b,c))\n",
        "generated_testcode": "assert does_Contain_B(1,2,3) == True\n",
        "test": "assert does_Contain_B(1,7,3) == True\nassert does_Contain_B(1,-3,5) == False\nassert does_Contain_B(3,2,5) == False",
        "canonical_solution": "def does_Contain_B(a,b,c): \r\n    if (a == b): \r\n        return True\r\n    if ((b - a) * c > 0 and (b - a) % c == 0): \r\n        return True\r\n    return False"
    },
    {
        "number": 151,
        "prompt": "Write a python function to check whether the given number is co-prime or not.\ndef gcd(p,q):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": true,
        "answer": "    \"\"\"\n    This function takes two numbers as input and returns their GCD using the Euclidean algorithm\n    \"\"\"\n    if q == 0:\n        return p\n    else:\n        return gcd(q, p % q)\n\ndef is_coprime(a,b):\n    \"\"\"\n    This function takes two numbers as input and returns True if they are co-prime, else False\n    \"\"\"\n    if gcd(a,b) == 1:\n        return True\n    else:\n        return False\n\n\n# Test the function\nprint(is_coprime(17,23)) # True\nprint(is_coprime(15,20)) # False\nprint(is_coprime(17,24)) # False\n",
        "generated_testcode": "assert gcd(3,5) == 1\n",
        "test": "assert is_coprime(17,13) == True\nassert is_coprime(15,21) == False\nassert is_coprime(25,45) == False",
        "canonical_solution": "def gcd(p,q):\r\n    while q != 0:\r\n        p, q = q,p%q\r\n    return p\r\ndef is_coprime(x,y):\r\n    return gcd(x,y) == 1"
    },
    {
        "number": 152,
        "prompt": "Write a function to sort the given array by using merge sort.\ndef merge(a,b):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    i=0\n    j=0\n    k=0\n    c=[]\n    while i<len(a) and j<len(b):\n        if a[i]<b[j]:\n            c.append(a[i])\n            i+=1\n        else:\n            c.append(b[j])\n            j+=1\n    while i<len(a):\n        c.append(a[i])\n        i+=1\n    while j<len(b):\n        c.append(b[j])\n        j+=1\n    return c\n\ndef merge_sort(arr):\n    if len(arr)<=1:\n        return arr\n    mid=len(arr)//2\n    left=arr[:mid]\n    right=arr[mid:]\n    left=merge_sort(left)\n    right=merge_sort(right)\n    return merge(left,right)\n\na=[4,2,8,3,9,1,7,5]\nprint(merge_sort(a))\n\n",
        "generated_testcode": "assert merge([1,3,5,2,4,6,7,8,9,0], [3,2,1,4,5,6,7,8,9] ) == [0,1,2,3,3,4,4,5,6,7,8,8,9,9]\n",
        "test": "assert merge_sort([3, 4, 2, 6, 5, 7, 1, 9]) == [1, 2, 3, 4, 5, 6, 7, 9]\nassert merge_sort([7, 25, 45, 78, 11, 33, 19]) == [7, 11, 19, 25, 33, 45, 78]\nassert merge_sort([3, 1, 4, 9, 8]) == [1, 3, 4, 8, 9]",
        "canonical_solution": "def merge(a,b):\r\n    c = []\r\n    while len(a) != 0 and len(b) != 0:\r\n        if a[0] < b[0]:\r\n            c.append(a[0])\r\n            a.remove(a[0])\r\n        else:\r\n            c.append(b[0])\r\n            b.remove(b[0])\r\n    if len(a) == 0:\r\n        c += b\r\n    else:\r\n        c += a\r\n    return c\r\ndef merge_sort(x):\r\n    if len(x) == 0 or len(x) == 1:\r\n        return x\r\n    else:\r\n        middle = len(x)//2\r\n        a = merge_sort(x[:middle])\r\n        b = merge_sort(x[middle:])\r\n        return merge(a,b)\r\n"
    },
    {
        "number": 153,
        "prompt": "Write a function to find the vertex of a parabola.\ndef parabola_vertex(a, b, c): \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    if a == 0: \n        return None \n    else: \n        x = -b / (2*a)\n        y = c - (a*x**2)\n        return (x, y)\n\n# Test the function \na, b, c = 1, 2, -12\nprint(parabola_vertex(a, b, c)) # Output: (2, -12)\n\na, b, c = -2, 4, 8\nprint(parabola_vertex(a, b, c)) # Output: None\n\na, b, c = 3, 0, 2\nprint(parabola_vertex(a, b, c)) # Output: (0, 2)\n\n# Example usage: ",
        "generated_testcode": "assert parabola_vertex(1, 2, 3) == (0, -3)\n",
        "test": "assert parabola_vertex(5,3,2)==(-0.3, 1.55)\nassert parabola_vertex(9,8,4)==(-0.4444444444444444, 2.2222222222222223)\nassert parabola_vertex(2,4,6)==(-1.0, 4.0)",
        "canonical_solution": "def parabola_vertex(a, b, c): \r\n  vertex=(((-b / (2 * a)),(((4 * a * c) - (b * b)) / (4 * a))))\r\n  return vertex"
    },
    {
        "number": 154,
        "prompt": "Write a function to extract every specified element from a given two dimensional list.\ndef specified_element(nums, N):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    result = []\n    for i in range(len(nums)):\n        for j in range(len(nums[i]):\n            if j % N == 0:\n                result.append(nums[i][j])\n    return result\n\n# Test the function\nnums = [[1, 2, 3, 4, 5], [6, 7, 8, 9, 10], [11, 12, 13, 14, 15]]\nprint(specified_element(nums, 2))  # should return [2, 8, 12]\nprint(specified_element(nums, 3))  # should return [4, 13]\nprint(specified_element(nums, 4))  # should return [15]",
        "generated_testcode": "assert specified_element([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 2) == [2, 6, 8]\n",
        "test": "assert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],0)==[1, 4, 7]\nassert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],2)==[3, 6, 9]\nassert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],3)==[2,2,5]",
        "canonical_solution": "def specified_element(nums, N):\r\n    result = [i[N] for i in nums]\r\n    return result"
    },
    {
        "number": 155,
        "prompt": "Write a python function to toggle all even bits of a given number.\ndef even_bit_toggle_number(n) : \n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": true,
        "answer": "    binary_num = bin(n)[2:]\n    result = \"\"\n    for i in binary_num :\n        if i == '0' :\n            result += '1'\n        else :\n            result += '0'\n    return int(result, 2)\n\n\n# Test the function\nprint(even_bit_toggle_number(10)) # Output : 9\nprint(even_bit_toggle_number(20)) # Output : 21\nprint(even_bit_toggle_number(5)) # Output : 5\nprint(even_bit_toggle_number(25)) # Output : 21\nprint(even_bit_toggle_number(7)) # Output : 1\nprint(even_bit_toggle_number(32)) # Output : 26\nprint(even_bit_toggle_number(46)) # Output : 28\n",
        "generated_testcode": "assert even_bit_toggle_number(10) == 5\n",
        "test": "assert even_bit_toggle_number(10) == 0\nassert even_bit_toggle_number(20) == 30\nassert even_bit_toggle_number(30) == 20",
        "canonical_solution": "def even_bit_toggle_number(n) : \r\n    res = 0; count = 0; temp = n \r\n    while (temp > 0) :     \r\n        if (count % 2 == 1) : \r\n            res = res | (1 << count)      \r\n        count = count + 1\r\n        temp >>= 1 \r\n    return n ^ res "
    },
    {
        "number": 156,
        "prompt": "Write a function to convert a tuple of string values to a tuple of integer values.\ndef tuple_int_str(tuple_str):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    result = ()\n    for i in tuple_str:\n        result += (int(i),)\n    return result\n\n# Example usage:\nprint(tuple_int_str((\"1\", \"2\", \"3\", \"4\"))  # Output: (1, 2, 3, 4)\nprint(tuple_int_str((\"100\", \"20\", \"30\", \"40\"))  # Output: (10, 20, 30, 40)\nprint(tuple_int_str((\"1000\", \"200\", \"300\", \"400\"))  # Output: (100, 20, 30, 40)",
        "generated_testcode": "assert tuple_int_str((\"1\", \"2\", \"3\") == (1, 2, 3)\n",
        "test": "assert tuple_int_str((('333', '33'), ('1416', '55')))==((333, 33), (1416, 55))\nassert tuple_int_str((('999', '99'), ('1000', '500')))==((999, 99), (1000, 500))\nassert tuple_int_str((('666', '66'), ('1500', '555')))==((666, 66), (1500, 555))",
        "canonical_solution": "def tuple_int_str(tuple_str):\r\n    result = tuple((int(x[0]), int(x[1])) for x in tuple_str)\r\n    return result"
    },
    {
        "number": 157,
        "prompt": "Write a function to reflect the run-length encoding from a list.\ndef encode_list(list1):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    encoded_list = []\n    count = 1\n    for i in range(1, len(list1)):\n        if list1[i] == list1[i - 1]:\n            count += 1\n        else:\n            encoded_list.append((count, list1[i - 1]) if count > 1 else list1[i])\n            count = 1\n    encoded_list.append((count, list1[-1]) if count > 1 else list1[-1])\n    return encoded_list\n\n\n# Test the function\nprint(encode_list([1, 1, 2, 3, 3, 3, 2, 2, 2, 1, 1]))  # Output: [(2, 1), (1, 2), (3, 3), (2, 2), (1, 1)]\nprint(encode_list([1, 1, 2, 2, 3, 3, 3, 2, 2, 2, 1, 1]))  # Output: [(2, 1), (1, 2), (2, 3), (3, 2), (2, 2), (1, 1)]\n",
        "generated_testcode": "assert encode_list([\"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"b\", \"c\", \"c\", \"c\", \"a\", \"a\"] == [('a', 4), ('b', 1), ('c', 2), ('a', 2)]\n\n# Test case 2\n",
        "test": "assert encode_list([1,1,2,3,4,4.3,5,1])==[[2, 1], [1, 2], [1, 3], [1, 4], [1, 4.3], [1, 5], [1, 1]]\nassert encode_list('automatically')==[[1, 'a'], [1, 'u'], [1, 't'], [1, 'o'], [1, 'm'], [1, 'a'], [1, 't'], [1, 'i'], [1, 'c'], [1, 'a'], [2, 'l'], [1, 'y']]\nassert encode_list('python')==[[1, 'p'], [1, 'y'], [1, 't'], [1, 'h'], [1, 'o'], [1, 'n']]",
        "canonical_solution": "from itertools import groupby\r\ndef encode_list(list1):\r\n    return [[len(list(group)), key] for key, group in groupby(list1)]"
    },
    {
        "number": 158,
        "prompt": "Write a python function to find k number of operations required to make all elements equal.\ndef min_Ops(arr,n,k): \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": true,
        "answer": "    # Initialize count of odd and even numbers \n    count_odd = 0\n    count_even = 0\n  \n    # Count the occurrence of each element in the array \n    for i in range(n): \n        if arr[i] % 2 == 0: \n            count_even += 1\n        else: \n            count_odd += 1\n  \n  \n    # Check if there is a majority element \n    if max(count_odd, count_even) < k // 2: \n        return -1\n  \n    # If there is a majority element, count the number of operations required \n    if count_even > count_odd: \n        return k // 2\n    else: \n        return (k // 2) + 1\n  \n    # If there is no majority element, return -1 \n    return -1\n  \n# Example usage \narr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] \nn = len(arr) \nk = 3\nprint(min_Ops(arr, n, k)) ",
        "generated_testcode": "assert min_Ops([1,2,3,4,5,6,7,8], 3, 2) == 2 # Explanation: We can make all elements equal to 5 by swapping 1 and 8 and swapping 2 and 7. \n",
        "test": "assert min_Ops([2,2,2,2],4,3) == 0\nassert min_Ops([4,2,6,8],4,3) == -1\nassert min_Ops([21,33,9,45,63],5,6) == 24",
        "canonical_solution": "def min_Ops(arr,n,k): \r\n    max1 = max(arr) \r\n    res = 0\r\n    for i in range(0,n):  \r\n        if ((max1 - arr[i]) % k != 0): \r\n            return -1 \r\n        else: \r\n            res += (max1 - arr[i]) / k \r\n    return int(res) "
    },
    {
        "number": 159,
        "prompt": "Write a function to print the season for the given month and day.\ndef month_season(month,days):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    if month in [1,2,3,4,12:\n        print(\"Winter\")\n    elif month in [5,6,7,8:\n        print(\"Spring\")\n    elif month in [9,10,11,12:\n        print(\"Summer\")\n    elif month in [3,4,5:\n        print(\"Autumn\")\n    else:\n        print(\"Invalid Month\")\n        return None\n    \n    if days >= 21 or days <= 31:\n        print(\"Day\")\n    elif days >= 16:\n        print(\"Evening\")\n    elif days >= 111:\n        print(\"Morning\")\n    else:\n        print(\"Night\")\n\n\nmonth_season(5,20) # Output: Spring, Morning\nmonth_season(12,25) # Output: Winter, Day\nmonth_season(10,15) # Output: Summer, Evening\nmonth_season(3,15) # Output: Autumn, Night\nmonth_season(15,32) # Output: Invalid Month, None\n\n\n# One-liner solution:\ndef month_season(month, days):\n    return \"Winter\" if month in [1,2,3,4,12] else (\"Spring\" if month in [5,6,7,8] else (\"Summer\" if month in [9,10,11,12] else (\"Autumn\" if month in [3,4,5",
        "generated_testcode": "assert month_season(12,31) == \"Winter\"\n",
        "test": "assert month_season('January',4)==('winter')\nassert month_season('October',28)==('autumn')\nassert month_season('June',6)==('spring')",
        "canonical_solution": "def month_season(month,days):\r\n if month in ('January', 'February', 'March'):\r\n\t season = 'winter'\r\n elif month in ('April', 'May', 'June'):\r\n\t season = 'spring'\r\n elif month in ('July', 'August', 'September'):\r\n\t season = 'summer'\r\n else:\r\n\t season = 'autumn'\r\n if (month == 'March') and (days > 19):\r\n\t season = 'spring'\r\n elif (month == 'June') and (days > 20):\r\n\t season = 'summer'\r\n elif (month == 'September') and (days > 21):\r\n\t season = 'autumn'\r\n elif (month == 'October') and (days > 21):\r\n\t season = 'autumn'\r\n elif (month == 'November') and (days > 21):\r\n\t season = 'autumn'\r\n elif (month == 'December') and (days > 20):\r\n\t season = 'winter'\r\n return season"
    },
    {
        "number": 160,
        "prompt": "Write a function to find x and y that satisfies ax + by = n.\ndef solution (a, b, n): \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    if a == 0:\n        return (n/b, 0)\n    else:\n        x = n / a\n        y = (a/b) * x\n        return (x, y)\n\n# Test cases\nprint(solution(3, 4, 12)) # Output: (4, 3)\nprint(solution(5, -2, 10)) # Output: (2, -1)\nprint(solution(7, 1, 7)) # Output: (1, 0)\nprint(solution(0, 5, 10)) # Output: (0, 10)\nprint(solution(1, 0, 3)) # Output: (3, 0)\nprint(solution(1, 2, 0)) # Output: (0, 0)\n\n\n# Test case with negative numbers\nprint(solution(-3, 4, -12)) # Output: (-4, -3)\nprint(solution(-5, -2, -10)) # Output: (-2, -1)\nprint(solution(-7, 1, -7) # Output: (-1, 0)\nprint(solution(-1, 0, -3) # Output: (-3, 0)\nprint(solution(0, -5, -10) # Output: (0, -1)",
        "generated_testcode": "assert solution (2, 3, 5) == (0, 1)\n",
        "test": "assert solution(2, 3, 7) == ('x = ', 2, ', y = ', 1)\nassert solution(4, 2, 7) == 'No solution'\nassert solution(1, 13, 17) == ('x = ', 4, ', y = ', 1)",
        "canonical_solution": "def solution (a, b, n): \r\n\ti = 0\r\n\twhile i * a <= n: \r\n\t\tif (n - (i * a)) % b == 0: \r\n\t\t\treturn (\"x = \",i ,\", y = \", \r\n\t\t\tint((n - (i * a)) / b)) \r\n\t\t\treturn 0\r\n\t\ti = i + 1\r\n\treturn (\"No solution\") "
    },
    {
        "number": 161,
        "prompt": "Write a function to remove all elements from a given list present in another list.\ndef remove_elements(list1, list2):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    result = []\n    for item in list1:\n        if item not in list2:\n            result.append(item)\n    return result\n\n# Test the function\nlist1 = [1, 2, 3, 4, 5, 6, 7, 8, 9]\nlist2 = [4, 7, 9, 11, 12]\nprint(remove_elements(list1, list2)) # Output: [1, 2, 3, 5, 6, 8]\n\nlist3 = [1, 2, 3, 4, 5, 6, 7, 8, 9]\nlist4 = [4, 7, 9, 11]\nprint(remove_elements(list3, list4)) # Output: [1, 2, 3, 5, 6, 8]\n\nlist5 = [1, 2, 3, 4, 5, 6, 7, 8, 9]\nlist6 = [10, 11, 12]\nprint(remove_elements(list5, list6)) # Output: [1, 2, 3, 4, 5, 6, 7, 8, 9]\n",
        "generated_testcode": "assert remove_elements([\"apple\", \"banana\", \"orange\", \"grape\", \"kiwi\"], [\"banana\", \"grape\"]) == [\"apple\", \"kiwi\"]\n",
        "test": "assert remove_elements([1,2,3,4,5,6,7,8,9,10],[2,4,6,8])==[1, 3, 5, 7, 9, 10]\nassert remove_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],[1, 3, 5, 7])==[2, 4, 6, 8, 9, 10]\nassert remove_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],[5,7])==[1, 2, 3, 4, 6, 8, 9, 10]",
        "canonical_solution": "def remove_elements(list1, list2):\r\n    result = [x for x in list1 if x not in list2]\r\n    return result"
    },
    {
        "number": 162,
        "prompt": "Write a function to calculate the sum of the positive integers of n+(n-2)+(n-4)... (until n-x =< 0).\ndef sum_series(n):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    if n < 1:\n        return 0\n    else:\n        return n + sum_series(n-2)\n\n#test cases\nprint(sum_series(5)) #expected output: 15 (5 + 3 + 1)\nprint(sum_series(10)) #expected output: 30 (10 + 8 + 5 + 2)\nprint(sum_series(1)) #expected output: 1 (1)\nprint(sum_series(0)) #expected output: 0 (no positive integers to sum)\nprint(sum_series(-5)) #expected output: 0 (no positive integers to sum)\n",
        "generated_testcode": "assert sum_series(5) == 15 # 5 + 3 + 1 = 9\n",
        "test": "assert sum_series(6)==12\nassert sum_series(10)==30\nassert sum_series(9)==25",
        "canonical_solution": "def sum_series(n):\r\n  if n < 1:\r\n    return 0\r\n  else:\r\n    return n + sum_series(n - 2)"
    },
    {
        "number": 163,
        "prompt": "Write a function to calculate the area of a regular polygon.\ndef area_polygon(s,l):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    return (0.25 * s * l)\n\n#Test the function with sides and radius of a circle\nprint(area_polygon(24,6)) #Output: 1104.15126120877522461175\n\n#Test the function with sides and radius of a triangle\nprint(area_polygon(6,10)) #Output: 15.0\n\n#Test the function with sides and radius of a rectangle\nprint(area_polygon(12,4) #Output: 24.0\n\n\n#Test the function with sides and radius of an octagon\nprint(area_polygon(16,3) #Output: 48.0\n\n#Test the function with sides and radius of a decagon\nprint(area_polygon(20,4) #Output: 40.2127841925254563027",
        "generated_testcode": "assert area_polygon(3, 10) == 15.11835039273119268645\n",
        "test": "assert area_polygon(4,20)==400.00000000000006\nassert area_polygon(10,15)==1731.1969896610804\nassert area_polygon(9,7)==302.90938549487214",
        "canonical_solution": "from math import tan, pi\r\ndef area_polygon(s,l):\r\n  area = s * (l ** 2) / (4 * tan(pi / s))\r\n  return area"
    },
    {
        "number": 164,
        "prompt": "Write a python function to check whether the sum of divisors are same or not.\ndef divSum(n): \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    sum1 = sum2 = 0\n    for i in range(1, n): \n        if n % i == 0: \n            sum1 += i \n    for j in range(1, n): \n        if (n // j) > 0 and n % j == 0: \n            sum2 += j \n    if sum1 == sum2: \n        return True\n    else: \n        return False\n\n# Test the function with some inputs\nprint(divSum(220) # True \nprint(divSum(24) # True\nprint(divSum(23) # False ",
        "generated_testcode": "assert divSum(12) == True\n",
        "test": "assert areEquivalent(36,57) == False\nassert areEquivalent(2,4) == False\nassert areEquivalent(23,47) == True",
        "canonical_solution": "import math \r\ndef divSum(n): \r\n    sum = 1; \r\n    i = 2; \r\n    while(i * i <= n): \r\n        if (n % i == 0): \r\n            sum = (sum + i +math.floor(n / i)); \r\n        i += 1; \r\n    return sum; \r\ndef areEquivalent(num1,num2): \r\n    return divSum(num1) == divSum(num2); "
    },
    {
        "number": 165,
        "prompt": "Write a python function to count characters at same position in a given string (lower and uppercase characters) as in english alphabet.\ndef count_char_position(str1): \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    count = [0] * 26\n    for char in str1:\n        if char.isalpha():\n            count[ord(char.lower()) - ord('a')] += 1\n    for i in range(len(count)):\n        print(chr(ord('a') + i) + \": \" + str(count[i]))\n\n# Test the function \ncount_char_position(\"Hello World\") ",
        "generated_testcode": "assert count_char_position(\"Hello World\") == {'H': 1, 'e': 1, 'l': 3, 'o': 2, ' ': 1, 'W': 1, 'r': 1, 'd': 1, 'l': 2, 'o': 3, 'W': 2, 'r': 2, 'd': 2}\n",
        "test": "assert count_char_position(\"xbcefg\") == 2\nassert count_char_position(\"ABcED\") == 3\nassert count_char_position(\"AbgdeF\") == 5",
        "canonical_solution": "def count_char_position(str1): \r\n    count_chars = 0\r\n    for i in range(len(str1)):\r\n        if ((i == ord(str1[i]) - ord('A')) or \r\n            (i == ord(str1[i]) - ord('a'))): \r\n            count_chars += 1\r\n    return count_chars "
    },
    {
        "number": 166,
        "prompt": "Write a python function to count the pairs with xor as an even number.\ndef find_even_Pair(A,N): \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    count=0\n    for i in range(N):\n        for j in range(i+1,N):\n            if A[i]^A[j]==0:\n                count+=1\n    return count\n\nA=list(map(int,input().split()))\nN=len(A)\nprint(find_even_Pair(A,N))",
        "generated_testcode": "assert find_even_Pair([1,2,3,4,5,6,7,8,9], 5) == 2\n",
        "test": "assert find_even_Pair([5,4,7,2,1],5) == 4\nassert find_even_Pair([7,2,8,1,0,5,11],7) == 9\nassert find_even_Pair([1,2,3],3) == 1",
        "canonical_solution": "def find_even_Pair(A,N): \r\n    evenPair = 0\r\n    for i in range(0,N): \r\n        for j in range(i+1,N): \r\n            if ((A[i] ^ A[j]) % 2 == 0): \r\n                evenPair+=1\r\n    return evenPair; "
    },
    {
        "number": 167,
        "prompt": "Write a python function to find smallest power of 2 greater than or equal to n.\ndef next_Power_Of_2(n): \n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    # Initialize result \n    result = 1\n  \n    # Keep adding 2 to the result until it is greater than n \n    while (result <= n): \n        result = result * 2\n  \n    # Return the result \n    return result ",
        "generated_testcode": "assert next_Power_Of_2(10) == 16\n",
        "test": "assert next_Power_Of_2(0) == 1\nassert next_Power_Of_2(5) == 8\nassert next_Power_Of_2(17) == 32",
        "canonical_solution": "def next_Power_Of_2(n): \r\n    count = 0; \r\n    if (n and not(n & (n - 1))): \r\n        return n   \r\n    while( n != 0): \r\n        n >>= 1\r\n        count += 1\r\n    return 1 << count; "
    },
    {
        "number": 168,
        "prompt": "Write a python function to find the frequency of a number in a given array.\ndef frequency(a,x): \n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    count = 0\n    for i in range(len(a)): \n        if a[i] == x: \n            count += 1\n    return count ",
        "generated_testcode": "assert frequency([1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9], 9) == 3\n",
        "test": "assert frequency([1,2,3],4) == 0\nassert frequency([1,2,2,3,3,3,4],3) == 3\nassert frequency([0,1,2,3,1,2],1) == 2",
        "canonical_solution": "def frequency(a,x): \r\n    count = 0  \r\n    for i in a: \r\n        if i == x: count += 1\r\n    return count "
    },
    {
        "number": 169,
        "prompt": "Write a function to calculate the nth pell number.\ndef get_pell(n): \n",
        "checkpoint": "7B",
        "pass": 3,
        "correct": true,
        "answer": "    # base cases\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n    # initialize variables\n    a = 0\n    b = 1\n    c = 1\n    # loop until the nth pell number is found\n    for i in range(2, n):\n        # calculate the next pell number\n        d = a + b\n        a = b\n        b = c\n        c = d\n    return c\n\n# test the function\nprint(get_pell(10)) # should return 288\nprint(get_pell(20)) # should return 1901\nprint(get_pell(30)) # should return 7107\nprint(get_pell(40)) # should return 3735\nprint(get_pell(50)) # should return 1597",
        "generated_testcode": "assert get_pell(1) == 0\n",
        "test": "assert get_pell(4) == 12\nassert get_pell(7) == 169\nassert get_pell(8) == 408",
        "canonical_solution": "def get_pell(n): \r\n\tif (n <= 2): \r\n\t\treturn n \r\n\ta = 1\r\n\tb = 2\r\n\tfor i in range(3, n+1): \r\n\t\tc = 2 * b + a \r\n\t\ta = b \r\n\t\tb = c \r\n\treturn b "
    },
    {
        "number": 170,
        "prompt": "Write a function to find sum of the numbers in a list between the indices of a specified range.\ndef sum_range_list(list1, m, n):                                                                                                                                                                                                \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    return sum(list1[m:n+1])                                                                                                                                                                                           \n\n# Example usage:\nlist1 = [1,2,3,4,5,6,7,8,9,10]\nprint(sum_range_list(list1,2,4)) # Output: 12 (sum of numbers from index 2 to 4)\nprint(sum_range_list(list1,4,6)) # Output: 15 (sum of numbers from index 4 to 6)\nprint(sum_range_list(list1,0,9)) # Output: 45 (sum of numbers from index 0 to 9)\nprint(sum_range_list(list1,1,2)) # Output: 6 (sum of numbers from index 1 to 2) ",
        "generated_testcode": "assert sum_range_list(range(1, 10), 2, 5) == 12\n",
        "test": "assert sum_range_list( [2,1,5,6,8,3,4,9,10,11,8,12],8,10)==29\nassert sum_range_list( [2,1,5,6,8,3,4,9,10,11,8,12],5,7)==16\nassert sum_range_list( [2,1,5,6,8,3,4,9,10,11,8,12],7,10)==38",
        "canonical_solution": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \r\n    sum_range = 0                                                                                                                                                                                                         \r\n    for i in range(m, n+1, 1):                                                                                                                                                                                        \r\n        sum_range += list1[i]                                                                                                                                                                                                  \r\n    return sum_range   "
    },
    {
        "number": 171,
        "prompt": "Write a function to find the perimeter of a pentagon.\ndef perimeter_pentagon(a):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    \"\"\"\n    a: a positive integer representing the side of a pentagon\n    returns: the perimeter of the pentagon\n    \"\"\"\n    return a * 5\n\n\n# Test cases\nprint(perimeter_pentagon(4))  # Output: 20\nprint(perimeter_pentagon(7))  # Output: 35\nprint(perimeter_pentagon(10)  # Output: 50\n",
        "generated_testcode": "assert perimeter_pentagon(5) == 10\n",
        "test": "assert perimeter_pentagon(5)==25\nassert perimeter_pentagon(10)==50\nassert perimeter_pentagon(15)==75",
        "canonical_solution": "import math\r\ndef perimeter_pentagon(a):\r\n  perimeter=(5*a)\r\n  return perimeter"
    },
    {
        "number": 172,
        "prompt": "Write a function to find the occurence of characters 'std' in the given string 1. list item 1. list item 1. list item 2. list item 2. list item 2. list item\ndef count_occurance(s):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    count=0\n    for i in s:\n        if i==\"std\":\n            count+=1\n    return count\n\n\ns1=\"This is a string\"\ns2=\"python is a cool language\"\ns3=\"std is very important\"\n\nprint(count_occurance(s1))\nprint(count_occurance(s2))\nprint(count_occurance(s3))\n\n# Output\n# 0\n# 0\n# 2 ",
        "generated_testcode": "assert count_occurance([\"hello world\", \"std\", \"python\", \"std\", \"python\"] == ",
        "test": "assert count_occurance(\"letstdlenstdporstd\") == 3\nassert count_occurance(\"truststdsolensporsd\") == 1\nassert count_occurance(\"makestdsostdworthit\") == 2",
        "canonical_solution": "def count_occurance(s):\r\n  count=0\r\n  for i in range(len(s)):\r\n    if (s[i]== 's' and s[i+1]=='t' and s[i+2]== 'd'):\r\n      count = count + 1\r\n  return count"
    },
    {
        "number": 173,
        "prompt": "Write a function to remove everything except alphanumeric characters from a string.\ndef remove_splchar(text): \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    # use the isalnum() function to check if a character is alphanumeric or not\n    # if it is alphanumeric, then keep it, otherwise, remove it\n    result = ''\n    for char in text:\n        if char.isalnum():\n            result += char\n    return result\n\n\n# test the function\ntext = 'hello_world123!@#'\nprint(remove_splchar(text))  # output: 'helloworld123' ",
        "generated_testcode": "assert remove_splchar(123abc@#$%def) == \"123abcdef\"\n",
        "test": "assert remove_splchar('python  @#&^%$*program123')==('pythonprogram123')\nassert remove_splchar('python %^$@!^&*()  programming24%$^^()    language')==('pythonprogramming24language')\nassert remove_splchar('python   ^%&^()(+_)(_^&67)                  program')==('python67program')",
        "canonical_solution": "import re\r\ndef remove_splchar(text): \r\n pattern = re.compile('[\\W_]+')\r\n return (pattern.sub('', text))"
    },
    {
        "number": 174,
        "prompt": "Write a function to group a sequence of key-value pairs into a dictionary of lists.\ndef group_keyvalue(l):\n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    d = {}\n    for key, value in l:\n        if key in d:\n            d[key].append(value)\n        else:\n            d[key] = [value]\n    return d\n\n# Example usage:\nl = [('a', 1), ('b', 2), ('a', 3), ('b', 4), ('c', 5), ('a', 6), ('b', 7), ('c', 8), ('d', 9), ('d', 10), ('c', 11), ('e', 12)]\nprint(group_keyvalue(l))  # {'a': [1, 3, 6], 'b': [2, 4, 7], 'c': [5, 8, 11], 'd': [9, 10], 'e': [12]}\n\n# Another example:\nl = [('apple', 1), ('apple', 2), ('banana', 3), ('banana', 4), ('orange', 5), ('orange', 6), ('apple', 7), ('orange', 8), ('pear', 9), ('pear', 10)]\nprint(group_keyvalue(l))  # {'apple': [1, 2, 7], 'banana': [3, 4], 'orange': [5, 6], 'pear': [9, 10]}",
        "generated_testcode": "assert group_keyvalue([('a', 1), ('b', 2), ('a', 3), ('c', 4), ('b', 5), ('a', 6), ('d', 7)] ) == {'a': [1, 3, 6], 'b': [2, 5], 'c': [4], 'd': [7]}\n",
        "test": "assert group_keyvalue([('yellow', 1), ('blue', 2), ('yellow', 3), ('blue', 4), ('red', 1)])=={'yellow': [1, 3], 'blue': [2, 4], 'red': [1]}\nassert group_keyvalue([('python', 1), ('python', 2), ('python', 3), ('python', 4), ('python', 5)])=={'python': [1,2,3,4,5]}\nassert group_keyvalue([('yellow',100), ('blue', 200), ('yellow', 300), ('blue', 400), ('red', 100)])=={'yellow': [100, 300], 'blue': [200, 400], 'red': [100]}",
        "canonical_solution": "def group_keyvalue(l):\r\n    result = {}\r\n    for k, v in l:\r\n         result.setdefault(k, []).append(v)\r\n    return result"
    },
    {
        "number": 175,
        "prompt": "Write a function to verify validity of a string of parentheses.\ndef is_valid_parenthese( str1):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    stack = []\n    for i in str1:\n        if i in ['(', '[', '{']:\n            stack.append(i)\n        else:\n            if not stack:\n                return False\n            last = stack.pop()\n            if i == ')' and last != '(' or i == '}' and last != '{' or i == ']' and last != '[':\n                return False\n    return not stack\n\nprint(is_valid_parenthese(\"(){}[]\")) # True\nprint(is_valid_parenthese(\"{[()]}\")) # True\nprint(is_valid_parenthese(\"{[(]}\")) # False\nprint(is_valid_parenthese(\"(])\")) # False\nprint(is_valid_parenthese(\"()[]{}\")) # True\n",
        "generated_testcode": "assert is_valid_parenthese(\"()\" == True\n",
        "test": "assert is_valid_parenthese(\"(){}[]\")==True\nassert is_valid_parenthese(\"()[{)}\")==False\nassert is_valid_parenthese(\"()\")==True",
        "canonical_solution": "def is_valid_parenthese( str1):\r\n        stack, pchar = [], {\"(\": \")\", \"{\": \"}\", \"[\": \"]\"}\r\n        for parenthese in str1:\r\n            if parenthese in pchar:\r\n                stack.append(parenthese)\r\n            elif len(stack) == 0 or pchar[stack.pop()] != parenthese:\r\n                return False\r\n        return len(stack) == 0"
    },
    {
        "number": 176,
        "prompt": "Write a function to find the perimeter of a triangle.\ndef perimeter_triangle(a,b,c):\n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    if a+b>c and b+c>a and c+a>b:\n        return a+b+c\n    else:\n        return \"Not a triangle\"\n\n#Test cases\nprint(perimeter_triangle(3,4,5)) # Should print 12\nprint(perimeter_triangle(7,12,13)) # Should print \"Not a triangle\"\n\n# Add more test cases to test the function",
        "generated_testcode": "assert perimeter_triangle(3,4,5) == 12\n",
        "test": "assert perimeter_triangle(10,20,30)==60\nassert perimeter_triangle(3,4,5)==12\nassert perimeter_triangle(25,35,45)==105",
        "canonical_solution": "def perimeter_triangle(a,b,c):\r\n  perimeter=a+b+c\r\n  return perimeter"
    },
    {
        "number": 177,
        "prompt": "Write a python function to find two distinct numbers such that their lcm lies within the given range.\ndef answer(L,R): \n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": true,
        "answer": "    def lcm(a,b):\n        return a*b//math.gcd(a,b)\n\n    def gcd(a,b):\n        if b==0:\n            return a\n        return gcd(b,a%b)\n    \n    for i in range(L,R+1):\n        for j in range(L,R+1):\n            if i!=j and gcd(i,j)==1:\n                if lcm(i,j)>=L and lcm(i,j)<=R:\n                    return (i,j)\n    return None\n\n# Example usage:\nprint(answer(1,15)) # Output: (5, 7)\nprint(answer(1,20)) # Output: (7, 13)\nprint(answer(1,30)) # Output: (5, 15)\nprint(answer(1,40)) # Output: (7, 21)\nprint(answer(1,50)) # Output: (5, 11)\nprint(answer(1,60)) # Output: (7, 15)\n\n# Note: The output is (5, 15) as the largest pair of distinct numbers whose LCM is within the given range (1-30) is (5, 15)\n# The output may vary for different inputs as there may be multiple pairs of numbers that satisfy the given condition. ",
        "generated_testcode": "assert answer(1, 10) == (1, 2)\n",
        "test": "assert answer(3,8) == (3,6)\nassert answer(2,6) == (2,4)\nassert answer(1,3) == (1,2)",
        "canonical_solution": "def answer(L,R): \r\n    if (2 * L <= R): \r\n        return (L ,2*L)\r\n    else: \r\n        return (-1) "
    },
    {
        "number": 178,
        "prompt": "Write a function to search some literals strings in a string.\ndef string_literals(patterns,text):\n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    result=[]\n    for i in patterns:\n        if i in text:\n            result.append(i)\n    return result\n\n\n#test case\npatterns=['hello','world','python','programming']\ntext='Hello, how are you doing today? I am learning Python programming'\nprint(string_literals(patterns,text)) #Output: ['hello', 'world', 'programming']\ntext='Hello, how are you doing today? I am learning Python programming and I like it'\nprint(string_literals(patterns,text)) #Output: ['hello', 'world', 'programming']\ntext='Hello, how are you doing today? I am learning Python'\nprint(string_literals(patterns,text)) #Output: ['hello']\n\n\n#Explanation:\n#The function takes two arguments: patterns and text. It creates an empty list called result to store the matching strings. It then loops through each pattern in the patterns list and checks if it is present in the text. If it is present, it appends the pattern to the result list. Finally, it returns the result list containing the matching strings. ",
        "generated_testcode": "assert string_literals([\"hello\",\"world\"], \"hello world\") == [\"hello\", \"world\"]\n",
        "test": "assert string_literals(['language'],'python language')==('Matched!')\nassert string_literals(['program'],'python language')==('Not Matched!')\nassert string_literals(['python'],'programming language')==('Not Matched!')",
        "canonical_solution": "import re\r\ndef string_literals(patterns,text):\r\n  for pattern in patterns:\r\n     if re.search(pattern,  text):\r\n       return ('Matched!')\r\n     else:\r\n       return ('Not Matched!')"
    },
    {
        "number": 179,
        "prompt": "Write a function to find if the given number is a keith number or not.\ndef is_num_keith(x): \n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": true,
        "answer": "    if x == 0:\n        return False\n    sum_of_digits = sum(int(digit) for digit in str(x))\n    while x > 0:\n        remainder = x % 10\n        x //= 10\n        if remainder == 0:\n            return False\n        if sum_of_digits % remainder != 0:\n            return False\n    return True\n\n# Test cases\nprint(is_num_keith(1000)) # True\nprint(is_num_keith(4321)) # False\nprint(is_num_keith(1410)) # True\nprint(is_num_keith(22022)) # True\nprint(is_num_keith(143210)) # False\n",
        "generated_testcode": "assert is_num_keith(123) == True\n",
        "test": "assert is_num_keith(14) == True\nassert is_num_keith(12) == False\nassert is_num_keith(197) == True",
        "canonical_solution": "def is_num_keith(x): \r\n\tterms = [] \r\n\ttemp = x \r\n\tn = 0 \r\n\twhile (temp > 0): \r\n\t\tterms.append(temp % 10) \r\n\t\ttemp = int(temp / 10) \r\n\t\tn+=1 \r\n\tterms.reverse() \r\n\tnext_term = 0 \r\n\ti = n \r\n\twhile (next_term < x): \r\n\t\tnext_term = 0 \r\n\t\tfor j in range(1,n+1): \r\n\t\t\tnext_term += terms[i - j] \r\n\t\tterms.append(next_term) \r\n\t\ti+=1 \r\n\treturn (next_term == x) "
    },
    {
        "number": 180,
        "prompt": "Write a function to calculate distance between two points using latitude and longitude.\ndef distance_lat_long(slat,slon,elat,elon):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    R = 6371.0 #Radius of the Earth\n    # Convert latitude and longitude to spherical coordinates in radians.\n    degrees_to_radians = math.pi/180.0\n    lat1 = slat * degrees_to_radians\n    lon1 = slon * degrees_to_radians\n    lat2 = elat * degrees_to_radians\n    lon2 = elon * degrees_to_radians\n\n    # Compute the difference in latitude and longitude.\n    dlat = (lat2-lat1)\n    dlon = (lon2-lon1)\n\n    # Compute the square of the great circle distance.\n    a = (math.sin(dlat/2.0)**2 + math.cos(lat1) * math.cos(lat2) * math.sin(dlon/2.0)**2)\n    c = 2 * math.atan2(math.sqrt(a), math.sqrt(1-a))\n    # Multiply by the radius of the earth in meters to get the distance.\n    dist = R * c\n    return dist\n\n\n# Example usage:\ndistance_lat_long(51.5074, -0.1275, 51.5078, -0.1128) # Returns 1152.75 meters\ndistance_lat_long(38.89776, -77.0365, 38.897",
        "generated_testcode": "assert distance_lat_long(37.33,-1222.5,40.5,-74.5) == 3427.7 # distance between SF and NYC\n",
        "test": "assert distance_lat_long(23.5,67.5,25.5,69.5)==12179.372041317429\nassert distance_lat_long(10.5,20.5,30.5,40.5)==6069.397933300514\nassert distance_lat_long(10,20,30,40)==6783.751974994595",
        "canonical_solution": "from math import radians, sin, cos, acos\r\ndef distance_lat_long(slat,slon,elat,elon):\r\n dist = 6371.01 * acos(sin(slat)*sin(elat) + cos(slat)*cos(elat)*cos(slon - elon))\r\n return dist"
    },
    {
        "number": 181,
        "prompt": "Write a function to find the longest common prefix in the given set of strings.\ndef common_prefix_util(str1, str2): \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    i = 0\n    while i < len(str1) and i < len(str2) and str1[i] == str2[i]: \n        i += 1\n    return str1[:i] \n\ndef longest_common_prefix(arr): \n    if not arr: \n        return \"\" \n    elif len(arr) == 1: \n        return arr[0] \n    else: \n        prefix = arr[0] \n        for i in range(1, len(arr)): \n            prefix = common_prefix_util(prefix, arr[i]) \n            if not prefix: \n                return \"\" \n        return prefix \n\n# Test the function \nstr_arr = [\"flower\", \"flow\", \"flight\"] \nprint(longest_common_prefix(str_arr)) # Output: \"fl\" \n\nstr_arr = [\"dog\", \"doggy\", \"dogg\"] \nprint(longest_common_prefix(str_arr)) # Output: \"dog\" ",
        "generated_testcode": "assert common_prefix_util([\"flower\", \"flow\", \"flight\"]), \"fl\"\n",
        "test": "assert common_prefix([\"tablets\", \"tables\", \"taxi\", \"tamarind\"], 4) == 'ta'\nassert common_prefix([\"apples\", \"ape\", \"april\"], 3) == 'ap'\nassert common_prefix([\"teens\", \"teenager\", \"teenmar\"], 3) == 'teen'",
        "canonical_solution": "def common_prefix_util(str1, str2): \r\n\tresult = \"\"; \r\n\tn1 = len(str1) \r\n\tn2 = len(str2) \r\n\ti = 0\r\n\tj = 0\r\n\twhile i <= n1 - 1 and j <= n2 - 1: \r\n\t\tif (str1[i] != str2[j]): \r\n\t\t\tbreak\r\n\t\tresult += str1[i] \r\n\t\ti += 1\r\n\t\tj += 1\r\n\treturn (result) \r\ndef common_prefix (arr, n): \r\n\tprefix = arr[0] \r\n\tfor i in range (1, n): \r\n\t\tprefix = common_prefix_util(prefix, arr[i]) \r\n\treturn (prefix) "
    },
    {
        "number": 182,
        "prompt": "Write a function to find uppercase, lowercase, special character and numeric values using regex.\ndef find_character(string):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    uppercase = re.findall(r'[A-Z]', string)\n    lowercase = re.findall(r'[a-z]', string)\n    special = re.findall(r'[^\\w\\s]', string)\n    numeric = re.findall(r'\\d', string)\n    return uppercase, lowercase, special, numeric\n\n# Testing the function\nstring = \"Hello123@World\"\nprint(find_character(string))\n\n# Output: (['H', 'W'], ['o'], ['l', '1', '@'], ['l'])\n\n# Testing the function with different input\nstring = \"H@eLLo\"\nprint(find_character(string))\n\n# Output: ('H', '', '@', 'e', 'l', 'l', 'o')\n\n# Testing the function with different input\nstring = \"HelloWorld\"\nprint(find_character(string))\n\n# Output: ('H', 'e', 'l', 'l', 'o', 'W', 'o', 'r', 'l', 'd') ",
        "generated_testcode": "assert find_character(123abc@#DEF) == {'uppercase': 'DEF', 'lowercase': 'abc', 'special_char': '@', 'numeric': '123'}\n",
        "test": "assert find_character(\"ThisIsGeeksforGeeks\") == (['T', 'I', 'G', 'G'], ['h', 'i', 's', 's', 'e', 'e', 'k', 's', 'f', 'o', 'r', 'e', 'e', 'k', 's'], [], [])\nassert find_character(\"Hithere2\") == (['H'], ['i', 't', 'h', 'e', 'r', 'e'], ['2'], [])\nassert find_character(\"HeyFolks32\") == (['H', 'F'], ['e', 'y', 'o', 'l', 'k', 's'], ['3', '2'], [])",
        "canonical_solution": "import re\r\ndef find_character(string):\r\n  uppercase_characters = re.findall(r\"[A-Z]\", string) \r\n  lowercase_characters = re.findall(r\"[a-z]\", string) \r\n  numerical_characters = re.findall(r\"[0-9]\", string) \r\n  special_characters = re.findall(r\"[, .!?]\", string) \r\n  return uppercase_characters, lowercase_characters, numerical_characters, special_characters"
    },
    {
        "number": 183,
        "prompt": "Write a function to count all the distinct pairs having a difference of k in any array.\ndef count_pairs(arr, n, k):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] - arr[j] == k:\n                count += 1\n    return count\n\n# Test the function\narr = [1, 5, 3, 7, 9, 1, 4, 6, 8, 2]\nn = len(arr)\nk = 3\nprint(count_pairs(arr, n, k))\n# Output: 3\n\narr = [1, 3, 5, 7, 9, 1, 4, 6, 8, 2]\nn = len(arr)\nk = 2\nprint(count_pairs(arr, n, k))\n# Output: 4\n",
        "generated_testcode": "assert count_pairs([1, 5, 3, 7, 9, 2, 8, 5, 4], 3, 2) == 2\n",
        "test": "assert count_pairs([1, 5, 3, 4, 2], 5, 3) == 2\nassert count_pairs([8, 12, 16, 4, 0, 20], 6, 4) == 5\nassert count_pairs([2, 4, 1, 3, 4], 5, 2) == 3",
        "canonical_solution": "def count_pairs(arr, n, k):\r\n  count=0;\r\n  for i in range(0,n):\r\n    for j in range(i+1, n):\r\n      if arr[i] - arr[j] == k or arr[j] - arr[i] == k:\r\n        count += 1\r\n  return count"
    },
    {
        "number": 184,
        "prompt": "Write a function to find all the values in a list that are greater than a specified number.\ndef greater_specificnum(list,num):\n",
        "checkpoint": "7B",
        "pass": 3,
        "correct": true,
        "answer": "    result=[]\n    for i in list:\n        if i>num:\n            result.append(i)\n    return result\n\n#Test the function\nmylist=[1,5,8,3,9,4,7,6,10]\nprint(greater_specificnum(mylist,5)) # Output: [8, 9, 10]\nprint(greater_specificnum(mylist,3)) # Output: [4, 5, 6, 7, 8, 9, 10]\nprint(greater_specificnum(mylist,0)) # Output: [1, 3, 4, 5, 6, 7, 8, 9, 10] ",
        "generated_testcode": "assert greater_specificnum([1,2,3,4,5,6,7,8,9], 5) == [6,7,8,9]\n",
        "test": "assert greater_specificnum([220, 330, 500],200)==True\nassert greater_specificnum([12, 17, 21],20)==False\nassert greater_specificnum([1,2,3,4],10)==False",
        "canonical_solution": "def greater_specificnum(list,num):\r\n greater_specificnum=all(x >= num for x in list)\r\n return greater_specificnum"
    },
    {
        "number": 185,
        "prompt": "Write a function to find the focus of a parabola.\ndef parabola_focus(a, b, c): \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    focus = (b/a)\n    return focus\n\n# Test the function with some values\nprint(parabola_focus(1, 2, 3)) # Output: 2.0\nprint(parabola_focus(4, -12, 8)) # Output: -3.0\nprint(parabola_focus(3, -5, 12)) # Output: 4.0\nprint(parabola_focus(5, 0, -10)) # Output: 0.0\n\n\n# Write a function to find the vertex of a parabola\ndef parabola_vertex(a, b, c):\n    vertex_x = -b/(2*a)\n    vertex_y = (4*a*c)/b**2\n    return vertex_x, vertex_y\n\n# Test the function with some values\nprint(parabola_vertex(1, 2, 3)) # Output: (-1.0, 3.0)\nprint(parabola_vertex(4, -12, 8)) # Output: (2.0, 12.0)\nprint(parabola_vertex(3, -5, 12)) # Output: (0.0, -12.0)\nprint(parabola_vertex(5, 0, -10)) # Output: (-10.0, 25.0)\n\n\n# Write a function to find the directrix of a parabola\ndef par",
        "generated_testcode": "assert parabola_focus(1, 2, 3) == (-1, 1)\n",
        "test": "assert parabola_focus(5,3,2)==(-0.3, 1.6)\nassert parabola_focus(9,8,4)==(-0.4444444444444444, 2.25)\nassert parabola_focus(2,4,6)==(-1.0, 4.125)",
        "canonical_solution": "def parabola_focus(a, b, c): \r\n  focus= (((-b / (2 * a)),(((4 * a * c) - (b * b) + 1) / (4 * a))))\r\n  return focus"
    },
    {
        "number": 186,
        "prompt": "Write a function to search some literals strings in a string by using regex.\ndef check_literals(text, patterns):\n",
        "checkpoint": "7B",
        "pass": 3,
        "correct": true,
        "answer": "    \"\"\"\n    This function takes two parameters, a text string and a list of patterns,\n    and returns a list of all the matches found in the text.\n    \"\"\"\n    matches = []\n    for pattern in patterns:\n        matches.extend(re.findall(pattern, text))\n    return matches\n\n\n# Test cases\nprint(check_literals(\"This is a test string to search for some literals\", ['literal', 'test']))\nprint(check_literals(\"Someone took my literal and some words\", ['literal', 'test']))\nprint(check_literals(\"Literal words are awesome\", ['words']))\nprint(check_literals(\"There are no literals here\", ['literal', 'test']))\n\n\n# Output\n# ['test', 'literal']\n# ['test', 'literal']\n# ['words', 'literal']\n# []\n\n\n# Explanation:\n# In the first test case, the function finds 'literal' and 'test' patterns in the string.\n# In the second test case, it finds 'test' and 'literal'.\n# In the third test case, it finds 'words' and 'literal'.\n# In the fourth test case, no patterns are found. ",
        "generated_testcode": "assert check_literals(\n    \"This is a test string. It contains some literals like 'python' and 'regex'.\",\n    ['python', 'regex']\n) == ['python', 'regex']\n\n",
        "test": "assert check_literals('The quick brown fox jumps over the lazy dog.',['fox']) == 'Matched!'\nassert check_literals('The quick brown fox jumps over the lazy dog.',['horse']) == 'Not Matched!'\nassert check_literals('The quick brown fox jumps over the lazy dog.',['lazy']) == 'Matched!'",
        "canonical_solution": "import re\r\ndef check_literals(text, patterns):\r\n  for pattern in patterns:\r\n    if re.search(pattern,  text):\r\n        return ('Matched!')\r\n    else:\r\n        return ('Not Matched!')"
    },
    {
        "number": 187,
        "prompt": "Write a function to find the longest common subsequence for the given two sequences.\ndef longest_common_subsequence(X, Y, m, n): \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    L = [[0 for j in range(n + 1)] for i in range(m + 1)] \n    max_length = 0\n    index = 0\n    for i in range(m + 1): \n        for j in range(n + 1): \n            if i == 0 or j == 0: \n                L[i][j] = 0\n            elif X[i-1] == Y[j-1]: \n                L[i][j] = L[i-1][j-1] + 1\n                if L[i][j] > max_length: \n                    max_length = L[i][j] \n                    index = i \n            else: \n                L[i][j] = max(L[i-1][j], L[i][j-1]) \n    return L[m][n] ",
        "generated_testcode": "assert longest_common_subsequence([\"ABCDGH\", \"AEDFHR\"] , 5, 5) == \"ADH\"\n",
        "test": "assert longest_common_subsequence(\"AGGTAB\" , \"GXTXAYB\", 6, 7) == 4\nassert longest_common_subsequence(\"ABCDGH\" , \"AEDFHR\", 6, 6) == 3\nassert longest_common_subsequence(\"AXYT\" , \"AYZX\", 4, 4) == 2",
        "canonical_solution": "def longest_common_subsequence(X, Y, m, n): \r\n    if m == 0 or n == 0: \r\n       return 0 \r\n    elif X[m-1] == Y[n-1]: \r\n       return 1 + longest_common_subsequence(X, Y, m-1, n-1) \r\n    else: \r\n       return max(longest_common_subsequence(X, Y, m, n-1), longest_common_subsequence(X, Y, m-1, n))"
    },
    {
        "number": 188,
        "prompt": "Write a python function to check whether the given number can be represented by product of two squares or not.\ndef prod_Square(n):\n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    i=1\n    while i*i<=n:\n        if n%i==0:\n            j=i\n            while i*j<=n:\n                if i*j==n:\n                    return True\n                i+=1\n        else:\n            i+=1\n    return False\n\nprint(prod_Square(100)) # Output: True\nprint(prod_Square(15)) # Output: False\nprint(prod_Square(225)) # Output: True\nprint(prod_Square(6)) # Output: True ",
        "generated_testcode": "assert prod_Square(1) == True\n",
        "test": "assert prod_Square(25) == False\nassert prod_Square(30) == False\nassert prod_Square(16) == True",
        "canonical_solution": "def prod_Square(n):\r\n    for i in range(2,(n) + 1):\r\n        if (i*i < (n+1)):\r\n            for j in range(2,n + 1):\r\n                if ((i*i*j*j) == n):\r\n                    return True;\r\n    return False;"
    },
    {
        "number": 189,
        "prompt": "Write a python function to find the first missing positive number.\ndef first_Missing_Positive(arr,n): \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    i=0\n    j=0\n    while(i<n):\n        if(arr[i]<=0 or arr[i]>n or arr[i]==i+1):\n            i+=1\n        elif(arr[i]!=arr[arr[arr[i]-1]-1]):\n            temp=arr[arr[i]-1]\n            arr[arr[arr[i]-1],arr[i]]=arr[i],arr[temp-1]\n            arr[temp-1]=temp\n        else:\n            i+=1\n    while(j<n):\n        if(arr[j]!=j+1):\n            i=arr[j]-1\n            while(arr[i]!=arr[i]-1):\n                temp=arr[i]-1\n                arr[i],arr[temp] = arr[temp],arr[i]\n                arr[i],arr[temp] = arr[temp],arr[i]\n                i=temp-1\n        else:\n            j+=1\n    for i in range(n):\n        if(arr[i]!=i+1):\n            return i+1\n    return n+1\n\n\n# Example usage:\narr = [3, 4, 1, 2, 5, 6, 7, 8, 9, 10, 11, 12]\nn = len(arr)\nprint(first_Missing_Positive(arr,n)) # Output",
        "generated_testcode": "assert first_Missing_Positive([3, 4, -1, 1, 5, 6, 2, 1, -2, 8, 7, 2] , 7) == 4\n",
        "test": "assert first_Missing_Positive([1,2,3,-1,5],5) == 4\nassert first_Missing_Positive([0,-1,-2,1,5,8],6) == 2\nassert first_Missing_Positive([0,1,2,5,-8],5) == 3",
        "canonical_solution": "def first_Missing_Positive(arr,n): \r\n    ptr = 0\r\n    for i in range(n):\r\n        if arr[i] == 1:\r\n            ptr = 1\r\n            break\r\n    if ptr == 0:\r\n        return(1)\r\n    for i in range(n):\r\n        if arr[i] <= 0 or arr[i] > n:\r\n            arr[i] = 1\r\n    for i in range(n):\r\n        arr[(arr[i] - 1) % n] += n\r\n    for i in range(n):\r\n        if arr[i] <= n:\r\n            return(i + 1)\r\n    return(n + 1)"
    },
    {
        "number": 190,
        "prompt": "Write a python function to count the number of integral co-ordinates that lie inside a square.\ndef count_Intgral_Points(x1,y1,x2,y2): \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    # take the input of the four coordinates of the square\n    x_range = x2 - x1\n    y_range = y2 - y1\n    count = 0\n    for i in range(x1, x2+1):\n        for j in range(y1, y2+1):\n            if i**2 + j**2 <= x_range**2 and j**2 + i**2 <= y_range**2:\n                count += 1\n    return count\n\n# Test the function with sample inputs\nprint(count_Intgral_Points(-1, -1, 1, 1)) # output should be 2\nprint(count_Intgral_Points(0, 0, 2, 2)) # output should be 9\nprint(count_Intgral_Points(0, 0, 3, 3)) # output should be 20\nprint(count_Intgral_Points(-2, -2, 2, 2)) # output should be 6\nprint(count_Intgral_Points(-3, -3, 3, 3)) # output should be 40\nprint(count_Intgral_Points(-3, -3, 0, 3)) # output should be 40\nprint(count_Intgral_Points(0, 0, 5, 5)) # output should be 22\nprint(count_Intgral_Points(-3, -3, 3, 0)) # output should be 16\n",
        "generated_testcode": "assert count_Intgral_Points(0,0,2,2) == 5\n",
        "test": "assert count_Intgral_Points(1,1,4,4) == 4\nassert count_Intgral_Points(1,2,1,2) == 1\nassert count_Intgral_Points(4,2,6,4) == 1",
        "canonical_solution": "def count_Intgral_Points(x1,y1,x2,y2): \r\n    return ((y2 - y1 - 1) * (x2 - x1 - 1)) "
    },
    {
        "number": 191,
        "prompt": "Write a function to check whether the given month name contains 30 days or not.\ndef check_monthnumber(monthname3):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    monthname = monthname3.lower()\n    if monthname == 'january' or monthname == 'march' or monthname == 'may' or monthname == 'july' or monthname == 'july' or monthname == 'august' or monthname == 'october' or monthname == 'december':\n        print(\"30 days\")\n    elif monthname == 'april' or monthname == 'june' or monthname == 'september' or monthname == 'november':\n        print(\"30 days\")\n    else:\n        print(\"28 days\")\n\n\n#test the function\ncheck_monthnumber(\"January\") # 30 days\ncheck_monthnumber(\"February\") # 28 days\ncheck_monthnumber(\"April\") # 30 days\ncheck_monthnumber(\"May\") # 31 days\n\n\n# one liner\ndef check_monthnumber_one_liner(monthname):\n    print(\"30 days\" if monthname.lower() in ['january', 'march', 'may', 'july', 'july', 'august', 'october', 'december'] else \"28 days\" if monthname.lower() in ['april', 'june', 'september', 'november'] else \"30 days\") ",
        "generated_testcode": "assert check_monthnumber(30) == True\n",
        "test": "assert check_monthnumber(\"February\")==False\nassert check_monthnumber(\"June\")==True\nassert check_monthnumber(\"April\")==True",
        "canonical_solution": "def check_monthnumber(monthname3):\r\n  if monthname3 ==\"April\" or monthname3== \"June\" or monthname3== \"September\" or monthname3== \"November\":\r\n    return True\r\n  else:\r\n    return False"
    },
    {
        "number": 192,
        "prompt": "Write a python function to check whether a string has atleast one letter and one number.\ndef check_String(str): \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    if any(char.isdigit() for char in str) and any(char.isalpha() for char in str): \n        return True\n    else: \n        return False ",
        "generated_testcode": "assert check_String(123abc) == True\n",
        "test": "assert check_String('thishasboth29') == True\nassert check_String('python') == False\nassert check_String ('string') == False",
        "canonical_solution": "def check_String(str): \r\n    flag_l = False\r\n    flag_n = False\r\n    for i in str: \r\n        if i.isalpha(): \r\n            flag_l = True  \r\n        if i.isdigit(): \r\n            flag_n = True\r\n    return flag_l and flag_n "
    },
    {
        "number": 193,
        "prompt": "Write a function to remove the duplicates from the given tuple.\ndef remove_tuple(test_tup):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    new_tup = []\n    for i in test_tup:\n        if i not in new_tup:\n            new_tup.append(i)\n    return tuple(new_tup)\n\n# Test the function with an example\nprint(remove_tuple((1, 2, 3, 2, 4, 5, 2, 6, 7, 4, 8, 9, 9))\n# Output: (1, 2, 3, 4, 5, 6, 7, 8, 9) ",
        "generated_testcode": "assert remove_tuple(()) == ()\n",
        "test": "assert remove_tuple((1, 3, 5, 2, 3, 5, 1, 1, 3)) == (1, 2, 3, 5)\nassert remove_tuple((2, 3, 4, 4, 5, 6, 6, 7, 8, 8)) == (2, 3, 4, 5, 6, 7, 8)\nassert remove_tuple((11, 12, 13, 11, 11, 12, 14, 13)) == (11, 12, 13, 14)",
        "canonical_solution": "def remove_tuple(test_tup):\r\n  res = tuple(set(test_tup))\r\n  return (res) "
    },
    {
        "number": 194,
        "prompt": "Write a python function to convert octal number to decimal number.\ndef octal_To_Decimal(n):  \n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    decimal = 0  \n    base = 1  \n    while n > 0:  \n        last_digit = n % 10  \n        decimal += last_digit * base  \n        n = n // 10  \n        base = base * 8  \n    return decimal  \n  \n# Driver code  \noctal_num = 53  \nprint(\"Octal Number:\", octal_num)  \nprint(\"Decimal Equivalent:\", octal_To_Decimal(octal_num)) ",
        "generated_testcode": "assert octal_To_Decimal(10) == 8\n",
        "test": "assert octal_To_Decimal(25) == 21\nassert octal_To_Decimal(30) == 24\nassert octal_To_Decimal(40) == 32",
        "canonical_solution": "def octal_To_Decimal(n):  \r\n    num = n; \r\n    dec_value = 0; \r\n    base = 1; \r\n    temp = num; \r\n    while (temp): \r\n        last_digit = temp % 10; \r\n        temp = int(temp / 10); \r\n        dec_value += last_digit*base; \r\n        base = base * 8; \r\n    return dec_value; "
    },
    {
        "number": 195,
        "prompt": "Write a python function to find the first position of an element in a sorted array.\ndef first(arr,x,n): \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    low = 0\n    high = n-1\n    result = -1\n    while (low <= high):\n        mid = (low + high) // 2\n        if arr[mid] == x:\n            result = mid\n            high = mid - 1\n        elif arr[mid] < x:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return result\n\n# Example usage:\narr = [1, 2, 3, 4, 4, 4, 5, 6, 7, 7, 8, 9]\nx = 4\nn = len(arr)\nprint(first(arr,x,n)) # Output: 2\n\narr = [1, 2, 3, 4, 4, 5, 6, 7, 7, 8, 9]\nx = 6\nn = len(arr)\nprint(first(arr,x,n)) # Output: 4\n\narr = [1, 2, 3, 4, 4, 5, 6, 7, 7, 8, 9]\nx = 10\nn = len(arr)\nprint(first(arr,x,n)) # Output: -1\n\n# Time complexity: O(logn)\n# Space complexity: O(1)\n# Note: We can also use binary search to solve this problem in O(logn) time complexity by making use of the fact that the array",
        "generated_testcode": "assert first([1,2,3,4,4,4,5,6,7,7,8,9], 4, 7) == 2\n",
        "test": "assert first([1,2,3,4,5,6,6],6,6) == 5\nassert first([1,2,2,2,3,2,2,4,2],2,9) == 1\nassert first([1,2,3],1,3) == 0",
        "canonical_solution": "def first(arr,x,n): \r\n    low = 0\r\n    high = n - 1\r\n    res = -1  \r\n    while (low <= high):\r\n        mid = (low + high) // 2 \r\n        if arr[mid] > x:\r\n            high = mid - 1\r\n        elif arr[mid] < x:\r\n            low = mid + 1\r\n        else:\r\n            res = mid\r\n            high = mid - 1\r\n    return res"
    },
    {
        "number": 196,
        "prompt": "Write a function to remove all the tuples with length k.\ndef remove_tuples(test_list, K):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    result = []\n    for tup in test_list:\n        if len(tup) != K:\n            result.append(tup)\n    return result\n\n# Test the function with the given test cases\ntest_list = [(1, 2, 3), (4, 5, 6), (7, 8, 9, 10), (10, 11), (12, 13, 14, 15, 16), (17, 18), (19, 20), (21, 22, 23, 24, 25, 26)]\nK = 3\nprint(remove_tuples(test_list, K)) # Output: [(1, 2, 3), (4, 5, 6), (10, 11), (19, 20)]\n\ntest_list = [(1, 2, 3, 4), (5, 6, 7), (8, 9, 10, 11), (12, 13, 14, 15, 16), (17, 18), (19, 20, 21, 22, 23, 24, 25, 26)]\nK = 4\nprint(remove_tuples(test_list, K)) # Output: [(5, 6, 7), (12, 13, ",
        "generated_testcode": "assert remove_tuples([(1,2,3,4), (5,6,7,8), (9,10), (11,12,13,14), (15,16), (17,18,19,20,21)], 2) == [(1,2,3,4), (9,10), (15,16)]\n",
        "test": "assert remove_tuples([(4, 5), (4, ), (8, 6, 7), (1, ), (3, 4, 6, 7)] , 1) == [(4, 5), (8, 6, 7), (3, 4, 6, 7)]\nassert remove_tuples([(4, 5), (4,5), (6, 7), (1, 2, 3), (3, 4, 6, 7)] ,2) == [(1, 2, 3), (3, 4, 6, 7)]\nassert remove_tuples([(1, 4, 4), (4, 3), (8, 6, 7), (1, ), (3, 6, 7)] , 3) == [(4, 3), (1,)]",
        "canonical_solution": "def remove_tuples(test_list, K):\r\n  res = [ele for ele in test_list if len(ele) != K]\r\n  return (res) "
    },
    {
        "number": 197,
        "prompt": "Write a function to perform the exponentiation of the given two tuples.\ndef find_exponentio(test_tup1, test_tup2):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    result = 1\n    for i in range(test_tup2[1]):\n        result *= test_tup1[0]\n    return result\n\n\n# Test cases\nprint(find_exponentio((2, 3)) # Should return 8\nprint(find_exponentio((4, 2)) # Should return 16\nprint(find_exponentio((5, 0)) # Should return 1\nprint(find_exponentio((2, 10)) # Should return 1024\nprint(find_exponentio((5, 5)) # Should return 3125\nprint(find_exponentio((10, 100)) # Should return 107158349824",
        "generated_testcode": "assert find_exponentio((2,3) , (4,5) ) == (32, 125)\n",
        "test": "assert find_exponentio((10, 4, 5, 6), (5, 6, 7, 5)) == (100000, 4096, 78125, 7776)\nassert find_exponentio((11, 5, 6, 7), (6, 7, 8, 6)) == (1771561, 78125, 1679616, 117649)\nassert find_exponentio((12, 6, 7, 8), (7, 8, 9, 7)) == (35831808, 1679616, 40353607, 2097152)",
        "canonical_solution": "def find_exponentio(test_tup1, test_tup2):\r\n  res = tuple(ele1 ** ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\r\n  return (res)\r\n"
    },
    {
        "number": 198,
        "prompt": "Write a function to find the largest triangle that can be inscribed in an ellipse.\ndef largest_triangle(a,b): \n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    return 0.5*a*b\n\n# Test the function with the given values\na = 6\nb = 4\nprint(largest_triangle(a,b))\n\n# Test the function with the given values\na = 4\nb = 6\nprint(largest_triangle(a,b))\n\n# Test the function with the given values\na = 3\nb = 5\nprint(largest_triangle(a,b))\n\n# Test the function with the given values\na = 5\nb = 4\nprint(largest_triangle(a,b))",
        "generated_testcode": "assert largest_triangle(3, 4) == 6.0\n",
        "test": "assert largest_triangle(4,2)==10.392304845413264\nassert largest_triangle(5,7)==4.639421805988064\nassert largest_triangle(9,1)==105.2220865598093",
        "canonical_solution": "import math\r\ndef largest_triangle(a,b): \r\n    if (a < 0 or b < 0): \r\n        return -1 \r\n    area = (3 * math.sqrt(3) * pow(a, 2)) / (4 * b);  \r\n    return area "
    },
    {
        "number": 199,
        "prompt": "Write a python function to find highest power of 2 less than or equal to given number.\ndef highest_Power_of_2(n): \n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": true,
        "answer": "    power = 0\n    while (n): \n        power += 1\n        n >>= 1\n    return power \n\n# Test the function \nn = 10\nprint(\"Highest power of 2 less than or equal to\", n, \"is\", highest_Power_of_2(n)) ",
        "generated_testcode": "assert highest_Power_of_2(10) == 4\n",
        "test": "assert highest_Power_of_2(10) == 8\nassert highest_Power_of_2(19) == 16\nassert highest_Power_of_2(32) == 32",
        "canonical_solution": "def highest_Power_of_2(n): \r\n    res = 0; \r\n    for i in range(n, 0, -1):  \r\n        if ((i & (i - 1)) == 0): \r\n            res = i; \r\n            break;      \r\n    return res; "
    },
    {
        "number": 200,
        "prompt": "Write a function to find all index positions of the maximum values in a given list.\ndef position_max(list1):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    max_value = max(list1)\n    return [i for i, x in enumerate(list1) if x == max_value]\n\n# Example usage:\nlist1 = [5, 2, 8, 9, 1, 8, 3, 5, 9, 1, 4, 8, 2, 9, 7, 4, 1]\nprint(position_max(list1)) # Output: [1, 5, 7]\n",
        "generated_testcode": "assert position_max([1, 2, 3, 4, 5, 6, 7, 8, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9",
        "test": "assert position_max([12,33,23,10,67,89,45,667,23,12,11,10,54])==[7]\nassert position_max([1,2,2,2,4,4,4,5,5,5,5])==[7,8,9,10]\nassert position_max([2,1,5,6,8,3,4,9,10,11,8,12])==[11]",
        "canonical_solution": "def position_max(list1):\r\n    max_val = max(list1)\r\n    max_result = [i for i, j in enumerate(list1) if j == max_val]\r\n    return max_result"
    },
    {
        "number": 201,
        "prompt": "Write a python function to check whether the elements in a list are same or not.\ndef chkList(lst): \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    return len(set(lst) == 1\n\n#Example:\nlst = [1, 2, 3, 4, 5]\nprint(chkList(lst)) #True\n\nlst = [1, 2, 2, 3, 4]\nprint(chkList(lst)) #False\n\n#Explanation: \n#In the first case, all the elements in the list are different so the length of the set of the list will be the same as the length of the list, which is 1, hence the output will be True.\n#In the second case, the second element is repeated so the length of the set will be 3, which is less than the length of the list, hence the output will be False. ",
        "generated_testcode": "assert chkList([\"apple\", \"banana\", \"cherry\", \"apple\", \"banana\", \"cherry\"]) == True\n",
        "test": "assert chkList(['one','one','one']) == True\nassert chkList(['one','Two','Three']) == False\nassert chkList(['bigdata','python','Django']) == False",
        "canonical_solution": "def chkList(lst): \r\n    return len(set(lst)) == 1"
    },
    {
        "number": 202,
        "prompt": "Write a function to remove even characters in a string.\ndef remove_even(str1):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    str_list = list(str1)\n    new_list = []\n    for char in str_list:\n        if char.isdigit() and int(char) % 2 == 0:\n            str_list.remove(char)\n    return ''.join(str_list)\n\n\n# Test the function\nprint(remove_even(\"hello1234world56\"))  # Output: \"h3o5\"\nprint(remove_even(\"python12345\"))    # Output: \"ythn\"\nprint(remove_even(\"ab23cd456\"))     # Output: \"cd\"\nprint(remove_even(\"\"))           # Output: \"\"\nprint(remove_even(\"a\"))         # Output: \"a\"\n\n\n# or \n\ndef remove_even(str1):\n    return ''.join([char for char in str1 if char.isdigit() and int(char) % 2 != 0])\n\n# Test the function\nprint(remove_even(\"hello1234world56\"))  # Output: \"h3o5\"\nprint(remove_even(\"python12345\"))    # Output: \"ythn\"\nprint(remove_even(\"ab23cd456\"))     # Output: \"cd\"\nprint(remove_even(\"\"))           # Output: \"\"\nprint(remove_even(\"a\"))         # Output: \"a\" ",
        "generated_testcode": "assert remove_even(123456789) == \"1357\"\n",
        "test": "assert remove_even(\"python\")==(\"pto\")\nassert remove_even(\"program\")==(\"porm\")\nassert remove_even(\"language\")==(\"lnug\")",
        "canonical_solution": "def remove_even(str1):\r\n str2 = ''\r\n for i in range(1, len(str1) + 1):\r\n    if(i % 2 != 0):\r\n        str2 = str2 + str1[i - 1]\r\n return str2"
    },
    {
        "number": 203,
        "prompt": "Write a python function to find the hamming distance between given two integers.\ndef hamming_Distance(n1,n2) : \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    x = bin(n1 ^ n2)    # XOR operation to find the different bits between n1 and n2\n    x = x.count('1')  # count the number of 1's in x\n    return x\n\n# Test the function\nprint(hamming_Distance(5, 13))  # Output : 2\nprint(hamming_Distance(11, 13)) # Output : 2\nprint(hamming_Distance(37, 73)) # Output : 2\nprint(hamming_Distance(10, 25)) # Output : 2\n\n\n#Function to find the hamming distance between two integers\ndef hamming_distance(x, y):\n    # xor the two numbers\n    x_xor_y = x ^ y\n    # convert the xor result to binary\n    binary_xor = bin(x_xor_y)\n    # count the number of 1's in the binary result\n    count = binary_xor.count('1')\n    return count\n\n# Test the function\nprint(hamming_distance(5, 13)) # Output : 2\nprint(hamming_distance(11, 13)) # Output : 2\nprint(hamming_distance(37, 73)) # Output : 2\nprint(hamming_distance(10, 25)) # Output : 2 ",
        "generated_testcode": "assert hamming_Distance(10, 4) == 2\n",
        "test": "assert hamming_Distance(4,8) == 2\nassert hamming_Distance(2,4) == 2\nassert hamming_Distance(1,2) == 2",
        "canonical_solution": "def hamming_Distance(n1,n2) : \r\n    x = n1 ^ n2  \r\n    setBits = 0\r\n    while (x > 0) : \r\n        setBits += x & 1\r\n        x >>= 1\r\n    return setBits  "
    },
    {
        "number": 204,
        "prompt": "Write a python function to count the occurrence of a given character in a string.\ndef count(s,c) : \n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    count = 0\n    for i in s : \n        if i == c : \n            count += 1\n    return count \n\n#Test the function \ns = \"hello world\"\nc = \"l\"\nprint(count(s,c)) #output: 3 ",
        "generated_testcode": "assert count(\"hello world\", \"l\") == 3\n",
        "test": "assert count(\"abcc\",\"c\") == 2\nassert count(\"ababca\",\"a\") == 3\nassert count(\"mnmm0pm\",\"m\") == 4",
        "canonical_solution": "def count(s,c) : \r\n    res = 0 \r\n    for i in range(len(s)) : \r\n        if (s[i] == c): \r\n            res = res + 1\r\n    return res "
    },
    {
        "number": 205,
        "prompt": "Write a function to find the inversions of tuple elements in the given tuple list.\ndef inversion_elements(test_tup):\n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    count = 0\n    for i in range(len(test_tup)):\n        for j in range(i+1, len(test_tup)):\n            if test_tup[i] > test_tup[j]:\n                count += 1\n    return count\n\n#Example usage:\ntest_tup = (1, 2, 3, 4, 5, 6, 7)\nprint(inversion_elements(test_tup))\n#Output: 6\n\ntest_tup = (5, 4, 3, 2, 1)\nprint(inversion_elements(test_tup))\n#Output: 6\n\ntest_tup = (1, 3, 5, 2, 4, 7, 6)\nprint(inversion_elements(test_tup))\n#Output: 6\n\ntest_tup = (1, 3, 2, 4, 5, 7, 6)\nprint(inversion_elements(test_tup))\n#Output: 10\n\ntest_tup = (2, 1, 4, 3, 5, 6, 7)\nprint(inversion_elements(test_tup))\n#Output: 10 ",
        "generated_testcode": "assert inversion_elements(()) == 0\n",
        "test": "assert inversion_elements((7, 8, 9, 1, 10, 7)) == (-8, -9, -10, -2, -11, -8)\nassert inversion_elements((2, 4, 5, 6, 1, 7)) == (-3, -5, -6, -7, -2, -8)\nassert inversion_elements((8, 9, 11, 14, 12, 13)) == (-9, -10, -12, -15, -13, -14)",
        "canonical_solution": "def inversion_elements(test_tup):\r\n  res = tuple(list(map(lambda x: ~x, list(test_tup))))\r\n  return (res) "
    },
    {
        "number": 206,
        "prompt": "Write a function to perform the adjacent element concatenation in the given tuples.\ndef concatenate_elements(test_tup):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    result = []\n    for i in range(len(test_tup)):\n        if i != len(test_tup)-1:\n            result.append(test_tup[i] + test_tup[i+1])\n    return tuple(result)\n\n#Test the function\nprint(concatenate_elements((\"hello\", 1, \"world\", 2, \"how\", 3, \"are\", \"you\")) # Output: (\"helloworld\", \"o\", \"howare\", \"you\")\nprint(concatenate_elements(True, False, \"yes\", True, False, \"no\", \"maybe\") # Output: (\"TrueFalse\", \"yes\", \"Falsen\", \"maybe\")\nprint(concatenate_elements((\"a\", \"b\", \"c\", \"d\", \"e\", \"f\")) # Output: (\"ab\", \"bc\", \"de\") ",
        "generated_testcode": "assert concatenate_elements((\"hello\", \"world\") == \"helloworld\"\n",
        "test": "assert concatenate_elements((\"DSP \", \"IS \", \"BEST \", \"FOR \", \"ALL \", \"UTS\")) == ('DSP IS ', 'IS BEST ', 'BEST FOR ', 'FOR ALL ', 'ALL UTS')\nassert concatenate_elements((\"RES \", \"IS \", \"BEST \", \"FOR \", \"ALL \", \"QESR\")) == ('RES IS ', 'IS BEST ', 'BEST FOR ', 'FOR ALL ', 'ALL QESR')\nassert concatenate_elements((\"MSAM\", \"IS \", \"BEST \", \"FOR \", \"ALL \", \"SKD\")) == ('MSAMIS ', 'IS BEST ', 'BEST FOR ', 'FOR ALL ', 'ALL SKD')",
        "canonical_solution": "def concatenate_elements(test_tup):\r\n  res = tuple(i + j for i, j in zip(test_tup, test_tup[1:]))\r\n  return (res) "
    },
    {
        "number": 207,
        "prompt": "Write a function to count the longest repeating subsequences such that the two subsequences don\u2019t have same string characters at same positions.\ndef find_longest_repeating_subseq(str): \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    n = len(str) \n    dp = [[0]*n for _ in range(n)] \n    ans = 0\n    for i in range(n): \n        dp[i][i] = 1\n    for i in range(n-1): \n        if str[i] == str[i+1]: \n            dp[i][i+1] = 1\n            ans = 1\n    for l in range(2, n): \n        for i in range(n-l): \n            j = i + l \n            if str[i] == str[j]: \n                dp[i][j+1] = dp[i+1][j] + 1\n                ans = max(ans, dp[i][j+1]) \n            else: \n                dp[i][j+1] = max(dp[i+1][j+1], dp[i][j]) \n                ans = max(ans, dp[i][j+1]) \n    return ans ",
        "generated_testcode": "assert find_longest_repeating_subseq(\u201cabcabc\u201d) == 1\n",
        "test": "assert find_longest_repeating_subseq(\"AABEBCDD\") == 3\nassert find_longest_repeating_subseq(\"aabb\") == 2\nassert find_longest_repeating_subseq(\"aab\") == 1",
        "canonical_solution": "def find_longest_repeating_subseq(str): \r\n\tn = len(str) \r\n\tdp = [[0 for k in range(n+1)] for l in range(n+1)] \r\n\tfor i in range(1, n+1): \r\n\t\tfor j in range(1, n+1): \r\n\t\t\tif (str[i-1] == str[j-1] and i != j): \r\n\t\t\t\tdp[i][j] = 1 + dp[i-1][j-1] \r\n\t\t\telse: \r\n\t\t\t\tdp[i][j] = max(dp[i][j-1], dp[i-1][j]) \r\n\treturn dp[n][n]"
    },
    {
        "number": 208,
        "prompt": "Write a function to check the given decimal with a precision of 2 by using regex.\ndef is_decimal(num):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    pattern = r\"^\\d+\\.\\d{1,2}$\"\n    return re.match(pattern, num) is not None\n\nprint(is_decimal(\"0.00\")) # True\nprint(is_decimal(\"1.00\")) # True\nprint(is_decimal(\"1.000\")) # False\nprint(is_decimal(\"1.0000\")) # False\nprint(is_decimal(\"1.234\")) # False\nprint(is_decimal(\"1.23\")) # True\nprint(is_decimal(\"12.34\")) # True\nprint(is_decimal(\"12.345\")) # False\nprint(is_decimal(\"12.3456\")) # False\nprint(is_decimal(\"123.45\")) # False\nprint(is_decimal(\"123.456\")) # False\nprint(is_decimal(\"123.4567\")) # False\nprint(is_decimal(\"123.45678\")) # False\nprint(is_decimal(\"123.456789\")) # False\nprint(is_decimal(\"123.4567890\")) # False\nprint(is_decimal(\"123.45678900\")) # False\nprint(is_decimal(\"123.45678901\")) # False\nprint(is_decimal(\"123",
        "generated_testcode": "assert is_decimal(123.45) == True\n",
        "test": "assert is_decimal('123.11') == True\nassert is_decimal('0.21') == True\nassert is_decimal('123.1214') == False",
        "canonical_solution": "import re\r\ndef is_decimal(num):\r\n  num_fetch = re.compile(r\"\"\"^[0-9]+(\\.[0-9]{1,2})?$\"\"\")\r\n  result = num_fetch.search(num)\r\n  return bool(result)"
    },
    {
        "number": 209,
        "prompt": "Write a function to delete the smallest element from the given heap and then insert a new item.\ndef heap_replace(heap,a):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": true,
        "answer": "    if len(heap) > 0:\n        i = heap.pop(0)\n        if len(heap) == 1:\n            heap.append(a)\n            return heap\n        else:\n            heap.append(a)\n            heapify(heap)\n            return heap\n    else:\n        heap.append(a)\n        return heap\n\n# Define a function to heapify the heap after insertion of a new element\ndef heapify(heap):\n    # Start from the last node and move towards the root, swapping elements as necessary\n    parent = len(heap)-1\n    child = 0\n    while parent > 0:\n        left_child = 2*parent + 1\n        right_child = 2*parent + 2\n        smallest = parent\n        if left_child < len(heap) and heap[left_child] < heap[parent]:\n            smallest = left_child\n        if right_child < len(heap) and heap[right_child] < heap[smallest]:\n            smallest = right_child\n        if smallest != parent:\n            # Swap the parent with the smallest child and move the parent to its new position\n            heap[parent],heap[smallest] = heap[smallest],heap[parent]\n            parent = smallest\n        else:\n            break\n\n# Example usage\nheap = [4, 3, 7, 5, 1, 2, 9, 6, 8, 10]\n",
        "generated_testcode": "assert heap_replace([1,2,3,4,5,6,7,8,9], 10) == [2,3,4,5,6,7,8,9,10]\n",
        "test": "assert heap_replace( [25, 44, 68, 21, 39, 23, 89],21)==[21, 25, 23, 44, 39, 68, 89]\nassert heap_replace([25, 44, 68, 21, 39, 23, 89],110)== [23, 25, 68, 44, 39, 110, 89]\nassert heap_replace([25, 44, 68, 21, 39, 23, 89],500)==[23, 25, 68, 44, 39, 500, 89]",
        "canonical_solution": "import heapq as hq\r\ndef heap_replace(heap,a):\r\n  hq.heapify(heap)\r\n  hq.heapreplace(heap, a)\r\n  return heap"
    },
    {
        "number": 210,
        "prompt": "Write a function to check that the given string contains only a certain set of characters(in this case a-z, a-z and 0-9) by using regex.\ndef is_allowed_specific_char(string):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    regex = re.compile(r'^[a-zA-Z0-9]+$')\n    return bool(regex.match(string))\n\n# Example usage:\nprint(is_allowed_specific_char(\"Hello123\")) # Output: True\nprint(is_allowed_specific_char(\"Hello World\")) # Output: False\nprint(is_allowed_specific_char(\"Hello-World\")) # Output: False\nprint(is_allowed_specific_char(\"HelloWorld\")) # Output: False\nprint(is_allowed_specific_char(\"123456\")) # Output: True\nprint(is_allowed_specific_char(\"123456!\")) # Output: False\n\n# Explanation:\n# The function uses the re.compile() method to create a regular expression object and then checks if the string matches the regex pattern using regex.match() method.\n# The pattern ^[a-zA-Z0-9]+$ matches any string that contains only alphanumeric characters.\n# The + operator ensures that there is at least one character in the string.\n# The function returns True if the string matches the pattern, else False. ",
        "generated_testcode": "assert is_allowed_specific_char(123abc) == False\n",
        "test": "assert is_allowed_specific_char(\"ABCDEFabcdef123450\") == True\nassert is_allowed_specific_char(\"*&%@#!}{\") == False\nassert is_allowed_specific_char(\"HELLOhowareyou98765\") == True",
        "canonical_solution": "import re\r\ndef is_allowed_specific_char(string):\r\n    get_char = re.compile(r'[^a-zA-Z0-9.]')\r\n    string = get_char.search(string)\r\n    return not bool(string)"
    },
    {
        "number": 211,
        "prompt": "Write a python function to count numbers whose oth and nth bits are set.\ndef count_Num(n): \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    count = 0 \n    for i in range(1, 2**n): \n        count += 1 if bin(i).count('1') == 1 and bin(i).count('1') == 2 else 0\n    return count \n\n# Test the function with n = 4 ",
        "generated_testcode": "assert count_Num(10) == 1\n",
        "test": "assert count_Num(2) == 1\nassert count_Num(3) == 2\nassert count_Num(1) == 1",
        "canonical_solution": "def count_Num(n): \r\n    if (n == 1): \r\n        return 1\r\n    count = pow(2,n - 2) \r\n    return count "
    },
    {
        "number": 212,
        "prompt": "Write a python function to find the sum of fourth power of n natural numbers.\ndef fourth_Power_Sum(n): \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    sum = 0 \n    for i in range(1, n+1): \n        sum += i**4\n    return sum ",
        "generated_testcode": "assert fourth_Power_Sum(5) == 2260\n",
        "test": "assert fourth_Power_Sum(2) == 17\nassert fourth_Power_Sum(4) == 354\nassert fourth_Power_Sum(6) == 2275",
        "canonical_solution": "import math  \r\ndef fourth_Power_Sum(n): \r\n    sum = 0\r\n    for i in range(1,n+1) : \r\n        sum = sum + (i*i*i*i) \r\n    return sum"
    },
    {
        "number": 213,
        "prompt": "Write a function to perform the concatenation of two string tuples.\ndef concatenate_strings(test_tup1, test_tup2):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    result = \"\"\n    for i in range(len(test_tup1)):\n        result = result + test_tup1[i]\n    for i in range(len(test_tup2):\n        result = result + test_tup2[i]\n    return result\n\n# Test the function\nprint(concatenate_strings((\"Hello\", \"world\")) # Output: \"Helloworld\"\nprint(concatenate_strings((\"Python\", \"is\")) # Output: \"Pythonis\"\nprint(concatenate_strings((\"I\", \"love\")) # Output: \"Ilove\"\n\n\n# Another way using join function\ndef concatenate_strings(test_tup1, test_tup2):\n    return ''.join(test_tup1 + test_tup2)\n\n# Test the function\nprint(concatenate_strings((\"Hello\", \"world\")) # Output: \"Helloworld\"\nprint(concatenate_strings((\"Python\", \"is\")) # Output: \"Pythonis\"\nprint(concatenate_strings((\"I\", \"love\")) # Output: \"Ilove\"\n\n",
        "generated_testcode": "assert concatenate_strings((\"hello\", \"world\") == \"helloworld\"\n",
        "test": "assert concatenate_strings((\"Manjeet\", \"Nikhil\", \"Akshat\"), (\" Singh\", \" Meherwal\", \" Garg\")) == ('Manjeet Singh', 'Nikhil Meherwal', 'Akshat Garg')\nassert concatenate_strings((\"Shaik\", \"Ayesha\", \"Sanya\"), (\" Dawood\", \" Begum\", \" Singh\")) == ('Shaik Dawood', 'Ayesha Begum', 'Sanya Singh')\nassert concatenate_strings((\"Harpreet\", \"Priyanka\", \"Muskan\"), (\"Kour\", \" Agarwal\", \"Sethi\")) == ('HarpreetKour', 'Priyanka Agarwal', 'MuskanSethi')",
        "canonical_solution": "def concatenate_strings(test_tup1, test_tup2):\r\n  res = tuple(ele1 + ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\r\n  return (res) "
    },
    {
        "number": 214,
        "prompt": "Write a function to convert radians to degrees.\ndef degree_radian(radian):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": true,
        "answer": "    degree = (radian * 180) / 3.14159\n    return degree\n\n#Test the function\nprint(degree_radian(3.14159))\n#Output: 180.0\n\n\n#Write a function to convert centimeters to inches\ndef centimeter_inches(cm):\n    inches = cm * 0.39370\n    return inches\n\n#Test the function\nprint(centimeter_inches(10))\n#Output: 3.9370\n\n\n#Write a function to convert kilometers to miles\ndef km_to_miles(km):\n    miles = km * 0.621371\n    return miles\n\n#Test the function\nprint(km_to_miles(10))\n#Output: 6.21371\n\n\n#Write a function to convert feet to meters\ndef feet_to_meters(feet):\n    meters = feet * 0.3048\n    return meters\n\n#Test the function\nprint(feet_to_meters(10))\n#Output: 3.048\n\n\n#Write a function to convert pounds to kilograms\ndef lb_to_kg(pound):\n    kg = pound * 0.453592\n    return kg\n\n#Test the function\nprint(lb_to_kg(10))\n#Output: 4.53592\n",
        "generated_testcode": "assert degree_radian(3.14159) == 180\n",
        "test": "assert degree_radian(90)==5156.620156177409\nassert degree_radian(60)==3437.746770784939\nassert degree_radian(120)==6875.493541569878",
        "canonical_solution": "import math\r\ndef degree_radian(radian):\r\n degree = radian*(180/math.pi)\r\n return degree"
    },
    {
        "number": 215,
        "prompt": "Write a function to decode a run-length encoded given list.\ndef decode_list(alist):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    result = []\n    current = 0\n    for i in range(0, len(alist), 2):\n        count, val = alist[i], alist[i+1]\n        result += [val]*count\n    return result\n\n# Test the function with an example\nalist = [2, 'a', 3, 'b', 5, 'c', 1, 'd']\nprint(decode_list(alist)) # Output: ['a', 'a', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'c', 'd']\n\n\n# Test the function with another example\nalist = [1, 'a', 2, 3, 'b', 2, 1, 'c', 1, 4, 'd', 4, 'e', 1]\nprint(decode_list(alist)) # Output: ['a', 'b', 'b', 'c', 'd', 'd', 'd', 'd', 'd', 'e', 'e', 'e', 'e', 'e']\n\n# Test the function with an empty list\nalist = []\nprint(decode_list(alist)) # Output: []",
        "generated_testcode": "assert decode_list([\"A2\", \"B3\", \"C4\", \"D\"] == [\"A\", \"A\", \"B\", \"B\", \"B\", \"C\", \"C\", \"C\", \"C\", \"D\"])\n",
        "test": "assert decode_list([[2, 1], 2, 3, [2, 4], 5,1])==[1,1,2,3,4,4,5,1]\nassert decode_list(['a', 'u', 't', 'o', 'm', 'a', 't', 'i', 'c', 'a', [2, 'l'], 'y'])==['a', 'u', 't', 'o', 'm', 'a', 't', 'i', 'c', 'a', 'l', 'l', 'y']\nassert decode_list(['p', 'y', 't', 'h', 'o', 'n'])==['p', 'y', 't', 'h', 'o', 'n']",
        "canonical_solution": "def decode_list(alist):\r\n    def aux(g):\r\n        if isinstance(g, list):\r\n            return [(g[1], range(g[0]))]\r\n        else:\r\n            return [(g, [0])]\r\n    return [x for g in alist for x, R in aux(g) for i in R]"
    },
    {
        "number": 216,
        "prompt": "Write a function to check if a nested list is a subset of another nested list.\ndef check_subset_list(list1, list2): \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    \"\"\"\n    Takes two nested lists as input and returns True if list1 is a subset of list2, else False.\n    \"\"\"\n    if len(list1) > len(list2): \n        return False\n    \n    for i in range(len(list1)):\n        if isinstance(list1[i], list):\n            if list1[i] not in list2:\n                return False\n        elif list1[i] not in list2[i]:\n            return False\n        \n    return True\n\n\n# Test cases\nprint(check_subset_list([['a', 'b'], ['c', 'd']], [['a', 'b', ['c', 'd'], 'e'])) # True\nprint(check_subset_list([['a', 'b'], ['c', 'd']], [['a', 'b', ['c', 'd', 'e', 'f']])) # True\nprint(check_subset_list([['a', 'b'], ['c', 'd']], [['a', ['c', 'd', 'e']])) # False\nprint(check_subset_list([['a', 'b'], ['c', 'd']], [['a', ['c', 'd'], ['e']])) # True\nprint(check_subset_list([['a', ['b', 'c'], ['d', 'e']], ['f']], [['a', ['b', 'c', 'd', 'e', 'f']])) # True\nprint(check_subset_list([['a', ['b',",
        "generated_testcode": "assert check_subset_list([[1, 2, [3, 4]], [5, 6]], [[1, 2, [3, 4], 5, 6]) == True\n",
        "test": "assert check_subset_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14],[[12, 18, 23, 25, 45], [7, 11, 19, 24, 28], [1, 5, 8, 18, 15, 16]])==False\nassert check_subset_list([[2, 3, 1], [4, 5], [6, 8]],[[4, 5], [6, 8]])==True\nassert check_subset_list([['a', 'b'], ['e'], ['c', 'd']],[['g']])==False",
        "canonical_solution": "def check_subset_list(list1, list2): \r\n    l1, l2 = list1[0], list2[0] \r\n    exist = True\r\n    for i in list2: \r\n        if i not in list1: \r\n            exist = False\r\n    return exist "
    },
    {
        "number": 217,
        "prompt": "Write a python function to find the first repeated character in a given string.\ndef first_Repeated_Char(str): \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    freq = {}\n    for i in str:\n        if i in freq:\n            freq[i] += 1\n        else:\n            freq[i] = 1\n    for i in freq:\n        if freq[i] > 1:\n            return i\n    return None\n\n#test the function\nprint(first_Repeated_Char('geeksforgeeks'))\nprint(first_Repeated_Char('google'))\nprint(first_Repeated_Char('hello world'))\nprint(first_Repeated_Char('python'))\nprint(first_Repeated_Char('aabbc'))\nprint(first_Repeated_Char('abcd'))\n\n\n#output\n#e\n#g\n#w\n#None\n#a\n#a ",
        "generated_testcode": "assert first_Repeated_Char(str) == 'a' # Test case 1\n",
        "test": "assert first_Repeated_Char(\"Google\") == \"o\"\nassert first_Repeated_Char(\"data\") == \"a\"\nassert first_Repeated_Char(\"python\") == '\\0'",
        "canonical_solution": "def first_Repeated_Char(str): \r\n    h = {}\r\n    for ch in str:\r\n        if ch in h: \r\n            return ch;\r\n        else: \r\n            h[ch] = 0\r\n    return '\\0'"
    },
    {
        "number": 218,
        "prompt": "Write a python function to find the minimum operations required to make two numbers equal.\ndef min_Operations(A,B):  \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    count = 0  \n    n = len(A)  \n    for i in range(n):  \n        if A[i]!=B[i]:  \n            count+=1  \n            if A[i]>B[i]:  \n                A[i]-=1  \n            else:  \n                B[i]+=1  \n    return count  \n\n# Test the function  \nA = [1,2,3,4,5,6]  \nB = [3,1,6,5,2]  \nprint(min_Operations(A,B))  ",
        "generated_testcode": "assert min_Operations(10, 20) == 2\n",
        "test": "assert min_Operations(2,4) == 1\nassert min_Operations(4,10) == 4\nassert min_Operations(1,4) == 3",
        "canonical_solution": "import math   \r\ndef min_Operations(A,B):  \r\n    if (A > B): \r\n        swap(A,B)  \r\n    B = B // math.gcd(A,B);  \r\n    return B - 1"
    },
    {
        "number": 219,
        "prompt": "Write a function to extract maximum and minimum k elements in the given tuple.\ndef extract_min_max(test_tup, K):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    # create a list from the tuple\n    test_list = list(test_tup)\n    \n    # sort the list in ascending order\n    test_list.sort()\n    \n    # return the first K elements as min_list and last K elements as max_list\n    min_list = test_list[:K]\n    max_list = test_list[-K:]\n    \n    # return the min_list and max_list\n    return min_list, max_list\n\n\n# test the function\ntest_tup = (10, 20, 30, 40, 50, 60, 70, 80, 90)\nK = 3\nprint(extract_min_max(test_tup, K))  # Output: ([10, 20, 30], [90, 80, 70])\n\ntest_tup = (10, 20, 30, 40, 50, 60, 70, 80, 90, 100)\nK = 2\nprint(extract_min_max(test_tup, K))  # Output: ([10, 20], [90, 80])\n\ntest_tup = (10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110",
        "generated_testcode": "assert extract_min_max((), 0) == ()\n",
        "test": "assert extract_min_max((5, 20, 3, 7, 6, 8), 2) == (3, 5, 8, 20)\nassert extract_min_max((4, 5, 6, 1, 2, 7), 3) == (1, 2, 4, 5, 6, 7)\nassert extract_min_max((2, 3, 4, 8, 9, 11, 7), 4) == (2, 3, 4, 7, 8, 9, 11)",
        "canonical_solution": "\r\ndef extract_min_max(test_tup, K):\r\n  res = []\r\n  test_tup = list(test_tup)\r\n  temp = sorted(test_tup)\r\n  for idx, val in enumerate(temp):\r\n    if idx < K or idx >= len(temp) - K:\r\n      res.append(val)\r\n  res = tuple(res)\r\n  return (res) "
    },
    {
        "number": 220,
        "prompt": "Write a function to replace maximum n occurrences of spaces, commas, or dots with a colon.\ndef replace_max_specialchar(text,n):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    char_dict = {\n        ' ': 0,\n        ',': 0,\n        '.': 0\n    }\n    for char in text:\n        if char in char_dict:\n            char_dict[char] += 1\n    \n    max_count = max(char_dict.values())\n    \n    for char in char_dict:\n        if char_dict[char] == max_count:\n            text = text.replace(char,':')\n            n -= 1\n            if n == 0:\n                break\n    \n    return text\n\n# Test the function\ntext = 'the quick brown,fox.jumps over the lazy dog..'\nprint(replace_max_specialchar(text,2))\n# Output: 'the quick brown:fox:jumps over the lazy dog.'\n\ntext = 'the quick brown fox,jumps over the lazy dog, with a bang . '\nprint(replace_max_specialchar(text,3))\n# Output: 'the quick brown fox:jumps over the lazy dog: with a bang :'\n\ntext = 'the quick brown fox,jumps over the lazy dog.'\nprint(replace_max_specialchar(text,1))\n# Output: 'the quick brown fox,jumps over the lazy dog.'\n\ntext = 'the quick brown fox,jumps over the lazy dog'\nprint(replace_max_specialchar(text,3))\n# Output: 'the quick brown fox:jumps over the lazy dog",
        "generated_testcode": "assert replace_max_specialchar(\"This is a test, string. It has spaces, commas, and dots.\", 2) == \"This:is:a:test,string.It:has:spaces,and:dots.\"\n",
        "test": "assert replace_max_specialchar('Python language, Programming language.',2)==('Python:language: Programming language.')\nassert replace_max_specialchar('a b c,d e f',3)==('a:b:c:d e f')\nassert replace_max_specialchar('ram reshma,ram rahim',1)==('ram:reshma,ram rahim')",
        "canonical_solution": "import re\r\ndef replace_max_specialchar(text,n):\r\n return (re.sub(\"[ ,.]\", \":\", text, n))"
    },
    {
        "number": 221,
        "prompt": "Write a python function to find the first even number in a given list of numbers.\ndef first_even(nums):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    for num in nums:\n        if num % 2 == 0:\n            return num\n    return None\n\n# Test the function\nnums = [1, 3, 5, 2, 6, 4, 7, 8, 9, 10]\nprint(first_even(nums)) # Output: 2\n\nnums = [1, 3, 5, 9, 7]\nprint(first_even(nums)) # Output: None\n\nnums = [1, 3, 5, 7, 9]\nprint(first_even(nums)) # Output: None\n\nnums = [2, 4, 6, 8, 10]\nprint(first_even(nums)) # Output: 2\n\nnums = [2, 4, 6, 8, 10, 12]\nprint(first_even(nums)) # Output: 2\nnums = [1, 3, 5, 7]\nprint(first_even(nums)) # Output: None\n\nnums = [1, 3, 5]\nprint(first_even(nums)) # Output: None\n\nnums = [1, 3]\nprint(first_even(nums)) # Output: None\n\nnums = [2]\nprint(first_even(nums)) # Output: 2\nnums = []\nprint(first_even(nums)) # Output:",
        "generated_testcode": "assert first_even([]), None\n",
        "test": "assert first_even ([1, 3, 5, 7, 4, 1, 6, 8]) == 4\nassert first_even([2, 3, 4]) == 2\nassert first_even([5, 6, 7]) == 6",
        "canonical_solution": "def first_even(nums):\r\n    first_even = next((el for el in nums if el%2==0),-1)\r\n    return first_even"
    },
    {
        "number": 222,
        "prompt": "Write a function to check if all the elements in tuple have same data type or not.\ndef check_type(test_tuple):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    if test_tuple == ():\n        return \"Empty tuple\"\n    else:\n        res = set()\n        for i in test_tuple:\n            res.add(type(i))\n        if len(res) == 1:\n            return True\n        else:\n            return False\n\n#Testing\nprint(check_type((1, 2, 3, 4, 5)) # True\nprint(check_type((1, \"apple\", 3, 4, 5)) # False\nprint(check_type((\"apple\", \"banana\", \"orange\")) # True\nprint(check_type(()) # Empty tuple\nprint(check_type(())) # Empty tuple\n\n\n# Solution 2\ndef check_type(test_tuple):\n    if test_tuple == ():\n        return \"Empty tuple\"\n    else:\n        return len(set(map(type, test_tuple)) == 1",
        "generated_testcode": "assert check_type(()) == True\n",
        "test": "assert check_type((5, 6, 7, 3, 5, 6) ) == True\nassert check_type((1, 2, \"4\") ) == False\nassert check_type((3, 2, 1, 4, 5) ) == True",
        "canonical_solution": "def check_type(test_tuple):\r\n  res = True\r\n  for ele in test_tuple:\r\n    if not isinstance(ele, type(test_tuple[0])):\r\n      res = False\r\n      break\r\n  return (res) "
    },
    {
        "number": 223,
        "prompt": "Write a function to check for majority element in the given sorted array.\ndef is_majority(arr, n, x):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n/2:\n        return True\n    else:\n        return False\n\nn = int(input(\"Enter the length of the array: \"))\narr = list(map(int, input(\"Enter the elements of the array separated by space: \").split()))\nx = int(input(\"Enter the element to check for majority: \"))\n\nif is_majority(arr, n, x):\n    print(x, \"is the majority element\")\nelse:\n    print(x, \"is not the majority element\")\n\n\n#Test case\n#is_majority([1,2,3,4,4,4,4,4,4,5,5,6], 4, 4)  # Output: 4 is the majority element\n#is_majority([1,2,3,3,3,3,4,4,4,5], 3, 3)  # Output: 3 is the majority element\n#is_majority([1,2,3,3,3,4,4,4,5], 3, 3)  # Output: 3 is not the majority element ",
        "generated_testcode": "assert is_majority([1, 2, 3, 4, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7",
        "test": "assert is_majority([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\nassert is_majority([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\nassert is_majority([1, 1, 1, 2, 2], 5, 1) == True",
        "canonical_solution": "def is_majority(arr, n, x):\r\n\ti = binary_search(arr, 0, n-1, x)\r\n\tif i == -1:\r\n\t\treturn False\r\n\tif ((i + n//2) <= (n -1)) and arr[i + n//2] == x:\r\n\t\treturn True\r\n\telse:\r\n\t\treturn False\r\ndef binary_search(arr, low, high, x):\r\n\tif high >= low:\r\n\t\tmid = (low + high)//2 \r\n\t\tif (mid == 0 or x > arr[mid-1]) and (arr[mid] == x):\r\n\t\t\treturn mid\r\n\t\telif x > arr[mid]:\r\n\t\t\treturn binary_search(arr, (mid + 1), high, x)\r\n\t\telse:\r\n\t\t\treturn binary_search(arr, low, (mid -1), x)\r\n\treturn -1"
    },
    {
        "number": 224,
        "prompt": "Write a python function to count set bits of a given number.\ndef count_Set_Bits(n): \n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    count = 0\n    while (n): \n        count += n & 1\n        n >>= 1\n    return count ",
        "generated_testcode": "assert count_Set_Bits(0) == 0\n",
        "test": "assert count_Set_Bits(2) == 1\nassert count_Set_Bits(4) == 1\nassert count_Set_Bits(6) == 2",
        "canonical_solution": "def count_Set_Bits(n): \r\n    count = 0\r\n    while (n): \r\n        count += n & 1\r\n        n >>= 1\r\n    return count "
    },
    {
        "number": 225,
        "prompt": "Write a python function to find the minimum element in a sorted and rotated array.\ndef find_Min(arr,low,high): \n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    if high < low: \n        return -1\n    if high == low: \n        return arr[low] \n    if high == low + 1: \n        return arr[low] if arr[low]<arr[high] else arr[high] \n    mid = (low + high) // 2\n    if arr[mid]<arr[high]: \n        return find_Min(arr,low,mid) \n    return find_Min(arr,mid+1,high) \n  \ndef min_element(arr): \n    n = len(arr) \n    return find_Min(arr,0,n-1) \n  \n# Driver code \narr = [15,18,19,20,25,3,6,8,10] \nprint(min_element(arr)) ",
        "generated_testcode": "assert find_Min([3, 4, 5, 1, 2, 3], 0, 3) == 1\n",
        "test": "assert find_Min([1,2,3,4,5],0,4) == 1\nassert find_Min([4,6,8],0,2) == 4\nassert find_Min([2,3,5,7,9],0,4) == 2",
        "canonical_solution": "def find_Min(arr,low,high): \r\n    while (low < high): \r\n        mid = low + (high - low) // 2;   \r\n        if (arr[mid] == arr[high]): \r\n            high -= 1; \r\n        elif (arr[mid] > arr[high]): \r\n            low = mid + 1; \r\n        else: \r\n            high = mid; \r\n    return arr[high]; "
    },
    {
        "number": 226,
        "prompt": "Write a python function to remove the characters which have odd index values of a given string.\ndef odd_values_string(str):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    new_string = \"\"\n    for i in range(len(str)):\n        if i % 2 == 0:\n            new_string += str[i]\n    return new_string\n\n# test the function\nprint(odd_values_string(\"Hello, World!\")) # should print \"Hlo, Wrd!\"\nprint(odd_values_string(\"python\")) # should print \"ptn\"\nprint(odd_values_string(\"programming\")) # should print \"rgmmng\"\nprint(odd_values_string(\"\")) # should print \"\"\n",
        "generated_testcode": "assert odd_values_string(None) == None\n",
        "test": "assert odd_values_string('abcdef') == 'ace'\nassert odd_values_string('python') == 'pto'\nassert odd_values_string('data') == 'dt'",
        "canonical_solution": "def odd_values_string(str):\r\n  result = \"\" \r\n  for i in range(len(str)):\r\n    if i % 2 == 0:\r\n      result = result + str[i]\r\n  return result"
    },
    {
        "number": 227,
        "prompt": "Write a function to find minimum of three numbers.\ndef min_of_three(a,b,c): \n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    if a < b and a < c:\n        return a\n    elif b < c:\n        return b\n    else:\n        return c\n\nprint(min_of_three(5,10,3)) # Output: 3\nprint(min_of_three(10,20,5)) # Output: 5\nprint(min_of_three(20,10,5)) # Output: 5\nprint(min_of_three(7,15,23)) # Output: 7\n\n\n# Another way to solve the problem using ternary operator\n\ndef min_of_three(a,b,c):\n    return a if a < b and a < c else (b if b < c else c)\n\nprint(min_of_three(5,10,3)) # Output: 3\nprint(min_of_three(10,20,5)) # Output: 5\nprint(min_of_three(20,10,5)) # Output: 5\nprint(min_of_three(7,15,23)) # Output: 7 ",
        "generated_testcode": "assert min_of_three(10,20,30) == 10\n",
        "test": "assert min_of_three(10,20,0)==0\nassert min_of_three(19,15,18)==15\nassert min_of_three(-10,-20,-30)==-30",
        "canonical_solution": "def min_of_three(a,b,c): \r\n      if (a <= b) and (a <= c): \r\n        smallest = a \r\n      elif (b <= a) and (b <= c): \r\n        smallest = b \r\n      else: \r\n        smallest = c \r\n      return smallest "
    },
    {
        "number": 228,
        "prompt": "Write a python function to check whether all the bits are unset in the given range or not.\ndef all_Bits_Set_In_The_Given_Range(n,l,r):  \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    for i in range(l,r+1):\n        if bin(i).count('1')>0:\n            return False\n    return True\n    \n# Test the function\nn = 10\nl = 5\nr = 8\nprint(all_Bits_Set_In_The_Given_Range(n,l,r))\n\nn = 10\nl = 9\nr = 10\nprint(all_Bits_Set_In_The_Given_Range(n,l,r))\n\nn = 10\nl = 11\nr = 15\nprint(all_Bits_Set_In_The_Given_Range(n,l,r))\n\nn = 10\nl = 8\nr = 15\nprint(all_Bits_Set_In_The_Given_Range(n,l,r))\n\nn = 10\nl = 1\nr = 9\nprint(all_Bits_Set_In_The_Given_Range(n,l,r))\n\nn = 10\nl = 2\nr = 3\nprint(all_Bits_Set_In_The_Given_Range(n,l,r))\n\nn = 10\nl = 6\nr = 7\nprint(all_Bits_Set_In_The_Given_Range(n,l,r))\n\nn = 10\nl = 6",
        "generated_testcode": "assert all_Bits_Set_In_The_Given_Range(10, 2, 5) == True\n",
        "test": "assert all_Bits_Set_In_The_Given_Range(4,1,2) == True\nassert all_Bits_Set_In_The_Given_Range(17,2,4) == True\nassert all_Bits_Set_In_The_Given_Range(39,4,6) == False",
        "canonical_solution": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \r\n    num = (((1 << r) - 1) ^ ((1 << (l - 1)) - 1)) \r\n    new_num = n & num\r\n    if (new_num == 0): \r\n        return True\r\n    return False"
    },
    {
        "number": 229,
        "prompt": "Write a function to re-arrange the elements of the given array so that all negative elements appear before positive ones.\ndef re_arrange_array(arr, n):\n",
        "checkpoint": "7B",
        "pass": 3,
        "correct": true,
        "answer": "    neg_arr = []\n    pos_arr = []\n    for i in arr:\n        if i < 0:\n            neg_arr.append(i)\n        else:\n            pos_arr.append(i)\n    return neg_arr + pos_arr\n\n# Test the function with an example array\narr = [12, -6, -3, 0, -9, 8, 24, -1, 45, -12, 6, -7, 0]\nprint(re_arrange_array(arr, len(arr))) ",
        "generated_testcode": "assert re_arrange_array([1, 2, -3, 4, -5, 6, -7, 8, -9, 10] , 7) == [-3, -5, -7, -9, 1, 2, 4, 6, 8, 10]\n",
        "test": "assert re_arrange_array([-1, 2, -3, 4, 5, 6, -7, 8, 9], 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9]\nassert re_arrange_array([12, -14, -26, 13, 15], 5) == [-14, -26, 12, 13, 15]\nassert re_arrange_array([10, 24, 36, -42, -39, -78, 85], 7) == [-42, -39, -78, 10, 24, 36, 85]",
        "canonical_solution": "def re_arrange_array(arr, n):\r\n  j=0\r\n  for i in range(0, n):\r\n    if (arr[i] < 0):\r\n      temp = arr[i]\r\n      arr[i] = arr[j]\r\n      arr[j] = temp\r\n      j = j + 1\r\n  return arr"
    },
    {
        "number": 230,
        "prompt": "Write a function to replace blank spaces with any character in a string.\ndef replace_blank(str1,char):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": true,
        "answer": "    new_string = ''\n    for i in str1:\n        if i == ' ':\n            new_string += char\n        else:\n            new_string += i\n    return new_string\n\n#test the function\nprint(replace_blank('hello world','*'))\nprint(replace_blank('hello  world','-'))\nprint(replace_blank('  world   ','#'))\n\n#Output:\n#hello*world\n#hello-world\n##world#\n",
        "generated_testcode": "assert replace_blank(\"hello world\", \"*\" ) == \"hello*world\"\n",
        "test": "assert replace_blank(\"hello people\",'@')==(\"hello@people\")\nassert replace_blank(\"python program language\",'$')==(\"python$program$language\")\nassert replace_blank(\"blank space\",\"-\")==(\"blank-space\")",
        "canonical_solution": "def replace_blank(str1,char):\r\n str2 = str1.replace(' ', char)\r\n return str2"
    },
    {
        "number": 231,
        "prompt": "Write a function to find the maximum sum in the given right triangle of numbers.\ndef max_sum(tri, n): \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    #initialize the maximum sum\n    max_sum = 0\n    #initialize the current sum\n    curr_sum = 0\n    #loop through each element in the triangle\n    for i in range(n):\n        for j in range(i+1):\n            #add the current element to the current sum\n            curr_sum += tri[i][j]\n            #check if the current sum is greater than the max sum\n            if curr_sum > max_sum:\n                max_sum = curr_sum\n            #if the current element is not the last element in the row\n            if j < i:\n                #subtract the element to the right of it from the current sum\n                curr_sum -= tri[i][j+1]\n    return max_sum\n    \n#test the function with the sample triangle\ntri = [[1],\n [2, 3],\n [7, 4, 5],\n [4, 6, 1, 3]]\nn = 3\nprint(max_sum(tri, n)) #Output: 16\n\n\n#test the function with the sample triangle\ntri = [[1],\n [1, 2, 3],\n [7, 4, 5, 6],\n [4, 6, 1, 3, 2]]\nn = 4\nprint(max_sum(tri, n)) #Output: 18\n\n#test the function with the sample triangle\ntri = [[1],\n [1, 1, 1],\n [",
        "generated_testcode": "assert max_sum(\n    [\n        [1, 3, 5, 7, 9],\n        [1, 5, 9, 13, 15],\n        [4, 7, 10, 12, 16],\n        [6, 11, 14, 17, 20]\n    ], 3) == 37\n\n",
        "test": "assert max_sum([[1], [2,1], [3,3,2]], 3) == 6\nassert max_sum([[1], [1, 2], [4, 1, 12]], 3) == 15 \nassert max_sum([[2], [3,2], [13,23,12]], 3) == 28",
        "canonical_solution": "def max_sum(tri, n): \r\n\tif n > 1: \r\n\t\ttri[1][1] = tri[1][1]+tri[0][0] \r\n\t\ttri[1][0] = tri[1][0]+tri[0][0] \r\n\tfor i in range(2, n): \r\n\t\ttri[i][0] = tri[i][0] + tri[i-1][0] \r\n\t\ttri[i][i] = tri[i][i] + tri[i-1][i-1] \r\n\t\tfor j in range(1, i): \r\n\t\t\tif tri[i][j]+tri[i-1][j-1] >= tri[i][j]+tri[i-1][j]: \r\n\t\t\t\ttri[i][j] = tri[i][j] + tri[i-1][j-1] \r\n\t\t\telse: \r\n\t\t\t\ttri[i][j] = tri[i][j]+tri[i-1][j] \r\n\treturn (max(tri[n-1]))"
    },
    {
        "number": 232,
        "prompt": "Write a function to get the n largest items from a dataset.\ndef larg_nnum(list1,n):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    list2 = list1[:n]\n    list2.sort(reverse=True)\n    return list2\n\n#Example usage:\nlist1 = [2,1,5,8,3,9,7,6,4]\nn = 3\nprint(larg_nnum(list1,n)) #Output: [9,8,7]\n",
        "generated_testcode": "assert larg_nnum([1,2,3,4,5,6,7,8,9,10], 3) == [9,8,7]\n",
        "test": "assert larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],2)==[100,90]\nassert larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],5)==[100,90,80,70,60]\nassert larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],3)==[100,90,80]",
        "canonical_solution": "import heapq\r\ndef larg_nnum(list1,n):\r\n largest=heapq.nlargest(n,list1)\r\n return largest"
    },
    {
        "number": 233,
        "prompt": "Write a function to find the lateral surface area of a cylinder.\ndef lateralsuface_cylinder(r,h):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    return 2*pi*r*h\n\n#Test the function with different values of radius and height\nprint(lateralsuface_cylinder(10,20))\nprint(lateralsuface_cylinder(5,15))\n\n#Write a function to find the total surface area of a cylinder\ndef total_surface_area(r,h):\n    return 2*pi*r*h + 2*pi*r**2\n#Test the function with different values of radius and height\nprint(total_surface_area(10,20))\nprint(total_surface_area(5,15))\n\n#Write a function to find the volume of a cylinder\ndef volume_cylinder(r,h):\n    return pi*r**2*h\n#Test the function with different values of radius and height\nprint(volume_cylinder(10,20))\nprint(volume_cylinder(5,15))\n\n#Write a function to find the curved surface area of a cylinder\ndef curved_surface_area(r,h):\n    return 2*pi*r*(r+h)\n#Test the function with different values of radius and height\nprint(curved_surface_area(10,20))\nprint(curved_surface_area(5,15))\n\n#Write a function to find the surface area of a sphere\ndef surface_sphere(r):\n    return 4*pi*",
        "generated_testcode": "assert lateralsuface_cylinder(5,10) == 314.1592653589793\nprint(\"Test case 1 passed\")\n\n# Write a function to find the lateral surface area of a sphere\ndef lateralsuface_sphere(r):\n    pass\n\n",
        "test": "assert lateralsuface_cylinder(10,5)==314.15000000000003\nassert lateralsuface_cylinder(4,5)==125.66000000000001\nassert lateralsuface_cylinder(4,10)==251.32000000000002",
        "canonical_solution": "def lateralsuface_cylinder(r,h):\r\n  lateralsurface= 2*3.1415*r*h\r\n  return lateralsurface"
    },
    {
        "number": 234,
        "prompt": "Write a function to find the volume of a cube.\ndef volume_cube(l):\n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    return l**3\n\n# Test the function with a sample input\nprint(volume_cube(2))  # Output: 8\n\n# Test the function with another sample input\nprint(volume_cube(5))  # Output: 125\n\n# Test the function with another sample input\nprint(volume_cube(10))  # Output: 10000",
        "generated_testcode": "assert volume_cube(2) == 8\n",
        "test": "assert volume_cube(3)==27\nassert volume_cube(2)==8\nassert volume_cube(5)==125",
        "canonical_solution": "def volume_cube(l):\r\n  volume = l * l * l\r\n  return volume"
    },
    {
        "number": 235,
        "prompt": "Write a python function to set all even bits of a given number.\ndef even_bit_set_number(n): \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    return n | (1 << (n.bit_length()-1) << 1)\n\n\n# Example Usage:\nn = 13\nprint(even_bit_set_number(n)) # Output: 14 (In binary, 13 is 00000011101 and 14 is 00000011110)\n\nn = 25\nprint(even_bit_set_number(n)) # Output: 26 (In binary, 25 is 00001110011 and 26 is 0000111100)\n\nn = 7\nprint(even_bit_set_number(n)) # Output: 15 (In binary, 7 is 0000001111 and 15 is 0000111000) ",
        "generated_testcode": "assert even_bit_set_number(10) == 10\n",
        "test": "assert even_bit_set_number(10) == 10\nassert even_bit_set_number(20) == 30\nassert even_bit_set_number(30) == 30",
        "canonical_solution": "def even_bit_set_number(n): \r\n    count = 0;res = 0;temp = n \r\n    while(temp > 0): \r\n        if (count % 2 == 1): \r\n            res |= (1 << count)\r\n        count+=1\r\n        temp >>= 1\r\n    return (n | res) "
    },
    {
        "number": 236,
        "prompt": "Write a python function to count the maximum number of equilateral triangles that can be formed within a given equilateral triangle.\ndef No_of_Triangle(N,K):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    return int((N * (N+1) * (N+2) / 6) - ((N-K) * (N-K+1) * (N-K+2) / 6))\n\nN = 6\nK = 3\nprint(No_of_Triangle(N,K))\n",
        "generated_testcode": "assert No_of_Triangle(3,2) == 1\n",
        "test": "assert No_of_Triangle(4,2) == 7\nassert No_of_Triangle(4,3) == 3\nassert No_of_Triangle(1,3) == -1",
        "canonical_solution": "def No_of_Triangle(N,K):\r\n    if (N < K):\r\n        return -1;\r\n    else:\r\n        Tri_up = 0;\r\n        Tri_up = ((N - K + 1) *(N - K + 2)) // 2;\r\n        Tri_down = 0;\r\n        Tri_down = ((N - 2 * K + 1) *(N - 2 * K + 2)) // 2;\r\n        return Tri_up + Tri_down;"
    },
    {
        "number": 237,
        "prompt": "Write a function to check the occurrences of records which occur similar times in the given tuples.\ndef check_occurences(test_list):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    result = []\n    for i in range(len(test_list)):\n        count = 1\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j]:\n                count += 1\n        result.append(count)\n    return result\n\n\n# Testing the function\ntest_list = [(1,2), (1,2), (3,4), (1,2), (2,3), (1,2), (1,2), (4,5), (1,2)]\nprint(check_occurences(test_list))\n\n# Output: [1, 2, 1, 1, 2, 2, 2, 1, 1]\n\ntest_list = [(1,2), (1,2), (1,2), (2,3), (1,2), (1,2), (4,5), (1,2), (1,2), (1,2)]\nprint(check_occurences(test_list))\n\n# Output: [1, 2, 2, 1, 2, 3, 1, 1, 2, 2]\n\ntest_list = [(1,2), (3,4), (1,2), (1,2), (2,3), (1,2), (4,5), (1,2), (1,2)]\nprint(check_occurences(test_list))\n\n# Output:",
        "generated_testcode": "assert check_occurences([(1,2,3),(1,2,3),(1,2,3),(4,5,6),(4,5,6),(7,8,9),(7,8,9),(7,8,9),(7,8,9)] ) == 3\n",
        "test": "assert check_occurences([(3, 1), (1, 3), (2, 5), (5, 2), (6, 3)] ) == {(1, 3): 2, (2, 5): 2, (3, 6): 1}\nassert check_occurences([(4, 2), (2, 4), (3, 6), (6, 3), (7, 4)] ) == {(2, 4): 2, (3, 6): 2, (4, 7): 1}\nassert check_occurences([(13, 2), (11, 23), (12, 25), (25, 12), (16, 23)] ) == {(2, 13): 1, (11, 23): 1, (12, 25): 2, (16, 23): 1}",
        "canonical_solution": "from collections import Counter \r\ndef check_occurences(test_list):\r\n  res = dict(Counter(tuple(ele) for ele in map(sorted, test_list)))\r\n  return  (res) "
    },
    {
        "number": 238,
        "prompt": "Write a python function to count number of non-empty substrings of a given string.\ndef number_of_substrings(str): \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    count = 0 \n    for i in range(len(str)): \n        for j in range(i, len(str)): \n            if str[i:j+1]: \n                count += 1\n    return count \n\n# Test the function \nstring = \"hello world\"\nprint(number_of_substrings(string)) ",
        "generated_testcode": "assert number_of_substrings(None) == 0\n",
        "test": "assert number_of_substrings(\"abc\") == 6\nassert number_of_substrings(\"abcd\") == 10\nassert number_of_substrings(\"abcde\") == 15",
        "canonical_solution": "def number_of_substrings(str): \r\n\tstr_len = len(str); \r\n\treturn int(str_len * (str_len + 1) / 2); "
    },
    {
        "number": 239,
        "prompt": "Write a function to find the number of possible sequences of length n such that each of the next element is greater than or equal to twice of the previous element but less than or equal to m.\ndef get_total_number_of_sequences(m,n): \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    if n == 1:\n        return 1\n    elif n == 2:\n        return m // 2\n    elif n == 3:\n        return m // 2 * (m // 2 - 1)\n    else:\n        total_sum = m // 2 * (m // 2 - 1) * (m // 2 - 2)\n        for i in range(4, n + 1):\n            total_sum = (total_sum * (m // 2 - 1) // 2) + (m // 2 * (m // 2 - 1) * (m // 2 - 2))\n        return total_sum\n\nprint(get_total_number_of_sequences(5,3)) # Output: 2\nprint(get_total_number_of_sequences(7,4)) # Output: 5\nprint(get_total_number_of_sequences(10,5)) # Output: 17",
        "generated_testcode": "assert get_total_number_of_sequences(10, 3) == 10\n",
        "test": "assert get_total_number_of_sequences(10, 4) == 4\nassert get_total_number_of_sequences(5, 2) == 6\nassert get_total_number_of_sequences(16, 3) == 84",
        "canonical_solution": "def get_total_number_of_sequences(m,n): \r\n\tT=[[0 for i in range(n+1)] for i in range(m+1)] \r\n\tfor i in range(m+1): \r\n\t\tfor j in range(n+1): \r\n\t\t\tif i==0 or j==0: \r\n\t\t\t\tT[i][j]=0\r\n\t\t\telif i<j: \r\n\t\t\t\tT[i][j]=0\r\n\t\t\telif j==1: \r\n\t\t\t\tT[i][j]=i \r\n\t\t\telse: \r\n\t\t\t\tT[i][j]=T[i-1][j]+T[i//2][j-1] \r\n\treturn T[m][n]"
    },
    {
        "number": 240,
        "prompt": "Write a function to replace the last element of the list with another list.\ndef replace_list(list1,list2):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    list1[-1] = list2\n    return list1\n\n#Test the function with a sample input\noriginal_list = [1,2,3,4,5,6]\nnew_list = [7,8,9,10]\nprint(replace_list(original_list,new_list))\n#Output: [1,2,3,4,9,10]\n\n#Explanation: The last element of the original list has been replaced with the new list, \n#which is [7,8,9,10] and the function returns the updated list [1,2,3,4,9,10]. ",
        "generated_testcode": "assert replace_list([\"apple\",\"banana\",\"orange\",\"grape\"],[\"kiwi\",\"mango\",\"strawberry\"]) == [\"apple\",\"banana\",\"mango\"]\n",
        "test": "assert replace_list([1, 3, 5, 7, 9, 10],[2, 4, 6, 8])==[1, 3, 5, 7, 9, 2, 4, 6, 8]\nassert replace_list([1,2,3,4,5],[5,6,7,8])==[1,2,3,4,5,6,7,8]\nassert replace_list([\"red\",\"blue\",\"green\"],[\"yellow\"])==[\"red\",\"blue\",\"yellow\"]",
        "canonical_solution": "def replace_list(list1,list2):\r\n list1[-1:] = list2\r\n replace_list=list1\r\n return replace_list\r\n"
    },
    {
        "number": 241,
        "prompt": "Write a function to generate a 3d array having each element as '*'.\ndef array_3d(m,n,o):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    res = []\n    for i in range(m):\n        row = []\n        for j in range(n):\n            col = []\n            for k in range(o):\n                col.append(\"*\")\n            res.append(col)\n    return res\n\n#Test the function\nprint(array_3d(3,4,5))\n# Output: [['*', '*', '*', '*', '*', '*']\n#        ['*', '*', '*', '*', '*'],\n#        ['*', '*', '*', '*', '*']]\n\n#Test the function\nprint(array_3d(2,2,2))\n# Output: [['*', '*'],\n#        ['*', '*']]\n\n#Test the function\nprint(array_3d(1,5,3))\n# Output: [['*', '*', '*', '*', '*', '*']]\n\n#Test the function\nprint(array_3d(3,3,3))\n# Output: [['*', '*', '*', '*']\n#        ['*', '*', '*', '*'],\n#        ['*', '*', '*', '*']] ",
        "generated_testcode": "assert array_3d(2,3,4) == [['***', '***', '***'], ['***', '***', '***']]\n",
        "test": "assert array_3d(6,4,3)==[[['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']]]\nassert array_3d(5,3,4)==[[['*', '*', '*', '*', '*'], ['*', '*', '*', '*','*'], ['*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*'],['*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*']]]\nassert array_3d(1,2,3)==[[['*'],['*']],[['*'],['*']],[['*'],['*']]]",
        "canonical_solution": "def array_3d(m,n,o):\r\n array_3d = [[ ['*' for col in range(m)] for col in range(n)] for row in range(o)]\r\n return array_3d"
    },
    {
        "number": 242,
        "prompt": "Write a function to count total characters in a string.\ndef count_charac(str1):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    count = {}\n    for char in str1:\n        if char in count:\n            count[char] += 1\n        else:\n            count[char] = 1\n    return count\n\n# Test the function\nprint(count_charac(\"Hello World\")) # Output: {'H': 1, 'e': 1, 'l': 3, 'o': 2, ' ' ': 1, 'W': 1, 'r': 1, 'd': 1, 'l': 1, 'o': 1}\n\n# Write a function to count total words in a string\ndef count_words(str1):\n    count = {}\n    words = str1.split()\n    for word in words:\n        if word in count:\n            count[word] += 1\n        else:\n            count[word] = 1\n    return count\n\n# Test the function\nprint(count_words(\"This is a test string. It contains multiple words.\")) # Output: {'This': 1, 'a': 1, 'test': 1, 'string.': 1, 'multiple': 1, 'It': 1, 'contains': 1, 'words.': 1}\n\n# Write a function to count unique characters in a string\ndef count_unique_charac(str1):\n    count = {}\n    for char in str1:\n        if char.isalpha():\n            if char.lower() in count:\n                count[char.lower()] = 0\n           ",
        "generated_testcode": "assert count_charac(None) == 0\n",
        "test": "assert count_charac(\"python programming\")==18\nassert count_charac(\"language\")==8\nassert count_charac(\"words\")==5",
        "canonical_solution": "def count_charac(str1):\r\n total = 0\r\n for i in str1:\r\n    total = total + 1\r\n return total"
    },
    {
        "number": 243,
        "prompt": "Write a function to sort the given list based on the occurrence of first element of tuples.\ndef sort_on_occurence(lst): \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    freq_dict = {} \n    for item in lst: \n        if item[0] in freq_dict: \n            freq_dict[item[0]] += 1\n        else: \n            freq_dict[item[0]] = 1\n    sorted_list = sorted(lst, key=lambda x: (-freq_dict[x[0], x[1])) \n    return sorted_list \n\n\n# Test the function \nlst = [('a', 1), ('b', 2), ('a', 3), ('b', 1), ('c', 1), ('b', 3), ('a', 2), ('b', 4)] \nprint(sort_on_occurence(lst)) ",
        "generated_testcode": "assert sort_on_occurence([(1,2), (2,3), (1,4), (3,5), (1,6), (2,7)] ) == [(1,2), (1,4), (1,6), (2,3), (2,7)]\n",
        "test": "assert sort_on_occurence([(1, 'Jake'), (2, 'Bob'), (1, 'Cara')]) == [(1, 'Jake', 'Cara', 2), (2, 'Bob', 1)]\nassert sort_on_occurence([('b', 'ball'), ('a', 'arm'), ('b', 'b'), ('a', 'ant')]) == [('b', 'ball', 'b', 2), ('a', 'arm', 'ant', 2)]\nassert sort_on_occurence([(2, 'Mark'), (3, 'Maze'), (2, 'Sara')]) == [(2, 'Mark', 'Sara', 2), (3, 'Maze', 1)]",
        "canonical_solution": "def sort_on_occurence(lst): \r\n\tdct = {} \r\n\tfor i, j in lst: \r\n\t\tdct.setdefault(i, []).append(j) \r\n\treturn ([(i, *dict.fromkeys(j), len(j)) \r\n\t\t\t\tfor i, j in dct.items()]) "
    },
    {
        "number": 244,
        "prompt": "Write a python function to find the next perfect square greater than a given number.\ndef next_Perfect_Square(N): \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    i = 1\n    while i*i <= N:\n        i += 1\n    return (i-1)*(i-1)\n\n# Driver code\nnum = 14\nprint(\"Next Perfect Square greater than\",num,\"is\",next_Perfect_Square(num))\n",
        "generated_testcode": "assert next_Perfect_Square(10) == 13\n",
        "test": "assert next_Perfect_Square(35) == 36\nassert next_Perfect_Square(6) == 9\nassert next_Perfect_Square(9) == 16",
        "canonical_solution": "import math  \r\ndef next_Perfect_Square(N): \r\n    nextN = math.floor(math.sqrt(N)) + 1\r\n    return nextN * nextN "
    },
    {
        "number": 245,
        "prompt": "Write a function to find the maximum sum of bi-tonic sub-sequence for the given array.\ndef max_sum(arr, n): \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": " \n    # Initialize two variables for storing the maximum sum and the current sum\n    max_sum = 0\n    curr_sum = 0\n    \n    # Initialize two variables for storing the minimum sum and the current sum\n    min_sum = 0\n    curr_min = 0\n    \n    # Loop through each element in the array\n    for i in range(n): \n        # If the current element is greater than the current minimum sum, add it to the current sum\n        if arr[i] > curr_min: \n            curr_sum += arr[i]\n            # If the current sum is greater than the maximum sum, update the maximum sum\n            if curr_sum > max_sum: \n                max_sum = curr_sum\n        else: \n            # If the current element is smaller than the current minimum sum, update the current minimum sum\n            curr_min = arr[i]\n            # If the current element is greater than the current minimum sum, update the current sum\n            if arr[i] > curr_min: \n                curr_sum = arr[i]\n    \n    # Return the maximum sum\n    return max_sum ",
        "generated_testcode": "assert max_sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10] ) == 25\n",
        "test": "assert max_sum([1, 15, 51, 45, 33, 100, 12, 18, 9], 9) == 194\nassert max_sum([80, 60, 30, 40, 20, 10], 6) == 210\nassert max_sum([2, 3 ,14, 16, 21, 23, 29, 30], 8) == 138",
        "canonical_solution": "def max_sum(arr, n): \r\n\tMSIBS = arr[:] \r\n\tfor i in range(n): \r\n\t\tfor j in range(0, i): \r\n\t\t\tif arr[i] > arr[j] and MSIBS[i] < MSIBS[j] + arr[i]: \r\n\t\t\t\tMSIBS[i] = MSIBS[j] + arr[i] \r\n\tMSDBS = arr[:] \r\n\tfor i in range(1, n + 1): \r\n\t\tfor j in range(1, i): \r\n\t\t\tif arr[-i] > arr[-j] and MSDBS[-i] < MSDBS[-j] + arr[-i]: \r\n\t\t\t\tMSDBS[-i] = MSDBS[-j] + arr[-i] \r\n\tmax_sum = float(\"-Inf\") \r\n\tfor i, j, k in zip(MSIBS, MSDBS, arr): \r\n\t\tmax_sum = max(max_sum, i + j - k) \r\n\treturn max_sum"
    },
    {
        "number": 246,
        "prompt": "Write a function for computing square roots using the babylonian method.\ndef babylonian_squareroot(number):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    if number < 0:\n        return \"Error: square roots of negative numbers do not exist\"\n    if number == 0 or number == 1:\n        return number\n    guess = number\n    while True:\n        new_guess = (guess + number / guess) / 2\n        if abs(new_guess - guess) < 0.00001:\n            return new_guess\n        guess = new_guess\n\n# Test the function with some inputs\nprint(babylonian_squareroot(16))  # should output 4\nprint(babylonian_squareroot(25))  # should output 5.0\nprint(babylonian_squareroot(-5))  # should output \"Error: square roots of negative numbers do not exist\"\nprint(babylonian_squareroot(0))  # should output 0\nprint(babylonian_squareroot(1))  # should output 1\n\n# Test the function with random inputs\nimport random\nimport time\nfor i in range(10):\n    num = random.randint(1, 1000)\n    print(\"Square root of\", num, \"is\", babylonian_squareroot(num))\n    time.sleep(1)\n\n",
        "generated_testcode": "assert babylonian_squareroot(2) == 1.414213562373095238095\n",
        "test": "assert babylonian_squareroot(10)==3.162277660168379\nassert babylonian_squareroot(2)==1.414213562373095\nassert babylonian_squareroot(9)==3.0",
        "canonical_solution": "def babylonian_squareroot(number):\r\n    if(number == 0):\r\n        return 0;\r\n    g = number/2.0;\r\n    g2 = g + 1;\r\n    while(g != g2):\r\n        n = number/ g;\r\n        g2 = g;\r\n        g = (g + n)/2;\r\n    return g;"
    },
    {
        "number": 247,
        "prompt": "Write a function to find the longest palindromic subsequence in the given string.\ndef lps(str): \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    n = len(str) \n    # Create a table to store the length of the longest palindromic subsequence \n    # for each substring of the given string \n    L = [[0 for j in range(n)] for i in range(n)] \n    # All substrings of length 1 are palindromes \n    for i in range(n): \n        L[i][i] = 1\n    # Initialize the value of L for substrings of length 2 \n    for i in range(n-1): \n        if str[i] == str[i+1]: \n            L[i][i+1] = 2\n    # Fill the table in bottom-up fashion \n    for k in range(2, n): \n        for i in range(n-k): \n            j = i+k \n            if str[i] == str[j]: \n                L[i][j] = L[i+1][j-1] + 2\n            else: \n                L[i][j] = max(L[i+1][j], L[i][j-1]) \n    # Find the length of the longest palindromic subsequence \n    maxLength = L[0][n-1] \n    # Fill the table in reverse order \n    for i in range(n-1): \n        for j in range(n-1,i, -1): \n            if str[i] == str[j]: \n",
        "generated_testcode": "assert lps(input(\"Enter a string: \")) == \"racecar\" # Test case 1\n",
        "test": "assert lps(\"TENS FOR TENS\") == 5 \nassert lps(\"CARDIO FOR CARDS\") == 7\nassert lps(\"PART OF THE JOURNEY IS PART\") == 9 ",
        "canonical_solution": "def lps(str): \r\n\tn = len(str) \r\n\tL = [[0 for x in range(n)] for x in range(n)] \r\n\tfor i in range(n): \r\n\t\tL[i][i] = 1\r\n\tfor cl in range(2, n+1): \r\n\t\tfor i in range(n-cl+1): \r\n\t\t\tj = i+cl-1\r\n\t\t\tif str[i] == str[j] and cl == 2: \r\n\t\t\t\tL[i][j] = 2\r\n\t\t\telif str[i] == str[j]: \r\n\t\t\t\tL[i][j] = L[i+1][j-1] + 2\r\n\t\t\telse: \r\n\t\t\t\tL[i][j] = max(L[i][j-1], L[i+1][j]); \r\n\treturn L[0][n-1]"
    },
    {
        "number": 248,
        "prompt": "Write a function to calculate the harmonic sum of n-1.\ndef harmonic_sum(n):\n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    sum = 0\n    for i in range(1, n):\n        sum += 1/i\n    return sum\n\n# Test the function\nprint(harmonic_sum(5)) # Output: 1.833333333333333333333333\nprint(harmonic_sum(10)) # Output: 4.8375\nprint(harmonic_sum(100)) # Output: 7.82857142857142857144",
        "generated_testcode": "assert harmonic_sum(1) == 0\n",
        "test": "assert harmonic_sum(7) == 2.5928571428571425\nassert harmonic_sum(4) == 2.083333333333333\nassert harmonic_sum(19) == 3.547739657143682",
        "canonical_solution": "def harmonic_sum(n):\r\n  if n < 2:\r\n    return 1\r\n  else:\r\n    return 1 / n + (harmonic_sum(n - 1)) "
    },
    {
        "number": 249,
        "prompt": "Write a function to find the intersection of two arrays using lambda function.\ndef intersection_array(array_nums1,array_nums2):\n",
        "checkpoint": "7B",
        "pass": 3,
        "correct": true,
        "answer": "    lambda_function = lambda x, y: list(filter(lambda x: x in y, array_nums1))\n    return lambda_function(array_nums1,array_nums2)\n\narray_nums1 = [1,2,3,4,5,6,7,8,9,10]\narray_nums2 = [5,6,7,8,9,10,11,12,13]\nprint(intersection_array(array_nums1,array_nums2)) #Output: [5,6,7,8,9,10]\narray_nums3 = [1,2,3,4,5,6,7,8,9,10]\narray_nums4 = [10,11,12,13,14,15,16,17]\nprint(intersection_array(array_nums3,array_nums4)) #Output: []",
        "generated_testcode": "assert intersection_array([1,2,3,4,5,6,7,8,9], [4,5,6,7,8,9,10,11]) == [4,5,6,7,8,9]\n",
        "test": "assert intersection_array([1, 2, 3, 5, 7, 8, 9, 10],[1, 2, 4, 8, 9])==[1, 2, 8, 9]\nassert intersection_array([1, 2, 3, 5, 7, 8, 9, 10],[3,5,7,9])==[3,5,7,9]\nassert intersection_array([1, 2, 3, 5, 7, 8, 9, 10],[10,20,30,40])==[10]",
        "canonical_solution": "def intersection_array(array_nums1,array_nums2):\r\n result = list(filter(lambda x: x in array_nums1, array_nums2)) \r\n return result"
    },
    {
        "number": 250,
        "prompt": "Write a python function to count the occcurences of an element in a tuple.\ndef count_X(tup, x): \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count\n\n# Test the function\ntup = (1,2,3,4,5,5,5,6,6,6,6,6,7,8,9)\nprint(count_X(tup, 6)) # Output: 3 ",
        "generated_testcode": "assert count_X((\"abc\", \"a\") == 1)\n",
        "test": "assert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),4) == 0\nassert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),10) == 3\nassert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),8) == 4",
        "canonical_solution": "def count_X(tup, x): \r\n    count = 0\r\n    for ele in tup: \r\n        if (ele == x): \r\n            count = count + 1\r\n    return count "
    },
    {
        "number": 251,
        "prompt": "Write a function to insert an element before each element of a list.\ndef insert_element(list,element):\n",
        "checkpoint": "7B",
        "pass": 3,
        "correct": true,
        "answer": "    result = []\n    for i in range(len(list)):\n        result.append(element)\n        result.append(list[i])\n    return result\n\n# Test the function with the given test cases\nprint(insert_element([1, 2, 3, 4, 5, 6], 0))\n# Output: [0, 1, 0, 2, 0, 3, 0, 4, 0, 5, 0, 6]\nprint(insert_element([], 7))\n# Output: [7]\nprint(insert_element([1], 0))\n# Output: [0, 1] ",
        "generated_testcode": "assert insert_element([\"apple\", \"banana\", \"cherry\", \"date\"], \"orange\") == [\"orange\", \"apple\", \"orange\", \"banana\", \"orange\", \"cherry\", \"orange\", \"date\"]\n",
        "test": "assert insert_element(['Red', 'Green', 'Black'] ,'c')==['c', 'Red', 'c', 'Green', 'c', 'Black'] \nassert insert_element(['python', 'java'] ,'program')==['program', 'python', 'program', 'java'] \nassert insert_element(['happy', 'sad'] ,'laugh')==['laugh', 'happy', 'laugh', 'sad'] ",
        "canonical_solution": "def insert_element(list,element):\r\n list = [v for elt in list for v in (element, elt)]\r\n return list"
    },
    {
        "number": 252,
        "prompt": "Write a python function to convert complex numbers to polar coordinates.\ndef convert(numbers):    \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    result = []\n    for num in numbers:\n        real = num.real\n        imag = num.imag\n        r = (real ** 2 + imag ** 2) ** 0.5\n        theta = math.atan2(imag, real)\n        result.append((r, theta))\n    return result\n\n# Test the function with sample input\nnumbers = [complex(1, 1), complex(2, 3), complex(-5, 4), complex(0, -1)]\nprint(convert(numbers)) # Output: [(1.414213562373095024555, 0.78539816333974448315), (5.0, 0.182680050481873753907), (5.0, 3.1415926535897932385), (0.0, -1.5707963267794896677)]\n\n# Test the function with sample input\nnumbers = [complex(2, -3), complex(4, -4), complex(-1, 1)]\nprint(convert(numbers)) # Output: [(3.60555551275469722443, 0.78539816333974448",
        "generated_testcode": "assert convert(1+2j) == (2.23606765, 1.1071473)\n",
        "test": "assert convert(1) == (1.0, 0.0)\nassert convert(4) == (4.0,0.0)\nassert convert(5) == (5.0,0.0)",
        "canonical_solution": "import cmath  \r\ndef convert(numbers):    \r\n  num = cmath.polar(numbers)  \r\n  return (num) "
    },
    {
        "number": 253,
        "prompt": "Write a python function to count integers from a given list.\ndef count_integer(list1):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    count=0\n    for i in list1:\n        if type(i)==int:\n            count+=1\n    return count\n\n#test the function\nprint(count_integer([1,2,3,4,\"apple\",5,6,7,\"banana\",8,9,10])) #output 5\nprint(count_integer([1,2,3,\"apple\",4,5,6,\"banana\",7,8,9,10])) #output 3\nprint(count_integer([1,2,3,\"apple\",4,5,6,\"banana\",7,8,9,10,\"orange\",11])) #output 3\nprint(count_integer([1,2,3,\"apple\",4,5,6,\"banana\",7,8,9,10,\"orange\",11,12,\"pear\",13])) #output 4\n\n\n#this function counts the number of integers in a list. It checks if each element is an integer using the type() function and if it is an integer it increments a counter. ",
        "generated_testcode": "assert count_integer([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10] ) == 10\n",
        "test": "assert count_integer([1,2,'abc',1.2]) == 2\nassert count_integer([1,2,3]) == 3\nassert count_integer([1,1.2,4,5.1]) == 2",
        "canonical_solution": "def count_integer(list1):\r\n    ctr = 0\r\n    for i in list1:\r\n        if isinstance(i, int):\r\n            ctr = ctr + 1\r\n    return ctr"
    },
    {
        "number": 254,
        "prompt": "Write a function to find all words starting with 'a' or 'e' in a given string.\ndef words_ae(text):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    words = text.split()\n    result = []\n    for word in words:\n        if word.startswith('a') or word.startswith('e'):\n            result.append(word)\n    return result\n\n# Test cases\nprint(words_ae(\"apple banana orange grapefruit\"))  # [\"apple\", \"orange\"]\nprint(words_ae(\"aardvark bear elephant panda\")) # [\"aardvark\", \"elephant\"]\nprint(words_ae(\"blueberry rhubarb strawberry\")) # []\nprint(words_ae(\"antidisestablishmentarianism\")) # []\nprint(words_ae(\"axiomatic empathy\")) # [\"axiomatic\", \"empathy\"]\nprint(words_ae(\"aardvark bear elephant panda\")) # [\"aardvark\", \"elephant\"]\n\n\n# Solution:Here's the solution to the problem. We first split the input string into a list of words using the split() method. Then, we loop through each word in the list and check if it starts with 'a' or 'e' using the startswith() method. If it does, we append it to a new list called result. Finally, we return the list of words starting with 'a' or 'e'. If there are no such words, we return an empty list.\n\n\n# Time complexity: O(n) where n is the number of words in the input string. We only iterate through each word once.\n\n# Space complexity: O(n) since",
        "generated_testcode": "assert words_ae(text=\"apple banana orange grapefruit\") == ['apple', 'orange']\n",
        "test": "assert words_ae(\"python programe\")==['ame']\nassert words_ae(\"python programe language\")==['ame','anguage']\nassert words_ae(\"assert statement\")==['assert', 'atement']",
        "canonical_solution": "import re\r\ndef words_ae(text):\r\n list = re.findall(\"[ae]\\w+\", text)\r\n return list"
    },
    {
        "number": 255,
        "prompt": "Write a function to choose specified number of colours from three different colours and generate all the combinations with repetitions.\ndef combinations_colors(l, n):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    # l = list of colours (red, green, blue)\n    # n = number of combinations to generate\n    colors = [\"red\", \"green\", \"blue\"]\n    result = []\n    for i in range(n):\n        for j in range(n):\n            for k in range(n):\n                result.append((colors[i], colors[j], colors[k]))\n    return result\n\n\n# Test cases\nprint(combinations_colors([\"red\", \"green\", \"blue\"], 2))\nprint(combinations_colors([\"red\", \"green\", \"blue\"], 3))\nprint(combinations_colors([\"red\", \"green\", \"blue\", \"yellow\"], 2))\n\n\n# Output:\n# [('red', 'red', 'red'), ('red', 'green', 'red'), ('red', 'blue', 'red'), ('green', 'red', 'red'), ('green', 'green', 'red'), ('green', 'blue', 'red'), ('blue', 'red', 'red')]\n# [('red', 'red', 'red'), ('red', 'green', 'red'), ('red', 'blue', 'red'), ('green', 'green', 'red'), ('green', 'blue', 'red'), ('blue', 'green', 'red'), ('red', 'red', 'green'), ('red', 'green', 'green'), ('red', 'blue', 'green'), ('green', 'green', 'green'), ('green', 'blue', 'green'), ('blue', 'green', 'green'), ('red',",
        "generated_testcode": "assert combinations_colors([\"red\", \"blue\", \"green\"], 2) == [\"red\", \"red\", \"blue\", \"blue\", \"green\", \"green\"]\n",
        "test": "assert combinations_colors( [\"Red\",\"Green\",\"Blue\"],1)==[('Red',), ('Green',), ('Blue',)]\nassert combinations_colors( [\"Red\",\"Green\",\"Blue\"],2)==[('Red', 'Red'), ('Red', 'Green'), ('Red', 'Blue'), ('Green', 'Green'), ('Green', 'Blue'), ('Blue', 'Blue')]\nassert combinations_colors( [\"Red\",\"Green\",\"Blue\"],3)==[('Red', 'Red', 'Red'), ('Red', 'Red', 'Green'), ('Red', 'Red', 'Blue'), ('Red', 'Green', 'Green'), ('Red', 'Green', 'Blue'), ('Red', 'Blue', 'Blue'), ('Green', 'Green', 'Green'), ('Green', 'Green', 'Blue'), ('Green', 'Blue', 'Blue'), ('Blue', 'Blue', 'Blue')]",
        "canonical_solution": "from itertools import combinations_with_replacement \r\ndef combinations_colors(l, n):\r\n    return list(combinations_with_replacement(l,n))\r"
    },
    {
        "number": 256,
        "prompt": "Write a python function to count the number of prime numbers less than a given non-negative number.\ndef count_Primes_nums(n):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": true,
        "answer": "    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    count = 0\n    for i in range(2, n):\n        if is_prime(i):\n            count += 1\n    return count\n\n# Test the function\nprint(count_Primes_nums(10))  # Output: 4\nprint(count_Primes_nums(20))  # Output: 7\nprint(count_Primes_nums(50))  # Output: 11\nprint(count_Primes_nums(75))  # Output: 19\nprint(count_Primes_nums(1000))  # Output: 25",
        "generated_testcode": "assert count_Primes_nums(10) == 4\n",
        "test": "assert count_Primes_nums(5) == 2\nassert count_Primes_nums(10) == 4\nassert count_Primes_nums(100) == 25",
        "canonical_solution": "def count_Primes_nums(n):\r\n    ctr = 0\r\n    for num in range(n):\r\n        if num <= 1:\r\n            continue\r\n        for i in range(2,num):\r\n            if (num % i) == 0:\r\n                break\r\n        else:\r\n            ctr += 1\r\n    return ctr"
    },
    {
        "number": 257,
        "prompt": "Write a function to swap two numbers.\ndef swap_numbers(a,b):\n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    temp = a\n    a = b\n    b = temp\n    return a,b\n\n#test the function with given numbers\nprint(swap_numbers(10,20))\n#Output: (20,10)\n\n#test the function with different numbers\nprint(swap_numbers(5,7))\n#Output: (7,5) ",
        "generated_testcode": "assert swap_numbers(10,20) == (20,10)\n",
        "test": "assert swap_numbers(10,20)==(20,10)\nassert swap_numbers(15,17)==(17,15)\nassert swap_numbers(100,200)==(200,100)",
        "canonical_solution": "def swap_numbers(a,b):\r\n temp = a\r\n a = b\r\n b = temp\r\n return (a,b)"
    },
    {
        "number": 258,
        "prompt": "Write a function to find number of odd elements in the given list using lambda function.\ndef count_odd(array_nums):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    odd_count = lambda nums: list(filter(lambda x: x % 2 != 0, nums))\n    return len(odd_count(array_nums)\n\n#Example:\narr = [1,2,3,4,5,6,7,8,9]\nprint(count_odd(arr)) #Output: 5\narr = [2,4,6,8,10,12,14]\nprint(count_odd(arr)) #Output: 3\n\n#You can assume that the input array contains only integers\n\n#You can also use map and filter functions instead of lambda function if you want to. ",
        "generated_testcode": "assert count_odd(list(range(1, 10)) == 4\n",
        "test": "assert count_odd([1, 2, 3, 5, 7, 8, 10])==4\nassert count_odd([10,15,14,13,-18,12,-20])==2\nassert count_odd([1, 2, 4, 8, 9])==2",
        "canonical_solution": "def count_odd(array_nums):\r\n   count_odd = len(list(filter(lambda x: (x%2 != 0) , array_nums)))\r\n   return count_odd"
    },
    {
        "number": 259,
        "prompt": "Write a function to maximize the given two tuples.\ndef maximize_elements(test_tup1, test_tup2):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    t1 = list(test_tup1)\n    t2 = list(test_tup2)\n    max1 = max(t1)\n    max2 = max(t2)\n    if max1 >= max2:\n        t1.remove(max1)\n        t2.remove(max2)\n        return tuple(t1 + t2)\n    else:\n        t1.remove(max2)\n        t2.remove(max1)\n        return tuple(t2 + t1)\n\n#test_tup1 = (1, 2, 3, 4)\n#test_tup2 = (5, 6, 7, 8)\n#print(maximize_elements(test_tup1, test_tup2)) # Output: (1, 2, 3, 4, 5, 6, 7, 8)\n\n#test_tup1 = (1, 2, 3, 4, 5)\n#test_tup2 = (5, 6, 7, 8, 9)\n#print(maximize_elements(test_tup1, test_tup2)) # Output: (1, 2, 3, 4, 5, 6, 7, 8, 9)\n\n#test_tup1 = (1, 2, 3)\n#test_tup2 = (4, 5, 6, 7, 8)\n#",
        "generated_testcode": "assert maximize_elements((1,2,3,4,5,6,7,8) , (9,10,11,12,13,14) ) == (14,14)\n",
        "test": "assert maximize_elements(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((6, 7), (4, 9), (2, 9), (7, 10))\nassert maximize_elements(((2, 4), (5, 6), (3, 10), (2, 11)), ((7, 8), (4, 10), (2, 2), (8, 4))) == ((7, 8), (5, 10), (3, 10), (8, 11))\nassert maximize_elements(((3, 5), (6, 7), (4, 11), (3, 12)), ((8, 9), (5, 11), (3, 3), (9, 5))) == ((8, 9), (6, 11), (4, 11), (9, 12))",
        "canonical_solution": "def maximize_elements(test_tup1, test_tup2):\r\n  res = tuple(tuple(max(a, b) for a, b in zip(tup1, tup2))\r\n   for tup1, tup2 in zip(test_tup1, test_tup2))\r\n  return (res) "
    },
    {
        "number": 260,
        "prompt": "Write a function to find the nth newman\u2013shanks\u2013williams prime number.\ndef newman_prime(n): \n",
        "checkpoint": "7B",
        "pass": 3,
        "correct": true,
        "answer": "    if n == 1: \n        return 2 \n    else: \n        return (3*(2**(n-1)) + 1) + 2 ",
        "generated_testcode": "assert newman_prime(1) == 2\n",
        "test": "assert newman_prime(3) == 7 \nassert newman_prime(4) == 17\nassert newman_prime(5) == 41",
        "canonical_solution": "def newman_prime(n): \r\n\tif n == 0 or n == 1: \r\n\t\treturn 1\r\n\treturn 2 * newman_prime(n - 1) + newman_prime(n - 2)"
    },
    {
        "number": 261,
        "prompt": "Write a function to perform mathematical division operation across the given tuples.\ndef division_elements(test_tup1, test_tup2):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    if len(test_tup1) != len(test_tup2) or len(test_tup1) != 2:\n        return \"Invalid input\"\n    else:\n        try:\n            result = test_tup1[0] / test_tup2[0]\n            return result\n        except ZeroDivisionError:\n            return \"Division by zero is not possible\"\n\n\n\n# Test cases\nprint(division_elements((10, 2), (2, 0)))  # Output: \"Division by zero is not possible\"\nprint(division_elements((10, 2), (2, 1))  # Output: 5.0\nprint(division_elements((10, 4), (2, 2))  # Output: 5.0\nprint(division_elements((10, 5), (2, 1)  # Output: 5.0\nprint(division_elements((10, 5), (0, 2)) # Output: Invalid input\nprint(division_elements((10, 5), (2, 5)) # Output: Invalid input",
        "generated_testcode": "assert division_elements((10, 2) == 5\n",
        "test": "assert division_elements((10, 4, 6, 9),(5, 2, 3, 3)) == (2, 2, 2, 3)\nassert division_elements((12, 6, 8, 16),(6, 3, 4, 4)) == (2, 2, 2, 4)\nassert division_elements((20, 14, 36, 18),(5, 7, 6, 9)) == (4, 2, 6, 2)",
        "canonical_solution": "def division_elements(test_tup1, test_tup2):\r\n  res = tuple(ele1 // ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\r\n  return (res) "
    },
    {
        "number": 262,
        "prompt": "Write a function to split a given list into two parts where the length of the first part of the list is given.\ndef split_two_parts(list1, L):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": true,
        "answer": "    # create two empty lists\n    first_part = []\n    second_part = []\n    # iterate over the given list\n    for i in range(L):\n        # add elements to the first part of the list\n        first_part.append(list1[i])\n    # iterate over the remaining elements of the list\n    for i in range(len(list1) - L):\n        # add them to the second part\n        second_part.append(list1[i+L])\n    # return the two parts\n    return first_part, second_part\n\n# Example usage:\nmy_list = [1, 2, 3, 4, 5, 6, 7, 8, 9]\nL = 3\nprint(split_two_parts(my_list, L)) # Output: ([1, 2, 3], [4, 5, 6, 7, 8, 9])\n\n# Note: The order of the two parts should be preserved, so the first part should contain the first L elements and the second part should contain the rest.\n# The length of the first part should be L. ",
        "generated_testcode": "assert split_two_parts([\"apple\", \"banana\", \"cherry\", \"orange\", \"grape\", \"kiwi\"], 3) == ([\"apple\", \"banana\", \"cherry\"], [\"orange\", \"grape\", \"kiwi\"])\n",
        "test": "assert split_two_parts([1,1,2,3,4,4,5,1],3)==([1, 1, 2], [3, 4, 4, 5, 1])\nassert split_two_parts(['a', 'b', 'c', 'd'],2)==(['a', 'b'], ['c', 'd'])\nassert split_two_parts(['p', 'y', 't', 'h', 'o', 'n'],4)==(['p', 'y', 't', 'h'], ['o', 'n'])",
        "canonical_solution": "def split_two_parts(list1, L):\r\n    return list1[:L], list1[L:]"
    },
    {
        "number": 263,
        "prompt": "Write a function to merge two dictionaries.\ndef merge_dict(d1,d2):\n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    for key in d2:\n        if key in d1:\n            d1[key] += d2[key]\n        else:\n            d1[key] = d2[key]\n    return d1\n\n#Test the function\nd1 = {'a':1,'b':2,'c':3}\nd2 = {'a':2,'b':4,'d':5}\nprint(merge_dict(d1,d2)) # output: {'a': 3, 'b': 6, 'c': 3, 'd': 5}\nd1 = {'a':1,'b':2,'c':3}\nd2 = {'a':3,'b':4,'e':5}\nprint(merge_dict(d1,d2)) # output: {'a': 4, 'b': 6, 'c': 3, 'e': 5}\nd1 = {'a':1,'b':2,'c':3}\nd2 = {'f':5,'g':6}\nprint(merge_dict(d1,d2)) # output: {'a': 1, 'b': 2, 'c': 3, 'f': 5, 'g': 6}\nd1 = {'a':1,'b':2,'c':3}\nd2 = {'a':1,'b':4,'c':5}\nprint(merge_dict(d1,d2)) # output: {'a': 2, 'b': 6, 'c': 8} ",
        "generated_testcode": "assert merge_dict({'a':1, 'b':2, 'c':3}, {'d':4, 'e':5, 'f':6}) == {'a':1, 'b':2, 'c':3, 'd':4, 'e':5, 'f':6}\n",
        "test": "assert merge_dict({'a': 100, 'b': 200},{'x': 300, 'y': 200})=={'x': 300, 'y': 200, 'a': 100, 'b': 200}\nassert merge_dict({'a':900,'b':900,'d':900},{'a':900,'b':900,'d':900})=={'a':900,'b':900,'d':900,'a':900,'b':900,'d':900}\nassert merge_dict({'a':10,'b':20},{'x':30,'y':40})=={'x':30,'y':40,'a':10,'b':20}",
        "canonical_solution": "def merge_dict(d1,d2):\r\n d = d1.copy()\r\n d.update(d2)\r\n return d"
    },
    {
        "number": 264,
        "prompt": "Write a function to calculate a dog's age in dog's years.\ndef dog_age(h_age):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    dog_years = h_age * 7\n    return dog_years\n\nprint(dog_age(2)) #Output: 14\nprint(dog_age(5)) #Output: 35\nprint(dog_age(10)) #Output: 56\n\n\n#Another way to write the function:\ndef dog_age(human_age):\n    return human_age * 7\nprint(dog_age(2)) #Output: 14\nprint(dog_age(5)) #Output: 35\nprint(dog_age(10)) #Output: 56\n\n\n#Explanation:\n#In the first version of the function, we take in an input value \"h_age\" which represents the human age of the dog in years and multiply it by 7 to get the dog's age in dog years. \n#This is because a dog's lifespan is roughly 7 times the human lifespan. \n#The second version simply returns the input value multiplied by 7, as the dog's age is the same as the human's age. ",
        "generated_testcode": "assert dog_age(1) == 15 # A dog that is 1 human year old is 15 dog years old.\n",
        "test": "assert dog_age(12)==61\nassert dog_age(15)==73\nassert dog_age(24)==109",
        "canonical_solution": "def dog_age(h_age):\r\n if h_age < 0:\r\n \texit()\r\n elif h_age <= 2:\r\n\t d_age = h_age * 10.5\r\n else:\r\n\t d_age = 21 + (h_age - 2)*4\r\n return d_age"
    },
    {
        "number": 265,
        "prompt": "Write a function to split a list for every nth element.\ndef list_split(S, step):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    result = []\n    i = 0\n    while i < len(S):\n        result.append(S[i:i+step])\n        i += step\n    return result\n\n\n# Test cases\nprint(list_split([1,2,3,4,5,6,7,8,9,10], 3)) # [[1,2,3], [4,5,6], [7,8,9,10]]\nprint(list_split([1,2,3,4,5,6,7,8,9], 2)) # [[1,2], [3,4], [5,6], [7,8], [9]]\nprint(list_split([1,2,3,4,5,6], 3)) # [[1,2,3], [4,5]]\nprint(list_split([1,2,3], 3)) # [[1,2,3]]\nprint(list_split([1,2], 3)) # []\n\n\n# More test cases\nprint(list_split([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15], 3)) # [[1,2,3], [4,5,6], [7,8,9], [10,11,12], [13,14,15]]\nprint(list_split([1,2,3,4,5,6,7,8,9",
        "generated_testcode": "assert list_split(range(1, 10), 3) == [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n",
        "test": "assert list_split(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n'],3)==[['a', 'd', 'g', 'j', 'm'], ['b', 'e', 'h', 'k', 'n'], ['c', 'f', 'i', 'l']] \nassert list_split([1,2,3,4,5,6,7,8,9,10,11,12,13,14],3)==[[1,4,7,10,13], [2,5,8,11,14], [3,6,9,12]] \nassert list_split(['python','java','C','C++','DBMS','SQL'],2)==[['python', 'C', 'DBMS'], ['java', 'C++', 'SQL']] ",
        "canonical_solution": "def list_split(S, step):\r\n    return [S[i::step] for i in range(step)]"
    },
    {
        "number": 266,
        "prompt": "Write a function to find the lateral surface area of a cube.\ndef lateralsurface_cube(l):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    return 6*(l**2)\n\n#Test the function\nprint(lateralsurface_cube(3)) #Output: 54\nprint(lateralsurface_cube(5)) #Output: 150\n\n\n\n#Write a function to find the volume of a cube\ndef volume_cube(l):\n    return l**3\n\n#Test the function\nprint(volume_cube(3)) #Output: 27\nprint(volume_cube(5)) #Output: 125\n\n\n#Write a function to find the total surface area of a cube\ndef total_surface_area(l):\n    return 2*(6*(l**2) + 12*l)\n\n#Test the function\nprint(total_surface_area(3)) #Output: 54 + 36 = 90\nprint(total_surface_area(5)) #Output: 150 + 75 = 225\n\n\n#Write a function to find the diagonal of a cube\ndef diagonal_cube(l):\n    return (3*l**2)**0.5\n#Test the function\nprint(diagonal_cube(3)) #Output: 4.87\nprint(diagonal_cube(5)) #Output: 7.81\n\n\n#Write a function to find the surface area of a cube when its side is given in terms of its diagonal\ndef surface_cube_diagonal(d",
        "generated_testcode": "assert lateralsurface_cube(2) == 12\n",
        "test": "assert lateralsurface_cube(5)==100\nassert lateralsurface_cube(9)==324\nassert lateralsurface_cube(10)==400",
        "canonical_solution": "def lateralsurface_cube(l):\r\n  LSA = 4 * (l * l)\r\n  return LSA"
    },
    {
        "number": 267,
        "prompt": "Write a python function to find the sum of squares of first n odd natural numbers.\ndef square_Sum(n):  \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    sum = 0\n    for i in range(1, n+1):\n        sum += i*i\n    return sum\n\n#Test the function with an example\nprint(square_Sum(5)) #Output: 55\nprint(square_Sum(7)) #Output: 55\nprint(square_Sum(10)) #Output: 165\nprint(square_Sum(15)) #Output: 165\n\n\n#Alternate solution using list comprehension\ndef square_Sum(n):\n    return sum([i*i for i in range(1,n+1,2)])\n\n#Test the function with an example\nprint(square_Sum(5)) #Output: 55\nprint(square_Sum(7)) #Output: 55\nprint(square_Sum(10)) #Output: 165\nprint(square_Sum(15)) #Output: 165",
        "generated_testcode": "assert square_Sum(5) == 555\n",
        "test": "assert square_Sum(2) == 10\nassert square_Sum(3) == 35\nassert square_Sum(4) == 84",
        "canonical_solution": "def square_Sum(n):  \r\n    return int(n*(4*n*n-1)/3) "
    },
    {
        "number": 268,
        "prompt": "Write a function to find the n'th star number.\ndef find_star_num(n): \n",
        "checkpoint": "7B",
        "pass": 4,
        "correct": true,
        "answer": "    # Define a variable to store the count of stars\n    count = 0\n    \n    # Define a variable to store the number of stars printed\n    stars = 0\n    \n    # Loop through each number from 1 to n\n    for i in range(1, n+1):\n        # Calculate the number of stars to print\n        stars = 2*i - 1\n        \n        # Add the number of stars to the count\n        count += stars\n        \n        # Print the stars\n        print(\"*\" * stars)\n        \n    # Return the count of stars\n    return count\n\n# Test the function with input n = 5\nprint(find_star_num(5))\n\n# Test the function with input n = 10\nprint(find_star_num(10))",
        "generated_testcode": "assert find_star_num(1) == 1\n",
        "test": "assert find_star_num(3) == 37\nassert find_star_num(4) == 73\nassert find_star_num(5) == 121",
        "canonical_solution": "def find_star_num(n): \r\n\treturn (6 * n * (n - 1) + 1) "
    },
    {
        "number": 269,
        "prompt": "Write a function to find the ascii value of a character.\ndef ascii_value(k):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    return ord(k)\n\n\n# Test the function\nprint(ascii_value('A')) # Output: 65\nprint(ascii_value('a')) # Output: 97\nprint(ascii_value('9')) # Output: 57\nprint(ascii_value('@')) # Output: 64\nprint(ascii_value(' ')) # Output: 32\n",
        "generated_testcode": "assert ascii_value(chr(65) == 65\n",
        "test": "assert ascii_value('A')==65\nassert ascii_value('R')==82\nassert ascii_value('S')==83",
        "canonical_solution": "def ascii_value(k):\r\n  ch=k\r\n  return ord(ch)"
    },
    {
        "number": 270,
        "prompt": "Write a python function to find the sum of even numbers at even positions.\ndef sum_even_and_even_index(arr,n):  \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    even_sum = 0\n    for i in range(0,n,2):\n        even_sum += arr[i]\n    return even_sum\n\n#test the function\narr = [1,2,3,4,5,6,7,8,9,10]\nn = len(arr)\nprint(sum_even_and_even_index(arr,n))\n\n#output: 4+6+8=14\n",
        "generated_testcode": "assert sum_even_and_even_index([2, 5, 12, 8, 9, 3, 14, 110, 16], 6) == 20\n",
        "test": "assert sum_even_and_even_index([5, 6, 12, 1, 18, 8],6) == 30\nassert sum_even_and_even_index([3, 20, 17, 9, 2, 10, 18, 13, 6, 18],10) == 26\nassert sum_even_and_even_index([5, 6, 12, 1],4) == 12",
        "canonical_solution": "def sum_even_and_even_index(arr,n):  \r\n    i = 0\r\n    sum = 0\r\n    for i in range(0,n,2): \r\n        if (arr[i] % 2 == 0) : \r\n            sum += arr[i]  \r\n    return sum"
    },
    {
        "number": 271,
        "prompt": "Write a python function to find the sum of fifth power of first n even natural numbers.\ndef even_Power_Sum(n): \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    sum = 0\n    for i in range(1,n+1,2):\n        sum += i**5\n    return sum \n\n#test the function with n = 5\nprint(even_Power_Sum(5)) # Output: 225 ",
        "generated_testcode": "assert even_Power_Sum(5) == 225\n",
        "test": "assert even_Power_Sum(2) == 1056\nassert even_Power_Sum(3) == 8832\nassert even_Power_Sum(1) == 32",
        "canonical_solution": "def even_Power_Sum(n): \r\n    sum = 0; \r\n    for i in range(1,n+1): \r\n        j = 2*i; \r\n        sum = sum + (j*j*j*j*j); \r\n    return sum; "
    },
    {
        "number": 272,
        "prompt": "Write a function to perfom the rear element extraction from list of tuples records.\ndef rear_extract(test_list):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    return test_list[len(test_list) - 1]\n\n\n# test the function with sample input\ntest_list = [('apple', 'banana', 'cherry', 'orange'), (1, 2, 3, 4, 5), (True, False, False, True)]\nprint(rear_extract(test_list)) ",
        "generated_testcode": "assert rear_extract([(1,2,3),(4,5,6),(7,8,9)] ) == 9\n",
        "test": "assert rear_extract([(1, 'Rash', 21), (2, 'Varsha', 20), (3, 'Kil', 19)]) == [21, 20, 19]\nassert rear_extract([(1, 'Sai', 36), (2, 'Ayesha', 25), (3, 'Salman', 45)]) == [36, 25, 45]\nassert rear_extract([(1, 'Sudeep', 14), (2, 'Vandana', 36), (3, 'Dawood', 56)]) == [14, 36, 56]",
        "canonical_solution": "def rear_extract(test_list):\r\n  res = [lis[-1] for lis in test_list]\r\n  return (res) "
    },
    {
        "number": 273,
        "prompt": "Write a function to substract the contents of one tuple with corresponding index of other tuple.\ndef substract_elements(test_tup1, test_tup2):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    result = ()\n    for i in range(len(test_tup1)):\n        result += (test_tup1[i] - test_tup2[i],)\n    return result\n\n# Test the function with sample inputs\ntest_tup1 = (10, 20, 30, 40, 50)\ntest_tup2 = (2, 5, 10, 15)\nprint(substract_elements(test_tup1, test_tup2))\n# Output: (-18, 15, 25, 35)\n\ntest_tup1 = (10, 20, 30, 40, 50, 60)\ntest_tup2 = (2, 5, 10, 15, 20)\nprint(substract_elements(test_tup1, test_tup2))\n# Output: (8, 15, 20, 30, 40)",
        "generated_testcode": "assert substract_elements((1,2,3,4,5,6,7,8,9), (1,2,3,4,5,6,7) == (8,9)\n",
        "test": "assert substract_elements((10, 4, 5), (2, 5, 18)) == (8, -1, -13)\nassert substract_elements((11, 2, 3), (24, 45 ,16)) == (-13, -43, -13)\nassert substract_elements((7, 18, 9), (10, 11, 12)) == (-3, 7, -3)",
        "canonical_solution": "def substract_elements(test_tup1, test_tup2):\r\n  res = tuple(map(lambda i, j: i - j, test_tup1, test_tup2))\r\n  return (res) "
    },
    {
        "number": 274,
        "prompt": "Write a python function to find sum of even index binomial coefficients.\ndef even_binomial_Coeff_Sum( n): \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    sum = 0\n    for i in range(n+1):\n        sum += binomial_coefficient(n, i)\n    return sum\n\ndef binomial_coefficient(n, k): \n    if k < 0 or k > n: \n        return 0\n    res = 1\n    for i in range(min(k, n-k)): \n        res = res * (n - i) // (i + 1) \n    return res ",
        "generated_testcode": "assert even_binomial_Coeff_Sum(5) == 10\n",
        "test": "assert even_binomial_Coeff_Sum(4) == 8\nassert even_binomial_Coeff_Sum(6) == 32\nassert even_binomial_Coeff_Sum(2) == 2",
        "canonical_solution": "import math  \r\ndef even_binomial_Coeff_Sum( n): \r\n    return (1 << (n - 1)) "
    },
    {
        "number": 275,
        "prompt": "Write a python function to find the position of the last removed element from the given array.\ndef get_Position(a,n,m): \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    last_element = a[n-1] \n    a.sort() \n    for i in range(m): \n        if a[i] == last_element: \n            return i ",
        "generated_testcode": "assert get_Position([1,2,3,4,5,6,7,8,9], 5, 3) == 4\n",
        "test": "assert get_Position([2,5,4],3,2) == 2\nassert get_Position([4,3],2,2) == 2\nassert get_Position([1,2,3,4],4,1) == 4",
        "canonical_solution": "import math as mt \r\ndef get_Position(a,n,m): \r\n    for i in range(n): \r\n        a[i] = (a[i] // m + (a[i] % m != 0))  \r\n    result,maxx = -1,-1\r\n    for i in range(n - 1,-1,-1): \r\n        if (maxx < a[i]): \r\n            maxx = a[i] \r\n            result = i \r\n    return result + 1"
    },
    {
        "number": 276,
        "prompt": "Write a function to find the volume of a cylinder.\ndef volume_cylinder(r,h):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    pi = 3.14159\n    volume = pi * r * r * h\n    return volume\n\n# Test the function with the inputs\nprint(volume_cylinder(5, 10)) # Should print 314.159\nprint(volume_cylinder(10, 5)) # Should print 314.159\nprint(volume_cylinder(2.5, 7.1) # Should print 153.39\n\n\n# Now, write a function to find the surface area of a cylinder using the formula: 2 * pi * r * (r + h)\ndef surface_area_cylinder(r,h):\n    pi = 3.14159\n    area = 2 * pi * r * (r + h)\n    return area\n\n# Test the function with the inputs\nprint(surface_area_cylinder(5, 10)) # Should print 148.85\nprint(surface_area_cylinder(10, 5)) # Should print 148.85\nprint(surface_area_cylinder(2.5, 7.1) # Should print 1114.15\n\n\n# Now, write a function to find the surface area of a sphere using the formula: 4 * pi * r^2\ndef surface_area_sphere(r):\n    pi = 3.14159\n    area = 4",
        "generated_testcode": "assert volume_cylinder(5,10) == 3141.599\n",
        "test": "assert volume_cylinder(10,5)==1570.7500000000002\nassert volume_cylinder(4,5)==251.32000000000002\nassert volume_cylinder(4,10)==502.64000000000004",
        "canonical_solution": "def volume_cylinder(r,h):\r\n  volume=3.1415*r*r*h\r\n  return volume"
    },
    {
        "number": 277,
        "prompt": "Write a function to filter a dictionary based on values.\ndef dict_filter(dict,n):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    return {k:v for k,v in dict.items() if v > n}\n\n# Test the function\nmy_dict = {'a': 5, 'b': 2, 'c': 7, 'd': 9, 'e': 4, 'f': 1, 'g': 8}\nresult = dict_filter(my_dict, 4)\nprint(result)  # Output: {'c': 7, 'd': 9, 'e': 4, 'g': 8}\n\n# Test the function\nmy_dict = {'a': 5, 'b': 2, 'c': 7, 'd': 9, 'e': 4, 'f': 1, 'g': 8}\nresult = dict_filter(my_dict, 6)\nprint(result)  # Output: {'c': 7, 'd': 9, 'g': 8}\n\n# Test the function\nmy_dict = {'a': 5, 'b': 2, 'c': 7, 'd': 9, 'e': 4, 'f': 1, 'g': 8}\nresult = dict_filter(my_dict, 8)\nprint(result)  # Output: {'d': 9, 'g': 8}",
        "generated_testcode": "assert dict_filter({'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5, 'f': 6}, 3) == {'a': 1, 'b': 2, 'c': 3}\n",
        "test": "assert dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},170)=={'Cierra Vega': 175, 'Alden Cantrell': 180, 'Pierre Cox': 190}\nassert dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},180)=={ 'Alden Cantrell': 180, 'Pierre Cox': 190}\nassert dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},190)=={ 'Pierre Cox': 190}",
        "canonical_solution": "def dict_filter(dict,n):\r\n result = {key:value for (key, value) in dict.items() if value >=n}\r\n return result"
    },
    {
        "number": 278,
        "prompt": "Write a function to find the element count that occurs before the record in the given tuple.\ndef count_first_elements(test_tup):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    count = 0\n    for i in range(len(test_tup)-1):\n        if test_tup[i][0] > test_tup[i+1][0]:\n            return count\n        else:\n            count += 1\n    return count\n\n#test case\ntest_tuple = ((1, 'apple'), (2, 'banana'), (3, 'cherry'), (3, 'banana'), (4, 'apple'))\nprint(count_first_elements(test_tuple)) # should return 2\ntest_tuple = ((1, 'apple'), (2, 'banana'), (3, 'cherry'), (4, 'banana'))\nprint(count_first_elements(test_tuple)) # should return 2\ntest_tuple = ((1, 'apple'), (2, 'banana'), (3, 'cherry'))\nprint(count_first_elements(test_tuple)) # should return 1\ntest_tuple = ((1, 'apple'), (2, 'banana'))\nprint(count_first_elements(test_tuple)) # should return 0\ntest_tuple = ((1, 'apple'), (1, 'banana'), (2, 'cherry'))\nprint(count_first_elements(test_tuple)) # should return 0\ntest_tuple = ((2, 'apple'), (2, 'banana'), (3, 'cherry'))\nprint(count_first_elements(test_tuple)) # should return 0\ntest_tuple = ()\nprint(count_",
        "generated_testcode": "assert count_first_elements(()) == 0\n",
        "test": "assert count_first_elements((1, 5, 7, (4, 6), 10) ) == 3\nassert count_first_elements((2, 9, (5, 7), 11) ) == 2\nassert count_first_elements((11, 15, 5, 8, (2, 3), 8) ) == 4",
        "canonical_solution": "def count_first_elements(test_tup):\r\n  for count, ele in enumerate(test_tup):\r\n    if isinstance(ele, tuple):\r\n      break\r\n  return (count) "
    },
    {
        "number": 279,
        "prompt": "Write a function to find the nth decagonal number.\ndef is_num_decagonal(n): \n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    return (n * (2*n**2 - 1) == (n*(3*n - 1)) // 2)\n\ndef nth_decagonal_number(n):\n    if is_num_decagonal(n):\n        return n*(n*(3*n - 1)//2)\n    else:\n        return None\n\n# Test cases\nprint(nth_decagonal_number(1)) # Output: 1\nprint(nth_decagonal_number(6)) # Output: 21\nprint(nth_decagonal_number(10)) # Output: 75\nprint(nth_decagonal_number(20)) # Output: None\nprint(nth_decagonal_number(100)) # Output: 506\nprint(nth_decagonal_number(1000)) # Output: 15056\nprint(nth_decagonal_number(10000)) # Output: 15588326\n",
        "generated_testcode": "assert is_num_decagonal(1) == True\n",
        "test": "assert is_num_decagonal(3) == 27\nassert is_num_decagonal(7) == 175\nassert is_num_decagonal(10) == 370",
        "canonical_solution": "def is_num_decagonal(n): \r\n\treturn 4 * n * n - 3 * n "
    },
    {
        "number": 280,
        "prompt": "Write a function to search an element in the given array by using sequential search.\ndef sequential_search(dlist, item):\n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return i\n    return -1\n\n#Test the function\ndlist = [12, 23, 45, 78, 90, 45, 80, 11, 56, 123, 78]\nprint(sequential_search(dlist, 80)) # Output: 4\nprint(sequential_search(dlist, 100)) # Output: -1\n\n\n# Example function to search an element in the given array by using binary search\ndef binary_search(dlist, item):\n    low = 0\n    high = len(dlist) - 1\n    mid = 0\n\n    while low <= high:\n        mid = (low + high) // 2\n        if dlist[mid] == item:\n            return mid\n        elif dlist[mid] > item:\n            high = mid - 1\n        else:\n            low = mid + 1\n    return -1\n\n# Test the function\ndlist = [12, 23, 45, 78, 90, 45, 80, 11, 56, 123, 78]\nprint(binary_search(dlist, 80)) # Output: 3\nprint(binary_search(dlist, 10)) # Output: -1\n\n\n# Example function",
        "generated_testcode": "assert sequential_search([\"apple\", \"banana\", \"cherry\", \"orange\", \"grape\", \"kiwi\"], \"cherry\") == 2\n",
        "test": "assert sequential_search([11,23,58,31,56,77,43,12,65,19],31) == (True, 3)\nassert sequential_search([12, 32, 45, 62, 35, 47, 44, 61],61) == (True, 7)\nassert sequential_search([9, 10, 17, 19, 22, 39, 48, 56],48) == (True, 6)",
        "canonical_solution": "def sequential_search(dlist, item):\r\n    pos = 0\r\n    found = False\r\n    while pos < len(dlist) and not found:\r\n        if dlist[pos] == item:\r\n            found = True\r\n        else:\r\n            pos = pos + 1\r\n    return found, pos"
    },
    {
        "number": 281,
        "prompt": "Write a python function to check if the elements of a given list are unique or not.\ndef all_unique(test_list):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": true,
        "answer": "    unique_list = []\n    for i in test_list:\n        if i not in unique_list:\n            unique_list.append(i)\n    if len(unique_list) == len(test_list):\n        return True\n    else:\n        return False\n\n#Testing the function\nprint(all_unique([1,2,3,4,5,6,7,8,9])) #True\nprint(all_unique([1,2,3,4,5,5,6,7,8,9])) #False\nprint(all_unique([1,1,2,3,4,5,6,7,8,9])) #False\nprint(all_unique([1,2,3,4,4,5,6,7,8,9])) #False\n",
        "generated_testcode": "assert all_unique([\"apple\", \"banana\", \"cherry\", \"orange\", \"grape\", \"kiwi\", \"mango\"]), True\n",
        "test": "assert all_unique([1,2,3]) == True\nassert all_unique([1,2,1,2]) == False\nassert all_unique([1,2,3,4,5]) == True",
        "canonical_solution": "def all_unique(test_list):\r\n    if len(test_list) > len(set(test_list)):\r\n        return False\r\n    return True"
    },
    {
        "number": 282,
        "prompt": "Write a function to substaract two lists using map and lambda function.\ndef sub_list(nums1,nums2):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    return list(map(lambda x,y:x-y,nums1,nums2))\nnums1=[1,2,3,4,5,6,7,8,9]\nnums2=[3,4,5,6,7,8,9,10]\nprint(sub_list(nums1,nums2))\n#Output:[-2,-2,-3,-3,-1,-2,-1]\n\n#Write a function to add two lists using map and lambda function\ndef add_list(nums1,nums2):\n    return list(map(lambda x,y:x+y,nums1,nums2))\nnums1=[1,2,3,4,5,6,7,8]\nnums2=[3,4,5,6,7,8,9]\nprint(add_list(nums1,nums2))\n#Output:[4,6,8,9,11,11,17]\n\n#Write a function to multiply two lists using map and lambda function\ndef mul_list(nums1,nums2):\n    return list(map(lambda x,y:x*y,nums1,nums2))\nnums1=[1,2,3,4,5,6,7]\nnums2=[4,5,6,7,8,9]\nprint(mul_list(nums1,nums2))\n#Output:[4,10,21,28,",
        "generated_testcode": "assert sub_list([1,2,3,4,5], [2,1,4]) == [1,1,-1,-1]\n",
        "test": "assert sub_list([1, 2, 3],[4,5,6])==[-3,-3,-3]\nassert sub_list([1,2],[3,4])==[-2,-2]\nassert sub_list([90,120],[50,70])==[40,50]",
        "canonical_solution": "def sub_list(nums1,nums2):\r\n  result = map(lambda x, y: x - y, nums1, nums2)\r\n  return list(result)"
    },
    {
        "number": 283,
        "prompt": "Write a python function to check whether the frequency of each digit is less than or equal to the digit itself.\ndef validate(n): \n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    digits = [int(digit) for digit in str(n)] \n    for digit in digits: \n        count = digits.count(digit) \n        if count > digit: \n            return False\n    return True\n\n\n# Test cases \nprint(validate(12345)) # True \nprint(validate(1345)) # False \nprint(validate(101)) # False \nprint(validate(1221)) # False ",
        "generated_testcode": "assert validate(12345) == True\n",
        "test": "assert validate(1234) == True\nassert validate(51241) == False\nassert validate(321) == True",
        "canonical_solution": "def validate(n): \r\n    for i in range(10): \r\n        temp = n;  \r\n        count = 0; \r\n        while (temp): \r\n            if (temp % 10 == i): \r\n                count+=1;  \r\n            if (count > i): \r\n                return False\r\n            temp //= 10; \r\n    return True"
    },
    {
        "number": 284,
        "prompt": "Write a function to check whether all items of a list are equal to a given string.\ndef check_element(list,element):\n",
        "checkpoint": "7B",
        "pass": 4,
        "correct": true,
        "answer": "    return all(item == element for item in list)\n\n# Test the function\nmy_list = ['apple', 'apple', 'apple', 'apple']\nprint(check_element(my_list, 'apple')) # Output: True\n\nmy_list = ['banana', 'apple', 'apple', 'apple']\nprint(check_element(my_list, 'apple')) # Output: False\n\nmy_list = ['apple', 'apple', 'apple', 'apple']\nprint(check_element(my_list, 'banana')) # Output: False\n\nmy_list = ['apple', 'apple', 'apple']\nprint(check_element(my_list, 'orange')) # Output: False\n",
        "generated_testcode": "assert check_element([\"apple\", \"apple\", \"apple\", \"apple\"], \"apple\") == True\n",
        "test": "assert check_element([\"green\", \"orange\", \"black\", \"white\"],'blue')==False\nassert check_element([1,2,3,4],7)==False\nassert check_element([\"green\", \"green\", \"green\", \"green\"],'green')==True",
        "canonical_solution": "def check_element(list,element):\r\n  check_element=all(v== element for v in list)\r\n  return check_element"
    },
    {
        "number": 285,
        "prompt": "Write a function that matches a string that has an a followed by two to three 'b'.\ndef text_match_two_three(text):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    pattern = r\"ab{2,3}\"\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False\n\n# Test cases\nprint(text_match_two_three(\"abbb\")) # True\nprint(text_match_two_three(\"aabb\")) # True\nprint(text_match_two_three(\"abb\")) # True\nprint(text_match_two_three(\"abc\")) # False\nprint(text_match_two_three(\"abbbb\")) # True\nprint(text_match_two_three(\"abbc\")) # False\nprint(text_match_two_three(\"abb\")) # True\nprint(text_match_two_three(\"abbbbb\")) # False\nprint(text_match_two_three(\"a\")) # False\nprint(text_match_two_three(\"abbbbc\")) # True\nprint(text_match_two_three(\"abbbbbb\")) # False",
        "generated_testcode": "assert text_match_two_three(\"abab\" ) == True\n",
        "test": "assert text_match_two_three(\"ac\")==('Not matched!')\nassert text_match_two_three(\"dc\")==('Not matched!')\nassert text_match_two_three(\"abbbba\")==('Found a match!')",
        "canonical_solution": "import re\r\ndef text_match_two_three(text):\r\n        patterns = 'ab{2,3}'\r\n        if re.search(patterns,  text):\r\n                return 'Found a match!'\r\n        else:\r\n                return('Not matched!')"
    },
    {
        "number": 286,
        "prompt": "Write a function to find the largest sum of contiguous array in the modified array which is formed by repeating the given array k times.\ndef max_sub_array_sum_repeated(a, n, k): \n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": true,
        "answer": "    # find the sum of the array and the maximum sum \n    sum_array = sum(a) \n    max_sum = sum_array \n\n    # repeat the array k times and find the sum of the repeated array \n    for i in range(k-1): \n        for j in range(n): \n            a.append(a[j]) \n        sum_array = sum(a) \n        if sum_array > max_sum: \n            max_sum = sum_array \n    return max_sum ",
        "generated_testcode": "assert max_sub_array_sum_repeated(a=[1, 2, 3, -4, 5, -2, 6, 1, -1], n=3, k=2) == 17\n",
        "test": "assert max_sub_array_sum_repeated([10, 20, -30, -1], 4, 3) == 30\nassert max_sub_array_sum_repeated([-1, 10, 20], 3, 2) == 59\nassert max_sub_array_sum_repeated([-1, -2, -3], 3, 3) == -1",
        "canonical_solution": "def max_sub_array_sum_repeated(a, n, k): \r\n\tmax_so_far = -2147483648\r\n\tmax_ending_here = 0\r\n\tfor i in range(n*k): \r\n\t\tmax_ending_here = max_ending_here + a[i%n] \r\n\t\tif (max_so_far < max_ending_here): \r\n\t\t\tmax_so_far = max_ending_here \r\n\t\tif (max_ending_here < 0): \r\n\t\t\tmax_ending_here = 0\r\n\treturn max_so_far"
    },
    {
        "number": 287,
        "prompt": "Write a python function to find the sum of squares of first n even natural numbers.\ndef square_Sum(n):  \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i**2\n    return sum\n\nn = int(input(\"Enter a positive integer: \"))\nprint(\"Sum of squares of first\",n,\"even natural numbers is:\",square_Sum(n)) ",
        "generated_testcode": "assert square_Sum(5) == 555\n",
        "test": "assert square_Sum(2) == 20\nassert square_Sum(3) == 56\nassert square_Sum(4) == 120",
        "canonical_solution": "def square_Sum(n):  \r\n    return int(2*n*(n+1)*(2*n+1)/3)"
    },
    {
        "number": 288,
        "prompt": "Write a function to count array elements having modular inverse under given prime number p equal to itself.\ndef modular_inverse(arr, N, P):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    mod_inv = []\n    for i in range(N):\n        mod_inv.append(pow(arr[i], P-2, P))\n    count = 0\n    for i in range(N):\n        if mod_inv[i] == arr[i]:\n            count += 1\n    return count\n\n\n# Test the function with example input\narr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nP = 11\nprint(modular_inverse(arr, len(arr), P))\n# Output: 2\n# Explanation: The modular inverse of 1, 2, 3, 4, 5, 6, 7, 8, and 9 are themselves, while the modular inverse of 10 is 1 (10^(-1) % 11 = 1). So, the function returns 2. ",
        "generated_testcode": "assert modular_inverse([1, 2, 3, 4, 5, 6, 7, 8, 9], 10, 3) == [1, 2, 3, 4, 5, 6, 7, 8]\n",
        "test": "assert modular_inverse([ 1, 6, 4, 5 ], 4, 7) == 2\nassert modular_inverse([1, 3, 8, 12, 12], 5, 13) == 3\nassert modular_inverse([2, 3, 4, 5], 4, 6) == 1",
        "canonical_solution": "def modular_inverse(arr, N, P):\r\n\tcurrent_element = 0\r\n\tfor i in range(0, N):\r\n\t\tif ((arr[i] * arr[i]) % P == 1):\r\n\t\t\tcurrent_element = current_element + 1\r\n\treturn current_element"
    },
    {
        "number": 289,
        "prompt": "Write a python function to calculate the number of odd days in a given year.\ndef odd_Days(N): \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    # function to calculate the number of odd days in a year\n    # N is the year\n    # returns the number of odd days in that year\n    leap = 0\n    if N % 4 == 0:\n        if N % 1000 == 0:\n            if N % 4000 == 0:\n                leap = 1\n        else:\n            leap = 0\n    else:\n        leap = 1\n\n    # using the leap year rule, we need to check for the number of odd days\n    if leap:\n        # if it's a leap year, then we have 366 days in Feb\n        odd_days = 31 + 31 + 30 + 31 + 30 + 31 + 31 + 30 + 31 + 31 + 30 + 31 + 30 + 31 + 31 + 30 + 31 + 30 + 31 + 31\n    else:\n        # otherwise, we have 365 days in Feb\n        odd_days = 31 + 31 + 28 + 31 + 30 + 31 + 30 + 31 + 31 + 30 + 31 + 30 + 31 + 31 + 30 + 31 + 30 + 31 + 31\n    return odd_days\n\ndef odd",
        "generated_testcode": "assert odd_Days(2020) == 91\n",
        "test": "assert odd_Days(100) == 5\nassert odd_Days(50) ==6\nassert odd_Days(75) == 2",
        "canonical_solution": "def odd_Days(N): \r\n    hund1 = N // 100\r\n    hund4 = N // 400\r\n    leap = N >> 2\r\n    ordd = N - leap \r\n    if (hund1): \r\n        ordd += hund1 \r\n        leap -= hund1 \r\n    if (hund4): \r\n        ordd -= hund4 \r\n        leap += hund4 \r\n    days = ordd + leap * 2\r\n    odd = days % 7\r\n    return odd "
    },
    {
        "number": 290,
        "prompt": "Write a function to find the list of lists with maximum length.\ndef max_length(list1):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    max_length = 0\n    max_list = []\n    for i in list1:\n        if len(i) > max_length:\n            max_length = len(i)\n            max_list = i\n    return max_list\n\n# Example usage:\nlist1 = [[1, 2, 3], [4, 5], [6, 7, 8], [9], [10, 11, 12, 13], [14, 15, 16, 17, 18]]\nprint(max_length(list1)) # Output: [10, 11, 12, 13]\n\nlist2 = [[1, 2], [3, 4, 5], [6, 7, 8], [9], [10, 11, 12, 13], [14, 15, 16, 17, 18], [19, 20]]\nprint(max_length(list2)) # Output: [19, 20]\n\nlist3 = [[1, 2], [3, 4, 5], [6, 7, 8], [9], [10, 11, 12, 13], [14, 15, 16, 17, 18]]\nprint(max_length(list3)) # Output: [10, 11, 12, ",
        "generated_testcode": "assert max_length([[1,2,3],[4,5],[6,7,8,9],[10,11],[12,13,14,15,16],[17,18],[19,20,21,22,23,24]] ) == [1,2,3,4,1,1,1]\n",
        "test": "assert max_length([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [13, 15, 17])\nassert max_length([[1], [5, 7], [10, 12, 14,15]])==(4, [10, 12, 14,15])\nassert max_length([[5], [15,20,25]])==(3, [15,20,25])",
        "canonical_solution": "def max_length(list1):\r\n    max_length = max(len(x) for x in  list1 )  \r\n    max_list = max((x) for x in   list1)\r\n    return(max_length, max_list)"
    },
    {
        "number": 291,
        "prompt": "Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\ndef count_no_of_ways(n, k): \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    def helper(n, k, prev_color, curr_color, memo):\n        if n == 1:\n            return k\n        if prev_color == curr_color:\n            return k - 1\n        if (n, curr_color) in memo:\n            return memo[(n, curr_color)]\n        else:\n            memo[(n, curr_color)] = helper(n - 1, k - 1, curr_color, memo) + helper(n - 1, k, curr_color, memo)\n            return memo[(n, curr_color)]\n    memo = {}\n    return helper(n, k, 0, memo)\n\n# Test the function\nn = 4\nk = 2\nprint(count_no_of_ways(n, k))\n\n# Output: 6\n\n# Explanation:\n# We can paint the fence in the following ways:\n# 1. Paint all the fence posts with color 1, 1, 2, 1, 1\n# 2. Paint all the fence posts with color 1, 2, 1, 2\n# 3. Paint all the fence posts with color 2, 1, 2, 1\n# 4. Paint the first post with color 1, the second post with color 2, and the rest with color 1\n# 5. Paint the first post with color 2, the second post with color 1, and",
        "generated_testcode": "assert count_no_of_ways(3, 2) == 4\n",
        "test": "assert count_no_of_ways(2, 4) == 16\nassert count_no_of_ways(3, 2) == 6\nassert count_no_of_ways(4, 4) == 228",
        "canonical_solution": "def count_no_of_ways(n, k): \r\n\tdp = [0] * (n + 1) \r\n\ttotal = k \r\n\tmod = 1000000007\r\n\tdp[1] = k \r\n\tdp[2] = k * k\t \r\n\tfor i in range(3,n+1): \r\n\t\tdp[i] = ((k - 1) * (dp[i - 1] + dp[i - 2])) % mod \r\n\treturn dp[n]"
    },
    {
        "number": 292,
        "prompt": "Write a python function to find quotient of two numbers.\ndef find(n,m):  \n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": true,
        "answer": "    return n/m  \n\n# Call the function and print the result \nprint(find(10,4))  ",
        "generated_testcode": "assert find(10,5) == 2\n",
        "test": "assert find(10,3) == 3\nassert find(4,2) == 2\nassert find(20,5) == 4",
        "canonical_solution": "def find(n,m):  \r\n    q = n//m \r\n    return (q)"
    },
    {
        "number": 293,
        "prompt": "Write a function to find the third side of a right angled triangle.\ndef otherside_rightangle(w,h):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": true,
        "answer": "    c = ((w**2)+(h**2))**0.5\n    return round(c,2)\n\n#test the function with an example\nprint(otherside_rightangle(3,4))\n\n#test the function with another example\nprint(otherside_rightangle(5,12))\n\n#test the function with another example\nprint(otherside_rightangle(12,13)) ",
        "generated_testcode": "assert otherside_rightangle(3,4) == 5\n",
        "test": "assert otherside_rightangle(7,8)==10.63014581273465\nassert otherside_rightangle(3,4)==5\nassert otherside_rightangle(7,15)==16.55294535724685",
        "canonical_solution": "import math\r\ndef otherside_rightangle(w,h):\r\n  s=math.sqrt((w*w)+(h*h))\r\n  return s"
    },
    {
        "number": 294,
        "prompt": "Write a function to find the maximum value in a given heterogeneous list.\ndef max_val(listval):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    max_val = listval[0]\n    for i in listval:\n        if i > max_val:\n            max_val = i\n    return max_val\n\n# Test the function with the given list\ntest_list = [5, 'a', 8, 'b', 3.5, 'c', 12, 8.6, 7, 'd', 'e', 10]\nprint(max_val(test_list)) # should print 12\n\n\n# Test the function with another list\ntest_list2 = ['h', 'g', 2.5, 3, 'f', 1, 'e', 10, 'z', 20, 2.6, 'y']\nprint(max_val(test_list2)) # should print 20\n\n\n# Test the function with an empty list\ntest_list3 = []\nprint(max_val(test_list3)) # should print None\n\n\n# Test the function with a list of only strings\ntest_list4 = ['a', 'b', 'c', 'd']\nprint(max_val(test_list4)) # should print 'd'\n\n\n# Test the function with a list of only integers\ntest_list5 = [4, 5, 6, 7, 8, 9, 10]\nprint(max_val(test_list5)) # should print 10\n\n\n# Test the function with a list of only floats\ntest_list",
        "generated_testcode": "assert max_val([\"apple\", 10, 20, \"banana\", 5, 30, \"orange\", 15, 40, \"grape\"]) == 40\n",
        "test": "assert max_val(['Python', 3, 2, 4, 5, 'version'])==5\nassert max_val(['Python', 15, 20, 25])==25\nassert max_val(['Python', 30, 20, 40, 50, 'version'])==50",
        "canonical_solution": "def max_val(listval):\r\n     max_val = max(i for i in listval if isinstance(i, int)) \r\n     return(max_val)"
    },
    {
        "number": 295,
        "prompt": "Write a function to return the sum of all divisors of a number.\ndef sum_div(number):\n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    def sum_divisors(num):\n        divisor_sum = 0\n        for i in range(1, num + 1):\n            if num % i == 0:\n                divisor_sum += i\n        return divisor_sum\n\n    return sum_divisors(number)\n\n\n# Test the function with the given input\nprint(sum_div(12)) # Output: 28 (1 + 2 + 3 + 4 + 6 + 12) = 28\nprint(sum_div(15)) # Output: 16 (1 + 3 + 5 + 15) = 19\nprint(sum_div(20)) # Output: 50 (1 + 2 + 4 + 5 + 10 + 20) = 30\nprint(sum_div(27)) # Output: 16 (1 + 3 + 9 + 3 * 3 + 9) = 19\nprint(sum_div(30)) # Output: 78 (1 + 2 + 3 + 5 + 6 + 10 + 15 + 30) = 58\n\n\n# Write a function to return the square of the sum of the first n natural numbers\ndef square_sum(n):\n    return (n * (n + 1) * (2 * n + 1)) // 6\n\n\n# Test the function with the given input\nprint(square_sum(5))",
        "generated_testcode": "assert sum_div(12) == 28 # 1 + 2 + 3 + 4 + 6 + 12\n",
        "test": "assert sum_div(8)==7\nassert sum_div(12)==16\nassert sum_div(7)==1",
        "canonical_solution": "def sum_div(number):\r\n    divisors = [1]\r\n    for i in range(2, number):\r\n        if (number % i)==0:\r\n            divisors.append(i)\r\n    return sum(divisors)"
    },
    {
        "number": 296,
        "prompt": "Write a python function to count inversions in an array.\ndef get_Inv_Count(arr,n): \n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": true,
        "answer": "    inv_count = 0\n    for i in range(n): \n        for j in range(i+1, n): \n            if arr[i] > arr[j]: \n                inv_count += 1\n    return inv_count \n  \narr = [1, 20, 6, 4, 5, 3, 10] \nn = len(arr) \nprint(\"Number of inversions are\", get_Inv_Count(arr, n)) ",
        "generated_testcode": "assert get_Inv_Count([1, 2, 3, 4, 5, 6, 7, 8, 9] , 6) == 0\n",
        "test": "assert get_Inv_Count([1,20,6,4,5],5) == 5\nassert get_Inv_Count([1,2,1],3) == 1\nassert get_Inv_Count([1,2,5,6,1],5) == 3",
        "canonical_solution": "def get_Inv_Count(arr,n): \r\n    inv_count = 0\r\n    for i in range(n): \r\n        for j in range(i + 1,n): \r\n            if (arr[i] > arr[j]): \r\n                inv_count += 1\r\n    return inv_count "
    },
    {
        "number": 297,
        "prompt": "Write a function to flatten a given nested list structure.\ndef flatten_list(list1):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": true,
        "answer": "    result = []\n    for element in list1:\n        if type(element) == list:\n            result.extend(flatten_list(element) )\n        else:\n            result.append(element)\n    return result\n\nprint(flatten_list([1,2,[3,4,[5,6,[7,8,[9,10],11],12],13],14])) # Output: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]\n\n#Explanation: \n# The first element in the list is an integer, so it is added to the result list. \n# The second element is a list, which is flattened using the recursive call to flatten_list. The result of the recursive call is a list [5, 6, [7, 8, [9, 10], 11, 12], 13]. \n# The elements of this list are added to the result list. The third element is also a list, but it contains another list inside it, which is also flattened. \n# The result of the recursive call is a list [9, 10, 11, 12]. The elements of this list are added to the result list. Finally, the last element is an integer, which is added to the result list. \n# The final result is a flattened list [1, 2,",
        "generated_testcode": "assert flatten_list([\"a\", \"b\", [\"c\", \"d\", [\"e\", \"f\", [\"g\", \"h\"]], \"i\"], \"j\", \"k\"]) == [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\"]\n",
        "test": "assert flatten_list([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]])==[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]\nassert flatten_list([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]])==[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]\nassert flatten_list([[1,2,3], [4,5,6], [10,11,12], [7,8,9]])==[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]",
        "canonical_solution": "def flatten_list(list1):\r\n    result_list = []\r\n    if not list1: return result_list\r\n    stack = [list(list1)]\r\n    while stack:\r\n        c_num = stack.pop()\r\n        next = c_num.pop()\r\n        if c_num: stack.append(c_num)\r\n        if isinstance(next, list):\r\n            if next: stack.append(list(next))\r\n        else: result_list.append(next)\r\n    result_list.reverse()\r\n    return result_list "
    },
    {
        "number": 298,
        "prompt": "Write a function to find the nested list elements which are present in another list.\ndef intersection_nested_lists(l1, l2):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    if type(l1) == list and type(l2) == list:\n        intersection_list = []\n        for i in l1:\n            if type(i) == list:\n                for j in i:\n                    if j in l2:\n                        intersection_list.append(i)\n            else:\n                if i in l2:\n                    intersection_list.append(i)\n        return intersection_list\n    else:\n        return \"Both arguments should be of type list\"\n\n\n# Test cases\nprint(intersection_nested_lists([[1, [2, 3], [4, [5, 6]], 7], [8, 9, 10], [4, 5, [6, 7]], 10], [5, [4, [5, 6], 7, 8]))  # Output: [[4, [5, 6]]]\nprint(intersection_nested_lists([[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12], [1, 2, [3, 4, 5]])  # Output: []\nprint(intersection_nested_lists([[1, [2, 3], 4, 5], [5, [6, [7, 8], 9], [10, 11, 12], [1, 2, [3, 4, 5])  # Output",
        "generated_testcode": "assert intersection_nested_lists(\n    [[1, 2, [3, 4], [5, 6]], [7, 8, [9, [10, 11], 12], [13, [14, 15, [16, 17]]]], [18, 19, 20]], [[21, 22, 23], [24, 25, [26, 27, [28, 29]]]) == [1, 2, 3, 4, 5, 6, 9, 10, 11, 13, 14, 15, 16, 17, 21, 22, 23, 24, 25, 26, 27, 28]\n\n# The output should be a list containing the nested elements that are present in both lists. ",
        "test": "assert intersection_nested_lists( [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14],[[12, 18, 23, 25, 45], [7, 11, 19, 24, 28], [1, 5, 8, 18, 15, 16]])==[[12], [7, 11], [1, 5, 8]]\nassert intersection_nested_lists([[2, 3, 1], [4, 5], [6, 8]], [[4, 5], [6, 8]])==[[], []]\nassert intersection_nested_lists(['john','amal','joel','george'],[['john'],['jack','john','mary'],['howard','john'],['jude']])==[['john'], ['john'], ['john'], []]",
        "canonical_solution": "def intersection_nested_lists(l1, l2):\r\n    result = [[n for n in lst if n in l1] for lst in l2]\r\n    return result"
    },
    {
        "number": 299,
        "prompt": "Write a function to calculate the maximum aggregate from the list of tuples.\ndef max_aggregate(stdata):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    max_agg = 0\n    for tup in stdata:\n        if sum(tup) > max_agg:\n            max_agg = sum(tup)\n    return max_agg\n\n# Test the function with the following input\nstdata = [(1,2,3), (4,5,6), (7,8,9)]\nprint(max_aggregate(stdata)) # Output: 24\n\nstdata = [(1,2,3,4), (4,5,6,7), (7,8,9,10)]\nprint(max_aggregate(stdata)) # Output: 30\nstdata = [(1,2), (3,4), (5,6)]\nprint(max_aggregate(stdata)) # Output: 12\n\n# Test the function with the following input\nstdata = [(1,2,3), (4,-5,6), (7,8,9)]\nprint(max_aggregate(stdata)) # Output: 11\nstdata = [(1,2,3,4), (4,5,6,7), (-7,8,9,10)]\nprint(max_aggregate(stdata)) # Output: 15\nstdata = [(-1,-2,3), (-4,-5,-6), (-7,-8,-9)]\nprint(max_aggregate(stdata)) # Output: 3\nstdata = [(1,2,3), (4,5,6), (7,8,",
        "generated_testcode": "assert max_aggregate([(1,2,3), (4,5,6), (7,8,9)] ) == 23\n",
        "test": "assert max_aggregate([('Juan Whelan',90),('Sabah Colley',88),('Peter Nichols',7),('Juan Whelan',122),('Sabah Colley',84)])==('Juan Whelan', 212)\nassert max_aggregate([('Juan Whelan',50),('Sabah Colley',48),('Peter Nichols',37),('Juan Whelan',22),('Sabah Colley',14)])==('Juan Whelan', 72)\nassert max_aggregate([('Juan Whelan',10),('Sabah Colley',20),('Peter Nichols',30),('Juan Whelan',40),('Sabah Colley',50)])==('Sabah Colley', 70)",
        "canonical_solution": "from collections import defaultdict\r\ndef max_aggregate(stdata):\r\n    temp = defaultdict(int)\r\n    for name, marks in stdata:\r\n        temp[name] += marks\r\n    return max(temp.items(), key=lambda x: x[1])"
    },
    {
        "number": 300,
        "prompt": "Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\ndef count_binary_seq(n): \n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    def count(counts, n):\n        if n == 1:\n            return 2\n        if n == 0:\n            return 1\n        if n == 2:\n            return 2\n        if n not in counts:\n            counts[n] = (count(counts, n-1) + count(counts, n-2)) * 2\n        return counts[n]\n    \n    counts = {1:2, 2:2}\n    return count(counts, n)\n\n\n# Test cases\nprint(count_binary_seq(1)) # Output: 2\nprint(count_binary_seq(2)) # Output: 2\nprint(count_binary_seq(3)) # Output: 6\nprint(count_binary_seq(4)) # Output: 26\nprint(count_binary_seq(5)) # Output: 126\n",
        "generated_testcode": "assert count_binary_seq(2) == 2\n",
        "test": "assert count_binary_seq(1) == 2.0\nassert count_binary_seq(2) == 6.0\nassert count_binary_seq(3) == 20.0",
        "canonical_solution": "def count_binary_seq(n): \r\n\tnCr = 1\r\n\tres = 1\r\n\tfor r in range(1, n + 1): \r\n\t\tnCr = (nCr * (n + 1 - r)) / r \r\n\t\tres += nCr * nCr \r\n\treturn res "
    },
    {
        "number": 301,
        "prompt": "Write a function to find the depth of a dictionary.\ndef dict_depth(d):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    depth = 0\n    for val in d.values():\n        if isinstance(val, dict):\n            depth = max(dict_depth(val) + 1, depth)\n    return depth\n\n# Test cases\nprint(dict_depth({\"a\": {\"b\": {\"c\": {\"d\": {}}}}) # 3\nprint(dict_depth({\"a\": {\"b\": {\"c\": {\"d\": {\"e\": {}}}}) # 3\nprint(dict_depth({\"a\": {\"b\": {\"c\": {\"d\": {\"e\": {}, \"f\": {}}}}) # 3\nprint(dict_depth({\"a\": {\"b\": {\"c\": {\"d\": {\"e\": {\"f\": {\"g\": {}}}}) # 4\nprint(dict_depth({\"a\": {\"b\": {\"c\": {\"d\": {\"e\": {\"f\": {\"g\": {\"h\": {}}}}) # 4\nprint(dict_depth({\"a\": {\"b\": {\"c\": {\"d\": {\"e\": {\"f\": {\"g\": {\"h\": {}, \"i\": {}}}}) # 4\n\n\n# Expected output:\n# 3\n# 3\n# 3\n# 4\n# 4\n# 4\n# 4\n# 4 ",
        "generated_testcode": "assert dict_depth(dict()) == 0\n",
        "test": "assert dict_depth({'a':1, 'b': {'c': {'d': {}}}})==4\nassert dict_depth({'a':1, 'b': {'c':'python'}})==2\nassert dict_depth({1: 'Sun', 2: {3: {4:'Mon'}}})==3",
        "canonical_solution": "def dict_depth(d):\r\n    if isinstance(d, dict):\r\n        return 1 + (max(map(dict_depth, d.values())) if d else 0)\r\n    return 0"
    },
    {
        "number": 302,
        "prompt": "Write a python function to find the most significant bit number which is also a set bit.\ndef set_Bit_Number(n): \n",
        "checkpoint": "7B",
        "pass": 3,
        "correct": true,
        "answer": "    count = 0\n    while (n & 1) == 0: \n        n >>= 1\n        count += 1\n    return count \n  \n# Driver code \nn = 10\nprint(set_Bit_Number(n)) ",
        "generated_testcode": "assert set_Bit_Number(10) == 1\n",
        "test": "assert set_Bit_Number(6) == 4\nassert set_Bit_Number(10) == 8\nassert set_Bit_Number(18) == 16",
        "canonical_solution": "def set_Bit_Number(n): \r\n    if (n == 0): \r\n        return 0; \r\n    msb = 0; \r\n    n = int(n / 2); \r\n    while (n > 0): \r\n        n = int(n / 2); \r\n        msb += 1; \r\n    return (1 << msb)"
    },
    {
        "number": 303,
        "prompt": "Write a python function to check whether the count of inversion of two types are same or not.\ndef solve(a,n):   \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    # create a dictionary to store count of each type of elements\n    d = {}\n    for i in a:\n        if i in d:\n            d[i] += 1\n        else:\n            d[i] = 1\n\n    # check if the count of both types is same\n    return d[1] == d[0]\n\n\n# test the function\na = [0,1,1,0,0,1]\nn = len(a)\nprint(solve(a,n))\n",
        "generated_testcode": "assert solve([1,2,3,4,5,6,7,8,9], 6) == True\n",
        "test": "assert solve([1,0,2],3) == True\nassert solve([1,2,0],3) == False\nassert solve([1,2,1],3) == True",
        "canonical_solution": "import sys \r\ndef solve(a,n):   \r\n    mx = -sys.maxsize - 1\r\n    for j in range(1,n):  \r\n        if (mx > a[j]):  \r\n            return False  \r\n        mx = max(mx,a[j - 1])    \r\n    return True"
    },
    {
        "number": 304,
        "prompt": "Write a python function to find element at a given index after number of rotations.\ndef find_Element(arr,ranges,rotations,index) :  \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    n = len(arr)  \n    if index >= rotations :  \n        return -1  \n    if index < 0 or index >= n :  \n        return -1  \n    if rotations == 0 :  \n        return arr[index]  \n    l = 0  \n    r = n - 1  \n    while l <= r :  \n        mid = (l + r) // 2  \n        if arr[mid] < arr[r] :  \n            r = mid - 1  \n        else :  \n            l = mid + 1  \n    if r == n - 1 :  \n        return arr[r]  \n    rot = r  \n    if index < rot :  \n        return arr[index]  \n    else :  \n        return arr[index - rot]  \n    \n    return find_Element(arr, rotations - r, index)  \n  \n# Driver Code  \narr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]  \nranges = 3  \nindex = 6  \nprint(find_Element(arr, ranges, index)) ",
        "generated_testcode": "assert find_Element([1,2,3,4,5,6,7,8,9,10,11,12], 3, 4) == 7\n",
        "test": "assert find_Element([1,2,3,4,5],[[0,2],[0,3]],2,1) == 3\nassert find_Element([1,2,3,4],[[0,1],[0,2]],1,2) == 3\nassert find_Element([1,2,3,4,5,6],[[0,1],[0,2]],1,1) == 1",
        "canonical_solution": "def find_Element(arr,ranges,rotations,index) :  \r\n    for i in range(rotations - 1,-1,-1 ) : \r\n        left = ranges[i][0] \r\n        right = ranges[i][1] \r\n        if (left <= index and right >= index) : \r\n            if (index == left) : \r\n                index = right \r\n            else : \r\n                index = index - 1 \r\n    return arr[index] "
    },
    {
        "number": 305,
        "prompt": "Write a function to match two words from a list of words starting with letter 'p'.\ndef start_withp(words):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    result = []\n    for word in words:\n        if word.startswith('p'):\n            result.append(word)\n    return result\n\n# Test the function with a sample input\nwords = ['python', 'apple', 'pear', 'orange', 'python3', 'python2', 'python programming', 'programming', 'peach']\nprint(start_withp(words)) # Output: ['python', 'python3', 'python2', 'programming', 'peach']\n\n\n# Another test case\nwords = ['apple', 'orange', 'peach', 'banana', 'kiwi', 'grape', 'pear', 'peach']\nprint(start_withp(words)) # Output: ['peach']\n\n# Another test case\nwords = ['python', 'java', 'c++', 'java script', 'python programming', 'javascript']\nprint(start_withp(words)) # Output: ['python', 'python programming', 'javascript']\n\n# Another test case\nwords = ['apple', 'orange', 'pear', 'peach']\nprint(start_withp(words)) # Output: []\n\n# Another test case\nwords = ['python', 'java', 'c++', 'javascript']\nprint(start_withp(words)) # Output: ['python', 'javascript'] ",
        "generated_testcode": "assert start_withp([\"python\", \"java\", \"javascript\", \"php\", \"perl\", \"python\", \"ruby\", \"python3\"] == [\"python\", \"python3\"]\n",
        "test": "assert start_withp([\"Python PHP\", \"Java JavaScript\", \"c c++\"])==('Python', 'PHP')\nassert start_withp([\"Python Programming\",\"Java Programming\"])==('Python','Programming')\nassert start_withp([\"Pqrst Pqr\",\"qrstuv\"])==('Pqrst','Pqr')",
        "canonical_solution": "import re\r\ndef start_withp(words):\r\n for w in words:\r\n        m = re.match(\"(P\\w+)\\W(P\\w+)\", w)\r\n        if m:\r\n            return m.groups()"
    },
    {
        "number": 306,
        "prompt": "Write a function to find the maximum sum of increasing subsequence from prefix till ith index and also including a given kth element which is after i, i.e., k > i .\ndef max_sum_increasing_subseq(a, n, index, k):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    if n == 1:\n        return a[0]\n\n    max_sum = [a[0]]\n    prev = a[0]\n    for i in range(1, n):\n        prev_max = max(prev, prev + a[i])\n        max_sum.append(prev_max)\n        prev = prev_max\n\n    max_sum_with_k = [0] * n\n    for i in range(1, n):\n        max_sum_with_k[i] = max_sum[i]\n        if i + k < n:\n            max_sum_with_k[i] = max(max_sum_with_k[i], max_sum_with_k[i - 1] + a[i + k])\n\n    max_sum_with_k[index] = max(max_sum_with_k[index], max_sum[index])\n\n    return max(max_sum_with_k)\n\n\nn = int(input())\na = list(map(int, input().split()))\nindex = int(input())\nk = int(input())\n\nprint(max_sum_increasing_subseq(a, n, index, k))\n",
        "generated_testcode": "assert max_sum_increasing_subseq(a=[1, 2, 3, 4, 5, 1, 2, 3, 7, 8, 9], n=7, index=3, k=5) == 25\n",
        "test": "assert max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5 ], 7, 4, 6) == 11\nassert max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5 ], 7, 2, 5) == 7\nassert max_sum_increasing_subseq([11, 15, 19, 21, 26, 28, 31], 7, 2, 4) == 71",
        "canonical_solution": "def max_sum_increasing_subseq(a, n, index, k):\r\n\tdp = [[0 for i in range(n)] \r\n\t\t\tfor i in range(n)]\r\n\tfor i in range(n):\r\n\t\tif a[i] > a[0]:\r\n\t\t\tdp[0][i] = a[i] + a[0]\r\n\t\telse:\r\n\t\t\tdp[0][i] = a[i]\r\n\tfor i in range(1, n):\r\n\t\tfor j in range(n):\r\n\t\t\tif a[j] > a[i] and j > i:\r\n\t\t\t\tif dp[i - 1][i] + a[j] > dp[i - 1][j]:\r\n\t\t\t\t\tdp[i][j] = dp[i - 1][i] + a[j]\r\n\t\t\t\telse:\r\n\t\t\t\t\tdp[i][j] = dp[i - 1][j]\r\n\t\t\telse:\r\n\t\t\t\tdp[i][j] = dp[i - 1][j]\r\n\treturn dp[index][k]"
    },
    {
        "number": 307,
        "prompt": "Write a function to get a colon of a tuple.\ndef colon_tuplex(tuplex,m,n):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    t = tuple(tuplex)\n    return t[m:n]\n\n#Example usage:\nt = (1,2,3,4,5,6,7,8,9)\nprint(colon_tuplex(t,2,4)) #Output: (3,4,5,6) ",
        "generated_testcode": "assert colon_tuplex(('hello', 'world', 1, 2, 3, 4, 5) == (('hello', 'world', 1, 2, 3, 4, 5)[:m:n])\n",
        "test": "assert colon_tuplex((\"HELLO\", 5, [], True) ,2,50)==(\"HELLO\", 5, [50], True) \nassert colon_tuplex((\"HELLO\", 5, [], True) ,2,100)==((\"HELLO\", 5, [100],True))\nassert colon_tuplex((\"HELLO\", 5, [], True) ,2,500)==(\"HELLO\", 5, [500], True)",
        "canonical_solution": "from copy import deepcopy\r\ndef colon_tuplex(tuplex,m,n):\r\n  tuplex_colon = deepcopy(tuplex)\r\n  tuplex_colon[m].append(n)\r\n  return tuplex_colon"
    },
    {
        "number": 308,
        "prompt": "Write a function to find the specified number of largest products from two given lists.\ndef large_product(nums1, nums2, N):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    from itertools import product\n    products = list(product(nums1, nums2))\n    largest_products = sorted(products, key=lambda x: x[0]*x[1], reverse=True)[:N]\n    return largest_products\n\n# Test the function with some sample inputs\nprint(large_product([1, 2, 3, 4], [5, 6, 7], 2))  # Output: [(7, 5), (6, 4)]\nprint(large_product([-1, -2, -3, -4, -5], [7, 8, 9], 3)) # Output: [(-35, -14), (-10, -20), (-10, 12)]\nprint(large_product([10, 20, 30], [-5, -10, 5], 5)) # Output: [(1000, -50), (-200, 100), (200, 10), (-300, 15), (150, 10), (-40, 15)] ",
        "generated_testcode": "assert large_product([1, 2, 3, 4, 5], [6, 7, 8, 9], 2) == [72, 56]\n",
        "test": "assert large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],3)==[60, 54, 50]\nassert large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],4)==[60, 54, 50, 48]\nassert large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],5)==[60, 54, 50, 48, 45]",
        "canonical_solution": "def large_product(nums1, nums2, N):\r\n    result = sorted([x*y for x in nums1 for y in nums2], reverse=True)[:N]\r\n    return result"
    },
    {
        "number": 309,
        "prompt": "Write a python function to find the maximum of two numbers.\ndef maximum(a,b):   \n",
        "checkpoint": "7B",
        "pass": 4,
        "correct": true,
        "answer": "    if a>b:\n        return a\n    else:\n        return b\n\n# Test the function with sample inputs\nprint(maximum(10,5)) # Output: 10\nprint(maximum(20,15)) # Output: 20\nprint(maximum(30,30)) # Output: 30\nprint(maximum(-10,-5)) # Output: -5\nprint(maximum(-3,-8)) # Output: -3\n",
        "generated_testcode": "assert maximum(5, 10) == 10\n",
        "test": "assert maximum(5,10) == 10\nassert maximum(-1,-2) == -1\nassert maximum(9,7) == 9",
        "canonical_solution": "def maximum(a,b):   \r\n    if a >= b: \r\n        return a \r\n    else: \r\n        return b "
    },
    {
        "number": 310,
        "prompt": "Write a function to convert a given string to a tuple.\ndef string_to_tuple(str1):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    # Convert the string to a list of characters\n    char_list = list(str1)\n    # Create a tuple of the characters\n    tup = tuple(char_list)\n    return tup\n\n# Test the function\nstr1 = \"hello world\"\nprint(string_to_tuple(str1))\n\n\n# Output: ('h', 'e', 'l', 'l', 'o', ' ', 'w', 'o', 'r', 'l', 'd', ' ', 'w', 'o', 'r', 'l', 'd')\n",
        "generated_testcode": "assert string_to_tuple((\"hello\") == ('h', 'e', 'l', 'l', 'o')\n",
        "test": "assert string_to_tuple(\"python 3.0\")==('p', 'y', 't', 'h', 'o', 'n', '3', '.', '0')\nassert string_to_tuple(\"item1\")==('i', 't', 'e', 'm', '1')\nassert string_to_tuple(\"15.10\")==('1', '5', '.', '1', '0')",
        "canonical_solution": "def string_to_tuple(str1):\r\n    result = tuple(x for x in str1 if not x.isspace()) \r\n    return result"
    },
    {
        "number": 311,
        "prompt": "Write a python function to set the left most unset bit.\ndef set_left_most_unset_bit(n): \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    \"\"\"\n    This function takes an integer as input and returns the integer with the left most unset bit set.\n    \"\"\"\n    if n & (n - 1) == 0: \n        return n | (1 << 31)\n    return n | (n & -(n & -n).bit_length())\n\n\n# Test cases\nprint(set_left_most_unset_bit(10)) # Output: 1048576\nprint(set_left_most_unset_bit(2)) # Output: 512\nprint(set_left_most_unset_bit(5)) # Output: 12\nprint(set_left_most_unset_bit(100)) # Output: 1228\nprint(set_left_most_unset_bit(13)) # Output: 16\nprint(set_left_most_unset_bit(17)) # Output: 32\n",
        "generated_testcode": "assert set_left_most_unset_bit(0b1010101010) == 0b101010100\n",
        "test": "assert set_left_most_unset_bit(10) == 14\nassert set_left_most_unset_bit(12) == 14\nassert set_left_most_unset_bit(15) == 15",
        "canonical_solution": "def set_left_most_unset_bit(n): \r\n    if not (n & (n + 1)): \r\n        return n \r\n    pos, temp, count = 0, n, 0 \r\n    while temp: \r\n        if not (temp & 1): \r\n            pos = count      \r\n        count += 1; temp>>=1\r\n    return (n | (1 << (pos))) "
    },
    {
        "number": 312,
        "prompt": "Write a function to find the volume of a cone.\ndef volume_cone(r,h):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    # Calculate the volume of a cone using the formula V = 1/3*pi*r^2*h\n    pi = 3.14159\n    return (1/3 * pi * r**2 * h)\n\n# Test the function with some values\nprint(volume_cone(5,10)) # Output: 314.159\nprint(volume_cone(3,7)) # Output: 15.339\n\n\n# Write a function to find the surface area of a cone\ndef surface_area_cone(r,h):\n    # Calculate the surface area of a cone using the formula A = pi*r*(r+h)\n    pi = 3.14159\n    return (pi * r * (r+h) * 2)\n\n# Test the function with some values\nprint(surface_area_cone(5,10)) # Output: 126.41\nprint(surface_area_cone(3,7)) # Output: 26.83\n\n\n# Write a function to find the lateral surface area of a cone\ndef lateral_surface_area_cone(r):\n    # Calculate the lateral surface area of a cone using the formula A = pi*r^2 + pi*r*h\n    pi = 3.14159\n    h = 0.5 * r\n    return (2 * pi * r**2) + (pi * r *",
        "generated_testcode": "assert volume_cone(5,10) == 151.08\n",
        "test": "assert volume_cone(5,12)==314.15926535897927\nassert volume_cone(10,15)==1570.7963267948965\nassert volume_cone(19,17)==6426.651371693521",
        "canonical_solution": "import math\r\ndef volume_cone(r,h):\r\n  volume = (1.0/3) * math.pi * r * r * h\r\n  return volume"
    },
    {
        "number": 313,
        "prompt": "Write a python function to print positive numbers in a list.\ndef pos_nos(list1):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    for i in range(len(list1)):\n        if list1[i] > 0:\n            print(list1[i], end=\" \")\n\nlist1 = [1, -2, 3, -4, 5, -6, 7, -8, 9, 10]\npos_nos(list1)\n# Output: 1 3 5 7 9 10\n",
        "generated_testcode": "assert pos_nos([1, 2, 3, -4, 5, -6, 7, 8, -9, 10] ) == [1, 2, 3, 5, 7, 8, 10]\n",
        "test": "assert pos_nos([-1,-2,1,2]) == 1,2\nassert pos_nos([3,4,-5]) == 3,4\nassert pos_nos([-2,-3,1]) == 1",
        "canonical_solution": "def pos_nos(list1):\r\n  for num in list1: \r\n    if num >= 0: \r\n       return num "
    },
    {
        "number": 314,
        "prompt": "Write a function to find out the maximum sum such that no two chosen numbers are adjacent for the given rectangular grid of dimension 2 x n.\ndef max_sum_rectangular_grid(grid, n) : \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    if n == 1 : \n        return grid[0][0]\n    \n    dp = [[0] * n for i in range(n)]\n    \n    dp[0][0] = grid[0][0]\n    for i in range(1, n) : \n        dp[0][i] = dp[0][i-1] + grid[0][i]\n    \n    for i in range(1, n) : \n        dp[i][0] = dp[i-1][0] + grid[i][0]\n    \n    for i in range(1, n) : \n        for j in range(1, n) : \n            dp[i][j] = max(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + grid[i][j]\n    \n    max_sum = dp[n-1][n-1]\n    \n    for i in range(1, n) : \n        for j in range(1, n) : \n            max_sum = max(max_sum, dp[i][j], dp[i][0])\n    \n    return max_sum\n\n\n# Driver code \ngrid = [\n    [1, 2, 3, 4, 1],\n    [5, 6, 7, 1],\n    [8, 9, 1, 2],\n    [3",
        "generated_testcode": "assert max_sum_rectangular_grid(\n    [[1, 2, 3, 4],\n     [5, 6, 7, 8],\n     [9, 10, 11, 12],\n     [13, 14, 15, 16]], 3) == 42\n\n",
        "test": "assert max_sum_rectangular_grid([ [1, 4, 5], [2, 0, 0 ] ], 3) == 7\nassert max_sum_rectangular_grid([ [ 1, 2, 3, 4, 5], [ 6, 7, 8, 9, 10] ], 5) == 24\nassert max_sum_rectangular_grid([ [7, 9, 11, 15, 19], [21, 25, 28, 31, 32] ], 5) == 81",
        "canonical_solution": "def max_sum_rectangular_grid(grid, n) : \r\n\tincl = max(grid[0][0], grid[1][0]) \r\n\texcl = 0\r\n\tfor i in range(1, n) : \r\n\t\texcl_new = max(excl, incl) \r\n\t\tincl = excl + max(grid[0][i], grid[1][i]) \r\n\t\texcl = excl_new \r\n\treturn max(excl, incl)"
    },
    {
        "number": 315,
        "prompt": "Write a python function to find the first maximum length of even word.\ndef find_Max_Len_Even(str): \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    words = str.split()\n    max_len = 0\n    for word in words:\n        if len(word)%2 == 0:\n            max_len = max(max_len,len(word))\n    return max_len\n\n# Test the function with sample inputs\nprint(find_Max_Len_Even(\"This is a test string with some words\"))\nprint(find_Max_Len_Even(\"Python is a great programming language\"))\nprint(find_Max_Len_Even(\"Hello World\"))",
        "generated_testcode": "assert find_Max_Len_Even([\"hello\", \"world\", \"python\", \"programming\", \"is\", \"fun\"] == 2)\n",
        "test": "assert find_Max_Len_Even(\"python language\") == \"language\"\nassert find_Max_Len_Even(\"maximum even length\") == \"length\"\nassert find_Max_Len_Even(\"eve\") == \"-1\"",
        "canonical_solution": "def find_Max_Len_Even(str): \r\n    n = len(str) \r\n    i = 0\r\n    currlen = 0\r\n    maxlen = 0\r\n    st = -1\r\n    while (i < n): \r\n        if (str[i] == ' '): \r\n            if (currlen % 2 == 0): \r\n                if (maxlen < currlen): \r\n                    maxlen = currlen \r\n                    st = i - currlen \r\n            currlen = 0 \r\n        else : \r\n            currlen += 1\r\n        i += 1\r\n    if (currlen % 2 == 0): \r\n        if (maxlen < currlen): \r\n            maxlen = currlen \r\n            st = i - currlen \r\n    if (st == -1): \r\n        return \"-1\" \r\n    return str[st: st + maxlen] "
    },
    {
        "number": 316,
        "prompt": "Write a function to find the index of the last occurrence of a given number in a sorted array.\ndef find_last_occurrence(A, x):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    \"\"\"\n    :type A: List[int]\n    :type x: int\n    :rtype: int\n    \"\"\"\n    left, right = 0, len(A) - 1\n    result = -1\n    while left <= right:\n        mid = (left + right) // 2\n        if A[mid] == x:\n            result = mid\n            left = mid + 1\n        elif A[mid] > x:\n            right = mid - 1\n        else:\n            left = mid + 1\n    return result\n\n# Time complexity O(log n)\n# Space complexity O(1)\n\n# Test cases\nprint(find_last_occurrence([1, 2, 2, 3, 4, 5, 5, 5, 6], 5)) # Output: 5\nprint(find_last_occurrence([1, 2, 3, 3, 4, 4, 5, 5, 5], 5) # Output: 5\nprint(find_last_occurrence([1, 1, 2, 3, 4, 4, 4, 4, 5, 5], 4) # Output: 5\nprint(find_last_occurrence([1, 1, 2, 3, 4, 4, 5, 5, 5], 1) # Output: 2\nprint(find_last_occurrence([1, 1, 2, 3,",
        "generated_testcode": "assert find_last_occurrence([1, 2, 3, 4, 4, 4, 4, 5, 6, 7, 7], 4) == 4\n",
        "test": "assert find_last_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5) == 3\nassert find_last_occurrence([2, 3, 5, 8, 6, 6, 8, 9, 9, 9], 9) == 9\nassert find_last_occurrence([2, 2, 1, 5, 6, 6, 6, 9, 9, 9], 6) == 6",
        "canonical_solution": "def find_last_occurrence(A, x):\r\n    (left, right) = (0, len(A) - 1)\r\n    result = -1\r\n    while left <= right:\r\n        mid = (left + right) // 2\r\n        if x == A[mid]:\r\n            result = mid\r\n            left = mid + 1\r\n        elif x < A[mid]:\r\n            right = mid - 1\r\n        else:\r\n            left = mid + 1\r\n    return result "
    },
    {
        "number": 317,
        "prompt": "Write a function to reflect the modified run-length encoding from a list.\ndef modified_encode(alist):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    result = []\n    i = 0\n    while i < len(alist):\n        count = 1\n        while i < len(alist) - 1 and alist[i] == alist[i + 1]:\n            count += 1\n            i += 1\n        result.append((alist[i], count))\n        i += 1\n    return result\n\n\n# Example usage:\nalist = [1, 1, 2, 2, 3, 3, 3, 4, 4, 4, 4, 5, 6, 6, 6, 6, 6]\nprint(modified_encode(alist))  # Output: [(1, 2), (2, 1), (3, 3), (4, 4), (5, 1), (6, 4)]\n\nalist = [1, 1, 1, 1, 2, 2, 3, 3, 3, 4, 4, 5, 6, 6, 6, 6, 6, 6]\nprint(modified_encode(alist))  # Output: [(1, 3), (2, 2), (3, 3), (4, 2), (5, 1), (6, 4)]\n\nalist = [1, 2, 2, 3, 3, 4, 4, 4, 5, 6, 6,",
        "generated_testcode": "assert modified_encode([\"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"b\", \"c\", \"c\", \"c\", \"a\", \"a\"] == [(\"a\", 4), (\"b\", 1), (\"c\", 2), (\"a\", 2), (\"a\", 1)]\n\n# Test case 2\n",
        "test": "assert modified_encode([1,1,2,3,4,4,5,1])==[[2, 1], 2, 3, [2, 4], 5, 1]\nassert modified_encode('automatically')==['a', 'u', 't', 'o', 'm', 'a', 't', 'i', 'c', 'a', [2, 'l'], 'y']\nassert modified_encode('python')==['p', 'y', 't', 'h', 'o', 'n']",
        "canonical_solution": "from itertools import groupby\r\ndef modified_encode(alist):\r\n        def ctr_ele(el):\r\n            if len(el)>1: return [len(el), el[0]]\r\n            else: return el[0]\r\n        return [ctr_ele(list(group)) for key, group in groupby(alist)]"
    },
    {
        "number": 318,
        "prompt": "Write a python function to find the maximum volume of a cuboid with given sum of sides.\ndef max_volume (s): \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    \"\"\"\n    This function takes a number s as input and returns the maximum volume of a cuboid with sum of its sides equal to s.\n    \"\"\"\n    #initialize the max_volume variable to 0\n    max_volume = 0\n    #initialize the length of the cuboid\n    length = 1\n    #initialize the width of the cuboid\n    width = 1\n    #initialize the height of the cuboid\n    height = 1\n    #initialize the sum of the sides of the cuboid\n    sum_sides = 0\n    #initialize the number of sides\n    num_sides = 3\n    #while the sum of sides is less than or equal to s\n    while sum_sides <= s:\n        #calculate the volume of the cuboid\n        volume = length * width * height\n        #if the volume is greater than max_volume\n        if volume > max_volume:\n            #update max_volume to the current volume\n            max_volume = volume\n        #increment the length by 1\n        length += 1\n        #calculate the sum of sides of the cuboid\n        sum_sides = (length * length) + (length * width) + (length * height)\n        #decrement the number of sides\n        num_sides -= 1\n        #if the number of sides is greater than 0, calculate the width and height\n        while num_sides > 0:\n            width += 1\n            height = (s - sum_sides + length * width) // length\n           ",
        "generated_testcode": "assert max_volume (10) == 10000\n",
        "test": "assert max_volume(8) == 18\nassert max_volume(4) == 2\nassert max_volume(1) == 0",
        "canonical_solution": "def max_volume (s): \r\n    maxvalue = 0\r\n    i = 1\r\n    for i in range(s - 1): \r\n        j = 1\r\n        for j in range(s): \r\n            k = s - i - j \r\n            maxvalue = max(maxvalue, i * j * k)         \r\n    return maxvalue "
    },
    {
        "number": 319,
        "prompt": "Write a function to find all five characters long word in the given string by using regex.\ndef find_long_word(text):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    import re\n    long_words = re.findall(r'\\b\\w{5}\\b', text)\n    return long_words\n\n# Test the function\ntext = \"This is a sample text with some words to find long five characters words. There are some long words and some short ones.\"\nprint(find_long_word(text))\n# Output: ['words', 'short']\n\ntext = \"The quick brown fox jumps over the lazy dog.\"\nprint(find_long_word(text))\n# Output: ['quick', 'brown', 'over', 'lazy', 'dog']\n\ntext = \"Hello world!\"\nprint(find_long_word(text))\n# Output: []\n\ntext = \"Python is a popular programming language used for data analysis, machine learning and web development.\"\nprint(find_long_word(text))\n# Output: ['Python', 'programming', 'data', 'analysis', 'machine', 'learning', 'web']\n\ntext = \"This is a sample text with no long words.\"\nprint(find_long_word(text))\n# Output: [] ",
        "generated_testcode": "assert find_long_word(text=\"This is a sample text with some words\") == ['sample', 'words']\n",
        "test": "assert find_long_word('Please move back to strem') == ['strem']\nassert find_long_word('4K Ultra HD streaming player') == ['Ultra']\nassert find_long_word('Streaming Media Player') == ['Media']",
        "canonical_solution": "import re\r\ndef find_long_word(text):\r\n  return (re.findall(r\"\\b\\w{5}\\b\", text))"
    },
    {
        "number": 320,
        "prompt": "Write a function to calculate the difference between the squared sum of first n natural numbers and the sum of squared first n natural numbers.\ndef sum_difference(n):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    # Calculate the sum of the first n natural numbers\n    sum_of_n = n * (n + 1) * (2 * n + 1) // 6\n    # Calculate the sum of the squares of the first n natural numbers\n    sum_of_squares_of_n = n * (n + 1) * (2 * n + 1) // 3\n    # Calculate the square of the sum of the first n natural numbers\n    square_of_sum = (n * (n + 1) // 2) ** 2\n    # Return the difference between the sum of the squares and the square of the sum\n    return square_of_sum - sum_of_squares_of_n\n\n\n# Test the function with n = 5\nprint(sum_difference(5)) # Output: 225\n# Test the function with n = 10\nprint(sum_difference(10)) # Output: 158\n# Test the function with n = 15\nprint(sum_difference(15)) # Output: 548\n\n# Test the function with n = 20\nprint(sum_difference(20)) # Output: 11188\n\n# Test the function with n = 100\nprint(sum_difference(100)) # Output: 34625\n",
        "generated_testcode": "assert sum_difference(5) == 225\n",
        "test": "assert sum_difference(12)==5434\nassert sum_difference(20)==41230\nassert sum_difference(54)==2151270",
        "canonical_solution": "def sum_difference(n):\r\n    sumofsquares = 0\r\n    squareofsum = 0\r\n    for num in range(1, n+1):\r\n        sumofsquares += num * num\r\n        squareofsum += num\r\n    squareofsum = squareofsum ** 2\r\n    return squareofsum - sumofsquares"
    },
    {
        "number": 321,
        "prompt": "Write a function to find the demlo number for the given number.\ndef find_demlo(s): \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    def find_factors(n):\n        factors = []\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                factors.append(i)\n                if i != n // i:\n                    factors.append(n // i)\n        return factors\n\n    factors = find_factors(s)\n    factors.sort(reverse=True)\n    demlo_num = \"\"\n    for factor in factors:\n        demlo_num += str(factor)\n    return demlo_num\n\n\n# Test the function with an example\nprint(find_demlo(12)) # Output: 23\nprint(find_demlo(16)) # Output: 23\nprint(find_demlo(27)) # Output: 37\nprint(find_demlo(30)) # Output: 56\nprint(find_demlo(40)) # Output: 45\nprint(find_demlo(48)) # Output: 75\nprint(find_demlo(64)) # Output: 87",
        "generated_testcode": "assert find_demlo(12345) == 12345\n",
        "test": "assert find_demlo(\"111111\") == '12345654321'\nassert find_demlo(\"1111\") == '1234321'\nassert find_demlo(\"13333122222\") == '123456789101110987654321'",
        "canonical_solution": "def find_demlo(s): \r\n\tl = len(s) \r\n\tres = \"\" \r\n\tfor i in range(1,l+1): \r\n\t\tres = res + str(i) \r\n\tfor i in range(l-1,0,-1): \r\n\t\tres = res + str(i) \r\n\treturn res \t"
    },
    {
        "number": 322,
        "prompt": "Write a function to find all index positions of the minimum values in a given list.\ndef position_min(list1):\n",
        "checkpoint": "7B",
        "pass": 3,
        "correct": true,
        "answer": "    min_index = []\n    min_value = min(list1)\n    for i in range(len(list1)):\n        if list1[i] == min_value:\n            min_index.append(i)\n    return min_index\n\n\n#Test the function with a sample list\nlist1 = [2, 5, 3, 1, 8, 0, 6, 10, 1, 2, 3, 0, 1]\nprint(position_min(list1))  # Output: [0, 3, 6]",
        "generated_testcode": "assert position_min([1, 2, 3, 4, 5, 6, 7, 8, 9, 10] ) == [0]\n",
        "test": "assert position_min([12,33,23,10,67,89,45,667,23,12,11,10,54])==[3,11]\nassert position_min([1,2,2,2,4,4,4,5,5,5,5])==[0]\nassert position_min([2,1,5,6,8,3,4,9,10,11,8,12])==[1]",
        "canonical_solution": "def position_min(list1):\r\n    min_val = min(list1)\r\n    min_result = [i for i, j in enumerate(list1) if j == min_val]\r\n    return min_result"
    },
    {
        "number": 323,
        "prompt": "Write a function to re-arrange the given array in alternating positive and negative items.\ndef right_rotate(arr, n, out_of_place, cur):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    left_rotations = n // 2\n    right_rotations = n - left_rotations\n    i = 0\n    j = n - 1\n\n    while left_rotations > 0:\n        while i < j:\n            if arr[i] >= 0:\n                temp = arr[i]\n                while arr[j] < 0 and i < j:\n                    j -= 1\n                if i != j:\n                    arr[i], arr[j] = arr[j], arr[i]\n            elif arr[i] < 0:\n                temp = arr[j]\n                while arr[i] >= 0 and i < j:\n                    i += 1\n                if i != j:\n                    arr[i], arr[j] = arr[j], arr[i]\n            i += 1\n            j -= 1\n            left_rotations -= 1\n\n    i = 0\n    j = n - 1\n    while right_rotations > 0:\n        while i < j:\n            if arr[i] >= 0:\n                temp = arr[i]\n                while arr[j] < 0 and i < j:\n                    j -= 1\n                if i != j:\n                    arr[i], arr[j] = arr[j], arr[i]\n            elif arr[i] < 0:\n                temp = arr[j]\n                while arr[i] >= 0 and i < j:\n                ",
        "generated_testcode": "assert right_rotate([1, 2, 3, -4, 5, -6, 7, -8, 9], 3, 0) == [-4, 1, 5, -8, 2, 7, 3, 9]\n",
        "test": "assert re_arrange([-5, -2, 5, 2, 4,\t7, 1, 8, 0, -8], 10) == [-5, 5, -2, 2, -8, 4, 7, 1, 8, 0]\nassert re_arrange([1, 2, 3, -4, -1, 4], 6) == [-4, 1, -1, 2, 3, 4]\nassert re_arrange([4, 7, 9, 77, -4, 5, -3, -9], 8) == [-4, 4, -3, 7, -9, 9, 77, 5]",
        "canonical_solution": "def right_rotate(arr, n, out_of_place, cur):\r\n\ttemp = arr[cur]\r\n\tfor i in range(cur, out_of_place, -1):\r\n\t\tarr[i] = arr[i - 1]\r\n\tarr[out_of_place] = temp\r\n\treturn arr\r\ndef re_arrange(arr, n):\r\n\tout_of_place = -1\r\n\tfor index in range(n):\r\n\t\tif (out_of_place >= 0):\r\n\t\t\tif ((arr[index] >= 0 and arr[out_of_place] < 0) or\r\n\t\t\t(arr[index] < 0 and arr[out_of_place] >= 0)):\r\n\t\t\t\tarr = right_rotate(arr, n, out_of_place, index)\r\n\t\t\t\tif (index-out_of_place > 2):\r\n\t\t\t\t\tout_of_place += 2\r\n\t\t\t\telse:\r\n\t\t\t\t\tout_of_place = - 1\r\n\t\tif (out_of_place == -1):\r\n\t\t\tif ((arr[index] >= 0 and index % 2 == 0) or\r\n\t\t\t (arr[index] < 0 and index % 2 == 1)):\r\n\t\t\t\tout_of_place = index\r\n\treturn arr"
    },
    {
        "number": 324,
        "prompt": "Write a function to extract the sum of alternate chains of tuples.\ndef sum_of_alternates(test_tuple):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": true,
        "answer": "    if len(test_tuple) < 1:\n        return 0\n    else:\n        return test_tuple[0] + sum_of_alternates(test_tuple[1::2])\n\n\n# test the function with a tuple\ntest_tuple = (1, 2, 3, 4, 5, 6, 7, 8, 9)\nprint(sum_of_alternates(test_tuple))  # Output: 30\n\n\n# test the function with a tuple of length 1\ntest_tuple = (42,)\nprint(sum_of_alternates(test_tuple))  # Output: 42\n\n\n# test the function with an empty tuple\ntest_tuple = ()\nprint(sum_of_alternates(test_tuple))  # Output: 0\n\n\n# test the function with a tuple with an odd number of elements\ntest_tuple = (1, 2, 3, 4, 5, 6, 7, 8, 9, 10)\nprint(sum_of_alternates(test_tuple))  # Output: 24\n",
        "generated_testcode": "assert sum_of_alternates(()) == 0\n",
        "test": "assert sum_of_alternates((5, 6, 3, 6, 10, 34)) == (46, 18)\nassert sum_of_alternates((1, 2, 3, 4, 5)) == (6, 9)\nassert sum_of_alternates((6, 7, 8, 9, 4, 5)) == (21, 18)",
        "canonical_solution": "def sum_of_alternates(test_tuple):\r\n  sum1 = 0\r\n  sum2 = 0\r\n  for idx, ele in enumerate(test_tuple):\r\n    if idx % 2:\r\n      sum1 += ele\r\n    else:\r\n      sum2 += ele\r\n  return ((sum1),(sum2)) "
    },
    {
        "number": 325,
        "prompt": "Write a python function to find the minimum number of squares whose sum is equal to a given number.\ndef get_Min_Squares(n):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    def is_perfect_square(num):\n        return int(num**0.5)**2 == num\n\n    def get_min_squares_for_given_sum(n, memo):\n        if n == 0:\n            return 0\n        if n in memo:\n            return memo[n]\n        if is_perfect_square(n):\n            return 1\n        min_count = float('inf')\n        for i in range(1, int(n**0.5)+1):\n            if is_perfect_square(i):\n                min_count = min(min_count, 1 + get_min_squares_for_given_sum(n-i**2, memo))\n        memo[n] = min_count\n        return min_count\n\n    memo = {}\n    return get_min_squares_for_given_sum(n, memo)\n\n# Test the function\nprint(get_Min_Squares(17))  # Output: 3\nprint(get_Min_Squares(225))  # Output: 4\nprint(get_Min_Squares(12))  # Output: 3\nprint(get_Min_Squares(15))  # Output: 2\nprint(get_Min_Squares(100))  # Output: 2\nprint(get_Min_Squares(13))  # Output: 1\nprint",
        "generated_testcode": "assert get_Min_Squares(13) == 3\n",
        "test": "assert get_Min_Squares(6) == 3\nassert get_Min_Squares(2) == 2\nassert get_Min_Squares(4) == 1",
        "canonical_solution": "def get_Min_Squares(n):\r\n    if n <= 3:\r\n        return n;\r\n    res = n \r\n    for x in range(1,n + 1):\r\n        temp = x * x;\r\n        if temp > n:\r\n            break\r\n        else:\r\n            res = min(res,1 + get_Min_Squares(n  - temp)) \r\n    return res;"
    },
    {
        "number": 326,
        "prompt": "Write a function to get the word with most number of occurrences in the given strings list.\ndef most_occurrences(test_list):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    word_count = {}\n    for string in test_list:\n        words = string.split()\n        for word in words:\n            if word in word_count:\n                word_count[word] += 1\n            else:\n                word_count[word] = 1\n    \n    max_count = 0\n    most_occurrence = \"\"\n    for word, count in word_count.items():\n        if count > max_count:\n            max_count = count\n            most_occurrence = word\n    \n    return most_occurrence\n\n# Test cases\nprint(most_occurrences([\"hello world\", \"hello world\", \"hello\", \"world\", \"hello world\", \"world hello\", \"world\"])) # Output: \"hello\"\nprint(most_occurrences([\"apple orange apple\", \"banana banana apple\", \"apple orange\"])) # Output: \"apple\"\nprint(most_occurrences([\"cat dog cat dog cat\", \"dog dog\", \"cat\"])) # Output: \"cat\"\nprint(most_occurrences([\"apple orange banana\", \"banana apple\"])) # Output: \"banana\"\nprint(most_occurrences([\"hello world\", \"world\"])) # Output: \"world\"\nprint(most_occurrences([\"hello\", \"world\"])) # Output: \"hello\"\nprint(most_occurrences([\"world hello hello world\", \"hello\"])) # Output: \"hello\"\nprint(most_occurrences([\"apple\", \"apple\",",
        "generated_testcode": "assert most_occurrences([\"hello\", \"world\", \"hello\", \"world\", \"world\", \"world\", \"world\", \"world\", \"world\", \"world\", \"world\", \"world\", \"world\", \"world\", \"world\", \"world\", \"world\", \"world\", \"world\", \"world\", \"world\", \"world\", \"world\", \"world\", \"world\", \"world\", \"world\", \"world\", \"world\", \"world\", \"world\", \"world\", \"world\", \"world\", \"world\", \"world\", \"world\", \"world\", \"world\", \"world\", \"world\", \"world\", \"world\", \"world\", \"world\", \"world\", \"world\", \"world\", \"world\", \"world\", \"world\", \"world\", \"world\", \"world\", \"world\", \"world\", \"world\", \"world\", \"world\", \"world\", \"world\", \"world\", \"world\", \"world\", \"world\", \"world\", \"world\", \"world\", \"world\", \"world\", \"world\", \"world\", \"world\", \"world\", \"world\", \"world\", \"world\", \"world\", \"world\", \"world\", \"world\", \"world\", \"world\", \"world\", \"world\", \"world\", \"world\", \"world\", \"world\", \"world\", \"world\", \"world\", \"world\", \"world\", \"world\", \"world\", \"world\", \"world\", \"world\"",
        "test": "assert most_occurrences([\"UTS is best for RTF\", \"RTF love UTS\", \"UTS is best\"] ) == 'UTS'\nassert most_occurrences([\"Its been a great year\", \"this year is so worse\", \"this year is okay\"] ) == 'year'\nassert most_occurrences([\"Families can be reunited\", \"people can be reunited\", \"Tasks can be achieved \"] ) == 'can'",
        "canonical_solution": "from collections import defaultdict \r\n\r\ndef most_occurrences(test_list):\r\n  temp = defaultdict(int)\r\n  for sub in test_list:\r\n    for wrd in sub.split():\r\n      temp[wrd] += 1\r\n  res = max(temp, key=temp.get)\r\n  return (str(res)) "
    },
    {
        "number": 327,
        "prompt": "Write a function to print check if the triangle is isosceles or not.\ndef check_isosceles(x,y,z):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    if x==y==z:\n        return \"Isosceles\"\n    else:\n        return \"Not isosceles\"\n\n# test cases\nprint(check_isosceles(5,5,7)) # \"Not isosceles\"\nprint(check_isosceles(5,7,7)) # \"Isosceles\"\nprint(check_isosceles(5,5,5)) # \"Isosceles\"\nprint(check_isosceles(6,8,8)) # \"Isosceles\"\nprint(check_isosceles(5,5,6)) # \"Not isosceles\"\n\n\n# another test case\nprint(check_isosceles(4,4,5)) # \"Not isosceles\"\nprint(check_isosceles(4,5,5)) # \"Not isosceles\"\nprint(check_isosceles(5,4,4)) # \"Not isosceles\"",
        "generated_testcode": "assert check_isosceles(3,4,4) == True\n",
        "test": "assert check_isosceles(6,8,12)==False \nassert check_isosceles(6,6,12)==True\nassert check_isosceles(6,16,20)==False",
        "canonical_solution": "def check_isosceles(x,y,z):\r\n  if x==y or y==z or z==x:\r\n\t   return True\r\n  else:\r\n     return False"
    },
    {
        "number": 328,
        "prompt": "Write a function to rotate a given list by specified number of items to the left direction.\ndef rotate_left(list1,m,n):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    if m >= len(list1):\n        return list1\n    else:\n        m = m % len(list1)\n    return list1[m:] + list1[:m]\n\n# test the function\nlist1 = [1,2,3,4,5,6,7,8,9,10]\nm = 4\nn = 2\nprint(rotate_left(list1,m,n))",
        "generated_testcode": "assert rotate_left([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\"], 2) == [\"f\", \"g\", \"a\", \"b\", \"c\", \"d\"]\n",
        "test": "assert rotate_left([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],3,4)==[4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4]\nassert rotate_left([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],2,2)==[3, 4, 5, 6, 7, 8, 9, 10, 1, 2]\nassert rotate_left([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],5,2)==[6, 7, 8, 9, 10, 1, 2]",
        "canonical_solution": "def rotate_left(list1,m,n):\r\n  result =  list1[m:]+list1[:n]\r\n  return result"
    },
    {
        "number": 329,
        "prompt": "Write a python function to count negative numbers in a list.\ndef neg_count(list):\n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    count = 0\n    for num in list:\n        if num < 0:\n            count += 1\n    return count\n\n# Test the function\nprint(neg_count([1,2,3,4,-5,6,-7,-8,-9,10])) # Output: 4 ",
        "generated_testcode": "assert neg_count([1,2,3,-4,5,-6,-7,8,-9] ) == 4\n",
        "test": "assert neg_count([-1,-2,3,-4,-5]) == 4\nassert neg_count([1,2,3]) == 0\nassert neg_count([1,2,-3,-10,20]) == 2",
        "canonical_solution": "def neg_count(list):\r\n  neg_count= 0\r\n  for num in list: \r\n    if num <= 0: \r\n      neg_count += 1\r\n  return neg_count "
    },
    {
        "number": 330,
        "prompt": "Write a function to find all three, four, five characters long words in the given string by using regex.\ndef find_char(text):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    words = re.findall(r'\\b\\w{3,5}\\b', text)\n    return words\n\ntext = \"This is a sample text with some words for testing. Some words are longer than three characters, but not all of them are 3, 4 or 5 characters long.\"\nprint(find_char(text))  # ['This', 'is', 'sample', 'text', 'with', 'some', 'words', 'for', 'testing.', 'Some', 'words', 'are', 'longer', 'than', 'three', 'characters', 'but', 'not', 'all', 'of', 'them', 'are', '3,', '4', 'or', '5', 'characters', 'long.']\n\n# Explanation:\n# \\b matches a word boundary, \\w matches any word character, and {3,5} specifies a length range for the word\n# The regex expression \\b\\w{3,5}\\b matches any word character surrounded by word boundaries, which ensures that only whole words are matched and not parts of words.\n# The findall() method returns a list of all non-overlapping matches. ",
        "generated_testcode": "assert find_char(text=\"This is a sample text with some words\") == ['This', 'is', 'a', 'sample', 'text', 'with', 'some', 'words']\n",
        "test": "assert find_char('For the four consumer complaints contact manager AKR reddy') == ['For', 'the', 'four', 'AKR', 'reddy']\nassert find_char('Certain service are subject to change MSR') == ['are', 'MSR']\nassert find_char('Third party legal desclaimers') == ['Third', 'party', 'legal']",
        "canonical_solution": "import re\r\ndef find_char(text):\r\n  return (re.findall(r\"\\b\\w{3,5}\\b\", text))"
    },
    {
        "number": 331,
        "prompt": "Write a python function to count unset bits of a given number.\ndef count_unset_bits(n): \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count\n\n# Test the function with different inputs\nprint(count_unset_bits(12))\nprint(count_unset_bits(13))\nprint(count_unset_bits(23))\nprint(count_unset_bits(42))\nprint(count_unset_bits(1023))\nprint(count_unset_bits(0))\n\n\n# Output:\n# 1\n# 2\n# 2\n# 4\n# 9\n# 0\n",
        "generated_testcode": "assert count_unset_bits(0b101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101",
        "test": "assert count_unset_bits(2) == 1\nassert count_unset_bits(4) == 2\nassert count_unset_bits(6) == 1",
        "canonical_solution": "def count_unset_bits(n): \r\n    count = 0\r\n    x = 1\r\n    while(x < n + 1): \r\n        if ((x & n) == 0): \r\n            count += 1\r\n        x = x << 1\r\n    return count  "
    },
    {
        "number": 332,
        "prompt": "Write a function to count character frequency of a given string.\ndef char_frequency(str1):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    # create an empty dictionary to store character frequencies\n    freq_dict = {}\n    for char in str1:\n        # if character is already in dictionary, increment its frequency\n        if char in freq_dict:\n            freq_dict[char] += 1\n        # if not, add it to dictionary with a frequency of 1\n        else:\n            freq_dict[char] = 1\n    # return dictionary\n    return freq_dict\n\n\n# example usage\nprint(char_frequency(\"hello world\"))\n# output: {'h': 1, 'e': 1, 'l': 3, 'o': 2, ' ': 1, 'w': 1, 'r': 1, 'd': 1}\n\nprint(char_frequency(\"aabbcdeeff\"))\n# output: {'a': 2, 'b': 2, 'c': 1, 'd': 1, 'e': 3, 'f': 2}\n",
        "generated_testcode": "assert char_frequency(str1=\"hello world\") == {'h': 1, 'e': 1, 'l': 3, 'o': 2, ' ' ': 1, 'w': 1, 'r': 1, 'd': 1}\n",
        "test": "assert char_frequency('python')=={'p': 1, 'y': 1, 't': 1, 'h': 1, 'o': 1, 'n': 1}\nassert char_frequency('program')=={'p': 1, 'r': 2, 'o': 1, 'g': 1, 'a': 1, 'm': 1}\nassert char_frequency('language')=={'l': 1, 'a': 2, 'n': 1, 'g': 2, 'u': 1, 'e': 1}",
        "canonical_solution": "def char_frequency(str1):\r\n    dict = {}\r\n    for n in str1:\r\n        keys = dict.keys()\r\n        if n in keys:\r\n            dict[n] += 1\r\n        else:\r\n            dict[n] = 1\r\n    return dict"
    },
    {
        "number": 333,
        "prompt": "Write a python function to sort a list according to the second element in sublist.\ndef Sort(sub_li): \n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    sub_li.sort(key=lambda x: x[1])\n    return sub_li \n\n#Example:\nsub_li = [[4, 3, 'a'], [1, 2, 'b'], [2, 1, 'c'], [3, 1, 'a'], [5, 2, 'd'], [6, 3, 'c']] \nprint(Sort(sub_li)) # Output: [[2, 1, 'c'], [1, 2, 'b'], [4, 3, 'a'], [3, 1, 'a'], [6, 3, 'c']] ",
        "generated_testcode": "assert Sort([[1, 2], [3, 4], [5, 6], [7, 8], [9, 10]] ) == [[1, 2], [3, 4], [5, 6], [7, 8], [9, 10]]\n",
        "test": "assert Sort([['a', 10], ['b', 5], ['c', 20], ['d', 15]]) == [['b', 5], ['a', 10], ['d', 15], ['c', 20]]\nassert Sort([['452', 10], ['256', 5], ['100', 20], ['135', 15]]) == [['256', 5], ['452', 10], ['135', 15], ['100', 20]]\nassert Sort([['rishi', 10], ['akhil', 5], ['ramya', 20], ['gaur', 15]]) == [['akhil', 5], ['rishi', 10], ['gaur', 15], ['ramya', 20]]",
        "canonical_solution": "def Sort(sub_li): \r\n    sub_li.sort(key = lambda x: x[1]) \r\n    return sub_li "
    },
    {
        "number": 334,
        "prompt": "Write a python function to check whether the triangle is valid or not if sides are given.\ndef check_Validity(a,b,c):  \n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    if a+b > c and b+c > a and c+a > b:  \n        return True  \n    else:  \n        return False  \n  \ndef area_of_triangle(a,b,c):  \n    if check_Validity(a,b,c):  \n        s = (a+b+c)/2  \n        area = (s*(s-a)*(s-b)*(s-c))**0.5  \n        return area  \n    else:  \n        return 0  \n  \n# example usage:  \nprint(area_of_triangle(3,4,5)) # Output: 6.0  \nprint(area_of_triangle(2,4,10)) # Output: 0  \nprint(area_of_triangle(5,12,13)) # Output: 29.8144454430073928772  ",
        "generated_testcode": "assert check_Validity(3,4,5) == True\n",
        "test": "assert check_Validity(1,2,3) == False\nassert check_Validity(2,3,5) == False\nassert check_Validity(7,10,5) == True",
        "canonical_solution": "def check_Validity(a,b,c):  \r\n    if (a + b <= c) or (a + c <= b) or (b + c <= a) : \r\n        return False\r\n    else: \r\n        return True        "
    },
    {
        "number": 335,
        "prompt": "Write a function to find the sum of arithmetic progression.\ndef ap_sum(a,n,d):\n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    sum=0\n    for i in range(n):\n        sum += a\n        a+=d\n    return sum\n\n#example usage:\nprint(ap_sum(1,1,1)) #Output: n terms, sum of the arithmetic progression\nprint(ap_sum(1,2,2)) #Output: 3 terms, sum of the arithmetic progression\nprint(ap_sum(5,10,2)) #Output: 10 terms, sum of the arithmetic progression\n\n\n#Additional task:\n#Write a function to find the sum of geometric progression\ndef gp_sum(a,n,r):\n    sum=0\n    for i in range(n):\n        sum += a\n        a *= r\n    return sum\n\n#example usage:\nprint(gp_sum(1,1,2)) #Output: n terms, sum of the geometric progression\nprint(gp_sum(2,3,3)) #Output: 3 terms, sum of the geometric progression\nprint(gp_sum(5,2,5)) #Output: 2 terms, sum of the geometric progression",
        "generated_testcode": "assert ap_sum(1,1,1) == 1\n",
        "test": "assert ap_sum(1,5,2)==25\nassert ap_sum(2,6,4)==72\nassert ap_sum(1,4,5)==34",
        "canonical_solution": "def ap_sum(a,n,d):\r\n  total = (n * (2 * a + (n - 1) * d)) / 2\r\n  return total"
    },
    {
        "number": 336,
        "prompt": "Write a function to check whether the given month name contains 28 days or not.\ndef check_monthnum(monthname1):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    if monthname1 == \"February\":\n        return False\n    elif monthname1 == \"April\" or monthname1 == \"June\" or monthname1 == \"September\" or monthname1 == \"November\" or monthname1 == \"December\":\n        return 30\n    elif monthname1 == \"January\" or monthname1 == \"March\" or monthname1 == \"May\" or monthname1 == \"July\" or monthname1 == \"August\" or monthname1 == \"October\":\n        return 31\n    else:\n        return 28\n\n\n# Test the function\nprint(check_monthnum(\"March\")) # Output: 31\nprint(check_monthnum(\"December\")) # Output: 30\nprint(check_monthnum(\"February\")) # Output: False\n",
        "generated_testcode": "assert check_monthnum(1) == True\n",
        "test": "assert check_monthnum(\"February\")==True\nassert check_monthnum(\"January\")==False\nassert check_monthnum(\"March\")==False",
        "canonical_solution": "def check_monthnum(monthname1):\r\n  if monthname1 == \"February\":\r\n    return True\r\n  else:\r\n    return False"
    },
    {
        "number": 337,
        "prompt": "Write a function that matches a word at the end of a string, with optional punctuation.\ndef text_match_word(text):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    word_pattern = re.compile(r'\\b(\\w+[\\W]*)$')\n    match = word_pattern.search(text)\n    if match:\n        return match.group(1)\n    else:\n        return None\n\n# Test the function with some examples\nprint(text_match_word(\"Hello, world!\")) # \"world\"\nprint(text_match_word(\"This is a test.\")) # \"test\"\nprint(text_match_word(\"Python is awesome!\")) # \"awesome\"\nprint(text_match_word(\"No match here.\")) # None\nprint(text_match_word(\"This is also a test.\")) # \"test\"\nprint(text_match_word(\"I think, therefore I am.\")) # \"am\"\nprint(text_match_word(\"What a beautiful day!\")) # \"day\"\nprint(text_match_word(\"End of the line\")) # \"line\"\n\n\n# Alternative using regex word boundary \\b\ndef text_match_word(text):\n    word_pattern = re.compile(r'\\b(\\w+)$')\n    match = word_pattern.search(text)\n    if match:\n        return match.group(1)\n    else:\n        return None\n\n# Test the function with some examples\nprint(text_match_word(\"Hello, world!\")) # \"world\"\nprint(text_match_word(\"This is a test.\")) # \"test\"\nprint(text_match_word(\"Python is awesome!\")) # \"aw",
        "generated_testcode": "assert text_match_word(text=\"The quick brown fox jumps over the lazy dog.\") == \"dog.\"\n",
        "test": "assert text_match_word(\"python.\")==('Found a match!')\nassert text_match_word(\"python.\")==('Found a match!')\nassert text_match_word(\"  lang  .\")==('Not matched!')",
        "canonical_solution": "import re\r\ndef text_match_word(text):\r\n        patterns = '\\w+\\S*$'\r\n        if re.search(patterns,  text):\r\n                return 'Found a match!'\r\n        else:\r\n                return 'Not matched!'"
    },
    {
        "number": 338,
        "prompt": "Write a python function to count the number of substrings with same first and last characters.\ndef check_Equality(s): \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    count = 0\n    for i in range(len(s)): \n        for j in range(i+1, len(s)+1): \n            if s[i] == s[j-1]: \n                count += 1\n    return count ",
        "generated_testcode": "assert check_Equality(s) == 0\n",
        "test": "assert count_Substring_With_Equal_Ends('aba') == 4\nassert count_Substring_With_Equal_Ends('abcab') == 7\nassert count_Substring_With_Equal_Ends('abc') == 3",
        "canonical_solution": "def check_Equality(s): \r\n    return (ord(s[0]) == ord(s[len(s) - 1])); \r\ndef count_Substring_With_Equal_Ends(s): \r\n    result = 0; \r\n    n = len(s); \r\n    for i in range(n):\r\n        for j in range(1,n-i+1): \r\n            if (check_Equality(s[i:i+j])): \r\n                result+=1; \r\n    return result; "
    },
    {
        "number": 339,
        "prompt": "Write a python function to find the maximum occuring divisor in an interval.\ndef find_Divisor(x,y):  \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    def find_divisors(num):  \n        divisors = []  \n        for i in range(1,num+1):  \n            if num % i == 0:  \n                divisors.append(i)  \n        return divisors  \n    def count_divisors(divisors):  \n        count_dict = {}  \n        for i in divisors:  \n            if i in count_dict:  \n                count_dict[i] += 1  \n            else:  \n                count_dict[i] = 1  \n        return count_dict  \n    divisors_x = find_divisors(x)  \n    count_x = count_divisors(divisors_x)  \n    divisors_y = find_divisors(y)  \n    count_y = count_divisors(divisors_y)  \n    count_common = {}  \n    for i in count_x:  \n        if i in count_y:  \n            if i in count_common:  \n                count_common[i] = min(count_x[i],count_y[i])  \n            else:  \n                count_common[i] = max(count_x[i],count_y[i])  \n    max_divisor = 0  \n    for i in count_common:  \n        if count_common[i] > max_divisor:  \n            max_divisor = i  \n    return max_",
        "generated_testcode": "assert find_Divisor(12, 30) == 6\n",
        "test": "assert find_Divisor(2,2) == 2\nassert find_Divisor(2,5) == 2\nassert find_Divisor(5,10) == 2",
        "canonical_solution": "def find_Divisor(x,y):  \r\n    if (x==y): \r\n        return y \r\n    return 2"
    },
    {
        "number": 340,
        "prompt": "Write a python function to find the sum of the three lowest positive numbers from a given list of numbers.\ndef sum_three_smallest_nums(lst):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    lst.sort()\n    if len(lst) < 3:\n        return sum(lst)\n    else:\n        return sum(lst[:3])\n\n# Test cases\nprint(sum_three_smallest_nums([4, 2, 6, 5, 1, 8, 9, 3, 12, -2, -1])) # Output: 5\nprint(sum_three_smallest_nums([0, -1, -2, -3, -4, -5, -6, -7])) # Output: 0\nprint(sum_three_smallest_nums([0, 5])) # Output: 0\nprint(sum_three_smallest_nums([-1, -2, -3, -4, -5, -6, -7, -8])) # Output: 0\nprint(sum_three_smallest_nums([1, 2, 3, 4, 5, 6, 7, 8])) # Output: 6\nprint(sum_three_smallest_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])) # Output: 6\nprint(sum_three_smallest_nums([])) # Output: 0\nprint(sum_three_smallest_nums([1])) # Output: 1\n",
        "generated_testcode": "assert sum_three_smallest_nums(lst=[1, 2, 3, 4, 5, 6, 7, 8, 9]) == 12\n",
        "test": "assert sum_three_smallest_nums([10,20,30,40,50,60,7]) == 37\nassert sum_three_smallest_nums([1,2,3,4,5]) == 6\nassert sum_three_smallest_nums([0,1,2,3,4,5]) == 6",
        "canonical_solution": "def sum_three_smallest_nums(lst):\r\n\treturn sum(sorted([x for x in lst if x > 0])[:3])"
    },
    {
        "number": 341,
        "prompt": "Write a function to convert the given set into ordered tuples.\ndef set_to_tuple(s):\n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    lst = list(s)\n    lst.sort()\n    tpl = tuple(lst)\n    return tpl\n\ns = set([3, 5, 1, 2, 4, 6, 8, 9, 7, 5, 2, 1, 3])\nprint(set_to_tuple(s))\n# Output: (1, 2, 3, 4, 5, 6, 7, 8, 9)\n\ns = set([3, 5, 7, 9, 2, 4, 6, 8, 1, 10, 9, 8, 3])\nprint(set_to_tuple(s))\n# Output: (1, 2, 3, 4, 5, 6, 7, 8, 9, 10)\n\ns = set([1, 2, 3, 4, 5])\nprint(set_to_tuple(s))\n# Output: (1, 2, 3, 4, 5) ",
        "generated_testcode": "assert set_to_tuple(set()) == ()\n",
        "test": "assert set_to_tuple({1, 2, 3, 4, 5}) == (1, 2, 3, 4, 5)\nassert set_to_tuple({6, 7, 8, 9, 10, 11}) == (6, 7, 8, 9, 10, 11)\nassert set_to_tuple({12, 13, 14, 15, 16}) == (12, 13, 14, 15, 16)",
        "canonical_solution": "def set_to_tuple(s):\r\n  t = tuple(sorted(s))\r\n  return (t)"
    },
    {
        "number": 342,
        "prompt": "Write a function to find the smallest range that includes at-least one element from each of the given arrays.\n    def __init__(self, value, list_num, index):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "       self.value = value\n        self.list_num = list_num\n        self.index = index\n\n    def find_smallest_range(self):\n        self.list_num.sort()\n        min_range = float('inf')\n        min_index = 0\n        max_index = 0\n        for i in range(len(self.list_num)):\n            for j in range(i + 1, len(self.list_num)):\n                if self.list_num[j] - self.list_num[i] < min_range:\n                    min_range = self.list_num[j] - self.list_num[i]\n                    min_index = i\n                    max_index = j\n        return min_range\n\n# Test cases\narr1 = [1, 3, 5, 7, 9]\narr2 = [2, 6, 8, 12]\narr3 = [4, 8, 15]\n\nobj1 = SmallestRange(10, [arr1, arr2, arr3])\nprint(obj1.find_smallest_range()) # Output: 5\n\narr1 = [1, 2, 3, 4]\narr2 = [2, 3, 6, 7]\narr3 = [6, 8, 10]\nobj2 = SmallestRange(10, [arr1, arr2, arr3])\nprint(obj2.find_",
        "generated_testcode": "assert __init__(1, [1, 2, 3, 4, 5], 0) == (1, 5)\n",
        "test": "assert find_minimum_range([[3, 6, 8, 10, 15], [1, 5, 12], [4, 8, 15, 16], [2, 6]]) == (4, 6)\nassert find_minimum_range([[ 2, 3, 4, 8, 10, 15 ], [1, 5, 12], [7, 8, 15, 16], [3, 6]]) == (4, 7)\nassert find_minimum_range([[4, 7, 9, 11, 16], [2, 6, 13], [5, 9, 16, 17], [3, 7]]) == (5, 7)",
        "canonical_solution": "from heapq import heappop, heappush\r\nclass Node:\r\n    def __init__(self, value, list_num, index):\r\n        self.value = value\r\n        self.list_num = list_num\r\n        self.index = index\r\n    def __lt__(self, other):\r\n        return self.value < other.value\r\ndef find_minimum_range(list):\r\n    high = float('-inf')\r\n    p = (0, float('inf'))\r\n    pq = []\r\n    for i in range(len(list)):\r\n        heappush(pq, Node(list[i][0], i, 0))\r\n        high = max(high, list[i][0])\r\n    while True:\r\n        top = heappop(pq)\r\n        low = top.value\r\n        i = top.list_num\r\n        j = top.index\r\n        if high - low < p[1] - p[0]:\r\n            p = (low, high)\r\n        if j == len(list[i]) - 1:\r\n            return p\r\n        heappush(pq, Node(list[i][j + 1], i, j + 1))\r\n        high = max(high, list[i][j + 1])"
    },
    {
        "number": 343,
        "prompt": "Write a function to calculate the number of digits and letters in a string.\ndef dig_let(s):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    count_digits = 0\n    count_letters = 0\n    for char in s:\n        if char.isdigit():\n            count_digits += 1\n        elif char.isalpha():\n            count_letters += 1\n    return count_digits, count_letters\n\n\n# Test the function with a sample string\nprint(dig_let(\"Hello123world\"))  # (3, 6)\nprint(dig_let(\"Hello world\"))  # (0, 6)\nprint(dig_let(\"12345\"))  # (4, 0)\nprint(dig_let(\"\"))  # (0, 0)\nprint(dig_let(\"!@#$%^&*\"))  # (0, 0)\nprint(dig_let(\"Python 3.6\"))  # (0, 8)\n\n\n# Test the function with a list of strings\nstrings = [\"Hello123world\", \"Hello world\", \"12345\", \"\", \"!@#$%^&*\", \"Python 3.6\"]\nfor s in strings:\n    print(dig_let(s))\n\n\n# Output:\n# (3, 6)\n# (0, 6)\n# (4, 0)\n# (0, 0)\n# (0, 8)\n# (0, 0)\n# (0, 10)\n# (0, 0)\n# (3, 6)\n#",
        "generated_testcode": "assert dig_let(123abc) == (3, 3)\n",
        "test": "assert dig_let(\"python\")==(6,0)\nassert dig_let(\"program\")==(7,0)\nassert dig_let(\"python3.0\")==(6,2)",
        "canonical_solution": "def dig_let(s):\r\n d=l=0\r\n for c in s:\r\n    if c.isdigit():\r\n        d=d+1\r\n    elif c.isalpha():\r\n        l=l+1\r\n    else:\r\n        pass\r\n return (l,d)"
    },
    {
        "number": 344,
        "prompt": "Write a python function to find number of elements with odd factors in a given range.\ndef count_Odd_Squares(n,m): \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    count=0\n    for i in range(n,m+1):\n        for j in range(2,i):\n            if i%j==0 and i**(1/2)==int(i**(1/2):\n                count+=1\n    return count\n\nn=int(input())\nm=int(input())\nprint(count_Odd_Squares(n,m)) ",
        "generated_testcode": "assert count_Odd_Squares(1,10) == 4\n",
        "test": "assert count_Odd_Squares(5,100) == 8\nassert count_Odd_Squares(8,65) == 6\nassert count_Odd_Squares(2,5) == 1",
        "canonical_solution": "def count_Odd_Squares(n,m): \r\n    return int(m**0.5) - int((n-1)**0.5) "
    },
    {
        "number": 345,
        "prompt": "Write a function to find the difference between two consecutive numbers in a given list.\ndef diff_consecutivenums(nums):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    result = []\n    for i in range(1, len(nums)):\n        result.append(nums[i] - nums[i-1])\n    return result\n\n# Test cases\nprint(diff_consecutivenums([1, 5, 7, 10, 14, 20, 25])) # [4, 7, 7, 5]\nprint(diff_consecutivenums([10, 2, 3, 5, 7, 11, 15, 18, 5])) # [2, 3, 2, 7, 3, 3, 7]\nprint(diff_consecutivenums([2, 6, 9, 13, 11])) # [3, -2, 3, 3]\n",
        "generated_testcode": "assert diff_consecutivenums([1, 3, 5, 7, 9, 111, 13] ) == 2\n",
        "test": "assert diff_consecutivenums([1, 1, 3, 4, 4, 5, 6, 7])==[0, 2, 1, 0, 1, 1, 1]\nassert diff_consecutivenums([4, 5, 8, 9, 6, 10])==[1, 3, 1, -3, 4]\nassert diff_consecutivenums([0, 1, 2, 3, 4, 4, 4, 4, 5, 7])==[1, 1, 1, 1, 0, 0, 0, 1, 2]",
        "canonical_solution": "def diff_consecutivenums(nums):\r\n    result = [b-a for a, b in zip(nums[:-1], nums[1:])]\r\n    return result"
    },
    {
        "number": 346,
        "prompt": "Write a function to find entringer number e(n, k).\ndef zigzag(n, k): \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    def helper(n, k, prev_digit, flag):\n        if n == 0:\n            return 0\n        if n == 1:\n            return 1 if k == 1 else 0\n        \n        if k % 2 == 0:\n            return helper(n - 1, k, prev_digit, flag) + 1 if prev_digit % 2 == flag else 0\n        else:\n            return helper(n - 1, k, prev_digit, flag) + 2 if prev_digit % 2 == flag else 1\n\n    return helper(n, k, 0, 0)\n\n# Test cases\nprint(zigzag(5, 2)) # 10\nprint(zigzag(5, 3)) # 6\nprint(zigzag(6, 1)) # 11\nprint(zigzag(6, 2)) # 13\nprint(zigzag(7, 1)) # 16\nprint(zigzag(7, 2)) # 21\nprint(zigzag(7, 3)) # 26\nprint(zigzag(8, 1)) # 21\nprint(zigzag(8, 2)) # 30\nprint(zigzag(8, 3)) # 36\nprint(zigzag(9, 1)) # 31\nprint(zigzag(9, 2)) # 42\nprint(zigzag(",
        "generated_testcode": "assert zigzag(5, 2) == 14\n",
        "test": "assert zigzag(4, 3) == 5\nassert zigzag(4, 2) == 4\nassert zigzag(3, 1) == 1",
        "canonical_solution": "def zigzag(n, k): \r\n\tif (n == 0 and k == 0): \r\n\t\treturn 1\r\n\tif (k == 0): \r\n\t\treturn 0\r\n\treturn zigzag(n, k - 1) + zigzag(n - 1, n - k)"
    },
    {
        "number": 347,
        "prompt": "Write a python function to count the number of squares in a rectangle.\ndef count_Squares(m,n): \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    # Initialize the count variable\n    count = 0\n    # Loop through the first row\n    for i in range(1, m+1):\n        # Loop through the first column\n        for j in range(1, n+1):\n            # Calculate the length of the square that can be formed\n            # if the square can be formed\n            if i*j <= m and i*j <= n:\n                # Increment the count\n                count += i*j\n    return count\n# Test the function\nprint(count_Squares(5,4)) # Output: 10\nprint(count_Squares(3,5)) # Output: 7\nprint(count_Squares(7,7)) # Output: 28\nprint(count_Squares(10,10)) # Output: 41\n",
        "generated_testcode": "assert count_Squares(3,4) == 9\n",
        "test": "assert count_Squares(4,3) == 20\nassert count_Squares(1,2) == 2\nassert count_Squares(2,2) == 5",
        "canonical_solution": "def count_Squares(m,n): \r\n    if (n < m): \r\n        temp = m \r\n        m = n \r\n        n = temp \r\n    return n * (n + 1) * (3 * m - n + 1) // 6"
    },
    {
        "number": 348,
        "prompt": "Write a function to count sequences of given length having non-negative prefix sums that can be generated by given values.\ndef bin_coff(n, r): \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": true,
        "answer": "    if n == 0:\n        return 1\n    if r == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return (bin_coff(n-1, r) + bin_coff(n-1, r-1))\n\ndef count_seq_prefix_sum(n, arr):\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == n:\n                count += 1\n    return count\n\ndef count_seq_length(n, arr):\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == n:\n                count += 1\n    return count\n\ndef count_sequences(n, arr):\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            count += count_seq_length(n, arr[i:j+1])\n    return count\n\ndef count_sequences_with_prefix_sum(n, arr):\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if sum(arr[i:j+1]) == n:\n                count",
        "generated_testcode": "assert bin_coff(3, 2) == 3\n",
        "test": "assert find_ways(4) == 2\nassert find_ways(6) == 5\nassert find_ways(8) == 14",
        "canonical_solution": "def bin_coff(n, r): \r\n\tval = 1\r\n\tif (r > (n - r)): \r\n\t\tr = (n - r) \r\n\tfor i in range(0, r): \r\n\t\tval *= (n - i) \r\n\t\tval //= (i + 1) \r\n\treturn val \r\ndef find_ways(M): \r\n\tn = M // 2\r\n\ta = bin_coff(2 * n, n) \r\n\tb = a // (n + 1) \r\n\treturn (b) "
    },
    {
        "number": 349,
        "prompt": "Write a python function to check whether the given string is a binary string or not.\ndef check(string) :\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    for i in string :\n        if i not in ['0','1'] :\n            return False\n    return True\n\n# Driver code\nstring = input(\"Enter a string : \")\nif check(string) :\n    print(\"The given string is a binary string\")\nelse :\n    print(\"The given string is not a binary string\")\n",
        "generated_testcode": "assert check(1010101010) == True\n",
        "test": "assert check(\"01010101010\") == \"Yes\"\nassert check(\"name0\") == \"No\"\nassert check(\"101\") == \"Yes\"",
        "canonical_solution": "def check(string) :\r\n    p = set(string) \r\n    s = {'0', '1'} \r\n    if s == p or p == {'0'} or p == {'1'}: \r\n        return (\"Yes\") \r\n    else : \r\n        return (\"No\") "
    },
    {
        "number": 350,
        "prompt": "Write a python function to minimize the length of the string by removing occurrence of only one character.\ndef minimum_Length(s) : \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    count = {}\n    for i in s :\n        if i in count :\n            count[i] += 1\n        else :\n            count[i] = 1\n    for key, value in count.items() :\n        if value > 1 :\n            if len(s) - 1 <= 1 :\n                return s\n            else :\n                s = s.replace(key, '', 1)\n                return minimum_Length(s)\n    return s\n\n#Example:\ns = \"aabbcc\"\nprint(minimum_Length(s)) # Output: \"ac\"\n\ns = \"aaabbbbcc\"\nprint(minimum_Length(s)) # Output: \"ab\"\n\ns = \"abcc\"\nprint(minimum_Length(s)) # Output: \"ab\"\n\ns = \"aaaaa\"\nprint(minimum_Length(s)) # Output: \"\"\n\ns = \"aabbccd\"\nprint(minimum_Length(s)) # Output: \"aabbc\"\n\ns = \"abbb\"\nprint(minimum_Length(s)) # Output: \"ab\"\n\ns = \"aabbc\"\nprint(minimum_Length(s)) # Output: \"aabb\"\n\ns = \"aabbccd\"\nprint(minimum_Length(s)) # Output: \"ac\"\n\ns = \"aabbc\"\nprint(minimum_Length(s)) # Output: \"aabb\"\n\ns = \"a\"\nprint",
        "generated_testcode": "assert minimum_Length(\"abccba\" ) == \"abcb\"\n",
        "test": "assert minimum_Length(\"mnm\") == 1\nassert minimum_Length(\"abcda\") == 3\nassert minimum_Length(\"abcb\") == 2",
        "canonical_solution": "def minimum_Length(s) : \r\n    maxOcc = 0\r\n    n = len(s) \r\n    arr = [0]*26\r\n    for i in range(n) : \r\n        arr[ord(s[i]) -ord('a')] += 1\r\n    for i in range(26) : \r\n        if arr[i] > maxOcc : \r\n            maxOcc = arr[i] \r\n    return n - maxOcc "
    },
    {
        "number": 351,
        "prompt": "Write a python function to find the first element occurring k times in a given array.\ndef first_Element(arr,n,k): \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    count = {}\n    for i in range(n):\n        if arr[i] not in count:\n            count[arr[i]] = 1\n        else:\n            count[arr[i]] += 1\n    for i in count:\n        if count[i] == k:\n            return i\n    return -1\n\n# Test the function\narr = [1,2,3,4,2,4,5,6,7,1,1,1,2,3,4,1,1,2]\nn = len(arr)\nk = 2\nprint(\"The first element occurring k times in the array is:\", first_Element(arr,n,k))",
        "generated_testcode": "assert first_Element([1,2,3,4,5,6,1,2,3,4,5,6,7,8,1,2,3,4,5,6,9,1,2,3,4,5,6,7,8,9,10], 2) == 1\n",
        "test": "assert first_Element([0,1,2,3,4,5],6,1) == 0\nassert first_Element([1,2,1,3,4],5,2) == 1\nassert first_Element([2,3,4,3,5,7,1,2,3,5],10,2) == 2",
        "canonical_solution": "def first_Element(arr,n,k): \r\n    count_map = {}; \r\n    for i in range(0, n): \r\n        if(arr[i] in count_map.keys()): \r\n            count_map[arr[i]] += 1\r\n        else: \r\n            count_map[arr[i]] = 1\r\n        i += 1\r\n    for i in range(0, n):  \r\n        if (count_map[arr[i]] == k): \r\n            return arr[i] \r\n        i += 1 \r\n    return -1"
    },
    {
        "number": 352,
        "prompt": "Write a python function to check whether all the characters in a given string are unique.\ndef unique_Characters(str):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    if len(str) > 128:\n        return False\n    char_set = [False] * 128\n    for char in str:\n        if char_set[ord(char)] == False:\n            char_set[ord(char)] = True\n        else:\n            return False\n    return True\n\n#Test the function with sample inputs\nprint(unique_Characters(\"hello\")) # True\nprint(unique_Characters(\"world\")) # False\nprint(unique_Characters(\"python\")) # False\nprint(unique_Characters(\"abcdefghijklmnopqrstuvwxyz\")) # True\nprint(unique_Characters(\"python33\")) # False",
        "generated_testcode": "assert unique_Characters(str) == True\n",
        "test": "assert unique_Characters('aba') == False\nassert unique_Characters('abc') == True\nassert unique_Characters('abab') == False",
        "canonical_solution": "def unique_Characters(str):\r\n    for i in range(len(str)):\r\n        for j in range(i + 1,len(str)): \r\n            if (str[i] == str[j]):\r\n                return False;\r\n    return True;"
    },
    {
        "number": 353,
        "prompt": "Write a function to remove a specified column from a given nested list.\ndef remove_column(list1, n):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    for sublist in list1:\n        del sublist[n]\n    return list1\n\n#Test the function\nlist1 = [[1,2,3,4],[5,6,7],[8,9,10]]\nn = 2\nprint(remove_column(list1,n))\n\n# Output: [[1, 4], [5, 7], [8, 10]]\n\nlist2 = [[1,2,3,4,5],[6,7,8,9],[10,11,12,13]]\nn = 1\nprint(remove_column(list2,n))\n# Output: [[2, 5, 11], [7, 12]]\nlist3 = [[1,2,3,4],[5,6,7],[8,9,10],[11,12,13]]\nn = 0\nprint(remove_column(list3,n))\n# Output: [[3, 6, 9], [4, 10], [7, 13]] ",
        "generated_testcode": "assert remove_column([[1,2,3],[4,5,6],[7,8,9]], 1) == [[1,3],[4,9]]\n",
        "test": "assert remove_column([[1, 2, 3], [2, 4, 5], [1, 1, 1]],0)==[[2, 3], [4, 5], [1, 1]]\nassert remove_column([[1, 2, 3], [-2, 4, -5], [1, -1, 1]],2)==[[1, 2], [-2, 4], [1, -1]]\nassert remove_column([[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]],0)==[[3], [7], [3], [15, 17], [7], [11]]",
        "canonical_solution": "def remove_column(list1, n):\r\n   for i in list1: \r\n    del i[n] \r\n   return list1"
    },
    {
        "number": 354,
        "prompt": "Write a function to find t-nth term of arithemetic progression.\ndef tn_ap(a,n,d):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    t = a + (n-1)*d\n    return t\n\n#test the function\nprint(tn_ap(1,5,2)) # should return 7\nprint(tn_ap(5,10,3)) # should return 23\nprint(tn_ap(0,10,0.5) # should return 4.5\nprint(tn_ap(-3,7,2) # should return -9\n\n# Create a function to find the sum of first n terms of an arithmetic progression\ndef sum_ap(a,n,d):\n    sum = 0\n    for i in range(n):\n        sum += tn_ap(a,i+1,d)\n    return sum\n\n#test the function\nprint(sum_ap(1,5,2)) # should return 12\nprint(sum_ap(5,10,3) # should return 49.5\nprint(sum_ap(0,10,0.5) # should return 24.5\nprint(sum_ap(-3,7,2) # should return 4\n\n# Create a function to find the common difference of an arithmetic progression\ndef common_difference(a1,a2,n):\n    return (a2-a1)/n\n\n#test the function\nprint(common_difference(5,15,5) # should return 2\nprint(common_difference(0,7,4) # should return 1.5\nprint(common_",
        "generated_testcode": "assert tn_ap(1,1,1) == 1\n",
        "test": "assert tn_ap(1,5,2)==9\nassert tn_ap(2,6,4)==22\nassert tn_ap(1,4,5)==16",
        "canonical_solution": "def tn_ap(a,n,d):\r\n  tn = a + (n - 1) * d\r\n  return tn"
    },
    {
        "number": 355,
        "prompt": "Write a python function to count the number of rectangles in a circle of radius r.\ndef count_Rectangles(radius):  \n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    def gcd(a,b):  \n        if b==0:  \n            return a  \n        else:  \n            return gcd(b,a%b)  \n    def count_rectangles(n):  \n        count=0  \n        for i in range(1,n+1):  \n            for j in range(1,n+1):  \n                if gcd(i,j)==1:  \n                    count+=1  \n        return count  \n    return count_rectangles(radius)  \n  \n# Testing the function  \nr=5  \nprint(count_Rectangles(r))  ",
        "generated_testcode": "assert count_Rectangles(1) == 1\n",
        "test": "assert count_Rectangles(2) == 8\nassert count_Rectangles(1) == 1\nassert count_Rectangles(0) == 0",
        "canonical_solution": "def count_Rectangles(radius):  \r\n    rectangles = 0 \r\n    diameter = 2 * radius \r\n    diameterSquare = diameter * diameter \r\n    for a in range(1, 2 * radius):  \r\n        for b in range(1, 2 * radius): \r\n            diagnalLengthSquare = (a * a +  b * b)  \r\n            if (diagnalLengthSquare <= diameterSquare) : \r\n                rectangles += 1\r\n    return rectangles "
    },
    {
        "number": 356,
        "prompt": "Write a function to find the third angle of a triangle using two angles.\ndef find_angle(a,b):\n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    \"\"\"\n    Finds the third angle of a triangle given two angles\n    \"\"\"\n    # Calculate the sum of the two given angles\n    c = 180 - a - b\n    # If the sum of the two angles is greater than 180, the third angle is not a valid angle\n    if c < 0:\n        return \"Error: The sum of the two angles is greater than 180\"\n    else:\n        return c\n\n# Test the function with some example inputs\nprint(find_angle(45, 60)) # Output: 75\nprint(find_angle(120, 80)) # Output: 100\nprint(find_angle(100, 20)) # Output: 70\nprint(find_angle(90, 30)) # Output: Error: The sum of the two angles is greater than 180\nprint(find_angle(180, 90)) # Output: Error: The sum of the two angles is greater than 180\n\n",
        "generated_testcode": "assert find_angle(30, 60) == 90\n",
        "test": "assert find_angle(47,89)==44\nassert find_angle(45,95)==40\nassert find_angle(50,40)==90",
        "canonical_solution": "def find_angle(a,b):\r\n c = 180 - (a + b)\r\n return c\r\n"
    },
    {
        "number": 357,
        "prompt": "Write a function to find the maximum element of all the given tuple records.\ndef find_max(test_list):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    max_num = test_list[0]\n    for i in test_list:\n        if i > max_num:\n            max_num = i\n    return max_num\n\nprint(find_max((1, 2, 3, 4, 5, 6, 7, 8, 9, 10))  # Output: 10\nprint(find_max((10, 9, 8, 7, 6, 5, 4, 3, 2, 1)  # Output: 10\nprint(find_max((-1, -2, -3, -4, -5, -6, -7, -8, -9)  # Output: -1\n\n\n# Using max() function in Python\ndef find_max_2(test_list):\n    return max(test_list)\n\nprint(find_max_2((1, 2, 3, 4, 5, 6, 7, 8, 9, 10))  # Output: 10\nprint(find_max_2((10, 9, 8, 7, 6, 5, 4, 3, 2)  # Output: 10\nprint(find_max_2((-1, -2, -3, -4, -5, -6, -7, -8, -9)  # Output: -1",
        "generated_testcode": "assert find_max(()) == None\n",
        "test": "assert find_max([(2, 4), (6, 7), (5, 1), (6, 10), (8, 7)]) == 10\nassert find_max([(3, 5), (7, 8), (6, 2), (7, 11), (9, 8)]) == 11\nassert find_max([(4, 6), (8, 9), (7, 3), (8, 12), (10, 9)]) == 12",
        "canonical_solution": "def find_max(test_list):\r\n  res = max(int(j) for i in test_list for j in i)\r\n  return (res) "
    },
    {
        "number": 358,
        "prompt": "Write a function to find modulo division of two lists using map and lambda function.\ndef moddiv_list(nums1,nums2):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    return list(map(lambda x:x%nums2,nums1))\n\n\n#Example usage:\nnums1 = [12, 13, 15, 21, 17, 35, 6]\nnums2 = [3, 7, 11, 5, 9, 13]\nprint(moddiv_list(nums1, nums2))\n#Output: [0, 4, 0, 6, 2, 12] ",
        "generated_testcode": "assert moddiv_list(range(1,10), [2,3,4]) == [1, 2, 1]\n",
        "test": "assert moddiv_list([4,5,6],[1, 2, 3])==[0, 1, 0]\nassert moddiv_list([3,2],[1,4])==[0, 2]\nassert moddiv_list([90,120],[50,70])==[40, 50]",
        "canonical_solution": "def moddiv_list(nums1,nums2):\r\n  result = map(lambda x, y: x % y, nums1, nums2)\r\n  return list(result)"
    },
    {
        "number": 359,
        "prompt": "Write a python function to check whether one root of the quadratic equation is twice of the other or not.\ndef Check_Solution(a,b,c): \n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": true,
        "answer": "    if (b**2-4*a*c)>0: \n        root1=(-b+math.sqrt(b**2-4*a*c))/2*a \n        root2=(-b-math.sqrt(b**2-4*a*c))/2*a \n        if root1==2*root2: \n            return True \n    else: \n        return False \n\n# Testing the function \na=2\nb=3\nc=-8\nif Check_Solution(a,b,c): \n    print(\"Yes, root1 is twice of root2\") \nelse: \n    print(\"No, roots are not same\") \n",
        "generated_testcode": "assert Check_Solution(1, -3, 2) == True\n",
        "test": "assert Check_Solution(1,3,2) == \"Yes\"\nassert Check_Solution(1,2,3) == \"No\"\nassert Check_Solution(1,-5,6) == \"No\"",
        "canonical_solution": "def Check_Solution(a,b,c): \r\n    if (2*b*b == 9*a*c): \r\n        return (\"Yes\"); \r\n    else: \r\n        return (\"No\"); "
    },
    {
        "number": 360,
        "prompt": "Write a function to find the n\u2019th carol number.\ndef get_carol(n): \n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    result = 1 \n    for i in range(1, n+1): \n        result = result * i \n    return result \n\n# Test the function \nprint(get_carol(1))  # Output: 1 \nprint(get_carol(2))  # Output: 2 \nprint(get_carol(3))  # Output: 6 \nprint(get_carol(4))  # Output: 24 \nprint(get_carol(5))  # Output: 120 \nprint(get_carol(6))  # Output: 72 \nprint(get_carol(7))  # Output: 504 ",
        "generated_testcode": "assert get_carol(1) == 1\n",
        "test": "assert get_carol(2) == 7\nassert get_carol(4) == 223\nassert get_carol(5) == 959",
        "canonical_solution": "def get_carol(n): \r\n\tresult = (2**n) - 1\r\n\treturn result * result - 2"
    },
    {
        "number": 361,
        "prompt": "Write a function to remove empty lists from a given list of lists.\ndef remove_empty(list1):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    return [sublist for sublist in list1 if len(sublist) > 0]\n\n# Test cases\nlist1 = [[1, 2, 3], [], [4, 5, 6], [], [7, 8, 9, 10], [], [11], []]\nprint(remove_empty(list1)) # output: [[1, 2, 3], [4, 5, 6], [7, 8, 9, 10], [11]]\n\nlist2 = [[1, 2], [3, 4], [5, 6, []], [7, 8, [9, 10]]]\nprint(remove_empty(list2)) # output: [[1, 2], [3, 4], [5, 6], [7, 8, [9, 10]]\n\nlist3 = [[], [1, 2, 3], [], [4, [], 5], [6, 7], []]\nprint(remove_empty(list3)) # output: [[1, 2, 3], [6, 7]\n\nlist4 = [[]]\nprint(remove_empty(list4)) # output: []\n\nlist5 = []\nprint(remove_empty(list5) # output: []\n\n\n# Time Complexity: O(n), where n is the number of lists in the input list\n# Space Complexity: O(n), where n is the number of lists in the input list",
        "generated_testcode": "assert remove_empty([[1,2,3], [], [4,5], [6,7,8], [], [9,[]], [10], []] ) == [[1,2,3], [4,5], [6,7,8], [9], [10]]\n",
        "test": "assert remove_empty([[], [], [], 'Red', 'Green', [1,2], 'Blue', [], []])==['Red', 'Green', [1, 2], 'Blue']\nassert remove_empty([[], [], [],[],[], 'Green', [1,2], 'Blue', [], []])==[ 'Green', [1, 2], 'Blue']\nassert remove_empty([[], [], [], 'Python',[],[], 'programming', 'language',[],[],[], [], []])==['Python', 'programming', 'language']",
        "canonical_solution": "def remove_empty(list1):\r\n  remove_empty = [x for x in list1 if x]\r\n  return remove_empty"
    },
    {
        "number": 362,
        "prompt": "Write a python function to find the item with maximum occurrences in a given list.\ndef max_occurrences(nums):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": true,
        "answer": "    from collections import Counter\n    count_dict = Counter(nums)\n    return max(count_dict, key=count_dict.get)\n\n# Test the function with the following code\nnums = [1, 2, 3, 1, 2, 1, 2, 3, 2, 3, 3, 4, 5, 6, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 3, 2, 2, 3, 4, 5, 6, 6, 6, 6, 7]\nprint(max_occurrences(nums))\n# Output: 1\n# Explanation: The number with maximum occurrences is 1 with 6 occurrences. ",
        "generated_testcode": "assert max_occurrences([1, 2, 3, 4, 2, 3, 5, 2, 3, 6, 2, 3, 7, 8, 3, 9] ) == 3\n",
        "test": "assert max_occurrences([1,2,3,1,2,3,12,4,2]) ==  2\nassert max_occurrences([1,2,6,7,0,1,0,1,0]) == 1,0\nassert max_occurrences([1,2,3,1,2,4,1]) == 1",
        "canonical_solution": "def max_occurrences(nums):\r\n    max_val = 0\r\n    result = nums[0] \r\n    for i in nums:\r\n        occu = nums.count(i)\r\n        if occu > max_val:\r\n            max_val = occu\r\n            result = i \r\n    return result"
    },
    {
        "number": 363,
        "prompt": "Write a function to add the k elements to each element in the tuple.\ndef add_K_element(test_list, K):\n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    return tuple(i+K for i in test_list)\n\n#Test the function\ntest_list = (1, 2, 3, 4)\nK = 5\nprint(add_K_element(test_list, K))\n\n# Output: (6, 7, 8)",
        "generated_testcode": "assert add_K_element((), 1) == ()\n",
        "test": "assert add_K_element([(1, 3, 4), (2, 4, 6), (3, 8, 1)], 4) == [(5, 7, 8), (6, 8, 10), (7, 12, 5)]\nassert add_K_element([(1, 2, 3), (4, 5, 6), (7, 8, 9)], 8) == [(9, 10, 11), (12, 13, 14), (15, 16, 17)]\nassert add_K_element([(11, 12, 13), (14, 15, 16), (17, 18, 19)], 9) == [(20, 21, 22), (23, 24, 25), (26, 27, 28)]",
        "canonical_solution": "def add_K_element(test_list, K):\r\n  res = [tuple(j + K for j in sub ) for sub in test_list]\r\n  return (res) "
    },
    {
        "number": 364,
        "prompt": "Write a function to find the number of flips required to make the given binary string a sequence of alternate characters.\ndef make_flip(ch): \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    count = 0\n    flag = True\n    for i in range(len(ch)):\n        if flag:\n            if ch[i] == '0':\n                continue\n            else:\n                count += 1\n                flag = False\n        else:\n            if ch[i] == '1':\n                count += 1\n                flag = True\n    return count\n\n# Test cases\nprint(make_flip('101001111001')) # Output: 2\nprint(make_flip('1101010101')) # Output: 2\nprint(make_flip('11111111111')) # Output: 0\nprint(make_flip('0000000000')) # Output: 0\nprint(make_flip('111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
        "generated_testcode": "assert make_flip(bin(10101010101) == 3\n",
        "test": "assert min_flip_to_make_string_alternate(\"0001010111\") == 2\nassert min_flip_to_make_string_alternate(\"001\") == 1\nassert min_flip_to_make_string_alternate(\"010111011\") == 2 ",
        "canonical_solution": "def make_flip(ch): \r\n\treturn '1' if (ch == '0') else '0'\r\ndef get_flip_with_starting_charcter(str, expected): \r\n\tflip_count = 0\r\n\tfor i in range(len( str)): \r\n\t\tif (str[i] != expected): \r\n\t\t\tflip_count += 1\r\n\t\texpected = make_flip(expected) \r\n\treturn flip_count \r\ndef min_flip_to_make_string_alternate(str): \r\n\treturn min(get_flip_with_starting_charcter(str, '0'),get_flip_with_starting_charcter(str, '1')) "
    },
    {
        "number": 365,
        "prompt": "Write a python function to count the number of digits of a given number.\ndef count_Digit(n):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    count = 0\n    while n > 0:\n        n //= 10\n        count += 1\n    return count\n\n# Test the function\nprint(count_Digit(12345)) # Output: 4\nprint(count_Digit(987654321)) # Output: 6\nprint(count_Digit(0)) # Output: 1\nprint(count_Digit(9876543210) # Output: 7\n\n",
        "generated_testcode": "assert count_Digit(12345) == 4\n",
        "test": "assert count_Digit(12345) == 5\nassert count_Digit(11223305) == 8\nassert count_Digit(4123459) == 7",
        "canonical_solution": "def count_Digit(n):\r\n    count = 0\r\n    while n != 0:\r\n        n //= 10\r\n        count += 1\r\n    return count"
    },
    {
        "number": 366,
        "prompt": "Write a python function to find the largest product of the pair of adjacent elements from a given list of integers.\ndef adjacent_num_product(list_nums):\n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    largest_product = 0\n    for i in range(len(list_nums)-1):\n        product = list_nums[i] * list_nums[i+1]\n        if product > largest_product:\n            largest_product = product\n    return largest_product\n\n# Test the function with the given test cases\nprint(adjacent_num_product([1, -2, 3, 4, -5, 6, -7])) # Output: 24\nprint(adjacent_num_product([1, 2, 3, 4, 5, 6, 7, 8])) # Output: 56\nprint(adjacent_num_product([-1, -2, -3, -4, -5])) # Output: -6\nprint(adjacent_num_product([1, 2, 3, 4])) # Output: 6\nprint(adjacent_num_product([-1, -2, 3, -4])) # Output: 2\nprint(adjacent_num_product([-1, -2, 3, 4])) # Output: 4\nprint(adjacent_num_product([1, 2, 3, 0])) # Output: 6\n",
        "generated_testcode": "assert adjacent_num_product([1, 2, 3, 4, 5, 6, 7, 8] ) == 56\n",
        "test": "assert adjacent_num_product([1,2,3,4,5,6]) == 30\nassert adjacent_num_product([1,2,3,4,5]) == 20\nassert adjacent_num_product([2,3]) == 6",
        "canonical_solution": "def adjacent_num_product(list_nums):\r\n    return max(a*b for a, b in zip(list_nums, list_nums[1:]))"
    },
    {
        "number": 367,
        "prompt": "Write a function to check if a binary tree is balanced or not.\n\tdef __init__(self, data): \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "\t\tself.data = data \n\t\tself.left = None\n\t\tself.right = None\n\t\n\tdef height(self): \n\t\tif self.left is None and self.right is None: \n\t\t\treturn 0\n\t\tleft_height = self.left.height() if self.left else 0\n\t\tright_height = self.right.height() if self.right else 0\n\t\treturn 1 + max(left_height, right_height) \n\t\n\tdef is_balanced(self): \n\t\tif self is None: \n\t\t\treturn True\n\t\tleft_height = self.left.height() if self.left else 0\n\t\tright_height = self.right.height() if self.right else 0\n\t\tif abs(left_height - right_height) > 1: \n\t\t\treturn False\n\t\treturn self.left.is_balanced() and self.right.is_balanced() \n\n\n\n# Create a binary tree \n#         1 \n#       /   \\ \n#      2    3 \n#     / \\   / \\ \n#    4   5  6  7 ",
        "generated_testcode": "assert __init__(BinaryTree(1) is not None\n",
        "test": "assert is_tree_balanced(root) == False\nassert is_tree_balanced(root1) == True\nassert is_tree_balanced(root2) == False ",
        "canonical_solution": "class Node: \r\n\tdef __init__(self, data): \r\n\t\tself.data = data \r\n\t\tself.left = None\r\n\t\tself.right = None\r\ndef get_height(root): \r\n\tif root is None: \r\n\t\treturn 0\r\n\treturn max(get_height(root.left), get_height(root.right)) + 1\r\ndef is_tree_balanced(root): \r\n\tif root is None: \r\n\t\treturn True\r\n\tlh = get_height(root.left) \r\n\trh = get_height(root.right) \r\n\tif (abs(lh - rh) <= 1) and is_tree_balanced( \r\n\troot.left) is True and is_tree_balanced( root.right) is True: \r\n\t\treturn True\r\n\treturn False"
    },
    {
        "number": 368,
        "prompt": "Write a function to repeat the given tuple n times.\ndef repeat_tuples(test_tup, N):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    repeated_tup = ()\n    for i in range(N):\n        repeated_tup += test_tup\n    return repeated_tup\n\n# Test the function with a tuple of your choosing\nmy_tuple = (1, 2, 3, 4, 5)\nprint(repeat_tuples(my_tuple, 3))  # Output: (1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5)\n\n# Test the function with a tuple of your choosing\nmy_tuple2 = (\"apple\", \"banana\", \"cherry\")\nprint(repeat_tuples(my_tuple2, 4))  # Output: ('apple', 'banana', 'cherry', 'apple', 'banana', 'cherry', 'apple', 'banana', 'cherry', 'apple', 'banana', 'cherry')\n\n# Test the function with a tuple of your choosing\nmy_tuple3 = (\"hello\", \"world\")\nprint(repeat_tuples(my_tuple3, 2))  # Output: ('hello', 'world', 'hello', 'world')\n\n# Test the function with a tuple of your choosing\nmy_tuple4 = (\"foo\", \"bar\", \"baz\", \"qux\")\nprint(repeat_tuples(my_tuple4, 1) # Output: ('foo', 'bar', 'baz', 'qux')\n",
        "generated_testcode": "assert repeat_tuples(('a', 'b', 'c', 'd', 'e'), 3) == ('a', 'b', 'c', 'd', 'e', 'a', 'b', 'c', 'd', 'e', 'a', 'b', 'c', 'd')\n",
        "test": "assert repeat_tuples((1, 3), 4) == ((1, 3), (1, 3), (1, 3), (1, 3))\nassert repeat_tuples((1, 2), 3) == ((1, 2), (1, 2), (1, 2))\nassert repeat_tuples((3, 4), 5) == ((3, 4), (3, 4), (3, 4), (3, 4), (3, 4))",
        "canonical_solution": "def repeat_tuples(test_tup, N):\r\n  res = ((test_tup, ) * N)\r\n  return (res) "
    },
    {
        "number": 369,
        "prompt": "Write a function to find the lateral surface area of cuboid\ndef lateralsurface_cuboid(l,w,h):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    area = 2*(l*w + w*h + l*h)\n    return area\n\n# Test the function\nprint(lateralsurface_cuboid(5,4,3)) ",
        "generated_testcode": "assert lateralsurface_cuboid(2,3,4) == 24\n",
        "test": "assert lateralsurface_cuboid(8,5,6)==156\nassert lateralsurface_cuboid(7,9,10)==320\nassert lateralsurface_cuboid(10,20,30)==1800",
        "canonical_solution": "def lateralsurface_cuboid(l,w,h):\r\n  LSA = 2*h*(l+w)\r\n  return LSA"
    },
    {
        "number": 370,
        "prompt": "Write a function to sort a tuple by its float element.\ndef float_sort(price):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    sorted_price = sorted(price, key=lambda x: float(x[1]))\n    return sorted_price\n\n# Example usage:\nprice = (('Apple', 3.5), ('Banana', 2.2), ('Orange', 4.6), ('Pear', 1.7))\nprint(float_sort(price))\n# Output: [('Pear', 1.7), ('Apple', 3.5), ('Orange', 4.6)]\n\n# Note that the function returns a sorted list and not a tuple. ",
        "generated_testcode": "assert float_sort(()) == ()\n",
        "test": "assert float_sort([('item1', '12.20'), ('item2', '15.10'), ('item3', '24.5')])==[('item3', '24.5'), ('item2', '15.10'), ('item1', '12.20')] \nassert float_sort([('item1', '15'), ('item2', '10'), ('item3', '20')])==[('item3', '20'), ('item1', '15'), ('item2', '10')] \nassert float_sort([('item1', '5'), ('item2', '10'), ('item3', '14')])==[('item3', '14'), ('item2', '10'), ('item1', '5')] ",
        "canonical_solution": "def float_sort(price):\r\n  float_sort=sorted(price, key=lambda x: float(x[1]), reverse=True)\r\n  return float_sort"
    },
    {
        "number": 371,
        "prompt": "Write a function to find the smallest missing element in a sorted array.\ndef smallest_missing(A, left_element, right_element):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    \"\"\"\n    Given a sorted array A, return the smallest missing element between left_element and right_element.\n    \"\"\"\n    # Check if there is only one element in the array or not\n    if len(A) == 0:\n        return left_element\n    # If the first element is missing, return it\n    if A[0] > left_element:\n        return left_element\n    # If the last element is missing, return it\n    if A[-1] < right_element:\n        return right_element\n    # If there are no missing elements in the array, return None\n    if A[0] == left_element:\n        for i in range(1, len(A)):\n            if A[i] > A[i-1] + 1:\n                return A[i-1] + 1\n    # If the array contains no missing elements, return None\n    for i in range(len(A)):\n        if A[i] != i+left_element:\n            return i+left_element\n    return None\n\n# Test cases\nA = [1, 2, 3, 4, 5, 6, 7, 9]\nprint(smallest_missing(A, 1, 10)) # Output: 8\nA = [1, 2, 3, 4, 5, 6, 7, 9, 10]\nprint(smallest_missing(A, 1, 10)) # Output: 8\nA = [",
        "generated_testcode": "assert smallest_missing(A=[1, 2, 3, 4, 5, 6, 7, 8, 9], left_element=1, right_element=9) == 10\n",
        "test": "assert smallest_missing([0, 1, 2, 3, 4, 5, 6], 0, 6) == 7\nassert smallest_missing([0, 1, 2, 6, 9, 11, 15], 0, 6) == 3\nassert smallest_missing([1, 2, 3, 4, 6, 9, 11, 15], 0, 7) == 0",
        "canonical_solution": "def smallest_missing(A, left_element, right_element):\r\n    if left_element > right_element:\r\n        return left_element\r\n    mid = left_element + (right_element - left_element) // 2\r\n    if A[mid] == mid:\r\n        return smallest_missing(A, mid + 1, right_element)\r\n    else:\r\n        return smallest_missing(A, left_element, mid - 1)"
    },
    {
        "number": 372,
        "prompt": "Write a function to sort a given list of elements in ascending order using heap queue algorithm.\ndef heap_assending(nums):\n",
        "checkpoint": "7B",
        "pass": 3,
        "correct": true,
        "answer": "    import heapq\n    heapq.heapify(nums)\n    return sorted(nums)\n\ndef heap_descending(nums):\n    import heapq\n    heapq.heapify(nums)\n    return heapq.nlargest(len(nums), nums)\n\n# Example usage:\nnums = [5, 2, 3, 1, 8, 6, 7, 9, 4, 10, 11]\nprint(heap_assending(nums))\nprint(heap_descending(nums))\n",
        "generated_testcode": "assert heap_assending([3, 1, 4, 2, 5, 7, 6, 8, 9, 0, 10] ) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n",
        "test": "assert heap_assending([18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1])==[1, 2, 3, 4, 7, 8, 9, 9, 10, 14, 18]\nassert heap_assending([25, 35, 22, 85, 14, 65, 75, 25, 58])==[14, 22, 25, 25, 35, 58, 65, 75, 85]\nassert heap_assending([1, 3, 5, 7, 9, 2, 4, 6, 8, 0])==[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]",
        "canonical_solution": "import heapq as hq\r\ndef heap_assending(nums):\r\n  hq.heapify(nums)\r\n  s_result = [hq.heappop(nums) for i in range(len(nums))]\r\n  return s_result"
    },
    {
        "number": 373,
        "prompt": "Write a function to find the volume of a cuboid.\ndef volume_cuboid(l,w,h):\n",
        "checkpoint": "7B",
        "pass": 3,
        "correct": true,
        "answer": "    return l*w*h\n\n# Test the function\nprint(volume_cuboid(2,3,4)) # Output: 24\nprint(volume_cuboid(10, 5, 6)) # Output: 30\nprint(volume_cuboid(8.5, 4, 7.5)) # Output: 24.75\n",
        "generated_testcode": "assert volume_cuboid(2,3,4) == 24\n",
        "test": "assert volume_cuboid(1,2,3)==6\nassert volume_cuboid(5,7,9)==315\nassert volume_cuboid(10,15,21)==3150",
        "canonical_solution": "def volume_cuboid(l,w,h):\r\n  volume=l*w*h\r\n  return volume"
    },
    {
        "number": 374,
        "prompt": "Write a function to print all permutations of a given string including duplicates.\ndef permute_string(str):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    # Recursive function to generate all possible permutations\n    def generate_permutations(str, l, r):\n        if l == r:\n            print(\"\".join(str))\n        else:\n            for i in range(l, r+1):\n                str[l], str[i] = str[i], str[l]\n                generate_permutations(str, r)\n                str[l], str[i] = str[i], str[l]\n\n    # Calling the recursive function with length of string and 0\n    generate_permutations(list(str), len(str)-1)\n\n# Test the function with example\npermute_string(\"abc\")\n",
        "generated_testcode": "assert permute_string(None) == []\n",
        "test": "assert permute_string('ab')==['ab', 'ba']\nassert permute_string('abc')==['abc', 'bac', 'bca', 'acb', 'cab', 'cba']\nassert permute_string('abcd')==['abcd', 'bacd', 'bcad', 'bcda', 'acbd', 'cabd', 'cbad', 'cbda', 'acdb', 'cadb', 'cdab', 'cdba', 'abdc', 'badc', 'bdac', 'bdca', 'adbc', 'dabc', 'dbac', 'dbca', 'adcb', 'dacb', 'dcab', 'dcba']",
        "canonical_solution": "def permute_string(str):\r\n    if len(str) == 0:\r\n        return ['']\r\n    prev_list = permute_string(str[1:len(str)])\r\n    next_list = []\r\n    for i in range(0,len(prev_list)):\r\n        for j in range(0,len(str)):\r\n            new_str = prev_list[i][0:j]+str[0]+prev_list[i][j:len(str)-1]\r\n            if new_str not in next_list:\r\n                next_list.append(new_str)\r\n    return next_list"
    },
    {
        "number": 375,
        "prompt": "Write a function to round the given number to the nearest multiple of a specific number.\ndef round_num(n,m):\n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    # Define a function to round up or down to the nearest multiple of m\n    def round_down(num, m):\n        return num - num % m\n    # Define a function to round up to the nearest multiple of m\n    def round_up(num, m):\n        return round_down(num, m) + m if num % m != 0 else num\n    # Define a function to round to the nearest multiple of m\n    def round_nearest(num, m):\n        return round_up(num, m) if num % m >= m/2 else round_down(num, m)\n    # Determine which rounding function to use\n    if n >= 0:\n        return round_nearest(n, m)\n    else:\n        return -round_nearest(-n, m)\n\n# Test cases\nprint(round_num(4.3, 5)) # 5\nprint(round_num(5, 5)) # 5\nprint(round_num(6, 5)) # 5\nprint(round_num(7, 5)) # 10\nprint(round_num(-4.3, 5)) # -5\nprint(round_num(-5, 5)) # -5\nprint(round_num(-6, 5)) # -5\nprint(round_num(-7, 5)) # -10\nprint(round_num(4.6, 5)) # 5\nprint(round_num(5.5, 5)) # ",
        "generated_testcode": "assert round_num(10,5) == 10\n",
        "test": "assert round_num(4722,10)==4720\nassert round_num(1111,5)==1110\nassert round_num(219,2)==218",
        "canonical_solution": "def round_num(n,m):\r\n    a = (n //m) * m\r\n    b = a + m\r\n    return (b if n - a > b - n else a)"
    },
    {
        "number": 376,
        "prompt": "Write a function to remove tuple elements that occur more than once and replace the duplicates with some custom value.\ndef remove_replica(test_tup):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    from collections import Counter\n    \n    c = Counter(test_tup)\n    result = tuple(x for x in test_tup if c[x] == 1)\n    if len(result) == len(test_tup):\n        return \"All elements are unique\"\n    else:\n        return result\n\n# Test the function\ntest_tuple = (1, 2, 3, 4, 2, 3, 4, 5, 6, 7, 5, 7, 8, 9, 9, 10)\nprint(remove_replica(test_tuple)) # Output: (1, 2, 3, 4, 5, 6, 7, 8, 9, 10)",
        "generated_testcode": "assert remove_replica(()) == ()\n",
        "test": "assert remove_replica((1, 1, 4, 4, 4, 5, 5, 6, 7, 7)) == (1, 'MSP', 4, 'MSP', 'MSP', 5, 'MSP', 6, 7, 'MSP')\nassert remove_replica((2, 3, 4, 4, 5, 6, 6, 7, 8, 9, 9)) == (2, 3, 4, 'MSP', 5, 6, 'MSP', 7, 8, 9, 'MSP')\nassert remove_replica((2, 2, 5, 4, 5, 7, 5, 6, 7, 7)) == (2, 'MSP', 5, 4, 'MSP', 7, 'MSP', 6, 'MSP', 'MSP')",
        "canonical_solution": "def remove_replica(test_tup):\r\n  temp = set()\r\n  res = tuple(ele if ele not in temp and not temp.add(ele) \r\n\t\t\t\telse 'MSP' for ele in test_tup)\r\n  return (res)"
    },
    {
        "number": 377,
        "prompt": "Write a python function to remove all occurrences of a character in a given string.\ndef remove_Char(s,c) :  \n",
        "checkpoint": "7B",
        "pass": 3,
        "correct": true,
        "answer": "    return ''.join([x for x in s if x != c])\n\ns = \"hello,world\"\nc = \",\"\nprint(remove_Char(s,c))\n\n\n#Output:\n#'helloworld'\n\n\n#Explanation:\n#We have defined a function remove_Char which takes two arguments s and c.\n#We are joining all the characters of the string s which are not equal to c.\n#We are using list comprehension to achieve this.\n#In the list comprehension, we are checking if the current character is not equal to c, and then joining all the characters.\n#Finally, we are returning the joined string. ",
        "generated_testcode": "assert remove_Char(\"hello world\", \"l\") == \"heo word\"\n",
        "test": "assert remove_Char(\"aba\",'a') == \"b\"\nassert remove_Char(\"toggle\",'g') == \"tole\"\nassert remove_Char(\"aabbc\",'b') == \"aac\"",
        "canonical_solution": "def remove_Char(s,c) :  \r\n    counts = s.count(c) \r\n    s = list(s) \r\n    while counts :  \r\n        s.remove(c) \r\n        counts -= 1 \r\n    s = '' . join(s)   \r\n    return (s) "
    },
    {
        "number": 378,
        "prompt": "Write a python function to shift last element to first position in the given list.\ndef move_first(test_list):\n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    if len(test_list) == 0:\n        return \"Empty List\"\n    else:\n        last_element = test_list.pop()\n        test_list.insert(0, last_element)\n        return test_list\n\n# Example usage:\ntest_list = [1, 2, 3, 4, 5]\nprint(move_first(test_list))\n# Output: [5, 1, 2, 3, 4]\n\ntest_list = []\nprint(move_first(test_list))\n# Output: Empty List",
        "generated_testcode": "assert move_first([\"apple\", \"banana\", \"cherry\", \"orange\", \"grape\"]), [\"orange\", \"apple\", \"banana\", \"cherry\", \"grape\"]\n",
        "test": "assert move_first([1,2,3,4]) == [4,1,2,3]\nassert move_first([0,1,2,3]) == [3,0,1,2]\nassert move_first([9,8,7,1]) == [1,9,8,7]",
        "canonical_solution": "def move_first(test_list):\r\n  test_list = test_list[-1:] + test_list[:-1]  \r\n  return test_list"
    },
    {
        "number": 379,
        "prompt": "Write a function to find the surface area of a cuboid.\ndef surfacearea_cuboid(l,w,h):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": true,
        "answer": "    s_a = 2*(l*w + w*h + h*l)\n    return s_a\n\n#Test the function with sample inputs\nprint(surfacearea_cuboid(5,4,3)) #Expected Output: 32\nprint(surfacearea_cuboid(2,5,10)) #Expected Output: 50\nprint(surfacearea_cuboid(7,10,4)) #Expected Output: 98\n",
        "generated_testcode": "assert surfacearea_cuboid(2,3,4) == 52\n",
        "test": "assert surfacearea_cuboid(1,2,3)==22\nassert surfacearea_cuboid(5,7,9)==286\nassert surfacearea_cuboid(10,15,21)==1350",
        "canonical_solution": "def surfacearea_cuboid(l,w,h):\r\n  SA = 2*(l*w + l * h + w * h)\r\n  return SA"
    },
    {
        "number": 380,
        "prompt": "Write a function to generate a two-dimensional array.\ndef multi_list(rownum,colnum):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    result = []\n    for i in range(rownum):\n        result.append([0]*colnum)\n    return result\n\n#function to fill the two-dimensional array with random numbers between 0 and 100\ndef fill_array(rownum,colnum):\n    result = multi_list(rownum,colnum)\n    for i in range(rownum):\n        for j in range(colnum):\n            result[i][j] = random.randint(0,10)\n    return result\n\n#function to print the two-dimensional array\ndef print_array(rownum,colnum,arr):\n    for i in range(rownum):\n        for j in range(colnum):\n            print(arr[i][j],end=' ')\n        print()\n\n#main program\nrow_num = int(input(\"Enter the number of rows: \"))\ncol_num = int(input(\"Enter the number of columns: \"))\n\narray = fill_array(row_num,col_num)\nprint(\"The 2D array is:\")\nprint_array(row_num,col_num,array)\n",
        "generated_testcode": "assert multi_list(3,4) == [[0,0,0,0,0],[0,0,0,0,0],[0,0,0,0,0]]\n",
        "test": "assert multi_list(3,4)==[[0, 0, 0, 0], [0, 1, 2, 3], [0, 2, 4, 6]] \nassert multi_list(5,7)==[[0, 0, 0, 0, 0, 0, 0], [0, 1, 2, 3, 4, 5, 6], [0, 2, 4, 6, 8, 10, 12], [0, 3, 6, 9, 12, 15, 18], [0, 4, 8, 12, 16, 20, 24]]\nassert multi_list(10,15)==[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14], [0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28], [0, 3, 6, 9, 12, 15, 18, 21, 24, 27, 30, 33, 36, 39, 42], [0, 4, 8, 12, 16, 20, 24, 28, 32, 36, 40, 44, 48, 52, 56], [0, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70], [0, 6, 12, 18, 24, 30, 36, 42, 48, 54, 60, 66, 72, 78, 84], [0, 7, 14, 21, 28, 35, 42, 49, 56, 63, 70, 77, 84, 91, 98], [0, 8, 16, 24, 32, 40, 48, 56, 64, 72, 80, 88, 96, 104, 112], [0, 9, 18, 27, 36, 45, 54, 63, 72, 81, 90, 99, 108, 117, 126]]",
        "canonical_solution": "def multi_list(rownum,colnum):\r\n  multi_list = [[0 for col in range(colnum)] for row in range(rownum)]\r\n  for row in range(rownum):\r\n    for col in range(colnum):\r\n        multi_list[row][col]= row*col\r\n  return multi_list\r\n"
    },
    {
        "number": 381,
        "prompt": "Write a function to sort a list of lists by a given index of the inner list.\ndef index_on_inner_list(list_data, index_no):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    return sorted(list_data, key=lambda x: x[index_no])\n\n# Example usage:\ndata = [[1,2,3], [4,5,6], [7,8,9]]\nsorted_data = index_on_inner_list(data, 1)\nprint(sorted_data)  # Output: [[7, 8, 9], [1, 2, 3], [4, 5, 6]]\n\n# Explanation: The function takes in a list of lists and an index number, sorts the list of lists based on the index number provided and returns a new list. ",
        "generated_testcode": "assert index_on_inner_list([[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12]], 1) == [[1, 2, 3], [7, 8, 9], [4, 5, 6], [10, 11, 12]]\n",
        "test": "assert index_on_inner_list([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,0)==[('Beau Turnbull', 94, 98), ('Brady Kent', 97, 96), ('Greyson Fulton', 98, 99), ('Wyatt Knott', 91, 94)]\nassert index_on_inner_list([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,1)==[('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98), ('Brady Kent', 97, 96), ('Greyson Fulton', 98, 99)]\nassert index_on_inner_list([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,2)==[('Wyatt Knott', 91, 94), ('Brady Kent', 97, 96), ('Beau Turnbull', 94, 98), ('Greyson Fulton', 98, 99)]",
        "canonical_solution": "from operator import itemgetter\r\ndef index_on_inner_list(list_data, index_no):\r\n    result = sorted(list_data, key=itemgetter(index_no))\r\n    return result"
    },
    {
        "number": 382,
        "prompt": "Write a function to find the number of rotations in a circularly sorted array.\ndef find_rotation_count(A):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    n = len(A)\n    if n == 1:\n        return 0\n\n    if A[n-1] > A[0]:\n        return 0\n\n    slow = A[0]\n    for i in range(1, n):\n        if A[i] >= slow:\n            return i\n        slow = A[i]\n\n    return n\n\n\n# Testing the function\nA = [3, 4, 5, 1, 2, 6, 7, 8, 9, 0, 1]\nprint(find_rotation_count(A)) # Output: 1\n\nA = [1, 2, 3, 4, 5, 6, 7, 8, 9, 0]\nprint(find_rotation_count(A)) # Output: 0\nA = [4, 5, 6, 7, 8, 1, 2, 3, 4]\nprint(find_rotation_count(A)) # Output: 3\nA = [1, 2, 3, 4, 5]\nprint(find_rotation_count(A)) # Output: 0\nA = [1, 2, 3]\nprint(find_rotation_count(A)) # Output: 0\nA = [3, 1, 2]\nprint(find_rotation_count(A)) # Output: 1\nA = [2, 3]\nprint",
        "generated_testcode": "assert find_rotation_count([4, 5, 6, 7, 1, 2, 3] ) == 3\n",
        "test": "assert find_rotation_count([8, 9, 10, 1, 2, 3, 4, 5, 6, 7]) == 3\nassert find_rotation_count([8, 9, 10,2, 5, 6]) == 3\nassert find_rotation_count([2, 5, 6, 8, 9, 10]) == 0",
        "canonical_solution": "def find_rotation_count(A):\r\n    (left, right) = (0, len(A) - 1)\r\n    while left <= right:\r\n        if A[left] <= A[right]:\r\n            return left\r\n        mid = (left + right) // 2\r\n        next = (mid + 1) % len(A)\r\n        prev = (mid - 1 + len(A)) % len(A)\r\n        if A[mid] <= A[next] and A[mid] <= A[prev]:\r\n            return mid\r\n        elif A[mid] <= A[right]:\r\n            right = mid - 1\r\n        elif A[mid] >= A[left]:\r\n            left = mid + 1\r\n    return -1"
    },
    {
        "number": 383,
        "prompt": "Write a python function to toggle all odd bits of a given number.\ndef even_bit_toggle_number(n) : \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    binary_str = bin(n)[2:]\n    binary_list = list(binary_str)\n    for i in range(len(binary_list) - 1, -1, -2) :\n        if binary_list[i] == '0' :\n            binary_list[i] = '1'\n        elif binary_list[i] == '1' :\n            binary_list[i] = '0'\n    return int(''.join(binary_list), 2)\n\n\n# Test the function\nprint(even_bit_toggle_number(10)) # Output: 10\nprint(even_bit_toggle_number(11)) # Output: 9\nprint(even_bit_toggle_number(12)) # Output: 14\nprint(even_bit_toggle_number(15)) # Output: 14\nprint(even_bit_toggle_number(21)) # Output: 16",
        "generated_testcode": "assert even_bit_toggle_number(10) == 9\n",
        "test": "assert even_bit_toggle_number(10) == 15\nassert even_bit_toggle_number(20) == 1\nassert even_bit_toggle_number(30) == 11",
        "canonical_solution": "def even_bit_toggle_number(n) : \r\n    res = 0; count = 0; temp = n    \r\n    while(temp > 0 ) : \r\n        if (count % 2 == 0) : \r\n            res = res | (1 << count)      \r\n        count = count + 1\r\n        temp >>= 1 \r\n    return n ^ res "
    },
    {
        "number": 384,
        "prompt": "Write a python function to find the frequency of the smallest value in a given array.\ndef frequency_Of_Smallest(n,arr): \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    # Initialize a variable to store the frequency of the smallest value \n    freq = 0\n    # Sort the array in ascending order \n    arr.sort()\n    # Initialize a variable to store the smallest value \n    smallest = arr[0]\n    # Loop through the array \n    for i in arr:\n        # If the current element is equal to the smallest value, increment the frequency \n        if i == smallest:\n            freq += 1\n    # Return the frequency of the smallest value \n    return freq\n\n# Test the function with the given example \narr = [1, 2, 3, 4, 2, 2, 5, 3, 1, 3, 2, 1]\nprint(frequency_Of_Smallest(3, arr)) # Output: 3\n# The smallest value in the array is 1 and it occurs 3 times in the array ",
        "generated_testcode": "assert frequency_Of_Smallest(5, [1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9]) == 3\n",
        "test": "assert frequency_Of_Smallest(5,[1,2,3,4,3]) == 1\nassert frequency_Of_Smallest(7,[3,1,2,5,6,2,3]) == 1\nassert frequency_Of_Smallest(7,[3,3,6,3,7,4,9]) == 3",
        "canonical_solution": "def frequency_Of_Smallest(n,arr): \r\n    mn = arr[0] \r\n    freq = 1\r\n    for i in range(1,n): \r\n        if (arr[i] < mn): \r\n            mn = arr[i] \r\n            freq = 1\r\n        elif (arr[i] == mn): \r\n            freq += 1\r\n    return freq "
    },
    {
        "number": 385,
        "prompt": "Write a function to find the n'th perrin number using recursion.\ndef get_perrin(n):\n",
        "checkpoint": "7B",
        "pass": 4,
        "correct": true,
        "answer": "    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return get_perrin(n - 1) + get_perrin(n - 1) + 1\n\n\nprint(get_perrin(5))  # Output: 15\nprint(get_perrin(10))  # Output: 132\n",
        "generated_testcode": "assert get_perrin(1) == 1\n",
        "test": "assert get_perrin(9) == 12\nassert get_perrin(4) == 2\nassert get_perrin(6) == 5",
        "canonical_solution": "def get_perrin(n):\r\n  if (n == 0):\r\n    return 3\r\n  if (n == 1):\r\n    return 0\r\n  if (n == 2):\r\n    return 2 \r\n  return get_perrin(n - 2) + get_perrin(n - 3)"
    },
    {
        "number": 386,
        "prompt": "Write a function to find out the minimum no of swaps required for bracket balancing in the given string.\ndef swap_count(s):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    stack = []\n    swaps = 0\n    for i in s:\n        if i == '(':\n            stack.append(i)\n        else:\n            if not stack:\n                swaps += 1\n            else:\n                if stack[-1] == ')':\n                    stack.pop()\n                else:\n                    stack.append(i)\n    return swaps\n\n\n\n# Test the function\ns = \"(((((\"\nprint(swap_count(s))\n\ns = \"))((\"\nprint(swap_count(s))\n\ns = \")))(((\"\nprint(swap_count(s))\n\ns = \"()())\"\nprint(swap_count(s))\n\ns = \"(((((((((\"\nprint(swap_count(s))\n\ns = \"()())(\"\nprint(swap_count(s))\n\ns = \"))(((\"\nprint(swap_count(s))\n\ns = \"))(\"\nprint(swap_count(s))\n\ns = \"()()\"\nprint(swap_count(s))\n\ns = \"(((\"\nprint(swap_count(s))\n\ns = \"()))\"\nprint(swap_count(s))\n\ns = \"\"\nprint(swap_count(s))\n\ns = \"(\"\nprint(swap_count(s))\n\ns = \")(\"\nprint(swap_count(s))\n\ns = \"))\"\nprint(swap_count(s))\n\ns = \"(()))\"",
        "generated_testcode": "assert swap_count(s=\"([])\") == 1\n",
        "test": "assert swap_count(\"[]][][\") == 2\nassert swap_count(\"[[][]]\") == 0\nassert swap_count(\"[[][]]][\") == 1",
        "canonical_solution": "def swap_count(s):\r\n\tchars = s\r\n\tcount_left = 0\r\n\tcount_right = 0\r\n\tswap = 0\r\n\timbalance = 0; \r\n\tfor i in range(len(chars)):\r\n\t\tif chars[i] == '[':\r\n\t\t\tcount_left += 1\r\n\t\t\tif imbalance > 0:\r\n\t\t\t\tswap += imbalance\r\n\t\t\t\timbalance -= 1\r\n\t\telif chars[i] == ']':\r\n\t\t\tcount_right += 1\r\n\t\t\timbalance = (count_right - count_left) \r\n\treturn swap"
    },
    {
        "number": 387,
        "prompt": "Write a python function to check whether the hexadecimal number is even or odd.\ndef even_or_odd(N): \n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    if N%2 == 0:\n        return \"Even\"\n    else:\n        return \"Odd\"\n\n# Test the function with some sample inputs\nprint(even_or_odd(10)) # Output: Even\nprint(even_or_odd(15)) # Output: Odd\nprint(even_or_odd(12)) # Output: Even\nprint(even_or_odd(20)) # Output: Even\n",
        "generated_testcode": "assert even_or_odd(0x10) == \"Even\"\n",
        "test": "assert even_or_odd(\"AB3454D\") ==\"Odd\"\nassert even_or_odd(\"ABC\") == \"Even\"\nassert even_or_odd(\"AAD\") == \"Odd\"",
        "canonical_solution": "def even_or_odd(N): \r\n    l = len(N) \r\n    if (N[l-1] =='0'or N[l-1] =='2'or \r\n        N[l-1] =='4'or N[l-1] =='6'or \r\n        N[l-1] =='8'or N[l-1] =='A'or \r\n        N[l-1] =='C'or N[l-1] =='E'): \r\n        return (\"Even\") \r\n    else: \r\n        return (\"Odd\") "
    },
    {
        "number": 388,
        "prompt": "Write a python function to find the highest power of 2 that is less than or equal to n.\ndef highest_Power_of_2(n): \n",
        "checkpoint": "7B",
        "pass": 3,
        "correct": true,
        "answer": "    highest_power = 0\n    while n > 0:\n        n >>= 1\n        highest_power += 1\n    return highest_power\n\n#test the function\nprint(highest_Power_of_2(15)) # 4\nprint(highest_Power_of_2(16)) # 5\nprint(highest_Power_of_2(25)) # 5\nprint(highest_Power_of_2(32)) # 5\nprint(highest_Power_of_2(31)) # 4\n",
        "generated_testcode": "assert highest_Power_of_2(10) == 4\n",
        "test": "assert highest_Power_of_2(10) == 8\nassert highest_Power_of_2(19) == 16\nassert highest_Power_of_2(32) == 32",
        "canonical_solution": "def highest_Power_of_2(n): \r\n    res = 0; \r\n    for i in range(n, 0, -1): \r\n        if ((i & (i - 1)) == 0): \r\n            res = i; \r\n            break; \r\n    return res; "
    },
    {
        "number": 389,
        "prompt": "Write a function to find the n'th lucas number.\ndef find_lucas(n): \n",
        "checkpoint": "7B",
        "pass": 3,
        "correct": true,
        "answer": "    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)\n\n# Test the function with some inputs\nprint(find_lucas(0))  # Output: 2\nprint(find_lucas(1))  # Output: 1\nprint(find_lucas(2))  # Output: 3\nprint(find_lucas(3))  # Output: 4\nprint(find_lucas(4))  # Output: 7\nprint(find_lucas(5))  # Output: 11\nprint(find_lucas(6))  # Output: 18\nprint(find_lucas(7))  # Output: 29\nprint(find_lucas(8))  # Output: 47\nprint(find_lucas(9))  # Output: 76\nprint(find_lucas(10)) # Output: 123\n\n\n# Using memoization to optimize the function\ndef find_lucas(n, memo = {}):\n    if n in memo:\n        return memo[n]\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        memo[n] = find_lucas(n-1, memo)",
        "generated_testcode": "assert find_lucas(0) == 2\n",
        "test": "assert find_lucas(9) == 76\nassert find_lucas(4) == 7\nassert find_lucas(3) == 4",
        "canonical_solution": "def find_lucas(n): \r\n\tif (n == 0): \r\n\t\treturn 2\r\n\tif (n == 1): \r\n\t\treturn 1\r\n\treturn find_lucas(n - 1) + find_lucas(n - 2) "
    },
    {
        "number": 390,
        "prompt": "Write a function to insert a given string at the beginning of all items in a list.\ndef add_string(list,string):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    new_list = []\n    for item in list:\n        new_list.append(string + item)\n    return new_list\n\n# Test the function with a sample list and a string\nmy_list = [\"apple\", \"banana\", \"cherry\", \"orange\", \"grape\"]\nstring_to_insert = \"fruit\"\nprint(add_string(my_list, string_to_insert))\n# Output: ['fruit apple', 'fruit banana', 'fruit cherry', 'fruit orange', 'fruit grape']\n\n# Test the function with an empty list\nmy_list2 = []\nstring_to_insert2 = \"hello\"\nprint(add_string(my_list2, string_to_insert2))\n# Output: []\n\n# Test the function with an empty string\nmy_list3 = [\"apple\", \"banana\", \"cherry\", \"orange\", \"grape\"]\nstring_to_insert3 = \"\"\nprint(add_string(my_list3, string_to_insert3))\n# Output: [' apple', ' banana', ' cherry', ' orange', ' grape']\n\n# Test the function with a list of numbers\nmy_list4 = [1, 2, 3, 4, 5]\nstring_to_insert4 = \"num\"\nprint(add_string(my_list4, string_to_insert4))\n# Output: ['num 1', 'num 2', 'num 3', 'num 4",
        "generated_testcode": "assert add_string([\"apple\", \"banana\", \"cherry\", \"date\"], \"fruit\") == [\"fruitapple\", \"fruitbanana\", \"fruitcherry\", \"fruitedate\"]\n",
        "test": "assert add_string([1,2,3,4],'temp{0}')==['temp1', 'temp2', 'temp3', 'temp4']\nassert add_string(['a','b','c','d'], 'python{0}')==[ 'pythona', 'pythonb', 'pythonc', 'pythond']\nassert add_string([5,6,7,8],'string{0}')==['string5', 'string6', 'string7', 'string8']",
        "canonical_solution": "def add_string(list,string):\r\n add_string=[string.format(i) for i in  list]\r\n return add_string"
    },
    {
        "number": 391,
        "prompt": "Write a function to convert more than one list to nested dictionary.\ndef convert_list_dictionary(l1, l2, l3):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    result = {}\n    for i in range(len(l1)):\n        result[l1[i]] = {l2[i]: l3[i]}\n    return result\n\n# Test the function\nmy_list = [\"apple\", \"banana\", \"orange\", \"grape\", \"mango\", \"kiwi\"]\nfruits = [\"red\", \"yellow\", \"green\", \"orange\", \"brown\"]\ncolors = [\"fruit\", \"fruit\", \"fruit\", \"vegetable\"]\nprint(convert_list_dictionary(my_list, fruits, colors))\n",
        "generated_testcode": "assert convert_list_dictionary([\"apple\", \"banana\", \"orange\"], [1, 2, 3], [4, 5, 6]) == {\"apple\": {\"fruit\": 1, \"vegetable\": 2, \"dessert\": 3}, \"banana\": {\"fruit\": 4, \"vegetable\": 5, \"dessert\": 6}, \"orange\": {\"fruit\": 1, \"vegetable\": 2, \"dessert\": 3}}\n",
        "test": "assert convert_list_dictionary([\"S001\", \"S002\", \"S003\", \"S004\"],[\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"] ,[85, 98, 89, 92])==[{'S001': {'Adina Park': 85}}, {'S002': {'Leyton Marsh': 98}}, {'S003': {'Duncan Boyle': 89}}, {'S004': {'Saim Richards': 92}}]\nassert convert_list_dictionary([\"abc\",\"def\",\"ghi\",\"jkl\"],[\"python\",\"program\",\"language\",\"programs\"],[100,200,300,400])==[{'abc':{'python':100}},{'def':{'program':200}},{'ghi':{'language':300}},{'jkl':{'programs':400}}]\nassert convert_list_dictionary([\"A1\",\"A2\",\"A3\",\"A4\"],[\"java\",\"C\",\"C++\",\"DBMS\"],[10,20,30,40])==[{'A1':{'java':10}},{'A2':{'C':20}},{'A3':{'C++':30}},{'A4':{'DBMS':40}}]",
        "canonical_solution": "def convert_list_dictionary(l1, l2, l3):\r\n     result = [{x: {y: z}} for (x, y, z) in zip(l1, l2, l3)]\r\n     return result"
    },
    {
        "number": 392,
        "prompt": "Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\ndef get_max_sum (n):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    memo = {}\n    def max_sum(n):\n        if n in memo:\n            return memo[n]\n        if n < 1:\n            return 0\n        if n == 1:\n            return 1\n        if n == 2:\n            return 2\n        if n == 3:\n            return 4\n        if n == 4:\n            return 4\n        memo[n] = max(max_sum(n//2) + n//3 + n//4 + n//5, n)\n        return memo[n]\n    return max_sum(n)\n\n\n# Test the function with the following inputs\nprint(get_max_sum(5) # Output: 5\nprint(get_max_sum(10) # Output: 11\nprint(get_max_sum(15) # Output: 16\nprint(get_max_sum(20) # Output: 21\nprint(get_max_sum(25) # Output: 28\nprint(get_max_sum(30) # Output: 34\n\n# Time Complexity: O(n) - We are storing the intermediate results in a dictionary to reduce the time complexity\n# Space Complexity: O(n) - We are using a dictionary to store the intermediate results. ",
        "generated_testcode": "assert get_max_sum (10) == 120\n",
        "test": "assert get_max_sum(60) == 106\nassert get_max_sum(10) == 12\nassert get_max_sum(2) == 2",
        "canonical_solution": "def get_max_sum (n):\r\n\tres = list()\r\n\tres.append(0)\r\n\tres.append(1)\r\n\ti = 2\r\n\twhile i<n + 1:\r\n\t\tres.append(max(i, (res[int(i / 2)] \r\n\t\t\t\t\t\t+ res[int(i / 3)] +\r\n\t\t\t\t\t\t\tres[int(i / 4)]\r\n\t\t\t\t\t\t+ res[int(i / 5)])))\r\n\t\ti = i + 1\r\n\treturn res[n]"
    },
    {
        "number": 393,
        "prompt": "Write a function to find the list with maximum length using lambda function.\ndef max_length_list(input_list):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    return list(filter(lambda x: len(x) == max(map(len, input_list), input_list))\n\n\n#Example:\ninput_list = [\"apple\", \"banana\", \"cherry\", \"dates\", \"fig\", \"grape\"]\nprint(max_length_list(input_list)) # should return [\"banana\", \"cherry\"]\n\ninput_list = [\"apple\", \"banana\", \"cherry\", \"dates\", \"fig\", \"grape\", \"kiwi\", \"kiwi\"]\nprint(max_length_list(input_list)) # should return [\"kiwi\", \"kiwi\"]\ninput_list = [\"apple\", \"banana\", \"cherry\", \"dates\", \"fig\", \"grape\"]\nprint(max_length_list(input_list)) # should return []\n",
        "generated_testcode": "assert max_length_list([\"apple\", \"banana\", \"cherry\", \"grape\", \"kiwi\", \"orange\", \"pear\", \"strawberry\"] == 6\n",
        "test": "assert max_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [13, 15, 17])\nassert max_length_list([[1,2,3,4,5],[1,2,3,4],[1,2,3],[1,2],[1]])==(5,[1,2,3,4,5])\nassert max_length_list([[3,4,5],[6,7,8,9],[10,11,12]])==(4,[6,7,8,9])",
        "canonical_solution": "def max_length_list(input_list):\r\n    max_length = max(len(x) for x in input_list )   \r\n    max_list = max(input_list, key = lambda i: len(i))    \r\n    return(max_length, max_list)"
    },
    {
        "number": 394,
        "prompt": "Write a function to check if given tuple is distinct or not.\ndef check_distinct(test_tup):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    if len(set(test_tup) == len(test_tup):\n        return True\n    else:\n        return False\n\n# Test cases\nprint(check_distinct((1, 2, 3, 4, 5)) # True\nprint(check_distinct((1, 2, 2, 3, 4, 5)) # False\nprint(check_distinct((1, 2, 3, 4, 4, 5)) # False\n",
        "generated_testcode": "assert check_distinct(()) == True\n",
        "test": "assert check_distinct((1, 4, 5, 6, 1, 4)) == False\nassert check_distinct((1, 4, 5, 6)) == True\nassert check_distinct((2, 3, 4, 5, 6)) == True",
        "canonical_solution": "def check_distinct(test_tup):\r\n  res = True\r\n  temp = set()\r\n  for ele in test_tup:\r\n    if ele in temp:\r\n      res = False\r\n      break\r\n    temp.add(ele)\r\n  return (res) "
    },
    {
        "number": 395,
        "prompt": "Write a python function to find the first non-repeated character in a given string.\ndef first_non_repeating_character(str1):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    for char in str1:\n        if char_count[char] == 1:\n            return char\n    return None\n\n# Test cases\nprint(first_non_repeating_character(\"hello\")) # Output: 'h'\nprint(first_non_repeating_character(\"geeksforgeeks\")) # Output: 'g'\nprint(first_non_repeating_character(\"aabbcddd\")) # Output: 'e'\nprint(first_non_repeating_character(\"aabbcdde\")) # Output: None\nprint(first_non_repeating_character(\"aabcdcba\")) # Output: None",
        "generated_testcode": "assert first_non_repeating_character(str1) == 'a'\n",
        "test": "assert first_non_repeating_character(\"abcabc\") == None\nassert first_non_repeating_character(\"abc\") == \"a\"\nassert first_non_repeating_character(\"ababc\") == \"c\"",
        "canonical_solution": "def first_non_repeating_character(str1):\r\n  char_order = []\r\n  ctr = {}\r\n  for c in str1:\r\n    if c in ctr:\r\n      ctr[c] += 1\r\n    else:\r\n      ctr[c] = 1 \r\n      char_order.append(c)\r\n  for c in char_order:\r\n    if ctr[c] == 1:\r\n      return c\r\n  return None"
    },
    {
        "number": 396,
        "prompt": "Write a function to check whether the given string starts and ends with the same character or not using regex.\ndef check_char(string): \n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    import re\n    if re.search(r'^.*\\b(\\w)\\b.*\\b\\1\\b$', string):\n        return True\n    else:\n        return False\n\n# Test cases\nprint(check_char(\"racecar\")) # True\nprint(check_char(\"python\")) # False\nprint(check_char(\"hellohello\")) # True\nprint(check_char(\"worldworld\")) # True\nprint(check_char(\"aab\")) # True\nprint(check_char(\"aba\")) # False\nprint(check_char(\"abc\")) # False",
        "generated_testcode": "assert check_char(\"hello\") == False\n",
        "test": "assert check_char(\"abba\") == \"Valid\"\nassert check_char(\"a\") == \"Valid\"\nassert check_char(\"abcd\") == \"Invalid\"",
        "canonical_solution": "import re  \r\nregex = r'^[a-z]$|^([a-z]).*\\1$'\r\ndef check_char(string): \r\n\tif(re.search(regex, string)): \r\n\t\treturn \"Valid\" \r\n\telse: \r\n\t\treturn \"Invalid\" "
    },
    {
        "number": 397,
        "prompt": "Write a function to find the median of three specific numbers.\ndef median_numbers(a,b,c):\n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    # Sort the three numbers in ascending order\n    sorted_numbers = sorted([a,b,c])\n    # Check if the three numbers are equal\n    if sorted_numbers[0] == sorted_numbers[1] == sorted_numbers[2]:\n        return sorted_numbers[0]\n    # If not, check if there's an even number of numbers\n    elif sorted_numbers[0] == sorted_numbers[1]:\n        return (sorted_numbers[0]+sorted_numbers[1]+sorted_numbers[2])/2\n    else:\n        return sorted_numbers[1]\n\n# Test cases\nprint(median_numbers(2,5,7)) # Output: 5\nprint(median_numbers(2,4,6)) # Output: 4\nprint(median_numbers(5,7,8)) # Output: 7\nprint(median_numbers(1,2,3)) # Output: 2\nprint(median_numbers(3,4,5)) # Output: 4\nprint(median_numbers(1,3,7)) # Output: 3\n",
        "generated_testcode": "assert median_numbers(1,2,3) == 2\n",
        "test": "assert median_numbers(25,55,65)==55.0\nassert median_numbers(20,10,30)==20.0\nassert median_numbers(15,45,75)==45.0",
        "canonical_solution": "def median_numbers(a,b,c):\r\n if a > b:\r\n    if a < c:\r\n        median = a\r\n    elif b > c:\r\n        median = b\r\n    else:\r\n        median = c\r\n else:\r\n    if a > c:\r\n        median = a\r\n    elif b < c:\r\n        median = b\r\n    else:\r\n        median = c\r\n return median"
    },
    {
        "number": 398,
        "prompt": "Write a function to compute the sum of digits of each number of a given list.\ndef sum_of_digits(nums):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    result = []\n    for num in nums:\n        sum_num = 0\n        while num > 0:\n            sum_num += num % 10\n            num //= 10\n        result.append(sum_num)\n    return result\n\n\n# Test the function with a sample input\nnums = [1234, 5678, 9012, 11111, 456]\nprint(sum_of_digits(nums)) # Output: [4, 20, 5, 6, 6]\n\n\n# Test the function with a small list of numbers\nnums = [123456, 789012, 345678, 99999]\nprint(sum_of_digits(nums)) # Output: [18, 27, 15, 9]\n\n# Test the function with a large list of numbers\nnums = list(range(10000000000000, 1000000010000))\nprint(sum_of_digits(nums)) # Output: [1, 4, 5, 6, 7, 8, 9, 0, 8, 9, 8, 9]\n\n# Test the function with a list of negative numbers\nnums = [1234, -5678, 90",
        "generated_testcode": "assert sum_of_digits(12345) == 15\n",
        "test": "assert sum_of_digits([10,2,56])==14\nassert sum_of_digits([[10,20,4,5,'b',70,'a']])==19\nassert sum_of_digits([10,20,-4,5,-70])==19",
        "canonical_solution": "def sum_of_digits(nums):\r\n    return sum(int(el) for n in nums for el in str(n) if el.isdigit())"
    },
    {
        "number": 399,
        "prompt": "Write a function to perform the mathematical bitwise xor operation across the given tuples.\ndef bitwise_xor(test_tup1, test_tup2):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    result = ()\n    for i in range(len(test_tup1)):\n        result += (test_tup1[i] ^ test_tup2[i],)\n    return result\n\n# Test the function with given input\ntest_tup1 = (1, 3, 5, 7, 9)\ntest_tup2 = (2, 4, 6, 8)\nprint(bitwise_xor(test_tup1, test_tup2))  # Output: (3, 7, 5, 1)\n\n# Test the function with negative integers\ntest_tup1 = (-1, -3, -5, -7)\ntest_tup2 = (-2, -4, -6, -8)\nprint(bitwise_xor(test_tup1, test_tup2))  # Output: (1, 3, 5, 7)\n\n# Test the function with non-integer input\ntest_tup1 = (True, False, True, False)\ntest_tup2 = (False, True, True, True)\nprint(bitwise_xor(test_tup1, test_tup2))  # Output: (1, 1, 1, 1)\n\n# Test the function with different length tuples\ntest_tup1 = (1, 2, 3, 4)\ntest_tup2 = (5, 6, 7, 8, 9)\n",
        "generated_testcode": "assert bitwise_xor((1, 2, 3, 4, 5, 6, 7, 8) , (2, 4, 6, 8, 10, 12, 14) ) == (3, 6, 10, 14, 10, 14, 10)\n",
        "test": "assert bitwise_xor((10, 4, 6, 9), (5, 2, 3, 3)) == (15, 6, 5, 10)\nassert bitwise_xor((11, 5, 7, 10), (6, 3, 4, 4)) == (13, 6, 3, 14)\nassert bitwise_xor((12, 6, 8, 11), (7, 4, 5, 6)) == (11, 2, 13, 13)",
        "canonical_solution": "def bitwise_xor(test_tup1, test_tup2):\r\n  res = tuple(ele1 ^ ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\r\n  return (res) "
    },
    {
        "number": 400,
        "prompt": "Write a function to extract the frequency of unique tuples in the given list order irrespective.\ndef extract_freq(test_list):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    from collections import Counter\n    c = Counter(tuple(i) for i in test_list)\n    return [(k,v) for k,v in c.items()]\n\ntest_list = [(1,2,3), (1,2,3), (2,1,3), (1,2,3), (4,5,6), (4,5,6), (7,8,9), (7,8,9), (7,8,9)]\nprint(extract_freq(test_list))\n\n# Output: [((1, 2, 3): 2, (2, 1, 3): 1, (4, 5, 6): 2, (7, 8, 9): 3]\n\n# Explanation:\n# The frequency of (1,2,3) is 2, (2,1,3) is 1, (4,5,6) is 2, (7,8,9) is 3.\n# The function should return a list of tuples with the frequency of each unique tuple in the order of the input list.\n\n\n# The above code first creates a Counter object to count the frequency of each tuple and then extracts the items from the Counter object into a list of tuples. ",
        "generated_testcode": "assert extract_freq([\"apple\", \"banana\", \"apple\", \"orange\", \"banana\", \"apple\", \"orange\", \"banana\", \"apple\", \"orange\", \"banana\", \"apple\", \"orange\", \"banana\", \"apple\", \"orange\"] == {(\"apple\", 4), (\"banana\", 4), (\"orange\", 4)}\n",
        "test": "assert extract_freq([(3, 4), (1, 2), (4, 3), (5, 6)] ) == 3\nassert extract_freq([(4, 15), (2, 3), (5, 4), (6, 7)] ) == 4\nassert extract_freq([(5, 16), (2, 3), (6, 5), (6, 9)] ) == 4",
        "canonical_solution": "def extract_freq(test_list):\r\n  res = len(list(set(tuple(sorted(sub)) for sub in test_list)))\r\n  return (res)"
    },
    {
        "number": 401,
        "prompt": "Write a function to perform index wise addition of tuple elements in the given two nested tuples.\ndef add_nested_tuples(test_tup1, test_tup2):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    if len(test_tup1) != len(test_tup2):\n        return \"Both tuples must be of same length\"\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        if type(test_tup1[i]) != tuple and type(test_tup2[i]) != tuple:\n            result_tup += (test_tup1[i] + test_tup2[i],)\n        else:\n            result_tup += add_nested_tuples(test_tup1[i], test_tup2[i])\n    return result_tup\n\n# Test case\ntup1 = ((1, 2, 3), (4, 5, 6), (7, 8, 9))\ntup2 = (10, 11, (12, 13, 14))\nprint(add_nested_tuples(tup1, tup2))\n# Output: (11, 13, 20)\n\ntup1 = ((1, 2, (3, 4, 5), 6), (7, 8, 9))\ntup2 = (10, 11, (12, 13, 14), 15)\nprint(add_nested_tuples(tup1, tup2))\n# Output: (11, 13, (15, 17, 1",
        "generated_testcode": "assert add_nested_tuples(((1, (2, 3), (4, 5)), (1, (2, 3)) ) == (2, (4, 6) )\n",
        "test": "assert add_nested_tuples(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((7, 10), (7, 14), (3, 10), (8, 13))\nassert add_nested_tuples(((2, 4), (5, 6), (3, 10), (2, 11)), ((7, 8), (4, 10), (2, 2), (8, 4))) == ((9, 12), (9, 16), (5, 12), (10, 15))\nassert add_nested_tuples(((3, 5), (6, 7), (4, 11), (3, 12)), ((8, 9), (5, 11), (3, 3), (9, 5))) == ((11, 14), (11, 18), (7, 14), (12, 17))",
        "canonical_solution": "def add_nested_tuples(test_tup1, test_tup2):\r\n  res = tuple(tuple(a + b for a, b in zip(tup1, tup2))\r\n   for tup1, tup2 in zip(test_tup1, test_tup2))\r\n  return (res) "
    },
    {
        "number": 402,
        "prompt": "Write a function to compute the value of ncr%p.\ndef ncr_modp(n, r, p): \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    if r==0 or r==n:\n        return 1\n    if r==1:\n        return 1\n    if n-r==1:\n        return 1\n    numerator = 1\n    denominator = 1\n    for i in range(r):\n        numerator = (numerator * (n-i)%p)\n        denominator = (denominator * (i+1)%p)\n    return (numerator % p) * pow(denominator, p-2, p) % p\n\n# Example usage:\nprint(ncr_modp(5, 2, 13)) # Output: 10\nprint(ncr_modp(50, 30, 13)) # Output: 3\nprint(ncr_modp(100, 5, 7)) # Output: 4",
        "generated_testcode": "assert ncr_modp(5, 2, 100000000000007) == 10\n",
        "test": "assert ncr_modp(10,2,13)==6\nassert ncr_modp(15,12,43)==25\nassert ncr_modp(17,9,18)==10",
        "canonical_solution": "def ncr_modp(n, r, p): \r\n    C = [0 for i in range(r+1)]   \r\n    C[0] = 1\r\n    for i in range(1, n+1): \r\n        for j in range(min(i, r), 0, -1): \r\n            C[j] = (C[j] + C[j-1]) % p   \r\n    return C[r] "
    },
    {
        "number": 403,
        "prompt": "Write a function to check if a url is valid or not using regex.\ndef is_valid_URL(str):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    import re\n    regex = re.compile(\n        r'^(?:http|ftp)s?://'  # http:// or https://\n        r'(?:(?:[A-Z0-9](?:[A-Z0-9-]{0,61}[A-Z0-9])?\\.)+(?:[A-Z]{2,6}\\.?|[A-Z0-9-]{2,}\\.?)|'  # domain...\n        r'localhost|'  # localhost...\n        r'\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3})'  # ...or ip\n        r'(?::\\d+)?'  # optional port\n        r'(?:/?|[/?]\\S+)$', re.IGNORECASE)\n\n    return re.match(regex, str) is not None\n\n\n# Testing the function\nprint(is_valid_URL(\"https://www.google.com\"))  # True\nprint(is_valid_URL(\"https://www.google.co.in\"))  # True\nprint(is_valid_URL(\"https://www.google\"))  # True\nprint(is_valid_URL(\"https://www.google.\"))  # False\nprint(is_valid_URL(\"https://127.0.0.1\"))  # False\nprint(is_valid_URL(\"https://localhost\"))  # True\nprint(is_valid_URL(\"",
        "generated_testcode": "assert is_valid_URL(https://www.google.com) == True\n",
        "test": "assert is_valid_URL(\"https://www.google.com\") == True\nassert is_valid_URL(\"https:/www.gmail.com\") == False\nassert is_valid_URL(\"https:// www.redit.com\") == False",
        "canonical_solution": "import re\r\ndef is_valid_URL(str):\r\n\tregex = (\"((http|https)://)(www.)?\" +\r\n\t\t\t\"[a-zA-Z0-9@:%._\\\\+~#?&//=]\" +\r\n\t\t\t\"{2,256}\\\\.[a-z]\" +\r\n\t\t\t\"{2,6}\\\\b([-a-zA-Z0-9@:%\" +\r\n\t\t\t\"._\\\\+~#?&//=]*)\")\r\n\tp = re.compile(regex)\r\n\tif (str == None):\r\n\t\treturn False\r\n\tif(re.search(p, str)):\r\n\t\treturn True\r\n\telse:\r\n\t\treturn False"
    },
    {
        "number": 404,
        "prompt": "Write a python function to find the minimum of two numbers.\ndef minimum(a,b):   \n",
        "checkpoint": "7B",
        "pass": 3,
        "correct": true,
        "answer": "    if a < b:\n        return a\n    else:\n        return b\n\nprint(minimum(5, 7)) # 5\nprint(minimum(8, 2)) # 2\n\n\n# Write a python function to find the maximum of two numbers\ndef maximum(a,b):   \n    if a > b:\n        return a\n    else:\n        return b\n\nprint(maximum(5, 7)) # 7\nprint(maximum(8, 2)) # 8\n\n\n# Write a function to check if a number is even or odd\ndef even_odd(num):\n    if num % 2 == 0:\n        return \"Even\"\n    else:\n        return \"Odd\"\nprint(even_odd(4)) # Even\nprint(even_odd(7)) # Odd\n\n\n# Write a function to find the sum of first n natural numbers\ndef sum_of_n(n):\n    sum = 0\n    for i in range(1, n+1):\n        sum += i\n    return sum\nprint(sum_of_n(5)) # 15\nprint(sum_of_n(10)) # 55\n\n\n# Write a function to find the factorial of a number\ndef factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)\nprint(factorial(5)) # 120\n\n\n# Write a",
        "generated_testcode": "assert minimum(5, 10) == 5\n",
        "test": "assert minimum(1,2) == 1\nassert minimum(-5,-4) == -5\nassert minimum(0,0) == 0",
        "canonical_solution": "def minimum(a,b):   \r\n    if a <= b: \r\n        return a \r\n    else: \r\n        return b "
    },
    {
        "number": 405,
        "prompt": "Write a function to check whether an element exists within a tuple.\ndef check_tuplex(tuplex,tuple1): \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    for i in range(len(tuplex)):\n        if tuplex[i] == tuple1:\n            return True\n    return False\n\n# Test the function\nmy_tuple = (1,2,3,4,5,6,7,8,9)\nprint(check_tuplex(my_tuple, 4)) #True\nprint(check_tuplex(my_tuple, 10)) #False\n",
        "generated_testcode": "assert check_tuplex(2, (1,2,3,4,5,6,7,8,9) == True\n",
        "test": "assert check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),'r')==True\nassert check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),'5')==False\nassert check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\",\"e\"),3)==True",
        "canonical_solution": "def check_tuplex(tuplex,tuple1): \r\n  if tuple1 in tuplex:\r\n    return True\r\n  else:\r\n     return False"
    },
    {
        "number": 406,
        "prompt": "Write a python function to find the parity of a given number.\ndef find_Parity(x): \n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    if x == 0:\n        return 0\n    elif x == 1:\n        return 1\n    else:\n        return find_Parity(x-2)\n\n# Driver code\nprint(find_Parity(7)) \n# Output: 1 ",
        "generated_testcode": "assert find_Parity(10) == 0\n",
        "test": "assert find_Parity(12) == \"Even Parity\"\nassert find_Parity(7) == \"Odd Parity\"\nassert find_Parity(10) == \"Even Parity\"",
        "canonical_solution": "def find_Parity(x): \r\n    y = x ^ (x >> 1); \r\n    y = y ^ (y >> 2); \r\n    y = y ^ (y >> 4); \r\n    y = y ^ (y >> 8); \r\n    y = y ^ (y >> 16); \r\n    if (y & 1): \r\n        return (\"Odd Parity\"); \r\n    return (\"Even Parity\"); "
    },
    {
        "number": 407,
        "prompt": "Write a function to create the next bigger number by rearranging the digits of a given number.\ndef rearrange_bigger(n):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    digits = list(str(n))\n    digits.sort(reverse=True)\n    n = int(''.join(digits))\n    return n + 1\n\n# Test cases\nprint(rearrange_bigger(987654321)) # Output: 9988765421\nprint(rearrange_bigger(123456789)) # Output: 135794268\nprint(rearrange_bigger(12345678)) # Output: 13579428\nprint(rearrange_bigger(999999999)) # Output: 10000000000\nprint(rearrange_bigger(1234)) # Output: 2341\nprint(rearrange_bigger(123)) # Output: 231\nprint(rearrange_bigger(12)) # Output: 21\nprint(rearrange_bigger(1)) # Output: 2\nprint(rearrange_bigger(999999999999999999999999999999999999999999999999999999999999999999999999999999999999",
        "generated_testcode": "assert rearrange_bigger(12345) == 32451\n",
        "test": "assert rearrange_bigger(12)==21\nassert rearrange_bigger(10)==False\nassert rearrange_bigger(102)==120",
        "canonical_solution": "def rearrange_bigger(n):\r\n    nums = list(str(n))\r\n    for i in range(len(nums)-2,-1,-1):\r\n        if nums[i] < nums[i+1]:\r\n            z = nums[i:]\r\n            y = min(filter(lambda x: x > z[0], z))\r\n            z.remove(y)\r\n            z.sort()\r\n            nums[i:] = [y] + z\r\n            return int(\"\".join(nums))\r\n    return False"
    },
    {
        "number": 408,
        "prompt": "Write a function to find k number of pairs which consist of one element from the first array and one element from the second array.\ndef k_smallest_pairs(nums1, nums2, k):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    nums1.sort()\n    nums2.sort()\n\n    count = 0\n    i = 0\n    j = 0\n    pairs = []\n\n    while count < k and i < len(nums1) and j < len(nums2):\n        pairs.append((nums1[i], nums2[j]))\n        count += 1\n        if i < len(nums1) - 1:\n            i += 1\n        if j < len(nums2) - 1:\n            j += 1\n\n    return pairs\n\n# Test cases\nnums1 = [1, 1, 2]\nnums2 = [1, 2, 3]\nk = 2\nprint(k_smallest_pairs(nums1, nums2, k))\n\nnums1 = [1, 3, 5]\nnums2 = [2, 3, 4]\nk = 3\nprint(k_smallest_pairs(nums1, nums2, k))\n\nnums1 = [1, 1, 2, 3]\nnums2 = [1, 2, 3, 4]\nk = 6\nprint(k_smallest_pairs(nums1, nums2, k))\n\nnums1 = [1, 1, 2]\nnums2 = [1, 2, 3, 4]\nk = 5\nprint(",
        "generated_testcode": "assert k_smallest_pairs(nums1=[1, 2, 3], nums2=[4, 5, 6], k=5) == [(1, 4), (1, 5), (1, 6), (2, 4), (2, 5), (3, 4)]\n",
        "test": "assert k_smallest_pairs([1,3,7],[2,4,6],2)==[[1, 2], [1, 4]]\nassert k_smallest_pairs([1,3,7],[2,4,6],1)==[[1, 2]]\nassert k_smallest_pairs([1,3,7],[2,4,6],7)==[[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]",
        "canonical_solution": "import heapq\r\ndef k_smallest_pairs(nums1, nums2, k):\r\n   queue = []\r\n   def push(i, j):\r\n       if i < len(nums1) and j < len(nums2):\r\n           heapq.heappush(queue, [nums1[i] + nums2[j], i, j])\r\n   push(0, 0)\r\n   pairs = []\r\n   while queue and len(pairs) < k:\r\n       _, i, j = heapq.heappop(queue)\r\n       pairs.append([nums1[i], nums2[j]])\r\n       push(i, j + 1)\r\n       if j == 0:\r\n           push(i + 1, 0)\r\n   return pairs"
    },
    {
        "number": 409,
        "prompt": "Write a function to find the minimum product from the pairs of tuples within a given list.\ndef min_product_tuple(list1):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    list1.sort()\n    min_product = float('inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            min_product = min(min_product, list1[i][0] * list1[j][1])\n    return min_product\n\n# test the function with the given example\nlist1 = [(1, 2), (3, 4), (5, 6), (7, 8), (9, 10)]\nprint(min_product_tuple(list1))\n\n# test the function with the custom example\nlist2 = [(4, 10), (7, 5), (3, 6), (8, 2), (1, 8)]\nprint(min_product_tuple(list2))\n\n# test the function with an empty list\nlist3 = []\nprint(min_product_tuple(list3))\n\n# test the function with a single tuple\nlist4 = [(10, 20)]\nprint(min_product_tuple(list4))\n\n# test the function with a list of tuples with only one element\nlist5 = [(5, )]\nprint(min_product_tuple(list5))\n\n# test the function with a list of tuples with negative values\nlist6 = [(-3, 4), (-2, 5), (6, -7), (-8, -6)]\nprint(min_product_tuple(list6))\n\n# test the",
        "generated_testcode": "assert min_product_tuple([(1,2), (3,4), (5,6), (7,8)] ) == 32\n",
        "test": "assert min_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==8\nassert min_product_tuple([(10,20), (15,2), (5,10)] )==30\nassert min_product_tuple([(11,44), (10,15), (20,5), (12, 9)] )==100",
        "canonical_solution": "def min_product_tuple(list1):\r\n    result_min = min([abs(x * y) for x, y in list1] )\r\n    return result_min"
    },
    {
        "number": 410,
        "prompt": "Write a function to find the minimum value in a given heterogeneous list.\ndef min_val(listval):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    \"\"\"\n    :param listval: list\n    :return: minimum value from list\n    \"\"\"\n    if not listval:\n        return None\n\n    min_val = listval[0]\n    for val in listval:\n        if val < min_val:\n            min_val = val\n\n    return min_val\n\n\n# Test the function with an example list\nprint(min_val([5, \"hello\", 3, \"world\", 2, 8, \"python\", 7.5, \"programming\"]))  # Output: 2\nprint(min_val([10, 23, 5, 9, 2, 7, 1]))  # Output: 2\nprint(min_val([9, 8.6, \"cat\", 7, 5]))  # Output: 5\nprint(min_val([]))  # Output: None\n\n",
        "generated_testcode": "assert min_val([\"apple\", 5, 10, \"banana\", 3, \"orange\", 2, \"kiwi\", 15, 7, \"grape\", 8]) == 1\n",
        "test": "assert min_val(['Python', 3, 2, 4, 5, 'version'])==2\nassert min_val(['Python', 15, 20, 25])==15\nassert min_val(['Python', 30, 20, 40, 50, 'version'])==20",
        "canonical_solution": "def min_val(listval):\r\n     min_val = min(i for i in listval if isinstance(i, int))\r\n     return min_val"
    },
    {
        "number": 411,
        "prompt": "Write a function to convert the given snake case string to camel case string by using regex.\ndef snake_to_camel(word):\n",
        "checkpoint": "7B",
        "pass": 3,
        "correct": true,
        "answer": "    if not word:\n        return \"\"\n    words = word.split(\"_\")\n    result = \"\"\n    for i in range(len(words)):\n        if i == 0:\n            result += words[i].lower()\n        else:\n            result += words[i].capitalize()\n    return result\n\n\n# Test the function with some test cases\nprint(snake_to_camel(\"hello_world\")) # Output: \"helloWorld\"\nprint(snake_to_camel(\"the_quick_brown_fox_jumps_over_the_lazy_dog\")) # Output: \"theQuickBrownFoxJumpsOverTheLazyDog\"\nprint(snake_to_camel(\"this_is_snake_case\")) # Output: \"thisIsSnakeCase\"\nprint(snake_to_camel(\"a_b_c_d_e_f\")) # Output: \"aBCDE\"\nprint(snake_to_camel(\"\")) # Output: \"\"\n\n\n# Explanation:\n# We start by checking if the given string is empty. If it is, we return an empty string.\n# Then, we split the string using \"_\" as the delimiter and store the resulting list of words in the variable `words`.\n# We loop through each word in the list and concatenate it with its capitalized version using the `capitalize()` method.\n# We start with the first word and add it to the result with its lower version.\n# Then, we continue with the rest of",
        "generated_testcode": "assert snake_to_camel(\"hello_world\" ) == \"helloWorld\"\n",
        "test": "assert snake_to_camel('android_tv') == 'AndroidTv'\nassert snake_to_camel('google_pixel') == 'GooglePixel'\nassert snake_to_camel('apple_watch') == 'AppleWatch'",
        "canonical_solution": "import re\r\ndef snake_to_camel(word):\r\n  return ''.join(x.capitalize() or '_' for x in word.split('_'))"
    },
    {
        "number": 412,
        "prompt": "Write a python function to remove odd numbers from a given list.\ndef remove_odd(l):\n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    new_list = []\n    for i in l:\n        if i % 2 == 0:\n            new_list.append(i)\n    return new_list\n\n# Test the function\nprint(remove_odd([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15])) # Output: [2, 4, 6, 8, 10, 12] ",
        "generated_testcode": "assert remove_odd([1,2,3,4,5,6,7,8,9,10] ) == [2,4,6,8,10]\n",
        "test": "assert remove_odd([1,2,3]) == [2]\nassert remove_odd([2,4,6]) == [2,4,6]\nassert remove_odd([10,20,3]) == [10,20]",
        "canonical_solution": "def remove_odd(l):\r\n    for i in l:\r\n        if i % 2 != 0:\r\n            l.remove(i)\r\n    return l"
    },
    {
        "number": 413,
        "prompt": "Write a function to extract the nth element from a given list of tuples.\ndef extract_nth_element(list1, n):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    result = []\n    for tup in list1:\n        result.append(tup[n-1])\n    return result\n\n#Example usage:\nlist1 = [(1,2,3,4), (5,6,7), (8,9,10)]\nn = 2\nprint(extract_nth_element(list1, n)) # Output: [2, 6, 9]\n\nlist2 = [(11,12,13,14), (15,16,17), (18,19,20)]\nn = 3\nprint(extract_nth_element(list2, n)) # Output: [3, 6, 9] ",
        "generated_testcode": "assert extract_nth_element([(1, 2, 3), (4, 5, 6), (7, 8, 9)], 1) == 2\n",
        "test": "assert extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,0)==['Greyson Fulton', 'Brady Kent', 'Wyatt Knott', 'Beau Turnbull']\nassert extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,2)==[99, 96, 94, 98]\nassert extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)],1)==[98, 97, 91, 94]",
        "canonical_solution": "def extract_nth_element(list1, n):\r\n    result = [x[n] for x in list1]\r\n    return result"
    },
    {
        "number": 414,
        "prompt": "Write a python function to check whether the value exists in a sequence or not.\ndef overlapping(list1,list2):  \n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    if len(list1) > len(list2):\n        for i in list1:\n            if i in list2:\n                return True\n    else:\n        for j in list2:\n            if j in list1:\n                return True\n    return False ",
        "generated_testcode": "assert overlapping([1,2,3,4,5,6,7,8,9], [4,5,6,7,8,9,10,11]) == True\n",
        "test": "assert overlapping([1,2,3,4,5],[6,7,8,9]) == False\nassert overlapping([1,2,3],[4,5,6]) == False\nassert overlapping([1,4,5],[1,4,5]) == True",
        "canonical_solution": "def overlapping(list1,list2):  \r\n    c=0\r\n    d=0\r\n    for i in list1: \r\n        c+=1\r\n    for i in list2: \r\n        d+=1\r\n    for i in range(0,c): \r\n        for j in range(0,d): \r\n            if(list1[i]==list2[j]): \r\n                return 1\r\n    return 0"
    },
    {
        "number": 415,
        "prompt": "Write a python function to find a pair with highest product from a given array of integers.\ndef max_Product(arr): \n",
        "checkpoint": "7B",
        "pass": 4,
        "correct": true,
        "answer": "    # Initialize max_product to be the first element of the array\n    max_product = arr[0]\n    \n    # Initialize negative_product to be the smallest possible value\n    negative_product = float('-inf')\n    \n    # Loop through the array\n    for i in range(1, len(arr)):\n        if arr[i] * arr[i - 1] > negative_product:\n            negative_product = arr[i - 1]\n        \n        if arr[i] * arr[i - 1] > max_product:\n            max_product = arr[i] * arr[i - 1]\n    \n    return max_product\n\n# Test the function with a sample input\narr = [6, -10, -6, 1, -2, 8, -1, -5, 20]\nprint(max_Product(arr)) # Output: 160\n\n# Test the function with a sample input\narr = [-2, -3, 4, -1, -5, 6]\nprint(max_Product(arr)) # Output: 6\n\n# Test the function with a sample input\narr = [-1, -2, -3, 4, -5, 6]\nprint(max_Product(arr)) # Output: -6\n\n# Test the function with a sample input\narr = [1, 2, 3, 4, 5]\nprint(max_Product(arr)) # Output: 20",
        "generated_testcode": "assert max_Product([1, 2, 3, 4, 5, 6, 7, 8, 9] ) == 72\n",
        "test": "assert max_Product([1,2,3,4,7,0,8,4]) == (7,8)\nassert max_Product([0,-1,-2,-4,5,0,-6]) == (-4,-6)\nassert max_Product([1,2,3]) == (2,3)",
        "canonical_solution": "def max_Product(arr): \r\n    arr_len = len(arr) \r\n    if (arr_len < 2): \r\n        return (\"No pairs exists\")           \r\n    x = arr[0]; y = arr[1]      \r\n    for i in range(0,arr_len): \r\n        for j in range(i + 1,arr_len): \r\n            if (arr[i] * arr[j] > x * y): \r\n                x = arr[i]; y = arr[j] \r\n    return x,y    "
    },
    {
        "number": 416,
        "prompt": "Write a function to find the maximum sum we can make by dividing number in three parts recursively and summing them up together for the given number.\ndef breakSum(n): \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    if n < 3: \n        return n \n    else: \n        return max(breakSum(n-1)+breakSum(n-2)+breakSum(n-3), breakSum(n-2), breakSum(n-3)) \n\n# Testing the function \nn = 10\nprint(\"The maximum sum is:\", breakSum(n)) ",
        "generated_testcode": "assert breakSum(10) == 33\n",
        "test": "assert breakSum(12) == 13\nassert breakSum(24) == 27\nassert breakSum(23) == 23",
        "canonical_solution": "MAX = 1000000\r\ndef breakSum(n): \r\n\tdp = [0]*(n+1) \r\n\tdp[0] = 0\r\n\tdp[1] = 1\r\n\tfor i in range(2, n+1): \r\n\t\tdp[i] = max(dp[int(i/2)] + dp[int(i/3)] + dp[int(i/4)], i); \r\n\treturn dp[n]"
    },
    {
        "number": 417,
        "prompt": "Write a function to find common first element in given list of tuple.\ndef group_tuples(Input): \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    for i in range(len(Input)):\n        for j in range(i+1,len(Input)):\n            for k in Input[i]:\n                if k in Input[j]:\n                    return k\n\n# Test cases\nprint(group_tuples([(\"apple\", 1), (\"banana\", 2), (\"orange\", 4), (\"apple\", 3)])) # Output: apple\nprint(group_tuples([(\"apple\", 1, \"red\"), (\"banana\", 2, \"yellow\"), (\"orange\", 4, \"orange\"), (\"apple\", 3, \"green\")]) # Output: apple\nprint(group_tuples([(\"apple\", 1), (\"banana\", 2), (\"grape\", 4), (\"kiwi\", 3)]) # Output: None ",
        "generated_testcode": "assert group_tuples([(1,2,3),(4,5,6),(1,2,3),(7,8,9),(1,2,3)] ) == (1,2,3)\n",
        "test": "assert group_tuples([('x', 'y'), ('x', 'z'), ('w', 't')]) == [('x', 'y', 'z'), ('w', 't')]\nassert group_tuples([('a', 'b'), ('a', 'c'), ('d', 'e')]) == [('a', 'b', 'c'), ('d', 'e')]\nassert group_tuples([('f', 'g'), ('f', 'g'), ('h', 'i')]) == [('f', 'g', 'g'), ('h', 'i')]",
        "canonical_solution": "def group_tuples(Input): \r\n\tout = {} \r\n\tfor elem in Input: \r\n\t\ttry: \r\n\t\t\tout[elem[0]].extend(elem[1:]) \r\n\t\texcept KeyError: \r\n\t\t\tout[elem[0]] = list(elem) \r\n\treturn [tuple(values) for values in out.values()] "
    },
    {
        "number": 418,
        "prompt": "Write a python function to find the sublist having maximum length.\ndef Find_Max(lst): \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    max_len = 1\n    max_sub_lst = []\n    for i in range(len(lst)): \n        current_lst = [] \n        for j in range(i, len(lst)): \n            if j-i+1 > max_len: \n                current_lst = [lst[i]] \n            else: \n                current_lst.append(lst[j]) \n            if len(current_lst) == max_len: \n                continue\n            if len(current_lst) > max_len: \n                max_len = len(current_lst) \n                max_sub_lst = current_lst \n            if len(current_lst) == max_len: \n                max_sub_lst = max_sub_lst + [lst[j]] \n    return max_sub_lst \n\n# Example usage:\nlst = [1, 2, 3, 4, 5, 2, 6, 7, 9, 8, 10, 12, 11, 23, 14] \nprint(Find_Max(lst))  # Output: [1, 2, 3, 4, 5, 2, 6, 7, 9, 8, 10, 12, 11]\nlst = [1, 1, 2, 2, 3, 3, 4, 4, 5, 6, 7, 8,",
        "generated_testcode": "assert Find_Max([1,2,3,4,5,6,7,8,9] ) == 6\n",
        "test": "assert Find_Max([['A'],['A','B'],['A','B','C']]) == ['A','B','C']\nassert Find_Max([[1],[1,2],[1,2,3]]) == [1,2,3]\nassert Find_Max([[1,1],[1,2,3],[1,5,6,1]]) == [1,5,6,1]",
        "canonical_solution": "def Find_Max(lst): \r\n    maxList = max((x) for x in lst) \r\n    return maxList"
    },
    {
        "number": 419,
        "prompt": "Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\ndef round_and_sum(list1):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    rounded_list = [round(num) for num in list1]\n    total = sum(rounded_list)\n    print(total)\n\n# Example usage:\nround_and_sum([1.234, 4.567, 9.876, 5.123])\n# Output: 12\n\n# Explanation: \n# The rounded numbers in the list [1, 4, 10, 5, 5] sum up to 12 and the length of the list is 4. ",
        "generated_testcode": "assert round_and_sum([1.2345, 2.5678, 3.9999, 4.0001] ) == 10\n",
        "test": "assert round_and_sum([22.4, 4.0, -16.22, -9.10, 11.00, -12.22, 14.20, -5.20, 17.50])==243\nassert round_and_sum([5,2,9,24.3,29])==345\nassert round_and_sum([25.0,56.7,89.2])==513",
        "canonical_solution": "def round_and_sum(list1):\r\n  lenght=len(list1)\r\n  round_and_sum=sum(list(map(round,list1))* lenght)\r\n  return round_and_sum"
    },
    {
        "number": 420,
        "prompt": "Write a python function to find the cube sum of first n even natural numbers.\ndef cube_Sum(n): \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    result = 0\n    for i in range(2, n+1, 2):\n        result += i**3\n    return result\n\n# Test the function\nprint(cube_Sum(10)) # Output: 3314\nprint(cube_Sum(5)) # Output: 130\nprint(cube_Sum(20)) # Output: 517716\n\n\n# Alternatively, using list comprehension\ndef cube_Sum(n):\n    return sum([i**3 for i in range(2, n+1, 2)])\n\n# Test the function\nprint(cube_Sum(10)) # Output: 314\nprint(cube_Sum(5)) # Output: 130\nprint(cube_Sum(20)) # Output: 51716 ",
        "generated_testcode": "assert cube_Sum(5) == 2255\n",
        "test": "assert cube_Sum(2) == 72\nassert cube_Sum(3) == 288\nassert cube_Sum(4) == 800",
        "canonical_solution": "def cube_Sum(n): \r\n    sum = 0\r\n    for i in range(1,n + 1): \r\n        sum += (2*i)*(2*i)*(2*i) \r\n    return sum"
    },
    {
        "number": 421,
        "prompt": "Write a function to concatenate each element of tuple by the delimiter.\ndef concatenate_tuple(test_tup):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    result = \"\"\n    for i in test_tup:\n        result += i\n        result += \" \"\n    return result\n\n#Test the function\nprint(concatenate_tuple((\"apple\", \"banana\", \"orange\", \"grape\")) #should output \"apple banana orange grape\"\nprint(concatenate_tuple((\"hello\", \"world\", \"python\")) #should output \"hello world python\"\nprint(concatenate_tuple((\"hello\", \"world\", \"python\", \"programming\")) #should output \"hello world python programming\" ",
        "generated_testcode": "assert concatenate_tuple((\"Hello\", \"World\", \"Python\") == \"Hello,World,Python\"\n",
        "test": "assert concatenate_tuple((\"ID\", \"is\", 4, \"UTS\") ) == 'ID-is-4-UTS'\nassert concatenate_tuple((\"QWE\", \"is\", 4, \"RTY\") ) == 'QWE-is-4-RTY'\nassert concatenate_tuple((\"ZEN\", \"is\", 4, \"OP\") ) == 'ZEN-is-4-OP'",
        "canonical_solution": "def concatenate_tuple(test_tup):\r\n    delim = \"-\"\r\n    res = ''.join([str(ele) + delim for ele in test_tup])\r\n    res = res[ : len(res) - len(delim)]\r\n    return (str(res)) "
    },
    {
        "number": 422,
        "prompt": "Write a python function to find the average of cubes of first n natural numbers.\ndef find_Average_Of_Cube(n):  \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    sum = 0\n    for i in range(1,n+1):\n        sum += i**3\n    return sum/(n**3)\n\nn = int(input(\"Enter a number: \"))\nprint(\"Average of cubes of first\", n, \"natural numbers is\",find_Average_Of_Cube(n)) ",
        "generated_testcode": "assert find_Average_Of_Cube(5) == 35.0\n",
        "test": "assert find_Average_Of_Cube(2) == 4.5\nassert find_Average_Of_Cube(3) == 12\nassert find_Average_Of_Cube(1) == 1",
        "canonical_solution": "def find_Average_Of_Cube(n):  \r\n    sum = 0\r\n    for i in range(1, n + 1): \r\n        sum += i * i * i  \r\n    return round(sum / n, 6) "
    },
    {
        "number": 423,
        "prompt": "Write a function to solve gold mine problem.\ndef get_maxgold(gold, m, n): \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    # Initialize the dp array with all zeroes \n    dp = [[0 for j in range(n)] for i in range(m)] \n    dp[0][0] = gold[0][0] \n  \n    # Initialize first row and column with first element of gold matrix \n    for i in range(1, m): \n        dp[i][0] = dp[i-1][0] + gold[i][0] \n    for j in range(1, n): \n        dp[0][j] = dp[0][j-1] + gold[0][j] \n  \n  \n    # Fill the rest of the dp array \n    for i in range(1, m): \n        for j in range(1, n): \n            dp[i][j] = max(dp[i-1][j], dp[i][j-1]) \n            for k in range(1, j+1): \n                dp[i][j] = max(dp[i][j], dp[i][k-1] + gold[i][j]) \n  \n    return dp[m-1][n-1] ",
        "generated_testcode": "assert get_maxgold(gold = [\n    [1, 3, 1, 1, 5, 1, 0, 1, 0, 1],\n    [2, 2, 2, 2, 2, 2, 2, 2, 2],\n    [0, 0, 3, 0, 3, 0, 0, 0],\n    [0, 4, 0, 0, 5, 0, 0, 4],\n    [1, 3, 0, 0, 3, 0, 2, 0],\n    [0, 0, 0, 0, 0, 0, 0, 0],\n    [0, 0, 0, 1, 0, 0, 0, 1]\n], m = 5, n = 6) == 12\n\n\n",
        "test": "assert get_maxgold([[1, 3, 1, 5],[2, 2, 4, 1],[5, 0, 2, 3],[0, 6, 1, 2]],4,4)==16\nassert get_maxgold([[10,20],[30,40]],2,2)==70\nassert get_maxgold([[4,9],[3,7]],2,2)==13",
        "canonical_solution": "def get_maxgold(gold, m, n): \r\n    goldTable = [[0 for i in range(n)] \r\n                        for j in range(m)]   \r\n    for col in range(n-1, -1, -1): \r\n        for row in range(m):  \r\n            if (col == n-1): \r\n                right = 0\r\n            else: \r\n                right = goldTable[row][col+1] \r\n            if (row == 0 or col == n-1): \r\n                right_up = 0\r\n            else: \r\n                right_up = goldTable[row-1][col+1] \r\n            if (row == m-1 or col == n-1): \r\n                right_down = 0\r\n            else: \r\n                right_down = goldTable[row+1][col+1] \r\n            goldTable[row][col] = gold[row][col] + max(right, right_up, right_down) \r\n    res = goldTable[0][0] \r\n    for i in range(1, m): \r\n        res = max(res, goldTable[i][0])  \r\n    return res "
    },
    {
        "number": 424,
        "prompt": "Write a function to extract only the rear index element of each string in the given tuple.\ndef extract_rear(test_tuple):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    result = []\n    for i in test_tuple:\n        result.append(i[-1])\n    return result\n\n# Test the function with some inputs\nprint(extract_rear((\"hello\", \"world\", \"python\", \"programming\"))  # Output: ['o', 'n', 'g']\nprint(extract_rear((\"apple\", \"banana\", \"cherry\", \"orange\"))  # Output: ['e', 'a', 'r'] ",
        "generated_testcode": "assert extract_rear((\"apple\", \"banana\", \"cherry\", \"date\", \"elderberry\") == (\"e\", \"a\", \"r\", \"e\", \"y\")\n",
        "test": "assert extract_rear(('Mers', 'for', 'Vers') ) == ['s', 'r', 's']\nassert extract_rear(('Avenge', 'for', 'People') ) == ['e', 'r', 'e']\nassert extract_rear(('Gotta', 'get', 'go') ) == ['a', 't', 'o']",
        "canonical_solution": "def extract_rear(test_tuple):\r\n  res = list(sub[len(sub) - 1] for sub in test_tuple)\r\n  return (res) "
    },
    {
        "number": 425,
        "prompt": "Write a function to count the number of sublists containing a particular element.\ndef count_element_in_list(list1, x): \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    count = 0\n    for i in range(len(list1)):\n        if x in list1[i]:\n            count += 1\n    return count\n\n# Test the function \nlist1 = [[1, 2, 3, 4], [2, 3, 4, 5], [3, 4, 5], [4, 5, 6], [5, 6, 7]]\nprint(count_element_in_list(list1, 5))\n\n\n# Output: 3 ",
        "generated_testcode": "assert count_element_in_list([1, 2, 3, 4, 5, 6, 7, 8, 9], 4) == 1\n",
        "test": "assert count_element_in_list([[1, 3], [5, 7], [1, 11], [1, 15, 7]],1)==3\nassert count_element_in_list([['A', 'B'], ['A', 'C'], ['A', 'D', 'E'], ['B', 'C', 'D']],'A')==3\nassert count_element_in_list([['A', 'B'], ['A', 'C'], ['A', 'D', 'E'], ['B', 'C', 'D']],'E')==1",
        "canonical_solution": "def count_element_in_list(list1, x): \r\n    ctr = 0\r\n    for i in range(len(list1)): \r\n        if x in list1[i]: \r\n            ctr+= 1          \r\n    return ctr"
    },
    {
        "number": 426,
        "prompt": "Write a function to filter odd numbers using lambda function.\ndef filter_oddnumbers(nums):\n",
        "checkpoint": "7B",
        "pass": 3,
        "correct": true,
        "answer": "    return list(filter(lambda x: x % 2 != 0, nums))\n\n# Test the function with the given input\nnums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]\nprint(filter_oddnumbers(nums)) ",
        "generated_testcode": "assert filter_oddnumbers(range(1, 10)) == [1, 3, 5, 7, 9]\n",
        "test": "assert filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1,3,5,7,9]\nassert filter_oddnumbers([10,20,45,67,84,93])==[45,67,93]\nassert filter_oddnumbers([5,7,9,8,6,4,3])==[5,7,9,3]",
        "canonical_solution": "def filter_oddnumbers(nums):\r\n odd_nums = list(filter(lambda x: x%2 != 0, nums))\r\n return odd_nums"
    },
    {
        "number": 427,
        "prompt": "Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format by using regex.\ndef change_date_format(dt):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    import re\n    new_dt = re.sub(r\"(\\d{4})-(\\d{2})-(\\d{2})\", r\"\\3-\\2-\\1\", dt)\n    return new_dt\n\n# Test the function\nprint(change_date_format(\"2021-08-12\")) # Output: \"12-08-2021\"\nprint(change_date_format(\"2021-12-31\")) # Output: \"31-12-2021\"\nprint(change_date_format(\"2022-01-01\")) # Output: \"01-01-2022\"\n\n# Test with invalid date format\nprint(change_date_format(\"2021-13-12\")) # Output: \"13-12-2021\"\nprint(change_date_format(\"2021-12-32\")) # Output: \"32-12-2021\"\nprint(change_date_format(\"2021-13-31\")) # Output: \"31-12-2021\"\nprint(change_date_format(\"2021-02-29\")) # Output: \"29-02-2021\"\nprint(change_date_format(\"2021-13-99\")) # Output: \"99-13-2021\"\nprint(change_date_",
        "generated_testcode": "assert change_date_format(2021-12-31) == 31-12-2021\n",
        "test": "assert change_date_format(\"2026-01-02\") == '02-01-2026'\nassert change_date_format(\"2020-11-13\") == '13-11-2020'\nassert change_date_format(\"2021-04-26\") == '26-04-2021'",
        "canonical_solution": "import re\r\ndef change_date_format(dt):\r\n        return re.sub(r'(\\d{4})-(\\d{1,2})-(\\d{1,2})', '\\\\3-\\\\2-\\\\1', dt)"
    },
    {
        "number": 428,
        "prompt": "Write a function to sort the given array by using shell sort.\ndef shell_sort(my_list):\n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    n = len(my_list)\n    gap = n//2\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j-gap] > temp:\n                my_list[j] = my_list[j-gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n    return my_list\n\n# Test the function with sample input\nprint(shell_sort([4, 2, 1, 7, 6, 3, 9, 5, 8, 5, 3, 2, 1, 0, 8]))\n\n# Output: [0, 1, 1, 2, 2, 3, 3, 4, 5, 5, 6, 7, 8, 8, 9]",
        "generated_testcode": "assert shell_sort([3, 1, 4, 2, 5, 1, 6, 7, 8, 9, 0, 2, 3, 4, 5] ) == [0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 7, 8, 9]\n",
        "test": "assert shell_sort([12, 23, 4, 5, 3, 2, 12, 81, 56, 95]) == [2, 3, 4, 5, 12, 12, 23, 56, 81, 95]\nassert shell_sort([24, 22, 39, 34, 87, 73, 68]) == [22, 24, 34, 39, 68, 73, 87]\nassert shell_sort([32, 30, 16, 96, 82, 83, 74]) == [16, 30, 32, 74, 82, 83, 96]",
        "canonical_solution": "def shell_sort(my_list):\r\n    gap = len(my_list) // 2\r\n    while gap > 0:\r\n        for i in range(gap, len(my_list)):\r\n            current_item = my_list[i]\r\n            j = i\r\n            while j >= gap and my_list[j - gap] > current_item:\r\n                my_list[j] = my_list[j - gap]\r\n                j -= gap\r\n            my_list[j] = current_item\r\n        gap //= 2\r\n\r\n    return my_list"
    },
    {
        "number": 429,
        "prompt": "Write a function to extract the elementwise and tuples from the given two tuples.\ndef and_tuples(test_tup1, test_tup2):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    \"\"\"\n    This function takes in two tuples of different lengths and returns a new tuple consisting of the elements that are common to both tuples and the elements that appear in both tuples.\n    If the two tuples have elements of different types, the function should return an empty tuple.\n    If the tuples have elements that are not comparable, the function should return None.\n    If the tuples have elements that are not tuples, the function should return None.\n    If the tuples have elements that are not of the same length, the function should return None.\n    \"\"\"\n    if len(test_tup1) != len(test_tup2):\n        return None\n    elif type(test_tup1) != tuple or type(test_tup2) != tuple:\n        return None\n    else:\n        common_elements = []\n        for i in test_tup1:\n            for j in test_tup2:\n                if i == j:\n                    common_elements.append(i)\n        return tuple(common_elements)\n\n# Test cases\nprint(and_tuples((1, 2, 3, 4, 5), (4, 5, 6, 7, 8)) == (4, 5))\nprint(and_tuples((1, 2, 3, 'a'), (4, 5, 6, 7, 8)) == None)\nprint(and_tuples((1, 2, 3), (4, 5, 6,",
        "generated_testcode": "assert and_tuples((), ()) == ()\n",
        "test": "assert and_tuples((10, 4, 6, 9), (5, 2, 3, 3)) == (0, 0, 2, 1)\nassert and_tuples((1, 2, 3, 4), (5, 6, 7, 8)) == (1, 2, 3, 0)\nassert and_tuples((8, 9, 11, 12), (7, 13, 14, 17)) == (0, 9, 10, 0)",
        "canonical_solution": "def and_tuples(test_tup1, test_tup2):\r\n  res = tuple(ele1 & ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\r\n  return (res) "
    },
    {
        "number": 430,
        "prompt": "Write a function to find the directrix of a parabola.\ndef parabola_directrix(a, b, c): \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    if a == 0: \n        return None \n    return -c / b ",
        "generated_testcode": "assert parabola_directrix(1, 2, 3) == 1\n",
        "test": "assert parabola_directrix(5,3,2)==-198\nassert parabola_directrix(9,8,4)==-2336\nassert parabola_directrix(2,4,6)==-130",
        "canonical_solution": "def parabola_directrix(a, b, c): \r\n  directrix=((int)(c - ((b * b) + 1) * 4 * a ))\r\n  return directrix"
    },
    {
        "number": 431,
        "prompt": "Write a function that takes two lists and returns true if they have at least one common element.\ndef common_element(list1, list2):\n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    # Your code here\n    for element in list1:\n        if element in list2:\n            return True\n    return False\n\n# Test cases\nprint(common_element([1, 2, 3], [4, 5, 6])) # False\nprint(common_element([1, 2, 3], [2, 4, 5])) # True\nprint(common_element([1, 2, 3], [3, 4, 5])) # True\nprint(common_element([1, 2, 3], [4, 5, 6, 7])) # False\nprint(common_element([1, 2, 3, 4], [3, 4, 5, 6])) # True\nprint(common_element([1, 2, 3, 4], [5, 6, 7])) # False\nprint(common_element([], [4, 5, 6])) # False\nprint(common_element([], [])) # False",
        "generated_testcode": "assert common_element([\"apple\", \"banana\", \"cherry\"], [\"banana\", \"orange\", \"grape\"]) == True\n",
        "test": "assert common_element([1,2,3,4,5], [5,6,7,8,9])==True\nassert common_element([1,2,3,4,5], [6,7,8,9])==None\nassert common_element(['a','b','c'], ['d','b','e'])==True",
        "canonical_solution": "def common_element(list1, list2):\r\n     result = False\r\n     for x in list1:\r\n         for y in list2:\r\n             if x == y:\r\n                 result = True\r\n                 return result"
    },
    {
        "number": 432,
        "prompt": "Write a function to find the median of a trapezium.\ndef median_trapezium(base1,base2,height):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    def find_median(base1,base2,height):\n        area = (base1+base2)*height/2\n        return area\n    return find_median(base1,base2,height)\n\n#Test the function\nprint(median_trapezium(10, 15, 8))\n",
        "generated_testcode": "assert median_trapezium(3,4,5) == 4.0\n",
        "test": "assert median_trapezium(15,25,35)==20\nassert median_trapezium(10,20,30)==15\nassert median_trapezium(6,9,4)==7.5",
        "canonical_solution": "def median_trapezium(base1,base2,height):\r\n median = 0.5 * (base1+ base2)\r\n return median"
    },
    {
        "number": 433,
        "prompt": "Write a function to check whether the entered number is greater than the elements of the given array.\ndef check_greater(arr, number):\n",
        "checkpoint": "7B",
        "pass": 4,
        "correct": true,
        "answer": "    for i in range(len(arr)):\n        if arr[i] > number:\n            return True\n    return False\n\n# Example usage:\narr = [3, 5, 1, 8, 2, 9]\nnum = 4\nprint(check_greater(arr, num))  # Output: True\n\narr = [1, 2, 3, 4, 5]\nnum = 10\nprint(check_greater(arr, num))  # Output: False\n",
        "generated_testcode": "assert check_greater([1, 2, 3, 4, 5], 3) == True\n",
        "test": "assert check_greater([1, 2, 3, 4, 5], 4) == 'No, entered number is less than those in the array'\nassert check_greater([2, 3, 4, 5, 6], 8) == 'Yes, the entered number is greater than those in the array'\nassert check_greater([9, 7, 4, 8, 6, 1], 11) == 'Yes, the entered number is greater than those in the array'",
        "canonical_solution": "def check_greater(arr, number):\r\n  arr.sort()\r\n  if number > arr[-1]:\r\n    return ('Yes, the entered number is greater than those in the array')\r\n  else:\r\n    return ('No, entered number is less than those in the array')"
    },
    {
        "number": 434,
        "prompt": "Write a function that matches a string that has an a followed by one or more b's.\ndef text_match_one(text):\n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    pattern = r\"a[b]+\"\n    result = re.search(pattern, text)\n    if result:\n        return True\n    else:\n        return False\n\n# Test the function\nprint(text_match_one(\"abbbc\")) # True\nprint(text_match_one(\"abc\")) # False\nprint(text_match_one(\"abbab\")) # True\nprint(text_match_one(\"a\")) # False\nprint(text_match_one(\"abbb\")) # True\n\n\n# One-liner solution using regular expressions\ndef text_match_one(text):\n    return bool(re.search(r\"a[b]+\", text))\n\n# Test the function\nprint(text_match_one(\"abbbc\")) # True\nprint(text_match_one(\"abc\")) # False\nprint(text_match_one(\"abbab\")) # True\nprint(text_match_one(\"a\")) # False\nprint(text_match_one(\"abbb\")) # True ",
        "generated_testcode": "assert text_match_one(\"abbbc\" ) == True\n",
        "test": "assert text_match_one(\"ac\")==('Not matched!')\nassert text_match_one(\"dc\")==('Not matched!')\nassert text_match_one(\"abba\")==('Found a match!')",
        "canonical_solution": "import re\r\ndef text_match_one(text):\r\n        patterns = 'ab+?'\r\n        if re.search(patterns,  text):\r\n                return 'Found a match!'\r\n        else:\r\n                return('Not matched!')\r\n"
    },
    {
        "number": 435,
        "prompt": "Write a python function to find the last digit of a given number.\ndef last_Digit(n) :\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": true,
        "answer": "    return n % 10\n\n#Test the function with the sample test cases\nprint(last_Digit(2345)) # Output: 5\nprint(last_Digit(1230)) # Output: 0\nprint(last_Digit(76543)) # Output: 3\nprint(last_Digit(123)) # Output: 3\nprint(last_Digit(9876)) # Output: 6\nprint(last_Digit(1000000)) # Output: 0\nprint(last_Digit(999999999)) # Output: 9\n\n\n# Function to find the last digit of a given number\ndef last_Digit(n):\n    return n % 10\n\n# Test the function with sample test cases\nprint(last_Digit(2345)) # Output: 5\nprint(last_Digit(1230)) # Output: 0\nprint(last_Digit(76543)) # Output: 3\nprint(last_Digit(123)) # Output: 3\nprint(last_Digit(9876)) # Output: 6\nprint(last_Digit(1000000)) # Output: 0\nprint(last_Digit(99999999)) # Output: 9 ",
        "generated_testcode": "assert last_Digit(12345) == 5\n",
        "test": "assert last_Digit(123) == 3\nassert last_Digit(25) == 5\nassert last_Digit(30) == 0",
        "canonical_solution": "def last_Digit(n) :\r\n    return (n % 10) "
    },
    {
        "number": 436,
        "prompt": "Write a python function to print negative numbers in a list.\ndef neg_nos(list1):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    for i in list1:\n        if i < 0:\n            print(i, end = \" \")\n\n\nlist1 = [1, 2, -3, 4, -5, 6, 7, -8, -9]\nneg_nos(list1)\n\n# Expected output: -3 -5 -8 ",
        "generated_testcode": "assert neg_nos([1,2,3,-4,5,-6,7,-8,9] ) == [-4,-6,-8]\n",
        "test": "assert neg_nos([-1,4,5,-6]) == -1,-6\nassert neg_nos([-1,-2,3,4]) == -1,-2\nassert neg_nos([-7,-6,8,9]) == -7,-6",
        "canonical_solution": "def neg_nos(list1):\r\n  for num in list1: \r\n    if num < 0: \r\n       return num "
    },
    {
        "number": 437,
        "prompt": "Write a function to remove odd characters in a string.\ndef remove_odd(str1):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    result = \"\"\n    for i in str1:\n        if i.isalpha():\n            result += i\n    return result\n\n# Test the function\nprint(remove_odd(\"Hello, World!\")) # Output: \"Hlo, Wrld\"\nprint(remove_odd(\"123456789\")) # Output: \"\"\nprint(remove_odd(\"A man, a plan, a canal: Panama\")) # Output: \"man canalPam\" ",
        "generated_testcode": "assert remove_odd(None) == \"\"\n",
        "test": "assert remove_odd(\"python\")==(\"yhn\")\nassert remove_odd(\"program\")==(\"rga\")\nassert remove_odd(\"language\")==(\"agae\")",
        "canonical_solution": "def remove_odd(str1):\r\n str2 = ''\r\n for i in range(1, len(str1) + 1):\r\n    if(i % 2 == 0):\r\n        str2 = str2 + str1[i - 1]\r\n return str2"
    },
    {
        "number": 438,
        "prompt": "Write a function to count bidirectional tuple pairs.\ndef count_bidirectional(test_list):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] < test_list[j]:\n                count += 1\n            elif test_list[j] < test_list[i]:\n                count += 1\n    return count\n\n# Test the function with a sample list\ntest_list = [(1, 2, 3), (4, 5), (1, 2), (6, 7), (2, 3), (4, 5), (1, 3), (6, 7)]\nprint(count_bidirectional(test_list)) # Output: 6\n\n\n# Write a function to count unique tuples\ndef count_unique(test_list):\n    seen = set()\n    count = 0\n    for i in test_list:\n        if i not in seen:\n            seen.add(i)\n            count += 1\n    return count\n\n# Test the function with a sample list\ntest_list = [(1, 2), (3, 4), (2, 3), (4, 5), (6, 7), (7, 8), (3, 4), (6, 7)]\nprint(count_unique(test_list)) # Output: 4\n\n\n# Write a function to find the sum of all elements in a list of lists\ndef sum_list_of_lists(test_list):\n   ",
        "generated_testcode": "assert count_bidirectional([\"apple\", \"banana\", \"cherry\", \"banana\", \"apple\", \"cherry\", \"banana\", \"apple\", \"cherry\", \"banana\", \"apple\", \"cherry\"]) == 4\n",
        "test": "assert count_bidirectional([(5, 6), (1, 2), (6, 5), (9, 1), (6, 5), (2, 1)] ) == '3'\nassert count_bidirectional([(5, 6), (1, 3), (6, 5), (9, 1), (6, 5), (2, 1)] ) == '2'\nassert count_bidirectional([(5, 6), (1, 2), (6, 5), (9, 2), (6, 5), (2, 1)] ) == '4'",
        "canonical_solution": "def count_bidirectional(test_list):\r\n  res = 0\r\n  for idx in range(0, len(test_list)):\r\n    for iidx in range(idx + 1, len(test_list)):\r\n      if test_list[iidx][0] == test_list[idx][1] and test_list[idx][1] == test_list[iidx][0]:\r\n        res += 1\r\n  return (str(res)) "
    },
    {
        "number": 439,
        "prompt": "Write a function to convert a list of multiple integers into a single integer.\ndef multiple_to_single(L):\n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    result = 0\n    for i in L:\n        result = result * 10 + i\n    return result\n\n# Test the function\nL = [1, 2, 3, 4, 5]\nprint(multiple_to_single(L)) # Output: 12345\n\nL = [10, 20, 30, 40]\nprint(multiple_to_single(L)) # Output: 12340\n\nL = [5, 4, 3, 2, 1]\nprint(multiple_to_single(L)) # Output: 5432\n\nL = [9, 8, 7, 6]\nprint(multiple_to_single(L)) # Output: 987",
        "generated_testcode": "assert multiple_to_single([1, 2, 3, 4, 5, 6, 7, 8, 9] ) == 123456789\n",
        "test": "assert multiple_to_single([11, 33, 50])==113350\nassert multiple_to_single([-1,2,3,4,5,6])==-123456\nassert multiple_to_single([10,15,20,25])==10152025",
        "canonical_solution": "def multiple_to_single(L):\r\n  x = int(\"\".join(map(str, L)))\r\n  return x"
    },
    {
        "number": 440,
        "prompt": "Write a function to find all adverbs and their positions in a given sentence.\ndef find_adverb_position(text):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    adverbs = ['rarely', 'never', 'hardly', 'often', 'seldom', 'frequently', 'usually', 'sometimes', 'generally', 'normally', 'generally', 'regularly', 'extremely', 'occasionally', 'occasionally', 'occasionally', 'nearly', 'frequently', 'usually', 'always', 'often', 'seldom', 'rarely', 'never', 'rarely', 'generally', 'generally', 'extremely', 'seldom', 'seldom', 'frequently', 'sometimes', 'nearly', 'never', 'rarely', 'seldom', 'often', 'always']\n    result = []\n    for word in text.split():\n        for adverb in adverbs:\n            if adverb == word.lower():\n                result.append((adverb, text.find(adverb)))\n    return result\n\n\n# Test the function with an example sentence\nsentence = \"The dog is usually running around the house frequently.\"\nprint(find_adverb_position(sentence)) # Output: [('usually', 4), ('frequently', 15)] ",
        "generated_testcode": "assert find_adverb_position(\n    \"The dog is running quickly, but the cat is running slowly.\") == [(\"running\", 10, 11), (\"running\", 19)]\n",
        "test": "assert find_adverb_position(\"clearly!! we can see the sky\")==(0, 7, 'clearly')\nassert find_adverb_position(\"seriously!! there are many roses\")==(0, 9, 'seriously')\nassert find_adverb_position(\"unfortunately!! sita is going to home\")==(0, 13, 'unfortunately')",
        "canonical_solution": "import re\r\ndef find_adverb_position(text):\r\n for m in re.finditer(r\"\\w+ly\", text):\r\n    return (m.start(), m.end(), m.group(0))"
    },
    {
        "number": 441,
        "prompt": "Write a function to find the surface area of a cube.\ndef surfacearea_cube(l):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": true,
        "answer": "    return 6*(l**2)\n\n\n# Test the function with an example\nprint(surfacearea_cube(5)) # Output: 150.0\n\n\n# Write a function to find the volume of a cube\ndef volume_cube(l):\n    return l**3\n\n\n# Test the function with an example\nprint(volume_cube(5)) # Output: 125\n\n\n# Write a function to find the diagonal of a cube\ndef diagonal_cube(l):\n    return (3*l**2)**(1/2)\n\n\n# Test the function with an example\nprint(diagonal_cube(5)) # Output: 7.071067811186547558\n\n\n# Write a function to find the lateral surface area of a cube\ndef lateral_surfacearea_cube(l):\n    return 6*(l**2)\n\n\n# Test the function with an example\nprint(lateral_surfacearea_cube(5)) # Output: 150\n\n\n# Write a function to find the total surface area of a cube\ndef total_surfacearea_cube(l):\n    return 6*(l**2) + 12*(l**2)\n\n# Test the function with an example\nprint(total_surfacearea_cube(5)) # Output: 150 + 150 = 300\n\n\n# Write a function",
        "generated_testcode": "assert surfacearea_cube(2) == 6*4\n",
        "test": "assert surfacearea_cube(5)==150\nassert surfacearea_cube(3)==54\nassert surfacearea_cube(10)==600",
        "canonical_solution": "def surfacearea_cube(l):\r\n  surfacearea= 6*l*l\r\n  return surfacearea"
    },
    {
        "number": 442,
        "prompt": "Write a function to find the ration of positive numbers in an array of integers.\ndef positive_count(nums):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    count = 0\n    for i in nums:\n        if i > 0:\n            count += 1\n    return count/len(nums)\n\n# Test cases\nprint(positive_count([1,2,3,4,-1,5,-2,6])) # 0.4\nprint(positive_count([1,-2,3,4,-1,5,6,-2])) # 0.66666666666666666666666\nprint(positive_count([1,2,3,4,5,6])) # 1.0\nprint(positive_count([-1,-2,-3,-4,-5])) # 0.0\nprint(positive_count([0,0,0,0])) # 0.0\n",
        "generated_testcode": "assert positive_count([1, 2, 3, 4, 5, 6, 7, 8, 9] ) == 5/9\n",
        "test": "assert positive_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])==0.54\nassert positive_count([2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8])==0.69\nassert positive_count([2, 4, -6, -9, 11, -12, 14, -5, 17])==0.56",
        "canonical_solution": "from array import array\r\ndef positive_count(nums):\r\n    n = len(nums)\r\n    n1 = 0\r\n    for x in nums:\r\n        if x > 0:\r\n            n1 += 1\r\n        else:\r\n          None\r\n    return round(n1/n,2)"
    },
    {
        "number": 443,
        "prompt": "Write a python function to find the largest negative number from the given list.\ndef largest_neg(list1): \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    largest_neg_num = None\n    for num in list1: \n        if num < 0 and (largest_neg_num is None or num > largest_neg_num): \n            largest_neg_num = num\n    return largest_neg_num\n\n# Test cases\nprint(largest_neg([2, 4, -1, -5, -3, 6, -2, -7, -8])) # Output: -1\nprint(largest_neg([1, 2, 3, 4, 5, -3, 6, -7, -8])) # Output: -8\nprint(largest_neg([1, 2, 3, 4, 5, 6, 7, 8])) # Output: None\n\n\n#Alternate solution\ndef largest_neg_2(lst):\n    neg_list = [num for num in lst if num < 0]\n    if len(neg_list) == 0:\n        return None\n    else:\n        return max(neg_list)\n\n# Test cases\nprint(largest_neg_2([2, 4, -1, -5, -3, 6, -2, -7, -8])) # Output: -1\nprint(largest_neg_2([1, 2, 3, 4, 5, -3, 6, -7, -8])) # Output: -8\nprint(largest_neg_2([1, 2, 3,",
        "generated_testcode": "assert largest_neg([1, 2, 3, -5, 4, -3, -7, 0, -10, 8, -2] ) == -3\n",
        "test": "assert largest_neg([1,2,3,-4,-6]) == -6\nassert largest_neg([1,2,3,-8,-9]) == -9\nassert largest_neg([1,2,3,4,-1]) == -1",
        "canonical_solution": "def largest_neg(list1): \r\n    max = list1[0] \r\n    for x in list1: \r\n        if x < max : \r\n             max = x  \r\n    return max"
    },
    {
        "number": 444,
        "prompt": "Write a function to trim each tuple by k in the given tuple list.\ndef trim_tuple(test_list, K):\n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    result = []\n    for t in test_list:\n        new_tuple = ()\n        for i in range(len(t)):\n            if i < K:\n                new_tuple += (t[i],)\n            else:\n                break\n        result.append(new_tuple)\n    return result\n\n# Test the function\ntest_list = [(1,2,3,4,5,6,7,8,9,10), (2,4,6,8,10,12,14,16), (1,3,5,7,9,11,13,15)]\nK = 3\nprint(trim_tuple(test_list, K))\n# Output: [(1, 2, 3), (2, 4), (1,)]\n\ntest_list = [(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18), (2,4,6,8,10,12,14,16,18,20,22,24,26,28), (1,3,5,7,9,11,13,15,17,19,21,23,25,27)]\nK = 5\nprint(trim_tuple(test_list, K))\n# Output: [(1, 2, 3, 4, ",
        "generated_testcode": "assert trim_tuple([(1,2,3,4,5,6,7,8,9,10), (11,12,13,14,15,16,17,18,19,20), (21,22,23,24,25,26,27,28,29,30)], 3) == [(1,2,3),(11,12,13),(21,22,23)]\n",
        "test": "assert trim_tuple([(5, 3, 2, 1, 4), (3, 4, 9, 2, 1),(9, 1, 2, 3, 5), (4, 8, 2, 1, 7)], 2) == '[(2,), (9,), (2,), (2,)]'\nassert trim_tuple([(5, 3, 2, 1, 4), (3, 4, 9, 2, 1), (9, 1, 2, 3, 5), (4, 8, 2, 1, 7)], 1) == '[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]'\nassert trim_tuple([(7, 8, 4, 9), (11, 8, 12, 4),(4, 1, 7, 8), (3, 6, 9, 7)], 1) == '[(8, 4), (8, 12), (1, 7), (6, 9)]'",
        "canonical_solution": "def trim_tuple(test_list, K):\r\n  res = []\r\n  for ele in test_list:\r\n    N = len(ele)\r\n    res.append(tuple(list(ele)[K: N - K]))\r\n  return (str(res)) "
    },
    {
        "number": 445,
        "prompt": "Write a function to perform index wise multiplication of tuple elements in the given two tuples.\ndef index_multiplication(test_tup1, test_tup2):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    result_tuple = ()\n    for i in range(len(test_tup1)):\n        result_tuple += (test_tup1[i] * test_tup2[i],)\n    return result_tuple\n\n\n# Test cases\nprint(index_multiplication((2, 4, 6), (1, 3, 5))) # Output: (2, 12, 30)\nprint(index_multiplication((10, 20, 30, 40), (1, 2, 3, 4))) # Output: (10, 40, 90, 120)\nprint(index_multiplication((1, 2, 3), (4, 5, 6))) # Output: (4, 10, 18)\nprint(index_multiplication((1, 2, 3, 4, 5), (6, 7, 8, 9, 10)) # Output: (6, 14, 18, 20, 25)\n",
        "generated_testcode": "assert index_multiplication((1,2,3,4,5), (5,4,3,2) ) == (5,8,6,10)\n",
        "test": "assert index_multiplication(((1, 3), (4, 5), (2, 9), (1, 10)),((6, 7), (3, 9), (1, 1), (7, 3)) ) == ((6, 21), (12, 45), (2, 9), (7, 30))\nassert index_multiplication(((2, 4), (5, 6), (3, 10), (2, 11)),((7, 8), (4, 10), (2, 2), (8, 4)) ) == ((14, 32), (20, 60), (6, 20), (16, 44))\nassert index_multiplication(((3, 5), (6, 7), (4, 11), (3, 12)),((8, 9), (5, 11), (3, 3), (9, 5)) ) == ((24, 45), (30, 77), (12, 33), (27, 60))",
        "canonical_solution": "def index_multiplication(test_tup1, test_tup2):\r\n  res = tuple(tuple(a * b for a, b in zip(tup1, tup2))\r\n   for tup1, tup2 in zip(test_tup1, test_tup2))\r\n  return (res) "
    },
    {
        "number": 446,
        "prompt": "Write a python function to count the occurence of all elements of list in a tuple.\ndef count_Occurrence(tup, lst): \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    #initialize an empty dictionary\n    dict = {}\n    #loop through the tuple and count the occurence of each element\n    for i in tup:\n        if i in dict:\n            dict[i] += 1\n        else:\n            dict[i] = 1\n    #loop through the list and count the number of times each element appears in the dictionary\n    for j in lst:\n        if j in dict:\n            dict[j] += 1\n        else:\n            dict[j] = 1\n    #print the dictionary\n    for key, value in dict.items():\n        print(key, \":\", value)\n\n#test the function\ntup = (1,2,3,4,5,6,1,2,3,4,7,8,8,8,9,9,9)\nlst = [1,2,3,4,5,6,7,8,9,10]\ncount_Occurrence(tup, lst)",
        "generated_testcode": "assert count_Occurrence(('abc', ['a', 'b', 'c', 'd']) == {'a': 1, 'b': 1, 'c': 1, 'd': 0}\n",
        "test": "assert count_Occurrence(('a', 'a', 'c', 'b', 'd'),['a', 'b'] ) == 3\nassert count_Occurrence((1, 2, 3, 1, 4, 6, 7, 1, 4),[1, 4, 7]) == 6\nassert count_Occurrence((1,2,3,4,5,6),[1,2]) == 2",
        "canonical_solution": "from collections import Counter \r\ndef count_Occurrence(tup, lst): \r\n    count = 0\r\n    for item in tup: \r\n        if item in lst: \r\n            count+= 1 \r\n    return count  "
    },
    {
        "number": 447,
        "prompt": "Write a function to find cubes of individual elements in a list using lambda function.\ndef cube_nums(nums):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    return list(map(lambda x: x**3, nums))\n\n\n#Test the function with sample input\nprint(cube_nums([1, 2, 3, 4, 5]))\n\n# Output: [1, 8, 27, 64, 125]\n\n# Test the function with another sample input\nprint(cube_nums([0, -2, 5, -7, 8, 9]))\n# Output: [0, -8, 125, 343, 729] ",
        "generated_testcode": "assert cube_nums(range(1, 5)) == [1, 8, 27, 27, 64, 125]\n",
        "test": "assert cube_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]\nassert cube_nums([10,20,30])==([1000, 8000, 27000])\nassert cube_nums([12,15])==([1728, 3375])",
        "canonical_solution": "def cube_nums(nums):\r\n cube_nums = list(map(lambda x: x ** 3, nums))\r\n return cube_nums"
    },
    {
        "number": 448,
        "prompt": "Write a function to calculate the sum of perrin numbers.\ndef cal_sum(n): \n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    sum = 0\n    i = 1\n    while i <= n:\n        sum += i\n        i += 1\n    return sum\n\nprint(cal_sum(10)) # should return 555\nprint(cal_sum(100)) # should return 181\nprint(cal_sum(20)) # should return 2111\nprint(cal_sum(50)) # should return 1272\n\n\n# write a function to calculate the sum of perrin numbers from 1 to n\ndef cal_sum_perrin(n):\n    sum = 0\n    for i in range(1, n+1):\n        sum += i * i\n    return sum\n\nprint(cal_sum_perrin(10)) # should return 385\nprint(cal_sum_perrin(20)) # should return 2641\nprint(cal_sum_perrin(50)) # should return 82291\n\n# write a function to calculate the sum of perrin numbers from 1 to n\ndef cal_sum_perrin(n):\n    sum = 0\n    for i in range(1, n+1):\n        sum += i * i\n    return sum\n\nprint(cal_sum_perrin(10)) # should return 385\nprint(cal_sum_perrin(20)) # should return 2641\nprint(cal_sum_perrin(50)) # should return 8",
        "generated_testcode": "assert cal_sum(5) == 15\n",
        "test": "assert cal_sum(9) == 49\nassert cal_sum(10) == 66\nassert cal_sum(11) == 88",
        "canonical_solution": "def cal_sum(n): \r\n\ta = 3\r\n\tb = 0\r\n\tc = 2\r\n\tif (n == 0): \r\n\t\treturn 3\r\n\tif (n == 1): \r\n\t\treturn 3\r\n\tif (n == 2): \r\n\t\treturn 5\r\n\tsum = 5\r\n\twhile (n > 2): \r\n\t\td = a + b \r\n\t\tsum = sum + d \r\n\t\ta = b \r\n\t\tb = c \r\n\t\tc = d \r\n\t\tn = n-1\r\n\treturn sum"
    },
    {
        "number": 449,
        "prompt": "Write a python function to check whether the triangle is valid or not if 3 points are given.\ndef check_Triangle(x1,y1,x2,y2,x3,y3): \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    #Calculate distance between points using distance formula \n    distance1 = ((x2 - x1)**2 + (y2 - y1)**2)**0.5\n    distance2 = ((x3 - x2)**2 + (y3 - y2)**2)**0.5\n    distance3 = ((x3 - x1)**2 + (y3 - y1)**2)**0.5\n    #Check if triangle is valid or not using triangle inequality theorem\n    if (distance1+distance2>distance3 and distance2+distance3>distance1 and distance1+distance3>distance2):\n        return True\n    else:\n        return False\n\n#Testing the function\nx1, y1 = eval(input(\"Enter the coordinates of point 1: \"))\nx2, y2 = eval(input(\"Enter the coordinates of point 2: \"))\nx3, y3 = eval(input(\"Enter the coordinates of point 3: \"))\n\nif check_Triangle(x1,y1,x2,y2,x3,y3):\n    print(\"Triangle is valid\")\nelse:\n    print(\"Triangle is not valid\")\n\n\n#Alternate way to take inputs:\n#x1, y1, x2, y2, x3, y3 = map(float, input(\"Enter the coordinates of points: \").split())\n#if check_Triangle(x1,y1,x2,y2,x3,y3):\n#   ",
        "generated_testcode": "assert check_Triangle(0,0,3,0,4,0) == False\n",
        "test": "assert check_Triangle(1,5,2,5,4,6) == 'Yes'\nassert check_Triangle(1,1,1,4,1,5) == 'No'\nassert check_Triangle(1,1,1,1,1,1) == 'No'",
        "canonical_solution": "def check_Triangle(x1,y1,x2,y2,x3,y3): \r\n    a = (x1*(y2-y3)+x2*(y3-y1)+x3*(y1-y2))   \r\n    if a == 0: \r\n        return ('No') \r\n    else: \r\n        return ('Yes') "
    },
    {
        "number": 450,
        "prompt": "Write a function to extract specified size of strings from a give list of string values.\ndef extract_string(str, l):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    result = []\n    for i in range(len(l)):\n        result.append(str[i:i+3])\n    return result\n\n# Test the function with given test case\nstr = \"hello world\"\nl = [\"hello\", \"world\", \"this\", \"is\", \"a\", \"test\"]\nprint(extract_string(str, l)) # Output: ['hel', 'wor', 'tis', 'a ', 'tes']\n\n# Test the function with another test case\nstr = \"python\"\nl = [\"python\", \"programming\", \"is\", \"awesome\", \"fun\"]\nprint(extract_string(str, l)) # Output: ['pyn', 'rog', 'is ', 'awes', 'fun'] ",
        "generated_testcode": "assert extract_string([\"hello\", \"world\", \"python\", \"programming\", \"is\", \"fun\"], 3) == [\"hel\", \"wor\", \"pro\", \"is\", \"fun\"]\n",
        "test": "assert extract_string(['Python', 'list', 'exercises', 'practice', 'solution'] ,8)==['practice', 'solution']\nassert extract_string(['Python', 'list', 'exercises', 'practice', 'solution'] ,6)==['Python']\nassert extract_string(['Python', 'list', 'exercises', 'practice', 'solution'] ,9)==['exercises']",
        "canonical_solution": "def extract_string(str, l):\r\n    result = [e for e in str if len(e) == l] \r\n    return result"
    },
    {
        "number": 451,
        "prompt": "Write a function to remove all whitespaces from the given string using regex.\ndef remove_whitespaces(text1):\n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    import re\n    return re.sub(r'\\s+', '', text1)\n\n\n# Test the function\ntext = \"   This is a test string with whitespaces   \"\nprint(remove_whitespaces(text))\n\n\n# Output: 'Thisisteststringwithwhitespaces' ",
        "generated_testcode": "assert remove_whitespaces(\"Hello, World!  \" ) == \"Hello,World!\"\n",
        "test": "assert remove_whitespaces(' Google    Flutter ') == 'GoogleFlutter'\nassert remove_whitespaces(' Google    Dart ') == 'GoogleDart'\nassert remove_whitespaces(' iOS    Swift ') == 'iOSSwift'",
        "canonical_solution": "import re\r\ndef remove_whitespaces(text1):\r\n  return (re.sub(r'\\s+', '',text1))"
    },
    {
        "number": 452,
        "prompt": "Write a function that gives loss amount if the given amount has loss else return none.\ndef loss_amount(actual_cost,sale_amount): \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    if sale_amount < actual_cost:\n        return sale_amount - actual_cost\n    else:\n        return None\n\n# Test the function\nprint(loss_amount(1000, 80)) # should return 20\nprint(loss_amount(200, 50)) # should return None\nprint(loss_amount(50, 1000)) # should return 30\nprint(loss_amount(70, 120)) # should return None\nprint(loss_amount(100, 120)) # should return 10",
        "generated_testcode": "assert loss_amount(1000, 80) == 20\n",
        "test": "assert loss_amount(1500,1200)==None\nassert loss_amount(100,200)==100\nassert loss_amount(2000,5000)==3000",
        "canonical_solution": "def loss_amount(actual_cost,sale_amount): \r\n  if(sale_amount > actual_cost):\r\n    amount = sale_amount - actual_cost\r\n    return amount\r\n  else:\r\n    return None"
    },
    {
        "number": 453,
        "prompt": "Write a python function to find the sum of even factors of a number.\ndef sumofFactors(n) : \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    sum = 0\n    for i in range(2,n) : \n        if n % i == 0 and n != i and n % i == 0 and i % 2 == 0 : \n            sum += i\n    return sum\n\nprint(sumofFactors(10)) # Output: 4 (2 + 5) = 7 ",
        "generated_testcode": "assert sumofFactors(12) == 6, \"Test case 1 failed\"\n",
        "test": "assert sumofFactors(18) == 26\nassert sumofFactors(30) == 48\nassert sumofFactors(6) == 8",
        "canonical_solution": "import math \r\ndef sumofFactors(n) : \r\n    if (n % 2 != 0) : \r\n        return 0\r\n    res = 1\r\n    for i in range(2, (int)(math.sqrt(n)) + 1) :    \r\n        count = 0\r\n        curr_sum = 1\r\n        curr_term = 1\r\n        while (n % i == 0) : \r\n            count= count + 1\r\n            n = n // i \r\n            if (i == 2 and count == 1) : \r\n                curr_sum = 0\r\n            curr_term = curr_term * i \r\n            curr_sum = curr_sum + curr_term \r\n        res = res * curr_sum  \r\n    if (n >= 2) : \r\n        res = res * (1 + n) \r\n    return res "
    },
    {
        "number": 454,
        "prompt": "Write a function that matches a word containing 'z'.\ndef text_match_wordz(text):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    words = text.split()\n    for word in words:\n        if 'z' in word:\n            return word\n    return None\n\n# Test the function\nprint(text_match_wordz(\"The quick brown fox jumps over the lazy dog.\")) # Output: \"lazy\"\nprint(text_match_wordz(\"Python is fun\")) # Output: \"fun\"\nprint(text_match_wordz(\"The word doesn't contain z.\")) # Output: None\nprint(text_match_wordz(\"The word has a capital Z\")) # Output: \"capital\"\nprint(text_match_wordz(\"The word has a small z\")) # Output: \"z\"\nprint(text_match_wordz(\"The word has a small Z\")) # Output: \"Z\"\nprint(text_match_wordz(\"The word has a small Z.\")) # Output: None\nprint(text_match_wordz(\"The word has a small z!\")) # Output: None\nprint(text_match_wordz(\"The word has a small z?\")) # Output: None\nprint(text_match_wordz(\"The word has a small z?\")) # Output: None\nprint(text_match_wordz(\"The word has a small z.\")) # Output: None\nprint(text_match_wordz(\"The word has a small z?\")) # Output: None\n\n\n# Solution\ndef text_match_wordz(text):\n    words = text.split()\n    for word in words:\n        if 'z' in",
        "generated_testcode": "assert text_match_wordz([\"hello\", \"world\", \"python\", \"programming\", \"zebra\", \"apple\", \"banana\", \"orange\"] == True\n",
        "test": "assert text_match_wordz(\"pythonz.\")==('Found a match!')\nassert text_match_wordz(\"xyz.\")==('Found a match!')\nassert text_match_wordz(\"  lang  .\")==('Not matched!')",
        "canonical_solution": "import re\r\ndef text_match_wordz(text):\r\n        patterns = '\\w*z.\\w*'\r\n        if re.search(patterns,  text):\r\n                return 'Found a match!'\r\n        else:\r\n                return('Not matched!')"
    },
    {
        "number": 455,
        "prompt": "Write a function to check whether the given month number contains 31 days or not.\ndef check_monthnumb_number(monthnum2):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": true,
        "answer": "    if monthnum2 == 1 or monthnum2 == 3 or monthnum2 == 5 or monthnum2 == 7 or monthnum2 == 8 or monthnum2 == 10 or monthnum2 == 12:\n        return True\n    elif monthnum2 == 4 or monthnum2 == 6 or monthnum2 == 9 or monthnum2 == 11:\n        return False\n    elif monthnum2 == 2:\n        return False\n    else:\n        return True\n\n\n\n# Test the function with different inputs\nprint(check_monthnumb_number(2))\nprint(check_monthnumb_number(1))\nprint(check_monthnumb_number(3))\nprint(check_monthnumb_number(4))\nprint(check_monthnumb_number(5))\nprint(check_monthnumb_number(6))\nprint(check_monthnumb_number(7))\nprint(check_monthnumb_number(8))\nprint(check_monthnumb_number(9))\nprint(check_monthnumb_number(10))\nprint(check_monthnumb_number(11))\nprint(check_monthnumb_number(12))\nprint(check_monthnumb_number(13))\n",
        "generated_testcode": "assert check_monthnumb_number(2) == False\n",
        "test": "assert check_monthnumb_number(5)==True\nassert check_monthnumb_number(2)==False\nassert check_monthnumb_number(6)==False",
        "canonical_solution": "def check_monthnumb_number(monthnum2):\r\n  if(monthnum2==1 or monthnum2==3 or monthnum2==5 or monthnum2==7 or monthnum2==8 or monthnum2==10 or monthnum2==12):\r\n    return True\r\n  else:\r\n    return False"
    },
    {
        "number": 456,
        "prompt": "Write a function to reverse strings in a given list of string values.\ndef reverse_string_list(stringlist):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    \"\"\"\n    This function takes a list of strings as input and returns a new list with the strings in reverse order.\n    \"\"\"\n    reversed_list = []\n    for string in stringlist:\n        reversed_list.append(string[::-1])\n    return reversed_list\n\n\n# Test the function with an example list\nstrings = [\"hello\", \"world\", \"python\", \"programming\"]\nprint(reverse_string_list(strings))\n\n\n# Output: ['olleh', 'dlrow', 'gnimmargorP']\n",
        "generated_testcode": "assert reverse_string_list([\"hello\", \"world\", \"python\", \"programming\"] == [\"olleh\", \"dnorw\", \"gnimmargorp\"]\n\n# Test case 2\n",
        "test": "assert reverse_string_list(['Red', 'Green', 'Blue', 'White', 'Black'])==['deR', 'neerG', 'eulB', 'etihW', 'kcalB']\nassert reverse_string_list(['john','amal','joel','george'])==['nhoj','lama','leoj','egroeg']\nassert reverse_string_list(['jack','john','mary'])==['kcaj','nhoj','yram']",
        "canonical_solution": "def reverse_string_list(stringlist):\r\n    result = [x[::-1] for x in stringlist]\r\n    return result"
    },
    {
        "number": 457,
        "prompt": "Write a python function to find the sublist having minimum length.\ndef Find_Min(lst): \n",
        "checkpoint": "7B",
        "pass": 3,
        "correct": true,
        "answer": "    #finding length of the list\n    n = len(lst)\n    #creating an empty list to store the lengths of all sublists\n    sub_len = []\n    #using nested loop to find the length of all sublists\n    for i in range(1, n+1):\n        for j in range(n-i+1):\n            #storing the length of each sublist in the sub_len list\n            sub_len.append(len(lst[j:j+i]))\n    #finding the minimum length sublist\n    min_len = min(sub_len)\n    #finding the index of the minimum length sublist\n    min_index = sub_len.index(min_len)\n    #returning the minimum length sublist\n    return lst[min_index]\n\n#testing the function\nlst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]\nprint(Find_Min(lst))\n\n#output: [1]\n\n#all sublists: [[1], [2], [3], [4], [5], [6], [7], [8], [9], [10], [11], [12], [13], [14], [1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7,",
        "generated_testcode": "assert Find_Min([1,2,3,4,5,6,7,8,9] ) == 1\n",
        "test": "assert Find_Min([[1],[1,2],[1,2,3]]) == [1]\nassert Find_Min([[1,1],[1,1,1],[1,2,7,8]]) == [1,1]\nassert Find_Min([['x'],['x','y'],['x','y','z']]) == ['x']",
        "canonical_solution": "def Find_Min(lst): \r\n    minList = min((x) for x in lst) \r\n    return minList"
    },
    {
        "number": 458,
        "prompt": "Write a function to find the area of a rectangle.\ndef rectangle_area(l,b):\n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    area = l * b\n    return area\n\n# Test the function\nprint(rectangle_area(5,10)) # should return 50\nprint(rectangle_area(2,4)) # should return 8\nprint(rectangle_area(10,5)) # should return 50\n\n\n# Write a function to find the area of a square\ndef square_area(s):\n    area = s * s\n    return area\n\n# Test the function\nprint(square_area(5)) # should return 25\nprint(square_area(10)) # should return 100\n\n\n# Write a function to find the volume of a cylinder\ndef cylinder_volume(r,h):\n    volume = 3.14159 * r * r * h\n    return volume\n\n# Test the function\nprint(cylinder_volume(5,10)) # should return 158.58\nprint(cylinder_volume(10,5)) # should return 785.398\n\n\n# Write a function to find the average of two numbers\ndef average(num1, num2):\n    avg = (num1 + num2) / 2\n    return avg\n\n# Test the function\nprint(average(10,5)) # should return 7.5\nprint(average(100,20)) # should return 15.0\nprint(average(5,8)) # should return 6.",
        "generated_testcode": "assert rectangle_area(5,10) == 50\n",
        "test": "assert rectangle_area(10,20)==200\nassert rectangle_area(10,5)==50\nassert rectangle_area(4,2)==8",
        "canonical_solution": "def rectangle_area(l,b):\r\n  area=l*b\r\n  return area"
    },
    {
        "number": 459,
        "prompt": "Write a function to remove uppercase substrings from a given string by using regex.\ndef remove_uppercase(str1):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    import re\n    pattern = re.compile(\"[A-Z]\")\n    return re.sub(pattern, \"\", str1)\n\n\n# Test the function with the given test cases\nprint(remove_uppercase(\"Hello World!\")) # Output: \"helloworld\"\nprint(remove_uppercase(\"Python Programming Is Fun!\")) # Output: \"python programming is fun\"\nprint(remove_uppercase(\"A quick Brown Fox\")) # Output: \" quick brown  \"\nprint(remove_uppercase(\"Java is awesome!\")) # Output: \" java is awesome\"\nprint(remove_uppercase(\"The quick brown fox jumps over the lazy dog\")) # Output: \"the quick brown  over the lazy dog\"\n",
        "generated_testcode": "assert remove_uppercase(\"Hello World\" ) == \"hll wrld\"\n",
        "test": "assert remove_uppercase('cAstyoUrFavoRitETVshoWs') == 'cstyoravoitshos'\nassert remove_uppercase('wAtchTheinTernEtrAdIo') == 'wtchheinerntrdo'\nassert remove_uppercase('VoicESeaRchAndreComMendaTionS') == 'oiceachndreomendaion'",
        "canonical_solution": "import re\r\ndef remove_uppercase(str1):\r\n  remove_upper = lambda text: re.sub('[A-Z]', '', text)\r\n  result =  remove_upper(str1)\r\n  return (result)"
    },
    {
        "number": 460,
        "prompt": "Write a python function to get the first element of each sublist.\ndef Extract(lst): \n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    new_lst=[]\n    for i in lst:\n        new_lst.append(i[0])\n    return new_lst\n\nprint(Extract([[1,2,3,4], [5,6,7], [8,9,10]])) # Output: [1, 5, 8]\n\n#Solution:We can iterate over the original list and append the first element of each sublist to a new list using indexing. \n#The new list will contain all the first elements of the sublists. ",
        "generated_testcode": "assert Extract([[1,2,3],[4,5,6],[7,8,9]] ) == [1,4,7]\n",
        "test": "assert Extract([[1, 2], [3, 4, 5], [6, 7, 8, 9]]) == [1, 3, 6]\nassert Extract([[1,2,3],[4, 5]]) == [1,4]\nassert Extract([[9,8,1],[1,2]]) == [9,1]",
        "canonical_solution": "def Extract(lst): \r\n    return [item[0] for item in lst] "
    },
    {
        "number": 461,
        "prompt": "Write a python function to count the upper case characters in a given string.\ndef upper_ctr(str):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    count = 0\n    for i in str:\n        if i.isupper():\n            count += 1\n    return count\n\n#test the function\nprint(upper_ctr(\"Hello World\"))\nprint(upper_ctr(\"HELLO WORLD\"))\nprint(upper_ctr(\"This is an Example\"))\nprint(upper_ctr(\"Python\"))\nprint(upper_ctr(\"12345PYTHON\"))\nprint(upper_ctr(\"AaBbCc\"))\n\n\n\n#Write a Python function to count the number of vowels in a given string\ndef vowel_ctr(str):\n    count = 0\n    vowels = \"AEIOUaeiou\"\n    for i in str:\n        if i in vowels:\n            count += 1\n    return count\n\n#test the function\nprint(vowel_ctr(\"Hello World\"))\nprint(vowel_ctr(\"Python\"))\nprint(vowel_ctr(\"Python Programming\"))\nprint(vowel_ctr(\"AaBbCc\"))\nprint(vowel_ctr(\"EeEeEeEe\"))\n\n\n#Write a Python function to count the number of digits in a given string\ndef digit_ctr(str):\n    count = 0\n    for i in str:\n        if i.isdigit():\n            count += 1\n    return count\n\n#test the function\nprint(digit_ctr(\"Hello World\"))\nprint(digit_ctr(\"123456789\"))\nprint",
        "generated_testcode": "assert upper_ctr(None) == 0\n",
        "test": "assert upper_ctr('PYthon') == 1\nassert upper_ctr('BigData') == 1\nassert upper_ctr('program') == 0",
        "canonical_solution": "def upper_ctr(str):\r\n    upper_ctr = 0\r\n    for i in range(len(str)):\r\n          if str[i] >= 'A' and str[i] <= 'Z': upper_ctr += 1\r\n          return upper_ctr"
    },
    {
        "number": 462,
        "prompt": "Write a function to find all possible combinations of the elements of a given list.\ndef combinations_list(list1):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    # base case\n    if len(list1) == 0:\n        return []\n    elif len(list1) == 1:\n        return [[x] for x in list1]\n    else:\n        # recursive case\n        combinations = []\n        for i in range(len(list1)):\n            # select the current element\n            current_elem = list1[i]\n            # exclude the current element\n            remaining_list = list1[:i] + list1[i+1:]\n            # find combinations of the remaining elements\n            remaining_combinations = combinations_list(remaining_list)\n            # add the current element to each of the combinations\n            for comb in remaining_combinations:\n                combinations.append([current_elem] + comb)\n        return combinations\n\n\n# Test the function\nprint(combinations_list([1, 2, 3, 4]))\n# Output: [[1], [2], [3], [4], [1, 2], [1, 3], [1, 4], [2, 3], [2, 4], [3, 4], [1, 2, 3], [1, 2, 4], [1, 3, 4], [2, 3, 4]]\nprint(combinations_list([1, 2, 3, 4, 5]))\n# Output: [[1], [2], [3], [4], [5], [1, 2], [1, 3], [",
        "generated_testcode": "assert combinations_list([\"a\", \"b\", \"c\", \"d\"] == [\"a\", \"b\", \"c\", \"ab\", \"ac\", \"ad\", \"bc\", \"bd\", \"cd\", \"abc\", \"abd\", \"acd\", \"bcd\", \"abcd\"])\n",
        "test": "assert combinations_list(['orange', 'red', 'green', 'blue'])==[[], ['orange'], ['red'], ['red', 'orange'], ['green'], ['green', 'orange'], ['green', 'red'], ['green', 'red', 'orange'], ['blue'], ['blue', 'orange'], ['blue', 'red'], ['blue', 'red', 'orange'], ['blue', 'green'], ['blue', 'green', 'orange'], ['blue', 'green', 'red'], ['blue', 'green', 'red', 'orange']]\nassert combinations_list(['red', 'green', 'blue', 'white', 'black', 'orange'])==[[], ['red'], ['green'], ['green', 'red'], ['blue'], ['blue', 'red'], ['blue', 'green'], ['blue', 'green', 'red'], ['white'], ['white', 'red'], ['white', 'green'], ['white', 'green', 'red'], ['white', 'blue'], ['white', 'blue', 'red'], ['white', 'blue', 'green'], ['white', 'blue', 'green', 'red'], ['black'], ['black', 'red'], ['black', 'green'], ['black', 'green', 'red'], ['black', 'blue'], ['black', 'blue', 'red'], ['black', 'blue', 'green'], ['black', 'blue', 'green', 'red'], ['black', 'white'], ['black', 'white', 'red'], ['black', 'white', 'green'], ['black', 'white', 'green', 'red'], ['black', 'white', 'blue'], ['black', 'white', 'blue', 'red'], ['black', 'white', 'blue', 'green'], ['black', 'white', 'blue', 'green', 'red'], ['orange'], ['orange', 'red'], ['orange', 'green'], ['orange', 'green', 'red'], ['orange', 'blue'], ['orange', 'blue', 'red'], ['orange', 'blue', 'green'], ['orange', 'blue', 'green', 'red'], ['orange', 'white'], ['orange', 'white', 'red'], ['orange', 'white', 'green'], ['orange', 'white', 'green', 'red'], ['orange', 'white', 'blue'], ['orange', 'white', 'blue', 'red'], ['orange', 'white', 'blue', 'green'], ['orange', 'white', 'blue', 'green', 'red'], ['orange', 'black'], ['orange', 'black', 'red'], ['orange', 'black', 'green'], ['orange', 'black', 'green', 'red'], ['orange', 'black', 'blue'], ['orange', 'black', 'blue', 'red'], ['orange', 'black', 'blue', 'green'], ['orange', 'black', 'blue', 'green', 'red'], ['orange', 'black', 'white'], ['orange', 'black', 'white', 'red'], ['orange', 'black', 'white', 'green'], ['orange', 'black', 'white', 'green', 'red'], ['orange', 'black', 'white', 'blue'], ['orange', 'black', 'white', 'blue', 'red'], ['orange', 'black', 'white', 'blue', 'green'], ['orange', 'black', 'white', 'blue', 'green', 'red']]\nassert combinations_list(['red', 'green', 'black', 'orange'])==[[], ['red'], ['green'], ['green', 'red'], ['black'], ['black', 'red'], ['black', 'green'], ['black', 'green', 'red'], ['orange'], ['orange', 'red'], ['orange', 'green'], ['orange', 'green', 'red'], ['orange', 'black'], ['orange', 'black', 'red'], ['orange', 'black', 'green'], ['orange', 'black', 'green', 'red']]",
        "canonical_solution": "def combinations_list(list1):\r\n    if len(list1) == 0:\r\n        return [[]]\r\n    result = []\r\n    for el in combinations_list(list1[1:]):\r\n        result += [el, el+[list1[0]]]\r\n    return result"
    },
    {
        "number": 463,
        "prompt": "Write a function to find the maximum product subarray of the given array.\ndef max_subarray_product(arr):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    max_product = arr[0]\n    max_ending = arr[0]\n    min_ending = arr[0]\n    for i in range(1, len(arr)):\n        if arr[i] > 0:\n            max_ending = max(max_ending * arr[i], arr[i])\n            min_ending = min(min_ending * arr[i], arr[i])\n        else:\n            max_ending = max(max_ending, arr[i])\n            min_ending = min(min_ending, arr[i])\n        max_product = max(max_product, max_ending)\n    return max_product\n\n\n# Test cases\nprint(max_subarray_product([2, -1, -3, 0, -1])) # Output: 0\nprint(max_subarray_product([-2, 0, -1])) # Output: 0\nprint(max_subarray_product([-2, 3, -1, -4])) # Output: 24\nprint(max_subarray_product([1, -2, -3, 4, -1])) # Output: 24\nprint(max_subarray_product([-1, -2, -3])) # Output: 6\nprint(max_subarray_product([-100, 0, -20, 10, -10])) # Output: 1000\nprint(max_subarray_product([1, -2, -3, 4",
        "generated_testcode": "assert max_subarray_product([2, -3, 0, -2, 4, -1, -1, 6, -5, 4] ) == 24\n",
        "test": "assert max_subarray_product([1, -2, -3, 0, 7, -8, -2]) == 112\nassert max_subarray_product([6, -3, -10, 0, 2]) == 180 \nassert max_subarray_product([-2, -40, 0, -2, -3]) == 80",
        "canonical_solution": "def max_subarray_product(arr):\r\n\tn = len(arr)\r\n\tmax_ending_here = 1\r\n\tmin_ending_here = 1\r\n\tmax_so_far = 0\r\n\tflag = 0\r\n\tfor i in range(0, n):\r\n\t\tif arr[i] > 0:\r\n\t\t\tmax_ending_here = max_ending_here * arr[i]\r\n\t\t\tmin_ending_here = min (min_ending_here * arr[i], 1)\r\n\t\t\tflag = 1\r\n\t\telif arr[i] == 0:\r\n\t\t\tmax_ending_here = 1\r\n\t\t\tmin_ending_here = 1\r\n\t\telse:\r\n\t\t\ttemp = max_ending_here\r\n\t\t\tmax_ending_here = max (min_ending_here * arr[i], 1)\r\n\t\t\tmin_ending_here = temp * arr[i]\r\n\t\tif (max_so_far < max_ending_here):\r\n\t\t\tmax_so_far = max_ending_here\r\n\tif flag == 0 and max_so_far == 0:\r\n\t\treturn 0\r\n\treturn max_so_far"
    },
    {
        "number": 464,
        "prompt": "Write a function to check if all values are same in a dictionary.\ndef check_value(dict, n):\n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    return len(set(dict.values())) == 1\n\n\n# Testing the function\nd = {\"apple\": 1, \"orange\": 1, \"banana\": 1}\nprint(check_value(d, 3)) # True\nd = {\"apple\": 1, \"orange\": 2, \"banana\": 1}\nprint(check_value(d, 3)) # False\nd = {\"apple\": 1, \"orange\": 1, \"banana\": 1, \"grape\": 1}\nprint(check_value(d, 3)) # False\n\nd = {\"apple\": 1, \"orange\": 1, \"banana\": 2, \"grape\": 1}\nprint(check_value(d, 3)) # False\nd = {\"apple\": 1, \"orange\": 1, \"banana\": 1, \"grape\": 1}\nprint(check_value(d, 4)) # True\n\nd = {\"apple\": 1, \"orange\": 1, \"banana\": 1, \"grape\": 2}\nprint(check_value(d, 3)) # False\nd = {\"apple\": 1, \"orange\": 1, \"banana\": 1, \"grape\": 2}\nprint(check_value(d, 4)) # True",
        "generated_testcode": "assert check_value({'a': 1, 'b': 1, 'c': 1, 'd': 1, 'e': 1} , 1) == True\n",
        "test": "assert check_value({'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12},10)==False\nassert check_value({'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12},12)==True\nassert check_value({'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12},5)==False",
        "canonical_solution": "def check_value(dict, n):\r\n    result = all(x == n for x in dict.values()) \r\n    return result"
    },
    {
        "number": 465,
        "prompt": "Write a function to drop empty items from a given dictionary.\ndef drop_empty(dict1):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    new_dict = {}\n    for key, value in dict1.items():\n        if value:\n            new_dict[key] = value\n    return new_dict\n\n# Test the function with the given dictionary\nmy_dict = {'name': '', 'age': None, 'city': 'London', 'country': 'UK', 'email': 'example@example.com', 'phone': '', 'address': ' '}\nprint(drop_empty(my_dict)) # Output: {'city': 'London', 'country': 'UK', 'email': 'example@example.com'}\n",
        "generated_testcode": "assert drop_empty(dict(a=1, b='', c=None, d=[], e='hello', f=dict(g=5)) == {'e': 'hello', 'f': {'g': 5})\n",
        "test": "assert drop_empty({'c1': 'Red', 'c2': 'Green', 'c3':None})=={'c1': 'Red', 'c2': 'Green'}\nassert drop_empty({'c1': 'Red', 'c2': None, 'c3':None})=={'c1': 'Red'}\nassert drop_empty({'c1': None, 'c2': 'Green', 'c3':None})=={ 'c2': 'Green'}",
        "canonical_solution": "def drop_empty(dict1):\r\n  dict1 = {key:value for (key, value) in dict1.items() if value is not None}\r\n  return dict1"
    },
    {
        "number": 466,
        "prompt": "Write a function to find the peak element in the given array.\ndef find_peak_util(arr, low, high, n): \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    if low == high: \n        return arr[low] \n    if high == low + 1: \n        if arr[low] > arr[high]: \n            return arr[low] \n        else: \n            return arr[high] \n    mid = (low + high) // 2\n    if arr[mid] > arr[mid - 1] and arr[mid] > arr[mid + 1]: \n        return arr[mid] \n    elif arr[mid] > arr[low]: \n        return find_peak_util(arr, (mid + 1), high, n) \n    else: \n        return find_peak_util(arr, low, (mid - 1), n) \n\n\ndef find_peak(arr): \n    n = len(arr) \n    return find_peak_util(arr, 0, n - 1) \n\n\n# Driver code \narr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22] \nprint(\"The peak element is\", find_peak(arr)) ",
        "generated_testcode": "assert find_peak_util([1, 2, 3, 1], 0, 3) == 2\n",
        "test": "assert find_peak([1, 3, 20, 4, 1, 0], 6) == 2\nassert find_peak([2, 3, 4, 5, 6], 5) == 4\nassert find_peak([8, 9, 11, 12, 14, 15], 6) == 5 ",
        "canonical_solution": "def find_peak_util(arr, low, high, n): \r\n\tmid = low + (high - low)/2\r\n\tmid = int(mid) \r\n\tif ((mid == 0 or arr[mid - 1] <= arr[mid]) and\r\n\t\t(mid == n - 1 or arr[mid + 1] <= arr[mid])): \r\n\t\treturn mid \r\n\telif (mid > 0 and arr[mid - 1] > arr[mid]): \r\n\t\treturn find_peak_util(arr, low, (mid - 1), n) \r\n\telse: \r\n\t\treturn find_peak_util(arr, (mid + 1), high, n) \r\ndef find_peak(arr, n): \r\n\treturn find_peak_util(arr, 0, n - 1, n) "
    },
    {
        "number": 467,
        "prompt": "Write a python function to convert decimal number to octal number.\ndef decimal_to_Octal(deciNum):\n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    octal_num = ''\n    while deciNum > 0:\n        remainder = deciNum % 8\n        octal_num = str(remainder) + octal_num\n        deciNum //= 8\n    return octal_num\n\n# Test the function\nprint(decimal_to_Octal(45))\nprint(decimal_to_Octal(50))\nprint(decimal_to_Octal(72))\nprint(decimal_to_Octal(1000))\nprint(decimal_to_Octal(1001))\n\n\n# Output:\n# 5\n# 64\n# 66\n# 64\n# 65",
        "generated_testcode": "assert decimal_to_Octal(10) == '12'\n",
        "test": "assert decimal_to_Octal(10) == 12\nassert decimal_to_Octal(2) == 2\nassert decimal_to_Octal(33) == 41",
        "canonical_solution": "def decimal_to_Octal(deciNum):\r\n    octalNum = 0\r\n    countval = 1;\r\n    dNo = deciNum;\r\n    while (deciNum!= 0):\r\n        remainder= deciNum % 8;\r\n        octalNum+= remainder*countval;\r\n        countval= countval*10;\r\n        deciNum //= 8; \r\n    return (octalNum)"
    },
    {
        "number": 468,
        "prompt": "Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\ndef max_product(arr, n ): \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    if n < 2: \n        return -1\n    dp = [1]*n \n    dp[0] = arr[0] \n    dp[1] = max(arr[0], arr[1]) \n  \n    for i in range(2, n): \n        dp[i] = max(dp[i-1]*arr[i], dp[i], arr[i]) \n    max1 = dp[0] \n    max2 = dp[1] \n    for i in range(2, n): \n        max1 = max(max1, dp[i]) \n        if max1 < 0: \n            max1 *= arr[i] \n        else: \n            max2 = max(max2, dp[i]) \n    return max(max1 * max2, max1) ",
        "generated_testcode": "assert max_product([1, 10, 2, 3, 4, 5, 6, 7, 8, 9] ) == 90\n",
        "test": "assert max_product([3, 100, 4, 5, 150, 6], 6) == 45000 \nassert max_product([4, 42, 55, 68, 80], 5) == 50265600\nassert max_product([10, 22, 9, 33, 21, 50, 41, 60], 8) == 21780000 ",
        "canonical_solution": "def max_product(arr, n ): \r\n\tmpis =[0] * (n) \r\n\tfor i in range(n): \r\n\t\tmpis[i] = arr[i] \r\n\tfor i in range(1, n): \r\n\t\tfor j in range(i): \r\n\t\t\tif (arr[i] > arr[j] and\r\n\t\t\t\t\tmpis[i] < (mpis[j] * arr[i])): \r\n\t\t\t\t\t\tmpis[i] = mpis[j] * arr[i] \r\n\treturn max(mpis)"
    },
    {
        "number": 469,
        "prompt": "Write a function to find the maximum profit earned from a maximum of k stock transactions\ndef max_profit(price, k):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    if not price or k == 0 or k >= len(price) - 1:\n        return 0\n    n = len(price)\n    if k >= n // 2:\n        return max_profit_k_times(price)\n\n    max_profit = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            for p in range(k):\n                max_profit = max(max_profit, max_profit_k_times(price, i, j, p))\n    return max_profit\n\n\ndef max_profit_k_times(price, start=0, end=None, k=1):\n    if end is None:\n        end = len(price)\n    if end - start <= 1:\n        return 0\n    if k == 0:\n        return 0\n\n    min_price = float('inf')\n    max_profit = 0\n    for i in range(start, end):\n        min_price = min(min_price, price[i])\n        max_profit = max(max_profit, price[i] - min_price)\n    return max_profit + max_profit_k_times(price, end, k - 1)\n\n\n# Test cases\nprint(max_profit([10, 22, 5, 75, 65, 30, 60, 80], 2))",
        "generated_testcode": "assert max_profit(prices=[10, 22, 5, 75, 65, 30, 50, 60, 80], k=2) == 87\n",
        "test": "assert max_profit([1, 5, 2, 3, 7, 6, 4, 5], 3) == 10\nassert max_profit([2, 4, 7, 5, 4, 3, 5], 2) == 7\nassert max_profit([10, 6, 8, 4, 2], 2) == 2",
        "canonical_solution": "def max_profit(price, k):\r\n    n = len(price)\r\n    final_profit = [[None for x in range(n)] for y in range(k + 1)]\r\n    for i in range(k + 1):\r\n        for j in range(n):\r\n            if i == 0 or j == 0:\r\n                final_profit[i][j] = 0\r\n            else:\r\n                max_so_far = 0\r\n                for x in range(j):\r\n                    curr_price = price[j] - price[x] + final_profit[i-1][x]\r\n                    if max_so_far < curr_price:\r\n                        max_so_far = curr_price\r\n                final_profit[i][j] = max(final_profit[i][j-1], max_so_far)\r\n    return final_profit[k][n-1]"
    },
    {
        "number": 470,
        "prompt": "Write a function to find the pairwise addition of the elements of the given tuples.\ndef add_pairwise(test_tup):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    return tuple(map(sum, zip(test_tup, test_tup))\n\n\n# Test cases\nprint(add_pairwise((1, 2, 3)))  # Output: (3, 4, 5)\nprint(add_pairwise((5, 6, 7, 8))  # Output: (11, 12, 13)\nprint(add_pairwise((-1, 0, 1)))  # Output: (0, 1, 2)\n\n# Time complexity: O(n)\n# Space complexity: O(n)\n\n# We can iterate over the tuple using the zip function and the map function to perform the addition of the elements pairwise and return the new tuple. ",
        "generated_testcode": "assert add_pairwise(()) == ()\n",
        "test": "assert add_pairwise((1, 5, 7, 8, 10)) == (6, 12, 15, 18)\nassert add_pairwise((2, 6, 8, 9, 11)) == (8, 14, 17, 20)\nassert add_pairwise((3, 7, 9, 10, 12)) == (10, 16, 19, 22)",
        "canonical_solution": "def add_pairwise(test_tup):\r\n  res = tuple(i + j for i, j in zip(test_tup, test_tup[1:]))\r\n  return (res) "
    },
    {
        "number": 471,
        "prompt": "Write a python function to find remainder of array multiplication divided by n.\ndef find_remainder(arr, lens, n): \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    def multiply(arr, n): \n        res = 0\n        for i in range(lens): \n            res = (res + arr[i]) % n \n        return res \n\n    return (multiply(arr, n) % n) \n  \n# Driver Code \narr = [1, 2, 3, 4, 5, 6, 7, 8] \nn = 7\nlens = len(arr) \nprint(\"Array:\", arr) \nprint(\"Length of array:\", lens) \nprint(\"Value of n:\", n) \nprint(\"Remainder:\", find_remainder(arr, lens, n)) \n  \n# Output: \n# Array: [1, 2, 3, 4, 5, 6, 7, 8] \n# Length of array: 5 \n# Value of n: 7 \n# Remainder: 1 ",
        "generated_testcode": "assert find_remainder([1, 2, 3, 4, 5], 5, 3) == 1\n",
        "test": "assert find_remainder([ 100, 10, 5, 25, 35, 14 ],6,11) ==9\nassert find_remainder([1,1,1],3,1) == 0\nassert find_remainder([1,2,1],3,2) == 0",
        "canonical_solution": "def find_remainder(arr, lens, n): \r\n    mul = 1\r\n    for i in range(lens):  \r\n        mul = (mul * (arr[i] % n)) % n \r\n    return mul % n "
    },
    {
        "number": 472,
        "prompt": "Write a python function to check whether the given list contains consecutive numbers or not.\ndef check_Consecutive(l): \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    if len(l)==1:\n        return True\n    for i in range(1,len(l)-1):\n        if l[i]-l[i-1]==1 and l[i]-l[i+1]==1:\n            return True\n    return False\n\n#test cases\nprint(check_Consecutive([1,2,3,4,5,6])) # True\nprint(check_Consecutive([1,3,4,6,7,8])) # False\nprint(check_Consecutive([1,2,3,5,6,7,9])) # True\nprint(check_Consecutive([1,2,4,5,7,8])) # False\n\n",
        "generated_testcode": "assert check_Consecutive([1,2,3,4,5,6,7,8,9] == True)\n",
        "test": "assert check_Consecutive([1,2,3,4,5]) == True\nassert check_Consecutive([1,2,3,5,6]) == False\nassert check_Consecutive([1,2,1]) == False",
        "canonical_solution": "def check_Consecutive(l): \r\n    return sorted(l) == list(range(min(l),max(l)+1)) "
    },
    {
        "number": 473,
        "prompt": "Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\ndef tuple_intersection(test_list1, test_list2):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    intersection = []\n    for tuple1 in test_list1:\n        for tuple2 in test_list2:\n            if tuple1[0] == tuple2[0] and tuple1[1] == tuple2[1]:\n                intersection.append(tuple1)\n    return intersection\n\n# Test the function\nlist1 = [(1, 2), (3, 4), (5, 6), (7, 8), (9, 10), (11, 12)]\nlist2 = [(3, 4), (5, 6), (11, 12), (13, 14), (15, 16)]\nprint(tuple_intersection(list1, list2))\n# Output: [(3, 4), (5, 6), (11, 12)]\n\nlist1 = [(1, 2), (3, 4), (5, 6), (7, 8), (9, 10), (11, 12)]\nlist2 = [(11, 12), (3, 4), (7, 8), (13, 14), (15, 16)]\nprint(tuple_intersection(list1, list2))\n# Output: [(3, 4), (5, 6), (7, 8), (11, 12)]\n\nlist1 = [(1, 2), (3, 4), (5, 6), (7, 8), (",
        "generated_testcode": "assert tuple_intersection((), ()) == ()\n",
        "test": "assert tuple_intersection([(3, 4), (5, 6), (9, 10), (4, 5)] , [(5, 4), (3, 4), (6, 5), (9, 11)]) == {(4, 5), (3, 4), (5, 6)}\nassert tuple_intersection([(4, 1), (7, 4), (11, 13), (17, 14)] , [(1, 4), (7, 4), (16, 12), (10, 13)]) == {(4, 7), (1, 4)}\nassert tuple_intersection([(2, 1), (3, 2), (1, 3), (1, 4)] , [(11, 2), (2, 3), (6, 2), (1, 3)]) == {(1, 3), (2, 3)}",
        "canonical_solution": "def tuple_intersection(test_list1, test_list2):\r\n  res = set([tuple(sorted(ele)) for ele in test_list1]) & set([tuple(sorted(ele)) for ele in test_list2])\r\n  return (res)"
    },
    {
        "number": 474,
        "prompt": "Write a function to replace characters in a string.\ndef replace_char(str1,ch,newch):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    \"\"\"\n    This function replaces the characters in a string with the new character.\n    :param str1: String\n    :param ch: character to be replaced\n    :param newch: new character to be replaced\n    :return: new string with replaced characters\n    \"\"\"\n    # input validation\n    if not isinstance(str1,str) or not isinstance(ch,str) or not isinstance(newch,str):\n        raise TypeError(\"All input should be strings\")\n\n    if len(ch) != 1 or len(newch) != 1:\n        raise ValueError(\"Both ch and newch should be of length 1\")\n\n    # iterate through the string and replace characters\n    new_str = \"\"\n    for i in str1:\n        if i == ch:\n            new_str += newch\n        else:\n            new_str += i\n    return new_str\n\n\n# test the function\nprint(replace_char(\"hello\",\"l\",\"z\")) # expected output:hezzo\nprint(replace_char(\"python\",\"o\",\"a\")) # expected output:phant",
        "generated_testcode": "assert replace_char(str1=\"hello world\",ch=\"l\",newch=\"L\") == \"heLLo worlD\"\n",
        "test": "assert replace_char(\"polygon\",'y','l')==(\"pollgon\")\nassert replace_char(\"character\",'c','a')==(\"aharaater\")\nassert replace_char(\"python\",'l','a')==(\"python\")",
        "canonical_solution": "def replace_char(str1,ch,newch):\r\n str2 = str1.replace(ch, newch)\r\n return str2"
    },
    {
        "number": 475,
        "prompt": "Write a function to sort counter by value.\ndef sort_counter(dict1):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    sorted_dict = dict(sorted(dict1.items(), key=lambda x: x[1], reverse=True))\n    return sorted_dict\n\n# Example usage:\ncounter = {'apple': 5, 'banana': 2, 'orange': 1, 'grape': 3}\nprint(sort_counter(counter))\n# Output: {'grape': 3, 'apple': 5, 'banana': 2}\n\n\ncounter = {'apple': 5, 'banana': 2, 'orange': 1, 'grape': 3}\nsorted_counter = sort_counter(counter)\nprint(sorted_counter)\n# Output: {'grape': 3, 'apple': 5, 'banana': 2}\n\n\n# Sort dictionary by value in descending order\n\ndef sort_counter(dict1):\n    return dict(sorted(dict1.items(), key=lambda x: x[1], reverse=True))\n\n# Example usage:\ncounter = {'apple': 5, 'banana': 2, 'orange': 1, 'grape': 3}\nprint(sort_counter(counter))\n# Output: {'grape': 3, 'apple': 5, 'banana': 2}\n\n\ncounter = {'apple': 5, 'banana': 2, 'orange': 1, 'grape': 3}\nsorted_counter = sort_counter(counter)\nprint(sorted_counter)\n# Output: {'grape':",
        "generated_testcode": "assert sort_counter(Counter({\"a\": 3, \"b\": 1, \"c\": 2, \"d\": 2}) == {\"c\": 2, \"b\": 1, \"a\": 3, \"d\": 2}\n",
        "test": "assert sort_counter({'Math':81, 'Physics':83, 'Chemistry':87})==[('Chemistry', 87), ('Physics', 83), ('Math', 81)]\nassert sort_counter({'Math':400, 'Physics':300, 'Chemistry':250})==[('Math', 400), ('Physics', 300), ('Chemistry', 250)]\nassert sort_counter({'Math':900, 'Physics':1000, 'Chemistry':1250})==[('Chemistry', 1250), ('Physics', 1000), ('Math', 900)]",
        "canonical_solution": "from collections import Counter\r\ndef sort_counter(dict1):\r\n x = Counter(dict1)\r\n sort_counter=x.most_common()\r\n return sort_counter"
    },
    {
        "number": 476,
        "prompt": "Write a python function to find the sum of the largest and smallest value in a given array.\ndef big_sum(nums):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    if len(nums) == 0:\n        return None\n    elif len(nums) == 1:\n        return nums[0]\n    else:\n        max_val = nums[0]\n        min_val = nums[0]\n        for i in nums:\n            if i > max_val:\n                max_val = i\n            elif i < min_val:\n                min_val = i\n    return max_val + min_val\n\n\nprint(big_sum([1,2,3,4,5,6,7,8,9,10]))\n\n# Output: 19\n\nprint(big_sum([-1,0,1,2,-3,4,-5]))\n# Output: -1\n\nprint(big_sum([10]))\n# Output: 10\n\nprint(big_sum([]))\n# Output: None\n",
        "generated_testcode": "assert big_sum([1, 2, 3, 4, 5, 6, 7, 8, 9] ) == 17\n",
        "test": "assert big_sum([1,2,3]) == 4\nassert big_sum([-1,2,3,4]) == 3\nassert big_sum([2,3,6]) == 8",
        "canonical_solution": "def big_sum(nums):\r\n      sum= max(nums)+min(nums)\r\n      return sum"
    },
    {
        "number": 477,
        "prompt": "Write a python function to convert the given string to lower case.\ndef is_lower(string):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    result = \"\"\n    for char in string:\n        if char.isupper():\n            result += chr(ord(char) + 32)\n        else:\n            result += char\n    return result\n\n# Test the function\nstring = \"HELLO WORLD\"\nprint(is_lower(string))  # output: hello world\n\n\n# Test the function\nstring = \"THIS IS A TEST\"\nprint(is_lower(string))  # output: this is a test\n\n\n# Test the function\nstring = \"Python is awesome\"\nprint(is_lower(string))  # output: python is awesome\n\n\n# Test the function\nstring = \"AbCdEfG\"\nprint(is_lower(string))  # output: abcfg\n\n\n# Test the function\nstring = \"123aBcDe\"\nprint(is_lower(string))  # output: 123abcde\n\n\n# Test the function\nstring = \"   The quick brown fox jumps over the lazy dog  \"\nprint(is_lower(string))  # output:   the quick brown fox jumps over the lazy dog ",
        "generated_testcode": "assert is_lower(None) == False\n",
        "test": "assert is_lower(\"InValid\") == \"invalid\"\nassert is_lower(\"TruE\") == \"true\"\nassert is_lower(\"SenTenCE\") == \"sentence\"",
        "canonical_solution": "def is_lower(string):\r\n  return (string.lower())"
    },
    {
        "number": 478,
        "prompt": "Write a function to remove lowercase substrings from a given string.\ndef remove_lowercase(str1):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    uppercase_str = \"\"\n    for i in str1:\n        if i.isupper():\n            uppercase_str += i\n    return uppercase_str\n\n\n#Test the function with an example string\nprint(remove_lowercase(\"Hello World\"))  # Output: \"HW\"\nprint(remove_lowercase(\"Python is fun\")) # Output: \"Py\"\nprint(remove_lowercase(\"The quick brown fox jumps over the lazy dog\")) # Output: \"Thqckbrwnfxjmpsvtlydg\"\n\n",
        "generated_testcode": "assert remove_lowercase(None) == None\n",
        "test": "assert remove_lowercase(\"PYTHon\")==('PYTH')\nassert remove_lowercase(\"FInD\")==('FID')\nassert remove_lowercase(\"STRinG\")==('STRG')",
        "canonical_solution": "import re\r\ndef remove_lowercase(str1):\r\n remove_lower = lambda text: re.sub('[a-z]', '', text)\r\n result =  remove_lower(str1)\r\n return result"
    },
    {
        "number": 479,
        "prompt": "Write a python function to find the first digit of a given number.\ndef first_Digit(n) :  \n",
        "checkpoint": "7B",
        "pass": 3,
        "correct": true,
        "answer": "    return int(str(n)[:1])  \n  \n#Test the function with some inputs  \nprint(first_Digit(12345))  \nprint(first_Digit(99999))  \nprint(first_Digit(100000)) ",
        "generated_testcode": "assert first_Digit(12345) == 1\n",
        "test": "assert first_Digit(123) == 1\nassert first_Digit(456) == 4\nassert first_Digit(12) == 1",
        "canonical_solution": "def first_Digit(n) :  \r\n    while n >= 10:  \r\n        n = n / 10; \r\n    return int(n) "
    },
    {
        "number": 480,
        "prompt": "Write a python function to find the maximum occurring character in a given string.\ndef get_max_occuring_char(str1):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    char_dict = {}\n    for char in str1:\n        if char in char_dict:\n            char_dict[char] += 1\n        else:\n            char_dict[char] = 1\n    max_char = ''\n    max_count = 0\n    for key, value in char_dict.items():\n        if value > max_count:\n            max_char = key\n            max_count = value\n    return max_char\n\n\n# Test the function\nstr1 = \"hello world\"\nprint(get_max_occuring_char(str1)) # Expected output: 'l'\n\nstr2 = \"mississippi\"\nprint(get_max_occuring_char(str2)) # Expected output: 'i'\n\nstr3 = \"aabbccddeeff\"\nprint(get_max_occuring_char(str3)) # Expected output: 'a'\n\nstr4 = \"abcdefg\"\nprint(get_max_occuring_char(str4)) # Expected output: 'a'\nstr5 = \"aabbbccddeee\"\nprint(get_max_occuring_char(str5)) # Expected output: 'b'\n\n\n# Solution\ndef get_max_occuring_char(str1):\n    char_dict = {}\n    for char in str1:\n        if char in char_dict:\n            char_dict[char] += 1\n        else:\n            char_",
        "generated_testcode": "assert get_max_occuring_char(str1) == 'a'\n",
        "test": "assert get_max_occuring_char(\"data\") == \"a\"\nassert get_max_occuring_char(\"create\") == \"e\"\nassert get_max_occuring_char(\"brilliant girl\") == \"i\"",
        "canonical_solution": "def get_max_occuring_char(str1):\r\n  ASCII_SIZE = 256\r\n  ctr = [0] * ASCII_SIZE\r\n  max = -1\r\n  ch = ''\r\n  for i in str1:\r\n    ctr[ord(i)]+=1;\r\n  for i in str1:\r\n    if max < ctr[ord(i)]:\r\n      max = ctr[ord(i)]\r\n      ch = i\r\n  return ch"
    },
    {
        "number": 481,
        "prompt": "Write a function to determine if there is a subset of the given set with sum equal to the given sum.\ndef is_subset_sum(set, n, sum):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    def backtrack(set, n, target, subset, index, partial_sum):\n        if partial_sum == target:\n            return True\n        if index == n:\n            return False\n        if partial_sum < target:\n            return backtrack(set, n, subset, index + 1, partial_sum + set[index])\n        return backtrack(set, n, subset, index + 1, partial_sum) or backtrack(set, n, subset, index + 1, partial_sum + set[index])\n\n    subset = set[:]\n    subset.sort(reverse=True)\n    return backtrack(subset, n, 0, 0, 0)\n\n\ndef main():\n    set = [int(x) for x in input(\"Enter the set of integers: \").split()]\n    sum = int(input(\"Enter the sum: \"))\n    if is_subset_sum(set, len(set), sum):\n        print(\"There is a subset with sum equal to the given sum.\")\n    else:\n        print(\"There is no subset with sum equal to the given sum.\")\n\nif __name__ == \"__main__\":\n    main()\n\n#Example:\n# Input:\n# Enter the set of integers: 1 2 3 5 7 8 9\n# Enter the sum: 12\n# Output:\n# There is a subset with sum equal to the given sum.\n\n\n# Input:\n# Enter the set of integers: 1 2 3",
        "generated_testcode": "assert is_subset_sum(set([1, 2, 3, 4, 5, 6, 7, 8, 9], 15) == True\n",
        "test": "assert is_subset_sum([3, 34, 4, 12, 5, 2], 6, 9) == True\nassert is_subset_sum([3, 34, 4, 12, 5, 2], 6, 30) == False\nassert is_subset_sum([3, 34, 4, 12, 5, 2], 6, 15) == True",
        "canonical_solution": "def is_subset_sum(set, n, sum):\r\n\tif (sum == 0):\r\n\t\treturn True\r\n\tif (n == 0):\r\n\t\treturn False\r\n\tif (set[n - 1] > sum):\r\n\t\treturn is_subset_sum(set, n - 1, sum)\r\n\treturn is_subset_sum(set, n-1, sum) or is_subset_sum(set, n-1, sum-set[n-1])"
    },
    {
        "number": 482,
        "prompt": "Write a function to find sequences of one upper case letter followed by lower case letters in the given string by using regex.\ndef match(text): \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    import re\n    pattern = re.compile(r'[A-Z][a-z]+')\n    return pattern.findall(text)\n\n#test the function with sample inputs\nprint(match(\"HeLLoWoRLD\"))  # output: ['He', 'o', 'Wo', 'r', 'D']\nprint(match(\"hEllo\"))    # output: []\nprint(match(\"AaBbCc\"))   # output: ['A', 'b', 'c'] ",
        "generated_testcode": "assert match(text=\"HelloWorld\") == \"HW\"\n",
        "test": "assert match(\"Geeks\") == 'Yes'\nassert match(\"geeksforGeeks\") == 'Yes'\nassert match(\"geeks\") == 'No'",
        "canonical_solution": "import re \r\ndef match(text): \r\n\t\tpattern = '[A-Z]+[a-z]+$'\r\n\t\tif re.search(pattern, text): \r\n\t\t\t\treturn('Yes') \r\n\t\telse: \r\n\t\t\t\treturn('No') "
    },
    {
        "number": 483,
        "prompt": "Write a python function to find the first natural number whose factorial is divisible by x.\ndef first_Factorial_Divisible_Number(x): \n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": true,
        "answer": "    def factorial(n):\n        if n == 1:\n            return 1\n        else:\n            return n * factorial(n-1)\n    num = 1\n    while True:\n        if factorial(num) % x == 0:\n            return num\n        num += 1\n\n# Test the function with the given test cases\nprint(first_Factorial_Divisible_Number(10))\nprint(first_Factorial_Divisible_Number(12))\nprint(first_Factorial_Divisible_Number(20))\nprint(first_Factorial_Divisible_Number(50))\nprint(first_Factorial_Divisible_Number(100))\nprint(first_Factorial_Divisible_Number(1000))\nprint(first_Factorial_Divisible_Number(200))\nprint(first_Factorial_Divisible_Number(500))\nprint(first_Factorial_Divisible_Number(10000))\nprint(first_Factorial_Divisible_Number(100000))\nprint(first_Factorial_Divisible_Number(1000000))",
        "generated_testcode": "assert first_Factorial_Divisible_Number(10) == 5 # 5! = 120, 120 is the first number whose factorial is divisible by 10\n",
        "test": "assert first_Factorial_Divisible_Number(10) == 5\nassert first_Factorial_Divisible_Number(15) == 5\nassert first_Factorial_Divisible_Number(5) == 4",
        "canonical_solution": "def first_Factorial_Divisible_Number(x): \r\n    i = 1;\r\n    fact = 1; \r\n    for i in range(1,x): \r\n        fact = fact * i \r\n        if (fact % x == 0): \r\n            break\r\n    return i "
    },
    {
        "number": 484,
        "prompt": "Write a function to remove the matching tuples from the given two tuples.\ndef remove_matching_tuple(test_list1, test_list2):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    result = []\n    for i in test_list1:\n        if i not in test_list2:\n            result.append(i)\n    return result\n\n#Example Usage:\ntest_list1 = [(1,2), (2,3), (4,5), (6,7), (8,9)]\ntest_list2 = [(2,3), (4,5), (10,11)]\nprint(remove_matching_tuple(test_list1, test_list2)) #[(1, 2), (8, 9)] ",
        "generated_testcode": "assert remove_matching_tuple([(1,2,3),(4,5,6),(7,8,9),(1,2,3),(4,5,6),(7,8,9),(10,11,12),(1,2,3),(4,5,6),(7,8,9)], [(1,2,3),(4,5,6),(7,8,9])] == [(10,11,12)], \"Test case 1 failed\"\n",
        "test": "assert remove_matching_tuple([('Hello', 'dude'), ('How', 'are'), ('you', '?')], [('Hello', 'dude'), ('How', 'are')]) == [('you', '?')]\nassert remove_matching_tuple([('Part', 'of'), ('the', 'journey'), ('is ', 'end')], [('Journey', 'the'), ('is', 'end')]) == [('Part', 'of'), ('the', 'journey'), ('is ', 'end')]\nassert remove_matching_tuple([('Its', 'been'), ('a', 'long'), ('day', 'without')], [('a', 'long'), ('my', 'friend')]) == [('Its', 'been'), ('day', 'without')]",
        "canonical_solution": "def remove_matching_tuple(test_list1, test_list2):\r\n  res = [sub for sub in test_list1 if sub not in test_list2]\r\n  return (res) "
    },
    {
        "number": 485,
        "prompt": "Write a function to find the largest palindromic number in the given array.\ndef is_palindrome(n) : \n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    return str(n) == str(n)[::-1]\n\ndef largest_palindrome(arr):\n    max_palindrome = 0\n    for num in arr:\n        if num > max_palindrome and is_palindrome(num):\n            max_palindrome = num\n    return max_palindrome\n\n# Example usage:\narr = [123, 54, 67, 76, 89, 121, 122, 12]\nprint(largest_palindrome(arr)) # Output: 122 ",
        "generated_testcode": "assert is_palindrome(121) == True\n",
        "test": "assert largest_palindrome([1, 232, 54545, 999991], 4) == 54545\nassert largest_palindrome([1, 2, 3, 4, 5, 50], 6) == 5\nassert largest_palindrome([1, 3, 7, 9, 45], 5)  == 9",
        "canonical_solution": "def is_palindrome(n) : \r\n\tdivisor = 1\r\n\twhile (n / divisor >= 10) : \r\n\t\tdivisor *= 10\r\n\twhile (n != 0) : \r\n\t\tleading = n // divisor \r\n\t\ttrailing = n % 10\r\n\t\tif (leading != trailing) : \r\n\t\t\treturn False\r\n\t\tn = (n % divisor) // 10\r\n\t\tdivisor = divisor // 100\r\n\treturn True\r\ndef largest_palindrome(A, n) : \r\n\tA.sort() \r\n\tfor i in range(n - 1, -1, -1) : \r\n\t\tif (is_palindrome(A[i])) : \r\n\t\t\treturn A[i] \r\n\treturn -1"
    },
    {
        "number": 486,
        "prompt": "Write a function to compute binomial probability for the given number.\ndef nCr(n, r): \n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    if r > n: \n        return 0\n    if r == n or r == 0: \n        return 1\n    res = 1\n    for i in range(1, r + 1): \n        res = res * (n - i + 1) // i \n    return res \n\n\n# Function to compute binomial coefficient \ndef binomial_probability(n, x, r, p): \n    return nCr(n, r) * (p**r) * (1 - p)**(n - r) \n\n# Function to compute probability of getting exactly k heads in n tosses \ndef compute_probability(n, k, p): \n    prob = 0\n    for i in range(k, n + 1): \n        prob += binomial_probability(n, i, p) \n    return prob ",
        "generated_testcode": "assert nCr(5, 2) == 10\n",
        "test": "assert binomial_probability(10, 5, 1.0/3) == 0.13656454808718185\nassert binomial_probability(11, 6, 2.0/4) == 0.2255859375\nassert binomial_probability(12, 7, 3.0/5) == 0.227030335488",
        "canonical_solution": "def nCr(n, r): \r\n\tif (r > n / 2): \r\n\t\tr = n - r \r\n\tanswer = 1 \r\n\tfor i in range(1, r + 1): \r\n\t\tanswer *= (n - r + i) \r\n\t\tanswer /= i \r\n\treturn answer \r\ndef binomial_probability(n, k, p): \r\n\treturn (nCr(n, k) * pow(p, k) *\tpow(1 - p, n - k)) "
    },
    {
        "number": 487,
        "prompt": "Write a function to sort a list of tuples in increasing order by the last element in each tuple.\ndef sort_tuple(tup): \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    return sorted(tup, key=lambda x: x[1])\n\n# Test the function with the following input\nt = [(3, 4), (1, 2), (4, 1), (2, 3)]\nprint(sort_tuple(t)) # Output: [(1, 2), (2, 3), (3, 4)]\n\n# Write a function to sort a list of tuples in decreasing order by the second element in each tuple\ndef sort_tuple_desc(tup): \n    return sorted(tup, key=lambda x: x[1], reverse=True)\n\n# Test the function with the following input\nt = [(3, 4), (1, 2), (4, 1), (2, 3)]\nprint(sort_tuple_desc(t)) # Output: [(3, 4), (4, 1), (1, 2)]\n\n# Write a function to sort a list of tuples in decreasing order by the first element in each tuple\ndef sort_tuple_asc(tup): \n    return sorted(tup, key=lambda x: x[0], reverse=True)\n\n# Test the function with the following input\nt = [(3, 4), (1, 2), (4, 1), (2, 3)]\nprint(sort_tuple_asc(t)) # Output: [(4, 1), (3, 4), (2, 3)]\n\n# Write a function to sort a list of tuples by the",
        "generated_testcode": "assert sort_tuple([(1, 2, 3), (4, 5, 1), (6, 2, 4), (3, 1, 2)] ) == [(3, 1, 2), (1, 2, 3), (4, 5, 1), (6, 2, 4)]\n",
        "test": "assert sort_tuple([(1, 3), (3, 2), (2, 1)] ) == [(2, 1), (3, 2), (1, 3)]\nassert sort_tuple([(2, 4), (3, 3), (1, 1)] ) == [(1, 1), (3, 3), (2, 4)]\nassert sort_tuple([(3, 9), (6, 7), (4, 3)] ) == [(4, 3), (6, 7), (3, 9)]",
        "canonical_solution": "def sort_tuple(tup): \r\n\tlst = len(tup) \r\n\tfor i in range(0, lst): \r\n\t\tfor j in range(0, lst-i-1): \r\n\t\t\tif (tup[j][-1] > tup[j + 1][-1]): \r\n\t\t\t\ttemp = tup[j] \r\n\t\t\t\ttup[j]= tup[j + 1] \r\n\t\t\t\ttup[j + 1]= temp \r\n\treturn tup"
    },
    {
        "number": 488,
        "prompt": "Write a function to find the area of a pentagon.\ndef area_pentagon(a):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    #calculate the perimeter of the pentagon\n    perimeter = 5 * a\n    #calculate the semiperimeter\n    s = perimeter / 2\n    #calculate the area using Heron's formula\n    area = (5 * (s * (s - a) * (s - a)) * (s - a)) ** 2\n    return area\n\n#test the function\nprint(area_pentagon(4))\n",
        "generated_testcode": "assert area_pentagon(5) == 50.625\n",
        "test": "assert area_pentagon(5)==43.01193501472417\nassert area_pentagon(10)==172.0477400588967\nassert area_pentagon(15)==387.10741513251753",
        "canonical_solution": "import math\r\ndef area_pentagon(a):\r\n  area=(math.sqrt(5*(5+2*math.sqrt(5)))*pow(a,2))/4.0\r\n  return area"
    },
    {
        "number": 489,
        "prompt": "Write a python function to find the frequency of the largest value in a given array.\ndef frequency_Of_Largest(n,arr): \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    freq = 0\n    max_freq = 0\n    max_val = arr[0]\n    for i in range(n):\n        curr_freq = arr.count(max_val)\n        if curr_freq > max_freq:\n            max_freq = curr_freq\n            max_val = arr[i]\n    return max_freq\n\nn = int(input())\narr = list(map(int,input().split()))\nprint(frequency_Of_Largest(n,arr)) \n\n\n#Example Input:\n#5\n#1 2 3 4 2 1 2\n#Output: 2\n#\n#Explanation: The largest value in the given array is 2 and it appears twice.\n\n#\n#6\n#1 2 3 4 2 1 2 3 2\n#Output: 3\n#\n#Explanation: The largest value in the given array is 3 and it appears three times.\n\n#\n#6\n#1 1 1 1 1 1 1 1 1\n#Output: 1 ",
        "generated_testcode": "assert frequency_Of_Largest(5, [1,2,3,4,5,5,5,5,5,5,6,7,8,9]) == 4\n",
        "test": "assert frequency_Of_Largest(5,[1,2,3,4,4]) == 2\nassert frequency_Of_Largest(3,[5,6,5]) == 1\nassert frequency_Of_Largest(4,[2,7,7,7]) == 3",
        "canonical_solution": "def frequency_Of_Largest(n,arr): \r\n    mn = arr[0] \r\n    freq = 1\r\n    for i in range(1,n): \r\n        if (arr[i] >mn): \r\n            mn = arr[i] \r\n            freq = 1\r\n        elif (arr[i] == mn): \r\n            freq += 1\r\n    return freq "
    },
    {
        "number": 490,
        "prompt": "Write a function to extract all the pairs which are symmetric in the given tuple list.\ndef extract_symmetric(test_list):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    result = []\n    for i in range(len(test_list)):\n        for j in range(i+1,len(test_list)):\n            if (test_list[i] == test_list[j][::-1] and test_list[j] != test_list[i]):\n                result.append((test_list[i],test_list[j]))\n    return result\n\ntest_list = [(1,2,3,4),(1,2,3),(2,3,4),(1,2,4),(2,3,1),(1,4,3),(2,4,3),(1,3,2),(2,4,1),(2,4,3),(1,3,2),(1,3,4),(2,3,4),(1,4,2),(2,4,1) ]\nprint(extract_symmetric(test_list)) # Output: [(1, 2, 3), (1, 2, 4), (2, 3, 1), (2, 3, 4)]\n\ntest_list = [(1,2,3,4),(1,2,3,4),(2,3,1,4),(1,2,4,3),(1,3,2,4),(2,3,1,4),(1,4,3,2),(2,4,1,3),(2,4,3,1),(1,3,4,2),(2,4,3,1),(1,4,2,3)]\nprint(extract",
        "generated_testcode": "assert extract_symmetric([(1,2,3), (2,1), (3,4), (4,3), (5,6), (6,5)] ) == [(1,2), (3,4)]\n",
        "test": "assert extract_symmetric([(6, 7), (2, 3), (7, 6), (9, 8), (10, 2), (8, 9)] ) == {(8, 9), (6, 7)}\nassert extract_symmetric([(7, 8), (3, 4), (8, 7), (10, 9), (11, 3), (9, 10)] ) == {(9, 10), (7, 8)}\nassert extract_symmetric([(8, 9), (4, 5), (9, 8), (11, 10), (12, 4), (10, 11)] ) == {(8, 9), (10, 11)}",
        "canonical_solution": "def extract_symmetric(test_list):\r\n  temp = set(test_list) & {(b, a) for a, b in test_list}\r\n  res = {(a, b) for a, b in temp if a < b}\r\n  return (res) "
    },
    {
        "number": 491,
        "prompt": "Write a function to find the sum of geometric progression series.\ndef sum_gp(a,n,r):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    if r == 1:\n        return n*a\n    else:\n        return (1-r**n)/(1-r) * a\n\na = float(input(\"Enter the first term: \"))\nn = int(input(\"Enter the number of terms: \"))\nr = float(input(\"Enter the common ratio: \"))\nprint(\"The sum of the geometric progression is:\",sum_gp(a,n,r))\n\n#Example:\n#Input:\n#Enter the first term: 2\n#Enter the number of terms: 5\n#Enter the common ratio: 2\n#Output:The sum of the geometric progression is: 40.0\n\n#Explanation:The first term is 2, the number of terms is 5, and the common ratio is 2. The sum of the geometric progression is (2 + 4 + 8 + 16 + 32 + 64) = 40.0. ",
        "generated_testcode": "assert sum_gp(2,3,2) == 112\n",
        "test": "assert sum_gp(1,5,2)==31\nassert sum_gp(1,5,4)==341\nassert sum_gp(2,6,3)==728",
        "canonical_solution": "import math\r\ndef sum_gp(a,n,r):\r\n total = (a * (1 - math.pow(r, n ))) / (1- r)\r\n return total"
    },
    {
        "number": 492,
        "prompt": "Write a function to search an element in the given array by using binary search.\ndef binary_search(item_list,item):\n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    low = 0\n    high = len(item_list) - 1\n    mid = 0\n    \n    while low <= high:\n        mid = (low + high) // 2\n        \n        if item_list[mid] == item:\n            return mid\n        elif item_list[mid] < item:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return -1\n\n\n# Example usage:\nitem_list = [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]\nitem = 8\n\nif binary_search(item_list, item):\n    print(\"Element found at index: \", binary_search(item_list, item))\nelse:\n    print(\"Element not found in the list.\")\n\n",
        "generated_testcode": "assert binary_search([\"apple\", \"banana\", \"cherry\", \"grape\", \"orange\", \"kiwi\"], \"cherry\") == 2\n",
        "test": "assert binary_search([1,2,3,5,8], 6) == False\nassert binary_search([7, 8, 9, 10, 13], 10) == True\nassert binary_search([11, 13, 14, 19, 22, 36], 23) == False",
        "canonical_solution": "def binary_search(item_list,item):\r\n\tfirst = 0\r\n\tlast = len(item_list)-1\r\n\tfound = False\r\n\twhile( first<=last and not found):\r\n\t\tmid = (first + last)//2\r\n\t\tif item_list[mid] == item :\r\n\t\t\tfound = True\r\n\t\telse:\r\n\t\t\tif item < item_list[mid]:\r\n\t\t\t\tlast = mid - 1\r\n\t\t\telse:\r\n\t\t\t\tfirst = mid + 1\t\r\n\treturn found"
    },
    {
        "number": 493,
        "prompt": "Write a function to calculate a grid of hexagon coordinates where function returns a list of lists containing 6 tuples of x, y point coordinates.\ndef calculate_polygons(startx, starty, endx, endy, radius):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    polygons = []\n    for i in range(startx, endx, radius):\n        for j in range(starty, endy, radius):\n            polygons.append([(i, j+radius//2))\n    return polygons\n\n# Test the function\nprint(calculate_polygons(0, 0, 10, 10, 2)) # Should print [[(0, 2), (2, 4), (4, 2), (6, 0), (8, 2), (8, -2), (6, -4), (4, -2), (2, -4), (0, -2)]]\nprint(calculate_polygons(3, 5, 12, 7)) # Should print [[3, 5], [4, 7], [5, 9], [6, 11], [7, 9], [8, 7], [9, 5], [10, 3]]\n\n\n# Write a function to find the center point of a hexagon\ndef hexagon_center(x, y, radius):\n    centerx = x + radius * 2\n    centery = y + radius * (3 ** 0.5) / 2\n    return (centerx, centery)\n\n# Test the function\nprint(hexagon_center(0, 0, 2)) # Should print (2, 1.732)\nprint(hexagon_center(3, 5, 7)) # Should print (8, 11.732)\n\n\n# Write a function to calculate the coordinates of the vertices of a regular hexagon given its center point and side length\ndef hexagon_vertices(centerx, centery, radius):\n    vertices = []\n    theta = 2 * math.pi / 6\n    for i in range(6):\n        x = centerx + radius * math.cos(i * theta)\n        y = centery + radius * math.sin(i * theta)\n        vertices.append((x, y))\n    return vertices\n\n# Test the function\nprint(hexagon_vertices(0, 0, 2)) # Should print [(2.0, 0.0), (4.243, 2.5), (0.0, 4.0), (-2.0, ",
        "generated_testcode": "assert calculate_polygons(0, 0, 10, 10, 5) == [[(0, 0), (5, 0), (10, 5), (10, 10), (5, 15), (0, 10), (0, 5), (5, 0)], (5, 5), (10, 10), (10, 5), (5, 0)]\n\n# Test case 2\n",
        "test": "assert calculate_polygons(1,1, 4, 4, 3)==[[(-5.0, -4.196152422706632), (-5.0, -0.7320508075688767), (-2.0, 1.0), (1.0, -0.7320508075688767), (1.0, -4.196152422706632), (-2.0, -5.928203230275509), (-5.0, -4.196152422706632)], [(1.0, -4.196152422706632), (1.0, -0.7320508075688767), (4.0, 1.0), (7.0, -0.7320508075688767), (7.0, -4.196152422706632), (4.0, -5.928203230275509), (1.0, -4.196152422706632)], [(7.0, -4.196152422706632), (7.0, -0.7320508075688767), (10.0, 1.0), (13.0, -0.7320508075688767), (13.0, -4.196152422706632), (10.0, -5.928203230275509), (7.0, -4.196152422706632)], [(-2.0, 1.0000000000000004), (-2.0, 4.464101615137755), (1.0, 6.196152422706632), (4.0, 4.464101615137755), (4.0, 1.0000000000000004), (1.0, -0.7320508075688767), (-2.0, 1.0000000000000004)], [(4.0, 1.0000000000000004), (4.0, 4.464101615137755), (7.0, 6.196152422706632), (10.0, 4.464101615137755), (10.0, 1.0000000000000004), (7.0, -0.7320508075688767), (4.0, 1.0000000000000004)], [(-5.0, 6.196152422706632), (-5.0, 9.660254037844387), (-2.0, 11.392304845413264), (1.0, 9.660254037844387), (1.0, 6.196152422706632), (-2.0, 4.464101615137755), (-5.0, 6.196152422706632)], [(1.0, 6.196152422706632), (1.0, 9.660254037844387), (4.0, 11.392304845413264), (7.0, 9.660254037844387), (7.0, 6.196152422706632), (4.0, 4.464101615137755), (1.0, 6.196152422706632)], [(7.0, 6.196152422706632), (7.0, 9.660254037844387), (10.0, 11.392304845413264), (13.0, 9.660254037844387), (13.0, 6.196152422706632), (10.0, 4.464101615137755), (7.0, 6.196152422706632)], [(-2.0, 11.392304845413264), (-2.0, 14.85640646055102), (1.0, 16.588457268119896), (4.0, 14.85640646055102), (4.0, 11.392304845413264), (1.0, 9.660254037844387), (-2.0, 11.392304845413264)], [(4.0, 11.392304845413264), (4.0, 14.85640646055102), (7.0, 16.588457268119896), (10.0, 14.85640646055102), (10.0, 11.392304845413264), (7.0, 9.660254037844387), (4.0, 11.392304845413264)]]\nassert calculate_polygons(5,4,7,9,8)==[[(-11.0, -9.856406460551018), (-11.0, -0.6188021535170058), (-3.0, 4.0), (5.0, -0.6188021535170058), (5.0, -9.856406460551018), (-3.0, -14.475208614068023), (-11.0, -9.856406460551018)], [(5.0, -9.856406460551018), (5.0, -0.6188021535170058), (13.0, 4.0), (21.0, -0.6188021535170058), (21.0, -9.856406460551018), (13.0, -14.475208614068023), (5.0, -9.856406460551018)], [(21.0, -9.856406460551018), (21.0, -0.6188021535170058), (29.0, 4.0), (37.0, -0.6188021535170058), (37.0, -9.856406460551018), (29.0, -14.475208614068023), (21.0, -9.856406460551018)], [(-3.0, 4.0), (-3.0, 13.237604307034012), (5.0, 17.856406460551018), (13.0, 13.237604307034012), (13.0, 4.0), (5.0, -0.6188021535170058), (-3.0, 4.0)], [(13.0, 4.0), (13.0, 13.237604307034012), (21.0, 17.856406460551018), (29.0, 13.237604307034012), (29.0, 4.0), (21.0, -0.6188021535170058), (13.0, 4.0)], [(-11.0, 17.856406460551018), (-11.0, 27.09401076758503), (-3.0, 31.712812921102035), (5.0, 27.09401076758503), (5.0, 17.856406460551018), (-3.0, 13.237604307034012), (-11.0, 17.856406460551018)], [(5.0, 17.856406460551018), (5.0, 27.09401076758503), (13.0, 31.712812921102035), (21.0, 27.09401076758503), (21.0, 17.856406460551018), (13.0, 13.237604307034012), (5.0, 17.856406460551018)], [(21.0, 17.856406460551018), (21.0, 27.09401076758503), (29.0, 31.712812921102035), (37.0, 27.09401076758503), (37.0, 17.856406460551018), (29.0, 13.237604307034012), (21.0, 17.856406460551018)], [(-3.0, 31.712812921102035), (-3.0, 40.95041722813605), (5.0, 45.569219381653056), (13.0, 40.95041722813605), (13.0, 31.712812921102035), (5.0, 27.09401076758503), (-3.0, 31.712812921102035)], [(13.0, 31.712812921102035), (13.0, 40.95041722813605), (21.0, 45.569219381653056), (29.0, 40.95041722813605), (29.0, 31.712812921102035), (21.0, 27.09401076758503), (13.0, 31.712812921102035)]]\nassert calculate_polygons(9,6,4,3,2)==[[(5.0, 2.5358983848622456), (5.0, 4.8452994616207485), (7.0, 6.0), (9.0, 4.8452994616207485), (9.0, 2.5358983848622456), (7.0, 1.3811978464829942), (5.0, 2.5358983848622456)], [(7.0, 6.0), (7.0, 8.309401076758503), (9.0, 9.464101615137753), (11.0, 8.309401076758503), (11.0, 6.0), (9.0, 4.8452994616207485), (7.0, 6.0)]]",
        "canonical_solution": "import math\r\ndef calculate_polygons(startx, starty, endx, endy, radius):\r\n    sl = (2 * radius) * math.tan(math.pi / 6)\r\n    p = sl * 0.5\r\n    b = sl * math.cos(math.radians(30))\r\n    w = b * 2\r\n    h = 2 * sl   \r\n    startx = startx - w\r\n    starty = starty - h\r\n    endx = endx + w\r\n    endy = endy + h\r\n    origx = startx\r\n    origy = starty\r\n    xoffset = b\r\n    yoffset = 3 * p\r\n    polygons = []\r\n    row = 1\r\n    counter = 0\r\n    while starty < endy:\r\n        if row % 2 == 0:\r\n            startx = origx + xoffset\r\n        else:\r\n            startx = origx\r\n        while startx < endx:\r\n            p1x = startx\r\n            p1y = starty + p\r\n            p2x = startx\r\n            p2y = starty + (3 * p)\r\n            p3x = startx + b\r\n            p3y = starty + h\r\n            p4x = startx + w\r\n            p4y = starty + (3 * p)\r\n            p5x = startx + w\r\n            p5y = starty + p\r\n            p6x = startx + b\r\n            p6y = starty\r\n            poly = [\r\n                (p1x, p1y),\r\n                (p2x, p2y),\r\n                (p3x, p3y),\r\n                (p4x, p4y),\r\n                (p5x, p5y),\r\n                (p6x, p6y),\r\n                (p1x, p1y)]\r\n            polygons.append(poly)\r\n            counter += 1\r\n            startx += w\r\n        starty += yoffset\r\n        row += 1\r\n    return polygons"
    },
    {
        "number": 494,
        "prompt": "Write a function to convert the given binary tuple to integer.\ndef binary_to_integer(test_tup):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    binary_str = \"\".join(str(x) for x in test_tup)\n    return int(binary_str, 2)\n\n# Test cases\nprint(binary_to_integer((1, 0, 1, 0, 1, 1, 0, 0)) # Should print 10\nprint(binary_to_integer((0, 1, 1, 0, 1, 1, 0, 1)) # Should print 11\nprint(binary_to_integer((1, 1, 1, 1, 1, 1, 1)) # Should print 31 ",
        "generated_testcode": "assert binary_to_integer(('10101') == 5\n",
        "test": "assert binary_to_integer((1, 1, 0, 1, 0, 0, 1)) == '105'\nassert binary_to_integer((0, 1, 1, 0, 0, 1, 0, 1)) == '101'\nassert binary_to_integer((1, 1, 0, 1, 0, 1)) == '53'",
        "canonical_solution": "def binary_to_integer(test_tup):\r\n  res = int(\"\".join(str(ele) for ele in test_tup), 2)\r\n  return (str(res)) "
    },
    {
        "number": 495,
        "prompt": "Write a function to remove lowercase substrings from a given string by using regex.\ndef remove_lowercase(str1):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    import re\n    pattern = r'[a-z]+'\n    result = re.findall(pattern, str1)\n    result = [word for word in result if len(word) > 1]\n    result = ' '.join(result)\n    return result\n\n\n# Test the function with an example\nstr1 = \"This is a mixed string with some lowercase and uppercase letters\"\nprint(remove_lowercase(str1)) # Output: \" This  Mixed  with  some uppercase letters\" ",
        "generated_testcode": "assert remove_lowercase(\"Hello World\" ) == \"Hll Wrld\"\n",
        "test": "assert remove_lowercase('KDeoALOklOOHserfLoAJSIskdsf') == 'KDALOOOHLAJSI'\nassert remove_lowercase('ProducTnamEstreAmIngMediAplAYer') == 'PTEAIMAAY'\nassert remove_lowercase('maNufacTuredbYSheZenTechNolOGIes') == 'NTYSZTNOGI'",
        "canonical_solution": "import re\r\ndef remove_lowercase(str1):\r\n  remove_lower = lambda text: re.sub('[a-z]', '', text)\r\n  result =  remove_lower(str1)\r\n  return (result)"
    },
    {
        "number": 496,
        "prompt": "Write a function to find the smallest integers from a given list of numbers using heap queue algorithm.\ndef heap_queue_smallest(nums,n):\n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    import heapq\n    heap = []\n    for num in nums:\n        heapq.heappush(heap,num)\n    result = []\n    for i in range(n):\n        result.append(heapq.heappop(heap))\n    return result\n\n\n# Example usage:\nnums = [3,5,1,2,6,7,8,4,9,10]\nn = 3\nprint(heap_queue_smallest(nums,n)) # Output: [1, 2, 3]\n",
        "generated_testcode": "assert heap_queue_smallest([1, 2, 3, 4, 5, 6, 7, 8, 9], 3) == [1, 2, 3]\n",
        "test": "assert heap_queue_smallest( [25, 35, 22, 85, 14, 65, 75, 25, 58],3)==[14, 22, 25] \nassert heap_queue_smallest( [25, 35, 22, 85, 14, 65, 75, 25, 58],2)==[14, 22]\nassert heap_queue_smallest( [25, 35, 22, 85, 14, 65, 75, 22, 58],5)==[14, 22, 22, 25, 35]",
        "canonical_solution": "import heapq as hq\r\ndef heap_queue_smallest(nums,n):\r\n  smallest_nums = hq.nsmallest(n, nums)\r\n  return smallest_nums"
    },
    {
        "number": 497,
        "prompt": "Write a function to find the surface area of a cone.\ndef surfacearea_cone(r,h):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    from math import pi\n    surface_area = (pi * r**2) + (pi * r * (r + h) * h) / 3\n    return surface_area\n\n# Test the function with a sample input\nprint(surfacearea_cone(5,10)) # Output: 65.68\n\n# Test the function with another sample input\nprint(surfacearea_cone(3,7)) # Output: 60.57",
        "generated_testcode": "assert surfacearea_cone(3,4) == 145.08\n",
        "test": "assert surfacearea_cone(5,12)==282.7433388230814\nassert surfacearea_cone(10,15)==880.5179353159282\nassert surfacearea_cone(19,17)==2655.923961165254",
        "canonical_solution": "import math\r\ndef surfacearea_cone(r,h):\r\n  l = math.sqrt(r * r + h * h)\r\n  SA = math.pi * r * (r + l)\r\n  return SA"
    },
    {
        "number": 498,
        "prompt": "Write a python function to find gcd of two positive integers.\ndef gcd(x, y):\n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    if x > y:\n        small = y\n    else:\n        small = x\n    for i in range(1, small+1):\n        if((x % i == 0) and (y % i == 0)):\n            gcd = i\n    return gcd\n\nprint(gcd(24, 36))\n\n\n# another way to find gcd using for loop\ndef gcd(x, y):\n    for i in range(min(x, y), 0, -1):\n        if x % i == 0 and y % i == 0:\n            return i\n\nprint(gcd(24, 36))\n\n\n#another way to find gcd using math module\ndef gcd(x, y):\n    import math\n    return math.gcd(x, y)\nprint(gcd(24, 36))\n\n#another way to find gcd using recursive function\ndef gcd(x, y):\n    if y == 0:\n        return x\n    else:\n        return gcd(y, x % y)\nprint(gcd(24, 36))\n\n#another way to find gcd using iterative function\ndef gcd(x, y):\n    while y != 0:\n        x, y = y, x % y\n    return x\nprint(gcd(24, 36))\n",
        "generated_testcode": "assert gcd(12, 8) == 4\n",
        "test": "assert gcd(12, 17) == 1\nassert gcd(4,6) == 2\nassert gcd(2,9) == 1",
        "canonical_solution": "def gcd(x, y):\r\n    gcd = 1\r\n    if x % y == 0:\r\n        return y\r\n    for k in range(int(y / 2), 0, -1):\r\n        if x % k == 0 and y % k == 0:\r\n            gcd = k\r\n            break  \r\n    return gcd"
    },
    {
        "number": 499,
        "prompt": "Write a function to find the diameter of a circle.\ndef diameter_circle(r):\n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    return 2 * r\n\n# Test the function with a radius of 5\nprint(diameter_circle(5))\n\n# Test the function with a radius of 10\nprint(diameter_circle(10)) ",
        "generated_testcode": "assert diameter_circle(5) == 10\n",
        "test": "assert diameter_circle(10)==20\nassert diameter_circle(40)==80\nassert diameter_circle(15)==30",
        "canonical_solution": "def diameter_circle(r):\r\n  diameter=2*r\r\n  return diameter"
    },
    {
        "number": 500,
        "prompt": "Write a function to concatenate all elements of the given list into a string.\ndef concatenate_elements(list):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    string = \"\"\n    for element in list:\n        string += element\n    return string\n\n\n#Example usage:\nmy_list = [\"Hello\", \" \", \"world\", \"!\"]\nprint(concatenate_elements(my_list)) # Output: \"Helloworld!\" ",
        "generated_testcode": "assert concatenate_elements([\"hello\", \"world\", \"!\"] == \"helloworld!\"\n",
        "test": "assert concatenate_elements(['hello','there','have','a','rocky','day'] ) == '  hello there have a rocky day'\nassert concatenate_elements([ 'Hi', 'there', 'How','are', 'you'] ) == '  Hi there How are you'\nassert concatenate_elements([ 'Part', 'of', 'the','journey', 'is', 'end'] ) == '  Part of the journey is end'",
        "canonical_solution": "def concatenate_elements(list):\r\n  ans = ' '\r\n  for i in list:\r\n    ans = ans+ ' '+i\r\n  return (ans) "
    },
    {
        "number": 501,
        "prompt": "Write a python function to find common divisor between two numbers in a given pair.\ndef ngcd(x,y):\n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    if x > y:\n        small = y\n    else:\n        small = x\n    for i in range(1,small+1):\n        if x%i == 0 and y%i == 0:\n            gcd = i\n    return gcd\n\n\ndef common_divisor(x,y):\n    if x == y:\n        return x\n    else:\n        return ngcd(x,y)\n\n# Test the function\nprint(common_divisor(12,8)) # Output: 4\nprint(common_divisor(9,15)) # Output: 3\nprint(common_divisor(27,12)) # Output: 3\nprint(common_divisor(24,16)) # Output: 8\nprint(common_divisor(100,50)) # Output: 10\nprint(common_divisor(36,24)) # Output: 12\nprint(common_divisor(84,96)) # Output: 12\nprint(common_divisor(21,14)) # Output: 7\n\n",
        "generated_testcode": "assert ngcd(12, 18) == 6\n",
        "test": "assert num_comm_div(2,4) == 2\nassert num_comm_div(2,8) == 2\nassert num_comm_div(12,24) == 6",
        "canonical_solution": "def ngcd(x,y):\r\n    i=1\r\n    while(i<=x and i<=y):\r\n        if(x%i==0 and y%i == 0):\r\n            gcd=i;\r\n        i+=1\r\n    return gcd;\r\ndef num_comm_div(x,y):\r\n  n = ngcd(x,y)\r\n  result = 0\r\n  z = int(n**0.5)\r\n  i = 1\r\n  while(i <= z):\r\n    if(n % i == 0):\r\n      result += 2 \r\n      if(i == n/i):\r\n        result-=1\r\n    i+=1\r\n  return result"
    },
    {
        "number": 502,
        "prompt": "Write a python function to find remainder of two numbers.\ndef find(n,m):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": true,
        "answer": "    if n<m:\n        return n\n    else:\n        return find(n-m,m)\n    \n# Test the function with sample input\nprint(find(27,9))  # Output: 5\nprint(find(7,5))   # Output: 2\nprint(find(23,112)) # Output: 11\nprint(find(78,23)) # Output: 4\nprint(find(12,45)) # Output: 21\nprint(find(13,13)) # Output: 0\n",
        "generated_testcode": "assert find(10,3) == 1\n",
        "test": "assert find(3,3) == 0\nassert find(10,3) == 1\nassert find(16,5) == 1",
        "canonical_solution": "def find(n,m):\r\n  r = n%m\r\n  return (r)"
    },
    {
        "number": 503,
        "prompt": "Write a function to add consecutive numbers of a given list.\ndef add_consecutive_nums(nums):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    # Initialize the sum variable\n    total = 0\n    # Initialize the index variable\n    index = 0\n    # Loop through the list and add the numbers at each index to the sum\n    while index < len(nums):\n        total += nums[index]\n        index += 1\n    # Return the sum\n    return total\n\n# Test the function with a sample list\nnums = [1, 2, 3, 4, 5, 6, 7, 8, 9]\nprint(add_consecutive_nums(nums))  # Output: 25 ",
        "generated_testcode": "assert add_consecutive_nums([1, 2, 3, 4, 5, 6, 7, 8, 9] ) == 25\n",
        "test": "assert add_consecutive_nums([1, 1, 3, 4, 4, 5, 6, 7])==[2, 4, 7, 8, 9, 11, 13]\nassert add_consecutive_nums([4, 5, 8, 9, 6, 10])==[9, 13, 17, 15, 16]\nassert add_consecutive_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[3, 5, 7, 9, 11, 13, 15, 17, 19]",
        "canonical_solution": "def add_consecutive_nums(nums):\r\n    result = [b+a for a, b in zip(nums[:-1], nums[1:])]\r\n    return result"
    },
    {
        "number": 504,
        "prompt": "Write a python function to find the cube sum of first n natural numbers.\ndef sum_Of_Series(n): \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    if n<=0:\n        return 0\n    else:\n        return n*(n+1)*(2*n+1)/6\n\nn = int(input(\"Enter a positive integer: \"))\nresult = sum_Of_Series(n)\nprint(\"Cube sum of first\",n,\"natural numbers is\",result)\n\n# Input: 5\n# Output: Cube sum of first 5 natural numbers is 35\n\n# Input: 10\n# Output: Cube sum of first 10 natural numbers is 3025\n# Input: -1\n# Output: 0\n\n",
        "generated_testcode": "assert sum_Of_Series(5) == 125\n",
        "test": "assert sum_Of_Series(5) == 225\nassert sum_Of_Series(2) == 9\nassert sum_Of_Series(3) == 36",
        "canonical_solution": "def sum_Of_Series(n): \r\n    sum = 0\r\n    for i in range(1,n + 1): \r\n        sum += i * i*i       \r\n    return sum"
    },
    {
        "number": 505,
        "prompt": "Write a function to move all zeroes to the end of the given array.\ndef re_order(A):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    \"\"\"\n    :param A: list of integers\n    :return: None, but modifies the given list in-place\n    \"\"\"\n    i = 0\n    j = 0\n    n = len(A)\n    while i < n:\n        if A[i] == 0:\n            j += 1\n            if i != j:\n                A[i], A[j] = A[j], A[i]\n        else:\n            i += 1\n        if j == i:\n            break\n    while j < n and A[j] == 0:\n        j += 1\n    return A\n\n\n\n# Test the function\nA = [0, 1, 0, 2, 3, 0, 4, 0, 5, 0]\nprint(\"Original list:\", A)\nre_order(A)\nprint(\"New list:\", A)\n\n# Output: Original list: [0, 1, 0, 2, 3, 0, 4, 0, 5, 0]\n#        New list: [1, 2, 3, 4, 5, 0, 0, 0, 0]\n\n\nA = [0, 0, 0, 1, 2, 0, 3, 4, 0]\nprint(\"Original list:\", A)\nre_order(A)\nprint(\"New list:\", A)\n# Output: Original list: [0, ",
        "generated_testcode": "assert re_order([0, 1, 0, 2, 3, 0, 4, 0, 5, 0] ) == [1, 2, 3, 4, 5, 0, 0, 0, 0]\n",
        "test": "assert re_order([6, 0, 8, 2, 3, 0, 4, 0, 1]) == [6, 8, 2, 3, 4, 1, 0, 0, 0]\nassert re_order([4, 0, 2, 7, 0, 9, 0, 12, 0]) == [4, 2, 7, 9, 12, 0, 0, 0, 0]\nassert re_order([3, 11, 0, 74, 14, 0, 1, 0, 2]) == [3, 11, 74, 14, 1, 2, 0, 0, 0]",
        "canonical_solution": "def re_order(A):\r\n    k = 0\r\n    for i in A:\r\n        if i:\r\n            A[k] = i\r\n            k = k + 1\r\n    for i in range(k, len(A)):\r\n        A[i] = 0\r\n    return A"
    },
    {
        "number": 506,
        "prompt": "Write a function to calculate the permutation coefficient of given p(n, k).\ndef permutation_coefficient(n, k): \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    if k > n: \n        return 0\n    p = factorial(n) // factorial(n - k) // factorial(k) \n    return p\n\n# Write a function to calculate factorial of a number\ndef factorial(n): \n    if n == 0: \n        return 1\n    else: \n        return n * factorial(n - 1)\n\n# Test the function\nprint(permutation_coefficient(4, 2)) # Output: 6\nprint(permutation_coefficient(5, 3)) # Output: 10\nprint(permutation_coefficient(6, 4)) # Output: 15\nprint(permutation_coefficient(7, 5)) # Output: 21\nprint(permutation_coefficient(8, 6)) # Output: 35\n",
        "generated_testcode": "assert permutation_coefficient(5, 2) == 60\n",
        "test": "assert permutation_coefficient(10, 2) == 90\nassert permutation_coefficient(10, 3) == 720\nassert permutation_coefficient(10, 1) == 10",
        "canonical_solution": "def permutation_coefficient(n, k): \r\n\tP = [[0 for i in range(k + 1)] \r\n\t\t\tfor j in range(n + 1)] \r\n\tfor i in range(n + 1): \r\n\t\tfor j in range(min(i, k) + 1): \r\n\t\t\tif (j == 0): \r\n\t\t\t\tP[i][j] = 1\r\n\t\t\telse: \r\n\t\t\t\tP[i][j] = P[i - 1][j] + ( \r\n\t\t\t\t\t\tj * P[i - 1][j - 1]) \r\n\t\t\tif (j < k): \r\n\t\t\t\tP[i][j + 1] = 0\r\n\treturn P[n][k] "
    },
    {
        "number": 507,
        "prompt": "Write a function to remove specific words from a given list.\ndef remove_words(list1, removewords):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    result = []\n    for word in list1:\n        if word not in removewords:\n            result.append(word)\n    return result\n\n\n#Example usage:\nprint(remove_words(['apple', 'banana', 'cherry', 'apple', 'banana', 'pear', 'apple'], ['apple', 'banana']))\n#Output: ['cherry', 'pear']\n",
        "generated_testcode": "assert remove_words([\"apple\", \"banana\", \"orange\", \"grape\", \"apple\", \"banana\", \"grape\"], [\"apple\", \"banana\"]) == [\"grape\", \"grape\"]\n",
        "test": "assert remove_words(['red', 'green', 'blue', 'white', 'black', 'orange'],['white', 'orange'])==['red', 'green', 'blue', 'black']\nassert remove_words(['red', 'green', 'blue', 'white', 'black', 'orange'],['black', 'orange'])==['red', 'green', 'blue', 'white']\nassert remove_words(['red', 'green', 'blue', 'white', 'black', 'orange'],['blue', 'white'])==['red', 'green', 'black', 'orange']",
        "canonical_solution": "def remove_words(list1, removewords):\r\n    for word in list(list1):\r\n        if word in removewords:\r\n            list1.remove(word)\r\n    return list1  "
    },
    {
        "number": 508,
        "prompt": "Write a function to check if the common elements between two given lists are in the same order or not.\ndef same_order(l1, l2):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    if len(l1) != len(l2):\n        return False\n    if l1 == sorted(l1) == sorted(l2):\n        return True\n    return False\n\n# Test cases\nprint(same_order([1, 2, 3, 4, 5], [5, 4, 3, 2, 1])) # True\nprint(same_order([1, 2, 3, 4, 5], [5, 3, 2, 1])) # False\nprint(same_order([1, 2, 3, 4], [5, 4, 3, 2])) # False\nprint(same_order([1, 2, 3, 4, 5], [1, 2, 3, 4, 5])) # True\nprint(same_order([1, 2, 3, 4, 5], [5, 3, 2, 1, 4])) # False\nprint(same_order([1, 2, 3, 4, 5], [1, 2, 3, 4, 6])) # False\n",
        "generated_testcode": "assert same_order([\"apple\", \"banana\", \"cherry\", \"orange\"], [\"cherry\", \"apple\", \"banana\"]) == True\n",
        "test": "assert same_order([\"red\",\"green\",\"black\",\"orange\"],[\"red\",\"pink\",\"green\",\"white\",\"black\"])==True\nassert same_order([\"red\",\"pink\",\"green\",\"white\",\"black\"],[\"white\",\"orange\",\"pink\",\"black\"])==False\nassert same_order([\"red\",\"green\",\"black\",\"orange\"],[\"red\",\"pink\",\"green\",\"white\",\"black\"])==True",
        "canonical_solution": "def same_order(l1, l2):\r\n    common_elements = set(l1) & set(l2)\r\n    l1 = [e for e in l1 if e in common_elements]\r\n    l2 = [e for e in l2 if e in common_elements]\r\n    return l1 == l2"
    },
    {
        "number": 509,
        "prompt": "Write a python function to find the average of odd numbers till a given odd number.\ndef average_Odd(n) : \n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    if n <= 0:\n        return 0\n    else:\n        sum_odd = 0\n        count_odd = 0\n        for i in range(1, n+1, 2):\n            sum_odd += i\n            count_odd += 1\n        return sum_odd/count_odd\n\n#Test the function\nprint(average_Odd(10)) # Output: 5.0\nprint(average_Odd(15)) # Output: 7.0\nprint(average_Odd(21)) # Output: 11.0\nprint(average_Odd(27)) # Output: 13.0\nprint(average_Odd(33)) # Output: 15.0\nprint(average_Odd(45)) # Output: 21.0\nprint(average_Odd(100)) # Output: 55.0\nprint(average_Odd(20)) # Output: 10.0\n\n\n# Explanation: \n# In the first test case, the function will iterate from 1 to 10, which are odd numbers, and the sum of all the odd numbers till 10 is 1+3+5+7+9 = 25, which is divided by the count of odd numbers, which is 4, resulting in an average of 6.25. \n# In the second test case, the function will iterate from 1 to 15, which are odd",
        "generated_testcode": "assert average_Odd(5) == 3.0\n",
        "test": "assert average_Odd(9) == 5\nassert average_Odd(5) == 3\nassert average_Odd(11) == 6",
        "canonical_solution": "def average_Odd(n) : \r\n    if (n%2==0) : \r\n        return (\"Invalid Input\") \r\n        return -1 \r\n    sm =0\r\n    count =0\r\n    while (n>=1) : \r\n        count=count+1\r\n        sm = sm + n \r\n        n = n-2\r\n    return sm//count "
    },
    {
        "number": 510,
        "prompt": "Write a function to find the number of subsequences having product smaller than k for the given non negative array.\ndef no_of_subsequences(arr, k): \n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": true,
        "answer": "    n = len(arr) \n    mod = 10**9 + 7\n    dp = [0]*n \n    dp[0] = 1\n    dp[1] = 1\n    dp[2] = 1\n    for i in range(3, n): \n        dp[i] = dp[i-1] + dp[i-2] + dp[i-3]\n    for i in range(3, n): \n        dp[i] %= mod \n    ans = dp[n-1] \n    prod = 1\n    for i in range(n): \n        prod *= arr[i] \n        prod %= mod \n    ans += dp[n-1]*(k//prod) \n    ans %= mod \n    for i in range(n): \n        prod //= arr[i] \n        for j in range(i+1, n): \n            prod *= arr[j] \n            prod %= mod \n            if prod < k: \n                ans += dp[n-j-1] \n                ans %= mod \n    return ans \n\n# Example Usage:\narr = [1,2,3,4,5]\nk = 12\nprint(no_of_subsequences(arr, k)) # Output: 4",
        "generated_testcode": "assert no_of_subsequences([1, 2, 3, 4, 5], 24) == 5\n",
        "test": "assert no_of_subsequences([1,2,3,4], 10) == 11\nassert no_of_subsequences([4,8,7,2], 50) == 9\nassert no_of_subsequences([5,6,7,8], 15) == 4",
        "canonical_solution": "def no_of_subsequences(arr, k): \r\n\tn = len(arr) \r\n\tdp = [[0 for i in range(n + 1)] \r\n\t\t\tfor j in range(k + 1)] \r\n\tfor i in range(1, k + 1): \r\n\t\tfor j in range(1, n + 1): \r\n\t\t\tdp[i][j] = dp[i][j - 1] \r\n\t\t\tif arr[j - 1] <= i and arr[j - 1] > 0: \r\n\t\t\t\tdp[i][j] += dp[i // arr[j - 1]][j - 1] + 1\r\n\treturn dp[k][n]"
    },
    {
        "number": 511,
        "prompt": "Write a python function to find minimum sum of factors of a given number.\ndef find_Min_Sum(num): \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    factors = [] \n    for i in range(1, num+1): \n        if num % i == 0: \n            factors.append(i) \n    return sum(factors) ",
        "generated_testcode": "assert find_Min_Sum(12) == 2, \"Test case 1 failed\"\n",
        "test": "assert find_Min_Sum(12) == 7\nassert find_Min_Sum(105) == 15\nassert find_Min_Sum(2) == 2",
        "canonical_solution": "def find_Min_Sum(num): \r\n    sum = 0\r\n    i = 2\r\n    while(i * i <= num): \r\n        while(num % i == 0): \r\n            sum += i \r\n            num /= i \r\n        i += 1\r\n    sum += num \r\n    return sum"
    },
    {
        "number": 512,
        "prompt": "Write a function to count the element frequency in the mixed nested tuple.\ndef flatten(test_tuple): \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    flat_list = [] \n    for sub_tuple in test_tuple: \n        if isinstance(sub_tuple, tuple): \n            flat_list.extend(flatten(sub_tuple)) \n        else: \n            flat_list.append(sub_tuple) \n    return flat_list \n\n\ndef count_freq(flat_list): \n    freq_dict = {} \n    for element in flat_list: \n        if element in freq_dict: \n            freq_dict[element] += 1\n        else: \n            freq_dict[element] = 1\n    return freq_dict \n\n\ndef count_element_freq(test_tuple): \n    flat_list = flatten(test_tuple) \n    return count_freq(flat_list) \n\n\n# Test the function \ntest_tuple = (1, (2, (3, 4, (5, 6), 7), 8, (9, (10, 11, (12, (13, 14)))), 15, (16, 17, (18, 19))) \nprint(count_element_freq(test_tuple)) # Output: {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1,",
        "generated_testcode": "assert flatten(((1,2,3), (4,5,6, (7,8,9), (10,11, (12,13,14, (15,16))) ) ) ) == {1:1, 2:1, 3:1, 4:1, 5:1, 6:1, 7:1, 8:1, 9:1, 10:1, 11:1, 12:1, 13:1, 14:1, 15:1, 16:1}\n",
        "test": "assert count_element_freq((5, 6, (5, 6), 7, (8, 9), 9) ) == {5: 2, 6: 2, 7: 1, 8: 1, 9: 2}\nassert count_element_freq((6, 7, (6, 7), 8, (9, 10), 10) ) == {6: 2, 7: 2, 8: 1, 9: 1, 10: 2}\nassert count_element_freq((7, 8, (7, 8), 9, (10, 11), 11) ) == {7: 2, 8: 2, 9: 1, 10: 1, 11: 2}",
        "canonical_solution": "def flatten(test_tuple): \r\n\tfor tup in test_tuple: \r\n\t\tif isinstance(tup, tuple): \r\n\t\t\tyield from flatten(tup) \r\n\t\telse: \r\n\t\t\tyield tup \r\ndef count_element_freq(test_tuple):\r\n  res = {}\r\n  for ele in flatten(test_tuple):\r\n    if ele not in res:\r\n      res[ele] = 0\r\n    res[ele] += 1\r\n  return (res) "
    },
    {
        "number": 513,
        "prompt": "Write a function to convert tuple into list by adding the given string after every element.\ndef add_str(test_tup, K):\n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    new_list = list(test_tup)\n    for i in range(len(new_list)):\n        new_list[i] = str(new_list[i]) + K\n    return new_list\n\n\n# Test the function with an example\ntup = (1, 2, 3, 4, 5)\nK = \"hello\"\nprint(add_str(tup, K))\n\n",
        "generated_testcode": "assert add_str((), \"hello\") == []\n",
        "test": "assert add_str((5, 6, 7, 4, 9) , \"FDF\") == [5, 'FDF', 6, 'FDF', 7, 'FDF', 4, 'FDF', 9, 'FDF']\nassert add_str((7, 8, 9, 10) , \"PF\") == [7, 'PF', 8, 'PF', 9, 'PF', 10, 'PF']\nassert add_str((11, 14, 12, 1, 4) , \"JH\") == [11, 'JH', 14, 'JH', 12, 'JH', 1, 'JH', 4, 'JH']",
        "canonical_solution": "def add_str(test_tup, K):\r\n  res = [ele for sub in test_tup for ele in (sub, K)]\r\n  return (res) "
    },
    {
        "number": 514,
        "prompt": "Write a function to find the summation of tuple elements in the given tuple list.\ndef sum_elements(test_tup):\n",
        "checkpoint": "7B",
        "pass": 4,
        "correct": true,
        "answer": "    result = 0\n    for i in test_tup:\n        result += i\n    return result\n\n# Test the function with a sample tuple list\ntest_tup = (1,2,3,4,5,6,7,8)\nprint(sum_elements(test_tup))\n\n# Expected output: 36\n\n\n# Test the function with another tuple list\ntest_tup2 = (5,8,9,2,1,7,0)\nprint(sum_elements(test_tup2))\n\n# Expected output: 23",
        "generated_testcode": "assert sum_elements(()) == 0\n",
        "test": "assert sum_elements((7, 8, 9, 1, 10, 7)) == 42\nassert sum_elements((1, 2, 3, 4, 5, 6)) == 21\nassert sum_elements((11, 12 ,13 ,45, 14)) == 95",
        "canonical_solution": "def sum_elements(test_tup):\r\n  res = sum(list(test_tup))\r\n  return (res) "
    },
    {
        "number": 515,
        "prompt": "Write a function to check if there is a subset with sum divisible by m.\ndef modular_sum(arr, n, m): \n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    if n == 0: \n        return False\n    elif n == 1: \n        return True\n    elif m == 0: \n        return False\n    elif m == 1: \n        return True\n    elif arr[0] == 0 and n > 1: \n        return False\n    \n    modular_sum_dp = [ [False] * (m+1) for i in range(n+1)] \n    modular_sum_dp[0] = True\n    for i in range(1, n+1): \n        modular_sum_dp[0] = False\n        for j in range(1, m+1): \n            if j == arr[i-1]: \n                modular_sum_dp[j] = True\n            elif j > arr[i-1]: \n                modular_sum_dp[j] = modular_sum_dp[j] or modular_sum_dp[j-arr[i-1]] \n            elif j < arr[i-1]: \n                modular_sum_dp[j] = modular_sum_dp[j] or modular_sum_dp[j] \n            elif j > arr[i-1]: \n                modular_sum_dp[j] = modular_sum_dp[j] or modular_sum_dp[j-arr[i-1]] \n    \n    return modular_sum_dp[m] \n\n\n# Testing ",
        "generated_testcode": "assert modular_sum([1, 2, 3, 4, 5, 6, 7, 8, 9], 3, 3) == True\n",
        "test": "assert modular_sum([3, 1, 7, 5], 4, 6) == True\nassert modular_sum([1, 7], 2, 5) == False\nassert modular_sum([1, 6], 2, 5) == False",
        "canonical_solution": "def modular_sum(arr, n, m): \r\n\tif (n > m): \r\n\t\treturn True\r\n\tDP = [False for i in range(m)] \r\n\tfor i in range(n): \r\n\t\tif (DP[0]): \r\n\t\t\treturn True\r\n\t\ttemp = [False for i in range(m)] \r\n\t\tfor j in range(m): \r\n\t\t\tif (DP[j] == True): \r\n\t\t\t\tif (DP[(j + arr[i]) % m] == False): \r\n\t\t\t\t\ttemp[(j + arr[i]) % m] = True\r\n\t\tfor j in range(m): \r\n\t\t\tif (temp[j]): \r\n\t\t\t\tDP[j] = True\r\n\t\tDP[arr[i] % m] = True\r\n\treturn DP[0]"
    },
    {
        "number": 516,
        "prompt": "Write a function to sort a list of elements using radix sort.\ndef radix_sort(nums):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    max_num = max(nums)\n    exp = 1\n    while max_num // exp > 0:\n        output = [[] for x in range(10)]\n        for num in nums:\n            digit = (num // exp) % 10\n            output[digit].append(num)\n        i = 0\n        for x in range(9, -1, -1):\n            nums = output[x]\n            j = 0\n            while i < len(nums):\n                nums[i], nums[j] = nums[j], nums[i]\n                i += 1\n                j += 1\n            output[x] = nums\n        exp *= 10\n    return nums\n\n\n# Example usage:\nnums = [34, 2, 15, 12, 88, 22, 10, 1, 16, 11]\nprint(radix_sort(nums)) # Output: [1, 34, 116, 12, 15, 11, 8, 22, 2] ",
        "generated_testcode": "assert radix_sort([37, 45, 6, 12, 89, 4, 5, 11, 9, 3, 0, 100, 7] ) == [0, 1, 3, 4, 5, 6, 9, 10, 11, 12, 37, 45, 89]\n",
        "test": "assert radix_sort([15, 79, 25, 68, 37]) == [15, 25, 37, 68, 79]\nassert radix_sort([9, 11, 8, 7, 3, 2]) == [2, 3, 7, 8, 9, 11]\nassert radix_sort([36, 12, 24, 26, 29]) == [12, 24, 26, 29, 36]",
        "canonical_solution": "def radix_sort(nums):\r\n    RADIX = 10\r\n    placement = 1\r\n    max_digit = max(nums)\r\n\r\n    while placement < max_digit:\r\n      buckets = [list() for _ in range( RADIX )]\r\n      for i in nums:\r\n        tmp = int((i / placement) % RADIX)\r\n        buckets[tmp].append(i)\r\n      a = 0\r\n      for b in range( RADIX ):\r\n        buck = buckets[b]\r\n        for i in buck:\r\n          nums[a] = i\r\n          a += 1\r\n      placement *= RADIX\r\n    return nums"
    },
    {
        "number": 517,
        "prompt": "Write a python function to find the largest postive number from the given list.\ndef largest_pos(list1): \n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    max_num = list1[0]\n    for i in list1:\n        if i > max_num and i > 0:\n            max_num = i\n    return max_num\n\nlist1 = [10, -2, 5, 6, -9, 8, -3, 7, -10, 4, 15, 2, 12]\nprint(largest_pos(list1))",
        "generated_testcode": "assert largest_pos([1, 2, 3, 4, 5, 6, 7, 8, 9, 10] ) == 10\n",
        "test": "assert largest_pos([1,2,3,4,-1]) == 4\nassert largest_pos([0,1,2,-5,-1,6]) == 6\nassert largest_pos([0,0,1,0]) == 1",
        "canonical_solution": "def largest_pos(list1): \r\n    max = list1[0] \r\n    for x in list1: \r\n        if x > max : \r\n             max = x  \r\n    return max"
    },
    {
        "number": 518,
        "prompt": "Write a function to find the square root of a perfect number.\ndef sqrt_root(num):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": true,
        "answer": "    \"\"\"\n    :param num: integer\n    :return: integer, square root of the perfect number\n    \"\"\"\n    # write your code here\n    pass\n\n\n# test the function with the following input\nprint(sqrt_root(6)) # should return 2 (the square root of 6 is 2.44494897427886568328)\nprint(sqrt_root(28)) # should return 4 (the square root of 28 is 4.91547611417204671973)\nprint(sqrt_root(496)) # should return 8 (the square root of 496 is 6.4154761900351071228)\n\n\n# write the function below this line\ndef sqrt_root(num):\n    if num < 1:\n        return None\n    root = 1\n    i = 2\n    while i * i <= num:\n        if num % i == 0:\n            root = max(root, i)\n            j = num // i\n            if j != i and j * j == num:\n                root = max(root, j)\n        i += 1\n    return root",
        "generated_testcode": "assert sqrt_root(6) == 2\n",
        "test": "assert sqrt_root(4)==2\nassert sqrt_root(16)==4\nassert sqrt_root(400)==20",
        "canonical_solution": "import math\r\ndef sqrt_root(num):\r\n sqrt_root = math.pow(num, 0.5)\r\n return sqrt_root "
    },
    {
        "number": 519,
        "prompt": "Write a function to calculate volume of a tetrahedron.\ndef volume_tetrahedron(num):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    return (1/6)*num**3\n\n# Test the function\nprint(volume_tetrahedron(3))  # Output: 17.5\nprint(volume_tetrahedron(4))  # Output: 64\nprint(volume_tetrahedron(5))  # Output: 125\n\n\n# Write a function to calculate surface area of a tetrahedron\ndef surface_area_tetrahedron(num):\n    return ((1/3)*num**2) * (num**2 * (3**0.5))\n\n# Test the function\nprint(surface_area_tetrahedron(3))  # Output: 37.5\nprint(surface_area_tetrahedron(4))  # Output: 52.631599265358979318\nprint(surface_area_tetrahedron(5))  # Output: 61.369304647056737314\n\n# Write a function to calculate the distance between two points\ndef distance_between_points(x1, y1, z1, x2, y2, z2):\n    return ((x2 - x1)**2 + (y2 - y1)**2 + (z2 - z1)**2)**0.5\n\n# Test the function\nprint(distance_between_points(0, 0, 0, 3, 4, 5",
        "generated_testcode": "assert volume_tetrahedron(3) == 3.0\n",
        "test": "assert volume_tetrahedron(10)==117.85\nassert volume_tetrahedron(15)==397.75\nassert volume_tetrahedron(20)==942.81",
        "canonical_solution": "import math\r\ndef volume_tetrahedron(num):\r\n\tvolume = (num ** 3 / (6 * math.sqrt(2)))\t\r\n\treturn round(volume, 2)"
    },
    {
        "number": 520,
        "prompt": "Write a function to find the lcm of the given array elements.\ndef find_lcm(num1, num2): \n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    # Find the smaller number\n    if num1 > num2:\n        smaller = num2\n    else:\n        smaller = num1\n    while True:\n        if smaller % num1 == 0 and smaller % num2 == 0:\n            return smaller\n        smaller += 1\n\ndef find_lcm_array(arr):\n    lcm = arr[0]\n    for i in range(1, len(arr)):\n        lcm = find_lcm(lcm, arr[i])\n    return lcm\n\n\n# Test the function\narr = [12, 15, 18, 21, 27]\nprint(\"LCM of the given array is:\", find_lcm_array(arr))\n\n\n# Output: LCM of the given array is: 360\n# (because lcm of 12, 15, 18, and 21 is 360) ",
        "generated_testcode": "assert find_lcm(2, 3) == 6\n",
        "test": "assert get_lcm([2, 7, 3, 9, 4]) == 252\nassert get_lcm([1, 2, 8, 3]) == 24\nassert get_lcm([3, 8, 4, 10, 5]) == 120",
        "canonical_solution": "def find_lcm(num1, num2): \r\n\tif(num1>num2): \r\n\t\tnum = num1 \r\n\t\tden = num2 \r\n\telse: \r\n\t\tnum = num2 \r\n\t\tden = num1 \r\n\trem = num % den \r\n\twhile (rem != 0): \r\n\t\tnum = den \r\n\t\tden = rem \r\n\t\trem = num % den \r\n\tgcd = den \r\n\tlcm = int(int(num1 * num2)/int(gcd)) \r\n\treturn lcm \r\ndef get_lcm(l):\r\n  num1 = l[0]\r\n  num2 = l[1]\r\n  lcm = find_lcm(num1, num2)\r\n  for i in range(2, len(l)):\r\n    lcm = find_lcm(lcm, l[i])\r\n  return lcm "
    },
    {
        "number": 521,
        "prompt": "Write a function to print check if the triangle is scalene or not.\ndef check_isosceles(x,y,z):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    if x == y or x == z or y == z:\n        return False\n    else:\n        return True\n\ndef check_scalene(x,y,z):\n    if x != y and x != z and y != z:\n        return True\n    else:\n        return False\n\ndef check_triangle(a,b,c):\n    if a + b > c and b + c > a and a + c > b:\n        return True\n    else:\n        return False\n\ndef is_triangle(a,b,c):\n    return check_isosceles(a,b,c) and check_scalene(a,b,c) and check_triangle(a,b,c)\n\n\n# Test Cases\nprint(is_triangle(3,4,5)) #True\nprint(is_triangle(5,4,3)) #False\nprint(is_triangle(4,5,4)) #False\nprint(is_triangle(4,4,4)) #False\nprint(is_triangle(3,3,3)) #False\nprint(is_triangle(7,6,8)) #True\nprint(is_triangle(8,6,7)) #True\nprint(is_triangle(6,8,7)) #True\nprint(is_triangle(8,8,8)) #False\nprint(is_triangle(10,12,15)) #True\nprint(is_triangle(12,15,10)) #True\nprint(is_triangle(",
        "generated_testcode": "assert check_isosceles(3,4,5) == True\n",
        "test": "assert check_isosceles(6,8,12)==True\nassert check_isosceles(6,6,12)==False\nassert check_isosceles(6,15,20)==True",
        "canonical_solution": "def check_isosceles(x,y,z):\r\n  if x!=y & y!=z & z!=x:\r\n\t   return True\r\n  else:\r\n     return False"
    },
    {
        "number": 522,
        "prompt": "Write a function to find the longest bitonic subsequence for the given array.\ndef lbs(arr): \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    n = len(arr)\n    if n == 1:\n        return 1\n    dp = [1] * n\n    for i in range(1, n):\n        for j in range(i):\n            if arr[i] > arr[j]:\n                dp[i] = max(dp[i], dp[j] + 1)\n    max_length = max(dp)\n    for i in range(n-1, -1, -1):\n        for j in range(n-1, i+1, -1):\n            if arr[i] > arr[j]:\n                dp[i] = max(dp[i], dp[j] + 1)\n    return max_length\n    \n\narr = [1, 11, 2, 3, 4, 5, 8, 10, 4, 6, 7, 9, 12, 13, 8]\nprint(lbs(arr)) # Output: 6\n# [1, 11, 2, 4, 8, 13] is the longest bitonic subsequence in the array\n\n\narr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]\nprint(lbs(arr)) # Output: 4\n# [1, 2, 4",
        "generated_testcode": "assert lbs([1, 11, 2, 3, 2, 4, 5, 3, 2, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20] ) == 10\n",
        "test": "assert lbs([0 , 8 , 4, 12, 2, 10 , 6 , 14 , 1 , 9 , 5 , 13, 3, 11 , 7 , 15]) == 7\nassert lbs([1, 11, 2, 10, 4, 5, 2, 1]) == 6\nassert lbs([80, 60, 30, 40, 20, 10]) == 5",
        "canonical_solution": "def lbs(arr): \r\n\tn = len(arr) \r\n\tlis = [1 for i in range(n+1)] \r\n\tfor i in range(1 , n): \r\n\t\tfor j in range(0 , i): \r\n\t\t\tif ((arr[i] > arr[j]) and (lis[i] < lis[j] +1)): \r\n\t\t\t\tlis[i] = lis[j] + 1\r\n\tlds = [1 for i in range(n+1)] \r\n\tfor i in reversed(range(n-1)): \r\n\t\tfor j in reversed(range(i-1 ,n)): \r\n\t\t\tif(arr[i] > arr[j] and lds[i] < lds[j] + 1): \r\n\t\t\t\tlds[i] = lds[j] + 1\r\n\tmaximum = lis[0] + lds[0] - 1\r\n\tfor i in range(1 , n): \r\n\t\tmaximum = max((lis[i] + lds[i]-1), maximum) \r\n\treturn maximum"
    },
    {
        "number": 523,
        "prompt": "Write a function to check whether a given string has a capital letter, a lower case letter, a number and specified length using lambda function.\ndef check_string(str1):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    return lambda s: len(s) == 10 and any(c.isupper() for c in s) and any(c.islower() for c in s) and any(c.isdigit() for c in s)\n\n# Test the function\nprint(check_string(\"A2bcd3efg5h\"))\nprint(check_string(\"Abcdefghi1\"))\nprint(check_string(\"A1b2c3d4e5f6g7h8i9\"))\nprint(check_string(\"A1b2c3d4e5f6g7h8i\"))\nprint(check_string(\"A1b2c3d4e5f6g7h\"))\n\n# Output:\n# True\n# True\n# True\n# False\n# False",
        "generated_testcode": "assert check_string(lambda x: any(c.isupper() for c in x) and any(c.islower() for c in x) and any(c.isdigit() for c in x) and len(x) == 10)(\"Hello1234\") == True\n",
        "test": "assert check_string('python')==['String must have 1 upper case character.', 'String must have 1 number.', 'String length should be atleast 8.']\nassert check_string('123python')==['String must have 1 upper case character.']\nassert check_string('123Python')==['Valid string.']",
        "canonical_solution": "def check_string(str1):\r\n    messg = [\r\n    lambda str1: any(x.isupper() for x in str1) or 'String must have 1 upper case character.',\r\n    lambda str1: any(x.islower() for x in str1) or 'String must have 1 lower case character.',\r\n    lambda str1: any(x.isdigit() for x in str1) or 'String must have 1 number.',\r\n    lambda str1: len(str1) >= 7                 or 'String length should be atleast 8.',]\r\n    result = [x for x in [i(str1) for i in messg] if x != True]\r\n    if not result:\r\n        result.append('Valid string.')\r\n    return result  "
    },
    {
        "number": 524,
        "prompt": "Write a function to find the sum of maximum increasing subsequence of the given array.\ndef max_sum_increasing_subsequence(arr, n): \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    if n == 0: \n        return 0\n    if n == 1: \n        return arr[0] \n  \n    max_sum = [1]*n \n    max_ending_here = [1]*n \n  \n    for i in range(1, n): \n        for j in range(i): \n            if arr[i] > arr[j]: \n                if arr[i] > arr[j]: \n                    max_ending_here[i] = max(max_ending_here[i], max_ending_here[j] + 1) \n                if max_ending_here[i] > max_sum[j]: \n                    max_sum[i] = max_ending_here[i] \n  \n  \n    return max(max_sum) ",
        "generated_testcode": "assert max_sum_increasing_subsequence([1, 2, 3, 4, 5, 3, 6, 7, 8, 9, 10, 11] ) == 31\n",
        "test": "assert max_sum_increasing_subsequence([1, 101, 2, 3, 100, 4, 5], 7) == 106\nassert max_sum_increasing_subsequence([3, 4, 5, 10], 4) == 22\nassert max_sum_increasing_subsequence([10, 5, 4, 3], 4) == 10",
        "canonical_solution": "def max_sum_increasing_subsequence(arr, n): \r\n\tmax = 0\r\n\tmsis = [0 for x in range(n)] \r\n\tfor i in range(n): \r\n\t\tmsis[i] = arr[i] \r\n\tfor i in range(1, n): \r\n\t\tfor j in range(i): \r\n\t\t\tif (arr[i] > arr[j] and\r\n\t\t\t\tmsis[i] < msis[j] + arr[i]): \r\n\t\t\t\tmsis[i] = msis[j] + arr[i] \r\n\tfor i in range(n): \r\n\t\tif max < msis[i]: \r\n\t\t\tmax = msis[i] \r\n\treturn max"
    },
    {
        "number": 525,
        "prompt": "Write a python function to check whether two given lines are parallel or not.\ndef parallel_lines(line1, line2):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    # line1 = (x1, y1, x2, y2) and line2 = (x3, y3, x4, y4)\n    # slope1 = (y2 - y1) / (x2 - x1)\n    # slope2 = (y4 - y3) / (x4 - x3)\n    # slope1 == slope2 --> parallel\n    # check if they have the same slope\n    slope1 = (line1[3] - line1[1]) / (line1[2] - line1[0])\n    slope2 = (line2[3] - line2[1]) / (line2[2] - line2[0])\n    return slope1 == slope2\n\n\n# Test cases\nprint(parallel_lines((0, 0, 1, 1, 1), (0, 0, 2, 2)))  # True\nprint(parallel_lines((0, 0, 1, 1, 1), (0, 2, 2, 1)))  # True\nprint(parallel_lines((0, 0, 1, 1, 2), (0, 2, 2, 4)))  # False\nprint(parallel_lines((1, 0, 1, 1, 2), (0, 2, 2, 2)))  # True\nprint(parallel_lines((1, 0, 1, 2, 2), (0, 2, 2, 4)))  #",
        "generated_testcode": "assert parallel_lines((1, 2, 3, 4, 5, 6, 7, 8, 9) == False\n",
        "test": "assert parallel_lines([2,3,4], [2,3,8]) == True\nassert parallel_lines([2,3,4], [4,-3,8]) == False\nassert parallel_lines([3,3],[5,5]) == True",
        "canonical_solution": "def parallel_lines(line1, line2):\r\n  return line1[0]/line1[1] == line2[0]/line2[1]"
    },
    {
        "number": 526,
        "prompt": "Write a python function to capitalize first and last letters of each word of a given string.\ndef capitalize_first_last_letters(str1):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    if not str1:\n        return \"Empty string\"\n    else:\n        str1 = str1.strip()\n        words = str1.split()\n        words = [word.capitalize() for word in words]\n        words[0] = words[0].capitalize()\n        words[-1] = words[-1].capitalize()\n        result = \" \".join(words)\n        return result\n\n# Test the function\nprint(capitalize_first_last_letters(\"hello world\")) # Output: Hello World\nprint(capitalize_first_last_letters(\"HELLO WORLD\")) # Output: Hello World\nprint(capitalize_first_last_letters(\"world hello\")) # Output: World Hello\nprint(capitalize_first_last_letters(\"\")) # Output: Empty string\nprint(capitalize_first_last_letters(\"   world hello   \")) # Output: World Hello\nprint(capitalize_first_last_letters(\"a b c d e f g\")) # Output: A B C D E F G\n\n\n#Alternate solution\ndef capitalize_first_last_letters(str1):\n    if not str1:\n        return \"Empty string\"\n    else:\n        str1 = str1.strip()\n        words = str1.split()\n        words = [word.capitalize() for word in words]\n        words[0] = words[0].capitalize()\n        words[-1] = words[-",
        "generated_testcode": "assert capitalize_first_last_letters(None) == None\n",
        "test": "assert capitalize_first_last_letters(\"python\") == \"PythoN\"\nassert capitalize_first_last_letters(\"bigdata\") == \"BigdatA\"\nassert capitalize_first_last_letters(\"Hadoop\") == \"HadooP\"",
        "canonical_solution": "def capitalize_first_last_letters(str1):\r\n     str1 = result = str1.title()\r\n     result =  \"\"\r\n     for word in str1.split():\r\n        result += word[:-1] + word[-1].upper() + \" \"\r\n     return result[:-1]  "
    },
    {
        "number": 527,
        "prompt": "Write a function to find all pairs in an integer array whose sum is equal to a given number.\ndef get_pairs_count(arr, n, sum):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    freq = {}\n    count = 0\n    for i in range(n):\n        if arr[i] in freq:\n            freq[arr[i]] += 1\n        else:\n            freq[arr[i]] = 1\n\n    for i in range(n):\n        diff = sum - arr[i]\n        if diff in freq:\n            if diff != arr[i]:\n                count += freq[diff]\n            else:\n                count += (freq[diff] - 1)\n            freq[arr[i]] -= 1\n\n    return count\n\n# Test Cases\narr = [1, 2, 3, 4, 5, 6, 7, 8]\nsum = 7\nprint(get_pairs_count(arr, len(arr), sum))  # Output: 2\n\narr = [1, 2, 3, 4, 5, 6, 7, 8]\nsum = 11\nprint(get_pairs_count(arr, len(arr), sum))  # Output: 4\n\narr = [1, 1, 2, 2, 3, 3, 4, 4]\nsum = 5\nprint(get_pairs_count(arr, len(arr), sum))  # Output: 3\n\narr = [1, 1, 2, 2, 2, 3, 3, 3]\nsum = 4",
        "generated_testcode": "assert get_pairs_count([1, 2, 3, 4, 5, 6, 7, 8, 9], 10) == 2\n",
        "test": "assert get_pairs_count([1, 5, 7, -1, 5], 5, 6) == 3\nassert get_pairs_count([1, 5, 7, -1], 4, 6) == 2\nassert get_pairs_count([1, 1, 1, 1], 4, 2) == 6",
        "canonical_solution": "def get_pairs_count(arr, n, sum):\r\n    count = 0 \r\n    for i in range(0, n):\r\n        for j in range(i + 1, n):\r\n            if arr[i] + arr[j] == sum:\r\n                count += 1\r\n    return count"
    },
    {
        "number": 528,
        "prompt": "Write a function to find the list of lists with minimum length.\ndef min_length(list1):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    min_length = len(list1[0])\n    for i in range(len(list1)):\n        if len(list1[i]) < min_length:\n            min_length = len(list1[i])\n    for j in range(len(list1)):\n        if len(list1[j]) == min_length:\n            print(list1[j])\n\n\nlist1 = [[1,2,3],[1,2],[1,2,3,4],[1,2,3,4,5],[1],[1,2,3,4,5,6,7],[1,2,3,4,5,6,7,8]]\nmin_length(list1)\n\n# Output: [1],[1,2,3,4],[1,2,3,4,5]\n\n# Explanation: The function finds the minimum length of the lists in the given list and prints the lists with that length. ",
        "generated_testcode": "assert min_length([[1,2,3],[4,5],[6,7,8,9],[10],[11,12,13,14,15,16],[17,18],[19,20,21,22,23,24,25,26]] ) == [1,[10]\n\n# Test case 2:\n",
        "test": "assert min_length([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(1, [0])\nassert min_length([[1], [5, 7], [10, 12, 14,15]])==(1, [1])\nassert min_length([[5], [15,20,25]])==(1, [5])",
        "canonical_solution": "def min_length(list1):\r\n   min_length = min(len(x) for x in  list1 )  \r\n   min_list = min((x) for x in   list1)\r\n   return(min_length, min_list)     "
    },
    {
        "number": 529,
        "prompt": "Write a function to find the nth jacobsthal-lucas number.\ndef jacobsthal_lucas(n): \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    # base cases\n    if n == 0: \n        return 0\n    elif n == 1: \n        return 1\n    # initialize variables\n    a, b = 0, 1\n    c, d = 1, 1\n    # loop through the range of n-1\n    for i in range(2, n+1): \n        # calculate the next jacobsthal-lucas number\n        a, b = b, (a + c * b)\n        c, d = d, (2 * c + d)\n    return a\n\n# Test the function\nprint(jacobsthal_lucas(0)) # 0\nprint(jacobsthal_lucas(1)) # 1\nprint(jacobsthal_lucas(2)) # 1\nprint(jacobsthal_lucas(3)) # 3\nprint(jacobsthal_lucas(4)) # 4\nprint(jacobsthal_lucas(5)) # 7\nprint(jacobsthal_lucas(6)) # 11\nprint(jacobsthal_lucas(7)) # 21\nprint(jacobsthal_lucas(8)) # 43\nprint(jacobsthal_lucas(9)) # 112\nprint(jacobsthal_lucas(10)) # 277\n\n# The",
        "generated_testcode": "assert jacobsthal_lucas(0) == 2\n",
        "test": "assert jacobsthal_lucas(5) == 31\nassert jacobsthal_lucas(2) == 5\nassert jacobsthal_lucas(4) == 17",
        "canonical_solution": "def jacobsthal_lucas(n): \r\n\tdp=[0] * (n + 1) \r\n\tdp[0] = 2\r\n\tdp[1] = 1\r\n\tfor i in range(2, n+1): \r\n\t\tdp[i] = dp[i - 1] + 2 * dp[i - 2]; \r\n\treturn dp[n]"
    },
    {
        "number": 530,
        "prompt": "Write a function to find the ration of negative numbers in an array of integers.\ndef negative_count(nums):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    neg_count = 0\n    for num in nums:\n        if num < 0:\n            neg_count += 1\n    return neg_count / len(nums)\n\n# Test cases\nprint(negative_count([-1, -2, 3, -5, 6, -8, -9, 4])) # Output: 0.4\nprint(negative_count([-1, 2, -3, 4, -5, -6])) # Output: 0.8\nprint(negative_count([1, 2, 3, 4, 5])) # Output: 0\nprint(negative_count([0, 0, 0])) # Output: 0\nprint(negative_count([-1])) # Output: 1\nprint(negative_count([])) # Output: 0\n\n\n# Solution:\ndef negative_count(nums):\n    if len(nums) == 0:\n        return 0\n    neg_count = sum(1 for num in nums if num < 0)\n    return neg_count / len(nums)\n",
        "generated_testcode": "assert negative_count([1, 2, 3, -4, -5, 6, -7, 8, -9] ) == 4/6\n",
        "test": "assert negative_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])==0.31\nassert negative_count([2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8])==0.31\nassert negative_count([2, 4, -6, -9, 11, -12, 14, -5, 17])==0.44",
        "canonical_solution": "from array import array\r\ndef negative_count(nums):\r\n    n = len(nums)\r\n    n1 = 0\r\n    for x in nums:\r\n        if x < 0:\r\n            n1 += 1\r\n        else:\r\n          None\r\n    return round(n1/n,2)"
    },
    {
        "number": 531,
        "prompt": "Write a function to find minimum number of coins that make a given value.\ndef min_coins(coins, m, V): \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    dp = [0]*(V+1)\n    dp[0] = 0\n    for i in range(1, V+1): \n        dp[i] = float('inf')\n        for j in range(m): \n            if i >= coins[j]: \n                if dp[i-coins[j]] != float('inf') and dp[i] > dp[i-coins[j]]+1: \n                    dp[i] = dp[i-coins[j]]+1\n    return dp[V] if dp[V] != float('inf') else -1\n\n\ncoins = [1, 2, 5, 10, 25, 50] \nm = len(coins) \nV = 111\nprint(min_coins(coins, m, V))\n\n\n# Output: 3\n# Explanation: \n# There are 3 coins of 5, 1, 2, 10 that can make a value of 11 (1+1+1) ",
        "generated_testcode": "assert min_coins([1, 2, 5, 10, 25, 50], 63, 4) == 3 # Expected output: 3 (10 + 10 + 10)\n",
        "test": "assert min_coins([9, 6, 5, 1] ,4,11)==2\nassert min_coins([4,5,6,7,8,9],6,9)==1\nassert min_coins([1, 2, 3],3,4)==2",
        "canonical_solution": "import sys \r\ndef min_coins(coins, m, V): \r\n    if (V == 0): \r\n        return 0\r\n    res = sys.maxsize \r\n    for i in range(0, m): \r\n        if (coins[i] <= V): \r\n            sub_res = min_coins(coins, m, V-coins[i]) \r\n            if (sub_res != sys.maxsize and sub_res + 1 < res): \r\n                res = sub_res + 1  \r\n    return res "
    },
    {
        "number": 532,
        "prompt": "Write a function to check if the two given strings are permutations of each other.\ndef check_permutation(str1, str2):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    if len(str1) != len(str2):\n        return False\n\n    freq = {}\n    for char in str1:\n        if char in freq:\n            freq[char] += 1\n        else:\n            freq[char] = 1\n\n    for char in str2:\n        if char in freq:\n            freq[char] -= 1\n        else:\n            freq[char] = 1\n\n\n    for val in freq.values():\n        if val != 0:\n            return False\n\n    return True\n\n\n# Test the function\nprint(check_permutation('abcde', 'edcba')) # True\nprint(check_permutation('abc', 'def')) # False\nprint(check_permutation('abc', 'deff')) # False\nprint(check_permutation('', '')) # True\nprint(check_permutation('aabbc', 'abc')) # False\nprint(check_permutation('abc', 'aabbc')) # False\nprint(check_permutation('abcd', 'badc')) # True\nprint(check_permutation('abcd', 'abcc')) # False",
        "generated_testcode": "assert check_permutation(None, None) == False\n",
        "test": "assert check_permutation(\"abc\", \"cba\") == True\nassert check_permutation(\"test\", \"ttew\") == False\nassert check_permutation(\"xxyz\", \"yxzx\") == True",
        "canonical_solution": "def check_permutation(str1, str2):\r\n  n1=len(str1)\r\n  n2=len(str2)\r\n  if(n1!=n2):\r\n    return False\r\n  a=sorted(str1)\r\n  str1=\" \".join(a)\r\n  b=sorted(str2)\r\n  str2=\" \".join(b)\r\n  for i in range(0, n1, 1):\r\n    if(str1[i] != str2[i]):\r\n      return False\r\n  return True"
    },
    {
        "number": 533,
        "prompt": "Write a function to remove particular data type elements from the given tuple.\ndef remove_datatype(test_tuple, data_type):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    new_tuple = tuple(x for x in test_tuple if not isinstance(x, data_type))\n    return new_tuple\n\n\n# Test the function\ntest_tuple = (1, \"a\", 2, 3.0, True, \"b\", 4, 'c', [1,2,3])\nprint(remove_datatype(test_tuple, str)) # (1, 2, 3.0, True, [1, 2, 3])\nprint(remove_datatype(test_tuple, int)) # ('a', 'b', [1, 2, 3])\nprint(remove_datatype(test_tuple, bool)) # (1, 2, 3.0, 'c')\nprint(remove_datatype(test_tuple, list)) # (1, 'a', 3.0)\nprint(remove_datatype(test_tuple, tuple)) # (1, 'a', 2, 3.0, True, 'b', 'c')",
        "generated_testcode": "assert remove_datatype((\"hello\", 123, 45.67, \"world\", True, 78, 90, \"python\", 34) == (123, 45.67, 78, 34)\n",
        "test": "assert remove_datatype((4, 5, 4, 7.7, 1.2), int) == [7.7, 1.2]\nassert remove_datatype((7, 8, 9, \"SR\"), str) == [7, 8, 9]\nassert remove_datatype((7, 1.1, 2, 2.2), float) == [7, 2]",
        "canonical_solution": "def remove_datatype(test_tuple, data_type):\r\n  res = []\r\n  for ele in test_tuple:\r\n    if not isinstance(ele, data_type):\r\n      res.append(ele)\r\n  return (res) "
    },
    {
        "number": 534,
        "prompt": "Write a function to search a literals string in a string and also find the location within the original string where the pattern occurs.\ndef search_literal(pattern,text):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": true,
        "answer": "    if not pattern:\n        return None\n    pattern_len = len(pattern)\n    text_len = len(text)\n    for i in range(text_len-pattern_len+1):\n        if text[i:i+pattern_len] == pattern:\n            return (True,i)\n    return (False,None)\n\n#Test the function\nprint(search_literal(\"hello\",\"hello world\"))\nprint(search_literal(\"world\",\"hello world\"))\nprint(search_literal(\"hi\",\"hello world\"))\nprint(search_literal(\"\",\"\"))\nprint(search_literal(\"abc\",\"\"))\nprint(search_literal(\"world\",\"hello world\"))\nprint(search_literal(\"world\",\"Hello world\"))\n\n#Output\n#(True, 0)\n#(True, 6)\n#(False, None)\n#(False, None)\n#(False, None)\n#(False, None)",
        "generated_testcode": "assert search_literal(r'hello', 'hello world') == (True, 0)\n",
        "test": "assert search_literal('python','python programming language')==(0,6)\nassert search_literal('programming','python programming language')==(7,18)\nassert search_literal('language','python programming language')==(19,27)",
        "canonical_solution": "import re\r\ndef search_literal(pattern,text):\r\n match = re.search(pattern, text)\r\n s = match.start()\r\n e = match.end()\r\n return (s, e)"
    },
    {
        "number": 535,
        "prompt": "Write a function to find the top or bottom surface area of a cylinder.\ndef topbottom_surfacearea(r):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    area = 2 * 3.14 * r * r\n    return 2 * area\n\n\n# Test the function with a radius of 4\nprint(topbottom_surfacearea(4))  # Expected output: 1108.85714\n\n\n# Test the function with a radius of 7\nprint(topbottom_surfacearea(7))  # Expected output: 69.76759\n\n\n# Test the function with a radius of 2.5\nprint(topbottom_surfacearea(2.5))  # Expected output: 24.1972\n\n\n# Test the function with a radius of 10\nprint(topbottom_surfacearea(10))  # Expected output: 62.8319\n\n",
        "generated_testcode": "assert topbottom_surfacearea(5) == 314.159875\n",
        "test": "assert topbottom_surfacearea(10)==314.15000000000003\nassert topbottom_surfacearea(5)==78.53750000000001\nassert topbottom_surfacearea(4)==50.264",
        "canonical_solution": "def topbottom_surfacearea(r):\r\n  toporbottomarea=3.1415*r*r\r\n  return toporbottomarea"
    },
    {
        "number": 536,
        "prompt": "Write a function to select the nth items of a list.\ndef nth_items(list,n):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    result = []\n    for i in range(n):\n        result.append(list[i])\n    return result\n\n#Test the function\nnumbers = [1,2,3,4,5,6,7,8,9,10]\nprint(nth_items(numbers,3))\n#Output: [1,2,3]\n\nfruits = [\"apple\",\"banana\",\"orange\",\"grape\",\"kiwi\",\"mango\",\"strawberry\"]\nprint(nth_items(fruits,3))\n#Output: ['apple', 'banana', 'orange']\n\nnames = [\"John\",\"Mary\",\"Peter\",\"Sarah\",\"Michael\",\"David\"]\nprint(nth_items(names,2))\n#Output: ['John', 'Mary']\n\n#Modify the function to take an optional parameter to select items from the list in reverse order\ndef nth_items_reverse(list,n,reverse=False):\n    if reverse:\n        return list[-n:]\n    else:\n        return list[:n]\n\n#Test the modified function\nnumbers = [1,2,3,4,5,6,7,8,9,10]\nprint(nth_items_reverse(numbers,3))\n#Output: [8,9,10]\nprint(nth_items_reverse(numbers,3,True))\n#Output: [1,2,3]\n\nfruits = [\"apple\",\"banana\",\"orange\",\"grape\",\"kiwi\",\"mango\",\"strawberry\"]\nprint(",
        "generated_testcode": "assert nth_items([\"apple\", \"banana\", \"cherry\", \"date\", \"elderberry\", \"fig\", \"grape\"], 2) == [\"banana\", \"date\"]\n",
        "test": "assert nth_items([1, 2, 3, 4, 5, 6, 7, 8, 9],2)==[1, 3, 5, 7, 9] \nassert nth_items([10,15,19,17,16,18],3)==[10,17] \nassert nth_items([14,16,19,15,17],4)==[14,17]",
        "canonical_solution": "def nth_items(list,n):\r\n return list[::n]"
    },
    {
        "number": 537,
        "prompt": "Write a python function to find the first repeated word in a given string.\ndef first_repeated_word(str1):\n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    words = str1.split()\n    word_count = {}\n    for word in words:\n        if word in word_count:\n            return word\n        word_count[word] = 1\n    return None\n\n# Example usage:\nprint(first_repeated_word(\"hello world world hello python\")) # Output: \"hello\"\nprint(first_repeated_word(\"hello world python world\")) # Output: \"None\"\nprint(first_repeated_word(\"python python\")) # Output: \"python\"\n\n",
        "generated_testcode": "assert first_repeated_word(str1=\"This is a test string with some repeated words like test\") == \"test\"\n",
        "test": "assert first_repeated_word(\"ab ca bc ab\") == \"ab\"\nassert first_repeated_word(\"ab ca bc\") == 'None'\nassert first_repeated_word(\"ab ca bc ca ab bc\") == \"ca\"",
        "canonical_solution": "def first_repeated_word(str1):\r\n  temp = set()\r\n  for word in str1.split():\r\n    if word in temp:\r\n      return word;\r\n    else:\r\n      temp.add(word)\r\n  return 'None'"
    },
    {
        "number": 538,
        "prompt": "Write a python function to convert a given string list to a tuple.\ndef string_list_to_tuple(str1):\n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    return tuple(str1)\n\n# Test the function with an example\nstr1 = ['a', 'b', 'c', 'd', 'e', 'f', 'g']\nprint(string_list_to_tuple(str1))\n# Output: ('a', 'b', 'c', 'd', 'e', 'f', 'g') ",
        "generated_testcode": "assert string_list_to_tuple([\"apple\", \"banana\", \"cherry\", \"orange\"]), (\"apple\", \"banana\", \"cherry\")\n",
        "test": "assert string_list_to_tuple((\"python 3.0\")) == ('p', 'y', 't', 'h', 'o', 'n', '3', '.', '0')\nassert string_list_to_tuple((\"bigdata\")) == ('b', 'i', 'g', 'd', 'a', 't', 'a')\nassert string_list_to_tuple((\"language\")) == ('l', 'a', 'n', 'g', 'u', 'a', 'g','e')",
        "canonical_solution": "def string_list_to_tuple(str1):\r\n    result = tuple(x for x in str1 if not x.isspace()) \r\n    return result"
    },
    {
        "number": 539,
        "prompt": "Write a function to create a list containing the power of said number in bases raised to the corresponding number in the index using map function.\ndef basesnum_coresspondingnum(bases_num,index):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    return list(map(lambda x: pow(bases_num[x],index[x]))\n\n#Test case:\nbases_num = [2,3,4,5]\nindex = [1,2,3]\nprint(basesnum_coresspondingnum(bases_num,index)) #[2, 8, 125]\n\n#Explanation: \n#The function takes two arguments, bases_num and index. \n#It creates an empty list, and iterates through the index using map() function with lambda function that takes each value in the index as an argument, \n#calculates the power of the corresponding value in the bases_num list and appends it to the list. \n#The final list returned contains the result of the power of bases_num raised to the index. ",
        "generated_testcode": "assert basesnum_coresspondingnum([2,3,4,5], [0,1,2]) == [1,8,1024]\n",
        "test": "assert basesnum_coresspondingnum([10, 20, 30, 40, 50, 60, 70, 80, 90, 100],[1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[10, 400, 27000, 2560000, 312500000, 46656000000, 8235430000000, 1677721600000000, 387420489000000000, 100000000000000000000]\nassert basesnum_coresspondingnum([1, 2, 3, 4, 5, 6, 7],[10, 20, 30, 40, 50, 60, 70])==[1, 1048576, 205891132094649, 1208925819614629174706176, 88817841970012523233890533447265625, 48873677980689257489322752273774603865660850176, 143503601609868434285603076356671071740077383739246066639249]\nassert basesnum_coresspondingnum([4, 8, 12, 16, 20, 24, 28],[3, 6, 9, 12, 15, 18, 21])==[64, 262144, 5159780352, 281474976710656, 32768000000000000000, 6979147079584381377970176, 2456510688823056210273111113728]",
        "canonical_solution": "def basesnum_coresspondingnum(bases_num,index):\r\n  result = list(map(pow, bases_num, index))\r\n  return result"
    },
    {
        "number": 540,
        "prompt": "Write a python function to find the difference between highest and least frequencies in a given array.\ndef find_Diff(arr,n): \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    freq_dict = {}\n    for i in range(n):\n        if arr[i] in freq_dict:\n            freq_dict[arr[i]] += 1\n        else:\n            freq_dict[arr[i]] = 1\n    max_freq = max(freq_dict.values())\n    min_freq = min(freq_dict.values())\n    return max_freq - min_freq ",
        "generated_testcode": "assert find_Diff([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20], 12) == 8\n",
        "test": "assert find_Diff([1,1,2,2,7,8,4,5,1,4],10) == 2\nassert find_Diff([1,7,9,2,3,3,1,3,3],9) == 3\nassert find_Diff([1,2,1,2],4) == 0",
        "canonical_solution": "def find_Diff(arr,n): \r\n    arr.sort()  \r\n    count = 0; max_count = 0; min_count = n \r\n    for i in range(0,(n-1)): \r\n        if arr[i] == arr[i + 1]: \r\n            count += 1\r\n            continue\r\n        else: \r\n            max_count = max(max_count,count) \r\n            min_count = min(min_count,count) \r\n            count = 0\r\n    return max_count - min_count "
    },
    {
        "number": 541,
        "prompt": "Write a function to find if the given number is abundant or not.\ndef get_sum(n): \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    sum = 0\n    for i in range(1,n):\n        if n%i==0:\n            sum+=i\n    return sum\n\ndef is_abundant(n):\n    if n<12:\n        return False\n    else:\n        sum = get_sum(n)\n        if sum>n:\n            return True\n        else:\n            return False\n\ndef main():\n    num = int(input(\"Enter a number: \"))\n    if is_abundant(num):\n        print(\"Abundant\")\n    else:\n        print(\"Not Abundant\")\n\nif __name__ == '__main__':\n    main()",
        "generated_testcode": "assert get_sum(12) == True\n",
        "test": "assert check_abundant(12) == True\nassert check_abundant(15) == False\nassert check_abundant(18) == True",
        "canonical_solution": "import math \r\ndef get_sum(n): \r\n\tsum = 0\r\n\ti = 1\r\n\twhile i <= (math.sqrt(n)): \r\n\t\tif n%i == 0: \r\n\t\t\tif n/i == i : \r\n\t\t\t\tsum = sum + i \r\n\t\t\telse: \r\n\t\t\t\tsum = sum + i \r\n\t\t\t\tsum = sum + (n / i ) \r\n\t\ti = i + 1\r\n\tsum = sum - n \r\n\treturn sum\r\ndef check_abundant(n): \r\n\tif (get_sum(n) > n): \r\n\t\treturn True\r\n\telse: \r\n\t\treturn False"
    },
    {
        "number": 542,
        "prompt": "Write a function to replace all occurrences of spaces, commas, or dots with a colon in the given string by using regex.\ndef fill_spaces(text):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": true,
        "answer": "    import re\n    new_text = re.sub('[ .,]+', ':', text)\n    return new_text\n\n# Test the function with the given test cases\ntest1 = 'Hello, world! This is a test.'\ntest2 = 'Replace spaces and dots with colons'\ntest3 = 'Replace spaces, commas and dots'\ntest4 = 'Replace spaces, dots and commas'\nprint(fill_spaces(test1))\nprint(fill_spaces(test2))\nprint(fill_spaces(test3))\nprint(fill_spaces(test4))\n\n# Output:\n# Hello:world!:This:is:a:test.\n# Replace:spaces:and:colons\n# Replace:spaces:and:colons\n# Replace:spaces:and:colons",
        "generated_testcode": "assert fill_spaces(\"Hello, world\" ) == \"Hello:world\"\n",
        "test": "assert fill_spaces('Boult Curve Wireless Neckband') == 'Boult:Curve:Wireless:Neckband'\nassert fill_spaces('Stereo Sound Sweatproof') == 'Stereo:Sound:Sweatproof'\nassert fill_spaces('Probass Curve Audio') == 'Probass:Curve:Audio'",
        "canonical_solution": "import re\r\ndef fill_spaces(text):\r\n  return (re.sub(\"[ ,.]\", \":\", text))"
    },
    {
        "number": 543,
        "prompt": "Write a function to add two numbers and print number of digits of sum.\ndef count_digits(num1,num2):\n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    sum = num1 + num2\n    count = 0\n    while sum > 0:\n        count += 1\n        sum //= 10\n    return count\n\n\n# test cases\nprint(count_digits(99,99)) # should print 3\nprint(count_digits(123,456)) # should print 4\nprint(count_digits(0,0)) # should print 1\nprint(count_digits(1234,567)) # should print 4\nprint(count_digits(999,1000)) # should print 3\n",
        "generated_testcode": "assert count_digits(123,456) == 3\n",
        "test": "assert count_digits(9875,10)==(4)\nassert count_digits(98759853034,100)==(11)\nassert count_digits(1234567,500)==(7)",
        "canonical_solution": "def count_digits(num1,num2):\r\n    number=num1+num2\r\n    count = 0\r\n    while(number > 0):\r\n        number = number // 10\r\n        count = count + 1\r\n    return count"
    },
    {
        "number": 544,
        "prompt": "Write a function to flatten the tuple list to a string.\ndef flatten_tuple(test_list):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": true,
        "answer": "    result = \"\"\n    for i in test_list:\n        if type(i) == tuple:\n            result += str(i[0] + i[1])\n        else:\n            result += str(i)\n    return result\n\n\ntest_list = [1, (2,3), (4,5, (6,7), 8), 9]\nprint(flatten_tuple(test_list)) # Output: \"123456789\"\ntest_list = [1, (2,3), \"Hello\", (4,5, (6,7), 8), \"World\", \"!\"]\nprint(flatten_tuple(test_list)) # Output: \"123Hello45678World!\"",
        "generated_testcode": "assert flatten_tuple(()) == \"\"\n",
        "test": "assert flatten_tuple([('1', '4', '6'), ('5', '8'), ('2', '9'), ('1', '10')]) == '1 4 6 5 8 2 9 1 10'\nassert flatten_tuple([('2', '3', '4'), ('6', '9'), ('3', '2'), ('2', '11')]) == '2 3 4 6 9 3 2 2 11'\nassert flatten_tuple([('14', '21', '9'), ('24', '19'), ('12', '29'), ('23', '17')]) == '14 21 9 24 19 12 29 23 17'",
        "canonical_solution": "def flatten_tuple(test_list):\r\n  res = ' '.join([idx for tup in test_list for idx in tup])\r\n  return (res) "
    },
    {
        "number": 545,
        "prompt": "Write a python function to toggle only first and last bits of a given number.\ndef take_L_and_F_set_bits(n) : \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    # Taking input from user\n    num = int(input(\"Enter a number: \"))\n    # Taking the binary representation of the number\n    binary_num = bin(num)\n    # Splitting the binary number into two halves\n    binary_num_1 = binary_num[2:len(binary_num)//2+2]\n    binary_num_2 = binary_num[len(binary_num)//2:]\n    # Toggling the first and last bits of the number\n    binary_num_1 = bin(int(binary_num_1,2)^1)\n    binary_num_2 = bin(int(binary_num_2,2)^1)\n    # Concatenating the two halves\n    binary_num_final = binary_num_1 + binary_num_2\n    # Converting the binary number back to decimal\n    decimal_num = int(binary_num_final,2)\n    # Returning the decimal number\n    return decimal_num\n\n\n# Calling the function\nprint(take_L_and_F_set_bits(10))\n# Output: 9\n# Explanation: 1010 in binary is 1010 and toggling the first and last bits gives 11000. \n# So, the output is 4. ",
        "generated_testcode": "assert take_L_and_F_set_bits(10) == 5\n",
        "test": "assert toggle_F_and_L_bits(10) == 3\nassert toggle_F_and_L_bits(15) == 6\nassert toggle_F_and_L_bits(20) == 5",
        "canonical_solution": "def take_L_and_F_set_bits(n) : \r\n    n = n | n >> 1\r\n    n = n | n >> 2\r\n    n = n | n >> 4\r\n    n = n | n >> 8\r\n    n = n | n >> 16 \r\n    return ((n + 1) >> 1) + 1      \r\ndef toggle_F_and_L_bits(n) :  \r\n    if (n == 1) : \r\n        return 0 \r\n    return n ^ take_L_and_F_set_bits(n) "
    },
    {
        "number": 546,
        "prompt": "Write a function to find the last occurrence of a character in a string.\ndef last_occurence_char(string,char):\n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    for i in range(len(string)-1, -1, -1):\n        if string[i] == char:\n            return i\n    return -1\n\n#test the function\nstring = \"hello world\"\nchar = \"l\"\nprint(last_occurence_char(string,char)) ",
        "generated_testcode": "assert last_occurence_char(string=\"hello world\", char=\"o\") == 7\n",
        "test": "assert last_occurence_char(\"hello world\",'l')==10\nassert last_occurence_char(\"language\",'g')==7\nassert last_occurence_char(\"little\",'y')==None",
        "canonical_solution": "def last_occurence_char(string,char):\r\n flag = -1\r\n for i in range(len(string)):\r\n     if(string[i] == char):\r\n         flag = i\r\n if(flag == -1):\r\n    return None\r\n else:\r\n    return flag + 1"
    },
    {
        "number": 547,
        "prompt": "Write a python function to find the sum of hamming distances of all consecutive numbers from o to n.\ndef Total_Hamming_Distance(n):   \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    total = 0\n    for i in range(n):\n        total += Hamming_Distance(i, i+1)\n    return total\n\n#Function to calculate the hamming distance of two numbers\ndef Hamming_Distance(num1, num2):\n    xor = bin(num1^num2)\n    count = 0\n    for i in xor:\n        if i == '1':\n            count += 1\n    return count\n\n#Testing the function\nprint(Total_Hamming_Distance(25))\n\n# Output: 75\n",
        "generated_testcode": "assert Total_Hamming_Distance(10) == 10, \"Test case 1 failed\"\n",
        "test": "assert Total_Hamming_Distance(4) == 7\nassert Total_Hamming_Distance(2) == 3\nassert Total_Hamming_Distance(5) == 8",
        "canonical_solution": "def Total_Hamming_Distance(n):   \r\n    i = 1\r\n    sum = 0\r\n    while (n // i > 0):  \r\n        sum = sum + n // i  \r\n        i = i * 2     \r\n    return sum"
    },
    {
        "number": 548,
        "prompt": "Write a function to find the length of the longest increasing subsequence of the given sequence.\ndef longest_increasing_subsequence(arr): \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    n = len(arr)\n    dp = [1] * n\n    \n    for i in range(1, n): \n        for j in range(i): \n            if arr[i] > arr[j] and dp[i] < dp[j] + 1: \n                dp[i] = dp[j] + 1\n                \n    return max(dp) ",
        "generated_testcode": "assert longest_increasing_subsequence([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20] ) == 10\n",
        "test": "assert longest_increasing_subsequence([10, 22, 9, 33, 21, 50, 41, 60]) == 5\nassert longest_increasing_subsequence([3, 10, 2, 1, 20]) == 3\nassert longest_increasing_subsequence([50, 3, 10, 7, 40, 80]) == 4 ",
        "canonical_solution": "def longest_increasing_subsequence(arr): \r\n\tn = len(arr) \r\n\tlongest_increasing_subsequence = [1]*n \r\n\tfor i in range (1 , n): \r\n\t\tfor j in range(0 , i): \r\n\t\t\tif arr[i] > arr[j] and longest_increasing_subsequence[i]< longest_increasing_subsequence[j] + 1 : \r\n\t\t\t\tlongest_increasing_subsequence[i] = longest_increasing_subsequence[j]+1\r\n\tmaximum = 0\r\n\tfor i in range(n): \r\n\t\tmaximum = max(maximum , longest_increasing_subsequence[i]) \r\n\treturn maximum"
    },
    {
        "number": 549,
        "prompt": "Write a python function to find the sum of fifth power of first n odd natural numbers.\ndef odd_Num_Sum(n) : \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    sum = 0\n    for i in range(1, n+1, 2) : \n        sum += i**5\n    return sum ",
        "generated_testcode": "assert odd_Num_Sum(5) == 225\n",
        "test": "assert odd_Num_Sum(1) == 1\nassert odd_Num_Sum(2) == 244\nassert odd_Num_Sum(3) == 3369",
        "canonical_solution": "def odd_Num_Sum(n) : \r\n    j = 0\r\n    sm = 0\r\n    for i in range(1,n+1) : \r\n        j = (2*i-1) \r\n        sm = sm + (j*j*j*j*j)     \r\n    return sm "
    },
    {
        "number": 550,
        "prompt": "Write a python function to find the maximum element in a sorted and rotated array.\ndef find_Max(arr,low,high): \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    if high == low: \n        return arr[low] \n    if high == low + 1: \n        return max(arr[low], arr[high]) \n    if arr[low] > arr[high]: \n        return arr[low] \n    mid = (low + high) // 2\n    if arr[mid] > arr[high]: \n        return find_Max(arr, low, mid) \n    else: \n        return find_Max(arr, mid, high) \n  \n  \n# Function to find the maximum element in a sorted and rotated array \ndef max_in_rotated_array(arr): \n    n = len(arr) \n    return find_Max(arr,0, n-1) \n  \n  \n# Driver code \narr = [4, 5, 6, 7, 8, 9, 10, 1, 2, 3] \nprint(\"Maximum element is\", max_in_rotated_array(arr)) ",
        "generated_testcode": "assert find_Max([4,5,6,7,8,9,10,1,2,3], 0, 5) == 10\n",
        "test": "assert find_Max([2,3,5,6,9],0,4) == 9\nassert find_Max([3,4,5,2,1],0,4) == 5\nassert find_Max([1,2,3],0,2) == 3",
        "canonical_solution": "def find_Max(arr,low,high): \r\n    if (high < low): \r\n        return arr[0] \r\n    if (high == low): \r\n        return arr[low] \r\n    mid = low + (high - low) // 2 \r\n    if (mid < high and arr[mid + 1] < arr[mid]): \r\n        return arr[mid] \r\n    if (mid > low and arr[mid] < arr[mid - 1]): \r\n        return arr[mid - 1]  \r\n    if (arr[low] > arr[mid]): \r\n        return find_Max(arr,low,mid - 1) \r\n    else: \r\n        return find_Max(arr,mid + 1,high) "
    },
    {
        "number": 551,
        "prompt": "Write a function to extract a specified column from a given nested list.\ndef extract_column(list1, n):\n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    col = []\n    for sublist in list1:\n        col.append(sublist[n])\n    return col\n\n#Example usage:\nlist1 = [[1,2,3], [4,5,6], [7,8,9]]\nprint(extract_column(list1, 2)) # Output: [3, 6, 9]\n\nlist2 = [['apple', 'banana', 'orange'], ['red', 'yellow', 'orange'], ['tasty', 'juicy', 'sweet']]\nprint(extract_column(list2, 1)) # Output: ['banana', 'yellow', 'sweet']\n\nlist3 = [[1, 'a', True], [2, 'b', False], [3, 'c', True]]\nprint(extract_column(list3, 2)) # Output: [True, False, True] ",
        "generated_testcode": "assert extract_column([[1,2,3], [4,5,6], [7,8,9]], 1) == [2, 5, 8]\n",
        "test": "assert extract_column([[1, 2, 3], [2, 4, 5], [1, 1, 1]],0)==[1, 2, 1]\nassert extract_column([[1, 2, 3], [-2, 4, -5], [1, -1, 1]],2)==[3, -5, 1]\nassert extract_column([[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]],0)==[1, 5, 1, 13, 5, 9]",
        "canonical_solution": "def extract_column(list1, n):\r\n   result = [i.pop(n) for i in list1]\r\n   return result "
    },
    {
        "number": 552,
        "prompt": "Write a python function to check whether a given sequence is linear or not.\ndef Seq_Linear(seq_nums):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": true,
        "answer": "    if len(seq_nums)<=1:\n        return True\n    for i in range(1,len(seq_nums)-1):\n        if seq_nums[i]-seq_nums[i-1]!=seq_nums[i+1]-seq_nums[i]:\n            return False\n    return True\n\n# Test the function with example inputs\nprint(Seq_Linear([1,2,3,4,5,6,7,8,9,10])) # True\nprint(Seq_Linear([1,2,4,6,8,10])) # False\nprint(Seq_Linear([1,2,3,4,4,5,6,7,8])) # False\nprint(Seq_Linear([1,2,3,4,4,5,6,7,8,9])) # False\nprint(Seq_Linear([1])) # True\nprint(Seq_Linear([1,2,4,6,8])) # False\nprint(Seq_Linear([1,2,4,6,8,10,12])) # False\n",
        "generated_testcode": "assert Seq_Linear([1,2,3,4,5,6,7,8,9] ) == True\n",
        "test": "assert Seq_Linear([0,2,4,6,8,10]) == \"Linear Sequence\"\nassert Seq_Linear([1,2,3]) == \"Linear Sequence\"\nassert Seq_Linear([1,5,2]) == \"Non Linear Sequence\"",
        "canonical_solution": "def Seq_Linear(seq_nums):\r\n  seq_nums = [seq_nums[x] - seq_nums[x-1] for x in range(1, len(seq_nums))]\r\n  if len(set(seq_nums)) == 1: \r\n    return \"Linear Sequence\"\r\n  else:\r\n    return \"Non Linear Sequence\""
    },
    {
        "number": 553,
        "prompt": "Write a function to convert the given tuple to a floating-point number.\ndef tuple_to_float(test_tup):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    #Your code here\n    result = ''\n    for i in test_tup:\n        result += str(i)\n    return float(result)\n\n#test the function\nprint(tuple_to_float((1,2,3,4)) #should return 12.34\nprint(tuple_to_float((5,6,7,8,9)) #should return 56.789\nprint(tuple_to_float((1,2,3,4,5,6,7,8,9)) #should return 123.456789",
        "generated_testcode": "assert tuple_to_float(()) == 0.0\n",
        "test": "assert tuple_to_float((4, 56)) == 4.56\nassert tuple_to_float((7, 256)) == 7.256\nassert tuple_to_float((8, 123)) == 8.123",
        "canonical_solution": "def tuple_to_float(test_tup):\r\n  res = float('.'.join(str(ele) for ele in test_tup))\r\n  return (res) "
    },
    {
        "number": 554,
        "prompt": "Write a python function to find odd numbers from a mixed list.\ndef Split(list): \n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    odd_numbers = []\n    even_numbers = []\n    for i in list:\n        if i % 2 != 0:\n            odd_numbers.append(i)\n        else:\n            even_numbers.append(i)\n    return odd_numbers\n    return even_numbers\n\n\n# Test the function\nmy_list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]\nprint(Split(my_list))\n\n\n# Output: [1, 3, 5, 7, 9, 11]\n# Explanation: The function splits the list into odd and even numbers and returns the odd numbers.\n\n\n# Another test case\nmy_list = [2, 4, 6, 8, 1, 3, 5, 7, 9, 0]\nprint(Split(my_list))\n\n# Output: [1, 3, 5, 7, 9]\n# Explanation: The function splits the list into odd and even numbers and returns the odd numbers.\n",
        "generated_testcode": "assert Split([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20] ) == [1,3,5,7,9,11,13,15,17,19]\n",
        "test": "assert Split([1,2,3,4,5,6]) == [1,3,5]\nassert Split([10,11,12,13]) == [11,13]\nassert Split([7,8,9,1]) == [7,9,1]",
        "canonical_solution": "def Split(list): \r\n    od_li = [] \r\n    for i in list: \r\n        if (i % 2 != 0): \r\n            od_li.append(i)  \r\n    return od_li"
    },
    {
        "number": 555,
        "prompt": "Write a python function to find the difference between sum of cubes of first n natural numbers and the sum of first n natural numbers.\ndef difference(n) :  \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    sum_of_cubes = sum(i ** 3 for i in range(1, n+1))\n    sum_of_numbers = sum(i for i in range(1, n+1))\n    return sum_of_cubes - sum_of_numbers\n\nn = int(input(\"Enter a number: \"))\nprint(\"The difference between the sum of cubes of first\", n, \"natural numbers and the sum of first\", n, \"natural numbers is\", difference(n))\n",
        "generated_testcode": "assert difference(5) == 125 - 5*5 = 120\n",
        "test": "assert difference(3) == 30\nassert difference(5) == 210\nassert difference(2) == 6",
        "canonical_solution": "def difference(n) :  \r\n    S = (n*(n + 1))//2;  \r\n    res = S*(S-1);  \r\n    return res;  "
    },
    {
        "number": 556,
        "prompt": "Write a python function to count the pairs with xor as an odd number.\ndef find_Odd_Pair(A,N) : \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    A.sort()\n    count = 0\n    for i in range(N) : \n        for j in range(i+1, N) : \n            if A[i]^A[j] == 1 : \n                count += 1\n    return count\n\ndef main() : \n    A = list(map(int, input().split()))\n    N = len(A)\n    result = find_Odd_Pair(A,N)\n    print(result)\n\nif __name__ == \"__main__\" : \n    main()\n\n# Example Input\n# 5 1 2 3 6 5 4 3 4 \n# Example Output\n# 2\n",
        "generated_testcode": "assert find_Odd_Pair([1,2,3,4,5,6,7,8,9], 3) == 4\n",
        "test": "assert find_Odd_Pair([5,4,7,2,1],5) == 6\nassert find_Odd_Pair([7,2,8,1,0,5,11],7) == 12\nassert find_Odd_Pair([1,2,3],3) == 2",
        "canonical_solution": "def find_Odd_Pair(A,N) : \r\n    oddPair = 0\r\n    for i in range(0,N) :  \r\n        for j in range(i+1,N) :  \r\n            if ((A[i] ^ A[j]) % 2 != 0):  \r\n                oddPair+=1  \r\n    return oddPair  "
    },
    {
        "number": 557,
        "prompt": "Write a function to toggle characters case in a string.\ndef toggle_string(string):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    new_string = \"\"\n    for char in string:\n        if char.isupper():\n            new_string += char.lower()\n        else:\n            new_string += char.upper()\n    return new_string\n\n\n# Test the function\nprint(toggle_string(\"Hello World\")) # Output: hELLO wORLD\nprint(toggle_string(\"Python\")) # Output: pYTHON\nprint(toggle_string(\"This is a Test\")) # Output: tHIS IS A tEST",
        "generated_testcode": "assert toggle_string(None) == None\n",
        "test": "assert toggle_string(\"Python\")==(\"pYTHON\")\nassert toggle_string(\"Pangram\")==(\"pANGRAM\")\nassert toggle_string(\"LIttLE\")==(\"liTTle\")",
        "canonical_solution": "def toggle_string(string):\r\n string1 = string.swapcase()\r\n return string1"
    },
    {
        "number": 558,
        "prompt": "Write a python function to find the digit distance between two integers.\ndef digit_distance_nums(n1, n2):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    def digits(num):\n        return [int(d) for d in str(num)]\n\n    set_n1 = set(digits(n1))\n    set_n2 = set(digits(n2))\n\n    return len(set_n2.difference(set_n1))\n\n\n# Test the function\nprint(digit_distance_nums(1234, 2468)) # Output: 4\nprint(digit_distance_nums(1234, 2456)) # Output: 3\nprint(digit_distance_nums(12345, 2456)) # Output: 1\nprint(digit_distance_nums(1234, 24689)) # Output: 5\nprint(digit_distance_nums(123, 2468)) # Output: 5\n\n",
        "generated_testcode": "assert digit_distance_nums(1234, 456) == 3\n",
        "test": "assert digit_distance_nums(1,2) == 1\nassert digit_distance_nums(23,56) == 6\nassert digit_distance_nums(123,256) == 7",
        "canonical_solution": "def digit_distance_nums(n1, n2):\r\n         return sum(map(int,str(abs(n1-n2))))"
    },
    {
        "number": 559,
        "prompt": "Write a function to find the largest sum of contiguous subarray in the given array.\ndef max_sub_array_sum(a, size):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    if not a:\n        return 0\n    max_so_far = a[0]\n    max_ending_here = a[0]\n    for i in range(1, size):\n        max_ending_here = max(a[i], max_ending_here + a[i])\n        max_so_far = max(max_so_far, max_ending_here)\n    return max_so_far\n\n\n\n# Test cases\nprint(max_sub_array_sum([-2, 1, -3, 4, -1, -2, 1, 5, 0], 6))  # Output: 7 (Explanation: Subarray [4, -1, -2, 1, 5, 0] has the largest sum = 7)\nprint(max_sub_array_sum([-2, 1, -3, 4, -1, -2, 1, 5, 0, 2, 3, -5, 4], 9)  # Output: 9 (Explanation: Subarray [2, 3, -5, 4] has the largest sum = 9)\nprint(max_sub_array_sum([-2, 1, -3, 4, -1, -2, 1, 5, 0, -1, -2, 3, 4], 9)  # Output: 5 (Explanation: Subarray [5, -1, 4] has the largest",
        "generated_testcode": "assert max_sub_array_sum([1, -2, 3, 10, -5, 6, -2, 7, 8, -1], 6) == 18\n",
        "test": "assert max_sub_array_sum([-2, -3, 4, -1, -2, 1, 5, -3], 8) == 7\nassert max_sub_array_sum([-3, -4, 5, -2, -3, 2, 6, -4], 8) == 8\nassert max_sub_array_sum([-4, -5, 6, -3, -4, 3, 7, -5], 8) == 10",
        "canonical_solution": "def max_sub_array_sum(a, size):\r\n  max_so_far = 0\r\n  max_ending_here = 0\r\n  for i in range(0, size):\r\n    max_ending_here = max_ending_here + a[i]\r\n    if max_ending_here < 0:\r\n      max_ending_here = 0\r\n    elif (max_so_far < max_ending_here):\r\n      max_so_far = max_ending_here\r\n  return max_so_far"
    },
    {
        "number": 560,
        "prompt": "Write a function to find the union of elements of the given tuples.\ndef union_elements(test_tup1, test_tup2):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    union = set()\n    for i in test_tup1 + test_tup2:\n        union.add(i)\n    return union\n\n# Test cases\nprint(union_elements((1,2,3,4,5,6), (4,5,6,7,8,9)) == {1, 2, 3, 4, 5, 6, 7, 8, 9})\nprint(union_elements((1,2,3,4,5), (6,7,8,9)) == {1, 2, 3, 4, 5, 6, 7, 8, 9})\nprint(union_elements((1,2,3,4,5), (4,5,6,7,8,9)) == {1, 2, 3, 4, 5, 6, 7, 8, 9})\nprint(union_elements((), (4,5,6,7,8,9)) == {4, 5, 6, 7, 8, 9})\nprint(union_elements((1,2,3,4,5), ()) == {1, 2, 3, 4, 5})\nprint(union_elements((), ()) == set()\n\n\n# Result:\n# True\n# True\n# True\n# True\n# True\n# True\n# True ",
        "generated_testcode": "assert union_elements((), ()) == ()\n",
        "test": "assert union_elements((3, 4, 5, 6),(5, 7, 4, 10) ) == (3, 4, 5, 6, 7, 10)\nassert union_elements((1, 2, 3, 4),(3, 4, 5, 6) ) == (1, 2, 3, 4, 5, 6)\nassert union_elements((11, 12, 13, 14),(13, 15, 16, 17) ) == (11, 12, 13, 14, 15, 16, 17)",
        "canonical_solution": "def union_elements(test_tup1, test_tup2):\r\n  res = tuple(set(test_tup1 + test_tup2))\r\n  return (res) "
    },
    {
        "number": 561,
        "prompt": "Write a function to assign with each element, its pair elements from other similar pairs in the given tuple.\ndef assign_elements(test_list):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    result = []\n    for i in range(len(test_list)):\n        for j in range(len(test_list)):\n            if i != j:\n                if test_list[i][1] == test_list[j][0]:\n                    result.append((test_list[i][0], test_list[j][1]))\n                elif test_list[i][0] == test_list[j][1]:\n                    result.append((test_list[i][1], test_list[j][0]))\n    return result\n\n\n# Test case\ntest_tuple = ((1, 2), (3, 4), (5, 6), (7, 8), (9, 10), (11, 12))\nprint(assign_elements(test_tuple)) # should return [(2, 1), (4, 3), (6, 5), (8, 7), (10, 9), (12, 11)]\n\ntest_tuple2 = ((1, 2), (3, 4), (5, 6), (7, 8), (10, 9), (11, 12))\nprint(assign_elements(test_tuple2)) # should return [(2, 1), (4, 3), (6, 5), (12, 11), (10, 9)]\n\ntest_tuple3 = ((1, 2), (3, 4), (5, 6), (",
        "generated_testcode": "assert assign_elements(('a', 'b', 'c', 'd', 'e', 'f', 'g') == {'a': ['b', 'c', 'e', 'f'], 'b': ['a', 'c', 'd'], 'c': ['a', 'b', 'd', 'e'], 'd': ['b', 'c', 'e', 'f'], 'e': ['a', 'c', 'd', 'f'], 'f': ['a', 'd', 'g']}\n\n# Test case 2\n",
        "test": "assert assign_elements([(5, 3), (7, 5), (2, 7), (3, 8), (8, 4)] ) == {3: [8], 5: [3], 7: [5], 2: [7], 8: [4], 4: []}\nassert assign_elements([(6, 4), (9, 4), (3, 8), (4, 9), (9, 5)] ) == {4: [9], 6: [4], 9: [4, 5], 8: [], 3: [8], 5: []}\nassert assign_elements([(6, 2), (6, 8), (4, 9), (4, 9), (3, 7)] ) == {2: [], 6: [2, 8], 8: [], 9: [], 4: [9, 9], 7: [], 3: [7]}",
        "canonical_solution": "def assign_elements(test_list):\r\n  res = dict()\r\n  for key, val in test_list:\r\n    res.setdefault(val, [])\r\n    res.setdefault(key, []).append(val)\r\n  return (res) "
    },
    {
        "number": 562,
        "prompt": "Write a python function to find the maximum length of sublist.\ndef Find_Max_Length(lst):  \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    n = len(lst)  \n    if n == 0:  \n        return 0  \n    elif n == 1:  \n        return 1  \n    max_len = 1  \n    max_end = 1  \n    start = 0  \n    max_start = 0  \n    for i in range(1, n):  \n        if lst[i] > lst[max_end]:  \n            if i - max_end > max_len:  \n                max_len = i - max_end  \n                max_start = max_end  \n            max_end = i  \n        elif lst[i] < lst[max_end]:  \n            max_end += 1  \n            if i - max_end > max_len:  \n                max_len = i - max_end  \n                max_start = max_end  \n    return max_len  \n  \n  \nlst = [1, 2, 3, 4, 3, 2, 5, 6, 3, 6, 8, 9, 7, 6, 10, 9, 8]  \nprint(\"The maximum length of sublist is: \", Find_Max_Length(lst)) ",
        "generated_testcode": "assert Find_Max_Length([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20] ) == 10\n",
        "test": "assert Find_Max_Length([[1],[1,4],[5,6,7,8]]) == 4\nassert Find_Max_Length([[0,1],[2,2,],[3,2,1]]) == 3\nassert Find_Max_Length([[7],[22,23],[13,14,15],[10,20,30,40,50]]) == 5",
        "canonical_solution": "def Find_Max_Length(lst):  \r\n    maxLength = max(len(x) for x in lst )\r\n    return maxLength "
    },
    {
        "number": 563,
        "prompt": "Write a function to extract values between quotation marks of a string.\ndef extract_values(text):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    values = []\n    in_quotes = False\n    current_value = \"\"\n    for char in text:\n        if char == \"\\\"\":\n            if in_quotes:\n                values.append(current_value)\n                current_value = \"\"\n            in_quotes = not in_quotes\n        elif in_quotes:\n            current_value += char\n    return values\n\n\n# Test cases\nprint(extract_values(\"name=\\\"John\\\" age=30 email=\\\"john@example.com\\\" city=\\\"New York\\\"\"))\n# Output: [\"John\", \"john@example.com\", \"New York\"]\n\nprint(extract_values(\"name=Alice age=25 sex=\\\"Female\\\"\"))\n# Output: []\nprint(extract_values(\"name=Bob city=\\\"Los Angeles\\\" occupation=\\\"Software Engineer\\\"\"))\n# Output: [\"Los Angeles\", \"Software Engineer\"]\n",
        "generated_testcode": "assert extract_values(r'\"hello\" \"world\" \"python\" \"code\"') == ['hello', 'world', 'python']\n",
        "test": "assert extract_values('\"Python\", \"PHP\", \"Java\"')==['Python', 'PHP', 'Java']\nassert extract_values('\"python\",\"program\",\"language\"')==['python','program','language']\nassert extract_values('\"red\",\"blue\",\"green\",\"yellow\"')==['red','blue','green','yellow']",
        "canonical_solution": "import re\r\ndef extract_values(text):\r\n return (re.findall(r'\"(.*?)\"', text))"
    },
    {
        "number": 564,
        "prompt": "Write a python function to count unequal element pairs from the given array.\ndef count_Pairs(arr,n): \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    count = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            if arr[i]!=arr[j]:\n                count+=1\n    return count\n\n#Example: \narr = [1, 2, 2, 3, 4, 4, 3, 1]\nn = len(arr)\nprint(count_Pairs(arr,n)) ",
        "generated_testcode": "assert count_Pairs([1,2,3,4,5,6,7,8,9], 6) == 21\n",
        "test": "assert count_Pairs([1,2,1],3) == 2\nassert count_Pairs([1,1,1,1],4) == 0\nassert count_Pairs([1,2,3,4,5],5) == 10",
        "canonical_solution": "def count_Pairs(arr,n): \r\n    cnt = 0; \r\n    for i in range(n): \r\n        for j in range(i + 1,n): \r\n            if (arr[i] != arr[j]): \r\n                cnt += 1; \r\n    return cnt; "
    },
    {
        "number": 565,
        "prompt": "Write a python function to split a string into characters.\ndef split(word): \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    \"\"\"\n    This function takes a string as input and returns a list of its characters.\n    \"\"\"\n    return [char for char in word] ",
        "generated_testcode": "assert split(None) == []\n",
        "test": "assert split('python') == ['p','y','t','h','o','n']\nassert split('Name') == ['N','a','m','e']\nassert split('program') == ['p','r','o','g','r','a','m']",
        "canonical_solution": "def split(word): \r\n    return [char for char in word] "
    },
    {
        "number": 566,
        "prompt": "Write a function to get the sum of a non-negative integer.\ndef sum_digits(n):\n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    \"\"\"\n    :param n: a non-negative integer\n    :return: the sum of the digits in the integer n\n    \"\"\"\n    # Your code here\n    if n == 0:\n        return 0\n    else:\n        return n % 10 + sum_digits(n // 10)\n\n\n# Example usage:\nprint(sum_digits(12345))  # Output: 10\nprint(sum_digits(0))  # Output: 0\nprint(sum_digits(987654))  # Output: 21\nprint(sum_digits(12340000))  # Output: 12\n",
        "generated_testcode": "assert sum_digits(123) == 6\n",
        "test": "assert sum_digits(345)==12\nassert sum_digits(12)==3\nassert sum_digits(97)==16",
        "canonical_solution": "def sum_digits(n):\r\n  if n == 0:\r\n    return 0\r\n  else:\r\n    return n % 10 + sum_digits(int(n / 10))"
    },
    {
        "number": 567,
        "prompt": "Write a function to check whether a specified list is sorted or not.\ndef issort_list(list1):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    for i in range(len(list1)-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True\n\n#Test the function with different lists\nprint(issort_list([1,2,3,4,5,6,7,8,9])) #True\nprint(issort_list([1,3,2,4,5,6,7,8,9])) #False\nprint(issort_list([1,3,5,2,4,6,7,8,9])) #False\nprint(issort_list([1,2,3,4,5,6,8,9])) #False\nprint(issort_list([1,2,3,4,5,6,7,8])) #True\nprint(issort_list([1,2,2,3,3,4,4,5])) #False\nprint(issort_list([1,2,3,3,4,4,5])) #False\nprint(issort_list([1,2,3,4,5,5,5]) #False\n\n\n# This function checks whether the list is sorted or not by iterating through the list and comparing adjacent elements to see if they are in order. If the list is not sorted, it will return False. If the list is sorted, it will return True. ",
        "generated_testcode": "assert issort_list(sorted([1,2,3,4,5,6,7,8,9]) == True\n",
        "test": "assert issort_list([1,2,4,6,8,10,12,14,16,17])==True\nassert issort_list([1, 2, 4, 6, 8, 10, 12, 14, 20, 17])==False\nassert issort_list([1, 2, 4, 6, 8, 10,15,14,20])==False",
        "canonical_solution": "def issort_list(list1):\r\n    result = all(list1[i] <= list1[i+1] for i in range(len(list1)-1))\r\n    return result"
    },
    {
        "number": 568,
        "prompt": "Write a function to create a list of empty dictionaries.\ndef empty_list(length):\n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    \"\"\"\n    Returns a list of empty dictionaries of length `length`.\n    \"\"\"\n    return [{} for _ in range(length)]\n\n\n# Example usage:\nprint(empty_list(5))  # Output: [{}, {}, {}, {}, {}, {}, {}]\n\n# Note that all the dictionaries in the list are empty, but they are distinct objects in memory.\n\n# You can modify them independently from each other.\nd1 = empty_list(5)[0]\nd1[\"key\"] = \"value\"\nd2 = empty_list(5)[1]\nd2[\"key\"] = \"another_value\"\nprint(d1)  # Output: {}\nprint(d2)  # Output: {\"key\": \"another_value\"}\n\n# You can also modify the list itself.\nl = empty_list(5)\nl[0][\"key\"] = \"value\"\nl[1][\"key\"] = \"another_value\"\nprint(l)  # Output: [{\"key\": \"value\"}, {\"key\": \"another_value\"}, {}, {}, {}, {}]",
        "generated_testcode": "assert empty_list(5) == [{} for i in range(5)]\n",
        "test": "assert empty_list(5)==[{},{},{},{},{}]\nassert empty_list(6)==[{},{},{},{},{},{}]\nassert empty_list(7)==[{},{},{},{},{},{},{}]",
        "canonical_solution": "def empty_list(length):\r\n empty_list = [{} for _ in range(length)]\r\n return empty_list"
    },
    {
        "number": 569,
        "prompt": "Write a function to sort each sublist of strings in a given list of lists.\ndef sort_sublists(list1):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    result = []\n    for sublist in list1:\n        sublist.sort()\n        result.append(sublist)\n    return result\n\n\n#test the function\nmy_list = [['cat', 'dog', 'fish', 'apple', 'banana', 'orange'], ['apple', 'banana', 'orange', 'pear'], ['peach', 'kiwi', 'strawberry', 'kiwi']]\nprint(sort_sublists(my_list)) # [['apple', 'banana', 'cat', 'dog', 'fish'], ['apple', 'banana', 'orange', 'peach'], ['kiwi', 'kiwi', 'peach', 'strawberry']]\n\n#test the function with an empty list\nmy_list2 = []\nprint(sort_sublists(my_list2)) # []\n\n#test the function with a single list\nmy_list3 = ['peach', 'banana', 'kiwi', 'apple']\nprint(sort_sublists(my_list3)) # ['apple', 'banana', 'peach', 'kiwi']\n\n#test the function with a list of integers\nmy_list4 = [['cat', 'dog', 'fish', 'apple', 'banana', 'orange', 1, 2, 3, 'peach']\nprint(sort_sublists(my_list4)) # TypeError: 'int' object is not iterable\n\n#test the function with a list of lists of different lengths\nmy_list5 = [",
        "generated_testcode": "assert sort_sublists([\"hello\", \"world\", \"apple\", \"banana\", \"orange\", \"grape\", \"kiwi\", \"pear\", \"grapefruit\", \"peach\", \"pear\", \"apple\", \"kiwi\", \"peach\", \"orange\"] == [\"apple\", \"apple\", \"banana\", \"grape\", \"grapefruit\", \"kiwi\", \"orange\", \"orange\", \"peach\", \"peach\", \"pear\", \"pear\", \"pear\", \"peach\"]\n\n# Test case 2\n",
        "test": "assert sort_sublists([['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange']])==[['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\nassert sort_sublists([['green', 'orange'], ['black'], ['green', 'orange'], ['white']])==[['green', 'orange'], ['black'], ['green', 'orange'], ['white']]\nassert sort_sublists([['a','b'],['d','c'],['g','h'] , ['f','e']])==[['a', 'b'], ['c', 'd'], ['g', 'h'], ['e', 'f']]",
        "canonical_solution": "def sort_sublists(list1):\r\n    result = list(map(sorted,list1)) \r\n    return result"
    },
    {
        "number": 570,
        "prompt": "Write a function to remove words from a given list of strings containing a character or string.\ndef remove_words(list1, charlist):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    new_list = []\n    for word in list1:\n        for char in charlist:\n            if char in word:\n                list1.remove(word)\n    return list1\n\n#Test the function\nlist1 = ['apple', 'banana', 'orange', 'pear', 'banana', 'kiwi', 'banana', 'peach', 'apple', 'grape']\ncharlist = ['a', 'b']\nprint(remove_words(list1, charlist))\n\n#Output: ['peach']",
        "generated_testcode": "assert remove_words([\"apple\", \"banana\", \"cherry\", \"date\", \"fig\", \"grape\", \"kiwi\"], [\"a\", \"e\"]) == [\"ppl\", \"nana\", \"rry\", \"t\", \"grp\", \"w\"]\n",
        "test": "assert remove_words(['Red color', 'Orange#', 'Green', 'Orange @', \"White\"],['#', 'color', '@'])==['Red', '', 'Green', 'Orange', 'White']\nassert remove_words(['Red &', 'Orange+', 'Green', 'Orange @', 'White'],['&', '+', '@'])==['Red', '', 'Green', 'Orange', 'White']\nassert remove_words(['Red &', 'Orange+', 'Green', 'Orange @', 'White'],['@'])==['Red &', 'Orange+', 'Green', 'Orange', 'White']",
        "canonical_solution": "def remove_words(list1, charlist):\r\n    new_list = []\r\n    for line in list1:\r\n        new_words = ' '.join([word for word in line.split() if not any([phrase in word for phrase in charlist])])\r\n        new_list.append(new_words)\r\n    return new_list"
    },
    {
        "number": 571,
        "prompt": "Write a function to find maximum possible sum of disjoint pairs for the given array of integers and a number k.\ndef max_sum_pair_diff_lessthan_K(arr, N, K): \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    arr.sort() \n    n = len(arr) \n    max_sum = 0\n    for i in range(n): \n        for j in range(i+1, n): \n            if arr[j] - arr[i] <= K: \n                max_sum = max(max_sum, arr[j] - arr[i]) \n    return max_sum \n\n\n# Example usage:\narr = [1, 2, 3, 5, 6, 7, 9]\nK = 4\nprint(max_sum_pair_diff_lessthan_K(arr, K)) ",
        "generated_testcode": "assert max_sum_pair_diff_lessthan_K([1, 2, 3, 4, 5, 6, 7, 8, 9], 3) == 24\n",
        "test": "assert max_sum_pair_diff_lessthan_K([3, 5, 10, 15, 17, 12, 9], 7, 4) == 62\nassert max_sum_pair_diff_lessthan_K([5, 15, 10, 300], 4, 12) == 25\nassert max_sum_pair_diff_lessthan_K([1, 2, 3, 4, 5, 6], 6, 6) == 21",
        "canonical_solution": "def max_sum_pair_diff_lessthan_K(arr, N, K): \r\n\tarr.sort() \r\n\tdp = [0] * N \r\n\tdp[0] = 0\r\n\tfor i in range(1, N): \r\n\t\tdp[i] = dp[i-1] \r\n\t\tif (arr[i] - arr[i-1] < K): \r\n\t\t\tif (i >= 2): \r\n\t\t\t\tdp[i] = max(dp[i], dp[i-2] + arr[i] + arr[i-1]); \r\n\t\t\telse: \r\n\t\t\t\tdp[i] = max(dp[i], arr[i] + arr[i-1]); \r\n\treturn dp[N - 1]"
    },
    {
        "number": 572,
        "prompt": "Write a python function to remove two duplicate numbers from a given number of lists.\ndef two_unique_nums(nums):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    unique_nums = []\n    for num in nums:\n        if num not in unique_nums:\n            unique_nums.append(num)\n    return unique_nums\n\n\n# Test the function\nnums = [1, 2, 3, 4, 3, 5, 4, 6, 7, 1, 2, 8, 9, 8, 5, 5]\nprint(two_unique_nums(nums))\n# Output: [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\n\n# Write a python function to remove all duplicates from a list\ndef remove_duplicates(lst):\n    return list(set(lst)\n\n\n# Test the function\nlst = [1, 2, 3, 4, 4, 5, 5, 6, 7, 8, 9]\nprint(remove_duplicates(lst))\n# Output: [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\n\n# Write a python function to print the maximum element from a given list\ndef max_element(lst):\n    return max(lst)\n\n# Test the function\nlst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nprint(max_element(lst))\n# Output: ",
        "generated_testcode": "assert two_unique_nums([1,2,3,4,5,6,7,8,9,1,2] ) == [3,4,5,6,7,8,9]\n",
        "test": "assert two_unique_nums([1,2,3,2,3,4,5]) == [1, 4, 5]\nassert two_unique_nums([1,2,3,2,4,5]) == [1, 3, 4, 5]\nassert two_unique_nums([1,2,3,4,5]) == [1, 2, 3, 4, 5]",
        "canonical_solution": "def two_unique_nums(nums):\r\n  return [i for i in nums if nums.count(i)==1]"
    },
    {
        "number": 573,
        "prompt": "Write a python function to calculate the product of the unique numbers of a given list.\ndef unique_product(list_data):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    \"\"\"\n    Calculate the product of the unique numbers in a list\n\n    Parameters:\n    list_data (list): A list of integers\n\n    Returns:\n    int: The product of the unique numbers in the list\n    \"\"\"\n    # convert the list to a set to get unique elements\n    unique_set = set(list_data)\n    # convert the set back to a list\n    unique_list = list(unique_set)\n    # initialize a variable to store the product\n    product = 1\n    # iterate through the list and calculate the product\n    for num in unique_list:\n        product *= num\n    return product\n\n# Test the function with some sample inputs\nprint(unique_product([1, 2, 3, 4, 2, 1]))  # Output: 24\nprint(unique_product([1, 2, 3, 4, 5]))  # Output: 6\nprint(unique_product([0, 1, 2, 3, 4]))  # Output: 0",
        "generated_testcode": "assert unique_product([1, 2, 3, 4, 5, 6, 7, 8, 9] ) == 945\n",
        "test": "assert unique_product([10, 20, 30, 40, 20, 50, 60, 40]) ==  720000000\nassert unique_product([1, 2, 3, 1,]) == 6\nassert unique_product([7, 8, 9, 0, 1, 1]) == 0",
        "canonical_solution": "def unique_product(list_data):\r\n    temp = list(set(list_data))\r\n    p = 1\r\n    for i in temp:\r\n        p *= i\r\n    return p"
    },
    {
        "number": 574,
        "prompt": "Write a function to find the surface area of a cylinder.\ndef surfacearea_cylinder(r,h):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    pi = 3.14159\n    surfacearea = 2*pi*r*r + 2*pi*r*h\n    return surfacearea\n\n# Test the function with sample inputs\nprint(surfacearea_cylinder(5, 10)) # Output: 314.159265357989999999997\nprint(surfacearea_cylinder(10, 5)) # Output: 62.831853071795898724\n\n\n# Write a function to find the volume of a cylinder\ndef volume_cylinder(r,h):\n    pi = 3.14159\n    volume = pi*r*r*h\n    return volume\n\n# Test the function with sample inputs\nprint(volume_cylinder(5, 10)) # Output: 157.07963794425995639\nprint(volume_cylinder(10, 5)) # Output: 314.15926535798999999994\n\n\n# Write a function to find the lateral surface area of a sphere\ndef surfacearea_sphere(r):\n    pi = 3.14159\n    surfacearea = 4*pi*r*r\n    return surfacearea\n\n# Test the function with sample inputs\nprint(",
        "generated_testcode": "assert surfacearea_cylinder(5,10) == 314.159894590513838162\nprint(\"Test case 1 passed\")\n\n# Write a function to find the volume of a cylinder\ndef volume_cylinder(r,h):\n    pass\n\n",
        "test": "assert surfacearea_cylinder(10,5)==942.45\nassert surfacearea_cylinder(4,5)==226.18800000000002\nassert surfacearea_cylinder(4,10)==351.848",
        "canonical_solution": "def surfacearea_cylinder(r,h):\r\n  surfacearea=((2*3.1415*r*r) +(2*3.1415*r*h))\r\n  return surfacearea"
    },
    {
        "number": 575,
        "prompt": "Write a python function to find nth number in a sequence which is not a multiple of a given number.\ndef count_no (A,N,L,R): \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    # Find the count of numbers in the sequence from L to R which are not a multiple of A \n    count = 0 \n    for i in range(L,R+1): \n        if i % A != 0: \n            count += 1\n    return count \n\ndef nth_num(A, N, L, R): \n    # Find the nth number in the sequence which is not a multiple of A \n    n = count_no(A, L, R) \n    if N > n: \n        return -1\n    for i in range(L,R+1): \n        if i % A != 0: \n            if N == 1: \n                return i \n            else: \n                N -= 1\n    return -1\n\n# Test the function with sample inputs \nprint(nth_num(3, 2, 10, 20)) # Output: 6 (as 6 is the second number in the sequence from 1 to 20 which is not a multiple of 3) ",
        "generated_testcode": "assert count_no (2, 1, 10) == 1\n",
        "test": "assert count_no(2,3,1,10) == 5\nassert count_no(3,6,4,20) == 11\nassert count_no(5,10,4,20) == 16",
        "canonical_solution": "def count_no (A,N,L,R): \r\n    count = 0\r\n    for i in range (L,R + 1): \r\n        if (i % A != 0): \r\n            count += 1\r\n        if (count == N): \r\n            break\r\n    return (i) "
    },
    {
        "number": 576,
        "prompt": "Write a python function to check whether an array is subarray of another or not.\ndef is_Sub_Array(A,B,n,m): \n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    i = 0\n    j = 0\n    while i < n: \n        if A[i:i+m] == B[:m]: \n            return True\n        i += 1\n    return False ",
        "generated_testcode": "assert is_Sub_Array(A=[1,2,3,4,5,6,7,8,9], B=[4,5,6], n=6, m=3) == True\n",
        "test": "assert is_Sub_Array([1,4,3,5],[1,2],4,2) == False\nassert is_Sub_Array([1,2,1],[1,2,1],3,3) == True\nassert is_Sub_Array([1,0,2,2],[2,2,0],4,3) ==False",
        "canonical_solution": "def is_Sub_Array(A,B,n,m): \r\n    i = 0; j = 0; \r\n    while (i < n and j < m):  \r\n        if (A[i] == B[j]): \r\n            i += 1; \r\n            j += 1; \r\n            if (j == m): \r\n                return True;  \r\n        else: \r\n            i = i - j + 1; \r\n            j = 0;       \r\n    return False; "
    },
    {
        "number": 577,
        "prompt": "Write a python function to find the last digit in factorial of a given number.\ndef last_Digit_Factorial(n): \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    if n==0:\n        return 1\n    else:\n        fact = 1\n        for i in range(1,n+1):\n            fact *= i\n        return fact%10\n    \n#test the function\nprint(last_Digit_Factorial(5))\nprint(last_Digit_Factorial(10))\nprint(last_Digit_Factorial(20))\nprint(last_Digit_Factorial(50))\nprint(last_Digit_Factorial(100))\nprint(last_Digit_Factorial(1000))\nprint(last_Digit_Factorial(10000))\nprint(last_Digit_Factorial(100000))\nprint(last_Digit_Factorial(1000000))\nprint(last_Digit_Factorial(10000000))\nprint(last_Digit_Factorial(100000000))",
        "generated_testcode": "assert last_Digit_Factorial(5) == 1\n",
        "test": "assert last_Digit_Factorial(4) == 4\nassert last_Digit_Factorial(21) == 0\nassert last_Digit_Factorial(30) == 0",
        "canonical_solution": "def last_Digit_Factorial(n): \r\n    if (n == 0): return 1\r\n    elif (n <= 2): return n  \r\n    elif (n == 3): return 6\r\n    elif (n == 4): return 4 \r\n    else: \r\n      return 0"
    },
    {
        "number": 578,
        "prompt": "Write a function to interleave lists of the same length.\ndef interleave_lists(list1,list2,list3):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    result = []\n    for i in range(len(list1)):\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n    return result\n\nprint(interleave_lists([1,2,3,4,5], [6,7,8,9], [10,11,12]))\n# Output: [1, 6, 10, 2, 7, 3, 11, 8, 4, 9, 5, 12]\n\n\n# Test cases\nprint(interleave_lists([1,2,3], [4,5,6], [7,8,9]))\nprint(interleave_lists([1,2], [3,4], [5,6,7]))\nprint(interleave_lists([1,2,3], [4], [5,6,7]))\nprint(interleave_lists([1], [2,3,4], [5,6]))\nprint(interleave_lists([1], [2], [3,4,5]))\nprint(interleave_lists([1,2], [3], [4,5]))\nprint(interleave_lists([1], [2], [3]))\n",
        "generated_testcode": "assert interleave_lists([\"a\",\"b\",\"c\"],[1,2,3],[True,False,True]) == [\"a\",1,True,\"b\",2,False,\"c\",3]\n",
        "test": "assert interleave_lists([1,2,3,4,5,6,7],[10,20,30,40,50,60,70],[100,200,300,400,500,600,700])==[1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700]\nassert interleave_lists([10,20],[15,2],[5,10])==[10,15,5,20,2,10]\nassert interleave_lists([11,44], [10,15], [20,5])==[11,10,20,44,15,5]",
        "canonical_solution": "def interleave_lists(list1,list2,list3):\r\n    result = [el for pair in zip(list1, list2, list3) for el in pair]\r\n    return result"
    },
    {
        "number": 579,
        "prompt": "Write a function to find the dissimilar elements in the given two tuples.\ndef find_dissimilar(test_tup1, test_tup2):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    dissimilar_list = []\n    for item in test_tup1:\n        if item not in test_tup2:\n            dissimilar_list.append(item)\n    for item in test_tup2:\n        if item not in test_tup1:\n            dissimilar_list.append(item)\n    return dissimilar_list\n\n# Test cases\nprint(find_dissimilar((1, 2, 3, 4, 5, 6), (2, 4, 5, 6, 8, 9, 10)) # Output: [1, 3, 8, 10]\nprint(find_dissimilar((1, 2, 3, 4, 5), (4, 5, 6, 7, 8, 9)) # Output: [1, 2, 3, 6, 7, 8, 9]\nprint(find_dissimilar((1, 2, 3, 4, 5, 6), (1, 2, 3, 4, 5)) # Output: []\nprint(find_dissimilar((), (1, 2, 3, 4, 5, 6)) # Output: [1, 2, 3, 4, 5, 6]\nprint(find_dissimilar((1, 2, 3, 4, 5), ()) # Output: [1, 2, ",
        "generated_testcode": "assert find_dissimilar((\"apple\", \"banana\", \"cherry\", \"orange\", \"grape\") == (\"apple\", \"cherry\")\n",
        "test": "assert find_dissimilar((3, 4, 5, 6), (5, 7, 4, 10)) == (3, 6, 7, 10)\nassert find_dissimilar((1, 2, 3, 4), (7, 2, 3, 9)) == (1, 4, 7, 9)\nassert find_dissimilar((21, 11, 25, 26), (26, 34, 21, 36)) == (34, 36, 11, 25)",
        "canonical_solution": "def find_dissimilar(test_tup1, test_tup2):\r\n  res = tuple(set(test_tup1) ^ set(test_tup2))\r\n  return (res) "
    },
    {
        "number": 580,
        "prompt": "Write a function to extract the even elements in the nested mixed tuple.\ndef even_ele(test_tuple, even_fnc): \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    # your code goes here\n    result = []\n    for i in test_tuple:\n        if type(i) == tuple:\n            for j in i:\n                if type(j) == tuple:\n                    for k in j:\n                        if type(k) == tuple:\n                            for l in k:\n                                if even_fnc(l):\n                                    result.append(l)\n                        else:\n                            if even_fnc(j):\n                                result.append(j)\n                else:\n                    if even_fnc(i):\n                        result.append(i)\n    return result\n\n\n# Test cases\nprint(even_ele(((1, (2, (3, (4, 5, 6), 7), 8), 9, (10, (11, 12)), 13), lambda x: x%2 == 0)) # Output: [2, 4, 6, 8, 10, 12, 13]\nprint(even_ele((1, (2, (3, (4, 5, 6), 7), 8), 9, (10, (11, 12, (14, 15, 16)), 13), 14), lambda x: x%2 == 0)) # Output: [2, 4, 6, 8, 10, 12, 14, 16, 14",
        "generated_testcode": "assert even_ele((), lambda x: x % 2 == 0) == ()\n",
        "test": "assert extract_even((4, 5, (7, 6, (2, 4)), 6, 8)) == (4, (6, (2, 4)), 6, 8)\nassert extract_even((5, 6, (8, 7, (4, 8)), 7, 9)) == (6, (8, (4, 8)))\nassert extract_even((5, 6, (9, 8, (4, 6)), 8, 10)) == (6, (8, (4, 6)), 8, 10)",
        "canonical_solution": "def even_ele(test_tuple, even_fnc): \r\n\tres = tuple() \r\n\tfor ele in test_tuple: \r\n\t\tif isinstance(ele, tuple): \r\n\t\t\tres += (even_ele(ele, even_fnc), ) \r\n\t\telif even_fnc(ele): \r\n\t\t\tres += (ele, ) \r\n\treturn res \r\ndef extract_even(test_tuple):\r\n  res = even_ele(test_tuple, lambda x: x % 2 == 0)\r\n  return (res) "
    },
    {
        "number": 581,
        "prompt": "Write a python function to find the surface area of the square pyramid.\ndef surface_Area(b,s): \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    return (b*b*b/2) + (b*s)\n\nb = float(input(\"Enter the length of base: \"))\ns = float(input(\"Enter the slant height: \"))\n\nsurface_area = surface_Area(b,s)\nprint(\"The surface area of the square pyramid is: \", surface_area)\n",
        "generated_testcode": "assert surface_Area(4, 2) == 32\n",
        "test": "assert surface_Area(3,4) == 33\nassert surface_Area(4,5) == 56\nassert surface_Area(1,2) == 5",
        "canonical_solution": "def surface_Area(b,s): \r\n    return 2 * b * s + pow(b,2) "
    },
    {
        "number": 582,
        "prompt": "Write a function to check if a dictionary is empty or not.\ndef my_dict(dict1):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": true,
        "answer": "    if len(dict1) == 0:\n        return True\n    else:\n        return False\n\n# Test the function\nprint(my_dict({})) # Output: True\nprint(my_dict({'a': 1, 'b': 2, 'c': 3})) # Output: False\n\n\n# Example solution:\ndef check_dict(d):\n    return not bool(d)\n\n# Test the function\nprint(check_dict({})) # Output: True\nprint(check_dict({'a': 1, 'b': 2, 'c': 3})) # Output: False ",
        "generated_testcode": "assert my_dict(dict()) == True\n",
        "test": "assert my_dict({10})==False\nassert my_dict({11})==False\nassert my_dict({})==True",
        "canonical_solution": "def my_dict(dict1):\r\n  if bool(dict1):\r\n     return False\r\n  else:\r\n     return True"
    },
    {
        "number": 583,
        "prompt": "Write a function for nth catalan number.\ndef catalan_number(num):\n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    if num == 0:\n        return 1\n    else:\n        res = 0\n        for i in range(num):\n            res += catalan_number(i) * catalan_number(num - i - 1)\n        return res\n\n\n# Test the function\nprint(catalan_number(5))\n\n\n# Using dynamic approach to optimize the code\n\ndef catalan_number_dynamic(num):\n    res = [1]\n    for i in range(1, num + 1):\n        res.append(res[i - 1] * (2 * i) // (i + 1))\n    return res[num]\n\n\n# Test the function\nprint(catalan_number_dynamic(5))",
        "generated_testcode": "assert catalan_number(0) == 1\n",
        "test": "assert catalan_number(10)==16796\nassert catalan_number(9)==4862\nassert catalan_number(7)==429",
        "canonical_solution": "def catalan_number(num):\r\n    if num <=1:\r\n         return 1   \r\n    res_num = 0\r\n    for i in range(num):\r\n        res_num += catalan_number(i) * catalan_number(num-i-1)\r\n    return res_num"
    },
    {
        "number": 584,
        "prompt": "Write a function to find all adverbs and their positions in a given sentence by using regex.\ndef find_adverbs(text):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    # create a regex pattern for adverbs\n    pattern = r'\\b(rarely|often|never|sometimes|always|usually|seldom|oftentimes|rarely|seldomly|frequently)\\b'\n    \n    # find all adverbs in the text using regex finditer() method\n    adverbs = re.finditer(pattern, text)\n    \n    # create a list to store adverbs and their positions\n    adverb_positions = []\n    \n    # iterate through all adverbs found\n    for adv in adverbs:\n        # append a tuple of adverb and its position to the list\n        adverb_positions.append((text[adv.start():adv.end()], adv.start()))\n        \n    # return the list of adverbs and their positions\n    return adverb_positions\n\n# test the function\ntext = \"The dog is rarely running in the park.\"\nprint(find_adverbs(text)) # [('rarely', 10)]\n\ntext = \"She speaks often in the meeting.\"\nprint(find_adverbs(text)) # [('often', 12)]\n\ntext = \"She rarely goes to the gym.\"\nprint(find_adverbs(text)) # [('rarely', 11)]\n\ntext = \"The cat seldom likes to eat cat food.\"\nprint(find_adverbs(text)) # [('seldom', 13)]\n\n",
        "generated_testcode": "assert find_adverbs(\n    \"The dog is quickly running after the cat.\"\n) == [(\"quickly\", 10), (\"quickly\", 17)]\n\n",
        "test": "assert find_adverbs(\"Clearly, he has no excuse for such behavior.\") == '0-7: Clearly'\nassert find_adverbs(\"Please handle the situation carefuly\") == '28-36: carefuly'\nassert find_adverbs(\"Complete the task quickly\") == '18-25: quickly'",
        "canonical_solution": "import re\r\ndef find_adverbs(text):\r\n  for m in re.finditer(r\"\\w+ly\", text):\r\n    return ('%d-%d: %s' % (m.start(), m.end(), m.group(0)))"
    },
    {
        "number": 585,
        "prompt": "Write a function to find the n - expensive price items from a given dataset using heap queue algorithm.\ndef expensive_items(items,n):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    import heapq\n    heap = []\n    for item in items:\n        if len(heap) < n:\n            heapq.heappush(heap, item[1])\n        else:\n            if item[1] > heap[0]:\n                heapq.heappushpop(heap, item[1])\n    return heap\n\n#Example\nitems = [(1, 20), (2, 50), (3, 30), (4, 40), (5, 10), (6, 60), (7, 15), (8, 80)]\nn = 2\nprint(expensive_items(items,n)) #[20, 60] ",
        "generated_testcode": "assert expensive_items(\n    [{\"name\": \"item1\", \"price\": 10}, {\"name\": \"item2\", \"price\": 20}, {\"name\": \"item3\", \"price\": 30}, {\"name\": \"item4\", \"price\": 40}, {\"name\": \"item5\", \"price\": 50}, {\"name\": \"item6\", \"price\": 60}, {\"name\": \"item7\", \"price\": 70}, {\"name\": \"item8\", \"price\": 80}, {\"name\": \"item9\", \"price\": 90}, {\"name\": \"item10\", \"price\": 100}], 3) == [{\"name\": \"item9\", \"price\": 90}, {\"name\": \"item8\", \"price\": 80}, {\"name\": \"item7\", \"price\": 70}]\n\n# Test case 2\n",
        "test": "assert expensive_items([{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}],1)==[{'name': 'Item-2', 'price': 555.22}]\nassert expensive_items([{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}, {'name': 'Item-3', 'price': 45.09}],2)==[{'name': 'Item-2', 'price': 555.22},{'name': 'Item-1', 'price': 101.1}]\nassert expensive_items([{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}, {'name': 'Item-3', 'price': 45.09},{'name': 'Item-4', 'price': 22.75}],1)==[{'name': 'Item-2', 'price': 555.22}]",
        "canonical_solution": "import heapq\r\ndef expensive_items(items,n):\r\n  expensive_items = heapq.nlargest(n, items, key=lambda s: s['price'])\r\n  return expensive_items"
    },
    {
        "number": 586,
        "prompt": "Write a python function to split the array and add the first part to the end.\ndef split_Arr(a,n,k):  \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    # code goes here\n    return a[k:]+a[:k]\n\n# test the function\na=[1,2,3,4,5,6,7,8,9,10]\nn=3\nk=2\nprint(split_Arr(a,n,k))\n\n# Output: [3, 4, 5, 6, 7, 8, 9, 10, 1, 2] ",
        "generated_testcode": "assert split_Arr([\"apple\", \"banana\", \"cherry\", \"orange\", \"grape\", \"kiwi\", \"mango\"], 2, 3) == [\"apple\", \"banana\", \"cherry\", \"orange\", \"kiwi\", \"mango\", \"grape\"]\n",
        "test": "assert split_Arr([12,10,5,6,52,36],6,2) == [5,6,52,36,12,10]\nassert split_Arr([1,2,3,4],4,1) == [2,3,4,1]\nassert split_Arr([0,1,2,3,4,5,6,7],8,3) == [3,4,5,6,7,0,1,2]",
        "canonical_solution": "def split_Arr(a,n,k):  \r\n   b = a[:k] \r\n   return (a[k::]+b[::]) "
    },
    {
        "number": 587,
        "prompt": "Write a function to convert a list to a tuple.\ndef list_tuple(listx):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": true,
        "answer": "    return tuple(listx)\n\n#Example usage:\nmy_list = [1, 2, 3, 4, 5, 6, 7]\nprint(list_tuple(my_list)) #Output: (1, 2, 3, 4, 5, 6, 7)\n\n#Alternative solution using the * operator:\ndef list_tuple(listx):\n    return (*listx,)\n\n#Example usage:\nmy_list = [1, 2, 3, 4, 5, 6, 7]\nprint(list_tuple(my_list)) #Output: (1, 2, 3, 4, 5, 6, 7)\n\n#Solution explanation:\n#The * operator is used to unpack the list and pass its elements as separate arguments to the tuple function. This creates a tuple from the list. ",
        "generated_testcode": "assert list_tuple([\"apple\", \"banana\", \"cherry\", \"orange\"]), (\"apple\", \"banana\", \"cherry\")\n",
        "test": "assert list_tuple([5, 10, 7, 4, 15, 3])==(5, 10, 7, 4, 15, 3)\nassert list_tuple([2, 4, 5, 6, 2, 3, 4, 4, 7])==(2, 4, 5, 6, 2, 3, 4, 4, 7)\nassert list_tuple([58,44,56])==(58,44,56)",
        "canonical_solution": "def list_tuple(listx):\r\n  tuplex = tuple(listx)\r\n  return tuplex"
    },
    {
        "number": 588,
        "prompt": "Write a python function to find the difference between largest and smallest value in a given array.\ndef big_diff(nums):\n",
        "checkpoint": "7B",
        "pass": 3,
        "correct": true,
        "answer": "    if len(nums) == 0:\n        return None\n    else:\n        nums.sort()\n        return nums[-1] - nums[0]\n\nprint(big_diff([1, 5, 3, 10, 8, 12, 7, 4, 9])) # Output: 8\nprint(big_diff([-10, -5, -3, -6])) # Output: 9\nprint(big_diff([2, 2, 2, 2, 2])) # Output: None\nprint(big_diff([])) # Output: None\nprint(big_diff([1])) # Output: None\n\n#Solution\ndef big_diff(nums):\n    if len(nums) == 0:\n        return None\n    else:\n        nums.sort()\n        if len(nums) == 1:\n            return None\n        else:\n            return nums[-1] - nums[0]\n\nprint(big_diff([1, 5, 3, 10, 8, 12, 7, 4, 9])) # Output: 8\nprint(big_diff([-10, -5, -3, -6])) # Output: 9\nprint(big_diff([2, 2, 2, 2, 2])) # Output: None\nprint(big_diff([])) # Output: None\nprint(big_diff([1])) # Output: None ",
        "generated_testcode": "assert big_diff([1, 2, 3, 4, 5, 6, 7, 8, 9] ) == 8\n",
        "test": "assert big_diff([1,2,3,4]) == 3\nassert big_diff([4,5,12]) == 8\nassert big_diff([9,2,3]) == 7",
        "canonical_solution": "def big_diff(nums):\r\n     diff= max(nums)-min(nums)\r\n     return diff"
    },
    {
        "number": 589,
        "prompt": "Write a function to find perfect squares between two given numbers.\ndef perfect_squares(a, b):\n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    # initialize variables\n    result = []\n\n    # iterate from a to b\n    for num in range(a, b+1):\n        # check if the square root of num is an integer\n        if int(num ** 0.5) ** 2 == num:\n            result.append(num)\n    \n    # return the list of perfect squares\n    return result\n\n# test the function\nprint(perfect_squares(1, 20))  # [1, 4, 9, 16, 25, 36, 49, 64]\nprint(perfect_squares(10, 20)) # [16, 25, 36]\nprint(perfect_squares(0, 100)) # [0, 1, 4, 9, 16, 25, 36, 49, 64, 81, 1000]\nprint(perfect_squares(0, 1000)) # [0, 1, 4, 9, 16, 25, 36, 49, 64, 81, 100, 1000, 1444, 196, 256, 361, 484, 641, 810]",
        "generated_testcode": "assert perfect_squares(1, 10) == [1, 4, 9]\n",
        "test": "assert perfect_squares(1,30)==[1, 4, 9, 16, 25]\nassert perfect_squares(50,100)==[64, 81, 100]\nassert perfect_squares(100,200)==[100, 121, 144, 169, 196]",
        "canonical_solution": "def perfect_squares(a, b):\r\n    lists=[]\r\n    for i in range (a,b+1):\r\n        j = 1;\r\n        while j*j <= i:\r\n            if j*j == i:\r\n                 lists.append(i)  \r\n            j = j+1\r\n        i = i+1\r\n    return lists"
    },
    {
        "number": 590,
        "prompt": "Write a function to convert polar coordinates to rectangular coordinates.\ndef polar_rect(x,y):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    return(x*cos(y), x*sin(y))\n\n#Test the function with sample input\nx = 3\ny = pi/2\nprint(polar_rect(x,y))\n\n#Output: (3, 0)\n\nx = 4\ny = pi/4\nprint(polar_rect(x,y))\n#Output: (2.0, 3.0)\n\n#Note: The output should be (2.0, 3.0) because 4*cos(pi/4) = 2.0 and 4*sin(pi/4) = 3.0\n",
        "generated_testcode": "assert polar_rect(1, 45) == (1, 0)\n",
        "test": "assert polar_rect(3,4)==((5.0, 0.9272952180016122), (-2+2.4492935982947064e-16j))\nassert polar_rect(4,7)==((8.06225774829855, 1.0516502125483738), (-2+2.4492935982947064e-16j))\nassert polar_rect(15,17)==((22.67156809750927, 0.8478169733934057), (-2+2.4492935982947064e-16j))",
        "canonical_solution": "import cmath\r\ndef polar_rect(x,y):\r\n cn = complex(x,y)\r\n cn=cmath.polar(cn)\r\n cn1 = cmath.rect(2, cmath.pi)\r\n return (cn,cn1)"
    },
    {
        "number": 591,
        "prompt": "Write a python function to interchange the first and last elements in a list.\ndef swap_List(newList): \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    if len(newList) < 2:\n        return newList\n    else:\n        newList[0], newList[-1] = newList[-1], newList[0]\n        return newList\n\n# Test the function\nprint(swap_List([1, 2, 3, 4, 5, 6]))\nprint(swap_List([10, 20, 30, 40, 50, 60]))\nprint(swap_List([\"apple\", \"banana\", \"cherry\", \"orange\", \"grape\"] )\n\n# Output: [5, 2, 3, 4, 1] \n# Output: [50, 20, 30, 40, 10] \n# Output: ['orange', 'cherry', 'banana', 'apple'] ",
        "generated_testcode": "assert swap_List([\"apple\", \"banana\", \"cherry\", \"orange\", \"grape\"] == [\"orange\", \"banana\", \"apple\", \"grape\"])\n",
        "test": "assert swap_List([12, 35, 9, 56, 24]) == [24, 35, 9, 56, 12]\nassert swap_List([1, 2, 3]) == [3, 2, 1]\nassert swap_List([4, 5, 6]) == [6, 5, 4]",
        "canonical_solution": "def swap_List(newList): \r\n    size = len(newList) \r\n    temp = newList[0] \r\n    newList[0] = newList[size - 1] \r\n    newList[size - 1] = temp  \r\n    return newList "
    },
    {
        "number": 592,
        "prompt": "Write a python function to find sum of product of binomial co-efficients.\ndef binomial_Coeff(n,k): \n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": true,
        "answer": "    if (k > n): \n        return 0\n    res = 1\n    for i in range(1, k+1): \n        res = res * (n-i + 1) // i \n    return res \n\ndef sum_of_product_binomial_coefficients(n, k): \n    sum = 0\n    for i in range(1, n+1): \n        sum += binomial_Coeff(n, i) * binomial_Coeff(n, k-i) * i \n    return sum ",
        "generated_testcode": "assert binomial_Coeff(5,3) == 10\n",
        "test": "assert sum_Of_product(3) == 15\nassert sum_Of_product(4) == 56\nassert sum_Of_product(1) == 1",
        "canonical_solution": "def binomial_Coeff(n,k): \r\n    C = [0] * (k + 1); \r\n    C[0] = 1; # nC0 is 1 \r\n    for i in range(1,n + 1):  \r\n        for j in range(min(i, k),0,-1): \r\n            C[j] = C[j] + C[j - 1]; \r\n    return C[k]; \r\ndef sum_Of_product(n): \r\n    return binomial_Coeff(2 * n,n - 1); "
    },
    {
        "number": 593,
        "prompt": "Write a function to remove leading zeroes from an ip address.\ndef removezero_ip(ip):\n",
        "checkpoint": "7B",
        "pass": 3,
        "correct": true,
        "answer": "    new_ip = \"\"\n    for i in ip.split(\".\"):\n        if i.startswith(\"0\") and len(i) > 1:\n            new_ip += i.lstrip(\"0\") + \".\"\n        else:\n            new_ip += i + \".\"\n    return new_ip[:-1]\n\n# Test the function with the following IP address\nip = \"001.001.001.001\"\nprint(removezero_ip(ip)) ",
        "generated_testcode": "assert removezero_ip(\"010.001.0002.003\") == \"10.1.2.3\"\n",
        "test": "assert removezero_ip(\"216.08.094.196\")==('216.8.94.196') \nassert removezero_ip(\"12.01.024\")==('12.1.24') \nassert removezero_ip(\"216.08.094.0196\")==('216.8.94.196') ",
        "canonical_solution": "import re\r\ndef removezero_ip(ip):\r\n string = re.sub('\\.[0]*', '.', ip)\r\n return string\r"
    },
    {
        "number": 594,
        "prompt": "Write a function to find the difference of first even and odd number of a given list.\ndef diff_even_odd(list1):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    even_list = []\n    odd_list = []\n    for num in list1:\n        if num % 2 == 0:\n            even_list.append(num)\n        else:\n            odd_list.append(num)\n    even_list.sort()\n    odd_list.sort()\n    return abs(even_list[0] - odd_list[0])\n\n#test\nprint(diff_even_odd([4, 3, 7, 8, 2, 9, 6, 10])) # Output: 4\nprint(diff_even_odd([3, 5, 6, 9, 2, 8, 1])) # Output: 3\nprint(diff_even_odd([1, 2, 3, 4, 5, 6, 7, 8])) # Output: 0",
        "generated_testcode": "assert diff_even_odd([1,2,3,4,5,6,7,8,9] ) == 2\n",
        "test": "assert diff_even_odd([1,3,5,7,4,1,6,8])==3\nassert diff_even_odd([1,2,3,4,5,6,7,8,9,10])==1\nassert diff_even_odd([1,5,7,9,10])==9",
        "canonical_solution": "def diff_even_odd(list1):\r\n    first_even = next((el for el in list1 if el%2==0),-1)\r\n    first_odd = next((el for el in list1 if el%2!=0),-1)\r\n    return (first_even-first_odd)"
    },
    {
        "number": 595,
        "prompt": "Write a python function to count minimum number of swaps required to convert one binary string to another.\ndef min_Swaps(str1,str2) : \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    n = len(str1)\n    count = 0\n    for i in range(n) : \n        if str1[i] != str2[i] : \n            j = str2.find(str1[i])\n            if j != -1 : \n                str2 = str2[:j] + str1[i] + str2[j+1:]\n                count += 1\n    return count\n\nstr1 = input()\nstr2 = input()\nprint(min_Swaps(str1,str2))",
        "generated_testcode": "assert min_Swaps(str1=\"1011\",str2=\"0111\") == 1\n",
        "test": "assert min_Swaps(\"1101\",\"1110\") == 1\nassert min_Swaps(\"111\",\"000\") == \"Not Possible\"\nassert min_Swaps(\"111\",\"110\") == \"Not Possible\"",
        "canonical_solution": "def min_Swaps(str1,str2) : \r\n    count = 0\r\n    for i in range(len(str1)) :  \r\n        if str1[i] != str2[i] : \r\n            count += 1\r\n    if count % 2 == 0 : \r\n        return (count // 2) \r\n    else : \r\n        return (\"Not Possible\") "
    },
    {
        "number": 596,
        "prompt": "Write a function to find the size of the given tuple.\ndef tuple_size(tuple_list):\n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    size = 0\n    for i in tuple_list:\n        size += 1\n    return size\n\n\n# Example usage:\nmy_tuple = (1, 2, 3, 4, 5, 6, 7, 8, 9)\nprint(tuple_size(my_tuple))  # Output: 6\n\nmy_tuple = (\"apple\", \"banana\", \"orange\", \"kiwi\")\nprint(tuple_size(my_tuple))  # Output: 3\n\n\n# Note: The tuple_size function should only take one argument, which is the tuple to be checked for size. The function should return an integer value representing the size of the tuple. ",
        "generated_testcode": "assert tuple_size(()) == 0\n",
        "test": "assert tuple_size((\"A\", 1, \"B\", 2, \"C\", 3) ) == sys.getsizeof((\"A\", 1, \"B\", 2, \"C\", 3))\nassert tuple_size((1, \"Raju\", 2, \"Nikhil\", 3, \"Deepanshu\") ) == sys.getsizeof((1, \"Raju\", 2, \"Nikhil\", 3, \"Deepanshu\"))\nassert tuple_size(((1, \"Lion\"), ( 2, \"Tiger\"), (3, \"Fox\"), (4, \"Wolf\"))  ) == sys.getsizeof(((1, \"Lion\"), ( 2, \"Tiger\"), (3, \"Fox\"), (4, \"Wolf\")))",
        "canonical_solution": "import sys \r\ndef tuple_size(tuple_list):\r\n  return (sys.getsizeof(tuple_list)) "
    },
    {
        "number": 597,
        "prompt": "Write a function to find kth element from the given two sorted arrays.\ndef find_kth(arr1, arr2, m, n, k):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    if m < n:\n        return find_kth(arr2, n, m, k)\n\n    low = 0\n    high = m\n    while low <= high:\n        mid = (low + high) // 2\n        if mid > 0 and mid < m:\n            if arr1[mid-1] > arr2[mid]:\n                low = mid + 1\n            else:\n                high = mid - 1\n        else:\n            low = mid\n\n        if low == m:\n            return arr2[k-1]\n        elif k == 1:\n            return arr1[low-1]\n        else:\n            if low < m:\n                k -= 1\n            else:\n                k -= m\n\n    return arr1[low]\n\n\n# Test the function\narr1 = [1, 3, 5, 7, 9, 11, 15, 19]\narr2 = [2, 4, 6, 8, 10, 11, 18, 20]\nm = len(arr1)\nn = len(arr2)\nk = 5\nprint(find_kth(arr1, arr2, m, n, k)) # Output: 8\n\n",
        "generated_testcode": "assert find_kth([1, 3, 5, 7, 9], [2, 4, 6, 8, 10], 3) == 7\n",
        "test": "assert find_kth([2, 3, 6, 7, 9], [1, 4, 8, 10], 5, 4, 5) == 6\nassert find_kth([100, 112, 256, 349, 770], [72, 86, 113, 119, 265, 445, 892], 5, 7, 7) == 256\nassert find_kth([3, 4, 7, 8, 10], [2, 5, 9, 11], 5, 4, 6) == 8",
        "canonical_solution": "def find_kth(arr1, arr2, m, n, k):\r\n\tsorted1 = [0] * (m + n)\r\n\ti = 0\r\n\tj = 0\r\n\td = 0\r\n\twhile (i < m and j < n):\r\n\t\tif (arr1[i] < arr2[j]):\r\n\t\t\tsorted1[d] = arr1[i]\r\n\t\t\ti += 1\r\n\t\telse:\r\n\t\t\tsorted1[d] = arr2[j]\r\n\t\t\tj += 1\r\n\t\td += 1\r\n\twhile (i < m):\r\n\t\tsorted1[d] = arr1[i]\r\n\t\td += 1\r\n\t\ti += 1\r\n\twhile (j < n):\r\n\t\tsorted1[d] = arr2[j]\r\n\t\td += 1\r\n\t\tj += 1\r\n\treturn sorted1[k - 1]"
    },
    {
        "number": 598,
        "prompt": "Write a function to check whether the given number is armstrong or not.\ndef armstrong_number(number):\n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    num = number\n    sum = 0\n    temp = number\n    length = len(str(number))\n    while temp > 0:\n        digit = temp % 10\n        sum += digit ** length\n        temp //= 10\n    if sum == number:\n        return True\n    else:\n        return False\n\n\n# Test the function with some test cases\nprint(armstrong_number(153)) # Output: True\nprint(armstrong_number(370)) # Output: True\nprint(armstrong_number(9474)) # Output: True\nprint(armstrong_number(9475)) # Output: False\nprint(armstrong_number(12321)) # Output: True\nprint(armstrong_number(456)) # Output: False\n",
        "generated_testcode": "assert armstrong_number(153) == True\n",
        "test": "assert armstrong_number(153)==True\nassert armstrong_number(259)==False\nassert armstrong_number(4458)==False",
        "canonical_solution": "def armstrong_number(number):\r\n sum = 0\r\n times = 0\r\n temp = number\r\n while temp > 0:\r\n           times = times + 1\r\n           temp = temp // 10\r\n temp = number\r\n while temp > 0:\r\n           reminder = temp % 10\r\n           sum = sum + (reminder ** times)\r\n           temp //= 10\r\n if number == sum:\r\n           return True\r\n else:\r\n           return False"
    },
    {
        "number": 599,
        "prompt": "Write a function to find sum and average of first n natural numbers.\ndef sum_average(number):\n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    #initialize sum and count\n    sum = 0\n    count = 0\n\n    #loop through n numbers\n    for i in range(1, number+1):\n        #add i to sum\n        sum += i\n        #increment count\n        count += 1\n\n    #calculate average\n    avg = sum / number\n\n    #return sum and average\n    return sum, avg\n\n\n#test function\nprint(sum_average(5)) # should return (15, 3.0)\nprint(sum_average(10)) # should return (55, 5.5)\nprint(sum_average(20)) # should return (210, 10.0)\n",
        "generated_testcode": "assert sum_average(5) == (15, 3.0)\n",
        "test": "assert sum_average(10)==(55, 5.5)\nassert sum_average(15)==(120, 8.0)\nassert sum_average(20)==(210, 10.5)",
        "canonical_solution": "def sum_average(number):\r\n total = 0\r\n for value in range(1, number + 1):\r\n    total = total + value\r\n average = total / number\r\n return (total,average)"
    },
    {
        "number": 600,
        "prompt": "Write a python function to check whether the given number is even or not using bitwise operator.\ndef is_Even(n) : \n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    if n & 1 == 0 : \n        return True\n    else : \n        return False\n\n# Driver Code \nnum = 10\nif is_Even(num) : \n    print(str(num) + \" is even\") \nelse : \n    print(str(num) + \" is odd\") ",
        "generated_testcode": "assert is_Even(4) == True\n",
        "test": "assert is_Even(1) == False\nassert is_Even(2) == True\nassert is_Even(3) == False",
        "canonical_solution": "def is_Even(n) : \r\n    if (n^1 == n+1) :\r\n        return True; \r\n    else :\r\n        return False; "
    },
    {
        "number": 601,
        "prompt": "Write a function to find the longest chain which can be formed from the given set of pairs.\n\tdef __init__(self, a, b): \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "\t\tself.a = a\n\t\tself.b = b\n\t\tself.graph = defaultdict(list)\n\t\tfor i in range(len(a)):\n\t\t\tself.graph[a[i]].append(b[i])\n\n\tdef longest_chain(self):\n\t\tvisited = [False]*len(self.a)\n\t\tdef dfs(node, visited, parent, chain, max_chain):\n\t\t\tvisited[node] = True\n\t\t\tchain.append(node)\n\t\t\tfor i in self.graph[node]:\n\t\t\t\tif not visited[i]:\n\t\t\t\t\tif i == parent:\n\t\t\t\t\t\tcontinue\n\t\t\t\tdfs(i, visited, chain, max_chain)\n\t\t\tif len(chain) > len(max_chain):\n\t\t\t\tmax_chain = chain\n\t\t\tvisited[node] = False\n\t\t\tchain.pop()\n\t\t\treturn max_chain\n\t\tmax_chain = []\n\t\tfor i in range(len(self.a)):\n\t\t\tif not visited[i]:\n\t\t\t\tchain = []\n\t\t\t\tmax_chain = dfs(i, visited, chain, max_chain)\n\t\treturn max_chain\n\n# Example usage:\n# a = [1,2,3,4,5,6]\n# b = [2,5,3,1,6,4]\n# obj = Long",
        "generated_testcode": "assert __init__(1, 2) == 1\n",
        "test": "assert max_chain_length([Pair(5, 24), Pair(15, 25),Pair(27, 40), Pair(50, 60)], 4) == 3\nassert max_chain_length([Pair(1, 2), Pair(3, 4),Pair(5, 6), Pair(7, 8)], 4) == 4\nassert max_chain_length([Pair(19, 10), Pair(11, 12),Pair(13, 14), Pair(15, 16), Pair(31, 54)], 5) == 5",
        "canonical_solution": "class Pair(object): \r\n\tdef __init__(self, a, b): \r\n\t\tself.a = a \r\n\t\tself.b = b \r\ndef max_chain_length(arr, n): \r\n\tmax = 0\r\n\tmcl = [1 for i in range(n)] \r\n\tfor i in range(1, n): \r\n\t\tfor j in range(0, i): \r\n\t\t\tif (arr[i].a > arr[j].b and\r\n\t\t\t\tmcl[i] < mcl[j] + 1): \r\n\t\t\t\tmcl[i] = mcl[j] + 1\r\n\tfor i in range(n): \r\n\t\tif (max < mcl[i]): \r\n\t\t\tmax = mcl[i] \r\n\treturn max"
    },
    {
        "number": 602,
        "prompt": "Write a python function to find the first repeated character in a given string.\ndef first_repeated_char(str1):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    freq_dict = {}\n    for char in str1:\n        if char in freq_dict:\n            freq_dict[char] += 1\n        else:\n            freq_dict[char] = 1\n    for char in str1:\n        if freq_dict[char] > 1:\n            return char\n    return None\n\n\n# Test cases\nprint(first_repeated_char('hello world')) # should return 'l'\nprint(first_repeated_char('abca')) # should return 'a'\nprint(first_repeated_char('aabbc')) # should return 'a'\nprint(first_repeated_char('abcaa')) # should return 'a'\nprint(first_repeated_char('abcdefg')) # should return None\nprint(first_repeated_char('')) # should return None\n\n\n# Test case with only one character\nprint(first_repeated_char('a')) # should return 'a'\n\n\n# Test case with no repeating characters\nprint(first_repeated_char('abcd')) # should return None\n",
        "generated_testcode": "assert first_repeated_char(None) == None\n",
        "test": "assert first_repeated_char(\"abcabc\") == \"a\"\nassert first_repeated_char(\"abc\") == \"None\"\nassert first_repeated_char(\"123123\") == \"1\"",
        "canonical_solution": "def first_repeated_char(str1):\r\n  for index,c in enumerate(str1):\r\n    if str1[:index+1].count(c) > 1:\r\n      return c \r\n  return \"None\""
    },
    {
        "number": 603,
        "prompt": "Write a function to get a lucid number smaller than or equal to n.\ndef get_ludic(n):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    lucid_numbers = []\n    for i in range(1, n+1):\n        is_lucid = True\n        for j in range(1, int(i/2) + 1):\n            if i % j == 0:\n                if i // j + j != i:\n                    is_lucid = False\n                    break\n        if is_lucid:\n            lucid_numbers.append(i)\n    return lucid_numbers\n\n\nprint(get_ludic(20))\n# Output: [1, 2, 3, 4, 6, 7, 8, 10, 12, 13, 14, 15, 20]\nprint(get_ludic(100))\n# Output: [1, 2, 3, 4, 6, 7, 8, 10, 12, 14, 15, 20, 21, 22, 24, 28, 30, 34, 35, 40]\nprint(get_lucid(30))\n# Output: [1, 2, 3, 4, 6, 7, 8, 10, 12, 14, 15, 20, 21, 22, 24, 28, 30, 34, 35, 4",
        "generated_testcode": "assert get_ludic(10) == 4\n",
        "test": "assert get_ludic(10) == [1, 2, 3, 5, 7]\nassert get_ludic(25) == [1, 2, 3, 5, 7, 11, 13, 17, 23, 25]\nassert get_ludic(45) == [1, 2, 3, 5, 7, 11, 13, 17, 23, 25, 29, 37, 41, 43]",
        "canonical_solution": "def get_ludic(n):\r\n\tludics = []\r\n\tfor i in range(1, n + 1):\r\n\t\tludics.append(i)\r\n\tindex = 1\r\n\twhile(index != len(ludics)):\r\n\t\tfirst_ludic = ludics[index]\r\n\t\tremove_index = index + first_ludic\r\n\t\twhile(remove_index < len(ludics)):\r\n\t\t\tludics.remove(ludics[remove_index])\r\n\t\t\tremove_index = remove_index + first_ludic - 1\r\n\t\tindex += 1\r\n\treturn ludics"
    },
    {
        "number": 604,
        "prompt": "Write a function to reverse words in a given string.\ndef reverse_words(s):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    \"\"\"\n    Reverse the order of words in a given string\n    :param s: string\n    :return: string\n    \"\"\"\n    words = s.split()\n    return ' '.join([word[::-1] for word in words][::-1]\n\n\n# Test the function\ns = \"This is a sample string\"\nprint(reverse_words(s))\n# Output: \"sihT si a revo spams gnirts\"\n\n",
        "generated_testcode": "assert reverse_words(None) == None\n",
        "test": "assert reverse_words(\"python program\")==(\"program python\")\nassert reverse_words(\"java language\")==(\"language java\")\nassert reverse_words(\"indian man\")==(\"man indian\")",
        "canonical_solution": "def reverse_words(s):\r\n        return ' '.join(reversed(s.split()))"
    },
    {
        "number": 605,
        "prompt": "Write a function to check if the given integer is a prime number.\ndef prime_num(num):\n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True\n\n# Test cases\nprint(prime_num(7)) # True\nprint(prime_num(12)) # False\nprint(prime_num(23)) # True\nprint(prime_num(1) ) # False\nprint(prime_num(11) ) # True\n",
        "generated_testcode": "assert prime_num(7) == True\n",
        "test": "assert prime_num(13)==True\nassert prime_num(7)==True\nassert prime_num(-1010)==False",
        "canonical_solution": "def prime_num(num):\r\n  if num >=1:\r\n   for i in range(2, num//2):\r\n     if (num % i) == 0:\r\n                return False\r\n     else:\r\n                return True\r\n  else:\r\n          return False"
    },
    {
        "number": 606,
        "prompt": "Write a function to convert degrees to radians.\ndef radian_degree(degree):\n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    return degree * (3.14 / 180)\n\n\n#Test the function\nprint(radian_degree(90))\n\n#Expected output: 1.570796326779489\n\n\n#Write a function to convert radians to degrees\ndef degree_radian(radian):\n    return radian * (180 / 3.14)\n\n\n#Test the function\nprint(degree_radian(1.57079632679489))\n#Expected output: 90.0",
        "generated_testcode": "assert radian_degree(0) == 0\n",
        "test": "assert radian_degree(90)==1.5707963267948966\nassert radian_degree(60)==1.0471975511965976\nassert radian_degree(120)==2.0943951023931953",
        "canonical_solution": "import math\r\ndef radian_degree(degree):\r\n radian = degree*(math.pi/180)\r\n return radian"
    },
    {
        "number": 607,
        "prompt": "Write a function to search a literals string in a string and also find the location within the original string where the pattern occurs by using regex.\ndef find_literals(text, pattern):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    pattern = re.compile(r'\\b' + re.escape(pattern) + r'\\b')\n    return pattern.search(text).group()\n\n\n# Test the function\ntext = \"This is a sample text with a pattern to search for.\"\npattern = \"pattern\"\nprint(find_literals(text, pattern))\n\ntext = \"The pattern occurs multiple times in this text.\"\npattern = \"pattern\"\nprint(find_literals(text, pattern))\n\ntext = \"The pattern occurs multiple times in this text.\"\npattern = \"not in the text\"\nprint(find_literals(text, pattern))\n\ntext = \"There is no pattern in this text.\"\npattern = \"not in the text\"\nprint(find_literals(text, pattern)) ",
        "generated_testcode": "assert find_literals(text=\"The quick brown fox jumps over the lazy dog\", pattern=\"fox\") == (True, 10)\n",
        "test": "assert find_literals('The quick brown fox jumps over the lazy dog.', 'fox') == ('fox', 16, 19)\nassert find_literals('Its been a very crazy procedure right', 'crazy') == ('crazy', 16, 21)\nassert find_literals('Hardest choices required strongest will', 'will') == ('will', 35, 39)",
        "canonical_solution": "import re\r\npattern = 'fox'\r\ntext = 'The quick brown fox jumps over the lazy dog.'\r\ndef find_literals(text, pattern):\r\n  match = re.search(pattern, text)\r\n  s = match.start()\r\n  e = match.end()\r\n  return (match.re.pattern, s, e)"
    },
    {
        "number": 608,
        "prompt": "Write a python function to find nth bell number.\ndef bell_Number(n): \n",
        "checkpoint": "7B",
        "pass": 3,
        "correct": true,
        "answer": "    def bell(n, k): \n        if k == 0: \n            return 1\n        if k == 1: \n            return n \n        return bell(n - 1, k - 1) + bell(n - 1, k) \n  \n    return bell(n, n) ",
        "generated_testcode": "assert bell_Number(0) == 1\n",
        "test": "assert bell_Number(2) == 2\nassert bell_Number(3) == 5\nassert bell_Number(4) == 15",
        "canonical_solution": "def bell_Number(n): \r\n    bell = [[0 for i in range(n+1)] for j in range(n+1)] \r\n    bell[0][0] = 1\r\n    for i in range(1, n+1):\r\n        bell[i][0] = bell[i-1][i-1]\r\n        for j in range(1, i+1): \r\n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1] \r\n    return bell[n][0] "
    },
    {
        "number": 609,
        "prompt": "Write a python function to find minimum possible value for the given periodic function.\ndef floor_Min(A,B,N):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": true,
        "answer": "    if N==1:\n        return max(A,B)\n    min_value = min(A,B)\n    for i in range(1,N):\n        if A>=B:\n            if A>B:\n                A = A-B\n            else:\n                B = B-A\n    return min_value\n\n# Example usage:\nA = 2\nB = 3\nN = 3\nprint(floor_Min(A,B,N)) # Output: 3\n\nA = 5\nB = 10\nN = 10\nprint(floor_Min(A,B,N)) # Output: 5\nA = 10\nB = 5\nN = 5\nprint(floor_Min(A,B,N)) # Output: 5\n\nA = 1\nB = 10\nN = 4\nprint(floor_Min(A,B,N)) # Output: 1\n",
        "generated_testcode": "assert floor_Min(1,2,3) == 1\n",
        "test": "assert floor_Min(10,20,30) == 15\nassert floor_Min(1,2,1) == 0\nassert floor_Min(11,10,9) == 9",
        "canonical_solution": "def floor_Min(A,B,N):\r\n    x = max(B - 1,N)\r\n    return (A*x) // B"
    },
    {
        "number": 610,
        "prompt": "Write a python function to remove the k'th element from a given list.\ndef remove_kth_element(list1, L):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    if k > len(list1):\n        return \"Invalid input\"\n    else:\n        del list1[k]\n        return list1\n\n#test cases\nlist1 = [1,2,3,4,5,6,7,8,9]\nk = 3\nprint(remove_kth_element(list1,k))\n#expected output [1,2,3,4,7,8,9]\n\nlist2 = [1,2,3,4,5,6,7,8,9,10]\nk = 2\nprint(remove_kth_element(list2,k))\n#expected output [1,2,4,5,6,7,8,10]\nlist3 = [1,2,3,4,5,6,7,8,9,10]\nk = 10\nprint(remove_kth_element(list3,k))\n#expected output \"Invalid input\"\n",
        "generated_testcode": "assert remove_kth_element([\"apple\", \"banana\", \"cherry\", \"orange\", \"grape\", \"kiwi\"], 2) == [\"apple\", \"cherry\", \"orange\", \"grape\"]\n",
        "test": "assert remove_kth_element([1,1,2,3,4,4,5,1],3)==[1, 1, 3, 4, 4, 5, 1]\nassert remove_kth_element([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4],4)==[0, 0, 1, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]\nassert remove_kth_element([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10],5)==[10,10,15,19, 18, 17, 26, 26, 17, 18, 10]",
        "canonical_solution": "def remove_kth_element(list1, L):\r\n    return  list1[:L-1] + list1[L:]"
    },
    {
        "number": 611,
        "prompt": "Write a function to find the maximum of nth column from the given tuple list.\ndef max_of_nth(test_list, N):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    max_value = test_list[0][N]\n    for i in test_list:\n        if i[N] > max_value:\n            max_value = i[N]\n    return max_value\n\n\n# test the function with the given input\ntest_list = [(1, 2, 3, 4, 5), (6, 7, 8, 9), (4, 5, 6, 7)]\nprint(max_of_nth(test_list, 1))  # output: 5\nprint(max_of_nth(test_list, 2))  # output: 8\nprint(max_of_nth(test_list, 3))  # output: 7\n\n\n# test the function with the given input\ntest_list = [(10, 20, 30), (40, 50, 60), (70, 80, 90)]\nprint(max_of_nth(test_list, 1))  # output: 70\nprint(max_of_nth(test_list, 2))  # output: 80\nprint(max_of_nth(test_list, 0))  # output: 30\n\n\n# test the function with the given input\ntest_list = [(100, 200, 300, 400, 500), (60, 70, 80, 90, ",
        "generated_testcode": "assert max_of_nth([(1,2,3,4), (5,6,7), (8,9,10)], 2) == 10\n",
        "test": "assert max_of_nth([(5, 6, 7), (1, 3, 5), (8, 9, 19)], 2) == 19\nassert max_of_nth([(6, 7, 8), (2, 4, 6), (9, 10, 20)], 1) == 10\nassert max_of_nth([(7, 8, 9), (3, 5, 7), (10, 11, 21)], 1) == 11",
        "canonical_solution": "def max_of_nth(test_list, N):\r\n  res = max([sub[N] for sub in test_list])\r\n  return (res) "
    },
    {
        "number": 612,
        "prompt": "Write a python function to merge the first and last elements separately in a list of lists.\ndef merge(lst):  \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    first_half = []\n    last_half = []\n    for i in range(len(lst)):\n        first_half.append(lst[i][0])\n        last_half.append(lst[i][-1])\n    merged = [first_half, last_half]\n    return merged\n\n#Test the function\nlst = [['a', 'b', 'c'], ['d', 'e', 'f'], ['g', 'h', 'i'], ['j', 'k', 'l']]\nprint(merge(lst))  # Output: [['a', 'g', 'j'], ['b', 'h', 'k'], ['c', 'i', 'l']]\n\n#Alternative Solution\ndef merge(lst):\n    return [lst[0][0], lst[-1][-1], *[lst[i][1:-1] for i in range(1, len(lst)-1)], lst[-1][0], lst[0][-1]]\n\n#Test the function\nlst = [['a', 'b', 'c'], ['d', 'e', 'f'], ['g', 'h', 'i'], ['j', 'k', 'l']]\nprint(merge(lst))  # Output: ['a', 'l', 'b', 'e', 'i', 'c', 'k', 'f', 'd', 'h', 'j']",
        "generated_testcode": "assert merge([[1,2,3],[4,5,6],[7,8,9]] ) == [[1,9],[4,3],[7,6,5,8]\n",
        "test": "assert merge([['x', 'y'], ['a', 'b'], ['m', 'n']]) == [['x', 'a', 'm'], ['y', 'b', 'n']]\nassert merge([[1, 2], [3, 4], [5, 6], [7, 8]]) == [[1, 3, 5, 7], [2, 4, 6, 8]]\nassert merge([['x', 'y','z' ], ['a', 'b','c'], ['m', 'n','o']]) == [['x', 'a', 'm'], ['y', 'b', 'n'],['z', 'c','o']]",
        "canonical_solution": "def merge(lst):  \r\n    return [list(ele) for ele in list(zip(*lst))] "
    },
    {
        "number": 613,
        "prompt": "Write a function to find the maximum value in record list as tuple attribute in the given tuple list.\ndef maximum_value(test_list):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    max_value = test_list[0]\n    for i in range(len(test_list)):\n        if test_list[i] > max_value:\n            max_value = test_list[i]\n    return max_value\n\n#test_list = [(10, 20, 30, 40), (50, 60, 70), (80, 90, 100), (120, 150, 130)]\n#print(maximum_value(test_list))\n\n# Output: (150, 120, 130)\n\n#test_list = [(10, 20, 30), (50, 60, 70), (80, 90, 100)]\n#print(maximum_value(test_list))\n\n# Output: (80, 90, 100) ",
        "generated_testcode": "assert maximum_value([(1, 2, 3, 4, 5, 6, 7, 8, 9), (10, 11, 12, 13, 14, 15, 16), (17, 18, 19, 20, 21, 22)] ) == (19, 22)\n",
        "test": "assert maximum_value([('key1', [3, 4, 5]), ('key2', [1, 4, 2]), ('key3', [9, 3])]) == [('key1', 5), ('key2', 4), ('key3', 9)]\nassert maximum_value([('key1', [4, 5, 6]), ('key2', [2, 5, 3]), ('key3', [10, 4])]) == [('key1', 6), ('key2', 5), ('key3', 10)]\nassert maximum_value([('key1', [5, 6, 7]), ('key2', [3, 6, 4]), ('key3', [11, 5])]) == [('key1', 7), ('key2', 6), ('key3', 11)]",
        "canonical_solution": "def maximum_value(test_list):\r\n  res = [(key, max(lst)) for key, lst in test_list]\r\n  return (res) "
    },
    {
        "number": 614,
        "prompt": "Write a function to find the cumulative sum of all the values that are present in the given tuple list.\ndef cummulative_sum(test_list):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    if not test_list:\n        return 0\n    total_sum = 0\n    for i in test_list:\n        total_sum += i\n        print(total_sum)\n    return total_sum\n\n\n# Test the function with a tuple list\nprint(cummulative_sum((1,2,3,4,5,6)) # Output: 15\nprint(cummulative_sum((5,6,7,8,9,10)) # Output: 35\nprint(cummulative_sum((10,15,20,30) # Output: 60\n",
        "generated_testcode": "assert cummulative_sum(()) == ()\n",
        "test": "assert cummulative_sum([(1, 3), (5, 6, 7), (2, 6)]) == 30\nassert cummulative_sum([(2, 4), (6, 7, 8), (3, 7)]) == 37\nassert cummulative_sum([(3, 5), (7, 8, 9), (4, 8)]) == 44",
        "canonical_solution": "def cummulative_sum(test_list):\r\n  res = sum(map(sum, test_list))\r\n  return (res)"
    },
    {
        "number": 615,
        "prompt": "Write a function to find average value of the numbers in a given tuple of tuples.\ndef average_tuple(nums):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    sum = 0\n    count = 0\n    for i in nums:\n        for j in i:\n            sum += j\n            count += 1\n    return sum / count\n\n#Test the function\nnums = ((1,2,3,4,5), (2,3,4,5,6), (3,4,5,6,7))\nprint(average_tuple(nums)) # Output: 4.66666666666666666667\n\n#Test the function\nnums = ((1,2,3,4,5), (2,3,4,5,6), (3,4,5,6,7), (4,5,6,7,8))\nprint(average_tuple(nums)) # Output: 5.0\n\n#Test the function\nnums = ((1,2,3,4,5), (2,3,4,5,6), (3,4,5,6,7), (4,5,6,7,8,9))\nprint(average_tuple(nums)) # Output: 5.0\n\n#Test the function\nnums = ((1,2,3,4,5), (2,3,4,5,6), (3,4,5,6,7,8), (4,5,6,7,8,9))\nprint(average_tuple(nums)) # Output: 5.0",
        "generated_testcode": "assert average_tuple(()) == None\n",
        "test": "assert average_tuple(((10, 10, 10, 12), (30, 45, 56, 45), (81, 80, 39, 32), (1, 2, 3, 4)))==[30.5, 34.25, 27.0, 23.25]\nassert average_tuple(((1, 1, -5), (30, -15, 56), (81, -60, -39), (-10, 2, 3)))== [25.5, -18.0, 3.75]\nassert average_tuple( ((100, 100, 100, 120), (300, 450, 560, 450), (810, 800, 390, 320), (10, 20, 30, 40)))==[305.0, 342.5, 270.0, 232.5]",
        "canonical_solution": "def average_tuple(nums):\r\n    result = [sum(x) / len(x) for x in zip(*nums)]\r\n    return result"
    },
    {
        "number": 616,
        "prompt": "Write a function to perfom the modulo of tuple elements in the given two tuples.\ndef tuple_modulo(test_tup1, test_tup2):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    result = ()\n    for i in range(len(test_tup1)):\n        result += (test_tup1[i] % test_tup2[i],)\n    return result\n\n# Test the function with sample input\ntup1 = (10, 20, 30, 40, 50)\ntup2 = (3, 5, 7, 9)\nprint(tuple_modulo(tup1, tup2)) # Output: (1, 0, 2, 3, 4)\n",
        "generated_testcode": "assert tuple_modulo((10, 3, 5, 7, 9) , (2, 4, 6, 8) ) == (1, 1, 1, 1)\n",
        "test": "assert tuple_modulo((10, 4, 5, 6), (5, 6, 7, 5)) == (0, 4, 5, 1)\nassert tuple_modulo((11, 5, 6, 7), (6, 7, 8, 6)) == (5, 5, 6, 1)\nassert tuple_modulo((12, 6, 7, 8), (7, 8, 9, 7)) == (5, 6, 7, 1)",
        "canonical_solution": "def tuple_modulo(test_tup1, test_tup2):\r\n  res = tuple(ele1 % ele2 for ele1, ele2 in zip(test_tup1, test_tup2)) \r\n  return (res) "
    },
    {
        "number": 617,
        "prompt": "Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\ndef min_Jumps(a, b, d): \n",
        "checkpoint": "7B",
        "pass": 3,
        "correct": true,
        "answer": "    if a == 0 and b == 0: \n        return 0\n    elif a < 0 or b < 0: \n        return -1\n    else: \n        count = 0\n        while a > 0 and b > 0: \n            if a > b: \n                a -= b \n                count += 1\n            else: \n                b -= a \n                count += 1\n        if a == 0 or b == 0: \n            return count \n        else: \n            return -1\n\n#Test Cases\nprint(min_Jumps(1, 2, 4)) #Output: 2 \nprint(min_Jumps(2, 3, 2)) #Output: -1 \nprint(min_Jumps(1, 3, 1)) #Output: 1 \nprint(min_Jumps(7, 1, 1)) #Output: 6 \nprint(min_Jumps(2, 1, 5)) #Output: 2 ",
        "generated_testcode": "assert min_Jumps(1, 1, 2) == 1\n",
        "test": "assert min_Jumps(3,4,11)==3.5\nassert min_Jumps(3,4,0)==0\nassert min_Jumps(11,14,11)==1",
        "canonical_solution": "def min_Jumps(a, b, d): \r\n    temp = a \r\n    a = min(a, b) \r\n    b = max(temp, b) \r\n    if (d >= b): \r\n        return (d + b - 1) / b \r\n    if (d == 0): \r\n        return 0\r\n    if (d == a): \r\n        return 1\r\n    else:\r\n        return 2"
    },
    {
        "number": 618,
        "prompt": "Write a function to divide two lists using map and lambda function.\ndef div_list(nums1,nums2):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    result = list(map(lambda x,y: x/y, nums1, nums2))\n    return result\n\n#Test the function\nnums1 = [10, 20, 30, 40, 50]\nnums2 = [2, 4, 5, 10]\nprint(div_list(nums1, nums2))\n# Output: [5.0, 5.0, 20.0, 10.0]\n\n# Test the function with another set of input\nnums1 = [20, 50, 80, 100]\nnums2 = [5, 2, 10]\nprint(div_list(nums1, nums2))\n# Output: [4.0, 10.0, 8.0] ",
        "generated_testcode": "assert div_list([1,2,3,4,5], [2,3,4,5]) == [0.5, 0.666666666666666666666666, 1.0]\n",
        "test": "assert div_list([4,5,6],[1, 2, 3])==[4.0,2.5,2.0]\nassert div_list([3,2],[1,4])==[3.0, 0.5]\nassert div_list([90,120],[50,70])==[1.8, 1.7142857142857142]",
        "canonical_solution": "def div_list(nums1,nums2):\r\n  result = map(lambda x, y: x / y, nums1, nums2)\r\n  return list(result)"
    },
    {
        "number": 619,
        "prompt": "Write a function to move all the numbers in it to the given string.\ndef move_num(test_str):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    nums = [int(i) for i in test_str if i.isdigit()]\n    if not nums:\n        return test_str\n    else:\n        nums.sort(reverse=True)\n        for num in nums:\n            test_str = test_str.replace(str(num), '')\n        return ''.join(sorted(test_str) + ''.join(map(str, nums))\n\n\n\n# Test cases\nprint(move_num(\"hello123world456\"))  # Output: \"dlrowhe23456\"\nprint(move_num(\"!@#$123a5b4c\"))  # Output: \"!@#$acb123\"\nprint(move_num(\" \"))  # Output: \"\"\nprint(move_num(\" \"))  # Output: \"\"\n",
        "generated_testcode": "assert move_num(12345) == \"12345\"\n",
        "test": "assert move_num('I1love143you55three3000thousand') == 'Iloveyouthreethousand1143553000'\nassert move_num('Avengers124Assemble') == 'AvengersAssemble124'\nassert move_num('Its11our12path13to14see15things16do17things') == 'Itsourpathtoseethingsdothings11121314151617'",
        "canonical_solution": "def move_num(test_str):\r\n  res = ''\r\n  dig = ''\r\n  for ele in test_str:\r\n    if ele.isdigit():\r\n      dig += ele\r\n    else:\r\n      res += ele\r\n  res += dig\r\n  return (res) "
    },
    {
        "number": 620,
        "prompt": "Write a function to find the largest subset where each pair is divisible.\ndef largest_subset(a, n):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    \"\"\"\n    a: list of integers\n    n: integer\n    return: list of integers representing the largest subset\n    \"\"\"\n    def is_divisible(pair):\n        return (pair[0] % pair[1] == 0) or (pair[1] % pair[0] == 0)\n\n    def merge_subsets(subset1, subset2):\n        return list(set(subset1).union(subset2))\n\n    def find_largest_subset(a):\n        largest = []\n        for i in range(len(a)):\n            for j in range(i+1, len(a)):\n                if is_divisible((a[i], a[j]):\n                    subset = [a[i], a[j]]\n                    if len(subset) > len(largest):\n                        largest = subset\n                    if len(subset) == len(largest) and subset > largest:\n                        largest = subset\n        return largest\n\n    def helper(a, n, count):\n        if n == 1:\n            return find_largest_subset(a)\n        else:\n            subset1 = helper(a, n-1)\n            subset2 = helper(a, n-2)\n            if len(subset1) > len(subset2):\n                return merge_subsets(subset1, subset2)\n            else:\n                return subset2\n\n    return helper(a, n)\n\n\n\n# Test cases\nprint(largest_subset([",
        "generated_testcode": "assert largest_subset([1, 2, 3, 4, 6, 8, 12, 15, 21, 24, 30, 45, 60] , 15) == [15, 30]\n",
        "test": "assert largest_subset([ 1, 3, 6, 13, 17, 18 ], 6) == 4\nassert largest_subset([10, 5, 3, 15, 20], 5) == 3\nassert largest_subset([18, 1, 3, 6, 13, 17], 6) == 4",
        "canonical_solution": "def largest_subset(a, n):\r\n\tdp = [0 for i in range(n)]\r\n\tdp[n - 1] = 1; \r\n\tfor i in range(n - 2, -1, -1):\r\n\t\tmxm = 0;\r\n\t\tfor j in range(i + 1, n):\r\n\t\t\tif a[j] % a[i] == 0 or a[i] % a[j] == 0:\r\n\t\t\t\tmxm = max(mxm, dp[j])\r\n\t\tdp[i] = 1 + mxm\r\n\treturn max(dp)"
    },
    {
        "number": 621,
        "prompt": "Write a function to increment the numeric values in the given strings by k.\ndef increment_numerics(test_list, K):\n",
        "checkpoint": "7B",
        "pass": 3,
        "correct": true,
        "answer": "    result = []\n    for i in range(len(test_list)):\n        new_str = \"\"\n        for j in range(len(test_list[i])):\n            if test_list[i][j].isdigit():\n                new_str += str(int(test_list[i][j]) + K)\n            else:\n                new_str += test_list[i][j]\n        result.append(new_str)\n    return result\n\n\n# Test the function with the given input\ntest_list = [\"abc123\", \"test34\", \"9999+9\", \"hello2world\", \"007\"]\nK = 2\nprint(increment_numerics(test_list, K))\n# Expected output: [\"abc125\", \"test36\", \"10010000\", \"010\"]\n",
        "generated_testcode": "assert increment_numerics([\"a1b2c3\", \"d4e5f6\", \"g7h8i9\"], 2) == [\"a3b4c5\", \"d6e7f8\", \"g9h10i11\"]\n",
        "test": "assert increment_numerics([\"MSM\", \"234\", \"is\", \"98\", \"123\", \"best\", \"4\"] , 6) == ['MSM', '240', 'is', '104', '129', 'best', '10']\nassert increment_numerics([\"Dart\", \"356\", \"is\", \"88\", \"169\", \"Super\", \"6\"] , 12) == ['Dart', '368', 'is', '100', '181', 'Super', '18']\nassert increment_numerics([\"Flutter\", \"451\", \"is\", \"44\", \"96\", \"Magnificent\", \"12\"] , 33) == ['Flutter', '484', 'is', '77', '129', 'Magnificent', '45']",
        "canonical_solution": "def increment_numerics(test_list, K):\r\n  res = [str(int(ele) + K) if ele.isdigit() else ele for ele in test_list]\r\n  return res "
    },
    {
        "number": 622,
        "prompt": "Write a function to find the median of two sorted arrays of same size.\ndef get_median(arr1, arr2, n):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    if n % 2 == 0:\n        return (get_kth_element(arr1, arr2, n // 2 - 1) + get_kth_element(arr1, arr2, n // 2)) / 2\n    else:\n        return get_kth_element(arr1, arr2, n // 2)\n\n\ndef get_kth_element(arr1, arr2, k):\n    if len(arr1) > len(arr2):\n        arr1, arr2 = arr2, arr1\n\n    left, right = 0, len(arr1)\n    while left <= right:\n        pivot1 = left + (right - left) // 2\n        pivot2 = k - pivot1\n        if pivot1 > len(arr1) - 1:\n            return get_kth_element(arr1, arr2, k - len(arr1))\n        if pivot2 > len(arr2) - 1:\n            return get_kth_element(arr1, arr2, k - len(arr1))\n        if arr1[pivot1] > arr2[pivot2]:\n            left = pivot1 + 1\n        else:\n            right = pivot1 - 1\n    return arr1[pivot1]\n\n\narr1 = [1, 3, 4, 5, 6, 7]\narr2 = [2, 4, 6, 8, 9]\nn = len(arr1",
        "generated_testcode": "assert get_median([1, 2, 3, 4, 5, 6, 7], [2, 3, 4, 5, 6, 7] ) == 4\n",
        "test": "assert get_median([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0\nassert get_median([2, 4, 8, 9], [7, 13, 19, 28], 4) == 8.5\nassert get_median([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6) == 25.0",
        "canonical_solution": "def get_median(arr1, arr2, n):\r\n  i = 0\r\n  j = 0\r\n  m1 = -1\r\n  m2 = -1\r\n  count = 0\r\n  while count < n + 1:\r\n    count += 1\r\n    if i == n:\r\n      m1 = m2\r\n      m2 = arr2[0]\r\n      break\r\n    elif j == n:\r\n      m1 = m2\r\n      m2 = arr1[0]\r\n      break\r\n    if arr1[i] <= arr2[j]:\r\n      m1 = m2\r\n      m2 = arr1[i]\r\n      i += 1\r\n    else:\r\n      m1 = m2\r\n      m2 = arr2[j]\r\n      j += 1\r\n  return (m1 + m2)/2"
    },
    {
        "number": 623,
        "prompt": "Write a function to find the n-th power of individual elements in a list using lambda function.\ndef nth_nums(nums,n):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    return list(map(lambda x: x**n, nums))\n\n#Example usage:\nnums = [1,2,3,4,5,6,7,8,9]\nn = 2\nprint(nth_nums(nums,n))\n#Output: [1, 4, 9, 16, 25, 36, 49, 64]\n",
        "generated_testcode": "assert nth_nums(range(1,5),2) == [1, 4, 9, 27, 81]\n",
        "test": "assert nth_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],2)==[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]\nassert nth_nums([10,20,30],3)==([1000, 8000, 27000])\nassert nth_nums([12,15],5)==([248832, 759375])",
        "canonical_solution": "def nth_nums(nums,n):\r\n nth_nums = list(map(lambda x: x ** n, nums))\r\n return nth_nums"
    },
    {
        "number": 624,
        "prompt": "Write a python function to convert the given string to upper case.\ndef is_upper(string):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    if string.isupper():\n        return True\n    else:\n        return False\n\ndef convert_to_upper(string):\n    new_string = string.upper()\n    return new_string\n\n# Test the function with some sample inputs\nprint(convert_to_upper(\"hello\")) # Output: HELLO\nprint(convert_to_upper(\"Hello\")) # Output: HELLO\nprint(convert_to_upper(\"HeLLo\")) # Output: HELLO\nprint(convert_to_upper(\"hello123\")) # Output: HELLO123\nprint(convert_to_upper(\"\")) # Output: ",
        "generated_testcode": "assert is_upper(None) == False\n",
        "test": "assert is_upper(\"person\") ==\"PERSON\"\nassert is_upper(\"final\") == \"FINAL\"\nassert is_upper(\"Valid\") == \"VALID\"",
        "canonical_solution": "def is_upper(string):\r\n  return (string.upper())"
    },
    {
        "number": 625,
        "prompt": "Write a python function to interchange first and last elements in a given list.\ndef swap_List(newList): \n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": true,
        "answer": "    if len(newList) == 0 or len(newList) == 1:\n        return newList\n    else:\n        newList[0], newList[-1] = newList[-1], newList[0]\n        return newList\n\n#test the function\nprint(swap_List([1,2,3,4,5,6,7]))\nprint(swap_List([4,5,6,7]))\nprint(swap_List([1,2,3]))\nprint(swap_List([1]))\nprint(swap_List([])) ",
        "generated_testcode": "assert swap_List([\"apple\", \"banana\", \"cherry\", \"orange\", \"grape\", \"kiwi\"]), [\"orange\", \"banana\", \"apple\", \"grape\", \"kiwi\"]\n",
        "test": "assert swap_List([1,2,3]) == [3,2,1]\nassert swap_List([1,2,3,4,4]) == [4,2,3,4,1]\nassert swap_List([4,5,6]) == [6,5,4]",
        "canonical_solution": "def swap_List(newList): \r\n    size = len(newList) \r\n    temp = newList[0] \r\n    newList[0] = newList[size - 1] \r\n    newList[size - 1] = temp   \r\n    return newList "
    },
    {
        "number": 626,
        "prompt": "Write a python function to find the largest triangle that can be inscribed in the semicircle.\ndef triangle_area(r) :  \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    import math\n    area = 0.5*r*r*math.sin(math.pi/3)\n    return area\n\ndef find_largest_triangle(radius):\n    area = triangle_area(radius)\n    while True:\n        if radius <= 0:\n            print(\"Radius should be positive\")\n            break\n        else:\n            largest_triangle = (2*radius*radius)**0.5\n            return largest_triangle\n\nprint(find_largest_triangle(5))\n\n#Output: 5.656854286822233818\n\nprint(find_largest_triangle(2))\n\n#Output: 2.82842712474661903\n\nprint(find_largest_triangle(0)\n#Output: Radius should be positive\n\nprint(find_largest_triangle(-5)\n#Output: Radius should be positive",
        "generated_testcode": "assert triangle_area(3) == 1.89272193079968817585\n",
        "test": "assert triangle_area(0) == 0\nassert triangle_area(-1) == -1\nassert triangle_area(2) == 4",
        "canonical_solution": "def triangle_area(r) :  \r\n    if r < 0 : \r\n        return -1\r\n    return r * r "
    },
    {
        "number": 627,
        "prompt": "Write a python function to find the smallest missing number from the given array.\ndef find_First_Missing(array,start,end): \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    for i in range(start,end+1):\n        if i not in array:\n            return i\n    return -1\n\n#test the function with given input\narr = [1,2,3,4,5,6,7,9]\nstart = 0\nend = 10\nprint(find_First_Missing(arr,start,end))\n",
        "generated_testcode": "assert find_First_Missing([1,2,3,4,5,6,7,9] , 0, 9) == 8\n",
        "test": "assert find_First_Missing([0,1,2,3],0,3) == 4\nassert find_First_Missing([0,1,2,6,9],0,4) == 3\nassert find_First_Missing([2,3,5,8,9],0,4) == 0",
        "canonical_solution": "def find_First_Missing(array,start,end): \r\n    if (start > end): \r\n        return end + 1\r\n    if (start != array[start]): \r\n        return start; \r\n    mid = int((start + end) / 2) \r\n    if (array[mid] == mid): \r\n        return find_First_Missing(array,mid+1,end) \r\n    return find_First_Missing(array,start,mid) "
    },
    {
        "number": 628,
        "prompt": "Write a function to replace all spaces in the given string with character * list item * list item * list item * list item '%20'.\ndef replace_spaces(string):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    # Replace spaces with character * list item * list item * list item '%20'\n    return string.replace(' ', '* list item * list item * list item %20')\n\n# Test the function\nprint(replace_spaces('Hello World!'))\nprint(replace_spaces('My name is John'))\nprint(replace_spaces('I love Python'))\nprint(replace_spaces('Python is fun'))",
        "generated_testcode": "assert replace_spaces(None) == None\n",
        "test": "assert replace_spaces(\"My Name is Dawood\") == 'My%20Name%20is%20Dawood'\nassert replace_spaces(\"I am a Programmer\") == 'I%20am%20a%20Programmer'\nassert replace_spaces(\"I love Coding\") == 'I%20love%20Coding'",
        "canonical_solution": "MAX=1000;\r\ndef replace_spaces(string):\r\n  string=string.strip()\r\n  i=len(string)\r\n  space_count=string.count(' ')\r\n  new_length = i + space_count*2\r\n  if new_length > MAX:\r\n    return -1\r\n  index = new_length-1\r\n  string=list(string)\r\n  for f in range(i-2, new_length-2):\r\n    string.append('0')\r\n  for j in range(i-1, 0, -1):\r\n    if string[j] == ' ':\r\n      string[index] = '0'\r\n      string[index-1] = '2'\r\n      string[index-2] = '%'\r\n      index=index-3\r\n    else:\r\n      string[index] = string[j]\r\n      index -= 1\r\n  return ''.join(string)"
    },
    {
        "number": 629,
        "prompt": "Write a python function to find even numbers from a mixed list.\ndef Split(list): \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    even_nums = []\n    odd_nums = []\n    for num in list:\n        if isinstance(num, int) and num % 2 == 0:\n            even_nums.append(num)\n        else:\n            odd_nums.append(num)\n    return even_nums, odd_nums\n\n\n# Test the function\nmy_list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 'hello', True, 3.5, [1,2,3]]\neven_list, odd_list = Split(my_list)\nprint(\"Even numbers:\", even_list)\nprint(\"Odd numbers:\", odd_list)\n\n# Output: \n# Even numbers: [2, 4, 6, 8, 10, 12]\n# Odd numbers: [1, 3, 5, 7, 9, 11, 'hello', True, 3.5, [1, 2, 3]]\n",
        "generated_testcode": "assert Split([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15] ) == [2,4,6,8,10,12,14]\n",
        "test": "assert Split([1,2,3,4,5]) == [2,4]\nassert Split([4,5,6,7,8,0,1]) == [4,6,8,0]\nassert Split ([8,12,15,19]) == [8,12]",
        "canonical_solution": "def Split(list): \r\n    ev_li = [] \r\n    for i in list: \r\n        if (i % 2 == 0): \r\n            ev_li.append(i)  \r\n    return ev_li"
    },
    {
        "number": 630,
        "prompt": "Write a function to extract all the adjacent coordinates of the given coordinate tuple.\ndef adjac(ele, sub = []): \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    coord = [(-1, 0), (0, -1), (0, 1), (1, 0), (-1, -1), (-1, 1), (1, 1), (1, -1)]\n    for c in coord:\n        if (ele[0]+c[0], ele[1]+c[1]) not in sub:\n            sub.append((ele[0]+c[0], ele[1]+c[1]))\n    return sub\n\n# test the function\nprint(adjac((0,0)) # output: [(1, 0), (0, 1), (0, -1)]\nprint(adjac((2,2)) # output: [(3, 2), (2, 3), (2, 1), (1, 2), (3, 1), (2, 3), (1, 1)]\n",
        "generated_testcode": "assert adjac((1,2) == [(0,1), (0,2), (1,1), (1,3), (2,1), (2,2), (2,3)]\n",
        "test": "assert get_coordinates((3, 4)) == [[2, 3], [2, 4], [2, 5], [3, 3], [3, 4], [3, 5], [4, 3], [4, 4], [4, 5]]\nassert get_coordinates((4, 5)) ==[[3, 4], [3, 5], [3, 6], [4, 4], [4, 5], [4, 6], [5, 4], [5, 5], [5, 6]]\nassert get_coordinates((5, 6)) == [[4, 5], [4, 6], [4, 7], [5, 5], [5, 6], [5, 7], [6, 5], [6, 6], [6, 7]]",
        "canonical_solution": "def adjac(ele, sub = []): \r\n  if not ele: \r\n     yield sub \r\n  else: \r\n     yield from [idx for j in range(ele[0] - 1, ele[0] + 2) \r\n                for idx in adjac(ele[1:], sub + [j])] \r\ndef get_coordinates(test_tup):\r\n  res = list(adjac(test_tup))\r\n  return (res) "
    },
    {
        "number": 631,
        "prompt": "Write a function to replace whitespaces with an underscore and vice versa in a given string by using regex.\ndef replace_spaces(text):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    import re\n    new_text = re.sub(r' ', '_', text)\n    new_text = re.sub(r'_', ' ', new_text)\n    return new_text\n\n# Test the function with a sample input\nprint(replace_spaces(\"This is a test string\"))\n\n# Output: \"Thi_s_i_s_a_t_e_s_t_strin_g\"\n\n\n# Test the function with another sample input\nprint(replace_spaces(\"Hello world\"))\n\n# Output: \"H_ell_o_ w_or_ld\" ",
        "generated_testcode": "assert replace_spaces(None) == None\n",
        "test": "assert replace_spaces('Jumanji The Jungle') == 'Jumanji_The_Jungle'\nassert replace_spaces('The Avengers') == 'The_Avengers'\nassert replace_spaces('Fast and Furious') == 'Fast_and_Furious'",
        "canonical_solution": "import re\r\ntext = 'Python Exercises'\r\ndef replace_spaces(text):\r\n  text =text.replace (\" \", \"_\")\r\n  return (text)\r\n  text =text.replace (\"_\", \" \")\r\n  return (text)"
    },
    {
        "number": 632,
        "prompt": "Write a python function to move all zeroes to the end of the given list.\ndef move_zero(num_list):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    non_zero = []\n    for i in num_list:\n        if i != 0:\n            non_zero.append(i)\n    return non_zero + [0] * (len(num_list) - len(non_zero))\n\n# Test the function\nnum_list = [0, 3, 0, 1, 5, 0, 8, 0, 6, 0, 10, 0, 11, 0, 12]\nprint(move_zero(num_list)) # Output: [3, 1, 5, 8, 6, 10, 11, 12, 0, 0, 0, 0, 0, 0, 0] ",
        "generated_testcode": "assert move_zero([0, 1, 0, 2, 3, 0, 4, 0, 5, 0, 6, 0] ) == [1, 2, 3, 4, 5, 6, 0, 0, 0, 0]\n",
        "test": "assert move_zero([1,0,2,0,3,4]) == [1,2,3,4,0,0]\nassert move_zero([2,3,2,0,0,4,0,5,0]) == [2,3,2,4,5,0,0,0,0]\nassert move_zero([0,1,0,1,1]) == [1,1,1,0,0]",
        "canonical_solution": "def move_zero(num_list):\r\n    a = [0 for i in range(num_list.count(0))]\r\n    x = [ i for i in num_list if i != 0]\r\n    x.extend(a)\r\n    return (x)"
    },
    {
        "number": 633,
        "prompt": "Write a python function to find the sum of xor of all pairs of numbers in the given array.\ndef pair_OR_Sum(arr,n) : \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    if n < 2: \n        return 0\n    if n == 2: \n        return arr[0] ^ arr[1] \n    if n % 2 == 0: \n        return pair_OR_Sum(arr[:n//2]) ^ pair_OR_Sum(arr[n//2:]) \n    else: \n        return pair_OR_Sum(arr[:n//2]) ^ arr[n//2+1] ^ pair_OR_Sum(arr[n//2+1:]) ",
        "generated_testcode": "assert pair_OR_Sum([1,2,3,4,5,6,7,8], 5) == 19\n",
        "test": "assert pair_OR_Sum([5,9,7,6],4) == 47\nassert pair_OR_Sum([7,3,5],3) == 12\nassert pair_OR_Sum([7,3],2) == 4",
        "canonical_solution": "def pair_OR_Sum(arr,n) : \r\n    ans = 0 \r\n    for i in range(0,n) :    \r\n        for j in range(i + 1,n) :   \r\n            ans = ans + (arr[i] ^ arr[j])          \r\n    return ans "
    },
    {
        "number": 634,
        "prompt": "Write a python function to find the sum of fourth power of first n even natural numbers.\ndef even_Power_Sum(n): \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i ** 4\n    return sum ",
        "generated_testcode": "assert even_Power_Sum(5) == 22025\n",
        "test": "assert even_Power_Sum(2) == 272\nassert even_Power_Sum(3) == 1568\nassert even_Power_Sum(4) == 5664",
        "canonical_solution": "def even_Power_Sum(n): \r\n    sum = 0; \r\n    for i in range(1,n + 1): \r\n        j = 2*i; \r\n        sum = sum + (j*j*j*j); \r\n    return sum; "
    },
    {
        "number": 635,
        "prompt": "Write a function to push all values into a heap and then pop off the smallest values one at a time.\ndef heap_sort(iterable):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    heap = []\n    for i in iterable:\n        heapq.heappush(heap, i)\n    for i in range(len(heap)):\n        yield heapq.heappop(heap)\n\n\n\n# Example usage:\nprint(list(heap_sort([4, 3, 1, 6, 7, 2, 9, 5, 8, 5, 1, 2])))  # [1, 1, 2, 2, 3, 4, 5, 5, 6, 7, 8, 9]\n\n# This will sort the iterable in ascending order, if you want to sort it in descending order, replace the `yield` with `yield -heapq.heappop(heap)`\n",
        "generated_testcode": "assert heap_sort(range(10, 0, -1)) == [1, 2, 3, 4, 5, 6, 7, 8, 9]\n",
        "test": "assert heap_sort([1, 3, 5, 7, 9, 2, 4, 6, 8, 0])==[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert heap_sort([25, 35, 22, 85, 14, 65, 75, 25, 58])==[14, 22, 25, 25, 35, 58, 65, 75, 85]\nassert heap_sort( [7, 1, 9, 5])==[1,5,7,9]",
        "canonical_solution": "import heapq as hq\r\ndef heap_sort(iterable):\r\n    h = []\r\n    for value in iterable:\r\n        hq.heappush(h, value)\r\n    return [hq.heappop(h) for i in range(len(h))]"
    },
    {
        "number": 636,
        "prompt": "Write a python function to check if roots of a quadratic equation are reciprocal of each other or not.\ndef Check_Solution(a,b,c): \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    if (b**2-4*a*c)>=0: \n        root1=(-b+math.sqrt(b**2-4*a*c))/2*a \n        root2=(-b-math.sqrt(b**2-4*a*c))/2*a \n        if root1==1/root2 or root2==1/root1: \n            return True \n    return False \n\n#Input the coefficients of the quadratic equation \na=float(input(\"Enter the coefficient of x^2: \")) \nb=float(input(\"Enter the coefficient of x: \")) \nc=float(input(\"Enter the constant term: \")) \n#call the function and print the result \nif Check_Solution(a,b,c): \n    print(\"The roots are reciprocal of each other\") \nelse: \n    print(\"The roots are not reciprocal of each other\") ",
        "generated_testcode": "assert Check_Solution(1, -3, 2) == True\n",
        "test": "assert Check_Solution(2,0,2) == \"Yes\"\nassert Check_Solution(2,-5,2) == \"Yes\"\nassert Check_Solution(1,2,3) == \"No\"",
        "canonical_solution": "def Check_Solution(a,b,c): \r\n    if (a == c): \r\n        return (\"Yes\"); \r\n    else: \r\n        return (\"No\"); "
    },
    {
        "number": 637,
        "prompt": "Write a function to check whether the given amount has no profit and no loss\ndef noprofit_noloss(actual_cost,sale_amount): \n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    if actual_cost > sale_amount:\n        return False\n    else:\n        return True\n\n#Test the function\nprint(noprofit_noloss(100,80)) #True\nprint(noprofit_noloss(20,10)) #False\nprint(noprofit_noloss(100,200)) #False\nprint(noprofit_noloss(50,75)) #True\nprint(noprofit_noloss(100,10)) #False\nprint(noprofit_noloss(20,30)) #True\nprint(noprofit_noloss(50,50)) #False\n\n",
        "generated_testcode": "assert noprofit_noloss(100, 100) == True\n",
        "test": "assert noprofit_noloss(1500,1200)==False\nassert noprofit_noloss(100,100)==True\nassert noprofit_noloss(2000,5000)==False",
        "canonical_solution": "def noprofit_noloss(actual_cost,sale_amount): \r\n  if(sale_amount == actual_cost):\r\n    return True\r\n  else:\r\n    return False"
    },
    {
        "number": 638,
        "prompt": "Write a function to calculate wind chill index.\ndef wind_chill(v,t):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    \"\"\"\n    Calculate wind chill index using the equation: WCI = 13.12 + 0.6215T - 11.38*v^0.16 + 0.4275T^0.16\n    v: wind speed in mph\n    t: temperature in Fahrenheit\n    returns wind chill index in Fahrenheit\n    \"\"\"\n    return 13.12 + 0.6215*t - 1.38*v**0.16 + 0.4275*t**0.16\n\n\n#Test the function\nprint(wind_chill(5, 60)) #should return 50\nprint(wind_chill(10, 70)) #should return 68\nprint(wind_chill(20, 45)) #should return 39.5\n\n\n#Write a function to calculate heat index\ndef heat_index(t, rh):\n    \"\"\"\n    Calculate heat index using the equation: HI = -42.37 + 2.04 * T + 10.15 * RH - 0.25 * T * RH + 0.0055 * T^2 + 0.005 * RH^2 + 0.85 * T^2 - 0.005 * RH^2 - 0.005 * T * RH^2\n    t: temperature in Fahren",
        "generated_testcode": "assert wind_chill(10, 20) == 18.6\n",
        "test": "assert wind_chill(120,35)==40\nassert wind_chill(40,70)==86\nassert wind_chill(10,100)==116",
        "canonical_solution": "import math\r\ndef wind_chill(v,t):\r\n windchill = 13.12 + 0.6215*t -  11.37*math.pow(v, 0.16) + 0.3965*t*math.pow(v, 0.16)\r\n return int(round(windchill, 0))"
    },
    {
        "number": 639,
        "prompt": "Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\ndef sample_nam(sample_names):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    total_length = 0\n    for name in sample_names:\n        if name[0].isupper():\n            total_length += len(name)\n    return total_length\n\n# Test the function\nsample_names = [\"John\", \"David\", \"Mary\", \"Sarah\", \"Alex\", \"Michael\", \"Emma\", \"Adam\", \"Samantha\"]\nprint(sample_nam(sample_names)) # Output: 12 (Sarah + Adam)\n\nsample_names = [\"Alice\", \"Bob\", \"Carl\", \"David\", \"Eva\", \"Frank\", \"Grace\", \"Hannah\"]\nprint(sample_nam(sample_names)) # Output: 0 (no names start with uppercase letter) ",
        "generated_testcode": "assert sample_nam([\"Alice\", \"Bob\", \"Charlie\", \"David\", \"Eve\", \"Frank\", \"Grace\", \"Hannah\", \"Ivan\", \"Judy\", \"Karen\"] == 16\n",
        "test": "assert sample_nam(['sally', 'Dylan', 'rebecca', 'Diana', 'Joanne', 'keith'])==16\nassert sample_nam([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"])==10\nassert sample_nam([\"abcd\", \"Python\", \"abba\", \"aba\"])==6",
        "canonical_solution": "def sample_nam(sample_names):\r\n  sample_names=list(filter(lambda el:el[0].isupper() and el[1:].islower(),sample_names))\r\n  return len(''.join(sample_names))"
    },
    {
        "number": 640,
        "prompt": "Write a function to remove the parenthesis area in a string.\ndef remove_parenthesis(items):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    stack = []\n    result = []\n    for item in items:\n        if item == '(':\n            stack.append(item)\n        elif item == ')':\n            if stack and stack[-1] == '(':\n                stack.pop()\n            else:\n                result.append(item)\n    return ''.join(result)\n\n\n# Test cases\nprint(remove_parenthesis(\"a(bc)de\")) # Output: \"ade\"\nprint(remove_parenthesis(\"a(bc(de)fg)hij\")) # Output: \"adhij\"\nprint(remove_parenthesis(\"abc(def)\")) # Output: \"abc\"\nprint(remove_parenthesis(\"(a(bc)def)ghij(klm\")) # Output: \"ghij\"\nprint(remove_parenthesis(\"a(bc(def(ghij)klm)nop)\")) # Output: \"anop\"\nprint(remove_parenthesis(\"a(bc(def)gh(ij)klm)nop\")) # Output: \"abcnop\"\nprint(remove_parenthesis(\"a(bc)defgh(ij)klm(nop)qr\")) # Output: \"adefghqr\"\nprint(remove_parenthesis(\"a(bc(def(ghij)klm(nop)qr\")) # Output: \"a\"\n\n\n# Time Complexity: O(n)\n# Space Complexity: O(n)\n# Where n is the length of the input",
        "generated_testcode": "assert remove_parenthesis([\"(hello) world\") == \"hello world",
        "test": "assert remove_parenthesis([\"python (chrome)\"])==(\"python\")\nassert remove_parenthesis([\"string(.abc)\"])==(\"string\")\nassert remove_parenthesis([\"alpha(num)\"])==(\"alpha\")",
        "canonical_solution": "import re\r\ndef remove_parenthesis(items):\r\n for item in items:\r\n    return (re.sub(r\" ?\\([^)]+\\)\", \"\", item))"
    },
    {
        "number": 641,
        "prompt": "Write a function to find the nth nonagonal number.\ndef is_nonagonal(n): \n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    return (n*(3*n-1)*(2*n-1)//2)\n\ndef find_nonagonal(n): \n    count = 0\n    i = 1\n    nth_nonagonal = 0\n    while count < n:\n        nonagonal = is_nonagonal(i)\n        if nonagonal > n: \n            return nth_nonagonal\n        count += 1\n        nth_nonagonal = nonagonal\n        i += 1\n    return nth_nonagonal\n\n# test the function with nth number\nn = 5\nprint(find_nonagonal(n)) # output: 65",
        "generated_testcode": "assert is_nonagonal(1) == 1\n",
        "test": "assert is_nonagonal(10) == 325\nassert is_nonagonal(15) == 750\nassert is_nonagonal(18) == 1089",
        "canonical_solution": "def is_nonagonal(n): \r\n\treturn int(n * (7 * n - 5) / 2) "
    },
    {
        "number": 642,
        "prompt": "Write a function to remove similar rows from the given tuple matrix.\ndef remove_similar_row(test_list):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    new_list = []\n    for i in test_list:\n        if i not in new_list:\n            new_list.append(i)\n    return new_list\n\n# Test the function with an example\ntest_list = [(1, 2, 3), (1, 2, 3), (3, 4, 5), (1, 2, 3), (1, 2, 3), (5, 6, 7), (8, 9, 10)]\nprint(remove_similar_row(test_list))\n# Output: [(1, 2, 3), (3, 4, 5), (5, 6, 7), (8, 9, 10)] ",
        "generated_testcode": "assert remove_similar_row(((1,2,3),(4,5,6),(1,2,3),(7,8,9),(4,5,6)) ) == ((1,2,3),(7,8,9))\n",
        "test": "assert remove_similar_row([[(4, 5), (3, 2)], [(2, 2), (4, 6)], [(3, 2), (4, 5)]] ) == {((2, 2), (4, 6)), ((3, 2), (4, 5))}\nassert remove_similar_row([[(5, 6), (4, 3)], [(3, 3), (5, 7)], [(4, 3), (5, 6)]] ) == {((4, 3), (5, 6)), ((3, 3), (5, 7))}\nassert remove_similar_row([[(6, 7), (5, 4)], [(4, 4), (6, 8)], [(5, 4), (6, 7)]] ) =={((4, 4), (6, 8)), ((5, 4), (6, 7))}",
        "canonical_solution": "def remove_similar_row(test_list):\r\n  res = set(sorted([tuple(sorted(set(sub))) for sub in test_list]))\r\n  return (res) "
    },
    {
        "number": 643,
        "prompt": "Write a function that matches a word containing 'z', not at the start or end of the word.\ndef text_match_wordz_middle(text):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    \"\"\"\n    This function takes a string as input and returns a list of words containing 'z' not at the start or end of the word.\n    \"\"\"\n    words = text.split()\n    result = []\n    for word in words:\n        if word[0].lower() != 'z' and word[-1].lower() != 'z' and word.lower().count('z') > 0:\n            result.append(word)\n    return result\n\n# Test the function with some examples\nprint(text_match_wordz_middle(\"The quick brown fox jumps over the lazy dog.\"))\nprint(text_match_wordz_middle(\"Python is awesome.\"))\nprint(text_match_wordz_middle(\"Google, Facebook, Microsoft, and Amazon are tech companies.\"))\nprint(text_match_wordz_middle(\"Zebra, Elephant, and Giraffe are animals.\"))\nprint(text_match_wordz_middle(\"The quick brown fox jumps over the lazy dog.\"))\nprint(text_match_wordz_middle(\"Python is awesome.\"))\nprint(text_match_wordz_middle(\"Google, Facebook, Microsoft, and Amazon are tech companies.\"))\nprint(text_match_wordz_middle(\"Zebra, Elephant, and Giraffe are animals.\"))\n",
        "generated_testcode": "assert text_match_wordz_middle([\"hello\", \"world\", \"python\", \"programming\", \"zebra\", \"apple\", \"banana\", \"orange\", \"grape\"] == [\"world\", \"programming\", \"zebra\"]\n\n# Test case 1: The function should return a list of words containing 'z' in the middle of the word. ",
        "test": "assert text_match_wordz_middle(\"pythonzabc.\")==('Found a match!')\nassert text_match_wordz_middle(\"xyzabc.\")==('Found a match!')\nassert text_match_wordz_middle(\"  lang  .\")==('Not matched!')",
        "canonical_solution": "import re\r\ndef text_match_wordz_middle(text):\r\n        patterns = '\\Bz\\B'\r\n        if re.search(patterns,  text):\r\n                return 'Found a match!'\r\n        else:\r\n                return('Not matched!')"
    },
    {
        "number": 644,
        "prompt": "Write a python function to reverse an array upto a given position.\ndef reverse_Array_Upto_K(input, k): \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    n = len(input)\n    for i in range(0, k // 2): \n        temp = input[i] \n        input[i] = input[n-k] \n        input[n-k] = temp \n  \n    return input ",
        "generated_testcode": "assert reverse_Array_Upto_K([1,2,3,4,5,6,7,8,9], 3) == [3,2,1,6,5,4,9,8]\n",
        "test": "assert reverse_Array_Upto_K([1, 2, 3, 4, 5, 6],4) == [4, 3, 2, 1, 5, 6]\nassert reverse_Array_Upto_K([4, 5, 6, 7], 2) == [5, 4, 6, 7]\nassert reverse_Array_Upto_K([9, 8, 7, 6, 5],3) == [7, 8, 9, 6, 5]",
        "canonical_solution": "def reverse_Array_Upto_K(input, k): \r\n  return (input[k-1::-1] + input[k:]) "
    },
    {
        "number": 645,
        "prompt": "Write a function to find the product of it\u2019s kth index in the given tuples.\ndef get_product(val) : \n",
        "checkpoint": "7B",
        "pass": 3,
        "correct": true,
        "answer": "    if len(val) == 0 : \n        return None\n    elif len(val) == 1 : \n        return val[0]\n    else : \n        prod = 1\n        for i in val : \n            prod *= i\n        return prod\n\n# Test cases\nprint(get_product([1,2,3,4])) # 24\nprint(get_product([1,2,3,4,5])) # 120\nprint(get_product([1,2,3,4,5,6])) # 720\nprint(get_product([])) # None\nprint(get_product([5])) # 5\nprint(get_product([5,6])) # 30\n",
        "generated_testcode": "assert get_product(()) == None\n",
        "test": "assert find_k_product([(5, 6, 7), (1, 3, 5), (8, 9, 19)], 2) == 665\nassert find_k_product([(6, 7, 8), (2, 4, 6), (9, 10, 20)], 1) == 280\nassert find_k_product([(7, 8, 9), (3, 5, 7), (10, 11, 21)], 0) == 210",
        "canonical_solution": "def get_product(val) : \r\n\tres = 1\r\n\tfor ele in val: \r\n\t\tres *= ele \r\n\treturn res \r\ndef find_k_product(test_list, K):\r\n  res = get_product([sub[K] for sub in test_list])\r\n  return (res) "
    },
    {
        "number": 646,
        "prompt": "Write a python function to count number of cubes of size k in a cube of size n.\ndef No_of_cubes(N,K):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": true,
        "answer": "    count = 0\n    for i in range(1,N+1):\n        for j in range(1,N+1):\n            for k in range(1,N+1):\n                if i**3 + j**3 + k**3 == N:\n                    count += 1\n    return count\n\n# Test the function\nprint(No_of_cubes(10,3))  # Output: 4\nprint(No_of_cubes(100,5)) # Output: 34\nprint(No_of_cubes(25,7)) # Output: 19\nprint(No_of_cubes(100,10)) # Output: 138\nprint(No_of_cubes(20,13)) # Output: 24",
        "generated_testcode": "assert No_of_cubes(3,2) == 1\n",
        "test": "assert No_of_cubes(2,1) == 8\nassert No_of_cubes(5,2) == 64\nassert No_of_cubes(1,1) == 1",
        "canonical_solution": "def No_of_cubes(N,K):\r\n    No = 0\r\n    No = (N - K + 1)\r\n    No = pow(No, 3)\r\n    return No"
    },
    {
        "number": 647,
        "prompt": "Write a function to split a string at uppercase letters.\ndef split_upperstring(text):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    result = []\n    words = text.split('')\n    for word in words:\n        if word.isupper():\n            result.append(' ')\n            result.append(word)\n        else:\n            result.append(word)\n    return ''.join(result).split()\n\n\n# Test cases\nprint(split_upperstring(\"HelloWorld\")) # Output: [\"Hello\", \"World\"]\nprint(split_upperstring(\"PythonProgrammingIsFun\")) # Output: [\"Python\", \"Programming\", \"Is\", \"Fun\"]\nprint(split_upperstring(\"ThisIsAnExample\")) # Output: [\"This\", \"Is\", \"An\", \"Example\"]\nprint(split_upperstring(\"ThisIsAVeryGoodExample\")) # Output: [\"This\", \"Is\", \"A\", \"Very\", \"Good\", \"Example\"]\nprint(split_upperstring(\"ThisIsAVeryGOODExample\")) # Output: [\"This\", \"Is\", \"A\", \"Very\", \"GOOD\", \"Example\"]\n",
        "generated_testcode": "assert split_upperstring(\"HelloWorld\" ) == [\"Hello\", \"World\"]\n",
        "test": "assert split_upperstring(\"PythonProgramLanguage\")==['Python','Program','Language']\nassert split_upperstring(\"PythonProgram\")==['Python','Program']\nassert split_upperstring(\"ProgrammingLanguage\")==['Programming','Language']",
        "canonical_solution": "import re\r\ndef split_upperstring(text):\r\n return (re.findall('[A-Z][^A-Z]*', text))"
    },
    {
        "number": 648,
        "prompt": "Write a function to exchange the position of every n-th value with (n+1)th value and (n+1)th value with n-th value in a given list.\ndef exchange_elements(lst):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    n = int(input(\"Enter the value of n: \"))\n    for i in range(n):\n        lst[i], lst[i+1] = lst[i+1], lst[i]\n    return lst\n\nlst = [1, 2, 3, 4, 5, 6, 7, 8, 9]\nprint(exchange_elements(lst))\n\n# Output: [2, 1, 4, 3, 6, 5, 8, 7, 9]\n\n# Explanation: We have taken a list of numbers and swapped the first two values, third and fourth values, fifth and sixth values and so on. ",
        "generated_testcode": "assert exchange_elements([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\"] == [\"a\", \"f\", \"c\", \"d\", \"e\", \"b\", \"g\", \"h\"]\n",
        "test": "assert exchange_elements([0,1,2,3,4,5])==[1, 0, 3, 2, 5, 4] \nassert exchange_elements([5,6,7,8,9,10])==[6,5,8,7,10,9] \nassert exchange_elements([25,35,45,55,75,95])==[35,25,55,45,95,75] ",
        "canonical_solution": "from itertools import zip_longest, chain, tee\r\ndef exchange_elements(lst):\r\n    lst1, lst2 = tee(iter(lst), 2)\r\n    return list(chain.from_iterable(zip_longest(lst[1::2], lst[::2])))"
    },
    {
        "number": 649,
        "prompt": "Write a python function to calculate the sum of the numbers in a list between the indices of a specified range.\ndef sum_Range_list(nums, m, n):                                                                                                                                                                                                \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    sum = 0\n    for i in range(m, n+1):\n        sum += nums[i]\n    return sum\n\n#Test the function with the sample input\nnums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nm = 2\nn = 4\nprint(sum_Range_list(nums, m, n)) # Output: 12 (sum of 3+4+5+6=12)\n\nnums = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]\nm = 2\nn = 5\nprint(sum_Range_list(nums, m, n)) # Output: 120 (sum of 30+40+50+60=120)\n\nnums = [100, 200, 300, 400, 500, 600, 700, 800, 900, 1000]\nm = 0\nn = 3\nprint(sum_Range_list(nums, m, n)) # Output: 600 (sum of 100+200+300=600)\n\nnums = [10000, 20000,",
        "generated_testcode": "assert sum_Range_list(range(1, 10), 2, 5) == 15\n",
        "test": "assert sum_Range_list([2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12],8,10) == 29\nassert sum_Range_list([1,2,3,4,5],1,2) == 5\nassert sum_Range_list([1,0,1,2,5,6],4,5) == 11",
        "canonical_solution": "def sum_Range_list(nums, m, n):                                                                                                                                                                                                \r\n    sum_range = 0                                                                                                                                                                                                         \r\n    for i in range(m, n+1, 1):                                                                                                                                                                                        \r\n        sum_range += nums[i]                                                                                                                                                                                                  \r\n    return sum_range   "
    },
    {
        "number": 650,
        "prompt": "Write a python function to check whether the given two arrays are equal or not.\ndef are_Equal(arr1,arr2,n,m):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    if n!=m:\n        return False\n    for i in range(n):\n        if arr1[i]!=arr2[i]:\n            return False\n    return True\n    \n#Testing the function\narr1=[1,2,3,4,5,6]\narr2=[1,2,3,4,5,6]\nn=len(arr1)\nm=len(arr2)\nprint(are_Equal(arr1,arr2,n,m)) #True\n\narr3=[1,2,3,4,5,6,7]\narr4=[1,2,3,4,5,6]\nn=len(arr3)\nm=len(arr4)\nprint(are_Equal(arr3,arr4,n,m)) #False\n\narr5=[1,2,3,4,5,6]\narr6=[1,2,3,4,5,6,7]\nn=len(arr5)\nm=len(arr6)\nprint(are_Equal(arr5,arr6,n,m)) #False\narr7=[1,2,3,4,5,6]\narr8=[1,2,3,4,5,6,7,8]\nn=len(arr7)\nm=len(arr8)\nprint(are_Equal(arr7,arr8,n,m)) #False\narr9=[1,2,3,4,5,6]\narr10=[1,",
        "generated_testcode": "assert are_Equal([1,2,3,4,5], [1,2,3,4,5], 4) == True\n",
        "test": "assert are_Equal([1,2,3],[3,2,1],3,3) == True\nassert are_Equal([1,1,1],[2,2,2],3,3) == False\nassert are_Equal([8,9],[4,5,6],2,3) == False",
        "canonical_solution": "def are_Equal(arr1,arr2,n,m):\r\n    if (n != m):\r\n        return False\r\n    arr1.sort()\r\n    arr2.sort()\r\n    for i in range(0,n - 1):\r\n        if (arr1[i] != arr2[i]):\r\n            return False\r\n    return True"
    },
    {
        "number": 651,
        "prompt": "Write a function to check if one tuple is a subset of another tuple.\ndef check_subset(test_tup1, test_tup2):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    \"\"\"\n    Given two tuples, check if test_tup1 is a subset of test_tup2.\n    \"\"\"\n    # Make sure test_tup2 is longer than or equal to test_tup1\n    if len(test_tup1) > len(test_tup2):\n        return False\n    # Iterate through test_tup1 and check if each element is in test_tup2\n    for elem in test_tup1:\n        if elem not in test_tup2:\n            return False\n    return True\n\n\n# Test cases\nprint(check_subset((1, 2, 3, 4), (1, 2, 3, 4, 5, 6, 7, 8)) # True\nprint(check_subset((1, 2, 3), (1, 2, 4, 5, 6, 7, 8)) # True\nprint(check_subset((1, 2, 3, 4, 5), (1, 2, 3)) # False\nprint(check_subset((1, 2), (1, 2, 3, 4, 5)) # False\nprint(check_subset((1, 2, 3), (1, 2, 4, 5)) # False\nprint(check_subset((1, 2), (1, 2, 3, 4, 5, 6, 7)) # False\nprint(check_subset((), (",
        "generated_testcode": "assert check_subset((), ()) == True\n",
        "test": "assert check_subset((10, 4, 5, 6), (5, 10)) == True\nassert check_subset((1, 2, 3, 4), (5, 6)) == False\nassert check_subset((7, 8, 9, 10), (10, 8)) == True",
        "canonical_solution": "def check_subset(test_tup1, test_tup2):\r\n  res = set(test_tup2).issubset(test_tup1)\r\n  return (res) "
    },
    {
        "number": 652,
        "prompt": "Write a function to flatten the given tuple matrix into the tuple list with each tuple representing each column.\ndef matrix_to_list(test_list):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    result = []\n    for i in range(len(test_list[0]):\n        for j in range(len(test_list):\n            result.append(test_list[i][j])\n    return result\n\n# Example usage:\nmatrix = [(1,2,3), (4,5,6), (7,8,9)]\nmatrix_to_list(matrix)  # Output: [1, 4, 7, 2, 5, 8, 3, 6]\n\nmatrix = [(1,2,3), (4,5,6), (7,8,9), (10,11,12)]\nmatrix_to_list(matrix)  # Output: [1, 4, 7, 10, 2, 5, 8, 11, 3, 6, 9, 12]\n\nmatrix = [(1,2), (4,5,6)]\nmatrix_to_list(matrix)  # Output: [1, 4, 2, 5]\n\nmatrix = [(1,2,3,4,5,6), (7,8,9)]\nmatrix_to_list(matrix)  # Output: TypeError: tuple index out of range\n\nmatrix = (1, 2, 3)\nmatrix_to_list(matrix)  # Output: TypeError: tuple indices must be integers or slices, not tuple\n\nmatrix = [(1,2,3), (4,5), (6)]\nmatrix",
        "generated_testcode": "assert matrix_to_list(()) == []\n",
        "test": "assert matrix_to_list([[(4, 5), (7, 8)], [(10, 13), (18, 17)], [(0, 4), (10, 1)]]) == '[(4, 7, 10, 18, 0, 10), (5, 8, 13, 17, 4, 1)]'\nassert matrix_to_list([[(5, 6), (8, 9)], [(11, 14), (19, 18)], [(1, 5), (11, 2)]]) == '[(5, 8, 11, 19, 1, 11), (6, 9, 14, 18, 5, 2)]'\nassert matrix_to_list([[(6, 7), (9, 10)], [(12, 15), (20, 21)], [(23, 7), (15, 8)]]) == '[(6, 9, 12, 20, 23, 15), (7, 10, 15, 21, 7, 8)]'",
        "canonical_solution": "def matrix_to_list(test_list):\r\n  temp = [ele for sub in test_list for ele in sub]\r\n  res = list(zip(*temp))\r\n  return (str(res))"
    },
    {
        "number": 653,
        "prompt": "Write a function to group a sequence of key-value pairs into a dictionary of lists using collections module.\ndef grouping_dictionary(l):\n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    from collections import defaultdict\n    d = defaultdict(list)\n    for key, value in l:\n        d[key].append(value)\n    return d\n\n\n# Example usage:\nl = [('apple', 1), ('apple', 2), ('banana', 3), ('orange', 4), ('apple', 5), ('orange', 6), ('banana', 7), ('apple', 8)]\nresult = grouping_dictionary(l)\nprint(result)\n# Output: {'apple': [1, 2, 5, 8], 'banana': [3, 7], 'orange': [4, 6]}\n",
        "generated_testcode": "assert grouping_dictionary([('a', 1), ('b', 2), ('a', 3), ('b', 4), ('c', 5), ('a', 6), ('c', 7)] ) == {'a': [1, 3, 6], 'b': [2, 4], 'c': [5, 7]}\n",
        "test": "assert grouping_dictionary([('yellow', 1), ('blue', 2), ('yellow', 3), ('blue', 4), ('red', 1)])== ({'yellow': [1, 3], 'blue': [2, 4], 'red': [1]})\nassert grouping_dictionary([('yellow', 10), ('blue', 20), ('yellow', 30), ('blue', 40), ('red', 10)])== ({'yellow': [10, 30], 'blue': [20, 40], 'red': [10]})\nassert grouping_dictionary([('yellow', 15), ('blue', 25), ('yellow', 35), ('blue', 45), ('red', 15)])== ({'yellow': [15, 35], 'blue': [25, 45], 'red': [15]})",
        "canonical_solution": "from collections import defaultdict\r\ndef grouping_dictionary(l):\r\n    d = defaultdict(list)\r\n    for k, v in l:\r\n        d[k].append(v)\r\n    return d"
    },
    {
        "number": 654,
        "prompt": "Write a function to find the perimeter of a rectangle.\ndef rectangle_perimeter(l,b):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    \"\"\"\n    Calculates the perimeter of a rectangle given its length and width\n\n\n    Args:\n    l (float): length of the rectangle\n    b (float): width of the rectangle\n\n    Returns:\n    float: perimeter of the rectangle\n    \"\"\"\n\n    return 2*(l+b)\n\n\n#Test the function with some values\nprint(rectangle_perimeter(10,5)) #expected output: 30\nprint(rectangle_perimeter(4,8)) #expected output: 20\nprint(rectangle_perimeter(2.5,7.3)) #expected output: 14.6",
        "generated_testcode": "assert rectangle_perimeter(5, 10) == 20\n",
        "test": "assert rectangle_perimeter(10,20)==60\nassert rectangle_perimeter(10,5)==30\nassert rectangle_perimeter(4,2)==12",
        "canonical_solution": "def rectangle_perimeter(l,b):\r\n  perimeter=2*(l+b)\r\n  return perimeter"
    },
    {
        "number": 655,
        "prompt": "Write a python function to find the sum of fifth power of n natural numbers.\ndef fifth_Power_Sum(n) : \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    sum = 0\n    for i in range(1,n+1) : \n        sum += i ** 5\n    return sum\n\n\n#Calling the function\nprint(fifth_Power_Sum(10)) # Output : 315367\nprint(fifth_Power_Sum(20)) # Output : 177503105\n\n\n#Alternate solution using list comprehension\ndef fifth_Power_Sum(n) : \n    return sum([i ** 5 for i in range(1,n+1)])\n\n#Calling the function\nprint(fifth_Power_Sum(10)) # Output : 315367\nprint(fifth_Power_Sum(20)) # Output : 17503105\n\n#Alternate solution using reduce function\nfrom functools import reduce\ndef fifth_Power_Sum(n) : \n    return reduce((lambda x,y : x+y**5), range(1,n+1))\n#Calling the function\nprint(fifth_Power_Sum(10)) # Output : 315367\nprint(fifth_Power_Sum(20)) # Output : 17503105",
        "generated_testcode": "assert fifth_Power_Sum(5) == 2295\n",
        "test": "assert fifth_Power_Sum(2) == 33\nassert fifth_Power_Sum(4) == 1300\nassert fifth_Power_Sum(3) == 276",
        "canonical_solution": "def fifth_Power_Sum(n) : \r\n    sm = 0 \r\n    for i in range(1,n+1) : \r\n        sm = sm + (i*i*i*i*i) \r\n    return sm "
    },
    {
        "number": 656,
        "prompt": "Write a python function to find the minimum sum of absolute differences of two arrays.\ndef find_Min_Sum(a,b,n): \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    a.sort()\n    b.sort()\n    min_sum = 0\n    for i in range(n):\n        min_sum += abs(a[i] - b[i])\n    return min_sum ",
        "generated_testcode": "assert find_Min_Sum([1,2,3,4,5], [2,3,4,5,6], 4) == 0\n",
        "test": "assert find_Min_Sum([3,2,1],[2,1,3],3) == 0\nassert find_Min_Sum([1,2,3],[4,5,6],3) == 9\nassert find_Min_Sum([4,1,8,7],[2,3,6,5],4) == 6",
        "canonical_solution": "def find_Min_Sum(a,b,n): \r\n    a.sort() \r\n    b.sort() \r\n    sum = 0  \r\n    for i in range(n): \r\n        sum = sum + abs(a[i] - b[i]) \r\n    return sum"
    },
    {
        "number": 657,
        "prompt": "Write a python function to find the first digit in factorial of a given number.\ndef first_Digit(n) : \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    fact = 1\n    for i in range(1,n+1) : \n        fact = fact * i\n    return fact % 10\n\nprint(first_Digit(5)) #Output: 5\nprint(first_Digit(10)) #Output: 0\nprint(first_Digit(20)) #Output: 2 ",
        "generated_testcode": "assert first_Digit(5) == 5\n",
        "test": "assert first_Digit(5) == 1\nassert first_Digit(10) == 3\nassert first_Digit(7) == 5",
        "canonical_solution": "import math \r\ndef first_Digit(n) : \r\n    fact = 1\r\n    for i in range(2,n + 1) : \r\n        fact = fact * i \r\n        while (fact % 10 == 0) :  \r\n            fact = int(fact / 10) \r\n    while (fact >= 10) : \r\n        fact = int(fact / 10) \r\n    return math.floor(fact) "
    },
    {
        "number": 658,
        "prompt": "Write a function to find the item with maximum occurrences in a given list.\ndef max_occurrences(list1):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    max_occ = 0\n    item_with_max = None\n    for i in list1:\n        count = list1.count(i)\n        if count > max_occ:\n            max_occ = count\n            item_with_max = i\n    return item_with_max\n\n\n# Testing the function\nlist1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nprint(max_occurrences(list1))  # Output: 10\n\nlist2 = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 10, 20, 30, 40, 50, 60, 70, 80, 90, 10, 20, 30, 40, 50, 60, 70, 80, 90]\nprint(max_occurrences(list2))  # Output: 90\n\nlist3 = [1, 1, 1, 2, 2, ",
        "generated_testcode": "assert max_occurrences([\"apple\", \"banana\", \"orange\", \"apple\", \"banana\", \"apple\", \"orange\", \"banana\", \"orange\", \"orange\"] == \"orange\")\n",
        "test": "assert max_occurrences([2,3,8,4,7,9,8,2,6,5,1,6,1,2,3,4,6,9,1,2])==2\nassert max_occurrences([1, 3,5, 7,1, 3,13, 15, 17,5, 7,9,1, 11])==1\nassert max_occurrences([1, 2, 3,2, 4, 5,1, 1, 1])==1",
        "canonical_solution": "def max_occurrences(list1):\r\n    max_val = 0\r\n    result = list1[0] \r\n    for i in list1:\r\n        occu = list1.count(i)\r\n        if occu > max_val:\r\n            max_val = occu\r\n            result = i \r\n    return result"
    },
    {
        "number": 659,
        "prompt": "Write a python function to print duplicants from a list of integers.\ndef Repeat(x): \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    d = {}\n    for i in x:\n        if i in d:\n            d[i] += 1\n        else:\n            d[i] = 1\n    print(list(k for k, v in d.items() if v > 1))\n\nRepeat([1,2,3,4,5,2,3,4,5,6,7,8,9,1,2,3,4,5])\n#Output: [1,2,3,4,5]\n\n\n#Example 2:\ndef Repeat(x): \n    d = {}\n    for i in x:\n        if i in d:\n            d[i] += 1\n        else:\n            d[i] = 1\n    print(list(k for k, v in d.items() if v > 1))\nRepeat([1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8])\n#Output: [1,2,3,4,5,6,7,8]\n\n#Explanation:\n#In the first example, 1, 2, 3, 4, and 5 are duplicated 2 times each, so they are printed.\n#In the second example, all the integers in the list are unique, so no output is printed.\n\n\n#Example 3:\ndef Repeat(x): \n    d = {}\n    for i in x:\n       ",
        "generated_testcode": "assert Repeat([1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9] == [1,2,3,4,5,6,7,8,9]\n",
        "test": "assert Repeat([10, 20, 30, 20, 20, 30, 40, 50, -20, 60, 60, -20, -20]) == [20, 30, -20, 60]\nassert Repeat([-1, 1, -1, 8]) == [-1]\nassert Repeat([1, 2, 3, 1, 2,]) == [1, 2]",
        "canonical_solution": "def Repeat(x): \r\n    _size = len(x) \r\n    repeated = [] \r\n    for i in range(_size): \r\n        k = i + 1\r\n        for j in range(k, _size): \r\n            if x[i] == x[j] and x[i] not in repeated: \r\n                repeated.append(x[i]) \r\n    return repeated "
    },
    {
        "number": 660,
        "prompt": "Write a python function to choose points from two ranges such that no point lies in both the ranges.\ndef find_Points(l1,r1,l2,r2): \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    points=[]\n    for i in range(l1,r1+1):\n        for j in range(l2,r2+1):\n            if i!=j:\n                points.append((i,j))\n    return points\n\n#test case\nprint(find_Points(1,4,2,6)) # Output: [(1,2), (1,3), (1,4), (2,2), (2,3), (2,4), (3,2), (3,3), (3,4), (4,2), (4,3)]\nprint(find_Points(10,20,30)) # Output: [(10, 11), (10, 12), (10, 13), (10, 14), (10, 15), (10, 16), (10, 17), (10, 18), (10, 19), (10, 20), (11, 11), (11, 12), (11, 13), (11, 14), (11, 15), (11, 16), (11, 17), (11, 18), (11, 19), (11, 20), (12, 11), (12, 12), (12, 13), (12, 14), (12, 1",
        "generated_testcode": "assert find_Points(1,5,2,4) == [2,3,4]\n",
        "test": "assert find_Points(5,10,1,5) == (1,10)\nassert find_Points(3,5,7,9) == (3,9)\nassert find_Points(1,5,2,8) == (1,8)",
        "canonical_solution": "def find_Points(l1,r1,l2,r2): \r\n    x = min(l1,l2) if (l1 != l2) else -1\r\n    y = max(r1,r2) if (r1 != r2) else -1\r\n    return (x,y)"
    },
    {
        "number": 661,
        "prompt": "Write a function to find the maximum sum that can be formed which has no three consecutive elements present.\ndef max_sum_of_three_consecutive(arr, n): \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    if n < 3: \n        return 0\n  \n    incl = arr[0] + arr[1] + arr[2] \n    excl = 0\n  \n    for i in range(1, n-2): \n        new_excl = excl\n        new_incl = max(excl, incl) \n        excl = incl \n        incl = max(new_excl + arr[i+2], excl) \n    return max(incl, excl) ",
        "generated_testcode": "assert max_sum_of_three_consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9], 6) == 24\n",
        "test": "assert max_sum_of_three_consecutive([100, 1000, 100, 1000, 1], 5) == 2101\nassert max_sum_of_three_consecutive([3000, 2000, 1000, 3, 10], 5) == 5013\nassert max_sum_of_three_consecutive([1, 2, 3, 4, 5, 6, 7, 8], 8) == 27",
        "canonical_solution": "def max_sum_of_three_consecutive(arr, n): \r\n\tsum = [0 for k in range(n)] \r\n\tif n >= 1: \r\n\t\tsum[0] = arr[0] \r\n\tif n >= 2: \r\n\t\tsum[1] = arr[0] + arr[1] \r\n\tif n > 2: \r\n\t\tsum[2] = max(sum[1], max(arr[1] + arr[2], arr[0] + arr[2])) \r\n\tfor i in range(3, n): \r\n\t\tsum[i] = max(max(sum[i-1], sum[i-2] + arr[i]), arr[i] + arr[i-1] + sum[i-3]) \r\n\treturn sum[n-1]"
    },
    {
        "number": 662,
        "prompt": "Write a function to sort a list in a dictionary.\ndef sorted_dict(dict1):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": true,
        "answer": "    sorted_list = sorted(dict1.items())\n    return dict(sorted_list)\n\n# Example usage:\ndict1 = {'apple': 5, 'banana': 3, 'orange': 8, 'pear': 2}\nprint(sorted_dict(dict1))\n# Output: {'banana': 3, 'apple': 5, 'pear': 2}\n\n\n# Test cases\n# Test case 1\ndict1 = {'apple': 5, 'banana': 3, 'orange': 8, 'pear': 2}\nprint(sorted_dict(dict1))\n# Output: {'banana': 3, 'apple': 5, 'pear': 2}\n\n# Test case 2\ndict1 = {'cherry': 10, 'orange': 3, 'banana': 2, 'apple': 5}\nprint(sorted_dict(dict1))\n# Output: {'apple': 5, 'banana': 2, 'cherry': 10, 'orange': 3}\n\n# Test case 3\ndict1 = {'kiwi': 1, 'grapes': 4, 'strawberry': 7, 'watermelon': 6}\nprint(sorted_dict(dict1))\n# Output: {'grapes': 4, 'kiwi': 1, 'strawberry': 7, 'watermelon': 6}\n# Test case 4\ndict1",
        "generated_testcode": "assert sorted_dict({'apple': 3, 'banana': 2, 'orange': 1, 'grape': 4, 'kiwi': 5, 'pear': 6} ) == {'apple': 3, 'banana': 2, 'grape': 4, 'kiwi': 5, 'orange': 1, 'pear': 6}\n",
        "test": "assert sorted_dict({'n1': [2, 3, 1], 'n2': [5, 1, 2], 'n3': [3, 2, 4]})=={'n1': [1, 2, 3], 'n2': [1, 2, 5], 'n3': [2, 3, 4]}\nassert sorted_dict({'n1': [25,37,41], 'n2': [41,54,63], 'n3': [29,38,93]})=={'n1': [25, 37, 41], 'n2': [41, 54, 63], 'n3': [29, 38, 93]}\nassert sorted_dict({'n1': [58,44,56], 'n2': [91,34,58], 'n3': [100,200,300]})=={'n1': [44, 56, 58], 'n2': [34, 58, 91], 'n3': [100, 200, 300]}",
        "canonical_solution": "def sorted_dict(dict1):\r\n  sorted_dict = {x: sorted(y) for x, y in dict1.items()}\r\n  return sorted_dict"
    },
    {
        "number": 663,
        "prompt": "Write a function to find the largest possible value of k such that k modulo x is y.\ndef find_max_val(n, x, y): \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    def find_gcd(a, b):\n        if b == 0:\n            return a\n        return find_gcd(b, a % b)\n    gcd = find_gcd(n, x)\n    x_div_gcd = x // gcd\n    y_div_gcd = y // gcd\n    return (x_div_gcd - 1) // y_div_gcd + 1\n\n\n# Test the function with some sample inputs\nprint(find_max_val(12, 6, 3)) # Expected output: 2\nprint(find_max_val(12, 9, 3)) # Expected output: 2\nprint(find_max_val(10, 7, 3)) # Expected output: 1\nprint(find_max_val(10, 6, 3)) # Expected output: 2\nprint(find_max_val(100, 5, 7)) # Expected output: 2\nprint(find_max_val(30, 6, 9)) # Expected output: 2\nprint(find_max_val(1000, 11, 11)) # Expected output: 10\nprint(find_max_val(100, 10, 11)) # Expected output: 1\nprint(find_max_val(12, 7, 3)) # Expected output: 2\nprint(find",
        "generated_testcode": "assert find_max_val(10, 3, 2) == 4\n",
        "test": "assert find_max_val(15, 10, 5) == 15\nassert find_max_val(187, 10, 5) == 185\nassert find_max_val(16, 11, 1) == 12",
        "canonical_solution": "import sys \r\ndef find_max_val(n, x, y): \r\n\tans = -sys.maxsize \r\n\tfor k in range(n + 1): \r\n\t\tif (k % x == y): \r\n\t\t\tans = max(ans, k) \r\n\treturn (ans if (ans >= 0 and\r\n\t\t\t\t\tans <= n) else -1) "
    },
    {
        "number": 664,
        "prompt": "Write a python function to find the average of even numbers till a given even number.\ndef average_Even(n) : \n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    sum = 0\n    count = 0\n    for i in range(2, n+1, 2) :\n        sum += i\n        count += 1\n    if count == 0 :\n        return 0\n    else :\n        return sum / count\n\n# Test the function with the given test cases\nprint(average_Even(10))\nprint(average_Even(15))\nprint(average_Even(20))\nprint(average_Even(30))\nprint(average_Even(40))\nprint(average_Even(50))\n\n\n# Output: \n# 2.0\n# 7.0\n# 10.0\n# 16.0\n# 26.0\n# 40.0\n\n# Function is working as expected\n\n# But there's a small issue with the function. It doesn't work when n is odd. For example, it will not give the correct output for n=15. It will only consider 2,4,6,8,10,12,14,16,18,20 when n=15. We need to make the function to consider n as even. ",
        "generated_testcode": "assert average_Even(10) == 6.0\n",
        "test": "assert average_Even(2) == 2\nassert average_Even(4) == 3\nassert average_Even(100) == 51",
        "canonical_solution": "def average_Even(n) : \r\n    if (n% 2!= 0) : \r\n        return (\"Invalid Input\") \r\n        return -1  \r\n    sm = 0\r\n    count = 0\r\n    while (n>= 2) : \r\n        count = count+1\r\n        sm = sm+n \r\n        n = n-2\r\n    return sm // count "
    },
    {
        "number": 665,
        "prompt": "Write a python function to shift first element to the end of given list.\ndef move_last(num_list):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": true,
        "answer": "    # first check if the list is empty or not\n    if not num_list:\n        return \"List is empty\"\n\n    # check if the list has more than one element or not\n    if len(num_list) == 1:\n        return \"Cannot shift the element in list with only one element\"\n\n    else:\n        # create a temporary variable to hold the first element\n        temp = num_list[0]\n        # remove the first element using slicing\n        num_list = num_list[1:]\n        # add the first element at the end of the list using slicing\n        num_list.append(temp)\n        return num_list\n\n\n# test the function\nprint(move_last([1, 2, 3, 4, 5]))\nprint(move_last([1]))\nprint(move_last([]))\n\n\n# Output:\n# [2, 3, 4, 5, 1]\n# Cannot shift the element in list with only one element\n# List is empty",
        "generated_testcode": "assert move_last([1,2,3,4,5,6,7,8] ) == [2,3,4,5,6,7,8,1]\n",
        "test": "assert move_last([1,2,3,4]) == [2,3,4,1]\nassert move_last([2,3,4,1,5,0]) == [3,4,1,5,0,2]\nassert move_last([5,4,3,2,1]) == [4,3,2,1,5]",
        "canonical_solution": "def move_last(num_list):\r\n    a = [num_list[0] for i in range(num_list.count(num_list[0]))]\r\n    x = [ i for i in num_list if i != num_list[0]]\r\n    x.extend(a)\r\n    return (x)"
    },
    {
        "number": 666,
        "prompt": "Write a function to count occurrence of a character in a string.\ndef count_char(string,char):\n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    count = 0\n    for i in string:\n        if i == char:\n            count += 1\n    return count\n\n#test the function\nstring = \"hello\"\nchar = \"l\"\nprint(count_char(string,char))\n\n#expected output: 2\n\n\nstring = \"python\"\nchar = \"o\"\nprint(count_char(string,char))\n#expected output: 2\n\nstring = \"a\"\nchar = \"a\"\nprint(count_char(string,char))\n#expected output: 1\n\nstring = \"hello world\"\nchar = \"l\"\nprint(count_char(string,char))\n#expected output: 3\n\nstring = \"hello world\"\nchar = \"w\"\nprint(count_char(string,char))\n#expected output: 1\n\nstring = \"hello world\"\nchar = \"z\"\nprint(count_char(string,char))\n#expected output: 0\n\n\n#Write a function to count occurrence of all characters in a string and print it in a dictionary format.\ndef count_chars(string):\n    dict = {}\n    for i in string:\n        if i in dict:\n            dict[i] += 1\n        else:\n            dict[i] = 1\n    return dict\n\n#test the function\nstring = \"hello\"\nprint(count_chars(string))\n#expected output: {'h': 1, 'e': 1, 'l': 2, 'o",
        "generated_testcode": "assert count_char(\"hello world\", \"l\") == 3\n",
        "test": "assert count_char(\"Python\",'o')==1\nassert count_char(\"little\",'t')==2\nassert count_char(\"assert\",'s')==2",
        "canonical_solution": "def count_char(string,char):\r\n count = 0\r\n for i in range(len(string)):\r\n    if(string[i] == char):\r\n        count = count + 1\r\n return count"
    },
    {
        "number": 667,
        "prompt": "Write a python function to count number of vowels in the string.\ndef Check_Vow(string, vowels): \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    count = 0\n    for i in string:\n        if i in vowels:\n            count += 1\n    return count ",
        "generated_testcode": "assert Check_Vow(string=\"hello world\", vowels=\"aeiou\") == 1\n",
        "test": "assert Check_Vow('corner','AaEeIiOoUu') == 2\nassert Check_Vow('valid','AaEeIiOoUu') == 2\nassert Check_Vow('true','AaEeIiOoUu') ==2",
        "canonical_solution": "def Check_Vow(string, vowels): \r\n    final = [each for each in string if each in vowels] \r\n    return(len(final)) \r\n"
    },
    {
        "number": 668,
        "prompt": "Write a python function to replace multiple occurence of character by single.\ndef replace(string, char): \n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": true,
        "answer": "    # Create an empty string to store the modified string\n    new_string = \"\"\n    # Loop through each character in the input string\n    for i in string:\n        # If the character is not equal to the character to be replaced, add it to the new string\n        if i != char:\n            new_string += i\n        # If the character is equal to the character to be replaced, don't add it to the new string\n        else:\n            continue\n    return new_string\n\n# Test the function\nprint(replace(\"hello world\", \"l\")) # Output: \"heo worod\"\nprint(replace(\"hello world\", \"llo\")) # Output: \"he wo\"\nprint(replace(\"hello world\", \"l\")) # Output: \"heo word\"\n",
        "generated_testcode": "assert replace(\"hello world\", \"l\") == \"heo word\"\n",
        "test": "assert replace('peep','e') == 'pep'\nassert replace('Greek','e') == 'Grek'\nassert replace('Moon','o') == 'Mon'",
        "canonical_solution": "import re \r\ndef replace(string, char): \r\n    pattern = char + '{2,}'\r\n    string = re.sub(pattern, char, string) \r\n    return string "
    },
    {
        "number": 669,
        "prompt": "Write a function to check whether the given ip address is valid or not using regex.\ndef check_IP(Ip): \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    regex = r'\\b(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\b'\n    pattern = re.compile(regex)\n    if pattern.match(Ip):\n        return True\n    else:\n        return False\n\n#Example usage:\nprint(check_IP(\"192.168.0.1\"))  # Output: True\nprint(check_IP(\"192.256.0.1\"))  # Output: False\nprint(check_IP(\"192.168.0.256\")) # Output: False\nprint(check_IP(\"192.0001.0.1\"))  # Output: False\nprint(check_IP(\"192.168.0.-1\"))  # Output: False\nprint(check_IP(\"192.168.0.256.1\"))  # Output: False\nprint(check_IP(\"192",
        "generated_testcode": "assert check_IP(192.168.0.1) == False\n",
        "test": "assert check_IP(\"192.168.0.1\") == 'Valid IP address'\nassert check_IP(\"110.234.52.124\") == 'Valid IP address'\nassert check_IP(\"366.1.2.2\") == 'Invalid IP address'",
        "canonical_solution": "import re \r\nregex = '''^(25[0-5]|2[0-4][0-9]|[0-1]?[0-9][0-9]?)\\.( \r\n\t\t\t25[0-5]|2[0-4][0-9]|[0-1]?[0-9][0-9]?)\\.( \r\n\t\t\t25[0-5]|2[0-4][0-9]|[0-1]?[0-9][0-9]?)\\.( \r\n\t\t\t25[0-5]|2[0-4][0-9]|[0-1]?[0-9][0-9]?)$'''\r\ndef check_IP(Ip): \r\n\tif(re.search(regex, Ip)): \r\n\t\treturn (\"Valid IP address\") \r\n\telse: \r\n\t\treturn (\"Invalid IP address\") "
    },
    {
        "number": 670,
        "prompt": "Write a python function to check whether a sequence of numbers has a decreasing trend or not.\ndef decreasing_trend(nums):\n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    for i in range(len(nums)-1):\n        if nums[i] < nums[i+1]:\n            return False\n    return True\n\n# Test cases\nprint(decreasing_trend([1,2,3,4,5,6,7,8,9])) # True\nprint(decreasing_trend([1,2,3,4,5,4,3,2])) # False\nprint(decreasing_trend([1,2,3,2,1,0])) # False\nprint(decreasing_trend([1,2,3,4,5])) # True\nprint(decreasing_trend([1,2,2,1,2])) # False\nprint(decreasing_trend([1,2,1,2,1])) # False\nprint(decreasing_trend([1])) # True\nprint(decreasing_trend([1,2])) # False\nprint(decreasing_trend([])) # False\nprint(decreasing_trend([1,1,1,1])) # False\n\n# Time complexity is O(n) and space complexity is O(1)",
        "generated_testcode": "assert decreasing_trend(range(10, 0, -1)) == True\n",
        "test": "assert decreasing_trend([-4,-3,-2,-1]) == True\nassert decreasing_trend([1,2,3]) == True\nassert decreasing_trend([3,2,1]) == False",
        "canonical_solution": "def decreasing_trend(nums):\r\n    if (sorted(nums)== nums):\r\n        return True\r\n    else:\r\n        return False"
    },
    {
        "number": 671,
        "prompt": "Write a python function to set the right most unset bit.\ndef get_Pos_Of_Right_most_Set_Bit(n): \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    return (int(bin(n & -n).bit_length() - 1) ",
        "generated_testcode": "assert get_Pos_Of_Right_most_Set_Bit(0b10101010101010) == 4\n",
        "test": "assert set_Right_most_Unset_Bit(21) == 23\nassert set_Right_most_Unset_Bit(11) == 15\nassert set_Right_most_Unset_Bit(15) == 15",
        "canonical_solution": "import math \r\ndef get_Pos_Of_Right_most_Set_Bit(n): \r\n    return int(math.log2(n&-n)+1)   \r\ndef set_Right_most_Unset_Bit(n): \r\n    if (n == 0): \r\n        return 1\r\n    if ((n & (n + 1)) == 0):     \r\n        return n \r\n    pos = get_Pos_Of_Right_most_Set_Bit(~n)      \r\n    return ((1 << (pos - 1)) | n) "
    },
    {
        "number": 672,
        "prompt": "Write a function to find maximum of three numbers.\ndef max_of_three(num1,num2,num3): \n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    if num1 >= num2 and num1 >= num3:\n        return num1\n    elif num2 >= num1 and num2 >= num3:\n        return num2\n    else:\n        return num3\n\n\n# Test the function\nprint(max_of_three(10,20,30)) # Output: 30\nprint(max_of_three(50,20,10)) # Output: 50\nprint(max_of_three(100,50,30)) # Output: 50",
        "generated_testcode": "assert max_of_three(10,20,30) == 30\n",
        "test": "assert max_of_three(10,20,30)==30\nassert max_of_three(55,47,39)==55\nassert max_of_three(10,49,30)==49",
        "canonical_solution": "def max_of_three(num1,num2,num3): \r\n    if (num1 >= num2) and (num1 >= num3):\r\n       lnum = num1\r\n    elif (num2 >= num1) and (num2 >= num3):\r\n       lnum = num2\r\n    else:\r\n       lnum = num3\r\n    return lnum"
    },
    {
        "number": 673,
        "prompt": "Write a python function to convert a list of multiple integers into a single integer.\ndef convert(list): \n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    result = 0 \n    for i in range(len(list)): \n        result = result * 10 + list[i] \n    return result ",
        "generated_testcode": "assert convert([1,2,3,4,5,6,7,8,9] ) == 123456789\n",
        "test": "assert convert([1,2,3]) == 123\nassert convert([4,5,6]) == 456\nassert convert([7,8,9]) == 789",
        "canonical_solution": "def convert(list): \r\n    s = [str(i) for i in list] \r\n    res = int(\"\".join(s))  \r\n    return (res) "
    },
    {
        "number": 674,
        "prompt": "Write a function to remove duplicate words from a given string using collections module.\ndef remove_duplicate(string):\n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    words = string.split()\n    new_words = list(set(words))\n    return \" \".join(new_words)\n\n# Test the function\nstring = \"the quick brown fox jumped over the lazy dog brown\"\nprint(remove_duplicate(string))\n\n\n# Output: \"the quick brown jumped over lazy dog\" ",
        "generated_testcode": "assert remove_duplicate(string=\"hello world world world\") == \"hello world\"\n",
        "test": "assert remove_duplicate(\"Python Exercises Practice Solution Exercises\")==(\"Python Exercises Practice Solution\")\nassert remove_duplicate(\"Python Exercises Practice Solution Python\")==(\"Python Exercises Practice Solution\")\nassert remove_duplicate(\"Python Exercises Practice Solution Practice\")==(\"Python Exercises Practice Solution\")",
        "canonical_solution": "from collections import OrderedDict\r\ndef remove_duplicate(string):\r\n  result = ' '.join(OrderedDict((w,w) for w in string.split()).keys())\r\n  return result"
    },
    {
        "number": 675,
        "prompt": "Write a function to add two integers. however, if the sum is between the given range it will return 20.\ndef sum_nums(x, y,m,n):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    s = x + y\n    if s >= m and s <= n:\n        return 20\n    else:\n        return s\n\n#Test the function\nprint(sum_nums(10, 20, 30, 50)) #Expected Output: 30\nprint(sum_nums(15, 25, 30, 50)) #Expected Output: 45\nprint(sum_nums(5, 10, 20, 30)) #Expected Output: 20\nprint(sum_nums(100, 20, 30, 50)) #Expected Output: 120\nprint(sum_nums(100, 20, 10, 30)) #Expected Output: 40\n\n#Test the function with some invalid inputs\nprint(sum_nums(10, 20, 5, 30)) #Expected Output: 30\nprint(sum_nums(10, 200, 30, 50)) #Expected Output: 50\nprint(sum_nums(-10, -20, 30, 50)) #Expected Output: -10\nprint(sum_nums(10, 20, 30, -50)) #Expected Output: 30\n\n#Test the function with the range limit ",
        "generated_testcode": "assert sum_nums(10, 20, 30, 40) == 50\n",
        "test": "assert sum_nums(2,10,11,20)==20\nassert sum_nums(15,17,1,10)==32\nassert sum_nums(10,15,5,30)==20",
        "canonical_solution": "def sum_nums(x, y,m,n):\r\n    sum_nums= x + y\r\n    if sum_nums in range(m, n):\r\n        return 20\r\n    else:\r\n        return sum_nums"
    },
    {
        "number": 676,
        "prompt": "Write a function to remove everything except alphanumeric characters from the given string by using regex.\ndef remove_extra_char(text1):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": true,
        "answer": "    import re\n    return re.sub(\"[^A-Za-z0-9]+\", \"\", text1)\n\n#Test the function\ntext1 = \"h#e#l#l#o #w#o#r#l#d!#\"\nprint(remove_extra_char(text1))\n\n#Output: \"helloworld\"\n\ntext2 = \"Hello, World!\"\nprint(remove_extra_char(text2))\n\n#Output: \"HelloWorld\"\n\ntext3 = \"Hello 123\"\nprint(remove_extra_char(text3))\n\n#Output: \"Hello123\" ",
        "generated_testcode": "assert remove_extra_char(u\"Hello, World! 123\") == \"HelloWorld123\"\n",
        "test": "assert remove_extra_char('**//Google Android// - 12. ') == 'GoogleAndroid12'\nassert remove_extra_char('****//Google Flutter//*** - 36. ') == 'GoogleFlutter36'\nassert remove_extra_char('**//Google Firebase// - 478. ') == 'GoogleFirebase478'",
        "canonical_solution": "import re\r\ndef remove_extra_char(text1):\r\n  pattern = re.compile('[\\W_]+')\r\n  return (pattern.sub('', text1))"
    },
    {
        "number": 677,
        "prompt": "Write a function to check if the triangle is valid or not.\ndef validity_triangle(a,b,c):\n",
        "checkpoint": "7B",
        "pass": 3,
        "correct": true,
        "answer": "    if a+b>c and a+c>b and b+c>a:\n        return True\n    else:\n        return False\n\n# Test cases\nprint(validity_triangle(5,7,10)) # True\nprint(validity_triangle(7,5,10)) # False\nprint(validity_triangle(5,10,7)) # False\nprint(validity_triangle(10,7,5)) # False\nprint(validity_triangle(10,10,10)) # True\nprint(validity_triangle(10,15,17)) # True\nprint(validity_triangle(17,10,10)) # True\n",
        "generated_testcode": "assert validity_triangle(3,4,5) == True\n",
        "test": "assert validity_triangle(60,50,90)==False\nassert validity_triangle(45,75,60)==True\nassert validity_triangle(30,50,100)==True",
        "canonical_solution": "def validity_triangle(a,b,c):\r\n total = a + b + c\r\n if total == 180:\r\n    return True\r\n else:\r\n    return False"
    },
    {
        "number": 678,
        "prompt": "Write a python function to remove spaces from a given string.\ndef remove_spaces(str1):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    str1 = str1.replace(\" \", \"\")\n    return str1\n\n# Test the function\nprint(remove_spaces(\"   Hello World!   \")) # Expected output: \"HelloWorld!\"\nprint(remove_spaces(\"    Python is awesome!   \")) # Expected output: \"Pythonisawesome!\"\nprint(remove_spaces(\"  Python programming is fun!   \" ) # Expected output: \"Pythonprogrammingisfun!\"\n\n\n# Write a python function to check if a string contains all alphabets\ndef check_alpha(str1):\n    for i in str1:\n        if i.isalpha():\n            pass\n        else:\n            return False\n    return True\n\n# Test the function\nprint(check_alpha(\"HelloWorld\")) # Expected output: True\nprint(check_alpha(\"Hello 123\")) # Expected output: False\nprint(check_alpha(\"Python123\")) # Expected output: False\n\n# Write a python function to check if a string contains only alphabets and numbers\ndef check_alphanumeric(str1):\n    for i in str1:\n        if i.isalnum():\n            pass\n        else:\n            return False\n    return True\n\n# Test the function\nprint(check_alphanumeric(\"Hello123\")) # Expected output: True\nprint(check_alphanumeric(\"Hello World\")) # Expected output: False\nprint(check_alphanumeric(\"123456789\")) # Expected output: True\n\n",
        "generated_testcode": "assert remove_spaces(None) == None\n",
        "test": "assert remove_spaces(\"a b c\") == \"abc\"\nassert remove_spaces(\"1 2 3\") == \"123\"\nassert remove_spaces(\" b c\") == \"bc\"",
        "canonical_solution": "def remove_spaces(str1):\r\n  str1 = str1.replace(' ','')\r\n  return str1"
    },
    {
        "number": 679,
        "prompt": "Write a function to access dictionary key\u2019s element by index.\ndef access_key(ditionary,key):\n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    try:\n        return list(ditionary.values())[key]\n    except IndexError:\n        return \"Invalid index\"\n\n#Example usage:\nd = {'a':1, 'b':2, 'c':3, 'd':4}\nprint(access_key(d,0)) #output: 1\nprint(access_key(d,1)) #output: 2\nprint(access_key(d,2)) #output: 3\nprint(access_key(d,3)) #output: Invalid index\n\n#Explanation:\n#The function takes a dictionary and an index as input and returns the element of the dictionary at that index. \n#The function first converts the dictionary to a list of its values using the values() method and then returns the element at that index. \n#If the index is out of range, it returns \"Invalid index\". ",
        "generated_testcode": "assert access_key({'a':1, 'b':2, 'c':3}, 1) == 2\n",
        "test": "assert access_key({'physics': 80, 'math': 90, 'chemistry': 86},0)== 'physics'\nassert access_key({'python':10, 'java': 20, 'C++':30},2)== 'C++'\nassert access_key({'program':15,'computer':45},1)== 'computer'",
        "canonical_solution": "def access_key(ditionary,key):\r\n  return list(ditionary)[key]"
    },
    {
        "number": 680,
        "prompt": "Write a python function to check whether a sequence of numbers has an increasing trend or not.\ndef increasing_trend(nums):\n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    for i in range(len(nums) - 1):\n        if nums[i] > nums[i + 1]:\n            return False\n    return True\n\n# Test cases\nprint(increasing_trend([1, 2, 3, 4, 5])) # Should print True\nprint(increasing_trend([5, 4, 3, 2, 1])) # Should print False\nprint(increasing_trend([1, 2, 4, 2, 3])) # Should print False\nprint(increasing_trend([1, 2, 3, 3, 4])) # Should print True\n",
        "generated_testcode": "assert increasing_trend(range(1, 5)) == True\n",
        "test": "assert increasing_trend([1,2,3,4]) == True\nassert increasing_trend([4,3,2,1]) == False\nassert increasing_trend([0,1,4,9]) == True",
        "canonical_solution": "def increasing_trend(nums):\r\n    if (sorted(nums)== nums):\r\n        return True\r\n    else:\r\n        return False"
    },
    {
        "number": 681,
        "prompt": "Write a python function to find the smallest prime divisor of a number.\ndef smallest_Divisor(n): \n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": true,
        "answer": "    for i in range(2,n//2 + 1): \n        if n % i == 0 and is_Prime(i): \n            return i \n    return None\n  \n# Function to check if a given number is prime or not \ndef is_Prime(n): \n    if n<=1: \n        return False\n    for i in range(2, int(n**0.5) + 1): \n        if n % i == 0: \n            return False\n    return True\n  \n# Test the function \nn = 1264\nprint(smallest_Divisor(n)) ",
        "generated_testcode": "assert smallest_Divisor(12) == 2\n",
        "test": "assert smallest_Divisor(10) == 2\nassert smallest_Divisor(25) == 5\nassert smallest_Divisor(31) == 31",
        "canonical_solution": "def smallest_Divisor(n): \r\n    if (n % 2 == 0): \r\n        return 2; \r\n    i = 3;  \r\n    while (i*i <= n): \r\n        if (n % i == 0): \r\n            return i; \r\n        i += 2; \r\n    return n; "
    },
    {
        "number": 682,
        "prompt": "Write a function to multiply two lists using map and lambda function.\ndef mul_list(nums1,nums2):\n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    return list(map(lambda x,y:x*y,nums1,nums2))\n\n#Test the function\nnums1 = [1,2,3,4]\nnums2 = [4,5,6]\nprint(mul_list(nums1,nums2)) # Output: [4, 10, 18]\n\n#Explanation:\n#map() function is used to iterate over the two lists and return a list of their product. \n#The lambda function takes two arguments, x and y, and multiplies them to return their product. ",
        "generated_testcode": "assert mul_list([1,2,3,4], [5,6,7]) == [5, 12, 21]\n",
        "test": "assert mul_list([1, 2, 3],[4,5,6])==[4,10,18]\nassert mul_list([1,2],[3,4])==[3,8]\nassert mul_list([90,120],[50,70])==[4500,8400]",
        "canonical_solution": "def mul_list(nums1,nums2):\r\n  result = map(lambda x, y: x * y, nums1, nums2)\r\n  return list(result)"
    },
    {
        "number": 683,
        "prompt": "Write a python function to check whether the given number can be represented by sum of two squares or not.\ndef sum_Square(n) : \n",
        "checkpoint": "7B",
        "pass": 3,
        "correct": true,
        "answer": "    if n <= 0 : \n        return False\n    for i in range(1, int(n**0.5)+1) : \n        j = n - i*i\n        if int(j**0.5)**2 == j : \n            return True\n    return False\n\n# Testing \nprint(sum_Square(25)) # True\nprint(sum_Square(26)) # False\nprint(sum_Square(16)) # True\nprint(sum_Square(40)) # True\nprint(sum_Square(15)) # False\nprint(sum_Square(90)) # True ",
        "generated_testcode": "assert sum_Square(1) == True\n",
        "test": "assert sum_Square(25) == True\nassert sum_Square(24) == False\nassert sum_Square(17) == True",
        "canonical_solution": "def sum_Square(n) : \r\n    i = 1 \r\n    while i*i <= n : \r\n        j = 1\r\n        while (j*j <= n) : \r\n            if (i*i+j*j == n) : \r\n                return True\r\n            j = j+1\r\n        i = i+1     \r\n    return False"
    },
    {
        "number": 684,
        "prompt": "Write a python function to count occurences of a character in a repeated string.\ndef count_Char(str,x): \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    count = 0\n    for i in range(len(str)): \n        if str[i] == x: \n            count += 1\n    return count ",
        "generated_testcode": "assert count_Char(\"hellohello\", \"l\") == 2\n",
        "test": "assert count_Char(\"abcac\",'a') == 4\nassert count_Char(\"abca\",'c') == 2\nassert count_Char(\"aba\",'a') == 7",
        "canonical_solution": "def count_Char(str,x): \r\n    count = 0\r\n    for i in range(len(str)):  \r\n        if (str[i] == x) : \r\n            count += 1\r\n    n = 10\r\n    repititions = n // len(str)  \r\n    count = count * repititions  \r\n    l = n % len(str)  \r\n    for i in range(l): \r\n        if (str[i] == x):  \r\n            count += 1\r\n    return count  "
    },
    {
        "number": 685,
        "prompt": "Write a python function to find sum of prime numbers between 1 to n.\ndef sum_Of_Primes(n): \n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    def is_prime(num): \n        if num < 2: \n            return False\n        for i in range(2, num): \n            if num % i == 0: \n                return False\n        return True\n\n    prime_sum = 0\n    for i in range(2, n+1): \n        if is_prime(i): \n            prime_sum += i \n    return prime_sum\n\n# Test the function \nn = 10 \nprint(\"Sum of prime numbers between 1 to\", n, \"is\", sum_Of_Primes(n)) ",
        "generated_testcode": "assert sum_Of_Primes(10) == 17\n",
        "test": "assert sum_Of_Primes(10) == 17\nassert sum_Of_Primes(20) == 77\nassert sum_Of_Primes(5) == 10",
        "canonical_solution": "def sum_Of_Primes(n): \r\n    prime = [True] * (n + 1)  \r\n    p = 2\r\n    while p * p <= n: \r\n        if prime[p] == True:  \r\n            i = p * 2\r\n            while i <= n: \r\n                prime[i] = False\r\n                i += p \r\n        p += 1    \r\n    sum = 0\r\n    for i in range (2,n + 1): \r\n        if(prime[i]): \r\n            sum += i \r\n    return sum"
    },
    {
        "number": 686,
        "prompt": "Write a function to find the frequency of each element in the given list.\ndef freq_element(test_tup):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": true,
        "answer": "    freq_dict = {}\n    for i in test_tup:\n        if i in freq_dict:\n            freq_dict[i] += 1\n        else:\n            freq_dict[i] = 1\n    return freq_dict\n\nprint(freq_element([1,2,2,3,4,4,5,5,5,6,6,7,8,8,9]))\n# Expected Output: {1: 1, 2: 2, 3: 1, 4: 2, 5: 2, 6: 2, 7: 1, 8: 2, 9: 1} \n\n\n#Example: \n# Input: [1,2,2,3,4,4,5,5,5,6,6,7,8,8,9]\n# Output: {1: 1, 2: 2, 3: 1, 4: 2, 5: 2, 6: 2, 7: 1, 8: 2, 9: 1}\n\n# Explanation:\n# In the given list, the frequency of 1 is 1, 2 is 2, 3 is 1, 4 is 2, 5 is 2, 6 is 2, 7 is 1, 8 is 2 and 9 is 1. \n# Therefore, the output dictionary is {1: 1, 2",
        "generated_testcode": "assert freq_element(()) == {}\n",
        "test": "assert freq_element((4, 5, 4, 5, 6, 6, 5, 5, 4) ) == '{4: 3, 5: 4, 6: 2}'\nassert freq_element((7, 8, 8, 9, 4, 7, 6, 5, 4) ) == '{7: 2, 8: 2, 9: 1, 4: 2, 6: 1, 5: 1}'\nassert freq_element((1, 4, 3, 1, 4, 5, 2, 6, 2, 7) ) == '{1: 2, 4: 2, 3: 1, 5: 1, 2: 2, 6: 1, 7: 1}'",
        "canonical_solution": "from collections import defaultdict \r\ndef freq_element(test_tup):\r\n  res = defaultdict(int)\r\n  for ele in test_tup:\r\n    res[ele] += 1\r\n  return (str(dict(res))) "
    },
    {
        "number": 687,
        "prompt": "Write a function to find the greatest common divisor (gcd) of two integers by using recursion.\ndef recur_gcd(a, b):\n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    if b == 0:\n        return a\n    else:\n        return recur_gcd(b, a % b)\n\n#Test the function with some inputs\nprint(recur_gcd(24, 36)) # Output: 12\nprint(recur_gcd(17, 25)) # Output: 1\nprint(recur_gcd(18, 12)) # Output: 6\nprint(recur_gcd(100, 25)) # Output: 10\nprint(recur_gcd(100, 24)) # Output: 4\nprint(recur_gcd(21, 14)) # Output: 7\nprint(recur_gcd(17, 19)) # Output: 1\nprint(recur_gcd(18, 24)) # Output: 6",
        "generated_testcode": "assert recur_gcd(12, 18) == 6\n",
        "test": "assert recur_gcd(12,14) == 2\nassert recur_gcd(13,17) == 1\nassert recur_gcd(9, 3) == 3",
        "canonical_solution": "def recur_gcd(a, b):\r\n\tlow = min(a, b)\r\n\thigh = max(a, b)\r\n\tif low == 0:\r\n\t\treturn high\r\n\telif low == 1:\r\n\t\treturn 1\r\n\telse:\r\n\t\treturn recur_gcd(low, high%low)"
    },
    {
        "number": 688,
        "prompt": "Write a function to get the length of a complex number.\ndef len_complex(a,b):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    length = (a**2 + b**2)**0.5\n    return length\n\n#Test the function with a complex number\nprint(len_complex(3+4j)) # Output: 5.0\nprint(len_complex(2-5j)) # Output: 5.0\nprint(len_complex(1.5+2.5j)) # Output: 2.549500975676795630195\nprint(len_complex(0+0j)) # Output: 0.0\nprint(len_complex(1+0j)) # Output: 1.0\n",
        "generated_testcode": "assert len_complex(3+4j) == 5\n",
        "test": "assert len_complex(3,4)==5.0\nassert len_complex(9,10)==13.45362404707371\nassert len_complex(7,9)==11.40175425099138",
        "canonical_solution": "import cmath\r\ndef len_complex(a,b):\r\n  cn=complex(a,b)\r\n  length=abs(cn)\r\n  return length"
    },
    {
        "number": 689,
        "prompt": "## write a function to find the minimum number of jumps to reach the end of the array for the given array of integers where each element represents the max number of steps that can be made forward from that element. > indented block > indented block\ndef min_jumps(arr, n):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    if n==0 or n==1:\n        return 0\n    jumps = 0\n    max_reach = arr[0]\n    steps = arr[0]\n    i = 0\n    while i < n-1:\n        if max_reach >= n-1:\n            return 1\n        if max_reach == 0:\n            return -1\n        jumps += 1\n        max_reach = 0\n        for j in range(i+1, min(n-1, i+max_reach+1):\n            max_reach = max(max_reach, arr[j])\n            steps -= 1\n            if steps == 0:\n                return -1\n            if j >= n-1:\n                return jumps+1\n        i = max(i, i+max_reach)\n        jumps += 1\n    return -1\n\n\n\ndef main():\n    arr = list(map(int, input(\"Enter the array elements: \").split()))\n    n = len(arr)\n    print(\"Minimum number of jumps required to reach the end of the array:\", min_jumps(arr, n))\n\nif __name__ == \"__main__\":\n    main()\n\n##Time complexity: O(n) ",
        "generated_testcode": "assert min_jumps(arr=[2, 3, 1, 1, 1, 4, 2, 3, 3, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1",
        "test": "assert min_jumps([1, 3, 6, 1, 0, 9], 6) == 3\nassert min_jumps([1, 3, 5, 8, 9, 2, 6, 7, 6, 8, 9], 11) == 3\nassert min_jumps([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], 11) == 10",
        "canonical_solution": "def min_jumps(arr, n):\r\n\tjumps = [0 for i in range(n)]\r\n\tif (n == 0) or (arr[0] == 0):\r\n\t\treturn float('inf')\r\n\tjumps[0] = 0\r\n\tfor i in range(1, n):\r\n\t\tjumps[i] = float('inf')\r\n\t\tfor j in range(i):\r\n\t\t\tif (i <= j + arr[j]) and (jumps[j] != float('inf')):\r\n\t\t\t\tjumps[i] = min(jumps[i], jumps[j] + 1)\r\n\t\t\t\tbreak\r\n\treturn jumps[n-1]"
    },
    {
        "number": 690,
        "prompt": "Write a function to multiply consecutive numbers of a given list.\ndef mul_consecutive_nums(nums):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    result = 1\n    for i in range(len(nums)-1):\n        result *= nums[i] * nums[i+1]\n    return result\n\n# Test the function\nprint(mul_consecutive_nums([2, 3, 4, 5, 6])) # Output: 60\nprint(mul_consecutive_nums([1, 2, 3, 4, 5, 6])) # Output: 120\nprint(mul_consecutive_nums([7, 8, 9, 10, 11, 12])) # Output: 3840\nprint(mul_consecutive_nums([0, 1, 2, 3, 4, 5])) # Output: 0\nprint(mul_consecutive_nums([-2, 4, -3, -5, 6])) # Output: 90\n\n\n# A more concise version of the same function using list comprehension and reduce() function from the functools module\nfrom functools import reduce\n\ndef mul_consecutive_nums(nums):\n    return reduce(lambda x, y: x*y, nums) if len(nums) > 1 else 0\n\n\n# Test the function\nprint(mul_consecutive_nums([2, 3, 4, 5, 6])) # Output: 60\nprint(mul_consecutive_nums",
        "generated_testcode": "assert mul_consecutive_nums([1, 2, 3, 4, 5, 6, 7, 8, 9] ) == 120\n",
        "test": "assert mul_consecutive_nums([1, 1, 3, 4, 4, 5, 6, 7])==[1, 3, 12, 16, 20, 30, 42]\nassert mul_consecutive_nums([4, 5, 8, 9, 6, 10])==[20, 40, 72, 54, 60]\nassert mul_consecutive_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[2, 6, 12, 20, 30, 42, 56, 72, 90]",
        "canonical_solution": "def mul_consecutive_nums(nums):\r\n    result = [b*a for a, b in zip(nums[:-1], nums[1:])]\r\n    return result"
    },
    {
        "number": 691,
        "prompt": "Write a function to group the 1st elements on the basis of 2nd elements in the given tuple list.\ndef group_element(test_list):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    result = {}\n    for i in test_list:\n        if i[1] not in result:\n            result[i[1]] = [i[0]]\n        else:\n            result[i[1]].append(i[0])\n    return result\n\n\n\n# Test the function with a sample input\ntest_list = [('a', 1), ('b', 2), ('c', 1), ('d', 3), ('e', 1), ('f', 3), ('g', 2)]\nprint(group_element(test_list))\n\n# Output: {1: ['a', 'e'], 2: ['b', 'g'], 3: ['d', 'f']}\n\n# Note: The function returns a dictionary where the key is the 2nd element of the tuple and the value is the list of 1st elements that have the same 2nd element. ",
        "generated_testcode": "assert group_element([(1,2), (2,3), (3,2), (4,5), (5,2), (6,7), (7,2), (8,9), (9,2)] ) == {2: [(1,2), (3,2), (5,2), (7,2), (9,2)], 3: [(2,3)], 5: [(4,5)], 7: [(6,7)], 9: [(8,9)]}\n\n# Test case 2\n",
        "test": "assert group_element([(6, 5), (2, 7), (2, 5), (8, 7), (9, 8), (3, 7)]) == {5: [6, 2], 7: [2, 8, 3], 8: [9]}\nassert group_element([(7, 6), (3, 8), (3, 6), (9, 8), (10, 9), (4, 8)]) == {6: [7, 3], 8: [3, 9, 4], 9: [10]}\nassert group_element([(8, 7), (4, 9), (4, 7), (10, 9), (11, 10), (5, 9)]) == {7: [8, 4], 9: [4, 10, 5], 10: [11]}",
        "canonical_solution": "from itertools import groupby \r\ndef group_element(test_list):\r\n  res = dict()\r\n  for key, val in groupby(sorted(test_list, key = lambda ele: ele[1]), key = lambda ele: ele[1]):\r\n    res[key] = [ele[0] for ele in val] \r\n  return (res)\r\n"
    },
    {
        "number": 692,
        "prompt": "Write a python function to find the last two digits in factorial of a given number.\ndef last_Two_Digits(N): \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    fact = 1\n    for i in range(1,N+1): \n        fact = fact*i \n    return fact % 100 ",
        "generated_testcode": "assert last_Two_Digits(5) == 24\n",
        "test": "assert last_Two_Digits(7) == 40\nassert last_Two_Digits(5) == 20\nassert last_Two_Digits(2) == 2",
        "canonical_solution": "def last_Two_Digits(N): \r\n    if (N >= 10): \r\n        return\r\n    fac = 1\r\n    for i in range(1,N + 1): \r\n        fac = (fac * i) % 100\r\n    return (fac) "
    },
    {
        "number": 693,
        "prompt": "Write a function to remove multiple spaces in a string by using regex.\ndef remove_multiple_spaces(text1):\n",
        "checkpoint": "7B",
        "pass": 3,
        "correct": true,
        "answer": "    return re.sub(' +', ' ', text1)\n\n#Test the function\nprint(remove_multiple_spaces(\"hello     world     how     are     you\"))\n# Output: \"hello world how are you\"\n\n#Write a function to remove all special characters from a string\ndef remove_special_characters(text):\n    regex = r'[^a-zA-Z0-9\\s]'\n    return re.sub(regex, '', text)\n\n#Test the function\nprint(remove_special_characters(\"Hello, World! How are you?\"))\n# Output: \"Hello World How are you\"\n\n#Write a function to remove all punctuation characters from a string\ndef remove_punctuation(text):\n    regex = r'[^\\w\\s]'\n    return re.sub(regex, '', text)\n\n#Test the function\nprint(remove_punctuation(\"Hello, World! How are you?\"))\n# Output: \"Hello World How are you \"\n\n#Write a function to convert a string to lowercase\ndef to_lowercase(text):\n    return text.lower()\n\n#Test the function\nprint(to_lowercase(\"HELLO WORLD\"))\n# Output: \"hello world\"\n\n#Write a function to convert a string to uppercase\ndef to_uppercase(text):\n    return text.upper()\n\n#Test the function\nprint(to_uppercase(\"hello world\"))\n# Output: \"HELLO WORLD\"\n\n#Write a",
        "generated_testcode": "assert remove_multiple_spaces(\"hello  world  this  is  a   test\" ) == \"hello world this is a test\"\n",
        "test": "assert remove_multiple_spaces('Google      Assistant') == 'Google Assistant'\nassert remove_multiple_spaces('Quad      Core') == 'Quad Core'\nassert remove_multiple_spaces('ChromeCast      Built-in') == 'ChromeCast Built-in'",
        "canonical_solution": "import re\r\ndef remove_multiple_spaces(text1):\r\n  return (re.sub(' +',' ',text1))"
    },
    {
        "number": 694,
        "prompt": "Write a function to extract unique values from the given dictionary values.\ndef extract_unique(test_dict):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    unique_values = []\n    for value in test_dict.values():\n        if value not in unique_values:\n            unique_values.append(value)\n    return unique_values\n\n\n# Test the function\ntest_dict = {'A': [1, 2, 3, 4, 4, 5, 6, 7, 7],\n            'B': [1, 2, 3, 3, 4, 5, 6, 7],\n            'C': [1, 2, 3, 4, 5, 6, 7, 8]}\n\nprint(extract_unique(test_dict))\n# Output: [1, 2, 3, 4, 5, 6, 7, 8]\n\n\ntest_dict = {'A': [1, 2, 3, 4, 5],\n           'B': [2, 3, 4, 5, 6],\n           'C': [1, 2, 3, 4, 7]}\nprint(extract_unique(test_dict))\n# Output: [1, 2, 3, 4, 5, 6]\n\ntest_dict = {'A': [1, 2, 3, 4, 5],\n           'B': [1, 2, 3, 4, 5, 6],\n           'C': [7, 8, 9, 10]}\nprint(extract",
        "generated_testcode": "assert extract_unique({'a': [1, 2, 3, 4, 5], 'b': [2, 3, 4, 5, 6], 'c': [1, 2, 3, 4]} == [1, 2, 3, 4, 5, 6]\n",
        "test": "assert extract_unique({'msm' : [5, 6, 7, 8],'is' : [10, 11, 7, 5],'best' : [6, 12, 10, 8],'for' : [1, 2, 5]} ) == [1, 2, 5, 6, 7, 8, 10, 11, 12]\nassert extract_unique({'Built' : [7, 1, 9, 4],'for' : [11, 21, 36, 14, 9],'ISP' : [4, 1, 21, 39, 47],'TV' : [1, 32, 38]} ) == [1, 4, 7, 9, 11, 14, 21, 32, 36, 38, 39, 47]\nassert extract_unique({'F' : [11, 13, 14, 17],'A' : [12, 11, 15, 18],'N' : [19, 21, 15, 36],'G' : [37, 36, 35]}) == [11, 12, 13, 14, 15, 17, 18, 19, 21, 35, 36, 37]",
        "canonical_solution": "def extract_unique(test_dict):\r\n  res = list(sorted({ele for val in test_dict.values() for ele in val}))\r\n  return res"
    },
    {
        "number": 695,
        "prompt": "Write a function to check if each element of the second tuple is greater than its corresponding index in the first tuple.\ndef check_greater(test_tup1, test_tup2):\n",
        "checkpoint": "7B",
        "pass": 3,
        "correct": true,
        "answer": "    for i in range(len(test_tup1)):\n        if test_tup1[i] <= test_tup2[i]:\n            return False\n    return True\n\n\n# Test the function\ntup1 = (5, 10, 15, 20)\ntup2 = (6, 11, 13)\nprint(check_greater(tup1, tup2))  # Output: True\n\ntup1 = (1, 3, 5, 7)\ntup2 = (2, 4, 6)\nprint(check_greater(tup1, tup2))  # Output: False",
        "generated_testcode": "assert check_greater((), ()) == True\n",
        "test": "assert check_greater((10, 4, 5), (13, 5, 18)) == True\nassert check_greater((1, 2, 3), (2, 1, 4)) == False\nassert check_greater((4, 5, 6), (5, 6, 7)) == True",
        "canonical_solution": "def check_greater(test_tup1, test_tup2):\r\n  res = all(x < y for x, y in zip(test_tup1, test_tup2))\r\n  return (res) "
    },
    {
        "number": 696,
        "prompt": "Write a function to zip two given lists of lists.\ndef zip_list(list1,list2):  \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    result = []\n    for i in range(len(list1)):\n        result.append([list1[i],list2[i]])\n    return result\n\n#Example usage:\nlist1 = [['a','b','c','d'],[1,2,3],['x','y','z']]\nlist2 = [['A','B','C'],[4,5,6],[7,8,9]]\nprint(zip_list(list1,list2))\n#Output: [['a', 'A', 'b', 'B', 'c', 'C', 'd', 1, 2, 3, 'x', 'y', 'z', 7, 8]",
        "generated_testcode": "assert zip_list([[1,2,3],[4,5,6],[7,8,9]], [[10,11,12],[13,14,15]] ) == [[(1,10),(2,11),(3,12),(4,13),(5,14),(6,15),(7,15)]]\n",
        "test": "assert zip_list([[1, 3], [5, 7], [9, 11]] ,[[2, 4], [6, 8], [10, 12, 14]] )==[[1, 3, 2, 4], [5, 7, 6, 8], [9, 11, 10, 12, 14]]\nassert zip_list([[1, 2], [3, 4], [5, 6]] ,[[7, 8], [9, 10], [11, 12]] )==[[1, 2, 7, 8], [3, 4, 9, 10], [5, 6, 11, 12]]\nassert zip_list([['a','b'],['c','d']] , [['e','f'],['g','h']] )==[['a','b','e','f'],['c','d','g','h']]",
        "canonical_solution": "def zip_list(list1,list2):  \r\n result = list(map(list.__add__, list1, list2)) \r\n return result"
    },
    {
        "number": 697,
        "prompt": "Write a function to find number of even elements in the given list using lambda function.\ndef count_even(array_nums):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    count = 0\n    for i in array_nums:\n        if i % 2 == 0:\n            count += 1\n    return lambda: count\n\n\n\n# Test the function\nprint(count_even([1,2,3,4,5,6,7,8,9,10])([])) # Output: 3\nprint(count_even([1,3,5,7,9])([])) # Output: 0\nprint(count_even([2,4,6,8,10])([])) # Output: 4\n",
        "generated_testcode": "assert count_even(list(range(1, 10)) == 4\n",
        "test": "assert count_even([1, 2, 3, 5, 7, 8, 9, 10])==3\nassert count_even([10,15,14,13,-18,12,-20])==5\nassert count_even([1, 2, 4, 8, 9])==3",
        "canonical_solution": "def count_even(array_nums):\r\n   count_even = len(list(filter(lambda x: (x%2 == 0) , array_nums)))\r\n   return count_even"
    },
    {
        "number": 698,
        "prompt": "Write a function to sort dictionary items by tuple product of keys for the given dictionary with tuple keys.\ndef sort_dict_item(test_dict):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    sorted_dict = sorted(test_dict.items(), key=lambda x: x[1][0]*x[1][1])\n    return sorted_dict\n\n#Test the function with the sample input\nsample_dict = {(3,4): 5, (2,1): 4, (4,3): 6, (1,2): 3, (5,2): 7, (4,5): 1}\nprint(sort_dict_item(sample_dict))\n\n#Output: [(1,2): 3, (2,1): 4, (3,4): 5, (4,3): 6, (4,5): 1, (5,2): 7]\n\n#Explanation: The function sorts the dictionary items by the product of the tuple keys (3*4, 2*1, 4*3, 4*5, 5*2) which gives the values (12, 2, 12, 20, 10) in ascending order. So, the sorted dictionary items are [(1,2): 3, (2,1): 4, (3,4): 5, (4,3): 6, (4,5): 1, (5,2): 7]\n",
        "generated_testcode": "assert sort_dict_item(\n    {(3, 2): 10, (1, 4): 5, (2, 1): 3, (4, 3): 8, (1, 2): 6, (2, 3): 7, (4, 1): 9, (3, 1): 11, (1, 3): 4, (2, 4): 2}) == {(1, 2): 6, (1, 3): 4, (2, 1): 3, (2, 4): 2, (3, 1): 11, (3, 2): 10, (1, 4): 5, (4, 1): 9, (4, 3): 8}\n\n# Test case 2\n",
        "test": "assert sort_dict_item({(5, 6) : 3, (2, 3) : 9, (8, 4): 10, (6, 4): 12} ) == {(2, 3): 9, (6, 4): 12, (5, 6): 3, (8, 4): 10}\nassert sort_dict_item({(6, 7) : 4, (3, 4) : 10, (9, 5): 11, (7, 5): 13} ) == {(3, 4): 10, (7, 5): 13, (6, 7): 4, (9, 5): 11}\nassert sort_dict_item({(7, 8) : 5, (4, 5) : 11, (10, 6): 12, (8, 6): 14} ) == {(4, 5): 11, (8, 6): 14, (7, 8): 5, (10, 6): 12}",
        "canonical_solution": "def sort_dict_item(test_dict):\r\n  res = {key: test_dict[key] for key in sorted(test_dict.keys(), key = lambda ele: ele[1] * ele[0])}\r\n  return  (res) \r\n"
    },
    {
        "number": 699,
        "prompt": "Write a python function to find the minimum number of swaps required to convert one binary string to another.\ndef min_Swaps(str1,str2) : \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    # Convert the strings to lists \n    list1 = list(str1) \n    list2 = list(str2) \n    # Initialize a dictionary to keep track of the frequency of each character in the first string \n    dict1 = {} \n    for char in list1 : \n        if char in dict1 : \n            dict1[char] += 1\n        else : \n            dict1[char] = 1\n    # Initialize a list to store the frequency of each character in the second string \n    freq2 = [0] * len(list2) \n    for char in list2 : \n        freq2[ord(char) - ord('0')] += 1\n    # Initialize a counter for the number of swaps \n    count = 0\n    # Iterate through the first string and update the dictionary and count \n    for i in range(len(list1)) : \n        if dict1[list1[i]] > 0 : \n            dict1[list1[i]] -= 1\n            if freq2[ord(list1[i]) - ord('0')] > 0 : \n                freq2[ord(list1[i]) - ord('0')] -= 1\n            else : \n                count += 1\n        else : \n            j = i \n            # Find the first occurrence of the character in the second string \n            while j < len(list1) and list1[j] == list2[i] : \n               ",
        "generated_testcode": "assert min_Swaps(str1 = \"10110\", str2 = \"01110\") == 2\n",
        "test": "assert min_Swaps(\"1101\",\"1110\") == 1\nassert min_Swaps(\"1111\",\"0100\") == \"Not Possible\"\nassert min_Swaps(\"1110000\",\"0001101\") == 3",
        "canonical_solution": "def min_Swaps(str1,str2) : \r\n    count = 0\r\n    for i in range(len(str1)) : \r\n        if str1[i] != str2[i] : \r\n            count += 1\r\n    if count % 2 == 0 : \r\n        return (count // 2) \r\n    else : \r\n        return (\"Not Possible\") "
    },
    {
        "number": 700,
        "prompt": "Write a function to count the number of elements in a list which are within a specific range.\ndef count_range_in_list(li, min, max):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    count = 0\n    for i in li:\n        if min <= i <= max:\n            count += 1\n    return count\n\n# Test the function with the given test cases\nprint(count_range_in_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 4, 8))  # Output: 4\nprint(count_range_in_list([10, 20, 30, 40, 50, 60, 70, 80, 90], 30, 50))  # Output: 3\nprint(count_range_in_list([100, 200, 300, 400, 500, 600, 700, 800], 400, 600))  # Output: 2\nprint(count_range_in_list([1000, 200, 300, 400, 500, 600, 700, 800], 50, 800))  # Output: 5\nprint(count_range_in_list([50, 40, 30, 20, 10, 0, -10, -20], 0, 30))  # Output: 3\n\n\n# Test the function with your",
        "generated_testcode": "assert count_range_in_list(range(1, 10), 3, 7) == 4\n",
        "test": "assert count_range_in_list([10,20,30,40,40,40,70,80,99],40,100)==6\nassert count_range_in_list(['a','b','c','d','e','f'],'a','e')==5\nassert count_range_in_list([7,8,9,15,17,19,45],15,20)==3",
        "canonical_solution": "def count_range_in_list(li, min, max):\r\n\tctr = 0\r\n\tfor x in li:\r\n\t\tif min <= x <= max:\r\n\t\t\tctr += 1\r\n\treturn ctr"
    },
    {
        "number": 701,
        "prompt": "Write a function to find the equilibrium index of the given array.\ndef equilibrium_index(arr):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    if len(arr) == 0:\n        return -1\n    if len(arr) == 1:\n        return 0\n    left = 0\n    right = len(arr) - 1\n    while left < right:\n        if arr[left] < 0:\n            left += 1\n        elif arr[right] > 0:\n            right -= 1\n        else:\n            return -1\n        if left == right:\n            return left\n        if arr[left] == 0 or arr[right] == 0:\n            return -1\n        if arr[left] > 0 and arr[right] < 0:\n            return -1\n        if arr[left] > 0 and arr[right] == 0:\n            return right\n        if arr[left] < 0 and arr[right] > 0:\n            return left\n        if arr[left] == 0 or arr[right] == 0:\n            return -1\n        if arr[left] == arr[right]:\n            return -1\n        left += 1\n        right -= 1\n    return -1\n\n\n# Test cases\nprint(equilibrium_index([1, 3, 5, 6, 0, 2, -1, -4, 3, -5, 2, -3]))  # Output: 3\nprint(equilibrium_index([2, 0, 5, -1, 2, 4, 2, -3, ",
        "generated_testcode": "assert equilibrium_index([1, 3, 5, 6, 4, 2, 2, 1, 4, 3] ) == 3\n",
        "test": "assert equilibrium_index([1, 2, 3, 4, 1, 2, 3]) == 3\nassert equilibrium_index([-7, 1, 5, 2, -4, 3, 0]) == 3\nassert equilibrium_index([1, 2, 3]) == -1",
        "canonical_solution": "def equilibrium_index(arr):\r\n  total_sum = sum(arr)\r\n  left_sum=0\r\n  for i, num in enumerate(arr):\r\n    total_sum -= num\r\n    if left_sum == total_sum:\r\n      return i\r\n    left_sum += num\r\n  return -1"
    },
    {
        "number": 702,
        "prompt": "Write a function to find the minimum number of elements that should be removed such that amax-amin<=k.\ndef find_ind(key, i, n, \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "          amin, amax, k, res):\n    if i == n:\n        return res\n    \n    if amax - amin <= k:\n        return res\n    \n    if key[i] == amin:\n        return find_ind(key, i+1, n, key[i], key[i+1], 0)\n    else:\n        return find_ind(key, i+1, n, amin, key[i], res+1)\n    \n    return res\n\ndef min_elements_to_remove(key, k):\n    key.sort()\n    return find_ind(key, 0, len(key), key[0], key[-1], 0)\n\n# test\nprint(min_elements_to_remove([1,2,3,4,5,6,7,8,9], 3)) # 2 ",
        "generated_testcode": "assert find_ind(key, 5, 10, 3) == 2\n",
        "test": "assert removals([1, 3, 4, 9, 10,11, 12, 17, 20], 9, 4) == 5\nassert removals([1, 5, 6, 2, 8], 5, 2) == 3\nassert removals([1, 2, 3 ,4, 5, 6], 6, 3) == 2",
        "canonical_solution": "def find_ind(key, i, n, \r\n\t\t\tk, arr):\r\n\tind = -1\r\n\tstart = i + 1\r\n\tend = n - 1;\r\n\twhile (start < end):\r\n\t\tmid = int(start +\r\n\t\t\t\t(end - start) / 2)\r\n\t\tif (arr[mid] - key <= k):\r\n\t\t\tind = mid\r\n\t\t\tstart = mid + 1\r\n\t\telse:\r\n\t\t\tend = mid\r\n\treturn ind\r\ndef removals(arr, n, k):\r\n\tans = n - 1\r\n\tarr.sort()\r\n\tfor i in range(0, n):\r\n\t\tj = find_ind(arr[i], i, \r\n\t\t\t\t\tn, k, arr)\r\n\t\tif (j != -1):\r\n\t\t\tans = min(ans, n -\r\n\t\t\t\t\t\t(j - i + 1))\r\n\treturn ans"
    },
    {
        "number": 703,
        "prompt": "Write a function to check whether the given key is present in the dictionary or not.\ndef is_key_present(d,x):\n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    if x in d:\n        return True\n    else:\n        return False\n\n#Test the function\nd = {\"apple\": 1, \"banana\": 2, \"orange\": 3}\nprint(is_key_present(d, \"orange\")) # Output: True\nprint(is_key_present(d, \"grape\")) # Output: False\n\n",
        "generated_testcode": "assert is_key_present({'a':1, 'b':2, 'c':3}, 'a') == True\n",
        "test": "assert is_key_present({1: 10, 2: 20, 3: 30, 4: 40, 5: 50, 6: 60},5)==True\nassert is_key_present({1: 10, 2: 20, 3: 30, 4: 40, 5: 50, 6: 60},6)==True\nassert is_key_present({1: 10, 2: 20, 3: 30, 4: 40, 5: 50, 6: 60},10)==False",
        "canonical_solution": "def is_key_present(d,x):\r\n  if x in d:\r\n    return True\r\n  else:\r\n     return False"
    },
    {
        "number": 704,
        "prompt": "Write a function to calculate the harmonic sum of n-1.\ndef harmonic_sum(n):\n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    total = 0\n    for i in range(1, n):\n        total += 1 / i\n    return total\n\n# Test cases\nprint(harmonic_sum(5)) # Output: 2.38095238095238095238\nprint(harmonic_sum(10)) # Output: 4.8375\nprint(harmonic_sum(100)) # Output: 6.9292292922929292929\n",
        "generated_testcode": "assert harmonic_sum(1) == 0\n",
        "test": "assert harmonic_sum(10)==2.9289682539682538\nassert harmonic_sum(4)==2.083333333333333\nassert harmonic_sum(7)==2.5928571428571425 ",
        "canonical_solution": "def harmonic_sum(n):\r\n  if n < 2:\r\n    return 1\r\n  else:\r\n    return 1 / n + (harmonic_sum(n - 1))"
    },
    {
        "number": 705,
        "prompt": "Write a function to sort a list of lists by length and value.\ndef sort_sublists(list1):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    # Sort list of lists by length and value\n    return sorted(list1, key=lambda x: (len(x), x))\n\n# Example usage:\nlist1 = [[3, 4], [1, 2, 3], [1, 2], [1, 2, 3, 4], [1], [1, 2, 3, 4, 5]]\nprint(sort_sublists(list1))  # Output: [[1], [1, 2], [1, 2, 3], [1, 2, 3, 4], [3, 4]]\n\n# Sort list of lists by length first, then value\nlist1 = [[1, 2, 3], [1, 2, 3], [1, 2], [1, 2, 3, 4], [1], [1, 2, 3, 4, 5]]\nprint(sort_sublists(list1))  # Output: [[1], [1, 2], [1, 2, 3], [1, 2, 3, 4], [1, 2, 3, 4, 5]]\n",
        "generated_testcode": "assert sort_sublists([[1,2,3], [4,5], [6], [7,8,9,10], [1,2,3,4,5], [10,20,30,40,50]] ] == [[1,2,3], [1,2,3,4,5], [4,5], [6], [7,8,9,10], [10,20,30,40,50]",
        "test": "assert sort_sublists([[2], [0], [1, 3], [0, 7], [9, 11], [13, 15, 17]])==[[0], [2], [0, 7], [1, 3], [9, 11], [13, 15, 17]]\nassert sort_sublists([[1], [2, 3], [4, 5, 6], [7], [10, 11]])==[[1], [7], [2, 3], [10, 11], [4, 5, 6]]\nassert sort_sublists([[\"python\"],[\"java\",\"C\",\"C++\"],[\"DBMS\"],[\"SQL\",\"HTML\"]])==[['DBMS'], ['python'], ['SQL', 'HTML'], ['java', 'C', 'C++']]",
        "canonical_solution": "def sort_sublists(list1):\r\n      list1.sort()  \r\n      list1.sort(key=len)\r\n      return  list1"
    },
    {
        "number": 706,
        "prompt": "Write a function to find whether an array is subset of another array.\ndef is_subset(arr1, m, arr2, n): \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    if n > m: \n        return False\n    i, j = 0, 0\n    while i < m and j < n: \n        if arr1[i] == arr2[j]: \n            i += 1\n        j += 1\n    return i == m ",
        "generated_testcode": "assert is_subset([1,2,3,4], [1,2,3,4,5,6,7], 5) == True\n",
        "test": "assert is_subset([11, 1, 13, 21, 3, 7], 6, [11, 3, 7, 1], 4) == True\nassert is_subset([1, 2, 3, 4, 5, 6], 6, [1, 2, 4], 3) == True\nassert is_subset([10, 5, 2, 23, 19], 5, [19, 5, 3], 3) == False",
        "canonical_solution": "def is_subset(arr1, m, arr2, n): \r\n\thashset = set() \r\n\tfor i in range(0, m): \r\n\t\thashset.add(arr1[i]) \r\n\tfor i in range(0, n): \r\n\t\tif arr2[i] in hashset: \r\n\t\t\tcontinue\r\n\t\telse: \r\n\t\t\treturn False\r\n\treturn True\t\t"
    },
    {
        "number": 707,
        "prompt": "Write a python function to count the total set bits from 1 to n.\ndef count_Set_Bits(n) :  \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    #initialize count variable  \n    count = 0  \n    for i in range(1, n+1) :  \n        #converting i to binary and counting set bits  \n        count += bin(i).count('1')  \n    return count  \n  \n#test the function  \nn = 10  \nprint(\"Total set bits from 1 to\", n, \"are :\", count_Set_Bits(n)) ",
        "generated_testcode": "assert count_Set_Bits(10) == 4\n",
        "test": "assert count_Set_Bits(16) == 33\nassert count_Set_Bits(2) == 2\nassert count_Set_Bits(14) == 28",
        "canonical_solution": "def count_Set_Bits(n) :  \r\n    n += 1; \r\n    powerOf2 = 2;   \r\n    cnt = n // 2;  \r\n    while (powerOf2 <= n) : \r\n        totalPairs = n // powerOf2;  \r\n        cnt += (totalPairs // 2) * powerOf2;  \r\n        if (totalPairs & 1) : \r\n            cnt += (n % powerOf2) \r\n        else : \r\n            cnt += 0\r\n        powerOf2 <<= 1;    \r\n    return cnt;  "
    },
    {
        "number": 708,
        "prompt": "Write a python function to convert a string to a list.\ndef Convert(string): \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    str_list = []\n    for i in string:\n        str_list.append(i)\n    return str_list\n\n# Test the function with an example\nprint(Convert(\"Hello\"))\n# Output: ['H', 'e', 'l', 'l', 'o'] ",
        "generated_testcode": "assert Convert(None) == []\n",
        "test": "assert Convert('python program') == ['python','program']\nassert Convert('Data Analysis') ==['Data','Analysis']\nassert Convert('Hadoop Training') == ['Hadoop','Training']",
        "canonical_solution": "def Convert(string): \r\n    li = list(string.split(\" \")) \r\n    return li "
    },
    {
        "number": 709,
        "prompt": "Write a function to count unique keys for each value present in the tuple.\ndef get_unique(test_list):\n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    result_dict = {}\n    for i in test_list:\n        if i[1] in result_dict:\n            result_dict[i[1]].append(i[0])\n        else:\n            result_dict[i[1]] = [i[0]]\n    for key, value in result_dict.items():\n        result_dict[key] = len(set(value))\n    return result_dict\n\n\n#Example usage:\ntest_list = [('apple', 'red', 'price'), ('banana', 'yellow', 'price'), ('apple', 'red', 'color'), ('apple', 'red', 'price'), ('orange', 'orange', 'color'), ('orange', 'orange', 'price'), ('banana', 'yellow', 'color')]\nprint(get_unique(test_list))\n#Output: {'price': 2, 'color': 2}\n\n\ntest_list = [('apple', 'red', 'price'), ('banana', 'yellow', 'price'), ('apple', 'red', 'color'), ('apple', 'red', 'price'), ('orange', 'orange', 'color'), ('orange', 'orange', 'price'), ('banana', 'yellow', 'color'), ('apple', 'blue', 'color'), ('banana', 'yellow', 'color')]\nprint(get_unique(test_list))\n#Output: {'price': 2, 'color': 3} ",
        "generated_testcode": "assert get_unique(()) == {}\n",
        "test": "assert get_unique([(3, 4), (1, 2), (2, 4), (8, 2), (7, 2), (8, 1), (9, 1), (8, 4), (10, 4)] ) == '{4: 4, 2: 3, 1: 2}'\nassert get_unique([(4, 5), (2, 3), (3, 5), (9, 3), (8, 3), (9, 2), (10, 2), (9, 5), (11, 5)] ) == '{5: 4, 3: 3, 2: 2}'\nassert get_unique([(6, 5), (3, 4), (2, 6), (11, 1), (8, 22), (8, 11), (4, 3), (14, 3), (11, 6)] ) == '{5: 1, 4: 1, 6: 2, 1: 1, 22: 1, 11: 1, 3: 2}'",
        "canonical_solution": "from collections import defaultdict \r\ndef get_unique(test_list):\r\n  res = defaultdict(list)\r\n  for sub in test_list:\r\n    res[sub[1]].append(sub[0])\r\n  res = dict(res)\r\n  res_dict = dict()\r\n  for key in res:\r\n    res_dict[key] = len(list(set(res[key])))\r\n  return (str(res_dict)) "
    },
    {
        "number": 710,
        "prompt": "Write a function to access the initial and last data of the given tuple record.\ndef front_and_rear(test_tup):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    return test_tup[0], test_tup[-1]\n\n\n# Test the function with sample tuple\ntup = (1,2,3,4,5,6,7,8,9)\nprint(front_and_rear(tup)) # Output: (1, 9)\n\n\n# Test the function with tuple having only one element\ntup = (1,)\nprint(front_and_rear(tup)) # Output: (1, 1)\n\n\n# Test the function with empty tuple\ntup = ()\nprint(front_and_rear(tup)) # Output: (, ) ",
        "generated_testcode": "assert front_and_rear((\"apple\", \"banana\", \"cherry\", \"date\", \"elderberry\") == (\"apple\", \"elderberry\")\n",
        "test": "assert front_and_rear((10, 4, 5, 6, 7)) == (10, 7)\nassert front_and_rear((1, 2, 3, 4, 5)) == (1, 5)\nassert front_and_rear((6, 7, 8, 9, 10)) == (6, 10)",
        "canonical_solution": "def front_and_rear(test_tup):\r\n  res = (test_tup[0], test_tup[-1])\r\n  return (res) "
    },
    {
        "number": 711,
        "prompt": "Write a python function to check whether the product of digits of a number at even and odd places is equal or not.\ndef product_Equal(n): \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    even_digits = 1\n    odd_digits = 1\n    n_str = str(n)\n    for i in range(len(n_str)):\n        if i % 2 == 0:\n            even_digits *= int(n_str[i])\n        else:\n            odd_digits *= int(n_str[i])\n    if even_digits == odd_digits:\n        return True\n    else:\n        return False\n\n# Test cases\nprint(product_Equal(123456789))  # True\nprint(product_Equal(123456780)) # False\nprint(product_Equal(987654321)) # True\nprint(product_Equal(987654302)) # False",
        "generated_testcode": "assert product_Equal(12345) == True\n",
        "test": "assert product_Equal(2841) == True\nassert product_Equal(1234) == False\nassert product_Equal(1212) == False",
        "canonical_solution": "def product_Equal(n): \r\n    if n < 10: \r\n        return False\r\n    prodOdd = 1; prodEven = 1\r\n    while n > 0: \r\n        digit = n % 10\r\n        prodOdd *= digit \r\n        n = n//10\r\n        if n == 0: \r\n            break; \r\n        digit = n % 10\r\n        prodEven *= digit \r\n        n = n//10\r\n    if prodOdd == prodEven: \r\n        return True\r\n    return False"
    },
    {
        "number": 712,
        "prompt": "Write a function to remove duplicates from a list of lists.\ndef remove_duplicate(list1):\n",
        "checkpoint": "7B",
        "pass": 4,
        "correct": true,
        "answer": "    new_list = []\n    for i in range(len(list1)):\n        if list1[i] not in new_list:\n            new_list.append(list1[i])\n    return new_list\n\n# Test the function with a sample list\nlist1 = [[1, 2, 3], [2, 3, 4], [3, 4, 5], [4, 5, 6], [5, 6, 7], [6, 7, 8], [7, 8, 9]]\nprint(remove_duplicate(list1))\n# Expected output: [[1, 2, 3], [4, 5, 6], [7, 8, 9]] ",
        "generated_testcode": "assert remove_duplicate([[1,2,3],[1,2,3],[4,5,6],[7,8,9],[1,2,3]] ) == [[1,2,3],[4,5,6],[7,8,9]]\n",
        "test": "assert remove_duplicate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]])==[[10, 20], [30, 56, 25], [33], [40]] \nassert remove_duplicate([\"a\", \"b\", \"a\", \"c\", \"c\"] )==[\"a\", \"b\", \"c\"]\nassert remove_duplicate([1, 3, 5, 6, 3, 5, 6, 1] )==[1, 3, 5, 6]",
        "canonical_solution": "import itertools\r\ndef remove_duplicate(list1):\r\n list.sort(list1)\r\n remove_duplicate = list(list1 for list1,_ in itertools.groupby(list1))\r\n return remove_duplicate"
    },
    {
        "number": 713,
        "prompt": "Write a function to check if the given tuple contains all valid values or not.\ndef check_valid(test_tup):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    for i in test_tup:\n        if i < 0 or type(i) != int:\n            return False\n    return True\n\n# test the function with a valid tuple\nprint(check_valid((1,2,3,4,5,6,7,8,9)) # Output: True\n\n# test the function with an invalid tuple\nprint(check_valid((1,2,3,-4,5,6,7,8,9)) # Output: False\n# test the function with a tuple with string values\nprint(check_valid((\"a\",2,3,4,5,6,7,8,9)) # Output: False\n# test the function with a tuple with float values\nprint(check_valid((1.0,2,3,4,5,6,7,8)) # Output: False\n\n# test the function with a tuple with a string value\nprint(check_valid((1,2,\"a\",4,6,7,8,9)) # Output: False\n",
        "generated_testcode": "assert check_valid(()) == True\n",
        "test": "assert check_valid((True, True, True, True) ) == True\nassert check_valid((True, False, True, True) ) == False\nassert check_valid((True, True, True, True) ) == True",
        "canonical_solution": "def check_valid(test_tup):\r\n  res = not any(map(lambda ele: not ele, test_tup))\r\n  return (res) "
    },
    {
        "number": 714,
        "prompt": "Write a python function to count the number of distinct power of prime factor of given number.\ndef count_Fac(n):  \n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": true,
        "answer": "    count = 0  \n    i = 2  \n    while n > 1:  \n        if n % i == 0:  \n            count += 1  \n            while n % i == 0:  \n                n //= i  \n        i += 1  \n        if i*i > n:  \n            break  \n    if n > 1:  \n        count += 1  \n    return count  \n\ndef is_prime(num):  \n    if num == 1:  \n        return False  \n    for i in range(2,int(num**0.5)+1):  \n        if num % i == 0:  \n            return False  \n    return True  \n\ndef count_distinct_prime_power_factors(n):  \n    count = 0  \n    i = 2  \n    while is_prime(i):  \n        c = count_Fac(n)  \n        if c % i == 0:  \n            count += c // i  \n        i += 1  \n    return count  \n\n#example  \nnum = 30  \nprint(count_distinct_prime_power_factors(num)) # output: 2 (3^1 and 5^1)  ",
        "generated_testcode": "assert count_Fac(10) == 2\n",
        "test": "assert count_Fac(24) == 3\nassert count_Fac(12) == 2\nassert count_Fac(4) == 1",
        "canonical_solution": "def count_Fac(n):  \r\n    m = n \r\n    count = 0\r\n    i = 2\r\n    while((i * i) <= m): \r\n        total = 0\r\n        while (n % i == 0): \r\n            n /= i \r\n            total += 1 \r\n        temp = 0\r\n        j = 1\r\n        while((temp + j) <= total): \r\n            temp += j \r\n            count += 1\r\n            j += 1 \r\n        i += 1\r\n    if (n != 1): \r\n        count += 1 \r\n    return count "
    },
    {
        "number": 715,
        "prompt": "Write a function to convert the given string of integers into a tuple.\ndef str_to_tuple(test_str):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    # Split the string into a list of integers\n    num_list = [int(num) for num in test_str.split()]\n    # Convert the list of integers to a tuple and return the tuple\n    return tuple(num_list)\n\n# Test the function\nprint(str_to_tuple(\"1 2 3 4 5 6 7 8 9\")) # Output: (1, 2, 3, 4, 5, 6, 7, 8, 9)\nprint(str_to_tuple(\"10 20 30 40 50 60 70 80 90 100\") # Output: (10, 20, 30, 40, 50, 60, 70, 80, 90, 100)\nprint(str_to_tuple(\"1000 200 300 400 500 600 700 800 900 1000 1100\") # Output: (100, 200, 300, 400, 500, 600, 700, 800, 900, 1000, 110)\n\n# The function works for any string containing integers separated by spaces\n",
        "generated_testcode": "assert str_to_tuple(12345) == (1, 2, 3, 4, 5)\n",
        "test": "assert str_to_tuple(\"1, -5, 4, 6, 7\") == (1, -5, 4, 6, 7)\nassert str_to_tuple(\"1, 2, 3, 4, 5\") == (1, 2, 3, 4, 5)\nassert str_to_tuple(\"4, 6, 9, 11, 13, 14\") == (4, 6, 9, 11, 13, 14)",
        "canonical_solution": "def str_to_tuple(test_str):\r\n  res = tuple(map(int, test_str.split(', ')))\r\n  return (res) "
    },
    {
        "number": 716,
        "prompt": "Write a function to find the perimeter of a rombus.\ndef rombus_perimeter(a):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    b = a / 2\n    return 4 * (a + b)\n\n# Test the function with a = 5\nprint(rombus_perimeter(5)) # Output: 20\n\n# Test the function with a = 10\nprint(rombus_perimeter(10)) # Output: 40\n# Test the function with a = 15\nprint(rombus_perimeter(15)) # Output: 40\n\n# Test the function with a = 20\nprint(rombus_perimeter(20)) # Output: 40\n# Test the function with a = 25\nprint(rombus_perimeter(25)) # Output: 50\n\n# Test the function with a = 30\nprint(rombus_perimeter(30)) # Output: 60\n\n\n# Write a function to find the area of a rombus\ndef rombus_area(a):\n    b = a / 2\n    return a * b\n\n# Test the function with a = 5\nprint(rombus_area(5)) # Output: 12.5\n# Test the function with a = 10\nprint(rombus_area(10)) # Output: 50\n# Test the function with a = 15\nprint(rombus_area(15)) # Output: 75\n# Test the function with a = 20\nprint(rombus_area(20)) # Output: 100\n#",
        "generated_testcode": "assert rombus_perimeter(5) == 18\n",
        "test": "assert rombus_perimeter(10)==40\nassert rombus_perimeter(5)==20\nassert rombus_perimeter(4)==16",
        "canonical_solution": "def rombus_perimeter(a):\r\n  perimeter=4*a\r\n  return perimeter"
    },
    {
        "number": 717,
        "prompt": "Write a function to calculate the standard deviation.\ndef sd_calc(data):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    mean = sum(data)/len(data)\n    variance = sum((x - mean)**2 for x in data)/len(data)\n    return variance**(0.5\n\n#print(sd_calc([1, 2, 3, 4, 5, 6, 7, 8, 9]))  # Output: 2.58\n\n\n# Test your function with a list of your own choice\nprint(sd_calc([1, 2, 3, 4, 5, 6, 7, 8, 9])) # Output: 2.58",
        "generated_testcode": "assert sd_calc(range(1, 10)) == 2.872\n",
        "test": "assert sd_calc([4, 2, 5, 8, 6])== 2.23606797749979\nassert sd_calc([1,2,3,4,5,6,7])==2.160246899469287\nassert sd_calc([5,9,10,15,6,4])==4.070217029430577",
        "canonical_solution": "import math\r\nimport sys\r\ndef sd_calc(data):\r\n    n = len(data)\r\n    if n <= 1:\r\n        return 0.0\r\n    mean, sd = avg_calc(data), 0.0\r\n    for el in data:\r\n        sd += (float(el) - mean)**2\r\n    sd = math.sqrt(sd / float(n-1))\r\n    return sd\r\ndef avg_calc(ls):\r\n    n, mean = len(ls), 0.0\r\n    if n <= 1:\r\n        return ls[0]\r\n    for el in ls:\r\n        mean = mean + float(el)\r\n    mean = mean / float(n)\r\n    return mean"
    },
    {
        "number": 718,
        "prompt": "Write a function to create a list taking alternate elements from another given list.\ndef alternate_elements(list1):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    \"\"\"\n    This function takes a list as input and returns a new list with alternate elements of the input list\n    \"\"\"\n    new_list = []\n    for i in range(len(list1)):\n        if i%2 == 0:\n            new_list.append(list1[i])\n    return new_list\n\n\n# Test cases\nprint(alternate_elements([1,2,3,4,5,6,7,8,9,10])) # Output: [1, 3, 5, 7, 9]\nprint(alternate_elements([a,b,c,d,e,f,g,h,i,j,k,l])) # Output: [a, c, e, g, i]\nprint(alternate_elements([1,2,3,4,5,6,7,8,9,10,11,12])) # Output: [1, 3, 5, 7, 9, 11]\nprint(alternate_elements([\"apple\", \"banana\", \"cherry\", \"orange\", \"grape\", \"kiwi\", \"mango\", \"pineapple\", \"strawberry\"])) # Output: [\"apple\", \"cherry\", \"grape\", \"mango\"]\n\n",
        "generated_testcode": "assert alternate_elements([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\"] == [\"a\", \"c\", \"e\", \"g\", \"i\", \"k\", \"m\", \"o\"])\n",
        "test": "assert alternate_elements([\"red\", \"black\", \"white\", \"green\", \"orange\"])==['red', 'white', 'orange']\nassert alternate_elements([2, 0, 3, 4, 0, 2, 8, 3, 4, 2])==[2, 3, 0, 8, 4]\nassert alternate_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1,3,5,7,9]",
        "canonical_solution": "def alternate_elements(list1):\r\n    result=[]\r\n    for item in list1[::2]:\r\n        result.append(item)\r\n    return result "
    },
    {
        "number": 719,
        "prompt": "Write a function that matches a string that has an a followed by zero or more b's.\ndef text_match(text):\n",
        "checkpoint": "7B",
        "pass": 3,
        "correct": true,
        "answer": "    pattern = re.compile(r'a.*b*')\n    return bool(pattern.match(text))\n\n# Test cases\nprint(text_match(\"ab\")) # True\nprint(text_match(\"aaabbbb\")) # True\nprint(text_match(\"a\")) # True\nprint(text_match(\"bbb\")) # False\nprint(text_match(\"aabb\")) # True\nprint(text_match(\"ba\")) # True\nprint(text_match(\"abba\")) # True\nprint(text_match(\"aabbaaabbb\")) # True\nprint(text_match(\"baaabbaaabb\")) # True\nprint(text_match(\"aaabbbcccdde\")) # False\nprint(text_match(\"abcd\")) # False\n",
        "generated_testcode": "assert text_match(\"ab\" ) == True\n",
        "test": "assert text_match(\"ac\")==('Found a match!')\nassert text_match(\"dc\")==('Not matched!')\nassert text_match(\"abba\")==('Found a match!')",
        "canonical_solution": "import re\r\ndef text_match(text):\r\n        patterns = 'ab*?'\r\n        if re.search(patterns,  text):\r\n                return 'Found a match!'\r\n        else:\r\n                return('Not matched!')"
    },
    {
        "number": 720,
        "prompt": "Write a function to add a dictionary to the tuple.\ndef add_dict_to_tuple(test_tup, test_dict):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    new_tup = ()\n    for i in test_tup:\n        if isinstance(i, dict):\n            new_tup += (test_dict,)\n        else:\n            new_tup += (i,)\n    return new_tup\n\n\n# Test the function\ntest_tup = (1, 2, {\"a\":3, \"b\":4}, \"hello\", \"world\")\ntest_dict = {\"c\":5, \"d\":6}\nnew_tup = add_dict_to_tuple(test_tup, test_dict)\nprint(new_tup)\n# Output: (1, 2, {'c': 5, 'd': 6}, 'hello', 'world')\n\n\ntest_tup = (1, 2, {\"a\":3, \"b\":4}, {\"c\":5, \"d\":6}, \"hello\", \"world\")\nnew_tup = add_dict_to_tuple(test_tup, {\"e\":7, \"f\":8})\nprint(new_tup)\n# Output: (1, 2, {'a': 3, 'b': 4, 'e': 7, 'f': 8}, 'hello', 'world')\n\n\ntest_tup = (1, 2, {\"a\":3, \"b\":4, \"c\":5}, \"hello\", \"world\")\nnew_tup = add_dict_to_tuple(test_tup, {\"e\":7, \"f\":",
        "generated_testcode": "assert add_dict_to_tuple(('hello', {'name': 'John', 'age': 25}) == ('hello', {'name': 'John', 'age': 25})\n",
        "test": "assert add_dict_to_tuple((4, 5, 6), {\"MSAM\" : 1, \"is\" : 2, \"best\" : 3} ) == (4, 5, 6, {'MSAM': 1, 'is': 2, 'best': 3})\nassert add_dict_to_tuple((1, 2, 3), {\"UTS\" : 2, \"is\" : 3, \"Worst\" : 4} ) == (1, 2, 3, {'UTS': 2, 'is': 3, 'Worst': 4})\nassert add_dict_to_tuple((8, 9, 10), {\"POS\" : 3, \"is\" : 4, \"Okay\" : 5} ) == (8, 9, 10, {'POS': 3, 'is': 4, 'Okay': 5})",
        "canonical_solution": "def add_dict_to_tuple(test_tup, test_dict):\r\n  test_tup = list(test_tup)\r\n  test_tup.append(test_dict)\r\n  test_tup = tuple(test_tup)\r\n  return (test_tup) "
    },
    {
        "number": 721,
        "prompt": "Write a function to find a path with the maximum average over all existing paths for the given square matrix of size n*n.\ndef maxAverageOfPath(cost, N): \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    dp = [[0]*N for i in range(N)]\n    dp[0][0] = cost[0][0]\n    dp[1][0] = max(cost[1][0],cost[0][1])\n    dp[0][1] = max(cost[0][1],cost[1][0])\n    for i in range(2,N):\n        dp[i][0] = max(cost[i][0], dp[i-1][0])\n        dp[0][i] = max(cost[0][i], dp[0][i-1])\n    for i in range(2,N):\n        for j in range(1,N):\n            if i == j:\n                dp[i][j] = max(cost[i][j], dp[i-1][j], dp[i][j-1])\n            else:\n                dp[i][j] = max(cost[i][j] + dp[i-1][j], dp[i][j-1], dp[i-1][j])\n    avg = max(dp[N-1][N-1], max(dp[N-1][N-2], dp[N-2][N-1]))\n    for i in range(N-1,0,-1):\n        for j in range(N-1,0,-1):\n            if i == j:\n                avg = max(avg, max(dp[",
        "generated_testcode": "assert maxAverageOfPath(\n    [[1, 2, 3],\n     [4, 5, 6],\n     [7, 8, 9]], 3) == 7\n\n",
        "test": "assert maxAverageOfPath([[1, 2, 3], [6, 5, 4], [7, 3, 9]], 3) == 5.2\nassert maxAverageOfPath([[2, 3, 4], [7, 6, 5], [8, 4, 10]], 3) == 6.2\nassert maxAverageOfPath([[3, 4, 5], [8, 7, 6], [9, 5, 11]], 3) == 7.2 ",
        "canonical_solution": "M = 100\r\ndef maxAverageOfPath(cost, N): \r\n\tdp = [[0 for i in range(N + 1)] for j in range(N + 1)] \r\n\tdp[0][0] = cost[0][0] \r\n\tfor i in range(1, N): \r\n\t\tdp[i][0] = dp[i - 1][0] + cost[i][0] \r\n\tfor j in range(1, N): \r\n\t\tdp[0][j] = dp[0][j - 1] + cost[0][j] \r\n\tfor i in range(1, N): \r\n\t\tfor j in range(1, N): \r\n\t\t\tdp[i][j] = max(dp[i - 1][j], \r\n\t\t\t\t\t\tdp[i][j - 1]) + cost[i][j] \r\n\treturn dp[N - 1][N - 1] / (2 * N - 1)"
    },
    {
        "number": 722,
        "prompt": "Write a function to filter the height and width of students which are stored in a dictionary.\ndef filter_data(students,h,w):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    result = []\n    for student in students:\n        if student['height'] <= h and student['width'] <= w:\n            result.append(student)\n    return result\n\n#Example usage:\nstudents = [\n    {'name': 'John', 'age': 22, 'height': 180, 'width': 60},\n    {'name': 'Sara', 'age': 21, 'height': 175, 'width': 65},\n    {'name': 'David', 'age': 19, 'height': 182, 'width': 55},\n    {'name': 'Jessica', 'age': 20, 'height': 170, 'width': 62},\n    {'name': 'Peter', 'age': 20, 'height': 185, 'width': 70},\n    {'name': 'Tom', 'age': 21, 'height': 178, 'width': 58},\n]\n\nprint(filter_data(students,170,65)) # Output: [{'name': 'John', 'age': 22, 'height': 180, 'width': 60}, {'name': 'Sara', 'age': 21, 'height': 175, 'width': 65}, {'name': 'David', 'age': 19, 'height': 182, 'width': 55}]\n\nprint(filter_data",
        "generated_testcode": "assert filter_data(students, 170, 60) == {'Alice': {'height': 170, 'weight': 55, 'gender': 'F', 'score': 85}, 'Bob': {'height': 160, 'weight': 65, 'gender': 'M', 'score': 90}, 'Charlie': {'height': 180, 'weight': 75, 'gender': 'M', 'score': 80}, 'Dave': {'height': 175, 'weight': 65, 'gender': 'M', 'score': 75}}\n\n# The function should return a dictionary with only the students who have height greater than or equal to 170 and weight greater than or equal to 60.\n\n",
        "test": "assert filter_data({'Cierra Vega': (6.2, 70), 'Alden Cantrell': (5.9, 65), 'Kierra Gentry': (6.0, 68), 'Pierre Cox': (5.8, 66)},6.0,70)=={'Cierra Vega': (6.2, 70)}\nassert filter_data({'Cierra Vega': (6.2, 70), 'Alden Cantrell': (5.9, 65), 'Kierra Gentry': (6.0, 68), 'Pierre Cox': (5.8, 66)},5.9,67)=={'Cierra Vega': (6.2, 70),'Kierra Gentry': (6.0, 68)}\nassert filter_data({'Cierra Vega': (6.2, 70), 'Alden Cantrell': (5.9, 65), 'Kierra Gentry': (6.0, 68), 'Pierre Cox': (5.8, 66)},5.7,64)=={'Cierra Vega': (6.2, 70),'Alden Cantrell': (5.9, 65),'Kierra Gentry': (6.0, 68),'Pierre Cox': (5.8, 66)}",
        "canonical_solution": "def filter_data(students,h,w):\r\n    result = {k: s for k, s in students.items() if s[0] >=h and s[1] >=w}\r\n    return result    "
    },
    {
        "number": 723,
        "prompt": "Write a function to count the same pair in two given lists using map function.\ndef count_same_pair(nums1, nums2):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    count_map = {}\n    count = 0\n    for num in nums1:\n        if num in count_map:\n            count_map[num] += 1\n        else:\n            count_map[num] = 1\n    for num in nums2:\n        if num in count_map and count_map[num] > 0:\n            count += 1\n            count_map[num] -= 1\n    return count\n\n# Test the function\nnums1 = [1, 2, 3, 4, 5, 6, 7, 8, 9]\nnums2 = [2, 3, 4, 5, 9, 9, 9, 1, 7, 8]\nprint(count_same_pair(nums1, nums2)) # Output: 3\n\n\nnums1 = [1, 2, 3, 4, 5, 6, 7, 8, 9]\nnums2 = [1, 2, 3, 4, 5, 6, 7, 8]\nprint(count_same_pair(nums1, nums2)) # Output: 6\n\nnums1 = [1, 2, 3, 4, 5, 6, 7, 8, 9]\nnums2 = [1, 2, 3, 4, 5, 6, 7, 8, 10",
        "generated_testcode": "assert count_same_pair([1,2,3,4,5,6,7], [2,4,6,8,10,12]) == 2\n",
        "test": "assert count_same_pair([1, 2, 3, 4, 5, 6, 7, 8],[2, 2, 3, 1, 2, 6, 7, 9])==4\nassert count_same_pair([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8],[2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8])==11\nassert count_same_pair([2, 4, -6, -9, 11, -12, 14, -5, 17],[2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8])==1",
        "canonical_solution": "from operator import eq\r\ndef count_same_pair(nums1, nums2):\r\n    result = sum(map(eq, nums1, nums2))\r\n    return result"
    },
    {
        "number": 724,
        "prompt": "Write a function to calculate the sum of all digits of the base to the specified power.\ndef power_base_sum(base, power):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": true,
        "answer": "    result = 0\n    for digit in str(base ** power):\n        result += int(digit)\n    return result\n\n# Test cases\nprint(power_base_sum(2, 10)) # 13\nprint(power_base_sum(10, 10)) # 136\nprint(power_base_sum(100, 10)) # 361\nprint(power_base_sum(1000, 10)) # 3636\nprint(power_base_sum(10000, 10)) # 363636",
        "generated_testcode": "assert power_base_sum(2, 3) == 8, \"Test case 1 failed\"\n",
        "test": "assert power_base_sum(2,100)==115\nassert power_base_sum(8,10)==37\nassert power_base_sum(8,15)==62",
        "canonical_solution": "def power_base_sum(base, power):\r\n    return sum([int(i) for i in str(pow(base, power))])"
    },
    {
        "number": 725,
        "prompt": "Write a function to extract values between quotation marks of the given string by using regex.\ndef extract_quotation(text1):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    pattern = r'\"([^\"]*)\"'\n    matches = re.findall(pattern, text1)\n    return matches\n\n# Test the function with the given string\ntext1 = 'This is a \"test\" string with \"quoted\" values'\nprint(extract_quotation(text1))\n\n# Output: ['test', 'quoted'] ",
        "generated_testcode": "assert extract_quotation(r'\"Hello, this is a \"test\" string\"') == ['test']\n",
        "test": "assert extract_quotation('Cortex \"A53\" Based \"multi\" tasking \"Processor\"') == ['A53', 'multi', 'Processor']\nassert extract_quotation('Cast your \"favorite\" entertainment \"apps\"') == ['favorite', 'apps']\nassert extract_quotation('Watch content \"4k Ultra HD\" resolution with \"HDR 10\" Support') == ['4k Ultra HD', 'HDR 10']",
        "canonical_solution": "import re\r\ndef extract_quotation(text1):\r\n  return (re.findall(r'\"(.*?)\"', text1))"
    },
    {
        "number": 726,
        "prompt": "Write a function to multiply the adjacent elements of the given tuple.\ndef multiply_elements(test_tup):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    result = ()\n    for i in range(len(test_tup)-1):\n        result += (test_tup[i]*test_tup[i+1],)\n    return result\n\n#test the function\nprint(multiply_elements((1,2,3,4,5,6,7)) #Output: (2, 6, 12, 20)\nprint(multiply_elements((5,6,7,8,9,10)) #Output: (6, 12, 12, 15, 20)\nprint(multiply_elements((10,20,30,40,50)) #Output: (20, 60, 120)\n\n# The function takes in a tuple as an input, iterates through it using a for loop, multiplies the adjacent elements and adds them to a new tuple, and returns the tuple with the products. \n# If the length of the tuple is 2 or less, it returns an empty tuple. ",
        "generated_testcode": "assert multiply_elements((1,2,3,4,5) == 6\n",
        "test": "assert multiply_elements((1, 5, 7, 8, 10)) == (5, 35, 56, 80)\nassert multiply_elements((2, 4, 5, 6, 7)) == (8, 20, 30, 42)\nassert multiply_elements((12, 13, 14, 9, 15)) == (156, 182, 126, 135)",
        "canonical_solution": "def multiply_elements(test_tup):\r\n  res = tuple(i * j for i, j in zip(test_tup, test_tup[1:]))\r\n  return (res) "
    },
    {
        "number": 727,
        "prompt": "Write a function to remove all characters except letters and numbers using regex\ndef remove_char(S):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    import re\n    return re.sub('[^A-Za-z0-9]', '', S)\n\n# Test the function\nS = \"This is a sample string with special characters and spaces\"\nprint(remove_char(S))\n# Output: \"Thisisasamplestringwithspecialcharactersandspaces\"\n\nS = \"Hello, world! 123\"\nprint(remove_char(S))\n# Output: \"Helloworld123\"\n\nS = \"No spaces or special characters here.\"\nprint(remove_char(S))\n# Output: \"Nospacesorspecialcharactershere\"",
        "generated_testcode": "assert remove_char(123abc456def) == \"123456\"\n",
        "test": "assert remove_char(\"123abcjw:, .@! eiw\") == '123abcjweiw'\nassert remove_char(\"Hello1234:, ! Howare33u\") == 'Hello1234Howare33u'\nassert remove_char(\"Cool543Triks@:, Make@987Trips\") == 'Cool543TriksMake987Trips' ",
        "canonical_solution": "import re \r\ndef remove_char(S):\r\n  result = re.sub('[\\W_]+', '', S) \r\n  return result"
    },
    {
        "number": 728,
        "prompt": "Write a function to sum elements in two lists.\ndef sum_list(lst1,lst2):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    total = []\n    for i in range(len(lst1)):\n        total.append(lst1[i] + lst2[i])\n    return total\n    \n# Test the function with the following lists:\nlst1 = [1, 2, 3, 4, 5]\nlst2 = [2, 4, 6, 8]\nprint(sum_list(lst1,lst2)) # Output: [3, 6, 9, 112]\n\nlst1 = [10, 20, 30, 40]\nlst2 = [5, 10, 15, 25]\nprint(sum_list(lst1,lst2)) # Output: [15, 30, 45, 65]\n\n\n#Alternative way to write the function\ndef sum_list(lst1,lst2):\n    return [a+b for a,b in zip(lst1,lst2)]\n\nlst1 = [1, 2, 3, 4, 5]\nlst2 = [2, 4, 6, 8]\nprint(sum_list(lst1,lst2)) # Output: [3, 6, 9, 12]\n\nlst1 = [10, 20, 30, 40]\nlst2 = [5, 10, 15, 25]\nprint(sum_list(lst1,lst2)) # Output",
        "generated_testcode": "assert sum_list([1,2,3,4], [5,6,7]) == [6, 8, 111]\n",
        "test": "assert sum_list([10,20,30],[15,25,35])==[25,45,65]\nassert sum_list([1,2,3],[5,6,7])==[6,8,10]\nassert sum_list([15,20,30],[15,45,75])==[30,65,105]",
        "canonical_solution": "def sum_list(lst1,lst2):\r\n  res_list = [lst1[i] + lst2[i] for i in range(len(lst1))] \r\n  return res_list"
    },
    {
        "number": 729,
        "prompt": "Write a function to add two lists using map and lambda function.\ndef add_list(nums1,nums2):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    add_lambda = lambda x,y: x+y\n    return list(map(add_lambda, nums1, nums2))\n\n#Example:\nnums1 = [1, 2, 3, 4, 5]\nnums2 = [6, 7, 8, 9]\nprint(add_list(nums1, nums2)) # Output: [7, 9, 112]",
        "generated_testcode": "assert add_list(list(range(1,5),list(range(1,5)) == [2, 4, 6, 8, 10, 12]\n",
        "test": "assert add_list([1, 2, 3],[4,5,6])==[5, 7, 9]\nassert add_list([1,2],[3,4])==[4,6]\nassert add_list([10,20],[50,70])==[60,90]",
        "canonical_solution": "def add_list(nums1,nums2):\r\n  result = map(lambda x, y: x + y, nums1, nums2)\r\n  return list(result)"
    },
    {
        "number": 730,
        "prompt": "Write a function to remove consecutive duplicates of a given list.\ndef consecutive_duplicates(nums):\n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    new_list = []\n    for i in range(len(nums)):\n        if i == 0 or nums[i] != nums[i-1]:\n            new_list.append(nums[i])\n    return new_list\n\n# Testing\nprint(consecutive_duplicates([1, 2, 2, 3, 3, 4, 4, 4, 5, 5, 6, 6, 7, 7, 7]))  # Output: [1, 2, 3, 4, 5, 6, 7]\nprint(consecutive_duplicates([1, 1, 1, 1, 2, 2, 3, 3, 3, 4, 4, 5, 5, 5])) # Output: [1, 2, 3, 4, 5]\nprint(consecutive_duplicates([1, 2, 2, 3, 3, 4, 4, 5, 5])) # Output: [1, 2, 3, 4, 5]\nprint(consecutive_duplicates([1, 1, 1, 2, 2, 2, 3, 3, 4, 4])) # Output: [1, 2, 3, 4]\nprint(consecutive_duplicates([1, 2, 2, 3, 4, 4, 5])) #",
        "generated_testcode": "assert consecutive_duplicates([1, 2, 3, 4, 4, 4, 5, 5, 5, 6, 6, 6, 7, 7, 7, 7, 8, 8, 9] ) == [1, 2, 3, 4, 5, 6, 7, 8, 9]\n",
        "test": "assert consecutive_duplicates([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4 ])==[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4]\nassert consecutive_duplicates([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10])==[10, 15, 19, 18, 17, 26, 17, 18, 10]\nassert consecutive_duplicates(['a', 'a', 'b', 'c', 'd', 'd'])==['a', 'b', 'c', 'd']",
        "canonical_solution": "from itertools import groupby\r\ndef consecutive_duplicates(nums):\r\n    return [key for key, group in groupby(nums)] "
    },
    {
        "number": 731,
        "prompt": "Write a function to find the lateral surface area of a cone.\ndef lateralsurface_cone(r,h):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    area = (r**2)*h\n    return area\n\n# Test the function\nprint(lateralsurface_cone(5,10)) # Output: 157.079638\nprint(lateralsurface_cone(7,12)) # Output: 502.397555\n\n\n# Write a function to find the volume of a cone\ndef volume_cone(r,h):\n    volume = (1/3)*(r**2)*h\n    return volume\n\n# Test the function\nprint(volume_cone(5,10)) # Output: 67.60912\nprint(volume_cone(7,12)) # Output: 1443.7697\n\n\n# Write a function to find the surface area of a sphere\ndef surfacearea_sphere(r):\n    surface_area = 4*3.142*(r**2)\n    return surface_area\n\n# Test the function\nprint(surfacearea_sphere(5)) # Output: 314.15927\nprint(surfacearea_sphere(7)) # Output: 4404.2697\n\n\n# Write a function to find the volume of a sphere\ndef volume_sphere(r):\n    volume = (4/3)*(3.142)*(r**3)\n    return volume\n\n# Test the function\nprint(volume_sphere(",
        "generated_testcode": "assert lateralsurface_cone(5,10) == 156.63\nprint(\"Test case 1 passed\")\n\n# Write a function to find the volume of a sphere\ndef volume_sphere(r):\n    pass\n\n",
        "test": "assert lateralsurface_cone(5,12)==204.20352248333654\nassert lateralsurface_cone(10,15)==566.3586699569488\nassert lateralsurface_cone(19,17)==1521.8090132193388",
        "canonical_solution": "import math\r\ndef lateralsurface_cone(r,h):\r\n  l = math.sqrt(r * r + h * h)\r\n  LSA = math.pi * r  * l\r\n  return LSA"
    },
    {
        "number": 732,
        "prompt": "Write a function to replace all occurrences of spaces, commas, or dots with a colon.\ndef replace_specialchar(text):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    for char in [' ', ', ',', '.']:\n        text = text.replace(char, ':')\n    return text\n\n# Test the function with the given inputs\nprint(replace_specialchar(\"Hello, World\"))  # Output: \"Hello:World\"\nprint(replace_specialchar(\"My name is John Doe\"))  # Output: \"My:name:is:John:Doe\"\nprint(replace_specialchar(\"1, 2, 3. 4, 5\"))  # Output: \"1:2:3:4:5\"\n\n\n# This function replaces all occurrences of spaces, commas, and dots with a colon, and returns the modified text as a result. ",
        "generated_testcode": "assert replace_specialchar(None) == None\n",
        "test": "assert replace_specialchar('Python language, Programming language.')==('Python:language::Programming:language:')\nassert replace_specialchar('a b c,d e f')==('a:b:c:d:e:f')\nassert replace_specialchar('ram reshma,ram rahim')==('ram:reshma:ram:rahim')",
        "canonical_solution": "import re\r\ndef replace_specialchar(text):\r\n return (re.sub(\"[ ,.]\", \":\", text))\r"
    },
    {
        "number": 733,
        "prompt": "Write a function to find the index of the first occurrence of a given number in a sorted array.\ndef find_first_occurrence(A, x):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    left, right = 0, len(A) - 1\n    result = -1\n    while left <= right:\n        mid = (left + right) // 2\n        if A[mid] == x:\n            result = mid\n            right = mid - 1\n        elif A[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return result\n\n# Test the function\nA = [1, 2, 3, 3, 4, 5, 6, 7, 7, 7, 8, 9]\nx = 7\nprint(find_first_occurrence(A, x))  # Output: 5\n\nA = [1, 1, 2, 3, 3, 4, 5, 6, 7, 7, 8, 9]\nx = 7\nprint(find_first_occurrence(A, x))  # Output: 5\n\nA = [1, 1, 2, 3, 3, 4, 5, 6, 7, 7, 8, 9]\nx = 4\nprint(find_first_occurrence(A, x))  # Output: 4\n\nA = [1, 1, 2, 3, 3, 4, 5, 6, 7, 7, 8, 9]\nx = 10\nprint(find_first_",
        "generated_testcode": "assert find_first_occurrence(sorted([1, 2, 3, 4, 4, 4, 4, 5, 6, 7, 7, 8, 9], 4) == 2\n",
        "test": "assert find_first_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5) == 1\nassert find_first_occurrence([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5) == 2\nassert find_first_occurrence([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6) == 4",
        "canonical_solution": "def find_first_occurrence(A, x):\r\n    (left, right) = (0, len(A) - 1)\r\n    result = -1\r\n    while left <= right:\r\n        mid = (left + right) // 2\r\n        if x == A[mid]:\r\n            result = mid\r\n            right = mid - 1\r\n        elif x < A[mid]:\r\n            right = mid - 1\r\n        else:\r\n            left = mid + 1\r\n    return result"
    },
    {
        "number": 734,
        "prompt": "Write a python function to find sum of products of all possible subarrays.\ndef sum_Of_Subarray_Prod(arr,n):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    # function to find product of subarrays\n    def prod_of_subarray(arr):\n        product = 1\n        for i in arr:\n            product *= i\n        return product\n\n    # initialize sum variable to store the sum of all products\n    sum_of_prod = 0\n    # loop through all subarrays\n    for i in range(n):\n        for j in range(i,n):\n            # calculate the product of subarray and add it to sum_of_prod\n            sum_of_prod += prod_of_subarray(arr[i:j+1])\n    return sum_of_prod\n\n# test the function with input\narr = [2,3,4,5,6,7,8]\nn = len(arr)\nprint(sum_Of_Subarray_Prod(arr,n))\n",
        "generated_testcode": "assert sum_Of_Subarray_Prod([1,2,3,4,5] , 4) == 44540\n",
        "test": "assert sum_Of_Subarray_Prod([1,2,3],3) == 20\nassert sum_Of_Subarray_Prod([1,2],2) == 5\nassert sum_Of_Subarray_Prod([1,2,3,4],4) == 84",
        "canonical_solution": "def sum_Of_Subarray_Prod(arr,n):\r\n    ans = 0\r\n    res = 0\r\n    i = n - 1\r\n    while (i >= 0):\r\n        incr = arr[i]*(1 + res)\r\n        ans += incr\r\n        res = incr\r\n        i -= 1\r\n    return (ans)"
    },
    {
        "number": 735,
        "prompt": "Write a python function to toggle bits of the number except the first and the last bit.\ndef set_middle_bits(n):  \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    n = n ^ (n & (n-1))  # Set all the adjacent bits to 1 (i.e. set all the bits to 0 except the middle bit)\n    n = n | (n+1)     # Set the middle bit to 1 (i.e. toggle the middle bit)\n    n = n ^ (n+1)    # Toggle the middle bit again\n    return n\n\n# Example usage:\nprint(set_middle_bits(10))  # Output: 13 (1010 -> 11101 -> 1011 -> 13)\nprint(set_middle_bits(5))  # Output: 6 (101 -> 1110 -> 1111 -> 7)\nprint(set_middle_bits(7))  # Output: 7 (1111 -> 1100 -> 1111)\nprint(set_middle_bits(15)) # Output: 16 (11111 -> 11100 -> 1010 -> 14)\n\n# Explanation:\n# 1010 is binary 2, after applying n = n ^ (n-1), we get 11011, then n = n | (n+1) gives 11011, finally, n = n ^ (n+1) gives 1010 which is binary 6.\n# 0101 is binary 5, after applying n",
        "generated_testcode": "assert set_middle_bits(10) == 10\n",
        "test": "assert toggle_middle_bits(9) == 15\nassert toggle_middle_bits(10) == 12\nassert toggle_middle_bits(11) == 13",
        "canonical_solution": "def set_middle_bits(n):  \r\n    n |= n >> 1; \r\n    n |= n >> 2; \r\n    n |= n >> 4; \r\n    n |= n >> 8; \r\n    n |= n >> 16;  \r\n    return (n >> 1) ^ 1\r\ndef toggle_middle_bits(n): \r\n    if (n == 1): \r\n        return 1\r\n    return n ^ set_middle_bits(n) "
    },
    {
        "number": 736,
        "prompt": "Write a function to locate the left insertion point for a specified value in sorted order.\ndef left_insertion(a, x):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    # initialize the left and right boundaries\n    left = 0\n    right = len(a) - 1\n    # while left is less than right\n    while left <= right:\n        # calculate the middle index\n        mid = (left + right) // 2\n        # if the middle value is equal to x, return it\n        if a[mid] == x:\n            return mid\n        # if the middle value is less than x, search the right half\n        elif a[mid] < x:\n            left = mid + 1\n        # otherwise, search the left half\n        else:\n            right = mid - 1\n    # return the left boundary\n    return left\n\n\n# test the function\na = [1, 3, 4, 5, 7, 8, 10, 11, 13, 17, 20, 21, 23, 26, 28, 33, 35]\nprint(left_insertion(a, 20)) # 5\nprint(left_insertion(a, 18)) # 4\nprint(left_insertion(a, 35)) # 9\nprint(left_insertion(a, 2)) # 2\nprint(left_insertion(a, 33)) # 8\nprint(left_insertion(a, 37)) # 9\nprint(left_insertion(a, 1)) # 0\nprint(left_insertion",
        "generated_testcode": "assert left_insertion(sorted([1, 2, 3, 4, 5, 6, 7, 8, 9], 4) == 2\n",
        "test": "assert left_insertion([1,2,4,5],6)==4\nassert left_insertion([1,2,4,5],3)==2\nassert left_insertion([1,2,4,5],7)==4",
        "canonical_solution": "import bisect\r\ndef left_insertion(a, x):\r\n    i = bisect.bisect_left(a, x)\r\n    return i"
    },
    {
        "number": 737,
        "prompt": "Write a function to check whether the given string is starting with a vowel or not using regex.\ndef check_str(string): \n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": true,
        "answer": "    vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n    if string[0] in vowels:\n        return True\n    else:\n        return False\n\n# Test the function with some inputs\nprint(check_str('Apple')) # True\nprint(check_str('Elephant')) # True\nprint(check_str('Banana')) # False\nprint(check_str('Hello')) # False\nprint(check_str('Orange')) # True\nprint(check_str('ant')) # False\nprint(check_str('Umbrella')) # True\nprint(check_str('Zebra')) # True",
        "generated_testcode": "assert check_str(\"apple\" ) == True\n",
        "test": "assert check_str(\"annie\") == 'Valid'\nassert check_str(\"dawood\") == 'Invalid'\nassert check_str(\"Else\") == 'Valid'",
        "canonical_solution": "import re \r\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\r\ndef check_str(string): \r\n\tif(re.search(regex, string)): \r\n\t\treturn (\"Valid\") \r\n\telse: \r\n\t\treturn (\"Invalid\") "
    },
    {
        "number": 738,
        "prompt": "Write a function to calculate the geometric sum of n-1.\ndef geometric_sum(n):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    if n == 1:\n        return 1\n    else:\n        return 1/2 * (2 ** n - 1)\n\n\nprint(geometric_sum(5))  # Output: 29.189389397987023026\nprint(geometric_sum(10)) # Output: 1570.11770612997757573\nprint(geometric_sum(3)) # Output: 1.666666666666666666666667\nprint(geometric_sum(7)) # Output: 1023.9489132717353980552",
        "generated_testcode": "assert geometric_sum(5) == 1.81664631208025325742\nprint(\"Test case passed\")\n\n# Write a function to calculate the harmonic sum of n-1\ndef harmonic_sum(n):\n    pass\n\n",
        "test": "assert geometric_sum(7) == 1.9921875\nassert geometric_sum(4) == 1.9375\nassert geometric_sum(8) == 1.99609375",
        "canonical_solution": "def geometric_sum(n):\r\n  if n < 0:\r\n    return 0\r\n  else:\r\n    return 1 / (pow(2, n)) + geometric_sum(n - 1)"
    },
    {
        "number": 739,
        "prompt": "Write a python function to find the index of smallest triangular number with n digits.\ndef find_Index(n): \n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": true,
        "answer": "    count = 0\n    num = 1\n    i = 1\n    while True:\n        i += 1\n        num += i\n        count += 1\n        if len(str(num)) == n:\n            return count\n\nprint(find_Index(3))\nprint(find_Index(5))\nprint(find_Index(10))\n\n#Output:\n#3\n#5\n#10",
        "generated_testcode": "assert find_Index(1) == 1\n",
        "test": "assert find_Index(2) == 4\nassert find_Index(3) == 14\nassert find_Index(4) == 45",
        "canonical_solution": "import math \r\ndef find_Index(n): \r\n    x = math.sqrt(2 * math.pow(10,(n - 1))); \r\n    return round(x); "
    },
    {
        "number": 740,
        "prompt": "Write a function to convert the given tuple to a key-value dictionary using adjacent elements.\ndef tuple_to_dict(test_tup):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    d = {}\n    for i in range(0, len(test_tup), 2):\n        d[test_tup[i]] = test_tup[i+1]\n    return d\n\n# Test the function with an example tuple\nt = (\"apple\", 2, \"banana\", 3, \"orange\", 4, \"grape\", 5)\nprint(tuple_to_dict(t)) # Output: {'apple': 2, 'banana': 3, 'orange': 4, 'grape': 5}\n",
        "generated_testcode": "assert tuple_to_dict((\"apple\", \"banana\", \"cherry\", \"orange\", \"grape\") == {\"apple\": \"banana\", \"cherry\": \"orange\", \"grape\": None}\n",
        "test": "assert tuple_to_dict((1, 5, 7, 10, 13, 5)) == {1: 5, 7: 10, 13: 5}\nassert tuple_to_dict((1, 2, 3, 4, 5, 6)) == {1: 2, 3: 4, 5: 6}\nassert tuple_to_dict((7, 8, 9, 10, 11, 12)) == {7: 8, 9: 10, 11: 12}",
        "canonical_solution": "def tuple_to_dict(test_tup):\r\n  res = dict(test_tup[idx : idx + 2] for idx in range(0, len(test_tup), 2))\r\n  return (res) "
    },
    {
        "number": 741,
        "prompt": "Write a python function to check whether all the characters are same or not.\ndef all_Characters_Same(s) :\n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    if len(s) <= 1 :\n        return True\n    \n    if len(set(s)) == 1 :\n        return True\n    else :\n        return False\n\n# Test the function\ns = \"aaaaa\"\nprint(all_Characters_Same(s)) # True\ns = \"abcd\"\nprint(all_Characters_Same(s)) # False\ns = \"12334\"\nprint(all_Characters_Same(s)) # False\ns = \"\"\nprint(all_Characters_Same(s)) # True\ns = \"aaabbbb\"\nprint(all_Characters_Same(s)) # False\ns = \"aaaab\"\nprint(all_Characters_Same(s)) # False\ns = \"a\"\nprint(all_Characters_Same(s)) # True\n",
        "generated_testcode": "assert all_Characters_Same(\"abcde\" ) == False\n",
        "test": "assert all_Characters_Same(\"python\") == False\nassert all_Characters_Same(\"aaa\") == True\nassert all_Characters_Same(\"data\") == False",
        "canonical_solution": "def all_Characters_Same(s) :\r\n    n = len(s)\r\n    for i in range(1,n) :\r\n        if s[i] != s[0] :\r\n            return False\r\n    return True"
    },
    {
        "number": 742,
        "prompt": "Write a function to caluclate the area of a tetrahedron.\ndef area_tetrahedron(side):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    \"\"\"\n    Calculates the area of a tetrahedron with the given side length\n    \"\"\"\n    area = (sqrt(3) * side**2)/4\n    return area\n\n# Test the function with a side length of 4\nprint(area_tetrahedron(4))\n\n\n# You can also test it with a side length of 5\nprint(area_tetrahedron(5)) ",
        "generated_testcode": "assert area_tetrahedron(3) == 10.928571427459633538\nprint(\"Test case passed\")\n\n# Write a function to calculate the volume of a tetrahedron\ndef volume_tetrahedron(side, height):\n    pass\n\n",
        "test": "assert area_tetrahedron(3)==15.588457268119894\nassert area_tetrahedron(20)==692.8203230275509\nassert area_tetrahedron(10)==173.20508075688772",
        "canonical_solution": "import math\r\ndef area_tetrahedron(side):\r\n  area = math.sqrt(3)*(side*side)\r\n  return area"
    },
    {
        "number": 743,
        "prompt": "Write a function to rotate a given list by specified number of items to the right direction.\ndef rotate_right(list1,m,n):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    if m >= len(list1):\n        return list1\n    else:\n        return list1[-m:] + list1[:-m]\n\nprint(rotate_right([1,2,3,4,5,6,7,8,9,10], 2)) # Output: [9, 10, 1, 2, 3, 4, 5, 6, 7]\nprint(rotate_right([1,2,3,4,5,6,7,8,9], 4)) # Output: [5, 6, 7, 8, 9, 1, 2, 3, 4]\nprint(rotate_right([1,2,3,4,5], 6)) # Output: [4, 5, 1, 2, 3]\n\n# Time Complexity: O(1) \n# Space Complexity: O(1)\n# Alternate Solution:\ndef rotate_right(list1, m):\n    if m >= len(list1):\n        return list1\n    else:\n        n = len(list1)\n        return list1[-m:] + list1[:-m]\n\nprint(rotate_right([1,2,3,4,5,6,7,8,9,10], 2)) # Output: [9, 10, 1, 2, 3, 4, 5, 6, 7]\nprint(rotate_right([1,2,3,",
        "generated_testcode": "assert rotate_right([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\"], 2) == [\"f\", \"g\", \"a\", \"b\", \"c\", \"d\"]\n",
        "test": "assert rotate_right([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],3,4)==[8, 9, 10, 1, 2, 3, 4, 5, 6]\nassert rotate_right([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],2,2)==[9, 10, 1, 2, 3, 4, 5, 6, 7, 8]\nassert rotate_right([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],5,2)==[6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8]",
        "canonical_solution": "def rotate_right(list1,m,n):\r\n  result =  list1[-(m):]+list1[:-(n)]\r\n  return result"
    },
    {
        "number": 744,
        "prompt": "Write a function to check if the given tuple has any none value or not.\ndef check_none(test_tup):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    for i in test_tup:\n        if i is None:\n            return True\n    return False\n\n# Test cases\nprint(check_none((1, 2, 3, None)) # True\nprint(check_none((1, 2, 3, 4)) # False\nprint(check_none((None, 2, 3)) # True\nprint(check_none((1, 2, 3, \"hello\")) # False\nprint(check_none((1, None, 3)) # True ",
        "generated_testcode": "assert check_none(()) == False\n",
        "test": "assert check_none((10, 4, 5, 6, None)) == True\nassert check_none((7, 8, 9, 11, 14)) == False\nassert check_none((1, 2, 3, 4, None)) == True",
        "canonical_solution": "def check_none(test_tup):\r\n  res = any(map(lambda ele: ele is None, test_tup))\r\n  return (res) "
    },
    {
        "number": 745,
        "prompt": "Write a function to find numbers within a given range where every number is divisible by every digit it contains.\ndef divisible_by_digits(startnum, endnum):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    numbers = []\n    for i in range(startnum, endnum+1):\n        digits = [int(d) for d in str(i)]\n        if all(i % d == 0 for d in digits):\n            numbers.append(i)\n    return numbers\n\n\n# Testing\nprint(divisible_by_digits(1000, 300))\n# Output: [120, 150, 210, 240, 300]\nprint(divisible_by_digits(10000, 30000))\n# Output: [1200, 1500, 210, 240, 280, 300, 360, 400, 600, 750, 800, 900]\nprint(divisible_by_digits(100000, 30000))\n# Output: [1200, 1500, 210, 240, 280, 300, 360, 400, 480, 600, 750, 800, 900]\nprint(divisible_by_digits(1000000, 300000))\n# Output: [1200, 150",
        "generated_testcode": "assert divisible_by_digits(100, 1000) == [10, 20, 30, 40, 50, 60, 70, 80, 90",
        "test": "assert divisible_by_digits(1,22)==[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]\nassert divisible_by_digits(1,15)==[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]\nassert divisible_by_digits(20,25)==[22, 24]",
        "canonical_solution": "def divisible_by_digits(startnum, endnum):\r\n    return [n for n in range(startnum, endnum+1) \\\r\n                if not any(map(lambda x: int(x) == 0 or n%int(x) != 0, str(n)))]"
    },
    {
        "number": 746,
        "prompt": "Write a function to find area of a sector.\ndef sector_area(r,a):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    area = r*r*a\n    return area\n\n#Write a function to find the area of a circle\ndef circle_area(r):\n    pi = 3.14159\n    area = pi * r**2\n    return area\n\n#Write a function to find the volume of a cylinder\ndef cylinder_volume(r, h):\n    pi = 3.14159\n    volume = pi * r**2 * h\n    return volume\n\n#Write a function to find the surface area of a cylinder\ndef cylinder_surface_area(r, h):\n    pi = 3.14159\n    surface_area = 2 * pi * r * (r + h)\n    return surface_area\n\n#Write a function to find the surface area of a sphere\ndef sphere_surface_area(r):\n    pi = 3.14159\n    surface_area = 4 * pi * r**2\n    return surface_area\n\n#Write a function to find the volume of a sphere\ndef sphere_volume(r):\n    pi = 3.14159\n    volume = (4/3) * pi * r**3\n    return volume\n\n#Write a function to find the surface area of a cone\ndef cone_surface_area(r, h):\n    pi = 3.14159\n    surface_area = pi * r**2 + pi * r * (r**2) ** 0.5 *",
        "generated_testcode": "assert sector_area(5, 30) == 78.5398, \"Incorrect output\"\n",
        "test": "assert sector_area(4,45)==6.285714285714286\nassert sector_area(9,45)==31.82142857142857\nassert sector_area(9,360)==None",
        "canonical_solution": "def sector_area(r,a):\r\n    pi=22/7\r\n    if a >= 360:\r\n        return None\r\n    sectorarea = (pi*r**2) * (a/360)\r\n    return sectorarea"
    },
    {
        "number": 747,
        "prompt": "Write a function to find the longest common subsequence for the given three string sequence.\ndef lcs_of_three(X, Y, Z, m, n, o): \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    # create a table to store lengths of longest common suffixes of substrings\n    L = [[0 for j in range(n+1)] for i in range(o+1)] \n    for i in range(1, o+1): \n        for j in range(1, n+1): \n            if (X[i-1] == Z[j-1]): \n                L[i][j] = L[i-1][j-1] + 1\n            else: \n                L[i][j] = max(L[i-1][j], L[i][j-1]) \n    # create a table to store the longest common subsequences\n    lcs = [[0 for j in range(n+1)] for i in range(o+1)] \n    for i in range(1, m+1): \n        for j in range(1, o+1): \n            if (X[i-1] == Z[j-1]): \n                if (L[i][j] == L[i-1][j-1] + 1): \n                    lcs[i][j] = lcs[i-1][j-1] + 1\n                else: \n                    if (L[i][j] == L[i-1][j]): \n                        lcs[i][j] = lcs[i][j-1] \n                    else: \n                        lcs[i][j] = L[i][j",
        "generated_testcode": "assert lcs_of_three(X=\"ABCDGH\", Y=\"AEDFHR\", Z=\"ADBHR\", m=4, n=4) == \"ADH\"\n",
        "test": "assert lcs_of_three('AGGT12', '12TXAYB', '12XBA', 6, 7, 5) == 2\nassert lcs_of_three('Reels', 'Reelsfor', 'ReelsforReels', 5, 8, 13) == 5 \nassert lcs_of_three('abcd1e2', 'bc12ea', 'bd1ea', 7, 6, 5) == 3",
        "canonical_solution": "def lcs_of_three(X, Y, Z, m, n, o): \r\n\tL = [[[0 for i in range(o+1)] for j in range(n+1)] \r\n\t\tfor k in range(m+1)] \r\n\tfor i in range(m+1): \r\n\t\tfor j in range(n+1): \r\n\t\t\tfor k in range(o+1): \r\n\t\t\t\tif (i == 0 or j == 0 or k == 0): \r\n\t\t\t\t\tL[i][j][k] = 0\r\n\t\t\t\telif (X[i-1] == Y[j-1] and\r\n\t\t\t\t\tX[i-1] == Z[k-1]): \r\n\t\t\t\t\tL[i][j][k] = L[i-1][j-1][k-1] + 1\r\n\t\t\t\telse: \r\n\t\t\t\t\tL[i][j][k] = max(max(L[i-1][j][k], \r\n\t\t\t\t\tL[i][j-1][k]), \r\n\t\t\t\t\t\t\t\t\tL[i][j][k-1]) \r\n\treturn L[m][n][o]"
    },
    {
        "number": 748,
        "prompt": "Write a function to put spaces between words starting with capital letters in a given string by using regex.\ndef capital_words_spaces(str1):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    # Write your code here\n    import re\n    regex = r'(?<![A-Z][a-z])(?=[A-Z])'\n    result = re.sub(regex, ' ', str1)\n    return result\n\n# Test the function with the following inputs\nprint(capital_words_spaces(\"HelloWorldThisIsAnExampleString\"))  # Output: \"Hello World This Is An Example String\"\nprint(capital_words_spaces(\"PythonIsAProgrammingLanguage\"))  # Output: \"Python Is A Programming Language\"\nprint(capital_words_spaces(\"ThisIsAExampleStringWithMixedCase\"))  # Output: \"This Is A Example String With Mixed Case\"\nprint(capital_words_spaces(\"ThisIsAnotherExampleString\"))  # Output: \"This Is Another Example String\"\nprint(capital_words_spaces(\"OneMoreExample\"))  # Output: \"One More Example\"",
        "generated_testcode": "assert capital_words_spaces(\"ThisIsAString\" ) == \"This Is A String\"\n",
        "test": "assert capital_words_spaces(\"Python\") == 'Python'\nassert capital_words_spaces(\"PythonProgrammingExamples\") == 'Python Programming Examples'\nassert capital_words_spaces(\"GetReadyToBeCodingFreak\") == 'Get Ready To Be Coding Freak'",
        "canonical_solution": "import re\r\ndef capital_words_spaces(str1):\r\n  return re.sub(r\"(\\w)([A-Z])\", r\"\\1 \\2\", str1)"
    },
    {
        "number": 749,
        "prompt": "Write a function to sort a given list of strings of numbers numerically.\ndef sort_numeric_strings(nums_str):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    def convert_num(num_str):\n        try:\n            return int(num_str)\n        except ValueError:\n            return float(num_str)\n\n\n    return sorted(nums_str, key=convert_num)\n\n\n# Test cases\nprint(sort_numeric_strings([\"5\", \"3\", \"1\", \"2\", \"10\", \"11\", \"20\", \"3\", \"100\", \"3.5\", \"4\", \"2.5\", \"100.5\", \"2.6\", \"10.3\", \"3.3\", \"3.7\", \"2.7\", \"100.6\", \"2.4\"]))\n# Output: ['1', '1', '2', '2', '2.4', '2.5', '2.6', '3', '3', '3.3', '3.5', '3.7', '10', '10', '10.3', '10.5', '20', '20']\n\nprint(sort_numeric_strings([\"-5\", \"-3\", \"1\", \"0\", \"10\", \"11\", \"-3.5\", \"4\", \"0.5\", \"10.5\", \"-2\", \"2\", \"-3.5\", \"-4\", \"-5.5\", \"2.5\", \"-1\", \"5.5\", \"2.4\"]))\n# Output: ['-5', '-5.5', '-4', '-3', '-",
        "generated_testcode": "assert sort_numeric_strings([\"10\", \"2\", \"3\", \"1\", \"5\", \"4\", \"6\", \"7\", \"8\", \"100\", \"20\", \"25\", \"1000\"] == [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"10\", \"100\", \"20\", \"25\", \"1000\"]\n",
        "test": "assert sort_numeric_strings( ['4','12','45','7','0','100','200','-12','-500'])==[-500, -12, 0, 4, 7, 12, 45, 100, 200]\nassert sort_numeric_strings(['2','3','8','4','7','9','8','2','6','5','1','6','1','2','3','4','6','9','1','2'])==[1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9]\nassert sort_numeric_strings(['1','3','5','7','1', '3','13', '15', '17','5', '7 ','9','1', '11'])==[1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17]",
        "canonical_solution": "def sort_numeric_strings(nums_str):\r\n    result = [int(x) for x in nums_str]\r\n    result.sort()\r\n    return result"
    },
    {
        "number": 750,
        "prompt": "Write a function to add the given tuple to the given list.\ndef add_tuple(test_list, test_tup):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    test_list.append(test_tup)\n    return test_list\n\n# Test the function\ntest_list = [(1, 2, 3), (4, 5, 6)]\ntest_tup = (7, 8, 9)\nresult = add_tuple(test_list, test_tup)\nprint(result)  # Output: [(1, 2, 3), (4, 5, 6), (7, 8, 9)]\n\n\n# Test the function with another tuple\ntest_list = [(\"apple\", \"banana\", \"cherry\") , (\"orange\", \"grape\", \"strawberry\")]\ntest_tup = (\"mango\", \"kiwi\")\nresult = add_tuple(test_list, test_tup)\nprint(result) # Output: [('apple', 'banana', 'cherry'), ('orange', 'grape', 'strawberry'), ('mango', 'kiwi')]\n\n# Test the function with multiple tuples\ntest_list = [(1, 2, 3), (4, 5, 6), (7, 8, 9)]\ntest_tup = (10, 11, 12)\nresult = add_tuple(test_list, test_tup)\nprint(result) # Output: [(1, 2, 3), (4, 5, 6), (7, 8, 9), (10, 11, 12)]",
        "generated_testcode": "assert add_tuple([\"apple\", \"banana\", \"cherry\"], (\"orange\", \"grape\", \"kiwi\")) == [\"apple\", \"banana\", \"cherry\", \"orange\", \"grape\", \"kiwi\"]\n",
        "test": "assert add_tuple([5, 6, 7], (9, 10)) == [5, 6, 7, 9, 10]\nassert add_tuple([6, 7, 8], (10, 11)) == [6, 7, 8, 10, 11]\nassert add_tuple([7, 8, 9], (11, 12)) == [7, 8, 9, 11, 12]",
        "canonical_solution": "def add_tuple(test_list, test_tup):\r\n  test_list += test_tup\r\n  return (test_list) "
    },
    {
        "number": 751,
        "prompt": "Write a function to check if the given array represents min heap or not.\ndef check_min_heap(arr, i):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    if i >= len(arr):\n        return True\n    left = 2 * i + 1\n    right = 2 * i + 2\n    if left < len(arr) and arr[left] < arr[i]:\n        return False\n    if right < len(arr) and arr[right] < arr[i]:\n        return False\n    return check_min_heap(arr, left) and check_min_heap(arr, right)\n\n\ndef is_min_heap(arr):\n    return check_min_heap(arr, 0)\n\n\n# Test cases\nprint(is_min_heap([3, 2, 1, 10, 15, 20, 7])) # True\nprint(is_min_heap([3, 2, 1, 10, 15, 20, 7, 2, 11, 14])) # False\nprint(is_min_heap([5, 6, 1, 4, 7, 9, 3, 2])) # False\nprint(is_min_heap([5, 6, 1, 4, 7, 9, 2, 3])) # True\n",
        "generated_testcode": "assert check_min_heap([3, 2, 1, 4, 5, 1, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20] , 0) == True\n",
        "test": "assert check_min_heap([1, 2, 3, 4, 5, 6], 0) == True\nassert check_min_heap([2, 3, 4, 5, 10, 15], 0) == True\nassert check_min_heap([2, 10, 4, 5, 3, 15], 0) == False",
        "canonical_solution": "def check_min_heap(arr, i):\r\n    if 2 * i + 2 > len(arr):\r\n        return True\r\n    left_child = (arr[i] <= arr[2 * i + 1]) and check_min_heap(arr, 2 * i + 1)\r\n    right_child = (2 * i + 2 == len(arr)) or (arr[i] <= arr[2 * i + 2] \r\n                                      and check_min_heap(arr, 2 * i + 2))\r\n    return left_child and right_child"
    },
    {
        "number": 752,
        "prompt": "Write a function to find the nth jacobsthal number.\ndef jacobsthal_num(n): \n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        return 2 * jacobsthal_num(n-1) + jacobsthal_num(n-2)\n\n\n# Test the function\nprint(jacobsthal_num(5))\n\n\n# Write a function to find the nth fibonacci number using recursion\ndef fibonacci(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fibonacci(n-1) + fibonacci(n-2)\n\n\n# Test the function\nprint(fibonacci(5))\n\n\n# Write a function to find the nth factorial using recursion\ndef factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)\n\n# Test the function\nprint(factorial(5))\n\n\n# Write a function to find the nth fibonacci number using recursion\ndef fibonacci(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fibonacci(n-1) + fibonacci(n-2)\n\n\n# Test the function\nprint(fibonacci(5))\n\n\n# Write",
        "generated_testcode": "assert jacobsthal_num(0) == 0\n",
        "test": "assert jacobsthal_num(5) == 11\nassert jacobsthal_num(2) == 1\nassert jacobsthal_num(4) == 5",
        "canonical_solution": "def jacobsthal_num(n): \r\n\tdp = [0] * (n + 1) \r\n\tdp[0] = 0\r\n\tdp[1] = 1\r\n\tfor i in range(2, n+1): \r\n\t\tdp[i] = dp[i - 1] + 2 * dp[i - 2] \r\n\treturn dp[n]"
    },
    {
        "number": 753,
        "prompt": "Write a function to find minimum k records from tuple list.\ndef min_k(test_list, K):\n",
        "checkpoint": "7B",
        "pass": 3,
        "correct": true,
        "answer": "    sorted_list = sorted(test_list, key=lambda x: x[1])\n    return sorted_list[:K]\n\n\n# Test the function\ntest_list = [(1, 2), (3, 5), (2, 3), (5, 1), (6, 7), (8, 4), (9, 9), (10, 10)]\nK = 3\nprint(min_k(test_list, K))\n\n# Output: [(2, 3), (3, 5), (1, 2)]\n\n\ntest_list = [(1, 2), (3, 5), (2, 3), (5, 1), (6, 7), (8, 4), (9, 9), (10, 10)]\nK = 2\nprint(min_k(test_list, K))\n# Output: [(2, 3), (3, 5)]",
        "generated_testcode": "assert min_k([(1, 2, 3), (4, 5, 6), (7, 8, 9), (10, 11, 12), (13, 14, 15), (16, 17, 18)], 3) == [(1, 2, 3), (4, 5, 6), (7, 8, 9)]\n",
        "test": "assert min_k([('Manjeet', 10), ('Akshat', 4), ('Akash', 2), ('Nikhil', 8)], 2) == [('Akash', 2), ('Akshat', 4)]\nassert min_k([('Sanjeev', 11), ('Angat', 5), ('Akash', 3), ('Nepin', 9)], 3) == [('Akash', 3), ('Angat', 5), ('Nepin', 9)]\nassert min_k([('tanmay', 14), ('Amer', 11), ('Ayesha', 9), ('SKD', 16)], 1) == [('Ayesha', 9)]",
        "canonical_solution": "def min_k(test_list, K):\r\n  res = sorted(test_list, key = lambda x: x[1])[:K]\r\n  return (res) "
    },
    {
        "number": 754,
        "prompt": "Write a function to find common index elements from three lists.\ndef extract_index_list(l1, l2, l3):\n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    result = []\n    for i in l1:\n        if i in l2 and i in l3:\n            result.append(l1.index(i))\n    return result\n\n# Test the function with the given example\nl1 = [1, 2, 3, 4, 5, 6, 7]\nl2 = [2, 4, 6, 8, 10]\nl3 = [4, 8, 10, 12]\nprint(extract_index_list(l1, l2, l3))  # Output: [1, 3]\n\n# Test the function with another example\nl1 = [1, 2, 3, 4, 5, 6, 7]\nl2 = [2, 4, 6, 8, 10]\nl3 = [4, 8, 10, 12]\nprint(extract_index_list(l2, l1, l3))  # Output: [0, 2, 3]\n",
        "generated_testcode": "assert extract_index_list([\"apple\", \"banana\", \"cherry\", \"orange\"], [\"apple\", \"banana\", \"cherry\", \"grape\"], [\"apple\", \"banana\", \"cherry\", \"grape\"]) == [0, 1, 2]\n",
        "test": "assert extract_index_list([1, 1, 3, 4, 5, 6, 7],[0, 1, 2, 3, 4, 5, 7],[0, 1, 2, 3, 4, 5, 7])==[1, 7]\nassert extract_index_list([1, 1, 3, 4, 5, 6, 7],[0, 1, 2, 3, 4, 6, 5],[0, 1, 2, 3, 4, 6, 7])==[1, 6]\nassert extract_index_list([1, 1, 3, 4, 6, 5, 6],[0, 1, 2, 3, 4, 5, 7],[0, 1, 2, 3, 4, 5, 7])==[1, 5]",
        "canonical_solution": "def extract_index_list(l1, l2, l3):\r\n    result = []\r\n    for m, n, o in zip(l1, l2, l3):\r\n        if (m == n == o):\r\n            result.append(m)\r\n    return result"
    },
    {
        "number": 755,
        "prompt": "Write a function to find the second smallest number in a list.\ndef second_smallest(numbers):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    if len(numbers) < 2:\n        return None\n    smallest = float('inf')\n    second_smallest = float('inf')\n    for num in numbers:\n        if num < smallest:\n            second_smallest = smallest\n            smallest = num\n        elif num < second_smallest and num != smallest:\n            second_smallest = num\n    return second_smallest\n\n\n# Test cases\nprint(second_smallest([1, 2, 3, 4, 5, 6, 7, 8, 9])) # should return 5\nprint(second_smallest([-1, -2, 0, 2, -3, 4, -5, -6])) # should return -2\nprint(second_smallest([1])) # should return None\nprint(second_smallest([1, 2, 3, 4])) # should return None\nprint(second_smallest([3, 3, 3, 3])) # should return None\nprint(second_smallest([3, 2, 3, 4, 5])) # should return 3\n\nprint(second_smallest([5, 4, 3, 2, 1])) # should return 2\nprint(second_smallest([1, 2, 3, 4, 5, 5, 6, 7, 8, 9, 10])) # should return 5\nprint(second_smallest([1, 1, 2, 2",
        "generated_testcode": "assert second_smallest([1, 2, 3, 4, 5, 6, 7, 8, 9] ) == 5\n",
        "test": "assert second_smallest([1, 2, -8, -2, 0, -2])==-2\nassert second_smallest([1, 1, -0.5, 0, 2, -2, -2])==-0.5\nassert second_smallest([2,2])==None",
        "canonical_solution": "def second_smallest(numbers):\r\n  if (len(numbers)<2):\r\n    return\r\n  if ((len(numbers)==2)  and (numbers[0] == numbers[1]) ):\r\n    return\r\n  dup_items = set()\r\n  uniq_items = []\r\n  for x in numbers:\r\n    if x not in dup_items:\r\n      uniq_items.append(x)\r\n      dup_items.add(x)\r\n  uniq_items.sort()    \r\n  return  uniq_items[1] "
    },
    {
        "number": 756,
        "prompt": "Write a function that matches a string that has an a followed by zero or one 'b'.\ndef text_match_zero_one(text):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    if 'ab' in text:\n        return True\n    elif 'a' in text:\n        return True\n    else:\n        return False\n\n# Test cases\nprint(text_match_zero_one('ab')) # True\nprint(text_match_zero_one('a')) # True\nprint(text_match_zero_one('bc')) # False\nprint(text_match_zero_one('ac')) # False\nprint(text_match_zero_one('abc')) # False\nprint(text_match_zero_one('abacad')) # True\nprint(text_match_zero_one('abab')) # True\nprint(text_match_zero_one('aaab')) # True\nprint(text_match_zero_one('ba')) # True\nprint(text_match_zero_one('abb')) # False",
        "generated_testcode": "assert text_match_zero_one(None) == False\n",
        "test": "assert text_match_zero_one(\"ac\")==('Found a match!')\nassert text_match_zero_one(\"dc\")==('Not matched!')\nassert text_match_zero_one(\"abbbba\")==('Found a match!')",
        "canonical_solution": "import re\r\ndef text_match_zero_one(text):\r\n        patterns = 'ab?'\r\n        if re.search(patterns,  text):\r\n                return 'Found a match!'\r\n        else:\r\n                return('Not matched!')"
    },
    {
        "number": 757,
        "prompt": "Write a function to count the pairs of reverse strings in the given string list.\ndef count_reverse_pairs(test_list):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][::-1] == test_list[j]:\n                count += 1\n    return count\n\n\n# Test the function\ntest_list = ['abc', 'def', 'ghi', 'cba', 'hij', 'jhi', 'jhif']\nprint(count_reverse_pairs(test_list)) # Output: 2\n\ntest_list = ['abc', 'def', 'ghi', 'cba', 'hij', 'jhif']\nprint(count_reverse_pairs(test_list)) # Output: 3\ntest_list = ['abc', 'def', 'ghi', 'cba', 'hij', 'jhif', 'xyz', 'xz']\nprint(count_reverse_pairs(test_list)) # Output: 3\ntest_list = ['abc', 'def', 'ghi', 'cba', 'hij', 'jhif', 'xyz', 'xz', 'yzx']\nprint(count_reverse_pairs(test_list)) # Output: 4\ntest_list = ['abc', 'def', 'ghi', 'cba', 'hij', 'jhif', 'xyz', 'xz', 'yzx', 'xy']\nprint(count_reverse_pairs(test_list)) # Output: 5\n\n\n# Time Complex",
        "generated_testcode": "assert count_reverse_pairs([\"abc\", \"cba\", \"def\", \"fed\", \"ghi\", \"hig\", \"cba\", \"abc\"] == 2\n",
        "test": "assert count_reverse_pairs([\"julia\", \"best\", \"tseb\", \"for\", \"ailuj\"])== '2'\nassert count_reverse_pairs([\"geeks\", \"best\", \"for\", \"skeeg\"]) == '1'\nassert count_reverse_pairs([\"makes\", \"best\", \"sekam\", \"for\", \"rof\"]) == '2' ",
        "canonical_solution": "def count_reverse_pairs(test_list):\r\n  res = sum([1 for idx in range(0, len(test_list)) for idxn in range(idx, len( \r\n\ttest_list)) if test_list[idxn] == str(''.join(list(reversed(test_list[idx]))))]) \r\n  return str(res)"
    },
    {
        "number": 758,
        "prompt": "Write a function to count number of unique lists within a list.\ndef unique_sublists(list1):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    result = set()\n    for i in range(1, len(list1) + 1):\n        for j in range(len(list1) - i + 1):\n            sub_list = list1[j:j+i]\n            result.add(tuple(sub_list))\n    return len(result)\n\n# test cases\nprint(unique_sublists([1, 2, 3, 4])) # Output: 3\nprint(unique_sublists([1, 2, 3, 4, 4])) # Output: 3\nprint(unique_sublists([1, 2, 3, 2, 4])) # Output: 3\nprint(unique_sublists([1, 2, 3, 2, 4, 2])) # Output: 3\nprint(unique_sublists([1, 2, 3, 4, 4, 5])) # Output: 6\nprint(unique_sublists([1, 2, 2, 2, 3, 3, 3])) # Output: 6\n\n\n# Time Complexity: O(n^2)\n# Space Complexity: O(n)\n# There are n * (n-1) / 2 sublists possible, we are iterating through all of them to generate tuples and add them to a set which is of size n.\n# The space complexity is O(n) as we are using a set to store unique sublists.\n",
        "generated_testcode": "assert unique_sublists([\"apple\", \"banana\", \"cherry\", \"banana\", \"apple\", \"orange\", \"cherry\", \"grape\", \"grape\"] == 3\n",
        "test": "assert unique_sublists([[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]] )=={(1, 3): 2, (5, 7): 2, (13, 15, 17): 1, (9, 11): 1}\nassert unique_sublists([['green', 'orange'], ['black'], ['green', 'orange'], ['white']])=={('green', 'orange'): 2, ('black',): 1, ('white',): 1}\nassert unique_sublists([[10, 20, 30, 40], [60, 70, 50, 50], [90, 100, 200]])=={(10, 20, 30, 40): 1, (60, 70, 50, 50): 1, (90, 100, 200): 1}",
        "canonical_solution": "def unique_sublists(list1):\r\n    result ={}\r\n    for l in  list1: \r\n        result.setdefault(tuple(l), list()).append(1) \r\n    for a, b in result.items(): \r\n        result[a] = sum(b)\r\n    return result"
    },
    {
        "number": 759,
        "prompt": "Write a function to check a decimal with a precision of 2.\ndef is_decimal(num):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    return num == round(num, 2)\n\nprint(is_decimal(2.34)) # True\nprint(is_decimal(2.345) # False\nprint(is_decimal(2.3456) # False\nprint(is_decimal(2.34567) # True\n\n\n# Another solution:\ndef is_decimal(num):\n    return round(num, 2) == num\n\n\nprint(is_decimal(2.34) # True\nprint(is_decimal(2.345) # False\nprint(is_decimal(2.3456) # False\nprint(is_decimal(2.34567) # True\n\n\n# Another solution using string and formatting:\ndef is_decimal(num):\n    return \"{0:.2f}\".format(num) == str(num)\n\nprint(is_decimal(2.34) # True\nprint(is_decimal(2.345) # False\nprint(is_decimal(2.3456) # False\nprint(is_decimal(2.34567) # True\n\n\n# Another solution using string formatting:\ndef is_decimal(num):\n    return \"{0:.2f}\".format(num) == '{0:.{1}f}'.format(num, len(str(num).split('.')[1])\nprint(is_decimal(2",
        "generated_testcode": "assert is_decimal(3.14) == True\n",
        "test": "assert is_decimal('123.11')==True\nassert is_decimal('e666.86')==False\nassert is_decimal('3.124587')==False",
        "canonical_solution": "def is_decimal(num):\r\n    import re\r\n    dnumre = re.compile(r\"\"\"^[0-9]+(\\.[0-9]{1,2})?$\"\"\")\r\n    result = dnumre.search(num)\r\n    return bool(result)"
    },
    {
        "number": 760,
        "prompt": "Write a python function to check whether an array contains only one distinct element or not.\ndef unique_Element(arr,n):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    count = [0] * 1000\n    for i in range(n):\n        count[arr[i]]+=1\n    for i in range(1000):\n        if count[i]>1:\n            return False\n    return True\n\n# Test the function with an example array\narr = [1,2,3,4,5,6,7,8,9,10,10]\nn = len(arr)\nprint(unique_Element(arr,n))\n",
        "generated_testcode": "assert unique_Element([1,2,3,4,5,6,7,8,9], 6 == True\n",
        "test": "assert unique_Element([1,1,1],3) == 'YES'\nassert unique_Element([1,2,1,2],4) == 'NO'\nassert unique_Element([1,2,3,4,5],5) == 'NO'",
        "canonical_solution": "def unique_Element(arr,n):\r\n    s = set(arr)\r\n    if (len(s) == 1):\r\n        return ('YES')\r\n    else:\r\n        return ('NO')"
    },
    {
        "number": 761,
        "prompt": "Write a function to caluclate arc length of an angle.\ndef arc_length(d,a):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    return d*(1-cos(a))\n\n# Test the function\nprint(arc_length(10,0.5)) # Output should be 5.9\nprint(arc_length(5,2.5)) # Output should be 3.7\nprint(arc_length(7,3.14)) # Output should be 4.19\n\n# Write a function to caluclate area of a sector of a circle\ndef sector_area(r,a):\n    return (r**2)*(a)/2\n\n# Test the function\nprint(sector_area(3,0.5)) # Output should be 7.85\nprint(sector_area(5,2.5)) # Output should be 45.19\nprint(sector_area(7,3.14)) # Output should be 153.86\n\n# Write a function to calculate the perimeter of a circle\ndef circle_perimeter(r):\n    return 2*3.14*r\n\n# Test the function\nprint(circle_perimeter(5)) # Output should be 31.4\nprint(circle_perimeter(7)) # Output should be 43.98\n\n# Write a function to calculate the circumference of a circle\ndef circle_circumference(r):\n    return 2*3.14*r\n\n# Test the function\nprint(circle_circumference(5)) # Output should be 31.4\nprint(circle_circum",
        "generated_testcode": "assert arc_length(1, 90) == 0.5\n",
        "test": "assert arc_length(9,45)==3.5357142857142856\nassert arc_length(9,480)==None\nassert arc_length(5,270)==11.785714285714285",
        "canonical_solution": "def arc_length(d,a):\r\n    pi=22/7\r\n    if a >= 360:\r\n        return None\r\n    arclength = (pi*d) * (a/360)\r\n    return arclength"
    },
    {
        "number": 762,
        "prompt": "Write a function to check whether the given month number contains 30 days or not.\ndef check_monthnumber_number(monthnum3):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    if monthnum3 == 2:\n        return False\n    elif monthnum3 == 4 or monthnum3 == 6 or monthnum3 == 9 or monthnum3 == 11:\n        return False\n    else:\n        return True\n\n# Take input from user\nmonthnum = int(input(\"Enter the month number: \"))\n\n# Call the function\nif check_monthnumber_number(monthnum):\n    print(\"This month has 30 days\")\nelse:\n    print(\"This month doesn't have 30 days\")\n\n\n# Example Output:\n# Enter the month number: 5\n# This month has 30 days\n\n# Enter the month number: 10\n# This month has 30 days\n# Enter the month number: 2\n# This month doesn't have 30 days\n# Enter the month number: 3\n# This month doesn't have 30 days\n# Enter the month number: 4\n# This month has 30 days\n# Enter the month number: 7\n# This month has 30 days\n# Enter the month number: 8\n# This month has 30 days\n# Enter the month number: 9\n# This month has 30 days\n# Enter the month number: 12\n# This month has 30 days\n# Enter the month number: 1\n# This month doesn't have 30 days\n# Enter the month number: 13\n# This month doesn't have 30 days\n#",
        "generated_testcode": "assert check_monthnumber_number(2) == True\n",
        "test": "assert check_monthnumber_number(6)==True\nassert check_monthnumber_number(2)==False\nassert check_monthnumber_number(12)==False",
        "canonical_solution": "def check_monthnumber_number(monthnum3):\r\n  if(monthnum3==4 or monthnum3==6 or monthnum3==9 or monthnum3==11):\r\n    return True\r\n  else:\r\n    return False"
    },
    {
        "number": 763,
        "prompt": "Write a python function to find the minimum difference between any two elements in a given array.\ndef find_Min_Diff(arr,n): \n",
        "checkpoint": "7B",
        "pass": 3,
        "correct": true,
        "answer": "    arr.sort()\n    min_diff = abs(arr[1]-arr[0])\n    for i in range(1,n-1):\n        diff = arr[i+1]-arr[i]\n        if diff < min_diff:\n            min_diff = diff\n    return min_diff\n\n#Testing the function\narr = [4, 6, 1, 3, 9, 8, 7, 5, 2]\nn = len(arr)\nprint(\"Minimum difference between any two elements in the array is: \", find_Min_Diff(arr,n))\n\n#Output: Minimum difference between any two elements in the array is: 1 ",
        "generated_testcode": "assert find_Min_Diff([1, 3, 10, 2, 6, 4, 11, 8, 12, 7], 6) == 1\n",
        "test": "assert find_Min_Diff((1,5,3,19,18,25),6) == 1\nassert find_Min_Diff((4,3,2,6),4) == 1\nassert find_Min_Diff((30,5,20,9),4) == 4",
        "canonical_solution": "def find_Min_Diff(arr,n): \r\n    arr = sorted(arr) \r\n    diff = 10**20 \r\n    for i in range(n-1): \r\n        if arr[i+1] - arr[i] < diff: \r\n            diff = arr[i+1] - arr[i]  \r\n    return diff "
    },
    {
        "number": 764,
        "prompt": "Write a python function to count numeric values in a given string.\ndef number_ctr(str):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    count = 0\n    for i in str:\n        if i.isdigit():\n            count += 1\n    return count\n\n#Example usage:\nstr = \"There are 10 apples in the basket\"\nprint(number_ctr(str)) # Output: 2\n\nstr = \"The number of the beans is 5\"\nprint(number_ctr(str)) # Output: 1\n\nstr = \"The price is $100.99\"\nprint(number_ctr(str)) # Output: 2\n\nstr = \"This string doesn't have any numbers\"\nprint(number_ctr(str)) # Output: 0\n\n",
        "generated_testcode": "assert number_ctr(123abc) == 1\n",
        "test": "assert number_ctr('program2bedone') == 1\nassert number_ctr('3wonders') ==1\nassert number_ctr('123') == 3",
        "canonical_solution": "def number_ctr(str):\r\n      number_ctr= 0\r\n      for i in range(len(str)):\r\n          if str[i] >= '0' and str[i] <= '9': number_ctr += 1     \r\n      return  number_ctr"
    },
    {
        "number": 765,
        "prompt": "Write a function to find nth polite number.\ndef is_polite(n): \n",
        "checkpoint": "7B",
        "pass": 4,
        "correct": true,
        "answer": "    return n in [1, 2] or n == 3 or n % 2 == 0 and n % 3 != 0\n\ndef nth_polite_number(n):\n    count = 0\n    num = 1\n    i = 1\n    while count < n:\n        num += 1\n        if is_polite(num):\n            count += 1\n        if count == n:\n            return num\n    return -1\n\n# Test cases\nprint(nth_polite_number(1))  # Output: 1\nprint(nth_polite_number(2)) # Output: 2\nprint(nth_polite_number(3)) # Output: 2\nprint(nth_polite_number(4)) # Output: 3\nprint(nth_polite_number(5)) # Output: 4\nprint(nth_polite_number(6)) # Output: 6\nprint(nth_polite_number(7)) # Output: 8\nprint(nth_polite_number(10)) # Output: 12",
        "generated_testcode": "assert is_polite(1) == True\n",
        "test": "assert is_polite(7) == 11\nassert is_polite(4) == 7\nassert is_polite(9) == 13",
        "canonical_solution": "import math \r\ndef is_polite(n): \r\n\tn = n + 1\r\n\treturn (int)(n+(math.log((n + math.log(n, 2)), 2))) "
    },
    {
        "number": 766,
        "prompt": "Write a function to iterate over all pairs of consecutive items in a given list.\ndef pair_wise(l1):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    for i in range(len(l1)-1):\n        yield (l1[i],l1[i+1])\n\n\n# Test the function\nl1 = [1, 2, 3, 4, 5, 6, 7]\nfor a, b in pair_wise(l1):\n    print(a, b)\n\n# Output: \n# 1 2\n# 2 3\n# 3 4\n# 4 5\n# 5 6\n# 6 7\n",
        "generated_testcode": "assert pair_wise([\"a\", \"b\", \"c\", \"d\", \"e\"] == [(\"a\", \"b\"), (\"b\", \"c\"), (\"c\", \"d\"), (\"d\", \"e\")]\n",
        "test": "assert pair_wise([1,1,2,3,3,4,4,5])==[(1, 1), (1, 2), (2, 3), (3, 3), (3, 4), (4, 4), (4, 5)]\nassert pair_wise([1,5,7,9,10])==[(1, 5), (5, 7), (7, 9), (9, 10)]\nassert pair_wise([1,2,3,4,5,6,7,8,9,10])==[(1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 7), (7, 8), (8, 9), (9, 10)]",
        "canonical_solution": "def pair_wise(l1):\r\n    temp = []\r\n    for i in range(len(l1) - 1):\r\n        current_element, next_element = l1[i], l1[i + 1]\r\n        x = (current_element, next_element)\r\n        temp.append(x)\r\n    return temp"
    },
    {
        "number": 767,
        "prompt": "Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019.\ndef get_Pairs_Count(arr,n,sum):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    count = 0\n    count_map = {}\n    for i in range(n):\n        count_map[arr[i]] = i\n    for i in range(n):\n        complement = sum - arr[i]\n        if complement in count_map and count_map[complement] != i:\n            count += 1\n    return count // 2\n\n# Test the function with the given test cases\narr = [1, 5, 3, 7, 4, 6, 2, 8, 9]\nsum = 10\nprint(get_Pairs_Count(arr,len(arr),sum))\n\narr = [1, 2, 3, 4, 5, 6]\nsum = 7\nprint(get_Pairs_Count(arr,len(arr),sum))\n\narr = [1, 2, 3, 4, 5, 6]\nsum = 5\nprint(get_Pairs_Count(arr,len(arr),sum))\n\narr = [1, 2, 3, 4, 5, 6]\nsum = 10\nprint(get_Pairs_Count(arr,len(arr),sum)) ",
        "generated_testcode": "assert get_Pairs_Count([1,2,3,4,5,6,7,8,9], 10, 10) == 2\n",
        "test": "assert get_Pairs_Count([1,1,1,1],4,2) == 6\nassert get_Pairs_Count([1,5,7,-1,5],5,6) == 3\nassert get_Pairs_Count([1,-2,3],3,1) == 1",
        "canonical_solution": "def get_Pairs_Count(arr,n,sum):\r\n    count = 0  \r\n    for i in range(0,n):\r\n        for j in range(i + 1,n):\r\n            if arr[i] + arr[j] == sum:\r\n                count += 1\r\n    return count"
    },
    {
        "number": 768,
        "prompt": "Write a python function to check for odd parity of a given number.\ndef check_Odd_Parity(x): \n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    # Convert the number to binary string\n    binary_x = bin(x) \n    binary_x = binary_x[2:] \n    # Count the number of 1's in binary string\n    count = 0\n    for i in binary_x: \n        if i == '1': \n            count += 1\n    # If count is odd, return True, else return False\n    if count % 2 != 0: \n        return True\n    else: \n        return False\n\n# Test the function\nprint(check_Odd_Parity(7)) # True\nprint(check_Odd_Parity(12)) # False\nprint(check_Odd_Parity(15)) # True ",
        "generated_testcode": "assert check_Odd_Parity(1) == True\n",
        "test": "assert check_Odd_Parity(13) == True\nassert check_Odd_Parity(21) == True\nassert check_Odd_Parity(18) == False",
        "canonical_solution": "def check_Odd_Parity(x): \r\n    parity = 0\r\n    while (x != 0): \r\n        x = x & (x - 1) \r\n        parity += 1\r\n    if (parity % 2 == 1): \r\n        return True\r\n    else: \r\n        return False"
    },
    {
        "number": 769,
        "prompt": "Write a python function to get the difference between two lists.\ndef Diff(li1,li2):\n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    diff = []\n    for i in li1:\n        if i not in li2:\n            diff.append(i)\n    return diff\n\n# Test the function with the sample inputs\nli1 = [1,2,3,4,5,6,7,8,9]\nli2 = [3,4,5,6,7,8,9,10]\nprint(Diff(li1,li2)) ",
        "generated_testcode": "assert Diff([1,2,3,4,5], [3,4,5,6,7] ) == [1,2]\n",
        "test": "assert (Diff([10, 15, 20, 25, 30, 35, 40], [25, 40, 35])) == [10, 20, 30, 15]\nassert (Diff([1,2,3,4,5], [6,7,1])) == [2,3,4,5,6,7]\nassert (Diff([1,2,3], [6,7,1])) == [2,3,6,7]",
        "canonical_solution": "def Diff(li1,li2):\r\n    return (list(list(set(li1)-set(li2)) + list(set(li2)-set(li1))))\r\n "
    },
    {
        "number": 770,
        "prompt": "Write a python function to find the sum of fourth power of first n odd natural numbers.\ndef odd_Num_Sum(n) : \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    sum = 0\n    for i in range(1,n+1,2) : \n        sum = sum + i**4\n    return sum ",
        "generated_testcode": "assert odd_Num_Sum(5) == 225\n",
        "test": "assert odd_Num_Sum(2) == 82\nassert odd_Num_Sum(3) == 707\nassert odd_Num_Sum(4) == 3108",
        "canonical_solution": "def odd_Num_Sum(n) : \r\n    j = 0\r\n    sm = 0\r\n    for i in range(1,n + 1) : \r\n        j = (2*i-1) \r\n        sm = sm + (j*j*j*j)   \r\n    return sm "
    },
    {
        "number": 771,
        "prompt": "Write a function to check if the given expression is balanced or not.\ndef check_expression(exp):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    stack = []\n    for char in exp:\n        if char in ['(', '[', '{', '(']:\n            stack.append(char)\n        elif char in [')', ']', '}']:\n            if not stack:\n                return False\n            if char == ')' and stack[-1] == '(':\n                stack.pop()\n            elif char == ']' and stack[-1] == '[':\n                stack.pop()\n            elif char == '}' and stack[-1] == '{':\n                stack.pop()\n            else:\n                return False\n    return len(stack) == 0\n\n\n# Test cases\nprint(check_expression('{{([][])}()}')) # True\nprint(check_expression('{[}]')) # False\nprint(check_expression('({[({[]})]})')) # True\nprint(check_expression('({[({[])})]})')) # False\nprint(check_expression('(({[])})')) # True\nprint(check_expression('({[]}')) # False\nprint(check_expression('({)}')) # False\nprint(check_expression('{[}')) # False\nprint(check_expression('{{}}')) # True\nprint(check_expression('({[({[])})') # False\nprint(check_expression('({[({])})')) # False\nprint(check_expression('({[({})]') # False\nprint(check_expression('{{{')) # False\nprint(check_expression('}{')) # False\nprint(check_expression('({",
        "generated_testcode": "assert check_expression(str) == True # Test case 1\n",
        "test": "assert check_expression(\"{()}[{}]\") == True\nassert check_expression(\"{()}[{]\") == False\nassert check_expression(\"{()}[{}][]({})\") == True",
        "canonical_solution": "from collections import deque\r\ndef check_expression(exp):\r\n    if len(exp) & 1:\r\n        return False\r\n    stack = deque()\r\n    for ch in exp:\r\n        if ch == '(' or ch == '{' or ch == '[':\r\n            stack.append(ch)\r\n        if ch == ')' or ch == '}' or ch == ']':\r\n            if not stack:\r\n                return False\r\n            top = stack.pop()\r\n            if (top == '(' and ch != ')') or (top == '{' and ch != '}' or (top == '[' and ch != ']')):\r\n                return False\r\n    return not stack"
    },
    {
        "number": 772,
        "prompt": "Write a function to remove all the words with k length in the given string.\ndef remove_length(test_str, K):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    return \" \".join([word for word in test_str.split() if len(word) != K])\n\n\n# Test the function with the given test case\ntest_str = \"This is a test string with some words of length 3 and 4\"\nK = 3\nprint(remove_length(test_str, K)) # Expected output: \"is string with some 4 and\"\n\n\n# Test the function with the given test case\ntest_str = \"Hello there world I am a string\"\nK = 5\nprint(remove_length(test_str, K)) # Expected output: \"Hello there I am\"\n\n\n# Test the function with the given test case\ntest_str = \"Python is a high-level, interpreted programming language created by Guido van Rossum and first released in 19989\"\nK = 6\nprint(remove_length(test_str, K) # Expected output: \"Python level programming language created Guido van first released in 1989\"\n\n\n# Test the function with the given test case\ntest_str = \"This is a test string with some words of length 3 and 4\"\nK = 4\nprint(remove_length(test_str, K) # Expected output: \"This is a test string with some words of 3 and\"\n\n\n# Test the function with the given test case\ntest_str = \"Python is a high-level, interpreted programming language created by Guido van Rossum and first released in 1989\"\nK",
        "generated_testcode": "assert remove_length(test_str=\"This is a test string\", K=2) == \"is test string\"\n",
        "test": "assert remove_length('The person is most value tet', 3) == 'person is most value'\nassert remove_length('If you told me about this ok', 4) == 'If you me about ok'\nassert remove_length('Forces of darkeness is come into the play', 4) == 'Forces of darkeness is the'",
        "canonical_solution": "def remove_length(test_str, K):\r\n  temp = test_str.split()\r\n  res = [ele for ele in temp if len(ele) != K]\r\n  res = ' '.join(res)\r\n  return (res) "
    },
    {
        "number": 773,
        "prompt": "Write a function to find the occurrence and position of the substrings within a string.\ndef occurance_substring(text,pattern):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    count=0\n    positions=[]\n    for i in range(len(text)-len(pattern)+1):\n        if text[i:i+len(pattern)].lower()==pattern.lower():\n            count+=1\n            positions.append(i)\n    return count,positions\n\n# Example usage:\ntext=\"hello world\"\npattern=\"o\"\nresult=occurance_substring(text,pattern)\nprint(result) # Output: (1, [4]\n\ntext=\"Hello World\"\npattern=\"lo\"\nresult=occurance_substring(text,pattern)\nprint(result) # Output: (1, [2]\n\ntext=\"The quick brown fox jumps over the lazy dog\"\npattern=\"o\"\nresult=occurance_substring(text,pattern)\nprint(result) # Output: (2, [4, 13]\n\ntext=\"The quick brown fox jumps over the lazy dog\"\npattern=\"o\"\nresult=occurance_substring(text,pattern)\nprint(result) # Output: (2, [4, 13]\n\ntext=\"The quick brown fox jumps over the lazy dog\"\npattern=\"lazy\"\nresult=occurance_substring(text,pattern)\nprint(result) # Output: (1, [20]\n\ntext=\"The quick brown fox jumps over the lazy dog\"\npattern=\"z\"\nresult=occurance_substring(text,pattern)\nprint(result) # Output: (0, [",
        "generated_testcode": "assert occurance_substring(text=\"hello world\", pattern=\"llo\") == [(1, 2), (3, 3)]\n",
        "test": "assert occurance_substring('python programming, python language','python')==('python', 0, 6)\nassert occurance_substring('python programming,programming language','programming')==('programming', 7, 18)\nassert occurance_substring('python programming,programming language','language')==('language', 31, 39)",
        "canonical_solution": "import re\r\ndef occurance_substring(text,pattern):\r\n for match in re.finditer(pattern, text):\r\n    s = match.start()\r\n    e = match.end()\r\n    return (text[s:e], s, e)"
    },
    {
        "number": 774,
        "prompt": "Write a function to check if the string is a valid email address or not using regex.\ndef check_email(email): \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    # write your code here\n    import re\n    regex = r'^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$'\n    if re.search(regex, email):\n        return True\n    else:\n        return False\n\n# test the function with sample email addresses\nprint(check_email(\"test@test.com\")) # True\nprint(check_email(\"test123@test.co.in\")) # True\nprint(check_email(\"test.test@test.co.in\")) # True\nprint(check_email(\"test@test.co.in\")) # True\nprint(check_email(\"test@test.com.\")) # False\nprint(check_email(\"test@.com\")) # False\nprint(check_email(\"test@test\")) # False\nprint(check_email(\"test@test.co..in\")) # False\nprint(check_email(\"test@test.com.in\")) # True\nprint(check_email(\"test@test.co.in.\")) # False\nprint(check_email(\"test@test.in\")) # False\nprint(check_email(\"test@test-test.com\")) # True\nprint(check_email(\"test@test_test.com\")) # False\nprint(check_email(\"test@test.co\")) # False\nprint(check_email(\"test@test.c\")) # False\n\n\n# Test Cases\n# Test Case 1\nassert check_",
        "generated_testcode": "assert check_email(None) == False\n",
        "test": "assert check_email(\"ankitrai326@gmail.com\") == 'Valid Email'\nassert check_email(\"my.ownsite@ourearth.org\") == 'Valid Email'\nassert check_email(\"ankitaoie326.com\") == 'Invalid Email'",
        "canonical_solution": "import re \r\nregex = '^[a-z0-9]+[\\._]?[a-z0-9]+[@]\\w+[.]\\w{2,3}$'\r\ndef check_email(email): \r\n\tif(re.search(regex,email)): \r\n\t\treturn (\"Valid Email\") \r\n\telse: \r\n\t\treturn (\"Invalid Email\") "
    },
    {
        "number": 775,
        "prompt": "Write a python function to check whether every odd index contains odd numbers of a given list.\ndef odd_position(nums):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    for i in range(1, len(nums), 2):\n        if nums[i] % 2 == 0:\n            return False\n    return True\n\n# Testing\nprint(odd_position([1, 2, 3, 4, 5, 6, 7, 8, 9])) # True\nprint(odd_position([1, 2, 3, 4, 6, 8, 10, 12])) # False\nprint(odd_position([1, 2, 4, 6, 8, 10])) # False\nprint(odd_position([1, 3, 5, 7, 9, 11])) # True\n",
        "generated_testcode": "assert odd_position([1,2,3,4,5,6,7,8,9] ) == True\n",
        "test": "assert odd_position([2,1,4,3,6,7,6,3]) == True\nassert odd_position([4,1,2]) == True\nassert odd_position([1,2,3]) == False",
        "canonical_solution": "def odd_position(nums):\r\n\treturn all(nums[i]%2==i%2 for i in range(len(nums)))"
    },
    {
        "number": 776,
        "prompt": "Write a function to count those characters which have vowels as their neighbors in the given string.\ndef count_vowels(test_str):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n    count = 0\n    for i in range(len(test_str)-1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n    return count\n\n# Test cases\nprint(count_vowels(\"hello\")) # Output: 1\nprint(count_vowels(\"world\")) # Output: 0\nprint(count_vowels(\"aei\")) # Output: 1\nprint(count_vowels(\"Aeiou\")) # Output: 2\nprint(count_vowels(\"AeiOu\")) # Output: 3\nprint(count_vowels(\"aeiou\")) # Output: 4\nprint(count_vowels(\"AEIOU\")) # Output: 4\nprint(count_vowels(\"\")) # Output: 0\n\n\n# Edge cases\nprint(count_vowels(\"aeiA\")) # Output: 1\nprint(count_vowels(\"aEIOU\")) # Output: 4",
        "generated_testcode": "assert count_vowels(test_str=\"hello\") == 1\n",
        "test": "assert count_vowels('bestinstareels') == 7\nassert count_vowels('partofthejourneyistheend') == 12\nassert count_vowels('amazonprime') == 5",
        "canonical_solution": "def count_vowels(test_str):\r\n  res = 0\r\n  vow_list = ['a', 'e', 'i', 'o', 'u']\r\n  for idx in range(1, len(test_str) - 1):\r\n    if test_str[idx] not in vow_list and (test_str[idx - 1] in vow_list or test_str[idx + 1] in vow_list):\r\n      res += 1\r\n  if test_str[0] not in vow_list and test_str[1] in vow_list:\r\n    res += 1\r\n  if test_str[-1] not in vow_list and test_str[-2] in vow_list:\r\n    res += 1\r\n  return (res) "
    },
    {
        "number": 777,
        "prompt": "Write a python function to find the sum of non-repeated elements in a given array.\ndef find_Sum(arr,n): \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    sum = 0\n    hash_map = {}\n    for i in range(n):\n        if arr[i] not in hash_map:\n            hash_map[arr[i]] = 1\n        else:\n            hash_map[arr[i]] += 1\n    for i in range(n):\n        if hash_map[arr[i]] == 1:\n            sum += arr[i]\n    return sum\n\n#Example usage:\narr = [1,2,3,2,4,5,3,5,6,6,7,8,9,8]\nn = len(arr)\nprint(find_Sum(arr,n)) # Output: 12\n\narr = [1,2,3,4,5,6,7,8,9,10]\nn = len(arr)\nprint(find_Sum(arr,n)) # Output: 15\n\narr = [1,2,3,4,5,6,7,8,9]\nn = len(arr)\nprint(find_Sum(arr,n)) # Output: 15\n\narr = [1,2,3,4,5,6,7,8,9,10,10]\nn = len(arr)\nprint(find_Sum(arr,n)) # Output: 24\n\n#Explanation:\n#In the first example, the non-repeated elements are 1,4,7,9 and their sum is 12.",
        "generated_testcode": "assert find_Sum([1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9] , 12) == 26\n",
        "test": "assert find_Sum([1,2,3,1,1,4,5,6],8) == 21\nassert find_Sum([1,10,9,4,2,10,10,45,4],9) == 71\nassert find_Sum([12,10,9,45,2,10,10,45,10],9) == 78",
        "canonical_solution": "def find_Sum(arr,n): \r\n    arr.sort() \r\n    sum = arr[0] \r\n    for i in range(0,n-1): \r\n        if (arr[i] != arr[i+1]): \r\n            sum = sum + arr[i+1]   \r\n    return sum"
    },
    {
        "number": 778,
        "prompt": "Write a function to pack consecutive duplicates of a given list elements into sublists.\ndef pack_consecutive_duplicates(list1):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    packed_list = []\n    sublist = []\n    for i in range(len(list1)):\n        if i == 0:\n            sublist.append(list1[i])\n        elif list1[i] == list1[i-1]:\n            sublist.append(list1[i])\n        else:\n            packed_list.append(sublist)\n            sublist = [list1[i]]\n    packed_list.append(sublist)\n    return packed_list\n\n\nprint(pack_consecutive_duplicates([1, 1, 2, 2, 2, 3, 3, 3, 3, 4, 5, 5, 5, 5]))\nprint(pack_consecutive_duplicates([1, 2, 2, 3, 3, 3, 4, 5, 5, 6, 6, 6]))\nprint(pack_consecutive_duplicates([]))\nprint(pack_consecutive_duplicates([1, 1, 1, 1, 1, 1]))\n\n\n# Output\n# [[1, 1], [2, 2, 2], [3, 3, 3], [3], [4], [5, 5, 5], [6, 6]]\n# [[1, 1], [2, 2], [3, 3], [4], [5, 5, 5], [6",
        "generated_testcode": "assert pack_consecutive_duplicates([\"a\", \"a\", \"a\", \"a\", \"a\", \"b\", \"b\", \"b\", \"c\", \"c\", \"c\", \"c\", \"c\", \"a\", \"a\", \"a\"] == [[\"a\", [\"a\", \"a\", \"a\"], \"b\", [\"b\", \"b\"], [\"c\", \"c\", \"c\", \"c\"], \"a\", [\"a\", \"a\"]]\nprint(pack_consecutive_duplicates([\"a\", \"a\", \"a\", \"a\", \"b\", \"b\", \"b\", \"c\", \"c\", \"c\", \"c\", \"c\", \"a\", \"a\", \"a\"]))\n\n# Output: [[\"a\", [\"a\", \"a\", \"a\"], \"b\", [\"b\", \"b\"], [\"c\", \"c\", \"c\", \"c\"], \"a\", [\"a\", \"a\"]] ",
        "test": "assert pack_consecutive_duplicates([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4])==[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]\nassert pack_consecutive_duplicates([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10])==[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]\nassert pack_consecutive_duplicates(['a', 'a', 'b', 'c', 'd', 'd'])==[['a', 'a'], ['b'], ['c'], ['d', 'd']]",
        "canonical_solution": "from itertools import groupby\r\ndef pack_consecutive_duplicates(list1):\r\n    return [list(group) for key, group in groupby(list1)]"
    },
    {
        "number": 779,
        "prompt": "Write a function to count the number of unique lists within a list.\ndef unique_sublists(list1):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    from itertools import chain\n    # create a set of all possible unique sublists\n    sublists = set(chain.from_iterable(set(itertools.permutations(list1, r) for r in range(len(list1)+1)))\n    # count the number of sublists in the set\n    return len(sublists)\n\n# Test cases\nprint(unique_sublists([1, 2, 3, 4])) # Output: 12\nprint(unique_sublists([1, 2, 3, 2, 4])) # Output: 12\nprint(unique_sublists([1, 2, 3])) # Output: 7\nprint(unique_sublists([1, 2, 3, 2, 4, 4])) # Output: 12\nprint(unique_sublists([1, 2, 3, 2, 4, 4, 4])) # Output: 12\nprint(unique_sublists([1, 2, 3, 2, 4, 4, 4, 5])) # Output: 21",
        "generated_testcode": "assert unique_sublists([\"apple\", \"banana\", \"cherry\", \"banana\", \"apple\", \"orange\", \"kiwi\", \"kiwi\"] == 3\n",
        "test": "assert unique_sublists([[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]])=={(1, 3): 2, (5, 7): 2, (13, 15, 17): 1, (9, 11): 1}\nassert unique_sublists([['green', 'orange'], ['black'], ['green', 'orange'], ['white']])=={('green', 'orange'): 2, ('black',): 1, ('white',): 1}\nassert unique_sublists([[1, 2], [3, 4], [4, 5], [6, 7]])=={(1, 2): 1, (3, 4): 1, (4, 5): 1, (6, 7): 1}",
        "canonical_solution": "def unique_sublists(list1):\r\n    result ={}\r\n    for l in list1: \r\n        result.setdefault(tuple(l), list()).append(1) \r\n    for a, b in result.items(): \r\n        result[a] = sum(b)\r\n    return result"
    },
    {
        "number": 780,
        "prompt": "Write a function to find the combinations of sums with tuples in the given tuple list.\ndef find_combinations(test_list):\n",
        "checkpoint": "7B",
        "pass": 3,
        "correct": true,
        "answer": "    result = []\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            for k in range(j+1, len(test_list)):\n                result.append((test_list[i], test_list[j], test_list[k]))\n    return result\n\ntest_list = (1,2,3,4,5)\nprint(find_combinations(test_list))\n#Output: [(1, 2, 3), (1, 2, 4), (1, 2, 5), (1, 3, 4), (1, 3, 5), (1, 4, 5), (2, 3, 4), (2, 3, 5), (2, 4, 5), (3, 4, 5)]\n\n#Explanation: \n#The function takes a tuple as input and generates all possible tuples with two and three elements from the tuple.\n#The tuples are added to the result list.\n#In this example, the input tuple is (1, 2, 3, 4, 5). \n#The output is a list of tuples containing combinations of three elements from the input tuple. \n#The first tuple contains (1, 2, 3), the second tuple contains (1, 2, 4) and so on. ",
        "generated_testcode": "assert find_combinations(()) == []\n",
        "test": "assert find_combinations([(2, 4), (6, 7), (5, 1), (6, 10)]) == [(8, 11), (7, 5), (8, 14), (11, 8), (12, 17), (11, 11)]\nassert find_combinations([(3, 5), (7, 8), (6, 2), (7, 11)]) == [(10, 13), (9, 7), (10, 16), (13, 10), (14, 19), (13, 13)]\nassert find_combinations([(4, 6), (8, 9), (7, 3), (8, 12)]) == [(12, 15), (11, 9), (12, 18), (15, 12), (16, 21), (15, 15)]",
        "canonical_solution": "from itertools import combinations \r\ndef find_combinations(test_list):\r\n  res = [(b1 + a1, b2 + a2) for (a1, a2), (b1, b2) in combinations(test_list, 2)]\r\n  return (res) "
    },
    {
        "number": 781,
        "prompt": "Write a python function to check whether the count of divisors is even or odd.\ndef count_Divisors(n) : \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    divisors = 0\n    for i in range(1, n+1) : \n        if n % i == 0 : \n            divisors += 1\n    if divisors % 2 == 0 : \n        return \"Even\"\n    else : \n        return \"Odd\"\n\n\n# Taking input from user\nn = int(input(\"Enter a number : \"))\nprint(count_Divisors(n)) ",
        "generated_testcode": "assert count_Divisors(12) == 4 # True\n",
        "test": "assert count_Divisors(10) == \"Even\"\nassert count_Divisors(100) == \"Odd\"\nassert count_Divisors(125) == \"Even\"",
        "canonical_solution": "import math \r\ndef count_Divisors(n) : \r\n    count = 0\r\n    for i in range(1, (int)(math.sqrt(n)) + 2) : \r\n        if (n % i == 0) : \r\n            if( n // i == i) : \r\n                count = count + 1\r\n            else : \r\n                count = count + 2\r\n    if (count % 2 == 0) : \r\n        return (\"Even\") \r\n    else : \r\n        return (\"Odd\") "
    },
    {
        "number": 782,
        "prompt": "Write a python function to find the sum of all odd length subarrays.\ndef Odd_Length_Sum(arr):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    n=len(arr)\n    if n<=1:\n        return 0\n    else:\n        s=0\n        for i in range(n):\n            for j in range(i+1,n):\n                if (j-i+1)%2!=0:\n                    s+=sum(arr[i:j+1])\n        return s\n\n# Driver code\narr=[1,2,3,4,5,6,7,8,9]\nprint(Odd_Length_Sum(arr)) # Output: 25\n\narr=[1,2,3,4,5,6,7,8,9,10,11]\nprint(Odd_Length_Sum(arr)) # Output: 36\narr=[1,2,3,4,5,6,7,8,9,10,11,12,13]\nprint(Odd_Length_Sum(arr)) # Output: 33\n",
        "generated_testcode": "assert Odd_Length_Sum([1,2,3,4,5,6,7,8,9] ) == 25\n",
        "test": "assert Odd_Length_Sum([1,2,4]) == 14\nassert Odd_Length_Sum([1,2,1,2]) == 15\nassert Odd_Length_Sum([1,7]) == 8",
        "canonical_solution": "def Odd_Length_Sum(arr):\r\n    Sum = 0\r\n    l = len(arr)\r\n    for i in range(l):\r\n        Sum += ((((i + 1) *(l - i) + 1) // 2) * arr[i])\r\n    return Sum"
    },
    {
        "number": 783,
        "prompt": "Write a function to convert rgb color to hsv color.\ndef rgb_to_hsv(r, g, b):\n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    r, g, b = r/2555.0, g/2555.0, b/2555.0\n    cmax, cmin = max(r, g, b), min(r, g, b)\n    delta = cmax - cmin\n    if delta == 0:\n        h = 0\n    elif cmax == r:\n        h = (g - b) / delta % 6\n    elif cmax == g:\n        h = (b - r) / delta + 2\n    else:\n        h = (r - g) / delta + 4\n    h = round(h * 60)\n    if cmax == 0:\n        s = 0\n    else:\n        s = delta / cmax\n    v = cmax\n    return h, s, v\n\n\n# Test the function with some sample values\nprint(rgb_to_hsv(2555, 0, 0))  # Output: (0, 1.0, 1.0)\nprint(rgb_to_hsv(0, 2555, 0))  # Output: (120, 1.0, 1.0)\nprint(rgb_to_hsv(0, 0, 2555))  # Output: (240, 1.0, 1.0)\nprint(rgb_to_hsv(2555, 255, 0))  # Output",
        "generated_testcode": "assert rgb_to_hsv(2555, 0, 0) == (0, 1, 1)\n",
        "test": "assert rgb_to_hsv(255, 255, 255)==(0, 0.0, 100.0)\nassert rgb_to_hsv(0, 215, 0)==(120.0, 100.0, 84.31372549019608)\nassert rgb_to_hsv(10, 215, 110)==(149.26829268292684, 95.34883720930233, 84.31372549019608)",
        "canonical_solution": "def rgb_to_hsv(r, g, b):\r\n    r, g, b = r/255.0, g/255.0, b/255.0\r\n    mx = max(r, g, b)\r\n    mn = min(r, g, b)\r\n    df = mx-mn\r\n    if mx == mn:\r\n        h = 0\r\n    elif mx == r:\r\n        h = (60 * ((g-b)/df) + 360) % 360\r\n    elif mx == g:\r\n        h = (60 * ((b-r)/df) + 120) % 360\r\n    elif mx == b:\r\n        h = (60 * ((r-g)/df) + 240) % 360\r\n    if mx == 0:\r\n        s = 0\r\n    else:\r\n        s = (df/mx)*100\r\n    v = mx*100\r\n    return h, s, v"
    },
    {
        "number": 784,
        "prompt": "Write a function to find the product of first even and odd number of a given list.\ndef mul_even_odd(list1):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    even_product = 1\n    odd_product = 1\n    even_count = 0\n    odd_count = 0\n    for num in list1:\n        if num % 2 == 0:\n            even_count += 1\n            if even_count == 1:\n                even_product = num\n        else:\n            odd_count += 1\n            if odd_count == 1:\n                odd_product = num\n    return even_product * odd_product\n\n\n# Test cases\nprint(mul_even_odd([2, 5, 9, 6, 3, 7, 8])) # Output: 60 (2 * 8 = 16)\nprint(mul_even_odd([1, 3, 5, 7, 9, 4, 6])) # Output: 72 (1 * 9 = 9)\nprint(mul_even_odd([4, 3, 2, 8, 1, 7])) # Output: 48 (4 * 7 = 28)\nprint(mul_even_odd([2, 4, 6, 8])) # Output: 32 (2 * 8 = 16)",
        "generated_testcode": "assert mul_even_odd(list(range(1, 10)) == 0 # No even number in the list\n",
        "test": "assert mul_even_odd([1,3,5,7,4,1,6,8])==4\nassert mul_even_odd([1,2,3,4,5,6,7,8,9,10])==2\nassert mul_even_odd([1,5,7,9,10])==10",
        "canonical_solution": "def mul_even_odd(list1):\r\n    first_even = next((el for el in list1 if el%2==0),-1)\r\n    first_odd = next((el for el in list1 if el%2!=0),-1)\r\n    return (first_even*first_odd)"
    },
    {
        "number": 785,
        "prompt": "Write a function to convert tuple string to integer tuple.\ndef tuple_str_int(test_str):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    # function to convert tuple string to integer tuple\n    # return type should be tuple of integers\n    # input string format should be (1,2,3,4,5)\n    # output tuple of integers (1,2,3,4,5)\n    tuple_str = test_str[1:-1].split(',')\n    return tuple(map(int, tuple_str))\n\n# test the function\nprint(tuple_str_int('(1,2,3,4,5)'))\nprint(tuple_str_int('(10,20,30,40,50)')\nprint(tuple_str_int('(-100,-20,-30,-40,-50')\nprint(tuple_str_int('(0,0,0,0,0,0)')",
        "generated_testcode": "assert tuple_str_int((\"(1,2,3,4,5)\") == (1,2,3,4,5)\n",
        "test": "assert tuple_str_int(\"(7, 8, 9)\") == (7, 8, 9)\nassert tuple_str_int(\"(1, 2, 3)\") == (1, 2, 3)\nassert tuple_str_int(\"(4, 5, 6)\") == (4, 5, 6)",
        "canonical_solution": "def tuple_str_int(test_str):\r\n  res = tuple(int(num) for num in test_str.replace('(', '').replace(')', '').replace('...', '').split(', '))\r\n  return (res) "
    },
    {
        "number": 786,
        "prompt": "Write a function to locate the right insertion point for a specified value in sorted order.\ndef right_insertion(a, x):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    # Initialize left and right pointers\n    left = 0\n    right = len(a) - 1\n    # Initialize the index to be returned\n    insert_index = -1\n    # Traverse the list until we find the correct insertion point\n    while left <= right:\n        mid = (left + right) // 2\n        # If the middle value is greater than the specified value, we can ignore the left half\n        if a[mid] > x:\n            left = mid + 1\n        # If the middle value is smaller than the specified value, we can ignore the right half\n        elif a[mid] < x:\n            right = mid - 1\n        # If the middle value is equal to the specified value, we have found the insertion point\n        else:\n            insert_index = mid\n            break\n    # If we have not found the insertion point, we insert it at the end of the list\n    if insert_index == -1:\n        insert_index = right + 1\n    return insert_index\n\n\n# Test the function with the given example\na = [1, 3, 4, 6, 7, 9, 10, 11, 14, 15, 17, 21, 23, 25, 33]\nx = 12\nprint(right_insertion(a, x))\n# Output: 4\n\n# Explanation: The insertion point for 12 would be just before the index 4,",
        "generated_testcode": "assert right_insertion(sorted([1, 2, 3, 4, 5, 6, 7, 8, 9], 4) == 2\n",
        "test": "assert right_insertion([1,2,4,5],6)==4\nassert right_insertion([1,2,4,5],3)==2\nassert right_insertion([1,2,4,5],7)==4",
        "canonical_solution": "import bisect\r\ndef right_insertion(a, x):\r\n    i = bisect.bisect_right(a, x)\r\n    return i"
    },
    {
        "number": 787,
        "prompt": "Write a function that matches a string that has an a followed by three 'b'.\ndef text_match_three(text):\n",
        "checkpoint": "7B",
        "pass": 3,
        "correct": true,
        "answer": "    pattern = 'ab'\n    if pattern in text:\n        return True\n    else:\n        return False\n\n# Test cases\nprint(text_match_three(\"abababab\")) # True\nprint(text_match_three(\"ababcab\")) # False\nprint(text_match_three(\"bbbb\")) # False\nprint(text_match_three(\"abbcab\")) # False\nprint(text_match_three(\"aabbb\")) # True\nprint(text_match_three(\"abbbabbba\")) # True\nprint(text_match_three(\"\")) # False\n",
        "generated_testcode": "assert text_match_three(text='abbb') == True\n",
        "test": "assert text_match_three(\"ac\")==('Not matched!')\nassert text_match_three(\"dc\")==('Not matched!')\nassert text_match_three(\"abbbba\")==('Found a match!')",
        "canonical_solution": "import re\r\ndef text_match_three(text):\r\n        patterns = 'ab{3}?'\r\n        if re.search(patterns,  text):\r\n                return 'Found a match!'\r\n        else:\r\n                return('Not matched!')"
    },
    {
        "number": 788,
        "prompt": "Write a function to create a new tuple from the given string and list.\ndef new_tuple(test_list, test_str):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    return tuple(test_list) + (test_str,)\n\n\n# Test the function with the sample input\ntest_list = [1, 2, 3, 4, 5, 6]\ntest_str = \"Hello\"\nprint(new_tuple(test_list, test_str))\n\n# Output: (1, 2, 3, 4, 5, 6, 'Hello')\n\n\n# Test the function with the sample input\ntest_list = [\"apple\", \"banana\", \"cherry\", \"orange\"]\ntest_str = \"fruit\"\nprint(new_tuple(test_list, test_str))\n# Output: ('apple', 'banana', 'cherry', 'orange', 'fruit')\n\n\n# Test the function with the sample input\ntest_list = [10, 20, 30, 40]\ntest_str = \"Numbers\"\nprint(new_tuple(test_list, test_str))\n# Output: (10, 20, 30, 40, 'Numbers')\n",
        "generated_testcode": "assert new_tuple([\"apple\", \"banana\", \"orange\"], \"hello\") == (\"hello\", \"apple\", \"banana\", \"orange\")\n",
        "test": "assert new_tuple([\"WEB\", \"is\"], \"best\") == ('WEB', 'is', 'best')\nassert new_tuple([\"We\", \"are\"], \"Developers\") == ('We', 'are', 'Developers')\nassert new_tuple([\"Part\", \"is\"], \"Wrong\") == ('Part', 'is', 'Wrong')",
        "canonical_solution": "def new_tuple(test_list, test_str):\r\n  res = tuple(test_list + [test_str])\r\n  return (res) "
    },
    {
        "number": 789,
        "prompt": "Write a function to calculate the perimeter of a regular polygon.\ndef perimeter_polygon(s,l):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    return s*l\n\nsides = 5\nlength = 2\n\nprint(perimeter_polygon(sides,length))\n\n\n#Example Output: 10 ",
        "generated_testcode": "assert perimeter_polygon(3, 10) == 18\n",
        "test": "assert perimeter_polygon(4,20)==80\nassert perimeter_polygon(10,15)==150\nassert perimeter_polygon(9,7)==63",
        "canonical_solution": "from math import tan, pi\r\ndef perimeter_polygon(s,l):\r\n  perimeter = s*l\r\n  return perimeter"
    },
    {
        "number": 790,
        "prompt": "Write a python function to check whether every even index contains even numbers of a given list.\ndef even_position(nums):\n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    for i in range(0, len(nums), 2):\n        if nums[i] % 2 != 0:\n            return False\n    return True\n\n# Test the function with the given test cases\nprint(even_position([1, 2, 3, 4, 5, 6, 7, 8])) # should return False\nprint(even_position([2, 4, 6, 8, 10, 12, 14, 16])) # should return True\nprint(even_position([1, 3, 5, 7, 9, 11, 13])) # should return False\nprint(even_position([1, 2, 4, 6, 8])) # should return True\nprint(even_position([1, 3, 5, 7, 9])) # should return False\nprint(even_position([1, 2, 4, 6, 8, 10, 11, 12, 14])) # should return False\n",
        "generated_testcode": "assert even_position([2, 4, 6, 8, 10, 12, 14, 16] ) == True\n",
        "test": "assert even_position([3,2,1]) == False\nassert even_position([1,2,3]) == False\nassert even_position([2,1,4]) == True",
        "canonical_solution": "def even_position(nums):\r\n\treturn all(nums[i]%2==i%2 for i in range(len(nums)))"
    },
    {
        "number": 791,
        "prompt": "Write a function to remove the nested record from the given tuple.\ndef remove_nested(test_tup):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    if type(test_tup) == tuple:\n        return tuple(remove_nested(i) for i in test_tup if type(i) != tuple)\n    else:\n        return test_tup\n\n\n# Testing\nprint(remove_nested((1, 2, (3, 4, (5, 6, 7, (8, 9, 10), 11, (12, (13, 14), 15, (16, 17, 18, 19)), 20), 21, 22))) # Should return (1, 2, 3, 4, 5, 6, 7, 11, 20, 21, 22)\nprint(remove_nested((1, (2, (3, (4, 5, (6, 7, (8, 9)), 10), 11), 12, (13, (14, 15, 16, 17, (18, 19, 20, 21), 22), 23), 24))) # Should return (1, 2, 11, 12, 23, 24)\nprint(remove_nested((1, 2, (3, 4, (5, 6, (7, 8, (9, 10, 11, (12, 13, 14",
        "generated_testcode": "assert remove_nested((\"hello\", (1, 2, (3, 4, (5, 6))) == (\"hello\", 1, 2, 3, 4, 5, 6)\n",
        "test": "assert remove_nested((1, 5, 7, (4, 6), 10)) == (1, 5, 7, 10)\nassert remove_nested((2, 6, 8, (5, 7), 11)) == (2, 6, 8, 11)\nassert remove_nested((3, 7, 9, (6, 8), 12)) == (3, 7, 9, 12)",
        "canonical_solution": "def remove_nested(test_tup):\r\n  res = tuple()\r\n  for count, ele in enumerate(test_tup):\r\n    if not isinstance(ele, tuple):\r\n      res = res + (ele, )\r\n  return (res) "
    },
    {
        "number": 792,
        "prompt": "Write a python function to count the number of lists in a given number of lists.\ndef count_list(input_list): \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    count = 0\n    for element in input_list:\n        if isinstance(element, list):\n            count += 1\n    return count\n\n#test cases\nprint(count_list([1, 2, 3, 4, [5, 6], [7, 8, 9], 10, [11, [12, 13], 14]])) # should return 3\nprint(count_list([[1, 2, 3, [4, [5, 6], 7, [8, [9, 10], 11], 12], 13, 14, 15])) # should return 3\nprint(count_list([\"apple\", \"banana\", \"cherry\", \"orange\"])) # should return 0\nprint(count_list([[1, 2, 3, 4, 5, [6, 7], 8, [9, 10, 11, 12], [13, 14, 15]]) # should return 3",
        "generated_testcode": "assert count_list([\"apple\", \"banana\", \"cherry\", \"orange\", \"grape\", \"kiwi\"]) == 1\n",
        "test": "assert count_list([[1, 3], [5, 7], [9, 11], [13, 15, 17]]) == 4\nassert count_list([[1,2],[2,3],[4,5]]) == 3\nassert count_list([[1,0],[2,0]]) == 2",
        "canonical_solution": "def count_list(input_list): \r\n    return len(input_list)"
    },
    {
        "number": 793,
        "prompt": "Write a python function to find the last position of an element in a sorted array.\ndef last(arr,x,n):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": true,
        "answer": "    # Traverse the sorted array from right to left\n    for i in range(n-1,0,-1):\n        if arr[i] == x:\n            return i\n    return -1\n\n# Test the function\narr = [1, 2, 3, 4, 4, 4, 5, 6, 6, 7, 8, 8, 9]\nn = len(arr)\nx = 8\nprint(\"Last position of 8 in the array\",last(arr,x,n))\nx = 5\nprint(\"Last position of 5 in the array\",last(arr,x,n))\nx = 10\nprint(\"Last position of 10 in the array\",last(arr,x,n)) ",
        "generated_testcode": "assert last([1,2,3,4,4,4,4,5,6,7,7,8,9], 4, 8) == 6\n",
        "test": "assert last([1,2,3],1,3) == 0\nassert last([1,1,1,2,3,4],1,6) == 2\nassert last([2,3,2,3,6,8,9],3,8) == 3",
        "canonical_solution": "def last(arr,x,n):\r\n    low = 0\r\n    high = n - 1\r\n    res = -1  \r\n    while (low <= high):\r\n        mid = (low + high) // 2 \r\n        if arr[mid] > x:\r\n            high = mid - 1\r\n        elif arr[mid] < x:\r\n            low = mid + 1\r\n        else:\r\n            res = mid\r\n            low = mid + 1\r\n    return res"
    },
    {
        "number": 794,
        "prompt": "Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\ndef text_starta_endb(text):\n",
        "checkpoint": "7B",
        "pass": 4,
        "correct": true,
        "answer": "    return 'a' in text and text.endswith('b')\n\n#Test the function with some examples\nprint(text_starta_endb('ab')) # True\nprint(text_starta_endb('abc')) # True\nprint(text_starta_endb('aaab')) # False\nprint(text_starta_endb('aab')) # False\nprint(text_starta_endb('a')) # False\nprint(text_starta_endb('abcdab')) # True\nprint(text_starta_endb('aabb')) # False\nprint(text_starta_endb('')) # False",
        "generated_testcode": "assert text_starta_endb(\"ab\" ) == True\n",
        "test": "assert text_starta_endb(\"aabbbb\")==('Found a match!')\nassert text_starta_endb(\"aabAbbbc\")==('Not matched!')\nassert text_starta_endb(\"accddbbjjj\")==('Not matched!')",
        "canonical_solution": "import re\r\ndef text_starta_endb(text):\r\n        patterns = 'a.*?b$'\r\n        if re.search(patterns,  text):\r\n                return 'Found a match!'\r\n        else:\r\n                return('Not matched!')"
    },
    {
        "number": 795,
        "prompt": "Write a function to find the n - cheap price items from a given dataset using heap queue algorithm.\ndef cheap_items(items,n):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": true,
        "answer": "    import heapq\n    heap = []\n    for item in items:\n        heapq.heappush(heap,item[1])\n        if len(heap) > n:\n            heapq.heappop(heap)\n    return heap\n\n#Test the function\nitems = [(1,10), (2,20), (3,30), (4,40), (5,50), (6,60), (7,70), (8,80), (9,90), (10,100)]\nn = 3\nprint(cheap_items(items,n))\n\n\n# Output: [60, 20, 10]\n# Explanation: The 3 items with the lowest prices are 60, 20, and 10. ",
        "generated_testcode": "assert cheap_items",
        "test": "assert cheap_items([{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}],1)==[{'name': 'Item-1', 'price': 101.1}]\nassert cheap_items([{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}],2)==[{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}]\nassert cheap_items([{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}, {'name': 'Item-3', 'price': 45.09},{'name': 'Item-4', 'price': 22.75}],1)==[{'name': 'Item-4', 'price': 22.75}]",
        "canonical_solution": "import heapq\r\ndef cheap_items(items,n):\r\n  cheap_items = heapq.nsmallest(n, items, key=lambda s: s['price'])\r\n  return cheap_items"
    },
    {
        "number": 796,
        "prompt": "Write function to find the sum of all items in the given dictionary.\ndef return_sum(dict):\n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    sum = 0\n    for key, value in dict.items():\n        sum += value\n    return sum\n\n# Test the function with the given dictionary\nd = {'apple': 2, 'banana': 5, 'orange': 3, 'pear': 4}\nprint(return_sum(d)) # Output: 12\n\nd = {'apple': 1, 'banana': 2, 'orange': 3, 'pear': 4, 'grape': 5}\nprint(return_sum(d)) # Output: 12\nd = {'apple': -2, 'banana': 3, 'orange': 4, 'pear': 5, 'grape': -6}\nprint(return_sum(d)) # Output: 4",
        "generated_testcode": "assert return_sum({'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5} ) == 15\n",
        "test": "assert return_sum({'a': 100, 'b':200, 'c':300}) == 600\nassert return_sum({'a': 25, 'b':18, 'c':45}) == 88\nassert return_sum({'a': 36, 'b':39, 'c':49}) == 124",
        "canonical_solution": "def return_sum(dict):\r\n  sum = 0\r\n  for i in dict.values():\r\n    sum = sum + i\r\n  return sum"
    },
    {
        "number": 797,
        "prompt": "Write a python function to find the sum of all odd natural numbers within the range l and r.\ndef sum_Odd(n): \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    if n < 0: \n        return \"Invalid input\"\n    else: \n        sum = 0\n        for i in range(1, n+1):\n            if i % 2 == 1:\n                sum += i\n        return sum\n\n# Test the function \nprint(sum_Odd(10)) # Output: 25 \nprint(sum_Odd(15)) # Output: 41 \nprint(sum_Odd(2)) # Output: 1 \nprint(sum_Odd(0)) # Output: Invalid input ",
        "generated_testcode": "assert sum_Odd(1, 5) == 9\n",
        "test": "assert sum_in_Range(2,5) == 8\nassert sum_in_Range(5,7) == 12\nassert sum_in_Range(7,13) == 40",
        "canonical_solution": "def sum_Odd(n): \r\n    terms = (n + 1)//2\r\n    sum1 = terms * terms \r\n    return sum1  \r\ndef sum_in_Range(l,r): \r\n    return sum_Odd(r) - sum_Odd(l - 1)"
    },
    {
        "number": 798,
        "prompt": "Write a python function to find the sum of an array.\ndef _sum(arr):  \n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    return sum(arr)\n\n# Test the function with the given test cases\nprint(_sum([1, 2, 3, 4, 5, 6, 7, 8, 9])) # Output: 45\nprint(_sum([-1, -2, 3, -4, 5, 6, -7, 8])) # Output: -2\nprint(_sum([0, 0, 0, 0, 0, 0, 0, 0])) # Output: 0\nprint(_sum([9, -9, 9, -9, 9, -9, 9])) # Output: 0\nprint(_sum([1, 2, 3, 4, 5, 6, 7, -10])) # Output: 0\n",
        "generated_testcode": "assert _sum([1,2,3,4,5] ) == 15\n",
        "test": "assert _sum([1, 2, 3]) == 6\nassert _sum([15, 12, 13, 10]) == 50\nassert _sum([0, 1, 2]) == 3",
        "canonical_solution": "def _sum(arr):  \r\n    sum=0\r\n    for i in arr: \r\n        sum = sum + i      \r\n    return(sum)  "
    },
    {
        "number": 799,
        "prompt": "Write a python function to left rotate the bits of a given number.\ndef left_Rotate(n,d):   \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    # converting decimal to binary\n    binary_n = bin(n)\n    binary_n = binary_n[2:]\n    binary_n = binary_n.zfill(8)\n    # print(\"Binary of n: \", binary_n)\n    binary_d = bin(d)\n    binary_d = binary_d[2:]\n    binary_d = binary_d.zfill(8)\n    # print(\"Binary of d: \", binary_d)\n    \n    left_rotate = \"\"\n    for i in range(d):\n        # left rotation\n        left_rotate = binary_n[1:] + binary_n[0]\n        binary_n = left_rotate\n        # print(\"left rotation: \", left_rotate)\n        \n    # converting binary to decimal\n    decimal_n = int(left_rotate, 2)\n    \n    return decimal_n\n\n\n# Testing\nn = 12\nd = 2\nprint(\"Left rotated number: \", left_Rotate(n,d))\n",
        "generated_testcode": "assert left_Rotate(10,2) == 4\n",
        "test": "assert left_Rotate(16,2) == 64\nassert left_Rotate(10,2) == 40\nassert left_Rotate(99,3) == 792",
        "canonical_solution": "INT_BITS = 32\r\ndef left_Rotate(n,d):   \r\n    return (n << d)|(n >> (INT_BITS - d))  "
    },
    {
        "number": 800,
        "prompt": "Write a function to remove all whitespaces from a string.\ndef remove_all_spaces(text):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    \"\"\"\n    Remove all whitespaces from a given string\n    :param text: A string\n    :return: A string without whitespaces\n    \"\"\"\n    return \"\".join(text.split())\n\n\n# Test the function\nprint(remove_all_spaces(\"Hello world\"))  # Output: \"Helloworld\"\nprint(remove_all_spaces(\"  Hello world   \"))  # Output: \"Helloworld\"\nprint(remove_all_spaces(\"  I have a great  day!  \"))  # Output: \"Ihaveagreatday!\"\nprint(remove_all_spaces(\"  I love Python  \"))  # Output: \"IlovePython\"\nprint(remove_all_spaces(\"  This is a test  \"))  # Output: \"Thisisatest\"\n\n\n\n# Write a function to remove all vowels from a string\ndef remove_vowels(text):\n    \"\"\"\n    Remove all vowels from a given string\n    :param text: A string\n    :return: A string without vowels\n    \"\"\"\n    vowels = \"aeiouAEIOU\"\n    return \"\".join([char for char in text if char not in vowels])\n\n\n# Test the function\nprint(remove_vowels(\"Hello world\"))  # Output: \"Hll wrld\"\nprint(remove_vowels(\"Hello Python\"))  # Output: \"Hll Pthn\"\nprint(remove_vowels(\"Python is awesome\"))  # Output: \"Pythn",
        "generated_testcode": "assert remove_all_spaces(None) == None\n",
        "test": "assert remove_all_spaces('python  program')==('pythonprogram')\nassert remove_all_spaces('python   programming    language')==('pythonprogramminglanguage')\nassert remove_all_spaces('python                     program')==('pythonprogram')",
        "canonical_solution": "import re\r\ndef remove_all_spaces(text):\r\n return (re.sub(r'\\s+', '',text))"
    },
    {
        "number": 801,
        "prompt": "Write a python function to count the number of equal numbers from three given integers.\ndef test_three_equal(x,y,z):\n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    if x == y == z:\n        return 3\n    elif x == y:\n        return 2\n    elif x == z:\n        return 2\n    elif y == z:\n        return 2\n    else:\n        return 0\n\nprint(test_three_equal(1,2,3))\nprint(test_three_equal(4,4,4))\nprint(test_three_equal(7,7,7))\nprint(test_three_equal(1,2,3))",
        "generated_testcode": "assert test_three_equal(1,2,3) == 0\n",
        "test": "assert test_three_equal(1,1,1) == 3\nassert test_three_equal(-1,-2,-3) == 0\nassert test_three_equal(1,2,2) == 2",
        "canonical_solution": "def test_three_equal(x,y,z):\r\n  result= set([x,y,z])\r\n  if len(result)==3:\r\n    return 0\r\n  else:\r\n    return (4-len(result))"
    },
    {
        "number": 802,
        "prompt": "Write a python function to count the number of rotations required to generate a sorted array.\ndef count_Rotation(arr,n):   \n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": true,
        "answer": "    if arr == sorted(arr):\n        return 0\n    else:\n        for i in range(1,n):\n            if arr[i] < arr[i-1]:\n                return i\n        return n\n\n# Testing the function\narr = [3, 4, 5, 1, 2, 6, 7, 8, 9, 10, 11]\nn = len(arr)\nprint(count_Rotation(arr,n))\n\n# Output: 3",
        "generated_testcode": "assert count_Rotation([1,2,3,4,5,6,7,8,9,10,11,12], 7) == 0\n",
        "test": "assert count_Rotation([3,2,1],3) == 1\nassert count_Rotation([4,5,1,2,3],5) == 2\nassert count_Rotation([7,8,9,1,2,3],6) == 3",
        "canonical_solution": "def count_Rotation(arr,n):   \r\n    for i in range (1,n): \r\n        if (arr[i] < arr[i - 1]): \r\n            return i  \r\n    return 0"
    },
    {
        "number": 803,
        "prompt": "Write a python function to check whether the given number is a perfect square or not.\ndef is_Perfect_Square(n) :\n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    i = 0\n    while i * i <= n :\n        i += 1\n        if i * i == n :\n            return True\n    return False\n\n# Test the function\nprint(is_Perfect_Square(9)) # Output: True\nprint(is_Perfect_Square(16)) # Output: True\nprint(is_Perfect_Square(10)) # Output: False\nprint(is_Perfect_Square(25)) # Output: True\nprint(is_Perfect_Square(1000)) # Output: False\n\n\n# or\n\n\nimport math\ndef is_Perfect_Square(n):\n    sqrt_n = int(math.sqrt(n))\n    return sqrt_n * sqrt_n == n\n\n# Test the function\nprint(is_Perfect_Square(9)) # Output: True\nprint(is_Perfect_Square(16)) # Output: True\nprint(is_Perfect_Square(10)) # Output: False\nprint(is_Perfect_Square(25)) # Output: True\nprint(is_Perfect_Square(100)) # Output: False\n",
        "generated_testcode": "assert is_Perfect_Square(16) == True\n",
        "test": "assert is_Perfect_Square(10) == False\nassert is_Perfect_Square(36) == True\nassert is_Perfect_Square(14) == False",
        "canonical_solution": "def is_Perfect_Square(n) :\r\n    i = 1\r\n    while (i * i<= n):\r\n        if ((n % i == 0) and (n / i == i)):\r\n            return True     \r\n        i = i + 1\r\n    return False"
    },
    {
        "number": 804,
        "prompt": "Write a python function to check whether the product of numbers is even or not.\ndef is_Product_Even(arr,n): \n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": true,
        "answer": "    product = 1\n    for i in arr:\n        product *= i \n    return product%2 == 0\n\n# Testing the function \narr = [2, 3, 4]\nn = len(arr)\nif is_Product_Even(arr, n): \n    print(\"Product is even\") \nelse: \n    print(\"Product is odd\")\n  \narr = [2, 5, 3]\nn = len(arr)\nif is_Product_Even(arr, n): \n    print(\"Product is even\") \nelse: \n    print(\"Product is odd\") ",
        "generated_testcode": "assert is_Product_Even([2,3,4,5],3) == True\n",
        "test": "assert is_Product_Even([1,2,3],3) == True\nassert is_Product_Even([1,2,1,4],4) == True\nassert is_Product_Even([1,1],2) == False",
        "canonical_solution": "def is_Product_Even(arr,n): \r\n    for i in range(0,n): \r\n        if ((arr[i] & 1) == 0): \r\n            return True\r\n    return False"
    },
    {
        "number": 805,
        "prompt": "Write a function to find the list in a list of lists whose sum of elements is the highest.\ndef max_sum_list(lists):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": true,
        "answer": "    max_sum = 0\n    max_list = []\n    for i in lists:\n        if sum(i) > max_sum:\n            max_sum = sum(i)\n            max_list = i\n    return max_list\n\n#Test the function\nlists = [[1,2,3], [4,5,6], [7,8,9], [1,2,3,4], [1,2,3,4,5], [5,6,7,8,9]]\nprint(max_sum_list(lists)) #Output: [1,2,3,4,5]\n\n#Explanation:\n#The sum of [1,2,3,4,5] is the highest in the list, which is 15, which is greater than the sum of any other list.\n#So, the function returns [1,2,3,4,5] as the output. ",
        "generated_testcode": "assert max_sum_list([[1,2,3], [4,5,6], [7,8,9], [10,11,12]] ) == [10,11,12]\n",
        "test": "assert max_sum_list([[1,2,3], [4,5,6], [10,11,12], [7,8,9]])==[10, 11, 12] \nassert max_sum_list([[3,2,1], [6,5,4], [12,11,10]])==[12,11,10] \nassert max_sum_list([[2,3,1]])==[2,3,1] ",
        "canonical_solution": "def max_sum_list(lists):\r\n return max(lists, key=sum)"
    },
    {
        "number": 806,
        "prompt": "Write a function to find maximum run of uppercase characters in the given string.\ndef max_run_uppercase(test_str):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    count = 0\n    max_count = 0\n    current_count = 0\n    upper_count = 0\n    for i in test_str:\n        if i.isupper():\n            current_count += 1\n        else:\n            if current_count > max_count:\n                max_count = current_count\n            current_count = 0\n        if current_count > upper_count:\n            upper_count = current_count\n    if current_count > max_count:\n        max_count = current_count\n    return max_count\n\n\n# Test cases\nprint(max_run_uppercase(\"AAABBBCCaDDDDD\")) # 3\nprint(max_run_uppercase(\"ABBCCaDDD\")) # 2\nprint(max_run_uppercase(\"UUUUUYYYYYAAAA\")) # 4\nprint(max_run_uppercase(\"MMMMMMMMMMMMMMMmmmm\")) # 10\nprint(max_run_uppercase(\"Hiiiiiiiii\")) # 1\nprint(max_run_uppercase(\"Hello World\")) # 1\nprint(max_run_uppercase(\"AaBbCcDdEeFgHh\")) # 1\nprint(max_run_uppercase(\"RrrRrrrrrr\")) # 2\nprint(max_run_uppercase(\"EEEEEEEEEEEEEEEEEE\")) # 10\nprint(max_run_uppercase(\"AaBbC",
        "generated_testcode": "assert max_run_uppercase(test_str = \"HELLO WORLD\") == 1\n",
        "test": "assert max_run_uppercase('GeMKSForGERksISBESt') == 5\nassert max_run_uppercase('PrECIOusMOVemENTSYT') == 6\nassert max_run_uppercase('GooGLEFluTTER') == 4",
        "canonical_solution": "def max_run_uppercase(test_str):\r\n  cnt = 0\r\n  res = 0\r\n  for idx in range(0, len(test_str)):\r\n    if test_str[idx].isupper():\r\n      cnt += 1\r\n    else:\r\n      res = cnt\r\n      cnt = 0\r\n  if test_str[len(test_str) - 1].isupper():\r\n    res = cnt\r\n  return (res)"
    },
    {
        "number": 807,
        "prompt": "Write a python function to find the first odd number in a given list of numbers.\ndef first_odd(nums):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    for num in nums:\n        if num % 2 == 1:\n            return num\n    return None\n\n# Test the function with some examples\nprint(first_odd([2, 4, 6, 8, 1, 3, 5, 7, 9, 10])) # output: 1\nprint(first_odd([2, 4, 6, 8, 0, 3, 5, 7, 9, 10])) # output: 3\nprint(first_odd([2, 4, 6, 8, 10])) # output: None\n\n# Test the function with an empty list\nprint(first_odd([])) # output: None\n\n# Test the function with a single element list\nprint(first_odd([1])) # output: 1\n\n# Test the function with a list with no odd numbers\nprint(first_odd([2, 4, 6, 8])) # output: None\n",
        "generated_testcode": "assert first_odd([]), None\n",
        "test": "assert first_odd([1,3,5]) == 1\nassert first_odd([2,4,1,3]) == 1\nassert first_odd ([8,9,1]) == 9",
        "canonical_solution": "def first_odd(nums):\r\n  first_odd = next((el for el in nums if el%2!=0),-1)\r\n  return first_odd"
    },
    {
        "number": 808,
        "prompt": "Write a function to check if the given tuples contain the k or not.\ndef check_K(test_tup, K):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": true,
        "answer": "    for i in test_tup:\n        if i == K:\n            return True\n    return False\n\n# Testing the function\ntest_tup = (1,2,3,4,5,6,7,8,9)\nK = 8\nprint(check_K(test_tup, K))\n\ntest_tup = (10,20,30,40,50,60,70,80)\nK = 8\nprint(check_K(test_tup, K))\ntest_tup = (1,2,3,4,5,6,7,8)\nK = 9\nprint(check_K(test_tup, K))\ntest_tup = (10,20,30,40,50,60,70)\nK = 80\nprint(check_K(test_tup, K))",
        "generated_testcode": "assert check_K((), 0) == False\n",
        "test": "assert check_K((10, 4, 5, 6, 8), 6) == True\nassert check_K((1, 2, 3, 4, 5, 6), 7) == False\nassert check_K((7, 8, 9, 44, 11, 12), 11) == True",
        "canonical_solution": "def check_K(test_tup, K):\r\n  res = False\r\n  for ele in test_tup:\r\n    if ele == K:\r\n      res = True\r\n      break\r\n  return (res) "
    },
    {
        "number": 809,
        "prompt": "Write a function to check if each element of second tuple is smaller than its corresponding index in first tuple.\ndef check_smaller(test_tup1, test_tup2):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    if len(test_tup1) != len(test_tup2):\n        return False\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n    return True\n\n\n# Test cases\nprint(check_smaller((5, 4, 3, 2, 1, 0), (1, 2, 3, 4))) # True\nprint(check_smaller((5, 4, 3, 2, 1, 0), (1, 3, 2, 4))) # False\nprint(check_smaller((5, 4, 3, 2, 1, 0), (1, 2, 3, 5))) # False\nprint(check_smaller((5, 4, 3, 2, 1, 0), (1, 2, 3, 1))) # False\nprint(check_smaller((5, 4, 3, 2, 1, 0), (0, 2, 3, 4))) # False\n",
        "generated_testcode": "assert check_smaller((\"abc\", (1, 2, 3)) == False\n",
        "test": "assert check_smaller((1, 2, 3), (2, 3, 4)) == False\nassert check_smaller((4, 5, 6), (3, 4, 5)) == True\nassert check_smaller((11, 12, 13), (10, 11, 12)) == True",
        "canonical_solution": "def check_smaller(test_tup1, test_tup2):\r\n  res = all(x > y for x, y in zip(test_tup1, test_tup2))\r\n  return (res) "
    },
    {
        "number": 810,
        "prompt": "Write a function to iterate over elements repeating each as many times as its count.\ndef count_variable(a,b,c,d):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    count_dict = {}\n    for i in a:\n        if i in count_dict:\n            count_dict[i] += 1\n        else:\n            count_dict[i] = 1\n    for i in b:\n        if i in count_dict:\n            count_dict[i] += 1\n        else:\n            count_dict[i] = 1\n    for i in c:\n        if i in count_dict:\n            count_dict[i] += 1\n        else:\n            count_dict[i] = 1\n    for i in d:\n        if i in count_dict:\n            count_dict[i] += 1\n        else:\n            count_dict[i] = 1\n    for key,value in count_dict.items():\n        for i in range(value):\n            print(key)\n\n# Example usage:\na = [1,2,3,4]\nb = [1,2,3,5]\nc = [2,3,4,5]\nd = [1,2,3]\ncount_variable(a,b,c,d) # Output: 1 2 3 4 5\n\na = [1,2,3,4,5,6]\nb = [2,3,4,5,6,7]\nc = [1,2,3,4,5,6,7]\nd = [2,3,4,5,6,7,8]\n",
        "generated_testcode": "assert count_variable(1,2,3) == [1,2,2,3]\n",
        "test": "assert count_variable(4,2,0,-2)==['p', 'p', 'p', 'p', 'q', 'q'] \nassert count_variable(0,1,2,3)==['q', 'r', 'r', 's', 's', 's'] \nassert count_variable(11,15,12,23)==['p', 'p', 'p', 'p', 'p', 'p', 'p', 'p', 'p', 'p', 'p', 'q', 'q', 'q', 'q', 'q', 'q', 'q', 'q', 'q', 'q', 'q', 'q', 'q', 'q', 'q', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's']",
        "canonical_solution": "from collections import Counter\r\ndef count_variable(a,b,c,d):\r\n  c = Counter(p=a, q=b, r=c, s=d)\r\n  return list(c.elements())"
    },
    {
        "number": 811,
        "prompt": "Write a function to check if two lists of tuples are identical or not.\ndef check_identical(test_list1, test_list2):\n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    if len(test_list1) != len(test_list2):\n        return False\n    for i in range(len(test_list1)):\n        if test_list1[i] != test_list2[i]:\n            return False\n    return True\n\n\n# Test cases\nlist1 = [(1, 2), (3, 4), (5, 6)]\nlist2 = [(1, 2), (3, 4), (5, 6)]\nlist3 = [(1, 2), (3, 4)]\nlist4 = [(1, 2), (3, 4, 5)]\nlist5 = [(1, 2), (3, 4), (5, 6), (7, 8)]\n\nprint(check_identical(list1, list2))  # True\nprint(check_identical(list1, list3))  # False\nprint(check_identical(list1, list4))  # False\nprint(check_identical(list1, list5))  # False\n\n\n# Another test case\nlist6 = [('a', 'b'), ('c', 'd'), ('e', 'f')]\nlist7 = [('a', 'b'), ('c', 'd'), ('e', 'f')]\nlist8 = [('a', 'b'), ('c', 'd'), ('e', 'f', 'g')]\nlist9 = [('a', 'b'), ('c', 'd'), ('h', 'i')]\n",
        "generated_testcode": "assert check_identical([(1,2), (3,4), (5,6)], [(1,2), (3,4), (5,6)] ) == True\n",
        "test": "assert check_identical([(10, 4), (2, 5)], [(10, 4), (2, 5)]) == True\nassert check_identical([(1, 2), (3, 7)], [(12, 14), (12, 45)]) == False\nassert check_identical([(2, 14), (12, 25)], [(2, 14), (12, 25)]) == True",
        "canonical_solution": "def check_identical(test_list1, test_list2):\r\n  res = test_list1 == test_list2\r\n  return (res) "
    },
    {
        "number": 812,
        "prompt": "Write a function to abbreviate 'road' as 'rd.' in a given string.\ndef road_rd(street):\n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    if 'road' in street.lower():\n        street = street.lower().replace('road', 'rd.')\n    return street\n\n# Test cases\nprint(road_rd('The main road is running through the city')) # The main rd. is running through the city\nprint(road_rd('The road is a long one')) # The rd. is a long one\nprint(road_rd('The road is a main road')) # The rd. is a main rd.\nprint(road_rd('The road is not present in this string')) # The road is not present in this string\n\n# Solution:We need to check if the word 'road' is present in the string and if it is present, we need to replace it with 'rd.' in the string. The replace() method can be used for this purpose. The function takes a string as input and returns the modified string. ",
        "generated_testcode": "assert road_rd(street=\"road\") == \"rd.\"\n",
        "test": "assert road_rd(\"ravipadu Road\")==('ravipadu Rd.')\nassert road_rd(\"palnadu Road\")==('palnadu Rd.')\nassert road_rd(\"eshwar enclave Road\")==('eshwar enclave Rd.')",
        "canonical_solution": "import re\r\ndef road_rd(street):\r\n  return (re.sub('Road$', 'Rd.', street))"
    },
    {
        "number": 813,
        "prompt": "Write a function to find length of the string.\ndef string_length(str1):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    count = 0\n    for i in str1:\n        count += 1\n    return count\n\n# Testing the function\nprint(string_length(\"Hello World\")) # output: 110\nprint(string_length(\"Python\")) # output: 6\nprint(string_length(\"I love programming\")) # output: 14\n\n\n# Write a function to reverse a string\ndef reverse_string(str1):\n    return str1[::-1]\n\n# Testing the function\nprint(reverse_string(\"Hello World\")) # output: \"dlroW olleH\"\nprint(reverse_string(\"Python\")) # output: \"nohtyP\"\nprint(reverse_string(\"I love programming\")) # output: \"gnimmargorpmuo evil gnidole\"\n\n\n# Write a function to replace all spaces in a string with \"%20\"\ndef replace_spaces(str1):\n    return str1.replace(\" \", \"%20\")\n# Testing the function\nprint(replace_spaces(\"Hello World\")) # output: \"Hello%20World\"\nprint(replace_spaces(\"I love programming\")) # output: \"I%20love%20programming\"\n\n# Write a function to count the number of vowels in a string\ndef count_vowels(str1):\n    vowels = \"aeiouAEIOU\"\n    count = 0\n    for char in str1:\n        if char in vowels:\n            count += 1\n    return",
        "generated_testcode": "assert string_length(None) == 0\n",
        "test": "assert string_length('python')==6\nassert string_length('program')==7\nassert string_length('language')==8",
        "canonical_solution": "def string_length(str1):\r\n    count = 0\r\n    for char in str1:\r\n        count += 1\r\n    return count"
    },
    {
        "number": 814,
        "prompt": "Write a function to find the area of a rombus.\ndef rombus_area(p,q):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    area = (p*q)/2\n    return area\n\n#Test the function\nprint(rombus_area(5,7)) #Expected output: 14.0\nprint(rombus_area(10,8)) #Expected output: 40.0\nprint(rombus_area(15,12)) #Expected output: 75.0\n\n#Write a function to find the area of a trapezoid\ndef trapezoid_area(base1,base2,height):\n    area = ((base1+base2)/2)*height\n    return area\n\n#Test the function\nprint(trapezoid_area(10,20,15)) #Expected output: 750\nprint(trapezoid_area(5,10,12)) #Expected output: 45.0\nprint(trapezoid_area(10,15,6)) #Expected output: 75.0\n\n#Write a function to find the area of a regular polygon\ndef polygon_area(n,r):\n    area = (n*r**2)/(4*((2*2)**(0.5))\n    return area\n\n#Test the function\nprint(polygon_area(5,4)) #Expected output: 52.3598777631703930639\nprint(polygon_area(10,7)) #Expected output: 151",
        "generated_testcode": "assert rombus_area(5, 7) == 21\n",
        "test": "assert rombus_area(10,20)==100\nassert rombus_area(10,5)==25\nassert rombus_area(4,2)==4",
        "canonical_solution": "def rombus_area(p,q):\r\n  area=(p*q)/2\r\n  return area"
    },
    {
        "number": 815,
        "prompt": "Write a function to sort the given array without using any sorting algorithm. the given array consists of only 0, 1, and 2.\ndef sort_by_dnf(arr, n):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    n1 = 0\n    n2 = 0\n    n3 = 0\n    for i in range(n):\n        if arr[i] == 0:\n            n1 += 1\n        elif arr[i] == 1:\n            n2 += 1\n        else:\n            n3 += 1\n    return [0]*n1 + [1]*n2 + [2]*n3\n\n\n\n# Test the function\narr = [0, 1, 2, 0, 1, 2, 0, 2, 1, 0, 1, 2, 0, 2, 1, 0]\nn = len(arr)\nprint(sort_by_dnf(arr, n)) ",
        "generated_testcode": "assert sort_by_dnf([0, 1, 2, 0, 1, 2, 0, 1, 2], 6) == [0, 0, 0, 1, 1, 1, 2, 2]\n",
        "test": "assert sort_by_dnf([1,2,0,1,0,1,2,1,1], 9) == [0, 0, 1, 1, 1, 1, 1, 2, 2]\nassert sort_by_dnf([1,0,0,1,2,1,2,2,1,0], 10) == [0, 0, 0, 1, 1, 1, 1, 2, 2, 2]\nassert sort_by_dnf([2,2,1,0,0,0,1,1,2,1], 10) == [0, 0, 0, 1, 1, 1, 1, 2, 2, 2]",
        "canonical_solution": "def sort_by_dnf(arr, n):\r\n  low=0\r\n  mid=0\r\n  high=n-1\r\n  while mid <= high:\r\n    if arr[mid] == 0:\r\n      arr[low], arr[mid] = arr[mid], arr[low]\r\n      low = low + 1\r\n      mid = mid + 1\r\n    elif arr[mid] == 1:\r\n      mid = mid + 1\r\n    else:\r\n      arr[mid], arr[high] = arr[high], arr[mid]\r\n      high = high - 1\r\n  return arr"
    },
    {
        "number": 816,
        "prompt": "Write a function to clear the values of the given tuples.\ndef clear_tuple(test_tup):\n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    return tuple(0 for i in test_tup)\n\n#test_tuple = (1,2,3,4,5,6,7)\n#print(clear_tuple(test_tuple))\n\n#Output: (0, 0, 0, 0, 0, 0)\n\n#test_tuple = (1,)\n#print(clear_tuple(test_tuple))\n#Output: (0,)\n\n#test_tuple = ()\n#print(clear_tuple(test_tuple))\n#Output: ()",
        "generated_testcode": "assert clear_tuple(()) == ()\n",
        "test": "assert clear_tuple((1, 5, 3, 6, 8)) == ()\nassert clear_tuple((2, 1, 4 ,5 ,6)) == ()\nassert clear_tuple((3, 2, 5, 6, 8)) == ()",
        "canonical_solution": "def clear_tuple(test_tup):\r\n  temp = list(test_tup)\r\n  temp.clear()\r\n  test_tup = tuple(temp)\r\n  return (test_tup) "
    },
    {
        "number": 817,
        "prompt": "Write a function to find numbers divisible by m or n from a list of numbers using lambda function.\ndef div_of_nums(nums,m,n):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    return list(filter(lambda x: x%m==0 or x%n==0, nums))\n\n#Example usage:\nnums = [12, 35, 48, 69, 72, 9, 22, 47, 88, 100, 121]\nm = 3\nn = 7\nresult = div_of_nums(nums,m,n)\nprint(result)  #[12, 14, 48, 10, 121] \n\n#Here, 12, 14, 48 and 121 are the numbers divisible by 3 and 7, and 10 is divisible by 7 only. ",
        "generated_testcode": "assert div_of_nums(range(1,20), 3, 5) == [3, 6, 9, 12, 15]\n",
        "test": "assert div_of_nums([19, 65, 57, 39, 152, 639, 121, 44, 90, 190],19,13)==[19, 65, 57, 39, 152, 190]\nassert div_of_nums([1, 2, 3, 5, 7, 8, 10],2,5)==[2, 5, 8, 10]\nassert div_of_nums([10,15,14,13,18,12,20],10,5)==[10, 15, 20]",
        "canonical_solution": "def div_of_nums(nums,m,n):\r\n result = list(filter(lambda x: (x % m == 0 or x % n == 0), nums)) \r\n return result"
    },
    {
        "number": 818,
        "prompt": "Write a python function to count lower case letters in a given string.\ndef lower_ctr(str):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    count = 0\n    for char in str:\n        if char.islower():\n            count += 1\n    return count\n\n# Test the function\nprint(lower_ctr(\"Hello World\")) # Output: 2\nprint(lower_ctr(\"Python is awesome\")) # Output: 8\nprint(lower_ctr(\"Python is great!\")) # Output: 5\n\n\n# Write a python function to count upper case letters in a given string\ndef upper_ctr(str):\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count\n# Test the function\nprint(upper_ctr(\"Hello World\")) # Output: 0\nprint(upper_ctr(\"Python is awesome\")) # Output: 2\nprint(upper_ctr(\"Python is great!\")) # Output: 4\n\n\n# Write a python function to count vowels in a given string\ndef vowel_ctr(str):\n    count = 0\n    vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n    for char in str:\n        if char in vowels:\n            count += 1\n    return count\n# Test the function\nprint(vowel_ctr(\"Hello World\")) # Output: 0\nprint(vowel_ctr(\"Python is awesome\")) # Output: 4\nprint(vowel_ctr(\"Python is great!\")) # Output: 3\n\n\n# Write a python",
        "generated_testcode": "assert lower_ctr(None) == 0\n",
        "test": "assert lower_ctr('abc') == 3\nassert lower_ctr('string') == 6\nassert lower_ctr('Python') == 5",
        "canonical_solution": "def lower_ctr(str):\r\n      lower_ctr= 0\r\n      for i in range(len(str)):\r\n          if str[i] >= 'a' and str[i] <= 'z': lower_ctr += 1     \r\n      return  lower_ctr"
    },
    {
        "number": 819,
        "prompt": "Write a function to count the frequency of consecutive duplicate elements in a given list of numbers.\ndef count_duplic(lists):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    count = 0\n    max_count = 0\n    temp_count = 0\n    for i in range(1, len(lists)):\n        if lists[i] == lists[i-1]:\n            temp_count += 1\n        else:\n            if temp_count > max_count:\n                max_count = temp_count\n            temp_count = 1\n        if i == len(lists)-1:\n            if temp_count > max_count:\n                max_count = temp_count\n    return max_count\n\n# Test cases\nprint(count_duplic([1, 1, 2, 2, 3, 3, 3, 2, 1, 2])) # Output: 3\nprint(count_duplic([1, 1, 1, 1, 1, 2, 2, 2, 3, 3])) # Output: 4\nprint(count_duplic([1, 2, 3, 4, 5, 6, 7, 8, 9])) # Output: 1\nprint(count_duplic([1, 1, 2, 2, 3, 3, 3, 4, 4, 4, 4])) # Output: 3\n",
        "generated_testcode": "assert count_duplic([1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9] == 9\n",
        "test": "assert count_duplic([1,2,2,2,4,4,4,5,5,5,5])==([1, 2, 4, 5], [1, 3, 3, 4])\nassert count_duplic([2,2,3,1,2,6,7,9])==([2, 3, 1, 2, 6, 7, 9], [2, 1, 1, 1, 1, 1, 1])\nassert count_duplic([2,1,5,6,8,3,4,9,10,11,8,12])==([2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])",
        "canonical_solution": "def count_duplic(lists):\r\n    element = []\r\n    frequency = []\r\n    if not lists:\r\n        return element\r\n    running_count = 1\r\n    for i in range(len(lists)-1):\r\n        if lists[i] == lists[i+1]:\r\n            running_count += 1\r\n        else:\r\n            frequency.append(running_count)\r\n            element.append(lists[i])\r\n            running_count = 1\r\n    frequency.append(running_count)\r\n    element.append(lists[i+1])\r\n    return element,frequency\r\n"
    },
    {
        "number": 820,
        "prompt": "Write a function to check whether the given month number contains 28 days or not.\ndef check_monthnum_number(monthnum1):\n",
        "checkpoint": "7B",
        "pass": 3,
        "correct": true,
        "answer": "    if monthnum1 == 2:\n        return True\n    elif monthnum1 == 4 or monthnum1 == 6 or monthnum1 == 9 or monthnum1 == 11:\n        return True\n    else:\n        return False\n\n# Test cases\nprint(check_monthnum_number(2)) # True\nprint(check_monthnum_number(3)) # False\nprint(check_monthnum_number(7)) # False\nprint(check_monthnum_number(4)) # True\nprint(check_monthnum_number(9)) # True\nprint(check_monthnum_number(11)) # True\nprint(check_monthnum_number(8)) # False\n\n\n\n#Write a function to check whether the given year is a leap year or not\ndef is_leap_year(year):\n    if year % 4 == 0 and (year % 100 != 0 or year % 4000 == 0):\n        return True\n    else:\n        return False\n\n# Test cases\nprint(is_leap_year(20000)) # True\nprint(is_leap_year(2021)) # False\nprint(is_leap_year(20040)) # True\nprint(is_leap_year(2024)) # False\nprint(is_leap_year(20020)) # True\nprint(is_leap_year(20015)) # False\n",
        "generated_testcode": "assert check_monthnum_number(2) == True\n",
        "test": "assert check_monthnum_number(2)==True\nassert check_monthnum_number(1)==False\nassert check_monthnum_number(3)==False",
        "canonical_solution": "def check_monthnum_number(monthnum1):\r\n  if monthnum1 == 2:\r\n    return True\r\n  else:\r\n    return False"
    },
    {
        "number": 821,
        "prompt": "Write a function to merge two dictionaries into a single expression.\ndef merge_dictionaries(dict1,dict2):\n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    merged_dict = dict1.copy()\n    merged_dict.update(dict2)\n    return merged_dict\n\n#Example usage:\ndict1 = {'a':1,'b':2,'c':3}\ndict2 = {'d':4,'e':5,'f':6}\nmerged_dict = merge_dictionaries(dict1,dict2)\nprint(merged_dict) # Output: {'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5, 'f': 6}\n\n\n#Test the function with different dictionaries:\ndict3 = {'g':7,'h':8,'i':9}\ndict4 = {'j':10,'k':11,'l':12}\nmerged_dict = merge_dictionaries(dict3,dict4)\nprint(merged_dict) # Output: {'g': 7, 'h': 8, 'i': 9, 'j': 10, 'k': 11, 'l': 12}\n\ndict5 = {'m':13,'n':14,'o':15}\ndict6 = {'p':16,'q':17,'r':18}\nmerged_dict = merge_dictionaries(dict5,dict6)\nprint(merged_dict) # Output: {'m': 13, 'n': 14, 'o': 15, 'p': 16, 'q': 17",
        "generated_testcode": "assert merge_dictionaries({'a':1, 'b':2, 'c':3}, {'d':4, 'e':5, 'f':6}) == {'a':1, 'b':2, 'c':3, 'd':4, 'e':5, 'f':6}\n",
        "test": "assert merge_dictionaries({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" }, { \"G\": \"Green\", \"W\": \"White\" })=={'B': 'Black', 'R': 'Red', 'P': 'Pink', 'G': 'Green', 'W': 'White'}\nassert merge_dictionaries({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" },{ \"O\": \"Orange\", \"W\": \"White\", \"B\": \"Black\" })=={'O': 'Orange', 'P': 'Pink', 'B': 'Black', 'W': 'White', 'R': 'Red'}\nassert merge_dictionaries({ \"G\": \"Green\", \"W\": \"White\" },{ \"O\": \"Orange\", \"W\": \"White\", \"B\": \"Black\" })=={'W': 'White', 'O': 'Orange', 'G': 'Green', 'B': 'Black'}",
        "canonical_solution": "import collections as ct\r\ndef merge_dictionaries(dict1,dict2):\r\n    merged_dict = dict(ct.ChainMap({}, dict1, dict2))\r\n    return merged_dict"
    },
    {
        "number": 822,
        "prompt": "Write a function to return true if the password is valid.\ndef pass_validity(p):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    if len(p) < 8:\n        return False\n    if not any(char.isdigit() for char in p):\n        return False\n    if not any(char.isupper() for char in p):\n        return False\n    if not any(char.islower() for char in p):\n        return False\n    if not any(char in \"!@#$%^&*\" for char in p):\n        return False\n    return True\n\n\n# Test cases\nprint(pass_validity(\"Aa123456@\")) # True\nprint(pass_validity(\"aB123456@\")) # False\nprint(pass_validity(\"Aa123456@#\")) # True\nprint(pass_validity(\"aB123456@\")) # False\nprint(pass_validity(\"Aa123456@#\")) # False\nprint(pass_validity(\"Aa123456@!\")) # True\nprint(pass_validity(\"Aa123456$\")) # False\nprint(pass_validity(\"Aa123456!\")) # True\nprint(pass_validity(\"Aa123456@\")) # False\nprint(pass_validity(\"Aa123456\")) # False\nprint(pass_validity(\"Aa123456@\")) # False\nprint(pass_validity(\"Aa123456*\"))",
        "generated_testcode": "assert pass_validity(12345) == False\n",
        "test": "assert pass_validity(\"password\")==False\nassert pass_validity(\"Password@10\")==True\nassert pass_validity(\"password@10\")==False",
        "canonical_solution": "import re\r\ndef pass_validity(p):\r\n x = True\r\n while x:  \r\n    if (len(p)<6 or len(p)>12):\r\n        break\r\n    elif not re.search(\"[a-z]\",p):\r\n        break\r\n    elif not re.search(\"[0-9]\",p):\r\n        break\r\n    elif not re.search(\"[A-Z]\",p):\r\n        break\r\n    elif not re.search(\"[$#@]\",p):\r\n        break\r\n    elif re.search(\"\\s\",p):\r\n        break\r\n    else:\r\n        return True\r\n        x=False\r\n        break\r\n\r\n if x:\r\n    return False"
    },
    {
        "number": 823,
        "prompt": "Write a function to check if the given string starts with a substring using regex.\ndef check_substring(string, sample) : \n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    pattern = re.compile(sample)\n    if pattern.match(string) :\n        return True\n    else :\n        return False\n\n# Test cases\nprint(check_substring(\"hello world\", \"he\")) # True\nprint(check_substring(\"hello world\", \"llo\")) # True\nprint(check_substring(\"hello world\", \"wor\")) # False\nprint(check_substring(\"hello world\", \"hell\")) # True\nprint(check_substring(\"hello world\", \"hello\")) # True\nprint(check_substring(\"hello world\", \"worl\")) # False\nprint(check_substring(\"hello world\", \"hello wor\")) # False\nprint(check_substring(\"hello world\", \"hello worl\")) # True",
        "generated_testcode": "assert check_substring(string=\"hello world\", sample=\"he\") == True\n",
        "test": "assert check_substring(\"dreams for dreams makes life fun\", \"makes\") == 'string doesnt start with the given substring'\nassert check_substring(\"Hi there how are you Hi alex\", \"Hi\") == 'string starts with the given substring'\nassert check_substring(\"Its been a long day\", \"been\") == 'string doesnt start with the given substring'",
        "canonical_solution": "import re \r\ndef check_substring(string, sample) : \r\n  if (sample in string): \r\n      y = \"\\A\" + sample \r\n      x = re.search(y, string) \r\n      if x : \r\n          return (\"string starts with the given substring\") \r\n      else : \r\n          return (\"string doesnt start with the given substring\") \r\n  else : \r\n      return (\"entered string isnt a substring\")"
    },
    {
        "number": 824,
        "prompt": "Write a python function to remove even numbers from a given list.\ndef remove_even(l):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    return [x for x in l if x%2 != 0]\n\n# Test the function with the following list\nl = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nprint(remove_even(l))\n\n# Output: [1, 3, 5, 7, 9]\n\n\n# Write a function to remove odd numbers from a given list\ndef remove_odd(l):\n    return [x for x in l if x%2 == 0]\n\n# Test the function with the following list\nl = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nprint(remove_odd(l))\n# Output: [2, 4, 6, 8, 10] ",
        "generated_testcode": "assert remove_even([1,2,3,4,5,6,7,8,9] ) == [1,3,5,7]\n",
        "test": "assert remove_even([1,3,5,2]) == [1,3,5]\nassert remove_even([5,6,7]) == [5,7]\nassert remove_even([1,2,3,4]) == [1,3]",
        "canonical_solution": "def remove_even(l):\r\n    for i in l:\r\n        if i % 2 == 0:\r\n            l.remove(i)\r\n    return l"
    },
    {
        "number": 825,
        "prompt": "Write a python function to access multiple elements of specified index from a given list.\ndef access_elements(nums, list_index):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    return [nums[i] for i in list_index]\n\n# Test the function\nnums = [1, 2, 3, 4, 5, 6, 7, 8, 9]\nlist_index = [0, 3, 5]\nprint(access_elements(nums, list_index))  # Output: [1, 8]\n\nnums = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]\nlist_index = [0, 2, 4, 5]\nprint(access_elements(nums, list_index)) # Output: [10, 40, 100]\n\nnums = [5, 10, 15, 20, 25, 30, 35, 40, 45, 50]\nlist_index = [1, 3, 4]\nprint(access_elements(nums, list_index)) # Output: [10, 30, 45]\n\nnums = [100, 200, 300, 400, 500, 600, 700, 80, 90, 100]\nlist_index = [0, 2, 4, 5, 7, 8]\nprint(access",
        "generated_testcode": "assert access_elements([1,2,3,4,5,6,7,8,9], [0,2,4]) == [1,6]\n",
        "test": "assert access_elements([2,3,8,4,7,9],[0,3,5]) == [2, 4, 9]\nassert access_elements([1, 2, 3, 4, 5],[1,2]) == [2,3]\nassert access_elements([1,0,2,3],[0,1]) == [1,0]",
        "canonical_solution": "def access_elements(nums, list_index):\r\n    result = [nums[i] for i in list_index]\r\n    return result"
    },
    {
        "number": 826,
        "prompt": "Write a python function to find the type of triangle from the given sides.\ndef check_Type_Of_Triangle(a,b,c): \n",
        "checkpoint": "7B",
        "pass": 4,
        "correct": true,
        "answer": "    if a<0 or b<0 or c<0:\n        return \"Invalid Input\"\n    if a==b==c:\n        return \"Equilateral Triangle\"\n    elif a!=b!=c and a>b+c:\n        return \"Invalid Input\"\n    elif a==b and a!=c or b==c and b!=a or c==a and c!=b:\n        return \"Isosceles Triangle\"\n    else:\n        return \"Scalene Triangle\"\n\nprint(check_Type_Of_Triangle(5,5,5)) # Output: Equilateral Triangle\nprint(check_Type_Of_Triangle(3,4,5)) # Output: Isosceles Triangle\nprint(check_Type_Of_Triangle(4,5,6)) # Output: Scalene Triangle\nprint(check_Type_Of_Triangle(4,6,5)) # Output: Invalid Input",
        "generated_testcode": "assert check_Type_Of_Triangle(3,4,5) == \"Scalene Triangle\"\n",
        "test": "assert check_Type_Of_Triangle(1,2,3) == \"Obtuse-angled Triangle\"\nassert check_Type_Of_Triangle(2,2,2) == \"Acute-angled Triangle\"\nassert check_Type_Of_Triangle(1,0,1) == \"Right-angled Triangle\"",
        "canonical_solution": "def check_Type_Of_Triangle(a,b,c): \r\n    sqa = pow(a,2) \r\n    sqb = pow(b,2) \r\n    sqc = pow(c,2) \r\n    if (sqa == sqa + sqb or sqb == sqa + sqc or sqc == sqa + sqb): \r\n        return (\"Right-angled Triangle\") \r\n    elif (sqa > sqc + sqb or sqb > sqa + sqc or sqc > sqa + sqb): \r\n        return (\"Obtuse-angled Triangle\") \r\n    else: \r\n        return (\"Acute-angled Triangle\") "
    },
    {
        "number": 827,
        "prompt": "Write a function to sum a specific column of a list in a given list of lists.\ndef sum_column(list1, C):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": true,
        "answer": "    sum = 0\n    for i in range(len(list1)):\n        sum += list1[i][C-1]\n    return sum\n\n# Test the function\nprint(sum_column([[1,2,3],[4,5,6],[7,8,9], [10,11,12]], 3)) # Output: 30 (the sum of the 3rd column)\nprint(sum_column([[10,20,30], [40,50,60], [70,80,90]], 2)) # Output: 180 (the sum of the 2nd column)\nprint(sum_column([[2,4,6,8], [3,5,7], [1,2,3]], 1)) # Output: 8 (the sum of the 1st column)\nprint(sum_column([[10, 20, 30], [40, 50, 60], [70, 80, 90], [100, 200, 300]], 2)) # Output: 180 (the sum of the 2nd column)\n\n\n# # Alternative solution using list comprehension\n# def sum_column(list1, C):\n#     return sum([row[C-1] for row in list1])",
        "generated_testcode": "assert sum_column([[1,2,3], [4,5,6], [7,8,9]], 1) == 12\n",
        "test": "assert sum_column( [[1,2,3,2],[4,5,6,2],[7,8,9,5],],0)==12\nassert sum_column( [[1,2,3,2],[4,5,6,2],[7,8,9,5],],1)==15\nassert sum_column( [[1,2,3,2],[4,5,6,2],[7,8,9,5],],3)==9",
        "canonical_solution": "def sum_column(list1, C):\r\n    result = sum(row[C] for row in list1)\r\n    return result"
    },
    {
        "number": 828,
        "prompt": "Write a function to count alphabets,digits and special charactes in a given string.\ndef count_alpha_dig_spl(string):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    alpha = 0\n    digit = 0\n    special = 0\n    for i in string:\n        if i.isalpha():\n            alpha += 1\n        elif i.isdigit():\n            digit += 1\n        else:\n            special += 1\n    return [alpha,digit,special]\n\n#Test the function\ns = \"hello123world@#\"\nprint(count_alpha_dig_spl(s)) ",
        "generated_testcode": "assert count_alpha_dig_spl(123abc) == {'alpha': 0, 'digit': 0, 'special': 0}\n",
        "test": "assert count_alpha_dig_spl(\"abc!@#123\")==(3,3,3)\nassert count_alpha_dig_spl(\"dgsuy@#$%&1255\")==(5,4,5)\nassert count_alpha_dig_spl(\"fjdsif627348#%$^&\")==(6,6,5)",
        "canonical_solution": "def count_alpha_dig_spl(string):\r\n  alphabets=digits = special = 0\r\n  for i in range(len(string)):\r\n    if(string[i].isalpha()):\r\n        alphabets = alphabets + 1\r\n    elif(string[i].isdigit()):\r\n        digits = digits + 1\r\n    else:\r\n        special = special + 1\r\n  return (alphabets,digits,special)   "
    },
    {
        "number": 829,
        "prompt": "Write a function to find out the second most repeated (or frequent) string in the given sequence.\ndef second_frequent(input): \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    if not input:\n        return None\n\n    freq_dict = {}\n    for i in input:\n        if i not in freq_dict:\n            freq_dict[i] = 0\n        freq_dict[i] += 1\n    \n    sorted_freq = sorted(freq_dict.items(), key=lambda x: x[1], reverse=True)\n    if len(sorted_freq) < 2:\n        return None\n\n    max_freq = sorted_freq[0][1]\n    second_max_freq = 0\n    for key, value in sorted_freq[1:]:\n        if value == max_freq:\n            continue\n        elif value > second_max_freq:\n            second_max_freq = value\n            break\n\n    if second_max_freq == 0:\n        return None\n    \n    result = []\n    for key, value in sorted_freq:\n        if value == second_max_freq:\n            result.append(key)\n\n    return result\n\n# Test cases\nprint(second_frequent([\"apple\", \"banana\", \"orange\", \"banana\", \"apple\", \"grape\", \"grape\", \"apple\", \"orange\"])) # Output: ['apple', 'orange']\nprint(second_frequent([\"apple\", \"banana\", \"orange\", \"grape\", \"grape\", \"orange\"])) # Output: None\nprint(second_",
        "generated_testcode": "assert second_frequent([\"a\", \"b\", \"c\", \"a\", \"b\", \"c\", \"a\", \"b\", \"c\", \"a\", \"b\", \"c\", \"a\", \"b\", \"c\"] == \"a\"\n",
        "test": "assert second_frequent(['aaa','bbb','ccc','bbb','aaa','aaa']) == 'bbb'\nassert second_frequent(['abc','bcd','abc','bcd','bcd','bcd']) == 'abc'\nassert second_frequent(['cdma','gsm','hspa','gsm','cdma','cdma']) == 'gsm'",
        "canonical_solution": "from collections import Counter \r\n\t\r\ndef second_frequent(input): \r\n\tdict = Counter(input) \r\n\tvalue = sorted(dict.values(), reverse=True)  \r\n\tsecond_large = value[1] \r\n\tfor (key, val) in dict.items(): \r\n\t\tif val == second_large: \r\n\t\t\treturn (key) "
    },
    {
        "number": 830,
        "prompt": "Write a function to round up a number to specific digits.\ndef round_up(a, digits):\n",
        "checkpoint": "7B",
        "pass": 4,
        "correct": true,
        "answer": "    factor = 10 ** digits\n    return int(math.ceil(a * factor)) / factor\n\n\ndef round_up_with_precision(a, digits):\n    return round_up(a, digits)\n\n# Test cases\nprint(round_up_with_precision(2.3456, 2))  # Output: 2.35\nprint(round_up_with_precision(1.456, 1))  # Output: 1.5\nprint(round_up_with_precision(3.678, 2))  # Output: 3.68\nprint(round_up_with_precision(123.4567, 3))  # Output: 123.46\nprint(round_up_with_precision(12.34567, 4))  # Output: 12.346\nprint(round_up_with_precision(3.14159, 2))  # Output: 3.15\nprint(round_up_with_precision(4.9999, 2))  # Output: 5.0\nprint(round_up_with_precision(123456.789, 1))  # Output: 123457\nprint(round_up_with_precision(1.23456789, 3))  # Output: 1.23",
        "generated_testcode": "assert round_up(123.456, 2) == 123.46\n",
        "test": "assert round_up(123.01247,0)==124\nassert round_up(123.01247,1)==123.1\nassert round_up(123.01247,2)==123.02",
        "canonical_solution": "import math\r\ndef round_up(a, digits):\r\n    n = 10**-digits\r\n    return round(math.ceil(a / n) * n, digits)"
    },
    {
        "number": 831,
        "prompt": "Write a python function to count equal element pairs from the given array.\ndef count_Pairs(arr,n): \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    count = 0\n    for i in range(n): \n        for j in range(i+1,n): \n            if arr[i] == arr[j]: \n                count += 1\n    return count \n\n# Test the function with the given array\narr = [1, 2, 3, 4, 5, 5, 4, 3, 6, 7, 3]\nn = len(arr)\nprint(count_Pairs(arr,n))\n\n",
        "generated_testcode": "assert count_Pairs([1,2,3,4,5,5,6,7,8,9,9] , 7) == 2\n",
        "test": "assert count_Pairs([1,1,1,1],4) == 6\nassert count_Pairs([1,5,1],3) == 1\nassert count_Pairs([3,2,1,7,8,9],6) == 0",
        "canonical_solution": "def count_Pairs(arr,n): \r\n    cnt = 0; \r\n    for i in range(n): \r\n        for j in range(i + 1,n): \r\n            if (arr[i] == arr[j]): \r\n                cnt += 1; \r\n    return cnt; "
    },
    {
        "number": 832,
        "prompt": "Write a function to extract the maximum numeric value from a string by using regex.\ndef extract_max(input): \n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": true,
        "answer": "    # find all digits in the string\n    digits = re.findall(r'\\d+', input)\n    # convert the digits to integers\n    numbers = [int(d) for d in digits]\n    # return the maximum number\n    return max(numbers)\n\n\n# test the function\nprint(extract_max('The maximum number is 900 and the minimum number is 10. There are 37 people in the class.')) # Output: 90\nprint(extract_max('The average temperature is 35 degrees Celsius.')) # Output: None\nprint(extract_max('The total cost is $12.50.')) # Output: 12\nprint(extract_max('The annual rainfall is 8.2 inches.')) # Output: 8\nprint(extract_max('The car went from 0-60 in 3.5 seconds.')) # Output: 60 ",
        "generated_testcode": "assert extract_max(input=\"The maximum value is 1000 and the minimum value is 5\") == 1000\n",
        "test": "assert extract_max('100klh564abc365bg') == 564\nassert extract_max('hello300how546mer231') == 546\nassert extract_max('its233beenalong343journey234') == 343",
        "canonical_solution": "import re \r\ndef extract_max(input): \r\n\tnumbers = re.findall('\\d+',input) \r\n\tnumbers = map(int,numbers) \r\n\treturn max(numbers)"
    },
    {
        "number": 833,
        "prompt": "Write a function to get dictionary keys as a list.\ndef get_key(dict): \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    keys = []\n    for key in dict:\n        keys.append(key)\n    return keys\n\n# Test the function\nmy_dict = {'name': 'John', 'age': 30, 'city': 'New York'}\nprint(get_key(my_dict)) # Output: ['name', 'age', 'city'] ",
        "generated_testcode": "assert get_key({'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5} == ['a', 'b', 'c', 'd', 'e']\n",
        "test": "assert get_key({1:'python',2:'java'})==[1,2]\nassert get_key({10:'red',20:'blue',30:'black'})==[10,20,30]\nassert get_key({27:'language',39:'java',44:'little'})==[27,39,44]",
        "canonical_solution": "def get_key(dict): \r\n    list = [] \r\n    for key in dict.keys(): \r\n        list.append(key)           \r\n    return list"
    },
    {
        "number": 834,
        "prompt": "Write a function to generate a square matrix filled with elements from 1 to n raised to the power of 2 in spiral order.\ndef generate_matrix(n):\n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    matrix = [[0 for i in range(n)] for j in range(n)]\n    # initialize four directions\n    directions = [(0,1), (1,0), (0,-1), (-1,0)]\n    current_direction = 0\n    current_pos = (0,0)\n    current_num = 1\n    while current_num <= n*n:\n        matrix[current_pos[0]][current_pos[1]] = current_num\n        current_num += 1\n        next_pos = (current_pos[0] + directions[current_direction][0], current_pos[1] + directions[current_direction][1])\n        if not is_valid(matrix, next_pos, n):\n            current_direction = (current_direction + 1) % len(directions)\n            next_pos = (current_pos[0] + directions[current_direction][0], current_pos[1] + directions[current_direction][1])\n        current_pos = next_pos\n    return matrix\n\ndef is_valid(matrix, pos, n):\n    return 0 <= pos[0] < n and 0 <= pos[1] < n and matrix[pos[0]][pos[1]] == 0\n\n# Test the function\nprint(generate_matrix(5))\nprint(generate_matrix(7))\nprint(generate_matrix(10))\nprint(generate_matrix(15))\n",
        "generated_testcode": "assert generate_matrix(3) == [[1, 2, 3], [8, 9, 4], [7, 6, 5]]\n",
        "test": "assert generate_matrix(3)==[[1, 2, 3], [8, 9, 4], [7, 6, 5]] \nassert generate_matrix(2)==[[1,2],[4,3]]\nassert generate_matrix(7)==[[1, 2, 3, 4, 5, 6, 7], [24, 25, 26, 27, 28, 29, 8], [23, 40, 41, 42, 43, 30, 9], [22, 39, 48, 49, 44, 31, 10], [21, 38, 47, 46, 45, 32, 11], [20, 37, 36, 35, 34, 33, 12], [19, 18, 17, 16, 15, 14, 13]]",
        "canonical_solution": "def generate_matrix(n):\r\n        if n<=0:\r\n            return [] \r\n        matrix=[row[:] for row in [[0]*n]*n]        \r\n        row_st=0\r\n        row_ed=n-1        \r\n        col_st=0\r\n        col_ed=n-1\r\n        current=1        \r\n        while (True):\r\n            if current>n*n:\r\n                break\r\n            for c in range (col_st, col_ed+1):\r\n                matrix[row_st][c]=current\r\n                current+=1\r\n            row_st+=1\r\n            for r in range (row_st, row_ed+1):\r\n                matrix[r][col_ed]=current\r\n                current+=1\r\n            col_ed-=1\r\n            for c in range (col_ed, col_st-1, -1):\r\n                matrix[row_ed][c]=current\r\n                current+=1\r\n            row_ed-=1\r\n            for r in range (row_ed, row_st-1, -1):\r\n                matrix[r][col_st]=current\r\n                current+=1\r\n            col_st+=1\r\n        return matrix"
    },
    {
        "number": 835,
        "prompt": "Write a python function to find the slope of a line.\ndef slope(x1,y1,x2,y2): \n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    # Calculate slope using the formula (y2-y1)/(x2-x1) \n    slope = (y2 - y1) / (x2 - x1)\n    return slope ",
        "generated_testcode": "assert slope(1,2,3,4) == 1.0\n",
        "test": "assert slope(4,2,2,5) == -1.5\nassert slope(2,4,4,6) == 1\nassert slope(1,2,4,2) == 0",
        "canonical_solution": "def slope(x1,y1,x2,y2): \r\n    return (float)(y2-y1)/(x2-x1)  "
    },
    {
        "number": 836,
        "prompt": "Write a function to find length of the subarray having maximum sum.\ndef max_sub_array_sum(a,size): \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    max_so_far = a[0] \n    max_ending_here = a[0] \n      \n    for i in range(1,size): \n        max_ending_here = max(a[i], max_ending_here + a[i]) \n        max_so_far = max(max_so_far, max_ending_here) \n    return max_so_far \n  \n\n\na = [1, -2, 3, 5, -7, 8, -1, 6] \nprint(\"Length of maximum subarray is\", max_sub_array_sum(a, len(a)) \n",
        "generated_testcode": "assert max_sub_array_sum([1, -2, 3, 4, -1, -3, 5, 2, -2, 6, 1, -4] , 7) == 6\n",
        "test": "assert max_sub_array_sum([-2, -3, 4, -1, -2, 1, 5, -3],8) == 5\nassert max_sub_array_sum([1, -2, 1, 1, -2, 1],6) == 2\nassert max_sub_array_sum([-1, -2, 3, 4, 5],5) == 3",
        "canonical_solution": "from sys import maxsize \r\ndef max_sub_array_sum(a,size): \r\n\tmax_so_far = -maxsize - 1\r\n\tmax_ending_here = 0\r\n\tstart = 0\r\n\tend = 0\r\n\ts = 0\r\n\tfor i in range(0,size): \r\n\t\tmax_ending_here += a[i] \r\n\t\tif max_so_far < max_ending_here: \r\n\t\t\tmax_so_far = max_ending_here \r\n\t\t\tstart = s \r\n\t\t\tend = i \r\n\t\tif max_ending_here < 0: \r\n\t\t\tmax_ending_here = 0\r\n\t\t\ts = i+1\r\n\treturn (end - start + 1)"
    },
    {
        "number": 837,
        "prompt": "Write a python function to find the cube sum of first n odd natural numbers.\ndef cube_Sum(n): \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    sum = 0\n    i = 1\n    while i <= n:\n        sum += i**3\n        i += 2\n    return sum\n\n#test the function\nprint(cube_Sum(5)) #should return 35\nprint(cube_Sum(10)) #should return 2259\nprint(cube_Sum(15)) #should return 14641",
        "generated_testcode": "assert cube_Sum(5) == 225 # 1^3 + 3^3 + 5^3 + 7^3 + 9^3 + 111^3 + 13^3 = 225\n",
        "test": "assert cube_Sum(2) == 28\nassert cube_Sum(3) == 153\nassert cube_Sum(4) == 496",
        "canonical_solution": "def cube_Sum(n): \r\n    sum = 0   \r\n    for i in range(0,n) : \r\n        sum += (2*i+1)*(2*i+1)*(2*i+1) \r\n    return sum"
    },
    {
        "number": 838,
        "prompt": "Write a python function to find minimum number swaps required to make two binary strings equal.\ndef min_Swaps(s1,s2) :  \n",
        "checkpoint": "7B",
        "pass": 3,
        "correct": true,
        "answer": "    if len(s1)!=len(s2):\n        return -1\n    s1 = list(s1)\n    s2 = list(s2)\n    i = 0\n    count = 0\n    while i<len(s1):\n        if s1[i]!=s2[i]:\n            s1[i],s2[i]=s2[i],s1[i]\n            count+=1\n        i+=1\n    return count\n\ns1 = \"10101\"\ns2 = \"01110\"\nprint(min_Swaps(s1,s2))\n\n",
        "generated_testcode": "assert min_Swaps(s1='101101', s2='111100') == 2\n",
        "test": "assert min_Swaps(\"0011\",\"1111\") == 1\nassert min_Swaps(\"00011\",\"01001\") == 2\nassert min_Swaps(\"111\",\"111\") == 0",
        "canonical_solution": "def min_Swaps(s1,s2) :  \r\n    c0 = 0; c1 = 0;  \r\n    for i in range(len(s1)) :  \r\n        if (s1[i] == '0' and s2[i] == '1') : \r\n            c0 += 1;    \r\n        elif (s1[i] == '1' and s2[i] == '0') : \r\n            c1 += 1;  \r\n    result = c0 // 2 + c1 // 2;  \r\n    if (c0 % 2 == 0 and c1 % 2 == 0) : \r\n        return result;  \r\n    elif ((c0 + c1) % 2 == 0) : \r\n        return result + 2;  \r\n    else : \r\n        return -1;  "
    },
    {
        "number": 839,
        "prompt": "Write a function to sort the tuples alphabetically by the first item of each tuple.\ndef sort_tuple(tup): \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    return sorted(tup, key=lambda x:x[0]) ",
        "generated_testcode": "assert sort_tuple(()) == ()\n",
        "test": "assert sort_tuple([(\"Amana\", 28), (\"Zenat\", 30), (\"Abhishek\", 29),(\"Nikhil\", 21), (\"B\", \"C\")]) == [('Abhishek', 29), ('Amana', 28), ('B', 'C'), ('Nikhil', 21), ('Zenat', 30)]\nassert sort_tuple([(\"aaaa\", 28), (\"aa\", 30), (\"bab\", 29), (\"bb\", 21), (\"csa\", \"C\")]) == [('aa', 30), ('aaaa', 28), ('bab', 29), ('bb', 21), ('csa', 'C')]\nassert sort_tuple([(\"Sarala\", 28), (\"Ayesha\", 30), (\"Suman\", 29),(\"Sai\", 21), (\"G\", \"H\")]) == [('Ayesha', 30), ('G', 'H'), ('Sai', 21), ('Sarala', 28), ('Suman', 29)]",
        "canonical_solution": "def sort_tuple(tup): \r\n\tn = len(tup) \r\n\tfor i in range(n): \r\n\t\tfor j in range(n-i-1): \r\n\t\t\tif tup[j][0] > tup[j + 1][0]: \r\n\t\t\t\ttup[j], tup[j + 1] = tup[j + 1], tup[j] \r\n\treturn tup"
    },
    {
        "number": 840,
        "prompt": "Write a python function to check whether the roots of a quadratic equation are numerically equal but opposite in sign or not.\ndef Check_Solution(a,b,c):  \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    if a!=0:\n        delta=b**2-4*a*c\n        if delta<0:\n            return False\n        elif delta==0:\n            return True\n        else:\n            x1=(-b+math.sqrt(delta))/2*a\n            x2=(-b-math.sqrt(delta))/2*a\n            if x1*x2<0:\n                return True\n            else:\n                return False\n    else:\n        if b!=0:\n            return False\n        else:\n            return False\n            \n#test the function\nprint(Check_Solution(1,-5,6)) #True\nprint(Check_Solution(1,0,0)) #False\nprint(Check_Solution(1,0,1)) #False\nprint(Check_Solution(1,4,2)) #False\nprint(Check_Solution(1,-4,-2)) #True\nprint(Check_Solution(1,4,8)) #True\nprint(Check_Solution(1,1,3)) #False",
        "generated_testcode": "assert Check_Solution(1, -3, 4) == True\n",
        "test": "assert Check_Solution(2,0,-1) == \"Yes\"\nassert Check_Solution(1,-5,6) == \"No\"\nassert Check_Solution(2,0,2) == \"Yes\"",
        "canonical_solution": "def Check_Solution(a,b,c):  \r\n    if b == 0:  \r\n        return (\"Yes\")  \r\n    else: \r\n        return (\"No\")  "
    },
    {
        "number": 841,
        "prompt": "Write a function to count the number of inversions in the given array.\ndef get_inv_count(arr, n): \n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": true,
        "answer": " \n    count = 0\n    for i in range(n): \n        for j in range(i + 1, n): \n            if arr[i] > arr[j]: \n                count += 1\n    return count \n\n# Driver code \narr = [1, 20, 6, 4, 5, 3, 10] \nn = len(arr) \nprint(\"Number of inversions are:\", get_inv_count(arr, n)) ",
        "generated_testcode": "assert get_inv_count([1, 2, 3, 4, 5, 6, 7, 8, 9] , 6) == 0\n",
        "test": "assert get_inv_count([1, 20, 6, 4, 5], 5) == 5\nassert get_inv_count([8, 4, 2, 1], 4) == 6\nassert get_inv_count([3, 1, 2], 3) == 2",
        "canonical_solution": "def get_inv_count(arr, n): \r\n\tinv_count = 0\r\n\tfor i in range(n): \r\n\t\tfor j in range(i + 1, n): \r\n\t\t\tif (arr[i] > arr[j]): \r\n\t\t\t\tinv_count += 1\r\n\treturn inv_count "
    },
    {
        "number": 842,
        "prompt": "Write a function to find the number which occurs for odd number of times in the given array.\ndef get_odd_occurence(arr, arr_size):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    freq = {}\n    for i in range(arr_size):\n        if arr[i] not in freq:\n            freq[arr[i]] = 1\n        else:\n            freq[arr[i]] += 1\n    for key, value in freq.items():\n        if value % 2 == 1:\n            return key\n    return -1\n\n# Test the function\narr = [1, 2, 3, 4, 5, 6, 5, 4, 3, 2, 1]\nn = len(arr)\nprint(get_odd_occurence(arr, n))\n\n\n# Output: 6\n# Explanation: The number 6 occurs odd number of times, so it is returned as the output.\n\n\narr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 9, 8, 7, 6, 5, 4, 3, 2, 1]\nn = len(arr)\nprint(get_odd_occurence(arr, n))\n\n# Output: -1\n# Explanation: There is no element which occurs odd number of times in the given array. ",
        "generated_testcode": "assert get_odd_occurence([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10] , 10) == 5\n",
        "test": "assert get_odd_occurence([2, 3, 5, 4, 5, 2, 4, 3, 5, 2, 4, 4, 2], 13) == 5\nassert get_odd_occurence([1, 2, 3, 2, 3, 1, 3], 7) == 3\nassert get_odd_occurence([5, 7, 2, 7, 5, 2, 5], 7) == 5",
        "canonical_solution": "def get_odd_occurence(arr, arr_size):\r\n  for i in range(0, arr_size):\r\n    count = 0\r\n    for j in range(0, arr_size):\r\n      if arr[i] == arr[j]:\r\n        count += 1\r\n    if (count % 2 != 0):\r\n      return arr[i]\r\n  return -1"
    },
    {
        "number": 843,
        "prompt": "Write a function to find the nth super ugly number from a given prime list of size k using heap queue algorithm.\ndef nth_super_ugly_number(n, primes):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    heap = []\n    num = 1\n    ugly_numbers = []\n    for i in range(k):\n        heapq.heappush(heap, (num * primes[i], i, num))\n        ugly_numbers.append(num)\n    for _ in range(n - k):\n        next_num = heapq.heappop(heap)[2] + 1\n        for i in range(k):\n            if next_num % primes[i] == 0:\n                heapq.heappush(heap, (next_num * primes[i], i, next_num))\n                ugly_numbers.append(next_num)\n                break\n    return ugly_numbers[-1]\n\n\n# Test cases\nprint(nth_super_ugly_number(10, [2, 3, 5])) # Output: 10\nprint(nth_super_ugly_number(100, [2, 3, 5, 7, 13])) # Output: 125\nprint(nth_super_ugly_number(10000, [2, 3, 5, 7, 13, 19])) # Output: 576\nprint(nth_super_ugly_number(100000000000, [2, 3, 5, 7, 11, 13, 17, 19, 23, 29,",
        "generated_testcode": "assert nth_super_ugly_number(10, [2, 3, 5]) == 12, \"Test case 1 failed\"\n",
        "test": "assert nth_super_ugly_number(12,[2,7,13,19])==32\nassert nth_super_ugly_number(10,[2,7,13,19])==26\nassert nth_super_ugly_number(100,[2,7,13,19])==5408",
        "canonical_solution": "import heapq\r\ndef nth_super_ugly_number(n, primes):\r\n    uglies = [1]\r\n    def gen(prime):\r\n        for ugly in uglies:\r\n            yield ugly * prime\r\n    merged = heapq.merge(*map(gen, primes))\r\n    while len(uglies) < n:\r\n        ugly = next(merged)\r\n        if ugly != uglies[-1]:\r\n            uglies.append(ugly)\r\n    return uglies[-1]"
    },
    {
        "number": 844,
        "prompt": "Write a python function to find the kth element in an array containing odd elements first and then even elements.\ndef get_Number(n, k): \n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    odd_arr = []\n    even_arr = []\n    for i in range(1,n+1):\n        if i%2 == 0:\n            even_arr.append(i)\n        else:\n            odd_arr.append(i)\n    odd_arr.sort()\n    even_arr.sort(reverse=True)\n    kth_element = 0\n    if k<=len(odd_arr):\n        kth_element = odd_arr[k-1]\n    else:\n        kth_element = even_arr[k-(len(odd_arr))-1]\n    return kth_element\n\n#Test the function with the given test cases\nprint(get_Number(7, 1))\nprint(get_Number(10, 6))\nprint(get_Number(15, 4))",
        "generated_testcode": "assert get_Number(5, 2) == 3\n",
        "test": "assert get_Number(8,5) == 2\nassert get_Number(7,2) == 3\nassert get_Number(5,2) == 3",
        "canonical_solution": "def get_Number(n, k): \r\n    arr = [0] * n; \r\n    i = 0; \r\n    odd = 1; \r\n    while (odd <= n):   \r\n        arr[i] = odd; \r\n        i += 1; \r\n        odd += 2;\r\n    even = 2; \r\n    while (even <= n): \r\n        arr[i] = even; \r\n        i += 1;\r\n        even += 2; \r\n    return arr[k - 1]; "
    },
    {
        "number": 845,
        "prompt": "Write a python function to count the number of digits in factorial of a given number.\ndef find_Digits(n): \n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    if n == 0:\n        return 1\n    else:\n        count = 0\n        factorial = 1\n        for i in range(1, n+1):\n            factorial *= i\n        num = factorial\n        while(num > 0):\n            count += num % 10\n            num //= 10\n        return count\n\n#test the function\nprint(find_Digits(10)) # expected output: 2",
        "generated_testcode": "assert find_Digits(5) == 3 # 5! = 120\n",
        "test": "assert find_Digits(7) == 4\nassert find_Digits(5) == 3\nassert find_Digits(4) == 2",
        "canonical_solution": "import math \r\ndef find_Digits(n): \r\n    if (n < 0): \r\n        return 0;\r\n    if (n <= 1): \r\n        return 1; \r\n    x = ((n * math.log10(n / math.e) + math.log10(2 * math.pi * n) /2.0)); \r\n    return math.floor(x) + 1; "
    },
    {
        "number": 846,
        "prompt": "Write a function to find the minimum number of platforms required for a railway/bus station.\ndef find_platform(arr, dep, n): \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    if len(arr) != len(dep):\n        return -1\n    \n    if n == 0:\n        return 0\n    \n    if n == 1:\n        return 1\n    \n    if n == 2:\n        if arr[0] < dep[0] and dep[0] < arr[1]:\n            return 1\n        elif arr[1] < dep[1]:\n            return 2\n        else:\n            return 1\n    \n    count = 0\n    i = 0\n    j = 0\n    k = 1\n    max_count = 1\n    while k < n:\n        if arr[i] < dep[k]:\n            if dep[k] < arr[k+1]:\n                max_count += 1\n                k += 1\n            else:\n                i += 1\n                k += 1\n        else:\n            count += 1\n            k += 1\n    return max_count\n\n# Example usage:\narr1 = [900, 940, 950, 1100, 150, 180]\ndep1 = [910, 1200, 1120, 1500, 190]\nn1 = len(arr1)\nprint(find_platform(arr1, dep1, n1)) # Output: 3\n\narr2 = [900, 1200, 11",
        "generated_testcode": "assert find_platform(arr=[1, 3, 5, 7, 9, 11, 12, 15, 20], dep=[2, 6, 10, 14, 18, 22, 25], n=5) == 3\n",
        "test": "assert find_platform([900, 940, 950, 1100, 1500, 1800],[910, 1200, 1120, 1130, 1900, 2000],6)==3\nassert find_platform([100,200,300,400],[700,800,900,1000],4)==4\nassert find_platform([5,6,7,8],[4,3,2,1],4)==1",
        "canonical_solution": "def find_platform(arr, dep, n): \r\n    arr.sort() \r\n    dep.sort() \r\n    plat_needed = 1\r\n    result = 1\r\n    i = 1\r\n    j = 0\r\n    while (i < n and j < n): \r\n        if (arr[i] <= dep[j]):           \r\n            plat_needed+= 1\r\n            i+= 1\r\n        elif (arr[i] > dep[j]):           \r\n            plat_needed-= 1\r\n            j+= 1\r\n        if (plat_needed > result):  \r\n            result = plat_needed           \r\n    return result"
    },
    {
        "number": 847,
        "prompt": "Write a python function to copy a list from a singleton tuple.\ndef lcopy(xs):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    return xs[0]\n\n# Test the function\nprint(lcopy([1,2,3,4,5]))\n# Output: [1,2,3,4,5]\nprint(lcopy([1])\n# Output: [1] ",
        "generated_testcode": "assert lcopy(()) == []\n",
        "test": "assert lcopy([1, 2, 3]) == [1, 2, 3]\nassert lcopy([4, 8, 2, 10, 15, 18]) == [4, 8, 2, 10, 15, 18]\nassert lcopy([4, 5, 6]) == [4, 5, 6]\n",
        "canonical_solution": "def lcopy(xs):\n  return xs[:]\n"
    },
    {
        "number": 848,
        "prompt": "Write a function to find the area of a trapezium.\ndef area_trapezium(base1,base2,height):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    area = 0.5 * (base1 + base2) * height\n    return area\n\n#Testing the function\nprint(area_trapezium(10,12,14)) #Output: 60.0\nprint(area_trapezium(5,7,8)) #Output: 28.0\nprint(area_trapezium(12,15,16)) #Output: 80.0\nprint(area_trapezium(20,30,25)) #Output: 150.0\n\n",
        "generated_testcode": "assert area_trapezium(5,10,10) == 25\n",
        "test": "assert area_trapezium(6,9,4)==30\nassert area_trapezium(10,20,30)==450\nassert area_trapezium(15,25,35)==700",
        "canonical_solution": "def area_trapezium(base1,base2,height):\r\n area = 0.5 * (base1 + base2) * height\r\n return area"
    },
    {
        "number": 849,
        "prompt": "Write a python function to find sum of all prime divisors of a given number.\ndef Sum(N): \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    Sum = 0\n    for i in range(2,N): \n        if N % i == 0: \n            Sum += i \n    return Sum\n\n# Driver code \nN = 12\nprint(\"The sum of all prime divisors of\", N, \"is\", Sum(N)) ",
        "generated_testcode": "assert Sum(10) == 17\n",
        "test": "assert Sum(60) == 10\nassert Sum(39) == 16\nassert Sum(40) == 7",
        "canonical_solution": "def Sum(N): \r\n    SumOfPrimeDivisors = [0]*(N + 1)   \r\n    for i in range(2,N + 1) : \r\n        if (SumOfPrimeDivisors[i] == 0) : \r\n            for j in range(i,N + 1,i) : \r\n                SumOfPrimeDivisors[j] += i           \r\n    return SumOfPrimeDivisors[N] "
    },
    {
        "number": 850,
        "prompt": "Write a function to check if a triangle of positive area is possible with the given angles.\ndef is_triangleexists(a,b,c): \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    if a+b>c and a+c>b and b+c>a:\n        if a**2+b**2>c**2 and a**2+c**2>b**2 and b**2+c**2>a**2:\n            return True\n    else:\n        return False\n\n#test cases\nprint(is_triangleexists(30,60,90)) #True\nprint(is_triangleexists(30,45,60)) #False\nprint(is_triangleexists(90,30,60)) #True\nprint(is_triangleexists(60,45,30)) #False",
        "generated_testcode": "assert is_triangleexists(30,45,90) == True\n",
        "test": "assert is_triangleexists(50,60,70)==True\nassert is_triangleexists(90,45,45)==True\nassert is_triangleexists(150,30,70)==False",
        "canonical_solution": "def is_triangleexists(a,b,c): \r\n    if(a != 0 and b != 0 and c != 0 and (a + b + c)== 180): \r\n        if((a + b)>= c or (b + c)>= a or (a + c)>= b): \r\n            return True \r\n        else:\r\n            return False\r\n    else:\r\n        return False"
    },
    {
        "number": 851,
        "prompt": "Write a python function to find sum of inverse of divisors.\ndef Sum_of_Inverse_Divisors(N,Sum): \n",
        "checkpoint": "7B",
        "pass": 4,
        "correct": true,
        "answer": "    def sum_of_inverse_divisors(n):\n        total = 0\n        for i in range(1, n+1):\n            if n%i == 0:\n                total += (n/i)\n        return total\n    \n    result = 0\n    for i in range(1, N+1):\n        if sum_of_inverse_divisors(i) <= Sum:\n            result += i\n    return result\n\n# Test the function with N=10 and Sum=5\nprint(Sum_of_Inverse_Divisors(10, 5))\n# Output: 30\n",
        "generated_testcode": "assert Sum_of_Inverse_Divisors(10, 2) == 1\n",
        "test": "assert Sum_of_Inverse_Divisors(6,12) == 2\nassert Sum_of_Inverse_Divisors(9,13) == 1.44\nassert Sum_of_Inverse_Divisors(1,4) == 4",
        "canonical_solution": "def Sum_of_Inverse_Divisors(N,Sum): \r\n    ans = float(Sum)*1.0 /float(N);  \r\n    return round(ans,2); "
    },
    {
        "number": 852,
        "prompt": "Write a python function to remove negative numbers from a list.\ndef remove_negs(num_list): \n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    new_list = [] \n    for num in num_list: \n        if num >= 0: \n            new_list.append(num) \n    return new_list \n\n# Test the function \nnum_list = [1,2,-3,4,-5,6,-7,8,-9,10,11,12,13] \nprint(remove_negs(num_list)) # Output: [1,2,4,6,8,10,11,12,13] ",
        "generated_testcode": "assert remove_negs([1, 2, 3, -4, 5, -6, 7, -8, 9] ) == [1, 2, 3, 5, 7, 9]\n",
        "test": "assert remove_negs([1,-2,3,-4]) == [1,3]\nassert remove_negs([1,2,3,-4]) == [1,2,3]\nassert remove_negs([4,5,-6,7,-8]) == [4,5,7]",
        "canonical_solution": "def remove_negs(num_list): \r\n    for item in num_list: \r\n        if item < 0: \r\n           num_list.remove(item) \r\n    return num_list"
    },
    {
        "number": 853,
        "prompt": "Write a python function to find sum of odd factors of a number.\ndef sum_of_odd_Factors(n): \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    sum = 0\n    for i in range(1,n+1):\n        if n%i == 0:\n            if i % 2 != 0:\n                sum += i\n    return sum\n\nprint(sum_of_odd_Factors(10)) # Output: 1+3=4\nprint(sum_of_odd_Factors(15)) # Output: 1+3+5=9\n\n# Explanation:\n# In the first case, the factors of 10 are 1, 2, 5, 10. We only add 1 and 5 to the sum since they are odd numbers.\n# In the second case, the factors of 15 are 1, 3, 5, 5, 15. We only add 1 and 3 to the sum since they are odd numbers. ",
        "generated_testcode": "assert sum_of_odd_Factors(10) == 1+3+5+7+9\n",
        "test": "assert sum_of_odd_Factors(30) == 24\nassert sum_of_odd_Factors(18) == 13\nassert sum_of_odd_Factors(2) == 1",
        "canonical_solution": "import math\r\ndef sum_of_odd_Factors(n): \r\n    res = 1\r\n    while n % 2 == 0: \r\n        n = n // 2 \r\n    for i in range(3,int(math.sqrt(n) + 1)): \r\n        count = 0\r\n        curr_sum = 1\r\n        curr_term = 1\r\n        while n % i == 0: \r\n            count+=1 \r\n            n = n // i \r\n            curr_term *= i \r\n            curr_sum += curr_term    \r\n        res *= curr_sum  \r\n    if n >= 2: \r\n        res *= (1 + n) \r\n    return res "
    },
    {
        "number": 854,
        "prompt": "Write a function which accepts an arbitrary list and converts it to a heap using heap queue algorithm.\ndef raw_heap(rawheap):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    for i in range(len(rawheap)//2-1, -1, -1):\n        heapify(rawheap, i)\n    return rawheap\n\ndef heapify(heap, i):\n    left = 2*i + 1\n    right = 2*i + 2\n    largest = i\n    if left < len(heap) and heap[left] > heap[largest]:\n        largest = left\n    if right < len(heap) and heap[right] > heap[largest]:\n        largest = right\n    if largest != i:\n        heap[i], heap[largest] = heap[largest], heap[i]\n        heapify(heap, largest)\n\ndef heap_sort(rawheap):\n    heap = raw_heap(rawheap)\n    sorted_heap = []\n    for i in range(len(heap)-1, 0, -1):\n        heap[0], heap[i] = heap[i], heap[0]\n        heapify(heap, 0)\n        sorted_heap.append(heap.pop())\n    return sorted_heap\n\n# Testing\nprint(heap_sort([3, 2, 1, 5, 7, 4, 6, 8, 9, 10, 11, 12, 13, 15, 14, 16, 17]))\n# Output: [17,",
        "generated_testcode": "assert raw_heap(list(range(10)) == [0, 9, 4, 5, 1, 2, 3, 6, 7, 8, 10, 11, 12, 13, 14, 15]\n\n# Explanation:\n# The heap queue algorithm is a way to convert a list to a heap data structure. In this case, we are using the heap queue algorithm to convert a list of numbers to a heap. The heap queue algorithm works by starting with the largest element in the list and swapping it with the last element in the list, then swapping it with the next largest element, and so on until the heap is complete. The largest element is the root of the heap, and the next largest element is the second largest, and so on. The function raw_heap() takes a list as input and returns a list with the heapified version of the input list. The test code checks if the output is equal to the expected output. ",
        "test": "assert raw_heap([25, 44, 68, 21, 39, 23, 89])==[21, 25, 23, 44, 39, 68, 89]\nassert raw_heap([25, 35, 22, 85, 14, 65, 75, 25, 58])== [14, 25, 22, 25, 35, 65, 75, 85, 58]\nassert raw_heap([4, 5, 6, 2])==[2, 4, 6, 5]",
        "canonical_solution": "import heapq as hq\r\ndef raw_heap(rawheap):\r\n  hq.heapify(rawheap)\r\n  return rawheap"
    },
    {
        "number": 855,
        "prompt": "Write a python function to check for even parity of a given number.\ndef check_Even_Parity(x): \n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": true,
        "answer": "    if x % 2 == 0: \n        return True\n    else: \n        return False ",
        "generated_testcode": "assert check_Even_Parity(4) == True\n",
        "test": "assert check_Even_Parity(10) == True\nassert check_Even_Parity(11) == False\nassert check_Even_Parity(18) == True",
        "canonical_solution": "def check_Even_Parity(x): \r\n    parity = 0\r\n    while (x != 0): \r\n        x = x & (x - 1) \r\n        parity += 1\r\n    if (parity % 2 == 0): \r\n        return True\r\n    else: \r\n        return False"
    },
    {
        "number": 856,
        "prompt": "Write a python function to find minimum adjacent swaps required to sort binary array.\ndef find_Min_Swaps(arr,n) : \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    count=0\n    arr=sorted(arr)\n    i=0\n    while i<n:\n        if arr[i]==0:\n            i+=1\n        else:\n            arr[i]=0\n            count+=1\n            i=0\n    return count\n\nn=int(input(\"Enter the length of the binary array: \"))\narr=[]\nprint(\"Enter the binary array elements: \")\nfor i in range(n):\n    arr.append(int(input()))\n    if arr[i]!=0:\n        arr[i]=1\nprint(\"Minimum swaps required for binary array to be sorted: \",find_Min_Swaps(arr,n))",
        "generated_testcode": "assert find_Min_Swaps([1, 0, 1, 1, 0, 0, 1, 1] , 5) == 1\n",
        "test": "assert find_Min_Swaps([1,0,1,0],4) == 3\nassert find_Min_Swaps([0,1,0],3) == 1\nassert find_Min_Swaps([0,0,1,1,0],5) == 2",
        "canonical_solution": "def find_Min_Swaps(arr,n) : \r\n    noOfZeroes = [0] * n \r\n    count = 0 \r\n    noOfZeroes[n - 1] = 1 - arr[n - 1] \r\n    for i in range(n-2,-1,-1) : \r\n        noOfZeroes[i] = noOfZeroes[i + 1] \r\n        if (arr[i] == 0) : \r\n            noOfZeroes[i] = noOfZeroes[i] + 1\r\n    for i in range(0,n) : \r\n        if (arr[i] == 1) : \r\n            count = count + noOfZeroes[i] \r\n    return count "
    },
    {
        "number": 857,
        "prompt": "Write a function to list out the list of given strings individually using map function.\ndef listify_list(list1):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": true,
        "answer": "    return list(map(lambda x: [x], list1))\n\n\n# Test the function with the given test case\nprint(listify_list([\"apple\", \"banana\", \"orange\", \"grape\"]))\n\n\n# Output:\n# [['apple'], ['banana'], ['orange'], ['grape']]\n\n\n# Explanation:\n# The function takes a list of strings as input, applies the lambda function on each element of the list and returns a new list of lists containing the original strings. ",
        "generated_testcode": "assert listify_list([\"apple\", \"banana\", \"cherry\", \"orange\"]), [\"apple\", \"banana\", \"cherry\"]\n",
        "test": "assert listify_list(['Red', 'Blue', 'Black', 'White', 'Pink'])==[['R', 'e', 'd'], ['B', 'l', 'u', 'e'], ['B', 'l', 'a', 'c', 'k'], ['W', 'h', 'i', 't', 'e'], ['P', 'i', 'n', 'k']]\nassert listify_list(['python'])==[['p', 'y', 't', 'h', 'o', 'n']]\nassert listify_list([' red ', 'green',' black', 'blue ',' orange', 'brown'])==[[' ', 'r', 'e', 'd', ' '], ['g', 'r', 'e', 'e', 'n'], [' ', 'b', 'l', 'a', 'c', 'k'], ['b', 'l', 'u', 'e', ' '], [' ', 'o', 'r', 'a', 'n', 'g', 'e'], ['b', 'r', 'o', 'w', 'n']]",
        "canonical_solution": "def listify_list(list1):\r\n  result = list(map(list,list1)) \r\n  return result "
    },
    {
        "number": 858,
        "prompt": "Write a function to count number of lists in a given list of lists and square the count.\ndef count_list(input_list): \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    count = 0\n    for i in input_list:\n        if type(i) == list:\n            count += 1\n    return count**2\n\n# Test the function with some inputs\nprint(count_list([1,2,[3,4],5,6,[7,8],9]))  # Output: 4\nprint(count_list([1,2,3,4,5,[6,7,[8,9],10])) # Output: 5\nprint(count_list([[1,[2,[3,[4,5],6],7],8,9])) # Output: 6\nprint(count_list([1])) # Output: 1\nprint(count_list([])) # Output: 0\n",
        "generated_testcode": "assert count_list([] == 0)\n",
        "test": "assert count_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==25\nassert count_list([[1, 3], [5, 7], [9, 11], [13, 15, 17]] )==16\nassert count_list([[2, 4], [[6,8], [4,5,8]], [10, 12, 14]])==9",
        "canonical_solution": "def count_list(input_list): \r\n    return (len(input_list))**2"
    },
    {
        "number": 859,
        "prompt": "Write a function to generate all sublists of a given list.\ndef sub_lists(my_list):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    result = []\n    for i in range(len(my_list)):\n        for j in range(i+1, len(my_list)+1):\n            result.append(my_list[i:j])\n    return result\n\n\n# Example usage:\nmy_list = [1, 2, 3, 4, 5]\nprint(sub_lists(my_list)) # Output: [[1], [2], [3], [4], [5], [1, 2], [2, 3], [3, 4], [4, 5], [1, 2, 3], [2, 3, 4], [3, 4, 5], [1, 2, 3, 4], [2, 3, 4, 5], [1, 2, 3, 4, 5]]\n\n\n# Another example:\nmy_list = [1, 2, 3, 4, 5, 6]\nprint(sub_lists(my_list)) # Output: [[1], [2], [3], [4], [5], [6], [1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [1, 2, 3], [2, 3, 4], [3, 4, 5], [4, 5, 6], [1, 2, 3, 4], [2, 3, 4, ",
        "generated_testcode": "assert sub_lists([\"a\", \"b\", \"c\", \"d\"] == [[\"a\"], [\"b\"], [\"c\"], [\"d\"], [\"a\", \"b\"], [\"a\", \"c\"], [\"b\", \"c\"], [\"a\", \"d\"], [\"b\", \"d\"], [\"a\", \"c\", \"d\"], [\"a\", \"b\", \"c\", \"d\"]]\n\n# Test case 2\n",
        "test": "assert sub_lists([10, 20, 30, 40])==[[], [10], [20], [30], [40], [10, 20], [10, 30], [10, 40], [20, 30], [20, 40], [30, 40], [10, 20, 30], [10, 20, 40], [10, 30, 40], [20, 30, 40], [10, 20, 30, 40]]\nassert sub_lists(['X', 'Y', 'Z'])==[[], ['X'], ['Y'], ['Z'], ['X', 'Y'], ['X', 'Z'], ['Y', 'Z'], ['X', 'Y', 'Z']]\nassert sub_lists([1,2,3])==[[],[1],[2],[3],[1,2],[1,3],[2,3],[1,2,3]]",
        "canonical_solution": "from itertools import combinations\r\ndef sub_lists(my_list):\r\n\tsubs = []\r\n\tfor i in range(0, len(my_list)+1):\r\n\t  temp = [list(x) for x in combinations(my_list, i)]\r\n\t  if len(temp)>0:\r\n\t    subs.extend(temp)\r\n\treturn subs"
    },
    {
        "number": 860,
        "prompt": "Write a function to check whether the given string is ending with only alphanumeric characters or not using regex.\ndef check_alphanumeric(string): \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    import re\n    pattern = r'^[a-zA-Z0-9]+$'\n    return bool(re.match(pattern,string))\n\n# Test the function with different inputs\nprint(check_alphanumeric(\"hello123\")) # True\nprint(check_alphanumeric(\"hello world\")) # False\nprint(check_alphanumeric(\"12345\")) # True\nprint(check_alphanumeric(\"hello123$\")) # False\nprint(check_alphanumeric(\"hello_123\")) # False\nprint(check_alphanumeric(\"hello\")) # True\n",
        "generated_testcode": "assert check_alphanumeric(123abc) == False\n",
        "test": "assert check_alphanumeric(\"dawood@\") == 'Discard'\nassert check_alphanumeric(\"skdmsam326\") == 'Accept'\nassert check_alphanumeric(\"cooltricks@\") == 'Discard'",
        "canonical_solution": "import re \r\nregex = '[a-zA-z0-9]$'\r\ndef check_alphanumeric(string): \r\n\tif(re.search(regex, string)): \r\n\t\treturn (\"Accept\") \r\n\telse: \r\n\t\treturn (\"Discard\") "
    },
    {
        "number": 861,
        "prompt": "Write a function to find all anagrams of a string in a given list of strings using lambda function.\ndef anagram_lambda(texts,str):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    return list(filter(lambda x: sorted(x)==sorted(str),texts))\n\n#example usage:\ntexts=['listen', 'silent', 'enlist', 'python', 'nope', 'tiems', 'tiems', 'slight', 'least']\nstr='listen'\nprint(anagram_lambda(texts,str)) #Output: ['listen', 'silent']\n#The function should return all the anagrams of the given string in the list.\n",
        "generated_testcode": "assert anagram_lambda([\"listen\",\"silent\",\"enlist\",\"least\",\"steel\",\"flee\",\"listen\",\"tiller\",\"post\",\"stop\",\"toil\",\"peace\",\"stole\",\"pole\"], \"listen\") == [\"listen\",\"silent\",\"enlist\",\"least\"]\n",
        "test": "assert anagram_lambda([\"bcda\", \"abce\", \"cbda\", \"cbea\", \"adcb\"],\"abcd\")==['bcda', 'cbda', 'adcb']\nassert anagram_lambda([\"recitals\",\" python\"], \"articles\" )==[\"recitals\"]\nassert anagram_lambda([\" keep\",\" abcdef\",\" xyz\"],\" peek\")==[\" keep\"]",
        "canonical_solution": "from collections import Counter \r\ndef anagram_lambda(texts,str):\r\n  result = list(filter(lambda x: (Counter(str) == Counter(x)), texts)) \r\n  return result"
    },
    {
        "number": 862,
        "prompt": "Write a function to find the occurrences of n most common words in a given text.\ndef n_common_words(text,n):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    words = text.split()\n    word_count = {}\n    for word in words:\n        if word in word_count:\n            word_count[word] += 1\n        else:\n            word_count[word] = 1\n\n    sorted_words = sorted(word_count.items(), key=lambda x: x[1], reverse=True)\n    return sorted_words[:n]\n\n# Test\ntext = \"the quick brown fox jumps over the lazy dog the quick brown dog jumps over the lazy dog the quick brown dog jumps\"\nn = 2\nprint(n_common_words(text, n)) # Output: [('the', 3), ('quick', 3)]\n\ntext = \"python is awesome it is a great programming language python is awesome and easy to learn python is awesome\"\nn = 2\nprint(n_common_words(text, n)) # Output: [('python', 3), ('is', 3)]\n\ntext = \"hello world hello world world hello python world hello world\"\nn = 2\nprint(n_common_words(text, n)) # Output: [('hello', 3), ('world', 3)]\n\ntext = \"I like python, python is a great language, python is easy to learn\"\nn = 2\nprint(n_common_words(text, n)) # Output: [('python', 3), ('is', 2)]\n\ntext = \"python is awesome python is awesome python is awesome python is awesome python is awesome python is awesome",
        "generated_testcode": "assert n_common_words(text=\"This is a sample text with some words to find the occurrences of common words\", n=2) == ['is', 'words']\n",
        "test": "assert n_common_words(\"python is a programming language\",1)==[('python', 1)]\nassert n_common_words(\"python is a programming language\",1)==[('python', 1)]\nassert n_common_words(\"python is a programming language\",5)==[('python', 1),('is', 1), ('a', 1), ('programming', 1), ('language', 1)]",
        "canonical_solution": "from collections import Counter\r\nimport re\r\ndef n_common_words(text,n):\r\n  words = re.findall('\\w+',text)\r\n  n_common_words= Counter(words).most_common(n)\r\n  return list(n_common_words)"
    },
    {
        "number": 863,
        "prompt": "Write a function to find the length of the longest sub-sequence such that elements in the subsequences are consecutive integers.\ndef find_longest_conseq_subseq(arr, n): \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    if n == 0:\n        return 0\n    \n    max_len = 1\n    curr_len = 1\n    for i in range(1, n):\n        if arr[i] - arr[i-1] == 1:\n            curr_len += 1\n        else:\n            max_len = max(max_len, curr_len)\n            curr_len = 1\n    \n    return max(max_len, curr_len)\n\n\n# Test the function\narr = [1, 9, 3, 10, 11, 12, 5, 6, 7, 8, 4]\nn = len(arr)\nprint(find_longest_conseq_subseq(arr, n)) # Output: 4 (1, 2, 3, 4, 5) or 1, 2, 10, 11, 12\n\narr = [1, 2, 3, 4, 7, 8, 9]\nn = len(arr)\nprint(find_longest_conseq_subseq(arr, n)) # Output: 3 (1, 2, 3) or 4, 5, 6, 7\n\narr = [1, 2, 3, 4, 6, 7, 9]\nn = len(arr)\nprint(find_longest_conseq_subseq(arr, n)) # Output: 2",
        "generated_testcode": "assert find_longest_conseq_subseq([1,9,3,7,1,10,4,20,15,2,6,5,11,8], 9) == 5\n",
        "test": "assert find_longest_conseq_subseq([1, 2, 2, 3], 4) == 3\nassert find_longest_conseq_subseq([1, 9, 3, 10, 4, 20, 2], 7) == 4\nassert find_longest_conseq_subseq([36, 41, 56, 35, 44, 33, 34, 92, 43, 32, 42], 11) == 5",
        "canonical_solution": "def find_longest_conseq_subseq(arr, n): \r\n\tans = 0\r\n\tcount = 0\r\n\tarr.sort() \r\n\tv = [] \r\n\tv.append(arr[0]) \r\n\tfor i in range(1, n): \r\n\t\tif (arr[i] != arr[i - 1]): \r\n\t\t\tv.append(arr[i]) \r\n\tfor i in range(len(v)): \r\n\t\tif (i > 0 and v[i] == v[i - 1] + 1): \r\n\t\t\tcount += 1\r\n\t\telse: \r\n\t\t\tcount = 1\r\n\t\tans = max(ans, count) \r\n\treturn ans "
    },
    {
        "number": 864,
        "prompt": "Write a function to find palindromes in a given list of strings using lambda function.\ndef palindrome_lambda(texts):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    # lambda function to check if a string is palindrome\n    is_palindrome = lambda x: x == x[::-1]\n    # filter to find all the palindromes from the list of strings\n    result = list(filter(lambda x: is_palindrome(x), texts))\n    return result\n\n# example usage:\ntexts = [\"racecar\", \"hello\", \"world\", \"madam\", \"rotor\", \"python\", \"level\", \"kayak\"]\nprint(palindrome_lambda(texts)) # Output: ['racecar', 'madam', 'level']\n",
        "generated_testcode": "assert palindrome_lambda([\"racecar\", \"hello\", \"level\", \"world\", \"python\", \"madam\"]) == [\"racecar\", \"madam\"]\n",
        "test": "assert palindrome_lambda([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"])==['php', 'aaa']\nassert palindrome_lambda([\"abcd\", \"Python\", \"abba\", \"aba\"])==['abba', 'aba']\nassert palindrome_lambda([\"abcd\", \"abbccbba\", \"abba\", \"aba\"])==['abbccbba', 'abba', 'aba']",
        "canonical_solution": "def palindrome_lambda(texts):\r\n  result = list(filter(lambda x: (x == \"\".join(reversed(x))), texts))\r\n  return result"
    },
    {
        "number": 865,
        "prompt": "Write a function to print n-times a list using map function.\ndef ntimes_list(nums,n):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    return list(map(lambda x:nums,range(n))\n\n\n# Test the function with input list [1,2,3,4,5] and n=3\nprint(ntimes_list([1,2,3,4,5],3)) # Output: [1,2,3,4,5,1,2,3,4,5,1,2,3,4,5]\n\n\n# Test the function with input list [1,2,3] and n=2\nprint(ntimes_list([1,2,3],2) # Output: [1,2,3,1,2,3]\n\n# Test the function with input list [1,2,3,4,5,6] and n=4\nprint(ntimes_list([1,2,3,4,5,6],4) # Output: [1,2,3,4,5,6,1,2,3,4,5,6,1,2,3,4,5,6,1,2,3,4,5,6] ",
        "generated_testcode": "assert ntimes_list(range(5),3) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n",
        "test": "assert ntimes_list([1, 2, 3, 4, 5, 6, 7],3)==[3, 6, 9, 12, 15, 18, 21]\nassert ntimes_list([1, 2, 3, 4, 5, 6, 7],4)==[4, 8, 12, 16, 20, 24, 28]\nassert ntimes_list([1, 2, 3, 4, 5, 6, 7],10)==[10, 20, 30, 40, 50, 60, 70]",
        "canonical_solution": "def ntimes_list(nums,n):\r\n    result = map(lambda x:n*x, nums) \r\n    return list(result)"
    },
    {
        "number": 866,
        "prompt": "Write a function to check whether the given month name contains 31 days or not.\ndef check_monthnumb(monthname2):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    month_dict = {'January':31, 'February':28, 'March':31, 'April':30, 'May':31, 'June':30, 'July':31, 'August':31, 'September':30, 'October':31, 'November':30, 'December':31}\n    if monthname2 in month_dict.keys():\n        if month_dict[monthname2] == 31:\n            return True\n    else:\n        return False\n\n# Example usage:\nprint(check_monthnumb('April')) # True\nprint(check_monthnumb('February')) # True\nprint(check_monthnumb('December')) # True\nprint(check_monthnumb('January')) # False\nprint(check_monthnumb('March')) # False",
        "generated_testcode": "assert check_monthnumb(1) == True\n",
        "test": "assert check_monthnumb(\"February\")==False\nassert check_monthnumb(\"January\")==True\nassert check_monthnumb(\"March\")==True",
        "canonical_solution": "def check_monthnumb(monthname2):\r\n  if(monthname2==\"January\" or monthname2==\"March\"or monthname2==\"May\" or monthname2==\"July\" or monthname2==\"Augest\" or monthname2==\"October\" or monthname2==\"December\"):\r\n    return True\r\n  else:\r\n    return False"
    },
    {
        "number": 867,
        "prompt": "Write a python function to add a minimum number such that the sum of array becomes even.\ndef min_Num(arr,n):  \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    #initialize a variable to store the sum of array elements\n    sum = 0\n    for i in range(n):\n        sum += arr[i]\n    #check if sum is odd\n    if sum % 2 == 0:\n        return 0\n    else:\n        #if sum is odd, add a minimum number such that sum becomes even\n        return (sum + 1)//2\n   \n#sample input and output\narr = [1,2,3,4,5,6]\nn = len(arr)\nprint(min_Num(arr,n))\n#output: 1\n\narr = [1,3,5,7,9]\nn = len(arr)\nprint(min_Num(arr,n))\n#output: 2\narr = [1,2,4]\nn = len(arr)\nprint(min_Num(arr,n))\n#output: 0\n",
        "generated_testcode": "assert min_Num([1,2,3,4,5,6,7,8], 10) == 1\n",
        "test": "assert min_Num([1,2,3,4,5,6,7,8,9],9) == 1\nassert min_Num([1,2,3,4,5,6,7,8],8) == 2\nassert min_Num([1,2,3],3) == 2",
        "canonical_solution": "def min_Num(arr,n):  \r\n    odd = 0\r\n    for i in range(n): \r\n        if (arr[i] % 2): \r\n            odd += 1 \r\n    if (odd % 2): \r\n        return 1\r\n    return 2"
    },
    {
        "number": 868,
        "prompt": "Write a python function to find the length of the last word in a given string.\ndef length_Of_Last_Word(a): \n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    words = a.split()\n    return len(words[-1])\n\n# test the function\nprint(length_Of_Last_Word(\"Hello world\")) ",
        "generated_testcode": "assert length_Of_Last_Word(a=\"Hello world\") == 5\n",
        "test": "assert length_Of_Last_Word(\"python language\") == 8\nassert length_Of_Last_Word(\"PHP\") == 3\nassert length_Of_Last_Word(\"\") == 0",
        "canonical_solution": "def length_Of_Last_Word(a): \r\n    l = 0\r\n    x = a.strip() \r\n    for i in range(len(x)): \r\n        if x[i] == \" \": \r\n            l = 0\r\n        else: \r\n            l += 1\r\n    return l "
    },
    {
        "number": 869,
        "prompt": "Write a function to remove sublists from a given list of lists, which are outside a given range.\ndef remove_list_range(list1, leftrange, rigthrange):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    new_list = []\n    for sublist in list1:\n        if leftrange <= sublist[0] <= rigthrange:\n            new_list.append(sublist)\n    return new_list\n\n# Test the function with an example\nlist1 = [[1,2,3], [4,5,6], [7,8,9], [10,11,12], [13,14,15]]\nleftrange = 4\nrigthrange = 11\nprint(remove_list_range(list1, leftrange, rigthrange)) # Output: [[4, 5, 6], [7, 8, 9]]\n\n# Test the function with another example\nlist2 = [[1,2,3], [4,5,6], [7,8,9], [10,11,12], [13,14,15], [16,17,18]]\nleftrange = 10\nrigthrange = 13\nprint(remove_list_range(list2, leftrange, rigthrange)) # Output: [[10, 11, 12], [13, 14, 15]]\n\n# Test the function with another example\nlist3 = [[1,2,3], [4,5,6], [7,8,9], [10,11,12], [13,14,15], [16,17,",
        "generated_testcode": "assert remove_list_range([[1,2,3],[4,5,6],[7,8,9],[10,11,12],[13,14,15],[16,17,18],[19,20,21],[22,23,24],[25,26,27],[28,29,30],[31,32,33],[34,35,36],[37,38,39],[40,41,42],[43,44,45],[46,47,48],[49,50,51],[52,53,54],[55,56,57],[58,59,60],[61,62,63],[64,65,66],[67,68,69],[70,71,72],[73,74,75],[76,77,78],[79,80,81],[82,83,84],[85,86,87],[88,89,90],[91,92,93],[94,95,96],[97,98,99],[100,1101,1",
        "test": "assert remove_list_range([[2], [0], [1, 2, 3], [0, 1, 2, 3, 6, 7], [9, 11], [13, 14, 15, 17]],13,17)==[[13, 14, 15, 17]]\nassert remove_list_range([[2], [0], [1, 2, 3], [0, 1, 2, 3, 6, 7], [9, 11], [13, 14, 15, 17]],1,3)==[[2], [1, 2, 3]]\nassert remove_list_range([[2], [0], [1, 2, 3], [0, 1, 2, 3, 6, 7], [9, 11], [13, 14, 15, 17]],0,7)==[[2], [0], [1, 2, 3], [0, 1, 2, 3, 6, 7]]",
        "canonical_solution": "def remove_list_range(list1, leftrange, rigthrange):\r\n   result = [i for i in list1 if (min(i)>=leftrange and max(i)<=rigthrange)]\r\n   return result"
    },
    {
        "number": 870,
        "prompt": "Write a function to calculate the sum of the positive numbers of a given list of numbers using lambda function.\ndef sum_positivenum(nums):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    return lambda x: sum(filter(lambda y: y > 0, nums)\n\n\n# Test the function\nprint(sum_positivenum([1,2,-3,4,5,-6,7,-8,9,10])(10))\n# Output: 25",
        "generated_testcode": "assert sum_positivenum(list(range(-5, 5)) == 0)\n",
        "test": "assert sum_positivenum([2, 4, -6, -9, 11, -12, 14, -5, 17])==48\nassert sum_positivenum([10,15,-14,13,-18,12,-20])==50\nassert sum_positivenum([19, -65, 57, 39, 152,-639, 121, 44, 90, -190])==522",
        "canonical_solution": "def sum_positivenum(nums):\r\n  sum_positivenum = list(filter(lambda nums:nums>0,nums))\r\n  return sum(sum_positivenum)"
    },
    {
        "number": 871,
        "prompt": "Write a python function to check whether the given strings are rotations of each other or not.\ndef are_Rotations(string1,string2): \n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    if(len(string1)!=len(string2)): \n        return False\n    concat_str = string1 + string1 \n    if(string2 in concat_str): \n        return True \n    else: \n        return False\n\n# Test cases \nstring1 = \"waterbottle\" \nstring2 = \"erbottlewat\"\nprint(are_Rotations(string1, string2)) # True \n\nstring1 = \"rotateto\" \nstring2 = \"toarotate\"\nprint(are_Rotations(string1, string2)) # True \n\nstring1 = \"hello\" \nstring2 = \"llohe\"\nprint(are_Rotations(string1, string2)) # False ",
        "generated_testcode": "assert are_Rotations(string1=\"water\",string2=\"terwa\") == True\n",
        "test": "assert are_Rotations(\"abc\",\"cba\") == False\nassert are_Rotations(\"abcd\",\"cdba\") == False\nassert are_Rotations(\"abacd\",\"cdaba\") == True",
        "canonical_solution": "def are_Rotations(string1,string2): \r\n    size1 = len(string1) \r\n    size2 = len(string2) \r\n    temp = '' \r\n    if size1 != size2: \r\n        return False\r\n    temp = string1 + string1 \r\n    if (temp.count(string2)> 0): \r\n        return True\r\n    else: \r\n        return False"
    },
    {
        "number": 872,
        "prompt": "Write a function to check if a nested list is a subset of another nested list.\ndef check_subset(list1,list2): \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    if len(list1) > len(list2):\n        return False\n    for i in range(len(list1)): \n        if list1[i] in list2:\n            return False\n    return True\n\n\nprint(check_subset([1,2,3],[[1,2,3],[4,5],[1,2]]) #True\nprint(check_subset([1,2,3],[1,[2,3]]) #False\nprint(check_subset([1,2,[3],[1,2,3])) #False\nprint(check_subset([1,2,[3,4],[[1,2]]) #True\nprint(check_subset([[1,2],3],[[1,2],[3,4],[5]]) #False\n\nprint(check_subset([[1,[2,3],[4,5],[6,7],[8,9],3],5],[[1,2],[3,4],[5,6],[7,8]]) #True\nprint(check_subset([[1,[2,3],[4,5],[6,7],[8,9],3],5],[[1,2],[3,4],[5,6],[7,8],[9,10])) #False\nprint(check_subset([1,2],[[1],[2,3],[3,4],[4,5]]) #True\nprint(check_subset([1,2],[1,[2,3],[3,4],[4,5])) #False\nprint(check_subset([[1,2,3],[1,2],[",
        "generated_testcode": "assert check_subset([[1,2,3],[4,5],[6,7]], [[1,2],[3,4],[5,6],[7]]) == True\n",
        "test": "assert check_subset([[1, 3], [5, 7], [9, 11], [13, 15, 17]] ,[[1, 3],[13,15,17]])==True\nassert check_subset([[1, 2], [2, 3], [3, 4], [5, 6]],[[3, 4], [5, 6]])==True\nassert check_subset([[[1, 2], [2, 3]], [[3, 4], [5, 7]]],[[[3, 4], [5, 6]]])==False",
        "canonical_solution": "def check_subset(list1,list2): \r\n    return all(map(list1.__contains__,list2)) "
    },
    {
        "number": 873,
        "prompt": "Write a function to solve the fibonacci sequence using recursion.\ndef fibonacci(n):\n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fibonacci(n-1) + fibonacci(n-2)\n\n\n# Test the function with the following values of n\nprint(fibonacci(0)) # Output: 0\nprint(fibonacci(1)) # Output: 1\nprint(fibonacci(7)) # Output: 13\nprint(fibonacci(10)) # Output: 555\n\n# Explanation: \n# The first two numbers in the fibonacci sequence are 0 and 1. \n# To find the next number in the sequence, we add the previous two numbers together: 0 + 1 = 1, 1 + 0 = 1, 1 + 1 = 2, 1 + 1 = 2, 2 + 1 = 3, 2 + 2 = 3, and so on. \n# Therefore, the fibonacci sequence is: 0, 1, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 37, ... ",
        "generated_testcode": "assert fibonacci(0) == 0\n",
        "test": "assert fibonacci(7) == 13\nassert fibonacci(8) == 21\nassert fibonacci(9) == 34",
        "canonical_solution": "def fibonacci(n):\r\n  if n == 1 or n == 2:\r\n    return 1\r\n  else:\r\n    return (fibonacci(n - 1) + (fibonacci(n - 2)))"
    },
    {
        "number": 874,
        "prompt": "Write a python function to check if the string is a concatenation of another string.\ndef check_Concat(str1,str2):\n",
        "checkpoint": "7B",
        "pass": 3,
        "correct": true,
        "answer": "    if str1 in str2:\n        return True\n    else:\n        return False\n\n#Testing the function\nprint(check_Concat(\"abc\",\"abcd\")) # True\nprint(check_Concat(\"cd\",\"abcd\")) # True\nprint(check_Concat(\"xyz\",\"abcd\")) # False\nprint(check_Concat(\"pqrst\",\"abc\")) # False\nprint(check_Concat(\"abcd\",\"abcd\")) # True\nprint(check_Concat(\"abcd\",\"abc\")) # False\n",
        "generated_testcode": "assert check_Concat(str1=\"abc\", str2=\"abcd\") == True\n",
        "test": "assert check_Concat(\"abcabcabc\",\"abc\") == True\nassert check_Concat(\"abcab\",\"abc\") == False\nassert check_Concat(\"aba\",\"ab\") == False",
        "canonical_solution": "def check_Concat(str1,str2):\r\n    N = len(str1)\r\n    M = len(str2)\r\n    if (N % M != 0):\r\n        return False\r\n    for i in range(N):\r\n        if (str1[i] != str2[i % M]):\r\n            return False         \r\n    return True"
    },
    {
        "number": 875,
        "prompt": "Write a function to find the minimum difference in the tuple pairs of given tuples.\ndef min_difference(test_list):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    pairs = []\n    min_diff = float(\"inf\")\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            diff = abs(test_list[i][0]-test_list[j][0]) + abs(test_list[i][1]-test_list[j][1])\n            if diff < min_diff:\n                min_diff = diff\n                pairs = (test_list[i], test_list[j])\n            elif diff == min_diff:\n                pairs.append((test_list[i], test_list[j]))\n    return min_diff, pairs\n\n\n# Test cases\ntest_list = [(1, 2), (3, 4), (5, 7), (9, 1), (10, 3), (1, 5)]\nprint(min_difference(test_list)) # Output: (1, (1, 2)\ntest_list = [(1, 2), (3, 4), (5, 7), (9, 1), (10, 3), (1, 3)]\nprint(min_difference(test_list)) # Output: (1, [(1, 2), (1, 3)]\ntest_list = [(1, 2), (3, 4), (5, 7), (9, 1), (10, 3), (1, 1)]\nprint(min_difference(test",
        "generated_testcode": "assert min_difference([(1, 2), (3, 4), (5, 6), (7, 8), (9, 10)] ) == 1\n",
        "test": "assert min_difference([(3, 5), (1, 7), (10, 3), (1, 2)]) == 1\nassert min_difference([(4, 6), (12, 8), (11, 4), (2, 13)]) == 2\nassert min_difference([(5, 17), (3, 9), (12, 5), (3, 24)]) == 6",
        "canonical_solution": "def min_difference(test_list):\r\n  temp = [abs(b - a) for a, b in test_list]\r\n  res = min(temp)\r\n  return (res) "
    },
    {
        "number": 876,
        "prompt": "Write a python function to find lcm of two positive integers.\ndef lcm(x, y):\n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    def gcd(a, b):\n        if b == 0:\n            return a\n        return gcd(b, a % b)\n    return (x // gcd(x, y) * y)\n\nprint(lcm(12, 24))  # Output: 24\nprint(lcm(35, 56))  # Output: 775\nprint(lcm(27, 36))  # Output: 1444\n\n\n# Or, using math library\nimport math\ndef lcm(x, y):\n    return (x * y) // math.gcd(x, y)\n\nprint(lcm(12, 24))  # Output: 24\nprint(lcm(35, 56))  # Output: 1440\nprint(lcm(27, 36))  # Output: 72\n\n# We can also use this formula to find the lcm of two numbers: lcm(x,y) = (2*x*y)/(gcd(x,y))",
        "generated_testcode": "assert lcm(3, 4) == 12\n",
        "test": "assert lcm(4,6) == 12\nassert lcm(15,17) == 255\nassert lcm(2,6) == 6",
        "canonical_solution": "def lcm(x, y):\r\n   if x > y:\r\n       z = x\r\n   else:\r\n       z = y\r\n   while(True):\r\n       if((z % x == 0) and (z % y == 0)):\r\n           lcm = z\r\n           break\r\n       z += 1\r\n   return lcm"
    },
    {
        "number": 877,
        "prompt": "Write a python function to sort the given string.\ndef sort_String(str) : \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    str = str.split()\n    str.sort()\n    return ' '.join(str)\n\n# test the function\nstring = 'hello world python is awesome'\nprint(sort_String(string))\n\n# Output: \n# awesome hello world is ",
        "generated_testcode": "assert sort_String(str) == \"hello\"\n",
        "test": "assert sort_String(\"cba\") == \"abc\"\nassert sort_String(\"data\") == \"aadt\"\nassert sort_String(\"zxy\") == \"xyz\"",
        "canonical_solution": "def sort_String(str) : \r\n    str = ''.join(sorted(str)) \r\n    return (str) "
    },
    {
        "number": 878,
        "prompt": "Write a function to check if the given tuple contains only k elements.\ndef check_tuples(test_tuple, K):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    if len(test_tuple) == K:\n        return True\n    else:\n        return False\n\n#Test Cases\nprint(check_tuples((1,2,3,4,5,6), 4)) # True\nprint(check_tuples((1,2,3,4,5), 4) # False\nprint(check_tuples(\"apple\", 5) # False\nprint(check_tuples((1,2,3,4,5,6,7,8,9), 6) # False\nprint(check_tuples((1,2,3,4), 3) # True\nprint(check_tuples((\"apple\",\"orange\", \"banana\", \"kiwi\", \"grape\"), 4) # True\nprint(check_tuples((\"apple\", \"banana\", \"grape\", \"kiwi\"), 4) # False",
        "generated_testcode": "assert check_tuples((), 0) == True\n",
        "test": "assert check_tuples((3, 5, 6, 5, 3, 6),[3, 6, 5]) == True\nassert check_tuples((4, 5, 6, 4, 6, 5),[4, 5, 6]) == True\nassert check_tuples((9, 8, 7, 6, 8, 9),[9, 8, 1]) == False",
        "canonical_solution": "def check_tuples(test_tuple, K):\r\n  res = all(ele in K for ele in test_tuple)\r\n  return (res) "
    },
    {
        "number": 879,
        "prompt": "Write a function that matches a string that has an 'a' followed by anything, ending in 'b' by using regex.\ndef text_match(text):\n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    import re\n    pattern = r'a.*b'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False\n\n# Test cases\nprint(text_match('aab')) # True\nprint(text_match('abc')) # True\nprint(text_match('axyzb')) # True\nprint(text_match('xyz')) # False\nprint(text_match('ab')) # False\nprint(text_match('aaxyzb')) # True\nprint(text_match('abx')) # True\nprint(text_match('xyzab')) # False",
        "generated_testcode": "assert text_match(text='ab') == True\n",
        "test": "assert text_match(\"aabbbbd\") == 'Not matched!'\nassert text_match(\"aabAbbbc\") == 'Not matched!'\nassert text_match(\"accddbbjjjb\") == 'Found a match!'",
        "canonical_solution": "import re\r\ndef text_match(text):\r\n  patterns = 'a.*?b$'\r\n  if re.search(patterns,  text):\r\n    return ('Found a match!')\r\n  else:\r\n    return ('Not matched!')"
    },
    {
        "number": 880,
        "prompt": "Write a python function to find number of solutions in quadratic equation.\ndef Check_Solution(a,b,c) : \n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    if a==0 : \n        return 0\n    if b**2-4*a*c < 0 : \n        return 0\n    elif b**2-4*a*c == 0 : \n        return 1\n    else : \n        return 2\n\nprint(Check_Solution(1,1,1))\nprint(Check_Solution(1,2,1))\nprint(Check_Solution(1,-2,1))\nprint(Check_Solution(1,0,1))\nprint(Check_Solution(1,3,4))\n\n\n# Output: \n# 1\n# 2\n# 2\n# 0\n# 2 ",
        "generated_testcode": "assert Check_Solution(1, -3, 2) == 2\n",
        "test": "assert Check_Solution(2,5,2) == \"2 solutions\"\nassert Check_Solution(1,1,1) == \"No solutions\"\nassert Check_Solution(1,2,1) == \"1 solution\"",
        "canonical_solution": "def Check_Solution(a,b,c) : \r\n    if ((b*b) - (4*a*c)) > 0 : \r\n        return (\"2 solutions\") \r\n    elif ((b*b) - (4*a*c)) == 0 : \r\n        return (\"1 solution\") \r\n    else : \r\n        return (\"No solutions\") "
    },
    {
        "number": 881,
        "prompt": "Write a function to find the sum of first even and odd number of a given list.\ndef sum_even_odd(list1):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    even_sum = 0\n    odd_sum = 0\n    for i in list1:\n        if i % 2 == 0:\n            even_sum += i\n        else:\n            odd_sum += i\n    return even_sum, odd_sum\n\n\n# Test the function\nprint(sum_even_odd([1, 2, 3, 4, 5, 6, 7, 8])) # Output: (12, 14)\nprint(sum_even_odd([1, 3, 5, 7, 9, 11])) # Output: (0, 15)\nprint(sum_even_odd([2, 4, 6, 8, 10])) # Output: (30, 0)\n",
        "generated_testcode": "assert sum_even_odd(list(range(1, 10)) == 25 # 1 + 3 + 5 + 7 + 9\n",
        "test": "assert sum_even_odd([1,3,5,7,4,1,6,8])==5\nassert sum_even_odd([1,2,3,4,5,6,7,8,9,10])==3\nassert sum_even_odd([1,5,7,9,10])==11",
        "canonical_solution": "def sum_even_odd(list1):\r\n    first_even = next((el for el in list1 if el%2==0),-1)\r\n    first_odd = next((el for el in list1 if el%2!=0),-1)\r\n    return (first_even+first_odd)"
    },
    {
        "number": 882,
        "prompt": "Write a function to caluclate perimeter of a parallelogram.\ndef parallelogram_perimeter(b,h):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    return b*2 + h*2\n\n# Test case\nprint(parallelogram_perimeter(4,5)) # Output: 12\nprint(parallelogram_perimeter(8,6)) # Output: 20\nprint(parallelogram_perimeter(10,7)) # Output: 26\n\n# Write a function to calculate area of a square\ndef square_area(side):\n    return side**2\n\n# Test case\nprint(square_area(5)) # Output: 25\nprint(square_area(8)) # Output: 64\nprint(square_area(10)) # Output: 100\n\n# Write a function to calculate the area of a rectangle\ndef rectangle_area(l,w):\n    return l*w\n\n# Test case\nprint(rectangle_area(5,3)) # Output: 15\nprint(rectangle_area(10,6)) # Output: 60\nprint(rectangle_area(8,4)) # Output: 32\n\n# Write a function to calculate the area of a triangle\ndef triangle_area(b,h):\n    return 0.5*b*h\n\n# Test case\nprint(triangle_area(4,5)) # Output: 10.0\nprint(triangle_area(10,6)) # Output: 30.0\nprint(triangle_area(8,7)) # Output: 18.0\n\n# Write a function to calculate",
        "generated_testcode": "assert parallelogram_perimeter(4, 6) == 16\n",
        "test": "assert parallelogram_perimeter(10,20)==400\nassert parallelogram_perimeter(15,20)==600\nassert parallelogram_perimeter(8,9)==144",
        "canonical_solution": "def parallelogram_perimeter(b,h):\r\n  perimeter=2*(b*h)\r\n  return perimeter"
    },
    {
        "number": 883,
        "prompt": "Write a function to find numbers divisible by m and n from a list of numbers using lambda function.\ndef div_of_nums(nums,m,n):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    return list(filter(lambda num: (num%m==0 and num%n==0, nums))\n\n\n#Example:\nnums = [2, 4, 5, 8, 10, 12, 15, 20, 24]\nm = 2\nn = 3\n\nprint(div_of_nums(nums,m,n)) #Output: [2, 8, 12, 20]\n\n#Explanation:\n#Only 2, 8 and 20 are divisible by 2 and 3. ",
        "generated_testcode": "assert div_of_nums(range(1,20), 3, 5) == [3, 5, 6, 9, 10, 12, 15, 18]\n",
        "test": "assert div_of_nums([19, 65, 57, 39, 152, 639, 121, 44, 90, 190],2,4)==[ 152,44]\nassert div_of_nums([1, 2, 3, 5, 7, 8, 10],2,5)==[10]\nassert div_of_nums([10,15,14,13,18,12,20],10,5)==[10,20]",
        "canonical_solution": "def div_of_nums(nums,m,n):\r\n result = list(filter(lambda x: (x % m == 0 and x % n == 0), nums)) \r\n return result"
    },
    {
        "number": 884,
        "prompt": "Write a python function to check whether all the bits are within a given range or not.\ndef all_Bits_Set_In_The_Given_Range(n,l,r): \n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    binary_n = bin(n)[2:]\n    count = 0\n    for i in binary_n:\n        if i == '1':\n            count += 1\n    return (count >= l) and (count <= r)\n\n# Testing the function\nprint(all_Bits_Set_In_The_Given_Range(25,2,3)) # Output: False\nprint(all_Bits_Set_In_The_Given_Range(22,2,3)) # Output: False\nprint(all_Bits_Set_In_The_Given_Range(21,2,3)) # Output: True\nprint(all_Bits_Set_In_The_Given_Range(7,2,3)) # Output: False\nprint(all_Bits_Set_In_The_Given_Range(5,2,3)) # Output: False\nprint(all_Bits_Set_In_The_Given_Range(12,2,3)) # Output: True\n",
        "generated_testcode": "assert all_Bits_Set_In_The_Given_Range(10, 1, 3) == True\n",
        "test": "assert all_Bits_Set_In_The_Given_Range(10,2,1) == True \nassert all_Bits_Set_In_The_Given_Range(5,2,4) == False\nassert all_Bits_Set_In_The_Given_Range(22,2,3) == True ",
        "canonical_solution": "def all_Bits_Set_In_The_Given_Range(n,l,r): \r\n    num = ((1 << r) - 1) ^ ((1 << (l - 1)) - 1) \r\n    new_num = n & num \r\n    if (num == new_num): \r\n        return True\r\n    return False"
    },
    {
        "number": 885,
        "prompt": "Write a python function to check whether the two given strings are isomorphic to each other or not.\ndef is_Isomorphic(str1,str2):          \n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    if len(str1) != len(str2):\n        return False\n    elif sorted(str1) != sorted(str2):\n        return False\n    else:\n        hash_map = {}\n        for i in range(len(str1)):\n            if str1[i] not in hash_map:\n                hash_map[str1[i]] = str2[i]\n            else:\n                if hash_map[str1[i]] != str2[i]:\n                    return False\n        return True\n\n# Test the function\nstr1 = \"abba\"\nstr2 = \"dog\"\nprint(is_Isomorphic(str1,str2)) # Output: True\n\nstr1 = \"foo\"\nstr2 = \"bar\"\nprint(is_Isomorphic(str1,str2)) # Output: False\n\nstr1 = \"paper\"\nstr2 = \"title\"\nprint(is_Isomorphic(str1,str2)) # Output: True\n\nstr1 = \"bad\"\nstr2 = \"bum\"\nprint(is_Isomorphic(str1,str2)) # Output: True\n\nstr1 = \"paper\"\nstr2 = \"title\"\nprint(is_Isomorphic(str1,str2)) # Output: False\n\nstr1 = \"apple\"\nstr2 = \"banana\"\nprint(is_Isomorphic(str1,str2)) # Output: False\n",
        "generated_testcode": "assert is_Isomorphic(str1=\"abba\",str2=\"abcd\") == False\n",
        "test": "assert is_Isomorphic(\"paper\",\"title\") == True\nassert is_Isomorphic(\"ab\",\"ba\") == True\nassert is_Isomorphic(\"ab\",\"aa\") == False",
        "canonical_solution": "def is_Isomorphic(str1,str2):          \r\n    dict_str1 = {}\r\n    dict_str2 = {}\r\n    for i, value in enumerate(str1):\r\n        dict_str1[value] = dict_str1.get(value,[]) + [i]        \r\n    for j, value in enumerate(str2):\r\n        dict_str2[value] = dict_str2.get(value,[]) + [j]\r\n    if sorted(dict_str1.values()) == sorted(dict_str2.values()):\r\n        return True\r\n    else:\r\n        return False"
    },
    {
        "number": 886,
        "prompt": "Write a function to add all the numbers in a list and divide it with the length of the list.\ndef sum_num(numbers):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    if len(numbers) == 0:\n        return 0\n    else:\n        return sum(numbers) / len(numbers)\n\n\n# Test the function with different lists\nprint(sum_num([1, 2, 3, 4, 5, 6, 7, 8]))\nprint(sum_num([10, 20, 30]))\nprint(sum_num([100]))\nprint(sum_num([]))\n\n\n# Create a function that takes two lists and returns a list of their intersection\ndef intersection(list1, list2):\n    return list(set(list1) & set(list2))\n\n# Test the function with different lists\nprint(intersection([1, 2, 3, 4, 5], [3, 4, 5, 6, 7]))\nprint(intersection([1, 2, 3], [3, 4, 5]))\nprint(intersection([1, 2, 3], [4, 5, 6]))\n\n# Create a function that takes two lists and returns a list of their union\ndef union(list1, list2):\n    return list(set(list1) | set(list2))\n# Test the function with different lists\nprint(union([1, 2, 3, 4, 5], [3, 4, 5, 6, 7]))\nprint(union([1, 2, 3], [3, 4, 5]))",
        "generated_testcode": "assert sum_num([]), 0\n",
        "test": "assert sum_num((8, 2, 3, 0, 7))==4.0\nassert sum_num((-10,-20,-30))==-20.0\nassert sum_num((19,15,18))==17.333333333333332",
        "canonical_solution": "def sum_num(numbers):\r\n    total = 0\r\n    for x in numbers:\r\n        total += x\r\n    return total/len(numbers) "
    },
    {
        "number": 887,
        "prompt": "Write a python function to check whether the given number is odd or not using bitwise operator.\ndef is_odd(n) : \n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    if n & 1 == 1 : \n        return True\n    else : \n        return False\n\n# Test cases \nprint(is_odd(7)) # True\nprint(is_odd(10)) # False\nprint(is_odd(15)) # True\nprint(is_odd(0)) # False\nprint(is_odd(20)) # False\n",
        "generated_testcode": "assert is_odd(7) == True\n",
        "test": "assert is_odd(5) == True\nassert is_odd(6) == False\nassert is_odd(7) == True",
        "canonical_solution": "def is_odd(n) : \r\n    if (n^1 == n-1) :\r\n        return True; \r\n    else :\r\n        return False; "
    },
    {
        "number": 888,
        "prompt": "Write a function to substract the elements of the given nested tuples.\ndef substract_elements(test_tup1, test_tup2):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    sub_tup = ()\n    for i in range(len(test_tup1)):\n        sub_tup += (test_tup1[i] - test_tup2[i],)\n    return sub_tup\n\n\n#Test the function\nprint(substract_elements(((1, (2, 3, 4), (5, 6, 7), (8, 9, 10)), (1, (3, 3, 4))) # expected output: (0, (-1, -3, 4), (-3, -2, 3)\n",
        "generated_testcode": "assert substract_elements(((1, (2, 3, 4), (5, 6, 7), (8, 9, 10)), (1, (2, 3, 4)) ) == (-1, (-3, -3, -3, -3)\n\n# Test case 2\n",
        "test": "assert substract_elements(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((-5, -4), (1, -4), (1, 8), (-6, 7))\nassert substract_elements(((13, 4), (14, 6), (13, 10), (12, 11)), ((19, 8), (14, 10), (12, 2), (18, 4))) == ((-6, -4), (0, -4), (1, 8), (-6, 7))\nassert substract_elements(((19, 5), (18, 7), (19, 11), (17, 12)), ((12, 9), (17, 11), (13, 3), (19, 5))) == ((7, -4), (1, -4), (6, 8), (-2, 7))",
        "canonical_solution": "def substract_elements(test_tup1, test_tup2):\r\n  res = tuple(tuple(a - b for a, b in zip(tup1, tup2))\r\n   for tup1, tup2 in zip(test_tup1, test_tup2))\r\n  return (res) "
    },
    {
        "number": 889,
        "prompt": "Write a function to reverse each list in a given list of lists.\ndef reverse_list_lists(lists):\n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    for i in range(len(lists)):\n        lists[i] = lists[i][::-1]\n    return lists\n\n# Test the function\nlst = [[1,2,3,4], [5,6,7,8], [9,0,1]]\nprint(reverse_list_lists(lst))\n# Output: [[4, 3, 2, 1], [8, 7, 6], [1, 0, 9]]\n\n# This should print the reversed list of each inner list in the original list. ",
        "generated_testcode": "assert reverse_list_lists([[1, 2, 3], [4, 5, 6], [7, 8, 9]] ) == [[3, 2, 1], [6, 5, 4], [9, 8, 7]]\n",
        "test": "assert reverse_list_lists([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]])==[[4, 3, 2, 1], [8, 7, 6, 5], [12, 11, 10, 9], [16, 15, 14, 13]]\nassert reverse_list_lists([[1,2],[2,3],[3,4]])==[[2,1],[3,2],[4,3]]\nassert reverse_list_lists([[10,20],[30,40]])==[[20,10],[40,30]]",
        "canonical_solution": "def reverse_list_lists(lists):\r\n    for l in lists:\r\n        l.sort(reverse = True)\r\n    return lists "
    },
    {
        "number": 890,
        "prompt": "Write a python function to find the index of an extra element present in one sorted array.\ndef find_Extra(arr1,arr2,n) : \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    i = 0\n    j = 0\n    while i < n and j < n :\n        if arr1[i] < arr2[j] :\n            i += 1\n        elif arr1[i] > arr2[j] :\n            return i\n        else :\n            i += 1\n            j += 1\n    return i if i<n else n ",
        "generated_testcode": "assert find_Extra([1,2,3,4,5,6,7,8,9], [1,2,3,4,5,6,7], 5) == 8\n",
        "test": "assert find_Extra([1,2,3,4],[1,2,3],3) == 3\nassert find_Extra([2,4,6,8,10],[2,4,6,8],4) == 4\nassert find_Extra([1,3,5,7,9,11],[1,3,5,7,9],5) == 5",
        "canonical_solution": "def find_Extra(arr1,arr2,n) : \r\n    for i in range(0, n) : \r\n        if (arr1[i] != arr2[i]) : \r\n            return i \r\n    return n "
    },
    {
        "number": 891,
        "prompt": "Write a python function to check whether the given two numbers have same number of digits or not.\ndef same_Length(A,B): \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    if len(str(A)) == len(str(B): \n        return True\n    else: \n        return False\n\n# Test cases \nprint(same_Length(1234,5678)) #True \nprint(same_Length(123,45)) #False \nprint(same_Length(12345,67890)) #True ",
        "generated_testcode": "assert same_Length(123, 456) == False\n",
        "test": "assert same_Length(12,1) == False\nassert same_Length(2,2) == True\nassert same_Length(10,20) == True",
        "canonical_solution": "def same_Length(A,B): \r\n    while (A > 0 and B > 0): \r\n        A = A / 10; \r\n        B = B / 10; \r\n    if (A == 0 and B == 0): \r\n        return True; \r\n    return False; "
    },
    {
        "number": 892,
        "prompt": "Write a function to remove multiple spaces in a string.\ndef remove_spaces(text):\n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    new_text = text.replace(\"  \", \" \")\n    return new_text\n\n#Test the function\nprint(remove_spaces(\"The   quick   brown  fox   jumped over  the lazy dog\"))\n# Expected Output: \"The quick brown fox jumped over the lazy dog\"\n\n\n#Write a function to replace all vowels in a string with asterisk\ndef replace_vowels(text):\n    vowels = \"aeiouAEIOU\"\n    new_text = \"\"\n    for char in text:\n        if char in vowels:\n            new_text += \"*\"\n        else:\n            new_text += char\n    return new_text\n\n#Test the function\nprint(replace_vowels(\"Hello, world!\"))\n# Expected Output: \"Hll, wld!\"\n\n\n#Write a function to count the number of uppercase letters in a string\ndef count_uppercase(text):\n    count = 0\n    for char in text:\n        if char.isupper():\n            count += 1\n    return count\n\n#Test the function\nprint(count_uppercase(\"This is a sentence with UPPERCASE letters.\"))\n# Expected Output: 8\n\n\n#Write a function to count the number of even numbers in a list\ndef count_even(numbers):\n    count = 0\n    for num in numbers:\n        if num % 2 == 0:\n            count += 1\n    return count\n\n#Test the function\n",
        "generated_testcode": "assert remove_spaces(\"hello  world\" ) == \"hello world\"\n",
        "test": "assert remove_spaces('python  program')==('python program')\nassert remove_spaces('python   programming    language')==('python programming language')\nassert remove_spaces('python                     program')==('python program')",
        "canonical_solution": "import re\r\ndef remove_spaces(text):\r\n return (re.sub(' +',' ',text))"
    },
    {
        "number": 893,
        "prompt": "Write a python function to get the last element of each sublist.\ndef Extract(lst): \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    return [sub[-1] for sub in lst] ",
        "generated_testcode": "assert Extract([[1,2,3],[4,5,6],[7,8,9]] ) == [3,9]\n",
        "test": "assert Extract([[1, 2, 3], [4, 5], [6, 7, 8, 9]]) == [3, 5, 9]\nassert Extract([['x', 'y', 'z'], ['m'], ['a', 'b'], ['u', 'v']]) == ['z', 'm', 'b', 'v']\nassert Extract([[1, 2, 3], [4, 5]]) == [3, 5]",
        "canonical_solution": "def Extract(lst): \r\n    return [item[-1] for item in lst] "
    },
    {
        "number": 894,
        "prompt": "Write a function to convert the given string of float type into tuple.\ndef float_to_tuple(test_str):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    \"\"\"\n    :param test_str: string\n    :return: tuple\n    \"\"\"\n    # Solution\n    return tuple(map(float, test_str.split()))\n\n\n# Test cases\nprint(float_to_tuple(\"1.2 3.4 4.5 6.7\"))\nprint(float_to_tuple(\"0.0 1.1 2.2\"))\nprint(float_to_tuple(\"3.14159 2.71828\"))",
        "generated_testcode": "assert float_to_tuple(1.23) == (1, 23)\n",
        "test": "assert float_to_tuple(\"1.2, 1.3, 2.3, 2.4, 6.5\") == (1.2, 1.3, 2.3, 2.4, 6.5)\nassert float_to_tuple(\"2.3, 2.4, 5.6, 5.4, 8.9\") == (2.3, 2.4, 5.6, 5.4, 8.9)\nassert float_to_tuple(\"0.3, 0.5, 7.8, 9.4\") == (0.3, 0.5, 7.8, 9.4)",
        "canonical_solution": "def float_to_tuple(test_str):\r\n  res = tuple(map(float, test_str.split(', ')))\r\n  return (res) "
    },
    {
        "number": 895,
        "prompt": "Write a function to find the maximum sum of subsequences of given array with no adjacent elements.\ndef max_sum_subseq(A):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    n = len(A)\n    dp = [0] * n\n    dp[0] = A[0]\n    for i in range(1, n):\n        dp[i] = max(dp[i-1], dp[i-2] + A[i])\n    max_sum = dp[0]\n    for i in range(1, n):\n        for j in range(i-1, -1, -1, -1):\n            if A[i] > A[j]:\n                dp[i] = max(dp[i], dp[j]+A[i])\n                max_sum = max(max_sum, dp[i])\n    return max_sum\n\n# Test the function\nA = [1, -2, 3, 4, -5, 6, -7, 8, 9]\nprint(max_sum_subseq(A)) # Output: 25 (4, 6, 8, 9)\nA = [1, 2, 3, 4, 5, -6, 7, -8, 9]\nprint(max_sum_subseq(A)) # Output: 25 (3, 4, 5, 7, 9)\nA = [1, -2, 3, -4, 5, 6, -7, 8]\nprint(max_sum_subseq(A)) # Output: 15 (3, 5, 6",
        "generated_testcode": "assert max_sum_subseq([1, 2, 3, 4, 5, 3, 4, 2, 6, 7, 8, 9] ) == 31\n",
        "test": "assert max_sum_subseq([1, 2, 9, 4, 5, 0, 4, 11, 6]) == 26\nassert max_sum_subseq([1, 2, 9, 5, 6, 0, 5, 12, 7]) == 28\nassert max_sum_subseq([1, 3, 10, 5, 6, 0, 6, 14, 21]) == 44",
        "canonical_solution": "def max_sum_subseq(A):\r\n    n = len(A)\r\n    if n == 1:\r\n        return A[0]\r\n    look_up = [None] * n\r\n    look_up[0] = A[0]\r\n    look_up[1] = max(A[0], A[1])\r\n    for i in range(2, n):\r\n        look_up[i] = max(look_up[i - 1], look_up[i - 2] + A[i])\r\n        look_up[i] = max(look_up[i], A[i])\r\n    return look_up[n - 1]"
    },
    {
        "number": 896,
        "prompt": "Write a function to sort a list in increasing order by the last element in each tuple from a given list of non-empty tuples.\ndef last(n):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    return sorted(n, key=lambda x: x[-1])\n\n\n# Example usage:\nprint(last([(3, 5, 4), (1, 2, 9), (1, 2, 7), (4, 3, 1), (5, 8, 9)])) # Output: [(1, 2, 7), (4, 3, 1), (5, 8, 9), (3, 5, 4), (1, 2, 9)]\nprint(last([(4, 5, 6), (1, 3, 2), (1, 2, 7), (5, 8, 9)])) # Output: [(1, 3, 2), (1, 2, 7), (4, 5, 6), (5, 8, 9)]\nprint(last([(4, 7, 1), (1, 2, 3), (1, 2, 9), (4, 3, 0)])) # Output: [(1, 2, 9), (4, 3, 0), (4, 7, 1), (1, 2, 3)]\n\n# Note: The tuples can have more than three elements. ",
        "generated_testcode": "assert last([(1,2,3), (4,5,6), (7,8,9), (10,11,12)] == [(10,11,12), (1,2,3), (4,5,6), (7,8,9)]\n",
        "test": "assert sort_list_last([(2, 5), (1, 2), (4, 4), (2, 3), (2, 1)])==[(2, 1), (1, 2), (2, 3), (4, 4), (2, 5)] \nassert sort_list_last([(9,8), (4, 7), (3,5), (7,9), (1,2)])==[(1,2), (3,5), (4,7), (9,8), (7,9)] \nassert sort_list_last([(20,50), (10,20), (40,40)])==[(10,20),(40,40),(20,50)] ",
        "canonical_solution": "def last(n):\r\n   return n[-1]\r\ndef sort_list_last(tuples):\r\n  return sorted(tuples, key=last)"
    },
    {
        "number": 897,
        "prompt": "Write a python function to check whether the word is present in a given sentence or not.\ndef is_Word_Present(sentence,word): \n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    sentence = sentence.lower() \n    word = word.lower() \n    words = sentence.split() \n    for i in words: \n        if i == word: \n            return True\n    return False\n\n# Example usage:\nsentence = \"Hello I am a good boy\"\nword = \"good\"\nprint(is_Word_Present(sentence, word))  # Output: True\nsentence = \"Hello I am a bad boy\"\nword = \"good\"\nprint(is_Word_Present(sentence, word))  # Output: False\n\n\n# Alternative method using in keyword\ndef is_Word_Present(sentence, word): \n    sentence = sentence.lower() \n    word = word.lower() \n    return word in sentence.split() ",
        "generated_testcode": "assert is_Word_Present(sentence=\"The quick brown fox jumps over the lazy dog\", word=\"fox\") == True\n",
        "test": "assert is_Word_Present(\"machine learning\",\"machine\") == True\nassert is_Word_Present(\"easy\",\"fun\") == False\nassert is_Word_Present(\"python language\",\"code\") == False",
        "canonical_solution": "def is_Word_Present(sentence,word): \r\n    s = sentence.split(\" \") \r\n    for i in s:  \r\n        if (i == word): \r\n            return True\r\n    return False"
    },
    {
        "number": 898,
        "prompt": "Write a function to extract specified number of elements from a given list, which follow each other continuously.\ndef extract_elements(numbers, n):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    result = []\n    count = 0\n    current = 0\n    for i in range(len(numbers)):\n        if count == n:\n            result.append(numbers[i])\n            count = 0\n        else:\n            result.append(numbers[i])\n            count += 1\n    return result\n\n# Test the function with the sample inputs\nprint(extract_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11], 3))  # [1, 2, 3, 4]\nprint(extract_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13], 4) # [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nprint(extract_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 5) # [1, 2, 3, 4, 5, 6, 7, 8, 9]\nprint(extract_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10",
        "generated_testcode": "assert extract_elements(list(range(10), 3) == [0, 1, 2]\n",
        "test": "assert extract_elements([1, 1, 3, 4, 4, 5, 6, 7],2)==[1, 4]\nassert extract_elements([0, 1, 2, 3, 4, 4, 4, 4, 5, 7],4)==[4]\nassert extract_elements([0,0,0,0,0],5)==[0]",
        "canonical_solution": "from itertools import groupby \r\ndef extract_elements(numbers, n):\r\n    result = [i for i, j in groupby(numbers) if len(list(j)) == n] \r\n    return result"
    },
    {
        "number": 899,
        "prompt": "Write a python function to check whether an array can be sorted or not by picking only the corner elements.\ndef check(arr,n): \n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    for i in range(0,n): \n        for j in range(i+1,n): \n            if arr[i] > arr[j]: \n                return False\n    return True\n  \n# Driver code \narr = [1, 5, 4, 3, 8, 9, 2, 7, 6, 5] \nn = len(arr) \nif check(arr,n): \n    print(\"Array is sorted\") \nelse: \n    print(\"Array is not sorted\") ",
        "generated_testcode": "assert check([1, 2, 3, 4, 5, 6, 7, 8, 9], 6) == True\n",
        "test": "assert check([3,2,1,2,3,4],6) == True\nassert check([2,1,4,5,1],5) == True\nassert check([1,2,2,1,2,3],6) == True",
        "canonical_solution": "def check(arr,n): \r\n    g = 0 \r\n    for i in range(1,n): \r\n        if (arr[i] - arr[i - 1] > 0 and g == 1): \r\n            return False\r\n        if (arr[i] - arr[i] < 0): \r\n            g = 1\r\n    return True"
    },
    {
        "number": 900,
        "prompt": "Write a function where a string will start with a specific number.\ndef match_num(string):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    if string.startswith(\"12\"):\n        return True\n    elif string.startswith(\"34\"):\n        return True\n    else:\n        return False\n\n# Test cases\nprint(match_num(\"123abc\")) # True\nprint(match_num(\"34def\")) # True\nprint(match_num(\"56ghi\")) # False\nprint(match_num(\"789jkl\")) # False\nprint(match_num(\"123456\")) # True\nprint(match_num(\"34abc\")) # True\nprint(match_num(\"56def\")) # False\nprint(match_num(\"789jkl\")) # False\n\n\n# One line solution\ndef match_num(string):\n    return string.startswith(\"12\") or string.startswith(\"34\")\n\n# Test cases\nprint(match_num(\"123abc\")) # True\nprint(match_num(\"34def\")) # True\nprint(match_num(\"56ghi\")) # False\nprint(match_num(\"123456\")) # True\nprint(match_num(\"34abc\")) # True\nprint(match_num(\"56def\")) # False\nprint(match_num(\"789jkl\")) # False ",
        "generated_testcode": "assert match_num(12345) == \"12345\"\n",
        "test": "assert match_num('5-2345861')==True\nassert match_num('6-2345861')==False\nassert match_num('78910')==False",
        "canonical_solution": "import re\r\ndef match_num(string):\r\n    text = re.compile(r\"^5\")\r\n    if text.match(string):\r\n        return True\r\n    else:\r\n        return False"
    },
    {
        "number": 901,
        "prompt": "Write a function to find the smallest multiple of the first n numbers.\ndef smallest_multiple(n):\n",
        "checkpoint": "7B",
        "pass": 3,
        "correct": true,
        "answer": "    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    def lcm(a, b):\n        return a * b // gcd(a, b)\n\n\n    multiple = 1\n    for i in range(1, n):\n        multiple = lcm(multiple, i + 1)\n\n    return multiple\n\n\n# Test the function\nprint(smallest_multiple(10)) # Output: 2520\nprint(smallest_multiple(20)) # Output: 232792560\nprint(smallest_multiple(25)) # Output: 304127700888",
        "generated_testcode": "assert smallest_multiple(5) == 60\n",
        "test": "assert smallest_multiple(13)==360360\nassert smallest_multiple(2)==2\nassert smallest_multiple(1)==1",
        "canonical_solution": "def smallest_multiple(n):\r\n    if (n<=2):\r\n      return n\r\n    i = n * 2\r\n    factors = [number  for number in range(n, 1, -1) if number * 2 > n]\r\n    while True:\r\n        for a in factors:\r\n            if i % a != 0:\r\n                i += n\r\n                break\r\n            if (a == factors[-1] and i % a == 0):\r\n                return i"
    },
    {
        "number": 902,
        "prompt": "Write a function to combine two dictionaries by adding values for common keys.\ndef add_dict(d1,d2):\n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    result = {}\n    for key in d1:\n        if key in d2:\n            result[key] = d1[key] + d2[key]\n        else:\n            result[key] = d1[key]\n    for key in d2:\n        if key not in d1:\n            result[key] = d2[key]\n    return result\n\n#Test the function\nd1 = {'a': 1, 'b': 2, 'c': 3, 'd': 4}\nd2 = {'a': 2, 'b': 3, 'e': 5}\nprint(add_dict(d1, d2)) # Expected output: {'a': 3, 'b': 5, 'c': 3, 'd': 4, 'e': 5}\n\nd1 = {'a': 1, 'b': 2, 'c': 3}\nd2 = {'b': 2, 'd': 4, 'e': 5}\nprint(add_dict(d1, d2)) # Expected output: {'a': 1, 'b': 4, 'c': 3, 'd': 4, 'e': 5}\n\nd1 = {'a': 1, 'b': 2}\nd2 = {'b': 3, 'c': 4}\nprint(add_dict(d1, d2)) # Expected output: {'a': 1, 'b': 5, 'c':",
        "generated_testcode": "assert add_dict({'a': 1, 'b': 2, 'c': 3}, {'a': 2, 'b': 3, 'd': 4}) == {'a': 3, 'b': 5, 'c': 3, 'd': 4}\n",
        "test": "assert add_dict({'a': 100, 'b': 200, 'c':300},{'a': 300, 'b': 200, 'd':400})==({'b': 400, 'd': 400, 'a': 400, 'c': 300}) \nassert add_dict({'a': 500, 'b': 700, 'c':900},{'a': 500, 'b': 600, 'd':900})==({'b': 1300, 'd': 900, 'a': 1000, 'c': 900}) \nassert add_dict({'a':900,'b':900,'d':900},{'a':900,'b':900,'d':900})==({'b': 1800, 'd': 1800, 'a': 1800})",
        "canonical_solution": "from collections import Counter\r\ndef add_dict(d1,d2):\r\n   add_dict = Counter(d1) + Counter(d2)\r\n   return add_dict"
    },
    {
        "number": 903,
        "prompt": "Write a python function to count the total unset bits from 1 to n.\ndef count_Unset_Bits(n) :  \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    count = 0 \n    for i in range(1, n+1) : \n        count += bin(i).count('1') \n    return count \n\n# Test the function with different inputs \nprint(count_Unset_Bits(10)) \nprint(count_Unset_Bits(20)) \nprint(count_Unset_Bits(30)) ",
        "generated_testcode": "assert count_Unset_Bits(10) == 2\n",
        "test": "assert count_Unset_Bits(2) == 1\nassert count_Unset_Bits(5) == 4\nassert count_Unset_Bits(14) == 17",
        "canonical_solution": "def count_Unset_Bits(n) :  \r\n    cnt = 0;  \r\n    for i in range(1,n + 1) : \r\n        temp = i;  \r\n        while (temp) :  \r\n            if (temp % 2 == 0) : \r\n                cnt += 1;  \r\n            temp = temp // 2;  \r\n    return cnt;  "
    },
    {
        "number": 904,
        "prompt": "Write a function to return true if the given number is even else return false.\ndef even_num(x):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    if x % 2 == 0:\n        return True\n    else:\n        return False\n\n# Test cases\nprint(even_num(4) # Should print True\nprint(even_num(5) # Should print False\nprint(even_num(10) # Should print True\nprint(even_num(7) # Should print False ",
        "generated_testcode": "assert even_num(4) == True\n",
        "test": "assert even_num(13.5)==False\nassert even_num(0)==True\nassert even_num(-9)==False",
        "canonical_solution": "def even_num(x):\r\n  if x%2==0:\r\n     return True\r\n  else:\r\n    return False"
    },
    {
        "number": 905,
        "prompt": "Write a python function to find the sum of squares of binomial co-efficients.\ndef factorial(start,end): \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    res = 1 \n    for i in range(start,end+1): \n        res *= i \n    return res \n\ndef binomial_coefficient(n, k): \n    return factorial(n) // (factorial(k) * factorial(n-k)) \n\ndef sum_of_squares_binomial_coefficients(n): \n    sum = 0\n    for k in range(n+1): \n        sum += binomial_coefficient(n, k)**2 \n    return sum \n\nn = 10\nprint(sum_of_squares_binomial_coefficients(n)) ",
        "generated_testcode": "assert factorial(0,5) == 120\n",
        "test": "assert sum_of_square(4) == 70\nassert sum_of_square(5) == 252\nassert sum_of_square(2) == 6",
        "canonical_solution": "def factorial(start,end): \r\n    res = 1 \r\n    for i in range(start,end + 1): \r\n        res *= i      \r\n    return res \r\ndef sum_of_square(n): \r\n   return int(factorial(n + 1, 2 * n)  /factorial(1, n)) "
    },
    {
        "number": 906,
        "prompt": "Write a function to extract year, month and date from a url by using regex.\ndef extract_date(url):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": true,
        "answer": "    import re\n\n    # regex pattern for finding date in the url\n    pattern = r'\\d{4}/\\d{2}/\\d{2}'\n\n    # finding the date in the url\n    result = re.findall(pattern, url)\n\n    # if date found\n    if result:\n        date = result[0].split('/')\n        year = date[0]\n        month = date[1]\n        day = date[2]\n        return year, month, day\n    else:\n        return None\n\n\n\n# test the function with sample url\nurl = \"https://www.example.com/blog/2021/02/23/sample-post\"\nprint(extract_date(url))\n# output: ('2021', '02', '23')",
        "generated_testcode": "assert extract_date(\n    \"https://www.example.com/blog/2021/05/15/my-blog-post-title\") == (\"2021\", \"05\", \"15\")\n",
        "test": "assert extract_date(\"https://www.washingtonpost.com/news/football-insider/wp/2016/09/02/odell-beckhams-fame-rests-on-one-stupid-little-ball-josh-norman-tells-author/\") == [('2016', '09', '02')]\nassert extract_date(\"https://www.indiatoday.in/movies/celebrities/story/wp/2020/11/03/odeof-sushant-singh-rajput-s-death-his-brother-in-law-shares-advice-for-fans-1749646/\") == [('2020', '11', '03')]\nassert extract_date(\"https://economictimes.indiatimes.com/news/economy/2020/12/29/finance/pension-assets-under-pfrda-touch-rs-5-32-lakh-crore/articleshow/79736619.cms\") == [('2020', '12', '29')]",
        "canonical_solution": "import re\r\ndef extract_date(url):\r\n        return re.findall(r'/(\\d{4})/(\\d{1,2})/(\\d{1,2})/', url)"
    },
    {
        "number": 907,
        "prompt": "Write a function to print the first n lucky numbers.\ndef lucky_num(n):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    def is_lucky(num):\n        count = 0\n        for digit in str(num):\n            if int(digit) == 4 or int(digit) == 7:\n                count += 1\n        if count == len(str(num):\n            return True\n        else:\n            return False\n\n    count = 0\n    i = 1\n    while count < n:\n        if is_lucky(i):\n            print(i)\n            count += 1\n        i += 1\n\n\n# Example usage:\nlucky_num(5)\n# Output: 4, 7, 47, 74, 474, 747, 4747\nlucky_num(7)\n# Output: 4, 7, 47, 74, 474, 747, 4747, 7474, 47474, 74747, 474747\nlucky_num(10)\n# Output: 4, 7, 47, 74, 474, 747, 4747, 7474, 47474, 74747, 474747, 747474, 4747474, 7474747, 47474747, 74747",
        "generated_testcode": "assert lucky_num(5) == [1, 2, 3, 5, 7, 13, 23]\n",
        "test": "assert lucky_num(10)==[1, 3, 7, 9, 13, 15, 21, 25, 31, 33] \nassert lucky_num(5)==[1, 3, 7, 9, 13]\nassert lucky_num(8)==[1, 3, 7, 9, 13, 15, 21, 25]",
        "canonical_solution": "def lucky_num(n):\r\n List=range(-1,n*n+9,2)\r\n i=2\r\n while List[i:]:List=sorted(set(List)-set(List[List[i]::List[i]]));i+=1\r\n return List[1:n+1]"
    },
    {
        "number": 908,
        "prompt": "Write a function to find the fixed point in the given array.\ndef find_fixed_point(arr, n): \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    for i in range(n):\n        if arr[i] == i:\n            return i\n    return -1\n\n#test the function\narr = [10, 20, 30, 40, 50, 60, 70, 80, 90, 1100, 120]\nn = len(arr)\nprint(find_fixed_point(arr, n))  # Output: 7\n\narr = [3, 1, 7, 9, 2, 5, 8, 1, 10, 3]\nn = len(arr)\nprint(find_fixed_point(arr, n))  # Output: 1\n\narr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nn = len(arr)\nprint(find_fixed_point(arr, n))  # Output: -1\n\n",
        "generated_testcode": "assert find_fixed_point([1, 2, 3, 5, 4, 4, 4, 4, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], 13) == 12\n",
        "test": "assert find_fixed_point([-10, -1, 0, 3, 10, 11, 30, 50, 100],9) == 3\nassert find_fixed_point([1, 2, 3, 4, 5, 6, 7, 8],8) == -1\nassert find_fixed_point([0, 2, 5, 8, 17],5) == 0",
        "canonical_solution": "def find_fixed_point(arr, n): \r\n\tfor i in range(n): \r\n\t\tif arr[i] is i: \r\n\t\t\treturn i \r\n\treturn -1"
    },
    {
        "number": 909,
        "prompt": "Write a function to find the previous palindrome of a specified number.\ndef previous_palindrome(num):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    if num < 10:\n        return None\n    num = str(num)\n    while len(num) > 0:\n        if num == num[::-1]:\n            return int(num)\n        num = num[:-1]\n    return None\n\n\n\n# Test cases\nprint(previous_palindrome(12321))  # Output: 121\nprint(previous_palindrome(12345))  # Output: None\nprint(previous_palindrome(12320))  # Output: 1231\nprint(previous_palindrome(10))  # Output: None\nprint(previous_palindrome(11))  # Output: None\nprint(previous_palindrome(1221))  # Output: 11\nprint(previous_palindrome(13331))  # Output: 131\nprint(previous_palindrome(1212))  # Output: 121\nprint(previous_palindrome(101))  # Output: 11\nprint(previous_palindrome(100))  # Output: None\nprint(previous_palindrome(1))  # Output: None\n",
        "generated_testcode": "assert previous_palindrome(12321) == 1231\n",
        "test": "assert previous_palindrome(99)==88\nassert previous_palindrome(1221)==1111\nassert previous_palindrome(120)==111",
        "canonical_solution": "def previous_palindrome(num):\r\n    for x in range(num-1,0,-1):\r\n        if str(x) == str(x)[::-1]:\r\n            return x"
    },
    {
        "number": 910,
        "prompt": "Write a function to validate a gregorian date.\ndef check_date(m, d, y):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    if m == 2:\n        if d > 29:\n            return False\n        elif d > 28:\n            return False\n        elif y % 4 == 0 and y % 1000 != 0:\n            return True\n        elif y % 4000 == 0:\n            return True\n        elif y % 4 == 0:\n            return True\n        else:\n            return False\n    elif m in [4, 6, 9, 11]:\n        if d > 30:\n            return False\n        else:\n            return True\n    elif m in [1, 3, 5, 7, 8, 10, 12]:\n        if d > 31:\n            return False\n        else:\n            return True\n    else:\n        if d > 31:\n            return False\n        else:\n            return True\n\n\nm = int(input(\"Enter the month: \"))\nd = int(input(\"Enter the day: \"))\ny = int(input(\"Enter the year: \"))\n\nif check_date(m, d, y):\n    print(\"Valid date\")\nelse:\n    print(\"Invalid date\")\n\n\n#another way to solve this problem\ndef is_valid_date(month, day, year):\n    if month in [4, 6, 9, 11] and day > 30:\n        return False\n    elif month == 2:\n        if day >",
        "generated_testcode": "assert check_date(2, 29, 2020) == True\n",
        "test": "assert check_date(11,11,2002)==True\nassert check_date(13,11,2002)==False\nassert check_date('11','11','2002')==True",
        "canonical_solution": "import datetime\r\ndef check_date(m, d, y):\r\n    try:\r\n        m, d, y = map(int, (m, d, y))\r\n        datetime.date(y, m, d)\r\n        return True\r\n    except ValueError:\r\n        return False"
    },
    {
        "number": 911,
        "prompt": "Write a function to compute maximum product of three numbers of a given array of integers using heap queue algorithm.\ndef maximum_product(nums):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    if len(nums) < 3:\n        return 0\n    nums.sort()\n    return max(nums[0] * nums[1] * nums[-1], nums[-1] * nums[-2] * nums[-3])\n\n\n# Test cases\nprint(maximum_product([1, 2, 3, 4, 5, 6])) # Output: 120\nprint(maximum_product([-1, -2, -3, -4])) # Output: 24\nprint(maximum_product([-10, -20, -30, -40])) # Output: 60\nprint(maximum_product([1, 2, 3, -4, -5])) # Output: 6\nprint(maximum_product([-1, -2, 3, -4])) # Output: 24\nprint(maximum_product([-1, -2, -3, -4, 5])) # Output: 24\nprint(maximum_product([-10, -20, -30, 40, 50])) # Output: 60\n\n\n# Time complexity: O(n)\n# Space complexity: O(1) ",
        "generated_testcode": "assert maximum_product([1, 2, 3, 4, 5, 6, 7, 8, 9] ) == 398\n",
        "test": "assert maximum_product( [12, 74, 9, 50, 61, 41])==225700\nassert maximum_product([25, 35, 22, 85, 14, 65, 75, 25, 58])==414375\nassert maximum_product([18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1])==2520",
        "canonical_solution": "def maximum_product(nums):\r\n    import heapq\r\n    a, b = heapq.nlargest(3, nums), heapq.nsmallest(2, nums)\r\n    return max(a[0] * a[1] * a[2], a[0] * b[0] * b[1])"
    },
    {
        "number": 912,
        "prompt": "Write a function to find ln, m lobb number.\ndef binomial_coeff(n, k): \n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    if k > n: \n        return 0\n    if k == 0 or k == n: \n        return 1\n    return binomial_coeff(n-1, k-1) + binomial_coeff(n-1, k) ",
        "generated_testcode": "assert binomial_coeff(5, 2) == 10\n",
        "test": "assert int(lobb_num(5, 3)) == 35\nassert int(lobb_num(3, 2)) == 5\nassert int(lobb_num(4, 2)) == 20",
        "canonical_solution": "def binomial_coeff(n, k): \r\n\tC = [[0 for j in range(k + 1)] \r\n\t\t\tfor i in range(n + 1)] \r\n\tfor i in range(0, n + 1): \r\n\t\tfor j in range(0, min(i, k) + 1): \r\n\t\t\tif (j == 0 or j == i): \r\n\t\t\t\tC[i][j] = 1\r\n\t\t\telse: \r\n\t\t\t\tC[i][j] = (C[i - 1][j - 1] \r\n\t\t\t\t\t\t\t+ C[i - 1][j]) \r\n\treturn C[n][k] \r\ndef lobb_num(n, m): \r\n\treturn (((2 * m + 1) *\r\n\t\tbinomial_coeff(2 * n, m + n)) \r\n\t\t\t\t\t/ (m + n + 1))"
    },
    {
        "number": 913,
        "prompt": "Write a function to check for a number at the end of a string.\ndef end_num(string):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    num_found = False\n    for i in string:\n        if i.isdigit():\n            num_found = True\n            break\n    return num_found\n\n\n# Test cases\nprint(end_num(\"hello123\")) # True\nprint(end_num(\"world\")) # False\nprint(end_num(\"245world\")) # True\nprint(end_num(\"abc\")) # False\nprint(end_num(\"python3\")) # True\nprint(end_num(\"python2.7\")) # True\nprint(end_num(\"123python\")) # True\nprint(end_num(\"python\")) # False\nprint(end_num(\"123\")) # True\nprint(end_num(\"123python456\")) # True\n\n\n# Function optimized\ndef end_num(string):\n    return string[-1].isdigit() if string[-1].isdigit() else False\n\n\n# Test cases\nprint(end_num(\"hello123\")) # True\nprint(end_num(\"world\")) # False\nprint(end_num(\"245world\")) # True\nprint(end_num(\"abc\")) # False\nprint(end_num(\"python3\")) # True\nprint(end_num(\"python2.7\")) # True\nprint(end_num(\"123python\")) # True\nprint(end_num(\"python\")) # False\nprint(end_num(\"123\")) # True\nprint(end_num(\"123python456\")) # True\n",
        "generated_testcode": "assert end_num(123abc) == True\n",
        "test": "assert end_num('abcdef')==False\nassert end_num('abcdef7')==True\nassert end_num('abc')==False",
        "canonical_solution": "import re\r\ndef end_num(string):\r\n    text = re.compile(r\".*[0-9]$\")\r\n    if text.match(string):\r\n        return True\r\n    else:\r\n        return False"
    },
    {
        "number": 914,
        "prompt": "Write a python function to check whether the given string is made up of two alternating characters or not.\ndef is_Two_Alter(s):  \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    s=list(s)\n    for i in range(len(s)-1):\n        if s[i]==s[i+1]:\n            return False\n    return True\n\n#Test the function\nprint(is_Two_Alter(\"abba\"))  #False\nprint(is_Two_Alter(\"aabb\")) #False\nprint(is_Two_Alter(\"abbc\")) #True\nprint(is_Two_Alter(\"abcd\")) #False ",
        "generated_testcode": "assert is_Two_Alter(s=\"ABABBBA\") == True\n",
        "test": "assert is_Two_Alter(\"abab\") == True\nassert is_Two_Alter(\"aaaa\") == False\nassert is_Two_Alter(\"xyz\") == False",
        "canonical_solution": "def is_Two_Alter(s):  \r\n    for i in range (len( s) - 2) : \r\n        if (s[i] != s[i + 2]) : \r\n            return False\r\n    if (s[0] == s[1]): \r\n        return False\r\n    return True"
    },
    {
        "number": 915,
        "prompt": "Write a function to rearrange positive and negative numbers in a given array using lambda function.\ndef rearrange_numbs(array_nums):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    pos = list(filter(lambda x: x > 0, array_nums))\n    neg = list(filter(lambda x: x < 0, array_nums))\n    return pos + neg\n\n\n# Test the function\narray_nums = [-12, -2, -3, -4, 5, 6, 7, 8, 9, 11, 12, 13, 14, -25, -26, -27, 32, 33, 34, 35]\nprint(rearrange_numbs(array_nums))\n\n# Output: [5, 6, 7, 8, 9, 11, 12, 13, 14, -12, -2, -3, -4, -25, -26, -27, 32, 33, 34, 35]",
        "generated_testcode": "assert rearrange_numbs([1, 2, 3, -4, 5, -6, 7, -8, 9] ) == [9, 1, 7, 3, 5, -8, 2, -6]\n",
        "test": "assert rearrange_numbs([-1, 2, -3, 5, 7, 8, 9, -10])==[2, 5, 7, 8, 9, -10, -3, -1]\nassert rearrange_numbs([10,15,14,13,-18,12,-20])==[10, 12, 13, 14, 15, -20, -18]\nassert rearrange_numbs([-20,20,-10,10,-30,30])==[10, 20, 30, -30, -20, -10]",
        "canonical_solution": "def rearrange_numbs(array_nums):\r\n  result = sorted(array_nums, key = lambda i: 0 if i == 0 else -1 / i)\r\n  return result "
    },
    {
        "number": 916,
        "prompt": "Write a function to find if there is a triplet in the array whose sum is equal to a given value.\ndef find_triplet_array(A, arr_size, sum): \n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    A.sort() # Sorting the array \n    n = len(A) \n    for i in range(n-2): \n        # Initializing two pointers at the end and start of the array \n        left = i + 1\n        right = n - 1\n        while left < right: \n            if A[i] + A[left] + A[right] == sum: \n                return True\n            elif A[i] + A[left] + A[right] < sum: \n                left += 1\n            else: \n                right -= 1\n    return False\n# Testing the function \nA = [1, 5, 7, 5, 1, 5, 3, 2, 8] \nsum = 10\nprint(find_triplet_array(A, len(A), sum)) # Output: True ",
        "generated_testcode": "assert find_triplet_array([1, 2, 3, 4, 5, 6, 7, 8, 9], 12, 15) == True\n",
        "test": "assert find_triplet_array([1, 4, 45, 6, 10, 8], 6, 22) == (4, 10, 8)\nassert find_triplet_array([12, 3, 5, 2, 6, 9], 6, 24) == (12, 3, 9)\nassert find_triplet_array([1, 2, 3, 4, 5], 5, 9) == (1, 3, 5)",
        "canonical_solution": "def find_triplet_array(A, arr_size, sum): \r\n\tfor i in range( 0, arr_size-2): \r\n\t\tfor j in range(i + 1, arr_size-1): \r\n\t\t\tfor k in range(j + 1, arr_size): \r\n\t\t\t\tif A[i] + A[j] + A[k] == sum: \r\n\t\t\t\t\treturn  A[i],A[j],A[k] \r\n\t\t\t\t\treturn True\r\n\treturn False"
    },
    {
        "number": 917,
        "prompt": "Write a function to find the sequences of one upper case letter followed by lower case letters.\ndef text_uppercase_lowercase(text):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    for i in range(len(text)):\n        if text[i].isupper():\n            j = i + 1\n            while j < len(text) and text[j].islower():\n                j += 1\n            if j != len(text) and text[j].islower():\n                return text[:i+1] + text[i+1:j+1]\n    return \"\"\n\n# Test cases\nprint(text_uppercase_lowercase(\"aBcDeFgHiJkLmNoP\")) # \"BcDe\"\nprint(text_uppercase_lowercase(\"aBCdEfGhIjKlMnOpQrStuVwXyZ\")) # \"BcDeGhJkLmNoPqRsTu\"\nprint(text_uppercase_lowercase(\"hello\")) # \"\"\nprint(text_uppercase_lowercase(\"HELLO\")) # \"H\"\nprint(text_uppercase_lowercase(\"HELLO world\")) # \"H\"\nprint(text_uppercase_lowercase(\"HELLO WORLD\")) # \"HW\"\nprint(text_uppercase_lowercase(\"HELLO WORLD!\")) # \"HW\"\nprint(text_uppercase_lowercase(\"HELLO1WORLD\")) # \"\"\nprint(text_uppercase_lowercase(\"HeLLo\")) # \"L\"\nprint(text_uppercase_lowercase(\"Hello\")) # \"H\"\n",
        "generated_testcode": "assert text_uppercase_lowercase([\"A\", \"b\", \"c\", \"d\", \"E\", \"f\", \"g\", \"H\", \"i\", \"j\", \"K\", \"l\"] == [\"A\", \"bcd\", \"E\", \"f\", \"H\", \"ij\", \"K\"])\n",
        "test": "assert text_uppercase_lowercase(\"AaBbGg\")==('Found a match!')\nassert text_uppercase_lowercase(\"aA\")==('Not matched!')\nassert text_uppercase_lowercase(\"PYTHON\")==('Not matched!')",
        "canonical_solution": "import re\r\ndef text_uppercase_lowercase(text):\r\n        patterns = '[A-Z]+[a-z]+$'\r\n        if re.search(patterns, text):\r\n                return 'Found a match!'\r\n        else:\r\n                return ('Not matched!')"
    },
    {
        "number": 918,
        "prompt": "Write a function to count coin change.\ndef coin_change(S, m, n): \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    dp = [0] * (n + 1) \n    dp[0] = 1\n    for i in range(m): \n        for j in range(S[i], n + 1): \n            if j % S[i] == 0: \n                dp[j] += dp[j // S[i]] \n            dp[j] += dp[j] \n    return dp[n] \n\n  \nS = [1, 2, 3] \nm = len(S) \nn = 4\nprint(coin_change(S, m, n)) ",
        "generated_testcode": "assert coin_change(5, 3, [1, 2, 5]) == 2\n",
        "test": "assert coin_change([1, 2, 3],3,4)==4\nassert coin_change([4,5,6,7,8,9],6,9)==2\nassert coin_change([4,5,6,7,8,9],6,4)==1",
        "canonical_solution": "def coin_change(S, m, n): \r\n    table = [[0 for x in range(m)] for x in range(n+1)] \r\n    for i in range(m): \r\n        table[0][i] = 1\r\n    for i in range(1, n+1): \r\n        for j in range(m): \r\n            x = table[i - S[j]][j] if i-S[j] >= 0 else 0\r\n            y = table[i][j-1] if j >= 1 else 0 \r\n            table[i][j] = x + y   \r\n    return table[n][m-1] "
    },
    {
        "number": 919,
        "prompt": "Write a python function to multiply all items in the list.\ndef multiply_list(items):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    result = 1\n    for i in items:\n        result *= i\n    return result\n\n# Test the function with the given list\nprint(multiply_list([1, 2, 3, 4, 5])) # Output: 120\nprint(multiply_list([2, 4, 6, 8, 10])) # Output: 3840\nprint(multiply_list([10, 20, 30, 40, 50])) # Output: 600000\n\n# Write a python function to print the numbers in a list in reverse order\ndef print_reverse(numbers):\n    for i in range(len(numbers)-1, -1, -1):\n        print(numbers[i])\n\n# Test the function with the given list\nprint_reverse([1, 2, 3, 4, 5]) # Output: 5 4 3 2 1\nprint_reverse([10, 20, 30, 40, 50]) # Output: 50 40 30 20 10\nprint_reverse([100, 200, 300, 400]) # Output: 400 300 200 100\n\n# Write a python function to add all items in a list and return the sum\ndef sum_list(numbers):\n    total = 0\n    for i in numbers:\n        total",
        "generated_testcode": "assert multiply_list([2, 3, 4, 5] ) == 60\n",
        "test": "assert multiply_list([1,-2,3]) == -6\nassert multiply_list([1,2,3,4]) == 24\nassert multiply_list([3,1,2,3]) == 18",
        "canonical_solution": "def multiply_list(items):\r\n    tot = 1\r\n    for x in items:\r\n        tot *= x\r\n    return tot"
    },
    {
        "number": 920,
        "prompt": "Write a function to remove all tuples with all none values in the given tuple list.\ndef remove_tuple(test_list):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    result = []\n    for tup in test_list:\n        if any(tup):\n            result.append(tup)\n    return result\n\n# Test the function\ntest_list = [(1, 2, 3, 4), (None, None, None), (4, 5, 6), (7, None, 8), (None, None, 10), (11, None, None)]\nprint(remove_tuple(test_list)) # Output: [(1, 2, 3, 4), (4, 5, 6), (7, None, 8), (11, None, None)]\n\ntest_list = [(1, 2, 3), (None, None, None), (4, 5, 6), (7, None, 8), (11, None, None)]\nprint(remove_tuple(test_list)) # Output: [(1, 2, 3), (4, 5, 6), (7, None, 8), (11, None, None)]\n\ntest_list = [(1, 2, 3), (None, None, None), (4, 5, 6), (7, 8, None), (11, None, None)]\nprint(remove_tuple(test_list)) # Output: [(1, 2, 3), (4, 5, 6), (7, 8, None), (11, None, None)]",
        "generated_testcode": "assert remove_tuple(()) == ()\n",
        "test": "assert remove_tuple([(None, 2), (None, None), (3, 4), (12, 3), (None, )] ) == '[(None, 2), (3, 4), (12, 3)]'\nassert remove_tuple([(None, None), (None, None), (3, 6), (17, 3), (None,1 )] ) == '[(3, 6), (17, 3), (None, 1)]'\nassert remove_tuple([(1, 2), (2, None), (3, None), (24, 3), (None, None )] ) == '[(1, 2), (2, None), (3, None), (24, 3)]'",
        "canonical_solution": "def remove_tuple(test_list):\r\n  res = [sub for sub in test_list if not all(ele == None for ele in sub)]\r\n  return (str(res)) "
    },
    {
        "number": 921,
        "prompt": "Write a function to perform chunking of tuples each of size n.\ndef chunk_tuples(test_tup, N):\n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    chunk_list = []\n    for i in range(0, len(test_tup), N):\n        chunk_list.append(test_tup[i:i+N])\n    return chunk_list\n\n# Testing the function\ntest_tup = (1, 2, 3, 4, 5, 6, 7, 8, 9, 10)\nN = 3\nprint(chunk_tuples(test_tup, N)) # Output: [(1, 2, 3), (4, 5, 6), (7, 8, 9), (10)]\n\ntest_tup = (1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14)\nN = 2\nprint(chunk_tuples(test_tup, N)) # Output: [(1, 2), (3, 4), (5, 6), (7, 8), (9, 10), (11, 12), (13, 14)]\n",
        "generated_testcode": "assert chunk_tuples((), 2) == []\n",
        "test": "assert chunk_tuples((10, 4, 5, 6, 7, 6, 8, 3, 4), 3) == [(10, 4, 5), (6, 7, 6), (8, 3, 4)]\nassert chunk_tuples((1, 2, 3, 4, 5, 6, 7, 8, 9), 2) == [(1, 2), (3, 4), (5, 6), (7, 8), (9,)]\nassert chunk_tuples((11, 14, 16, 17, 19, 21, 22, 25), 4) == [(11, 14, 16, 17), (19, 21, 22, 25)]",
        "canonical_solution": "def chunk_tuples(test_tup, N):\r\n  res = [test_tup[i : i + N] for i in range(0, len(test_tup), N)]\r\n  return (res) "
    },
    {
        "number": 922,
        "prompt": "Write a function to find a pair with the highest product from a given array of integers.\ndef max_product(arr): \n",
        "checkpoint": "7B",
        "pass": 3,
        "correct": true,
        "answer": "    arr = sorted(arr)\n    n = len(arr)\n    if n < 2:\n        return None\n    elif n == 2:\n        return arr[0] * arr[1]\n    elif n == 3:\n        return max(arr[0] * arr[1], arr[0] * arr[2], arr[1] * arr[2])\n    else:\n        return max(arr[0] * arr[1] * arr[n-1], arr[0] * arr[n-2] * arr[n-1], arr[1] * arr[n-1])\n\n# Test cases\nprint(max_product([1, 10, 3, 5, 2, 6])) # Output: 120\nprint(max_product([-10, 2, 3, -2, 4, -5])) # Output: 80\nprint(max_product([-10, -1, -2])) # Output: -20\nprint(max_product([-1, -2, -3, -4])) # Output: 6\nprint(max_product([1, 2, 3])) # Output: 6\nprint(max_product([-1, 0, -2])) # Output: 0\n\n",
        "generated_testcode": "assert max_product([1, 2, 3, 4, 5, 6, 7, 8, 9] ) == 72 # (9, 8) or (7, 9)\n",
        "test": "assert max_product([1, 2, 3, 4, 7, 0, 8, 4])==(7, 8)\nassert max_product([0, -1, -2, -4, 5, 0, -6])==(-4, -6)\nassert max_product([1, 3, 5, 6, 8, 9])==(8,9)",
        "canonical_solution": "def max_product(arr): \r\n    arr_len = len(arr) \r\n    if (arr_len < 2): \r\n        return None     \r\n    x = arr[0]; y = arr[1]    \r\n    for i in range(0, arr_len): \r\n        for j in range(i + 1, arr_len): \r\n            if (arr[i] * arr[j] > x * y): \r\n                x = arr[i]; y = arr[j] \r\n    return x,y   "
    },
    {
        "number": 923,
        "prompt": "Write a function to find the length of the shortest string that has both str1 and str2 as subsequences.\ndef super_seq(X, Y, m, n):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    dp = [[0] * (n + 1) for _ in range(m + 1)]\n    for i in range(1, m + 1):\n        for j in range(1, n + 1):\n            if X[i - 1] == Y[j - 1]:\n                dp[i][j] = dp[i - 1][j - 1] + 1\n            else:\n                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n    return dp[m][n]\n\ndef shortest_common_super_sequence(str1, str2):\n    m, n = len(str1), len(str2)\n    X = ' ' + str1\n    Y = ' ' + str2\n    m, n = len(X), len(Y)\n    dp = [[0] * n for _ in range(m)]\n    for i in range(1, m):\n        for j in range(1, n):\n            if X[i] == Y[j]:\n                dp[i][j] = dp[i - 1][j - 1] + 1\n            else:\n                dp[i][j] = 1 + min(dp[i - 1][j], dp[i][j - 1])\n    return dp[m - 1][n - 1]\n\nstr1 = input().strip()\nstr2",
        "generated_testcode": "assert super_seq(X=\"abc\", Y=\"def\", m=3, n=3) == 3\n",
        "test": "assert super_seq(\"AGGTAB\", \"GXTXAYB\", 6, 7) == 9\nassert super_seq(\"feek\", \"eke\", 4, 3) == 5\nassert super_seq(\"PARRT\", \"RTA\", 5, 3) == 6",
        "canonical_solution": "def super_seq(X, Y, m, n):\r\n\tif (not m):\r\n\t\treturn n\r\n\tif (not n):\r\n\t\treturn m\r\n\tif (X[m - 1] == Y[n - 1]):\r\n\t\treturn 1 + super_seq(X, Y, m - 1, n - 1)\r\n\treturn 1 + min(super_seq(X, Y, m - 1, n),\tsuper_seq(X, Y, m, n - 1))"
    },
    {
        "number": 924,
        "prompt": "Write a function to find maximum of two numbers.\ndef max_of_two( x, y ):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": true,
        "answer": "    if x > y:\n        return x\n    else:\n        return y\n\n# test the function\nprint(max_of_two(10, 5)) # Output: 10\nprint(max_of_two(5, 10)) # Output: 10\nprint(max_of_two(10, 0)) # Output: 10\nprint(max_of_two(0, -5)) # Output: 0\nprint(max_of_two(-5, -10)) # Output: -5\n\n\n# Another way to write the same function without if statement\ndef max_of_two_v2(x, y):\n    return x if x > y else y\n\n# test the function\nprint(max_of_two_v2(10, 5)) # Output: 10\nprint(max_of_two_v2(5, 10)) # Output: 10\nprint(max_of_two_v2(10, 0)) # Output: 10\nprint(max_of_two_v2(0, -5)) # Output: 0\nprint(max_of_two_v2(-5, -10)) # Output: -5\n\n\n# Another way to write the same function using lambda\nmax_of_two_lambda = lambda x, y: x if x > y else y\n# test the lambda function\nprint(max_of_two_lambda(10, 5)) # Output: 1",
        "generated_testcode": "assert max_of_two(10, 20) == 20\n",
        "test": "assert max_of_two(10,20)==20\nassert max_of_two(19,15)==19\nassert max_of_two(-10,-20)==-10",
        "canonical_solution": "def max_of_two( x, y ):\r\n    if x > y:\r\n        return x\r\n    return y"
    },
    {
        "number": 925,
        "prompt": "Write a python function to calculate the product of all the numbers of a given tuple.\ndef mutiple_tuple(nums):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    product = 1\n    for num in nums:\n        product *= num\n    return product\n\n#Test the function with an example tuple\nprint(mutiple_tuple((2, 4, 6, 8, 10)) #Output: 0\n#Explanation: The product of all the numbers in the tuple (2, 4, 6, 8, 10) is 3840\n\nprint(mutiple_tuple((1, 2, 3, 4, 5, 6, 7, 8, 9, 10)) #Output: 362888000\n#Explanation: The product of all the numbers in the tuple (1, 2, 3, 4, 5, 6, 7, 8, 9, 10) is 362888000\n\nprint(mutiple_tuple((1, 1, 1, 1, 1, 1, 1)) #Output: 1\n#Explanation: The product of all the numbers in the tuple (1, 1, 1, 1, 1, 1) is 1\n\nprint(mutiple_tuple((0, 0, 0) #Output: 0\n#Explanation: The product of all the numbers in the tuple (0, 0, 0) is 0\n\nprint(mutiple_tuple(()) #Output: 1\n#Explan",
        "generated_testcode": "assert mutiple_tuple(()) == 1\n",
        "test": "assert mutiple_tuple((4, 3, 2, 2, -1, 18)) == -864\nassert mutiple_tuple((1,2,3)) == 6\nassert mutiple_tuple((-2,-4,-6)) == -48",
        "canonical_solution": "def mutiple_tuple(nums):\r\n    temp = list(nums)\r\n    product = 1 \r\n    for x in temp:\r\n        product *= x\r\n    return product"
    },
    {
        "number": 926,
        "prompt": "Write a function to find n-th rencontres number.\ndef binomial_coeffi(n, k): \n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": true,
        "answer": "    if k == 0 or k == n: \n        return 1\n    else: \n        return (binomial_coeffi(n - 1, k - 1) + binomial_coeffi(n - 1, k)) \n  \ndef nth_rencontres_number(n): \n    return binomial_coeffi(2 * n, n) // (n + 1)\n\n\nprint(nth_rencontres_number(4))\n\n# Output: 8\n# Explanation: \n# There are 8 rencontres numbers for n = 4, which are: 1, 3, 6, 10, 15, 21, 25, 35, 42, 52, 64, 75 \n# The function calculates the binomial coefficient of (2n, n) and returns the result divided by n + 1. ",
        "generated_testcode": "assert binomial_coeffi(5, 2) == 10\n",
        "test": "assert rencontres_number(7, 2) == 924\nassert rencontres_number(3, 0) == 2\nassert rencontres_number(3, 1) == 3",
        "canonical_solution": "def binomial_coeffi(n, k): \r\n\tif (k == 0 or k == n): \r\n\t\treturn 1\r\n\treturn (binomial_coeffi(n - 1, k - 1) \r\n\t\t+ binomial_coeffi(n - 1, k)) \r\ndef rencontres_number(n, m): \r\n\tif (n == 0 and m == 0): \r\n\t\treturn 1\r\n\tif (n == 1 and m == 0): \r\n\t\treturn 0\r\n\tif (m == 0): \r\n\t\treturn ((n - 1) * (rencontres_number(n - 1, 0)+ rencontres_number(n - 2, 0))) \r\n\treturn (binomial_coeffi(n, m) * rencontres_number(n - m, 0))"
    },
    {
        "number": 927,
        "prompt": "Write a function to calculate the height of the given binary tree.\n\tdef __init__(self, data): \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "\t    self.data = data \n\t    self.left_child = None\n\t    self.right_child = None\n\t\n\n\tdef height(self):\n\t    if self.left_child is None and self.right_child is None: \n\t        return 0\n\t    else: \n\t        left_height = self.left_child.height() if self.left_child is not None else 0\n\t        right_height = self.right_child.height() if self.right_child is not None else 0\n\t        return 1 + max(left_height, right_height) \n\n\n#Example:\n\nroot = Node(1) \nroot.left_child = Node(2) \nroot.right_child = Node(3) \nroot.left_child.left_child = Node(4) \nroot.left_child.right_child = Node(5) \nroot.right_child.left_child = Node(6) \nroot.right_child.right_child = Node(7) \n\nprint(root.height()) # Output: 3",
        "generated_testcode": "assert __init__(1) == None\n",
        "test": "assert (max_height(root)) == 3\nassert (max_height(root1)) == 5 \nassert (max_height(root2)) == 4",
        "canonical_solution": "class Node: \r\n\tdef __init__(self, data): \r\n\t\tself.data = data \r\n\t\tself.left = None\r\n\t\tself.right = None\r\ndef max_height(node): \r\n\tif node is None: \r\n\t\treturn 0 ; \r\n\telse : \r\n\t\tleft_height = max_height(node.left) \r\n\t\tright_height = max_height(node.right) \r\n\t\tif (left_height > right_height): \r\n\t\t\treturn left_height+1\r\n\t\telse: \r\n\t\t\treturn right_height+1"
    },
    {
        "number": 928,
        "prompt": "Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\ndef change_date_format(dt):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    if not isinstance(dt, str):\n        raise TypeError(\"Input should be a string\")\n    if len(dt) != 10:\n        raise ValueError(\"Input should be in yyyy-mm-dd format\")\n    year = dt[:4]\n    month = dt[5:7]\n    day = dt[8:]\n    return day + \"-\" + month + \"-\" + year\n\n# Test the function with an example\nprint(change_date_format(\"2022-09-10\")) # Output: \"10-09-2022\"\n\n# Test the function with an invalid input\n#print(change_date_format(\"2022-13-10\")) # This should raise a ValueError because the month should be between 01 and 12\n# Test the function with an invalid input\n#print(change_date_format(\"2022-10-13\")) # This should raise a ValueError because the day should be between 01 and 31\n# Test the function with an invalid input\n#print(change_date_format(\"12345-09-10\")) # This should raise a ValueError because the year should be four digits",
        "generated_testcode": "assert change_date_format(2021-12-31) == 31-12-2021\n",
        "test": "assert change_date_format('2026-01-02')=='02-01-2026'\nassert change_date_format('2021-01-04')=='04-01-2021'\nassert change_date_format('2030-06-06')=='06-06-2030'",
        "canonical_solution": "import re\r\ndef change_date_format(dt):\r\n        return re.sub(r'(\\d{4})-(\\d{1,2})-(\\d{1,2})', '\\\\3-\\\\2-\\\\1', dt)\r\n        return change_date_format(dt)"
    },
    {
        "number": 929,
        "prompt": "Write a function to count repeated items of a tuple.\ndef count_tuplex(tuplex,value):  \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    count=0  \n    for item in tuplex:  \n        if item==value:  \n            count+=1  \n    return count  \n  \n#testing the function  \ntup=(1,2,3,4,5,6,2,3,4,5,2,7,8,9,2)  \nprint(count_tuplex(tup,2)  ",
        "generated_testcode": "assert count_tuplex((\"a\", \"b\", \"c\", \"a\", \"d\", \"b\", \"c\", \"e\", \"a\") == 2)\n",
        "test": "assert count_tuplex((2, 4, 5, 6, 2, 3, 4, 4, 7),4)==3\nassert count_tuplex((2, 4, 5, 6, 2, 3, 4, 4, 7),2)==2\nassert count_tuplex((2, 4, 7, 7, 7, 3, 4, 4, 7),7)==4",
        "canonical_solution": "def count_tuplex(tuplex,value):  \r\n  count = tuplex.count(value)\r\n  return count"
    },
    {
        "number": 930,
        "prompt": "Write a function that matches a string that has an a followed by zero or more b's by using regex.\ndef text_match(text):\n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    pattern = re.compile(r'a(?:b)*')\n    match = pattern.match(text)\n    if match:\n        return True\n    else:\n        return False\n\n# Test cases\nprint(text_match('ab')) # True\nprint(text_match('aaabbbbb')) # True\nprint(text_match('a')) # True\nprint(text_match('ba')) # False\nprint(text_match('abb')) # True\nprint(text_match('ac')) # False\nprint(text_match('abc')) # False\nprint(text_match('abbbc')) # False\nprint(text_match('ab')) # True\nprint(text_match('abc')) # False\nprint(text_match('a')) # True\nprint(text_match('b')) # False\nprint(text_match('')) # False\nprint(text_match('c')) # False\nprint(text_match('bbbb')) # False\nprint(text_match('aba')) # False\nprint(text_match('aab')) # True\nprint(text_match('aaaabbb')) # True\n",
        "generated_testcode": "assert text_match(r\"ab\") == True\n",
        "test": "assert text_match(\"msb\") == 'Not matched!'\nassert text_match(\"a0c\") == 'Found a match!'\nassert text_match(\"abbc\") == 'Found a match!'",
        "canonical_solution": "import re\r\ndef text_match(text):\r\n        patterns = 'ab*?'\r\n        if re.search(patterns,  text):\r\n                return ('Found a match!')\r\n        else:\r\n                return ('Not matched!')"
    },
    {
        "number": 931,
        "prompt": "Write a function to calculate the sum of series 1\u00b3+2\u00b3+3\u00b3+\u2026.+n\u00b3.\ndef sum_series(number):\n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    result = 0\n    for i in range(1, number+1):\n        result += i ** 3\n    return result\n\n\n# Test the function with an example\nprint(sum_series(5))  # Output: 225\nprint(sum_series(10))  # Output: 255\nprint(sum_series(15))  # Output: 3025\nprint(sum_series(20))  # Output: 5025\n\n",
        "generated_testcode": "assert sum_series(5) == 225\n",
        "test": "assert sum_series(7)==784\nassert sum_series(5)==225\nassert sum_series(15)==14400",
        "canonical_solution": "import math \r\ndef sum_series(number):\r\n total = 0\r\n total = math.pow((number * (number + 1)) /2, 2)\r\n return total"
    },
    {
        "number": 932,
        "prompt": "Write a function to remove duplicate words from a given list of strings.\ndef remove_duplic_list(l):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    # Convert the list to a set to remove duplicates\n    s = set(l)\n    # Convert the set back to a list\n    new_list = list(s)\n    # Return the new list\n    return new_list\n\n\n# Example usage:\nl = ['apple', 'banana', 'orange', 'apple', 'banana', 'orange', 'grape', 'apple']\nprint(remove_duplic_list(l)) # Output: ['grape', 'orange', 'banana', 'apple']\n\n# Test the function with your own input\nprint(remove_duplic_list(['hello', 'world', 'python', 'programming', 'hello', 'programming', 'python', 'code', 'world'])) # Output: ['code', 'hello', 'world', 'python', 'programming']",
        "generated_testcode": "assert remove_duplic_list([\"apple\", \"banana\", \"orange\", \"apple\", \"banana\", \"grape\", \"orange\", \"grape\", \"apple\"] == [\"apple\", \"banana\", \"orange\", \"grape\"]\n",
        "test": "assert remove_duplic_list([\"Python\", \"Exercises\", \"Practice\", \"Solution\", \"Exercises\"])==['Python', 'Exercises', 'Practice', 'Solution']\nassert remove_duplic_list([\"Python\", \"Exercises\", \"Practice\", \"Solution\", \"Exercises\",\"Java\"])==['Python', 'Exercises', 'Practice', 'Solution', 'Java']\nassert remove_duplic_list([\"Python\", \"Exercises\", \"Practice\", \"Solution\", \"Exercises\",\"C++\",\"C\",\"C++\"])==['Python', 'Exercises', 'Practice', 'Solution','C++','C']",
        "canonical_solution": "def remove_duplic_list(l):\r\n    temp = []\r\n    for x in l:\r\n        if x not in temp:\r\n            temp.append(x)\r\n    return temp"
    },
    {
        "number": 933,
        "prompt": "Write a function to convert camel case string to snake case string by using regex.\ndef camel_to_snake(text):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": true,
        "answer": "    if not text:\n        return \"\"\n    words = []\n    word = \"\"\n    for c in text:\n        if c.isupper():\n            words.append(word)\n            word = c.lower()\n        else:\n            word += c\n    words.append(word)\n    return \"_\".join(words)\n\n\n# test cases\nprint(camel_to_snake(\"CamelCase\")) # \"camel_case\"\nprint(camel_to_snake(\"camelCase\")) # \"camel_case\"\nprint(camel_to_snake(\"CamelCaseString\")) # \"camel_case_string\"\nprint(camel_to_snake(\"camelCaseString\")) # \"camel_case_string\"\nprint(camel_to_snake(\"camelCaseString2\")) # \"camel_case_string_2\"\nprint(camel_to_snake(\"camelCaseString2Word\")) # \"camel_case_string_2_word\"\nprint(camel_to_snake(\"camelCaseString2Word\")) # \"camel_case_string_2_word\"\nprint(camel_to_snake(\"HTTPRequest\")) # \"http_request\"\nprint(camel_to_snake(\"HTTPRequest2\")) # \"http_request_2\"\nprint(camel_to_snake(\"HTTP2Request\")) # \"http2_request\"\nprint(camel_to_snake(\"HTTP2Request\")) # \"http2",
        "generated_testcode": "assert camel_to_snake(None) == \"\"\n",
        "test": "assert camel_to_snake('GoogleAssistant') == 'google_assistant'\nassert camel_to_snake('ChromeCast') == 'chrome_cast'\nassert camel_to_snake('QuadCore') == 'quad_core'",
        "canonical_solution": "import re\r\ndef camel_to_snake(text):\r\n  str1 = re.sub('(.)([A-Z][a-z]+)', r'\\1_\\2', text)\r\n  return re.sub('([a-z0-9])([A-Z])', r'\\1_\\2', str1).lower()"
    },
    {
        "number": 934,
        "prompt": "Write a function to find the nth delannoy number.\ndef dealnnoy_num(n, m): \n",
        "checkpoint": "7B",
        "pass": 3,
        "correct": true,
        "answer": "    memo = {0: 0, 1: 1, 2: 1} \n    def delannoy_num(n, m): \n        if n == 0 or m == 0: \n            return 0\n        if (n, m) in memo: \n            return memo[(n, m)] \n        if m == 1: \n            memo[(n, m)] = n \n            return n \n        if m == n: \n            memo[(n, m)] = 1\n            return 1\n        if m == 2: \n            memo[(n, m)] = 1\n            return 1\n        if m > n: \n            memo[(n, m)] = delannoy_num(n, n) + delannoy_num(n, n - 1) \n            return memo[(n, m)] \n        memo[(n, m)] = delannoy_num(n - 1, m) + delannoy_num(n, m - 1) + delannoy_num(n - 1, m - 1) \n        return memo[(n, m)] \n    return delannoy_num(n, m) ",
        "generated_testcode": "assert dealnnoy_num(1, 1) == 1\n",
        "test": "assert dealnnoy_num(3, 4) == 129\nassert dealnnoy_num(3, 3) == 63\nassert dealnnoy_num(4, 5) == 681",
        "canonical_solution": "def dealnnoy_num(n, m): \r\n\tif (m == 0 or n == 0) : \r\n\t\treturn 1\r\n\treturn dealnnoy_num(m - 1, n) + dealnnoy_num(m - 1, n - 1) + dealnnoy_num(m, n - 1)"
    },
    {
        "number": 935,
        "prompt": "Write a function to calculate the sum of series 1\u00b2+2\u00b2+3\u00b2+\u2026.+n\u00b2.\ndef series_sum(number):\n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    sum = 0\n    for i in range(1, number+1):\n        sum += i**2\n    return sum\n\nprint(series_sum(10))\n\n# Output: 385",
        "generated_testcode": "assert series_sum(5) == 55\n",
        "test": "assert series_sum(6)==91\nassert series_sum(7)==140\nassert series_sum(12)==650",
        "canonical_solution": "def series_sum(number):\r\n total = 0\r\n total = (number * (number + 1) * (2 * number + 1)) / 6\r\n return total"
    },
    {
        "number": 936,
        "prompt": "Write a function to re-arrange the given tuples based on the given ordered list.\ndef re_arrange_tuples(test_list, ord_list):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    result = []\n    for i in range(len(ord_list)):\n        result.append(test_list[ord_list.index(i)] if i in ord_list else None)\n    return tuple(filter(None, result)\n\n#test_list = [(1, 2, 3, 4, 5), (6, 7, 8, 9, 10), (11, 12, 13, 14), (15, 16, 17, 18)]\n#ord_list = [2, 0, 3, 1]\n#print(re_arrange_tuples(test_list, ord_list))\n\ndef re_arrange_tuples(test_list, ord_list):\n    return tuple(filter(None, [(test_list[i] if i in ord_list else None) for i in range(len(ord_list))])\n\ntest_list = [(1, 2, 3, 4, 5), (6, 7, 8, 9, 10), (11, 12, 13, 14), (15, 16, 17, 18)]\nord_list = [2, 0, 3, 1]\nprint(re_arrange_tuples(test_list, ord_list))\n\n#Output: (3, 1, 2, 5)\n#Explanation: The function should",
        "generated_testcode": "assert re_arrange_tuples([(1,2,3), (4,5,6), (7,8,9)], [2, 0, 1]) == [(4,5,6), (1,2,3), (7,8,9)]\n",
        "test": "assert re_arrange_tuples([(4, 3), (1, 9), (2, 10), (3, 2)],  [1, 4, 2, 3]) == [(1, 9), (4, 3), (2, 10), (3, 2)]\nassert re_arrange_tuples([(5, 4), (2, 10), (3, 11), (4, 3)],  [3, 4, 2, 3]) == [(3, 11), (4, 3), (2, 10), (3, 11)]\nassert re_arrange_tuples([(6, 3), (3, 8), (5, 7), (2, 4)],  [2, 5, 3, 6]) == [(2, 4), (5, 7), (3, 8), (6, 3)]",
        "canonical_solution": "def re_arrange_tuples(test_list, ord_list):\r\n  temp = dict(test_list)\r\n  res = [(key, temp[key]) for key in ord_list]\r\n  return (res) "
    },
    {
        "number": 937,
        "prompt": "Write a function to count the most common character in a given string.\ndef max_char(str1):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    d = {}\n    for char in str1:\n        if char in d:\n            d[char] += 1\n        else:\n            d[char] = 1\n    max_count = 0\n    max_char = ''\n    for key, value in d.items():\n        if value > max_count:\n            max_count = value\n            max_char = key\n    return max_char\n\n\n#Test the function\nstr1 = 'hello world'\nprint(max_char(str1)) # Output: l\n\nstr2 = 'mississippi'\nprint(max_char(str2)) # Output: s\nstr3 = 'aabbcccc'\nprint(max_char(str3)) # Output: a\nstr4 = 'a'\nprint(max_char(str4)) # Output: a\n",
        "generated_testcode": "assert max_char(input(\"Enter a string: \")) == 'e' # Example input: \"hello world\"\n",
        "test": "assert max_char(\"hello world\")==('l')\nassert max_char(\"hello \")==('l')\nassert max_char(\"python pr\")==('p')",
        "canonical_solution": "from collections import Counter \r\ndef max_char(str1):\r\n    temp = Counter(str1) \r\n    max_char = max(temp, key = temp.get)\r\n    return max_char"
    },
    {
        "number": 938,
        "prompt": "Write a function to find three closest elements from three sorted arrays.\ndef find_closet(A, B, C, p, q, r): \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    i, j, k = 0, 0, 0\n    min_dist = float(\"inf\")\n    min_val = None\n    result = []\n    while i < len(A) and j < len(B) and k < len(C):\n        dist = abs(A[i] - B[j]) + abs(B[j] - C[k])\n        if dist < min_dist:\n            min_dist = dist\n            min_val = (A[i], B[j], C[k])\n        if A[i] < B[j] and A[i] < C[k]:\n            i += 1\n        elif B[j] < A[i] and B[j] < C[k]:\n            j += 1\n        else:\n            k += 1\n    return min_val\n\n# Example usage:\nA = [1, 2, 3, 4, 5, 6, 7]\nB = [2, 5, 8, 9, 10, 11, 12]\nC = [3, 5, 6, 8, 9, 10]\np, q, r = 0, 2, 3\nprint(find_closet(A, B, C, p, r)) # Output: (4, 7, 7)\n\n# Explanation: The closest elements from the three arrays are (4, 5, 6)\n",
        "generated_testcode": "assert find_closet(sorted([1, 2, 3, 4, 5, 6, 7, 8, 9], [2, 5, 7, 9, 10, 12, 13, 15], 2, 3) == (5, 7, 9)\n",
        "test": "assert find_closet([1, 4, 10],[2, 15, 20],[10, 12],3,3,2) == (10, 15, 10)\nassert find_closet([20, 24, 100],[2, 19, 22, 79, 800],[10, 12, 23, 24, 119],3,5,5) == (24, 22, 23)\nassert find_closet([2, 5, 11],[3, 16, 21],[11, 13],3,3,2) == (11, 16, 11)",
        "canonical_solution": "import sys \r\n\r\ndef find_closet(A, B, C, p, q, r): \r\n\tdiff = sys.maxsize \r\n\tres_i = 0\r\n\tres_j = 0\r\n\tres_k = 0\r\n\ti = 0\r\n\tj = 0\r\n\tk = 0\r\n\twhile(i < p and j < q and k < r): \r\n\t\tminimum = min(A[i], min(B[j], C[k])) \r\n\t\tmaximum = max(A[i], max(B[j], C[k])); \r\n\t\tif maximum-minimum < diff: \r\n\t\t\tres_i = i \r\n\t\t\tres_j = j \r\n\t\t\tres_k = k \r\n\t\t\tdiff = maximum - minimum; \r\n\t\tif diff == 0: \r\n\t\t\tbreak\r\n\t\tif A[i] == minimum: \r\n\t\t\ti = i+1\r\n\t\telif B[j] == minimum: \r\n\t\t\tj = j+1\r\n\t\telse: \r\n\t\t\tk = k+1\r\n\treturn A[res_i],B[res_j],C[res_k]"
    },
    {
        "number": 939,
        "prompt": "Write a function to sort a list of dictionaries using lambda function.\ndef sorted_models(models):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": true,
        "answer": "    return sorted(models, key=lambda model: model['year'])\n\n# Test the function with a sample list of dictionaries\nmodels = [\n    {'name': 'Model A', 'year': 2015},\n    {'name': 'Model B', 'year': 2010},\n    {'name': 'Model C', 'year': 2018},\n    {'name': 'Model D', 'year': 2012},\n    {'name': 'Model E', 'year': 2019},\n    {'name': 'Model F', 'year': 2017},\n]\nprint(sorted_models(models))\n\n# Output:\n# [\n#     {'name': 'Model B', 'year': 2010},\n#     {'name': 'Model D', 'year': 2012},\n#     {'name': 'Model F', 'year': 2017},\n#     {'name': 'Model A', 'year': 2015},\n#     {'name': 'Model E', 'year': 2019},\n#     {'name': 'Model C', 'year': 2018}\n# ]\n\n\n# Note: The function should sort the list in ascending order based on the 'year' key of the dictionaries. ",
        "generated_testcode": "assert sorted_models",
        "test": "assert sorted_models([{'make':'Nokia', 'model':216, 'color':'Black'}, {'make':'Mi Max', 'model':2, 'color':'Gold'}, {'make':'Samsung', 'model': 7, 'color':'Blue'}])==[{'make': 'Nokia', 'model': 216, 'color': 'Black'}, {'make': 'Samsung', 'model': 7, 'color': 'Blue'}, {'make': 'Mi Max', 'model': 2, 'color': 'Gold'}]\nassert sorted_models([{'make':'Vivo', 'model':20,'color':'Blue'},{'make': 'oppo','model':17,'color':'Gold'},{'make':'Apple','model':11,'color':'red'}])==([{'make':'Vivo', 'model':20,'color':'Blue'},{'make': 'oppo','model':17,'color':'Gold'},{'make':'Apple','model':11,'color':'red'}])\nassert sorted_models([{'make':'micromax','model':40,'color':'grey'},{'make':'poco','model':60,'color':'blue'}])==([{'make':'poco','model':60,'color':'blue'},{'make':'micromax','model':40,'color':'grey'}])",
        "canonical_solution": "def sorted_models(models):\r\n sorted_models = sorted(models, key = lambda x: x['color'])\r\n return sorted_models"
    },
    {
        "number": 940,
        "prompt": "Write a function to sort the given array by using heap sort.\ndef heap_sort(arr):\n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    # Build max heap\n    for i in range(len(arr)//2 - 1, -1, -1):\n        heapify(arr, i, len(arr))\n    # Extract elements one by one\n    for i in range(len(arr) - 1, 0, -1):\n        arr[i], arr[0] = arr[0], arr[i]\n        heapify(arr, 0, i)\n    return arr\n\n\ndef heapify(arr, i, n):\n    largest = i\n    left = 2 * i + 1\n    right = 2 * i + 2\n    if left < n and arr[left] > arr[largest]:\n        largest = left\n    if right < n and arr[right] > arr[largest]:\n        largest = right\n    if largest != i:\n        arr[i], arr[largest] = arr[largest], arr[i]\n        heapify(arr, largest, n)\n\n# Test the function\narr = [4, 10, 3, 5, 1, 2, 6, 8, 9, 7]\nprint(\"Given array is\", arr)\nprint(\"Sorted array is\", heap_sort(arr))\n",
        "generated_testcode": "assert heap_sort([3, 1, 4, 2, 5, 1, 6, 7, 8, 9, 0, 2, 4, 5, 3] ) == [0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 7, 8, 9]\n\n# Test case 2\n",
        "test": "assert heap_sort([12, 2, 4, 5, 2, 3]) == [2, 2, 3, 4, 5, 12]\nassert heap_sort([32, 14, 5, 6, 7, 19]) == [5, 6, 7, 14, 19, 32]\nassert heap_sort([21, 15, 29, 78, 65]) == [15, 21, 29, 65, 78]",
        "canonical_solution": "def heap_sort(arr):\r\n    heapify(arr)  \r\n    end = len(arr) - 1\r\n    while end > 0:\r\n        arr[end], arr[0] = arr[0], arr[end]\r\n        shift_down(arr, 0, end - 1)\r\n        end -= 1\r\n    return arr\r\n\r\ndef heapify(arr):\r\n    start = len(arr) // 2\r\n    while start >= 0:\r\n        shift_down(arr, start, len(arr) - 1)\r\n        start -= 1\r\ndef shift_down(arr, start, end):\r\n    root = start\r\n    while root * 2 + 1 <= end:\r\n        child = root * 2 + 1\r\n        if child + 1 <= end and arr[child] < arr[child + 1]:\r\n            child += 1\r\n        if child <= end and arr[root] < arr[child]:\r\n            arr[root], arr[child] = arr[child], arr[root]\r\n            root = child\r\n        else:\r\n            return\r\n"
    },
    {
        "number": 941,
        "prompt": "Write a function to count the elements in a list until an element is a tuple.\ndef count_elim(num):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    count = 0\n    while isinstance(num, list):\n        count += len(num)\n        if isinstance(num[-1], tuple):\n            break\n        num = num[-1]\n    return count\n\n# Test cases\nprint(count_elim([1, 2, 3, [4, 5, 6, [7, 8, 9], 10, [11, [12, 13], (14, 15)]])) # Output: 8\nprint(count_elim([1, 2, 3, [4, 5, 6, [7, 8, 9], 10, (11, [12, 13, [14, 15]])] # Output: 6\nprint(count_elim([1, 2, 3, [4, 5, 6, [7, 8, 9], 10, [11, [12, (13, 14)]])) # Output: 7\nprint(count_elim([1, 2, 3, [4, 5, 6, [7, 8, 9], 10, [11, [12, 13, [14, 15, [16, 17]]]) # Output: 5\nprint(count_elim([1, 2, 3, [4, 5, 6, [7, 8, 9], ",
        "generated_testcode": "assert count_elim([\"a\", \"b\", \"c\", \"d\", \"e\", (\"f\", \"g\"), \"h\", \"i\", \"j\", \"k\"]) == 4\n",
        "test": "assert count_elim([10,20,30,(10,20),40])==3\nassert count_elim([10,(20,30),(10,20),40])==1\nassert count_elim([(10,(20,30,(10,20),40))])==0",
        "canonical_solution": "def count_elim(num):\r\n  count_elim = 0\r\n  for n in num:\r\n    if isinstance(n, tuple):\r\n        break\r\n    count_elim += 1\r\n  return count_elim"
    },
    {
        "number": 942,
        "prompt": "Write a function to check if any list element is present in the given list.\ndef check_element(test_tup, check_list):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    for i in check_list:\n        if i in test_tup:\n            return True\n    return False\n\n# Example usage:\ntest_tup = (1, 2, 3, 4, 5)\ncheck_list = [2, 4, 6, 7]\nprint(check_element(test_tup, check_list)) # Output: True\n\ntest_tup = (1, 3, 5, 7)\ncheck_list = [2, 4, 6]\nprint(check_element(test_tup, check_list)) # Output: False\n\ntest_tup = (8, 9, 10)\ncheck_list = [1, 2, 3, 4, 5, 6, 7, 8]\nprint(check_element(test_tup, check_list)) # Output: True\n\ntest_tup = (1, 2, 3, 4)\ncheck_list = [5, 6, 7, 8, 9]\nprint(check_element(test_tup, check_list)) # Output: False\n\n\n# Another example:\ntest_tup = (1, 2, 3, 4, 5)\ncheck_list = [2, 4, 6, 7]\nprint(check_element(test_tup, check_list)) # Output: True\n\ntest_tup = (1, 3, 5, ",
        "generated_testcode": "assert check_element(('a', ['a', 'b', 'c', 'd']) == True\n",
        "test": "assert check_element((4, 5, 7, 9, 3),  [6, 7, 10, 11]) == True\nassert check_element((1, 2, 3, 4),  [4, 6, 7, 8, 9]) == True\nassert check_element((3, 2, 1, 4, 5),  [9, 8, 7, 6]) == False",
        "canonical_solution": "def check_element(test_tup, check_list):\r\n  res = False\r\n  for ele in check_list:\r\n    if ele in test_tup:\r\n      res = True\r\n      break\r\n  return (res) "
    },
    {
        "number": 943,
        "prompt": "Write a function to combine two given sorted lists using heapq module.\ndef combine_lists(num1,num2):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    import heapq\n    heap = []\n    for i in num1:\n        heapq.heappush(heap,i)\n    for j in num2:\n        heapq.heappush(heap,j)\n    return [heapq.heappop(heap) for i in range(len(heap))]\n\nnum1 = [1,3,5,7,9]\nnum2 = [2,4,6,8,10]\nprint(combine_lists(num1,num2)) #[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\n\n#Write a function to remove duplicates from a list\ndef remove_duplicates(nums):\n    return list(set(nums)\n\nnums = [1,2,3,4,5,6,7,8,9,9,8,7,6,5,4,3,2,1]\nprint(remove_duplicates(nums)) #[1, 2, 3, 4, 5, 6, 7, 8, 9]\n\n\n#Write a function to find the maximum sum of a subarray in a given list\ndef max_sum_subarray(nums):\n    max_sum = 0\n    for i in range(len(nums)):\n        for j in range(i,len(nums)):\n            current_sum = sum(nums[i:j+1",
        "generated_testcode": "assert combine_lists(sorted([1,2,3,4,5,6,7,8,9], [1,2,3,4,5,6,7,8,9]) == [1,1,2,2,2,3,3,3,4,4,4,5,5,5,6,6,6,7,7,7,8,8,8,9,9]\n",
        "test": "assert combine_lists([1, 3, 5, 7, 9, 11],[0, 2, 4, 6, 8, 10])==[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]\nassert combine_lists([1, 3, 5, 6, 8, 9], [2, 5, 7, 11])==[1,2,3,5,5,6,7,8,9,11]\nassert combine_lists([1,3,7],[2,4,6])==[1,2,3,4,6,7]",
        "canonical_solution": "from heapq import merge\r\ndef combine_lists(num1,num2):\r\n  combine_lists=list(merge(num1, num2))\r\n  return combine_lists"
    },
    {
        "number": 944,
        "prompt": "Write a function to separate and print the numbers and their position of a given string.\ndef num_position(text):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    numbers = []\n    for i in range(len(text)):\n        if text[i].isdigit():\n            numbers.append((text[i], i+1))\n    return numbers\n\n# Test the function with an example string\nprint(num_position(\"The quick brown fox jumps over the lazy 1234 dog 56789.\"))\n# Output: [('1', 22), ('2', 23), ('3', 24), ('4', 25), ('5', 26), ('6', 27), ('7', 28), ('8', 29), ('9', 30)] ",
        "generated_testcode": "assert num_position(123abc456) == {'1': [0], '3': [2], '4': [3], '5': [4], '6': [5]}\n",
        "test": "assert num_position(\"there are 70 flats in this apartment\")==10\nassert num_position(\"every adult have 32 teeth\")==17\nassert num_position(\"isha has 79 chocolates in her bag\")==9",
        "canonical_solution": "import re\r\ndef num_position(text):\r\n for m in re.finditer(\"\\d+\", text):\r\n    return m.start()"
    },
    {
        "number": 945,
        "prompt": "Write a function to convert the given tuples into set.\ndef tuple_to_set(t):\n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    return set(t)\n\n# Test the function with an example tuple\nt = (1, 2, 2, 3, 3, 4, 4, 4, 5, 5)\nprint(tuple_to_set(t))\n\n# Output: {1, 2, 3, 4, 5} ",
        "generated_testcode": "assert tuple_to_set(()) == set()\n",
        "test": "assert tuple_to_set(('x', 'y', 'z') ) == {'y', 'x', 'z'}\nassert tuple_to_set(('a', 'b', 'c') ) == {'c', 'a', 'b'}\nassert tuple_to_set(('z', 'd', 'e') ) == {'d', 'e', 'z'}",
        "canonical_solution": "def tuple_to_set(t):\r\n  s = set(t)\r\n  return (s) "
    },
    {
        "number": 946,
        "prompt": "Write a function to find the most common elements and their counts of a specified text.\ndef most_common_elem(s,a):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    words = s.split()\n    counter = {}\n    for word in words:\n        if word in counter:\n            counter[word] += 1\n        else:\n            counter[word] = 1\n    max_count = 0\n    max_word = \"\"\n    for key, value in counter.items():\n        if value > max_count:\n            max_count = value\n            max_word = key\n    for key, value in counter.items():\n        if value == max_count:\n            if a in key:\n                return key\n    return max_word\n\n\n# Test the function\ns = \"apple apple orange banana apple banana apple apple banana orange\"\na = \"a\"\nprint(most_common_elem(s, a))\n# Output: \"apple\"\n\ns = \"apple orange banana apple banana apple orange\"\na = \"a\"\nprint(most_common_elem(s, a))\n# Output: \"apple\"\n\ns = \"apple banana orange banana apple\"\na = \"a\"\nprint(most_common_elem(s, a))\n# Output: \"banana\"\n\ns = \"apple orange banana apple apple orange apple\"\na = \"e\"\nprint(most_common_elem(s, a))\n# Output: \"apple\"\n\ns = \"apple apple apple banana\"\na = \"o\"\nprint(most_common_elem(s, a))\n# Output: \"apple\"\n\ns = \"orange",
        "generated_testcode": "assert most_common_elem(s=\"hello world world world hello world\", a=2) == {'world': 2, 'hello': 2}\n",
        "test": "assert most_common_elem('lkseropewdssafsdfafkpwe',3)==[('s', 4), ('e', 3), ('f', 3)] \nassert most_common_elem('lkseropewdssafsdfafkpwe',2)==[('s', 4), ('e', 3)]\nassert most_common_elem('lkseropewdssafsdfafkpwe',7)==[('s', 4), ('e', 3), ('f', 3), ('k', 2), ('p', 2), ('w', 2), ('d', 2)]",
        "canonical_solution": "from collections import Counter \r\ndef most_common_elem(s,a):\r\n  most_common_elem=Counter(s).most_common(a)\r\n  return most_common_elem"
    },
    {
        "number": 947,
        "prompt": "Write a python function to find the length of the shortest word.\ndef len_log(list1):\n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    short_len = float('inf')\n    for word in list1:\n        if len(word) < short_len:\n            short_len = len(word)\n    return short_len\n\nlist1 = ['apple', 'banana', 'cherry', 'grape', 'orange', 'kiwi', 'mango']\nprint(len_log(list1)) # Output: 5\n\nlist2 = ['hello', 'world', 'python', 'programming', 'language']\nprint(len_log(list2)) # Output: 6\n\nlist3 = ['java', 'kotlin', 'javascript', 'go', 'swift', 'ruby', 'php']\nprint(len_log(list3)) # Output: 4\n\n\n#Another way to solve the problem\ndef len_log(list1):\n    short_len = min(len(word) for word in list1)\n    return short_len\n\nlist1 = ['apple', 'banana', 'cherry', 'grape', 'orange', 'kiwi', 'mango']\nprint(len_log(list1)) # Output: 5\nlist2 = ['hello', 'world', 'python', 'programming', 'language']\nprint(len_log(list2)) # Output: 6\nlist3 = ['java', 'kotlin', 'javascript', 'go', 'swift', 'ruby', 'php']\nprint(len_log(list3)) # Output: 4 ",
        "generated_testcode": "assert len_log([\"apple\", \"banana\", \"cherry\", \"dog\", \"cat\", \"elephant\"]), 3\n",
        "test": "assert len_log([\"win\",\"lose\",\"great\"]) == 3\nassert len_log([\"a\",\"ab\",\"abc\"]) == 1\nassert len_log([\"12\",\"12\",\"1234\"]) == 2",
        "canonical_solution": "def len_log(list1):\r\n    min=len(list1[0])\r\n    for i in list1:\r\n        if len(i)<min:\r\n            min=len(i)\r\n    return min"
    },
    {
        "number": 948,
        "prompt": "Write a function to get an item of a tuple.\ndef get_item(tup1,index):\n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    \"\"\"\n    This function takes a tuple as input and an index and returns the item at the specified index from the tuple\n    \"\"\"\n    return tup1[index]\n\n#Test the function with a tuple and an index\ntup1 = (1,2,3,4,5,6,7)\nindex = 2\nprint(get_item(tup1,index))\n\n#Test the function with a tuple and an index\ntup2 = (\"apple\",\"banana\",\"orange\",\"grape\")\nindex = 1\nprint(get_item(tup2,index))\n",
        "generated_testcode": "assert get_item((\"apple\", \"banana\", \"cherry\", \"orange\"), 1) == \"banana\"\n",
        "test": "assert get_item((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),3)==('e')\nassert get_item((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),-4)==('u')\nassert get_item((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),-3)==('r')",
        "canonical_solution": "def get_item(tup1,index):\r\n  item = tup1[index]\r\n  return item"
    },
    {
        "number": 949,
        "prompt": "Write a function to sort the given tuple list basis the total digits in tuple.\ndef count_digs(tup):\n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    def count_digits(num):\n        count = 0\n        while num > 0:\n            count += 1\n            num //= 10\n        return count\n\n    return sorted(tup, key=lambda x: count_digits(x[0]) + count_digits(x[1]) + count_digits(x[2]))\n\n\n#Example usage:\nprint(count_digs([(123, 456, 789), (12, 45, 7), (1234, 56, 789)]))\n#Output: [(12, 45, 7), (123, 456, 789), (1234, 56, 789)]\n\n#Explanation: The tuples with maximum digits in the sum of each element are sorted first and then the tuples with maximum digits in the sum of all the elements. \n#In this case, (12, 45, 7) has 3 digits and (123, 456, 789) and (1234, 56, 789) have 4 and 4 digits in the sum of their elements respectively.\n#So, the output is [(12, 45, 7), (123, 456, 789), (1234, 56, 789)]\n",
        "generated_testcode": "assert count_digs(()) == []\n",
        "test": "assert sort_list([(3, 4, 6, 723), (1, 2), (12345,), (134, 234, 34)] ) == '[(1, 2), (12345,), (3, 4, 6, 723), (134, 234, 34)]'\nassert sort_list([(3, 4, 8), (1, 2), (1234335,), (1345, 234, 334)] ) == '[(1, 2), (3, 4, 8), (1234335,), (1345, 234, 334)]'\nassert sort_list([(34, 4, 61, 723), (1, 2), (145,), (134, 23)] ) == '[(1, 2), (145,), (134, 23), (34, 4, 61, 723)]'",
        "canonical_solution": "def count_digs(tup):\r\n  return sum([len(str(ele)) for ele in tup ]) \r\ndef sort_list(test_list):\r\n  test_list.sort(key = count_digs)\r\n  return (str(test_list))"
    },
    {
        "number": 950,
        "prompt": "Write a function to display sign of the chinese zodiac for given year.\ndef chinese_zodiac(year):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    \"\"\"\n    Return the chinese zodiac for a given year.\n    \"\"\"\n    zodiac_list = [\"rat\", \"ox\", \"tiger\", \"rabbit\", \"dragon\", \"snake\", \"horse\", \"goat\", \"monkey\", \"rooster\", \"dog\", \"pig\", \"rat\", \"ox\", \"tiger\", \"rat\", \"dragon\", \"snake\", \"horse\", \"goat\", \"monkey\"]\n    index = (year % 12) % 12\n    return zodiac_list[index]\n\n# Test cases\nprint(chinese_zodiac(20000) # Should print \"rat\"\nprint(chinese_zodiac(19900) # Should print \"goat\"\nprint(chinese_zodiac(19960) # Should print \"dragon\"\nprint(chinese_zodiac(2020) # Should print \"rat\"\n",
        "generated_testcode": "assert chinese_zodiac(20000) == \"Dragon\"\n",
        "test": "assert chinese_zodiac(1997)==('Ox')\nassert chinese_zodiac(1998)==('Tiger')\nassert chinese_zodiac(1994)==('Dog')",
        "canonical_solution": "def chinese_zodiac(year):\r\n if (year - 2000) % 12 == 0:\r\n     sign = 'Dragon'\r\n elif (year - 2000) % 12 == 1:\r\n     sign = 'Snake'\r\n elif (year - 2000) % 12 == 2:\r\n     sign = 'Horse'\r\n elif (year - 2000) % 12 == 3:\r\n     sign = 'sheep'\r\n elif (year - 2000) % 12 == 4:\r\n     sign = 'Monkey'\r\n elif (year - 2000) % 12 == 5:\r\n     sign = 'Rooster'\r\n elif (year - 2000) % 12 == 6:\r\n     sign = 'Dog'\r\n elif (year - 2000) % 12 == 7:\r\n     sign = 'Pig'\r\n elif (year - 2000) % 12 == 8:\r\n     sign = 'Rat'\r\n elif (year - 2000) % 12 == 9:\r\n     sign = 'Ox'\r\n elif (year - 2000) % 12 == 10:\r\n     sign = 'Tiger'\r\n else:\r\n     sign = 'Hare'\r\n return sign"
    },
    {
        "number": 951,
        "prompt": "Write a function to find the maximum of similar indices in two lists of tuples.\ndef max_similar_indices(test_list1, test_list2):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    max_value = 0\n    for i in range(len(test_list1)):\n        for j in range(len(test_list2)):\n            if test_list1[i][1] == test_list2[j][1]:\n                if i == j:\n                    if test_list1[i][0] > test_list2[j][0]:\n                        max_value = test_list1[i][0]\n                    else:\n                        max_value = test_list2[j][0]\n                else:\n                    if test_list1[i][0] > test_list2[j][0]:\n                        max_value = test_list1[i][0]\n                    else:\n                        max_value = test_list2[j][0]\n                    return max_value\n    return max_value\n\n\n# Testing the function with sample input\ntest_list1 = [(1, 3), (5, 2), (4, 4), (6, 5)]\ntest_list2 = [(3, 1), (2, 5), (7, 4), (8, 6)]\nprint(max_similar_indices(test_list1, test_list2)) # Output: 6\n",
        "generated_testcode": "assert max_similar_indices([(1,2), (3,4), (5,6), (7,8)], [(1,2), (3,4), (5,6), (9,10)]) == (0, 2)\n",
        "test": "assert max_similar_indices([(2, 4), (6, 7), (5, 1)],[(5, 4), (8, 10), (8, 14)]) == [(5, 4), (8, 10), (8, 14)]\nassert max_similar_indices([(3, 5), (7, 8), (6, 2)],[(6, 5), (9, 11), (9, 15)]) == [(6, 5), (9, 11), (9, 15)]\nassert max_similar_indices([(4, 6), (8, 9), (7, 3)],[(7, 6), (10, 12), (10, 16)]) == [(7, 6), (10, 12), (10, 16)]",
        "canonical_solution": "def max_similar_indices(test_list1, test_list2):\r\n  res = [(max(x[0], y[0]), max(x[1], y[1]))\r\n   for x, y in zip(test_list1, test_list2)]\r\n  return (res) "
    },
    {
        "number": 952,
        "prompt": "Write a function to compute the value of ncr mod p.\ndef nCr_mod_p(n, r, p): \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    if n < r: \n        return 0\n    if r == 0 or r == n: \n        return 1\n    if r == 1 or r == 0: \n        return 1\n    result = 1\n    for i in range(r): \n        result = (result * (n-i) % p) * (nCr_mod_p(n-1, i, p) % p) % p\n    return result % p\n\n# Test the function \nn = 10\nr = 5\np = 13\nprint(\"Value of nCr % p is: \", nCr_mod_p(n, r, p)) ",
        "generated_testcode": "assert nCr_mod_p(10, 5, 100000000000007) == 26280\n",
        "test": "assert nCr_mod_p(10, 2, 13) == 6\nassert nCr_mod_p(11, 3, 14) == 11\nassert nCr_mod_p(18, 14, 19) == 1",
        "canonical_solution": "def nCr_mod_p(n, r, p): \r\n\tif (r > n- r): \r\n\t\tr = n - r \r\n\tC = [0 for i in range(r + 1)] \r\n\tC[0] = 1 \r\n\tfor i in range(1, n + 1): \r\n\t\tfor j in range(min(i, r), 0, -1): \r\n\t\t\tC[j] = (C[j] + C[j-1]) % p \r\n\treturn C[r] "
    },
    {
        "number": 953,
        "prompt": "Write a python function to find the minimun number of subsets with distinct elements.\ndef subset(ar, n): \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    ar.sort() \n    count = 0\n    i = 0\n    j = 0\n    while i < n: \n        if ar[i] != ar[j]: \n            count += 1\n            i += 1\n        else: \n            j += 1\n    return count \n\n#Example:\nar = [1, 2, 2, 3, 4, 4, 4, 5, 5, 6]\nn = len(ar)\nprint(subset(ar, n)) # Output: 3\n\nar = [1, 1, 2, 2, 3, 3, 4, 4, 5]\nn = len(ar)\nprint(subset(ar, n)) # Output: 2\nar = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5]\nn = len(ar)\nprint(subset(ar, n)) # Output: 2 ",
        "generated_testcode": "assert subset(ar = [1, 2, 3, 4, 4, 4, 5, 6, 7], n = 5) == 2\n",
        "test": "assert subset([1, 2, 3, 4],4) == 1\nassert subset([5, 6, 9, 3, 4, 3, 4],7) == 2\nassert subset([1, 2, 3 ],3) == 1",
        "canonical_solution": "def subset(ar, n): \r\n    res = 0\r\n    ar.sort() \r\n    for i in range(0, n) : \r\n        count = 1\r\n        for i in range(n - 1): \r\n            if ar[i] == ar[i + 1]: \r\n                count+=1\r\n            else: \r\n                break \r\n        res = max(res, count)  \r\n    return res "
    },
    {
        "number": 954,
        "prompt": "Write a function that gives profit amount if the given amount has profit else return none.\ndef profit_amount(actual_cost,sale_amount): \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    profit = sale_amount - actual_cost\n    if profit > 0:\n        return profit\n    else:\n        return None\n\n\n# Testing the function\nprint(profit_amount(100,20)) # Output: 10\nprint(profit_amount(20,10)) # Output: None\nprint(profit_amount(50,80)) # Output: 30\nprint(profit_amount(20,50)) # Output: None ",
        "generated_testcode": "assert profit_amount(1000,120) == 20\n",
        "test": "assert profit_amount(1500,1200)==300\nassert profit_amount(100,200)==None\nassert profit_amount(2000,5000)==None",
        "canonical_solution": "def profit_amount(actual_cost,sale_amount): \r\n if(actual_cost > sale_amount):\r\n    amount = actual_cost - sale_amount\r\n    return amount\r\n else:\r\n    return None"
    },
    {
        "number": 955,
        "prompt": "Write a function to find out, if the given number is abundant.\ndef is_abundant(n):\n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    sum_of_divisors = sum(i for i in range(1, (n // 2 + 1) if n % 2 == 0 else n) if n % i == 0)\n    return sum_of_divisors > n\n\n\n# Function to find the sum of all the factors of a given number\ndef sum_of_factors(n):\n    sum_of_factors = 0\n    for i in range(1, (n // 2 + 1) if n % 2 == 0 else n):\n        if n % i == 0:\n            sum_of_factors += i\n    return sum_of_factors\n\n\n# Main function to find the sum of all the abundant numbers less than a given number\ndef sum_of_abundant_numbers(n):\n    abundant_numbers = [i for i in range(1, n) if is_abundant(i)]\n    abundant_sums = set()\n    for i in range(1, n):\n        for j in abundant_numbers:\n            if i + j < n and i + j not in abundant_sums:\n                abundant_sums.add(i + j)\n    return sum(abundant_sums)\n\n\n# Testing the functions\nprint(is_abundant(12))\nprint(sum_of_factors(12))\nprint(sum_of_abundant_numbers(28))\n",
        "generated_testcode": "assert is_abundant(12) == True\n",
        "test": "assert is_abundant(12)==True\nassert is_abundant(13)==False\nassert is_abundant(9)==False",
        "canonical_solution": "def is_abundant(n):\r\n    fctrsum = sum([fctr for fctr in range(1, n) if n % fctr == 0])\r\n    return fctrsum > n"
    },
    {
        "number": 956,
        "prompt": "Write a function to split the given string at uppercase letters by using regex.\ndef split_list(text):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": true,
        "answer": "    # write your code here\n    import re\n    return re.findall('[A-Z][^A-Z]*', text)\n\n# Test cases\nprint(split_list(\"HelloWorld\")) # ['Hello', 'World']\nprint(split_list(\"PythonIsAWesome\")) # ['Python', 'Is', 'Awesome']\nprint(split_list(\"ThisIsAnExample\")) # ['This', 'Is', 'An', 'Example']\nprint(split_list(\"IAmAPythonProgrammer\")) # ['I', 'Am', 'A', 'Python', 'Programmer']\nprint(split_list(\"EasyQuestion\")) # ['Easy', 'Question']\nprint(split_list(\"ComputerScienceIsCool\")) # ['Computer', 'Science', 'Is', 'Cool']",
        "generated_testcode": "assert split_list(\"HelloWorld\" ) == [\"Hello\", \"World\"]\n",
        "test": "assert split_list(\"LearnToBuildAnythingWithGoogle\") == ['Learn', 'To', 'Build', 'Anything', 'With', 'Google']\nassert split_list(\"ApmlifyingTheBlack+DeveloperCommunity\") == ['Apmlifying', 'The', 'Black+', 'Developer', 'Community']\nassert split_list(\"UpdateInTheGoEcoSystem\") == ['Update', 'In', 'The', 'Go', 'Eco', 'System']",
        "canonical_solution": "import re\r\ndef split_list(text):\r\n  return (re.findall('[A-Z][^A-Z]*', text))"
    },
    {
        "number": 957,
        "prompt": "Write a python function to get the position of rightmost set bit.\ndef get_First_Set_Bit_Pos(n):\n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    count = 0\n    while n & 1 == 0:\n        n >>= 1\n        count += 1\n    return count\n\n# Test the function\nprint(get_First_Set_Bit_Pos(15)) # Output: 4 \nprint(get_First_Set_Bit_Pos(31)) # Output: 5 ",
        "generated_testcode": "assert get_First_Set_Bit_Pos(0b10101010101010) == 1\n",
        "test": "assert get_First_Set_Bit_Pos(12) == 3\nassert get_First_Set_Bit_Pos(18) == 2\nassert get_First_Set_Bit_Pos(16) == 5",
        "canonical_solution": "import math\r\ndef get_First_Set_Bit_Pos(n):\r\n     return math.log2(n&-n)+1"
    },
    {
        "number": 958,
        "prompt": "Write a function to convert an integer into a roman numeral.\ndef int_to_roman( num):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    roman_numerals = {1: 'I', 4: 'IV', 5: 'V', 9: 'IX', 10: 'X', 40: 'XL', 50: 'L', 90: 'XC', 100: 'C', 400: 'C', 50: 'D', 90: 'CM', 100: 'X', 400: 'XL', 50: 'L', 90: 'XC', 1000: 'C', 400: 'CD', 500: 'D', 90: 'CM', 1000: 'C', 4000: 'CD', 500: 'D', 900: 'CX', 10000: 'X', 4000: 'XL', 500: 'L', 900: 'XC', 10000: 'C', 40000: 'CD', 5000: 'D', 9000: 'CM', 10000: 'M', 40000: 'M'}\n    roman_values = [1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 50, 90, 100, 400, 50,",
        "generated_testcode": "assert int_to_roman(1) == \"I\"\n",
        "test": "assert int_to_roman(1)==(\"I\")\nassert int_to_roman(50)==(\"L\")\nassert int_to_roman(4)==(\"IV\")",
        "canonical_solution": "def int_to_roman( num):\r\n        val = [1000, 900, 500, 400,100, 90, 50, 40,10, 9, 5, 4,1]\r\n        syb = [\"M\", \"CM\", \"D\", \"CD\",\"C\", \"XC\", \"L\", \"XL\",\"X\", \"IX\", \"V\", \"IV\",\"I\"]\r\n        roman_num = ''\r\n        i = 0\r\n        while  num > 0:\r\n            for _ in range(num // val[i]):\r\n                roman_num += syb[i]\r\n                num -= val[i]\r\n            i += 1\r\n        return roman_num"
    },
    {
        "number": 959,
        "prompt": "Write a python function to find the average of a list.\ndef Average(lst): \n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": true,
        "answer": "    if len(lst) == 0:\n        return 0\n    return sum(lst) / len(lst) ",
        "generated_testcode": "assert Average([1, 2, 3, 4, 5, 6, 7, 8, 9] ) == 5.0\n",
        "test": "assert Average([15, 9, 55, 41, 35, 20, 62, 49]) == 35.75\nassert Average([4, 5, 1, 2, 9, 7, 10, 8]) == 5.75\nassert Average([1,2,3]) == 2",
        "canonical_solution": "def Average(lst): \r\n    return sum(lst) / len(lst) "
    },
    {
        "number": 960,
        "prompt": "Write a function to solve tiling problem.\ndef get_noOfways(n):\n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    if n == 0 or n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    elif n == 3:\n        return 2\n\n    else:\n        return get_noOfways(n-1) + get_noOfways(n-2) + get_noOfways(n-3)\n\nprint(get_noOfways(7)) # Output : 28\n\n\n# We are using the concept of recursion to solve this problem. We can reach any tile number by using 2, 3, or 4 tiles. We can either start with 2 tiles, or we can start with 3 tiles or we can start with 4 tiles.\n# Therefore, the number of ways to reach the tile number n is the sum of the number of ways to reach n-1, n-2, and n-3. This is a recursive relation.\n# We can use this approach to solve this problem in a simple way.\n",
        "generated_testcode": "assert get_noOfways(1) == 1\n",
        "test": "assert get_noOfways(4)==3\nassert get_noOfways(3)==2\nassert get_noOfways(5)==5",
        "canonical_solution": "def get_noOfways(n):\r\n    if (n == 0):\r\n        return 0;\r\n    if (n == 1):\r\n        return 1; \r\n    return get_noOfways(n - 1) + get_noOfways(n - 2);"
    },
    {
        "number": 961,
        "prompt": "Write a function to convert a roman numeral to an integer.\ndef roman_to_int(s):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    roman_to_int = {'I': 1, 'V': 5, 'X': 10, 'L': 50, 'C': 1000, 'D': 5000, 'M': 10000}\n    prev = 0\n    result = 0\n    for c in s:\n        if roman_to_int[c] > prev:\n            result -= 2 * prev\n        result += roman_to_int[c]\n        prev = roman_to_int[c]\n    return result\n\n# Test cases\nprint(roman_to_int('IV')) # should return 4\nprint(roman_to_int('XLV')) # should return 45\nprint(roman_to_int('CD')) # should return 400\nprint(roman_to_int('MCMXCIX')) # should return 19999\nprint(roman_to_int('MMMCMXCIX')) # should return 39999\n",
        "generated_testcode": "assert roman_to_int(None) == 0\n",
        "test": "assert roman_to_int('MMMCMLXXXVI')==3986\nassert roman_to_int('MMMM')==4000\nassert roman_to_int('C')==100",
        "canonical_solution": "def roman_to_int(s):\r\n        rom_val = {'I': 1, 'V': 5, 'X': 10, 'L': 50, 'C': 100, 'D': 500, 'M': 1000}\r\n        int_val = 0\r\n        for i in range(len(s)):\r\n            if i > 0 and rom_val[s[i]] > rom_val[s[i - 1]]:\r\n                int_val += rom_val[s[i]] - 2 * rom_val[s[i - 1]]\r\n            else:\r\n                int_val += rom_val[s[i]]\r\n        return int_val"
    },
    {
        "number": 962,
        "prompt": "Write a python function to find the sum of all even natural numbers within the range l and r.\ndef sum_Natural(n): \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    sum = 0 \n    for i in range(n): \n        if i % 2 == 0: \n            sum += i \n    return sum ",
        "generated_testcode": "assert sum_Natural(1, 10) == 30\n",
        "test": "assert sum_Even(2,5) == 6\nassert sum_Even(3,8) == 18\nassert sum_Even(4,6) == 10",
        "canonical_solution": "def sum_Natural(n): \r\n    sum = (n * (n + 1)) \r\n    return int(sum) \r\ndef sum_Even(l,r): \r\n    return (sum_Natural(int(r / 2)) - sum_Natural(int((l - 1) / 2))) "
    },
    {
        "number": 963,
        "prompt": "Write a function to calculate the discriminant value.\ndef discriminant_value(x,y,z):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    a=x\n    b=y\n    c=z\n    d=b*b-4*a*c\n    return d\n\n#Test the function\nprint(discriminant_value(1,2,3)) #output: 0.0\nprint(discriminant_value(4,5,6)) #output: 0.0\nprint(discriminant_value(-2,3,4)) #output: -3.0\nprint(discriminant_value(1,1,1)) #output: 0.0\n\n\n#Write a function to calculate the roots of a quadratic equation\ndef quadratic_roots(a,b,c):\n    if a==0:\n        print(\"Error: coefficient 'a' should not be 0\")\n    else:\n        discriminant=discriminant_value(a,b,c)\n        if discriminant>0:\n            root1=(-b+math.sqrt(discriminant))/2*a\n            root2=(-b-math.sqrt(discriminant))/2*a\n            return (root1,root2)\n        elif discriminant==0:\n            root1=root2=(-b/a)\n            return (root1,root2)\n        else:\n            print(\"Roots are complex\")\n\n#Test the function\nprint(quadratic_roots(1,2,3)) #output: (1.0, 1.0)\nprint(quadratic",
        "generated_testcode": "assert discriminant_value(1,2,3) == 10\n",
        "test": "assert discriminant_value(4,8,2)==(\"Two solutions\",32)\nassert discriminant_value(5,7,9)==(\"no real solution\",-131)\nassert discriminant_value(0,0,9)==(\"one solution\",0)",
        "canonical_solution": "def discriminant_value(x,y,z):\r\n    discriminant = (y**2) - (4*x*z)\r\n    if discriminant > 0:\r\n        return (\"Two solutions\",discriminant)\r\n    elif discriminant == 0:\r\n        return (\"one solution\",discriminant)\r\n    elif discriminant < 0:\r\n        return (\"no real solution\",discriminant)"
    },
    {
        "number": 964,
        "prompt": "Write a python function to check whether the length of the word is even or not.\ndef word_len(s): \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    if len(s) % 2 == 0:\n        print(\"The length of the word is even\")\n    else:\n        print(\"The length of the word is odd\")\n\n# Test the function with the following word\nword_len(\"hello\")\n",
        "generated_testcode": "assert word_len(123) == False\n",
        "test": "assert word_len(\"program\") == False\nassert word_len(\"solution\") == True\nassert word_len(\"data\") == True",
        "canonical_solution": "def word_len(s): \r\n    s = s.split(' ')   \r\n    for word in s:    \r\n        if len(word)%2==0: \r\n            return True  \r\n        else:\r\n          return False"
    },
    {
        "number": 965,
        "prompt": "Write a function to convert camel case string to snake case string.\ndef camel_to_snake(text):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    snake_case = \"\"\n    for i in range(len(text)):\n        if text[i].isupper():\n            snake_case += \"_\" + text[i].lower()\n        else:\n            snake_case += text[i]\n    return snake_case\n\n\n# Test cases\nprint(camel_to_snake(\"HelloWorld\")) # should return \"hello_world\"\nprint(camel_to_snake(\"CamelCaseString\")) # should return \"camel_case_string\"\nprint(camel_to_snake(\"camelCaseString\")) # should return \"camel_case_string\"\nprint(camel_to_snake(\"camelCaseString2021\")) # should return \"camel_case_string2021\"\nprint(camel_to_snake(\"camelCaseStringWith123Numbers\")) # should return \"camel_case_string_with_123_numbers\"\nprint(camel_to_snake(\"getHTTPResponseCode\")) # should return \"get_http_response_code\"\nprint(camel_to_snake(\"getHTTPResponseCodeXYZ\")) # should return \"get_http_response_code_xyz\"\nprint(camel_to_snake(\"get2000HTTPResponseCode\")) # should return \"get_2000_http_response_code\"\nprint(camel_to_snake(\"HTTPResponseCodeXYZ200\")) # should return \"http_response_code_",
        "generated_testcode": "assert camel_to_snake(None) == \"\"\n",
        "test": "assert camel_to_snake('PythonProgram')==('python_program')\nassert camel_to_snake('pythonLanguage')==('python_language')\nassert camel_to_snake('ProgrammingLanguage')==('programming_language')",
        "canonical_solution": "def camel_to_snake(text):\r\n        import re\r\n        str1 = re.sub('(.)([A-Z][a-z]+)', r'\\1_\\2', text)\r\n        return re.sub('([a-z0-9])([A-Z])', r'\\1_\\2', str1).lower()"
    },
    {
        "number": 966,
        "prompt": "Write a function to remove an empty tuple from a list of tuples.\ndef remove_empty(tuple1): #L = [(), (), ('',), ('a', 'b'), ('a', 'b', 'c'), ('d')]\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    new_list = []\n    for t in tuple1:\n        if len(t) != 0:\n            new_list.append(t)\n    return new_list\n\n\n# test function\nprint(remove_empty([(), (), ('',), ('a', 'b'), ('a', 'b', 'c'), ('d')]) # expected output: [('a', 'b', 'c'), ('d')]\n",
        "generated_testcode": "assert remove_empty([(), (), ('',), ('a', 'b'), ('a', 'b', 'c'), ('d')] ) == [('a', 'b', 'c'), ('d')]\n",
        "test": "assert remove_empty([(), (), ('',), ('a', 'b'), ('a', 'b', 'c'), ('d')])==[('',), ('a', 'b'), ('a', 'b', 'c'), 'd']  \nassert remove_empty([(), (), ('',), (\"python\"), (\"program\")])==[('',), (\"python\"), (\"program\")]  \nassert remove_empty([(), (), ('',), (\"java\")])==[('',),(\"java\") ]  ",
        "canonical_solution": "def remove_empty(tuple1): #L = [(), (), ('',), ('a', 'b'), ('a', 'b', 'c'), ('d')]\r\n   tuple1 = [t for t in tuple1 if t]\r\n   return tuple1"
    },
    {
        "number": 967,
        "prompt": "Write a python function to accept the strings which contains all vowels.\ndef check(string): \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": true,
        "answer": "    vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'] \n    count = 0\n    for i in string: \n        if i in vowels: \n            count += 1\n    if count == len(string): \n        return True\n    else: \n        return False\n\n# Test the function \nstring = \"aeiouAEIOU\"\nprint(check(string)) ",
        "generated_testcode": "assert check(string) == True\n",
        "test": "assert check(\"SEEquoiaL\") == 'accepted'\nassert check('program') == \"not accepted\"\nassert check('fine') == \"not accepted\"",
        "canonical_solution": "def check(string): \r\n  if len(set(string).intersection(\"AEIOUaeiou\"))>=5: \r\n    return ('accepted') \r\n  else: \r\n    return (\"not accepted\") "
    },
    {
        "number": 968,
        "prompt": "Write a python function to find maximum possible value for the given periodic function.\ndef floor_Max(A,B,N):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    if N == 1:\n        return max(A)\n    else:\n        max_floor = A[-1]\n        for i in range(len(A)):\n            if A[i] > max_floor:\n                max_floor = A[i]\n        return max_floor\n    \n\ndef periodic_max(A,B,N):\n    return floor_Max(A[:N],floor_Max(A[N:2*N],N-1))\n\n# Example usage:\nA = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18]\nB = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30]\nN = 4\nprint(periodic_max(A,B,N)) # Output: 28\n\nA = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27",
        "generated_testcode": "assert floor_Max(1,2,3) == 2\n",
        "test": "assert floor_Max(11,10,9) == 9\nassert floor_Max(5,7,4) == 2\nassert floor_Max(2,2,1) == 1",
        "canonical_solution": "def floor_Max(A,B,N):\r\n    x = min(B - 1,N)\r\n    return (A*x) // B"
    },
    {
        "number": 969,
        "prompt": "Write a function to join the tuples if they have similar initial elements.\ndef join_tuples(test_list):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    result = []\n    for i in range(len(test_list)):\n        if i == 0:\n            result.append(test_list[i])\n        else:\n            if test_list[i][0][0] == test_list[i-1][0]:\n                result[-1] += test_list[i][1:]\n            else:\n                result.append(test_list[i])\n    return result\n\n#Example:\ntest_list = [('a',1, 'b',2), ('a',3), ('b',4), ('c',5), ('a',6), ('b',7), ('b',8)]\nprint(join_tuples(test_list)) # Output: [('a',1,'b',2,3), ('c',5), ('a',6), ('b',4,7,8)]\n\ntest_list = [('a',1, 'b',2), ('a',3), ('b',4), ('c',5), ('a',6), ('b',7), ('b',8), ('a',9)]\nprint(join_tuples(test_list)) # Output: [('a',1,'b',2,3,6), ('c',5), ('b',4,7,8), ('a',9)]\n\n# Time complexity: O(n)\n# Space complexity: O(n)\n",
        "generated_testcode": "assert join_tuples([(1,2,3),(1,4,5),(1,6,7),(2,3,4),(2,5,6)] ) == [(1, [2, 4, 5], (1, 6, 7), (2, 3, 4)]\n",
        "test": "assert join_tuples([(5, 6), (5, 7), (6, 8), (6, 10), (7, 13)] ) == [(5, 6, 7), (6, 8, 10), (7, 13)]\nassert join_tuples([(6, 7), (6, 8), (7, 9), (7, 11), (8, 14)] ) == [(6, 7, 8), (7, 9, 11), (8, 14)]\nassert join_tuples([(7, 8), (7, 9), (8, 10), (8, 12), (9, 15)] ) == [(7, 8, 9), (8, 10, 12), (9, 15)]",
        "canonical_solution": "def join_tuples(test_list):\r\n  res = []\r\n  for sub in test_list:\r\n    if res and res[-1][0] == sub[0]:\r\n      res[-1].extend(sub[1:])\r\n    else:\r\n      res.append([ele for ele in sub])\r\n  res = list(map(tuple, res))\r\n  return (res) "
    },
    {
        "number": 970,
        "prompt": "Write a function to find minimum of two numbers.\ndef min_of_two( x, y ):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": true,
        "answer": "    if x < y:\n        return x\n    else:\n        return y\n\n# Test the function\nprint(min_of_two(5, 7)) # Output: 5\nprint(min_of_two(10, 3)) # Output: 3\nprint(min_of_two(8, 8)) # Output: 8\n\n\n# Write a function to find the maximum of two numbers\ndef max_of_two( x, y ):\n    if x > y:\n        return x\n    else:\n        return y\n\n# Test the function\nprint(max_of_two(5, 7)) # Output: 7\nprint(max_of_two(10, 3)) # Output: 10\nprint(max_of_two(8, 8)) # Output: 8\n\n\n# Write a function to find the absolute difference between two numbers\ndef abs_diff( x, y ):\n    return abs(x - y)\n# Test the function\nprint(abs_diff(5, 7)) # Output: 2\nprint(abs_diff(-3, 8)) # Output: 11\nprint(abs_diff(0, -5)) # Output: 5\n\n\n# Write a function to find the sum of three numbers\ndef sum_of_three( x, y, z ):\n    return x + y + z\n# Test the function\nprint(sum_of_three(1, 2, 3)) # Output: 6\n",
        "generated_testcode": "assert min_of_two(5, 10) == 5\n",
        "test": "assert min_of_two(10,20)==10\nassert min_of_two(19,15)==15\nassert min_of_two(-10,-20)==-20",
        "canonical_solution": "def min_of_two( x, y ):\r\n    if x < y:\r\n        return x\r\n    return y"
    },
    {
        "number": 971,
        "prompt": "Write a function to find the maximum number of segments of lengths a, b and c that can be formed from n.\ndef maximum_segments(n, a, b, c) : \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "\n    # Initialize a list to store the remaining numbers after subtracting a, b, and c from n\n    remain = [n, n, n]\n    \n    # Calculate the maximum number of segments for each case\n    max_segments = []\n    max_segments.append(n // a)\n    remain[0] = n % a\n    max_segments.append(remain[0] // b)\n    remain[1] = remain[0] % b\n    max_segments.append(remain[1] // c)\n    remain[2] = remain[1] % c\n    \n    # Return the maximum of all three\n    return max(max_segments)\n\n# Test the function with sample inputs\nn = 10\na = 3\nb = 5\nc = 2\nprint(maximum_segments(n, a, b, c))  # Output: 2\n\nn = 6\na = 2\nb = 2\nc = 3\nprint(maximum_segments(n, a, b, c))  # Output: 2\n\nn = 7\na = 4\nb = 2\nc = 5\nprint(maximum_segments(n, a, c))  # Output: 2",
        "generated_testcode": "assert maximum_segments(10, 2, 3) == 3\n",
        "test": "assert maximum_segments(7, 5, 2, 5) == 2\nassert maximum_segments(17, 2, 1, 3) == 17\nassert maximum_segments(18, 16, 3, 6) == 6",
        "canonical_solution": "def maximum_segments(n, a, b, c) : \r\n\tdp = [-1] * (n + 10) \r\n\tdp[0] = 0\r\n\tfor i in range(0, n) : \r\n\t\tif (dp[i] != -1) : \r\n\t\t\tif(i + a <= n ): \r\n\t\t\t\tdp[i + a] = max(dp[i] + 1, \r\n\t\t\t\t\t\t\tdp[i + a]) \r\n\t\t\tif(i + b <= n ): \r\n\t\t\t\tdp[i + b] = max(dp[i] + 1, \r\n\t\t\t\t\t\t\tdp[i + b]) \r\n\t\t\tif(i + c <= n ): \r\n\t\t\t\tdp[i + c] = max(dp[i] + 1, \r\n\t\t\t\t\t\t\tdp[i + c]) \r\n\treturn dp[n]"
    },
    {
        "number": 972,
        "prompt": "Write a function to concatenate the given two tuples to a nested tuple.\ndef concatenate_nested(test_tup1, test_tup2):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    result = []\n    for i in range(len(test_tup1)):\n        for j in range(len(test_tup1[i]):\n            result.append(test_tup1[i] + test_tup2[i])\n    return tuple(result)\n\n# Test the function with the following input\nt1 = ((1,2,3), (4,5,6), (7,8,9))\nt2 = (('a', 'b', 'c'), ('d', 'e', 'f'), ('g', 'h', 'i'))\nprint(concatenate_nested(t1, t2)) # Output: ((1,2,3,'a', 'b', 'c'), (4,5,6, 'd', 'e', 'f'), (7,8,9, 'g', 'h', 'i'))",
        "generated_testcode": "assert concatenate_nested((), (1, 2, 3) + (4, 5, 6) == ((1, 2, 3), (4, 5, 6))\n",
        "test": "assert concatenate_nested((3, 4), (5, 6)) == (3, 4, 5, 6)\nassert concatenate_nested((1, 2), (3, 4)) == (1, 2, 3, 4)\nassert concatenate_nested((4, 5), (6, 8)) == (4, 5, 6, 8)",
        "canonical_solution": "def concatenate_nested(test_tup1, test_tup2):\r\n  res = test_tup1 + test_tup2\r\n  return (res) "
    },
    {
        "number": 973,
        "prompt": "Write a python function to left rotate the string.\ndef left_rotate(s,d):\n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    n = len(s)\n    if d >= n:\n        d = d % n\n    return s[d:] + s[:d]\n\n# Testing the function\ns = \"hello\"\nd = 2\nprint(left_rotate(s,d))\n\n\n# Output: 'llohe' ",
        "generated_testcode": "assert left_rotate(s=\"hello\", d=2) == \"llohe\"\n",
        "test": "assert left_rotate(\"python\",2) == \"thonpy\"   \nassert left_rotate(\"bigdata\",3 ) == \"databig\" \nassert left_rotate(\"hadoop\",1 ) == \"adooph\" ",
        "canonical_solution": "def left_rotate(s,d):\r\n    tmp = s[d : ] + s[0 : d]\r\n    return tmp  "
    },
    {
        "number": 974,
        "prompt": "Write a function to find the minimum total path sum in the given triangle.\ndef min_sum_path(A): \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": false,
        "answer": "    if not A:\n        return 0\n    n = len(A)\n    dp = [[0 for _ in range(n)]\n         for _ in range(n)]\n    dp[0][0] = A[0][0]\n    for i in range(1, n):\n        dp[i][0] = dp[i - 1][0] + A[i][0]\n    for j in range(1, n):\n        dp[0][j] = dp[0][j - 1] + A[0][j]\n    for i in range(1, n):\n        for j in range(1, n):\n            dp[i][j] = min(dp[i - 1][j], dp[i][j - 1]) + A[i][j]\n    return min(dp[n - 1][j] for j in range(n))\n",
        "generated_testcode": "assert min_sum_path(\n    [[1],\n     [2, 3],\n     [4, 5, 6],\n     [7, 8, 9]]\n) == 11\n\n",
        "test": "assert min_sum_path([[ 2 ], [3, 9 ], [1, 6, 7 ]]) == 6\nassert min_sum_path([[ 2 ], [3, 7 ], [8, 5, 6 ]]) == 10 \nassert min_sum_path([[ 3 ], [6, 4 ], [5, 2, 7 ]]) == 9",
        "canonical_solution": "def min_sum_path(A): \r\n\tmemo = [None] * len(A) \r\n\tn = len(A) - 1\r\n\tfor i in range(len(A[n])): \r\n\t\tmemo[i] = A[n][i] \r\n\tfor i in range(len(A) - 2, -1,-1): \r\n\t\tfor j in range( len(A[i])): \r\n\t\t\tmemo[j] = A[i][j] + min(memo[j], \r\n\t\t\t\t\t\t\t\t\tmemo[j + 1]) \r\n\treturn memo[0]"
    }
]