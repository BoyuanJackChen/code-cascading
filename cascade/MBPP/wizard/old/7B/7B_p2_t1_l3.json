[
    {
        "number": 1,
        "prompt": "Write a function to find the minimum cost path to reach (m, n) from (0, 0) for the given cost matrix cost[][] and a position (m, n) in cost[][].\ndef min_cost(cost, m, n): \n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    if m == 0 and n == 0: \n        return cost[0][0] \n\n    if not cost or m < 0 or n < 0: \n        return 0\n\n    # If the given cell is already computed \n    if cost[m][n][0] != -1: \n        return cost[m][n][0] \n\n    # If the given cell is the starting cell, then the cost is the value at that cell \n    if m == 0 and n == 0: \n        return cost[0][0][1] \n\n    # If the given cell is above the starting cell, then the cost is the cost of reaching \n    # the starting cell plus the minimum of the cost to reach the left cell and the cell diagonally above it \n    if n == 0: \n        min_cost = cost[m-1][0][1] + min_cost(cost, m-1, n) \n\n    # If the given cell is on the left of the starting cell, then the cost is the cost of \n    # reaching the starting cell plus the minimum of the cost to reach the cell above it \n    # and the cell diagonally left of it \n    elif m == 0: \n        min_cost = cost[0][n-1][1] + min_cost(cost, m, n-1) \n\n    # If the given cell is not the starting cell, then the cost is the minimum of the cost to \n    # reach the",
        "generated_testcode": "assert min_cost([[1, 2, 3], [4, 8, 2], [1, 5, 9]], 2, 2) == 7\n",
        "test": "assert min_cost([[1, 2, 3], [4, 8, 2], [1, 5, 3]], 2, 2) == 8\nassert min_cost([[2, 3, 4], [5, 9, 3], [2, 6, 4]], 2, 2) == 12\nassert min_cost([[3, 4, 5], [6, 10, 4], [3, 7, 5]], 2, 2) == 16",
        "canonical_solution": "R = 3\r\nC = 3\r\ndef min_cost(cost, m, n): \r\n\ttc = [[0 for x in range(C)] for x in range(R)] \r\n\ttc[0][0] = cost[0][0] \r\n\tfor i in range(1, m+1): \r\n\t\ttc[i][0] = tc[i-1][0] + cost[i][0] \r\n\tfor j in range(1, n+1): \r\n\t\ttc[0][j] = tc[0][j-1] + cost[0][j] \r\n\tfor i in range(1, m+1): \r\n\t\tfor j in range(1, n+1): \r\n\t\t\ttc[i][j] = min(tc[i-1][j-1], tc[i-1][j], tc[i][j-1]) + cost[i][j] \r\n\treturn tc[m][n]"
    },
    {
        "number": 2,
        "prompt": "Write a function to find the similar elements from the given two tuple lists.\ndef similar_elements(test_tup1, test_tup2):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    count = 0\n    result = []\n    for i in test_tup1:\n        if i in test_tup2:\n            result.append(i)\n    return result\n\n#test cases\ntest_tup1 = (1,2,3,4,5,6,7,8,9)\ntest_tup2 = (5,8,10,1,3,7,9,11)\nprint(similar_elements(test_tup1,test_tup2)) #[5, 8, 9, 3, 7]\n\ntest_tup1 = (1,2,3,4,5)\ntest_tup2 = (6,7,8,9,10)\nprint(similar_elements(test_tup1,test_tup2)) #[ ]\n\ntest_tup1 = (1,2,3,4,5)\ntest_tup2 = (5,6,7,8,9)\nprint(similar_elements(test_tup1,test_tup2)) #[5]\n\ntest_tup1 = (1,2,3,4,5,6,7,8,9)\ntest_tup2 = (1,5,2,3,4,6,7,8,9,10)\nprint(similar_elements(test_tup1,test_tup2)) #[1, 2, 3, 4, 6, 7, 8, ",
        "generated_testcode": "assert similar_elements(((1,2,3,4,5,6,7,8,9), (2,4,6,8,10,12,14,16)) == (2, 4, 6, 8)\n",
        "test": "assert similar_elements((3, 4, 5, 6),(5, 7, 4, 10)) == (4, 5)\nassert similar_elements((1, 2, 3, 4),(5, 4, 3, 7)) == (3, 4)\nassert similar_elements((11, 12, 14, 13),(17, 15, 14, 13)) == (13, 14)",
        "canonical_solution": "def similar_elements(test_tup1, test_tup2):\r\n  res = tuple(set(test_tup1) & set(test_tup2))\r\n  return (res) "
    },
    {
        "number": 3,
        "prompt": "Write a python function to identify non-prime numbers.\ndef is_not_prime(n):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": true,
        "answer": "    \"\"\"\n    This function takes an integer n as input and returns True if n is not prime, False otherwise.\n    \"\"\"\n    if n < 2:\n        return True\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            return True\n    return False\n\n\n\ndef find_non_primes(lower, upper):\n    \"\"\"\n    This function takes two integers, lower and upper, as input and returns a list of non-prime numbers between those two integers (inclusive).\n    \"\"\"\n    non_primes = []\n    for num in range(lower, upper+1):\n        if is_not_prime(num):\n            non_primes.append(num)\n    return non_primes\n\n\n\n# Test the function with some sample inputs\nprint(find_non_primes(10, 20))\nprint(find_non_primes(25, 50))\nprint(find_non_primes(1, 50))\nprint(find_non_primes(51, 1000))",
        "generated_testcode": "assert is_not_prime(1) == True\n",
        "test": "assert is_not_prime(2) == False\nassert is_not_prime(10) == True\nassert is_not_prime(35) == True",
        "canonical_solution": "import math\r\ndef is_not_prime(n):\r\n    result = False\r\n    for i in range(2,int(math.sqrt(n)) + 1):\r\n        if n % i == 0:\r\n            result = True\r\n    return result"
    },
    {
        "number": 4,
        "prompt": "Write a function to find the largest integers from a given list of numbers using heap queue algorithm.\ndef heap_queue_largest(nums,n):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    #create a min heap\n    heap = []\n    for i in range(n):\n        heappush(heap,nums[i])\n    \n    #pop out the smallest element from heap and push the largest element n-1 times\n    for i in range(n-1):\n        heappush(heap, -heappop(heap))\n    \n    #return the largest element\n    return -heappop(heap)\n\n#example usage\nnums = [1, 3, 5, 7, 2, 8, 9, 6]\nn = len(nums)\nprint(heap_queue_largest(nums,n)) #output: 9\n\n#time complexity: O(nlogn)\n#space complexity: O(n)\n",
        "generated_testcode": "assert heap_queue_largest([1,2,3,4,5,6,7,8,9], 3) == [9, 8, 7]\n",
        "test": "assert heap_queue_largest( [25, 35, 22, 85, 14, 65, 75, 22, 58],3)==[85, 75, 65] \nassert heap_queue_largest( [25, 35, 22, 85, 14, 65, 75, 22, 58],2)==[85, 75] \nassert heap_queue_largest( [25, 35, 22, 85, 14, 65, 75, 22, 58],5)==[85, 75, 65, 58, 35]",
        "canonical_solution": "import heapq as hq\r\ndef heap_queue_largest(nums,n):\r\n  largest_nums = hq.nlargest(n, nums)\r\n  return largest_nums"
    },
    {
        "number": 5,
        "prompt": "Write a function to find the number of ways to fill it with 2 x 1 dominoes for the given 3 x n board.\ndef count_ways(n): \n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    dp = [1] * n\n    for i in range(2, n+1): \n        for j in range(2, n):\n            dp[i] += dp[i-1] + dp[i-2]\n    return dp[n]\n\nn = 3\nprint(count_ways(n))",
        "generated_testcode": "assert count_ways(3) == 1\n",
        "test": "assert count_ways(2) == 3\nassert count_ways(8) == 153\nassert count_ways(12) == 2131",
        "canonical_solution": "def count_ways(n): \r\n\tA = [0] * (n + 1) \r\n\tB = [0] * (n + 1) \r\n\tA[0] = 1\r\n\tA[1] = 0\r\n\tB[0] = 0\r\n\tB[1] = 1\r\n\tfor i in range(2, n+1): \r\n\t\tA[i] = A[i - 2] + 2 * B[i - 1] \r\n\t\tB[i] = A[i - 1] + B[i - 2] \r\n\treturn A[n] "
    },
    {
        "number": 6,
        "prompt": "Write a python function to check whether the two numbers differ at one bit position only or not.\ndef is_Power_Of_Two (x): \n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    return bin(x).count('1') == 1\n\ndef differ_by_one_bit(x, y):\n    # Check if both numbers are power of two\n    if not (is_Power_Of_Two(x) and is_Power_Of_Two(y)):\n        return False\n    # Check if the numbers differ at one bit position\n    return (bin(x^y).count('1') == 1)\n\n# Test the function with some inputs\nprint(differ_by_one_bit(5, 9)) # True \nprint(differ_by_one_bit(5, 15)) # False \nprint(differ_by_one_bit(2, 3)) # True\nprint(differ_by_one_bit(7, 13)) # True\nprint(differ_by_one_bit(6, 8)) # False \nprint(differ_by_one_bit(10, 12)) # False ",
        "generated_testcode": "assert is_Power_Of_Two(4) == True\n",
        "test": "assert differ_At_One_Bit_Pos(13,9) == True\nassert differ_At_One_Bit_Pos(15,8) == False\nassert differ_At_One_Bit_Pos(2,4) == False",
        "canonical_solution": "def is_Power_Of_Two (x): \r\n    return x and (not(x & (x - 1))) \r\ndef differ_At_One_Bit_Pos(a,b): \r\n    return is_Power_Of_Two(a ^ b)"
    },
    {
        "number": 7,
        "prompt": "Write a function to find all words which are at least 4 characters long in a string by using regex.\ndef find_char_long(text):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": true,
        "answer": "    import re\n    regex = r'\\b\\w{4,}\\b'\n    return re.findall(regex, text)\n\n# test the function\ntext = \"This is a sample string with a few words and some longer ones like cat and dog and also longer ones like elephant and lion.\"\nprint(find_char_long(text))\n# Output: ['words', 'longer', 'ones', 'elephant', 'lion']\n\ntext = \"We also need to find words with digits and with punctuation, like one2one and some3words and cat123.\"\nprint(find_char_long(text))\n# Output: ['words', 'digits', 'punctuation', 'some3words']",
        "generated_testcode": "assert find_char_long(\"The quick brown fox jumps over the lazy dog\") == ['quick', 'brown', 'jumps', 'over', 'lazy']\n",
        "test": "assert find_char_long('Please move back to stream') == ['Please', 'move', 'back', 'stream']\nassert find_char_long('Jing Eco and Tech') == ['Jing', 'Tech']\nassert find_char_long('Jhingai wulu road Zone 3') == ['Jhingai', 'wulu', 'road', 'Zone']",
        "canonical_solution": "import re\r\ndef find_char_long(text):\r\n  return (re.findall(r\"\\b\\w{4,}\\b\", text))"
    },
    {
        "number": 8,
        "prompt": "Write a function to find squares of individual elements in a list using lambda function.\ndef square_nums(nums):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    return list(map(lambda x: x**2, nums))\n\n\nprint(square_nums([1,2,3,4,5,6])) # Output: [1, 4, 9, 16, 25]\n\n\n# Write a lambda function that takes a list of numbers and returns a new list containing only the even numbers\ndef even_nums(nums):\n    return list(filter(lambda x: x%2 == 0, nums))\n\n\nprint(even_nums([1,2,3,4,5,6,7,8,9,10]) # Output: [2, 4, 6, 8, 10]\n\n\n# Write a lambda function that takes a list of strings and returns a new list containing only the strings that start with 'a'\ndef a_strings(strings):\n    return list(filter(lambda x: x.startswith('a'), strings)\n\n\nprint(a_strings(['apple', 'banana', 'cherry', 'dog', 'ant', 'applepie']) # Output: ['apple', 'applepie']\n\n\n# Write a lambda function that takes a list of tuples and returns a new list containing only the tuples with even elements\ndef even_tuples(tuples):\n    return list(filter(lambda x: x[0]%2 == 0 or x[1]%2 == 0, tuples)\n\n\nprint(even_tuples([(1,2), (3,4), (5",
        "generated_testcode": "assert square_nums([1, 2, 3, 4, 5]) == [1, 4, 9, 16, 25]\n",
        "test": "assert square_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]\nassert square_nums([10,20,30])==([100,400,900])\nassert square_nums([12,15])==([144,225])",
        "canonical_solution": "def square_nums(nums):\r\n square_nums = list(map(lambda x: x ** 2, nums))\r\n return square_nums"
    },
    {
        "number": 9,
        "prompt": "Write a python function to find the minimum number of rotations required to get the same string.\ndef find_Rotations(str): \n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    n = len(str) \n    # Find the minimum number of rotations needed to be made \n    for i in range(n): \n        if str[i] == str[n-1]: \n            return i \n    # If not found, then add one more rotation \n    return n ",
        "generated_testcode": "assert find_Rotations(\"waterbottle\") == 7\n",
        "test": "assert find_Rotations(\"aaaa\") == 1\nassert find_Rotations(\"ab\") == 2\nassert find_Rotations(\"abc\") == 3",
        "canonical_solution": "def find_Rotations(str): \r\n    tmp = str + str\r\n    n = len(str) \r\n    for i in range(1,n + 1): \r\n        substring = tmp[i: i+n] \r\n        if (str == substring): \r\n            return i \r\n    return n "
    },
    {
        "number": 10,
        "prompt": "Write a function to get the n smallest items from a dataset.\ndef small_nnum(list1,n):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    list1.sort()\n    return list1[:n]\n\nlist1 = [3,7,2,9,1,5,4,8,6]\nn = 3\nprint(small_nnum(list1,n)) #Output: [1,2,3]\n\n\n#Alternative solution using the heapq module\nimport heapq\n\ndef small_nnum(list1,n):\n    heapq.heapify(list1)\n    return [heapq.nsmallest(n,list1)]\n\nlist1 = [3,7,2,9,1,5,4,8,6]\nn = 3\nprint(small_nnum(list1,n)) #Output: [1,2,3]",
        "generated_testcode": "assert small_nnum([1,2,3,4,5,6,7,8,9,10],3) == [1,2,3]\n",
        "test": "assert small_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],2)==[10,20]\nassert small_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],5)==[10,20,20,40,50]\nassert small_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],3)==[10,20,20]",
        "canonical_solution": "import heapq\r\ndef small_nnum(list1,n):\r\n  smallest=heapq.nsmallest(n,list1)\r\n  return smallest"
    },
    {
        "number": 11,
        "prompt": "Write a python function to remove first and last occurrence of a given character from the string.\ndef remove_Occ(s,ch): \n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    s = list(s) \n    first = 0\n    last = len(s)-1\n    for i in range(len(s)): \n        if s[i] == ch: \n            if i == 0 or i == len(s)-1: \n                s.pop(i) \n            elif s[i-1] == ch or s[i+1] == ch: \n                s.pop(i) \n            else: \n                continue\n    return ''.join(s) ",
        "generated_testcode": "assert remove_Occ(\"hello world\", \"l\") == \"he wrd\"\n",
        "test": "assert remove_Occ(\"hello\",\"l\") == \"heo\"\nassert remove_Occ(\"abcda\",\"a\") == \"bcd\"\nassert remove_Occ(\"PHP\",\"P\") == \"H\"",
        "canonical_solution": "def remove_Occ(s,ch): \r\n    for i in range(len(s)): \r\n        if (s[i] == ch): \r\n            s = s[0 : i] + s[i + 1:] \r\n            break\r\n    for i in range(len(s) - 1,-1,-1):  \r\n        if (s[i] == ch): \r\n            s = s[0 : i] + s[i + 1:] \r\n            break\r\n    return s "
    },
    {
        "number": 12,
        "prompt": "Write a function to sort a given matrix in ascending order according to the sum of its rows.\ndef sort_matrix(M):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    # Your code here\n    def row_sum(matrix):\n        return [sum(matrix[i]) for i in range(len(matrix))]\n\n    M.sort(key=row_sum)\n    return M\n\n# Test the function with a sample matrix\nmatrix = [[4, 2, 1], [3, 1, 4], [1, 3, 5], [1, 2, 9], [6, 5, 2]]\nprint(sort_matrix(matrix))\n# Output: [[1, 2, 9], [3, 1, 4], [1, 3, 5], [4, 2, 1], [6, 5, 2]] ",
        "generated_testcode": "assert sort_matrix(\n    [[1, 2, 3],\n     [4, 5, 6],\n     [7, 8, 9]]\n) == [[1, 2, 3],\n      [4, 5, 6],\n      [7, 8, 9]]\n\n",
        "test": "assert sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]])==[[1, 1, 1], [1, 2, 3], [2, 4, 5]]\nassert sort_matrix([[1, 2, 3], [-2, 4, -5], [1, -1, 1]])==[[-2, 4, -5], [1, -1, 1], [1, 2, 3]]\nassert sort_matrix([[5,8,9],[6,4,3],[2,1,4]])==[[2, 1, 4], [6, 4, 3], [5, 8, 9]]",
        "canonical_solution": "def sort_matrix(M):\r\n    result = sorted(M, key=sum)\r\n    return result"
    },
    {
        "number": 13,
        "prompt": "Write a function to count the most common words in a dictionary.\ndef count_common(words):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    # create a dictionary to store the count of each word\n    word_count = {}\n    for word in words:\n        if word in word_count:\n            word_count[word] += 1\n        else:\n            word_count[word] = 1\n    # find the max count\n    max_count = max(word_count.values())\n    # create a list of words with the same count as the max_count\n    result = []\n    for word, count in word_count.items():\n        if count == max_count:\n            result.append(word)\n    # sort the list in descending order by frequency\n    result.sort(key=lambda x: word_count[x], reverse=True)\n    return result\n\n\n# Example usage:\nwords = [\"apple\", \"banana\", \"apple\", \"orange\", \"banana\", \"apple\", \"grape\", \"banana\", \"orange\", \"banana\"]\nprint(count_common(words))  # [\"banana\", \"apple\"]\n\nwords = [\"apple\", \"banana\", \"orange\", \"apple\", \"grape\", \"banana\", \"orange\", \"orange\", \"apple\"]\nprint(count_common(words))  # [\"apple\", \"orange\"]\n\nwords = [\"apple\", \"banana\", \"orange\", \"grape\", \"grapefruit\", \"grape\", \"grape\", \"grape\"]\nprint(count_common(words))  # [\"grape\"]\n\n\n# Note: The",
        "generated_testcode": "assert count_common([\"apple\", \"banana\", \"apple\", \"orange\", \"banana\", \"apple\", \"banana\", \"apple\", \"orange\", \"banana\", \"apple\", \"orange\", \"banana\", \"apple\", \"orange\", \"banana\", \"apple\", \"orange\", \"banana\", \"apple\", \"orange\", \"banana\", \"apple\", \"orange\", \"banana\", \"apple\", \"orange\", \"banana\", \"apple\", \"orange\", \"banana\", \"apple\", \"orange\", \"banana\", \"apple\", \"orange\", \"banana\", \"apple\", \"orange\", \"banana\", \"apple\", \"orange\", \"banana\", \"apple\", \"orange\", \"banana\", \"apple\", \"orange\", \"banana\", \"apple\", \"orange\", \"banana\", \"apple\", \"orange\", \"banana\", \"apple\", \"orange\", \"banana\", \"apple\", \"orange\", \"banana\", \"apple\", \"orange\", \"banana\", \"apple\", \"orange\", \"banana\", \"apple\", \"orange\", \"banana\", \"apple\", \"orange\", \"banana\", \"apple\", \"orange\", \"banana\", \"apple\", \"orange\", \"banana\", \"apple\", \"orange\"",
        "test": "assert count_common(['red','green','black','pink','black','white','black','eyes','white','black','orange','pink','pink','red','red','white','orange','white',\"black\",'pink','green','green','pink','green','pink','white','orange',\"orange\",'red']) == [('pink', 6), ('black', 5), ('white', 5), ('red', 4)]\nassert count_common(['one', 'two', 'three', 'four', 'five', 'one', 'two', 'one', 'three', 'one']) == [('one', 4), ('two', 2), ('three', 2), ('four', 1)]\nassert count_common(['Facebook', 'Apple', 'Amazon', 'Netflix', 'Google', 'Apple', 'Netflix', 'Amazon']) == [('Apple', 2), ('Amazon', 2), ('Netflix', 2), ('Facebook', 1)]",
        "canonical_solution": "from collections import Counter\r\ndef count_common(words):\r\n  word_counts = Counter(words)\r\n  top_four = word_counts.most_common(4)\r\n  return (top_four)\r\n"
    },
    {
        "number": 14,
        "prompt": "Write a python function to find the volume of a triangular prism.\ndef find_Volume(l,b,h) : \n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    # calculate the volume of the triangular prism\n    v = 1/2 * l * b * h\n    return v\n\n# Test the function with sample inputs\nl = 5\nb = 3\nh = 8\nprint(find_Volume(l,b,h)) # Output: 15.0\n\n\nl = 7\nb = 4\nh = 10\nprint(find_Volume(l,b,h)) # Output: 28.0\n\n\nl = 12\nb = 6\nh = 15\nprint(find_Volume(l,b,h)) # Output: 90.0\n\n\nl = 2\nb = 1\nh = 8\nprint(find_Volume(l,b,h)) # Output: 8.0\n\n",
        "generated_testcode": "assert find_Volume(3,4,5) == 6\n",
        "test": "assert find_Volume(10,8,6) == 240\nassert find_Volume(3,2,2) == 6\nassert find_Volume(1,2,1) == 1",
        "canonical_solution": "def find_Volume(l,b,h) : \r\n    return ((l * b * h) / 2) "
    },
    {
        "number": 15,
        "prompt": "Write a function to split a string at lowercase letters.\ndef split_lowerstring(text):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    res = []\n    i = 0\n    for j in range(len(text)):\n        if text[j].islower():\n            res.append(text[i:j])\n            i = j\n    res.append(text[i:])\n    return res\n\n\nprint(split_lowerstring(\"HelloWorld\")) # ['Hel', 'lo', 'Wor', 'ld']\nprint(split_lowerstring(\"AaBbCc\")) # ['A', 'a', 'Bb', 'Cc']\nprint(split_lowerstring(\"aabbcc\")) # ['a', 'aabb', 'cc']\n\n# Using regex\ndef split_lowerstring(text):\n    return re.findall('[A-Z]*[a-z]*', text)\n\nprint(split_lowerstring(\"HelloWorld\")) # ['H', 'ello', 'W', 'or', 'ld']\nprint(split_lowerstring(\"AaBbCc\")) # ['A', 'a', 'Bb', 'Cc']\nprint(split_lowerstring(\"aabbcc\")) # ['a', 'aabb', 'c']\n\n# Using re.split\ndef split_lowerstring(text):\n    return re.split('[a-z]+', text)\n\nprint(split_lowerstring(\"HelloWorld\")) # ['H', 'l', 'l', 'W', 'o', 'r', 'ld']\nprint(split_lowerstring(\"AaBbCc\")) # ['A', 'Bb', 'Cc",
        "generated_testcode": "assert split_lowerstring(\"HelloWorld\") == [\"H\", \"elloW\", \"orl\", \"d\"]\n",
        "test": "assert split_lowerstring(\"AbCd\")==['bC','d']\nassert split_lowerstring(\"Python\")==['y', 't', 'h', 'o', 'n']\nassert split_lowerstring(\"Programming\")==['r', 'o', 'g', 'r', 'a', 'm', 'm', 'i', 'n', 'g']",
        "canonical_solution": "import re\r\ndef split_lowerstring(text):\r\n return (re.findall('[a-z][^a-z]*', text))"
    },
    {
        "number": 16,
        "prompt": "Write a function to find sequences of lowercase letters joined with an underscore.\ndef text_lowercase_underscore(text):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": true,
        "answer": "    result = []\n    current_sequence = []\n    for char in text:\n        if char.islower():\n            current_sequence.append(char)\n        else:\n            if current_sequence:\n                result.append(\"\".join(current_sequence))\n                current_sequence = []\n    if current_sequence:\n        result.append(\"\".join(current_sequence))\n    return \"_\".join(result)\n\n\n# Test the function with a sample input\ntext = \"He_ll_o_Wo_rld_123_!\"\nprint(text_lowercase_underscore(text))  # Output: \"hello_world\"\n\n# Test the function with another sample input\ntext = \"A_BcD_ef_G_Hijk_Lmn_OpqRs\"\nprint(text_lowercase_underscore(text))  # Output: \"abcdef_ghijk\"\n\n# Test the function with another sample input\ntext = \"aBcDeF_gHiJkL_mNoPqr_sT_uVwX\"\nprint(text_lowercase_underscore(text))  # Output: \"abcdefghijkl_mnopqr_st\"\n# Test the function with another sample input\ntext = \"1a2b3c4d5e6f7g8h9i\"\nprint(text_lowercase_underscore(text))  # Output: \"\"\n",
        "generated_testcode": "assert text_lowercase_underscore(\"hello_world\") == \"hello_world\"\n",
        "test": "assert text_lowercase_underscore(\"aab_cbbbc\")==('Found a match!')\nassert text_lowercase_underscore(\"aab_Abbbc\")==('Not matched!')\nassert text_lowercase_underscore(\"Aaab_abbbc\")==('Not matched!')",
        "canonical_solution": "import re\r\ndef text_lowercase_underscore(text):\r\n        patterns = '^[a-z]+_[a-z]+$'\r\n        if re.search(patterns,  text):\r\n                return 'Found a match!'\r\n        else:\r\n                return('Not matched!')"
    },
    {
        "number": 17,
        "prompt": "Write a function to find the perimeter of a square.\ndef square_perimeter(a):\n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    return a * 4\n\n# Test the function with an example input\nprint(square_perimeter(5)) ",
        "generated_testcode": "assert square_perimeter(4) == 16\n",
        "test": "assert square_perimeter(10)==40\nassert square_perimeter(5)==20\nassert square_perimeter(4)==16",
        "canonical_solution": "def square_perimeter(a):\r\n  perimeter=4*a\r\n  return perimeter"
    },
    {
        "number": 18,
        "prompt": "Write a function to remove characters from the first string which are present in the second string.\ndef str_to_list(string): \n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    return list(string)\n\ndef remove_chars(s1, s2):\n    s1_list = str_to_list(s1)\n    s2_list = str_to_list(s2)\n    for char in s2_list:\n        while char in s1_list:\n            s1_list.remove(char)\n    return ''.join(s1_list)\n\n# Test the function\ns1 = \"hello world\"\ns2 = \"lo w\"\nprint(remove_chars(s1, s2)) # Output: \"heer\" ",
        "generated_testcode": "assert str_to_list(\"hello world\", \"lo\") == \"hel wrd\"\n",
        "test": "assert remove_dirty_chars(\"probasscurve\", \"pros\") == 'bacuve'\nassert remove_dirty_chars(\"digitalindia\", \"talent\") == 'digiidi'\nassert remove_dirty_chars(\"exoticmiles\", \"toxic\") == 'emles' ",
        "canonical_solution": "NO_OF_CHARS = 256\r\ndef str_to_list(string): \r\n\ttemp = [] \r\n\tfor x in string: \r\n\t\ttemp.append(x) \r\n\treturn temp \r\ndef lst_to_string(List): \r\n\treturn ''.join(List) \r\ndef get_char_count_array(string): \r\n\tcount = [0] * NO_OF_CHARS \r\n\tfor i in string: \r\n\t\tcount[ord(i)] += 1\r\n\treturn count \r\ndef remove_dirty_chars(string, second_string): \r\n\tcount = get_char_count_array(second_string) \r\n\tip_ind = 0\r\n\tres_ind = 0\r\n\ttemp = '' \r\n\tstr_list = str_to_list(string) \r\n\twhile ip_ind != len(str_list): \r\n\t\ttemp = str_list[ip_ind] \r\n\t\tif count[ord(temp)] == 0: \r\n\t\t\tstr_list[res_ind] = str_list[ip_ind] \r\n\t\t\tres_ind += 1\r\n\t\tip_ind+=1\r\n\treturn lst_to_string(str_list[0:res_ind]) "
    },
    {
        "number": 19,
        "prompt": "Write a function to find whether a given array of integers contains any duplicate element.\ndef test_duplicate(arraynums):\n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    \"\"\"\n    :type nums: List[int]\n    :rtype: bool\n    \"\"\"\n    # Create a dictionary to store the unique elements and their frequency\n    freq_dict = {}\n    for num in arraynums:\n        if num in freq_dict:\n            freq_dict[num] += 1\n        else:\n            freq_dict[num] = 1\n    # Loop through the dictionary to check for duplicates\n    for num, freq in freq_dict.items():\n        if freq > 1:\n            return True\n    return False\n\n\n# Test the function with sample input\nnums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 1, 2]\nprint(test_duplicate(nums)) # True\n",
        "generated_testcode": "assert test_duplicate([1,2,3,4,5,6,7,8,9]) == False\n",
        "test": "assert test_duplicate(([1,2,3,4,5]))==False\nassert test_duplicate(([1,2,3,4, 4]))==True\nassert test_duplicate([1,1,2,2,3,3,4,4,5])==True",
        "canonical_solution": "def test_duplicate(arraynums):\r\n    nums_set = set(arraynums)    \r\n    return len(arraynums) != len(nums_set)     "
    },
    {
        "number": 20,
        "prompt": "Write a function to check if the given number is woodball or not.\ndef is_woodall(x): \n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    return x%10 in [0, 5, 7, 10]\n\n# Test cases\nprint(is_woodall(125)) # True\nprint(is_woodall(777)) # True\nprint(is_woodall(101)) # False\nprint(is_woodall(152)) # False\nprint(is_woodall(100)) # True\nprint(is_woodall(345)) # False\nprint(is_woodall(1100)) # True\nprint(is_woodall(230)) # False\nprint(is_woodall(97)) # False\n",
        "generated_testcode": "assert is_woodall(15) == True\n",
        "test": "assert is_woodall(383) == True\nassert is_woodall(254) == False\nassert is_woodall(200) == False",
        "canonical_solution": "def is_woodall(x): \r\n\tif (x % 2 == 0): \r\n\t\treturn False\r\n\tif (x == 1): \r\n\t\treturn True\r\n\tx = x + 1 \r\n\tp = 0\r\n\twhile (x % 2 == 0): \r\n\t\tx = x/2\r\n\t\tp = p + 1\r\n\t\tif (p == x): \r\n\t\t\treturn True\r\n\treturn False"
    },
    {
        "number": 21,
        "prompt": "Write a function to find m number of multiples of n.\ndef multiples_of_num(m,n): \n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    count = 0\n    for i in range(1, 10000000000):\n        if i % n == 0:\n            count += 1\n        if count == m:\n            return i\n    return None\n\n# Test the function with m=3 and n=5\nprint(multiples_of_num(3,5)) # Output: 30\n# Test the function with m=7 and n=10\nprint(multiples_of_num(7,10)) # Output: 70\n# Test the function with m=1 and n=2\nprint(multiples_of_num(1,2)) # Output: 2\n# Test the function with m=8 and n=13\nprint(multiples_of_num(8,13)) # Output: None (no number can be found) ",
        "generated_testcode": "assert multiples_of_num(5, 2) == [0, 2, 4, 6, 8, 10, 12]\n",
        "test": "assert multiples_of_num(4,3)== [3,6,9,12]\nassert multiples_of_num(2,5)== [5,10]\nassert multiples_of_num(9,2)== [2,4,6,8,10,12,14,16,18]",
        "canonical_solution": "def multiples_of_num(m,n): \r\n    multiples_of_num= list(range(n,(m+1)*n, n)) \r\n    return list(multiples_of_num)"
    },
    {
        "number": 22,
        "prompt": "Write a function to find the first duplicate element in a given array of integers.\ndef find_first_duplicate(nums):\n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    seen = set()\n    for num in nums:\n        if num in seen:\n            return num\n        else:\n            seen.add(num)\n    return -1\n\n# Test cases\nprint(find_first_duplicate([1, 2, 3, 4, 5, 2, 6, 7, 8, 9])) # Output: 2\nprint(find_first_duplicate([1, 2, 3, 4, 5, 6, 7, 8, 9])) # Output: -1\nprint(find_first_duplicate([1, 2, 3, 4, 5, 6, 7, 8, 9, 1])) # Output: 1\n\n\n# Time complexity: O(n)\n# Space complexity: O(n)\n# We iterate through the array once, so the time complexity is O(n). Since we use a set to keep track of seen elements, the space complexity is also O(n)\n",
        "generated_testcode": "assert find_first_duplicate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5]) == 1\n",
        "test": "assert find_first_duplicate(([1, 2, 3, 4, 4, 5]))==4\nassert find_first_duplicate([1, 2, 3, 4])==-1\nassert find_first_duplicate([1, 1, 2, 3, 3, 2, 2])==1",
        "canonical_solution": "def find_first_duplicate(nums):\r\n    num_set = set()\r\n    no_duplicate = -1\r\n\r\n    for i in range(len(nums)):\r\n\r\n        if nums[i] in num_set:\r\n            return nums[i]\r\n        else:\r\n            num_set.add(nums[i])\r\n\r\n    return no_duplicate"
    },
    {
        "number": 23,
        "prompt": "Write a python function to find the maximum sum of elements of list in a list of lists.\ndef maximum_Sum(list1): \n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    max_sum = 0\n    for sublist in list1:\n        sublist_sum = sum(sublist)\n        if sublist_sum > max_sum:\n            max_sum = sublist_sum\n    return max_sum\n\n# Testing the function\nlist1 = [[1, 2, 3, 4], [5, 6, 7], [8, 9, 10], [1, 2, 3, 4, 5, 6, 7, 8]]\nprint(maximum_Sum(list1))  # Output: 33\n\nlist2 = [[-1, -2, -3], [-5, -6, -7], [-8, -9, -10], [-1, -2, -3, -4, -5, -6, -7, -8]]\nprint(maximum_Sum(list2))  # Output: -1\n\nlist3 = [[1, 2], [3, 4], [5, 6, 7], [8, 9, 10], [1, 2, 3, 4, 5, 6, 7, 8]]\nprint(maximum_Sum(list3))  # Output: 33\n\nlist4 = [[-1, -2], [-3, -4], [-5, -6, -7], [-8, -9, -10], [-1, -2, -3, -4, -5, -6, -7",
        "generated_testcode": "assert maximum_Sum([[1,2,3],[4,5,6],[7,8,9]) == 25\n",
        "test": "assert maximum_Sum([[1,2,3],[4,5,6],[10,11,12],[7,8,9]]) == 33\nassert maximum_Sum([[0,1,1],[1,1,2],[3,2,1]]) == 6\nassert maximum_Sum([[0,1,3],[1,2,1],[9,8,2],[0,1,0],[6,4,8]]) == 19",
        "canonical_solution": "def maximum_Sum(list1): \r\n    maxi = -100000\r\n    for x in list1: \r\n        sum = 0 \r\n        for y in x: \r\n            sum+= y      \r\n        maxi = max(sum,maxi)     \r\n    return maxi "
    },
    {
        "number": 24,
        "prompt": "Write a function to convert the given binary number to its decimal equivalent.\ndef binary_to_decimal(binary): \n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    decimal = 0 \n    base = 1\n    for digit in binary: \n        decimal += int(digit) * base \n        base *= 2\n    return decimal \n\n# Test the function \nbinary = input(\"Enter a binary number: \") \nprint(\"The decimal equivalent is: \", binary_to_decimal(binary)) ",
        "generated_testcode": "assert binary_to_decimal(\"1101\") == 5\n",
        "test": "assert binary_to_decimal(100) == 4\nassert binary_to_decimal(1011) == 11\nassert binary_to_decimal(1101101) == 109",
        "canonical_solution": "def binary_to_decimal(binary): \r\n    binary1 = binary \r\n    decimal, i, n = 0, 0, 0\r\n    while(binary != 0): \r\n        dec = binary % 10\r\n        decimal = decimal + dec * pow(2, i) \r\n        binary = binary//10\r\n        i += 1\r\n    return (decimal)"
    },
    {
        "number": 25,
        "prompt": "Write a python function to find the product of non-repeated elements in a given array.\ndef find_Product(arr,n): \n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    # creating an empty dictionary to store the frequency of elements \n    freq = {} \n    for i in range(n): \n        if arr[i] in freq: \n            freq[arr[i]] += 1\n        else: \n            freq[arr[i]] = 1\n\n    # finding the product of non-repeated elements in the array \n    product = 1\n    for i in range(n): \n        if freq[arr[i]] == 1: \n            product *= arr[i] \n\n    return product ",
        "generated_testcode": "assert find_Product([1,2,3,4,5,6,7,8,9,10], 6) == 362888000\n",
        "test": "assert find_Product([1,1,2,3],4) == 6\nassert find_Product([1,2,3,1,1],5) == 6\nassert find_Product([1,1,4,5,6],5) == 120",
        "canonical_solution": "def find_Product(arr,n): \r\n    arr.sort() \r\n    prod = 1\r\n    for i in range(0,n,1): \r\n        if (arr[i - 1] != arr[i]): \r\n            prod = prod * arr[i] \r\n    return prod; "
    },
    {
        "number": 26,
        "prompt": "Write a function to check if the given tuple list has all k elements.\ndef check_k_elements(test_list, K):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    return len(test_list) == K\n\n\n# Test cases\nprint(check_k_elements([(1,2,3,4,5], 4)) # True\nprint(check_k_elements([1,2,3,4], 5) # False\nprint(check_k_elements([1,2,3,4,5,6,7], 5) # True\nprint(check_k_elements([1,2], 3) # False\nprint(check_k_elements([1,2,3,4,5,6,7,8,9], 4) # False",
        "generated_testcode": "assert check_k_elements([(1,2,3,4,5,6,7,8,9], 3) == True\n",
        "test": "assert check_k_elements([(4, 4), (4, 4, 4), (4, 4), (4, 4, 4, 4), (4, )], 4) == True\nassert check_k_elements([(7, 7, 7), (7, 7)], 7) == True\nassert check_k_elements([(9, 9), (9, 9, 9, 9)], 7) == False",
        "canonical_solution": "def check_k_elements(test_list, K):\r\n  res = True\r\n  for tup in test_list:\r\n    for ele in tup:\r\n      if ele != K:\r\n        res = False\r\n  return (res) "
    },
    {
        "number": 27,
        "prompt": "Write a python function to remove all digits from a list of strings.\ndef remove(list): \n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    new_list = []\n    for i in range(len(list)):\n        new_list.append(''.join([char for char in list[i] if not char.isdigit()]))\n    return new_list\n\n\n# Test the function\ntest_list = [\"hello123\", \"world!\", \"45\", \"python3\", \"9\"]\nprint(remove(test_list)) # ['hellowrld', '!', 'pythn', ''] ",
        "generated_testcode": "assert remove(['hello123', 'world45', 'python67'] == ['hello', 'world', 'python'])\n",
        "test": "assert remove(['4words', '3letters', '4digits']) == ['words', 'letters', 'digits']\nassert remove(['28Jan','12Jan','11Jan']) == ['Jan','Jan','Jan']\nassert remove(['wonder1','wonder2','wonder3']) == ['wonder','wonder','wonder']",
        "canonical_solution": "import re  \r\ndef remove(list): \r\n    pattern = '[0-9]'\r\n    list = [re.sub(pattern, '', i) for i in list] \r\n    return list"
    },
    {
        "number": 28,
        "prompt": "Write a python function to find binomial co-efficient.\ndef binomial_Coeff(n,k): \n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": " \n    if k > n: \n        return 0\n    if k == n or k == 0: \n        return 1\n    return (binomial_Coeff(n-1, k-1) + binomial_Ceff(n-1, k)) ",
        "generated_testcode": "assert binomial_Coeff(5,2) == 10\n",
        "test": "assert binomial_Coeff(5,2) == 10\nassert binomial_Coeff(4,3) == 4\nassert binomial_Coeff(3,2) == 3",
        "canonical_solution": "def binomial_Coeff(n,k): \r\n    if k > n : \r\n       return 0\r\n    if k==0 or k ==n : \r\n        return 1 \r\n    return binomial_Coeff(n-1,k-1) + binomial_Coeff(n-1,k) "
    },
    {
        "number": 29,
        "prompt": "Write a python function to find the element occurring odd number of times.\ndef get_Odd_Occurrence(arr,arr_size):   \n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": true,
        "answer": "    count = 0\n    for i in range(0, arr_size):\n        temp = 0\n        for j in range(0, arr_size):\n            if arr[i] == arr[j]:\n                temp += 1\n        if temp % 2 != 0:\n            count += 1\n    return arr[i]\n\n\n# Testing the function\narr = [1, 2, 3, 2, 4, 5, 3, 6, 4, 7, 8, 7, 6, 4]\narr_size = len(arr)\nprint(get_Odd_Occurrence(arr,arr_size)) # Output: 5\n\n\n# Sample Input:\n# arr = [1, 2, 3, 2, 4, 5, 3, 6, 4, 7, 8, 7, 6, 4, 8]\n# arr_size = 9\n# Output: 1 ",
        "generated_testcode": "assert get_Odd_Occurrence([1,2,3,4,5,6,7,7,8,6,5,4,3,2,1] , 9) == 8\n",
        "test": "assert get_Odd_Occurrence([1,2,3,1,2,3,1],7) == 1\nassert get_Odd_Occurrence([1,2,3,2,3,1,3],7) == 3\nassert get_Odd_Occurrence([2,3,5,4,5,2,4,3,5,2,4,4,2],13) == 5",
        "canonical_solution": "def get_Odd_Occurrence(arr,arr_size):   \r\n    for i in range(0,arr_size): \r\n        count = 0\r\n        for j in range(0,arr_size): \r\n            if arr[i] == arr[j]: \r\n                count+=1     \r\n        if (count % 2 != 0): \r\n            return arr[i]     \r\n    return -1"
    },
    {
        "number": 30,
        "prompt": "Write a python function to count all the substrings starting and ending with same characters.\ndef check_Equality(s): \n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    count = 0\n    n = len(s)\n    for i in range(n):\n        for j in range(i, n):\n            if s[i] == s[j]:\n                count += 1\n    return count\n\nprint(check_Equality(\"aba\"))\nprint(check_Equality(\"abba\"))\nprint(check_Equality(\"abcd\"))\nprint(check_Equality(\"a\"))\nprint(check_Equality(\"aab\"))\nprint(check_Equality(\"abc\"))\n\n#Output:\n#3\n#6\n#2\n#0\n#0\n#1\n#1",
        "generated_testcode": "assert check_Equality(\"abc\") == 1\n",
        "test": "assert count_Substring_With_Equal_Ends(\"abc\") == 3\nassert count_Substring_With_Equal_Ends(\"abcda\") == 6\nassert count_Substring_With_Equal_Ends(\"ab\") == 2",
        "canonical_solution": "def check_Equality(s): \r\n    return (ord(s[0]) == ord(s[len(s) - 1])); \r\ndef count_Substring_With_Equal_Ends(s): \r\n    result = 0; \r\n    n = len(s); \r\n    for i in range(n): \r\n        for j in range(1,n-i+1):  \r\n            if (check_Equality(s[i:i+j])): \r\n                result+=1; \r\n    return result; "
    },
    {
        "number": 31,
        "prompt": "Write a function to find the top k integers that occur most frequently from given lists of sorted and distinct integers using heap queue algorithm.\ndef func(nums, k):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    from collections import Counter\n    from heapq import heappush, heappop\n    counter = Counter(nums)\n    heap = [(-freq, num) for num, freq in counter.items()]\n    heapq.heapify(heap)\n    result = []\n    for _ in range(k):\n        freq, num = heappop(heap)\n        result.append(num)\n    return result\n\nprint(func([1,2,2,3,3,4,4,4,4,5,5,5,6], 2)) # Output: [4,5]\nprint(func([1,1,2,2,3,3,3,4,4,4,4,5,5,5,5,6,6], 2)) # Output: [5,4]\nprint(func([1,1,2,2,3,3,4,4,4,4,5,5,5,5,6,6,6], 3)) # Output: [5,4,1]\nprint(func([1,1,2,2,3,3,4,4,4,4,5,5,5,5,6,6,6,7,7,7,7,8,8,8,8], 3)) # Output: [7,4,6]\n\n#Time Complexity: O(nlogk) - Sorting takes O(nlogn) time and finding top k items takes O(klog",
        "generated_testcode": "assert func([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3) == [1, 2, 3]\n",
        "test": "assert func([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]],3)==[5, 7, 1]\nassert func([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]],1)==[1]\nassert func([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]],5)==[6, 5, 7, 8, 1]",
        "canonical_solution": "def func(nums, k):\r\n    import collections\r\n    d = collections.defaultdict(int)\r\n    for row in nums:\r\n        for i in row:\r\n            d[i] += 1\r\n    temp = []\r\n    import heapq\r\n    for key, v in d.items():\r\n        if len(temp) < k:\r\n            temp.append((v, key))\r\n            if len(temp) == k:\r\n                heapq.heapify(temp)\r\n        else:\r\n            if v > temp[0][0]:\r\n                heapq.heappop(temp)\r\n                heapq.heappush(temp, (v, key))\r\n    result = []\r\n    while temp:\r\n        v, key = heapq.heappop(temp)\r\n        result.append(key)\r\n    return result"
    },
    {
        "number": 32,
        "prompt": "Write a python function to find the largest prime factor of a given number.\ndef max_Prime_Factors (n): \n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    while (n % 2 == 0): \n        print(2), \n        n = n // 2\n  \n    # Iterate from 3 and go up in steps of 2 \n    for i in range(3, int(n**0.5) + 1, 2): \n        while (n % i == 0): \n            print(i), \n            n = n // i \n  \n    # If n is a prime number greater than 2 \n    if n > 2: \n        print(n) \n\n# Driver Code \nn = int(input(\"Enter a number: \")) \nmax_Prime_Factors(n) ",
        "generated_testcode": "assert max_Prime_Factors(13191) == 29\n",
        "test": "assert max_Prime_Factors(15) == 5\nassert max_Prime_Factors(6) == 3\nassert max_Prime_Factors(2) == 2",
        "canonical_solution": "import math \r\ndef max_Prime_Factors (n): \r\n    maxPrime = -1 \r\n    while n%2 == 0: \r\n        maxPrime = 2\r\n        n >>= 1    \r\n    for i in range(3,int(math.sqrt(n))+1,2): \r\n        while n % i == 0: \r\n            maxPrime = i \r\n            n = n / i \r\n    if n > 2: \r\n        maxPrime = n  \r\n    return int(maxPrime)"
    },
    {
        "number": 33,
        "prompt": "Write a python function to convert a decimal number to binary number.\ndef decimal_To_Binary(N): \n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": " \n    binary = \"\" \n    while N > 0: \n        binary = str(N % 2) + binary \n        N = N // 2\n    return binary\n\n# Example usage:\nprint(decimal_To_Binary(10)) # Output: 1010\nprint(decimal_To_Binary(17)) # Output: 100001\nprint(decimal_To_Binary(15)) # Output: 111111 ",
        "generated_testcode": "assert decimal_To_Binary(10) == \"1010\"\n",
        "test": "assert decimal_To_Binary(10) == 1010\nassert decimal_To_Binary(1) == 1\nassert decimal_To_Binary(20) == 10100",
        "canonical_solution": "def decimal_To_Binary(N): \r\n    B_Number = 0\r\n    cnt = 0\r\n    while (N != 0): \r\n        rem = N % 2\r\n        c = pow(10,cnt)  \r\n        B_Number += rem*c  \r\n        N //= 2 \r\n        cnt += 1\r\n    return B_Number  "
    },
    {
        "number": 34,
        "prompt": "Write a python function to find the missing number in a sorted array.\ndef find_missing(ar,N): \n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    total = 0\n    for i in range(1,N+1):\n        total += i\n    if ar[0] != 1:\n        return 1\n    sum = 0\n    for i in ar:\n        if i == 0:\n            continue\n        if i == N+1:\n            return N+1\n        sum += i\n        if i == 1:\n            continue\n    return total - sum\n\n#Example:\narr = [1,2,3,4,5,6,8,9,10]\nN = len(arr)\nprint(find_missing(arr,N)) #Output:7 ",
        "generated_testcode": "assert find_missing([1,2,3,4,5,6,7,8,9,10],9) == 11\n",
        "test": "assert find_missing([1,2,3,5],4) == 4\nassert find_missing([1,3,4,5],4) == 2\nassert find_missing([1,2,3,5,6,7],5) == 4",
        "canonical_solution": "def find_missing(ar,N): \r\n    l = 0\r\n    r = N - 1\r\n    while (l <= r):  \r\n        mid = (l + r) / 2\r\n        mid= int (mid) \r\n        if (ar[mid] != mid + 1 and ar[mid - 1] == mid): \r\n            return (mid + 1)  \r\n        elif (ar[mid] != mid + 1): \r\n            r = mid - 1 \r\n        else: \r\n            l = mid + 1\r\n    return (-1) "
    },
    {
        "number": 35,
        "prompt": "Write a function to find the n-th rectangular number.\ndef find_rect_num(n):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": true,
        "answer": "    i = 1\n    count = 1\n    while count < n:\n        i += 1\n        count += i\n    return i * (i + 1) // 2\n\n\nprint(find_rect_num(4))  # Output: 6\nprint(find_rect_num(6))  # Output: 111\nprint(find_rect_num(10))  # Output: 22\nprint(find_rect_num(20))  # Output: 64\n\n\n# Time complexity: O(n)\n# Space complexity: O(1)\n",
        "generated_testcode": "assert find_rect_num(1) == 1\n",
        "test": "assert find_rect_num(4) == 20\nassert find_rect_num(5) == 30\nassert find_rect_num(6) == 42",
        "canonical_solution": "def find_rect_num(n):\r\n  return n*(n + 1) "
    },
    {
        "number": 36,
        "prompt": "Write a python function to find the nth digit in the proper fraction of two given numbers.\ndef find_Nth_Digit(p,q,N) :  \n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    if p == 0 :\n        return 0\n    if q == 0 :\n        return 0\n    result = p//q\n    N -= 1\n    while q > 1 :\n        p %= q\n        q, r = divmod(q, 10)\n        if N > r :\n            N -= r\n        else :\n            result = result * 10 + (p//q)\n            N -= 1\n    return int(result * (N/r) + (p//q))\n\n# Test the function\np = 1234\nq = 5678\nN = 3\nprint(find_Nth_Digit(p,q,N))\np = 987654321\nq = 54321\nN = 10\nprint(find_Nth_Digit(p,q,N)) ",
        "generated_testcode": "assert find_Nth_Digit(3, 7, 1) == 3\n",
        "test": "assert find_Nth_Digit(1,2,1) == 5\nassert find_Nth_Digit(3,5,1) == 6\nassert find_Nth_Digit(5,6,5) == 3",
        "canonical_solution": "def find_Nth_Digit(p,q,N) :  \r\n    while (N > 0) : \r\n        N -= 1;  \r\n        p *= 10;  \r\n        res = p // q;  \r\n        p %= q;  \r\n    return res;  "
    },
    {
        "number": 37,
        "prompt": "Write a function to sort a given mixed list of integers and strings.\ndef sort_mixed_list(mixed_list):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    int_list = []\n    str_list = []\n\n    for item in mixed_list:\n        if isinstance(item, int):\n            int_list.append(item)\n        else:\n            str_list.append(item)\n\n    int_list.sort()\n    str_list.sort()\n    return int_list + str_list\n\n\n# Test the function with the following example\nmixed_list = [5, \"banana\", \"apple\", 3, 1, 8, 2, \"cherry\", 7, \"pear\", 4, \"orange\"]\nprint(sort_mixed_list(mixed_list)) # Output: [1, 2, 3, 4, 5, 'apple', 'banana', 'cherry', 'orange', 7, 'pear']\n\n# Explanation:\n# The function takes in a mixed_list as input and separates it into two lists - one for integers and one for strings.\n# The integers list is then sorted using the sort() method, while the strings list is also sorted using the same method.\n# Finally, the function concatenates the two lists and returns the sorted list.\n# In this case, the sorted integers list is [1, 2, 3, 4, 5] and the sorted strings list is ['apple', 'banana', 'cherry', 'orange', 'pear'].\n# The two lists are then concatenated to form the final sorted list [1, 2, 3, ",
        "generated_testcode": "assert sort_mixed_list([\"apple\", 1, 3, \"banana\", 2, 4, \"orange\", 5, \"grape\", 1, 3, 2, \"kiwi\", 4, 5, 6, 7, \"kiwi\", 8, 9, 10, 11, \"apple\", 12, \"orange\"] == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, \"apple\", \"banana\", \"grape\", \"kiwi\", \"kiwi\", \"orange\"]\n\n# Test the function with the given input and check if it returns the expected output. ",
        "test": "assert sort_mixed_list([19,'red',12,'green','blue', 10,'white','green',1])==[1, 10, 12, 19, 'blue', 'green', 'green', 'red', 'white']\nassert sort_mixed_list([19,'red',12,'green','blue', 10,'white','green',1])==[1, 10, 12, 19, 'blue', 'green', 'green', 'red', 'white']\nassert sort_mixed_list([19,'red',12,'green','blue', 10,'white','green',1])==[1, 10, 12, 19, 'blue', 'green', 'green', 'red', 'white']",
        "canonical_solution": "def sort_mixed_list(mixed_list):\r\n    int_part = sorted([i for i in mixed_list if type(i) is int])\r\n    str_part = sorted([i for i in mixed_list if type(i) is str])\r\n    return int_part + str_part"
    },
    {
        "number": 38,
        "prompt": "Write a function to find the division of first even and odd number of a given list.\ndef div_even_odd(list1):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    even_count = 0\n    odd_count = 0\n    for i in list1:\n        if i % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    return (even_count, odd_count)\n\n\n# Test the function\nprint(div_even_odd([1,2,3,4,5,6,7,8,9,10])) # (3,4)\nprint(div_even_odd([2,4,6,8,10])) # (4,0)\nprint(div_even_odd([1,3,5,7,9])) # (0,4)\n",
        "generated_testcode": "assert div_even_odd([1,2,3,4,5,6,7,8,9]) == (4, 2.6666666666666666666667)\n",
        "test": "assert div_even_odd([1,3,5,7,4,1,6,8])==4\nassert div_even_odd([1,2,3,4,5,6,7,8,9,10])==2\nassert div_even_odd([1,5,7,9,10])==10",
        "canonical_solution": "def div_even_odd(list1):\r\n    first_even = next((el for el in list1 if el%2==0),-1)\r\n    first_odd = next((el for el in list1 if el%2!=0),-1)\r\n    return (first_even/first_odd)"
    },
    {
        "number": 39,
        "prompt": "Write a function to check if the letters of a given string can be rearranged so that two characters that are adjacent to each other are different.\ndef rearange_string(S):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    if len(S) < 2:\n        return True\n\n    counts = {}\n    for char in S:\n        if char in counts:\n            counts[char] += 1\n        else:\n            counts[char] = 1\n\n    min_count = min(counts.values())\n    max_count = max(counts.values())\n\n    if min_count == 1 and max_count == 1:\n        return True\n\n    return (len(S) - min_count) % (max_count - min_count) == 0\n\n\n# Test cases\nprint(rearange_string(\"aabbc\")) # True\nprint(rearange_string(\"aabbcc\")) # False\nprint(rearange_string(\"aabccd\")) # True\nprint(rearange_string(\"abbcccdddde\")) # False\nprint(rearange_string(\"abcdefg\")) # False\nprint(rearange_string(\"abbac\")) # True\nprint(rearange_string(\"abbc\")) # False\nprint(rearange_string(\"abbc\")) # True\nprint(rearange_string(\"abcde\")) # True\nprint(rearange_string(\"aaabbb\")) # False\nprint(rearange_string(\"aabbc\")) # True\nprint(rearange_string(\"aaa\")) # True\nprint(rearange_string(\"aabbcddd\")) # False\nprint(rearange_string(\"aaaaabbcdd\")) # True\n",
        "generated_testcode": "assert rearange_string(\"aab\") == True\n",
        "test": "assert rearange_string(\"aab\")==('aba')\nassert rearange_string(\"aabb\")==('abab')\nassert rearange_string(\"abccdd\")==('cdabcd')",
        "canonical_solution": "import heapq\r\nfrom collections import Counter\r\ndef rearange_string(S):\r\n    ctr = Counter(S)\r\n    heap = [(-value, key) for key, value in ctr.items()]\r\n    heapq.heapify(heap)\r\n    if (-heap[0][0]) * 2 > len(S) + 1: \r\n        return \"\"\r\n    ans = []\r\n    while len(heap) >= 2:\r\n        nct1, char1 = heapq.heappop(heap)\r\n        nct2, char2 = heapq.heappop(heap)\r\n        ans.extend([char1, char2])\r\n        if nct1 + 1: heapq.heappush(heap, (nct1 + 1, char1))\r\n        if nct2 + 1: heapq.heappush(heap, (nct2 + 1, char2))\r\n    return \"\".join(ans) + (heap[0][1] if heap else \"\")"
    },
    {
        "number": 40,
        "prompt": "Write a function to find frequency of the elements in a given list of lists using collections module.\ndef freq_element(nums):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    from collections import Counter\n    count = Counter()\n    for i in nums:\n        count += Counter(i)\n    return dict(count)\n\n# Test the function with an example list of lists\nnums = [[1, 2, 3, 4, 5, 6], [2, 4, 6, 8], [1, 3, 5, 7, 9]]\nprint(freq_element(nums))\n\n# Output: {1: 2, 2: 2, 3: 2, 4: 2, 5: 2, 6: 2, 8: 1, 7: 1, 9: 1}\n\n# The function will return a dictionary with the frequency of each element in the list of lists.\n# If an element is present in multiple lists, it will be counted only once. ",
        "generated_testcode": "assert freq_element([[1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9], [4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19], [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19]] ) == {1: 3, 2: 3, 3: 3, 4: 3, 5: 3, 6: 3, 7: 3, 8: 3, 9: 3, 10: 2, 11: 2, 12: 2, 13: 2, 14: 2, 15: 2, 16: 2, 17: 2, 18: 2, 19: 2, 10: 1, 11: 1, 12: 1, 13: 1, 14: 1, 15: 1, 1",
        "test": "assert freq_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]])==({2: 3, 1: 2, 5: 2, 3: 1, 4: 1, 6: 1, 7: 1, 9: 1})\nassert freq_element([[1,2,3,4],[5,6,7,8],[9,10,11,12]])==({1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 1, 12: 1})\nassert freq_element([[15,20,30,40],[80,90,100,110],[30,30,80,90]])==({30: 3, 80: 2, 90: 2, 15: 1, 20: 1, 40: 1, 100: 1, 110: 1})",
        "canonical_solution": "from collections import Counter\r\nfrom itertools import chain\r\ndef freq_element(nums):\r\n  result = Counter(chain.from_iterable(nums))\r\n  return result"
    },
    {
        "number": 41,
        "prompt": "Write a function to filter even numbers using lambda function.\ndef filter_evennumbers(nums):\n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    return list(filter(lambda x: x % 2 == 0, nums))\n\n#Example usage:\nnums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nprint(filter_evennumbers(nums))\n\n#Output: [2, 4, 6, 8, 10] ",
        "generated_testcode": "assert filter_evennumbers([1, 2, 3, 4, 5, 6, 7, 8, 9]) == [2, 4, 6, 8]\n",
        "test": "assert filter_evennumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[2, 4, 6, 8, 10]\nassert filter_evennumbers([10,20,45,67,84,93])==[10,20,84]\nassert filter_evennumbers([5,7,9,8,6,4,3])==[8,6,4]",
        "canonical_solution": "def filter_evennumbers(nums):\r\n even_nums = list(filter(lambda x: x%2 == 0, nums))\r\n return even_nums"
    },
    {
        "number": 42,
        "prompt": "Write a python function to find the sum of repeated elements in a given array.\ndef find_Sum(arr,n): \n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    sum=0\n    for i in range(n):\n        for j in range(i+1,n):\n            if arr[i]==arr[j]:\n                sum+=arr[i]\n    return sum\nn=int(input(\"Enter the length of array: \"))\narr=[]\nprint(\"Enter the elements of the array:\")\nfor i in range(n):\n    arr.append(int(input()))\nprint(\"The sum of repeated elements in the array is: \",find_Sum(arr,n))\n",
        "generated_testcode": "assert find_Sum([1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9], 9 == 30\n",
        "test": "assert find_Sum([1,2,3,1,1,4,5,6],8) == 3\nassert find_Sum([1,2,3,1,1],5) == 3\nassert find_Sum([1,1,2],3) == 2",
        "canonical_solution": "def find_Sum(arr,n): \r\n    return sum([x for x in arr if arr.count(x) > 1])"
    },
    {
        "number": 43,
        "prompt": "Write a function to find sequences of lowercase letters joined with an underscore using regex.\ndef text_match(text):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    import re\n    pattern = re.findall(r'[a-z]+_[a-z]+', text)\n    return pattern\n\n# Test the function with a sample text\ntext = \"the_quick_brown_fox_jumps_over_the_lazy_dog_and_the_lazy_dog_jumps_over_the_lazy_cat\"\nprint(text_match(text)) # output: ['the_quick_brown', 'fox_jumps', 'the_lazy_dog', 'and_the_lazy_cat']\n\n# Test the function with another sample text\ntext = \"hello_world_i_am_a_regex_guru\"\nprint(text_match(text)) # output: []\n\n# Test the function with another sample text\ntext = \"hello_world_i_am_a_regex_guru_regex_is_fun\"\nprint(text_match(text)) # output: ['regex_is_fun']\n\n# Test the function with another sample text\ntext = \"hello_world_i_am_a_regex_guru_regex_is_fun_regex_rules\"\nprint(text_match(text)) # output: ['regex_is_fun', 'regex_rules'] ",
        "generated_testcode": "assert text_match(\"hello_world\") == True\n",
        "test": "assert text_match(\"aab_cbbbc\") == 'Found a match!'\nassert text_match(\"aab_Abbbc\") == 'Not matched!'\nassert text_match(\"Aaab_abbbc\") == 'Not matched!'",
        "canonical_solution": "import re\r\ndef text_match(text):\r\n  patterns = '^[a-z]+_[a-z]+$'\r\n  if re.search(patterns,  text):\r\n    return ('Found a match!')\r\n  else:\r\n    return ('Not matched!')"
    },
    {
        "number": 44,
        "prompt": "Write a function that matches a word at the beginning of a string.\ndef text_match_string(text):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    if text.startswith(\"hello\"):\n        return True\n    else:\n        return False\n\nprint(text_match_string(\"hello world\")) # True\nprint(text_match_string(\"world hello\")) # False\nprint(text_match_string(\"Hello world\")) # False\nprint(text_match_string(\"HELLO world\")) # False\n\n\n# Write a function that matches a word at the end of a string\ndef text_match_end_string(text):\n    if text.endswith(\"world\"):\n        return True\n    else:\n        return False\n\nprint(text_match_end_string(\"world\")) # True\nprint(text_match_end_string(\"hello world\")) # False\nprint(text_match_end_string(\"world hello\")) # False\nprint(text_match_end_string(\"world hello world\")) # False\n\n\n# Write a function that checks if a string contains a specific substring\ndef substring_check(text, substring):\n    if substring in text:\n        return True\n    else:\n        return False\n\nprint(substring_check(\"hello world\", \"hello\")) # True\nprint(substring_check(\"hello world\", \"world\")) # True\nprint(substring_check(\"hello world\", \"hi\")) # False\n\n\n# Write a function that checks if a string contains all letters of another string\ndef all_letters_check(text, letters):\n    for letter in letters:\n        if letter not in text:\n            return False\n    return True\n\nprint(all_let",
        "generated_testcode": "assert text_match_string(\"hello world\") == \"hello\"\n",
        "test": "assert text_match_string(\" python\")==('Not matched!')\nassert text_match_string(\"python\")==('Found a match!')\nassert text_match_string(\"  lang\")==('Not matched!')",
        "canonical_solution": "import re\r\ndef text_match_string(text):\r\n        patterns = '^\\w+'\r\n        if re.search(patterns,  text):\r\n                return 'Found a match!'\r\n        else:\r\n                return 'Not matched!'"
    },
    {
        "number": 45,
        "prompt": "Write a function to find the gcd of the given array elements.\ndef find_gcd(x, y): \n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    if y == 0: \n        return x \n    else: \n        return find_gcd(y, x % y) \n  \ndef gcd_array(arr): \n    result = arr[0] \n    for i in range(1, len(arr)): \n        result = find_gcd(result, arr[i]) \n    return result \n  \n# Sample Input \narr = [12, 15, 20, 6, 35] \n  \n# Output: 5 \nprint(gcd_array(arr)) ",
        "generated_testcode": "assert find_gcd(12, 18) == 6\n",
        "test": "assert get_gcd([2, 4, 6, 8, 16]) == 2\nassert get_gcd([1, 2, 3]) == 1\nassert get_gcd([2, 4, 6, 8]) == 2 ",
        "canonical_solution": "def find_gcd(x, y): \r\n\twhile(y): \r\n\t\tx, y = y, x % y \r\n\treturn x \r\ndef get_gcd(l):\r\n  num1 = l[0]\r\n  num2 = l[1]\r\n  gcd = find_gcd(num1, num2)\r\n  for i in range(2, len(l)):\r\n    gcd = find_gcd(gcd, l[i])\r\n  return gcd"
    },
    {
        "number": 46,
        "prompt": "Write a python function to determine whether all the numbers are different from each other are not.\ndef test_distinct(data):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    if len(data) == len(set(data):\n        return True\n    else:\n        return False\n\n# Test the function\ndata = [1,2,3,4,5,6,7,8,9]\nprint(test_distinct(data)) # True\n\ndata = [1,2,3,4,5,5,6,7,8,9]\nprint(test_distinct(data)) # False\n\ndata = [1,2,2,3,4,5,6,7,8,9]\nprint(test_distinct(data)) # False\n\ndata = [1,2,3,4,5,6,7,8,9,10]\nprint(test_distinct(data)) # True\n\ndata = [1,2,3,4,5,6,7,8,9]\nprint(test_distinct(data)) # True\n\ndata = [1,2,3,3,4,5,6,7,8]\nprint(test_distinct(data)) # False\n\ndata = []\nprint(test_distinct(data)) # True\n\ndata = [1]\nprint(test_distinct(data)) # True\n\ndata = [1,1,2,3,3,4,5,6,7,8]\nprint(test_distinct(data)) # False",
        "generated_testcode": "assert test_distinct([1, 2, 3, 4, 5, 6, 7, 8, 9]) == True\n",
        "test": "assert test_distinct([1,5,7,9]) == True\nassert test_distinct([2,4,5,5,7,9]) == False\nassert test_distinct([1,2,3]) == True",
        "canonical_solution": "def test_distinct(data):\r\n  if len(data) == len(set(data)):\r\n    return True\r\n  else:\r\n    return False;"
    },
    {
        "number": 47,
        "prompt": "Write a python function to find the last digit when factorial of a divides factorial of b.\ndef compute_Last_Digit(A,B): \n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    def factorial(n):\n        if n == 0:\n            return 1\n        else:\n            return n * factorial(n-1)\n    a = factorial(A)\n    b = factorial(B)\n    return a // b % 10\n\n\nA = int(input())\nB = int(input())\nprint(compute_Last_Digit(A,B)) ",
        "generated_testcode": "assert compute_Last_Digit(5,10) == 5\n",
        "test": "assert compute_Last_Digit(2,4) == 2\nassert compute_Last_Digit(6,8) == 6\nassert compute_Last_Digit(1,2) == 2",
        "canonical_solution": "def compute_Last_Digit(A,B): \r\n    variable = 1\r\n    if (A == B): \r\n        return 1\r\n    elif ((B - A) >= 5):  \r\n        return 0\r\n    else:   \r\n        for i in range(A + 1,B + 1): \r\n            variable = (variable * (i % 10)) % 10\r\n        return variable % 10"
    },
    {
        "number": 48,
        "prompt": "Write a python function to set all odd bits of a given number.\ndef odd_bit_set_number(n):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    binary_num = bin(n)[2:]\n    # print(binary_num)\n    binary_num = list(binary_num)\n    for i in range(len(binary_num)):\n        if binary_num[i] == '1':\n            binary_num[i] = '0'\n        else:\n            binary_num[i] = '1'\n    binary_num = ''.join(binary_num)\n    # print(binary_num)\n    decimal_num = int(binary_num, 2)\n    return decimal_num\n\n\n# Test the function\nprint(odd_bit_set_number(7))  # Output: 6\nprint(odd_bit_set_number(12))  # Output: 11\nprint(odd_bit_set_number(23))  # Output: 21\nprint(odd_bit_set_number(5))  # Output: 5\n\n\n# Time Complexity: O(n), n is the length of binary representation of the number\n# Space Complexity: O(n) ",
        "generated_testcode": "assert odd_bit_set_number(10) == 11\n",
        "test": "assert odd_bit_set_number(10) == 15\nassert odd_bit_set_number(20) == 21\nassert odd_bit_set_number(30) == 31",
        "canonical_solution": "def odd_bit_set_number(n):\r\n    count = 0;res = 0;temp = n\r\n    while temp > 0:\r\n        if count % 2 == 0:\r\n            res |= (1 << count)\r\n        count += 1\r\n        temp >>= 1\r\n    return (n | res)"
    },
    {
        "number": 49,
        "prompt": "Write a function to extract every first or specified element from a given two-dimensional list.\ndef specified_element(nums, N):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    result = []\n    for i in range(len(nums)):\n        if i % N == 0:\n            result.append(nums[i][0])\n    return result\n\n# Test cases\nprint(specified_element([[1, 2, 3, 4, 5], [6, 7, 8, 9], [10, 11, 12]], 2)) # Output: [1, 6, 10]\nprint(specified_element([[1, 2, 3, 4, 5, 6], [7, 8, 9, 10, 11], [12, 13, 14, 15, 16], [17, 18, 19, 20]], 3)) # Output: [1, 7, 12, 17]\nprint(specified_element([[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12], [13, 14, 15]], 1) # Output: [1, 4, 10, 13]\n\n# Explanation:\n# In the first test case, the function should return a list that contains the first elements of each sublist, which are [1, 6, and 10].\n# In the second test case, the function should return a list that contains the",
        "generated_testcode": "assert specified_element([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]], 1) == [1, 5, 9]\n",
        "test": "assert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],0)==[1, 4, 7]\nassert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],2)==[3, 6, 9]\nassert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],1)==[2,5,1]",
        "canonical_solution": "def specified_element(nums, N):\r\n    result = [i[N] for i in nums]\r\n    return result\r\n    "
    },
    {
        "number": 50,
        "prompt": "Write a function to find the list with minimum length using lambda function.\ndef min_length_list(input_list):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    min_len = lambda lst: min(len(lst, key=len)\n    return min_len(input_list)\n\n# Test the function with a list of lists\nlst = [[1,2,3,4],[5,6],[7,8,9,10],[11],[12,13,14,15,16],[17,18],[]]\nprint(min_length_list(lst)) # Output: []\n\n# Test the function with a list of strings\nlst = [\"hello\", \"world\", \"python\", \"programming\", \"is\", \"fun\"]\nprint(min_length_list(lst)) # Output: \"fun\"\n\n# Test the function with a mix of lists and strings\nlst = [\"hello\", [1,2,3], [4,5,6,7], [8,9], \"python\", \"programming\", \"is\", \"fun\"]\nprint(min_length_list(lst)) # Output: []\n\n# Test the function with a mix of lists and tuples\nlst = [(), (1,2,3), [4,5,6,7], [8,9], \"python\", (10,11,12,13,14), \"fun\"]\nprint(min_length_list(lst)) # Output: () ",
        "generated_testcode": "assert min_length_list([[1, 2, 3, 4, 5, 6, 7, 8]) == [1, 2, 3, 4, 5, 6, 7, 8]\n",
        "test": "assert min_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(1, [0])\nassert min_length_list([[1,2,3,4,5],[1,2,3,4],[1,2,3],[1,2],[1]])==(1,[1])\nassert min_length_list([[3,4,5],[6,7,8,9],[10,11,12],[1,2]])==(2,[1,2])",
        "canonical_solution": "def min_length_list(input_list):\r\n    min_length = min(len(x) for x in input_list )  \r\n    min_list = min(input_list, key = lambda i: len(i))\r\n    return(min_length, min_list)"
    },
    {
        "number": 51,
        "prompt": "Write a function to print check if the triangle is equilateral or not.\ndef check_equilateral(x,y,z):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    if x == y and y == z:\n        print(\"Equilateral Triangle\")\n    else:\n        print(\"Not Equilateral Triangle\")\n\n\n# Take input from the user\nx = int(input(\"Enter the length of first side: \"))\ny = int(input(\"Enter the length of second side: \"))\nz = int(input(\"Enter the length of third side: \"))\n\n# Call the function\ncheck_equilateral(x,y,z)\n",
        "generated_testcode": "assert check_equilateral(3,3,3) == True\n",
        "test": "assert check_equilateral(6,8,12)==False \nassert check_equilateral(6,6,12)==False\nassert check_equilateral(6,6,6)==True",
        "canonical_solution": "def check_equilateral(x,y,z):\r\n  if x == y == z:\r\n\t   return True\r\n  else:\r\n     return False"
    },
    {
        "number": 52,
        "prompt": "Write a function to caluclate area of a parallelogram.\ndef parallelogram_area(b,h):\n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    return b*h\n\n#test the function\nprint(parallelogram_area(10,20)) #should print 200\nprint(parallelogram_area(5,12)) #should print 60\nprint(parallelogram_area(3,7)) #should print 21\n\n#Write a function to calculate the area of a rectangle\ndef rectangle_area(length,width):\n    return length * width\n\n#test the function\nprint(rectangle_area(10,20)) #should print 200\nprint(rectangle_area(5,12)) #should print 60\nprint(rectangle_area(3,7)) #should print 21\n\n#Write a function to calculate the area of a triangle\ndef triangle_area(base,height):\n    return 0.5 * base * height\n\n#test the function\nprint(triangle_area(10,20)) #should print 100\nprint(triangle_area(5,12)) #should print 30\nprint(triangle_area(3,7)) #should print 14\n\n#Write a function to calculate the area of a circle\ndef circle_area(radius):\n    import math\n    return math.pi * (radius ** 2)\n\n#test the function\nprint(circle_area(5)) #should print 78.5398163339744483\nprint(circle_area(10)) #",
        "generated_testcode": "assert parallelogram_area(4, 6) == 24\n",
        "test": "assert parallelogram_area(10,20)==200\nassert parallelogram_area(15,20)==300\nassert parallelogram_area(8,9)==72",
        "canonical_solution": "def parallelogram_area(b,h):\r\n  area=b*h\r\n  return area"
    },
    {
        "number": 53,
        "prompt": "Write a python function to check whether the first and last characters of a given string are equal or not.\ndef check_Equality(str):\n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    if str[0] == str[-1]:\n        return True\n    else:\n        return False\n\n# Test the function\nprint(check_Equality(\"hello\"))  # True\nprint(check_Equality(\"world\")) # False\nprint(check_Equality(\"python\")) # True\nprint(check_Equality(\"apple\")) # False ",
        "generated_testcode": "assert check_Equality(\"hello\") == False\n",
        "test": "assert check_Equality(\"abcda\") == \"Equal\"\nassert check_Equality(\"ab\") == \"Not Equal\"\nassert check_Equality(\"mad\") == \"Not Equal\"",
        "canonical_solution": "def check_Equality(str):\r\n  if (str[0] == str[-1]):  \r\n    return (\"Equal\") \r\n  else:  \r\n    return (\"Not Equal\") "
    },
    {
        "number": 54,
        "prompt": "Write a function to sort the given array by using counting sort.\ndef counting_sort(my_list):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    max_val = max(my_list)\n    min_val = min(my_list)\n    size = max_val - min_val + 1\n    count = [0] * size\n    output = [0] * len(my_list)\n\n    for i in range(len(my_list)):\n        count[my_list[i] - min_val] += 1\n\n    for i in range(1, size):\n        count[i] += count[i - 1]\n\n    for i in range(len(my_list) - 1, -1, -1):\n        output[count[my_list[i] - min_val] - 1] = my_list[i]\n        count[my_list[i] - min_val] -= 1\n    for i in range(len(my_list)):\n        my_list[i] = output[i]\n    return my_list\n\n\n\n# Test the function\nmy_list = [5, 3, 8, 1, 6, 2, 7, 10, 4, 2, 8, 10, 9, 3, 1]\nprint(counting_sort(my_list))\n",
        "generated_testcode": "assert counting_sort([4, 2, 5, 1, 3, 1, 2, 6, 7, 8, 9, 0, 4, 5, 3] ) == [0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 7, 8, 9]\n\n# Test case 2\n",
        "test": "assert counting_sort([1,23,4,5,6,7,8]) == [1, 4, 5, 6, 7, 8, 23]\nassert counting_sort([12, 9, 28, 33, 69, 45]) == [9, 12, 28, 33, 45, 69]\nassert counting_sort([8, 4, 14, 3, 2, 1]) == [1, 2, 3, 4, 8, 14]",
        "canonical_solution": "def counting_sort(my_list):\r\n    max_value = 0\r\n    for i in range(len(my_list)):\r\n        if my_list[i] > max_value:\r\n            max_value = my_list[i]\r\n    buckets = [0] * (max_value + 1)\r\n    for i in my_list:\r\n        buckets[i] += 1\r\n    i = 0\r\n    for j in range(max_value + 1):\r\n         for a in range(buckets[j]):\r\n             my_list[i] = j\r\n             i += 1\r\n    return my_list"
    },
    {
        "number": 55,
        "prompt": "Write a function to find t-nth term of geometric series.\ndef tn_gp(a,n,r):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    if n<=0:\n        return 0\n    elif r==1:\n        return a*a**(n-1)\n    else:\n        return a*r**(n-1)\n\na=5\nr=3\nn=3\nprint(tn_gp(a,n,r))\n",
        "generated_testcode": "assert tn_gp(2,3,3) == 8\n",
        "test": "assert tn_gp(1,5,2)==16\nassert tn_gp(1,5,4)==256\nassert tn_gp(2,6,3)==486",
        "canonical_solution": "import math\r\ndef tn_gp(a,n,r):\r\n  tn = a * (math.pow(r, n - 1))\r\n  return tn"
    },
    {
        "number": 56,
        "prompt": "Write a python function to check if a given number is one less than twice its reverse.\ndef rev(num):    \n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    return int(str(num) == str(num)[::-1]-1)\n\ndef check_reverse(num):\n    if num == 1 or num == 0:\n        return True\n    elif rev(num) == 1:\n        return check_reverse(num-1)\n    else:\n        return False\n\n#Testing the function\nprint(check_reverse(9)) #True\nprint(check_reverse(10)) #False\nprint(check_reverse(12)) #False\nprint(check_reverse(11)) #True\nprint(check_reverse(121)) #True\nprint(check_reverse(1111)) #False\nprint(check_reverse(120111)) #False\nprint(check_reverse(120012)) #True\nprint(check_reverse(999)) #True\nprint(check_reverse(10000)) #False\nprint(check_reverse(1111111)) #False\nprint(check_reverse(99999999999999)) #False\nprint(check_reverse(9999999999998)) #True\nprint(check_reverse(99999999999999)) #False\nprint(check_reverse(24321)) #True\nprint(check_reverse(12321)) #True\nprint(check_reverse(12320)) #False",
        "generated_testcode": "assert rev(12345) == False\n",
        "test": "assert check(70) == False\nassert check(23) == False\nassert check(73) == True",
        "canonical_solution": "def rev(num):    \r\n    rev_num = 0\r\n    while (num > 0):  \r\n        rev_num = (rev_num * 10 + num % 10) \r\n        num = num // 10  \r\n    return rev_num  \r\ndef check(n):    \r\n    return (2 * rev(n) == n + 1)  "
    },
    {
        "number": 57,
        "prompt": "Write a python function to find the largest number that can be formed with the given digits.\ndef find_Max_Num(arr,n) : \n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    if n == 1 : \n        return int(arr[0])\n\n    def helper(arr,n,i,curr_num):\n        if i == 1 : \n            return int(str(arr[0]) + str(curr_num))\n\n        if i == 2 : \n            return max(int(arr[0] + str(arr[1]) + curr_num, int(str(arr[1]) + str(arr[0]) + curr_num) )\n        \n        return max(helper(arr,i-1,str(arr[i-1]) + str(curr_num), helper(arr,i-1,curr_num), helper(arr,i-1,curr_num+str(arr[i-1]))\n\n    return helper(arr,n,\"\")\n\n\n\n# Driver code\narr = [9,8,7,6,5,4,3,2,1]\nn = len(arr)\nprint(find_Max_Num(arr,n))\n",
        "generated_testcode": "assert find_Max_Num([1, 2, 3, 4, 5, 6, 7, 8, 9], 3) == 967\n",
        "test": "assert find_Max_Num([1,2,3],3) == 321\nassert find_Max_Num([4,5,6,1],4) == 6541\nassert find_Max_Num([1,2,3,9],4) == 9321",
        "canonical_solution": "def find_Max_Num(arr,n) : \r\n    arr.sort(reverse = True) \r\n    num = arr[0] \r\n    for i in range(1,n) : \r\n        num = num * 10 + arr[i] \r\n    return num "
    },
    {
        "number": 58,
        "prompt": "Write a python function to check whether the given two integers have opposite sign or not.\ndef opposite_Signs(x,y): \n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    if x*y<0: \n        return True\n    else: \n        return False \n\n# Test the function with some test cases \nprint(opposite_Signs(5,-3)) # True \nprint(opposite_Signs(3,2)) # False \nprint(opposite_Signs(-6,-7)) # True \nprint(opposite_Signs(0,0)) # True ",
        "generated_testcode": "assert opposite_Signs(3, -5) == True\n",
        "test": "assert opposite_Signs(1,-2) == True\nassert opposite_Signs(3,2) == False\nassert opposite_Signs(-10,-10) == False",
        "canonical_solution": "def opposite_Signs(x,y): \r\n    return ((x ^ y) < 0); "
    },
    {
        "number": 59,
        "prompt": "Write a function to find the nth octagonal number.\ndef is_octagonal(n): \n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    \"\"\"\n    Returns True if n is an octagonal number, otherwise False\n    \"\"\"\n    root = int(n**(1/2) + 0.5)\n    return (root*(root-1)**2 + 1) == n\n\n\ndef nth_octagonal_number(n): \n    \"\"\"\n    Returns the nth octagonal number\n    \"\"\"\n    return (n * (3 * n - 1) // 2)\n\n\ndef nth_octagonal_number_test():\n    \"\"\"\n    Test the function to find the nth octagonal number\n    \"\"\"\n    for i in range(1, 10):\n        print(nth_octagonal_number(i))\n\n\ndef nth_octagonal_index(n): \n    \"\"\"\n    Returns the index of the nth octagonal number\n    \"\"\"\n    index = 0\n    num = 1\n    while nth_octagonal_number(index) != n:\n        index += 1\n    return index\n\n# Example usage:\nprint(nth_octagonal_index(16))\nprint(nth_octagonal_index(17))",
        "generated_testcode": "assert is_octagonal(1) == True\n",
        "test": "assert is_octagonal(5) == 65\nassert is_octagonal(10) == 280\nassert is_octagonal(15) == 645",
        "canonical_solution": "def is_octagonal(n): \r\n\treturn 3 * n * n - 2 * n "
    },
    {
        "number": 60,
        "prompt": "Write a function to find the maximum length of the subsequence with difference between adjacent elements for the given array.\ndef max_len_sub( arr, n): \n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": true,
        "answer": "    dp = [1] * n\n    for i in range(1, n):\n        for j in range(i):\n            if abs(arr[i] - arr[j]) < 2:\n                dp[i] = max(dp[i], dp[j] + 1)\n    return max(dp)\n\n\n# Test case\narr = [2, 5, 3, 1, 8, 6, 4, 7, 9]\nn = len(arr)\nprint(max_len_sub(arr, n))\n# Output: 3\n# Explanation: The maximum length of the subsequence with difference less than 2 is [3, 1, 6, 9] or [2, 6, 9]. ",
        "generated_testcode": "assert max_len_sub([1, 2, 3, 5, 7, 8, 4, 6, 10, 12, 15], 7) == 4\n",
        "test": "assert max_len_sub([2, 5, 6, 3, 7, 6, 5, 8], 8) == 5\nassert max_len_sub([-2, -1, 5, -1, 4, 0, 3], 7) == 4\nassert max_len_sub([9, 11, 13, 15, 18], 5) == 1",
        "canonical_solution": "def max_len_sub( arr, n): \r\n\tmls=[] \r\n\tmax = 0\r\n\tfor i in range(n): \r\n\t\tmls.append(1) \r\n\tfor i in range(n): \r\n\t\tfor j in range(i): \r\n\t\t\tif (abs(arr[i] - arr[j]) <= 1 and mls[i] < mls[j] + 1): \r\n\t\t\t\tmls[i] = mls[j] + 1\r\n\tfor i in range(n): \r\n\t\tif (max < mls[i]): \r\n\t\t\tmax = mls[i] \r\n\treturn max"
    },
    {
        "number": 61,
        "prompt": "Write a python function to count number of substrings with the sum of digits equal to their length.\ndef count_Substrings(s,n):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    count = 0\n    for i in range(n):\n        for j in range(n):\n            for k in range(i,n):\n                substring = s[i:k+1]\n                digits = sum(int(digit) for digit in substring)\n                if digits == len(substring):\n                    count += 1\n    return count\n\n# Testing the function\ns = \"1234\"\nn = len(s)\nprint(count_Substrings(s,n))\n\ns = \"122345\"\nn = len(s)\nprint(count_Substrings(s,n))\n\ns = \"1234456\"\nn = len(s)\nprint(count_Substrings(s,n))\n\ns = \"1234567\"\nn = len(s)\nprint(count_Substrings(s,n))",
        "generated_testcode": "assert count_Substrings(\"12345\", 5) == 1\n",
        "test": "assert count_Substrings('112112',6) == 6\nassert count_Substrings('111',3) == 6\nassert count_Substrings('1101112',7) == 12",
        "canonical_solution": "from collections import defaultdict\r\ndef count_Substrings(s,n):\r\n    count,sum = 0,0\r\n    mp = defaultdict(lambda : 0)\r\n    mp[0] += 1\r\n    for i in range(n):\r\n        sum += ord(s[i]) - ord('0')\r\n        count += mp[sum - (i + 1)]\r\n        mp[sum - (i + 1)] += 1\r\n    return count"
    },
    {
        "number": 62,
        "prompt": "Write a python function to find smallest number in a list.\ndef smallest_num(xs):\n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    # your code here\n    if len(xs) == 0:\n        return None\n    else:\n        min_num = xs[0]\n        for i in xs:\n            if i < min_num:\n                min_num = i\n        return min_num\n\n# Test the function\nprint(smallest_num([3, 5, 1, 2, 7, 8, 4, 9, 6])) # output: 1\nprint(smallest_num([7, 8, 3, 10, -2, 1, -5])) # output: -5\nprint(smallest_num([-10, -3, -6, 0, -1])) # output: -10\nprint(smallest_num([-1])) # output: -1\nprint(smallest_num([])) # output: None\n\n# Extra credit: can you implement a version that works for any iterable object? ",
        "generated_testcode": "assert smallest_num([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 1\n",
        "test": "assert smallest_num([10, 20, 1, 45, 99]) == 1\nassert smallest_num([1, 2, 3]) == 1\nassert smallest_num([45, 46, 50, 60]) == 45",
        "canonical_solution": "def smallest_num(xs):\n  return min(xs)\n"
    },
    {
        "number": 63,
        "prompt": "Write a function to find the maximum difference between available pairs in the given tuple list.\ndef max_difference(test_list):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    # Sort the list\n    test_list.sort()\n    # Initialize max_diff and current_diff variables\n    max_diff = 0\n    current_diff = 0\n    # Iterate through the list\n    for i in range(len(test_list) - 1):\n        # Calculate the difference between the current element and the next element\n        diff = test_list[i+1] - test_list[i]\n        # Update the current_diff variable\n        current_diff = diff\n        # Update the max_diff variable if the current_diff is greater\n        if current_diff > max_diff:\n            max_diff = current_diff\n    return max_diff\n\n# Test the function with the given input\ntest_list = (1, 3, 5, 8, 4, 2, 7, 6, 9, 10)\nprint(max_difference(test_list)) # Output: 7\n\n\n# Test the function with the given input\ntest_list = (1, 2, 3, 4, 5, 6, 7, 8, 9, 10)\nprint(max_difference(test_list)) # Output: 8\n\n\n# Test the function with the given input\ntest_list = (10, 2, 3, 4, 5, 6, 7, 8, 9)\nprint(max_difference(test_list)) # Output: 8\n\n\n#",
        "generated_testcode": "assert max_difference([(1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 8\n",
        "test": "assert max_difference([(3, 5), (1, 7), (10, 3), (1, 2)]) == 7\nassert max_difference([(4, 6), (2, 17), (9, 13), (11, 12)]) == 15\nassert max_difference([(12, 35), (21, 27), (13, 23), (41, 22)]) == 23",
        "canonical_solution": "def max_difference(test_list):\r\n  temp = [abs(b - a) for a, b in test_list]\r\n  res = max(temp)\r\n  return (res) "
    },
    {
        "number": 64,
        "prompt": "Write a function to sort a list of tuples using lambda.\ndef subject_marks(subjectmarks):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    return sorted(subjectmarks, key=lambda x: x[1], reverse=True)\n\n\n# Testing the function\nsubject_marks([(\"Maths\", 80), (\"Science\", 90), (\"English\", 70), (\"Science\", 95), (\"Maths\", 85)]) ",
        "generated_testcode": "assert subject_marks([(1, 80), (2, 90), (3, 70), (4, 95), (5, 85)] ) == [(1, 80), (2, 90), (4, 95), (3, 70)]\n",
        "test": "assert subject_marks([('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])==[('Social sciences', 82), ('English', 88), ('Science', 90), ('Maths', 97)]\nassert subject_marks([('Telugu',49),('Hindhi',54),('Social',33)])==([('Social',33),('Telugu',49),('Hindhi',54)])\nassert subject_marks([('Physics',96),('Chemistry',97),('Biology',45)])==([('Biology',45),('Physics',96),('Chemistry',97)])",
        "canonical_solution": "def subject_marks(subjectmarks):\r\n#subject_marks = [('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])\r\n subjectmarks.sort(key = lambda x: x[1])\r\n return subjectmarks"
    },
    {
        "number": 65,
        "prompt": "Write a function of recursion list sum.\ndef recursive_list_sum(data_list):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": true,
        "answer": "    if len(data_list) == 0:\n        return 0\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])\n\n# Test\nprint(recursive_list_sum([1,2,3,4,5,6,7,8,9]))\n\n\n# Explanation:\n# The function takes a list as an argument and checks if the length of the list is zero, if it is, it returns 0. Otherwise, it returns the first element of the list plus the result of calling the function with the rest of the list (excluding the first element).\n# The function continues to do this until all elements of the list have been added up. ",
        "generated_testcode": "assert recursive_list_sum([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 45\n",
        "test": "assert recursive_list_sum(([1, 2, [3,4],[5,6]]))==21\nassert recursive_list_sum(([7, 10, [15,14],[19,41]]))==106\nassert recursive_list_sum(([10, 20, [30,40],[50,60]]))==210",
        "canonical_solution": "def recursive_list_sum(data_list):\r\n\ttotal = 0\r\n\tfor element in data_list:\r\n\t\tif type(element) == type([]):\r\n\t\t\ttotal = total + recursive_list_sum(element)\r\n\t\telse:\r\n\t\t\ttotal = total + element\r\n\treturn total"
    },
    {
        "number": 66,
        "prompt": "Write a python function to count positive numbers in a list.\ndef pos_count(list):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    count = 0\n    for i in list:\n        if i > 0:\n            count += 1\n    return count\n\n# Example usage:\nlst = [-2, 4, 0, 5, -1, 7, -3, 10, -6, 2, 4]\nprint(pos_count(lst)) # Output: 3\n\n# Function should return 3\n\n\n# Another example:\nlst = [5, 6, 7, 8, 9, 10]\nprint(pos_count(lst)) # Output: 4\n# Function should return 4\n\n# Another example:\nlst = [-5, -6, -7, -8, -9]\nprint(pos_count(lst)) # Output: 0\n# Function should return 0\n# ",
        "generated_testcode": "assert pos_count([1,2,3,-4,5,6,-7,8,-9,10] ) == 4\n",
        "test": "assert pos_count([1,-2,3,-4]) == 2\nassert pos_count([3,4,5,-1]) == 3\nassert pos_count([1,2,3,4]) == 4",
        "canonical_solution": "def pos_count(list):\r\n  pos_count= 0\r\n  for num in list: \r\n    if num >= 0: \r\n      pos_count += 1\r\n  return pos_count "
    },
    {
        "number": 67,
        "prompt": "Write a function to find the number of ways to partition a set of bell numbers.\ndef bell_number(n):   \n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    # Define a function to generate the bell numbers recursively\n    def bell(n):\n        if n == 0 or n == 1:\n            return 1\n        return sum(bell(n - i) * bell(i) for i in range(1, n))\n\n    # Initialize the bell number array\n    bell_nums = [0] * (n + 1)\n    bell_nums[0] = bell_nums[1] = 1\n    for i in range(2, n + 1):\n        bell_nums[i] = bell(i)\n\n    # Count the number of ways to partition the set\n    count = 0\n    for i in range(1, n + 1):\n        count += bell_nums[i]\n    return count\n\n\n# Test the function with some sample inputs\nprint(bell_number(5))  # Expected output: 15\nprint(bell_number(7))  # Expected output: 125\nprint(bell_number(10)) # Expected output: 252\n\n",
        "generated_testcode": "assert bell_number(5) == 10\n",
        "test": "assert bell_number(2)==2\nassert bell_number(10)==115975\nassert bell_number(56)==6775685320645824322581483068371419745979053216268760300",
        "canonical_solution": "def bell_number(n):   \r\n    bell = [[0 for i in range(n+1)] for j in range(n+1)] \r\n    bell[0][0] = 1\r\n    for i in range(1, n+1): \r\n        bell[i][0] = bell[i-1][i-1]  \r\n        for j in range(1, i+1): \r\n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]   \r\n    return bell[n][0] "
    },
    {
        "number": 68,
        "prompt": "Write a python function to check whether the given array is monotonic or not.\ndef is_Monotonic(A): \n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    return all(A[i] <= A[i+1] for i in range(len(A)-1)) or all(A[i] >= A[i+1] for i in range(len(A)-1)) \n\n# Test cases\nprint(is_Monotonic([1, 2, 2, 2, 3, 4, 5, 6, 7, 8])) # True \nprint(is_Monotonic([1, 2, 3, 4, 5, 4, 3, 2, 1])) # False ",
        "generated_testcode": "assert is_Monotonic([1,2,3,4,5,6,7,8,9]) == True\n",
        "test": "assert is_Monotonic([6, 5, 4, 4]) == True\nassert is_Monotonic([1, 2, 2, 3]) == True\nassert is_Monotonic([1, 3, 2]) == False",
        "canonical_solution": "def is_Monotonic(A): \r\n    return (all(A[i] <= A[i + 1] for i in range(len(A) - 1)) or\r\n            all(A[i] >= A[i + 1] for i in range(len(A) - 1))) "
    },
    {
        "number": 69,
        "prompt": "Write a function to check whether a list contains the given sublist or not.\ndef is_sublist(l, s):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    if len(s) > len(l):\n        return False\n    for i in range(len(l)):\n        for j in range(len(s)):\n            if l[i+j] != s[j]:\n                break\n        if j == len(s)-1:\n            return True\n    return False\n\n\n# Test cases\nprint(is_sublist([1, 2, 3, 4, 5, 6], [2, 3])) # True\nprint(is_sublist([1, 2, 3, 4, 5, 6], [4, 5, 6])) # True\nprint(is_sublist([1, 2, 3, 4, 5, 6], [7, 8, 9])) # False\nprint(is_sublist([1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5])) # True\nprint(is_sublist([1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6])) # True\nprint(is_sublist([1, 2, 3, 4, 5, 6], [2, 3, 4, 5, 6])) # False\nprint(is_sublist([1, 2, 3, 4, 5, 6], [1, 2, 3, 4,",
        "generated_testcode": "assert is_sublist([1, 2, 3, 4, 5], [2, 3]) == True\n",
        "test": "assert is_sublist([2,4,3,5,7],[3,7])==False\nassert is_sublist([2,4,3,5,7],[4,3])==True\nassert is_sublist([2,4,3,5,7],[1,6])==False",
        "canonical_solution": "def is_sublist(l, s):\r\n\tsub_set = False\r\n\tif s == []:\r\n\t\tsub_set = True\r\n\telif s == l:\r\n\t\tsub_set = True\r\n\telif len(s) > len(l):\r\n\t\tsub_set = False\r\n\telse:\r\n\t\tfor i in range(len(l)):\r\n\t\t\tif l[i] == s[0]:\r\n\t\t\t\tn = 1\r\n\t\t\t\twhile (n < len(s)) and (l[i+n] == s[n]):\r\n\t\t\t\t\tn += 1\t\t\t\t\r\n\t\t\t\tif n == len(s):\r\n\t\t\t\t\tsub_set = True\r\n\treturn sub_set"
    },
    {
        "number": 70,
        "prompt": "Write a function to find whether all the given tuples have equal length or not.\ndef find_equal_tuple(Input, k):\n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    length = len(Input[0])\n    for tup in Input:\n        if len(tup) != length:\n            return False\n    return True\n\n# Test cases\nInput = [(1, 2, 3), (4, 5, 6, 7), (8, 9), (10, 11, 12, 13)]\nprint(find_equal_tuple(Input, 2)) # Output: False\n\nInput = [(1, 2, 3, 4), (4, 5, 6, 7), (8, 9, 10), (11, 12, 13)]\nprint(find_equal_tuple(Input, 3)) # Output: True\n\nInput = [(1, 2), (3, 4, 5), (6, 7)]\nprint(find_equal_tuple(Input, 2)) # Output: True\n\nInput = [(1, 2, 3, 4), (4, 5, 6), (7, 8, 9, 10)]\nprint(find_equal_tuple(Input, 3)) # Output: False\n\nInput = [(1, 2, 3, 4), (4, 5, 6), (7, 8, 9)]\nprint(find_equal_tuple(Input, 3)) # Output: False\n\nInput = [(1, 2, 3), (4, 5), (6, 7)]\n",
        "generated_testcode": "assert find_equal_tuple([(1,2,3), (4,5,6), (7,8,9), (10,11,12)], 3) == True\n",
        "test": "assert get_equal([(11, 22, 33), (44, 55, 66)], 3) == 'All tuples have same length'\nassert get_equal([(1, 2, 3), (4, 5, 6, 7)], 3) == 'All tuples do not have same length'\nassert get_equal([(1, 2), (3, 4)], 2) == 'All tuples have same length'",
        "canonical_solution": "def find_equal_tuple(Input, k):\r\n  flag = 1\r\n  for tuple in Input:\r\n    if len(tuple) != k:\r\n      flag = 0\r\n      break\r\n  return flag\r\ndef get_equal(Input, k):\r\n  if find_equal_tuple(Input, k) == 1:\r\n    return (\"All tuples have same length\")\r\n  else:\r\n    return (\"All tuples do not have same length\")"
    },
    {
        "number": 71,
        "prompt": "Write a function to sort a list of elements using comb sort.\ndef comb_sort(nums):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    n = len(nums)\n    shrink_factor = 1.3\n    gap = n\n    sorted = False\n    while not sorted:\n        gap = int(gap/shrink_factor)\n        if gap <= 1:\n            sorted = True\n        for i in range(n-1):\n            if nums[i] > nums[i+1]:\n                nums[i], nums[i+1] = nums[i+1], nums[i]\n                sorted = False\n            if gap > 1:\n                sorted = False\n        for i in range(n-gap):\n            if nums[i] > nums[i+gap]:\n                nums[i], nums[i+gap] = nums[i+gap], nums[i]\n                sorted = False\n    return nums\n\n# Example usage:\nnums = [34, 2, 15, 67, 99, 23, 85, 12, 62, 88, 43, 16, 58, 79, 32]\nprint(comb_sort(nums))\n",
        "generated_testcode": "assert comb_sort([3, 1, 4, 2, 1, 0, 5, 6, 7, 2, 8, 3] ) == [0, 1, 1, 2, 2, 3, 3, 4, 5, 6, 7, 8]\n",
        "test": "assert comb_sort([5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79]\nassert comb_sort([41, 32, 15, 19, 22]) == [15, 19, 22, 32, 41]\nassert comb_sort([99, 15, 13, 47]) == [13, 15, 47, 99]",
        "canonical_solution": "def comb_sort(nums):\r\n    shrink_fact = 1.3\r\n    gaps = len(nums)\r\n    swapped = True\r\n    i = 0\r\n    while gaps > 1 or swapped:\r\n        gaps = int(float(gaps) / shrink_fact)\r\n        swapped = False\r\n        i = 0\r\n        while gaps + i < len(nums):\r\n            if nums[i] > nums[i+gaps]:\r\n                nums[i], nums[i+gaps] = nums[i+gaps], nums[i]\r\n                swapped = True\r\n            i += 1\r\n    return nums"
    },
    {
        "number": 72,
        "prompt": "Write a python function to check whether the given number can be represented as difference of two squares or not.\ndef dif_Square(n): \n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    for i in range(1, int(n**0.5)+1):\n        for j in range(1, int(n**0.5)+1):\n            if i**2 + j**2 == n:\n                return True\n    return False\n\n# Test the function\nprint(dif_Square(9)) # True\nprint(dif_Square(10)) # True\nprint(dif_Square(20)) # True\nprint(dif_Square(21)) # False\nprint(dif_Square(25)) # False\nprint(dif_Square(37)) # False\nprint(dif_Square(40)) # True\nprint(dif_Square(41)) # False\nprint(dif_Square(65)) # True\nprint(dif_Square(66)) # False\nprint(dif_Square(75)) # False\nprint(dif_Square(100)) # True\nprint(dif_Square(101)) # False\nprint(dif_Square(102)) # False\nprint(dif_Square(103)) # False\nprint(dif_Square(104)) # True\nprint(dif_Square(105)) # False\nprint(dif_Square(121)) # False\nprint(dif_Square(122)) # False\nprint(dif_Square(123))",
        "generated_testcode": "assert dif_Square(1) == True\n",
        "test": "assert dif_Square(5) == True\nassert dif_Square(10) == False\nassert dif_Square(15) == True",
        "canonical_solution": "def dif_Square(n): \r\n    if (n % 4 != 2): \r\n        return True\r\n    return False"
    },
    {
        "number": 73,
        "prompt": "Write a function to split the given string with multiple delimiters by using regex.\ndef multiple_split(text):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    delimiters = [' ', ', ',', '.', ';', ':', '-', '\\n']\n    regex_string = '|'.join(map(re.escape, delimiters)\n    return re.split(regex_string, text)\n\n#Example usage:\ntext = \"This is a test text, with some, random; words! and some-new lines.\\nAnd a few more.\"\nprint(multiple_split(text))\n\n#Output: ['This', 'is', 'a', 'test', 'text', 'with', 'some', 'random', 'words', 'and', 'some', 'new', 'lines', 'And', 'a', 'few', 'more.']\n",
        "generated_testcode": "assert multiple_split(\"Hello, how are you? I am fine, thank you.\") == [\"Hello\", \"how\", \"are\", \"you\", \"I\", \"am\", \"fine\", \"thank\", \"you.\"]\n",
        "test": "assert multiple_split('Forces of the \\ndarkness*are coming into the play.') == ['Forces of the ', 'darkness', 'are coming into the play.']\nassert multiple_split('Mi Box runs on the \\n Latest android*which has google assistance and chromecast.') == ['Mi Box runs on the ', ' Latest android', 'which has google assistance and chromecast.']\nassert multiple_split('Certain services\\nare subjected to change*over the seperate subscriptions.') == ['Certain services', 'are subjected to change', 'over the seperate subscriptions.']",
        "canonical_solution": "import re\r\ndef multiple_split(text):\r\n  return (re.split('; |, |\\*|\\n',text))"
    },
    {
        "number": 74,
        "prompt": "Write a function to check whether it follows the sequence given in the patterns array.\ndef is_samepatterns(colors, patterns):    \n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    for i in range(len(patterns)):\n        if len(colors) != len(patterns[i]):\n            return False\n        for j in range(len(colors)):\n            if colors[j] != patterns[i][j]:\n                return False\n    return True\n\n\n# Test cases\ncolors1 = [\"A\", \"B\", \"C\", \"D\"]\npatterns1 = [[\"A\", \"B\", \"C\"], [\"A\", \"C\", \"B\"], [\"B\", \"C\", \"A\"]]\nprint(is_samepatterns(colors1, patterns1)) # Should return True\n\ncolors2 = [\"A\", \"B\", \"C\", \"D\"]\npatterns2 = [[\"A\", \"B\", \"C\"]]\nprint(is_samepatterns(colors2, patterns2)) # Should return False\n\ncolors3 = [\"A\", \"B\", \"C\", \"D\", \"E\"]\npatterns3 = [[\"A\", \"B\", \"C\", \"D\", \"E\", \"F\"]\nprint(is_samepatterns(colors3, patterns3)) # Should return False\n\ncolors4 = [\"A\", \"B\", \"C\", \"D\"]\npatterns4 = [[\"A\", \"B\", \"C\"], [\"A\", \"C\", \"B\", \"D\"]\nprint(is_samepatterns(colors4, patterns4)) # Should return False\n\ncolors5 = [\"A\", \"B\", \"C\", \"D\", \"E\", \"F\"]\npatterns5 = [[\"A\", \"",
        "generated_testcode": "assert is_samepatterns(['red', 'blue', 'green', 'yellow', 'purple'], ['red', 'blue', 'green', 'yellow', 'purple']) == True\n",
        "test": "assert is_samepatterns([\"red\",\"green\",\"green\"], [\"a\", \"b\", \"b\"])==True \nassert is_samepatterns([\"red\",\"green\",\"greenn\"], [\"a\",\"b\",\"b\"])==False \nassert is_samepatterns([\"red\",\"green\",\"greenn\"], [\"a\",\"b\"])==False ",
        "canonical_solution": "def is_samepatterns(colors, patterns):    \r\n    if len(colors) != len(patterns):\r\n        return False    \r\n    sdict = {}\r\n    pset = set()\r\n    sset = set()    \r\n    for i in range(len(patterns)):\r\n        pset.add(patterns[i])\r\n        sset.add(colors[i])\r\n        if patterns[i] not in sdict.keys():\r\n            sdict[patterns[i]] = []\r\n\r\n        keys = sdict[patterns[i]]\r\n        keys.append(colors[i])\r\n        sdict[patterns[i]] = keys\r\n\r\n    if len(pset) != len(sset):\r\n        return False   \r\n\r\n    for values in sdict.values():\r\n\r\n        for i in range(len(values) - 1):\r\n            if values[i] != values[i+1]:\r\n                return False\r\n\r\n    return True"
    },
    {
        "number": 75,
        "prompt": "Write a function to find tuples which have all elements divisible by k from the given list of tuples.\ndef find_tuples(test_list, K):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    result = []\n    for t in test_list:\n        if all(i % K == 0 for i in t):\n            result.append(t)\n    return result\n\n# Test the function\ntest_list = [(2, 4, 6), (3, 9, 12), (8, 10, 12), (12, 24, 36), (10, 15, 20), (15, 20, 30), (1, 1, 1), (2, 2, 2)]\nK = 2\nprint(find_tuples(test_list, K)) # Output: [(2, 4, 6), (12, 24, 36), (2, 2, 2)]\nK = 3\nprint(find_tuples(test_list, K)) # Output: [(2, 4, 6), (12, 24, 36)]\n\n# Explanation: \n# The first tuple has all elements divisible by 2, second tuple has all elements divisible by 3, third tuple has all elements divisible by 2, \n# and the fourth tuple has all elements divisible by 3. The fifth tuple has elements divisible by 2 and 3, but the sixth tuple has only elements that are themselves divisible by 2. ",
        "generated_testcode": "assert find_tuples([(1, 2, 3, 4), (5, 6, 7), (8, 9, 10), (11, 12, 13), (14, 15, 16)], 3) == [(1, 2, 3, 4), (8, 9, 10), (11, 12, 13), (14, 15, 16)]\n",
        "test": "assert find_tuples([(6, 24, 12), (7, 9, 6), (12, 18, 21)], 6) == '[(6, 24, 12)]'\nassert find_tuples([(5, 25, 30), (4, 2, 3), (7, 8, 9)], 5) == '[(5, 25, 30)]'\nassert find_tuples([(7, 9, 16), (8, 16, 4), (19, 17, 18)], 4) == '[(8, 16, 4)]'",
        "canonical_solution": "def find_tuples(test_list, K):\r\n  res = [sub for sub in test_list if all(ele % K == 0 for ele in sub)]\r\n  return (str(res)) "
    },
    {
        "number": 76,
        "prompt": "Write a python function to count the number of squares in a rectangle.\ndef count_Squares(m,n):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    count = 0\n    for i in range(1,m+1):\n        count += i**2\n    for i in range(1,n+1):\n        count += i**2\n    return count\n\n#test the function with example inputs\nprint(count_Squares(4,3)) #should return 22\nprint(count_Squares(5,5)) #should return 30\nprint(count_Squares(7,8)) #should return 445\n\n#create a function to count the number of perfect squares in a rectangle\ndef count_Perfect_Squares(m,n):\n    count = 0\n    for i in range(1,m+1):\n        for j in range(1,n+1):\n            if i**2 + j**2 == (m**2 + n**2):\n                count += 1\n    return count\n\n#test the function with example inputs\nprint(count_Perfect_Squares(4,3)) #should return 1\nprint(count_Perfect_Squares(5,5)) #should return 4\nprint(count_Perfect_Squares(7,8)) #should return 7\n\n#create a function to count the number of triangles in a rectangle\ndef count_Triangles(m,n):\n    count = 0\n    for i in range(1,m+1):\n        for j in range(1,n+1):\n            count += i*j\n    return",
        "generated_testcode": "assert count_Squares(3,4) == 9\n",
        "test": "assert count_Squares(4,3) == 20\nassert count_Squares(2,2) == 5\nassert count_Squares(1,1) == 1",
        "canonical_solution": "def count_Squares(m,n):\r\n    if(n < m):\r\n        temp = m\r\n        m = n\r\n        n = temp\r\n    return ((m * (m + 1) * (2 * m + 1) / 6 + (n - m) * m * (m + 1) / 2))"
    },
    {
        "number": 77,
        "prompt": "Write a python function to find the difference between sum of even and odd digits.\ndef is_Diff(n): \n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    even_sum = 0\n    odd_sum = 0\n    for i in n:\n        if i % 2 == 0:\n            even_sum += i\n        else:\n            odd_sum += i\n    return even_sum - odd_sum\n\n\ndef main():\n    n = int(input(\"Enter a number: \"))\n    print(is_Diff(n))\n\n\nif __name__ == \"__main__\":\n    main()\n",
        "generated_testcode": "assert is_Diff(12345) == 8\n",
        "test": "assert is_Diff (12345) == False\nassert is_Diff(1212112) == True\nassert is_Diff(1212) == False",
        "canonical_solution": "def is_Diff(n): \r\n    return (n % 11 == 0) "
    },
    {
        "number": 78,
        "prompt": "Write a python function to find number of integers with odd number of set bits.\ndef count_With_Odd_SetBits(n): \n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    count = 0\n    for i in range(1,n+1):\n        bin_i = bin(i)[2:]\n        if bin_i.count('1')%2 != 0:\n            count += 1\n    return count\n\nprint(count_With_Odd_SetBits(255)) # Output: 10\nprint(count_With_Odd_SetBits(100)) # Output: 4\nprint(count_With_Odd_SetBits(15)) # Output: 6\nprint(count_With_Odd_SetBits(30)) # Output: 8\n",
        "generated_testcode": "assert count_With_Odd_SetBits(10) == 1\n",
        "test": "assert count_With_Odd_SetBits(5) == 3\nassert count_With_Odd_SetBits(10) == 5\nassert count_With_Odd_SetBits(15) == 8",
        "canonical_solution": "def count_With_Odd_SetBits(n): \r\n    if (n % 2 != 0): \r\n        return (n + 1) / 2\r\n    count = bin(n).count('1') \r\n    ans = n / 2\r\n    if (count % 2 != 0): \r\n        ans += 1\r\n    return ans "
    },
    {
        "number": 79,
        "prompt": "Write a python function to check whether the length of the word is odd or not.\ndef word_len(s): \n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    if len(s)%2 != 0: \n        return True\n    else: \n        return False\n\n# Test the function \nprint(word_len(\"hello\")) # True \nprint(word_len(\"world\")) # True \nprint(word_len(\"Python\")) # False ",
        "generated_testcode": "assert word_len(\"hello\") == False\n",
        "test": "assert word_len(\"Hadoop\") == False\nassert word_len(\"great\") == True\nassert word_len(\"structure\") == True",
        "canonical_solution": "def word_len(s): \r\n    s = s.split(' ')   \r\n    for word in s:    \r\n        if len(word)%2!=0: \r\n            return True  \r\n        else:\r\n          return False"
    },
    {
        "number": 80,
        "prompt": "Write a function to find the nth tetrahedral number.\ndef tetrahedral_number(n): \n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    return (n * (n * (n + 1)) // 2) * (n * (n + 1) // 2) ",
        "generated_testcode": "assert tetrahedral_number(1) == 1\n",
        "test": "assert tetrahedral_number(5) == 35.0\nassert tetrahedral_number(6) == 56.0\nassert tetrahedral_number(7) == 84.0",
        "canonical_solution": "def tetrahedral_number(n): \r\n\treturn (n * (n + 1) * (n + 2)) / 6"
    },
    {
        "number": 81,
        "prompt": "Write a function to zip the two given tuples.\ndef zip_tuples(test_tup1, test_tup2):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    # Initialize the result tuple\n    zipped_tuple = ()\n    # Check if the length of both tuples are equal\n    if len(test_tup1) == len(test_tup2):\n        # Loop through the tuples\n        for i in range(len(test_tup1)):\n            # Append the i-th element of test_tup1 and test_tup2 to the zipped_tuple\n            zipped_tuple += (test_tup1[i], test_tup2[i])\n    else:\n        # If the tuples are not of equal length, return None\n        return None\n    # Return the zipped tuple\n    return zipped_tuple\n\n\n# Test the function with sample inputs\ntup1 = (1, 2, 3, 4)\ntup2 = (5, 6, 7, 8, 9)\nprint(zip_tuples(tup1, tup2))  # Output: (1, 5), (2, 6), (3, 7), (4, 8)\n\ntup1 = (1, 2, 3, 4)\ntup2 = (5, 6, 7)\nprint(zip_tuples(tup1, tup2))  # Output: None\n\ntup1 = (1, 2, 3)\ntup2 = (5, 6, 7, 8, 9)\nprint(zip_tuples(tup1,",
        "generated_testcode": "assert zip_tuples((1, 2, 3, 4), (5, 6, 7, 8) == [(1, 5), (2, 6), (3, 7), (4, 8)]\n",
        "test": "assert zip_tuples((7, 8, 4, 5, 9, 10),(1, 5, 6) ) == [(7, 1), (8, 5), (4, 6), (5, 1), (9, 5), (10, 6)]\nassert zip_tuples((8, 9, 5, 6, 10, 11),(2, 6, 7) ) == [(8, 2), (9, 6), (5, 7), (6, 2), (10, 6), (11, 7)]\nassert zip_tuples((9, 10, 6, 7, 11, 12),(3, 7, 8) ) == [(9, 3), (10, 7), (6, 8), (7, 3), (11, 7), (12, 8)]",
        "canonical_solution": "def zip_tuples(test_tup1, test_tup2):\r\n  res = []\r\n  for i, j in enumerate(test_tup1):\r\n    res.append((j, test_tup2[i % len(test_tup2)])) \r\n  return (res) "
    },
    {
        "number": 82,
        "prompt": "Write a function to find the volume of a sphere.\ndef volume_sphere(r):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    \"\"\"\n    Calculate the volume of a sphere\n    \"\"\"\n    pi = 3.14159\n    vol = (4/3) * pi * r**3\n    return vol\n\n\n# Test the function with a radius of 5\nprint(volume_sphere(5))  # Output: 523.6\n\n\n# Test the function with a radius of 10\nprint(volume_sphere(10))  # Output: 153.9\n\n\n# Test the function with a radius of 0\nprint(volume_sphere(0)  # Output: 0 ",
        "generated_testcode": "assert volume_sphere(5) == 523.598, \"Incorrect volume calculation for radius 5\"\n",
        "test": "assert volume_sphere(10)==4188.790204786391\nassert volume_sphere(25)==65449.84694978735\nassert volume_sphere(20)==33510.32163829113",
        "canonical_solution": "import math\r\ndef volume_sphere(r):\r\n  volume=(4/3)*math.pi*r*r*r\r\n  return volume"
    },
    {
        "number": 83,
        "prompt": "Write a python function to find the character made by adding all the characters of the given string.\ndef get_Char(strr):  \n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    strr = list(strr)\n    strr.sort()\n    strr = \"\".join(strr)\n    res = \"\"\n    for i in strr:\n        if strr.count(i) % 2 != 0:\n            res += i\n    return res\n# Test the function with an example\nprint(get_Char(\"helloworld\")) #Output: \"l\"\nprint(get_Char(\"ababca\")) #Output: \"a\"\nprint(get_Char(\"Python\")) #Output: \"n\"\nprint(get_Char(\"racecar\")) #Output: \"r\"\n\n# Function to find the character made by adding all the characters of the given string using set and lambda function\ndef get_Char(strr):\n    char_set = set(strr)\n    char_list = list(char_set)\n    char_list.sort()\n    char_list = list(filter(lambda x:strr.count(x) % 2 != 0, char_list))\n    return char_list[0] if char_list else None",
        "generated_testcode": "assert get_Char(\"hello\") == \"h\"\n",
        "test": "assert get_Char(\"abc\") == \"f\"\nassert get_Char(\"gfg\") == \"t\"\nassert get_Char(\"ab\") == \"c\"",
        "canonical_solution": "def get_Char(strr):  \r\n    summ = 0\r\n    for i in range(len(strr)): \r\n        summ += (ord(strr[i]) - ord('a') + 1)  \r\n    if (summ % 26 == 0): \r\n        return ord('z') \r\n    else: \r\n        summ = summ % 26\r\n        return chr(ord('a') + summ - 1)"
    },
    {
        "number": 84,
        "prompt": "Write a function to find the n-th number in newman conway sequence.\ndef sequence(n): \n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    elif n == 3:\n        return 1\n    else:\n        sequence = [0, 1, 1]\n        for i in range(4, n+1):\n            sequence.append(sequence[sequence[sequence[i-1]]+sequence[i-2])]\n        return sequence[n]\n\n\n# Test cases\nprint(sequence(0))  # Output: 0\nprint(sequence(1))  # Output: 1\nprint(sequence(2))  # Output: 1\nprint(sequence(3))  # Output: 1\nprint(sequence(4))  # Output: 2\nprint(sequence(5))  # Output: 3\nprint(sequence(6))  # Output: 5\nprint(sequence(7))  # Output: 10\nprint(sequence(8))  # Output: 21\nprint(sequence(9))  # Output: 70\nprint(sequence(10)) # Output: 208\n",
        "generated_testcode": "assert sequence(1) == [1]\n",
        "test": "assert sequence(10) == 6\nassert sequence(2) == 1\nassert sequence(3) == 2",
        "canonical_solution": "def sequence(n): \r\n\tif n == 1 or n == 2: \r\n\t\treturn 1\r\n\telse: \r\n\t\treturn sequence(sequence(n-1)) + sequence(n-sequence(n-1))"
    },
    {
        "number": 85,
        "prompt": "Write a function to find the surface area of a sphere.\ndef surfacearea_sphere(r):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    import math\n    surface_area = 4*math.pi*r**2\n    return surface_area\n\n# Test the function with a sample input\nprint(surfacearea_sphere(3)) # Output: 1133.98243419985998599757\n\n# Test the function with another sample input\nprint(surfacearea_sphere(5)) # Output: 78.5398163339744043038\n",
        "generated_testcode": "assert surfacearea_sphere(5) == 314.1598957458617000079\nprint(\"Test case 1 passed\")\n\n",
        "test": "assert surfacearea_sphere(10)==1256.6370614359173\nassert surfacearea_sphere(15)==2827.4333882308138\nassert surfacearea_sphere(20)==5026.548245743669",
        "canonical_solution": "import math\r\ndef surfacearea_sphere(r):\r\n  surfacearea=4*math.pi*r*r\r\n  return surfacearea"
    },
    {
        "number": 86,
        "prompt": "Write a function to find nth centered hexagonal number.\ndef centered_hexagonal_number(n):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    # nth centered hexagonal number can be calculated using formula\n    # nth centered hexagonal number = (n * (2n - 1) * n) / 2\n    return int((n * (2 * n - 1) * n) / 2)\n\n# test the function\nprint(centered_hexagonal_number(1)) # should print 1\nprint(centered_hexagonal_number(2)) # should print 6\nprint(centered_hexagonal_number(3)) # should print 15\nprint(centered_hexagonal_number(4)) # should print 28\nprint(centered_hexagonal_number(5)) # should print 45\nprint(centered_hexagonal_number(10)) # should print 1554\n\n\n# Alternatively, we can also use a loop to find the nth centered hexagonal number\ndef centered_hexagonal_number(n):\n    # initialize counter to 0\n    count = 0\n    # loop through all numbers\n    for i in range(1, n+1):\n        # for each number, check if it is a centered hexagonal number\n        # a centered hexagonal number is a number that can be expressed as a+b+c where a, b, and c are integers and 2*a+b+c = n\n        for a in range(n):\n            b = (n - a)\n            c = n - a - b\n            if 2*",
        "generated_testcode": "assert centered_hexagonal_number(1) == 1\n",
        "test": "assert centered_hexagonal_number(10) == 271\nassert centered_hexagonal_number(2) == 7\nassert centered_hexagonal_number(9) == 217",
        "canonical_solution": "def centered_hexagonal_number(n):\r\n  return 3 * n * (n - 1) + 1"
    },
    {
        "number": 87,
        "prompt": "Write a function to merge three dictionaries into a single expression.\ndef merge_dictionaries_three(dict1,dict2, dict3):\n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    merged_dict = {}\n    for key in dict1:\n        merged_dict[key] = dict1[key]\n    for key in dict2:\n        merged_dict[key] = dict2[key]\n    for key in dict3:\n        merged_dict[key] = dict3[key]\n    return merged_dict\n\n\n#Test the function with sample inputs\ndict1 = {'a': 1, 'b': 2, 'c': 3, 'd': 4}\ndict2 = {'d': 5, 'e': 6, 'f': 7}\ndict3 = {'f': 8, 'g': 9, 'h': 10}\nprint(merge_dictionaries_three(dict1,dict2,dict3)) # {'a': 1, 'b': 2, 'c': 3, 'd': 5, 'e': 6, 'f': 8, 'g': 9, 'h': 10}\n\ndict1 = {'a': 1, 'b': 2}\ndict2 = {'c': 3, 'd': 4}\ndict3 = {'d': 5, 'e': 6}\nprint(merge_dictionaries_three(dict1,dict2,dict3)) # {'a': 1, 'b': 2, 'c': 3, 'd': 5, 'e': 6}\n\ndict1 = {}\ndict2 = {'c': 3, 'd': 4",
        "generated_testcode": "assert merge_dictionaries_three({'a': 1, 'b': 2, 'c': 3}, {'d': 4, 'e': 5}, {'f': 6, 'g': 7}) == {'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5, 'f': 6, 'g': 7}\n",
        "test": "assert merge_dictionaries_three({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" }, { \"G\": \"Green\", \"W\": \"White\" },{ \"O\": \"Orange\", \"W\": \"White\", \"B\": \"Black\" })=={'B': 'Black', 'R': 'Red', 'P': 'Pink', 'G': 'Green', 'W': 'White', 'O': 'Orange'}\nassert merge_dictionaries_three({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" }, { \"G\": \"Green\", \"W\": \"White\" },{\"L\":\"lavender\",\"B\":\"Blue\"})=={'W': 'White', 'P': 'Pink', 'B': 'Black', 'R': 'Red', 'G': 'Green', 'L': 'lavender'}\nassert merge_dictionaries_three({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" },{\"L\":\"lavender\",\"B\":\"Blue\"},{ \"G\": \"Green\", \"W\": \"White\" })=={'B': 'Black', 'P': 'Pink', 'R': 'Red', 'G': 'Green', 'L': 'lavender', 'W': 'White'}",
        "canonical_solution": "import collections as ct\r\ndef merge_dictionaries_three(dict1,dict2, dict3):\r\n    merged_dict = dict(ct.ChainMap({},dict1,dict2,dict3))\r\n    return merged_dict"
    },
    {
        "number": 88,
        "prompt": "Write a function to get the frequency of the elements in a list.\ndef freq_count(list1):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    freq_dict = {}\n    for i in list1:\n        if i in freq_dict:\n            freq_dict[i] += 1\n        else:\n            freq_dict[i] = 1\n    return freq_dict\n\n#test\nprint(freq_count([1, 2, 3, 4, 5, 2, 3, 4, 5, 6, 2, 4, 4, 4, 1]))\n#Output: {1: 2, 2: 3, 3: 2, 4: 3, 5: 2, 6: 1}\n\n#Explanation: 1 occurs twice, 2 occurs three times, 3 occurs two times, 4 occurs three times and 5 occurs two times.\n#There is no element 6 in the list.\n\n#You can also use Counter from the collections module in Python to achieve this result.\nfrom collections import Counter\ndef freq_count(list1):\n    return dict(Counter(list1))\n#Test\nprint(freq_count([1, 2, 3, 4, 5, 2, 3, 4, 5, 6, 2, 4, 4, 1]))\n#Output: {1: 2, 2: 3, 3: 2, 4: 3, 5: 2, 6: 1}\n#Explanation: 1",
        "generated_testcode": "assert freq_count([\"apple\", \"banana\", \"orange\", \"apple\", \"banana\", \"apple\", \"orange\", \"banana\", \"orange\"] == {'apple': 3, 'banana': 3, 'orange': 3}\n",
        "test": "assert freq_count([10,10,10,10,20,20,20,20,40,40,50,50,30])==({10: 4, 20: 4, 40: 2, 50: 2, 30: 1}) \nassert freq_count([1,2,3,4,3,2,4,1,3,1,4])==({1:3, 2:2,3:3,4:3}) \nassert freq_count([5,6,7,4,9,10,4,5,6,7,9,5])==({10:1,5:3,6:2,7:2,4:2,9:2}) ",
        "canonical_solution": "import collections\r\ndef freq_count(list1):\r\n  freq_count= collections.Counter(list1)\r\n  return freq_count"
    },
    {
        "number": 89,
        "prompt": "Write a function to find the closest smaller number than n.\ndef closest_num(N):\n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    nums = list(range(1,N+1))\n    nums.reverse()\n    for i in nums:\n        if i < N:\n            return i\n\n# Test cases\nprint(closest_num(10)) # Output: 9\nprint(closest_num(15)) # Output: 14\nprint(closest_num(20)) # Output: 19\nprint(closest_num(23)) # Output: 22\nprint(closest_num(100)) # Output: 9\n",
        "generated_testcode": "assert closest_num(10) == 9\n",
        "test": "assert closest_num(11) == 10\nassert closest_num(7) == 6\nassert closest_num(12) == 11",
        "canonical_solution": "def closest_num(N):\r\n  return (N - 1)"
    },
    {
        "number": 90,
        "prompt": "Write a python function to find the length of the longest word.\ndef len_log(list1):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    max_length = 0\n    for i in list1:\n        if len(i) > max_length:\n            max_length = len(i)\n    return max_length\n\n#Test the function\nlist1 = [\"hello\",\"world\",\"python\",\"programming\",\"programming\",\"is\",\"fun\"]\nprint(len_log(list1)) # Output: 6\nlist2 = [\"i\",\"am\",\"a\",\"cat\"]\nprint(len_log(list2)) # Output: 3\nlist3 = [\"apple\",\"banana\",\"orange\",\"kiwi\",\"pear\"]\nprint(len_log(list3)) # Output: 6\nlist4 = [\"longest\",\"word\",\"in\",\"the\",\"list\"]\nprint(len_log(list4)) # Output: 6 ",
        "generated_testcode": "assert len_log(['hello', 'world', 'python', 'programming']) == 6\n",
        "test": "assert len_log([\"python\",\"PHP\",\"bigdata\"]) == 7\nassert len_log([\"a\",\"ab\",\"abc\"]) == 3\nassert len_log([\"small\",\"big\",\"tall\"]) == 5",
        "canonical_solution": "def len_log(list1):\r\n    max=len(list1[0])\r\n    for i in list1:\r\n        if len(i)>max:\r\n            max=len(i)\r\n    return max"
    },
    {
        "number": 91,
        "prompt": "Write a function to check if a substring is present in a given list of string values.\ndef find_substring(str1, sub_str):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    for s in str1:\n        if sub_str in s:\n            return True\n    return False\n\n\nstr1 = [\"apple\", \"banana\", \"cherry\", \"grape\", \"kiwi\", \"orange\"]\nsub_str = \"ra\"\nprint(find_substring(str1, sub_str)) # True\nsub_str = \"gra\"\nprint(find_substring(str1, sub_str)) # True\nsub_str = \"ap\"\nprint(find_substring(str1, sub_str)) # True\nsub_str = \"an\"\nprint(find_substring(str1, sub_str)) # False\n",
        "generated_testcode": "assert find_substring(\"hello world\", \"world\") == True\n",
        "test": "assert find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"ack\")==True\nassert find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"abc\")==False\nassert find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"ange\")==True",
        "canonical_solution": "def find_substring(str1, sub_str):\r\n   if any(sub_str in s for s in str1):\r\n       return True\r\n   return False"
    },
    {
        "number": 92,
        "prompt": "Write a function to check whether the given number is undulating or not.\ndef is_undulating(n): \n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    # your code here \n    if n < 3:\n        return True\n    \n    if n % 2 == 0:\n        return False\n    \n    prev = n % 2\n    curr = (n - 2) % 2\n    \n    for i in range(3, n+1, 2):\n        temp = curr\n        curr = (n - i) % 2\n        if curr == prev:\n            return False\n        prev = temp\n    \n    return True\n\n# Test cases \nprint(is_undulating(6)) # True\nprint(is_undulating(12)) # True\nprint(is_undulating(10)) # False\nprint(is_undulating(8)) # False\nprint(is_undulating(7)) # True\nprint(is_undulating(5)) # False\nprint(is_undulating(1)) # False",
        "generated_testcode": "assert is_undulating(123456789) == True\n",
        "test": "assert is_undulating(\"1212121\") == True\nassert is_undulating(\"1991\") == False\nassert is_undulating(\"121\") == True",
        "canonical_solution": "def is_undulating(n): \r\n\tif (len(n) <= 2): \r\n\t\treturn False\r\n\tfor i in range(2, len(n)): \r\n\t\tif (n[i - 2] != n[i]): \r\n\t\t\treturn False\r\n\treturn True"
    },
    {
        "number": 93,
        "prompt": "Write a function to calculate the value of 'a' to the power 'b'.\ndef power(a,b):\n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    result = 1\n    for i in range(b):\n        result *= a\n    return result\n\n#Test the function\nprint(power(2,3)) #Output: 8\nprint(power(3,4)) #Output: 81\nprint(power(5,2)) #Output: 25\nprint(power(10,0)) #Output: 1\nprint(power(0,10)) #Output: 0",
        "generated_testcode": "assert power(2,3) == 8\n",
        "test": "assert power(3,4) == 81\nassert power(2,3) == 8\nassert power(5,5) == 3125",
        "canonical_solution": "def power(a,b):\r\n\tif b==0:\r\n\t\treturn 1\r\n\telif a==0:\r\n\t\treturn 0\r\n\telif b==1:\r\n\t\treturn a\r\n\telse:\r\n\t\treturn a*power(a,b-1)"
    },
    {
        "number": 94,
        "prompt": "Write a function to extract the index minimum value record from the given tuples.\ndef index_minimum(test_list):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    min_val = test_list[0]\n    min_index = 0\n    for i in range(len(test_list)):\n        if test_list[i][1] < min_val[1]:\n            min_val = test_list[i]\n            min_index = i\n    return min_index\n\n# Test the function with a sample list\ntest_list = [(1, 5), (2, 3), (3, 4), (4, 1), (5, 2)]\nprint(index_minimum(test_list))  # Output: 0\n\n\n# Test the function with another sample list\ntest_list = [(10, 20), (30, 10), (20, 30), (15, 25), (5, 15)]\nprint(index_minimum(test_list))  # Output: 3\n\n\n# Test the function with an empty list\ntest_list = []\nprint(index_minimum(test_list))  # Output: None\n\n\n# Test the function with a list of only one tuple\ntest_list = [(10, 20)]\nprint(index_minimum(test_list))  # Output: 0\n\n\n# Test the function with a list of non-tuples\ntest_list = [\"apple\", \"banana\", \"orange\"]\nprint(index_minimum(test_list))  # Output: None\n\n",
        "generated_testcode": "assert index_minimum([(1, 2, 3, 4, 5, 6, 7, 8, 9]) == (0, 1)\n",
        "test": "assert index_minimum([('Rash', 143), ('Manjeet', 200), ('Varsha', 100)]) == 'Varsha'\nassert index_minimum([('Yash', 185), ('Dawood', 125), ('Sanya', 175)]) == 'Dawood'\nassert index_minimum([('Sai', 345), ('Salman', 145), ('Ayesha', 96)]) == 'Ayesha'",
        "canonical_solution": "from operator import itemgetter \r\ndef index_minimum(test_list):\r\n  res = min(test_list, key = itemgetter(1))[0]\r\n  return (res) "
    },
    {
        "number": 95,
        "prompt": "Write a python function to find the minimum length of sublist.\ndef Find_Min_Length(lst):  \n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    n = len(lst)\n    if n == 1:\n        return 1\n    else:\n        min_len = float('inf')\n        for i in range(n):\n            temp_lst = lst[i:]\n            j = 0\n            while j < n - 1:\n                if temp_lst:\n                    temp_lst.append(lst[j])\n                    temp_len = len(temp_lst)\n                    if temp_len < min_len:\n                        min_len = temp_len\n                    j += 1\n                else:\n                    break\n        return min_len\n\n#Test case\nlst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]\nprint(Find_Min_Length(lst)) # Output: 1\nlst = [1, 2, 3, 4, 5, 6, 7, 8, 9]\nprint(Find_Min_Length(lst)) # Output: 1\nlst = [1, 2, 3, 4, 5, 6, 7, 8]\nprint(Find_Min_Length(lst)) # Output: 1\nlst = [1, 2, 3, 4, 5, 6]\nprint(Find_Min_Length(lst)) # Output: 4\nlst = [1, 2, 3, 4, 5]\nprint",
        "generated_testcode": "assert Find_Min_Length([1,2,3,4,5,6,7,8,9]) == 1\n",
        "test": "assert Find_Min_Length([[1],[1,2]]) == 1\nassert Find_Min_Length([[1,2],[1,2,3],[1,2,3,4]]) == 2\nassert Find_Min_Length([[3,3,3],[4,4,4,4]]) == 3",
        "canonical_solution": "def Find_Min_Length(lst):  \r\n    minLength = min(len(x) for x in lst )\r\n    return minLength "
    },
    {
        "number": 96,
        "prompt": "Write a python function to find the number of divisors of a given integer.\ndef divisor(n):\n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    count = 0\n    for i in range(1,n+1):\n        if n % i == 0:\n            count += 1\n    return count\n\n#Test the function\nprint(divisor(6)) # Output: 3\nprint(divisor(12)) # Output: 4\nprint(divisor(20)) # Output: 4\n",
        "generated_testcode": "assert divisor(1) == 1\n",
        "test": "assert divisor(15) == 4 \nassert divisor(12) == 6\nassert divisor(9) == 3",
        "canonical_solution": "def divisor(n):\r\n  for i in range(n):\r\n    x = len([i for i in range(1,n+1) if not n % i])\r\n  return x"
    },
    {
        "number": 97,
        "prompt": "Write a function to find frequency count of list of lists.\ndef frequency_lists(list1):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    freq = {}\n    for i in list1:\n        for j in i:\n            if j in freq:\n                freq[j] += 1\n            else:\n                freq[j] = 1\n    return freq\n\n#Example usage:\nlist1 = [[1,2,3,4,5,6,7], [2,4,6,8,10], [5,4,3,2], [7,8,10,12,1]]\nprint(frequency_lists(list1)) # Output: {1: 1, 2: 3, 3: 2, 4: 2, 5: 2, 6: 2, 7: 2, 8: 2, 10: 2, 12: 1}\n\n\n#Explanation: \n#The frequency of 1 in the first list is 1, 2 appears 3 times, 3 appears 2 times, 4 appears 2 times, 5 appears 2 times, and so on. ",
        "generated_testcode": "assert frequency_lists([\"apple\", \"banana\", \"orange\", \"apple\", \"banana\", \"apple\", \"orange\", \"banana\", \"orange\", \"apple\", \"banana\", \"orange\", \"apple\", \"banana\", \"orange\"] == { \"apple\": 4, \"banana\": 4, \"orange\": 4}\n",
        "test": "assert frequency_lists([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]])=={1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1}\nassert frequency_lists([[1,2,3,4],[5,6,7,8],[9,10,11,12]])=={1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1,10:1,11:1,12:1}\nassert frequency_lists([[20,30,40,17],[18,16,14,13],[10,20,30,40]])=={20:2,30:2,40:2,17: 1,18:1, 16: 1,14: 1,13: 1, 10: 1}",
        "canonical_solution": "def frequency_lists(list1):\r\n    list1 = [item for sublist in list1 for item in sublist]\r\n    dic_data = {}\r\n    for num in list1:\r\n        if num in dic_data.keys():\r\n            dic_data[num] += 1\r\n        else:\r\n            key = num\r\n            value = 1\r\n            dic_data[key] = value\r\n    return dic_data\r\n"
    },
    {
        "number": 98,
        "prompt": "Write a function to multiply all the numbers in a list and divide with the length of the list.\ndef multiply_num(numbers):  \n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    total = 1\n    for num in numbers:\n        total *= num\n    return total / len(numbers)\n\n# Test the function\nprint(multiply_num([2, 5, 3, 7, 9]))\nprint(multiply_num([1, 3, 4, 6, 8, 2]))\nprint(multiply_num([4, 5, 6, 7, 9, 1]))\n\n\n# Write a function to count the number of vowels in a given string\ndef count_vowels(string):\n    vowels = \"aeiouAEIOU\"\n    count = 0\n    for char in string:\n        if char in vowels:\n            count += 1\n    return count\n\n# Test the function\nprint(count_vowels(\"hello world\"))\nprint(count_vowels(\"Python is awesome\"))\nprint(count_vowels(\"Programming is fun\"))\n\n\n# Write a function to reverse a list of strings\ndef reverse_list(lst):\n    return [word[::-1] for word in lst]\n\n# Test the function\nprint(reverse_list([\"hello\", \"world\", \"python\", \"programming\"]))\n\n# Write a function to find the maximum value in a list\ndef max_num(numbers):\n    max_num = numbers[0]\n    for num in numbers:\n        if num > max_num:\n            max_num = num\n    return max_num\n\n",
        "generated_testcode": "assert multiply_num([1, 2, 3, 4, 5]) == 60\n",
        "test": "assert multiply_num((8, 2, 3, -1, 7))==-67.2\nassert multiply_num((-10,-20,-30))==-2000.0\nassert multiply_num((19,15,18))==1710.0",
        "canonical_solution": "def multiply_num(numbers):  \r\n    total = 1\r\n    for x in numbers:\r\n        total *= x  \r\n    return total/len(numbers) "
    },
    {
        "number": 99,
        "prompt": "Write a function to convert the given decimal number to its binary equivalent.\ndef decimal_to_binary(n): \n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    binary = \"\"\n    while n > 0:\n        binary = str(n % 2) + binary\n        n = n // 2\n    return binary\n\n# Test the function\nprint(decimal_to_binary(42))  # Output: \"10101010\"\nprint(decimal_to_binary(25)) # Output: \"110111\"\nprint(decimal_to_binary(13)) # Output: \"11101\"\nprint(decimal_to_binary(1))  # Output: \"1\"\nprint(decimal_to_binary(0))  # Output: \"0\" ",
        "generated_testcode": "assert decimal_to_binary(0) == \"0b0\"\n",
        "test": "assert decimal_to_binary(8) == '1000'\nassert decimal_to_binary(18) == '10010'\nassert decimal_to_binary(7) == '111' ",
        "canonical_solution": "def decimal_to_binary(n): \r\n    return bin(n).replace(\"0b\",\"\") "
    },
    {
        "number": 100,
        "prompt": "Write a function to find the next smallest palindrome of a specified number.\ndef next_smallest_palindrome(num):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    n = str(num)\n    n = list(n)\n    for i in range(len(n) - 1, 0, -1):\n        if n[i] < n[len(n) - 1 - i:]:\n            n[i], n[len(n) - 1 - i] = n[len(n) - 1 - i], n[i]\n            break\n    else:\n        n.append(n[0])\n    return int(\"\".join(n))\n\n\n# test cases\nprint(next_smallest_palindrome(12321))\nprint(next_smallest_palindrome(12345))\nprint(next_smallest_palindrome(999))\nprint(next_smallest_palindrome(9999))\nprint(next_smallest_palindrome(1010101))\nprint(next_smallest_palindrome(12356))\nprint(next_smallest_palindrome(122345))\n\nprint(next_smallest_palindrome(9876543))\nprint(next_smallest_palindrome(99999999))\nprint(next_smallest_palindrome(999999999))\n\n\n\n# optimized version using Python slice\ndef next_smallest_palindrome(num):\n    n = str(num)\n    if len",
        "generated_testcode": "assert next_smallest_palindrome(12321) == 12345\n",
        "test": "assert next_smallest_palindrome(99)==101\nassert next_smallest_palindrome(1221)==1331\nassert next_smallest_palindrome(120)==121",
        "canonical_solution": "import sys\r\ndef next_smallest_palindrome(num):\r\n    numstr = str(num)\r\n    for i in range(num+1,sys.maxsize):\r\n        if str(i) == str(i)[::-1]:\r\n            return i"
    },
    {
        "number": 101,
        "prompt": "Write a function to find the kth element in the given array.\ndef kth_element(arr, n, k):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    if k < 0 or k > n:\n        return None\n    if k == 0:\n        return arr[0]\n    if k == 1:\n        return max(arr[0], arr[n-1])\n    if k == n:\n        return min(arr[0], arr[n-1])\n    if k % 2 == 0:\n        return (kth_element(arr, n-1, k-1) + kth_element(arr, n-1, k+1))/2\n    else:\n        return kth_element(arr, n-1, k-1)\n\n\n# Test cases\nprint(kth_element([1, 3, 5, 2, 4, 6, 7, 8, 9, 0], 2, 3))\nprint(kth_element([1, 3, 5, 2, 4, 6, 7, 8, 9, 0], 1, 3))\nprint(kth_element([1, 3, 5, 2, 4, 6, 7, 8, 9, 0], 3, 3))\nprint(kth_element([1, 3, 5, 2, 4, 6, 7, 8, 9, 0], 0, 1))\nprint(kth_element([1, 3, 5, 2, 4, 6, 7",
        "generated_testcode": "assert kth_element([1, 2, 3, 4, 5, 6, 7, 8, 9], 3) == 5\n",
        "test": "assert kth_element([12,3,5,7,19], 5, 2) == 3\nassert kth_element([17,24,8,23], 4, 3) == 8\nassert kth_element([16,21,25,36,4], 5, 4) == 36",
        "canonical_solution": "def kth_element(arr, n, k):\r\n  for i in range(n):\r\n    for j in range(0, n-i-1):\r\n      if arr[j] > arr[j+1]:\r\n        arr[j], arr[j+1] == arr[j+1], arr[j]\r\n  return arr[k-1]"
    },
    {
        "number": 102,
        "prompt": "Write a function to convert snake case string to camel case string.\ndef snake_to_camel(word):\n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    words = word.split(\"_\")\n    return words[0] + \"\".join(word.title() for word in words[1:])\n\n\n\n# Test cases\nprint(snake_to_camel(\"hello_world_how_are_you\"))  # should return HelloWorldHowAreYou\nprint(snake_to_camel(\"i_am_learning_python\"))  # should return IAmLearningPython\nprint(snake_to_camel(\"i_am_a_good_programmer\"))  # should return IAmAGoodProgrammer\nprint(snake_to_camel(\"hello_world_this_is_a_test\"))  # should return HelloWorldThisIsATest\nprint(snake_to_camel(\"i_am_going_to_write_code\"))  # should return IAmGoingToWriteCode ",
        "generated_testcode": "assert snake_to_camel(\"hello_world\") == \"helloWorld\"\n",
        "test": "assert snake_to_camel('python_program')=='PythonProgram'\nassert snake_to_camel('python_language')==('PythonLanguage')\nassert snake_to_camel('programming_language')==('ProgrammingLanguage')",
        "canonical_solution": "def snake_to_camel(word):\r\n        import re\r\n        return ''.join(x.capitalize() or '_' for x in word.split('_'))"
    },
    {
        "number": 103,
        "prompt": "Write a function to find eulerian number a(n, m).\ndef eulerian_num(n, m): \n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    if n == 0 and m == 0:\n        return 1\n    elif n == 0:\n        return 0\n    elif m == 0:\n        return 1\n    elif n == 1:\n        return 1\n    elif m == 1:\n        return 1\n    else:\n        return (eulerian_num(n - 1, m) + eulerian_num(n - 1, m - 1))\n\n\n# Test cases\nprint(eulerian_num(0, 0)) # Output: 1\nprint(eulerian_num(0, 1)) # Output: 0\nprint(eulerian_num(1, 0)) # Output: 1\nprint(eulerian_num(1, 1)) # Output: 1\nprint(eulerian_num(2, 0)) # Output: 1\nprint(eulerian_num(2, 1)) # Output: 1\nprint(eulerian_num(3, 0)) # Output: 1\nprint(eulerian_num(3, 1)) # Output: 1\nprint(eulerian_num(4, 0)) # Output: 1\nprint(eulerian_num(4, 1)) # Output: 1\nprint(eulerian_num(5, 0)) # Output: 1\nprint(eulerian_num(5, 1)) # Output: 1\nprint(eulerian_num(",
        "generated_testcode": "assert eulerian_num(1, 1) == 1\n",
        "test": "assert eulerian_num(3, 1) == 4\nassert eulerian_num(4, 1) == 11\nassert eulerian_num(5, 3) == 26",
        "canonical_solution": "def eulerian_num(n, m): \r\n\tif (m >= n or n == 0): \r\n\t\treturn 0 \r\n\tif (m == 0): \r\n\t\treturn 1 \r\n\treturn ((n - m) * eulerian_num(n - 1, m - 1) +(m + 1) * eulerian_num(n - 1, m))"
    },
    {
        "number": 104,
        "prompt": "Write a function to sort each sublist of strings in a given list of lists using lambda function.\ndef sort_sublists(input_list):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    sorted_list = []\n    for sublist in input_list:\n        sorted_sublist = sorted(sublist, key=lambda x: len(x))\n        sorted_list.append(sorted_sublist)\n    return sorted_list\n\n#Test the function\nmy_list = [['cat', 'dog', 'fish', 'elephant'], ['banana', 'apple', 'orange', 'grape'], ['bird', 'car', 'train', 'bike']]\nprint(sort_sublists(my_list))\n#Output: [['dog', 'cat', 'fish'], ['apple', 'banana', 'orange'], ['bike', 'car', 'bird', 'train']] ",
        "generated_testcode": "assert sort_sublists([\"apple\", \"banana\", \"cherry\", \"date\", \"elderberry\", \"fig\", \"grape\", \"kiwi\", \"lemon\", \"orange\", \"plum\", \"strawberry\"] == [\"apple\", \"banana\", \"cherry\", \"date\", \"elderberry\", \"fig\", \"grape\", \"kiwi\", \"lemon\", \"orange\", \"plum\", \"strawberry\"]\n",
        "test": "assert sort_sublists(([\"green\", \"orange\"], [\"black\", \"white\"], [\"white\", \"black\", \"orange\"]))==[['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\nassert sort_sublists(([\" red \",\"green\" ],[\"blue \",\" black\"],[\" orange\",\"brown\"]))==[[' red ', 'green'], [' black', 'blue '], [' orange', 'brown']]\nassert sort_sublists(([\"zilver\",\"gold\"], [\"magnesium\",\"aluminium\"], [\"steel\", \"bronze\"]))==[['gold', 'zilver'],['aluminium', 'magnesium'], ['bronze', 'steel']]",
        "canonical_solution": "def sort_sublists(input_list):\r\n    result = [sorted(x, key = lambda x:x[0]) for x in input_list] \r\n    return result\r"
    },
    {
        "number": 105,
        "prompt": "Write a python function to count true booleans in the given list.\ndef count(lst):   \n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    count = 0\n    for i in lst:\n        if i == True:\n            count += 1\n    return count\n\n#Example usage:\nlst = [True, False, True, False, True, False, True]\nprint(count(lst)) # Output: 3\n\nlst = [True, False, False, False, False, False]\nprint(count(lst)) # Output: 1\n\nlst = [False, False, False, False, False]\nprint(count(lst)) # Output: 0\n\n\n#Alternative solution using list comprehension:\ndef count_true(lst):\n    return len([True for i in lst if i])\n\n#Example usage:\nlst = [True, False, True, False, True, False]\nprint(count_true(lst)) # Output: 2\nlst = [True, False, False, False, False]\nprint(count_true(lst)) # Output: 1\nlst = [False, False, False, False, False]\nprint(count_true(lst)) # Output: 0\n\n\n#Alternative solution using built-in function count():\ndef count_true(lst):\n    return lst.count(True)\n#Example usage:\nlst = [True, False, True, False, True, False]\nprint(count_true(lst)) # Output: 2\nlst = [True, False, False, False, False]\nprint(count_true(lst)) # Output: 1\nlst = [False, False,",
        "generated_testcode": "assert count([True, False, True, False, True, False, True]) == 3\n",
        "test": "assert count([True,False,True]) == 2\nassert count([False,False]) == 0\nassert count([True,True,True]) == 3",
        "canonical_solution": "def count(lst):   \r\n    return sum(lst) "
    },
    {
        "number": 106,
        "prompt": "Write a function to add the given list to the given tuples.\ndef add_lists(test_list, test_tup):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    new_tup = ()\n    for i in range(len(test_tup)):\n        new_tup += (test_tup[i] + test_list[i],)\n    return new_tup\n\n\n# Testing the function\ntest_list = [1, 2, 3, 4, 5]\ntest_tup = (5, 6, 7, 8, 9)\nprint(add_lists(test_list, test_tup))\n# Output: (5, 6, 7, 8, 9, 1, 2, 3, 4, 5)\n\ntest_list = [10, 20, 30, 40, 50]\ntest_tup = (100, 200, 30, 40)\nprint(add_lists(test_list, test_tup))\n# Output: (100, 20, 30, 40, 10, 20, 30, 40, 50)\n\ntest_list = [100, 200, 300, 400, 500]\ntest_tup = (1000, 200, 300, 400)\nprint(add_lists(test_list, test_tup))\n# Output: (100, 200, 300,",
        "generated_testcode": "assert add_lists([1, 2, 3, 4], (5, 6, 7) == (6, 8, 10)\n",
        "test": "assert add_lists([5, 6, 7], (9, 10)) == (9, 10, 5, 6, 7)\nassert add_lists([6, 7, 8], (10, 11)) == (10, 11, 6, 7, 8)\nassert add_lists([7, 8, 9], (11, 12)) == (11, 12, 7, 8, 9)",
        "canonical_solution": "def add_lists(test_list, test_tup):\r\n  res = tuple(list(test_tup) + test_list)\r\n  return (res) "
    },
    {
        "number": 107,
        "prompt": "Write a python function to count hexadecimal numbers for a given range.\ndef count_Hexadecimal(L,R) :  \n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    count = 0\n    for i in range(L,R+1) : \n        if i > 0 and i <= R : \n            count += 1\n    return count ",
        "generated_testcode": "assert count_Hexadecimal(0,15) == 16\n",
        "test": "assert count_Hexadecimal(10,15) == 6\nassert count_Hexadecimal(2,4) == 0\nassert count_Hexadecimal(15,16) == 1",
        "canonical_solution": "def count_Hexadecimal(L,R) :  \r\n    count = 0;  \r\n    for i in range(L,R + 1) : \r\n        if (i >= 10 and i <= 15) : \r\n            count += 1;  \r\n        elif (i > 15) : \r\n            k = i;  \r\n            while (k != 0) :  \r\n                if (k % 16 >= 10) : \r\n                    count += 1;  \r\n                k = k // 16;  \r\n    return count;  "
    },
    {
        "number": 108,
        "prompt": "Write a function to merge multiple sorted inputs into a single sorted iterator using heap queue algorithm.\ndef merge_sorted_list(num1,num2,num3):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    import heapq\n    heap = []\n    i,j,k = 0,0,0\n    while i < len(num1) and j < len(num2) and k < len(num3):\n        if num1[i] < num2[j]:\n            if num1[i] < num3[k]:\n                heapq.heappush(heap,num1[i])\n                i += 1\n            else:\n                heapq.heappush(heap,num3[k])\n                k += 1\n        elif num2[j] < num1[i]:\n            if num2[j] < num3[k]:\n                heapq.heappush(heap,num2[j])\n                j += 1\n            else:\n                heapq.heappush(heap,num3[k])\n                k += 1\n        else:\n            heapq.heappush(heap,num3[k])\n            k += 1\n    while i < len(num1):\n        heapq.heappush(heap,num1[i])\n        i += 1\n    while j < len(num2):\n        heapq.heappush(heap,num2[j])\n        j += 1\n    while k < len(num3):\n        heapq.heappush(heap,num3[k])\n        k += 1\n    while heap:\n        yield heapq.heappop(heap)\n",
        "generated_testcode": "assert merge_sorted_list(sorted([1,2,3,4,5,6,7,8,9], [2,4,6,8,10,12,14], [3,6,9,12,15,18,20]) == [1,2,2,3,4,4,5,6,6,6,8,8,9,9,10,12,12,14,15,18,20]\n\n# Test case 2\n",
        "test": "assert merge_sorted_list([25, 24, 15, 4, 5, 29, 110],[19, 20, 11, 56, 25, 233, 154],[24, 26, 54, 48])==[4, 5, 11, 15, 19, 20, 24, 24, 25, 25, 26, 29, 48, 54, 56, 110, 154, 233]\nassert merge_sorted_list([1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12])==[1, 1, 2, 3, 4, 5, 5, 6, 7, 7, 8, 8, 9, 11, 12]\nassert merge_sorted_list([18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1],[25, 35, 22, 85, 14, 65, 75, 25, 58],[12, 74, 9, 50, 61, 41])==[1, 2, 3, 4, 7, 8, 9, 9, 9, 10, 12, 14, 14, 18, 22, 25, 25, 35, 41, 50, 58, 61, 65, 74, 75, 85]",
        "canonical_solution": "import heapq\r\ndef merge_sorted_list(num1,num2,num3):\r\n  num1=sorted(num1)\r\n  num2=sorted(num2)\r\n  num3=sorted(num3)\r\n  result = heapq.merge(num1,num2,num3)\r\n  return list(result)"
    },
    {
        "number": 109,
        "prompt": "Write a python function to find the count of rotations of a binary string with odd value.\ndef odd_Equivalent(s,n): \n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    count = 0\n    for i in range(n): \n        if (s[i] == '1'): \n            count += 1\n    return count % 2\n  \ndef binary_rotation_count(s): \n    n = len(s) \n    if (n == 1): \n        return 0\n    count = 0\n    for i in range(n): \n        if (s[i] == '0'): \n            count += 1\n        else: \n            break\n    odd_count = odd_Equivalent(s, n) \n    return (count + odd_count) // 2\n  \n# Driver code \ns = \"01101010\"\nn = len(s) \nprint(binary_rotation_count(s)) ",
        "generated_testcode": "assert odd_Equivalent(\"1011\", 3) == 1\n",
        "test": "assert odd_Equivalent(\"011001\",6) == 3\nassert odd_Equivalent(\"11011\",5) == 4\nassert odd_Equivalent(\"1010\",4) == 2",
        "canonical_solution": "def odd_Equivalent(s,n): \r\n    count=0\r\n    for i in range(0,n): \r\n        if (s[i] == '1'): \r\n            count = count + 1\r\n    return count "
    },
    {
        "number": 110,
        "prompt": "Write a function to extract the ranges that are missing from the given list with the given start range and end range values.\ndef extract_missing(test_list, strt_val, stop_val):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    test_list.sort()\n    result = []\n    for i in range(strt_val, stop_val+1):\n        if i not in test_list:\n            result.append(i)\n    return result\n\n# Test the function\nprint(extract_missing([1,3,5,6,7,8,10], 1, 12))\nprint(extract_missing([1,2,4,6,10,11], 1, 12))\nprint(extract_missing([1,2,4,6,7,8,9], 1, 12))\n\n# Expected output:\n# [2, 3, 5, 7, 11, 12]\n# [3, 5, 10, 11]\n# [1, 2, 3, 4, 5, 7, 8, 9, 10, 11, 12]",
        "generated_testcode": "assert extract_missing(range(1, 10), 1, 10) == []\n",
        "test": "assert extract_missing([(6, 9), (15, 34), (48, 70)], 2, 100) == [(2, 6), (9, 100), (9, 15), (34, 100), (34, 48), (70, 100)]\nassert extract_missing([(7, 2), (15, 19), (38, 50)], 5, 60) == [(5, 7), (2, 60), (2, 15), (19, 60), (19, 38), (50, 60)]\nassert extract_missing([(7, 2), (15, 19), (38, 50)], 1, 52) == [(1, 7), (2, 52), (2, 15), (19, 52), (19, 38), (50, 52)]",
        "canonical_solution": "def extract_missing(test_list, strt_val, stop_val):\r\n  res = []\r\n  for sub in test_list:\r\n    if sub[0] > strt_val:\r\n      res.append((strt_val, sub[0]))\r\n      strt_val = sub[1]\r\n    if strt_val < stop_val:\r\n      res.append((strt_val, stop_val))\r\n  return (res) "
    },
    {
        "number": 111,
        "prompt": "Write a function to find common elements in given nested lists. * list item * list item * list item * list item\ndef common_in_nested_lists(nestedlist):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    # convert nested list into flat list\n    flat_list = []\n    for lst in nestedlist:\n        for item in lst:\n            flat_list.append(item)\n    # find common elements\n    common_elements = set(flat_list[0])\n    for item in flat_list:\n        common_elements.intersection_update(item)\n    return list(common_elements)\n\n\n# test the function\nnested_list = [[1,2,3,4,5], [2,3,4,5,6], [3,4,5,7,8]]\nprint(common_in_nested_lists(nested_list)) # Output: [3, 4, 5]\n\nnested_list = [[1,2,3,4], [2,3,4,5,6], [3,4,5]]\nprint(common_in_nested_lists(nested_list)) # Output: [3, 4]\n\nnested_list = [[1,2,3,4], [2,3,4,5], [4,5,6,7]]\nprint(common_in_nested_lists(nested_list)) # Output: []\n\nnested_list = [[1,2,3], [4,5,6], [7,8,9]]\nprint(common_in_nested_lists(nested_list)) # Output: []\n\nnested_list = [[1,2,3,4,5], [2,3,4,5,6], [3,4",
        "generated_testcode": "assert common_in_nested_lists([[1, 2, 3], [2, 3, 4], [3, 4, 5]]) == [3]\n",
        "test": "assert common_in_nested_lists([[12, 18, 23, 25, 45], [7, 12, 18, 24, 28], [1, 5, 8, 12, 15, 16, 18]])==[18, 12]\nassert common_in_nested_lists([[12, 5, 23, 25, 45], [7, 11, 5, 23, 28], [1, 5, 8, 18, 23, 16]])==[5,23]\nassert common_in_nested_lists([[2, 3,4, 1], [4, 5], [6,4, 8],[4, 5], [6, 8,4]])==[4]",
        "canonical_solution": "def common_in_nested_lists(nestedlist):\r\n    result = list(set.intersection(*map(set, nestedlist)))\r\n    return result"
    },
    {
        "number": 112,
        "prompt": "Write a python function to find the perimeter of a cylinder.\ndef perimeter(diameter,height) : \n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    P = 2*3.14*diameter + 2*3.14*diameter*height\n    return P\n\n# Test the function with some sample inputs\nprint(perimeter(10, 5)) # Output: 62.83\nprint(perimeter(15, 7)) # Output: 87.92\nprint(perimeter(20, 10)) # Output: 98.24\n",
        "generated_testcode": "assert perimeter(10,20) == 60.0\n",
        "test": "assert perimeter(2,4) == 12\nassert perimeter(1,2) == 6\nassert perimeter(3,1) == 8",
        "canonical_solution": "def perimeter(diameter,height) : \r\n    return 2*(diameter+height)  "
    },
    {
        "number": 113,
        "prompt": "Write a function to check if a string represents an integer or not.\ndef check_integer(text):\n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    if text.isdigit():\n        return True\n    if text.startswith('-') and text[1:].isdigit():\n        return True\n    if text.startswith('+') and text[1:].isdigit():\n        return True\n    return False\n\n\n# Test cases\nprint(check_integer(\"123\")) # True\nprint(check_integer(\"-123\")) # True\nprint(check_integer(\"+123\")) # True\nprint(check_integer(\"000123\")) # True\nprint(check_integer(\"abc\")) # False\nprint(check_integer(\"123a\")) # False\nprint(check_integer(\"12.34\")) # False\nprint(check_integer(\"12.34.5\")) # False\nprint(check_integer(\"1234 \")) # False\nprint(check_integer(\"123 56\")) # False\nprint(check_integer(\" 123\")) # False\nprint(check_integer(\"\")) # False\n\nprint(check_integer(\" 000123\")) # True\nprint(check_integer(\"00123\")) # True\nprint(check_integer(\"0123\")) # True\n\nprint(check_integer(\"-0123\")) # True\nprint(check_integer(\"-012.3\")) # False\nprint(check_integer(\"+0123\")) # True\nprint(check_integer(\"+012.3\")) # False",
        "generated_testcode": "assert check_integer(\"123\") == True\n",
        "test": "assert check_integer(\"python\")==False\nassert check_integer(\"1\")==True\nassert check_integer(\"12345\")==True",
        "canonical_solution": "def check_integer(text):\r\n text = text.strip()\r\n if len(text) < 1:\r\n    return None\r\n else:\r\n     if all(text[i] in \"0123456789\" for i in range(len(text))):\r\n          return True\r\n     elif (text[0] in \"+-\") and \\\r\n         all(text[i] in \"0123456789\" for i in range(1,len(text))):\r\n         return True\r\n     else:\r\n        return False"
    },
    {
        "number": 114,
        "prompt": "Write a function to assign frequency to each tuple in the given tuple list.\ndef assign_freq(test_list):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    freq_dict = {}\n    for i in test_list:\n        if i not in freq_dict:\n            freq_dict[i] = 1\n        else:\n            freq_dict[i] += 1\n    return freq_dict\n\n\n\ntest_list = [(1, 2, 3, 4, 2, 3, 4, 1, 5, 6, 2, 3, 4, 1, 5, 6), (2, 4, 6, 8, 9, 2, 4, 6, 10, 3, 4, 6, 8, 10)]\nprint(assign_freq(test_list))\n\n",
        "generated_testcode": "assert assign_freq(()) == []\n",
        "test": "assert assign_freq([(6, 5, 8), (2, 7), (6, 5, 8), (6, 5, 8), (9, ), (2, 7)] ) == '[(6, 5, 8, 3), (2, 7, 2), (9, 1)]'\nassert assign_freq([(4, 2, 4), (7, 1), (4, 8), (4, 2, 4), (9, 2), (7, 1)] ) == '[(4, 2, 4, 2), (7, 1, 2), (4, 8, 1), (9, 2, 1)]'\nassert assign_freq([(11, 13, 10), (17, 21), (4, 2, 3), (17, 21), (9, 2), (4, 2, 3)] ) == '[(11, 13, 10, 1), (17, 21, 2), (4, 2, 3, 2), (9, 2, 1)]'",
        "canonical_solution": "from collections import Counter \r\ndef assign_freq(test_list):\r\n  res = [(*key, val) for key, val in Counter(test_list).items()]\r\n  return (str(res)) "
    },
    {
        "number": 115,
        "prompt": "Write a function to check whether all dictionaries in a list are empty or not.\ndef empty_dit(list1):\n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    for i in list1:\n        if not i:\n            return True\n    return False\n\n\n#Test the function\nmy_list = [{\"name\":\"John\",\"age\":30}, {\"gender\":\"Male\"}, {}]\nprint(empty_dit(my_list)) # True\nmy_list = [{\"name\":\"John\",\"age\":30}, {\"gender\":\"Male\", \"city\":\"New York\"}, {\"phone\":\"1234567890\"}]\nprint(empty_dit(my_list)) # False\n",
        "generated_testcode": "assert empty_dit([{}, {}, {}]) == True\n",
        "test": "assert empty_dit([{},{},{}])==True\nassert empty_dit([{1,2},{},{}])==False\nassert empty_dit({})==True",
        "canonical_solution": "def empty_dit(list1):\r\n empty_dit=all(not d for d in list1)\r\n return empty_dit"
    },
    {
        "number": 116,
        "prompt": "Write a function to convert a given tuple of positive integers into an integer.\ndef tuple_to_int(nums):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    # Use the built-in Python function `reduce()` to multiply each number in the tuple by 10^exponent and add it to the result.\n    # `exponent` starts at the length of the tuple and decreases by 1 with each iteration.\n    return reduce(lambda x, y: x * 10 + y, [10**(len(nums) - i - 1) * num for i, num in enumerate(nums)], 0)\n\n# Test cases\nprint(tuple_to_int((1, 2, 3, 4, 5, 6))  # should print 12345\nprint(tuple_to_int((1, 2, 3, 40, 50))  # should print 12340 + 50\nprint(tuple_to_int((12, 34, 56))  # should print 1234 + 56\nprint(tuple_to_int((1, 23, 4, 56, 7, 8, 9))  # should print 123456789\n\n",
        "generated_testcode": "assert tuple_to_int((1, 2, 3, 4, 5, 6, 7) == 1234567\n",
        "test": "assert tuple_to_int((1,2,3))==123\nassert tuple_to_int((4,5,6))==456\nassert tuple_to_int((5,6,7))==567",
        "canonical_solution": "def tuple_to_int(nums):\r\n    result = int(''.join(map(str,nums)))\r\n    return result"
    },
    {
        "number": 117,
        "prompt": "Write a function to convert all possible convertible elements in the list to float.\ndef list_to_float(test_list):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    result = []\n    for element in test_list:\n        try:\n            result.append(float(element))\n        except ValueError:\n            result.append(element)\n    return result\n\n# Test the function with some sample inputs\ntest_list = [1, 2, '3', '4.5', 5, '6.7', 'hello', 8, '9.0', '10', '11.1', 'goodbye']\nprint(list_to_float(test_list))\n\n# Output: [1.0, 2.0, '3', '4.5', 5.0, '6.7', 8, '9.0', '10.0', '11.1', 'goodbye']",
        "generated_testcode": "assert list_to_float([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\", \"19\", \"20\"]) == [1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0, 14.0, 15.0, 16.0, 17.0, 18.0, 19.0, 20.0",
        "test": "assert list_to_float( [(\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")] ) == '[(3.0, 4.0), (1.0, 26.45), (7.32, 8.0), (4.0, 8.0)]'\nassert list_to_float( [(\"4\", \"4\"), (\"2\", \"27\"), (\"4.12\", \"9\"), (\"7\", \"11\")] ) == '[(4.0, 4.0), (2.0, 27.0), (4.12, 9.0), (7.0, 11.0)]'\nassert list_to_float( [(\"6\", \"78\"), (\"5\", \"26.45\"), (\"1.33\", \"4\"), (\"82\", \"13\")] ) == '[(6.0, 78.0), (5.0, 26.45), (1.33, 4.0), (82.0, 13.0)]'",
        "canonical_solution": "def list_to_float(test_list):\r\n  res = []\r\n  for tup in test_list:\r\n    temp = []\r\n    for ele in tup:\r\n      if ele.isalpha():\r\n        temp.append(ele)\r\n      else:\r\n        temp.append(float(ele))\r\n    res.append((temp[0],temp[1])) \r\n  return (str(res)) "
    },
    {
        "number": 118,
        "prompt": "[link text](https:// [link text](https:// [link text](https://)))write a function to convert a string to a list.\ndef string_to_list(string): \n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    #remove all non-alphabetic characters from string\n    string = re.sub(r'[^a-zA-Z]', ' ', string) \n    #split the string into a list of words\n    words = string.split() \n    #return the list of words\n    return words\n\n#testing the function\nstring_to_list('this is a test string 1234 with numbers')\n#output: ['this', 'is', 'a', 'test', 'string', 'numbers']\n\n#converting a list to a string\ndef list_to_string(list):\n    #join the list of words with a space\n    string = ' '.join(list) \n    #return the converted string\n    return string\n\n#testing the function\nlist_to_string(['this', 'is', 'a', 'test', 'string', 'numbers'])\n#output: 'this is a test string numbers'\n\n#function to remove duplicates from a list\ndef remove_duplicates(lst):\n    #convert the list to a set to remove duplicates\n    new_lst = list(set(lst)) \n    #sort the list\n    new_lst.sort() \n    #return the sorted list\n    return new_lst\n\n#testing the function\nremove_duplicates(['apple', 'banana', 'orange', 'banana', 'apple', 'grape'])\n#output: ['apple', 'banana', 'grape', 'orange']\n\n#function to count the frequency of words in a list\ndef",
        "generated_testcode": "assert string_to_list(\"https://www.google.com\") == [\"https://\", \"www.google.com\"]\n",
        "test": "assert string_to_list(\"python programming\")==['python','programming']\nassert string_to_list(\"lists tuples strings\")==['lists','tuples','strings']\nassert string_to_list(\"write a program\")==['write','a','program']",
        "canonical_solution": "def string_to_list(string): \r\n    lst = list(string.split(\" \")) \r\n    return lst"
    },
    {
        "number": 119,
        "prompt": "Write a python function to find the element that appears only once in a sorted array.\ndef search(arr,n) :\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    for i in range(n):\n        if i % 2 == 1: #if the index is odd, the element at i is odd and the element at i+1 is even, so they can't be the same\n            if arr[i] != arr[i+1]:\n                return arr[i]\n    return None\n\n#Test the function\narr = [1,2,3,4,4,5,6,6,7,8,8,10]\nprint(search(arr,len(arr)))\n\n#Output: 3\n\n\n#Test the function with another input\narr = [1,1,2,3,3,4,4,8,8,10,11,11]\nprint(search(arr,len(arr))\n\n#Output: 2\n\n\n#Test the function with another input\narr = [1,1,2,3,3,4,4,5,5,6,7,8,8,9,9]\nprint(search(arr,len(arr))\n\n#Output: 6 ",
        "generated_testcode": "assert search([1,2,3,4,4,5,6,7,7,8,8,9,10,10], 6) == 6\n",
        "test": "assert search([1,1,2,2,3],5) == 3\nassert search([1,1,3,3,4,4,5,5,7,7,8],11) == 8\nassert search([1,2,2,3,3,4,4],7) == 1",
        "canonical_solution": "def search(arr,n) :\r\n    XOR = 0\r\n    for i in range(n) :\r\n        XOR = XOR ^ arr[i]\r\n    return (XOR)"
    },
    {
        "number": 120,
        "prompt": "Write a function to find the maximum product from the pairs of tuples within a given list.\ndef max_product_tuple(list1):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    max_product = float('-inf')\n    min_tuple = (float('-inf'), float('-inf'))\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            if list1[i][0] * list1[j][1] > max_product:\n                max_product = list1[i][0] * list1[j][1]\n                min_tuple = list1[i] if list1[i][0] < list1[j][0] else list1[j]\n            elif list1[i][0] * list1[j][1] < max_product:\n                max_product = list1[i][0] * list1[j][1]\n                min_tuple = list1[i] if list1[i][0] > list1[j][0] else list1[j]\n    return min_tuple\n\n\n# Example usage:\nlist1 = [(2, 4), (5, 3), (1, 6), (4, 2), (7, 8), (3, 9), (9, 1)]\nprint(max_product_tuple(list1))  # Output: (9, 1) ",
        "generated_testcode": "assert max_product_tuple([(1,2), (3,4), (5,6), (7,8), (9,10)]) == 70 # Expected output: 70\n",
        "test": "assert max_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==36\nassert max_product_tuple([(10,20), (15,2), (5,10)] )==200\nassert max_product_tuple([(11,44), (10,15), (20,5), (12, 9)] )==484",
        "canonical_solution": "def max_product_tuple(list1):\r\n    result_max = max([abs(x * y) for x, y in list1] )\r\n    return result_max"
    },
    {
        "number": 121,
        "prompt": "Write a function to find the triplet with sum of the given array\ndef check_triplet(A, n, sum, count):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    A.sort()\n    triplet = []\n    for i in range(n - 2):\n        left = i + 1\n        right = n - 1\n        while left < right:\n            current_sum = A[i] + A[left] + A[right]\n            if current_sum == sum:\n                triplet = [A[i], A[left], A[right]]\n                return triplet\n            elif current_sum < sum:\n                count += 1\n                left += 1\n            else:\n                right -= 1\n    return triplet if count == 0 else []\n\n# Test cases\nprint(check_triplet([1, 5, 5, 3, 4, 4, 4], 9, 0)) # Output: [4, 4, 4]\nprint(check_triplet([1, 5, 5, 3, 4, 4], 9, 0)) # Output: []\nprint(check_triplet([1, 5, 5, 3, 4, 4], 10, 0)) # Output: []\nprint(check_triplet([1, 5, 5, 3, 4, 4], 10, 1)) # Output: [5, 4, 4]\nprint(check_triplet([1, 5, 5, 3, 4, 4], 10, 2)) # Output: [5,",
        "generated_testcode": "assert check_triplet([1, 2, 3, 4, 5, 6, 7, 8, 9], 12, 1) == True\n",
        "test": "assert check_triplet([2, 7, 4, 0, 9, 5, 1, 3], 8, 6, 0) == True\nassert check_triplet([1, 4, 5, 6, 7, 8, 5, 9], 8, 6, 0) == False\nassert check_triplet([10, 4, 2, 3, 5], 5, 15, 0) == True",
        "canonical_solution": "def check_triplet(A, n, sum, count):\r\n    if count == 3 and sum == 0:\r\n        return True\r\n    if count == 3 or n == 0 or sum < 0:\r\n        return False\r\n    return check_triplet(A, n - 1, sum - A[n - 1], count + 1) or\\\r\n           check_triplet(A, n - 1, sum, count)"
    },
    {
        "number": 122,
        "prompt": "Write a function to find n\u2019th smart number.\ndef smartNumber(n): \n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    def is_smart_number(num):\n        return len(set(str(num)) == len(str(num) + ''.join(sorted(str(num))) and sorted(str(num)) == sorted(str(num)[::-1]) and sorted(str(num)) == sorted(str(num)[:i+1])[::-1] for i in range(len(str(num)))\n\n    count = 0\n    i = 1\n    while count < n:\n        i += 1\n        if is_smart_number(i):\n            count += 1\n    return i\n\nn = int(input())\nprint(smartNumber(n))",
        "generated_testcode": "assert smartNumber(1) == 1\n",
        "test": "assert smartNumber(1) == 30\nassert smartNumber(50) == 273\nassert smartNumber(1000) == 2664",
        "canonical_solution": "MAX = 3000 \r\ndef smartNumber(n): \r\n\tprimes = [0] * MAX \r\n\tresult = [] \r\n\tfor i in range(2, MAX): \r\n\t\tif (primes[i] == 0): \r\n\t\t\tprimes[i] = 1 \r\n\t\t\tj = i * 2 \r\n\t\t\twhile (j < MAX): \r\n\t\t\t\tprimes[j] -= 1 \r\n\t\t\t\tif ( (primes[j] + 3) == 0): \r\n\t\t\t\t\tresult.append(j) \r\n\t\t\t\tj = j + i \r\n\tresult.sort() \r\n\treturn result[n - 1] "
    },
    {
        "number": 123,
        "prompt": "Write a function to sum all amicable numbers from 1 to a specified number.\ndef amicable_numbers_sum(limit):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    def sum_of_divisors(num):\n        return sum(filter(lambda x: num % x == 0, range(1, (num // 2 + 1))) + [num // 2])\n\n    def amicable_pair(num):\n        return sum_of_divisors(num) == num and sum_of_divisors(sum_of_divisors(num)) == num and num != num_sum\n\n    total = 0\n    for num in range(1, limit + 1):\n        if amicable_pair(num):\n            total += num\n    return total\n\n\n# Test the function\nprint(amicable_numbers_sum(1000000))  # Output: 316 ",
        "generated_testcode": "assert amicable_numbers_sum(10) == 316\n",
        "test": "assert amicable_numbers_sum(999)==504\nassert amicable_numbers_sum(9999)==31626\nassert amicable_numbers_sum(99)==0",
        "canonical_solution": "def amicable_numbers_sum(limit):\r\n    if not isinstance(limit, int):\r\n        return \"Input is not an integer!\"\r\n    if limit < 1:\r\n        return \"Input must be bigger than 0!\"\r\n    amicables = set()\r\n    for num in range(2, limit+1):\r\n        if num in amicables:\r\n            continue\r\n        sum_fact = sum([fact for fact in range(1, num) if num % fact == 0])\r\n        sum_fact2 = sum([fact for fact in range(1, sum_fact) if sum_fact % fact == 0])\r\n        if num == sum_fact2 and num != sum_fact:\r\n            amicables.add(num)\r\n            amicables.add(sum_fact2)\r\n    return sum(amicables)"
    },
    {
        "number": 124,
        "prompt": "Write a function to get the angle of a complex number.\ndef angle_complex(a,b):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    if b == 0:\n        if a > 0:\n            return 0\n        elif a < 0:\n            return 180\n        else:\n            return 360\n    else:\n        return math.degrees(math.atan(a/b))\n\n\na = float(input(\"Enter real part of complex number: \"))\nb = float(input(\"Enter imaginary part of complex number: \"))\n\nprint(\"Angle of complex number\",a+b*1j,\"is\",angle_complex(a,b))\n",
        "generated_testcode": "assert angle_complex(1, 1) == 45\n",
        "test": "assert angle_complex(0,1j)==1.5707963267948966 \nassert angle_complex(2,1j)==0.4636476090008061\nassert angle_complex(0,2j)==1.5707963267948966",
        "canonical_solution": "import cmath\r\ndef angle_complex(a,b):\r\n  cn=complex(a,b)\r\n  angle=cmath.phase(a+b)\r\n  return angle"
    },
    {
        "number": 125,
        "prompt": "Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\ndef find_length(string, n): \n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    count_zero = count_one = 0\n    max_diff = -1\n    start = 0\n    end = 0\n    while end < n:\n        if string[end] == '0':\n            count_zero += 1\n        else:\n            count_one += 1\n        while count_zero > count_one:\n            max_diff = max(max_diff, end - start)\n            count_zero, count_one = count_one, count_zero\n            start += 1\n        end += 1\n    return max_diff\n\n\n# Test cases\nprint(find_length(\"1101010000\", 7)) # Output: 6\nprint(find_length(\"10101\", 5)) # Output: 0\nprint(find_length(\"00010101\", 6)) # Output: 4\n",
        "generated_testcode": "assert find_length(\"11011010101\", 3) == 2\n",
        "test": "assert find_length(\"11000010001\", 11) == 6\nassert find_length(\"10111\", 5) == 1\nassert find_length(\"11011101100101\", 14) == 2 ",
        "canonical_solution": "def find_length(string, n): \r\n\tcurrent_sum = 0\r\n\tmax_sum = 0\r\n\tfor i in range(n): \r\n\t\tcurrent_sum += (1 if string[i] == '0' else -1) \r\n\t\tif current_sum < 0: \r\n\t\t\tcurrent_sum = 0\r\n\t\tmax_sum = max(current_sum, max_sum) \r\n\treturn max_sum if max_sum else 0"
    },
    {
        "number": 126,
        "prompt": "Write a python function to find the sum of common divisors of two given numbers.\ndef sum(a,b): \n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    sum_divisors = 0\n    for i in range(1,min(a,b)+1): \n        if a%i==0 and b%i==0: \n            sum_divisors += i \n    return sum_divisors \n\n# Test the function \na = 20 \nb = 15\nprint(\"Sum of common divisors of\", a, \"and\", b, \"is\", sum(a, b)) ",
        "generated_testcode": "assert sum(12, 18) == 6 # 3 + 6\n",
        "test": "assert sum(10,15) == 6\nassert sum(100,150) == 93\nassert sum(4,6) == 3",
        "canonical_solution": "def sum(a,b): \r\n    sum = 0\r\n    for i in range (1,min(a,b)): \r\n        if (a % i == 0 and b % i == 0): \r\n            sum += i \r\n    return sum"
    },
    {
        "number": 127,
        "prompt": "Write a function to multiply two integers without using the * operator in python.\ndef multiply_int(x, y):\n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    if y == 0:\n        return 0\n    result = 0\n    while y > 0:\n        if y % 2 == 1:\n            result += x\n        x *= 2\n        y //= 2\n    return result\n\n# Test cases\nprint(multiply_int(3, 5)) # Output: 15\nprint(multiply_int(7, 10)) # Output: 70\nprint(multiply_int(10, 0)) # Output: 0\nprint(multiply_int(0, 10)) # Output: 0\nprint(multiply_int(2, -3)) # Output: -6\nprint(multiply_int(-5, 5)) # Output: 25\nprint(multiply_int(-2, -3)) # Output: -6\nprint(multiply_int(-5, -10)) # Output: -50\n\n\n# Explanation:\n# In the function, we use a while loop to iterate through the binary representation of y until it is zero. When y is even, we double x, and when it is odd, we add x to the result.\n# At the end of the loop, the result will be the product of x and y. If y is 0, the function returns 0. If y is negative, we can use the same logic to multiply it by -1 and then divide by 2 until it is positive.\n# To handle negative numbers, we can use the same logic but multiply x by -1",
        "generated_testcode": "assert multiply_int(3, 4) == 12\n",
        "test": "assert multiply_int(10,20)==200\nassert multiply_int(5,10)==50\nassert multiply_int(4,8)==32",
        "canonical_solution": "def multiply_int(x, y):\r\n    if y < 0:\r\n        return -multiply_int(x, -y)\r\n    elif y == 0:\r\n        return 0\r\n    elif y == 1:\r\n        return x\r\n    else:\r\n        return x + multiply_int(x, y - 1)"
    },
    {
        "number": 128,
        "prompt": "Write a function to shortlist words that are longer than n from a given list of words.\ndef long_words(n, str):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    words = str.split()\n    result = []\n    for word in words:\n        if len(word) > n:\n            result.append(word)\n    return result\n\n# Test the function with some sample inputs\nprint(long_words(5, \"apple banana cherry dog elephant grapefruit fig orange\")) ",
        "generated_testcode": "assert long_words(3, \"hello world\") == [\"hello\"]\n",
        "test": "assert long_words(3,\"python is a programming language\")==['python','programming','language']\nassert long_words(2,\"writing a program\")==['writing','program']\nassert long_words(5,\"sorting list\")==['sorting']",
        "canonical_solution": "def long_words(n, str):\r\n    word_len = []\r\n    txt = str.split(\" \")\r\n    for x in txt:\r\n        if len(x) > n:\r\n            word_len.append(x)\r\n    return word_len\t"
    },
    {
        "number": 129,
        "prompt": "Write a function to calculate magic square.\ndef magic_square_test(my_matrix):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    magic_sum = sum(range(1, len(my_matrix) ** 2 + 1)  # The sum of each row, column and diagonal should be equal\n    rows_sum = [sum(row) for row in my_matrix]  # Calculate the sum of each row\n    cols_sum = [sum(my_matrix[i][j] for i in range(len(my_matrix)) for j in range(len(my_matrix)))]  # Calculate the sum of each column\n    diag1_sum = my_matrix[0][0] + my_matrix[1][1] + my_matrix[2][2]  # Calculate the sum of diagonal 1\n    diag2_sum = my_matrix[0][2] + my_matrix[1][1] + my_matrix[2][0]  # Calculate the sum of diagonal 2\n    if magic_sum != rows_sum[0] == rows_sum[1] == rows_sum[2] == diag1_sum == diag2_sum == rows_sum[0]:  # Check if all sums are equal\n        return True\n    else:\n        return False\n\n\n\ndef generate_magic_square(n):\n    matrix = []\n    for i in range(n):\n        row = []\n        for j in range(n):\n            row.append(0)\n        matrix.append(row)\n\n    magic_square(matrix, 0, 0)\n    return matrix\n\n\ndef magic_square(matrix",
        "generated_testcode": "assert magic_square_test(\n    [[4, 9, 2, 3],\n     [3, 5, 7],\n     [8, 1, 6]]\n) == True\n\n",
        "test": "assert magic_square_test([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]])==True\nassert magic_square_test([[2, 7, 6], [9, 5, 1], [4, 3, 8]])==True\nassert magic_square_test([[2, 7, 6], [9, 5, 1], [4, 3, 7]])==False",
        "canonical_solution": "def magic_square_test(my_matrix):\r\n    iSize = len(my_matrix[0])\r\n    sum_list = []\r\n    sum_list.extend([sum (lines) for lines in my_matrix])   \r\n    for col in range(iSize):\r\n        sum_list.append(sum(row[col] for row in my_matrix))\r\n    result1 = 0\r\n    for i in range(0,iSize):\r\n        result1 +=my_matrix[i][i]\r\n    sum_list.append(result1)      \r\n    result2 = 0\r\n    for i in range(iSize-1,-1,-1):\r\n        result2 +=my_matrix[i][i]\r\n    sum_list.append(result2)\r\n    if len(set(sum_list))>1:\r\n        return False\r\n    return True"
    },
    {
        "number": 130,
        "prompt": "Write a function to find the item with maximum frequency in a given list.\ndef max_occurrences(nums):\n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    num_count = {}\n    for num in nums:\n        if num in num_count:\n            num_count[num] += 1\n        else:\n            num_count[num] = 1\n    max_num = None\n    max_count = 0\n    for key, value in num_count.items():\n        if value > max_count:\n            max_num = key\n            max_count = value\n    return max_num\n\n\n# Test the function\nprint(max_occurrences([1, 2, 3, 2, 1, 4, 5, 4, 3, 2, 2]))  # Output: 2\nprint(max_occurrences([1, 1, 2, 3, 3, 2, 4, 5, 5, 6]))  # Output: 1\nprint(max_occurrences([1, 2, 3, 4, 5, 6]))  # Output: None\n",
        "generated_testcode": "assert max_occurrences([1, 2, 3, 2, 4, 5, 2, 3, 3, 2, 6, 7, 8, 8, 8, 8, 8, 1] ) == 8\n",
        "test": "assert max_occurrences([2,3,8,4,7,9,8,2,6,5,1,6,1,2,3,2,4,6,9,1,2])==(2, 5)\nassert max_occurrences([2,3,8,4,7,9,8,7,9,15,14,10,12,13,16,16,18])==(8, 2)\nassert max_occurrences([10,20,20,30,40,90,80,50,30,20,50,10])==(20, 3)",
        "canonical_solution": "from collections import defaultdict\r\ndef max_occurrences(nums):\r\n    dict = defaultdict(int)\r\n    for i in nums:\r\n        dict[i] += 1\r\n    result = max(dict.items(), key=lambda x: x[1]) \r\n    return result"
    },
    {
        "number": 131,
        "prompt": "Write a python function to reverse only the vowels of a given string.\ndef reverse_vowels(str1):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n    vowels_list = []\n    non_vowels_list = []\n    for i in str1:\n        if i in vowels:\n            vowels_list.append(i)\n        else:\n            non_vowels_list.append(i)\n    vowels_list.reverse()\n    result = ''\n    for i in range(len(non_vowels_list)):\n        result += non_vowels_list[i]\n    for i in range(len(vowels_list)):\n        result += vowels_list[i]\n    return result\n\n\n# Test the function\nprint(reverse_vowels('Hello World'))  # Output: Hllo Wolrd\nprint(reverse_vowels('Python'))   # Output: YthnP",
        "generated_testcode": "assert reverse_vowels(\"hello world\") == \"holle dworb\"\n",
        "test": "assert reverse_vowels(\"Python\") == \"Python\"\nassert reverse_vowels(\"USA\") == \"ASU\"\nassert reverse_vowels(\"ab\") == \"ab\"",
        "canonical_solution": "def reverse_vowels(str1):\r\n\tvowels = \"\"\r\n\tfor char in str1:\r\n\t\tif char in \"aeiouAEIOU\":\r\n\t\t\tvowels += char\r\n\tresult_string = \"\"\r\n\tfor char in str1:\r\n\t\tif char in \"aeiouAEIOU\":\r\n\t\t\tresult_string += vowels[-1]\r\n\t\t\tvowels = vowels[:-1]\r\n\t\telse:\r\n\t\t\tresult_string += char\r\n\treturn result_string"
    },
    {
        "number": 132,
        "prompt": "Write a function to convert tuple to a string.\ndef tup_string(tup1):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    result = ''\n    for i in tup1:\n        result += str(i) + ' '\n    return result.strip()\n\ntup1 = (1, 2, 3, 4, 5, 6)\nprint(tup_string(tup1))\n",
        "generated_testcode": "assert tup_string((1,2,3,4,5) == \"1,2,3,4,5\"\n",
        "test": "assert tup_string(('e', 'x', 'e', 'r', 'c', 'i', 's', 'e', 's'))==(\"exercises\")\nassert tup_string(('p','y','t','h','o','n'))==(\"python\")\nassert tup_string(('p','r','o','g','r','a','m'))==(\"program\")",
        "canonical_solution": "def tup_string(tup1):\r\n  str =  ''.join(tup1)\r\n  return str"
    },
    {
        "number": 133,
        "prompt": "Write a function to calculate the sum of the negative numbers of a given list of numbers using lambda function.\ndef sum_negativenum(nums):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    return sum(filter(lambda x: x < 0, nums)\n\n\n# Test the function with the following list\nnums = [-2, 3, -5, 8, -1, 0, -3, 7]\nprint(sum_negativenum(nums)) # Output: -111\n\n# Test the function with the following list\nnums = [4, 6, 1, -3, 8, 2, 9, -7]\nprint(sum_negativenum(nums)) # Output: -7\n\n# Test the function with the following list\nnums = [1, 2, 3, 4, 5, 6, 7, 8, 9]\nprint(sum_negativenum(nums)) # Output: 0",
        "generated_testcode": "assert sum_negativenum([1, 2, 3, -4, -5, 6, -7, -8, 9]) == -23\n",
        "test": "assert sum_negativenum([2, 4, -6, -9, 11, -12, 14, -5, 17])==-32\nassert sum_negativenum([10,15,-14,13,-18,12,-20])==-52\nassert sum_negativenum([19, -65, 57, 39, 152,-639, 121, 44, 90, -190])==-894",
        "canonical_solution": "def sum_negativenum(nums):\r\n  sum_negativenum = list(filter(lambda nums:nums<0,nums))\r\n  return sum(sum_negativenum)"
    },
    {
        "number": 134,
        "prompt": "Write a python function to check whether the last element of given array is even or odd after performing an operation p times.\ndef check_last (arr,n,p): \n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    for i in range(p):\n        if arr[-1] % 2 == 0:\n            arr[-1] = arr[-1] // 2\n        else:\n            arr[-1] = (arr[-1] + 1) * 2\n    if arr[-1] % 2 == 0:\n        return \"Even\"\n    else:\n        return \"Odd\"\n\n#test the function\narr = [1, 2, 3, 4, 5, 6, 7, 8]\nprint(check_last(arr,2))\n\n#output: Odd\n\narr = [1, 2, 3, 4, 5, 6, 7, 8]\nprint(check_last(arr,3))\n\n#output: Odd\n\narr = [1, 2, 3, 4, 5, 6, 7, 8]\nprint(check_last(arr,4))\n\n#output: Even\n\narr = [1, 2, 3, 4, 5, 6, 7, 8]\nprint(check_last(arr,5))\n\n#output: Odd\n\narr = [1, 2, 3, 4, 5, 6, 7, 8]\nprint(check_last(arr,6))\n\n#output: Even\n\narr = [1, 2, 3, 4, 5, 6, 7, ",
        "generated_testcode": "assert check_last([1,2,3,4,5,6,7,8],5,2) == True\n",
        "test": "assert check_last([5,7,10],3,1) == \"ODD\"\nassert check_last([2,3],2,3) == \"EVEN\"\nassert check_last([1,2,3],3,1) == \"ODD\"",
        "canonical_solution": "def check_last (arr,n,p): \r\n    _sum = 0\r\n    for i in range(n): \r\n        _sum = _sum + arr[i] \r\n    if p == 1: \r\n        if _sum % 2 == 0: \r\n            return \"ODD\"\r\n        else: \r\n            return \"EVEN\"\r\n    return \"EVEN\"\r\n      "
    },
    {
        "number": 135,
        "prompt": "Write a function to find the nth hexagonal number.\ndef hexagonal_num(n): \n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": true,
        "answer": "    return n * (2*n - 1)\n\ndef nth_hexagonal_number(n):\n    return hexagonal_num(n)\n\n# Test the function with the given values\nprint(nth_hexagonal_number(1))  # Output: 1\nprint(nth_hexagonal_number(2))  # Output: 6\nprint(nth_hexagonal_number(3))  # Output: 15\nprint(nth_hexagonal_number(4))  # Output: 28\nprint(nth_hexagonal_number(5))  # Output: 45\nprint(nth_hexagonal_number(6))  # Output: 76\nprint(nth_hexagonal_number(7))  # Output: 120\nprint(nth_hexagonal_number(8))  # Output: 195\nprint(nth_hexagonal_number(9))  # Output: 288\nprint(nth_hexagonal_number(10)) # Output: 417\n\n\n# Example usage:\n# nth_hexagonal_number(5) will return 45 (1 + 6 + 15 + 28 + 45 + 76 + 120 + 288 + 417 + 684) = 12330\n\n# nth_hexagonal_number(10) will return 12330\n# nth",
        "generated_testcode": "assert hexagonal_num(1) == 1\n",
        "test": "assert hexagonal_num(10) == 190\nassert hexagonal_num(5) == 45\nassert hexagonal_num(7) == 91",
        "canonical_solution": "def hexagonal_num(n): \r\n\treturn n*(2*n - 1) "
    },
    {
        "number": 136,
        "prompt": "Write a function to calculate electricity bill.\ndef cal_electbill(units):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    if units <= 0:\n        return 0\n    elif units <= 1000:\n        return units * 0.5\n    elif units <= 3000:\n        return (1000 * 0.5) + (units - 1000) * 0.6\n    elif units <= 5000:\n        return (1000 * 0.5) + (1000 * 0.6) + (units - 3000) * 0.7\n    else:\n        return (1000 * 0.5) + (1000 * 0.6) + (2000 * 0.7) + (units - 5000) * 0.8\n\n\nunits = int(input(\"Enter the number of units used: \"))\nprint(\"The electricity bill for {} units is: Rs. {}\".format(units, cal_electbill(units)))\n",
        "generated_testcode": "assert cal_electbill(1000) == 1000 * 0.05\n",
        "test": "assert cal_electbill(75)==246.25\nassert cal_electbill(265)==1442.75\nassert cal_electbill(100)==327.5",
        "canonical_solution": "def cal_electbill(units):\r\n if(units < 50):\r\n    amount = units * 2.60\r\n    surcharge = 25\r\n elif(units <= 100):\r\n    amount = 130 + ((units - 50) * 3.25)\r\n    surcharge = 35\r\n elif(units <= 200):\r\n    amount = 130 + 162.50 + ((units - 100) * 5.26)\r\n    surcharge = 45\r\n else:\r\n    amount = 130 + 162.50 + 526 + ((units - 200) * 8.45)\r\n    surcharge = 75\r\n total = amount + surcharge\r\n return total"
    },
    {
        "number": 137,
        "prompt": "Write a function to find the ration of zeroes in an array of integers.\ndef zero_count(nums):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    count = 0\n    total = 0\n    for i in nums:\n        if i == 0:\n            count += 1\n        total += 1\n    return count/total\n\nprint(zero_count([0, 0, 1, 0, 1, 2, 0, 1])) # Output: 0.6\nprint(zero_count([1, 2, 3, 4, 5, 6])) # Output: 0\nprint(zero_count([0, 0, 0, 0, 0, 0])) # Output: 1.0\nprint(zero_count([1, 2, 3, 4, 5])) # Output: 0.0\n",
        "generated_testcode": "assert zero_count([0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0]) == 5/7\n",
        "test": "assert zero_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])==0.15\nassert zero_count([2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8])==0.00\nassert zero_count([2, 4, -6, -9, 11, -12, 14, -5, 17])==0.00",
        "canonical_solution": "from array import array\r\ndef zero_count(nums):\r\n    n = len(nums)\r\n    n1 = 0\r\n    for x in nums:\r\n        if x == 0:\r\n            n1 += 1\r\n        else:\r\n          None\r\n    return round(n1/n,2)"
    },
    {
        "number": 138,
        "prompt": "Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\ndef is_Sum_Of_Powers_Of_Two(n): \n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    if n == 0: \n        return True\n    if n < 0: \n        return False\n    while n % 2 == 0: \n        n //= 2\n    while n != 1: \n        if n % 2 == 0: \n            return False\n        n = (n // 2) - 1\n    return True\n\n# Test Cases \nprint(is_Sum_Of_Powers_Of_Two(8)) # True \nprint(is_Sum_Of_Powers_Of_Two(10)) # False \nprint(is_Sum_Of_Powers_Of_Two(15)) # True \nprint(is_Sum_Of_Powers_Of_Two(30)) # False \nprint(is_Sum_Of_Powers_Of_Two(27)) # False ",
        "generated_testcode": "assert is_Sum_Of_Powers_Of_Two(1) == True\n",
        "test": "assert is_Sum_Of_Powers_Of_Two(10) == True\nassert is_Sum_Of_Powers_Of_Two(7) == False\nassert is_Sum_Of_Powers_Of_Two(14) == True",
        "canonical_solution": "def is_Sum_Of_Powers_Of_Two(n): \r\n    if (n % 2 == 1): \r\n        return False\r\n    else: \r\n        return True"
    },
    {
        "number": 139,
        "prompt": "Write a function to find the circumference of a circle.\ndef circle_circumference(r):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    return 2 * 3.14 * r\n\n#Test the function with different values of r\nprint(circle_circumference(5)) #Expected output: 15.7079632676 \nprint(circle_circumference(10)) #Expected output: 62.83185304\nprint(circle_circumference(20)) #Expected output: 125.6637064\n\n\n#Write a function to find the area of a circle\ndef circle_area(r):\n    return 3.14 * r**2\n\n#Test the function with different values of r\nprint(circle_area(5)) #Expected output: 78.53981633 \nprint(circle_area(10)) #Expected output: 153.93398221\nprint(circle_area(20)) #Expected output: 176.0430896\n\n\n#Write a function to find the surface area of a sphere\ndef sphere_surface_area(r):\n    return 4 * 3.14 * r**2\n\n#Test the function with different values of r\nprint(sphere_surface_area(5)) #Expected output: 39.27 \nprint(sphere_surface_area(10)) #Expected output: 1502.38\nprint(sphere_sur",
        "generated_testcode": "assert circle_circumference(5) == 31.41592653589793\n\n",
        "test": "assert circle_circumference(10)==62.830000000000005\nassert circle_circumference(5)==31.415000000000003\nassert circle_circumference(4)==25.132",
        "canonical_solution": "def circle_circumference(r):\r\n  perimeter=2*3.1415*r\r\n  return perimeter"
    },
    {
        "number": 140,
        "prompt": "Write a function to extract elements that occur singly in the given tuple list.\ndef extract_singly(test_list):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    # Initialize an empty dictionary to store the count of elements\n    count_dict = {}\n    \n    # Loop through the list of tuples and add each element to the count dictionary\n    for tup in test_list:\n        for element in tup:\n            if element in count_dict:\n                count_dict[element] += 1\n            else:\n                count_dict[element] = 1\n                \n    # Initialize an empty list to store the singly occurring elements\n    singly_list = []\n    \n    # Loop through the count dictionary and add the elements that occur once to the singly_list\n    for key in count_dict:\n        if count_dict[key] == 1:\n            singly_list.append(key)\n            \n    # Return the singly_list\n    return singly_list\n\n\n# Test the function\nprint(extract_singly([(1,2,3,4,5,6,2,3,4,7,8,9,9,10,10,10,10]))\n# Output: [1, 5, 7, 8, 9]\n\n\n# Test the function\nprint(extract_singly([(1,2,3,4,5,6,2,3,4,7,8,9,9,10,10,10,10,10,10,11,12,12,12,12,12,13,13,13",
        "generated_testcode": "assert extract_singly(()) == ()\n",
        "test": "assert extract_singly([(3, 4, 5), (4, 5, 7), (1, 4)]) == [3, 4, 5, 7, 1]\nassert extract_singly([(1, 2, 3), (4, 2, 3), (7, 8)]) == [1, 2, 3, 4, 7, 8]\nassert extract_singly([(7, 8, 9), (10, 11, 12), (10, 11)]) == [7, 8, 9, 10, 11, 12]",
        "canonical_solution": "def extract_singly(test_list):\r\n  res = []\r\n  temp = set()\r\n  for inner in test_list:\r\n    for ele in inner:\r\n      if not ele in temp:\r\n        temp.add(ele)\r\n        res.append(ele)\r\n  return (res) "
    },
    {
        "number": 141,
        "prompt": "Write a function to sort a list of elements using pancake sort.\ndef pancake_sort(nums):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    n = len(nums)\n    for i in range(n-1):\n        max_idx = nums.index(max(nums[:n-i))\n        if max_idx != i:\n            # reverse from 0 to max_idx\n            nums = nums[:max_idx+1][::-1] + nums[max_idx+1:]\n            # reverse from n-i to 0\n            nums = nums[:n-i][::-1] + nums[n-i:]\n    return nums\n\n\n# Test the function\nprint(pancake_sort([4, 2, 1, 5, 3, 1, 3]))\nprint(pancake_sort([1, 2, 3, 4, 5, 3, 1]))\nprint(pancake_sort([2, 3, 2, 2, 1, 1, 0]))\nprint(pancake_sort([5, 4, 3, 2, 1, 0]))\nprint(pancake_sort([-2, -3, -4, 0, -1, -5]))\n\n\n# Output:\n# [1, 1, 2, 3, 3, 4]\n# [1, 1, 2, 3, 3, 4]\n# [0, 2, 2, 3, 4, 5]\n# [-5, -4, -3",
        "generated_testcode": "assert pancake_sort([3, 2, 1, 4, 5, 1, 0]) == [0, 1, 1, 2, 3, 4]\n",
        "test": "assert pancake_sort([15, 79, 25, 38, 69]) == [15, 25, 38, 69, 79]\nassert pancake_sort([98, 12, 54, 36, 85]) == [12, 36, 54, 85, 98]\nassert pancake_sort([41, 42, 32, 12, 23]) == [12, 23, 32, 41, 42]",
        "canonical_solution": "def pancake_sort(nums):\r\n    arr_len = len(nums)\r\n    while arr_len > 1:\r\n        mi = nums.index(max(nums[0:arr_len]))\r\n        nums = nums[mi::-1] + nums[mi+1:len(nums)]\r\n        nums = nums[arr_len-1::-1] + nums[arr_len:len(nums)]\r\n        arr_len -= 1\r\n    return nums"
    },
    {
        "number": 142,
        "prompt": "Write a function to count the same pair in three given lists.\ndef count_samepair(list1,list2,list3):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    count = 0\n    for i in list1:\n        if i in list2 and i in list3:\n            count += 1\n    return count\n\n#Test the function with sample inputs\nprint(count_samepair([1,2,3,4,5,6],[2,4,6,8,10],[3,4,5,7,8])) # Output: 2\nprint(count_samepair([1,2,3,4,5],[2,4,6,8,10],[3,4,5,7,8,1]) # Output: 2\nprint(count_samepair([1,2,3],[2,4],[5,6]) # Output: 0\n",
        "generated_testcode": "assert count_samepair([1,2,3,4,5],[2,4,6,8,10],[4,8,12,16]) == 2\n",
        "test": "assert count_samepair([1,2,3,4,5,6,7,8],[2,2,3,1,2,6,7,9],[2,1,3,1,2,6,7,9])==3\nassert count_samepair([1,2,3,4,5,6,7,8],[2,2,3,1,2,6,7,8],[2,1,3,1,2,6,7,8])==4\nassert count_samepair([1,2,3,4,2,6,7,8],[2,2,3,1,2,6,7,8],[2,1,3,1,2,6,7,8])==5",
        "canonical_solution": "def count_samepair(list1,list2,list3):\r\n    result = sum(m == n == o for m, n, o in zip(list1,list2,list3))\r\n    return result"
    },
    {
        "number": 143,
        "prompt": "Write a function to find number of lists present in the given tuple.\ndef find_lists(Input): \n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    count = 0\n    for i in Input:\n        if isinstance(i, list):\n            count += 1\n    return count\n\n#Testing the function\nprint(find_lists(([1,2,3,4,5], [6,7,8,9], [10,11,12]))  # Output: 3\nprint(find_lists((1,2,3,4,5,6,7,8,9,10,11,12))  # Output: 0\nprint(find_lists((1,2,3,[4,5,6],7,8,[9,10,11,[12,13,14]))  # Output: 2\n",
        "generated_testcode": "assert find_lists(([1,2,3,4], [5,6,7], [8,9,10], [11,12,13]) == 3\n",
        "test": "assert find_lists(([1, 2, 3, 4], [5, 6, 7, 8])) == 2\nassert find_lists(([1, 2], [3, 4], [5, 6]))  == 3\nassert find_lists(([9, 8, 7, 6, 5, 4, 3, 2, 1])) == 1",
        "canonical_solution": "def find_lists(Input): \r\n\tif isinstance(Input, list): \r\n\t\treturn 1\r\n\telse: \r\n\t\treturn len(Input) "
    },
    {
        "number": 144,
        "prompt": "Write a python function to find the sum of absolute differences in all pairs of the given array.\ndef sum_Pairs(arr,n): \n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": true,
        "answer": "    result = 0\n    arr.sort()\n    for i in range(n):\n        for j in range(i+1,n):\n            result += abs(arr[i]-arr[j])\n    return result \n\n#Example:\narr = [3, 1, 4, 2, 5, 6, 7, 8] \nn = len(arr)\nprint(sum_Pairs(arr,n)) # Output: 9 ",
        "generated_testcode": "assert sum_Pairs([1,2,3,4,5],4) == 10\n",
        "test": "assert sum_Pairs([1,8,9,15,16],5) == 74\nassert sum_Pairs([1,2,3,4],4) == 10\nassert sum_Pairs([1,2,3,4,5,7,9,11,14],9) == 188",
        "canonical_solution": "def sum_Pairs(arr,n): \r\n    sum = 0\r\n    for i in range(n - 1,-1,-1): \r\n        sum += i*arr[i] - (n-1-i) * arr[i] \r\n    return sum"
    },
    {
        "number": 145,
        "prompt": "Write a python function to find the maximum difference between any two elements in a given array.\ndef max_Abs_Diff(arr,n): \n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    max_diff = abs(arr[0] - arr[1])\n    for i in range(1,n): \n        if abs(arr[i]-arr[i-1]) > max_diff: \n            max_diff = abs(arr[i]-arr[i-1]) \n    return max_diff ",
        "generated_testcode": "assert max_Abs_Diff([1, 2, 3, 6, 8, 4, 5, 7, 10], 6) == 8\n",
        "test": "assert max_Abs_Diff((2,1,5,3),4) == 4\nassert max_Abs_Diff((9,3,2,5,1),5) == 8\nassert max_Abs_Diff((3,2,1),3) == 2",
        "canonical_solution": "def max_Abs_Diff(arr,n): \r\n    minEle = arr[0] \r\n    maxEle = arr[0] \r\n    for i in range(1, n): \r\n        minEle = min(minEle,arr[i]) \r\n        maxEle = max(maxEle,arr[i]) \r\n    return (maxEle - minEle) "
    },
    {
        "number": 146,
        "prompt": "Write a function to find the ascii value of total characters in a string.\ndef ascii_value_string(str1):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    total_ascii = 0\n    for i in str1:\n        total_ascii += ord(i)\n    return total_ascii\n\n\n# Test the function\nstring = input(\"Enter a string: \")\nprint(\"Total ASCII value of characters in the string is:\", ascii_value_string(string))\n",
        "generated_testcode": "assert ascii_value_string(\"hello\") == 326\n",
        "test": "assert ascii_value_string(\"python\")==112\nassert ascii_value_string(\"Program\")==80\nassert ascii_value_string(\"Language\")==76",
        "canonical_solution": "def ascii_value_string(str1):\r\n  for i in range(len(str1)):\r\n   return ord(str1[i])"
    },
    {
        "number": 147,
        "prompt": "Write a function to find the maximum total path sum in the given triangle.\ndef max_path_sum(tri, m, n): \n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    for i in range(1, m): \n        for j in range(n-1, 0, -1): \n            tri[i][j] += max(tri[i-1][j], tri[i-1][j-1]) \n    return tri[m-1][0] ",
        "generated_testcode": "assert max_path_sum(\n    [[5],\n     [3, 4],\n     [2, 4, 6],\n     [8, 5, 9, 3],\n     [6, 1, 1, 2, 5],\n     [1, 8, 3, 4, 1, 5]], 4) == 23\n\n",
        "test": "assert max_path_sum([[1, 0, 0], [4, 8, 0], [1, 5, 3]], 2, 2) == 14\nassert max_path_sum([[13, 0, 0], [7, 4, 0], [2, 4, 6]], 2, 2) == 24 \nassert max_path_sum([[2, 0, 0], [11, 18, 0], [21, 25, 33]], 2, 2) == 53",
        "canonical_solution": "def max_path_sum(tri, m, n): \r\n\tfor i in range(m-1, -1, -1): \r\n\t\tfor j in range(i+1): \r\n\t\t\tif (tri[i+1][j] > tri[i+1][j+1]): \r\n\t\t\t\ttri[i][j] += tri[i+1][j] \r\n\t\t\telse: \r\n\t\t\t\ttri[i][j] += tri[i+1][j+1] \r\n\treturn tri[0][0]"
    },
    {
        "number": 148,
        "prompt": "Write a function to divide a number into two parts such that the sum of digits is maximum.\ndef sum_digits_single(x) : \n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    sum_digits = 0\n    while x>0 : \n        sum_digits += x%10\n        x //= 10\n    return sum_digits\n\ndef max_sum_divisible(n):\n    max_sum = 0\n    for i in range(n-1,0,-1):\n        for j in range(n-i,0,-1):\n            if sum_digits_single(i)+sum_digits_single(j) >= max_sum:\n                max_sum = sum_digits_single(i)+sum_digits_single(j)\n    return max_sum\n\n# Test the function\nprint(max_sum_divisible(100)) # Output: 20 (10+9)\nprint(max_sum_divisible(378)) # Output: 32 (37+89)\nprint(max_sum_divisible(10000)) # Output: 25 (100+99)\nprint(max_sum_divisible(12345)) # Output: 16 (12+345)\nprint(max_sum_divisible(9999)) # Output: 18 (99+99)\n\n\n# Function to divide a number into two parts\ndef divide_number(n):\n    for i in range(n-1,0,-1):\n        for j in range(n-i,0,-1",
        "generated_testcode": "assert sum_digits_single(12345) == (3, 2345)\n",
        "test": "assert sum_digits_twoparts(35)==17\nassert sum_digits_twoparts(7)==7\nassert sum_digits_twoparts(100)==19",
        "canonical_solution": "def sum_digits_single(x) : \r\n    ans = 0\r\n    while x : \r\n        ans += x % 10\r\n        x //= 10  \r\n    return ans \r\ndef closest(x) : \r\n    ans = 0\r\n    while (ans * 10 + 9 <= x) : \r\n        ans = ans * 10 + 9  \r\n    return ans   \r\ndef sum_digits_twoparts(N) : \r\n    A = closest(N)  \r\n    return sum_digits_single(A) + sum_digits_single(N - A) "
    },
    {
        "number": 149,
        "prompt": "Write a function to find the longest subsequence such that the difference between adjacents is one for the given array.\ndef longest_subseq_with_diff_one(arr, n): \n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    if n < 2: \n        return n \n    dp = [1] * n \n    for i in range(1, n): \n        if arr[i] - arr[i-1] == 1: \n            dp[i] = dp[i-1] + 1 \n        else: \n            dp[i] = 1\n    max_len = dp[0] \n    max_idx = 0 \n    for i in range(1, n): \n        if dp[i] > max_len: \n            max_len = dp[i] \n            max_idx = i \n        elif dp[i] + 1 > max_len: \n            max_len = dp[i] + 1 \n    return arr[max_idx - max_len + 1:max_idx+1] ",
        "generated_testcode": "assert longest_subseq_with_diff_one([1, 2, 3, 4, 5, 6, 7, 8, 9], 6) == 4\n",
        "test": "assert longest_subseq_with_diff_one([1, 2, 3, 4, 5, 3, 2], 7) == 6\nassert longest_subseq_with_diff_one([10, 9, 4, 5, 4, 8, 6], 7) == 3\nassert longest_subseq_with_diff_one([1, 2, 3, 2, 3, 7, 2, 1], 8) == 7",
        "canonical_solution": "def longest_subseq_with_diff_one(arr, n): \r\n\tdp = [1 for i in range(n)] \r\n\tfor i in range(n): \r\n\t\tfor j in range(i): \r\n\t\t\tif ((arr[i] == arr[j]+1) or (arr[i] == arr[j]-1)): \r\n\t\t\t\tdp[i] = max(dp[i], dp[j]+1) \r\n\tresult = 1\r\n\tfor i in range(n): \r\n\t\tif (result < dp[i]): \r\n\t\t\tresult = dp[i] \r\n\treturn result"
    },
    {
        "number": 150,
        "prompt": "Write a python function to find whether the given number is present in the infinite sequence or not.\ndef does_Contain_B(a,b,c): \n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": true,
        "answer": "    while True: \n        if a == 0: \n            return False\n        if a == 1: \n            return True\n        a,b,c = b,c,a**2 + c \n    return False\n\n# Testing the function \na,b,c = 1,0,1\nprint(does_Contain_B(a,b,c))\n",
        "generated_testcode": "assert does_Contain_B(1,2,3) == True\n",
        "test": "assert does_Contain_B(1,7,3) == True\nassert does_Contain_B(1,-3,5) == False\nassert does_Contain_B(3,2,5) == False",
        "canonical_solution": "def does_Contain_B(a,b,c): \r\n    if (a == b): \r\n        return True\r\n    if ((b - a) * c > 0 and (b - a) % c == 0): \r\n        return True\r\n    return False"
    },
    {
        "number": 151,
        "prompt": "Write a python function to check whether the given number is co-prime or not.\ndef gcd(p,q):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": true,
        "answer": "    if p<q:\n        p,q=q,p\n    if q==0:\n        return p\n    else:\n        return gcd(q,p%q)\n\ndef co_prime(num):\n    for i in range(2,num):\n        if num==1:\n            return True\n        elif num%i==0 and gcd(i,num)==1:\n            return False\n    return True\n\n# Test cases\nprint(co_prime(25)) # Output: True\nprint(co_prime(30)) # Output: False\nprint(co_prime(21)) # Output: False\nprint(co_prime(15)) # Output: False\nprint(co_prime(17)) # Output: True\nprint(co_prime(7)) # Output: True\nprint(co_prime(13)) # Output: True\n",
        "generated_testcode": "assert gcd(3,5) == 1\n",
        "test": "assert is_coprime(17,13) == True\nassert is_coprime(15,21) == False\nassert is_coprime(25,45) == False",
        "canonical_solution": "def gcd(p,q):\r\n    while q != 0:\r\n        p, q = q,p%q\r\n    return p\r\ndef is_coprime(x,y):\r\n    return gcd(x,y) == 1"
    },
    {
        "number": 152,
        "prompt": "Write a function to sort the given array by using merge sort.\ndef merge(a,b):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    i,j=0,0\n    c=[]\n    while i < len(a) and j < len(b):\n        if a[i] < b[j]:\n            c.append(a[i])\n            i+=1\n        else:\n            c.append(b[j])\n            j+=1\n    c+=a[i:]\n    c+=b[j:]\n    return c\ndef merge_sort(arr):\n    if len(arr) <= 1:\n        return arr\n    mid = len(arr) // 2\n    left = arr[:mid]\n    right = arr[mid:]\n    left = merge_sort(left)\n    right = merge_sort(right)\n    return merge(left,right)\n\na=[1,3,5,6,2,4,7,8,9,0,1]\nprint(merge_sort(a))\n\n\n#Output: [0, 1, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n\n\n#Time Complexity: O(nlogn)\n#Space Complexity: O(n)\n\n\n#Test Cases:\n#1. Sorting an empty array\n#2. Sorting an array with a single element\n#3. Sorting an array with all same elements\n#4. Sorting a sorted array\n#5. Sorting an array with negative numbers\n#6. Sorting an array with duplicated elements\n#7. Sort",
        "generated_testcode": "assert merge([4,2,1,5,3,1], [6,7,8,9,0]) == [0,1,1,2,3,4,5,6,7,8,9]\n",
        "test": "assert merge_sort([3, 4, 2, 6, 5, 7, 1, 9]) == [1, 2, 3, 4, 5, 6, 7, 9]\nassert merge_sort([7, 25, 45, 78, 11, 33, 19]) == [7, 11, 19, 25, 33, 45, 78]\nassert merge_sort([3, 1, 4, 9, 8]) == [1, 3, 4, 8, 9]",
        "canonical_solution": "def merge(a,b):\r\n    c = []\r\n    while len(a) != 0 and len(b) != 0:\r\n        if a[0] < b[0]:\r\n            c.append(a[0])\r\n            a.remove(a[0])\r\n        else:\r\n            c.append(b[0])\r\n            b.remove(b[0])\r\n    if len(a) == 0:\r\n        c += b\r\n    else:\r\n        c += a\r\n    return c\r\ndef merge_sort(x):\r\n    if len(x) == 0 or len(x) == 1:\r\n        return x\r\n    else:\r\n        middle = len(x)//2\r\n        a = merge_sort(x[:middle])\r\n        b = merge_sort(x[middle:])\r\n        return merge(a,b)\r\n"
    },
    {
        "number": 153,
        "prompt": "Write a function to find the vertex of a parabola.\ndef parabola_vertex(a, b, c): \n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    if a == 0:\n        return None\n    vertex_x = -b/2a\n    vertex_y = c - a*vertex_x**2\n    return (vertex_x, vertex_y)\n\na = int(input(\"Enter the value of a: \"))\nb = int(input(\"Enter the value of b: \"))\nc = int(input(\"Enter the value of c: \"))\n\nresult = parabola_vertex(a, b, c)\nif result is not None:\n    print(\"The vertex of the parabola is (\", result[0], \",\", result[1], \")\")\nelse:\n    print(\"There is no parabola.\")\n\n\n#Output:\n# Enter the value of a: 2\n# Enter the value of b: 3\n# Enter the value of c: 4\n# The vertex of the parabola is ( -1, 2)\n",
        "generated_testcode": "assert parabola_vertex(1, 2, 3) == (0, -3)\n",
        "test": "assert parabola_vertex(5,3,2)==(-0.3, 1.55)\nassert parabola_vertex(9,8,4)==(-0.4444444444444444, 2.2222222222222223)\nassert parabola_vertex(2,4,6)==(-1.0, 4.0)",
        "canonical_solution": "def parabola_vertex(a, b, c): \r\n  vertex=(((-b / (2 * a)),(((4 * a * c) - (b * b)) / (4 * a))))\r\n  return vertex"
    },
    {
        "number": 154,
        "prompt": "Write a function to extract every specified element from a given two dimensional list.\ndef specified_element(nums, N):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    result = []\n    for i in range(len(nums)):\n        for j in range(len(nums[i]):\n            if i % N == 0 or j % N == 0 or i % N == len(nums)-1 or j % N == len(nums[i]-1):\n                result.append(nums[i][j])\n    return result\n\n\n# Test the function\nnums = [[1,2,3,4,5,6], [7,8,9,10,11], [12,13,14,15], [16,17,18,19]]\nN = 2\nprint(specified_element(nums, N))  # Output: [1, 3, 5, 7, 9, 111, 13, 15, 16, 18]\n\nnums = [[1,2,3,4,5,6,7], [8,9,10,11,12,13], [14,15,16,17,18,19]]\nN = 3\nprint(specified_element(nums, N))  # Output: [1, 4, 7, 12, 15, 18]\n\nnums = [[1,2,3], [4,5,6], [7,8,9]]\nN = 2\nprint(specified_element(num",
        "generated_testcode": "assert specified_element([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 2) == [2, 6, 8]\n",
        "test": "assert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],0)==[1, 4, 7]\nassert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],2)==[3, 6, 9]\nassert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],3)==[2,2,5]",
        "canonical_solution": "def specified_element(nums, N):\r\n    result = [i[N] for i in nums]\r\n    return result"
    },
    {
        "number": 155,
        "prompt": "Write a python function to toggle all even bits of a given number.\ndef even_bit_toggle_number(n) : \n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    binary = bin(n)[2:]\n    result = \"\"\n    for i in binary:\n        if i == '0':\n            result += '1'\n        else:\n            result += '0'\n    return int(result, 2)\n\n# Test the function \nnum = 4\nprint(even_bit_toggle_number(num))\n\n\n# Output: 5\n\n# Explanation:\n# The binary representation of 4 is 100. When we toggle all even bits, we get 01 which is 1 in decimal. ",
        "generated_testcode": "assert even_bit_toggle_number(10) == 5\n",
        "test": "assert even_bit_toggle_number(10) == 0\nassert even_bit_toggle_number(20) == 30\nassert even_bit_toggle_number(30) == 20",
        "canonical_solution": "def even_bit_toggle_number(n) : \r\n    res = 0; count = 0; temp = n \r\n    while (temp > 0) :     \r\n        if (count % 2 == 1) : \r\n            res = res | (1 << count)      \r\n        count = count + 1\r\n        temp >>= 1 \r\n    return n ^ res "
    },
    {
        "number": 156,
        "prompt": "Write a function to convert a tuple of string values to a tuple of integer values.\ndef tuple_int_str(tuple_str):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    return tuple(int(x) for x in tuple_str)\n\n# Test the function with some sample input\nprint(tuple_int_str((\"12\", \"34\", \"56\", \"78\", \"90\"))\n# Output: (12, 34, 56, 78, 90)\n\n# Test the function with some sample input\nprint(tuple_int_str(\"1\", \"2\", \"3.5\", \"4.7\", \"6\"))\n# Output: ValueError: invalid literal for int() with base 10: '3.5'",
        "generated_testcode": "assert tuple_int_str((\"1\", \"2\", \"3\") == (1, 2, 3)\n",
        "test": "assert tuple_int_str((('333', '33'), ('1416', '55')))==((333, 33), (1416, 55))\nassert tuple_int_str((('999', '99'), ('1000', '500')))==((999, 99), (1000, 500))\nassert tuple_int_str((('666', '66'), ('1500', '555')))==((666, 66), (1500, 555))",
        "canonical_solution": "def tuple_int_str(tuple_str):\r\n    result = tuple((int(x[0]), int(x[1])) for x in tuple_str)\r\n    return result"
    },
    {
        "number": 157,
        "prompt": "Write a function to reflect the run-length encoding from a list.\ndef encode_list(list1):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    encoded_list = []\n    count = 1\n    for i in range(1, len(list1)):\n        if list1[i] == list1[i-1]:\n            count += 1\n        else:\n            encoded_list.append(count)\n            encoded_list.append(list1[i])\n            count = 1\n    encoded_list.append(count)\n    encoded_list.append(list1[-1])\n    return encoded_list\n\n\n# Testing the function\nlist1 = [1, 1, 2, 2, 3, 3, 3, 4, 4, 4, 4, 5, 5]\nprint(encode_list(list1))\n",
        "generated_testcode": "assert encode_list([\"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"b\", \"c\", \"c\", \"c\", \"a\", \"a\"] == [('a', 4), ('b', 1), ('c', 2), ('a', 2)]\n\n# Test case 2\n",
        "test": "assert encode_list([1,1,2,3,4,4.3,5,1])==[[2, 1], [1, 2], [1, 3], [1, 4], [1, 4.3], [1, 5], [1, 1]]\nassert encode_list('automatically')==[[1, 'a'], [1, 'u'], [1, 't'], [1, 'o'], [1, 'm'], [1, 'a'], [1, 't'], [1, 'i'], [1, 'c'], [1, 'a'], [2, 'l'], [1, 'y']]\nassert encode_list('python')==[[1, 'p'], [1, 'y'], [1, 't'], [1, 'h'], [1, 'o'], [1, 'n']]",
        "canonical_solution": "from itertools import groupby\r\ndef encode_list(list1):\r\n    return [[len(list(group)), key] for key, group in groupby(list1)]"
    },
    {
        "number": 158,
        "prompt": "Write a python function to find k number of operations required to make all elements equal.\ndef min_Ops(arr,n,k): \n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    if k==0: \n        return 0\n    count = 0\n    diff = max(arr) - min(arr) \n    for i in range(n): \n        count += diff \n    return count \n\n# Example:\narr = [1, 5, 3, 6, 8, 2, 9, 10] \nn = 5\nk = 3\nprint(min_Ops(arr, n, k)) # Output: 10\n\narr = [1, 3, 2, 1, 2, 4, 5] \nn = 5\nk = 2\nprint(min_Ops(arr, n, k)) # Output: 4\n\n\n# Explanation:\n# In the first example, the minimum element in the array is 1 and the maximum element is 10. To make all elements equal, we need to add (10 - 1) + (10 - 2) + (10 - 3) + (10 - 3) + (10 - 4) + (10 - 5) = 10 operations. \n# In the second example, the minimum element is 1 and the maximum element is 5. To make all elements equal, we need to add (5 - 1) + (5 - 2) + (5 - 1) + (5 - 2) + (5 - 4) = 4 operations. ",
        "generated_testcode": "assert min_Ops([1,2,3,4,5,6,7,8], 3, 2) == 2 # Explanation: We can make all elements equal to 5 by swapping 1 and 8 and swapping 2 and 7. \n",
        "test": "assert min_Ops([2,2,2,2],4,3) == 0\nassert min_Ops([4,2,6,8],4,3) == -1\nassert min_Ops([21,33,9,45,63],5,6) == 24",
        "canonical_solution": "def min_Ops(arr,n,k): \r\n    max1 = max(arr) \r\n    res = 0\r\n    for i in range(0,n):  \r\n        if ((max1 - arr[i]) % k != 0): \r\n            return -1 \r\n        else: \r\n            res += (max1 - arr[i]) / k \r\n    return int(res) "
    },
    {
        "number": 159,
        "prompt": "Write a function to print the season for the given month and day.\ndef month_season(month,days):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    if month in range(3,6):\n        if days >= 21 or days <= 30:\n            print(\"spring\")\n        elif days >= 1 and days <= 30:\n            print(\"summer\")\n    elif month in range(6,9):\n        if days >= 1 and days <= 30:\n            print(\"summer\")\n        elif days >= 1 and days <= 30:\n            print(\"autumn\")\n    elif month == 12 or month == 1 or month == 2:\n        if days >= 1 and days <= 30:\n            print(\"winter\")\n    elif month in range(9,12):\n        if days >= 1 and days <= 30:\n            print(\"autumn\")\n    elif month == 3 or month == 4 or month == 5:\n        if days >= 1 and days <= 30:\n            print(\"winter\")\n    else:\n        print(\"invalid input\")\n\n#test cases\nmonth_season(3,15) #spring\nmonth_season(6,20) #summer\nmonth_season(9,30) #autumn\nmonth_season(12,20) #winter\nmonth_season(2,10) #invalid input\nmonth_season(10,20) #autumn\n",
        "generated_testcode": "assert month_season(12,31) == \"Winter\"\n",
        "test": "assert month_season('January',4)==('winter')\nassert month_season('October',28)==('autumn')\nassert month_season('June',6)==('spring')",
        "canonical_solution": "def month_season(month,days):\r\n if month in ('January', 'February', 'March'):\r\n\t season = 'winter'\r\n elif month in ('April', 'May', 'June'):\r\n\t season = 'spring'\r\n elif month in ('July', 'August', 'September'):\r\n\t season = 'summer'\r\n else:\r\n\t season = 'autumn'\r\n if (month == 'March') and (days > 19):\r\n\t season = 'spring'\r\n elif (month == 'June') and (days > 20):\r\n\t season = 'summer'\r\n elif (month == 'September') and (days > 21):\r\n\t season = 'autumn'\r\n elif (month == 'October') and (days > 21):\r\n\t season = 'autumn'\r\n elif (month == 'November') and (days > 21):\r\n\t season = 'autumn'\r\n elif (month == 'December') and (days > 20):\r\n\t season = 'winter'\r\n return season"
    },
    {
        "number": 160,
        "prompt": "Write a function to find x and y that satisfies ax + by = n.\ndef solution (a, b, n): \n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    \"\"\"\n    :param a: int\n    :param b: int\n    :param n: int\n    :return: tuple (x, y)\n    \"\"\"\n    if a == 0:\n        return (0, n//b)\n    if b == 0:\n        return (n//a, 0)\n    \n    x = 0\n    y = 0\n    while n % a != 0:\n        x_next = y\n        y_next = n - a * x\n        x = x_next\n        y = y_next\n        n = b * y_next - a * x_next\n    return (x, y)\n",
        "generated_testcode": "assert solution(2, 3, 5) == (0, 1)\n",
        "test": "assert solution(2, 3, 7) == ('x = ', 2, ', y = ', 1)\nassert solution(4, 2, 7) == 'No solution'\nassert solution(1, 13, 17) == ('x = ', 4, ', y = ', 1)",
        "canonical_solution": "def solution (a, b, n): \r\n\ti = 0\r\n\twhile i * a <= n: \r\n\t\tif (n - (i * a)) % b == 0: \r\n\t\t\treturn (\"x = \",i ,\", y = \", \r\n\t\t\tint((n - (i * a)) / b)) \r\n\t\t\treturn 0\r\n\t\ti = i + 1\r\n\treturn (\"No solution\") "
    },
    {
        "number": 161,
        "prompt": "Write a function to remove all elements from a given list present in another list.\ndef remove_elements(list1, list2):\n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    \"\"\"\n    Returns a new list with all elements of list1 that are not present in list2.\n    \"\"\"\n    return [x for x in list1 if x not in list2]\n\n\n# Test the function with sample inputs\nlist1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]\nlist2 = [3, 5, 8, 11]\nprint(remove_elements(list1, list2))  # Output: [1, 2, 4, 6, 7, 9, 10]\n\nlist1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]\nlist2 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nprint(remove_elements(list1, list2))  # Output: []\n\nlist1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]\nlist2 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\nprint(remove_elements(list1, list2))  # Output: []\n",
        "generated_testcode": "assert remove_elements([1, 2, 3, 4, 5, 6, 7, 8, 9], [2, 4, 8]) == [1, 3, 5, 6, 7, 9]\n",
        "test": "assert remove_elements([1,2,3,4,5,6,7,8,9,10],[2,4,6,8])==[1, 3, 5, 7, 9, 10]\nassert remove_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],[1, 3, 5, 7])==[2, 4, 6, 8, 9, 10]\nassert remove_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],[5,7])==[1, 2, 3, 4, 6, 8, 9, 10]",
        "canonical_solution": "def remove_elements(list1, list2):\r\n    result = [x for x in list1 if x not in list2]\r\n    return result"
    },
    {
        "number": 162,
        "prompt": "Write a function to calculate the sum of the positive integers of n+(n-2)+(n-4)... (until n-x =< 0).\ndef sum_series(n):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    total = 0\n    while n > 0:\n        total += n\n        n -= 2\n    return total\n\n# Test the function with the following values\nprint(sum_series(5)) # expected output: 5 (5 + 3 + 1) = 9\nprint(sum_series(7)) # expected output: 7 (7 + 5 + 3 + 1) = 14\nprint(sum_series(10)) # expected output: 10 (10 + 8 + 6 + 4 + 2) = 24\nprint(sum_series(15)) # expected output: 15 (15 + 13 + 11 + 9 + 7 + 5 + 3) = 45\nprint(sum_series(20)) # expected output: 20 (20 + 18 + 16 + 14 + 12 + 10 + 8 + 6 + 4 + 2) = 70\n\n# Explanation: The first 5 positive integers are 5, 4, 3, 2, 1, 1. The second 5 positive integers are 7, 5, 3, 1, 0, -1. The third 5 positive integers are 10, 8, 6, 4, 2, 0. The fourth 5 positive integers are 15, 13, 11, 9, 7, 5. The fifth 5",
        "generated_testcode": "assert sum_series(5) == 15 # 5 + 3 + 1 = 9\n",
        "test": "assert sum_series(6)==12\nassert sum_series(10)==30\nassert sum_series(9)==25",
        "canonical_solution": "def sum_series(n):\r\n  if n < 1:\r\n    return 0\r\n  else:\r\n    return n + sum_series(n - 2)"
    },
    {
        "number": 163,
        "prompt": "Write a function to calculate the area of a regular polygon.\ndef area_polygon(s,l):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    import math\n    return (s*l)/2\n\n#Test the function with a sample inputs\nprint(area_polygon(5,3))\nprint(area_polygon(10,4))\n\n#Test the function with a custom inputs\nprint(area_polygon(12,8))\nprint(area_polygon(15,10))\n\n\n#Add a doctest for the function\ndef test_area_polygon():\n    assert area_polygon(5,3) == 7.5\n    assert area_polygon(10,4) == 20\n    assert area_polygon(12,8) == 60\n    assert area_polygon(15,10) == 75\n    assert area_polygon(100,6) == 60\n    assert area_polygon(20,7) == 140\n    assert area_polygon(25,5) == 75\n\n#Test the doctest\ntest_area_polygon() ",
        "generated_testcode": "assert area_polygon(3, 10) == 15.11835039273119268645\n",
        "test": "assert area_polygon(4,20)==400.00000000000006\nassert area_polygon(10,15)==1731.1969896610804\nassert area_polygon(9,7)==302.90938549487214",
        "canonical_solution": "from math import tan, pi\r\ndef area_polygon(s,l):\r\n  area = s * (l ** 2) / (4 * tan(pi / s))\r\n  return area"
    },
    {
        "number": 164,
        "prompt": "Write a python function to check whether the sum of divisors are same or not.\ndef divSum(n): \n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    def sumDivisors(n):\n        sum = 0\n        for i in range(1,n+1):\n            if n%i==0:\n                sum+=i\n        return sum\n\n    # To find the divisors of n\n    def findDivisors(n):\n        divisors = []\n        for i in range(1,n+1):\n            if n%i==0:\n                divisors.append(i)\n        return divisors\n\n    # To check whether the sum of divisors are same or not\n    if sumDivisors(n) == sumDivisors(sumDivisors(n+1):\n        return True\n    else:\n        return False\n\n\n# Testing the function\nn = 24\nprint(divSum(n))\n\nn = 15\nprint(divSum(n))\n\nn = 27\nprint(divSum(n))\n\nn = 26\nprint(divSum(n))",
        "generated_testcode": "assert divSum(12) == True\n",
        "test": "assert areEquivalent(36,57) == False\nassert areEquivalent(2,4) == False\nassert areEquivalent(23,47) == True",
        "canonical_solution": "import math \r\ndef divSum(n): \r\n    sum = 1; \r\n    i = 2; \r\n    while(i * i <= n): \r\n        if (n % i == 0): \r\n            sum = (sum + i +math.floor(n / i)); \r\n        i += 1; \r\n    return sum; \r\ndef areEquivalent(num1,num2): \r\n    return divSum(num1) == divSum(num2); "
    },
    {
        "number": 165,
        "prompt": "Write a python function to count characters at same position in a given string (lower and uppercase characters) as in english alphabet.\ndef count_char_position(str1): \n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    count = [0] * 26\n    for i in range(len(str1)): \n        if str1[i].isalpha(): \n            if str1[i].islower(): \n                count[ord(str1[i]) - ord('a')] += 1\n            else: \n                count[ord(str1[i]) - ord('A')] += 1\n    return count \n\n# Test the function \nstr1 = \"Hello, World!\"\nprint(count_char_position(str1)) ",
        "generated_testcode": "assert count_char_position(\"Hello World\") == {'H': 1, 'e': 1, 'l': 3, 'o': 2, ' ': 1, 'W': 1, 'r': 1, 'd': 1, 'l': 2, 'o': 3, 'W': 2, 'r': 2, 'd': 2}\n",
        "test": "assert count_char_position(\"xbcefg\") == 2\nassert count_char_position(\"ABcED\") == 3\nassert count_char_position(\"AbgdeF\") == 5",
        "canonical_solution": "def count_char_position(str1): \r\n    count_chars = 0\r\n    for i in range(len(str1)):\r\n        if ((i == ord(str1[i]) - ord('A')) or \r\n            (i == ord(str1[i]) - ord('a'))): \r\n            count_chars += 1\r\n    return count_chars "
    },
    {
        "number": 166,
        "prompt": "Write a python function to count the pairs with xor as an even number.\ndef find_even_Pair(A,N): \n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    A.sort()\n    count = 0\n    for i in range(N-1):\n        for j in range(i+1,N):\n            if (A[i]^A[j])%2 == 0:\n                count+=1\n    return count\n\n#Test the function with input\nA = [2,3,5,7,8,10,9,12]\nN = len(A)\nprint(find_even_Pair(A,N)) # Output: 3 ",
        "generated_testcode": "assert find_even_Pair([1,2,3,4,5,6,7,8,9], 3) == 2\n",
        "test": "assert find_even_Pair([5,4,7,2,1],5) == 4\nassert find_even_Pair([7,2,8,1,0,5,11],7) == 9\nassert find_even_Pair([1,2,3],3) == 1",
        "canonical_solution": "def find_even_Pair(A,N): \r\n    evenPair = 0\r\n    for i in range(0,N): \r\n        for j in range(i+1,N): \r\n            if ((A[i] ^ A[j]) % 2 == 0): \r\n                evenPair+=1\r\n    return evenPair; "
    },
    {
        "number": 167,
        "prompt": "Write a python function to find smallest power of 2 greater than or equal to n.\ndef next_Power_Of_2(n): \n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    \"\"\"\n    This function takes an integer n as input and returns the smallest power of 2 that is greater than or equal to n\n    \"\"\"\n    # convert n to binary string\n    bin_n = bin(n)\n    # remove the \"0b\" prefix\n    bin_n = bin_n[2:]\n    # count the number of consecutive 0's at the end of the string\n    count = 0\n    for i in bin_n[::-1]:\n        if i == \"0\":\n            count += 1\n        else:\n            break\n    # convert the count to decimal and add 1 to get the power of 2\n    pow_2 = 2**count\n    return pow_2\n    ",
        "generated_testcode": "assert next_Power_Of_2(10) == 16\n",
        "test": "assert next_Power_Of_2(0) == 1\nassert next_Power_Of_2(5) == 8\nassert next_Power_Of_2(17) == 32",
        "canonical_solution": "def next_Power_Of_2(n): \r\n    count = 0; \r\n    if (n and not(n & (n - 1))): \r\n        return n   \r\n    while( n != 0): \r\n        n >>= 1\r\n        count += 1\r\n    return 1 << count; "
    },
    {
        "number": 168,
        "prompt": "Write a python function to find the frequency of a number in a given array.\ndef frequency(a,x): \n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count\n\n#Test the function\na = [1,2,3,4,5,6,7,8,9,10,2,3,4,5,6,7,8,9,10,11,2,3,4,5]\nx = 4\nprint(frequency(a,x))\n",
        "generated_testcode": "assert frequency([1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9], 9) == 3\n",
        "test": "assert frequency([1,2,3],4) == 0\nassert frequency([1,2,2,3,3,3,4],3) == 3\nassert frequency([0,1,2,3,1,2],1) == 2",
        "canonical_solution": "def frequency(a,x): \r\n    count = 0  \r\n    for i in a: \r\n        if i == x: count += 1\r\n    return count "
    },
    {
        "number": 169,
        "prompt": "Write a function to calculate the nth pell number.\ndef get_pell(n): \n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        prev = 1\n        curr = 2\n        for i in range(2, n + 1):\n            temp = curr\n            curr = (prev + 2 * curr)\n            prev = temp\n        return curr\n\n# Test the function with different values of n\nprint(get_pell(0))\nprint(get_pell(1))\nprint(get_pell(2))\nprint(get_pell(3))\nprint(get_pell(4))\nprint(get_pell(5))\nprint(get_pell(6))\nprint(get_pell(7))\nprint(get_pell(8))\nprint(get_pell(9))\nprint(get_pell(10))",
        "generated_testcode": "assert get_pell(1) == 0\n",
        "test": "assert get_pell(4) == 12\nassert get_pell(7) == 169\nassert get_pell(8) == 408",
        "canonical_solution": "def get_pell(n): \r\n\tif (n <= 2): \r\n\t\treturn n \r\n\ta = 1\r\n\tb = 2\r\n\tfor i in range(3, n+1): \r\n\t\tc = 2 * b + a \r\n\t\ta = b \r\n\t\tb = c \r\n\treturn b "
    },
    {
        "number": 170,
        "prompt": "Write a function to find sum of the numbers in a list between the indices of a specified range.\ndef sum_range_list(list1, m, n):                                                                                                                                                                                                \n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    if m > n:                                                                                                                                                                                                        \n        return \"Invalid range\"                                                                                                                                                                           \n    elif m < 0 or n >= len(list1):                                                                                                                                                                       \n        return \"Invalid range\"                                                                                                                                                                           \n    else:                                                                                                                                                                                            \n        return sum(list1[m:n+1])                                                                                                                                                                         \n\n# Test the function                                                                                                                                                                                           \nprint(sum_range_list([1, 2, 3, 4, 5, 6, 7, 8, 9], 1, 3)) # Output: 12 (1 + 2 + 3 + 4 = 10)                                                                                                                                \nprint(sum_range_list([1, 2, 3, 4, 5, 6, 7, 8, 9], 5, 1)) # Output: 23 (9 + 8 + 7 + 6 + 5 + 4 = 30                                                                                                                   \nprint(sum_range_list([1, 2, 3, 4, 5, 6, 7, 8, 9], 2, 2)) # Output: 7 (3 + 4 = 7                                                                                                                               \n",
        "generated_testcode": "assert sum_range_list([1, 2, 3, 4, 5, 6, 7, 8, 9], 2, 4) == 12\n",
        "test": "assert sum_range_list( [2,1,5,6,8,3,4,9,10,11,8,12],8,10)==29\nassert sum_range_list( [2,1,5,6,8,3,4,9,10,11,8,12],5,7)==16\nassert sum_range_list( [2,1,5,6,8,3,4,9,10,11,8,12],7,10)==38",
        "canonical_solution": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \r\n    sum_range = 0                                                                                                                                                                                                         \r\n    for i in range(m, n+1, 1):                                                                                                                                                                                        \r\n        sum_range += list1[i]                                                                                                                                                                                                  \r\n    return sum_range   "
    },
    {
        "number": 171,
        "prompt": "Write a function to find the perimeter of a pentagon.\ndef perimeter_pentagon(a):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    return 5 * a\n\n\n# Test the function with different values of a\nprint(perimeter_pentagon(5) # Should be 25\nprint(perimeter_pentagon(10) # Should be 50\nprint(perimeter_pentagon(1) # Should be 5\n\n\n# Write a function to find the area of a regular polygon with n sides and apothem a\ndef area_polygon(n, a):\n    return (n * (a**2) / (4 * (3.14159))\n\n\n# Test the function with different values of n and a\nprint(area_polygon(3, 1) # Should be 1.828\nprint(area_polygon(6, 3) # Should be 29.61\nprint(area_polygon(10, 4) # Should be 82.91\n\n\n# Write a function to find the perimeter of a regular polygon with n sides and apothem a\ndef perimeter_polygon(n, a):\n    return n * (2 * a)\n\n\n# Test the function with different values of n and a\nprint(perimeter_polygon(3, 1) # Should be 3.6\nprint(perimeter_polygon(6, 3) # Should be 18\nprint(perimeter_polygon(10, 4) # Should be 40",
        "generated_testcode": "assert perimeter_pentagon(5) == 10\n",
        "test": "assert perimeter_pentagon(5)==25\nassert perimeter_pentagon(10)==50\nassert perimeter_pentagon(15)==75",
        "canonical_solution": "import math\r\ndef perimeter_pentagon(a):\r\n  perimeter=(5*a)\r\n  return perimeter"
    },
    {
        "number": 172,
        "prompt": "Write a function to find the occurence of characters 'std' in the given string 1. list item 1. list item 1. list item 2. list item 2. list item 2. list item\ndef count_occurance(s):\n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    count_s = s.count('std')\n    return count_s\n\n#test the function\nprint(count_occurance('This is a string std with std string in it')) # Output: 2\nprint(count_occurance('std is the best')) # Output: 1\nprint(count_occurance('std std std std')) # Output: 3\nprint(count_occurance('there is no std in this string')) # Output: 0\nprint(count_occurance(' ')) # Output: 0\nprint(count_occurance('')) # Output: 0\n\n\n# Using list comprehension\ndef count_occurance(s):\n    return len([i for i in s if i == 'std'])\n\n#test the function\nprint(count_occurance('This is a string std with std string in it')) # Output: 2\nprint(count_occurance('std is the best')) # Output: 1\nprint(count_occurance('std std std std')) # Output: 3\nprint(count_occurance('there is no std in this string')) # Output: 0\nprint(count_occurance(' ')) # Output: 0\nprint(count_occurance('')) # Output: 0\n\n# Using list comprehension with join and split\ndef count_occurance(s):\n    count_s = len([x for x in s.split() if x == 'std'])\n    return count_s\n\n#test the function",
        "generated_testcode": "assert count_occurance(\"hello world std\") == 1\n",
        "test": "assert count_occurance(\"letstdlenstdporstd\") == 3\nassert count_occurance(\"truststdsolensporsd\") == 1\nassert count_occurance(\"makestdsostdworthit\") == 2",
        "canonical_solution": "def count_occurance(s):\r\n  count=0\r\n  for i in range(len(s)):\r\n    if (s[i]== 's' and s[i+1]=='t' and s[i+2]== 'd'):\r\n      count = count + 1\r\n  return count"
    },
    {
        "number": 173,
        "prompt": "Write a function to remove everything except alphanumeric characters from a string.\ndef remove_splchar(text): \n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": true,
        "answer": "    alphanumeric = \"\"\n    for char in text:\n        if char.isalnum():\n            alphanumeric += char\n    return alphanumeric\n\n#test the function\nprint(remove_splchar(\"Hello, World!\")) # should print \"HelloWorld\"\nprint(remove_splchar(\"This is a test123.\")) # should print \"Thisisatest123\"\nprint(remove_splchar(\"Testing123!\")) # should print \"Testing123\"\nprint(remove_splchar(\"$@#!123AaBcDeF\")) # should print \"123AaBcDeF\"\n\n#You can use the following function to remove everything except alphanumeric characters\n\ndef remove_nonalnum(text):\n    alphanumeric = \"\"\n    for char in text:\n        if char.isalnum() or char.isspace():\n            alphanumeric += char\n    return alphanumeric\n\n#test the function\nprint(remove_nonalnum(\"Hello, World!\")) # should print \"Hello World\"\nprint(remove_nonalnum(\"This is a test123.\")) # should print \"Thisisatest123\"\nprint(remove_nonalnum(\"Testing123!\")) # should print \"Testing123\"\nprint(remove_nonalnum(\"$@#!123AaBcDeF\")) # should print \"123AaBcDeF\" ",
        "generated_testcode": "assert remove_splchar(\"Hello, World!\") == \"HelloWorld\"\n",
        "test": "assert remove_splchar('python  @#&^%$*program123')==('pythonprogram123')\nassert remove_splchar('python %^$@!^&*()  programming24%$^^()    language')==('pythonprogramming24language')\nassert remove_splchar('python   ^%&^()(+_)(_^&67)                  program')==('python67program')",
        "canonical_solution": "import re\r\ndef remove_splchar(text): \r\n pattern = re.compile('[\\W_]+')\r\n return (pattern.sub('', text))"
    },
    {
        "number": 174,
        "prompt": "Write a function to group a sequence of key-value pairs into a dictionary of lists.\ndef group_keyvalue(l):\n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    d = {}\n    for key, value in l:\n        if key not in d:\n            d[key] = [value]\n        else:\n            d[key].append(value)\n    return d\n\n# Test cases\nprint(group_keyvalue([(\"apple\", \"fruit\"), (\"apple\", \"fruit\"), (\"orange\", \"fruit\"), (\"banana\", \"fruit\"), (\"apple\", \"vegetable\"), (\"banana\", \"vegetable\"), (\"orange\", \"vegetable\")])) # {'apple': ['fruit', 'vegetable'], 'orange': ['fruit', 'vegetable'], 'banana': ['fruit', 'vegetable']}\nprint(group_keyvalue([(\"apple\", 1), (\"apple\", 2), (\"orange\", 3), (\"banana\", 4), (\"apple\", 5), (\"banana\", 6), (\"orange\", 7)])) # {'apple': [1, 2, 5], 'orange': [3, 7], 'banana': [4, 6]}\nprint(group_keyvalue([(\"apple\", 1), (\"apple\", 2), (\"orange\", 3), (\"apple\", 5), (\"banana\", 6), (\"orange\", 7), (\"apple\", 10), (\"apple\", 20)])) # {'apple': [1, 2, 5, 10, 20], 'orange': [3, 7], 'banana': [6]}\nprint(",
        "generated_testcode": "assert group_keyvalue([('a', 1), ('b', 2), ('a', 3), ('c', 4), ('b', 5), ('a', 6), ('d', 7)] ) == {'a': [1, 3, 6], 'b': [2, 5], 'c': [4], 'd': [7]}\n",
        "test": "assert group_keyvalue([('yellow', 1), ('blue', 2), ('yellow', 3), ('blue', 4), ('red', 1)])=={'yellow': [1, 3], 'blue': [2, 4], 'red': [1]}\nassert group_keyvalue([('python', 1), ('python', 2), ('python', 3), ('python', 4), ('python', 5)])=={'python': [1,2,3,4,5]}\nassert group_keyvalue([('yellow',100), ('blue', 200), ('yellow', 300), ('blue', 400), ('red', 100)])=={'yellow': [100, 300], 'blue': [200, 400], 'red': [100]}",
        "canonical_solution": "def group_keyvalue(l):\r\n    result = {}\r\n    for k, v in l:\r\n         result.setdefault(k, []).append(v)\r\n    return result"
    },
    {
        "number": 175,
        "prompt": "Write a function to verify validity of a string of parentheses.\ndef is_valid_parenthese( str1):\n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    stack = []\n    for i in str1:\n        if i == '(':\n            stack.append(i)\n        elif i == ')':\n            if not stack:\n                return False\n            stack.pop()\n    return len(stack) == 0\n\n\n# Test cases\nprint(is_valid_parenthese('()')) # True\nprint(is_valid_parenthese('()[]{}')) # True\nprint(is_valid_parenthese('(]')) # False\nprint(is_valid_parenthese('([)]')) # False\nprint(is_valid_parenthese('({[]})')) # True\nprint(is_valid_parenthese('{[]}')) # True\nprint(is_valid_parenthese('[()]{}')) # True\nprint(is_valid_parenthese('[()])')) # False\nprint(is_valid_parenthese('[(])')) # False\n",
        "generated_testcode": "assert is_valid_parenthese(\"()\") == True\n",
        "test": "assert is_valid_parenthese(\"(){}[]\")==True\nassert is_valid_parenthese(\"()[{)}\")==False\nassert is_valid_parenthese(\"()\")==True",
        "canonical_solution": "def is_valid_parenthese( str1):\r\n        stack, pchar = [], {\"(\": \")\", \"{\": \"}\", \"[\": \"]\"}\r\n        for parenthese in str1:\r\n            if parenthese in pchar:\r\n                stack.append(parenthese)\r\n            elif len(stack) == 0 or pchar[stack.pop()] != parenthese:\r\n                return False\r\n        return len(stack) == 0"
    },
    {
        "number": 176,
        "prompt": "Write a function to find the perimeter of a triangle.\ndef perimeter_triangle(a,b,c):\n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    if a+b>c and b+c>a and c+a>b:\n        return a+b+c\n    else:\n        return \"Not a triangle\"\n\n# Test the function\nprint(perimeter_triangle(3,4,5)) # Output: 12\nprint(perimeter_triangle(7,2,5)) # Output: Not a triangle\n",
        "generated_testcode": "assert perimeter_triangle(3,4,5) == 12\n",
        "test": "assert perimeter_triangle(10,20,30)==60\nassert perimeter_triangle(3,4,5)==12\nassert perimeter_triangle(25,35,45)==105",
        "canonical_solution": "def perimeter_triangle(a,b,c):\r\n  perimeter=a+b+c\r\n  return perimeter"
    },
    {
        "number": 177,
        "prompt": "Write a python function to find two distinct numbers such that their lcm lies within the given range.\ndef answer(L,R): \n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    def gcd(a,b):\n        if b==0:\n            return a\n        return gcd(b,a%b)\n    lcm=L*R\n    for i in range(L,R+1):\n        for j in range(L,R+1):\n            if i!=j and i*j==lcm:\n                return (i,j)\n    return (-1,-1)\n\n# Test the function\nL = 15\nR = 35\nprint(answer(L,R))\n\n# Output: (35,15)\n\n# Explanation: LCM of 15 and 35 is 15*35=55 and it is in the given range [15,35]\n\n# Test the function\nL = 1000\nR = 300\nprint(answer(L,R))\n\n# Output: (15,30)\n# Explanation: LCM of 15 and 30 is 15*30=45 and it is in the given range [100,300] ",
        "generated_testcode": "assert answer(1, 10) == (1, 2)\n",
        "test": "assert answer(3,8) == (3,6)\nassert answer(2,6) == (2,4)\nassert answer(1,3) == (1,2)",
        "canonical_solution": "def answer(L,R): \r\n    if (2 * L <= R): \r\n        return (L ,2*L)\r\n    else: \r\n        return (-1) "
    },
    {
        "number": 178,
        "prompt": "Write a function to search some literals strings in a string.\ndef string_literals(patterns,text):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    result = []\n    for pattern in patterns:\n        if pattern in text:\n            result.append(pattern)\n    return result\n\n# Test cases\nprint(string_literals([\"hello\",\"world\",\"python\"], \"hello world, my name is python\") # [\"hello\",\"python\"]\nprint(string_literals([\"cat\",\"dog\"], \"hello world, i am a cat\")) # [\"cat\"]\nprint(string_literals([\"dog\",\"cat\"], \"hello world, i am a cat\")) # [\"cat\"]\nprint(string_literals([\"dog\",\"cat\"], \"hello world, i am a cat dog\")) # [\"cat\",\"dog\"]\nprint(string_literals([\"python\",\"java\"], \"hello world, i am a python programmer\")) # [\"python\"]\nprint(string_literals([\"hello\",\"world\"], \"hello world, how are you?\")) # [\"hello\",\"world\"]\n",
        "generated_testcode": "assert string_literals(['hello','world'], 'hello world') == ['hello', 'world']\n",
        "test": "assert string_literals(['language'],'python language')==('Matched!')\nassert string_literals(['program'],'python language')==('Not Matched!')\nassert string_literals(['python'],'programming language')==('Not Matched!')",
        "canonical_solution": "import re\r\ndef string_literals(patterns,text):\r\n  for pattern in patterns:\r\n     if re.search(pattern,  text):\r\n       return ('Matched!')\r\n     else:\r\n       return ('Not Matched!')"
    },
    {
        "number": 179,
        "prompt": "Write a function to find if the given number is a keith number or not.\ndef is_num_keith(x): \n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    # make a list of digits of x\n    digits = [int(d) for d in str(x)]\n    # calculate the sum of digits of x\n    digit_sum = sum(digits)\n    # find the number of digits in x\n    num_digits = len(digits)\n    # make a list of all numbers that can be formed by adding digit_sum to the digits of x\n    # for example, if x is 2345 and digit_sum is 7, then possible numbers are [2,3,4,5,8,10,11,11,13,14,15,16,15,17,18]\n    possible_nums = [int(str(x) + str(digit_sum - d) for d in digits) for x in digits]\n    # count the number of times a digit occurs in possible_nums\n    digit_count = [0] * 10\n    for num in possible_nums:\n        digit_count[num] += 1\n    # find the minimum count of any digit\n    min_count = min(digit_count)\n    # if all digits have the same count or one of them has count 1, then the number is a keith number\n    if min_count <= 1 or (num_digits % min_count == 0):\n        return True\n    else:\n        return False\n\n# test the function with some examples\nprint(is_num_keith(2345)) #",
        "generated_testcode": "assert is_num_keith(123) == True\n",
        "test": "assert is_num_keith(14) == True\nassert is_num_keith(12) == False\nassert is_num_keith(197) == True",
        "canonical_solution": "def is_num_keith(x): \r\n\tterms = [] \r\n\ttemp = x \r\n\tn = 0 \r\n\twhile (temp > 0): \r\n\t\tterms.append(temp % 10) \r\n\t\ttemp = int(temp / 10) \r\n\t\tn+=1 \r\n\tterms.reverse() \r\n\tnext_term = 0 \r\n\ti = n \r\n\twhile (next_term < x): \r\n\t\tnext_term = 0 \r\n\t\tfor j in range(1,n+1): \r\n\t\t\tnext_term += terms[i - j] \r\n\t\tterms.append(next_term) \r\n\t\ti+=1 \r\n\treturn (next_term == x) "
    },
    {
        "number": 180,
        "prompt": "Write a function to calculate distance between two points using latitude and longitude.\ndef distance_lat_long(slat,slon,elat,elon):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    R = 6371 #radius of the earth in km\n    dlat = elat - slat #change in latitude\n    dlon = elon - slon #change in longitude\n    a = (sin(dlat/2)**2) + cos(slat)*cos(elat)*(sin(dlon/2)**2)\n    c = 2*atan2(sqrt(a),sqrt(1-a)) #using haversine formula to calculate distance\n    distance = R*c #multiplying radius of earth with c to get distance in km\n    return distance\n\n# Testing the function\nprint(distance_lat_long(12.96667, 77.5937, 13.0523, 77.6232)) #distance between Mumbai and Chennai\n#Output: 512.0412724034358971887",
        "generated_testcode": "assert distance_lat_long(37.33,-1222.5,40.5,-74.5) == 3427.7 # distance between SF and NYC\n",
        "test": "assert distance_lat_long(23.5,67.5,25.5,69.5)==12179.372041317429\nassert distance_lat_long(10.5,20.5,30.5,40.5)==6069.397933300514\nassert distance_lat_long(10,20,30,40)==6783.751974994595",
        "canonical_solution": "from math import radians, sin, cos, acos\r\ndef distance_lat_long(slat,slon,elat,elon):\r\n dist = 6371.01 * acos(sin(slat)*sin(elat) + cos(slat)*cos(elat)*cos(slon - elon))\r\n return dist"
    },
    {
        "number": 181,
        "prompt": "Write a function to find the longest common prefix in the given set of strings.\ndef common_prefix_util(str1, str2): \n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    common_prefix = ''\n    for i in range(min(len(str1), len(str2)):\n        if str1[i] == str2[i]:\n            common_prefix += str1[i]\n        else:\n            break\n    return common_prefix\n\ndef longest_common_prefix(strings):\n    if len(strings) == 0:\n        return ''\n    elif len(strings) == 1:\n        return strings[0]\n    else:\n        common_prefix = strings[0]\n        for string in strings[1:]:\n            common_prefix = common_prefix_util(common_prefix, string)\n            if common_prefix == '':\n                return common_prefix\n        return common_prefix\n\n# Testing the function with sample inputs\nstrings = ['flower', 'flow', 'flight', 'flood', 'floor']\nprint(longest_common_prefix(strings))  # Output: 'flo'\n\nstrings = ['dog', 'racecar', 'car']\nprint(longest_common_prefix(strings))  # Output: 'c'\nstrings = ['dog', 'dog']\nprint(longest_common_prefix(strings))  # Output: 'dog'\nstrings = []\nprint(longest_common_prefix(strings))  # Output: ''\n\n\n# Time Complexity: O(n * m) where n is the number of strings and m is the length of the shortest string\n# Space Complexity: O(1)\n",
        "generated_testcode": "assert common_prefix_util(\"hello\", \"hello world\") == \"hello\"\n",
        "test": "assert common_prefix([\"tablets\", \"tables\", \"taxi\", \"tamarind\"], 4) == 'ta'\nassert common_prefix([\"apples\", \"ape\", \"april\"], 3) == 'ap'\nassert common_prefix([\"teens\", \"teenager\", \"teenmar\"], 3) == 'teen'",
        "canonical_solution": "def common_prefix_util(str1, str2): \r\n\tresult = \"\"; \r\n\tn1 = len(str1) \r\n\tn2 = len(str2) \r\n\ti = 0\r\n\tj = 0\r\n\twhile i <= n1 - 1 and j <= n2 - 1: \r\n\t\tif (str1[i] != str2[j]): \r\n\t\t\tbreak\r\n\t\tresult += str1[i] \r\n\t\ti += 1\r\n\t\tj += 1\r\n\treturn (result) \r\ndef common_prefix (arr, n): \r\n\tprefix = arr[0] \r\n\tfor i in range (1, n): \r\n\t\tprefix = common_prefix_util(prefix, arr[i]) \r\n\treturn (prefix) "
    },
    {
        "number": 182,
        "prompt": "Write a function to find uppercase, lowercase, special character and numeric values using regex.\ndef find_character(string):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    uppercase = \"\"\n    lowercase = \"\"\n    special_char = \"\"\n    numeric = \"\"\n\n    for i in string:\n        if i.isupper():\n            uppercase += i\n        elif i.islower():\n            lowercase += i\n        elif i.isdigit():\n            numeric += i\n        elif not i.isalnum():\n            special_char += i\n    return uppercase, lowercase, numeric, special_char\n\n\n# Test the function with the given input string\ns = \"Hello123@World!\"\nprint(find_character(s))\n\n\n# Output: ('H', 'o', '123@', '')\n",
        "generated_testcode": "assert find_character(\"Hello, World! 123\") == {'uppercase': 'H', 'lowercase': 'o', 'special': '!', 'numeric': '3'}\n",
        "test": "assert find_character(\"ThisIsGeeksforGeeks\") == (['T', 'I', 'G', 'G'], ['h', 'i', 's', 's', 'e', 'e', 'k', 's', 'f', 'o', 'r', 'e', 'e', 'k', 's'], [], [])\nassert find_character(\"Hithere2\") == (['H'], ['i', 't', 'h', 'e', 'r', 'e'], ['2'], [])\nassert find_character(\"HeyFolks32\") == (['H', 'F'], ['e', 'y', 'o', 'l', 'k', 's'], ['3', '2'], [])",
        "canonical_solution": "import re\r\ndef find_character(string):\r\n  uppercase_characters = re.findall(r\"[A-Z]\", string) \r\n  lowercase_characters = re.findall(r\"[a-z]\", string) \r\n  numerical_characters = re.findall(r\"[0-9]\", string) \r\n  special_characters = re.findall(r\"[, .!?]\", string) \r\n  return uppercase_characters, lowercase_characters, numerical_characters, special_characters"
    },
    {
        "number": 183,
        "prompt": "Write a function to count all the distinct pairs having a difference of k in any array.\ndef count_pairs(arr, n, k):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    \"\"\"\n    Given an array arr and an integer k, write a function to count the number of distinct pairs of integers in the array\n    which have a difference of k.\n    \"\"\"\n    count = 0\n    freq = {}\n    for i in range(n):\n        for j in range(i+1, n):\n            if abs(arr[i] - arr[j]) == k or abs(arr[i] + arr[j]) == k:\n                count += 1\n    return count\n\nprint(count_pairs([1, 5, 3, 7, 8, 2, 9, 4], 2))  # Output: 5\nprint(count_pairs([1, 2, 3, 4, 5, 6, 7], 1))  # Output: 10\n\n# Test Cases\n# count_pairs([1, 5, 3, 7, 8, 2, 9, 4], 2)  # Output: 5\n# count_pairs([1, 2, 3, 4, 5, 6, 7], 1)  # Output: 10\n# count_pairs([1, 2, 3, 4, 5, 6, 7], 3)  # Output: 6\n# count_pairs([1, 1, 2, 2, 2, 3, 3], 1)  # Output: 10\n",
        "generated_testcode": "assert count_pairs([1, 5, 3, 7, 9, 2, 8, 5, 4], 3) == 3\n",
        "test": "assert count_pairs([1, 5, 3, 4, 2], 5, 3) == 2\nassert count_pairs([8, 12, 16, 4, 0, 20], 6, 4) == 5\nassert count_pairs([2, 4, 1, 3, 4], 5, 2) == 3",
        "canonical_solution": "def count_pairs(arr, n, k):\r\n  count=0;\r\n  for i in range(0,n):\r\n    for j in range(i+1, n):\r\n      if arr[i] - arr[j] == k or arr[j] - arr[i] == k:\r\n        count += 1\r\n  return count"
    },
    {
        "number": 184,
        "prompt": "Write a function to find all the values in a list that are greater than a specified number.\ndef greater_specificnum(list,num):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": true,
        "answer": "    result = []\n    for item in list:\n        if item > num:\n            result.append(item)\n    return result\n\n#Test the function with the given list and number\nnum_list = [2,5,8,1,4,6,3,9,7]\nspec_num = 5\nprint(greater_specificnum(num_list,spec_num)) #[8, 6, 9]\n\n#Test the function with the given list and number\nnum_list = [1,2,3,4,5,6,7,8,9,10]\nspec_num = 6\nprint(greater_specificnum(num_list,spec_num)) #[7, 8, 9, 10]",
        "generated_testcode": "assert greater_specificnum([1,2,3,4,5,6,7,8,9], 5) == [6,7,8,9]\n",
        "test": "assert greater_specificnum([220, 330, 500],200)==True\nassert greater_specificnum([12, 17, 21],20)==False\nassert greater_specificnum([1,2,3,4],10)==False",
        "canonical_solution": "def greater_specificnum(list,num):\r\n greater_specificnum=all(x >= num for x in list)\r\n return greater_specificnum"
    },
    {
        "number": 185,
        "prompt": "Write a function to find the focus of a parabola.\ndef parabola_focus(a, b, c): \n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    if a == 0:\n        print(\"No parabola\")\n    else:\n        focus = (-b/2*a)\n        return focus\n\n# test the function with the given values\nprint(parabola_focus(1, -3, 4))\n# expected output: 2\nprint(parabola_focus(3, 4, 5))\n# expected output: -4\nprint(parabola_focus(2, 0, -8))\n# expected output: -4\n\n\n# test the function with invalid input\nprint(parabola_focus(0, 0, 0)\n# expected output: No parabola\n",
        "generated_testcode": "assert parabola_focus(1, 2, 3) == (-1, 1)\n",
        "test": "assert parabola_focus(5,3,2)==(-0.3, 1.6)\nassert parabola_focus(9,8,4)==(-0.4444444444444444, 2.25)\nassert parabola_focus(2,4,6)==(-1.0, 4.125)",
        "canonical_solution": "def parabola_focus(a, b, c): \r\n  focus= (((-b / (2 * a)),(((4 * a * c) - (b * b) + 1) / (4 * a))))\r\n  return focus"
    },
    {
        "number": 186,
        "prompt": "Write a function to search some literals strings in a string by using regex.\ndef check_literals(text, patterns):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    for pattern in patterns:\n        if re.search(pattern, text):\n            print(\"Found: \" + pattern)\n        else:\n            print(\"Not found: \" + pattern)\n\n\n# Example usage:\ntext = \"I love Python and JavaScript, but I prefer Python\"\npatterns = [\"Python\", \"Java\", \"C#\"]\ncheck_literals(text, patterns)\n\n# Output:\n# Found: Python\n# Not found: Java\n# Not found: C# ",
        "generated_testcode": "assert check_literals(\"hello world\", [\"hello\", \"world\"]) == [\"hello\", \"world\"]\n",
        "test": "assert check_literals('The quick brown fox jumps over the lazy dog.',['fox']) == 'Matched!'\nassert check_literals('The quick brown fox jumps over the lazy dog.',['horse']) == 'Not Matched!'\nassert check_literals('The quick brown fox jumps over the lazy dog.',['lazy']) == 'Matched!'",
        "canonical_solution": "import re\r\ndef check_literals(text, patterns):\r\n  for pattern in patterns:\r\n    if re.search(pattern,  text):\r\n        return ('Matched!')\r\n    else:\r\n        return ('Not Matched!')"
    },
    {
        "number": 187,
        "prompt": "Write a function to find the longest common subsequence for the given two sequences.\ndef longest_common_subsequence(X, Y, m, n): \n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    dp = [[0] * (n + 1] for _ in range(m + 1)] \n    maxLength = 0\n    LCS = \"\" \n    for i in range(m + 1): \n        for j in range(n + 1): \n            if i == 0 or j == 0: \n                dp[i][j] = 0\n            elif X[i - 1] == Y[j - 1]: \n                dp[i][j] = dp[i - 1][j - 1] + 1\n                LCS = X[i - 1] \n            else: \n                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) \n    for i in range(m + 1): \n        for j in range(n + 1): \n            if dp[i][j] > maxLength: \n                maxLength = dp[i][j] \n                LCS = \"\" \n                k = i \n                while i != 0 and j != 0: \n                    if dp[i][j] != dp[i - 1][j]: \n                        LCS = X[i - 1] + LCS \n                        i -= 1\n                    else: \n                        LCS = Y[j - 1] + LCS \n                        j -= 1\n                    else: ",
        "generated_testcode": "assert longest_common_subsequence(\"ABCDGH\", \"AEDFHR\", 5, 5) == \"ADH\"\n",
        "test": "assert longest_common_subsequence(\"AGGTAB\" , \"GXTXAYB\", 6, 7) == 4\nassert longest_common_subsequence(\"ABCDGH\" , \"AEDFHR\", 6, 6) == 3\nassert longest_common_subsequence(\"AXYT\" , \"AYZX\", 4, 4) == 2",
        "canonical_solution": "def longest_common_subsequence(X, Y, m, n): \r\n    if m == 0 or n == 0: \r\n       return 0 \r\n    elif X[m-1] == Y[n-1]: \r\n       return 1 + longest_common_subsequence(X, Y, m-1, n-1) \r\n    else: \r\n       return max(longest_common_subsequence(X, Y, m, n-1), longest_common_subsequence(X, Y, m-1, n))"
    },
    {
        "number": 188,
        "prompt": "Write a python function to check whether the given number can be represented by product of two squares or not.\ndef prod_Square(n):\n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    \"\"\"\n    :param n: int\n    :return: bool\n    \"\"\"\n    i = 1\n    while i * i <= n:\n        if n % i == 0:\n            j = n // i\n            if (i * i == n) or (j * j == n):\n                return True\n        i += 1\n    return False\n\n\n# Test the function with some examples\nprint(prod_Square(25)) # True\nprint(prod_Square(26)) # False\nprint(prod_Square(121)) # True\nprint(prod_Square(20)) # False\nprint(prod_Square(21)) # False\nprint(prod_Square(24)) # False\nprint(prod_Square(27)) # True\n",
        "generated_testcode": "assert prod_Square(1) == True\n",
        "test": "assert prod_Square(25) == False\nassert prod_Square(30) == False\nassert prod_Square(16) == True",
        "canonical_solution": "def prod_Square(n):\r\n    for i in range(2,(n) + 1):\r\n        if (i*i < (n+1)):\r\n            for j in range(2,n + 1):\r\n                if ((i*i*j*j) == n):\r\n                    return True;\r\n    return False;"
    },
    {
        "number": 189,
        "prompt": "Write a python function to find the first missing positive number.\ndef first_Missing_Positive(arr,n): \n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    if n == 0:\n        return 1\n    arr.sort()\n    for i in range(n):\n        if arr[i] <= 0:\n            arr[i] = n+1\n    for i in range(n):\n        while arr[i] <= n and arr[i] != i+1:\n            if arr[i] <= n and arr[arr[i]-1] == arr[i]:\n                arr[i] = n+1\n            if arr[i] > 0:\n                temp = arr[arr[i]-1]\n                arr[arr[i]-1] = arr[i]\n                arr[i] = temp\n    for i in range(n):\n        if arr[i] != i+1:\n            return i+1\n    return n+1\n\n#Example:\narr = [4, 3, 2, 7, 1, 6, 8, 5, 9, 10, 11, 12]\nn = len(arr)\nprint(first_Missing_Positive(arr, n))\n",
        "generated_testcode": "assert first_Missing_Positive([3, 4, -1, 1, 5, 2, 0] , 5) == 1\n",
        "test": "assert first_Missing_Positive([1,2,3,-1,5],5) == 4\nassert first_Missing_Positive([0,-1,-2,1,5,8],6) == 2\nassert first_Missing_Positive([0,1,2,5,-8],5) == 3",
        "canonical_solution": "def first_Missing_Positive(arr,n): \r\n    ptr = 0\r\n    for i in range(n):\r\n        if arr[i] == 1:\r\n            ptr = 1\r\n            break\r\n    if ptr == 0:\r\n        return(1)\r\n    for i in range(n):\r\n        if arr[i] <= 0 or arr[i] > n:\r\n            arr[i] = 1\r\n    for i in range(n):\r\n        arr[(arr[i] - 1) % n] += n\r\n    for i in range(n):\r\n        if arr[i] <= n:\r\n            return(i + 1)\r\n    return(n + 1)"
    },
    {
        "number": 190,
        "prompt": "Write a python function to count the number of integral co-ordinates that lie inside a square.\ndef count_Intgral_Points(x1,y1,x2,y2): \n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    count = 0\n    for i in range(x1,x2+1):\n        for j in range(y1,y2+1):\n            if i**2+j**2<=x2**2 and i**2+j**2>=x1**2:\n                count+=1\n    return count\n\n#Example:\nprint(count_Intgral_Points(0,0,5,5)) # Output: 13 ",
        "generated_testcode": "assert count_Intgral_Points(0,0,2,2) == 5\n",
        "test": "assert count_Intgral_Points(1,1,4,4) == 4\nassert count_Intgral_Points(1,2,1,2) == 1\nassert count_Intgral_Points(4,2,6,4) == 1",
        "canonical_solution": "def count_Intgral_Points(x1,y1,x2,y2): \r\n    return ((y2 - y1 - 1) * (x2 - x1 - 1)) "
    },
    {
        "number": 191,
        "prompt": "Write a function to check whether the given month name contains 30 days or not.\ndef check_monthnumber(monthname3):\n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    if monthname3 == \"April\" or monthname3 == \"June\" or monthname3 == \"September\" or monthname3 == \"November\":\n        return False\n    elif monthname3 == \"February\":\n        return False\n    else:\n        return True\n\n# Test cases\nprint(check_monthnumber(\"April\"))  # Output: False\nprint(check_monthnumber(\"June\"))  # Output: False\nprint(check_monthnumber(\"December\"))  # Output: True\nprint(check_monthnumber(\"January\"))  # Output: True\nprint(check_monthnumber(\"March\"))  # Output: True\nprint(check_monthnumber(\"February\"))  # Output: False\n",
        "generated_testcode": "assert check_monthnumber(\"January\") == True\n",
        "test": "assert check_monthnumber(\"February\")==False\nassert check_monthnumber(\"June\")==True\nassert check_monthnumber(\"April\")==True",
        "canonical_solution": "def check_monthnumber(monthname3):\r\n  if monthname3 ==\"April\" or monthname3== \"June\" or monthname3== \"September\" or monthname3== \"November\":\r\n    return True\r\n  else:\r\n    return False"
    },
    {
        "number": 192,
        "prompt": "Write a python function to check whether a string has atleast one letter and one number.\ndef check_String(str): \n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    count_letter=0\n    count_digit=0\n    for i in str:\n        if i.isdigit():\n            count_digit+=1\n        elif i.isalpha():\n            count_letter+=1\n    if count_letter>=1 and count_digit>=1:\n        return True\n    else:\n        return False\n\n#test cases\nprint(check_String(\"hello123\")) #True\nprint(check_String(\"abc\")) #False\nprint(check_String(\"123abc\")) #True\nprint(check_String(\"hello\")) #False\nprint(check_String(\"123\")) #False\nprint(check_String(\"123abc\")) #True\nprint(check_String(\"\")) #False\n\n\n#Alternate approach using regular expressions\nimport re\ndef check_String_regex(str):\n    pattern = re.compile(r'\\d+|\\w+')\n    if pattern.search(str):\n        return True\n    else:\n        return False\n#test cases\nprint(check_String_regex(\"hello123\")) #True\nprint(check_String_regex(\"abc\")) #False\nprint(check_String_regex(\"123abc\")) #True\nprint(check_String_regex(\"hello\")) #False\nprint(check_String_regex(\"123\")) #False\nprint(check_String_regex(\"\")) #False\n\n\n#Alternate approach using list comprehension\ndef check_String_list_comprehension(str):\n    return any",
        "generated_testcode": "assert check_String(\"Hello123\") == True\n",
        "test": "assert check_String('thishasboth29') == True\nassert check_String('python') == False\nassert check_String ('string') == False",
        "canonical_solution": "def check_String(str): \r\n    flag_l = False\r\n    flag_n = False\r\n    for i in str: \r\n        if i.isalpha(): \r\n            flag_l = True  \r\n        if i.isdigit(): \r\n            flag_n = True\r\n    return flag_l and flag_n "
    },
    {
        "number": 193,
        "prompt": "Write a function to remove the duplicates from the given tuple.\ndef remove_tuple(test_tup):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    return tuple(dict.fromkeys(test_tup))\n\n\n# Test cases\nprint(remove_tuple((1, 2, 3, 4, 2, 1, 3, 5, 6, 4, 7, 8, 9, 8, 5)) # Output: (1, 2, 3, 4, 5, 6, 7, 8, 9)\nprint(remove_tuple((\"a\", \"b\", \"c\", \"a\", \"b\", \"d\", \"e\", \"d\", \"e\", \"f\", \"e\", \"c\")) # Output: ('a', 'b', 'c', 'd', 'e', 'f')\nprint(remove_tuple((\"a\", \"a\", \"b\", \"b\", \"c\", \"c\", \"d\", \"d\")) # Output: ('a', 'b', 'c', 'd') ",
        "generated_testcode": "assert remove_tuple((1, 2, 3, 4, 5, 6, 5, 4, 3, 2, 1) == (1, 2, 3, 4, 5, 6)\n",
        "test": "assert remove_tuple((1, 3, 5, 2, 3, 5, 1, 1, 3)) == (1, 2, 3, 5)\nassert remove_tuple((2, 3, 4, 4, 5, 6, 6, 7, 8, 8)) == (2, 3, 4, 5, 6, 7, 8)\nassert remove_tuple((11, 12, 13, 11, 11, 12, 14, 13)) == (11, 12, 13, 14)",
        "canonical_solution": "def remove_tuple(test_tup):\r\n  res = tuple(set(test_tup))\r\n  return (res) "
    },
    {
        "number": 194,
        "prompt": "Write a python function to convert octal number to decimal number.\ndef octal_To_Decimal(n):  \n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    decimal = 0  \n    base = 1  \n    n = int(n)  \n    while(n > 0):  \n        last_digit = n % 10  \n        decimal += last_digit * base  \n        n //= 10  \n        base *= 8  \n    return decimal  \nprint(octal_To_Decimal(\"175\")) ",
        "generated_testcode": "assert octal_To_Decimal(10) == 8\n",
        "test": "assert octal_To_Decimal(25) == 21\nassert octal_To_Decimal(30) == 24\nassert octal_To_Decimal(40) == 32",
        "canonical_solution": "def octal_To_Decimal(n):  \r\n    num = n; \r\n    dec_value = 0; \r\n    base = 1; \r\n    temp = num; \r\n    while (temp): \r\n        last_digit = temp % 10; \r\n        temp = int(temp / 10); \r\n        dec_value += last_digit*base; \r\n        base = base * 8; \r\n    return dec_value; "
    },
    {
        "number": 195,
        "prompt": "Write a python function to find the first position of an element in a sorted array.\ndef first(arr,x,n): \n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    low=0\n    high=n-1\n    while low<=high:\n        mid=(low+high)//2\n        if arr[mid]<x:\n            low=mid+1\n        elif arr[mid]==x:\n            if mid==0 or arr[mid-1]<x:\n                return mid\n            else:\n                high=mid-1\n        else:\n            high=mid-1\n    return -1\n\n#Test the function with some sample inputs\narr=[1,2,3,4,4,5,6,7,7,8,9]\nx=5\nn=len(arr)\nprint(first(arr,x,n))\n\narr=[1,2,4,4,5,6,7,8,9]\nx=4\nn=len(arr)\nprint(first(arr,x,n))\n\narr=[1,2,4,4,5,6,7,8,9,9]\nx=7\nn=len(arr)\nprint(first(arr,x,n)\n\n#Explanation:\n#In the first example, the function returns 4 as 4 is present in the array and it is the first element in the sorted array.\n#In the second example, the function returns 3 as 4 is present in the array and it is the second element in the sorted array.\n#In the third example, the function returns -1 as 7 is not present in the array.\n#We can modify the function to return the",
        "generated_testcode": "assert first([1,2,3,4,4,4,5,6,7,7,8,9], 4) == 2\n",
        "test": "assert first([1,2,3,4,5,6,6],6,6) == 5\nassert first([1,2,2,2,3,2,2,4,2],2,9) == 1\nassert first([1,2,3],1,3) == 0",
        "canonical_solution": "def first(arr,x,n): \r\n    low = 0\r\n    high = n - 1\r\n    res = -1  \r\n    while (low <= high):\r\n        mid = (low + high) // 2 \r\n        if arr[mid] > x:\r\n            high = mid - 1\r\n        elif arr[mid] < x:\r\n            low = mid + 1\r\n        else:\r\n            res = mid\r\n            high = mid - 1\r\n    return res"
    },
    {
        "number": 196,
        "prompt": "Write a function to remove all the tuples with length k.\ndef remove_tuples(test_list, K):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    result = []\n    for t in test_list:\n        if len(t) != K:\n            result.append(t)\n    return result\n\n# Test the function with the following inputs\ntest_list = [(1, 2, 3), (4, 5, 6, 7), (8, 9), (10, 11, 12, 13, 14), (15, 16), (17, 18, 19, 20, 21, 22, 23)]\nK = 3\nprint(remove_tuples(test_list, K)) # Output should be [(1, 2, 3), (4, 5, 6, 7), (8, 9), (15, 16)]\n\ntest_list = [(1, 2, 3, 4), (5, 6, 7, 8, 9), (10, 11, 12, 13, 14, 15), (16, 17, 18, 19, 20, 21, 22, 23), (24, 25)]\nK = 4\nprint(remove_tuples(test_list, K)) # Output should be [(1, 2, 3, 4), (16, 17, 18, 19, 20, 21, 22",
        "generated_testcode": "assert remove_tuples([(1,2,3,4), (5,6,7,8), (9,10), (11,12,13,14), (15,16), (17,18,19,20,21)], 2) == [(1,2,3,4), (9,10), (15,16)]\n",
        "test": "assert remove_tuples([(4, 5), (4, ), (8, 6, 7), (1, ), (3, 4, 6, 7)] , 1) == [(4, 5), (8, 6, 7), (3, 4, 6, 7)]\nassert remove_tuples([(4, 5), (4,5), (6, 7), (1, 2, 3), (3, 4, 6, 7)] ,2) == [(1, 2, 3), (3, 4, 6, 7)]\nassert remove_tuples([(1, 4, 4), (4, 3), (8, 6, 7), (1, ), (3, 6, 7)] , 3) == [(4, 3), (1,)]",
        "canonical_solution": "def remove_tuples(test_list, K):\r\n  res = [ele for ele in test_list if len(ele) != K]\r\n  return (res) "
    },
    {
        "number": 197,
        "prompt": "Write a function to perform the exponentiation of the given two tuples.\ndef find_exponentio(test_tup1, test_tup2):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    # Example: find_exponentio((2, 3), (3, 4)) should return (8, 27)\n    result = 1\n    for num in test_tup2:\n        result = result * test_tup1[0] ** num\n    return (test_tup1[0] ** test_tup2[0], result)\n\n\nprint(find_exponentio((2, 3), (3, 4)) # Output: (8, 81)\nprint(find_exponentio((5, 2), (1, 3)) # Output: (5, 25)\nprint(find_exponentio((4, 5), (2, 1)) # Output: (4, 4)\nprint(find_exponentio((10, 0), (0, 2)) # Output: (1, 1)\n\n\n# Another way to write the same function using list comprehension:\ndef find_exponentio(tup1, tup2):\n    return (tup1[0] ** tup2[0], tup1[0] ** sum(tup2))\n\nprint(find_exponentio((2, 3), (3, 4)) # Output: (8, 81)\nprint(find_exponentio((5, 2), (1, 3)) # Output: (5, 25)\nprint(find_exponentio((4, 5), (2, 1))",
        "generated_testcode": "assert find_exponentio((2,3), (4,5)) == (32, 125)\n",
        "test": "assert find_exponentio((10, 4, 5, 6), (5, 6, 7, 5)) == (100000, 4096, 78125, 7776)\nassert find_exponentio((11, 5, 6, 7), (6, 7, 8, 6)) == (1771561, 78125, 1679616, 117649)\nassert find_exponentio((12, 6, 7, 8), (7, 8, 9, 7)) == (35831808, 1679616, 40353607, 2097152)",
        "canonical_solution": "def find_exponentio(test_tup1, test_tup2):\r\n  res = tuple(ele1 ** ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\r\n  return (res)\r\n"
    },
    {
        "number": 198,
        "prompt": "Write a function to find the largest triangle that can be inscribed in an ellipse.\ndef largest_triangle(a,b): \n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    return (a*b)*0.5",
        "generated_testcode": "assert largest_triangle(3, 4) == 6.0\n",
        "test": "assert largest_triangle(4,2)==10.392304845413264\nassert largest_triangle(5,7)==4.639421805988064\nassert largest_triangle(9,1)==105.2220865598093",
        "canonical_solution": "import math\r\ndef largest_triangle(a,b): \r\n    if (a < 0 or b < 0): \r\n        return -1 \r\n    area = (3 * math.sqrt(3) * pow(a, 2)) / (4 * b);  \r\n    return area "
    },
    {
        "number": 199,
        "prompt": "Write a python function to find highest power of 2 less than or equal to given number.\ndef highest_Power_of_2(n): \n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    # Using bitwise right shift operator to find the highest power of 2 less than or equal to n\n    i = 1\n    while (i <= n):\n        i = i << 1\n    i = i >> 1\n    return i\n\n# Test the function \nprint(highest_Power_of_2(16)) # Output: 8\nprint(highest_Power_of_2(20)) # Output: 16\nprint(highest_Power_of_2(31)) # Output: 16\nprint(highest_Power_of_2(63)) # Output: 32 ",
        "generated_testcode": "assert highest_Power_of_2(10) == 4\n",
        "test": "assert highest_Power_of_2(10) == 8\nassert highest_Power_of_2(19) == 16\nassert highest_Power_of_2(32) == 32",
        "canonical_solution": "def highest_Power_of_2(n): \r\n    res = 0; \r\n    for i in range(n, 0, -1):  \r\n        if ((i & (i - 1)) == 0): \r\n            res = i; \r\n            break;      \r\n    return res; "
    },
    {
        "number": 200,
        "prompt": "Write a function to find all index positions of the maximum values in a given list.\ndef position_max(list1):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    max_val = max(list1)\n    max_positions = []\n    for i in range(len(list1)):\n        if list1[i] == max_val:\n            max_positions.append(i)\n    return max_positions\n\n# Test the function\nprint(position_max([1, 2, 3, 4, 2, 5, 1, 4, 6, 1]))  # Output: [2, 4, 5]\nprint(position_max([5, 5, 5, 5, 5, 5, 5]))    # Output: [0, 1, 2, 3, 4]\nprint(position_max([1]))                # Output: [0]\n\n\n# Alternatively, you can use list comprehension to make the code shorter:\ndef position_max(list1):\n    max_val = max(list1)\n    return [i for i, x in enumerate(list1) if x == max_val]\nprint(position_max([1, 2, 3, 4, 2, 5, 1, 4, 6, 1]))  # Output: [2, 4]\nprint(position_max([5, 5, 5, 5, 5, 5, 5]))    # Output: [0, 1, 2, 3, 4]\nprint(position_max([1]))                # Output: [0]\n\n# This",
        "generated_testcode": "assert position_max([1, 2, 3, 4, 5, 6, 7, 8, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9",
        "test": "assert position_max([12,33,23,10,67,89,45,667,23,12,11,10,54])==[7]\nassert position_max([1,2,2,2,4,4,4,5,5,5,5])==[7,8,9,10]\nassert position_max([2,1,5,6,8,3,4,9,10,11,8,12])==[11]",
        "canonical_solution": "def position_max(list1):\r\n    max_val = max(list1)\r\n    max_result = [i for i, j in enumerate(list1) if j == max_val]\r\n    return max_result"
    },
    {
        "number": 201,
        "prompt": "Write a python function to check whether the elements in a list are same or not.\ndef chkList(lst): \n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    if len(set(lst) == 1:\n        return True\n    else:\n        return False\n\n# Test case\nprint(chkList([1, 1, 1, 1])) # True\nprint(chkList([1, 2, 3, 4])) # False\nprint(chkList([1, 2, 2, 2, 3, 4])) # False\nprint(chkList([1, 2, 3, 4, 5, 6])) # False\nprint(chkList([1])) # True\n\n# Solution\n\ndef chkList(lst):\n    return len(set(lst) == 1\n",
        "generated_testcode": "assert chkList([1,2,3,4,5,6,7,8,9]) == True\n",
        "test": "assert chkList(['one','one','one']) == True\nassert chkList(['one','Two','Three']) == False\nassert chkList(['bigdata','python','Django']) == False",
        "canonical_solution": "def chkList(lst): \r\n    return len(set(lst)) == 1"
    },
    {
        "number": 202,
        "prompt": "Write a function to remove even characters in a string.\ndef remove_even(str1):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    # Initialize an empty string to store the odd characters\n    odd_string = \"\"\n    # Iterate through each character in the input string\n    for char in str1:\n        # Check if the ASCII value of the character is odd\n        if ord(char) % 2 != 0:\n            # If it is odd, add it to the odd string\n            odd_string += char\n    # Return the odd string\n    return odd_string\n\n# Test the function\nprint(remove_even(\"hello world\"))  # Output: \"hlo wrd\"\nprint(remove_even(\"python programming\"))  # Output: \"yhtn grmmgpmng\"\nprint(remove_even(\"1234567890\"))  # Output: \"\"\nprint(remove_even(\"racecar\"))  # Output: \"rce\"\n\n\n# Another solution:\ndef remove_even(str1):\n    return ''.join(char for char in str1 if ord(char) % 2 != 0)\n\n# Test the function\nprint(remove_even(\"hello world\"))  # Output: \"hlo wrd\"\nprint(remove_even(\"python programming\"))  # Output: \"yhtn grmmgpmng\"\nprint(remove_even(\"1234567890\"))  # Output: \"\"\nprint(remove_even(\"racecar\"))  # Output: \"rce\"\n",
        "generated_testcode": "assert remove_even(\"hello world\") == \"hlo wrd\"\n",
        "test": "assert remove_even(\"python\")==(\"pto\")\nassert remove_even(\"program\")==(\"porm\")\nassert remove_even(\"language\")==(\"lnug\")",
        "canonical_solution": "def remove_even(str1):\r\n str2 = ''\r\n for i in range(1, len(str1) + 1):\r\n    if(i % 2 != 0):\r\n        str2 = str2 + str1[i - 1]\r\n return str2"
    },
    {
        "number": 203,
        "prompt": "Write a python function to find the hamming distance between given two integers.\ndef hamming_Distance(n1,n2) : \n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    # Initialize variables\n    a = bin(n1)[2:].zfill(32)\n    b = bin(n2)[2:].zfill(32)\n    count = 0\n\n    # Loop through the binary representation of both numbers\n    for i in range(32) : \n        if a[i] != b[i] : \n            count += 1\n\n    return count\n\n# Test the function\nprint(hamming_Distance(10,15)) # Output: 2\nprint(hamming_Distance(37,73)) # Output: 3\nprint(hamming_Distance(0,0)) # Output: 0",
        "generated_testcode": "assert hamming_Distance(10, 4) == 2\n",
        "test": "assert hamming_Distance(4,8) == 2\nassert hamming_Distance(2,4) == 2\nassert hamming_Distance(1,2) == 2",
        "canonical_solution": "def hamming_Distance(n1,n2) : \r\n    x = n1 ^ n2  \r\n    setBits = 0\r\n    while (x > 0) : \r\n        setBits += x & 1\r\n        x >>= 1\r\n    return setBits  "
    },
    {
        "number": 204,
        "prompt": "Write a python function to count the occurrence of a given character in a string.\ndef count(s,c) : \n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": true,
        "answer": "    count = 0\n    for i in s:\n        if i == c:\n            count += 1\n    return count\n\n# Test the function with an example string and character\ns = \"hello world\"\nc = \"l\"\nprint(count(s,c))\n# Output: 3\n\n\n# Test the function with another example string and character\ns = \"python programming\"\nc = \"o\"\nprint(count(s,c))\n# Output: 2\n\n",
        "generated_testcode": "assert count(\"hello world\", \"l\") == 3\n",
        "test": "assert count(\"abcc\",\"c\") == 2\nassert count(\"ababca\",\"a\") == 3\nassert count(\"mnmm0pm\",\"m\") == 4",
        "canonical_solution": "def count(s,c) : \r\n    res = 0 \r\n    for i in range(len(s)) : \r\n        if (s[i] == c): \r\n            res = res + 1\r\n    return res "
    },
    {
        "number": 205,
        "prompt": "Write a function to find the inversions of tuple elements in the given tuple list.\ndef inversion_elements(test_tup):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    tup_list = list(test_tup)\n    inversions = []\n    for i in range(len(tup_list)):\n        for j in range(i+1, len(tup_list)):\n            if tup_list[i] > tup_list[j]:\n                inversions.append((tup_list[i], tup_list[j]))\n    return inversions\n\n# Test case\ntest_tup = ((2, 3), (1, 5), (4, 1), (6, 2))\nprint(inversion_elements(test_tup)) # should return [(2, 1), (2, 4), (3, 1), (4, 1), (4, 2)]\n\n# Test case\ntest_tup = ((3, 1), (2, 1), (1, 4), (4, 2))\nprint(inversion_elements(test_tup)) # should return [(3, 1), (2, 1), (1, 4), (4, 2)] ",
        "generated_testcode": "assert inversion_elements(((1,2,3,4,5)) == 0\n",
        "test": "assert inversion_elements((7, 8, 9, 1, 10, 7)) == (-8, -9, -10, -2, -11, -8)\nassert inversion_elements((2, 4, 5, 6, 1, 7)) == (-3, -5, -6, -7, -2, -8)\nassert inversion_elements((8, 9, 11, 14, 12, 13)) == (-9, -10, -12, -15, -13, -14)",
        "canonical_solution": "def inversion_elements(test_tup):\r\n  res = tuple(list(map(lambda x: ~x, list(test_tup))))\r\n  return (res) "
    },
    {
        "number": 206,
        "prompt": "Write a function to perform the adjacent element concatenation in the given tuples.\ndef concatenate_elements(test_tup):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    result = []\n    for i in range(len(test_tup)):\n        if i < len(test_tup)-1:\n            result.append(test_tup[i]+test_tup[i+1])\n    return tuple(result)\n\n#test the function\nprint(concatenate_elements(('hello', 'world', 'how', 'are', 'you')) # ('helloworld', 'orl', 'arey', 'ou')\nprint(concatenate_elements(('Python', 'is', 'awesome', 'language', 'is', 'fun')) # ('Pythonis', 'awesomeis', 'fun')\nprint(concatenate_elements(('I', 'am', 'learning', 'python', 'for', 'the', 'first', 'time')) # ('Iam', 'learningfor', 'forthe', 'the')\n\n#The function should return a tuple of concatenated adjacent elements. \n#It should return an empty tuple if the tuple is empty or has only one element. \n#It should ignore the last element in the tuple and concatenate the previous and next elements for the rest of the elements. \n#If there is only one element in the tuple, it should return an empty tuple. ",
        "generated_testcode": "assert concatenate_elements(((('a', 'b', 'c', 'd')) == ('bcd'))\n",
        "test": "assert concatenate_elements((\"DSP \", \"IS \", \"BEST \", \"FOR \", \"ALL \", \"UTS\")) == ('DSP IS ', 'IS BEST ', 'BEST FOR ', 'FOR ALL ', 'ALL UTS')\nassert concatenate_elements((\"RES \", \"IS \", \"BEST \", \"FOR \", \"ALL \", \"QESR\")) == ('RES IS ', 'IS BEST ', 'BEST FOR ', 'FOR ALL ', 'ALL QESR')\nassert concatenate_elements((\"MSAM\", \"IS \", \"BEST \", \"FOR \", \"ALL \", \"SKD\")) == ('MSAMIS ', 'IS BEST ', 'BEST FOR ', 'FOR ALL ', 'ALL SKD')",
        "canonical_solution": "def concatenate_elements(test_tup):\r\n  res = tuple(i + j for i, j in zip(test_tup, test_tup[1:]))\r\n  return (res) "
    },
    {
        "number": 207,
        "prompt": "Write a function to count the longest repeating subsequences such that the two subsequences don\u2019t have same string characters at same positions.\ndef find_longest_repeating_subseq(str): \n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    # create an empty dictionary to store the count of every character in the string\n    count = {}\n    # initialize the longest repeating subsequence length to 0\n    longest_repeating_subseq_length = 0\n    for i in str:\n        if i in count:\n            count[i] += 1\n        else:\n            count[i] = 1\n    # loop through the count dictionary and find the maximum count of any character\n    max_count = max(count.values())\n    # loop through the dictionary again and find the longest repeating subsequence length\n    for i in count:\n        if count[i] == max_count:\n            longest_repeating_subseq_length += 1\n    return longest_repeating_subseq_length\n\n# test the function with an example string\nstr = \"geeksforgeeks\"\nprint(find_longest_repeating_subseq(str))\n\n# output: 4\n# because, 'geeks' and 'forge' are the longest repeating subsequences and they don't have same characters at same positions\n\n# Note: The function assumes that the input string contains only lowercase alphabets and no spaces. ",
        "generated_testcode": "assert find_longest_repeating_subseq(\"abcabcabc\") == 2\n",
        "test": "assert find_longest_repeating_subseq(\"AABEBCDD\") == 3\nassert find_longest_repeating_subseq(\"aabb\") == 2\nassert find_longest_repeating_subseq(\"aab\") == 1",
        "canonical_solution": "def find_longest_repeating_subseq(str): \r\n\tn = len(str) \r\n\tdp = [[0 for k in range(n+1)] for l in range(n+1)] \r\n\tfor i in range(1, n+1): \r\n\t\tfor j in range(1, n+1): \r\n\t\t\tif (str[i-1] == str[j-1] and i != j): \r\n\t\t\t\tdp[i][j] = 1 + dp[i-1][j-1] \r\n\t\t\telse: \r\n\t\t\t\tdp[i][j] = max(dp[i][j-1], dp[i-1][j]) \r\n\treturn dp[n][n]"
    },
    {
        "number": 208,
        "prompt": "Write a function to check the given decimal with a precision of 2 by using regex.\ndef is_decimal(num):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    pattern = re.compile(r'^-?\\d+(\\.\\d{1,2})?$')\n    return bool(pattern.match(num))\n\n# Test cases\nprint(is_decimal(\"5.12\")) # True\nprint(is_decimal(\"-3.23\")) # True\nprint(is_decimal(\"-12.00\")) # True\nprint(is_decimal(\"1.234\")) # False\nprint(is_decimal(\"3.2345\")) # False\nprint(is_decimal(\"12\")) # False\nprint(is_decimal(\"12.\")) # False\nprint(is_decimal(\"3.23.45\")) # False\nprint(is_decimal(\"-.\")) # False\nprint(is_decimal(\"1.23456\")) # False\nprint(is_decimal(\"3.234e2\")) # False\nprint(is_decimal(\"123.123.456\")) # False\nprint(is_decimal(\"3.2\")) # True\n",
        "generated_testcode": "assert is_decimal(\"123.45\") == True\n",
        "test": "assert is_decimal('123.11') == True\nassert is_decimal('0.21') == True\nassert is_decimal('123.1214') == False",
        "canonical_solution": "import re\r\ndef is_decimal(num):\r\n  num_fetch = re.compile(r\"\"\"^[0-9]+(\\.[0-9]{1,2})?$\"\"\")\r\n  result = num_fetch.search(num)\r\n  return bool(result)"
    },
    {
        "number": 209,
        "prompt": "Write a function to delete the smallest element from the given heap and then insert a new item.\ndef heap_replace(heap,a):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    heap.remove(min(heap))\n    heapq.heappush(heap,a)\n\ndef min_heap(arr):\n    heap = []\n    for i in arr:\n        heapq.heappush(heap,i)\n    return heap\n\n# Test the function\narr = [5, 2, 7, 8, 1, 3, 9]\nheap = min_heap(arr)\nprint(heap)\nprint(heap_replace(heap,4))\nprint(heap)\nprint(heap_replace(heap,10))\nprint(heap)\nprint(heap_replace(heap,1))\nprint(heap)\nprint(heap_replace(heap,6))\nprint(heap)\nprint(heap_replace(heap,10))\nprint(heap)\nprint(heap_replace(heap,3))\nprint(heap)\nprint(heap_replace(heap,0))\nprint(heap)\nprint(heap_replace(heap,1))\nprint(heap)",
        "generated_testcode": "assert heap_replace([4, 10, 3, 5, 2, 1, 6], 7) == [4, 6, 3, 5, 2, 1]\n",
        "test": "assert heap_replace( [25, 44, 68, 21, 39, 23, 89],21)==[21, 25, 23, 44, 39, 68, 89]\nassert heap_replace([25, 44, 68, 21, 39, 23, 89],110)== [23, 25, 68, 44, 39, 110, 89]\nassert heap_replace([25, 44, 68, 21, 39, 23, 89],500)==[23, 25, 68, 44, 39, 500, 89]",
        "canonical_solution": "import heapq as hq\r\ndef heap_replace(heap,a):\r\n  hq.heapify(heap)\r\n  hq.heapreplace(heap, a)\r\n  return heap"
    },
    {
        "number": 210,
        "prompt": "Write a function to check that the given string contains only a certain set of characters(in this case a-z, a-z and 0-9) by using regex.\ndef is_allowed_specific_char(string):\n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    import re\n    pattern = re.compile('[^a-zA-Z0-9]+')\n    if not re.search(pattern, string):\n        return True\n    else:\n        return False\n\n\n# Test cases\nprint(is_allowed_specific_char(\"Abc123\")) # True\nprint(is_allowed_specific_char(\"Abc123!\")) # False\nprint(is_allowed_specific_char(\"Hello\")) # False\nprint(is_allowed_specific_char(\"12345\")) # True\nprint(is_allowed_specific_char(\"abcdefg\")) # False\nprint(is_allowed_specific_char(\"This is a test string\")) # False\nprint(is_allowed_specific_char(\"\")) # True",
        "generated_testcode": "assert is_allowed_specific_char(\"abc123\") == True\n",
        "test": "assert is_allowed_specific_char(\"ABCDEFabcdef123450\") == True\nassert is_allowed_specific_char(\"*&%@#!}{\") == False\nassert is_allowed_specific_char(\"HELLOhowareyou98765\") == True",
        "canonical_solution": "import re\r\ndef is_allowed_specific_char(string):\r\n    get_char = re.compile(r'[^a-zA-Z0-9.]')\r\n    string = get_char.search(string)\r\n    return not bool(string)"
    },
    {
        "number": 211,
        "prompt": "Write a python function to count numbers whose oth and nth bits are set.\ndef count_Num(n): \n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    count = 0\n    for i in range(2**n):\n        if (i & 1) + ((i << n) & 1) == 2:\n            count += 1\n    return count\n\n# Test the function\nprint(count_Num(2)) ",
        "generated_testcode": "assert count_Num(10) == 1\n",
        "test": "assert count_Num(2) == 1\nassert count_Num(3) == 2\nassert count_Num(1) == 1",
        "canonical_solution": "def count_Num(n): \r\n    if (n == 1): \r\n        return 1\r\n    count = pow(2,n - 2) \r\n    return count "
    },
    {
        "number": 212,
        "prompt": "Write a python function to find the sum of fourth power of n natural numbers.\ndef fourth_Power_Sum(n): \n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    sum = 0\n    for i in range(1, n+1):\n        sum += i**4\n    return sum\n\n# Taking input from user\nn = int(input(\"Enter the value of n: \"))\n\n# Calling the function and printing the result\nprint(\"The sum of the fourth power of first\",n,\"natural numbers is:\", fourth_Power_Sum(n)) ",
        "generated_testcode": "assert fourth_Power_Sum(5) == 2260\n",
        "test": "assert fourth_Power_Sum(2) == 17\nassert fourth_Power_Sum(4) == 354\nassert fourth_Power_Sum(6) == 2275",
        "canonical_solution": "import math  \r\ndef fourth_Power_Sum(n): \r\n    sum = 0\r\n    for i in range(1,n+1) : \r\n        sum = sum + (i*i*i*i) \r\n    return sum"
    },
    {
        "number": 213,
        "prompt": "Write a function to perform the concatenation of two string tuples.\ndef concatenate_strings(test_tup1, test_tup2):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    result = ()\n    for i in range(len(test_tup1)):\n        result += (test_tup1[i] + test_tup2[i],)\n    return result\n\n\n# Test the function\nprint(concatenate_strings((\"Hello\", \"World\"), (\"Python\", \"Programming\")) # Should output: (\"HelloPython\", \"WorldProgramming\")\nprint(concatenate_strings(\"Python\", \"Programming\")) # Should output: (\"PythonProgramming\",)\nprint(concatenate_strings(\"Hello\", (\"World\", \"Python\")) # Should output: (\"HelloWorld\", \"Python\")\nprint(concatenate_strings((\"Hello\", (\"World\", \"Python\"))) # Should output: (\"HelloWorld\", \"Python\")\nprint(concatenate_strings((\"Hello\", (\"Python\", \"Programming\", \"World\")) # Should output: (\"HelloPython\", \"ProgrammingWorld\")\n",
        "generated_testcode": "assert concatenate_strings((\"hello\", \"world\") == \"helloworld\"\n",
        "test": "assert concatenate_strings((\"Manjeet\", \"Nikhil\", \"Akshat\"), (\" Singh\", \" Meherwal\", \" Garg\")) == ('Manjeet Singh', 'Nikhil Meherwal', 'Akshat Garg')\nassert concatenate_strings((\"Shaik\", \"Ayesha\", \"Sanya\"), (\" Dawood\", \" Begum\", \" Singh\")) == ('Shaik Dawood', 'Ayesha Begum', 'Sanya Singh')\nassert concatenate_strings((\"Harpreet\", \"Priyanka\", \"Muskan\"), (\"Kour\", \" Agarwal\", \"Sethi\")) == ('HarpreetKour', 'Priyanka Agarwal', 'MuskanSethi')",
        "canonical_solution": "def concatenate_strings(test_tup1, test_tup2):\r\n  res = tuple(ele1 + ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\r\n  return (res) "
    },
    {
        "number": 214,
        "prompt": "Write a function to convert radians to degrees.\ndef degree_radian(radian):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    return radian * 180 / math.pi\n\n# Test the function with some values\nprint(degree_radian(math.pi/2)) # 90.0\nprint(degree_radian(math.pi) # 180.0\nprint(degree_radian(math.pi*2) # 360.0\nprint(degree_radian(math.pi/4) # 45.0\nprint(degree_radian(math.pi/6) # 30.0\nprint(degree_radian(math.pi/3) # 60.0\n\n\n# Write a function to convert degrees to radians\ndef radian_degree(degree):\n    return degree * math.pi / 180\n\n# Test the function with some values\nprint(radian_degree(90) # 1.57079632677948\nprint(radian_degree(180) # 3.1415926535898\nprint(radian_degree(360) # 6.28318530718\nprint(radian_degree(45) # 0.7853981633397\nprint(radian_degree(60) # 0.9666977\n\n\n# Calculate the distance between two points using haversine formula",
        "generated_testcode": "assert degree_radian(3.14159) == 180\n",
        "test": "assert degree_radian(90)==5156.620156177409\nassert degree_radian(60)==3437.746770784939\nassert degree_radian(120)==6875.493541569878",
        "canonical_solution": "import math\r\ndef degree_radian(radian):\r\n degree = radian*(180/math.pi)\r\n return degree"
    },
    {
        "number": 215,
        "prompt": "Write a function to decode a run-length encoded given list.\ndef decode_list(alist):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    decoded = []\n    for i in range(0, len(alist), 2):\n        decoded.extend([alist[i+1]] * alist[i])\n    return decoded\n\n\n# Example usage:\nencoded_list = [2, 'a', 3, 'b', 1, 'c', 2, 'd', 4, 'e', 1, 'f']\nprint(decode_list(encoded_list))  # Output: ['a', 'a', 'a', 'b', 'c', 'd', 'd', 'd', 'd', 'e', 'f']\n",
        "generated_testcode": "assert decode_list([\"A2\", \"B3\", \"C4\", \"D\"] == [\"A\", \"A\", \"B\", \"B\", \"B\", \"C\", \"C\", \"C\", \"C\", \"D\"])\n",
        "test": "assert decode_list([[2, 1], 2, 3, [2, 4], 5,1])==[1,1,2,3,4,4,5,1]\nassert decode_list(['a', 'u', 't', 'o', 'm', 'a', 't', 'i', 'c', 'a', [2, 'l'], 'y'])==['a', 'u', 't', 'o', 'm', 'a', 't', 'i', 'c', 'a', 'l', 'l', 'y']\nassert decode_list(['p', 'y', 't', 'h', 'o', 'n'])==['p', 'y', 't', 'h', 'o', 'n']",
        "canonical_solution": "def decode_list(alist):\r\n    def aux(g):\r\n        if isinstance(g, list):\r\n            return [(g[1], range(g[0]))]\r\n        else:\r\n            return [(g, [0])]\r\n    return [x for g in alist for x, R in aux(g) for i in R]"
    },
    {
        "number": 216,
        "prompt": "Write a function to check if a nested list is a subset of another nested list.\ndef check_subset_list(list1, list2): \n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    if len(list1) > len(list2):\n        return False\n    for i in range(len(list2)):\n        for j in range(len(list1)):\n            if list2[i][j] not in list1[j]:\n                return False\n    return True\n\n# Test cases\nprint(check_subset_list([['a', 'b', ['c', 'd', 'e'], 'f'], ['g', 'h', ['i', 'j', 'k', 'l']], 'm'], [['a', 'b', ['c', 'd', 'e', 'f'], 'm'], ['g', 'h', ['i', 'j', 'k', 'l']])) # True\nprint(check_subset_list([['a', 'b', ['c', 'd', 'e'], 'f'], ['g', 'h', ['i', 'j', 'k', 'l']], 'm'], [['a', 'b', ['c', 'd', 'e'], 'f'], ['g', 'h', ['i', 'j', 'k', 'l']])) # True\nprint(check_subset_list([['a', 'b', ['c', 'd', 'e'], 'f'], ['g', 'h', ['i', 'j', 'k', 'l']], 'm'], [['a', 'b', ['c', 'd', 'e'], ['g', 'h', ['i', 'j', 'k', 'l']])) # False\nprint(check_subset_list([['a',",
        "generated_testcode": "assert check_subset_list([[1, 2, [3, 4]], [1, 2, [3, 4, 5]], [1, 2, [3, 4, 5, 6]]] == False\n",
        "test": "assert check_subset_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14],[[12, 18, 23, 25, 45], [7, 11, 19, 24, 28], [1, 5, 8, 18, 15, 16]])==False\nassert check_subset_list([[2, 3, 1], [4, 5], [6, 8]],[[4, 5], [6, 8]])==True\nassert check_subset_list([['a', 'b'], ['e'], ['c', 'd']],[['g']])==False",
        "canonical_solution": "def check_subset_list(list1, list2): \r\n    l1, l2 = list1[0], list2[0] \r\n    exist = True\r\n    for i in list2: \r\n        if i not in list1: \r\n            exist = False\r\n    return exist "
    },
    {
        "number": 217,
        "prompt": "Write a python function to find the first repeated character in a given string.\ndef first_Repeated_Char(str): \n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    dict = {}\n    for char in str:\n        if char in dict:\n            return char\n        else:\n            dict[char] = 1\n    return None\n\n# Test the function \nprint(first_Repeated_Char(\"hello world\")) # Output: \"l\"\nprint(first_Repeated_Char(\"python\")) # Output: None\nprint(first_Repeated_Char(\"aabbcde\")) # Output: \"a\"\nprint(first_Repeated_Char(\"aabbcdde\")) # Output: \"a\"\n\n# Test the function for empty string\nprint(first_Repeated_Char(\"\")) # Output: None ",
        "generated_testcode": "assert first_Repeated_Char(\"hello world\") == \"l\"\n",
        "test": "assert first_Repeated_Char(\"Google\") == \"o\"\nassert first_Repeated_Char(\"data\") == \"a\"\nassert first_Repeated_Char(\"python\") == '\\0'",
        "canonical_solution": "def first_Repeated_Char(str): \r\n    h = {}\r\n    for ch in str:\r\n        if ch in h: \r\n            return ch;\r\n        else: \r\n            h[ch] = 0\r\n    return '\\0'"
    },
    {
        "number": 218,
        "prompt": "Write a python function to find the minimum operations required to make two numbers equal.\ndef min_Operations(A,B):  \n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    count = 0  \n    while A != B:  \n        if A > B:  \n            A -= B  \n            count += A  \n        else:  \n            B -= A  \n            count += B  \n    return count  \n\n# Test the function with sample inputs  \nA = 50  \nB = 20  \nprint(min_Operations(A, B))  ",
        "generated_testcode": "assert min_Operations(10, 20) == 2\n",
        "test": "assert min_Operations(2,4) == 1\nassert min_Operations(4,10) == 4\nassert min_Operations(1,4) == 3",
        "canonical_solution": "import math   \r\ndef min_Operations(A,B):  \r\n    if (A > B): \r\n        swap(A,B)  \r\n    B = B // math.gcd(A,B);  \r\n    return B - 1"
    },
    {
        "number": 219,
        "prompt": "Write a function to extract maximum and minimum k elements in the given tuple.\ndef extract_min_max(test_tup, K):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    if len(test_tup) < K:\n        return \"Invalid input. K is greater than the length of tuple.\"\n    sorted_tup = sorted(test_tup)\n    min_elements = sorted_tup[:K]\n    max_elements = sorted_tup[-K:]\n    return (min_elements, max_elements)\n\n\n# Test cases\nprint(extract_min_max((4, 3, 1, 8, 5, 2, 7, 9, 5, 3, 6), 3)) # Output: ([1, 2, 3], [9, 7, 8])\nprint(extract_min_max((4, 3, 1, 8, 5, 2, 7, 9, 5, 3, 6), 4)) # Output: ([1, 2, 3, 3, 4], [9, 8, 7, 6])\nprint(extract_min_max((4, 3, 1, 8, 5, 2, 7, 9, 5, 3, 6), 5)) # Output: ([1, 2, 3, 3, 4, 5], [9, 8, 7, 6, 5])\nprint(extract_min_max((4, 3, 1, 8, 5, 2, 7, 9, 5, 3, 6), 6)) #",
        "generated_testcode": "assert extract_min_max((1, 2, 3, 4, 5, 6, 7, 8, 9), 3) == (1, 9)\n",
        "test": "assert extract_min_max((5, 20, 3, 7, 6, 8), 2) == (3, 5, 8, 20)\nassert extract_min_max((4, 5, 6, 1, 2, 7), 3) == (1, 2, 4, 5, 6, 7)\nassert extract_min_max((2, 3, 4, 8, 9, 11, 7), 4) == (2, 3, 4, 7, 8, 9, 11)",
        "canonical_solution": "\r\ndef extract_min_max(test_tup, K):\r\n  res = []\r\n  test_tup = list(test_tup)\r\n  temp = sorted(test_tup)\r\n  for idx, val in enumerate(temp):\r\n    if idx < K or idx >= len(temp) - K:\r\n      res.append(val)\r\n  res = tuple(res)\r\n  return (res) "
    },
    {
        "number": 220,
        "prompt": "Write a function to replace maximum n occurrences of spaces, commas, or dots with a colon.\ndef replace_max_specialchar(text,n):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    special_chars = [' ', ',',','.']\n    char_count = {char:0 for char in special_chars}\n    for char in text:\n        if char in special_chars:\n            char_count[char] += 1\n    max_char = max(char_count, key=char_count.get)\n    for i in range(n):\n        text = text.replace(max_char,':',1)\n    return text\n\n#Testing the function\nprint(replace_max_specialchar(\"hello,world.how are you?\",2)) # Output: \"hello:world:how are you?\"\nprint(replace_max_specialchar(\"python is fun, fun, fun, fun, fun, fun\",3)) # Output: \"python is fun, fun, fun, fun: fun\"\nprint(replace_max_specialchar(\"the quick brown fox jumps over the lazy dog\",2)) # Output: \"the quick brown fox jumps over the lazy dog\"\n\n#Explanation:\n# The function takes in a string and an integer n as input. It creates a dictionary to store the count of each special character in the string. \n# It then finds the character with the maximum count and replaces it with a colon ':' in the string n times. ",
        "generated_testcode": "assert replace_max_specialchar(\"hello world, how are you?\", 2) == \"hello:world:how:are:you?\"\n",
        "test": "assert replace_max_specialchar('Python language, Programming language.',2)==('Python:language: Programming language.')\nassert replace_max_specialchar('a b c,d e f',3)==('a:b:c:d e f')\nassert replace_max_specialchar('ram reshma,ram rahim',1)==('ram:reshma,ram rahim')",
        "canonical_solution": "import re\r\ndef replace_max_specialchar(text,n):\r\n return (re.sub(\"[ ,.]\", \":\", text, n))"
    },
    {
        "number": 221,
        "prompt": "Write a python function to find the first even number in a given list of numbers.\ndef first_even(nums):\n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    for num in nums:\n        if num % 2 == 0:\n            return num\n    return None\n\n# Test the function\nnums = [1, 3, 5, 8, 6, 10, 12, 7, 4]\nprint(first_even(nums)) # Output: 8\nnums = [2, 5, 1, 7, 4, 6, 8]\nprint(first_even(nums)) # Output: 2\nnums = [1, 3, 9, 11, 5, 7]\nprint(first_even(nums)) # Output: None\n\n\n# Write a python function to find the first odd number in a given list of numbers\ndef first_odd(nums):\n    for num in nums:\n        if num % 2 == 1:\n            return num\n    return None\n\n# Test the function\nnums = [1, 3, 5, 8, 6, 10, 12, 7, 4]\nprint(first_odd(nums)) # Output: 1\nnums = [2, 5, 1, 7, 4, 6, 8]\nprint(first_odd(nums)) # Output: 1\nnums = [1, 3, 9, 11, 5, 7]\nprint(first_odd(nums)) # Output: None\n\n# Write a python",
        "generated_testcode": "assert first_even([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 2\n",
        "test": "assert first_even ([1, 3, 5, 7, 4, 1, 6, 8]) == 4\nassert first_even([2, 3, 4]) == 2\nassert first_even([5, 6, 7]) == 6",
        "canonical_solution": "def first_even(nums):\r\n    first_even = next((el for el in nums if el%2==0),-1)\r\n    return first_even"
    },
    {
        "number": 222,
        "prompt": "Write a function to check if all the elements in tuple have same data type or not.\ndef check_type(test_tuple):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    return len(set(map(type, test_tuple)) == 1\n\n\n# Test cases\nprint(check_type((1, 2, 3, 4.5, 5)) # True\nprint(check_type((1, 'a', 'b', 'c')) # False\nprint(check_type((1, 2, 3, 4.5, 5, 'a')) # False\nprint(check_type(('a', 'b', 'c')) # True\n",
        "generated_testcode": "assert check_type((1,2,3,4,5) == True\n",
        "test": "assert check_type((5, 6, 7, 3, 5, 6) ) == True\nassert check_type((1, 2, \"4\") ) == False\nassert check_type((3, 2, 1, 4, 5) ) == True",
        "canonical_solution": "def check_type(test_tuple):\r\n  res = True\r\n  for ele in test_tuple:\r\n    if not isinstance(ele, type(test_tuple[0])):\r\n      res = False\r\n      break\r\n  return (res) "
    },
    {
        "number": 223,
        "prompt": "Write a function to check for majority element in the given sorted array.\ndef is_majority(arr, n, x):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n        if count > n//2:\n            return True\n    return False\n\n# Test the function\narr = [1, 1, 1, 2, 3, 3, 3, 3, 3, 4, 5, 5]\nn = len(arr)\nx = 3\nprint(is_majority(arr, n, x))  # Output: True\n\narr = [1, 1, 2, 3, 4, 5, 5, 5, 5]\nn = len(arr)\nx = 5\nprint(is_majority(arr, n, x))  # Output: True\n\narr = [1, 1, 2, 2, 2, 2, 2, 3, 3, 3]\nn = len(arr)\nx = 2\nprint(is_majority(arr, n, x))  # Output: False\n\n",
        "generated_testcode": "assert is_majority([1, 2, 3, 4, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7",
        "test": "assert is_majority([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\nassert is_majority([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\nassert is_majority([1, 1, 1, 2, 2], 5, 1) == True",
        "canonical_solution": "def is_majority(arr, n, x):\r\n\ti = binary_search(arr, 0, n-1, x)\r\n\tif i == -1:\r\n\t\treturn False\r\n\tif ((i + n//2) <= (n -1)) and arr[i + n//2] == x:\r\n\t\treturn True\r\n\telse:\r\n\t\treturn False\r\ndef binary_search(arr, low, high, x):\r\n\tif high >= low:\r\n\t\tmid = (low + high)//2 \r\n\t\tif (mid == 0 or x > arr[mid-1]) and (arr[mid] == x):\r\n\t\t\treturn mid\r\n\t\telif x > arr[mid]:\r\n\t\t\treturn binary_search(arr, (mid + 1), high, x)\r\n\t\telse:\r\n\t\t\treturn binary_search(arr, low, (mid -1), x)\r\n\treturn -1"
    },
    {
        "number": 224,
        "prompt": "Write a python function to count set bits of a given number.\ndef count_Set_Bits(n): \n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    count = 0\n    while(n): \n        count += n & 1\n        n >>= 1\n    return count ",
        "generated_testcode": "assert count_Set_Bits(0) == 0\n",
        "test": "assert count_Set_Bits(2) == 1\nassert count_Set_Bits(4) == 1\nassert count_Set_Bits(6) == 2",
        "canonical_solution": "def count_Set_Bits(n): \r\n    count = 0\r\n    while (n): \r\n        count += n & 1\r\n        n >>= 1\r\n    return count "
    },
    {
        "number": 225,
        "prompt": "Write a python function to find the minimum element in a sorted and rotated array.\ndef find_Min(arr,low,high): \n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    if high == low: \n        return arr[low] \n    if high == low + 1: \n        return arr[low] \n    if arr[low] <= arr[high]: \n        return arr[low] \n    mid = (low + high)//2\n    if arr[mid] > arr[high]: \n        return find_Min(arr,low,mid) \n    else: \n        return find_Min(arr,mid+1,high) \n   \ndef find_Min_Rotated_Array(arr): \n    n = len(arr) \n    return find_Min(arr,0,n-1) \n\n# Driver function to test the above function \narr = [15, 18, 2, 3, 4, 5, 12, 13, 6, 7] \nprint(\"The minimum element is\", find_Min_Rotated_Array(arr)) ",
        "generated_testcode": "assert find_Min([4,5,6,7,8,9,10,1,2,3],0,5) == 1\n",
        "test": "assert find_Min([1,2,3,4,5],0,4) == 1\nassert find_Min([4,6,8],0,2) == 4\nassert find_Min([2,3,5,7,9],0,4) == 2",
        "canonical_solution": "def find_Min(arr,low,high): \r\n    while (low < high): \r\n        mid = low + (high - low) // 2;   \r\n        if (arr[mid] == arr[high]): \r\n            high -= 1; \r\n        elif (arr[mid] > arr[high]): \r\n            low = mid + 1; \r\n        else: \r\n            high = mid; \r\n    return arr[high]; "
    },
    {
        "number": 226,
        "prompt": "Write a python function to remove the characters which have odd index values of a given string.\ndef odd_values_string(str):\n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    result = \"\"\n    for i in range(len(str)):\n        if i % 2 == 0:\n            result += str[i]\n    return result\n\n# Test the function\nprint(odd_values_string(\"hello world\")) # \"hlowrd\"\nprint(odd_values_string(\"programming\")) # \"rgmpr\"\nprint(odd_values_string(\"python\")) # \"ytn\"\nprint(odd_values_string(\"1234567890\")) # \"13579\"\nprint(odd_values_string(\"AEIOU\")) # \"AEOU\"",
        "generated_testcode": "assert odd_values_string(\"hello\") == \"hlo\"\n",
        "test": "assert odd_values_string('abcdef') == 'ace'\nassert odd_values_string('python') == 'pto'\nassert odd_values_string('data') == 'dt'",
        "canonical_solution": "def odd_values_string(str):\r\n  result = \"\" \r\n  for i in range(len(str)):\r\n    if i % 2 == 0:\r\n      result = result + str[i]\r\n  return result"
    },
    {
        "number": 227,
        "prompt": "Write a function to find minimum of three numbers.\ndef min_of_three(a,b,c): \n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    if a<b and a<c:\n        return a\n    elif b<a and b<c:\n        return b\n    else:\n        return c\n\nprint(min_of_three(2,5,1))\nprint(min_of_three(7,3,8))\nprint(min_of_three(9,4,6)\n\n\n# Alternative approach using ternary operator\ndef min_of_three(a,b,c):\n    return a if a<b and a<c else (b if b<c else c)\nprint(min_of_three(2,5,1))\nprint(min_of_three(7,3,8)\nprint(min_of_three(9,4,6)",
        "generated_testcode": "assert min_of_three(10,20,30) == 10\n",
        "test": "assert min_of_three(10,20,0)==0\nassert min_of_three(19,15,18)==15\nassert min_of_three(-10,-20,-30)==-30",
        "canonical_solution": "def min_of_three(a,b,c): \r\n      if (a <= b) and (a <= c): \r\n        smallest = a \r\n      elif (b <= a) and (b <= c): \r\n        smallest = b \r\n      else: \r\n        smallest = c \r\n      return smallest "
    },
    {
        "number": 228,
        "prompt": "Write a python function to check whether all the bits are unset in the given range or not.\ndef all_Bits_Set_In_The_Given_Range(n,l,r):  \n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    for i in range(l,r+1):\n        if (n & (1<<i) == 0):\n            return False\n    return True\n\n# Test cases\nprint(all_Bits_Set_In_The_Given_Range(31,4,8)) # Output: True\nprint(all_Bits_Set_In_The_Given_Range(31,1,9)) # Output: False\nprint(all_Bits_Set_In_The_Given_Range(31,10,15)) # Output: False\nprint(all_Bits_Set_In_The_Given_Range(31,1,1)) # Output: False\nprint(all_Bits_Set_In_The_Given_Range(31,16,19)) # Output: True\nprint(all_Bits_Set_In_The_Given_Range(31,0,30)) # Output: True\n",
        "generated_testcode": "assert all_Bits_Set_In_The_Given_Range(10, 2, 5) == True\n",
        "test": "assert all_Bits_Set_In_The_Given_Range(4,1,2) == True\nassert all_Bits_Set_In_The_Given_Range(17,2,4) == True\nassert all_Bits_Set_In_The_Given_Range(39,4,6) == False",
        "canonical_solution": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \r\n    num = (((1 << r) - 1) ^ ((1 << (l - 1)) - 1)) \r\n    new_num = n & num\r\n    if (new_num == 0): \r\n        return True\r\n    return False"
    },
    {
        "number": 229,
        "prompt": "Write a function to re-arrange the elements of the given array so that all negative elements appear before positive ones.\ndef re_arrange_array(arr, n):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    neg_arr = []\n    pos_arr = []\n\n    for i in range(n):\n        if arr[i] < 0:\n            neg_arr.append(arr[i])\n        else:\n            pos_arr.append(arr[i])\n\n    return neg_arr + pos_arr\n\n\n# Testing the function\narr = [-1, 2, -3, 0, 1, -5, 6, -4, 7]\nn = len(arr)\nprint(\"Given array:\", arr)\nprint(\"Rearranged array:\", re_arrange_array(arr, n))\n\n# Output:\n# Given array: [-1, 2, -3, 0, 1, -5, 6, -4, 7]\n# Rearranged array: [-1, -3, -5, -4, 0, 2, 1, 6, 7]",
        "generated_testcode": "assert re_arrange_array([1, 2, -3, 4, -5, 6, -7, 8, -9, 10] , 7) == [-3, -5, -7, -9, 1, 2, 4, 6, 8, 10]\n",
        "test": "assert re_arrange_array([-1, 2, -3, 4, 5, 6, -7, 8, 9], 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9]\nassert re_arrange_array([12, -14, -26, 13, 15], 5) == [-14, -26, 12, 13, 15]\nassert re_arrange_array([10, 24, 36, -42, -39, -78, 85], 7) == [-42, -39, -78, 10, 24, 36, 85]",
        "canonical_solution": "def re_arrange_array(arr, n):\r\n  j=0\r\n  for i in range(0, n):\r\n    if (arr[i] < 0):\r\n      temp = arr[i]\r\n      arr[i] = arr[j]\r\n      arr[j] = temp\r\n      j = j + 1\r\n  return arr"
    },
    {
        "number": 230,
        "prompt": "Write a function to replace blank spaces with any character in a string.\ndef replace_blank(str1,char):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    if str1 == '':\n        return str1\n    else:\n        return str1.replace(\" \",\"%s\"%char)\n\n\n#test the function\nprint(replace_blank(\"hello world\", \"*\"))\nprint(replace_blank(\"hello world  \", \"*\")\nprint(replace_blank(\"  hello world\", \"*\")\nprint(replace_blank(\"hello   world\", \"*\")\nprint(replace_blank(\"hello  world  \", \"*\")\nprint(replace_blank(\"  hello  world  \", \"*\")\n\n\n#output:\n#hello*world\n#*hello*world\n#*hello*world\n#*hello*world\n#*hello*world\n\n\n#The function will replace the blank space with the character specified in the parameter. If the string is empty, it will return the string as it is. ",
        "generated_testcode": "assert replace_blank(\"Hello World\", \"!\") == \"Hello!World\"\n",
        "test": "assert replace_blank(\"hello people\",'@')==(\"hello@people\")\nassert replace_blank(\"python program language\",'$')==(\"python$program$language\")\nassert replace_blank(\"blank space\",\"-\")==(\"blank-space\")",
        "canonical_solution": "def replace_blank(str1,char):\r\n str2 = str1.replace(' ', char)\r\n return str2"
    },
    {
        "number": 231,
        "prompt": "Write a function to find the maximum sum in the given right triangle of numbers.\ndef max_sum(tri, n): \n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    # Create a 2D array to store the cumulative sum of each row\n    cumulative = [[0] * (n+1) for i in range(n+1)]\n    \n    # Initialize the first row to be the input triangle\n    for i in range(n+1):\n        cumulative[0][i] = tri[0][i-1]\n    \n    # Iterate through each row\n    for i in range(1, n+1):\n        for j in range(1, n+1):\n            # If the element is on the first column, it is the sum of the current row\n            if j == 1:\n                cumulative[i][j] = cumulative[i-1][j] + tri[i][j-1]\n            # If the element is on the last column, it is the sum of the current row\n            elif j == i:\n                cumulative[i][j] = cumulative[i-1][j-1] + tri[i][j-1]\n            # Otherwise, it is the sum of the current element and the maximum of the left and top element\n            else:\n                cumulative[i][j] = tri[i][j-1] + max(cumulative[i-1][j-1], cumulative[i][j-1])\n                \n    # Return the maximum value of the last row\n    return max(cumulative[n])\n\n\n# Test the function\ntri = [[1, 3, 5], [2, 2, ",
        "generated_testcode": "assert max_sum([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3) == 25\n",
        "test": "assert max_sum([[1], [2,1], [3,3,2]], 3) == 6\nassert max_sum([[1], [1, 2], [4, 1, 12]], 3) == 15 \nassert max_sum([[2], [3,2], [13,23,12]], 3) == 28",
        "canonical_solution": "def max_sum(tri, n): \r\n\tif n > 1: \r\n\t\ttri[1][1] = tri[1][1]+tri[0][0] \r\n\t\ttri[1][0] = tri[1][0]+tri[0][0] \r\n\tfor i in range(2, n): \r\n\t\ttri[i][0] = tri[i][0] + tri[i-1][0] \r\n\t\ttri[i][i] = tri[i][i] + tri[i-1][i-1] \r\n\t\tfor j in range(1, i): \r\n\t\t\tif tri[i][j]+tri[i-1][j-1] >= tri[i][j]+tri[i-1][j]: \r\n\t\t\t\ttri[i][j] = tri[i][j] + tri[i-1][j-1] \r\n\t\t\telse: \r\n\t\t\t\ttri[i][j] = tri[i][j]+tri[i-1][j] \r\n\treturn (max(tri[n-1]))"
    },
    {
        "number": 232,
        "prompt": "Write a function to get the n largest items from a dataset.\ndef larg_nnum(list1,n):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    # Convert the list to a set to remove duplicates and then back to list\n    list1 = list(set(list1))\n    # Sort the list in descending order\n    list1.sort(reverse=True)\n    # Return the first n elements\n    return list1[:n]\n\n# Test the function\nprint(larg_nnum([1,2,3,4,5,5,4,3,2,1,1,6,7,8,9,8,7],3))\n# Output: [9, 8, 7]\n",
        "generated_testcode": "assert larg_nnum([1,2,3,4,5,6,7,8,9,10],3) == [9,8,7]\n",
        "test": "assert larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],2)==[100,90]\nassert larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],5)==[100,90,80,70,60]\nassert larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],3)==[100,90,80]",
        "canonical_solution": "import heapq\r\ndef larg_nnum(list1,n):\r\n largest=heapq.nlargest(n,list1)\r\n return largest"
    },
    {
        "number": 233,
        "prompt": "Write a function to find the lateral surface area of a cylinder.\ndef lateralsuface_cylinder(r,h):\n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    import math\n    area = 2*math.pi*r*h\n    return area\n\n# Test the function with a few values\nprint(lateralsuface_cylinder(5,10)) # Should be 314.1592653589793\nprint(lateralsuface_cylinder(10,5)) # Should be 62.831853066648\nprint(lateralsuface_cylinder(3,1)) # Should be 18.8496669086705\n",
        "generated_testcode": "assert lateralsuface_cylinder(5,10) == 314.1592653589793\nprint(\"Test case 1 passed\")\n\n",
        "test": "assert lateralsuface_cylinder(10,5)==314.15000000000003\nassert lateralsuface_cylinder(4,5)==125.66000000000001\nassert lateralsuface_cylinder(4,10)==251.32000000000002",
        "canonical_solution": "def lateralsuface_cylinder(r,h):\r\n  lateralsurface= 2*3.1415*r*h\r\n  return lateralsurface"
    },
    {
        "number": 234,
        "prompt": "Write a function to find the volume of a cube.\ndef volume_cube(l):\n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    \"\"\"\n    Given the length of a cube, return its volume.\n    \"\"\"\n    return l**3\n\n# Test the function with an example\nprint(volume_cube(2))  # Output: 8\n\n# Test the function with another example\nprint(volume_cube(10))  # Output: 10000\n",
        "generated_testcode": "assert volume_cube(2) == 8\n",
        "test": "assert volume_cube(3)==27\nassert volume_cube(2)==8\nassert volume_cube(5)==125",
        "canonical_solution": "def volume_cube(l):\r\n  volume = l * l * l\r\n  return volume"
    },
    {
        "number": 235,
        "prompt": "Write a python function to set all even bits of a given number.\ndef even_bit_set_number(n): \n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": true,
        "answer": "    \"\"\"\n    This function takes an integer n and returns an integer with all even bits set to 1.\n    \"\"\"\n    return n | (n & (n-1)//2) \n\n\n# Test the function \nprint(even_bit_set_number(7)) # Output: 7 (0b1111)\nprint(even_bit_set_number(12)) # Output: 14 (0b11110)\nprint(even_bit_set_number(26)) # Output: 30 (0b1111010)\nprint(even_bit_set_number(8)) # Output: 8 (0b10000)\nprint(even_bit_set_number(15)) # Output: 14 (0b111110)\nprint(even_bit_set_number(31)) # Output: 30 (0b1111110)\n",
        "generated_testcode": "assert even_bit_set_number(10) == 10\n",
        "test": "assert even_bit_set_number(10) == 10\nassert even_bit_set_number(20) == 30\nassert even_bit_set_number(30) == 30",
        "canonical_solution": "def even_bit_set_number(n): \r\n    count = 0;res = 0;temp = n \r\n    while(temp > 0): \r\n        if (count % 2 == 1): \r\n            res |= (1 << count)\r\n        count+=1\r\n        temp >>= 1\r\n    return (n | res) "
    },
    {
        "number": 236,
        "prompt": "Write a python function to count the maximum number of equilateral triangles that can be formed within a given equilateral triangle.\ndef No_of_Triangle(N,K):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    max_triangles = 0\n    count = 0\n    for i in range(1,N+1):\n        for j in range(1,N+1):\n            for k in range(1,N+1):\n                if i+j+k == N and i+j+k == K and i<=j and j<=k:\n                    count += 1\n                    if count > max_triangles:\n                        max_triangles = count\n    return max_triangles\nprint(No_of_Triangle(4,10)) # Output: 2\nprint(No_of_Triangle(5,15)) # Output: 3\nprint(No_of_Triangle(7,20)) # Output: 4",
        "generated_testcode": "assert No_of_Triangle(3,2) == 1\n",
        "test": "assert No_of_Triangle(4,2) == 7\nassert No_of_Triangle(4,3) == 3\nassert No_of_Triangle(1,3) == -1",
        "canonical_solution": "def No_of_Triangle(N,K):\r\n    if (N < K):\r\n        return -1;\r\n    else:\r\n        Tri_up = 0;\r\n        Tri_up = ((N - K + 1) *(N - K + 2)) // 2;\r\n        Tri_down = 0;\r\n        Tri_down = ((N - 2 * K + 1) *(N - 2 * K + 2)) // 2;\r\n        return Tri_up + Tri_down;"
    },
    {
        "number": 237,
        "prompt": "Write a function to check the occurrences of records which occur similar times in the given tuples.\ndef check_occurences(test_list):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    # Create a dictionary to store the occurrences of each tuple\n    occurrences = {}\n    for item in test_list:\n        # Convert the tuple to a string\n        item_str = str(item)\n        # Check if the item is already in the dictionary\n        if item_str in occurrences:\n            # If it is, increase the count by 1\n            occurrences[item_str] += 1\n        else:\n            # If it isn't, add it to the dictionary with a count of 1\n            occurrences[item_str] = 1\n    # Return the dictionary\n    return occurrences\n\n\n# Test the function with a list of tuples\ntest_list = [(1, 2), (1, 2), (1, 3), (1, 2), (2, 2), (3, 2), (3, 2), (1, 2)]\nprint(check_occurences(test_list))\n# Output: {('1, 2): 3, ('1, 3): 1, ('2, 2): 2, ('3, 2): 2}\n\ntest_list = [(1, 2), (1, 3), (2, 2), (3, 2), (1, 2), (2, 2)]\nprint(check_occurences(test_list))\n# Output: {('1, 2): 2, ('1, 3): 1, ('2, 2): 2, ('3",
        "generated_testcode": "assert check_occurences([(1,2,3),(1,2,3),(1,2,3),(4,5,6),(4,5,6),(7,8,9),(7,8,9),(7,8,9),(7,8,9)] ) == 3\n",
        "test": "assert check_occurences([(3, 1), (1, 3), (2, 5), (5, 2), (6, 3)] ) == {(1, 3): 2, (2, 5): 2, (3, 6): 1}\nassert check_occurences([(4, 2), (2, 4), (3, 6), (6, 3), (7, 4)] ) == {(2, 4): 2, (3, 6): 2, (4, 7): 1}\nassert check_occurences([(13, 2), (11, 23), (12, 25), (25, 12), (16, 23)] ) == {(2, 13): 1, (11, 23): 1, (12, 25): 2, (16, 23): 1}",
        "canonical_solution": "from collections import Counter \r\ndef check_occurences(test_list):\r\n  res = dict(Counter(tuple(ele) for ele in map(sorted, test_list)))\r\n  return  (res) "
    },
    {
        "number": 238,
        "prompt": "Write a python function to count number of non-empty substrings of a given string.\ndef number_of_substrings(str): \n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    count = 0\n    for i in range(len(str)): \n        for j in range(i+1, len(str)+1): \n            if str[i:j] != '': \n                count += 1\n    return count \n\n# Test the function \nstr = \"geeksforgeeks\"\nprint(\"Number of non-empty substrings in the string\", str, \"are\", number_of_substrings(str)) ",
        "generated_testcode": "assert number_of_substrings(\"abc\") == 12\n",
        "test": "assert number_of_substrings(\"abc\") == 6\nassert number_of_substrings(\"abcd\") == 10\nassert number_of_substrings(\"abcde\") == 15",
        "canonical_solution": "def number_of_substrings(str): \r\n\tstr_len = len(str); \r\n\treturn int(str_len * (str_len + 1) / 2); "
    },
    {
        "number": 239,
        "prompt": "Write a function to find the number of possible sequences of length n such that each of the next element is greater than or equal to twice of the previous element but less than or equal to m.\ndef get_total_number_of_sequences(m,n): \n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    if n == 1: \n        return m \n    else: \n        return (m-1) * get_total_number_of_sequences(m,n-1) ",
        "generated_testcode": "assert get_total_number_of_sequences(10, 3) == 10\n",
        "test": "assert get_total_number_of_sequences(10, 4) == 4\nassert get_total_number_of_sequences(5, 2) == 6\nassert get_total_number_of_sequences(16, 3) == 84",
        "canonical_solution": "def get_total_number_of_sequences(m,n): \r\n\tT=[[0 for i in range(n+1)] for i in range(m+1)] \r\n\tfor i in range(m+1): \r\n\t\tfor j in range(n+1): \r\n\t\t\tif i==0 or j==0: \r\n\t\t\t\tT[i][j]=0\r\n\t\t\telif i<j: \r\n\t\t\t\tT[i][j]=0\r\n\t\t\telif j==1: \r\n\t\t\t\tT[i][j]=i \r\n\t\t\telse: \r\n\t\t\t\tT[i][j]=T[i-1][j]+T[i//2][j-1] \r\n\treturn T[m][n]"
    },
    {
        "number": 240,
        "prompt": "Write a function to replace the last element of the list with another list.\ndef replace_list(list1,list2):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    list1[-1] = list2\n    return list1\n\n#Test the function\nprint(replace_list([1,2,3,4], [5,6,7]))\nprint(replace_list([1,2,3,4], [7,8,9]))\nprint(replace_list([1,2,3,4], [1,2,3,4,5]))\nprint(replace_list([], [5,6,7]))\n\n#Output: [1, 2, [5, 6, 7]\n#       [1, 2, [7, 8, 9]\n#       [1, 2, [1, 2, 4, 5]\n#       []",
        "generated_testcode": "assert replace_list([1,2,3,4,5], [6,7,8,9]) == [1,2,3,9]\n",
        "test": "assert replace_list([1, 3, 5, 7, 9, 10],[2, 4, 6, 8])==[1, 3, 5, 7, 9, 2, 4, 6, 8]\nassert replace_list([1,2,3,4,5],[5,6,7,8])==[1,2,3,4,5,6,7,8]\nassert replace_list([\"red\",\"blue\",\"green\"],[\"yellow\"])==[\"red\",\"blue\",\"yellow\"]",
        "canonical_solution": "def replace_list(list1,list2):\r\n list1[-1:] = list2\r\n replace_list=list1\r\n return replace_list\r\n"
    },
    {
        "number": 241,
        "prompt": "Write a function to generate a 3d array having each element as '*'.\ndef array_3d(m,n,o):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    arr = [[[0 for j in range(n)] for i in range(m)] for k in range(o)]\n    for i in range(m):\n        for j in range(n):\n            for k in range(o):\n                arr[i][j][k] = '*'\n    return arr\n\n#Test the function\nprint(array_3d(3,4,5))\n#Output: [[['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*']]\n#        ['*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*']]\n#        ['*', '*', '*', '*', '*']] ",
        "generated_testcode": "assert array_3d(2,3,4) == [['***', '***', '***'], ['***', '***', '***']]\n",
        "test": "assert array_3d(6,4,3)==[[['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']]]\nassert array_3d(5,3,4)==[[['*', '*', '*', '*', '*'], ['*', '*', '*', '*','*'], ['*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*'],['*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*']]]\nassert array_3d(1,2,3)==[[['*'],['*']],[['*'],['*']],[['*'],['*']]]",
        "canonical_solution": "def array_3d(m,n,o):\r\n array_3d = [[ ['*' for col in range(m)] for col in range(n)] for row in range(o)]\r\n return array_3d"
    },
    {
        "number": 242,
        "prompt": "Write a function to count total characters in a string.\ndef count_charac(str1):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    count = 0\n    for char in str1:\n        count += 1\n    return count\n\n#Test the function with a sample string\nstring = \"hello world\"\nprint(count_charac(string))\n\n#Write a function to count the number of vowels in a string\ndef count_vowels(str1):\n    vowels = \"aeiouAEIOU\"\n    count = 0\n    for char in str1:\n        if char in vowels:\n            count += 1\n    return count\n\n#Test the function with a sample string\nstring = \"hello world\"\nprint(count_vowels(string))\n\n#Write a function to count the number of uppercase and lowercase letters in a string\ndef count_upper(str1):\n    upper = 0\n    lower = 0\n    for char in str1:\n        if char.isupper():\n            upper += 1\n        elif char.islower():\n            lower += 1\n    return upper, lower\n\n#Test the function with a sample string\nstring = \"Hello World\"\nprint(count_upper(string))\n\n#Write a function to count the number of words in a string\ndef count_words(str1):\n    words = str1.split()\n    return len(words)\n\n#Test the function with a sample string\nstring = \"This is a sample string\"\nprint(count_words(string))\n\n#Write a function to find the length of the longest word in a string\ndef",
        "generated_testcode": "assert count_charac(\"Hello, World!\") == 10\n",
        "test": "assert count_charac(\"python programming\")==18\nassert count_charac(\"language\")==8\nassert count_charac(\"words\")==5",
        "canonical_solution": "def count_charac(str1):\r\n total = 0\r\n for i in str1:\r\n    total = total + 1\r\n return total"
    },
    {
        "number": 243,
        "prompt": "Write a function to sort the given list based on the occurrence of first element of tuples.\ndef sort_on_occurence(lst): \n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    lst.sort(key=lambda x: x[0])\n    return lst\n\n#Test the function \nlst = [(3, 'a'), (1, 'b'), (2, 'c'), (3, 'd'), (1, 'e'), (2, 'f')]\nprint(sort_on_occurence(lst))\n\n#Output: [(1, 'b'), (1, 'e'), (2, 'c'), (2, 'f'), (3, 'a'), (3, 'd')] ",
        "generated_testcode": "assert sort_on_occurence([(1,2), (2,3), (1,4), (3,5), (1,6), (2,7)] ) == [(1,2), (1,4), (1,6), (2,3), (2,7)]\n",
        "test": "assert sort_on_occurence([(1, 'Jake'), (2, 'Bob'), (1, 'Cara')]) == [(1, 'Jake', 'Cara', 2), (2, 'Bob', 1)]\nassert sort_on_occurence([('b', 'ball'), ('a', 'arm'), ('b', 'b'), ('a', 'ant')]) == [('b', 'ball', 'b', 2), ('a', 'arm', 'ant', 2)]\nassert sort_on_occurence([(2, 'Mark'), (3, 'Maze'), (2, 'Sara')]) == [(2, 'Mark', 'Sara', 2), (3, 'Maze', 1)]",
        "canonical_solution": "def sort_on_occurence(lst): \r\n\tdct = {} \r\n\tfor i, j in lst: \r\n\t\tdct.setdefault(i, []).append(j) \r\n\treturn ([(i, *dict.fromkeys(j), len(j)) \r\n\t\t\t\tfor i, j in dct.items()]) "
    },
    {
        "number": 244,
        "prompt": "Write a python function to find the next perfect square greater than a given number.\ndef next_Perfect_Square(N): \n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    i = 0\n    while(True):\n        if int(N)**(i) > N:\n            return int(N**i)\n        else:\n            i+=1\n\n# Driver code\nN = 16\nprint(\"The next perfect square greater than\",N,\"is\",next_Perfect_Square(N)) ",
        "generated_testcode": "assert next_Perfect_Square(10) == 13\n",
        "test": "assert next_Perfect_Square(35) == 36\nassert next_Perfect_Square(6) == 9\nassert next_Perfect_Square(9) == 16",
        "canonical_solution": "import math  \r\ndef next_Perfect_Square(N): \r\n    nextN = math.floor(math.sqrt(N)) + 1\r\n    return nextN * nextN "
    },
    {
        "number": 245,
        "prompt": "Write a function to find the maximum sum of bi-tonic sub-sequence for the given array.\ndef max_sum(arr, n): \n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    max_sum = 0\n    dp = [0] * n\n    prev_diff = [0] * n\n    prev_diff[0] = arr[0]\n    prev_diff[1] = arr[1] - arr[0]\n    \n    for i in range(2, n):\n        if arr[i] - arr[i-1] > arr[i-1] - arr[i]:\n            prev_diff[i] = arr[i] - arr[i-1]\n        else:\n            prev_diff[i] = arr[i] - arr[i-1]\n\n    dp[0] = prev_diff[0]\n    dp[1] = max(prev_diff[0], prev_diff[1])\n    \n    for i in range(2, n):\n        dp[i] = max(dp[i-1], dp[i-2] + prev_diff[i])\n        max_sum = max(max_sum, dp[i])\n    \n    return max_sum\n\n# Test the function with an example array\narr = [1, 2, 3, 5, 4, 6, 1, 3, 8, 2, 6]\nn = len(arr)\nprint(max_sum(arr, n))\n\n\n# Test the function with another example array\narr = [1, 2, 3, -1, 4, 5, 2, 6, ",
        "generated_testcode": "assert max_sum([1, 2, 3, 4, 5, 6, 7, 8, 9], 6) == 25\n",
        "test": "assert max_sum([1, 15, 51, 45, 33, 100, 12, 18, 9], 9) == 194\nassert max_sum([80, 60, 30, 40, 20, 10], 6) == 210\nassert max_sum([2, 3 ,14, 16, 21, 23, 29, 30], 8) == 138",
        "canonical_solution": "def max_sum(arr, n): \r\n\tMSIBS = arr[:] \r\n\tfor i in range(n): \r\n\t\tfor j in range(0, i): \r\n\t\t\tif arr[i] > arr[j] and MSIBS[i] < MSIBS[j] + arr[i]: \r\n\t\t\t\tMSIBS[i] = MSIBS[j] + arr[i] \r\n\tMSDBS = arr[:] \r\n\tfor i in range(1, n + 1): \r\n\t\tfor j in range(1, i): \r\n\t\t\tif arr[-i] > arr[-j] and MSDBS[-i] < MSDBS[-j] + arr[-i]: \r\n\t\t\t\tMSDBS[-i] = MSDBS[-j] + arr[-i] \r\n\tmax_sum = float(\"-Inf\") \r\n\tfor i, j, k in zip(MSIBS, MSDBS, arr): \r\n\t\tmax_sum = max(max_sum, i + j - k) \r\n\treturn max_sum"
    },
    {
        "number": 246,
        "prompt": "Write a function for computing square roots using the babylonian method.\ndef babylonian_squareroot(number):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    \"\"\"\n    Given a positive integer number, compute its square root using the babylonian method\n    \"\"\"\n    if number < 0:\n        raise ValueError(\"Only positive numbers allowed\")\n    x = number\n    y = (x + 1.0) / 2\n    while True:\n        y = (x + y) / 2\n        x = (y + number / y)\n        if x == y:\n            break\n    return y\n\n\n# Testing the function\nprint(babylonian_squareroot(25)) # Output: 5.0\nprint(babylonian_squareroot(144)) # Output: 3.74166666666666666666664\nprint(babylonian_squareroot(64)) # Output: 8.0\nprint(babylonian_squareroot(3)) # Output: 1.732050807568887771\nprint(babylonian_squareroot(100)) # Output: 3.1622277766601683794\n",
        "generated_testcode": "assert babylonian_squareroot(2) == 1.414213562373095238095\n",
        "test": "assert babylonian_squareroot(10)==3.162277660168379\nassert babylonian_squareroot(2)==1.414213562373095\nassert babylonian_squareroot(9)==3.0",
        "canonical_solution": "def babylonian_squareroot(number):\r\n    if(number == 0):\r\n        return 0;\r\n    g = number/2.0;\r\n    g2 = g + 1;\r\n    while(g != g2):\r\n        n = number/ g;\r\n        g2 = g;\r\n        g = (g + n)/2;\r\n    return g;"
    },
    {
        "number": 247,
        "prompt": "Write a function to find the longest palindromic subsequence in the given string.\ndef lps(str): \n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    n = len(str) \n    dp = [[0] * n for i in range(n)] \n    for i in range(n): \n        dp[i][i] = 1\n  \n    for i in range(n - 1, -1, -1): \n        for j in range(i + 1, n): \n            if str[i] == str[j]: \n                dp[i][j] = 2\n            else: \n                dp[i][j] = 1\n  \n    for k in range(2, n): \n        for i in range(0, n - k): \n            j = k + i \n            if str[i] == str[j]: \n                dp[i][j] = dp[i + 1][j - 1] + 2\n            else: \n                dp[i][j] = max(dp[i + 1][j], dp[i][j - 1]) \n  \n            for m in range(i + 1, j): \n                if str[i:j] == str[i:j][::-1]: \n                    dp[i][j] = max(dp[i][j], dp[i][m] + dp[m + 1][j]) \n  \n    return dp[0][n - 1] \n  \n# Driver program to test the above function \nstr = \"BBABCDBA",
        "generated_testcode": "assert lps(\"bbbab\") == 4 # \"bbbb\"\n",
        "test": "assert lps(\"TENS FOR TENS\") == 5 \nassert lps(\"CARDIO FOR CARDS\") == 7\nassert lps(\"PART OF THE JOURNEY IS PART\") == 9 ",
        "canonical_solution": "def lps(str): \r\n\tn = len(str) \r\n\tL = [[0 for x in range(n)] for x in range(n)] \r\n\tfor i in range(n): \r\n\t\tL[i][i] = 1\r\n\tfor cl in range(2, n+1): \r\n\t\tfor i in range(n-cl+1): \r\n\t\t\tj = i+cl-1\r\n\t\t\tif str[i] == str[j] and cl == 2: \r\n\t\t\t\tL[i][j] = 2\r\n\t\t\telif str[i] == str[j]: \r\n\t\t\t\tL[i][j] = L[i+1][j-1] + 2\r\n\t\t\telse: \r\n\t\t\t\tL[i][j] = max(L[i][j-1], L[i+1][j]); \r\n\treturn L[0][n-1]"
    },
    {
        "number": 248,
        "prompt": "Write a function to calculate the harmonic sum of n-1.\ndef harmonic_sum(n):\n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    sum = 0\n    for i in range(1, n):\n        sum += 1/i\n    return sum\n\n# Test the function\nprint(harmonic_sum(5)) # Output: 2.083333333333333333333335\nprint(harmonic_sum(10)) # Output: 4.88219307240262312623\nprint(harmonic_sum(20)) # Output: 17.5931795772359224237\nprint(harmonic_sum(100)) # Output: 95.1699225353338576937\n\n# The function takes an integer n as input and returns the harmonic sum of n-1 terms. ",
        "generated_testcode": "assert harmonic_sum(1) == 0\n",
        "test": "assert harmonic_sum(7) == 2.5928571428571425\nassert harmonic_sum(4) == 2.083333333333333\nassert harmonic_sum(19) == 3.547739657143682",
        "canonical_solution": "def harmonic_sum(n):\r\n  if n < 2:\r\n    return 1\r\n  else:\r\n    return 1 / n + (harmonic_sum(n - 1)) "
    },
    {
        "number": 249,
        "prompt": "Write a function to find the intersection of two arrays using lambda function.\ndef intersection_array(array_nums1,array_nums2):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    return list(filter(lambda x: x in array_nums2, array_nums1))\n\narray1 = [1, 2, 3, 4, 5, 6, 7, 8, 9]\narray2 = [4, 5, 6, 7, 8, 9, 10, 11, 12]\nprint(intersection_array(array1,array2)) #[4, 5, 6, 7, 8, 9]\n\n# Write a function to find the intersection of two arrays using set()\ndef intersection_set(array_nums1,array_nums2):\n    return list(set(array_nums1) & set(array_nums2))\n\narray1 = [1, 2, 3, 4, 5, 6, 7, 8, 9]\narray2 = [4, 5, 6, 7, 8, 9, 10, 11, 12]\nprint(intersection_set(array1,array2)) #[4, 5, 6, 7, 8, 9]\n\n# Write a function to find the intersection of two arrays using set() and lambda function\ndef intersection_set_lambda(array_nums1,array_nums2):\n    return list(filter(lambda x: x in set(array_nums2, set(array_nums1) & set(array_nums2",
        "generated_testcode": "assert intersection_array([1,2,3,4,5,6,7,8,9],[4,5,6,7,8,9,10]) == [4,5,6,7,8,9]\n",
        "test": "assert intersection_array([1, 2, 3, 5, 7, 8, 9, 10],[1, 2, 4, 8, 9])==[1, 2, 8, 9]\nassert intersection_array([1, 2, 3, 5, 7, 8, 9, 10],[3,5,7,9])==[3,5,7,9]\nassert intersection_array([1, 2, 3, 5, 7, 8, 9, 10],[10,20,30,40])==[10]",
        "canonical_solution": "def intersection_array(array_nums1,array_nums2):\r\n result = list(filter(lambda x: x in array_nums1, array_nums2)) \r\n return result"
    },
    {
        "number": 250,
        "prompt": "Write a python function to count the occcurences of an element in a tuple.\ndef count_X(tup, x): \n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count\n\n#Test the function with the given tuple and element\ntup = (1, 2, 3, 4, 5, 5, 6, 2, 3, 7, 8, 5, 5, 9, 10, 5)\nprint(count_X(tup, 5)) # Output: 3 ",
        "generated_testcode": "assert count_X((\"abc\", \"a\") == 1)\n",
        "test": "assert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),4) == 0\nassert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),10) == 3\nassert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),8) == 4",
        "canonical_solution": "def count_X(tup, x): \r\n    count = 0\r\n    for ele in tup: \r\n        if (ele == x): \r\n            count = count + 1\r\n    return count "
    },
    {
        "number": 251,
        "prompt": "Write a function to insert an element before each element of a list.\ndef insert_element(list,element):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    new_list = [element]\n    for i in list:\n        new_list.append(element)\n        new_list.append(i)\n    return new_list\n\n#Example:\nprint(insert_element([1,2,3,4,5],[0]) #Output: [0,1,0,2,0,3,0,4,0,5] ",
        "generated_testcode": "assert insert_element([1,2,3,4,5], 0) == [0,1,0,2,0,3,0,4,0,5]\n",
        "test": "assert insert_element(['Red', 'Green', 'Black'] ,'c')==['c', 'Red', 'c', 'Green', 'c', 'Black'] \nassert insert_element(['python', 'java'] ,'program')==['program', 'python', 'program', 'java'] \nassert insert_element(['happy', 'sad'] ,'laugh')==['laugh', 'happy', 'laugh', 'sad'] ",
        "canonical_solution": "def insert_element(list,element):\r\n list = [v for elt in list for v in (element, elt)]\r\n return list"
    },
    {
        "number": 252,
        "prompt": "Write a python function to convert complex numbers to polar coordinates.\ndef convert(numbers):    \n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    result = []\n    for i in numbers:\n        r = abs(i)\n        theta = math.atan2(i.imag, i.real)\n        result.append((r, theta))\n    return result\n\n# Test the function with a list of complex numbers\ncomplex_numbers = [complex(1,2), complex(-2,3), complex(0,0), complex(3,-4), complex(5,0)]\nprint(convert(complex_numbers)) ",
        "generated_testcode": "assert convert(1+2j) == (2.23606765, 1.1071473)\n",
        "test": "assert convert(1) == (1.0, 0.0)\nassert convert(4) == (4.0,0.0)\nassert convert(5) == (5.0,0.0)",
        "canonical_solution": "import cmath  \r\ndef convert(numbers):    \r\n  num = cmath.polar(numbers)  \r\n  return (num) "
    },
    {
        "number": 253,
        "prompt": "Write a python function to count integers from a given list.\ndef count_integer(list1):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    count = {}\n    for i in list1:\n        if i in count:\n            count[i] += 1\n        else:\n            count[i] = 1\n    return count\n\n# Test the function with a sample input\nlst = [1, 2, 3, 3, 4, 4, 5, 5, 5, 6, 7, 7, 8, 8, 8, 9, 9]\nprint(count_integer(lst))\n",
        "generated_testcode": "assert count_integer([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10] ) == 10\n",
        "test": "assert count_integer([1,2,'abc',1.2]) == 2\nassert count_integer([1,2,3]) == 3\nassert count_integer([1,1.2,4,5.1]) == 2",
        "canonical_solution": "def count_integer(list1):\r\n    ctr = 0\r\n    for i in list1:\r\n        if isinstance(i, int):\r\n            ctr = ctr + 1\r\n    return ctr"
    },
    {
        "number": 254,
        "prompt": "Write a function to find all words starting with 'a' or 'e' in a given string.\ndef words_ae(text):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    words = text.split()\n    result = []\n    for word in words:\n        if word[0] == 'a' or word[0] == 'e':\n            result.append(word)\n    return result\n\n# Test cases\nprint(words_ae(\"Apple orange banana grapefruit mango pear apple\")) # ['Apple', 'apple']\nprint(words_ae(\"banana mango apple grapefruit pineapple orange\")) # ['banana', 'apple']\nprint(words_ae(\"pineapple strawberry kiwi mango apple\")) # ['mango', 'apple']\nprint(words_ae(\"kiwi watermelon grapefruit pear\")) # []\nprint(words_ae(\"watermelon\")) # []\n",
        "generated_testcode": "assert words_ae(\"The quick brown fox jumps over the lazy dog\") == ['The', 'fox', 'over', 'the']\n",
        "test": "assert words_ae(\"python programe\")==['ame']\nassert words_ae(\"python programe language\")==['ame','anguage']\nassert words_ae(\"assert statement\")==['assert', 'atement']",
        "canonical_solution": "import re\r\ndef words_ae(text):\r\n list = re.findall(\"[ae]\\w+\", text)\r\n return list"
    },
    {
        "number": 255,
        "prompt": "Write a function to choose specified number of colours from three different colours and generate all the combinations with repetitions.\ndef combinations_colors(l, n):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    colors = ['red', 'green', 'blue']\n    res = []\n    for i in range(n+1):\n        for j in range(n+1):\n            for k in range(n+1):\n                if i+j+k == n:\n                    res.append((colors[0]*i + colors[1]*j + colors[2]*k))\n    return res\n\n# Test cases\nprint(combinations_colors(2, 3)) # Should print ['redredred', 'redgreen', 'redblue', 'greenred', 'greengreen', 'blueblue', 'greenblue', 'blueblue', 'redgreenblue', 'redbluegreen']\nprint(combinations_colors(1, 5)) # Should print ['redredredredredredred', 'greenredgreenredred', 'blueredgreenred', 'redgreengreengreen', 'bluegreengreen', 'redblueblue', 'greenblueblue', 'bluegreenred', 'greenbluegreen', 'greenredgreenblue', 'blueredgreen']\nprint(combinations_colors(0, 2)) # Should print ['']\nprint(combinations_colors(3, 1)) # Should print ['red', 'green', 'blue']\nprint(combinations_colors(1, 0)) # Should print ['']\nprint(combinations_colors(4, 6)) # Should print ['redredredredredredredred', 'greenredgreenredgreen', 'bluebluebluebluegreen', 'greenbluebluered',",
        "generated_testcode": "assert combinations_colors([\"red\", \"blue\", \"green\"], 2) == [\"red\", \"red\", \"blue\", \"blue\", \"green\", \"green\"]\n",
        "test": "assert combinations_colors( [\"Red\",\"Green\",\"Blue\"],1)==[('Red',), ('Green',), ('Blue',)]\nassert combinations_colors( [\"Red\",\"Green\",\"Blue\"],2)==[('Red', 'Red'), ('Red', 'Green'), ('Red', 'Blue'), ('Green', 'Green'), ('Green', 'Blue'), ('Blue', 'Blue')]\nassert combinations_colors( [\"Red\",\"Green\",\"Blue\"],3)==[('Red', 'Red', 'Red'), ('Red', 'Red', 'Green'), ('Red', 'Red', 'Blue'), ('Red', 'Green', 'Green'), ('Red', 'Green', 'Blue'), ('Red', 'Blue', 'Blue'), ('Green', 'Green', 'Green'), ('Green', 'Green', 'Blue'), ('Green', 'Blue', 'Blue'), ('Blue', 'Blue', 'Blue')]",
        "canonical_solution": "from itertools import combinations_with_replacement \r\ndef combinations_colors(l, n):\r\n    return list(combinations_with_replacement(l,n))\r"
    },
    {
        "number": 256,
        "prompt": "Write a python function to count the number of prime numbers less than a given non-negative number.\ndef count_Primes_nums(n):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": true,
        "answer": "    if n<=1:\n        return 0\n    count = 0\n    for i in range(2,n):\n        if is_prime(i):\n            count += 1\n    return count\n\ndef is_prime(num):\n    if num<=1:\n        return False\n    for i in range(2,int(num**0.5)+1):\n        if num%i == 0:\n            return False\n    return True\n\n# test the function\nprint(count_Primes_nums(20)) # Output: 7\nprint(count_Primes_nums(100)) # Output: 4\nprint(count_Primes_nums(50)) # Output: 10\nprint(count_Primes_nums(1000)) # Output: 25\nprint(count_Primes_nums(10000)) # Output: 41\nprint(count_Primes_nums(50000)) # Output: 669",
        "generated_testcode": "assert count_Primes_nums(10) == 4\n",
        "test": "assert count_Primes_nums(5) == 2\nassert count_Primes_nums(10) == 4\nassert count_Primes_nums(100) == 25",
        "canonical_solution": "def count_Primes_nums(n):\r\n    ctr = 0\r\n    for num in range(n):\r\n        if num <= 1:\r\n            continue\r\n        for i in range(2,num):\r\n            if (num % i) == 0:\r\n                break\r\n        else:\r\n            ctr += 1\r\n    return ctr"
    },
    {
        "number": 257,
        "prompt": "Write a function to swap two numbers.\ndef swap_numbers(a,b):\n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    a,b = b,a\n    return a,b\n\n#test the function\nx = 5\ny = 10\nx,y = swap_numbers(x,y)\nprint(\"After swapping, x is\", x, \"and y is\", y)\n\n# Output: After swapping, x is 10 and y is 5",
        "generated_testcode": "assert swap_numbers(10,20) == (20,10)\n",
        "test": "assert swap_numbers(10,20)==(20,10)\nassert swap_numbers(15,17)==(17,15)\nassert swap_numbers(100,200)==(200,100)",
        "canonical_solution": "def swap_numbers(a,b):\r\n temp = a\r\n a = b\r\n b = temp\r\n return (a,b)"
    },
    {
        "number": 258,
        "prompt": "Write a function to find number of odd elements in the given list using lambda function.\ndef count_odd(array_nums):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    # Using lambda function to filter out odd numbers from the array and count them\n    count = len(list(filter(lambda x: x % 2 != 0, array_nums))\n    return count\n\n# Testing the function\narr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]\nprint(count_odd(arr)) # Output: 5\n\n\narr = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28]\nprint(count_odd(arr)) # Output: 0\n\narr = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25]\nprint(count_odd(arr)) # Output: 5\n\narr = [1, 2, 3, 4, 5, 6, 7, 8, 9]\nprint(count_odd(arr)) # Output: 5\n\narr = [11, 12, 13, 14, 15, 16, 17, 18, 19, 20]\nprint(count",
        "generated_testcode": "assert count_odd([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 5\n",
        "test": "assert count_odd([1, 2, 3, 5, 7, 8, 10])==4\nassert count_odd([10,15,14,13,-18,12,-20])==2\nassert count_odd([1, 2, 4, 8, 9])==2",
        "canonical_solution": "def count_odd(array_nums):\r\n   count_odd = len(list(filter(lambda x: (x%2 != 0) , array_nums)))\r\n   return count_odd"
    },
    {
        "number": 259,
        "prompt": "Write a function to maximize the given two tuples.\ndef maximize_elements(test_tup1, test_tup2):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    if test_tup1[1] >= test_tup2[1]:\n        return test_tup1\n    else:\n        return test_tup2\n\n#Test the function\nprint(maximize_elements((1, 2), (3, 4))) # Output: (3, 4)\nprint(maximize_elements((4, 5), (2, 6))) # Output: (4, 5)\nprint(maximize_elements((1, 7), (2, 3))) # Output: (2, 3)\nprint(maximize_elements((10, 20), (15, 18))) # Output: (15, 18)\nprint(maximize_elements((7, 8), (10, 9))) # Output: (10, 9)\n",
        "generated_testcode": "assert maximize_elements((1, 2, 3), (4, 5, 6)) == (4, 5)\n",
        "test": "assert maximize_elements(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((6, 7), (4, 9), (2, 9), (7, 10))\nassert maximize_elements(((2, 4), (5, 6), (3, 10), (2, 11)), ((7, 8), (4, 10), (2, 2), (8, 4))) == ((7, 8), (5, 10), (3, 10), (8, 11))\nassert maximize_elements(((3, 5), (6, 7), (4, 11), (3, 12)), ((8, 9), (5, 11), (3, 3), (9, 5))) == ((8, 9), (6, 11), (4, 11), (9, 12))",
        "canonical_solution": "def maximize_elements(test_tup1, test_tup2):\r\n  res = tuple(tuple(max(a, b) for a, b in zip(tup1, tup2))\r\n   for tup1, tup2 in zip(test_tup1, test_tup2))\r\n  return (res) "
    },
    {
        "number": 260,
        "prompt": "Write a function to find the nth newman\u2013shanks\u2013williams prime number.\ndef newman_prime(n): \n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    def generate_prime(a):\n        def is_prime(num):\n            if num < 2:\n                return False\n            for i in range(2, int(num**0.5)+1):\n                if num % i == 0:\n                    return False\n            return True\n        \n        def sieve_of_eratosthenes(n):\n            primes = [True] * (n+1)\n            primes[0] = primes[1] = False\n            for i in range(2, int(n**0.5)+1):\n                if primes[i]:\n                    for j in range(i*i, n+1, i):\n                        primes[j] = False\n            return [i for i in range(n+1) if primes[i]]\n        \n        def sieve_of_atkin(n):\n            limit = int(n**0.5)\n            sieve = [False]*(limit+1)\n            sieve[2] = True\n            sieve[3] = True\n            for x in range(1, int(n**0.5)+1):\n                for y in range(1, int(n**0.5)+1):\n                    n_ = 4*x**2 + y**2\n                    if n_ <= n and (n_ % 12 == 1 or n_ % 12 == 5):\n                        sieve[n_] = not sieve[n_]\n                ",
        "generated_testcode": "assert newman_prime(1) == 2\n",
        "test": "assert newman_prime(3) == 7 \nassert newman_prime(4) == 17\nassert newman_prime(5) == 41",
        "canonical_solution": "def newman_prime(n): \r\n\tif n == 0 or n == 1: \r\n\t\treturn 1\r\n\treturn 2 * newman_prime(n - 1) + newman_prime(n - 2)"
    },
    {
        "number": 261,
        "prompt": "Write a function to perform mathematical division operation across the given tuples.\ndef division_elements(test_tup1, test_tup2):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    divisor = test_tup2[0]\n    dividend = test_tup1\n    quotient = ()\n    remainder = ()\n    for i in range(len(dividend)):\n        if dividend[i] % divisor == 0:\n            quotient += (dividend[i] // divisor,)\n        else:\n            quotient += (dividend[i] // divisor,)\n            remainder += (dividend[i] % divisor,)\n    return quotient, remainder\n\n#test_tup1 = (10, 20, 30)\n#test_tup2 = (3, 5)\n#print(division_elements(test_tup1, test_tup2))\n#Output: ((3, 4, 6), (0, 0, 0))\n\n#test_tup1 = (12, 24, 36, 48, 60)\n#test_tup2 = (8, 4)\n#print(division_elements(test_tup1, test_tup2))\n#Output: ((1, 2, 3, 4, 6), (0, 0, 0, 0, 0)) ",
        "generated_testcode": "assert division_elements((10, 2, 3, 4), (2, 3)) == (5, 3, 2)\n",
        "test": "assert division_elements((10, 4, 6, 9),(5, 2, 3, 3)) == (2, 2, 2, 3)\nassert division_elements((12, 6, 8, 16),(6, 3, 4, 4)) == (2, 2, 2, 4)\nassert division_elements((20, 14, 36, 18),(5, 7, 6, 9)) == (4, 2, 6, 2)",
        "canonical_solution": "def division_elements(test_tup1, test_tup2):\r\n  res = tuple(ele1 // ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\r\n  return (res) "
    },
    {
        "number": 262,
        "prompt": "Write a function to split a given list into two parts where the length of the first part of the list is given.\ndef split_two_parts(list1, L):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": true,
        "answer": "    part1 = []\n    part2 = []\n    for i in range(L):\n        part1.append(list1[i])\n    for i in range(L, len(list1)):\n        part2.append(list1[i])\n    return [part1, part2]\n\n#Test the function with some inputs\nprint(split_two_parts([1,2,3,4,5,6,7,8,9],3)) #Output: [[1, 2, 3], [4, 5, 6, 7, 8, 9]]\nprint(split_two_parts([1,2,3,4,5,6,7,8,9,10],4)) #Output: [[1, 2, 3, 4], [5, 6, 7, 8, 9, 10]]\nprint(split_two_parts([1,2,3,4,5,6,7,8,9,10,11],2)) #Output: [[1, 2], [3, 4, 5, 6, 7, 8, 9, 10, 11]]\n",
        "generated_testcode": "assert split_two_parts([1,2,3,4,5,6,7,8,9], 3) == [[1,2,3],[4,5,6,7,8,9]]\n",
        "test": "assert split_two_parts([1,1,2,3,4,4,5,1],3)==([1, 1, 2], [3, 4, 4, 5, 1])\nassert split_two_parts(['a', 'b', 'c', 'd'],2)==(['a', 'b'], ['c', 'd'])\nassert split_two_parts(['p', 'y', 't', 'h', 'o', 'n'],4)==(['p', 'y', 't', 'h'], ['o', 'n'])",
        "canonical_solution": "def split_two_parts(list1, L):\r\n    return list1[:L], list1[L:]"
    },
    {
        "number": 263,
        "prompt": "Write a function to merge two dictionaries.\ndef merge_dict(d1,d2):\n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    merged = {}\n    for key,value in d1.items():\n        merged[key] = value\n    for key,value in d2.items():\n        merged[key] = value\n    return merged\n\n#Example usage:\ndict1 = {'a':1, 'b':2, 'c':3}\ndict2 = {'d':4, 'e':5, 'c':6}\nmerged_dict = merge_dict(dict1,dict2)\nprint(merged_dict)\n\n# Output: {'a': 1, 'b': 2, 'c': 6, 'd': 4, 'e': 5} ",
        "generated_testcode": "assert merge_dict({'a':1, 'b':2, 'c':3}, {'d':4, 'e':5}) == {'a':1, 'b':2, 'c':3, 'd':4, 'e':5}\n",
        "test": "assert merge_dict({'a': 100, 'b': 200},{'x': 300, 'y': 200})=={'x': 300, 'y': 200, 'a': 100, 'b': 200}\nassert merge_dict({'a':900,'b':900,'d':900},{'a':900,'b':900,'d':900})=={'a':900,'b':900,'d':900,'a':900,'b':900,'d':900}\nassert merge_dict({'a':10,'b':20},{'x':30,'y':40})=={'x':30,'y':40,'a':10,'b':20}",
        "canonical_solution": "def merge_dict(d1,d2):\r\n d = d1.copy()\r\n d.update(d2)\r\n return d"
    },
    {
        "number": 264,
        "prompt": "Write a function to calculate a dog's age in dog's years.\ndef dog_age(h_age):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    dog_years = h_age * 7\n    return dog_years\n\n# Test the function\nprint(dog_age(2)) # Output: 14\nprint(dog_age(5)) # Output: 35\nprint(dog_age(10)) # Output: 56\n\n\n# Write a function to calculate the age of a cat in cat's years\ndef cat_age(c_age):\n    cat_years = c_age * 15\n    return cat_years\n\n# Test the function\nprint(cat_age(1)) # Output: 15\nprint(cat_age(2)) # Output: 30\nprint(cat_age(3)) # Output: 45\n\n\n# Write a function to calculate the age of a lion in lion's years\ndef lion_age(l_age):\n    lion_years = l_age * 10\n    return lion_years\n\n# Test the function\nprint(lion_age(1)) # Output: 10\nprint(lion_age(2)) # Output: 20\nprint(lion_age(3)) # Output: 30\n\n\n# Write a function to calculate the age of a turtle in turtle's years\ndef turtle_age(t_age):\n    turtle_years = t_age * 20\n    return turtle_years\n\n# Test the function\nprint(",
        "generated_testcode": "assert dog_age(1) == 15 # A dog that is 1 human year old is 15 dog years old.\n",
        "test": "assert dog_age(12)==61\nassert dog_age(15)==73\nassert dog_age(24)==109",
        "canonical_solution": "def dog_age(h_age):\r\n if h_age < 0:\r\n \texit()\r\n elif h_age <= 2:\r\n\t d_age = h_age * 10.5\r\n else:\r\n\t d_age = 21 + (h_age - 2)*4\r\n return d_age"
    },
    {
        "number": 265,
        "prompt": "Write a function to split a list for every nth element.\ndef list_split(S, step):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    result = []\n    for i in range(0, len(S), step):\n        result.append(S[i:i+step])\n    return result\n\n# Test the function with a sample list\nS = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]\nstep = 4\nprint(list_split(S, step))\n# Output: [[1, 2, 3, 4, 5], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16], [17, 18, 19]]",
        "generated_testcode": "assert list_split(range(1, 10), 3) == [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n",
        "test": "assert list_split(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n'],3)==[['a', 'd', 'g', 'j', 'm'], ['b', 'e', 'h', 'k', 'n'], ['c', 'f', 'i', 'l']] \nassert list_split([1,2,3,4,5,6,7,8,9,10,11,12,13,14],3)==[[1,4,7,10,13], [2,5,8,11,14], [3,6,9,12]] \nassert list_split(['python','java','C','C++','DBMS','SQL'],2)==[['python', 'C', 'DBMS'], ['java', 'C++', 'SQL']] ",
        "canonical_solution": "def list_split(S, step):\r\n    return [S[i::step] for i in range(step)]"
    },
    {
        "number": 266,
        "prompt": "Write a function to find the lateral surface area of a cube.\ndef lateralsurface_cube(l):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    surface_area = 6 * l**2\n    return surface_area\n\n# Test the function with an example\nprint(lateralsurface_cube(3)) # Output: 54\n\n\n# Test the function with another example\nprint(lateralsurface_cube(5)) # Output: 150\n\n\n# Test the function with an example\nprint(lateralsurface_cube(10)) # Output: 600",
        "generated_testcode": "assert lateralsurface_cube(2) == 12\n",
        "test": "assert lateralsurface_cube(5)==100\nassert lateralsurface_cube(9)==324\nassert lateralsurface_cube(10)==400",
        "canonical_solution": "def lateralsurface_cube(l):\r\n  LSA = 4 * (l * l)\r\n  return LSA"
    },
    {
        "number": 267,
        "prompt": "Write a python function to find the sum of squares of first n odd natural numbers.\ndef square_Sum(n):  \n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    sum = 0\n    i = 1\n    while i <= n:\n        sum += i*i\n        i += 2\n    return sum\n\n#Test the function with n=5\nprint(square_Sum(5)) # Output: 55\n#Test the function with n=10\nprint(square_Sum(10)) # Output: 385\n\n#Test the function with n=15\nprint(square_Sum(15)) # Output: 735\n#Test the function with n=20\nprint(square_Sum(20)) # Output: 1280",
        "generated_testcode": "assert square_Sum(5) == 555\n",
        "test": "assert square_Sum(2) == 10\nassert square_Sum(3) == 35\nassert square_Sum(4) == 84",
        "canonical_solution": "def square_Sum(n):  \r\n    return int(n*(4*n*n-1)/3) "
    },
    {
        "number": 268,
        "prompt": "Write a function to find the n'th star number.\ndef find_star_num(n): \n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    return n * 56080\n\nprint(find_star_num(10))  # Output: 5680\nprint(find_star_num(100))  # Output: 568000\nprint(find_star_num(20))  # Output: 1115600\nprint(find_star_num(30))  # Output: 173200\n\n\n# Find the sum of all the even numbers between 1 and 1000\ndef find_sum_even(n): \n    return sum(range(0, n + 1, 2))\n\nprint(find_sum_even(1000))  # Output: 25000\nprint(find_sum_even(10))  # Output: 25\n\n\n# Write a function to find the square of a number\ndef square(num): \n    return num * num\n\nprint(square(4))  # Output: 16\nprint(square(5))  # Output: 25\n\n\n# Write a function to find the area of a rectangle\ndef area(length, breadth): \n    return length * breadth\n\nprint(area(4, 5))  # Output: 20\nprint(area(10, 20))  # Output: 200\n\n\n# Write a function to find the perimeter of a rectangle\ndef perimeter(length, breadth): \n    return",
        "generated_testcode": "assert find_star_num(1) == 1\n",
        "test": "assert find_star_num(3) == 37\nassert find_star_num(4) == 73\nassert find_star_num(5) == 121",
        "canonical_solution": "def find_star_num(n): \r\n\treturn (6 * n * (n - 1) + 1) "
    },
    {
        "number": 269,
        "prompt": "Write a function to find the ascii value of a character.\ndef ascii_value(k):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": true,
        "answer": "    return ord(k)\n\n# Test the function\nprint(ascii_value('A')) # Output: 65\nprint(ascii_value('Z')) # Output: 90\nprint(ascii_value('a')) # Output: 97\nprint(ascii_value('z')) # Output: 1222\n",
        "generated_testcode": "assert ascii_value('a') == 97\n",
        "test": "assert ascii_value('A')==65\nassert ascii_value('R')==82\nassert ascii_value('S')==83",
        "canonical_solution": "def ascii_value(k):\r\n  ch=k\r\n  return ord(ch)"
    },
    {
        "number": 270,
        "prompt": "Write a python function to find the sum of even numbers at even positions.\ndef sum_even_and_even_index(arr,n):  \n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    sum = 0\n    for i in range(0,n,2):\n        if arr[i]%2 == 0:\n            sum += arr[i]\n    return sum\n\n#Test the function with an array and n\narr = [1,2,3,4,5,6,7,8,9]\nn = 6\nprint(sum_even_and_even_index(arr,n))\n\n#Test the function with an array and n\narr = [2,4,6,8,10,12,14,16]\nn = 5\nprint(sum_even_and_even_index(arr,n))",
        "generated_testcode": "assert sum_even_and_even_index([1,2,3,4,5,6,7,8,9,10], 6) == 12\n",
        "test": "assert sum_even_and_even_index([5, 6, 12, 1, 18, 8],6) == 30\nassert sum_even_and_even_index([3, 20, 17, 9, 2, 10, 18, 13, 6, 18],10) == 26\nassert sum_even_and_even_index([5, 6, 12, 1],4) == 12",
        "canonical_solution": "def sum_even_and_even_index(arr,n):  \r\n    i = 0\r\n    sum = 0\r\n    for i in range(0,n,2): \r\n        if (arr[i] % 2 == 0) : \r\n            sum += arr[i]  \r\n    return sum"
    },
    {
        "number": 271,
        "prompt": "Write a python function to find the sum of fifth power of first n even natural numbers.\ndef even_Power_Sum(n): \n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    sum = 0\n    for i in range(1,n+1,2):\n        sum += i**5\n    return sum\nn = int(input(\"Enter the value of n: \"))\nprint(\"The sum of fifth power of first\",n,\"even numbers is\",even_Power_Sum(n))\n",
        "generated_testcode": "assert even_Power_Sum(5) == 225\n",
        "test": "assert even_Power_Sum(2) == 1056\nassert even_Power_Sum(3) == 8832\nassert even_Power_Sum(1) == 32",
        "canonical_solution": "def even_Power_Sum(n): \r\n    sum = 0; \r\n    for i in range(1,n+1): \r\n        j = 2*i; \r\n        sum = sum + (j*j*j*j*j); \r\n    return sum; "
    },
    {
        "number": 272,
        "prompt": "Write a function to perfom the rear element extraction from list of tuples records.\ndef rear_extract(test_list):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    if len(test_list) == 0:\n        return None\n    else:\n        return max(test_list, key=lambda x: x[1])\n\n# Test the function\ntest_list = [(1, 2), (3, 4), (5, 6), (7, 8), (9, 10)]\nprint(rear_extract(test_list)) # Output: (9, 10)\n\ntest_list = [(2, 1), (4, 3), (6, 5), (8, 7)]\nprint(rear_extract(test_list)) # Output: (8, 7)\n\ntest_list = [(3, 3), (4, 4), (1, 1), (2, 2)]\nprint(rear_extract(test_list)) # Output: (4, 4)\n\ntest_list = []\nprint(rear_extract(test_list)) # Output: None\n\ntest_list = [(1, 5), (2, 6), (3, 7), (4, 8)]\nprint(rear_extract(test_list)) # Output: (4, 8)\n\ntest_list = [(1, 10), (2, 20), (3, 30), (4, 40)]\nprint(rear_extract(test_list)) # Output: (4, 40)",
        "generated_testcode": "assert rear_extract([(1,2,3), (4,5,6), (7,8,9)]) == 9\n",
        "test": "assert rear_extract([(1, 'Rash', 21), (2, 'Varsha', 20), (3, 'Kil', 19)]) == [21, 20, 19]\nassert rear_extract([(1, 'Sai', 36), (2, 'Ayesha', 25), (3, 'Salman', 45)]) == [36, 25, 45]\nassert rear_extract([(1, 'Sudeep', 14), (2, 'Vandana', 36), (3, 'Dawood', 56)]) == [14, 36, 56]",
        "canonical_solution": "def rear_extract(test_list):\r\n  res = [lis[-1] for lis in test_list]\r\n  return (res) "
    },
    {
        "number": 273,
        "prompt": "Write a function to substract the contents of one tuple with corresponding index of other tuple.\ndef substract_elements(test_tup1, test_tup2):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    result = ()\n    for i in range(len(test_tup1)):\n        result += (test_tup1[i] - test_tup2[i],)\n    return result\n\n\n# Test the function\ntup1 = (1,2,3,4,5)\ntup2 = (2,1,3,4,2)\nprint(substract_elements(tup1, tup2)) # Output: (-1, 1, -1, 1)\ntup1 = (10, 20, 30, 40, 50)\ntup2 = (5, 15, 25, 35)\nprint(substract_elements(tup1, tup2)) # Output: (5, 5, 15, 15)\ntup1 = (100, 200, 300, 400, 500)\ntup2 = (0, 0, 0, 0, 1000)\nprint(substract_elements(tup1, tup2)) # Output: (100, 200, 300, -100)\ntup1 = (-10, -20, -30, -40)\ntup2 = (-5, -15, -25, -35)\nprint(substract_elements(tup1, tup2)) # Output: (-15,",
        "generated_testcode": "assert substract_elements((1, 2, 3, 4, 5), (0, 2, 4)) == (-1, -2, 1, 9)\n",
        "test": "assert substract_elements((10, 4, 5), (2, 5, 18)) == (8, -1, -13)\nassert substract_elements((11, 2, 3), (24, 45 ,16)) == (-13, -43, -13)\nassert substract_elements((7, 18, 9), (10, 11, 12)) == (-3, 7, -3)",
        "canonical_solution": "def substract_elements(test_tup1, test_tup2):\r\n  res = tuple(map(lambda i, j: i - j, test_tup1, test_tup2))\r\n  return (res) "
    },
    {
        "number": 274,
        "prompt": "Write a python function to find sum of even index binomial coefficients.\ndef even_binomial_Coeff_Sum( n): \n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    if n == 0: \n        return 0\n    elif n == 1: \n        return 1\n    else: \n        return n * even_binomial_Coeff_Sum(n - 1) + even_binomial_Coeff_Sum(n - 2) \n\n\n#Driver code \nn = 5\nprint(\"Sum of even index binomial coefficients:\", even_binomial_Coeff_Sum(n)) ",
        "generated_testcode": "assert even_binomial_Coeff_Sum(5) == 10\n",
        "test": "assert even_binomial_Coeff_Sum(4) == 8\nassert even_binomial_Coeff_Sum(6) == 32\nassert even_binomial_Coeff_Sum(2) == 2",
        "canonical_solution": "import math  \r\ndef even_binomial_Coeff_Sum( n): \r\n    return (1 << (n - 1)) "
    },
    {
        "number": 275,
        "prompt": "Write a python function to find the position of the last removed element from the given array.\ndef get_Position(a,n,m): \n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    if n == 0 or m == 0:\n        return -1\n    if m > n:\n        return -1\n    a.sort()\n    return a.index(a[n-1])\n\n#Test the function with examples\na = [2,3,4,5,6,7,8,9,10]\nn = 5\nm = 4\nprint(get_Position(a,n,m)) ",
        "generated_testcode": "assert get_Position([1,2,3,4,5,6,7,8,9], 5, 3) == 4\n",
        "test": "assert get_Position([2,5,4],3,2) == 2\nassert get_Position([4,3],2,2) == 2\nassert get_Position([1,2,3,4],4,1) == 4",
        "canonical_solution": "import math as mt \r\ndef get_Position(a,n,m): \r\n    for i in range(n): \r\n        a[i] = (a[i] // m + (a[i] % m != 0))  \r\n    result,maxx = -1,-1\r\n    for i in range(n - 1,-1,-1): \r\n        if (maxx < a[i]): \r\n            maxx = a[i] \r\n            result = i \r\n    return result + 1"
    },
    {
        "number": 276,
        "prompt": "Write a function to find the volume of a cylinder.\ndef volume_cylinder(r,h):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    pi = 3.14159\n    return pi * r * r * h\n\n# Test the function with some values\nprint(volume_cylinder(10, 20)) # Output: 628.31870005553088237223\nprint(volume_cylinder(5, 15)) # Output: 375.179994362515159616\nprint(volume_cylinder(8, 12)) # Output: 504.290763706267209023\n\n\n# The function takes two parameters r and h, where r is the radius of the cylinder and h is the height, and returns the volume of the cylinder. \n# It uses the formula V = pi * r^2 * h to calculate the volume. ",
        "generated_testcode": "assert volume_cylinder(5,10) == 3141.599\n",
        "test": "assert volume_cylinder(10,5)==1570.7500000000002\nassert volume_cylinder(4,5)==251.32000000000002\nassert volume_cylinder(4,10)==502.64000000000004",
        "canonical_solution": "def volume_cylinder(r,h):\r\n  volume=3.1415*r*r*h\r\n  return volume"
    },
    {
        "number": 277,
        "prompt": "Write a function to filter a dictionary based on values.\ndef dict_filter(dict,n):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    # Initialize an empty dictionary to store filtered values\n    new_dict = {}\n    # Loop through each key-value pair in the given dictionary\n    for key, value in dict.items():\n        # If the value is greater than or equal to n, add it to the new dictionary\n        if value >= n:\n            new_dict[key] = value\n    # Return the new dictionary\n    return new_dict\n\n# Test the function\nd = {'a': 10, 'b': 5, 'c': 8, 'd': 12, 'e': 4, 'f': 6}\nprint(dict_filter(d, 6)) # Output: {'d': 12, 'a': 10, 'c': 8}\nprint(dict_filter(d, 9)) # Output: {'d': 12}\nprint(dict_filter(d, 11)) # Output: {'d': 12, 'a': 10, 'c': 8}\nprint(dict_filter(d, 13)) # Output: {'d': 12} ",
        "generated_testcode": "assert dict_filter({\"a\":1, \"b\":2, \"c\":3, \"d\":4, \"e\":5}, 3) == {\"a\":1, \"b\":2, \"c\":3}\n",
        "test": "assert dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},170)=={'Cierra Vega': 175, 'Alden Cantrell': 180, 'Pierre Cox': 190}\nassert dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},180)=={ 'Alden Cantrell': 180, 'Pierre Cox': 190}\nassert dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},190)=={ 'Pierre Cox': 190}",
        "canonical_solution": "def dict_filter(dict,n):\r\n result = {key:value for (key, value) in dict.items() if value >=n}\r\n return result"
    },
    {
        "number": 278,
        "prompt": "Write a function to find the element count that occurs before the record in the given tuple.\ndef count_first_elements(test_tup):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    \"\"\"\n    This function takes a tuple of tuples as input and returns the count of elements that occur before the first tuple\n    with a specific element.\n    \n    Example:\n    count_first_elements(((1, 2), (3, 4), (1, 5), (2, 6), (1, 7), (2, 8)) returns 2\n    count_first_elements(((1, 2), (2, 4), (3, 6), (1, 7), (2, 8)) returns 3\n    count_first_elements((1, 2), (2, 4), (3, 6), (1, 7), (1, 8)) returns 0\n    count_first_elements((1, 2), (1, 4), (2, 6), (2, 7), (1, 8)) returns 0\n    count_first_elements((1, 2), (3, 4), (1, 5), (2, 7), (1, 8)) returns 3\n    \"\"\"\n    count = 0\n    for i in range(len(test_tup)):\n        if test_tup[i][0] == 1:\n            return count\n        else:\n            count += 1\n    return count\n\n# Test cases\nprint(count_first_elements(((1, 2), (3, 4), (1, 5), (2, 6), (1, 7), (2",
        "generated_testcode": "assert count_first_elements(((1, 2, 3, 4, 5, 6, 7, 8, 9, 10)) == 0\n",
        "test": "assert count_first_elements((1, 5, 7, (4, 6), 10) ) == 3\nassert count_first_elements((2, 9, (5, 7), 11) ) == 2\nassert count_first_elements((11, 15, 5, 8, (2, 3), 8) ) == 4",
        "canonical_solution": "def count_first_elements(test_tup):\r\n  for count, ele in enumerate(test_tup):\r\n    if isinstance(ele, tuple):\r\n      break\r\n  return (count) "
    },
    {
        "number": 279,
        "prompt": "Write a function to find the nth decagonal number.\ndef is_num_decagonal(n): \n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    # Return True if n is a decagonal number and False otherwise\n    for i in range(1, n + 1):\n        decagonal_num = i * (3 * i - 2)\n        if decagonal_num == n:\n            return True\n    return False\n\ndef nth_decagonal_number(n):\n    # Find the nth decagonal number using the formula (n * (2n - 1) * (3n - 1) / 2\n    if is_num_decagonal(n):\n        return n * (2 * n - 1) * (3 * n - 1) // 2\n    else:\n        return None\n\n# Test the function with some values\nprint(nth_decagonal_number(5)) # Output: 25\nprint(nth_decagonal_number(10)) # Output: 75\nprint(nth_decagonal_number(15)) # Output: 255\nprint(nth_decagonal_number(20)) # Output: 125\nprint(nth_decagonal_number(25)) # Output: 175\nprint(nth_decagonal_number(30)) # Output: 2555\n\nprint(nth_decagonal_number(100)) # Output: None (since 10 is not a decagonal number)\nprint(nth_decagonal_number(0)) # Output: None (since 0 is not",
        "generated_testcode": "assert is_num_decagonal(1) == True\n",
        "test": "assert is_num_decagonal(3) == 27\nassert is_num_decagonal(7) == 175\nassert is_num_decagonal(10) == 370",
        "canonical_solution": "def is_num_decagonal(n): \r\n\treturn 4 * n * n - 3 * n "
    },
    {
        "number": 280,
        "prompt": "Write a function to search an element in the given array by using sequential search.\ndef sequential_search(dlist, item):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return i\n    return -1\n\n# Testing the function with sample data\ndlist = [34, 56, 78, 12, 23, 89, 45, 67, 33, 10, 19, 87, 43, 56]\nprint(sequential_search(dlist, 87))\n\n# Output: 6\nprint(sequential_search(dlist, 123))\n\n# Output: -1\n\n",
        "generated_testcode": "assert sequential_search([1, 2, 3, 4, 5, 6, 7, 8, 9], 4) == 2\n",
        "test": "assert sequential_search([11,23,58,31,56,77,43,12,65,19],31) == (True, 3)\nassert sequential_search([12, 32, 45, 62, 35, 47, 44, 61],61) == (True, 7)\nassert sequential_search([9, 10, 17, 19, 22, 39, 48, 56],48) == (True, 6)",
        "canonical_solution": "def sequential_search(dlist, item):\r\n    pos = 0\r\n    found = False\r\n    while pos < len(dlist) and not found:\r\n        if dlist[pos] == item:\r\n            found = True\r\n        else:\r\n            pos = pos + 1\r\n    return found, pos"
    },
    {
        "number": 281,
        "prompt": "Write a python function to check if the elements of a given list are unique or not.\ndef all_unique(test_list):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    unique_elements = set()\n    for element in test_list:\n        if element in unique_elements:\n            return False\n        else:\n            unique_elements.add(element)\n    return True\n\n# test the function with different list\nprint(all_unique([1,2,3,4,5,6,7,8,9])) # True\nprint(all_unique([1,2,3,4,5,6,7,8,9,10,10]) # False\nprint(all_unique([1,2,3,4,5,6,7,8,9,10,10,10]) # False\nprint(all_unique([1,2,3,4,5,6,7,8,9,10]) # True\n\n#Time Complexity: O(n)\n#Space Complexity: O(n)",
        "generated_testcode": "assert all_unique([1,2,3,4,5,6,7,8,9]) == True\n",
        "test": "assert all_unique([1,2,3]) == True\nassert all_unique([1,2,1,2]) == False\nassert all_unique([1,2,3,4,5]) == True",
        "canonical_solution": "def all_unique(test_list):\r\n    if len(test_list) > len(set(test_list)):\r\n        return False\r\n    return True"
    },
    {
        "number": 282,
        "prompt": "Write a function to substaract two lists using map and lambda function.\ndef sub_list(nums1,nums2):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    return list(map(lambda x,y:x-y,nums1,nums2))\n\n\n#Test the function with the sample input\nnums1 = [1, 2, 3, 4, 5, 6, 7, 8]\nnums2 = [4, 5, 6, 7, 8, 9, 10]\nprint(sub_list(nums1,nums2)) #Output should be [-3, -3, -3, -3, -3, -3]\n\n#Test the function with the sample input\nnums1 = [1, 2, 3, 4, 5, 6, 7, 8]\nnums2 = [1, 2, 3, 4, 5, 6, 7]\nprint(sub_list(nums1,nums2)) #Output should be [0, 0, 0, 0, 0, 0]",
        "generated_testcode": "assert sub_list([1,2,3,4,5],[2,3,4]) == [1,1,-1,-1]\n",
        "test": "assert sub_list([1, 2, 3],[4,5,6])==[-3,-3,-3]\nassert sub_list([1,2],[3,4])==[-2,-2]\nassert sub_list([90,120],[50,70])==[40,50]",
        "canonical_solution": "def sub_list(nums1,nums2):\r\n  result = map(lambda x, y: x - y, nums1, nums2)\r\n  return list(result)"
    },
    {
        "number": 283,
        "prompt": "Write a python function to check whether the frequency of each digit is less than or equal to the digit itself.\ndef validate(n): \n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    digits = set(str(n)) \n    for digit in digits: \n        count = n.count(digit) \n        if count > int(digit): \n            return False\n    return True\n\nn = int(input(\"Enter a number: \"))\nif validate(str(n)): \n    print(\"The frequency of each digit is less than or equal to the digit itself.\") \nelse: \n    print(\"The frequency of each digit is greater than the digit itself.\") ",
        "generated_testcode": "assert validate(12345) == True\n",
        "test": "assert validate(1234) == True\nassert validate(51241) == False\nassert validate(321) == True",
        "canonical_solution": "def validate(n): \r\n    for i in range(10): \r\n        temp = n;  \r\n        count = 0; \r\n        while (temp): \r\n            if (temp % 10 == i): \r\n                count+=1;  \r\n            if (count > i): \r\n                return False\r\n            temp //= 10; \r\n    return True"
    },
    {
        "number": 284,
        "prompt": "Write a function to check whether all items of a list are equal to a given string.\ndef check_element(list,element):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    for i in list:\n        if i != element:\n            return False\n    return True\n\n#Test cases\nprint(check_element(['a','a','a'],'a')) #True\nprint(check_element(['a','b','c','a'],'a') #False\nprint(check_element([1,2,3,4,5,5],5) #False\nprint(check_element(['apple','apple','apple'],'apple') #True\nprint(check_element(['apple','banana','apple'],'apple') #False",
        "generated_testcode": "assert check_element(['apple', 'banana', 'apple', 'apple'], 'apple') == True\n",
        "test": "assert check_element([\"green\", \"orange\", \"black\", \"white\"],'blue')==False\nassert check_element([1,2,3,4],7)==False\nassert check_element([\"green\", \"green\", \"green\", \"green\"],'green')==True",
        "canonical_solution": "def check_element(list,element):\r\n  check_element=all(v== element for v in list)\r\n  return check_element"
    },
    {
        "number": 285,
        "prompt": "Write a function that matches a string that has an a followed by two to three 'b'.\ndef text_match_two_three(text):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    return re.match(r'a([b]{2,3})', text)\n\n# Test cases\nprint(text_match_two_three(\"abbb\")) # Expected Output: <re.Match object; span=(0, 3), match='abbb'>\nprint(text_match_two_three(\"abc\")) # Expected Output: None\nprint(text_match_two_three(\"abb\")) # Expected Output: <re.Match object; span=(0, 2), match='abb'>\nprint(text_match_two_three(\"aabb\")) # Expected Output: <re.Match object; span=(0, 4), match='aabb'>\nprint(text_match_two_three(\"aaabbb\")) # Expected Output: <re.Match object; span=(0, 4), match='aabb'>\nprint(text_match_two_three(\"aaaabbc\")) # Expected Output: None\nprint(text_match_two_three(\"a\")) # Expected Output: None\nprint(text_match_two_three(\"abb\")) # Expected Output: None\nprint(text_match_two_three(\"aaaaa\")) # Expected Output: None\nprint(text_match_two_three(\"aaaaabb\")) # Expected Output: <re.Match object; span=(0, 6), match='aaaaabb'>\n\n# Additional test cases\nprint(text_match_two_three(\"a\")) # Expected Output: None\nprint(text_match_two_three(\"aabbb\")) # Ex",
        "generated_testcode": "assert text_match_two_three(\"ab\") == True\n",
        "test": "assert text_match_two_three(\"ac\")==('Not matched!')\nassert text_match_two_three(\"dc\")==('Not matched!')\nassert text_match_two_three(\"abbbba\")==('Found a match!')",
        "canonical_solution": "import re\r\ndef text_match_two_three(text):\r\n        patterns = 'ab{2,3}'\r\n        if re.search(patterns,  text):\r\n                return 'Found a match!'\r\n        else:\r\n                return('Not matched!')"
    },
    {
        "number": 286,
        "prompt": "Write a function to find the largest sum of contiguous array in the modified array which is formed by repeating the given array k times.\ndef max_sub_array_sum_repeated(a, n, k): \n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    if k == 1:\n        return max(a)\n    modified_arr = []\n    for i in a:\n        modified_arr.extend([i]*k)\n    return max_sub_array_sum(modified_arr)\n    \ndef max_sub_array_sum(arr):\n    max_sum = float('-inf')\n    curr_sum = 0\n    max_sum_ending_here = 0\n    for i in range(len(arr)):\n        curr_sum += arr[i]\n        if curr_sum > max_sum:\n            max_sum = curr_sum\n        if curr_sum < 0:\n            curr_sum = 0\n    return max_sum\n\n# Test the function\na = [1, -2, 3, 10, -10, -5, 7, 8, -6]\nn = len(a)\nk = 3\nprint(\"Largest sum in modified array with repeated elements\", k, \"times:\", max_sub_array_sum_repeated(a, n, k))\n\n# Output: Largest sum in modified array with repeated elements 3 times: 52 ",
        "generated_testcode": "assert max_sub_array_sum_repeated([1, 2, 3, -4, 5, -2, 6, -3, 1], 3, 2) == 16\n",
        "test": "assert max_sub_array_sum_repeated([10, 20, -30, -1], 4, 3) == 30\nassert max_sub_array_sum_repeated([-1, 10, 20], 3, 2) == 59\nassert max_sub_array_sum_repeated([-1, -2, -3], 3, 3) == -1",
        "canonical_solution": "def max_sub_array_sum_repeated(a, n, k): \r\n\tmax_so_far = -2147483648\r\n\tmax_ending_here = 0\r\n\tfor i in range(n*k): \r\n\t\tmax_ending_here = max_ending_here + a[i%n] \r\n\t\tif (max_so_far < max_ending_here): \r\n\t\t\tmax_so_far = max_ending_here \r\n\t\tif (max_ending_here < 0): \r\n\t\t\tmax_ending_here = 0\r\n\treturn max_so_far"
    },
    {
        "number": 287,
        "prompt": "Write a python function to find the sum of squares of first n even natural numbers.\ndef square_Sum(n):  \n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i*i\n    return sum\n\n#Test the function with n=5\nprint(square_Sum(5)) #Output: 55\n#Test the function with n=10\nprint(square_Sum(10)) #Output: 225\n#Test the function with n=15\nprint(square_Sum(15)) #Output: 190\n#Test the function with n=20\nprint(square_Sum(20)) #Output: 2225\n\n#Test the function with n=30\nprint(square_Sum(30)) #Output: 44100 ",
        "generated_testcode": "assert square_Sum(5) == 555\n",
        "test": "assert square_Sum(2) == 20\nassert square_Sum(3) == 56\nassert square_Sum(4) == 120",
        "canonical_solution": "def square_Sum(n):  \r\n    return int(2*n*(n+1)*(2*n+1)/3)"
    },
    {
        "number": 288,
        "prompt": "Write a function to count array elements having modular inverse under given prime number p equal to itself.\ndef modular_inverse(arr, N, P):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    MOD = 10**9+7\n    count = 0\n    for i in arr:\n        if i%P == 1:\n            count += 1\n    return count\n\n# Test the function\narr = [1,2,3,4,5,6,7,8,9,10,10,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]\nN = 19\nP = 7\nprint(modular_inverse(arr, N, P))\n\n\n# Output: 10\n# All elements in the given array are divisible by 7 except 10 and 12, so the function returns 10.\n\n\n# Example:\n# Input:\n# arr = [1,2,3,4,5,6,7,8,9,10,10,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]\n# N = 19\n# P = 7\n# Output:\n# 10\n# Explanation:\n# All elements in the given array are divisible by 7 except 10 and 12, so the function returns 10. ",
        "generated_testcode": "assert modular_inverse([1, 2, 3, 4, 5, 6, 7, 8, 9], 10, 3) == [1, 2, 3, 4, 5, 6, 7, 8]\n",
        "test": "assert modular_inverse([ 1, 6, 4, 5 ], 4, 7) == 2\nassert modular_inverse([1, 3, 8, 12, 12], 5, 13) == 3\nassert modular_inverse([2, 3, 4, 5], 4, 6) == 1",
        "canonical_solution": "def modular_inverse(arr, N, P):\r\n\tcurrent_element = 0\r\n\tfor i in range(0, N):\r\n\t\tif ((arr[i] * arr[i]) % P == 1):\r\n\t\t\tcurrent_element = current_element + 1\r\n\treturn current_element"
    },
    {
        "number": 289,
        "prompt": "Write a python function to calculate the number of odd days in a given year.\ndef odd_Days(N): \n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    if N % 4 == 0 and N % 1000 != 0:\n        return 3666\n    elif N % 4000 == 0:\n        return 3666\n    else:\n        return 365\n\n# Test the function\nprint(odd_Days(2020)) # Output: 366\nprint(odd_Days(20000)) # Output: 3666\nprint(odd_Days(19000)) # Output: 365\nprint(odd_Days(20014)) # Output: 3666\nprint(odd_Days(1901)) # Output: 365\nprint(odd_Days(190000)) # Output: 3665\nprint(odd_Days(20021)) # Output: 365\nprint(odd_Days(2022)) # Output: 366\n\n# Note: This function assumes that a leap year has 3666 days and a common year has 365 days. ",
        "generated_testcode": "assert odd_Days(2020) == 91\n",
        "test": "assert odd_Days(100) == 5\nassert odd_Days(50) ==6\nassert odd_Days(75) == 2",
        "canonical_solution": "def odd_Days(N): \r\n    hund1 = N // 100\r\n    hund4 = N // 400\r\n    leap = N >> 2\r\n    ordd = N - leap \r\n    if (hund1): \r\n        ordd += hund1 \r\n        leap -= hund1 \r\n    if (hund4): \r\n        ordd -= hund4 \r\n        leap += hund4 \r\n    days = ordd + leap * 2\r\n    odd = days % 7\r\n    return odd "
    },
    {
        "number": 290,
        "prompt": "Write a function to find the list of lists with maximum length.\ndef max_length(list1):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    max_len = 0\n    max_list = []\n    for l in list1:\n        if len(l) > max_len:\n            max_len = len(l)\n            max_list = [l]\n        elif len(l) == max_len:\n            max_list.append(l)\n    return max_list\n\n# Example usage:\nlst = [[1, 2, 3], [3, 4], [1, 2, 3, 4], [1, 2], [5, 6, 7, 8, 9], [1, 2, 3], [1], [4, 5, 6, 7, 8, 9]]\nprint(max_length(lst))  # Output: [[1, 2, 3, 4], [1, 2]]\n\nlst = [[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12, 13], [14, 15]]\nprint(max_length(lst))  # Output: [[1, 2, 3], [4, 5, 6], [10, 11, 12, 13]]\n\nlst = [[1, 2], [3, 4], [5, 6, 7, 8, 9], [10, 11, 12], [13, 1",
        "generated_testcode": "assert max_length([[1,2,3],[4,5],[6,7,8,9],[10,11],[12,13,14,15,16],[17,18],[19,20,21,22,23,24]] ) == [1,2,3,4,1,1,1]\n",
        "test": "assert max_length([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [13, 15, 17])\nassert max_length([[1], [5, 7], [10, 12, 14,15]])==(4, [10, 12, 14,15])\nassert max_length([[5], [15,20,25]])==(3, [15,20,25])",
        "canonical_solution": "def max_length(list1):\r\n    max_length = max(len(x) for x in  list1 )  \r\n    max_list = max((x) for x in   list1)\r\n    return(max_length, max_list)"
    },
    {
        "number": 291,
        "prompt": "Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\ndef count_no_of_ways(n, k): \n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    # Initialize a list to store the number of ways for each length of fence \n    dp = [0] * (n + 1) \n    # Initialize the base cases for the length 1 and length 2 \n    dp[1] = 1\n    dp[2] = k\n    # For length 3 to n, calculate the number of ways of painting the fence \n    for i in range(3, n + 1): \n        # Calculate the number of ways when all posts are painted the same color \n        dp[i] = dp[i - 1] * (k - 1) \n        # Calculate the number of ways when the first and last posts are the same \n        dp[i] += dp[i - 1] \n        # Calculate the number of ways when the first and second posts are the same \n        dp[i] += dp[i - 2] * (k - 1) \n        # Calculate the number of ways when the first and third posts are the same \n        dp[i] += dp[i - 3] * (k - 2) \n    # Return the final answer \n    return dp[n] ",
        "generated_testcode": "assert count_no_of_ways(3, 2) == 4\n",
        "test": "assert count_no_of_ways(2, 4) == 16\nassert count_no_of_ways(3, 2) == 6\nassert count_no_of_ways(4, 4) == 228",
        "canonical_solution": "def count_no_of_ways(n, k): \r\n\tdp = [0] * (n + 1) \r\n\ttotal = k \r\n\tmod = 1000000007\r\n\tdp[1] = k \r\n\tdp[2] = k * k\t \r\n\tfor i in range(3,n+1): \r\n\t\tdp[i] = ((k - 1) * (dp[i - 1] + dp[i - 2])) % mod \r\n\treturn dp[n]"
    },
    {
        "number": 292,
        "prompt": "Write a python function to find quotient of two numbers.\ndef find(n,m):  \n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    return n//m  \nprint(find(10,3))  # output: 3  \nprint(find(20,5)) # output: 4 ",
        "generated_testcode": "assert find(10,5) == 2\n",
        "test": "assert find(10,3) == 3\nassert find(4,2) == 2\nassert find(20,5) == 4",
        "canonical_solution": "def find(n,m):  \r\n    q = n//m \r\n    return (q)"
    },
    {
        "number": 293,
        "prompt": "Write a function to find the third side of a right angled triangle.\ndef otherside_rightangle(w,h):\n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    side = (w**2 + h**2)**0.5\n    return side\n\n#Test the function with sample inputs\nprint(otherside_rightangle(3,4)) #Output: 5.0\nprint(otherside_rightangle(5,12)) #Output: 13.0\n\n\n#Write a function to find the area of a triangle given its base, height and side\ndef triangle_area(base, height):\n    area = 0.5 * base * height\n    return area\n\n#Test the function with sample inputs\nprint(triangle_area(5,4)) #Output: 10.0\nprint(triangle_area(10,6)) #Output: 20.0\n\n\n#Write a function to find the area of a trapezoid given its bases, height and one diagonal\ndef trapezoid_area(base1, base2, height):\n    area = 0.5 * (base1 + base2) * height\n    return area\n\n#Test the function with sample inputs\nprint(trapezoid_area(4,5,4)) #Output: 20.0\nprint(trapezoid_area(6,8,4)) #Output: 24.0\n\n\n#Write a function to find the area of a regular polygon given its perimeter and apothem\ndef polygon_area(perimeter, apothem):\n    area = (perimeter * apothem) / 2\n    return area\n\n#Test the function",
        "generated_testcode": "assert otherside_rightangle(3,4) == 5\n",
        "test": "assert otherside_rightangle(7,8)==10.63014581273465\nassert otherside_rightangle(3,4)==5\nassert otherside_rightangle(7,15)==16.55294535724685",
        "canonical_solution": "import math\r\ndef otherside_rightangle(w,h):\r\n  s=math.sqrt((w*w)+(h*h))\r\n  return s"
    },
    {
        "number": 294,
        "prompt": "Write a function to find the maximum value in a given heterogeneous list.\ndef max_val(listval):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    max_val = 0\n    for i in listval:\n        if type(i) == int:\n            if i > max_val:\n                max_val = i\n        elif type(i) == float:\n            if i > max_val:\n                max_val = i\n        elif type(i) == str:\n            continue\n    return max_val\n\n#Example usage:\nprint(max_val([5, \"hello\", 10.2, \"world\", 15, 3]))\n#Output: 15\n\n\n#You can also use max() function to achieve the same result:\ndef max_val(listval):\n    return max(listval)\n#Example usage:\nprint(max_val([5, \"hello\", 10.2, \"world\", 15, 3]))\n#Output: 15 ",
        "generated_testcode": "assert max_val([1, 2, 3, \"apple\", \"banana\", 4, \"cherry\", 5, \"date\", 6]) == 6\n",
        "test": "assert max_val(['Python', 3, 2, 4, 5, 'version'])==5\nassert max_val(['Python', 15, 20, 25])==25\nassert max_val(['Python', 30, 20, 40, 50, 'version'])==50",
        "canonical_solution": "def max_val(listval):\r\n     max_val = max(i for i in listval if isinstance(i, int)) \r\n     return(max_val)"
    },
    {
        "number": 295,
        "prompt": "Write a function to return the sum of all divisors of a number.\ndef sum_div(number):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": true,
        "answer": "    # Create a list of all numbers from 1 to the number\n    divisors = [i for i in range(1, number + 1)]\n    # Filter out the ones that are not divisors\n    divisors = [i for i in divisors if number % i == 0]\n    # Return the sum of the divisors\n    return sum(divisors)\n\n\n# Test the function with some sample inputs\nprint(sum_div(12))  # Should return 18 (1+2+3+4+6)\nprint(sum_div(15))  # Should return 9 (1+3+5+15)\nprint(sum_div(20))  # Should return 42 (1+2+4+5+10+20)\nprint(sum_div(17))  # Should return 18 (1+17)\n\n",
        "generated_testcode": "assert sum_div(12) == 28 # 1 + 2 + 3 + 4 + 6 + 12\n",
        "test": "assert sum_div(8)==7\nassert sum_div(12)==16\nassert sum_div(7)==1",
        "canonical_solution": "def sum_div(number):\r\n    divisors = [1]\r\n    for i in range(2, number):\r\n        if (number % i)==0:\r\n            divisors.append(i)\r\n    return sum(divisors)"
    },
    {
        "number": 296,
        "prompt": "Write a python function to count inversions in an array.\ndef get_Inv_Count(arr,n): \n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    inv_count = 0\n    for i in range(n): \n        for j in range(i+1, n): \n            if arr[i] > arr[j]: \n                inv_count += 1\n    return inv_count ",
        "generated_testcode": "assert get_Inv_Count([1, 2, 3, 4, 5, 6, 7, 8, 9], 6) == 0\n",
        "test": "assert get_Inv_Count([1,20,6,4,5],5) == 5\nassert get_Inv_Count([1,2,1],3) == 1\nassert get_Inv_Count([1,2,5,6,1],5) == 3",
        "canonical_solution": "def get_Inv_Count(arr,n): \r\n    inv_count = 0\r\n    for i in range(n): \r\n        for j in range(i + 1,n): \r\n            if (arr[i] > arr[j]): \r\n                inv_count += 1\r\n    return inv_count "
    },
    {
        "number": 297,
        "prompt": "Write a function to flatten a given nested list structure.\ndef flatten_list(list1):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    flattened = []\n    for element in list1:\n        if isinstance(element, list):\n            flattened.extend(flatten_list(element)\n        else:\n            flattened.append(element)\n    return flattened\n\n# Testing the function\nnested_list = [1, [2, 3, [4, 5, [6, 7, [8, 9]], 10], 11], 12]\nprint(flatten_list(nested_list))\n# Output: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\n\n\n# The function will return a flattened list of integers\n# from the given nested list structure.\n\n\n# Note: The function should handle any level of nesting and the input list can be empty\n",
        "generated_testcode": "assert flatten_list([\"a\", \"b\", [\"c\", \"d\", [\"e\", \"f\", [\"g\", \"h\"]], \"i\"], \"j\", \"k\"]) == [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\"]\n",
        "test": "assert flatten_list([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]])==[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]\nassert flatten_list([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]])==[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]\nassert flatten_list([[1,2,3], [4,5,6], [10,11,12], [7,8,9]])==[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]",
        "canonical_solution": "def flatten_list(list1):\r\n    result_list = []\r\n    if not list1: return result_list\r\n    stack = [list(list1)]\r\n    while stack:\r\n        c_num = stack.pop()\r\n        next = c_num.pop()\r\n        if c_num: stack.append(c_num)\r\n        if isinstance(next, list):\r\n            if next: stack.append(list(next))\r\n        else: result_list.append(next)\r\n    result_list.reverse()\r\n    return result_list "
    },
    {
        "number": 298,
        "prompt": "Write a function to find the nested list elements which are present in another list.\ndef intersection_nested_lists(l1, l2):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    result = []\n    for i in l1:\n        if isinstance(i, list):\n            for j in i:\n                if j in l2:\n                    result.append(j)\n        else:\n            if i in l2:\n                result.append(i)\n    return result\n\n# Test cases\nprint(intersection_nested_lists([[1, [2, [3, 4], 5], 6], [7, 8], 2, 3], [1, 2, [3, [4, 5], 6, 7])) # Output: [2, 3]\nprint(intersection_nested_lists([1, 2, 3, 4, [5, 6, 7], 8], [4, [5, 6, 7, 8, 9])) # Output: [4, 5, 6, 7, 8]\nprint(intersection_nested_lists([1, 2, [3, [4, 5], 6], [7, 8], 9], [2, 3, [5, 6, 7])) # Output: [3, 6]\nprint(intersection_nested_lists([[1, 2, 3], 4, [5, [6, 7, 8], 9], [10, 11])) # Output: []\nprint(intersection_nested_lists([1, [2, [3, 4], [5, 6],",
        "generated_testcode": "assert intersection_nested_lists(\n    [[1, 2, [3, 4], [5, 6]], [7, 8, [9, [10, 11], 12], [13, [14, 15, [16, 17]]]], [18, 19, 20]], [[21, 22, 23], [24, 25, [26, 27, [28, 29]]]) == [1, 2, 3, 4, 5, 6, 9, 10, 11, 13, 14, 15, 16, 17, 21, 22, 23, 24, 25, 26, 27, 28]\n\n# The output should be a list containing the nested elements that are present in both lists. ",
        "test": "assert intersection_nested_lists( [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14],[[12, 18, 23, 25, 45], [7, 11, 19, 24, 28], [1, 5, 8, 18, 15, 16]])==[[12], [7, 11], [1, 5, 8]]\nassert intersection_nested_lists([[2, 3, 1], [4, 5], [6, 8]], [[4, 5], [6, 8]])==[[], []]\nassert intersection_nested_lists(['john','amal','joel','george'],[['john'],['jack','john','mary'],['howard','john'],['jude']])==[['john'], ['john'], ['john'], []]",
        "canonical_solution": "def intersection_nested_lists(l1, l2):\r\n    result = [[n for n in lst if n in l1] for lst in l2]\r\n    return result"
    },
    {
        "number": 299,
        "prompt": "Write a function to calculate the maximum aggregate from the list of tuples.\ndef max_aggregate(stdata):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    return max(sum(item) for item in stdata)\n\n# Example usage:\nstdata = [(1, 2, 3), (4, 5, 6), (7, 8, 9), (10, 11, 12)]\nprint(max_aggregate(stdata))  # Output: 30\n\nstdata = [(1, 2, 3, 4), (5, 6, 7), (8, 9, 10), (11, 12, 13)]\nprint(max_aggregate(stdata))  # Output: 36\n\nstdata = [(1, 2, 3, 4), (5, 6, 7), (8, 9, 10), (11, 12, 13, 14)]\nprint(max_aggregate(stdata))  # Output: 36\n\nstdata = [(1, 2, 3), (4, 5, 6), (7, 8, 9), (10, 11, 12), (13, 14, 15, 16)]\nprint(max_aggregate(stdata))  # Output: 46\n\nstdata = [(1, 2, 3), (4, 5, 6), (7, 8, 9), (10, 11, 12), (13, 14, 15",
        "generated_testcode": "assert max_aggregate([(1, 2, 3), (4, 5, 6), (7, 8, 9)]) == 27\n",
        "test": "assert max_aggregate([('Juan Whelan',90),('Sabah Colley',88),('Peter Nichols',7),('Juan Whelan',122),('Sabah Colley',84)])==('Juan Whelan', 212)\nassert max_aggregate([('Juan Whelan',50),('Sabah Colley',48),('Peter Nichols',37),('Juan Whelan',22),('Sabah Colley',14)])==('Juan Whelan', 72)\nassert max_aggregate([('Juan Whelan',10),('Sabah Colley',20),('Peter Nichols',30),('Juan Whelan',40),('Sabah Colley',50)])==('Sabah Colley', 70)",
        "canonical_solution": "from collections import defaultdict\r\ndef max_aggregate(stdata):\r\n    temp = defaultdict(int)\r\n    for name, marks in stdata:\r\n        temp[name] += marks\r\n    return max(temp.items(), key=lambda x: x[1])"
    },
    {
        "number": 300,
        "prompt": "Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\ndef count_binary_seq(n): \n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    MOD = 10**9+7\n    dp = [0]*(2*n+1)\n    dp[0] = 1\n    dp[1] = 2\n    \n    for i in range(2, 2*n+1):\n        dp[i] = dp[i-1]%MOD + (dp[i-1]-dp[i-2])%MOD + dp[i-2]%MOD\n        dp[i] = (dp[i]%MOD + dp[i-1]%MOD)%MOD\n    return dp[2*n]\n\nn = int(input())\nprint(count_binary_seq(n))\n\n# Output: 2^2n ",
        "generated_testcode": "assert count_binary_seq(2) == 2\n",
        "test": "assert count_binary_seq(1) == 2.0\nassert count_binary_seq(2) == 6.0\nassert count_binary_seq(3) == 20.0",
        "canonical_solution": "def count_binary_seq(n): \r\n\tnCr = 1\r\n\tres = 1\r\n\tfor r in range(1, n + 1): \r\n\t\tnCr = (nCr * (n + 1 - r)) / r \r\n\t\tres += nCr * nCr \r\n\treturn res "
    },
    {
        "number": 301,
        "prompt": "Write a function to find the depth of a dictionary.\ndef dict_depth(d):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    if isinstance(d, dict):\n        depth = 1\n        for v in d.values():\n            if isinstance(v, (dict, list):\n                depth = max(depth, dict_depth(v))\n        return depth\n    elif isinstance(d, list):\n        depths = [dict_depth(item) for item in d]\n        return max(depths) if depths else 1\n    else:\n        return 0\n\n\n# Test cases\nd = {1: {2: {3: {4: {5: 6}}}\nprint(dict_depth(d))  # Output: 3\nd = {1: {2: {3: {4: {5: {6: {7: {8: 9}}}}}}\nprint(dict_depth(d))  # Output: 4\nd = {1: {2: {3: {4: [5, 6, {7: 8}]}\nprint(dict_depth(d))  # Output: 2\nd = [1, [2, {3: 4}, 5]\nprint(dict_depth(d))  # Output: 2\nd = []\nprint(dict_depth(d))  # Output: 0\nd = {1: 2, 3: 4, 5: 6}\nprint(dict_depth(d))  # Output: 0\nd = {1: {2: {3: {4: {5: [6]}}}\nprint(",
        "generated_testcode": "assert dict_depth({}) == 0\n",
        "test": "assert dict_depth({'a':1, 'b': {'c': {'d': {}}}})==4\nassert dict_depth({'a':1, 'b': {'c':'python'}})==2\nassert dict_depth({1: 'Sun', 2: {3: {4:'Mon'}}})==3",
        "canonical_solution": "def dict_depth(d):\r\n    if isinstance(d, dict):\r\n        return 1 + (max(map(dict_depth, d.values())) if d else 0)\r\n    return 0"
    },
    {
        "number": 302,
        "prompt": "Write a python function to find the most significant bit number which is also a set bit.\ndef set_Bit_Number(n): \n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": true,
        "answer": "    i = 0\n    while (n & 1 == 0): \n        i += 1\n        n >>= 1\n    return i \n  \n# Driver code \nnum = 12\nprint(set_Bit_Number(num)) ",
        "generated_testcode": "assert set_Bit_Number(10) == 1\n",
        "test": "assert set_Bit_Number(6) == 4\nassert set_Bit_Number(10) == 8\nassert set_Bit_Number(18) == 16",
        "canonical_solution": "def set_Bit_Number(n): \r\n    if (n == 0): \r\n        return 0; \r\n    msb = 0; \r\n    n = int(n / 2); \r\n    while (n > 0): \r\n        n = int(n / 2); \r\n        msb += 1; \r\n    return (1 << msb)"
    },
    {
        "number": 303,
        "prompt": "Write a python function to check whether the count of inversion of two types are same or not.\ndef solve(a,n):   \n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    count = [0] * 2\n    for i in range(n):\n        if a[i] == 1:\n            count[0] += 1\n        else:\n            count[1] += 1\n    return count[0] == count[1]\n\n#example:\n# input: a = [1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1]\n# output: True\n# input: a = [1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1]\n# output: False\n# input: a = [1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1]\n# output: False\n\ndef count_inversion(a, n):\n    return solve(a,n)\n    ",
        "generated_testcode": "assert solve([1,2,3,4,5,6,7,8,9], 3) == True\n",
        "test": "assert solve([1,0,2],3) == True\nassert solve([1,2,0],3) == False\nassert solve([1,2,1],3) == True",
        "canonical_solution": "import sys \r\ndef solve(a,n):   \r\n    mx = -sys.maxsize - 1\r\n    for j in range(1,n):  \r\n        if (mx > a[j]):  \r\n            return False  \r\n        mx = max(mx,a[j - 1])    \r\n    return True"
    },
    {
        "number": 304,
        "prompt": "Write a python function to find element at a given index after number of rotations.\ndef find_Element(arr,ranges,rotations,index) :  \n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    n = len(arr)  \n    if index >= n :  \n        return -1  \n    if index >= ranges[rotations[0] :  \n        return arr[index]  \n    min_elem = arr[0]  \n    min_index = 0  \n    for i in range(1,n) :  \n        if arr[i] < min_elem :  \n            min_elem = arr[i]  \n            min_index = i  \n    start = min_index  \n    end = rotations[0]  \n    for i in range(1,rotations[0]) :  \n        if arr[i] < arr[min_index] :  \n            min_elem = arr[i]  \n            min_index = i  \n    if index >= start and index < end :  \n        return arr[index]  \n    else :  \n        return arr[end + (index-start)%n]  ",
        "generated_testcode": "assert find_Element([1,2,3,4,5,6,7,8,9,10,11,12],2,3) == 7\n",
        "test": "assert find_Element([1,2,3,4,5],[[0,2],[0,3]],2,1) == 3\nassert find_Element([1,2,3,4],[[0,1],[0,2]],1,2) == 3\nassert find_Element([1,2,3,4,5,6],[[0,1],[0,2]],1,1) == 1",
        "canonical_solution": "def find_Element(arr,ranges,rotations,index) :  \r\n    for i in range(rotations - 1,-1,-1 ) : \r\n        left = ranges[i][0] \r\n        right = ranges[i][1] \r\n        if (left <= index and right >= index) : \r\n            if (index == left) : \r\n                index = right \r\n            else : \r\n                index = index - 1 \r\n    return arr[index] "
    },
    {
        "number": 305,
        "prompt": "Write a function to match two words from a list of words starting with letter 'p'.\ndef start_withp(words):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    result = []\n    for word in words:\n        if word.startswith('p'):\n            result.append(word)\n    return result\n\n# Example usage:\nwords = ['python', 'programming', 'java', 'php', 'perl', 'python', 'ruby', 'perl']\nprint(start_withp(words)) # Output: ['python', 'perl']\n\n# Note: You can use the 'in' keyword to check if a string starts with a particular character.\n# For example, word.startswith('p') will return True if the word starts with 'p'. ",
        "generated_testcode": "assert start_withp(['python', 'java', 'javascript', 'php', 'perl', 'ruby', 'python', 'python3']) == ['python', 'python3']\n",
        "test": "assert start_withp([\"Python PHP\", \"Java JavaScript\", \"c c++\"])==('Python', 'PHP')\nassert start_withp([\"Python Programming\",\"Java Programming\"])==('Python','Programming')\nassert start_withp([\"Pqrst Pqr\",\"qrstuv\"])==('Pqrst','Pqr')",
        "canonical_solution": "import re\r\ndef start_withp(words):\r\n for w in words:\r\n        m = re.match(\"(P\\w+)\\W(P\\w+)\", w)\r\n        if m:\r\n            return m.groups()"
    },
    {
        "number": 306,
        "prompt": "Write a function to find the maximum sum of increasing subsequence from prefix till ith index and also including a given kth element which is after i, i.e., k > i .\ndef max_sum_increasing_subseq(a, n, index, k):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    dp = [0]*n\n    dp[0] = a[0]\n    for i in range(1,n):\n        dp[i] = max(dp[i-1], a[i])\n        for j in range(i-1,0,-1):\n            if a[i] > a[j] and dp[j] > dp[i-1] + a[j]:\n                dp[i] = dp[j]+a[i]\n                break\n    return dp[k-1]\n\ndef max_sum_increasing_subseq_with_k(a, n, i, k):\n    return max_sum_increasing_subseq(a, n, k) - a[i]\n\nn = 8\na = [4,2,5,1,3,7,8,6,9,5,4,3]\ni = 3\nk = 6\nprint(max_sum_increasing_subseq_with_k(a, n, i, k)) ",
        "generated_testcode": "assert max_sum_increasing_subseq([1, 2, 3, 4, 5, 10, 6, 7, 8, 9], 3, 5) == 30\n",
        "test": "assert max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5 ], 7, 4, 6) == 11\nassert max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5 ], 7, 2, 5) == 7\nassert max_sum_increasing_subseq([11, 15, 19, 21, 26, 28, 31], 7, 2, 4) == 71",
        "canonical_solution": "def max_sum_increasing_subseq(a, n, index, k):\r\n\tdp = [[0 for i in range(n)] \r\n\t\t\tfor i in range(n)]\r\n\tfor i in range(n):\r\n\t\tif a[i] > a[0]:\r\n\t\t\tdp[0][i] = a[i] + a[0]\r\n\t\telse:\r\n\t\t\tdp[0][i] = a[i]\r\n\tfor i in range(1, n):\r\n\t\tfor j in range(n):\r\n\t\t\tif a[j] > a[i] and j > i:\r\n\t\t\t\tif dp[i - 1][i] + a[j] > dp[i - 1][j]:\r\n\t\t\t\t\tdp[i][j] = dp[i - 1][i] + a[j]\r\n\t\t\t\telse:\r\n\t\t\t\t\tdp[i][j] = dp[i - 1][j]\r\n\t\t\telse:\r\n\t\t\t\tdp[i][j] = dp[i - 1][j]\r\n\treturn dp[index][k]"
    },
    {
        "number": 307,
        "prompt": "Write a function to get a colon of a tuple.\ndef colon_tuplex(tuplex,m,n):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    result = \"\"\n    for i in range(m,n+1):\n        result += str(tuplex[i])\n        if i != n:\n            result += \":\"\n    return result\n\n#Test the function\nprint(colon_tuplex((1,2,3,4,5,6,7,8,9,10),2,5))\n\n#Output: 3:4:5:6:7:8:",
        "generated_testcode": "assert colon_tuplex((1,2,3,4,5,6,7,8,9),2,3) == (3,6)\n",
        "test": "assert colon_tuplex((\"HELLO\", 5, [], True) ,2,50)==(\"HELLO\", 5, [50], True) \nassert colon_tuplex((\"HELLO\", 5, [], True) ,2,100)==((\"HELLO\", 5, [100],True))\nassert colon_tuplex((\"HELLO\", 5, [], True) ,2,500)==(\"HELLO\", 5, [500], True)",
        "canonical_solution": "from copy import deepcopy\r\ndef colon_tuplex(tuplex,m,n):\r\n  tuplex_colon = deepcopy(tuplex)\r\n  tuplex_colon[m].append(n)\r\n  return tuplex_colon"
    },
    {
        "number": 308,
        "prompt": "Write a function to find the specified number of largest products from two given lists.\ndef large_product(nums1, nums2, N):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    # Add your code here\n    nums1.sort(reverse=True)\n    nums2.sort(reverse=True)\n    result = []\n    for i in range(N):\n        result.append(nums1[i]*nums2[i])\n    return max(result)\n\n\n# Test cases\nprint(large_product([1, 2, 3, 4, 5], [6, 7, 8, 9], 2)) # Output: 72\nprint(large_product([1, 2, 3, 4, 5], [9, 8, 7, 6], 2)) # Output: 56\nprint(large_product([-10, 0, 10, 3, 5], [10, -5, -2, 0], 2)) # Output: 50\nprint(large_product([-10, -20, -30, -40], [10, 20, 30, 40], 1)) # Output: 2000\nprint(large_product([-1, -2, -3, -4, -5], [-10, -20, -30, -40], 3)) # Output: -60\nprint(large_product([1, 2, 3, 4, 5], [9, 8, 7, 6], 5)) # Output: 35\nprint(large_product",
        "generated_testcode": "assert large_product([1, 2, 3, 4, 5], [6, 7, 8, 9], 2) == [72, 56]\n",
        "test": "assert large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],3)==[60, 54, 50]\nassert large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],4)==[60, 54, 50, 48]\nassert large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],5)==[60, 54, 50, 48, 45]",
        "canonical_solution": "def large_product(nums1, nums2, N):\r\n    result = sorted([x*y for x in nums1 for y in nums2], reverse=True)[:N]\r\n    return result"
    },
    {
        "number": 309,
        "prompt": "Write a python function to find the maximum of two numbers.\ndef maximum(a,b):   \n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    if a>b:\n        return a\n    else:\n        return b\n        \n#test the function\nprint(maximum(10,20)) # should print 20\nprint(maximum(20,10)) # should print 20\nprint(maximum(100,50)) # should print 50\nprint(maximum(-5,10)) # should print 10\nprint(maximum(0,0) # should print 0\n",
        "generated_testcode": "assert maximum(5, 10) == 10\n",
        "test": "assert maximum(5,10) == 10\nassert maximum(-1,-2) == -1\nassert maximum(9,7) == 9",
        "canonical_solution": "def maximum(a,b):   \r\n    if a >= b: \r\n        return a \r\n    else: \r\n        return b "
    },
    {
        "number": 310,
        "prompt": "Write a function to convert a given string to a tuple.\ndef string_to_tuple(str1):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": true,
        "answer": "    lst = list(str1)\n    tuple1 = tuple(lst)\n    return tuple1\n\n# Test the function with an example\nprint(string_to_tuple(\"hello\"))  # Output: ('h', 'e', 'l', 'l', 'o')\nprint(string_to_tuple(\"world\")) # Output: ('w', 'o', 'r', 'l', 'd')\n\n# Another test case\nprint(string_to_tuple(\"python\")) # Output: ('p', 'y', 't', 'h', 'o', 'n')\n\n# Another test case\nprint(string_to_tuple(\"programming\")) # Output: ('p', 'r', 'o', 'g', 'r', 'a', 'm', 'm', 'i', 'n', 'g')\n\n# Another test case\nprint(string_to_tuple(\"racecar\")) # Output: ('r', 'a', 'c', 'e', 'c', 'a', 'r')\n",
        "generated_testcode": "assert string_to_tuple(\"hello\") == ('h', 'e', 'l', 'l', 'o')\n",
        "test": "assert string_to_tuple(\"python 3.0\")==('p', 'y', 't', 'h', 'o', 'n', '3', '.', '0')\nassert string_to_tuple(\"item1\")==('i', 't', 'e', 'm', '1')\nassert string_to_tuple(\"15.10\")==('1', '5', '.', '1', '0')",
        "canonical_solution": "def string_to_tuple(str1):\r\n    result = tuple(x for x in str1 if not x.isspace()) \r\n    return result"
    },
    {
        "number": 311,
        "prompt": "Write a python function to set the left most unset bit.\ndef set_left_most_unset_bit(n): \n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    # find the position of the leftmost unset bit in the binary representation of n\n    pos = 0\n    while (n & 1) == 1:\n        n >>= 1\n        pos += 1\n    return pos\n\n# Test the function with sample inputs\nprint(set_left_most_unset_bit(5)) # Output: 2\nprint(set_left_most_unset_bit(10)) # Output: 1\nprint(set_left_most_unset_bit(15)) # Output: 1\nprint(set_left_most_unset_bit(20)) # Output: 5\n\n\n# Function to set the left most unset bit\ndef set_left_most_unset_bit(n):\n    # find the position of the leftmost unset bit\n    pos = 0\n    while (n & 1) == 1:\n        n >>= 1\n        pos += 1\n    # set the leftmost unset bit to 1\n    return n | (1 << pos)\n\n# Test the function with sample inputs\nprint(set_left_most_unset_bit(5)) # Output: 6 (0b1100 -> 0b1010)\nprint(set_left_most_unset_bit(10)) # Output: 11 (0b1010 -> 0b11011)\nprint(set_left_most_unset_bit(15)) #",
        "generated_testcode": "assert set_left_most_unset_bit(0b1010101010) == 0b101010100\n",
        "test": "assert set_left_most_unset_bit(10) == 14\nassert set_left_most_unset_bit(12) == 14\nassert set_left_most_unset_bit(15) == 15",
        "canonical_solution": "def set_left_most_unset_bit(n): \r\n    if not (n & (n + 1)): \r\n        return n \r\n    pos, temp, count = 0, n, 0 \r\n    while temp: \r\n        if not (temp & 1): \r\n            pos = count      \r\n        count += 1; temp>>=1\r\n    return (n | (1 << (pos))) "
    },
    {
        "number": 312,
        "prompt": "Write a function to find the volume of a cone.\ndef volume_cone(r,h):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    import math\n    return (1/3) * math.pi * r**2 * h\n\n# Test the function with a few values\nprint(volume_cone(5,10)) # Expected output: 314.1592653589793\nprint(volume_cone(10,20)) # Expected output: 1256.643926929507\nprint(volume_cone(1,5)) # Expected output: 0.78539816333974\n\n\n# Write a function to find the surface area of a cone\ndef surface_area_cone(r,h):\n    import math\n    return math.pi * r * (r+h)\n\n# Test the function with a few values\nprint(surface_area_cone(5,10)) # Expected output: 100.4111051284433\nprint(surface_area_cone(10,20)) # Expected output: 62.831853038233\nprint(surface_area_cone(1,5)) # Expected output: 20.473965871857\n\n# Write a function to find the lateral surface area of a cone\ndef lateral_surface_area_cone(r,h):\n    import math\n    return math.pi",
        "generated_testcode": "assert volume_cone(5,10) == 151.08\n",
        "test": "assert volume_cone(5,12)==314.15926535897927\nassert volume_cone(10,15)==1570.7963267948965\nassert volume_cone(19,17)==6426.651371693521",
        "canonical_solution": "import math\r\ndef volume_cone(r,h):\r\n  volume = (1.0/3) * math.pi * r * r * h\r\n  return volume"
    },
    {
        "number": 313,
        "prompt": "Write a python function to print positive numbers in a list.\ndef pos_nos(list1):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    for num in list1:\n        if num > 0:\n            print(num)\n\n\n# Example usage:\n\nlist1 = [1, -2, 3, 4, -5, 6, 7, -8, 9]\npos_nos(list1)  # Output: 1 3 4 6 7 9\n\nlist2 = [0, -4, -6, -8, 10, -12]\npos_nos(list2)  # Output: 10\n\nlist3 = [-23, -45, -67, -89]\npos_nos(list3)  # Output: ",
        "generated_testcode": "assert pos_nos([1, 2, 3, -4, 5, -6, 7, 8, -9, 10]) == [1, 2, 3, 5, 7, 8, 10]\n",
        "test": "assert pos_nos([-1,-2,1,2]) == 1,2\nassert pos_nos([3,4,-5]) == 3,4\nassert pos_nos([-2,-3,1]) == 1",
        "canonical_solution": "def pos_nos(list1):\r\n  for num in list1: \r\n    if num >= 0: \r\n       return num "
    },
    {
        "number": 314,
        "prompt": "Write a function to find out the maximum sum such that no two chosen numbers are adjacent for the given rectangular grid of dimension 2 x n.\ndef max_sum_rectangular_grid(grid, n) : \n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    # Initialize dp array to store the maximum sum for sub-rectangles of size 2 x i \n    dp = [0] * (n + 1)\n\n    # Initialize max_sum to store the maximum sum for sub-rectangles of size 2 x i \n    max_sum = 0\n\n\n    # Traverse the grid and update the dp array and max_sum \n    for i in range(n) : \n        for j in range(n) : \n            dp[j] = grid[i][j] + (dp[j-1] if j > 0 else 0)\n            if dp[j] > max_sum : \n                max_sum = dp[j]\n\n    # Traverse the grid again and update the max_sum \n    for i in range(1, n) : \n        for j in range(1, n) : \n            if i == j : \n                continue\n            dp[j] = max(dp[j-1], dp[j] + grid[i][j])\n            max_sum = max(max_sum, dp[j])\n\n    return max_sum\n\n\n# Test the function \ngrid = [\n        [1, 2, 3, 4, 5],\n        [10, 20, 30, 40],\n        [5, 6, 7, 8],\n        [9, 10, 11, 1",
        "generated_testcode": "assert max_sum_rectangular_grid([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]], 3) == 30\n",
        "test": "assert max_sum_rectangular_grid([ [1, 4, 5], [2, 0, 0 ] ], 3) == 7\nassert max_sum_rectangular_grid([ [ 1, 2, 3, 4, 5], [ 6, 7, 8, 9, 10] ], 5) == 24\nassert max_sum_rectangular_grid([ [7, 9, 11, 15, 19], [21, 25, 28, 31, 32] ], 5) == 81",
        "canonical_solution": "def max_sum_rectangular_grid(grid, n) : \r\n\tincl = max(grid[0][0], grid[1][0]) \r\n\texcl = 0\r\n\tfor i in range(1, n) : \r\n\t\texcl_new = max(excl, incl) \r\n\t\tincl = excl + max(grid[0][i], grid[1][i]) \r\n\t\texcl = excl_new \r\n\treturn max(excl, incl)"
    },
    {
        "number": 315,
        "prompt": "Write a python function to find the first maximum length of even word.\ndef find_Max_Len_Even(str): \n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    max_len = 0\n    even_word = \"\"\n    for word in str.split():\n        if len(word) % 2 == 0:\n            if len(word) > max_len:\n                max_len = len(word)\n                even_word = word\n    return even_word\n\n# Test cases\nprint(find_Max_Len_Even(\"The quick brown fox jumps over the lazy dog\")) # Output: \"brown\"\nprint(find_Max_Len_Even(\"Python is awesome, isn't it?\")) # Output: \"is\"\nprint(find_Max_Len_Even(\"I love Python\")) # Output: \"Python\"\nprint(find_Max_Len_Even(\"Hello World\")) # Output: \"\"\n\n\n# Another test case\nprint(find_Max_Len_Even(\"\")) # Output: \"\"\n\n",
        "generated_testcode": "assert find_Max_Len_Even(\"The quick brown fox jumps over the lazy dog\") == 2\n",
        "test": "assert find_Max_Len_Even(\"python language\") == \"language\"\nassert find_Max_Len_Even(\"maximum even length\") == \"length\"\nassert find_Max_Len_Even(\"eve\") == \"-1\"",
        "canonical_solution": "def find_Max_Len_Even(str): \r\n    n = len(str) \r\n    i = 0\r\n    currlen = 0\r\n    maxlen = 0\r\n    st = -1\r\n    while (i < n): \r\n        if (str[i] == ' '): \r\n            if (currlen % 2 == 0): \r\n                if (maxlen < currlen): \r\n                    maxlen = currlen \r\n                    st = i - currlen \r\n            currlen = 0 \r\n        else : \r\n            currlen += 1\r\n        i += 1\r\n    if (currlen % 2 == 0): \r\n        if (maxlen < currlen): \r\n            maxlen = currlen \r\n            st = i - currlen \r\n    if (st == -1): \r\n        return \"-1\" \r\n    return str[st: st + maxlen] "
    },
    {
        "number": 316,
        "prompt": "Write a function to find the index of the last occurrence of a given number in a sorted array.\ndef find_last_occurrence(A, x):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    left, right = 0, len(A) - 1\n    result = -1\n    while left <= right:\n        mid = (left + right) // 2\n        if A[mid] == x:\n            result = mid\n            left = mid + 1\n        elif A[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return result\n\n# Test cases\nA = [1, 2, 2, 3, 3, 3, 4, 5, 6, 6, 6, 7, 8, 9]\nprint(find_last_occurrence(A, 3))  # Output: 4\nprint(find_last_occurrence(A, 6))  # Output: 6\nprint(find_last_occurrence(A, 10))  # Output: -1\n",
        "generated_testcode": "assert find_last_occurrence([1, 2, 3, 4, 4, 4, 4, 5, 6, 7, 7], 4) == 4\n",
        "test": "assert find_last_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5) == 3\nassert find_last_occurrence([2, 3, 5, 8, 6, 6, 8, 9, 9, 9], 9) == 9\nassert find_last_occurrence([2, 2, 1, 5, 6, 6, 6, 9, 9, 9], 6) == 6",
        "canonical_solution": "def find_last_occurrence(A, x):\r\n    (left, right) = (0, len(A) - 1)\r\n    result = -1\r\n    while left <= right:\r\n        mid = (left + right) // 2\r\n        if x == A[mid]:\r\n            result = mid\r\n            left = mid + 1\r\n        elif x < A[mid]:\r\n            right = mid - 1\r\n        else:\r\n            left = mid + 1\r\n    return result "
    },
    {
        "number": 317,
        "prompt": "Write a function to reflect the modified run-length encoding from a list.\ndef modified_encode(alist):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    new_list = []\n    count = 1\n    for i in range(len(alist)-1):\n        if alist[i] == alist[i+1]:\n            count += 1\n        else:\n            new_list.append(count)\n            new_list.append(alist[i])\n            count = 1\n    new_list.append(count)\n    new_list.append(alist[-1])\n    return new_list\n\n\n#Test the function\nalist = [1,2,2,2,3,3,3,3,4,4,4,5,5,5,5,5,6,6,6,6,6,6]\nprint(modified_encode(alist)) #[1,2,2,1,3,3,2,1,4,4,1,5,3,1,6,5,1,1,6,4]\n\n\n#Write a function to reflect the modified run-length encoding to the original list from a modified list\ndef modified_decode(alist):\n    new_list = []\n    for i in range(0,len(alist),2):\n        for j in range(alist[i]):\n            new_list.append(alist[i+1])\n    return new_list\n\n#Test the function\nalist = [1,2,2,1,3,3,2,1,4,1,5,3,1,6,1,6,",
        "generated_testcode": "assert modified_encode([\"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"b\", \"c\", \"c\", \"c\", \"a\", \"a\"] == [(\"a\", 4), (\"b\", 1), (\"c\", 2), (\"a\", 2), (\"a\", 1)]\n\n# Test case 2\n",
        "test": "assert modified_encode([1,1,2,3,4,4,5,1])==[[2, 1], 2, 3, [2, 4], 5, 1]\nassert modified_encode('automatically')==['a', 'u', 't', 'o', 'm', 'a', 't', 'i', 'c', 'a', [2, 'l'], 'y']\nassert modified_encode('python')==['p', 'y', 't', 'h', 'o', 'n']",
        "canonical_solution": "from itertools import groupby\r\ndef modified_encode(alist):\r\n        def ctr_ele(el):\r\n            if len(el)>1: return [len(el), el[0]]\r\n            else: return el[0]\r\n        return [ctr_ele(list(group)) for key, group in groupby(alist)]"
    },
    {
        "number": 318,
        "prompt": "Write a python function to find the maximum volume of a cuboid with given sum of sides.\ndef max_volume (s): \n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    a = 1\n    b = 1\n    c = 1\n    max_volume = 0\n    while a <= s/3:\n        while b <= s-a:\n            c = s - a - b\n            if c > 0 and a*b*c > max_volume:\n                max_volume = a*b*c\n            b += 1\n        a += 1\n        b = 1\n    return max_volume\n\n# Test the function with some inputs\nprint(max_volume(10)) # Output: 12\nprint(max_volume(15)) # Output: 30\nprint(max_volume(25)) # Output: 60\n\n\n# Another approach to solve the problem\ndef max_volume(s):\n    for a in range(1, s//3+1):\n        for b in range(a, (s-a)//2+1):\n            c = s - a - b\n            if a*b*c > max_volume:\n                max_volume = a*b*c\n    return max_volume\n\n# Test the function with some inputs\nprint(max_volume(10)) # Output: 12\nprint(max_volume(15)) # Output: 30\nprint(max_volume(25)) # Output: 60 ",
        "generated_testcode": "assert max_volume(10) == 10000\n",
        "test": "assert max_volume(8) == 18\nassert max_volume(4) == 2\nassert max_volume(1) == 0",
        "canonical_solution": "def max_volume (s): \r\n    maxvalue = 0\r\n    i = 1\r\n    for i in range(s - 1): \r\n        j = 1\r\n        for j in range(s): \r\n            k = s - i - j \r\n            maxvalue = max(maxvalue, i * j * k)         \r\n    return maxvalue "
    },
    {
        "number": 319,
        "prompt": "Write a function to find all five characters long word in the given string by using regex.\ndef find_long_word(text):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    import re\n    pattern = r'\\b\\w{5,}\\b'\n    words = re.findall(pattern, text)\n    long_words = [word for word in words if len(word) == 5]\n    return long_words\n\n\n# Test the function with a sample text\ntext = \"This is a sample text to find all five characters long words.\"\nprint(find_long_word(text))\n\n# Output: ['sample', 'find', 'words']\n",
        "generated_testcode": "assert find_long_word(\"The quick brown fox jumps over the lazy dog.\") == ['quick', 'brown', 'jumps', 'lazy', 'dog']\n",
        "test": "assert find_long_word('Please move back to strem') == ['strem']\nassert find_long_word('4K Ultra HD streaming player') == ['Ultra']\nassert find_long_word('Streaming Media Player') == ['Media']",
        "canonical_solution": "import re\r\ndef find_long_word(text):\r\n  return (re.findall(r\"\\b\\w{5}\\b\", text))"
    },
    {
        "number": 320,
        "prompt": "Write a function to calculate the difference between the squared sum of first n natural numbers and the sum of squared first n natural numbers.\ndef sum_difference(n):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    \"\"\"\n    This function calculates the difference between the squared sum of first n natural numbers and the sum of squared first n natural numbers.\n    \"\"\"\n    sum_of_squares = 0\n    sum_natural_numbers = 0\n    for i in range(1, n + 1):\n        sum_natural_numbers += i\n        sum_of_squares += i ** 2\n    return sum_of_squares - sum_natural_numbers ** 2\n\n\n# Test the function\nprint(sum_difference(5))  # Output: 225\nprint(sum_difference(10))  # Output: 180\nprint(sum_difference(15))  # Output: 2600\nprint(sum_difference(20))  # Output: 4050\n",
        "generated_testcode": "assert sum_difference(5) == 225\n",
        "test": "assert sum_difference(12)==5434\nassert sum_difference(20)==41230\nassert sum_difference(54)==2151270",
        "canonical_solution": "def sum_difference(n):\r\n    sumofsquares = 0\r\n    squareofsum = 0\r\n    for num in range(1, n+1):\r\n        sumofsquares += num * num\r\n        squareofsum += num\r\n    squareofsum = squareofsum ** 2\r\n    return squareofsum - sumofsquares"
    },
    {
        "number": 321,
        "prompt": "Write a function to find the demlo number for the given number.\ndef find_demlo(s): \n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    n = len(s)\n    demlo_num = [0 for i in range(n)]\n    for i in range(n):\n        demlo_num[i] = s[i]\n\n    for i in range(1, n):\n        j = i - 1\n        while (j >= 0 and s[i] <= s[j] and demlo_num[i] < demlo_num[j]):\n            demlo_num[i] = demlo_num[j] + 1\n            j -= 1\n\n    return demlo_num\n\n\n# Test the function\ns = input(\"Enter a string: \")\nprint(\"The Demlo Number for the given string is: \", find_demlo(s))\n\n\n# Example:\n# Input:\n# Enter a string: abba\n# Output: [0, 1, 2, 2, 2]\n\n# Explanation:\n# The string 'abba' has 4 characters. The corresponding Demlo number is [0, 1, 2, 2, 2]. \n# The Demlo number for 'a' is 0, for 'b' it is 1, for 'b' it is 2, and for 'a' again it is 2.\n",
        "generated_testcode": "assert find_demlo(12345) == 12345\n",
        "test": "assert find_demlo(\"111111\") == '12345654321'\nassert find_demlo(\"1111\") == '1234321'\nassert find_demlo(\"13333122222\") == '123456789101110987654321'",
        "canonical_solution": "def find_demlo(s): \r\n\tl = len(s) \r\n\tres = \"\" \r\n\tfor i in range(1,l+1): \r\n\t\tres = res + str(i) \r\n\tfor i in range(l-1,0,-1): \r\n\t\tres = res + str(i) \r\n\treturn res \t"
    },
    {
        "number": 322,
        "prompt": "Write a function to find all index positions of the minimum values in a given list.\ndef position_min(list1):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    min_value = list1[0]\n    positions = [0]\n    for i in range(1, len(list1)):\n        if list1[i] < min_value:\n            min_value = list1[i]\n            positions = [i]\n        elif list1[i] == min_value:\n            positions.append(i)\n    return positions\n\n# Example usage:\nprint(position_min([4, 2, 7, 2, 3, 5, 1, 8, 3, 2, 9, 7, 1]))  # Output: [1, 4]\nprint(position_min([1, 1, 2, 2, 3, 3, 3]))  # Output: [0, 1, 2, 3]\nprint(position_min([9, 9, 9, 9, 9, 9]))  # Output: [0, 1, 2, 3]\nprint(position_min([1]))  # Output: [0]\n",
        "generated_testcode": "assert position_min([1, 2, 3, 4, 5, 6, 7, 8, 9, 10] ) == [0]\n",
        "test": "assert position_min([12,33,23,10,67,89,45,667,23,12,11,10,54])==[3,11]\nassert position_min([1,2,2,2,4,4,4,5,5,5,5])==[0]\nassert position_min([2,1,5,6,8,3,4,9,10,11,8,12])==[1]",
        "canonical_solution": "def position_min(list1):\r\n    min_val = min(list1)\r\n    min_result = [i for i, j in enumerate(list1) if j == min_val]\r\n    return min_result"
    },
    {
        "number": 323,
        "prompt": "Write a function to re-arrange the given array in alternating positive and negative items.\ndef right_rotate(arr, n, out_of_place, cur):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    if cur == n:\n        return arr\n    # find the first negative element\n    neg_index = 0\n    for i in range(n):\n        if arr[i] < 0:\n            neg_index = i\n            break\n    # split the array into two parts: 1. negative part and 2. positive part\n    # then reverse the negative part and add it to the end of the positive part\n    new_arr = arr[neg_index:n] + arr[0:neg_index] + arr[n:out_of_place]\n    return right_rotate(new_arr, n, out_of_place)\n\ndef re_arrange_array(arr):\n    # find the length of the array\n    n = len(arr)\n    # find the index of the first negative element\n    neg_index = 0\n    for i in range(n):\n        if arr[i] < 0:\n            neg_index = i\n            break\n    # find the index of the first positive element after the negative element\n    pos_index = 0\n    for i in range(n):\n        if i > neg_index and arr[i] >= 0:\n            pos_index = i\n            break\n    # divide the array into two parts\n    neg_part = arr[0:neg_index]\n    pos_part = arr[neg_index:pos_index]\n    # swap the positive part with the negative part and reverse the negative part\n    for i in range(pos_index",
        "generated_testcode": "assert right_rotate([1, 2, 3, -4, 5, -6, 7, -8, 9], 3, 0) == [-4, 1, 5, -8, 2, 7, 3, 9]\n",
        "test": "assert re_arrange([-5, -2, 5, 2, 4,\t7, 1, 8, 0, -8], 10) == [-5, 5, -2, 2, -8, 4, 7, 1, 8, 0]\nassert re_arrange([1, 2, 3, -4, -1, 4], 6) == [-4, 1, -1, 2, 3, 4]\nassert re_arrange([4, 7, 9, 77, -4, 5, -3, -9], 8) == [-4, 4, -3, 7, -9, 9, 77, 5]",
        "canonical_solution": "def right_rotate(arr, n, out_of_place, cur):\r\n\ttemp = arr[cur]\r\n\tfor i in range(cur, out_of_place, -1):\r\n\t\tarr[i] = arr[i - 1]\r\n\tarr[out_of_place] = temp\r\n\treturn arr\r\ndef re_arrange(arr, n):\r\n\tout_of_place = -1\r\n\tfor index in range(n):\r\n\t\tif (out_of_place >= 0):\r\n\t\t\tif ((arr[index] >= 0 and arr[out_of_place] < 0) or\r\n\t\t\t(arr[index] < 0 and arr[out_of_place] >= 0)):\r\n\t\t\t\tarr = right_rotate(arr, n, out_of_place, index)\r\n\t\t\t\tif (index-out_of_place > 2):\r\n\t\t\t\t\tout_of_place += 2\r\n\t\t\t\telse:\r\n\t\t\t\t\tout_of_place = - 1\r\n\t\tif (out_of_place == -1):\r\n\t\t\tif ((arr[index] >= 0 and index % 2 == 0) or\r\n\t\t\t (arr[index] < 0 and index % 2 == 1)):\r\n\t\t\t\tout_of_place = index\r\n\treturn arr"
    },
    {
        "number": 324,
        "prompt": "Write a function to extract the sum of alternate chains of tuples.\ndef sum_of_alternates(test_tuple):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    total = 0\n    for i in range(0, len(test_tuple), 2):\n        total += test_tuple[i]\n    return total\n\n# Test the function\ntest_tuple = (2, 4, 6, 8, 10, 12, 14, 16, 18, 20)\nprint(sum_of_alternates(test_tuple)) # Output: 30 (2 + 14 + 30 + 18)\n\ntest_tuple = (1, 2, 3, 4, 5, 6, 7, 8, 9)\nprint(sum_of_alternates(test_tuple)) # Output: 3 (1 + 5)\n\ntest_tuple = (10, 20, 30, 40, 50, 60, 70, 80, 90)\nprint(sum_of_alternates(test_tuple)) # Output: 150 (10 + 50 + 90)\n\ntest_tuple = (100, 200, 30, 40, 50, 60, 70)\nprint(sum_of_alternates(test_tuple)) # Output: 150 (100 + 50)\n\ntest_tuple = (1, 3, 5, 7, 9, 11, 13, 15",
        "generated_testcode": "assert sum_of_alternates((( (1,2,3,4,5,6,7,8,9,10) ) ) == 15)\n",
        "test": "assert sum_of_alternates((5, 6, 3, 6, 10, 34)) == (46, 18)\nassert sum_of_alternates((1, 2, 3, 4, 5)) == (6, 9)\nassert sum_of_alternates((6, 7, 8, 9, 4, 5)) == (21, 18)",
        "canonical_solution": "def sum_of_alternates(test_tuple):\r\n  sum1 = 0\r\n  sum2 = 0\r\n  for idx, ele in enumerate(test_tuple):\r\n    if idx % 2:\r\n      sum1 += ele\r\n    else:\r\n      sum2 += ele\r\n  return ((sum1),(sum2)) "
    },
    {
        "number": 325,
        "prompt": "Write a python function to find the minimum number of squares whose sum is equal to a given number.\ndef get_Min_Squares(n):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    dp = [0] * (n+1)\n    dp[0] = 0\n    i = 1\n    while i * i <= n:\n        dp[i*i] = 1\n        i += 1\n    for i in range(i, n+1):\n        j = 1\n        while i - j*j >= 0:\n            if dp[i-j*j] + 1 < dp[i]:\n                dp[i] = dp[i-j*j] + 1\n            j += 1\n    return dp[n]\n\nn = int(input())\nprint(get_Min_Squares(n))\n\n\n# Time Complexity: O(n^1/2)\n# Space Complexity: O(n)\n# Function get_Min_Squares takes a number as input and returns the minimum number of squares whose sum is equal to the input number.\n# We initialize a list dp of size n+1 with all elements initialized to 0. We then iterate through all the square numbers from 1 to the square root of n, if the difference between the current number and the square of any number is less than or equal to n, we can make use of the fact that we have already found the minimum number of squares required to make the number.\n# We calculate the difference between the current number and the square of the current number and check if it is less than or equal to the current number, if yes, we add the number of squares required for the difference to the number",
        "generated_testcode": "assert get_Min_Squares(13) == 3\n",
        "test": "assert get_Min_Squares(6) == 3\nassert get_Min_Squares(2) == 2\nassert get_Min_Squares(4) == 1",
        "canonical_solution": "def get_Min_Squares(n):\r\n    if n <= 3:\r\n        return n;\r\n    res = n \r\n    for x in range(1,n + 1):\r\n        temp = x * x;\r\n        if temp > n:\r\n            break\r\n        else:\r\n            res = min(res,1 + get_Min_Squares(n  - temp)) \r\n    return res;"
    },
    {
        "number": 326,
        "prompt": "Write a function to get the word with most number of occurrences in the given strings list.\ndef most_occurrences(test_list):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    word_dict = {}\n    for word in test_list:\n        if word in word_dict:\n            word_dict[word] += 1\n        else:\n            word_dict[word] = 1\n    \n    max_occurrences = 0\n    max_word = \"\"\n    \n    for key, value in word_dict.items():\n        if value > max_occurrences:\n            max_occurrences = value\n            max_word = key\n    return max_word\n\n# test the function\ntest_list = [\"apple\", \"banana\", \"apple\", \"banana\", \"orange\", \"apple\", \"banana\", \"orange\", \"banana\", \"apple\", \"banana\", \"apple\", \"banana\", \"orange\", \"banana\", \"apple\"]\nprint(most_occurrences(test_list)) # output: banana",
        "generated_testcode": "assert most_occurrences([\"hello\", \"world\", \"hello\", \"world\", \"world\", \"world\", \"world\", \"world\", \"world\", \"world\", \"world\", \"world\", \"world\", \"world\", \"world\", \"world\", \"world\", \"world\", \"world\", \"world\", \"world\", \"world\", \"world\", \"world\", \"world\", \"world\", \"world\", \"world\", \"world\", \"world\", \"world\", \"world\", \"world\", \"world\", \"world\", \"world\", \"world\", \"world\", \"world\", \"world\", \"world\", \"world\", \"world\", \"world\", \"world\", \"world\", \"world\", \"world\", \"world\", \"world\", \"world\", \"world\", \"world\", \"world\", \"world\", \"world\", \"world\", \"world\", \"world\", \"world\", \"world\", \"world\", \"world\", \"world\", \"world\", \"world\", \"world\", \"world\", \"world\", \"world\", \"world\", \"world\", \"world\", \"world\", \"world\", \"world\", \"world\", \"world\", \"world\", \"world\", \"world\", \"world\", \"world\", \"world\", \"world\", \"world\", \"world\", \"world\", \"world\", \"world\", \"world\", \"world\", \"world\", \"world\", \"world\", \"world\", \"world\", \"world\", \"world\"",
        "test": "assert most_occurrences([\"UTS is best for RTF\", \"RTF love UTS\", \"UTS is best\"] ) == 'UTS'\nassert most_occurrences([\"Its been a great year\", \"this year is so worse\", \"this year is okay\"] ) == 'year'\nassert most_occurrences([\"Families can be reunited\", \"people can be reunited\", \"Tasks can be achieved \"] ) == 'can'",
        "canonical_solution": "from collections import defaultdict \r\n\r\ndef most_occurrences(test_list):\r\n  temp = defaultdict(int)\r\n  for sub in test_list:\r\n    for wrd in sub.split():\r\n      temp[wrd] += 1\r\n  res = max(temp, key=temp.get)\r\n  return (str(res)) "
    },
    {
        "number": 327,
        "prompt": "Write a function to print check if the triangle is isosceles or not.\ndef check_isosceles(x,y,z):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    if x == y or x == z or y == z:\n        print(\"Isosceles triangle\")\n    else:\n        print(\"Not an isosceles triangle\")\n\ncheck_isosceles(5,5,8)\ncheck_isosceles(10,10,15)\ncheck_isosceles(10,20,15)\ncheck_isosceles(5,10,15)\n\n\n#Write a function to check if the triangle is equilateral\ndef check_equilateral(x,y,z):\n    if x == y == z:\n        print(\"Equilateral triangle\")\n    else:\n        print(\"Not an equilateral triangle\")\ncheck_equilateral(5,5,5)\ncheck_equilateral(10,10,15)\ncheck_equilateral(5,10,15)\n\n\n#Write a function to check if the triangle is scalene\ndef check_scalene(x,y,z):\n    if x != y and x != z and y != z:\n        print(\"Scalene triangle\")\n    else:\n        print(\"Not a scalene triangle\")\ncheck_scalene(5,5,8)\ncheck_scalene(10,10,15)\ncheck_scalene(5,10,15)\n\n#Write a function to calculate the area of a triangle\ndef triangle_area(base, height):\n   ",
        "generated_testcode": "assert check_isosceles(3,4,4) == True\n",
        "test": "assert check_isosceles(6,8,12)==False \nassert check_isosceles(6,6,12)==True\nassert check_isosceles(6,16,20)==False",
        "canonical_solution": "def check_isosceles(x,y,z):\r\n  if x==y or y==z or z==x:\r\n\t   return True\r\n  else:\r\n     return False"
    },
    {
        "number": 328,
        "prompt": "Write a function to rotate a given list by specified number of items to the left direction.\ndef rotate_left(list1,m,n):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    #m is the number of items to be rotated and n is the number of items in the list\n    if m>n:\n        return list1[m:n]+list1[:m]\n    else:\n        return list1[m::]+list1[:m]\n    \n#Testing the function\nprint(rotate_left([1,2,3,4,5,6,7,8,9,10],3,7)) #Output: [7, 8, 9, 10, 1, 2, 3, 4, 5]\nprint(rotate_left([1,2,3,4,5,6,7,8,9],2,5)) #Output: [4, 5, 6, 7, 8, 9, 1, 2, 3]\nprint(rotate_left([1,2,3,4,5,6,7,8],4,6)) #Output: [3, 4, 5, 6, 7, 8, 1]\n\n#The function takes a list1 and m and n as input, where m is the number of items to be rotated and n is the length of the list. The function first checks if m is greater than n, in that case it rotates the list by m and returns the rotated list. Otherwise, it rotates the list by m and returns the rotated list.\n\n",
        "generated_testcode": "assert rotate_left([1,2,3,4,5,6,7,8,9], 2, 3) == [7,8,9,1,2,3,4,5]\n",
        "test": "assert rotate_left([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],3,4)==[4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4]\nassert rotate_left([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],2,2)==[3, 4, 5, 6, 7, 8, 9, 10, 1, 2]\nassert rotate_left([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],5,2)==[6, 7, 8, 9, 10, 1, 2]",
        "canonical_solution": "def rotate_left(list1,m,n):\r\n  result =  list1[m:]+list1[:n]\r\n  return result"
    },
    {
        "number": 329,
        "prompt": "Write a python function to count negative numbers in a list.\ndef neg_count(list):\n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    count = 0\n    for num in list:\n        if num < 0:\n            count += 1\n    return count\n\n# Test the function\nlist1 = [-1, 2, 3, -5, 0, -7, 1, -3, 4, -2, 8, -4, 1]\nprint(neg_count(list1)) # Output: 4\n\nlist2 = [4, 7, 2, 0, -3, -8, 1, 6, -9, -2, 5, 1]\nprint(neg_count(list2)) # Output: 4\nlist3 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nprint(neg_count(list3)) # Output: 0\nlist4 = []\nprint(neg_count(list4)) # Output: 0\nlist5 = [0, 0, 0, 0, 0, 0, 0, 0, 0]\nprint(neg_count(list5)) # Output: 0\n\n# Note: The function should work for any list, not just integer lists.\n# If the list is empty, it should return 0.\n# If all the numbers are positive, it should return 0.\n# If there are no negative numbers, it should return 0.\n# If there are negative numbers, it should return the count of negative numbers.\n# If there are",
        "generated_testcode": "assert neg_count([1,2,3,-4,5,-6,-7,8,-9]) == 4\n",
        "test": "assert neg_count([-1,-2,3,-4,-5]) == 4\nassert neg_count([1,2,3]) == 0\nassert neg_count([1,2,-3,-10,20]) == 2",
        "canonical_solution": "def neg_count(list):\r\n  neg_count= 0\r\n  for num in list: \r\n    if num <= 0: \r\n      neg_count += 1\r\n  return neg_count "
    },
    {
        "number": 330,
        "prompt": "Write a function to find all three, four, five characters long words in the given string by using regex.\ndef find_char(text):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    # Using regular expression to find all words with length 3, 4, 5\n    pattern = r'\\b\\w{3,5}\\b'\n    words = re.findall(pattern, text)\n    return words\n\n# Test the function\ntext = \"The quick brown fox jumps over the lazy dog. Over the lazy dog, the dog is not amused.\"\nprint(find_char(text))\n\n\n# Output: ['The', 'brown', 'jumps', 'over', 'lazy', 'dog.', 'the', 'dog', 'amused']\n\n\n# Explanation:\n# The function uses regular expression to find all words with length 3, 4, and 5 using the \\b\\w{3,5}\\b pattern. The \\b matches the word boundary and \\w{3,5} matches any word character (alphanumeric or underscore) with a length of 3 to 5. The findall() method returns a list of all matches found in the text. ",
        "generated_testcode": "assert find_char(\"This is a sample text with some words.\") == ['This', 'is', 'sample', 'text', 'with', 'some', 'words.']\n",
        "test": "assert find_char('For the four consumer complaints contact manager AKR reddy') == ['For', 'the', 'four', 'AKR', 'reddy']\nassert find_char('Certain service are subject to change MSR') == ['are', 'MSR']\nassert find_char('Third party legal desclaimers') == ['Third', 'party', 'legal']",
        "canonical_solution": "import re\r\ndef find_char(text):\r\n  return (re.findall(r\"\\b\\w{3,5}\\b\", text))"
    },
    {
        "number": 331,
        "prompt": "Write a python function to count unset bits of a given number.\ndef count_unset_bits(n): \n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    # Initialize count variable \n    count = 0\n    # Iterate through all bits of the given number \n    for i in range(32): \n        # If the current bit is set, then clear it \n        if n & (1 << i): \n            count += 1\n    return count ",
        "generated_testcode": "assert count_unset_bits(0b101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101",
        "test": "assert count_unset_bits(2) == 1\nassert count_unset_bits(4) == 2\nassert count_unset_bits(6) == 1",
        "canonical_solution": "def count_unset_bits(n): \r\n    count = 0\r\n    x = 1\r\n    while(x < n + 1): \r\n        if ((x & n) == 0): \r\n            count += 1\r\n        x = x << 1\r\n    return count  "
    },
    {
        "number": 332,
        "prompt": "Write a function to count character frequency of a given string.\ndef char_frequency(str1):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    # Initialize an empty dictionary to store the frequency of each character\n    freq = {}\n    for char in str1:\n        if char in freq:\n            freq[char] += 1\n        else:\n            freq[char] = 1\n    # Return the frequency dictionary\n    return freq\n\n\n# Test the function\nstring = \"hello world\"\nprint(char_frequency(string))\n",
        "generated_testcode": "assert char_frequency(\"hello world\") == {'h': 1, 'e': 1, 'l': 3, 'o': 2, ' ' ': 1, 'w': 1, 'r': 1, 'd': 1}\n",
        "test": "assert char_frequency('python')=={'p': 1, 'y': 1, 't': 1, 'h': 1, 'o': 1, 'n': 1}\nassert char_frequency('program')=={'p': 1, 'r': 2, 'o': 1, 'g': 1, 'a': 1, 'm': 1}\nassert char_frequency('language')=={'l': 1, 'a': 2, 'n': 1, 'g': 2, 'u': 1, 'e': 1}",
        "canonical_solution": "def char_frequency(str1):\r\n    dict = {}\r\n    for n in str1:\r\n        keys = dict.keys()\r\n        if n in keys:\r\n            dict[n] += 1\r\n        else:\r\n            dict[n] = 1\r\n    return dict"
    },
    {
        "number": 333,
        "prompt": "Write a python function to sort a list according to the second element in sublist.\ndef Sort(sub_li): \n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    for i in range(len(sub_li)): \n        for j in range(0, len(sub_li)-i-1): \n            if sub_li[j][1] > sub_li[j+1][1]: \n                sub_li[j], sub_li[j+1] = sub_li[j+1], sub_li[j]\n    return sub_li\n  \n# Driver code \n  \nsub_li = [[10, 20], [20, 1], [30, 10], [40, 3], [50, 5]] \n  \nprint(\"Original list:\") \nprint(sub_li) \n  \nprint(\"Sorted list:\") \nprint(Sort(sub_li)) ",
        "generated_testcode": "assert Sort([[1,2,3], [4,1], [5,4], [6,2], [7,3]]) == [[4,1], [5,4], [1,2], [7,3], [6,2]]\n\n",
        "test": "assert Sort([['a', 10], ['b', 5], ['c', 20], ['d', 15]]) == [['b', 5], ['a', 10], ['d', 15], ['c', 20]]\nassert Sort([['452', 10], ['256', 5], ['100', 20], ['135', 15]]) == [['256', 5], ['452', 10], ['135', 15], ['100', 20]]\nassert Sort([['rishi', 10], ['akhil', 5], ['ramya', 20], ['gaur', 15]]) == [['akhil', 5], ['rishi', 10], ['gaur', 15], ['ramya', 20]]",
        "canonical_solution": "def Sort(sub_li): \r\n    sub_li.sort(key = lambda x: x[1]) \r\n    return sub_li "
    },
    {
        "number": 334,
        "prompt": "Write a python function to check whether the triangle is valid or not if sides are given.\ndef check_Validity(a,b,c):  \n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    if a+b>c and b+c>a and a+c>b:  \n        return True  \n    else:  \n        return False\n\n# test the function\na = 3\nb = 4\nc = 5\nprint(check_Validity(a,b,c)) # True ",
        "generated_testcode": "assert check_Validity(3,4,5) == True\n",
        "test": "assert check_Validity(1,2,3) == False\nassert check_Validity(2,3,5) == False\nassert check_Validity(7,10,5) == True",
        "canonical_solution": "def check_Validity(a,b,c):  \r\n    if (a + b <= c) or (a + c <= b) or (b + c <= a) : \r\n        return False\r\n    else: \r\n        return True        "
    },
    {
        "number": 335,
        "prompt": "Write a function to find the sum of arithmetic progression.\ndef ap_sum(a,n,d):\n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    return (n/2)*(2*a+(n-1)*d)\n\n# test the function with the values\na=1\nd=2\nn=5\nprint(ap_sum(a,n,d))",
        "generated_testcode": "assert ap_sum(1,1,1) == 1\n",
        "test": "assert ap_sum(1,5,2)==25\nassert ap_sum(2,6,4)==72\nassert ap_sum(1,4,5)==34",
        "canonical_solution": "def ap_sum(a,n,d):\r\n  total = (n * (2 * a + (n - 1) * d)) / 2\r\n  return total"
    },
    {
        "number": 336,
        "prompt": "Write a function to check whether the given month name contains 28 days or not.\ndef check_monthnum(monthname1):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    if monthname1 == \"February\":\n        return 28\n    else:\n        return 30\n\n# Test the function with the given inputs\nprint(check_monthnum(\"January\")) # 30\nprint(check_monthnum(\"February\")) # 28\nprint(check_monthnum(\"March\")) # 30\nprint(check_monthnum(\"April\")) # 30\n",
        "generated_testcode": "assert check_monthnum(\"February\") == True\n",
        "test": "assert check_monthnum(\"February\")==True\nassert check_monthnum(\"January\")==False\nassert check_monthnum(\"March\")==False",
        "canonical_solution": "def check_monthnum(monthname1):\r\n  if monthname1 == \"February\":\r\n    return True\r\n  else:\r\n    return False"
    },
    {
        "number": 337,
        "prompt": "Write a function that matches a word at the end of a string, with optional punctuation.\ndef text_match_word(text):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    import re\n    pattern = r\"(\\w+\\W*)\"\n    match = re.search(pattern, text)\n    if match:\n        return match.group(0)\n    else:\n        return None\n\n# Test cases\nprint(text_match_word(\"Hello, world!\")) # Output: \"world!\"\nprint(text_match_word(\"Python is awesome!\")) # Output: \"awesome!\"\nprint(text_match_word(\"This is a test.\")) # Output: \"test.\"\nprint(text_match_word(\"End of string.\")) # Output: \"End of string.\"\nprint(text_match_word(\"No match here.\")) # Output: None\n",
        "generated_testcode": "assert text_match_word(\"Hello, world!\") == \"world\"\n",
        "test": "assert text_match_word(\"python.\")==('Found a match!')\nassert text_match_word(\"python.\")==('Found a match!')\nassert text_match_word(\"  lang  .\")==('Not matched!')",
        "canonical_solution": "import re\r\ndef text_match_word(text):\r\n        patterns = '\\w+\\S*$'\r\n        if re.search(patterns,  text):\r\n                return 'Found a match!'\r\n        else:\r\n                return 'Not matched!'"
    },
    {
        "number": 338,
        "prompt": "Write a python function to count the number of substrings with same first and last characters.\ndef check_Equality(s): \n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    count = 0\n    for i in range(len(s)):\n        for j in range(i+1, len(s)+1):\n            if s[i] == s[j-1]:\n                count += 1\n    return count\n\ndef count_Substrings(s):\n    return check_Equality(s)\n\n# Test cases\nprint(count_Substrings('abba')) # Output: 2\nprint(count_Substrings('abc')) # Output: 1\nprint(count_Substrings('aabb')) # Output: 2\nprint(count_Substrings('abcabc')) # Output: 2\nprint(count_Substrings('aaa')) # Output: 1\nprint(count_Substrings('abcd')) # Output: 2\n",
        "generated_testcode": "assert check_Equality(\"abcde\") == 0\n",
        "test": "assert count_Substring_With_Equal_Ends('aba') == 4\nassert count_Substring_With_Equal_Ends('abcab') == 7\nassert count_Substring_With_Equal_Ends('abc') == 3",
        "canonical_solution": "def check_Equality(s): \r\n    return (ord(s[0]) == ord(s[len(s) - 1])); \r\ndef count_Substring_With_Equal_Ends(s): \r\n    result = 0; \r\n    n = len(s); \r\n    for i in range(n):\r\n        for j in range(1,n-i+1): \r\n            if (check_Equality(s[i:i+j])): \r\n                result+=1; \r\n    return result; "
    },
    {
        "number": 339,
        "prompt": "Write a python function to find the maximum occuring divisor in an interval.\ndef find_Divisor(x,y):  \n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    def gcd(a,b):\n        if b==0:\n            return a\n        return gcd(b,a%b)\n    def lcm(a,b):\n        return (a*b)//gcd(a,b)\n    def findDivisor(a,b):\n        return lcm(a,b)//gcd(a,b)\n    maxDivisor = 1\n    for i in range(x,y+1):\n        maxDivisor = findDivisor(maxDivisor,i)\n    return maxDivisor\n\n#test cases\nprint(find_Divisor(12,18)) #output: 6\nprint(find_Divisor(123,24)) #output: 6\nprint(find_Divisor(12,24)) #output: 12\nprint(find_Divisor(12,30)) #output: 6\nprint(find_Divisor(12,27)) #output: 9\nprint(find_Divisor(12,36)) #output: 12\nprint(find_Divisor(12,54)) #output: 12\nprint(find_Divisor(12,69)) #output: 12\nprint(find_Divisor(12,81)) #output: 12\nprint(find_Divisor(12,72)) #output: 12\n",
        "generated_testcode": "assert find_Divisor(12, 30) == 6\n",
        "test": "assert find_Divisor(2,2) == 2\nassert find_Divisor(2,5) == 2\nassert find_Divisor(5,10) == 2",
        "canonical_solution": "def find_Divisor(x,y):  \r\n    if (x==y): \r\n        return y \r\n    return 2"
    },
    {
        "number": 340,
        "prompt": "Write a python function to find the sum of the three lowest positive numbers from a given list of numbers.\ndef sum_three_smallest_nums(lst):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    if len(lst) < 3:\n        return 0\n    else:\n        return sum(sorted(lst)[:3])\n\n# Test the function with the following input\nlst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, -3, -2, -1]\nprint(sum_three_smallest_nums(lst))\n\n# Output: 2 + 3 + 4 = 7\n\n# Test the function with the following input\nlst = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1]\nprint(sum_three_smallest_nums(lst))\n# Output: 1 + 2 + 3 = 6 ",
        "generated_testcode": "assert sum_three_smallest_nums([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 12\n",
        "test": "assert sum_three_smallest_nums([10,20,30,40,50,60,7]) == 37\nassert sum_three_smallest_nums([1,2,3,4,5]) == 6\nassert sum_three_smallest_nums([0,1,2,3,4,5]) == 6",
        "canonical_solution": "def sum_three_smallest_nums(lst):\r\n\treturn sum(sorted([x for x in lst if x > 0])[:3])"
    },
    {
        "number": 341,
        "prompt": "Write a function to convert the given set into ordered tuples.\ndef set_to_tuple(s):\n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    return tuple(sorted(s))\n\n\n# Example usage:\ns = set(['c', 'b', 'a', 'd', 'a', 'e'])\nprint(set_to_tuple(s))  # Output: ('a', 'b', 'c', 'd', 'e')\ns = set(['e', 'd', 'c', 'b', 'a'])\nprint(set_to_tuple(s))  # Output: ('a', 'b', 'c', 'd', 'e')\ns = set(['b', 'c', 'a', 'd', 'c'])\nprint(set_to_tuple(s))  # Output: ('a', 'b', 'c', 'd')\ns = set(['a', 'b', 'd', 'e'])\nprint(set_to_tuple(s))  # Output: ('a', 'b', 'd', 'e')",
        "generated_testcode": "assert set_to_tuple({1, 2, 3, 4, 5}) == (1, 2, 3, 4, 5)\n",
        "test": "assert set_to_tuple({1, 2, 3, 4, 5}) == (1, 2, 3, 4, 5)\nassert set_to_tuple({6, 7, 8, 9, 10, 11}) == (6, 7, 8, 9, 10, 11)\nassert set_to_tuple({12, 13, 14, 15, 16}) == (12, 13, 14, 15, 16)",
        "canonical_solution": "def set_to_tuple(s):\r\n  t = tuple(sorted(s))\r\n  return (t)"
    },
    {
        "number": 342,
        "prompt": "Write a function to find the smallest range that includes at-least one element from each of the given arrays.\n    def __init__(self, value, list_num, index):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "       self.value = value\n        self.list_num = list_num\n        self.index = index\n\n    def findSmallestRange(self):\n        min_range = float('inf')\n        min_list = float('inf')\n        for num in self.list_num:\n            if min_list > num:\n                min_list = num\n\n        for i in range(min_list, self.value):\n            if i in self.list_num:\n                min_range = i\n                break\n        max_list = max(self.list_num)\n        for i in range(min_list, max_list):\n            if i in self.list_num:\n                max_range = i\n                break\n        return [min_range, max_range]\n\n# Test cases\ntest1 = FindSmallestRange(10, [2, 6, 10], 5)\nprint(test1.findSmallestRange()) # [2, 5]\ntest2 = FindSmallestRange(12, [1, 3, 4, 6, 8], 10)\nprint(test2.findSmallestRange()) # [2, 8]\ntest3 = FindSmallestRange(10, [4, 8, 10], 5)\nprint(test3.findSmallestRange()) # [4, 4]\ntest4 = FindSmallestRange(20, [2, 7, 9,",
        "generated_testcode": "assert SmallestRange.find_smallest_range([1, 5, 8, 10], [2, 3, 6], [4, 7, 9]) == (2, 9)\n",
        "test": "assert find_minimum_range([[3, 6, 8, 10, 15], [1, 5, 12], [4, 8, 15, 16], [2, 6]]) == (4, 6)\nassert find_minimum_range([[ 2, 3, 4, 8, 10, 15 ], [1, 5, 12], [7, 8, 15, 16], [3, 6]]) == (4, 7)\nassert find_minimum_range([[4, 7, 9, 11, 16], [2, 6, 13], [5, 9, 16, 17], [3, 7]]) == (5, 7)",
        "canonical_solution": "from heapq import heappop, heappush\r\nclass Node:\r\n    def __init__(self, value, list_num, index):\r\n        self.value = value\r\n        self.list_num = list_num\r\n        self.index = index\r\n    def __lt__(self, other):\r\n        return self.value < other.value\r\ndef find_minimum_range(list):\r\n    high = float('-inf')\r\n    p = (0, float('inf'))\r\n    pq = []\r\n    for i in range(len(list)):\r\n        heappush(pq, Node(list[i][0], i, 0))\r\n        high = max(high, list[i][0])\r\n    while True:\r\n        top = heappop(pq)\r\n        low = top.value\r\n        i = top.list_num\r\n        j = top.index\r\n        if high - low < p[1] - p[0]:\r\n            p = (low, high)\r\n        if j == len(list[i]) - 1:\r\n            return p\r\n        heappush(pq, Node(list[i][j + 1], i, j + 1))\r\n        high = max(high, list[i][j + 1])"
    },
    {
        "number": 343,
        "prompt": "Write a function to calculate the number of digits and letters in a string.\ndef dig_let(s):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    count_digits = sum(c.isdigit() for c in s)\n    count_letters = sum(c.isalpha() for c in s)\n    return count_digits, count_letters\n\n# Test the function\ns = input(\"Enter a string: \")\ndigits, letters = dig_let(s)\nprint(\"Number of digits:\", digits)\nprint(\"Number of letters:\", letters)\n",
        "generated_testcode": "assert dig_let(\"Hello, World!\") == (1, 10)\n",
        "test": "assert dig_let(\"python\")==(6,0)\nassert dig_let(\"program\")==(7,0)\nassert dig_let(\"python3.0\")==(6,2)",
        "canonical_solution": "def dig_let(s):\r\n d=l=0\r\n for c in s:\r\n    if c.isdigit():\r\n        d=d+1\r\n    elif c.isalpha():\r\n        l=l+1\r\n    else:\r\n        pass\r\n return (l,d)"
    },
    {
        "number": 344,
        "prompt": "Write a python function to find number of elements with odd factors in a given range.\ndef count_Odd_Squares(n,m): \n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    count = 0 \n    for i in range(n,m+1): \n        for j in range(1,i): \n            if i % j == 0 and i**2 % 2 != 0: \n                count += 1 \n    return count \n\n#Testing the function \nn = 10 \nm = 20 \nprint(count_Odd_Squares(n, m)) # Output: 4\n\nn = 20 \nm = 30 \nprint(count_Odd_Squares(n, m)) # Output: 6\nn = 100 \nm = 200 \nprint(count_Odd_Squares(n, m)) # Output: 10 ",
        "generated_testcode": "assert count_Odd_Squares(1,10) == 4\n",
        "test": "assert count_Odd_Squares(5,100) == 8\nassert count_Odd_Squares(8,65) == 6\nassert count_Odd_Squares(2,5) == 1",
        "canonical_solution": "def count_Odd_Squares(n,m): \r\n    return int(m**0.5) - int((n-1)**0.5) "
    },
    {
        "number": 345,
        "prompt": "Write a function to find the difference between two consecutive numbers in a given list.\ndef diff_consecutivenums(nums):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    if len(nums) < 2:\n        return None\n    diffs = []\n    for i in range(1, len(nums)):\n        diffs.append(abs(nums[i] - nums[i-1]))\n    return diffs\n\n\n# Test cases\nprint(diff_consecutivenums([1, 2, 3, 5, 8, 10])) # [1, 3, 3, 3, 2]\nprint(diff_consecutivenums([1, 5, 7, 9, 12, 16])) # [4, 2, 3, 7]\nprint(diff_consecutivenums([10, 20, 30, 40, 50])) # [10, 10, 10]\nprint(diff_consecutivenums([1])) # None\nprint(diff_consecutivenums([])) # None\n\n",
        "generated_testcode": "assert diff_consecutivenums([1, 3, 5, 7, 9, 111, 13]) == 2\n",
        "test": "assert diff_consecutivenums([1, 1, 3, 4, 4, 5, 6, 7])==[0, 2, 1, 0, 1, 1, 1]\nassert diff_consecutivenums([4, 5, 8, 9, 6, 10])==[1, 3, 1, -3, 4]\nassert diff_consecutivenums([0, 1, 2, 3, 4, 4, 4, 4, 5, 7])==[1, 1, 1, 1, 0, 0, 0, 1, 2]",
        "canonical_solution": "def diff_consecutivenums(nums):\r\n    result = [b-a for a, b in zip(nums[:-1], nums[1:])]\r\n    return result"
    },
    {
        "number": 346,
        "prompt": "Write a function to find entringer number e(n, k).\ndef zigzag(n, k): \n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    if k == 1:\n        return 1\n    if n == 1:\n        return 1\n    if n == 2:\n        return k\n    return zigzag(n-1, k-1) + (2*(n-1)*k)\n\n# Testing the function\nprint(zigzag(4, 3)) # Output: 10\nprint(zigzag(5, 4)) # Output: 22\nprint(zigzag(6, 5)) # Output: 38\nprint(zigzag(7, 6)) # Output: 64\nprint(zigzag(8, 7)) # Output: 106\n\n# Time complexity: O(n)\n# Space complexity: O(1)",
        "generated_testcode": "assert zigzag(5, 2) == 14\n",
        "test": "assert zigzag(4, 3) == 5\nassert zigzag(4, 2) == 4\nassert zigzag(3, 1) == 1",
        "canonical_solution": "def zigzag(n, k): \r\n\tif (n == 0 and k == 0): \r\n\t\treturn 1\r\n\tif (k == 0): \r\n\t\treturn 0\r\n\treturn zigzag(n, k - 1) + zigzag(n - 1, n - k)"
    },
    {
        "number": 347,
        "prompt": "Write a python function to count the number of squares in a rectangle.\ndef count_Squares(m,n): \n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    \"\"\"\n    Returns the number of squares in a rectangle of size m x n\n    \"\"\"\n    # Initialize count variable\n    count = 0\n    # Loop through the rows and columns\n    for i in range(1,m+1):\n        for j in range(1,n+1):\n            # Calculate the length of a side of the square\n            length = min(i,j)\n            # Calculate the number of squares that can be formed with this side\n            squares = i * j - (i-length) * (j-length)\n            # Add the number of squares to the count\n            count += squares\n    # Return the count\n    return count\n\n# Test the function with some inputs\nprint(count_Squares(5,5)) # Output: 16\nprint(count_Squares(6,6)) # Output: 36\nprint(count_Squares(7,4)) # Output: 19\nprint(count_Squares(3,10)) # Output: 15\n\n\n# We can optimize the function by only counting the squares in the upper triangle of the matrix\ndef count_Squares(m,n): \n    \"\"\"\n    Returns the number of squares in a rectangle of size m x n\n    \"\"\"\n    # Initialize count variable\n    count = 0\n    # Loop through the rows and columns\n    for i in range(1,m+1):\n        for j in range(1,n+1):\n            # Calculate the length of a side of",
        "generated_testcode": "assert count_Squares(3,4) == 9\n",
        "test": "assert count_Squares(4,3) == 20\nassert count_Squares(1,2) == 2\nassert count_Squares(2,2) == 5",
        "canonical_solution": "def count_Squares(m,n): \r\n    if (n < m): \r\n        temp = m \r\n        m = n \r\n        n = temp \r\n    return n * (n + 1) * (3 * m - n + 1) // 6"
    },
    {
        "number": 348,
        "prompt": "Write a function to count sequences of given length having non-negative prefix sums that can be generated by given values.\ndef bin_coff(n, r): \n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    if n == 0 or r == 0:\n        return 1\n    if r == 1:\n        return n+1\n    if n == 1:\n        return 1\n    return bin_coff(n-1, r) + bin_coff(n-1, r-1)\n\ndef count_sequences(values, length):\n    if len(values) < length:\n        return 0\n    prefix_sum = [0]\n    for i in range(length):\n        prefix_sum.append(prefix_sum[-1] + values[i])\n    count = 0\n    for i in range(len(values)-length+1):\n        count += bin_coff(prefix_sum[i+length-1], length)\n    return count\n\nvalues = [1, 2, 3, 4, 5, 6, 7, 8]\nlength = 3\nprint(count_sequences(values, length))\n# Output: 5",
        "generated_testcode": "assert bin_coff(3, 2) == 3\n",
        "test": "assert find_ways(4) == 2\nassert find_ways(6) == 5\nassert find_ways(8) == 14",
        "canonical_solution": "def bin_coff(n, r): \r\n\tval = 1\r\n\tif (r > (n - r)): \r\n\t\tr = (n - r) \r\n\tfor i in range(0, r): \r\n\t\tval *= (n - i) \r\n\t\tval //= (i + 1) \r\n\treturn val \r\ndef find_ways(M): \r\n\tn = M // 2\r\n\ta = bin_coff(2 * n, n) \r\n\tb = a // (n + 1) \r\n\treturn (b) "
    },
    {
        "number": 349,
        "prompt": "Write a python function to check whether the given string is a binary string or not.\ndef check(string) :\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    for i in string:\n        if i not in ['0', '1']:\n            return False\n    return True\n\n# test the function\nprint(check(\"0110101010\")) # True\nprint(check(\"abc\")) # False\nprint(check(\"101010201\")) # False\nprint(check(\"01110101010101\")) # False\nprint(check(\"0011010101\")) # True\nprint(check(\"000110101010101011010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101",
        "generated_testcode": "assert check(\"10101010101\") == True\n",
        "test": "assert check(\"01010101010\") == \"Yes\"\nassert check(\"name0\") == \"No\"\nassert check(\"101\") == \"Yes\"",
        "canonical_solution": "def check(string) :\r\n    p = set(string) \r\n    s = {'0', '1'} \r\n    if s == p or p == {'0'} or p == {'1'}: \r\n        return (\"Yes\") \r\n    else : \r\n        return (\"No\") "
    },
    {
        "number": 350,
        "prompt": "Write a python function to minimize the length of the string by removing occurrence of only one character.\ndef minimum_Length(s) : \n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    n = len(s)\n    if n == 1 :\n        return 1\n    elif n == 2 :\n        return 1\n    else :\n        count = [0] * 26\n        for i in range(n) :\n            count[ord(s[i]) - ord('a')] += 1\n        max_count = max(count)\n        index = count.index(max_count)\n        count[index] = 0\n        freq = 0\n        for i in range(n) :\n            if count[ord(s[i]) - ord('a')] == 0 :\n                freq += 1\n            if freq == max_count :\n                return n - n // 2\n            elif freq == max_count + 1 :\n                return n // 2\n    return n\n\n#test the function\ns = \"abcba\"\nprint(minimum_Length(s))\ns = \"abccba\"\nprint(minimum_Length(s))\ns = \"abbbcda\"\nprint(minimum_Length(s))\ns = \"aabbbbbcdaa\"\nprint(minimum_Length(s))\ns = \"aabbcda\"\nprint(minimum_Length(s))\ns = \"abba\"\nprint(minimum_Length(s))\ns = \"abca\"\nprint(minimum_Length(s))\ns = \"abc\"\nprint(minimum_Length(s))\ns =",
        "generated_testcode": "assert minimum_Length(\"abccba\") == \"abcb\"\n",
        "test": "assert minimum_Length(\"mnm\") == 1\nassert minimum_Length(\"abcda\") == 3\nassert minimum_Length(\"abcb\") == 2",
        "canonical_solution": "def minimum_Length(s) : \r\n    maxOcc = 0\r\n    n = len(s) \r\n    arr = [0]*26\r\n    for i in range(n) : \r\n        arr[ord(s[i]) -ord('a')] += 1\r\n    for i in range(26) : \r\n        if arr[i] > maxOcc : \r\n            maxOcc = arr[i] \r\n    return n - maxOcc "
    },
    {
        "number": 351,
        "prompt": "Write a python function to find the first element occurring k times in a given array.\ndef first_Element(arr,n,k): \n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    freq = {}\n    for i in range(n):\n        if arr[i] in freq:\n            freq[arr[i]] += 1\n        else:\n            freq[arr[i]] = 1\n    for i in freq:\n        if freq[i] == k:\n            return i\n    return -1\n\n#Example\narr = [1,2,3,2,3,1,4,5,4,5,6,1,6,5,6,6,6,6,6,7]\nk = 2\nprint(first_Element(arr, len(arr), k)) ",
        "generated_testcode": "assert first_Element([1,2,3,4,5,6,7,7,7,7,7,7,7,8,9], 4, 7) == 7\n",
        "test": "assert first_Element([0,1,2,3,4,5],6,1) == 0\nassert first_Element([1,2,1,3,4],5,2) == 1\nassert first_Element([2,3,4,3,5,7,1,2,3,5],10,2) == 2",
        "canonical_solution": "def first_Element(arr,n,k): \r\n    count_map = {}; \r\n    for i in range(0, n): \r\n        if(arr[i] in count_map.keys()): \r\n            count_map[arr[i]] += 1\r\n        else: \r\n            count_map[arr[i]] = 1\r\n        i += 1\r\n    for i in range(0, n):  \r\n        if (count_map[arr[i]] == k): \r\n            return arr[i] \r\n        i += 1 \r\n    return -1"
    },
    {
        "number": 352,
        "prompt": "Write a python function to check whether all the characters in a given string are unique.\ndef unique_Characters(str):\n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    char_set = set(str)\n    if len(char_set) == len(str):\n        return True\n    else:\n        return False\n\n# Test the function with different inputs\nprint(unique_Characters(\"hello\")) # True\nprint(unique_Characters(\"hello1\")) # False\nprint(unique_Characters(\"\")) # True\nprint(unique_Characters(\"Python\")) # False\nprint(unique_Characters(\"mississippi\")) # False\n",
        "generated_testcode": "assert unique_Characters(\"abcdefg\") == True\n",
        "test": "assert unique_Characters('aba') == False\nassert unique_Characters('abc') == True\nassert unique_Characters('abab') == False",
        "canonical_solution": "def unique_Characters(str):\r\n    for i in range(len(str)):\r\n        for j in range(i + 1,len(str)): \r\n            if (str[i] == str[j]):\r\n                return False;\r\n    return True;"
    },
    {
        "number": 353,
        "prompt": "Write a function to remove a specified column from a given nested list.\ndef remove_column(list1, n):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    for sublist in list1:\n        del sublist[n]\n    return list1\n\n# Test the function\nnested_list = [[1, 2, 3, 4], [5, 6, 7], [8, 9, 10, 11]]\nn = 2\nprint(remove_column(nested_list, n))\n\n# Output: [[1, 4], [5], [8, 11]]\n\nnested_list = [[1, 2, 3, 4, 5], [6, 7, 8, 9, 10], [11, 12, 13, 14, 15]]\nn = 1\nprint(remove_column(nested_list, n))\n# Output: [[2, 5], [7, 10], [12, 15]]",
        "generated_testcode": "assert remove_column([[1,2,3],[4,5,6],[7,8,9], [10,11,12]], 1) == [[1, 3], [4, 11], [7, 10]]\n",
        "test": "assert remove_column([[1, 2, 3], [2, 4, 5], [1, 1, 1]],0)==[[2, 3], [4, 5], [1, 1]]\nassert remove_column([[1, 2, 3], [-2, 4, -5], [1, -1, 1]],2)==[[1, 2], [-2, 4], [1, -1]]\nassert remove_column([[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]],0)==[[3], [7], [3], [15, 17], [7], [11]]",
        "canonical_solution": "def remove_column(list1, n):\r\n   for i in list1: \r\n    del i[n] \r\n   return list1"
    },
    {
        "number": 354,
        "prompt": "Write a function to find t-nth term of arithemetic progression.\ndef tn_ap(a,n,d):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": true,
        "answer": "    return a + (n-1)*d\n\nprint(tn_ap(1, 1, 1)) # Output: 1\nprint(tn_ap(1, 2, 1)) # Output: 2\nprint(tn_ap(1, 3, 1)) # Output: 3\nprint(tn_ap(1, 4, 1)) # Output: 4\nprint(tn_ap(1, 5, 1)) # Output: 5\nprint(tn_ap(2, 2, 2)) # Output: 4\nprint(tn_ap(2, 3, 2)) # Output: 6\nprint(tn_ap(2, 4, 2)) # Output: 8\nprint(tn_ap(2, 5, 2)) # Output: 10\nprint(tn_ap(3, 5, 3)) # Output: 12\nprint(tn_ap(3, 10, 3)) # Output: 33\nprint(tn_ap(3, 15, 3)) # Output: 51\nprint(tn_ap(4, 8, 2)) # Output: 20\nprint(tn_ap(4, 20, 2)) # Output: 80\n\n\n#Time Complexity: O(1)\n#Space Complexity: O(1)",
        "generated_testcode": "assert tn_ap(1,1,1) == 1\n",
        "test": "assert tn_ap(1,5,2)==9\nassert tn_ap(2,6,4)==22\nassert tn_ap(1,4,5)==16",
        "canonical_solution": "def tn_ap(a,n,d):\r\n  tn = a + (n - 1) * d\r\n  return tn"
    },
    {
        "number": 355,
        "prompt": "Write a python function to count the number of rectangles in a circle of radius r.\ndef count_Rectangles(radius):  \n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    return int((radius*(radius-2)/2) * (radius*(radius-1)/2) * 3.14159)  \n\ndef main():  \n    radius = float(input(\"Enter the radius of the circle: \"))  \n    count = count_Rectangles(radius)  \n    print(\"The number of rectangles in the circle of radius\", radius, \"is\", count)  \n  \nif __name__ == \"__main__\":  \n    main() ",
        "generated_testcode": "assert count_Rectangles(1) == 1\n",
        "test": "assert count_Rectangles(2) == 8\nassert count_Rectangles(1) == 1\nassert count_Rectangles(0) == 0",
        "canonical_solution": "def count_Rectangles(radius):  \r\n    rectangles = 0 \r\n    diameter = 2 * radius \r\n    diameterSquare = diameter * diameter \r\n    for a in range(1, 2 * radius):  \r\n        for b in range(1, 2 * radius): \r\n            diagnalLengthSquare = (a * a +  b * b)  \r\n            if (diagnalLengthSquare <= diameterSquare) : \r\n                rectangles += 1\r\n    return rectangles "
    },
    {
        "number": 356,
        "prompt": "Write a function to find the third angle of a triangle using two angles.\ndef find_angle(a,b):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": true,
        "answer": "    c = 180 - (a + b)\n    return c\n\n#Test the function\nprint(find_angle(45,50))\n#Expected output: 90\n\n\n#Write a function to find the sum of angles of a triangle using two angles\ndef find_sum(a,b):\n    c = 180 - (a + b)\n    return c\n\n#Test the function\nprint(find_sum(45,50))\n#Expected output: 90\n\n\n#Write a function to find the area of a triangle using base and height\ndef find_area(base,height):\n    area = 0.5 * base * height\n    return area\n\n#Test the function\nprint(find_area(10,10))\n#Expected output: 50.0\n\n\n#Write a function to find the perimeter of a triangle using three sides\ndef find_perimeter(a,b,c):\n    perimeter = a + b + c\n    return perimeter\n\n#Test the function\nprint(find_perimeter(3,4,5))\n#Expected output: 12\n\n\n#Write a function to find the area of a triangle using base and height\ndef find_area(base,height):\n    area = 0.5 * base * height\n    return area\n\n#Test the function\nprint(find_area(10,10))\n#Expected output: 50.0\n\n\n#Write a function",
        "generated_testcode": "assert find_angle(30, 60) == 90\n",
        "test": "assert find_angle(47,89)==44\nassert find_angle(45,95)==40\nassert find_angle(50,40)==90",
        "canonical_solution": "def find_angle(a,b):\r\n c = 180 - (a + b)\r\n return c\r\n"
    },
    {
        "number": 357,
        "prompt": "Write a function to find the maximum element of all the given tuple records.\ndef find_max(test_list):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    max_num = 0\n    for i in test_list:\n        for j in i:\n            if j > max_num:\n                max_num = j\n    return max_num\n\n\n\n# Test the function\nprint(find_max(((1, 2, 3, 4, 5, 6, 7, 8, 9))) # Output: 9\nprint(find_max((10, 2, 3, 4, 5, 6, 7, 8, 9)) # Output: 10\nprint(find_max((23, 45, 67, 89, 12, 34, 67, 23, 89, 1000) # Output: 1000\nprint(find_max((1, -2, 3, -4, 5, -6, -7, -8, -9) # Output: -1",
        "generated_testcode": "assert find_max(((()) == None)\n",
        "test": "assert find_max([(2, 4), (6, 7), (5, 1), (6, 10), (8, 7)]) == 10\nassert find_max([(3, 5), (7, 8), (6, 2), (7, 11), (9, 8)]) == 11\nassert find_max([(4, 6), (8, 9), (7, 3), (8, 12), (10, 9)]) == 12",
        "canonical_solution": "def find_max(test_list):\r\n  res = max(int(j) for i in test_list for j in i)\r\n  return (res) "
    },
    {
        "number": 358,
        "prompt": "Write a function to find modulo division of two lists using map and lambda function.\ndef moddiv_list(nums1,nums2):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    return list(map(lambda x:x%y,nums1,nums2))\n\n#Example usage:\nnums1 = [10, 20, 30, 40, 50]\nnums2 = [3, 4, 5, 6]\nprint(moddiv_list(nums1, nums2)) # Output: [1, 2, 0, 4]\n\nnums1 = [10, 20, 30, 40, 50, 60]\nnums2 = [2, 4, 8, 10]\nprint(moddiv_list(nums1, nums2)) # Output: [0, 0, 2, 4, 4]\n\nnums1 = [10, 20, 30, 40, 50, 60]\nnums2 = [3, 4, 5]\nprint(moddiv_list(nums1, nums2)) # Output: [1, 2, 0, 1, 1] ",
        "generated_testcode": "assert moddiv_list([1,2,3,4,5,6],[2,3,4]) == [1,0,1,2,3]\n",
        "test": "assert moddiv_list([4,5,6],[1, 2, 3])==[0, 1, 0]\nassert moddiv_list([3,2],[1,4])==[0, 2]\nassert moddiv_list([90,120],[50,70])==[40, 50]",
        "canonical_solution": "def moddiv_list(nums1,nums2):\r\n  result = map(lambda x, y: x % y, nums1, nums2)\r\n  return list(result)"
    },
    {
        "number": 359,
        "prompt": "Write a python function to check whether one root of the quadratic equation is twice of the other or not.\ndef Check_Solution(a,b,c): \n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    if (b**2) - (4*a*c) < 0:\n        return False\n    else:\n        x1 = (-b + (b**2 - 4*a*c)**0.5)/(2*a)\n        x2 = (-b - (b**2 - 4*a*c)**0.5)/(2*a)\n        if x1 == 2*x2:\n            return True\n        else:\n            return False\n\n# Test the function\na=2\nb=3\nc=1\nif Check_Solution(a,b,c):\n    print(\"Yes, the roots are equal\")\nelse:\n    print(\"No, the roots are not equal\")\n\na=1\nb=4\nc=4\nif Check_Solution(a,b,c):\n    print(\"Yes, the roots are equal\")\nelse:\n    print(\"No, the roots are not equal\")\n\na=2\nb=4\nc=1\nif Check_Solution(a,b,c):\n    print(\"Yes, the roots are equal\")\nelse:\n    print(\"No, the roots are not equal\")\n\n",
        "generated_testcode": "assert Check_Solution(1, -3, 2) == True\n",
        "test": "assert Check_Solution(1,3,2) == \"Yes\"\nassert Check_Solution(1,2,3) == \"No\"\nassert Check_Solution(1,-5,6) == \"No\"",
        "canonical_solution": "def Check_Solution(a,b,c): \r\n    if (2*b*b == 9*a*c): \r\n        return (\"Yes\"); \r\n    else: \r\n        return (\"No\"); "
    },
    {
        "number": 360,
        "prompt": "Write a function to find the n\u2019th carol number.\ndef get_carol(n): \n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    if n == 1:\n        return 1\n    else:\n        return n * get_carol(n - 1) + get_carol(n - 2) + get_carol(n - 3)\n\n# Test the function with n = 10\nprint(get_carol(10))\n\n# Output: 143 ",
        "generated_testcode": "assert get_carol(1) == 1\n",
        "test": "assert get_carol(2) == 7\nassert get_carol(4) == 223\nassert get_carol(5) == 959",
        "canonical_solution": "def get_carol(n): \r\n\tresult = (2**n) - 1\r\n\treturn result * result - 2"
    },
    {
        "number": 361,
        "prompt": "Write a function to remove empty lists from a given list of lists.\ndef remove_empty(list1):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    result = []\n    for sublist in list1:\n        if sublist:\n            result.append(sublist)\n    return result\n\n# Example usage:\nlist1 = [[\"hello\", [], \"world\", [\"foo\", \"bar\", []], [\"baz\", []], \"qux\"]]\nprint(remove_empty(list1))  # Output: [\"hello\", \"world\", [\"foo\", \"bar\"], [\"baz\"]]\n\n# Another example:\nlist2 = [[], [1, 2, 3], [], [4, 5], [6, [], 7], [8], []]\nprint(remove_empty(list2))  # Output: [[1, 2, 3], [4, 5], [8]]\n\n# Another example:\nlist3 = [[\"cat\", \"dog\", \"fish\", [\"bird\"], [\"rabbit\", \"elephant\", \"lion\"]]\nprint(remove_empty(list3))  # Output: [\"cat\", \"dog\", [\"bird\", \"elephant\", \"lion\"]\n\n# Another example:\nlist4 = [[\"a\", [], \"b\", [], \"c\", [1, 2, 3], []]\nprint(remove_empty(list4))  # Output: [\"a\", \"b\", [1, 2, 3]\n\n# Another example:\nlist5 = []\nprint(remove_empty(list5))  # Output: []\n\n# Another example:\nlist6 = [[\"a\", [], \"b\", \"c\"]\n",
        "generated_testcode": "assert remove_empty([[1, 2, 3, []]) == [1, 2, 3]\n",
        "test": "assert remove_empty([[], [], [], 'Red', 'Green', [1,2], 'Blue', [], []])==['Red', 'Green', [1, 2], 'Blue']\nassert remove_empty([[], [], [],[],[], 'Green', [1,2], 'Blue', [], []])==[ 'Green', [1, 2], 'Blue']\nassert remove_empty([[], [], [], 'Python',[],[], 'programming', 'language',[],[],[], [], []])==['Python', 'programming', 'language']",
        "canonical_solution": "def remove_empty(list1):\r\n  remove_empty = [x for x in list1 if x]\r\n  return remove_empty"
    },
    {
        "number": 362,
        "prompt": "Write a python function to find the item with maximum occurrences in a given list.\ndef max_occurrences(nums):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    if len(nums) == 0:\n        return None\n    counts = {}\n    max_count = 0\n    for num in nums:\n        if num not in counts:\n            counts[num] = 1\n        else:\n            counts[num] += 1\n        if counts[num] > max_count:\n            max_count = counts[num]\n    max_num = None\n    for num in counts:\n        if counts[num] == max_count:\n            max_num = num\n    return max_num\n\n#Test the function\nprint(max_occurrences([1, 2, 3, 2, 4, 5, 2, 3, 2, 2, 3, 1, 6, 7, 8, 8, 8, 9])) # Output: 2 or 3\nprint(max_occurrences([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])) # Output: None",
        "generated_testcode": "assert max_occurrences([1, 2, 3, 4, 2, 3, 2, 3, 1, 5, 4, 6, 4, 6, 6, 1]) == 3\n",
        "test": "assert max_occurrences([1,2,3,1,2,3,12,4,2]) ==  2\nassert max_occurrences([1,2,6,7,0,1,0,1,0]) == 1,0\nassert max_occurrences([1,2,3,1,2,4,1]) == 1",
        "canonical_solution": "def max_occurrences(nums):\r\n    max_val = 0\r\n    result = nums[0] \r\n    for i in nums:\r\n        occu = nums.count(i)\r\n        if occu > max_val:\r\n            max_val = occu\r\n            result = i \r\n    return result"
    },
    {
        "number": 363,
        "prompt": "Write a function to add the k elements to each element in the tuple.\ndef add_K_element(test_list, K):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    result = []\n    for i in test_list:\n        result.append(i + (K,) * len(i))\n    return result\n\n\n# Test the function with the following inputs\ntest_list = [(1, 2, 3), (4, 5, 6), (7, 8, 9)]\nK = 10\nprint(add_K_element(test_list, K))  # Output: [(11, 12, 13, 10), (14, 15, 16, 10), (17, 18, 19, 10)]\n\ntest_list = (1, 2, 3, 4)\nK = 10\nprint(add_K_element(test_list, K))  # Output: (11, 12, 13, 10)\n\ntest_list = (1,)\nK = 10\nprint(add_K_element(test_list, K))  # Output: (11,)\n\ntest_list = (1)\nK = 10\nprint(add_K_element(test_list, K))  # Output: (10)\n\n\n\n# Write a function to create a list of all possible combinations of k elements from a given set of elements\ndef combinations(elements, k):\n    if k == 0:\n        return [()]\n    if len(elements) == 0:\n        return []\n",
        "generated_testcode": "assert add_K_element([(1, 2, 3, 4, 5), 2) == (3, 4, 5, 6, 7)\n",
        "test": "assert add_K_element([(1, 3, 4), (2, 4, 6), (3, 8, 1)], 4) == [(5, 7, 8), (6, 8, 10), (7, 12, 5)]\nassert add_K_element([(1, 2, 3), (4, 5, 6), (7, 8, 9)], 8) == [(9, 10, 11), (12, 13, 14), (15, 16, 17)]\nassert add_K_element([(11, 12, 13), (14, 15, 16), (17, 18, 19)], 9) == [(20, 21, 22), (23, 24, 25), (26, 27, 28)]",
        "canonical_solution": "def add_K_element(test_list, K):\r\n  res = [tuple(j + K for j in sub ) for sub in test_list]\r\n  return (res) "
    },
    {
        "number": 364,
        "prompt": "Write a function to find the number of flips required to make the given binary string a sequence of alternate characters.\ndef make_flip(ch): \n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    flips = 0\n    i = 0\n    while i < len(ch):\n        if ch[i] == '0':\n            if i % 2 == 0:\n                flips += 1\n            elif ch[i] == '1':\n                flips += 2\n            i += 1\n    return flips\n\n# Test cases\nprint(make_flip(\"010101\")) # Output: 1\nprint(make_flip(\"1010101010\")) # Output: 2\nprint(make_flip(\"010101101010\")) # Output: 1\nprint(make_flip(\"1001100101001101010\")) # Output: 4\nprint(make_flip(\"0101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010",
        "generated_testcode": "assert make_flip('1010101010101') == 2\n",
        "test": "assert min_flip_to_make_string_alternate(\"0001010111\") == 2\nassert min_flip_to_make_string_alternate(\"001\") == 1\nassert min_flip_to_make_string_alternate(\"010111011\") == 2 ",
        "canonical_solution": "def make_flip(ch): \r\n\treturn '1' if (ch == '0') else '0'\r\ndef get_flip_with_starting_charcter(str, expected): \r\n\tflip_count = 0\r\n\tfor i in range(len( str)): \r\n\t\tif (str[i] != expected): \r\n\t\t\tflip_count += 1\r\n\t\texpected = make_flip(expected) \r\n\treturn flip_count \r\ndef min_flip_to_make_string_alternate(str): \r\n\treturn min(get_flip_with_starting_charcter(str, '0'),get_flip_with_starting_charcter(str, '1')) "
    },
    {
        "number": 365,
        "prompt": "Write a python function to count the number of digits of a given number.\ndef count_Digit(n):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    count = 0\n    while n > 0:\n        count += 1\n        n //= 10\n    return count\n\n# Test the function\nprint(count_Digit(123456)) # Output: 5\nprint(count_Digit(987654321)) # Output: 6\nprint(count_Digit(10)) # Output: 1\nprint(count_Digit(0) # Output: 1 ",
        "generated_testcode": "assert count_Digit(12345) == 4\n",
        "test": "assert count_Digit(12345) == 5\nassert count_Digit(11223305) == 8\nassert count_Digit(4123459) == 7",
        "canonical_solution": "def count_Digit(n):\r\n    count = 0\r\n    while n != 0:\r\n        n //= 10\r\n        count += 1\r\n    return count"
    },
    {
        "number": 366,
        "prompt": "Write a python function to find the largest product of the pair of adjacent elements from a given list of integers.\ndef adjacent_num_product(list_nums):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    largest_product = 0\n    for i in range(len(list_nums)):\n        if i < len(list_nums) - 1:\n            current_product = list_nums[i] * list_nums[i+1]\n            if current_product > largest_product:\n                largest_product = current_product\n    return largest_product\n\n\n# Test the function with the given test cases\nprint(adjacent_num_product([1, 2, 3, 4, 5, 6, 7, 8, 9]))  # Output: 24\nprint(adjacent_num_product([2, 5, 9, 4, 6, 7, 8, 3])) # Output: 72\nprint(adjacent_num_product([5, 9, 1, 8, 4, 2, 3])) # Output: 48\nprint(adjacent_num_product([2, 4, 6, 7, 8, 2]))  # Output: 20\nprint(adjacent_num_product([1, -2, 3, 4, 5, -1, 9])) # Output: 45\nprint(adjacent_num_product([-2, 0, 2, -1, -1, 3])) # Output: 0\n\n\n# Test the function with the edge case\nprint(adjacent_num_product([1])) # Output: 0\nprint(",
        "generated_testcode": "assert adjacent_num_product([1, 2, 3, 4, 5, 6, 7, 8]) == 56\n",
        "test": "assert adjacent_num_product([1,2,3,4,5,6]) == 30\nassert adjacent_num_product([1,2,3,4,5]) == 20\nassert adjacent_num_product([2,3]) == 6",
        "canonical_solution": "def adjacent_num_product(list_nums):\r\n    return max(a*b for a, b in zip(list_nums, list_nums[1:]))"
    },
    {
        "number": 367,
        "prompt": "Write a function to check if a binary tree is balanced or not.\n\tdef __init__(self, data): \n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "\t\tself.data = data \n\t\tself.left = None\n\t\tself.right = None\n\tdef is_balanced(self, root):\n\t\tif root is None:\n\t\t\treturn True\n\t\tif root.left is None and root.right is None:\n\t\t\treturn True\n\t\tif self.check_balanced(root.left) and self.check_balanced(root.right):\n\t\t\treturn True\n\t\treturn False\n\n\tdef check_balanced(self, root):\n\t\tif root is None:\n\t\t\treturn True\n\t\tif root.left is None and root.right is None:\n\t\t\treturn True\n\t\tleft_height = self.get_height(root.left)\n\t\tright_height = self.get_height(root.right)\n\t\tif abs(left_height - right_height) <= 1:\n\t\t\treturn True\n\t\treturn False\n\n\tdef get_height(self, node):\n\t\tif node is None:\n\t\t\treturn 0\n\t\tleft_height = self.get_height(node.left)\n\t\tright_height = self.get_height(node.right)\n\t\treturn max(left_height, right_height) + 1\n\n\t\n# Example usage:\n# root = Node(1)\n# root.left = Node(2)\n# root.right = Node(3)\n# root.left.left = Node(4)\n#",
        "generated_testcode": "assert is_balanced(Node(1, Node(2, Node(3), Node(4))), True)\n",
        "test": "assert is_tree_balanced(root) == False\nassert is_tree_balanced(root1) == True\nassert is_tree_balanced(root2) == False ",
        "canonical_solution": "class Node: \r\n\tdef __init__(self, data): \r\n\t\tself.data = data \r\n\t\tself.left = None\r\n\t\tself.right = None\r\ndef get_height(root): \r\n\tif root is None: \r\n\t\treturn 0\r\n\treturn max(get_height(root.left), get_height(root.right)) + 1\r\ndef is_tree_balanced(root): \r\n\tif root is None: \r\n\t\treturn True\r\n\tlh = get_height(root.left) \r\n\trh = get_height(root.right) \r\n\tif (abs(lh - rh) <= 1) and is_tree_balanced( \r\n\troot.left) is True and is_tree_balanced( root.right) is True: \r\n\t\treturn True\r\n\treturn False"
    },
    {
        "number": 368,
        "prompt": "Write a function to repeat the given tuple n times.\ndef repeat_tuples(test_tup, N):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    result = ()\n    for i in range(N):\n        result += test_tup\n    return result\n\n# Test the function\ntest_tup = (1, 2, 3)\nprint(repeat_tuples(test_tup, 3))  # Output: (1, 2, 3, 1, 2, 3, 1, 2, 3)\nprint(repeat_tuples(test_tup, 2))  # Output: (1, 2, 3, 1, 2, 3)\nprint(repeat_tuples(test_tup, 4))  # Output: (1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3)\n\n\n# Write a function to find the sum of the elements of a tuple\ndef sum_tuple(test_tup):\n    return sum(test_tup)\n\n# Test the function\ntest_tup = (1, 2, 3, 4, 5, 6, 7, 8, 9)\nprint(sum_tuple(test_tup))  # Output: 25\n\n\n# Write a function to find the second largest element in a tuple\ndef second_largest(test_tup):\n    sorted_tup = sorted(test_tup)\n    return sorted_tup[-2]\n# Test the function\ntest_tup = (1, ",
        "generated_testcode": "assert repeat_tuples((1, 2, 3), 3) == ((1, 2, 3), (1, 2, 3), (1, 2, 3))\n",
        "test": "assert repeat_tuples((1, 3), 4) == ((1, 3), (1, 3), (1, 3), (1, 3))\nassert repeat_tuples((1, 2), 3) == ((1, 2), (1, 2), (1, 2))\nassert repeat_tuples((3, 4), 5) == ((3, 4), (3, 4), (3, 4), (3, 4), (3, 4))",
        "canonical_solution": "def repeat_tuples(test_tup, N):\r\n  res = ((test_tup, ) * N)\r\n  return (res) "
    },
    {
        "number": 369,
        "prompt": "Write a function to find the lateral surface area of cuboid\ndef lateralsurface_cuboid(l,w,h):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    return 2 * (l*w + w*h + h*l)\n\n#Test the function\nprint(lateralsurface_cuboid(3, 4, 5)) # Output: 36\nprint(lateralsurface_cuboid(12, 9, 10)) # Output: 72\nprint(lateralsurface_cuboid(10, 5, 6)) # Output: 30\n\n\n#Write a function to find the lateral surface area of a rectangular prism\ndef lateralsurface_rectangularprism(a, b, c, d):\n    return 2 * (a*b + b*c + c*a) + 2 * (a*d + b*d + c*d)\n\n#Test the function\nprint(lateralsurface_rectangularprism(3, 4, 5)) # Output: 66\nprint(lateralsurface_rectangularprism(12, 9, 10)) # Output: 150\nprint(lateralsurface_rectangularprism(10, 5, 6)) # Output: 50\n\n#Write a function to find the volume of a cuboid\ndef volume_cuboid(l, w, h):\n    return l * w * h\n\n#Test the function\nprint(volume_cuboid(3, 4, 5)) # Output: 60\nprint(volume_cub",
        "generated_testcode": "assert lateralsurface_cuboid(2,3,4) == 24\n",
        "test": "assert lateralsurface_cuboid(8,5,6)==156\nassert lateralsurface_cuboid(7,9,10)==320\nassert lateralsurface_cuboid(10,20,30)==1800",
        "canonical_solution": "def lateralsurface_cuboid(l,w,h):\r\n  LSA = 2*h*(l+w)\r\n  return LSA"
    },
    {
        "number": 370,
        "prompt": "Write a function to sort a tuple by its float element.\ndef float_sort(price):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    return sorted(price, key=lambda x: x[1])\n\n# Test the function with the given tuple\nprice = [(1, 1.23), (2, 4.56), (3, 3.4), (4, 2.1), (5, 5.67)]\nprint(float_sort(price))\n\n\n# Output: [(4, 2.1), (3, 3.4), (1, 1.23), (5, 5.67)] ",
        "generated_testcode": "assert float_sort(()) == ()\n",
        "test": "assert float_sort([('item1', '12.20'), ('item2', '15.10'), ('item3', '24.5')])==[('item3', '24.5'), ('item2', '15.10'), ('item1', '12.20')] \nassert float_sort([('item1', '15'), ('item2', '10'), ('item3', '20')])==[('item3', '20'), ('item1', '15'), ('item2', '10')] \nassert float_sort([('item1', '5'), ('item2', '10'), ('item3', '14')])==[('item3', '14'), ('item2', '10'), ('item1', '5')] ",
        "canonical_solution": "def float_sort(price):\r\n  float_sort=sorted(price, key=lambda x: float(x[1]), reverse=True)\r\n  return float_sort"
    },
    {
        "number": 371,
        "prompt": "Write a function to find the smallest missing element in a sorted array.\ndef smallest_missing(A, left_element, right_element):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    if left_element == None or right_element == None:\n        return None\n    if left_element > right_element:\n        return None\n\n    for i in range(left_element, right_element+1):\n        if i not in A:\n            return i\n        if i < right_element and i+1 not in A:\n            return i+1\n    return None\n\n#Test the function with the given test cases\nprint(smallest_missing([1,2,3,4,5,6,7,9], 9, 15)) #Output: 8\nprint(smallest_missing([4,5,6,7,8,9,10], 10, 15)) #Output: 1\nprint(smallest_missing([1,2,3,4,5,6,7,8,9], 9, 15)) #Output: 10\nprint(smallest_missing([1,2,3,4,5,6,7,8,9], 10, 15)) #Output: 10\nprint(smallest_missing([1,2,3,4,5,6,7,8,9,10], 10, 15)) #Output: None\nprint(smallest_missing([1,2,3,4,6,7,8,9], 9, 15)) #Output: 5\nprint(smallest_missing([1,2,3,4,5,7,8,",
        "generated_testcode": "assert smallest_missing([1, 2, 3, 4, 5, 6, 7, 9], 1, 10) == 8\n",
        "test": "assert smallest_missing([0, 1, 2, 3, 4, 5, 6], 0, 6) == 7\nassert smallest_missing([0, 1, 2, 6, 9, 11, 15], 0, 6) == 3\nassert smallest_missing([1, 2, 3, 4, 6, 9, 11, 15], 0, 7) == 0",
        "canonical_solution": "def smallest_missing(A, left_element, right_element):\r\n    if left_element > right_element:\r\n        return left_element\r\n    mid = left_element + (right_element - left_element) // 2\r\n    if A[mid] == mid:\r\n        return smallest_missing(A, mid + 1, right_element)\r\n    else:\r\n        return smallest_missing(A, left_element, mid - 1)"
    },
    {
        "number": 372,
        "prompt": "Write a function to sort a given list of elements in ascending order using heap queue algorithm.\ndef heap_assending(nums):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    def heapify(arr, n, i):\n        largest = i\n        left = 2 * i + 1\n        right = 2 * i + 2\n\n        if left < n and arr[left] > arr[largest]:\n            largest = left\n\n        if right < n and arr[right] > arr[largest]:\n            largest = right\n\n        if largest != i:\n            arr[i], arr[largest] = arr[largest], arr[i]\n            heapify(arr, n, largest)\n\n\n    for i in range(len(nums) // 2 - 1, -1, -1):\n        heapify(nums, len(nums), i)\n\n\n    for i in range(len(nums) - 1, 0, -1):\n        nums[0], nums[i] = nums[i], nums[0]\n        heapify(nums, i, 0)\n\n    return nums\n\n\n\n# Test the function with an example\nnums = [4, 10, 3, 5, 1, 2, 6, 9, 8, 7]\nprint(heap_assending(nums))\n\n",
        "generated_testcode": "assert heap_assending([3, 1, 4, 2, 5, 7, 6, 8, 9, 0, 10] ) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n",
        "test": "assert heap_assending([18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1])==[1, 2, 3, 4, 7, 8, 9, 9, 10, 14, 18]\nassert heap_assending([25, 35, 22, 85, 14, 65, 75, 25, 58])==[14, 22, 25, 25, 35, 58, 65, 75, 85]\nassert heap_assending([1, 3, 5, 7, 9, 2, 4, 6, 8, 0])==[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]",
        "canonical_solution": "import heapq as hq\r\ndef heap_assending(nums):\r\n  hq.heapify(nums)\r\n  s_result = [hq.heappop(nums) for i in range(len(nums))]\r\n  return s_result"
    },
    {
        "number": 373,
        "prompt": "Write a function to find the volume of a cuboid.\ndef volume_cuboid(l,w,h):\n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    \"\"\"\n    Takes three arguments l,w,h and returns the volume of a cuboid\n    \"\"\"\n    return l * w * h\n\n# Test the function with some inputs\nprint(volume_cuboid(3, 4, 5)) # Output: 60\nprint(volume_cuboid(10, 12, 15)) # Output: 180\nprint(volume_cuboid(2, 7, 3)) # Output: 42\n\n\n# Write a function to find the area of a rectangle\ndef area_rectangle(length, width):\n    \"\"\"\n    Takes two arguments length and width and returns the area of a rectangle\n    \"\"\"\n    return length * width\n\n# Test the function with some inputs\nprint(area_rectangle(5, 10)) # Output: 50\nprint(area_rectangle(7, 8)) # Output: 56\nprint(area_rectangle(12, 15)) # Output: 120\n\n\n# Write a function to find the area of a circle\nimport math\ndef area_circle(radius):\n    \"\"\"\n    Takes a radius and returns the area of a circle\n    \"\"\"\n    return math.pi * radius ** 2\n\n# Test the function with some inputs\nprint(area_circle(5)) # Output: 78.5398163339744483\nprint(area_circle(10)) # Output: 314",
        "generated_testcode": "assert volume_cuboid(2,3,4) == 24\n",
        "test": "assert volume_cuboid(1,2,3)==6\nassert volume_cuboid(5,7,9)==315\nassert volume_cuboid(10,15,21)==3150",
        "canonical_solution": "def volume_cuboid(l,w,h):\r\n  volume=l*w*h\r\n  return volume"
    },
    {
        "number": 374,
        "prompt": "Write a function to print all permutations of a given string including duplicates.\ndef permute_string(str):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    if len(str) == 0:\n        return []\n    if len(str) == 1:\n        return [str]\n    res = []\n    for i in range(len(str)):\n        first_char = str[i]\n        remaining_str = str[:i] + str[i+1:]\n        for perm in permute_string(remaining_str):\n            for j in range(len(perm)+1):\n                res.append(perm[:j] + first_char + perm[j:])\n    return res\n\n\n# Test case\nprint(permute_string('abc')) # ['abc', 'acb', 'bac', 'bca', 'cab', 'cba', 'acb', 'cba']\nprint(permute_string('abb')) # ['abb', 'bab', 'ab', 'ba', 'ba', 'abb', 'ba']\nprint(permute_string('aab')) # ['aab', 'aba', 'aba', 'baa', 'baa', 'aab', 'aba']\nprint(permute_string('aaa')) # ['aaa']\n",
        "generated_testcode": "assert permute_string(\"abc\") == ['abc', 'acb', 'bac', 'bca', 'cab', 'cba', 'acb', 'cba']\n",
        "test": "assert permute_string('ab')==['ab', 'ba']\nassert permute_string('abc')==['abc', 'bac', 'bca', 'acb', 'cab', 'cba']\nassert permute_string('abcd')==['abcd', 'bacd', 'bcad', 'bcda', 'acbd', 'cabd', 'cbad', 'cbda', 'acdb', 'cadb', 'cdab', 'cdba', 'abdc', 'badc', 'bdac', 'bdca', 'adbc', 'dabc', 'dbac', 'dbca', 'adcb', 'dacb', 'dcab', 'dcba']",
        "canonical_solution": "def permute_string(str):\r\n    if len(str) == 0:\r\n        return ['']\r\n    prev_list = permute_string(str[1:len(str)])\r\n    next_list = []\r\n    for i in range(0,len(prev_list)):\r\n        for j in range(0,len(str)):\r\n            new_str = prev_list[i][0:j]+str[0]+prev_list[i][j:len(str)-1]\r\n            if new_str not in next_list:\r\n                next_list.append(new_str)\r\n    return next_list"
    },
    {
        "number": 375,
        "prompt": "Write a function to round the given number to the nearest multiple of a specific number.\ndef round_num(n,m):\n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    return (int(n/m) * m)\n\n# Test the function with the given test cases\nprint(round_num(15,5)) # Output: 10\nprint(round_num(18,5)) # Output: 15\nprint(round_num(12,4)) # Output: 12\nprint(round_num(27,3)) # Output: 24\nprint(round_num(100,2.5)) # Output: 10.0\nprint(round_num(23,7)) # Output: 23\nprint(round_num(23,7.8)) # Output: 23.0",
        "generated_testcode": "assert round_num(10,5) == 10\n",
        "test": "assert round_num(4722,10)==4720\nassert round_num(1111,5)==1110\nassert round_num(219,2)==218",
        "canonical_solution": "def round_num(n,m):\r\n    a = (n //m) * m\r\n    b = a + m\r\n    return (b if n - a > b - n else a)"
    },
    {
        "number": 376,
        "prompt": "Write a function to remove tuple elements that occur more than once and replace the duplicates with some custom value.\ndef remove_replica(test_tup):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    d = {}\n    result_tup = ()\n    for i in test_tup:\n        if i not in d:\n            d[i] = True\n            result_tup += (i,)\n    return result_tup\n\n# Test the function\nprint(remove_replica((1,2,3,2,3,4,5,6,6,7,8,8,8)) # Output: (1,2,4,5,6,7,8)\nprint(remove_replica((1,2,3,4,5,6,7,8,8)) # Output: (1,2,3,4,5,6,7,8)\nprint(remove_replica((1,2,2,3,3,4,4,5,6,7,7,8,8,8)) # Output: (1,)\n",
        "generated_testcode": "assert remove_replica(()) == ()\n",
        "test": "assert remove_replica((1, 1, 4, 4, 4, 5, 5, 6, 7, 7)) == (1, 'MSP', 4, 'MSP', 'MSP', 5, 'MSP', 6, 7, 'MSP')\nassert remove_replica((2, 3, 4, 4, 5, 6, 6, 7, 8, 9, 9)) == (2, 3, 4, 'MSP', 5, 6, 'MSP', 7, 8, 9, 'MSP')\nassert remove_replica((2, 2, 5, 4, 5, 7, 5, 6, 7, 7)) == (2, 'MSP', 5, 4, 'MSP', 7, 'MSP', 6, 'MSP', 'MSP')",
        "canonical_solution": "def remove_replica(test_tup):\r\n  temp = set()\r\n  res = tuple(ele if ele not in temp and not temp.add(ele) \r\n\t\t\t\telse 'MSP' for ele in test_tup)\r\n  return (res)"
    },
    {
        "number": 377,
        "prompt": "Write a python function to remove all occurrences of a character in a given string.\ndef remove_Char(s,c) :  \n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    # Removing all occurrences of the character c from the string s\n    return s.replace(c,'')\n\n#Example usage:\ns = \"hello, how are you?\"\nc = \"o\"\nprint(remove_Char(s,c))\n#Output: \"hell, hw r y?\"\n",
        "generated_testcode": "assert remove_Char(\"hello world\", \"l\") == \"heo word\"\n",
        "test": "assert remove_Char(\"aba\",'a') == \"b\"\nassert remove_Char(\"toggle\",'g') == \"tole\"\nassert remove_Char(\"aabbc\",'b') == \"aac\"",
        "canonical_solution": "def remove_Char(s,c) :  \r\n    counts = s.count(c) \r\n    s = list(s) \r\n    while counts :  \r\n        s.remove(c) \r\n        counts -= 1 \r\n    s = '' . join(s)   \r\n    return (s) "
    },
    {
        "number": 378,
        "prompt": "Write a python function to shift last element to first position in the given list.\ndef move_first(test_list):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    last_element = test_list[-1]\n    test_list.pop()\n    test_list.insert(0, last_element)\n    return test_list\n\n#Test the function\nprint(move_first([1, 2, 3, 4, 5]))\nprint(move_first([10, 20, 30, 40, 50]))\nprint(move_first([5, 4, 3, 2, 1]))\nprint(move_first([\"apple\", \"banana\", \"orange\", \"grapes\", \"mango\", \"kiwi\", \"pear\", \"strawberry\"] )\n",
        "generated_testcode": "assert move_first([1,2,3,4,5,6,7]) == [7,1,2,3,4,5,6]\n",
        "test": "assert move_first([1,2,3,4]) == [4,1,2,3]\nassert move_first([0,1,2,3]) == [3,0,1,2]\nassert move_first([9,8,7,1]) == [1,9,8,7]",
        "canonical_solution": "def move_first(test_list):\r\n  test_list = test_list[-1:] + test_list[:-1]  \r\n  return test_list"
    },
    {
        "number": 379,
        "prompt": "Write a function to find the surface area of a cuboid.\ndef surfacearea_cuboid(l,w,h):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": true,
        "answer": "    return 2*(l*w + w*h + l*h)\n\n# test the function\nprint(surfacearea_cuboid(4,5,3)) # expected output: 32\nprint(surfacearea_cuboid(2,6,7)) # expected output: 46\nprint(surfacearea_cuboid(10,8,12)) # expected output: 96\n\n\n# Write a function to find the volume of a cuboid\ndef volume_cuboid(l,w,h):\n    return l*w*h\n\n# test the function\nprint(volume_cuboid(4,5,3)) # expected output: 60\nprint(volume_cuboid(2,6,7)) # expected output: 42\nprint(volume_cuboid(10,8,12)) # expected output: 1200\n\n\n# Write a function to find the diagonal of a cuboid\ndef diagonal_cuboid(l,w,h):\n    return ((l**2 + w**2 + h**2)**0.5)\n# test the function\nprint(diagonal_cuboid(4,5,3)) # expected output: 5.8309\nprint(diagonal_cuboid(2,6,7)) # expected output: 8.485\nprint(diagonal_cuboid(10,8,12)) # expected output: 19.039",
        "generated_testcode": "assert surfacearea_cuboid(2,3,4) == 52\n",
        "test": "assert surfacearea_cuboid(1,2,3)==22\nassert surfacearea_cuboid(5,7,9)==286\nassert surfacearea_cuboid(10,15,21)==1350",
        "canonical_solution": "def surfacearea_cuboid(l,w,h):\r\n  SA = 2*(l*w + l * h + w * h)\r\n  return SA"
    },
    {
        "number": 380,
        "prompt": "Write a function to generate a two-dimensional array.\ndef multi_list(rownum,colnum):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    arr = []\n    for i in range(rownum):\n        arr.append([])\n        for j in range(colnum):\n            arr[i].append(0)\n    return arr\n\n# Test the function\nprint(multi_list(3,4)) ",
        "generated_testcode": "assert multi_list(3,4) == [[0,0,0,0,0],[0,0,0,0,0],[0,0,0,0,0]]\n",
        "test": "assert multi_list(3,4)==[[0, 0, 0, 0], [0, 1, 2, 3], [0, 2, 4, 6]] \nassert multi_list(5,7)==[[0, 0, 0, 0, 0, 0, 0], [0, 1, 2, 3, 4, 5, 6], [0, 2, 4, 6, 8, 10, 12], [0, 3, 6, 9, 12, 15, 18], [0, 4, 8, 12, 16, 20, 24]]\nassert multi_list(10,15)==[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14], [0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28], [0, 3, 6, 9, 12, 15, 18, 21, 24, 27, 30, 33, 36, 39, 42], [0, 4, 8, 12, 16, 20, 24, 28, 32, 36, 40, 44, 48, 52, 56], [0, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70], [0, 6, 12, 18, 24, 30, 36, 42, 48, 54, 60, 66, 72, 78, 84], [0, 7, 14, 21, 28, 35, 42, 49, 56, 63, 70, 77, 84, 91, 98], [0, 8, 16, 24, 32, 40, 48, 56, 64, 72, 80, 88, 96, 104, 112], [0, 9, 18, 27, 36, 45, 54, 63, 72, 81, 90, 99, 108, 117, 126]]",
        "canonical_solution": "def multi_list(rownum,colnum):\r\n  multi_list = [[0 for col in range(colnum)] for row in range(rownum)]\r\n  for row in range(rownum):\r\n    for col in range(colnum):\r\n        multi_list[row][col]= row*col\r\n  return multi_list\r\n"
    },
    {
        "number": 381,
        "prompt": "Write a function to sort a list of lists by a given index of the inner list.\ndef index_on_inner_list(list_data, index_no):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    \"\"\"\n    Sorts a list of lists by a given index of the inner list.\n\n    :param list_data: The list of lists to be sorted.\n    :param index_no: The index of the inner list to sort on.\n    :return: The sorted list.\n    \"\"\"\n    return sorted(list_data, key=lambda x: x[index_no])\n\n\n# Example usage:\ndata = [\n    [3, 2, 1],\n    [4, 1, 1],\n    [1, 4, 3],\n    [2, 3, 3],\n    [5, 4, 2]\n]\nprint(index_on_inner_list(data, 0))\n# Output: [[1, 4, 3], [2, 3, 3], [3, 2, 1], [4, 1, 1], [5, 4, 2]]\n\nprint(index_on_inner_list(data, 1))\n# Output: [[3, 2, 1], [4, 1, 1], [1, 4, 3], [2, 3, 3], [5, 4, 2]]\n\nprint(index_on_inner_list(data, 2))\n# Output: [[3, 2, 1], [1, 4, 3], [2, 3, 3], [4, 1, 1], [5, 4, 2",
        "generated_testcode": "assert index_on_inner_list([[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12]], 1) == [[1, 2, 3], [7, 8, 9], [4, 5, 6], [10, 11, 12]]\n",
        "test": "assert index_on_inner_list([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,0)==[('Beau Turnbull', 94, 98), ('Brady Kent', 97, 96), ('Greyson Fulton', 98, 99), ('Wyatt Knott', 91, 94)]\nassert index_on_inner_list([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,1)==[('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98), ('Brady Kent', 97, 96), ('Greyson Fulton', 98, 99)]\nassert index_on_inner_list([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,2)==[('Wyatt Knott', 91, 94), ('Brady Kent', 97, 96), ('Beau Turnbull', 94, 98), ('Greyson Fulton', 98, 99)]",
        "canonical_solution": "from operator import itemgetter\r\ndef index_on_inner_list(list_data, index_no):\r\n    result = sorted(list_data, key=itemgetter(index_no))\r\n    return result"
    },
    {
        "number": 382,
        "prompt": "Write a function to find the number of rotations in a circularly sorted array.\ndef find_rotation_count(A):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    n = len(A)\n    # If there are less than two elements in the array, there can be no rotations\n    if n < 2:\n        return 0\n\n    # If the array is already sorted, return 0\n    if A[0] < A[n-1]:\n        return 0\n\n    # If the last element is greater than the first element, there is no rotation\n    if A[n-1] < A[0]:\n        return 1\n\n    # Find the index of the minimum element\n    min_index = 0\n    for i in range(1, n):\n        if A[i] < A[min_index]:\n            min_index = i\n\n    # If the minimum element is the first element, all elements have rotated at least once\n    if min_index == 0:\n        return n\n\n    # Count the number of rotations\n    count = 0\n    for i in range(1, n):\n        if A[i] < A[0]:\n            count += 1\n    return count\n\n\n# Test the function\nA = [3, 4, 5, 1, 2, 6, 7, 0, 1]\nprint(find_rotation_count(A)) # Output: 4\n\nA = [4, 5, 6, 7, 1, 2, 3, 1]\nprint(find_rotation_count(A)) # Output: 1\nA = [1",
        "generated_testcode": "assert find_rotation_count([4, 5, 6, 7, 1, 2, 3, 4]) == 3\n",
        "test": "assert find_rotation_count([8, 9, 10, 1, 2, 3, 4, 5, 6, 7]) == 3\nassert find_rotation_count([8, 9, 10,2, 5, 6]) == 3\nassert find_rotation_count([2, 5, 6, 8, 9, 10]) == 0",
        "canonical_solution": "def find_rotation_count(A):\r\n    (left, right) = (0, len(A) - 1)\r\n    while left <= right:\r\n        if A[left] <= A[right]:\r\n            return left\r\n        mid = (left + right) // 2\r\n        next = (mid + 1) % len(A)\r\n        prev = (mid - 1 + len(A)) % len(A)\r\n        if A[mid] <= A[next] and A[mid] <= A[prev]:\r\n            return mid\r\n        elif A[mid] <= A[right]:\r\n            right = mid - 1\r\n        elif A[mid] >= A[left]:\r\n            left = mid + 1\r\n    return -1"
    },
    {
        "number": 383,
        "prompt": "Write a python function to toggle all odd bits of a given number.\ndef even_bit_toggle_number(n) : \n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    \"\"\"\n    This function takes an integer as input and returns the integer where all odd bits are toggled.\n    \"\"\"\n    n = bin(n) # converting the integer to binary \n    n = n[2:] # removing the 0b prefix\n    n = list(n)\n    for i in range(len(n)) :\n        if n[i] == '1' :\n            n[i] = '0'\n        else :\n            n[i] = '1'\n    n = ''.join(n)\n    n = int(n, 2) # converting it back to integer\n    return n\n\n# test the function\nnum = 10\nprint(even_bit_toggle_number(num)) ",
        "generated_testcode": "assert even_bit_toggle_number(10) == 9\n",
        "test": "assert even_bit_toggle_number(10) == 15\nassert even_bit_toggle_number(20) == 1\nassert even_bit_toggle_number(30) == 11",
        "canonical_solution": "def even_bit_toggle_number(n) : \r\n    res = 0; count = 0; temp = n    \r\n    while(temp > 0 ) : \r\n        if (count % 2 == 0) : \r\n            res = res | (1 << count)      \r\n        count = count + 1\r\n        temp >>= 1 \r\n    return n ^ res "
    },
    {
        "number": 384,
        "prompt": "Write a python function to find the frequency of the smallest value in a given array.\ndef frequency_Of_Smallest(n,arr): \n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    if len(arr) == 0:\n        return None\n    min_val = arr[0]\n    max_freq = 0\n    for i in range(len(arr)):\n        freq = 0\n        for j in range(len(arr)):\n            if arr[i] == arr[j]:\n                freq += 1\n        if freq > max_freq:\n            max_freq = freq\n            min_val = arr[i]\n    return max_freq\n\n#Example:\nn = 4\narr = [1, 2, 3, 4, 2, 3, 1, 3, 1, 5, 4, 4]\nprint(frequency_Of_Smallest(n,arr)) # Output: 3\n\nn = 5\narr = [1, 2, 3, 4, 5, 6, 7]\nprint(frequency_Of_Smallest(n,arr)) # Output: 1\n\nn = 0\narr = []\nprint(frequency_Of_Smallest(n,arr)) # Output: None\n",
        "generated_testcode": "assert frequency_Of_Smallest(5, [1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9]) == 3\n",
        "test": "assert frequency_Of_Smallest(5,[1,2,3,4,3]) == 1\nassert frequency_Of_Smallest(7,[3,1,2,5,6,2,3]) == 1\nassert frequency_Of_Smallest(7,[3,3,6,3,7,4,9]) == 3",
        "canonical_solution": "def frequency_Of_Smallest(n,arr): \r\n    mn = arr[0] \r\n    freq = 1\r\n    for i in range(1,n): \r\n        if (arr[i] < mn): \r\n            mn = arr[i] \r\n            freq = 1\r\n        elif (arr[i] == mn): \r\n            freq += 1\r\n    return freq "
    },
    {
        "number": 385,
        "prompt": "Write a function to find the n'th perrin number using recursion.\ndef get_perrin(n):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": true,
        "answer": "    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        return get_perrin(n-1) + get_perrin(n-2)\n\n\nprint(get_perrin(10))\n\n\n# Output: 143\n\n\n# Write a function to find the n'th perrin number using iteration\ndef get_perrin_iter(n):\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        first_num = 1\n        second_num = 2\n        for i in range(3, n+1):\n            third_num = first_num + second_num\n            first_num = second_num\n            second_num = third_num\n        return third_num\n\n\nprint(get_perrin_iter(10))\n\n\n# Output: 143\n\n\n# Write a function to find the n'th perrin number using formula\ndef get_perrin_formula(n):\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        return 2 * get_perrin_formula(n-1) + get_perrin_formula(n-2)\n\n\nprint(get_perrin_formula(10))\n\n\n# Output: 143",
        "generated_testcode": "assert get_perrin(1) == 1\n",
        "test": "assert get_perrin(9) == 12\nassert get_perrin(4) == 2\nassert get_perrin(6) == 5",
        "canonical_solution": "def get_perrin(n):\r\n  if (n == 0):\r\n    return 3\r\n  if (n == 1):\r\n    return 0\r\n  if (n == 2):\r\n    return 2 \r\n  return get_perrin(n - 2) + get_perrin(n - 3)"
    },
    {
        "number": 386,
        "prompt": "Write a function to find out the minimum no of swaps required for bracket balancing in the given string.\ndef swap_count(s):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    stack = []\n    swaps = 0\n    for i in s:\n        if i == '(':\n            stack.append(i)\n        elif i == ')':\n            if not stack:\n                swaps += 1\n            else:\n                stack.pop()\n    if stack:\n        swaps += len(stack)\n    return swaps\n\n# Test cases\nprint(swap_count(\"((()\"))\"))  # Output: 1\nprint(swap_count(\"()()(()\")) # Output: 1\nprint(swap_count(\"(()()))\")) # Output: 0\nprint(swap_count(\"((()))\")) # Output: 0\nprint(swap_count(\"((()))(\")) # Output: 1\nprint(swap_count(\"((((((((((\")) # Output: 6\n\n#Time complexity: O(n)\n#Space complexity: O(n)",
        "generated_testcode": "assert swap_count(\"([])\") == 0\n",
        "test": "assert swap_count(\"[]][][\") == 2\nassert swap_count(\"[[][]]\") == 0\nassert swap_count(\"[[][]]][\") == 1",
        "canonical_solution": "def swap_count(s):\r\n\tchars = s\r\n\tcount_left = 0\r\n\tcount_right = 0\r\n\tswap = 0\r\n\timbalance = 0; \r\n\tfor i in range(len(chars)):\r\n\t\tif chars[i] == '[':\r\n\t\t\tcount_left += 1\r\n\t\t\tif imbalance > 0:\r\n\t\t\t\tswap += imbalance\r\n\t\t\t\timbalance -= 1\r\n\t\telif chars[i] == ']':\r\n\t\t\tcount_right += 1\r\n\t\t\timbalance = (count_right - count_left) \r\n\treturn swap"
    },
    {
        "number": 387,
        "prompt": "Write a python function to check whether the hexadecimal number is even or odd.\ndef even_or_odd(N): \n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    # convert the hexadecimal number to decimal\n    decimal = int(N, 16) \n    # check if the decimal number is even or odd\n    if decimal % 2 == 0:\n        return \"Even\"\n    else:\n        return \"Odd\"\n\n# test the function with a sample input\nprint(even_or_odd(\"A1\"))\n\n# Test the function with another sample input\nprint(even_or_odd(\"123\")) ",
        "generated_testcode": "assert even_or_odd('0x10') == 'even'\n",
        "test": "assert even_or_odd(\"AB3454D\") ==\"Odd\"\nassert even_or_odd(\"ABC\") == \"Even\"\nassert even_or_odd(\"AAD\") == \"Odd\"",
        "canonical_solution": "def even_or_odd(N): \r\n    l = len(N) \r\n    if (N[l-1] =='0'or N[l-1] =='2'or \r\n        N[l-1] =='4'or N[l-1] =='6'or \r\n        N[l-1] =='8'or N[l-1] =='A'or \r\n        N[l-1] =='C'or N[l-1] =='E'): \r\n        return (\"Even\") \r\n    else: \r\n        return (\"Odd\") "
    },
    {
        "number": 388,
        "prompt": "Write a python function to find the highest power of 2 that is less than or equal to n.\ndef highest_Power_of_2(n): \n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    i = 1\n    while (i <= n): \n        i = i << 1\n    return i >> 1 \n\n# test the function \nn = 15\nprint(\"Highest power of 2 less than or equal to\", n, \"is\", highest_Power_of_2(n)) ",
        "generated_testcode": "assert highest_Power_of_2(10) == 4\n",
        "test": "assert highest_Power_of_2(10) == 8\nassert highest_Power_of_2(19) == 16\nassert highest_Power_of_2(32) == 32",
        "canonical_solution": "def highest_Power_of_2(n): \r\n    res = 0; \r\n    for i in range(n, 0, -1): \r\n        if ((i & (i - 1)) == 0): \r\n            res = i; \r\n            break; \r\n    return res; "
    },
    {
        "number": 389,
        "prompt": "Write a function to find the n'th lucas number.\ndef find_lucas(n): \n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    if n == 0: \n        return 2\n    elif n == 1: \n        return 1\n    else: \n        return find_lucas(n - 1) + find_lucas(n - 2) ",
        "generated_testcode": "assert find_lucas(0) == 2\n",
        "test": "assert find_lucas(9) == 76\nassert find_lucas(4) == 7\nassert find_lucas(3) == 4",
        "canonical_solution": "def find_lucas(n): \r\n\tif (n == 0): \r\n\t\treturn 2\r\n\tif (n == 1): \r\n\t\treturn 1\r\n\treturn find_lucas(n - 1) + find_lucas(n - 2) "
    },
    {
        "number": 390,
        "prompt": "Write a function to insert a given string at the beginning of all items in a list.\ndef add_string(list,string):\n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    for i in range(len(list)):\n        list[i] = string + list[i]\n    return list\n\n#Test the function with a sample list\nmy_list = [\"apple\", \"banana\", \"cherry\", \"orange\", \"grape\", \"kiwi\"]\nprint(add_string(my_list, \"fruit-\"))\n#Output: ['fruit-apple', 'fruit-banana', 'fruit-cherry', 'fruit-orange', 'fruit-grape', 'fruit-kiwi']\n\n#Test the function with a sample list\nmy_list = [\"hello\", \"world\", \"how\", \"are\", \"you\"]\nprint(add_string(my_list, \"hello \"))\n#Output: ['hello hello', 'hello world', 'hello are', 'hello you']\n\n#Test the function with an empty list\nmy_list = []\nprint(add_string(my_list, \"hello \"))\n#Output: []\n\n#Test the function with a list with one item\nmy_list = [\"apple\"]\nprint(add_string(my_list, \"fruit-\"))\n#Output: ['fruit-apple'] ",
        "generated_testcode": "assert add_string(['apple', 'banana', 'cherry', 'date'], 'fruit-') == ['fruit-apple', 'fruit-banana', 'fruit-cherry', 'fruit-date']\n",
        "test": "assert add_string([1,2,3,4],'temp{0}')==['temp1', 'temp2', 'temp3', 'temp4']\nassert add_string(['a','b','c','d'], 'python{0}')==[ 'pythona', 'pythonb', 'pythonc', 'pythond']\nassert add_string([5,6,7,8],'string{0}')==['string5', 'string6', 'string7', 'string8']",
        "canonical_solution": "def add_string(list,string):\r\n add_string=[string.format(i) for i in  list]\r\n return add_string"
    },
    {
        "number": 391,
        "prompt": "Write a function to convert more than one list to nested dictionary.\ndef convert_list_dictionary(l1, l2, l3):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    result = {}\n    for i in range(len(l1)):\n        result[l1[i]] = {l2[i]:l3[i]}\n    return result\n\n#Example:\nl1 = ['apple', 'banana', 'orange', 'grape']\nl2 = ['red', 'yellow', 'green']\nl3 = ['fruit', 'fruit', 'fruit']\nprint(convert_list_dictionary(l1, l2, l3))\n#Output: {'apple': {'color': 'red'}, 'banana': {'color': 'yellow'}, 'orange': {'color': 'green'}}\n\nl1 = ['John', 'Peter', 'Sarah', 'Tom']\nl2 = ['male', 'female', 'female']\nl3 = ['student', 'teacher', 'teacher']\nprint(convert_list_dictionary(l1, l2, l3))\n#Output: {'John': {'occupation': 'student'}, 'Peter': {'occupation': 'teacher'}, 'Sarah': {'occupation': 'teacher'}} ",
        "generated_testcode": "assert convert_list_dictionary([\"apple\", \"banana\", \"orange\"], [1, 2, 3], [4, 5, 6]) == {\"apple\": {\"fruit\": 1, \"vegetable\": 2, \"dessert\": 3}, \"banana\": {\"fruit\": 4, \"vegetable\": 5, \"dessert\": 6}, \"orange\": {\"fruit\": 1, \"vegetable\": 2, \"dessert\": 3}}\n",
        "test": "assert convert_list_dictionary([\"S001\", \"S002\", \"S003\", \"S004\"],[\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"] ,[85, 98, 89, 92])==[{'S001': {'Adina Park': 85}}, {'S002': {'Leyton Marsh': 98}}, {'S003': {'Duncan Boyle': 89}}, {'S004': {'Saim Richards': 92}}]\nassert convert_list_dictionary([\"abc\",\"def\",\"ghi\",\"jkl\"],[\"python\",\"program\",\"language\",\"programs\"],[100,200,300,400])==[{'abc':{'python':100}},{'def':{'program':200}},{'ghi':{'language':300}},{'jkl':{'programs':400}}]\nassert convert_list_dictionary([\"A1\",\"A2\",\"A3\",\"A4\"],[\"java\",\"C\",\"C++\",\"DBMS\"],[10,20,30,40])==[{'A1':{'java':10}},{'A2':{'C':20}},{'A3':{'C++':30}},{'A4':{'DBMS':40}}]",
        "canonical_solution": "def convert_list_dictionary(l1, l2, l3):\r\n     result = [{x: {y: z}} for (x, y, z) in zip(l1, l2, l3)]\r\n     return result"
    },
    {
        "number": 392,
        "prompt": "Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\ndef get_max_sum (n):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    memo = {}\n    def helper(n):\n        if n <= 0:\n            return 0\n        if n in memo:\n            return memo[n]\n        if n == 1:\n            return n\n        if n % 3 == 0 and n % 5 == 0:\n            memo[n] = max(n, helper(n/2) + n/2, helper(n/3) + n/3 + n/4, helper(n/5) + n/5)\n        else:\n            memo[n] = max(n, helper(n-1), helper(n/2) + n/2, helper(n/3) + n/3, helper(n/4) + n/4, helper(n/5) + n/5)\n        return memo[n]\n    return helper(n)\n\n\nprint(get_max_sum(100)) # Output: 139\nprint(get_max_sum(50)) # Output: 165\nprint(get_max_sum(10)) # Output: 20\nprint(get_max_sum(20)) # Output: 38\nprint(get_max_sum(500)) # Output: 3318\nprint(get_max_sum(1000)) # Output: 397\nprint(get_max_sum(5000)) # Output: 730\nprint(get_max_sum",
        "generated_testcode": "assert get_max_sum(10) == 120\n",
        "test": "assert get_max_sum(60) == 106\nassert get_max_sum(10) == 12\nassert get_max_sum(2) == 2",
        "canonical_solution": "def get_max_sum (n):\r\n\tres = list()\r\n\tres.append(0)\r\n\tres.append(1)\r\n\ti = 2\r\n\twhile i<n + 1:\r\n\t\tres.append(max(i, (res[int(i / 2)] \r\n\t\t\t\t\t\t+ res[int(i / 3)] +\r\n\t\t\t\t\t\t\tres[int(i / 4)]\r\n\t\t\t\t\t\t+ res[int(i / 5)])))\r\n\t\ti = i + 1\r\n\treturn res[n]"
    },
    {
        "number": 393,
        "prompt": "Write a function to find the list with maximum length using lambda function.\ndef max_length_list(input_list):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    return max(input_list, key=lambda x: len(x))\n\n# Test the function with the example input\ninput_list = [[\"apple\", \"banana\", \"cherry\", \"kiwi\", \"mango\", \"pear\"]]\nprint(max_length_list(input_list)) # Output: \"banana\"\ninput_list = [\"apple\", \"banana\", \"cherry\", \"kiwi\"]\nprint(max_length_list(input_list)) # Output: \"banana\"\ninput_list = [\"hello\", \"world\", \"python\", \"programming\", \"is\", \"fun\"]\nprint(max_length_list(input_list)) # Output: \"programming\" ",
        "generated_testcode": "assert max_length_list([[1, 2, 3, 4, 5, 6, 7, 8, 9]) == 6\n",
        "test": "assert max_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [13, 15, 17])\nassert max_length_list([[1,2,3,4,5],[1,2,3,4],[1,2,3],[1,2],[1]])==(5,[1,2,3,4,5])\nassert max_length_list([[3,4,5],[6,7,8,9],[10,11,12]])==(4,[6,7,8,9])",
        "canonical_solution": "def max_length_list(input_list):\r\n    max_length = max(len(x) for x in input_list )   \r\n    max_list = max(input_list, key = lambda i: len(i))    \r\n    return(max_length, max_list)"
    },
    {
        "number": 394,
        "prompt": "Write a function to check if given tuple is distinct or not.\ndef check_distinct(test_tup):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    if len(set(test_tup) == len(test_tup):\n        return True\n    else:\n        return False\n\n# Test the function\nprint(check_distinct((1,2,3,4,5)) # True\nprint(check_distinct((1,2,2,3,4)) # False\n",
        "generated_testcode": "assert check_distinct((1,2,3,4,5,6,7) == True\n",
        "test": "assert check_distinct((1, 4, 5, 6, 1, 4)) == False\nassert check_distinct((1, 4, 5, 6)) == True\nassert check_distinct((2, 3, 4, 5, 6)) == True",
        "canonical_solution": "def check_distinct(test_tup):\r\n  res = True\r\n  temp = set()\r\n  for ele in test_tup:\r\n    if ele in temp:\r\n      res = False\r\n      break\r\n    temp.add(ele)\r\n  return (res) "
    },
    {
        "number": 395,
        "prompt": "Write a python function to find the first non-repeated character in a given string.\ndef first_non_repeating_character(str1):\n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    char_dict = {}\n    for char in str1:\n        if char in char_dict:\n            char_dict[char] += 1\n        else:\n            char_dict[char] = 1\n    for char in str1:\n        if char_dict[char] == 1:\n            return char\n    return None\n\n# Test cases\nprint(first_non_repeating_character(\"hello\")) # Output: 'h'\nprint(first_non_repeating_character(\"aabbcde\")) # Output: 'e'\nprint(first_non_repeating_character(\"aabbcdd\")) # Output: 'c'\nprint(first_non_repeating_character(\"geeksforgeeks\")) # Output: 'g'\nprint(first_non_repeating_character(\"aabbcd\")) # Output: None\n",
        "generated_testcode": "assert first_non_repeating_character(\"hello\") == \"h\"\n",
        "test": "assert first_non_repeating_character(\"abcabc\") == None\nassert first_non_repeating_character(\"abc\") == \"a\"\nassert first_non_repeating_character(\"ababc\") == \"c\"",
        "canonical_solution": "def first_non_repeating_character(str1):\r\n  char_order = []\r\n  ctr = {}\r\n  for c in str1:\r\n    if c in ctr:\r\n      ctr[c] += 1\r\n    else:\r\n      ctr[c] = 1 \r\n      char_order.append(c)\r\n  for c in char_order:\r\n    if ctr[c] == 1:\r\n      return c\r\n  return None"
    },
    {
        "number": 396,
        "prompt": "Write a function to check whether the given string starts and ends with the same character or not using regex.\ndef check_char(string): \n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    import re\n    pattern = r'^.\\w\\w$'\n    if re.match(pattern, string):\n        return True\n    else:\n        return False\n\n# Test the function with examples\nprint(check_char(\"hello\")) # Output: True\nprint(check_char(\"world\")) # Output: False\nprint(check_char(\"python\")) # Output: True\nprint(check_char(\"racecar\")) # Output: True\nprint(check_char(\"Python\")) # Output: False\nprint(check_char(\"goodbye\")) # Output: True\nprint(check_char(\"hello world\")) # Output: False\nprint(check_char(\"racecar\")) # Output: True\nprint(check_char(\"goodbye\")) # Output: False\nprint(check_char(\"java\")) # Output: False\nprint(check_char(\"A\")) # Output: True\nprint(check_char(\"aaa\")) # Output: False\n\n\n# Another way to check using len() function\ndef check_char(string):\n    if string[0] == string[-1]:\n        return True\n    else:\n        return False\n\n# Test the function with examples\nprint(check_char(\"hello\")) # Output: True\nprint(check_char(\"world\")) # Output: False\nprint(check_char(\"python\")) # Output: True\nprint(check_char(\"racecar\")) # Output: True\nprint(check_char(\"Python\")) # Output: False\nprint(check_char(\"goodbye\")) # Output: True\nprint(check_char(\"hello world",
        "generated_testcode": "assert check_char(\"hello\") == False\n",
        "test": "assert check_char(\"abba\") == \"Valid\"\nassert check_char(\"a\") == \"Valid\"\nassert check_char(\"abcd\") == \"Invalid\"",
        "canonical_solution": "import re  \r\nregex = r'^[a-z]$|^([a-z]).*\\1$'\r\ndef check_char(string): \r\n\tif(re.search(regex, string)): \r\n\t\treturn \"Valid\" \r\n\telse: \r\n\t\treturn \"Invalid\" "
    },
    {
        "number": 397,
        "prompt": "Write a function to find the median of three specific numbers.\ndef median_numbers(a,b,c):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    if a < b:\n        if b < c:\n            if a < c:\n                return a\n            elif b == c:\n                return b\n            else:\n                return c\n        else:\n            if a < c:\n                return c\n            else:\n                return a\n    else:\n        if b < c:\n            return b\n        else:\n            return c\n\nprint(median_numbers(3,5,7)) # Output: 5\nprint(median_numbers(7,5,3)) # Output: 5\nprint(median_numbers(1,5,3)) # Output: 3\n\n\n# Write a function to find the median of four specific numbers\ndef median_numbers(a,b,c,d):\n    numbers = [a,b,c,d]\n    numbers.sort()\n    return numbers[1]\nprint(median_numbers(4,3,7,5)) # Output: 4\nprint(median_numbers(7,5,3,1)) # Output: 4\nprint(median_numbers(1,5,3,2)) # Output: 3\n\n\n# Write a function to find the median of five specific numbers\ndef median_numbers(a,b,c,d,e):\n    numbers = [a,b,c,d,e]\n    numbers.sort()\n    if len(numbers) % 2 == 0:\n        return (numbers[2] + numbers[3]) / 2\n    else",
        "generated_testcode": "assert median_numbers(1,2,3) == 2\n",
        "test": "assert median_numbers(25,55,65)==55.0\nassert median_numbers(20,10,30)==20.0\nassert median_numbers(15,45,75)==45.0",
        "canonical_solution": "def median_numbers(a,b,c):\r\n if a > b:\r\n    if a < c:\r\n        median = a\r\n    elif b > c:\r\n        median = b\r\n    else:\r\n        median = c\r\n else:\r\n    if a > c:\r\n        median = a\r\n    elif b < c:\r\n        median = b\r\n    else:\r\n        median = c\r\n return median"
    },
    {
        "number": 398,
        "prompt": "Write a function to compute the sum of digits of each number of a given list.\ndef sum_of_digits(nums):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    result = []\n    for num in nums:\n        digit_sum = 0\n        while num > 0:\n            digit_sum += num % 10\n            num //= 10\n        result.append(digit_sum)\n    return result\n\n\n# Test the function with some sample inputs\nprint(sum_of_digits([123, 456, 789, 1000, 987])) # Output: [6, 15, 13, 1, 9]\nprint(sum_of_digits([12345, 67890])) # Output: [15, 22]\nprint(sum_of_digits([0, 9, 9876543210])) # Output: [1, 9, 1]",
        "generated_testcode": "assert sum_of_digits([123, 456, 789]) == [6, 15, 16]\n",
        "test": "assert sum_of_digits([10,2,56])==14\nassert sum_of_digits([[10,20,4,5,'b',70,'a']])==19\nassert sum_of_digits([10,20,-4,5,-70])==19",
        "canonical_solution": "def sum_of_digits(nums):\r\n    return sum(int(el) for n in nums for el in str(n) if el.isdigit())"
    },
    {
        "number": 399,
        "prompt": "Write a function to perform the mathematical bitwise xor operation across the given tuples.\ndef bitwise_xor(test_tup1, test_tup2):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    result = ()\n    for i in range(len(test_tup1)):\n        result += (test_tup1[i] ^ test_tup2[i],)\n    return result\n\n# Test cases\nprint(bitwise_xor((1, 2, 3, 4, 5, 6), (5, 6, 7, 8, 9)) # Output: (1, 2, 3, 5, 13)\nprint(bitwise_xor((1, 2, 3, 4, 5), (6, 7, 8, 9)) # Output: (7, 5, 3, 3)\nprint(bitwise_xor((1, 1, 1, 1), (1, 2, 3, 4)) # Output: (2, 3, 5, 5)\nprint(bitwise_xor((0, 0, 0, 0), (1, 1, 1, 1)) # Output: (1, 1, 1, 1)\n",
        "generated_testcode": "assert bitwise_xor((1, 2, 3, 4, 5), (6, 7, 8, 9)) == (7, 5, 3, 1)\n",
        "test": "assert bitwise_xor((10, 4, 6, 9), (5, 2, 3, 3)) == (15, 6, 5, 10)\nassert bitwise_xor((11, 5, 7, 10), (6, 3, 4, 4)) == (13, 6, 3, 14)\nassert bitwise_xor((12, 6, 8, 11), (7, 4, 5, 6)) == (11, 2, 13, 13)",
        "canonical_solution": "def bitwise_xor(test_tup1, test_tup2):\r\n  res = tuple(ele1 ^ ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\r\n  return (res) "
    },
    {
        "number": 400,
        "prompt": "Write a function to extract the frequency of unique tuples in the given list order irrespective.\ndef extract_freq(test_list):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    freq = {}\n    for i in range(len(test_list)):\n        tup = tuple(test_list[i])\n        if tup in freq:\n            freq[tup] += 1\n        else:\n            freq[tup] = 1\n    return freq\n\n\n# Test the function\ntest_list = [(1, 2, 3), (2, 3, 4), (1, 2, 3), (4, 5, 6), (1, 2, 3), (1, 2, 3), (4, 5, 6), (7, 8, 9)]\nprint(extract_freq(test_list))\n\n# Output: {(1, 2, 3): 3, (2, 3, 4): 1, (4, 5, 6): 2, (7, 8, 9): 1}\n\ntest_list = [(1, 2, 3), (2, 3, 4), (1, 2, 3), (4, 5, 6), (1, 2, 3), (1, 2, 3), (4, 5, 6), (7, 8, 9), (1, 2, 3), (4, 5, 6)]\nprint(extract_freq(test_list))\n# Output: {(1, 2, 3): 4, (2, ",
        "generated_testcode": "assert extract_freq([\"apple\", \"banana\", \"apple\", \"orange\", \"banana\", \"apple\", \"orange\", \"banana\", \"apple\", \"orange\", \"banana\", \"apple\", \"orange\", \"banana\", \"apple\", \"orange\"] == {(\"apple\", 4), (\"banana\", 4), (\"orange\", 4)}\n",
        "test": "assert extract_freq([(3, 4), (1, 2), (4, 3), (5, 6)] ) == 3\nassert extract_freq([(4, 15), (2, 3), (5, 4), (6, 7)] ) == 4\nassert extract_freq([(5, 16), (2, 3), (6, 5), (6, 9)] ) == 4",
        "canonical_solution": "def extract_freq(test_list):\r\n  res = len(list(set(tuple(sorted(sub)) for sub in test_list)))\r\n  return (res)"
    },
    {
        "number": 401,
        "prompt": "Write a function to perform index wise addition of tuple elements in the given two nested tuples.\ndef add_nested_tuples(test_tup1, test_tup2):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    result_tup = ()\n    for i in range(len(test_tup1)):\n        if isinstance(test_tup1[i], tuple):\n            result_tup += (add_nested_tuples(test_tup1[i], test_tup2[i]),)\n        else:\n            result_tup += (test_tup1[i] + test_tup2[i],)\n    return result_tup\n\n# Test the function\ntest_tup1 = ((1, (2, 3, (4, 5)), 6), (7, 8, 9))\ntest_tup2 = ((2, (4, 6, (8, 10)), 12) , (10, 12, 14))\nprint(add_nested_tuples(test_tup1, test_tup2)) ",
        "generated_testcode": "assert add_nested_tuples(((1, (2, 3), (4, 5)), (1, (2, 3)) ) == (2, (4, 6) )\n",
        "test": "assert add_nested_tuples(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((7, 10), (7, 14), (3, 10), (8, 13))\nassert add_nested_tuples(((2, 4), (5, 6), (3, 10), (2, 11)), ((7, 8), (4, 10), (2, 2), (8, 4))) == ((9, 12), (9, 16), (5, 12), (10, 15))\nassert add_nested_tuples(((3, 5), (6, 7), (4, 11), (3, 12)), ((8, 9), (5, 11), (3, 3), (9, 5))) == ((11, 14), (11, 18), (7, 14), (12, 17))",
        "canonical_solution": "def add_nested_tuples(test_tup1, test_tup2):\r\n  res = tuple(tuple(a + b for a, b in zip(tup1, tup2))\r\n   for tup1, tup2 in zip(test_tup1, test_tup2))\r\n  return (res) "
    },
    {
        "number": 402,
        "prompt": "Write a function to compute the value of ncr%p.\ndef ncr_modp(n, r, p): \n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    # Find n! % p\n    n_fact = 1\n    for i in range(1, n+1):\n        n_fact = (n_fact*i) % p\n    # Find r! % p\n    r_fact = 1\n    for i in range(1, r+1):\n        r_fact = (r_fact*i) % p\n    # Find (n-r)! % p\n    nr_fact = 1\n    for i in range(1, n-r+1):\n        nr_fact = (nr_fact*i) % p\n    # Find (ncr) % p\n    ncr = (n_fact // (nr_fact * r_fact) ) % p\n    return ncr\n\n\n# Example usage:\nprint(ncr_modp(10, 5, 13)) # Output: 7 (10C5 = 252, 252 % 13 = 7)\nprint(ncr_modp(10, 6, 13)) # Output: 10 (10C6 = 42, 42 % 13 = 10)\nprint(ncr_modp(10, 7, 13)) # Output: 5 (10C7 = 120, 120 % 13 = 5)\nprint(ncr_modp(10, 8, 13)) # Output: 9 (10C8",
        "generated_testcode": "assert ncr_modp(5, 2, 100000000000007) == 10\n",
        "test": "assert ncr_modp(10,2,13)==6\nassert ncr_modp(15,12,43)==25\nassert ncr_modp(17,9,18)==10",
        "canonical_solution": "def ncr_modp(n, r, p): \r\n    C = [0 for i in range(r+1)]   \r\n    C[0] = 1\r\n    for i in range(1, n+1): \r\n        for j in range(min(i, r), 0, -1): \r\n            C[j] = (C[j] + C[j-1]) % p   \r\n    return C[r] "
    },
    {
        "number": 403,
        "prompt": "Write a function to check if a url is valid or not using regex.\ndef is_valid_URL(str):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    regex = re.compile(\n        r'^(?:http|ftp)s?://'  # http:// or https://\n        r'(?:(?:[A-Z0-9](?:[A-Z0-9-]{0,61}[A-Z0-9])?\\.)+(?:[A-Z]{2,6}\\.?|[A-Z0-9-]{2,}\\.?)|'  # domain...\n        r'localhost|'  # localhost...\n        r'\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3})'  # ...or ip\n        r'(?::\\d+)?'  # optional port\n        r'(?:/?|[/?]\\S+)$', re.IGNORECASE)\n\n    return re.match(regex, str) is not None\n\n\n# Test the function\nprint(is_valid_URL(\"http://www.example.com\"))  # True\nprint(is_valid_URL(\"https://www.example.com\"))  # True\nprint(is_valid_URL(\"https://www.example.com/test\"))  # True\nprint(is_valid_URL(\"https://www.example.com/test/test2\"))  # True\nprint(is_valid_URL(\"http://www.example.com/test/test2/\"))  # True\nprint(is_valid_URL(\"http://localhost:30000/test/test2\"))  # True",
        "generated_testcode": "assert is_valid_URL(\"https://www.google.com\") == True\n",
        "test": "assert is_valid_URL(\"https://www.google.com\") == True\nassert is_valid_URL(\"https:/www.gmail.com\") == False\nassert is_valid_URL(\"https:// www.redit.com\") == False",
        "canonical_solution": "import re\r\ndef is_valid_URL(str):\r\n\tregex = (\"((http|https)://)(www.)?\" +\r\n\t\t\t\"[a-zA-Z0-9@:%._\\\\+~#?&//=]\" +\r\n\t\t\t\"{2,256}\\\\.[a-z]\" +\r\n\t\t\t\"{2,6}\\\\b([-a-zA-Z0-9@:%\" +\r\n\t\t\t\"._\\\\+~#?&//=]*)\")\r\n\tp = re.compile(regex)\r\n\tif (str == None):\r\n\t\treturn False\r\n\tif(re.search(p, str)):\r\n\t\treturn True\r\n\telse:\r\n\t\treturn False"
    },
    {
        "number": 404,
        "prompt": "Write a python function to find the minimum of two numbers.\ndef minimum(a,b):   \n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": true,
        "answer": "    if a<b:\n        return a\n    else:\n        return b\n\n# Testing the function\nprint(minimum(5,8))\nprint(minimum(10,2))\nprint(minimum(-5,10))\nprint(minimum(-2,3))\n\n",
        "generated_testcode": "assert minimum(5, 10) == 5\n",
        "test": "assert minimum(1,2) == 1\nassert minimum(-5,-4) == -5\nassert minimum(0,0) == 0",
        "canonical_solution": "def minimum(a,b):   \r\n    if a <= b: \r\n        return a \r\n    else: \r\n        return b "
    },
    {
        "number": 405,
        "prompt": "Write a function to check whether an element exists within a tuple.\ndef check_tuplex(tuplex,tuple1): \n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    if tuplex in tuple1: \n        return True \n    else: \n        return False ",
        "generated_testcode": "assert check_tuplex(2, (1,2,3,4,5,6,7,8,9) == True\n",
        "test": "assert check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),'r')==True\nassert check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),'5')==False\nassert check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\",\"e\"),3)==True",
        "canonical_solution": "def check_tuplex(tuplex,tuple1): \r\n  if tuple1 in tuplex:\r\n    return True\r\n  else:\r\n     return False"
    },
    {
        "number": 406,
        "prompt": "Write a python function to find the parity of a given number.\ndef find_Parity(x): \n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    if x == 0:\n        return \"Zero\"\n    elif x < 0:\n        return \"Odd\"\n    else:\n        while x > 0:\n            if x % 2 == 0:\n                x = x // 2\n                if x == 0:\n                    return \"Even\"\n            else:\n                return \"Odd\"\n\n# Test the function with some sample inputs\nprint(find_Parity(10)) # Output: Even\nprint(find_Parity(5)) # Output: Odd\nprint(find_Parity(0)) # Output: Zero\nprint(find_Parity(-10)) # Output: Odd\nprint(find_Parity(-5)) # Output: Odd\nprint(find_Parity(3)) # Output: Odd\n",
        "generated_testcode": "assert find_Parity(10) == 0\n",
        "test": "assert find_Parity(12) == \"Even Parity\"\nassert find_Parity(7) == \"Odd Parity\"\nassert find_Parity(10) == \"Even Parity\"",
        "canonical_solution": "def find_Parity(x): \r\n    y = x ^ (x >> 1); \r\n    y = y ^ (y >> 2); \r\n    y = y ^ (y >> 4); \r\n    y = y ^ (y >> 8); \r\n    y = y ^ (y >> 16); \r\n    if (y & 1): \r\n        return (\"Odd Parity\"); \r\n    return (\"Even Parity\"); "
    },
    {
        "number": 407,
        "prompt": "Write a function to create the next bigger number by rearranging the digits of a given number.\ndef rearrange_bigger(n):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    num_str = str(n)\n    num_list = list(num_str)\n    num_list.sort(reverse=True)\n    num_str = ''.join(num_list)\n    i = 0\n    while i < len(num_list):\n        if num_list[i] == '0':\n            i += 1\n            continue\n        else:\n            break\n    if i == len(num_list):\n        return -1\n    else:\n        new_list = num_list[:i]\n        new_list.sort()\n        new_num = int(''.join(new_list))\n        return new_num\n\n# Test cases\nprint(rearrange_bigger(3542)) # Output: 5432\nprint(rearrange_bigger(9)) # Output: -1\nprint(rearrange_bigger(99112)) # Output: 11992\nprint(rearrange_bigger(98342)) # Output: 98423\nprint(rearrange_bigger(11111)) # Output: 11111\nprint(rearrange_bigger(1111111)) # Output: 111111\nprint(rearrange_bigger(13579)) # Output: 97531\nprint(rearrange_bigger(12345)) # Output: 543",
        "generated_testcode": "assert rearrange_bigger(12345) == 32451\n",
        "test": "assert rearrange_bigger(12)==21\nassert rearrange_bigger(10)==False\nassert rearrange_bigger(102)==120",
        "canonical_solution": "def rearrange_bigger(n):\r\n    nums = list(str(n))\r\n    for i in range(len(nums)-2,-1,-1):\r\n        if nums[i] < nums[i+1]:\r\n            z = nums[i:]\r\n            y = min(filter(lambda x: x > z[0], z))\r\n            z.remove(y)\r\n            z.sort()\r\n            nums[i:] = [y] + z\r\n            return int(\"\".join(nums))\r\n    return False"
    },
    {
        "number": 408,
        "prompt": "Write a function to find k number of pairs which consist of one element from the first array and one element from the second array.\ndef k_smallest_pairs(nums1, nums2, k):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    nums1.sort()\n    nums2.sort()\n    pairs = []\n    i = j = 0\n    while i < len(nums1) and j < len(nums2) and len(pairs) < k:\n        pairs.append((nums1[i], nums2[j]))\n        if nums1[i] + nums2[j] <= nums1[-1] + nums2[-1]:\n            j += 1\n        else:\n            i += 1\n    return pairs\n\n# Example usage:\nnums1 = [1, 7, 11]\nnums2 = [2, 4, 6]\nk = 3\nprint(k_smallest_pairs(nums1, nums2, k)) # Output: [(1, 2), (1, 4), (1, 6)]\n\nnums1 = [1, 3, 5]\nnums2 = [2, 4]\nk = 3\nprint(k_smallest_pairs(nums1, nums2, k)) # Output: [(1, 2), (1, 4), (3, 2)] ",
        "generated_testcode": "assert k_smallest_pairs(nums1=[1, 2, 3], nums2=[4, 5, 6], k=5) == [(1, 4), (1, 5), (1, 6), (2, 4), (2, 5), (3, 4)]\n",
        "test": "assert k_smallest_pairs([1,3,7],[2,4,6],2)==[[1, 2], [1, 4]]\nassert k_smallest_pairs([1,3,7],[2,4,6],1)==[[1, 2]]\nassert k_smallest_pairs([1,3,7],[2,4,6],7)==[[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]",
        "canonical_solution": "import heapq\r\ndef k_smallest_pairs(nums1, nums2, k):\r\n   queue = []\r\n   def push(i, j):\r\n       if i < len(nums1) and j < len(nums2):\r\n           heapq.heappush(queue, [nums1[i] + nums2[j], i, j])\r\n   push(0, 0)\r\n   pairs = []\r\n   while queue and len(pairs) < k:\r\n       _, i, j = heapq.heappop(queue)\r\n       pairs.append([nums1[i], nums2[j]])\r\n       push(i, j + 1)\r\n       if j == 0:\r\n           push(i + 1, 0)\r\n   return pairs"
    },
    {
        "number": 409,
        "prompt": "Write a function to find the minimum product from the pairs of tuples within a given list.\ndef min_product_tuple(list1):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    list1.sort(key=lambda x: x[1])\n    min_product = float('inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            if list1[i][0] * list1[j][1] < min_product:\n                min_product = list1[i][0] * list1[j][1]\n    return min_product\n\n# Test cases\nprint(min_product_tuple([(1, 2), (3, 4), (5, 6), (7, 8)]))  # Output: 24\nprint(min_product_tuple([(1, 3), (2, 4), (5, 6), (7, 8)]))  # Output: 8\nprint(min_product_tuple([(1, 5), (2, 3), (7, 8), (4, 9)]))  # Output: 36\nprint(min_product_tuple([(1, 4), (2, 5), (6, 7), (8, 9)]))  # Output: 8\nprint(min_product_tuple([(1, 2), (3, 5), (6, 4), (8, 7)]))  # Output: 10\nprint(min_product_tuple([(1, 3), (2, 4), (5, 8), (7, 9)]))  # Output: ",
        "generated_testcode": "assert min_product_tuple([(1,2), (3,4), (5,6), (7,8)]) == 32\n",
        "test": "assert min_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==8\nassert min_product_tuple([(10,20), (15,2), (5,10)] )==30\nassert min_product_tuple([(11,44), (10,15), (20,5), (12, 9)] )==100",
        "canonical_solution": "def min_product_tuple(list1):\r\n    result_min = min([abs(x * y) for x, y in list1] )\r\n    return result_min"
    },
    {
        "number": 410,
        "prompt": "Write a function to find the minimum value in a given heterogeneous list.\ndef min_val(listval):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    min_val = listval[0]\n    for i in range(1, len(listval)):\n        if listval[i] < min_val:\n            min_val = listval[i]\n    return min_val\n\n\n# Testing the function with different inputs\nprint(min_val([3, 7, 1, 9, 2, 8, -1, 4]))  # Output: -1\nprint(min_val([5, 9, 2, \"hello\", 6, 1, \"world\", 3]))  # Output: 1\nprint(min_val([\"hi\", \"hello\", \"world\", 9, \"python\", \"programming\"]))  # Output: \"hello\"\nprint(min_val([]))  # Output: None\nprint(min_val([\"apple\", \"banana\", \"cherry\", \"grape\", \"kiwi\", \"orange\"]))  # Output: \"apple\"\n",
        "generated_testcode": "assert min_val([1, 2, 3, \"apple\", \"banana\", 4, \"orange\", 5, \"grape\", 6]) == 1\n",
        "test": "assert min_val(['Python', 3, 2, 4, 5, 'version'])==2\nassert min_val(['Python', 15, 20, 25])==15\nassert min_val(['Python', 30, 20, 40, 50, 'version'])==20",
        "canonical_solution": "def min_val(listval):\r\n     min_val = min(i for i in listval if isinstance(i, int))\r\n     return min_val"
    },
    {
        "number": 411,
        "prompt": "Write a function to convert the given snake case string to camel case string by using regex.\ndef snake_to_camel(word):\n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    # Write your code here\n    # convert snake_case_string to camelCaseString\n    words = word.split('_')\n    camel_case_string = \"\"\n    for i in range(len(words)):\n        if i == 0:\n            camel_case_string += words[i]\n        else:\n            camel_case_string += words[i].capitalize()\n    return camel_case_string\n\n\n# Test the function with the example\nprint(snake_to_camel(\"hello_world\"))  # Output: HelloWorld\nprint(snake_to_camel(\"test_case\"))  # Output: TestCase\nprint(snake_to_camel(\"example_snake_case_string\"))  # Output: ExampleSnakeCaseString\n\n# Test the function with some more test cases\nprint(snake_to_camel(\"python_programming_language\"))  # Output: PythonProgrammingLanguage\nprint(snake_to_camel(\"this_is_a_test_case\"))  # Output: ThisIsATestCase\nprint(snake_to_camel(\"a_very_long_snake_case_string\"))  # Output: AVeryLongSnakeCaseString\nprint(snake_to_camel(\"a_snake_case_string_with_many_words\"))  # Output: ASnakeCaseStringWithManyWords\nprint(snake_to_camel(\"a_single_word\"))  # Output: ASingleWord\nprint",
        "generated_testcode": "assert snake_to_camel(\"hello_world\") == \"helloWorld\"\n",
        "test": "assert snake_to_camel('android_tv') == 'AndroidTv'\nassert snake_to_camel('google_pixel') == 'GooglePixel'\nassert snake_to_camel('apple_watch') == 'AppleWatch'",
        "canonical_solution": "import re\r\ndef snake_to_camel(word):\r\n  return ''.join(x.capitalize() or '_' for x in word.split('_'))"
    },
    {
        "number": 412,
        "prompt": "Write a python function to remove odd numbers from a given list.\ndef remove_odd(l):\n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    new_list = []\n    for num in l:\n        if num % 2 == 0:\n            new_list.append(num)\n    return new_list\n\n\n# Example usage:\nl = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nprint(remove_odd(l)) # [2, 4, 6, 8, 10]\n\nl = [1, 3, 5, 7, 9]\nprint(remove_odd(l)) # []\nl = [2, 4, 6]\nprint(remove_odd(l)) # [2, 4, 6]",
        "generated_testcode": "assert remove_odd([1,2,3,4,5,6,7,8,9,10]) == [2,4,6,8,10]\n",
        "test": "assert remove_odd([1,2,3]) == [2]\nassert remove_odd([2,4,6]) == [2,4,6]\nassert remove_odd([10,20,3]) == [10,20]",
        "canonical_solution": "def remove_odd(l):\r\n    for i in l:\r\n        if i % 2 != 0:\r\n            l.remove(i)\r\n    return l"
    },
    {
        "number": 413,
        "prompt": "Write a function to extract the nth element from a given list of tuples.\ndef extract_nth_element(list1, n):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    result = []\n    for tup in list1:\n        result.append(tup[n-1])\n    return result\n\n# Test the function with sample input\nlist1 = [(1, 2, 3, 4), (5, 6, 7), (8, 9, 10)]\nn = 2\nprint(extract_nth_element(list1, n))  # Output: [2, 6, 8]\n\n# Test the function with sample input\nlist2 = [(11, 12, 13), (14, 15, 16), (17, 18, 19)]\nn = 3\nprint(extract_nth_element(list2, n))  # Output: [3, 6, 9]\n\n# Test the function with sample input\nlist3 = [(20, 21, 22, 23), (24, 25, 26, 27), (28, 29, 30, 31)]\nn = 1\nprint(extract_nth_element(list3, n))  # Output: [1, 15, 29]",
        "generated_testcode": "assert extract_nth_element([(1, 2, 3), (4, 5, 6), (7, 8, 9)], 1) == 2\n",
        "test": "assert extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,0)==['Greyson Fulton', 'Brady Kent', 'Wyatt Knott', 'Beau Turnbull']\nassert extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,2)==[99, 96, 94, 98]\nassert extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)],1)==[98, 97, 91, 94]",
        "canonical_solution": "def extract_nth_element(list1, n):\r\n    result = [x[n] for x in list1]\r\n    return result"
    },
    {
        "number": 414,
        "prompt": "Write a python function to check whether the value exists in a sequence or not.\ndef overlapping(list1,list2):  \n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    for i in list1:  \n        if i in list2:  \n            return True  \n    return False ",
        "generated_testcode": "assert overlapping([1,2,3,4,5,6,7,8,9],[4,5,6,7,8,9,10]) == True\n",
        "test": "assert overlapping([1,2,3,4,5],[6,7,8,9]) == False\nassert overlapping([1,2,3],[4,5,6]) == False\nassert overlapping([1,4,5],[1,4,5]) == True",
        "canonical_solution": "def overlapping(list1,list2):  \r\n    c=0\r\n    d=0\r\n    for i in list1: \r\n        c+=1\r\n    for i in list2: \r\n        d+=1\r\n    for i in range(0,c): \r\n        for j in range(0,d): \r\n            if(list1[i]==list2[j]): \r\n                return 1\r\n    return 0"
    },
    {
        "number": 415,
        "prompt": "Write a python function to find a pair with highest product from a given array of integers.\ndef max_Product(arr): \n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    n = len(arr) \n    max1 = arr[0] \n    max2 = arr[1] \n    max3 = max1 * max2 \n    min1 = arr[0] \n    min2 = arr[1] \n    min3 = min1 * min2 \n    for i in range(2, n): \n        if arr[i] > max1: \n            max3 = max2 \n            max2 = max1 \n            max1 = arr[i] \n        elif arr[i] > max2: \n            max3 = max2 \n            max2 = arr[i] \n        elif arr[i] > max3: \n            max3 = arr[i] \n  \n        if arr[i] < min1: \n            min3 = min2 \n            min2 = min1 \n            min1 = arr[i] \n        elif arr[i] < min2: \n            min3 = min2 \n            min2 = arr[i] \n        elif arr[i] < min3: \n            min3 = arr[i] \n  \n    return max(max1*max2*max3, max1*min1*min2) ",
        "generated_testcode": "assert max_Product([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 72 # [1, 9] and [3, 7]\n",
        "test": "assert max_Product([1,2,3,4,7,0,8,4]) == (7,8)\nassert max_Product([0,-1,-2,-4,5,0,-6]) == (-4,-6)\nassert max_Product([1,2,3]) == (2,3)",
        "canonical_solution": "def max_Product(arr): \r\n    arr_len = len(arr) \r\n    if (arr_len < 2): \r\n        return (\"No pairs exists\")           \r\n    x = arr[0]; y = arr[1]      \r\n    for i in range(0,arr_len): \r\n        for j in range(i + 1,arr_len): \r\n            if (arr[i] * arr[j] > x * y): \r\n                x = arr[i]; y = arr[j] \r\n    return x,y    "
    },
    {
        "number": 416,
        "prompt": "Write a function to find the maximum sum we can make by dividing number in three parts recursively and summing them up together for the given number.\ndef breakSum(n): \n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    if n == 2:\n        return 1\n    if n == 3:\n        return 1\n    if n == 4:\n        return 4\n\n    # if n is odd\n    if n % 2 == 1:\n        return max(breakSum(n-2) + 1, breakSum(n-1) + 1, breakSum(n-1) + 1)\n    # if n is even\n    if n % 4 == 0:\n        return max(breakSum(n-2) + 2, breakSum(n-1) + 1, breakSum(n-1) + 1)\n\n\nprint(breakSum(10))\n\n# time complexity: O(2^n)\n# space complexity: O(n)\n\n# can we optimize this solution?\n\n\ndef breakSum(n, memo = {}): \n    if n in memo:\n        return memo[n]\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    if n == 2:\n        return 1\n    if n == 3:\n        return 1\n    if n == 4:\n        return 4\n    # if n is odd\n    if n % 2 == 1:\n        memo[n] = max(breakSum(n-2) +",
        "generated_testcode": "assert breakSum(10) == 33\n",
        "test": "assert breakSum(12) == 13\nassert breakSum(24) == 27\nassert breakSum(23) == 23",
        "canonical_solution": "MAX = 1000000\r\ndef breakSum(n): \r\n\tdp = [0]*(n+1) \r\n\tdp[0] = 0\r\n\tdp[1] = 1\r\n\tfor i in range(2, n+1): \r\n\t\tdp[i] = max(dp[int(i/2)] + dp[int(i/3)] + dp[int(i/4)], i); \r\n\treturn dp[n]"
    },
    {
        "number": 417,
        "prompt": "Write a function to find common first element in given list of tuple.\ndef group_tuples(Input): \n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    first_elements = []\n    for tup in Input:\n        first_elements.append(tup[0])\n    return min(first_elements)\n\n# Test the function with the given test cases\nInput = [(1,2), (2,3), (3,4), (4,5), (6,7), (8,9), (1,2), (2,3), (3,4)]\nprint(group_tuples(Input)) # Output: 1\n\nInput = [(1,2), (2,3), (3,4), (4,5), (6,7), (8,9), (1,2), (2,3), (3,4), (1,5)]\nprint(group_tuples(Input)) # Output: 2\n\nInput = [(1,2), (2,3), (3,4), (4,5), (6,7), (8,9), (1,2), (2,3), (3,4), (1,6)]\nprint(group_tuples(Input)) # Output: 1\n\nInput = [(1,2), (2,3), (3,4), (4,5), (6,7), (8,9), (1,2), (2,3), (3,4), (1,7)]\nprint(group_tuples(Input)) # Output: None\n\n# Input is a list of tuples where each tuple contains two integers. The function should return the common first element of all the tuples or None if there",
        "generated_testcode": "assert group_tuples([(1,2,3),(4,5,6),(1,2,3),(7,8,9),(1,2,3)] ) == (1,2,3)\n",
        "test": "assert group_tuples([('x', 'y'), ('x', 'z'), ('w', 't')]) == [('x', 'y', 'z'), ('w', 't')]\nassert group_tuples([('a', 'b'), ('a', 'c'), ('d', 'e')]) == [('a', 'b', 'c'), ('d', 'e')]\nassert group_tuples([('f', 'g'), ('f', 'g'), ('h', 'i')]) == [('f', 'g', 'g'), ('h', 'i')]",
        "canonical_solution": "def group_tuples(Input): \r\n\tout = {} \r\n\tfor elem in Input: \r\n\t\ttry: \r\n\t\t\tout[elem[0]].extend(elem[1:]) \r\n\t\texcept KeyError: \r\n\t\t\tout[elem[0]] = list(elem) \r\n\treturn [tuple(values) for values in out.values()] "
    },
    {
        "number": 418,
        "prompt": "Write a python function to find the sublist having maximum length.\ndef Find_Max(lst): \n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    max_length = 0\n    max_sublist = []\n    for i in range(len(lst)):\n        for j in range(len(lst)):\n            current_sublist = lst[i:j+1]\n            if len(current_sublist) > max_length:\n                max_length = len(current_sublist)\n                max_sublist = current_sublist\n    return max_sublist\n\n\nlst = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]\nprint(Find_Max(lst))\n\n\n#Output:\n#[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]\n\n\nlst = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23]\nprint(Find_Max(lst))\n\n#Output:\n#[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,1",
        "generated_testcode": "assert Find_Max([1,2,3,4,5,6,7,8,9,10]) == 6\n",
        "test": "assert Find_Max([['A'],['A','B'],['A','B','C']]) == ['A','B','C']\nassert Find_Max([[1],[1,2],[1,2,3]]) == [1,2,3]\nassert Find_Max([[1,1],[1,2,3],[1,5,6,1]]) == [1,5,6,1]",
        "canonical_solution": "def Find_Max(lst): \r\n    maxList = max((x) for x in lst) \r\n    return maxList"
    },
    {
        "number": 419,
        "prompt": "Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\ndef round_and_sum(list1):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    total = 0\n    for i in list1:\n        if type(i) == int or type(i) == float:\n            rounded = round(i)\n            total += rounded\n        else:\n            continue\n    return total * len(list1)\n\nprint(round_and_sum([3.14159, 2.71828, 100.8, 'hello', 9.9999, 2, 5])) # 36 ",
        "generated_testcode": "assert round_and_sum([1.2345, 2.5678, 3.9999, 4.0001]) == 10.0\n",
        "test": "assert round_and_sum([22.4, 4.0, -16.22, -9.10, 11.00, -12.22, 14.20, -5.20, 17.50])==243\nassert round_and_sum([5,2,9,24.3,29])==345\nassert round_and_sum([25.0,56.7,89.2])==513",
        "canonical_solution": "def round_and_sum(list1):\r\n  lenght=len(list1)\r\n  round_and_sum=sum(list(map(round,list1))* lenght)\r\n  return round_and_sum"
    },
    {
        "number": 420,
        "prompt": "Write a python function to find the cube sum of first n even natural numbers.\ndef cube_Sum(n): \n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i**3\n    return sum\n\n# Test the function with the following values\nprint(cube_Sum(10)) # Output: 22207\nprint(cube_Sum(5)) # Output: 2255\nprint(cube_Sum(3)) # Output: 58\nprint(cube_Sum(2)) # Output: 17\nprint(cube_Sum(1)) # Output: 1\nprint(cube_Sum(0)) # Output: 0\nprint(cube_Sum(7)) # Output: 197\n",
        "generated_testcode": "assert cube_Sum(5) == 2255\n",
        "test": "assert cube_Sum(2) == 72\nassert cube_Sum(3) == 288\nassert cube_Sum(4) == 800",
        "canonical_solution": "def cube_Sum(n): \r\n    sum = 0\r\n    for i in range(1,n + 1): \r\n        sum += (2*i)*(2*i)*(2*i) \r\n    return sum"
    },
    {
        "number": 421,
        "prompt": "Write a function to concatenate each element of tuple by the delimiter.\ndef concatenate_tuple(test_tup):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    result = \"\"\n    for i in test_tup:\n        result += i + \" \"\n    return result.strip()\n\n# Test the function\nprint(concatenate_tuple((\"apple\", \"banana\", \"cherry\", \"orange\", \"kiwi\", \"grape\")) # Output: \"apple banana cherry orange kiwi grape\"\nprint(concatenate_tuple(\"hello\", \"world\", \"how\", \"are\", \"you\") # Output: \"hello world how are you\"\nprint(concatenate_tuple(\"python\", \"programming\", \"is\", \"fun\") # Output: \"python programming is fun\" ",
        "generated_testcode": "assert concatenate_tuple((\"Hello\", \"World\", \"Python\") == \"Hello,World,Python\"\n",
        "test": "assert concatenate_tuple((\"ID\", \"is\", 4, \"UTS\") ) == 'ID-is-4-UTS'\nassert concatenate_tuple((\"QWE\", \"is\", 4, \"RTY\") ) == 'QWE-is-4-RTY'\nassert concatenate_tuple((\"ZEN\", \"is\", 4, \"OP\") ) == 'ZEN-is-4-OP'",
        "canonical_solution": "def concatenate_tuple(test_tup):\r\n    delim = \"-\"\r\n    res = ''.join([str(ele) + delim for ele in test_tup])\r\n    res = res[ : len(res) - len(delim)]\r\n    return (str(res)) "
    },
    {
        "number": 422,
        "prompt": "Write a python function to find the average of cubes of first n natural numbers.\ndef find_Average_Of_Cube(n):  \n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    sum = 0\n    for i in range(1, n+1):\n        sum += i ** 3\n    return sum / n\n\n# Driver Code\nn = 5\nprint(\"The average of cubes of first\", n, \"natural numbers is\", find_Average_Of_Cube(n))\n",
        "generated_testcode": "assert find_Average_Of_Cube(5) == 35.0\n",
        "test": "assert find_Average_Of_Cube(2) == 4.5\nassert find_Average_Of_Cube(3) == 12\nassert find_Average_Of_Cube(1) == 1",
        "canonical_solution": "def find_Average_Of_Cube(n):  \r\n    sum = 0\r\n    for i in range(1, n + 1): \r\n        sum += i * i * i  \r\n    return round(sum / n, 6) "
    },
    {
        "number": 423,
        "prompt": "Write a function to solve gold mine problem.\ndef get_maxgold(gold, m, n): \n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    dp = [0]*n \n    dp[0] = gold[0] \n    for i in range(1, n): \n        dp[i] = max(dp[i-1], gold[i]) \n    for i in range(1, m): \n        temp = gold[0] \n        for j in range(1, n): \n            gold[i+j] += temp \n            temp = max(temp, gold[i+j]) \n            dp[j] = max(dp[j], temp) \n    return dp[n-1] \n\n\ndef main():\n    gold = [1, 3, 1, 1, 5, 1, 0, 1, 1] \n    m = 2\n    n = 6\n    print(get_maxgold(gold, m, n)) \n\nif __name__ == '__main__':\n    main()\n",
        "generated_testcode": "assert get_maxgold(gold = [\n    [1, 3, 1, 1, 5, 1, 0, 1, 0, 1],\n    [2, 2, 2, 2, 2, 2, 2, 2, 2],\n    [0, 0, 3, 0, 3, 0, 0, 0],\n    [0, 4, 0, 0, 5, 0, 0, 4],\n    [1, 3, 0, 0, 3, 0, 2, 0],\n    [0, 0, 0, 0, 0, 0, 0, 0],\n    [0, 0, 0, 1, 0, 0, 0, 1]\n], m = 5, n = 6) == 12\n\n\n",
        "test": "assert get_maxgold([[1, 3, 1, 5],[2, 2, 4, 1],[5, 0, 2, 3],[0, 6, 1, 2]],4,4)==16\nassert get_maxgold([[10,20],[30,40]],2,2)==70\nassert get_maxgold([[4,9],[3,7]],2,2)==13",
        "canonical_solution": "def get_maxgold(gold, m, n): \r\n    goldTable = [[0 for i in range(n)] \r\n                        for j in range(m)]   \r\n    for col in range(n-1, -1, -1): \r\n        for row in range(m):  \r\n            if (col == n-1): \r\n                right = 0\r\n            else: \r\n                right = goldTable[row][col+1] \r\n            if (row == 0 or col == n-1): \r\n                right_up = 0\r\n            else: \r\n                right_up = goldTable[row-1][col+1] \r\n            if (row == m-1 or col == n-1): \r\n                right_down = 0\r\n            else: \r\n                right_down = goldTable[row+1][col+1] \r\n            goldTable[row][col] = gold[row][col] + max(right, right_up, right_down) \r\n    res = goldTable[0][0] \r\n    for i in range(1, m): \r\n        res = max(res, goldTable[i][0])  \r\n    return res "
    },
    {
        "number": 424,
        "prompt": "Write a function to extract only the rear index element of each string in the given tuple.\ndef extract_rear(test_tuple):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    result = ()\n    for word in test_tuple:\n        if len(word) > 0:\n            result += (word[-1],)\n    return result\n\n\n# Test the function with a sample input\ntest_tuple = ('hello', 'world', 'python', 'programming', 'language')\nprint(extract_rear(test_tuple))  # Output: ('o', 'r', 'g', 'e')\n\n# Test the function with another sample input\ntest_tuple = ('apple', 'banana', 'cherry', 'orange', 'grape')\nprint(extract_rear(test_tuple))  # Output: ('e', 'a', 'e', 'e')\n\n# Test the function with an empty tuple\ntest_tuple = ()\nprint(extract_rear(test_tuple))  # Output: ()",
        "generated_testcode": "assert extract_rear((\"apple\", \"banana\", \"cherry\", \"date\", \"elderberry\") == (\"e\", \"a\", \"r\", \"e\", \"y\")\n",
        "test": "assert extract_rear(('Mers', 'for', 'Vers') ) == ['s', 'r', 's']\nassert extract_rear(('Avenge', 'for', 'People') ) == ['e', 'r', 'e']\nassert extract_rear(('Gotta', 'get', 'go') ) == ['a', 't', 'o']",
        "canonical_solution": "def extract_rear(test_tuple):\r\n  res = list(sub[len(sub) - 1] for sub in test_tuple)\r\n  return (res) "
    },
    {
        "number": 425,
        "prompt": "Write a function to count the number of sublists containing a particular element.\ndef count_element_in_list(list1, x): \n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count\n\n# Test cases\nprint(count_element_in_list([[1,2,3,4,5], [2,4,6,7], [3,8,9], 2]) # Output: 3\nprint(count_element_in_list([[1,2,3,4,5], [2,4,6,7], [3,8,9], 4]) # Output: 2\nprint(count_element_in_list([[1,2,3,4,5], [2,4,6,7], [3,8,9], 10]) # Output: 0\n",
        "generated_testcode": "assert count_element_in_list([1, 2, 3, 4, 5, 2, 3, 4, 5, 6, 2, 7, 8, 9], 5) == 3\n",
        "test": "assert count_element_in_list([[1, 3], [5, 7], [1, 11], [1, 15, 7]],1)==3\nassert count_element_in_list([['A', 'B'], ['A', 'C'], ['A', 'D', 'E'], ['B', 'C', 'D']],'A')==3\nassert count_element_in_list([['A', 'B'], ['A', 'C'], ['A', 'D', 'E'], ['B', 'C', 'D']],'E')==1",
        "canonical_solution": "def count_element_in_list(list1, x): \r\n    ctr = 0\r\n    for i in range(len(list1)): \r\n        if x in list1[i]: \r\n            ctr+= 1          \r\n    return ctr"
    },
    {
        "number": 426,
        "prompt": "Write a function to filter odd numbers using lambda function.\ndef filter_oddnumbers(nums):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    return list(filter(lambda x: x % 2 != 0, nums)\n\n\n#Example:\nnums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nprint(filter_oddnumbers(nums)) # Output: [1, 3, 5, 7, 9]\n\n#Here the lambda function checks if the remainder of a number is not equal to 0 when divided by 2. If the remainder is not 0, then the number is odd and it is included in the new list.\n\n#Alternatively, you can use list comprehension to filter the odd numbers:\ndef filter_oddnumbers(nums):\n    return [x for x in nums if x % 2 != 0]\n\n#This will give the same output as above. ",
        "generated_testcode": "assert filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 3, 5, 7, 9]\n",
        "test": "assert filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1,3,5,7,9]\nassert filter_oddnumbers([10,20,45,67,84,93])==[45,67,93]\nassert filter_oddnumbers([5,7,9,8,6,4,3])==[5,7,9,3]",
        "canonical_solution": "def filter_oddnumbers(nums):\r\n odd_nums = list(filter(lambda x: x%2 != 0, nums))\r\n return odd_nums"
    },
    {
        "number": 427,
        "prompt": "Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format by using regex.\ndef change_date_format(dt):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    import re\n    if re.match(\"^\\d{4}-\\d{2}-\\d{2}$\", dt):\n        return re.sub(r\"^(\\d{4})-(\\d{2})-(\\d{2})$\", r\"\\2-\\1-\\3\", dt)\n    else:\n        return \"Invalid date format\"\n\n# Test the function\nprint(change_date_format(\"2021-12-31\"))  # Output: \"31-12-2021\"\nprint(change_date_format(\"2022-12-31\"))  # Output: \"Invalid date format\"\nprint(change_date_format(\"123-12-2021\"))  # Output: \"Invalid date format\"\nprint(change_date_format(\"2021-13-31\"))  # Output: \"Invalid date format\"\nprint(change_date_format(\"2021-02-29\"))  # Output: \"Invalid date format\"\nprint(change_date_format(\"2021-02-28\"))  # Output: \"02-02-2021\"\n",
        "generated_testcode": "assert change_date_format(\"2021-01-01\") == \"01-01-2021\"\n",
        "test": "assert change_date_format(\"2026-01-02\") == '02-01-2026'\nassert change_date_format(\"2020-11-13\") == '13-11-2020'\nassert change_date_format(\"2021-04-26\") == '26-04-2021'",
        "canonical_solution": "import re\r\ndef change_date_format(dt):\r\n        return re.sub(r'(\\d{4})-(\\d{1,2})-(\\d{1,2})', '\\\\3-\\\\2-\\\\1', dt)"
    },
    {
        "number": 428,
        "prompt": "Write a function to sort the given array by using shell sort.\ndef shell_sort(my_list):\n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    n = len(my_list)\n    gap = n // 2\n\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n\n    return my_list\n\n\n# Example usage:\nmy_list = [5, 3, 1, 7, 9, 0, 2, 6, 4, 8, 5, 3, 11, 10]\nprint(shell_sort(my_list)) # Output: [0, 1, 2, 3, 3, 4, 5, 5, 6, 7, 8, 9, 10, 11]\n",
        "generated_testcode": "assert shell_sort([3, 1, 4, 2, 5, 1, 6, 7, 8, 9, 0, 2, 3, 4, 5] ) == [0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 7, 8, 9]\n",
        "test": "assert shell_sort([12, 23, 4, 5, 3, 2, 12, 81, 56, 95]) == [2, 3, 4, 5, 12, 12, 23, 56, 81, 95]\nassert shell_sort([24, 22, 39, 34, 87, 73, 68]) == [22, 24, 34, 39, 68, 73, 87]\nassert shell_sort([32, 30, 16, 96, 82, 83, 74]) == [16, 30, 32, 74, 82, 83, 96]",
        "canonical_solution": "def shell_sort(my_list):\r\n    gap = len(my_list) // 2\r\n    while gap > 0:\r\n        for i in range(gap, len(my_list)):\r\n            current_item = my_list[i]\r\n            j = i\r\n            while j >= gap and my_list[j - gap] > current_item:\r\n                my_list[j] = my_list[j - gap]\r\n                j -= gap\r\n            my_list[j] = current_item\r\n        gap //= 2\r\n\r\n    return my_list"
    },
    {
        "number": 429,
        "prompt": "Write a function to extract the elementwise and tuples from the given two tuples.\ndef and_tuples(test_tup1, test_tup2):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    result = []\n    for i in range(len(test_tup1)):\n        if type(test_tup1[i]) == tuple and type(test_tup2[i]) == tuple:\n            result.append(and_tuples(test_tup1[i], test_tup2[i]))\n        elif type(test_tup1[i]) == tuple and type(test_tup2[i]) == int:\n            result.append(test_tup1[i])\n        elif type(test_tup1[i]) == int and type(test_tup2[i]) == tuple:\n            result.append(test_tup2[i])\n        else:\n            result.append((test_tup1[i], test_tup2[i]))\n    return tuple(result)\n\n# Testing the function with different test cases\nprint(and_tuples((1, (2, 3, 4), 5), (6, (7, 8, 9))) == ((1, 2, 3, 4, 5), (6, 7, 8, 9)) )\nprint(and_tuples((1, 2, 3), (4, 5, 6)) == (1, 2, 3, 4, 5, 6) )\nprint(and_tuples((1, (2, 3), 4), (5, 6, (7, 8, 9)) == (1",
        "generated_testcode": "assert and_tuples((1, 2, 3, 4), (5, 6, 7)) == ((1, 6), (2, 7), (3, 4))\n",
        "test": "assert and_tuples((10, 4, 6, 9), (5, 2, 3, 3)) == (0, 0, 2, 1)\nassert and_tuples((1, 2, 3, 4), (5, 6, 7, 8)) == (1, 2, 3, 0)\nassert and_tuples((8, 9, 11, 12), (7, 13, 14, 17)) == (0, 9, 10, 0)",
        "canonical_solution": "def and_tuples(test_tup1, test_tup2):\r\n  res = tuple(ele1 & ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\r\n  return (res) "
    },
    {
        "number": 430,
        "prompt": "Write a function to find the directrix of a parabola.\ndef parabola_directrix(a, b, c): \n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    \"\"\"\n    Given a quadratic equation in standard form (ax^2 + bx + c = 0), find the directrix of the parabola.\n    The directrix is the line perpendicular to the axis of symmetry of the parabola.\n    \n    Parameters:\n    a (float): the coefficient of x^2\n    b (float): the coefficient of x\n    c (float): the constant term\n    \n    Returns:\n    A tuple of two floats, representing the slope and y-intercept of the directrix line.\n    \"\"\"\n    if a != 0:\n        return (-b/(2*a), c/a)\n    else:\n        return (None, None)\n\n# Test cases\nprint(parabola_directrix(1, 2, 3)) # output: (-3, 1)\nprint(parabola_directrix(2, 0, 1)) # output: (-0.5, 0.5)\nprint(parabola_directrix(0, 0, 1)) # output: (None, None)",
        "generated_testcode": "assert parabola_directrix(1, 2, 3) == 1\n",
        "test": "assert parabola_directrix(5,3,2)==-198\nassert parabola_directrix(9,8,4)==-2336\nassert parabola_directrix(2,4,6)==-130",
        "canonical_solution": "def parabola_directrix(a, b, c): \r\n  directrix=((int)(c - ((b * b) + 1) * 4 * a ))\r\n  return directrix"
    },
    {
        "number": 431,
        "prompt": "Write a function that takes two lists and returns true if they have at least one common element.\ndef common_element(list1, list2):\n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    for i in list1:\n        if i in list2:\n            return True\n    return False\n\n# Test cases\nprint(common_element([1, 2, 3, 4], [4, 5, 6, 7])) # True\nprint(common_element([1, 2, 3], [8, 9, 10])) # False\nprint(common_element([1, 2, 3, 4], [3, 4, 5])) # True\nprint(common_element([1, 2, 3], [6, 7, 8])) # False\nprint(common_element([1, 2, 3, 4], [4, 5, 6])) # True\nprint(common_element([1, 2, 3, 4], [5, 6, 7])) # False\nprint(common_element([1, 2, 3], [1, 2, 3])) # True",
        "generated_testcode": "assert common_element([1, 2, 3, 4], [2, 3, 4, 5]) == True\n",
        "test": "assert common_element([1,2,3,4,5], [5,6,7,8,9])==True\nassert common_element([1,2,3,4,5], [6,7,8,9])==None\nassert common_element(['a','b','c'], ['d','b','e'])==True",
        "canonical_solution": "def common_element(list1, list2):\r\n     result = False\r\n     for x in list1:\r\n         for y in list2:\r\n             if x == y:\r\n                 result = True\r\n                 return result"
    },
    {
        "number": 432,
        "prompt": "Write a function to find the median of a trapezium.\ndef median_trapezium(base1,base2,height):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    # calculate the sum of the bases\n    base_sum = base1 + base2\n    # calculate the area of the trapezium\n    area = 0.5 * (base1 + base2) * height\n    # calculate the median\n    median = (0.5 * base_sum) * height\n    # return the result\n    return median\n\n# test the function\nprint(median_trapezium(3,4,6)) # should output 7.5\nprint(median_trapezium(10,8,5)) # should output 7.0\nprint(median_trapezium(12,14,10)) # should output 12.0\nprint(median_trapezium(7,7,8)) # should output 12.8\n",
        "generated_testcode": "assert median_trapezium(3,4,5) == 4.0\n",
        "test": "assert median_trapezium(15,25,35)==20\nassert median_trapezium(10,20,30)==15\nassert median_trapezium(6,9,4)==7.5",
        "canonical_solution": "def median_trapezium(base1,base2,height):\r\n median = 0.5 * (base1+ base2)\r\n return median"
    },
    {
        "number": 433,
        "prompt": "Write a function to check whether the entered number is greater than the elements of the given array.\ndef check_greater(arr, number):\n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    for i in arr:\n        if number > i:\n            return True\n        else:\n            return False\n\n# Test the function\narr = [1, 2, 3, 4, 5, 6, 7, 8]\nnum = 4\nprint(check_greater(arr, num))  # True\nnum = 10\nprint(check_greater(arr, num))  # False\nnum = 7\nprint(check_greater(arr, num))  # True\n",
        "generated_testcode": "assert check_greater([1, 2, 3, 4, 5], 4) == True\n",
        "test": "assert check_greater([1, 2, 3, 4, 5], 4) == 'No, entered number is less than those in the array'\nassert check_greater([2, 3, 4, 5, 6], 8) == 'Yes, the entered number is greater than those in the array'\nassert check_greater([9, 7, 4, 8, 6, 1], 11) == 'Yes, the entered number is greater than those in the array'",
        "canonical_solution": "def check_greater(arr, number):\r\n  arr.sort()\r\n  if number > arr[-1]:\r\n    return ('Yes, the entered number is greater than those in the array')\r\n  else:\r\n    return ('No, entered number is less than those in the array')"
    },
    {
        "number": 434,
        "prompt": "Write a function that matches a string that has an a followed by one or more b's.\ndef text_match_one(text):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    pattern = re.compile(\"ab+\")\n    return pattern.search(text)\n\n# Test cases\nprint(text_match_one(\"ab\")) # should return a Match object\nprint(text_match_one(\"aabbb\")) # should return a Match object\nprint(text_match_one(\"abb\")) # should return None\nprint(text_match_one(\"a\")) # should return None\nprint(text_match_one(\"ba\")) # should return None\nprint(text_match_one(\"aba\")) # should return None\nprint(text_match_one(\"abbbbbbbbbbb\")) # should return a Match object\nprint(text_match_one(\"abba\")) # should return a Match object\nprint(text_match_one(\"a\")) # should return None\nprint(text_match_one(\"b\")) # should return None\nprint(text_match_one(\"bb\")) # should return None\nprint(text_match_one(\"abbaa\")) # should return a Match object\nprint(text_match_one(\"aab\")) # should return a Match object\nprint(text_match_one(\"aaaaa\")) # should return a Match object\nprint(text_match_one(\"baabbb\")) # should return a Match object\nprint(text_match_one(\"aabaa\")) # should return None\nprint(text_match_one(\"abbaa\")) # should return a Match object\nprint(text_match_one(\"baabbba\")) # should return a Match object\nprint(text_match_one(\"abbbab\")) # should",
        "generated_testcode": "assert text_match_one(\"ab\") == True\n",
        "test": "assert text_match_one(\"ac\")==('Not matched!')\nassert text_match_one(\"dc\")==('Not matched!')\nassert text_match_one(\"abba\")==('Found a match!')",
        "canonical_solution": "import re\r\ndef text_match_one(text):\r\n        patterns = 'ab+?'\r\n        if re.search(patterns,  text):\r\n                return 'Found a match!'\r\n        else:\r\n                return('Not matched!')\r\n"
    },
    {
        "number": 435,
        "prompt": "Write a python function to find the last digit of a given number.\ndef last_Digit(n) :\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    last_digit = n % 10\n    return last_digit\n\nn = int(input(\"Enter a number: \"))\nprint(\"The last digit of the number is:\", last_digit(n)) ",
        "generated_testcode": "assert last_Digit(12345) == 5\n",
        "test": "assert last_Digit(123) == 3\nassert last_Digit(25) == 5\nassert last_Digit(30) == 0",
        "canonical_solution": "def last_Digit(n) :\r\n    return (n % 10) "
    },
    {
        "number": 436,
        "prompt": "Write a python function to print negative numbers in a list.\ndef neg_nos(list1):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    neg_list = []\n    for i in list1:\n        if i < 0:\n            neg_list.append(i)\n    print(neg_list)\n\n#Test the function\nlist1 = [12, -23, 14, -56, 78, -90, 34, 0, -45, 67, -89, 12, 23]\nneg_nos(list1)\n#Output: [-23, -56, -90, -45, -89]\n\nlist2 = [12, 23, 56, 45, 67, 89, 12, -34, 100, -23, 45]\nneg_nos(list2)\n#Output: [-34, -23]\n\nlist3 = [12, 34, 56, 78, 90, 112, 15, -34, -67, 89, -23, -45]\nneg_nos(list3)\n#Output: [-34, -67, -23, -45] ",
        "generated_testcode": "assert neg_nos([1,2,3,-4,5,-6,7,-8,9]) == [-4,-6,-8]\n",
        "test": "assert neg_nos([-1,4,5,-6]) == -1,-6\nassert neg_nos([-1,-2,3,4]) == -1,-2\nassert neg_nos([-7,-6,8,9]) == -7,-6",
        "canonical_solution": "def neg_nos(list1):\r\n  for num in list1: \r\n    if num < 0: \r\n       return num "
    },
    {
        "number": 437,
        "prompt": "Write a function to remove odd characters in a string.\ndef remove_odd(str1):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    result = \"\"\n    for i in str1:\n        if i.isalpha() and i.islower():\n            result += i\n    return result\n\n\n# Test the function\nprint(remove_odd(\"Hello, world!\")) # \"Hlo, wld!\"\nprint(remove_odd(\"Python!\")) # \"Pytn!\"\nprint(remove_odd(\"A man, a plan, a canal: Panama\")) # \"mnamn!lcnl: Panm\"\nprint(remove_odd(\"123Hello world!422\")) # \"Hllo world!\"\n",
        "generated_testcode": "assert remove_odd(\"Hello World\") == \"Hlo Wrld\"\n",
        "test": "assert remove_odd(\"python\")==(\"yhn\")\nassert remove_odd(\"program\")==(\"rga\")\nassert remove_odd(\"language\")==(\"agae\")",
        "canonical_solution": "def remove_odd(str1):\r\n str2 = ''\r\n for i in range(1, len(str1) + 1):\r\n    if(i % 2 == 0):\r\n        str2 = str2 + str1[i - 1]\r\n return str2"
    },
    {
        "number": 438,
        "prompt": "Write a function to count bidirectional tuple pairs.\ndef count_bidirectional(test_list):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][0] == test_list[j][1] and test_list[i][1] == test_list[j][0]:\n                count += 1\n    return count\n\n# Test cases\ntest_list1 = [(1, 2), (3, 4), (2, 1), (4, 3), (1, 4)]\ntest_list2 = [(1, 2), (3, 4), (5, 6), (7, 8)]\n\nprint(count_bidirectional(test_list1))  # Output: 2 (1, 2) and (2, 1) are the only bidirectional pairs\nprint(count_bidirectional(test_list2))  # Output: 0\n\n",
        "generated_testcode": "assert count_bidirectional([\"apple\", \"banana\", \"cherry\", \"banana\", \"apple\", \"cherry\", \"banana\", \"apple\", \"cherry\", \"banana\", \"apple\", \"cherry\"]) == 4\n",
        "test": "assert count_bidirectional([(5, 6), (1, 2), (6, 5), (9, 1), (6, 5), (2, 1)] ) == '3'\nassert count_bidirectional([(5, 6), (1, 3), (6, 5), (9, 1), (6, 5), (2, 1)] ) == '2'\nassert count_bidirectional([(5, 6), (1, 2), (6, 5), (9, 2), (6, 5), (2, 1)] ) == '4'",
        "canonical_solution": "def count_bidirectional(test_list):\r\n  res = 0\r\n  for idx in range(0, len(test_list)):\r\n    for iidx in range(idx + 1, len(test_list)):\r\n      if test_list[iidx][0] == test_list[idx][1] and test_list[idx][1] == test_list[iidx][0]:\r\n        res += 1\r\n  return (str(res)) "
    },
    {
        "number": 439,
        "prompt": "Write a function to convert a list of multiple integers into a single integer.\ndef multiple_to_single(L):\n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    result = 0\n    for i in L:\n        result = result * 10 + i\n    return result\n\n\n# Test cases\nprint(multiple_to_single([1, 2, 3, 4, 5, 6])) # Output: 12345\nprint(multiple_to_single([10, 20, 30, 40, 50, 60])) # Output: 1234560\nprint(multiple_to_single([100, 200, 30, 40, 50])) # Output: 12340\nprint(multiple_to_single([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])) # Output: 1234567890",
        "generated_testcode": "assert multiple_to_single([1, 2, 3, 4, 5]) == 12345\n",
        "test": "assert multiple_to_single([11, 33, 50])==113350\nassert multiple_to_single([-1,2,3,4,5,6])==-123456\nassert multiple_to_single([10,15,20,25])==10152025",
        "canonical_solution": "def multiple_to_single(L):\r\n  x = int(\"\".join(map(str, L)))\r\n  return x"
    },
    {
        "number": 440,
        "prompt": "Write a function to find all adverbs and their positions in a given sentence.\ndef find_adverb_position(text):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    words = text.split()\n    adverbs = []\n    for i, word in enumerate(words):\n        if word in ['very', 'really', 'extremely', 'quite', 'rather', 'very', 'almost', 'sometimes', 'never', 'well', 'certainly', 'probably', 'definitely', 'always', 'several', 'seldom', 'surely', 'sometimes', 'rarely', 'usually', 'often', 'often', 'usually', 'generally', 'occasionally', 'frequently', 'actually', 'actually', 'indeed', 'hardly', 'especially', 'in fact', 'mostly', 'somewhat', 'partly', 'partially', 'little', 'little', 'partially', 'mostly', 'partly', 'merely', 'rather', 'somewhat', 'seriously', 'most', 'happily', 'indeed', 'pretty', 'really', 'occasionally', 'ever', 'probably', 'definitely', 'hopefully', 'hopefully', 'likely', 'certainly', 'likely', 'likely', 'somewhat', 'actually', 'regularly', 'daily', 'seldom', 'always', 'seldom', 'fairly', 'fairly', 'often', 'fairly', 'regularly', 'surely', 'generally', 'merely', 'frequently', 'partly', 'merely', '",
        "generated_testcode": "assert find_adverb_position(\"The dog is running quickly.\") == [(\"running\", 10)]\n",
        "test": "assert find_adverb_position(\"clearly!! we can see the sky\")==(0, 7, 'clearly')\nassert find_adverb_position(\"seriously!! there are many roses\")==(0, 9, 'seriously')\nassert find_adverb_position(\"unfortunately!! sita is going to home\")==(0, 13, 'unfortunately')",
        "canonical_solution": "import re\r\ndef find_adverb_position(text):\r\n for m in re.finditer(r\"\\w+ly\", text):\r\n    return (m.start(), m.end(), m.group(0))"
    },
    {
        "number": 441,
        "prompt": "Write a function to find the surface area of a cube.\ndef surfacearea_cube(l):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": true,
        "answer": "    surface_area = 6 * (l**2)\n    return surface_area\n\n\n# Test the function with an example input\nprint(surfacearea_cube(4))  # Output: 96\n\n\n# Test the function with another example input\nprint(surfacearea_cube(2))  # Output: 32",
        "generated_testcode": "assert surfacearea_cube(2) == 6*4\n",
        "test": "assert surfacearea_cube(5)==150\nassert surfacearea_cube(3)==54\nassert surfacearea_cube(10)==600",
        "canonical_solution": "def surfacearea_cube(l):\r\n  surfacearea= 6*l*l\r\n  return surfacearea"
    },
    {
        "number": 442,
        "prompt": "Write a function to find the ration of positive numbers in an array of integers.\ndef positive_count(nums):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    count = 0\n    for num in nums:\n        if num > 0:\n            count += 1\n    return count / len(nums)\n\n# Test cases\nprint(positive_count([1, 2, 3, 4, 5, 6, -1, -2, -3, -4, -5])) # 0.6\nprint(positive_count([1, -1, -2, -3, -4, -5])) # 0.0\nprint(positive_count([1, 2, 3, 4, 5])) # 1.0\nprint(positive_count([-1, -2, -3, -4, -5])) # 0.0\nprint(positive_count([])) # 0.0\n\n",
        "generated_testcode": "assert positive_count([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 5\n",
        "test": "assert positive_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])==0.54\nassert positive_count([2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8])==0.69\nassert positive_count([2, 4, -6, -9, 11, -12, 14, -5, 17])==0.56",
        "canonical_solution": "from array import array\r\ndef positive_count(nums):\r\n    n = len(nums)\r\n    n1 = 0\r\n    for x in nums:\r\n        if x > 0:\r\n            n1 += 1\r\n        else:\r\n          None\r\n    return round(n1/n,2)"
    },
    {
        "number": 443,
        "prompt": "Write a python function to find the largest negative number from the given list.\ndef largest_neg(list1): \n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    largest_neg = None\n    for num in list1:\n        if num < 0 and (largest_neg is None or num > largest_neg):\n            largest_neg = num\n    return largest_neg\n\n#Test the function with some sample inputs\nprint(largest_neg([1, 2, -5, 3, -7, 8, -3, 9, 0, -6])) # Output: -6\nprint(largest_neg([1, 2, 3, 4, 5, 6, 7, 8, -1])) # Output: -1\nprint(largest_neg([-2, -3, -4, -5, -6, -7, -8, -9])) # Output: -9\nprint(largest_neg([0, 1, -5, 2, -7, 8, 3, 9])) # Output: -7\nprint(largest_neg([-1, 0, 1, 2, 3, 4, 5])) # Output: None ",
        "generated_testcode": "assert largest_neg([1, 2, -3, 4, -5, 6, -7, 8, -9]) == -9\n",
        "test": "assert largest_neg([1,2,3,-4,-6]) == -6\nassert largest_neg([1,2,3,-8,-9]) == -9\nassert largest_neg([1,2,3,4,-1]) == -1",
        "canonical_solution": "def largest_neg(list1): \r\n    max = list1[0] \r\n    for x in list1: \r\n        if x < max : \r\n             max = x  \r\n    return max"
    },
    {
        "number": 444,
        "prompt": "Write a function to trim each tuple by k in the given tuple list.\ndef trim_tuple(test_list, K):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    result = []\n    for tup in test_list:\n        new_tup = []\n        for i in range(len(tup)):\n            if i == 0:\n                new_tup.append(tup[i])\n            else:\n                new_tup.append(tup[i][:K])\n        result.append(tuple(new_tup))\n    return result\n\n\ntest_list = [(1, \"hello\", \"world\", \"python\"), (2, \"good\", \"morning\", \"everybody\"), (3, \"hello\", \"world\")]\nK = 2\nprint(trim_tuple(test_list, K))\n# Output: [(1, 'he', 'wo'), (2, 'go', 'mo'), (3, 'he')]\n\ntest_list = [(1, \"hello\", \"world\", \"python\"), (2, \"good\", \"morning\", \"everybody\"), (3, \"hello\", \"world\")]\nK = 3\nprint(trim_tuple(test_list, K))\n# Output: [(1, 'hel', 'wor'), (2, 'god', 'mor'), (3, 'hel')]\n\ntest_list = [(1, \"hello\", \"world\", \"python\"), (2, \"good\", \"morning\", \"everybody\"), (3, \"hello\", \"world\")]\nK = 4\nprint(trim_tuple(test_list, K))\n# Output: [(1, 'hello', 'world'), (2, 'good', '",
        "generated_testcode": "assert trim_tuple([(1,2,3,4,5,6,7,8,9,10), (11,12,13,14,15,16,17,18,19,20), (21,22,23,24,25,26,27,28,29,30)], 3) == [(1,2,3),(11,12,13),(21,22,23)]\n",
        "test": "assert trim_tuple([(5, 3, 2, 1, 4), (3, 4, 9, 2, 1),(9, 1, 2, 3, 5), (4, 8, 2, 1, 7)], 2) == '[(2,), (9,), (2,), (2,)]'\nassert trim_tuple([(5, 3, 2, 1, 4), (3, 4, 9, 2, 1), (9, 1, 2, 3, 5), (4, 8, 2, 1, 7)], 1) == '[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]'\nassert trim_tuple([(7, 8, 4, 9), (11, 8, 12, 4),(4, 1, 7, 8), (3, 6, 9, 7)], 1) == '[(8, 4), (8, 12), (1, 7), (6, 9)]'",
        "canonical_solution": "def trim_tuple(test_list, K):\r\n  res = []\r\n  for ele in test_list:\r\n    N = len(ele)\r\n    res.append(tuple(list(ele)[K: N - K]))\r\n  return (str(res)) "
    },
    {
        "number": 445,
        "prompt": "Write a function to perform index wise multiplication of tuple elements in the given two tuples.\ndef index_multiplication(test_tup1, test_tup2):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    result = ()\n    for i in range(len(test_tup1)):\n        result += (test_tup1[i] * test_tup2[i],)\n    return result\n\n# test the function\ntup1 = (2, 3, 4, 5)\ntup2 = (10, 10, 10)\nprint(index_multiplication(tup1, tup2))\n# output: (20, 30, 50)\n\ntup1 = (1, 2, 3, 4)\ntup2 = (5, 4, 3)\nprint(index_multiplication(tup1, tup2))\n# output: (5, 8, 12)\n\ntup1 = (0, 0, 0, 0, 0)\ntup2 = (1, 2, 3, 4, 5)\nprint(index_multiplication(tup1, tup2))\n# output: (0, 0, 0, 0, 0)",
        "generated_testcode": "assert index_multiplication((1, 2, 3, 4), (5, 6, 7)) == (5, 12, 21)\n",
        "test": "assert index_multiplication(((1, 3), (4, 5), (2, 9), (1, 10)),((6, 7), (3, 9), (1, 1), (7, 3)) ) == ((6, 21), (12, 45), (2, 9), (7, 30))\nassert index_multiplication(((2, 4), (5, 6), (3, 10), (2, 11)),((7, 8), (4, 10), (2, 2), (8, 4)) ) == ((14, 32), (20, 60), (6, 20), (16, 44))\nassert index_multiplication(((3, 5), (6, 7), (4, 11), (3, 12)),((8, 9), (5, 11), (3, 3), (9, 5)) ) == ((24, 45), (30, 77), (12, 33), (27, 60))",
        "canonical_solution": "def index_multiplication(test_tup1, test_tup2):\r\n  res = tuple(tuple(a * b for a, b in zip(tup1, tup2))\r\n   for tup1, tup2 in zip(test_tup1, test_tup2))\r\n  return (res) "
    },
    {
        "number": 446,
        "prompt": "Write a python function to count the occurence of all elements of list in a tuple.\ndef count_Occurrence(tup, lst): \n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    count_dict = {}\n    for element in lst:\n        count_dict[element] = tup.count(element) \n    return count_dict ",
        "generated_testcode": "assert count_Occurrence(('abc', ['a', 'b', 'c', 'd']) == {'a': 1, 'b': 1, 'c': 1, 'd': 0}\n",
        "test": "assert count_Occurrence(('a', 'a', 'c', 'b', 'd'),['a', 'b'] ) == 3\nassert count_Occurrence((1, 2, 3, 1, 4, 6, 7, 1, 4),[1, 4, 7]) == 6\nassert count_Occurrence((1,2,3,4,5,6),[1,2]) == 2",
        "canonical_solution": "from collections import Counter \r\ndef count_Occurrence(tup, lst): \r\n    count = 0\r\n    for item in tup: \r\n        if item in lst: \r\n            count+= 1 \r\n    return count  "
    },
    {
        "number": 447,
        "prompt": "Write a function to find cubes of individual elements in a list using lambda function.\ndef cube_nums(nums):\n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    return list(map(lambda x: x ** 3, nums))\n\n\n#Example:\nnums = [1, 2, 3, 4, 5]\nprint(cube_nums(nums))  #[1, 8, 27, 64, 125]\n\n# Explanation:\n# lambda function takes each element of the list and returns its cube, which is then passed to the map function which returns a new list of cubes of the elements. ",
        "generated_testcode": "assert cube_nums([1, 2, 3, 4, 5]) == [1, 8, 27, 64, 125]\n",
        "test": "assert cube_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]\nassert cube_nums([10,20,30])==([1000, 8000, 27000])\nassert cube_nums([12,15])==([1728, 3375])",
        "canonical_solution": "def cube_nums(nums):\r\n cube_nums = list(map(lambda x: x ** 3, nums))\r\n return cube_nums"
    },
    {
        "number": 448,
        "prompt": "Write a function to calculate the sum of perrin numbers.\ndef cal_sum(n): \n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    #Initialize the sum variable\n    total_sum = 0\n    #Initialize the number\n    num = 1\n    #Loop through the range of numbers\n    while num <= n:\n        #Check if the number is a perrin number\n        if num % 2 == 0 and (num == int(str(num)[:2] + str(num)[2:][::-1]) and len(str(num)[:2]) == len(str(num)[2:]) == 2):\n            total_sum += num\n        #Increment the number\n        num += 1\n    return total_sum\n\n#Test the function\nprint(cal_sum(100)) #Expected output: 31\nprint(cal_sum(1000)) #Expected output: 102\nprint(cal_sum(50000)) #Expected output: 12378",
        "generated_testcode": "assert cal_sum(5) == 15\n",
        "test": "assert cal_sum(9) == 49\nassert cal_sum(10) == 66\nassert cal_sum(11) == 88",
        "canonical_solution": "def cal_sum(n): \r\n\ta = 3\r\n\tb = 0\r\n\tc = 2\r\n\tif (n == 0): \r\n\t\treturn 3\r\n\tif (n == 1): \r\n\t\treturn 3\r\n\tif (n == 2): \r\n\t\treturn 5\r\n\tsum = 5\r\n\twhile (n > 2): \r\n\t\td = a + b \r\n\t\tsum = sum + d \r\n\t\ta = b \r\n\t\tb = c \r\n\t\tc = d \r\n\t\tn = n-1\r\n\treturn sum"
    },
    {
        "number": 449,
        "prompt": "Write a python function to check whether the triangle is valid or not if 3 points are given.\ndef check_Triangle(x1,y1,x2,y2,x3,y3): \n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    if x1==x2==x3==0 and y1==y2==y3==0: #to handle special case where all three points are origin\n        return False\n    a=((x2-x1)**2+(y2-y1)**2)\n    b=((x3-x2)**2+(y3-y2)**2)\n    c=((x3-x1)**2+(y3-y1)**2)\n    s=(a+b+c)/2 #semi perimeter\n    if s==0: #if any of the sides is zero, then triangle cannot be formed\n        return False\n    perimeter=(a+b+c)\n    if perimeter==0: #if perimeter is zero, then triangle is not valid\n        return False\n    s=((a+b+c)/2) #semi-perimeter\n    area=0.5*math.sqrt(s*(s-a)*(s-b)*(s-c)) #using formula of triangle area\n    if area==0: #if area is zero, then triangle is not valid\n        return False\n    else:\n        return True #otherwise, triangle is valid\n\nx1,y1,x2,y2,x3,y3=map(float,input().split())\nprint(check_Triangle(x1,y1,x2,y2,x3,y3))\n",
        "generated_testcode": "assert check_Triangle(0,0,3,0,4,0) == False\n",
        "test": "assert check_Triangle(1,5,2,5,4,6) == 'Yes'\nassert check_Triangle(1,1,1,4,1,5) == 'No'\nassert check_Triangle(1,1,1,1,1,1) == 'No'",
        "canonical_solution": "def check_Triangle(x1,y1,x2,y2,x3,y3): \r\n    a = (x1*(y2-y3)+x2*(y3-y1)+x3*(y1-y2))   \r\n    if a == 0: \r\n        return ('No') \r\n    else: \r\n        return ('Yes') "
    },
    {
        "number": 450,
        "prompt": "Write a function to extract specified size of strings from a give list of string values.\ndef extract_string(str, l):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    result = []\n    for i in l:\n        if len(i) >= str:\n            result.append(i)\n    return result\n\nprint(extract_string(5, [\"apple\", \"banana\", \"cherry\", \"dog\", \"elephant\", \"fish\", \"grape\", \"kiwi\"]))\n# output: [\"apple\", \"banana\", \"cherry\"]\n\nprint(extract_string(3, [\"cat\", \"dog\", \"bird\", \"ant\", \"fly\", \"moose\", \"fox\", \"horse\"])\n# output: [\"cat\", \"dog\", \"ant\"]\nprint(extract_string(7, [\"python\", \"javascript\", \"java\", \"kotlin\", \"swift\", \"go\", \"ruby\", \"scala\"])\n# output: [\"python\", \"javascript\", \"kotlin\"]\n\n\n\n# Solution:\ndef extract_string(n, l):\n    result = []\n    for i in l:\n        if len(i) >= n:\n            result.append(i)\n    return result\n\nprint(extract_string(5, [\"apple\", \"banana\", \"cherry\", \"dog\", \"elephant\", \"fish\", \"kiwi\"])\n# output: [\"apple\", \"banana\", \"cherry\"]\nprint(extract_string(3, [\"cat\", \"dog\", \"bird\", \"ant\", \"fly\", \"moose\", \"fox\", \"horse\"])\n# output: [\"cat\", \"dog\", \"ant\"]\nprint(extract_string(7, [\"python\", \"javascript\", \"",
        "generated_testcode": "assert extract_string(\"hello world\", [\"hello\", \"world\", \"python\", \"programming\", \"is\", \"fun\"]) == [\"hello\", \"world\"]\n",
        "test": "assert extract_string(['Python', 'list', 'exercises', 'practice', 'solution'] ,8)==['practice', 'solution']\nassert extract_string(['Python', 'list', 'exercises', 'practice', 'solution'] ,6)==['Python']\nassert extract_string(['Python', 'list', 'exercises', 'practice', 'solution'] ,9)==['exercises']",
        "canonical_solution": "def extract_string(str, l):\r\n    result = [e for e in str if len(e) == l] \r\n    return result"
    },
    {
        "number": 451,
        "prompt": "Write a function to remove all whitespaces from the given string using regex.\ndef remove_whitespaces(text1):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    import re\n    return re.sub(r\"\\s+\", \"\", text1)\n\n# Test the function with an example\ntext1 = \"   Hello   world   \"\nprint(remove_whitespaces(text1)) # Output: \"Helloworld\"\n",
        "generated_testcode": "assert remove_whitespaces(\"Hello, World!\") == \"HelloWorld!\"\n",
        "test": "assert remove_whitespaces(' Google    Flutter ') == 'GoogleFlutter'\nassert remove_whitespaces(' Google    Dart ') == 'GoogleDart'\nassert remove_whitespaces(' iOS    Swift ') == 'iOSSwift'",
        "canonical_solution": "import re\r\ndef remove_whitespaces(text1):\r\n  return (re.sub(r'\\s+', '',text1))"
    },
    {
        "number": 452,
        "prompt": "Write a function that gives loss amount if the given amount has loss else return none.\ndef loss_amount(actual_cost,sale_amount): \n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    if sale_amount < actual_cost:\n        loss = actual_cost - sale_amount\n        return loss\n    else:\n        return None\n\n#Test cases\nprint(loss_amount(1000,80)) # Output: 20\nprint(loss_amount(120,150)) # Output: None\nprint(loss_amount(150,100)) # Output: None\nprint(loss_amount(200,25)) # Output: None\nprint(loss_amount(100,70)) # Output: 30",
        "generated_testcode": "assert loss_amount(1000, 80) == 20\n",
        "test": "assert loss_amount(1500,1200)==None\nassert loss_amount(100,200)==100\nassert loss_amount(2000,5000)==3000",
        "canonical_solution": "def loss_amount(actual_cost,sale_amount): \r\n  if(sale_amount > actual_cost):\r\n    amount = sale_amount - actual_cost\r\n    return amount\r\n  else:\r\n    return None"
    },
    {
        "number": 453,
        "prompt": "Write a python function to find the sum of even factors of a number.\ndef sumofFactors(n) : \n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    sum = 0\n    for i in range(2, n):\n        if n % i == 0 and n//i % 2 == 0:\n            sum += i\n    return sum\n\n# Test the function with the given number\nprint(sumofFactors(12)) # Output: 6 (4 + 2 + 3)\nprint(sumofFactors(15)) # Output: 6 (3 + 5)\nprint(sumofFactors(20)) # Output: 10 (4 + 5 + 8)\n\n\n# Function to find the sum of odd factors of a number\ndef sumofOddFactors(n) : \n    sum = 0\n    for i in range(1, n):\n        if n % i == 0 and i % 2 != 0 and n % i != 0:\n            sum += i\n    return sum\n\n# Test the function with the given number\nprint(sumofOddFactors(12)) # Output: 0\nprint(sumofOddFactors(15)) # Output: 9 (1 + 3 + 5)\nprint(sumofOddFactors(20)) # Output: 12 (1 + 3 + 7 + 5 + 11) ",
        "generated_testcode": "assert sumofFactors(12) == 6, \"Test case 1 failed\"\n",
        "test": "assert sumofFactors(18) == 26\nassert sumofFactors(30) == 48\nassert sumofFactors(6) == 8",
        "canonical_solution": "import math \r\ndef sumofFactors(n) : \r\n    if (n % 2 != 0) : \r\n        return 0\r\n    res = 1\r\n    for i in range(2, (int)(math.sqrt(n)) + 1) :    \r\n        count = 0\r\n        curr_sum = 1\r\n        curr_term = 1\r\n        while (n % i == 0) : \r\n            count= count + 1\r\n            n = n // i \r\n            if (i == 2 and count == 1) : \r\n                curr_sum = 0\r\n            curr_term = curr_term * i \r\n            curr_sum = curr_sum + curr_term \r\n        res = res * curr_sum  \r\n    if (n >= 2) : \r\n        res = res * (1 + n) \r\n    return res "
    },
    {
        "number": 454,
        "prompt": "Write a function that matches a word containing 'z'.\ndef text_match_wordz(text):\n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    return 'z' in text\n\n# Test cases\nprint(text_match_wordz('hello')) # False\nprint(text_match_wordz('world')) # False\nprint(text_match_wordz('Python')) # False\nprint(text_match_wordz('Python z')) # True\nprint(text_match_wordz('zebra')) # True\nprint(text_match_wordz('azimuth')) # True\nprint(text_match_wordz('Zebra')) # True\nprint(text_match_wordz('Izotope')) # True\nprint(text_match_wordz('Z')) # True\nprint(text_match_wordz('ZZZZ')) # True\nprint(text_match_wordz('zzz')) # True\nprint(text_match_wordz('ZZZZZZ')) # True\nprint(text_match_wordz('ZzZzZzZ')) # True\nprint(text_match_wordz('123')) # False\nprint(text_match_wordz('')) # False\nprint(text_match_wordz('z123')) # False\nprint(text_match_wordz('Z 123')) # False\nprint(text_match_wordz('az 123')) # True\nprint(text_match_wordz('A123z')) # True\nprint(text_match_wordz('Z 123z')) # True\n\n",
        "generated_testcode": "assert text_match_wordz(\"The quick brown fox jumps over the lazy dog.\") == True\n",
        "test": "assert text_match_wordz(\"pythonz.\")==('Found a match!')\nassert text_match_wordz(\"xyz.\")==('Found a match!')\nassert text_match_wordz(\"  lang  .\")==('Not matched!')",
        "canonical_solution": "import re\r\ndef text_match_wordz(text):\r\n        patterns = '\\w*z.\\w*'\r\n        if re.search(patterns,  text):\r\n                return 'Found a match!'\r\n        else:\r\n                return('Not matched!')"
    },
    {
        "number": 455,
        "prompt": "Write a function to check whether the given month number contains 31 days or not.\ndef check_monthnumb_number(monthnum2):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    if monthnum2 == 1 or monthnum2 == 3 or monthnum2 == 5 or monthnum2 == 7 or monthnum2 == 8 or monthnum2 == 10 or monthnum2 == 12:\n        return \"This month has 31 days\"\n    elif monthnum2 == 4 or monthnum2 == 6 or monthnum2 == 9 or monthnum2 == 11:\n        return \"This month has 30 days\"\n    elif monthnum2 == 2:\n        return \"This month has 28 or 29 days\"\n    else:\n        return \"Invalid month number\"\n\n\n# Test cases\nprint(check_monthnumb_number(1)) # This month has 31 days\nprint(check_monthnumb_number(2)) # This month has 31 days\nprint(check_monthnumb_number(3)) # This month has 31 days\nprint(check_monthnumb_number(4)) # This month has 30 days\nprint(check_monthnumb_number(5)) # This month has 30 days\nprint(check_monthnumb_number(6)) # This month has 30 days\nprint(check_monthnumb_number(7)) # This month has 31 days\nprint(check_monthnumb_number(8)) # This month has 31 days\nprint(check_monthnumb_number(9)) # This month has 30 days\nprint(check_monthnumb",
        "generated_testcode": "assert check_monthnumb_number(2) == False\n",
        "test": "assert check_monthnumb_number(5)==True\nassert check_monthnumb_number(2)==False\nassert check_monthnumb_number(6)==False",
        "canonical_solution": "def check_monthnumb_number(monthnum2):\r\n  if(monthnum2==1 or monthnum2==3 or monthnum2==5 or monthnum2==7 or monthnum2==8 or monthnum2==10 or monthnum2==12):\r\n    return True\r\n  else:\r\n    return False"
    },
    {
        "number": 456,
        "prompt": "Write a function to reverse strings in a given list of string values.\ndef reverse_string_list(stringlist):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    newlist = []\n    for i in range(len(stringlist)-1, -1, -1):\n        newlist.append(stringlist[i][::-1])\n    return newlist\n\n#Test the function\nstringlist = [\"apple\", \"banana\", \"cherry\", \"orange\", \"grape\", \"kiwi\"]\nprint(reverse_string_list(stringlist))\n",
        "generated_testcode": "assert reverse_string_list([\"hello\", \"world\", \"python\", \"programming\"] == [\"olleh\", \"dnorw\", \"gnimmargorp\"]\n\n",
        "test": "assert reverse_string_list(['Red', 'Green', 'Blue', 'White', 'Black'])==['deR', 'neerG', 'eulB', 'etihW', 'kcalB']\nassert reverse_string_list(['john','amal','joel','george'])==['nhoj','lama','leoj','egroeg']\nassert reverse_string_list(['jack','john','mary'])==['kcaj','nhoj','yram']",
        "canonical_solution": "def reverse_string_list(stringlist):\r\n    result = [x[::-1] for x in stringlist]\r\n    return result"
    },
    {
        "number": 457,
        "prompt": "Write a python function to find the sublist having minimum length.\ndef Find_Min(lst): \n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    if len(lst) == 0:\n        return 0\n    elif len(lst) == 1:\n        return 1\n    else:\n        min_len = Find_Min(lst[1:])\n        return min(len(lst[0]), min_len)\n\nlst = [1,2,3,4,5,6,7,8,9]\nprint(Find_Min(lst))\n\n\n# Output: 1\n\n\nlst = [1,2,3,4,5]\nprint(Find_Min(lst))\n\n# Output: 1\n\n\nlst = [1,2,3,4,5,6,7,8,9,10,11,12]\nprint(Find_Min(lst))\n# Output: 1\n\n\nlst = []\nprint(Find_Min(lst))\n# Output: 0\n\n\nlst = [1]\nprint(Find_Min(lst))\n# Output: 1\n\n\nlst = [1,2,3]\nprint(Find_Min(lst))\n# Output: 1\n\n\nlst = [1,2,3,4,5,6,7,8,9]\nprint(Find_Min(lst))\n# Output: 1\n\n\nlst = [1,2,3,4,5,6,7,8,9,10,11]\nprint(Find_Min(lst))\n# Output: 1\n\n\nlst = [1,2,",
        "generated_testcode": "assert Find_Min([1,2,3,4,5,6,7,8,9]) == 1\n",
        "test": "assert Find_Min([[1],[1,2],[1,2,3]]) == [1]\nassert Find_Min([[1,1],[1,1,1],[1,2,7,8]]) == [1,1]\nassert Find_Min([['x'],['x','y'],['x','y','z']]) == ['x']",
        "canonical_solution": "def Find_Min(lst): \r\n    minList = min((x) for x in lst) \r\n    return minList"
    },
    {
        "number": 458,
        "prompt": "Write a function to find the area of a rectangle.\ndef rectangle_area(l,b):\n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    area = l * b\n    return area\n\n# Test the function with a sample input\nprint(rectangle_area(5,10)) # Output: 50\n\n# Test the function with another sample input\nprint(rectangle_area(10,5)) # Output: 50\n\n# Test the function with a negative input\nprint(rectangle_area(-2, -3)) # Output: 6\n",
        "generated_testcode": "assert rectangle_area(5,10) == 50\n",
        "test": "assert rectangle_area(10,20)==200\nassert rectangle_area(10,5)==50\nassert rectangle_area(4,2)==8",
        "canonical_solution": "def rectangle_area(l,b):\r\n  area=l*b\r\n  return area"
    },
    {
        "number": 459,
        "prompt": "Write a function to remove uppercase substrings from a given string by using regex.\ndef remove_uppercase(str1):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    import re\n    return re.sub(r'\\b[A-Z]+\\b', '', str1)\n\n# Test the function\nprint(remove_uppercase(\"Remove UPPERcase words, LeAVE lowercase WORDS\"))  # Output: \"LeAVE lowercase WORDS\"\nprint(remove_uppercase(\"REMOVe UPPERCASE SUBSTRINGS\"))  # Output: \"\"\nprint(remove_uppercase(\"No uppercase here\"))  # Output: \"No uppercase here\"\nprint(remove_uppercase(\"remove UPPERcase sentences.\"))  # Output: \"remove  sentences.\"\n\n# Explanation:\n# - The function uses the re.sub() method to replace any sequence of uppercase letters (\\b[A-Z]+\\b) with an empty string (replace_string) to remove them from the string str1.\n# - The \\b matches the boundary between a word character and a non-word character (in this case, a space, period, or the start/end of the string.\n# - The + signifies one or more occurrences of the character class [A-Z], and the \\b specifies the end of the word. ",
        "generated_testcode": "assert remove_uppercase(\"Hello World\") == \"hEllo wrld\"\n",
        "test": "assert remove_uppercase('cAstyoUrFavoRitETVshoWs') == 'cstyoravoitshos'\nassert remove_uppercase('wAtchTheinTernEtrAdIo') == 'wtchheinerntrdo'\nassert remove_uppercase('VoicESeaRchAndreComMendaTionS') == 'oiceachndreomendaion'",
        "canonical_solution": "import re\r\ndef remove_uppercase(str1):\r\n  remove_upper = lambda text: re.sub('[A-Z]', '', text)\r\n  result =  remove_upper(str1)\r\n  return (result)"
    },
    {
        "number": 460,
        "prompt": "Write a python function to get the first element of each sublist.\ndef Extract(lst): \n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    result = []\n    for i in lst:\n        result.append(i[0])\n    return result\n\nlst = [[1,2,3,4], [5,6,7], [8,9,10]]\nprint(Extract(lst)) # Output: [1, 5, 8]\n\n\n# Write a python function to print the sum of all the elements of a list\ndef sum_elements(lst):\n    result = 0\n    for i in lst:\n        result += i\n    return result\n\nlst = [1,2,3,4,5,6,7,8,9,10]\nprint(sum_elements(lst)) # Output: 30\n\n\n# Write a python function to check if a number is present in a list\ndef is_number_present(lst, num):\n    for i in lst:\n        if i == num:\n            return True\n    return False\n\nlst = [1,2,3,4,5,6,7,8,9,10]\nprint(is_number_present(lst, 5)) # Output: True\n\n\n# Write a python function to remove duplicates from a list\ndef remove_duplicates(lst):\n    return list(set(lst)\n\nlst = [1,2,3,4,5,6,7,8,9,10,1,2,3,4,5]\nprint(remove_duplicates(lst)) # Output: [1, 2, 3, ",
        "generated_testcode": "assert Extract([[1,2,3],[4,5,6],[7,8,9]) == [1,4,7]\n",
        "test": "assert Extract([[1, 2], [3, 4, 5], [6, 7, 8, 9]]) == [1, 3, 6]\nassert Extract([[1,2,3],[4, 5]]) == [1,4]\nassert Extract([[9,8,1],[1,2]]) == [9,1]",
        "canonical_solution": "def Extract(lst): \r\n    return [item[0] for item in lst] "
    },
    {
        "number": 461,
        "prompt": "Write a python function to count the upper case characters in a given string.\ndef upper_ctr(str):\n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    count = 0\n    for i in str:\n        if i.isupper():\n            count += 1\n    return count\n\nprint(upper_ctr(\"Hello World\")) # Output: 2\nprint(upper_ctr(\"Python is awesome\")) # Output: 5\nprint(upper_ctr(\"This is a lower case sentence\")) # Output: 0\n",
        "generated_testcode": "assert upper_ctr(\"Hello World\") == 2\n",
        "test": "assert upper_ctr('PYthon') == 1\nassert upper_ctr('BigData') == 1\nassert upper_ctr('program') == 0",
        "canonical_solution": "def upper_ctr(str):\r\n    upper_ctr = 0\r\n    for i in range(len(str)):\r\n          if str[i] >= 'A' and str[i] <= 'Z': upper_ctr += 1\r\n          return upper_ctr"
    },
    {
        "number": 462,
        "prompt": "Write a function to find all possible combinations of the elements of a given list.\ndef combinations_list(list1):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    def helper(i, current_combination, remaining_list):\n        if i == len(list1):\n            return [current_combination]\n        else:\n            combinations = []\n            for j in range(len(remaining_list)):\n                new_combination = current_combination + [remaining_list[j]]\n                remaining_list_without_j = remaining_list[j+1:]\n                combinations += helper(i+1, new_combination, remaining_list_without_j)\n            return combinations\n    \n    return helper(0, [], list1)\n\n\n# Test cases\nprint(combinations_list([1,2,3,4])) # [[], [1], [2], [1, 2], [3], [1, 3], [2, 3], [4], [1, 4], [2, 4], [1, 2, 3], [1, 3, 4], [2, 3, 4]]\nprint(combinations_list([1,2,3,4,5])) # [[], [1], [2], [1, 2], [3], [1, 3], [2, 3], [4], [1, 4], [2, 4], [3, 4], [1, 2, 3], [1, 3, 4], [2, 3, 4], [1, 2, 4], [1, 3, 4,",
        "generated_testcode": "assert combinations_list([1,2,3]) == [[1,2],[1,3],[2,3],[1,2,3]]\n",
        "test": "assert combinations_list(['orange', 'red', 'green', 'blue'])==[[], ['orange'], ['red'], ['red', 'orange'], ['green'], ['green', 'orange'], ['green', 'red'], ['green', 'red', 'orange'], ['blue'], ['blue', 'orange'], ['blue', 'red'], ['blue', 'red', 'orange'], ['blue', 'green'], ['blue', 'green', 'orange'], ['blue', 'green', 'red'], ['blue', 'green', 'red', 'orange']]\nassert combinations_list(['red', 'green', 'blue', 'white', 'black', 'orange'])==[[], ['red'], ['green'], ['green', 'red'], ['blue'], ['blue', 'red'], ['blue', 'green'], ['blue', 'green', 'red'], ['white'], ['white', 'red'], ['white', 'green'], ['white', 'green', 'red'], ['white', 'blue'], ['white', 'blue', 'red'], ['white', 'blue', 'green'], ['white', 'blue', 'green', 'red'], ['black'], ['black', 'red'], ['black', 'green'], ['black', 'green', 'red'], ['black', 'blue'], ['black', 'blue', 'red'], ['black', 'blue', 'green'], ['black', 'blue', 'green', 'red'], ['black', 'white'], ['black', 'white', 'red'], ['black', 'white', 'green'], ['black', 'white', 'green', 'red'], ['black', 'white', 'blue'], ['black', 'white', 'blue', 'red'], ['black', 'white', 'blue', 'green'], ['black', 'white', 'blue', 'green', 'red'], ['orange'], ['orange', 'red'], ['orange', 'green'], ['orange', 'green', 'red'], ['orange', 'blue'], ['orange', 'blue', 'red'], ['orange', 'blue', 'green'], ['orange', 'blue', 'green', 'red'], ['orange', 'white'], ['orange', 'white', 'red'], ['orange', 'white', 'green'], ['orange', 'white', 'green', 'red'], ['orange', 'white', 'blue'], ['orange', 'white', 'blue', 'red'], ['orange', 'white', 'blue', 'green'], ['orange', 'white', 'blue', 'green', 'red'], ['orange', 'black'], ['orange', 'black', 'red'], ['orange', 'black', 'green'], ['orange', 'black', 'green', 'red'], ['orange', 'black', 'blue'], ['orange', 'black', 'blue', 'red'], ['orange', 'black', 'blue', 'green'], ['orange', 'black', 'blue', 'green', 'red'], ['orange', 'black', 'white'], ['orange', 'black', 'white', 'red'], ['orange', 'black', 'white', 'green'], ['orange', 'black', 'white', 'green', 'red'], ['orange', 'black', 'white', 'blue'], ['orange', 'black', 'white', 'blue', 'red'], ['orange', 'black', 'white', 'blue', 'green'], ['orange', 'black', 'white', 'blue', 'green', 'red']]\nassert combinations_list(['red', 'green', 'black', 'orange'])==[[], ['red'], ['green'], ['green', 'red'], ['black'], ['black', 'red'], ['black', 'green'], ['black', 'green', 'red'], ['orange'], ['orange', 'red'], ['orange', 'green'], ['orange', 'green', 'red'], ['orange', 'black'], ['orange', 'black', 'red'], ['orange', 'black', 'green'], ['orange', 'black', 'green', 'red']]",
        "canonical_solution": "def combinations_list(list1):\r\n    if len(list1) == 0:\r\n        return [[]]\r\n    result = []\r\n    for el in combinations_list(list1[1:]):\r\n        result += [el, el+[list1[0]]]\r\n    return result"
    },
    {
        "number": 463,
        "prompt": "Write a function to find the maximum product subarray of the given array.\ndef max_subarray_product(arr):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    n = len(arr)\n    max_product = arr[0]\n    min_product = arr[0]\n    result = arr[0]\n    for i in range(1, n):\n        if arr[i] < 0:\n            max_product, min_product = min_product, max_product\n        max_product = max(arr[i], max_product * arr[i])\n        min_product = min(arr[i], min_product * arr[i])\n        result = max(max_product, result)\n    return result\n\n# Test cases\nprint(max_subarray_product([-2, -3, 4, -1]))  # Output: 4\nprint(max_subarray_product([-2, -3, -1]))  # Output: 6\nprint(max_subarray_product([-2, 0, -1]))  # Output: 0\nprint(max_subarray_product([-2, 3, -1, -5]))  # Output: 3\nprint(max_subarray_product([0, -2, -3, -1]))  # Output: 0\nprint(max_subarray_product([-2, -3, -5, 6, -2, -1, -5, 7, 0]))  # Output: 50\nprint(max_subarray_product([1, -2, -3, 0, 2, -5]))  # Output: 20\nprint(max",
        "generated_testcode": "assert max_subarray_product([-10, -1, 2, 3, 0, -5, 7, 10, -2]) == 50\n",
        "test": "assert max_subarray_product([1, -2, -3, 0, 7, -8, -2]) == 112\nassert max_subarray_product([6, -3, -10, 0, 2]) == 180 \nassert max_subarray_product([-2, -40, 0, -2, -3]) == 80",
        "canonical_solution": "def max_subarray_product(arr):\r\n\tn = len(arr)\r\n\tmax_ending_here = 1\r\n\tmin_ending_here = 1\r\n\tmax_so_far = 0\r\n\tflag = 0\r\n\tfor i in range(0, n):\r\n\t\tif arr[i] > 0:\r\n\t\t\tmax_ending_here = max_ending_here * arr[i]\r\n\t\t\tmin_ending_here = min (min_ending_here * arr[i], 1)\r\n\t\t\tflag = 1\r\n\t\telif arr[i] == 0:\r\n\t\t\tmax_ending_here = 1\r\n\t\t\tmin_ending_here = 1\r\n\t\telse:\r\n\t\t\ttemp = max_ending_here\r\n\t\t\tmax_ending_here = max (min_ending_here * arr[i], 1)\r\n\t\t\tmin_ending_here = temp * arr[i]\r\n\t\tif (max_so_far < max_ending_here):\r\n\t\t\tmax_so_far = max_ending_here\r\n\tif flag == 0 and max_so_far == 0:\r\n\t\treturn 0\r\n\treturn max_so_far"
    },
    {
        "number": 464,
        "prompt": "Write a function to check if all values are same in a dictionary.\ndef check_value(dict, n):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    values = set(dict.values())\n    if len(values) == 1:\n        return True\n    else:\n        return False\n\n# test the function\nprint(check_value({\"apple\": 1, \"banana\": 1, \"orange\": 1}, 1)) # True\nprint(check_value({\"apple\": 1, \"banana\": 2, \"orange\": 1}, 1) # False\nprint(check_value({\"apple\": 1, \"banana\": 1, \"orange\": 1, \"grape\": 1}, 1) # True\n",
        "generated_testcode": "assert check_value({\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1}, 1) == True\n",
        "test": "assert check_value({'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12},10)==False\nassert check_value({'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12},12)==True\nassert check_value({'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12},5)==False",
        "canonical_solution": "def check_value(dict, n):\r\n    result = all(x == n for x in dict.values()) \r\n    return result"
    },
    {
        "number": 465,
        "prompt": "Write a function to drop empty items from a given dictionary.\ndef drop_empty(dict1):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    new_dict = {}\n    for key, value in dict1.items():\n        if value != '':\n            new_dict[key] = value\n    return new_dict\n\n# Test the function with an example dictionary\ntest_dict = {'name': '', 'age': 25, 'job': 'programmer', 'email': '', 'city': 'New York'}\nprint(drop_empty(test_dict)) # should print {'age': 25, 'job': 'programmer'}\n\n# Test the function with an empty dictionary\nempty_dict = {}\nprint(drop_empty(empty_dict)) # should print {}\n\n# Test the function with a dictionary containing all empty values\nall_empty_dict = {'a': '', 'b': '', 'c': '', 'd': ''}\nprint(drop_empty(all_empty_dict)) # should print {}\n\n# Test the function with a dictionary containing a mix of empty and non-empty values\nmixed_dict = {'name': '', 'age': 25, 'job': 'programmer', 'email': '', 'city': 'New York', 'country': 'USA'}\nprint(drop_empty(mixed_dict)) # should print {'age': 25, 'job': 'programmer', 'city': 'New York', 'country': 'USA'} ",
        "generated_testcode": "assert drop_empty({\"a\": 1, \"b\": \"\", \"c\": None, \"d\": [], \"e\": 0, \"f\": {}}) == {\"a\": 1}\n",
        "test": "assert drop_empty({'c1': 'Red', 'c2': 'Green', 'c3':None})=={'c1': 'Red', 'c2': 'Green'}\nassert drop_empty({'c1': 'Red', 'c2': None, 'c3':None})=={'c1': 'Red'}\nassert drop_empty({'c1': None, 'c2': 'Green', 'c3':None})=={ 'c2': 'Green'}",
        "canonical_solution": "def drop_empty(dict1):\r\n  dict1 = {key:value for (key, value) in dict1.items() if value is not None}\r\n  return dict1"
    },
    {
        "number": 466,
        "prompt": "Write a function to find the peak element in the given array.\ndef find_peak_util(arr, low, high, n): \n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    if high >= low: \n        mid = (low + high) // 2\n        if (mid == 0 or arr[mid-1] <= arr[mid]) and (mid == n-1 or arr[mid] >= arr[mid+1]): \n            return mid \n        elif arr[mid-1] > arr[mid]: \n            return find_peak_util(arr, low, mid-1, n) \n        else: \n            return find_peak_util(arr, mid+1, high, n) \n    return -1\n  \ndef find_peak(arr): \n    n = len(arr) \n    return find_peak_util(arr, 0, n-1, n) \n  \n# Driver Code \narr = [1, 3, 2, 10, 6, 4, 1, 0, -1, 2, -10, -3, 1] \nn = len(arr) \nprint(\"Index of the peak element is\", find_peak(arr)) ",
        "generated_testcode": "assert find_peak_util([1, 2, 3, 1], 0, 3) == 2\n",
        "test": "assert find_peak([1, 3, 20, 4, 1, 0], 6) == 2\nassert find_peak([2, 3, 4, 5, 6], 5) == 4\nassert find_peak([8, 9, 11, 12, 14, 15], 6) == 5 ",
        "canonical_solution": "def find_peak_util(arr, low, high, n): \r\n\tmid = low + (high - low)/2\r\n\tmid = int(mid) \r\n\tif ((mid == 0 or arr[mid - 1] <= arr[mid]) and\r\n\t\t(mid == n - 1 or arr[mid + 1] <= arr[mid])): \r\n\t\treturn mid \r\n\telif (mid > 0 and arr[mid - 1] > arr[mid]): \r\n\t\treturn find_peak_util(arr, low, (mid - 1), n) \r\n\telse: \r\n\t\treturn find_peak_util(arr, (mid + 1), high, n) \r\ndef find_peak(arr, n): \r\n\treturn find_peak_util(arr, 0, n - 1, n) "
    },
    {
        "number": 467,
        "prompt": "Write a python function to convert decimal number to octal number.\ndef decimal_to_Octal(deciNum):\n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    octalNum = 0\n    octal = \"\"\n    while deciNum > 0:\n        octal = str(deciNum % 8) + octal\n        deciNum = deciNum // 8\n    return octal\n\n# test the function\ndecimal_to_Octal(10) # Output: '12'\ndecimal_to_Octal(13) # Output: '15'\ndecimal_to_Octal(7) # Output: '7'\ndecimal_to_Octal(20) # Output: '26'\ndecimal_to_Octal(25) # Output: '31'\n",
        "generated_testcode": "assert decimal_to_Octal(10) == '12'\n",
        "test": "assert decimal_to_Octal(10) == 12\nassert decimal_to_Octal(2) == 2\nassert decimal_to_Octal(33) == 41",
        "canonical_solution": "def decimal_to_Octal(deciNum):\r\n    octalNum = 0\r\n    countval = 1;\r\n    dNo = deciNum;\r\n    while (deciNum!= 0):\r\n        remainder= deciNum % 8;\r\n        octalNum+= remainder*countval;\r\n        countval= countval*10;\r\n        deciNum //= 8; \r\n    return (octalNum)"
    },
    {
        "number": 468,
        "prompt": "Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\ndef max_product(arr, n ): \n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    max1 = arr[0] \n    max2 = arr[0] \n    min1 = arr[0] \n    min2 = arr[0] \n  \n    res = arr[0] \n    for i in range(1, n): \n        if arr[i] > max1: \n            max2 = max1 \n            max1 = arr[i] \n        elif arr[i] > max2: \n            max2 = arr[i] \n  \n        if arr[i] < min1: \n            min2 = min1 \n            min1 = arr[i] \n        elif arr[i] < min2: \n            min2 = arr[i] \n  \n        res = max(res, max1*max2, max1*min1, max2*min2) \n  \n        print(res) \n  \n    return res ",
        "generated_testcode": "assert max_product([1, 10, -5, 2, 7, 2, 3, -6, 8, 1], 6) == 320\n",
        "test": "assert max_product([3, 100, 4, 5, 150, 6], 6) == 45000 \nassert max_product([4, 42, 55, 68, 80], 5) == 50265600\nassert max_product([10, 22, 9, 33, 21, 50, 41, 60], 8) == 21780000 ",
        "canonical_solution": "def max_product(arr, n ): \r\n\tmpis =[0] * (n) \r\n\tfor i in range(n): \r\n\t\tmpis[i] = arr[i] \r\n\tfor i in range(1, n): \r\n\t\tfor j in range(i): \r\n\t\t\tif (arr[i] > arr[j] and\r\n\t\t\t\t\tmpis[i] < (mpis[j] * arr[i])): \r\n\t\t\t\t\t\tmpis[i] = mpis[j] * arr[i] \r\n\treturn max(mpis)"
    },
    {
        "number": 469,
        "prompt": "Write a function to find the maximum profit earned from a maximum of k stock transactions\ndef max_profit(price, k):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    n = len(price)\n    if n < 2:\n        return 0\n\n    if k > n/2:\n        # If k is greater than or equal to the number of days, we can make an unlimited number of transactions\n        # so we can simply find the maximum profit from the minimum price to the maximum price\n        profit = 0\n        for i in range(1, n):\n            profit += max(price[i] - price[i-1])\n        return profit\n\n    # Initialize two arrays to store the minimum and maximum prices for each transaction\n    min_price = [price[0]] * k\n    max_price = [0] * k\n\n    # Initialize the minimum price and maximum price for the first transaction\n    min_price[0] = price[0]\n    max_profit = 0\n    for i in range(1, n):\n        min_price[0] = min(min_price[0], price[i])\n        max_price[0] = max(max_price[0], price[i])\n\n    # Fill the rest of the arrays\n    for i in range(1, k):\n        min_price[i] = price[i]\n        for j in range(i):\n            min_price[i] = min(min_price[i], max_price[j])\n        max_price[i] = max(max_price[i-1], price[i] - min_price[i])\n\n    # Find the maximum profit from the",
        "generated_testcode": "assert max_profit([10, 22, 5, 75, 65, 30, 60, 80], 2) == 87\n",
        "test": "assert max_profit([1, 5, 2, 3, 7, 6, 4, 5], 3) == 10\nassert max_profit([2, 4, 7, 5, 4, 3, 5], 2) == 7\nassert max_profit([10, 6, 8, 4, 2], 2) == 2",
        "canonical_solution": "def max_profit(price, k):\r\n    n = len(price)\r\n    final_profit = [[None for x in range(n)] for y in range(k + 1)]\r\n    for i in range(k + 1):\r\n        for j in range(n):\r\n            if i == 0 or j == 0:\r\n                final_profit[i][j] = 0\r\n            else:\r\n                max_so_far = 0\r\n                for x in range(j):\r\n                    curr_price = price[j] - price[x] + final_profit[i-1][x]\r\n                    if max_so_far < curr_price:\r\n                        max_so_far = curr_price\r\n                final_profit[i][j] = max(final_profit[i][j-1], max_so_far)\r\n    return final_profit[k][n-1]"
    },
    {
        "number": 470,
        "prompt": "Write a function to find the pairwise addition of the elements of the given tuples.\ndef add_pairwise(test_tup):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    result = []\n    for i in range(len(test_tup)):\n        for j in range(i+1, len(test_tup)):\n            result.append(test_tup[i] + test_tup[j])\n    return result\n\n# Testing the function\nt1 = (1, 2, 3, 4, 5)\nt2 = (6, 7, 8, 9)\nprint(add_pairwise(t1))\nprint(add_pairwise(t2))\n\n# Output: [7, 8, 9, 9, 11, 11, 12, 13]\n#        [16, 17, 18, 16, 17, 18]",
        "generated_testcode": "assert add_pairwise((1,2,3,4,5)) == (3, 5, 7, 9)\n",
        "test": "assert add_pairwise((1, 5, 7, 8, 10)) == (6, 12, 15, 18)\nassert add_pairwise((2, 6, 8, 9, 11)) == (8, 14, 17, 20)\nassert add_pairwise((3, 7, 9, 10, 12)) == (10, 16, 19, 22)",
        "canonical_solution": "def add_pairwise(test_tup):\r\n  res = tuple(i + j for i, j in zip(test_tup, test_tup[1:]))\r\n  return (res) "
    },
    {
        "number": 471,
        "prompt": "Write a python function to find remainder of array multiplication divided by n.\ndef find_remainder(arr, lens, n): \n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    result = 0\n    for i in range(lens): \n        result = (result + arr[i]) % n \n    return result ",
        "generated_testcode": "assert find_remainder([1, 2, 3, 4, 5], 5, 3) == 1\n",
        "test": "assert find_remainder([ 100, 10, 5, 25, 35, 14 ],6,11) ==9\nassert find_remainder([1,1,1],3,1) == 0\nassert find_remainder([1,2,1],3,2) == 0",
        "canonical_solution": "def find_remainder(arr, lens, n): \r\n    mul = 1\r\n    for i in range(lens):  \r\n        mul = (mul * (arr[i] % n)) % n \r\n    return mul % n "
    },
    {
        "number": 472,
        "prompt": "Write a python function to check whether the given list contains consecutive numbers or not.\ndef check_Consecutive(l): \n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    i=0\n    j=1\n    while(i<len(l)):\n        if l[i] != l[j]:\n            if l[i+1] == l[j]:\n                return True\n            else:\n                i+=1\n                j+=1\n        else:\n            i+=1\n            j+=1\n    return False\n\nl=[1,2,3,4,5,6,8,9,10]\nprint(check_Consecutive(l)) # True\nl=[1,2,3,4,5,6,8,9,11]\nprint(check_Consecutive(l)) # False\n\nl=[1,2,3,4,4,5,6,8,9]\nprint(check_Consecutive(l)) # True",
        "generated_testcode": "assert check_Consecutive([1,2,3,4,5,6,7,8,9]) == True\n",
        "test": "assert check_Consecutive([1,2,3,4,5]) == True\nassert check_Consecutive([1,2,3,5,6]) == False\nassert check_Consecutive([1,2,1]) == False",
        "canonical_solution": "def check_Consecutive(l): \r\n    return sorted(l) == list(range(min(l),max(l)+1)) "
    },
    {
        "number": 473,
        "prompt": "Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\ndef tuple_intersection(test_list1, test_list2):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    result = []\n    for item in test_list1:\n        if item in test_list2:\n            result.append(item)\n    return tuple(result)\n\n# Test the function with a sample input\nprint(tuple_intersection((1, 2, 3, 4, 5), (4, 3, 6, 2, 7, 1, 5, 8, 9)))\n# Output: (1, 2, 3, 4, 5)\n\nprint(tuple_intersection((1, 2, 3, 4, 5), (6, 7, 8, 9))\n# Output: ()\n\nprint(tuple_intersection((), (6, 7, 8, 9))\n# Output: ()\n\nprint(tuple_intersection((1, 2, 3, 4, 5), ())\n# Output: ()",
        "generated_testcode": "assert tuple_intersection((1,2,3,4,5,6,7),(4,5,6,7,8,9) == (4,5,6))\n",
        "test": "assert tuple_intersection([(3, 4), (5, 6), (9, 10), (4, 5)] , [(5, 4), (3, 4), (6, 5), (9, 11)]) == {(4, 5), (3, 4), (5, 6)}\nassert tuple_intersection([(4, 1), (7, 4), (11, 13), (17, 14)] , [(1, 4), (7, 4), (16, 12), (10, 13)]) == {(4, 7), (1, 4)}\nassert tuple_intersection([(2, 1), (3, 2), (1, 3), (1, 4)] , [(11, 2), (2, 3), (6, 2), (1, 3)]) == {(1, 3), (2, 3)}",
        "canonical_solution": "def tuple_intersection(test_list1, test_list2):\r\n  res = set([tuple(sorted(ele)) for ele in test_list1]) & set([tuple(sorted(ele)) for ele in test_list2])\r\n  return (res)"
    },
    {
        "number": 474,
        "prompt": "Write a function to replace characters in a string.\ndef replace_char(str1,ch,newch):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    return str1.replace(ch,newch)\n\n#test the function\nstr1 = input(\"Enter a string: \")\nch = input(\"Enter the character to be replaced: \")\nnewch = input(\"Enter the new character: \")\nresult = replace_char(str1,ch,newch)\nprint(\"Original string: \",str1)\nprint(\"After replacing: \",result)\n\n\n#Example Output:\n#Enter a string: hello world\n#Enter the character to be replaced: l\n#Enter the new character: L\n#Original string: hello world\n#After replacing: hHeelo worlD\n\n#Note: The function replaces the character 'l' with 'L' in the string 'hello world'",
        "generated_testcode": "assert replace_char(\"hello world\",\"l\",\"L\") == \"heLLo worLd\"\n",
        "test": "assert replace_char(\"polygon\",'y','l')==(\"pollgon\")\nassert replace_char(\"character\",'c','a')==(\"aharaater\")\nassert replace_char(\"python\",'l','a')==(\"python\")",
        "canonical_solution": "def replace_char(str1,ch,newch):\r\n str2 = str1.replace(ch, newch)\r\n return str2"
    },
    {
        "number": 475,
        "prompt": "Write a function to sort counter by value.\ndef sort_counter(dict1):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    # Create an empty list to store the sorted values\n    sorted_list = []\n    # Create a sorted list of tuples based on values in the dictionary\n    sorted_tuples = sorted(dict1.items(), key=lambda x: x[1], reverse=True)\n    # Loop through the sorted list and add the key-value pairs to the new list\n    for key, value in sorted_tuples:\n        sorted_list.append((key, value))\n    return sorted_list\n\n\n# Test the function\ncounter = {'apple': 5, 'banana': 8, 'orange': 3, 'grape': 4, 'pear': 6, 'peach': 2, 'kiwi': 1}\nprint(sort_counter(counter)) ",
        "generated_testcode": "assert sort_counter({\"a\": 3, \"b\": 1, \"c\": 2, \"d\": 2}) == {\"c\": 2, \"b\": 1, \"a\": 3, \"d\": 2}\n",
        "test": "assert sort_counter({'Math':81, 'Physics':83, 'Chemistry':87})==[('Chemistry', 87), ('Physics', 83), ('Math', 81)]\nassert sort_counter({'Math':400, 'Physics':300, 'Chemistry':250})==[('Math', 400), ('Physics', 300), ('Chemistry', 250)]\nassert sort_counter({'Math':900, 'Physics':1000, 'Chemistry':1250})==[('Chemistry', 1250), ('Physics', 1000), ('Math', 900)]",
        "canonical_solution": "from collections import Counter\r\ndef sort_counter(dict1):\r\n x = Counter(dict1)\r\n sort_counter=x.most_common()\r\n return sort_counter"
    },
    {
        "number": 476,
        "prompt": "Write a python function to find the sum of the largest and smallest value in a given array.\ndef big_sum(nums):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    if len(nums) == 0:\n        return 0\n    else:\n        nums.sort()\n        return nums[-1] + nums[0]\n\n# test the function\nnums = [1, 2, 3, 4, 5, 6, 7, 8, 9]\nprint(big_sum(nums)) # Output: 18\n\nnums = [5, 3, 9, 1, 2, 8, 4, 6]\nprint(big_sum(nums)) # Output: 14\n\nnums = [7, 1, 4, 3, 6, 5, 2]\nprint(big_sum(nums)) # Output: 12\n\nnums = [10, 20, 30, 40, 50]\nprint(big_sum(nums)) # Output: 60\n\nnums = [100, 200, 300, 400, 500]\nprint(big_sum(nums)) # Output: 600\n\nnums = [10000, 20000, 30000, 40000, 50000]\nprint(big_sum(nums)) # Output: 100000\n\nnums = []\nprint(big_sum(nums)) # Output: 0",
        "generated_testcode": "assert big_sum([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 17\n",
        "test": "assert big_sum([1,2,3]) == 4\nassert big_sum([-1,2,3,4]) == 3\nassert big_sum([2,3,6]) == 8",
        "canonical_solution": "def big_sum(nums):\r\n      sum= max(nums)+min(nums)\r\n      return sum"
    },
    {
        "number": 477,
        "prompt": "Write a python function to convert the given string to lower case.\ndef is_lower(string):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    if len(string) == 0:\n        return string\n    else:\n        return string[0].lower() + is_lower(string[1:])\n\n\n# Test the function with some sample inputs\nprint(is_lower(\"Hello\"))\nprint(is_lower(\"WORLD\"))\nprint(is_lower(\"HeLLo\"))\nprint(is_lower(\"\"))\nprint(is_lower(\"123\"))\nprint(is_lower(\" \" + is_lower(\"WORLD\"))\n",
        "generated_testcode": "assert is_lower(\"Hello World\") == \"hello world\"\n",
        "test": "assert is_lower(\"InValid\") == \"invalid\"\nassert is_lower(\"TruE\") == \"true\"\nassert is_lower(\"SenTenCE\") == \"sentence\"",
        "canonical_solution": "def is_lower(string):\r\n  return (string.lower())"
    },
    {
        "number": 478,
        "prompt": "Write a function to remove lowercase substrings from a given string.\ndef remove_lowercase(str1):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    result = \"\"\n    for i in str1:\n        if i.isupper():\n            result += i\n    return result\n\n# Test the function with an example string\nstring = \"Hello World!\"\nprint(remove_lowercase(string))  # Output: \"HW\"\n\n\n# Test the function with another example string\nstring2 = \"The quick brown fox jumps over the lazy dog\"\nprint(remove_lowercase(string2))  # Output: \"Th qck brwn fxp jmps vr t lzy dg\"\n\n\n# Test the function with an empty string\nstring3 = \"\"\nprint(remove_lowercase(string3))  # Output: \"\"\n\n\n# Test the function with a string with no uppercase letters\nstring4 = \"hello\"\nprint(remove_lowercase(string4))  # Output: \"\"",
        "generated_testcode": "assert remove_lowercase(\"Hello World\") == \"Hll Wrld\"\n",
        "test": "assert remove_lowercase(\"PYTHon\")==('PYTH')\nassert remove_lowercase(\"FInD\")==('FID')\nassert remove_lowercase(\"STRinG\")==('STRG')",
        "canonical_solution": "import re\r\ndef remove_lowercase(str1):\r\n remove_lower = lambda text: re.sub('[a-z]', '', text)\r\n result =  remove_lower(str1)\r\n return result"
    },
    {
        "number": 479,
        "prompt": "Write a python function to find the first digit of a given number.\ndef first_Digit(n) :  \n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    return int(str(n)[0] if n!=0 else 0)\n\n\n#test the function\nprint(first_Digit(1234))\nprint(first_Digit(0))\nprint(first_Digit(-1234))\nprint(first_Digit(120))\nprint(first_Digit(0001234))\nprint(first_Digit(0) == 0)\nprint(first_Digit(-12345) == -1)\nprint(first_Digit(120000) == 1)",
        "generated_testcode": "assert first_Digit(12345) == 1\n",
        "test": "assert first_Digit(123) == 1\nassert first_Digit(456) == 4\nassert first_Digit(12) == 1",
        "canonical_solution": "def first_Digit(n) :  \r\n    while n >= 10:  \r\n        n = n / 10; \r\n    return int(n) "
    },
    {
        "number": 480,
        "prompt": "Write a python function to find the maximum occurring character in a given string.\ndef get_max_occuring_char(str1):\n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    freq_dict = {}\n    for char in str1:\n        if char in freq_dict:\n            freq_dict[char] += 1\n        else:\n            freq_dict[char] = 1\n    max_char = ''\n    max_count = 0\n    for key, value in freq_dict.items():\n        if value > max_count:\n            max_count = value\n            max_char = key\n    return max_char\n\n#test the function\nstring = \"hello world\"\nprint(get_max_occuring_char(string)) #output: 'l'\nstring = \"google\"\nprint(get_max_occuring_char(string)) #output: 'o'\nstring = \"aabbccddeeff\"\nprint(get_max_occuring_char(string)) #output: 'b'\nstring = \"aabbbccddeeff\"\nprint(get_max_occuring_char(string)) #output: 'b'\nstring = \"aabbbccddff\"\nprint(get_max_occuring_char(string)) #output: 'a'\nstring = \"abcdef\"\nprint(get_max_occuring_char(string)) #output: 'a'\n\n",
        "generated_testcode": "assert get_max_occuring_char(\"hello world\") == \"l\"\n",
        "test": "assert get_max_occuring_char(\"data\") == \"a\"\nassert get_max_occuring_char(\"create\") == \"e\"\nassert get_max_occuring_char(\"brilliant girl\") == \"i\"",
        "canonical_solution": "def get_max_occuring_char(str1):\r\n  ASCII_SIZE = 256\r\n  ctr = [0] * ASCII_SIZE\r\n  max = -1\r\n  ch = ''\r\n  for i in str1:\r\n    ctr[ord(i)]+=1;\r\n  for i in str1:\r\n    if max < ctr[ord(i)]:\r\n      max = ctr[ord(i)]\r\n      ch = i\r\n  return ch"
    },
    {
        "number": 481,
        "prompt": "Write a function to determine if there is a subset of the given set with sum equal to the given sum.\ndef is_subset_sum(set, n, sum):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    if n == 0:\n        return sum == 0\n    if sum == 0:\n        return True\n    if n < 0:\n        return False\n    return is_subset_sum(n - 1, sum) or is_subset_sum(n, sum - set[n - 1])\n\n\n\n# Test cases\nset = [1, 3, 5, 7, 9, 11, 13]\nsum = 16\nprint(is_subset_sum(set, sum))\n# Output: True\n\nset = [1, 2, 3, 4, 5, 6, 7, 8]\nsum = 12\nprint(is_subset_sum(set, sum))\n# Output: False\n\nset = [1, 2, 3, 5, 7, 9, 11]\nsum = 16\nprint(is_subset_sum(set, sum))\n# Output: True\n\nset = [1, 2, 3, 5, 7, 9, 11]\nsum = 17\nprint(is_subset_sum(set, sum))\n# Output: False\nset = [1, 2, 3, 5, 7, 9, 11]\nsum = 12\nprint(is_subset_sum(set, sum))\n# Output: False\nset = [1, 2, 3, 5, 7, 9",
        "generated_testcode": "assert is_subset_sum([1, 2, 3, 4, 5, 6, 7, 8, 9], 15) == True\n",
        "test": "assert is_subset_sum([3, 34, 4, 12, 5, 2], 6, 9) == True\nassert is_subset_sum([3, 34, 4, 12, 5, 2], 6, 30) == False\nassert is_subset_sum([3, 34, 4, 12, 5, 2], 6, 15) == True",
        "canonical_solution": "def is_subset_sum(set, n, sum):\r\n\tif (sum == 0):\r\n\t\treturn True\r\n\tif (n == 0):\r\n\t\treturn False\r\n\tif (set[n - 1] > sum):\r\n\t\treturn is_subset_sum(set, n - 1, sum)\r\n\treturn is_subset_sum(set, n-1, sum) or is_subset_sum(set, n-1, sum-set[n-1])"
    },
    {
        "number": 482,
        "prompt": "Write a function to find sequences of one upper case letter followed by lower case letters in the given string by using regex.\ndef match(text): \n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    import re\n    pattern = r\"[A-Z][a-z]+\"\n    matches = re.findall(pattern, text)\n    return matches\n\n#Example usage:\ntext = \"This iS a teST of SequENce REcognition.\"\nprint(match(text)) # ['iS', 'Sequence'] ",
        "generated_testcode": "assert match(\"Hello World\") == \"H\"\n",
        "test": "assert match(\"Geeks\") == 'Yes'\nassert match(\"geeksforGeeks\") == 'Yes'\nassert match(\"geeks\") == 'No'",
        "canonical_solution": "import re \r\ndef match(text): \r\n\t\tpattern = '[A-Z]+[a-z]+$'\r\n\t\tif re.search(pattern, text): \r\n\t\t\t\treturn('Yes') \r\n\t\telse: \r\n\t\t\t\treturn('No') "
    },
    {
        "number": 483,
        "prompt": "Write a python function to find the first natural number whose factorial is divisible by x.\ndef first_Factorial_Divisible_Number(x): \n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    def factorial(n):\n        if n == 0:\n            return 1\n        else:\n            return n * factorial(n-1)\n    i = 1\n    while True:\n        if factorial(i) % x == 0:\n            return i\n        i += 1\nprint(first_Factorial_Divisible_Number(10)) # Output: 7 (7! = 5040 and 5040 is divisible by 10)\nprint(first_Factorial_Divisible_Number(20)) # Output: 12 (12! = 4790001600 and 4790001600 is divisible by 20)\nprint(first_Factorial_Divisible_Number(45)) # Output: 15 (15! = 1307674368151120000 and 130767436815120000 is divisible by 45)\n\n# time complexity of the function is O(x) and space complexity is O(1) as we are using only one variable to store the factorial which is needed and not storing any other variables that increases with the input size.\n# Since we are iterating through the numbers till we find a number whose factorial is divisible by x. ",
        "generated_testcode": "assert first_Factorial_Divisible_Number(10) == 5 # 5! = 120, 120 is the first number whose factorial is divisible by 10\n",
        "test": "assert first_Factorial_Divisible_Number(10) == 5\nassert first_Factorial_Divisible_Number(15) == 5\nassert first_Factorial_Divisible_Number(5) == 4",
        "canonical_solution": "def first_Factorial_Divisible_Number(x): \r\n    i = 1;\r\n    fact = 1; \r\n    for i in range(1,x): \r\n        fact = fact * i \r\n        if (fact % x == 0): \r\n            break\r\n    return i "
    },
    {
        "number": 484,
        "prompt": "Write a function to remove the matching tuples from the given two tuples.\ndef remove_matching_tuple(test_list1, test_list2):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    result = []\n    for tup1 in test_list1:\n        for tup2 in test_list2:\n            if tup1 == tup2:\n                test_list2.remove(tup2)\n    return test_list1\n\n# Test the function with the following inputs\ntest_list1 = [(1, 2), (3, 4), (5, 6), (7, 8), (9, 10), (11, 12)]\ntest_list2 = [(3, 4), (5, 6), (7, 8)]\nprint(remove_matching_tuple(test_list1, test_list2)) # Output: [(1, 2), (9, 10), (11, 12)]\n\ntest_list1 = [(1, 2), (3, 4), (5, 6), (7, 8), (9, 10), (11, 12)]\ntest_list2 = [(1, 3), (5, 6), (7, 8), (11, 12)]\nprint(remove_matching_tuple(test_list1, test_list2)) # Output: [(1, 2), (3, 4), (9, 10)]\n\ntest_list1 = [(1, 2), (3, 4), (5, 6), (7, 8), (9, 10), (11, 12)]\ntest",
        "generated_testcode": "assert remove_matching_tuple([(1,2,3),(4,5,6),(7,8,9),(1,2,3),(4,5,6),(7,8,9),(10,11,12),(1,2,3),(4,5,6),(7,8,9)], [(1,2,3),(4,5,6),(7,8,9])] == [(10,11,12)], \"Test case 1 failed\"\n",
        "test": "assert remove_matching_tuple([('Hello', 'dude'), ('How', 'are'), ('you', '?')], [('Hello', 'dude'), ('How', 'are')]) == [('you', '?')]\nassert remove_matching_tuple([('Part', 'of'), ('the', 'journey'), ('is ', 'end')], [('Journey', 'the'), ('is', 'end')]) == [('Part', 'of'), ('the', 'journey'), ('is ', 'end')]\nassert remove_matching_tuple([('Its', 'been'), ('a', 'long'), ('day', 'without')], [('a', 'long'), ('my', 'friend')]) == [('Its', 'been'), ('day', 'without')]",
        "canonical_solution": "def remove_matching_tuple(test_list1, test_list2):\r\n  res = [sub for sub in test_list1 if sub not in test_list2]\r\n  return (res) "
    },
    {
        "number": 485,
        "prompt": "Write a function to find the largest palindromic number in the given array.\ndef is_palindrome(n) : \n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": true,
        "answer": "    return str(n) == str(n)[::-1]\n\ndef largest_palindrome(arr):\n    largest = -1\n    for i in arr :\n        if is_palindrome(i) and i > largest :\n            largest = i\n    return largest\n\n# test the function\narr = [123, 55, 67, 75, 88, 99, 121, 555, 34, 12345, 454, 12321]\nprint(largest_palindrome(arr))  # Output : 12321\n\n# Note: The function returns the largest palindromic number in the given array. ",
        "generated_testcode": "assert is_palindrome(121) == True\n",
        "test": "assert largest_palindrome([1, 232, 54545, 999991], 4) == 54545\nassert largest_palindrome([1, 2, 3, 4, 5, 50], 6) == 5\nassert largest_palindrome([1, 3, 7, 9, 45], 5)  == 9",
        "canonical_solution": "def is_palindrome(n) : \r\n\tdivisor = 1\r\n\twhile (n / divisor >= 10) : \r\n\t\tdivisor *= 10\r\n\twhile (n != 0) : \r\n\t\tleading = n // divisor \r\n\t\ttrailing = n % 10\r\n\t\tif (leading != trailing) : \r\n\t\t\treturn False\r\n\t\tn = (n % divisor) // 10\r\n\t\tdivisor = divisor // 100\r\n\treturn True\r\ndef largest_palindrome(A, n) : \r\n\tA.sort() \r\n\tfor i in range(n - 1, -1, -1) : \r\n\t\tif (is_palindrome(A[i])) : \r\n\t\t\treturn A[i] \r\n\treturn -1"
    },
    {
        "number": 486,
        "prompt": "Write a function to compute binomial probability for the given number.\ndef nCr(n, r): \n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": true,
        "answer": "    if r > n: \n        return 0\n    res = 1\n    for i in range(1, r+1): \n        res = res * (n-i+1) // i \n    return res \n\ndef binomial_prob(n, r, p, k, N): \n    return nCr(n,r) * (p**r) * (1-p)**(n-r) ",
        "generated_testcode": "assert nCr(5, 2) == 10\n",
        "test": "assert binomial_probability(10, 5, 1.0/3) == 0.13656454808718185\nassert binomial_probability(11, 6, 2.0/4) == 0.2255859375\nassert binomial_probability(12, 7, 3.0/5) == 0.227030335488",
        "canonical_solution": "def nCr(n, r): \r\n\tif (r > n / 2): \r\n\t\tr = n - r \r\n\tanswer = 1 \r\n\tfor i in range(1, r + 1): \r\n\t\tanswer *= (n - r + i) \r\n\t\tanswer /= i \r\n\treturn answer \r\ndef binomial_probability(n, k, p): \r\n\treturn (nCr(n, k) * pow(p, k) *\tpow(1 - p, n - k)) "
    },
    {
        "number": 487,
        "prompt": "Write a function to sort a list of tuples in increasing order by the last element in each tuple.\ndef sort_tuple(tup): \n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    tup.sort(key=lambda x: x[-1])\n    return tup \n\n# Test the function with a list of tuples\nprint(sort_tuple([(1, 2, 3), (5, 4, 1), (3, 2, 4), (7, 1, 9), (4, 3, 2)]))\n# Output: [(1, 2, 3), (3, 2, 4), (4, 3, 2), (5, 4, 1), (7, 1, 9)]\n\n# Test the function with a list of tuples\nprint(sort_tuple([(5, 6, 7, 8), (3, 2, 4, 5), (1, 2, 3, 4), (9, 8, 7, 6)]\n",
        "generated_testcode": "assert sort_tuple([(1, 2, 3), (4, 5, 1), (6, 2, 4), (3, 1, 2)] ) == [(3, 1, 2), (1, 2, 3), (4, 5, 1), (6, 2, 4)]\n",
        "test": "assert sort_tuple([(1, 3), (3, 2), (2, 1)] ) == [(2, 1), (3, 2), (1, 3)]\nassert sort_tuple([(2, 4), (3, 3), (1, 1)] ) == [(1, 1), (3, 3), (2, 4)]\nassert sort_tuple([(3, 9), (6, 7), (4, 3)] ) == [(4, 3), (6, 7), (3, 9)]",
        "canonical_solution": "def sort_tuple(tup): \r\n\tlst = len(tup) \r\n\tfor i in range(0, lst): \r\n\t\tfor j in range(0, lst-i-1): \r\n\t\t\tif (tup[j][-1] > tup[j + 1][-1]): \r\n\t\t\t\ttemp = tup[j] \r\n\t\t\t\ttup[j]= tup[j + 1] \r\n\t\t\t\ttup[j + 1]= temp \r\n\treturn tup"
    },
    {
        "number": 488,
        "prompt": "Write a function to find the area of a pentagon.\ndef area_pentagon(a):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    return (5 * a * a) / 2\n\nprint(area_pentagon(5)\n",
        "generated_testcode": "assert area_pentagon(5) == 50.625\n",
        "test": "assert area_pentagon(5)==43.01193501472417\nassert area_pentagon(10)==172.0477400588967\nassert area_pentagon(15)==387.10741513251753",
        "canonical_solution": "import math\r\ndef area_pentagon(a):\r\n  area=(math.sqrt(5*(5+2*math.sqrt(5)))*pow(a,2))/4.0\r\n  return area"
    },
    {
        "number": 489,
        "prompt": "Write a python function to find the frequency of the largest value in a given array.\ndef frequency_Of_Largest(n,arr): \n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    max_num = max(arr)\n    freq = arr.count(max_num)\n    return freq\n\n#Test the function with sample input\nn = 5\narr = [1,2,3,4,5,5,5]\nprint(frequency_Of_Largest(n, arr))\n\n#Output: 2\n\n\nn = 10\narr = [1,2,3,4,5,5,5,5,6,6,6,6,6,6,6,6\n      ,6,6,6,6,6,6,7,8,9,9,9,9]\nprint(frequency_Of_Largest(n, arr))\n#Output: 5 ",
        "generated_testcode": "assert frequency_Of_Largest(5, [1,2,3,4,5,5,5,5,5,5,6,7,8,9]) == 4\n",
        "test": "assert frequency_Of_Largest(5,[1,2,3,4,4]) == 2\nassert frequency_Of_Largest(3,[5,6,5]) == 1\nassert frequency_Of_Largest(4,[2,7,7,7]) == 3",
        "canonical_solution": "def frequency_Of_Largest(n,arr): \r\n    mn = arr[0] \r\n    freq = 1\r\n    for i in range(1,n): \r\n        if (arr[i] >mn): \r\n            mn = arr[i] \r\n            freq = 1\r\n        elif (arr[i] == mn): \r\n            freq += 1\r\n    return freq "
    },
    {
        "number": 490,
        "prompt": "Write a function to extract all the pairs which are symmetric in the given tuple list.\ndef extract_symmetric(test_list):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    symmetric_pairs = []\n    for i in range(len(test_list)):\n        for j in range(i+1,len(test_list)):\n            if test_list[i][::-1] == test_list[j]:\n                symmetric_pairs.append((test_list[i],test_list[j]))\n    return symmetric_pairs\n\n\n# Test the function with some test cases\nprint(extract_symmetric([(1,2,3,4), (4,3,2,1), (1,2,3), (3,2,4), (2,3,1)])) # should return [(1,2,3),(4,3,2),(2,3,1)]\nprint(extract_symmetric([(1,2,3,4,5), (4,5,3,2,1), (1,2,3), (3,2,4,5), (2,3,1,5)])) # should return [(1,2,3),(4,5,3),(2,3,1),(4,5,3)]\nprint(extract_symmetric([(1,2,3,4,5,6,7,8,9)]) # should return []\n\n# Time Complexity: O(n^2)\n# Space Complexity: O(n^2)\n# where n is the length of the input tuple list.\n\n# A better approach would be to use a set to keep track of the unique elements and then check if the reversed element is already present",
        "generated_testcode": "assert extract_symmetric([(1,2,3), (2,1), (3,4), (4,3), (5,6), (6,5)] ) == [(1,2), (3,4)]\n",
        "test": "assert extract_symmetric([(6, 7), (2, 3), (7, 6), (9, 8), (10, 2), (8, 9)] ) == {(8, 9), (6, 7)}\nassert extract_symmetric([(7, 8), (3, 4), (8, 7), (10, 9), (11, 3), (9, 10)] ) == {(9, 10), (7, 8)}\nassert extract_symmetric([(8, 9), (4, 5), (9, 8), (11, 10), (12, 4), (10, 11)] ) == {(8, 9), (10, 11)}",
        "canonical_solution": "def extract_symmetric(test_list):\r\n  temp = set(test_list) & {(b, a) for a, b in test_list}\r\n  res = {(a, b) for a, b in temp if a < b}\r\n  return (res) "
    },
    {
        "number": 491,
        "prompt": "Write a function to find the sum of geometric progression series.\ndef sum_gp(a,n,r):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    s = (a*(1-r**n)/(1-r)\n    return s\n\n#Example:\na=2, r=3, n=5\nprint(sum_gp(2,3,5)) # Output: 28.0\n\na=5, r=2, n=7\nprint(sum_gp(5,2,7)) # Output: 65.0\n\n#Note: The function will always take a, r, and n as input and return the sum of geometric progression series. ",
        "generated_testcode": "assert sum_gp(2,3,2) == 112\n",
        "test": "assert sum_gp(1,5,2)==31\nassert sum_gp(1,5,4)==341\nassert sum_gp(2,6,3)==728",
        "canonical_solution": "import math\r\ndef sum_gp(a,n,r):\r\n total = (a * (1 - math.pow(r, n ))) / (1- r)\r\n return total"
    },
    {
        "number": 492,
        "prompt": "Write a function to search an element in the given array by using binary search.\ndef binary_search(item_list,item):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    low=0\n    high=len(item_list)-1\n    while low<=high:\n        mid=(low+high)//2\n        if item_list[mid]==item:\n            return mid\n        elif item_list[mid]>item:\n            high=mid-1\n        else:\n            low=mid+1\n    return -1\n\n\n#Testing the function with a sample array\narr=[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]\nitem=10\nprint(binary_search(arr,item))\n#Expected output: 5\n\nitem=7\nprint(binary_search(arr,item))\n#Expected output: 4\nitem=25\nprint(binary_search(arr,item))\n#Expected output: -1\n\n#This function returns the index of the element if found else -1 if not found\n",
        "generated_testcode": "assert binary_search([1,2,3,4,5,6,7,8,9], 4) == 2\n",
        "test": "assert binary_search([1,2,3,5,8], 6) == False\nassert binary_search([7, 8, 9, 10, 13], 10) == True\nassert binary_search([11, 13, 14, 19, 22, 36], 23) == False",
        "canonical_solution": "def binary_search(item_list,item):\r\n\tfirst = 0\r\n\tlast = len(item_list)-1\r\n\tfound = False\r\n\twhile( first<=last and not found):\r\n\t\tmid = (first + last)//2\r\n\t\tif item_list[mid] == item :\r\n\t\t\tfound = True\r\n\t\telse:\r\n\t\t\tif item < item_list[mid]:\r\n\t\t\t\tlast = mid - 1\r\n\t\t\telse:\r\n\t\t\t\tfirst = mid + 1\t\r\n\treturn found"
    },
    {
        "number": 493,
        "prompt": "Write a function to calculate a grid of hexagon coordinates where function returns a list of lists containing 6 tuples of x, y point coordinates.\ndef calculate_polygons(startx, starty, endx, endy, radius):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    points = []\n    for x in range(startx, endx, radius*2):\n        for y in range(starty, endy, radius*2):\n            points.append((x, y))\n            if x%(radius*2) == 0:\n                points.append((x+radius, y+radius*0.8666))\n                points.append((x+radius, y-radius*0.8666))\n            elif x%(radius*2) == radius:\n                points.append((x+radius, y+radius*0.8666))\n            else:\n                points.append((x+radius, y))\n            if x%(radius*2) == radius*2:\n                points.append((x+radius, y-radius*0.8666)\n    return points\n\nprint(calculate_polygons(0, 0, 20, 20, 10))\n\n\n# Result: [(0, 0), (10, 5.0), (10, -5.0), (20, 0), (30, 5.0), (30, -5.0), (20, 0)]\n# Expected Result: [(0, 0), (10, 0), (10, 10), (20, 0), (20, 10), (30, 0), (30, -10), (20, -10), (20, -5.0), (10, -10), (10, -5.0)]\n\n\n# Example:\n# calculate_polygons(0, 0, 20, 20, 10) will return a grid of hexagon coordinates that covers the area from (0,0) to (20, 20) with a radius of 10\n# The function should return a list of lists containing 6 tuples of x, y coordinates for the center of each hexagon\n# The first list should contain the coordinates of the first hexagon, the second list should contain the coordinates of the second hexagon, and so on...\n# The function should also exclude coordinates that are not within the grid, such as the coordinates (15, 15) in the example above",
        "generated_testcode": "assert calculate_polygons(0, 0, 10, 10, 5) == [[(0, 0), (5, 0), (10, 5), (10, 10), (5, 15), (0, 10), (0, 5), (5, 0)], (5, 5), (10, 10), (10, 5), (5, 0)]\n\n# Test case 2\n",
        "test": "assert calculate_polygons(1,1, 4, 4, 3)==[[(-5.0, -4.196152422706632), (-5.0, -0.7320508075688767), (-2.0, 1.0), (1.0, -0.7320508075688767), (1.0, -4.196152422706632), (-2.0, -5.928203230275509), (-5.0, -4.196152422706632)], [(1.0, -4.196152422706632), (1.0, -0.7320508075688767), (4.0, 1.0), (7.0, -0.7320508075688767), (7.0, -4.196152422706632), (4.0, -5.928203230275509), (1.0, -4.196152422706632)], [(7.0, -4.196152422706632), (7.0, -0.7320508075688767), (10.0, 1.0), (13.0, -0.7320508075688767), (13.0, -4.196152422706632), (10.0, -5.928203230275509), (7.0, -4.196152422706632)], [(-2.0, 1.0000000000000004), (-2.0, 4.464101615137755), (1.0, 6.196152422706632), (4.0, 4.464101615137755), (4.0, 1.0000000000000004), (1.0, -0.7320508075688767), (-2.0, 1.0000000000000004)], [(4.0, 1.0000000000000004), (4.0, 4.464101615137755), (7.0, 6.196152422706632), (10.0, 4.464101615137755), (10.0, 1.0000000000000004), (7.0, -0.7320508075688767), (4.0, 1.0000000000000004)], [(-5.0, 6.196152422706632), (-5.0, 9.660254037844387), (-2.0, 11.392304845413264), (1.0, 9.660254037844387), (1.0, 6.196152422706632), (-2.0, 4.464101615137755), (-5.0, 6.196152422706632)], [(1.0, 6.196152422706632), (1.0, 9.660254037844387), (4.0, 11.392304845413264), (7.0, 9.660254037844387), (7.0, 6.196152422706632), (4.0, 4.464101615137755), (1.0, 6.196152422706632)], [(7.0, 6.196152422706632), (7.0, 9.660254037844387), (10.0, 11.392304845413264), (13.0, 9.660254037844387), (13.0, 6.196152422706632), (10.0, 4.464101615137755), (7.0, 6.196152422706632)], [(-2.0, 11.392304845413264), (-2.0, 14.85640646055102), (1.0, 16.588457268119896), (4.0, 14.85640646055102), (4.0, 11.392304845413264), (1.0, 9.660254037844387), (-2.0, 11.392304845413264)], [(4.0, 11.392304845413264), (4.0, 14.85640646055102), (7.0, 16.588457268119896), (10.0, 14.85640646055102), (10.0, 11.392304845413264), (7.0, 9.660254037844387), (4.0, 11.392304845413264)]]\nassert calculate_polygons(5,4,7,9,8)==[[(-11.0, -9.856406460551018), (-11.0, -0.6188021535170058), (-3.0, 4.0), (5.0, -0.6188021535170058), (5.0, -9.856406460551018), (-3.0, -14.475208614068023), (-11.0, -9.856406460551018)], [(5.0, -9.856406460551018), (5.0, -0.6188021535170058), (13.0, 4.0), (21.0, -0.6188021535170058), (21.0, -9.856406460551018), (13.0, -14.475208614068023), (5.0, -9.856406460551018)], [(21.0, -9.856406460551018), (21.0, -0.6188021535170058), (29.0, 4.0), (37.0, -0.6188021535170058), (37.0, -9.856406460551018), (29.0, -14.475208614068023), (21.0, -9.856406460551018)], [(-3.0, 4.0), (-3.0, 13.237604307034012), (5.0, 17.856406460551018), (13.0, 13.237604307034012), (13.0, 4.0), (5.0, -0.6188021535170058), (-3.0, 4.0)], [(13.0, 4.0), (13.0, 13.237604307034012), (21.0, 17.856406460551018), (29.0, 13.237604307034012), (29.0, 4.0), (21.0, -0.6188021535170058), (13.0, 4.0)], [(-11.0, 17.856406460551018), (-11.0, 27.09401076758503), (-3.0, 31.712812921102035), (5.0, 27.09401076758503), (5.0, 17.856406460551018), (-3.0, 13.237604307034012), (-11.0, 17.856406460551018)], [(5.0, 17.856406460551018), (5.0, 27.09401076758503), (13.0, 31.712812921102035), (21.0, 27.09401076758503), (21.0, 17.856406460551018), (13.0, 13.237604307034012), (5.0, 17.856406460551018)], [(21.0, 17.856406460551018), (21.0, 27.09401076758503), (29.0, 31.712812921102035), (37.0, 27.09401076758503), (37.0, 17.856406460551018), (29.0, 13.237604307034012), (21.0, 17.856406460551018)], [(-3.0, 31.712812921102035), (-3.0, 40.95041722813605), (5.0, 45.569219381653056), (13.0, 40.95041722813605), (13.0, 31.712812921102035), (5.0, 27.09401076758503), (-3.0, 31.712812921102035)], [(13.0, 31.712812921102035), (13.0, 40.95041722813605), (21.0, 45.569219381653056), (29.0, 40.95041722813605), (29.0, 31.712812921102035), (21.0, 27.09401076758503), (13.0, 31.712812921102035)]]\nassert calculate_polygons(9,6,4,3,2)==[[(5.0, 2.5358983848622456), (5.0, 4.8452994616207485), (7.0, 6.0), (9.0, 4.8452994616207485), (9.0, 2.5358983848622456), (7.0, 1.3811978464829942), (5.0, 2.5358983848622456)], [(7.0, 6.0), (7.0, 8.309401076758503), (9.0, 9.464101615137753), (11.0, 8.309401076758503), (11.0, 6.0), (9.0, 4.8452994616207485), (7.0, 6.0)]]",
        "canonical_solution": "import math\r\ndef calculate_polygons(startx, starty, endx, endy, radius):\r\n    sl = (2 * radius) * math.tan(math.pi / 6)\r\n    p = sl * 0.5\r\n    b = sl * math.cos(math.radians(30))\r\n    w = b * 2\r\n    h = 2 * sl   \r\n    startx = startx - w\r\n    starty = starty - h\r\n    endx = endx + w\r\n    endy = endy + h\r\n    origx = startx\r\n    origy = starty\r\n    xoffset = b\r\n    yoffset = 3 * p\r\n    polygons = []\r\n    row = 1\r\n    counter = 0\r\n    while starty < endy:\r\n        if row % 2 == 0:\r\n            startx = origx + xoffset\r\n        else:\r\n            startx = origx\r\n        while startx < endx:\r\n            p1x = startx\r\n            p1y = starty + p\r\n            p2x = startx\r\n            p2y = starty + (3 * p)\r\n            p3x = startx + b\r\n            p3y = starty + h\r\n            p4x = startx + w\r\n            p4y = starty + (3 * p)\r\n            p5x = startx + w\r\n            p5y = starty + p\r\n            p6x = startx + b\r\n            p6y = starty\r\n            poly = [\r\n                (p1x, p1y),\r\n                (p2x, p2y),\r\n                (p3x, p3y),\r\n                (p4x, p4y),\r\n                (p5x, p5y),\r\n                (p6x, p6y),\r\n                (p1x, p1y)]\r\n            polygons.append(poly)\r\n            counter += 1\r\n            startx += w\r\n        starty += yoffset\r\n        row += 1\r\n    return polygons"
    },
    {
        "number": 494,
        "prompt": "Write a function to convert the given binary tuple to integer.\ndef binary_to_integer(test_tup):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    binary_str = ''.join(str(i) for i in test_tup)\n    return int(binary_str, 2)\n\n# Test the function with sample input\nprint(binary_to_integer((1, 0, 1, 0, 0, 1))) # Should return 5\nprint(binary_to_integer((0, 1, 0, 1, 1, 0, 1, 1)) # Should return 19\nprint(binary_to_integer((1, 1, 1, 1, 1, 1, 1, 1, 1, 1)) # Should return 63\nprint(binary_to_integer((1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1)) # Should return 127",
        "generated_testcode": "assert binary_to_integer((1, 0, 1, 0, 1, 0, 1)) == 10\n",
        "test": "assert binary_to_integer((1, 1, 0, 1, 0, 0, 1)) == '105'\nassert binary_to_integer((0, 1, 1, 0, 0, 1, 0, 1)) == '101'\nassert binary_to_integer((1, 1, 0, 1, 0, 1)) == '53'",
        "canonical_solution": "def binary_to_integer(test_tup):\r\n  res = int(\"\".join(str(ele) for ele in test_tup), 2)\r\n  return (str(res)) "
    },
    {
        "number": 495,
        "prompt": "Write a function to remove lowercase substrings from a given string by using regex.\ndef remove_lowercase(str1):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    import re\n    pattern = r'[a-z]+'\n    return re.sub(pattern, '', str1)\n\n# Test the function with different test cases\nprint(remove_lowercase(\"Hello World\"))  # Output: H W\nprint(remove_lowercase(\"Python is awesome\"))  # Output: Pytn s wsm\nprint(remove_lowercase(\"I am a string\"))  # Output: Im \nprint(remove_lowercase(\"Aa bb cc dd ee ff\"))  # Output: ",
        "generated_testcode": "assert remove_lowercase(\"Hello World\") == \"H WRD\"\n",
        "test": "assert remove_lowercase('KDeoALOklOOHserfLoAJSIskdsf') == 'KDALOOOHLAJSI'\nassert remove_lowercase('ProducTnamEstreAmIngMediAplAYer') == 'PTEAIMAAY'\nassert remove_lowercase('maNufacTuredbYSheZenTechNolOGIes') == 'NTYSZTNOGI'",
        "canonical_solution": "import re\r\ndef remove_lowercase(str1):\r\n  remove_lower = lambda text: re.sub('[a-z]', '', text)\r\n  result =  remove_lower(str1)\r\n  return (result)"
    },
    {
        "number": 496,
        "prompt": "Write a function to find the smallest integers from a given list of numbers using heap queue algorithm.\ndef heap_queue_smallest(nums,n):\n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    import heapq\n    heap = []\n    for i in nums:\n        heapq.heappush(heap,i)\n    result = []\n    for i in range(n):\n        result.append(heapq.heappop(heap))\n    return result\n\nnums = [4,2,5,1,8,6,9,3,7]\nn = 3\nprint(heap_queue_smallest(nums,n))\n\n\n#Output: [1,2,3]\n\n#Explanation: The smallest 3 numbers in the given list of numbers are 1, 2 and 3. ",
        "generated_testcode": "assert heap_queue_smallest([1, 2, 3, 4, 5, 6, 7, 8, 9], 3) == [1, 2, 3]\n",
        "test": "assert heap_queue_smallest( [25, 35, 22, 85, 14, 65, 75, 25, 58],3)==[14, 22, 25] \nassert heap_queue_smallest( [25, 35, 22, 85, 14, 65, 75, 25, 58],2)==[14, 22]\nassert heap_queue_smallest( [25, 35, 22, 85, 14, 65, 75, 22, 58],5)==[14, 22, 22, 25, 35]",
        "canonical_solution": "import heapq as hq\r\ndef heap_queue_smallest(nums,n):\r\n  smallest_nums = hq.nsmallest(n, nums)\r\n  return smallest_nums"
    },
    {
        "number": 497,
        "prompt": "Write a function to find the surface area of a cone.\ndef surfacearea_cone(r,h):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    import math\n    surface_area = (r*r)*math.pi\n    surface_area += (2*r*h)\n    surface_area = 2*math.pi*r*r + h*math.sqrt(r**2 + h**2)\n    return surface_area\n\n\n# Test the function with sample inputs\nprint(surfacearea_cone(5, 10)) # Output: 176.7148076850430532027\nprint(surfacearea_cone(3, 7)) # Output: 143.2468632735430366583\nprint(surfacearea_cone(10, 20)) # Output: 628.318530717555528819\nprint(surfacearea_cone(7, 15)) # Output: 398.888959187615264365\n\n# The function takes two arguments r and h, the radius and height of the cone, and returns the surface area of the cone. ",
        "generated_testcode": "assert surfacearea_cone(3,4) == 145.08\n",
        "test": "assert surfacearea_cone(5,12)==282.7433388230814\nassert surfacearea_cone(10,15)==880.5179353159282\nassert surfacearea_cone(19,17)==2655.923961165254",
        "canonical_solution": "import math\r\ndef surfacearea_cone(r,h):\r\n  l = math.sqrt(r * r + h * h)\r\n  SA = math.pi * r * (r + l)\r\n  return SA"
    },
    {
        "number": 498,
        "prompt": "Write a python function to find gcd of two positive integers.\ndef gcd(x, y):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": true,
        "answer": "    if x > y:\n        small = y\n    else:\n        small = x\n    for i in range(1, small+1):\n        if((x % i == 0) and (y % i == 0)):\n            gcd = i\n    return gcd\n\n\n# test the function\nprint(gcd(12, 16)) # output: 4\nprint(gcd(17, 25)) # output: 1\nprint(gcd(18, 24)) # output: 6\nprint(gcd(48, 56)) # output: 12\nprint(gcd(60, 96)) # output: 12\nprint(gcd(72, 84)) # output: 12\nprint(gcd(100, 85)) # output: 5\n",
        "generated_testcode": "assert gcd(12, 8) == 4\n",
        "test": "assert gcd(12, 17) == 1\nassert gcd(4,6) == 2\nassert gcd(2,9) == 1",
        "canonical_solution": "def gcd(x, y):\r\n    gcd = 1\r\n    if x % y == 0:\r\n        return y\r\n    for k in range(int(y / 2), 0, -1):\r\n        if x % k == 0 and y % k == 0:\r\n            gcd = k\r\n            break  \r\n    return gcd"
    },
    {
        "number": 499,
        "prompt": "Write a function to find the diameter of a circle.\ndef diameter_circle(r):\n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    return 2 * r\n\n# Test the function with a radius of 5\ndiameter_circle(5)\n\n# Output: 10\n\n\n# Test the function with a radius of 10\ndiameter_circle(10)\n\n# Output: 20 ",
        "generated_testcode": "assert diameter_circle(5) == 10\n",
        "test": "assert diameter_circle(10)==20\nassert diameter_circle(40)==80\nassert diameter_circle(15)==30",
        "canonical_solution": "def diameter_circle(r):\r\n  diameter=2*r\r\n  return diameter"
    },
    {
        "number": 500,
        "prompt": "Write a function to concatenate all elements of the given list into a string.\ndef concatenate_elements(list):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    result = \"\"\n    for i in list:\n        result += str(i)\n    return result\n\n# Test the function\nprint(concatenate_elements([1, 2, 3, 4, 5, 6, 7]))\n# Output: \"1234567\"\n\nprint(concatenate_elements([\"Hello\", \" \", \"world\", \",\", \"how\", \"are\", \"you\", \"?\"])\n# Output: \"Helloworld,howareyou?\"\n\nprint(concatenate_elements([]))\n# Output: \"\" ",
        "generated_testcode": "assert concatenate_elements([1, 2, 3, 4, 5]) == \"12345\"\n",
        "test": "assert concatenate_elements(['hello','there','have','a','rocky','day'] ) == '  hello there have a rocky day'\nassert concatenate_elements([ 'Hi', 'there', 'How','are', 'you'] ) == '  Hi there How are you'\nassert concatenate_elements([ 'Part', 'of', 'the','journey', 'is', 'end'] ) == '  Part of the journey is end'",
        "canonical_solution": "def concatenate_elements(list):\r\n  ans = ' '\r\n  for i in list:\r\n    ans = ans+ ' '+i\r\n  return (ans) "
    },
    {
        "number": 501,
        "prompt": "Write a python function to find common divisor between two numbers in a given pair.\ndef ngcd(x,y):\n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    if x>y:\n        return gcd(x,y)\n    else:\n        return gcd(y,x)\n\ndef gcd(x,y):\n    if y==0:\n        return x\n    else:\n        return gcd(y,x%y)\n\nprint(ngcd(24,16)) #output 8\nprint(ngcd(16,24)) #output 8\n\n\n#write a function to find the greatest common factor of a given pair of numbers\ndef gcf(x,y):\n    if x<y:\n        small=x\n    else:\n        small=y\n    for i in range(1,small+1):\n        if(x%i==0 and y%i==0):\n            gcf=i\n    return gcf\n\nprint(gcf(24,16)) #output 12\nprint(gcf(16,24)) #output 12\n\n\n#write a function to find the least common multiple of two numbers\ndef lcm(x,y):\n    return (x*y)//gcd(x,y)\n\nprint(lcm(12,18)) #output 36\nprint(lcm(24,16)) #output 48\n\n#write a function to find the sum of digits of a given number\ndef sum_of_digits(num):\n    sum=0\n    while num>0:\n        sum+=num%10\n        num",
        "generated_testcode": "assert ngcd(12, 18) == 6\n",
        "test": "assert num_comm_div(2,4) == 2\nassert num_comm_div(2,8) == 2\nassert num_comm_div(12,24) == 6",
        "canonical_solution": "def ngcd(x,y):\r\n    i=1\r\n    while(i<=x and i<=y):\r\n        if(x%i==0 and y%i == 0):\r\n            gcd=i;\r\n        i+=1\r\n    return gcd;\r\ndef num_comm_div(x,y):\r\n  n = ngcd(x,y)\r\n  result = 0\r\n  z = int(n**0.5)\r\n  i = 1\r\n  while(i <= z):\r\n    if(n % i == 0):\r\n      result += 2 \r\n      if(i == n/i):\r\n        result-=1\r\n    i+=1\r\n  return result"
    },
    {
        "number": 502,
        "prompt": "Write a python function to find remainder of two numbers.\ndef find(n,m):\n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    if n<0:\n        n=abs(n)\n    if m<0:\n        m=abs(m)\n    return n%m\n#find(17,8)\nprint(find(17,8))\n\n",
        "generated_testcode": "assert find(10,3) == 1\n",
        "test": "assert find(3,3) == 0\nassert find(10,3) == 1\nassert find(16,5) == 1",
        "canonical_solution": "def find(n,m):\r\n  r = n%m\r\n  return (r)"
    },
    {
        "number": 503,
        "prompt": "Write a function to add consecutive numbers of a given list.\ndef add_consecutive_nums(nums):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    result = []\n    for i in range(len(nums)):\n        if i < len(nums) - 1:\n            result.append(nums[i] + nums[i + 1])\n    return result\n\n\n\n# Test the function with the following input\nnums = [1, 2, 3, 4, 5, 6, 7, 8, 9]\nprint(add_consecutive_nums(nums))  # Output: [3, 5, 7, 9, 11, 13]\n\n\n# Test the function with the following input\nnums = [10, 20, 30, 40, 50, 60]\nprint(add_consecutive_nums(nums))  # Output: [30, 50, 70]\n\n\n# Test the function with the following input\nnums = [1, 2, 3, 4, 5]\nprint(add_consecutive_nums(nums))  # Output: [3]\n\n\n# Test the function with the following input\nnums = [1]\nprint(add_consecutive_nums(nums))  # Output: []\n\n",
        "generated_testcode": "assert add_consecutive_nums([1, 2, 3, 4, 5, 6, 7, 8, 9] ) == 25\n",
        "test": "assert add_consecutive_nums([1, 1, 3, 4, 4, 5, 6, 7])==[2, 4, 7, 8, 9, 11, 13]\nassert add_consecutive_nums([4, 5, 8, 9, 6, 10])==[9, 13, 17, 15, 16]\nassert add_consecutive_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[3, 5, 7, 9, 11, 13, 15, 17, 19]",
        "canonical_solution": "def add_consecutive_nums(nums):\r\n    result = [b+a for a, b in zip(nums[:-1], nums[1:])]\r\n    return result"
    },
    {
        "number": 504,
        "prompt": "Write a python function to find the cube sum of first n natural numbers.\ndef sum_Of_Series(n): \n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    sum = 0\n    for i in range(1,n+1):\n        sum += i**3\n    return sum\n\n#Test the function with n = 5\nprint(sum_Of_Series(5)) # Output: 2255\n\n#Test the function with n = 10\nprint(sum_Of_Series(10)) # Output: 2850\n\n#Test the function with n = 15\nprint(sum_Of_Series(15)) # Output: 78500\n\n#Test the function with n = 20\nprint(sum_Of_Series(20)) # Output: 1250000",
        "generated_testcode": "assert sum_Of_Series(5) == 125\n",
        "test": "assert sum_Of_Series(5) == 225\nassert sum_Of_Series(2) == 9\nassert sum_Of_Series(3) == 36",
        "canonical_solution": "def sum_Of_Series(n): \r\n    sum = 0\r\n    for i in range(1,n + 1): \r\n        sum += i * i*i       \r\n    return sum"
    },
    {
        "number": 505,
        "prompt": "Write a function to move all zeroes to the end of the given array.\ndef re_order(A):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    n = len(A)\n    if n == 0 or n == 1:\n        return A\n    j = 0\n    for i in range(n):\n        if A[i] != 0:\n            A[i], A[j] = A[j], A[i]\n            j += 1\n    return A\n\n\n# Test the function\nA = [0, 1, 0, 2, 3, 0, 4, 0, 5, 0]\nprint(re_order(A))\n# Expected output: [1, 2, 3, 4, 5, 0, 0, 0, 0]\n\n\n# Test the function\nA = [0, 1, 2, 3, 4, 5, 6, 0]\nprint(re_order(A))\n# Expected output: [1, 2, 3, 4, 5, 6, 0]\n\n\n# Test the function\nA = [1, 2, 3, 4, 5, 6, 0]\nprint(re_order(A))\n# Expected output: [1, 2, 3, 4, 5, 6, 0]\n\n\n# Test the function\nA = []\nprint(re_order(A))\n# Expected output: []",
        "generated_testcode": "assert re_order([0, 1, 0, 2, 3, 0, 4, 0, 5, 0] ) == [1, 2, 3, 4, 5, 0, 0, 0, 0]\n",
        "test": "assert re_order([6, 0, 8, 2, 3, 0, 4, 0, 1]) == [6, 8, 2, 3, 4, 1, 0, 0, 0]\nassert re_order([4, 0, 2, 7, 0, 9, 0, 12, 0]) == [4, 2, 7, 9, 12, 0, 0, 0, 0]\nassert re_order([3, 11, 0, 74, 14, 0, 1, 0, 2]) == [3, 11, 74, 14, 1, 2, 0, 0, 0]",
        "canonical_solution": "def re_order(A):\r\n    k = 0\r\n    for i in A:\r\n        if i:\r\n            A[k] = i\r\n            k = k + 1\r\n    for i in range(k, len(A)):\r\n        A[i] = 0\r\n    return A"
    },
    {
        "number": 506,
        "prompt": "Write a function to calculate the permutation coefficient of given p(n, k).\ndef permutation_coefficient(n, k): \n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    if k == 0 or k == n:\n        return 1\n    if k > n:\n        return 0\n    return (factorial(n) // factorial(n - k) // factorial(k))\n\ndef factorial(n):\n    if n == 0 or n == 1:\n        return 1\n    return n * factorial(n - 1)\n\n# Test the function\nprint(permutation_coefficient(5, 2)) # Output: 10\nprint(permutation_coefficient(4, 2)) # Output: 6\nprint(permutation_coefficient(3, 1)) # Output: 3\nprint(permutation_coefficient(6, 3)) # Output: 80\nprint(permutation_coefficient(10, 5)) # Output: 302400\nprint(permutation_coefficient(7, 0)) # Output: 1\nprint(permutation_coefficient(7, 7)) # Output: 1\nprint(permutation_coefficient(7, 8)) # Output: 0\nprint(permutation_coefficient(7, -1)) # Output: 0\n\n# Time complexity: O(n)",
        "generated_testcode": "assert permutation_coefficient(5, 2) == 60\n",
        "test": "assert permutation_coefficient(10, 2) == 90\nassert permutation_coefficient(10, 3) == 720\nassert permutation_coefficient(10, 1) == 10",
        "canonical_solution": "def permutation_coefficient(n, k): \r\n\tP = [[0 for i in range(k + 1)] \r\n\t\t\tfor j in range(n + 1)] \r\n\tfor i in range(n + 1): \r\n\t\tfor j in range(min(i, k) + 1): \r\n\t\t\tif (j == 0): \r\n\t\t\t\tP[i][j] = 1\r\n\t\t\telse: \r\n\t\t\t\tP[i][j] = P[i - 1][j] + ( \r\n\t\t\t\t\t\tj * P[i - 1][j - 1]) \r\n\t\t\tif (j < k): \r\n\t\t\t\tP[i][j + 1] = 0\r\n\treturn P[n][k] "
    },
    {
        "number": 507,
        "prompt": "Write a function to remove specific words from a given list.\ndef remove_words(list1, removewords):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    new_list = []\n    for word in list1:\n        if word not in removewords:\n            new_list.append(word)\n    return new_list\n\n# test the function\nlist1 = ['apple', 'banana', 'orange', 'grape', 'orange', 'apple', 'pear', 'banana', 'grape']\nremove_words(list1, ['banana', 'grape'])\nprint(list1)\n",
        "generated_testcode": "assert remove_words(['apple', 'banana', 'orange', 'grape', 'apple', 'banana', 'grape'], ['apple', 'grape']) == ['banana']\n",
        "test": "assert remove_words(['red', 'green', 'blue', 'white', 'black', 'orange'],['white', 'orange'])==['red', 'green', 'blue', 'black']\nassert remove_words(['red', 'green', 'blue', 'white', 'black', 'orange'],['black', 'orange'])==['red', 'green', 'blue', 'white']\nassert remove_words(['red', 'green', 'blue', 'white', 'black', 'orange'],['blue', 'white'])==['red', 'green', 'black', 'orange']",
        "canonical_solution": "def remove_words(list1, removewords):\r\n    for word in list(list1):\r\n        if word in removewords:\r\n            list1.remove(word)\r\n    return list1  "
    },
    {
        "number": 508,
        "prompt": "Write a function to check if the common elements between two given lists are in the same order or not.\ndef same_order(l1, l2):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": true,
        "answer": "    if len(l1) == len(l2) and sorted(l1) == sorted(l2):\n        return True\n    return False\n\n#Test cases\nprint(same_order([1,2,3,4,5],[5,4,3,2,1])) #True\nprint(same_order([1,2,3,4,5],[5,3,4,2,1])) #False\nprint(same_order([1,2,3,4],[4,3,2,1])) #True\nprint(same_order([1,2,3],[4,3,2])) #False\nprint(same_order([1,2,3,4,5],[2,1,4,3])) #False\nprint(same_order([1,2,3,4],[3,4,5])) #False\n\n",
        "generated_testcode": "assert same_order([1, 2, 3, 4, 5], [5, 4, 3, 2, 1]) == True\n",
        "test": "assert same_order([\"red\",\"green\",\"black\",\"orange\"],[\"red\",\"pink\",\"green\",\"white\",\"black\"])==True\nassert same_order([\"red\",\"pink\",\"green\",\"white\",\"black\"],[\"white\",\"orange\",\"pink\",\"black\"])==False\nassert same_order([\"red\",\"green\",\"black\",\"orange\"],[\"red\",\"pink\",\"green\",\"white\",\"black\"])==True",
        "canonical_solution": "def same_order(l1, l2):\r\n    common_elements = set(l1) & set(l2)\r\n    l1 = [e for e in l1 if e in common_elements]\r\n    l2 = [e for e in l2 if e in common_elements]\r\n    return l1 == l2"
    },
    {
        "number": 509,
        "prompt": "Write a python function to find the average of odd numbers till a given odd number.\ndef average_Odd(n) : \n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": true,
        "answer": "    sum = 0\n    count = 0\n    i = 1\n    while i <= n : \n        if i % 2 != 0 : \n            sum += i\n            count += 1\n        i += 2\n    if count != 0 : \n        avg = sum/count\n    else : \n        avg = None\n    return avg\n\n# Test the function with the following inputs\nprint(average_Odd(5))  # Output: 1.5\nprint(average_Odd(10)) # Output: 4.0\nprint(average_Odd(1))  # Output: 1.0\nprint(average_Odd(0))  # Output: None\nprint(average_Odd(7))  # Output: 5.0\nprint(average_Odd(20)) # Output: 10.0\nprint(average_Odd(15)) # Output: 8.0\n",
        "generated_testcode": "assert average_Odd(5) == 3.0\n",
        "test": "assert average_Odd(9) == 5\nassert average_Odd(5) == 3\nassert average_Odd(11) == 6",
        "canonical_solution": "def average_Odd(n) : \r\n    if (n%2==0) : \r\n        return (\"Invalid Input\") \r\n        return -1 \r\n    sm =0\r\n    count =0\r\n    while (n>=1) : \r\n        count=count+1\r\n        sm = sm + n \r\n        n = n-2\r\n    return sm//count "
    },
    {
        "number": 510,
        "prompt": "Write a function to find the number of subsequences having product smaller than k for the given non negative array.\ndef no_of_subsequences(arr, k): \n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    n = len(arr) \n    dp = [0]*n \n    dp[0] = 1\n    for i in range(1, n): \n        max_product = 1\n        for j in range(i): \n            if arr[i] > arr[j]: \n                max_product = max(max_product, dp[j]) \n        dp[i] = max_product + 1\n    return dp[-1] \n\n# Driver code \narr = [int(x) for x in input(\"Enter the non negative array elements separated by space: \").split()] \nk = int(input(\"Enter the value of k: \")) \nn = len(arr) \nprint(\"The number of subsequences having product less than k is\", no_of_subsequences(arr, k)) ",
        "generated_testcode": "assert no_of_subsequences([1, 2, 3, 4, 5], 24) == 5\n",
        "test": "assert no_of_subsequences([1,2,3,4], 10) == 11\nassert no_of_subsequences([4,8,7,2], 50) == 9\nassert no_of_subsequences([5,6,7,8], 15) == 4",
        "canonical_solution": "def no_of_subsequences(arr, k): \r\n\tn = len(arr) \r\n\tdp = [[0 for i in range(n + 1)] \r\n\t\t\tfor j in range(k + 1)] \r\n\tfor i in range(1, k + 1): \r\n\t\tfor j in range(1, n + 1): \r\n\t\t\tdp[i][j] = dp[i][j - 1] \r\n\t\t\tif arr[j - 1] <= i and arr[j - 1] > 0: \r\n\t\t\t\tdp[i][j] += dp[i // arr[j - 1]][j - 1] + 1\r\n\treturn dp[k][n]"
    },
    {
        "number": 511,
        "prompt": "Write a python function to find minimum sum of factors of a given number.\ndef find_Min_Sum(num): \n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    #create a list of all factors of the given number\n    factors = []\n    for i in range(1,num+1):\n        if num%i == 0:\n            factors.append(i)\n\n    #calculate the sum of all factors\n    sum_of_factors = sum(factors)\n    return sum_of_factors\n    \n#test the function\nprint(find_Min_Sum(12)) #output should be 30 (1+2+3+6=12)\nprint(find_Min_Sum(15)) #output should be 15 (1+3+5=9)\nprint(find_Min_Sum(30)) #output should be 15 (1+2+3+5+6+10=21)\nprint(find_Min_Sum(100)) #output should be 30 (1+2+5+10=18)\nprint(find_Min_Sum(24)) #output should be 15 (1+2+3+4+6+8=20)\n",
        "generated_testcode": "assert find_Min_Sum(12) == 2, \"Test case 1 failed\"\n",
        "test": "assert find_Min_Sum(12) == 7\nassert find_Min_Sum(105) == 15\nassert find_Min_Sum(2) == 2",
        "canonical_solution": "def find_Min_Sum(num): \r\n    sum = 0\r\n    i = 2\r\n    while(i * i <= num): \r\n        while(num % i == 0): \r\n            sum += i \r\n            num /= i \r\n        i += 1\r\n    sum += num \r\n    return sum"
    },
    {
        "number": 512,
        "prompt": "Write a function to count the element frequency in the mixed nested tuple.\ndef flatten(test_tuple): \n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    result = []\n    for i in test_tuple:\n        if type(i) == tuple:\n            result.extend(flatten(i))\n        else:\n            result.append(i)\n    return result\n\ndef count_frequency(flatten_tuple):\n    count_dict = {}\n    for i in flatten_tuple:\n        if i in count_dict:\n            count_dict[i] += 1\n        else:\n            count_dict[i] = 1\n    return count_dict\n\n\ndef count_elements(nested_tuple):\n    flattened_tuple = flatten(nested_tuple)\n    return count_frequency(flattened_tuple)\n\n\n# Test cases\nprint(count_elements(((1, (2, (3, 4, 5), 2, 3, (4, 5, (6, 7, 6, 8), 8), 8, 9, 2)))\n# Output: {1: 1, 2: 2, 3: 2, 4: 2, 5: 2, 6: 2, 7: 1, 8: 2, 9: 1}\n\nprint(count_elements(((1, (2, (3, (4, 5, (6, 7, 6, 8), 8), 8), 9, 2))\n# Output: {1: 1, 2: 1, 3:",
        "generated_testcode": "assert flatten(((1,2,3), (4,5,6, (7,8,9), (10,11, (12,13,14, (15,16))) ) ) ) == {1:1, 2:1, 3:1, 4:1, 5:1, 6:1, 7:1, 8:1, 9:1, 10:1, 11:1, 12:1, 13:1, 14:1, 15:1, 16:1}\n",
        "test": "assert count_element_freq((5, 6, (5, 6), 7, (8, 9), 9) ) == {5: 2, 6: 2, 7: 1, 8: 1, 9: 2}\nassert count_element_freq((6, 7, (6, 7), 8, (9, 10), 10) ) == {6: 2, 7: 2, 8: 1, 9: 1, 10: 2}\nassert count_element_freq((7, 8, (7, 8), 9, (10, 11), 11) ) == {7: 2, 8: 2, 9: 1, 10: 1, 11: 2}",
        "canonical_solution": "def flatten(test_tuple): \r\n\tfor tup in test_tuple: \r\n\t\tif isinstance(tup, tuple): \r\n\t\t\tyield from flatten(tup) \r\n\t\telse: \r\n\t\t\tyield tup \r\ndef count_element_freq(test_tuple):\r\n  res = {}\r\n  for ele in flatten(test_tuple):\r\n    if ele not in res:\r\n      res[ele] = 0\r\n    res[ele] += 1\r\n  return (res) "
    },
    {
        "number": 513,
        "prompt": "Write a function to convert tuple into list by adding the given string after every element.\ndef add_str(test_tup, K):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": true,
        "answer": "    my_list = list(test_tup)\n    for i in range(len(my_list)):\n        my_list[i] = str(my_list[i]) + K\n    return my_list\n\n\n# Test the function\ntest_tuple = (1, 2, 3, 4, 5, 6, 7, 8, 9)\nprint(add_str(test_tuple, \"hello\"))  # Output: ['1hello', '2hello', '3hello', '4hello', '5hello', '6hello', '7hello', '8hello', '9hello']\n\n# Test the function\ntest_tuple = (\"apple\", \"banana\", \"cherry\", \"grape\")\nprint(add_str(test_tuple, \"fruit\"))  # Output: ['applefruit', 'bananafruit', 'cherryfruit', 'grapefruit']\n\n# Test the function\ntest_tuple = ()\nprint(add_str(test_tuple, \"empty\"))  # Output: []\n\n# Test the function\ntest_tuple = (1,)\nprint(add_str(test_tuple, \"one\"))  # Output: ['1one']\n\n# Test the function\ntest_tuple = (1, 2, \"hello\", 3)\nprint(add_str(test_tuple, \"world\"))  # Output: ['1world', '2world', 'helloc', '3world'] ",
        "generated_testcode": "assert add_str((), \"hello\") == []\n",
        "test": "assert add_str((5, 6, 7, 4, 9) , \"FDF\") == [5, 'FDF', 6, 'FDF', 7, 'FDF', 4, 'FDF', 9, 'FDF']\nassert add_str((7, 8, 9, 10) , \"PF\") == [7, 'PF', 8, 'PF', 9, 'PF', 10, 'PF']\nassert add_str((11, 14, 12, 1, 4) , \"JH\") == [11, 'JH', 14, 'JH', 12, 'JH', 1, 'JH', 4, 'JH']",
        "canonical_solution": "def add_str(test_tup, K):\r\n  res = [ele for sub in test_tup for ele in (sub, K)]\r\n  return (res) "
    },
    {
        "number": 514,
        "prompt": "Write a function to find the summation of tuple elements in the given tuple list.\ndef sum_elements(test_tup):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    total = 0\n    for i in test_tup:\n        total += sum(i)\n    return total\n\n# Test the function with the following input\ntest_tuple = ((1,2,3),(4,5,6),(7,8,9)\nprint(sum_elements(test_tuple))  # Output: 25\n",
        "generated_testcode": "assert sum_elements(((1,2,3,4,5)) == 15\n",
        "test": "assert sum_elements((7, 8, 9, 1, 10, 7)) == 42\nassert sum_elements((1, 2, 3, 4, 5, 6)) == 21\nassert sum_elements((11, 12 ,13 ,45, 14)) == 95",
        "canonical_solution": "def sum_elements(test_tup):\r\n  res = sum(list(test_tup))\r\n  return (res) "
    },
    {
        "number": 515,
        "prompt": "Write a function to check if there is a subset with sum divisible by m.\ndef modular_sum(arr, n, m): \n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    s = 0\n    for i in range(n): \n        s += arr[i]\n    if s % m == 0: \n        return True\n    else: \n        return False\n\n# Test the function \narr = [2, 3, 3, 5, 7, 8, 9, 10, 12] \nn = len(arr) \nm = 3\nif modular_sum(arr, n, m): \n    print(\"There exists a subset with sum divisible by\", m) \nelse: \n    print(\"There does not exist a subset with sum divisible by\", m) \n    \n# Output: There exists a subset with sum divisible by 3",
        "generated_testcode": "assert modular_sum([1, 2, 3, 4, 5, 6, 7, 8, 9], 3, 3) == True\n",
        "test": "assert modular_sum([3, 1, 7, 5], 4, 6) == True\nassert modular_sum([1, 7], 2, 5) == False\nassert modular_sum([1, 6], 2, 5) == False",
        "canonical_solution": "def modular_sum(arr, n, m): \r\n\tif (n > m): \r\n\t\treturn True\r\n\tDP = [False for i in range(m)] \r\n\tfor i in range(n): \r\n\t\tif (DP[0]): \r\n\t\t\treturn True\r\n\t\ttemp = [False for i in range(m)] \r\n\t\tfor j in range(m): \r\n\t\t\tif (DP[j] == True): \r\n\t\t\t\tif (DP[(j + arr[i]) % m] == False): \r\n\t\t\t\t\ttemp[(j + arr[i]) % m] = True\r\n\t\tfor j in range(m): \r\n\t\t\tif (temp[j]): \r\n\t\t\t\tDP[j] = True\r\n\t\tDP[arr[i] % m] = True\r\n\treturn DP[0]"
    },
    {
        "number": 516,
        "prompt": "Write a function to sort a list of elements using radix sort.\ndef radix_sort(nums):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    # set max_num as the maximum element in the list\n    max_num = max(nums)\n    # set the number of digits in the largest number\n    digits = len(str(max_num))\n    # iterate through each digit from the least significant to most significant\n    for exp in range(digits):\n        # initialize the counting array\n        counting_array = [0] * 10\n        # iterate through the list of elements\n        for num in nums:\n            # calculate the digit value of the current number\n            digit_value = (num // (10 ** exp) % 10)\n            # increment the counting array for the current digit value\n            counting_array[digit_value] += 1\n        # calculate the starting index for the next iteration\n        for i in range(1, len(counting_array)):\n            counting_array[i] += counting_array[i - 1]\n        # initialize the output array\n        output = [0] * len(nums)\n        # iterate through the list of elements in reverse order\n        for num in reversed(nums):\n            # calculate the digit value of the current number\n            digit_value = (num // (10 ** exp) % 10)\n            # insert the number into the output array in the correct position based on the counting array\n            output[counting_array[digit_value] - 1] = num\n            # decrement the counting array\n            counting_array[digit_value] -= 1\n        # set the current list",
        "generated_testcode": "assert radix_sort([37, 45, 6, 12, 89, 4, 5, 11, 9, 3, 0, 100, 7] ) == [0, 1, 3, 4, 5, 6, 9, 10, 11, 12, 37, 45, 89]\n",
        "test": "assert radix_sort([15, 79, 25, 68, 37]) == [15, 25, 37, 68, 79]\nassert radix_sort([9, 11, 8, 7, 3, 2]) == [2, 3, 7, 8, 9, 11]\nassert radix_sort([36, 12, 24, 26, 29]) == [12, 24, 26, 29, 36]",
        "canonical_solution": "def radix_sort(nums):\r\n    RADIX = 10\r\n    placement = 1\r\n    max_digit = max(nums)\r\n\r\n    while placement < max_digit:\r\n      buckets = [list() for _ in range( RADIX )]\r\n      for i in nums:\r\n        tmp = int((i / placement) % RADIX)\r\n        buckets[tmp].append(i)\r\n      a = 0\r\n      for b in range( RADIX ):\r\n        buck = buckets[b]\r\n        for i in buck:\r\n          nums[a] = i\r\n          a += 1\r\n      placement *= RADIX\r\n    return nums"
    },
    {
        "number": 517,
        "prompt": "Write a python function to find the largest postive number from the given list.\ndef largest_pos(list1): \n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    largest = float('-inf') \n    for num in list1: \n        if num > largest and num > 0: \n            largest = num \n    return largest\n\nlist1 = [2, -3, 0, 5, -6, 7, -2, 8, 4, -1] \nprint(largest_pos(list1)) ",
        "generated_testcode": "assert largest_pos([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 9\n",
        "test": "assert largest_pos([1,2,3,4,-1]) == 4\nassert largest_pos([0,1,2,-5,-1,6]) == 6\nassert largest_pos([0,0,1,0]) == 1",
        "canonical_solution": "def largest_pos(list1): \r\n    max = list1[0] \r\n    for x in list1: \r\n        if x > max : \r\n             max = x  \r\n    return max"
    },
    {
        "number": 518,
        "prompt": "Write a function to find the square root of a perfect number.\ndef sqrt_root(num):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    # Initialize an empty list to store the divisors\n    divisor_list = []\n    # Iterate through the range from 1 to num\n    for i in range(1, num + 1):\n        # Check if num is divisible by i\n        if num % i == 0:\n            divisor_list.append(i)\n    # Calculate the sum of divisors\n    sum_of_divisors = sum(divisor_list)\n    # Check if the sum of divisors is equal to the number itself\n    if sum_of_divisors == num:\n        return num\n    # Return None if the sum of divisors is not equal to the number itself\n    else:\n        return None\n\n\n# Test the function\nprint(sqrt_root(28)) # Output: 7 (7 is a perfect number)\nprint(sqrt_root(12)) # Output: None (12 is not a perfect number)\nprint(sqrt_root(256)) # Output: 16 (256 is a perfect number)",
        "generated_testcode": "assert sqrt_root(6) == 2\n",
        "test": "assert sqrt_root(4)==2\nassert sqrt_root(16)==4\nassert sqrt_root(400)==20",
        "canonical_solution": "import math\r\ndef sqrt_root(num):\r\n sqrt_root = math.pow(num, 0.5)\r\n return sqrt_root "
    },
    {
        "number": 519,
        "prompt": "Write a function to calculate volume of a tetrahedron.\ndef volume_tetrahedron(num):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    s = (num * (num**2 * (num**2 * (num **2 + 1)) * 1/6) * (num + 1))\n    return s\n\n# Test the function\nprint(volume_tetrahedron(2)) # Output: 32.0\nprint(volume_tetrahedron(3)) # Output: 128.0\nprint(volume_tetrahedron(4)) # Output: 144.0\nprint(volume_tetrahedron(5)) # Output: 156.0\nprint(volume_tetrahedron(6)) # Output: 192.0\nprint(volume_tetrahedron(7)) # Output: 228.0\n",
        "generated_testcode": "assert volume_tetrahedron(3) == 3.0\n",
        "test": "assert volume_tetrahedron(10)==117.85\nassert volume_tetrahedron(15)==397.75\nassert volume_tetrahedron(20)==942.81",
        "canonical_solution": "import math\r\ndef volume_tetrahedron(num):\r\n\tvolume = (num ** 3 / (6 * math.sqrt(2)))\t\r\n\treturn round(volume, 2)"
    },
    {
        "number": 520,
        "prompt": "Write a function to find the lcm of the given array elements.\ndef find_lcm(num1, num2): \n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": true,
        "answer": "    return (num1*num2) // gcd(num1, num2) \n\n\ndef gcd(num1, num2): \n    if num1 == 0: \n        return num2 \n    return gcd(num2%num1, num1) \n\n\ndef find_lcm_array(arr): \n    lcm = arr[0] \n    for i in range(1, len(arr)): \n        lcm = find_lcm(lcm, arr[i]) \n    return lcm \n\n\n# Example usage:\narr = [2, 7, 3]\nprint(find_lcm_array(arr)) # Output: 42 \n\narr = [15, 10, 6]\nprint(find_lcm_array(arr)) # Output: 60 ",
        "generated_testcode": "assert find_lcm(2, 3) == 6\n",
        "test": "assert get_lcm([2, 7, 3, 9, 4]) == 252\nassert get_lcm([1, 2, 8, 3]) == 24\nassert get_lcm([3, 8, 4, 10, 5]) == 120",
        "canonical_solution": "def find_lcm(num1, num2): \r\n\tif(num1>num2): \r\n\t\tnum = num1 \r\n\t\tden = num2 \r\n\telse: \r\n\t\tnum = num2 \r\n\t\tden = num1 \r\n\trem = num % den \r\n\twhile (rem != 0): \r\n\t\tnum = den \r\n\t\tden = rem \r\n\t\trem = num % den \r\n\tgcd = den \r\n\tlcm = int(int(num1 * num2)/int(gcd)) \r\n\treturn lcm \r\ndef get_lcm(l):\r\n  num1 = l[0]\r\n  num2 = l[1]\r\n  lcm = find_lcm(num1, num2)\r\n  for i in range(2, len(l)):\r\n    lcm = find_lcm(lcm, l[i])\r\n  return lcm "
    },
    {
        "number": 521,
        "prompt": "Write a function to print check if the triangle is scalene or not.\ndef check_isosceles(x,y,z):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    if x == y or y == z or x == z:\n        return \"Isosceles\"\n    else:\n        return \"Scalene\"\n\n#Testing\nprint(check_isosceles(5,5,5)) #Scalene\nprint(check_isosceles(5,10,7)) #Isosceles\nprint(check_isosceles(10,10,15)) #Isosceles\nprint(check_isosceles(5,10,15)) #Scalene\nprint(check_isosceles(10,15,20)) #Scalene\nprint(check_isosceles(10,20,20)) #Isosceles",
        "generated_testcode": "assert check_isosceles(3,4,5) == True\n",
        "test": "assert check_isosceles(6,8,12)==True\nassert check_isosceles(6,6,12)==False\nassert check_isosceles(6,15,20)==True",
        "canonical_solution": "def check_isosceles(x,y,z):\r\n  if x!=y & y!=z & z!=x:\r\n\t   return True\r\n  else:\r\n     return False"
    },
    {
        "number": 522,
        "prompt": "Write a function to find the longest bitonic subsequence for the given array.\ndef lbs(arr): \n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    n = len(arr) \n    if n < 2: \n        return n \n    dp = [1]*n \n    for i in range(1, n): \n        for j in range(i): \n            if arr[i] > arr[j]: \n                dp[i] = max(dp[i], dp[j] + 1) \n    max_len = max(dp) \n    for i in range(n): \n        if dp[i] == max_len: \n            start = i \n            break\n    ans = [arr[start]] \n    for i in range(start + 1, n): \n        if arr[i] > arr[i - 1]: \n            ans.append(arr[i]) \n    return ans ",
        "generated_testcode": "assert lbs([1, 11, 2, 3, 2, 4, 5, 3, 2, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20] ) == 10\n",
        "test": "assert lbs([0 , 8 , 4, 12, 2, 10 , 6 , 14 , 1 , 9 , 5 , 13, 3, 11 , 7 , 15]) == 7\nassert lbs([1, 11, 2, 10, 4, 5, 2, 1]) == 6\nassert lbs([80, 60, 30, 40, 20, 10]) == 5",
        "canonical_solution": "def lbs(arr): \r\n\tn = len(arr) \r\n\tlis = [1 for i in range(n+1)] \r\n\tfor i in range(1 , n): \r\n\t\tfor j in range(0 , i): \r\n\t\t\tif ((arr[i] > arr[j]) and (lis[i] < lis[j] +1)): \r\n\t\t\t\tlis[i] = lis[j] + 1\r\n\tlds = [1 for i in range(n+1)] \r\n\tfor i in reversed(range(n-1)): \r\n\t\tfor j in reversed(range(i-1 ,n)): \r\n\t\t\tif(arr[i] > arr[j] and lds[i] < lds[j] + 1): \r\n\t\t\t\tlds[i] = lds[j] + 1\r\n\tmaximum = lis[0] + lds[0] - 1\r\n\tfor i in range(1 , n): \r\n\t\tmaximum = max((lis[i] + lds[i]-1), maximum) \r\n\treturn maximum"
    },
    {
        "number": 523,
        "prompt": "Write a function to check whether a given string has a capital letter, a lower case letter, a number and specified length using lambda function.\ndef check_string(str1):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": true,
        "answer": "    if len(str1) == 0 or len(str1) > 10:\n        return False\n    else:\n        capital_check = lambda x: any(i.isupper() for i in str1)\n        lower_check = lambda x: any(i.islower() for i in str1)\n        num_check = lambda x: any(i.isdigit() for i in str1)\n        return all([capital_check(str1), lower_check(str1), num_check(str1), len(str1) >= 3])\n\n# Test the function with examples\nprint(check_string(\"Abc123\"))  # Output: True\nprint(check_string(\"abc\"))  # Output: False\nprint(check_string(\"ABC123\"))  # Output: True\nprint(check_string(\"abcde\"))  # Output: False\nprint(check_string(\"123\"))  # Output: False\nprint(check_string(\"A123\"))  # Output: False\nprint(check_string(\"Aa1\"))  # Output: True\nprint(check_string(\"123A\"))  # Output: False\n\n",
        "generated_testcode": "assert check_string(\"A1b\") == True\n",
        "test": "assert check_string('python')==['String must have 1 upper case character.', 'String must have 1 number.', 'String length should be atleast 8.']\nassert check_string('123python')==['String must have 1 upper case character.']\nassert check_string('123Python')==['Valid string.']",
        "canonical_solution": "def check_string(str1):\r\n    messg = [\r\n    lambda str1: any(x.isupper() for x in str1) or 'String must have 1 upper case character.',\r\n    lambda str1: any(x.islower() for x in str1) or 'String must have 1 lower case character.',\r\n    lambda str1: any(x.isdigit() for x in str1) or 'String must have 1 number.',\r\n    lambda str1: len(str1) >= 7                 or 'String length should be atleast 8.',]\r\n    result = [x for x in [i(str1) for i in messg] if x != True]\r\n    if not result:\r\n        result.append('Valid string.')\r\n    return result  "
    },
    {
        "number": 524,
        "prompt": "Write a function to find the sum of maximum increasing subsequence of the given array.\ndef max_sum_increasing_subsequence(arr, n): \n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    if n == 1: \n        return arr[0] \n  \n    dp = [1]*n \n  \n    for i in range(1, n): \n        for j in range(i): \n            if arr[i] > arr[j]: \n                dp[i] = max(dp[i], dp[j]+1) \n  \n    return max(dp) \n  \n    # return max(dp) \n  \n# driver code \narr = [1, 101, 2, 3, 20, 4, 5, 6, 1, 7] \nn = len(arr) \nprint(\"Length of the maximum increasing subsequence is\", max_sum_increasing_subsequence(arr, n)) ",
        "generated_testcode": "assert max_sum_increasing_subsequence([1, 2, 3, 4, 5, 3, 6, 7, 8, 9, 10, 11] ) == 31\n",
        "test": "assert max_sum_increasing_subsequence([1, 101, 2, 3, 100, 4, 5], 7) == 106\nassert max_sum_increasing_subsequence([3, 4, 5, 10], 4) == 22\nassert max_sum_increasing_subsequence([10, 5, 4, 3], 4) == 10",
        "canonical_solution": "def max_sum_increasing_subsequence(arr, n): \r\n\tmax = 0\r\n\tmsis = [0 for x in range(n)] \r\n\tfor i in range(n): \r\n\t\tmsis[i] = arr[i] \r\n\tfor i in range(1, n): \r\n\t\tfor j in range(i): \r\n\t\t\tif (arr[i] > arr[j] and\r\n\t\t\t\tmsis[i] < msis[j] + arr[i]): \r\n\t\t\t\tmsis[i] = msis[j] + arr[i] \r\n\tfor i in range(n): \r\n\t\tif max < msis[i]: \r\n\t\t\tmax = msis[i] \r\n\treturn max"
    },
    {
        "number": 525,
        "prompt": "Write a python function to check whether two given lines are parallel or not.\ndef parallel_lines(line1, line2):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    # Line1: slope1, y-intercept1, line2: slope2, y-intercept2\n    if line1[0] == line2[0]:\n        return True\n    elif line1[0] == 0 or line2[0] == 0:\n        return False\n    else:\n        return (line1[0]/line2[0] == line1[1]/line2[1])\n\n\nline1 = (1, 2, 1)\nline2 = (0, -2, 4)\nprint(parallel_lines(line1, line2)) # True\n\nline1 = (2, 3, 1)\nline2 = (0, -2, 3)\nprint(parallel_lines(line1, line2)) # False\nline1 = (0, -1, 0)\nline2 = (1, 1, 0)\nprint(parallel_lines(line1, line2)) # True\nline1 = (1, 0, 1)\nline2 = (0, 1, 0)\nprint(parallel_lines(line1, line2)) # False\nline1 = (1, 0, 1)\nline2 = (2, 0, 2)\nprint(parallel_lines(line1, line2)) # True\nline1 = (0, -1, 0)\nline2 = (1, 1, 0)\nprint(parallel_lines(line1, line2)) # False\nline1 =",
        "generated_testcode": "assert parallel_lines([(1, 2, 3, 4), (5, 6, 7), (8, 9, 10)], [(-1, 2, 3, 4)) == True\n",
        "test": "assert parallel_lines([2,3,4], [2,3,8]) == True\nassert parallel_lines([2,3,4], [4,-3,8]) == False\nassert parallel_lines([3,3],[5,5]) == True",
        "canonical_solution": "def parallel_lines(line1, line2):\r\n  return line1[0]/line1[1] == line2[0]/line2[1]"
    },
    {
        "number": 526,
        "prompt": "Write a python function to capitalize first and last letters of each word of a given string.\ndef capitalize_first_last_letters(str1):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    words = str1.split()\n    capitalized_words = []\n    for word in words:\n        if len(word) > 2:\n            capitalized_words.append(word[0].upper() + word[1:-1] + word[-1].upper())\n        else:\n            capitalized_words.append(word.upper())\n    return ' '.join(capitalized_words)\n\n# Test the function\nprint(capitalize_first_last_letters(\"hello world\")) # Output: \"Hello WorlD\"\nprint(capitalize_first_last_letters(\"python programming\")) # Output: \"Python ProGrAmM\"\nprint(capitalize_first_last_letters(\"programming in python\")) # Output: \"ProGrAmMIn PythoN\"\nprint(capitalize_first_last_letters(\"i love python\")) # Output: \"I LoVe PythoN\"\nprint(capitalize_first_last_letters(\"data structure\")) # Output: \"DaTa StRuCtUrE\"\n\n\n# Another way using list comprehension\ndef capitalize_first_last_letters(str1):\n    return ' '.join([word[0].upper() + word[1:-1] + word[-1].upper() if len(word) > 2 else word.upper() for word in str1.split()])",
        "generated_testcode": "assert capitalize_first_last_letters(\"hello world\") == \"Hello World\"\n",
        "test": "assert capitalize_first_last_letters(\"python\") == \"PythoN\"\nassert capitalize_first_last_letters(\"bigdata\") == \"BigdatA\"\nassert capitalize_first_last_letters(\"Hadoop\") == \"HadooP\"",
        "canonical_solution": "def capitalize_first_last_letters(str1):\r\n     str1 = result = str1.title()\r\n     result =  \"\"\r\n     for word in str1.split():\r\n        result += word[:-1] + word[-1].upper() + \" \"\r\n     return result[:-1]  "
    },
    {
        "number": 527,
        "prompt": "Write a function to find all pairs in an integer array whose sum is equal to a given number.\ndef get_pairs_count(arr, n, sum):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    count = 0\n    arr.sort()\n    left = 0\n    right = len(arr)-1\n    while left < right:\n        if arr[left] + arr[right] == sum:\n            count += 1\n            left += 1\n            right -= 1\n            while left < right and arr[left] == arr[left-1]:\n                left += 1\n            while left < right and arr[right] == arr[right+1]:\n                right -= 1\n        elif arr[left] + arr[right] < sum:\n            left += 1\n        else:\n            right -= 1\n    return count\n\n# Test the function\narr = [1, 3, 4, 5, 6, 7, 8, 9, 11, 2, 4]\nn = 7\nsum = 8\nprint(get_pairs_count(arr, n, sum)) # Output: 2\n",
        "generated_testcode": "assert get_pairs_count([1, 2, 3, 4, 5, 6, 7, 8, 9], 10) == 2\n",
        "test": "assert get_pairs_count([1, 5, 7, -1, 5], 5, 6) == 3\nassert get_pairs_count([1, 5, 7, -1], 4, 6) == 2\nassert get_pairs_count([1, 1, 1, 1], 4, 2) == 6",
        "canonical_solution": "def get_pairs_count(arr, n, sum):\r\n    count = 0 \r\n    for i in range(0, n):\r\n        for j in range(i + 1, n):\r\n            if arr[i] + arr[j] == sum:\r\n                count += 1\r\n    return count"
    },
    {
        "number": 528,
        "prompt": "Write a function to find the list of lists with minimum length.\ndef min_length(list1):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    \"\"\"\n    This function takes a list of lists as input and returns the list with minimum length.\n    If there are multiple lists with the same length, it returns all of them.\n    \"\"\"\n    min_length = len(list1[0])\n    result = []\n    for sublist in list1:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n    for sublist in list1:\n        if len(sublist) == min_length:\n            result.append(sublist)\n    return result\n\n\n# Test cases\nprint(min_length([[1, 2, 3], [4, 5], [6, 7, 8, 9], [10], [11], [12, 13, 14, 15, 16], [17, 18, 19], [20, 21, 22, 23, 24, 25]])) # Output: [[10], [11]]\nprint(min_length([[1, 2, 3, 4], [5, 6], [7, 8, 9, 10], [11, 12], [13, 14, 15, 16, 17], [18, 19, 20, 21, 22, 23]])) # Output: [[11, 12], [13,",
        "generated_testcode": "assert min_length([[1,2,3],[4,5],[6,7,8,9],[10],[11,12,13,14,15,16],[17,18],[19,20,21,22,23,24,25,26]] ) == [1,[10]\n\n# Test case 2:\n",
        "test": "assert min_length([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(1, [0])\nassert min_length([[1], [5, 7], [10, 12, 14,15]])==(1, [1])\nassert min_length([[5], [15,20,25]])==(1, [5])",
        "canonical_solution": "def min_length(list1):\r\n   min_length = min(len(x) for x in  list1 )  \r\n   min_list = min((x) for x in   list1)\r\n   return(min_length, min_list)     "
    },
    {
        "number": 529,
        "prompt": "Write a function to find the nth jacobsthal-lucas number.\ndef jacobsthal_lucas(n): \n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    elif n % 2 == 0:\n        return 2**(2**(n//2) - 1)\n    else:\n        return jacobsthal_lucas(n//2)**2 + jacobsthal_lucas((n+1)//2)**2\n\n\nprint(jacobsthal_lucas(5)) # Output: 25 ",
        "generated_testcode": "assert jacobsthal_lucas(0) == 2\n",
        "test": "assert jacobsthal_lucas(5) == 31\nassert jacobsthal_lucas(2) == 5\nassert jacobsthal_lucas(4) == 17",
        "canonical_solution": "def jacobsthal_lucas(n): \r\n\tdp=[0] * (n + 1) \r\n\tdp[0] = 2\r\n\tdp[1] = 1\r\n\tfor i in range(2, n+1): \r\n\t\tdp[i] = dp[i - 1] + 2 * dp[i - 2]; \r\n\treturn dp[n]"
    },
    {
        "number": 530,
        "prompt": "Write a function to find the ration of negative numbers in an array of integers.\ndef negative_count(nums):\n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    count = 0\n    for i in nums:\n        if i < 0:\n            count += 1\n    return count / len(nums)\n\n# Test cases\nprint(negative_count([1, 2, 3, -5, 4, -7, 8, -9])) # 0.4\nprint(negative_count([-1, -2, -3, -4, -5, -6])) # 1.0\nprint(negative_count([1, 2, 3, 4, 5, 6])) # 0.0\nprint(negative_count([-1, 2, -3, 4, -5, -6])) # 0.5\nprint(negative_count([-1, 0, 0, 0, 0])) # 1.0\nprint(negative_count([0, 0, 0, 0])) # 0.0\nprint(negative_count([1, 2, 3, 4, 5])) # 0.0\n\n\n# Solution in one line\ndef negative_count(nums):\n    return sum(1 for i in nums if i < 0) / len(nums) if nums else 0",
        "generated_testcode": "assert negative_count([1, 2, 3, -4, -5, 6, -7, 8, -9]) == 4/9\n",
        "test": "assert negative_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])==0.31\nassert negative_count([2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8])==0.31\nassert negative_count([2, 4, -6, -9, 11, -12, 14, -5, 17])==0.44",
        "canonical_solution": "from array import array\r\ndef negative_count(nums):\r\n    n = len(nums)\r\n    n1 = 0\r\n    for x in nums:\r\n        if x < 0:\r\n            n1 += 1\r\n        else:\r\n          None\r\n    return round(n1/n,2)"
    },
    {
        "number": 531,
        "prompt": "Write a function to find minimum number of coins that make a given value.\ndef min_coins(coins, m, V): \n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    dp = [0]*(V+1)\n    for i in range(1, V+1):\n        dp[i] = float('inf')\n        for j in range(len(coins)):\n            if coins[j] <= i:\n                dp[i] = min(dp[i], dp[i-coins[j]] + 1)\n    return dp[V] if dp[V] != float('inf') else -1\n\n#Example usage:\ncoins = [1, 2, 5, 10, 25, 50]\nV = 75\nprint(min_coins(coins, len(coins), V)) # Output: 3\n\ncoins = [1, 2, 3, 4, 8]\nV = 110\nprint(min_coins(coins, len(coins), V)) # Output: -1 (unable to make 10 using given coins)\n\n\n#Complexity Analysis:\n# Time Complexity: O(V*m) \n# Space Complexity: O(V)\n# We have used dynamic programming to solve this problem. The dp array stores the minimum number of coins required to make each value up to V. We iterate through each value from 1 to V and for each value, we iterate through all the coins and keep updating the dp array. Since we have to iterate through all coins for each value, the time complexity is O(V*m).",
        "generated_testcode": "assert min_coins([1, 2, 5, 10, 25, 50], 63, 4) == 3 # Expected output: 3 (10 + 10 + 10)\n",
        "test": "assert min_coins([9, 6, 5, 1] ,4,11)==2\nassert min_coins([4,5,6,7,8,9],6,9)==1\nassert min_coins([1, 2, 3],3,4)==2",
        "canonical_solution": "import sys \r\ndef min_coins(coins, m, V): \r\n    if (V == 0): \r\n        return 0\r\n    res = sys.maxsize \r\n    for i in range(0, m): \r\n        if (coins[i] <= V): \r\n            sub_res = min_coins(coins, m, V-coins[i]) \r\n            if (sub_res != sys.maxsize and sub_res + 1 < res): \r\n                res = sub_res + 1  \r\n    return res "
    },
    {
        "number": 532,
        "prompt": "Write a function to check if the two given strings are permutations of each other.\ndef check_permutation(str1, str2):\n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    if len(str1) != len(str2):\n        return False\n    freq_map = {}\n    for char in str1:\n        if char in freq_map:\n            freq_map[char] += 1\n        else:\n            freq_map[char] = 1\n    for char in str2:\n        if char in freq_map:\n            freq_map[char] -= 1\n        else:\n            freq_map[char] = 1\n    for count in freq_map.values():\n        if count != 0:\n            return False\n    return True\n\n# Test cases\nprint(check_permutation(\"abcde\", \"edcba\")) # True\nprint(check_permutation(\"abc\", \"abcd\")) # False\nprint(check_permutation(\"abccd\", \"cdba\")) # True\n",
        "generated_testcode": "assert check_permutation(\"listen\", \"silent\") == True\n",
        "test": "assert check_permutation(\"abc\", \"cba\") == True\nassert check_permutation(\"test\", \"ttew\") == False\nassert check_permutation(\"xxyz\", \"yxzx\") == True",
        "canonical_solution": "def check_permutation(str1, str2):\r\n  n1=len(str1)\r\n  n2=len(str2)\r\n  if(n1!=n2):\r\n    return False\r\n  a=sorted(str1)\r\n  str1=\" \".join(a)\r\n  b=sorted(str2)\r\n  str2=\" \".join(b)\r\n  for i in range(0, n1, 1):\r\n    if(str1[i] != str2[i]):\r\n      return False\r\n  return True"
    },
    {
        "number": 533,
        "prompt": "Write a function to remove particular data type elements from the given tuple.\ndef remove_datatype(test_tuple, data_type):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    new_tuple = tuple(i for i in test_tuple if not isinstance(i, data_type))\n    return new_tuple\n\n\n# test the function\ntest_tuple = (1, \"hello\", 3.14, \"world\", True, 4, 7)\nprint(remove_datatype(test_tuple, str))\n# Output: (1, 3.14, True, 4)\n\ntest_tuple = (1, \"hello\", 3.14, \"world\", True, 4, 7)\nprint(remove_datatype(test_tuple, int))\n# Output: (\"hello\", \"world\", True)\n\ntest_tuple = (1, \"hello\", 3.14, \"world\", True, 4, 7)\nprint(remove_datatype(test_tuple, (int, float))\n# Output: (\"hello\", True)\n\ntest_tuple = (1, \"hello\", 3.14, \"world\", True, 4, 7)\nprint(remove_datatype(test_tuple, bool))\n# Output: (1, 3.14, \"hello\", 4) ",
        "generated_testcode": "assert remove_datatype((\"hello\", 123, 45.67, \"world\", True, 78, 90, \"python\", 34) == (123, 45.67, 78, 34)\n",
        "test": "assert remove_datatype((4, 5, 4, 7.7, 1.2), int) == [7.7, 1.2]\nassert remove_datatype((7, 8, 9, \"SR\"), str) == [7, 8, 9]\nassert remove_datatype((7, 1.1, 2, 2.2), float) == [7, 2]",
        "canonical_solution": "def remove_datatype(test_tuple, data_type):\r\n  res = []\r\n  for ele in test_tuple:\r\n    if not isinstance(ele, data_type):\r\n      res.append(ele)\r\n  return (res) "
    },
    {
        "number": 534,
        "prompt": "Write a function to search a literals string in a string and also find the location within the original string where the pattern occurs.\ndef search_literal(pattern,text):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    if pattern in text:\n        return True,text.index(pattern)\n    else:\n        return False, None\n\n# Testing the function with sample inputs\nprint(search_literal('python','The language Python is a high-level programming language')) # True, 16\nprint(search_literal('Java','The language Python is a high-level programming language')) # False, None\nprint(search_literal('Java','Python is an interpreted language')) # True, 0\nprint(search_literal('Python','Python is an interpreted language')) # True, 0\n\n# Edge cases\nprint(search_literal('','The language Python is a high-level programming language')) # True, 0\nprint(search_literal('Python','')) # False, None\nprint(search_literal('','')) # True, None\nprint(search_literal('',None) # True, None\n\n# Expected output:\n# (True, 16)\n# (False, None)\n# (True, 0)\n# (True, 0)\n# (True, 0)\n# (False, None)\n# (True, 0)\n# (False, None)\n# (True, 0)\n# (False, None)\n# (True, 0)\n# (True, 0)\n# (False, None)\n# (True, 0)\n# (False, None)\n# (True, 0)\n# (False, None)\n# (True, 0)",
        "generated_testcode": "assert search_literal(\"hello\",\"hello world\") == (True,0)\n",
        "test": "assert search_literal('python','python programming language')==(0,6)\nassert search_literal('programming','python programming language')==(7,18)\nassert search_literal('language','python programming language')==(19,27)",
        "canonical_solution": "import re\r\ndef search_literal(pattern,text):\r\n match = re.search(pattern, text)\r\n s = match.start()\r\n e = match.end()\r\n return (s, e)"
    },
    {
        "number": 535,
        "prompt": "Write a function to find the top or bottom surface area of a cylinder.\ndef topbottom_surfacearea(r):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    from math import pi\n    top_area = 2*pi*r**2\n    bottom_area = pi*r**2\n    return top_area, bottom_area\n\n# Test the function\nprint(topbottom_surfacearea(4)) # Output: (12.56, 12.56)\nprint(topbottom_surfacearea(10)) # Output: (124.17, 124.17)\nprint(topbottom_surfacearea(15)) # Output: (402.69, 402.69)\n",
        "generated_testcode": "assert topbottom_surfacearea(5) == 314.159875\n",
        "test": "assert topbottom_surfacearea(10)==314.15000000000003\nassert topbottom_surfacearea(5)==78.53750000000001\nassert topbottom_surfacearea(4)==50.264",
        "canonical_solution": "def topbottom_surfacearea(r):\r\n  toporbottomarea=3.1415*r*r\r\n  return toporbottomarea"
    },
    {
        "number": 536,
        "prompt": "Write a function to select the nth items of a list.\ndef nth_items(list,n):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    \"\"\"\n    Given a list and a number n, return a new list that contains the nth item of every sublist in the original list.\n    If there are less than n items in a sublist, return None for that sublist.\n    If the original list is empty, return an empty list.\n    \"\"\"\n    if not list:\n        return []\n    else:\n        return [sublist[n-1] if n <= len(sublist) else None for sublist in list]\n\n# Test cases\nprint(nth_items([[1,2,3], [4,5,6,7], [8,9], [10,11,12,13,14], [15,16], [17], []], 2)) # [2, 6, None, 12, 15, 16, None]\nprint(nth_items([[1,2,3], [4,5,6,7], [8,9], [10,11,12,13,14], [15,16], [17], []], 3)) # [3, None, None, None, 14, None, None]\nprint(nth_items([[1,2,3], [4,5,6,7], [8,9], [10,11,12,13,14], [15,16], [17], []], 4)) # [None, None, None, None, None, None,",
        "generated_testcode": "assert nth_items([1,2,3,4,5,6,7,8,9], 3) == [3, 6, 9]\n",
        "test": "assert nth_items([1, 2, 3, 4, 5, 6, 7, 8, 9],2)==[1, 3, 5, 7, 9] \nassert nth_items([10,15,19,17,16,18],3)==[10,17] \nassert nth_items([14,16,19,15,17],4)==[14,17]",
        "canonical_solution": "def nth_items(list,n):\r\n return list[::n]"
    },
    {
        "number": 537,
        "prompt": "Write a python function to find the first repeated word in a given string.\ndef first_repeated_word(str1):\n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    words = str1.split()\n    word_count = {}\n    for word in words:\n        if word in word_count:\n            word_count[word] += 1\n        else:\n            word_count[word] = 1\n    for word in word_count:\n        if word_count[word] > 1:\n            return word\n    return None\n\n# Test the function\nstr1 = \"I am meeting mr. kitty and mr. kitty\"\nprint(first_repeated_word(str1)) # Output: mr. kitty\n\nstr2 = \"I am meeting mr. kitty and mr. kitty and meeting\"\nprint(first_repeated_word(str2)) # Output: meeting\nstr3 = \"Python is a high-level programming language and I like Python\"\nprint(first_repeated_word(str3)) # Output: None\n",
        "generated_testcode": "assert first_repeated_word(\"hello world world world\") == \"world\"\n",
        "test": "assert first_repeated_word(\"ab ca bc ab\") == \"ab\"\nassert first_repeated_word(\"ab ca bc\") == 'None'\nassert first_repeated_word(\"ab ca bc ca ab bc\") == \"ca\"",
        "canonical_solution": "def first_repeated_word(str1):\r\n  temp = set()\r\n  for word in str1.split():\r\n    if word in temp:\r\n      return word;\r\n    else:\r\n      temp.add(word)\r\n  return 'None'"
    },
    {
        "number": 538,
        "prompt": "Write a python function to convert a given string list to a tuple.\ndef string_list_to_tuple(str1):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    tuple1 = tuple(str1)\n    return tuple1\n\n# Test the function with an example\nstr1 = ['apple', 'banana', 'orange', 'mango']\nprint(string_list_to_tuple(str1))\n\n\n# Output: ('apple', 'banana', 'orange', 'mango')\n\n\n# Write a python function to convert a given integer list to a tuple\ndef int_list_to_tuple(int1):\n    tuple2 = tuple(int1)\n    return tuple2\n\n# Test the function with an example\nint1 = [1, 2, 3, 4, 5, 6, 7]\nprint(int_list_to_tuple(int1))\n\n# Output: (1, 2, 3, 4, 5, 6, 7)\n\n\n# Write a python function to convert a given float list to a tuple\ndef float_list_to_tuple(float1):\n    tuple3 = tuple(float1)\n    return tuple3\n# Test the function with an example\nfloat1 = [2.5, 3.7, 4.1, 6.8, 7.2]\nprint(float_list_to_tuple(float1))\n# Output: (2.5, 3.7, 4.1, 6.8, 7.2)\n\n\n# Write a python function to convert a given list of mixed data types to a tuple\ndef mixed_list_to_tuple",
        "generated_testcode": "assert string_list_to_tuple([\"apple\", \"banana\", \"cherry\", \"orange\"]), (\"apple\", \"banana\", \"cherry\")\n",
        "test": "assert string_list_to_tuple((\"python 3.0\")) == ('p', 'y', 't', 'h', 'o', 'n', '3', '.', '0')\nassert string_list_to_tuple((\"bigdata\")) == ('b', 'i', 'g', 'd', 'a', 't', 'a')\nassert string_list_to_tuple((\"language\")) == ('l', 'a', 'n', 'g', 'u', 'a', 'g','e')",
        "canonical_solution": "def string_list_to_tuple(str1):\r\n    result = tuple(x for x in str1 if not x.isspace()) \r\n    return result"
    },
    {
        "number": 539,
        "prompt": "Write a function to create a list containing the power of said number in bases raised to the corresponding number in the index using map function.\ndef basesnum_coresspondingnum(bases_num,index):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    return list(map(lambda x: bases_num**x, index))\n\n#Example\nprint(basesnum_coresspondingnum(2, [1,2,3,4]))\n#Output [2, 4, 8]\nprint(basesnum_coresspondingnum(3, [1,2,3,4])\n#Output [3, 9, 27]\nprint(basesnum_coresspondingnum(4, [1,2,3,4])\n#Output [4, 16, 64] ",
        "generated_testcode": "assert list(map(lambda x: x**index, bases_num)) == basesnum_coresspondingnum(bases_num, index)\n\n",
        "test": "assert basesnum_coresspondingnum([10, 20, 30, 40, 50, 60, 70, 80, 90, 100],[1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[10, 400, 27000, 2560000, 312500000, 46656000000, 8235430000000, 1677721600000000, 387420489000000000, 100000000000000000000]\nassert basesnum_coresspondingnum([1, 2, 3, 4, 5, 6, 7],[10, 20, 30, 40, 50, 60, 70])==[1, 1048576, 205891132094649, 1208925819614629174706176, 88817841970012523233890533447265625, 48873677980689257489322752273774603865660850176, 143503601609868434285603076356671071740077383739246066639249]\nassert basesnum_coresspondingnum([4, 8, 12, 16, 20, 24, 28],[3, 6, 9, 12, 15, 18, 21])==[64, 262144, 5159780352, 281474976710656, 32768000000000000000, 6979147079584381377970176, 2456510688823056210273111113728]",
        "canonical_solution": "def basesnum_coresspondingnum(bases_num,index):\r\n  result = list(map(pow, bases_num, index))\r\n  return result"
    },
    {
        "number": 540,
        "prompt": "Write a python function to find the difference between highest and least frequencies in a given array.\ndef find_Diff(arr,n): \n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    if n<1:\n        return \"Invalid input\"\n    else:\n        freq = []\n        for i in range(0,n):\n            freq.append(arr.count(arr[i]))\n        return max(freq) - min(freq)\n\n#Test the function\narr = [1,2,3,4,5,6,6,6,6,7,8,8,8,8,9]\nn = len(arr)\nprint(find_Diff(arr,n))\n\n#Output: 2 ",
        "generated_testcode": "assert find_Diff([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20], 12) == 8\n",
        "test": "assert find_Diff([1,1,2,2,7,8,4,5,1,4],10) == 2\nassert find_Diff([1,7,9,2,3,3,1,3,3],9) == 3\nassert find_Diff([1,2,1,2],4) == 0",
        "canonical_solution": "def find_Diff(arr,n): \r\n    arr.sort()  \r\n    count = 0; max_count = 0; min_count = n \r\n    for i in range(0,(n-1)): \r\n        if arr[i] == arr[i + 1]: \r\n            count += 1\r\n            continue\r\n        else: \r\n            max_count = max(max_count,count) \r\n            min_count = min(min_count,count) \r\n            count = 0\r\n    return max_count - min_count "
    },
    {
        "number": 541,
        "prompt": "Write a function to find if the given number is abundant or not.\ndef get_sum(n): \n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    # function to find the sum of factors of a number\n    sum = 0\n    for i in range(1, n):\n        if n%i == 0:\n            sum += i\n    return sum\n\ndef is_abundant(n):\n    if n < 12:\n        return False\n    if get_sum(n) > n:\n        return True\n    else:\n        return False\n\n# Test cases\nprint(is_abundant(12)) # Output: True\nprint(is_abundant(24)) # Output: True\nprint(is_abundant(28)) # Output: False\nprint(is_abundant(30)) # Output: False\nprint(is_abundant(36)) # Output: True\n",
        "generated_testcode": "assert get_sum(12) == True\n",
        "test": "assert check_abundant(12) == True\nassert check_abundant(15) == False\nassert check_abundant(18) == True",
        "canonical_solution": "import math \r\ndef get_sum(n): \r\n\tsum = 0\r\n\ti = 1\r\n\twhile i <= (math.sqrt(n)): \r\n\t\tif n%i == 0: \r\n\t\t\tif n/i == i : \r\n\t\t\t\tsum = sum + i \r\n\t\t\telse: \r\n\t\t\t\tsum = sum + i \r\n\t\t\t\tsum = sum + (n / i ) \r\n\t\ti = i + 1\r\n\tsum = sum - n \r\n\treturn sum\r\ndef check_abundant(n): \r\n\tif (get_sum(n) > n): \r\n\t\treturn True\r\n\telse: \r\n\t\treturn False"
    },
    {
        "number": 542,
        "prompt": "Write a function to replace all occurrences of spaces, commas, or dots with a colon in the given string by using regex.\ndef fill_spaces(text):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    import re\n    return re.sub(r'[ ,.]', ':', text)\n\n# Example usage:\ntext = 'Hello, how are you today?'\nresult = fill_spaces(text)\nprint(result) # Output: Hello:how:are:you:today:\n\ntext = 'I have a cat, a dog, and a car.'\nresult = fill_spaces(text)\nprint(result) # Output: I have a cat:a:dog:and:a:car:\n\ntext = 'This is a sentence.'\nresult = fill_spaces(text)\nprint(result) # Output: This:is:a:sentence:\n\n# Note: The input string will always have at least one character. ",
        "generated_testcode": "assert fill_spaces(\"Hello, world!\") == \"Hello:world:\"\n",
        "test": "assert fill_spaces('Boult Curve Wireless Neckband') == 'Boult:Curve:Wireless:Neckband'\nassert fill_spaces('Stereo Sound Sweatproof') == 'Stereo:Sound:Sweatproof'\nassert fill_spaces('Probass Curve Audio') == 'Probass:Curve:Audio'",
        "canonical_solution": "import re\r\ndef fill_spaces(text):\r\n  return (re.sub(\"[ ,.]\", \":\", text))"
    },
    {
        "number": 543,
        "prompt": "Write a function to add two numbers and print number of digits of sum.\ndef count_digits(num1,num2):\n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    # Your code here\n    sum = num1 + num2\n    count = 0\n    while(sum!=0):\n        count+=1\n        sum //= 10\n    return count\n\n# Test the function\nprint(count_digits(123,234)) # should print 3\nprint(count_digits(999,1)) # should print 2\nprint(count_digits(12345,6789)) # should print 4\nprint(count_digits(0,0)) # should print 1\nprint(count_digits(12345,99999)) # should print 4\n",
        "generated_testcode": "assert count_digits(123,456) == 3\n",
        "test": "assert count_digits(9875,10)==(4)\nassert count_digits(98759853034,100)==(11)\nassert count_digits(1234567,500)==(7)",
        "canonical_solution": "def count_digits(num1,num2):\r\n    number=num1+num2\r\n    count = 0\r\n    while(number > 0):\r\n        number = number // 10\r\n        count = count + 1\r\n    return count"
    },
    {
        "number": 544,
        "prompt": "Write a function to flatten the tuple list to a string.\ndef flatten_tuple(test_list):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    string = \"\"\n    for i in test_list:\n        if type(i) == tuple:\n            string += flatten_tuple(i)\n        else:\n            string += str(i)\n    return string\n\n# Test cases\nprint(flatten_tuple((1, (2, (3, 4, 5, (6, 7)), 8, 9))) == \"123456789\")\nprint(flatten_tuple((1, (2, (3, (4, 5, (6, 7, (8, 9)), 10), 11), 12)) == \"12345678910111\")\nprint(flatten_tuple((1, 2, (3, (4, (5, (6, (7, 8, (9, 10, (11, 12, 13)), 14), 15), 16), 17, (18, 19))) == \"12345678910111213141516171819\")\nprint(flatten_tuple((1, (2, 3, 4)) == \"1234\")\nprint(flatten_tuple((1, (2, 3, (4, ())) == \"123\"\nprint(flatten_tuple((1, (2, 3)) == \"123\"\nprint(flatten",
        "generated_testcode": "assert flatten_tuple(()) == \"\"\n",
        "test": "assert flatten_tuple([('1', '4', '6'), ('5', '8'), ('2', '9'), ('1', '10')]) == '1 4 6 5 8 2 9 1 10'\nassert flatten_tuple([('2', '3', '4'), ('6', '9'), ('3', '2'), ('2', '11')]) == '2 3 4 6 9 3 2 2 11'\nassert flatten_tuple([('14', '21', '9'), ('24', '19'), ('12', '29'), ('23', '17')]) == '14 21 9 24 19 12 29 23 17'",
        "canonical_solution": "def flatten_tuple(test_list):\r\n  res = ' '.join([idx for tup in test_list for idx in tup])\r\n  return (res) "
    },
    {
        "number": 545,
        "prompt": "Write a python function to toggle only first and last bits of a given number.\ndef take_L_and_F_set_bits(n) : \n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    n = bin(n)[2:].zfill(32)\n    n = list(n)\n    if n[0] == '0' :\n        n[0] = '1'\n    else :\n        n[0] = '0'\n    if n[-1] == '0':\n        n[-1] = '1'\n    else :\n        n[-1] = '0'\n    return int(''.join(n),2)\n\n\n# Test the function\nprint(take_L_and_F_set_bits(23))\nprint(take_L_and_F_set_bits(24))\nprint(take_L_and_F_set_bits(42))\nprint(take_L_and_F_set_bits(0))\nprint(take_L_and_F_set_bits(1))\nprint(take_L_and_F_set_bits(15))\nprint(take_L_and_F_set_bits(100))\nprint(take_L_and_F_set_bits(21))\n\n# Output\n# 100111\n# 11010\n# 101010\n# 0\n# 11\n# 1101111\n# 11010010",
        "generated_testcode": "assert take_L_and_F_set_bits(10) == 5\n",
        "test": "assert toggle_F_and_L_bits(10) == 3\nassert toggle_F_and_L_bits(15) == 6\nassert toggle_F_and_L_bits(20) == 5",
        "canonical_solution": "def take_L_and_F_set_bits(n) : \r\n    n = n | n >> 1\r\n    n = n | n >> 2\r\n    n = n | n >> 4\r\n    n = n | n >> 8\r\n    n = n | n >> 16 \r\n    return ((n + 1) >> 1) + 1      \r\ndef toggle_F_and_L_bits(n) :  \r\n    if (n == 1) : \r\n        return 0 \r\n    return n ^ take_L_and_F_set_bits(n) "
    },
    {
        "number": 546,
        "prompt": "Write a function to find the last occurrence of a character in a string.\ndef last_occurence_char(string,char):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": true,
        "answer": "    index = -1\n    for i in range(len(string)-1, -1, -1):\n        if string[i] == char:\n            index = i\n            break\n    return index\n\n\n#Test the function\nprint(last_occurence_char(\"hello world\",\"o\"))\nprint(last_occurence_char(\"hello world\",\"w\"))\nprint(last_occurence_char(\"hello world\",\"z\"))\nprint(last_occurence_char(\"hello world\",\"h\"))\nprint(last_occurence_char(\"hello world\",\" \"))\n\n\n#Alternate solution:\ndef last_occurence_char(string,char):\n    return string.rfind(char)\n\n\n#Test the function\nprint(last_occurence_char(\"hello world\",\"o\"))\nprint(last_occurence_char(\"hello world\",\"w\"))\nprint(last_occurence_char(\"hello world\",\"z\"))\nprint(last_occurence_char(\"hello world\",\"h\"))\nprint(last_occurence_char(\"hello world\",\" \"))\n",
        "generated_testcode": "assert last_occurence_char(\"hello world\", \"l\") == 9\n",
        "test": "assert last_occurence_char(\"hello world\",'l')==10\nassert last_occurence_char(\"language\",'g')==7\nassert last_occurence_char(\"little\",'y')==None",
        "canonical_solution": "def last_occurence_char(string,char):\r\n flag = -1\r\n for i in range(len(string)):\r\n     if(string[i] == char):\r\n         flag = i\r\n if(flag == -1):\r\n    return None\r\n else:\r\n    return flag + 1"
    },
    {
        "number": 547,
        "prompt": "Write a python function to find the sum of hamming distances of all consecutive numbers from o to n.\ndef Total_Hamming_Distance(n):   \n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    count = 0\n    for i in range(n+1):\n        count += len(bin(i)[2:].replace('0','1').replace('1','0'))\n    return count\n\nn = int(input(\"Enter a number: \"))\nprint(Total_Hamming_Distance(n)) ",
        "generated_testcode": "assert Total_Hamming_Distance(10) == 10, \"Test case 1 failed\"\n",
        "test": "assert Total_Hamming_Distance(4) == 7\nassert Total_Hamming_Distance(2) == 3\nassert Total_Hamming_Distance(5) == 8",
        "canonical_solution": "def Total_Hamming_Distance(n):   \r\n    i = 1\r\n    sum = 0\r\n    while (n // i > 0):  \r\n        sum = sum + n // i  \r\n        i = i * 2     \r\n    return sum"
    },
    {
        "number": 548,
        "prompt": "Write a function to find the length of the longest increasing subsequence of the given sequence.\ndef longest_increasing_subsequence(arr): \n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    if len(arr) == 0:\n        return 0\n    \n    n = len(arr)\n    dp = [1] * n\n    \n    for i in range(1, n): \n        for j in range(i): \n            if arr[i] > arr[j]: \n                dp[i] = max(dp[i], dp[j]+1) \n                \n    return max(dp) ",
        "generated_testcode": "assert longest_increasing_subsequence([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20] ) == 10\n",
        "test": "assert longest_increasing_subsequence([10, 22, 9, 33, 21, 50, 41, 60]) == 5\nassert longest_increasing_subsequence([3, 10, 2, 1, 20]) == 3\nassert longest_increasing_subsequence([50, 3, 10, 7, 40, 80]) == 4 ",
        "canonical_solution": "def longest_increasing_subsequence(arr): \r\n\tn = len(arr) \r\n\tlongest_increasing_subsequence = [1]*n \r\n\tfor i in range (1 , n): \r\n\t\tfor j in range(0 , i): \r\n\t\t\tif arr[i] > arr[j] and longest_increasing_subsequence[i]< longest_increasing_subsequence[j] + 1 : \r\n\t\t\t\tlongest_increasing_subsequence[i] = longest_increasing_subsequence[j]+1\r\n\tmaximum = 0\r\n\tfor i in range(n): \r\n\t\tmaximum = max(maximum , longest_increasing_subsequence[i]) \r\n\treturn maximum"
    },
    {
        "number": 549,
        "prompt": "Write a python function to find the sum of fifth power of first n odd natural numbers.\ndef odd_Num_Sum(n) : \n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    i = 1\n    sum = 0\n    while n > 0 :\n        sum += i ** 5\n        i += 2\n        n -= 1\n    return sum\n\n# Test the function\nprint(odd_Num_Sum(10))\nprint(odd_Num_Sum(5))\nprint(odd_Num_Sum(3))\nprint(odd_Num_Sum(1))",
        "generated_testcode": "assert odd_Num_Sum(5) == 225\n",
        "test": "assert odd_Num_Sum(1) == 1\nassert odd_Num_Sum(2) == 244\nassert odd_Num_Sum(3) == 3369",
        "canonical_solution": "def odd_Num_Sum(n) : \r\n    j = 0\r\n    sm = 0\r\n    for i in range(1,n+1) : \r\n        j = (2*i-1) \r\n        sm = sm + (j*j*j*j*j)     \r\n    return sm "
    },
    {
        "number": 550,
        "prompt": "Write a python function to find the maximum element in a sorted and rotated array.\ndef find_Max(arr,low,high): \n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    if high < low: \n        return arr[low] \n    if high == low: \n        return arr[low] \n    if high == low+1: \n        return max(arr[low], arr[high]) \n    if arr[low] > arr[high]: \n        return arr[low] \n    mid = (low + high) // 2\n    if arr[mid] > arr[high]: \n        return find_Max(arr, low, mid-1) \n    else: \n        return find_Max(arr, mid+1, high) \n  \n  \ndef max_element_in_sorted_and_rotated_array(arr): \n    n = len(arr) \n    return find_Max(arr, 0, n-1) \n  \n# Driver code \narr = [7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 1] \nn = len(arr) \nprint(\"The maximum element is:\", max_element_in_sorted_and_rotated_array(arr)) ",
        "generated_testcode": "assert find_Max([4,5,6,7,8,9,10,1,2,3],0,5) == 10\n",
        "test": "assert find_Max([2,3,5,6,9],0,4) == 9\nassert find_Max([3,4,5,2,1],0,4) == 5\nassert find_Max([1,2,3],0,2) == 3",
        "canonical_solution": "def find_Max(arr,low,high): \r\n    if (high < low): \r\n        return arr[0] \r\n    if (high == low): \r\n        return arr[low] \r\n    mid = low + (high - low) // 2 \r\n    if (mid < high and arr[mid + 1] < arr[mid]): \r\n        return arr[mid] \r\n    if (mid > low and arr[mid] < arr[mid - 1]): \r\n        return arr[mid - 1]  \r\n    if (arr[low] > arr[mid]): \r\n        return find_Max(arr,low,mid - 1) \r\n    else: \r\n        return find_Max(arr,mid + 1,high) "
    },
    {
        "number": 551,
        "prompt": "Write a function to extract a specified column from a given nested list.\ndef extract_column(list1, n):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    result = []\n    for sublist in list1:\n        result.append(sublist[n])\n    return result\n\n# Test the function\nnested_list = [[1, 2, 3, 4], [5, 6, 7], [8, 9, 10], [11, 12, 13]]\nprint(extract_column(nested_list, 1)) # Should print [2, 6, 9, 12]\nprint(extract_column(nested_list, 2)) # Should print [3, 7, 10]\nprint(extract_column(nested_list, 0)) # Should print [1, 5, 8, 11]\nprint(extract_column(nested_list, 3)) # Should print [4, 7, 13]\n",
        "generated_testcode": "assert extract_column([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 1) == [2, 5, 8]\n",
        "test": "assert extract_column([[1, 2, 3], [2, 4, 5], [1, 1, 1]],0)==[1, 2, 1]\nassert extract_column([[1, 2, 3], [-2, 4, -5], [1, -1, 1]],2)==[3, -5, 1]\nassert extract_column([[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]],0)==[1, 5, 1, 13, 5, 9]",
        "canonical_solution": "def extract_column(list1, n):\r\n   result = [i.pop(n) for i in list1]\r\n   return result "
    },
    {
        "number": 552,
        "prompt": "Write a python function to check whether a given sequence is linear or not.\ndef Seq_Linear(seq_nums):\n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    \"\"\"\n    :param seq_nums: list of integers\n    :return: True if the sequence is linear, False otherwise\n    \"\"\"\n    # your code starts here\n    n = len(seq_nums)\n    diff = [seq_nums[i] - seq_nums[i-1] for i in range(1, n)]\n    set_diff = set(diff)\n    if len(set_diff) == 1:\n        return True\n    else:\n        return False\n    \n# Example usage:\nseq_nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nprint(Seq_Linear(seq_nums))  # Output: True\n\nseq_nums = [1, 3, 5, 7, 9, 11, 13, 15]\nprint(Seq_Linear(seq_nums))  # Output: True\n\nseq_nums = [1, 2, 4, 7, 8, 11, 13]\nprint(Seq_Linear(seq_nums))  # Output: False\n\nseq_nums = [1, 2, 4, 6, 8, 10, 12]\nprint(Seq_Linear(seq_nums))  # Output: False\n\nseq_nums = [1, 3, 6, 9, 12, 15]\nprint",
        "generated_testcode": "assert Seq_Linear([1,2,3,4,5,6,7,8,9]) == True\n",
        "test": "assert Seq_Linear([0,2,4,6,8,10]) == \"Linear Sequence\"\nassert Seq_Linear([1,2,3]) == \"Linear Sequence\"\nassert Seq_Linear([1,5,2]) == \"Non Linear Sequence\"",
        "canonical_solution": "def Seq_Linear(seq_nums):\r\n  seq_nums = [seq_nums[x] - seq_nums[x-1] for x in range(1, len(seq_nums))]\r\n  if len(set(seq_nums)) == 1: \r\n    return \"Linear Sequence\"\r\n  else:\r\n    return \"Non Linear Sequence\""
    },
    {
        "number": 553,
        "prompt": "Write a function to convert the given tuple to a floating-point number.\ndef tuple_to_float(test_tup):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    flt = 0\n    for i in test_tup:\n        flt = flt * 10 + i\n    return flt\n\n\n# Test the function with the given test case\nprint(tuple_to_float((1, 2, 3, 4, 5, 6))  # Output: 123.456\nprint(tuple_to_float((1, 2, 3, 4, 3))   # Output: 123.3\nprint(tuple_to_float((1, 2, 3))      # Output: 12.3",
        "generated_testcode": "assert tuple_to_float((1, 2, 3, 4, 5, 6) == 1.23456\n",
        "test": "assert tuple_to_float((4, 56)) == 4.56\nassert tuple_to_float((7, 256)) == 7.256\nassert tuple_to_float((8, 123)) == 8.123",
        "canonical_solution": "def tuple_to_float(test_tup):\r\n  res = float('.'.join(str(ele) for ele in test_tup))\r\n  return (res) "
    },
    {
        "number": 554,
        "prompt": "Write a python function to find odd numbers from a mixed list.\ndef Split(list): \n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    odd = []\n    even = []\n    for i in list:\n        if i % 2 == 0:\n            even.append(i)\n        else:\n            odd.append(i)\n    return odd, even\n\n# Test the function with the following list\nmixed_list = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]\nodd, even = Split(mixed_list)\nprint(\"Odd numbers:\", odd)\nprint(\"Even numbers:\", even)\n\n# Output: Odd numbers: [1, 3, 5, 7, 9, 11, 13, 15]\n#        Even numbers: [2, 4, 6, 8, 10, 12, 14]\n\n\n# Write a python function to find sum of numbers from a list\ndef sum_numbers(nums):\n    return sum(nums)\n\n# Test the function with the following list\nnumbers = [1,2,3,4,5,6,7,8,9,10]\nprint(\"Sum of numbers:\", sum_numbers(numbers))\n# Output: Sum of numbers: 30 ",
        "generated_testcode": "assert Split([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20] ) == [1,3,5,7,9,11,13,15,17,19]\n",
        "test": "assert Split([1,2,3,4,5,6]) == [1,3,5]\nassert Split([10,11,12,13]) == [11,13]\nassert Split([7,8,9,1]) == [7,9,1]",
        "canonical_solution": "def Split(list): \r\n    od_li = [] \r\n    for i in list: \r\n        if (i % 2 != 0): \r\n            od_li.append(i)  \r\n    return od_li"
    },
    {
        "number": 555,
        "prompt": "Write a python function to find the difference between sum of cubes of first n natural numbers and the sum of first n natural numbers.\ndef difference(n) :  \n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    # initialize sum of cubes of first n natural numbers and sum of first n natural numbers\n    sum_cubes = 0\n    sum_numbers = 0\n    # calculate the sum of cubes of first n natural numbers\n    for i in range(1, n+1) :\n        sum_cubes += i**3\n    # calculate the sum of first n natural numbers\n    for i in range(1, n+1) :\n        sum_numbers += i\n    return abs(sum_cubes - sum_numbers)\n\n# test the function\nprint(difference(10)) # Output : 36400\nprint(difference(15)) # Output : 36425\nprint(difference(20)) # Output : 74015\n\n# Explanation: \n# The function takes an integer n as input and calculates the sum of cubes of first n natural numbers and the sum of first n natural numbers. \n# It then subtracts the sum of cubes from the sum of numbers and returns the absolute value of the result. \n# For example, the sum of cubes of first 10 natural numbers is 1^3 + 2^3 + 3^3 + ... + 10^3 = 1*10 + 2*8 + 3*27 + 4*64 + 5*125 + 6*216 + 7*343 + 8*512 + 9*729 + ",
        "generated_testcode": "assert difference(5) == 125 - 5*5 = 120\n",
        "test": "assert difference(3) == 30\nassert difference(5) == 210\nassert difference(2) == 6",
        "canonical_solution": "def difference(n) :  \r\n    S = (n*(n + 1))//2;  \r\n    res = S*(S-1);  \r\n    return res;  "
    },
    {
        "number": 556,
        "prompt": "Write a python function to count the pairs with xor as an odd number.\ndef find_Odd_Pair(A,N) : \n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    count = 0\n    for i in range(N) : \n        for j in range(i + 1, N) : \n            if (A[i] ^ A[j]) % 2 != 0 : \n                count += 1\n    return count \n  \n# Driver Code \nA = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] \nN = len(A) \nprint(find_Odd_Pair(A, N))\n\n\n# Output: 4 ",
        "generated_testcode": "assert find_Odd_Pair([1,2,3,4,5,6,7,8,9], 3) == 4\n",
        "test": "assert find_Odd_Pair([5,4,7,2,1],5) == 6\nassert find_Odd_Pair([7,2,8,1,0,5,11],7) == 12\nassert find_Odd_Pair([1,2,3],3) == 2",
        "canonical_solution": "def find_Odd_Pair(A,N) : \r\n    oddPair = 0\r\n    for i in range(0,N) :  \r\n        for j in range(i+1,N) :  \r\n            if ((A[i] ^ A[j]) % 2 != 0):  \r\n                oddPair+=1  \r\n    return oddPair  "
    },
    {
        "number": 557,
        "prompt": "Write a function to toggle characters case in a string.\ndef toggle_string(string):\n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    result = \"\"\n    for char in string:\n        if char.isupper():\n            result += char.lower()\n        else:\n            result += char.upper()\n    return result\n\n# Test cases\nprint(toggle_string(\"Hello World!\")) # Output: hELLO wORLD!\nprint(toggle_string(\"Python is awesome!\")) # Output: pYTHON IS AWESOME!\nprint(toggle_string(\"12345\")) # Output: 12345\nprint(toggle_string(\"\")) # Output: ",
        "generated_testcode": "assert toggle_string(\"Hello World\") == \"hELLO wORLD\"\n",
        "test": "assert toggle_string(\"Python\")==(\"pYTHON\")\nassert toggle_string(\"Pangram\")==(\"pANGRAM\")\nassert toggle_string(\"LIttLE\")==(\"liTTle\")",
        "canonical_solution": "def toggle_string(string):\r\n string1 = string.swapcase()\r\n return string1"
    },
    {
        "number": 558,
        "prompt": "Write a python function to find the digit distance between two integers.\ndef digit_distance_nums(n1, n2):\n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    if n1 == n2:\n        return 0\n    elif n1 > n2:\n        n1, n2 = n2, n1\n    diff = n2 - n1\n    digits_diff = 0\n    while diff > 0:\n        digits_diff += 1\n        diff //= 10\n    return digits_diff\n\nprint(digit_distance_nums(1234, 567))  # 3\nprint(digit_distance_nums(9876, 54321)) # 5\nprint(digit_distance_nums(1234, 765)) # 3\nprint(digit_distance_nums(1234, 12345)) # 4",
        "generated_testcode": "assert digit_distance_nums(1234, 456) == 3\n",
        "test": "assert digit_distance_nums(1,2) == 1\nassert digit_distance_nums(23,56) == 6\nassert digit_distance_nums(123,256) == 7",
        "canonical_solution": "def digit_distance_nums(n1, n2):\r\n         return sum(map(int,str(abs(n1-n2))))"
    },
    {
        "number": 559,
        "prompt": "Write a function to find the largest sum of contiguous subarray in the given array.\ndef max_sub_array_sum(a, size):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    max_so_far = a[0]\n    max_ending_here = a[0]\n\n    for i in range(1, size):\n        max_ending_here = max(a[i], max_ending_here + a[i])\n        max_so_far = max(max_so_far, max_ending_here)\n\n    return max_so_far\n\n# Test cases\na = [-2, -3, 4, -1, -2, 1, 5, -3, 2]\nprint(max_sub_array_sum(a, len(a)))\n# Output: 7\n\na = [-2, -3, 4, -1, -2, 10, -3, 2]\nprint(max_sub_array_sum(a, len(a)))\n# Output: 10\n\na = [1, 2, 3, 4, -5, 6, 7, -8, 9, 10, -11, 12, 13]\nprint(max_sub_array_sum(a, len(a))\n# Output: 42\n\na = [-1, -2, -3, -4, -5]\nprint(max_sub_array_sum(a, len(a))\n# Output: -1\n\na = [1, 2, 3, -4, 5, -2, 6, 7, -8, 9, -1",
        "generated_testcode": "assert max_sub_array_sum([1, -2, 3, 10, -5, 6, -2, 7, 8, -1], 6) == 18\n",
        "test": "assert max_sub_array_sum([-2, -3, 4, -1, -2, 1, 5, -3], 8) == 7\nassert max_sub_array_sum([-3, -4, 5, -2, -3, 2, 6, -4], 8) == 8\nassert max_sub_array_sum([-4, -5, 6, -3, -4, 3, 7, -5], 8) == 10",
        "canonical_solution": "def max_sub_array_sum(a, size):\r\n  max_so_far = 0\r\n  max_ending_here = 0\r\n  for i in range(0, size):\r\n    max_ending_here = max_ending_here + a[i]\r\n    if max_ending_here < 0:\r\n      max_ending_here = 0\r\n    elif (max_so_far < max_ending_here):\r\n      max_so_far = max_ending_here\r\n  return max_so_far"
    },
    {
        "number": 560,
        "prompt": "Write a function to find the union of elements of the given tuples.\ndef union_elements(test_tup1, test_tup2):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    result = set()\n    for i in test_tup1:\n        if i not in test_tup2:\n            result.add(i)\n    for j in test_tup2:\n        if j not in test_tup1:\n            result.add(j)\n    return tuple(result)\n\n\n# Test the function with the given test cases\nprint(union_elements((1, 2, 3, 4, 5, 6), (2, 4, 6, 8, 10)) == (1, 3, 5, 8, 10))\nprint(union_elements(('hello', 'world', 'python', 'code'), ('world', 'java', 'kotlin', 'c++')) == ('hello', 'python', 'code', 'java', 'kotlin', 'c++'))\nprint(union_elements((1, 2, 'a', 'b', 3, 'c'), (2, 3, 4, 'd', 'e')) == (1, 'a', 'b', 4, 'c', 'd', 'e'))\nprint(union_elements((), ()) == ()\n",
        "generated_testcode": "assert union_elements((1,2,3,4,5), (3,4,5,6,7)) == (1,2,3,4,5,6,7)\n",
        "test": "assert union_elements((3, 4, 5, 6),(5, 7, 4, 10) ) == (3, 4, 5, 6, 7, 10)\nassert union_elements((1, 2, 3, 4),(3, 4, 5, 6) ) == (1, 2, 3, 4, 5, 6)\nassert union_elements((11, 12, 13, 14),(13, 15, 16, 17) ) == (11, 12, 13, 14, 15, 16, 17)",
        "canonical_solution": "def union_elements(test_tup1, test_tup2):\r\n  res = tuple(set(test_tup1 + test_tup2))\r\n  return (res) "
    },
    {
        "number": 561,
        "prompt": "Write a function to assign with each element, its pair elements from other similar pairs in the given tuple.\ndef assign_elements(test_list):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    # Create a dictionary to store the elements and their similar pairs\n    similar_pairs = {}\n    for pair in test_list:\n        for element in pair:\n            if element not in similar_pairs:\n                similar_pairs[element] = set()\n            for element2 in pair:\n                if element != element2:\n                    similar_pairs[element].add(element2)\n    # Create a dictionary to store the elements and their assigned pairs\n    assigned_pairs = {}\n    for element in similar_pairs:\n        assigned_pairs[element] = None\n    # Loop through each element\n    for element in similar_pairs:\n        # Find a pair for the element that is not assigned yet\n        for assigned_element in assigned_pairs:\n            if assigned_pairs[assigned_element] == None:\n                pair = element\n                # Find the first pair that is not assigned and has a common element with the element\n                for potential_pair in similar_pairs[element]:\n                    if potential_pair not in assigned_pairs.values():\n                        assigned_pairs[pair] = potential_pair\n                        assigned_pairs[potential_pair] = pair\n                        break\n                # If no suitable pair is found, continue to the next element\n                if assigned_pairs[pair] == None:\n                    continue\n                break\n    # Return the assigned pairs as a tuple of tuples\n    return tuple(tuple(sorted(pair) for pair in assigned_pairs.items())\n",
        "generated_testcode": "assert assign_elements(('a', 'b', 'c', 'd', 'e', 'f', 'g') == {'a': ['b', 'c', 'e', 'f'], 'b': ['a', 'c', 'd'], 'c': ['a', 'b', 'd', 'e'], 'd': ['b', 'c', 'e', 'f'], 'e': ['a', 'c', 'd', 'f'], 'f': ['a', 'd', 'g']}\n\n# Test case 2\n",
        "test": "assert assign_elements([(5, 3), (7, 5), (2, 7), (3, 8), (8, 4)] ) == {3: [8], 5: [3], 7: [5], 2: [7], 8: [4], 4: []}\nassert assign_elements([(6, 4), (9, 4), (3, 8), (4, 9), (9, 5)] ) == {4: [9], 6: [4], 9: [4, 5], 8: [], 3: [8], 5: []}\nassert assign_elements([(6, 2), (6, 8), (4, 9), (4, 9), (3, 7)] ) == {2: [], 6: [2, 8], 8: [], 9: [], 4: [9, 9], 7: [], 3: [7]}",
        "canonical_solution": "def assign_elements(test_list):\r\n  res = dict()\r\n  for key, val in test_list:\r\n    res.setdefault(val, [])\r\n    res.setdefault(key, []).append(val)\r\n  return (res) "
    },
    {
        "number": 562,
        "prompt": "Write a python function to find the maximum length of sublist.\ndef Find_Max_Length(lst):  \n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    max_length = 0\n    for i in range(len(lst)):\n        current_length = 1\n        for j in range(i+1, len(lst)):\n            if lst[j] == lst[i]:\n                current_length += 1\n            else:\n                break\n        max_length = max(max_length, current_length)\n    return max_length\n\n\n# Test the function\nlst = [1, 2, 2, 3, 3, 3, 3, 4, 5, 5, 5, 6, 6, 7, 7, 7, 7, 7, 7]\nprint(Find_Max_Length(lst))\n\n\n# Output: 4\n# Explanation: The sublist [3, 3, 3] and [7, 7, 7, 7, 7] have the maximum length of 4. ",
        "generated_testcode": "assert Find_Max_Length([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20] ) == 10\n",
        "test": "assert Find_Max_Length([[1],[1,4],[5,6,7,8]]) == 4\nassert Find_Max_Length([[0,1],[2,2,],[3,2,1]]) == 3\nassert Find_Max_Length([[7],[22,23],[13,14,15],[10,20,30,40,50]]) == 5",
        "canonical_solution": "def Find_Max_Length(lst):  \r\n    maxLength = max(len(x) for x in lst )\r\n    return maxLength "
    },
    {
        "number": 563,
        "prompt": "Write a function to extract values between quotation marks of a string.\ndef extract_values(text):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    result = []\n    current = \"\"\n    inside_quotes = False\n    for char in text:\n        if char == \"\\\"\":\n            inside_quotes = not inside_quotes\n            if inside_quotes:\n                result.append(current)\n                current = \"\"\n            continue\n        if inside_quotes:\n            current += char\n    return result\n\n# Test the function\ntext = \"\\\"hello\\\" \\\"world\\\" \\\"python\\\" \\\"programming\\\"\"\nprint(extract_values(text)) # Output: ['hello', 'world', 'python']\n\ntext = \"\\\"hello\\\" \\\"world\\\" \\\"python\\\" \\\"programming\\\" \\\"\\\"\"\nprint(extract_values(text)) # Output: ['hello', 'world', 'python', '']",
        "generated_testcode": "assert extract_values('Hello \"world\"') == ['world']\n",
        "test": "assert extract_values('\"Python\", \"PHP\", \"Java\"')==['Python', 'PHP', 'Java']\nassert extract_values('\"python\",\"program\",\"language\"')==['python','program','language']\nassert extract_values('\"red\",\"blue\",\"green\",\"yellow\"')==['red','blue','green','yellow']",
        "canonical_solution": "import re\r\ndef extract_values(text):\r\n return (re.findall(r'\"(.*?)\"', text))"
    },
    {
        "number": 564,
        "prompt": "Write a python function to count unequal element pairs from the given array.\ndef count_Pairs(arr,n): \n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    count=0\n    for i in range(n):\n        for j in range(i+1,n):\n            if arr[i]!=arr[j]:\n                count+=1\n    return count\n\n#Test the function\narr = [1,2,3,3,4,5,5,6,6,7,8,8,9]\nn = len(arr)\nprint(count_Pairs(arr,n))\n# Output: 6\n\n\n#Test the function\narr = [1,1,1,1,1,1,1,1]\nn = len(arr)\nprint(count_Pairs(arr,n))\n# Output: 0\n\n#Test the function\narr = [1,2,3,4,5,6,7,8,9,1,2,3,4]\nn = len(arr)\nprint(count_Pairs(arr,n))\n# Output: 6\n\n#Test the function\narr = [1,2,3,4,5,6,7,8,9]\nn = len(arr)\nprint(count_Pairs(arr,n))\n# Output: 4\n#Time Complexity: O(n^2)\n#Space Complexity: O(1)\n",
        "generated_testcode": "assert count_Pairs([1,2,3,4,5,6,7,8,9],6) == 21\n",
        "test": "assert count_Pairs([1,2,1],3) == 2\nassert count_Pairs([1,1,1,1],4) == 0\nassert count_Pairs([1,2,3,4,5],5) == 10",
        "canonical_solution": "def count_Pairs(arr,n): \r\n    cnt = 0; \r\n    for i in range(n): \r\n        for j in range(i + 1,n): \r\n            if (arr[i] != arr[j]): \r\n                cnt += 1; \r\n    return cnt; "
    },
    {
        "number": 565,
        "prompt": "Write a python function to split a string into characters.\ndef split(word): \n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    word = list(word)\n    return word\n\n# Test the function with an example string\nprint(split(\"hello\")) ",
        "generated_testcode": "assert split(\"hello\") == ['h', 'e', 'l', 'l', 'o']\n",
        "test": "assert split('python') == ['p','y','t','h','o','n']\nassert split('Name') == ['N','a','m','e']\nassert split('program') == ['p','r','o','g','r','a','m']",
        "canonical_solution": "def split(word): \r\n    return [char for char in word] "
    },
    {
        "number": 566,
        "prompt": "Write a function to get the sum of a non-negative integer.\ndef sum_digits(n):\n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    # Function to get the sum of digits of a non-negative integer\n    total = 0\n    while n > 0:\n        total += n % 10\n        n //= 10\n    return total\n\n# Test the function\nprint(sum_digits(123))  # Output: 6\nprint(sum_digits(456))  # Output: 15\nprint(sum_digits(789))  # Output: 24\n\n\n# The function works fine, but it's not very Pythonic. Can we improve it?\n\n\n# Another way to do it is to use the built-in `sum` function and a list comprehension\n\ndef sum_digits(n):\n    return sum(int(digit) for digit in str(n))\n\n\n# Test the function\nprint(sum_digits(123))  # Output: 6\nprint(sum_digits(456))  # Output: 15\nprint(sum_digits(789))  # Output: 24\n\n# The `sum` function can directly sum up the digits of a number represented as a string, without the need for a loop\n",
        "generated_testcode": "assert sum_digits(123) == 6\n",
        "test": "assert sum_digits(345)==12\nassert sum_digits(12)==3\nassert sum_digits(97)==16",
        "canonical_solution": "def sum_digits(n):\r\n  if n == 0:\r\n    return 0\r\n  else:\r\n    return n % 10 + sum_digits(int(n / 10))"
    },
    {
        "number": 567,
        "prompt": "Write a function to check whether a specified list is sorted or not.\ndef issort_list(list1):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": true,
        "answer": "    sorted_list = True\n    for i in range(len(list1) - 1):\n        if list1[i] > list1[i + 1]:\n            sorted_list = False\n            break\n    return sorted_list\n\n\n# Example usage:\nmy_list = [1, 2, 3, 4, 5, 6, 7, 8, 9]\nprint(issort_list(my_list))  # Output: True\n\nmy_list = [1, 2, 4, 3, 5, 6, 7, 8, 9]\nprint(issort_list(my_list))  # Output: False\n\n\n# Function to check whether a specified list is sorted or not\ndef issort_list(list1):\n    sorted_list = True\n    for i in range(len(list1) - 1):\n        if list1[i] > list1[i + 1]:\n            sorted_list = False\n            break\n    return sorted_list\n\n\n# Example usage:\nmy_list = [1, 2, 3, 4, 5, 6, 7, 8, 9]\nprint(issort_list(my_list))  # Output: True\nmy_list = [1, 2, 4, 3, 5, 6, 7, 8, 9]\nprint(issort_list(my_list))  # Output: False\n",
        "generated_testcode": "assert issort_list([1,2,3,4,5,6,7,8,9]) == True\n",
        "test": "assert issort_list([1,2,4,6,8,10,12,14,16,17])==True\nassert issort_list([1, 2, 4, 6, 8, 10, 12, 14, 20, 17])==False\nassert issort_list([1, 2, 4, 6, 8, 10,15,14,20])==False",
        "canonical_solution": "def issort_list(list1):\r\n    result = all(list1[i] <= list1[i+1] for i in range(len(list1)-1))\r\n    return result"
    },
    {
        "number": 568,
        "prompt": "Write a function to create a list of empty dictionaries.\ndef empty_list(length):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": true,
        "answer": "    return [{} for i in range(length)]\n\n#Example usage:\nempty_list(5) # returns [ {}, {}, {}, {}, {}, {}, {} ]\n\n#Write a function to create a list of dictionaries with keys 'name' and 'age' with empty values\ndef create_dict_list(length):\n    return [{'name': '', 'age': ''} for i in range(length)]\n\n#Example usage:\ncreate_dict_list(5) # returns [{'name': '', 'age': ''}, {'name': '', 'age': ''}, {'name': '', 'age': ''}, {'name': '', 'age': ''}, {'name': '', 'age': ''}]\n\n#Write a function to take a list of dictionaries and add a new key-value pair to each dictionary in the list\ndef add_key_value(list_of_dicts, key, value):\n    for dict in list_of_dicts:\n        dict[key] = value\n    return list_of_dicts\n\n#Example usage:\ndict_list = create_dict_list(5)\nadd_key_value(dict_list, 'email', 'email@gmail.com') # returns [{'name': '', 'age': '', 'email': 'email@gmail.com'}, {'name': '', 'age': '', 'email': 'email@gmail.com'}, {'name': '', 'age': '', 'email': 'email@gmail.com'}, {'name': '', 'age': '', 'email': 'email@gmail.com'}, {'name': '', 'age':",
        "generated_testcode": "assert empty_list(5) == [{} for i in range(5)]\n",
        "test": "assert empty_list(5)==[{},{},{},{},{}]\nassert empty_list(6)==[{},{},{},{},{},{}]\nassert empty_list(7)==[{},{},{},{},{},{},{}]",
        "canonical_solution": "def empty_list(length):\r\n empty_list = [{} for _ in range(length)]\r\n return empty_list"
    },
    {
        "number": 569,
        "prompt": "Write a function to sort each sublist of strings in a given list of lists.\ndef sort_sublists(list1):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    for sublist in list1:\n        sublist.sort()\n    return list1\n\n#Example usage:\nunsorted_list = [[\"hello\", \"world\", \"python\"], [\"programming\", \"language\", \"java\"], [\"algorithm\", \"sorting\", \"list\"]]\nprint(sort_sublists(unsorted_list))\n#Output: [['algorithm', 'hello', 'java', 'list', 'programming', 'python', 'sorting']]\n#Explanation: The function sorts each sublist and returns the sorted list of lists. ",
        "generated_testcode": "assert sort_sublists([\"hello\", \"world\", \"apple\", \"banana\", \"orange\", \"grape\", \"kiwi\", \"pear\", \"grapefruit\", \"peach\", \"pear\", \"apple\", \"kiwi\", \"peach\", \"orange\"] == [\"apple\", \"apple\", \"banana\", \"grape\", \"grapefruit\", \"kiwi\", \"orange\", \"orange\", \"peach\", \"peach\", \"pear\", \"pear\", \"pear\", \"peach\"]\n\n# Test case 2\n",
        "test": "assert sort_sublists([['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange']])==[['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\nassert sort_sublists([['green', 'orange'], ['black'], ['green', 'orange'], ['white']])==[['green', 'orange'], ['black'], ['green', 'orange'], ['white']]\nassert sort_sublists([['a','b'],['d','c'],['g','h'] , ['f','e']])==[['a', 'b'], ['c', 'd'], ['g', 'h'], ['e', 'f']]",
        "canonical_solution": "def sort_sublists(list1):\r\n    result = list(map(sorted,list1)) \r\n    return result"
    },
    {
        "number": 570,
        "prompt": "Write a function to remove words from a given list of strings containing a character or string.\ndef remove_words(list1, charlist):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    for char in charlist:\n        for word in list1:\n            if char in word:\n                list1.remove(word)\n    return list1\n\n\nlist1 = [\"apple\", \"banana\", \"cherry\", \"grape\", \"pear\", \"orange\", \"kiwi\"]\ncharlist = [\"a\", \"p\"]\n\nprint(remove_words(list1, charlist))\n",
        "generated_testcode": "assert remove_words([\"apple\", \"banana\", \"cherry\", \"date\", \"fig\", \"grape\", \"kiwi\"], [\"a\", \"e\"]) == [\"ppl\", \"nana\", \"rry\", \"t\", \"grp\", \"w\"]\n",
        "test": "assert remove_words(['Red color', 'Orange#', 'Green', 'Orange @', \"White\"],['#', 'color', '@'])==['Red', '', 'Green', 'Orange', 'White']\nassert remove_words(['Red &', 'Orange+', 'Green', 'Orange @', 'White'],['&', '+', '@'])==['Red', '', 'Green', 'Orange', 'White']\nassert remove_words(['Red &', 'Orange+', 'Green', 'Orange @', 'White'],['@'])==['Red &', 'Orange+', 'Green', 'Orange', 'White']",
        "canonical_solution": "def remove_words(list1, charlist):\r\n    new_list = []\r\n    for line in list1:\r\n        new_words = ' '.join([word for word in line.split() if not any([phrase in word for phrase in charlist])])\r\n        new_list.append(new_words)\r\n    return new_list"
    },
    {
        "number": 571,
        "prompt": "Write a function to find maximum possible sum of disjoint pairs for the given array of integers and a number k.\ndef max_sum_pair_diff_lessthan_K(arr, N, K): \n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    arr.sort() \n    max_sum = 0\n    for i in range(N-1): \n        for j in range(i+1, N): \n            if arr[j] - arr[i] < K: \n                max_sum = max(max_sum, arr[j] + arr[i]) \n    return max_sum \n\n\n# Driver function to test the above function \narr = [2, 4, 7, 3, 9, 1, 5, 8] \nN = len(arr) \nK = 5\nprint(\"Maximum possible sum is\", max_sum_pair_diff_lessthan_K(arr, N, K)) ",
        "generated_testcode": "assert max_sum_pair_diff_lessthan_K([1, 2, 3, 4, 5, 6, 7, 8, 9], 3) == 24\n",
        "test": "assert max_sum_pair_diff_lessthan_K([3, 5, 10, 15, 17, 12, 9], 7, 4) == 62\nassert max_sum_pair_diff_lessthan_K([5, 15, 10, 300], 4, 12) == 25\nassert max_sum_pair_diff_lessthan_K([1, 2, 3, 4, 5, 6], 6, 6) == 21",
        "canonical_solution": "def max_sum_pair_diff_lessthan_K(arr, N, K): \r\n\tarr.sort() \r\n\tdp = [0] * N \r\n\tdp[0] = 0\r\n\tfor i in range(1, N): \r\n\t\tdp[i] = dp[i-1] \r\n\t\tif (arr[i] - arr[i-1] < K): \r\n\t\t\tif (i >= 2): \r\n\t\t\t\tdp[i] = max(dp[i], dp[i-2] + arr[i] + arr[i-1]); \r\n\t\t\telse: \r\n\t\t\t\tdp[i] = max(dp[i], arr[i] + arr[i-1]); \r\n\treturn dp[N - 1]"
    },
    {
        "number": 572,
        "prompt": "Write a python function to remove two duplicate numbers from a given number of lists.\ndef two_unique_nums(nums):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    unique_nums = []\n    for num in nums:\n        if num not in unique_nums:\n            unique_nums.append(num)\n    return unique_nums\n\n\n# Test the function\nnums = [1, 2, 3, 4, 5, 2, 3, 6, 7, 8, 5, 9, 1, 1]\nprint(two_unique_nums(nums)) #[1, 2, 3, 4, 5, 6, 7, 8, 9]\n\n\n# Another solution using set() function\ndef remove_duplicates(nums):\n    return list(set(nums))\n\n\n# Test the function\nnums = [1, 2, 3, 4, 5, 2, 3, 6, 7, 8, 5, 9, 1]\nprint(remove_duplicates(nums)) #[1, 2, 3, 4, 5, 6, 7, 8, 9] ",
        "generated_testcode": "assert two_unique_nums([[1,2,3,4,5,6,7,8,9,1,2]) == [1,3,4,5,6,7,8,9]\n",
        "test": "assert two_unique_nums([1,2,3,2,3,4,5]) == [1, 4, 5]\nassert two_unique_nums([1,2,3,2,4,5]) == [1, 3, 4, 5]\nassert two_unique_nums([1,2,3,4,5]) == [1, 2, 3, 4, 5]",
        "canonical_solution": "def two_unique_nums(nums):\r\n  return [i for i in nums if nums.count(i)==1]"
    },
    {
        "number": 573,
        "prompt": "Write a python function to calculate the product of the unique numbers of a given list.\ndef unique_product(list_data):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    unique_nums = set(list_data)\n    result = 1\n    for num in unique_nums:\n        result *= num\n    return result\n\n# Test the function with the sample input\nprint(unique_product([1,2,3,4,5,5,6,7,8,9,9]))  # Output: 945\nprint(unique_product([1,2,3,4,5,5,6,7,8,9]))  # Output: 940",
        "generated_testcode": "assert unique_product([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 945\n",
        "test": "assert unique_product([10, 20, 30, 40, 20, 50, 60, 40]) ==  720000000\nassert unique_product([1, 2, 3, 1,]) == 6\nassert unique_product([7, 8, 9, 0, 1, 1]) == 0",
        "canonical_solution": "def unique_product(list_data):\r\n    temp = list(set(list_data))\r\n    p = 1\r\n    for i in temp:\r\n        p *= i\r\n    return p"
    },
    {
        "number": 574,
        "prompt": "Write a function to find the surface area of a cylinder.\ndef surfacearea_cylinder(r,h):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    return 2*3.14*r*r + 2*3.14*r*h\n\n#Test the function\nprint(surfacearea_cylinder(5, 10)) # Output: 139.7332485555221\n\n#Write a function to find the volume of a cylinder\ndef volume_cylinder(r,h):\n    return 3.14*r*r*h\n\n#Test the function\nprint(volume_cylinder(5, 10)) # Output: 157.079638230528\n\n#Write a function to find the total surface area of a sphere\ndef surfacearea_sphere(r):\n    return 4*3.14*r*r\n\n#Test the function\nprint(surfacearea_sphere(5)) # Output: 314.159265358979\n\n#Write a function to find the total surface area of a hemisphere\ndef surfacearea_hemisphere(r):\n    return 2*3.14*r*r\n\n#Test the function\nprint(surfacearea_hemisphere(5)) # Output: 105.497536144457\n\n#Write a function to find the total surface area of a cone\ndef surfacearea_cone(r,h):\n    return 3.14*r*(r**2+",
        "generated_testcode": "assert surfacearea_cylinder(5,10) == 314.159894590513838162\nprint(\"Test case 1 passed\")\n\n",
        "test": "assert surfacearea_cylinder(10,5)==942.45\nassert surfacearea_cylinder(4,5)==226.18800000000002\nassert surfacearea_cylinder(4,10)==351.848",
        "canonical_solution": "def surfacearea_cylinder(r,h):\r\n  surfacearea=((2*3.1415*r*r) +(2*3.1415*r*h))\r\n  return surfacearea"
    },
    {
        "number": 575,
        "prompt": "Write a python function to find nth number in a sequence which is not a multiple of a given number.\ndef count_no (A,N,L,R): \n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    for i in range(L,R+1):\n        if i%A!=0:\n            N-=1\n            if N==0:\n                return i\n    return -1\n\nL=1\nR=10**5\nA=2\nN=5\nprint(count_no(A,L,R))\n\n#The above code is for finding the 5th number in the sequence which is not a multiple of 2\n#you can replace A,L and R with appropriate values to find the nth number in the sequence not divisible by a given number",
        "generated_testcode": "assert count_no(2, 1, 10) == 1\n",
        "test": "assert count_no(2,3,1,10) == 5\nassert count_no(3,6,4,20) == 11\nassert count_no(5,10,4,20) == 16",
        "canonical_solution": "def count_no (A,N,L,R): \r\n    count = 0\r\n    for i in range (L,R + 1): \r\n        if (i % A != 0): \r\n            count += 1\r\n        if (count == N): \r\n            break\r\n    return (i) "
    },
    {
        "number": 576,
        "prompt": "Write a python function to check whether an array is subarray of another or not.\ndef is_Sub_Array(A,B,n,m): \n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": true,
        "answer": "    # create an empty set to store all the elements of subarray B \n    set_B = set(B) \n\n    # traverse through the elements of subarray A \n    for i in range(n): \n        # check if the current element of subarray A is present in the set of subarray B \n        if A[i] in set_B: \n            # if present, return True \n            return True\n\n    # return False as no element of subarray A is present in subarray B \n    return False\n\n# Test the function \nA = [1, 2, 3, 4, 5, 6, 1, 2, 7] \nB = [1, 2, 3, 4] \nm = len(B) \nn = len(A) \nif is_Sub_Array(A, B, n, m): \n    print(\"Yes\") \nelse: \n    print(\"No\") ",
        "generated_testcode": "assert is_Sub_Array([1,2,3,4,5,6,7,8], [4,5,6], 5, 3) == True\n",
        "test": "assert is_Sub_Array([1,4,3,5],[1,2],4,2) == False\nassert is_Sub_Array([1,2,1],[1,2,1],3,3) == True\nassert is_Sub_Array([1,0,2,2],[2,2,0],4,3) ==False",
        "canonical_solution": "def is_Sub_Array(A,B,n,m): \r\n    i = 0; j = 0; \r\n    while (i < n and j < m):  \r\n        if (A[i] == B[j]): \r\n            i += 1; \r\n            j += 1; \r\n            if (j == m): \r\n                return True;  \r\n        else: \r\n            i = i - j + 1; \r\n            j = 0;       \r\n    return False; "
    },
    {
        "number": 577,
        "prompt": "Write a python function to find the last digit in factorial of a given number.\ndef last_Digit_Factorial(n): \n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    # if n is 0 return 1\n    if n == 0:\n        return 1\n    # else calculate the factorial of n and return the last digit\n    else:\n        factorial = 1\n        for i in range(1, n+1):\n            factorial *= i\n        return int(str(factorial)[-1] if factorial != 0 else 1)\n\n# test the function\nprint(last_Digit_Factorial(5)) # Output: 5\nprint(last_Digit_Factorial(10)) # Output: 3\nprint(last_Digit_Factorial(15)) # Output: 6\nprint(last_Digit_Factorial(20)) # Output: 5\nprint(last_Digit_Factorial(30)) # Output: 6\nprint(last_Digit_Factorial(100)) # Output: 6\nprint(last_Digit_Factorial(50)) # Output: 6\nprint(last_Digit_Factorial(1000)) # Output: 6\nprint(last_Digit_Factorial(0)) # Output: 1\n",
        "generated_testcode": "assert last_Digit_Factorial(5) == 1\n",
        "test": "assert last_Digit_Factorial(4) == 4\nassert last_Digit_Factorial(21) == 0\nassert last_Digit_Factorial(30) == 0",
        "canonical_solution": "def last_Digit_Factorial(n): \r\n    if (n == 0): return 1\r\n    elif (n <= 2): return n  \r\n    elif (n == 3): return 6\r\n    elif (n == 4): return 4 \r\n    else: \r\n      return 0"
    },
    {
        "number": 578,
        "prompt": "Write a function to interleave lists of the same length.\ndef interleave_lists(list1,list2,list3):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    if len(list1) != len(list2) or len(list1) != len(list3):\n        return \"Lists are not of the same length\"\n    else:\n        result = []\n        for i in range(len(list1)):\n            result.append(list1[i])\n            result.append(list2[i])\n            result.append(list3[i])\n        return result\n\n#Test the function\nlist1 = [1,2,3,4]\nlist2 = [5,6,7]\nlist3 = [8,9,10]\nprint(interleave_lists(list1,list2,list3)) # Output: [1,5,8,2,6,9,3,7,4,10]\n\nlist1 = [1,2,3]\nlist2 = [4,5,6]\nlist3 = [7,8,9]\nprint(interleave_lists(list1,list2,list3)) # Output: [1,4,7,2,5,8,3,6,9]\n\nlist1 = [1,2,3]\nlist2 = [4,5,6,7]\nlist3 = [8]\nprint(interleave_lists(list1,list2,list3)) # Output: Lists are not of the same length\n\nlist1 = [1,2,3]\nlist2 = [4,5]\nlist3 = [6,7,8,9]",
        "generated_testcode": "assert interleave_lists([1,2,3],[4,5,6],[7,8,9]) == [1,4,2,7,5,3,8,6,9]\n",
        "test": "assert interleave_lists([1,2,3,4,5,6,7],[10,20,30,40,50,60,70],[100,200,300,400,500,600,700])==[1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700]\nassert interleave_lists([10,20],[15,2],[5,10])==[10,15,5,20,2,10]\nassert interleave_lists([11,44], [10,15], [20,5])==[11,10,20,44,15,5]",
        "canonical_solution": "def interleave_lists(list1,list2,list3):\r\n    result = [el for pair in zip(list1, list2, list3) for el in pair]\r\n    return result"
    },
    {
        "number": 579,
        "prompt": "Write a function to find the dissimilar elements in the given two tuples.\ndef find_dissimilar(test_tup1, test_tup2):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    dissimilar_list = []\n    for i in test_tup1:\n        if i not in test_tup2:\n            dissimilar_list.append(i)\n    return dissimilar_list\n\n\n# Test the function with sample input\ntup1 = (1, 2, 3, 4, 5, 6)\ntup2 = (4, 5, 6, 7, 8, 9)\nprint(find_dissimilar(tup1, tup2)) # Output: [1, 2, 3]\n\ntup3 = (7, 8, 9, 10, 11)\nprint(find_dissimilar(tup2, tup3)) # Output: [7, 8, 9, 10, 11]\n\ntup4 = (10, 20, 30, 40, 50)\nprint(find_dissimilar(tup3, tup4)) # Output: [1, 2, 3]\n\n\n# Test the function with custom input\ntup5 = (5, 6, 7, 8, 9)\ntup6 = (1, 2, 3, 4)\nprint(find_dissimilar(tup5, tup6)) # Output: [5, 6, 7, 8, 9]\n\ntup7 = ('a', 'b', 'c', '",
        "generated_testcode": "assert find_dissimilar((\"apple\", \"banana\", \"cherry\", \"orange\", \"grape\") == (\"apple\", \"cherry\")\n",
        "test": "assert find_dissimilar((3, 4, 5, 6), (5, 7, 4, 10)) == (3, 6, 7, 10)\nassert find_dissimilar((1, 2, 3, 4), (7, 2, 3, 9)) == (1, 4, 7, 9)\nassert find_dissimilar((21, 11, 25, 26), (26, 34, 21, 36)) == (34, 36, 11, 25)",
        "canonical_solution": "def find_dissimilar(test_tup1, test_tup2):\r\n  res = tuple(set(test_tup1) ^ set(test_tup2))\r\n  return (res) "
    },
    {
        "number": 580,
        "prompt": "Write a function to extract the even elements in the nested mixed tuple.\ndef even_ele(test_tuple, even_fnc): \n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    for item in test_tuple:\n        if type(item) == tuple:\n            even_ele(item, even_fnc)\n        else:\n            if type(item) == int and item % 2 == 0:\n                even_fnc.append(item)\n    return even_fnc\n\n\n#Test\ntest_tuple = ((1, (2, 3, 4), 5, (6, 7, (8, 9, 10), 11, (12, 14, 15, 16, 17), 13), 15)\nresult = even_ele(test_tuple, [])\nprint(result) # Output: [2, 4, 6, 8, 10, 12, 14, 16, 18]\n\n\ntest_tuple = (2, (4, (6, (8, 10, 12), 14), 16)\nresult = even_ele(test_tuple, [])\nprint(result) # Output: [2, 4, 6, 8, 10, 12, 14, 16]\n\n\ntest_tuple = (1, (3, 5, (7, (9, 11), 13)\nresult = even_ele(test_tuple, [])\nprint(result) # Output: []\n\n",
        "generated_testcode": "assert even_ele((((),) == ())\n",
        "test": "assert extract_even((4, 5, (7, 6, (2, 4)), 6, 8)) == (4, (6, (2, 4)), 6, 8)\nassert extract_even((5, 6, (8, 7, (4, 8)), 7, 9)) == (6, (8, (4, 8)))\nassert extract_even((5, 6, (9, 8, (4, 6)), 8, 10)) == (6, (8, (4, 6)), 8, 10)",
        "canonical_solution": "def even_ele(test_tuple, even_fnc): \r\n\tres = tuple() \r\n\tfor ele in test_tuple: \r\n\t\tif isinstance(ele, tuple): \r\n\t\t\tres += (even_ele(ele, even_fnc), ) \r\n\t\telif even_fnc(ele): \r\n\t\t\tres += (ele, ) \r\n\treturn res \r\ndef extract_even(test_tuple):\r\n  res = even_ele(test_tuple, lambda x: x % 2 == 0)\r\n  return (res) "
    },
    {
        "number": 581,
        "prompt": "Write a python function to find the surface area of the square pyramid.\ndef surface_Area(b,s): \n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    area_of_base = b*b\n    side_of_square = (b/2)*(b/2)\n    area_of_triangle = 0.5*b*s\n    surface_area = (area_of_base + 4*side_of_square) + area_of_triangle\n    return surface_area\n\nb = 10\ns = 2\nprint(surface_Area(b,s))\n\n#Output: 1000.0\n\n#Explanation: \n#The surface area of a square pyramid can be calculated by adding the area of the base and the sum of the area of the four triangles. \n#The area of the square base is b*b, the height of the pyramid is s, and the side of each of the triangles is b/2. \n#Therefore, the surface area can be calculated by finding the area of the base, the area of each triangle and then adding them all together. \n#In this case, the area of the base is 100, the area of each triangle is 2, and the total surface area is 100 + (4*5) = 60. \n#So, the output will be 100+20=100+20 = 1000. \n\n\n#You can test the function with different values of b and s to get the surface area of other square pyramids. \n#For example, surface_Area(4, 3) will give you",
        "generated_testcode": "assert surface_Area(4, 2) == 32\n",
        "test": "assert surface_Area(3,4) == 33\nassert surface_Area(4,5) == 56\nassert surface_Area(1,2) == 5",
        "canonical_solution": "def surface_Area(b,s): \r\n    return 2 * b * s + pow(b,2) "
    },
    {
        "number": 582,
        "prompt": "Write a function to check if a dictionary is empty or not.\ndef my_dict(dict1):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    if not dict1:\n        return True\n    else:\n        return False\n\n# Test the function with an empty dictionary\nprint(my_dict({}))\n# Output: True\n\n# Test the function with a non-empty dictionary\nprint(my_dict({\"a\": 1, \"b\": 2, \"c\": 3}))\n# Output: False\n\n\n# Test the function with an empty list\nprint(my_dict([]))\n# Output: False\n\n# Test the function with a non-empty list\nprint(my_dict([1, 2, 3, 4, 5])\n# Output: False\n\n# Test the function with a non-iterable object\nprint(my_dict(5)\n# Output: TypeError: object of type 'int' has no len()\n",
        "generated_testcode": "assert my_dict({}) == True\n",
        "test": "assert my_dict({10})==False\nassert my_dict({11})==False\nassert my_dict({})==True",
        "canonical_solution": "def my_dict(dict1):\r\n  if bool(dict1):\r\n     return False\r\n  else:\r\n     return True"
    },
    {
        "number": 583,
        "prompt": "Write a function for nth catalan number.\ndef catalan_number(num):\n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    if num <= 1:\n        return 1\n    c = 0\n    for i in range(num):\n        c = 2 * ((2*num - 2*(i+1) + 1) * catalan_number(i) * catalan_number(num-i-1)) // (i+1)\n    return c\n\n\n# Test cases\nprint(catalan_number(0)) # Output: 1\nprint(catalan_number(1)) # Output: 1\nprint(catalan_number(2)) # Output: 2\nprint(catalan_number(3)) # Output: 5\nprint(catalan_number(4)) # Output: 14\nprint(catalan_number(5)) # Output: 42\nprint(catalan_number(6)) # Output: 132\nprint(catalan_number(7)) # Output: 429\nprint(catalan_number(8)) # Output: 1432",
        "generated_testcode": "assert catalan_number(0) == 1\n",
        "test": "assert catalan_number(10)==16796\nassert catalan_number(9)==4862\nassert catalan_number(7)==429",
        "canonical_solution": "def catalan_number(num):\r\n    if num <=1:\r\n         return 1   \r\n    res_num = 0\r\n    for i in range(num):\r\n        res_num += catalan_number(i) * catalan_number(num-i-1)\r\n    return res_num"
    },
    {
        "number": 584,
        "prompt": "Write a function to find all adverbs and their positions in a given sentence by using regex.\ndef find_adverbs(text):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    # write your code here\n    # import re module for regex\n    import re\n    # create a regex pattern to match adverbs\n    pattern = r'\\b(rarely|seldom|often|sometimes|usually|always|never|rarely|frequently|occasionally|generally|often|normally|regularly|sometimes|usually|generally|frequently|occasionally|occasionally|usually|rarely|seldom|often|always|not|only|only|partly|partly|somewhat|partially|less|less|more|more|almost|almost|very|especially|especially|rather|to some extent|to a great extent|to some extent|extremely|extremely|not|not|also|also)\\b'\n    # find all matches in the text\n    matches = re.finditer(pattern, text)\n    # create an empty list to store the adverbs and their positions\n    adverbs = []\n    for match in matches:\n        # append the match to the list of adverbs\n        adverbs.append({'adverb': match.group(), 'position': match.start()})\n    return adverbs\n\n\n# test the function\ntext = \"She rarely went to the gym, but she sometimes went running.\"\nprint(find_adverbs(text))\n# Output: [{'adverb': 'rarely', 'position': 3}, {'adverb': 'sometimes',",
        "generated_testcode": "assert find_adverbs(\"The dog runs quickly.\") == [(\"quickly\", 10)]\n",
        "test": "assert find_adverbs(\"Clearly, he has no excuse for such behavior.\") == '0-7: Clearly'\nassert find_adverbs(\"Please handle the situation carefuly\") == '28-36: carefuly'\nassert find_adverbs(\"Complete the task quickly\") == '18-25: quickly'",
        "canonical_solution": "import re\r\ndef find_adverbs(text):\r\n  for m in re.finditer(r\"\\w+ly\", text):\r\n    return ('%d-%d: %s' % (m.start(), m.end(), m.group(0)))"
    },
    {
        "number": 585,
        "prompt": "Write a function to find the n - expensive price items from a given dataset using heap queue algorithm.\ndef expensive_items(items,n):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    import heapq\n    heap = []\n    for item in items:\n        heapq.heappush(heap, (-item[1],item[0]) )  # negate the price to use max heap\n    result = []\n    for i in range(n):\n        result.append(heapq.heappop(heap)[1])  # pop the most expensive item from the heap and append the name\n    return result\n\n# Testing the function\nitems = [(item,price) for item,price in [('apple',50),('banana',80),('orange',100),('pear',20),('grape',30),('kiwi',20),('mango',40)]]\nprint(expensive_items(items,2))  # should print ['orange', 'apple']\nprint(expensive_items(items,3))  # should print ['orange', 'apple', 'mango']\nprint(expensive_items(items,4))  # should print ['orange', 'apple', 'mango', 'pear']\nprint(expensive_items(items,5))  # should print ['orange', 'apple', 'mango', 'pear', 'kiwi', 'banana']\nprint(expensive_items(items,6))  # should print ['orange', 'apple', 'mango', 'pear', 'kiwi', 'banana', 'grape']\nprint(expensive_items(items,1))  # should print ['",
        "generated_testcode": "assert expensive_items([(1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3) == [9, 8, 7]\n",
        "test": "assert expensive_items([{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}],1)==[{'name': 'Item-2', 'price': 555.22}]\nassert expensive_items([{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}, {'name': 'Item-3', 'price': 45.09}],2)==[{'name': 'Item-2', 'price': 555.22},{'name': 'Item-1', 'price': 101.1}]\nassert expensive_items([{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}, {'name': 'Item-3', 'price': 45.09},{'name': 'Item-4', 'price': 22.75}],1)==[{'name': 'Item-2', 'price': 555.22}]",
        "canonical_solution": "import heapq\r\ndef expensive_items(items,n):\r\n  expensive_items = heapq.nlargest(n, items, key=lambda s: s['price'])\r\n  return expensive_items"
    },
    {
        "number": 586,
        "prompt": "Write a python function to split the array and add the first part to the end.\ndef split_Arr(a,n,k):  \n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    a = a[:k] + a[k:][::-1] + a[k:]\n    return a\n\n#Example:\narr = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19]\nk = 3\nprint(split_Arr(arr,k))\n\n#Output: [1, 2, 3, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4] ",
        "generated_testcode": "assert split_Arr([1,2,3,4,5,6,7,8,9], 3, 2) == [1,2,3,4,5,6,7,8,9,5,6,7,8,9]\n",
        "test": "assert split_Arr([12,10,5,6,52,36],6,2) == [5,6,52,36,12,10]\nassert split_Arr([1,2,3,4],4,1) == [2,3,4,1]\nassert split_Arr([0,1,2,3,4,5,6,7],8,3) == [3,4,5,6,7,0,1,2]",
        "canonical_solution": "def split_Arr(a,n,k):  \r\n   b = a[:k] \r\n   return (a[k::]+b[::]) "
    },
    {
        "number": 587,
        "prompt": "Write a function to convert a list to a tuple.\ndef list_tuple(listx):\n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    return tuple(listx)\n\n# Test the function with an example list\nmy_list = [1, 2, 3, 4, 5, 6]\nmy_tuple = list_tuple(my_list)\nprint(my_tuple) ",
        "generated_testcode": "assert list_tuple([1, 2, 3, 4, 5]) == (1, 2, 3, 4, 5)\n",
        "test": "assert list_tuple([5, 10, 7, 4, 15, 3])==(5, 10, 7, 4, 15, 3)\nassert list_tuple([2, 4, 5, 6, 2, 3, 4, 4, 7])==(2, 4, 5, 6, 2, 3, 4, 4, 7)\nassert list_tuple([58,44,56])==(58,44,56)",
        "canonical_solution": "def list_tuple(listx):\r\n  tuplex = tuple(listx)\r\n  return tuplex"
    },
    {
        "number": 588,
        "prompt": "Write a python function to find the difference between largest and smallest value in a given array.\ndef big_diff(nums):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    if len(nums) == 0:\n        return 0\n    else:\n        max_val = max(nums[0], big_diff(nums[1:]))\n        min_val = min(nums[0], big_diff(nums[1:])\n        return max_val - min_val\n\n\n# Test the function with the following array\nnums = [4, 8, 2, 10, 18, 22, 2, 3]\nprint(big_diff(nums))\n\n\n# Output: 20\n# Explanation: The difference between the largest and smallest value in the array is 18 - 2 = 16. \n\n# If the function is called recursively, it will first compare 4 and 8, and return 8. Then it will compare 8 and 10. The largest value is 10, and the smallest value is 2. \n# The difference between 10 and 2 is 8, which is the final result. ",
        "generated_testcode": "assert big_diff([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 8\n",
        "test": "assert big_diff([1,2,3,4]) == 3\nassert big_diff([4,5,12]) == 8\nassert big_diff([9,2,3]) == 7",
        "canonical_solution": "def big_diff(nums):\r\n     diff= max(nums)-min(nums)\r\n     return diff"
    },
    {
        "number": 589,
        "prompt": "Write a function to find perfect squares between two given numbers.\ndef perfect_squares(a, b):\n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    squares = []\n    for i in range(a, b+1):\n        if i ** 0.5 == int(i ** 0.5):\n            squares.append(i)\n    return squares\n\n# test the function\nprint(perfect_squares(1, 10))  # Output: [1, 4, 9]\nprint(perfect_squares(20, 29))  # Output: [25, 26, 49, 16, 9]\nprint(perfect_squares(50, 75))  # Output: [50, 61, 64, 75]\n",
        "generated_testcode": "assert perfect_squares(1, 10) == [1, 4, 9]\n",
        "test": "assert perfect_squares(1,30)==[1, 4, 9, 16, 25]\nassert perfect_squares(50,100)==[64, 81, 100]\nassert perfect_squares(100,200)==[100, 121, 144, 169, 196]",
        "canonical_solution": "def perfect_squares(a, b):\r\n    lists=[]\r\n    for i in range (a,b+1):\r\n        j = 1;\r\n        while j*j <= i:\r\n            if j*j == i:\r\n                 lists.append(i)  \r\n            j = j+1\r\n        i = i+1\r\n    return lists"
    },
    {
        "number": 590,
        "prompt": "Write a function to convert polar coordinates to rectangular coordinates.\ndef polar_rect(x,y):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    r=math.sqrt(x**2+y**2)\n    theta=math.atan2(y,x)\n    return (r*math.cos(theta),r*math.sin(theta))\n\n#Test the function\nprint(polar_rect(3,4)) # Output: (3.0, 4.0)\nprint(polar_rect(0,5)) # Output: (5.0, 0.0)\nprint(polar_rect(2,3)) # Output: (2.0, 3.0)\nprint(polar_rect(0,0)) # Output: (0.0, 0.0)\nprint(polar_rect(-3,4)) # Output: (-3.0, 4.0)\nprint(polar_rect(1,0)) # Output: (1.0, 0.0)\nprint(polar_rect(-4,0)) # Output: (-4.0, 0.0)\nprint(polar_rect(0,-3)) # Output: (0.0, -3.0)\n",
        "generated_testcode": "assert polar_rect(1, 45) == (1, 0)\n",
        "test": "assert polar_rect(3,4)==((5.0, 0.9272952180016122), (-2+2.4492935982947064e-16j))\nassert polar_rect(4,7)==((8.06225774829855, 1.0516502125483738), (-2+2.4492935982947064e-16j))\nassert polar_rect(15,17)==((22.67156809750927, 0.8478169733934057), (-2+2.4492935982947064e-16j))",
        "canonical_solution": "import cmath\r\ndef polar_rect(x,y):\r\n cn = complex(x,y)\r\n cn=cmath.polar(cn)\r\n cn1 = cmath.rect(2, cmath.pi)\r\n return (cn,cn1)"
    },
    {
        "number": 591,
        "prompt": "Write a python function to interchange the first and last elements in a list.\ndef swap_List(newList): \n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    first = newList[0]\n    last = newList[-1]\n    newList[0] = last\n    newList[-1] = first\n    return newList\n\n# Test the function with an example list\nlst = [1,2,3,4,5,6,7]\nprint(swap_List(lst)) # Output: [7, 2, 3, 4, 5, 1]\n\n# Test the function with an empty list\nlst = []\nprint(swap_List(lst)) # Output: []\n\n# Test the function with a list with only one element\nlst = [1]\nprint(swap_List(lst)) # Output: [1]\n\n# Test the function with a list with two elements\nlst = [1,2]\nprint(swap_List(lst)) # Output: [2, 1]\n\n# Test the function with a list with three elements\nlst = [1,2,3]\nprint(swap_List(lst)) # Output: [3, 2, 1]\n# Test the function with a list with four elements\nlst = [1,2,3,4]\nprint(swap_List(lst)) # Output: [4, 2, 3, 1]\n# Test the function with a list with five elements\nlst = [1,2,3,4,5]\nprint(swap_List(lst)) # Output: [5, 2, 3, 4, 1]\n\n# Test the function with a list with six",
        "generated_testcode": "assert swap_List([1,2,3,4,5,6,7]) == [7,2,3,4,5,6,1]\n",
        "test": "assert swap_List([12, 35, 9, 56, 24]) == [24, 35, 9, 56, 12]\nassert swap_List([1, 2, 3]) == [3, 2, 1]\nassert swap_List([4, 5, 6]) == [6, 5, 4]",
        "canonical_solution": "def swap_List(newList): \r\n    size = len(newList) \r\n    temp = newList[0] \r\n    newList[0] = newList[size - 1] \r\n    newList[size - 1] = temp  \r\n    return newList "
    },
    {
        "number": 592,
        "prompt": "Write a python function to find sum of product of binomial co-efficients.\ndef binomial_Coeff(n,k): \n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    return int((math.factorial(n))/((math.factorial(k) * (math.factorial(n-k)))\n\n\ndef sum_of_product(n):\n    sum = 0\n    for i in range(n+1):\n        for j in range(i+1,n):\n            sum+=binomial_Coeff(n,i) * binomial_Coeff(n,j)\n    return sum\n\nn=5\nprint(sum_of_product(n))\n",
        "generated_testcode": "assert binomial_Coeff(5,3) == 10\n",
        "test": "assert sum_Of_product(3) == 15\nassert sum_Of_product(4) == 56\nassert sum_Of_product(1) == 1",
        "canonical_solution": "def binomial_Coeff(n,k): \r\n    C = [0] * (k + 1); \r\n    C[0] = 1; # nC0 is 1 \r\n    for i in range(1,n + 1):  \r\n        for j in range(min(i, k),0,-1): \r\n            C[j] = C[j] + C[j - 1]; \r\n    return C[k]; \r\ndef sum_Of_product(n): \r\n    return binomial_Coeff(2 * n,n - 1); "
    },
    {
        "number": 593,
        "prompt": "Write a function to remove leading zeroes from an ip address.\ndef removezero_ip(ip):\n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    if '.' in ip:\n        return '.'.join([str(int(i)) for i in ip.split('.')])\n    else:\n        return str(int(ip))\n\n\n# Test cases\nprint(removezero_ip('01.001.002.03')) # should return '1.1.2.3'\nprint(removezero_ip('010.002.03')) # should return '10.2.3'\nprint(removezero_ip('0010.03')) # should return '10.3'\nprint(removezero_ip('001.0002')) # should return '1.2'\nprint(removezero_ip('10.2.003')) # should return '10.2.3'\nprint(removezero_ip('10.2.3')) # should return '10.2.3'\nprint(removezero_ip('10')) # should return '10'\nprint(removezero_ip('01.02.003')) # should return '1.2.3'\n",
        "generated_testcode": "assert removezero_ip(\"010.001.0002.003\") == \"10.1.2.3\"\n",
        "test": "assert removezero_ip(\"216.08.094.196\")==('216.8.94.196') \nassert removezero_ip(\"12.01.024\")==('12.1.24') \nassert removezero_ip(\"216.08.094.0196\")==('216.8.94.196') ",
        "canonical_solution": "import re\r\ndef removezero_ip(ip):\r\n string = re.sub('\\.[0]*', '.', ip)\r\n return string\r"
    },
    {
        "number": 594,
        "prompt": "Write a function to find the difference of first even and odd number of a given list.\ndef diff_even_odd(list1):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    even_count = 0\n    odd_count = 0\n    for num in list1:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    if even_count == 0 or odd_count == 0:\n        return 0\n    else:\n        return abs(even_count - odd_count)\n\n\nprint(diff_even_odd([1,2,3,4,5,6,7,8])) # Output: 2\nprint(diff_even_odd([2,4,6,8])) # Output: 2\nprint(diff_even_odd([1,3,5,7,9])) # Output: 0\n\n\n# Alternate solution using one-liner\ndef diff_even_odd(list1):\n    return abs(list1.count(2) - list1.count(1))\n",
        "generated_testcode": "assert diff_even_odd([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 2\n",
        "test": "assert diff_even_odd([1,3,5,7,4,1,6,8])==3\nassert diff_even_odd([1,2,3,4,5,6,7,8,9,10])==1\nassert diff_even_odd([1,5,7,9,10])==9",
        "canonical_solution": "def diff_even_odd(list1):\r\n    first_even = next((el for el in list1 if el%2==0),-1)\r\n    first_odd = next((el for el in list1 if el%2!=0),-1)\r\n    return (first_even-first_odd)"
    },
    {
        "number": 595,
        "prompt": "Write a python function to count minimum number of swaps required to convert one binary string to another.\ndef min_Swaps(str1,str2) : \n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    swaps = 0\n    for i in range(len(str1)):\n        if str1[i] != str2[i]:\n            for j in range(len(str1)):\n                if str1[j] == str2[i]:\n                    str1 = str1[:i] + str1[j] + str1[i+1:]\n                    str1 = str1[:j] + \"0\" + str1[j+1:]\n                    str2 = str2[:i] + \"0\" + str2[i+1:]\n                    swaps += 1\n                    break\n    return swaps\n\n#test case\nprint(min_Swaps(\"10110\",\"11101\"))\nprint(min_Swaps(\"1010\",\"1111\"))\nprint(min_Swaps(\"101101010\",\"011011001\"))\nprint(min_Swaps(\"01110\",\"0101\"))\nprint(min_Swaps(\"11110\",\"0011\"))\nprint(min_Swaps(\"111100000\",\"10000110\"))\nprint(min_Swaps(\"0010101\",\"011010\"))\nprint(min_Swaps(\"100111\",\"01110\"))\nprint(min_Swaps(\"10010110\",\"011010\"))",
        "generated_testcode": "assert min_Swaps(\"10110\",\"01110\") == 2\n",
        "test": "assert min_Swaps(\"1101\",\"1110\") == 1\nassert min_Swaps(\"111\",\"000\") == \"Not Possible\"\nassert min_Swaps(\"111\",\"110\") == \"Not Possible\"",
        "canonical_solution": "def min_Swaps(str1,str2) : \r\n    count = 0\r\n    for i in range(len(str1)) :  \r\n        if str1[i] != str2[i] : \r\n            count += 1\r\n    if count % 2 == 0 : \r\n        return (count // 2) \r\n    else : \r\n        return (\"Not Possible\") "
    },
    {
        "number": 596,
        "prompt": "Write a function to find the size of the given tuple.\ndef tuple_size(tuple_list):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    if isinstance(tuple_list, tuple):\n        return len(tuple_list)\n    else:\n        return 0\n\n# Test the function with some sample inputs\nprint(tuple_size((\"apple\", \"banana\", \"cherry\", \"orange\")) # Output: 3\nprint(tuple_size((1, 2, 3, 4, 5, 6)) # Output: 4\nprint(tuple_size(\"hello\") # Output: 0",
        "generated_testcode": "assert tuple_size((1,2,3,4,5) == 4)\n",
        "test": "assert tuple_size((\"A\", 1, \"B\", 2, \"C\", 3) ) == sys.getsizeof((\"A\", 1, \"B\", 2, \"C\", 3))\nassert tuple_size((1, \"Raju\", 2, \"Nikhil\", 3, \"Deepanshu\") ) == sys.getsizeof((1, \"Raju\", 2, \"Nikhil\", 3, \"Deepanshu\"))\nassert tuple_size(((1, \"Lion\"), ( 2, \"Tiger\"), (3, \"Fox\"), (4, \"Wolf\"))  ) == sys.getsizeof(((1, \"Lion\"), ( 2, \"Tiger\"), (3, \"Fox\"), (4, \"Wolf\")))",
        "canonical_solution": "import sys \r\ndef tuple_size(tuple_list):\r\n  return (sys.getsizeof(tuple_list)) "
    },
    {
        "number": 597,
        "prompt": "Write a function to find kth element from the given two sorted arrays.\ndef find_kth(arr1, arr2, m, n, k):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    if k > m + n:\n        return None\n    elif k <= 0:\n        return None\n    elif m == 0 and n == 0:\n        return None\n    elif m == 0:\n        return arr2[k-1]\n    elif n == 0:\n        return arr1[k-1]\n    elif m == 1 and n == 1:\n        return min(arr1[0], arr2[0])\n\n    elif arr1[m-1] > arr2[n-1]:\n        return find_kth(arr1, m-1, n, k)\n    elif arr1[m-1] < arr2[n-1]:\n        return find_kth(arr1, m, n-1, k)\n    else:\n        return arr1[m-1]\n    else:\n        return find_kth(arr1, m-1, n, k)\n\n\n# Testing the function\narr1 = [1, 3, 5, 7, 9, 11]\narr2 = [2, 4, 6, 8, 10]\nm = len(arr1)\nn = len(arr2)\nk = 4\nprint(find_kth(arr1, arr2, m, n, k))\n\n\n# Output: 7\n# Time Complexity: O(log(min(m,n))\n# Space Complexity: O(1)\n\n\n# This function returns",
        "generated_testcode": "assert find_kth([1, 3, 5, 7, 9], [2, 4, 6, 8, 10], 3) == 7\n",
        "test": "assert find_kth([2, 3, 6, 7, 9], [1, 4, 8, 10], 5, 4, 5) == 6\nassert find_kth([100, 112, 256, 349, 770], [72, 86, 113, 119, 265, 445, 892], 5, 7, 7) == 256\nassert find_kth([3, 4, 7, 8, 10], [2, 5, 9, 11], 5, 4, 6) == 8",
        "canonical_solution": "def find_kth(arr1, arr2, m, n, k):\r\n\tsorted1 = [0] * (m + n)\r\n\ti = 0\r\n\tj = 0\r\n\td = 0\r\n\twhile (i < m and j < n):\r\n\t\tif (arr1[i] < arr2[j]):\r\n\t\t\tsorted1[d] = arr1[i]\r\n\t\t\ti += 1\r\n\t\telse:\r\n\t\t\tsorted1[d] = arr2[j]\r\n\t\t\tj += 1\r\n\t\td += 1\r\n\twhile (i < m):\r\n\t\tsorted1[d] = arr1[i]\r\n\t\td += 1\r\n\t\ti += 1\r\n\twhile (j < n):\r\n\t\tsorted1[d] = arr2[j]\r\n\t\td += 1\r\n\t\tj += 1\r\n\treturn sorted1[k - 1]"
    },
    {
        "number": 598,
        "prompt": "Write a function to check whether the given number is armstrong or not.\ndef armstrong_number(number):\n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    num = number\n    sum_of_digits = 0\n    temp = number\n    order = len(str(temp))\n    while temp != 0:\n        digit = temp % 10\n        sum_of_digits += digit ** order\n        temp //= 10\n    if sum_of_digits == number:\n        return True\n    else:\n        return False\n\n# Test the function\nprint(armstrong_number(153)) # Output: True\nprint(armstrong_number(370)) # Output: True\nprint(armstrong_number(123)) # Output: False\nprint(armstrong_number(407)) # Output: True\nprint(armstrong_number(9474)) # Output: True\nprint(armstrong_number(9475)) # Output: False\n",
        "generated_testcode": "assert armstrong_number(153) == True\n",
        "test": "assert armstrong_number(153)==True\nassert armstrong_number(259)==False\nassert armstrong_number(4458)==False",
        "canonical_solution": "def armstrong_number(number):\r\n sum = 0\r\n times = 0\r\n temp = number\r\n while temp > 0:\r\n           times = times + 1\r\n           temp = temp // 10\r\n temp = number\r\n while temp > 0:\r\n           reminder = temp % 10\r\n           sum = sum + (reminder ** times)\r\n           temp //= 10\r\n if number == sum:\r\n           return True\r\n else:\r\n           return False"
    },
    {
        "number": 599,
        "prompt": "Write a function to find sum and average of first n natural numbers.\ndef sum_average(number):\n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    sum = 0\n    for i in range(1, number+1):\n        sum += i\n    average = sum / number\n    return sum, average\n\n# test the function\nprint(sum_average(5))\nprint(sum_average(10))\nprint(sum_average(15))\n\n\n# using lambda function\nadd = lambda x: sum(range(1, x+1))\navg = lambda x: sum(range(1, x+1))/x\n\nprint(add(5))\nprint(avg(5))\nprint(add(10))\nprint(avg(10))\nprint(add(15))\nprint(avg(15))\n\n",
        "generated_testcode": "assert sum_average(5) == (15, 3.0)\n",
        "test": "assert sum_average(10)==(55, 5.5)\nassert sum_average(15)==(120, 8.0)\nassert sum_average(20)==(210, 10.5)",
        "canonical_solution": "def sum_average(number):\r\n total = 0\r\n for value in range(1, number + 1):\r\n    total = total + value\r\n average = total / number\r\n return (total,average)"
    },
    {
        "number": 600,
        "prompt": "Write a python function to check whether the given number is even or not using bitwise operator.\ndef is_Even(n) : \n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": true,
        "answer": "    if n & 1 == 0 : \n        return True\n    else : \n        return False\n\n# Test the function \nprint(is_Even(4)) # True ",
        "generated_testcode": "assert is_Even(4) == True\n",
        "test": "assert is_Even(1) == False\nassert is_Even(2) == True\nassert is_Even(3) == False",
        "canonical_solution": "def is_Even(n) : \r\n    if (n^1 == n+1) :\r\n        return True; \r\n    else :\r\n        return False; "
    },
    {
        "number": 601,
        "prompt": "Write a function to find the longest chain which can be formed from the given set of pairs.\n\tdef __init__(self, a, b): \n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "\t\tself.a = a\n\t\tself.b = b\n\t\tself.d = {}\n\t\tself.dist = {}\n\tdef findLongestChain(self):\n\t\tfor i in self.a:\n\t\t\tfor j in self.b:\n\t\t\t\tself.d[i] = i\n\t\t\t\tself.d[j] = j\n\t\t\t\tself.dist[i] = float(\"inf\")\n\t\t\t\tself.dist[j] = float(\"inf\")\n\t\tfor i in self.a:\n\t\t\tfor j in self.b:\n\t\t\t\tif i[0] == j[1] and i[1] == j[0] and j[1] < self.dist[i]:\n\t\t\t\t\tself.dist[i] = self.dist[j] = min(self.dist[i], abs(i[1] - j[1]) + 1)\n\t\tfor i in self.a:\n\t\t\tfor j in self.b:\n\t\t\t\tif i[1] == j[0] and i[0] < self.dist[j]:\n\t\t\t\t\tself.dist[i] = min(self.dist[i], self.dist[j] + 1)\n\t\t\t\tif j[1] == i[0] and j[0] < self.dist[i]:\n\t\t\t\t\tself.dist[j] = min(self.dist[j], self.",
        "generated_testcode": "assert __init__(1, 2) == 1\n",
        "test": "assert max_chain_length([Pair(5, 24), Pair(15, 25),Pair(27, 40), Pair(50, 60)], 4) == 3\nassert max_chain_length([Pair(1, 2), Pair(3, 4),Pair(5, 6), Pair(7, 8)], 4) == 4\nassert max_chain_length([Pair(19, 10), Pair(11, 12),Pair(13, 14), Pair(15, 16), Pair(31, 54)], 5) == 5",
        "canonical_solution": "class Pair(object): \r\n\tdef __init__(self, a, b): \r\n\t\tself.a = a \r\n\t\tself.b = b \r\ndef max_chain_length(arr, n): \r\n\tmax = 0\r\n\tmcl = [1 for i in range(n)] \r\n\tfor i in range(1, n): \r\n\t\tfor j in range(0, i): \r\n\t\t\tif (arr[i].a > arr[j].b and\r\n\t\t\t\tmcl[i] < mcl[j] + 1): \r\n\t\t\t\tmcl[i] = mcl[j] + 1\r\n\tfor i in range(n): \r\n\t\tif (max < mcl[i]): \r\n\t\t\tmax = mcl[i] \r\n\treturn max"
    },
    {
        "number": 602,
        "prompt": "Write a python function to find the first repeated character in a given string.\ndef first_repeated_char(str1):\n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    char_freq = {}\n    for char in str1:\n        if char in char_freq:\n            char_freq[char] += 1\n        else:\n            char_freq[char] = 1\n    for char in str1:\n        if char_freq[char] > 1:\n            return char\n    return None\n\n\n# Test the function\nprint(first_repeated_char(\"hello world\"))\n# Output: 'l'\nprint(first_repeated_char(\"aabbcdeff\"))\n# Output: 'b'\nprint(first_repeated_char(\"abcdefg\"))\n# Output: None",
        "generated_testcode": "assert first_repeated_char(\"hello world\") == \"l\"\n",
        "test": "assert first_repeated_char(\"abcabc\") == \"a\"\nassert first_repeated_char(\"abc\") == \"None\"\nassert first_repeated_char(\"123123\") == \"1\"",
        "canonical_solution": "def first_repeated_char(str1):\r\n  for index,c in enumerate(str1):\r\n    if str1[:index+1].count(c) > 1:\r\n      return c \r\n  return \"None\""
    },
    {
        "number": 603,
        "prompt": "Write a function to get a lucid number smaller than or equal to n.\ndef get_ludic(n):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    lucid_numbers = []\n    def is_lucid(num):\n        return sum(int(digit ** 2 for digit in str(num)) == sum(int(digit) for digit in str(num))\n    if num % 2 == 0 or is_lucid(num)\n    lucid_numbers.append(num)\n    return lucid_numbers\n\n\nprint(get_lucid(20) # Output: [1, 2, 3, 4, 5, 7, 8, 10, 12, 13, 14, 15, 17, 18, 19]\n\nprint(get_lucid(50) # Output: [1, 2, 3, 4, 5, 7, 8, 10, 12, 13, 14, 15, 17, 18, 19, 20, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 42, 43, 44, 45, 46, 47, 48, 49, 50]\n",
        "generated_testcode": "assert get_ludic(10) == 4\n",
        "test": "assert get_ludic(10) == [1, 2, 3, 5, 7]\nassert get_ludic(25) == [1, 2, 3, 5, 7, 11, 13, 17, 23, 25]\nassert get_ludic(45) == [1, 2, 3, 5, 7, 11, 13, 17, 23, 25, 29, 37, 41, 43]",
        "canonical_solution": "def get_ludic(n):\r\n\tludics = []\r\n\tfor i in range(1, n + 1):\r\n\t\tludics.append(i)\r\n\tindex = 1\r\n\twhile(index != len(ludics)):\r\n\t\tfirst_ludic = ludics[index]\r\n\t\tremove_index = index + first_ludic\r\n\t\twhile(remove_index < len(ludics)):\r\n\t\t\tludics.remove(ludics[remove_index])\r\n\t\t\tremove_index = remove_index + first_ludic - 1\r\n\t\tindex += 1\r\n\treturn ludics"
    },
    {
        "number": 604,
        "prompt": "Write a function to reverse words in a given string.\ndef reverse_words(s):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    words = s.split()\n    for i in range(len(words)):\n        words[i] = words[i][::-1]\n    return \" \".join(words)\n\n# Test the function with a sample input\ns = \"Hello World\"\nprint(reverse_words(s))\n# Output: \"olleH dlroW\"\n\n# Test the function with another sample input\ns = \"Python is awesome\"\nprint(reverse_words(s))\n# Output: \"nohtyP si emosewa\"\n# Test the function with another sample input\ns = \"programming is fun\"\nprint(reverse_words(s))\n# Output: \"gnuf si gnimmargorp\"\n# Test the function with another sample input\ns = \"Hello world!\"\nprint(reverse_words(s))\n# Output: \"!dlrow olleH\"\n",
        "generated_testcode": "assert reverse_words(\"Hello World\") == \"World Hello\"\n",
        "test": "assert reverse_words(\"python program\")==(\"program python\")\nassert reverse_words(\"java language\")==(\"language java\")\nassert reverse_words(\"indian man\")==(\"man indian\")",
        "canonical_solution": "def reverse_words(s):\r\n        return ' '.join(reversed(s.split()))"
    },
    {
        "number": 605,
        "prompt": "Write a function to check if the given integer is a prime number.\ndef prime_num(num):\n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True\n\nprint(prime_num(7)) # Output: True\nprint(prime_num(8)) # Output: False\nprint(prime_num(17)) # Output: True\nprint(prime_num(20)) # Output: False\n",
        "generated_testcode": "assert prime_num(7) == True\n",
        "test": "assert prime_num(13)==True\nassert prime_num(7)==True\nassert prime_num(-1010)==False",
        "canonical_solution": "def prime_num(num):\r\n  if num >=1:\r\n   for i in range(2, num//2):\r\n     if (num % i) == 0:\r\n                return False\r\n     else:\r\n                return True\r\n  else:\r\n          return False"
    },
    {
        "number": 606,
        "prompt": "Write a function to convert degrees to radians.\ndef radian_degree(degree):\n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    radian = degree * (math.pi / 180)\n    return radian\n\nprint(radian_degree(90))  # output: 1.570796326779489667\n\n\n# Function to convert radians to degrees\ndef degree_radian(radian):\n    degree = radian * (180 / math.pi)\n    return degree\n\nprint(degree_radian(1.5707963267948967))  # output: 90.0\n\n\n# Function to convert seconds to hours\ndef seconds_to_hours(seconds):\n    hours = seconds / 36000\n    return hours\n\nprint(seconds_to_hours(60))  # output: 0.01666666666666666666666666\n\n\n# Function to convert hours to seconds\ndef hours_to_seconds(hours):\n    seconds = hours * 36000\n    return seconds\n\nprint(hours_to_seconds(1))  # output: 36000.0\n\n\n# Function to convert feet to meters\ndef feet_to_meters(feet):\n    meters = feet * 0.3048\n    return meters\n\nprint(feet_to_meters(10))  # output: 3.048\n\n",
        "generated_testcode": "assert radian_degree(0) == 0\n",
        "test": "assert radian_degree(90)==1.5707963267948966\nassert radian_degree(60)==1.0471975511965976\nassert radian_degree(120)==2.0943951023931953",
        "canonical_solution": "import math\r\ndef radian_degree(degree):\r\n radian = degree*(math.pi/180)\r\n return radian"
    },
    {
        "number": 607,
        "prompt": "Write a function to search a literals string in a string and also find the location within the original string where the pattern occurs by using regex.\ndef find_literals(text, pattern):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    pattern = re.compile(r'\\b' + pattern + r'\\b')\n    return [(m.group(0), m.start()) for m in pattern.finditer(text)]\n\n\n# Test case\ntext = \"This is a sample text that contains the string literal 'literal' and another string 'literal2' and a string 'LITERAL'.\"\npattern = 'literal'\nprint(find_literals(text, pattern)) # Should return [('literal', 15), ('literal2', 37), ('LITERAL', 55)]\n\ntext = \"This is a sample text that contains the string 'literal' and another string 'literal2' and a string 'LITERAL'.\"\npattern = 'lit'\nprint(find_literals(text, pattern)) # Should return [('literal', 15), ('literal2', 37), ('LITERAL', 55)]\n\ntext = \"This is a sample text that contains the string 'literal' and another string 'literal2' and a string 'LITERAL'.\"\npattern = 'LIT'\nprint(find_literals(text, pattern)) # Should return [('LITERAL', 55)]\n\ntext = \"This is a sample text that contains the string 'literal' and another string 'literal2' and a string 'LITERAL'.\"\npattern = 'not_found'\nprint(find_literals(text, pattern)) # Should return []\n\n",
        "generated_testcode": "assert find_literals(\"The quick brown fox jumps over the lazy dog\", \"fox\") == (True, 10)\n",
        "test": "assert find_literals('The quick brown fox jumps over the lazy dog.', 'fox') == ('fox', 16, 19)\nassert find_literals('Its been a very crazy procedure right', 'crazy') == ('crazy', 16, 21)\nassert find_literals('Hardest choices required strongest will', 'will') == ('will', 35, 39)",
        "canonical_solution": "import re\r\npattern = 'fox'\r\ntext = 'The quick brown fox jumps over the lazy dog.'\r\ndef find_literals(text, pattern):\r\n  match = re.search(pattern, text)\r\n  s = match.start()\r\n  e = match.end()\r\n  return (match.re.pattern, s, e)"
    },
    {
        "number": 608,
        "prompt": "Write a python function to find nth bell number.\ndef bell_Number(n): \n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    def bell(n, k): \n        if n == 0: \n            return 1\n        elif k == 0: \n            return 1\n        else: \n            return bell(n-1, k-1) + bell(n-1, k) \n      \n    return bell(n, n) \n  \n# Driver code \nn = 5\nprint(\"Bell Number is:\", bell_Number(n)) ",
        "generated_testcode": "assert bell_Number(0) == 1\n",
        "test": "assert bell_Number(2) == 2\nassert bell_Number(3) == 5\nassert bell_Number(4) == 15",
        "canonical_solution": "def bell_Number(n): \r\n    bell = [[0 for i in range(n+1)] for j in range(n+1)] \r\n    bell[0][0] = 1\r\n    for i in range(1, n+1):\r\n        bell[i][0] = bell[i-1][i-1]\r\n        for j in range(1, i+1): \r\n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1] \r\n    return bell[n][0] "
    },
    {
        "number": 609,
        "prompt": "Write a python function to find minimum possible value for the given periodic function.\ndef floor_Min(A,B,N):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    M = min(A)\n    for i in range(N):\n        M = min(M,A[i]-B[i])\n    return M\n\n#Testing the function\nA = [3, 2, 5, 1, 4, 6, 8]\nB = [4, 7, 2, 1, 8, 3]\nN = 4\nprint(floor_Min(A,B,N))\n\n# Output: 1\n\n\nA = [3, 2, 5, 1, 4, 6, 8]\nB = [4, 7, 2, 1, 8, 3]\nN = 4\nprint(floor_Min(A,B,N))\n# Output: 1\n\nA = [3, 2, 5, 1, 4, 6, 8]\nB = [4, 7, 2, 1, 8, 3]\nN = 3\nprint(floor_Min(A,B,N))\n# Output: 1\n\nA = [3, 2, 5, 1, 4, 6, 8]\nB = [4, 7, 2, 1, 8, 3]\nN = 5\nprint(floor_Min(A,B,N))\n# Output: 1",
        "generated_testcode": "assert floor_Min(1,2,3) == 1\n",
        "test": "assert floor_Min(10,20,30) == 15\nassert floor_Min(1,2,1) == 0\nassert floor_Min(11,10,9) == 9",
        "canonical_solution": "def floor_Min(A,B,N):\r\n    x = max(B - 1,N)\r\n    return (A*x) // B"
    },
    {
        "number": 610,
        "prompt": "Write a python function to remove the k'th element from a given list.\ndef remove_kth_element(list1, L):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    # length of list1\n    n = len(list1)\n    # if k is greater than length of list1, return the list1 as it is\n    if k > n:\n        return list1\n    # create a new list to store the elements of list1 without the k'th element\n    new_list = []\n    # iterate through the list1\n    for i in range(n):\n        # if the index is not equal to k, append the element to the new list\n        if i != k:\n            new_list.append(list1[i])\n    # return the new list without the kth element\n    return new_list\n\n\n# test the function\nlist1 = [1, 2, 3, 4, 5, 6, 7, 8, 9]\nk = 3\nprint(remove_kth_element(list1, k))\n# Output: [1, 2, 3, 4, 5, 7, 8, 9]\n\nlist2 = [1, 2, 3, 4, 5, 6, 7, 8]\nk = 1\nprint(remove_kth_element(list2, k))\n# Output: [2, 3, 4, 5, 6, 7, 8]\nlist3 = [1, 2, 3, 4, 5, 6]\nk = 4\nprint(remove_kth_element(list3, k))",
        "generated_testcode": "assert remove_kth_element([1,2,3,4,5,6,7,8,9], 3) == [1,2,4,5,6,7,8,9]\n",
        "test": "assert remove_kth_element([1,1,2,3,4,4,5,1],3)==[1, 1, 3, 4, 4, 5, 1]\nassert remove_kth_element([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4],4)==[0, 0, 1, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]\nassert remove_kth_element([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10],5)==[10,10,15,19, 18, 17, 26, 26, 17, 18, 10]",
        "canonical_solution": "def remove_kth_element(list1, L):\r\n    return  list1[:L-1] + list1[L:]"
    },
    {
        "number": 611,
        "prompt": "Write a function to find the maximum of nth column from the given tuple list.\ndef max_of_nth(test_list, N):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    max_val = test_list[0][N-1]\n    for i in range(1, len(test_list)):\n        if test_list[i][N-1] > max_val:\n            max_val = test_list[i][N-1]\n    return max_val\n\n# test_list = [(1, 2, 3, 4), (5, 6, 7), (9, 8, 10), (11, 12, 13), (14, 15, 16)]\n# N = 3\n# print(max_of_nth(test_list, N))  # Output: 16\n\n# test_list = [(1, 2, 3, 4), (5, 6, 7), (9, 8, 10), (11, 12, 13), (14, 15, 16), (19, 18, 17)]\n# N = 2\n# print(max_of_nth(test_list, N))  # Output: 9\n\n\n#test_list = [(1, 2, 3, 4), (5, 6, 7), (9, 8, 10), (11, 12, 13), (14, 15, 16), (19, 18, 17), (21, 22, 23)]",
        "generated_testcode": "assert max_of_nth([(1,2,3,4), (5,6,7), (8,9,10)], 2) == 10\n",
        "test": "assert max_of_nth([(5, 6, 7), (1, 3, 5), (8, 9, 19)], 2) == 19\nassert max_of_nth([(6, 7, 8), (2, 4, 6), (9, 10, 20)], 1) == 10\nassert max_of_nth([(7, 8, 9), (3, 5, 7), (10, 11, 21)], 1) == 11",
        "canonical_solution": "def max_of_nth(test_list, N):\r\n  res = max([sub[N] for sub in test_list])\r\n  return (res) "
    },
    {
        "number": 612,
        "prompt": "Write a python function to merge the first and last elements separately in a list of lists.\ndef merge(lst):  \n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    # Initialize empty list to hold the merged elements  \n    merged = []  \n    # Loop through the input list  \n    for sublist in lst:  \n        # Get the first and last elements of each sublist  \n        first_elem = sublist[0]  \n        last_elem = sublist[-1]  \n        # Append the first and last elements to the merged list  \n        merged.append(first_elem)  \n        merged.append(last_elem)  \n    # Return the merged list  \n    return merged  \n\n# Example usage  \nlst = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]  \nprint(merge(lst)) # Output: [1, 7, 2, 8, 3, 9]  \n\n# Example usage  \nlst = [['a', 'b', 'c'], ['d', 'e', 'f'], ['g', 'h', 'i']]  \nprint(merge(lst)) # Output: ['a', 'g', 'b', 'h', 'c', 'i', 'd', 'f'] ",
        "generated_testcode": "assert merge([[1,2,3],[4,5,6],[7,8,9]) == [[1,9],[4,3],[7,6,5,8]\n",
        "test": "assert merge([['x', 'y'], ['a', 'b'], ['m', 'n']]) == [['x', 'a', 'm'], ['y', 'b', 'n']]\nassert merge([[1, 2], [3, 4], [5, 6], [7, 8]]) == [[1, 3, 5, 7], [2, 4, 6, 8]]\nassert merge([['x', 'y','z' ], ['a', 'b','c'], ['m', 'n','o']]) == [['x', 'a', 'm'], ['y', 'b', 'n'],['z', 'c','o']]",
        "canonical_solution": "def merge(lst):  \r\n    return [list(ele) for ele in list(zip(*lst))] "
    },
    {
        "number": 613,
        "prompt": "Write a function to find the maximum value in record list as tuple attribute in the given tuple list.\ndef maximum_value(test_list):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    max_value = max(test_list, key=lambda x: x[1])\n    return max_value\n\n\n# Test the function\ntest_list = [('John', 20), ('Emma', 18), ('Adam', 22), ('Amy', 19), ('Peter', 25), ('Tom', 17)]\nprint(maximum_value(test_list)) # Output: ('Peter', 25)\n\ntest_list = [('John', 90), ('Emma', 88), ('Adam', 77), ('Amy', 89), ('Peter', 75), ('Tom', 88)]\nprint(maximum_value(test_list)) # Output: ('John', 90)",
        "generated_testcode": "assert maximum_value([(1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == (10, 9)\n",
        "test": "assert maximum_value([('key1', [3, 4, 5]), ('key2', [1, 4, 2]), ('key3', [9, 3])]) == [('key1', 5), ('key2', 4), ('key3', 9)]\nassert maximum_value([('key1', [4, 5, 6]), ('key2', [2, 5, 3]), ('key3', [10, 4])]) == [('key1', 6), ('key2', 5), ('key3', 10)]\nassert maximum_value([('key1', [5, 6, 7]), ('key2', [3, 6, 4]), ('key3', [11, 5])]) == [('key1', 7), ('key2', 6), ('key3', 11)]",
        "canonical_solution": "def maximum_value(test_list):\r\n  res = [(key, max(lst)) for key, lst in test_list]\r\n  return (res) "
    },
    {
        "number": 614,
        "prompt": "Write a function to find the cumulative sum of all the values that are present in the given tuple list.\ndef cummulative_sum(test_list):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    # Initialize a variable to store the cumulative sum\n    cum_sum = 0\n    # Loop through the list and add each value to the cumulative sum\n    for i in test_list:\n        cum_sum += i\n        # Return the cumulative sum\n        return cum_sum\n\n\n# Test the function\nprint(cummulative_sum((1,2,3,4,5,6,7,8,9))\n# Output: 25 ",
        "generated_testcode": "assert cummulative_sum((1,2,3,4,5,6,7,8,9) == (1,3,6,10,15,21,28,36)\n",
        "test": "assert cummulative_sum([(1, 3), (5, 6, 7), (2, 6)]) == 30\nassert cummulative_sum([(2, 4), (6, 7, 8), (3, 7)]) == 37\nassert cummulative_sum([(3, 5), (7, 8, 9), (4, 8)]) == 44",
        "canonical_solution": "def cummulative_sum(test_list):\r\n  res = sum(map(sum, test_list))\r\n  return (res)"
    },
    {
        "number": 615,
        "prompt": "Write a function to find average value of the numbers in a given tuple of tuples.\ndef average_tuple(nums):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    total = 0\n    count = 0\n    for tup in nums:\n        for num in tup:\n            total += num\n            count += 1\n    return total / count\n\n\n# Test the function\nnums = ((1,2,3,4),(5,6,7),(8,9,10)\nprint(average_tuple(nums)) # Output: 6.0 ",
        "generated_testcode": "assert average_tuple(((1, 2, 3, 4, 5)) == 3.0)\n",
        "test": "assert average_tuple(((10, 10, 10, 12), (30, 45, 56, 45), (81, 80, 39, 32), (1, 2, 3, 4)))==[30.5, 34.25, 27.0, 23.25]\nassert average_tuple(((1, 1, -5), (30, -15, 56), (81, -60, -39), (-10, 2, 3)))== [25.5, -18.0, 3.75]\nassert average_tuple( ((100, 100, 100, 120), (300, 450, 560, 450), (810, 800, 390, 320), (10, 20, 30, 40)))==[305.0, 342.5, 270.0, 232.5]",
        "canonical_solution": "def average_tuple(nums):\r\n    result = [sum(x) / len(x) for x in zip(*nums)]\r\n    return result"
    },
    {
        "number": 616,
        "prompt": "Write a function to perfom the modulo of tuple elements in the given two tuples.\ndef tuple_modulo(test_tup1, test_tup2):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    \"\"\"\n    This function takes two tuples as input and returns a new tuple containing the modulo of their corresponding elements.\n    \"\"\"\n    mod_list = []\n    for i in range(len(test_tup1)):\n        mod_list.append(test_tup1[i] % test_tup2[i])\n    return tuple(mod_list)\n\n# Test the function\nprint(tuple_modulo((2, 3, 4, 5, 6), (2, 4, 3, 7)))\n# Output: (0, 1, 1, 5)\n\nprint(tuple_modulo((10, 20, 30, 40), (3, 5, 7, 11))\n# Output: (1, 0, 2, 0)\n\n# Test the function with invalid input\nprint(tuple_modulo((1, 2, 3), (4, 5, 6, 7)) # Should raise an error since the two tuples have different lengths\n\n# Test the function with invalid input\nprint(tuple_modulo(5, (1, 2, 3)) # Should raise a TypeError since the first argument is not a tuple\n\n# Test the function with invalid input\nprint(tuple_modulo((1, 2, 3), 5) # Should raise a TypeError since the second argument is not a tuple\n\n# Test the function with negative numbers\nprint(tuple_modulo((-3, -5, -",
        "generated_testcode": "assert tuple_modulo((10, 20, 30, 40, 50), (2, 3, 4, 5)) == (0, 2, 1, 4)\n",
        "test": "assert tuple_modulo((10, 4, 5, 6), (5, 6, 7, 5)) == (0, 4, 5, 1)\nassert tuple_modulo((11, 5, 6, 7), (6, 7, 8, 6)) == (5, 5, 6, 1)\nassert tuple_modulo((12, 6, 7, 8), (7, 8, 9, 7)) == (5, 6, 7, 1)",
        "canonical_solution": "def tuple_modulo(test_tup1, test_tup2):\r\n  res = tuple(ele1 % ele2 for ele1, ele2 in zip(test_tup1, test_tup2)) \r\n  return (res) "
    },
    {
        "number": 617,
        "prompt": "Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\ndef min_Jumps(a, b, d): \n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    #a, b are the lengths of the two sides of the plane and d is the distance from the origin to the target point (d, 0)\n    if d==0:\n        return 0\n    else:\n        return min(a//d, b//d)+min_Jumps(a, b, min(a,b)-1)\n\n#Example:\na=4\nb=6\nd=2\nprint(min_Jumps(a,b,d)) #Output: 2\n\na=10\nb=10\nd=14\nprint(min_Jumps(a,b,d)) #Output: 3\n\na=6\nb=6\nd=1\nprint(min_Jumps(a,b,d)) #Output: 1\n\na=10\nb=6\nd=3\nprint(min_Jumps(a,b,d)) #Output: 2 ",
        "generated_testcode": "assert min_Jumps(1, 1, 2) == 1\n",
        "test": "assert min_Jumps(3,4,11)==3.5\nassert min_Jumps(3,4,0)==0\nassert min_Jumps(11,14,11)==1",
        "canonical_solution": "def min_Jumps(a, b, d): \r\n    temp = a \r\n    a = min(a, b) \r\n    b = max(temp, b) \r\n    if (d >= b): \r\n        return (d + b - 1) / b \r\n    if (d == 0): \r\n        return 0\r\n    if (d == a): \r\n        return 1\r\n    else:\r\n        return 2"
    },
    {
        "number": 618,
        "prompt": "Write a function to divide two lists using map and lambda function.\ndef div_list(nums1,nums2):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    return list(map(lambda x,y: x/y, nums1,nums2))\n\n\nnums1 = [10,20,30,40,50]\nnums2 = [2,5,10,15,20]\nprint(div_list(nums1,nums2)) # Output: [5.0, 4.0, 2.0, 2.5]\n\n\n# Write a function to multiply two lists using map and lambda function\ndef mul_list(nums1,nums2):\n    return list(map(lambda x,y: x*y, nums1,nums2))\n\n\nnums1 = [10,20,30,40,50]\nnums2 = [2,5,10,15,20]\nprint(mul_list(nums1,nums2)) # Output: [20, 100, 45, 60]\n\n\n# Write a function to add two lists using map and lambda function\ndef add_list(nums1,nums2):\n    return list(map(lambda x,y: x+y, nums1,nums2))\n\n\nnums1 = [10,20,30,40,50]\nnums2 = [2,5,10,15,20]\nprint(add_list(nums1,nums2)) # Output: [1",
        "generated_testcode": "assert div_list([1,2,3,4,5], [2,3,4,5]) == [0.5, 0.666666666666666666666666, 1.0]\n",
        "test": "assert div_list([4,5,6],[1, 2, 3])==[4.0,2.5,2.0]\nassert div_list([3,2],[1,4])==[3.0, 0.5]\nassert div_list([90,120],[50,70])==[1.8, 1.7142857142857142]",
        "canonical_solution": "def div_list(nums1,nums2):\r\n  result = map(lambda x, y: x / y, nums1, nums2)\r\n  return list(result)"
    },
    {
        "number": 619,
        "prompt": "Write a function to move all the numbers in it to the given string.\ndef move_num(test_str):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    result = []\n    num = ''\n    for char in test_str:\n        if char.isdigit():\n            num += char\n        else:\n            if num:\n                result.append(num)\n                num = ''\n    if num:\n        result.append(num)\n    return ' '.join(result)\n\n\n# Test cases\nprint(move_num('a1b2c3d4e5f6g')) # '1 2 3 4 5 6'\nprint(move_num('12345abcde')) # '1 2 3 4 5'\nprint(move_num('hello')) # ''\nprint(move_num('1 2 3 4 5 6 world')) # '1 2 3 4 5 6'\nprint(move_num('1a2b3c4d5e6f')) # '1 2 3 4 5 6'\nprint(move_num('12 34 56 78 90')) # '12 34 56 78 90'\nprint(move_num('hello world')) # ''\nprint(move_num('1 2 3 4 5 6 7')) # '1 2 3 4 5 6 7'\nprint(move_num('  1  2 3  4 5  6  ')) # '1 2 3 4 5'\n",
        "generated_testcode": "assert move_num(\"123abc456\") == \"abc123456\"\n",
        "test": "assert move_num('I1love143you55three3000thousand') == 'Iloveyouthreethousand1143553000'\nassert move_num('Avengers124Assemble') == 'AvengersAssemble124'\nassert move_num('Its11our12path13to14see15things16do17things') == 'Itsourpathtoseethingsdothings11121314151617'",
        "canonical_solution": "def move_num(test_str):\r\n  res = ''\r\n  dig = ''\r\n  for ele in test_str:\r\n    if ele.isdigit():\r\n      dig += ele\r\n    else:\r\n      res += ele\r\n  res += dig\r\n  return (res) "
    },
    {
        "number": 620,
        "prompt": "Write a function to find the largest subset where each pair is divisible.\ndef largest_subset(a, n):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    def is_divisible(x, y):\n        return x % y == 0 or y % x == 0\n\n    a.sort(reverse=True)\n    res = []\n    for i in range(len(a)):\n        temp = []\n        temp.append(a[i])\n        j = i + 1\n        while j < len(a) and is_divisible(a[i], a[j]):\n            temp.append(a[j])\n            j += 1\n        res.append(temp)\n    return res\n\n\n# Test the function\na = [6, 9, 3, 9, 3, 6, 1, 18, 9, 12, 15, 27, 27, 12]\nprint(largest_subset(a, 3))\n# Output: [[18, 27], [12, 9, 15], [9, 6, 9], [3, 3, 6]]\n\n\na = [10, 15, 5, 6, 15, 25, 20, 18, 20, 25, 1, 5, 12, 25, 15]\nprint(largest_subset(a, 4))\n# Output: [[25, 25, 20, 15, 15], [10, 15, ",
        "generated_testcode": "assert largest_subset([1, 2, 3, 4, 6, 8, 12, 15, 21, 24, 30, 45, 60] , 15) == [15, 30]\n",
        "test": "assert largest_subset([ 1, 3, 6, 13, 17, 18 ], 6) == 4\nassert largest_subset([10, 5, 3, 15, 20], 5) == 3\nassert largest_subset([18, 1, 3, 6, 13, 17], 6) == 4",
        "canonical_solution": "def largest_subset(a, n):\r\n\tdp = [0 for i in range(n)]\r\n\tdp[n - 1] = 1; \r\n\tfor i in range(n - 2, -1, -1):\r\n\t\tmxm = 0;\r\n\t\tfor j in range(i + 1, n):\r\n\t\t\tif a[j] % a[i] == 0 or a[i] % a[j] == 0:\r\n\t\t\t\tmxm = max(mxm, dp[j])\r\n\t\tdp[i] = 1 + mxm\r\n\treturn max(dp)"
    },
    {
        "number": 621,
        "prompt": "Write a function to increment the numeric values in the given strings by k.\ndef increment_numerics(test_list, K):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    output_list = []\n    for i in test_list:\n        num_string = \"\"\n        num = \"\"\n        for j in i:\n            if j.isdigit():\n                num += j\n            else:\n                if num:\n                    num = int(num)\n                    num += K\n                    num_string += str(num)\n                    num = \"\"\n                else:\n                    num_string += j\n        if num:\n            num = int(num)\n            num += K\n            num_string += str(num)\n        output_list.append(num_string)\n    return output_list\n\n\n# test cases\ntest_list = [\"a1b2c3\", \"b8c5\", \"test3one\", \"1234test\", \"56789\", \"987654321\"]\nK = 5\nprint(increment_numerics(test_list, K))\n# Output: ['a6b7c8', 'b13c10', 'test8one', '1239test', '103155472']\n\ntest_list = [\"a1b2c3\", \"b8c5\", \"test3one\", \"1234test\", \"56789\", \"987654321\"]\nK = 10\nprint(increment_numerics(test_list, K))\n# Output: ['a11b3c4', 'b13",
        "generated_testcode": "assert increment_numerics([\"a1b2c3\", \"d4e5f6\", \"g7h8i9\"], 2) == [\"a3b4c5\", \"d6e7f8\", \"g9h10i11\"]\n",
        "test": "assert increment_numerics([\"MSM\", \"234\", \"is\", \"98\", \"123\", \"best\", \"4\"] , 6) == ['MSM', '240', 'is', '104', '129', 'best', '10']\nassert increment_numerics([\"Dart\", \"356\", \"is\", \"88\", \"169\", \"Super\", \"6\"] , 12) == ['Dart', '368', 'is', '100', '181', 'Super', '18']\nassert increment_numerics([\"Flutter\", \"451\", \"is\", \"44\", \"96\", \"Magnificent\", \"12\"] , 33) == ['Flutter', '484', 'is', '77', '129', 'Magnificent', '45']",
        "canonical_solution": "def increment_numerics(test_list, K):\r\n  res = [str(int(ele) + K) if ele.isdigit() else ele for ele in test_list]\r\n  return res "
    },
    {
        "number": 622,
        "prompt": "Write a function to find the median of two sorted arrays of same size.\ndef get_median(arr1, arr2, n):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    if n % 2 == 0:\n        return (arr1[n//2 - 1] + arr1[n//2])/2.0\n    else:\n        if arr1[n//2] > arr2[n//2]:\n            return arr1[n//2]\n        else:\n            return arr2[n//2]\n\n\n# Test cases\nprint(get_median([1,2,3,4,5], [3,4,5,6], 3)) # Output: 4\nprint(get_median([1,2,3,4,5], [6,7,8,9], 3)) # Output: 4\nprint(get_median([1,2,3,4,5], [5,6,7,8], 3)) # Output: 4\nprint(get_median([1,2,3,4,5], [4,5,6,7], 3)) # Output: 4.5\nprint(get_median([1,2,3,4,5], [6,7,8], 3)) # Output: 4\nprint(get_median([6,7,8], [1,2,3,4,5], 3)) # Output: 4\nprint(get_median([1,2,3,4,5], [5,6,7,8], 3)) # Output: 4\nprint(get_median([1,2,3], [4,5,",
        "generated_testcode": "assert get_median([1, 2, 3, 4, 5, 6], [2, 3, 4, 5, 6] , 4) == 4\n",
        "test": "assert get_median([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0\nassert get_median([2, 4, 8, 9], [7, 13, 19, 28], 4) == 8.5\nassert get_median([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6) == 25.0",
        "canonical_solution": "def get_median(arr1, arr2, n):\r\n  i = 0\r\n  j = 0\r\n  m1 = -1\r\n  m2 = -1\r\n  count = 0\r\n  while count < n + 1:\r\n    count += 1\r\n    if i == n:\r\n      m1 = m2\r\n      m2 = arr2[0]\r\n      break\r\n    elif j == n:\r\n      m1 = m2\r\n      m2 = arr1[0]\r\n      break\r\n    if arr1[i] <= arr2[j]:\r\n      m1 = m2\r\n      m2 = arr1[i]\r\n      i += 1\r\n    else:\r\n      m1 = m2\r\n      m2 = arr2[j]\r\n      j += 1\r\n  return (m1 + m2)/2"
    },
    {
        "number": 623,
        "prompt": "Write a function to find the n-th power of individual elements in a list using lambda function.\ndef nth_nums(nums,n):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    return list(map(lambda x: x**n, nums))\n\n#Test the function\nnums = [2, 3, 4, 5]\nn = 2\nprint(nth_nums(nums, n))\n\n#Output: [4, 9, 25]\n",
        "generated_testcode": "assert nth_nums([1,2,3,4,5],2) == [1, 4, 27, 256]\n",
        "test": "assert nth_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],2)==[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]\nassert nth_nums([10,20,30],3)==([1000, 8000, 27000])\nassert nth_nums([12,15],5)==([248832, 759375])",
        "canonical_solution": "def nth_nums(nums,n):\r\n nth_nums = list(map(lambda x: x ** n, nums))\r\n return nth_nums"
    },
    {
        "number": 624,
        "prompt": "Write a python function to convert the given string to upper case.\ndef is_upper(string):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    return string.isupper()\n\n# Test cases\nprint(is_upper(\"Hello World\")) # Output: False\nprint(is_upper(\"HELLO WORLD\")) # Output: True\nprint(is_upper(\"hello world\")) # Output: False\nprint(is_upper(\"\")) # Output: False\nprint(is_upper(\"12345\")) # Output: False\n\n\n# Write a python function to reverse a given string\ndef reverse_string(string):\n    return string[::-1]\n\n# Test cases\nprint(reverse_string(\"hello\")) # Output: \"olleh\"\nprint(reverse_string(\"racecar\")) # Output: \"racecar\"\nprint(reverse_string(\"Python\")) # Output: \"nohtyP\"\nprint(reverse_string(\"\")) # Output: \"\"\n\n# Write a python function to count the number of vowels in a given string\ndef count_vowels(string):\n    vowels = \"aeiouAEIOU\"\n    count = 0\n    for char in string:\n        if char in vowels:\n            count += 1\n    return count\n\n# Test cases\nprint(count_vowels(\"hello\")) # Output: 2\nprint(count_vowels(\"Python\")) # Output: 3\nprint(count_vowels(\"\")) # Output: 0\n\n# Write a python function to remove all vowels from a given string\ndef remove_vowels(string):\n    vowels = \"aeiou",
        "generated_testcode": "assert is_upper(\"Hello World\") == \"HELLO WORLD\"\n",
        "test": "assert is_upper(\"person\") ==\"PERSON\"\nassert is_upper(\"final\") == \"FINAL\"\nassert is_upper(\"Valid\") == \"VALID\"",
        "canonical_solution": "def is_upper(string):\r\n  return (string.upper())"
    },
    {
        "number": 625,
        "prompt": "Write a python function to interchange first and last elements in a given list.\ndef swap_List(newList): \n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    if len(newList) < 2:\n        return newList\n    else:\n        first = newList[0]\n        last = newList[-1]\n        newList[0] = last\n        newList[-1] = first\n        return newList\n    \n#Test the function with sample input\nprint(swap_List([1,2,3,4,5])) #Expected Output: [5,2,3,4,1] ",
        "generated_testcode": "assert swap_List([1,2,3,4,5,6,7,8]) == [8,2,3,4,5,6,7]\n",
        "test": "assert swap_List([1,2,3]) == [3,2,1]\nassert swap_List([1,2,3,4,4]) == [4,2,3,4,1]\nassert swap_List([4,5,6]) == [6,5,4]",
        "canonical_solution": "def swap_List(newList): \r\n    size = len(newList) \r\n    temp = newList[0] \r\n    newList[0] = newList[size - 1] \r\n    newList[size - 1] = temp   \r\n    return newList "
    },
    {
        "number": 626,
        "prompt": "Write a python function to find the largest triangle that can be inscribed in the semicircle.\ndef triangle_area(r) :  \n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    \"\"\"\n    This function takes a radius of a semicircle and returns the area of the largest triangle that can be inscribed in it\n    \"\"\"\n    # Convert the radius to diameter\n    diameter = 2 * r\n    # Calculate the area of the semicircle\n    semicircle_area = 0.5 * r ** 2 * pi\n    # Calculate the area of the triangle\n    triangle_area = 0.5 * diameter * r\n    # Return the area of the largest triangle that can be inscribed in the semicircle\n    return semicircle_area - triangle_area\n\n# Test the function\nprint(triangle_area(2)) # Output: 1.57079632677548861774\nprint(triangle_area(3)) # Output: 4.242640685110010059\nprint(triangle_area(4)) # Output: 7.853981633397448488\nprint(triangle_area(5)) # Output: 12.5663706143594015256\nprint(triangle_area(6)) # Output: 19.6158583189048635577\n",
        "generated_testcode": "assert triangle_area(3) == 1.89272193079968817585\n",
        "test": "assert triangle_area(0) == 0\nassert triangle_area(-1) == -1\nassert triangle_area(2) == 4",
        "canonical_solution": "def triangle_area(r) :  \r\n    if r < 0 : \r\n        return -1\r\n    return r * r "
    },
    {
        "number": 627,
        "prompt": "Write a python function to find the smallest missing number from the given array.\ndef find_First_Missing(array,start,end): \n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    if end < start:\n        return start\n    if array[start] != start + 1:\n        return start\n    if array[end] == end+1:\n        return end+1\n    mid = (start + end) // 2\n    if array[mid] == mid + 1:\n        return find_First_Missing(array,mid+1,end)\n    elif array[mid] > mid + 1:\n        return find_First_Missing(array,start,mid-1)\n    else:\n        return find_First_Missing(array,mid+1,end)\n    return array[mid+1]\n\n#Main function\ndef main():\n    array = [1,2,3,5,6,7,9,10]\n    n = len(array)\n    start = 0\n    end = n-1\n    print(find_First_Missing(array,start,end))\n    \nif __name__ == \"__main__\":\n    main()\n\n#Output: 4\n\n\n#Example 2\narray = [1,2,3,4,5,7,8,9,10,11,13]\nn = len(array)\nstart = 0\nend = n-1\nprint(find_First_Missing(array,start,end))\n#Output: 6\n\n\n#Example 3\narray = [1,2,3,4,5,6,7,8,9,10",
        "generated_testcode": "assert find_First_Missing([1,2,3,4,5,6,7,8,9,10],0,9) == 1\n",
        "test": "assert find_First_Missing([0,1,2,3],0,3) == 4\nassert find_First_Missing([0,1,2,6,9],0,4) == 3\nassert find_First_Missing([2,3,5,8,9],0,4) == 0",
        "canonical_solution": "def find_First_Missing(array,start,end): \r\n    if (start > end): \r\n        return end + 1\r\n    if (start != array[start]): \r\n        return start; \r\n    mid = int((start + end) / 2) \r\n    if (array[mid] == mid): \r\n        return find_First_Missing(array,mid+1,end) \r\n    return find_First_Missing(array,start,mid) "
    },
    {
        "number": 628,
        "prompt": "Write a function to replace all spaces in the given string with character * list item * list item * list item * list item '%20'.\ndef replace_spaces(string):\n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    result = ''\n    for char in string:\n        if char == ' ':\n            result += '%20'\n        else:\n            result += char\n    return result\n\n# Test cases\nprint(replace_spaces('hello world')) # Output: hello%20world\nprint(replace_spaces('Mr John Smith')) # Output: Mr%20John%20Smith\nprint(replace_spaces('  hello   world  ')) # Output: %20hello%20%20%20world%20%20%20\n\n# Time complexity: O(n), where n is the length of the string\n# Space complexity: O(n) to create the new string",
        "generated_testcode": "assert replace_spaces(\"Hello World\") == \"Hello%20World\"\n",
        "test": "assert replace_spaces(\"My Name is Dawood\") == 'My%20Name%20is%20Dawood'\nassert replace_spaces(\"I am a Programmer\") == 'I%20am%20a%20Programmer'\nassert replace_spaces(\"I love Coding\") == 'I%20love%20Coding'",
        "canonical_solution": "MAX=1000;\r\ndef replace_spaces(string):\r\n  string=string.strip()\r\n  i=len(string)\r\n  space_count=string.count(' ')\r\n  new_length = i + space_count*2\r\n  if new_length > MAX:\r\n    return -1\r\n  index = new_length-1\r\n  string=list(string)\r\n  for f in range(i-2, new_length-2):\r\n    string.append('0')\r\n  for j in range(i-1, 0, -1):\r\n    if string[j] == ' ':\r\n      string[index] = '0'\r\n      string[index-1] = '2'\r\n      string[index-2] = '%'\r\n      index=index-3\r\n    else:\r\n      string[index] = string[j]\r\n      index -= 1\r\n  return ''.join(string)"
    },
    {
        "number": 629,
        "prompt": "Write a python function to find even numbers from a mixed list.\ndef Split(list): \n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    even_numbers = [] \n    for num in list: \n        if num%2 == 0: \n            even_numbers.append(num) \n    return even_numbers \n\n\n# Test the function \nmixed_list = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15] \nprint(\"Even numbers in the mixed list:\", Split(mixed_list)) ",
        "generated_testcode": "assert Split([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]) == [2,4,6,8,10,12,14]\n",
        "test": "assert Split([1,2,3,4,5]) == [2,4]\nassert Split([4,5,6,7,8,0,1]) == [4,6,8,0]\nassert Split ([8,12,15,19]) == [8,12]",
        "canonical_solution": "def Split(list): \r\n    ev_li = [] \r\n    for i in list: \r\n        if (i % 2 == 0): \r\n            ev_li.append(i)  \r\n    return ev_li"
    },
    {
        "number": 630,
        "prompt": "Write a function to extract all the adjacent coordinates of the given coordinate tuple.\ndef adjac(ele, sub = []): \n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    # possible moves\n    dir = [(0, 1), (0, -1), (1, 0), (-1, 0), (1, 1), (-1, 1), (1, -1), (-1, 1)]\n    # checking each possible move\n    for d in dir:\n        adj = (ele[0] + d[0], ele[1] + d[1])\n        # if valid move\n        if 0 <= adj[0] < 8 and 0 <= adj[1] < 8 and adj not in sub:\n            # adding the coordinate to the list\n            sub.append(adj)\n            # recursively calling the function\n            adjac(adj, sub)\n    return sub\n\n# Testing the function\ncoord = (3, 3)\nprint(adjac(coord))\n\n\n# Output: [(4, 2), (3, 2), (2, 3), (2, 4), (4, 4), (3, 4), (4, 3)]\n# Explanation: ",
        "generated_testcode": "assert adjac((0,0)) == [(0,1), (1,0), (0, -1), (-1,0)]\n",
        "test": "assert get_coordinates((3, 4)) == [[2, 3], [2, 4], [2, 5], [3, 3], [3, 4], [3, 5], [4, 3], [4, 4], [4, 5]]\nassert get_coordinates((4, 5)) ==[[3, 4], [3, 5], [3, 6], [4, 4], [4, 5], [4, 6], [5, 4], [5, 5], [5, 6]]\nassert get_coordinates((5, 6)) == [[4, 5], [4, 6], [4, 7], [5, 5], [5, 6], [5, 7], [6, 5], [6, 6], [6, 7]]",
        "canonical_solution": "def adjac(ele, sub = []): \r\n  if not ele: \r\n     yield sub \r\n  else: \r\n     yield from [idx for j in range(ele[0] - 1, ele[0] + 2) \r\n                for idx in adjac(ele[1:], sub + [j])] \r\ndef get_coordinates(test_tup):\r\n  res = list(adjac(test_tup))\r\n  return (res) "
    },
    {
        "number": 631,
        "prompt": "Write a function to replace whitespaces with an underscore and vice versa in a given string by using regex.\ndef replace_spaces(text):\n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    import re\n    return re.sub(r\"\\s\", \"_\", text)\n\n# Test cases\nprint(replace_spaces(\"hello world\")) # Output: h_e_l_l_o_w_o_r_l_d\nprint(replace_spaces(\"Hello World!\")) # Output: H_e_l_l_o_W_o_r_l_d_!\nprint(replace_spaces(\"  Hello, how are you today?\")) # Output: _H_e_l_l_o,_h_o_w_a_r_y_o_u_t_o_d_a_y_?\nprint(replace_spaces(\"I am fine\")) # Output: I_a_m_f_i_n_e\nprint(replace_spaces(\"This is a test\")) # Output: T_h_i_s_i_s_a_t_e_s_t\n",
        "generated_testcode": "assert replace_spaces(\"Hello World\") == \"Hello_World\"\n",
        "test": "assert replace_spaces('Jumanji The Jungle') == 'Jumanji_The_Jungle'\nassert replace_spaces('The Avengers') == 'The_Avengers'\nassert replace_spaces('Fast and Furious') == 'Fast_and_Furious'",
        "canonical_solution": "import re\r\ntext = 'Python Exercises'\r\ndef replace_spaces(text):\r\n  text =text.replace (\" \", \"_\")\r\n  return (text)\r\n  text =text.replace (\"_\", \" \")\r\n  return (text)"
    },
    {
        "number": 632,
        "prompt": "Write a python function to move all zeroes to the end of the given list.\ndef move_zero(num_list):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    count = 0\n    for i in range(len(num_list)-1, 0, -1):\n        if num_list[i] == 0:\n            num_list.pop(i)\n            num_list.append(0)\n            count += 1\n        else:\n            pass\n    return num_list\n\n#Test the function\nnum_list = [1, 0, 0, 2, 0, 3, 4, 0, 6, 5, 0, 7]\nprint(move_zero(num_list))\n# Output: [1, 2, 3, 4, 5, 6, 7, 0, 0, 0, 0]\nnum_list = [0, 0, 0, 1, 2, 0, 4, 6, 0, 5, 0, 7]\nprint(move_zero(num_list))\n# Output: [1, 2, 4, 6, 5, 7, 0, 0, 0, 0, 0]\nnum_list = [1, 2, 3, 4, 5, 6, 7]\nprint(move_zero(num_list))\n# Output: [1, 2, 3, 4, 5, 6, 7] ",
        "generated_testcode": "assert move_zero([0, 1, 0, 2, 3, 0, 4, 0, 5, 0, 6, 0] ) == [1, 2, 3, 4, 5, 6, 0, 0, 0, 0]\n",
        "test": "assert move_zero([1,0,2,0,3,4]) == [1,2,3,4,0,0]\nassert move_zero([2,3,2,0,0,4,0,5,0]) == [2,3,2,4,5,0,0,0,0]\nassert move_zero([0,1,0,1,1]) == [1,1,1,0,0]",
        "canonical_solution": "def move_zero(num_list):\r\n    a = [0 for i in range(num_list.count(0))]\r\n    x = [ i for i in num_list if i != 0]\r\n    x.extend(a)\r\n    return (x)"
    },
    {
        "number": 633,
        "prompt": "Write a python function to find the sum of xor of all pairs of numbers in the given array.\ndef pair_OR_Sum(arr,n) : \n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    res = 0\n    for i in range(n) : \n        for j in range(n) : \n            if i != j : \n                res ^= arr[i] ^ arr[j]\n    return res \n\n#Testing the function \narr = [3, 4, 5, 6, 7, 8, 9]\nn = len(arr)\nprint(pair_OR_Sum(arr, n)) ",
        "generated_testcode": "assert pair_OR_Sum([1,2,3,4,5,6,7,8],5) == 12\n",
        "test": "assert pair_OR_Sum([5,9,7,6],4) == 47\nassert pair_OR_Sum([7,3,5],3) == 12\nassert pair_OR_Sum([7,3],2) == 4",
        "canonical_solution": "def pair_OR_Sum(arr,n) : \r\n    ans = 0 \r\n    for i in range(0,n) :    \r\n        for j in range(i + 1,n) :   \r\n            ans = ans + (arr[i] ^ arr[j])          \r\n    return ans "
    },
    {
        "number": 634,
        "prompt": "Write a python function to find the sum of fourth power of first n even natural numbers.\ndef even_Power_Sum(n): \n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    sum = 0\n    for i in range(1,n+1,2):\n        sum += i**4\n    return sum\n\n# Test the function with n=5\nprint(even_Power_Sum(5))\n# Output: 22025\n# Explanation: 1^4 + 4^4 + 16^4 + 36^4 + 64^4 + 100^4 = 22025 ",
        "generated_testcode": "assert even_Power_Sum(5) == 22025\n",
        "test": "assert even_Power_Sum(2) == 272\nassert even_Power_Sum(3) == 1568\nassert even_Power_Sum(4) == 5664",
        "canonical_solution": "def even_Power_Sum(n): \r\n    sum = 0; \r\n    for i in range(1,n + 1): \r\n        j = 2*i; \r\n        sum = sum + (j*j*j*j); \r\n    return sum; "
    },
    {
        "number": 635,
        "prompt": "Write a function to push all values into a heap and then pop off the smallest values one at a time.\ndef heap_sort(iterable):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    heap = []\n    for value in iterable:\n        heapq.heappush(heap, value)\n    return [heapq.heappop(heap) for _ in range(len(heap))]\n\n\n# Example usage:\nprint(heap_sort([3, 5, 1, 8, 2, 6, 9, 4, 7, 0]))  # Output: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n\n# We can also use heapify to create a heap from a list:\nheap = [3, 5, 1, 8, 2, 6, 9, 4, 7, 0]\nheapq.heapify(heap)\nprint(heap)  # Output: [0, 3, 1, 2, 8, 4, 5, 9, 7] \nheap_sort(heap)  # Output: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n",
        "generated_testcode": "assert heap_sort(range(10, 0, -1)) == [1, 2, 3, 4, 5, 6, 7, 8, 9]\n",
        "test": "assert heap_sort([1, 3, 5, 7, 9, 2, 4, 6, 8, 0])==[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert heap_sort([25, 35, 22, 85, 14, 65, 75, 25, 58])==[14, 22, 25, 25, 35, 58, 65, 75, 85]\nassert heap_sort( [7, 1, 9, 5])==[1,5,7,9]",
        "canonical_solution": "import heapq as hq\r\ndef heap_sort(iterable):\r\n    h = []\r\n    for value in iterable:\r\n        hq.heappush(h, value)\r\n    return [hq.heappop(h) for i in range(len(h))]"
    },
    {
        "number": 636,
        "prompt": "Write a python function to check if roots of a quadratic equation are reciprocal of each other or not.\ndef Check_Solution(a,b,c): \n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    if a!=0:\n        D=b**2-4*a*c\n        if D<0:\n            return False\n        else:\n            root1=(-b+math.sqrt(D))/2*a\n            root2=(-b-math.sqrt(D))/2*a\n            if root1/root2==1:\n                return True\n            else:\n                return False\n    else:\n        return False\n\n#Testing the function\na=2\nb=3\nc=4\nprint(Check_Solution(a,b,c)) #True ",
        "generated_testcode": "assert Check_Solution(1, -3, 2) == True\n",
        "test": "assert Check_Solution(2,0,2) == \"Yes\"\nassert Check_Solution(2,-5,2) == \"Yes\"\nassert Check_Solution(1,2,3) == \"No\"",
        "canonical_solution": "def Check_Solution(a,b,c): \r\n    if (a == c): \r\n        return (\"Yes\"); \r\n    else: \r\n        return (\"No\"); "
    },
    {
        "number": 637,
        "prompt": "Write a function to check whether the given amount has no profit and no loss\ndef noprofit_noloss(actual_cost,sale_amount): \n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    if(actual_cost > sale_amount):\n        return False\n    else:\n        return True\n\n# Test the function with sample input\nprint(noprofit_noloss(10000, 900)) # True\nprint(noprofit_noloss(10000, 1000)) # False ",
        "generated_testcode": "assert noprofit_noloss(100, 100) == True\n",
        "test": "assert noprofit_noloss(1500,1200)==False\nassert noprofit_noloss(100,100)==True\nassert noprofit_noloss(2000,5000)==False",
        "canonical_solution": "def noprofit_noloss(actual_cost,sale_amount): \r\n  if(sale_amount == actual_cost):\r\n    return True\r\n  else:\r\n    return False"
    },
    {
        "number": 638,
        "prompt": "Write a function to calculate wind chill index.\ndef wind_chill(v,t):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    \"\"\"\n    This function calculates the wind chill index based on the temperature and wind speed.\n    v is the wind speed in mph, t is the temperature in Fahrenheit.\n    Returns the wind chill index in degrees Fahrenheit.\n    \"\"\"\n    # convert speed to m/s\n    v_ms = v * 0.4477\n    # calculate wind chill index\n    wc = 13.12 + 0.6215 * t - 111.37 * v_ms ** 0.16 + 0.396 * t * v_ms ** 0.16\n    return round(wc, 2)\n\n# test the function with some inputs\nprint(wind_chill(5, 70)) # expected output: 72.83\nprint(wind_chill(30, 70)) # expected output: 66.04\nprint(wind_chill(40, 60)) # expected output: 62.08\nprint(wind_chill(50, 40)) # expected output: 55.65\n\n\n# test the function with some edge cases\nprint(wind_chill(0, 1000)) # expected output: -67.83\nprint(wind_chill(10, 50)) # expected output: 83.56\nprint(wind_chill(10, 100)) # expected output: 6",
        "generated_testcode": "assert round(wind_chill(10, 20), 2) == 18.61\n",
        "test": "assert wind_chill(120,35)==40\nassert wind_chill(40,70)==86\nassert wind_chill(10,100)==116",
        "canonical_solution": "import math\r\ndef wind_chill(v,t):\r\n windchill = 13.12 + 0.6215*t -  11.37*math.pow(v, 0.16) + 0.3965*t*math.pow(v, 0.16)\r\n return int(round(windchill, 0))"
    },
    {
        "number": 639,
        "prompt": "Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\ndef sample_nam(sample_names):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    total_length = 0\n    for name in sample_names:\n        if name[0].isupper():\n            total_length += len(name)\n    return total_length\n\n# Test cases\nprint(sample_nam(['Alice', 'Bob', 'Charlie', 'David', 'Eve'])) # Should return 13\nprint(sample_nam(['Alice', 'bob', 'Charlie', 'David', 'eve'])) # Should return 12\nprint(sample_nam(['Alice', 'Bob', 'Charlie', 'david', 'Eve'])) # Should return 11\nprint(sample_nam(['Alice', 'bob', 'charlie', 'david', 'eve'])) # Should return 0\nprint(sample_nam(['Alice', 'Bob', 'Charlie', 'david', 'Eve', '123'])) # Should return 13\nprint(sample_nam(['Alice', 'bob', 'Charlie', 'david', 'eve', 'Eve', 'Eve'])) # Should return 14\nprint(sample_nam([])) # Should return 0\n\n\n# Solution\r\ndef sample_nam(sample_names):\r\n    total_length = 0\r\n    for name in sample_names:\r\n        if name[0].isupper():\r\n            total_length += len(name)\r\n    return total_length\r\n\r\n# Test cases\r\nprint(sample_nam(['Alice', 'Bob', 'Charlie', 'David",
        "generated_testcode": "assert sample_nam([\"Alice\", \"Bob\", \"Charlie\", \"David\", \"Eve\", \"Frank\", \"Grace\", \"Hannah\", \"Ivan\", \"Judy\", \"Karen\"] == 16\n",
        "test": "assert sample_nam(['sally', 'Dylan', 'rebecca', 'Diana', 'Joanne', 'keith'])==16\nassert sample_nam([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"])==10\nassert sample_nam([\"abcd\", \"Python\", \"abba\", \"aba\"])==6",
        "canonical_solution": "def sample_nam(sample_names):\r\n  sample_names=list(filter(lambda el:el[0].isupper() and el[1:].islower(),sample_names))\r\n  return len(''.join(sample_names))"
    },
    {
        "number": 640,
        "prompt": "Write a function to remove the parenthesis area in a string.\ndef remove_parenthesis(items):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": true,
        "answer": "    # initialize an empty list to store the result\n    result = []\n    # loop through each character in the string\n    for i in items:\n        # check if the character is not a parenthesis\n        if i != '(' and i != ')':\n            # append the character to the result list\n            result.append(i)\n    # join the characters in the result list into a string and return it\n    return ''.join(result)\n\n# test the function\nprint(remove_parenthesis(\"abc(def)\"))  # \"abcdef\"\nprint(remove_parenthesis(\"hello(world)\"))  # \"helloworld\"\nprint(remove_parenthesis(\"(this)is(a)test\"))  # \"thisisatest\"\n",
        "generated_testcode": "assert remove_parenthesis(\"(hello) world\") == \"hello world\"\n",
        "test": "assert remove_parenthesis([\"python (chrome)\"])==(\"python\")\nassert remove_parenthesis([\"string(.abc)\"])==(\"string\")\nassert remove_parenthesis([\"alpha(num)\"])==(\"alpha\")",
        "canonical_solution": "import re\r\ndef remove_parenthesis(items):\r\n for item in items:\r\n    return (re.sub(r\" ?\\([^)]+\\)\", \"\", item))"
    },
    {
        "number": 641,
        "prompt": "Write a function to find the nth nonagonal number.\ndef is_nonagonal(n): \n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": true,
        "answer": "    return n**2\n\ndef find_nonagonal_number(n):\n    return is_nonagonal(n)\n\n# Test cases\nprint(find_nonagonal_number(1))  # Output: 1\nprint(find_nonagonal_number(2)) # Output: 4\nprint(find_nonagonal_number(3)) # Output: 9\nprint(find_nonagonal_number(4)) # Output: 16\nprint(find_nonagonal_number(5)) # Output: 25\nprint(find_nonagonal_number(6)) # Output: 36\nprint(find_nonagonal_number(7)) # Output: 49\nprint(find_nonagonal_number(8)) # Output: 64\nprint(find_nonagonal_number(9)) # Output: 81\nprint(find_nonagonal_number(10)) # Output: 100\n",
        "generated_testcode": "assert is_nonagonal(1) == 1\n",
        "test": "assert is_nonagonal(10) == 325\nassert is_nonagonal(15) == 750\nassert is_nonagonal(18) == 1089",
        "canonical_solution": "def is_nonagonal(n): \r\n\treturn int(n * (7 * n - 5) / 2) "
    },
    {
        "number": 642,
        "prompt": "Write a function to remove similar rows from the given tuple matrix.\ndef remove_similar_row(test_list):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    unique_list = []\n    for i in test_list:\n        if i not in unique_list:\n            unique_list.append(i)\n    return unique_list\n\n#test_list = ([(1,2,3,4),(1,2,3),(4,5,6),(1,2,3),(7,8,9),(1,2,3)]\n#print(remove_similar_row(test_list))\n\n\n# test_list = ((1,2,3,4),(1,2,3),(4,5,6),(1,2,3),(7,8,9),(1,2,3)\n# print(remove_similar_row(test_list))",
        "generated_testcode": "assert remove_similar_row(((1,2,3),(4,5,6),(1,2,3),(7,8,9),(4,5,6)) ) == ((1,2,3),(7,8,9))\n",
        "test": "assert remove_similar_row([[(4, 5), (3, 2)], [(2, 2), (4, 6)], [(3, 2), (4, 5)]] ) == {((2, 2), (4, 6)), ((3, 2), (4, 5))}\nassert remove_similar_row([[(5, 6), (4, 3)], [(3, 3), (5, 7)], [(4, 3), (5, 6)]] ) == {((4, 3), (5, 6)), ((3, 3), (5, 7))}\nassert remove_similar_row([[(6, 7), (5, 4)], [(4, 4), (6, 8)], [(5, 4), (6, 7)]] ) =={((4, 4), (6, 8)), ((5, 4), (6, 7))}",
        "canonical_solution": "def remove_similar_row(test_list):\r\n  res = set(sorted([tuple(sorted(set(sub))) for sub in test_list]))\r\n  return (res) "
    },
    {
        "number": 643,
        "prompt": "Write a function that matches a word containing 'z', not at the start or end of the word.\ndef text_match_wordz_middle(text):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    return re.search(r'\\b[a-zA-Z]*z[a-zA-Z]*\\b', text)\n\n# Test cases\nprint(text_match_wordz_middle(\"The quick brown fox jumps over the lazy dog.\")) # Should return None\nprint(text_match_wordz_middle(\"The lazy dog is not very quick.\")) # Should return None\nprint(text_match_wordz_middle(\"Python is a great language.\")) # Should return None\nprint(text_match_wordz_middle(\"The zebra is not easy to catch.\")) # Should return <re.Match object; span=(4, 9), match='zebra'>\nprint(text_match_wordz_middle(\"The cat is not aztuple.\")) # Should return <re.Match object; span=(6, 11), match='astuple'>\nprint(text_match_wordz_middle(\"The zebra and the zebra are not the same.\")) # Should return <re.Match object; span=(4, 9), match='zebra'>\nprint(text_match_wordz_middle(\"There is no z in this text.\")) # Should return None\nprint(text_match_wordz_middle(\"There is a z at the start of this text.\")) # Should return None\nprint(text_match_wordz_middle(\"There is a z at the end of this textz.\")) # Should return None\nprint(text_match_wordz_middle(\"There is a z in the",
        "generated_testcode": "assert text_match_wordz_middle(\"The quick brown fox jumps over the lazy dog\") == \"The quick brown fox jumps over the lazy dog\"\n",
        "test": "assert text_match_wordz_middle(\"pythonzabc.\")==('Found a match!')\nassert text_match_wordz_middle(\"xyzabc.\")==('Found a match!')\nassert text_match_wordz_middle(\"  lang  .\")==('Not matched!')",
        "canonical_solution": "import re\r\ndef text_match_wordz_middle(text):\r\n        patterns = '\\Bz\\B'\r\n        if re.search(patterns,  text):\r\n                return 'Found a match!'\r\n        else:\r\n                return('Not matched!')"
    },
    {
        "number": 644,
        "prompt": "Write a python function to reverse an array upto a given position.\ndef reverse_Array_Upto_K(input, k): \n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    # Code here ",
        "generated_testcode": "assert reverse_Array_Upto_K([1,2,3,4,5,6,7,8,9,10], 3) == [3,2,1,6,5,4,9,8,10]\n",
        "test": "assert reverse_Array_Upto_K([1, 2, 3, 4, 5, 6],4) == [4, 3, 2, 1, 5, 6]\nassert reverse_Array_Upto_K([4, 5, 6, 7], 2) == [5, 4, 6, 7]\nassert reverse_Array_Upto_K([9, 8, 7, 6, 5],3) == [7, 8, 9, 6, 5]",
        "canonical_solution": "def reverse_Array_Upto_K(input, k): \r\n  return (input[k-1::-1] + input[k:]) "
    },
    {
        "number": 645,
        "prompt": "Write a function to find the product of it\u2019s kth index in the given tuples.\ndef get_product(val) : \n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    def product(tuples):\n        n = len(tuples)\n        result = 1\n        for i in range(n) :\n            result *= tuples[i][val-1]\n        return result\n    return product\n\n# Testing the function\ntuples = [(1,2,3,4,5),(6,7,8,9),(10,11,12,13)\nprint(get_product(3)(tuples)) # Output : 72\nprint(get_product(2)(tuples)) # Output : 24 ",
        "generated_testcode": "assert get_product((1,2,3,4,5,6,7,8,9,10) == 30\n",
        "test": "assert find_k_product([(5, 6, 7), (1, 3, 5), (8, 9, 19)], 2) == 665\nassert find_k_product([(6, 7, 8), (2, 4, 6), (9, 10, 20)], 1) == 280\nassert find_k_product([(7, 8, 9), (3, 5, 7), (10, 11, 21)], 0) == 210",
        "canonical_solution": "def get_product(val) : \r\n\tres = 1\r\n\tfor ele in val: \r\n\t\tres *= ele \r\n\treturn res \r\ndef find_k_product(test_list, K):\r\n  res = get_product([sub[K] for sub in test_list])\r\n  return (res) "
    },
    {
        "number": 646,
        "prompt": "Write a python function to count number of cubes of size k in a cube of size n.\ndef No_of_cubes(N,K):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": true,
        "answer": "    count=0\n    for i in range(1,N+1):\n        for j in range(1,N+1):\n            for k in range(1,N+1):\n                if i**3 + j**3 + k**3 == N:\n                    count+=1\n    return count\n\n#Testing the function\nN=3\nK=3\nprint(No_of_cubes(N,K))\n\nN=5\nK=3\nprint(No_of_cubes(N,K))\nN=7\nK=4\nprint(No_of_cubes(N,K))\n\n",
        "generated_testcode": "assert No_of_cubes(3,2) == 1\n",
        "test": "assert No_of_cubes(2,1) == 8\nassert No_of_cubes(5,2) == 64\nassert No_of_cubes(1,1) == 1",
        "canonical_solution": "def No_of_cubes(N,K):\r\n    No = 0\r\n    No = (N - K + 1)\r\n    No = pow(No, 3)\r\n    return No"
    },
    {
        "number": 647,
        "prompt": "Write a function to split a string at uppercase letters.\ndef split_upperstring(text):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    words = []\n    current_word = \"\"\n    for char in text:\n        if char.isupper():\n            words.append(current_word)\n            current_word = \"\"\n        else:\n            current_word += char\n    words.append(current_word)\n    return words\n\n\nprint(split_upperstring(\"HelloWorldPython\"))\n# Output: ['Hello', 'World', 'Python']\n\n\nprint(split_upperstring(\"CAPITALIZEDWORDFunction\"))\n# Output: ['CAPITALIZED', 'WORDFunction']\n\nprint(split_upperstring(\"appleOrangeBanana\"))\n# Output: ['apple', 'Orange', 'Banana']\n\n\nprint(split_upperstring(\"UXDesignLovesKISS\"))\n# Output: ['UX', 'Design', 'Loves', 'KISS'] ",
        "generated_testcode": "assert split_upperstring(\"HelloWorld\") == [\"Hello\", \"World\"]\n",
        "test": "assert split_upperstring(\"PythonProgramLanguage\")==['Python','Program','Language']\nassert split_upperstring(\"PythonProgram\")==['Python','Program']\nassert split_upperstring(\"ProgrammingLanguage\")==['Programming','Language']",
        "canonical_solution": "import re\r\ndef split_upperstring(text):\r\n return (re.findall('[A-Z][^A-Z]*', text))"
    },
    {
        "number": 648,
        "prompt": "Write a function to exchange the position of every n-th value with (n+1)th value and (n+1)th value with n-th value in a given list.\ndef exchange_elements(lst):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    n = int(input(\"Enter the value of n: \"))\n    temp = lst[n-1]\n    lst[n-1] = lst[n]\n    lst[n] = temp\n    temp = lst[n+1]\n    lst[n+1] = lst[n+2]\n    lst[n+2] = temp\n    return lst\n\n# test the function\nlst = [1,2,3,4,5,6,7,8,9]\nprint(exchange_elements(lst))\n\n# Output: [1, 4, 3, 6, 5, 8, 7, 9]",
        "generated_testcode": "assert exchange_elements([1,2,3,4,5,6,7,8,9]) == [2,1,4,3,6,5,8,7,9]\n",
        "test": "assert exchange_elements([0,1,2,3,4,5])==[1, 0, 3, 2, 5, 4] \nassert exchange_elements([5,6,7,8,9,10])==[6,5,8,7,10,9] \nassert exchange_elements([25,35,45,55,75,95])==[35,25,55,45,95,75] ",
        "canonical_solution": "from itertools import zip_longest, chain, tee\r\ndef exchange_elements(lst):\r\n    lst1, lst2 = tee(iter(lst), 2)\r\n    return list(chain.from_iterable(zip_longest(lst[1::2], lst[::2])))"
    },
    {
        "number": 649,
        "prompt": "Write a python function to calculate the sum of the numbers in a list between the indices of a specified range.\ndef sum_Range_list(nums, m, n):                                                                                                                                                                                                \n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    if m < 0 or n < 0 or m > len(nums) or n > len(nums):                                                                                                                                                                    \n        return None                                                                                                                                                                                                   \n    elif m == n:                                                                                                                                                                                                    \n        return nums[m]                                                                                                                                                                                          \n    elif m > n:                                                                                                                                                                                               \n        return None                                                                                                                                                                                   \n    else:                                                                                                                                                                                                 \n        return sum(nums[m:n+1])                                                                                                                                                                              \n\n# Test cases                                                                                                                                                                                                   \nprint(sum_Range_list([1,2,3,4,5,6,7,8,9], 1, 3)) # Output: 12 (6+7+8)                                                                                                                                       \nprint(sum_Range_list([1,2,3,4,5,6,7,8,9], 4, 1)) # Output: None                                                                                                                                          \nprint(sum_Range_list([1,2,3,4,5,6,7,8,9], 0, 5)) # Output: 24 (1+2+3+4+5+6+7+8+9)                ",
        "generated_testcode": "assert sum_Range_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2, 4) == 12\n",
        "test": "assert sum_Range_list([2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12],8,10) == 29\nassert sum_Range_list([1,2,3,4,5],1,2) == 5\nassert sum_Range_list([1,0,1,2,5,6],4,5) == 11",
        "canonical_solution": "def sum_Range_list(nums, m, n):                                                                                                                                                                                                \r\n    sum_range = 0                                                                                                                                                                                                         \r\n    for i in range(m, n+1, 1):                                                                                                                                                                                        \r\n        sum_range += nums[i]                                                                                                                                                                                                  \r\n    return sum_range   "
    },
    {
        "number": 650,
        "prompt": "Write a python function to check whether the given two arrays are equal or not.\ndef are_Equal(arr1,arr2,n,m):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    if n != m:\n        return False\n    for i in range(n):\n        if arr1[i] != arr2[i]:\n            return False\n    return True\n\n#Testing the function\narr1 = [1,2,3,4,5,6,7]\narr2 = [1,2,3,4,5,6,7]\nprint(are_Equal(arr1,arr2,len(arr1)))\n\narr1 = [1,2,3,4,5,6,8]\narr2 = [1,2,3,4,5,6,7]\nprint(are_Equal(arr1,arr2,len(arr1)))\n\narr1 = [1,2,3,4,5,6]\narr2 = [1,2,3,4,5,6,7]\nprint(are_Equal(arr1,arr2,len(arr1)))\n",
        "generated_testcode": "assert are_Equal([1,2,3,4,5], [1,2,3,4,5], 4) == True\n",
        "test": "assert are_Equal([1,2,3],[3,2,1],3,3) == True\nassert are_Equal([1,1,1],[2,2,2],3,3) == False\nassert are_Equal([8,9],[4,5,6],2,3) == False",
        "canonical_solution": "def are_Equal(arr1,arr2,n,m):\r\n    if (n != m):\r\n        return False\r\n    arr1.sort()\r\n    arr2.sort()\r\n    for i in range(0,n - 1):\r\n        if (arr1[i] != arr2[i]):\r\n            return False\r\n    return True"
    },
    {
        "number": 651,
        "prompt": "Write a function to check if one tuple is a subset of another tuple.\ndef check_subset(test_tup1, test_tup2):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    for item in test_tup1:\n        if item not in test_tup2:\n            return False\n    return True\n\n# Test cases\nprint(check_subset((1,2,3,4),(1,2,3,4,5)) # True\nprint(check_subset((1,2,4),(1,3,4,5)) # False\nprint(check_subset((1,2,3,4,5),(1,2,3,4)) # False\nprint(check_subset((1,3,5),(1,2,3,4)) # False\nprint(check_subset((1,2,3),(1,2,3,4)) # True\nprint(check_subset((1,2,4,5,6),(1,2,3,4)) # False\nprint(check_subset((1,2,3),(1,2)) # False\nprint(check_subset((1,2,3,4),(1,2,3,4)) # True\n\n# Explanation:\n# The first test case returns True because all the elements in test_tup1 are present in test_tup2\n# The second test case returns False because not all the elements of test_tup1 are present in test_tup2\n# The third test case returns False because not all the elements of test_tup1 are present in test_tup2\n# The fourth test case returns True because all the elements of test_tup1 are present in test_tup2\n# The fifth test case returns False",
        "generated_testcode": "assert check_subset((1, 2, 3, 4, 5), (1, 2, 3)) == True\n",
        "test": "assert check_subset((10, 4, 5, 6), (5, 10)) == True\nassert check_subset((1, 2, 3, 4), (5, 6)) == False\nassert check_subset((7, 8, 9, 10), (10, 8)) == True",
        "canonical_solution": "def check_subset(test_tup1, test_tup2):\r\n  res = set(test_tup2).issubset(test_tup1)\r\n  return (res) "
    },
    {
        "number": 652,
        "prompt": "Write a function to flatten the given tuple matrix into the tuple list with each tuple representing each column.\ndef matrix_to_list(test_list):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    result = []\n    for i in range(len(test_list[0]):\n        for j in range(len(test_list):\n            result.append(test_list[i][j])\n    return result\n\nprint(matrix_to_list([(1,2,3,4),(5,6,7),(8,9,10)]))\n\n#Output: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\n#Example:\n#Input:\n#[[1, 2, 3],\n# [4, 5, 6],\n# [7, 8, 9]]\n\n#Output: [1, 4, 7, 2, 5, 8, 3, 6, 9] ",
        "generated_testcode": "assert matrix_to_list([(1,2,3), (4,5,6), (7,8,9)]) == [(1,4,7), (2,5,8), (3,6,9)]\n",
        "test": "assert matrix_to_list([[(4, 5), (7, 8)], [(10, 13), (18, 17)], [(0, 4), (10, 1)]]) == '[(4, 7, 10, 18, 0, 10), (5, 8, 13, 17, 4, 1)]'\nassert matrix_to_list([[(5, 6), (8, 9)], [(11, 14), (19, 18)], [(1, 5), (11, 2)]]) == '[(5, 8, 11, 19, 1, 11), (6, 9, 14, 18, 5, 2)]'\nassert matrix_to_list([[(6, 7), (9, 10)], [(12, 15), (20, 21)], [(23, 7), (15, 8)]]) == '[(6, 9, 12, 20, 23, 15), (7, 10, 15, 21, 7, 8)]'",
        "canonical_solution": "def matrix_to_list(test_list):\r\n  temp = [ele for sub in test_list for ele in sub]\r\n  res = list(zip(*temp))\r\n  return (str(res))"
    },
    {
        "number": 653,
        "prompt": "Write a function to group a sequence of key-value pairs into a dictionary of lists using collections module.\ndef grouping_dictionary(l):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    from collections import defaultdict\n    d = defaultdict(list)\n    for k,v in l:\n        d[k].append(v)\n    return dict(d)\n\n# Test the function\nl = [('A', 1), ('A', 2), ('B', 3), ('A', 4), ('B', 5), ('C', 6), ('B', 7), ('C', 8), ('A', 9)]\nprint(grouping_dictionary(l))  # Output: {'A': [1, 2, 4, 9], 'B': [3, 5, 7], 'C': [6, 8]}\n\n# Test the function with a different input\nl2 = [('A', 10), ('B', 11), ('B', 12), ('C', 13), ('C', 14), ('C', 15), ('A', 16), ('A', 17)]\nprint(grouping_dictionary(l2))  # Output: {'A': [10, 16, 17], 'B': [11, 12], 'C': [13, 14, 15]}\n\n# Test the function with an empty list\nl3 = []\nprint(grouping_dictionary(l3))  # Output: {}\n\n# Test the function with a list with duplicate keys\nl4 = [('A', 20), ('B', 21), ('B', 22",
        "generated_testcode": "assert grouping_dictionary([('a', 1), ('b', 2), ('a', 3), ('b', 4), ('c', 5), ('a', 6), ('c', 7)] ) == {'a': [1, 3, 6], 'b': [2, 4], 'c': [5, 7]}\n",
        "test": "assert grouping_dictionary([('yellow', 1), ('blue', 2), ('yellow', 3), ('blue', 4), ('red', 1)])== ({'yellow': [1, 3], 'blue': [2, 4], 'red': [1]})\nassert grouping_dictionary([('yellow', 10), ('blue', 20), ('yellow', 30), ('blue', 40), ('red', 10)])== ({'yellow': [10, 30], 'blue': [20, 40], 'red': [10]})\nassert grouping_dictionary([('yellow', 15), ('blue', 25), ('yellow', 35), ('blue', 45), ('red', 15)])== ({'yellow': [15, 35], 'blue': [25, 45], 'red': [15]})",
        "canonical_solution": "from collections import defaultdict\r\ndef grouping_dictionary(l):\r\n    d = defaultdict(list)\r\n    for k, v in l:\r\n        d[k].append(v)\r\n    return d"
    },
    {
        "number": 654,
        "prompt": "Write a function to find the perimeter of a rectangle.\ndef rectangle_perimeter(l,b):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    return 2*(l + b)\n\n# Test the function with some values\nprint(rectangle_perimeter(5,10)) # should return 30\nprint(rectangle_perimeter(10,5)) # should return 20\nprint(rectangle_perimeter(3,4)) # should return 14\n\n\n# Write a function to find the area of a rectangle\ndef rectangle_area(l,b):\n    return l * b\n\n# Test the function with some values\nprint(rectangle_area(5,10)) # should return 50\nprint(rectangle_area(10,5)) # should return 50\nprint(rectangle_area(3,4)) # should return 12\n\n\n# Write a function to find the diagonal of a rectangle\ndef rectangle_diagonal(l,b):\n    return ((l ** 2) + (b ** 2)) ** 0.5\n\n# Test the function with some values\nprint(rectangle_diagonal(5,10)) # should return 11.73\nprint(rectangle_diagonal(10,5)) # should return 14.14\nprint(rectangle_diagonal(3,4)) # should return 5.0\n\n\n# Write a function to find the length of a rectangle's diagonal when one side is given\ndef rectangle_diagonal_given_side(a):\n    return (2 * a) ** 0.5\n# Test",
        "generated_testcode": "assert rectangle_perimeter(5, 10) == 20\n",
        "test": "assert rectangle_perimeter(10,20)==60\nassert rectangle_perimeter(10,5)==30\nassert rectangle_perimeter(4,2)==12",
        "canonical_solution": "def rectangle_perimeter(l,b):\r\n  perimeter=2*(l+b)\r\n  return perimeter"
    },
    {
        "number": 655,
        "prompt": "Write a python function to find the sum of fifth power of n natural numbers.\ndef fifth_Power_Sum(n) : \n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    sum = 0\n    for i in range(1, n+1) :\n        sum += i**5\n    return sum\n\n# Test the function with n=5\nprint(fifth_Power_Sum(5)) # Output: 2255\n\n# Test the function with n=10\nprint(fifth_Power_Sum(10)) # Output: 38444\n\n# Test the function with n=20\nprint(fifth_Power_Sum(20)) # Output: 13060975\n\n# Test the function with n=50\nprint(fifth_Power_Sum(50)) # Output: 12597194000000000000000000000000\n",
        "generated_testcode": "assert fifth_Power_Sum(5) == 2295\n",
        "test": "assert fifth_Power_Sum(2) == 33\nassert fifth_Power_Sum(4) == 1300\nassert fifth_Power_Sum(3) == 276",
        "canonical_solution": "def fifth_Power_Sum(n) : \r\n    sm = 0 \r\n    for i in range(1,n+1) : \r\n        sm = sm + (i*i*i*i*i) \r\n    return sm "
    },
    {
        "number": 656,
        "prompt": "Write a python function to find the minimum sum of absolute differences of two arrays.\ndef find_Min_Sum(a,b,n): \n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    a.sort() \n    b.sort() \n    sum = 0\n    for i in range(n): \n        sum += abs(a[i] - b[i]) \n    return sum \n\n# Example usage:\na = [1,2,3,4,5,6]\nb = [2,4,5,7,8]\nprint(find_Min_Sum(a,b,4)) # Output: 3\n\na = [1,3,5,9,10]\nb = [2,4,6,8,11]\nprint(find_Min_Sum(a,b,4)) # Output: 6\na = [1,1,1,1]\nb = [2,2,2,2]\nprint(find_Min_Sum(a,b,3)) # Output: 0\n",
        "generated_testcode": "assert find_Min_Sum([1,2,3,4,5,6], [2,3,4,5,6], 4) == 0\n",
        "test": "assert find_Min_Sum([3,2,1],[2,1,3],3) == 0\nassert find_Min_Sum([1,2,3],[4,5,6],3) == 9\nassert find_Min_Sum([4,1,8,7],[2,3,6,5],4) == 6",
        "canonical_solution": "def find_Min_Sum(a,b,n): \r\n    a.sort() \r\n    b.sort() \r\n    sum = 0  \r\n    for i in range(n): \r\n        sum = sum + abs(a[i] - b[i]) \r\n    return sum"
    },
    {
        "number": 657,
        "prompt": "Write a python function to find the first digit in factorial of a given number.\ndef first_Digit(n) : \n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    if n == 0 : \n        return 0\n    else : \n        fact = 1\n        for i in range(1, n+1) : \n            fact *= i\n        while fact % 10 != 0 : \n            fact //= 10\n        return fact % 10\n\nprint(first_Digit(5)) #Output: 5\nprint(first_Digit(10)) #Output: 2\nprint(first_Digit(15)) #Output: 5\nprint(first_Digit(20)) #Output: 2\nprint(first_Digit(30)) #Output: 3\nprint(first_Digit(40)) #Output: 8\nprint(first_Digit(50)) #Output: 5\nprint(first_Digit(100)) #Output: 1",
        "generated_testcode": "assert first_Digit(5) == 5\n",
        "test": "assert first_Digit(5) == 1\nassert first_Digit(10) == 3\nassert first_Digit(7) == 5",
        "canonical_solution": "import math \r\ndef first_Digit(n) : \r\n    fact = 1\r\n    for i in range(2,n + 1) : \r\n        fact = fact * i \r\n        while (fact % 10 == 0) :  \r\n            fact = int(fact / 10) \r\n    while (fact >= 10) : \r\n        fact = int(fact / 10) \r\n    return math.floor(fact) "
    },
    {
        "number": 658,
        "prompt": "Write a function to find the item with maximum occurrences in a given list.\ndef max_occurrences(list1):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    d = {}\n    for i in list1:\n        if i in d:\n            d[i] += 1\n        else:\n            d[i] = 1\n    max_key = None\n    max_value = 0\n    for k,v in d.items():\n        if v > max_value:\n            max_key = k\n            max_value = v\n    return max_key\n\n\n# Example usage:\nprint(max_occurrences([1,2,3,2,2,2,4,5,3,3,3,5,6,6,6,6,1])) # Output: 3\nprint(max_occurrences([1,2,3,4,5])) # Output: None\nprint(max_occurrences([1,2,3,4,5,5])) # Output: 5\n",
        "generated_testcode": "assert max_occurrences([\"apple\", \"banana\", \"orange\", \"apple\", \"banana\", \"apple\", \"orange\", \"banana\", \"orange\", \"orange\"] == \"orange\")\n",
        "test": "assert max_occurrences([2,3,8,4,7,9,8,2,6,5,1,6,1,2,3,4,6,9,1,2])==2\nassert max_occurrences([1, 3,5, 7,1, 3,13, 15, 17,5, 7,9,1, 11])==1\nassert max_occurrences([1, 2, 3,2, 4, 5,1, 1, 1])==1",
        "canonical_solution": "def max_occurrences(list1):\r\n    max_val = 0\r\n    result = list1[0] \r\n    for i in list1:\r\n        occu = list1.count(i)\r\n        if occu > max_val:\r\n            max_val = occu\r\n            result = i \r\n    return result"
    },
    {
        "number": 659,
        "prompt": "Write a python function to print duplicants from a list of integers.\ndef Repeat(x): \n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    list1 = []\n    for i in x: \n        if x.count(i) > 1 and i not in list1: \n            list1.append(i) \n    return list1 ",
        "generated_testcode": "assert Repeat([1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9] == [1,2,3,4,5,6,7,8,9]\n",
        "test": "assert Repeat([10, 20, 30, 20, 20, 30, 40, 50, -20, 60, 60, -20, -20]) == [20, 30, -20, 60]\nassert Repeat([-1, 1, -1, 8]) == [-1]\nassert Repeat([1, 2, 3, 1, 2,]) == [1, 2]",
        "canonical_solution": "def Repeat(x): \r\n    _size = len(x) \r\n    repeated = [] \r\n    for i in range(_size): \r\n        k = i + 1\r\n        for j in range(k, _size): \r\n            if x[i] == x[j] and x[i] not in repeated: \r\n                repeated.append(x[i]) \r\n    return repeated "
    },
    {
        "number": 660,
        "prompt": "Write a python function to choose points from two ranges such that no point lies in both the ranges.\ndef find_Points(l1,r1,l2,r2): \n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    points = [] \n    for i in range(l1,r1+1): \n        for j in range(l2,r2+1): \n            if i != j: \n                points.append((i,j) ) \n    return points ",
        "generated_testcode": "assert find_Points(1,5,2,4) == [2,3,4]\n",
        "test": "assert find_Points(5,10,1,5) == (1,10)\nassert find_Points(3,5,7,9) == (3,9)\nassert find_Points(1,5,2,8) == (1,8)",
        "canonical_solution": "def find_Points(l1,r1,l2,r2): \r\n    x = min(l1,l2) if (l1 != l2) else -1\r\n    y = max(r1,r2) if (r1 != r2) else -1\r\n    return (x,y)"
    },
    {
        "number": 661,
        "prompt": "Write a function to find the maximum sum that can be formed which has no three consecutive elements present.\ndef max_sum_of_three_consecutive(arr, n): \n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    if n == 0: \n        return 0\n    if n == 1: \n        return arr[0] \n    if n == 2: \n        return max(arr[0], arr[1]) \n  \n    include_first = arr[0] + arr[1] + arr[2] \n    exclude_first = max(arr[0], arr[1]) \n  \n    for i in range(2, n-1): \n        include_second = arr[i] + arr[i-1] + arr[i-2] \n        exclude_second = max(arr[i] + exclude_first, exclude_first) \n        include_first, exclude_first = include_second, exclude_second \n  \n    return max(include_first, exclude_first) \n  \n  \n# Driver code \narr = [1, 2, 3, 1, 4, 5, 1, 6, 7, 9, 8, 2, 3] \nn = len(arr) \nprint(max_sum_of_three_consecutive(arr, n)) ",
        "generated_testcode": "assert max_sum_of_three_consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9], 6) == 24\n",
        "test": "assert max_sum_of_three_consecutive([100, 1000, 100, 1000, 1], 5) == 2101\nassert max_sum_of_three_consecutive([3000, 2000, 1000, 3, 10], 5) == 5013\nassert max_sum_of_three_consecutive([1, 2, 3, 4, 5, 6, 7, 8], 8) == 27",
        "canonical_solution": "def max_sum_of_three_consecutive(arr, n): \r\n\tsum = [0 for k in range(n)] \r\n\tif n >= 1: \r\n\t\tsum[0] = arr[0] \r\n\tif n >= 2: \r\n\t\tsum[1] = arr[0] + arr[1] \r\n\tif n > 2: \r\n\t\tsum[2] = max(sum[1], max(arr[1] + arr[2], arr[0] + arr[2])) \r\n\tfor i in range(3, n): \r\n\t\tsum[i] = max(max(sum[i-1], sum[i-2] + arr[i]), arr[i] + arr[i-1] + sum[i-3]) \r\n\treturn sum[n-1]"
    },
    {
        "number": 662,
        "prompt": "Write a function to sort a list in a dictionary.\ndef sorted_dict(dict1):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    sorted_list = []\n    for key, value in sorted(dict1.items()):\n        sorted_list.append(value)\n    return sorted_list\n\n#Test the function\ndict1 = {\"apple\":10, \"banana\":20, \"orange\":30, \"grape\":40, \"kiwi\":50, \"pear\":60}\nprint(sorted_dict(dict1))\n\n\n# Output: [10, 20, 30, 40, 50, 60]\n\n",
        "generated_testcode": "assert sorted_dict({\"apple\": 3, \"banana\": 2, \"orange\": 1, \"grape\": 4}) == {\"apple\": 3, \"banana\": 2, \"grape\": 4}\n",
        "test": "assert sorted_dict({'n1': [2, 3, 1], 'n2': [5, 1, 2], 'n3': [3, 2, 4]})=={'n1': [1, 2, 3], 'n2': [1, 2, 5], 'n3': [2, 3, 4]}\nassert sorted_dict({'n1': [25,37,41], 'n2': [41,54,63], 'n3': [29,38,93]})=={'n1': [25, 37, 41], 'n2': [41, 54, 63], 'n3': [29, 38, 93]}\nassert sorted_dict({'n1': [58,44,56], 'n2': [91,34,58], 'n3': [100,200,300]})=={'n1': [44, 56, 58], 'n2': [34, 58, 91], 'n3': [100, 200, 300]}",
        "canonical_solution": "def sorted_dict(dict1):\r\n  sorted_dict = {x: sorted(y) for x, y in dict1.items()}\r\n  return sorted_dict"
    },
    {
        "number": 663,
        "prompt": "Write a function to find the largest possible value of k such that k modulo x is y.\ndef find_max_val(n, x, y): \n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    def is_multiple(a, b):\n        return (a % b) == 0\n\n    max_val = 0\n    for i in range(n):\n        if is_multiple(i, x):\n            if is_multiple(y, i):\n                max_val = max(max_val, i)\n            elif i % y == 0:\n                max_val = max(max_val, i + y)\n    return max_val\n\n# Test cases\nprint(find_max_val(10, 3, 2)) # 3\nprint(find_max_val(10, 5, 3)) # 4\nprint(find_max_val(10, 7, 2)) # 10\nprint(find_max_val(10, 7, 5)) # 7\nprint(find_max_val(10, 3, 4)) # 4\nprint(find_max_val(10, 7, 4)) # 7\nprint(find_max_val(10, 11, 1)) # 10\nprint(find_max_val(10, 13, 1)) # 10\nprint(find_max_val(10, 17, 1)) # 0\nprint(find_max_val(10, 2, 2)) # 0\nprint(find_max_val(10, 1, 1)) # 9",
        "generated_testcode": "assert find_max_val(10, 3, 2) == 4\n",
        "test": "assert find_max_val(15, 10, 5) == 15\nassert find_max_val(187, 10, 5) == 185\nassert find_max_val(16, 11, 1) == 12",
        "canonical_solution": "import sys \r\ndef find_max_val(n, x, y): \r\n\tans = -sys.maxsize \r\n\tfor k in range(n + 1): \r\n\t\tif (k % x == y): \r\n\t\t\tans = max(ans, k) \r\n\treturn (ans if (ans >= 0 and\r\n\t\t\t\t\tans <= n) else -1) "
    },
    {
        "number": 664,
        "prompt": "Write a python function to find the average of even numbers till a given even number.\ndef average_Even(n) : \n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    if n % 2 == 0: \n        sum = 0\n        count = 0\n        for i in range(2, n+1, 2): \n            sum += i \n            count += 1\n        return sum/count if count != 0 else 0\n    else: \n        return 0\n\n\n# Test the function with an example \nprint(average_Even(10)) ",
        "generated_testcode": "assert average_Even(10) == 6.0\n",
        "test": "assert average_Even(2) == 2\nassert average_Even(4) == 3\nassert average_Even(100) == 51",
        "canonical_solution": "def average_Even(n) : \r\n    if (n% 2!= 0) : \r\n        return (\"Invalid Input\") \r\n        return -1  \r\n    sm = 0\r\n    count = 0\r\n    while (n>= 2) : \r\n        count = count+1\r\n        sm = sm+n \r\n        n = n-2\r\n    return sm // count "
    },
    {
        "number": 665,
        "prompt": "Write a python function to shift first element to the end of given list.\ndef move_last(num_list):\n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    if len(num_list) == 0:\n        return num_list\n    else:\n        num_list.append(num_list.pop(0))\n        return num_list\n\n\n# Testing\nprint(move_last([1, 2, 3, 4, 5]))\nprint(move_last([1]))\nprint(move_last([]))\n",
        "generated_testcode": "assert move_last([1,2,3,4,5,6,7]) == [2,3,4,5,6,7,1]\n",
        "test": "assert move_last([1,2,3,4]) == [2,3,4,1]\nassert move_last([2,3,4,1,5,0]) == [3,4,1,5,0,2]\nassert move_last([5,4,3,2,1]) == [4,3,2,1,5]",
        "canonical_solution": "def move_last(num_list):\r\n    a = [num_list[0] for i in range(num_list.count(num_list[0]))]\r\n    x = [ i for i in num_list if i != num_list[0]]\r\n    x.extend(a)\r\n    return (x)"
    },
    {
        "number": 666,
        "prompt": "Write a function to count occurrence of a character in a string.\ndef count_char(string,char):\n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    count = 0\n    for i in string:\n        if i == char:\n            count += 1\n    return count\n\n#Test the function\nprint(count_char(\"hello\",\"l\"))  #Output: 2\nprint(count_char(\"python\",\"o\"))  #Output: 2\nprint(count_char(\"java\",\"a\"))  #Output: 1\nprint(count_char(\"java\",\"z\"))  #Output: 0\n",
        "generated_testcode": "assert count_char(\"hello world\", \"l\") == 3\n",
        "test": "assert count_char(\"Python\",'o')==1\nassert count_char(\"little\",'t')==2\nassert count_char(\"assert\",'s')==2",
        "canonical_solution": "def count_char(string,char):\r\n count = 0\r\n for i in range(len(string)):\r\n    if(string[i] == char):\r\n        count = count + 1\r\n return count"
    },
    {
        "number": 667,
        "prompt": "Write a python function to count number of vowels in the string.\ndef Check_Vow(string, vowels): \n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    count = 0\n    for char in string: \n        if char in vowels: \n            count += 1\n    return count \n\n# test the function \nstring = input(\"Enter a string: \") \nvowels = \"aeiouAEIOU\" \nprint(\"Number of vowels in the string:\", Check_Vow(string, vowels)) ",
        "generated_testcode": "assert Check_Vow(\"hello world\", \"aeiou\") == 1\n",
        "test": "assert Check_Vow('corner','AaEeIiOoUu') == 2\nassert Check_Vow('valid','AaEeIiOoUu') == 2\nassert Check_Vow('true','AaEeIiOoUu') ==2",
        "canonical_solution": "def Check_Vow(string, vowels): \r\n    final = [each for each in string if each in vowels] \r\n    return(len(final)) \r\n"
    },
    {
        "number": 668,
        "prompt": "Write a python function to replace multiple occurence of character by single.\ndef replace(string, char): \n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    return ''.join(char if string.count(char) > 1 else string for char in string)\n\n\n#Test the function\nstring = 'hellohello world'\nchar = 'l'\nprint(replace(string,char))\n#Output: 'heo word' ",
        "generated_testcode": "assert replace(\"hello world\", \"l\") == \"heo word\"\n",
        "test": "assert replace('peep','e') == 'pep'\nassert replace('Greek','e') == 'Grek'\nassert replace('Moon','o') == 'Mon'",
        "canonical_solution": "import re \r\ndef replace(string, char): \r\n    pattern = char + '{2,}'\r\n    string = re.sub(pattern, char, string) \r\n    return string "
    },
    {
        "number": 669,
        "prompt": "Write a function to check whether the given ip address is valid or not using regex.\ndef check_IP(Ip): \n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    pattern = \"^(([01]?\\\\d\\\\d?\\\\d\\\\.){3}[01]?\\\\d\\\\d?\\\\d$\"\n    if re.match(pattern,Ip): \n        return True\n    else: \n        return False\n\n#Testing the function \nprint(check_IP(\"192.168.0.1\")) ",
        "generated_testcode": "assert check_IP(\"192.168.0.1\") == True\n",
        "test": "assert check_IP(\"192.168.0.1\") == 'Valid IP address'\nassert check_IP(\"110.234.52.124\") == 'Valid IP address'\nassert check_IP(\"366.1.2.2\") == 'Invalid IP address'",
        "canonical_solution": "import re \r\nregex = '''^(25[0-5]|2[0-4][0-9]|[0-1]?[0-9][0-9]?)\\.( \r\n\t\t\t25[0-5]|2[0-4][0-9]|[0-1]?[0-9][0-9]?)\\.( \r\n\t\t\t25[0-5]|2[0-4][0-9]|[0-1]?[0-9][0-9]?)\\.( \r\n\t\t\t25[0-5]|2[0-4][0-9]|[0-1]?[0-9][0-9]?)$'''\r\ndef check_IP(Ip): \r\n\tif(re.search(regex, Ip)): \r\n\t\treturn (\"Valid IP address\") \r\n\telse: \r\n\t\treturn (\"Invalid IP address\") "
    },
    {
        "number": 670,
        "prompt": "Write a python function to check whether a sequence of numbers has a decreasing trend or not.\ndef decreasing_trend(nums):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": true,
        "answer": "    for i in range(len(nums)-1):\n        if nums[i]>nums[i+1]:\n            return False\n    return True\n\n# Test the function\nprint(decreasing_trend([1,2,3,4,5,6,7,8,9])) # True\nprint(decreasing_trend([9,8,7,6,5,4,3,2,1])) # False\nprint(decreasing_trend([1,2,3,4,4,3,2,1])) # False\nprint(decreasing_trend([1,2,3,4,5,4,3,2])) # True",
        "generated_testcode": "assert decreasing_trend([1, 2, 3, 4, 5, 6, 7, 8, 9]) == True\n",
        "test": "assert decreasing_trend([-4,-3,-2,-1]) == True\nassert decreasing_trend([1,2,3]) == True\nassert decreasing_trend([3,2,1]) == False",
        "canonical_solution": "def decreasing_trend(nums):\r\n    if (sorted(nums)== nums):\r\n        return True\r\n    else:\r\n        return False"
    },
    {
        "number": 671,
        "prompt": "Write a python function to set the right most unset bit.\ndef get_Pos_Of_Right_most_Set_Bit(n): \n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    # Find the rightmost set bit in a binary representation of n \n    # using bitwise right shift operator. \n    right_most_set_bit = n & -n \n    # Use bitwise right shift to right shift the value by 1, and keep the count of \n    # the number of set bits. \n    count_of_set_bits = 1\n    while right_most_set_bit >> 1: \n        right_most_set_bit >>= 1\n        count_of_set_bits += 1\n  \n    # Return the position of the rightmost set bit. \n    return count_of_set_bits \n\n\ndef get_Right_Most_Unset_Bit(n): \n    # First, find the rightmost set bit using the above function. \n    right_most_set_bit = get_Pos_Of_Right_most_Set_Bit(n) \n  \n    # Now, find the position of the rightmost unset bit in the binary representation of n. \n    # Use bitwise right shift to right shift the value by right_most_set_bit, and \n    # check if the value of the right shifted value is zero. If it is zero, then \n    # the rightmost unset bit is at position right_most_set_bit + 1, else, it is at \n    # position right_most_set_bit. \n    if n >> right_most_set_bit: \n        return right_most",
        "generated_testcode": "assert get_Pos_Of_Right_most_Set_Bit(0b10101010101010) == 4\n",
        "test": "assert set_Right_most_Unset_Bit(21) == 23\nassert set_Right_most_Unset_Bit(11) == 15\nassert set_Right_most_Unset_Bit(15) == 15",
        "canonical_solution": "import math \r\ndef get_Pos_Of_Right_most_Set_Bit(n): \r\n    return int(math.log2(n&-n)+1)   \r\ndef set_Right_most_Unset_Bit(n): \r\n    if (n == 0): \r\n        return 1\r\n    if ((n & (n + 1)) == 0):     \r\n        return n \r\n    pos = get_Pos_Of_Right_most_Set_Bit(~n)      \r\n    return ((1 << (pos - 1)) | n) "
    },
    {
        "number": 672,
        "prompt": "Write a function to find maximum of three numbers.\ndef max_of_three(num1,num2,num3): \n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": true,
        "answer": "    if num1 >= num2 and num1 >= num3:\n        return num1\n    elif num2 >= num1 and num2 >= num3:\n        return num2\n    else:\n        return num3\n    \nprint(max_of_three(3,5,6))\nprint(max_of_three(1,2,3))\nprint(max_of_three(7,8,9))\n\n",
        "generated_testcode": "assert max_of_three(10,20,30) == 30\n",
        "test": "assert max_of_three(10,20,30)==30\nassert max_of_three(55,47,39)==55\nassert max_of_three(10,49,30)==49",
        "canonical_solution": "def max_of_three(num1,num2,num3): \r\n    if (num1 >= num2) and (num1 >= num3):\r\n       lnum = num1\r\n    elif (num2 >= num1) and (num2 >= num3):\r\n       lnum = num2\r\n    else:\r\n       lnum = num3\r\n    return lnum"
    },
    {
        "number": 673,
        "prompt": "Write a python function to convert a list of multiple integers into a single integer.\ndef convert(list): \n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    integer = 0\n    for num in list:\n        integer = integer * 10 + num\n    return integer\n\n#Test the function\nlist = [1, 2, 3, 4, 5, 6, 7, 8, 9]\nprint(convert(list))\n#Expected output: 123456789 ",
        "generated_testcode": "assert convert([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 123456789\n",
        "test": "assert convert([1,2,3]) == 123\nassert convert([4,5,6]) == 456\nassert convert([7,8,9]) == 789",
        "canonical_solution": "def convert(list): \r\n    s = [str(i) for i in list] \r\n    res = int(\"\".join(s))  \r\n    return (res) "
    },
    {
        "number": 674,
        "prompt": "Write a function to remove duplicate words from a given string using collections module.\ndef remove_duplicate(string):\n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    word_list = string.split()\n    unique_words = set(word_list)\n    return \" \".join(unique_words)\n\n# Testing the function\nstring = \"hello hello world world world world hello\"\nprint(remove_duplicate(string))\n# Output: \"hello world world\" ",
        "generated_testcode": "assert remove_duplicate(\"hello world world world\") == \"hello world\"\n",
        "test": "assert remove_duplicate(\"Python Exercises Practice Solution Exercises\")==(\"Python Exercises Practice Solution\")\nassert remove_duplicate(\"Python Exercises Practice Solution Python\")==(\"Python Exercises Practice Solution\")\nassert remove_duplicate(\"Python Exercises Practice Solution Practice\")==(\"Python Exercises Practice Solution\")",
        "canonical_solution": "from collections import OrderedDict\r\ndef remove_duplicate(string):\r\n  result = ' '.join(OrderedDict((w,w) for w in string.split()).keys())\r\n  return result"
    },
    {
        "number": 675,
        "prompt": "Write a function to add two integers. however, if the sum is between the given range it will return 20.\ndef sum_nums(x, y,m,n):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    result = x + y\n    if result < m:\n        return m\n    elif result > n:\n        return n\n    else:\n        return result\n\n# Test cases\nprint(sum_nums(10, 20, 30, 40)) # Output: 30\nprint(sum_nums(15, 25, 30, 40)) # Output: 35\nprint(sum_nums(40, 50, 30, 40)) # Output: 20\nprint(sum_nums(30, 40, 20, 30)) # Output: 50\nprint(sum_nums(30, 40, 50, 60)) # Output: 50\nprint(sum_nums(10, 20, 15, 25)) # Output: 35",
        "generated_testcode": "assert sum_nums(10, 20, 30, 40) == 50\n",
        "test": "assert sum_nums(2,10,11,20)==20\nassert sum_nums(15,17,1,10)==32\nassert sum_nums(10,15,5,30)==20",
        "canonical_solution": "def sum_nums(x, y,m,n):\r\n    sum_nums= x + y\r\n    if sum_nums in range(m, n):\r\n        return 20\r\n    else:\r\n        return sum_nums"
    },
    {
        "number": 676,
        "prompt": "Write a function to remove everything except alphanumeric characters from the given string by using regex.\ndef remove_extra_char(text1):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": true,
        "answer": "    import re\n    return re.sub(r\"[^a-zA-Z0-9]+\", \"\", text1)\n\n# Test the function with different test cases\nprint(remove_extra_char(\"This is a sample string123!@#\"))  # Output: Thisisasamplestring123\nprint(remove_extra_char(\"Hello, world!\"))        # Output: Helloworld\nprint(remove_extra_char(\"Python3.6 is awesome\")) # Output: Python36isawesome\nprint(remove_extra_char(\"Testing123$%^\"))      # Output: Testing123\nprint(remove_extra_char(\"Math is fun!#\"))     # Output: Mathisfun\n",
        "generated_testcode": "assert remove_extra_char(\"Hello, World! 123\") == \"HelloWorld123\"\n",
        "test": "assert remove_extra_char('**//Google Android// - 12. ') == 'GoogleAndroid12'\nassert remove_extra_char('****//Google Flutter//*** - 36. ') == 'GoogleFlutter36'\nassert remove_extra_char('**//Google Firebase// - 478. ') == 'GoogleFirebase478'",
        "canonical_solution": "import re\r\ndef remove_extra_char(text1):\r\n  pattern = re.compile('[\\W_]+')\r\n  return (pattern.sub('', text1))"
    },
    {
        "number": 677,
        "prompt": "Write a function to check if the triangle is valid or not.\ndef validity_triangle(a,b,c):\n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    if a+b > c and a+c > b and b+c > a:\n        return True\n    else:\n        return False\n\na = 3\nb = 4\nc = 5\n\nprint(validity_triangle(a,b,c)) # True\n\na = 3\nb = 4\nc = 6\nprint(validity_triangle(a,b,c)) # False\n\na = 0\nb = 0\nc = 0\nprint(validity_triangle(a,b,c)) # False",
        "generated_testcode": "assert validity_triangle(3,4,5) == True\n",
        "test": "assert validity_triangle(60,50,90)==False\nassert validity_triangle(45,75,60)==True\nassert validity_triangle(30,50,100)==True",
        "canonical_solution": "def validity_triangle(a,b,c):\r\n total = a + b + c\r\n if total == 180:\r\n    return True\r\n else:\r\n    return False"
    },
    {
        "number": 678,
        "prompt": "Write a python function to remove spaces from a given string.\ndef remove_spaces(str1):\n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    return str1.replace(\" \", \"\")\n\n#Test the function with an example string\nprint(remove_spaces(\"Hello World\")) ",
        "generated_testcode": "assert remove_spaces(\"Hello World\") == \"HelloWorld\"\n",
        "test": "assert remove_spaces(\"a b c\") == \"abc\"\nassert remove_spaces(\"1 2 3\") == \"123\"\nassert remove_spaces(\" b c\") == \"bc\"",
        "canonical_solution": "def remove_spaces(str1):\r\n  str1 = str1.replace(' ','')\r\n  return str1"
    },
    {
        "number": 679,
        "prompt": "Write a function to access dictionary key\u2019s element by index.\ndef access_key(ditionary,key):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    \"\"\"\n    This function takes a dictionary as input and a key as input and returns the element of the dictionary at the given key if the key exists, else returns None.\n\n    \"\"\"\n    if key in dictionary:\n        return dictionary[key]\n    else:\n        return None\n\n\n# Test cases\ndictionary = {\"apple\":1,\"banana\":2,\"orange\":3,\"grape\":4}\nprint(access_key(dictionary, \"apple\")) # Output: 1\nprint(access_key(dictionary, \"kiwi\")) # Output: None\n",
        "generated_testcode": "assert access_key({\"a\":1,\"b\":2,\"c\":3},0) == 1\n",
        "test": "assert access_key({'physics': 80, 'math': 90, 'chemistry': 86},0)== 'physics'\nassert access_key({'python':10, 'java': 20, 'C++':30},2)== 'C++'\nassert access_key({'program':15,'computer':45},1)== 'computer'",
        "canonical_solution": "def access_key(ditionary,key):\r\n  return list(ditionary)[key]"
    },
    {
        "number": 680,
        "prompt": "Write a python function to check whether a sequence of numbers has an increasing trend or not.\ndef increasing_trend(nums):\n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    for i in range(len(nums)-1):\n        if nums[i] > nums[i+1]:\n            return False\n    return True\n\n# Test cases\nprint(increasing_trend([1, 2, 3, 4, 5, 6, 7, 8, 9])) # True\nprint(increasing_trend([1, 2, 4, 3, 5, 6, 7, 8, 9])) # False\nprint(increasing_trend([1, 2, 3, 4, 5, 3, 4, 5])) # False\nprint(increasing_trend([1, 2, 3, 4, 4, 5, 5, 6])) # False\nprint(increasing_trend([1, 2, 3, 4, 5, 6, 7])) # True\nprint(increasing_trend([5, 4, 3, 2, 1])) # False\nprint(increasing_trend([1])) # True\nprint(increasing_trend([])) # True",
        "generated_testcode": "assert increasing_trend([1, 2, 3, 4, 5, 6, 7, 8, 9]) == True\n",
        "test": "assert increasing_trend([1,2,3,4]) == True\nassert increasing_trend([4,3,2,1]) == False\nassert increasing_trend([0,1,4,9]) == True",
        "canonical_solution": "def increasing_trend(nums):\r\n    if (sorted(nums)== nums):\r\n        return True\r\n    else:\r\n        return False"
    },
    {
        "number": 681,
        "prompt": "Write a python function to find the smallest prime divisor of a number.\ndef smallest_Divisor(n): \n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    if n < 2:\n        return None\n    for i in range(2, int(n**(0.5)+1):\n        if n % i == 0:\n            return i\n    return None\n\nprint(smallest_Divisor(15)) # Output: 3\nprint(smallest_Divisor(25)) # Output: 5\nprint(smallest_Divisor(17)) # Output: None\n\n# Explanation:\n# For 15, the smallest prime divisor is 3, for 25, the smallest prime divisor is 5, and for 17, there is no prime divisor. ",
        "generated_testcode": "assert smallest_Divisor(12) == 2\n",
        "test": "assert smallest_Divisor(10) == 2\nassert smallest_Divisor(25) == 5\nassert smallest_Divisor(31) == 31",
        "canonical_solution": "def smallest_Divisor(n): \r\n    if (n % 2 == 0): \r\n        return 2; \r\n    i = 3;  \r\n    while (i*i <= n): \r\n        if (n % i == 0): \r\n            return i; \r\n        i += 2; \r\n    return n; "
    },
    {
        "number": 682,
        "prompt": "Write a function to multiply two lists using map and lambda function.\ndef mul_list(nums1,nums2):\n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    return list(map(lambda x,y:x*y,nums1,nums2))\n\n#Example:\nnums1 = [1,2,3,4]\nnums2 = [5,6,7]\nprint(mul_list(nums1,nums2)) #[5,12,21]\n\nnums1 = [1,2,3,4]\nnums2 = [0,10,20]\nprint(mul_list(nums1,nums2)) #[0,20,60]\nnums1 = [10,20,30]\nnums2 = [1,2,3]\nprint(mul_list(nums1,nums2)) #[10,40,90] ",
        "generated_testcode": "assert mul_list([1,2,3],[4,5,6]) == [4,10,18]\n",
        "test": "assert mul_list([1, 2, 3],[4,5,6])==[4,10,18]\nassert mul_list([1,2],[3,4])==[3,8]\nassert mul_list([90,120],[50,70])==[4500,8400]",
        "canonical_solution": "def mul_list(nums1,nums2):\r\n  result = map(lambda x, y: x * y, nums1, nums2)\r\n  return list(result)"
    },
    {
        "number": 683,
        "prompt": "Write a python function to check whether the given number can be represented by sum of two squares or not.\ndef sum_Square(n) : \n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    for i in range(1,int(n**0.5)+1) : \n        j = int(n/i)\n        if i**2+j**2 == n : \n            return True\n    return False\n\n# Driver code \nn = 5\nif sum_Square(n) : \n    print(\"Yes\")\nelse : \n    print(\"No\")\n\nn = 13\nif sum_Square(n) : \n    print(\"Yes\")\nelse : \n    print(\"No\")\nn = 16\nif sum_Square(n) : \n    print(\"Yes\")\nelse : \n    print(\"No\")\nn = 30\nif sum_Square(n) : \n    print(\"Yes\")\nelse : \n    print(\"No\")\nn = 31\nif sum_Square(n) : \n    print(\"Yes\")\nelse : \n    print(\"No\")\nn = 20\nif sum_Square(n) : \n    print(\"Yes\")\nelse : \n    print(\"No\")\nn = 100\nif sum_Square(n) : \n    print(\"Yes\")\nelse : \n    print(\"No\")\nn = 1024\nif sum_Square(n) : \n    print(\"Yes\")\nelse : \n    print(\"No\")\nn = 1025\nif sum_Square(n) : \n    print(\"Yes\")",
        "generated_testcode": "assert sum_Square(1) == True\n",
        "test": "assert sum_Square(25) == True\nassert sum_Square(24) == False\nassert sum_Square(17) == True",
        "canonical_solution": "def sum_Square(n) : \r\n    i = 1 \r\n    while i*i <= n : \r\n        j = 1\r\n        while (j*j <= n) : \r\n            if (i*i+j*j == n) : \r\n                return True\r\n            j = j+1\r\n        i = i+1     \r\n    return False"
    },
    {
        "number": 684,
        "prompt": "Write a python function to count occurences of a character in a repeated string.\ndef count_Char(str,x): \n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    count = 0\n    for i in str:\n        if i == x:\n            count += 1\n    return count\n\n#Test the function\nprint(count_Char(\"hellooooo\", \"o\")) # Output: 5\nprint(count_Char(\"hello world\", \"l\")) # Output: 3\nprint(count_Char(\"python\", \"p\")) # Output: 1\nprint(count_Char(\"hello\", \"a\")) # Output: 0\n\n\n#Alternate Solution\ndef count_Char(str,x):\n    return str.count(x)\n\n#Test the function\nprint(count_Char(\"hellooooo\", \"o\")) # Output: 5\nprint(count_Char(\"hello world\", \"l\")) # Output: 3\nprint(count_Char(\"python\", \"p\")) # Output: 1\nprint(count_Char(\"hello\", \"a\")) # Output: 0\n",
        "generated_testcode": "assert count_Char(\"hellohello\", \"l\") == 3\n",
        "test": "assert count_Char(\"abcac\",'a') == 4\nassert count_Char(\"abca\",'c') == 2\nassert count_Char(\"aba\",'a') == 7",
        "canonical_solution": "def count_Char(str,x): \r\n    count = 0\r\n    for i in range(len(str)):  \r\n        if (str[i] == x) : \r\n            count += 1\r\n    n = 10\r\n    repititions = n // len(str)  \r\n    count = count * repititions  \r\n    l = n % len(str)  \r\n    for i in range(l): \r\n        if (str[i] == x):  \r\n            count += 1\r\n    return count  "
    },
    {
        "number": 685,
        "prompt": "Write a python function to find sum of prime numbers between 1 to n.\ndef sum_Of_Primes(n): \n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    def isPrime(num): \n        if num < 2: \n            return False\n        for i in range(2, num): \n            if num % i == 0: \n                return False\n        return True\n      \n    sum = 0\n    for i in range(2, n+1): \n        if isPrime(i): \n            sum += i\n    return sum ",
        "generated_testcode": "assert sum_Of_Primes(10) == 17\n",
        "test": "assert sum_Of_Primes(10) == 17\nassert sum_Of_Primes(20) == 77\nassert sum_Of_Primes(5) == 10",
        "canonical_solution": "def sum_Of_Primes(n): \r\n    prime = [True] * (n + 1)  \r\n    p = 2\r\n    while p * p <= n: \r\n        if prime[p] == True:  \r\n            i = p * 2\r\n            while i <= n: \r\n                prime[i] = False\r\n                i += p \r\n        p += 1    \r\n    sum = 0\r\n    for i in range (2,n + 1): \r\n        if(prime[i]): \r\n            sum += i \r\n    return sum"
    },
    {
        "number": 686,
        "prompt": "Write a function to find the frequency of each element in the given list.\ndef freq_element(test_tup):\n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    freq_dict = {}\n    for i in test_tup:\n        if i in freq_dict:\n            freq_dict[i] += 1\n        else:\n            freq_dict[i] = 1\n    return freq_dict\n\n\n# Test the function\nprint(freq_element((1, 2, 3, 4, 2, 3, 5, 4, 6, 1, 2, 4, 5, 7, 8))) ",
        "generated_testcode": "assert freq_element(()) == {}\n",
        "test": "assert freq_element((4, 5, 4, 5, 6, 6, 5, 5, 4) ) == '{4: 3, 5: 4, 6: 2}'\nassert freq_element((7, 8, 8, 9, 4, 7, 6, 5, 4) ) == '{7: 2, 8: 2, 9: 1, 4: 2, 6: 1, 5: 1}'\nassert freq_element((1, 4, 3, 1, 4, 5, 2, 6, 2, 7) ) == '{1: 2, 4: 2, 3: 1, 5: 1, 2: 2, 6: 1, 7: 1}'",
        "canonical_solution": "from collections import defaultdict \r\ndef freq_element(test_tup):\r\n  res = defaultdict(int)\r\n  for ele in test_tup:\r\n    res[ele] += 1\r\n  return (str(dict(res))) "
    },
    {
        "number": 687,
        "prompt": "Write a function to find the greatest common divisor (gcd) of two integers by using recursion.\ndef recur_gcd(a, b):\n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    if b == 0:\n        return a\n    else:\n        return recur_gcd(b, a % b)\n\n#Test the function\nprint(recur_gcd(120, 24)) # Output: 12\nprint(recur_gcd(90, 60)) # Output: 30\nprint(recur_gcd(12, 8)) # Output: 4\n\n\n#Test the function with negative integers\nprint(recur_gcd(-12, 24)) # Output: 12\nprint(recur_gcd(-90, 60)) # Output: 30\nprint(recur_gcd(-12, -8)) # Output: 4\nprint(recur_gcd(-120, 24)) # Output: 12\nprint(recur_gcd(-90, -60)) # Output: 30\nprint(recur_gcd(-12, -8)) # Output: 4\n\n#Test the function with different values\nprint(recur_gcd(15, 27)) # Output: 3\nprint(recur_gcd(100, 17)) # Output: 1\nprint(recur_gcd(20, 18)) # Output: 6\nprint(recur_gcd(7, 13)) # Output: 1\nprint(recur_gcd(-100, 30))",
        "generated_testcode": "assert recur_gcd(12, 18) == 6\n",
        "test": "assert recur_gcd(12,14) == 2\nassert recur_gcd(13,17) == 1\nassert recur_gcd(9, 3) == 3",
        "canonical_solution": "def recur_gcd(a, b):\r\n\tlow = min(a, b)\r\n\thigh = max(a, b)\r\n\tif low == 0:\r\n\t\treturn high\r\n\telif low == 1:\r\n\t\treturn 1\r\n\telse:\r\n\t\treturn recur_gcd(low, high%low)"
    },
    {
        "number": 688,
        "prompt": "Write a function to get the length of a complex number.\ndef len_complex(a,b):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    return ((a**2)+(b**2))**(1/2)\n\n# Test the function with sample inputs\nprint(len_complex(3,4)) # Output: 5.0\nprint(len_complex(0,5)) # Output: 5.0\nprint(len_complex(6,0)) # Output: 6.0\nprint(len_complex(0,0)) # Output: 0.0\n\n\n#Alternate solution:\nimport math\ndef len_complex(a,b):\n    return math.sqrt(a**2 + b**2)\n\n# Test the function with sample inputs\nprint(len_complex(3,4)) # Output: 5.0\nprint(len_complex(0,5)) # Output: 5.0\nprint(len_complex(6,0)) # Output: 6.0\nprint(len_complex(0,0)) # Output: 0.0\n\n",
        "generated_testcode": "assert len_complex(3+4j) == 5\n",
        "test": "assert len_complex(3,4)==5.0\nassert len_complex(9,10)==13.45362404707371\nassert len_complex(7,9)==11.40175425099138",
        "canonical_solution": "import cmath\r\ndef len_complex(a,b):\r\n  cn=complex(a,b)\r\n  length=abs(cn)\r\n  return length"
    },
    {
        "number": 689,
        "prompt": "## write a function to find the minimum number of jumps to reach the end of the array for the given array of integers where each element represents the max number of steps that can be made forward from that element. > indented block > indented block\ndef min_jumps(arr, n):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n    if arr[n-1] == 0:\n        return -1\n    max_reach = arr[0]\n    steps = arr[0]\n    jumps = 1\n    for i in range(1, n):\n        if i == n-1:\n            return jumps\n        max_reach = max(max_reach, i + arr[i])\n        if max_reach >= n-1:\n            return jumps\n        if max_reach == i:\n            return -1\n        jumps += 1\n    return -1\n\n## test case\nprint(min_jumps([2, 3, 1, 1, 1, 4], 4)) # 2\nprint(min_jumps([2, 3, 1, 1, 0, 4], 4)) # -1\nprint(min_jumps([2, 3, 1, 2, 1, 4], 4)) # 2\nprint(min_jumps([1, 2, 3, 1, 1, 4], 4)) # 3\nprint(min_jumps([2, 3, 1, 1, 1, 4], 5)) # 2\n\n\n## solution explanation:\n# The function takes an array of integers and the length of the array as input.\n# If the length of the",
        "generated_testcode": "assert min_jumps([2, 3, 1, 1, 1, 4], 4) == 2\n",
        "test": "assert min_jumps([1, 3, 6, 1, 0, 9], 6) == 3\nassert min_jumps([1, 3, 5, 8, 9, 2, 6, 7, 6, 8, 9], 11) == 3\nassert min_jumps([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], 11) == 10",
        "canonical_solution": "def min_jumps(arr, n):\r\n\tjumps = [0 for i in range(n)]\r\n\tif (n == 0) or (arr[0] == 0):\r\n\t\treturn float('inf')\r\n\tjumps[0] = 0\r\n\tfor i in range(1, n):\r\n\t\tjumps[i] = float('inf')\r\n\t\tfor j in range(i):\r\n\t\t\tif (i <= j + arr[j]) and (jumps[j] != float('inf')):\r\n\t\t\t\tjumps[i] = min(jumps[i], jumps[j] + 1)\r\n\t\t\t\tbreak\r\n\treturn jumps[n-1]"
    },
    {
        "number": 690,
        "prompt": "Write a function to multiply consecutive numbers of a given list.\ndef mul_consecutive_nums(nums):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    if len(nums) < 2:\n        return 0\n    product = 1\n    for i in range(len(nums) - 1):\n        product *= nums[i] * nums[i + 1]\n    return product\n\n\n# Test cases\nprint(mul_consecutive_nums([1, 2, 3, 4, 5, 6])) # Output: 24\nprint(mul_consecutive_nums([1, 2, 3, 4, 5, 6, 7])) # Output: 28\nprint(mul_consecutive_nums([1, 2, 3, 4])) # Output: 12\nprint(mul_consecutive_nums([1])) # Output: 0\nprint(mul_consecutive_nums([1, 2])) # Output: 2\n",
        "generated_testcode": "assert mul_consecutive_nums([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 120\n",
        "test": "assert mul_consecutive_nums([1, 1, 3, 4, 4, 5, 6, 7])==[1, 3, 12, 16, 20, 30, 42]\nassert mul_consecutive_nums([4, 5, 8, 9, 6, 10])==[20, 40, 72, 54, 60]\nassert mul_consecutive_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[2, 6, 12, 20, 30, 42, 56, 72, 90]",
        "canonical_solution": "def mul_consecutive_nums(nums):\r\n    result = [b*a for a, b in zip(nums[:-1], nums[1:])]\r\n    return result"
    },
    {
        "number": 691,
        "prompt": "Write a function to group the 1st elements on the basis of 2nd elements in the given tuple list.\ndef group_element(test_list):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    result = {}\n    for i in test_list:\n        if i[1] in result:\n            result[i[1]].append(i[0])\n        else:\n            result[i[1]] = [i[0]]\n    return result\n\n# Example usage:\ntest_list = [(\"apple\", 1), (\"banana\", 2), (\"orange\", 2), (\"grape\", 3), (\"mango\", 1), (\"kiwi\", 3), (\"pineapple\", 2)]\nprint(group_element(test_list)) # Output: {1: ['apple', 'mango'], 2: ['banana', 'orange'], 3: ['grape', 'kiwi']}\n\n# Alternate implementation using defaultdict\nfrom collections import defaultdict\n\ndef group_element(test_list):\n    result = defaultdict(list)\n    for i in test_list:\n        result[i[1]].append(i[0])\n    return dict(result)\n\n# Example usage:\ntest_list = [(\"apple\", 1), (\"banana\", 2), (\"orange\", 2), (\"grape\", 3), (\"mango\", 1), (\"kiwi\", 3), (\"pineapple\", 2)]\nprint(group_element(test_list)) # Output: {1: ['apple', 'mango'], 2: ['banana', 'orange'], 3: ['grape', 'kiwi']}\n\n# Both implementations will output the same result",
        "generated_testcode": "assert group_element([(1,2), (2,3), (3,2), (4,5), (5,2), (6,7), (7,2), (8,9), (9,2)] ) == {2: [(1,2), (3,2), (5,2), (7,2), (9,2)], 3: [(2,3)], 5: [(4,5)], 7: [(6,7)], 9: [(8,9)]}\n\n# Test case 2\n",
        "test": "assert group_element([(6, 5), (2, 7), (2, 5), (8, 7), (9, 8), (3, 7)]) == {5: [6, 2], 7: [2, 8, 3], 8: [9]}\nassert group_element([(7, 6), (3, 8), (3, 6), (9, 8), (10, 9), (4, 8)]) == {6: [7, 3], 8: [3, 9, 4], 9: [10]}\nassert group_element([(8, 7), (4, 9), (4, 7), (10, 9), (11, 10), (5, 9)]) == {7: [8, 4], 9: [4, 10, 5], 10: [11]}",
        "canonical_solution": "from itertools import groupby \r\ndef group_element(test_list):\r\n  res = dict()\r\n  for key, val in groupby(sorted(test_list, key = lambda ele: ele[1]), key = lambda ele: ele[1]):\r\n    res[key] = [ele[0] for ele in val] \r\n  return (res)\r\n"
    },
    {
        "number": 692,
        "prompt": "Write a python function to find the last two digits in factorial of a given number.\ndef last_Two_Digits(N): \n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    # Initialize the variable to store the factorial \n    fact = 1\n    # Iterate through the range of numbers from 1 to N and multiply the product of each number with fact\n    for i in range(1, N+1): \n        fact *= i \n    # Take only the last two digits of the factorial\n    return fact % 1000\n\n# Take input from the user\nN = int(input(\"Enter a number: \")) \n# Call the function to find the last two digits of factorial of N\nresult = last_Two_Digits(N) \n# Print the result\nprint(\"The last two digits of factorial of\", N, \"is\", result) ",
        "generated_testcode": "assert last_Two_Digits(5) == 24\n",
        "test": "assert last_Two_Digits(7) == 40\nassert last_Two_Digits(5) == 20\nassert last_Two_Digits(2) == 2",
        "canonical_solution": "def last_Two_Digits(N): \r\n    if (N >= 10): \r\n        return\r\n    fac = 1\r\n    for i in range(1,N + 1): \r\n        fac = (fac * i) % 100\r\n    return (fac) "
    },
    {
        "number": 693,
        "prompt": "Write a function to remove multiple spaces in a string by using regex.\ndef remove_multiple_spaces(text1):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    return re.sub(r'\\s+', ' ', text1)\n\n# test the function\ntext1 = \"hello     there    world  how    are  you     doing\"\nprint(remove_multiple_spaces(text1))\n# Output: \"hello there world how are you doing\"\n\ntext2 = \"     i     am      a     student    at     uni    \"\nprint(remove_multiple_spaces(text2))\n# Output: \"i am a student at uni\" ",
        "generated_testcode": "assert remove_multiple_spaces(\"hello  world\") == \"hello world\"\n",
        "test": "assert remove_multiple_spaces('Google      Assistant') == 'Google Assistant'\nassert remove_multiple_spaces('Quad      Core') == 'Quad Core'\nassert remove_multiple_spaces('ChromeCast      Built-in') == 'ChromeCast Built-in'",
        "canonical_solution": "import re\r\ndef remove_multiple_spaces(text1):\r\n  return (re.sub(' +',' ',text1))"
    },
    {
        "number": 694,
        "prompt": "Write a function to extract unique values from the given dictionary values.\ndef extract_unique(test_dict):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    unique_values = []\n    for key, value in test_dict.items():\n        if value not in unique_values:\n            unique_values.append(value)\n    return unique_values\n\n\ntest_dict = {\n    \"apple\": 1,\n    \"banana\": 2,\n    \"orange\": 2,\n    \"grape\": 3,\n    \"kiwi\": 4,\n    \"kiwi\": 5,\n    \"mango\": 3\n}\n\nprint(extract_unique(test_dict))  # Output should be [1, 2, 3, 4, 5]",
        "generated_testcode": "assert extract_unique({'a': [1, 2, 3, 4, 5], 'b': [2, 3, 4, 5, 6], 'c': [1, 2, 3, 4]} == [1, 2, 3, 4, 5, 6]\n",
        "test": "assert extract_unique({'msm' : [5, 6, 7, 8],'is' : [10, 11, 7, 5],'best' : [6, 12, 10, 8],'for' : [1, 2, 5]} ) == [1, 2, 5, 6, 7, 8, 10, 11, 12]\nassert extract_unique({'Built' : [7, 1, 9, 4],'for' : [11, 21, 36, 14, 9],'ISP' : [4, 1, 21, 39, 47],'TV' : [1, 32, 38]} ) == [1, 4, 7, 9, 11, 14, 21, 32, 36, 38, 39, 47]\nassert extract_unique({'F' : [11, 13, 14, 17],'A' : [12, 11, 15, 18],'N' : [19, 21, 15, 36],'G' : [37, 36, 35]}) == [11, 12, 13, 14, 15, 17, 18, 19, 21, 35, 36, 37]",
        "canonical_solution": "def extract_unique(test_dict):\r\n  res = list(sorted({ele for val in test_dict.values() for ele in val}))\r\n  return res"
    },
    {
        "number": 695,
        "prompt": "Write a function to check if each element of the second tuple is greater than its corresponding index in the first tuple.\ndef check_greater(test_tup1, test_tup2):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    result = []\n    for i in range(len(test_tup2)):\n        if test_tup2[i] > test_tup1[i]:\n            result.append(True)\n        else:\n            result.append(False)\n    return result\n\n# Test the function with the following input\ntest_tup1 = (5, 10, 15, 20)\ntest_tup2 = (10, 5, 10, 15)\nprint(check_greater(test_tup1, test_tup2)) # Output: [False, True, True]\n\ntest_tup1 = (1, 2, 3, 4)\ntest_tup2 = (4, 3, 2, 1)\nprint(check_greater(test_tup1, test_tup2)) # Output: [True, True, True, True]\n\ntest_tup1 = (5, 10, 15)\ntest_tup2 = (10, 15, 20)\nprint(check_greater(test_tup1, test_tup2)) # Output: [True]\n\ntest_tup1 = (1, 2, 3, 4)\ntest_tup2 = (5, 4, 3)\nprint(check_greater(test_tup1, test_tup2)) # Output: [False, True, True]\n\n",
        "generated_testcode": "assert check_greater((1, 2, 3, 4, 5, 6), (0, 1, 2, 3, 4)) == (True, True, True, True, True)\n",
        "test": "assert check_greater((10, 4, 5), (13, 5, 18)) == True\nassert check_greater((1, 2, 3), (2, 1, 4)) == False\nassert check_greater((4, 5, 6), (5, 6, 7)) == True",
        "canonical_solution": "def check_greater(test_tup1, test_tup2):\r\n  res = all(x < y for x, y in zip(test_tup1, test_tup2))\r\n  return (res) "
    },
    {
        "number": 696,
        "prompt": "Write a function to zip two given lists of lists.\ndef zip_list(list1,list2):  \n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    #initialize an empty list to hold the zipped list\n    zipped_list = []\n    #iterate through each element in the lists\n    for i in range(len(list1)):\n        #create a tuple of the two lists\n        zipped_list.append(tuple((list1[i],list2[i]))\n    #return the zipped list\n    return zipped_list\n\n#test the function\nlist1 = [[1,2,3],[4,5,6],[7,8,9]]\nlist2 = [[\"a\",\"b\",\"c\"],[\"d\",\"e\",\"f\"],[\"g\",\"h\",\"i\"]]\nprint(zip_list(list1,list2)) #output: [(1, 'a', 2, 'b', 3, 'c'), (4, 'd', 5, 'e'), (6, 'f', 7, 'g'), (8, 'h', 9, 'i')]\n\n#this function will zip the two lists of lists into a single list of tuples\n#in this case, the first tuple will contain the first element of each list, the second tuple will contain the second element of each list, and so on\n#the order of the lists doesn't matter as long as they have the same number of elements",
        "generated_testcode": "assert zip_list([[1,2,3],[4,5,6]) == [[1,4],[2,5],[3,6]]\n",
        "test": "assert zip_list([[1, 3], [5, 7], [9, 11]] ,[[2, 4], [6, 8], [10, 12, 14]] )==[[1, 3, 2, 4], [5, 7, 6, 8], [9, 11, 10, 12, 14]]\nassert zip_list([[1, 2], [3, 4], [5, 6]] ,[[7, 8], [9, 10], [11, 12]] )==[[1, 2, 7, 8], [3, 4, 9, 10], [5, 6, 11, 12]]\nassert zip_list([['a','b'],['c','d']] , [['e','f'],['g','h']] )==[['a','b','e','f'],['c','d','g','h']]",
        "canonical_solution": "def zip_list(list1,list2):  \r\n result = list(map(list.__add__, list1, list2)) \r\n return result"
    },
    {
        "number": 697,
        "prompt": "Write a function to find number of even elements in the given list using lambda function.\ndef count_even(array_nums):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    return len(list(filter(lambda x: x%2==0, array_nums))\n\n\n# Test cases\nprint(count_even([1, 2, 3, 4, 5, 6, 7, 8, 9])) # Output: 3\nprint(count_even([2, 4, 6, 8, 10, 12])) # Output: 4\nprint(count_even([1, 3, 5, 7, 9])) # Output: 0\nprint(count_even([])) # Output: 0\n",
        "generated_testcode": "assert count_even([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 3\n",
        "test": "assert count_even([1, 2, 3, 5, 7, 8, 9, 10])==3\nassert count_even([10,15,14,13,-18,12,-20])==5\nassert count_even([1, 2, 4, 8, 9])==3",
        "canonical_solution": "def count_even(array_nums):\r\n   count_even = len(list(filter(lambda x: (x%2 == 0) , array_nums)))\r\n   return count_even"
    },
    {
        "number": 698,
        "prompt": "Write a function to sort dictionary items by tuple product of keys for the given dictionary with tuple keys.\ndef sort_dict_item(test_dict):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    # Sort the dictionary by the product of the tuple keys\n    # Return a list of sorted dictionary items\n    sorted_dict = sorted(test_dict.items(), key=lambda x: x[0][0]*x[0][1])\n    return sorted_dict\n\n# Test the function\ntest_dict = {(4, 2): \"four\", (3, 1): \"three\", (1, 3): \"one\", (2, 4): \"two\", (1, 1): \"one\", (2, 2): \"two\"}\nprint(sort_dict_item(test_dict))\n\n# Output: [(1, 3), (1, 1), (2, 2), (2, 4), (4, 2)]\n# Explanation: The product of the first tuple key (4*2 = 8) is smaller than the product of the second tuple key (3*1 = 3) and so on. ",
        "generated_testcode": "assert sort_dict_item(\n    {(3, 2): 10, (1, 4): 5, (2, 1): 3, (4, 3): 8, (1, 2): 6, (2, 3): 7, (4, 1): 9, (3, 1): 11, (1, 3): 4, (2, 4): 2}) == {(1, 2): 6, (1, 3): 4, (2, 1): 3, (2, 4): 2, (3, 1): 11, (3, 2): 10, (1, 4): 5, (4, 1): 9, (4, 3): 8}\n\n# Test case 2\n",
        "test": "assert sort_dict_item({(5, 6) : 3, (2, 3) : 9, (8, 4): 10, (6, 4): 12} ) == {(2, 3): 9, (6, 4): 12, (5, 6): 3, (8, 4): 10}\nassert sort_dict_item({(6, 7) : 4, (3, 4) : 10, (9, 5): 11, (7, 5): 13} ) == {(3, 4): 10, (7, 5): 13, (6, 7): 4, (9, 5): 11}\nassert sort_dict_item({(7, 8) : 5, (4, 5) : 11, (10, 6): 12, (8, 6): 14} ) == {(4, 5): 11, (8, 6): 14, (7, 8): 5, (10, 6): 12}",
        "canonical_solution": "def sort_dict_item(test_dict):\r\n  res = {key: test_dict[key] for key in sorted(test_dict.keys(), key = lambda ele: ele[1] * ele[0])}\r\n  return  (res) \r\n"
    },
    {
        "number": 699,
        "prompt": "Write a python function to find the minimum number of swaps required to convert one binary string to another.\ndef min_Swaps(str1,str2) : \n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    # Convert binary strings to lists and store their corresponding 1's indices\n    list1 = [i for i in range(len(str1)) if str1[i]=='1']\n    list2 = [i for i in range(len(str2)) if str2[i]=='1']\n    # Create a dictionary to store the difference between the indices in list1 and list2\n    swap_dict = {i:j for i,j in enumerate(list2) if i not in list1}\n    # Initialize a variable to keep track of the minimum number of swaps\n    min_swaps = 0\n    # Iterate through the keys of swap_dict and swap the indices and check if the corresponding index in list2 has been found\n    for key in swap_dict.keys() : \n        if key in list1:\n            # If it has been found, remove it from the list and decrement the min_swaps variable\n            min_swaps -= 1\n        else : \n            # If not, swap the indices and increment min_swaps\n            min_swaps += 1\n            list1.append(swap_dict[key])\n    # Return the minimum number of swaps\n    return min_swaps\n\n# Test the function\nprint(min_Swaps('1011','1110')) # Output: 2 (swap 1 with 2 and swap 2 with 3)\nprint(min_Swaps('1101010','111010')) # Output",
        "generated_testcode": "assert min_Swaps(\"10110\",\"01110\") == 2\n",
        "test": "assert min_Swaps(\"1101\",\"1110\") == 1\nassert min_Swaps(\"1111\",\"0100\") == \"Not Possible\"\nassert min_Swaps(\"1110000\",\"0001101\") == 3",
        "canonical_solution": "def min_Swaps(str1,str2) : \r\n    count = 0\r\n    for i in range(len(str1)) : \r\n        if str1[i] != str2[i] : \r\n            count += 1\r\n    if count % 2 == 0 : \r\n        return (count // 2) \r\n    else : \r\n        return (\"Not Possible\") "
    },
    {
        "number": 700,
        "prompt": "Write a function to count the number of elements in a list which are within a specific range.\ndef count_range_in_list(li, min, max):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": true,
        "answer": "    count = 0\n    for i in li:\n        if min <= i <= max:\n            count += 1\n    return count\n\n# Example usage:\nprint(count_range_in_list([1, 5, 3, 9, 7, 2, 8, 4], 3, 7)) # Output: 3\nprint(count_range_in_list([1, 5, 3, 9, 7, 2, 8, 4], 2, 4)) # Output: 4\nprint(count_range_in_list([1, 5, 3, 9, 7, 2, 8, 4], 6, 10)) # Output: 0\nprint(count_range_in_list([1, 5, 3, 9, 7, 2, 8, 4], 0, 8)) # Output: 5\n\n# Note: The function takes in a list, a minimum value, and a maximum value as arguments and returns the number of elements in the list that are within the range (inclusive) of the minimum and maximum values. If there are no elements within the range, it returns 0. ",
        "generated_testcode": "assert count_range_in_list([1, 2, 3, 4, 5, 6, 7, 8, 9], 4, 7) == 4\n",
        "test": "assert count_range_in_list([10,20,30,40,40,40,70,80,99],40,100)==6\nassert count_range_in_list(['a','b','c','d','e','f'],'a','e')==5\nassert count_range_in_list([7,8,9,15,17,19,45],15,20)==3",
        "canonical_solution": "def count_range_in_list(li, min, max):\r\n\tctr = 0\r\n\tfor x in li:\r\n\t\tif min <= x <= max:\r\n\t\t\tctr += 1\r\n\treturn ctr"
    },
    {
        "number": 701,
        "prompt": "Write a function to find the equilibrium index of the given array.\ndef equilibrium_index(arr):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    left = 0\n    right = len(arr) - 1\n\n    while left < right:\n        if arr[left] > 0:\n            left += 1\n        elif arr[right] < 0:\n            right -= 1\n        else:\n            return left\n\n    return -1\n\n# Test cases\nprint(equilibrium_index([1, 3, 5, 6, 0, 4, 2, 2, -1, 2, 4, 2]) # 3\nprint(equilibrium_index([1, 3, 5, 6, 0, 4, 2, -1, 2, 4, 2, 5]) # -1\nprint(equilibrium_index([1, 3, 5, 6, 0, 4, 2, -1, 2, 4, 2, 5, 2]) # 3\nprint(equilibrium_index([1, 2, 3, 5, 6, 0, 4, 2, 2, 4, 2]) # 4\nprint(equilibrium_index([1, 2, 3, 4, 5, 6, 0, 2, 2]) # 2\nprint(equilibrium_index([0, 2, 0, 0, 2, 2]) # 2\nprint(equilibrium_index([1, 1, 1, ",
        "generated_testcode": "assert equilibrium_index([1, 3, 5, 6, 4, 2, 2, 1, 4, 3]) == 3\n",
        "test": "assert equilibrium_index([1, 2, 3, 4, 1, 2, 3]) == 3\nassert equilibrium_index([-7, 1, 5, 2, -4, 3, 0]) == 3\nassert equilibrium_index([1, 2, 3]) == -1",
        "canonical_solution": "def equilibrium_index(arr):\r\n  total_sum = sum(arr)\r\n  left_sum=0\r\n  for i, num in enumerate(arr):\r\n    total_sum -= num\r\n    if left_sum == total_sum:\r\n      return i\r\n    left_sum += num\r\n  return -1"
    },
    {
        "number": 702,
        "prompt": "Write a function to find the minimum number of elements that should be removed such that amax-amin<=k.\ndef find_ind(key, i, n, \n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "         min_rem, k, min_indices,\n          indices_dict, last_indices):\n    if i == n:\n        return min_rem\n    for j in range(n):\n        if j not in indices_dict[key] and i-j<=k:\n            if i-j in last_indices[key]:\n                min_rem = min(min_rem, 1)\n            else:\n                min_rem = min(min_rem, 0)\n            indices_dict[key].add(j)\n            last_indices[key].add(i-j)\n            min_indices[key] = max(min_indices[key], i-j)\n    return find_ind(key+1, n, min_rem, k, min_indices, indices_dict, last_indices)\n\ndef remove_elements(arr, k):\n    if len(arr)<=k:\n        return 0\n    indices_dict = {}\n    last_indices = {}\n    n = len(arr)\n    min_indices = {i:0 for i in range(n+1)}\n    for i in range(n):\n        indices_dict[i] = set()\n        last_indices[i] = set()\n        min_indices[i] = float('inf')\n    for i in range(n):\n        indices_dict[i].add(i)\n        last_indices[i].add(i)\n        min_indices",
        "generated_testcode": "assert find_ind(key, 5, 10, 3) == 2\n",
        "test": "assert removals([1, 3, 4, 9, 10,11, 12, 17, 20], 9, 4) == 5\nassert removals([1, 5, 6, 2, 8], 5, 2) == 3\nassert removals([1, 2, 3 ,4, 5, 6], 6, 3) == 2",
        "canonical_solution": "def find_ind(key, i, n, \r\n\t\t\tk, arr):\r\n\tind = -1\r\n\tstart = i + 1\r\n\tend = n - 1;\r\n\twhile (start < end):\r\n\t\tmid = int(start +\r\n\t\t\t\t(end - start) / 2)\r\n\t\tif (arr[mid] - key <= k):\r\n\t\t\tind = mid\r\n\t\t\tstart = mid + 1\r\n\t\telse:\r\n\t\t\tend = mid\r\n\treturn ind\r\ndef removals(arr, n, k):\r\n\tans = n - 1\r\n\tarr.sort()\r\n\tfor i in range(0, n):\r\n\t\tj = find_ind(arr[i], i, \r\n\t\t\t\t\tn, k, arr)\r\n\t\tif (j != -1):\r\n\t\t\tans = min(ans, n -\r\n\t\t\t\t\t\t(j - i + 1))\r\n\treturn ans"
    },
    {
        "number": 703,
        "prompt": "Write a function to check whether the given key is present in the dictionary or not.\ndef is_key_present(d,x):\n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    if x in d:\n        return True\n    else:\n        return False\n\n#Testing the function\nd = {'a':1, 'b':2, 'c':3, 'd':4}\nprint(is_key_present(d, 'a')) # True\nprint(is_key_present(d, 'f')) # False\n\n\n#Write a function to print the keys of a dictionary\ndef print_keys(d):\n    for key in d:\n        print(key)\n\n#Testing the function\nd = {'a':1, 'b':2, 'c':3, 'd':4}\nprint_keys(d) # Output: a b c d\n\n#Write a function to print the values of a dictionary\ndef print_values(d):\n    for value in d.values():\n        print(value)\n\n#Testing the function\nd = {'a':1, 'b':2, 'c':3, 'd':4}\nprint_values(d) # Output: 1 2 3 4\n\n#Write a function to print the key-value pairs of a dictionary\ndef print_key_value_pairs(d):\n    for key, value in d.items():\n        print(key, value)\n\n#Testing the function\nd = {'a':1, 'b':2, 'c':3, 'd':4}\nprint_key_value_pairs(d) # Output: a 1 b 2 c 3 d 4\n\n",
        "generated_testcode": "assert is_key_present({\"a\":1, \"b\":2, \"c\":3}, \"a\") == True\n",
        "test": "assert is_key_present({1: 10, 2: 20, 3: 30, 4: 40, 5: 50, 6: 60},5)==True\nassert is_key_present({1: 10, 2: 20, 3: 30, 4: 40, 5: 50, 6: 60},6)==True\nassert is_key_present({1: 10, 2: 20, 3: 30, 4: 40, 5: 50, 6: 60},10)==False",
        "canonical_solution": "def is_key_present(d,x):\r\n  if x in d:\r\n    return True\r\n  else:\r\n     return False"
    },
    {
        "number": 704,
        "prompt": "Write a function to calculate the harmonic sum of n-1.\ndef harmonic_sum(n):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": true,
        "answer": "    \"\"\"\n    :param n: int - an integer\n    :return: float - the harmonic sum of n-1\n    \"\"\"\n    # Write your code here\n    sum = 0\n    for i in range(1, n):\n        sum += 1/i\n    return sum\n    ",
        "generated_testcode": "assert harmonic_sum(1) == 0\n",
        "test": "assert harmonic_sum(10)==2.9289682539682538\nassert harmonic_sum(4)==2.083333333333333\nassert harmonic_sum(7)==2.5928571428571425 ",
        "canonical_solution": "def harmonic_sum(n):\r\n  if n < 2:\r\n    return 1\r\n  else:\r\n    return 1 / n + (harmonic_sum(n - 1))"
    },
    {
        "number": 705,
        "prompt": "Write a function to sort a list of lists by length and value.\ndef sort_sublists(list1):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    sorted_list = sorted(list1, key=lambda x: (-len(x), x)\n    return sorted_list\n\n# Test the function with the following example input:\nlist1 = [['banana', 'apple', ['orange', 'grape'], ['kiwi', 'cherry', 'blueberry'], ['strawberry'], ['pear', 'peach']]\nprint(sort_sublists(list1))\n# Output: [['pear', 'peach'], ['kiwi', 'cherry', 'blueberry'], ['strawberry'], ['banana', 'apple'], ['orange', 'grape']] ",
        "generated_testcode": "assert sort_sublists([[1,2,3], [4,5], [6], [7,8,9,10], [1,2,3,4,5], [10,20,30,40,50]] ] == [[1,2,3], [1,2,3,4,5], [4,5], [6], [7,8,9,10], [10,20,30,40,50]",
        "test": "assert sort_sublists([[2], [0], [1, 3], [0, 7], [9, 11], [13, 15, 17]])==[[0], [2], [0, 7], [1, 3], [9, 11], [13, 15, 17]]\nassert sort_sublists([[1], [2, 3], [4, 5, 6], [7], [10, 11]])==[[1], [7], [2, 3], [10, 11], [4, 5, 6]]\nassert sort_sublists([[\"python\"],[\"java\",\"C\",\"C++\"],[\"DBMS\"],[\"SQL\",\"HTML\"]])==[['DBMS'], ['python'], ['SQL', 'HTML'], ['java', 'C', 'C++']]",
        "canonical_solution": "def sort_sublists(list1):\r\n      list1.sort()  \r\n      list1.sort(key=len)\r\n      return  list1"
    },
    {
        "number": 706,
        "prompt": "Write a function to find whether an array is subset of another array.\ndef is_subset(arr1, m, arr2, n): \n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    if m > n:\n        return False\n    if m == 0:\n        return True\n    i = 0\n    j = 0\n    while i < m:\n        if arr1[i] in arr2:\n            j = arr2.index(arr1[i])\n            i += 1\n        else:\n            return False\n        if j < n - 1 and arr1[i] == arr2[j]:\n            i += 1\n            j += 1\n        else:\n            return False\n    return True\n\n\n# Test the function\narr1 = [1, 2, 3, 4, 5, 6]\narr2 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nprint(is_subset(arr1, arr2, 4))\n# Output: True\n\narr1 = [1, 2, 3, 4, 5, 6, 7]\narr2 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nprint(is_subset(arr1, arr2, 5))\n# Output: False\n",
        "generated_testcode": "assert is_subset([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7], 5) == True\n",
        "test": "assert is_subset([11, 1, 13, 21, 3, 7], 6, [11, 3, 7, 1], 4) == True\nassert is_subset([1, 2, 3, 4, 5, 6], 6, [1, 2, 4], 3) == True\nassert is_subset([10, 5, 2, 23, 19], 5, [19, 5, 3], 3) == False",
        "canonical_solution": "def is_subset(arr1, m, arr2, n): \r\n\thashset = set() \r\n\tfor i in range(0, m): \r\n\t\thashset.add(arr1[i]) \r\n\tfor i in range(0, n): \r\n\t\tif arr2[i] in hashset: \r\n\t\t\tcontinue\r\n\t\telse: \r\n\t\t\treturn False\r\n\treturn True\t\t"
    },
    {
        "number": 707,
        "prompt": "Write a python function to count the total set bits from 1 to n.\ndef count_Set_Bits(n) :  \n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    count = 0\n    for i in range(1, n+1) : \n        count += bin(i).count('1')\n    return count\n\n#Test the function \nn = 10\nprint(\"Total set bits from 1 to\", n, \"are\", count_Set_Bits(n)) ",
        "generated_testcode": "assert count_Set_Bits(10) == 4\n",
        "test": "assert count_Set_Bits(16) == 33\nassert count_Set_Bits(2) == 2\nassert count_Set_Bits(14) == 28",
        "canonical_solution": "def count_Set_Bits(n) :  \r\n    n += 1; \r\n    powerOf2 = 2;   \r\n    cnt = n // 2;  \r\n    while (powerOf2 <= n) : \r\n        totalPairs = n // powerOf2;  \r\n        cnt += (totalPairs // 2) * powerOf2;  \r\n        if (totalPairs & 1) : \r\n            cnt += (n % powerOf2) \r\n        else : \r\n            cnt += 0\r\n        powerOf2 <<= 1;    \r\n    return cnt;  "
    },
    {
        "number": 708,
        "prompt": "Write a python function to convert a string to a list.\ndef Convert(string): \n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "  # initialize an empty list \n   result = [] \n   # traverse through each character of input string \n   for char in string: \n       result.append(char) \n   return result \n\n# Driver Code \nstring = \"GeeksforGeeks\"\nprint(Convert(string)) ",
        "generated_testcode": "assert Convert(\"hello\") == ['h', 'e', 'l', 'l', 'o']\n",
        "test": "assert Convert('python program') == ['python','program']\nassert Convert('Data Analysis') ==['Data','Analysis']\nassert Convert('Hadoop Training') == ['Hadoop','Training']",
        "canonical_solution": "def Convert(string): \r\n    li = list(string.split(\" \")) \r\n    return li "
    },
    {
        "number": 709,
        "prompt": "Write a function to count unique keys for each value present in the tuple.\ndef get_unique(test_list):\n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    d = {}\n    for i in test_list:\n        key, value = i\n        if value in d:\n            d[value].add(key)\n        else:\n            d[value] = {key}\n    return d\n\n# Test the function\ntest_list = [('a', 'apple'), ('b', 'banana'), ('c', 'apple'), ('d', 'orange'), ('e', 'banana'), ('f', 'apple'), ('g', 'grape'), ('h', 'orange')]\nprint(get_unique(test_list)) # should return {'apple': {'a', 'f'}, 'banana': {'b', 'e'}, 'orange': {'d', 'h'}, 'grape': {'g'}}\n\ntest_list2 = [('a', 1), ('b', 2), ('c', 1), ('d', 2), ('e', 3), ('f', 1), ('g', 3)]\nprint(get_unique(test_list2)) # should return {1: {'a', 'f'}, 2: {'b', 'd'}, 3: {'e', 'g'}} ",
        "generated_testcode": "assert get_unique(()) == {}\n",
        "test": "assert get_unique([(3, 4), (1, 2), (2, 4), (8, 2), (7, 2), (8, 1), (9, 1), (8, 4), (10, 4)] ) == '{4: 4, 2: 3, 1: 2}'\nassert get_unique([(4, 5), (2, 3), (3, 5), (9, 3), (8, 3), (9, 2), (10, 2), (9, 5), (11, 5)] ) == '{5: 4, 3: 3, 2: 2}'\nassert get_unique([(6, 5), (3, 4), (2, 6), (11, 1), (8, 22), (8, 11), (4, 3), (14, 3), (11, 6)] ) == '{5: 1, 4: 1, 6: 2, 1: 1, 22: 1, 11: 1, 3: 2}'",
        "canonical_solution": "from collections import defaultdict \r\ndef get_unique(test_list):\r\n  res = defaultdict(list)\r\n  for sub in test_list:\r\n    res[sub[1]].append(sub[0])\r\n  res = dict(res)\r\n  res_dict = dict()\r\n  for key in res:\r\n    res_dict[key] = len(list(set(res[key])))\r\n  return (str(res_dict)) "
    },
    {
        "number": 710,
        "prompt": "Write a function to access the initial and last data of the given tuple record.\ndef front_and_rear(test_tup):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    return test_tup[0], test_tup[-1]\n\n#Test cases\nprint(front_and_rear(('apple', 'banana', 'orange', 'kiwi', 'mango')) # should print ('apple', 'mango')\nprint(front_and_rear(('hello', 'world', 'python', 'programming')) # should print ('hello', 'programming') ",
        "generated_testcode": "assert front_and_rear((1,2,3,4,5,6,7,8) == (1,8)\n",
        "test": "assert front_and_rear((10, 4, 5, 6, 7)) == (10, 7)\nassert front_and_rear((1, 2, 3, 4, 5)) == (1, 5)\nassert front_and_rear((6, 7, 8, 9, 10)) == (6, 10)",
        "canonical_solution": "def front_and_rear(test_tup):\r\n  res = (test_tup[0], test_tup[-1])\r\n  return (res) "
    },
    {
        "number": 711,
        "prompt": "Write a python function to check whether the product of digits of a number at even and odd places is equal or not.\ndef product_Equal(n): \n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    even_product = 1\n    odd_product = 1\n    num = str(n)\n    for i in range(0,len(num),2):\n        even_product *= int(num[i])\n    for i in range(1,len(num),2):\n        odd_product *= int(num[i])\n    if even_product == odd_product:\n        return True\n    else:\n        return False\n\n# Test the function with some examples\nprint(product_Equal(123456789876)) # True\nprint(product_Equal(123456789)) # True\nprint(product_Equal(1234567)) # False\nprint(product_Equal(987654321)) # False\nprint(product_Equal(12345654321)) # True\n\n",
        "generated_testcode": "assert product_Equal(12345) == True\n",
        "test": "assert product_Equal(2841) == True\nassert product_Equal(1234) == False\nassert product_Equal(1212) == False",
        "canonical_solution": "def product_Equal(n): \r\n    if n < 10: \r\n        return False\r\n    prodOdd = 1; prodEven = 1\r\n    while n > 0: \r\n        digit = n % 10\r\n        prodOdd *= digit \r\n        n = n//10\r\n        if n == 0: \r\n            break; \r\n        digit = n % 10\r\n        prodEven *= digit \r\n        n = n//10\r\n    if prodOdd == prodEven: \r\n        return True\r\n    return False"
    },
    {
        "number": 712,
        "prompt": "Write a function to remove duplicates from a list of lists.\ndef remove_duplicate(list1):\n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    \"\"\"\n    This function takes in a list of lists as input and returns a list without duplicate elements\n    \"\"\"\n    # create an empty set to store unique elements\n    unique_set = set()\n    # loop through each sublist in the input list\n    for sublist in list1:\n        # loop through each element in each sublist and add it to the set\n        for element in sublist:\n            unique_set.add(element)\n    # create an empty list to store unique elements\n    unique_list = []\n    # loop through the set and add each element to the unique list\n    for element in unique_set:\n        unique_list.append(element)\n    # return the unique list\n    return unique_list\n\n# test the function with an example input\ninput_list = [[1,2,3,4,5],[2,3,4,5,6],[3,4,5,7],[4,5,8,9],[5,10,11],[1,2,3,4,5]]\nprint(remove_duplicate(input_list))\n# expected output: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]",
        "generated_testcode": "assert remove_duplicate([[1,2,3],[1,2,3],[4,5,6],[7,8,9],[1,2,3]] ) == [[1,2,3],[4,5,6],[7,8,9]]\n",
        "test": "assert remove_duplicate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]])==[[10, 20], [30, 56, 25], [33], [40]] \nassert remove_duplicate([\"a\", \"b\", \"a\", \"c\", \"c\"] )==[\"a\", \"b\", \"c\"]\nassert remove_duplicate([1, 3, 5, 6, 3, 5, 6, 1] )==[1, 3, 5, 6]",
        "canonical_solution": "import itertools\r\ndef remove_duplicate(list1):\r\n list.sort(list1)\r\n remove_duplicate = list(list1 for list1,_ in itertools.groupby(list1))\r\n return remove_duplicate"
    },
    {
        "number": 713,
        "prompt": "Write a function to check if the given tuple contains all valid values or not.\ndef check_valid(test_tup):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    valid_values = (1, 2, 3, 4, 5)\n    if all(elem in valid_values for elem in test_tup):\n        return True\n    else:\n        return False\n\n# Testing the function\nprint(check_valid((1, 2, 3, 4, 5)) # Should return True\nprint(check_valid((1, 2, 3, 4, 6)) # Should return False\nprint(check_valid((1, 2, 3))    # Should return False\nprint(check_valid((1, 2, 3, 4, 5, 6)) # Should return False\n",
        "generated_testcode": "assert check_valid((1, 2, 3, 4, 5, 6, 7) == True)\n",
        "test": "assert check_valid((True, True, True, True) ) == True\nassert check_valid((True, False, True, True) ) == False\nassert check_valid((True, True, True, True) ) == True",
        "canonical_solution": "def check_valid(test_tup):\r\n  res = not any(map(lambda ele: not ele, test_tup))\r\n  return (res) "
    },
    {
        "number": 714,
        "prompt": "Write a python function to count the number of distinct power of prime factor of given number.\ndef count_Fac(n):  \n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    count = 0\n    i = 2\n    while n > 1:\n        if n % i == 0:\n            count += 1\n            while n % i == 0:\n                n //= i\n        i += 1\n    return count\n\ndef count_distinct_prime_power_factors(n):\n    count = 0\n    for i in range(2, n+1):\n        if is_prime(i):\n            count += count_Fac(n)\n    return count\n\ndef is_prime(n):\n    if n == 1:\n        return False\n    if n == 2 or n == 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i*i <= n:\n        if n % i == 0 or n % (i+2) == 0:\n            return False\n        i += 6\n    return True\n    \n# Test the function\nprint(count_distinct_prime_power_factors(12)) # Output: 3 ",
        "generated_testcode": "assert count_Fac(10) == 2\n",
        "test": "assert count_Fac(24) == 3\nassert count_Fac(12) == 2\nassert count_Fac(4) == 1",
        "canonical_solution": "def count_Fac(n):  \r\n    m = n \r\n    count = 0\r\n    i = 2\r\n    while((i * i) <= m): \r\n        total = 0\r\n        while (n % i == 0): \r\n            n /= i \r\n            total += 1 \r\n        temp = 0\r\n        j = 1\r\n        while((temp + j) <= total): \r\n            temp += j \r\n            count += 1\r\n            j += 1 \r\n        i += 1\r\n    if (n != 1): \r\n        count += 1 \r\n    return count "
    },
    {
        "number": 715,
        "prompt": "Write a function to convert the given string of integers into a tuple.\ndef str_to_tuple(test_str):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    lst = test_str.split()\n    tup = tuple(map(int, lst))\n    return tup\n\n# Test the function\nprint(str_to_tuple(\"1 2 3 4 5 6 7 8 9\"))\n# Output: (1, 2, 3, 4, 5, 6, 7, 8, 9)\nprint(str_to_tuple(\"10 20 30 40 50 60 70 80 90\")\n# Output: (10, 20, 30, 40, 50, 60, 70, 80, 90)\n\n\n# Another way to write the same function\ndef str_to_tuple(test_str):\n    return tuple(map(int, test_str.split()))\n\n# Test the function\nprint(str_to_tuple(\"1 2 3 4 5 6 7 8 9\"))\n# Output: (1, 2, 3, 4, 5, 6, 7, 8, 9)\nprint(str_to_tuple(\"10 20 30 40 50 60 70 80 90\")\n# Output: (10, 20, 30, 40, 50, 60, 70, 80, 90)",
        "generated_testcode": "assert str_to_tuple(\"1,2,3,4,5,6,7,8,9\") == (1,2,3,4,5,6,7,8,9)\n",
        "test": "assert str_to_tuple(\"1, -5, 4, 6, 7\") == (1, -5, 4, 6, 7)\nassert str_to_tuple(\"1, 2, 3, 4, 5\") == (1, 2, 3, 4, 5)\nassert str_to_tuple(\"4, 6, 9, 11, 13, 14\") == (4, 6, 9, 11, 13, 14)",
        "canonical_solution": "def str_to_tuple(test_str):\r\n  res = tuple(map(int, test_str.split(', ')))\r\n  return (res) "
    },
    {
        "number": 716,
        "prompt": "Write a function to find the perimeter of a rombus.\ndef rombus_perimeter(a):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    p = (a * 4)\n    return p\n\n# Test the function with the given test case\nprint(rombus_perimeter(6)) ",
        "generated_testcode": "assert rombus_perimeter(5) == 18\n",
        "test": "assert rombus_perimeter(10)==40\nassert rombus_perimeter(5)==20\nassert rombus_perimeter(4)==16",
        "canonical_solution": "def rombus_perimeter(a):\r\n  perimeter=4*a\r\n  return perimeter"
    },
    {
        "number": 717,
        "prompt": "Write a function to calculate the standard deviation.\ndef sd_calc(data):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    mean = sum(data) / len(data)\n    variance = sum([(x - mean) ** 2 for x in data]) / len(data)\n    return variance ** 0.5\n\n# Test the function\nprint(sd_calc([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))  # Output: 2.91547\nprint(sd_calc([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]))  # Output: 5.83095\nprint(sd_calc([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]))  # Output: 7.707107\n\n# Function to calculate the variance\ndef var_calc(data):\n    mean = sum(data) / len(data)\n    variance = sum([(x - mean) ** 2 for x in data]) / (len(data) - 1)\n    return variance\n\n# Test the function\nprint(var_calc([1, 2, 3, 4, 5, 6",
        "generated_testcode": "assert round(sd_calc([1, 2, 3, 4, 5, 6, 7, 8, 9]), 2) == 2.35\n",
        "test": "assert sd_calc([4, 2, 5, 8, 6])== 2.23606797749979\nassert sd_calc([1,2,3,4,5,6,7])==2.160246899469287\nassert sd_calc([5,9,10,15,6,4])==4.070217029430577",
        "canonical_solution": "import math\r\nimport sys\r\ndef sd_calc(data):\r\n    n = len(data)\r\n    if n <= 1:\r\n        return 0.0\r\n    mean, sd = avg_calc(data), 0.0\r\n    for el in data:\r\n        sd += (float(el) - mean)**2\r\n    sd = math.sqrt(sd / float(n-1))\r\n    return sd\r\ndef avg_calc(ls):\r\n    n, mean = len(ls), 0.0\r\n    if n <= 1:\r\n        return ls[0]\r\n    for el in ls:\r\n        mean = mean + float(el)\r\n    mean = mean / float(n)\r\n    return mean"
    },
    {
        "number": 718,
        "prompt": "Write a function to create a list taking alternate elements from another given list.\ndef alternate_elements(list1):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    result = []\n    for i in range(0, len(list1), 2):\n        result.append(list1[i])\n    return result\n\n# Test the function\nprint(alternate_elements([1,2,3,4,5,6,7,8,9])) # Output: [1, 3, 5, 7]\nprint(alternate_elements([a,b,c,d,e,f,g,h,i,j,k,l,m,n])) # Output: [a, c, e, g, i, k, m]",
        "generated_testcode": "assert alternate_elements([1, 2, 3, 4, 5, 6, 7, 8, 9]) == [1, 5, 3, 7]\n",
        "test": "assert alternate_elements([\"red\", \"black\", \"white\", \"green\", \"orange\"])==['red', 'white', 'orange']\nassert alternate_elements([2, 0, 3, 4, 0, 2, 8, 3, 4, 2])==[2, 3, 0, 8, 4]\nassert alternate_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1,3,5,7,9]",
        "canonical_solution": "def alternate_elements(list1):\r\n    result=[]\r\n    for item in list1[::2]:\r\n        result.append(item)\r\n    return result "
    },
    {
        "number": 719,
        "prompt": "Write a function that matches a string that has an a followed by zero or more b's.\ndef text_match(text):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    return re.search(\"a.*b*\", text)\n\n# Test cases\nprint(text_match(\"abbbb\")) # True\nprint(text_match(\"a\")) # True\nprint(text_match(\"bbbb\")) # False\nprint(text_match(\"aaaaaabbb\")) # True\nprint(text_match(\"ab\")) # True\nprint(text_match(\"abc\")) # False\nprint(text_match(\"\")) # False\n\n# Explanation:\n# We use the regex pattern \"a.*b*\" to match any sequence of characters that start with 'a' and ends with zero or more 'b'. ",
        "generated_testcode": "assert text_match(\"ab\") == True\n",
        "test": "assert text_match(\"ac\")==('Found a match!')\nassert text_match(\"dc\")==('Not matched!')\nassert text_match(\"abba\")==('Found a match!')",
        "canonical_solution": "import re\r\ndef text_match(text):\r\n        patterns = 'ab*?'\r\n        if re.search(patterns,  text):\r\n                return 'Found a match!'\r\n        else:\r\n                return('Not matched!')"
    },
    {
        "number": 720,
        "prompt": "Write a function to add a dictionary to the tuple.\ndef add_dict_to_tuple(test_tup, test_dict):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    new_tuple = test_tup + (test_dict,)\n    return new_tuple\n\n#Test the function with a tuple and a dictionary\nmy_tuple = (1, 2, 3, {'name': 'John', 'age': 25} )\nmy_dict = {'city': 'New York'}\nprint(add_dict_to_tuple(my_tuple, my_dict))\n\n#Output: (1, 2, 3, {'name': 'John', 'age': 25, 'city': 'New York'}\n\n\n#Write a function to remove a key-value pair from a dictionary\ndef remove_key_value(my_dict, key_to_remove):\n    my_dict.pop(key_to_remove)\n    return my_dict\n\n#Test the function with a dictionary\nmy_dict = {'name': 'John', 'age': 25, 'city': 'New York'}\nremove_key_value(my_dict, 'age')\nprint(my_dict)\n#Output: {'name': 'John', 'city': 'New York'} \n\n\n#Write a function to remove the last element of a tuple\ndef remove_last_element(test_tuple):\n    return test_tuple[:-1]\n#Test the function with a tuple\nmy_tuple = (1, 2, 3, 4, 5)\nprint(remove_last_element(my_tuple))\n#Output: (1, 2, 3)\n\n\n#",
        "generated_testcode": "assert add_dict_to_tuple(('hello', {'name': 'John', 'age': 25}) == ('hello', {'name': 'John', 'age': 25})\n",
        "test": "assert add_dict_to_tuple((4, 5, 6), {\"MSAM\" : 1, \"is\" : 2, \"best\" : 3} ) == (4, 5, 6, {'MSAM': 1, 'is': 2, 'best': 3})\nassert add_dict_to_tuple((1, 2, 3), {\"UTS\" : 2, \"is\" : 3, \"Worst\" : 4} ) == (1, 2, 3, {'UTS': 2, 'is': 3, 'Worst': 4})\nassert add_dict_to_tuple((8, 9, 10), {\"POS\" : 3, \"is\" : 4, \"Okay\" : 5} ) == (8, 9, 10, {'POS': 3, 'is': 4, 'Okay': 5})",
        "canonical_solution": "def add_dict_to_tuple(test_tup, test_dict):\r\n  test_tup = list(test_tup)\r\n  test_tup.append(test_dict)\r\n  test_tup = tuple(test_tup)\r\n  return (test_tup) "
    },
    {
        "number": 721,
        "prompt": "Write a function to find a path with the maximum average over all existing paths for the given square matrix of size n*n.\ndef maxAverageOfPath(cost, N): \n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    dp = [[0 for _ in range(N)] for _ in range(N)]\n    dp[0][0] = cost[0][0]\n    for i in range(1, N):\n        dp[0][i] = dp[0][i-1] + cost[0][i]\n    for i in range(1, N):\n        dp[i][0] = dp[i-1][0] + cost[i][0]\n    for i in range(1, N):\n        for j in range(1, N):\n            dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + cost[i][j]\n    return dp[N-1][N-1]\n\n#Example Input:\n#cost = [[1,2,3],\n#       [4,5,6],\n#       [7,8,9]]\n#N = 3\n#Output: 8\n\n#Explanation:\n#The maximum average of a path can be from (0,0) to (2,2) which is (3+6+9)/3 = 8.0\n\n#Time Complexity: O(N^2)\n#Space Complexity: O(N^2)\n\n#Approach:\n#We can use dynamic programming to solve this problem. We can create a 2D array dp where dp[i][j] will store the maximum average of path from (0,0)",
        "generated_testcode": "assert maxAverageOfPath([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3) == 7.0\n",
        "test": "assert maxAverageOfPath([[1, 2, 3], [6, 5, 4], [7, 3, 9]], 3) == 5.2\nassert maxAverageOfPath([[2, 3, 4], [7, 6, 5], [8, 4, 10]], 3) == 6.2\nassert maxAverageOfPath([[3, 4, 5], [8, 7, 6], [9, 5, 11]], 3) == 7.2 ",
        "canonical_solution": "M = 100\r\ndef maxAverageOfPath(cost, N): \r\n\tdp = [[0 for i in range(N + 1)] for j in range(N + 1)] \r\n\tdp[0][0] = cost[0][0] \r\n\tfor i in range(1, N): \r\n\t\tdp[i][0] = dp[i - 1][0] + cost[i][0] \r\n\tfor j in range(1, N): \r\n\t\tdp[0][j] = dp[0][j - 1] + cost[0][j] \r\n\tfor i in range(1, N): \r\n\t\tfor j in range(1, N): \r\n\t\t\tdp[i][j] = max(dp[i - 1][j], \r\n\t\t\t\t\t\tdp[i][j - 1]) + cost[i][j] \r\n\treturn dp[N - 1][N - 1] / (2 * N - 1)"
    },
    {
        "number": 722,
        "prompt": "Write a function to filter the height and width of students which are stored in a dictionary.\ndef filter_data(students,h,w):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    filtered_students = {}\n    for key, value in students.items():\n        if value['height'] == h and value['width'] == w:\n            filtered_students[key] = value\n    return filtered_students\n\n#Example usage:\nstudents = {\n    'Alice': {'height': 160, 'width': 50},\n    'Bob': {'height': 165, 'width': 55},\n    'Charlie': {'height': 170, 'width': 60},\n    'David': {'height': 160, 'width': 50},\n    'Eve': {'height': 175, 'width': 65},\n    'Frank': {'height': 160, 'width': 55}\n}\n\nprint(filter_data(students, 160, 50)) # Output: {'Alice': {'height': 160, 'width': 50}, 'David': {'height': 160, 'width': 50}, 'Frank': {'height': 160, 'width': 50}} ",
        "generated_testcode": "assert filter_data(students, 170, 60) == {'Alice': {'height': 170, 'weight': 55, 'gender': 'F', 'score': 85}, 'Bob': {'height': 160, 'weight': 65, 'gender': 'M', 'score': 90}, 'Charlie': {'height': 180, 'weight': 75, 'gender': 'M', 'score': 80}, 'Dave': {'height': 175, 'weight': 65, 'gender': 'M', 'score': 75}}\n\n# The function should return a dictionary with only the students who have height greater than or equal to 170 and weight greater than or equal to 60.\n\n",
        "test": "assert filter_data({'Cierra Vega': (6.2, 70), 'Alden Cantrell': (5.9, 65), 'Kierra Gentry': (6.0, 68), 'Pierre Cox': (5.8, 66)},6.0,70)=={'Cierra Vega': (6.2, 70)}\nassert filter_data({'Cierra Vega': (6.2, 70), 'Alden Cantrell': (5.9, 65), 'Kierra Gentry': (6.0, 68), 'Pierre Cox': (5.8, 66)},5.9,67)=={'Cierra Vega': (6.2, 70),'Kierra Gentry': (6.0, 68)}\nassert filter_data({'Cierra Vega': (6.2, 70), 'Alden Cantrell': (5.9, 65), 'Kierra Gentry': (6.0, 68), 'Pierre Cox': (5.8, 66)},5.7,64)=={'Cierra Vega': (6.2, 70),'Alden Cantrell': (5.9, 65),'Kierra Gentry': (6.0, 68),'Pierre Cox': (5.8, 66)}",
        "canonical_solution": "def filter_data(students,h,w):\r\n    result = {k: s for k, s in students.items() if s[0] >=h and s[1] >=w}\r\n    return result    "
    },
    {
        "number": 723,
        "prompt": "Write a function to count the same pair in two given lists using map function.\ndef count_same_pair(nums1, nums2):\n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    count = 0\n    map1 = {}\n    for num in nums1:\n        if num in map1:\n            map1[num] += 1\n        else:\n            map1[num] = 1\n    for num in nums2:\n        if num in map1 and map1[num] > 0:\n            count += 1\n            map1[num] -= 1\n    return count\n\n# Test the function\nnums1 = [1, 2, 3, 4, 5, 6, 7, 8, 9]\nnums2 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nprint(count_same_pair(nums1, nums2))\n\n# Output: 5\n\n\nnums1 = [1, 2, 3, 4, 5, 6, 7, 8, 9]\nnums2 = [10, 20, 30, 40, 50, 60, 70, 80]\nprint(count_same_pair(nums1, nums2))\n# Output: 0",
        "generated_testcode": "assert count_same_pair([1, 2, 3, 4, 5], [2, 4, 6, 8]) == 2\n",
        "test": "assert count_same_pair([1, 2, 3, 4, 5, 6, 7, 8],[2, 2, 3, 1, 2, 6, 7, 9])==4\nassert count_same_pair([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8],[2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8])==11\nassert count_same_pair([2, 4, -6, -9, 11, -12, 14, -5, 17],[2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8])==1",
        "canonical_solution": "from operator import eq\r\ndef count_same_pair(nums1, nums2):\r\n    result = sum(map(eq, nums1, nums2))\r\n    return result"
    },
    {
        "number": 724,
        "prompt": "Write a function to calculate the sum of all digits of the base to the specified power.\ndef power_base_sum(base, power):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    def power_digit_sum(base, power):\n        if power == 1:\n            return base\n        elif power % 2 == 0:\n            return sum(power_digit_sum(base, power//2)**2)\n        else:\n            return base + power_digit_sum(base, power-1)\n    return power_digit_sum(base, power)\n\n# Test the function\nprint(power_base_sum(2, 5)) # Output: 32 ",
        "generated_testcode": "assert power_base_sum(2, 3) == 8, \"Test case 1 failed\"\n",
        "test": "assert power_base_sum(2,100)==115\nassert power_base_sum(8,10)==37\nassert power_base_sum(8,15)==62",
        "canonical_solution": "def power_base_sum(base, power):\r\n    return sum([int(i) for i in str(pow(base, power))])"
    },
    {
        "number": 725,
        "prompt": "Write a function to extract values between quotation marks of the given string by using regex.\ndef extract_quotation(text1):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    regex = r'\"(.*?)\"'\n    matches = re.findall(regex, text1)\n    return matches\n\n#Test the function\ntext1 = 'The \"apple\" is a \"fruit\" and \"not\" a \"vegetable\"'\nprint(extract_quotation(text1))\n\ntext2 = 'The \"apple\" is a \"fruit\" and \"not\" a \"vegetable\".'\nprint(extract_quotation(text2))\n\ntext3 = 'The \"apple\" is a \"fruit\" and \"not\" a \"vegetable\". This \"car\" is amazing!'\nprint(extract_quotation(text3))\n\ntext4 = 'The \"apple\" is a \"fruit\" and \"not\" a \"vegetable\". This \"car\" is amazing!'\nprint(extract_quotation(text4))",
        "generated_testcode": "assert extract_quotation(\"Hello, this is a \\\"test\\\" string\") == [\"test\"]\n",
        "test": "assert extract_quotation('Cortex \"A53\" Based \"multi\" tasking \"Processor\"') == ['A53', 'multi', 'Processor']\nassert extract_quotation('Cast your \"favorite\" entertainment \"apps\"') == ['favorite', 'apps']\nassert extract_quotation('Watch content \"4k Ultra HD\" resolution with \"HDR 10\" Support') == ['4k Ultra HD', 'HDR 10']",
        "canonical_solution": "import re\r\ndef extract_quotation(text1):\r\n  return (re.findall(r'\"(.*?)\"', text1))"
    },
    {
        "number": 726,
        "prompt": "Write a function to multiply the adjacent elements of the given tuple.\ndef multiply_elements(test_tup):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    result = 1\n    for i in range(len(test_tup)-1):\n        result *= test_tup[i] * test_tup[i+1]\n    return result\n\n# Test the function with sample input\nprint(multiply_elements((2, 3, 4, 5, 6)) # Output: 60\nprint(multiply_elements((1, 2, 3, 4, 5, 6, 7)) # Output: 5040\nprint(multiply_elements((-2, -3, -4, -5, -6)) # Output: 900\n",
        "generated_testcode": "assert multiply_elements((2, 3, 4, 5, 6, 7) == 24\n",
        "test": "assert multiply_elements((1, 5, 7, 8, 10)) == (5, 35, 56, 80)\nassert multiply_elements((2, 4, 5, 6, 7)) == (8, 20, 30, 42)\nassert multiply_elements((12, 13, 14, 9, 15)) == (156, 182, 126, 135)",
        "canonical_solution": "def multiply_elements(test_tup):\r\n  res = tuple(i * j for i, j in zip(test_tup, test_tup[1:]))\r\n  return (res) "
    },
    {
        "number": 727,
        "prompt": "Write a function to remove all characters except letters and numbers using regex\ndef remove_char(S):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    pattern = r'[^a-zA-Z0-9]'\n    return re.sub(pattern, '', S)\n\n# Test the function\nprint(remove_char(\"Hello123 world\")) # Output: \"Hello123\"\nprint(remove_char(\"Hello, world!\")) # Output: \"Helloworld\"\nprint(remove_char(\"Hello, 123\")) # Output: \"Hello123\"\nprint(remove_char(\"Hello, World!\")) # Output: \"HelloWorld\"\n\n# You can also test the function with other test cases here\n",
        "generated_testcode": "assert remove_char(\"Hello, World! 123\") == \"123\"\n",
        "test": "assert remove_char(\"123abcjw:, .@! eiw\") == '123abcjweiw'\nassert remove_char(\"Hello1234:, ! Howare33u\") == 'Hello1234Howare33u'\nassert remove_char(\"Cool543Triks@:, Make@987Trips\") == 'Cool543TriksMake987Trips' ",
        "canonical_solution": "import re \r\ndef remove_char(S):\r\n  result = re.sub('[\\W_]+', '', S) \r\n  return result"
    },
    {
        "number": 728,
        "prompt": "Write a function to sum elements in two lists.\ndef sum_list(lst1,lst2):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    sum_lst = []\n    for i in range(len(lst1)):\n        sum_lst.append(lst1[i] + lst2[i])\n    return sum_lst\n\n# Test the function\nlst1 = [1,2,3,4,5,6]\nlst2 = [4,5,6,7,8]\nprint(sum_list(lst1,lst2)) # Output: [5, 7, 9, 111, 13]\n\n\n# Write a function to multiply elements in two lists\ndef multiply_list(lst1,lst2):\n    multi_lst = []\n    for i in range(len(lst1)):\n        multi_lst.append(lst1[i] * lst2[i])\n    return multi_lst\n\n# Test the function\nlst1 = [1,2,3,4,5]\nlst2 = [4,5,6,7,8]\nprint(multiply_list(lst1,lst2)) # Output: [4, 10, 12, 16]\n\n\n# Write a function to divide elements in two lists\ndef divide_list(lst1,lst2):\n    div_lst = []\n    for i in range(len(lst1)):\n        div_lst.append(lst1[i]/lst2[i])\n    return div_lst\n# Test the function\nlst1 = [10,15,20,25]\nlst2 = [2,5",
        "generated_testcode": "assert sum_list([1,2,3,4],[5,6,7,8]) == [6,8,110]\n",
        "test": "assert sum_list([10,20,30],[15,25,35])==[25,45,65]\nassert sum_list([1,2,3],[5,6,7])==[6,8,10]\nassert sum_list([15,20,30],[15,45,75])==[30,65,105]",
        "canonical_solution": "def sum_list(lst1,lst2):\r\n  res_list = [lst1[i] + lst2[i] for i in range(len(lst1))] \r\n  return res_list"
    },
    {
        "number": 729,
        "prompt": "Write a function to add two lists using map and lambda function.\ndef add_list(nums1,nums2):\n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    return list(map(lambda x,y:x+y,nums1,nums2))\n\n#Example Usage:\nnums1=[1,2,3,4,5]\nnums2=[1,2,3,4]\nprint(add_list(nums1,nums2)) #[2,4,6,7]\n\nnums1=[10,20,30,40,50]\nnums2=[1,2,3,4,5]\nprint(add_list(nums1,nums2)) #[11,22,33,44,55]\n\nnums1=[1,2,3]\nnums2=[10,20,30,40,50,60]\nprint(add_list(nums1,nums2)) #[11,22,33,None,None]\n\nnums1=[1,2]\nnums2=[10,20,30,40,50,60,70]\nprint(add_list(nums1,nums2)) #[11,22,None,None,None,None,None]\n\n#Constraints:\n#Both lists will have equal length, if one list has more elements than the other, fill the missing elements with None\n#Assume that both lists will be non-empty, have at least one element, and contain integers only\n#If the second list has more elements than the first one, fill",
        "generated_testcode": "assert add_list([1,2,3,4],[5,6,7]) == [6,8,10]\n",
        "test": "assert add_list([1, 2, 3],[4,5,6])==[5, 7, 9]\nassert add_list([1,2],[3,4])==[4,6]\nassert add_list([10,20],[50,70])==[60,90]",
        "canonical_solution": "def add_list(nums1,nums2):\r\n  result = map(lambda x, y: x + y, nums1, nums2)\r\n  return list(result)"
    },
    {
        "number": 730,
        "prompt": "Write a function to remove consecutive duplicates of a given list.\ndef consecutive_duplicates(nums):\n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    new_list = []\n    for i in range(len(nums)):\n        if i == 0:\n            new_list.append(nums[i])\n        elif nums[i] != nums[i-1]:\n            new_list.append(nums[i])\n    return new_list\n\n# Test the function\nnums = [1, 2, 2, 3, 3, 3, 4, 4, 4, 5, 6, 6, 6, 6, 7, 8, 8, 8, 9]\nprint(consecutive_duplicates(nums)) # Output: [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\n# Remove consecutive duplicates from a list of strings\ndef consecutive_duplicates_strings(strings):\n    new_list = []\n    for i in range(len(strings)):\n        if i == 0:\n            new_list.append(strings[i])\n        elif strings[i] != strings[i-1]:\n            new_list.append(strings[i])\n    return new_list\n# Test the function\nstrings = [\"apple\", \"banana\", \"banana\", \"orange\", \"orange\", \"grape\", \"grape\", \"grape\", \"mango\", \"mango\", \"mango\", \"apple\"]\nprint(consecutive_duplicates_strings(strings)) # Output: ['apple',",
        "generated_testcode": "assert consecutive_duplicates([1, 2, 2, 3, 3, 3, 4, 4, 4, 4, 5, 5]) == [1, 2, 3, 4, 5]\n",
        "test": "assert consecutive_duplicates([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4 ])==[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4]\nassert consecutive_duplicates([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10])==[10, 15, 19, 18, 17, 26, 17, 18, 10]\nassert consecutive_duplicates(['a', 'a', 'b', 'c', 'd', 'd'])==['a', 'b', 'c', 'd']",
        "canonical_solution": "from itertools import groupby\r\ndef consecutive_duplicates(nums):\r\n    return [key for key, group in groupby(nums)] "
    },
    {
        "number": 731,
        "prompt": "Write a function to find the lateral surface area of a cone.\ndef lateralsurface_cone(r,h):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    \"\"\"\n    Calculates the lateral surface area of a cone\n    \n    Parameters:\n    r: the radius of the cone\n    h: the height of the cone\n    \n    Returns:\n    the lateral surface area of the cone\n    \"\"\"\n    #Calculate the lateral surface area using the formula (pi * r^2 * h)\n    return math.pi * r**2 * h\n\n#Test the function with different values of r and h\nprint(lateralsurface_cone(3, 5)) # Output: 26.8990756\nprint(lateralsurface_cone(4, 8)) # Output: 78.5398163\n\n\n#Write a function to find the volume of a cone\ndef volume_cone(r,h):\n    \"\"\"\n    Calculates the volume of a cone\n    \n    Parameters:\n    r: the radius of the cone\n    h: the height of the cone\n    \n    Returns:\n    the volume of the cone\n    \"\"\"\n    #Calculate the volume using the formula (1/3 * pi * r^2 * h)\n    return 1/3 * math.pi * r**2 * h\n\n#Test the function with different values of r and h\nprint(volume_cone(3, 5)) # Output: 211.7097196\nprint(volume_cone(4, 8)) # Output: 100.103",
        "generated_testcode": "assert lateralsurface_cone(5,10) == 156.63\nprint(\"Test case 1 passed\")\n\n",
        "test": "assert lateralsurface_cone(5,12)==204.20352248333654\nassert lateralsurface_cone(10,15)==566.3586699569488\nassert lateralsurface_cone(19,17)==1521.8090132193388",
        "canonical_solution": "import math\r\ndef lateralsurface_cone(r,h):\r\n  l = math.sqrt(r * r + h * h)\r\n  LSA = math.pi * r  * l\r\n  return LSA"
    },
    {
        "number": 732,
        "prompt": "Write a function to replace all occurrences of spaces, commas, or dots with a colon.\ndef replace_specialchar(text):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    specialchars = [' ', ', ',', '.']\n    for char in specialchars:\n        if char in text:\n            text = text.replace(char, ':')\n    return text\n\n# Test cases\nprint(replace_specialchar('Hello, world!')) # Output: \"Hello:world!\"\nprint(replace_specialchar('I have 5 apples.')) # Output: \"I have 5 apples:\"\nprint(replace_specialchar('1, 2, 3, 4, 5')) # Output: \"1:2:3:4:5\"\nprint(replace_specialchar('This is a test')) # Output: \"This:is:a:test\"",
        "generated_testcode": "assert replace_specialchar(\"Hello, world!\") == \"Hello:world:\"\n",
        "test": "assert replace_specialchar('Python language, Programming language.')==('Python:language::Programming:language:')\nassert replace_specialchar('a b c,d e f')==('a:b:c:d:e:f')\nassert replace_specialchar('ram reshma,ram rahim')==('ram:reshma:ram:rahim')",
        "canonical_solution": "import re\r\ndef replace_specialchar(text):\r\n return (re.sub(\"[ ,.]\", \":\", text))\r"
    },
    {
        "number": 733,
        "prompt": "Write a function to find the index of the first occurrence of a given number in a sorted array.\ndef find_first_occurrence(A, x):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    \"\"\"\n    Finds the index of the first occurrence of a given number in a sorted array.\n    \"\"\"\n    lo = 0\n    hi = len(A) - 1\n    result = -1\n    while lo <= hi:\n        mid = (lo + hi) // 2\n        if A[mid] == x:\n            result = mid\n            hi = mid - 1\n        elif A[mid] < x:\n            lo = mid + 1\n        else:\n            hi = mid - 1\n    return result\n\n# Test cases\nprint(find_first_occurrence([1, 2, 3, 4, 4, 4, 5, 6, 7, 8, 9], 4))  # Output: 2\nprint(find_first_occurrence([1, 1, 2, 3, 4, 4, 4, 5, 6, 7, 8, 9], 4)  # Output: 2\nprint(find_first_occurrence([1, 2, 3, 4, 4, 5, 6, 7, 8, 9], 10)  # Output: -1\nprint(find_first_occurrence([1], 1)  # Output: 0\nprint(find_first_occurrence([1, 1, 2, 3, 3, 4, 5], 3)  # Output: 2\nprint(find_first_occ",
        "generated_testcode": "assert find_first_occurrence([1, 2, 3, 4, 4, 4, 5, 6, 7, 7, 8, 9], 4) == 2\n",
        "test": "assert find_first_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5) == 1\nassert find_first_occurrence([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5) == 2\nassert find_first_occurrence([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6) == 4",
        "canonical_solution": "def find_first_occurrence(A, x):\r\n    (left, right) = (0, len(A) - 1)\r\n    result = -1\r\n    while left <= right:\r\n        mid = (left + right) // 2\r\n        if x == A[mid]:\r\n            result = mid\r\n            right = mid - 1\r\n        elif x < A[mid]:\r\n            right = mid - 1\r\n        else:\r\n            left = mid + 1\r\n    return result"
    },
    {
        "number": 734,
        "prompt": "Write a python function to find sum of products of all possible subarrays.\ndef sum_Of_Subarray_Prod(arr,n):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    def helper(arr,n):\n        if n==1:\n            return arr[0]\n        temp=arr[0]\n        prod=1\n        for i in range(1,n):\n            temp*=arr[i]\n        return temp\n    \n    temp=helper(arr,n)\n    return temp\n\n    #finding product of all subarrays\n    def product_of_subarrays(arr,n):\n        def helper(arr,n):\n            if n==1:\n                return 1\n            temp=1\n            for i in range(n):\n                temp*=arr[i]\n            return temp\n        \n        sum=0\n        for i in range(n):\n            for j in range(i+1,n):\n                sum+=helper(arr[i:j+1])\n        return sum\n    \n    return sum_Of_Subarray_Prod(arr,n)*product_of_subarrays(arr,n)\n\n#example:\narr=[2,3,4,5,6]\nn=len(arr)\nprint(sum_Of_Subarray_Prod(arr,n))\n#Output:1650",
        "generated_testcode": "assert sum_Of_Subarray_Prod([1,2,3,4],3) == 240\n",
        "test": "assert sum_Of_Subarray_Prod([1,2,3],3) == 20\nassert sum_Of_Subarray_Prod([1,2],2) == 5\nassert sum_Of_Subarray_Prod([1,2,3,4],4) == 84",
        "canonical_solution": "def sum_Of_Subarray_Prod(arr,n):\r\n    ans = 0\r\n    res = 0\r\n    i = n - 1\r\n    while (i >= 0):\r\n        incr = arr[i]*(1 + res)\r\n        ans += incr\r\n        res = incr\r\n        i -= 1\r\n    return (ans)"
    },
    {
        "number": 735,
        "prompt": "Write a python function to toggle bits of the number except the first and the last bit.\ndef set_middle_bits(n):  \n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    return n ^ (n << 2) ^ (n >> 1) ^ (n >> 3)  \n\n#test the function\nprint(set_middle_bits(10)) # expected output: 5\nprint(set_middle_bits(25)) # expected output: 10\nprint(set_middle_bits(45)) # expected output: 31\nprint(set_middle_bits(7)) # expected output: 1\nprint(set_middle_bits(100)) # expected output: 32 ",
        "generated_testcode": "assert set_middle_bits(10) == 10\n",
        "test": "assert toggle_middle_bits(9) == 15\nassert toggle_middle_bits(10) == 12\nassert toggle_middle_bits(11) == 13",
        "canonical_solution": "def set_middle_bits(n):  \r\n    n |= n >> 1; \r\n    n |= n >> 2; \r\n    n |= n >> 4; \r\n    n |= n >> 8; \r\n    n |= n >> 16;  \r\n    return (n >> 1) ^ 1\r\ndef toggle_middle_bits(n): \r\n    if (n == 1): \r\n        return 1\r\n    return n ^ set_middle_bits(n) "
    },
    {
        "number": 736,
        "prompt": "Write a function to locate the left insertion point for a specified value in sorted order.\ndef left_insertion(a, x):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    low, high = 0, len(a) - 1\n    while low <= high:\n        mid = (low + high) // 2\n        if x <= a[mid]:\n            high = mid - 1\n        else:\n            low = mid + 1\n    return low\n\n\na = [1, 3, 4, 7, 9, 12, 15, 18, 21, 25, 32, 43, 51, 60]\nx = 10\nprint(left_insertion(a, x))  # Output: 4\n\na = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18]\nx = 11\nprint(left_insertion(a, x))  # Output: 7\n\na = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33]\nx = 20\nprint(left_insertion(a, x))  # Output: 9\n\na = [1, 2, 3, 4, 5, 6",
        "generated_testcode": "assert left_insertion([1, 2, 3, 4, 5, 6, 7, 8, 9], 4) == 2\n",
        "test": "assert left_insertion([1,2,4,5],6)==4\nassert left_insertion([1,2,4,5],3)==2\nassert left_insertion([1,2,4,5],7)==4",
        "canonical_solution": "import bisect\r\ndef left_insertion(a, x):\r\n    i = bisect.bisect_left(a, x)\r\n    return i"
    },
    {
        "number": 737,
        "prompt": "Write a function to check whether the given string is starting with a vowel or not using regex.\ndef check_str(string): \n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    vowels = \"aeiouAEIOU\"\n    if string[0] in vowels:\n        return True\n    else:\n        return False\n\n# Test cases\nprint(check_str(\"apple\")) # True\nprint(check_str(\"banana\")) # False\nprint(check_str(\"orange\")) # True\nprint(check_str(\"Banana\")) # False\nprint(check_str(\"hello\")) # False\nprint(check_str(\"world\")) # False\nprint(check_str(\"Elephant\")) # True\nprint(check_str(\"Zebra\")) # True\n\n\n# One-liner version\ndef check_str(string): \n    return bool(re.match('[aeiouAEIOU]', string))\n\n# Test cases\nprint(check_str(\"apple\")) # True\nprint(check_str(\"banana\")) # False\nprint(check_str(\"orange\")) # False\nprint(check_str(\"Banana\")) # False\nprint(check_str(\"hello\")) # False\nprint(check_str(\"world\")) # False\nprint(check_str(\"Elephant\")) # True\nprint(check_str(\"Zebra\")) # True",
        "generated_testcode": "assert check_str(\"apple\") == True\n",
        "test": "assert check_str(\"annie\") == 'Valid'\nassert check_str(\"dawood\") == 'Invalid'\nassert check_str(\"Else\") == 'Valid'",
        "canonical_solution": "import re \r\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\r\ndef check_str(string): \r\n\tif(re.search(regex, string)): \r\n\t\treturn (\"Valid\") \r\n\telse: \r\n\t\treturn (\"Invalid\") "
    },
    {
        "number": 738,
        "prompt": "Write a function to calculate the geometric sum of n-1.\ndef geometric_sum(n):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    return (1 - 1 / (1 - 1 / n) ** n)\n\n# Test the function with some inputs\nprint(geometric_sum(3)) # 1.8333333333333333333333333\nprint(geometric_sum(4)) # 2.5\nprint(geometric_sum(5)) # 2.8\nprint(geometric_sum(6)) # 3.258\n\n# Add a function to calculate the harmonic sum\ndef harmonic_sum(n):\n    total = 0\n    for i in range(1, n+1):\n        total += 1 / i\n    return total\n\n# Test the function with some inputs\nprint(harmonic_sum(3)) # 2.0\nprint(harmonic_sum(4)) # 3.25\nprint(harmonic_sum(5)) # 4.0833333333333333333333\n\n# Combine the two functions to calculate the harmonic geometric sum\ndef harmonic_geometric_sum(n):\n    return geometric_sum(n) / n\n\n# Test the combined function with some inputs\nprint(harmonic_geometric_sum(3)) # 1.5\nprint(harmonic_geometric_sum(4)) # 2.0\nprint(harmonic_geometric_sum(5)) # 2.2833333",
        "generated_testcode": "assert geometric_sum(5) == 1.81664631208025325742\nprint(\"Test case passed\")\n\n",
        "test": "assert geometric_sum(7) == 1.9921875\nassert geometric_sum(4) == 1.9375\nassert geometric_sum(8) == 1.99609375",
        "canonical_solution": "def geometric_sum(n):\r\n  if n < 0:\r\n    return 0\r\n  else:\r\n    return 1 / (pow(2, n)) + geometric_sum(n - 1)"
    },
    {
        "number": 739,
        "prompt": "Write a python function to find the index of smallest triangular number with n digits.\ndef find_Index(n): \n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    count = 0\n    index = 0\n    i = 1\n    while(count != n):\n        i += 1\n        count = len(str(i*(i+1)//2))\n        if count == n:\n            return index\n        else:\n            index += 1\n    return -1\n\n# Test the function with n=4\nprint(find_Index(4)) # Output: 27\n# Test the function with n=6\nprint(find_Index(6)) # Output: 1024\n# Test the function with n=10\nprint(find_Index(10)) # Output: 75\n# Test the function with n=14\nprint(find_Index(14)) # Output: 793 ",
        "generated_testcode": "assert find_Index(1) == 1\n",
        "test": "assert find_Index(2) == 4\nassert find_Index(3) == 14\nassert find_Index(4) == 45",
        "canonical_solution": "import math \r\ndef find_Index(n): \r\n    x = math.sqrt(2 * math.pow(10,(n - 1))); \r\n    return round(x); "
    },
    {
        "number": 740,
        "prompt": "Write a function to convert the given tuple to a key-value dictionary using adjacent elements.\ndef tuple_to_dict(test_tup):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    result = {}\n    for i in range(0, len(test_tup), 2):\n        result[test_tup[i]] = test_tup[i+1]\n    return result\n\n# Test the function\nprint(tuple_to_dict(('apple', 1, 'banana', 2, 'orange', 3, 'grape', 4)) # Output: {'apple': 1, 'banana': 2, 'orange': 3, 'grape': 4}\nprint(tuple_to_dict(('a', 1, 'b', 2, 'c', 3, 'd', 4)) # Output: {'a': 1, 'b': 2, 'c': 3, 'd': 4}\nprint(tuple_to_dict('hello', 'world')) # Output: {'hello': 'world'}\n\n\n#Alternate solution:\ndef tuple_to_dict(test_tup):\n    return dict(zip(test_tup[::2], test_tup[1::2]) if len(test_tup) % 2 == 0 else dict(zip(test_tup[::2]))\n\n# Test the function\nprint(tuple_to_dict(('apple', 1, 'banana', 2, 'orange', 3, 'grape', 4)) # Output: {'apple': 1, 'banana': 2, 'orange': 3, 'grape': 4}\nprint",
        "generated_testcode": "assert tuple_to_dict((\"apple\", \"banana\", \"cherry\", \"orange\", \"grape\") == {\"apple\": \"banana\", \"cherry\": \"orange\", \"grape\": None}\n",
        "test": "assert tuple_to_dict((1, 5, 7, 10, 13, 5)) == {1: 5, 7: 10, 13: 5}\nassert tuple_to_dict((1, 2, 3, 4, 5, 6)) == {1: 2, 3: 4, 5: 6}\nassert tuple_to_dict((7, 8, 9, 10, 11, 12)) == {7: 8, 9: 10, 11: 12}",
        "canonical_solution": "def tuple_to_dict(test_tup):\r\n  res = dict(test_tup[idx : idx + 2] for idx in range(0, len(test_tup), 2))\r\n  return (res) "
    },
    {
        "number": 741,
        "prompt": "Write a python function to check whether all the characters are same or not.\ndef all_Characters_Same(s) :\n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    if len(s) <= 1:\n        return True\n    else:\n        prev_char = s[0]\n        for i in s[1:]:\n            if i != prev_char:\n                return False\n        return True\n\n\n# Test the function\nprint(all_Characters_Same(\"abcdefg\")) # False\nprint(all_Characters_Same(\"aaabbbbcc\")) # False\nprint(all_Characters_Same(\"aaa\")) # True\nprint(all_Characters_Same(\"aaaa\")) # True\nprint(all_Characters_Same(\"aaaaa\")) # True\nprint(all_Characters_Same(\"\")) # True\nprint(all_Characters_Same(\"a\")) # True\n\n\n# Time Complexity: O(n)\n# Space Complexity: O(1)\n# where n is the length of the string s",
        "generated_testcode": "assert all_Characters_Same(\"hello\") == False\n",
        "test": "assert all_Characters_Same(\"python\") == False\nassert all_Characters_Same(\"aaa\") == True\nassert all_Characters_Same(\"data\") == False",
        "canonical_solution": "def all_Characters_Same(s) :\r\n    n = len(s)\r\n    for i in range(1,n) :\r\n        if s[i] != s[0] :\r\n            return False\r\n    return True"
    },
    {
        "number": 742,
        "prompt": "Write a function to caluclate the area of a tetrahedron.\ndef area_tetrahedron(side):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    return (side ** 2) * (sqrt(3) / 12)\n\n# Test the function with sample inputs\nprint(area_tetrahedron(3))\n\n# Test the function with a different input\nprint(area_tetrahedron(5))\n\n# Test the function with an input that raises an error\n# area_tetrahedron(\"hello world\")",
        "generated_testcode": "assert area_tetrahedron(3) == 10.928571427459633538\nprint(\"Test case passed\")\n\n",
        "test": "assert area_tetrahedron(3)==15.588457268119894\nassert area_tetrahedron(20)==692.8203230275509\nassert area_tetrahedron(10)==173.20508075688772",
        "canonical_solution": "import math\r\ndef area_tetrahedron(side):\r\n  area = math.sqrt(3)*(side*side)\r\n  return area"
    },
    {
        "number": 743,
        "prompt": "Write a function to rotate a given list by specified number of items to the right direction.\ndef rotate_right(list1,m,n):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    if m > n:\n        return list1\n    else:\n        return list1[-m:] + list1[:-m]\n\n# Testing the function\nlist1 = [1,2,3,4,5,6,7,8,9]\nm = 2\nn = 3\nprint(rotate_right(list1,m,n)) # [7,8,9,1,2,3,4,5]\nlist1 = [1,2,3,4,5,6,7,8,9]\nm = 4\nn = 2\nprint(rotate_right(list1,m,n)) # [5,6,7,8,9,1,2,3]\nlist1 = [1,2,3,4,5,6,7,8,9]\nm = 5\nn = 2\nprint(rotate_right(list1,m,n)) # [4,5,6,7,8,9,1,2]\nlist1 = [1,2,3,4,5,6,7,8,9]\nm = 6\nn = 2\nprint(rotate_right(list1,m,n)) # [3,4,5,6,7,8,9,1]\nlist1 = [1,2,3,4,5,6,7,8,9]\nm = 7\nn = 2\nprint(rotate_right(list1,m,n)) # [2,3,",
        "generated_testcode": "assert rotate_right([1,2,3,4,5,6,7,8,9], 2, 3) == [7,8,9,1,2,3,4,5]\n",
        "test": "assert rotate_right([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],3,4)==[8, 9, 10, 1, 2, 3, 4, 5, 6]\nassert rotate_right([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],2,2)==[9, 10, 1, 2, 3, 4, 5, 6, 7, 8]\nassert rotate_right([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],5,2)==[6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8]",
        "canonical_solution": "def rotate_right(list1,m,n):\r\n  result =  list1[-(m):]+list1[:-(n)]\r\n  return result"
    },
    {
        "number": 744,
        "prompt": "Write a function to check if the given tuple has any none value or not.\ndef check_none(test_tup):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    for i in test_tup:\n        if i is None:\n            return True\n    return False\n\n#Testing the function\nprint(check_none((1,2,3,4,5,6,7,8,9,10)) #False\nprint(check_none((1,2,None,4,5,6,7,8,9,10)) #True\nprint(check_none((1,2,3,4,5,6,7,8,9,None)) #True\nprint(check_none((1,2,3,4,5,6,7,8,9)) #False\n\n\n#Better Solution\ndef check_none(test_tup):\n    return any(x is None for x in test_tup)\n#Testing the function\nprint(check_none((1,2,3,4,5,6,7,8,9,10)) #False\nprint(check_none((1,2,None,4,5,6,7,8,9,10)) #True\nprint(check_none((1,2,3,4,5,6,7,8,9,None)) #True\nprint(check_none((1,2,3,4,5,6,7,8,9) #False",
        "generated_testcode": "assert check_none((1,2,3,4,5) == True\n",
        "test": "assert check_none((10, 4, 5, 6, None)) == True\nassert check_none((7, 8, 9, 11, 14)) == False\nassert check_none((1, 2, 3, 4, None)) == True",
        "canonical_solution": "def check_none(test_tup):\r\n  res = any(map(lambda ele: ele is None, test_tup))\r\n  return (res) "
    },
    {
        "number": 745,
        "prompt": "Write a function to find numbers within a given range where every number is divisible by every digit it contains.\ndef divisible_by_digits(startnum, endnum):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    def find_divisors(n):\n        divisors = []\n        for i in range(10):\n            if n % i == 0:\n                divisors.append(i)\n        return divisors\n\n    range_list = []\n    for num in range(startnum, endnum+1):\n        divisors_count = 0\n        for digit in str(num):\n            if num == int(digit):\n                continue\n            if num % int(digit) == 0:\n                divisors_count += 1\n        if divisors_count == len(str(num)):\n            range_list.append(num)\n    return range_list\n\n\nprint(divisible_by_digits(1000, 300))\n\n# Output: [148]\n\nprint(divisible_by_digits(10000, 30000))\n# Output: [14888]\nprint(divisible_by_digits(100000, 50000))\n# Output: [14888, 28888]\nprint(divisible_by_digits(100000, 1000000))\n# Output: [14888, 28888, 34888, 48888, 58888, 68888, 78888",
        "generated_testcode": "assert divisible_by_digits(100, 1000) == [10, 20, 30, 40, 50, 60, 70, 80, 90]\n",
        "test": "assert divisible_by_digits(1,22)==[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]\nassert divisible_by_digits(1,15)==[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]\nassert divisible_by_digits(20,25)==[22, 24]",
        "canonical_solution": "def divisible_by_digits(startnum, endnum):\r\n    return [n for n in range(startnum, endnum+1) \\\r\n                if not any(map(lambda x: int(x) == 0 or n%int(x) != 0, str(n)))]"
    },
    {
        "number": 746,
        "prompt": "Write a function to find area of a sector.\ndef sector_area(r,a):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    area = r*a\n    return area\n\n#Test the function\nprint(sector_area(5,20)) #should be 1000.0\nprint(sector_area(7,12)) #should be 151.36753535713616712435\nprint(sector_area(3,90)) #should be 10.8274967862254048537\nprint(sector_area(8.5,67.5)) #should be 1501.2689507550886099856\n\n\n#Write a function to find the area of a circle\ndef circle_area(r):\n    pi = 3.14159\n    area = pi * r**2\n    return area\n\n#Test the function\nprint(circle_area(5)) #should be 78.5398163339744483\nprint(circle_area(7.5)) #should be 384.13774855633042362\nprint(circle_area(10)) #should be 314.15926535897933\n\n\n#Write a function to find the circumference of a circle\ndef circle_circumference(r):\n    pi = 3.1",
        "generated_testcode": "assert sector_area(5, 30) == 78.5398, \"Incorrect output\"\n",
        "test": "assert sector_area(4,45)==6.285714285714286\nassert sector_area(9,45)==31.82142857142857\nassert sector_area(9,360)==None",
        "canonical_solution": "def sector_area(r,a):\r\n    pi=22/7\r\n    if a >= 360:\r\n        return None\r\n    sectorarea = (pi*r**2) * (a/360)\r\n    return sectorarea"
    },
    {
        "number": 747,
        "prompt": "Write a function to find the longest common subsequence for the given three string sequence.\ndef lcs_of_three(X, Y, Z, m, n, o): \n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    l = [[[0 for k in range(o + 1)] for j in range(n + 1)] for i in range(m + 1)] \n    \n    for i in range(m + 1): \n        for j in range(n + 1): \n            for k in range(o + 1): \n                if i == 0 or j == 0 or k == 0: \n                    l[i][j][k] = 0\n                elif X[i - 1] == Y[j - 1] == Z[k - 1]: \n                    l[i][j][k] = l[i - 1][j - 1][k - 1] + 1\n                else: \n                    l[i][j][k] = max(l[i - 1][j][k], l[i][j - 1][k], l[i][j][k - 1]) \n    \n    return l[m][n][o] \n\n\n# Driver program to test the above function \nX = \"AGGTAB\"\nY = \"GGXTXAYB\"\nZ = \"AGXAYB\"\nm = len(X) \nn = len(Y) \no = len(Z) \nprint(\"Length of LCS is \", lcs_of_three(X, Y, Z, m, n)) ",
        "generated_testcode": "assert lcs_of_three(\"ABCDGH\", \"AEDFHR\", \"AECDFHR\", 4, 3, 4) == \"ADH\"\n",
        "test": "assert lcs_of_three('AGGT12', '12TXAYB', '12XBA', 6, 7, 5) == 2\nassert lcs_of_three('Reels', 'Reelsfor', 'ReelsforReels', 5, 8, 13) == 5 \nassert lcs_of_three('abcd1e2', 'bc12ea', 'bd1ea', 7, 6, 5) == 3",
        "canonical_solution": "def lcs_of_three(X, Y, Z, m, n, o): \r\n\tL = [[[0 for i in range(o+1)] for j in range(n+1)] \r\n\t\tfor k in range(m+1)] \r\n\tfor i in range(m+1): \r\n\t\tfor j in range(n+1): \r\n\t\t\tfor k in range(o+1): \r\n\t\t\t\tif (i == 0 or j == 0 or k == 0): \r\n\t\t\t\t\tL[i][j][k] = 0\r\n\t\t\t\telif (X[i-1] == Y[j-1] and\r\n\t\t\t\t\tX[i-1] == Z[k-1]): \r\n\t\t\t\t\tL[i][j][k] = L[i-1][j-1][k-1] + 1\r\n\t\t\t\telse: \r\n\t\t\t\t\tL[i][j][k] = max(max(L[i-1][j][k], \r\n\t\t\t\t\tL[i][j-1][k]), \r\n\t\t\t\t\t\t\t\t\tL[i][j][k-1]) \r\n\treturn L[m][n][o]"
    },
    {
        "number": 748,
        "prompt": "Write a function to put spaces between words starting with capital letters in a given string by using regex.\ndef capital_words_spaces(str1):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    import re\n    result = re.sub(r'([A-Z][a-z]+)', r'\\1 ', str1)\n    return result\n\n# Test cases\nprint(capital_words_spaces(\"PythonisAwesomeLanguage\")) # Output: Python is Awesome Language\nprint(capital_words_spaces(\"JavaIsAProgrammingLanguage\")) # Output: Java Is A Programming Language\nprint(capital_words_spaces(\"ThisIsAProgrammingLanguage\")) # Output: This Is A Programming Language\nprint(capital_words_spaces(\"HTMLandCSSAreCodingLanguages\")) # Output: HTML and CSS Are Coding Languages\nprint(capital_words_spaces(\"JavaScriptisApopularLanguage\")) # Output: JavaScript is A popular Language\nprint(capital_words_spaces(\"KotlinisAHotNewLanguage\")) # Output: Kotlin is A Hot New Language ",
        "generated_testcode": "assert capital_words_spaces(\"ThisIsAString\") == \"This Is A String\"\n",
        "test": "assert capital_words_spaces(\"Python\") == 'Python'\nassert capital_words_spaces(\"PythonProgrammingExamples\") == 'Python Programming Examples'\nassert capital_words_spaces(\"GetReadyToBeCodingFreak\") == 'Get Ready To Be Coding Freak'",
        "canonical_solution": "import re\r\ndef capital_words_spaces(str1):\r\n  return re.sub(r\"(\\w)([A-Z])\", r\"\\1 \\2\", str1)"
    },
    {
        "number": 749,
        "prompt": "Write a function to sort a given list of strings of numbers numerically.\ndef sort_numeric_strings(nums_str):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    return sorted(nums_str, key=float)\n\n# Test cases\nprint(sort_numeric_strings([\"1.0\", \"2.5\", \"3\", \"100\", \"2\", \"0.5\", \"5\", \"1\"])) # Output: ['0.5', '1', '1.0', '2', '2.5', '3', '5', '10']\nprint(sort_numeric_strings([\"-1\", \"0\", \"0.5\", \"1\", \"-2\", \"3.5\", \"2\", \"1.5\"])) # Output: ['-2', '-1', '0', '0.5', '1', '1.5', '2', '3.5']\nprint(sort_numeric_strings([\"1\", \"10\", \"2\", \"2.5\", \"3\", \"3.5\", \"4\"])) # Output: ['1', '2', '3', '4', '10', '2.5', '3.5']\nprint(sort_numeric_strings([\"5\", \"0\", \"2\", \"3.5\", \"1\", \"4\", \"2.5\"])) # Output: ['0', '1', '2', '2.5', '3.5', '4', '5']\nprint(sort_numeric_strings([\"-1\", \"2.5\", \"0\", \"3\", \"1\", \"4\", \"-3.5\", \"2\"])) # Output: ['-3.5', '-1', '0",
        "generated_testcode": "assert sort_numeric_strings([\"10\", \"2\", \"3\", \"1\", \"5\", \"4\", \"6\", \"7\", \"8\", \"100\", \"20\", \"25\", \"1000\"] == [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"10\", \"100\", \"20\", \"25\", \"1000\"]\n",
        "test": "assert sort_numeric_strings( ['4','12','45','7','0','100','200','-12','-500'])==[-500, -12, 0, 4, 7, 12, 45, 100, 200]\nassert sort_numeric_strings(['2','3','8','4','7','9','8','2','6','5','1','6','1','2','3','4','6','9','1','2'])==[1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9]\nassert sort_numeric_strings(['1','3','5','7','1', '3','13', '15', '17','5', '7 ','9','1', '11'])==[1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17]",
        "canonical_solution": "def sort_numeric_strings(nums_str):\r\n    result = [int(x) for x in nums_str]\r\n    result.sort()\r\n    return result"
    },
    {
        "number": 750,
        "prompt": "Write a function to add the given tuple to the given list.\ndef add_tuple(test_list, test_tup):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    test_list.append(test_tup)\n    return test_list\n\n# Test the function with some sample inputs\ntest_list = [(1, 2, 3), (4, 5, 6), (7, 8, 9)]\ntest_tup = (10, 11, 12)\nprint(add_tuple(test_list, test_tup))\n\n\n# Output: [(1, 2, 3), (4, 5, 6), (7, 8, 9), (10, 11, 12)]\n\n\ntest_list = [(1, 2), (3, 4)]\ntest_tup = (5, 6, 7, 8)\nprint(add_tuple(test_list, test_tup))\n\n# Output: [(1, 2), (3, 4), (5, 6, 7, 8)]\n\n\n# Explanation:\n# We have defined a function add_tuple that takes two parameters, test_list and test_tup, where test_list is a list of tuples and test_tup is a tuple. \n# In the first example, we have added the tuple (10, 11, 12) to the test_list and returned the updated test_list. \n# In the second example, we have added the tuple (5, 6, 7, 8) to the test_list which has two tuples (1, 2",
        "generated_testcode": "assert add_tuple([\"apple\", \"banana\", \"cherry\"], (\"orange\", \"grape\", \"kiwi\")) == [\"apple\", \"banana\", \"cherry\", \"orange\", \"grape\", \"kiwi\"]\n",
        "test": "assert add_tuple([5, 6, 7], (9, 10)) == [5, 6, 7, 9, 10]\nassert add_tuple([6, 7, 8], (10, 11)) == [6, 7, 8, 10, 11]\nassert add_tuple([7, 8, 9], (11, 12)) == [7, 8, 9, 11, 12]",
        "canonical_solution": "def add_tuple(test_list, test_tup):\r\n  test_list += test_tup\r\n  return (test_list) "
    },
    {
        "number": 751,
        "prompt": "Write a function to check if the given array represents min heap or not.\ndef check_min_heap(arr, i):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    if i == 0:\n        return True\n    l = 2 * i + 1\n    r = 2 * i + 2\n    if l < len(arr) and arr[l] < arr[i]:\n        return False\n    if r < len(arr) and arr[r] < arr[i]:\n        return False\n    return check_min_heap(arr, l) and check_min_heap(arr, r)\n\n\n\ndef is_min_heap(arr):\n    return check_min_heap(arr, 0)\n\n\n# Test cases\nprint(is_min_heap([3, 5, 2, 1, 10, 11, 9, 8, 7, 6, 9, 15, 12]))  # True\nprint(is_min_heap([3, 5, 2, 4, 1, 10, 9, 8, 7, 6, 9, 15, 12]))  # False\nprint(is_min_heap([3, 5, 2, 1, 10, 11, 9, 8, 7, 6, 9, 15]))  # False\nprint(is_min_heap([3, 5, 2, 1, 10, 11, 8, 7, 6, 9, 15, 12])) ",
        "generated_testcode": "assert check_min_heap([3, 2, 1, 4, 5, 1, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20] , 0) == True\n",
        "test": "assert check_min_heap([1, 2, 3, 4, 5, 6], 0) == True\nassert check_min_heap([2, 3, 4, 5, 10, 15], 0) == True\nassert check_min_heap([2, 10, 4, 5, 3, 15], 0) == False",
        "canonical_solution": "def check_min_heap(arr, i):\r\n    if 2 * i + 2 > len(arr):\r\n        return True\r\n    left_child = (arr[i] <= arr[2 * i + 1]) and check_min_heap(arr, 2 * i + 1)\r\n    right_child = (2 * i + 2 == len(arr)) or (arr[i] <= arr[2 * i + 2] \r\n                                      and check_min_heap(arr, 2 * i + 2))\r\n    return left_child and right_child"
    },
    {
        "number": 752,
        "prompt": "Write a function to find the nth jacobsthal number.\ndef jacobsthal_num(n): \n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    if n == 0: \n        return 0\n    elif n == 1: \n        return 1\n    else: \n        return 2 * jacobsthal_num(n-1) + jacobsthal_num(n-2)**2\n\n\nprint(jacobsthal_num(4)) # Output : 4 ",
        "generated_testcode": "assert jacobsthal_num(0) == 0\n",
        "test": "assert jacobsthal_num(5) == 11\nassert jacobsthal_num(2) == 1\nassert jacobsthal_num(4) == 5",
        "canonical_solution": "def jacobsthal_num(n): \r\n\tdp = [0] * (n + 1) \r\n\tdp[0] = 0\r\n\tdp[1] = 1\r\n\tfor i in range(2, n+1): \r\n\t\tdp[i] = dp[i - 1] + 2 * dp[i - 2] \r\n\treturn dp[n]"
    },
    {
        "number": 753,
        "prompt": "Write a function to find minimum k records from tuple list.\ndef min_k(test_list, K):\n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    test_list.sort(key=lambda x: x[1])\n    return test_list[:K]\n\n# test the function\ntest_list = [(1, 2), (2, 3), (3, 1), (4, 5), (5, 4), (6, 6), (7, 8), (8, 7), (9, 9)]\nprint(min_k(test_list, 3)) # expected output: [(1, 2), (2, 3), (3, 1)]\nprint(min_k(test_list, 5)) # expected output: [(1, 2), (2, 3), (3, 1), (4, 5), (5, 4), (6, 6)]\nprint(min_k(test_list, 4)) # expected output: [(1, 2), (2, 3), (3, 1), (4, 5)]\n\n# OR you can use lambda function\ntest_list.sort(key=lambda x: x[1])\nprint(test_list[:K])\n\n\n# OR use heapq module\nimport heapq\nheap = []\nfor record in test_list:\n    heapq.heappush(heap, record)\n    if len(heap) > K:\n        heapq.heappop(heap)\nprint(heap)",
        "generated_testcode": "assert min_k([(1, 2, 3), (4, 5, 6), (7, 8, 9), (10, 11, 12), (13, 14, 15), (16, 17, 18)], 3) == [(1, 2, 3), (4, 5, 6), (7, 8, 9)]\n",
        "test": "assert min_k([('Manjeet', 10), ('Akshat', 4), ('Akash', 2), ('Nikhil', 8)], 2) == [('Akash', 2), ('Akshat', 4)]\nassert min_k([('Sanjeev', 11), ('Angat', 5), ('Akash', 3), ('Nepin', 9)], 3) == [('Akash', 3), ('Angat', 5), ('Nepin', 9)]\nassert min_k([('tanmay', 14), ('Amer', 11), ('Ayesha', 9), ('SKD', 16)], 1) == [('Ayesha', 9)]",
        "canonical_solution": "def min_k(test_list, K):\r\n  res = sorted(test_list, key = lambda x: x[1])[:K]\r\n  return (res) "
    },
    {
        "number": 754,
        "prompt": "Write a function to find common index elements from three lists.\ndef extract_index_list(l1, l2, l3):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    common_index_list = []\n    for i in range(len(l1)):\n        if l1[i] == l2[i] == l3[i]:\n            common_index_list.append(i)\n    return common_index_list\n\n\n# Testing the function\nl1 = [1, 2, 3, 4, 5, 6]\nl2 = [1, 2, 3, 6, 7]\nl3 = [1, 2, 4, 5, 8]\nprint(extract_index_list(l1, l2, l3))  # Output: [0, 1]\n\nl1 = [1, 2, 3, 4, 5]\nl2 = [1, 2, 3, 4, 5]\nl3 = [1, 2, 3, 4, 5]\nprint(extract_index_list(l1, l2, l3))  # Output: [0, 1, 2, 3]\n\nl1 = [1, 2, 3, 4, 5]\nl2 = [1, 2, 3, 4, 5]\nl3 = [1, 2, 3, 4, 5]\nprint(extract_index_list(l1, l2, l3))  # Output: [0, 1, 2, 3]\n\nl1 = [1, 2",
        "generated_testcode": "assert extract_index_list([1, 2, 3, 4, 5], [2, 4, 6, 8], [2, 4, 10]) == [1, 2]\n",
        "test": "assert extract_index_list([1, 1, 3, 4, 5, 6, 7],[0, 1, 2, 3, 4, 5, 7],[0, 1, 2, 3, 4, 5, 7])==[1, 7]\nassert extract_index_list([1, 1, 3, 4, 5, 6, 7],[0, 1, 2, 3, 4, 6, 5],[0, 1, 2, 3, 4, 6, 7])==[1, 6]\nassert extract_index_list([1, 1, 3, 4, 6, 5, 6],[0, 1, 2, 3, 4, 5, 7],[0, 1, 2, 3, 4, 5, 7])==[1, 5]",
        "canonical_solution": "def extract_index_list(l1, l2, l3):\r\n    result = []\r\n    for m, n, o in zip(l1, l2, l3):\r\n        if (m == n == o):\r\n            result.append(m)\r\n    return result"
    },
    {
        "number": 755,
        "prompt": "Write a function to find the second smallest number in a list.\ndef second_smallest(numbers):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    if len(numbers) < 2:\n        return None\n    elif len(numbers) == 2:\n        return numbers[1]\n    else:\n        smallest = float('inf')\n        second_smallest = float('inf')\n        for num in numbers:\n            if num < smallest:\n                second_smallest = smallest\n                smallest = num\n            elif num < second_smallest and num != smallest:\n                second_smallest = num\n    return second_smallest\n\n\n# Test cases\nprint(second_smallest([3, 5, 1, 2, 8, 6, 9, 4])) # 2\nprint(second_smallest([1, 1, 1, 1, 1, 1])) # None\nprint(second_smallest([10, 9, 8, 7, 6, 5, 4, 3])) # 5\nprint(second_smallest([1])) # None\nprint(second_smallest([])) # None\nprint(second_smallest([2, 2, 2, 2])) # None\n",
        "generated_testcode": "assert second_smallest([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 5\n",
        "test": "assert second_smallest([1, 2, -8, -2, 0, -2])==-2\nassert second_smallest([1, 1, -0.5, 0, 2, -2, -2])==-0.5\nassert second_smallest([2,2])==None",
        "canonical_solution": "def second_smallest(numbers):\r\n  if (len(numbers)<2):\r\n    return\r\n  if ((len(numbers)==2)  and (numbers[0] == numbers[1]) ):\r\n    return\r\n  dup_items = set()\r\n  uniq_items = []\r\n  for x in numbers:\r\n    if x not in dup_items:\r\n      uniq_items.append(x)\r\n      dup_items.add(x)\r\n  uniq_items.sort()    \r\n  return  uniq_items[1] "
    },
    {
        "number": 756,
        "prompt": "Write a function that matches a string that has an a followed by zero or one 'b'.\ndef text_match_zero_one(text):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    pattern = r'ab?'\n    return bool(re.search(pattern, text))\n\n# Test the function with different inputs\nprint(text_match_zero_one('ab')) # True\nprint(text_match_zero_one('a')) # True\nprint(text_match_zero_one('b')) # False\nprint(text_match_zero_one('aba')) # True\nprint(text_match_zero_one('abb')) # True\nprint(text_match_zero_one('abc')) # False\n",
        "generated_testcode": "assert text_match_zero_one(\"ab\") == True\n",
        "test": "assert text_match_zero_one(\"ac\")==('Found a match!')\nassert text_match_zero_one(\"dc\")==('Not matched!')\nassert text_match_zero_one(\"abbbba\")==('Found a match!')",
        "canonical_solution": "import re\r\ndef text_match_zero_one(text):\r\n        patterns = 'ab?'\r\n        if re.search(patterns,  text):\r\n                return 'Found a match!'\r\n        else:\r\n                return('Not matched!')"
    },
    {
        "number": 757,
        "prompt": "Write a function to count the pairs of reverse strings in the given string list.\ndef count_reverse_pairs(test_list):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][::-1] == test_list[j]:\n                count += 1\n    return count\n\n\n# Test cases\nprint(count_reverse_pairs([\"cat\", \"dog\", \"car\", \"hut\", \"tin\", \"hat\", \"egg\", \"tac\"]))  # Output: 2\nprint(count_reverse_pairs([\"hello\", \"world\", \"code\", \"race\", \"pots\", \"god\", \"edoc\"])) # Output: 3\nprint(count_reverse_pairs([\"apple\", \"banana\", \"cherry\", \"grape\", \"banana\"])) # Output: 1\nprint(count_reverse_pairs([\"abcd\", \"dcba\", \"dcba\", \"dcba\", \"abcd\"])) # Output: 6\n\n\n# Time complexity: O(n^2)\n# Space complexity: O(1)",
        "generated_testcode": "assert count_reverse_pairs([\"abc\", \"cba\", \"def\", \"fed\", \"ghi\", \"hig\", \"cba\", \"abc\"] == 2\n",
        "test": "assert count_reverse_pairs([\"julia\", \"best\", \"tseb\", \"for\", \"ailuj\"])== '2'\nassert count_reverse_pairs([\"geeks\", \"best\", \"for\", \"skeeg\"]) == '1'\nassert count_reverse_pairs([\"makes\", \"best\", \"sekam\", \"for\", \"rof\"]) == '2' ",
        "canonical_solution": "def count_reverse_pairs(test_list):\r\n  res = sum([1 for idx in range(0, len(test_list)) for idxn in range(idx, len( \r\n\ttest_list)) if test_list[idxn] == str(''.join(list(reversed(test_list[idx]))))]) \r\n  return str(res)"
    },
    {
        "number": 758,
        "prompt": "Write a function to count number of unique lists within a list.\ndef unique_sublists(list1):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    # create a set of unique lists\n    set_of_lists = set()\n    # create a list of sublists\n    sublists = []\n    # iterate through the list\n    for i in range(len(list1)):\n        for j in range(i, len(list1)):\n            # create a sublist\n            sublist = list1[i:j+1]\n            # add the sublist to the list of sublists\n            sublists.append(sublist)\n    # iterate through the list of sublists\n    for sublist in sublists:\n        # create a string representation of the sublist\n        sublist_str = str(sublist)\n        # add the string representation to the set\n        set_of_lists.add(sublist_str)\n    # return the length of the set\n    return len(set_of_lists)\n\n# test the function\nlist1 = [1, 2, 3, 4, 5, 6, 7, 8, 9]\nprint(unique_sublists(list1)) # expected output: 36\n\nlist1 = [1, 2, 3, 4, 5, 5, 6, 7, 8]\nprint(unique_sublists(list1)) # expected output: 35\nlist1 = [1, 1, 2, 2, 2, 3, 3, 3]\nprint(unique_sublists(list1)) # expected output: 12\n",
        "generated_testcode": "assert unique_sublists([[1,2,3,4]) == 1\n",
        "test": "assert unique_sublists([[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]] )=={(1, 3): 2, (5, 7): 2, (13, 15, 17): 1, (9, 11): 1}\nassert unique_sublists([['green', 'orange'], ['black'], ['green', 'orange'], ['white']])=={('green', 'orange'): 2, ('black',): 1, ('white',): 1}\nassert unique_sublists([[10, 20, 30, 40], [60, 70, 50, 50], [90, 100, 200]])=={(10, 20, 30, 40): 1, (60, 70, 50, 50): 1, (90, 100, 200): 1}",
        "canonical_solution": "def unique_sublists(list1):\r\n    result ={}\r\n    for l in  list1: \r\n        result.setdefault(tuple(l), list()).append(1) \r\n    for a, b in result.items(): \r\n        result[a] = sum(b)\r\n    return result"
    },
    {
        "number": 759,
        "prompt": "Write a function to check a decimal with a precision of 2.\ndef is_decimal(num):\n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    # check if number is decimal\n    if isinstance(num, float):\n        return True\n    # check if the number is an integer\n    elif isinstance(num, int):\n        return True\n    # check if number is a float with precision of 2\n    elif isinstance(num, float) and len(str(num).split(\".\")[1]) == 2:\n        return True\n    else:\n        return False\n\n\nprint(is_decimal(3))  # True\nprint(is_decimal(3.14) ) # True\nprint(is_decimal(3.1415) ) # False\nprint(is_decimal(1.0) ) # True\nprint(is_decimal(1.00) ) # True\nprint(is_decimal(1.001) ) # False\nprint(is_decimal(1.23) ) # True\nprint(is_decimal(1.234) ) # False",
        "generated_testcode": "assert is_decimal(3.14) == True\n",
        "test": "assert is_decimal('123.11')==True\nassert is_decimal('e666.86')==False\nassert is_decimal('3.124587')==False",
        "canonical_solution": "def is_decimal(num):\r\n    import re\r\n    dnumre = re.compile(r\"\"\"^[0-9]+(\\.[0-9]{1,2})?$\"\"\")\r\n    result = dnumre.search(num)\r\n    return bool(result)"
    },
    {
        "number": 760,
        "prompt": "Write a python function to check whether an array contains only one distinct element or not.\ndef unique_Element(arr,n):\n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    arr.sort()\n    if arr[0]!=arr[1]:\n        return True\n    else:\n        for i in range(1,n):\n            if arr[i]==arr[i-1]:\n                return False\n    return True\n\n#test the function with an example array\narr=[1,1,2,3,4,5,6,5]\nn=len(arr)\nprint(unique_Element(arr,n)) #output: False\narr=[1,2,3,4,5,6,7]\nn=len(arr)\nprint(unique_Element(arr,n)) #output: True\narr=[1,1,1,1,1,1]\nn=len(arr)\nprint(unique_Element(arr,n)) #output: False",
        "generated_testcode": "assert unique_Element([1,2,3,4,5,6,7,8,9],6) == True\n",
        "test": "assert unique_Element([1,1,1],3) == 'YES'\nassert unique_Element([1,2,1,2],4) == 'NO'\nassert unique_Element([1,2,3,4,5],5) == 'NO'",
        "canonical_solution": "def unique_Element(arr,n):\r\n    s = set(arr)\r\n    if (len(s) == 1):\r\n        return ('YES')\r\n    else:\r\n        return ('NO')"
    },
    {
        "number": 761,
        "prompt": "Write a function to caluclate arc length of an angle.\ndef arc_length(d,a):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    \"\"\"\n    d: diameter of the circle\n    a: angle in degrees\n    \"\"\"\n    import math\n    r = d/2\n    arc_length = r*a*math.pi/180\n    return arc_length\n\n# Test the function\nd = 10\na = 30\nprint(\"Arc length of the angle is:\",arc_length(d,a))\n\n\n# Test the function with another example\nd = 5\na = 90\nprint(\"Arc length of the angle is:\",arc_length(d,a))\n\n\n# Test the function with another example\nd = 12\na = 60\nprint(\"Arc length of the angle is:\",arc_length(d,a))\n\n\n# Test the function with another example\nd = 7\na = 45\nprint(\"Arc length of the angle is:\",arc_length(d,a))\n\n\n# Test the function with another example\nd = 14\na = 270\nprint(\"Arc length of the angle is:\",arc_length(d,a))\n",
        "generated_testcode": "assert round(arc_length(1, 90), 2) == 0.5\n",
        "test": "assert arc_length(9,45)==3.5357142857142856\nassert arc_length(9,480)==None\nassert arc_length(5,270)==11.785714285714285",
        "canonical_solution": "def arc_length(d,a):\r\n    pi=22/7\r\n    if a >= 360:\r\n        return None\r\n    arclength = (pi*d) * (a/360)\r\n    return arclength"
    },
    {
        "number": 762,
        "prompt": "Write a function to check whether the given month number contains 30 days or not.\ndef check_monthnumber_number(monthnum3):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    months = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31, 31, 30, 31]\n    if monthnum3 in months:\n        return True\n    else:\n        return False\n\n# Test cases\nprint(check_monthnumber_number(3))\nprint(check_monthnumber_number(12))\nprint(check_monthnumber_number(4))\n\n\n# Function to check if the given year is a leap year or not\ndef is_leap_year(year):\n    if year % 4 == 0 and year % 1000 != 0:\n        return True\n    elif year % 400 == 0:\n        return True\n    elif year % 4 == 0 and year % 1000 == 0:\n        return True\n    else:\n        return False\n\n# Test cases\nprint(is_leap_year(2020))\nprint(is_leap_year(2021))\nprint(is_leap_year(20000))\n\n\n# Function to find the number of days in the given year and month\ndef days_in_month(year, month):\n    if month in range(1, 13):\n        if month ==",
        "generated_testcode": "assert check_monthnumber_number(2) == True\n",
        "test": "assert check_monthnumber_number(6)==True\nassert check_monthnumber_number(2)==False\nassert check_monthnumber_number(12)==False",
        "canonical_solution": "def check_monthnumber_number(monthnum3):\r\n  if(monthnum3==4 or monthnum3==6 or monthnum3==9 or monthnum3==11):\r\n    return True\r\n  else:\r\n    return False"
    },
    {
        "number": 763,
        "prompt": "Write a python function to find the minimum difference between any two elements in a given array.\ndef find_Min_Diff(arr,n): \n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    arr.sort() \n    min_diff = abs(arr[1] - arr[0]) \n    for i in range(1,n-1): \n        if arr[i+1] - arr[i] < min_diff: \n            min_diff = arr[i+1] - arr[i] \n    return min_diff \n\n#Example: \narr = [1, 6, 10, 4, 11, 3, 15] \nn = len(arr) \nprint(find_Min_Diff(arr, n))\n# Output: 1\n\n\n#Explanation: \n# The minimum difference between any two elements in the given array is between 10 and 4 which is 6-4 = 6. So, the output will be 6. ",
        "generated_testcode": "assert find_Min_Diff([1, 3, 5, 8, 4, 2, 6, 7], 5) == 1\n",
        "test": "assert find_Min_Diff((1,5,3,19,18,25),6) == 1\nassert find_Min_Diff((4,3,2,6),4) == 1\nassert find_Min_Diff((30,5,20,9),4) == 4",
        "canonical_solution": "def find_Min_Diff(arr,n): \r\n    arr = sorted(arr) \r\n    diff = 10**20 \r\n    for i in range(n-1): \r\n        if arr[i+1] - arr[i] < diff: \r\n            diff = arr[i+1] - arr[i]  \r\n    return diff "
    },
    {
        "number": 764,
        "prompt": "Write a python function to count numeric values in a given string.\ndef number_ctr(str):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    count = 0\n    for i in str:\n        if i.isdigit():\n            count += 1\n    return count\n\n# Test the function with example input\nprint(number_ctr('hello123world456'))\n# Output: 5 (as there are 5 numeric characters in the string)\n\n\n# Write a python function to count all the uppercase letters in a given string\ndef upper_ctr(str):\n    count = 0\n    for i in str:\n        if i.isupper():\n            count += 1\n    return count\n\n# Test the function with example input\nprint(upper_ctr('Hello WORLD'))\n# Output: 2 (as there are 2 uppercase letters in the string)\n\n\n# Write a python function to check if a string is a palindrome or not\ndef palindrome(str):\n    if str == str[::-1]:\n        return True\n    else:\n        return False\n\n# Test the function with example input\nprint(palindrome('racecar'))\n# Output: True\nprint(palindrome('hello'))\n# Output: False\n\n# Write a python function to reverse a string\ndef reverse_string(str):\n    return str[::-1]\n\n# Test the function with example input\nprint(reverse_string('hello'))\n# Output: 'olleh'\n\n# Write a python function to replace all vowels in a string with *\ndef replace_vowels(str):\n    vowels = ['",
        "generated_testcode": "assert number_ctr(\"The quick brown fox jumps over 100 lazy dogs\") == 1\n",
        "test": "assert number_ctr('program2bedone') == 1\nassert number_ctr('3wonders') ==1\nassert number_ctr('123') == 3",
        "canonical_solution": "def number_ctr(str):\r\n      number_ctr= 0\r\n      for i in range(len(str)):\r\n          if str[i] >= '0' and str[i] <= '9': number_ctr += 1     \r\n      return  number_ctr"
    },
    {
        "number": 765,
        "prompt": "Write a function to find nth polite number.\ndef is_polite(n): \n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": true,
        "answer": "    def count_polite(n): \n        if n == 1: \n            return 1\n        elif n == 2: \n            return 2\n        else: \n            return 1 + count_polite(n - 1) + count_polite(n - 2) + 1\n    return count_polite(n) \n\ndef nth_polite_number(n): \n    i = 3 \n    count = 1 \n    while True: \n        if is_polite(i) >= n: \n            return i \n        i += 1 \n        count += 1 \n\n# Test cases \nprint(nth_polite_number(3))  # Output: 3 (3 is polite number, 1, 2, 3) ",
        "generated_testcode": "assert is_polite(1) == True\n",
        "test": "assert is_polite(7) == 11\nassert is_polite(4) == 7\nassert is_polite(9) == 13",
        "canonical_solution": "import math \r\ndef is_polite(n): \r\n\tn = n + 1\r\n\treturn (int)(n+(math.log((n + math.log(n, 2)), 2))) "
    },
    {
        "number": 766,
        "prompt": "Write a function to iterate over all pairs of consecutive items in a given list.\ndef pair_wise(l1):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    pairs = []\n    for i in range(len(l1)-1):\n        for j in range(i+1, len(l1)):\n            pairs.append((l1[i], l1[j]))\n    return pairs\n\n\n# Test\nl1 = [1, 2, 3, 4, 5, 6, 7, 8, 9]\nprint(pair_wise(l1))\n# Output: [(1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 7), (7, 8), (8, 9)]\n\nl2 = ['a', 'b', 'c', 'd', 'e', 'f']\nprint(pair_wise(l2))\n# Output: (['a', 'b'], ['b', 'c'], ['c', 'd'], ['d', 'e'], ['e', 'f'])\n\nl3 = [1, 'a', 2, 3, 'b', 4, 'c']\nprint(pair_wise(l3))\n# Output: [(1, 'a'), ('a', 2), (2, 3), (3, 'b'), ('b', 4), (4, 'c')]\n",
        "generated_testcode": "assert pair_wise([1,2,3,4,5]) == [(1,2), (2,3), (3,4), (4,5)]\n",
        "test": "assert pair_wise([1,1,2,3,3,4,4,5])==[(1, 1), (1, 2), (2, 3), (3, 3), (3, 4), (4, 4), (4, 5)]\nassert pair_wise([1,5,7,9,10])==[(1, 5), (5, 7), (7, 9), (9, 10)]\nassert pair_wise([1,2,3,4,5,6,7,8,9,10])==[(1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 7), (7, 8), (8, 9), (9, 10)]",
        "canonical_solution": "def pair_wise(l1):\r\n    temp = []\r\n    for i in range(len(l1) - 1):\r\n        current_element, next_element = l1[i], l1[i + 1]\r\n        x = (current_element, next_element)\r\n        temp.append(x)\r\n    return temp"
    },
    {
        "number": 767,
        "prompt": "Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019.\ndef get_Pairs_Count(arr,n,sum):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    count = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            if arr[i]+arr[j] == sum:\n                count += 1\n    return count\n\n#Example:\narr = [1,2,3,4,5,6,7,8,9]\nsum = 10\nn = len(arr)\nprint(get_Pairs_Count(arr,n,sum)) # Output: 2\n",
        "generated_testcode": "assert get_Pairs_Count([1,2,3,4,5,6,7,8,9],9,18) == 2\n",
        "test": "assert get_Pairs_Count([1,1,1,1],4,2) == 6\nassert get_Pairs_Count([1,5,7,-1,5],5,6) == 3\nassert get_Pairs_Count([1,-2,3],3,1) == 1",
        "canonical_solution": "def get_Pairs_Count(arr,n,sum):\r\n    count = 0  \r\n    for i in range(0,n):\r\n        for j in range(i + 1,n):\r\n            if arr[i] + arr[j] == sum:\r\n                count += 1\r\n    return count"
    },
    {
        "number": 768,
        "prompt": "Write a python function to check for odd parity of a given number.\ndef check_Odd_Parity(x): \n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": true,
        "answer": "    if x%2==0: \n        return False\n    else: \n        return True\n\n# Test the function with some inputs\nprint(check_Odd_Parity(13)) # Output: True \nprint(check_Odd_Parity(14)) # Output: False \nprint(check_Odd_Parity(5)) # Output: True ",
        "generated_testcode": "assert check_Odd_Parity(1) == True\n",
        "test": "assert check_Odd_Parity(13) == True\nassert check_Odd_Parity(21) == True\nassert check_Odd_Parity(18) == False",
        "canonical_solution": "def check_Odd_Parity(x): \r\n    parity = 0\r\n    while (x != 0): \r\n        x = x & (x - 1) \r\n        parity += 1\r\n    if (parity % 2 == 1): \r\n        return True\r\n    else: \r\n        return False"
    },
    {
        "number": 769,
        "prompt": "Write a python function to get the difference between two lists.\ndef Diff(li1,li2):\n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    #Create a set from li2\n    set2 = set(li2)\n    #Find the difference between li1 and set2\n    diff_list = [x for x in li1 if x not in set2]\n    #Return the difference list\n    return diff_list\n\n#Test the function\nli1 = [1,2,3,4,5,6,7,8,9]\nli2 = [4,5,6,7,8,9,10,11]\nprint(Diff(li1,li2))\n",
        "generated_testcode": "assert Diff([1,2,3,4,5],[2,4,6,8]) == [1,3,5]\n",
        "test": "assert (Diff([10, 15, 20, 25, 30, 35, 40], [25, 40, 35])) == [10, 20, 30, 15]\nassert (Diff([1,2,3,4,5], [6,7,1])) == [2,3,4,5,6,7]\nassert (Diff([1,2,3], [6,7,1])) == [2,3,6,7]",
        "canonical_solution": "def Diff(li1,li2):\r\n    return (list(list(set(li1)-set(li2)) + list(set(li2)-set(li1))))\r\n "
    },
    {
        "number": 770,
        "prompt": "Write a python function to find the sum of fourth power of first n odd natural numbers.\ndef odd_Num_Sum(n) : \n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    sum = 0\n    for i in range(1, n+1, 2) : \n        sum += i**4\n    return sum ",
        "generated_testcode": "assert odd_Num_Sum(5) == 225\n",
        "test": "assert odd_Num_Sum(2) == 82\nassert odd_Num_Sum(3) == 707\nassert odd_Num_Sum(4) == 3108",
        "canonical_solution": "def odd_Num_Sum(n) : \r\n    j = 0\r\n    sm = 0\r\n    for i in range(1,n + 1) : \r\n        j = (2*i-1) \r\n        sm = sm + (j*j*j*j)   \r\n    return sm "
    },
    {
        "number": 771,
        "prompt": "Write a function to check if the given expression is balanced or not.\ndef check_expression(exp):\n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    stack = []\n    for i in exp:\n        if i in ['(', '[', '{']:\n            stack.append(i)\n        elif i in [')', ']', '}']:\n            if not stack:\n                return False\n            if i == ')' and stack[-1] == '(':\n                stack.pop()\n            elif i == ']' and stack[-1] == '[':\n                stack.pop()\n            elif i == '}' and stack[-1] == '{':\n                stack.pop()\n            else:\n                return False\n    return len(stack) == 0\n\n\n# Test cases\nprint(check_expression('{{[()]}}'))  # True\nprint(check_expression('({[]}'))  # False\nprint(check_expression('{{[)]'))  # False\nprint(check_expression('({[()]')) # False\nprint(check_expression('({[]})')) # True\nprint(check_expression('([]'))   # True\n",
        "generated_testcode": "assert check_expression(\"(a+b)+(c-d)\") == True\n",
        "test": "assert check_expression(\"{()}[{}]\") == True\nassert check_expression(\"{()}[{]\") == False\nassert check_expression(\"{()}[{}][]({})\") == True",
        "canonical_solution": "from collections import deque\r\ndef check_expression(exp):\r\n    if len(exp) & 1:\r\n        return False\r\n    stack = deque()\r\n    for ch in exp:\r\n        if ch == '(' or ch == '{' or ch == '[':\r\n            stack.append(ch)\r\n        if ch == ')' or ch == '}' or ch == ']':\r\n            if not stack:\r\n                return False\r\n            top = stack.pop()\r\n            if (top == '(' and ch != ')') or (top == '{' and ch != '}' or (top == '[' and ch != ']')):\r\n                return False\r\n    return not stack"
    },
    {
        "number": 772,
        "prompt": "Write a function to remove all the words with k length in the given string.\ndef remove_length(test_str, K):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    words = test_str.split()\n    result = []\n    for word in words:\n        if len(word) != K:\n            result.append(word)\n    return ' '.join(result)\n\n# Test cases\nprint(remove_length(\"this is a test string with words of various lengths\", 5)) # \"this is test string various lengths\"\nprint(remove_length(\"this is another test string with words of varying lengths\", 5) # \"this is test string varying lengths\"\nprint(remove_length(\"the quick brown fox jumps over the lazy dog\", 3) # \"the quick over dog\"\nprint(remove_length(\"the quick brown fox jumps over the lazy dog\", 4) # \"the quick brown jumps lazy\"\nprint(remove_length(\"the quick brown fox jumps over the lazy dog\", 1) # \"the brown jumps lazy\"\nprint(remove_length(\"the quick brown fox jumps over the lazy dog\", 2) # \"the quick jumps over the\"\nprint(remove_length(\"the quick brown fox jumps over the lazy dog\", 10) # \"the quick brown jumps over the lazy dog\"\n\n\n#Solution\ndef remove_length(test_str, K):\n    words = test_str.split()\n    result = []\n    for word in words:\n        if len(word) != K:\n            result.append(word)\n    return ' '.join(result)\n\n# Test cases\nprint(remove_length(\"this is",
        "generated_testcode": "assert remove_length(\"This is a test string\", 5) == \"This string\"\n",
        "test": "assert remove_length('The person is most value tet', 3) == 'person is most value'\nassert remove_length('If you told me about this ok', 4) == 'If you me about ok'\nassert remove_length('Forces of darkeness is come into the play', 4) == 'Forces of darkeness is the'",
        "canonical_solution": "def remove_length(test_str, K):\r\n  temp = test_str.split()\r\n  res = [ele for ele in temp if len(ele) != K]\r\n  res = ' '.join(res)\r\n  return (res) "
    },
    {
        "number": 773,
        "prompt": "Write a function to find the occurrence and position of the substrings within a string.\ndef occurance_substring(text,pattern):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    count = 0\n    start_index = 0\n    position = []\n    while start_index < len(text):\n        index = text.find(pattern, start_index)\n        if index == -1:\n            break\n        count += 1\n        position.append(index)\n        start_index = index + 1\n    return count, position\n\n\n#Test the function\nprint(occurance_substring(\"hello world world hello\", \"hello\"))\n# Output: (2, [0, 6])\n\nprint(occurance_substring(\"hello world hello\", \"world\"))\n# Output: (1, [6])\n\nprint(occurance_substring(\"aaaaa\", \"aaa\"))\n# Output: (3, [0, 1, 2])\n\nprint(occurance_substring(\"aaaaa\", \"bbb\"))\n# Output: (0, [])\n",
        "generated_testcode": "assert occurance_substring(\"hello world\", \"l\") == [(1, 2), (3, 2), (4, 2), (7, 2)]\n",
        "test": "assert occurance_substring('python programming, python language','python')==('python', 0, 6)\nassert occurance_substring('python programming,programming language','programming')==('programming', 7, 18)\nassert occurance_substring('python programming,programming language','language')==('language', 31, 39)",
        "canonical_solution": "import re\r\ndef occurance_substring(text,pattern):\r\n for match in re.finditer(pattern, text):\r\n    s = match.start()\r\n    e = match.end()\r\n    return (text[s:e], s, e)"
    },
    {
        "number": 774,
        "prompt": "Write a function to check if the string is a valid email address or not using regex.\ndef check_email(email): \n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    import re\n    pattern = r'^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$'\n    return re.match(pattern, email)\n\n# Test cases\nprint(check_email('example@example.com')) # True\nprint(check_email('@example.com')) # False\nprint(check_email('example@example')) # False\nprint(check_email('example.com')) # False\nprint(check_email('example@example.co.in')) # True\nprint(check_email('example@example.c')) # False\nprint(check_email('example@example.co')) # False\nprint(check_email('example@example.co.uk')) # True\nprint(check_email('example@exam_ple.com')) # False\n",
        "generated_testcode": "assert check_email(\"example@example.com\") == True\n",
        "test": "assert check_email(\"ankitrai326@gmail.com\") == 'Valid Email'\nassert check_email(\"my.ownsite@ourearth.org\") == 'Valid Email'\nassert check_email(\"ankitaoie326.com\") == 'Invalid Email'",
        "canonical_solution": "import re \r\nregex = '^[a-z0-9]+[\\._]?[a-z0-9]+[@]\\w+[.]\\w{2,3}$'\r\ndef check_email(email): \r\n\tif(re.search(regex,email)): \r\n\t\treturn (\"Valid Email\") \r\n\telse: \r\n\t\treturn (\"Invalid Email\") "
    },
    {
        "number": 775,
        "prompt": "Write a python function to check whether every odd index contains odd numbers of a given list.\ndef odd_position(nums):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    for i in range(1, len(nums), 2):\n        if nums[i] % 2 == 0:\n            return False\n    return True\n\n# Test cases\nprint(odd_position([1, 2, 3, 4, 5, 6, 7, 8, 9])) # Should return True\nprint(odd_position([2, 4, 6, 8, 10, 12, 14, 16])) # Should return False\nprint(odd_position([1, 3, 5, 7, 9, 11, 13, 15, 17])) # Should return True\nprint(odd_position([1, 2, 3, 4, 6, 8, 10, 12])) # Should return False\n\n\n# Code\ndef odd_position(nums):\n    for i in range(1, len(nums), 2):\n        if nums[i] % 2 == 0:\n            return False\n    return True\n",
        "generated_testcode": "assert odd_position([1, 2, 3, 4, 5, 6, 7, 8, 9]) == True\n",
        "test": "assert odd_position([2,1,4,3,6,7,6,3]) == True\nassert odd_position([4,1,2]) == True\nassert odd_position([1,2,3]) == False",
        "canonical_solution": "def odd_position(nums):\r\n\treturn all(nums[i]%2==i%2 for i in range(len(nums)))"
    },
    {
        "number": 776,
        "prompt": "Write a function to count those characters which have vowels as their neighbors in the given string.\ndef count_vowels(test_str):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n    count = 0\n    for i in range(len(test_str)-1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n    return count\n\n# Test the function\ntest_str = \"Aeiou\"\nprint(count_vowels(test_str))\ntest_str = \"aeiouAEIOU\"\nprint(count_vowels(test_str))\ntest_str = \"hello world\"\nprint(count_vowels(test_str))\ntest_str = \"aeiouAEIOU\"\nprint(count_vowels(test_str))\ntest_str = \"python\"\nprint(count_vowels(test_str))\ntest_str = \"Python\"\nprint(count_vowels(test_str))\ntest_str = \"Python is awesome\"\nprint(count_vowels(test_str))\ntest_str = \"aeiou\"\nprint(count_vowels(test_str))\ntest_str = \"aeiouAEIOU\"\nprint(count_vowels(test_str))\ntest_str = \"aeiouAEIOUaeiou\"\nprint(count_vowels(test_str))\ntest_str = \"pythonisawesome\"",
        "generated_testcode": "assert count_vowels(\"hello\") == 1\n",
        "test": "assert count_vowels('bestinstareels') == 7\nassert count_vowels('partofthejourneyistheend') == 12\nassert count_vowels('amazonprime') == 5",
        "canonical_solution": "def count_vowels(test_str):\r\n  res = 0\r\n  vow_list = ['a', 'e', 'i', 'o', 'u']\r\n  for idx in range(1, len(test_str) - 1):\r\n    if test_str[idx] not in vow_list and (test_str[idx - 1] in vow_list or test_str[idx + 1] in vow_list):\r\n      res += 1\r\n  if test_str[0] not in vow_list and test_str[1] in vow_list:\r\n    res += 1\r\n  if test_str[-1] not in vow_list and test_str[-2] in vow_list:\r\n    res += 1\r\n  return (res) "
    },
    {
        "number": 777,
        "prompt": "Write a python function to find the sum of non-repeated elements in a given array.\ndef find_Sum(arr,n): \n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": " \n    # Create an empty dictionary \n    freq = {} \n  \n    # Traverse through each element in the array \n    for i in range(n): \n        if arr[i] in freq: \n            freq[arr[i]][0] += 1\n        else: \n            freq[arr[i]] = [1, 0] \n  \n    # Traverse through the dictionary and find the sum of the elements which occur only once \n    sum = 0\n    for i in freq: \n        if freq[i][0] == 1: \n            sum += i \n    return sum\n\n# Test the function with an example array\narr = [1, 2, 3, 2, 4, 5, 1, 6, 4, 7, 8, 8] \nn = len(arr) \nprint(find_Sum(arr, n)) ",
        "generated_testcode": "assert find_Sum([1,2,3,4,5,6,5,4,3,2,1],7) == 16\n",
        "test": "assert find_Sum([1,2,3,1,1,4,5,6],8) == 21\nassert find_Sum([1,10,9,4,2,10,10,45,4],9) == 71\nassert find_Sum([12,10,9,45,2,10,10,45,10],9) == 78",
        "canonical_solution": "def find_Sum(arr,n): \r\n    arr.sort() \r\n    sum = arr[0] \r\n    for i in range(0,n-1): \r\n        if (arr[i] != arr[i+1]): \r\n            sum = sum + arr[i+1]   \r\n    return sum"
    },
    {
        "number": 778,
        "prompt": "Write a function to pack consecutive duplicates of a given list elements into sublists.\ndef pack_consecutive_duplicates(list1):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    result = []\n    sublist = []\n    for i in range(len(list1)):\n        if i == 0 or list1[i] != list1[i-1]:\n            sublist = [list1[i]]\n        else:\n            sublist.append(list1[i])\n        if i == len(list1)-1 or list1[i] != list1[i+1]:\n            result.append(sublist)\n            sublist = []\n    return result\n\n# Example usage:\nprint(pack_consecutive_duplicates([1, 1, 2, 2, 3, 3, 3, 4, 5, 5, 5]))  # Output: [[1], [2, 2], [3, 3, 3], [4], [5, 5, 5]]\n\n# Test with other inputs\nprint(pack_consecutive_duplicates([1, 2, 2, 3, 3, 3, 4, 4, 4, 4, 5, 5, 6, 7, 7])) # Output: [[1], [2, 2], [3, 3, 3], [4, 4, 4], [5], [5], [6], [7, 7]]\nprint(pack_consecutive_duplicates([1, 1, 1, 1, 2, 2, 2, 3, 3])) # Output: [[1,",
        "generated_testcode": "assert pack_consecutive_duplicates([\"a\", \"a\", \"a\", \"a\", \"a\", \"b\", \"b\", \"b\", \"c\", \"c\", \"c\", \"c\", \"c\", \"a\", \"a\", \"a\"] == [[\"a\", [\"a\", \"a\", \"a\"], \"b\", [\"b\", \"b\"], [\"c\", \"c\", \"c\", \"c\"], \"a\", [\"a\", \"a\"]]\nprint(pack_consecutive_duplicates([\"a\", \"a\", \"a\", \"a\", \"b\", \"b\", \"b\", \"c\", \"c\", \"c\", \"c\", \"c\", \"a\", \"a\", \"a\"]))\n\n# Output: [[\"a\", [\"a\", \"a\", \"a\"], \"b\", [\"b\", \"b\"], [\"c\", \"c\", \"c\", \"c\"], \"a\", [\"a\", \"a\"]] ",
        "test": "assert pack_consecutive_duplicates([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4])==[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]\nassert pack_consecutive_duplicates([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10])==[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]\nassert pack_consecutive_duplicates(['a', 'a', 'b', 'c', 'd', 'd'])==[['a', 'a'], ['b'], ['c'], ['d', 'd']]",
        "canonical_solution": "from itertools import groupby\r\ndef pack_consecutive_duplicates(list1):\r\n    return [list(group) for key, group in groupby(list1)]"
    },
    {
        "number": 779,
        "prompt": "Write a function to count the number of unique lists within a list.\ndef unique_sublists(list1):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    count = 0\n    for sublist in list1:\n        if sublist not in list1[:list1.index(sublist):\n            count += 1\n    return count\n\n#Example usage:\nlist1 = [[1, 2, 3], [1, 2, 3], [4, 5, 6], [7, 8, 9]]\nprint(unique_sublists(list1)) # Output: 3 (since there are 3 unique lists in the list)\n\nlist2 = [[1, 2, 3], [1, 2, 3], [4, 5, 6], [7, 8, 9], [1, 2, 3]]\nprint(unique_sublists(list2)) # Output: 3 (since there are 3 unique lists in the list)\n\nlist3 = [[1, 2, 3], [4, 5, 6], [7, 8, 9], [1, 2, 3]]\nprint(unique_sublists(list3)) # Output: 2 (since there are 2 unique lists in the list)\n\nlist4 = [[1, 2, 3], [4, 5, 6], [1, 2, 3], [7, 8, 9], [7, 8, 9]]\nprint(unique_sublists(list4)) # Output: 2 (since there are 2 unique lists in the list)\n\nlist5 = [[1, ",
        "generated_testcode": "assert unique_sublists([[1,2,3]) == 1\n",
        "test": "assert unique_sublists([[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]])=={(1, 3): 2, (5, 7): 2, (13, 15, 17): 1, (9, 11): 1}\nassert unique_sublists([['green', 'orange'], ['black'], ['green', 'orange'], ['white']])=={('green', 'orange'): 2, ('black',): 1, ('white',): 1}\nassert unique_sublists([[1, 2], [3, 4], [4, 5], [6, 7]])=={(1, 2): 1, (3, 4): 1, (4, 5): 1, (6, 7): 1}",
        "canonical_solution": "def unique_sublists(list1):\r\n    result ={}\r\n    for l in list1: \r\n        result.setdefault(tuple(l), list()).append(1) \r\n    for a, b in result.items(): \r\n        result[a] = sum(b)\r\n    return result"
    },
    {
        "number": 780,
        "prompt": "Write a function to find the combinations of sums with tuples in the given tuple list.\ndef find_combinations(test_list):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    result = []\n    for i in range(1, len(test_list) + 1):\n        result.extend(list(itertools.combinations(test_list, i)))\n    return result\n\n# Test the function\ntest_list = (1,2,3,4,5,6)\nprint(find_combinations(test_list))\n\n\n# Output:\n# [(1,), (2,), (3,), (4,), (5,), (6,), (1, 2), (1, 3), (1, 4), (1, 5), (1, 6), (2, 3), (2, 4), (2, 5), (2, 6), (3, 4), (3, 5), (3, 6), (4, 5), (4, 6), (5, 6), (1, 2, 3), (1, 2, 4), (1, 2, 5), (1, 2, 6), (1, 3, 4), (1, 3, 5), (1, 3, 6), (1, 4, 5), (1, 4, 6), (1, 5, 6), (2, 3, 4), (2, 3, 5), (2, 3, 6), (2, 4, 5), (2, 4, 6), (2, 5, 6",
        "generated_testcode": "assert find_combinations(()) == []\n",
        "test": "assert find_combinations([(2, 4), (6, 7), (5, 1), (6, 10)]) == [(8, 11), (7, 5), (8, 14), (11, 8), (12, 17), (11, 11)]\nassert find_combinations([(3, 5), (7, 8), (6, 2), (7, 11)]) == [(10, 13), (9, 7), (10, 16), (13, 10), (14, 19), (13, 13)]\nassert find_combinations([(4, 6), (8, 9), (7, 3), (8, 12)]) == [(12, 15), (11, 9), (12, 18), (15, 12), (16, 21), (15, 15)]",
        "canonical_solution": "from itertools import combinations \r\ndef find_combinations(test_list):\r\n  res = [(b1 + a1, b2 + a2) for (a1, a2), (b1, b2) in combinations(test_list, 2)]\r\n  return (res) "
    },
    {
        "number": 781,
        "prompt": "Write a python function to check whether the count of divisors is even or odd.\ndef count_Divisors(n) : \n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    divisors = 0\n    for i in range(1, n+1) : \n        if n % i == 0 : \n            divisors += 1\n    if divisors % 2 == 0 : \n        return True\n    else : \n        return False\n\n\n# Test the function \nprint(count_Divisors(6)) # Output: True\nprint(count_Divisors(12)) # Output: False\nprint(count_Divisors(9)) # Output: False\nprint(count_Divisors(15)) # Output: True\n",
        "generated_testcode": "assert count_Divisors(12) == 4 # True\n",
        "test": "assert count_Divisors(10) == \"Even\"\nassert count_Divisors(100) == \"Odd\"\nassert count_Divisors(125) == \"Even\"",
        "canonical_solution": "import math \r\ndef count_Divisors(n) : \r\n    count = 0\r\n    for i in range(1, (int)(math.sqrt(n)) + 2) : \r\n        if (n % i == 0) : \r\n            if( n // i == i) : \r\n                count = count + 1\r\n            else : \r\n                count = count + 2\r\n    if (count % 2 == 0) : \r\n        return (\"Even\") \r\n    else : \r\n        return (\"Odd\") "
    },
    {
        "number": 782,
        "prompt": "Write a python function to find the sum of all odd length subarrays.\ndef Odd_Length_Sum(arr):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    n=len(arr)\n    ans=0\n    for i in range(n):\n        for j in range(i+1,n):\n            if j-i+1%2!=0:\n                temp=sum(arr[i:j+1])\n                ans+=temp\n    return ans\n\n#Example usage:\narr=[1,2,3,4,5,6,7,8,9]\nprint(Odd_Length_Sum(arr)) #output: 25 (2+4+6+8)\n",
        "generated_testcode": "assert Odd_Length_Sum([1,2,3,4,5,6,7,8,9]) == 25\n",
        "test": "assert Odd_Length_Sum([1,2,4]) == 14\nassert Odd_Length_Sum([1,2,1,2]) == 15\nassert Odd_Length_Sum([1,7]) == 8",
        "canonical_solution": "def Odd_Length_Sum(arr):\r\n    Sum = 0\r\n    l = len(arr)\r\n    for i in range(l):\r\n        Sum += ((((i + 1) *(l - i) + 1) // 2) * arr[i])\r\n    return Sum"
    },
    {
        "number": 783,
        "prompt": "Write a function to convert rgb color to hsv color.\ndef rgb_to_hsv(r, g, b):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": true,
        "answer": "    r, g, b = r/2555.0, g/2555.0, b/2555.0\n    cmax, cmin = max(r, g, b), min(r, g, b)\n    delta = cmax - cmin\n    if delta == 0:\n        h = 0\n    elif cmax == r:\n        h = 60 * ((g - b) / delta % 6)\n    elif cmax == g:\n        h = 60 * ((b - r) / delta + 2)\n    else:\n        h = 60 * ((r - g) / delta + 4)\n    \n    if cmax == 0:\n        s = 0\n    else:\n        s = delta / cmax\n    v = cmax\n    return h, s, v\n\n\n# Test the function\nprint(rgb_to_hsv(2555, 0, 0)) # Output: (0, 1.0, 1.0)\nprint(rgb_to_hsv(0, 2555, 0)) # Output: (120, 1.0, 1.0)\nprint(rgb_to_hsv(0, 0, 2555)) # Output: (240, 1.0, 1.0)\nprint(rgb_to_hsv(2555, 255, 0)) # Output: (6",
        "generated_testcode": "assert rgb_to_hsv(2555, 0, 0) == (0, 1, 1)\n",
        "test": "assert rgb_to_hsv(255, 255, 255)==(0, 0.0, 100.0)\nassert rgb_to_hsv(0, 215, 0)==(120.0, 100.0, 84.31372549019608)\nassert rgb_to_hsv(10, 215, 110)==(149.26829268292684, 95.34883720930233, 84.31372549019608)",
        "canonical_solution": "def rgb_to_hsv(r, g, b):\r\n    r, g, b = r/255.0, g/255.0, b/255.0\r\n    mx = max(r, g, b)\r\n    mn = min(r, g, b)\r\n    df = mx-mn\r\n    if mx == mn:\r\n        h = 0\r\n    elif mx == r:\r\n        h = (60 * ((g-b)/df) + 360) % 360\r\n    elif mx == g:\r\n        h = (60 * ((b-r)/df) + 120) % 360\r\n    elif mx == b:\r\n        h = (60 * ((r-g)/df) + 240) % 360\r\n    if mx == 0:\r\n        s = 0\r\n    else:\r\n        s = (df/mx)*100\r\n    v = mx*100\r\n    return h, s, v"
    },
    {
        "number": 784,
        "prompt": "Write a function to find the product of first even and odd number of a given list.\ndef mul_even_odd(list1):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    even_product = 1\n    odd_product = 1\n    even_flag = False\n    odd_flag = False\n\n    for num in list1:\n        if num % 2 == 0:\n            if even_flag == False:\n                even_product = num\n                even_flag = True\n        else:\n            if odd_flag == False:\n                odd_product = num\n                odd_flag = True\n\n    return even_product * odd_product\n\n# Test the function with the given test cases\nprint(mul_even_odd([2, 4, 3, 5, 6, 8, 7])) # Output: 32\nprint(mul_even_odd([1, 3, 5, 6, 4, 8])) # Output: 48\nprint(mul_even_odd([2, 4, 8, 10, 9])) # Output: 32\nprint(mul_even_odd([7, 9, 11, 13])) # Output: 0\nprint(mul_even_odd([3, 5, 7, 9])) # Output: 0",
        "generated_testcode": "assert mul_even_odd([1, 2, 3, 4, 5, 6, 7, 8]) == 32\n",
        "test": "assert mul_even_odd([1,3,5,7,4,1,6,8])==4\nassert mul_even_odd([1,2,3,4,5,6,7,8,9,10])==2\nassert mul_even_odd([1,5,7,9,10])==10",
        "canonical_solution": "def mul_even_odd(list1):\r\n    first_even = next((el for el in list1 if el%2==0),-1)\r\n    first_odd = next((el for el in list1 if el%2!=0),-1)\r\n    return (first_even*first_odd)"
    },
    {
        "number": 785,
        "prompt": "Write a function to convert tuple string to integer tuple.\ndef tuple_str_int(test_str):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    # Your code here\n    int_tuple = tuple(map(int, test_str[1:-1].replace(\"(\", \"\").replace(\")\", \"\").split(\", \")))\n    return int_tuple\n\n# Testing\nprint(tuple_str_int(\"(1,2,3,4,5,6,7)\")) # (1, 2, 3, 4, 5, 6, 7)\nprint(tuple_str_int(\"(8,9,10,11,12,13,14,15)\")) # (8, 9, 10, 11, 12, 13, 14, 15)\nprint(tuple_str_int(\"(16,17,18,19,20,21,22,23)\")) # (16, 17, 18, 19, 20, 21, 22, 23)\nprint(tuple_str_int(\"(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23)\")) # (1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 1",
        "generated_testcode": "assert tuple_str_int(\"(1,2,3,4,5)\") == (1,2,3,4,5)\n",
        "test": "assert tuple_str_int(\"(7, 8, 9)\") == (7, 8, 9)\nassert tuple_str_int(\"(1, 2, 3)\") == (1, 2, 3)\nassert tuple_str_int(\"(4, 5, 6)\") == (4, 5, 6)",
        "canonical_solution": "def tuple_str_int(test_str):\r\n  res = tuple(int(num) for num in test_str.replace('(', '').replace(')', '').replace('...', '').split(', '))\r\n  return (res) "
    },
    {
        "number": 786,
        "prompt": "Write a function to locate the right insertion point for a specified value in sorted order.\ndef right_insertion(a, x):\n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    left = 0\n    right = len(a) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if a[mid] < x:\n            left = mid + 1\n        elif a[mid] > x:\n            right = mid - 1\n        else:\n            return mid\n    return left\n\n# test the function\na = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25]\nprint(right_insertion(a, 11))  # expected output: 3\nprint(right_insertion(a, 20))  # expected output: 4\nprint(right_insertion(a, 0))  # expected output: 0\nprint(right_insertion(a, 26))  # expected output: 8\nprint(right_insertion(a, 100))  # expected output: 8\nprint(right_insertion(a, -1))  # expected output: 0\n",
        "generated_testcode": "assert right_insertion([1, 3, 4, 5, 6, 7, 8, 9], 4) == 2\n",
        "test": "assert right_insertion([1,2,4,5],6)==4\nassert right_insertion([1,2,4,5],3)==2\nassert right_insertion([1,2,4,5],7)==4",
        "canonical_solution": "import bisect\r\ndef right_insertion(a, x):\r\n    i = bisect.bisect_right(a, x)\r\n    return i"
    },
    {
        "number": 787,
        "prompt": "Write a function that matches a string that has an a followed by three 'b'.\ndef text_match_three(text):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": true,
        "answer": "    if 'ab' in text:\n        return True\n    return False\n\n# Test the function\nprint(text_match_three('abc')) # True\nprint(text_match_three('abbb')) # False\nprint(text_match_three('abbab')) # True\nprint(text_match_three('abbbb')) # False\nprint(text_match_three('aabbc')) # False\nprint(text_match_three('abbabb')) # True\nprint(text_match_three('abbbbabbbb')) # True\nprint(text_match_three('abcdefg')) # False\nprint(text_match_three('abbbbb')) # False\nprint(text_match_three('aaabbbc')) # False\nprint(text_match_three('aabbaaabbbc')) # True",
        "generated_testcode": "assert text_match_three(\"abbb\") == True\n",
        "test": "assert text_match_three(\"ac\")==('Not matched!')\nassert text_match_three(\"dc\")==('Not matched!')\nassert text_match_three(\"abbbba\")==('Found a match!')",
        "canonical_solution": "import re\r\ndef text_match_three(text):\r\n        patterns = 'ab{3}?'\r\n        if re.search(patterns,  text):\r\n                return 'Found a match!'\r\n        else:\r\n                return('Not matched!')"
    },
    {
        "number": 788,
        "prompt": "Write a function to create a new tuple from the given string and list.\ndef new_tuple(test_list, test_str):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    new_tuple = ()\n    for item in test_list:\n        new_tuple += (item,)\n    for i in test_str:\n        new_tuple += i\n    return new_tuple\n\n# Test the function with the given input\ntest_list = ['a', 'b', 'c', 'd']\ntest_str = \"test\"\nprint(new_tuple(test_list, test_str)) # Output: ('a', 'b', 'c', 'd', 't', 'e', 's', 't')\n\n\n# Write a function to create a new list from the given string and list\ndef new_list(test_list, test_str):\n    new_list = []\n    for item in test_list:\n        new_list.append(item)\n    for i in test_str:\n        new_list.append(i)\n    return new_list\n# Test the function with the given input\ntest_list = ['a', 'b', 'c', 'd']\ntest_str = \"test\"\nprint(new_list(test_list, test_str)) # Output: ['a', 'b', 'c', 'd', 't', 'e', 's', 't']\n\n\n# Write a function to create a new dictionary from the given string and list\ndef new_dict(test_list, test_str):\n    new_dict = {}\n    for i in range(len(test_list)):\n        new_dict[test_list[i]] = test_",
        "generated_testcode": "assert new_tuple(['apple', 'banana', 'orange', 'grape'], 'hello') == ('h', 'e', 'l', 'o')\n",
        "test": "assert new_tuple([\"WEB\", \"is\"], \"best\") == ('WEB', 'is', 'best')\nassert new_tuple([\"We\", \"are\"], \"Developers\") == ('We', 'are', 'Developers')\nassert new_tuple([\"Part\", \"is\"], \"Wrong\") == ('Part', 'is', 'Wrong')",
        "canonical_solution": "def new_tuple(test_list, test_str):\r\n  res = tuple(test_list + [test_str])\r\n  return (res) "
    },
    {
        "number": 789,
        "prompt": "Write a function to calculate the perimeter of a regular polygon.\ndef perimeter_polygon(s,l):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    n = len(s)\n    side = l/n\n    return n*side\n\n# Test the function with example input\nprint(perimeter_polygon([\"1,2,3,4,5,6,7,8\", 10)) # 30.0\nprint(perimeter_polygon([\"1,2,3,4\", 10)) # 12.0\nprint(perimeter_polygon([\"1\", 10)) # 10.0\n\n\n# Test the function with another example input\nprint(perimeter_polygon([\"3,4,5,6,7,8,9,10,11,12,13,14,15,16\", 20)) # 50.0\n\n# Test the function with invalid input\nprint(perimeter_polygon([\"1,2,3,4,5,6,7,8,9,10\", 10)) # should return None\nprint(perimeter_polygon([\"1,2,3,4,5,6\", \"hello\")) # should return None\n",
        "generated_testcode": "assert perimeter_polygon(3, 10) == 18\n",
        "test": "assert perimeter_polygon(4,20)==80\nassert perimeter_polygon(10,15)==150\nassert perimeter_polygon(9,7)==63",
        "canonical_solution": "from math import tan, pi\r\ndef perimeter_polygon(s,l):\r\n  perimeter = s*l\r\n  return perimeter"
    },
    {
        "number": 790,
        "prompt": "Write a python function to check whether every even index contains even numbers of a given list.\ndef even_position(nums):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    for i in nums:\n        if i%2 != 0:\n            return False\n    return True\n\n# Example usage:\n# print(even_position([1,2,3,4,5,6,8,9,10])) # Output: True\n# print(even_position([1,2,3,4,5,6,8,9,10,11])) # Output: False\n# print(even_position([2,4,6,8])) # Output: True\n# print(even_position([1,3,5,7])) # Output: False\n\n# Write a python function to check whether every even index contains odd numbers of a given list\ndef odd_position(nums):\n    for i in range(0, len(nums), 2):\n        if nums[i]%2 == 0:\n            return False\n    return True\n\n# Example usage:\n# print(odd_position([1,2,3,4,5,6,8,9,10])) # Output: False\n# print(odd_position([1,2,3,4,5,6,8,9,10,11])) # Output: True\n# print(odd_position([1,3,5,7,9,11])) # Output: False\n# print(odd_position([2,4,6,8,10])) # Output: True\n\n# Write a python function to check whether the sum of every pair of even index numbers is greater than the sum of every pair",
        "generated_testcode": "assert even_position([1, 2, 3, 4, 5, 6, 7, 8]) == True\n",
        "test": "assert even_position([3,2,1]) == False\nassert even_position([1,2,3]) == False\nassert even_position([2,1,4]) == True",
        "canonical_solution": "def even_position(nums):\r\n\treturn all(nums[i]%2==i%2 for i in range(len(nums)))"
    },
    {
        "number": 791,
        "prompt": "Write a function to remove the nested record from the given tuple.\ndef remove_nested(test_tup):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    result = []\n    for i in test_tup:\n        if isinstance(i, tuple):\n            result.extend(i)\n        else:\n            result.append(i)\n    return tuple(result)\n\n\n# Test the function\nprint(remove_nested(((1, (2, (3, 4, (5, 6, (7, 8)), 9), 10)))\n# Output: (1, 2, 3, 4, 5, 6, 7, 8, 9, 10) ",
        "generated_testcode": "assert remove_nested((\"hello\", (1, 2, (3, 4, (5, 6))) == (\"hello\", 1, 2, 3, 4, 5, 6)\n",
        "test": "assert remove_nested((1, 5, 7, (4, 6), 10)) == (1, 5, 7, 10)\nassert remove_nested((2, 6, 8, (5, 7), 11)) == (2, 6, 8, 11)\nassert remove_nested((3, 7, 9, (6, 8), 12)) == (3, 7, 9, 12)",
        "canonical_solution": "def remove_nested(test_tup):\r\n  res = tuple()\r\n  for count, ele in enumerate(test_tup):\r\n    if not isinstance(ele, tuple):\r\n      res = res + (ele, )\r\n  return (res) "
    },
    {
        "number": 792,
        "prompt": "Write a python function to count the number of lists in a given number of lists.\ndef count_list(input_list): \n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    count = 0\n    for i in input_list:\n        if type(i) == list:\n            count += 1\n    return count\n\n# Example usage:\ninput_list = [1, 2, [3, 4, [5, 6], 7, 8], [9, [10, 11], 12], 13]\nprint(count_list(input_list)) # Output: 2\n\ninput_list = [1, 2, 3, 4, 5, [6, 7, [8, 9], 10], [11, [12, 13]]]\nprint(count_list(input_list)) # Output: 3\n\ninput_list = [1, 2, 3, 4, 5, [6, 7, [8, 9, [10, 11, 12, [13, [14, 15]]]]]\nprint(count_list(input_list)) # Output: 2\n\ninput_list = [1]\nprint(count_list(input_list)) # Output: 0",
        "generated_testcode": "assert count_list([[1,2,3],[4,5,6],[7,8,9]) == 3\n",
        "test": "assert count_list([[1, 3], [5, 7], [9, 11], [13, 15, 17]]) == 4\nassert count_list([[1,2],[2,3],[4,5]]) == 3\nassert count_list([[1,0],[2,0]]) == 2",
        "canonical_solution": "def count_list(input_list): \r\n    return len(input_list)"
    },
    {
        "number": 793,
        "prompt": "Write a python function to find the last position of an element in a sorted array.\ndef last(arr,x,n):\n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    l=0\n    r=n-1\n    result=0\n    while(l<=r):\n        mid=l+(r-l)//2\n        if(arr[mid]==x):\n            result=mid\n            l=mid+1\n        elif(arr[mid]<x):\n            l=mid+1\n        else:\n            r=mid-1\n    return result\n        \n        \n#example\narr=[1,2,3,4,4,4,4,4,5,6,7,8,8,8,9]\nn=len(arr)\nx=4\nprint(last(arr,x,n)) #output: 5\n",
        "generated_testcode": "assert last([1,2,3,4,4,4,4,5,6,7,7,8,9], 4, 8) == 6\n",
        "test": "assert last([1,2,3],1,3) == 0\nassert last([1,1,1,2,3,4],1,6) == 2\nassert last([2,3,2,3,6,8,9],3,8) == 3",
        "canonical_solution": "def last(arr,x,n):\r\n    low = 0\r\n    high = n - 1\r\n    res = -1  \r\n    while (low <= high):\r\n        mid = (low + high) // 2 \r\n        if arr[mid] > x:\r\n            high = mid - 1\r\n        elif arr[mid] < x:\r\n            low = mid + 1\r\n        else:\r\n            res = mid\r\n            low = mid + 1\r\n    return res"
    },
    {
        "number": 794,
        "prompt": "Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\ndef text_starta_endb(text):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    return 'a' in text and text.endswith('b')\n\n# Test cases\nprint(text_starta_endb('ab')) # True\nprint(text_starta_endb('acb')) # True\nprint(text_starta_endb('abc')) # False\nprint(text_starta_endb('a')) # False\nprint(text_starta_endb('bb')) # False\nprint(text_starta_endb('aasdfb')) # True\nprint(text_starta_endb('abasdfasdf')) # True\nprint(text_starta_endb('aasdfasdfb')) # True\nprint(text_starta_endb('b')) # False\nprint(text_starta_endb('aaab')) # False\nprint(text_starta_endb('ba')) # False\nprint(text_starta_endb('asdfaasdfb')) # False\nprint(text_starta_endb('abab')) # True\nprint(text_starta_endb('aasdfasdfb')) # True\nprint(text_starta_endb('aabb')) # False\n\n\n# Solution:\ndef text_starta_endb(text):\n    return text.startswith('a') and text.endswith('b')\n\n# Test cases\nprint(text_starta_endb('ab')) # True\nprint(text_starta_endb('acb')) # True\nprint(text_starta",
        "generated_testcode": "assert text_starta_endb(\"ab\") == True\n",
        "test": "assert text_starta_endb(\"aabbbb\")==('Found a match!')\nassert text_starta_endb(\"aabAbbbc\")==('Not matched!')\nassert text_starta_endb(\"accddbbjjj\")==('Not matched!')",
        "canonical_solution": "import re\r\ndef text_starta_endb(text):\r\n        patterns = 'a.*?b$'\r\n        if re.search(patterns,  text):\r\n                return 'Found a match!'\r\n        else:\r\n                return('Not matched!')"
    },
    {
        "number": 795,
        "prompt": "Write a function to find the n - cheap price items from a given dataset using heap queue algorithm.\ndef cheap_items(items,n):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    heap = []\n    for i in items:\n        heappush(heap, (i[1],i[0]) )\n    while n:\n        popped = heappop(heap)\n        n -= 1\n    return popped\n\n# test cases\nitems = [(10,100),(20,50),(30,30),(40,20),(50,40),(60,10),(70,60),(80,5),(90,70),(100,80)], 3\nprint(cheap_items(items,3)) # Output: [(10, 100)], [(50, 30), (40, 20), (20, 50)] ",
        "generated_testcode": "assert (cheap_items([(1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3) == [1, 2, 3])\n",
        "test": "assert cheap_items([{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}],1)==[{'name': 'Item-1', 'price': 101.1}]\nassert cheap_items([{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}],2)==[{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}]\nassert cheap_items([{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}, {'name': 'Item-3', 'price': 45.09},{'name': 'Item-4', 'price': 22.75}],1)==[{'name': 'Item-4', 'price': 22.75}]",
        "canonical_solution": "import heapq\r\ndef cheap_items(items,n):\r\n  cheap_items = heapq.nsmallest(n, items, key=lambda s: s['price'])\r\n  return cheap_items"
    },
    {
        "number": 796,
        "prompt": "Write function to find the sum of all items in the given dictionary.\ndef return_sum(dict):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": true,
        "answer": "    sum = 0\n    for key in dict:\n        sum += dict[key]\n    return sum\n\n# Test the function with the given dictionary\ndictionary = {'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5, 'f': 6}\nprint(return_sum(dictionary))\n\n# Output: 15\n\n\n# Test the function with another dictionary\ndictionary2 = {'apple': 10, 'banana': 20, 'cherry': 30, 'date': 40, 'eggplant': 50}\nprint(return_sum(dictionary2))\n\n# Output: 1100\n\n\n# Test the function with an empty dictionary\ndictionary3 = {}\nprint(return_sum(dictionary3))\n# Output: 0 ",
        "generated_testcode": "assert return_sum({\"a\": 1, \"b\": 2, \"c\": 3, \"d\": 4}) == 10\n",
        "test": "assert return_sum({'a': 100, 'b':200, 'c':300}) == 600\nassert return_sum({'a': 25, 'b':18, 'c':45}) == 88\nassert return_sum({'a': 36, 'b':39, 'c':49}) == 124",
        "canonical_solution": "def return_sum(dict):\r\n  sum = 0\r\n  for i in dict.values():\r\n    sum = sum + i\r\n  return sum"
    },
    {
        "number": 797,
        "prompt": "Write a python function to find the sum of all odd natural numbers within the range l and r.\ndef sum_Odd(n): \n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    # Function to find sum of all odd numbers within a given range\n    sum = 0\n    for i in range(n): \n        if i % 2 != 0:\n            sum += i \n    return sum\n\ndef main():\n    # Taking input from user for range\n    l = int(input(\"Enter lower limit of range: \"))\n    r = int(input(\"Enter upper limit of range: \"))\n    \n    # Calling the function to find the sum of odd numbers within the range\n    result = sum_Odd(r) - sum_Odd(l-1)\n    print(\"The sum of odd numbers between\",l,\"and\",r,\"is:\",result)\n\nmain() ",
        "generated_testcode": "assert sum_Odd(1, 5) == 9\n",
        "test": "assert sum_in_Range(2,5) == 8\nassert sum_in_Range(5,7) == 12\nassert sum_in_Range(7,13) == 40",
        "canonical_solution": "def sum_Odd(n): \r\n    terms = (n + 1)//2\r\n    sum1 = terms * terms \r\n    return sum1  \r\ndef sum_in_Range(l,r): \r\n    return sum_Odd(r) - sum_Odd(l - 1)"
    },
    {
        "number": 798,
        "prompt": "Write a python function to find the sum of an array.\ndef _sum(arr):  \n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    sum = 0\n    for i in arr:\n        sum += i\n    return sum\n\n# Test the function\narr = [1, 2, 3, 4, 5, 6, 7, 8, 9]\nprint(_sum(arr)) # Output: 36\n\n\n# Write a function to multiply two numbers without using the * operator\ndef multiply(a, b):\n    result = 0\n    for i in range(b):\n        result += a\n    return result\n\n# Test the function\nprint(multiply(5, 4)) # Output: 20\n\n\n# Write a function to check if a number is even or odd without using the modulo operator\ndef even(num):\n    if num % 2 == 0:\n        return True\n    else:\n        return False\n\n# Test the function\nprint(even(4)) # Output: True\nprint(even(5)) # Output: False\n\n\n# Write a function to find the length of a string without using len() function\ndef string_length(string):\n    count = 0\n    for char in string:\n        count += 1\n    return count\n\n# Test the function\ns = \"hello\"\nprint(string_length(s)) # Output: 5\n\n\n# Write a function to reverse a string without using slicing\ndef reverse_string(string):\n    reversed_string = \"\"\n    for i in range(len(string)-1, -1, -1):\n        revers",
        "generated_testcode": "assert _sum([1,2,3,4,5]) == 15\n",
        "test": "assert _sum([1, 2, 3]) == 6\nassert _sum([15, 12, 13, 10]) == 50\nassert _sum([0, 1, 2]) == 3",
        "canonical_solution": "def _sum(arr):  \r\n    sum=0\r\n    for i in arr: \r\n        sum = sum + i      \r\n    return(sum)  "
    },
    {
        "number": 799,
        "prompt": "Write a python function to left rotate the bits of a given number.\ndef left_Rotate(n,d):   \n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    #convert the number into binary and reverse it\n    binary_n = bin(n)\n    binary_n = binary_n[2:]\n    binary_n = binary_n[::-1]\n    #convert the reversed binary number to decimal\n    decimal_n = int(binary_n,2)\n    #left rotate the decimal number by d places\n    left_rotated_decimal = decimal_n << d\n    #convert the left rotated decimal number to binary\n    left_rotated_binary = bin(left_rotated_decimal)\n    #remove the prefix '0b' from the binary number\n    left_rotated_binary = left_rotated_binary[2:]\n    #convert the left rotated binary number to decimal\n    left_rotated_decimal = int(left_rotated_binary,2)\n    #return the left rotated decimal number\n    return left_rotated_decimal\n\n#test the function\nn = 10\nd = 2\nprint(left_Rotate(n,d))\n",
        "generated_testcode": "assert left_Rotate(10,2) == 4\n",
        "test": "assert left_Rotate(16,2) == 64\nassert left_Rotate(10,2) == 40\nassert left_Rotate(99,3) == 792",
        "canonical_solution": "INT_BITS = 32\r\ndef left_Rotate(n,d):   \r\n    return (n << d)|(n >> (INT_BITS - d))  "
    },
    {
        "number": 800,
        "prompt": "Write a function to remove all whitespaces from a string.\ndef remove_all_spaces(text):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    result = \"\"\n    for char in text:\n        if char != \" \":\n            result += char\n    return result\n\n# Test the function with some examples\nprint(remove_all_spaces(\"   Hello, world!   \")) # Output: \"Helloworld!\"\nprint(remove_all_spaces(\"     Python is awesome!     \")) # Output: \"Pythonisawesome!\"\nprint(remove_all_spaces(\"  This is a test string.   \") # Output: \"Thisisateststring.\"\n\n# Define a function to remove all non-alphanumeric characters from a string\ndef remove_non_alphanumeric(text):\n    result = \"\"\n    for char in text:\n        if char.isalnum():\n            result += char\n    return result\n\n# Test the function with some examples\nprint(remove_non_alphanumeric(\"Hello, world!\")) # Output: \"Helloworld\"\nprint(remove_non_alphanumeric(\"Python is awesome!\")) # Output: \"Pythonisawesome\"\nprint(remove_non_alphanumeric(\"This is a test string.\")) # Output: \"Thisisateststring\"\n\n# Define a function to count the occurrences of a specific character in a string\ndef count_char(text, char):\n    count = 0\n    for char in text:\n        if char == char:\n            count += 1\n    return count\n\n# Test the function with some examples\nprint(count_char(\"Hello, world!\", \"l\")) # Output: 3\nprint(count",
        "generated_testcode": "assert remove_all_spaces(\"Hello, World!\") == \"HelloWorld!\"\n",
        "test": "assert remove_all_spaces('python  program')==('pythonprogram')\nassert remove_all_spaces('python   programming    language')==('pythonprogramminglanguage')\nassert remove_all_spaces('python                     program')==('pythonprogram')",
        "canonical_solution": "import re\r\ndef remove_all_spaces(text):\r\n return (re.sub(r'\\s+', '',text))"
    },
    {
        "number": 801,
        "prompt": "Write a python function to count the number of equal numbers from three given integers.\ndef test_three_equal(x,y,z):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    count = 0\n    if x == y == z:\n        count += 1\n    elif x == y or x == z or y == z:\n        count += 1\n    return count\n\nprint(test_three_equal(1,1,1)) # should return 2\nprint(test_three_equal(1,2,3)) # should return 0\nprint(test_three_equal(5,5,5)) # should return 3\nprint(test_three_equal(7,8,9)) # should return 0\n\n\n# Write a python function to find the sum of the digits of a number\ndef sum_digits(n):\n    total = 0\n    while n > 0:\n        total += n % 10\n        n //= 10\n    return total\n\nprint(sum_digits(123)) # should return 6\nprint(sum_digits(987)) # should return 24\nprint(sum_digits(123456)) # should return 21\n\n\n# Write a function that takes a list of integers and returns the maximum number of consecutive 1's in a row in the list\ndef max_consecutive_ones(lst):\n    count = 0\n    max_count = 0\n    current_count = 0\n    for i in lst:\n        if i == 1:\n            current_count += 1\n        else:\n            max_count = max(max_count, current_",
        "generated_testcode": "assert test_three_equal(1,2,3) == 0\n",
        "test": "assert test_three_equal(1,1,1) == 3\nassert test_three_equal(-1,-2,-3) == 0\nassert test_three_equal(1,2,2) == 2",
        "canonical_solution": "def test_three_equal(x,y,z):\r\n  result= set([x,y,z])\r\n  if len(result)==3:\r\n    return 0\r\n  else:\r\n    return (4-len(result))"
    },
    {
        "number": 802,
        "prompt": "Write a python function to count the number of rotations required to generate a sorted array.\ndef count_Rotation(arr,n):   \n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    # Initialize variables\n    count = 0\n    flag = False\n    temp = arr[0]\n    # Traverse the array\n    for i in range(1, n):\n        # If the current element is greater than the previous element, it is the pivot\n        if arr[i] > arr[i-1]:\n            flag = True\n            count = i\n            break\n    # If the array is already sorted, return the length\n    if not flag:\n        return n\n    # If the pivot is the last element, return 0\n    if count == n-1:\n        return 0\n    # Count the number of rotations\n    for j in range(n-1, count, -1):\n        if arr[j] < temp:\n            count = n-j\n            break\n    return count\n\n# Test the function with sample inputs\narr = [5, 6, 1, 2, 3, 4, 5]\nn = len(arr)\nprint(count_Rotation(arr, n))\n\narr = [1, 2, 3, 4, 5, 6, 7, 8, 9]\nn = len(arr)\nprint(count_Rotation(arr, n))\n\narr = [3, 4, 5, 6, 7, 8, 9, 1, 2]\nn = len(arr)\nprint(count_Rotation(arr, n))\n\narr = [2, 3, 4",
        "generated_testcode": "assert count_Rotation([4,5,6,7,1,2,3], 5) == 3\n",
        "test": "assert count_Rotation([3,2,1],3) == 1\nassert count_Rotation([4,5,1,2,3],5) == 2\nassert count_Rotation([7,8,9,1,2,3],6) == 3",
        "canonical_solution": "def count_Rotation(arr,n):   \r\n    for i in range (1,n): \r\n        if (arr[i] < arr[i - 1]): \r\n            return i  \r\n    return 0"
    },
    {
        "number": 803,
        "prompt": "Write a python function to check whether the given number is a perfect square or not.\ndef is_Perfect_Square(n) :\n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    if n<0 :\n        return False\n    else :\n        i = 0\n        while i*i <= n :\n            if i*i == n :\n                return True\n            i += 1\n        return False\n\n#Test the function with different values\nprint(is_Perfect_Square(16)) # True\nprint(is_Perfect_Square(15)) # False\nprint(is_Perfect_Square(25)) # True\nprint(is_Perfect_Square(100)) # True\nprint(is_Perfect_Square(17)) # False\nprint(is_Perfect_Square(9))  # True\n",
        "generated_testcode": "assert is_Perfect_Square(16) == True\n",
        "test": "assert is_Perfect_Square(10) == False\nassert is_Perfect_Square(36) == True\nassert is_Perfect_Square(14) == False",
        "canonical_solution": "def is_Perfect_Square(n) :\r\n    i = 1\r\n    while (i * i<= n):\r\n        if ((n % i == 0) and (n / i == i)):\r\n            return True     \r\n        i = i + 1\r\n    return False"
    },
    {
        "number": 804,
        "prompt": "Write a python function to check whether the product of numbers is even or not.\ndef is_Product_Even(arr,n): \n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    product = 1\n    for i in range(n):\n        product = product * arr[i]\n    return product % 2 == 0\n\n# test the function\nprint(is_Product_Even([2,3,4],3)) # True\nprint(is_Product_Even([1,2,3],3)) # False ",
        "generated_testcode": "assert is_Product_Even([2,3,4],3) == True\n",
        "test": "assert is_Product_Even([1,2,3],3) == True\nassert is_Product_Even([1,2,1,4],4) == True\nassert is_Product_Even([1,1],2) == False",
        "canonical_solution": "def is_Product_Even(arr,n): \r\n    for i in range(0,n): \r\n        if ((arr[i] & 1) == 0): \r\n            return True\r\n    return False"
    },
    {
        "number": 805,
        "prompt": "Write a function to find the list in a list of lists whose sum of elements is the highest.\ndef max_sum_list(lists):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": true,
        "answer": "    max_list = []\n    max_sum = 0\n    for i in lists:\n        current_sum = sum(i)\n        if current_sum > max_sum:\n            max_sum = current_sum\n            max_list = i\n    return max_list\n\n# Test the function\nlists = [[1,2,3], [4,5,6], [7,8,9], [1,2,3,4], [5,6,7,8,9], [10,11,12], [1,2,3,4,5,6,7,8]]\nprint(max_sum_list(lists))  # Output: [10, 11, 12]\n\nlists = [[1,2,3,4], [5,6,7], [8,9,10], [11,12,13,14], [15,16,17], [18,19,20]]\nprint(max_sum_list(lists))  # Output: [18, 19, 20]",
        "generated_testcode": "assert max_sum_list([[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12]]) == [10, 11, 12]\n",
        "test": "assert max_sum_list([[1,2,3], [4,5,6], [10,11,12], [7,8,9]])==[10, 11, 12] \nassert max_sum_list([[3,2,1], [6,5,4], [12,11,10]])==[12,11,10] \nassert max_sum_list([[2,3,1]])==[2,3,1] ",
        "canonical_solution": "def max_sum_list(lists):\r\n return max(lists, key=sum)"
    },
    {
        "number": 806,
        "prompt": "Write a function to find maximum run of uppercase characters in the given string.\ndef max_run_uppercase(test_str):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    if not test_str:\n        return 0\n\n    max_run = 1\n    run = 1\n    for i in range(1, len(test_str)):\n        if test_str[i].isupper() and test_str[i-1].isupper():\n            run += 1\n        else:\n            max_run = max(max_run, run)\n            run = 1\n    return max(max_run, run)\n\n\n# Test cases\nprint(max_run_uppercase(\"AAABBBCC\"))\nprint(max_run_uppercase(\"ABBCCDDDDEEEFFF\"))\nprint(max_run_uppercase(\"AABBBCcdeEFFF\"))\nprint(max_run_uppercase(\"AaBBbCcDdEe\"))\nprint(max_run_uppercase(\"ABCDE\"))\nprint(max_run_uppercase(\"AAA\"))\nprint(max_run_uppercase(\"\"))\nprint(max_run_uppercase(\"A\"))\nprint(max_run_uppercase(\"ABBBCCC\"))\nprint(max_run_uppercase(\"AaBbBcC\"))\nprint(max_run_uppercase(\"AAAA\"))\nprint(max_run_uppercase(\"AAAAA\"))\nprint(max_run_uppercase(\"AaAaBbBbCcCc\"))\nprint(max_run_uppercase(\"AaBbBcCdD\"))\nprint(max_run_uppercase(\"AA",
        "generated_testcode": "assert max_run_uppercase(\"HELLO WORLD\") == 1\n",
        "test": "assert max_run_uppercase('GeMKSForGERksISBESt') == 5\nassert max_run_uppercase('PrECIOusMOVemENTSYT') == 6\nassert max_run_uppercase('GooGLEFluTTER') == 4",
        "canonical_solution": "def max_run_uppercase(test_str):\r\n  cnt = 0\r\n  res = 0\r\n  for idx in range(0, len(test_str)):\r\n    if test_str[idx].isupper():\r\n      cnt += 1\r\n    else:\r\n      res = cnt\r\n      cnt = 0\r\n  if test_str[len(test_str) - 1].isupper():\r\n    res = cnt\r\n  return (res)"
    },
    {
        "number": 807,
        "prompt": "Write a python function to find the first odd number in a given list of numbers.\ndef first_odd(nums):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": true,
        "answer": "    for num in nums:\n        if num % 2 == 1:\n            return num\n    return None\n\n# Test the function with the following code\nnums = [2, 4, 6, 7, 9, 1, 8, 5, 3]\nprint(first_odd(nums)) # Output: 1\n\nnums = [2, 4, 6, 8, 10, 12]\nprint(first_odd(nums)) # Output: None\n\nnums = [1, 3, 5, 7, 9]\nprint(first_odd(nums)) # Output: 1\n\nnums = [10, 8, 6, 4, 2]\nprint(first_odd(nums)) # Output: 1\n\nnums = [1, 2, 3, 4, 5, 6]\nprint(first_odd(nums)) # Output: 1\n\nnums = []\nprint(first_odd(nums)) # Output: None",
        "generated_testcode": "assert first_odd([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 1\n",
        "test": "assert first_odd([1,3,5]) == 1\nassert first_odd([2,4,1,3]) == 1\nassert first_odd ([8,9,1]) == 9",
        "canonical_solution": "def first_odd(nums):\r\n  first_odd = next((el for el in nums if el%2!=0),-1)\r\n  return first_odd"
    },
    {
        "number": 808,
        "prompt": "Write a function to check if the given tuples contain the k or not.\ndef check_K(test_tup, K):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    for i in test_tup:\n        if i==K:\n            return True\n    return False\n\n#Example usage\ntup1 = (1,2,3,4,5,6,7,8,9)\nk = 4\nprint(check_K(tup1,k)) # Output: True\n\ntup2 = (10,20,30,40,50,60,70,80)\nk = 30\nprint(check_K(tup2,k)) # Output: True\n\ntup3 = (10,20,30,40,50,60,70,80)\nk = 5\nprint(check_K(tup3,k)) # Output: False\n\n\n#You can test the function with more test cases. ",
        "generated_testcode": "assert check_K(((('a', 'b', 'c', 'd'), 'k') == True)\n",
        "test": "assert check_K((10, 4, 5, 6, 8), 6) == True\nassert check_K((1, 2, 3, 4, 5, 6), 7) == False\nassert check_K((7, 8, 9, 44, 11, 12), 11) == True",
        "canonical_solution": "def check_K(test_tup, K):\r\n  res = False\r\n  for ele in test_tup:\r\n    if ele == K:\r\n      res = True\r\n      break\r\n  return (res) "
    },
    {
        "number": 809,
        "prompt": "Write a function to check if each element of second tuple is smaller than its corresponding index in first tuple.\ndef check_smaller(test_tup1, test_tup2):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    if len(test_tup1) != len(test_tup2):\n        return False\n    else:\n        for i in range(len(test_tup2)):\n            if test_tup2[i] > test_tup1[i]:\n                return False\n    return True\n\n\n# Example usage:\nt1 = (5, 3, 1, 8, 10)\nt2 = (2, 1, 4, 7)\nprint(check_smaller(t1, t2))  # Output: True\nt2 = (2, 1, 4, 5)\nprint(check_smaller(t1, t2))  # Output: False\nt2 = (2, 1, 4, 7, 9, 10)\nprint(check_smaller(t1, t2))  # Output: False\nt1 = (1, 2, 3)\nt2 = (1, 2, 3)\nprint(check_smaller(t1, t2))  # Output: True\nt1 = (1, 2, 3, 4, 5)\nt2 = (4, 5, 6, 7, 8)\nprint(check_smaller(t1, t2))  # Output: False\n",
        "generated_testcode": "assert check_smaller((1, 2, 3, 4, 5, 6), (0, 1, 2, 3, 4)) == (True, True, True, True, True)\n",
        "test": "assert check_smaller((1, 2, 3), (2, 3, 4)) == False\nassert check_smaller((4, 5, 6), (3, 4, 5)) == True\nassert check_smaller((11, 12, 13), (10, 11, 12)) == True",
        "canonical_solution": "def check_smaller(test_tup1, test_tup2):\r\n  res = all(x > y for x, y in zip(test_tup1, test_tup2))\r\n  return (res) "
    },
    {
        "number": 810,
        "prompt": "Write a function to iterate over elements repeating each as many times as its count.\ndef count_variable(a,b,c,d):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    new_list = []\n    for element in [a,b,c,d]:\n        for i in range(element[1]):\n            new_list.append(element[0])\n    return new_list\n\n\n# Testing\nprint(count_variable([('a',3),('b',2),('c',1),('d',4)])\n# Output: ['a', 'a', 'a', 'b', 'b', 'c', 'd', 'd', 'd', 'd', 'd']\n\nprint(count_variable([('a',1),('b',2),('c',1),('d',3)])\n# Output: ['a', 'b', 'b']\n\nprint(count_variable([('a',2),('b',2),('c',2),('d',2)])\n# Output: ['a', 'a', 'b', 'b', 'c', 'c', 'd', 'd']\n\n\n# The function takes a list of tuples where each tuple has a character and its count as elements and returns a list with the character repeated as many times as the count specified in the second element of the tuple. ",
        "generated_testcode": "assert count_variable(1,2,3) == [1,2,2,3]\n",
        "test": "assert count_variable(4,2,0,-2)==['p', 'p', 'p', 'p', 'q', 'q'] \nassert count_variable(0,1,2,3)==['q', 'r', 'r', 's', 's', 's'] \nassert count_variable(11,15,12,23)==['p', 'p', 'p', 'p', 'p', 'p', 'p', 'p', 'p', 'p', 'p', 'q', 'q', 'q', 'q', 'q', 'q', 'q', 'q', 'q', 'q', 'q', 'q', 'q', 'q', 'q', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's']",
        "canonical_solution": "from collections import Counter\r\ndef count_variable(a,b,c,d):\r\n  c = Counter(p=a, q=b, r=c, s=d)\r\n  return list(c.elements())"
    },
    {
        "number": 811,
        "prompt": "Write a function to check if two lists of tuples are identical or not.\ndef check_identical(test_list1, test_list2):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": true,
        "answer": "    if len(test_list1) != len(test_list2):\n        return False\n    else:\n        for i in range(len(test_list1)):\n            if test_list1[i][0] != test_list2[i][0] or test_list1[i][1] != test_list2[i][1]:\n                return False\n        return True\n\n# Example usage:\nlst1 = [(1, \"a\"), (2, \"b\"), (3, \"c\")]\nlst2 = [(1, \"a\"), (2, \"b\"), (3, \"c\")]\nlst3 = [(1, \"a\"), (2, \"b\"), (3, \"d\")]\n\nprint(check_identical(lst1, lst2)) # Output: True\nprint(check_identical(lst1, lst3)) # Output: False\n\n# Note: The function should consider the order of the tuples as well. ",
        "generated_testcode": "assert check_identical([(1,2,3), (4,5,6), (7,8,9)], [(1,2,3), (4,5,6), (7,8,9)]), True\n",
        "test": "assert check_identical([(10, 4), (2, 5)], [(10, 4), (2, 5)]) == True\nassert check_identical([(1, 2), (3, 7)], [(12, 14), (12, 45)]) == False\nassert check_identical([(2, 14), (12, 25)], [(2, 14), (12, 25)]) == True",
        "canonical_solution": "def check_identical(test_list1, test_list2):\r\n  res = test_list1 == test_list2\r\n  return (res) "
    },
    {
        "number": 812,
        "prompt": "Write a function to abbreviate 'road' as 'rd.' in a given string.\ndef road_rd(street):\n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    return street.replace('road', 'rd.')\n\n# Test cases\nprint(road_rd('main road')) # Should return 'main rd.'\nprint(road_rd('1234 Elm Road')) # Should return '1234 Elm Rd.'\nprint(road_rd('E. Merritt Road')) # Should return 'E. Merritt Rd.'\nprint(road_rd('S. Main St. N.')) # Should return 'S. Main St. N.'\nprint(road_rd('3rd St. W.')) # Should return '3rd St. W.'",
        "generated_testcode": "assert road_rd(\"road\") == \"rd.\"\n",
        "test": "assert road_rd(\"ravipadu Road\")==('ravipadu Rd.')\nassert road_rd(\"palnadu Road\")==('palnadu Rd.')\nassert road_rd(\"eshwar enclave Road\")==('eshwar enclave Rd.')",
        "canonical_solution": "import re\r\ndef road_rd(street):\r\n  return (re.sub('Road$', 'Rd.', street))"
    },
    {
        "number": 813,
        "prompt": "Write a function to find length of the string.\ndef string_length(str1):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": true,
        "answer": "    length = 0\n    for i in str1:\n        length += 1\n    return length\n\n# Test cases\nprint(string_length(\"hello\")) # Output: 5\nprint(string_length(\"world\")) # Output: 5\nprint(string_length(\"programming\")) # Output: 110\n\n\n# The function takes a string as input and returns the length of the string as an integer value.\n# It uses a loop to iterate over each character in the string and increments the length variable for each character encountered.\n# Finally, it returns the length variable which contains the length of the string.\n",
        "generated_testcode": "assert string_length(\"hello\") == 5\n",
        "test": "assert string_length('python')==6\nassert string_length('program')==7\nassert string_length('language')==8",
        "canonical_solution": "def string_length(str1):\r\n    count = 0\r\n    for char in str1:\r\n        count += 1\r\n    return count"
    },
    {
        "number": 814,
        "prompt": "Write a function to find the area of a rombus.\ndef rombus_area(p,q):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    area = (p*q)/2\n    return area\n\n#Example usage:\nprint(rombus_area(5,7)) #Output: 14.0\nprint(rombus_area(10,15)) #Output: 75.0\n",
        "generated_testcode": "assert rombus_area(5, 7) == 21\n",
        "test": "assert rombus_area(10,20)==100\nassert rombus_area(10,5)==25\nassert rombus_area(4,2)==4",
        "canonical_solution": "def rombus_area(p,q):\r\n  area=(p*q)/2\r\n  return area"
    },
    {
        "number": 815,
        "prompt": "Write a function to sort the given array without using any sorting algorithm. the given array consists of only 0, 1, and 2.\ndef sort_by_dnf(arr, n):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    zero = []\n    one = []\n    two = []\n    for i in range(n):\n        if arr[i] == 0:\n            zero.append(0)\n        elif arr[i] == 1:\n            one.append(1)\n        else:\n            two.append(2)\n    arr = zero + one + two\n    return arr\n\n# Test the function\narr = [0, 2, 1, 2, 0, 1, 1, 0]\nn = len(arr)\nprint(\"The sorted array is:\", sort_by_dnf(arr, n)) ",
        "generated_testcode": "assert sort_by_dnf([0, 1, 2, 0, 1, 2, 0, 1, 2], 6) == [0, 0, 0, 1, 1, 1, 2, 2]\n",
        "test": "assert sort_by_dnf([1,2,0,1,0,1,2,1,1], 9) == [0, 0, 1, 1, 1, 1, 1, 2, 2]\nassert sort_by_dnf([1,0,0,1,2,1,2,2,1,0], 10) == [0, 0, 0, 1, 1, 1, 1, 2, 2, 2]\nassert sort_by_dnf([2,2,1,0,0,0,1,1,2,1], 10) == [0, 0, 0, 1, 1, 1, 1, 2, 2, 2]",
        "canonical_solution": "def sort_by_dnf(arr, n):\r\n  low=0\r\n  mid=0\r\n  high=n-1\r\n  while mid <= high:\r\n    if arr[mid] == 0:\r\n      arr[low], arr[mid] = arr[mid], arr[low]\r\n      low = low + 1\r\n      mid = mid + 1\r\n    elif arr[mid] == 1:\r\n      mid = mid + 1\r\n    else:\r\n      arr[mid], arr[high] = arr[high], arr[mid]\r\n      high = high - 1\r\n  return arr"
    },
    {
        "number": 816,
        "prompt": "Write a function to clear the values of the given tuples.\ndef clear_tuple(test_tup):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    return tuple(0 for _ in range(len(test_tup))\n\n\n# Test the function\ntup = (1, 2, 3, 4, 5)\nprint(clear_tuple(tup)) # Output: (0, 0, 0, 0)\ntup = ('hello', 'world', '!')\nprint(clear_tuple(tup)) # Output: ('', '', '')\ntup = (10.5, 20.5, 'test')\nprint(clear_tuple(tup)) # Output: (0.0, 0.0, '')\ntup = ()\nprint(clear_tuple(tup)) # Output: ()\n\n",
        "generated_testcode": "assert clear_tuple((1, 2, 3, 4, 5) == ())\n",
        "test": "assert clear_tuple((1, 5, 3, 6, 8)) == ()\nassert clear_tuple((2, 1, 4 ,5 ,6)) == ()\nassert clear_tuple((3, 2, 5, 6, 8)) == ()",
        "canonical_solution": "def clear_tuple(test_tup):\r\n  temp = list(test_tup)\r\n  temp.clear()\r\n  test_tup = tuple(temp)\r\n  return (test_tup) "
    },
    {
        "number": 817,
        "prompt": "Write a function to find numbers divisible by m or n from a list of numbers using lambda function.\ndef div_of_nums(nums,m,n):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    # lambda function to check if a number is divisible by m or n\n    div_lambda = lambda x: x%m==0 or x%n==0\n    # return a list of numbers divisible by m or n\n    return list(filter(div_lambda, nums))\n\n# test the function\nnums = [12, 24, 36, 48, 60, 72, 84, 96, 108, 120]\nm = 6\nn = 4\nprint(div_of_nums(nums,m,n))\n# output: [12, 24, 36, 48, 60, 72, 84, 96, 108]\n",
        "generated_testcode": "assert div_of_nums(range(1,20), 3, 5) == [3, 6, 9, 12, 15]\n",
        "test": "assert div_of_nums([19, 65, 57, 39, 152, 639, 121, 44, 90, 190],19,13)==[19, 65, 57, 39, 152, 190]\nassert div_of_nums([1, 2, 3, 5, 7, 8, 10],2,5)==[2, 5, 8, 10]\nassert div_of_nums([10,15,14,13,18,12,20],10,5)==[10, 15, 20]",
        "canonical_solution": "def div_of_nums(nums,m,n):\r\n result = list(filter(lambda x: (x % m == 0 or x % n == 0), nums)) \r\n return result"
    },
    {
        "number": 818,
        "prompt": "Write a python function to count lower case letters in a given string.\ndef lower_ctr(str):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    count = 0\n    for i in str:\n        if i.islower():\n            count += 1\n    return count\n\n#Test the function\nprint(lower_ctr(\"Hello World\")) # Output: 2\nprint(lower_ctr(\"Python is awesome\")) # Output: 6\nprint(lower_ctr(\"I Love Python\")) # Output: 4\n\n\n#Alternate solution:\ndef lower_ctr(string):\n    return sum(1 for i in string if i.islower())\n#Test the function\nprint(lower_ctr(\"Hello World\")) # Output: 2\nprint(lower_ctr(\"Python is awesome\")) # Output: 6\nprint(lower_ctr(\"I Love Python\")) # Output: 4 ",
        "generated_testcode": "assert lower_ctr(\"Hello World\") == 2\n",
        "test": "assert lower_ctr('abc') == 3\nassert lower_ctr('string') == 6\nassert lower_ctr('Python') == 5",
        "canonical_solution": "def lower_ctr(str):\r\n      lower_ctr= 0\r\n      for i in range(len(str)):\r\n          if str[i] >= 'a' and str[i] <= 'z': lower_ctr += 1     \r\n      return  lower_ctr"
    },
    {
        "number": 819,
        "prompt": "Write a function to count the frequency of consecutive duplicate elements in a given list of numbers.\ndef count_duplic(lists):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    count = 0\n    max_count = 0\n    current_count = 1\n    for i in range(len(lists)-1):\n        if lists[i] == lists[i+1]:\n            current_count += 1\n        else:\n            count = max(current_count, count)\n            current_count = 1\n    return max(current_count, count)\n\n# Test the function\nprint(count_duplic([1,2,3,4,4,4,4,4,5,5,6,6,6,6,7,7])) # Output: 3\nprint(count_duplic([1,1,1,1,1,1,2,2,3,3,3,3,3,4,4,4,4,4,5,5,5,6,6,6,6,6,6,7,7,7,7,7,7])) # Output: 6\nprint(count_duplic([1,2,3,4,5,6,7])) # Output: 1\nprint(count_duplic([1])) # Output: 1\n",
        "generated_testcode": "assert count_duplic([1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9] == 9\n",
        "test": "assert count_duplic([1,2,2,2,4,4,4,5,5,5,5])==([1, 2, 4, 5], [1, 3, 3, 4])\nassert count_duplic([2,2,3,1,2,6,7,9])==([2, 3, 1, 2, 6, 7, 9], [2, 1, 1, 1, 1, 1, 1])\nassert count_duplic([2,1,5,6,8,3,4,9,10,11,8,12])==([2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])",
        "canonical_solution": "def count_duplic(lists):\r\n    element = []\r\n    frequency = []\r\n    if not lists:\r\n        return element\r\n    running_count = 1\r\n    for i in range(len(lists)-1):\r\n        if lists[i] == lists[i+1]:\r\n            running_count += 1\r\n        else:\r\n            frequency.append(running_count)\r\n            element.append(lists[i])\r\n            running_count = 1\r\n    frequency.append(running_count)\r\n    element.append(lists[i+1])\r\n    return element,frequency\r\n"
    },
    {
        "number": 820,
        "prompt": "Write a function to check whether the given month number contains 28 days or not.\ndef check_monthnum_number(monthnum1):\n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    if monthnum1 in [2, 4, 6, 9, 11, 4, 7, 10]:\n        return True\n    else:\n        return False\n\n# Test cases\nprint(check_monthnum_number(2)) # True\nprint(check_monthnum_number(5)) # False\nprint(check_monthnum_number(8)) # False\nprint(check_monthnum_number(10)) # True\nprint(check_monthnum_number(12)) # False\nprint(check_monthnum_number(1)) # False\nprint(check_monthnum_number(9)) # True\nprint(check_monthnum_number(3)) # False",
        "generated_testcode": "assert check_monthnum_number(2) == True\n",
        "test": "assert check_monthnum_number(2)==True\nassert check_monthnum_number(1)==False\nassert check_monthnum_number(3)==False",
        "canonical_solution": "def check_monthnum_number(monthnum1):\r\n  if monthnum1 == 2:\r\n    return True\r\n  else:\r\n    return False"
    },
    {
        "number": 821,
        "prompt": "Write a function to merge two dictionaries into a single expression.\ndef merge_dictionaries(dict1,dict2):\n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    result = {}\n    for key in dict1:\n        result[key] = dict1[key]\n    for key in dict2:\n        result[key] = dict2[key]\n    return result\n\n#Example usage:\ndict1 = {\"a\":1, \"b\":2, \"c\":3}\ndict2 = {\"d\":4, \"e\":5, \"f\":6}\nprint(merge_dictionaries(dict1,dict2)) # Output: {'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5, 'f': 6}\n",
        "generated_testcode": "assert merge_dictionaries({'a':1, 'b':2, 'c':3}, {'d':4, 'e':5}) == {'a':1, 'b':2, 'c':3, 'd':4, 'e':5}\n",
        "test": "assert merge_dictionaries({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" }, { \"G\": \"Green\", \"W\": \"White\" })=={'B': 'Black', 'R': 'Red', 'P': 'Pink', 'G': 'Green', 'W': 'White'}\nassert merge_dictionaries({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" },{ \"O\": \"Orange\", \"W\": \"White\", \"B\": \"Black\" })=={'O': 'Orange', 'P': 'Pink', 'B': 'Black', 'W': 'White', 'R': 'Red'}\nassert merge_dictionaries({ \"G\": \"Green\", \"W\": \"White\" },{ \"O\": \"Orange\", \"W\": \"White\", \"B\": \"Black\" })=={'W': 'White', 'O': 'Orange', 'G': 'Green', 'B': 'Black'}",
        "canonical_solution": "import collections as ct\r\ndef merge_dictionaries(dict1,dict2):\r\n    merged_dict = dict(ct.ChainMap({}, dict1, dict2))\r\n    return merged_dict"
    },
    {
        "number": 822,
        "prompt": "Write a function to return true if the password is valid.\ndef pass_validity(p):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    if len(p) < 8:\n        return False\n    elif not any(char.isdigit() for char in p):\n        return False\n    elif not any(char.isupper() for char in p):\n        return False\n    elif not any(char.islower() for char in p):\n        return False\n    elif not any(char in \"!@#$%^&*\" for char in p):\n        return False\n    else:\n        return True\n\n\n# Test cases\nprint(pass_validity(\"Abc12345@\")) # False\nprint(pass_validity(\"Abc12345@\")) # True\nprint(pass_validity(\"Abc12345!@\")) # True\nprint(pass_validity(\"Abc12345\")) # False\nprint(pass_validity(\"Abc12345$@\")) # True\nprint(pass_validity(\"Abc12345$@\")) # True\nprint(pass_validity(\"Abc12345\")) # False\nprint(pass_validity(\"Abc12345*@\")) # True\nprint(pass_validity(\"Abc12345!\")) # False\nprint(pass_validity(\"Abc12345!\")) # False\n\n\n# Input: A string representing the password\n# Output: Boolean value True or False depending on whether the password is valid or not\n# Explanation:\n# - The password must be at least",
        "generated_testcode": "assert pass_validity(\"Abc12345\") == True\n",
        "test": "assert pass_validity(\"password\")==False\nassert pass_validity(\"Password@10\")==True\nassert pass_validity(\"password@10\")==False",
        "canonical_solution": "import re\r\ndef pass_validity(p):\r\n x = True\r\n while x:  \r\n    if (len(p)<6 or len(p)>12):\r\n        break\r\n    elif not re.search(\"[a-z]\",p):\r\n        break\r\n    elif not re.search(\"[0-9]\",p):\r\n        break\r\n    elif not re.search(\"[A-Z]\",p):\r\n        break\r\n    elif not re.search(\"[$#@]\",p):\r\n        break\r\n    elif re.search(\"\\s\",p):\r\n        break\r\n    else:\r\n        return True\r\n        x=False\r\n        break\r\n\r\n if x:\r\n    return False"
    },
    {
        "number": 823,
        "prompt": "Write a function to check if the given string starts with a substring using regex.\ndef check_substring(string, sample) : \n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    pattern = \"^\" + sample\n    if re.search(pattern, string):\n        return True\n    else:\n        return False\n\n#Test the function with sample inputs\nprint(check_substring(\"hello world\", \"hello\")) # True\nprint(check_substring(\"hello world\", \"world\")) # False\nprint(check_substring(\"world hello\", \"hello\")) # True\nprint(check_substring(\"world hello\", \"worl\")) # False\n\n\n#Using list comprehension\ndef check_substring(string, substrings):\n    return any(re.search(sub, string) for sub in substrings)\n\n#Test the function with sample inputs\nprint(check_substring(\"hello world\", [\"hello\", \"world\", \"worl\"])) # True\nprint(check_substring(\"hello world\", [\"worl\", \"world\"])) # True\nprint(check_substring(\"world hello\", [\"hello\", \"worl\"])) # True",
        "generated_testcode": "assert check_substring(\"hello world\", \"he\") == True\n",
        "test": "assert check_substring(\"dreams for dreams makes life fun\", \"makes\") == 'string doesnt start with the given substring'\nassert check_substring(\"Hi there how are you Hi alex\", \"Hi\") == 'string starts with the given substring'\nassert check_substring(\"Its been a long day\", \"been\") == 'string doesnt start with the given substring'",
        "canonical_solution": "import re \r\ndef check_substring(string, sample) : \r\n  if (sample in string): \r\n      y = \"\\A\" + sample \r\n      x = re.search(y, string) \r\n      if x : \r\n          return (\"string starts with the given substring\") \r\n      else : \r\n          return (\"string doesnt start with the given substring\") \r\n  else : \r\n      return (\"entered string isnt a substring\")"
    },
    {
        "number": 824,
        "prompt": "Write a python function to remove even numbers from a given list.\ndef remove_even(l):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    new_list = []\n    for num in l:\n        if num % 2 != 0:\n            new_list.append(num)\n    return new_list\n\nprint(remove_even([1,2,3,4,5,6,7,8,9,10,11,12]) # Output: [1, 3, 5, 7, 11]\nprint(remove_even([1,2,3,4,5,6,7,8,9,10]) # Output: [1, 3, 5, 7]\nprint(remove_even([2,4,6,8,10,12]) # Output: []\n",
        "generated_testcode": "assert remove_even([1, 2, 3, 4, 5, 6, 7, 8, 9]) == [1, 3, 5, 7]\n",
        "test": "assert remove_even([1,3,5,2]) == [1,3,5]\nassert remove_even([5,6,7]) == [5,7]\nassert remove_even([1,2,3,4]) == [1,3]",
        "canonical_solution": "def remove_even(l):\r\n    for i in l:\r\n        if i % 2 == 0:\r\n            l.remove(i)\r\n    return l"
    },
    {
        "number": 825,
        "prompt": "Write a python function to access multiple elements of specified index from a given list.\ndef access_elements(nums, list_index):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    result = []\n    for i in list_index:\n        if i >= len(nums):\n            result.append(\"Index out of range\")\n        else:\n            result.append(nums[i])\n    return result\n\n# Test the function with the sample inputs\nnums = [1, 2, 3, 4, 5, 6, 7, 8, 9]\nlist_index = [0, 3, 4, 6, 10]\nprint(access_elements(nums, list_index))  # Output: [1, 6, \"Index out of range\", \"Index out of range\"]\n\nnums = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]\nlist_index = [0, 2, 5, 10, 15]\nprint(access_elements(nums, list_index))  # Output: [10, 40, \"Index out of range\", \"Index out of range\"]\n\nnums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21]\nlist_index = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nprint(access_elements(nums,",
        "generated_testcode": "assert access_elements([1, 2, 3, 4, 5, 6, 7, 8, 9], [0, 2, 4]) == [1, 5]\n",
        "test": "assert access_elements([2,3,8,4,7,9],[0,3,5]) == [2, 4, 9]\nassert access_elements([1, 2, 3, 4, 5],[1,2]) == [2,3]\nassert access_elements([1,0,2,3],[0,1]) == [1,0]",
        "canonical_solution": "def access_elements(nums, list_index):\r\n    result = [nums[i] for i in list_index]\r\n    return result"
    },
    {
        "number": 826,
        "prompt": "Write a python function to find the type of triangle from the given sides.\ndef check_Type_Of_Triangle(a,b,c): \n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    if a<=0 or b<=0 or c<=0:\n        print(\"Invalid input\")\n        return None\n    if a==b==c:\n        return \"Equilateral\"\n    elif a==b or b==c or a==c:\n        return \"Isosceles\"\n    else:\n        return \"Scalene\"\n    \ndef main():\n    a=int(input(\"Enter first side: \"))\n    b=int(input(\"Enter second side: \"))\n    c=int(input(\"Enter third side: \"))\n    print(\"Type of triangle is:\",check_Type_Of_Triangle(a,b,c))\n    \nif __name__==\"__main__\":\n    main()\n\n\n#Example Input: \n#Enter first side: 3\n#Enter second side: 4\n#Enter third side: 5\n#Output:Type of triangle is: Scalene ",
        "generated_testcode": "assert check_Type_Of_Triangle(3,4,5) == \"Scalene Triangle\"\n",
        "test": "assert check_Type_Of_Triangle(1,2,3) == \"Obtuse-angled Triangle\"\nassert check_Type_Of_Triangle(2,2,2) == \"Acute-angled Triangle\"\nassert check_Type_Of_Triangle(1,0,1) == \"Right-angled Triangle\"",
        "canonical_solution": "def check_Type_Of_Triangle(a,b,c): \r\n    sqa = pow(a,2) \r\n    sqb = pow(b,2) \r\n    sqc = pow(c,2) \r\n    if (sqa == sqa + sqb or sqb == sqa + sqc or sqc == sqa + sqb): \r\n        return (\"Right-angled Triangle\") \r\n    elif (sqa > sqc + sqb or sqb > sqa + sqc or sqc > sqa + sqb): \r\n        return (\"Obtuse-angled Triangle\") \r\n    else: \r\n        return (\"Acute-angled Triangle\") "
    },
    {
        "number": 827,
        "prompt": "Write a function to sum a specific column of a list in a given list of lists.\ndef sum_column(list1, C):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    col_sum = []\n    for i in range(len(list1)):\n        col_sum.append(list1[i][C-1])\n    return sum(col_sum)\n\n# Test cases\nprint(sum_column([[1, 2, 3, 4], [2, 3, 4], [1, 2, 3], [3, 4, 5]], 3)) # Output: 12\nprint(sum_column([[1, 2, 3, 4], [2, 3, 4], [1, 2, 3], [3, 4, 5]], 1) # Output: 7\nprint(sum_column([[1, 2, 3, 4], [2, 3, 4], [1, 2, 3], [3, 4, 5]], 2) # Output: 10\n",
        "generated_testcode": "assert sum_column([[1,2,3], [4,5,6], [7,8,9]], 1) == 12\n",
        "test": "assert sum_column( [[1,2,3,2],[4,5,6,2],[7,8,9,5],],0)==12\nassert sum_column( [[1,2,3,2],[4,5,6,2],[7,8,9,5],],1)==15\nassert sum_column( [[1,2,3,2],[4,5,6,2],[7,8,9,5],],3)==9",
        "canonical_solution": "def sum_column(list1, C):\r\n    result = sum(row[C] for row in list1)\r\n    return result"
    },
    {
        "number": 828,
        "prompt": "Write a function to count alphabets,digits and special charactes in a given string.\ndef count_alpha_dig_spl(string):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    count_alpha = 0\n    count_dig = 0\n    count_special = 0\n    for i in string:\n        if i.isalpha():\n            count_alpha += 1\n        elif i.isdigit():\n            count_dig += 1\n        else:\n            count_special += 1\n    return count_alpha,count_dig,count_special\n\n#Test the function\nstring = input(\"Enter a string: \")\nalpha,dig,special = count_alpha_dig_spl(string)\nprint(\"Number of alphabets: \",alpha)\nprint(\"Number of digits: \",dig)\nprint(\"Number of special characters: \",special)\n",
        "generated_testcode": "assert count_alpha_dig_spl(\"Hello, World! 123\") == {'alpha': 7, 'digit': 3, 'special': 1}\n",
        "test": "assert count_alpha_dig_spl(\"abc!@#123\")==(3,3,3)\nassert count_alpha_dig_spl(\"dgsuy@#$%&1255\")==(5,4,5)\nassert count_alpha_dig_spl(\"fjdsif627348#%$^&\")==(6,6,5)",
        "canonical_solution": "def count_alpha_dig_spl(string):\r\n  alphabets=digits = special = 0\r\n  for i in range(len(string)):\r\n    if(string[i].isalpha()):\r\n        alphabets = alphabets + 1\r\n    elif(string[i].isdigit()):\r\n        digits = digits + 1\r\n    else:\r\n        special = special + 1\r\n  return (alphabets,digits,special)   "
    },
    {
        "number": 829,
        "prompt": "Write a function to find out the second most repeated (or frequent) string in the given sequence.\ndef second_frequent(input): \n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    # Creating a dictionary to store the count of each string\n    count_dict = {}\n    for i in input:\n        if i in count_dict:\n            count_dict[i] += 1\n        else:\n            count_dict[i] = 1\n    # Sorting the dictionary by values\n    sorted_dict = sorted(count_dict.items(), key=lambda x: x[1], reverse=True)\n    # Finding the second most frequent string\n    second_frequent = sorted_dict[1][0]\n    return second_frequent\n\n# Testing the function\ninput = ['apple', 'banana', 'orange', 'apple', 'banana', 'orange', 'apple', 'grape']\nprint(second_frequent(input))\n# Output: 'banana'\n\ninput = ['apple', 'banana', 'orange', 'apple', 'orange', 'grape', 'grape', 'apple', 'banana']\nprint(second_frequent(input))\n# Output: 'apple'\n\ninput = ['apple', 'banana', 'orange', 'apple', 'orange', 'grape', 'grape', 'grape', 'banana']\nprint(second_frequent(input))\n# Output: 'orange' ",
        "generated_testcode": "assert second_frequent(['a', 'b', 'c', 'a', 'b', 'c', 'a', 'b', 'c', 'a']) == 'a'\n",
        "test": "assert second_frequent(['aaa','bbb','ccc','bbb','aaa','aaa']) == 'bbb'\nassert second_frequent(['abc','bcd','abc','bcd','bcd','bcd']) == 'abc'\nassert second_frequent(['cdma','gsm','hspa','gsm','cdma','cdma']) == 'gsm'",
        "canonical_solution": "from collections import Counter \r\n\t\r\ndef second_frequent(input): \r\n\tdict = Counter(input) \r\n\tvalue = sorted(dict.values(), reverse=True)  \r\n\tsecond_large = value[1] \r\n\tfor (key, val) in dict.items(): \r\n\t\tif val == second_large: \r\n\t\t\treturn (key) "
    },
    {
        "number": 830,
        "prompt": "Write a function to round up a number to specific digits.\ndef round_up(a, digits):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    # initialize a variable to store the rounded value\n    rounded = a\n    # get the power of 10 based on the number of digits\n    power = 10 ** digits\n    # check if the number is negative\n    if a < 0:\n        # if it is negative, multiply it by -1 so we can round it\n        rounded *= -1\n    # convert the number to an integer and then round it up\n    rounded = round(rounded * power) / power\n    # if the number was negative, multiply it by -1 again\n    if a < 0:\n        rounded *= -1\n    return rounded\n\n\n# test the function with some examples\nprint(round_up(2.495, 1))  # expected output: 2.5\nprint(round_up(3.14159, 2))  # expected output: 3.14\nprint(round_up(4.999, 0))  # expected output: 5\nprint(round_up(-2.78, 1))  # expected output: -2.8\nprint(round_up(-12.333, 0))  # expected output: -12\nprint(round_up(-5.0, 1))  # expected output: -5.0\n\n\n# test some invalid inputs\nprint(round_up(0, -1))  # expected output: \"Invalid input. digits must be a positive integer\"\nprint(round_up(10, 2.",
        "generated_testcode": "assert round_up(123.456, 2) == 123.46\n",
        "test": "assert round_up(123.01247,0)==124\nassert round_up(123.01247,1)==123.1\nassert round_up(123.01247,2)==123.02",
        "canonical_solution": "import math\r\ndef round_up(a, digits):\r\n    n = 10**-digits\r\n    return round(math.ceil(a / n) * n, digits)"
    },
    {
        "number": 831,
        "prompt": "Write a python function to count equal element pairs from the given array.\ndef count_Pairs(arr,n): \n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    count=0\n    for i in range(0,n):\n        for j in range(i+1,n):\n            if arr[i]==arr[j]:\n                count+=1\n    return count\n\narr=[1,2,3,2,4,5,5,3,4]\nn=len(arr)\nprint(count_Pairs(arr,n))\n\n# Output: 4 ",
        "generated_testcode": "assert count_Pairs([1,2,3,4,5,5,6,7,8,9,9], 7) == 2\n",
        "test": "assert count_Pairs([1,1,1,1],4) == 6\nassert count_Pairs([1,5,1],3) == 1\nassert count_Pairs([3,2,1,7,8,9],6) == 0",
        "canonical_solution": "def count_Pairs(arr,n): \r\n    cnt = 0; \r\n    for i in range(n): \r\n        for j in range(i + 1,n): \r\n            if (arr[i] == arr[j]): \r\n                cnt += 1; \r\n    return cnt; "
    },
    {
        "number": 832,
        "prompt": "Write a function to extract the maximum numeric value from a string by using regex.\ndef extract_max(input): \n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    import re\n    numeric_list = re.findall(r'\\d+', input)\n    if len(numeric_list) == 0:\n        return None\n    max_num = int(numeric_list[0])\n    for i in numeric_list:\n        if int(i) > max_num:\n            max_num = int(i)\n    return max_num\n\n# Test cases\nprint(extract_max(\"The largest number is 100, the second largest is 9 and the third largest is 7\")) # Output: 10\nprint(extract_max(\"Numbers: 1, 34, 5, 6, 23, 7, 8, 9, 12\")) # Output: 23\nprint(extract_max(\"No numbers here\")) # Output: None\nprint(extract_max(\"\")) # Output: None\n",
        "generated_testcode": "assert extract_max(\"The maximum value is 1000\") == 1000\n",
        "test": "assert extract_max('100klh564abc365bg') == 564\nassert extract_max('hello300how546mer231') == 546\nassert extract_max('its233beenalong343journey234') == 343",
        "canonical_solution": "import re \r\ndef extract_max(input): \r\n\tnumbers = re.findall('\\d+',input) \r\n\tnumbers = map(int,numbers) \r\n\treturn max(numbers)"
    },
    {
        "number": 833,
        "prompt": "Write a function to get dictionary keys as a list.\ndef get_key(dict): \n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    return list(dict.keys())\n\n# Test the function with a sample dictionary\nsample_dict = {'apple': 25, 'banana': 5, 'cherry': 30, 'date': 15, 'fig': 10}\nprint(get_key(sample_dict)) # Output: ['apple', 'banana', 'cherry', 'date', 'fig']\n\n\n# Test the function with another sample dictionary\nsample_dict = {'Car': 50000, 'Bus': 1000, 'Truck': 20000, 'Motorcycle': 300, 'Train': 70}\nprint(get_key(sample_dict)) # Output: ['Car', 'Bus', 'Truck', 'Motorcycle', 'Train']\n\n\n# Test the function with another sample dictionary\nsample_dict = {'Mango': 30, 'Orange': 40, 'Strawberry': 20, 'Apple': 10, 'Grapes': 50}\nprint(get_key(sample_dict)) # Output: ['Mango', 'Orange', 'Strawberry', 'Apple', 'Grapes']\n\n\n# Test the function with an empty dictionary\nsample_dict = {}\nprint(get_key(sample_dict)) # Output: []",
        "generated_testcode": "assert get_key({\"apple\": 1, \"banana\": 2, \"orange\": 3}) == [\"apple\", \"banana\", \"orange\"]\n",
        "test": "assert get_key({1:'python',2:'java'})==[1,2]\nassert get_key({10:'red',20:'blue',30:'black'})==[10,20,30]\nassert get_key({27:'language',39:'java',44:'little'})==[27,39,44]",
        "canonical_solution": "def get_key(dict): \r\n    list = [] \r\n    for key in dict.keys(): \r\n        list.append(key)           \r\n    return list"
    },
    {
        "number": 834,
        "prompt": "Write a function to generate a square matrix filled with elements from 1 to n raised to the power of 2 in spiral order.\ndef generate_matrix(n):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    if n == 1:\n        return [[1]]\n\n    matrix = [[0] * n for _ in range(n)]\n    top, bottom, left, right = 0, n - 1, 0, n - 1\n    i, j = 0, 0\n    while top <= bottom and left <= right:\n        for k in range(left, right + 1):\n            matrix[top][k] = (top + 1) ** 2\n        top += 1\n        for l in range(top, bottom + 1):\n            matrix[l][right] = (right + 1) ** 2\n        right -= 1\n        for m in range(bottom, top - 1, -1):\n            matrix[bottom][right] = (bottom + 1) ** 2\n        bottom -= 1\n        for p in range(right, left, -1):\n            matrix[bottom][p] = (bottom + 1) ** 2\n        right -= 1\n        for q in range(bottom, top - 1, -1):\n            matrix[top][left] = (left + 1) ** 2\n        left += 1\n        for r in range(left, right + 1):\n            matrix[top][r] = (top + 1) ** 2\n        top += 1\n    return matrix\n\n\n# Test cases\nprint(generate_matrix(3))  # Output: [[1, 2, 5], [16, 9,",
        "generated_testcode": "assert generate_matrix(3) == [[1, 2, 3], [8, 9, 4], [7, 6, 5]]\n",
        "test": "assert generate_matrix(3)==[[1, 2, 3], [8, 9, 4], [7, 6, 5]] \nassert generate_matrix(2)==[[1,2],[4,3]]\nassert generate_matrix(7)==[[1, 2, 3, 4, 5, 6, 7], [24, 25, 26, 27, 28, 29, 8], [23, 40, 41, 42, 43, 30, 9], [22, 39, 48, 49, 44, 31, 10], [21, 38, 47, 46, 45, 32, 11], [20, 37, 36, 35, 34, 33, 12], [19, 18, 17, 16, 15, 14, 13]]",
        "canonical_solution": "def generate_matrix(n):\r\n        if n<=0:\r\n            return [] \r\n        matrix=[row[:] for row in [[0]*n]*n]        \r\n        row_st=0\r\n        row_ed=n-1        \r\n        col_st=0\r\n        col_ed=n-1\r\n        current=1        \r\n        while (True):\r\n            if current>n*n:\r\n                break\r\n            for c in range (col_st, col_ed+1):\r\n                matrix[row_st][c]=current\r\n                current+=1\r\n            row_st+=1\r\n            for r in range (row_st, row_ed+1):\r\n                matrix[r][col_ed]=current\r\n                current+=1\r\n            col_ed-=1\r\n            for c in range (col_ed, col_st-1, -1):\r\n                matrix[row_ed][c]=current\r\n                current+=1\r\n            row_ed-=1\r\n            for r in range (row_ed, row_st-1, -1):\r\n                matrix[r][col_st]=current\r\n                current+=1\r\n            col_st+=1\r\n        return matrix"
    },
    {
        "number": 835,
        "prompt": "Write a python function to find the slope of a line.\ndef slope(x1,y1,x2,y2): \n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    return ((y2-y1)/(x2-x1)) ",
        "generated_testcode": "assert slope(1,2,3,4) == 1.0\n",
        "test": "assert slope(4,2,2,5) == -1.5\nassert slope(2,4,4,6) == 1\nassert slope(1,2,4,2) == 0",
        "canonical_solution": "def slope(x1,y1,x2,y2): \r\n    return (float)(y2-y1)/(x2-x1)  "
    },
    {
        "number": 836,
        "prompt": "Write a function to find length of the subarray having maximum sum.\ndef max_sub_array_sum(a,size): \n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    max_so_far = 0\n    max_ending_here = 0\n    for i in range(0, size): \n        max_ending_here = max_ending_here + a[i]\n        if max_ending_here < 0: \n            max_ending_here = 0\n        else: \n            max_so_far = max(max_so_far, max_ending_here) \n    return max_so_far \n\n\na = [int(x) for x in input().split()]\nn = len(a)\nprint(max_sub_array_sum(a, n))\n\n\n#Example:\n#Input:\n#1 -2 3 -5 4 2 6 -3 1\n#Output:\n#6\n#Explanation:\n#The maximum sum of the subarray is 4 + 2 + 6 = 10\n\n#The subarray is [4, 2, 6]. ",
        "generated_testcode": "assert max_sub_array_sum([1, -2, 3, 4, -1, -3, 5, 2, -2, 6, 1, -4], 7) == 6\n",
        "test": "assert max_sub_array_sum([-2, -3, 4, -1, -2, 1, 5, -3],8) == 5\nassert max_sub_array_sum([1, -2, 1, 1, -2, 1],6) == 2\nassert max_sub_array_sum([-1, -2, 3, 4, 5],5) == 3",
        "canonical_solution": "from sys import maxsize \r\ndef max_sub_array_sum(a,size): \r\n\tmax_so_far = -maxsize - 1\r\n\tmax_ending_here = 0\r\n\tstart = 0\r\n\tend = 0\r\n\ts = 0\r\n\tfor i in range(0,size): \r\n\t\tmax_ending_here += a[i] \r\n\t\tif max_so_far < max_ending_here: \r\n\t\t\tmax_so_far = max_ending_here \r\n\t\t\tstart = s \r\n\t\t\tend = i \r\n\t\tif max_ending_here < 0: \r\n\t\t\tmax_ending_here = 0\r\n\t\t\ts = i+1\r\n\treturn (end - start + 1)"
    },
    {
        "number": 837,
        "prompt": "Write a python function to find the cube sum of first n odd natural numbers.\ndef cube_Sum(n): \n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    if n < 0: \n        return \"Invalid input\"\n    elif n == 0: \n        return 0\n    else: \n        sum = 0\n        for i in range(1, n+1): \n            sum += i**3\n        return sum ",
        "generated_testcode": "assert cube_Sum(5) == 225 # 1^3 + 3^3 + 5^3 + 7^3 + 9^3 + 111^3 + 13^3 = 225\n",
        "test": "assert cube_Sum(2) == 28\nassert cube_Sum(3) == 153\nassert cube_Sum(4) == 496",
        "canonical_solution": "def cube_Sum(n): \r\n    sum = 0   \r\n    for i in range(0,n) : \r\n        sum += (2*i+1)*(2*i+1)*(2*i+1) \r\n    return sum"
    },
    {
        "number": 838,
        "prompt": "Write a python function to find minimum number swaps required to make two binary strings equal.\ndef min_Swaps(s1,s2) :  \n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    n = len(s1)\n    swaps = 0\n    for i in range(n) :\n        for j in range(n) :\n            if s1[i] != s2[j] :\n                swaps += 1\n                if i < j :\n                    s1[i], s2[j] = s2[j], s1[i]\n    return swaps \n\n\n# Test the function with example inputs\ns1 = \"10110\"\ns2 = \"11100\"\nprint(\"Minimum swaps required to make s1 and s2 equal :\", min_Swaps(s1,s2))\n\ns1 = \"11110000\"\ns2 = \"1010111\"\nprint(\"Minimum swaps required to make s1 and s2 equal :\", min_Swaps(s1,s2))\n\ns1 = \"0001010\"\ns2 = \"101100\"\nprint(\"Minimum swaps required to make s1 and s2 equal :\", min_Swaps(s1,s2))\n",
        "generated_testcode": "assert min_Swaps(\"101101\",\"111100\") == 2\n",
        "test": "assert min_Swaps(\"0011\",\"1111\") == 1\nassert min_Swaps(\"00011\",\"01001\") == 2\nassert min_Swaps(\"111\",\"111\") == 0",
        "canonical_solution": "def min_Swaps(s1,s2) :  \r\n    c0 = 0; c1 = 0;  \r\n    for i in range(len(s1)) :  \r\n        if (s1[i] == '0' and s2[i] == '1') : \r\n            c0 += 1;    \r\n        elif (s1[i] == '1' and s2[i] == '0') : \r\n            c1 += 1;  \r\n    result = c0 // 2 + c1 // 2;  \r\n    if (c0 % 2 == 0 and c1 % 2 == 0) : \r\n        return result;  \r\n    elif ((c0 + c1) % 2 == 0) : \r\n        return result + 2;  \r\n    else : \r\n        return -1;  "
    },
    {
        "number": 839,
        "prompt": "Write a function to sort the tuples alphabetically by the first item of each tuple.\ndef sort_tuple(tup): \n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    return sorted(tup, key=lambda x: x[0])\n\n#Test the function with a sample list of tuples\ntuples_list = [(\"apple\", 5, 2), (\"banana\", 10, 3), (\"orange\", 3, 1), (\"pear\", 1, 10)]\nprint(sort_tuple(tuples_list))\n\n#Output: [('banana', 10, 3), ('orange', 3, 1), ('pear', 1, 10), ('apple', 5, 2)]\n\n#Sort the list of tuples alphabetically by the first item of each tuple\ndef sort_tuple(tup): \n    return sorted(tup, key=lambda x: x[0])\n\n#Test the function with a sample list of tuples\ntuples_list = [(\"apple\", 5, 2), (\"banana\", 10, 3), (\"orange\", 3, 1), (\"pear\", 1, 10)]\nprint(sort_tuple(tuples_list))\n\n#Output: [('apple', 5, 2), ('banana', 10, 3), ('orange', 3, 1), ('pear', 1, 10)] ",
        "generated_testcode": "assert sort_tuple([('apple', 2), ('banana', 3), ('orange', 1), ('grape', 4)]) == [('apple', 2), ('grape', 4), ('banana', 3)]\n",
        "test": "assert sort_tuple([(\"Amana\", 28), (\"Zenat\", 30), (\"Abhishek\", 29),(\"Nikhil\", 21), (\"B\", \"C\")]) == [('Abhishek', 29), ('Amana', 28), ('B', 'C'), ('Nikhil', 21), ('Zenat', 30)]\nassert sort_tuple([(\"aaaa\", 28), (\"aa\", 30), (\"bab\", 29), (\"bb\", 21), (\"csa\", \"C\")]) == [('aa', 30), ('aaaa', 28), ('bab', 29), ('bb', 21), ('csa', 'C')]\nassert sort_tuple([(\"Sarala\", 28), (\"Ayesha\", 30), (\"Suman\", 29),(\"Sai\", 21), (\"G\", \"H\")]) == [('Ayesha', 30), ('G', 'H'), ('Sai', 21), ('Sarala', 28), ('Suman', 29)]",
        "canonical_solution": "def sort_tuple(tup): \r\n\tn = len(tup) \r\n\tfor i in range(n): \r\n\t\tfor j in range(n-i-1): \r\n\t\t\tif tup[j][0] > tup[j + 1][0]: \r\n\t\t\t\ttup[j], tup[j + 1] = tup[j + 1], tup[j] \r\n\treturn tup"
    },
    {
        "number": 840,
        "prompt": "Write a python function to check whether the roots of a quadratic equation are numerically equal but opposite in sign or not.\ndef Check_Solution(a,b,c):  \n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    if (b**2 - 4*a*c) > 0:\n        return True\n    elif (b**2 - 4*a*c) == 0:\n        return True\n    elif (b**2 - 4*a*c) < 0:\n        return False\n\na = float(input(\"Enter the value of a: \"))\nb = float(input(\"Enter the value of b: \"))\nc = float(input(\"Enter the value of c: \"))\n\nif Check_Solution(a,b,c):\n    print(\"Roots are real and opposite in sign.\")\nelse:\n    print(\"Roots are not opposite in sign.\")\n\n#Testing the function\na = 1\nb = -5\nc = 6\n\nif Check_Solution(a,b,c):\n    print(\"Roots are real and opposite in sign.\")\nelse:\n    print(\"Roots are not opposite in sign.\")\n\na = 1\nb = 5\nc = 6\n\nif Check_Solution(a,b,c):\n    print(\"Roots are real and opposite in sign.\")\nelse:\n    print(\"Roots are not opposite in sign.\")\n\na = 1\nb = 0\nc = 6\n\nif Check_Solution(a,b,c):\n    print(\"Roots are real and opposite in sign.\")\nelse:\n    print(\"Roots are not opposite in sign.\")\n    ",
        "generated_testcode": "assert Check_Solution(1, -3, 4) == True\n",
        "test": "assert Check_Solution(2,0,-1) == \"Yes\"\nassert Check_Solution(1,-5,6) == \"No\"\nassert Check_Solution(2,0,2) == \"Yes\"",
        "canonical_solution": "def Check_Solution(a,b,c):  \r\n    if b == 0:  \r\n        return (\"Yes\")  \r\n    else: \r\n        return (\"No\")  "
    },
    {
        "number": 841,
        "prompt": "Write a function to count the number of inversions in the given array.\ndef get_inv_count(arr, n): \n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    count = 0\n    for i in range(n): \n        for j in range(i+1, n): \n            if arr[i] > arr[j]: \n                count += 1\n    return count \n  \n# Test the function with the given example \narr = [1, 20, 6, 4, 5, 3, 10] \nn = len(arr) \nprint(\"Number of inversions are:\", get_inv_count(arr, n)) ",
        "generated_testcode": "assert get_inv_count([1, 2, 3, 4, 5, 6, 7, 8, 9], 5) == 0\n",
        "test": "assert get_inv_count([1, 20, 6, 4, 5], 5) == 5\nassert get_inv_count([8, 4, 2, 1], 4) == 6\nassert get_inv_count([3, 1, 2], 3) == 2",
        "canonical_solution": "def get_inv_count(arr, n): \r\n\tinv_count = 0\r\n\tfor i in range(n): \r\n\t\tfor j in range(i + 1, n): \r\n\t\t\tif (arr[i] > arr[j]): \r\n\t\t\t\tinv_count += 1\r\n\treturn inv_count "
    },
    {
        "number": 842,
        "prompt": "Write a function to find the number which occurs for odd number of times in the given array.\ndef get_odd_occurence(arr, arr_size):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    freq = {}\n    for i in range(arr_size):\n        if arr[i] in freq:\n            freq[arr[i]] += 1\n        else:\n            freq[arr[i]] = 1\n    \n    for key, value in freq.items():\n        if value % 2 != 0:\n            return key\n    \n    return -1\n\n#Example usage:\narr = [1, 2, 3, 4, 5, 6, 5, 3, 2, 5, 6, 7, 2, 8, 3, 1]\nprint(get_odd_occurence(arr, len(arr)))  # Output: 4 (because it occurs for odd number of times)\n\narr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nprint(get_odd_occurence(arr, len(arr)))  # Output: -1 (because there is no element which occurs for odd number of times)\n\narr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6]\nprint(get_odd_occurence(arr, len(arr)))  # Output: 7 (because it occurs for odd number of times) ",
        "generated_testcode": "assert get_odd_occurence([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10] , 10) == 5\n",
        "test": "assert get_odd_occurence([2, 3, 5, 4, 5, 2, 4, 3, 5, 2, 4, 4, 2], 13) == 5\nassert get_odd_occurence([1, 2, 3, 2, 3, 1, 3], 7) == 3\nassert get_odd_occurence([5, 7, 2, 7, 5, 2, 5], 7) == 5",
        "canonical_solution": "def get_odd_occurence(arr, arr_size):\r\n  for i in range(0, arr_size):\r\n    count = 0\r\n    for j in range(0, arr_size):\r\n      if arr[i] == arr[j]:\r\n        count += 1\r\n    if (count % 2 != 0):\r\n      return arr[i]\r\n  return -1"
    },
    {
        "number": 843,
        "prompt": "Write a function to find the nth super ugly number from a given prime list of size k using heap queue algorithm.\ndef nth_super_ugly_number(n, primes):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    heap = []\n    ugly_numbers = set()\n    for prime in primes:\n        heapq.heappush(heap, (1, prime)\n    \n    count = 0\n    while count < n:\n        ugly_number, prime = heapq.heappop(heap)\n        if ugly_number not in ugly_numbers:\n            count += 1\n            ugly_numbers.add(ugly_number)\n            for i in range(prime):\n                heapq.heappush(heap, (ugly_number * prime, prime)\n    \n    return ugly_number\n\n# Test the function\nprimes = [2, 3, 5, 7, 13, 19, 31, 37, 73, 169]\nn = 10\nprint(nth_super_ugly_number(n, primes))\n\n\n# Time Complexity: O(n * log(k))",
        "generated_testcode": "assert nth_super_ugly_number(10, [2, 3, 5]) == 12, \"Test case 1 failed\"\n",
        "test": "assert nth_super_ugly_number(12,[2,7,13,19])==32\nassert nth_super_ugly_number(10,[2,7,13,19])==26\nassert nth_super_ugly_number(100,[2,7,13,19])==5408",
        "canonical_solution": "import heapq\r\ndef nth_super_ugly_number(n, primes):\r\n    uglies = [1]\r\n    def gen(prime):\r\n        for ugly in uglies:\r\n            yield ugly * prime\r\n    merged = heapq.merge(*map(gen, primes))\r\n    while len(uglies) < n:\r\n        ugly = next(merged)\r\n        if ugly != uglies[-1]:\r\n            uglies.append(ugly)\r\n    return uglies[-1]"
    },
    {
        "number": 844,
        "prompt": "Write a python function to find the kth element in an array containing odd elements first and then even elements.\ndef get_Number(n, k): \n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    odd = [] \n    even = [] \n    for i in range(n): \n        if i % 2 != 0: \n            odd.append(i) \n        else: \n            even.append(i) \n    if k <= len(odd): \n        return odd[k-1] \n    else: \n        return even[k - len(odd) - 1] ",
        "generated_testcode": "assert get_Number(5, 2) == 3\n",
        "test": "assert get_Number(8,5) == 2\nassert get_Number(7,2) == 3\nassert get_Number(5,2) == 3",
        "canonical_solution": "def get_Number(n, k): \r\n    arr = [0] * n; \r\n    i = 0; \r\n    odd = 1; \r\n    while (odd <= n):   \r\n        arr[i] = odd; \r\n        i += 1; \r\n        odd += 2;\r\n    even = 2; \r\n    while (even <= n): \r\n        arr[i] = even; \r\n        i += 1;\r\n        even += 2; \r\n    return arr[k - 1]; "
    },
    {
        "number": 845,
        "prompt": "Write a python function to count the number of digits in factorial of a given number.\ndef find_Digits(n): \n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    fact = 1\n    for i in range(1, n+1): \n        fact = fact * i \n    count = 0\n    while fact > 0: \n        fact //= 10\n        count += fact % 10\n        fact //= 10\n    return count\n\n# Test the function\nnum = int(input(\"Enter a number: \"))\nprint(\"The number of digits in factorial of {} is:\".format(num), find_Digits(num)) ",
        "generated_testcode": "assert find_Digits(5) == 3 # 5! = 120\n",
        "test": "assert find_Digits(7) == 4\nassert find_Digits(5) == 3\nassert find_Digits(4) == 2",
        "canonical_solution": "import math \r\ndef find_Digits(n): \r\n    if (n < 0): \r\n        return 0;\r\n    if (n <= 1): \r\n        return 1; \r\n    x = ((n * math.log10(n / math.e) + math.log10(2 * math.pi * n) /2.0)); \r\n    return math.floor(x) + 1; "
    },
    {
        "number": 846,
        "prompt": "Write a function to find the minimum number of platforms required for a railway/bus station.\ndef find_platform(arr, dep, n): \n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    arrival = sorted(arr) \n    depart = sorted(dep)\n    res = 1\n    i, j = 0, 0\n    max_plat = 1\n    while i < n and j < n: \n        if arrival[i] < depart[j]: \n            i += 1\n            max_plat = max(max_plat, i) \n        else: \n            res = max(res, max_plat) \n            j += 1\n    return res \n\n#Example Usage:\narr = [900, 940, 950, 960, 1100, 150, 120]\ndep = [910, 1200, 1120, 1500, 1550, 1000]\nn = len(arr)\nprint(find_platform(arr, dep, n))\n# Output: 3\n\n\narr = [200, 250, 300, 350, 400, 450, 500, 550]\ndep = [250, 300, 350, 400, 450, 500, 550]\nn = len(arr)\nprint(find_platform(arr, dep, n))\n# Output: 2",
        "generated_testcode": "assert find_platform([1, 3, 5, 7, 9, 11, 12, 15, 20], 10, 6) == 3\n",
        "test": "assert find_platform([900, 940, 950, 1100, 1500, 1800],[910, 1200, 1120, 1130, 1900, 2000],6)==3\nassert find_platform([100,200,300,400],[700,800,900,1000],4)==4\nassert find_platform([5,6,7,8],[4,3,2,1],4)==1",
        "canonical_solution": "def find_platform(arr, dep, n): \r\n    arr.sort() \r\n    dep.sort() \r\n    plat_needed = 1\r\n    result = 1\r\n    i = 1\r\n    j = 0\r\n    while (i < n and j < n): \r\n        if (arr[i] <= dep[j]):           \r\n            plat_needed+= 1\r\n            i+= 1\r\n        elif (arr[i] > dep[j]):           \r\n            plat_needed-= 1\r\n            j+= 1\r\n        if (plat_needed > result):  \r\n            result = plat_needed           \r\n    return result"
    },
    {
        "number": 847,
        "prompt": "Write a python function to copy a list from a singleton tuple.\ndef lcopy(xs):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    \"\"\"\n    Returns a new list with the same elements as the tuple xs\n    \"\"\"\n    return list(xs[0])\n\n# Test cases\nprint(lcopy(([1,2,3])) # should print [1,2,3]\nprint(lcopy((\"hello\")) # should print [\"h\",\"e\",\"l\",\"l\",\"o\"]\nprint(lcopy((10,)) # should print [10]\nprint(lcopy(\"world\") # should print [\"w\",\"o\",\"r\",\"l\",\"d\"]\n",
        "generated_testcode": "assert lcopy(([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]\n",
        "test": "assert lcopy([1, 2, 3]) == [1, 2, 3]\nassert lcopy([4, 8, 2, 10, 15, 18]) == [4, 8, 2, 10, 15, 18]\nassert lcopy([4, 5, 6]) == [4, 5, 6]\n",
        "canonical_solution": "def lcopy(xs):\n  return xs[:]\n"
    },
    {
        "number": 848,
        "prompt": "Write a function to find the area of a trapezium.\ndef area_trapezium(base1,base2,height):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    area = ((base1+base2)*height)/2\n    return area\n\n#Test the function\nprint(area_trapezium(10,20,15))\n",
        "generated_testcode": "assert area_trapezium(5,10,10) == 25\n",
        "test": "assert area_trapezium(6,9,4)==30\nassert area_trapezium(10,20,30)==450\nassert area_trapezium(15,25,35)==700",
        "canonical_solution": "def area_trapezium(base1,base2,height):\r\n area = 0.5 * (base1 + base2) * height\r\n return area"
    },
    {
        "number": 849,
        "prompt": "Write a python function to find sum of all prime divisors of a given number.\ndef Sum(N): \n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    Sum_of_Prime_Divisors = 0\n    for i in range(2, N):\n        if N % i == 0:\n            if is_prime(i):\n                Sum_of_Prime_Divisors += i\n    return Sum_of_Prime_Divisors\n\n# To check whether a number is prime or not\ndef is_prime(num):\n    if num > 1:\n        for i in range(2, num):\n            if (num % i) == 0:\n                return False\n        else:\n            return True\n    else:\n        return False\n\n# Main Program\ndef main():\n    N = int(input(\"Enter the number: \"))\n    print(\"Sum of prime divisors of\",N,\"is\",Sum(N))\n\n# Driver code\nif __name__ == '__main__':\n    main()\n    ",
        "generated_testcode": "assert Sum(10) == 17\n",
        "test": "assert Sum(60) == 10\nassert Sum(39) == 16\nassert Sum(40) == 7",
        "canonical_solution": "def Sum(N): \r\n    SumOfPrimeDivisors = [0]*(N + 1)   \r\n    for i in range(2,N + 1) : \r\n        if (SumOfPrimeDivisors[i] == 0) : \r\n            for j in range(i,N + 1,i) : \r\n                SumOfPrimeDivisors[j] += i           \r\n    return SumOfPrimeDivisors[N] "
    },
    {
        "number": 850,
        "prompt": "Write a function to check if a triangle of positive area is possible with the given angles.\ndef is_triangleexists(a,b,c): \n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    if a+b>c and b+c>a and a+c>b:\n        return True\n    else:\n        return False\n\n#Test the function\nprint(is_triangleexists(30,30,90)) #True\nprint(is_triangleexists(45,45,90)) #False\nprint(is_triangleexists(30,60,90)) #True\nprint(is_triangleexists(90,30,30)) #True\nprint(is_triangleexists(10,20,30)) #False\nprint(is_triangleexists(30,45,90)) #False\nprint(is_triangleexists(30,45,60)) #True\nprint(is_triangleexists(30,45,45)) #False\nprint(is_triangleexists(45,30,60)) #False\nprint(is_triangleexists(45,60,30)) #True\nprint(is_triangleexists(60,30,45)) #False",
        "generated_testcode": "assert is_triangleexists(30,45,90) == True\n",
        "test": "assert is_triangleexists(50,60,70)==True\nassert is_triangleexists(90,45,45)==True\nassert is_triangleexists(150,30,70)==False",
        "canonical_solution": "def is_triangleexists(a,b,c): \r\n    if(a != 0 and b != 0 and c != 0 and (a + b + c)== 180): \r\n        if((a + b)>= c or (b + c)>= a or (a + c)>= b): \r\n            return True \r\n        else:\r\n            return False\r\n    else:\r\n        return False"
    },
    {
        "number": 851,
        "prompt": "Write a python function to find sum of inverse of divisors.\ndef Sum_of_Inverse_Divisors(N,Sum): \n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    divisor_sum = 0\n    for i in range(1, N+1):\n        if N%i == 0:\n            divisor_sum += 1/i\n    return round(divisor_sum,1)\n\nprint(Sum_of_Inverse_Divisors(28,5))\n\n",
        "generated_testcode": "assert Sum_of_Inverse_Divisors(10, 2) == 1\n",
        "test": "assert Sum_of_Inverse_Divisors(6,12) == 2\nassert Sum_of_Inverse_Divisors(9,13) == 1.44\nassert Sum_of_Inverse_Divisors(1,4) == 4",
        "canonical_solution": "def Sum_of_Inverse_Divisors(N,Sum): \r\n    ans = float(Sum)*1.0 /float(N);  \r\n    return round(ans,2); "
    },
    {
        "number": 852,
        "prompt": "Write a python function to remove negative numbers from a list.\ndef remove_negs(num_list): \n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    # create an empty list to store positive numbers\n    pos_list = []\n    # loop through each number in the original list\n    for num in num_list:\n        # if the number is positive, add it to the new list\n        if num > 0:\n            pos_list.append(num)\n    return pos_list\n\n# test the function\nnum_list = [-1, 2, 3, -4, 5, -6, 7, 8, -9, 10]\nprint(remove_negs(num_list)) # should output [2, 3, 5, 7, 8, 10]\nnum_list = [1, 2, 3, 4, 5, 6, 7, 8, 9]\nprint(remove_negs(num_list)) # should output [1, 2, 3, 4, 5, 6, 7, 8, 9]\nnum_list = [0, -1, -2, 3, -4, 5, -6, -7, 8]\nprint(remove_negs(num_list)) # should output [3, 5, 8] ",
        "generated_testcode": "assert remove_negs([1, 2, -3, 4, -5, 6, -7, 8, -9, 10]) == [1, 2, 4, 6, 8, 10]\n",
        "test": "assert remove_negs([1,-2,3,-4]) == [1,3]\nassert remove_negs([1,2,3,-4]) == [1,2,3]\nassert remove_negs([4,5,-6,7,-8]) == [4,5,7]",
        "canonical_solution": "def remove_negs(num_list): \r\n    for item in num_list: \r\n        if item < 0: \r\n           num_list.remove(item) \r\n    return num_list"
    },
    {
        "number": 853,
        "prompt": "Write a python function to find sum of odd factors of a number.\ndef sum_of_odd_Factors(n): \n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    factors_sum = 0\n    for i in range(1, n+1): \n        if n % i == 0: \n            if i % 2 == 1: \n                factors_sum += i \n    return factors_sum \n\n# Driver code \nnum = int(input(\"Enter a number: \")) \nprint(\"Sum of odd factors of the number is\", sum_of_odd_Factors(num)) ",
        "generated_testcode": "assert sum_of_odd_Factors(10) == 1+3+5+7+9\n",
        "test": "assert sum_of_odd_Factors(30) == 24\nassert sum_of_odd_Factors(18) == 13\nassert sum_of_odd_Factors(2) == 1",
        "canonical_solution": "import math\r\ndef sum_of_odd_Factors(n): \r\n    res = 1\r\n    while n % 2 == 0: \r\n        n = n // 2 \r\n    for i in range(3,int(math.sqrt(n) + 1)): \r\n        count = 0\r\n        curr_sum = 1\r\n        curr_term = 1\r\n        while n % i == 0: \r\n            count+=1 \r\n            n = n // i \r\n            curr_term *= i \r\n            curr_sum += curr_term    \r\n        res *= curr_sum  \r\n    if n >= 2: \r\n        res *= (1 + n) \r\n    return res "
    },
    {
        "number": 854,
        "prompt": "Write a function which accepts an arbitrary list and converts it to a heap using heap queue algorithm.\ndef raw_heap(rawheap):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    # initializing a heap queue with the first element as the root\n    heap = [rawheap[0]]\n    # initializing the index of the parent\n    index = 0\n    # iterating through the rest of the list\n    for i in range(1, len(rawheap)):\n        # appending the rest of the elements to the heap\n        heap.append(rawheap[i])\n        # finding the index of the current element\n        current_index = i\n        # finding the parent of the current element\n        parent_index = int((current_index - 1) / 2)\n        # swapping the current element with the parent if it is smaller than parent\n        while heap[parent_index] > heap[current_index]:\n            heap[parent_index], heap[current_index] = heap[current_index], heap[parent_index]\n            current_index = parent_index\n            parent_index = int((current_index - 1) / 2)\n    return heap\n\n\n# testing the function\nprint(raw_heap([4, 10, 3, 5, 1, 2, 8, 7, 6]))\n\n\n# output: [1, 2, 5, 3, 4, 8, 7, 10]\n",
        "generated_testcode": "assert raw_heap(list(range(10)) == [0, 9, 4, 5, 1, 2, 3, 6, 7, 8, 10, 11, 12, 13, 14, 15]\n\n# Explanation:\n# The heap queue algorithm is a way to convert a list to a heap data structure. In this case, we are using the heap queue algorithm to convert a list of numbers to a heap. The heap queue algorithm works by starting with the largest element in the list and swapping it with the last element in the list, then swapping it with the next largest element, and so on until the heap is complete. The largest element is the root of the heap, and the next largest element is the second largest, and so on. The function raw_heap() takes a list as input and returns a list with the heapified version of the input list. The test code checks if the output is equal to the expected output. ",
        "test": "assert raw_heap([25, 44, 68, 21, 39, 23, 89])==[21, 25, 23, 44, 39, 68, 89]\nassert raw_heap([25, 35, 22, 85, 14, 65, 75, 25, 58])== [14, 25, 22, 25, 35, 65, 75, 85, 58]\nassert raw_heap([4, 5, 6, 2])==[2, 4, 6, 5]",
        "canonical_solution": "import heapq as hq\r\ndef raw_heap(rawheap):\r\n  hq.heapify(rawheap)\r\n  return rawheap"
    },
    {
        "number": 855,
        "prompt": "Write a python function to check for even parity of a given number.\ndef check_Even_Parity(x): \n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    if x % 2 == 0: \n        return \"Even\"\n    else:\n        return \"Odd\"\n\n# Example usage:\nprint(check_Even_Parity(10)) # Output: Even\nprint(check_Even_Parity(7)) # Output: Odd\nprint(check_Even_Parity(15)) # Output: Odd\n\n\n#Using a list comprehension to check the parity of a list of numbers\ndef check_Even_Parity_list(lst): \n    return [\"Even\" if x % 2 == 0 else \"Odd\" for x in lst]\n# Example usage:\nlst = [10, 7, 15, 12, 4, 9, 8, 21]\nprint(check_Even_Parity_list(lst)) # Output: ['Even', 'Odd', 'Odd', 'Even', 'Even', 'Odd'] ",
        "generated_testcode": "assert check_Even_Parity(4) == True\n",
        "test": "assert check_Even_Parity(10) == True\nassert check_Even_Parity(11) == False\nassert check_Even_Parity(18) == True",
        "canonical_solution": "def check_Even_Parity(x): \r\n    parity = 0\r\n    while (x != 0): \r\n        x = x & (x - 1) \r\n        parity += 1\r\n    if (parity % 2 == 0): \r\n        return True\r\n    else: \r\n        return False"
    },
    {
        "number": 856,
        "prompt": "Write a python function to find minimum adjacent swaps required to sort binary array.\ndef find_Min_Swaps(arr,n) : \n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    sorted_arr = sorted(arr) \n    i = 0\n    swaps = 0\n    while i < n : \n        if arr[i] != sorted_arr[i] : \n            j = i \n            while arr[i] != sorted_arr[j] : \n                j += 1\n            k = 1\n            while arr[i] == arr[j] : \n                j += 1\n            while arr[j] != sorted_arr[j] : \n                k += 1\n                j += 1\n            arr[i], arr[j] = arr[j], arr[i] \n            swaps += k-1\n            i += 1\n        else : \n            i += 1\n    return swaps ",
        "generated_testcode": "assert find_Min_Swaps([1,0,1,1,0,0,1],5) == 1\n",
        "test": "assert find_Min_Swaps([1,0,1,0],4) == 3\nassert find_Min_Swaps([0,1,0],3) == 1\nassert find_Min_Swaps([0,0,1,1,0],5) == 2",
        "canonical_solution": "def find_Min_Swaps(arr,n) : \r\n    noOfZeroes = [0] * n \r\n    count = 0 \r\n    noOfZeroes[n - 1] = 1 - arr[n - 1] \r\n    for i in range(n-2,-1,-1) : \r\n        noOfZeroes[i] = noOfZeroes[i + 1] \r\n        if (arr[i] == 0) : \r\n            noOfZeroes[i] = noOfZeroes[i] + 1\r\n    for i in range(0,n) : \r\n        if (arr[i] == 1) : \r\n            count = count + noOfZeroes[i] \r\n    return count "
    },
    {
        "number": 857,
        "prompt": "Write a function to list out the list of given strings individually using map function.\ndef listify_list(list1):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    list2 = list(map(lambda x: [x], list1))\n    return list2\n\n# Test the function\ninput_list = [\"apple\", \"banana\", \"orange\", \"pear\", \"grape\"]\nprint(listify_list(input_list))\n\n# Output: [['apple'], ['banana'], ['orange'], ['pear'], ['grape']]\n\n\n# Explanation:\n# The function takes a list of strings as input and uses the map function to apply a lambda function to each element in the list. The lambda function creates a new list with one element which is the string itself. Then, the map function applies this lambda function to each element in the input list and returns a new list of lists with each string as a separate element. ",
        "generated_testcode": "assert listify_list(['apple', 'banana', 'cherry', 'orange']) == ['apple', 'banana', 'cherry', 'orange']\n",
        "test": "assert listify_list(['Red', 'Blue', 'Black', 'White', 'Pink'])==[['R', 'e', 'd'], ['B', 'l', 'u', 'e'], ['B', 'l', 'a', 'c', 'k'], ['W', 'h', 'i', 't', 'e'], ['P', 'i', 'n', 'k']]\nassert listify_list(['python'])==[['p', 'y', 't', 'h', 'o', 'n']]\nassert listify_list([' red ', 'green',' black', 'blue ',' orange', 'brown'])==[[' ', 'r', 'e', 'd', ' '], ['g', 'r', 'e', 'e', 'n'], [' ', 'b', 'l', 'a', 'c', 'k'], ['b', 'l', 'u', 'e', ' '], [' ', 'o', 'r', 'a', 'n', 'g', 'e'], ['b', 'r', 'o', 'w', 'n']]",
        "canonical_solution": "def listify_list(list1):\r\n  result = list(map(list,list1)) \r\n  return result "
    },
    {
        "number": 858,
        "prompt": "Write a function to count number of lists in a given list of lists and square the count.\ndef count_list(input_list): \n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": true,
        "answer": "    count = 0\n    for item in input_list:\n        if type(item) == list:\n            count += 1\n    return count\n    # square the count\n    return count**2\n\n# Test the function\ninput_list = [1, [2, 3], 4, [5, [6, 7], 8], [9, 10], 11]\nprint(count_list(input_list)) # Output: 3 ",
        "generated_testcode": "assert count_list([[1,2,3],[4,5],[6,7,8,9]]) == 3\n",
        "test": "assert count_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==25\nassert count_list([[1, 3], [5, 7], [9, 11], [13, 15, 17]] )==16\nassert count_list([[2, 4], [[6,8], [4,5,8]], [10, 12, 14]])==9",
        "canonical_solution": "def count_list(input_list): \r\n    return (len(input_list))**2"
    },
    {
        "number": 859,
        "prompt": "Write a function to generate all sublists of a given list.\ndef sub_lists(my_list):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    if not my_list:\n        return [[]]\n\n    sub_list = []\n    for i in range(len(my_list)):\n        sub_list.append([my_list[i]])\n        for j in range(i+1, len(my_list)):\n            sub_list.append([my_list[i], my_list[j]])\n            for k in range(j+1, len(my_list)):\n                sub_list.append([my_list[i], my_list[j], my_list[k]])\n\n    return sub_list\n\n\n# test\nprint(sub_lists([1, 2, 3, 4]))\n# Output: [[], [1], [2], [3], [1, 2], [1, 3], [2, 3], [1, 2, 3], [4], [1, 4], [2, 4], [1, 2, 4], [3, 4], [1, 3, 4], [2, 3, 4], [1, 2, 3, 4]]\n\nprint(sub_lists([1, 2, 3, 4, 5]))\n# Output: [[], [1], [2], [3], [1, 2], [1, 3], [2, 3], [1, 2, 3], [4], [1, 4], [2, 4], [1, 4], [2, 3",
        "generated_testcode": "assert sub_lists([\"a\", \"b\", \"c\", \"d\"] == [[\"a\"], [\"b\"], [\"c\"], [\"d\"], [\"a\", \"b\"], [\"a\", \"c\"], [\"b\", \"c\"], [\"a\", \"d\"], [\"b\", \"d\"], [\"a\", \"c\", \"d\"], [\"a\", \"b\", \"c\", \"d\"]]\n\n# Test case 2\n",
        "test": "assert sub_lists([10, 20, 30, 40])==[[], [10], [20], [30], [40], [10, 20], [10, 30], [10, 40], [20, 30], [20, 40], [30, 40], [10, 20, 30], [10, 20, 40], [10, 30, 40], [20, 30, 40], [10, 20, 30, 40]]\nassert sub_lists(['X', 'Y', 'Z'])==[[], ['X'], ['Y'], ['Z'], ['X', 'Y'], ['X', 'Z'], ['Y', 'Z'], ['X', 'Y', 'Z']]\nassert sub_lists([1,2,3])==[[],[1],[2],[3],[1,2],[1,3],[2,3],[1,2,3]]",
        "canonical_solution": "from itertools import combinations\r\ndef sub_lists(my_list):\r\n\tsubs = []\r\n\tfor i in range(0, len(my_list)+1):\r\n\t  temp = [list(x) for x in combinations(my_list, i)]\r\n\t  if len(temp)>0:\r\n\t    subs.extend(temp)\r\n\treturn subs"
    },
    {
        "number": 860,
        "prompt": "Write a function to check whether the given string is ending with only alphanumeric characters or not using regex.\ndef check_alphanumeric(string): \n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": true,
        "answer": "    import re\n    if re.match(\"^[A-Za-z0-9]+$\", string):\n        return True\n    else:\n        return False\n\n# Test the function with some examples\nprint(check_alphanumeric(\"abcd1234\")) # True\nprint(check_alphanumeric(\"abcd1234@!\")) # False\nprint(check_alphanumeric(\"HelloWorld\")) # True\nprint(check_alphanumeric(\"HelloWorld123\")) # True\nprint(check_alphanumeric(\"HelloWorld!\")) # False\nprint(check_alphanumeric(\"!\")) # False\nprint(check_alphanumeric(\"\")) # True\nprint(check_alphanumeric(\"12345\")) # True\n\n",
        "generated_testcode": "assert check_alphanumeric(\"hello123\") == True\n",
        "test": "assert check_alphanumeric(\"dawood@\") == 'Discard'\nassert check_alphanumeric(\"skdmsam326\") == 'Accept'\nassert check_alphanumeric(\"cooltricks@\") == 'Discard'",
        "canonical_solution": "import re \r\nregex = '[a-zA-z0-9]$'\r\ndef check_alphanumeric(string): \r\n\tif(re.search(regex, string)): \r\n\t\treturn (\"Accept\") \r\n\telse: \r\n\t\treturn (\"Discard\") "
    },
    {
        "number": 861,
        "prompt": "Write a function to find all anagrams of a string in a given list of strings using lambda function.\ndef anagram_lambda(texts,str):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    result = []\n    lambda_func = lambda x: sorted(x) == sorted(str)\n    for text in texts:\n        if lambda_func(text):\n            result.append(text)\n    return result\n\n#Example usage:\ntexts = ['hello', 'world', 'silent', 'listen', 'enlist', 'bat', 'tab', 'cat', 'act', 'tac', 'firm', 'loot', 'moon']\nstr = 'lone'\nprint(anagram_lambda(texts, str))\n#Output: ['hello', 'world', 'listen']\n",
        "generated_testcode": "assert anagram_lambda([\"listen\",\"silent\",\"enlist\",\"least\",\"steel\",\"flee\",\"listen\",\"tiller\",\"post\",\"stop\",\"toil\",\"peace\",\"stole\",\"pole\"], \"listen\") == [\"listen\",\"silent\",\"enlist\",\"least\"]\n",
        "test": "assert anagram_lambda([\"bcda\", \"abce\", \"cbda\", \"cbea\", \"adcb\"],\"abcd\")==['bcda', 'cbda', 'adcb']\nassert anagram_lambda([\"recitals\",\" python\"], \"articles\" )==[\"recitals\"]\nassert anagram_lambda([\" keep\",\" abcdef\",\" xyz\"],\" peek\")==[\" keep\"]",
        "canonical_solution": "from collections import Counter \r\ndef anagram_lambda(texts,str):\r\n  result = list(filter(lambda x: (Counter(str) == Counter(x)), texts)) \r\n  return result"
    },
    {
        "number": 862,
        "prompt": "Write a function to find the occurrences of n most common words in a given text.\ndef n_common_words(text,n):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    import re\n    from collections import Counter\n    text = text.lower()\n    text = re.sub('[^a-z]+', ' ', text)\n    words = text.split()\n    c = Counter(words)\n    common_words = c.most_common(n)\n    return common_words\n\ntext = \"this is a sample text with some words that are repeated and this is also a sample text\"\nn = 2\nprint(n_common_words(text,n)) #output: [('sample', 2), ('is', 2)] ",
        "generated_testcode": "assert n_common_words(text=\"This is a sample text with some words to find the occurrences of common words\", n=2) == ['is', 'words']\n",
        "test": "assert n_common_words(\"python is a programming language\",1)==[('python', 1)]\nassert n_common_words(\"python is a programming language\",1)==[('python', 1)]\nassert n_common_words(\"python is a programming language\",5)==[('python', 1),('is', 1), ('a', 1), ('programming', 1), ('language', 1)]",
        "canonical_solution": "from collections import Counter\r\nimport re\r\ndef n_common_words(text,n):\r\n  words = re.findall('\\w+',text)\r\n  n_common_words= Counter(words).most_common(n)\r\n  return list(n_common_words)"
    },
    {
        "number": 863,
        "prompt": "Write a function to find the length of the longest sub-sequence such that elements in the subsequences are consecutive integers.\ndef find_longest_conseq_subseq(arr, n): \n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    if not arr: \n        return 0\n    if n == 1: \n        return 1\n    max_len = 0\n    dp = [1] * n \n    for i in range(1, n): \n        for j in range(i): \n            if arr[i] - arr[j] == 1: \n                dp[i] = max(dp[j] + 1, dp[i]) \n                max_len = max(max_len, dp[i]) \n    return max_len \n\n# Test the function \narr = [1, 9, 3, 10, 11, 4, 20, 2, 1, 7, 8, 3, 6, 5, 1, 12] \nn = len(arr) \nprint(\"Length of the longest sub-sequence is\", find_longest_conseq_subseq(arr, n)) ",
        "generated_testcode": "assert find_longest_conseq_subseq([1,9,3,7,1,10,4,20,15,2,6,5,11,8], 9) == 5\n",
        "test": "assert find_longest_conseq_subseq([1, 2, 2, 3], 4) == 3\nassert find_longest_conseq_subseq([1, 9, 3, 10, 4, 20, 2], 7) == 4\nassert find_longest_conseq_subseq([36, 41, 56, 35, 44, 33, 34, 92, 43, 32, 42], 11) == 5",
        "canonical_solution": "def find_longest_conseq_subseq(arr, n): \r\n\tans = 0\r\n\tcount = 0\r\n\tarr.sort() \r\n\tv = [] \r\n\tv.append(arr[0]) \r\n\tfor i in range(1, n): \r\n\t\tif (arr[i] != arr[i - 1]): \r\n\t\t\tv.append(arr[i]) \r\n\tfor i in range(len(v)): \r\n\t\tif (i > 0 and v[i] == v[i - 1] + 1): \r\n\t\t\tcount += 1\r\n\t\telse: \r\n\t\t\tcount = 1\r\n\t\tans = max(ans, count) \r\n\treturn ans "
    },
    {
        "number": 864,
        "prompt": "Write a function to find palindromes in a given list of strings using lambda function.\ndef palindrome_lambda(texts):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    return list(filter(lambda x: x == x[::-1], texts))\n\n#Example:\nprint(palindrome_lambda([\"racecar\", \"level\", \"hello\", \"world\", \"madam\", \"python\", \"civic\", \"racecar\"]))\n# Output: ['racecar', 'level', 'python', 'civic']\n\n#Explanation: The function will return a list of palindromes in the given list of strings. ",
        "generated_testcode": "assert palindrome_lambda([\"racecar\", \"hello\", \"level\", \"world\", \"python\", \"madam\"]) == [\"racecar\", \"madam\"]\n",
        "test": "assert palindrome_lambda([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"])==['php', 'aaa']\nassert palindrome_lambda([\"abcd\", \"Python\", \"abba\", \"aba\"])==['abba', 'aba']\nassert palindrome_lambda([\"abcd\", \"abbccbba\", \"abba\", \"aba\"])==['abbccbba', 'abba', 'aba']",
        "canonical_solution": "def palindrome_lambda(texts):\r\n  result = list(filter(lambda x: (x == \"\".join(reversed(x))), texts))\r\n  return result"
    },
    {
        "number": 865,
        "prompt": "Write a function to print n-times a list using map function.\ndef ntimes_list(nums,n):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    result = []\n    for i in range(n):\n        result.append(nums)\n    return list(map(lambda x: nums, result))\n\n\n# Example usage:\nprint(ntimes_list([1,2,3,4,5], 3) # Output: [[1, 2, 3, 4, 5], [1, 2, 3, 4, 5], [1, 2, 3, 4, 5]]\nprint(ntimes_list([6,7,8,9], 2) # Output: [[6, 7, 8, 9], [6, 7, 8, 9]]\nprint(ntimes_list([10,20,30,40], 1) # Output: [[10, 20, 30, 40]\n\n\n# Solution:\ndef ntimes_list(nums,n):\n    return list(map(lambda x: nums, [nums]*n))\n\n\n# Example usage:\nprint(ntimes_list([1,2,3,4,5], 3) # Output: [[1, 2, 3, 4, 5], [1, 2, 3, 4, 5], [1, 2, 3, 4, 5]]\nprint(ntimes_list([6,7,8,9], 2) # Output: [[6, 7, 8, 9], [6",
        "generated_testcode": "assert ntimes_list([1,2,3,4,5],3) == [1,2,3,4,5,1,2,3,4,5,1,2,3,4,5]\n",
        "test": "assert ntimes_list([1, 2, 3, 4, 5, 6, 7],3)==[3, 6, 9, 12, 15, 18, 21]\nassert ntimes_list([1, 2, 3, 4, 5, 6, 7],4)==[4, 8, 12, 16, 20, 24, 28]\nassert ntimes_list([1, 2, 3, 4, 5, 6, 7],10)==[10, 20, 30, 40, 50, 60, 70]",
        "canonical_solution": "def ntimes_list(nums,n):\r\n    result = map(lambda x:n*x, nums) \r\n    return list(result)"
    },
    {
        "number": 866,
        "prompt": "Write a function to check whether the given month name contains 31 days or not.\ndef check_monthnumb(monthname2):\n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    if monthname2.lower() == 'january' or monthname2.lower() == 'march' or monthname2.lower() == 'may' or monthname2.lower() == 'july' or monthname2.lower() == 'june' or monthname2.lower() == 'august' or monthname2.lower() == 'october' or monthname2.lower() == 'december':\n        return True\n    elif monthname2.lower() == 'april' or monthname2.lower() == 'july' or monthname2.lower() == 'november':\n        return False\n    elif monthname2.lower() == 'febuary':\n        return True\n    else:\n        return False\n\n# Test the function\nprint(check_monthnumb('January')) # True\nprint(check_monthnumb('July')) # False\nprint(check_monthnumb('April')) # True\nprint(check_monthnumb('Febuary')) # True\nprint(check_monthnumb('March')) # True\nprint(check_monthnumb('August')) # True\nprint(check_monthnumb('October')) # True\nprint(check_monthnumb('December')) # True\nprint(check_monthnumb('June')) # True\nprint(check_monthnumb('September')) # False\nprint(check_monthnumb('September')) # False",
        "generated_testcode": "assert check_monthnumb(\"January\") == True\n",
        "test": "assert check_monthnumb(\"February\")==False\nassert check_monthnumb(\"January\")==True\nassert check_monthnumb(\"March\")==True",
        "canonical_solution": "def check_monthnumb(monthname2):\r\n  if(monthname2==\"January\" or monthname2==\"March\"or monthname2==\"May\" or monthname2==\"July\" or monthname2==\"Augest\" or monthname2==\"October\" or monthname2==\"December\"):\r\n    return True\r\n  else:\r\n    return False"
    },
    {
        "number": 867,
        "prompt": "Write a python function to add a minimum number such that the sum of array becomes even.\ndef min_Num(arr,n):  \n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    if sum(arr) % 2 == 0:\n        return 0\n    else:\n        return 1\n        \n#test case\narr = [1, 2, 3, 4, 5, 6]\nprint(min_Num(arr,4)) # Output: 0\narr = [1, 3, 5, 7]\nprint(min_Num(arr,3)) # Output: 1\narr = [2, 3, 5, 8]\nprint(min_Num(arr,3)) # Output: 1 ",
        "generated_testcode": "assert min_Num([1,2,3,4,5], 6) == 0\n",
        "test": "assert min_Num([1,2,3,4,5,6,7,8,9],9) == 1\nassert min_Num([1,2,3,4,5,6,7,8],8) == 2\nassert min_Num([1,2,3],3) == 2",
        "canonical_solution": "def min_Num(arr,n):  \r\n    odd = 0\r\n    for i in range(n): \r\n        if (arr[i] % 2): \r\n            odd += 1 \r\n    if (odd % 2): \r\n        return 1\r\n    return 2"
    },
    {
        "number": 868,
        "prompt": "Write a python function to find the length of the last word in a given string.\ndef length_Of_Last_Word(a): \n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": true,
        "answer": "    # The given string is split using space as delimiter\n    word_list = a.split(\" \")\n    # The last element of the list is the last word\n    last_word = word_list[-1]\n    # Returning the length of the last word\n    return len(last_word)\n\n# Testing the function with sample input\nprint(length_Of_Last_Word(\"Hello world\")) # Output: 5\nprint(length_Of_Last_Word(\"Python is awesome\")) # Output: 5\nprint(length_Of_Last_Word(\"I love programming\")) # Output: 9\nprint(length_Of_Last_Word(\"This is the last word\")) # Output: 7",
        "generated_testcode": "assert length_Of_Last_Word(\"Hello world\") == 5\n",
        "test": "assert length_Of_Last_Word(\"python language\") == 8\nassert length_Of_Last_Word(\"PHP\") == 3\nassert length_Of_Last_Word(\"\") == 0",
        "canonical_solution": "def length_Of_Last_Word(a): \r\n    l = 0\r\n    x = a.strip() \r\n    for i in range(len(x)): \r\n        if x[i] == \" \": \r\n            l = 0\r\n        else: \r\n            l += 1\r\n    return l "
    },
    {
        "number": 869,
        "prompt": "Write a function to remove sublists from a given list of lists, which are outside a given range.\ndef remove_list_range(list1, leftrange, rigthrange):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    newlist = []\n    for i in list1:\n        if not any(leftrange[0] < x < rigthrange[0] for x in i):\n            newlist.append(i)\n    return newlist\n\nprint(remove_list_range([[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12], [13, 14, 15], [16, 17, 18]], [5, 13], [10, 16]))\n# Output: [[1, 2, 3], [13, 14, 15]]\n#Explanation: The sublist [4, 5, 6] and [7, 8, 9] are outside the range [5, 13] and [10, 16], respectively, so they should be removed from the original list. ",
        "generated_testcode": "assert remove_list_range([[1,2,3],[4,5,6],[7,8,9],[10,11,12],[13,14,15],[16,17,18],[19,20,21],[22,23,24],[25,26,27],[28,29,30],[31,32,33],[34,35,36],[37,38,39],[40,41,42],[43,44,45],[46,47,48],[49,50,51],[52,53,54],[55,56,57],[58,59,60],[61,62,63],[64,65,66],[67,68,69],[70,71,72],[73,74,75],[76,77,78],[79,80,81],[82,83,84],[85,86,87],[88,89,90],[91,92,93],[94,95,96],[97,98,99],[100,1101,1",
        "test": "assert remove_list_range([[2], [0], [1, 2, 3], [0, 1, 2, 3, 6, 7], [9, 11], [13, 14, 15, 17]],13,17)==[[13, 14, 15, 17]]\nassert remove_list_range([[2], [0], [1, 2, 3], [0, 1, 2, 3, 6, 7], [9, 11], [13, 14, 15, 17]],1,3)==[[2], [1, 2, 3]]\nassert remove_list_range([[2], [0], [1, 2, 3], [0, 1, 2, 3, 6, 7], [9, 11], [13, 14, 15, 17]],0,7)==[[2], [0], [1, 2, 3], [0, 1, 2, 3, 6, 7]]",
        "canonical_solution": "def remove_list_range(list1, leftrange, rigthrange):\r\n   result = [i for i in list1 if (min(i)>=leftrange and max(i)<=rigthrange)]\r\n   return result"
    },
    {
        "number": 870,
        "prompt": "Write a function to calculate the sum of the positive numbers of a given list of numbers using lambda function.\ndef sum_positivenum(nums):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    return lambda x: sum(filter(lambda y: y > 0, nums)\n\n\n#Example:\nnums = [1, 2, 3, -4, 5, 6, -7, 8, 9]\nprint(sum_positivenum(nums)([1, 2, 3, -4, 5, 6, -7, 8, 9]) # Output: 24 (1 + 2 + 3 + 5 + 6 + 8 + 9)\nprint(sum_positivenum([1, -2, 3, 4, 5, -6, 7, 8]) # Output: 22 (1 + 3 + 4 + 5 + 7 + 8)\n\n# Explanation:\n# In the first example, the output is 24 because the positive numbers in the list are 1, 2, 3, 5, 6, 8, and 9, which sum up to 24.\n# In the second example, the output is 22 because the positive numbers in the list are 1, 3, 4, 5, and 7, which sum up to 17. ",
        "generated_testcode": "assert sum_positivenum([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 25\n",
        "test": "assert sum_positivenum([2, 4, -6, -9, 11, -12, 14, -5, 17])==48\nassert sum_positivenum([10,15,-14,13,-18,12,-20])==50\nassert sum_positivenum([19, -65, 57, 39, 152,-639, 121, 44, 90, -190])==522",
        "canonical_solution": "def sum_positivenum(nums):\r\n  sum_positivenum = list(filter(lambda nums:nums>0,nums))\r\n  return sum(sum_positivenum)"
    },
    {
        "number": 871,
        "prompt": "Write a python function to check whether the given strings are rotations of each other or not.\ndef are_Rotations(string1,string2): \n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    if len(string1) != len(string2): \n        return False\n    concatenated_string = string1 + string1 \n    if string2 in concatenated_string: \n        return True \n    else: \n        return False\n\n# Test the function \nstring1 = input(\"Enter the first string: \") \nstring2 = input(\"Enter the second string: \") \nprint(are_Rotations(string1, string2)) ",
        "generated_testcode": "assert are_Rotations(\"waterbottle\",\"erbottlewat\") == True\n",
        "test": "assert are_Rotations(\"abc\",\"cba\") == False\nassert are_Rotations(\"abcd\",\"cdba\") == False\nassert are_Rotations(\"abacd\",\"cdaba\") == True",
        "canonical_solution": "def are_Rotations(string1,string2): \r\n    size1 = len(string1) \r\n    size2 = len(string2) \r\n    temp = '' \r\n    if size1 != size2: \r\n        return False\r\n    temp = string1 + string1 \r\n    if (temp.count(string2)> 0): \r\n        return True\r\n    else: \r\n        return False"
    },
    {
        "number": 872,
        "prompt": "Write a function to check if a nested list is a subset of another nested list.\ndef check_subset(list1,list2): \n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    if len(list1) > len(list2): \n        return False\n    for i in range(len(list1)): \n        if list1[i] not in list2: \n            return False\n        if type(list1[i]) == list: \n            if type(list2[i]) != list: \n                return False\n            return check_subset(list1[i],list2[i]) \n    return True\n    \n#Test cases ",
        "generated_testcode": "assert check_subset([[1,2,3], [4,5,6], [7,8]], [[1,2,3], [4,5,6], [7,8], [9,10]]) == False\n",
        "test": "assert check_subset([[1, 3], [5, 7], [9, 11], [13, 15, 17]] ,[[1, 3],[13,15,17]])==True\nassert check_subset([[1, 2], [2, 3], [3, 4], [5, 6]],[[3, 4], [5, 6]])==True\nassert check_subset([[[1, 2], [2, 3]], [[3, 4], [5, 7]]],[[[3, 4], [5, 6]]])==False",
        "canonical_solution": "def check_subset(list1,list2): \r\n    return all(map(list1.__contains__,list2)) "
    },
    {
        "number": 873,
        "prompt": "Write a function to solve the fibonacci sequence using recursion.\ndef fibonacci(n):\n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    if n <= 1:\n        return n\n    else:\n        return (fibonacci(n-1) + fibonacci(n-2))\n\n\n# Test the function\nprint(fibonacci(0)) # Output: 0\nprint(fibonacci(1)) # Output: 1\nprint(fibonacci(5)) # Output: 5\nprint(fibonacci(10)) # Output: 55\n",
        "generated_testcode": "assert fibonacci(0) == 0\n",
        "test": "assert fibonacci(7) == 13\nassert fibonacci(8) == 21\nassert fibonacci(9) == 34",
        "canonical_solution": "def fibonacci(n):\r\n  if n == 1 or n == 2:\r\n    return 1\r\n  else:\r\n    return (fibonacci(n - 1) + (fibonacci(n - 2)))"
    },
    {
        "number": 874,
        "prompt": "Write a python function to check if the string is a concatenation of another string.\ndef check_Concat(str1,str2):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": true,
        "answer": "    if str1 in str2:\n        return True\n    else:\n        return False\n\n#Test cases\nprint(check_Concat(\"hello\",\"hello world\")) #True\nprint(check_Concat(\"world\",\"hello world\")) #True\nprint(check_Concat(\"world\",\"hello\")) #False\nprint(check_Concat(\"abc\",\"defg\")) #False\nprint(check_Concat(\"abc\",\"\")) #False\nprint(check_Concat(\"\",\"\")) #False\nprint(check_Concat(\"abc\",\"abcabc\")) #True\n\n\n#Alternate solution using string slicing\ndef check_Concat(str1,str2):\n    if str2.count(str1) > 0:\n        return True\n    else:\n        return False\n\n#Test cases\nprint(check_Concat(\"hello\",\"hello world\")) #True\nprint(check_Concat(\"world\",\"hello world\")) #True\nprint(check_Concat(\"world\",\"hello\")) #False\nprint(check_Concat(\"abc\",\"defg\")) #False\nprint(check_Concat(\"abc\",\"\")) #False\nprint(check_Concat(\"\",\"\")) #False\nprint(check_Concat(\"abc\",\"abcabc\")) #True\n\n\n#Alternate solution using string slicing\ndef check_Concat(str1,str2):\n    if str1 in str2:\n        return True\n    else:\n        return False\n\n#Test cases\nprint(check_Concat(\"hello\",\"hello world\")) #True\nprint",
        "generated_testcode": "assert check_Concat(\"abc\",\"abcd\") == True\n",
        "test": "assert check_Concat(\"abcabcabc\",\"abc\") == True\nassert check_Concat(\"abcab\",\"abc\") == False\nassert check_Concat(\"aba\",\"ab\") == False",
        "canonical_solution": "def check_Concat(str1,str2):\r\n    N = len(str1)\r\n    M = len(str2)\r\n    if (N % M != 0):\r\n        return False\r\n    for i in range(N):\r\n        if (str1[i] != str2[i % M]):\r\n            return False         \r\n    return True"
    },
    {
        "number": 875,
        "prompt": "Write a function to find the minimum difference in the tuple pairs of given tuples.\ndef min_difference(test_list):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    test_list.sort()\n    min_diff = float('inf')\n    for i in range(len(test_list)-1):\n        if test_list[i+1] - test_list[i] < min_diff:\n            min_diff = test_list[i+1] - test_list[i]\n    return min_diff\n\n\n# Test the function\ntest_list = [(1, 5), (3, 8), (2, 9), (4, 11), (7, 12)]\nprint(min_difference(test_list))  # Output: 1\n\ntest_list = [(1, 2), (3, 4), (5, 6), (7, 8), (9, 10)]\nprint(min_difference(test_list))  # Output: 1\ntest_list = [(1, 100), (2, 20), (3, 5), (6, 9), (11, 14)]\nprint(min_difference(test_list))  # Output: 2\ntest_list = [(1, 2), (2, 10), (4, 7), (5, 12), (8, 13)]\nprint(min_difference(test_list))  # Output: 2\ntest_list = [(1, 100), (5, 20), (3, 6), (7, 14), (12,",
        "generated_testcode": "assert min_difference([(1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 0\n",
        "test": "assert min_difference([(3, 5), (1, 7), (10, 3), (1, 2)]) == 1\nassert min_difference([(4, 6), (12, 8), (11, 4), (2, 13)]) == 2\nassert min_difference([(5, 17), (3, 9), (12, 5), (3, 24)]) == 6",
        "canonical_solution": "def min_difference(test_list):\r\n  temp = [abs(b - a) for a, b in test_list]\r\n  res = min(temp)\r\n  return (res) "
    },
    {
        "number": 876,
        "prompt": "Write a python function to find lcm of two positive integers.\ndef lcm(x, y):\n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    if x > y:\n        greater = x\n    else:\n        greater = y\n\n    while True:\n        if greater % x == 0 and greater % y == 0:\n            lcm = greater\n            break\n        greater += 1\n\n    return lcm\n\n\n# Test the function\nprint(lcm(12, 18)) # Output: 36\nprint(lcm(24, 36)) # Output: 72\nprint(lcm(16, 20)) # Output: 40\nprint(lcm(100, 25)) # Output: 50\n",
        "generated_testcode": "assert lcm(3, 4) == 12\n",
        "test": "assert lcm(4,6) == 12\nassert lcm(15,17) == 255\nassert lcm(2,6) == 6",
        "canonical_solution": "def lcm(x, y):\r\n   if x > y:\r\n       z = x\r\n   else:\r\n       z = y\r\n   while(True):\r\n       if((z % x == 0) and (z % y == 0)):\r\n           lcm = z\r\n           break\r\n       z += 1\r\n   return lcm"
    },
    {
        "number": 877,
        "prompt": "Write a python function to sort the given string.\ndef sort_String(str) : \n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    char_list = list(str)\n    char_list.sort()\n    return ''.join(char_list)\n\n#Test the function with given test cases\nprint(sort_String(\"hello\")) # Output: \"ehllo\"\nprint(sort_String(\"world\")) # Output: \"dlowr\"\nprint(sort_String(\"race\")) # Output: \"ace\"\nprint(sort_String(\"apple\")) # Output: \"aelpp\" ",
        "generated_testcode": "assert sort_String(\"hello\") == \"ehllo\"\n",
        "test": "assert sort_String(\"cba\") == \"abc\"\nassert sort_String(\"data\") == \"aadt\"\nassert sort_String(\"zxy\") == \"xyz\"",
        "canonical_solution": "def sort_String(str) : \r\n    str = ''.join(sorted(str)) \r\n    return (str) "
    },
    {
        "number": 878,
        "prompt": "Write a function to check if the given tuple contains only k elements.\ndef check_tuples(test_tuple, K):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    if len(test_tuple) == K:\n        return True\n    else:\n        return False\n\n# Test cases\nprint(check_tuples((1,2,3,4), 3)) # True\nprint(check_tuples((1,2,3), 4) # False\nprint(check_tuples((\"a\", \"b\", \"c\", \"d\", \"e\"), 4) # False\nprint(check_tuples((1,2,3,4,5,6,7), 5) # False\nprint(check_tuples((1,2,3,4,5,6,7,8,9), 6) # True\nprint(check_tuples((\"a\",\"b\"), 2) # True\n\n\n# Optimized version\ndef check_tuples(test_tuple, K):\n    return len(test_tuple) == K\n",
        "generated_testcode": "assert check_tuples((1, 2, 3, 4, 5, 6, 7, 8, 9), 6) == True\n",
        "test": "assert check_tuples((3, 5, 6, 5, 3, 6),[3, 6, 5]) == True\nassert check_tuples((4, 5, 6, 4, 6, 5),[4, 5, 6]) == True\nassert check_tuples((9, 8, 7, 6, 8, 9),[9, 8, 1]) == False",
        "canonical_solution": "def check_tuples(test_tuple, K):\r\n  res = all(ele in K for ele in test_tuple)\r\n  return (res) "
    },
    {
        "number": 879,
        "prompt": "Write a function that matches a string that has an 'a' followed by anything, ending in 'b' by using regex.\ndef text_match(text):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": true,
        "answer": "    import re\n    pattern = r'a.*b'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False\n\nprint(text_match('abc')) # True\nprint(text_match('ab')) # False\nprint(text_match('axyzb')) # True\nprint(text_match('abcd')) # False\nprint(text_match('abba')) # False\nprint(text_match('abbab')) # True\nprint(text_match('a')) # False\nprint(text_match('b')) # False\nprint(text_match('acd')) # False\nprint(text_match('xayb')) # True\nprint(text_match('abab')) # False\nprint(text_match('a')) # False\nprint(text_match('')) # False\nprint(text_match('b')) # False\n\n\n# Explanation:\n# The regex pattern r'a.*b' matches any string that has 'a' followed by anything (the dot '.' matches any character) and ending with 'b'. \n# The function returns True if there is a match and False if there is no match. ",
        "generated_testcode": "assert text_match(\"ab\") == True\n",
        "test": "assert text_match(\"aabbbbd\") == 'Not matched!'\nassert text_match(\"aabAbbbc\") == 'Not matched!'\nassert text_match(\"accddbbjjjb\") == 'Found a match!'",
        "canonical_solution": "import re\r\ndef text_match(text):\r\n  patterns = 'a.*?b$'\r\n  if re.search(patterns,  text):\r\n    return ('Found a match!')\r\n  else:\r\n    return ('Not matched!')"
    },
    {
        "number": 880,
        "prompt": "Write a python function to find number of solutions in quadratic equation.\ndef Check_Solution(a,b,c) : \n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    if a == 0 :\n        return 0\n    else :\n        d = b**2 - 4*a*c\n        if d < 0 :\n            return 0\n        elif d == 0 :\n            return 1\n        else :\n            return 2\n\nprint(Check_Solution(2,-3,4)) # Output : 1\nprint(Check_Solution(1,-2,1)) # Output : 2\nprint(Check_Solution(1,3,4)) # Output : 0\n\n\n# Using quadratic formula to solve quadratic equation\ndef QuadraticEquationSolver(a,b,c):\n    if a == 0 :\n        return \"Invalid Input\"\n    else:\n        d = b**2 - 4*a*c\n        if d < 0 :\n            return \"No real solution\"\n        elif d == 0 :\n            x = (-b + math.sqrt(d))/2*a\n            return \"One solution: \" + str(x)\n        else:\n            x1 = (-b + math.sqrt(d))/2*a\n            x2 = (-b - math.sqrt(d))/2*a\n            return \"Two solutions: \" + str(x1) + \" and \" + str(x2)\n\nprint(QuadraticEquationSolver(2,-3,4)) # Output : \"One solution: 2.0\"\nprint(QuadraticEquationSolver(1,-2,1)) # Output",
        "generated_testcode": "assert Check_Solution(1, -3, 2) == 2\n",
        "test": "assert Check_Solution(2,5,2) == \"2 solutions\"\nassert Check_Solution(1,1,1) == \"No solutions\"\nassert Check_Solution(1,2,1) == \"1 solution\"",
        "canonical_solution": "def Check_Solution(a,b,c) : \r\n    if ((b*b) - (4*a*c)) > 0 : \r\n        return (\"2 solutions\") \r\n    elif ((b*b) - (4*a*c)) == 0 : \r\n        return (\"1 solution\") \r\n    else : \r\n        return (\"No solutions\") "
    },
    {
        "number": 881,
        "prompt": "Write a function to find the sum of first even and odd number of a given list.\ndef sum_even_odd(list1):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    even_sum = 0\n    odd_sum = 0\n    for i in list1:\n        if i%2 == 0:\n            even_sum += i\n        else:\n            odd_sum += i\n    return even_sum, odd_sum\n\n# Test the function with a sample list\nsample_list = [2, 5, 10, 7, 4, 9, 11, 6, 8]\nprint(sum_even_odd(sample_list)) # Output: (20, 18)\n\n# Test the function with another sample list\nsample_list = [1, 3, 4, 6, 8, 10, 5, 12]\nprint(sum_even_odd(sample_list)) # Output: (12, 12) ",
        "generated_testcode": "assert sum_even_odd([1,2,3,4,5,6,7,8,9]) == 10\n",
        "test": "assert sum_even_odd([1,3,5,7,4,1,6,8])==5\nassert sum_even_odd([1,2,3,4,5,6,7,8,9,10])==3\nassert sum_even_odd([1,5,7,9,10])==11",
        "canonical_solution": "def sum_even_odd(list1):\r\n    first_even = next((el for el in list1 if el%2==0),-1)\r\n    first_odd = next((el for el in list1 if el%2!=0),-1)\r\n    return (first_even+first_odd)"
    },
    {
        "number": 882,
        "prompt": "Write a function to caluclate perimeter of a parallelogram.\ndef parallelogram_perimeter(b,h):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    return 2 * (b + h)\n\nprint(parallelogram_perimeter(10, 20)) # should return 40 ",
        "generated_testcode": "assert parallelogram_perimeter(4, 6) == 16\n",
        "test": "assert parallelogram_perimeter(10,20)==400\nassert parallelogram_perimeter(15,20)==600\nassert parallelogram_perimeter(8,9)==144",
        "canonical_solution": "def parallelogram_perimeter(b,h):\r\n  perimeter=2*(b*h)\r\n  return perimeter"
    },
    {
        "number": 883,
        "prompt": "Write a function to find numbers divisible by m and n from a list of numbers using lambda function.\ndef div_of_nums(nums,m,n):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    div_nums = list(filter(lambda x: x%m==0 and x%n==0, nums))\n    return div_nums\n\nnums = [12, 15, 18, 20, 24, 25, 30, 36, 40, 45, 48]\nm = 3\nn = 6\nprint(div_of_nums(nums, m, n))\n\n# Output: [12, 18, 20, 24, 30, 48] ",
        "generated_testcode": "assert div_of_nums([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15], 3, 4) == [12, 15]\n",
        "test": "assert div_of_nums([19, 65, 57, 39, 152, 639, 121, 44, 90, 190],2,4)==[ 152,44]\nassert div_of_nums([1, 2, 3, 5, 7, 8, 10],2,5)==[10]\nassert div_of_nums([10,15,14,13,18,12,20],10,5)==[10,20]",
        "canonical_solution": "def div_of_nums(nums,m,n):\r\n result = list(filter(lambda x: (x % m == 0 and x % n == 0), nums)) \r\n return result"
    },
    {
        "number": 884,
        "prompt": "Write a python function to check whether all the bits are within a given range or not.\ndef all_Bits_Set_In_The_Given_Range(n,l,r): \n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    for i in range(0,32): \n        if (n & (1<<i)) < l or (n & (1<<i) > r): \n            return False\n    return True\n\n# Testing the function \nn = 10 \nl = 5\nr = 8\nprint(all_Bits_Set_In_The_Given_Range(n,l,r)) # Output: True \n\nn = 10 \nl = 15\nr = 8\nprint(all_Bits_Set_In_The_Given_Range(n,l,r)) # Output: False ",
        "generated_testcode": "assert all_Bits_Set_In_The_Given_Range(10, 1, 3) == True\n",
        "test": "assert all_Bits_Set_In_The_Given_Range(10,2,1) == True \nassert all_Bits_Set_In_The_Given_Range(5,2,4) == False\nassert all_Bits_Set_In_The_Given_Range(22,2,3) == True ",
        "canonical_solution": "def all_Bits_Set_In_The_Given_Range(n,l,r): \r\n    num = ((1 << r) - 1) ^ ((1 << (l - 1)) - 1) \r\n    new_num = n & num \r\n    if (num == new_num): \r\n        return True\r\n    return False"
    },
    {
        "number": 885,
        "prompt": "Write a python function to check whether the two given strings are isomorphic to each other or not.\ndef is_Isomorphic(str1,str2):          \n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": true,
        "answer": "    if len(str1) != len(str2):\n        return False\n    else:\n        mapping = {}\n        for i in range(len(str1)):\n            if str1[i] not in mapping:\n                mapping[str1[i]] = str2[i]\n            else:\n                if mapping[str1[i]] != str2[i]:\n                    return False\n        return True\n\n# Test the function\nprint(is_Isomorphic(\"abba\", \"dog\"))  #True\nprint(is_Isomorphic(\"abba\", \"cbad\")) #False\nprint(is_Isomorphic(\"foo\", \"bar\")) #False\nprint(is_Isomorphic(\"paper\", \"title\")) #True\nprint(is_Isomorphic(\"apple\", \"banana\")) #False\nprint(is_Isomorphic(\"apple\", \"apple\")) #True\nprint(is_Isomorphic(\"abcd\", \"dbca\")) #True\nprint(is_Isomorphic(\"abc\", \"def\")) #False\nprint(is_Isomorphic(\"abba\", \"dog\")) #False\n",
        "generated_testcode": "assert is_Isomorphic(\"egg\", \"add\") == True\n",
        "test": "assert is_Isomorphic(\"paper\",\"title\") == True\nassert is_Isomorphic(\"ab\",\"ba\") == True\nassert is_Isomorphic(\"ab\",\"aa\") == False",
        "canonical_solution": "def is_Isomorphic(str1,str2):          \r\n    dict_str1 = {}\r\n    dict_str2 = {}\r\n    for i, value in enumerate(str1):\r\n        dict_str1[value] = dict_str1.get(value,[]) + [i]        \r\n    for j, value in enumerate(str2):\r\n        dict_str2[value] = dict_str2.get(value,[]) + [j]\r\n    if sorted(dict_str1.values()) == sorted(dict_str2.values()):\r\n        return True\r\n    else:\r\n        return False"
    },
    {
        "number": 886,
        "prompt": "Write a function to add all the numbers in a list and divide it with the length of the list.\ndef sum_num(numbers):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    total = 0\n    length = len(numbers)\n    for num in numbers:\n        total += num\n    return total/length\n\n#Testing the function\nprint(sum_num([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\nprint(sum_num([10, 20, 30, 40, 50]))\nprint(sum_num([5, 5, 5, 5, 5, 5, 5]))\n\n#Example Output:\n#5.0\n#30.0\n#5.0\n\n#Alternatively, you can use the built-in function sum() and len() to achieve the same result\ndef sum_num_v2(numbers):\n    return sum(numbers)/len(numbers)\n\n#Testing the function\nprint(sum_num_v2([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\nprint(sum_num_v2([10, 20, 30, 40, 50]))\nprint(sum_num_v2([5, 5, 5, 5, 5, 5, 5]))\n\n#Example Output:\n#5.0\n#30.0\n#5.0 ",
        "generated_testcode": "assert sum_num([1, 2, 3, 4, 5]) == 15\n",
        "test": "assert sum_num((8, 2, 3, 0, 7))==4.0\nassert sum_num((-10,-20,-30))==-20.0\nassert sum_num((19,15,18))==17.333333333333332",
        "canonical_solution": "def sum_num(numbers):\r\n    total = 0\r\n    for x in numbers:\r\n        total += x\r\n    return total/len(numbers) "
    },
    {
        "number": 887,
        "prompt": "Write a python function to check whether the given number is odd or not using bitwise operator.\ndef is_odd(n) : \n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    if n & 1 : \n        return True\n    else : \n        return False\n\n# Test the function \nprint(is_odd(5)) # True\nprint(is_odd(6)) # False\nprint(is_odd(8)) # False ",
        "generated_testcode": "assert is_odd(7) == True\n",
        "test": "assert is_odd(5) == True\nassert is_odd(6) == False\nassert is_odd(7) == True",
        "canonical_solution": "def is_odd(n) : \r\n    if (n^1 == n-1) :\r\n        return True; \r\n    else :\r\n        return False; "
    },
    {
        "number": 888,
        "prompt": "Write a function to substract the elements of the given nested tuples.\ndef substract_elements(test_tup1, test_tup2):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    def substract_helper(tup1, tup2):\n        result = []\n        for i in range(len(tup1)):\n            if isinstance(tup1[i], tuple):\n                result.append(substract_helper(tup1[i], tup2[i]))\n            else:\n                result.append(tup1[i] - tup2[i])\n        return tuple(result)\n    return substract_helper(test_tup1, test_tup2)\n\n\n\n# Test cases\nprint(substract_elements(((1, (2, 3), (4, 5, (6, 7)), (8, 9, (10, 11, 12)), (13, 14, (15, 16, 17, (18, 19))), 20), (1, (2, 3, (4, 5), (6, 7, (8, 9), 10), (11, 12, (13, 14, 15, (16, 17)), 18)), 19, 20))\n# Output: (-1, (-1, -2, (2, -1, -1), (6, 3, (4, -1, (-2, -1)), 7), (-1, -1, (-1, -1, (-2, -1, -1), -1))), (-1)\n",
        "generated_testcode": "assert substract_elements(((1, (2, 3, 4), (5, 6, 7), (8, 9, 10)), (1, (2, 3, 4)) ) == (-1, (-3, -3, -3, -3)\n\n# Test case 2\n",
        "test": "assert substract_elements(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((-5, -4), (1, -4), (1, 8), (-6, 7))\nassert substract_elements(((13, 4), (14, 6), (13, 10), (12, 11)), ((19, 8), (14, 10), (12, 2), (18, 4))) == ((-6, -4), (0, -4), (1, 8), (-6, 7))\nassert substract_elements(((19, 5), (18, 7), (19, 11), (17, 12)), ((12, 9), (17, 11), (13, 3), (19, 5))) == ((7, -4), (1, -4), (6, 8), (-2, 7))",
        "canonical_solution": "def substract_elements(test_tup1, test_tup2):\r\n  res = tuple(tuple(a - b for a, b in zip(tup1, tup2))\r\n   for tup1, tup2 in zip(test_tup1, test_tup2))\r\n  return (res) "
    },
    {
        "number": 889,
        "prompt": "Write a function to reverse each list in a given list of lists.\ndef reverse_list_lists(lists):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": true,
        "answer": "    result = []\n    for lst in lists:\n        reversed_list = lst[::-1]\n        result.append(reversed_list)\n    return result\n\n\n# Test cases\nprint(reverse_list_lists([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11]])) # Output: [[4, 3, 2, 1], [8, 7, 6], [11, 10, 9]]\nprint(reverse_list_lists([[1, 2, 3], [4, 5], [6, 7, 8, 9], [10, 11]])) # Output: [[3, 2, 1], [5, 4], [9, 8, 7, 6], [11, 10]]\nprint(reverse_list_lists([[1, 2], [3, 4, 5], [6]])) # Output: [[5, 4, 3], [6]]\n\n\n# Time Complexity: O(N) - where N is the total number of elements in the input list\n# Space Complexity: O(N) - we are creating a new list to store the reversed elements of each list in the input list\n",
        "generated_testcode": "assert reverse_list_lists([[1, 2, 3], [4, 5, 6], [7, 8, 9]] ) == [[3, 2, 1], [6, 5, 4], [9, 8, 7]]\n",
        "test": "assert reverse_list_lists([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]])==[[4, 3, 2, 1], [8, 7, 6, 5], [12, 11, 10, 9], [16, 15, 14, 13]]\nassert reverse_list_lists([[1,2],[2,3],[3,4]])==[[2,1],[3,2],[4,3]]\nassert reverse_list_lists([[10,20],[30,40]])==[[20,10],[40,30]]",
        "canonical_solution": "def reverse_list_lists(lists):\r\n    for l in lists:\r\n        l.sort(reverse = True)\r\n    return lists "
    },
    {
        "number": 890,
        "prompt": "Write a python function to find the index of an extra element present in one sorted array.\ndef find_Extra(arr1,arr2,n) : \n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    i = j = 0\n    while i < n and j < n :\n        if arr1[i] < arr2[j] :\n            i += 1\n        elif arr1[i] > arr2[j] :\n            j += 1\n        else :\n            return i\n    return i \n\n#Driver Code\narr1 = [1,2,3,4,5,6,7,8,9,10]\narr2 = [1,2,4,5,6,7,8,9,10,11,12,13]\nn = len(arr1)\nprint(find_Extra(arr1,arr2,n))\n\n#Output: 5\n\n\narr1 = [1,2,3,4,5,6,7,8,9,10]\narr2 = [1,2,3,4,5,6,7,8,9,10]\nn = len(arr1)\nprint(find_Extra(arr1,arr2,n))\n\n#Output: 10\n\n\narr1 = [1,2,3,4,5,6,7,8,9,10,11]\narr2 = [1,2,3,4,5,6,7,8,9,10]\nn = len(arr1)\nprint(find_Extra(arr1,arr2,n))\n\n#Output: 10\n\n\narr1 = [1,2",
        "generated_testcode": "assert find_Extra([1,2,3,4,5,6,7,8,9], [1,2,3,4,5,6,7], 5) == 8\n",
        "test": "assert find_Extra([1,2,3,4],[1,2,3],3) == 3\nassert find_Extra([2,4,6,8,10],[2,4,6,8],4) == 4\nassert find_Extra([1,3,5,7,9,11],[1,3,5,7,9],5) == 5",
        "canonical_solution": "def find_Extra(arr1,arr2,n) : \r\n    for i in range(0, n) : \r\n        if (arr1[i] != arr2[i]) : \r\n            return i \r\n    return n "
    },
    {
        "number": 891,
        "prompt": "Write a python function to check whether the given two numbers have same number of digits or not.\ndef same_Length(A,B): \n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    if len(str(A)==len(str(B)):\n        return True\n    else:\n        return False\n\n# Test the function with sample inputs\nprint(same_Length(123, 456)) # True\nprint(same_Length(12, 45)) # False\nprint(same_Length(1234, 56)) # True\nprint(same_Length(1234, 56789)) # False ",
        "generated_testcode": "assert same_Length(123, 456) == False\n",
        "test": "assert same_Length(12,1) == False\nassert same_Length(2,2) == True\nassert same_Length(10,20) == True",
        "canonical_solution": "def same_Length(A,B): \r\n    while (A > 0 and B > 0): \r\n        A = A / 10; \r\n        B = B / 10; \r\n    if (A == 0 and B == 0): \r\n        return True; \r\n    return False; "
    },
    {
        "number": 892,
        "prompt": "Write a function to remove multiple spaces in a string.\ndef remove_spaces(text):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    result = \"\"\n    for i in range(len(text)):\n        if text[i] != \" \":\n            result += text[i]\n    return result\n\nprint(remove_spaces(\"   hello    world   \")) # Output: \"helloworld\"\n\n# Using replace() method\ndef remove_spaces(text):\n    return text.replace(\" \",\"\")\n\nprint(remove_spaces(\"   hello    world   \")) # Output: \"helloworld\"\n\n# Using regex\nimport re\ndef remove_spaces(text):\n    return re.sub(\" \",\"\", text)\n\nprint(remove_spaces(\"   hello    world   \")) # Output: \"helloworld\"\n",
        "generated_testcode": "assert remove_spaces(\"hello  world\") == \"hello world\"\n",
        "test": "assert remove_spaces('python  program')==('python program')\nassert remove_spaces('python   programming    language')==('python programming language')\nassert remove_spaces('python                     program')==('python program')",
        "canonical_solution": "import re\r\ndef remove_spaces(text):\r\n return (re.sub(' +',' ',text))"
    },
    {
        "number": 893,
        "prompt": "Write a python function to get the last element of each sublist.\ndef Extract(lst): \n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    result = [] \n    for sublist in lst: \n        result.append(sublist[-1]) \n    return result ",
        "generated_testcode": "assert Extract([[1,2,3,4],[5,6,7],[8,9,10]) == [4, 7, 10]\n",
        "test": "assert Extract([[1, 2, 3], [4, 5], [6, 7, 8, 9]]) == [3, 5, 9]\nassert Extract([['x', 'y', 'z'], ['m'], ['a', 'b'], ['u', 'v']]) == ['z', 'm', 'b', 'v']\nassert Extract([[1, 2, 3], [4, 5]]) == [3, 5]",
        "canonical_solution": "def Extract(lst): \r\n    return [item[-1] for item in lst] "
    },
    {
        "number": 894,
        "prompt": "Write a function to convert the given string of float type into tuple.\ndef float_to_tuple(test_str):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    #your code goes here\n    try:\n        return tuple(float(test_str))\n    except ValueError:\n        return None\n\n#test the function with given test cases\nprint(float_to_tuple(\"1.23\"))\nprint(float_to_tuple(\"2.5\"))\nprint(float_to_tuple(\"-3.45\"))\nprint(float_to_tuple(\"12.67\"))\nprint(float_to_tuple(\"-9.87\"))\nprint(float_to_tuple(\"abc\"))\nprint(float_to_tuple(\"1.23.45\"))\nprint(float_to_tuple(\"\"))\n\n#Output:\n#(1.23,)\n#(2.5,)\n#(-3.45,)\n#(12.67,)\n#(-9.87,)\n#None\n#None\n",
        "generated_testcode": "assert float_to_tuple(\"12.34\") == (12, 34)\n",
        "test": "assert float_to_tuple(\"1.2, 1.3, 2.3, 2.4, 6.5\") == (1.2, 1.3, 2.3, 2.4, 6.5)\nassert float_to_tuple(\"2.3, 2.4, 5.6, 5.4, 8.9\") == (2.3, 2.4, 5.6, 5.4, 8.9)\nassert float_to_tuple(\"0.3, 0.5, 7.8, 9.4\") == (0.3, 0.5, 7.8, 9.4)",
        "canonical_solution": "def float_to_tuple(test_str):\r\n  res = tuple(map(float, test_str.split(', ')))\r\n  return (res) "
    },
    {
        "number": 895,
        "prompt": "Write a function to find the maximum sum of subsequences of given array with no adjacent elements.\ndef max_sum_subseq(A):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    n = len(A)\n    if n == 0:\n        return 0\n    dp = [0] * n\n    dp[0] = A[0]\n    for i in range(1, n):\n        dp[i] = max(A[i], A[i] + dp[i-1])\n    max_sum = dp[0]\n    for i in range(1, n):\n        for j in range(i):\n            if A[i] > A[j]:\n                dp[i] = max(dp[i], A[i] + dp[j])\n            max_sum = max(max_sum, dp[i])\n    return max_sum\n\n\n# Test cases\nprint(max_sum_subseq([2, 4, 3, 5, 1, 8])) # Output: 10\nprint(max_sum_subseq([1, 3, -1, -2, 5, -4])) # Output: 7\nprint(max_sum_subseq([1, 2, 3, 4])) # Output: 9\nprint(max_sum_subseq([1, -1, -2, -3, -4])) # Output: 0\nprint(max_sum_subseq([])) # Output: 0\nprint(max_sum_subseq([1])) # Output: 1\nprint(max_sum_subseq([1, 1, 1, 1]))",
        "generated_testcode": "assert max_sum_subseq([1, 2, 3, 4, 5, 3, 4, 2, 6, 1, 7, 8, 9]) == 31\n",
        "test": "assert max_sum_subseq([1, 2, 9, 4, 5, 0, 4, 11, 6]) == 26\nassert max_sum_subseq([1, 2, 9, 5, 6, 0, 5, 12, 7]) == 28\nassert max_sum_subseq([1, 3, 10, 5, 6, 0, 6, 14, 21]) == 44",
        "canonical_solution": "def max_sum_subseq(A):\r\n    n = len(A)\r\n    if n == 1:\r\n        return A[0]\r\n    look_up = [None] * n\r\n    look_up[0] = A[0]\r\n    look_up[1] = max(A[0], A[1])\r\n    for i in range(2, n):\r\n        look_up[i] = max(look_up[i - 1], look_up[i - 2] + A[i])\r\n        look_up[i] = max(look_up[i], A[i])\r\n    return look_up[n - 1]"
    },
    {
        "number": 896,
        "prompt": "Write a function to sort a list in increasing order by the last element in each tuple from a given list of non-empty tuples.\ndef last(n):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    return sorted(n, key=lambda x: x[-1])\n\n# Test cases\nprint(last([(1, 2, 3, 4, 5), (5, 6, 7, 2), (9, 4, 0), (3, 8, 9)]))\n# Output: [(3, 8, 9), (1, 2, 3), (9, 4, 0), (5, 6, 7, 2)]\nprint(last([(1, 2, 3, 4), (4, 3, 2, 1), (3, 2, 1), (2, 1)]))\n# Output: [(2, 1), (1, 2, 3), (3, 2, 1), (4, 3, 2, 1)]\nprint(last([(2, 4, 6), (1, 3, 5), (2, 3, 1, 4), (1, 2, 3, 5), (2, 4, 1, 3)]))\n# Output: [(2, 4, 6), (1, 2, 3, 5), (2, 3, 1, 4), (1, 2, 3, 5), (2, 4, 1, 3)] ",
        "generated_testcode": "assert last([(1,2,3), (4,5,6), (7,8,9), (10,11,12)] == [(10,11,12), (1,2,3), (4,5,6), (7,8,9)]\n",
        "test": "assert sort_list_last([(2, 5), (1, 2), (4, 4), (2, 3), (2, 1)])==[(2, 1), (1, 2), (2, 3), (4, 4), (2, 5)] \nassert sort_list_last([(9,8), (4, 7), (3,5), (7,9), (1,2)])==[(1,2), (3,5), (4,7), (9,8), (7,9)] \nassert sort_list_last([(20,50), (10,20), (40,40)])==[(10,20),(40,40),(20,50)] ",
        "canonical_solution": "def last(n):\r\n   return n[-1]\r\ndef sort_list_last(tuples):\r\n  return sorted(tuples, key=last)"
    },
    {
        "number": 897,
        "prompt": "Write a python function to check whether the word is present in a given sentence or not.\ndef is_Word_Present(sentence,word): \n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    if word in sentence: \n        return True \n    else: \n        return False \n\n#Example \nsentence = \"The quick brown fox jumps over the lazy dog\"\nword = \"fox\"\nprint(is_Word_Present(sentence, word)) #Output: True ",
        "generated_testcode": "assert is_Word_Present(\"The quick brown fox jumps over the lazy dog\", \"fox\") == True\n",
        "test": "assert is_Word_Present(\"machine learning\",\"machine\") == True\nassert is_Word_Present(\"easy\",\"fun\") == False\nassert is_Word_Present(\"python language\",\"code\") == False",
        "canonical_solution": "def is_Word_Present(sentence,word): \r\n    s = sentence.split(\" \") \r\n    for i in s:  \r\n        if (i == word): \r\n            return True\r\n    return False"
    },
    {
        "number": 898,
        "prompt": "Write a function to extract specified number of elements from a given list, which follow each other continuously.\ndef extract_elements(numbers, n):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    result = []\n    i = 0\n    while i < len(numbers):\n        current_group = []\n        for j in range(n):\n            if i < len(numbers):\n                current_group.append(numbers[i])\n                i += 1\n            else:\n                break\n        result.append(current_group)\n    return result\n\n# Test cases\nprint(extract_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2)) # [[1, 2], [3, 4], [5, 6], [7, 8], [9, 10]]\nprint(extract_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], 3)) # [[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12]]\nprint(extract_elements([1, 2, 3, 4, 5, 6, 7, 8, 9], 4)) # [[1, 2, 3, 4, 5], [5, 6, 7, 8, 9]]\nprint(extract_elements([1, 2, 3], 1)) # [[1], [2], [3]]\nprint(extract_elements([",
        "generated_testcode": "assert extract_elements(list(range(10), 3) == [0, 1, 2]\n",
        "test": "assert extract_elements([1, 1, 3, 4, 4, 5, 6, 7],2)==[1, 4]\nassert extract_elements([0, 1, 2, 3, 4, 4, 4, 4, 5, 7],4)==[4]\nassert extract_elements([0,0,0,0,0],5)==[0]",
        "canonical_solution": "from itertools import groupby \r\ndef extract_elements(numbers, n):\r\n    result = [i for i, j in groupby(numbers) if len(list(j)) == n] \r\n    return result"
    },
    {
        "number": 899,
        "prompt": "Write a python function to check whether an array can be sorted or not by picking only the corner elements.\ndef check(arr,n): \n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    for i in range(1,n): \n        if arr[i] < arr[i-1]: \n            return False\n    return True\n\ndef sorted_array(arr): \n    n = len(arr) \n    if n == 1 or check(arr,n): \n        return True\n    else: \n        return False\n\n# Test the function \narr = [1, 3, 5, 2, 7, 4, 6, 8, 9, 10, 12, 11, 15] \nn = len(arr) \nif sorted_array(arr): \n    print(\"The array can be sorted\") \nelse: \n    print(\"The array cannot be sorted\") ",
        "generated_testcode": "assert check([1, 2, 3, 4, 5, 6, 7, 8, 9], 6) == True\n",
        "test": "assert check([3,2,1,2,3,4],6) == True\nassert check([2,1,4,5,1],5) == True\nassert check([1,2,2,1,2,3],6) == True",
        "canonical_solution": "def check(arr,n): \r\n    g = 0 \r\n    for i in range(1,n): \r\n        if (arr[i] - arr[i - 1] > 0 and g == 1): \r\n            return False\r\n        if (arr[i] - arr[i] < 0): \r\n            g = 1\r\n    return True"
    },
    {
        "number": 900,
        "prompt": "Write a function where a string will start with a specific number.\ndef match_num(string):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    num = 1234\n    if string.startswith(str(num):\n        return True\n    else:\n        return False\n\n# Test the function\nprint(match_num(\"12345abc\")) # True\nprint(match_num(\"56789def\")) # False\nprint(match_num(\"1234xyz\")) # True\nprint(match_num(\"7890123\")) # False\n",
        "generated_testcode": "assert match_num(\"123456789\") == \"123456789\"\n",
        "test": "assert match_num('5-2345861')==True\nassert match_num('6-2345861')==False\nassert match_num('78910')==False",
        "canonical_solution": "import re\r\ndef match_num(string):\r\n    text = re.compile(r\"^5\")\r\n    if text.match(string):\r\n        return True\r\n    else:\r\n        return False"
    },
    {
        "number": 901,
        "prompt": "Write a function to find the smallest multiple of the first n numbers.\ndef smallest_multiple(n):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": true,
        "answer": "    def gcd(a, b):\n        if b == 0:\n            return a\n        return gcd(b, a % b)\n\n    def lcm(a, b):\n        return (a * b) // gcd(a, b)\n\n    result = 1\n    for i in range(1, n + 1):\n        result = lcm(result, i)\n    return result\n\nprint(smallest_multiple(10))  # Output: 2520\nprint(smallest_multiple(20))  # Output: 232792560\n\n# Time Complexity: O(n)\n# Space Complexity: O(1)\n",
        "generated_testcode": "assert smallest_multiple(5) == 60\n",
        "test": "assert smallest_multiple(13)==360360\nassert smallest_multiple(2)==2\nassert smallest_multiple(1)==1",
        "canonical_solution": "def smallest_multiple(n):\r\n    if (n<=2):\r\n      return n\r\n    i = n * 2\r\n    factors = [number  for number in range(n, 1, -1) if number * 2 > n]\r\n    while True:\r\n        for a in factors:\r\n            if i % a != 0:\r\n                i += n\r\n                break\r\n            if (a == factors[-1] and i % a == 0):\r\n                return i"
    },
    {
        "number": 902,
        "prompt": "Write a function to combine two dictionaries by adding values for common keys.\ndef add_dict(d1,d2):\n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    result = {}\n    for key in d1:\n        if key in d2:\n            result[key] = d1[key] + d2[key]\n        else:\n            result[key] = d1[key]\n    for key in d2:\n        if key in result:\n            continue\n        else:\n            result[key] = d2[key]\n    return result\n\n#Test the function\nd1 = {'a': 1, 'b': 2, 'c': 3, 'd': 4}\nd2 = {'b': 3, 'c': 4, 'e': 5, 'f': 6}\nprint(add_dict(d1,d2)) # {'a': 1, 'b': 5, 'c': 7, 'd': 4, 'e': 5, 'f': 6}\n\nd1 = {'a': 1, 'b': 2, 'c': 3}\nd2 = {'b': 4, 'c': 5, 'd': 6}\nprint(add_dict(d1,d2)) # {'a': 1, 'b': 6, 'c': 8, 'd': 6}\n\nd1 = {'a': 1, 'b': 2}\nd2 = {'c': 3, 'd': 4}\nprint(add_dict(d1,d2)) # {'a': 1, 'b': 2, 'c': ",
        "generated_testcode": "assert add_dict({'a': 1, 'b': 2, 'c': 3}, {'a': 2, 'b': 3, 'd': 4}) == {'a': 3, 'b': 5, 'c': 3, 'd': 4}\n",
        "test": "assert add_dict({'a': 100, 'b': 200, 'c':300},{'a': 300, 'b': 200, 'd':400})==({'b': 400, 'd': 400, 'a': 400, 'c': 300}) \nassert add_dict({'a': 500, 'b': 700, 'c':900},{'a': 500, 'b': 600, 'd':900})==({'b': 1300, 'd': 900, 'a': 1000, 'c': 900}) \nassert add_dict({'a':900,'b':900,'d':900},{'a':900,'b':900,'d':900})==({'b': 1800, 'd': 1800, 'a': 1800})",
        "canonical_solution": "from collections import Counter\r\ndef add_dict(d1,d2):\r\n   add_dict = Counter(d1) + Counter(d2)\r\n   return add_dict"
    },
    {
        "number": 903,
        "prompt": "Write a python function to count the total unset bits from 1 to n.\ndef count_Unset_Bits(n) :  \n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": true,
        "answer": "    count = 0\n    while n:  \n        count += n & 1\n        n >>= 1\n    return count  \n  \n# Function to count the set bits in binary representation of a number \ndef count_set_bits(n): \n    count = 0\n    while (n): \n        count += n & 1\n        n >>= 1\n    return count \n  \n# Function to count the total number of bits in a given number \ndef count_bits(n): \n    count = 0\n    while (n): \n        count += n & 1\n        n >>= 1\n    return count \n  \n# Function to count the total number of unset bits from 1 to n \ndef count_unset_bits(n): \n    count = 0\n    for i in range(1, n+1): \n        count += count_Unset_Bits(i) \n    return count \n  \n# Test the function \nn = 15\nprint(\"Total number of unset bits from 1 to\", n, \"is\", count_unset_bits(n)) ",
        "generated_testcode": "assert count_Unset_Bits(10) == 2\n",
        "test": "assert count_Unset_Bits(2) == 1\nassert count_Unset_Bits(5) == 4\nassert count_Unset_Bits(14) == 17",
        "canonical_solution": "def count_Unset_Bits(n) :  \r\n    cnt = 0;  \r\n    for i in range(1,n + 1) : \r\n        temp = i;  \r\n        while (temp) :  \r\n            if (temp % 2 == 0) : \r\n                cnt += 1;  \r\n            temp = temp // 2;  \r\n    return cnt;  "
    },
    {
        "number": 904,
        "prompt": "Write a function to return true if the given number is even else return false.\ndef even_num(x):\n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    if x % 2 == 0:\n        return True\n    else:\n        return False\n\n#Test the function with some inputs\nprint(even_num(4)) #True\nprint(even_num(7)) #False\nprint(even_num(0)) #True\n\n\n#Write a function to return true if a number is divisible by 5 else return false\ndef divisible_by_5(num):\n    if num % 5 == 0:\n        return True\n    else:\n        return False\n\n#Test the function with some inputs\nprint(divisible_by_5(10)) #True\nprint(divisible_by_5(7)) #False\nprint(divisible_by_5(20)) #True\nprint(divisible_by_5(15)) #True\n\n\n#Write a function to find if the given number is positive or negative\ndef positive_or_negative(num):\n    if num > 0:\n        return \"positive\"\n    elif num < 0:\n        return \"negative\"\n    else:\n        return \"zero\"\n\n#Test the function with some inputs\nprint(positive_or_negative(5)) #positive\nprint(positive_or_negative(0)) #zero\nprint(positive_or_negative(-5)) #negative\n\n\n#Write a function to return the sum of two numbers\ndef sum_of_two_numbers(a, b):\n    return a + b\n\n#Test the function",
        "generated_testcode": "assert even_num(4) == True\n",
        "test": "assert even_num(13.5)==False\nassert even_num(0)==True\nassert even_num(-9)==False",
        "canonical_solution": "def even_num(x):\r\n  if x%2==0:\r\n     return True\r\n  else:\r\n    return False"
    },
    {
        "number": 905,
        "prompt": "Write a python function to find the sum of squares of binomial co-efficients.\ndef factorial(start,end): \n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    fact = 1\n    for i in range(start,end+1): \n        fact *= i \n    return fact \n  \ndef sum_of_binomial_coefficients(n): \n    result = 0\n    for i in range(0, n+1): \n        result += (factorial(n) / (factorial(i) * factorial(n-i))) \n    return int(result) \n  \nn = 10 \nprint(sum_of_binomial_coefficients(n)) ",
        "generated_testcode": "assert factorial(0,5) == 120\n",
        "test": "assert sum_of_square(4) == 70\nassert sum_of_square(5) == 252\nassert sum_of_square(2) == 6",
        "canonical_solution": "def factorial(start,end): \r\n    res = 1 \r\n    for i in range(start,end + 1): \r\n        res *= i      \r\n    return res \r\ndef sum_of_square(n): \r\n   return int(factorial(n + 1, 2 * n)  /factorial(1, n)) "
    },
    {
        "number": 906,
        "prompt": "Write a function to extract year, month and date from a url by using regex.\ndef extract_date(url):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    import re\n    pattern = r\"(?P<year>\\d{4})-(?P<month>\\d{2})-(?P<date>\\d{2})\"\n    match = re.search(pattern, url)\n    if match:\n        return match.group(\"year\"), match.group(\"month\"), match.group(\"date\")\n    else:\n        return None\n\n\nurl = \"https://www.example.com/articles/2021-01-01/article-title\"\nyear, month, date = extract_date(url)\nif year and month and date:\n    print(f\"Year: {year}, Month: {month}, Date: {date}\")\nelse:\n    print(\"Date not found in the URL\")\n",
        "generated_testcode": "assert extract_date(\"https://www.example.com/blog/2019/05/12/my-blog-post\") == (\"2019\", \"05\", \"12\")\n",
        "test": "assert extract_date(\"https://www.washingtonpost.com/news/football-insider/wp/2016/09/02/odell-beckhams-fame-rests-on-one-stupid-little-ball-josh-norman-tells-author/\") == [('2016', '09', '02')]\nassert extract_date(\"https://www.indiatoday.in/movies/celebrities/story/wp/2020/11/03/odeof-sushant-singh-rajput-s-death-his-brother-in-law-shares-advice-for-fans-1749646/\") == [('2020', '11', '03')]\nassert extract_date(\"https://economictimes.indiatimes.com/news/economy/2020/12/29/finance/pension-assets-under-pfrda-touch-rs-5-32-lakh-crore/articleshow/79736619.cms\") == [('2020', '12', '29')]",
        "canonical_solution": "import re\r\ndef extract_date(url):\r\n        return re.findall(r'/(\\d{4})/(\\d{1,2})/(\\d{1,2})/', url)"
    },
    {
        "number": 907,
        "prompt": "Write a function to print the first n lucky numbers.\ndef lucky_num(n):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    num = 7\n    count = 0\n    while count < n:\n        if sum(int(digit) for digit in str(num)) == 7:\n            print(num)\n            count += 1\n        num += 1\n\n# Test the function with n = 5\nlucky_num(5) ",
        "generated_testcode": "assert lucky_num(5) == [1, 2, 3, 5, 7, 13, 23]\n",
        "test": "assert lucky_num(10)==[1, 3, 7, 9, 13, 15, 21, 25, 31, 33] \nassert lucky_num(5)==[1, 3, 7, 9, 13]\nassert lucky_num(8)==[1, 3, 7, 9, 13, 15, 21, 25]",
        "canonical_solution": "def lucky_num(n):\r\n List=range(-1,n*n+9,2)\r\n i=2\r\n while List[i:]:List=sorted(set(List)-set(List[List[i]::List[i]]));i+=1\r\n return List[1:n+1]"
    },
    {
        "number": 908,
        "prompt": "Write a function to find the fixed point in the given array.\ndef find_fixed_point(arr, n): \n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    # Traverse the array and check if the element is equal to its index\n    for i in range(n):\n        if arr[i] == i:\n            return i\n    # If no fixed point is found, return -1\n    return -1\n\n# Test the function with an example array\narr = [10, 5, 20, 3, 7, 1, 9, 1, 8, 10, 15]\nn = len(arr)\nprint(find_fixed_point(arr, n))\n",
        "generated_testcode": "assert find_fixed_point([1, 2, 3, 5, 4, 4, 1], 5) == 3\n",
        "test": "assert find_fixed_point([-10, -1, 0, 3, 10, 11, 30, 50, 100],9) == 3\nassert find_fixed_point([1, 2, 3, 4, 5, 6, 7, 8],8) == -1\nassert find_fixed_point([0, 2, 5, 8, 17],5) == 0",
        "canonical_solution": "def find_fixed_point(arr, n): \r\n\tfor i in range(n): \r\n\t\tif arr[i] is i: \r\n\t\t\treturn i \r\n\treturn -1"
    },
    {
        "number": 909,
        "prompt": "Write a function to find the previous palindrome of a specified number.\ndef previous_palindrome(num):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    if num < 10:\n        return None\n    num_str = str(num)\n    while True:\n        num -= 1\n        if str(num) == str(num)[::-1]:\n            return num\n\n\n\n# Test cases\nprint(previous_palindrome(12321))  # Output: 1231\nprint(previous_palindrome(12345))  # Output: 12334\nprint(previous_palindrome(10))  # Output: None\nprint(previous_palindrome(99))  # Output: 99\nprint(previous_palindrome(11))  # Output: 10\nprint(previous_palindrome(100))  # Output: 9\nprint(previous_palindrome(123456))  # Output: 12345\nprint(previous_palindrome(123210))  # Output: 12321\nprint(previous_palindrome(10001))  # Output: 10000\nprint(previous_palindrome(1234567))  # Output: 123456\nprint(previous_palindrome(123201))  # Output: 12321\nprint(previous_palindrome(1234456))  # Output: 123455\n",
        "generated_testcode": "assert previous_palindrome(12321) == 1231\n",
        "test": "assert previous_palindrome(99)==88\nassert previous_palindrome(1221)==1111\nassert previous_palindrome(120)==111",
        "canonical_solution": "def previous_palindrome(num):\r\n    for x in range(num-1,0,-1):\r\n        if str(x) == str(x)[::-1]:\r\n            return x"
    },
    {
        "number": 910,
        "prompt": "Write a function to validate a gregorian date.\ndef check_date(m, d, y):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    if m < 1 or m > 12 or d < 1 or d > 31:\n        return False\n    if y < 1 or y > 999999:\n        return False\n    if m == 2 and d == 29 and y % 4 != 0:\n        return False\n    if m in [4, 6, 9, 110] and d > 30:\n        return False\n    if m in [1, 3, 5, 7, 8, 11, 12] and d > 31:\n        return False\n    if m in [4, 6, 8, 9, 11] and d > 30:\n        return False\n    return True\n\n# Test cases\nprint(check_date(2, 29, 20000)) # True\nprint(check_date(2, 30, 2020)) # False\nprint(check_date(2, 29, 2021)) # False\nprint(check_date(2, 29, 20004)) # True\nprint(check_date(2, 29, 20015)) # False\nprint(check_date(2, 29, 20020)) # False\nprint(check_date(2, 29, 2024)) # False\nprint(check_date(2, 29,",
        "generated_testcode": "assert check_date(2, 29, 2020) == True\n",
        "test": "assert check_date(11,11,2002)==True\nassert check_date(13,11,2002)==False\nassert check_date('11','11','2002')==True",
        "canonical_solution": "import datetime\r\ndef check_date(m, d, y):\r\n    try:\r\n        m, d, y = map(int, (m, d, y))\r\n        datetime.date(y, m, d)\r\n        return True\r\n    except ValueError:\r\n        return False"
    },
    {
        "number": 911,
        "prompt": "Write a function to compute maximum product of three numbers of a given array of integers using heap queue algorithm.\ndef maximum_product(nums):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    nums.sort()\n    n = len(nums)\n    if n < 3:\n        return None\n    elif n == 3:\n        return nums[0] * nums[1] * nums[2]\n    elif n > 3:\n        return max(nums[0] * nums[1] * nums[n-1], nums[0] * nums[n-1] * nums[n-2])\n    else:\n        return None\n\n\n# Test cases\nprint(maximum_product([-10, 2, 3, 5, 6, 8])) # 300\nprint(maximum_product([1, 2, 3, 4])) # 36\nprint(maximum_product([-10, -10, -10])) # 0\nprint(maximum_product([1, 2, 3])) # 6\nprint(maximum_product([-10, -10, 1])) # 0\nprint(maximum_product([-10, 10, 0])) # 0\nprint(maximum_product([-10, 10])) # 0\nprint(maximum_product([10, 2, 3, 5, 6, 8])) # 30\nprint(maximum_product([1, 2, 3, 4, 5])) # 60\nprint(maximum_product([-10,",
        "generated_testcode": "assert maximum_product([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 398\n",
        "test": "assert maximum_product( [12, 74, 9, 50, 61, 41])==225700\nassert maximum_product([25, 35, 22, 85, 14, 65, 75, 25, 58])==414375\nassert maximum_product([18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1])==2520",
        "canonical_solution": "def maximum_product(nums):\r\n    import heapq\r\n    a, b = heapq.nlargest(3, nums), heapq.nsmallest(2, nums)\r\n    return max(a[0] * a[1] * a[2], a[0] * b[0] * b[1])"
    },
    {
        "number": 912,
        "prompt": "Write a function to find ln, m lobb number.\ndef binomial_coeff(n, k): \n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    if k == 0 or k == n: \n        return 1\n    return (binomial_coeff(n-1, k-1) + binomial_coeff(n-1, k)) \n\ndef ln_m_lobb_number(n, k): \n    return binomial_coeff(n, k) * (1/2**k) * (1/k)\n\n#Test cases\nprint(ln_m_lobb_number(5, 2)) # Output: 1.618033398887498948484\nprint(ln_m_lobb_number(10, 3)) # Output: 3.0631824142637292143\nprint(ln_m_lobb_number(15, 5)) # Output: 4.2760240131495890778",
        "generated_testcode": "assert binomial_coeff(5, 2) == 10\n",
        "test": "assert int(lobb_num(5, 3)) == 35\nassert int(lobb_num(3, 2)) == 5\nassert int(lobb_num(4, 2)) == 20",
        "canonical_solution": "def binomial_coeff(n, k): \r\n\tC = [[0 for j in range(k + 1)] \r\n\t\t\tfor i in range(n + 1)] \r\n\tfor i in range(0, n + 1): \r\n\t\tfor j in range(0, min(i, k) + 1): \r\n\t\t\tif (j == 0 or j == i): \r\n\t\t\t\tC[i][j] = 1\r\n\t\t\telse: \r\n\t\t\t\tC[i][j] = (C[i - 1][j - 1] \r\n\t\t\t\t\t\t\t+ C[i - 1][j]) \r\n\treturn C[n][k] \r\ndef lobb_num(n, m): \r\n\treturn (((2 * m + 1) *\r\n\t\tbinomial_coeff(2 * n, m + n)) \r\n\t\t\t\t\t/ (m + n + 1))"
    },
    {
        "number": 913,
        "prompt": "Write a function to check for a number at the end of a string.\ndef end_num(string):\n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    try:\n        int(string[-1])\n        return True\n    except ValueError:\n        return False\n\n\n# Test cases\nprint(end_num(\"hello1\")) # True\nprint(end_num(\"world\")) # False\nprint(end_num(\"12345\")) # True\nprint(end_num(\"apple\")) # False\nprint(end_num(\"test1\")) # True\nprint(end_num(\"5678test\")) # True\nprint(end_num(\"98765\")) # True\nprint(end_num(\"foo\")) # False\nprint(end_num(\"bar6\")) # True\n",
        "generated_testcode": "assert end_num(\"hello123\") == True\n",
        "test": "assert end_num('abcdef')==False\nassert end_num('abcdef7')==True\nassert end_num('abc')==False",
        "canonical_solution": "import re\r\ndef end_num(string):\r\n    text = re.compile(r\".*[0-9]$\")\r\n    if text.match(string):\r\n        return True\r\n    else:\r\n        return False"
    },
    {
        "number": 914,
        "prompt": "Write a python function to check whether the given string is made up of two alternating characters or not.\ndef is_Two_Alter(s):  \n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    count = 0\n    for i in range(len(s)-1):\n        if s[i] == s[i+1]:\n            count += 1\n    if count == 0 or count == len(s)-1:\n        return True\n    return False\n\n#Test the function\nprint(is_Two_Alter(\"AaBbCcDd\"))\nprint(is_Two_Alter(\"AaBbcDd\"))\nprint(is_Two_Alter(\"ABAB\"))\nprint(is_Two_Alter(\"AaBBBcCc\"))\nprint(is_Two_Alter(\"ABCD\"))\nprint(is_Two_Alter(\"AaAaBbBbCcCc\")) ",
        "generated_testcode": "assert is_Two_Alter(\"abba\") == False\n",
        "test": "assert is_Two_Alter(\"abab\") == True\nassert is_Two_Alter(\"aaaa\") == False\nassert is_Two_Alter(\"xyz\") == False",
        "canonical_solution": "def is_Two_Alter(s):  \r\n    for i in range (len( s) - 2) : \r\n        if (s[i] != s[i + 2]) : \r\n            return False\r\n    if (s[0] == s[1]): \r\n        return False\r\n    return True"
    },
    {
        "number": 915,
        "prompt": "Write a function to rearrange positive and negative numbers in a given array using lambda function.\ndef rearrange_numbs(array_nums):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    positive_nums = list(filter(lambda x: x>0, array_nums))\n    negative_nums = list(filter(lambda x: x<0, array_nums))\n    return positive_nums + negative_nums\n\n\n# Test the function with the given example\nprint(rearrange_numbs([1,2,-3,4,-5,6,-7,8,9]) #[1, 2, 9, -3, -5, 4, -7, 8]\n# Test the function with an empty array\nprint(rearrange_numbs([])) # []\n# Test the function with an array with only negative numbers\nprint(rearrange_numbs([-5,-3,-7,-9,-1])) #[-5, -3, -7, -9, -1]\n# Test the function with an array with only positive numbers\nprint(rearrange_numbs([1,2,3,4,5])) #[1, 2, 3, 4, 5]\n# Test the function with an array with all zeroes\nprint(rearrange_numbs([0,0,0])) #[0, 0, 0]\n# Test the function with an array with positive and negative numbers\nprint(rearrange_numbs([1,2,-3,4,-5,6,-7,8,9])) #[1, 2, 9, -3, -5, 4, -7, 8] ",
        "generated_testcode": "assert rearrange_numbs([1, 2, 3, -4, 5, -6, 7, -8, 9] ) == [9, 1, 7, 3, 5, -8, 2, -6]\n",
        "test": "assert rearrange_numbs([-1, 2, -3, 5, 7, 8, 9, -10])==[2, 5, 7, 8, 9, -10, -3, -1]\nassert rearrange_numbs([10,15,14,13,-18,12,-20])==[10, 12, 13, 14, 15, -20, -18]\nassert rearrange_numbs([-20,20,-10,10,-30,30])==[10, 20, 30, -30, -20, -10]",
        "canonical_solution": "def rearrange_numbs(array_nums):\r\n  result = sorted(array_nums, key = lambda i: 0 if i == 0 else -1 / i)\r\n  return result "
    },
    {
        "number": 916,
        "prompt": "Write a function to find if there is a triplet in the array whose sum is equal to a given value.\ndef find_triplet_array(A, arr_size, sum): \n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    A.sort()\n    for i in range(arr_size-2):\n        if i > 0 and A[i] == A[i-1]:\n            continue\n        left = i + 1\n        right = arr_size-1\n        while left < right:\n            if A[i] + A[left] + A[right] == sum:\n                return True\n            elif A[i] + A[left] + A[right] < sum:\n                left += 1\n            else:\n                right -= 1\n    return False\n\n\n# Test the function with an example\nA = [1, 2, 3, 4, 5, 6, 7, 8, 9]\nsum_val = 15\nif find_triplet_array(A, len(A), sum_val):\n    print(\"Triplet found\")\nelse:\n    print(\"Triplet not found\")\n\n\n# Output: Triplet found\n",
        "generated_testcode": "assert find_triplet_array([1, 2, 3, 4, 5, 6, 7, 8, 9], 12) == True\n",
        "test": "assert find_triplet_array([1, 4, 45, 6, 10, 8], 6, 22) == (4, 10, 8)\nassert find_triplet_array([12, 3, 5, 2, 6, 9], 6, 24) == (12, 3, 9)\nassert find_triplet_array([1, 2, 3, 4, 5], 5, 9) == (1, 3, 5)",
        "canonical_solution": "def find_triplet_array(A, arr_size, sum): \r\n\tfor i in range( 0, arr_size-2): \r\n\t\tfor j in range(i + 1, arr_size-1): \r\n\t\t\tfor k in range(j + 1, arr_size): \r\n\t\t\t\tif A[i] + A[j] + A[k] == sum: \r\n\t\t\t\t\treturn  A[i],A[j],A[k] \r\n\t\t\t\t\treturn True\r\n\treturn False"
    },
    {
        "number": 917,
        "prompt": "Write a function to find the sequences of one upper case letter followed by lower case letters.\ndef text_uppercase_lowercase(text):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    # Initialize variables\n    uppercase_seq = \"\"\n    lowercase_seq = \"\"\n    uppercase_count = 0\n    lowercase_count = 0\n    i = 0\n\n    # Loop through the text\n    while i < len(text):\n        # If character is uppercase, append to uppercase_seq and increment uppercase_count\n        if text[i].isupper():\n            uppercase_seq += text[i]\n            uppercase_count += 1\n        # If character is lowercase, append to lowercase_seq and increment lowercase_count\n        elif text[i].islower():\n            lowercase_seq += text[i]\n            lowercase_count += 1\n        # If character is not a letter, reset both sequences and counts\n        else:\n            uppercase_seq = \"\"\n            lowercase_seq = \"\"\n            uppercase_count = 0\n            lowercase_count = 0\n        # Increment i\n        i += 1\n\n    # Return uppercase_seq and lowercase_seq as a tuple\n    return (uppercase_seq, lowercase_seq)\n\n\n# Test the function\nprint(text_uppercase_lowercase(\"Hello, World!\"))  # (\"H\", \"ello, Worl\")\nprint(text_uppercase_lowercase(\"aBcDeFgHiJkLmNoPqRsTuVwXyZ\"))  # (\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\", \"\")\n",
        "generated_testcode": "assert text_uppercase_lowercase(\"HelloWorld\") == \"HW\"\n",
        "test": "assert text_uppercase_lowercase(\"AaBbGg\")==('Found a match!')\nassert text_uppercase_lowercase(\"aA\")==('Not matched!')\nassert text_uppercase_lowercase(\"PYTHON\")==('Not matched!')",
        "canonical_solution": "import re\r\ndef text_uppercase_lowercase(text):\r\n        patterns = '[A-Z]+[a-z]+$'\r\n        if re.search(patterns, text):\r\n                return 'Found a match!'\r\n        else:\r\n                return ('Not matched!')"
    },
    {
        "number": 918,
        "prompt": "Write a function to count coin change.\ndef coin_change(S, m, n): \n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    if n == 0: \n        return 1\n    if m <= 0 or n < 0: \n        return 0\n    if S[m] <= n: \n        return coin_change(S, m-1, n) + coin_change(S, n) \n    else: \n        return coin_change(S, m-1, n) \n  \n    return 0\n  \n# S = [1, 2, 5, 10, 10, 25, 50, 100, 50] \n# m = len(S) \n# n = 1000\n# print(coin_change(S, m, n)) ",
        "generated_testcode": "assert coin_change([1, 2, 5, 10, 25, 50], 100, 4) == 4\n",
        "test": "assert coin_change([1, 2, 3],3,4)==4\nassert coin_change([4,5,6,7,8,9],6,9)==2\nassert coin_change([4,5,6,7,8,9],6,4)==1",
        "canonical_solution": "def coin_change(S, m, n): \r\n    table = [[0 for x in range(m)] for x in range(n+1)] \r\n    for i in range(m): \r\n        table[0][i] = 1\r\n    for i in range(1, n+1): \r\n        for j in range(m): \r\n            x = table[i - S[j]][j] if i-S[j] >= 0 else 0\r\n            y = table[i][j-1] if j >= 1 else 0 \r\n            table[i][j] = x + y   \r\n    return table[n][m-1] "
    },
    {
        "number": 919,
        "prompt": "Write a python function to multiply all items in the list.\ndef multiply_list(items):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    if not items:\n        return 1\n    result = 1\n    for item in items:\n        result *= item\n    return result\n\nprint(multiply_list([2, 3, 4, 5])) # Output: 60\nprint(multiply_list([1, 0, 2, 3])) # Output: 0\nprint(multiply_list([0, 1, 2, 3])) # Output: 0\nprint(multiply_list([1])) # Output: 1\nprint(multiply_list([])) # Output: 1\n\n\n# Solution:\ndef multiply_list(items):\n    if not items:\n        return 1\n    else:\n        result = 1\n        for item in items:\n            result *= item\n        return result\n\nprint(multiply_list([2, 3, 4, 5])) # Output: 60\nprint(multiply_list([1, 0, 2, 3])) # Output: 0\nprint(multiply_list([0, 1, 2, 3])) # Output: 0\nprint(multiply_list([1])) # Output: 1\nprint(multiply_list([])) # Output: 1 ",
        "generated_testcode": "assert multiply_list([1, 2, 3, 4, 5]) == 60\n",
        "test": "assert multiply_list([1,-2,3]) == -6\nassert multiply_list([1,2,3,4]) == 24\nassert multiply_list([3,1,2,3]) == 18",
        "canonical_solution": "def multiply_list(items):\r\n    tot = 1\r\n    for x in items:\r\n        tot *= x\r\n    return tot"
    },
    {
        "number": 920,
        "prompt": "Write a function to remove all tuples with all none values in the given tuple list.\ndef remove_tuple(test_list):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    new_list = []\n    for tup in test_list:\n        if all(x is None for x in tup):\n            continue\n        else:\n            new_list.append(tup)\n    return new_list\n\n#Test cases\nprint(remove_tuple([(1, 2, 3), (None, None, None), (4, 5, None), (6, 7, 8), (None, 9, 10), (11, 12, 13)]))\nprint(remove_tuple([(1, 2, 3), (4, 5, 6), (7, 8, 9), (10, 11, 12), (None, None, None)])\nprint(remove_tuple([(1, 2, 3), (4, 5, None), (6, 7, 8), (None, 9, 10), (11, 12, None)])\nprint(remove_tuple([(1, None, None, None), (4, 5, None), (None, 8, 9), (None, None, 12), (None, 14, 15)])\nprint(remove_tuple([(None, None, None, None, None)])\n\n#Output:\n# [(1, 2, 3), (4, 5, 6), (6, 7, 8), (4, 5, 6), (None, None",
        "generated_testcode": "assert remove_tuple(()) == ()\n",
        "test": "assert remove_tuple([(None, 2), (None, None), (3, 4), (12, 3), (None, )] ) == '[(None, 2), (3, 4), (12, 3)]'\nassert remove_tuple([(None, None), (None, None), (3, 6), (17, 3), (None,1 )] ) == '[(3, 6), (17, 3), (None, 1)]'\nassert remove_tuple([(1, 2), (2, None), (3, None), (24, 3), (None, None )] ) == '[(1, 2), (2, None), (3, None), (24, 3)]'",
        "canonical_solution": "def remove_tuple(test_list):\r\n  res = [sub for sub in test_list if not all(ele == None for ele in sub)]\r\n  return (str(res)) "
    },
    {
        "number": 921,
        "prompt": "Write a function to perform chunking of tuples each of size n.\ndef chunk_tuples(test_tup, N):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    return [(test_tup[i:i+N] for i in range(0, len(test_tup), N))\n           ]\n\n#Test the function\ntest_tup = ('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p')\nprint(chunk_tuples(test_tup, 3))\n#Output: [('a', 'b', 'c'), ('d', 'e', 'f'), ('g', 'h', 'i'), ('j', 'k', 'l'), ('m', 'n', 'o'), ('p',)]\n\ntest_tup = ('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o')\nprint(chunk_tuples(test_tup, 3))\n#Output: [('a', 'b', 'c'), ('d', 'e', 'f'), ('g', 'h', 'i'), ('j', 'k', 'l'), ('m', 'n', 'o')]\n\ntest_tup = ('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l')\nprint(chunk_tuples(test_tup, 3))\n#Output: [('a', '",
        "generated_testcode": "assert chunk_tuples((), 2) == []\n",
        "test": "assert chunk_tuples((10, 4, 5, 6, 7, 6, 8, 3, 4), 3) == [(10, 4, 5), (6, 7, 6), (8, 3, 4)]\nassert chunk_tuples((1, 2, 3, 4, 5, 6, 7, 8, 9), 2) == [(1, 2), (3, 4), (5, 6), (7, 8), (9,)]\nassert chunk_tuples((11, 14, 16, 17, 19, 21, 22, 25), 4) == [(11, 14, 16, 17), (19, 21, 22, 25)]",
        "canonical_solution": "def chunk_tuples(test_tup, N):\r\n  res = [test_tup[i : i + N] for i in range(0, len(test_tup), N)]\r\n  return (res) "
    },
    {
        "number": 922,
        "prompt": "Write a function to find a pair with the highest product from a given array of integers.\ndef max_product(arr): \n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    arr.sort()\n    return max(arr[-1] * arr[-2], arr[-1] * arr[-3]) ",
        "generated_testcode": "assert max_product([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 72 # (9, 8) or (7, 9)\n",
        "test": "assert max_product([1, 2, 3, 4, 7, 0, 8, 4])==(7, 8)\nassert max_product([0, -1, -2, -4, 5, 0, -6])==(-4, -6)\nassert max_product([1, 3, 5, 6, 8, 9])==(8,9)",
        "canonical_solution": "def max_product(arr): \r\n    arr_len = len(arr) \r\n    if (arr_len < 2): \r\n        return None     \r\n    x = arr[0]; y = arr[1]    \r\n    for i in range(0, arr_len): \r\n        for j in range(i + 1, arr_len): \r\n            if (arr[i] * arr[j] > x * y): \r\n                x = arr[i]; y = arr[j] \r\n    return x,y   "
    },
    {
        "number": 923,
        "prompt": "Write a function to find the length of the shortest string that has both str1 and str2 as subsequences.\ndef super_seq(X, Y, m, n):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": true,
        "answer": "    if m == 0:\n        return n\n    if n == 0:\n        return m\n    if X[m - 1] == Y[n - 1]:\n        return super_seq(X, Y, m - 1, n - 1) + 1\n    return max(super_seq(X, Y, m - 1, n), super_seq(X, Y, m, n - 1))\n\n\n\ndef find_shortest_string(str1, str2):\n    m, n = len(str1), len(str2)\n    return super_seq(str1, str2, m, n) + max(m, n)\n\n\n\n# Test the function\nstr1 = \"abc\"\nstr2 = \"defg\"\nprint(find_shortest_string(str1, str2))  # Output: 6\n\nstr1 = \"ab\"\nstr2 = \"abc\"\nprint(find_shortest_string(str1, str2))  # Output: 3\n\nstr1 = \"abcd\"\nstr2 = \"efg\"\nprint(find_shortest_string(str1, str2))  # Output: 4\n\nstr1 = \"abcd\"\nstr2 = \"abcdefg\"\nprint(find_shortest_string(str1, str2))  # Output: 7\n\nstr1 = \"ab\"\nstr2 = \"abc\"\nprint(find_shortest_string(str1, str2))",
        "generated_testcode": "assert super_seq(\"abc\", \"def\", 3, 3) == 3\n",
        "test": "assert super_seq(\"AGGTAB\", \"GXTXAYB\", 6, 7) == 9\nassert super_seq(\"feek\", \"eke\", 4, 3) == 5\nassert super_seq(\"PARRT\", \"RTA\", 5, 3) == 6",
        "canonical_solution": "def super_seq(X, Y, m, n):\r\n\tif (not m):\r\n\t\treturn n\r\n\tif (not n):\r\n\t\treturn m\r\n\tif (X[m - 1] == Y[n - 1]):\r\n\t\treturn 1 + super_seq(X, Y, m - 1, n - 1)\r\n\treturn 1 + min(super_seq(X, Y, m - 1, n),\tsuper_seq(X, Y, m, n - 1))"
    },
    {
        "number": 924,
        "prompt": "Write a function to find maximum of two numbers.\ndef max_of_two( x, y ):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    if x > y:\n        return x\n    else:\n        return y\n\n#Test the function with sample inputs\nprint(max_of_two(10, 5)) # Output: 10\nprint(max_of_two(20, 15)) # Output: 20\nprint(max_of_two(-10, -5)) # Output: -5\nprint(max_of_two(100.5, 20.6) # Output: 20.6\n",
        "generated_testcode": "assert max_of_two(10, 20) == 20\n",
        "test": "assert max_of_two(10,20)==20\nassert max_of_two(19,15)==19\nassert max_of_two(-10,-20)==-10",
        "canonical_solution": "def max_of_two( x, y ):\r\n    if x > y:\r\n        return x\r\n    return y"
    },
    {
        "number": 925,
        "prompt": "Write a python function to calculate the product of all the numbers of a given tuple.\ndef mutiple_tuple(nums):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    \"\"\"\n    This function takes a tuple of integers and returns their product\n    \"\"\"\n    result = 1\n    for num in nums:\n        result *= num\n    return result\n\n# Test the function with some examples\nprint(mutiple_tuple((2, 3, 4, 5, 6)) # Output: 360\nprint(mutiple_tuple((1, 2, 3, 4, 5, 6, 7, 8)) # Output: 3840\nprint(mutiple_tuple((10, 20, 30, 40)) # Output: 24000000\n\n# Example solution:\r\n#\r\n#def multiple_tuple(nums):\r\n#    result = 1\r\n#    for num in nums:\r\n#        result *= num\r\n#    return result\r\n#\r\n#Test the function with some examples\r\n#print(multiple_tuple((2, 3, 4, 5, 6)) # Output: 360\r\n#print(multiple_tuple((1, 2, 3, 4, 5, 6, 7, 8)) # Output: 3840\r\n#print(multiple_tuple((10, 20, 30, 40)) # Output: 2400000\r\n#\r\n#Note: This function iterates through the tuple and multiplies each number with the result variable",
        "generated_testcode": "assert mutiple_tuple((1,2,3,4,5,6,7,8,9) == 3628880\n",
        "test": "assert mutiple_tuple((4, 3, 2, 2, -1, 18)) == -864\nassert mutiple_tuple((1,2,3)) == 6\nassert mutiple_tuple((-2,-4,-6)) == -48",
        "canonical_solution": "def mutiple_tuple(nums):\r\n    temp = list(nums)\r\n    product = 1 \r\n    for x in temp:\r\n        product *= x\r\n    return product"
    },
    {
        "number": 926,
        "prompt": "Write a function to find n-th rencontres number.\ndef binomial_coeffi(n, k): \n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": true,
        "answer": "    if k == 0 or k == n: \n        return 1\n    res = 1\n    for i in range(1, k+1): \n        res = res * (n - i + 1) // i \n    return res \n\ndef rencontres(n): \n    if n == 1: \n        return 0\n    a = 0\n    b = 1\n    for i in range(n): \n        a, b = b, a + b \n    return a \n\ndef nth_rencontres_number(n): \n    return rencontres(n + 1) - 1\n\n# Testing the function \nprint(nth_rencontres_number(5)) \nprint(nth_rencontres_number(10)) ",
        "generated_testcode": "assert binomial_coeffi(5, 2) == 10\n",
        "test": "assert rencontres_number(7, 2) == 924\nassert rencontres_number(3, 0) == 2\nassert rencontres_number(3, 1) == 3",
        "canonical_solution": "def binomial_coeffi(n, k): \r\n\tif (k == 0 or k == n): \r\n\t\treturn 1\r\n\treturn (binomial_coeffi(n - 1, k - 1) \r\n\t\t+ binomial_coeffi(n - 1, k)) \r\ndef rencontres_number(n, m): \r\n\tif (n == 0 and m == 0): \r\n\t\treturn 1\r\n\tif (n == 1 and m == 0): \r\n\t\treturn 0\r\n\tif (m == 0): \r\n\t\treturn ((n - 1) * (rencontres_number(n - 1, 0)+ rencontres_number(n - 2, 0))) \r\n\treturn (binomial_coeffi(n, m) * rencontres_number(n - m, 0))"
    },
    {
        "number": 927,
        "prompt": "Write a function to calculate the height of the given binary tree.\n\tdef __init__(self, data): \n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "\t\tself.data = data \n\t\tself.left = None\n\t\tself.right = None\n\n\ndef calculateHeight(root):\n    if root is None:\n        return 0\n    else:\n        left_height = calculateHeight(root.left)\n        right_height = calculateHeight(root.right)\n        return max(left_height, right_height) + 1\n\n\nroot = Node(1) \nroot.left = Node(2) \nroot.right = Node(3) \nroot.left.left = Node(4) \nroot.left.right = Node(5) \nroot.right.left = Node(6) \nroot.right.right = Node(7) \nroot.left.left.left = Node(8) \nroot.left.left.right = Node(9) \nroot.right.right.right = Node(10) \nroot.right.right.left = Node(11) \n\nprint(\"Height of the binary tree is\", calculateHeight(root)) ",
        "generated_testcode": "assert height(None) == 0\n",
        "test": "assert (max_height(root)) == 3\nassert (max_height(root1)) == 5 \nassert (max_height(root2)) == 4",
        "canonical_solution": "class Node: \r\n\tdef __init__(self, data): \r\n\t\tself.data = data \r\n\t\tself.left = None\r\n\t\tself.right = None\r\ndef max_height(node): \r\n\tif node is None: \r\n\t\treturn 0 ; \r\n\telse : \r\n\t\tleft_height = max_height(node.left) \r\n\t\tright_height = max_height(node.right) \r\n\t\tif (left_height > right_height): \r\n\t\t\treturn left_height+1\r\n\t\telse: \r\n\t\t\treturn right_height+1"
    },
    {
        "number": 928,
        "prompt": "Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\ndef change_date_format(dt):\n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    # split the date into year, month, day\n    year, month, day = dt.split('-')\n    # convert the year to string\n    year = str(year)\n    # convert the month to string\n    month = str(month).zfill(2)\n    # convert the day to string\n    day = str(day).zfill(2)\n    # join the day, month, year to form the new date\n    return day + '-' + month + '-' + year\n\n# test the function\nprint(change_date_format('2022-03-01'))\n# expected output: 01-03-2022\nprint(change_date_format('2021-05-28'))\n# expected output: 28-05-2021\nprint(change_date_format('2010-12-31'))\n# expected output: 31-12-2010\n",
        "generated_testcode": "assert change_date_format(\"2021-01-01\") == \"01-01-2021\"\n",
        "test": "assert change_date_format('2026-01-02')=='02-01-2026'\nassert change_date_format('2021-01-04')=='04-01-2021'\nassert change_date_format('2030-06-06')=='06-06-2030'",
        "canonical_solution": "import re\r\ndef change_date_format(dt):\r\n        return re.sub(r'(\\d{4})-(\\d{1,2})-(\\d{1,2})', '\\\\3-\\\\2-\\\\1', dt)\r\n        return change_date_format(dt)"
    },
    {
        "number": 929,
        "prompt": "Write a function to count repeated items of a tuple.\ndef count_tuplex(tuplex,value):  \n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    count = 0\n    for item in tuplex:\n        if item == value:\n            count += 1\n    return count\n\n#Test the function\ntup = (1,2,3,4,5,6,7,8,9,2,2,3,4,2,2)\nprint(count_tuplex(tup,2)) #Output: 3",
        "generated_testcode": "assert count_tuplex((\"a\", \"b\", \"c\", \"a\", \"d\", \"b\", \"c\", \"e\", \"a\") == 2)\n",
        "test": "assert count_tuplex((2, 4, 5, 6, 2, 3, 4, 4, 7),4)==3\nassert count_tuplex((2, 4, 5, 6, 2, 3, 4, 4, 7),2)==2\nassert count_tuplex((2, 4, 7, 7, 7, 3, 4, 4, 7),7)==4",
        "canonical_solution": "def count_tuplex(tuplex,value):  \r\n  count = tuplex.count(value)\r\n  return count"
    },
    {
        "number": 930,
        "prompt": "Write a function that matches a string that has an a followed by zero or more b's by using regex.\ndef text_match(text):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": true,
        "answer": "    import re\n    pattern = re.compile(r\"a.*b\")\n    if pattern.match(text):\n        return True\n    else:\n        return False\n\n# Test cases\nprint(text_match(\"ab\")) # True\nprint(text_match(\"aab\")) # True\nprint(text_match(\"abb\")) # True\nprint(text_match(\"aabb\")) # True\nprint(text_match(\"abbc\")) # False\nprint(text_match(\"a\")) # False\nprint(text_match(\"b\")) # False\nprint(text_match(\"acd\")) # False\nprint(text_match(\"abcd\")) # True",
        "generated_testcode": "assert text_match(\"ab\") == True\n",
        "test": "assert text_match(\"msb\") == 'Not matched!'\nassert text_match(\"a0c\") == 'Found a match!'\nassert text_match(\"abbc\") == 'Found a match!'",
        "canonical_solution": "import re\r\ndef text_match(text):\r\n        patterns = 'ab*?'\r\n        if re.search(patterns,  text):\r\n                return ('Found a match!')\r\n        else:\r\n                return ('Not matched!')"
    },
    {
        "number": 931,
        "prompt": "Write a function to calculate the sum of series 1\u00b3+2\u00b3+3\u00b3+\u2026.+n\u00b3.\ndef sum_series(number):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": true,
        "answer": "    total = 0\n    for i in range(1, number+1):\n        total += i**3\n    return total\n\nprint(sum_series(5)) # Output: 225\nprint(sum_series(10)) # Output: 274\n\n# Alternative way to do it using a loop\ndef sum_series(number):\n    total = 0\n    for i in range(1, number+1):\n        total += i**3\n    return total\n\n# Alternative way to do it using a list comprehension\ndef sum_series(number):\n    return sum([i**3 for i in range(1, number+1)])\n\nprint(sum_series(5)) # Output: 225\nprint(sum_series(10)) # Output: 274 ",
        "generated_testcode": "assert sum_series(5) == 225\n",
        "test": "assert sum_series(7)==784\nassert sum_series(5)==225\nassert sum_series(15)==14400",
        "canonical_solution": "import math \r\ndef sum_series(number):\r\n total = 0\r\n total = math.pow((number * (number + 1)) /2, 2)\r\n return total"
    },
    {
        "number": 932,
        "prompt": "Write a function to remove duplicate words from a given list of strings.\ndef remove_duplic_list(l):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    return list(set(l)\n\n#Example usage:\n>>> remove_duplic_list(['apple', 'banana', 'orange', 'banana', 'apple', 'grape', 'orange', 'grape', 'mango', 'mango'])\n['apple', 'banana', 'orange', 'grape', 'mango']\n\n\n#Approach:\n- Convert the list to a set, which automatically removes duplicates\n- Convert the set back to a list\n- Return the list\n\n\n# Time complexity: O(n)\n# Space complexity: O(n)\n\n\n# Alternate solution using dictionary:\ndef remove_duplic_list(l):\n    d = {}\n    for i in l:\n        d[i] = 0\n    return list(d.keys())\n\n#Example usage:\n>>> remove_duplic_list(['apple', 'banana', 'orange', 'banana', 'apple', 'grape', 'orange', 'mango', 'mango'])\n['apple', 'banana', 'orange', 'mango']\n\n#Approach:\n- Create a dictionary to store the words\n- Iterate through the list and add each word to the dictionary\n- Convert the dictionary keys to a list and return it\n\n\n# Time complexity: O(n)\n# Space complexity: O(n)\n\n\n# Best solution using set:\ndef remove_duplic_list(l):\n    return list(dict.fromkeys(l).keys())\n\n",
        "generated_testcode": "assert remove_duplic_list([\"apple\", \"banana\", \"orange\", \"apple\", \"banana\", \"grape\", \"orange\", \"grape\", \"apple\"] == [\"apple\", \"banana\", \"orange\", \"grape\"]\n",
        "test": "assert remove_duplic_list([\"Python\", \"Exercises\", \"Practice\", \"Solution\", \"Exercises\"])==['Python', 'Exercises', 'Practice', 'Solution']\nassert remove_duplic_list([\"Python\", \"Exercises\", \"Practice\", \"Solution\", \"Exercises\",\"Java\"])==['Python', 'Exercises', 'Practice', 'Solution', 'Java']\nassert remove_duplic_list([\"Python\", \"Exercises\", \"Practice\", \"Solution\", \"Exercises\",\"C++\",\"C\",\"C++\"])==['Python', 'Exercises', 'Practice', 'Solution','C++','C']",
        "canonical_solution": "def remove_duplic_list(l):\r\n    temp = []\r\n    for x in l:\r\n        if x not in temp:\r\n            temp.append(x)\r\n    return temp"
    },
    {
        "number": 933,
        "prompt": "Write a function to convert camel case string to snake case string by using regex.\ndef camel_to_snake(text):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    pattern = re.compile(r'(?<!^)(?=[A-Z])')\n    return pattern.sub('_', text).lower()\n\n# Test Cases\nprint(camel_to_snake(\"CamelCaseString\")) # camel_case_string\nprint(camel_to_snake(\"camelCaseString\")) # camel_case_string\nprint(camel_to_snake(\"ThisIsAnotherCamelCaseString\")) # this_is_another_camel_case_string\nprint(camel_to_snake(\"123CamelCaseString\")) # 123_camel_case_string\nprint(camel_to_snake(\"snake_case_string\")) # snake_case_string\nprint(camel_to_snake(\"\")) # ",
        "generated_testcode": "assert camel_to_snake(\"camelCaseString\") == \"camel_case_string\"\n",
        "test": "assert camel_to_snake('GoogleAssistant') == 'google_assistant'\nassert camel_to_snake('ChromeCast') == 'chrome_cast'\nassert camel_to_snake('QuadCore') == 'quad_core'",
        "canonical_solution": "import re\r\ndef camel_to_snake(text):\r\n  str1 = re.sub('(.)([A-Z][a-z]+)', r'\\1_\\2', text)\r\n  return re.sub('([a-z0-9])([A-Z])', r'\\1_\\2', str1).lower()"
    },
    {
        "number": 934,
        "prompt": "Write a function to find the nth delannoy number.\ndef dealnnoy_num(n, m): \n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    if n == 1 or m == 1: \n        return 1\n    dp = [0] * (n + 1) \n    dp[1] = 1\n    dp[2] = 1\n    for i in range(3, n + 1): \n        dp[i] = dp[i - 1] + dp[i - 2] \n    count = 0\n    for i in range(m, n + 1): \n        count += dp[i] \n    return count ",
        "generated_testcode": "assert dealnoy_num(1, 1) == 1\n",
        "test": "assert dealnnoy_num(3, 4) == 129\nassert dealnnoy_num(3, 3) == 63\nassert dealnnoy_num(4, 5) == 681",
        "canonical_solution": "def dealnnoy_num(n, m): \r\n\tif (m == 0 or n == 0) : \r\n\t\treturn 1\r\n\treturn dealnnoy_num(m - 1, n) + dealnnoy_num(m - 1, n - 1) + dealnnoy_num(m, n - 1)"
    },
    {
        "number": 935,
        "prompt": "Write a function to calculate the sum of series 1\u00b2+2\u00b2+3\u00b2+\u2026.+n\u00b2.\ndef series_sum(number):\n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    sum = 0\n    for i in range(1, number+1):\n        sum += i**2\n    return sum\n\n# Test the function\nprint(series_sum(5)) # Output: 55 (1^2 + 2^2 + 3^2 + 4^2 + 5^2 + 6^2 = 55)\nprint(series_sum(10)) # Output: 385 (1^2 + 2^2 + 3^2 + 4^2 + ... + 10^2 = 385)\n",
        "generated_testcode": "assert series_sum(5) == 55\n",
        "test": "assert series_sum(6)==91\nassert series_sum(7)==140\nassert series_sum(12)==650",
        "canonical_solution": "def series_sum(number):\r\n total = 0\r\n total = (number * (number + 1) * (2 * number + 1)) / 6\r\n return total"
    },
    {
        "number": 936,
        "prompt": "Write a function to re-arrange the given tuples based on the given ordered list.\ndef re_arrange_tuples(test_list, ord_list):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    result = []\n    for i in ord_list:\n        for j in test_list:\n            if j[0] == i:\n                result.append(j)\n    return result\n\n\n# Test the function with the sample input\ntest_list = [('a', 1), ('b', 2), ('c', 3), ('d', 4), ('e', 5), ('f', 6)]\nord_list = ['c', 'a', 'f', 'd']\nprint(re_arrange_tuples(test_list, ord_list))\n",
        "generated_testcode": "assert re_arrange_tuples([(1,2,3), (4,5,6), (7,8,9)], [2, 0, 1]) == [(4,5,6), (1,2,3), (7,8,9)]\n",
        "test": "assert re_arrange_tuples([(4, 3), (1, 9), (2, 10), (3, 2)],  [1, 4, 2, 3]) == [(1, 9), (4, 3), (2, 10), (3, 2)]\nassert re_arrange_tuples([(5, 4), (2, 10), (3, 11), (4, 3)],  [3, 4, 2, 3]) == [(3, 11), (4, 3), (2, 10), (3, 11)]\nassert re_arrange_tuples([(6, 3), (3, 8), (5, 7), (2, 4)],  [2, 5, 3, 6]) == [(2, 4), (5, 7), (3, 8), (6, 3)]",
        "canonical_solution": "def re_arrange_tuples(test_list, ord_list):\r\n  temp = dict(test_list)\r\n  res = [(key, temp[key]) for key in ord_list]\r\n  return (res) "
    },
    {
        "number": 937,
        "prompt": "Write a function to count the most common character in a given string.\ndef max_char(str1):\n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    freq = {}\n    for char in str1:\n        if char in freq:\n            freq[char] += 1\n        else:\n            freq[char] = 1\n    max_count = 0\n    max_char = ''\n    for char, count in freq.items():\n        if count > max_count:\n            max_count = count\n            max_char = char\n    return max_char\n\n\n# Test the function with some inputs\nprint(max_char('hello world')) # o\nprint(max_char('mississippi')) # i\nprint(max_char('the quick brown fox jumps over the lazy dog')) # e\nprint(max_char('abc')) # a\n\nprint(max_char('aaa')) # a\nprint(max_char('aabbcc')) # a",
        "generated_testcode": "assert max_char(\"hello world\") == \"l\"\n",
        "test": "assert max_char(\"hello world\")==('l')\nassert max_char(\"hello \")==('l')\nassert max_char(\"python pr\")==('p')",
        "canonical_solution": "from collections import Counter \r\ndef max_char(str1):\r\n    temp = Counter(str1) \r\n    max_char = max(temp, key = temp.get)\r\n    return max_char"
    },
    {
        "number": 938,
        "prompt": "Write a function to find three closest elements from three sorted arrays.\ndef find_closet(A, B, C, p, q, r): \n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    i, j, k = 0, 0, 0\n    result = []\n    while i < len(A) and j < len(B) and k < len(C):\n        if A[i] <= B[j] <= C[k] or C[k] <= A[i] <= B[j]:\n            result.append(C[k])\n            k += 1\n        elif B[j] <= A[i] <= C[k] or C[k] <= B[j] <= A[i]:\n            result.append(B[j])\n            j += 1\n        else:\n            result.append(A[i])\n            i += 1\n    while i < len(A):\n        result.append(A[i])\n        i += 1\n    while j < len(B):\n        result.append(B[j])\n        j += 1\n    while k < len(C):\n        result.append(C[k])\n        k += 1\n    return result[:3]\n\n\n# Test the function\nA = [1, 3, 4, 6, 7, 9, 12, 15, 19]\nB = [2, 5, 8, 11, 14, 17, 20, 23]\nC = [4, 6, 10, 15, 18, 19, 21, 24]\np, q",
        "generated_testcode": "assert find_closet(sorted([1, 2, 3, 4, 5, 6, 7, 8, 9], [2, 5, 7, 9, 10, 12, 13, 15], 2, 3) == (5, 7, 9)\n",
        "test": "assert find_closet([1, 4, 10],[2, 15, 20],[10, 12],3,3,2) == (10, 15, 10)\nassert find_closet([20, 24, 100],[2, 19, 22, 79, 800],[10, 12, 23, 24, 119],3,5,5) == (24, 22, 23)\nassert find_closet([2, 5, 11],[3, 16, 21],[11, 13],3,3,2) == (11, 16, 11)",
        "canonical_solution": "import sys \r\n\r\ndef find_closet(A, B, C, p, q, r): \r\n\tdiff = sys.maxsize \r\n\tres_i = 0\r\n\tres_j = 0\r\n\tres_k = 0\r\n\ti = 0\r\n\tj = 0\r\n\tk = 0\r\n\twhile(i < p and j < q and k < r): \r\n\t\tminimum = min(A[i], min(B[j], C[k])) \r\n\t\tmaximum = max(A[i], max(B[j], C[k])); \r\n\t\tif maximum-minimum < diff: \r\n\t\t\tres_i = i \r\n\t\t\tres_j = j \r\n\t\t\tres_k = k \r\n\t\t\tdiff = maximum - minimum; \r\n\t\tif diff == 0: \r\n\t\t\tbreak\r\n\t\tif A[i] == minimum: \r\n\t\t\ti = i+1\r\n\t\telif B[j] == minimum: \r\n\t\t\tj = j+1\r\n\t\telse: \r\n\t\t\tk = k+1\r\n\treturn A[res_i],B[res_j],C[res_k]"
    },
    {
        "number": 939,
        "prompt": "Write a function to sort a list of dictionaries using lambda function.\ndef sorted_models(models):\n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    return sorted(models, key=lambda model: model['year'])\n\n# Example usage:\nmodels = [\n    {'name': 'Samsung S20', 'year': 2021},\n    {'name': 'iPhone 12', 'year': 2020},\n    {'name': 'iPhone 11', 'year': 2021},\n    {'name': 'iPhone X', 'year': 2019},\n    {'name': 'Note 10', 'year': 2020},\n    {'name': 'Galaxy S10', 'year': 2019}\n]\n\nprint(sorted_models(models)) # Output: [{'name': 'iPhone 12', 'year': 2020}, {'name': 'Galaxy S10', 'year': 2019}, {'name': 'Samsung S20', 'year': 2021}, {'name': 'iPhone 11', 'year': 2021}, {'name': 'Note 10', 'year': 2020}]\n\n# Explanation:\n# The lambda function sorts the list of dictionaries by the 'year' key in ascending order. If there are dictionaries with the same 'year', they are sorted by their order in the original list.\n# In the output, the dictionaries are sorted by their 'year' key in ascending order. The original order of the dictionaries with the same year is maintained. ",
        "generated_testcode": "assert sorted_models",
        "test": "assert sorted_models([{'make':'Nokia', 'model':216, 'color':'Black'}, {'make':'Mi Max', 'model':2, 'color':'Gold'}, {'make':'Samsung', 'model': 7, 'color':'Blue'}])==[{'make': 'Nokia', 'model': 216, 'color': 'Black'}, {'make': 'Samsung', 'model': 7, 'color': 'Blue'}, {'make': 'Mi Max', 'model': 2, 'color': 'Gold'}]\nassert sorted_models([{'make':'Vivo', 'model':20,'color':'Blue'},{'make': 'oppo','model':17,'color':'Gold'},{'make':'Apple','model':11,'color':'red'}])==([{'make':'Vivo', 'model':20,'color':'Blue'},{'make': 'oppo','model':17,'color':'Gold'},{'make':'Apple','model':11,'color':'red'}])\nassert sorted_models([{'make':'micromax','model':40,'color':'grey'},{'make':'poco','model':60,'color':'blue'}])==([{'make':'poco','model':60,'color':'blue'},{'make':'micromax','model':40,'color':'grey'}])",
        "canonical_solution": "def sorted_models(models):\r\n sorted_models = sorted(models, key = lambda x: x['color'])\r\n return sorted_models"
    },
    {
        "number": 940,
        "prompt": "Write a function to sort the given array by using heap sort.\ndef heap_sort(arr):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    # define a function to swap elements\n    def swap(arr, i, j):\n        arr[i], arr[j] = arr[j], arr[i]\n\n    # define a function to build heap\n    def build_max_heap(arr, i, heap_size):\n        largest = i\n        left = 2 * i + 1\n        right = 2 * i + 2\n        if left < heap_size and arr[left] > arr[largest]:\n            largest = left\n        if right < heap_size and arr[right] > arr[largest]:\n            largest = right\n        if largest != i:\n            swap(arr, i, largest)\n            build_max_heap(arr, largest)\n    # define a function to heapify the heap\n    def heapify(arr, n, i):\n        largest = i\n        left = 2 * i + 1\n        right = 2 * i + 2\n        if left < n and arr[left] > arr[largest]:\n            largest = left\n        if right < n and arr[right] > arr[largest]:\n            largest = right\n        if largest != i:\n            swap(arr, i, largest)\n            heapify(arr, largest)\n    # define a function to sort the array\n    def heap_sort_helper(arr):\n        heap_size = len(arr)\n        # build max heap\n        for i in range(heap_size // 2 - 1, -1, -",
        "generated_testcode": "assert heap_sort([3, 1, 4, 2, 5, 1, 6, 7, 8, 9, 0, 2, 4, 5, 3] ) == [0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 7, 8, 9]\n\n# Test case 2\n",
        "test": "assert heap_sort([12, 2, 4, 5, 2, 3]) == [2, 2, 3, 4, 5, 12]\nassert heap_sort([32, 14, 5, 6, 7, 19]) == [5, 6, 7, 14, 19, 32]\nassert heap_sort([21, 15, 29, 78, 65]) == [15, 21, 29, 65, 78]",
        "canonical_solution": "def heap_sort(arr):\r\n    heapify(arr)  \r\n    end = len(arr) - 1\r\n    while end > 0:\r\n        arr[end], arr[0] = arr[0], arr[end]\r\n        shift_down(arr, 0, end - 1)\r\n        end -= 1\r\n    return arr\r\n\r\ndef heapify(arr):\r\n    start = len(arr) // 2\r\n    while start >= 0:\r\n        shift_down(arr, start, len(arr) - 1)\r\n        start -= 1\r\ndef shift_down(arr, start, end):\r\n    root = start\r\n    while root * 2 + 1 <= end:\r\n        child = root * 2 + 1\r\n        if child + 1 <= end and arr[child] < arr[child + 1]:\r\n            child += 1\r\n        if child <= end and arr[root] < arr[child]:\r\n            arr[root], arr[child] = arr[child], arr[root]\r\n            root = child\r\n        else:\r\n            return\r\n"
    },
    {
        "number": 941,
        "prompt": "Write a function to count the elements in a list until an element is a tuple.\ndef count_elim(num):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    count = 0\n    for i in range(len(num)):\n        if isinstance(num[i], tuple):\n            return count\n        count += 1\n    return count\n\nprint(count_elim([1, 2, 3, 4, (5, 6), 7, 8, 9])) # Output: 3\nprint(count_elim([1, 2, 3, 4, (5, 6), (7, 8, 9), 10])) # Output: 3\nprint(count_elim([1, 2, 3, 4, 5, 6, 7, 8, 9])) # Output: 6\n",
        "generated_testcode": "assert count_elim([\"a\", \"b\", \"c\", \"d\", \"e\", (\"f\", \"g\"), \"h\", \"i\", \"j\", \"k\"]) == 4\n",
        "test": "assert count_elim([10,20,30,(10,20),40])==3\nassert count_elim([10,(20,30),(10,20),40])==1\nassert count_elim([(10,(20,30,(10,20),40))])==0",
        "canonical_solution": "def count_elim(num):\r\n  count_elim = 0\r\n  for n in num:\r\n    if isinstance(n, tuple):\r\n        break\r\n    count_elim += 1\r\n  return count_elim"
    },
    {
        "number": 942,
        "prompt": "Write a function to check if any list element is present in the given list.\ndef check_element(test_tup, check_list):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    for element in check_list:\n        if element in test_tup:\n            return True\n    return False\n\n#Testing\nprint(check_element((\"test\", [\"test1\", \"test2\", \"test3\", \"test4\"])) # True\nprint(check_element(\"test\", [\"test1\", \"test2\", \"test4\"])) # False\nprint(check_element(\"test\", [\"test1\", \"test2\", \"test3\", \"test4\", \"test5\"])) # True\nprint(check_element(\"test6\", [\"test1\", \"test2\", \"test3\", \"test4\", \"test5\"])) # False\n",
        "generated_testcode": "assert check_element(('a', ['a', 'b', 'c', 'd']) == True\n",
        "test": "assert check_element((4, 5, 7, 9, 3),  [6, 7, 10, 11]) == True\nassert check_element((1, 2, 3, 4),  [4, 6, 7, 8, 9]) == True\nassert check_element((3, 2, 1, 4, 5),  [9, 8, 7, 6]) == False",
        "canonical_solution": "def check_element(test_tup, check_list):\r\n  res = False\r\n  for ele in check_list:\r\n    if ele in test_tup:\r\n      res = True\r\n      break\r\n  return (res) "
    },
    {
        "number": 943,
        "prompt": "Write a function to combine two given sorted lists using heapq module.\ndef combine_lists(num1,num2):\n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    import heapq\n    result = []\n    heap1 = list(num1)\n    heap2 = list(num2)\n    heapq.heapify(heap1)\n    heapq.heapify(heap2)\n    while heap1 and heap2:\n        if heap1[0] <= heap2[0]:\n            result.append(heap1[0])\n            heap1.pop(0)\n        else:\n            result.append(heap2[0])\n            heap2.pop(0)\n    result += heap1 + heap2\n    return result\n\n# Example usage:\nnum1 = [1, 2, 3, 4, 5, 7, 8]\nnum2 = [2, 4, 5, 6, 7, 9]\nprint(combine_lists(num1, num2)) # Output: [1, 2, 2, 3, 4, 4, 5, 5, 5, 6, 7, 7, 8, 9] ",
        "generated_testcode": "assert combine_lists([1,2,3,4,5],[2,3,4,5,6]) == [1,2,2,3,3,4,4,5,5,6]\n",
        "test": "assert combine_lists([1, 3, 5, 7, 9, 11],[0, 2, 4, 6, 8, 10])==[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]\nassert combine_lists([1, 3, 5, 6, 8, 9], [2, 5, 7, 11])==[1,2,3,5,5,6,7,8,9,11]\nassert combine_lists([1,3,7],[2,4,6])==[1,2,3,4,6,7]",
        "canonical_solution": "from heapq import merge\r\ndef combine_lists(num1,num2):\r\n  combine_lists=list(merge(num1, num2))\r\n  return combine_lists"
    },
    {
        "number": 944,
        "prompt": "Write a function to separate and print the numbers and their position of a given string.\ndef num_position(text):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    nums = []\n    for i in range(len(text)):\n        if text[i].isdigit():\n            nums.append((text[i], i+1))\n    print(nums)\n\n# Example usage:\ntext = \"The quick brown fox jumps over 100 l2o3m3s5 and 99 apples 7777.\"\nnum_position(text)\n# Output: [('1', 13), ('0', 14), ('0', 16), ('3', 17), ('5', 18), ('9', 20), ('2', 22), ('7', 24), ('7', 25), ('7', 27)]\n\n\n# My solution:\ndef num_position(text):\n    nums = []\n    for i in range(len(text)):\n        if text[i].isdigit():\n            nums.append((text[i], i+1))\n    print(nums)\n\ntext = \"The quick brown fox jumps over 10 l2o3m3s5 and 99 apples 7777.\"\nnum_position(text)\n\n# Output: [('1', 13), ('0', 14), ('0', 16), ('3', 17), ('5', 18), ('9', 20), ('2', 22), ('7', 24), ('7', 25), ('7",
        "generated_testcode": "assert num_position(123abc456) == {'1': [0], '3': [2], '4': [3], '5': [4], '6': [5]}\n",
        "test": "assert num_position(\"there are 70 flats in this apartment\")==10\nassert num_position(\"every adult have 32 teeth\")==17\nassert num_position(\"isha has 79 chocolates in her bag\")==9",
        "canonical_solution": "import re\r\ndef num_position(text):\r\n for m in re.finditer(\"\\d+\", text):\r\n    return m.start()"
    },
    {
        "number": 945,
        "prompt": "Write a function to convert the given tuples into set.\ndef tuple_to_set(t):\n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    return set(t)\n\n# Test the function with an example tuple\nt = (1, 2, 3, 4, 4, 3, 2, 1)\nprint(tuple_to_set(t)) # Output: {1, 2, 3, 4} ",
        "generated_testcode": "assert tuple_to_set(()) == set()\n",
        "test": "assert tuple_to_set(('x', 'y', 'z') ) == {'y', 'x', 'z'}\nassert tuple_to_set(('a', 'b', 'c') ) == {'c', 'a', 'b'}\nassert tuple_to_set(('z', 'd', 'e') ) == {'d', 'e', 'z'}",
        "canonical_solution": "def tuple_to_set(t):\r\n  s = set(t)\r\n  return (s) "
    },
    {
        "number": 946,
        "prompt": "Write a function to find the most common elements and their counts of a specified text.\ndef most_common_elem(s,a):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    freq = {}\n    for i in s:\n        if i in freq:\n            freq[i] += 1\n        else:\n            freq[i] = 1\n    sorted_freq = sorted(freq.items(), key = lambda x: x[1], reverse = True)\n    for i in range(min(a, len(sorted_freq)):\n        print(sorted_freq[i][0], sorted_freq[i][1])\n\n#Example usage:\ns = \"hello world\"\na = 2\nmost_common_elem(s, a) #Output: l 2\n\ns = \"python is awesome\"\na = 2\nmost_common_elem(s, a) #Output: o 2, n 2\n\ns = \"aaabbc\"\na = 1\nmost_common_elem(s, a) #Output: a 3",
        "generated_testcode": "assert most_common_elem(\"hello world world world world hello world\", \"world\") == {'world': 2}\n",
        "test": "assert most_common_elem('lkseropewdssafsdfafkpwe',3)==[('s', 4), ('e', 3), ('f', 3)] \nassert most_common_elem('lkseropewdssafsdfafkpwe',2)==[('s', 4), ('e', 3)]\nassert most_common_elem('lkseropewdssafsdfafkpwe',7)==[('s', 4), ('e', 3), ('f', 3), ('k', 2), ('p', 2), ('w', 2), ('d', 2)]",
        "canonical_solution": "from collections import Counter \r\ndef most_common_elem(s,a):\r\n  most_common_elem=Counter(s).most_common(a)\r\n  return most_common_elem"
    },
    {
        "number": 947,
        "prompt": "Write a python function to find the length of the shortest word.\ndef len_log(list1):\n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    shortest_length = 0\n    for word in list1:\n        if len(word) < shortest_length or not shortest_length:\n            shortest_length = len(word)\n    return shortest_length\n\n# Testing the function\nlist1 = [\"apple\", \"banana\", \"cherry\", \"orange\", \"grape\", \"kiwi\"]\nprint(len_log(list1))  # Output: 4\n\nlist2 = [\"cat\", \"dog\", \"bird\", \"fish\", \"elephant\", \"zebra\"]\nprint(len_log(list2))  # Output: 3\nlist3 = [\"hello\", \"world\", \"python\", \"programming\"]\nprint(len_log(list3))  # Output: 5\nlist4 = [\"a\", \"short\", \"list\", \"of\", \"words\"]\nprint(len_log(list4))  # Output: 1",
        "generated_testcode": "assert len_log(['apple', 'banana', 'cherry', 'dog', 'cat']) == 3\n",
        "test": "assert len_log([\"win\",\"lose\",\"great\"]) == 3\nassert len_log([\"a\",\"ab\",\"abc\"]) == 1\nassert len_log([\"12\",\"12\",\"1234\"]) == 2",
        "canonical_solution": "def len_log(list1):\r\n    min=len(list1[0])\r\n    for i in list1:\r\n        if len(i)<min:\r\n            min=len(i)\r\n    return min"
    },
    {
        "number": 948,
        "prompt": "Write a function to get an item of a tuple.\ndef get_item(tup1,index):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    return tup1[index]\n\n# Example usage:\ntup1 = (1,2,3,4,5)\nprint(get_item(tup1,2)) # Output: 3\n",
        "generated_testcode": "assert get_item((1,2,3,4,5,6,7,8), 3) == 5\n",
        "test": "assert get_item((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),3)==('e')\nassert get_item((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),-4)==('u')\nassert get_item((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),-3)==('r')",
        "canonical_solution": "def get_item(tup1,index):\r\n  item = tup1[index]\r\n  return item"
    },
    {
        "number": 949,
        "prompt": "Write a function to sort the given tuple list basis the total digits in tuple.\ndef count_digs(tup):\n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    return sum(int(digit) for digit in str(tup[0])) + sum(int(digit) for digit in str(tup[1]))\n\nlst = [(12345, 5432), (5678, 8765), (123456, 54321), (987654, 456789), (12345678, 789456321), (123456789, 9876543210)]\nsorted_lst = sorted(lst, key=count_digs)\nprint(sorted_lst)\n\n# Output: [(12345, 5432), (5678, 8765), (123456, 54321), (12345678, 789456321), (987654, 456789)]\n\n# Explanation: \n# The function count_digs(tup) returns the sum of digits in the first element of the tuple and the sum of digits in the second element of the tuple. \n# The sorted() function is then used to sort the list based on this function, giving the expected output. ",
        "generated_testcode": "assert count_digs(()) == []\n",
        "test": "assert sort_list([(3, 4, 6, 723), (1, 2), (12345,), (134, 234, 34)] ) == '[(1, 2), (12345,), (3, 4, 6, 723), (134, 234, 34)]'\nassert sort_list([(3, 4, 8), (1, 2), (1234335,), (1345, 234, 334)] ) == '[(1, 2), (3, 4, 8), (1234335,), (1345, 234, 334)]'\nassert sort_list([(34, 4, 61, 723), (1, 2), (145,), (134, 23)] ) == '[(1, 2), (145,), (134, 23), (34, 4, 61, 723)]'",
        "canonical_solution": "def count_digs(tup):\r\n  return sum([len(str(ele)) for ele in tup ]) \r\ndef sort_list(test_list):\r\n  test_list.sort(key = count_digs)\r\n  return (str(test_list))"
    },
    {
        "number": 950,
        "prompt": "Write a function to display sign of the chinese zodiac for given year.\ndef chinese_zodiac(year):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    \"\"\"Returns the chinese zodiac sign for a given year\"\"\"\n    zodiac_signs = ['rat', 'ox', 'tiger', 'rabbit', 'dragon', 'snake', 'horse', 'goat', 'monkey', 'dog', 'pig', 'rat', 'ox', 'tiger', 'rat', 'dragon', 'snake', 'dog', 'goat', 'monkey']\n    zodiac_year = year % 12\n    return zodiac_signs[zodiac_year]\n\n\n# Test cases\nprint(chinese_zodiac(2020)) # Should print 'dog'\nprint(chinese_zodiac(19960)) # Should print 'monkey'\nprint(chinese_zodiac(19000)) # Should print 'rat'\nprint(chinese_zodiac(1987)) # Should print 'dog'\nprint(chinese_zodiac(20000)) # Should print 'rat'\nprint(chinese_zodiac(2024)) # Should print 'dragon'\nprint(chinese_zodiac(1988)) # Should print 'goat'\n",
        "generated_testcode": "assert chinese_zodiac(20000) == \"Dragon\"\n",
        "test": "assert chinese_zodiac(1997)==('Ox')\nassert chinese_zodiac(1998)==('Tiger')\nassert chinese_zodiac(1994)==('Dog')",
        "canonical_solution": "def chinese_zodiac(year):\r\n if (year - 2000) % 12 == 0:\r\n     sign = 'Dragon'\r\n elif (year - 2000) % 12 == 1:\r\n     sign = 'Snake'\r\n elif (year - 2000) % 12 == 2:\r\n     sign = 'Horse'\r\n elif (year - 2000) % 12 == 3:\r\n     sign = 'sheep'\r\n elif (year - 2000) % 12 == 4:\r\n     sign = 'Monkey'\r\n elif (year - 2000) % 12 == 5:\r\n     sign = 'Rooster'\r\n elif (year - 2000) % 12 == 6:\r\n     sign = 'Dog'\r\n elif (year - 2000) % 12 == 7:\r\n     sign = 'Pig'\r\n elif (year - 2000) % 12 == 8:\r\n     sign = 'Rat'\r\n elif (year - 2000) % 12 == 9:\r\n     sign = 'Ox'\r\n elif (year - 2000) % 12 == 10:\r\n     sign = 'Tiger'\r\n else:\r\n     sign = 'Hare'\r\n return sign"
    },
    {
        "number": 951,
        "prompt": "Write a function to find the maximum of similar indices in two lists of tuples.\ndef max_similar_indices(test_list1, test_list2):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    \"\"\"\n    This function takes two lists of tuples as input and returns a list of the maximum indices that are the same in each tuple.\n\n    If the tuples are not the same length, it returns an empty list.\n    If there are no similar indices, it returns an empty list.\n    If the maximum index is None, it returns a list with None.\n    \"\"\"\n    if len(test_list1) != len(test_list2):\n        return []\n    max_indices = []\n    for i in range(len(test_list1)):\n        if len(test_list1[i]) != len(test_list2[i]):\n            return []\n        max_index = None\n        for j in range(len(test_list1[i]):\n            if test_list1[i][j] == test_list2[i][j]:\n                if max_index is None or test_list1[i][j] > max_index:\n                    max_index = test_list1[i][j]\n        max_indices.append(max_index)\n    return max_indices\n\n\n# Test cases\nprint(max_similar_indices([(1, 2, 3, 4), (4, 5, 6), (7, 8, 9)], [(2, 3, 4), (5, 6, 7), (8, 9, 10)])) # [4, 6, None]\nprint(max_similar",
        "generated_testcode": "assert max_similar_indices([(1,2), (3,4), (5,6), (7,8)], [(1,2), (3,4), (5,6), (9,10)]) == (0, 2)\n",
        "test": "assert max_similar_indices([(2, 4), (6, 7), (5, 1)],[(5, 4), (8, 10), (8, 14)]) == [(5, 4), (8, 10), (8, 14)]\nassert max_similar_indices([(3, 5), (7, 8), (6, 2)],[(6, 5), (9, 11), (9, 15)]) == [(6, 5), (9, 11), (9, 15)]\nassert max_similar_indices([(4, 6), (8, 9), (7, 3)],[(7, 6), (10, 12), (10, 16)]) == [(7, 6), (10, 12), (10, 16)]",
        "canonical_solution": "def max_similar_indices(test_list1, test_list2):\r\n  res = [(max(x[0], y[0]), max(x[1], y[1]))\r\n   for x, y in zip(test_list1, test_list2)]\r\n  return (res) "
    },
    {
        "number": 952,
        "prompt": "Write a function to compute the value of ncr mod p.\ndef nCr_mod_p(n, r, p): \n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    # Initialize p and n+r+1 as 1 \n    p, n, r = int(p), int(n), int(r) \n    C = [0] * (r + 1) \n  \n    # Calculate C(n,r) \n    C[0], C[1] = 1, 1\n    for i in range(2, r+1): \n        C[i] = (C[i-1] * (n - i + 1) * 100000000000007) // i \n  \n    # Return the value of nCr % p \n    return (C[r] * pow(C[r-1], p-2, p)) % p \n\n  \n# Driver code \nn, r, p = 10, 2, 100000000000007\nprint(\"Value of nCr % p is\", nCr_mod_p(n, r, p)) ",
        "generated_testcode": "assert nCr_mod_p(10, 5, 100000000000007) == 26280\n",
        "test": "assert nCr_mod_p(10, 2, 13) == 6\nassert nCr_mod_p(11, 3, 14) == 11\nassert nCr_mod_p(18, 14, 19) == 1",
        "canonical_solution": "def nCr_mod_p(n, r, p): \r\n\tif (r > n- r): \r\n\t\tr = n - r \r\n\tC = [0 for i in range(r + 1)] \r\n\tC[0] = 1 \r\n\tfor i in range(1, n + 1): \r\n\t\tfor j in range(min(i, r), 0, -1): \r\n\t\t\tC[j] = (C[j] + C[j-1]) % p \r\n\treturn C[r] "
    },
    {
        "number": 953,
        "prompt": "Write a python function to find the minimun number of subsets with distinct elements.\ndef subset(ar, n): \n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    def backtrack(ar, n, k, index, subset, res):\n        if k == 0:\n            res.append(frozenset(subset))\n            return\n        for i in range(index, n):\n            subset.append(ar[i])\n            backtrack(ar, n, k - 1, subset, res)\n            subset.pop()\n\n    ar.sort()\n    res = []\n    backtrack(ar, n, k, [], res)\n    return len(set(res) - {frozenset([])})\n\n# Test case\nar = [1, 2, 3, 3, 4, 4, 5]\nk = 2\nprint(subset(ar, k))\n",
        "generated_testcode": "assert subset([1,2,3,4,4,5], 4) == 3\n",
        "test": "assert subset([1, 2, 3, 4],4) == 1\nassert subset([5, 6, 9, 3, 4, 3, 4],7) == 2\nassert subset([1, 2, 3 ],3) == 1",
        "canonical_solution": "def subset(ar, n): \r\n    res = 0\r\n    ar.sort() \r\n    for i in range(0, n) : \r\n        count = 1\r\n        for i in range(n - 1): \r\n            if ar[i] == ar[i + 1]: \r\n                count+=1\r\n            else: \r\n                break \r\n        res = max(res, count)  \r\n    return res "
    },
    {
        "number": 954,
        "prompt": "Write a function that gives profit amount if the given amount has profit else return none.\ndef profit_amount(actual_cost,sale_amount): \n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    if sale_amount >= actual_cost:\n        return sale_amount - actual_cost\n    else:\n        return None\n\n# Test the function with the inputs\nprint(profit_amount(50,1000)) # Expected output: 50\nprint(profit_amount(70,50)) # Expected output: None\nprint(profit_amount(100,70)) # Expected output: None\n\n\n# You can also test the function with more test cases to check if it works for other inputs. ",
        "generated_testcode": "assert profit_amount(1000,120) == 20\n",
        "test": "assert profit_amount(1500,1200)==300\nassert profit_amount(100,200)==None\nassert profit_amount(2000,5000)==None",
        "canonical_solution": "def profit_amount(actual_cost,sale_amount): \r\n if(actual_cost > sale_amount):\r\n    amount = actual_cost - sale_amount\r\n    return amount\r\n else:\r\n    return None"
    },
    {
        "number": 955,
        "prompt": "Write a function to find out, if the given number is abundant.\ndef is_abundant(n):\n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    # Find the sum of all factors of the number\n    sum_of_factors = 0\n    for i in range(1, n):\n        if n % i == 0:\n            sum_of_factors += i\n    # Check if sum_of_factors is greater than the number itself\n    if sum_of_factors > n:\n        return True\n    else:\n        return False\n\n# Driver code\nprint(is_abundant(12)) # Output: True\nprint(is_abundant(15)) # Output: True\nprint(is_abundant(28)) # Output: False\nprint(is_abundant(11)) # Output: False\nprint(is_abundant(24)) # Output: False\nprint(is_abundant(20)) # Output: False",
        "generated_testcode": "assert is_abundant(12) == True\n",
        "test": "assert is_abundant(12)==True\nassert is_abundant(13)==False\nassert is_abundant(9)==False",
        "canonical_solution": "def is_abundant(n):\r\n    fctrsum = sum([fctr for fctr in range(1, n) if n % fctr == 0])\r\n    return fctrsum > n"
    },
    {
        "number": 956,
        "prompt": "Write a function to split the given string at uppercase letters by using regex.\ndef split_list(text):\n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    import re\n    result = re.findall('[A-Z][^A-Z]*', text)\n    return result\n\n# Test the function with the sample input\nprint(split_list(\"HelloWorldThisIsAStringExample123\"))\n# Output: ['Hello', 'World', 'This', 'Is', 'A', 'String', 'Example123']\n\n# Test the function with the sample input\nprint(split_list(\"ThisIsAnotherExampleWithDigits123AndUpperCaseLetters\"))\n# Output: ['This', 'Is', 'Another', 'Example', 'With', 'Digits', '123', 'And', 'Upper', 'Case', 'Letters'] ",
        "generated_testcode": "assert split_list(\"HelloWorld\") == [\"Hello\", \"World\"]\n",
        "test": "assert split_list(\"LearnToBuildAnythingWithGoogle\") == ['Learn', 'To', 'Build', 'Anything', 'With', 'Google']\nassert split_list(\"ApmlifyingTheBlack+DeveloperCommunity\") == ['Apmlifying', 'The', 'Black+', 'Developer', 'Community']\nassert split_list(\"UpdateInTheGoEcoSystem\") == ['Update', 'In', 'The', 'Go', 'Eco', 'System']",
        "canonical_solution": "import re\r\ndef split_list(text):\r\n  return (re.findall('[A-Z][^A-Z]*', text))"
    },
    {
        "number": 957,
        "prompt": "Write a python function to get the position of rightmost set bit.\ndef get_First_Set_Bit_Pos(n):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": true,
        "answer": "    # Convert the given number into binary and find the index of rightmost set bit\n    bin_num = bin(n)\n    return len(bin_num) - 1 - bin_num.rfind(\"1\")\n\nprint(get_First_Set_Bit_Pos(21)) # Output: 4\nprint(get_First_Set_Bit_Pos(3)) # Output: 2\nprint(get_First_Set_Bit_Pos(0)) # Output: -1 ",
        "generated_testcode": "assert get_First_Set_Bit_Pos(0b10101010101010) == 1\n",
        "test": "assert get_First_Set_Bit_Pos(12) == 3\nassert get_First_Set_Bit_Pos(18) == 2\nassert get_First_Set_Bit_Pos(16) == 5",
        "canonical_solution": "import math\r\ndef get_First_Set_Bit_Pos(n):\r\n     return math.log2(n&-n)+1"
    },
    {
        "number": 958,
        "prompt": "Write a function to convert an integer into a roman numeral.\ndef int_to_roman( num):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    roman_numerals = {1:'I', 4:'IV', 5:'V', 9:'IX', 10:'X', 40:'XL', 50:'L', 90:'XC', 100:'C', 400:'XC', 50:'L', 90:'XC', 1000:'C', 400:'CD', 500:'D', 90:'CM', 1000:'D', 400:'CD', 500:'D', 90:'CM', 10000:'C', 4000:'CD', 500:'D', 900:'CM', 10000:'C', 4000:'CD', 500:'D', 900:'CM', 10000:'C', 4000:'CD', 500:'D', 900:'CM', 10000:'C', 4000:'CD', 500:'D', 900:'CM', 10000:'C'}\n    roman_values = [1,4,5,9,10,40,50,90,100,40,50,90,100,400,50,90,100,400,50,90,1000,400,50,9",
        "generated_testcode": "assert int_to_roman(1) == \"I\"\n",
        "test": "assert int_to_roman(1)==(\"I\")\nassert int_to_roman(50)==(\"L\")\nassert int_to_roman(4)==(\"IV\")",
        "canonical_solution": "def int_to_roman( num):\r\n        val = [1000, 900, 500, 400,100, 90, 50, 40,10, 9, 5, 4,1]\r\n        syb = [\"M\", \"CM\", \"D\", \"CD\",\"C\", \"XC\", \"L\", \"XL\",\"X\", \"IX\", \"V\", \"IV\",\"I\"]\r\n        roman_num = ''\r\n        i = 0\r\n        while  num > 0:\r\n            for _ in range(num // val[i]):\r\n                roman_num += syb[i]\r\n                num -= val[i]\r\n            i += 1\r\n        return roman_num"
    },
    {
        "number": 959,
        "prompt": "Write a python function to find the average of a list.\ndef Average(lst): \n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    sum = 0\n    for i in lst: \n        sum += i\n    return sum/len(lst) ",
        "generated_testcode": "assert Average([1, 2, 3, 4, 5]) == 3.0\n",
        "test": "assert Average([15, 9, 55, 41, 35, 20, 62, 49]) == 35.75\nassert Average([4, 5, 1, 2, 9, 7, 10, 8]) == 5.75\nassert Average([1,2,3]) == 2",
        "canonical_solution": "def Average(lst): \r\n    return sum(lst) / len(lst) "
    },
    {
        "number": 960,
        "prompt": "Write a function to solve tiling problem.\ndef get_noOfways(n):\n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    if n < 2:\n        return 1\n    if n == 2:\n        return 2\n    dp = [1] * (n + 1)\n    dp[1] = 1\n    dp[2] = 3\n    for i in range(3, n+1):\n        dp[i] = dp[i-1] * 2 + dp[i-2] * 2\n        for j in range(i-1):\n            if i - j - j > 1:\n                dp[i] += dp[i-j-1] * 2\n    return dp[n]\n\n\n# Test the function\nprint(get_noOfways(5)) # Output: 32\nprint(get_noOfways(6)) # Output: 70",
        "generated_testcode": "assert get_noOfways(1) == 1\n",
        "test": "assert get_noOfways(4)==3\nassert get_noOfways(3)==2\nassert get_noOfways(5)==5",
        "canonical_solution": "def get_noOfways(n):\r\n    if (n == 0):\r\n        return 0;\r\n    if (n == 1):\r\n        return 1; \r\n    return get_noOfways(n - 1) + get_noOfways(n - 2);"
    },
    {
        "number": 961,
        "prompt": "Write a function to convert a roman numeral to an integer.\ndef roman_to_int(s):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": true,
        "answer": "    roman_dict = {'I': 1, 'V': 5, 'X': 10, 'L': 50, 'C': 1000, 'D': 5000, 'M': 10000, 'IV': 4, 'IX': 9, 'XL': 40, 'XC': 90, 'CD': 400, 'CM': 900}\n    i = 0\n    num = 0\n    while i < len(s):\n        if i+1 < len(s) and s[i:i+2] in roman_dict:\n            num += roman_dict[s[i:i+2]]\n            i += 2\n        else:\n            num += roman_dict[s[i]]\n            i += 1\n    return num\n\n\n# Test cases\nprint(roman_to_int('III')) # Should return 3\nprint(roman_to_int('IV')) # Should return 4\nprint(roman_to_int('XL')) # Should return 40\nprint(roman_to_int('MCMXCIV')) # Should return 1994\nprint(roman_to_int('MCDLXXVI')) # Should return 1476",
        "generated_testcode": "assert roman_to_int(\"III\") == 3\n",
        "test": "assert roman_to_int('MMMCMLXXXVI')==3986\nassert roman_to_int('MMMM')==4000\nassert roman_to_int('C')==100",
        "canonical_solution": "def roman_to_int(s):\r\n        rom_val = {'I': 1, 'V': 5, 'X': 10, 'L': 50, 'C': 100, 'D': 500, 'M': 1000}\r\n        int_val = 0\r\n        for i in range(len(s)):\r\n            if i > 0 and rom_val[s[i]] > rom_val[s[i - 1]]:\r\n                int_val += rom_val[s[i]] - 2 * rom_val[s[i - 1]]\r\n            else:\r\n                int_val += rom_val[s[i]]\r\n        return int_val"
    },
    {
        "number": 962,
        "prompt": "Write a python function to find the sum of all even natural numbers within the range l and r.\ndef sum_Natural(n): \n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    return (n * (n+1) * (2*(n+1))//3)\n\ndef sum_even_range(l, r):\n    return sum_Natural(r) - sum_Natural(l-1)\n\n# Test the function\nprint(sum_even_range(1, 10)) # Output: 30 (2 + 4 + 6 + 8 + 10) = 30\nprint(sum_even_range(2, 11)) # Output: 22 (4 + 6 + 8) = 22\nprint(sum_even_range(2, 5)) # Output: 6 (4 + 6) = 10\nprint(sum_even_range(0, 7)) # Output: 14 (2 + 4 + 6) = 12\nprint(sum_even_range(1, 6)) # Output: 12 (2 + 4 + 6) = 12\nprint(sum_even_range(5, 10)) # Output: 22 (6 + 8 + 10) = 22\nprint(sum_even_range(0, 1)) # Output: 0 ",
        "generated_testcode": "assert sum_Natural(1, 10) == 30\n",
        "test": "assert sum_Even(2,5) == 6\nassert sum_Even(3,8) == 18\nassert sum_Even(4,6) == 10",
        "canonical_solution": "def sum_Natural(n): \r\n    sum = (n * (n + 1)) \r\n    return int(sum) \r\ndef sum_Even(l,r): \r\n    return (sum_Natural(int(r / 2)) - sum_Natural(int((l - 1) / 2))) "
    },
    {
        "number": 963,
        "prompt": "Write a function to calculate the discriminant value.\ndef discriminant_value(x,y,z):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    a = 1\n    b = -x\n    c = x*x + y*y - z*z\n    return b**2 - 4*a*c\n\nprint(discriminant_value(2,3,4)) # output should be -8\nprint(discriminant_value(1,1,1)) # output should be 0\nprint(discriminant_value(1,2,3)) # output should be 8\n\n\n# Write a function to calculate the real and imaginary parts of the roots of a quadratic equation\ndef quadratic_roots(a,b,c):\n    d = discriminant_value(a,b,c)\n    if d < 0:\n        return None, None\n    else:\n        sqrt_d = math.sqrt(d)\n        root1 = (-b + sqrt_d) / (2*a)\n        root2 = (-b - sqrt_d) / (2*a)\n        return root1, root2\n\nprint(quadratic_roots(1, 2, 3)) # output should be (1.0, 3.0)\nprint(quadratic_roots(1, 3, 4)) # output should be (1.0, 1.0)\nprint(quadratic_roots(1, 4, 4)) # output should be (1.0, -2.0)\nprint(quadratic_roots(1, 5, 6)) #",
        "generated_testcode": "assert discriminant_value(1,2,3) == 10\n",
        "test": "assert discriminant_value(4,8,2)==(\"Two solutions\",32)\nassert discriminant_value(5,7,9)==(\"no real solution\",-131)\nassert discriminant_value(0,0,9)==(\"one solution\",0)",
        "canonical_solution": "def discriminant_value(x,y,z):\r\n    discriminant = (y**2) - (4*x*z)\r\n    if discriminant > 0:\r\n        return (\"Two solutions\",discriminant)\r\n    elif discriminant == 0:\r\n        return (\"one solution\",discriminant)\r\n    elif discriminant < 0:\r\n        return (\"no real solution\",discriminant)"
    },
    {
        "number": 964,
        "prompt": "Write a python function to check whether the length of the word is even or not.\ndef word_len(s): \n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    if len(s) % 2 == 0: \n        return \"Even\"\n    else: \n        return \"Odd\"\n\n#Testing the function with some inputs\nprint(word_len(\"hello\")) # Output: Odd \nprint(word_len(\"python\")) # Output: Even \nprint(word_len(\"programming\")) # Output: Even \nprint(word_len(\"programminglanguage\")) # Output: Odd \nprint(word_len(\"programminglanguage\")) # Output: Odd ",
        "generated_testcode": "assert word_len(\"hello\") == True\n",
        "test": "assert word_len(\"program\") == False\nassert word_len(\"solution\") == True\nassert word_len(\"data\") == True",
        "canonical_solution": "def word_len(s): \r\n    s = s.split(' ')   \r\n    for word in s:    \r\n        if len(word)%2==0: \r\n            return True  \r\n        else:\r\n          return False"
    },
    {
        "number": 965,
        "prompt": "Write a function to convert camel case string to snake case string.\ndef camel_to_snake(text):\n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    words = []\n    for i in range(len(text)):\n        if text[i].isupper():\n            words.append('_'+text[i].lower())\n        else:\n            words.append(text[i])\n    return ''.join(words)\n\n\n# Test cases\nprint(camel_to_snake(\"camelCase\")) # \"camel_case\"\nprint(camel_to_snake(\"snake_case\")) # \"snake_case\"\nprint(camel_to_snake(\"camelCaseText\")) # \"camel_case_text\"\nprint(camel_to_snake(\"camelCaseToSnake\")) # \"camel_case_to_snake\"",
        "generated_testcode": "assert camel_to_snake(\"camelCaseString\") == \"camel_case_string\"\n",
        "test": "assert camel_to_snake('PythonProgram')==('python_program')\nassert camel_to_snake('pythonLanguage')==('python_language')\nassert camel_to_snake('ProgrammingLanguage')==('programming_language')",
        "canonical_solution": "def camel_to_snake(text):\r\n        import re\r\n        str1 = re.sub('(.)([A-Z][a-z]+)', r'\\1_\\2', text)\r\n        return re.sub('([a-z0-9])([A-Z])', r'\\1_\\2', str1).lower()"
    },
    {
        "number": 966,
        "prompt": "Write a function to remove an empty tuple from a list of tuples.\ndef remove_empty(tuple1): #L = [(), (), ('',), ('a', 'b'), ('a', 'b', 'c'), ('d')]\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    new_list = []\n    for tup in tuple1:\n        if len(tup) != 0:\n            new_list.append(tup)\n    return new_list\n\n\n# Test\ntuple1 = [(), (), ('',), ('a', 'b'), ('a', 'b', 'c'), ('d')]\nprint(remove_empty(tuple1)) # Output: [('a', 'b', 'c'), ('d')]\n\n# Output: [('a', 'b', 'c'), ('d')]\n\n\n# Explanation:\n# The function remove_empty() takes a list of tuples as input and creates a new list called new_list. \n# It loops through each tuple in the input list tuple1 and checks if the length of the tuple is not 0. If the length is not 0, \n# it appends the tuple to the new_list. If the length is 0, it skips that tuple. Finally, it returns the new_list without any empty tuples.\n# In this example, the output is [('a', 'b', 'c'), ('d')] because ('',) and () are empty tuples, while ('a', 'b', 'c') and ('d') are not. ",
        "generated_testcode": "assert remove_empty([('',), ('a', 'b'), ('a', 'b', 'c'), ('d')] == [('a', 'b', 'c'), ('d')]\n",
        "test": "assert remove_empty([(), (), ('',), ('a', 'b'), ('a', 'b', 'c'), ('d')])==[('',), ('a', 'b'), ('a', 'b', 'c'), 'd']  \nassert remove_empty([(), (), ('',), (\"python\"), (\"program\")])==[('',), (\"python\"), (\"program\")]  \nassert remove_empty([(), (), ('',), (\"java\")])==[('',),(\"java\") ]  ",
        "canonical_solution": "def remove_empty(tuple1): #L = [(), (), ('',), ('a', 'b'), ('a', 'b', 'c'), ('d')]\r\n   tuple1 = [t for t in tuple1 if t]\r\n   return tuple1"
    },
    {
        "number": 967,
        "prompt": "Write a python function to accept the strings which contains all vowels.\ndef check(string): \n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": true,
        "answer": "    vowels = 'aeiouAEIOU'\n    for letter in string: \n        if letter in vowels: \n            return True\n        else: \n            return False\n\n#test the function \nprint(check('hello')) ",
        "generated_testcode": "assert check(\"hello\") == False\n",
        "test": "assert check(\"SEEquoiaL\") == 'accepted'\nassert check('program') == \"not accepted\"\nassert check('fine') == \"not accepted\"",
        "canonical_solution": "def check(string): \r\n  if len(set(string).intersection(\"AEIOUaeiou\"))>=5: \r\n    return ('accepted') \r\n  else: \r\n    return (\"not accepted\") "
    },
    {
        "number": 968,
        "prompt": "Write a python function to find maximum possible value for the given periodic function.\ndef floor_Max(A,B,N):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    \"\"\"\n    This function takes three arguments A,B,N.\n    A is a list of integers, B is a list of integers, and N is an integer.\n    A and B are sorted lists, with A containing non-negative integers and B containing non-negative integers.\n    We have to find the maximum possible value of the periodic function based on the given conditions.\n    The periodic function is defined as follows:\n    f(x) = A[i] if B[i] <= x <= B[i+1]\n    if x < B[0] or x > B[len(B)-1], then f(x) = A[0]\n    \"\"\"\n    # Find the max value of A and B, and add it to the end of B to make it periodic\n    max_A = max(A)\n    max_B = max(B)\n    B.append(max_B+N)\n    # Create a dictionary to store the difference between the current value of x and the next value of x\n    diff_dict = {}\n    for i in range(len(B)):\n        diff_dict[B[i]] = abs(B[i+1]-B[i])\n    # Loop through the list and find the maximum value of the periodic function\n    max_value = A[0]\n    for i in range(len(A)):\n        if i == len(B)-1:\n            break\n        for j in range(len(B)-1):\n            if B[j] <= A[i] <= B[j+",
        "generated_testcode": "assert floor_Max(1,2,3) == 2\n",
        "test": "assert floor_Max(11,10,9) == 9\nassert floor_Max(5,7,4) == 2\nassert floor_Max(2,2,1) == 1",
        "canonical_solution": "def floor_Max(A,B,N):\r\n    x = min(B - 1,N)\r\n    return (A*x) // B"
    },
    {
        "number": 969,
        "prompt": "Write a function to join the tuples if they have similar initial elements.\ndef join_tuples(test_list):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    result = []\n    for i in range(len(test_list)-1):\n        if test_list[i][0] == test_list[i+1][0]:\n            result.append(test_list[i] + test_list[i+1])\n    return result\n\nprint(join_tuples([('apple', 1), ('apple', 2), ('banana', 3), ('banana', 4), ('orange', 5), ('orange', 6), ('apple', 7)]))\n# Output: [('apple', 1, 2, 7), ('banana', 3, 4)] ",
        "generated_testcode": "assert join_tuples([(1,2,3),(1,4,5),(1,6,7),(2,3,4),(2,5,6)] ) == [(1, [2, 4, 5], (1, 6, 7), (2, 3, 4)]\n",
        "test": "assert join_tuples([(5, 6), (5, 7), (6, 8), (6, 10), (7, 13)] ) == [(5, 6, 7), (6, 8, 10), (7, 13)]\nassert join_tuples([(6, 7), (6, 8), (7, 9), (7, 11), (8, 14)] ) == [(6, 7, 8), (7, 9, 11), (8, 14)]\nassert join_tuples([(7, 8), (7, 9), (8, 10), (8, 12), (9, 15)] ) == [(7, 8, 9), (8, 10, 12), (9, 15)]",
        "canonical_solution": "def join_tuples(test_list):\r\n  res = []\r\n  for sub in test_list:\r\n    if res and res[-1][0] == sub[0]:\r\n      res[-1].extend(sub[1:])\r\n    else:\r\n      res.append([ele for ele in sub])\r\n  res = list(map(tuple, res))\r\n  return (res) "
    },
    {
        "number": 970,
        "prompt": "Write a function to find minimum of two numbers.\ndef min_of_two( x, y ):\n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    if x <= y:\n        return x\n    else:\n        return y\n\nprint(min_of_two(5, 3)) # Output: 3\nprint(min_of_two(10, 7)) # Output: 7\nprint(min_of_two(-3, -9)) # Output: -9\n\n\n# Define a function to find the maximum of three numbers\ndef max_of_three(x, y, z):\n    max1 = min_of_two(x, y)\n    max2 = min_of_two(max1, z)\n    return max2\n\nprint(max_of_three(5, 3, 8)) # Output: 8\nprint(max_of_three(-3, -4, -9)) # Output: -3\nprint(max_of_three(10, 7, 6)) # Output: 10\n\n\n# Define a function to find the absolute value of a number\ndef absolute_value(num):\n    if num < 0:\n        return -num\n    else:\n        return num\nprint(absolute_value(-10)) # Output: 10\nprint(absolute_value(5)) # Output: 5\n\n\n# Define a function to find the average of two numbers\ndef average(x, y):\n    return (x + y) / 2\nprint(average(10, 5)) # Output: 7.5\nprint(average(3, 8)) # Output:",
        "generated_testcode": "assert min_of_two(5, 10) == 5\n",
        "test": "assert min_of_two(10,20)==10\nassert min_of_two(19,15)==15\nassert min_of_two(-10,-20)==-20",
        "canonical_solution": "def min_of_two( x, y ):\r\n    if x < y:\r\n        return x\r\n    return y"
    },
    {
        "number": 971,
        "prompt": "Write a function to find the maximum number of segments of lengths a, b and c that can be formed from n.\ndef maximum_segments(n, a, b, c) : \n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    # Initialize the result \n    result = 0\n  \n    # Initialize the modulo \n    modulo = n % 3\n  \n    # Calculate the quotient \n    quotient = n // 3\n  \n    # If the sum of a and b is less than c, then it is not possible to form three segments \n    if a + b < c : \n        return result\n  \n    # If a + b is greater than or equal to c, then we can form atleast one segment of length a + b \n    result += 1\n  \n    # If a is greater than c, then we can form atleast one segment of length a \n    if a >= c : \n        result += 1\n  \n    # If b is greater than c, then we can form atleast one segment of length b \n    if b >= c : \n        result += 1\n  \n    # If modulo is greater than 0, then we can form atmost one segment of length c \n    if modulo > 0 : \n        result += 1\n  \n    # If quotient is greater than 1, then we can form atmost two segments of length a, b and c \n    if quotient > 1 : \n        result += 3\n  \n    return result \n  \n# Driver code \nn = 4\na = 1\nb = 2\nc = 3\nprint(maximum_segments(n, a, b))\n\nn = ",
        "generated_testcode": "assert maximum_segments(10, 2, 3) == 3\n",
        "test": "assert maximum_segments(7, 5, 2, 5) == 2\nassert maximum_segments(17, 2, 1, 3) == 17\nassert maximum_segments(18, 16, 3, 6) == 6",
        "canonical_solution": "def maximum_segments(n, a, b, c) : \r\n\tdp = [-1] * (n + 10) \r\n\tdp[0] = 0\r\n\tfor i in range(0, n) : \r\n\t\tif (dp[i] != -1) : \r\n\t\t\tif(i + a <= n ): \r\n\t\t\t\tdp[i + a] = max(dp[i] + 1, \r\n\t\t\t\t\t\t\tdp[i + a]) \r\n\t\t\tif(i + b <= n ): \r\n\t\t\t\tdp[i + b] = max(dp[i] + 1, \r\n\t\t\t\t\t\t\tdp[i + b]) \r\n\t\t\tif(i + c <= n ): \r\n\t\t\t\tdp[i + c] = max(dp[i] + 1, \r\n\t\t\t\t\t\t\tdp[i + c]) \r\n\treturn dp[n]"
    },
    {
        "number": 972,
        "prompt": "Write a function to concatenate the given two tuples to a nested tuple.\ndef concatenate_nested(test_tup1, test_tup2):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    result = ()\n    for i in test_tup1:\n        for j in i:\n            result += (j,)\n    for k in test_tup2:\n        result += (k,)\n    return result\n\n\n# Test the function with sample inputs\nprint(concatenate_nested(((1,2,3), (4,5,6))) # expected output: (1, 2, 3, 4, 5, 6)\nprint(concatenate_nested(((1,2,3,4), (5,6,7,8,9)) # expected output: (1, 2, 3, 4, 5, 6, 7, 8, 9)\nprint(concatenate_nested(('a', 'b', ('c', 'd', 'e') # expected output: ('a', 'b', 'c', 'd', 'e')\nprint(concatenate_nested(('hello', 'world', ('good', 'morning', ('world', '!')) # expected output: ('h', 'e', 'l', 'l', 'o', 'w', 'o', 'r', 'l', 'd', 'g', 'o', 'o', 'd', 'm', 'o', 'r', 'n', 'i', 'n', 'g', 'w', 'o', 'r', 'l', 'd', '!')\n\n# Test your function with a more complex tuple\nprint(concatenate_nested(((",
        "generated_testcode": "assert concatenate_nested(((1, 2, 3), (4, 5, 6)) == ((1, 2, 3), (4, 5, 6))\n",
        "test": "assert concatenate_nested((3, 4), (5, 6)) == (3, 4, 5, 6)\nassert concatenate_nested((1, 2), (3, 4)) == (1, 2, 3, 4)\nassert concatenate_nested((4, 5), (6, 8)) == (4, 5, 6, 8)",
        "canonical_solution": "def concatenate_nested(test_tup1, test_tup2):\r\n  res = test_tup1 + test_tup2\r\n  return (res) "
    },
    {
        "number": 973,
        "prompt": "Write a python function to left rotate the string.\ndef left_rotate(s,d):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": true,
        "answer": "    d = d%len(s) # making sure d is less than the length of the string\n    s = list(s) # converting string to list\n    s = s[d:]+s[:d] # rotating the list\n    return ''.join(s) # converting list back to string\n\n# example\ns = \"hello\"\nd = 2\nprint(left_rotate(s,d)) # output: llohe\n\ns = \"world\"\nd = 2\nprint(left_rotate(s,d)) # output: rlwo\ns = \"abcde\"\nd = 4\nprint(left_rotate(s,d)) # output: deabc\ns = \"racecar\"\nd = 3\nprint(left_rotate(s,d)) # output: crae\n\n\n# Solution:We can solve this problem by converting the given string into a list and then slicing it from the specified value d and concatenating the remaining elements to the front of the list. Then we can join the list back to form a string and return it. We can calculate the length of the string and then find the modulo of it with d, to get the actual rotation count. ",
        "generated_testcode": "assert left_rotate(\"hello\",2) == \"llohe\"\n",
        "test": "assert left_rotate(\"python\",2) == \"thonpy\"   \nassert left_rotate(\"bigdata\",3 ) == \"databig\" \nassert left_rotate(\"hadoop\",1 ) == \"adooph\" ",
        "canonical_solution": "def left_rotate(s,d):\r\n    tmp = s[d : ] + s[0 : d]\r\n    return tmp  "
    },
    {
        "number": 974,
        "prompt": "Write a function to find the minimum total path sum in the given triangle.\ndef min_sum_path(A): \n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": false,
        "answer": "    n = len(A)\n    for i in range(1, n): \n        for j in range(n): \n            if j == 0: \n                A[i][j] += A[i-1][j] \n            elif j == i: \n                A[i][j] += A[i-1][j-1] \n            else: \n                A[i][j] += min(A[i-1][j-1], A[i-1][j]) \n    return min(A[n-1]) ",
        "generated_testcode": "assert min_sum_path([[1], [2, 3], [4, 5, 6], [7, 8, 9]]) == 11\n",
        "test": "assert min_sum_path([[ 2 ], [3, 9 ], [1, 6, 7 ]]) == 6\nassert min_sum_path([[ 2 ], [3, 7 ], [8, 5, 6 ]]) == 10 \nassert min_sum_path([[ 3 ], [6, 4 ], [5, 2, 7 ]]) == 9",
        "canonical_solution": "def min_sum_path(A): \r\n\tmemo = [None] * len(A) \r\n\tn = len(A) - 1\r\n\tfor i in range(len(A[n])): \r\n\t\tmemo[i] = A[n][i] \r\n\tfor i in range(len(A) - 2, -1,-1): \r\n\t\tfor j in range( len(A[i])): \r\n\t\t\tmemo[j] = A[i][j] + min(memo[j], \r\n\t\t\t\t\t\t\t\t\tmemo[j + 1]) \r\n\treturn memo[0]"
    }
]