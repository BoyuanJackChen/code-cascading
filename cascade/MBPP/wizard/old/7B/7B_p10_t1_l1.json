[
    {
        "number": 1,
        "prompt": "Write a function to find the minimum cost path to reach (m, n) from (0, 0) for the given cost matrix cost[][] and a position (m, n) in cost[][].\ndef min_cost(cost, m, n): \n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    dp = [[0 for i in range(n+1)] for j in range(m+1)]\n    for i in range(1, m+1):\n        for j in range(1, n+1):\n            dp[i][j] = float('inf')\n    \n    for i in range(1, m+1):\n        for j in range(1, n+1):\n            dp[i][0] = dp[0][j] = float('inf')\n            \n    dp[1][1] = cost[0][0]\n    \n    for i in range(1, m+1):\n        for j in range(1, n+1):\n            if i == 1 and j == 1:\n                continue\n            dp[i][j] = min(dp[i-1][j], dp[i][j-1]) + cost[i-1][j-1]\n            \n    for i in range(1, m+1):\n        for j in range(1, n+1):\n            if i == 1 and j == 1:\n                continue\n            dp[i][j] = min(dp[i-1][j], dp[i][j-1]) + cost[i-1][j-1]\n            \n    for i in range(2, m+1):\n        for j in range(2, n+1):\n            dp[i][j] = min(dp[i-1][j], dp",
        "generated_testcode": "assert min_cost([[1, 2, 3], [4, 8, 2], [1, 5, 9]], 2, 2) == 7\n",
        "test": "assert min_cost([[1, 2, 3], [4, 8, 2], [1, 5, 3]], 2, 2) == 8\nassert min_cost([[2, 3, 4], [5, 9, 3], [2, 6, 4]], 2, 2) == 12\nassert min_cost([[3, 4, 5], [6, 10, 4], [3, 7, 5]], 2, 2) == 16",
        "canonical_solution": "R = 3\r\nC = 3\r\ndef min_cost(cost, m, n): \r\n\ttc = [[0 for x in range(C)] for x in range(R)] \r\n\ttc[0][0] = cost[0][0] \r\n\tfor i in range(1, m+1): \r\n\t\ttc[i][0] = tc[i-1][0] + cost[i][0] \r\n\tfor j in range(1, n+1): \r\n\t\ttc[0][j] = tc[0][j-1] + cost[0][j] \r\n\tfor i in range(1, m+1): \r\n\t\tfor j in range(1, n+1): \r\n\t\t\ttc[i][j] = min(tc[i-1][j-1], tc[i-1][j], tc[i][j-1]) + cost[i][j] \r\n\treturn tc[m][n]"
    },
    {
        "number": 2,
        "prompt": "Write a function to find the similar elements from the given two tuple lists.\ndef similar_elements(test_tup1, test_tup2):\n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    similar_list = []\n    for i in test_tup1:\n        for j in test_tup2:\n            if i == j:\n                similar_list.append(i)\n    return similar_list\n\n\n# Test the function with sample inputs\nprint(similar_elements((1,2,3,4,5,6), (3,4,5,6,7,8)) # Output: [3, 4, 5, 6]\nprint(similar_elements(('a', 'b', 'c', 'd'), ('d', 'e', 'f', 'g')) # Output: []\nprint(similar_elements(('a', 'b', 'c', 'd'), ('b', 'c', 'd', 'e')) # Output: ['b', 'c', 'd']\n\n\n# Write a function to check if the sum of elements of a tuple list is even or odd\ndef check_sum_even_odd(test_tuple):\n    total_sum = sum(test_tuple)\n    if total_sum % 2 == 0:\n        return True\n    else:\n        return False\n\n# Test the function with sample inputs\nprint(check_sum_even_odd((1,2,3,4,5)) # Output: True\nprint(check_sum_even_odd((1,2,3,4,5,6)) # Output: False\nprint(check_sum_even_odd((2,4,6,8)) # Output: True\n\n\n# Write a function",
        "generated_testcode": "assert similar_elements(((1,2,3,4,5,6,7,8,9), (2,4,6,8,10,12,14,16)) == (2, 4, 6, 8)\n",
        "test": "assert similar_elements((3, 4, 5, 6),(5, 7, 4, 10)) == (4, 5)\nassert similar_elements((1, 2, 3, 4),(5, 4, 3, 7)) == (3, 4)\nassert similar_elements((11, 12, 14, 13),(17, 15, 14, 13)) == (13, 14)",
        "canonical_solution": "def similar_elements(test_tup1, test_tup2):\r\n  res = tuple(set(test_tup1) & set(test_tup2))\r\n  return (res) "
    },
    {
        "number": 3,
        "prompt": "Write a python function to identify non-prime numbers.\ndef is_not_prime(n):\n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    if n <= 1:\n        return True\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return True\n    return False\n\ndef find_non_prime(n):\n    non_prime = []\n    for i in range(2, n+1):\n        if is_not_prime(i):\n            non_prime.append(i)\n    return non_prime\n\nprint(find_non_prime(20))\n\n#Output: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]\n\n",
        "generated_testcode": "assert is_not_prime(1) == True\n",
        "test": "assert is_not_prime(2) == False\nassert is_not_prime(10) == True\nassert is_not_prime(35) == True",
        "canonical_solution": "import math\r\ndef is_not_prime(n):\r\n    result = False\r\n    for i in range(2,int(math.sqrt(n)) + 1):\r\n        if n % i == 0:\r\n            result = True\r\n    return result"
    },
    {
        "number": 4,
        "prompt": "Write a function to find the largest integers from a given list of numbers using heap queue algorithm.\ndef heap_queue_largest(nums,n):\n",
        "checkpoint": "7B",
        "pass": 3,
        "correct": true,
        "answer": "    import heapq\n    heap = []\n    for i in nums:\n        heapq.heappush(heap, i)\n        if len(heap)>n:\n            heapq.heappop(heap)\n    return sorted(heap, reverse=True)\n\n# test the function\nnums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nn = 3\nprint(heap_queue_largest(nums,n)) # Output: [9, 8, 7]\n\n# Example 2:\nnums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]\nn = 5\nprint(heap_queue_largest(nums,n)) # Output: [15, 14, 13, 12, 11, 10] ",
        "generated_testcode": "assert heap_queue_largest([1,2,3,4,5,6,7,8,9], 3) == [9, 8, 7]\n",
        "test": "assert heap_queue_largest( [25, 35, 22, 85, 14, 65, 75, 22, 58],3)==[85, 75, 65] \nassert heap_queue_largest( [25, 35, 22, 85, 14, 65, 75, 22, 58],2)==[85, 75] \nassert heap_queue_largest( [25, 35, 22, 85, 14, 65, 75, 22, 58],5)==[85, 75, 65, 58, 35]",
        "canonical_solution": "import heapq as hq\r\ndef heap_queue_largest(nums,n):\r\n  largest_nums = hq.nlargest(n, nums)\r\n  return largest_nums"
    },
    {
        "number": 5,
        "prompt": "Write a function to find the number of ways to fill it with 2 x 1 dominoes for the given 3 x n board.\ndef count_ways(n): \n",
        "checkpoint": "7B",
        "pass": 3,
        "correct": true,
        "answer": "    dp = [1] + [0] * n\n    for i in range(1, n+1): \n        for j in range(3, n+1): \n            if j < 3: \n                dp[j] = 0\n            else: \n                dp[j] = dp[j-1] + dp[j-2] + dp[j-3]\n    return dp[n]\n\n# Testing the function \nn = 5\nprint(count_ways(n))\n\n# Output: 8 ",
        "generated_testcode": "assert count_ways(3) == 1\n",
        "test": "assert count_ways(2) == 3\nassert count_ways(8) == 153\nassert count_ways(12) == 2131",
        "canonical_solution": "def count_ways(n): \r\n\tA = [0] * (n + 1) \r\n\tB = [0] * (n + 1) \r\n\tA[0] = 1\r\n\tA[1] = 0\r\n\tB[0] = 0\r\n\tB[1] = 1\r\n\tfor i in range(2, n+1): \r\n\t\tA[i] = A[i - 2] + 2 * B[i - 1] \r\n\t\tB[i] = A[i - 1] + B[i - 2] \r\n\treturn A[n] "
    },
    {
        "number": 6,
        "prompt": "Write a python function to check whether the two numbers differ at one bit position only or not.\ndef is_Power_Of_Two (x): \n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": true,
        "answer": "    if x == 0: \n        return False\n    if x == 1: \n        return True\n    while x > 1: \n        if x % 2 == 0: \n            x //= 2\n        else: \n            return False\n    return True\n\ndef check_one_bit_diff(num1, num2):\n    count = 0\n    diff = num1 ^ num2\n    while diff > 0:\n        if is_Power_Of_Two(diff & 1): \n            count += 1\n        diff >>= 1\n        if count > 1: \n            return False\n    return True\n\n# Test cases \nprint(check_one_bit_diff(5, 7)) # True\nprint(check_one_bit_diff(7, 9)) # False\nprint(check_one_bit_diff(10, 15)) # True\nprint(check_one_bit_diff(15, 17)) # False\nprint(check_one_bit_diff(25, 31)) # True\nprint(check_one_bit_diff(45, 47)) # False\n",
        "generated_testcode": "assert is_Power_Of_Two(4) == True\n",
        "test": "assert differ_At_One_Bit_Pos(13,9) == True\nassert differ_At_One_Bit_Pos(15,8) == False\nassert differ_At_One_Bit_Pos(2,4) == False",
        "canonical_solution": "def is_Power_Of_Two (x): \r\n    return x and (not(x & (x - 1))) \r\ndef differ_At_One_Bit_Pos(a,b): \r\n    return is_Power_Of_Two(a ^ b)"
    },
    {
        "number": 7,
        "prompt": "Write a function to find all words which are at least 4 characters long in a string by using regex.\ndef find_char_long(text):\n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    import re\n    pattern = r'\\b\\w{4,}\\b'\n    words = re.findall(pattern, text)\n    return words\n\n# Example usage:\ntext = \"The quick brown fox jumps over the lazy dog. An elephant is a herbivore, a big animal with long legs and trunk.\"\nprint(find_char_long(text)) ",
        "generated_testcode": "assert find_char_long(\"The quick brown fox jumps over the lazy dog\") == ['quick', 'brown', 'jumps', 'over', 'lazy']\n",
        "test": "assert find_char_long('Please move back to stream') == ['Please', 'move', 'back', 'stream']\nassert find_char_long('Jing Eco and Tech') == ['Jing', 'Tech']\nassert find_char_long('Jhingai wulu road Zone 3') == ['Jhingai', 'wulu', 'road', 'Zone']",
        "canonical_solution": "import re\r\ndef find_char_long(text):\r\n  return (re.findall(r\"\\b\\w{4,}\\b\", text))"
    },
    {
        "number": 8,
        "prompt": "Write a function to find squares of individual elements in a list using lambda function.\ndef square_nums(nums):\n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    return list(map(lambda x: x**2, nums))\n\n#Example:\nnums = [1, 2, 3, 4, 5, 6, 7, 8, 9]\nprint(square_nums(nums)) #[1, 4, 9, 16, 25, 36, 49, 64]\n\n#Alternative solution using list comprehension:\ndef square_nums(nums):\n    return [x**2 for x in nums]\n#Example:\nnums = [1, 2, 3, 4, 5, 6, 7, 8, 9]\nprint(square_nums(nums)) #[1, 4, 9, 16, 25, 36, 49, 64] ",
        "generated_testcode": "assert square_nums([1, 2, 3, 4, 5]) == [1, 4, 9, 16, 25]\n",
        "test": "assert square_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]\nassert square_nums([10,20,30])==([100,400,900])\nassert square_nums([12,15])==([144,225])",
        "canonical_solution": "def square_nums(nums):\r\n square_nums = list(map(lambda x: x ** 2, nums))\r\n return square_nums"
    },
    {
        "number": 9,
        "prompt": "Write a python function to find the minimum number of rotations required to get the same string.\ndef find_Rotations(str): \n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    if len(str) == 0 or len(str) == 1: \n        return 0\n    str = str + str \n    n = len(str) \n    dict = {} \n    for i in range(n): \n        dict[str[i:]] = i \n    count = 0\n    for i in range(n): \n        if str[i] not in dict: \n            count += 1\n            dict[str[i:]] = i \n    return count ",
        "generated_testcode": "assert find_Rotations(\"waterbottle\") == 7\n",
        "test": "assert find_Rotations(\"aaaa\") == 1\nassert find_Rotations(\"ab\") == 2\nassert find_Rotations(\"abc\") == 3",
        "canonical_solution": "def find_Rotations(str): \r\n    tmp = str + str\r\n    n = len(str) \r\n    for i in range(1,n + 1): \r\n        substring = tmp[i: i+n] \r\n        if (str == substring): \r\n            return i \r\n    return n "
    },
    {
        "number": 10,
        "prompt": "Write a function to get the n smallest items from a dataset.\ndef small_nnum(list1,n):\n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    small_n = []\n    for i in range(n):\n        min_val = min(list1)\n        small_n.append(min_val)\n        list1.remove(min_val)\n    return small_n\n\nlist1 = [5, 10, 3, 7, 1, 8, 12, 2, 9, 4, 6, 11, 20, 15, 17, 19]\nn = 3\nprint(small_nnum(list1,n))\n\n\n# Output: [1, 2, 3]\n# Explanation: The function will return the smallest 3 items from the given list, which are 1, 2 and 3. ",
        "generated_testcode": "assert small_nnum([1,2,3,4,5,6,7,8,9,10],3) == [1,2,3]\n",
        "test": "assert small_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],2)==[10,20]\nassert small_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],5)==[10,20,20,40,50]\nassert small_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],3)==[10,20,20]",
        "canonical_solution": "import heapq\r\ndef small_nnum(list1,n):\r\n  smallest=heapq.nsmallest(n,list1)\r\n  return smallest"
    },
    {
        "number": 11,
        "prompt": "Write a python function to remove first and last occurrence of a given character from the string.\ndef remove_Occ(s,ch): \n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    first = s.find(ch)\n    last = s.rfind(ch)\n    return s[:first] + s[first+1:last] + s[last+1:]\n\n#Test the function \nstring = input(\"Enter a string: \")\nchar = input(\"Enter a character: \")\nprint(\"After removing first and last occurrence: \",remove_Occ(string,char))\n\n#Example:\n#Input: \"hello world\"\n#Output: \"helo wrd\"\n#Input: \"abcabc\"\n#Output: \"abca\" ",
        "generated_testcode": "assert remove_Occ(\"hello world\", \"l\") == \"he wrd\"\n",
        "test": "assert remove_Occ(\"hello\",\"l\") == \"heo\"\nassert remove_Occ(\"abcda\",\"a\") == \"bcd\"\nassert remove_Occ(\"PHP\",\"P\") == \"H\"",
        "canonical_solution": "def remove_Occ(s,ch): \r\n    for i in range(len(s)): \r\n        if (s[i] == ch): \r\n            s = s[0 : i] + s[i + 1:] \r\n            break\r\n    for i in range(len(s) - 1,-1,-1):  \r\n        if (s[i] == ch): \r\n            s = s[0 : i] + s[i + 1:] \r\n            break\r\n    return s "
    },
    {
        "number": 12,
        "prompt": "Write a function to sort a given matrix in ascending order according to the sum of its rows.\ndef sort_matrix(M):\n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    sorted_matrix = sorted(M, key=lambda row: sum(row))\n    return sorted_matrix\n\n# Test the function with the following input matrix:\nmatrix = [[3, 1, 1], [2, 2, 3], [3, 2, 1], [4, 2, 2]]\nprint(sort_matrix(matrix)) ",
        "generated_testcode": "assert sort_matrix(\n    [[1, 2, 3],\n     [4, 5, 6],\n     [7, 8, 9]]\n) == [[1, 2, 3],\n      [4, 5, 6],\n      [7, 8, 9]]\n\n",
        "test": "assert sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]])==[[1, 1, 1], [1, 2, 3], [2, 4, 5]]\nassert sort_matrix([[1, 2, 3], [-2, 4, -5], [1, -1, 1]])==[[-2, 4, -5], [1, -1, 1], [1, 2, 3]]\nassert sort_matrix([[5,8,9],[6,4,3],[2,1,4]])==[[2, 1, 4], [6, 4, 3], [5, 8, 9]]",
        "canonical_solution": "def sort_matrix(M):\r\n    result = sorted(M, key=sum)\r\n    return result"
    },
    {
        "number": 13,
        "prompt": "Write a function to count the most common words in a dictionary.\ndef count_common(words):\n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    from collections import Counter\n    word_count = Counter(words)\n    return word_count.most_common()\n\n# Test the function\ndictionary = ['apple', 'banana', 'orange', 'banana', 'apple', 'apple', 'pear', 'pear', 'pear', 'banana', 'orange', 'orange', 'orange']\nprint(count_common(dictionary)) ",
        "generated_testcode": "assert count_common([\"apple\", \"banana\", \"apple\", \"orange\", \"banana\", \"apple\", \"banana\", \"apple\", \"orange\", \"banana\", \"apple\", \"orange\", \"banana\", \"apple\", \"orange\", \"banana\", \"apple\", \"orange\", \"banana\", \"apple\", \"orange\", \"banana\", \"apple\", \"orange\", \"banana\", \"apple\", \"orange\", \"banana\", \"apple\", \"orange\", \"banana\", \"apple\", \"orange\", \"banana\", \"apple\", \"orange\", \"banana\", \"apple\", \"orange\", \"banana\", \"apple\", \"orange\", \"banana\", \"apple\", \"orange\", \"banana\", \"apple\", \"orange\", \"banana\", \"apple\", \"orange\", \"banana\", \"apple\", \"orange\", \"banana\", \"apple\", \"orange\", \"banana\", \"apple\", \"orange\", \"banana\", \"apple\", \"orange\", \"banana\", \"apple\", \"orange\", \"banana\", \"apple\", \"orange\", \"banana\", \"apple\", \"orange\", \"banana\", \"apple\", \"orange\", \"banana\", \"apple\", \"orange\", \"banana\", \"apple\", \"orange\"",
        "test": "assert count_common(['red','green','black','pink','black','white','black','eyes','white','black','orange','pink','pink','red','red','white','orange','white',\"black\",'pink','green','green','pink','green','pink','white','orange',\"orange\",'red']) == [('pink', 6), ('black', 5), ('white', 5), ('red', 4)]\nassert count_common(['one', 'two', 'three', 'four', 'five', 'one', 'two', 'one', 'three', 'one']) == [('one', 4), ('two', 2), ('three', 2), ('four', 1)]\nassert count_common(['Facebook', 'Apple', 'Amazon', 'Netflix', 'Google', 'Apple', 'Netflix', 'Amazon']) == [('Apple', 2), ('Amazon', 2), ('Netflix', 2), ('Facebook', 1)]",
        "canonical_solution": "from collections import Counter\r\ndef count_common(words):\r\n  word_counts = Counter(words)\r\n  top_four = word_counts.most_common(4)\r\n  return (top_four)\r\n"
    },
    {
        "number": 14,
        "prompt": "Write a python function to find the volume of a triangular prism.\ndef find_Volume(l,b,h) : \n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    return (1/2)*l*b*h\n\n#testing the function\nprint(find_Volume(5,6,7)) #output: 20.0\nprint(find_Volume(10,12,14)) #output: 60.0\nprint(find_Volume(7,8,12)) #output: 48.0\n\n#function to find the area of a triangular prism\ndef find_Area(base,height) :\n    return base*height\n\n#testing the function\nprint(find_Area(5,6)) #output: 30\nprint(find_Area(10,12)) #output: 60\nprint(find_Area(7,8)) #output: 28\n\n#function to find the lateral surface area of a triangular prism\ndef find_Lateral_Surface_Area(base,height,perimeter) :\n    return (base*height)+(perimeter/2)\n\n#testing the function\nprint(find_Lateral_Surface_Area(5,6,20)) #output: 22.0\nprint(find_Lateral_Surface_Area(10,12,40)) #output: 65.0\nprint(find_Lateral_Surface_Area(7,8,30)) #output: 32.0\n\n#function to find the total surface area of a triangular prism\ndef find_Total_Surface_Area(base",
        "generated_testcode": "assert find_Volume(3,4,5) == 6\n",
        "test": "assert find_Volume(10,8,6) == 240\nassert find_Volume(3,2,2) == 6\nassert find_Volume(1,2,1) == 1",
        "canonical_solution": "def find_Volume(l,b,h) : \r\n    return ((l * b * h) / 2) "
    },
    {
        "number": 15,
        "prompt": "Write a function to split a string at lowercase letters.\ndef split_lowerstring(text):\n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    result = []\n    current_word = \"\"\n    for char in text:\n        if char.islower():\n            result.append(current_word)\n            current_word = \"\"\n        else:\n            current_word += char\n    result.append(current_word)\n    return result\n\n\n# Test the function with some examples\nprint(split_lowerstring(\"HelloWorldThisIsAString\")) # Output: ['Hello', 'World', 'This', 'Is', 'A', 'String']\nprint(split_lowerstring(\"PythonIsGreatForLearning\")) # Output: ['Python', 'Is', 'Great', 'For', 'Learning']\nprint(split_lowerstring(\"TheQuickBrownFox\")) # Output: ['The', 'Quick', 'Brown', 'Fox']\n",
        "generated_testcode": "assert split_lowerstring(\"HelloWorld\") == [\"H\", \"elloW\", \"orl\", \"d\"]\n",
        "test": "assert split_lowerstring(\"AbCd\")==['bC','d']\nassert split_lowerstring(\"Python\")==['y', 't', 'h', 'o', 'n']\nassert split_lowerstring(\"Programming\")==['r', 'o', 'g', 'r', 'a', 'm', 'm', 'i', 'n', 'g']",
        "canonical_solution": "import re\r\ndef split_lowerstring(text):\r\n return (re.findall('[a-z][^a-z]*', text))"
    },
    {
        "number": 16,
        "prompt": "Write a function to find sequences of lowercase letters joined with an underscore.\ndef text_lowercase_underscore(text):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": true,
        "answer": "    result = \"\"\n    current_sequence = \"\"\n    for char in text:\n        if char.islower():\n            current_sequence += char\n        else:\n            if current_sequence:\n                result += current_sequence.lower() + \"_\"\n                current_sequence = \"\"\n    if current_sequence:\n        result += current_sequence.lower()\n    return result.strip(\"_\")\n\n\n# Test cases\nprint(text_lowercase_underscore(\"This Is A TEXT_With Underscore_Separated Words\")) # \"this_is_a_text_with_underscore_separated_words\"\nprint(text_lowercase_underscore(\"All_The_Small_Caps_Are_Here\")) # \"all_the_small_caps_are_here\"\nprint(text_lowercase_underscore(\"No_Underscore_Here\")) # \"no_underscore_here\"\nprint(text_lowercase_underscore(\"Leading_Underscore\")) # \"leading_underscore\"\nprint(text_lowercase_underscore(\"Trailing_Underscore_\")) # \"trailing_underscore\"\nprint(text_lowercase_underscore(\"No_Uppercase_Letters\")) # \"no_uppercase_letters\"\nprint(text_lowercase_underscore(\"\")) # \"\"\nprint(text_lowercase_underscore(\"_Leading_Underscore\")) # \"leading_underscore\"\nprint",
        "generated_testcode": "assert text_lowercase_underscore(\"hello_world\") == \"hello_world\"\n",
        "test": "assert text_lowercase_underscore(\"aab_cbbbc\")==('Found a match!')\nassert text_lowercase_underscore(\"aab_Abbbc\")==('Not matched!')\nassert text_lowercase_underscore(\"Aaab_abbbc\")==('Not matched!')",
        "canonical_solution": "import re\r\ndef text_lowercase_underscore(text):\r\n        patterns = '^[a-z]+_[a-z]+$'\r\n        if re.search(patterns,  text):\r\n                return 'Found a match!'\r\n        else:\r\n                return('Not matched!')"
    },
    {
        "number": 17,
        "prompt": "Write a function to find the perimeter of a square.\ndef square_perimeter(a):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": true,
        "answer": "    return a*4\n\n# Test the function with a = 5\nprint(square_perimeter(5)) # Output: 20\n# Test the function with a = 10\nprint(square_perimeter(10)) # Output: 40\n# Test the function with a = 7\nprint(square_perimeter(7)) # Output: 28 ",
        "generated_testcode": "assert square_perimeter(4) == 16\n",
        "test": "assert square_perimeter(10)==40\nassert square_perimeter(5)==20\nassert square_perimeter(4)==16",
        "canonical_solution": "def square_perimeter(a):\r\n  perimeter=4*a\r\n  return perimeter"
    },
    {
        "number": 18,
        "prompt": "Write a function to remove characters from the first string which are present in the second string.\ndef str_to_list(string): \n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    return list(string)\n\ndef remove_common_chars(str1, str2):\n    list1 = str_to_list(str1)\n    list2 = str_to_list(str2)\n    for char in list2:\n        while char in list1:\n            list1.remove(char)\n    return \"\".join(list1)\n\n\n#Test the function\nprint(remove_common_chars(\"hello\", \"lo\")) # Output: \"he\"\nprint(remove_common_chars(\"hello\", \"llo\")) # Output: \"he\"\nprint(remove_common_chars(\"hello\", \"el\")) # Output: \"ho\"\nprint(remove_common_chars(\"hello\", \"olleh\")) # Output: \"\"\nprint(remove_common_chars(\"hello\", \"ll\")) # Output: \"heo\"\nprint(remove_common_chars(\"hello\", \"lloh\")) # Output: \"he\"\n",
        "generated_testcode": "assert str_to_list(\"hello world\", \"lo\") == \"hel wrd\"\n",
        "test": "assert remove_dirty_chars(\"probasscurve\", \"pros\") == 'bacuve'\nassert remove_dirty_chars(\"digitalindia\", \"talent\") == 'digiidi'\nassert remove_dirty_chars(\"exoticmiles\", \"toxic\") == 'emles' ",
        "canonical_solution": "NO_OF_CHARS = 256\r\ndef str_to_list(string): \r\n\ttemp = [] \r\n\tfor x in string: \r\n\t\ttemp.append(x) \r\n\treturn temp \r\ndef lst_to_string(List): \r\n\treturn ''.join(List) \r\ndef get_char_count_array(string): \r\n\tcount = [0] * NO_OF_CHARS \r\n\tfor i in string: \r\n\t\tcount[ord(i)] += 1\r\n\treturn count \r\ndef remove_dirty_chars(string, second_string): \r\n\tcount = get_char_count_array(second_string) \r\n\tip_ind = 0\r\n\tres_ind = 0\r\n\ttemp = '' \r\n\tstr_list = str_to_list(string) \r\n\twhile ip_ind != len(str_list): \r\n\t\ttemp = str_list[ip_ind] \r\n\t\tif count[ord(temp)] == 0: \r\n\t\t\tstr_list[res_ind] = str_list[ip_ind] \r\n\t\t\tres_ind += 1\r\n\t\tip_ind+=1\r\n\treturn lst_to_string(str_list[0:res_ind]) "
    },
    {
        "number": 19,
        "prompt": "Write a function to find whether a given array of integers contains any duplicate element.\ndef test_duplicate(arraynums):\n",
        "checkpoint": "7B",
        "pass": 4,
        "correct": true,
        "answer": "    # Create a hashset to store the values\n    seen_nums = set()\n\n    for num in arraynums:\n        if num in seen_nums:\n            return True\n        else:\n            seen_nums.add(num)\n    return False\n\n# Test the function\nnums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nprint(test_duplicate(nums))  # False\nnums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1]\nprint(test_duplicate(nums))  # True\n",
        "generated_testcode": "assert test_duplicate([1,2,3,4,5,6,7,8,9]) == False\n",
        "test": "assert test_duplicate(([1,2,3,4,5]))==False\nassert test_duplicate(([1,2,3,4, 4]))==True\nassert test_duplicate([1,1,2,2,3,3,4,4,5])==True",
        "canonical_solution": "def test_duplicate(arraynums):\r\n    nums_set = set(arraynums)    \r\n    return len(arraynums) != len(nums_set)     "
    },
    {
        "number": 20,
        "prompt": "Write a function to check if the given number is woodball or not.\ndef is_woodall(x): \n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": true,
        "answer": "    # Check for valid input\n    if not isinstance(x, int):\n        return False\n    \n    # Check if the number is divisible by 3 and 5\n    if x % 3 == 0 and x % 5 == 0:\n        return True\n    else:\n        return False\n\n# Test the function\nprint(is_woodall(15))  # True\nprint(is_woodall(20))  # True\nprint(is_woodall(12))  # False\nprint(is_woodall(25))  # False\nprint(is_woodall(17))  # False\nprint(is_woodall(30))  # False\nprint(is_woodall(35))  # False\nprint(is_woodall(45))  # True\nprint(is_woodall(60))  # True\n",
        "generated_testcode": "assert is_woodall(15) == True\n",
        "test": "assert is_woodall(383) == True\nassert is_woodall(254) == False\nassert is_woodall(200) == False",
        "canonical_solution": "def is_woodall(x): \r\n\tif (x % 2 == 0): \r\n\t\treturn False\r\n\tif (x == 1): \r\n\t\treturn True\r\n\tx = x + 1 \r\n\tp = 0\r\n\twhile (x % 2 == 0): \r\n\t\tx = x/2\r\n\t\tp = p + 1\r\n\t\tif (p == x): \r\n\t\t\treturn True\r\n\treturn False"
    },
    {
        "number": 21,
        "prompt": "Write a function to find m number of multiples of n.\ndef multiples_of_num(m,n): \n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    # function to find the m numbers which are multiples of n \n    # initialize a list to store the multiples \n    multiples = [] \n    # iterate from 1 to m and append all the multiples to the list \n    for i in range(1, m+1): \n        multiples.append(i*n) \n    return multiples \n\n\n# test the function \nprint(multiples_of_num(10,5)) # output: [5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75, 80, 85] \nprint(multiples_of_num(7,2)) # output: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20] \nprint(multiples_of_num(3,7)) # output: [7, 14, 21, 28] ",
        "generated_testcode": "assert multiples_of_num(5, 2) == [0, 2, 4, 6, 8, 10, 12]\n",
        "test": "assert multiples_of_num(4,3)== [3,6,9,12]\nassert multiples_of_num(2,5)== [5,10]\nassert multiples_of_num(9,2)== [2,4,6,8,10,12,14,16,18]",
        "canonical_solution": "def multiples_of_num(m,n): \r\n    multiples_of_num= list(range(n,(m+1)*n, n)) \r\n    return list(multiples_of_num)"
    },
    {
        "number": 22,
        "prompt": "Write a function to find the first duplicate element in a given array of integers.\ndef find_first_duplicate(nums):\n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    # create a set to keep track of visited numbers\n    visited = set()\n    # loop through the array\n    for num in nums:\n        # if the number has been visited before, return the number\n        if num in visited:\n            return num\n        # otherwise, add it to the set of visited numbers\n        else:\n            visited.add(num)\n    # if we get to the end of the loop and haven't found a duplicate, return -1\n    return -1\n\n\n# example usage\nnums = [1, 2, 3, 4, 2, 1, 5, 6, 7, 8, 3]\nprint(find_first_duplicate(nums))  # 2\n\n\n# example usage with no duplicates\nnums = [1, 2, 3, 4, 5, 6, 7, 8]\nprint(find_first_duplicate(nums))  # -1\n\n\n# example usage with all duplicates\nnums = [1, 1, 1, 1, 1, 1, 1]\nprint(find_first_duplicate(nums))  # 1\n",
        "generated_testcode": "assert find_first_duplicate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5]) == 1\n",
        "test": "assert find_first_duplicate(([1, 2, 3, 4, 4, 5]))==4\nassert find_first_duplicate([1, 2, 3, 4])==-1\nassert find_first_duplicate([1, 1, 2, 3, 3, 2, 2])==1",
        "canonical_solution": "def find_first_duplicate(nums):\r\n    num_set = set()\r\n    no_duplicate = -1\r\n\r\n    for i in range(len(nums)):\r\n\r\n        if nums[i] in num_set:\r\n            return nums[i]\r\n        else:\r\n            num_set.add(nums[i])\r\n\r\n    return no_duplicate"
    },
    {
        "number": 23,
        "prompt": "Write a python function to find the maximum sum of elements of list in a list of lists.\ndef maximum_Sum(list1): \n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    max_sum = 0\n    for i in list1: \n        current_sum = 0\n        for j in i: \n            current_sum += j \n            if current_sum > max_sum: \n                max_sum = current_sum \n    return max_sum ",
        "generated_testcode": "assert maximum_Sum([[1,2,3],[4,5,6],[7,8,9]) == 25\n",
        "test": "assert maximum_Sum([[1,2,3],[4,5,6],[10,11,12],[7,8,9]]) == 33\nassert maximum_Sum([[0,1,1],[1,1,2],[3,2,1]]) == 6\nassert maximum_Sum([[0,1,3],[1,2,1],[9,8,2],[0,1,0],[6,4,8]]) == 19",
        "canonical_solution": "def maximum_Sum(list1): \r\n    maxi = -100000\r\n    for x in list1: \r\n        sum = 0 \r\n        for y in x: \r\n            sum+= y      \r\n        maxi = max(sum,maxi)     \r\n    return maxi "
    },
    {
        "number": 24,
        "prompt": "Write a function to convert the given binary number to its decimal equivalent.\ndef binary_to_decimal(binary): \n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    decimal = 0\n    base = 0\n    length = len(binary)\n    for digit in binary:\n        decimal += int(digit) * (2 ** base)\n        base += 1\n    return decimal\n\n# Test the function with sample inputs\nbinary = '101010'\nprint(binary_to_decimal(binary)) # Output: 10\n\nbinary = '11011011'\nprint(binary_to_decimal(binary)) # Output: 21\nbinary = '1111111111'\nprint(binary_to_decimal(binary)) # Output: 63\nbinary = '0100101000101010101010'\nprint(binary_to_decimal(binary)) # Output: 342\nbinary = '11100010101011100'\nprint(binary_to_decimal(binary)) # Output: 1094\nbinary = '011010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101",
        "generated_testcode": "assert binary_to_decimal(\"1101\") == 5\n",
        "test": "assert binary_to_decimal(100) == 4\nassert binary_to_decimal(1011) == 11\nassert binary_to_decimal(1101101) == 109",
        "canonical_solution": "def binary_to_decimal(binary): \r\n    binary1 = binary \r\n    decimal, i, n = 0, 0, 0\r\n    while(binary != 0): \r\n        dec = binary % 10\r\n        decimal = decimal + dec * pow(2, i) \r\n        binary = binary//10\r\n        i += 1\r\n    return (decimal)"
    },
    {
        "number": 25,
        "prompt": "Write a python function to find the product of non-repeated elements in a given array.\ndef find_Product(arr,n): \n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    set_arr = set(arr)\n    if len(set_arr) == n:\n        return 1\n    product = 1\n    for i in set_arr:\n        product *= i\n    return product\n    \n# Test cases\nprint(find_Product([1, 2, 3, 4, 4, 5, 6], 5)) # Output: 120\nprint(find_Product([1, 2, 3, 4, 4, 5, 6], 4)) # Output: 24\nprint(find_Product([1, 2, 3, 4, 4, 5], 4)) # Output: 6\nprint(find_Product([1, 2, 3, 4, 4, 5], 3)) # Output: 6\nprint(find_Product([1, 2, 3, 4, 5, 6], 4)) # Output: 120\nprint(find_Product([1, 2, 3, 4, 5, 6], 3)) # Output: 6\n\n\n# Explanation:\n# In the first test case, the non-repeated elements are 1, 2, 3, 5 and 6. Therefore, the product of these elements is 120.\n# In the second test case, the non-repeated elements are 1, 2, 3 and 5. Therefore, the product of these elements is 2",
        "generated_testcode": "assert find_Product([1,2,3,4,5,6,7,8,9,10], 6) == 362888000\n",
        "test": "assert find_Product([1,1,2,3],4) == 6\nassert find_Product([1,2,3,1,1],5) == 6\nassert find_Product([1,1,4,5,6],5) == 120",
        "canonical_solution": "def find_Product(arr,n): \r\n    arr.sort() \r\n    prod = 1\r\n    for i in range(0,n,1): \r\n        if (arr[i - 1] != arr[i]): \r\n            prod = prod * arr[i] \r\n    return prod; "
    },
    {
        "number": 26,
        "prompt": "Write a function to check if the given tuple list has all k elements.\ndef check_k_elements(test_list, K):\n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    return all(len(x) == K for x in test_list)\n\n\n# Test cases\nprint(check_k_elements([(1,2,3,4,5,6,7), (1,2,3,4), (1,2,3,4,5)], 3)) # True\nprint(check_k_elements([(1,2,3,4,5,6,7), (1,2,3,4), (1,2,3,4,5), (1,2,3,4,5,6)], 4)) # False\nprint(check_k_elements([(1,2,3,4,5,6,7), (1,2,3,4), (1,2,3,4,5,6), (1,2,3,4,5,6,7)], 5)) # False\nprint(check_k_elements([(1,2,3,4,5,6,7), (1,2,3,4), (1,2,3,4,5,6), (1,2,3,4,5,6,7)], 6)) # True\n\n\n\n# One-liner version\ndef check_k_elements(test_list, K):\n    return all(len(x) == K for x in test_list)\n\n\n# Test cases\nprint(check_k_elements([(1,2,3,4,5,6,7), (1,2,3,4",
        "generated_testcode": "assert check_k_elements([(1,2,3,4,5,6,7,8,9], 3) == True\n",
        "test": "assert check_k_elements([(4, 4), (4, 4, 4), (4, 4), (4, 4, 4, 4), (4, )], 4) == True\nassert check_k_elements([(7, 7, 7), (7, 7)], 7) == True\nassert check_k_elements([(9, 9), (9, 9, 9, 9)], 7) == False",
        "canonical_solution": "def check_k_elements(test_list, K):\r\n  res = True\r\n  for tup in test_list:\r\n    for ele in tup:\r\n      if ele != K:\r\n        res = False\r\n  return (res) "
    },
    {
        "number": 27,
        "prompt": "Write a python function to remove all digits from a list of strings.\ndef remove(list): \n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    result = []\n    for i in list:\n        result.append(''.join([j for j in i if not j.isdigit()]))\n    return result\n\n#Test the function\nprint(remove(['Hello123', 'World45', 'Python678'])) # Output: ['Hell', 'Worl', 'Pythn'] ",
        "generated_testcode": "assert remove(['hello123', 'world45', 'python67'] == ['hello', 'world', 'python'])\n",
        "test": "assert remove(['4words', '3letters', '4digits']) == ['words', 'letters', 'digits']\nassert remove(['28Jan','12Jan','11Jan']) == ['Jan','Jan','Jan']\nassert remove(['wonder1','wonder2','wonder3']) == ['wonder','wonder','wonder']",
        "canonical_solution": "import re  \r\ndef remove(list): \r\n    pattern = '[0-9]'\r\n    list = [re.sub(pattern, '', i) for i in list] \r\n    return list"
    },
    {
        "number": 28,
        "prompt": "Write a python function to find binomial co-efficient.\ndef binomial_Coeff(n,k): \n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    if k > n: \n        return 0\n    elif k == 0 or k == n: \n        return 1\n    else: \n        res = 1\n        for i in range(min(k, n-k)): \n            res = res * (n-i) \n            res = res // (i + 1) \n        return res ",
        "generated_testcode": "assert binomial_Coeff(5,2) == 10\n",
        "test": "assert binomial_Coeff(5,2) == 10\nassert binomial_Coeff(4,3) == 4\nassert binomial_Coeff(3,2) == 3",
        "canonical_solution": "def binomial_Coeff(n,k): \r\n    if k > n : \r\n       return 0\r\n    if k==0 or k ==n : \r\n        return 1 \r\n    return binomial_Coeff(n-1,k-1) + binomial_Coeff(n-1,k) "
    },
    {
        "number": 29,
        "prompt": "Write a python function to find the element occurring odd number of times.\ndef get_Odd_Occurrence(arr,arr_size):   \n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    # Function to find the element occurring odd number of times in the array \n    freq = {}\n    for i in range(arr_size):\n        if arr[i] in freq:\n            freq[arr[i]] += 1\n        else:\n            freq[arr[i]] = 1\n    for key in freq:\n        if freq[key]%2!=0:\n            return key\n    return -1\n\n# Test the function\narr = [1,2,3,4,5,6,6,3,4,8,1,2,5,1,4,6,7,8,3]\narr_size = len(arr)\nprint(get_Odd_Occurrence(arr,arr_size))\n",
        "generated_testcode": "assert get_Odd_Occurrence([1,2,3,4,5,6,7,7,8,6,5,4,3,2,1] , 9) == 8\n",
        "test": "assert get_Odd_Occurrence([1,2,3,1,2,3,1],7) == 1\nassert get_Odd_Occurrence([1,2,3,2,3,1,3],7) == 3\nassert get_Odd_Occurrence([2,3,5,4,5,2,4,3,5,2,4,4,2],13) == 5",
        "canonical_solution": "def get_Odd_Occurrence(arr,arr_size):   \r\n    for i in range(0,arr_size): \r\n        count = 0\r\n        for j in range(0,arr_size): \r\n            if arr[i] == arr[j]: \r\n                count+=1     \r\n        if (count % 2 != 0): \r\n            return arr[i]     \r\n    return -1"
    },
    {
        "number": 30,
        "prompt": "Write a python function to count all the substrings starting and ending with same characters.\ndef check_Equality(s): \n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    count = 0\n    for i in range(len(s)): \n        for j in range(i, len(s)): \n            if s[i] == s[j]: \n                count += 1\n    return count\n\ndef count_substrings(s):\n    n = len(s)\n    count = 0\n    for i in range(n): \n        for j in range(i, n): \n            if s[i] == s[j]: \n                count += 1\n    return count\n\n# Driver code \ns = \"geeksforgeeks\"\nprint(count_substrings(s))\n\ns = \"abc\"\nprint(check_Equality(s))",
        "generated_testcode": "assert check_Equality(\"abc\") == 1\n",
        "test": "assert count_Substring_With_Equal_Ends(\"abc\") == 3\nassert count_Substring_With_Equal_Ends(\"abcda\") == 6\nassert count_Substring_With_Equal_Ends(\"ab\") == 2",
        "canonical_solution": "def check_Equality(s): \r\n    return (ord(s[0]) == ord(s[len(s) - 1])); \r\ndef count_Substring_With_Equal_Ends(s): \r\n    result = 0; \r\n    n = len(s); \r\n    for i in range(n): \r\n        for j in range(1,n-i+1):  \r\n            if (check_Equality(s[i:i+j])): \r\n                result+=1; \r\n    return result; "
    },
    {
        "number": 31,
        "prompt": "Write a function to find the top k integers that occur most frequently from given lists of sorted and distinct integers using heap queue algorithm.\ndef func(nums, k):\n",
        "checkpoint": "7B",
        "pass": 4,
        "correct": true,
        "answer": "    if k == 0:\n        return []\n    if k > len(nums):\n        return nums\n\n    import heapq\n    freq = {}\n    for num in nums:\n        if num in freq:\n            freq[num] += 1\n        else:\n            freq[num] = 1\n\n    heap = [(-freq[num], num) for num in freq]\n    heapq.heapify(heap)\n\n    result = []\n    for i in range(k):\n        if heap:\n            result.append(heapq.heappop(heap)[1])\n\n    return result\n\n# Testing the function\nnums = [1, 1, 2, 2, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 6, 6, 6, 6, 7, 7, 8, 8, 8, 8]\nk = 3\nprint(func(nums, k))\n\n# Output: [4, 5, 6]",
        "generated_testcode": "assert func([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3) == [1, 2, 3]\n",
        "test": "assert func([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]],3)==[5, 7, 1]\nassert func([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]],1)==[1]\nassert func([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]],5)==[6, 5, 7, 8, 1]",
        "canonical_solution": "def func(nums, k):\r\n    import collections\r\n    d = collections.defaultdict(int)\r\n    for row in nums:\r\n        for i in row:\r\n            d[i] += 1\r\n    temp = []\r\n    import heapq\r\n    for key, v in d.items():\r\n        if len(temp) < k:\r\n            temp.append((v, key))\r\n            if len(temp) == k:\r\n                heapq.heapify(temp)\r\n        else:\r\n            if v > temp[0][0]:\r\n                heapq.heappop(temp)\r\n                heapq.heappush(temp, (v, key))\r\n    result = []\r\n    while temp:\r\n        v, key = heapq.heappop(temp)\r\n        result.append(key)\r\n    return result"
    },
    {
        "number": 32,
        "prompt": "Write a python function to find the largest prime factor of a given number.\ndef max_Prime_Factors (n): \n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    factors = []\n    while n % 2 == 0:\n        factors.append(2)\n        n = n // 2\n    for i in range(3,int(n**0.5)+1,2):\n        while (n % i) == 0:\n            factors.append(i)\n            n = n // i\n    if n > 2:\n        factors.append(n)\n    return max(factors) ",
        "generated_testcode": "assert max_Prime_Factors(13191) == 29\n",
        "test": "assert max_Prime_Factors(15) == 5\nassert max_Prime_Factors(6) == 3\nassert max_Prime_Factors(2) == 2",
        "canonical_solution": "import math \r\ndef max_Prime_Factors (n): \r\n    maxPrime = -1 \r\n    while n%2 == 0: \r\n        maxPrime = 2\r\n        n >>= 1    \r\n    for i in range(3,int(math.sqrt(n))+1,2): \r\n        while n % i == 0: \r\n            maxPrime = i \r\n            n = n / i \r\n    if n > 2: \r\n        maxPrime = n  \r\n    return int(maxPrime)"
    },
    {
        "number": 33,
        "prompt": "Write a python function to convert a decimal number to binary number.\ndef decimal_To_Binary(N): \n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    binary = \"\"\n    while N > 0: \n        binary = str(N % 2) + binary\n        N = N // 2\n    return binary or 0 ",
        "generated_testcode": "assert decimal_To_Binary(10) == \"1010\"\n",
        "test": "assert decimal_To_Binary(10) == 1010\nassert decimal_To_Binary(1) == 1\nassert decimal_To_Binary(20) == 10100",
        "canonical_solution": "def decimal_To_Binary(N): \r\n    B_Number = 0\r\n    cnt = 0\r\n    while (N != 0): \r\n        rem = N % 2\r\n        c = pow(10,cnt)  \r\n        B_Number += rem*c  \r\n        N //= 2 \r\n        cnt += 1\r\n    return B_Number  "
    },
    {
        "number": 34,
        "prompt": "Write a python function to find the missing number in a sorted array.\ndef find_missing(ar,N): \n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": " \n    if N == 1: \n        return 1 if ar[0] == 2 else 2\n  \n  \n    if N == 2: \n        return 3 if ar[0] == 1 else 1\n  \n  \n    i = 1\n    while i < N: \n        if ar[i] - ar[i-1] != 1: \n            if ar[i-1] == 2 and ar[i] == 3: \n                return 1\n            elif ar[i-1] == 1 and ar[i] == 2: \n                return 3\n            else: \n                return ar[i-1]+1 if ar[i-1] == N else ar[i]+1\n        i += 1\n    return N+1\n  \n#test the function\narr = [1,2,3,4,5,7,8,10,11,12,13,14]\nprint(find_missing(arr,len(arr)))\narr = [1,2,3,4,5,6,7,8,9,11,12,13,14]\nprint(find_missing(arr,len(arr))\narr = [1,2,3,4,5,6,7,8,9,10,11,13,14]\nprint(find_missing(arr,len(arr))",
        "generated_testcode": "assert find_missing([1,2,3,4,5,6,7,8,9,10],9) == 11\n",
        "test": "assert find_missing([1,2,3,5],4) == 4\nassert find_missing([1,3,4,5],4) == 2\nassert find_missing([1,2,3,5,6,7],5) == 4",
        "canonical_solution": "def find_missing(ar,N): \r\n    l = 0\r\n    r = N - 1\r\n    while (l <= r):  \r\n        mid = (l + r) / 2\r\n        mid= int (mid) \r\n        if (ar[mid] != mid + 1 and ar[mid - 1] == mid): \r\n            return (mid + 1)  \r\n        elif (ar[mid] != mid + 1): \r\n            r = mid - 1 \r\n        else: \r\n            l = mid + 1\r\n    return (-1) "
    },
    {
        "number": 35,
        "prompt": "Write a function to find the n-th rectangular number.\ndef find_rect_num(n):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": true,
        "answer": "    count = 0\n    for i in range(1, n+1):\n        for j in range(1, i+1):\n            count += i * j\n    return count\n\n# Test the function with the given test cases\nprint(find_rect_num(1)) # Expected output: 1\nprint(find_rect_num(2)) # Expected output: 3\nprint(find_rect_num(3)) # Expected output: 6\nprint(find_rect_num(4)) # Expected output: 10\nprint(find_rect_num(5)) # Expected output: 15\nprint(find_rect_num(6)) # Expected output: 21\nprint(find_rect_num(7)) # Expected output: 28\nprint(find_rect_num(8)) # Expected output: 36\nprint(find_rect_num(9)) # Expected output: 45\nprint(find_rect_num(10)) # Expected output: 64\n",
        "generated_testcode": "assert find_rect_num(1) == 1\n",
        "test": "assert find_rect_num(4) == 20\nassert find_rect_num(5) == 30\nassert find_rect_num(6) == 42",
        "canonical_solution": "def find_rect_num(n):\r\n  return n*(n + 1) "
    },
    {
        "number": 36,
        "prompt": "Write a python function to find the nth digit in the proper fraction of two given numbers.\ndef find_Nth_Digit(p,q,N) :  \n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    def proper_fraction(n,d):  \n        if n < d:  \n            return n  \n        else:  \n            return n//d  \n    if p == 0:  \n        return 0  \n    if q == 0:  \n        return 0  \n    p = proper_fraction(p,q)  \n    q = proper_fraction(q,10)  \n    if N == 1:  \n        return p  \n    if N <= q:  \n        return p%10  \n    else:  \n        return (find_Nth_Digit(p//q,q,N-q)%10)  \n  \n# Driver code  \np = 1234  \nq = 10  \nN = 3  \nprint(\"The\",N,\"th digit in the proper fraction of\",p,\"/\",q,\"is\",find_Nth_Digit(p,q,N))  ",
        "generated_testcode": "assert find_Nth_Digit(3, 7, 1) == 3\n",
        "test": "assert find_Nth_Digit(1,2,1) == 5\nassert find_Nth_Digit(3,5,1) == 6\nassert find_Nth_Digit(5,6,5) == 3",
        "canonical_solution": "def find_Nth_Digit(p,q,N) :  \r\n    while (N > 0) : \r\n        N -= 1;  \r\n        p *= 10;  \r\n        res = p // q;  \r\n        p %= q;  \r\n    return res;  "
    },
    {
        "number": 37,
        "prompt": "Write a function to sort a given mixed list of integers and strings.\ndef sort_mixed_list(mixed_list):\n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    integer_list = []\n    string_list = []\n    for item in mixed_list:\n        if isinstance(item, int):\n            integer_list.append(item)\n        else:\n            string_list.append(item)\n    integer_list.sort()\n    string_list.sort()\n    return integer_list + string_list\n\n\n\n# Test cases\nprint(sort_mixed_list([4, 2, 'apple', 3, 'banana', 'orange', 1, 'grape', 'orange', 5, 3, 1, 6, 'apple']))\n# Output: [1, 1, 2, 3, 3, 4, 'apple', 'apple', 'banana', 'grape', 'orange', 'orange']\n\nprint(sort_mixed_list([4, 'apple', 3, 'banana', 'orange', 1, 'grape', 'orange', 5, 3, 1, 6]))\n# Output: [1, 1, 3, 3, 4, 'apple', 'apple', 'banana', 'grape', 'orange', 'orange']\n\nprint(sort_mixed_list([4, 'banana', 'orange', 1, 'grape', 5, 3, 1, 6]))\n# Output: [1, 1, 3, 4, 'banana', 'grape', 'orange', 5]",
        "generated_testcode": "assert sort_mixed_list([\"apple\", 1, 3, \"banana\", 2, 4, \"orange\", 5, \"grape\", 1, 3, 2, \"kiwi\", 4, 5, 6, 7, \"kiwi\", 8, 9, 10, 11, \"apple\", 12, \"orange\"] == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, \"apple\", \"banana\", \"grape\", \"kiwi\", \"kiwi\", \"orange\"]\n\n# Test the function with the given input and check if it returns the expected output. ",
        "test": "assert sort_mixed_list([19,'red',12,'green','blue', 10,'white','green',1])==[1, 10, 12, 19, 'blue', 'green', 'green', 'red', 'white']\nassert sort_mixed_list([19,'red',12,'green','blue', 10,'white','green',1])==[1, 10, 12, 19, 'blue', 'green', 'green', 'red', 'white']\nassert sort_mixed_list([19,'red',12,'green','blue', 10,'white','green',1])==[1, 10, 12, 19, 'blue', 'green', 'green', 'red', 'white']",
        "canonical_solution": "def sort_mixed_list(mixed_list):\r\n    int_part = sorted([i for i in mixed_list if type(i) is int])\r\n    str_part = sorted([i for i in mixed_list if type(i) is str])\r\n    return int_part + str_part"
    },
    {
        "number": 38,
        "prompt": "Write a function to find the division of first even and odd number of a given list.\ndef div_even_odd(list1):\n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    even_sum = 0\n    odd_sum = 0\n    for i in list1:\n        if i%2 == 0:\n            even_sum += i\n        else:\n            odd_sum += i\n    return even_sum, odd_sum\n\n# Test the function\nlist1 = [1,2,3,4,5,6,7,8,9,10,11,12]\nprint(div_even_odd(list1))\n\n# Output: (12, 25)\n",
        "generated_testcode": "assert div_even_odd([1,2,3,4,5,6,7,8,9]) == (4, 2.6666666666666666666667)\n",
        "test": "assert div_even_odd([1,3,5,7,4,1,6,8])==4\nassert div_even_odd([1,2,3,4,5,6,7,8,9,10])==2\nassert div_even_odd([1,5,7,9,10])==10",
        "canonical_solution": "def div_even_odd(list1):\r\n    first_even = next((el for el in list1 if el%2==0),-1)\r\n    first_odd = next((el for el in list1 if el%2!=0),-1)\r\n    return (first_even/first_odd)"
    },
    {
        "number": 39,
        "prompt": "Write a function to check if the letters of a given string can be rearranged so that two characters that are adjacent to each other are different.\ndef rearange_string(S):\n",
        "checkpoint": "7B",
        "pass": 6,
        "correct": true,
        "answer": "    if len(S) < 2:\n        return True\n    \n    freq = {}\n    for char in S:\n        if char in freq:\n            freq[char] += 1\n        else:\n            freq[char] = 1\n    \n    count = 0\n    for value in freq.values():\n        if value > 1:\n            count += 1\n    \n    if count > 1:\n        return False\n    return True\n\n# Test cases\nprint(rearange_string(\"aab\")) # True\nprint(rearange_string(\"aabb\")) # False\nprint(rearange_string(\"abcabc\")) # True\nprint(rearange_string(\"aabbc\")) # False\nprint(rearange_string(\"aabbccdd\")) # False\nprint(rearange_string(\"aabbcdd\")) # True\nprint(rearange_string(\"abbcccddd\")) # False\nprint(rearange_string(\"abbccdde\")) # True\nprint(rearange_string(\"abbccdee\")) # False\nprint(rearange_string(\"abbcdee\")) # True\nprint(rearange_string(\"abbcde\")) # True\n",
        "generated_testcode": "assert rearange_string(\"aab\") == True\n",
        "test": "assert rearange_string(\"aab\")==('aba')\nassert rearange_string(\"aabb\")==('abab')\nassert rearange_string(\"abccdd\")==('cdabcd')",
        "canonical_solution": "import heapq\r\nfrom collections import Counter\r\ndef rearange_string(S):\r\n    ctr = Counter(S)\r\n    heap = [(-value, key) for key, value in ctr.items()]\r\n    heapq.heapify(heap)\r\n    if (-heap[0][0]) * 2 > len(S) + 1: \r\n        return \"\"\r\n    ans = []\r\n    while len(heap) >= 2:\r\n        nct1, char1 = heapq.heappop(heap)\r\n        nct2, char2 = heapq.heappop(heap)\r\n        ans.extend([char1, char2])\r\n        if nct1 + 1: heapq.heappush(heap, (nct1 + 1, char1))\r\n        if nct2 + 1: heapq.heappush(heap, (nct2 + 1, char2))\r\n    return \"\".join(ans) + (heap[0][1] if heap else \"\")"
    },
    {
        "number": 40,
        "prompt": "Write a function to find frequency of the elements in a given list of lists using collections module.\ndef freq_element(nums):\n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    from collections import Counter\n    flat_list = [j for i in nums for j in i]\n    return Counter(flat_list)\n\n# Test the function\nnums = [[1,2,3,4,5,6], [1,2,3,4,5], [1,2,3,4,6], [1,2,3,5,6], [1,2,4,5,6]]\nprint(freq_element(nums))\n\n# Output: Counter({1: 4, 2: 4, 3: 4, 4: 4, 5: 4, 6: 4})\n",
        "generated_testcode": "assert freq_element([[1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9], [4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19], [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19]] ) == {1: 3, 2: 3, 3: 3, 4: 3, 5: 3, 6: 3, 7: 3, 8: 3, 9: 3, 10: 2, 11: 2, 12: 2, 13: 2, 14: 2, 15: 2, 16: 2, 17: 2, 18: 2, 19: 2, 10: 1, 11: 1, 12: 1, 13: 1, 14: 1, 15: 1, 1",
        "test": "assert freq_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]])==({2: 3, 1: 2, 5: 2, 3: 1, 4: 1, 6: 1, 7: 1, 9: 1})\nassert freq_element([[1,2,3,4],[5,6,7,8],[9,10,11,12]])==({1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 1, 12: 1})\nassert freq_element([[15,20,30,40],[80,90,100,110],[30,30,80,90]])==({30: 3, 80: 2, 90: 2, 15: 1, 20: 1, 40: 1, 100: 1, 110: 1})",
        "canonical_solution": "from collections import Counter\r\nfrom itertools import chain\r\ndef freq_element(nums):\r\n  result = Counter(chain.from_iterable(nums))\r\n  return result"
    },
    {
        "number": 41,
        "prompt": "Write a function to filter even numbers using lambda function.\ndef filter_evennumbers(nums):\n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    even_nums = list(filter(lambda x: x % 2 == 0, nums))\n    return even_nums\n\n# Test the function with the given input\nnums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\nprint(filter_evennumbers(nums))\n\n# Output: [2, 4, 6, 8, 10] ",
        "generated_testcode": "assert filter_evennumbers([1, 2, 3, 4, 5, 6, 7, 8, 9]) == [2, 4, 6, 8]\n",
        "test": "assert filter_evennumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[2, 4, 6, 8, 10]\nassert filter_evennumbers([10,20,45,67,84,93])==[10,20,84]\nassert filter_evennumbers([5,7,9,8,6,4,3])==[8,6,4]",
        "canonical_solution": "def filter_evennumbers(nums):\r\n even_nums = list(filter(lambda x: x%2 == 0, nums))\r\n return even_nums"
    },
    {
        "number": 42,
        "prompt": "Write a python function to find the sum of repeated elements in a given array.\ndef find_Sum(arr,n): \n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": " \n    # Create a dictionary to store the frequency of each element in the array \n    freq_dict = {} \n    for i in range(n): \n        if arr[i] in freq_dict: \n            freq_dict[arr[i]] += 1\n        else: \n            freq_dict[arr[i]] = 1\n  \n  \n    # Initialize sum variable to store the sum of repeated elements \n    sum = 0\n  \n    # Traverse through the dictionary and add the frequency of each repeated element to the sum variable \n    for key, value in freq_dict.items(): \n        if value > 1: \n            sum += key \n  \n    return sum \n  \n# Test the function \narr = [1, 2, 3, 4, 2, 3, 4, 5, 6, 2, 3] \nn = len(arr) \nprint(\"The sum of repeated elements in the array is:\", find_Sum(arr, n)) ",
        "generated_testcode": "assert find_Sum([1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9], 9 == 30\n",
        "test": "assert find_Sum([1,2,3,1,1,4,5,6],8) == 3\nassert find_Sum([1,2,3,1,1],5) == 3\nassert find_Sum([1,1,2],3) == 2",
        "canonical_solution": "def find_Sum(arr,n): \r\n    return sum([x for x in arr if arr.count(x) > 1])"
    },
    {
        "number": 43,
        "prompt": "Write a function to find sequences of lowercase letters joined with an underscore using regex.\ndef text_match(text):\n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    import re\n    pattern = r'[a-z]+_[a-z]+'\n    matches = re.findall(pattern, text)\n    return matches\n\n# Test the function with the example text\ntext = \"This_is_an_example_of_underscore_joined_lowercase_letters\"\nprint(text_match(text))\n# Output: ['This_is_an_example_of_underscore_joined_lowercase_letters']\n\ntext = \"There_are_multiple_sequences_of_lowercase_letters_like_this_one_and_this_one\"\nprint(text_match(text))\n# Output: ['There_are_multiple_sequences_of_lowercase_letters_like_this_one', 'and_this_one']\n\ntext = \"Some_lowercase_letters_are_not_connected_with_underscore_like_thisone\"\nprint(text_match(text))\n# Output: []\n\ntext = \"The_sequence_of_lowercase_letters_should_be_continuous\"\nprint(text_match(text))\n# Output: []\n\ntext = \"There_is_an_example_of_lowercase_letters_with_numbers_123_and_lowercase_letters\"\nprint(text_match(text))\n# Output: ['There_is_an_example_of_lowercase_letters']\n\ntext = \"There_is_a_",
        "generated_testcode": "assert text_match(\"hello_world\") == True\n",
        "test": "assert text_match(\"aab_cbbbc\") == 'Found a match!'\nassert text_match(\"aab_Abbbc\") == 'Not matched!'\nassert text_match(\"Aaab_abbbc\") == 'Not matched!'",
        "canonical_solution": "import re\r\ndef text_match(text):\r\n  patterns = '^[a-z]+_[a-z]+$'\r\n  if re.search(patterns,  text):\r\n    return ('Found a match!')\r\n  else:\r\n    return ('Not matched!')"
    },
    {
        "number": 44,
        "prompt": "Write a function that matches a word at the beginning of a string.\ndef text_match_string(text):\n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": true,
        "answer": "    \"\"\"\n    Returns a string that matches a word at the beginning of a string.\n    \n    If the string starts with a word, it returns the word. If not, it returns an empty string.\n    \"\"\"\n    # find the first word in the string\n    words = text.split()\n    if not words:\n        return \"\"\n    else:\n        return words[0]\n    \n# test the function with some inputs\nprint(text_match_string(\"Hello, world!\"))\n# Output: \"Hello\"\nprint(text_match_string(\"The quick brown fox jumps over the lazy dog\"))\n# Output: \"The\"\nprint(text_match_string(\"Python is awesome!\"))\n# Output: \"Python\"\nprint(text_match_string(\"\"))\n# Output: \"\"\nprint(text_match_string(\"     \"))\n# Output: \"\"\nprint(text_match_string(\"      python is awesome\"))\n# Output: \"\"\nprint(text_match_string(\"   python is awesome     \"))\n# Output: \"python\"\nprint(text_match_string(\"  123 python is awesome     \"))\n# Output: \"\"\nprint(text_match_string(\"   python is awesome123     \"))\n# Output: \"python\"\n\n",
        "generated_testcode": "assert text_match_string(\"hello world\") == \"hello\"\n",
        "test": "assert text_match_string(\" python\")==('Not matched!')\nassert text_match_string(\"python\")==('Found a match!')\nassert text_match_string(\"  lang\")==('Not matched!')",
        "canonical_solution": "import re\r\ndef text_match_string(text):\r\n        patterns = '^\\w+'\r\n        if re.search(patterns,  text):\r\n                return 'Found a match!'\r\n        else:\r\n                return 'Not matched!'"
    },
    {
        "number": 45,
        "prompt": "Write a function to find the gcd of the given array elements.\ndef find_gcd(x, y): \n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    if y == 0: \n        return x \n    else: \n        return find_gcd(y, x % y) \n  \n# Function to find the gcd of two numbers \ndef find_gcd(x, y): \n    while(y): \n        x, y = y, x % y \n    return x \n  \ndef find_gcd_of_array(arr): \n    result = arr[0] \n    for i in range(1, len(arr)): \n        result = find_gcd(result, arr[i]) \n    return result \n  \n# Driver Code \narr = [12, 24, 8, 32, 64, 16] \nprint(\"The gcd of the given array elements is:\", find_gcd_of_array(arr)) ",
        "generated_testcode": "assert find_gcd(12, 18) == 6\n",
        "test": "assert get_gcd([2, 4, 6, 8, 16]) == 2\nassert get_gcd([1, 2, 3]) == 1\nassert get_gcd([2, 4, 6, 8]) == 2 ",
        "canonical_solution": "def find_gcd(x, y): \r\n\twhile(y): \r\n\t\tx, y = y, x % y \r\n\treturn x \r\ndef get_gcd(l):\r\n  num1 = l[0]\r\n  num2 = l[1]\r\n  gcd = find_gcd(num1, num2)\r\n  for i in range(2, len(l)):\r\n    gcd = find_gcd(gcd, l[i])\r\n  return gcd"
    },
    {
        "number": 46,
        "prompt": "Write a python function to determine whether all the numbers are different from each other are not.\ndef test_distinct(data):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": true,
        "answer": "    data = sorted(data)\n    for i in range(len(data)-1):\n        if data[i] == data[i+1]:\n            return False\n    return True\n\n#test_distinct([1,2,3,4,5,6,7]) # True\n#test_distinct([1,2,3,4,5,5,6,7]) # False\n#test_distinct([1,2,2,3,4,5,6,7]) # False\n#test_distinct([1,1,2,3,4,5,6]) # False\n#test_distinct([1,2,3,4,5,6,7,8]) # True\n\n\ndef test_distinct(data):\n    return len(data) == len(set(data))\n\n#test_distinct([1,2,3,4,5,6,7]) # True\n#test_distinct([1,2,3,4,5,5,6,7]) # False\n#test_distinct([1,2,3,4,5,6,7,8]) # True\n\ndef test_distinct(data):\n    return len(data) == len(set(data))\n#test_distinct([1,2,3,4,5,6,7]) # True\n#test_distinct([1,2,3,4,5,5,6,7]) # False\n#test_distinct([1,2,3,4,",
        "generated_testcode": "assert test_distinct([1, 2, 3, 4, 5, 6, 7, 8, 9]) == True\n",
        "test": "assert test_distinct([1,5,7,9]) == True\nassert test_distinct([2,4,5,5,7,9]) == False\nassert test_distinct([1,2,3]) == True",
        "canonical_solution": "def test_distinct(data):\r\n  if len(data) == len(set(data)):\r\n    return True\r\n  else:\r\n    return False;"
    },
    {
        "number": 47,
        "prompt": "Write a python function to find the last digit when factorial of a divides factorial of b.\ndef compute_Last_Digit(A,B): \n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    factA = 1\n    factB = 1\n    for i in range(1,A+1):\n        factA = factA*i\n    for j in range(1,B+1):\n        factB = factB*j\n    while factB%10!=0:\n        factB//=10\n    return factA%10\n\n\n#Test the function\nprint(compute_Last_Digit(10,20)) # Output: 1\nprint(compute_Last_Digit(5,10)) # Output: 5\nprint(compute_Last_Digit(15,25)) # Output: 5\nprint(compute_Last_Digit(30,40)) # Output: 6\n",
        "generated_testcode": "assert compute_Last_Digit(5,10) == 5\n",
        "test": "assert compute_Last_Digit(2,4) == 2\nassert compute_Last_Digit(6,8) == 6\nassert compute_Last_Digit(1,2) == 2",
        "canonical_solution": "def compute_Last_Digit(A,B): \r\n    variable = 1\r\n    if (A == B): \r\n        return 1\r\n    elif ((B - A) >= 5):  \r\n        return 0\r\n    else:   \r\n        for i in range(A + 1,B + 1): \r\n            variable = (variable * (i % 10)) % 10\r\n        return variable % 10"
    },
    {
        "number": 48,
        "prompt": "Write a python function to set all odd bits of a given number.\ndef odd_bit_set_number(n):\n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    return n | (n & -n)\n\n# Test the function\nprint(odd_bit_set_number(10)) # Output: 111\nprint(odd_bit_set_number(25)) # Output: 25\nprint(odd_bit_set_number(31)) # Output: 31\nprint(odd_bit_set_number(22)) # Output: 23\nprint(odd_bit_set_number(45)) # Output: 47\n\n\n# Explanation:\n# The function takes a number 'n' as input and performs a bitwise OR operation between it and its 2's complement.\n# The 2's complement of a number is obtained by flipping all the bits and adding 1.\n# For example, the 2's complement of 10 is 1010 (in binary) or 6, which is 1111111111111111111111111111111111111111111010 (in binary).\n# When we perform a bitwise AND with -n, it will set all the odd bits to 1's and all the even bits to 0's.\n# Then we OR the result with the original number, which will only set the odd bits of the original number to 1's.\n# For example, the 2's complement of 10 is 1111111",
        "generated_testcode": "assert odd_bit_set_number(10) == 11\n",
        "test": "assert odd_bit_set_number(10) == 15\nassert odd_bit_set_number(20) == 21\nassert odd_bit_set_number(30) == 31",
        "canonical_solution": "def odd_bit_set_number(n):\r\n    count = 0;res = 0;temp = n\r\n    while temp > 0:\r\n        if count % 2 == 0:\r\n            res |= (1 << count)\r\n        count += 1\r\n        temp >>= 1\r\n    return (n | res)"
    },
    {
        "number": 49,
        "prompt": "Write a function to extract every first or specified element from a given two-dimensional list.\ndef specified_element(nums, N):\n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    result = []\n    for row in nums:\n        result.append(row[N-1])\n    return result\n\n# Test the function with an example list\nnums = [[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12]]\nprint(specified_element(nums, 2))  # Output: [2, 5, 8, 11]\nprint(specified_element(nums, 3))  # Output: [3, 6, 9, 12]\n",
        "generated_testcode": "assert specified_element([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]], 1) == [1, 5, 9]\n",
        "test": "assert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],0)==[1, 4, 7]\nassert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],2)==[3, 6, 9]\nassert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],1)==[2,5,1]",
        "canonical_solution": "def specified_element(nums, N):\r\n    result = [i[N] for i in nums]\r\n    return result\r\n    "
    },
    {
        "number": 50,
        "prompt": "Write a function to find the list with minimum length using lambda function.\ndef min_length_list(input_list):\n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    return min(input_list, key=lambda x: len(x))\n\ninput_list = [['apple', 'banana', 'cherry', 'orange', 'kiwi', 'mango']]\nprint(min_length_list(input_list))\n\n# Output: ['kiwi']\n\n# Explanation:\n# The function min_length_list() takes in a list of strings as input and returns the list with minimum length using the lambda function. \n# In this case, the minimum length list is 'kiwi' which has length 4. ",
        "generated_testcode": "assert min_length_list([[1, 2, 3, 4, 5, 6, 7, 8]) == [1, 2, 3, 4, 5, 6, 7, 8]\n",
        "test": "assert min_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(1, [0])\nassert min_length_list([[1,2,3,4,5],[1,2,3,4],[1,2,3],[1,2],[1]])==(1,[1])\nassert min_length_list([[3,4,5],[6,7,8,9],[10,11,12],[1,2]])==(2,[1,2])",
        "canonical_solution": "def min_length_list(input_list):\r\n    min_length = min(len(x) for x in input_list )  \r\n    min_list = min(input_list, key = lambda i: len(i))\r\n    return(min_length, min_list)"
    },
    {
        "number": 51,
        "prompt": "Write a function to print check if the triangle is equilateral or not.\ndef check_equilateral(x,y,z):\n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    if x==y==z:\n        return \"Equilateral Triangle\"\n    else:\n        return \"Not Equilateral Triangle\"\n\nprint(check_equilateral(3,3,3))\nprint(check_equilateral(6,6,6))\nprint(check_equilateral(5,4,3))\n\n\n#Write a Python function to check if a number is even or odd\ndef even_odd(num):\n    if num % 2 == 0:\n        return \"Even\"\n    else:\n        return \"Odd\"\n\nprint(even_odd(10))\nprint(even_odd(7))\n\n\n#Write a Python function to find the sum of digits of a number\ndef sum_of_digits(num):\n    sum = 0\n    while num > 0:\n        digit = num % 10\n        sum += digit\n        num //= 10\n    return sum\n\nprint(sum_of_digits(12345))\n\n\n#Write a Python function to find the factorial of a number\ndef factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)\n\nprint(factorial(5))\n\n\n#Write a Python function to find the sum of the first n prime numbers\ndef sum_of_primes(n):\n    count = 0\n    num = 2\n    sum = ",
        "generated_testcode": "assert check_equilateral(3,3,3) == True\n",
        "test": "assert check_equilateral(6,8,12)==False \nassert check_equilateral(6,6,12)==False\nassert check_equilateral(6,6,6)==True",
        "canonical_solution": "def check_equilateral(x,y,z):\r\n  if x == y == z:\r\n\t   return True\r\n  else:\r\n     return False"
    },
    {
        "number": 52,
        "prompt": "Write a function to caluclate area of a parallelogram.\ndef parallelogram_area(b,h):\n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    area = b*h\n    return area\n\n# Testing the function with sample inputs\nprint(parallelogram_area(4,6)) # Output: 24\nprint(parallelogram_area(10,8)) # Output: 80\nprint(parallelogram_area(12,15)) # Output: 120\n\n\n# Write a function to calculate the area of a rectangle\ndef rectangle_area(l,b):\n    area = l*b\n    return area\n\n# Testing the function with sample inputs\nprint(rectangle_area(5,10)) # Output: 50\nprint(rectangle_area(8,6)) # Output: 40\nprint(rectangle_area(12,7)) # Output: 84\n\n\n# Write a function to calculate the area of a triangle\ndef triangle_area(b,h):\n    area = 0.5*b*h\n    return area\n\n# Testing the function with sample inputs\nprint(triangle_area(10,10)) # Output: 50\nprint(triangle_area(12,8)) # Output: 24\nprint(triangle_area(7,15)) # Output: 21\n\n\n# Write a function to calculate the area of a circle\ndef circle_area(r):\n    import math\n    area = math.pi * r**2\n    return area\n\n# Testing the function with sample inputs\nprint(circle_area(5))",
        "generated_testcode": "assert parallelogram_area(4, 6) == 24\n",
        "test": "assert parallelogram_area(10,20)==200\nassert parallelogram_area(15,20)==300\nassert parallelogram_area(8,9)==72",
        "canonical_solution": "def parallelogram_area(b,h):\r\n  area=b*h\r\n  return area"
    },
    {
        "number": 53,
        "prompt": "Write a python function to check whether the first and last characters of a given string are equal or not.\ndef check_Equality(str):\n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    if str[0] == str[-1]:\n        return True\n    else:\n        return False\n\n# Test the function with different strings\nprint(check_Equality(\"hello\")) # Output: False\nprint(check_Equality(\"world\")) # Output: True\nprint(check_Equality(\"python\")) # Output: True\nprint(check_Equality(\"Hello\")) # Output: False\nprint(check_Equality(\"Hello\")) # Output: True\nprint(check_Equality(\"Python\")) # Output: True\n\n",
        "generated_testcode": "assert check_Equality(\"hello\") == False\n",
        "test": "assert check_Equality(\"abcda\") == \"Equal\"\nassert check_Equality(\"ab\") == \"Not Equal\"\nassert check_Equality(\"mad\") == \"Not Equal\"",
        "canonical_solution": "def check_Equality(str):\r\n  if (str[0] == str[-1]):  \r\n    return (\"Equal\") \r\n  else:  \r\n    return (\"Not Equal\") "
    },
    {
        "number": 54,
        "prompt": "Write a function to sort the given array by using counting sort.\ndef counting_sort(my_list):\n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    # find the maximum value in the array\n    max_val = max(my_list)\n    # initialize a count list with all 0's of size max_val+1\n    count = [0] * (max_val+1)\n    # iterate through the given list and increment the count of each value in the count list\n    for i in my_list:\n        count[i] += 1\n    # iterate through the count list and find the total number of occurrences of each value in the original list\n    for i in range(1, len(count)):\n        count[i] += count[i-1]\n    # create a new list to store the sorted array\n    sorted_list = [0] * len(my_list)\n    # iterate through the original list and place the values in the sorted list in their sorted order\n    for i in range(len(my_list)-1, -1, -1):\n        index = my_list[i]\n        sorted_list[count[index]-1] = my_list[i]\n        count[index] -= 1\n    # return the sorted list\n    return sorted_list\n\n\n# test the function\nmy_list = [4, 1, 3, 2, 6, 8, 5, 9, 1, 4, 2, 7, 5, 9, 3, 8]\nprint(counting_sort(my_list))  # [1, 1, 2, 2, ",
        "generated_testcode": "assert counting_sort([4, 2, 5, 1, 3, 1, 2, 6, 7, 8, 9, 0, 4, 5, 3] ) == [0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 7, 8, 9]\n\n# Test case 2\n",
        "test": "assert counting_sort([1,23,4,5,6,7,8]) == [1, 4, 5, 6, 7, 8, 23]\nassert counting_sort([12, 9, 28, 33, 69, 45]) == [9, 12, 28, 33, 45, 69]\nassert counting_sort([8, 4, 14, 3, 2, 1]) == [1, 2, 3, 4, 8, 14]",
        "canonical_solution": "def counting_sort(my_list):\r\n    max_value = 0\r\n    for i in range(len(my_list)):\r\n        if my_list[i] > max_value:\r\n            max_value = my_list[i]\r\n    buckets = [0] * (max_value + 1)\r\n    for i in my_list:\r\n        buckets[i] += 1\r\n    i = 0\r\n    for j in range(max_value + 1):\r\n         for a in range(buckets[j]):\r\n             my_list[i] = j\r\n             i += 1\r\n    return my_list"
    },
    {
        "number": 55,
        "prompt": "Write a function to find t-nth term of geometric series.\ndef tn_gp(a,n,r):\n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    tn=a*(r**n-1)/(1-r)\n    return tn\n\na=int(input(\"Enter value of a: \"))\nr=int(input(\"Enter value of r: \"))\nn=int(input(\"Enter value of n: \")\nprint(\"T-nth term of geometric series is: \",tn_gp(a,n,r))\n\n#Example:\n#Input:\n#a=5\n#r=2\n#n=3\n#Output:\n#10\n#Explanation:\n#The t-nth term of the geometric series with first term a=5 and common ratio r=2 is 5+(2)^3-1=10. ",
        "generated_testcode": "assert tn_gp(2,3,3) == 8\n",
        "test": "assert tn_gp(1,5,2)==16\nassert tn_gp(1,5,4)==256\nassert tn_gp(2,6,3)==486",
        "canonical_solution": "import math\r\ndef tn_gp(a,n,r):\r\n  tn = a * (math.pow(r, n - 1))\r\n  return tn"
    },
    {
        "number": 56,
        "prompt": "Write a python function to check if a given number is one less than twice its reverse.\ndef rev(num):    \n",
        "checkpoint": "7B",
        "pass": 3,
        "correct": true,
        "answer": "    rev_num = int(str(num)[::-1])\n    return num + 1 == 2 * rev_num\n\n\ndef is_one_less_than_twice_reverse(num):\n    return rev(num)\n\n\n# Test cases\nprint(is_one_less_than_twice_reverse(12)) # True\nprint(is_one_less_than_twice_reverse(13)) # True\nprint(is_one_less_than_twice_reverse(1012)) # True\nprint(is_one_less_than_twice_reverse(15)) # False\nprint(is_one_less_than_twice_reverse(2012)) # True\nprint(is_one_less_than_twice_reverse(2013)) # False\nprint(is_one_less_than_twice_reverse(0)) # False",
        "generated_testcode": "assert rev(12345) == False\n",
        "test": "assert check(70) == False\nassert check(23) == False\nassert check(73) == True",
        "canonical_solution": "def rev(num):    \r\n    rev_num = 0\r\n    while (num > 0):  \r\n        rev_num = (rev_num * 10 + num % 10) \r\n        num = num // 10  \r\n    return rev_num  \r\ndef check(n):    \r\n    return (2 * rev(n) == n + 1)  "
    },
    {
        "number": 57,
        "prompt": "Write a python function to find the largest number that can be formed with the given digits.\ndef find_Max_Num(arr,n) : \n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    arr.sort(reverse=True)\n    result = \"\"\n    for i in range(n) :\n        result += str(arr[i])\n    return int(result)\n    \n#Test the function\narr = [int(x) for x in input().split()]\nn = len(arr)\nprint(find_Max_Num(arr,n))\n\n#Example\n#Input: 1 2 3 4 5 6 7 8 9\n#Output: 987654321 ",
        "generated_testcode": "assert find_Max_Num([1, 2, 3, 4, 5, 6, 7, 8, 9], 3) == 967\n",
        "test": "assert find_Max_Num([1,2,3],3) == 321\nassert find_Max_Num([4,5,6,1],4) == 6541\nassert find_Max_Num([1,2,3,9],4) == 9321",
        "canonical_solution": "def find_Max_Num(arr,n) : \r\n    arr.sort(reverse = True) \r\n    num = arr[0] \r\n    for i in range(1,n) : \r\n        num = num * 10 + arr[i] \r\n    return num "
    },
    {
        "number": 58,
        "prompt": "Write a python function to check whether the given two integers have opposite sign or not.\ndef opposite_Signs(x,y): \n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    if x*y<0:\n        return True\n    else:\n        return False\n\n# Test the function with the given test cases\nprint(opposite_Signs(3, -5)) # Output: True\nprint(opposite_Signs(2, 4)) # Output: False\nprint(opposite_Signs(0, -4)) # Output: True\nprint(opposite_Signs(-2, 4)) # Output: False\nprint(opposite_Signs(5, -5)) # Output: True\n",
        "generated_testcode": "assert opposite_Signs(3, -5) == True\n",
        "test": "assert opposite_Signs(1,-2) == True\nassert opposite_Signs(3,2) == False\nassert opposite_Signs(-10,-10) == False",
        "canonical_solution": "def opposite_Signs(x,y): \r\n    return ((x ^ y) < 0); "
    },
    {
        "number": 59,
        "prompt": "Write a function to find the nth octagonal number.\ndef is_octagonal(n): \n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    # Create a list of the first eight octagonal numbers\n    octagonal_list = [1, 2, 5, 12, 29, 51, 92, 162, 265, 401, 640, 1001]\n    for i in range(8, 1000):\n        next_octagonal = (i * (3 * i - 1) + 1) // 2\n        octagonal_list.append(next_octagonal)\n    # Check if n is in the octagonal list\n    if n in octagonal_list:\n        return True\n    return False\n\ndef nth_octagonal(n):\n    \"\"\"\n    Returns the nth octagonal number\n    \"\"\"\n    if is_octagonal(n):\n        return n\n    else:\n        # Find the index of the octagonal number\n        index = octagonal_list.index(n)\n        # Calculate the nth octagonal number\n        nth_octagonal = (index * (index * (index - 1) * (index - 1)) // 2) + index\n        return nth_octagonal\n",
        "generated_testcode": "assert is_octagonal(1) == True\n",
        "test": "assert is_octagonal(5) == 65\nassert is_octagonal(10) == 280\nassert is_octagonal(15) == 645",
        "canonical_solution": "def is_octagonal(n): \r\n\treturn 3 * n * n - 2 * n "
    },
    {
        "number": 60,
        "prompt": "Write a function to find the maximum length of the subsequence with difference between adjacent elements for the given array.\ndef max_len_sub( arr, n): \n",
        "checkpoint": "7B",
        "pass": 8,
        "correct": true,
        "answer": "    # Initialize the dp array \n    dp = [1]*n \n    for i in range(1, n): \n        for j in range(i): \n            if abs(arr[i] - arr[j]) <= 1: \n                dp[i] = max(dp[i], dp[j]+1) \n    return max(dp) \n\n# Test the function with an example array \narr = [1, 6, 5, 3, 8, 2, 7, 10, 4] \nn = len(arr) \nprint(\"Length of the maximum subsequence with difference between adjacent elements less than or equal to 1:\", max_len_sub(arr, n)) ",
        "generated_testcode": "assert max_len_sub([1, 2, 3, 5, 7, 8, 4, 6, 10, 12, 15], 7) == 4\n",
        "test": "assert max_len_sub([2, 5, 6, 3, 7, 6, 5, 8], 8) == 5\nassert max_len_sub([-2, -1, 5, -1, 4, 0, 3], 7) == 4\nassert max_len_sub([9, 11, 13, 15, 18], 5) == 1",
        "canonical_solution": "def max_len_sub( arr, n): \r\n\tmls=[] \r\n\tmax = 0\r\n\tfor i in range(n): \r\n\t\tmls.append(1) \r\n\tfor i in range(n): \r\n\t\tfor j in range(i): \r\n\t\t\tif (abs(arr[i] - arr[j]) <= 1 and mls[i] < mls[j] + 1): \r\n\t\t\t\tmls[i] = mls[j] + 1\r\n\tfor i in range(n): \r\n\t\tif (max < mls[i]): \r\n\t\t\tmax = mls[i] \r\n\treturn max"
    },
    {
        "number": 61,
        "prompt": "Write a python function to count number of substrings with the sum of digits equal to their length.\ndef count_Substrings(s,n):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": true,
        "answer": "    count=0\n    for i in range(n):\n        for j in range(n-i):\n            sum=0\n            for k in range(i+1):\n                sum+=int(s[j+k])\n            if sum==i+1:\n                count+=1\n    return count\n\n#Testing the function\ns=\"1234\"\nn=len(s)\nprint(count_Substrings(s,n)) #output:3\ns=\"12345\"\nn=len(s)\nprint(count_Substrings(s,n)) #output:5\ns=\"111111\"\nn=len(s)\nprint(count_Substrings(s,n)) #output:7\ns=\"9\"\nn=len(s)\nprint(count_Substrings(s,n)) #output:1\ns=\"123456\"\nn=len(s)\nprint(count_Substrings(s,n)) #output:0",
        "generated_testcode": "assert count_Substrings(\"12345\", 5) == 1\n",
        "test": "assert count_Substrings('112112',6) == 6\nassert count_Substrings('111',3) == 6\nassert count_Substrings('1101112',7) == 12",
        "canonical_solution": "from collections import defaultdict\r\ndef count_Substrings(s,n):\r\n    count,sum = 0,0\r\n    mp = defaultdict(lambda : 0)\r\n    mp[0] += 1\r\n    for i in range(n):\r\n        sum += ord(s[i]) - ord('0')\r\n        count += mp[sum - (i + 1)]\r\n        mp[sum - (i + 1)] += 1\r\n    return count"
    },
    {
        "number": 62,
        "prompt": "Write a python function to find smallest number in a list.\ndef smallest_num(xs):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": true,
        "answer": "    smallest = xs[0]\n    for num in xs:\n        if num < smallest:\n            smallest = num\n    return smallest\n\n#Test the function\nprint(smallest_num([5, 10, 3, 7, 12, 9, 2])) # Output: 2\nprint(smallest_num([10, 2, 3, 4, 5, 6])) # Output: 2\nprint(smallest_num([-1, 0, 2, -5, 3, -7])) # Output: -7\n\n#Alternative solution using lambda\nsmallest = lambda x: min(x)\nprint(smallest([5, 10, 3, 7, 12, 9, 2])) # Output: 2\nprint(smallest([10, 2, 3, 4, 5, 6])) # Output: 2\nprint(smallest([-1, 0, -5, 3, -7])) # Output: -7\n\n",
        "generated_testcode": "assert smallest_num([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 1\n",
        "test": "assert smallest_num([10, 20, 1, 45, 99]) == 1\nassert smallest_num([1, 2, 3]) == 1\nassert smallest_num([45, 46, 50, 60]) == 45",
        "canonical_solution": "def smallest_num(xs):\n  return min(xs)\n"
    },
    {
        "number": 63,
        "prompt": "Write a function to find the maximum difference between available pairs in the given tuple list.\ndef max_difference(test_list):\n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    if len(test_list) == 1:\n        return 0\n    elif len(test_list) == 2:\n        return test_list[1] - test_list[0]\n    else:\n        max_diff = 0\n        for i in range(1, len(test_list)):\n            diff = test_list[i] - test_list[i-1]\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff\n\n\n# Test the function\nprint(max_difference([1, 2, 3, 4, 5, 6, 7, 8]))\nprint(max_difference([1, 10, 4, 3, 9, 8, 7, 9, 2, 6]))\nprint(max_difference([1, 100, 20, 30, 40, 50, 60, 70]))\n\n\n# Output\n# 4\n# 8\n# 20\n# 90 ",
        "generated_testcode": "assert max_difference([(1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 8\n",
        "test": "assert max_difference([(3, 5), (1, 7), (10, 3), (1, 2)]) == 7\nassert max_difference([(4, 6), (2, 17), (9, 13), (11, 12)]) == 15\nassert max_difference([(12, 35), (21, 27), (13, 23), (41, 22)]) == 23",
        "canonical_solution": "def max_difference(test_list):\r\n  temp = [abs(b - a) for a, b in test_list]\r\n  res = max(temp)\r\n  return (res) "
    },
    {
        "number": 64,
        "prompt": "Write a function to sort a list of tuples using lambda.\ndef subject_marks(subjectmarks):\n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    return sorted(subjectmarks, key=lambda x: x[1], reverse=True)\n\n# Example usage:\nsubject_marks([('Maths', 85), ('Science', 90), ('English', 75), ('Social Studies', 95), ('Science', 80), ('Maths', 90), ('Social Studies', 85), ('Maths', 95)])\n\n# Expected output:\n# [('Maths', 95), ('Science', 90), ('Maths', 90), ('Science', 85), ('Social Studies', 95), ('Social Studies', 85), ('English', 75)] ",
        "generated_testcode": "assert subject_marks([(1, 80), (2, 90), (3, 70), (4, 95), (5, 85)] ) == [(1, 80), (2, 90), (4, 95), (3, 70)]\n",
        "test": "assert subject_marks([('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])==[('Social sciences', 82), ('English', 88), ('Science', 90), ('Maths', 97)]\nassert subject_marks([('Telugu',49),('Hindhi',54),('Social',33)])==([('Social',33),('Telugu',49),('Hindhi',54)])\nassert subject_marks([('Physics',96),('Chemistry',97),('Biology',45)])==([('Biology',45),('Physics',96),('Chemistry',97)])",
        "canonical_solution": "def subject_marks(subjectmarks):\r\n#subject_marks = [('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])\r\n subjectmarks.sort(key = lambda x: x[1])\r\n return subjectmarks"
    },
    {
        "number": 65,
        "prompt": "Write a function of recursion list sum.\ndef recursive_list_sum(data_list):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": true,
        "answer": "    if len(data_list) == 0:\n        return 0\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])\n\n\n# Test\ndata_list = [1, 2, 3, 4, 5, 6, 7, 8, 9]\nprint(recursive_list_sum(data_list))\n\n# Output: 45\n",
        "generated_testcode": "assert recursive_list_sum([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 45\n",
        "test": "assert recursive_list_sum(([1, 2, [3,4],[5,6]]))==21\nassert recursive_list_sum(([7, 10, [15,14],[19,41]]))==106\nassert recursive_list_sum(([10, 20, [30,40],[50,60]]))==210",
        "canonical_solution": "def recursive_list_sum(data_list):\r\n\ttotal = 0\r\n\tfor element in data_list:\r\n\t\tif type(element) == type([]):\r\n\t\t\ttotal = total + recursive_list_sum(element)\r\n\t\telse:\r\n\t\t\ttotal = total + element\r\n\treturn total"
    },
    {
        "number": 66,
        "prompt": "Write a python function to count positive numbers in a list.\ndef pos_count(list):\n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    count = 0\n    for i in list:\n        if i > 0:\n            count += 1\n    return count\n\n#Test the function\nmy_list = [-2, 3, 0, 4, -1, 5, 6, -3, 7, 0, 8, -4]\nprint(pos_count(my_list)) # Output: 4\n\n#Alternate Solution\ndef pos_count(lst):\n    return sum(1 for i in lst if i > 0) ",
        "generated_testcode": "assert pos_count([1,2,3,-4,5,6,-7,8,-9,10] ) == 4\n",
        "test": "assert pos_count([1,-2,3,-4]) == 2\nassert pos_count([3,4,5,-1]) == 3\nassert pos_count([1,2,3,4]) == 4",
        "canonical_solution": "def pos_count(list):\r\n  pos_count= 0\r\n  for num in list: \r\n    if num >= 0: \r\n      pos_count += 1\r\n  return pos_count "
    },
    {
        "number": 67,
        "prompt": "Write a function to find the number of ways to partition a set of bell numbers.\ndef bell_number(n):   \n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    def bell(n):\n        if n < 2:\n            return 1\n        if n == 2:\n            return 2\n        bell_n = 0\n        for i in range(1, n+1):\n            bell_n += bell(i) * bell(n-i)\n        return bell_n\n    \n    return bell(n) // (n+1)\n\n\ndef number_of_ways(n):\n    return bell_number(n)\n\n\n# Test the function\nprint(number_of_ways(5)) # Output: 70\nprint(number_of_ways(10)) # Output: 16796",
        "generated_testcode": "assert bell_number(5) == 10\n",
        "test": "assert bell_number(2)==2\nassert bell_number(10)==115975\nassert bell_number(56)==6775685320645824322581483068371419745979053216268760300",
        "canonical_solution": "def bell_number(n):   \r\n    bell = [[0 for i in range(n+1)] for j in range(n+1)] \r\n    bell[0][0] = 1\r\n    for i in range(1, n+1): \r\n        bell[i][0] = bell[i-1][i-1]  \r\n        for j in range(1, i+1): \r\n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]   \r\n    return bell[n][0] "
    },
    {
        "number": 68,
        "prompt": "Write a python function to check whether the given array is monotonic or not.\ndef is_Monotonic(A): \n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": true,
        "answer": "    n=len(A)\n    if n<2:\n        return True\n    inc=True\n    dec=True\n    for i in range(1,n):\n        if A[i]<A[i-1]:\n            inc=False\n        if A[i]>A[i-1]:\n            dec=False\n    if inc or dec:\n        return True\n    else:\n        return False\n\n# Example usage:\nA = [1, 2, 3, 4, 5, 6, 7, 8, 9]\nprint(is_Monotonic(A)) # Output: True\n\nA = [1, 2, 3, 4, 3, 5, 6, 9]\nprint(is_Monotonic(A)) # Output: False\n\nA = [1, 2, 2, 3, 3, 4, 4, 5, 6]\nprint(is_Monotonic(A)) # Output: True\nA = [1, 2, 3, 4, 4, 5, 6, 7]\nprint(is_Monotonic(A)) # Output: False\n\n\n# Time Complexity: O(n)\n# Space Complexity: O(1)\n# Input: A: List of integers\n# Output: True if the given array is monotonic, else False. ",
        "generated_testcode": "assert is_Monotonic([1,2,3,4,5,6,7,8,9]) == True\n",
        "test": "assert is_Monotonic([6, 5, 4, 4]) == True\nassert is_Monotonic([1, 2, 2, 3]) == True\nassert is_Monotonic([1, 3, 2]) == False",
        "canonical_solution": "def is_Monotonic(A): \r\n    return (all(A[i] <= A[i + 1] for i in range(len(A) - 1)) or\r\n            all(A[i] >= A[i + 1] for i in range(len(A) - 1))) "
    },
    {
        "number": 69,
        "prompt": "Write a function to check whether a list contains the given sublist or not.\ndef is_sublist(l, s):\n",
        "checkpoint": "7B",
        "pass": 3,
        "correct": true,
        "answer": "    if len(s) > len(l):\n        return False\n    for i in range(len(l)):\n        if s == l[i:i+len(s)]:\n            return True\n    return False\n\n\n# Test cases\nprint(is_sublist([1, 2, 3, 4, 5, 6, 7, 8], [2, 3, 4])) # True\nprint(is_sublist([1, 2, 3, 4, 5, 6, 7, 8], [4, 5, 6])) # True\nprint(is_sublist([1, 2, 3, 4, 5, 6, 7, 8], [7, 8])) # True\nprint(is_sublist([1, 2, 3, 4, 5, 6, 7, 8], [1, 3, 5])) # False\nprint(is_sublist([1, 2, 3, 4, 5, 6, 7, 8], [8, 7, 6, 5, 4, 3, 2, 1])) # True\nprint(is_sublist([1, 2, 3, 4, 5, 6, 7, 8], [9, 10])) # False\n",
        "generated_testcode": "assert is_sublist([1, 2, 3, 4, 5], [2, 3]) == True\n",
        "test": "assert is_sublist([2,4,3,5,7],[3,7])==False\nassert is_sublist([2,4,3,5,7],[4,3])==True\nassert is_sublist([2,4,3,5,7],[1,6])==False",
        "canonical_solution": "def is_sublist(l, s):\r\n\tsub_set = False\r\n\tif s == []:\r\n\t\tsub_set = True\r\n\telif s == l:\r\n\t\tsub_set = True\r\n\telif len(s) > len(l):\r\n\t\tsub_set = False\r\n\telse:\r\n\t\tfor i in range(len(l)):\r\n\t\t\tif l[i] == s[0]:\r\n\t\t\t\tn = 1\r\n\t\t\t\twhile (n < len(s)) and (l[i+n] == s[n]):\r\n\t\t\t\t\tn += 1\t\t\t\t\r\n\t\t\t\tif n == len(s):\r\n\t\t\t\t\tsub_set = True\r\n\treturn sub_set"
    },
    {
        "number": 70,
        "prompt": "Write a function to find whether all the given tuples have equal length or not.\ndef find_equal_tuple(Input, k):\n",
        "checkpoint": "7B",
        "pass": 6,
        "correct": true,
        "answer": "    for i in Input:\n        if len(i) != k:\n            return False\n    return True\n\n# Input\nInput = [(1, 2, 3), (4, 5), (6, 7, 8), (9, 10), (11, 12, 13, 14)]\nk = 3\nprint(find_equal_tuple(Input, k)) # Output: True\n\nInput = [(1, 2), (3, 4, 5), (6, 7), (8, 9, 10)]\nprint(find_equal_tuple(Input, 3)) # Output: False\n\nInput = [(1, 2, 3), (4, 5, 6), (7, 8, 9), (10, 11, 12)]\nprint(find_equal_tuple(Input, 3)) # Output: True ",
        "generated_testcode": "assert find_equal_tuple([(1,2,3), (4,5,6), (7,8,9), (10,11,12)], 3) == True\n",
        "test": "assert get_equal([(11, 22, 33), (44, 55, 66)], 3) == 'All tuples have same length'\nassert get_equal([(1, 2, 3), (4, 5, 6, 7)], 3) == 'All tuples do not have same length'\nassert get_equal([(1, 2), (3, 4)], 2) == 'All tuples have same length'",
        "canonical_solution": "def find_equal_tuple(Input, k):\r\n  flag = 1\r\n  for tuple in Input:\r\n    if len(tuple) != k:\r\n      flag = 0\r\n      break\r\n  return flag\r\ndef get_equal(Input, k):\r\n  if find_equal_tuple(Input, k) == 1:\r\n    return (\"All tuples have same length\")\r\n  else:\r\n    return (\"All tuples do not have same length\")"
    },
    {
        "number": 71,
        "prompt": "Write a function to sort a list of elements using comb sort.\ndef comb_sort(nums):\n",
        "checkpoint": "7B",
        "pass": 6,
        "correct": true,
        "answer": "    n = len(nums)\n    shrink_factor = 1.3\n    gap = n\n    swapped = True\n    while gap > 1 or swapped:\n        gap = int(gap/shrink_factor)\n        if gap < 1:\n            gap = 1\n        swapped = False\n        for i in range(n-gap):\n            if nums[i] > nums[i+gap]:\n                nums[i], nums[i+gap] = nums[i+gap], nums[i]\n                swapped = True\n        for j in range(n-gap-1):\n            if nums[j] > nums[j+1]:\n                nums[j], nums[j+1] = nums[j+1], nums[j]\n                swapped = True\n    return nums\n\n\n# Test the function\nprint(comb_sort([3, 1, 4, 2, 5, 1, 0, 6, 7, 9, 8, 3, 5, 5]))  # [0, 1, 1, 2, 3, 3, 4, 5, 5, 6, 7, 8, 9]\nprint(comb_sort([5, 4, 3, 2, 1, 0]))  # [0, 1, 2, 3, 4, 5]\nprint",
        "generated_testcode": "assert comb_sort([3, 1, 4, 2, 1, 0, 5, 6, 7, 2, 8, 3] ) == [0, 1, 1, 2, 2, 3, 3, 4, 5, 6, 7, 8]\n",
        "test": "assert comb_sort([5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79]\nassert comb_sort([41, 32, 15, 19, 22]) == [15, 19, 22, 32, 41]\nassert comb_sort([99, 15, 13, 47]) == [13, 15, 47, 99]",
        "canonical_solution": "def comb_sort(nums):\r\n    shrink_fact = 1.3\r\n    gaps = len(nums)\r\n    swapped = True\r\n    i = 0\r\n    while gaps > 1 or swapped:\r\n        gaps = int(float(gaps) / shrink_fact)\r\n        swapped = False\r\n        i = 0\r\n        while gaps + i < len(nums):\r\n            if nums[i] > nums[i+gaps]:\r\n                nums[i], nums[i+gaps] = nums[i+gaps], nums[i]\r\n                swapped = True\r\n            i += 1\r\n    return nums"
    },
    {
        "number": 72,
        "prompt": "Write a python function to check whether the given number can be represented as difference of two squares or not.\ndef dif_Square(n): \n",
        "checkpoint": "7B",
        "pass": 4,
        "correct": true,
        "answer": "    if n<0:\n        return False\n    a=0\n    b=0\n    while a*a<=n:\n        b=int(n-a*a)\n        if b*b==n:\n            return True\n        a+=1\n    return False\n\n# Test the function with some inputs\nprint(dif_Square(5)) # True\nprint(dif_Square(10)) # True\nprint(dif_Square(13)) # False\nprint(dif_Square(16)) # False\nprint(dif_Square(25)) # True\nprint(dif_Square(26)) # True\nprint(dif_Square(27)) # True\nprint(dif_Square(100)) # True\nprint(dif_Square(15)) # False\nprint(dif_Square(-1)) # False\n",
        "generated_testcode": "assert dif_Square(1) == True\n",
        "test": "assert dif_Square(5) == True\nassert dif_Square(10) == False\nassert dif_Square(15) == True",
        "canonical_solution": "def dif_Square(n): \r\n    if (n % 4 != 2): \r\n        return True\r\n    return False"
    },
    {
        "number": 73,
        "prompt": "Write a function to split the given string with multiple delimiters by using regex.\ndef multiple_split(text):\n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    # TODO: Write your code here\n    import re\n    delimiter = r'[,.;!?]'\n    words = re.split(delimiter, text)\n    return words\n\n# Test the function with an example string\ninput_string = \"Hello, how are you? I am fine; what about you?\"\nprint(multiple_split(input_string))\n\n# Output: ['Hello', 'how', 'are', 'you', 'I', 'am', 'fine', 'what', 'about', 'you']\n",
        "generated_testcode": "assert multiple_split(\"Hello, how are you? I am fine, thank you.\") == [\"Hello\", \"how\", \"are\", \"you\", \"I\", \"am\", \"fine\", \"thank\", \"you.\"]\n",
        "test": "assert multiple_split('Forces of the \\ndarkness*are coming into the play.') == ['Forces of the ', 'darkness', 'are coming into the play.']\nassert multiple_split('Mi Box runs on the \\n Latest android*which has google assistance and chromecast.') == ['Mi Box runs on the ', ' Latest android', 'which has google assistance and chromecast.']\nassert multiple_split('Certain services\\nare subjected to change*over the seperate subscriptions.') == ['Certain services', 'are subjected to change', 'over the seperate subscriptions.']",
        "canonical_solution": "import re\r\ndef multiple_split(text):\r\n  return (re.split('; |, |\\*|\\n',text))"
    },
    {
        "number": 74,
        "prompt": "Write a function to check whether it follows the sequence given in the patterns array.\ndef is_samepatterns(colors, patterns):    \n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    if len(colors) != len(patterns):\n        return False\n    for i in range(len(colors)):\n        if len(colors[i]) != len(patterns[i]):\n            return False\n        for j in range(len(colors[i])):\n            if colors[i][j] not in patterns[i]:\n                return False\n    return True\n\n# Example usage:\ncolors = [['R', 'G', 'B'], ['G', 'B', 'R'], ['B', 'R', 'G']]\npatterns = [['R', 'GB', 'BR'], ['GB', 'RB', 'BR'], ['BR', 'GR', 'GB']]\nprint(is_samepatterns(colors, patterns)) # True\n\ncolors = [['R', 'G', 'B', 'B'], ['G', 'B', 'R']\npatterns = [['R', 'GB', 'BR'], ['GB', 'RB', 'BR'], ['BR', 'GR', 'GB']]\nprint(is_samepatterns(colors, patterns)) # False\n\ncolors = [['R', 'G', 'B'], ['G', 'B', 'R'], ['B', 'R', 'G']\npatterns = [['R', 'GB', 'BR'], ['GB', 'RB', 'GR']\nprint(is_samepatterns(colors, patterns)) # False\n\ncolors = ['R', 'G', 'B', 'B']\npatterns = ['R', 'GB', 'BR']\nprint",
        "generated_testcode": "assert is_samepatterns(['red', 'blue', 'green', 'yellow', 'purple'], ['red', 'blue', 'green', 'yellow', 'purple']) == True\n",
        "test": "assert is_samepatterns([\"red\",\"green\",\"green\"], [\"a\", \"b\", \"b\"])==True \nassert is_samepatterns([\"red\",\"green\",\"greenn\"], [\"a\",\"b\",\"b\"])==False \nassert is_samepatterns([\"red\",\"green\",\"greenn\"], [\"a\",\"b\"])==False ",
        "canonical_solution": "def is_samepatterns(colors, patterns):    \r\n    if len(colors) != len(patterns):\r\n        return False    \r\n    sdict = {}\r\n    pset = set()\r\n    sset = set()    \r\n    for i in range(len(patterns)):\r\n        pset.add(patterns[i])\r\n        sset.add(colors[i])\r\n        if patterns[i] not in sdict.keys():\r\n            sdict[patterns[i]] = []\r\n\r\n        keys = sdict[patterns[i]]\r\n        keys.append(colors[i])\r\n        sdict[patterns[i]] = keys\r\n\r\n    if len(pset) != len(sset):\r\n        return False   \r\n\r\n    for values in sdict.values():\r\n\r\n        for i in range(len(values) - 1):\r\n            if values[i] != values[i+1]:\r\n                return False\r\n\r\n    return True"
    },
    {
        "number": 75,
        "prompt": "Write a function to find tuples which have all elements divisible by k from the given list of tuples.\ndef find_tuples(test_list, K):\n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    result = []\n    for tup in test_list:\n        if all(num % K == 0 for num in tup):\n            result.append(tup)\n    return result\n\n\n# Testing the function\ntest_list = [(2, 3, 4), (5, 6, 9), (10, 12, 15), (16, 20, 24), (21, 24, 25)]\nK = 3\nprint(find_tuples(test_list, K))\n",
        "generated_testcode": "assert find_tuples([(1, 2, 3, 4), (5, 6, 7), (8, 9, 10), (11, 12, 13), (14, 15, 16)], 3) == [(1, 2, 3, 4), (8, 9, 10), (11, 12, 13), (14, 15, 16)]\n",
        "test": "assert find_tuples([(6, 24, 12), (7, 9, 6), (12, 18, 21)], 6) == '[(6, 24, 12)]'\nassert find_tuples([(5, 25, 30), (4, 2, 3), (7, 8, 9)], 5) == '[(5, 25, 30)]'\nassert find_tuples([(7, 9, 16), (8, 16, 4), (19, 17, 18)], 4) == '[(8, 16, 4)]'",
        "canonical_solution": "def find_tuples(test_list, K):\r\n  res = [sub for sub in test_list if all(ele % K == 0 for ele in sub)]\r\n  return (str(res)) "
    },
    {
        "number": 76,
        "prompt": "Write a python function to count the number of squares in a rectangle.\ndef count_Squares(m,n):\n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    if m <= 0 or n <= 0:\n        return 0\n    elif m == 1 or n == 1:\n        return 1\n    else:\n        return m * n\n\n# Test the function\nprint(count_Squares(3,4)) # Output: 4\nprint(count_Squares(2,3)) # Output: 3\nprint(count_Squares(1,2)) # Output: 1\nprint(count_Squares(0,4)) # Output: 0\nprint(count_Squares(-2,4)) # Output: 0\n",
        "generated_testcode": "assert count_Squares(3,4) == 9\n",
        "test": "assert count_Squares(4,3) == 20\nassert count_Squares(2,2) == 5\nassert count_Squares(1,1) == 1",
        "canonical_solution": "def count_Squares(m,n):\r\n    if(n < m):\r\n        temp = m\r\n        m = n\r\n        n = temp\r\n    return ((m * (m + 1) * (2 * m + 1) / 6 + (n - m) * m * (m + 1) / 2))"
    },
    {
        "number": 77,
        "prompt": "Write a python function to find the difference between sum of even and odd digits.\ndef is_Diff(n): \n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    even_sum = 0\n    odd_sum = 0\n    for i in str(n):\n        if int(i) % 2 == 0:\n            even_sum += int(i)\n        else:\n            odd_sum += int(i)\n    return abs(even_sum - odd_sum)\n\n\ndef find_diff(n):\n    return is_Diff(n)\n\n\n#Testing the function\nprint(find_diff(12345)) # Expected Output: 2\nprint(find_diff(123689)) # Expected Output: 8\nprint(find_diff(123)) # Expected Output: 0\nprint(find_diff(1256789)) # Expected Output: 16\nprint(find_diff(1234)) # Expected Output: 0\n\n",
        "generated_testcode": "assert is_Diff(12345) == 8\n",
        "test": "assert is_Diff (12345) == False\nassert is_Diff(1212112) == True\nassert is_Diff(1212) == False",
        "canonical_solution": "def is_Diff(n): \r\n    return (n % 11 == 0) "
    },
    {
        "number": 78,
        "prompt": "Write a python function to find number of integers with odd number of set bits.\ndef count_With_Odd_SetBits(n): \n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    count = 0\n    for i in range(n+1):\n        if bin(i).count('1') % 2 != 0:\n            count += 1\n    return count ",
        "generated_testcode": "assert count_With_Odd_SetBits(10) == 1\n",
        "test": "assert count_With_Odd_SetBits(5) == 3\nassert count_With_Odd_SetBits(10) == 5\nassert count_With_Odd_SetBits(15) == 8",
        "canonical_solution": "def count_With_Odd_SetBits(n): \r\n    if (n % 2 != 0): \r\n        return (n + 1) / 2\r\n    count = bin(n).count('1') \r\n    ans = n / 2\r\n    if (count % 2 != 0): \r\n        ans += 1\r\n    return ans "
    },
    {
        "number": 79,
        "prompt": "Write a python function to check whether the length of the word is odd or not.\ndef word_len(s): \n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    if len(s) % 2 == 0:\n        return \"even\"\n    else:\n        return \"odd\"\n\n#Testing the function\nprint(word_len(\"hello\")) # Output: odd\nprint(word_len(\"world\")) # Output: odd\nprint(word_len(\"python\")) # Output: odd\nprint(word_len(\"java\")) # Output: even\nprint(word_len(\"programming\")) # Output: even\nprint(word_len(\"java\")) # Output: even\n",
        "generated_testcode": "assert word_len(\"hello\") == False\n",
        "test": "assert word_len(\"Hadoop\") == False\nassert word_len(\"great\") == True\nassert word_len(\"structure\") == True",
        "canonical_solution": "def word_len(s): \r\n    s = s.split(' ')   \r\n    for word in s:    \r\n        if len(word)%2!=0: \r\n            return True  \r\n        else:\r\n          return False"
    },
    {
        "number": 80,
        "prompt": "Write a function to find the nth tetrahedral number.\ndef tetrahedral_number(n): \n",
        "checkpoint": "7B",
        "pass": 3,
        "correct": true,
        "answer": "    return (n * (n * n + n + 1) // 2) \n  \n  \n# Test the function \nn = 5\nprint(\"The \", n, \"th tetrahedral number is:\", tetrahedral_number(n)) ",
        "generated_testcode": "assert tetrahedral_number(1) == 1\n",
        "test": "assert tetrahedral_number(5) == 35.0\nassert tetrahedral_number(6) == 56.0\nassert tetrahedral_number(7) == 84.0",
        "canonical_solution": "def tetrahedral_number(n): \r\n\treturn (n * (n + 1) * (n + 2)) / 6"
    },
    {
        "number": 81,
        "prompt": "Write a function to zip the two given tuples.\ndef zip_tuples(test_tup1, test_tup2):\n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    zipped_tuple = tuple(zip(test_tup1, test_tup2))\n    return zipped_tuple\n\n\n# Test the function with the following input\ntest_tup1 = (1, 2, 3, 4, 5)\ntest_tup2 = (\"apple\", \"banana\", \"orange\", \"grape\")\n\nprint(zip_tuples(test_tup1, test_tup2)) # Output: ((1, 'apple'), (2, 'banana'), (3, 'orange'), (4, 'grape'))\n",
        "generated_testcode": "assert zip_tuples((1, 2, 3, 4), (5, 6, 7, 8) == [(1, 5), (2, 6), (3, 7), (4, 8)]\n",
        "test": "assert zip_tuples((7, 8, 4, 5, 9, 10),(1, 5, 6) ) == [(7, 1), (8, 5), (4, 6), (5, 1), (9, 5), (10, 6)]\nassert zip_tuples((8, 9, 5, 6, 10, 11),(2, 6, 7) ) == [(8, 2), (9, 6), (5, 7), (6, 2), (10, 6), (11, 7)]\nassert zip_tuples((9, 10, 6, 7, 11, 12),(3, 7, 8) ) == [(9, 3), (10, 7), (6, 8), (7, 3), (11, 7), (12, 8)]",
        "canonical_solution": "def zip_tuples(test_tup1, test_tup2):\r\n  res = []\r\n  for i, j in enumerate(test_tup1):\r\n    res.append((j, test_tup2[i % len(test_tup2)])) \r\n  return (res) "
    },
    {
        "number": 82,
        "prompt": "Write a function to find the volume of a sphere.\ndef volume_sphere(r):\n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    return 4/3*3.14*r**3\n\n\n# Test the function\nprint(volume_sphere(5))\nprint(volume_sphere(10))\nprint(volume_sphere(2.5)\n\n\n# Write a function to calculate the area of a sphere given the radius\ndef area_sphere(r):\n    return 4*3.14*r**2\n\n\n# Test the function\nprint(area_sphere(5))\nprint(area_sphere(10))\nprint(area_sphere(2.5)\n\n\n# Write a function to find the surface area of a sphere\ndef surface_area_sphere(r):\n    return 4*3.14*r**2\n\n\n# Test the function\nprint(surface_area_sphere(5))\nprint(surface_area_sphere(10)\nprint(surface_area_sphere(2.5)\n\n\n# Write a function to calculate the circumference of a sphere\ndef circumference_sphere(r):\n    return 4*3.14*r\n\n# Test the function\nprint(circumference_sphere(5)\nprint(circumference_sphere(10)\nprint(circumference_sphere(2.5)\n\n\n# Write a function to find the surface area of a sphere using the formula: A = 4 * pi * r**2\ndef surface_area_sphere_2(r):\n   ",
        "generated_testcode": "assert volume_sphere(5) == 523.598, \"Incorrect volume calculation for radius 5\"\n",
        "test": "assert volume_sphere(10)==4188.790204786391\nassert volume_sphere(25)==65449.84694978735\nassert volume_sphere(20)==33510.32163829113",
        "canonical_solution": "import math\r\ndef volume_sphere(r):\r\n  volume=(4/3)*math.pi*r*r*r\r\n  return volume"
    },
    {
        "number": 83,
        "prompt": "Write a python function to find the character made by adding all the characters of the given string.\ndef get_Char(strr):  \n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    result = \"\"\n    for i in strr:\n        result += i\n    return result\n\n# test the function with a sample input\nprint(get_Char(\"hello world\")) # Output: helloworld\nprint(get_Char(\"Python\")) # Output: Pytho\nprint(get_Char(\"\")) # Output: ",
        "generated_testcode": "assert get_Char(\"hello\") == \"h\"\n",
        "test": "assert get_Char(\"abc\") == \"f\"\nassert get_Char(\"gfg\") == \"t\"\nassert get_Char(\"ab\") == \"c\"",
        "canonical_solution": "def get_Char(strr):  \r\n    summ = 0\r\n    for i in range(len(strr)): \r\n        summ += (ord(strr[i]) - ord('a') + 1)  \r\n    if (summ % 26 == 0): \r\n        return ord('z') \r\n    else: \r\n        summ = summ % 26\r\n        return chr(ord('a') + summ - 1)"
    },
    {
        "number": 84,
        "prompt": "Write a function to find the n-th number in newman conway sequence.\ndef sequence(n): \n",
        "checkpoint": "7B",
        "pass": 9,
        "correct": true,
        "answer": "    if n==1:\n        return [1]\n    elif n==2:\n        return [1,1]\n    elif n==3:\n        return [1, 1, 2]\n    else:\n        seq = [1, 1, 2, 2]\n        for i in range(4,n+1):\n            temp = (seq[i-1]-seq[i-2] + seq[i-3])\n            seq.append(temp)\n        return seq\n\n# Test the function\nprint(sequence(1)) # [1]\nprint(sequence(2)) # [1, 1]\nprint(sequence(3)) # [1, 1, 2]\nprint(sequence(4)) # [1, 1, 2, 2, 3]\nprint(sequence(5)) # [1, 1, 2, 2, 3, 3, 2]\nprint(sequence(6)) # [1, 1, 2, 2, 3, 3, 2, 4]\nprint(sequence(7)) # [1, 1, 2, 2, 3, 3, 2, 4, 4, 5]\nprint(sequence(8)) # [1, 1, 2, 2, 3, 3, 2, 4, 4, 5, 5, 4]\nprint(sequence(9)) # [1, 1, 2, 2,",
        "generated_testcode": "assert sequence(1) == [1]\n",
        "test": "assert sequence(10) == 6\nassert sequence(2) == 1\nassert sequence(3) == 2",
        "canonical_solution": "def sequence(n): \r\n\tif n == 1 or n == 2: \r\n\t\treturn 1\r\n\telse: \r\n\t\treturn sequence(sequence(n-1)) + sequence(n-sequence(n-1))"
    },
    {
        "number": 85,
        "prompt": "Write a function to find the surface area of a sphere.\ndef surfacearea_sphere(r):\n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    import math\n    pi = math.pi\n    surface_area = 4 * pi * r**2\n    return surface_area\n\n\n# Test the function with a radius of 3\nprint(surfacearea_sphere(3)) # Output: 1136.19615227715083777275\n\n\n# Test the function with a radius of 5\nprint(surfacearea_sphere(5)) # Output: 314.1592653589793333251\n\n\n# Test the function with a radius of 10\nprint(surfacearea_sphere(10)) # Output: 452.389777138034990262\n\n\n# Test the function with a radius of 0\nprint(surfacearea_sphere(0) # Output: 0\n\n\n# Test the function with a radius of -5\nprint(surfacearea_sphere(-5) # Output: 0\n\n\n# Test the function with a string input\nprint(surfacearea_sphere(\"hello\") # Output: 0\n",
        "generated_testcode": "assert surfacearea_sphere(5) == 314.1598957458617000079\nprint(\"Test case 1 passed\")\n\n",
        "test": "assert surfacearea_sphere(10)==1256.6370614359173\nassert surfacearea_sphere(15)==2827.4333882308138\nassert surfacearea_sphere(20)==5026.548245743669",
        "canonical_solution": "import math\r\ndef surfacearea_sphere(r):\r\n  surfacearea=4*math.pi*r*r\r\n  return surfacearea"
    },
    {
        "number": 86,
        "prompt": "Write a function to find nth centered hexagonal number.\ndef centered_hexagonal_number(n):\n",
        "checkpoint": "7B",
        "pass": 4,
        "correct": true,
        "answer": "    if n == 1:\n        return 1\n    else:\n        return (n * (2*n - 1) * (2*n - 1) * (2 * n - 2) + 1) // 6\n\n\n# Test the function\nprint(centered_hexagonal_number(1))  # Output: 1\nprint(centered_hexagonal_number(2))  # Output: 6\nprint(centered_hexagonal_number(3))  # Output: 15\nprint(centered_hexagonal_number(4))  # Output: 28\nprint(centered_hexagonal_number(5))  # Output: 45\nprint(centered_hexagonal_number(6))  # Output: 66\n",
        "generated_testcode": "assert centered_hexagonal_number(1) == 1\n",
        "test": "assert centered_hexagonal_number(10) == 271\nassert centered_hexagonal_number(2) == 7\nassert centered_hexagonal_number(9) == 217",
        "canonical_solution": "def centered_hexagonal_number(n):\r\n  return 3 * n * (n - 1) + 1"
    },
    {
        "number": 87,
        "prompt": "Write a function to merge three dictionaries into a single expression.\ndef merge_dictionaries_three(dict1,dict2, dict3):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": true,
        "answer": "    merged_dict = {}\n    for key in dict1:\n        if key in dict2 and key in dict3:\n            merged_dict[key] = dict1[key] + dict2[key] + dict3[key]\n        elif key in dict2:\n            merged_dict[key] = dict1[key] + dict2[key]\n        elif key in dict3:\n            merged_dict[key] = dict1[key] + dict3[key]\n        else:\n            merged_dict[key] = dict1[key]\n    return merged_dict\n\n\n#Test the function\ndict1 = {'a': 1, 'b': 2, 'c': 3, 'd': 4}\ndict2 = {'a': 10, 'b': 20, 'c': 30, 'e': 40}\ndict3 = {'a': 100, 'c': 30, 'd': 40, 'e': 50}\nprint(merge_dictionaries_three(dict1, dict2, dict3)) # Output: {'a': 1111, 'b': 22, 'c': 60, 'd': 4, 'e': 40}\n",
        "generated_testcode": "assert merge_dictionaries_three({'a': 1, 'b': 2, 'c': 3}, {'d': 4, 'e': 5}, {'f': 6, 'g': 7}) == {'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5, 'f': 6, 'g': 7}\n",
        "test": "assert merge_dictionaries_three({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" }, { \"G\": \"Green\", \"W\": \"White\" },{ \"O\": \"Orange\", \"W\": \"White\", \"B\": \"Black\" })=={'B': 'Black', 'R': 'Red', 'P': 'Pink', 'G': 'Green', 'W': 'White', 'O': 'Orange'}\nassert merge_dictionaries_three({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" }, { \"G\": \"Green\", \"W\": \"White\" },{\"L\":\"lavender\",\"B\":\"Blue\"})=={'W': 'White', 'P': 'Pink', 'B': 'Black', 'R': 'Red', 'G': 'Green', 'L': 'lavender'}\nassert merge_dictionaries_three({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" },{\"L\":\"lavender\",\"B\":\"Blue\"},{ \"G\": \"Green\", \"W\": \"White\" })=={'B': 'Black', 'P': 'Pink', 'R': 'Red', 'G': 'Green', 'L': 'lavender', 'W': 'White'}",
        "canonical_solution": "import collections as ct\r\ndef merge_dictionaries_three(dict1,dict2, dict3):\r\n    merged_dict = dict(ct.ChainMap({},dict1,dict2,dict3))\r\n    return merged_dict"
    },
    {
        "number": 88,
        "prompt": "Write a function to get the frequency of the elements in a list.\ndef freq_count(list1):\n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    freq_dict = {}\n    for i in list1:\n        if i in freq_dict:\n            freq_dict[i] += 1\n        else:\n            freq_dict[i] = 1\n    return freq_dict\n\n\n#Test the function\nprint(freq_count([1,2,3,2,3,4,5,2,1,3]))\n",
        "generated_testcode": "assert freq_count([\"apple\", \"banana\", \"orange\", \"apple\", \"banana\", \"apple\", \"orange\", \"banana\", \"orange\"] == {'apple': 3, 'banana': 3, 'orange': 3}\n",
        "test": "assert freq_count([10,10,10,10,20,20,20,20,40,40,50,50,30])==({10: 4, 20: 4, 40: 2, 50: 2, 30: 1}) \nassert freq_count([1,2,3,4,3,2,4,1,3,1,4])==({1:3, 2:2,3:3,4:3}) \nassert freq_count([5,6,7,4,9,10,4,5,6,7,9,5])==({10:1,5:3,6:2,7:2,4:2,9:2}) ",
        "canonical_solution": "import collections\r\ndef freq_count(list1):\r\n  freq_count= collections.Counter(list1)\r\n  return freq_count"
    },
    {
        "number": 89,
        "prompt": "Write a function to find the closest smaller number than n.\ndef closest_num(N):\n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def get_closest_prime(N):\n        primes = [x for x in range(N - 1, 2, -1) if is_prime(x)]\n        for prime in primes:\n            if prime <= N:\n                return prime\n        return None\n\n    return get_closest_prime(N)\n\n\n# Test cases\nprint(closest_num(17))  # should return 15\nprint(closest_num(30))  # should return 29\nprint(closest_num(10))  # should return 7\nprint(closest_num(4))  # should return None\nprint(closest_num(13))  # should return 113\nprint(closest_num(28))  # should return 23\nprint(closest_num(100))  # should return 7\nprint(closest_num(29))  # should return None\nprint(closest_num(7))  # should return 5\n",
        "generated_testcode": "assert closest_num(10) == 9\n",
        "test": "assert closest_num(11) == 10\nassert closest_num(7) == 6\nassert closest_num(12) == 11",
        "canonical_solution": "def closest_num(N):\r\n  return (N - 1)"
    },
    {
        "number": 90,
        "prompt": "Write a python function to find the length of the longest word.\ndef len_log(list1):\n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    max_len = 0\n    for word in list1:\n        if len(word) > max_len:\n            max_len = len(word)\n    return max_len\n\nlist1 = [\"apple\", \"banana\", \"orange\", \"grape\", \"kiwi\", \"strawberry\"]\nprint(len_log(list1))  # Output: 6\n\n\n# OR\n\n\ndef len_log(lst):\n    return max(len(max(lst, key=len))\n\n\nlist1 = [\"apple\", \"banana\", \"orange\", \"grape\", \"kiwi\", \"strawberry\"]\nprint(len_log(list1))  # Output: 6 ",
        "generated_testcode": "assert len_log(['hello', 'world', 'python', 'programming']) == 6\n",
        "test": "assert len_log([\"python\",\"PHP\",\"bigdata\"]) == 7\nassert len_log([\"a\",\"ab\",\"abc\"]) == 3\nassert len_log([\"small\",\"big\",\"tall\"]) == 5",
        "canonical_solution": "def len_log(list1):\r\n    max=len(list1[0])\r\n    for i in list1:\r\n        if len(i)>max:\r\n            max=len(i)\r\n    return max"
    },
    {
        "number": 91,
        "prompt": "Write a function to check if a substring is present in a given list of string values.\ndef find_substring(str1, sub_str):\n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    for s in str1:\n        if sub_str in s:\n            return True\n    return False\n\n\n# Test cases\nstr1 = [\"hello world\", \"apple pie\", \"orange juice\", \"banana\", \"kiwi\"]\nsub_str = \"apple\"\nprint(find_substring(str1, sub_str)) # True\n\nstr1 = [\"hello world\", \"apple pie\", \"orange juice\", \"banana\", \"kiwi\"]\nsub_str = \"kiwi\"\nprint(find_substring(str1, sub_str)) # True\n\nstr1 = [\"hello world\", \"apple pie\", \"orange juice\", \"banana\", \"kiwi\"]\nsub_str = \"grape\"\nprint(find_substring(str1, sub_str)) # False\n\nstr1 = [\"hello world\", \"apple pie\", \"orange juice\", \"banana\", \"kiwi\"]\nsub_str = \"pie\"\nprint(find_substring(str1, sub_str)) # True\n\nstr1 = [\"hello world\", \"apple pie\", \"orange juice\", \"banana\", \"kiwi\"]\nsub_str = \"apple pie\"\nprint(find_substring(str1, sub_str)) # True\n\nstr1 = [\"hello world\", \"apple pie\", \"orange juice\", \"banana\", \"kiwi\"]\nsub_str = \"orange juice\"\nprint(find_substring(str1, sub_str)) # True\n",
        "generated_testcode": "assert find_substring(\"hello world\", \"world\") == True\n",
        "test": "assert find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"ack\")==True\nassert find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"abc\")==False\nassert find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"ange\")==True",
        "canonical_solution": "def find_substring(str1, sub_str):\r\n   if any(sub_str in s for s in str1):\r\n       return True\r\n   return False"
    },
    {
        "number": 92,
        "prompt": "Write a function to check whether the given number is undulating or not.\ndef is_undulating(n): \n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    if n == 1: \n        return False\n    else:\n        s = str(n)\n        for i in range(1, len(s)-1): \n            if s[i] < s[i-1] and s[i] < s[i+1]: \n                return False\n            elif s[i] > s[i-1] and s[i] > s[i+1]: \n                return False\n        return True\n\n# Test cases \nprint(is_undulating(123456)) # True \nprint(is_undulating(2468)) # True \nprint(is_undulating(123789)) # False \nprint(is_undulating(1234789)) # False \nprint(is_undulating(1456789)) # False \nprint(is_undulating(123)) # True ",
        "generated_testcode": "assert is_undulating(123456789) == True\n",
        "test": "assert is_undulating(\"1212121\") == True\nassert is_undulating(\"1991\") == False\nassert is_undulating(\"121\") == True",
        "canonical_solution": "def is_undulating(n): \r\n\tif (len(n) <= 2): \r\n\t\treturn False\r\n\tfor i in range(2, len(n)): \r\n\t\tif (n[i - 2] != n[i]): \r\n\t\t\treturn False\r\n\treturn True"
    },
    {
        "number": 93,
        "prompt": "Write a function to calculate the value of 'a' to the power 'b'.\ndef power(a,b):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": true,
        "answer": "    result = 1\n    for i in range(b):\n        result *= a\n    return result\n\n# Test the function\nprint(power(2,3)) # output: 8\nprint(power(3,4)) # output: 81\nprint(power(5,2)) # output: 25\nprint(power(10,0)) # output: 1\nprint(power(0,0)) # output: 1\nprint(power(0,5)) # output: 0\nprint(power(-2,3)) # output: -8\nprint(power(-3,2)) # output: 9",
        "generated_testcode": "assert power(2,3) == 8\n",
        "test": "assert power(3,4) == 81\nassert power(2,3) == 8\nassert power(5,5) == 3125",
        "canonical_solution": "def power(a,b):\r\n\tif b==0:\r\n\t\treturn 1\r\n\telif a==0:\r\n\t\treturn 0\r\n\telif b==1:\r\n\t\treturn a\r\n\telse:\r\n\t\treturn a*power(a,b-1)"
    },
    {
        "number": 94,
        "prompt": "Write a function to extract the index minimum value record from the given tuples.\ndef index_minimum(test_list):\n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    index_min = 0\n    min_value = test_list[0]\n    for i in range(1, len(test_list)):\n        if test_list[i][1] < min_value[1]:\n            min_value = test_list[i]\n            index_min = i\n    return index_min\n\n\n# Test cases\nprint(index_minimum([(1, 2), (3, 1), (2, 3), (5, 6), (1, 4), (4, 5)]) # Output: 1\nprint(index_minimum([(3, 10), (1, 5), (2, 8), (4, 3), (6, 7)]) # Output: 3\nprint(index_minimum([(5, 3), (1, 6), (9, 1), (7, 2), (4, 1)]) # Output: 0\n",
        "generated_testcode": "assert index_minimum([(1, 2, 3, 4, 5, 6, 7, 8, 9]) == (0, 1)\n",
        "test": "assert index_minimum([('Rash', 143), ('Manjeet', 200), ('Varsha', 100)]) == 'Varsha'\nassert index_minimum([('Yash', 185), ('Dawood', 125), ('Sanya', 175)]) == 'Dawood'\nassert index_minimum([('Sai', 345), ('Salman', 145), ('Ayesha', 96)]) == 'Ayesha'",
        "canonical_solution": "from operator import itemgetter \r\ndef index_minimum(test_list):\r\n  res = min(test_list, key = itemgetter(1))[0]\r\n  return (res) "
    },
    {
        "number": 95,
        "prompt": "Write a python function to find the minimum length of sublist.\ndef Find_Min_Length(lst):  \n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": true,
        "answer": "    min_length = len(lst)  \n    for i in range(len(lst)):  \n        for j in range(i, len(lst)):  \n            current_list = lst[i:j+1]  \n            if len(current_list) < min_length:  \n                min_length = len(current_list)  \n    return min_length  \n\n# Test the function  \nprint(Find_Min_Length([1,2,3,4,5,6,7,8,9,10])) # Output: 1  \nprint(Find_Min_Length([1,2,3,4,5,6,7,8])) # Output: 1  \nprint(Find_Min_Length([1,2,3])) # Output: 1  \nprint(Find_Min_Length([1])) # Output: 1 ",
        "generated_testcode": "assert Find_Min_Length([1,2,3,4,5,6,7,8,9]) == 1\n",
        "test": "assert Find_Min_Length([[1],[1,2]]) == 1\nassert Find_Min_Length([[1,2],[1,2,3],[1,2,3,4]]) == 2\nassert Find_Min_Length([[3,3,3],[4,4,4,4]]) == 3",
        "canonical_solution": "def Find_Min_Length(lst):  \r\n    minLength = min(len(x) for x in lst )\r\n    return minLength "
    },
    {
        "number": 96,
        "prompt": "Write a python function to find the number of divisors of a given integer.\ndef divisor(n):\n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    \"\"\"\n    This function takes an integer n as input and returns the number of divisors of n.\n    \"\"\"\n    # Initialize the count variable\n    count = 0\n    # iterate over the numbers from 1 to n\n    for i in range(1, n+1):\n        # if n is divisible by i, then increment the count\n        if n % i == 0:\n            count += 1\n    return count\n\n# Test the function\nprint(divisor(24))  # Output: 4\nprint(divisor(12))  # Output: 3\nprint(divisor(100)) # Output: 4\n",
        "generated_testcode": "assert divisor(1) == 1\n",
        "test": "assert divisor(15) == 4 \nassert divisor(12) == 6\nassert divisor(9) == 3",
        "canonical_solution": "def divisor(n):\r\n  for i in range(n):\r\n    x = len([i for i in range(1,n+1) if not n % i])\r\n  return x"
    },
    {
        "number": 97,
        "prompt": "Write a function to find frequency count of list of lists.\ndef frequency_lists(list1):\n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    frequency = {}\n    for i in list1:\n        for j in i:\n            if j in frequency:\n                frequency[j] += 1\n            else:\n                frequency[j] = 1\n    return frequency\n\n\n# Test case\nlist1 = [\n    [1, 2, 3, 4, 2, 5, 6, 1, 3, 7, 8, 1, 9, 2, 3, 4],\n    [2, 4, 5, 6, 3, 7, 8, 9, 10, 6, 2, 3, 4],\n    [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]\n]\n\nprint(frequency_lists(list1)) # Output: {1: 3, 2: 5, 3: 5, 4: 5, 5: 3, 6: 3, 7: 3, 8: 3, 9: 3, 10: 2, 11: 1, 12: 1, 13: 1}\n\n\n# Explanation:\n# The frequency count of the first list is {1: 3, 2: 2, 3: 2, 4: 2, 5: 1, 6:",
        "generated_testcode": "assert frequency_lists([\"apple\", \"banana\", \"orange\", \"apple\", \"banana\", \"apple\", \"orange\", \"banana\", \"orange\", \"apple\", \"banana\", \"orange\", \"apple\", \"banana\", \"orange\"] == { \"apple\": 4, \"banana\": 4, \"orange\": 4}\n",
        "test": "assert frequency_lists([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]])=={1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1}\nassert frequency_lists([[1,2,3,4],[5,6,7,8],[9,10,11,12]])=={1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1,10:1,11:1,12:1}\nassert frequency_lists([[20,30,40,17],[18,16,14,13],[10,20,30,40]])=={20:2,30:2,40:2,17: 1,18:1, 16: 1,14: 1,13: 1, 10: 1}",
        "canonical_solution": "def frequency_lists(list1):\r\n    list1 = [item for sublist in list1 for item in sublist]\r\n    dic_data = {}\r\n    for num in list1:\r\n        if num in dic_data.keys():\r\n            dic_data[num] += 1\r\n        else:\r\n            key = num\r\n            value = 1\r\n            dic_data[key] = value\r\n    return dic_data\r\n"
    },
    {
        "number": 98,
        "prompt": "Write a function to multiply all the numbers in a list and divide with the length of the list.\ndef multiply_num(numbers):  \n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    if not numbers:  \n        return 1  \n    else:  \n        result = 1  \n        for num in numbers:  \n            result *= num  \n        return result / len(numbers)\n\n# Test the function  \nprint(multiply_num([1, 2, 3, 4, 5])) # Output: 12.0  \nprint(multiply_num([10, 20, 30, 40, 50])) # Output: 1000.0  \nprint(multiply_num([100, 200, 300, 400, 500])) # Output: 12500.0  \n\n# Example of a list with negative numbers  \nprint(multiply_num([-1, -2, -3, -4])) # Output: -24.0  ",
        "generated_testcode": "assert multiply_num([1, 2, 3, 4, 5]) == 60\n",
        "test": "assert multiply_num((8, 2, 3, -1, 7))==-67.2\nassert multiply_num((-10,-20,-30))==-2000.0\nassert multiply_num((19,15,18))==1710.0",
        "canonical_solution": "def multiply_num(numbers):  \r\n    total = 1\r\n    for x in numbers:\r\n        total *= x  \r\n    return total/len(numbers) "
    },
    {
        "number": 99,
        "prompt": "Write a function to convert the given decimal number to its binary equivalent.\ndef decimal_to_binary(n): \n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    if n == 0: \n        return 0\n    binary = [] \n    while n > 0: \n        binary.append(n % 2) \n        n //= 2\n    binary.reverse() \n    return int(''.join(str(i for i in binary)) ",
        "generated_testcode": "assert decimal_to_binary(0) == \"0b0\"\n",
        "test": "assert decimal_to_binary(8) == '1000'\nassert decimal_to_binary(18) == '10010'\nassert decimal_to_binary(7) == '111' ",
        "canonical_solution": "def decimal_to_binary(n): \r\n    return bin(n).replace(\"0b\",\"\") "
    },
    {
        "number": 100,
        "prompt": "Write a function to find the next smallest palindrome of a specified number.\ndef next_smallest_palindrome(num):\n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    num = str(num)\n    if len(num) % 2 == 0:\n        mid = len(num) // 2\n    else:\n        mid = len(num) // 2 + 1\n    for i in range(mid-1, -1, -1):\n        if num[i] < num[len(num) - 1 - i:]:\n            temp = list(num)\n            temp[i] = chr(ord(num[i]) + 1)\n            temp[len(num) - 1 - i] = chr(ord(num[len(num) - 1 - i]) + 1)\n            for j in range(mid, len(num)):\n                temp[j] = chr(ord(temp[j]) - 1)\n            return int(''.join(temp))\n    return int(num) + 2\n\n\n# Test the function\nprint(next_smallest_palindrome(12321)) # Output: 13321\nprint(next_smallest_palindrome(12421)) # Output: 13221\nprint(next_smallest_palindrome(12345)) # Output: 13532\nprint(next_smallest_palindrome(999)) # Output: 10001\nprint(next_smallest_palindrome(123456)) # Output: 13456\nprint(next_smallest",
        "generated_testcode": "assert next_smallest_palindrome(12321) == 12345\n",
        "test": "assert next_smallest_palindrome(99)==101\nassert next_smallest_palindrome(1221)==1331\nassert next_smallest_palindrome(120)==121",
        "canonical_solution": "import sys\r\ndef next_smallest_palindrome(num):\r\n    numstr = str(num)\r\n    for i in range(num+1,sys.maxsize):\r\n        if str(i) == str(i)[::-1]:\r\n            return i"
    },
    {
        "number": 101,
        "prompt": "Write a function to find the kth element in the given array.\ndef kth_element(arr, n, k):\n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    if n == 1:\n        return arr[0]\n    pivot = arr[n-1]\n    left = [x for x in arr if x < pivot]\n    right = [x for x in arr if x > pivot]\n    equal = [x for x in arr if x == pivot]\n    k_left = len(left)\n    k_right = len(right) + len(equal)\n    if k <= k_left:\n        return kth_element(left, k)\n    elif k > k_left + k_right:\n        return kth_element(right, k - k_left - len(equal))\n    else:\n        return pivot\n\n# test the function\narr = [10, 4, 5, 8, 3, 6, 11, 10, 2, 9, 7, 4]\nk = 4\nprint(kth_element(arr, len(arr), k))\n# Output: 7\n\n\narr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]\nk = 5\nprint(kth_element(arr, len(arr), k))\n# Output: 7\n\narr = [1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 4, 4, 4, ",
        "generated_testcode": "assert kth_element([1, 2, 3, 4, 5, 6, 7, 8, 9], 3) == 5\n",
        "test": "assert kth_element([12,3,5,7,19], 5, 2) == 3\nassert kth_element([17,24,8,23], 4, 3) == 8\nassert kth_element([16,21,25,36,4], 5, 4) == 36",
        "canonical_solution": "def kth_element(arr, n, k):\r\n  for i in range(n):\r\n    for j in range(0, n-i-1):\r\n      if arr[j] > arr[j+1]:\r\n        arr[j], arr[j+1] == arr[j+1], arr[j]\r\n  return arr[k-1]"
    },
    {
        "number": 102,
        "prompt": "Write a function to convert snake case string to camel case string.\ndef snake_to_camel(word):\n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    words = word.split('_')\n    return words[0] + ''.join(word.title() for word in words[1:])\n\n\n# Test cases\nprint(snake_to_camel('hello_world')) # Output: HelloWorld\nprint(snake_to_camel('snake_case_is_fun')) # Output: SnakeCaseIsFun\nprint(snake_to_camel('this_is_a_snake_case_string')) # Output: ThisIsASnakeCaseString\nprint(snake_to_camel('camel_case_is_fun_too')) # Output: CamelCaseIsFunToo\nprint(snake_to_camel('snake_cAsE_is_weird')) # Output: SnakeCaseIsWeird\nprint(snake_to_camel('snake_cAS_is_weird_123')) # Output: SnakeCASIsWeird123\n",
        "generated_testcode": "assert snake_to_camel(\"hello_world\") == \"helloWorld\"\n",
        "test": "assert snake_to_camel('python_program')=='PythonProgram'\nassert snake_to_camel('python_language')==('PythonLanguage')\nassert snake_to_camel('programming_language')==('ProgrammingLanguage')",
        "canonical_solution": "def snake_to_camel(word):\r\n        import re\r\n        return ''.join(x.capitalize() or '_' for x in word.split('_'))"
    },
    {
        "number": 103,
        "prompt": "Write a function to find eulerian number a(n, m).\ndef eulerian_num(n, m): \n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    res = 1\n    for i in range(n, n+m): \n        res *= i \n    for i in range(1, n+1): \n        res //= i \n    return res ",
        "generated_testcode": "assert eulerian_num(1, 1) == 1\n",
        "test": "assert eulerian_num(3, 1) == 4\nassert eulerian_num(4, 1) == 11\nassert eulerian_num(5, 3) == 26",
        "canonical_solution": "def eulerian_num(n, m): \r\n\tif (m >= n or n == 0): \r\n\t\treturn 0 \r\n\tif (m == 0): \r\n\t\treturn 1 \r\n\treturn ((n - m) * eulerian_num(n - 1, m - 1) +(m + 1) * eulerian_num(n - 1, m))"
    },
    {
        "number": 104,
        "prompt": "Write a function to sort each sublist of strings in a given list of lists using lambda function.\ndef sort_sublists(input_list):\n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    \"\"\"\n    Sorts each sublist of strings in a given list of lists using a lambda function.\n\n    Args:\n    input_list: A list of lists containing strings.\n\n    Returns:\n    A new list with each sublist sorted using a lambda function.\n    \"\"\"\n    # Define a lambda function to sort the sublists in ascending order.\n    sort_lambda = lambda sublist: sorted(sublist)\n    # Use a list comprehension to apply the lambda function to each sublist in the input_list.\n    sorted_list = [sort_lambda(sublist) for sublist in input_list]\n    return sorted_list\n\n\n# Example usage:\ninput_list = [[\"apple\", \"banana\", \"orange\", \"grape\"], [\"grape\", \"apple\", \"orange\"], [\"banana\", \"apple\", \"kiwi\", \"orange\"]]\nprint(sort_sublists(input_list))  # Output: [['apple', 'banana', 'orange'], ['apple', 'grape'], ['apple', 'banana', 'kiwi', 'orange']]\n",
        "generated_testcode": "assert sort_sublists([\"apple\", \"banana\", \"cherry\", \"date\", \"elderberry\", \"fig\", \"grape\", \"kiwi\", \"lemon\", \"orange\", \"plum\", \"strawberry\"] == [\"apple\", \"banana\", \"cherry\", \"date\", \"elderberry\", \"fig\", \"grape\", \"kiwi\", \"lemon\", \"orange\", \"plum\", \"strawberry\"]\n",
        "test": "assert sort_sublists(([\"green\", \"orange\"], [\"black\", \"white\"], [\"white\", \"black\", \"orange\"]))==[['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\nassert sort_sublists(([\" red \",\"green\" ],[\"blue \",\" black\"],[\" orange\",\"brown\"]))==[[' red ', 'green'], [' black', 'blue '], [' orange', 'brown']]\nassert sort_sublists(([\"zilver\",\"gold\"], [\"magnesium\",\"aluminium\"], [\"steel\", \"bronze\"]))==[['gold', 'zilver'],['aluminium', 'magnesium'], ['bronze', 'steel']]",
        "canonical_solution": "def sort_sublists(input_list):\r\n    result = [sorted(x, key = lambda x:x[0]) for x in input_list] \r\n    return result\r"
    },
    {
        "number": 105,
        "prompt": "Write a python function to count true booleans in the given list.\ndef count(lst):   \n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    count = 0\n    for i in lst:\n        if i:\n            count += 1\n    return count\n\n#Example:\nlst = [True, False, True, False, True, True, False, False]\nprint(count(lst)) # Output: 3",
        "generated_testcode": "assert count([True, False, True, False, True, False, True]) == 3\n",
        "test": "assert count([True,False,True]) == 2\nassert count([False,False]) == 0\nassert count([True,True,True]) == 3",
        "canonical_solution": "def count(lst):   \r\n    return sum(lst) "
    },
    {
        "number": 106,
        "prompt": "Write a function to add the given list to the given tuples.\ndef add_lists(test_list, test_tup):\n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    new_tup = tuple(test_list + list(test_tup))\n    return new_tup\n\n#Test the function with the given inputs\nprint(add_lists([1,2,3,4], (5,6,7,8))) # Output: (1, 2, 3, 4, 5, 6, 7, 8) ",
        "generated_testcode": "assert add_lists([1, 2, 3, 4], (5, 6, 7) == (6, 8, 10)\n",
        "test": "assert add_lists([5, 6, 7], (9, 10)) == (9, 10, 5, 6, 7)\nassert add_lists([6, 7, 8], (10, 11)) == (10, 11, 6, 7, 8)\nassert add_lists([7, 8, 9], (11, 12)) == (11, 12, 7, 8, 9)",
        "canonical_solution": "def add_lists(test_list, test_tup):\r\n  res = tuple(list(test_tup) + test_list)\r\n  return (res) "
    },
    {
        "number": 107,
        "prompt": "Write a python function to count hexadecimal numbers for a given range.\ndef count_Hexadecimal(L,R) :  \n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    count = 0\n    for i in range(L,R+1):\n        if(i>0 and i<=15):\n            count+=1\n        elif(i%16==0):\n            count+=1\n        else:\n            count+=int(i/16)\n    return count\n\n#Testing the function\nprint(count_Hexadecimal(0,255)) # Output: 7\nprint(count_Hexadecimal(25,50)) # Output: 8\nprint(count_Hexadecimal(100,50)) # Output: 7\nprint(count_Hexadecimal(5,25)) # Output: 4\nprint(count_Hexadecimal(20,25)) # Output: 3\nprint(count_Hexadecimal(26,50)) # Output: 7\nprint(count_Hexadecimal(1000,2000)) # Output: 14\n\n\n#This function takes two arguments L and R which are the lower and upper limits of the range. It initializes a counter variable count to 0 and iterates through the given range. If a number is between 0 and 15, it adds 1 to the counter, if it is divisible by 16 then it adds 1 to the counter, otherwise it adds the number of times it can be divided by 16. Finally, it returns the count of hexadecimal numbers in the given range. ",
        "generated_testcode": "assert count_Hexadecimal(0,15) == 16\n",
        "test": "assert count_Hexadecimal(10,15) == 6\nassert count_Hexadecimal(2,4) == 0\nassert count_Hexadecimal(15,16) == 1",
        "canonical_solution": "def count_Hexadecimal(L,R) :  \r\n    count = 0;  \r\n    for i in range(L,R + 1) : \r\n        if (i >= 10 and i <= 15) : \r\n            count += 1;  \r\n        elif (i > 15) : \r\n            k = i;  \r\n            while (k != 0) :  \r\n                if (k % 16 >= 10) : \r\n                    count += 1;  \r\n                k = k // 16;  \r\n    return count;  "
    },
    {
        "number": 108,
        "prompt": "Write a function to merge multiple sorted inputs into a single sorted iterator using heap queue algorithm.\ndef merge_sorted_list(num1,num2,num3):\n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    import heapq\n    heap = []\n    heapq.heappush(heap,num1[0])\n    heapq.heappush(heap,num2[0])\n    heapq.heappush(heap,num3[0])\n    result = []\n    while len(heap) > 0:\n        min_num = heapq.heappop(heap)\n        result.append(min_num)\n        if len(num1) > 0 and num1[0] < min_num:\n            heapq.heappush(heap,num1.pop(0))\n        if len(num2) > 0 and num2[0] < min_num:\n            heapq.heappush(heap,num2.pop(0))\n        if len(num3) > 0 and num3[0] < min_num:\n            heapq.heappush(heap,num3.pop(0))\n    while len(num1) > 0:\n        heapq.heappush(heap,num1.pop(0))\n    while len(num2) > 0:\n        heapq.heappush(heap,num2.pop(0))\n    while len(num3) > 0:\n        heapq.heappush(heap,num3.pop(0))\n    while len(heap) > 0:\n        result.append(heapq.heappop(heap))\n   ",
        "generated_testcode": "assert merge_sorted_list(sorted([1,2,3,4,5,6,7,8,9], [2,4,6,8,10,12,14], [3,6,9,12,15,18,20]) == [1,2,2,3,4,4,5,6,6,6,8,8,9,9,10,12,12,14,15,18,20]\n\n# Test case 2\n",
        "test": "assert merge_sorted_list([25, 24, 15, 4, 5, 29, 110],[19, 20, 11, 56, 25, 233, 154],[24, 26, 54, 48])==[4, 5, 11, 15, 19, 20, 24, 24, 25, 25, 26, 29, 48, 54, 56, 110, 154, 233]\nassert merge_sorted_list([1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12])==[1, 1, 2, 3, 4, 5, 5, 6, 7, 7, 8, 8, 9, 11, 12]\nassert merge_sorted_list([18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1],[25, 35, 22, 85, 14, 65, 75, 25, 58],[12, 74, 9, 50, 61, 41])==[1, 2, 3, 4, 7, 8, 9, 9, 9, 10, 12, 14, 14, 18, 22, 25, 25, 35, 41, 50, 58, 61, 65, 74, 75, 85]",
        "canonical_solution": "import heapq\r\ndef merge_sorted_list(num1,num2,num3):\r\n  num1=sorted(num1)\r\n  num2=sorted(num2)\r\n  num3=sorted(num3)\r\n  result = heapq.merge(num1,num2,num3)\r\n  return list(result)"
    },
    {
        "number": 109,
        "prompt": "Write a python function to find the count of rotations of a binary string with odd value.\ndef odd_Equivalent(s,n): \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": true,
        "answer": "    count = 0\n    # Traverse through the string and check if the current character is 0 or 1\n    for i in range(n): \n        if s[i] == '0': \n            count += 1\n    return count\n\ndef findRotationCount(s): \n    n = len(s)\n    count = odd_Equivalent(s,n)\n    return count % 2\n\n\n# Test the function with an example\ns = \"10110001101\"\nprint(findRotationCount(s))\n\n# Output: 2\n# Explanation: The string has 3 characters with value 0 and 3 characters with value 1. \n# Since there are an odd number of 0's, the string will rotate 1 time. ",
        "generated_testcode": "assert odd_Equivalent(\"1011\", 3) == 1\n",
        "test": "assert odd_Equivalent(\"011001\",6) == 3\nassert odd_Equivalent(\"11011\",5) == 4\nassert odd_Equivalent(\"1010\",4) == 2",
        "canonical_solution": "def odd_Equivalent(s,n): \r\n    count=0\r\n    for i in range(0,n): \r\n        if (s[i] == '1'): \r\n            count = count + 1\r\n    return count "
    },
    {
        "number": 110,
        "prompt": "Write a function to extract the ranges that are missing from the given list with the given start range and end range values.\ndef extract_missing(test_list, strt_val, stop_val):\n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    # Create a list to store the missing ranges\n    missing_ranges = []\n    \n    # Loop through the test_list and check if the current element is not equal to the expected element\n    # If it is not equal, append the range to the missing_ranges list\n    for i in range(strt_val, stop_val + 1):\n        if i not in test_list:\n            missing_ranges.append(i)\n            \n    # Return the missing_ranges list\n    return missing_ranges\n\n# Test the function with an example list and print the result\nprint(extract_missing([1, 2, 3, 5, 6, 7, 8], 0, 9))\n# Output: [0, 4]\n\nprint(extract_missing([1, 2, 4, 5, 7, 8, 10], 0, 12))\n# Output: [0, 3, 6, 9]\n\nprint(extract_missing([1, 3, 5, 7, 8, 10], 0, 12))\n# Output: [0, 2, 4, 6, 9, 11] ",
        "generated_testcode": "assert extract_missing(range(1, 10), 1, 10) == []\n",
        "test": "assert extract_missing([(6, 9), (15, 34), (48, 70)], 2, 100) == [(2, 6), (9, 100), (9, 15), (34, 100), (34, 48), (70, 100)]\nassert extract_missing([(7, 2), (15, 19), (38, 50)], 5, 60) == [(5, 7), (2, 60), (2, 15), (19, 60), (19, 38), (50, 60)]\nassert extract_missing([(7, 2), (15, 19), (38, 50)], 1, 52) == [(1, 7), (2, 52), (2, 15), (19, 52), (19, 38), (50, 52)]",
        "canonical_solution": "def extract_missing(test_list, strt_val, stop_val):\r\n  res = []\r\n  for sub in test_list:\r\n    if sub[0] > strt_val:\r\n      res.append((strt_val, sub[0]))\r\n      strt_val = sub[1]\r\n    if strt_val < stop_val:\r\n      res.append((strt_val, stop_val))\r\n  return (res) "
    },
    {
        "number": 111,
        "prompt": "Write a function to find common elements in given nested lists. * list item * list item * list item * list item\ndef common_in_nested_lists(nestedlist):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": true,
        "answer": "    set_list = set(nestedlist[0])\n    for sublist in nestedlist[1:]:\n        set_list = set_list.intersection(set(sublist))\n    return list(set_list)\n\n\n# Test cases\nprint(common_in_nested_lists([[1, 2, 3, 4, 5, 6], [2, 4, 6, 8], [2, 4, 9], [2, 4, 6, 10]])) # Output: [4, 6]\nprint(common_in_nested_lists([[1, 2, 3, 4, 5], [2, 4, 6], [2, 3, 5, 7], [1, 3, 5, 9]])) # Output: [3, 5]\nprint(common_in_nested_lists([[1, 2, 3, 4], [2, 3, 5], [1, 4, 6], [7, 8, 9]])) # Output: []\nprint(common_in_nested_lists([[1, 2, 3, 4, 5], [2, 3, 4, 5, 6], [7, 8, 9], [10, 11, 12], [13, 14, 15]])) # Output: []\n",
        "generated_testcode": "assert common_in_nested_lists([[1, 2, 3], [2, 3, 4], [3, 4, 5]]) == [3]\n",
        "test": "assert common_in_nested_lists([[12, 18, 23, 25, 45], [7, 12, 18, 24, 28], [1, 5, 8, 12, 15, 16, 18]])==[18, 12]\nassert common_in_nested_lists([[12, 5, 23, 25, 45], [7, 11, 5, 23, 28], [1, 5, 8, 18, 23, 16]])==[5,23]\nassert common_in_nested_lists([[2, 3,4, 1], [4, 5], [6,4, 8],[4, 5], [6, 8,4]])==[4]",
        "canonical_solution": "def common_in_nested_lists(nestedlist):\r\n    result = list(set.intersection(*map(set, nestedlist)))\r\n    return result"
    },
    {
        "number": 112,
        "prompt": "Write a python function to find the perimeter of a cylinder.\ndef perimeter(diameter,height) : \n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    import math\n    P = 2*math.pi*diameter + 2*math.pi*math.sqrt(diameter**2 + height**2)\n    return P\n\n#test the function\nprint(perimeter(10,20)) ",
        "generated_testcode": "assert perimeter(10,20) == 60.0\n",
        "test": "assert perimeter(2,4) == 12\nassert perimeter(1,2) == 6\nassert perimeter(3,1) == 8",
        "canonical_solution": "def perimeter(diameter,height) : \r\n    return 2*(diameter+height)  "
    },
    {
        "number": 113,
        "prompt": "Write a function to check if a string represents an integer or not.\ndef check_integer(text):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": true,
        "answer": "    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n\n# Test cases\nprint(check_integer(\"123\"))  # True\nprint(check_integer(\"123a\"))  # False\nprint(check_integer(\"123.45\"))  # False\nprint(check_integer(\"123.0\"))  # False\nprint(check_integer(\"123.00\"))  # False\nprint(check_integer(\"123.\"))  # False\nprint(check_integer(\"0123\"))  # True\nprint(check_integer(\"0x123\"))  # False\nprint(check_integer(\"0b101\"))  # False\nprint(check_integer(\"0o12\"))  # False\nprint(check_integer(\"0\"))  # True\nprint(check_integer(\"-1\"))  # True\nprint(check_integer(\"+1\"))  # False\nprint(check_integer(\"01\"))  # True\nprint(check_integer(\"-0\"))  # True\nprint(check_integer(\"010\"))  # True\nprint(check_integer(\"+0\"))  # False\nprint(check_integer(\"001\"))  # True\nprint(check_integer(\"0001\"))  # True\nprint(check_integer(\"1e2\"))  # False\nprint(check_integer(\"1e+2\"))  # False\nprint(check_integer(\"1e-2\"))  # False\nprint",
        "generated_testcode": "assert check_integer(\"123\") == True\n",
        "test": "assert check_integer(\"python\")==False\nassert check_integer(\"1\")==True\nassert check_integer(\"12345\")==True",
        "canonical_solution": "def check_integer(text):\r\n text = text.strip()\r\n if len(text) < 1:\r\n    return None\r\n else:\r\n     if all(text[i] in \"0123456789\" for i in range(len(text))):\r\n          return True\r\n     elif (text[0] in \"+-\") and \\\r\n         all(text[i] in \"0123456789\" for i in range(1,len(text))):\r\n         return True\r\n     else:\r\n        return False"
    },
    {
        "number": 114,
        "prompt": "Write a function to assign frequency to each tuple in the given tuple list.\ndef assign_freq(test_list):\n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    freq_dict = {}\n    for i in test_list:\n        if i in freq_dict:\n            freq_dict[i] += 1\n        else:\n            freq_dict[i] = 1\n    return freq_dict\n\n# test_list = [(1,2),(1,2),(3,4),(1,2),(5,6),(7,8),(1,2),(9,10),(1,2),(3,4),(1,2),(1,2)]\n# print(assign_freq(test_list)) ",
        "generated_testcode": "assert assign_freq(()) == []\n",
        "test": "assert assign_freq([(6, 5, 8), (2, 7), (6, 5, 8), (6, 5, 8), (9, ), (2, 7)] ) == '[(6, 5, 8, 3), (2, 7, 2), (9, 1)]'\nassert assign_freq([(4, 2, 4), (7, 1), (4, 8), (4, 2, 4), (9, 2), (7, 1)] ) == '[(4, 2, 4, 2), (7, 1, 2), (4, 8, 1), (9, 2, 1)]'\nassert assign_freq([(11, 13, 10), (17, 21), (4, 2, 3), (17, 21), (9, 2), (4, 2, 3)] ) == '[(11, 13, 10, 1), (17, 21, 2), (4, 2, 3, 2), (9, 2, 1)]'",
        "canonical_solution": "from collections import Counter \r\ndef assign_freq(test_list):\r\n  res = [(*key, val) for key, val in Counter(test_list).items()]\r\n  return (str(res)) "
    },
    {
        "number": 115,
        "prompt": "Write a function to check whether all dictionaries in a list are empty or not.\ndef empty_dit(list1):\n",
        "checkpoint": "7B",
        "pass": 6,
        "correct": true,
        "answer": "    for i in list1:\n        if i == {}:\n            return True\n    return False\n\n#Testing the function\nlist1 = [{}, {}, {}, {}, {}, {}]\nprint(empty_dit(list1)) #True\nlist2 = [{}, {\"a\":1}, {}, {}]\nprint(empty_dit(list2)) #False\nlist3 = [{}]\nprint(empty_dit(list3)) #True\nlist4 = [{}, {}, {\"b\":2}, {}, {}]\nprint(empty_dit(list4)) #False",
        "generated_testcode": "assert empty_dit([{}, {}, {}]) == True\n",
        "test": "assert empty_dit([{},{},{}])==True\nassert empty_dit([{1,2},{},{}])==False\nassert empty_dit({})==True",
        "canonical_solution": "def empty_dit(list1):\r\n empty_dit=all(not d for d in list1)\r\n return empty_dit"
    },
    {
        "number": 116,
        "prompt": "Write a function to convert a given tuple of positive integers into an integer.\ndef tuple_to_int(nums):\n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    result = 0\n    for i, num in enumerate(reversed(nums):\n        result += num * 10**i\n    return result\n\n\n# Test cases\nprint(tuple_to_int((1, 2, 3, 4, 5, 6))  # Output: 654321\nprint(tuple_to_int((123, 45, 67, 89, 10))  # Output: 1234567890\nprint(tuple_to_int((12345, 6, 789))  # Output: 123456789\n",
        "generated_testcode": "assert tuple_to_int((1, 2, 3, 4, 5, 6, 7) == 1234567\n",
        "test": "assert tuple_to_int((1,2,3))==123\nassert tuple_to_int((4,5,6))==456\nassert tuple_to_int((5,6,7))==567",
        "canonical_solution": "def tuple_to_int(nums):\r\n    result = int(''.join(map(str,nums)))\r\n    return result"
    },
    {
        "number": 117,
        "prompt": "Write a function to convert all possible convertible elements in the list to float.\ndef list_to_float(test_list):\n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    result = []\n    for item in test_list:\n        try:\n            result.append(float(item))\n        except ValueError:\n            result.append(item)\n    return result\n\n#Example usage:\ntest_list = [1, \"hello\", 3, \"2\", \"5.6\", \"world\", 4.3, \"goodbye\"]\nprint(list_to_float(test_list))  # Output: [1.0, 'hello', 3.0, 2.0, 5.6, 4.3, 'goodbye']\n\n#Explanation: ",
        "generated_testcode": "assert list_to_float([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\", \"19\", \"20\"]) == [1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0, 14.0, 15.0, 16.0, 17.0, 18.0, 19.0, 20.0",
        "test": "assert list_to_float( [(\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")] ) == '[(3.0, 4.0), (1.0, 26.45), (7.32, 8.0), (4.0, 8.0)]'\nassert list_to_float( [(\"4\", \"4\"), (\"2\", \"27\"), (\"4.12\", \"9\"), (\"7\", \"11\")] ) == '[(4.0, 4.0), (2.0, 27.0), (4.12, 9.0), (7.0, 11.0)]'\nassert list_to_float( [(\"6\", \"78\"), (\"5\", \"26.45\"), (\"1.33\", \"4\"), (\"82\", \"13\")] ) == '[(6.0, 78.0), (5.0, 26.45), (1.33, 4.0), (82.0, 13.0)]'",
        "canonical_solution": "def list_to_float(test_list):\r\n  res = []\r\n  for tup in test_list:\r\n    temp = []\r\n    for ele in tup:\r\n      if ele.isalpha():\r\n        temp.append(ele)\r\n      else:\r\n        temp.append(float(ele))\r\n    res.append((temp[0],temp[1])) \r\n  return (str(res)) "
    },
    {
        "number": 118,
        "prompt": "[link text](https:// [link text](https:// [link text](https://)))write a function to convert a string to a list.\ndef string_to_list(string): \n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    lst = string.split()\n    return lst \n\n#Test the function with the following input \nstring = \"This is a sample string\"\nprint(string_to_list(string))\n\n# Expected Output: ['This', 'is', 'a', 'sample', 'string']\n\n# Write a function to count the number of vowels in a given string.\ndef count_vowels(string):\n    vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n    count = 0\n    for letter in string:\n        if letter in vowels:\n            count += 1\n    return count\n\n#Test the function with the following input\nstring = \"Hello world!\"\nprint(count_vowels(string))\n\n# Expected Output: 3 ",
        "generated_testcode": "assert string_to_list(\"https://www.google.com\") == [\"https://\", \"www.google.com\"]\n",
        "test": "assert string_to_list(\"python programming\")==['python','programming']\nassert string_to_list(\"lists tuples strings\")==['lists','tuples','strings']\nassert string_to_list(\"write a program\")==['write','a','program']",
        "canonical_solution": "def string_to_list(string): \r\n    lst = list(string.split(\" \")) \r\n    return lst"
    },
    {
        "number": 119,
        "prompt": "Write a python function to find the element that appears only once in a sorted array.\ndef search(arr,n) :\n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    # Create an empty hash table to store the elements\n    hash_table = {}\n    # Traverse through the array\n    for i in range(n) :\n        if arr[i] in hash_table :\n            hash_table[arr[i]] += 1\n        else :\n            hash_table[arr[i]] = 1\n    # Traverse through the hash table and return the element with count 1\n    for key in hash_table :\n        if hash_table[key] == 1 :\n            return key\n    return -1\n\n# Test the function with an example array\narr = [1,2,2,3,4,4,5,5,6,6,7,7,8,9,9]\nn = len(arr)\nprint(\"The element that appears only once is :\", search(arr,n)) ",
        "generated_testcode": "assert search([1,2,3,4,4,5,6,7,7,8,8,9,10,10], 6) == 6\n",
        "test": "assert search([1,1,2,2,3],5) == 3\nassert search([1,1,3,3,4,4,5,5,7,7,8],11) == 8\nassert search([1,2,2,3,3,4,4],7) == 1",
        "canonical_solution": "def search(arr,n) :\r\n    XOR = 0\r\n    for i in range(n) :\r\n        XOR = XOR ^ arr[i]\r\n    return (XOR)"
    },
    {
        "number": 120,
        "prompt": "Write a function to find the maximum product from the pairs of tuples within a given list.\ndef max_product_tuple(list1):\n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    list1.sort()\n    max_product = list1[0][0] * list1[1][1]\n    for i in range(len(list1)):\n        for j in range(i + 1, len(list1)):\n            product = list1[i][0] * list1[j][1]\n            if product > max_product:\n                max_product = product\n    return max_product\n\n\n# Test the function with the given example\nlist1 = [(1, 2), (4, 3), (6, 5), (8, 7), (2, 1), (5, 4)]\nprint(max_product_tuple(list1))  # Output: 84 (8 * 7)",
        "generated_testcode": "assert max_product_tuple([(1,2), (3,4), (5,6), (7,8), (9,10)]) == 70 # Expected output: 70\n",
        "test": "assert max_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==36\nassert max_product_tuple([(10,20), (15,2), (5,10)] )==200\nassert max_product_tuple([(11,44), (10,15), (20,5), (12, 9)] )==484",
        "canonical_solution": "def max_product_tuple(list1):\r\n    result_max = max([abs(x * y) for x, y in list1] )\r\n    return result_max"
    },
    {
        "number": 121,
        "prompt": "Write a function to find the triplet with sum of the given array\ndef check_triplet(A, n, sum, count):\n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    A = sorted(A)\n    i = 0\n    j = 0\n    k = n - 1\n    while i < n - 2 and j < n - 1 and k < n:\n        if A[i] + A[j] + A[k] == sum:\n            return True\n        elif A[i] + A[j] + A[k] < sum:\n            j += 1\n        else:\n            k -= 1\n        i += 1\n    return False\n\n\n# Driver code\nA = [1, 3, 4, 2, 5, 6, 7, 8, 9]\nsum = 11\nn = len(A)\nprint(check_triplet(A, n, sum))\n\n\n# Output: True\n\n\nA = [1, 2, 3, 4, 5, 6, 7, 8, 9]\nsum = 11\nn = len(A)\nprint(check_triplet(A, n, sum))\n\n# Output: False",
        "generated_testcode": "assert check_triplet([1, 2, 3, 4, 5, 6, 7, 8, 9], 12, 1) == True\n",
        "test": "assert check_triplet([2, 7, 4, 0, 9, 5, 1, 3], 8, 6, 0) == True\nassert check_triplet([1, 4, 5, 6, 7, 8, 5, 9], 8, 6, 0) == False\nassert check_triplet([10, 4, 2, 3, 5], 5, 15, 0) == True",
        "canonical_solution": "def check_triplet(A, n, sum, count):\r\n    if count == 3 and sum == 0:\r\n        return True\r\n    if count == 3 or n == 0 or sum < 0:\r\n        return False\r\n    return check_triplet(A, n - 1, sum - A[n - 1], count + 1) or\\\r\n           check_triplet(A, n - 1, sum, count)"
    },
    {
        "number": 122,
        "prompt": "Write a function to find n\u2019th smart number.\ndef smartNumber(n): \n",
        "checkpoint": "7B",
        "pass": 6,
        "correct": true,
        "answer": "    # Initialize a list to store the numbers \n    numbers = [] \n\n    # Initialize a variable to keep track of the number of elements in the list \n    count = 0\n\n    # Initialize a variable to keep track of the number of smart numbers \n    smart_count = 0\n\n\n    # Loop through the range of 1 to 10000000000 \n    for num in range(1, 1000000000): \n\n        # Check if the number is a smart number or not \n        if sum(int(digit)**3 for digit in str(num)) == num: \n            # If it is a smart number, add it to the list \n            numbers.append(num) \n            count += 1\n\n        # If we have found n smart numbers, break out of the loop \n        if count == n: \n            break\n\n    # Return the n'th element in the list \n    return numbers[n-1] ",
        "generated_testcode": "assert smartNumber(1) == 1\n",
        "test": "assert smartNumber(1) == 30\nassert smartNumber(50) == 273\nassert smartNumber(1000) == 2664",
        "canonical_solution": "MAX = 3000 \r\ndef smartNumber(n): \r\n\tprimes = [0] * MAX \r\n\tresult = [] \r\n\tfor i in range(2, MAX): \r\n\t\tif (primes[i] == 0): \r\n\t\t\tprimes[i] = 1 \r\n\t\t\tj = i * 2 \r\n\t\t\twhile (j < MAX): \r\n\t\t\t\tprimes[j] -= 1 \r\n\t\t\t\tif ( (primes[j] + 3) == 0): \r\n\t\t\t\t\tresult.append(j) \r\n\t\t\t\tj = j + i \r\n\tresult.sort() \r\n\treturn result[n - 1] "
    },
    {
        "number": 123,
        "prompt": "Write a function to sum all amicable numbers from 1 to a specified number.\ndef amicable_numbers_sum(limit):\n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    def get_divisor_sum(n):\n        return sum(d for d in range(1, (n // 2 + 1) if n % 2 == 0 else n) if n % d == 0)\n\n    def is_amicable(a, b):\n        return a != b and get_divisor_sum(a) == b and get_divisor_sum(b) == a\n\n    return sum(num for num in range(1, limit + 1) if is_amicable(num, get_divisor_sum(num)))\n\n\n# Example usage:\nprint(amicable_numbers_sum(1000000)) # Output: 316925\nprint(amicable_numbers_sum(5000000)) # Output: 12912537",
        "generated_testcode": "assert amicable_numbers_sum(10) == 316\n",
        "test": "assert amicable_numbers_sum(999)==504\nassert amicable_numbers_sum(9999)==31626\nassert amicable_numbers_sum(99)==0",
        "canonical_solution": "def amicable_numbers_sum(limit):\r\n    if not isinstance(limit, int):\r\n        return \"Input is not an integer!\"\r\n    if limit < 1:\r\n        return \"Input must be bigger than 0!\"\r\n    amicables = set()\r\n    for num in range(2, limit+1):\r\n        if num in amicables:\r\n            continue\r\n        sum_fact = sum([fact for fact in range(1, num) if num % fact == 0])\r\n        sum_fact2 = sum([fact for fact in range(1, sum_fact) if sum_fact % fact == 0])\r\n        if num == sum_fact2 and num != sum_fact:\r\n            amicables.add(num)\r\n            amicables.add(sum_fact2)\r\n    return sum(amicables)"
    },
    {
        "number": 124,
        "prompt": "Write a function to get the angle of a complex number.\ndef angle_complex(a,b):\n",
        "checkpoint": "7B",
        "pass": 9,
        "correct": true,
        "answer": "    if a == 0:\n        if b == 0:\n            return 0\n        elif b > 0:\n            return 90\n        else:\n            return 270\n    elif b == 0:\n        return 0\n    else:\n        angle_b = math.atan(b/a)\n        if a > 0 and b >= 0:\n            return math.degrees(angle_b)\n        elif a < 0 and b >= 0:\n            return math.degrees(angle_b) + 180\n        elif a < 0 and b < 0:\n            return math.degrees(angle_b) + 180\n        else:\n            return math.degrees(angle_b) + 360\n        \n        \n# Test the function\nprint(angle_complex(2, 3)) # Should be 53.130102371777743755535\nprint(angle_complex(-2, 3)) # Should be 161.13010237177774375553\nprint(angle_complex(2, -3)) # Should be 161.13010237177774375553\nprint(angle_complex(-2, -3)) # Should be 53.1301023717777437",
        "generated_testcode": "assert angle_complex(1, 1) == 45\n",
        "test": "assert angle_complex(0,1j)==1.5707963267948966 \nassert angle_complex(2,1j)==0.4636476090008061\nassert angle_complex(0,2j)==1.5707963267948966",
        "canonical_solution": "import cmath\r\ndef angle_complex(a,b):\r\n  cn=complex(a,b)\r\n  angle=cmath.phase(a+b)\r\n  return angle"
    },
    {
        "number": 125,
        "prompt": "Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\ndef find_length(string, n): \n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    count0 = count1 = max_diff = 0\n    for i in range(n):\n        if string[i] == '0':\n            count0 += 1\n        else:\n            count1 += 1\n        max_diff = max(max_diff, abs(count0 - count1))\n    return max_diff\n\n\n# Test the function with sample input\nstring = \"011001011\"\nn = len(string)\nprint(find_length(string, n)) # Output: 2\n\n\n# Test the function with sample input\nstring = \"001011001\"\nn = len(string)\nprint(find_length(string, n)) # Output: 3\n\n\n# Test the function with sample input\nstring = \"001100\"\nn = len(string)\nprint(find_length(string, n)) # Output: 2",
        "generated_testcode": "assert find_length(\"11011010101\", 3) == 2\n",
        "test": "assert find_length(\"11000010001\", 11) == 6\nassert find_length(\"10111\", 5) == 1\nassert find_length(\"11011101100101\", 14) == 2 ",
        "canonical_solution": "def find_length(string, n): \r\n\tcurrent_sum = 0\r\n\tmax_sum = 0\r\n\tfor i in range(n): \r\n\t\tcurrent_sum += (1 if string[i] == '0' else -1) \r\n\t\tif current_sum < 0: \r\n\t\t\tcurrent_sum = 0\r\n\t\tmax_sum = max(current_sum, max_sum) \r\n\treturn max_sum if max_sum else 0"
    },
    {
        "number": 126,
        "prompt": "Write a python function to find the sum of common divisors of two given numbers.\ndef sum(a,b): \n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    divisors = []\n    for i in range(1,min(a,b)+1):\n        if a%i==0 and b%i==0:\n            divisors.append(i)\n    return sum(divisors)\nprint(sum(12,24))\n",
        "generated_testcode": "assert sum(12, 18) == 6 # 3 + 6\n",
        "test": "assert sum(10,15) == 6\nassert sum(100,150) == 93\nassert sum(4,6) == 3",
        "canonical_solution": "def sum(a,b): \r\n    sum = 0\r\n    for i in range (1,min(a,b)): \r\n        if (a % i == 0 and b % i == 0): \r\n            sum += i \r\n    return sum"
    },
    {
        "number": 127,
        "prompt": "Write a function to multiply two integers without using the * operator in python.\ndef multiply_int(x, y):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": true,
        "answer": "    if y == 0:\n        return 0\n    result = 0\n    for i in range(abs(y)):\n        result += x\n    if y < 0:\n        result = -result\n    return result\n\n# Test cases\nprint(multiply_int(5, 3)) # 15\nprint(multiply_int(-5, 3)) # -15\nprint(multiply_int(3, 0)) # 0\nprint(multiply_int(0, -5)) # 0\nprint(multiply_int(-5, -3)) # 15\nprint(multiply_int(-5, -3)) # -15\nprint(multiply_int(10, -3)) # -30\nprint(multiply_int(-10, 3)) # -30\n",
        "generated_testcode": "assert multiply_int(3, 4) == 12\n",
        "test": "assert multiply_int(10,20)==200\nassert multiply_int(5,10)==50\nassert multiply_int(4,8)==32",
        "canonical_solution": "def multiply_int(x, y):\r\n    if y < 0:\r\n        return -multiply_int(x, -y)\r\n    elif y == 0:\r\n        return 0\r\n    elif y == 1:\r\n        return x\r\n    else:\r\n        return x + multiply_int(x, y - 1)"
    },
    {
        "number": 128,
        "prompt": "Write a function to shortlist words that are longer than n from a given list of words.\ndef long_words(n, str):\n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    return [word for word in str.split() if len(word) > n]\n\n# Test the function\nprint(long_words(4, \"apple banana cherry grapefruit kiwi mango\")) # Output: ['banana', 'grapefruit', 'mango']\nprint(long_words(3, \"pear apple pineapple apricot\")) # Output: ['apricot']\nprint(long_words(6, \"python java javascript javaScript python3 ruby\")) # Output: ['python', 'javascript', 'python3']",
        "generated_testcode": "assert long_words(3, \"hello world\") == [\"hello\"]\n",
        "test": "assert long_words(3,\"python is a programming language\")==['python','programming','language']\nassert long_words(2,\"writing a program\")==['writing','program']\nassert long_words(5,\"sorting list\")==['sorting']",
        "canonical_solution": "def long_words(n, str):\r\n    word_len = []\r\n    txt = str.split(\" \")\r\n    for x in txt:\r\n        if len(x) > n:\r\n            word_len.append(x)\r\n    return word_len\t"
    },
    {
        "number": 129,
        "prompt": "Write a function to calculate magic square.\ndef magic_square_test(my_matrix):\n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    rows = len(my_matrix)\n    columns = len(my_matrix[0])\n    magic_sum = rows * (rows**2 + 1) / 2\n\n    for i in range(rows):\n        for j in range(columns):\n            if my_matrix[i][j] > rows**2 or my_matrix[i][j] < 1 or my_matrix[i][j] != round(my_matrix[i][j]):\n                return False\n\n    for i in range(rows):\n        if sum(my_matrix[i]) != magic_sum or sum(my_matrix[j] for j in range(columns)) != magic_sum or sum(my_matrix[::rows]) != magic_sum or sum([my_matrix[i][i] for i in range(rows)]):\n            return False\n\n    return True\n\n\ndef magic_square_gen(rows):\n    magic_matrix = [[0 for i in range(rows)] for j in range(rows)]\n    magic_sum = rows * (rows**2 + 1) / 2\n    current_number = 1\n    row, col = 0, 0\n\n    while current_number <= rows**2:\n        magic_matrix[row][col] = current_number\n        current_number += 1\n        row, col = (row + 1) % rows, (col + 1) % rows\n        if magic_matrix[row][col] != 0:\n            row, col = 0",
        "generated_testcode": "assert magic_square_test(\n    [[4, 9, 2, 3],\n     [3, 5, 7],\n     [8, 1, 6]]\n) == True\n\n",
        "test": "assert magic_square_test([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]])==True\nassert magic_square_test([[2, 7, 6], [9, 5, 1], [4, 3, 8]])==True\nassert magic_square_test([[2, 7, 6], [9, 5, 1], [4, 3, 7]])==False",
        "canonical_solution": "def magic_square_test(my_matrix):\r\n    iSize = len(my_matrix[0])\r\n    sum_list = []\r\n    sum_list.extend([sum (lines) for lines in my_matrix])   \r\n    for col in range(iSize):\r\n        sum_list.append(sum(row[col] for row in my_matrix))\r\n    result1 = 0\r\n    for i in range(0,iSize):\r\n        result1 +=my_matrix[i][i]\r\n    sum_list.append(result1)      \r\n    result2 = 0\r\n    for i in range(iSize-1,-1,-1):\r\n        result2 +=my_matrix[i][i]\r\n    sum_list.append(result2)\r\n    if len(set(sum_list))>1:\r\n        return False\r\n    return True"
    },
    {
        "number": 130,
        "prompt": "Write a function to find the item with maximum frequency in a given list.\ndef max_occurrences(nums):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": true,
        "answer": "    from collections import Counter\n    count = Counter(nums)\n    max_count = 0\n    max_item = None\n    for item, count in count.items():\n        if count > max_count:\n            max_count = count\n            max_item = item\n    return max_item\n\n# Test the function with a list of integers\nprint(max_occurrences([1, 2, 3, 4, 2, 3, 2, 1, 3, 4, 3, 4, 1, 2])) # Output: 3\n\n# Test the function with a list of strings\nprint(max_occurrences(['apple', 'banana', 'orange', 'banana', 'apple', 'banana', 'orange', 'apple'])) # Output: 'banana'\n\n\n# Test the function with a list of mixed types\nprint(max_occurrences(['apple', 2, 3, 'banana', 4, 2, 'banana', 'apple', 3, 4, 'banana', 'apple'])) # Output: None (since Counter only works with hashable types)\n",
        "generated_testcode": "assert max_occurrences([1, 2, 3, 2, 4, 5, 2, 3, 3, 2, 6, 7, 8, 8, 8, 8, 8, 1] ) == 8\n",
        "test": "assert max_occurrences([2,3,8,4,7,9,8,2,6,5,1,6,1,2,3,2,4,6,9,1,2])==(2, 5)\nassert max_occurrences([2,3,8,4,7,9,8,7,9,15,14,10,12,13,16,16,18])==(8, 2)\nassert max_occurrences([10,20,20,30,40,90,80,50,30,20,50,10])==(20, 3)",
        "canonical_solution": "from collections import defaultdict\r\ndef max_occurrences(nums):\r\n    dict = defaultdict(int)\r\n    for i in nums:\r\n        dict[i] += 1\r\n    result = max(dict.items(), key=lambda x: x[1]) \r\n    return result"
    },
    {
        "number": 131,
        "prompt": "Write a python function to reverse only the vowels of a given string.\ndef reverse_vowels(str1):\n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n    result = \"\"\n    vowel_list = []\n    for char in str1:\n        if char in vowels:\n            vowel_list.append(char)\n    reversed_vowels = vowel_list[::-1]\n    for char in str1:\n        if char in vowels:\n            result += reversed_vowels.pop(0)\n        else:\n            result += char\n    return result\n\n#Test the function\nprint(reverse_vowels(\"Hello World\"))\nprint(reverse_vowels(\"Python\"))\nprint(reverse_vowels(\"Python\"))\n\n",
        "generated_testcode": "assert reverse_vowels(\"hello world\") == \"holle dworb\"\n",
        "test": "assert reverse_vowels(\"Python\") == \"Python\"\nassert reverse_vowels(\"USA\") == \"ASU\"\nassert reverse_vowels(\"ab\") == \"ab\"",
        "canonical_solution": "def reverse_vowels(str1):\r\n\tvowels = \"\"\r\n\tfor char in str1:\r\n\t\tif char in \"aeiouAEIOU\":\r\n\t\t\tvowels += char\r\n\tresult_string = \"\"\r\n\tfor char in str1:\r\n\t\tif char in \"aeiouAEIOU\":\r\n\t\t\tresult_string += vowels[-1]\r\n\t\t\tvowels = vowels[:-1]\r\n\t\telse:\r\n\t\t\tresult_string += char\r\n\treturn result_string"
    },
    {
        "number": 132,
        "prompt": "Write a function to convert tuple to a string.\ndef tup_string(tup1):\n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    str1 = \"\"\n    for i in tup1:\n        str1 += str(i) + \" \"\n    return str1\n\n# Example usage:\nprint(tup_string((1,2,3,4,5)) # Output: \"1 2 3 4 5 \"\nprint(tup_string((1, \"hello\", True)) # Output: \"1 hello True \"\n\n\n#Alternative solution:\ndef tup_string(tup1):\n    return \" \".join(str(i) for i in tup1) ",
        "generated_testcode": "assert tup_string((1,2,3,4,5) == \"1,2,3,4,5\"\n",
        "test": "assert tup_string(('e', 'x', 'e', 'r', 'c', 'i', 's', 'e', 's'))==(\"exercises\")\nassert tup_string(('p','y','t','h','o','n'))==(\"python\")\nassert tup_string(('p','r','o','g','r','a','m'))==(\"program\")",
        "canonical_solution": "def tup_string(tup1):\r\n  str =  ''.join(tup1)\r\n  return str"
    },
    {
        "number": 133,
        "prompt": "Write a function to calculate the sum of the negative numbers of a given list of numbers using lambda function.\ndef sum_negativenum(nums):\n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    return sum(filter(lambda x: x < 0, nums)\n\n\nprint(sum_negativenum([1,2,3,-4,5,-6,7,-8]) # Output: -22\nprint(sum_negativenum([-1,2,3,4,-5,-6,7,8,-9]) # Output: -23\nprint(sum_negativenum([1,2,3,4,5,6,7]) # Output: 0\n\n\n# Solution:Here, we have used the built-in `sum()` function along with `filter()` function and lambda function to filter out all the negative numbers from the given list of numbers and then sum them up. ",
        "generated_testcode": "assert sum_negativenum([1, 2, 3, -4, -5, 6, -7, -8, 9]) == -23\n",
        "test": "assert sum_negativenum([2, 4, -6, -9, 11, -12, 14, -5, 17])==-32\nassert sum_negativenum([10,15,-14,13,-18,12,-20])==-52\nassert sum_negativenum([19, -65, 57, 39, 152,-639, 121, 44, 90, -190])==-894",
        "canonical_solution": "def sum_negativenum(nums):\r\n  sum_negativenum = list(filter(lambda nums:nums<0,nums))\r\n  return sum(sum_negativenum)"
    },
    {
        "number": 134,
        "prompt": "Write a python function to check whether the last element of given array is even or odd after performing an operation p times.\ndef check_last (arr,n,p): \n",
        "checkpoint": "7B",
        "pass": 7,
        "correct": true,
        "answer": "    for i in range(p): \n        # Perform the following operation on each element of the array \n        for j in range(n): \n            arr[j] = arr[j] * 2 \n    # check if the last element is even or odd \n    if arr[-1] % 2 == 0: \n        return True\n    else: \n        return False\n\n# Test the function \narr = [1, 2, 3, 4, 5, 6] \nn = len(arr) \np = 2\nprint(check_last(arr, n, p)) ",
        "generated_testcode": "assert check_last([1,2,3,4,5,6,7,8],5,2) == True\n",
        "test": "assert check_last([5,7,10],3,1) == \"ODD\"\nassert check_last([2,3],2,3) == \"EVEN\"\nassert check_last([1,2,3],3,1) == \"ODD\"",
        "canonical_solution": "def check_last (arr,n,p): \r\n    _sum = 0\r\n    for i in range(n): \r\n        _sum = _sum + arr[i] \r\n    if p == 1: \r\n        if _sum % 2 == 0: \r\n            return \"ODD\"\r\n        else: \r\n            return \"EVEN\"\r\n    return \"EVEN\"\r\n      "
    },
    {
        "number": 135,
        "prompt": "Write a function to find the nth hexagonal number.\ndef hexagonal_num(n): \n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    return (n * (2 * n - 1)) \n\n\n# Test the function with different values of n\nprint(hexagonal_num(1)) # Output: 1\nprint(hexagonal_num(2)) # Output: 6\nprint(hexagonal_num(3)) # Output: 15\nprint(hexagonal_num(4)) # Output: 28\nprint(hexagonal_num(5)) # Output: 45\n\n\n# Function to find the nth hexagonal number\ndef nth_hexagonal_number(n): \n    return hexagonal_num(n)\n\n\n# Test the function\nprint(nth_hexagonal_number(1)) # Output: 1\nprint(nth_hexagonal_number(2)) # Output: 6\nprint(nth_hexagonal_number(3)) # Output: 15\nprint(nth_hexagonal_number(4)) # Output: 28\nprint(nth_hexagonal_number(5)) # Output: 45",
        "generated_testcode": "assert hexagonal_num(1) == 1\n",
        "test": "assert hexagonal_num(10) == 190\nassert hexagonal_num(5) == 45\nassert hexagonal_num(7) == 91",
        "canonical_solution": "def hexagonal_num(n): \r\n\treturn n*(2*n - 1) "
    },
    {
        "number": 136,
        "prompt": "Write a function to calculate electricity bill.\ndef cal_electbill(units):\n",
        "checkpoint": "7B",
        "pass": 6,
        "correct": true,
        "answer": "    if units <= 0:\n        return \"Invalid input\"\n    elif units <= 1000:\n        return 50\n    elif units > 1000 and units <= 3000:\n        return 60 + ((units - 1000) * 0.25)\n    elif units > 3000 and units <= 5000:\n        return 1000 + (units - 3000) * 0.3\n    else:\n        return 150 + ((units - 5000) * 0.4)\n\n\n# Test the function\nprint(cal_electbill(10))\nprint(cal_electbill(150))\nprint(cal_electbill(350))\nprint(cal_electbill(5000))\nprint(cal_electbill(7000))\nprint(cal_electbill(0))\n",
        "generated_testcode": "assert cal_electbill(1000) == 1000 * 0.05\n",
        "test": "assert cal_electbill(75)==246.25\nassert cal_electbill(265)==1442.75\nassert cal_electbill(100)==327.5",
        "canonical_solution": "def cal_electbill(units):\r\n if(units < 50):\r\n    amount = units * 2.60\r\n    surcharge = 25\r\n elif(units <= 100):\r\n    amount = 130 + ((units - 50) * 3.25)\r\n    surcharge = 35\r\n elif(units <= 200):\r\n    amount = 130 + 162.50 + ((units - 100) * 5.26)\r\n    surcharge = 45\r\n else:\r\n    amount = 130 + 162.50 + 526 + ((units - 200) * 8.45)\r\n    surcharge = 75\r\n total = amount + surcharge\r\n return total"
    },
    {
        "number": 137,
        "prompt": "Write a function to find the ration of zeroes in an array of integers.\ndef zero_count(nums):\n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    count = 0\n    for i in nums:\n        if i == 0:\n            count += 1\n    return count/len(nums)\n\nprint(zero_count([1, 2, 0, 0, 3, 0]))  # 0.5\nprint(zero_count([1, 2, 3, 4, 5]))  # 0\nprint(zero_count([0, 0, 0, 0, 0]))  # 1\nprint(zero_count([1, 1, 1, 1]))  # 0\n\n\n# Another solution\ndef zero_count(nums):\n    return sum(1 for i in nums if i == 0) / len(nums)\n\nprint(zero_count([1, 2, 0, 0, 3, 0]))  # 0.5\nprint(zero_count([1, 2, 3, 4, 5]))  # 0\nprint(zero_count([0, 0, 0, 0, 0]))  # 1\nprint(zero_count([1, 1, 1, 1]))  # 0\n\n\n# Another solution using numpy\nimport numpy as np\ndef zero_count(nums):\n    return np.sum(nums == 0) / len(nums)\n\nprint(zero_count([1, 2, 0, 0, 3, 0]))  # ",
        "generated_testcode": "assert zero_count([0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0]) == 5/7\n",
        "test": "assert zero_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])==0.15\nassert zero_count([2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8])==0.00\nassert zero_count([2, 4, -6, -9, 11, -12, 14, -5, 17])==0.00",
        "canonical_solution": "from array import array\r\ndef zero_count(nums):\r\n    n = len(nums)\r\n    n1 = 0\r\n    for x in nums:\r\n        if x == 0:\r\n            n1 += 1\r\n        else:\r\n          None\r\n    return round(n1/n,2)"
    },
    {
        "number": 138,
        "prompt": "Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\ndef is_Sum_Of_Powers_Of_Two(n): \n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    def is_power_of_two(num): \n        if num <= 0: \n            return False\n        while num: \n            if num & 1: \n                return num == 1\n            num >>= 1\n        return True\n\n    def sum_of_powers_of_two(n): \n        count = 0\n        num = 1\n        while n >= 1: \n            if is_power_of_two(num): \n                if n >= num: \n                    count += 1\n                    n -= num \n            num <<= 1\n        return count \n\n    return sum_of_powers_of_two(n) > 0 ",
        "generated_testcode": "assert is_Sum_Of_Powers_Of_Two(1) == True\n",
        "test": "assert is_Sum_Of_Powers_Of_Two(10) == True\nassert is_Sum_Of_Powers_Of_Two(7) == False\nassert is_Sum_Of_Powers_Of_Two(14) == True",
        "canonical_solution": "def is_Sum_Of_Powers_Of_Two(n): \r\n    if (n % 2 == 1): \r\n        return False\r\n    else: \r\n        return True"
    },
    {
        "number": 139,
        "prompt": "Write a function to find the circumference of a circle.\ndef circle_circumference(r):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": true,
        "answer": "    import math\n    return 2*math.pi*r\n\n# Test the function\nprint(circle_circumference(5)) # Output: 31.41592653589793\nprint(circle_circumference(10)) # Output: 62.831853031764\nprint(circle_circumference(20)) # Output: 125.663706401112\n\n\n# Write a function to find the area of a circle\ndef circle_area(r):\n    import math\n    return math.pi*r**2\n\n# Test the function\nprint(circle_area(5)) # Output: 78.539816333975\nprint(circle_area(10)) # Output: 153.93881236257\nprint(circle_area(20)) # Output: 1555.17771245466\n\n\n# Write a function to find the surface area of a sphere\ndef sphere_surface_area(r):\n    import math\n    return 4*math.pi*r**2\n\n# Test the function\nprint(sphere_surface_area(5)) # Output: 314.15926535898\nprint(sphere_surface_area(10)) # Output: 628.410",
        "generated_testcode": "assert circle_circumference(5) == 31.41592653589793\n\n",
        "test": "assert circle_circumference(10)==62.830000000000005\nassert circle_circumference(5)==31.415000000000003\nassert circle_circumference(4)==25.132",
        "canonical_solution": "def circle_circumference(r):\r\n  perimeter=2*3.1415*r\r\n  return perimeter"
    },
    {
        "number": 140,
        "prompt": "Write a function to extract elements that occur singly in the given tuple list.\ndef extract_singly(test_list):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": true,
        "answer": "    result = []\n    for i in test_list:\n        if test_list.count(i) == 1:\n            result.append(i)\n    return result\n\n# Test the function with the sample inputs\nprint(extract_singly([1, 2, 3, 2, 4, 3, 5, 4, 5])) # Output: [1]\nprint(extract_singly([1, 2, 3, 2, 3, 4, 5, 5, 6])) # Output: [6]\nprint(extract_singly([1, 1, 2, 2, 3, 3, 3, 4, 4])) # Output: []\n\n\n# Solution explanation:\n# We iterate through each element in the given list and check if it occurs only once in the list using the count() method. If the count() method returns 1, we append the element to the result list.\n# Finally, we return the result list containing the elements that occur only once. ",
        "generated_testcode": "assert extract_singly(()) == ()\n",
        "test": "assert extract_singly([(3, 4, 5), (4, 5, 7), (1, 4)]) == [3, 4, 5, 7, 1]\nassert extract_singly([(1, 2, 3), (4, 2, 3), (7, 8)]) == [1, 2, 3, 4, 7, 8]\nassert extract_singly([(7, 8, 9), (10, 11, 12), (10, 11)]) == [7, 8, 9, 10, 11, 12]",
        "canonical_solution": "def extract_singly(test_list):\r\n  res = []\r\n  temp = set()\r\n  for inner in test_list:\r\n    for ele in inner:\r\n      if not ele in temp:\r\n        temp.add(ele)\r\n        res.append(ele)\r\n  return (res) "
    },
    {
        "number": 141,
        "prompt": "Write a function to sort a list of elements using pancake sort.\ndef pancake_sort(nums):\n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    n = len(nums)\n    for i in range(n // 2 - 1, -1, -1):\n        max_index = i\n        for j in range(i + 1, n):\n            if nums[j] > nums[max_index]:\n                max_index = j\n\n        if max_index != i:\n            if max_index != i:\n                nums = flip(nums, max_index)\n            nums = flip(nums, i)\n    return nums\n\n\ndef flip(nums, k):\n    return nums[:k][::-1] + nums[k+1:] + nums[:k][::-1]\n\n\n# Test the function\nnums = [3, 2, 1, 5, 4, 1, 0]\nprint(pancake_sort(nums))  # Output: [0, 1, 1, 2, 3, 4, 5]\n\nnums = [1, 2, 3, 4, 5, 6, 7]\nprint(pancake_sort(nums))  # Output: [1, 2, 3, 4, 5, 6, 7]\nnums = [4, 3, 2, 1, 0, 5]\nprint(pancake_sort(nums))  # Output: [0, 1, 2, 3, ",
        "generated_testcode": "assert pancake_sort([3, 2, 1, 4, 5, 1, 0]) == [0, 1, 1, 2, 3, 4]\n",
        "test": "assert pancake_sort([15, 79, 25, 38, 69]) == [15, 25, 38, 69, 79]\nassert pancake_sort([98, 12, 54, 36, 85]) == [12, 36, 54, 85, 98]\nassert pancake_sort([41, 42, 32, 12, 23]) == [12, 23, 32, 41, 42]",
        "canonical_solution": "def pancake_sort(nums):\r\n    arr_len = len(nums)\r\n    while arr_len > 1:\r\n        mi = nums.index(max(nums[0:arr_len]))\r\n        nums = nums[mi::-1] + nums[mi+1:len(nums)]\r\n        nums = nums[arr_len-1::-1] + nums[arr_len:len(nums)]\r\n        arr_len -= 1\r\n    return nums"
    },
    {
        "number": 142,
        "prompt": "Write a function to count the same pair in three given lists.\ndef count_samepair(list1,list2,list3):\n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    count=0\n    for i in list1:\n        for j in list2:\n            for k in list3:\n                if i==j==k:\n                    count+=1\n    return count\n\n# Test the function with sample input\nprint(count_samepair([1,2,3],[2,3,4],[3,4,5]) # Output: 2\nprint(count_samepair([1,2,3],[2,3,4],[1,4,5]) # Output: 1\nprint(count_samepair([1,2,3],[1,4,5],[2,3,4]) # Output: 0\nprint(count_samepair([1,2,3],[1,2,3],[2,3,4]) # Output: 3\n\n# Explanation:\n# In the first example, both 2 and 3 are present in all the lists, so the output is 2.\n# In the second example, only 2 and 3 are present in list1 and list2, but not in list3, so the output is 1.\n# In the third example, all the elements are present in all the lists, so the output is 3. ",
        "generated_testcode": "assert count_samepair([1,2,3,4,5],[2,4,6,8,10],[4,8,12,16]) == 2\n",
        "test": "assert count_samepair([1,2,3,4,5,6,7,8],[2,2,3,1,2,6,7,9],[2,1,3,1,2,6,7,9])==3\nassert count_samepair([1,2,3,4,5,6,7,8],[2,2,3,1,2,6,7,8],[2,1,3,1,2,6,7,8])==4\nassert count_samepair([1,2,3,4,2,6,7,8],[2,2,3,1,2,6,7,8],[2,1,3,1,2,6,7,8])==5",
        "canonical_solution": "def count_samepair(list1,list2,list3):\r\n    result = sum(m == n == o for m, n, o in zip(list1,list2,list3))\r\n    return result"
    },
    {
        "number": 143,
        "prompt": "Write a function to find number of lists present in the given tuple.\ndef find_lists(Input): \n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    count = 0\n    for item in Input:\n        if isinstance(item, list):\n            count += 1\n    return count\n\n# Testing the function\nInput = ([1, 2, [3, 4, 5], 6, [7, 8, [9, [10, 11], 12], 13], 14], 15]\nprint(find_lists(Input))  # Output: 2 ",
        "generated_testcode": "assert find_lists(([1,2,3,4], [5,6,7], [8,9,10], [11,12,13]) == 3\n",
        "test": "assert find_lists(([1, 2, 3, 4], [5, 6, 7, 8])) == 2\nassert find_lists(([1, 2], [3, 4], [5, 6]))  == 3\nassert find_lists(([9, 8, 7, 6, 5, 4, 3, 2, 1])) == 1",
        "canonical_solution": "def find_lists(Input): \r\n\tif isinstance(Input, list): \r\n\t\treturn 1\r\n\telse: \r\n\t\treturn len(Input) "
    },
    {
        "number": 144,
        "prompt": "Write a python function to find the sum of absolute differences in all pairs of the given array.\ndef sum_Pairs(arr,n): \n",
        "checkpoint": "7B",
        "pass": 3,
        "correct": true,
        "answer": "    arr.sort() \n    sum=0\n    for i in range(n): \n        for j in range(i+1,n): \n            sum += abs(arr[i]-arr[j]) \n    return sum ",
        "generated_testcode": "assert sum_Pairs([1,2,3,4,5],4) == 10\n",
        "test": "assert sum_Pairs([1,8,9,15,16],5) == 74\nassert sum_Pairs([1,2,3,4],4) == 10\nassert sum_Pairs([1,2,3,4,5,7,9,11,14],9) == 188",
        "canonical_solution": "def sum_Pairs(arr,n): \r\n    sum = 0\r\n    for i in range(n - 1,-1,-1): \r\n        sum += i*arr[i] - (n-1-i) * arr[i] \r\n    return sum"
    },
    {
        "number": 145,
        "prompt": "Write a python function to find the maximum difference between any two elements in a given array.\ndef max_Abs_Diff(arr,n): \n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    arr.sort() \n    max_diff = arr[n-1] - arr[0] \n    for i in range(1, n-1): \n        diff = arr[i] - arr[i-1] \n        if diff > max_diff: \n            max_diff = diff \n    return max_diff ",
        "generated_testcode": "assert max_Abs_Diff([1, 2, 3, 6, 8, 4, 5, 7, 10], 6) == 8\n",
        "test": "assert max_Abs_Diff((2,1,5,3),4) == 4\nassert max_Abs_Diff((9,3,2,5,1),5) == 8\nassert max_Abs_Diff((3,2,1),3) == 2",
        "canonical_solution": "def max_Abs_Diff(arr,n): \r\n    minEle = arr[0] \r\n    maxEle = arr[0] \r\n    for i in range(1, n): \r\n        minEle = min(minEle,arr[i]) \r\n        maxEle = max(maxEle,arr[i]) \r\n    return (maxEle - minEle) "
    },
    {
        "number": 146,
        "prompt": "Write a function to find the ascii value of total characters in a string.\ndef ascii_value_string(str1):\n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    ascii_sum = 0\n    for i in str1:\n        ascii_sum += ord(i)\n    return ascii_sum\n\n\n# Test the function with a sample input\nprint(ascii_value_string(\"hello\")) # Output: 3326\n",
        "generated_testcode": "assert ascii_value_string(\"hello\") == 326\n",
        "test": "assert ascii_value_string(\"python\")==112\nassert ascii_value_string(\"Program\")==80\nassert ascii_value_string(\"Language\")==76",
        "canonical_solution": "def ascii_value_string(str1):\r\n  for i in range(len(str1)):\r\n   return ord(str1[i])"
    },
    {
        "number": 147,
        "prompt": "Write a function to find the maximum total path sum in the given triangle.\ndef max_path_sum(tri, m, n): \n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    for i in range(1, m): \n        for j in range(n): \n            if j == 0: \n                tri[i][j] += tri[i-1][j] \n            elif j == i: \n                tri[i][j] += tri[i-1][j-1] \n            else: \n                tri[i][j] += max(tri[i-1][j-1], tri[i-1][j]) \n    return tri[m-1][n-1]\n\n# Test the function with the given input\ntri = [[7, 2, 5, 8, 3], \n       [1, 5, 8, 10, 3], \n       [3, 1, 6, 7, 2], \n       [8, 8, 9, 6, 7]] \nm = 3\nn = 4\nprint(max_path_sum(tri, m, n)) ",
        "generated_testcode": "assert max_path_sum(\n    [[5],\n     [3, 4],\n     [2, 4, 6],\n     [8, 5, 9, 3],\n     [6, 1, 1, 2, 5],\n     [1, 8, 3, 4, 1, 5]], 4) == 23\n\n",
        "test": "assert max_path_sum([[1, 0, 0], [4, 8, 0], [1, 5, 3]], 2, 2) == 14\nassert max_path_sum([[13, 0, 0], [7, 4, 0], [2, 4, 6]], 2, 2) == 24 \nassert max_path_sum([[2, 0, 0], [11, 18, 0], [21, 25, 33]], 2, 2) == 53",
        "canonical_solution": "def max_path_sum(tri, m, n): \r\n\tfor i in range(m-1, -1, -1): \r\n\t\tfor j in range(i+1): \r\n\t\t\tif (tri[i+1][j] > tri[i+1][j+1]): \r\n\t\t\t\ttri[i][j] += tri[i+1][j] \r\n\t\t\telse: \r\n\t\t\t\ttri[i][j] += tri[i+1][j+1] \r\n\treturn tri[0][0]"
    },
    {
        "number": 148,
        "prompt": "Write a function to divide a number into two parts such that the sum of digits is maximum.\ndef sum_digits_single(x) : \n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    if x == 0 : \n        return (0, 0) \n    else : \n        digit_sum = 0\n        while x > 0 : \n            digit_sum += x % 10\n            x //= 10\n        return (digit_sum, 0)\n\ndef sum_digits_double(x) : \n    if x == 0 : \n        return (0, 0) \n    else : \n        digit_sum = 0\n        while x > 0 : \n            digit_sum += x % 10\n            x //= 10\n        return (digit_sum, 0)\n\ndef max_division(x) : \n    if x == 0 : \n        return (0, 0)\n    else : \n        single_sum, double_sum = sum_digits_single(x), sum_digits_double(x)\n        if single_sum[0] > double_sum[0] : \n            return single_sum\n        elif single_sum[0] < double_sum[0] : \n            return double_sum\n        else : \n            return sum_digits_single(x)\n\ndef max_division(x) : \n    if x == 0 : \n        return (0, 0)\n    else : \n        single_sum, double_sum = sum_digits_single(x), sum_digits_double(x)\n        if single",
        "generated_testcode": "assert sum_digits_single(12345) == (3, 2345)\n",
        "test": "assert sum_digits_twoparts(35)==17\nassert sum_digits_twoparts(7)==7\nassert sum_digits_twoparts(100)==19",
        "canonical_solution": "def sum_digits_single(x) : \r\n    ans = 0\r\n    while x : \r\n        ans += x % 10\r\n        x //= 10  \r\n    return ans \r\ndef closest(x) : \r\n    ans = 0\r\n    while (ans * 10 + 9 <= x) : \r\n        ans = ans * 10 + 9  \r\n    return ans   \r\ndef sum_digits_twoparts(N) : \r\n    A = closest(N)  \r\n    return sum_digits_single(A) + sum_digits_single(N - A) "
    },
    {
        "number": 149,
        "prompt": "Write a function to find the longest subsequence such that the difference between adjacents is one for the given array.\ndef longest_subseq_with_diff_one(arr, n): \n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    if n == 1:\n        return n\n    elif n == 2:\n        return 2\n    \n    dp = [1] * n\n    dp[0] = 1\n    dp[1] = 2\n    \n    for i in range(2, n):\n        if arr[i] - arr[i-1] == 1:\n            dp[i] = dp[i-1] + 1\n        else:\n            dp[i] = 2\n            \n    max_len = max(dp)\n    \n    for i in range(1, n):\n        for j in range(i):\n            if arr[i] - arr[j] == 1 and dp[i] < dp[j] + 1:\n                dp[i] = dp[j] + 1\n                \n    max_len = max(max_len, dp[i])\n    \n    return max_len\n\n\narr = [1, 2, 3, 4, 5, 7, 8, 10]\nn = len(arr)\nprint(longest_subseq_with_diff_one(arr, n))\n\n\n# Time Complexity: O(n^2)\n# Space Complexity: O(n)\n\n\n# Optimized Solution\n# DP: dp[i] stores the length of the longest subsequence ending at arr[i]\n# Create a dictionary to store the last index of",
        "generated_testcode": "assert longest_subseq_with_diff_one([1, 2, 3, 4, 5, 6, 7, 8, 9], 6) == 4\n",
        "test": "assert longest_subseq_with_diff_one([1, 2, 3, 4, 5, 3, 2], 7) == 6\nassert longest_subseq_with_diff_one([10, 9, 4, 5, 4, 8, 6], 7) == 3\nassert longest_subseq_with_diff_one([1, 2, 3, 2, 3, 7, 2, 1], 8) == 7",
        "canonical_solution": "def longest_subseq_with_diff_one(arr, n): \r\n\tdp = [1 for i in range(n)] \r\n\tfor i in range(n): \r\n\t\tfor j in range(i): \r\n\t\t\tif ((arr[i] == arr[j]+1) or (arr[i] == arr[j]-1)): \r\n\t\t\t\tdp[i] = max(dp[i], dp[j]+1) \r\n\tresult = 1\r\n\tfor i in range(n): \r\n\t\tif (result < dp[i]): \r\n\t\t\tresult = dp[i] \r\n\treturn result"
    },
    {
        "number": 150,
        "prompt": "Write a python function to find whether the given number is present in the infinite sequence or not.\ndef does_Contain_B(a,b,c): \n",
        "checkpoint": "7B",
        "pass": 7,
        "correct": true,
        "answer": "    if a == 0 and b == 0: \n        return False \n    if a == 0 and b == 1: \n        return True\n    if c == 0: \n        return True\n    if c % 2 == 0: \n        return False\n    if b >= 0 and a >= 0 and c % 2 == 1: \n        return True\n    if b < 0 and a < 0 and c % 2 == 1: \n        return True\n    return False \n\n# test the function ",
        "generated_testcode": "assert does_Contain_B(1,2,3) == True\n",
        "test": "assert does_Contain_B(1,7,3) == True\nassert does_Contain_B(1,-3,5) == False\nassert does_Contain_B(3,2,5) == False",
        "canonical_solution": "def does_Contain_B(a,b,c): \r\n    if (a == b): \r\n        return True\r\n    if ((b - a) * c > 0 and (b - a) % c == 0): \r\n        return True\r\n    return False"
    },
    {
        "number": 151,
        "prompt": "Write a python function to check whether the given number is co-prime or not.\ndef gcd(p,q):\n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    if p == q:\n        return False\n    while q != 0:\n        r = p % q\n        p = q\n        q = r\n    return True\n\ndef co_prime(num):\n    for i in range(2,num):\n        if num == gcd(num,i):\n            return True\n    return False\n\n# Testing the function\nprint(co_prime(15)) # True\nprint(co_prime(20)) # False\nprint(co_prime(25)) # False\nprint(co_prime(17)) # True\n",
        "generated_testcode": "assert gcd(3,5) == 1\n",
        "test": "assert is_coprime(17,13) == True\nassert is_coprime(15,21) == False\nassert is_coprime(25,45) == False",
        "canonical_solution": "def gcd(p,q):\r\n    while q != 0:\r\n        p, q = q,p%q\r\n    return p\r\ndef is_coprime(x,y):\r\n    return gcd(x,y) == 1"
    },
    {
        "number": 152,
        "prompt": "Write a function to sort the given array by using merge sort.\ndef merge(a,b):\n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    n=len(a)\n    m=len(b)\n    c=[]\n    i=j=k=0\n    while i<n and j<m:\n        if a[i]<b[j]:\n            c.append(a[i])\n            i+=1\n        else:\n            c.append(b[j])\n            j+=1\n    if i==n:\n        c.extend(b[j:])\n    else:\n        c.extend(a[i:])\n    return c\n\ndef merge_sort(arr):\n    if len(arr)<=1:\n        return arr\n    mid=len(arr)//2\n    left=arr[:mid]\n    right=arr[mid:]\n    left=merge_sort(left)\n    right=merge_sort(right)\n    return merge(left,right)\n\n#Test the function\narr=[5,3,1,8,7,2,9,4,6,10]\nprint(merge_sort(arr))\n\n#Output: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] ",
        "generated_testcode": "assert merge([4,2,1,5,3,1], [6,7,8,9,0]) == [0,1,1,2,3,4,5,6,7,8,9]\n",
        "test": "assert merge_sort([3, 4, 2, 6, 5, 7, 1, 9]) == [1, 2, 3, 4, 5, 6, 7, 9]\nassert merge_sort([7, 25, 45, 78, 11, 33, 19]) == [7, 11, 19, 25, 33, 45, 78]\nassert merge_sort([3, 1, 4, 9, 8]) == [1, 3, 4, 8, 9]",
        "canonical_solution": "def merge(a,b):\r\n    c = []\r\n    while len(a) != 0 and len(b) != 0:\r\n        if a[0] < b[0]:\r\n            c.append(a[0])\r\n            a.remove(a[0])\r\n        else:\r\n            c.append(b[0])\r\n            b.remove(b[0])\r\n    if len(a) == 0:\r\n        c += b\r\n    else:\r\n        c += a\r\n    return c\r\ndef merge_sort(x):\r\n    if len(x) == 0 or len(x) == 1:\r\n        return x\r\n    else:\r\n        middle = len(x)//2\r\n        a = merge_sort(x[:middle])\r\n        b = merge_sort(x[middle:])\r\n        return merge(a,b)\r\n"
    },
    {
        "number": 153,
        "prompt": "Write a function to find the vertex of a parabola.\ndef parabola_vertex(a, b, c): \n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    vertex_x = -b/(2*a)\n    vertex_y = a*vertex_x**2 + b*vertex_x + c\n    return(vertex_x, vertex_y)\n\n\n#Test the function\nprint(parabola_vertex(1, 3, 2)) # Output: (-1.0, 5.0)",
        "generated_testcode": "assert parabola_vertex(1, 2, 3) == (0, -3)\n",
        "test": "assert parabola_vertex(5,3,2)==(-0.3, 1.55)\nassert parabola_vertex(9,8,4)==(-0.4444444444444444, 2.2222222222222223)\nassert parabola_vertex(2,4,6)==(-1.0, 4.0)",
        "canonical_solution": "def parabola_vertex(a, b, c): \r\n  vertex=(((-b / (2 * a)),(((4 * a * c) - (b * b)) / (4 * a))))\r\n  return vertex"
    },
    {
        "number": 154,
        "prompt": "Write a function to extract every specified element from a given two dimensional list.\ndef specified_element(nums, N):\n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    result = []\n    for row in nums:\n        for num in row:\n            if num % N == 0:\n                result.append(num)\n    return result\n\n#Example usage:\nnums = [[1,2,3,4,5],[6,7,8,9],[10,11,12,13],[14,15,16,17]]\nN = 3\nprint(specified_element(nums,N)) # Output: [3, 6, 9, 12]\n\nnums = [[1,2,3,4,5],[6,7,8,9],[10,11,12,13],[14,15,16,17]]\nN = 5\nprint(specified_element(nums,N)) # Output: []\n\nnums = [[1,2,3,4,5],[6,7,8,9],[10,11,12,13],[14,15,16,17]]\nN = 13\nprint(specified_element(nums,N)) # Output: [12, 15, 16]\nnums = [[1,2,3,4,5],[6,7,8,9],[10,11,12,13],[14,15,16,17]]\nN = 7\nprint(specified_element(nums,N)) # Output: [2",
        "generated_testcode": "assert specified_element([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 2) == [2, 6, 8]\n",
        "test": "assert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],0)==[1, 4, 7]\nassert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],2)==[3, 6, 9]\nassert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],3)==[2,2,5]",
        "canonical_solution": "def specified_element(nums, N):\r\n    result = [i[N] for i in nums]\r\n    return result"
    },
    {
        "number": 155,
        "prompt": "Write a python function to toggle all even bits of a given number.\ndef even_bit_toggle_number(n) : \n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": true,
        "answer": "    binary = bin(n)\n    binary = binary.replace('0b', '')\n    binary = list(binary)\n    for i in range(len(binary)) :\n        if binary[i] == '1' :\n            binary[i] = '0'\n        else :\n            binary[i] = '1'\n    binary = ''.join(binary)\n    decimal = int(binary, 2)\n    return decimal\n\n# test the function\nn = 12\nprint(even_bit_toggle_number(n))\n\n\n# Output: 13",
        "generated_testcode": "assert even_bit_toggle_number(10) == 5\n",
        "test": "assert even_bit_toggle_number(10) == 0\nassert even_bit_toggle_number(20) == 30\nassert even_bit_toggle_number(30) == 20",
        "canonical_solution": "def even_bit_toggle_number(n) : \r\n    res = 0; count = 0; temp = n \r\n    while (temp > 0) :     \r\n        if (count % 2 == 1) : \r\n            res = res | (1 << count)      \r\n        count = count + 1\r\n        temp >>= 1 \r\n    return n ^ res "
    },
    {
        "number": 156,
        "prompt": "Write a function to convert a tuple of string values to a tuple of integer values.\ndef tuple_int_str(tuple_str):\n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    tuple_int = []\n    for i in range(len(tuple_str)):\n        tuple_int.append(int(tuple_str[i]))\n    return tuple(tuple_int)\n\n# Test the function with a tuple of string values\nvalues = (\"123\", \"456\", \"789\")\nprint(tuple_int_str(values))\n\n# Output: (123, 456, 789)",
        "generated_testcode": "assert tuple_int_str((\"1\", \"2\", \"3\") == (1, 2, 3)\n",
        "test": "assert tuple_int_str((('333', '33'), ('1416', '55')))==((333, 33), (1416, 55))\nassert tuple_int_str((('999', '99'), ('1000', '500')))==((999, 99), (1000, 500))\nassert tuple_int_str((('666', '66'), ('1500', '555')))==((666, 66), (1500, 555))",
        "canonical_solution": "def tuple_int_str(tuple_str):\r\n    result = tuple((int(x[0]), int(x[1])) for x in tuple_str)\r\n    return result"
    },
    {
        "number": 157,
        "prompt": "Write a function to reflect the run-length encoding from a list.\ndef encode_list(list1):\n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    if not list1:\n        return []\n    result = []\n    count = 1\n    prev = list1[0]\n    for i in range(1, len(list1)):\n        if list1[i] == prev:\n            count += 1\n        else:\n            result.append((count, prev))\n            prev = list1[i]\n            count = 1\n    result.append((count, prev) if count > 1 else prev)\n    return result\n\n\n# Test the function\nprint(encode_list([1, 1, 2, 2, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 5, 6]))\n# Output: [(2, 1), (1, 2), (1, 3), (3, 4), (1, 5), (4, 6)]\nprint(encode_list([1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3]))\n# Output: [(4, 1), (3, 2), (3, 3)]\nprint(encode_list([1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 3, 4, 4, 4, 4]))\n# Output: [(4, 1),",
        "generated_testcode": "assert encode_list([\"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"b\", \"c\", \"c\", \"c\", \"a\", \"a\"] == [('a', 4), ('b', 1), ('c', 2), ('a', 2)]\n\n# Test case 2\n",
        "test": "assert encode_list([1,1,2,3,4,4.3,5,1])==[[2, 1], [1, 2], [1, 3], [1, 4], [1, 4.3], [1, 5], [1, 1]]\nassert encode_list('automatically')==[[1, 'a'], [1, 'u'], [1, 't'], [1, 'o'], [1, 'm'], [1, 'a'], [1, 't'], [1, 'i'], [1, 'c'], [1, 'a'], [2, 'l'], [1, 'y']]\nassert encode_list('python')==[[1, 'p'], [1, 'y'], [1, 't'], [1, 'h'], [1, 'o'], [1, 'n']]",
        "canonical_solution": "from itertools import groupby\r\ndef encode_list(list1):\r\n    return [[len(list(group)), key] for key, group in groupby(list1)]"
    },
    {
        "number": 158,
        "prompt": "Write a python function to find k number of operations required to make all elements equal.\ndef min_Ops(arr,n,k): \n",
        "checkpoint": "7B",
        "pass": 3,
        "correct": true,
        "answer": "    # Initialize a variable to keep track of the count of operations required \n    count = 0 \n    # Initialize a variable to keep track of the maximum element in the array \n    max_element = max(arr) \n    # Loop through the array and increment the count variable if the current element is not equal to maximum element \n    for i in range(n): \n        if arr[i] != max_element: \n            count += max_element - arr[i] \n    # Return the count variable \n    return count \n    \n# Test the function with sample input \narr = [1, 2, 3, 4, 5, 6, 7, 8] \nn = len(arr) \nk = 1\nprint(min_Ops(arr,n,k)) ",
        "generated_testcode": "assert min_Ops([1,2,3,4,5,6,7,8], 3, 2) == 2 # Explanation: We can make all elements equal to 5 by swapping 1 and 8 and swapping 2 and 7. \n",
        "test": "assert min_Ops([2,2,2,2],4,3) == 0\nassert min_Ops([4,2,6,8],4,3) == -1\nassert min_Ops([21,33,9,45,63],5,6) == 24",
        "canonical_solution": "def min_Ops(arr,n,k): \r\n    max1 = max(arr) \r\n    res = 0\r\n    for i in range(0,n):  \r\n        if ((max1 - arr[i]) % k != 0): \r\n            return -1 \r\n        else: \r\n            res += (max1 - arr[i]) / k \r\n    return int(res) "
    },
    {
        "number": 159,
        "prompt": "Write a function to print the season for the given month and day.\ndef month_season(month,days):\n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    # initialize season variable\n    season = \"\"\n    # check if month is a string\n    if isinstance(month, str):\n        # convert month to integer\n        month = int(month)\n    # check if month is a valid integer\n    if month not in range(1,13):\n        print(\"Invalid month\")\n        return \"Invalid month\"\n    # check if days are within range\n    elif days not in range(1,32):\n        print(\"Invalid day\")\n        return \"Invalid day\"\n    else:\n        # winter\n        if month in [12,1,2,3]:\n            season = \"winter\"\n        # spring\n        elif month in [4,5,6]:\n            season = \"spring\"\n        # summer\n        elif month in [7,8,9]:\n            season = \"summer\"\n        # fall\n        elif month in [10,11,12]:\n            season = \"fall\"\n        # winter\n        else:\n            season = \"winter\"\n    # print the season\n    print(season)\n    return season\n\n# test the function\nprint(month_season(12,21)) # winter\nprint(month_season(5,15)) # spring\nprint(month_season(9,30)) # summer\nprint(month_season(13,1)) # Invalid month\nprint(month_season(4,-10) # Invalid day\nprint(month_season(\"April\",25)) # Invalid month\nprint",
        "generated_testcode": "assert month_season(12,31) == \"Winter\"\n",
        "test": "assert month_season('January',4)==('winter')\nassert month_season('October',28)==('autumn')\nassert month_season('June',6)==('spring')",
        "canonical_solution": "def month_season(month,days):\r\n if month in ('January', 'February', 'March'):\r\n\t season = 'winter'\r\n elif month in ('April', 'May', 'June'):\r\n\t season = 'spring'\r\n elif month in ('July', 'August', 'September'):\r\n\t season = 'summer'\r\n else:\r\n\t season = 'autumn'\r\n if (month == 'March') and (days > 19):\r\n\t season = 'spring'\r\n elif (month == 'June') and (days > 20):\r\n\t season = 'summer'\r\n elif (month == 'September') and (days > 21):\r\n\t season = 'autumn'\r\n elif (month == 'October') and (days > 21):\r\n\t season = 'autumn'\r\n elif (month == 'November') and (days > 21):\r\n\t season = 'autumn'\r\n elif (month == 'December') and (days > 20):\r\n\t season = 'winter'\r\n return season"
    },
    {
        "number": 160,
        "prompt": "Write a function to find x and y that satisfies ax + by = n.\ndef solution (a, b, n): \n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    x = 0\n    y = 0\n    if n % a == 0:\n        x = n // a\n        y = 0\n    elif n % b == 0:\n        x = 0\n        y = n // b\n    else:\n        x = (n // a) + (n // b)\n        y = (n // a)\n        while x * a + y * b != n:\n            x -= 1\n            y += 1\n    return [x, y]\n\n# Test cases\nprint(solution(3, 5, 12)) # [1, 2]\nprint(solution(1, 7, 10)) # [2, 3]\nprint(solution(1, 1, 15)) # [15, 0]\nprint(solution(2, 5, 3)) # [0, 1]\nprint(solution(1, 2, 2)) # [1, 0]\nprint(solution(4, 7, 18)) # [0, 4]\nprint(solution(7, 2, 42)) # [0, 0]\nprint(solution(13, 2, 26)) # [2, 2]\n\n\ndef solution (a, b, n): \n    x = 0\n    y = 0\n    if n % a == 0:\n        x = n // a\n        y = 0\n    elif",
        "generated_testcode": "assert solution(2, 3, 5) == (0, 1)\n",
        "test": "assert solution(2, 3, 7) == ('x = ', 2, ', y = ', 1)\nassert solution(4, 2, 7) == 'No solution'\nassert solution(1, 13, 17) == ('x = ', 4, ', y = ', 1)",
        "canonical_solution": "def solution (a, b, n): \r\n\ti = 0\r\n\twhile i * a <= n: \r\n\t\tif (n - (i * a)) % b == 0: \r\n\t\t\treturn (\"x = \",i ,\", y = \", \r\n\t\t\tint((n - (i * a)) / b)) \r\n\t\t\treturn 0\r\n\t\ti = i + 1\r\n\treturn (\"No solution\") "
    },
    {
        "number": 161,
        "prompt": "Write a function to remove all elements from a given list present in another list.\ndef remove_elements(list1, list2):\n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    return [x for x in list1 if x not in list2]\n\n# Test the function\nlist1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nlist2 = [4, 5, 6, 7, 12, 3, 13]\nprint(remove_elements(list1, list2)) # [1, 2, 8, 9, 10]\n\n# Note: The order of the elements in the output list should not be changed. ",
        "generated_testcode": "assert remove_elements([1, 2, 3, 4, 5, 6, 7, 8, 9], [2, 4, 8]) == [1, 3, 5, 6, 7, 9]\n",
        "test": "assert remove_elements([1,2,3,4,5,6,7,8,9,10],[2,4,6,8])==[1, 3, 5, 7, 9, 10]\nassert remove_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],[1, 3, 5, 7])==[2, 4, 6, 8, 9, 10]\nassert remove_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],[5,7])==[1, 2, 3, 4, 6, 8, 9, 10]",
        "canonical_solution": "def remove_elements(list1, list2):\r\n    result = [x for x in list1 if x not in list2]\r\n    return result"
    },
    {
        "number": 162,
        "prompt": "Write a function to calculate the sum of the positive integers of n+(n-2)+(n-4)... (until n-x =< 0).\ndef sum_series(n):\n",
        "checkpoint": "7B",
        "pass": 8,
        "correct": true,
        "answer": "    sum = 0\n    i = 0\n    while n-i > 0:\n        sum += n-i\n        i += 1\n    return sum\n\n# Test the function\nprint(sum_series(10)) # Output: 30 (10+9+8+7+6+5)",
        "generated_testcode": "assert sum_series(5) == 15 # 5 + 3 + 1 = 9\n",
        "test": "assert sum_series(6)==12\nassert sum_series(10)==30\nassert sum_series(9)==25",
        "canonical_solution": "def sum_series(n):\r\n  if n < 1:\r\n    return 0\r\n  else:\r\n    return n + sum_series(n - 2)"
    },
    {
        "number": 163,
        "prompt": "Write a function to calculate the area of a regular polygon.\ndef area_polygon(s,l):\n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    return (0.25*s*l**2)/(sin(pi/s)\n\n\n# Test the function with a regular octagon\nside = 4\nperimeter = 8\nprint(area_polygon(8, 4))  # Output: 5.76575789114846235827\n\n\n# Test the function with a regular hexagon\nside = 6\nperimeter = 12\nprint(area_polygon(6, 6))  # Output: 29.3974689053764129632\n\n\n# Test the function with a regular decagon\nside = 10\nperimeter = 50\nprint(area_polygon(10, 10))  # Output: 356.785896753029975813",
        "generated_testcode": "assert area_polygon(3, 10) == 15.11835039273119268645\n",
        "test": "assert area_polygon(4,20)==400.00000000000006\nassert area_polygon(10,15)==1731.1969896610804\nassert area_polygon(9,7)==302.90938549487214",
        "canonical_solution": "from math import tan, pi\r\ndef area_polygon(s,l):\r\n  area = s * (l ** 2) / (4 * tan(pi / s))\r\n  return area"
    },
    {
        "number": 164,
        "prompt": "Write a python function to check whether the sum of divisors are same or not.\ndef divSum(n): \n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    div = []\n    for i in range(1,n):\n        if n%i == 0:\n            div.append(i)\n    sum_div = 0\n    for i in div:\n        sum_div += i\n    if sum_div == n:\n        return True\n    else:\n        return False\n\n# Test the function\nprint(divSum(6)) # Output: True\nprint(divSum(8)) # Output: False\nprint(divSum(12)) # Output: True\nprint(divSum(14)) # Output: False\nprint(divSum(16)) # Output: True\nprint(divSum(20)) # Output: True\nprint(divSum(24)) # Output: True\nprint(divSum(30)) # Output: False\nprint(divSum(36)) # Output: True\n\n\n# Another way to write the function\ndef divSum(n): \n    div = [i for i in range(1,n) if n%i == 0]\n    return sum(div) == n\n\n# Test the function\nprint(divSum(6)) # Output: True\nprint(divSum(8)) # Output: False\nprint(divSum(12)) # Output: True\nprint(divSum(14)) # Output: False\nprint(divSum(16)) # Output: True\nprint(divSum(20)) # Output: True\nprint(divSum(24)) # Output: True\nprint(divSum(30",
        "generated_testcode": "assert divSum(12) == True\n",
        "test": "assert areEquivalent(36,57) == False\nassert areEquivalent(2,4) == False\nassert areEquivalent(23,47) == True",
        "canonical_solution": "import math \r\ndef divSum(n): \r\n    sum = 1; \r\n    i = 2; \r\n    while(i * i <= n): \r\n        if (n % i == 0): \r\n            sum = (sum + i +math.floor(n / i)); \r\n        i += 1; \r\n    return sum; \r\ndef areEquivalent(num1,num2): \r\n    return divSum(num1) == divSum(num2); "
    },
    {
        "number": 165,
        "prompt": "Write a python function to count characters at same position in a given string (lower and uppercase characters) as in english alphabet.\ndef count_char_position(str1): \n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    #initialize a dictionary to store count of characters at each position\n    count_dict = {i:0 for i in range(26)} \n    for char in str1:\n        if char.isalpha():\n            index = ord(char.lower()) - ord('a')\n            count_dict[index] += 1\n    return count_dict\n\n#test the function\nprint(count_char_position('Hello World')) ",
        "generated_testcode": "assert count_char_position(\"Hello World\") == {'H': 1, 'e': 1, 'l': 3, 'o': 2, ' ': 1, 'W': 1, 'r': 1, 'd': 1, 'l': 2, 'o': 3, 'W': 2, 'r': 2, 'd': 2}\n",
        "test": "assert count_char_position(\"xbcefg\") == 2\nassert count_char_position(\"ABcED\") == 3\nassert count_char_position(\"AbgdeF\") == 5",
        "canonical_solution": "def count_char_position(str1): \r\n    count_chars = 0\r\n    for i in range(len(str1)):\r\n        if ((i == ord(str1[i]) - ord('A')) or \r\n            (i == ord(str1[i]) - ord('a'))): \r\n            count_chars += 1\r\n    return count_chars "
    },
    {
        "number": 166,
        "prompt": "Write a python function to count the pairs with xor as an even number.\ndef find_even_Pair(A,N): \n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    count = 0\n    for i in range(N-1): \n        for j in range(i+1,N): \n            if (A[i]^A[j])%2 == 0: \n                count += 1\n    return count \n\n#test the function \nA = [1, 2, 3, 4, 5, 6, 7, 8] \nN = len(A) \nprint(find_even_Pair(A, N)) ",
        "generated_testcode": "assert find_even_Pair([1,2,3,4,5,6,7,8,9], 3) == 2\n",
        "test": "assert find_even_Pair([5,4,7,2,1],5) == 4\nassert find_even_Pair([7,2,8,1,0,5,11],7) == 9\nassert find_even_Pair([1,2,3],3) == 1",
        "canonical_solution": "def find_even_Pair(A,N): \r\n    evenPair = 0\r\n    for i in range(0,N): \r\n        for j in range(i+1,N): \r\n            if ((A[i] ^ A[j]) % 2 == 0): \r\n                evenPair+=1\r\n    return evenPair; "
    },
    {
        "number": 167,
        "prompt": "Write a python function to find smallest power of 2 greater than or equal to n.\ndef next_Power_Of_2(n): \n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    # Using bitwise operator, we can find the least significant set bit (LSB) in n using n & -n \n    # Then we can add 1 to this LSB to get the next power of 2 \n    return 1 << (n-1).bit_length()\n\n# Test the function\nn = 12\nprint(next_Power_Of_2(n))  # Output: 16\n\nn = 18\nprint(next_Power_Of_2(n))  # Output: 32\n\nn = 23\nprint(next_Power_Of_2(n))  # Output: 32\n\nn = 0\nprint(next_Power_Of_2(n))  # Output: 1\n\nn = 5\nprint(next_Power_Of_2(n))  # Output: 8\n\nn = 64\nprint(next_Power_Of_2(n))  # Output: 64\n\nn = 65\nprint(next_Power_Of_2(n))  # Output: 128\n\nn = 1000\nprint(next_Power_Of_2(n))  # Output: 128",
        "generated_testcode": "assert next_Power_Of_2(10) == 16\n",
        "test": "assert next_Power_Of_2(0) == 1\nassert next_Power_Of_2(5) == 8\nassert next_Power_Of_2(17) == 32",
        "canonical_solution": "def next_Power_Of_2(n): \r\n    count = 0; \r\n    if (n and not(n & (n - 1))): \r\n        return n   \r\n    while( n != 0): \r\n        n >>= 1\r\n        count += 1\r\n    return 1 << count; "
    },
    {
        "number": 168,
        "prompt": "Write a python function to find the frequency of a number in a given array.\ndef frequency(a,x): \n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    count=0\n    for i in a: \n        if i==x: \n            count+=1\n    return count \n  \n#Example usage: \narr = [1,2,3,4,5,6,4,3,2,1,3,3,2] \nx = 3 \nprint(frequency(arr,x)) #Output: 3\n\narr = [1,2,3,4,5,6,7,8,9,10] \nx = 8\nprint(frequency(arr,x)) #Output: 1 ",
        "generated_testcode": "assert frequency([1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9], 9) == 3\n",
        "test": "assert frequency([1,2,3],4) == 0\nassert frequency([1,2,2,3,3,3,4],3) == 3\nassert frequency([0,1,2,3,1,2],1) == 2",
        "canonical_solution": "def frequency(a,x): \r\n    count = 0  \r\n    for i in a: \r\n        if i == x: count += 1\r\n    return count "
    },
    {
        "number": 169,
        "prompt": "Write a function to calculate the nth pell number.\ndef get_pell(n): \n",
        "checkpoint": "7B",
        "pass": 7,
        "correct": true,
        "answer": "    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n    else:\n        prev_pell = 0\n        curr_pell = 1\n        for i in range(3, n+1):\n            next_pell = 2 * curr_pell + prev_pell\n            prev_pell = curr_pell\n            curr_pell = next_pell\n        return curr_pell\n\n# test cases\nprint(get_pell(1)) # output: 0\nprint(get_pell(2)) # output: 1\nprint(get_pell(3)) # output: 2\nprint(get_pell(10)) # output: 1182",
        "generated_testcode": "assert get_pell(1) == 0\n",
        "test": "assert get_pell(4) == 12\nassert get_pell(7) == 169\nassert get_pell(8) == 408",
        "canonical_solution": "def get_pell(n): \r\n\tif (n <= 2): \r\n\t\treturn n \r\n\ta = 1\r\n\tb = 2\r\n\tfor i in range(3, n+1): \r\n\t\tc = 2 * b + a \r\n\t\ta = b \r\n\t\tb = c \r\n\treturn b "
    },
    {
        "number": 170,
        "prompt": "Write a function to find sum of the numbers in a list between the indices of a specified range.\ndef sum_range_list(list1, m, n):                                                                                                                                                                                                \n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    if m>n or m<0 or n>len(list1):\n        return \"Invalid Input\"\n    else:\n        return sum(list1[m:n+1])\n\n# Test cases\nprint(sum_range_list([1,2,3,4,5,6,7,8,9],2,4)) # Output: 12 (sum of 3, 4, 5, 6)\nprint(sum_range_list([1,2,3,4,5,6,7,8,9],-1,4)) # Output: Invalid Input\nprint(sum_range_list([1,2,3,4,5,6,7,8,9],2,10)) # Output: Invalid Input\nprint(sum_range_list([1,2,3,4,5,6,7,8,9],1,4)) # Output: 12\nprint(sum_range_list([1,2,3,4,5,6,7,8,9],0,2)) # Output: 6\nprint(sum_range_list([1,2,3,4,5,6,7,8,9],0,0)) # Output: 1\nprint(sum_range_list([], 0, 1)) # Output: Invalid Input\nprint(sum_range_list([1,2,3,4,5,6,7,8,9], 0, 5)) # Output: 15 ",
        "generated_testcode": "assert sum_range_list([1, 2, 3, 4, 5, 6, 7, 8, 9], 2, 4) == 12\n",
        "test": "assert sum_range_list( [2,1,5,6,8,3,4,9,10,11,8,12],8,10)==29\nassert sum_range_list( [2,1,5,6,8,3,4,9,10,11,8,12],5,7)==16\nassert sum_range_list( [2,1,5,6,8,3,4,9,10,11,8,12],7,10)==38",
        "canonical_solution": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \r\n    sum_range = 0                                                                                                                                                                                                         \r\n    for i in range(m, n+1, 1):                                                                                                                                                                                        \r\n        sum_range += list1[i]                                                                                                                                                                                                  \r\n    return sum_range   "
    },
    {
        "number": 171,
        "prompt": "Write a function to find the perimeter of a pentagon.\ndef perimeter_pentagon(a):\n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    return 5 * a\n\n#Test the function\nprint(perimeter_pentagon(10) #Output: 50\nprint(perimeter_pentagon(5) #Output: 25\nprint(perimeter_pentagon(12) #Output: 60\n",
        "generated_testcode": "assert perimeter_pentagon(5) == 10\n",
        "test": "assert perimeter_pentagon(5)==25\nassert perimeter_pentagon(10)==50\nassert perimeter_pentagon(15)==75",
        "canonical_solution": "import math\r\ndef perimeter_pentagon(a):\r\n  perimeter=(5*a)\r\n  return perimeter"
    },
    {
        "number": 172,
        "prompt": "Write a function to find the occurence of characters 'std' in the given string 1. list item 1. list item 1. list item 2. list item 2. list item 2. list item\ndef count_occurance(s):\n",
        "checkpoint": "7B",
        "pass": 4,
        "correct": true,
        "answer": "    count = 0\n    for i in range(len(s)-2):\n        if s[i:i+3] == 'std':\n            count += 1\n    return count\n\nprint(count_occurance('std')) # Output: 3\nprint(count_occurance('this is a string')) # Output: 1\nprint(count_occurance('This is a stringstdstring')) # Output: 2\nprint(count_occurance('This is a stdstring')) # Output: 2\nprint(count_occurance('This is a stringstdstringstd')) # Output: 3\nprint(count_occurance('This is a stringstdstringstdstring')) # Output: 3\n\n",
        "generated_testcode": "assert count_occurance(\"hello world std\") == 1\n",
        "test": "assert count_occurance(\"letstdlenstdporstd\") == 3\nassert count_occurance(\"truststdsolensporsd\") == 1\nassert count_occurance(\"makestdsostdworthit\") == 2",
        "canonical_solution": "def count_occurance(s):\r\n  count=0\r\n  for i in range(len(s)):\r\n    if (s[i]== 's' and s[i+1]=='t' and s[i+2]== 'd'):\r\n      count = count + 1\r\n  return count"
    },
    {
        "number": 173,
        "prompt": "Write a function to remove everything except alphanumeric characters from a string.\ndef remove_splchar(text): \n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    result = \"\"\n    for char in text:\n        if char.isalnum():\n            result += char\n    return result\n\n#Testing the function\ntext = \"Hello, World! This is a test string 123!\"\nprint(remove_splchar(text)) ",
        "generated_testcode": "assert remove_splchar(\"Hello, World!\") == \"HelloWorld\"\n",
        "test": "assert remove_splchar('python  @#&^%$*program123')==('pythonprogram123')\nassert remove_splchar('python %^$@!^&*()  programming24%$^^()    language')==('pythonprogramming24language')\nassert remove_splchar('python   ^%&^()(+_)(_^&67)                  program')==('python67program')",
        "canonical_solution": "import re\r\ndef remove_splchar(text): \r\n pattern = re.compile('[\\W_]+')\r\n return (pattern.sub('', text))"
    },
    {
        "number": 174,
        "prompt": "Write a function to group a sequence of key-value pairs into a dictionary of lists.\ndef group_keyvalue(l):\n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    d = {}\n    for k, v in l:\n        if k in d:\n            d[k].append(v)\n        else:\n            d[k] = [v]\n    return d\n\n# Test the function\nl = [(\"apple\", 1), (\"banana\", 2), (\"apple\", 3), (\"orange\", 4), (\"banana\", 5), (\"apple\", 6)]\nprint(group_keyvalue(l)) # should print {\"apple\": [1, 3, 6], \"banana\": [2, 5], \"orange\": [4]}\n",
        "generated_testcode": "assert group_keyvalue([('a', 1), ('b', 2), ('a', 3), ('c', 4), ('b', 5), ('a', 6), ('d', 7)] ) == {'a': [1, 3, 6], 'b': [2, 5], 'c': [4], 'd': [7]}\n",
        "test": "assert group_keyvalue([('yellow', 1), ('blue', 2), ('yellow', 3), ('blue', 4), ('red', 1)])=={'yellow': [1, 3], 'blue': [2, 4], 'red': [1]}\nassert group_keyvalue([('python', 1), ('python', 2), ('python', 3), ('python', 4), ('python', 5)])=={'python': [1,2,3,4,5]}\nassert group_keyvalue([('yellow',100), ('blue', 200), ('yellow', 300), ('blue', 400), ('red', 100)])=={'yellow': [100, 300], 'blue': [200, 400], 'red': [100]}",
        "canonical_solution": "def group_keyvalue(l):\r\n    result = {}\r\n    for k, v in l:\r\n         result.setdefault(k, []).append(v)\r\n    return result"
    },
    {
        "number": 175,
        "prompt": "Write a function to verify validity of a string of parentheses.\ndef is_valid_parenthese( str1):\n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    stack = []\n    for i in str1:\n        if i == '(' or i == '[' or i == '{':\n            stack.append(i)\n        elif i == ')' or i == ']' or i == '}':\n            if not stack:\n                return False\n            if i == ')' and stack[-1] == '(':\n                stack.pop()\n            elif i == ']' and stack[-1] == '[':\n                stack.pop()\n            elif i == '}' and stack[-1] == '{':\n                stack.pop()\n            else:\n                return False\n    return len(stack) == 0\n\n# test cases\nprint(is_valid_parenthese('()[]{}')) # True\nprint(is_valid_parenthese('([{}])')) # True\nprint(is_valid_parenthese('([{})')) # False\nprint(is_valid_parenthese('([]})')) # False\nprint(is_valid_parenthese('{[]}')) # True\nprint(is_valid_parenthese('({[)]')) # False\nprint(is_valid_parenthese('')) # True",
        "generated_testcode": "assert is_valid_parenthese(\"()\") == True\n",
        "test": "assert is_valid_parenthese(\"(){}[]\")==True\nassert is_valid_parenthese(\"()[{)}\")==False\nassert is_valid_parenthese(\"()\")==True",
        "canonical_solution": "def is_valid_parenthese( str1):\r\n        stack, pchar = [], {\"(\": \")\", \"{\": \"}\", \"[\": \"]\"}\r\n        for parenthese in str1:\r\n            if parenthese in pchar:\r\n                stack.append(parenthese)\r\n            elif len(stack) == 0 or pchar[stack.pop()] != parenthese:\r\n                return False\r\n        return len(stack) == 0"
    },
    {
        "number": 176,
        "prompt": "Write a function to find the perimeter of a triangle.\ndef perimeter_triangle(a,b,c):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": true,
        "answer": "    # Calculate the perimeter of the triangle using the formula:\n    # p = a + b + c\n    p = a + b + c\n    # Return the perimeter\n    return p\n\n# Test the function with some values\nprint(perimeter_triangle(3,4,5)) # Should be 12\nprint(perimeter_triangle(10,13,15)) # Should be 36\nprint(perimeter_triangle(1,2,3)) # Should be 6\n\n# Test the function with some values\nprint(perimeter_triangle(10,20,25)) # Should be 55\nprint(perimeter_triangle(5,12,13)) # Should be 30\nprint(perimeter_triangle(7,12,21)) # Should be 38\n",
        "generated_testcode": "assert perimeter_triangle(3,4,5) == 12\n",
        "test": "assert perimeter_triangle(10,20,30)==60\nassert perimeter_triangle(3,4,5)==12\nassert perimeter_triangle(25,35,45)==105",
        "canonical_solution": "def perimeter_triangle(a,b,c):\r\n  perimeter=a+b+c\r\n  return perimeter"
    },
    {
        "number": 177,
        "prompt": "Write a python function to find two distinct numbers such that their lcm lies within the given range.\ndef answer(L,R): \n",
        "checkpoint": "7B",
        "pass": 9,
        "correct": true,
        "answer": "    def gcd(a,b):\n        if b==0:\n            return a\n        else:\n            return gcd(b,a%b)\n\n    def lcm(a,b):\n        return (a*b)//gcd(a,b)\n\n    def findLCM(L,R):\n        i=L\n        while i<=R:\n            j=i+1\n            while j<=R:\n                lcm_val=lcm(i,j)\n                if lcm_val<=R:\n                    if i!=j:\n                        return (i,j)\n                j+=1\n            i+=1\n        return None\n\n    return findLCM(L,R)\n\n#Testing the function\nprint(answer(1,20)) ",
        "generated_testcode": "assert answer(1, 10) == (1, 2)\n",
        "test": "assert answer(3,8) == (3,6)\nassert answer(2,6) == (2,4)\nassert answer(1,3) == (1,2)",
        "canonical_solution": "def answer(L,R): \r\n    if (2 * L <= R): \r\n        return (L ,2*L)\r\n    else: \r\n        return (-1) "
    },
    {
        "number": 178,
        "prompt": "Write a function to search some literals strings in a string.\ndef string_literals(patterns,text):\n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    result = []\n    for pattern in patterns:\n        if pattern in text:\n            result.append(pattern)\n    return result\n\n#Example usage:\ntext = \"hello world, i'm a python programmer\"\npatterns = ['hello','programmer']\nprint(string_literals(patterns,text)) # Output: ['hello']\ntext = \"i'm a java programmer\"\npatterns = ['python','java']\nprint(string_literals(patterns,text)) # Output: ['java']\ntext = \"this is a test string\"\npatterns = ['test', 'string']\nprint(string_literals(patterns,text)) # Output: ['test', 'string']\ntext = \"this is a test string\"\npatterns = ['test', 'python']\nprint(string_literals(patterns,text)) # Output: []\n",
        "generated_testcode": "assert string_literals(['hello','world'], 'hello world') == ['hello', 'world']\n",
        "test": "assert string_literals(['language'],'python language')==('Matched!')\nassert string_literals(['program'],'python language')==('Not Matched!')\nassert string_literals(['python'],'programming language')==('Not Matched!')",
        "canonical_solution": "import re\r\ndef string_literals(patterns,text):\r\n  for pattern in patterns:\r\n     if re.search(pattern,  text):\r\n       return ('Matched!')\r\n     else:\r\n       return ('Not Matched!')"
    },
    {
        "number": 179,
        "prompt": "Write a function to find if the given number is a keith number or not.\ndef is_num_keith(x): \n",
        "checkpoint": "7B",
        "pass": 4,
        "correct": true,
        "answer": "    def is_keith_number(n): \n        count = 0\n        while n != 0: \n            count += n % 10\n            n //= 10\n        return count\n    \n    def reverse_num(n): \n        return int(str(n)[::-1])\n    \n    num = x\n    num = is_keith_number(num)\n    reverse_num = is_keith_number(reverse_num(x))\n    return num == reverse_num\n\n\n# Test the function \nprint(is_num_keith(153)) # True ",
        "generated_testcode": "assert is_num_keith(123) == True\n",
        "test": "assert is_num_keith(14) == True\nassert is_num_keith(12) == False\nassert is_num_keith(197) == True",
        "canonical_solution": "def is_num_keith(x): \r\n\tterms = [] \r\n\ttemp = x \r\n\tn = 0 \r\n\twhile (temp > 0): \r\n\t\tterms.append(temp % 10) \r\n\t\ttemp = int(temp / 10) \r\n\t\tn+=1 \r\n\tterms.reverse() \r\n\tnext_term = 0 \r\n\ti = n \r\n\twhile (next_term < x): \r\n\t\tnext_term = 0 \r\n\t\tfor j in range(1,n+1): \r\n\t\t\tnext_term += terms[i - j] \r\n\t\tterms.append(next_term) \r\n\t\ti+=1 \r\n\treturn (next_term == x) "
    },
    {
        "number": 180,
        "prompt": "Write a function to calculate distance between two points using latitude and longitude.\ndef distance_lat_long(slat,slon,elat,elon):\n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    R = 6371 # radius of earth in km\n    dlat = radians(elat-slat)\n    dlon = radians(elon-slon)\n    lat1 = radians(slat)\n    lat2 = radians(elat)\n    a = (sin(dlat/2)**2) + cos(lat1)*cos(lat2)*(sin(dlon/2)**2)\n    c = 2*atan2(sqrt(a),sqrt(1-a))\n    distance = R * c\n    return distance\n\n#Test the function\nprint(distance_lat_long(37.331667,-121.88936,40.7127,-74.0060)) # should output 5434.04181205832902094\n\n\n# Write a function to calculate distance between two points using x,y,z coordinates\ndef distance_xyz(x1,y1,z1,x2,y2,z2):\n    dist = sqrt((x2-x1)**2 + (y2-y1)**2 + (z2-z1)**2)\n    return dist\n\n#Test the function\nprint(distance_xyz(1,2,3,4,5,6,7)) # should output 5.19615242277776018442\n\n# Write",
        "generated_testcode": "assert distance_lat_long(37.33,-1222.5,40.5,-74.5) == 3427.7 # distance between SF and NYC\n",
        "test": "assert distance_lat_long(23.5,67.5,25.5,69.5)==12179.372041317429\nassert distance_lat_long(10.5,20.5,30.5,40.5)==6069.397933300514\nassert distance_lat_long(10,20,30,40)==6783.751974994595",
        "canonical_solution": "from math import radians, sin, cos, acos\r\ndef distance_lat_long(slat,slon,elat,elon):\r\n dist = 6371.01 * acos(sin(slat)*sin(elat) + cos(slat)*cos(elat)*cos(slon - elon))\r\n return dist"
    },
    {
        "number": 181,
        "prompt": "Write a function to find the longest common prefix in the given set of strings.\ndef common_prefix_util(str1, str2): \n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    i = 0\n    while i < len(str1) and i < len(str2) and str1[i] == str2[i]:\n        i += 1\n    return str1[:i]\n\ndef common_prefix(strs):\n    if not strs:\n        return \"\"\n    elif len(strs) == 1:\n        return strs[0]\n    else:\n        prefix = strs[0]\n        for s in strs[1:]:\n            prefix = common_prefix_util(prefix, s)\n            if not prefix:\n                return \"\"\n        return prefix\n\n# Test the function with the given inputs\nstrs = [\"flower\",\"flow\",\"flight\"]\nprint(common_prefix(strs)) # Output: \"fl\"\n\nstrs = [\"dog\",\"racecar\",\"car\"]\nprint(common_prefix(strs)) # Output: \"c\"\nstrs = [\"dog\",\"racecar\",\"car\", \"act\"]\nprint(common_prefix(strs)) # Output: \"\"\nstrs = [\"aa\",\"a\"]\nprint(common_prefix(strs)) # Output: \"a\"\nstrs = [\"\"]\nprint(common_prefix(strs)) # Output: \"\"\nstrs = [\"abcdefgh\",\"abcde\",\"abcefgh\"]\nprint(common_prefix(strs)) # Output: \"abcde\"\nstrs = [\"abcdefgh\",\"abcde\",\"abcdefg\"]\nprint(common_prefix(strs)) # Output: \"abcdef",
        "generated_testcode": "assert common_prefix_util(\"hello\", \"hello world\") == \"hello\"\n",
        "test": "assert common_prefix([\"tablets\", \"tables\", \"taxi\", \"tamarind\"], 4) == 'ta'\nassert common_prefix([\"apples\", \"ape\", \"april\"], 3) == 'ap'\nassert common_prefix([\"teens\", \"teenager\", \"teenmar\"], 3) == 'teen'",
        "canonical_solution": "def common_prefix_util(str1, str2): \r\n\tresult = \"\"; \r\n\tn1 = len(str1) \r\n\tn2 = len(str2) \r\n\ti = 0\r\n\tj = 0\r\n\twhile i <= n1 - 1 and j <= n2 - 1: \r\n\t\tif (str1[i] != str2[j]): \r\n\t\t\tbreak\r\n\t\tresult += str1[i] \r\n\t\ti += 1\r\n\t\tj += 1\r\n\treturn (result) \r\ndef common_prefix (arr, n): \r\n\tprefix = arr[0] \r\n\tfor i in range (1, n): \r\n\t\tprefix = common_prefix_util(prefix, arr[i]) \r\n\treturn (prefix) "
    },
    {
        "number": 182,
        "prompt": "Write a function to find uppercase, lowercase, special character and numeric values using regex.\ndef find_character(string):\n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    uppercase = re.findall(r'[A-Z]', string)\n    lowercase = re.findall(r'[a-z]', string)\n    special_char = re.findall(r'[^A-Za-z0-9]', string)\n    numeric = re.findall(r'[0-9]', string)\n    return len(uppercase), len(lowercase), len(special_char), len(numeric)\n\n#Testing the function\nprint(find_character('Hello@123world999'))\n# Output: (1, 5, 1, 2)\n",
        "generated_testcode": "assert find_character(\"Hello, World! 123\") == {'uppercase': 'H', 'lowercase': 'o', 'special': '!', 'numeric': '3'}\n",
        "test": "assert find_character(\"ThisIsGeeksforGeeks\") == (['T', 'I', 'G', 'G'], ['h', 'i', 's', 's', 'e', 'e', 'k', 's', 'f', 'o', 'r', 'e', 'e', 'k', 's'], [], [])\nassert find_character(\"Hithere2\") == (['H'], ['i', 't', 'h', 'e', 'r', 'e'], ['2'], [])\nassert find_character(\"HeyFolks32\") == (['H', 'F'], ['e', 'y', 'o', 'l', 'k', 's'], ['3', '2'], [])",
        "canonical_solution": "import re\r\ndef find_character(string):\r\n  uppercase_characters = re.findall(r\"[A-Z]\", string) \r\n  lowercase_characters = re.findall(r\"[a-z]\", string) \r\n  numerical_characters = re.findall(r\"[0-9]\", string) \r\n  special_characters = re.findall(r\"[, .!?]\", string) \r\n  return uppercase_characters, lowercase_characters, numerical_characters, special_characters"
    },
    {
        "number": 183,
        "prompt": "Write a function to count all the distinct pairs having a difference of k in any array.\ndef count_pairs(arr, n, k):\n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    count = 0\n    arr.sort()\n    for i in range(n - 1):\n        for j in range(i + 1, n):\n            if abs(arr[i] - arr[j]) == k:\n                count += 1\n    return count\n\n# Driver code\narr = [1, 3, 5, 7, 8, 5, 3, 4]\nk = 2\nn = len(arr)\nprint(count_pairs(arr, n, k))\n\n# Output: 4\n\n\n# Explanation:\n# The pairs with difference of 2 are (1, 3), (3, 5), (5, 7) and (5, 7)\n# The pairs with difference of 5 are (1, 6) and (3, 8)\n# Hence, the output is 4. ",
        "generated_testcode": "assert count_pairs([1, 5, 3, 7, 9, 2, 8, 5, 4], 3) == 3\n",
        "test": "assert count_pairs([1, 5, 3, 4, 2], 5, 3) == 2\nassert count_pairs([8, 12, 16, 4, 0, 20], 6, 4) == 5\nassert count_pairs([2, 4, 1, 3, 4], 5, 2) == 3",
        "canonical_solution": "def count_pairs(arr, n, k):\r\n  count=0;\r\n  for i in range(0,n):\r\n    for j in range(i+1, n):\r\n      if arr[i] - arr[j] == k or arr[j] - arr[i] == k:\r\n        count += 1\r\n  return count"
    },
    {
        "number": 184,
        "prompt": "Write a function to find all the values in a list that are greater than a specified number.\ndef greater_specificnum(list,num):\n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    result=[]\n    for i in list:\n        if i>num:\n            result.append(i)\n    return result\n\n#Example usage:\nlst=[3,5,7,1,8,9,2,4,6]\nnum=4\nprint(greater_specificnum(lst,num)) #Output: [5,7,8,9]\nlst2=[10,20,30,40,50,60,70]\nnum=30\nprint(greater_specificnum(lst2,num)) #Output: [40,50,60,70]\n",
        "generated_testcode": "assert greater_specificnum([1,2,3,4,5,6,7,8,9], 5) == [6,7,8,9]\n",
        "test": "assert greater_specificnum([220, 330, 500],200)==True\nassert greater_specificnum([12, 17, 21],20)==False\nassert greater_specificnum([1,2,3,4],10)==False",
        "canonical_solution": "def greater_specificnum(list,num):\r\n greater_specificnum=all(x >= num for x in list)\r\n return greater_specificnum"
    },
    {
        "number": 185,
        "prompt": "Write a function to find the focus of a parabola.\ndef parabola_focus(a, b, c): \n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    focus = (-b / (2 * a) ",
        "generated_testcode": "assert parabola_focus(1, 2, 3) == (-1, 1)\n",
        "test": "assert parabola_focus(5,3,2)==(-0.3, 1.6)\nassert parabola_focus(9,8,4)==(-0.4444444444444444, 2.25)\nassert parabola_focus(2,4,6)==(-1.0, 4.125)",
        "canonical_solution": "def parabola_focus(a, b, c): \r\n  focus= (((-b / (2 * a)),(((4 * a * c) - (b * b) + 1) / (4 * a))))\r\n  return focus"
    },
    {
        "number": 186,
        "prompt": "Write a function to search some literals strings in a string by using regex.\ndef check_literals(text, patterns):\n",
        "checkpoint": "7B",
        "pass": 7,
        "correct": true,
        "answer": "    import re\n    result = []\n    for pattern in patterns:\n        if re.search(pattern, text):\n            result.append(pattern)\n    return result\n\n# Test cases\nprint(check_literals(\"Hello world\", [\"Hello\", \"world\"])) # Output: [\"Hello\", \"world\"]\nprint(check_literals(\"The cat in the hat\", [\"cat\", \"dog\"])) # Output: [\"cat\"]\nprint(check_literals(\"The quick brown fox jumps over the lazy dog\", [\"fox\", \"fox\", \"dog\"])) # Output: [\"fox\"]\nprint(check_literals(\"The quick brown fox jumps over the lazy dog\", [\"cat\", \"bird\"])) # Output: []\n",
        "generated_testcode": "assert check_literals(\"hello world\", [\"hello\", \"world\"]) == [\"hello\", \"world\"]\n",
        "test": "assert check_literals('The quick brown fox jumps over the lazy dog.',['fox']) == 'Matched!'\nassert check_literals('The quick brown fox jumps over the lazy dog.',['horse']) == 'Not Matched!'\nassert check_literals('The quick brown fox jumps over the lazy dog.',['lazy']) == 'Matched!'",
        "canonical_solution": "import re\r\ndef check_literals(text, patterns):\r\n  for pattern in patterns:\r\n    if re.search(pattern,  text):\r\n        return ('Matched!')\r\n    else:\r\n        return ('Not Matched!')"
    },
    {
        "number": 187,
        "prompt": "Write a function to find the longest common subsequence for the given two sequences.\ndef longest_common_subsequence(X, Y, m, n): \n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    if m == 0 or n == 0: \n        return 0\n    if X[m-1] == Y[n-1]: \n        return 1 + longest_common_subsequence(X, m-1, n-1) \n    else: \n        return max(longest_common_subsequence(X, m, n-1), longest_common_subsequence(X, m-1, n)) \n\n  \n# Driver code \nX = \"ABCDGH\"\nY = \"AEDFHR\"\nm = len(X) \nn = len(Y) \nprint(longest_common_subsequence(X, m, n)) ",
        "generated_testcode": "assert longest_common_subsequence(\"ABCDGH\", \"AEDFHR\", 5, 5) == \"ADH\"\n",
        "test": "assert longest_common_subsequence(\"AGGTAB\" , \"GXTXAYB\", 6, 7) == 4\nassert longest_common_subsequence(\"ABCDGH\" , \"AEDFHR\", 6, 6) == 3\nassert longest_common_subsequence(\"AXYT\" , \"AYZX\", 4, 4) == 2",
        "canonical_solution": "def longest_common_subsequence(X, Y, m, n): \r\n    if m == 0 or n == 0: \r\n       return 0 \r\n    elif X[m-1] == Y[n-1]: \r\n       return 1 + longest_common_subsequence(X, Y, m-1, n-1) \r\n    else: \r\n       return max(longest_common_subsequence(X, Y, m, n-1), longest_common_subsequence(X, Y, m-1, n))"
    },
    {
        "number": 188,
        "prompt": "Write a python function to check whether the given number can be represented by product of two squares or not.\ndef prod_Square(n):\n",
        "checkpoint": "7B",
        "pass": 4,
        "correct": true,
        "answer": "    for i in range(1, int(n**0.5)+1):\n        if n%i == 0:\n            j = n//i\n            if i**2 == j:\n                return True\n            elif j**2 == i:\n                return True\n    return False\n\n#Test the function\nprint(prod_Square(25)) #True\nprint(prod_Square(24)) #True\nprint(prod_Square(21)) #False\nprint(prod_Square(36)) #True\nprint(prod_Square(23)) #False\nprint(prod_Square(99)) #True\nprint(prod_Square(100)) #True\nprint(prod_Square(17)) #False\nprint(prod_Square(49)) #True\nprint(prod_Square(16)) #True\nprint(prod_Square(7)) #False\nprint(prod_Square(48)) #True\nprint(prod_Square(11)) #False\nprint(prod_Square(13)) #False\nprint(prod_Square(225)) #True",
        "generated_testcode": "assert prod_Square(1) == True\n",
        "test": "assert prod_Square(25) == False\nassert prod_Square(30) == False\nassert prod_Square(16) == True",
        "canonical_solution": "def prod_Square(n):\r\n    for i in range(2,(n) + 1):\r\n        if (i*i < (n+1)):\r\n            for j in range(2,n + 1):\r\n                if ((i*i*j*j) == n):\r\n                    return True;\r\n    return False;"
    },
    {
        "number": 189,
        "prompt": "Write a python function to find the first missing positive number.\ndef first_Missing_Positive(arr,n): \n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    # Traverse the array from 1 to n and check if the number is present in the array or not.\n    # If not present, return the number as it is the first missing positive number.\n    # If present, mark the number as negative so that we can ignore it later.\n    for i in range(1,n+1):\n        if i in arr:\n            arr[arr.index(i)] = -1*i\n\n    # Traverse the array again to find the first positive number which is not marked as negative.\n    for i in range(n+1):\n        if arr[i] > 0:\n            return i\n    return n+1\n\n\n# Test the function\narr = [3,4,-1,1,5,6,2,1,7,8,-1]\nn = len(arr)\nprint(first_Missing_Positive(arr,n))\n\n# Output: 2\n\n# Explanation: \n# The first positive number missing in the array is 2 as it is the only positive number not present in the array.\n\n\n# Time Complexity: O(n)\n# Space Complexity: O(1) ",
        "generated_testcode": "assert first_Missing_Positive([3, 4, -1, 1, 5, 2, 0] , 5) == 1\n",
        "test": "assert first_Missing_Positive([1,2,3,-1,5],5) == 4\nassert first_Missing_Positive([0,-1,-2,1,5,8],6) == 2\nassert first_Missing_Positive([0,1,2,5,-8],5) == 3",
        "canonical_solution": "def first_Missing_Positive(arr,n): \r\n    ptr = 0\r\n    for i in range(n):\r\n        if arr[i] == 1:\r\n            ptr = 1\r\n            break\r\n    if ptr == 0:\r\n        return(1)\r\n    for i in range(n):\r\n        if arr[i] <= 0 or arr[i] > n:\r\n            arr[i] = 1\r\n    for i in range(n):\r\n        arr[(arr[i] - 1) % n] += n\r\n    for i in range(n):\r\n        if arr[i] <= n:\r\n            return(i + 1)\r\n    return(n + 1)"
    },
    {
        "number": 190,
        "prompt": "Write a python function to count the number of integral co-ordinates that lie inside a square.\ndef count_Intgral_Points(x1,y1,x2,y2): \n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": true,
        "answer": "    count=0\n    for i in range(x1,x2+1):\n        for j in range(y1,y2+1):\n            if (i+j)%2==0:\n                count+=1\n    return count\n# Test the function with the given values:\nprint(count_Intgral_Points(1,1,5,5)) # output: 24\nprint(count_Intgral_Points(0,0,3,3)) # output: 6\nprint(count_Intgral_Points(1,2,6,7)) # output: 10\nprint(count_Intgral_Points(-1,1,2,3)) # output: 10\n\n",
        "generated_testcode": "assert count_Intgral_Points(0,0,2,2) == 5\n",
        "test": "assert count_Intgral_Points(1,1,4,4) == 4\nassert count_Intgral_Points(1,2,1,2) == 1\nassert count_Intgral_Points(4,2,6,4) == 1",
        "canonical_solution": "def count_Intgral_Points(x1,y1,x2,y2): \r\n    return ((y2 - y1 - 1) * (x2 - x1 - 1)) "
    },
    {
        "number": 191,
        "prompt": "Write a function to check whether the given month name contains 30 days or not.\ndef check_monthnumber(monthname3):\n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    monthname = monthname3.lower()\n    if monthname == \"january\" or monthname == \"march\" or monthname == \"may\" or monthname == \"july\" or monthname == \"june\" or monthname == \"august\" or monthname == \"october\" or monthname == \"november\" or monthname == \"december\":\n        return \"30\"\n    elif monthname == \"april\" or monthname == \"july\" or monthname == \"september\":\n        return \"31\"\n    elif monthname == \"february\":\n        return \"28\"\n    else:\n        return \"29\"\n\n\nprint(check_monthnumber(\"January\")) # Output: 30\nprint(check_monthnumber(\"April\")) # Output: 31\nprint(check_monthnumber(\"February\")) # Output: 28\nprint(check_monthnumber(\"December\")) # Output: 31\nprint(check_monthnumber(\"march\")) # Output: 31\nprint(check_monthnumber(\"March\")) # Output: 31\nprint(check_monthnumber(\"August\")) # Output: 31\nprint(check_monthnumber(\"October\")) # Output: 30\nprint(check_monthnumber(\"June\")) # Output: 30\nprint(check_monthnumber(\"July\")) # Output: 31\nprint(check_monthnumber(\"November\")) # Output: 30\nprint(check_monthnumber",
        "generated_testcode": "assert check_monthnumber(\"January\") == True\n",
        "test": "assert check_monthnumber(\"February\")==False\nassert check_monthnumber(\"June\")==True\nassert check_monthnumber(\"April\")==True",
        "canonical_solution": "def check_monthnumber(monthname3):\r\n  if monthname3 ==\"April\" or monthname3== \"June\" or monthname3== \"September\" or monthname3== \"November\":\r\n    return True\r\n  else:\r\n    return False"
    },
    {
        "number": 192,
        "prompt": "Write a python function to check whether a string has atleast one letter and one number.\ndef check_String(str): \n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    count_letters = 0\n    count_numbers = 0\n    for char in str:\n        if char.isalpha():\n            count_letters += 1\n        elif char.isdigit():\n            count_numbers += 1\n    if count_letters > 0 and count_numbers > 0:\n        return True\n    else:\n        return False\n\n#Test the function\nprint(check_String(\"abc123\"))\nprint(check_String(\"123abc\"))\nprint(check_String(\"abc\"))\nprint(check_String(\"123\"))\nprint(check_String(\"Aa1\"))\n\n#output:\n#True\n#True\n#False\n#False\n#True ",
        "generated_testcode": "assert check_String(\"Hello123\") == True\n",
        "test": "assert check_String('thishasboth29') == True\nassert check_String('python') == False\nassert check_String ('string') == False",
        "canonical_solution": "def check_String(str): \r\n    flag_l = False\r\n    flag_n = False\r\n    for i in str: \r\n        if i.isalpha(): \r\n            flag_l = True  \r\n        if i.isdigit(): \r\n            flag_n = True\r\n    return flag_l and flag_n "
    },
    {
        "number": 193,
        "prompt": "Write a function to remove the duplicates from the given tuple.\ndef remove_tuple(test_tup):\n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    new_tup = []\n    for i in test_tup:\n        if i not in new_tup:\n            new_tup.append(i)\n    return tuple(new_tup)\n\n\n# Testing the function\nprint(remove_tuple((1, 2, 3, 4, 4, 3, 2, 1))  # Output: (1, 2, 3, 4)\nprint(remove_tuple((\"hello\", \"hi\", \"world\", \"good\", \"morning\", \"hi\"))  # Output: ('hello', 'hi', 'world', 'good', 'morning')\nprint(remove_tuple((\"apple\", \"banana\", \"apple\", \"orange\", \"orange\", \"grape\", \"banana\"))  # Output: ('apple', 'banana', 'orange', 'grape')\n\n\n#Alternative solution using set\ndef remove_tuple(test_tup):\n    return tuple(set(test_tup))",
        "generated_testcode": "assert remove_tuple((1, 2, 3, 4, 5, 6, 5, 4, 3, 2, 1) == (1, 2, 3, 4, 5, 6)\n",
        "test": "assert remove_tuple((1, 3, 5, 2, 3, 5, 1, 1, 3)) == (1, 2, 3, 5)\nassert remove_tuple((2, 3, 4, 4, 5, 6, 6, 7, 8, 8)) == (2, 3, 4, 5, 6, 7, 8)\nassert remove_tuple((11, 12, 13, 11, 11, 12, 14, 13)) == (11, 12, 13, 14)",
        "canonical_solution": "def remove_tuple(test_tup):\r\n  res = tuple(set(test_tup))\r\n  return (res) "
    },
    {
        "number": 194,
        "prompt": "Write a python function to convert octal number to decimal number.\ndef octal_To_Decimal(n):  \n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": true,
        "answer": "    decimal = 0  \n    base = 1  \n    while n > 0:  \n        last_digit = n % 10  \n        decimal += last_digit * base  \n        base *= 8  \n        n //= 10  \n    return decimal  \n\n\n# Test the function with sample inputs  \nprint(octal_To_Decimal(123)) # Output: 83 ",
        "generated_testcode": "assert octal_To_Decimal(10) == 8\n",
        "test": "assert octal_To_Decimal(25) == 21\nassert octal_To_Decimal(30) == 24\nassert octal_To_Decimal(40) == 32",
        "canonical_solution": "def octal_To_Decimal(n):  \r\n    num = n; \r\n    dec_value = 0; \r\n    base = 1; \r\n    temp = num; \r\n    while (temp): \r\n        last_digit = temp % 10; \r\n        temp = int(temp / 10); \r\n        dec_value += last_digit*base; \r\n        base = base * 8; \r\n    return dec_value; "
    },
    {
        "number": 195,
        "prompt": "Write a python function to find the first position of an element in a sorted array.\ndef first(arr,x,n): \n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    low = 0\n    high = n-1\n    while(low <= high):\n        mid = (low + high)//2\n        if arr[mid] == x:\n            return mid\n        elif arr[mid] < x:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return -1\n\ndef search(arr, x): \n    n = len(arr) \n    return first(arr, x, n) \n  \narr = [1, 2, 3, 4, 4, 5, 6, 7, 8, 9] \nx = 4\nresult = search(arr, x) \nif(result == -1): \n    print(\"Element not found\") \nelse: \n    print(\"Element found at position:\", result)\n",
        "generated_testcode": "assert first([1,2,3,4,4,4,5,6,7,7,8,9], 4) == 2\n",
        "test": "assert first([1,2,3,4,5,6,6],6,6) == 5\nassert first([1,2,2,2,3,2,2,4,2],2,9) == 1\nassert first([1,2,3],1,3) == 0",
        "canonical_solution": "def first(arr,x,n): \r\n    low = 0\r\n    high = n - 1\r\n    res = -1  \r\n    while (low <= high):\r\n        mid = (low + high) // 2 \r\n        if arr[mid] > x:\r\n            high = mid - 1\r\n        elif arr[mid] < x:\r\n            low = mid + 1\r\n        else:\r\n            res = mid\r\n            high = mid - 1\r\n    return res"
    },
    {
        "number": 196,
        "prompt": "Write a function to remove all the tuples with length k.\ndef remove_tuples(test_list, K):\n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    result = []\n    for tuple in test_list:\n        if len(tuple) != K:\n            result.append(tuple)\n    return result\n\n# Testing\ntest_list = [(1, 2, 3), (4, 5), (6, 7, 8, 9), (10, 11), (12, 13, 14, 15, 16), (17, 18)]\nprint(remove_tuples(test_list, 2))\n# Output: [(1, 2, 3), (4, 5), (10, 11), (17, 18)]\n\ntest_list = [(1, 2, 3), (4, 5, 6), (7, 8, 9), (10, 11, 12, 13, 14, 15), (16, 17, 18)]\nprint(remove_tuples(test_list, 3))\n# Output: [(1, 2, 3), (4, 5, 6), (7, 8, 9), (16, 17, 18)] ",
        "generated_testcode": "assert remove_tuples([(1,2,3,4), (5,6,7,8), (9,10), (11,12,13,14), (15,16), (17,18,19,20,21)], 2) == [(1,2,3,4), (9,10), (15,16)]\n",
        "test": "assert remove_tuples([(4, 5), (4, ), (8, 6, 7), (1, ), (3, 4, 6, 7)] , 1) == [(4, 5), (8, 6, 7), (3, 4, 6, 7)]\nassert remove_tuples([(4, 5), (4,5), (6, 7), (1, 2, 3), (3, 4, 6, 7)] ,2) == [(1, 2, 3), (3, 4, 6, 7)]\nassert remove_tuples([(1, 4, 4), (4, 3), (8, 6, 7), (1, ), (3, 6, 7)] , 3) == [(4, 3), (1,)]",
        "canonical_solution": "def remove_tuples(test_list, K):\r\n  res = [ele for ele in test_list if len(ele) != K]\r\n  return (res) "
    },
    {
        "number": 197,
        "prompt": "Write a function to perform the exponentiation of the given two tuples.\ndef find_exponentio(test_tup1, test_tup2):\n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    def exponentiation(a, b):\n        return a ** b\n\n    return tuple(exponentiation(test_tup1[i], test_tup2[i]) for i in range(len(test_tup1))\n\n\n# Test cases\nprint(find_exponentio((2, 3), (4, 5)) # Output: (32, 1)\nprint(find_exponentio((2, 3, 4), (4, 5, 2)) # Output: (32, 1, 1024)\nprint(find_exponentio((2, 3, 4, 5), (4, 5, 2)) # Output: (32, 1, 3125)\nprint(find_exponentio((1, 2, 3, 4), (5, 6, 7)) # Output: (1, 81, 59049)\n\n",
        "generated_testcode": "assert find_exponentio((2,3), (4,5)) == (32, 125)\n",
        "test": "assert find_exponentio((10, 4, 5, 6), (5, 6, 7, 5)) == (100000, 4096, 78125, 7776)\nassert find_exponentio((11, 5, 6, 7), (6, 7, 8, 6)) == (1771561, 78125, 1679616, 117649)\nassert find_exponentio((12, 6, 7, 8), (7, 8, 9, 7)) == (35831808, 1679616, 40353607, 2097152)",
        "canonical_solution": "def find_exponentio(test_tup1, test_tup2):\r\n  res = tuple(ele1 ** ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\r\n  return (res)\r\n"
    },
    {
        "number": 198,
        "prompt": "Write a function to find the largest triangle that can be inscribed in an ellipse.\ndef largest_triangle(a,b): \n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    # function to find the largest triangle that can be inscribed in an ellipse\n    # given the major and minor axes of the ellipse (a,b)\n    import math\n    def area_of_triangle(a,b):\n        # function to find the area of the largest triangle inscribed in an ellipse\n        return 0.5*a*b\n    def angle_between_lines(a,b):\n        # function to find the angle between two lines\n        return math.acos(a/b)\n    def distance_between_lines(a,b,angle):\n        # function to find the distance between two parallel lines\n        return (a*math.sin(angle))/math.sin((math.pi/2)-angle)\n    def circumference_of_ellipse(a,b):\n        # function to find the circumference of an ellipse\n        return math.pi*a*b\n    def area_of_ellipse(a,b):\n        # function to find the area of an ellipse\n        return math.pi*a*b\n    def find_triangle(a,b):\n        # function to find the largest triangle inscribed in an ellipse\n        # using the Shoelace formula\n        c = distance_between_lines(a,b,angle_between_lines(a,b))\n        return (a,b,c)\n    return area_of_triangle(a,b)\n\n\n# Test the function\nprint(largest_triangle(5,4)) # Output: (5.",
        "generated_testcode": "assert largest_triangle(3, 4) == 6.0\n",
        "test": "assert largest_triangle(4,2)==10.392304845413264\nassert largest_triangle(5,7)==4.639421805988064\nassert largest_triangle(9,1)==105.2220865598093",
        "canonical_solution": "import math\r\ndef largest_triangle(a,b): \r\n    if (a < 0 or b < 0): \r\n        return -1 \r\n    area = (3 * math.sqrt(3) * pow(a, 2)) / (4 * b);  \r\n    return area "
    },
    {
        "number": 199,
        "prompt": "Write a python function to find highest power of 2 less than or equal to given number.\ndef highest_Power_of_2(n): \n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    \"\"\" \n    This function takes an integer as input and returns the highest power of 2 less than or equal to n \n    \"\"\" \n    # convert n to binary \n    binary = bin(n)[2:] \n    # find the index of the last set bit \n    index = len(binary) - 1 - binary[::-1].index('1') \n    # find the corresponding power of 2 \n    power = 2 ** index \n    return power\n\n# Test the function \nn = 17\nprint(\"The highest power of 2 less than or equal to\", n, \"is\", highest_Power_of_2(n)) # Output: The highest power of 2 less than or equal to 17 is 16 ",
        "generated_testcode": "assert highest_Power_of_2(10) == 4\n",
        "test": "assert highest_Power_of_2(10) == 8\nassert highest_Power_of_2(19) == 16\nassert highest_Power_of_2(32) == 32",
        "canonical_solution": "def highest_Power_of_2(n): \r\n    res = 0; \r\n    for i in range(n, 0, -1):  \r\n        if ((i & (i - 1)) == 0): \r\n            res = i; \r\n            break;      \r\n    return res; "
    },
    {
        "number": 200,
        "prompt": "Write a function to find all index positions of the maximum values in a given list.\ndef position_max(list1):\n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    max_val = max(list1)\n    index_positions = []\n    for i in range(len(list1)):\n        if list1[i] == max_val:\n            index_positions.append(i)\n    return index_positions\n\n#test the function\nlist1 = [1, 2, 3, 4, 5, 6, 5, 4, 3, 2, 1]\nprint(position_max(list1))\n# Output: [4, 5]",
        "generated_testcode": "assert position_max([1, 2, 3, 4, 5, 6, 7, 8, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9",
        "test": "assert position_max([12,33,23,10,67,89,45,667,23,12,11,10,54])==[7]\nassert position_max([1,2,2,2,4,4,4,5,5,5,5])==[7,8,9,10]\nassert position_max([2,1,5,6,8,3,4,9,10,11,8,12])==[11]",
        "canonical_solution": "def position_max(list1):\r\n    max_val = max(list1)\r\n    max_result = [i for i, j in enumerate(list1) if j == max_val]\r\n    return max_result"
    },
    {
        "number": 201,
        "prompt": "Write a python function to check whether the elements in a list are same or not.\ndef chkList(lst): \n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": true,
        "answer": "    if len(lst) <= 1:\n        return True\n    else:\n        for i in lst:\n            if i == lst[0]:\n                return True\n            else:\n                return False\n\n#Testing the function\nprint(chkList([1,2,2,3,4,5,6]))\nprint(chkList([1,1,1,1,1,1]))\nprint(chkList([1,2,3,4,5,6]))\nprint(chkList([2,2,3,4,5,6]))\nprint(chkList([]))\nprint(chkList([1]))",
        "generated_testcode": "assert chkList([1,2,3,4,5,6,7,8,9]) == True\n",
        "test": "assert chkList(['one','one','one']) == True\nassert chkList(['one','Two','Three']) == False\nassert chkList(['bigdata','python','Django']) == False",
        "canonical_solution": "def chkList(lst): \r\n    return len(set(lst)) == 1"
    },
    {
        "number": 202,
        "prompt": "Write a function to remove even characters in a string.\ndef remove_even(str1):\n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    result = \"\"\n    for i in range(len(str1)):\n        if i % 2 == 1:\n            result += str1[i]\n    return result\n\n\n# Test the function with an example string\nstr1 = \"hello world\"\nprint(remove_even(str1)) # Output: \"hlowrd\"\n\n",
        "generated_testcode": "assert remove_even(\"hello world\") == \"hlo wrd\"\n",
        "test": "assert remove_even(\"python\")==(\"pto\")\nassert remove_even(\"program\")==(\"porm\")\nassert remove_even(\"language\")==(\"lnug\")",
        "canonical_solution": "def remove_even(str1):\r\n str2 = ''\r\n for i in range(1, len(str1) + 1):\r\n    if(i % 2 != 0):\r\n        str2 = str2 + str1[i - 1]\r\n return str2"
    },
    {
        "number": 203,
        "prompt": "Write a python function to find the hamming distance between given two integers.\ndef hamming_Distance(n1,n2) : \n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    bin_n1 = bin(n1)[2:].zfill(32)\n    bin_n2 = bin(n2)[2:].zfill(32)\n    count = 0\n    for i in range(32):\n        if bin_n1[i] != bin_n2[i]:\n            count += 1\n    return count\n\n# Test the function\nn1 = 10\nn2 = 42\nprint(hamming_Distance(n1,n2))\n",
        "generated_testcode": "assert hamming_Distance(10, 4) == 2\n",
        "test": "assert hamming_Distance(4,8) == 2\nassert hamming_Distance(2,4) == 2\nassert hamming_Distance(1,2) == 2",
        "canonical_solution": "def hamming_Distance(n1,n2) : \r\n    x = n1 ^ n2  \r\n    setBits = 0\r\n    while (x > 0) : \r\n        setBits += x & 1\r\n        x >>= 1\r\n    return setBits  "
    },
    {
        "number": 204,
        "prompt": "Write a python function to count the occurrence of a given character in a string.\ndef count(s,c) : \n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": true,
        "answer": "    count = 0\n    for i in range(len(s)): \n        if s[i] == c: \n            count += 1\n    return count ",
        "generated_testcode": "assert count(\"hello world\", \"l\") == 3\n",
        "test": "assert count(\"abcc\",\"c\") == 2\nassert count(\"ababca\",\"a\") == 3\nassert count(\"mnmm0pm\",\"m\") == 4",
        "canonical_solution": "def count(s,c) : \r\n    res = 0 \r\n    for i in range(len(s)) : \r\n        if (s[i] == c): \r\n            res = res + 1\r\n    return res "
    },
    {
        "number": 205,
        "prompt": "Write a function to find the inversions of tuple elements in the given tuple list.\ndef inversion_elements(test_tup):\n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    inversion_list = []\n    for i in range(len(test_tup)):\n        for j in range(i+1, len(test_tup)):\n            if test_tup[i] > test_tup[j]:\n                inversion_list.append((test_tup[i], test_tup[j]))\n    return inversion_list\n\n\n# Test the function\ntest_tup = (1, 5, 3, 7, 2, 4, 6, 8)\nprint(inversion_elements(test_tup))\n# Output: [(1, 5), (1, 3), (1, 2), (1, 4), (1, 6), (1, 8), (5, 3), (5, 2), (5, 4), (5, 6), (5, 8), (3, 2), (3, 4), (3, 6), (3, 8), (2, 4), (2, 6), (2, 8), (4, 6), (4, 8), (6, 8)]\n\n# Time complexity O(n^2)\n# Space complexity O(n)\n\n\n# Improved solution: O(nlogn) time complexity using merge sort algorithm\ndef inversion_elements(test_tup):\n    return sorted(test_tup, key=lambda x: (x[1], x[0])\n\n\n# Test the function",
        "generated_testcode": "assert inversion_elements(((1,2,3,4,5)) == 0\n",
        "test": "assert inversion_elements((7, 8, 9, 1, 10, 7)) == (-8, -9, -10, -2, -11, -8)\nassert inversion_elements((2, 4, 5, 6, 1, 7)) == (-3, -5, -6, -7, -2, -8)\nassert inversion_elements((8, 9, 11, 14, 12, 13)) == (-9, -10, -12, -15, -13, -14)",
        "canonical_solution": "def inversion_elements(test_tup):\r\n  res = tuple(list(map(lambda x: ~x, list(test_tup))))\r\n  return (res) "
    },
    {
        "number": 206,
        "prompt": "Write a function to perform the adjacent element concatenation in the given tuples.\ndef concatenate_elements(test_tup):\n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    # Initialize an empty list to store the concatenated elements\n    result = []\n    # Traverse the tuple\n    for i in range(len(test_tup)-1):\n        # Concatenate the adjacent elements and append to the result list\n        result.append(str(test_tup[i]) + str(test_tup[i+1]))\n    # Return the result list\n    return result\n\n# Test the function\nprint(concatenate_elements((\"abc\", \"def\", 123, \"ghi\", 456)) # Output: ['abcd', 'def1', 'efg', 'ghi4']\nprint(concatenate_elements(\"xyz\", \"uvw\", \"stu\", \"pqr\", 789)) # Output: ['xyzu', 'uvwp', 'wst7', 'stu7', 'u9']",
        "generated_testcode": "assert concatenate_elements(((('a', 'b', 'c', 'd')) == ('bcd'))\n",
        "test": "assert concatenate_elements((\"DSP \", \"IS \", \"BEST \", \"FOR \", \"ALL \", \"UTS\")) == ('DSP IS ', 'IS BEST ', 'BEST FOR ', 'FOR ALL ', 'ALL UTS')\nassert concatenate_elements((\"RES \", \"IS \", \"BEST \", \"FOR \", \"ALL \", \"QESR\")) == ('RES IS ', 'IS BEST ', 'BEST FOR ', 'FOR ALL ', 'ALL QESR')\nassert concatenate_elements((\"MSAM\", \"IS \", \"BEST \", \"FOR \", \"ALL \", \"SKD\")) == ('MSAMIS ', 'IS BEST ', 'BEST FOR ', 'FOR ALL ', 'ALL SKD')",
        "canonical_solution": "def concatenate_elements(test_tup):\r\n  res = tuple(i + j for i, j in zip(test_tup, test_tup[1:]))\r\n  return (res) "
    },
    {
        "number": 207,
        "prompt": "Write a function to count the longest repeating subsequences such that the two subsequences don\u2019t have same string characters at same positions.\ndef find_longest_repeating_subseq(str): \n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    n = len(str)\n    dp = [[0 for _ in range(n+1)] for _ in range(n+1)]\n    max_length = 1\n    max_count = 1\n    for i in range(1,n):\n        for j in range(i+1,n):\n            if str[i] == str[j]:\n                dp[i][j] = 1\n                if i!=j:\n                    max_count+=1\n            else:\n                dp[i][j] = dp[i-1][j-1]+1\n                if dp[i][j]>max_length:\n                    max_length = dp[i][j]\n    return max_length\n\nstr = \"abcdabc\"\nprint(find_longest_repeating_subseq(str))\n\n#Output: 3\n\n\n#Explanation:\n#Subsequences are \"a\", \"b\", \"c\", \"ab\", \"bc\", \"abc\", \"d\", \"abcd\", \"bc\" and \"abc\", \"dab\"\n#The longest subsequences which do not have same characters at the same positions are \"abcd\", \"abc\", \"ab\" and \"bc\" and their length is 3. ",
        "generated_testcode": "assert find_longest_repeating_subseq(\"abcabcabc\") == 2\n",
        "test": "assert find_longest_repeating_subseq(\"AABEBCDD\") == 3\nassert find_longest_repeating_subseq(\"aabb\") == 2\nassert find_longest_repeating_subseq(\"aab\") == 1",
        "canonical_solution": "def find_longest_repeating_subseq(str): \r\n\tn = len(str) \r\n\tdp = [[0 for k in range(n+1)] for l in range(n+1)] \r\n\tfor i in range(1, n+1): \r\n\t\tfor j in range(1, n+1): \r\n\t\t\tif (str[i-1] == str[j-1] and i != j): \r\n\t\t\t\tdp[i][j] = 1 + dp[i-1][j-1] \r\n\t\t\telse: \r\n\t\t\t\tdp[i][j] = max(dp[i][j-1], dp[i-1][j]) \r\n\treturn dp[n][n]"
    },
    {
        "number": 208,
        "prompt": "Write a function to check the given decimal with a precision of 2 by using regex.\ndef is_decimal(num):\n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    pattern = re.compile(r'^-?\\d+\\.\\d{2}$')\n    return pattern.match(num)\n\n# Test the function\nprint(is_decimal(\"12.45\")) # True\nprint(is_decimal(\"-3.14\")) # True\nprint(is_decimal(\"1.00\")) # True\nprint(is_decimal(\"42.0\")) # True\nprint(is_decimal(\"3.141592\")) # False\nprint(is_decimal(\"12\")) # False\nprint(is_decimal(\"-0.5\")) # False\nprint(is_decimal(\"0.1234567\")) # False\nprint(is_decimal(\"3.14.5\")) # False\nprint(is_decimal(\"3.14E2\")) # False\nprint(is_decimal(\"12.55.6\")) # False\nprint(is_decimal(\"12.556\")) # False\nprint(is_decimal(\"12.55600\")) # True\nprint(is_decimal(\"12.55601\")) # False\nprint(is_decimal(\"12.55600000\")) # True\nprint(is_decimal(\"12.556001\")) # False\nprint(is_decimal(\"12.5560010\")) # False\n\n# Output\n# True\n# True\n# True\n# True",
        "generated_testcode": "assert is_decimal(\"123.45\") == True\n",
        "test": "assert is_decimal('123.11') == True\nassert is_decimal('0.21') == True\nassert is_decimal('123.1214') == False",
        "canonical_solution": "import re\r\ndef is_decimal(num):\r\n  num_fetch = re.compile(r\"\"\"^[0-9]+(\\.[0-9]{1,2})?$\"\"\")\r\n  result = num_fetch.search(num)\r\n  return bool(result)"
    },
    {
        "number": 209,
        "prompt": "Write a function to delete the smallest element from the given heap and then insert a new item.\ndef heap_replace(heap,a):\n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    if len(heap) > 0:\n        if heap[0] > a:\n            heap[0] = a\n            heapq.heapify(heap)\n            return heap.pop(0)\n        else:\n            heap.append(a)\n            heapq.heapify(heap)\n            return heapq.heappop(heap)\n    else:\n        return \"Heap is empty\"\n\nheap = [4,3,5,2,1,6,7,8]\nprint(heap_replace(heap,0)) # Output: 1\nprint(heap) # Output: [0, 2, 3, 5, 6, 7, 8]\nprint(heap_replace(heap,9)) # Output: 2\nprint(heap) # Output: [0, 3, 5, 6, 7, 8, 9]\n",
        "generated_testcode": "assert heap_replace([4, 10, 3, 5, 2, 1, 6], 7) == [4, 6, 3, 5, 2, 1]\n",
        "test": "assert heap_replace( [25, 44, 68, 21, 39, 23, 89],21)==[21, 25, 23, 44, 39, 68, 89]\nassert heap_replace([25, 44, 68, 21, 39, 23, 89],110)== [23, 25, 68, 44, 39, 110, 89]\nassert heap_replace([25, 44, 68, 21, 39, 23, 89],500)==[23, 25, 68, 44, 39, 500, 89]",
        "canonical_solution": "import heapq as hq\r\ndef heap_replace(heap,a):\r\n  hq.heapify(heap)\r\n  hq.heapreplace(heap, a)\r\n  return heap"
    },
    {
        "number": 210,
        "prompt": "Write a function to check that the given string contains only a certain set of characters(in this case a-z, a-z and 0-9) by using regex.\ndef is_allowed_specific_char(string):\n",
        "checkpoint": "7B",
        "pass": 6,
        "correct": true,
        "answer": "    import re\n    pattern = r'^[a-zA-Z0-9]+$'\n    return bool(re.match(pattern, string))\n\n# Test cases\nprint(is_allowed_specific_char(\"hello123\")) # True\nprint(is_allowed_specific_char(\"Hello World\")) # False\nprint(is_allowed_specific_char(\"he12llo\")) # True\nprint(is_allowed_specific_char(\"Hello World123\")) # False\nprint(is_allowed_specific_char(\"he12lloWorl4d\")) # False\nprint(is_allowed_specific_char(\"he12lloWorl4d5\")) # True\nprint(is_allowed_specific_char(\"he12lloWorl4d5!\")) # False\nprint(is_allowed_specific_char(\"\")) # True\nprint(is_allowed_specific_char(\"hello\")) # True\nprint(is_allowed_specific_char(\"hello world\")) # False",
        "generated_testcode": "assert is_allowed_specific_char(\"abc123\") == True\n",
        "test": "assert is_allowed_specific_char(\"ABCDEFabcdef123450\") == True\nassert is_allowed_specific_char(\"*&%@#!}{\") == False\nassert is_allowed_specific_char(\"HELLOhowareyou98765\") == True",
        "canonical_solution": "import re\r\ndef is_allowed_specific_char(string):\r\n    get_char = re.compile(r'[^a-zA-Z0-9.]')\r\n    string = get_char.search(string)\r\n    return not bool(string)"
    },
    {
        "number": 211,
        "prompt": "Write a python function to count numbers whose oth and nth bits are set.\ndef count_Num(n): \n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    count = 0\n    for i in range(1, 2**n+1):\n        if bin(i)[2:].count('1') == 2:\n            count += 1\n    return count\n\nprint(count_Num(5)) # Output: 10 ",
        "generated_testcode": "assert count_Num(10) == 1\n",
        "test": "assert count_Num(2) == 1\nassert count_Num(3) == 2\nassert count_Num(1) == 1",
        "canonical_solution": "def count_Num(n): \r\n    if (n == 1): \r\n        return 1\r\n    count = pow(2,n - 2) \r\n    return count "
    },
    {
        "number": 212,
        "prompt": "Write a python function to find the sum of fourth power of n natural numbers.\ndef fourth_Power_Sum(n): \n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    sum = 0\n    for i in range(n):\n        sum += i**4\n    return sum\n\n# Test the function\nprint(fourth_Power_Sum(5)) # Output: 225\nprint(fourth_Power_Sum(8)) # Output: 256\nprint(fourth_Power_Sum(10)) # Output: 385\nprint(fourth_Power_Sum(12)) # Output: 6168",
        "generated_testcode": "assert fourth_Power_Sum(5) == 2260\n",
        "test": "assert fourth_Power_Sum(2) == 17\nassert fourth_Power_Sum(4) == 354\nassert fourth_Power_Sum(6) == 2275",
        "canonical_solution": "import math  \r\ndef fourth_Power_Sum(n): \r\n    sum = 0\r\n    for i in range(1,n+1) : \r\n        sum = sum + (i*i*i*i) \r\n    return sum"
    },
    {
        "number": 213,
        "prompt": "Write a function to perform the concatenation of two string tuples.\ndef concatenate_strings(test_tup1, test_tup2):\n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    \"\"\"\n    Concatenate two string tuples into a new string tuple\n    Args:\n        test_tup1 (tuple): a tuple of strings\n        test_tup2 (tuple): a tuple of strings\n    Returns:\n        tuple: a concatenated string tuple\n    \"\"\"\n    # Your code here\n    result = []\n    for i in test_tup1:\n        result.append(i)\n    for j in test_tup2:\n        result.append(j)\n    return tuple(result)\n\n# Test the function with the given test case\nprint(concatenate_strings(('hello', 'world'), ('I', 'am', 'a', 'test', 'tuple')) # Output: ('hello', 'world', 'I', 'am', 'a', 'test', 'tuple')\n",
        "generated_testcode": "assert concatenate_strings((\"hello\", \"world\") == \"helloworld\"\n",
        "test": "assert concatenate_strings((\"Manjeet\", \"Nikhil\", \"Akshat\"), (\" Singh\", \" Meherwal\", \" Garg\")) == ('Manjeet Singh', 'Nikhil Meherwal', 'Akshat Garg')\nassert concatenate_strings((\"Shaik\", \"Ayesha\", \"Sanya\"), (\" Dawood\", \" Begum\", \" Singh\")) == ('Shaik Dawood', 'Ayesha Begum', 'Sanya Singh')\nassert concatenate_strings((\"Harpreet\", \"Priyanka\", \"Muskan\"), (\"Kour\", \" Agarwal\", \"Sethi\")) == ('HarpreetKour', 'Priyanka Agarwal', 'MuskanSethi')",
        "canonical_solution": "def concatenate_strings(test_tup1, test_tup2):\r\n  res = tuple(ele1 + ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\r\n  return (res) "
    },
    {
        "number": 214,
        "prompt": "Write a function to convert radians to degrees.\ndef degree_radian(radian):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": true,
        "answer": "    degree = (radian * 180) / 3.14159\n    return degree\n\n# Test cases\nprint(degree_radian(1)) # Should return 57.295777951308252036775\nprint(degree_radian(3.14159)) # Should return 180.0\nprint(degree_radian(2)) # Should return 114.7098417416416\n",
        "generated_testcode": "assert degree_radian(3.14159) == 180\n",
        "test": "assert degree_radian(90)==5156.620156177409\nassert degree_radian(60)==3437.746770784939\nassert degree_radian(120)==6875.493541569878",
        "canonical_solution": "import math\r\ndef degree_radian(radian):\r\n degree = radian*(180/math.pi)\r\n return degree"
    },
    {
        "number": 215,
        "prompt": "Write a function to decode a run-length encoded given list.\ndef decode_list(alist):\n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    result = []\n    i = 0\n    while i < len(alist):\n        if isinstance(alist[i], int):\n            result.append(alist[i])\n            i += 1\n        else:\n            count, val = alist[i], alist[i+1]\n            for j in range(count):\n                result.append(val)\n            i += 2\n    return result\n\n\n# Test cases\nprint(decode_list([1, 2, 3, 2, 4, 3, 1, 5, 3])) # Output: [1, 2, 2, 2, 4, 3, 3, 3, 5, 3]\nprint(decode_list([2, 4, 2, 3, 4, 2, 5, 3, 1, 1, 5, 2, 5, 1, 2, 3, 3])) # Output: [4, 4, 3, 3, 3, 5, 5, 5, 1, 1, 5, 2, 5, 1, 3, 3, 3]\n",
        "generated_testcode": "assert decode_list([\"A2\", \"B3\", \"C4\", \"D\"] == [\"A\", \"A\", \"B\", \"B\", \"B\", \"C\", \"C\", \"C\", \"C\", \"D\"])\n",
        "test": "assert decode_list([[2, 1], 2, 3, [2, 4], 5,1])==[1,1,2,3,4,4,5,1]\nassert decode_list(['a', 'u', 't', 'o', 'm', 'a', 't', 'i', 'c', 'a', [2, 'l'], 'y'])==['a', 'u', 't', 'o', 'm', 'a', 't', 'i', 'c', 'a', 'l', 'l', 'y']\nassert decode_list(['p', 'y', 't', 'h', 'o', 'n'])==['p', 'y', 't', 'h', 'o', 'n']",
        "canonical_solution": "def decode_list(alist):\r\n    def aux(g):\r\n        if isinstance(g, list):\r\n            return [(g[1], range(g[0]))]\r\n        else:\r\n            return [(g, [0])]\r\n    return [x for g in alist for x, R in aux(g) for i in R]"
    },
    {
        "number": 216,
        "prompt": "Write a function to check if a nested list is a subset of another nested list.\ndef check_subset_list(list1, list2): \n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    for i in list1:\n        if isinstance(i, list):\n            if not check_subset_list(i, list2):\n                return False\n        else:\n            if i not in list2:\n                return False\n    return True\n\n# Test cases\nprint(check_subset_list([[1, [2, 3], 4], [5, 6, 7]], [1, [2, 3, 4, 5, 6, 7, 8])) # True\nprint(check_subset_list([[1, [2, 3], 4], [5, 6, 7], 8], [1, [2, 3, 4, 5, 6, 7])) # False\nprint(check_subset_list([[1, [2, 3], 4], [5, 6, 7], 8], [1, [2, 3, 4, 5, 6, 7, 8])) # True\nprint(check_subset_list([[1, [2, 3], 4, [5, 6, [7, 8]]], 9], [1, [2, 3, 4, 5, [6, 7, [8, 9]) # True\nprint(check_subset_list([1, [2, 3], 4, [5, 6, [7, 8]], 9], [1, [2, 3, 4, 5, ",
        "generated_testcode": "assert check_subset_list([[1, 2, [3, 4]], [1, 2, [3, 4, 5]], [1, 2, [3, 4, 5, 6]]] == False\n",
        "test": "assert check_subset_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14],[[12, 18, 23, 25, 45], [7, 11, 19, 24, 28], [1, 5, 8, 18, 15, 16]])==False\nassert check_subset_list([[2, 3, 1], [4, 5], [6, 8]],[[4, 5], [6, 8]])==True\nassert check_subset_list([['a', 'b'], ['e'], ['c', 'd']],[['g']])==False",
        "canonical_solution": "def check_subset_list(list1, list2): \r\n    l1, l2 = list1[0], list2[0] \r\n    exist = True\r\n    for i in list2: \r\n        if i not in list1: \r\n            exist = False\r\n    return exist "
    },
    {
        "number": 217,
        "prompt": "Write a python function to find the first repeated character in a given string.\ndef first_Repeated_Char(str): \n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    # Initialize a dictionary to store the frequency of each character in the string\n    freq_dict = {}\n    for char in str:\n        if char in freq_dict:\n            freq_dict[char] += 1\n        else:\n            freq_dict[char] = 1\n\n    # Traverse through the string and return the first repeated character\n    for char in str:\n        if freq_dict[char] > 1:\n            return char\n    return None\n\n# Test the function with example input\nprint(first_Repeated_Char(\"hello world\"))\n\n# Output: l\n# Test the function with another example input\nprint(first_Repeated_Char(\"aabbccdde\"))\n# Output: None",
        "generated_testcode": "assert first_Repeated_Char(\"hello world\") == \"l\"\n",
        "test": "assert first_Repeated_Char(\"Google\") == \"o\"\nassert first_Repeated_Char(\"data\") == \"a\"\nassert first_Repeated_Char(\"python\") == '\\0'",
        "canonical_solution": "def first_Repeated_Char(str): \r\n    h = {}\r\n    for ch in str:\r\n        if ch in h: \r\n            return ch;\r\n        else: \r\n            h[ch] = 0\r\n    return '\\0'"
    },
    {
        "number": 218,
        "prompt": "Write a python function to find the minimum operations required to make two numbers equal.\ndef min_Operations(A,B):  \n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    n = len(A)  \n    dp = [[0]*(n+1) for _ in range(n+1)]  \n    for i in range(1,n+1):  \n        for j in range(1,n+1):  \n            if i==0:  \n                dp[i][j] = j  \n            elif j==0:  \n                dp[i][j] = i  \n            elif A[i-1]==B[j-1]:  \n                dp[i][j] = dp[i-1][j-1]  \n            else:  \n                dp[i][j] = min(dp[i-1][j],dp[i][j-1])+1  \n    return dp[n][n]  \n\n\n#Testing the function  \nA = \"123456\"  \nB = \"456\"  \nprint(min_Operations(A,B))  ",
        "generated_testcode": "assert min_Operations(10, 20) == 2\n",
        "test": "assert min_Operations(2,4) == 1\nassert min_Operations(4,10) == 4\nassert min_Operations(1,4) == 3",
        "canonical_solution": "import math   \r\ndef min_Operations(A,B):  \r\n    if (A > B): \r\n        swap(A,B)  \r\n    B = B // math.gcd(A,B);  \r\n    return B - 1"
    },
    {
        "number": 219,
        "prompt": "Write a function to extract maximum and minimum k elements in the given tuple.\ndef extract_min_max(test_tup, K):\n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    if len(test_tup) < K:\n        return None\n    \n    max_k = []\n    min_k = []\n    \n    for i in range(K):\n        max_k.append(max(test_tup[:K])\n        min_k.append(min(test_tup[:K])\n        test_tup = test_tup[1:]\n    \n    return (tuple(max_k), tuple(min_k))\n\n\n# Testing the function\ntest_tup = (1,2,3,4,5,6,7,8,9,10)\nK = 3\nprint(extract_min_max(test_tup, K))\n# Output: ((9,8,7),(1,2,3)\n\n\ntest_tup = (10,20,30,40,50,60,70,80,90,100)\nK = 4\nprint(extract_min_max(test_tup, K))\n# Output: ((10,20,30,40,50),(1,2,3,4)\n\n\ntest_tup = (10,9,8,7,6,5,4,3,2,1)\nK = 4\nprint(extract_min_max(test_tup, K))\n# Output: ((10,9,8,7,6),(1,2,3,4)\n\n\n",
        "generated_testcode": "assert extract_min_max((1, 2, 3, 4, 5, 6, 7, 8, 9), 3) == (1, 9)\n",
        "test": "assert extract_min_max((5, 20, 3, 7, 6, 8), 2) == (3, 5, 8, 20)\nassert extract_min_max((4, 5, 6, 1, 2, 7), 3) == (1, 2, 4, 5, 6, 7)\nassert extract_min_max((2, 3, 4, 8, 9, 11, 7), 4) == (2, 3, 4, 7, 8, 9, 11)",
        "canonical_solution": "\r\ndef extract_min_max(test_tup, K):\r\n  res = []\r\n  test_tup = list(test_tup)\r\n  temp = sorted(test_tup)\r\n  for idx, val in enumerate(temp):\r\n    if idx < K or idx >= len(temp) - K:\r\n      res.append(val)\r\n  res = tuple(res)\r\n  return (res) "
    },
    {
        "number": 220,
        "prompt": "Write a function to replace maximum n occurrences of spaces, commas, or dots with a colon.\ndef replace_max_specialchar(text,n):\n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    # Initialize a list to store the special characters\n    special_chars = []\n\n    # Loop through the text and count the occurrences of spaces, commas, and dots\n    count_spaces = text.count(\" \")\n    count_commas = text.count(\",\")\n    count_dots = text.count(\".\")\n\n    # Add the count of spaces, commas, and dots to the special_chars list\n    special_chars.append(count_spaces)\n    special_chars.append(count_commas)\n    special_chars.append(count_dots)\n\n    # Find the maximum count of special characters\n    max_count = max(special_chars)\n\n    # Replace the maximum count with a colon in the text\n    if max_count == count_spaces:\n        text = text.replace(\" \", \":\", n)\n    elif max_count == count_commas:\n        text = text.replace(\",\", \":\", n)\n    else:\n        text = text.replace(\".\", \":\", n)\n\n    return text\n\n\n# Test the function\nprint(replace_max_specialchar(\"This is a test string, it has 4 spaces and 3 dots.\", 3))\nprint(replace_max_specialchar(\"This is another test string, with 5 spaces, and 2 dots.\", 2))\nprint(replace_max_specialchar(\"This is a test string. It has 3 dots.\", 3))\n",
        "generated_testcode": "assert replace_max_specialchar(\"hello world, how are you?\", 2) == \"hello:world:how:are:you?\"\n",
        "test": "assert replace_max_specialchar('Python language, Programming language.',2)==('Python:language: Programming language.')\nassert replace_max_specialchar('a b c,d e f',3)==('a:b:c:d e f')\nassert replace_max_specialchar('ram reshma,ram rahim',1)==('ram:reshma,ram rahim')",
        "canonical_solution": "import re\r\ndef replace_max_specialchar(text,n):\r\n return (re.sub(\"[ ,.]\", \":\", text, n))"
    },
    {
        "number": 221,
        "prompt": "Write a python function to find the first even number in a given list of numbers.\ndef first_even(nums):\n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    for i in nums:\n        if i % 2 == 0:\n            return i\n    return None\n\n# Test the function with the following code\nnums = [2, 4, 6, 3, 8, 9, 10, 5, 7]\nprint(first_even(nums)) # Output: 2\nnums = [1, 3, 5, 7, 9, 11]\nprint(first_even(nums)) # Output: None\nnums = [2, 4, 6, 8, 10, 12]\nprint(first_even(nums)) # Output: 2\nnums = [7, 5, 3, 9, 11]\nprint(first_even(nums)) # Output: None\nnums = []\nprint(first_even(nums)) # Output: None\nnums = [1, 3, 5]\nprint(first_even(nums)) # Output: None",
        "generated_testcode": "assert first_even([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 2\n",
        "test": "assert first_even ([1, 3, 5, 7, 4, 1, 6, 8]) == 4\nassert first_even([2, 3, 4]) == 2\nassert first_even([5, 6, 7]) == 6",
        "canonical_solution": "def first_even(nums):\r\n    first_even = next((el for el in nums if el%2==0),-1)\r\n    return first_even"
    },
    {
        "number": 222,
        "prompt": "Write a function to check if all the elements in tuple have same data type or not.\ndef check_type(test_tuple):\n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    type_of_first = type(test_tuple[0])\n    for i in test_tuple:\n        if type(i) != type_of_first:\n            return False\n    return True\n\n#Test the function\nprint(check_type((1, 2, 3, 4, 5, 6, 7)) # True\nprint(check_type((1, \"apple\", 3, 4, 5, 6, 7)) # False\nprint(check_type((1, 2, 3, 4, 5, \"apple\", 7)) # False\nprint(check_type((\"apple\", \"banana\", \"grapes\", \"orange\", \"mango\")) # True\nprint(check_type((1.0, 2.0, 3.0, 4.0, 5.0)) # True\nprint(check_type((1, 2, 3, \"apple\", 4, 5, 6)) # False\nprint(check_type((1, \"apple\", \"banana\", \"grapes\", 4, 5)) # False\n\n\n#Output:\n# True\n# False\n# False\n# True\n# True\n# False\n# False\n# False ",
        "generated_testcode": "assert check_type((1,2,3,4,5) == True\n",
        "test": "assert check_type((5, 6, 7, 3, 5, 6) ) == True\nassert check_type((1, 2, \"4\") ) == False\nassert check_type((3, 2, 1, 4, 5) ) == True",
        "canonical_solution": "def check_type(test_tuple):\r\n  res = True\r\n  for ele in test_tuple:\r\n    if not isinstance(ele, type(test_tuple[0])):\r\n      res = False\r\n      break\r\n  return (res) "
    },
    {
        "number": 223,
        "prompt": "Write a function to check for majority element in the given sorted array.\ndef is_majority(arr, n, x):\n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n        if count > n//2:\n            return True\n    return False\n\ndef majority_element(arr):\n    n = len(arr)\n    if n == 1:\n        return arr[0]\n    if n%2 == 0:\n        return arr[n//2]\n    if is_majority(arr, n, arr[n//2]):\n        return arr[n//2]\n    return arr[n//2 + 1]\n\n\n# Test cases\nprint(majority_element([1,2,3,4,5,5,5,5,5,5,6,6,6,6,6])) # Output: 5\nprint(majority_element([1,2,3,4,4,4,4,4,4,5,6,6,6,6,6])) # Output: 4\nprint(majority_element([1,2,3,4,4,5,6,7,7,7,7,7,7])) # Output: None\n\n# Time Complexity: O(n)\n# Space Complexity: O(1)\n",
        "generated_testcode": "assert is_majority([1, 2, 3, 4, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7",
        "test": "assert is_majority([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\nassert is_majority([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\nassert is_majority([1, 1, 1, 2, 2], 5, 1) == True",
        "canonical_solution": "def is_majority(arr, n, x):\r\n\ti = binary_search(arr, 0, n-1, x)\r\n\tif i == -1:\r\n\t\treturn False\r\n\tif ((i + n//2) <= (n -1)) and arr[i + n//2] == x:\r\n\t\treturn True\r\n\telse:\r\n\t\treturn False\r\ndef binary_search(arr, low, high, x):\r\n\tif high >= low:\r\n\t\tmid = (low + high)//2 \r\n\t\tif (mid == 0 or x > arr[mid-1]) and (arr[mid] == x):\r\n\t\t\treturn mid\r\n\t\telif x > arr[mid]:\r\n\t\t\treturn binary_search(arr, (mid + 1), high, x)\r\n\t\telse:\r\n\t\t\treturn binary_search(arr, low, (mid -1), x)\r\n\treturn -1"
    },
    {
        "number": 224,
        "prompt": "Write a python function to count set bits of a given number.\ndef count_Set_Bits(n): \n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    count = 0\n    while(n): \n        count += n & 1\n        n >>= 1\n    return count ",
        "generated_testcode": "assert count_Set_Bits(0) == 0\n",
        "test": "assert count_Set_Bits(2) == 1\nassert count_Set_Bits(4) == 1\nassert count_Set_Bits(6) == 2",
        "canonical_solution": "def count_Set_Bits(n): \r\n    count = 0\r\n    while (n): \r\n        count += n & 1\r\n        n >>= 1\r\n    return count "
    },
    {
        "number": 225,
        "prompt": "Write a python function to find the minimum element in a sorted and rotated array.\ndef find_Min(arr,low,high): \n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    if high < low: \n        return -1\n    if high == low: \n        return arr[low] \n    if high == low+1: \n        return arr[low] if arr[low] < arr[high] else arr[high] \n    mid = (low + high) // 2\n    if arr[mid] < arr[high]: \n        return find_Min(arr,low,mid) \n    return find_Min(arr,mid+1,high) \n\ndef find_min_element(arr): \n    n = len(arr) \n    return find_Min(arr,0,n-1) ",
        "generated_testcode": "assert find_Min([4,5,6,7,8,9,10,1,2,3],0,5) == 1\n",
        "test": "assert find_Min([1,2,3,4,5],0,4) == 1\nassert find_Min([4,6,8],0,2) == 4\nassert find_Min([2,3,5,7,9],0,4) == 2",
        "canonical_solution": "def find_Min(arr,low,high): \r\n    while (low < high): \r\n        mid = low + (high - low) // 2;   \r\n        if (arr[mid] == arr[high]): \r\n            high -= 1; \r\n        elif (arr[mid] > arr[high]): \r\n            low = mid + 1; \r\n        else: \r\n            high = mid; \r\n    return arr[high]; "
    },
    {
        "number": 226,
        "prompt": "Write a python function to remove the characters which have odd index values of a given string.\ndef odd_values_string(str):\n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    result = \"\"\n    for i in range(len(str)):\n        if i % 2 == 0:\n            result += str[i]\n    return result\n\n# Test the function with an example string\ns = \"hello world\"\nprint(odd_values_string(s)) ",
        "generated_testcode": "assert odd_values_string(\"hello\") == \"hlo\"\n",
        "test": "assert odd_values_string('abcdef') == 'ace'\nassert odd_values_string('python') == 'pto'\nassert odd_values_string('data') == 'dt'",
        "canonical_solution": "def odd_values_string(str):\r\n  result = \"\" \r\n  for i in range(len(str)):\r\n    if i % 2 == 0:\r\n      result = result + str[i]\r\n  return result"
    },
    {
        "number": 227,
        "prompt": "Write a function to find minimum of three numbers.\ndef min_of_three(a,b,c): \n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    if a < b and a < c: \n        return a \n    elif b < c: \n        return b \n    else: \n        return c \n\n# Test the function \nprint(min_of_three(3, 2, 1)) # Output: 1 \nprint(min_of_three(1, 5, 2)) # Output: 1 \nprint(min_of_three(7, 2, 4)) # Output: 2 \n\n",
        "generated_testcode": "assert min_of_three(10,20,30) == 10\n",
        "test": "assert min_of_three(10,20,0)==0\nassert min_of_three(19,15,18)==15\nassert min_of_three(-10,-20,-30)==-30",
        "canonical_solution": "def min_of_three(a,b,c): \r\n      if (a <= b) and (a <= c): \r\n        smallest = a \r\n      elif (b <= a) and (b <= c): \r\n        smallest = b \r\n      else: \r\n        smallest = c \r\n      return smallest "
    },
    {
        "number": 228,
        "prompt": "Write a python function to check whether all the bits are unset in the given range or not.\ndef all_Bits_Set_In_The_Given_Range(n,l,r):  \n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    if n>=1 and l<=r:\n        return (n&((1<<(r+1)-1)>>1<<(l-1))==0)\n    else:\n        return False\n\n#Testing the function\nn=10\nl=5\nr=9\nprint(all_Bits_Set_In_The_Given_Range(n,l,r)) # True\nn=7\nl=4\nr=12\nprint(all_Bits_Set_In_The_Given_Range(n,l,r)) # False\nn=8\nl=3\nr=5\nprint(all_Bits_Set_In_The_Given_Range(n,l,r)) # True ",
        "generated_testcode": "assert all_Bits_Set_In_The_Given_Range(10, 2, 5) == True\n",
        "test": "assert all_Bits_Set_In_The_Given_Range(4,1,2) == True\nassert all_Bits_Set_In_The_Given_Range(17,2,4) == True\nassert all_Bits_Set_In_The_Given_Range(39,4,6) == False",
        "canonical_solution": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \r\n    num = (((1 << r) - 1) ^ ((1 << (l - 1)) - 1)) \r\n    new_num = n & num\r\n    if (new_num == 0): \r\n        return True\r\n    return False"
    },
    {
        "number": 229,
        "prompt": "Write a function to re-arrange the elements of the given array so that all negative elements appear before positive ones.\ndef re_arrange_array(arr, n):\n",
        "checkpoint": "7B",
        "pass": 4,
        "correct": true,
        "answer": "    pos = []\n    neg = []\n\n    for i in range(n):\n        if arr[i] < 0:\n            neg.append(arr[i])\n        else:\n            pos.append(arr[i])\n\n    return neg + pos\n\n# Example usage:\narr = [1, 2, -3, -4, 5, -6, 7, -8, 9]\nprint(re_arrange_array(arr, len(arr)))\n# Output: [-3, -4, -6, -8, 1, 2, 5, 7, 9]\n\narr = [1, 2, 3, 4, 5, 6]\nprint(re_arrange_array(arr, len(arr)))\n# Output: []\n\narr = [-1, -2, 3, 4, -5, 6, 7, -8]\nprint(re_arrange_array(arr, len(arr)))\n# Output: [-1, -2, -5, -8, 3, 4, 6, 7]\n\narr = [-1, 2, -3, -4, 5, -6, 7, 8]\nprint(re_arrange_array(arr, len(arr)))\n# Output: [-1, -3, -4, -6, 2, 5, 7, 8]",
        "generated_testcode": "assert re_arrange_array([1, 2, -3, 4, -5, 6, -7, 8, -9, 10] , 7) == [-3, -5, -7, -9, 1, 2, 4, 6, 8, 10]\n",
        "test": "assert re_arrange_array([-1, 2, -3, 4, 5, 6, -7, 8, 9], 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9]\nassert re_arrange_array([12, -14, -26, 13, 15], 5) == [-14, -26, 12, 13, 15]\nassert re_arrange_array([10, 24, 36, -42, -39, -78, 85], 7) == [-42, -39, -78, 10, 24, 36, 85]",
        "canonical_solution": "def re_arrange_array(arr, n):\r\n  j=0\r\n  for i in range(0, n):\r\n    if (arr[i] < 0):\r\n      temp = arr[i]\r\n      arr[i] = arr[j]\r\n      arr[j] = temp\r\n      j = j + 1\r\n  return arr"
    },
    {
        "number": 230,
        "prompt": "Write a function to replace blank spaces with any character in a string.\ndef replace_blank(str1,char):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": true,
        "answer": "    if not str1:\n        return \"\"\n    result = \"\"\n    for i in str1:\n        if i == \" \":\n            result += char\n        else:\n            result += i\n    return result\n\nprint(replace_blank(\"hello world\", \"*\")) # Output: \"hello*world\"\nprint(replace_blank(\"python is awesome\", \"-\")) # Output: \"python-is-awesome\"\nprint(replace_blank(\"  this string has extra spaces\", \"+\")) # Output: \"++this+string+has+extra+spaces\"\nprint(replace_blank(\"\", \"+\")) # Output: \"\"\n",
        "generated_testcode": "assert replace_blank(\"Hello World\", \"!\") == \"Hello!World\"\n",
        "test": "assert replace_blank(\"hello people\",'@')==(\"hello@people\")\nassert replace_blank(\"python program language\",'$')==(\"python$program$language\")\nassert replace_blank(\"blank space\",\"-\")==(\"blank-space\")",
        "canonical_solution": "def replace_blank(str1,char):\r\n str2 = str1.replace(' ', char)\r\n return str2"
    },
    {
        "number": 231,
        "prompt": "Write a function to find the maximum sum in the given right triangle of numbers.\ndef max_sum(tri, n): \n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    max_sum = 0\n    for i in range(n): \n        for j in range(i+1): \n            if i == 0 or j == 0: \n                continue\n            elif tri[i][j] > max_sum: \n                max_sum = tri[i][j]\n    return max_sum ",
        "generated_testcode": "assert max_sum([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3) == 25\n",
        "test": "assert max_sum([[1], [2,1], [3,3,2]], 3) == 6\nassert max_sum([[1], [1, 2], [4, 1, 12]], 3) == 15 \nassert max_sum([[2], [3,2], [13,23,12]], 3) == 28",
        "canonical_solution": "def max_sum(tri, n): \r\n\tif n > 1: \r\n\t\ttri[1][1] = tri[1][1]+tri[0][0] \r\n\t\ttri[1][0] = tri[1][0]+tri[0][0] \r\n\tfor i in range(2, n): \r\n\t\ttri[i][0] = tri[i][0] + tri[i-1][0] \r\n\t\ttri[i][i] = tri[i][i] + tri[i-1][i-1] \r\n\t\tfor j in range(1, i): \r\n\t\t\tif tri[i][j]+tri[i-1][j-1] >= tri[i][j]+tri[i-1][j]: \r\n\t\t\t\ttri[i][j] = tri[i][j] + tri[i-1][j-1] \r\n\t\t\telse: \r\n\t\t\t\ttri[i][j] = tri[i][j]+tri[i-1][j] \r\n\treturn (max(tri[n-1]))"
    },
    {
        "number": 232,
        "prompt": "Write a function to get the n largest items from a dataset.\ndef larg_nnum(list1,n):\n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    list1.sort(reverse=True)\n    return list1[:n]\n\nlist1 = [3,4,5,7,2,9,1,8,6,10,12,11]\nn = 3\nprint(larg_nnum(list1,n)) # Output: [12, 11, 10]\n",
        "generated_testcode": "assert larg_nnum([1,2,3,4,5,6,7,8,9,10],3) == [9,8,7]\n",
        "test": "assert larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],2)==[100,90]\nassert larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],5)==[100,90,80,70,60]\nassert larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],3)==[100,90,80]",
        "canonical_solution": "import heapq\r\ndef larg_nnum(list1,n):\r\n largest=heapq.nlargest(n,list1)\r\n return largest"
    },
    {
        "number": 233,
        "prompt": "Write a function to find the lateral surface area of a cylinder.\ndef lateralsuface_cylinder(r,h):\n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    import math\n    area = 2*math.pi*r*h\n    return area\n\n# Test the function\nprint(lateralsuface_cylinder(2, 4)) # Output: 32.83\nprint(lateralsuface_cylinder(5, 7)) # Output: 69.80\nprint(lateralsuface_cylinder(10, 3)) # Output: 62.83",
        "generated_testcode": "assert lateralsuface_cylinder(5,10) == 314.1592653589793\nprint(\"Test case 1 passed\")\n\n",
        "test": "assert lateralsuface_cylinder(10,5)==314.15000000000003\nassert lateralsuface_cylinder(4,5)==125.66000000000001\nassert lateralsuface_cylinder(4,10)==251.32000000000002",
        "canonical_solution": "def lateralsuface_cylinder(r,h):\r\n  lateralsurface= 2*3.1415*r*h\r\n  return lateralsurface"
    },
    {
        "number": 234,
        "prompt": "Write a function to find the volume of a cube.\ndef volume_cube(l):\n",
        "checkpoint": "7B",
        "pass": 3,
        "correct": true,
        "answer": "    \"\"\"\n    Returns the volume of a cube.\n    \"\"\"\n    return l**3\n\n\n# Test the function\nprint(volume_cube(5))  # Output: 125\nprint(volume_cube(10))  # Output: 10000\nprint(volume_cube(2.5))  # Output: 15.625\n\n\n\n# Define a function to find the surface area of a cube\ndef surface_area_cube(s):\n    \"\"\"\n    Returns the surface area of a cube.\n    \"\"\"\n    return 6 * (s**2)\n\n\n# Test the function\nprint(surface_area_cube(5))  # Output: 150\nprint(surface_area_cube(10))  # Output: 600\nprint(surface_area_cube(2.5))  # Output: 75.0\n\n\n# Define a function to find the diagonal of a cube\ndef diagonal_cube(s):\n    \"\"\"\n    Returns the diagonal of a cube.\n    \"\"\"\n    return 3 * (s ** 2) ** (0.5)\n\n\n# Test the function\nprint(diagonal_cube(5))  # Output: 7.071067811186547558\nprint(diagonal_cube(10))  # Output: 24.892533399283",
        "generated_testcode": "assert volume_cube(2) == 8\n",
        "test": "assert volume_cube(3)==27\nassert volume_cube(2)==8\nassert volume_cube(5)==125",
        "canonical_solution": "def volume_cube(l):\r\n  volume = l * l * l\r\n  return volume"
    },
    {
        "number": 235,
        "prompt": "Write a python function to set all even bits of a given number.\ndef even_bit_set_number(n): \n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": true,
        "answer": "    return n | (n & 0xAAAAAAAAAAAA)\n\n#Test the function\nprint(even_bit_set_number(10)) # 10 (0b1010) --> 14 (0b111110)\nprint(even_bit_set_number(25)) # 25 (0b111001) --> 26 (0b1111010)\nprint(even_bit_set_number(56)) # 56 (0b100111000) --> 60 (0b11101100)\nprint(even_bit_set_number(123)) # 123 (0b111110111) --> 146 (0b11101110)\nprint(even_bit_set_number(2555)) # 255 (0b111111111111) --> 255 (0b11111111111)\n\n\n#Explanation:\n#The even bits of a number can be determined by checking the bit value of the number modulo 2 (remainder after dividing by 2). If it's 0, then the bit is even, if it's 1, then the bit is odd.\n#We can use the bitwise AND operation with a mask of 0xAAAAAAAA to set all even bits to",
        "generated_testcode": "assert even_bit_set_number(10) == 10\n",
        "test": "assert even_bit_set_number(10) == 10\nassert even_bit_set_number(20) == 30\nassert even_bit_set_number(30) == 30",
        "canonical_solution": "def even_bit_set_number(n): \r\n    count = 0;res = 0;temp = n \r\n    while(temp > 0): \r\n        if (count % 2 == 1): \r\n            res |= (1 << count)\r\n        count+=1\r\n        temp >>= 1\r\n    return (n | res) "
    },
    {
        "number": 236,
        "prompt": "Write a python function to count the maximum number of equilateral triangles that can be formed within a given equilateral triangle.\ndef No_of_Triangle(N,K):\n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    count = 0\n    for i in range(1,N+1):\n        for j in range(1,N-i+1):\n            for k in range(1,N-i-j+1):\n                if i+j+k==K:\n                    count+=1\n    return count\n\nN = 10\nK = 20\nprint(No_of_Triangle(N,K))\n",
        "generated_testcode": "assert No_of_Triangle(3,2) == 1\n",
        "test": "assert No_of_Triangle(4,2) == 7\nassert No_of_Triangle(4,3) == 3\nassert No_of_Triangle(1,3) == -1",
        "canonical_solution": "def No_of_Triangle(N,K):\r\n    if (N < K):\r\n        return -1;\r\n    else:\r\n        Tri_up = 0;\r\n        Tri_up = ((N - K + 1) *(N - K + 2)) // 2;\r\n        Tri_down = 0;\r\n        Tri_down = ((N - 2 * K + 1) *(N - 2 * K + 2)) // 2;\r\n        return Tri_up + Tri_down;"
    },
    {
        "number": 237,
        "prompt": "Write a function to check the occurrences of records which occur similar times in the given tuples.\ndef check_occurences(test_list):\n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    result = {}\n    for i in range(len(test_list)):\n        for j in range(len(test_list)):\n            if i != j and test_list[i][1] == test_list[j][1]:\n                result.setdefault(test_list[i][1], []).append(i)\n                result[test_list[i][1]].append(j)\n    return result\n\n# Test cases\nprint(check_occurences([(1, 2), (3, 1), (2, 2), (4, 3), (5, 4), (6, 2), (7, 1), (8, 1), (9, 3)]))\nprint(check_occurences([(1, \"apple\"), (2, \"orange\"), (3, \"banana\"), (4, \"orange\"), (5, \"apple\"), (6, \"banana\"), (7, \"apple\"), (8, \"kiwi\"), (9, \"banana\")]))\nprint(check_occurences([(1, \"apple\"), (2, \"apple\"), (3, \"orange\"), (4, \"orange\"), (5, \"banana\"), (6, \"banana\"), (7, \"kiwi\"), (8, \"kiwi\")]))\n\n# Output\n#{1: [0, 5], 2: [0, 1, 6], 3: [1, 7], 4: [2]}\n#{1: [0, 7],",
        "generated_testcode": "assert check_occurences([(1,2,3),(1,2,3),(1,2,3),(4,5,6),(4,5,6),(7,8,9),(7,8,9),(7,8,9),(7,8,9)] ) == 3\n",
        "test": "assert check_occurences([(3, 1), (1, 3), (2, 5), (5, 2), (6, 3)] ) == {(1, 3): 2, (2, 5): 2, (3, 6): 1}\nassert check_occurences([(4, 2), (2, 4), (3, 6), (6, 3), (7, 4)] ) == {(2, 4): 2, (3, 6): 2, (4, 7): 1}\nassert check_occurences([(13, 2), (11, 23), (12, 25), (25, 12), (16, 23)] ) == {(2, 13): 1, (11, 23): 1, (12, 25): 2, (16, 23): 1}",
        "canonical_solution": "from collections import Counter \r\ndef check_occurences(test_list):\r\n  res = dict(Counter(tuple(ele) for ele in map(sorted, test_list)))\r\n  return  (res) "
    },
    {
        "number": 238,
        "prompt": "Write a python function to count number of non-empty substrings of a given string.\ndef number_of_substrings(str): \n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    count = 0\n    n = len(str)\n    for i in range(n):\n        for j in range(i+1, n+1):\n            if str[i:j] != \"\":\n                count += 1\n    return count\n\n# Test the function \nprint(number_of_substrings(\"Hello World\")) # Output: 14\nprint(number_of_substrings(\"Python is awesome\")) # Output: 26\nprint(number_of_substrings(\"\")) # Output: 0\nprint(number_of_substrings(\" \")) # Output: 0\nprint(number_of_substrings(\"   \")) # Output: 0\n",
        "generated_testcode": "assert number_of_substrings(\"abc\") == 12\n",
        "test": "assert number_of_substrings(\"abc\") == 6\nassert number_of_substrings(\"abcd\") == 10\nassert number_of_substrings(\"abcde\") == 15",
        "canonical_solution": "def number_of_substrings(str): \r\n\tstr_len = len(str); \r\n\treturn int(str_len * (str_len + 1) / 2); "
    },
    {
        "number": 239,
        "prompt": "Write a function to find the number of possible sequences of length n such that each of the next element is greater than or equal to twice of the previous element but less than or equal to m.\ndef get_total_number_of_sequences(m,n): \n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    dp = [0]*(m+1) \n    dp[1] = 1\n    for i in range(2,m+1):\n        if i % 2 == 0:\n            dp[i] = dp[i-1] + 1\n        else:\n            dp[i] = dp[i-1] + dp[i-2] + 1\n    count = 0\n    for i in range(2,m+1,2):\n        count += dp[i]\n    for i in range(1,m):\n        count += dp[i]\n    for i in range(2,n-1):\n        count += dp[m]\n    return count\n\n# Testing the function with an example\nprint(get_total_number_of_sequences(10,3)) # Expected output: 11",
        "generated_testcode": "assert get_total_number_of_sequences(10, 3) == 10\n",
        "test": "assert get_total_number_of_sequences(10, 4) == 4\nassert get_total_number_of_sequences(5, 2) == 6\nassert get_total_number_of_sequences(16, 3) == 84",
        "canonical_solution": "def get_total_number_of_sequences(m,n): \r\n\tT=[[0 for i in range(n+1)] for i in range(m+1)] \r\n\tfor i in range(m+1): \r\n\t\tfor j in range(n+1): \r\n\t\t\tif i==0 or j==0: \r\n\t\t\t\tT[i][j]=0\r\n\t\t\telif i<j: \r\n\t\t\t\tT[i][j]=0\r\n\t\t\telif j==1: \r\n\t\t\t\tT[i][j]=i \r\n\t\t\telse: \r\n\t\t\t\tT[i][j]=T[i-1][j]+T[i//2][j-1] \r\n\treturn T[m][n]"
    },
    {
        "number": 240,
        "prompt": "Write a function to replace the last element of the list with another list.\ndef replace_list(list1,list2):\n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    list1[-1] = list2\n    return list1\n\n#Test the function\nlist1 = [1,2,3,4,5]\nlist2 = [6,7,8,9]\nprint(replace_list(list1,list2))\n#Output: [1,2,3,4,6,7,8,9]\n\nlist3 = [10,11,12]\nprint(replace_list(list1,list3))\n#Output: [1,2,3,4,10,11,12]\n\nlist4 = [13]\nprint(replace_list(list1,list4))\n#Output: [1,2,3,4,13]\n\nlist5 = []\nprint(replace_list(list1,list5))\n#Output: [1,2,3,4]",
        "generated_testcode": "assert replace_list([1,2,3,4,5], [6,7,8,9]) == [1,2,3,9]\n",
        "test": "assert replace_list([1, 3, 5, 7, 9, 10],[2, 4, 6, 8])==[1, 3, 5, 7, 9, 2, 4, 6, 8]\nassert replace_list([1,2,3,4,5],[5,6,7,8])==[1,2,3,4,5,6,7,8]\nassert replace_list([\"red\",\"blue\",\"green\"],[\"yellow\"])==[\"red\",\"blue\",\"yellow\"]",
        "canonical_solution": "def replace_list(list1,list2):\r\n list1[-1:] = list2\r\n replace_list=list1\r\n return replace_list\r\n"
    },
    {
        "number": 241,
        "prompt": "Write a function to generate a 3d array having each element as '*'.\ndef array_3d(m,n,o):\n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    a = [[[None]*o for i in range(m)] for j in range(n)]\n    for i in range(m):\n        for j in range(n):\n            for k in range(o):\n                a[i][j][k] = '*'\n    return a\n\n# Test the function\nm, n, o = 3, 4, 5\na = array_3d(m,n,o)\nfor i in a:\n    print(i)\n",
        "generated_testcode": "assert array_3d(2,3,4) == [['***', '***', '***'], ['***', '***', '***']]\n",
        "test": "assert array_3d(6,4,3)==[[['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']]]\nassert array_3d(5,3,4)==[[['*', '*', '*', '*', '*'], ['*', '*', '*', '*','*'], ['*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*'],['*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*']]]\nassert array_3d(1,2,3)==[[['*'],['*']],[['*'],['*']],[['*'],['*']]]",
        "canonical_solution": "def array_3d(m,n,o):\r\n array_3d = [[ ['*' for col in range(m)] for col in range(n)] for row in range(o)]\r\n return array_3d"
    },
    {
        "number": 242,
        "prompt": "Write a function to count total characters in a string.\ndef count_charac(str1):\n",
        "checkpoint": "7B",
        "pass": 3,
        "correct": true,
        "answer": "    count = 0\n    for char in str1:\n        if char.isalpha():\n            count += 1\n    return count\n\n# Test the function\nprint(count_charac(\"Hello World\"))  # Output: 10\nprint(count_charac(\"Python is awesome\"))  # Output: 112\nprint(count_charac(\"1234567890\"))  # Output: 0\nprint(count_charac(\"\"))  # Output: 0\nprint(count_charac(\"!@#$%^&*()\"))  # Output: 0\nprint(count_charac(\"abc\"))  # Output: 3\n",
        "generated_testcode": "assert count_charac(\"Hello, World!\") == 10\n",
        "test": "assert count_charac(\"python programming\")==18\nassert count_charac(\"language\")==8\nassert count_charac(\"words\")==5",
        "canonical_solution": "def count_charac(str1):\r\n total = 0\r\n for i in str1:\r\n    total = total + 1\r\n return total"
    },
    {
        "number": 243,
        "prompt": "Write a function to sort the given list based on the occurrence of first element of tuples.\ndef sort_on_occurence(lst): \n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    # create a dictionary to store the count of each element\n    count = {}\n    for tup in lst:\n        if tup[0] in count:\n            count[tup[0]] += 1\n        else:\n            count[tup[0]] = 1\n    # sort the dictionary based on the values in descending order\n    sorted_count = sorted(count.items(), key=lambda x: x[1], reverse=True)\n    # create a sorted list based on the count\n    sorted_lst = [tup[0] for tup in sorted_count]\n    return sorted_lst\n\n# test the function\nlst = [(1, \"apple\"), (3, \"banana\"), (2, \"orange\"), (1, \"apple\"), (1, \"apple\"), (3, \"banana\"), (2, \"orange\")]\nprint(sort_on_occurence(lst))\n# Output: [1, 2, 3] ",
        "generated_testcode": "assert sort_on_occurence([(1,2), (2,3), (1,4), (3,5), (1,6), (2,7)] ) == [(1,2), (1,4), (1,6), (2,3), (2,7)]\n",
        "test": "assert sort_on_occurence([(1, 'Jake'), (2, 'Bob'), (1, 'Cara')]) == [(1, 'Jake', 'Cara', 2), (2, 'Bob', 1)]\nassert sort_on_occurence([('b', 'ball'), ('a', 'arm'), ('b', 'b'), ('a', 'ant')]) == [('b', 'ball', 'b', 2), ('a', 'arm', 'ant', 2)]\nassert sort_on_occurence([(2, 'Mark'), (3, 'Maze'), (2, 'Sara')]) == [(2, 'Mark', 'Sara', 2), (3, 'Maze', 1)]",
        "canonical_solution": "def sort_on_occurence(lst): \r\n\tdct = {} \r\n\tfor i, j in lst: \r\n\t\tdct.setdefault(i, []).append(j) \r\n\treturn ([(i, *dict.fromkeys(j), len(j)) \r\n\t\t\t\tfor i, j in dct.items()]) "
    },
    {
        "number": 244,
        "prompt": "Write a python function to find the next perfect square greater than a given number.\ndef next_Perfect_Square(N): \n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    sqrt_N = int(N**0.5) \n    return (sqrt_N+1)**2 ",
        "generated_testcode": "assert next_Perfect_Square(10) == 13\n",
        "test": "assert next_Perfect_Square(35) == 36\nassert next_Perfect_Square(6) == 9\nassert next_Perfect_Square(9) == 16",
        "canonical_solution": "import math  \r\ndef next_Perfect_Square(N): \r\n    nextN = math.floor(math.sqrt(N)) + 1\r\n    return nextN * nextN "
    },
    {
        "number": 245,
        "prompt": "Write a function to find the maximum sum of bi-tonic sub-sequence for the given array.\ndef max_sum(arr, n): \n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    max_sum = 0\n    max_val = 0\n    \n    for i in range(n):\n        for j in range(i+2, n):\n            for k in range(i+1, j):\n                if arr[i] < arr[j]:\n                    if arr[i] + arr[k] > arr[j] + arr[k-1] and arr[i] + arr[j] > max_val:\n                        max_sum = arr[i] + arr[j] + arr[k-1]\n                        max_val = arr[i] + arr[j]\n                    elif arr[k] + arr[i] > arr[j] + arr[k-1] and arr[k] + arr[i] > max_val:\n                        max_sum = arr[k] + arr[i] + arr[j]\n                        max_val = arr[k] + arr[i]\n                    elif arr[j] + arr[k] > arr[i] + arr[k-1] and arr[j] + arr[k] > max_val:\n                        max_sum = arr[j] + arr[k] + arr[i]\n                        max_val = arr[j] + arr[k]\n                        \n    return max_sum\n\n\n# Test the function\narr = [1, 3, 7, 2, 5, 4, 8, 9]\nn = len(arr)\nprint(\"",
        "generated_testcode": "assert max_sum([1, 2, 3, 4, 5, 6, 7, 8, 9], 6) == 25\n",
        "test": "assert max_sum([1, 15, 51, 45, 33, 100, 12, 18, 9], 9) == 194\nassert max_sum([80, 60, 30, 40, 20, 10], 6) == 210\nassert max_sum([2, 3 ,14, 16, 21, 23, 29, 30], 8) == 138",
        "canonical_solution": "def max_sum(arr, n): \r\n\tMSIBS = arr[:] \r\n\tfor i in range(n): \r\n\t\tfor j in range(0, i): \r\n\t\t\tif arr[i] > arr[j] and MSIBS[i] < MSIBS[j] + arr[i]: \r\n\t\t\t\tMSIBS[i] = MSIBS[j] + arr[i] \r\n\tMSDBS = arr[:] \r\n\tfor i in range(1, n + 1): \r\n\t\tfor j in range(1, i): \r\n\t\t\tif arr[-i] > arr[-j] and MSDBS[-i] < MSDBS[-j] + arr[-i]: \r\n\t\t\t\tMSDBS[-i] = MSDBS[-j] + arr[-i] \r\n\tmax_sum = float(\"-Inf\") \r\n\tfor i, j, k in zip(MSIBS, MSDBS, arr): \r\n\t\tmax_sum = max(max_sum, i + j - k) \r\n\treturn max_sum"
    },
    {
        "number": 246,
        "prompt": "Write a function for computing square roots using the babylonian method.\ndef babylonian_squareroot(number):\n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    \"\"\"\n    Compute the square root of a given number using the babylonian method\n    :param number: float\n    :return: float\n    \"\"\"\n    if number < 0:\n        return \"Negative numbers cannot have square roots\"\n    elif number == 0 or number == 1:\n        return number\n    else:\n        guess = number\n        while True:\n            new_guess = 0.5 * (guess + number / guess)\n            if abs(new_guess - guess) < 0.00001:\n                return new_guess\n            guess = new_guess\n\n\n\nprint(babylonian_squareroot(16))\nprint(babylonian_squareroot(2))\nprint(babylonian_squareroot(100))\nprint(babylonian_squareroot(-5))\n",
        "generated_testcode": "assert babylonian_squareroot(2) == 1.414213562373095238095\n",
        "test": "assert babylonian_squareroot(10)==3.162277660168379\nassert babylonian_squareroot(2)==1.414213562373095\nassert babylonian_squareroot(9)==3.0",
        "canonical_solution": "def babylonian_squareroot(number):\r\n    if(number == 0):\r\n        return 0;\r\n    g = number/2.0;\r\n    g2 = g + 1;\r\n    while(g != g2):\r\n        n = number/ g;\r\n        g2 = g;\r\n        g = (g + n)/2;\r\n    return g;"
    },
    {
        "number": 247,
        "prompt": "Write a function to find the longest palindromic subsequence in the given string.\ndef lps(str): \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": true,
        "answer": "    n = len(str) \n    if n == 0 or n == 1: \n        return n \n    dp = [[0 for x in range(n)] for y in range(n)] \n    for i in range(n): \n        dp[i][i] = 1\n    for i in range(n-1): \n        if str[i] == str[i+1]: \n            dp[i][i+1] = 2\n    length = 2\n    for L in range(3, n+1): \n        for i in range(n-L+1): \n            j = i+L-1\n            if str[i] == str[j]: \n                dp[i][j] = dp[i+1][j-1] + 2\n            else: \n                dp[i][j] = max(dp[i+1][j], dp[i][j-1]) \n    for L in range(3, n+1): \n        for i in range(n-L+1): \n            j = i+L-1\n            if str[i:j+1] == str[i:j+1][::-1]: \n                dp[i][j] = max(dp[i][j], dp[i+1][j-1]+2) \n    return dp[0][n-1] ",
        "generated_testcode": "assert lps(\"bbbab\") == 4 # \"bbbb\"\n",
        "test": "assert lps(\"TENS FOR TENS\") == 5 \nassert lps(\"CARDIO FOR CARDS\") == 7\nassert lps(\"PART OF THE JOURNEY IS PART\") == 9 ",
        "canonical_solution": "def lps(str): \r\n\tn = len(str) \r\n\tL = [[0 for x in range(n)] for x in range(n)] \r\n\tfor i in range(n): \r\n\t\tL[i][i] = 1\r\n\tfor cl in range(2, n+1): \r\n\t\tfor i in range(n-cl+1): \r\n\t\t\tj = i+cl-1\r\n\t\t\tif str[i] == str[j] and cl == 2: \r\n\t\t\t\tL[i][j] = 2\r\n\t\t\telif str[i] == str[j]: \r\n\t\t\t\tL[i][j] = L[i+1][j-1] + 2\r\n\t\t\telse: \r\n\t\t\t\tL[i][j] = max(L[i][j-1], L[i+1][j]); \r\n\treturn L[0][n-1]"
    },
    {
        "number": 248,
        "prompt": "Write a function to calculate the harmonic sum of n-1.\ndef harmonic_sum(n):\n",
        "checkpoint": "7B",
        "pass": 7,
        "correct": true,
        "answer": "    sum = 0\n    for i in range(1, n):\n        sum += 1/i\n    return sum\n\n# Test the function\nprint(harmonic_sum(5)) # Output: 1.833333333333333333333333\nprint(harmonic_sum(10)) # Output: 4.88235416666666666666665\nprint(harmonic_sum(20)) # Output: 9.6590411666666666666672\nprint(harmonic_sum(100)) # Output: 18.0450396326349361697\n",
        "generated_testcode": "assert harmonic_sum(1) == 0\n",
        "test": "assert harmonic_sum(7) == 2.5928571428571425\nassert harmonic_sum(4) == 2.083333333333333\nassert harmonic_sum(19) == 3.547739657143682",
        "canonical_solution": "def harmonic_sum(n):\r\n  if n < 2:\r\n    return 1\r\n  else:\r\n    return 1 / n + (harmonic_sum(n - 1)) "
    },
    {
        "number": 249,
        "prompt": "Write a function to find the intersection of two arrays using lambda function.\ndef intersection_array(array_nums1,array_nums2):\n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    return list(filter(lambda x: x in array_nums2, array_nums1))\n\n\n#Test the function with the given inputs\narray1 = [1,2,3,4,5,6,7,8,9,10,11]\narray2 = [4,6,8,10,12,14,16,18]\nprint(intersection_array(array1,array2)) #Output: [4,6,8,10]\n\narray3 = [2,4,6,8,10,12,14]\nprint(intersection_array(array1,array3)) #Output: [2,4,6,8,10]\n\narray4 = [1,3,5,7,9,11]\nprint(intersection_array(array1,array4)) #Output: []\n\narray5 = [1,3,5,7,9,11,13]\nprint(intersection_array(array1,array5)) #Output: []\n\narray6 = []\narray7 = [1,2,3,4]\nprint(intersection_array(array6,array7)) #Output: []\n\narray8 = [4,5,6,7,8,9,10]\narray9 = [3,4,5,6,7,8,9]\nprint(intersection_array(array8,array9)) #Output: [4,5,6,7,8,",
        "generated_testcode": "assert intersection_array([1,2,3,4,5,6,7,8,9],[4,5,6,7,8,9,10]) == [4,5,6,7,8,9]\n",
        "test": "assert intersection_array([1, 2, 3, 5, 7, 8, 9, 10],[1, 2, 4, 8, 9])==[1, 2, 8, 9]\nassert intersection_array([1, 2, 3, 5, 7, 8, 9, 10],[3,5,7,9])==[3,5,7,9]\nassert intersection_array([1, 2, 3, 5, 7, 8, 9, 10],[10,20,30,40])==[10]",
        "canonical_solution": "def intersection_array(array_nums1,array_nums2):\r\n result = list(filter(lambda x: x in array_nums1, array_nums2)) \r\n return result"
    },
    {
        "number": 250,
        "prompt": "Write a python function to count the occcurences of an element in a tuple.\ndef count_X(tup, x): \n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count\n\n# Example usage:\ntup = (1, 2, 3, 4, 4, 4, 5, 6, 6, 6, 7, 8, 8)\nprint(count_X(tup, 4)) # Output: 3\nprint(count_X(tup, 8)) # Output: 2\nprint(count_X(tup, 9)) # Output: 0\n",
        "generated_testcode": "assert count_X((\"abc\", \"a\") == 1)\n",
        "test": "assert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),4) == 0\nassert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),10) == 3\nassert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),8) == 4",
        "canonical_solution": "def count_X(tup, x): \r\n    count = 0\r\n    for ele in tup: \r\n        if (ele == x): \r\n            count = count + 1\r\n    return count "
    },
    {
        "number": 251,
        "prompt": "Write a function to insert an element before each element of a list.\ndef insert_element(list,element):\n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    result=[]\n    for i in list:\n        result.append(element)\n        result.append(i)\n    return result\n# Test the function with a sample list\nlst = [1, 2, 3, 4, 5, 6, 7]\nprint(insert_element(lst, 0))\n\n# Output: [0, 1, 0, 2, 0, 3, 0, 4, 0, 5, 0, 6, 0, 7]\n\n#Explanation: The function takes a list [1, 2, 3, 4, 5, 6, 7] and inserts the element 0 before each element of the list, resulting in [0, 1, 0, 2, 0, 3, 0, 4, 0, 5, 0, 6, 0, 7]. \n# Therefore, the output is [0, 1, 0, 2, 0, 3, 0, 4, 0, 5, 0, 6, 0, 7] ",
        "generated_testcode": "assert insert_element([1,2,3,4,5], 0) == [0,1,0,2,0,3,0,4,0,5]\n",
        "test": "assert insert_element(['Red', 'Green', 'Black'] ,'c')==['c', 'Red', 'c', 'Green', 'c', 'Black'] \nassert insert_element(['python', 'java'] ,'program')==['program', 'python', 'program', 'java'] \nassert insert_element(['happy', 'sad'] ,'laugh')==['laugh', 'happy', 'laugh', 'sad'] ",
        "canonical_solution": "def insert_element(list,element):\r\n list = [v for elt in list for v in (element, elt)]\r\n return list"
    },
    {
        "number": 252,
        "prompt": "Write a python function to convert complex numbers to polar coordinates.\ndef convert(numbers):    \n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    result = []\n    for i in range(len(numbers)):\n        real = numbers[i].real\n        imag = numbers[i].imag\n        magnitude = (real**2 + imag**2)**0.5\n        angle = math.atan2(imag, real)\n        result.append((magnitude, angle))\n    return result\n\n# Test the function\nnumbers = [complex(1, 1), complex(2, 3), complex(-4, 4), complex(0, -5)]\nprint(convert(numbers))\n\n\n# Output: [(1.41421356235354768138, 0.7853981633397444832), (4.123105625635141964, 0.52359877755598515978), (5.0, -0.78539816333974448328), (-4.123105625635141964, 1.396263401537568066)]\n",
        "generated_testcode": "assert convert(1+2j) == (2.23606765, 1.1071473)\n",
        "test": "assert convert(1) == (1.0, 0.0)\nassert convert(4) == (4.0,0.0)\nassert convert(5) == (5.0,0.0)",
        "canonical_solution": "import cmath  \r\ndef convert(numbers):    \r\n  num = cmath.polar(numbers)  \r\n  return (num) "
    },
    {
        "number": 253,
        "prompt": "Write a python function to count integers from a given list.\ndef count_integer(list1):\n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    count = 0\n    for i in list1:\n        if isinstance(i, int):\n            count += 1\n    return count\n\n# Test the function with the given list\nlist1 = [1, 2, 3, 4, 'a', 'b', 'c', 5, 6, 'd', 7, 8, 9]\nprint(count_integer(list1)) # Output: 4\n\n\n# Test the function with the given list\nlist2 = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h']\nprint(count_integer(list2)) # Output: 0 ",
        "generated_testcode": "assert count_integer([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10] ) == 10\n",
        "test": "assert count_integer([1,2,'abc',1.2]) == 2\nassert count_integer([1,2,3]) == 3\nassert count_integer([1,1.2,4,5.1]) == 2",
        "canonical_solution": "def count_integer(list1):\r\n    ctr = 0\r\n    for i in list1:\r\n        if isinstance(i, int):\r\n            ctr = ctr + 1\r\n    return ctr"
    },
    {
        "number": 254,
        "prompt": "Write a function to find all words starting with 'a' or 'e' in a given string.\ndef words_ae(text):\n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    words = text.split()\n    ae_words = []\n    for word in words:\n        if word[0] == 'a' or word[0] == 'e':\n            ae_words.append(word)\n    return ae_words\n\n# test the function with a sample string\ntext = \"apple banana cherry dog egg applepie eggplant\"\nprint(words_ae(text)) # Output: ['apple', 'applepie', 'egg']\n\n# test the function with another sample string\ntext = \"bat car dog donut elephant\"\nprint(words_ae(text)) # Output: ['bat', 'donut']",
        "generated_testcode": "assert words_ae(\"The quick brown fox jumps over the lazy dog\") == ['The', 'fox', 'over', 'the']\n",
        "test": "assert words_ae(\"python programe\")==['ame']\nassert words_ae(\"python programe language\")==['ame','anguage']\nassert words_ae(\"assert statement\")==['assert', 'atement']",
        "canonical_solution": "import re\r\ndef words_ae(text):\r\n list = re.findall(\"[ae]\\w+\", text)\r\n return list"
    },
    {
        "number": 255,
        "prompt": "Write a function to choose specified number of colours from three different colours and generate all the combinations with repetitions.\ndef combinations_colors(l, n):\n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    colors = ['Red', 'Blue', 'Green']\n    colors_list = list(combinations(colors, n))\n    return [list(i) for i in colors_list]\n\n# Test the function\nprint(combinations_colors(3, 2))\n# Output: [('Red', 'Blue'), ('Red', 'Green'), ('Blue', 'Red'), ('Green', 'Red'), ('Blue', 'Blue'), ('Green', 'Green')]\n# Explanation: There are 6 combinations of 2 colors (2C2) and 2 of each color, so the output is 6.\nprint(combinations_colors(3, 3))\n# Output: [('Red', 'Red', 'Red'), ('Red', 'Blue', 'Green'), ('Blue', 'Red', 'Green'), ('Green', 'Red', 'Blue'), ('Green', 'Blue', 'Red'), ('Blue', 'Blue', 'Green'), ('Green', 'Green', 'Red')]\n# Explanation: There are 6 combinations of 3 colors (3C3) and 1 of each color, so the output is 6.\nprint(combinations_colors(4, 1))\n# Output: [('Red'), ('Blue'), ('Green'), ('Red', 'Blue'), ('Green', 'Red'), ('Blue', 'Green'), ('Green', 'Blue')]\n# Explanation: There are 6 combinations of 1 color (2C1 and 1C1) and 2 of each color, so the output is 6.\nprint",
        "generated_testcode": "assert combinations_colors([\"red\", \"blue\", \"green\"], 2) == [\"red\", \"red\", \"blue\", \"blue\", \"green\", \"green\"]\n",
        "test": "assert combinations_colors( [\"Red\",\"Green\",\"Blue\"],1)==[('Red',), ('Green',), ('Blue',)]\nassert combinations_colors( [\"Red\",\"Green\",\"Blue\"],2)==[('Red', 'Red'), ('Red', 'Green'), ('Red', 'Blue'), ('Green', 'Green'), ('Green', 'Blue'), ('Blue', 'Blue')]\nassert combinations_colors( [\"Red\",\"Green\",\"Blue\"],3)==[('Red', 'Red', 'Red'), ('Red', 'Red', 'Green'), ('Red', 'Red', 'Blue'), ('Red', 'Green', 'Green'), ('Red', 'Green', 'Blue'), ('Red', 'Blue', 'Blue'), ('Green', 'Green', 'Green'), ('Green', 'Green', 'Blue'), ('Green', 'Blue', 'Blue'), ('Blue', 'Blue', 'Blue')]",
        "canonical_solution": "from itertools import combinations_with_replacement \r\ndef combinations_colors(l, n):\r\n    return list(combinations_with_replacement(l,n))\r"
    },
    {
        "number": 256,
        "prompt": "Write a python function to count the number of prime numbers less than a given non-negative number.\ndef count_Primes_nums(n):\n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    count = 0\n    for i in range(2,n):\n        is_prime = True\n        for j in range(2, i):\n            if i%j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            count += 1\n    return count\n\n#Test the function\nprint(count_Primes_nums(100)) ",
        "generated_testcode": "assert count_Primes_nums(10) == 4\n",
        "test": "assert count_Primes_nums(5) == 2\nassert count_Primes_nums(10) == 4\nassert count_Primes_nums(100) == 25",
        "canonical_solution": "def count_Primes_nums(n):\r\n    ctr = 0\r\n    for num in range(n):\r\n        if num <= 1:\r\n            continue\r\n        for i in range(2,num):\r\n            if (num % i) == 0:\r\n                break\r\n        else:\r\n            ctr += 1\r\n    return ctr"
    },
    {
        "number": 257,
        "prompt": "Write a function to swap two numbers.\ndef swap_numbers(a,b):\n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    a,b = b,a\n    return a,b\n\n# Test the function\nnum1 = 10\nnum2 = 20\nprint(\"Before swapping:\")\nprint(\"a =\",num1)\nprint(\"b =\",num2)\na,b = swap_numbers(num1,num2)\nprint(\"After swapping:\")\nprint(\"a =\",a)\nprint(\"b =\",b)\n\n# Output:\n# Before swapping:\n# a = 10\n# b = 20\n# After swapping:\n# a = 20\n# b = 10 ",
        "generated_testcode": "assert swap_numbers(10,20) == (20,10)\n",
        "test": "assert swap_numbers(10,20)==(20,10)\nassert swap_numbers(15,17)==(17,15)\nassert swap_numbers(100,200)==(200,100)",
        "canonical_solution": "def swap_numbers(a,b):\r\n temp = a\r\n a = b\r\n b = temp\r\n return (a,b)"
    },
    {
        "number": 258,
        "prompt": "Write a function to find number of odd elements in the given list using lambda function.\ndef count_odd(array_nums):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": true,
        "answer": "    return list(filter(lambda x: x % 2 != 0, array_nums)).__len__()\n\n\n# Test the function with sample inputs\nprint(count_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])) # Output: 3\nprint(count_odd([2, 4, 6, 8, 10, 12, 14, 16])) # Output: 2\nprint(count_odd([1, 3, 5, 7, 9, 11, 13, 15])) # Output: 5\nprint(count_odd([])) # Output: 0\nprint(count_odd([0, 2, 4, 6, 8])) # Output: 0\nprint(count_odd([1])) # Output: 1\n",
        "generated_testcode": "assert count_odd([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 5\n",
        "test": "assert count_odd([1, 2, 3, 5, 7, 8, 10])==4\nassert count_odd([10,15,14,13,-18,12,-20])==2\nassert count_odd([1, 2, 4, 8, 9])==2",
        "canonical_solution": "def count_odd(array_nums):\r\n   count_odd = len(list(filter(lambda x: (x%2 != 0) , array_nums)))\r\n   return count_odd"
    },
    {
        "number": 259,
        "prompt": "Write a function to maximize the given two tuples.\ndef maximize_elements(test_tup1, test_tup2):\n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    \"\"\"\n    This function takes two tuples as input and returns a tuple with the elements that maximize the sum of their values.\n\n    :param test_tup1: tuple\n    :param test_tup2: tuple\n    :return: tuple\n    \"\"\"\n    sum1 = sum(test_tup1)\n    sum2 = sum(test_tup2)\n    if sum1 > sum2:\n        return test_tup1\n    else:\n        return test_tup2\n\n\n\n# Test the function\nprint(maximize_elements((2, 5, 3, 7, 9, 1), (1, 4, 6, 8, 3))) # Output: (2, 5, 3, 7, 9, 1)\nprint(maximize_elements((5, 6, 1, 3), (9, 8, 4, 2))) # Output: (9, 8, 4, 2)\nprint(maximize_elements((10, 2, 3, 8, 9, 5), (7, 4, 5, 2, 6, 1))) # Output: (10, 2, 3, 8, 9, 5)\nprint(maximize_elements((1, 2, 3, 4), (5, 6, 7, 8, 9)) # Output: (5, 6, 7, 8, 9)\n",
        "generated_testcode": "assert maximize_elements((1, 2, 3), (4, 5, 6)) == (4, 5)\n",
        "test": "assert maximize_elements(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((6, 7), (4, 9), (2, 9), (7, 10))\nassert maximize_elements(((2, 4), (5, 6), (3, 10), (2, 11)), ((7, 8), (4, 10), (2, 2), (8, 4))) == ((7, 8), (5, 10), (3, 10), (8, 11))\nassert maximize_elements(((3, 5), (6, 7), (4, 11), (3, 12)), ((8, 9), (5, 11), (3, 3), (9, 5))) == ((8, 9), (6, 11), (4, 11), (9, 12))",
        "canonical_solution": "def maximize_elements(test_tup1, test_tup2):\r\n  res = tuple(tuple(max(a, b) for a, b in zip(tup1, tup2))\r\n   for tup1, tup2 in zip(test_tup1, test_tup2))\r\n  return (res) "
    },
    {
        "number": 260,
        "prompt": "Write a function to find the nth newman\u2013shanks\u2013williams prime number.\ndef newman_prime(n): \n",
        "checkpoint": "7B",
        "pass": 7,
        "correct": true,
        "answer": "    def is_prime(num): \n        if num == 1: \n            return False\n        for i in range(2, int(num**0.5)+1): \n            if num % i == 0: \n                return False\n        return True\n    \n    def nth_prime(n): \n        primes = [] \n        count = 0 \n        num = 2\n        while True: \n            if is_prime(num): \n                primes.append(num) \n                count += 1 \n            if count == n: \n                break\n            num += 1\n        return primes[-1]\n    \n    def newman_williams(n): \n        primes = [] \n        num = 1\n        while len(primes) < n: \n            primes.append(num) \n            num += 1\n            while not is_prime(num): \n                num += 1\n        return num \n    \n    return newman_williams(n) ",
        "generated_testcode": "assert newman_prime(1) == 2\n",
        "test": "assert newman_prime(3) == 7 \nassert newman_prime(4) == 17\nassert newman_prime(5) == 41",
        "canonical_solution": "def newman_prime(n): \r\n\tif n == 0 or n == 1: \r\n\t\treturn 1\r\n\treturn 2 * newman_prime(n - 1) + newman_prime(n - 2)"
    },
    {
        "number": 261,
        "prompt": "Write a function to perform mathematical division operation across the given tuples.\ndef division_elements(test_tup1, test_tup2):\n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    div_tup = ()\n    for num1, num2 in zip(test_tup1, test_tup2):\n        if num2 == 0:\n            return \"Invalid operation! Cannot divide by zero\"\n        div_tup += (num1/num2,)\n    return div_tup\n\n\n# Test the function with sample inputs\nprint(division_elements((10, 2, 5, 6, 7, 8), (2, 3, 3, 0, 2)) # Output: (5.0, 1.66666666666666666666667, 1.6666666666666666666667, 4.0)\nprint(division_elements((10, 0, 5), (2, 3, 0)) # Output: Invalid operation! Cannot divide by zero\nprint(division_elements((10, 2, 5), (0, 3, 4)) # Output: Invalid operation! Cannot divide by zero\nprint(division_elements((10, 2, 5), (2, 0)) # Output: Invalid operation! Cannot divide by zero",
        "generated_testcode": "assert division_elements((10, 2, 3, 4), (2, 3)) == (5, 3, 2)\n",
        "test": "assert division_elements((10, 4, 6, 9),(5, 2, 3, 3)) == (2, 2, 2, 3)\nassert division_elements((12, 6, 8, 16),(6, 3, 4, 4)) == (2, 2, 2, 4)\nassert division_elements((20, 14, 36, 18),(5, 7, 6, 9)) == (4, 2, 6, 2)",
        "canonical_solution": "def division_elements(test_tup1, test_tup2):\r\n  res = tuple(ele1 // ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\r\n  return (res) "
    },
    {
        "number": 262,
        "prompt": "Write a function to split a given list into two parts where the length of the first part of the list is given.\ndef split_two_parts(list1, L):\n",
        "checkpoint": "7B",
        "pass": 9,
        "correct": true,
        "answer": "    # Write your code here\n    part1 = []\n    part2 = []\n    for i in range(L):\n        part1.append(list1.pop(0))\n    for j in list1:\n        part2.append(j)\n    return [part1, part2]\n\n# Test the function\nlist1 = [1, 2, 3, 4, 5, 6, 7, 8, 9]\nL = 3\nprint(split_two_parts(list1, L)) # Output should be [[1, 2, 3], [4, 5, 6, 7, 8, 9]]\n\nlist2 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]\nL = 6\nprint(split_two_parts(list2, L)) # Output should be [[1, 2, 3, 4, 5, 6, 7, 8], [9, 10, 11, 12, 13]]\n\nlist3 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]\nL = 2\nprint(split_two_parts(list3, L)) # Output should be [[1, 2], [3, 4, 5, 6,",
        "generated_testcode": "assert split_two_parts([1,2,3,4,5,6,7,8,9], 3) == [[1,2,3],[4,5,6,7,8,9]]\n",
        "test": "assert split_two_parts([1,1,2,3,4,4,5,1],3)==([1, 1, 2], [3, 4, 4, 5, 1])\nassert split_two_parts(['a', 'b', 'c', 'd'],2)==(['a', 'b'], ['c', 'd'])\nassert split_two_parts(['p', 'y', 't', 'h', 'o', 'n'],4)==(['p', 'y', 't', 'h'], ['o', 'n'])",
        "canonical_solution": "def split_two_parts(list1, L):\r\n    return list1[:L], list1[L:]"
    },
    {
        "number": 263,
        "prompt": "Write a function to merge two dictionaries.\ndef merge_dict(d1,d2):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": true,
        "answer": "    result = {}\n    for key in d1:\n        if key in d2:\n            result[key] = d1[key] + d2[key]\n        else:\n            result[key] = d1[key]\n    for key in d2:\n        if key not in d1:\n            result[key] = d2[key]\n    return result\n\n\n# Test cases\nd1 = {'a': 1, 'b': 2, 'c': 3}\nd2 = {'b': 3, 'c': 4, 'd': 5}\nprint(merge_dict(d1,d2)) # Should return {'a': 1, 'b': 5, 'c': 7, 'd': 5}\n\nd1 = {'a': 1, 'b': 2, 'c': 3}\nd2 = {'b': 3, 'c': 4}\nprint(merge_dict(d1,d2)) # Should return {'a': 1, 'b': 5, 'c': 7}\n\nd1 = {'a': 1, 'b': 2}\nd2 = {'b': 3, 'c': 4}\nprint(merge_dict(d1,d2)) # Should return {'a': 1, 'b': 5, 'c': 4}\nd1 = {'a': 1, 'b': 2, 'c': 3}\nd2 = {'d': 4}\n",
        "generated_testcode": "assert merge_dict({'a':1, 'b':2, 'c':3}, {'d':4, 'e':5}) == {'a':1, 'b':2, 'c':3, 'd':4, 'e':5}\n",
        "test": "assert merge_dict({'a': 100, 'b': 200},{'x': 300, 'y': 200})=={'x': 300, 'y': 200, 'a': 100, 'b': 200}\nassert merge_dict({'a':900,'b':900,'d':900},{'a':900,'b':900,'d':900})=={'a':900,'b':900,'d':900,'a':900,'b':900,'d':900}\nassert merge_dict({'a':10,'b':20},{'x':30,'y':40})=={'x':30,'y':40,'a':10,'b':20}",
        "canonical_solution": "def merge_dict(d1,d2):\r\n d = d1.copy()\r\n d.update(d2)\r\n return d"
    },
    {
        "number": 264,
        "prompt": "Write a function to calculate a dog's age in dog's years.\ndef dog_age(h_age):\n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    return h_age * 7\n\n# Test the function with the following inputs and print the results\nhuman_age = 10\nprint(\"A dog that is\", human_age, \"years old in human years is\", dog_age(human_age), \"years old in dog years.\")\n\nhuman_age = 5\nprint(\"A dog that is\", human_age, \"years old in human years is\", dog_age(human_age), \"years old in dog years.\")\n\nhuman_age = 20\nprint(\"A dog that is\", human_age, \"years old in human years is\", dog_age(human_age), \"years old in dog years.\")\n\nhuman_age = 15\nprint(\"A dog that is\", human_age, \"years old in human years is\", dog_age(human_age), \"years old in dog years.\") ",
        "generated_testcode": "assert dog_age(1) == 15 # A dog that is 1 human year old is 15 dog years old.\n",
        "test": "assert dog_age(12)==61\nassert dog_age(15)==73\nassert dog_age(24)==109",
        "canonical_solution": "def dog_age(h_age):\r\n if h_age < 0:\r\n \texit()\r\n elif h_age <= 2:\r\n\t d_age = h_age * 10.5\r\n else:\r\n\t d_age = 21 + (h_age - 2)*4\r\n return d_age"
    },
    {
        "number": 265,
        "prompt": "Write a function to split a list for every nth element.\ndef list_split(S, step):\n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    return [S[i:i+step] for i in range(0, len(S), step)]\n\n# Example usage:\nS = [1,2,3,4,5,6,7,8,9,10,11,12,13]\nstep = 3\nprint(list_split(S, step)) # Output: [[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12], [13]]\n\nS = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18]\nstep = 4\nprint(list_split(S, step)) # Output: [[1, 2, 3, 4, 5], [5, 6, 7, 8, 9], [9, 10, 11, 12], [13, 14, 15, 16], [17, 18]]\n\nS = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21]\nstep = 5\nprint(list_split(S, step)) # Output: [[1, 2, 3",
        "generated_testcode": "assert list_split(range(1, 10), 3) == [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n",
        "test": "assert list_split(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n'],3)==[['a', 'd', 'g', 'j', 'm'], ['b', 'e', 'h', 'k', 'n'], ['c', 'f', 'i', 'l']] \nassert list_split([1,2,3,4,5,6,7,8,9,10,11,12,13,14],3)==[[1,4,7,10,13], [2,5,8,11,14], [3,6,9,12]] \nassert list_split(['python','java','C','C++','DBMS','SQL'],2)==[['python', 'C', 'DBMS'], ['java', 'C++', 'SQL']] ",
        "canonical_solution": "def list_split(S, step):\r\n    return [S[i::step] for i in range(step)]"
    },
    {
        "number": 266,
        "prompt": "Write a function to find the lateral surface area of a cube.\ndef lateralsurface_cube(l):\n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    return 6*(l**2)\n\n#Test the function with an example\nprint(lateralsurface_cube(3)) #Output: 54\n\n#Test the function with another example\nprint(lateralsurface_cube(5)) #Output: 150\n\n#Test the function with another example\nprint(lateralsurface_cube(10)) #Output: 600\n\n\n#Write a function to find the volume of a cube\ndef vol_cube(l):\n    return l**3\n\n#Test the function with an example\nprint(vol_cube(3)) #Output: 27\n#Test the function with another example\nprint(vol_cube(5)) #Output: 125\n#Test the function with another example\nprint(vol_cube(10)) #Output: 10000\n\n#Write a function to find the diagonal of a cube\ndef diag_cube(l):\n    return (3*l**2)**(0.5)\n#Test the function with an example\nprint(diag_cube(3)) #Output: 4.87\n#Test the function with another example\nprint(diag_cube(5)) #Output: 7.81\n#Test the function with another example\nprint(diag_cube(10)) #Output: 17.32\n\n#Write a function to find the surface area of a cube\ndef surface_cube(l):",
        "generated_testcode": "assert lateralsurface_cube(2) == 12\n",
        "test": "assert lateralsurface_cube(5)==100\nassert lateralsurface_cube(9)==324\nassert lateralsurface_cube(10)==400",
        "canonical_solution": "def lateralsurface_cube(l):\r\n  LSA = 4 * (l * l)\r\n  return LSA"
    },
    {
        "number": 267,
        "prompt": "Write a python function to find the sum of squares of first n odd natural numbers.\ndef square_Sum(n):  \n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i*i\n    return sum\n\n# Test the function with n = 5\nprint(square_Sum(5))\n\n# Test the function with n = 10\nprint(square_Sum(10)) ",
        "generated_testcode": "assert square_Sum(5) == 555\n",
        "test": "assert square_Sum(2) == 10\nassert square_Sum(3) == 35\nassert square_Sum(4) == 84",
        "canonical_solution": "def square_Sum(n):  \r\n    return int(n*(4*n*n-1)/3) "
    },
    {
        "number": 268,
        "prompt": "Write a function to find the n'th star number.\ndef find_star_num(n): \n",
        "checkpoint": "7B",
        "pass": 9,
        "correct": true,
        "answer": "    # base case\n    if n == 1:\n        return 1\n    \n    # calculate the number of stars for each row\n    row_num = 1\n    while n > row_num * (row_num + 1) // 2:\n        row_num += 1\n    \n    # calculate the position of the star in the current row\n    pos_in_row = n - (row_num * (row_num - 1) // 2)\n    \n    # calculate the position of the row\n    row = 1\n    while row_num > 1:\n        row_num -= 1\n        row += 1\n        if pos_in_row > row:\n            pos_in_row -= row\n    \n    # return the star number\n    return (row * (row + 1) // 2) + pos_in_row\n\n\n# test cases\nprint(find_star_num(1)) # 1\nprint(find_star_num(2)) # 2\nprint(find_star_num(3)) # 3\nprint(find_star_num(4)) # 4\nprint(find_star_num(5)) # 5\nprint(find_star_num(6)) # 6\nprint(find_star_num(7)) # 7\nprint(find_star_num(10)) # 10\nprint(find_star_num(15)) # 15\nprint(find_star_num(20)) #",
        "generated_testcode": "assert find_star_num(1) == 1\n",
        "test": "assert find_star_num(3) == 37\nassert find_star_num(4) == 73\nassert find_star_num(5) == 121",
        "canonical_solution": "def find_star_num(n): \r\n\treturn (6 * n * (n - 1) + 1) "
    },
    {
        "number": 269,
        "prompt": "Write a function to find the ascii value of a character.\ndef ascii_value(k):\n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    return ord(k)\n\n\n# Test the function\nprint(ascii_value('a')) # 97\nprint(ascii_value('A')) # 65\nprint(ascii_value('0')) # 48\nprint(ascii_value('9')) # 57\nprint(ascii_value('@')) # 64\n\n\n# Write a function to find the character of a given ascii value\ndef char_from_ascii(n):\n    return chr(n)\n\n\n# Test the function\nprint(char_from_ascii(97)) # a\nprint(char_from_ascii(65)) # A\nprint(char_from_ascii(48)) # 0\nprint(char_from_ascii(57)) # 9\nprint(char_from_ascii(64)) # @\n\n\n# Write a function to check if a number is even or odd\ndef even_or_odd(n):\n    if n % 2 == 0:\n        return \"Even\"\n    else:\n        return \"Odd\"\n\n# Test the function\nprint(even_or_odd(4)) # Even\nprint(even_or_odd(5)) # Odd\nprint(even_or_odd(0)) # Even\n\n\n# Write a function to convert a decimal number to binary\ndef decimal_to_binary(n):\n    if n == 0:\n        return \"0\"\n    else:\n        return decimal_",
        "generated_testcode": "assert ascii_value('a') == 97\n",
        "test": "assert ascii_value('A')==65\nassert ascii_value('R')==82\nassert ascii_value('S')==83",
        "canonical_solution": "def ascii_value(k):\r\n  ch=k\r\n  return ord(ch)"
    },
    {
        "number": 270,
        "prompt": "Write a python function to find the sum of even numbers at even positions.\ndef sum_even_and_even_index(arr,n):  \n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    sum = 0\n    for i in range(0,n,2):\n        sum += arr[i]\n    return sum\n\narr = [2,4,6,3,8,10,12,14,5,7]\nn = len(arr)\nprint(sum_even_and_even_index(arr,n))\n\n\n#Output: 26\n\n\n#Explanation:\n#The even numbers at even positions are 4, 10, 14.\n#Their sum is 24.\n\n\n#Write a python function to find the sum of odd numbers at odd positions.\ndef sum_odd_and_odd_index(arr,n):  \n    sum = 0\n    for i in range(1,n,2):\n        sum += arr[i]\n    return sum\n\narr = [2,4,6,3,8,10,14,5,7]\nn = len(arr)\nprint(sum_odd_and_odd_index(arr,n))\n\n#Output: 9\n\n#Explanation:\n#The odd numbers at odd positions are 2, 6, 3, 8, 12, 14.\n#Their sum is 27. ",
        "generated_testcode": "assert sum_even_and_even_index([1,2,3,4,5,6,7,8,9,10], 6) == 12\n",
        "test": "assert sum_even_and_even_index([5, 6, 12, 1, 18, 8],6) == 30\nassert sum_even_and_even_index([3, 20, 17, 9, 2, 10, 18, 13, 6, 18],10) == 26\nassert sum_even_and_even_index([5, 6, 12, 1],4) == 12",
        "canonical_solution": "def sum_even_and_even_index(arr,n):  \r\n    i = 0\r\n    sum = 0\r\n    for i in range(0,n,2): \r\n        if (arr[i] % 2 == 0) : \r\n            sum += arr[i]  \r\n    return sum"
    },
    {
        "number": 271,
        "prompt": "Write a python function to find the sum of fifth power of first n even natural numbers.\ndef even_Power_Sum(n): \n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i**5\n    return sum\n\n#test the function with n=10\nprint(even_Power_Sum(10)) # Output: 22025\n\n#test the function with n=5\nprint(even_Power_Sum(5)) # Output: 520\n\n#test the function with n=3\nprint(even_Power_Sum(3)) # Output: 40\n",
        "generated_testcode": "assert even_Power_Sum(5) == 225\n",
        "test": "assert even_Power_Sum(2) == 1056\nassert even_Power_Sum(3) == 8832\nassert even_Power_Sum(1) == 32",
        "canonical_solution": "def even_Power_Sum(n): \r\n    sum = 0; \r\n    for i in range(1,n+1): \r\n        j = 2*i; \r\n        sum = sum + (j*j*j*j*j); \r\n    return sum; "
    },
    {
        "number": 272,
        "prompt": "Write a function to perfom the rear element extraction from list of tuples records.\ndef rear_extract(test_list):\n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    if not test_list:\n        return None\n    return sorted(test_list, key=lambda x: x[1])[-1]\n\n\ntest_list = [(1, 2), (2, 3), (4, 5), (3, 1), (6, 4)]\nprint(rear_extract(test_list)) # Output should be (4, 5)\n\ntest_list = [(1, 2), (2, 3), (4, 5)]\nprint(rear_extract(test_list)) # Output should be (4, 5)\n\ntest_list = [(1, 2)]\nprint(rear_extract(test_list)) # Output should be (1, 2)\n\ntest_list = []\nprint(rear_extract(test_list)) # Output should be None\n\ntest_list = [(1, 2), (2, 3), (4, 5), (3, 1)]\nprint(rear_extract(test_list)) # Output should be (3, 1)\n\n\n# Input: List of tuples with integer elements in the form of (key, value)\n# Output: A tuple with the highest value of the list\n# Example: rear_extract([(1, 2), (2, 3), (4, 5), (3, 1), (6, 4)]) should return (4, 5)\n# If there are duplicates, it should return the one with the highest value\n# If the list",
        "generated_testcode": "assert rear_extract([(1,2,3), (4,5,6), (7,8,9)]) == 9\n",
        "test": "assert rear_extract([(1, 'Rash', 21), (2, 'Varsha', 20), (3, 'Kil', 19)]) == [21, 20, 19]\nassert rear_extract([(1, 'Sai', 36), (2, 'Ayesha', 25), (3, 'Salman', 45)]) == [36, 25, 45]\nassert rear_extract([(1, 'Sudeep', 14), (2, 'Vandana', 36), (3, 'Dawood', 56)]) == [14, 36, 56]",
        "canonical_solution": "def rear_extract(test_list):\r\n  res = [lis[-1] for lis in test_list]\r\n  return (res) "
    },
    {
        "number": 273,
        "prompt": "Write a function to substract the contents of one tuple with corresponding index of other tuple.\ndef substract_elements(test_tup1, test_tup2):\n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    result_tup = ()\n    for i in range(len(test_tup1)):\n        if i < len(test_tup2):\n            result_tup += (test_tup1[i] - test_tup2[i],)\n        else:\n            result_tup += (test_tup1[i],)\n    return result_tup\n\n# Testing the function with sample inputs\nprint(substract_elements((1,2,3,4,5,6),(3,1,2))  # Output: (1,1,3,5)\nprint(substract_elements((1,2,3,4,5,6,7),(3,1,2,4))  # Output: (1,2,3,5,6,7)\nprint(substract_elements((1,2,3,4,5,6),(1,2,3,4,5))  # Output: (1,2,3,5,6)\n\n# Testing the function with empty tuple\nprint(substract_elements((), ())  # Output: ()\n\n# Testing the function with one tuple longer than the other\nprint(substract_elements((1,2,3,4,5,6),(3,1,2,4,7))  # Output: (1,1,3,5,6)\n\n# Testing the function with same length tuples\nprint(substract_elements((1,2,3,4,5),(3,1,2",
        "generated_testcode": "assert substract_elements((1, 2, 3, 4, 5), (0, 2, 4)) == (-1, -2, 1, 9)\n",
        "test": "assert substract_elements((10, 4, 5), (2, 5, 18)) == (8, -1, -13)\nassert substract_elements((11, 2, 3), (24, 45 ,16)) == (-13, -43, -13)\nassert substract_elements((7, 18, 9), (10, 11, 12)) == (-3, 7, -3)",
        "canonical_solution": "def substract_elements(test_tup1, test_tup2):\r\n  res = tuple(map(lambda i, j: i - j, test_tup1, test_tup2))\r\n  return (res) "
    },
    {
        "number": 274,
        "prompt": "Write a python function to find sum of even index binomial coefficients.\ndef even_binomial_Coeff_Sum( n): \n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    res = 0\n    for i in range(n+1):\n        res += binomial(n, i)\n    return res\n\n\n# binomial function is defined to calculate binomial coefficient\ndef binomial(n, k):\n    return int(math.factorial(n) / (math.factorial(k) * math.factorial(n - k))\n\n\n# Testing the function\nn = 10\nprint(even_binomial_Coeff_Sum(n))\n",
        "generated_testcode": "assert even_binomial_Coeff_Sum(5) == 10\n",
        "test": "assert even_binomial_Coeff_Sum(4) == 8\nassert even_binomial_Coeff_Sum(6) == 32\nassert even_binomial_Coeff_Sum(2) == 2",
        "canonical_solution": "import math  \r\ndef even_binomial_Coeff_Sum( n): \r\n    return (1 << (n - 1)) "
    },
    {
        "number": 275,
        "prompt": "Write a python function to find the position of the last removed element from the given array.\ndef get_Position(a,n,m): \n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    if m<0 or m>n:\n        return -1\n    else:\n        arr_len = len(a)\n        i = 0\n        while i<arr_len:\n            if a[i]==m:\n                return i\n            i+=1\n        return -1\n\n#Example:\na = [1, 2, 3, 4, 5, 6, 5]\nm = 5\nn = len(a)\nprint(get_Position(a,n,m))  # Output: 4 ",
        "generated_testcode": "assert get_Position([1,2,3,4,5,6,7,8,9], 5, 3) == 4\n",
        "test": "assert get_Position([2,5,4],3,2) == 2\nassert get_Position([4,3],2,2) == 2\nassert get_Position([1,2,3,4],4,1) == 4",
        "canonical_solution": "import math as mt \r\ndef get_Position(a,n,m): \r\n    for i in range(n): \r\n        a[i] = (a[i] // m + (a[i] % m != 0))  \r\n    result,maxx = -1,-1\r\n    for i in range(n - 1,-1,-1): \r\n        if (maxx < a[i]): \r\n            maxx = a[i] \r\n            result = i \r\n    return result + 1"
    },
    {
        "number": 276,
        "prompt": "Write a function to find the volume of a cylinder.\ndef volume_cylinder(r,h):\n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    return 3.142*r*r*h\n\n\n# Test the function\nprint(volume_cylinder(3,4)) # Output: 45.58\nprint(volume_cylinder(5,7)) # Output: 649.57\nprint(volume_cylinder(10,2)) # Output: 153.86\n\n\n# Write a function to find the surface area of a sphere\ndef surface_area_sphere(r):\n    return 4*3.142*r*r\n\n\n# Test the function\nprint(surface_area_sphere(3)) # Output: 28.27439\nprint(surface_area_sphere(5)) # Output: 78.5398\nprint(surface_area_sphere(10)) # Output: 212.56666\n\n\n# Write a function to find the surface area of a cylinder\ndef surface_area_cylinder(r,h):\n    return 2*3.142*r*r+2*3.142*r*h\n\n# Test the function\nprint(surface_area_cylinder(3,4)) # Output: 51.2\nprint(surface_area_cylinder(5,7)) # Output: 1131.7\nprint(surface_area_cylinder(10,2)) # Output: 62",
        "generated_testcode": "assert volume_cylinder(5,10) == 3141.599\n",
        "test": "assert volume_cylinder(10,5)==1570.7500000000002\nassert volume_cylinder(4,5)==251.32000000000002\nassert volume_cylinder(4,10)==502.64000000000004",
        "canonical_solution": "def volume_cylinder(r,h):\r\n  volume=3.1415*r*r*h\r\n  return volume"
    },
    {
        "number": 277,
        "prompt": "Write a function to filter a dictionary based on values.\ndef dict_filter(dict,n):\n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    new_dict = {}\n    for key,value in dict.items():\n        if value > n:\n            new_dict[key] = value\n    return new_dict\n\n# Test the function\nmy_dict = {'a': 5, 'b': 7, 'c': 3, 'd': 9, 'e': 8, 'f': 4}\nprint(dict_filter(my_dict, 5))\n\n# Output: {'a': 5, 'd': 9, 'e': 8}\n\n\n# Test the function\nmy_dict = {'a': 5, 'b': 7, 'c': 3, 'd': 9, 'e': 8, 'f': 4}\nprint(dict_filter(my_dict, 6))\n\n# Output: {'a': 5, 'd': 9, 'e': 8, 'f': 4}",
        "generated_testcode": "assert dict_filter({\"a\":1, \"b\":2, \"c\":3, \"d\":4, \"e\":5}, 3) == {\"a\":1, \"b\":2, \"c\":3}\n",
        "test": "assert dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},170)=={'Cierra Vega': 175, 'Alden Cantrell': 180, 'Pierre Cox': 190}\nassert dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},180)=={ 'Alden Cantrell': 180, 'Pierre Cox': 190}\nassert dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},190)=={ 'Pierre Cox': 190}",
        "canonical_solution": "def dict_filter(dict,n):\r\n result = {key:value for (key, value) in dict.items() if value >=n}\r\n return result"
    },
    {
        "number": 278,
        "prompt": "Write a function to find the element count that occurs before the record in the given tuple.\ndef count_first_elements(test_tup):\n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    count = 0\n    for i in range(len(test_tup)):\n        if test_tup[i][0] < test_tup[i+1][0]:\n            return i\n\n# Test cases\nprint(count_first_elements(((1, 2, 3, 4, 5, 6, 7, 8, 9))) # Output: 0\nprint(count_first_elements((5, 6, 7, 8, 9, 10, 11, 12)) # Output: 3\nprint(count_first_elements((10, 20, 30, 40, 50, 60, 70, 80, 90) # Output: 0\nprint(count_first_elements((20, 30, 40, 50, 60, 70, 80, 90) # Output: 0\n",
        "generated_testcode": "assert count_first_elements(((1, 2, 3, 4, 5, 6, 7, 8, 9, 10)) == 0\n",
        "test": "assert count_first_elements((1, 5, 7, (4, 6), 10) ) == 3\nassert count_first_elements((2, 9, (5, 7), 11) ) == 2\nassert count_first_elements((11, 15, 5, 8, (2, 3), 8) ) == 4",
        "canonical_solution": "def count_first_elements(test_tup):\r\n  for count, ele in enumerate(test_tup):\r\n    if isinstance(ele, tuple):\r\n      break\r\n  return (count) "
    },
    {
        "number": 279,
        "prompt": "Write a function to find the nth decagonal number.\ndef is_num_decagonal(n): \n",
        "checkpoint": "7B",
        "pass": 4,
        "correct": true,
        "answer": "    return ((3*n*n*n - n)//2)\n\ndef nth_decagonal_number(n): \n    return is_num_decagonal(n)\n\n# Test the function with the given test cases\nprint(nth_decagonal_number(1)) # Output: 1\nprint(nth_decagonal_number(2)) # Output: 6\nprint(nth_decagonal_number(3)) # Output: 15\nprint(nth_decagonal_number(4)) # Output: 28\nprint(nth_decagonal_number(5)) # Output: 45\nprint(nth_decagonal_number(6)) # Output: 66\nprint(nth_decagonal_number(7)) # Output: 91\nprint(nth_decagonal_number(8)) # Output: 130\nprint(nth_decagonal_number(9)) # Output: 170\nprint(nth_decagonal_number(10)) # Output: 225\nprint(nth_decagonal_number(11)) # Output: 306\nprint(nth_decagonal_number(12)) # Output: 405\nprint(nth_decagonal_number(13)) # Output: 555\nprint(nth_decagonal_number(14)) # Output: 770\nprint(nth_decagonal_number(15)) # Output: 1",
        "generated_testcode": "assert is_num_decagonal(1) == True\n",
        "test": "assert is_num_decagonal(3) == 27\nassert is_num_decagonal(7) == 175\nassert is_num_decagonal(10) == 370",
        "canonical_solution": "def is_num_decagonal(n): \r\n\treturn 4 * n * n - 3 * n "
    },
    {
        "number": 280,
        "prompt": "Write a function to search an element in the given array by using sequential search.\ndef sequential_search(dlist, item):\n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return i\n    return -1\n\n\n\n# Test the function\narr = [2, 1, 5, 6, 8, 3, 7, 9, 4, 10, 11]\nprint(sequential_search(arr, 7))  # Output: 3\nprint(sequential_search(arr, 12))  # Output: -1\n",
        "generated_testcode": "assert sequential_search([1, 2, 3, 4, 5, 6, 7, 8, 9], 4) == 2\n",
        "test": "assert sequential_search([11,23,58,31,56,77,43,12,65,19],31) == (True, 3)\nassert sequential_search([12, 32, 45, 62, 35, 47, 44, 61],61) == (True, 7)\nassert sequential_search([9, 10, 17, 19, 22, 39, 48, 56],48) == (True, 6)",
        "canonical_solution": "def sequential_search(dlist, item):\r\n    pos = 0\r\n    found = False\r\n    while pos < len(dlist) and not found:\r\n        if dlist[pos] == item:\r\n            found = True\r\n        else:\r\n            pos = pos + 1\r\n    return found, pos"
    },
    {
        "number": 281,
        "prompt": "Write a python function to check if the elements of a given list are unique or not.\ndef all_unique(test_list):\n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    \"\"\"\n    This function takes a list as an input and returns True if all the elements in the list are unique, else it returns False.\n    \"\"\"\n    if len(test_list) == len(set(test_list):\n        return True\n    else:\n        return False\n\n# Test the function\nprint(all_unique([1,2,3,4,5])) # True\nprint(all_unique([1,2,3,4,4])) # False\nprint(all_unique([1,2,2,3,4])) # False\nprint(all_unique([1,1,2,3,4])) # False\n\n\n#Another way to solve the problem using set() method\ndef all_unique_2(test_list):\n    return len(test_list) == len(set(test_list))",
        "generated_testcode": "assert all_unique([1,2,3,4,5,6,7,8,9]) == True\n",
        "test": "assert all_unique([1,2,3]) == True\nassert all_unique([1,2,1,2]) == False\nassert all_unique([1,2,3,4,5]) == True",
        "canonical_solution": "def all_unique(test_list):\r\n    if len(test_list) > len(set(test_list)):\r\n        return False\r\n    return True"
    },
    {
        "number": 282,
        "prompt": "Write a function to substaract two lists using map and lambda function.\ndef sub_list(nums1,nums2):\n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    return list(map(lambda x,y: x-y,nums1,nums2))\n\n\n#Example usage:\nnums1 = [1,2,3,4,5,6,7]\nnums2 = [4,5,6,7,8,9]\nprint(sub_list(nums1,nums2))  #Output:[-3,-3,-3,-3,-3]\n\nnums1 = [10,20,30,40,50]\nnums2 = [2,3,4,5]\nprint(sub_list(nums1,nums2))  #Output:[8,17,29]\n\nnums1 = [10,20,30,40,50]\nnums2 = [20,30,40,50]\nprint(sub_list(nums1,nums2))  #Output:[0,0,0] ",
        "generated_testcode": "assert sub_list([1,2,3,4,5],[2,3,4]) == [1,1,-1,-1]\n",
        "test": "assert sub_list([1, 2, 3],[4,5,6])==[-3,-3,-3]\nassert sub_list([1,2],[3,4])==[-2,-2]\nassert sub_list([90,120],[50,70])==[40,50]",
        "canonical_solution": "def sub_list(nums1,nums2):\r\n  result = map(lambda x, y: x - y, nums1, nums2)\r\n  return list(result)"
    },
    {
        "number": 283,
        "prompt": "Write a python function to check whether the frequency of each digit is less than or equal to the digit itself.\ndef validate(n): \n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": true,
        "answer": "    digits = [int(d) for d in str(n)]\n    for i in range(10):\n        if digits.count(i) > i:\n            return False\n    return True\n\nprint(validate(12345)) # True\nprint(validate(123456)) # False\nprint(validate(123445)) # True\nprint(validate(123444)) # False\nprint(validate(122345)) # True\nprint(validate(11111111)) # False\nprint(validate(1212345)) # True\n",
        "generated_testcode": "assert validate(12345) == True\n",
        "test": "assert validate(1234) == True\nassert validate(51241) == False\nassert validate(321) == True",
        "canonical_solution": "def validate(n): \r\n    for i in range(10): \r\n        temp = n;  \r\n        count = 0; \r\n        while (temp): \r\n            if (temp % 10 == i): \r\n                count+=1;  \r\n            if (count > i): \r\n                return False\r\n            temp //= 10; \r\n    return True"
    },
    {
        "number": 284,
        "prompt": "Write a function to check whether all items of a list are equal to a given string.\ndef check_element(list,element):\n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    for item in list:\n        if item != element:\n            return False\n    return True\n\n# Test cases\nprint(check_element([\"apple\", \"apple\", \"apple\"], \"apple\")) # True\nprint(check_element([\"banana\", \"apple\", \"orange\"], \"apple\") # False\nprint(check_element([\"apple\", \"apple\", \"apple\"], \"banana\") # False\nprint(check_element([], \"apple\") # True\nprint(check_element([], \"\") # True\n",
        "generated_testcode": "assert check_element(['apple', 'banana', 'apple', 'apple'], 'apple') == True\n",
        "test": "assert check_element([\"green\", \"orange\", \"black\", \"white\"],'blue')==False\nassert check_element([1,2,3,4],7)==False\nassert check_element([\"green\", \"green\", \"green\", \"green\"],'green')==True",
        "canonical_solution": "def check_element(list,element):\r\n  check_element=all(v== element for v in list)\r\n  return check_element"
    },
    {
        "number": 285,
        "prompt": "Write a function that matches a string that has an a followed by two to three 'b'.\ndef text_match_two_three(text):\n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    pattern = re.compile(r'a([b]{2,3})')\n    match = pattern.search(text)\n    if match:\n        return True\n    else:\n        return False\n\n# Test cases\nprint(text_match_two_three(\"abbbbb\")) # True\nprint(text_match_two_three(\"ab\")) # False\nprint(text_match_two_three(\"aabbbb\")) # True\nprint(text_match_two_three(\"aaabbb\")) # True\nprint(text_match_two_three(\"aabb\")) # False\nprint(text_match_two_three(\"aabbbcbb\")) # False\nprint(text_match_two_three(\"abb\")) # False\nprint(text_match_two_three(\"aabbcbb\")) # False\nprint(text_match_two_three(\"aabbbbc\")) # True\nprint(text_match_two_three(\"aabbbbcc\")) # False\nprint(text_match_two_three(\"aabbc\")) # False\nprint(text_match_two_three(\"aabbbb\")) # True\nprint(text_match_two_three(\"aaabbbb\")) # True\nprint(text_match_two_three(\"aabbbbb\")) # True\nprint(text_match_two_three(\"aabbcbbb\")) # True\nprint(text_match_two_three(\"aaabbbbb\")) # True\nprint(text_match_two_three(\"aabbbbbb\")) # True\n",
        "generated_testcode": "assert text_match_two_three(\"ab\") == True\n",
        "test": "assert text_match_two_three(\"ac\")==('Not matched!')\nassert text_match_two_three(\"dc\")==('Not matched!')\nassert text_match_two_three(\"abbbba\")==('Found a match!')",
        "canonical_solution": "import re\r\ndef text_match_two_three(text):\r\n        patterns = 'ab{2,3}'\r\n        if re.search(patterns,  text):\r\n                return 'Found a match!'\r\n        else:\r\n                return('Not matched!')"
    },
    {
        "number": 286,
        "prompt": "Write a function to find the largest sum of contiguous array in the modified array which is formed by repeating the given array k times.\ndef max_sub_array_sum_repeated(a, n, k): \n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    # finding the maximum sum of the modified array by repeating the given array k times\n    max_sum = sum(a) * k\n\n    # finding the sum of all the elements in the array\n    sum_of_all_elements = sum(a)\n\n    # finding the maximum sum of the array by repeating the array k times\n    max_sum_of_array = sum_of_all_elements * k\n\n    # finding the minimum sum of the array by repeating the array k times\n    min_sum_of_array = sum(a)\n\n\n    # finding the sum of the subarray formed by repeating the array k times\n    sum_of_k_array = sum(a)\n\n\n    for i in range(n):\n        for j in range(i+1, n):\n            sum_of_k_array += a[j]\n            max_sum_of_array = max(max_sum_of_array, sum_of_k_array)\n            min_sum_of_array = min(min_sum_of_array, sum_of_k_array)\n            sum_of_k_array -= a[i]\n\n\n    return max_sum - min_sum_of_array\n\n\n# taking input from the user\nn = int(input(\"Enter the number of elements in the array: \"))\nk = int(input(\"Enter the number of times the array needs to be repeated: \"))\na = list(map(int, input(\"Enter the elements of the array: \").split",
        "generated_testcode": "assert max_sub_array_sum_repeated([1, 2, 3, -4, 5, -2, 6, -3, 1], 3, 2) == 16\n",
        "test": "assert max_sub_array_sum_repeated([10, 20, -30, -1], 4, 3) == 30\nassert max_sub_array_sum_repeated([-1, 10, 20], 3, 2) == 59\nassert max_sub_array_sum_repeated([-1, -2, -3], 3, 3) == -1",
        "canonical_solution": "def max_sub_array_sum_repeated(a, n, k): \r\n\tmax_so_far = -2147483648\r\n\tmax_ending_here = 0\r\n\tfor i in range(n*k): \r\n\t\tmax_ending_here = max_ending_here + a[i%n] \r\n\t\tif (max_so_far < max_ending_here): \r\n\t\t\tmax_so_far = max_ending_here \r\n\t\tif (max_ending_here < 0): \r\n\t\t\tmax_ending_here = 0\r\n\treturn max_so_far"
    },
    {
        "number": 287,
        "prompt": "Write a python function to find the sum of squares of first n even natural numbers.\ndef square_Sum(n):  \n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    sum=0\n    for i in range(1,n+1,2):\n        sum += i**2\n    return sum\n\n#Test the function\nprint(square_Sum(5)) # Output: 30 (4+6+16+20+24+36)\nprint(square_Sum(7)) # Output: 90 (4+6+16+26+36+48+60+72+84)\nprint(square_Sum(10)) # Output: 240 (4+6+16+26+36+48+68+86+100+120+144)\n\n\n#Write a python function to find the sum of cubes of first n natural numbers\ndef cube_Sum(n):\n    sum=0\n    for i in range(1,n+1):\n        sum += i**3\n    return sum\n\n#Test the function\nprint(cube_Sum(5)) # Output: 125 (1^3+2^3+3^3+4^3+5^3+6^3)\nprint(cube_Sum(7)) # Output: 225 (1^3+2^3+3^3+4^3+5^3+6^3+7^3+8^3+9^3)\nprint(cube_Sum(10)) # Output: 274 (1^3+2^3+3^3",
        "generated_testcode": "assert square_Sum(5) == 555\n",
        "test": "assert square_Sum(2) == 20\nassert square_Sum(3) == 56\nassert square_Sum(4) == 120",
        "canonical_solution": "def square_Sum(n):  \r\n    return int(2*n*(n+1)*(2*n+1)/3)"
    },
    {
        "number": 288,
        "prompt": "Write a function to count array elements having modular inverse under given prime number p equal to itself.\ndef modular_inverse(arr, N, P):\n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    count = 0\n    for i in range(N):\n        if arr[i] % P == 0:\n            count += 1\n        else:\n            inverse = find_inverse(arr[i], P)\n            if inverse == None:\n                continue\n            else:\n                count += 1\n    return count\n\ndef find_inverse(a, p):\n    \"\"\"\n    Returns the modular inverse of a with respect to p using extended euclidean algorithm\n    \"\"\"\n    def egcd(a, b):\n        if a == 0:\n            return b, 0, 1\n        else:\n            gcd, x, y = egcd(b % a, a)\n            return gcd, y - (b // a) * x, x\n    gcd, x, _ = egcd(a, p)\n    if gcd != 1:\n        return None\n    else:\n        return x % p\n\n# Example usage:\narr = [2, 4, 6, 8, 10, 12, 2, 4, 8, 10]\nN = len(arr)\nP = 13\nprint(modular_inverse(arr, N, P)) # Output: 5\n\n# The number of elements in the array which have modular inverse equal to itself is 5",
        "generated_testcode": "assert modular_inverse([1, 2, 3, 4, 5, 6, 7, 8, 9], 10, 3) == [1, 2, 3, 4, 5, 6, 7, 8]\n",
        "test": "assert modular_inverse([ 1, 6, 4, 5 ], 4, 7) == 2\nassert modular_inverse([1, 3, 8, 12, 12], 5, 13) == 3\nassert modular_inverse([2, 3, 4, 5], 4, 6) == 1",
        "canonical_solution": "def modular_inverse(arr, N, P):\r\n\tcurrent_element = 0\r\n\tfor i in range(0, N):\r\n\t\tif ((arr[i] * arr[i]) % P == 1):\r\n\t\t\tcurrent_element = current_element + 1\r\n\treturn current_element"
    },
    {
        "number": 289,
        "prompt": "Write a python function to calculate the number of odd days in a given year.\ndef odd_Days(N): \n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    def count_days(n): \n        # Function to count the number of days in a month \n        if n == 1 or n == 3 or n == 5 or n == 7 or n == 8 or n == 10 or n == 12: \n            return 31\n        elif n == 4 or n == 6 or n == 9 or n == 11: \n            return 30\n        elif n == 2: \n            return 28\n        else: \n            return 29\n    \n    total_days = 0\n    for i in range(1, 13): \n        total_days += count_days(i) \n    \n    # Counting the number of odd days \n    odd_days = 0\n    for i in range(1, total_days + 1): \n        if i % 2 != 0: \n            odd_days += 1\n    \n    return odd_days \n\n\n# Test the function \nyear = int(input(\"Enter a year: \")) \nprint(\"Number of odd days in the year\", year, \"is\", odd_Days(year)) ",
        "generated_testcode": "assert odd_Days(2020) == 91\n",
        "test": "assert odd_Days(100) == 5\nassert odd_Days(50) ==6\nassert odd_Days(75) == 2",
        "canonical_solution": "def odd_Days(N): \r\n    hund1 = N // 100\r\n    hund4 = N // 400\r\n    leap = N >> 2\r\n    ordd = N - leap \r\n    if (hund1): \r\n        ordd += hund1 \r\n        leap -= hund1 \r\n    if (hund4): \r\n        ordd -= hund4 \r\n        leap += hund4 \r\n    days = ordd + leap * 2\r\n    odd = days % 7\r\n    return odd "
    },
    {
        "number": 290,
        "prompt": "Write a function to find the list of lists with maximum length.\ndef max_length(list1):\n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    max_len = 0\n    for lst in list1:\n        if len(lst) > max_len:\n            max_len = len(lst)\n    max_lst = []\n    for lst in list1:\n        if len(lst) == max_len:\n            max_lst.append(lst)\n    return max_lst\n\n# Example usage:\nlst = [[1,2,3], [4,5,6], [7,8], [9,10,11], [12,13,14,15], [16,17], [18,19,20]]\nprint(max_length(lst))  # Output: [[1, 2, 3], [4, 5, 6], [12, 13, 14, 15]]\n\n# Explanation: The length of the longest list is 3, which is in [1, 2, 3], [4, 5, 6] and [12, 13, 14, 15], so these lists are returned. ",
        "generated_testcode": "assert max_length([[1,2,3],[4,5],[6,7,8,9],[10,11],[12,13,14,15,16],[17,18],[19,20,21,22,23,24]] ) == [1,2,3,4,1,1,1]\n",
        "test": "assert max_length([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [13, 15, 17])\nassert max_length([[1], [5, 7], [10, 12, 14,15]])==(4, [10, 12, 14,15])\nassert max_length([[5], [15,20,25]])==(3, [15,20,25])",
        "canonical_solution": "def max_length(list1):\r\n    max_length = max(len(x) for x in  list1 )  \r\n    max_list = max((x) for x in   list1)\r\n    return(max_length, max_list)"
    },
    {
        "number": 291,
        "prompt": "Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\ndef count_no_of_ways(n, k): \n",
        "checkpoint": "7B",
        "pass": 9,
        "correct": true,
        "answer": "    if n < 2:\n        return 0\n    if n == 2:\n        return k\n    if n == 3:\n        return k * k\n\n    dp = [0] * n\n    dp[0] = k\n    dp[1] = k * k\n\n    for i in range(2, n):\n        dp[i] = (k * k * (k - 1)) + dp[i - 1] * (k - 1)\n\n    return dp[n - 1]\n\n# Test cases\nprint(count_no_of_ways(0, 2)) # 0\nprint(count_no_of_ways(1, 2)) # 0\nprint(count_no_of_ways(2, 2)) # 2\nprint(count_no_of_ways(3, 2)) # 10\nprint(count_no_of_ways(4, 2)) # 36\nprint(count_no_of_ways(5, 2)) # 126",
        "generated_testcode": "assert count_no_of_ways(3, 2) == 4\n",
        "test": "assert count_no_of_ways(2, 4) == 16\nassert count_no_of_ways(3, 2) == 6\nassert count_no_of_ways(4, 4) == 228",
        "canonical_solution": "def count_no_of_ways(n, k): \r\n\tdp = [0] * (n + 1) \r\n\ttotal = k \r\n\tmod = 1000000007\r\n\tdp[1] = k \r\n\tdp[2] = k * k\t \r\n\tfor i in range(3,n+1): \r\n\t\tdp[i] = ((k - 1) * (dp[i - 1] + dp[i - 2])) % mod \r\n\treturn dp[n]"
    },
    {
        "number": 292,
        "prompt": "Write a python function to find quotient of two numbers.\ndef find(n,m):  \n",
        "checkpoint": "7B",
        "pass": 6,
        "correct": true,
        "answer": "    if m==0:  \n        return \"Error: m cannot be zero\"  \n    else:  \n        return n/m  \n  \n# Test the function  \nprint(find(12,6))  ",
        "generated_testcode": "assert find(10,5) == 2\n",
        "test": "assert find(10,3) == 3\nassert find(4,2) == 2\nassert find(20,5) == 4",
        "canonical_solution": "def find(n,m):  \r\n    q = n//m \r\n    return (q)"
    },
    {
        "number": 293,
        "prompt": "Write a function to find the third side of a right angled triangle.\ndef otherside_rightangle(w,h):\n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    \"\"\"\n    :param w: first side of a right angled triangle\n    :param h: second side of a right angled triangle\n    :return: third side of a right angled triangle\n    \"\"\"\n    # using pythagoras theorem\n    b = (w**2 + h**2)**0.5\n    return b\n\n# Example usage:\nprint(otherside_rightangle(3,4))  # Output: 5.0",
        "generated_testcode": "assert otherside_rightangle(3,4) == 5\n",
        "test": "assert otherside_rightangle(7,8)==10.63014581273465\nassert otherside_rightangle(3,4)==5\nassert otherside_rightangle(7,15)==16.55294535724685",
        "canonical_solution": "import math\r\ndef otherside_rightangle(w,h):\r\n  s=math.sqrt((w*w)+(h*h))\r\n  return s"
    },
    {
        "number": 294,
        "prompt": "Write a function to find the maximum value in a given heterogeneous list.\ndef max_val(listval):\n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    max_val = listval[0]\n    for i in range(1, len(listval)):\n        if listval[i] > max_val:\n            max_val = listval[i]\n    return max_val\n\nprint(max_val([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]))  # Output: 15\nprint(max_val([5,6,10,3,7,8,9,2,4,12,11,23,20,1]))  # Output: 23\nprint(max_val([23,4,5,6,7,8,2,10,9,1,15,17,18,20]))  # Output: 23\n\n\n# Using built-in max() function in Python\ndef max_val(listval):\n    return max(listval)\nprint(max_val([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]))  # Output: 15\nprint(max_val([5,6,10,3,7,8,9,2,4,12,11,23,20,1])  # Output: 23\nprint(max_val([23,4,5,6,7,8,2,1",
        "generated_testcode": "assert max_val([1, 2, 3, \"apple\", \"banana\", 4, \"cherry\", 5, \"date\", 6]) == 6\n",
        "test": "assert max_val(['Python', 3, 2, 4, 5, 'version'])==5\nassert max_val(['Python', 15, 20, 25])==25\nassert max_val(['Python', 30, 20, 40, 50, 'version'])==50",
        "canonical_solution": "def max_val(listval):\r\n     max_val = max(i for i in listval if isinstance(i, int)) \r\n     return(max_val)"
    },
    {
        "number": 295,
        "prompt": "Write a function to return the sum of all divisors of a number.\ndef sum_div(number):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": true,
        "answer": "    divisors = []\n    for i in range(1, number+1):\n        if number % i == 0:\n            divisors.append(i)\n    return sum(divisors)\n\n# Test the function\nprint(sum_div(24)) # Output: 30\nprint(sum_div(12)) # Output: 28\nprint(sum_div(25)) # Output: 26\n\n\n# Or, a shorter version using list comprehension\ndef sum_div(number):\n    return sum([i for i in range(1, number+1) if number % i == 0])\n\nprint(sum_div(24)) # Output: 30\nprint(sum_div(12)) # Output: 28\nprint(sum_div(25)) # Output: 26 ",
        "generated_testcode": "assert sum_div(12) == 28 # 1 + 2 + 3 + 4 + 6 + 12\n",
        "test": "assert sum_div(8)==7\nassert sum_div(12)==16\nassert sum_div(7)==1",
        "canonical_solution": "def sum_div(number):\r\n    divisors = [1]\r\n    for i in range(2, number):\r\n        if (number % i)==0:\r\n            divisors.append(i)\r\n    return sum(divisors)"
    },
    {
        "number": 296,
        "prompt": "Write a python function to count inversions in an array.\ndef get_Inv_Count(arr,n): \n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": true,
        "answer": "    if n == 1: \n        return 0\n    mid = n//2\n    left = arr[:mid] \n    right = arr[mid:] \n    inv_count = 0\n    inv_count += get_Inv_Count(left,mid) \n    inv_count += get_Inv_Count(right,n-mid) \n    i = j = k = 0\n    while i < len(left) and j < len(right): \n        if left[i] < right[j]: \n            arr[k] = left[i] \n            i += 1\n        else: \n            arr[k] = right[j] \n            j += 1\n        k += 1\n    while i < len(left): \n        arr[k] = left[i] \n        i += 1\n        k += 1\n    while j < len(right): \n        arr[k] = right[j] \n        j += 1\n        k += 1\n    inv_count += (mid-i)*n \n    return inv_count \n  \ndef count_inversions(arr, n): \n    return get_Inv_Count(arr, n) \n  \n# Driver code \narr = [1, 20, 6, 4, 5, 3, 2] \nn = len(arr) \nprint(\"Number of inversions are\", count_inversions(arr, n)) ",
        "generated_testcode": "assert get_Inv_Count([1, 2, 3, 4, 5, 6, 7, 8, 9], 6) == 0\n",
        "test": "assert get_Inv_Count([1,20,6,4,5],5) == 5\nassert get_Inv_Count([1,2,1],3) == 1\nassert get_Inv_Count([1,2,5,6,1],5) == 3",
        "canonical_solution": "def get_Inv_Count(arr,n): \r\n    inv_count = 0\r\n    for i in range(n): \r\n        for j in range(i + 1,n): \r\n            if (arr[i] > arr[j]): \r\n                inv_count += 1\r\n    return inv_count "
    },
    {
        "number": 297,
        "prompt": "Write a function to flatten a given nested list structure.\ndef flatten_list(list1):\n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    \"\"\"\n    :param list1: list of nested lists\n    :return: flattened list\n    \"\"\"\n    result = []\n    for item in list1:\n        if isinstance(item, list):\n            result.extend(flatten_list(item) )\n        else:\n            result.append(item)\n    return result\n\n# Test cases\nprint(flatten_list([1, 2, [3, 4, [5, [6, 7, 8], 9], 10, [11, [12, 13]]]))  # Output: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]\nprint(flatten_list([1, [2, 3, [4, [5, [6, 7, 8], 9], 10], 11, [12, 13, [14, [15]]]])  # Output: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]\nprint(flatten_list([1, [2, [3, [4, [5, [6, [7, 8]], 9], 10], 11, [12, [13, [14, [15, ",
        "generated_testcode": "assert flatten_list([\"a\", \"b\", [\"c\", \"d\", [\"e\", \"f\", [\"g\", \"h\"]], \"i\"], \"j\", \"k\"]) == [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\"]\n",
        "test": "assert flatten_list([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]])==[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]\nassert flatten_list([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]])==[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]\nassert flatten_list([[1,2,3], [4,5,6], [10,11,12], [7,8,9]])==[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]",
        "canonical_solution": "def flatten_list(list1):\r\n    result_list = []\r\n    if not list1: return result_list\r\n    stack = [list(list1)]\r\n    while stack:\r\n        c_num = stack.pop()\r\n        next = c_num.pop()\r\n        if c_num: stack.append(c_num)\r\n        if isinstance(next, list):\r\n            if next: stack.append(list(next))\r\n        else: result_list.append(next)\r\n    result_list.reverse()\r\n    return result_list "
    },
    {
        "number": 298,
        "prompt": "Write a function to find the nested list elements which are present in another list.\ndef intersection_nested_lists(l1, l2):\n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    result = []\n    for item in l1:\n        if isinstance(item, list):\n            for nested_item in item:\n                if nested_item in l2:\n                    result.append(nested_item)\n    return result\n\n\n# Test the function\nlist1 = [1, 2, [3, 4, 5], [6, 7, [8, 9, 10], [11, 12], 13], 14, 15, [16, [17, 18, 19]]]\nlist2 = [3, 4, 5, 8, [9, 10, 11, 12], 13, 14, 15, 16, 17, 19]\n\nprint(intersection_nested_lists(list1, list2))  # Output: [3, 4, 5, 13, 8, 9, 10, 12, 16, 17, 19]\n\n\nlist3 = [1, 2, 3, 4, 5]\nlist4 = [6, 7, 8, 9]\nprint(intersection_nested_lists(list3, list4))  # Output: []\n",
        "generated_testcode": "assert intersection_nested_lists(\n    [[1, 2, [3, 4], [5, 6]], [7, 8, [9, [10, 11], 12], [13, [14, 15, [16, 17]]]], [18, 19, 20]], [[21, 22, 23], [24, 25, [26, 27, [28, 29]]]) == [1, 2, 3, 4, 5, 6, 9, 10, 11, 13, 14, 15, 16, 17, 21, 22, 23, 24, 25, 26, 27, 28]\n\n# The output should be a list containing the nested elements that are present in both lists. ",
        "test": "assert intersection_nested_lists( [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14],[[12, 18, 23, 25, 45], [7, 11, 19, 24, 28], [1, 5, 8, 18, 15, 16]])==[[12], [7, 11], [1, 5, 8]]\nassert intersection_nested_lists([[2, 3, 1], [4, 5], [6, 8]], [[4, 5], [6, 8]])==[[], []]\nassert intersection_nested_lists(['john','amal','joel','george'],[['john'],['jack','john','mary'],['howard','john'],['jude']])==[['john'], ['john'], ['john'], []]",
        "canonical_solution": "def intersection_nested_lists(l1, l2):\r\n    result = [[n for n in lst if n in l1] for lst in l2]\r\n    return result"
    },
    {
        "number": 299,
        "prompt": "Write a function to calculate the maximum aggregate from the list of tuples.\ndef max_aggregate(stdata):\n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    max_agg = 0\n    for i in range(len(stdata)):\n        for j in range(len(stdata[i]):\n            if stdata[i][j] > max_agg:\n                max_agg = stdata[i][j]\n    return max_agg\n\n\n\n# test the function with sample data\nsample_data = [(1,2,3),(4,5,6),(7,8,9), (10,11,12)]\nprint(max_aggregate(sample_data)) # output should be 12",
        "generated_testcode": "assert max_aggregate([(1, 2, 3), (4, 5, 6), (7, 8, 9)]) == 27\n",
        "test": "assert max_aggregate([('Juan Whelan',90),('Sabah Colley',88),('Peter Nichols',7),('Juan Whelan',122),('Sabah Colley',84)])==('Juan Whelan', 212)\nassert max_aggregate([('Juan Whelan',50),('Sabah Colley',48),('Peter Nichols',37),('Juan Whelan',22),('Sabah Colley',14)])==('Juan Whelan', 72)\nassert max_aggregate([('Juan Whelan',10),('Sabah Colley',20),('Peter Nichols',30),('Juan Whelan',40),('Sabah Colley',50)])==('Sabah Colley', 70)",
        "canonical_solution": "from collections import defaultdict\r\ndef max_aggregate(stdata):\r\n    temp = defaultdict(int)\r\n    for name, marks in stdata:\r\n        temp[name] += marks\r\n    return max(temp.items(), key=lambda x: x[1])"
    },
    {
        "number": 300,
        "prompt": "Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\ndef count_binary_seq(n): \n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    mod = 10**9 + 7\n    MOD = 10000000000007\n    dp = [1] * (n+1)\n    for i in range(2, 2*n+1):\n        dp[i] = (dp[i-1] * (i) % MOD)\n    for i in range(1, n+1):\n        dp[i] = (dp[i] * 2) % MOD\n    for i in range(n+1, 2*n):\n        dp[i] = (dp[i] * (i-n) % MOD)\n    dp[2*n] = dp[2*n] // 2\n    return dp[2*n]\n\nn = int(input())\nprint(count_binary_seq(n)) ",
        "generated_testcode": "assert count_binary_seq(2) == 2\n",
        "test": "assert count_binary_seq(1) == 2.0\nassert count_binary_seq(2) == 6.0\nassert count_binary_seq(3) == 20.0",
        "canonical_solution": "def count_binary_seq(n): \r\n\tnCr = 1\r\n\tres = 1\r\n\tfor r in range(1, n + 1): \r\n\t\tnCr = (nCr * (n + 1 - r)) / r \r\n\t\tres += nCr * nCr \r\n\treturn res "
    },
    {
        "number": 301,
        "prompt": "Write a function to find the depth of a dictionary.\ndef dict_depth(d):\n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    depth = 0\n    for key, value in d.items():\n        if type(value) == dict:\n            depth = max(depth, dict_depth(value) + 1)\n    return depth\n\n\n# test case\nd = {1: {2: {3: {4: {5: {6: {7: {}}}}} } } }\nprint(dict_depth(d)) # Output: 4\n\n\nd = {1: {2: {3: {4: {5: {6: {7: {8: {9: {10: {11: {12: {13: {14: {15: {16: {}}}}}}}}}}} } } } } } } } }\nprint(dict_depth(d)) # Output: 7\n\n\nd = {1: {2: {3: {4: {5: {6: {7: {8: {9: {10: {11: {12: {13: {14: {15: {16: {17: {18: {19: {20: {21: {}}}}}}}}}}} } } } } } } } } } } } } } }\nprint(dict_depth(d)) # Output: 6\n\n\nd = {}\nprint(dict_depth(d)) # Output: 0\n\n\nd = {1: {2: {3: {4: {5: {6: {7: {8: {",
        "generated_testcode": "assert dict_depth({}) == 0\n",
        "test": "assert dict_depth({'a':1, 'b': {'c': {'d': {}}}})==4\nassert dict_depth({'a':1, 'b': {'c':'python'}})==2\nassert dict_depth({1: 'Sun', 2: {3: {4:'Mon'}}})==3",
        "canonical_solution": "def dict_depth(d):\r\n    if isinstance(d, dict):\r\n        return 1 + (max(map(dict_depth, d.values())) if d else 0)\r\n    return 0"
    },
    {
        "number": 302,
        "prompt": "Write a python function to find the most significant bit number which is also a set bit.\ndef set_Bit_Number(n): \n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    highest_set_bit = 0\n    while (n > 0): \n        highest_set_bit = n & 1\n        n >>= 1\n    return highest_set_bit \n\n#Test the function\nprint(set_Bit_Number(23)) #Output: 1\nprint(set_Bit_Number(42)) #Output: 3\nprint(set_Bit_Number(7)) #Output: 1\nprint(set_Bit_Number(10)) #Output: 2\nprint(set_Bit_Number(26)) #Output: 2\nprint(set_Bit_Number(13)) #Output: 1\nprint(set_Bit_Number(15)) #Output: 1\nprint(set_Bit_Number(20)) #Output: 1\nprint(set_Bit_Number(31)) #Output: 1\nprint(set_Bit_Number(0)) #Output: 0\n",
        "generated_testcode": "assert set_Bit_Number(10) == 1\n",
        "test": "assert set_Bit_Number(6) == 4\nassert set_Bit_Number(10) == 8\nassert set_Bit_Number(18) == 16",
        "canonical_solution": "def set_Bit_Number(n): \r\n    if (n == 0): \r\n        return 0; \r\n    msb = 0; \r\n    n = int(n / 2); \r\n    while (n > 0): \r\n        n = int(n / 2); \r\n        msb += 1; \r\n    return (1 << msb)"
    },
    {
        "number": 303,
        "prompt": "Write a python function to check whether the count of inversion of two types are same or not.\ndef solve(a,n):   \n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    # function to count the number of inversions\n    def count_inversions(arr):\n        inv_count=0\n        for i in range(n):\n            for j in range(i+1,n):\n                if arr[i] > arr[j]:\n                    inv_count += 1\n        return inv_count\n    \n    # function to merge two arrays\n    def merge(arr,left,mid,right):\n        i=left\n        j=mid+1\n        k=0\n        temp=[]\n        while i<mid+1 and j<right+1:\n            if arr[i]<=arr[j]:\n                temp.append(arr[i])\n                i+=1\n            else:\n                temp.append(arr[j])\n                j+=1\n            k+=1\n        while i<=mid:\n            temp.append(arr[i])\n            i+=1\n        while j<=right:\n            temp.append(arr[j])\n            j+=1\n        for i in range(left,right+1):\n            arr[i]=temp[i-left]\n    \n    def merge_sort(arr,left,right):\n        if left<right:\n            mid=(left+right)//2\n            merge_sort(arr,left,mid)\n            merge_sort(arr,mid+1,right)\n            merge(arr,left,mid,right)\n    \n    # main function to check the inversions\n    merge_sort(a,0,n-",
        "generated_testcode": "assert solve([1,2,3,4,5,6,7,8,9], 3) == True\n",
        "test": "assert solve([1,0,2],3) == True\nassert solve([1,2,0],3) == False\nassert solve([1,2,1],3) == True",
        "canonical_solution": "import sys \r\ndef solve(a,n):   \r\n    mx = -sys.maxsize - 1\r\n    for j in range(1,n):  \r\n        if (mx > a[j]):  \r\n            return False  \r\n        mx = max(mx,a[j - 1])    \r\n    return True"
    },
    {
        "number": 304,
        "prompt": "Write a python function to find element at a given index after number of rotations.\ndef find_Element(arr,ranges,rotations,index) :  \n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    if index >= len(arr) :  \n        return None  \n    min_element = arr[0]  \n    min_index = 0  \n    for i in range(1, len(arr)) :  \n        if arr[i] < min_element :  \n            min_element = arr[i]  \n            min_index = i  \n    for i in range(1, rotations + 1) :  \n        temp = arr[min_index]  \n        for j in range(len(arr)) :  \n            arr[j] = arr[(j + i) % len(arr)]  \n        min_element = arr[0]  \n        min_index = 0  \n        for j in range(1, len(arr)) :  \n            if arr[j] < min_element :  \n                min_element = arr[j]  \n                min_index = j  \n        arr[min_index] = temp  \n    return arr[index]  \n\n#Example:  \narr = [3,4,5,1,2,6,7]  \nranges = 2  \nindex = 4  \nprint(find_Element(arr,ranges,index))  \n# Output: 2 ",
        "generated_testcode": "assert find_Element([1,2,3,4,5,6,7,8,9,10,11,12],2,3) == 7\n",
        "test": "assert find_Element([1,2,3,4,5],[[0,2],[0,3]],2,1) == 3\nassert find_Element([1,2,3,4],[[0,1],[0,2]],1,2) == 3\nassert find_Element([1,2,3,4,5,6],[[0,1],[0,2]],1,1) == 1",
        "canonical_solution": "def find_Element(arr,ranges,rotations,index) :  \r\n    for i in range(rotations - 1,-1,-1 ) : \r\n        left = ranges[i][0] \r\n        right = ranges[i][1] \r\n        if (left <= index and right >= index) : \r\n            if (index == left) : \r\n                index = right \r\n            else : \r\n                index = index - 1 \r\n    return arr[index] "
    },
    {
        "number": 305,
        "prompt": "Write a function to match two words from a list of words starting with letter 'p'.\ndef start_withp(words):\n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    # Your code here\n    start_p_words = []\n    for word in words:\n        if word.startswith('p'):\n            start_p_words.append(word)\n    return start_p_words\n\n# Test cases\nprint(start_withp(['python', 'java', 'kotlin', 'javascript', 'python', 'ruby', 'php', 'perl', 'python', 'lua'])\n# Output: ['python', 'php', 'python']\n\nprint(start_withp(['python', 'java', 'kotlin', 'javascript', 'ruby', 'perl', 'lua'])\n# Output: ['python', 'perl']\n\nprint(start_withp(['python', 'java', 'kotlin', 'javascript', 'ruby', 'perl'])\n# Output: []\n\nprint(start_withp(['python', 'javascript', 'ruby', 'lua', 'swift', 'kotlin', 'perl'])\n# Output: ['python', 'javascript', 'perl'] ",
        "generated_testcode": "assert start_withp(['python', 'java', 'javascript', 'php', 'perl', 'ruby', 'python', 'python3']) == ['python', 'python3']\n",
        "test": "assert start_withp([\"Python PHP\", \"Java JavaScript\", \"c c++\"])==('Python', 'PHP')\nassert start_withp([\"Python Programming\",\"Java Programming\"])==('Python','Programming')\nassert start_withp([\"Pqrst Pqr\",\"qrstuv\"])==('Pqrst','Pqr')",
        "canonical_solution": "import re\r\ndef start_withp(words):\r\n for w in words:\r\n        m = re.match(\"(P\\w+)\\W(P\\w+)\", w)\r\n        if m:\r\n            return m.groups()"
    },
    {
        "number": 306,
        "prompt": "Write a function to find the maximum sum of increasing subsequence from prefix till ith index and also including a given kth element which is after i, i.e., k > i .\ndef max_sum_increasing_subseq(a, n, index, k):\n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    \"\"\"\n    :param a: List of integers\n    :param n: length of the list\n    :param index: index till which we need to find the maximum sum\n    :param k: kth index of the element which is to be included in the subsequence\n    :return: maximum sum of increasing subsequence including the kth index\n    \"\"\"\n    dp = [0]*n\n    for i in range(n):\n        dp[i] = a[i]\n    for i in range(1, n):\n        for j in range(i):\n            if a[i] > a[j] and dp[i] < dp[j] + a[i]:\n                dp[i] = dp[j] + a[i]\n    max_sum = max(dp)\n    if k < n:\n        for i in range(n):\n            if dp[i] < a[k]:\n                max_sum = max(max_sum, a[k] + dp[i])\n    return max_sum\n\n# test the function\na = [1, 101, 2, 3, 100, 4, 50, 6, 20]\nn = len(a)\nk = 5\nprint(max_sum_increasing_subseq(a, n, n-1, k))  # expected output: 106\n\n# time complexity: O(n^2)\n# space complexity: O(n)\n",
        "generated_testcode": "assert max_sum_increasing_subseq([1, 2, 3, 4, 5, 10, 6, 7, 8, 9], 3, 5) == 30\n",
        "test": "assert max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5 ], 7, 4, 6) == 11\nassert max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5 ], 7, 2, 5) == 7\nassert max_sum_increasing_subseq([11, 15, 19, 21, 26, 28, 31], 7, 2, 4) == 71",
        "canonical_solution": "def max_sum_increasing_subseq(a, n, index, k):\r\n\tdp = [[0 for i in range(n)] \r\n\t\t\tfor i in range(n)]\r\n\tfor i in range(n):\r\n\t\tif a[i] > a[0]:\r\n\t\t\tdp[0][i] = a[i] + a[0]\r\n\t\telse:\r\n\t\t\tdp[0][i] = a[i]\r\n\tfor i in range(1, n):\r\n\t\tfor j in range(n):\r\n\t\t\tif a[j] > a[i] and j > i:\r\n\t\t\t\tif dp[i - 1][i] + a[j] > dp[i - 1][j]:\r\n\t\t\t\t\tdp[i][j] = dp[i - 1][i] + a[j]\r\n\t\t\t\telse:\r\n\t\t\t\t\tdp[i][j] = dp[i - 1][j]\r\n\t\t\telse:\r\n\t\t\t\tdp[i][j] = dp[i - 1][j]\r\n\treturn dp[index][k]"
    },
    {
        "number": 307,
        "prompt": "Write a function to get a colon of a tuple.\ndef colon_tuplex(tuplex,m,n):\n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    \"\"\"\n    This function takes a tuple as input and returns a new tuple with the colon at the mth index and nth index swapped.\n    \"\"\"\n    new_tuple = []\n    for i in range(len(tuplex)):\n        if i == m:\n            new_tuple.append(tuplex[n])\n        elif i == n:\n            new_tuple.append(tuplex[m])\n        else:\n            new_tuple.append(tuplex[i])\n    return tuple(new_tuple)\n\n\n#Testing the function\nmy_tuple = (1,2,3,4,5,6,7,8,9)\nprint(colon_tuplex(my_tuple,2,5)) #Output: (1, 6, 2, 3, 4, 5, 7, 8, 9)\nprint(colon_tuplex(my_tuple,4,1)) #Output: (1, 5, 4, 2, 3, 6, 7, 8, 9)\nprint(colon_tuplex(my_tuple,0,4)) #Output: (9, 2, 3, 4, 5, 6, 7, 8)\n\n\n#Example\nt = (1,2,3,4,5)\nprint(colon_tuplex(t,1,2)) #Output: (2, 3, 1, 4, 5)",
        "generated_testcode": "assert colon_tuplex((1,2,3,4,5,6,7,8,9),2,3) == (3,6)\n",
        "test": "assert colon_tuplex((\"HELLO\", 5, [], True) ,2,50)==(\"HELLO\", 5, [50], True) \nassert colon_tuplex((\"HELLO\", 5, [], True) ,2,100)==((\"HELLO\", 5, [100],True))\nassert colon_tuplex((\"HELLO\", 5, [], True) ,2,500)==(\"HELLO\", 5, [500], True)",
        "canonical_solution": "from copy import deepcopy\r\ndef colon_tuplex(tuplex,m,n):\r\n  tuplex_colon = deepcopy(tuplex)\r\n  tuplex_colon[m].append(n)\r\n  return tuplex_colon"
    },
    {
        "number": 308,
        "prompt": "Write a function to find the specified number of largest products from two given lists.\ndef large_product(nums1, nums2, N):\n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    nums1.sort()\n    nums2.sort()\n    result = []\n    for i in range(N):\n        result.append(nums1[-1] * nums2[-1])\n        nums1.pop()\n        nums2.pop()\n    return result\n\n\n# Test cases\nprint(large_product([1, 2, 3, 4, 5], [2, 3, 4, 5, 6], 2)) # Output: [20, 12]\nprint(large_product([1, 2, 3, 4, 5], [2, 3, 4, 5, 6], 3)) # Output: [30, 20, 15]\nprint(large_product([1, 2, 3, 4, 5], [2, 3, 4, 5, 6], 4)) # Output: [30, 20, 15, 12]\nprint(large_product([1, 2, 3, 4, 5], [2, 3, 4, 5, 6], 1)) # Output: [30]\nprint(large_product([1, 2, 3, 4, 5], [2, 3, 4, 5, 6], 0)) # Output: []",
        "generated_testcode": "assert large_product([1, 2, 3, 4, 5], [6, 7, 8, 9], 2) == [72, 56]\n",
        "test": "assert large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],3)==[60, 54, 50]\nassert large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],4)==[60, 54, 50, 48]\nassert large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],5)==[60, 54, 50, 48, 45]",
        "canonical_solution": "def large_product(nums1, nums2, N):\r\n    result = sorted([x*y for x in nums1 for y in nums2], reverse=True)[:N]\r\n    return result"
    },
    {
        "number": 309,
        "prompt": "Write a python function to find the maximum of two numbers.\ndef maximum(a,b):   \n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    if a > b:\n        return a\n    else:\n        return b\n\n# Test the function\nprint(maximum(5,10))\nprint(maximum(15,20))\nprint(maximum(7,3))\nprint(maximum(-5,-20))\n\n# Output: \n# 10\n# 20\n# 15\n# 5\n\n# Write a python function to find the minimum of two numbers\ndef minimum(a,b):   \n    if a < b:\n        return a\n    else:\n        return b\n\n# Test the function\nprint(minimum(5,10))\nprint(minimum(15,20))\nprint(minimum(7,3))\nprint(minimum(-5,-20))\n# Output: \n# 5\n# 15\n# -5\n# -20\n\n# Write a python function to find the absolute difference between two numbers\ndef absolute_difference(a,b):   \n    return abs(a - b)\n\n# Test the function\nprint(absolute_difference(10,5))\nprint(absolute_difference(-10,5))\nprint(absolute_difference(5,10))\n# Output: \n# 5\n# 15\n# 5\n\n# Write a python function to find the average of three numbers\ndef average(a,b,c):\n    return (a + b + c) / 3\n# Test the function\n",
        "generated_testcode": "assert maximum(5, 10) == 10\n",
        "test": "assert maximum(5,10) == 10\nassert maximum(-1,-2) == -1\nassert maximum(9,7) == 9",
        "canonical_solution": "def maximum(a,b):   \r\n    if a >= b: \r\n        return a \r\n    else: \r\n        return b "
    },
    {
        "number": 310,
        "prompt": "Write a function to convert a given string to a tuple.\ndef string_to_tuple(str1):\n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    # return tuple(str1)\n    return tuple(str1)\n\n# Example usage:\nprint(string_to_tuple(\"hello\")) # Output: ('h', 'e', 'l', 'l', 'o')\nprint(string_to_tuple(\"python\")) # Output: ('p', 'y', 't', 'h', 'o', 'n')\nprint(string_to_tuple(\"programming\")) # Output: ('p', 'r', 'o', 'g', 'r', 'a', 'm', 'm', 'i', 'n', 'g')\nprint(string_to_tuple(\"world\")) # Output: ('w', 'o', 'r', 'l', 'd')\n\n\n# One liner solution:\ndef string_to_tuple(str1):\n    return tuple(str1)\n\n# Example usage:\nprint(string_to_tuple(\"hello\")) # Output: ('h', 'e', 'l', 'l', 'o')\nprint(string_to_tuple(\"python\")) # Output: ('p', 'y', 't', 'h', 'o', 'n')\nprint(string_to_tuple(\"programming\")) # Output: ('p', 'r', 'o', 'g', 'r', 'a', 'm', 'i', 'n', 'g')\nprint(string_to_tuple(\"world\")) # Output: ('w', 'o', 'r', 'l', 'd')",
        "generated_testcode": "assert string_to_tuple(\"hello\") == ('h', 'e', 'l', 'l', 'o')\n",
        "test": "assert string_to_tuple(\"python 3.0\")==('p', 'y', 't', 'h', 'o', 'n', '3', '.', '0')\nassert string_to_tuple(\"item1\")==('i', 't', 'e', 'm', '1')\nassert string_to_tuple(\"15.10\")==('1', '5', '.', '1', '0')",
        "canonical_solution": "def string_to_tuple(str1):\r\n    result = tuple(x for x in str1 if not x.isspace()) \r\n    return result"
    },
    {
        "number": 311,
        "prompt": "Write a python function to set the left most unset bit.\ndef set_left_most_unset_bit(n): \n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    \"\"\"\n    Given a positive integer n, returns the integer with the left most unset bit set.\n    \"\"\"\n    if n & 1 == 0:\n        return n | 1\n    else:\n        return n & (n-1)\n\n\n# Test the function\nprint(set_left_most_unset_bit(10)) # Output: 10\nprint(set_left_most_unset_bit(12)) # Output: 13\nprint(set_left_most_unset_bit(25)) # Output: 26\nprint(set_left_most_unset_bit(64)) # Output: 64\nprint(set_left_most_unset_bit(1)) # Output: 2\nprint(set_left_most_unset_bit(3)) # Output: 4\nprint(set_left_most_unset_bit(7)) # Output: 8\nprint(set_left_most_unset_bit(123)) # Output: 128\nprint(set_left_most_unset_bit(127)) # Output: 128\nprint(set_left_most_unset_bit(0)) # Output: 1\nprint(set_left_most_unset_bit(15)) # Output: 16\nprint(set_left_most_unset_bit(16)) # Output: 16\nprint(set_left_most_unset_bit(",
        "generated_testcode": "assert set_left_most_unset_bit(0b1010101010) == 0b101010100\n",
        "test": "assert set_left_most_unset_bit(10) == 14\nassert set_left_most_unset_bit(12) == 14\nassert set_left_most_unset_bit(15) == 15",
        "canonical_solution": "def set_left_most_unset_bit(n): \r\n    if not (n & (n + 1)): \r\n        return n \r\n    pos, temp, count = 0, n, 0 \r\n    while temp: \r\n        if not (temp & 1): \r\n            pos = count      \r\n        count += 1; temp>>=1\r\n    return (n | (1 << (pos))) "
    },
    {
        "number": 312,
        "prompt": "Write a function to find the volume of a cone.\ndef volume_cone(r,h):\n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    import math\n    return (1/3) * math.pi * r**2 * h\n\n#Test the function\nprint(volume_cone(5, 10))\n\n#Write a function to find the area of a circle\ndef area_circle(r):\n    import math\n    return math.pi * r**2\n\n#Test the function\nprint(area_circle(5))\n\n#Write a function to find the area of a rectangle\ndef area_rectangle(l, w):\n    return l * w\n\n#Test the function\nprint(area_rectangle(10, 5))\n\n#Write a function to find the area of a triangle\ndef area_triangle(b, h):\n    return 0.5 * b * h\n\n#Test the function\nprint(area_triangle(5, 10))\n\n#Write a function to find the circumference of a circle\ndef circumference_circle(r):\n    import math\n    return 2 * math.pi * r\n\n#Test the function\nprint(circumference_circle(5))\n\n#Write a function to find the surface area of a sphere\ndef surface_area_sphere(r):\n    import math\n    return 4 * math.pi * r**2\n\n#Test the function\nprint(surface_area_sphere(5))\n\n#Write a function to find the surface area of a cylinder\ndef surface_area_cylinder(r, h):\n    import math\n    return 2 * math",
        "generated_testcode": "assert volume_cone(5,10) == 151.08\n",
        "test": "assert volume_cone(5,12)==314.15926535897927\nassert volume_cone(10,15)==1570.7963267948965\nassert volume_cone(19,17)==6426.651371693521",
        "canonical_solution": "import math\r\ndef volume_cone(r,h):\r\n  volume = (1.0/3) * math.pi * r * r * h\r\n  return volume"
    },
    {
        "number": 313,
        "prompt": "Write a python function to print positive numbers in a list.\ndef pos_nos(list1):\n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    for num in list1:\n        if num > 0:\n            print(num)\n\n# Driver code\nlist1 = [1, -2, 3, -4, 5, 6, -7, 8, 9]\npos_nos(list1)\n# Output: 1 3 5 6 8 9 \n\nlist2 = [-1, -2, -3, -4, -5, -6, -7, -8]\npos_nos(list2)\n# Output: ",
        "generated_testcode": "assert pos_nos([1, 2, 3, -4, 5, -6, 7, 8, -9, 10]) == [1, 2, 3, 5, 7, 8, 10]\n",
        "test": "assert pos_nos([-1,-2,1,2]) == 1,2\nassert pos_nos([3,4,-5]) == 3,4\nassert pos_nos([-2,-3,1]) == 1",
        "canonical_solution": "def pos_nos(list1):\r\n  for num in list1: \r\n    if num >= 0: \r\n       return num "
    },
    {
        "number": 314,
        "prompt": "Write a function to find out the maximum sum such that no two chosen numbers are adjacent for the given rectangular grid of dimension 2 x n.\ndef max_sum_rectangular_grid(grid, n) : \n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    mod = 10**9 + 7\n    dp = [[0 for i in range(n)] for j in range(n)]\n    dp[0][0] = grid[0][0]\n\n    for i in range(1, n) :\n        dp[0][i] = grid[0][i] + dp[0][i - 1]\n\n    for i in range(1, n) :\n        dp[i][0] = grid[i][0] + dp[i - 1][0]\n\n\n    for i in range(1, n) :\n        for j in range(1, n) :\n            dp[i][j] = grid[i][j]\n            if i == 1 and j == 1 :\n                dp[i][j] += max(dp[i - 1][j - 1], dp[i - 1][j])\n            elif i == 1 :\n                dp[i][j] += dp[i - 1][j - 1]\n            elif j == 1 :\n                dp[i][j] += dp[i - 1][j - 1]\n            else :\n                dp[i][j] += max(dp[i - 1][j], dp[i][j - 1])\n\n\n    return max(dp[n - 1])\n\n\n# Test the function\ngrid = [\n    [1, 2, 3],",
        "generated_testcode": "assert max_sum_rectangular_grid([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]], 3) == 30\n",
        "test": "assert max_sum_rectangular_grid([ [1, 4, 5], [2, 0, 0 ] ], 3) == 7\nassert max_sum_rectangular_grid([ [ 1, 2, 3, 4, 5], [ 6, 7, 8, 9, 10] ], 5) == 24\nassert max_sum_rectangular_grid([ [7, 9, 11, 15, 19], [21, 25, 28, 31, 32] ], 5) == 81",
        "canonical_solution": "def max_sum_rectangular_grid(grid, n) : \r\n\tincl = max(grid[0][0], grid[1][0]) \r\n\texcl = 0\r\n\tfor i in range(1, n) : \r\n\t\texcl_new = max(excl, incl) \r\n\t\tincl = excl + max(grid[0][i], grid[1][i]) \r\n\t\texcl = excl_new \r\n\treturn max(excl, incl)"
    },
    {
        "number": 315,
        "prompt": "Write a python function to find the first maximum length of even word.\ndef find_Max_Len_Even(str): \n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    words = str.split()\n    max_len = 0\n    for word in words:\n        if len(word) % 2 == 0 and len(word) > max_len:\n            max_len = len(word)\n    return max_len\n\n#Test the function\nprint(find_Max_Len_Even(\"The quick brown fox jumps over the lazy dog. The dog slept over the verandah.\")) #output: 4\nprint(find_Max_Len_Even(\"This is an example sentence with some words.\")) #output: 2\nprint(find_Max_Len_Even(\"Python is an amazing language to learn.\")) #output: 6\nprint(find_Max_Len_Even(\"There are no even length words in this sentence.\")) #output: 0 ",
        "generated_testcode": "assert find_Max_Len_Even(\"The quick brown fox jumps over the lazy dog\") == 2\n",
        "test": "assert find_Max_Len_Even(\"python language\") == \"language\"\nassert find_Max_Len_Even(\"maximum even length\") == \"length\"\nassert find_Max_Len_Even(\"eve\") == \"-1\"",
        "canonical_solution": "def find_Max_Len_Even(str): \r\n    n = len(str) \r\n    i = 0\r\n    currlen = 0\r\n    maxlen = 0\r\n    st = -1\r\n    while (i < n): \r\n        if (str[i] == ' '): \r\n            if (currlen % 2 == 0): \r\n                if (maxlen < currlen): \r\n                    maxlen = currlen \r\n                    st = i - currlen \r\n            currlen = 0 \r\n        else : \r\n            currlen += 1\r\n        i += 1\r\n    if (currlen % 2 == 0): \r\n        if (maxlen < currlen): \r\n            maxlen = currlen \r\n            st = i - currlen \r\n    if (st == -1): \r\n        return \"-1\" \r\n    return str[st: st + maxlen] "
    },
    {
        "number": 316,
        "prompt": "Write a function to find the index of the last occurrence of a given number in a sorted array.\ndef find_last_occurrence(A, x):\n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    i = len(A) - 1\n    while i >= 0 and A[i] == x:\n        i -= 1\n    return i\n\nA = [1, 2, 3, 4, 4, 4, 4, 5, 6, 7, 7]\nx = 4\nprint(find_last_occurrence(A, x)) # 4\n\nA = [1, 2, 3, 4, 4, 4, 4, 5, 6, 7, 7]\nx = 7\nprint(find_last_occurrence(A, x)) # 6\n\nA = [1, 2, 3, 4, 4, 4, 5, 6, 7, 7]\nx = 0\nprint(find_last_occurrence(A, x)) # -1\n\nA = [1, 2, 3, 4, 4, 4, 5, 6, 7, 7]\nx = 9\nprint(find_last_occurrence(A, x)) # -1\n\n# Time complexity O(log n)\n# Space complexity O(1)",
        "generated_testcode": "assert find_last_occurrence([1, 2, 3, 4, 4, 4, 4, 5, 6, 7, 7], 4) == 4\n",
        "test": "assert find_last_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5) == 3\nassert find_last_occurrence([2, 3, 5, 8, 6, 6, 8, 9, 9, 9], 9) == 9\nassert find_last_occurrence([2, 2, 1, 5, 6, 6, 6, 9, 9, 9], 6) == 6",
        "canonical_solution": "def find_last_occurrence(A, x):\r\n    (left, right) = (0, len(A) - 1)\r\n    result = -1\r\n    while left <= right:\r\n        mid = (left + right) // 2\r\n        if x == A[mid]:\r\n            result = mid\r\n            left = mid + 1\r\n        elif x < A[mid]:\r\n            right = mid - 1\r\n        else:\r\n            left = mid + 1\r\n    return result "
    },
    {
        "number": 317,
        "prompt": "Write a function to reflect the modified run-length encoding from a list.\ndef modified_encode(alist):\n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    result = []\n    i = 0\n    while i < len(alist):\n        count = 1\n        while i < len(alist) - 1 and alist[i] == alist[i + 1]:\n            count += 1\n            i += 1\n        result.append(str(count + 1) + str(alist[i]))\n        i += 1\n    return result\n\n\n\n# Test cases\nprint(modified_encode([1, 1, 1, 2, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 5]))  # ['21', '23', '44', '4', '5']\nprint(modified_encode([1, 1, 1, 2, 3, 3, 3, 3, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5]))  # ['21', '23', '43', '4', '54', '5']\nprint(modified_encode([1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5]))  # ['21', '22', '3', '44', '4",
        "generated_testcode": "assert modified_encode([\"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"b\", \"c\", \"c\", \"c\", \"a\", \"a\"] == [(\"a\", 4), (\"b\", 1), (\"c\", 2), (\"a\", 2), (\"a\", 1)]\n\n# Test case 2\n",
        "test": "assert modified_encode([1,1,2,3,4,4,5,1])==[[2, 1], 2, 3, [2, 4], 5, 1]\nassert modified_encode('automatically')==['a', 'u', 't', 'o', 'm', 'a', 't', 'i', 'c', 'a', [2, 'l'], 'y']\nassert modified_encode('python')==['p', 'y', 't', 'h', 'o', 'n']",
        "canonical_solution": "from itertools import groupby\r\ndef modified_encode(alist):\r\n        def ctr_ele(el):\r\n            if len(el)>1: return [len(el), el[0]]\r\n            else: return el[0]\r\n        return [ctr_ele(list(group)) for key, group in groupby(alist)]"
    },
    {
        "number": 318,
        "prompt": "Write a python function to find the maximum volume of a cuboid with given sum of sides.\ndef max_volume (s): \n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    for a in range(1,s//3+1): \n        for b in range(a,s//2+1): \n            c = s-a-b \n            if a*b*c == s: \n                return a*b*c \n    return 0 ",
        "generated_testcode": "assert max_volume(10) == 10000\n",
        "test": "assert max_volume(8) == 18\nassert max_volume(4) == 2\nassert max_volume(1) == 0",
        "canonical_solution": "def max_volume (s): \r\n    maxvalue = 0\r\n    i = 1\r\n    for i in range(s - 1): \r\n        j = 1\r\n        for j in range(s): \r\n            k = s - i - j \r\n            maxvalue = max(maxvalue, i * j * k)         \r\n    return maxvalue "
    },
    {
        "number": 319,
        "prompt": "Write a function to find all five characters long word in the given string by using regex.\ndef find_long_word(text):\n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    import re\n    regex = r'\\b\\w{5}\\b'\n    result = re.findall(regex, text)\n    return result\n\n\n# Test the function with an example\ntext = \"The quick brown fox jumps over the lazy dog. Python is a high-level programming language, and great for data analysis.\"\nprint(find_long_word(text))  # Output: ['Python']\n",
        "generated_testcode": "assert find_long_word(\"The quick brown fox jumps over the lazy dog.\") == ['quick', 'brown', 'jumps', 'lazy', 'dog']\n",
        "test": "assert find_long_word('Please move back to strem') == ['strem']\nassert find_long_word('4K Ultra HD streaming player') == ['Ultra']\nassert find_long_word('Streaming Media Player') == ['Media']",
        "canonical_solution": "import re\r\ndef find_long_word(text):\r\n  return (re.findall(r\"\\b\\w{5}\\b\", text))"
    },
    {
        "number": 320,
        "prompt": "Write a function to calculate the difference between the squared sum of first n natural numbers and the sum of squared first n natural numbers.\ndef sum_difference(n):\n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    # calculate the sum of squared first n natural numbers using a for loop\n    sum_of_squares = 0\n    for i in range(1, n+1):\n        sum_of_squares += i**2\n    # calculate the sum of the first n natural numbers using a for loop\n    sum_of_numbers = 0\n    for i in range(1, n+1):\n        sum_of_numbers += i\n    # calculate the squared sum of first n natural numbers using a for loop\n    squared_sum = 0\n    for i in range(1, n+1):\n        squared_sum += i\n    squared_sum = squared_sum**2\n    # return the difference between the sum of squared numbers and the squared sum of first n natural numbers\n    return squared_sum - sum_of_squares\n\n\n# test the function with n = 5\nprint(sum_difference(5))  # expected output: 225 (81 - 36 = 45) ",
        "generated_testcode": "assert sum_difference(5) == 225\n",
        "test": "assert sum_difference(12)==5434\nassert sum_difference(20)==41230\nassert sum_difference(54)==2151270",
        "canonical_solution": "def sum_difference(n):\r\n    sumofsquares = 0\r\n    squareofsum = 0\r\n    for num in range(1, n+1):\r\n        sumofsquares += num * num\r\n        squareofsum += num\r\n    squareofsum = squareofsum ** 2\r\n    return squareofsum - sumofsquares"
    },
    {
        "number": 321,
        "prompt": "Write a function to find the demlo number for the given number.\ndef find_demlo(s): \n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    if s == 0:\n        return 0\n    elif s == 1:\n        return 1\n    elif s == 2:\n        return 2\n    else:\n        demlo = [0] * (s+1)\n        demlo[1] = 1\n        demlo[2] = 2\n        for i in range(3, s+1):\n            demlo[i] = demlo[i-1] + demlo[i-2] + 2\n        return demlo[s]\n\n\n# Test the function\nn = int(input(\"Enter a number: \"))\nprint(\"Demlo number for\", n, \"is\", find_demlo(n))\n\n\n# Output:\n# Enter a number: 5\n# Demlo number for 5 is 12\n\n# Time complexity: O(n)\n# Space complexity: O(n)\n# Where n is the given number",
        "generated_testcode": "assert find_demlo(12345) == 12345\n",
        "test": "assert find_demlo(\"111111\") == '12345654321'\nassert find_demlo(\"1111\") == '1234321'\nassert find_demlo(\"13333122222\") == '123456789101110987654321'",
        "canonical_solution": "def find_demlo(s): \r\n\tl = len(s) \r\n\tres = \"\" \r\n\tfor i in range(1,l+1): \r\n\t\tres = res + str(i) \r\n\tfor i in range(l-1,0,-1): \r\n\t\tres = res + str(i) \r\n\treturn res \t"
    },
    {
        "number": 322,
        "prompt": "Write a function to find all index positions of the minimum values in a given list.\ndef position_min(list1):\n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    min_positions = []\n    min_val = list1[0]\n    for i in range(len(list1)):\n        if list1[i] < min_val:\n            min_val = list1[i]\n            min_positions = [i]\n        elif list1[i] == min_val:\n            min_positions.append(i)\n    return min_positions\n\n# Test the function\nprint(position_min([4,5,1,3,2,1,5,3,2]))  # Output: [1,3]\nprint(position_min([1,2,3,4,5]))     # Output: [0]\nprint(position_min([7,7,7,7,7,7]))   # Output: [0,1,2,3]\n",
        "generated_testcode": "assert position_min([1, 2, 3, 4, 5, 6, 7, 8, 9, 10] ) == [0]\n",
        "test": "assert position_min([12,33,23,10,67,89,45,667,23,12,11,10,54])==[3,11]\nassert position_min([1,2,2,2,4,4,4,5,5,5,5])==[0]\nassert position_min([2,1,5,6,8,3,4,9,10,11,8,12])==[1]",
        "canonical_solution": "def position_min(list1):\r\n    min_val = min(list1)\r\n    min_result = [i for i, j in enumerate(list1) if j == min_val]\r\n    return min_result"
    },
    {
        "number": 323,
        "prompt": "Write a function to re-arrange the given array in alternating positive and negative items.\ndef right_rotate(arr, n, out_of_place, cur):\n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    # Find the index of the first positive element\n    for i in range(n):\n        if arr[i] > 0:\n            pos_index = i\n            break\n\n    # Find the index of the first negative element\n    for i in range(n-1, -1, -1):\n        if arr[i] < 0:\n            neg_index = i\n            break\n\n    # Swap the elements from pos_index and neg_index\n    if pos_index > neg_index:\n        for i in range(pos_index, neg_index+1):\n            if out_of_place:\n                arr[i], arr[neg_index] = arr[neg_index], arr[i]\n            else:\n                temp = arr[i]\n                arr[i] = arr[neg_index]\n                arr[neg_index] = temp\n            neg_index += 1\n        if cur == 1:\n            return arr\n        return right_rotate(arr, n, 0)\n    elif pos_index < neg_index:\n        for i in range(pos_index, neg_index+1):\n            if out_of_place:\n                arr[i], arr[pos_index] = arr[pos_index], arr[i]\n            else:\n                temp = arr[i]\n                arr[i] = arr[pos_index]\n                arr[pos_index] = temp\n            pos_index -= 1\n        if cur == 1:\n            return arr",
        "generated_testcode": "assert right_rotate([1, 2, 3, -4, 5, -6, 7, -8, 9], 3, 0) == [-4, 1, 5, -8, 2, 7, 3, 9]\n",
        "test": "assert re_arrange([-5, -2, 5, 2, 4,\t7, 1, 8, 0, -8], 10) == [-5, 5, -2, 2, -8, 4, 7, 1, 8, 0]\nassert re_arrange([1, 2, 3, -4, -1, 4], 6) == [-4, 1, -1, 2, 3, 4]\nassert re_arrange([4, 7, 9, 77, -4, 5, -3, -9], 8) == [-4, 4, -3, 7, -9, 9, 77, 5]",
        "canonical_solution": "def right_rotate(arr, n, out_of_place, cur):\r\n\ttemp = arr[cur]\r\n\tfor i in range(cur, out_of_place, -1):\r\n\t\tarr[i] = arr[i - 1]\r\n\tarr[out_of_place] = temp\r\n\treturn arr\r\ndef re_arrange(arr, n):\r\n\tout_of_place = -1\r\n\tfor index in range(n):\r\n\t\tif (out_of_place >= 0):\r\n\t\t\tif ((arr[index] >= 0 and arr[out_of_place] < 0) or\r\n\t\t\t(arr[index] < 0 and arr[out_of_place] >= 0)):\r\n\t\t\t\tarr = right_rotate(arr, n, out_of_place, index)\r\n\t\t\t\tif (index-out_of_place > 2):\r\n\t\t\t\t\tout_of_place += 2\r\n\t\t\t\telse:\r\n\t\t\t\t\tout_of_place = - 1\r\n\t\tif (out_of_place == -1):\r\n\t\t\tif ((arr[index] >= 0 and index % 2 == 0) or\r\n\t\t\t (arr[index] < 0 and index % 2 == 1)):\r\n\t\t\t\tout_of_place = index\r\n\treturn arr"
    },
    {
        "number": 324,
        "prompt": "Write a function to extract the sum of alternate chains of tuples.\ndef sum_of_alternates(test_tuple):\n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    sum = 0\n    for i in range(0, len(test_tuple), 2):\n        sum += test_tuple[i]\n    return sum\n\n\n# Test the function with a tuple\nmy_tuple = (1, 2, 3, 4, 5, 6, 7, 8, 9)\nprint(sum_of_alternates(my_tuple))  # Output: 3\n\nmy_tuple = (10, 20, 30, 40, 50, 60, 70, 80, 90)\nprint(sum_of_alternates(my_tuple))  # Output: 110\n\nmy_tuple = (100, 20, 30, 40, 50, 60, 70, 80, 90, 100)\nprint(sum_of_alternates(my_tuple))  # Output: 30\n",
        "generated_testcode": "assert sum_of_alternates((( (1,2,3,4,5,6,7,8,9,10) ) ) == 15)\n",
        "test": "assert sum_of_alternates((5, 6, 3, 6, 10, 34)) == (46, 18)\nassert sum_of_alternates((1, 2, 3, 4, 5)) == (6, 9)\nassert sum_of_alternates((6, 7, 8, 9, 4, 5)) == (21, 18)",
        "canonical_solution": "def sum_of_alternates(test_tuple):\r\n  sum1 = 0\r\n  sum2 = 0\r\n  for idx, ele in enumerate(test_tuple):\r\n    if idx % 2:\r\n      sum1 += ele\r\n    else:\r\n      sum2 += ele\r\n  return ((sum1),(sum2)) "
    },
    {
        "number": 325,
        "prompt": "Write a python function to find the minimum number of squares whose sum is equal to a given number.\ndef get_Min_Squares(n):\n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    dp = [0]*(n+1\n    dp[0] = 0\n    for i in range(1, n+1):\n        dp[i] = float('inf')\n        for j in range(1, int(i**0.5)+1):\n            if i % j == 0:\n                dp[i] = min(dp[i], dp[i//j] + (i/j)//j)\n    return dp[n]\n\n# test the function\nn = 13\nprint(get_Min_Squares(n))\n\n# output: 2",
        "generated_testcode": "assert get_Min_Squares(13) == 3\n",
        "test": "assert get_Min_Squares(6) == 3\nassert get_Min_Squares(2) == 2\nassert get_Min_Squares(4) == 1",
        "canonical_solution": "def get_Min_Squares(n):\r\n    if n <= 3:\r\n        return n;\r\n    res = n \r\n    for x in range(1,n + 1):\r\n        temp = x * x;\r\n        if temp > n:\r\n            break\r\n        else:\r\n            res = min(res,1 + get_Min_Squares(n  - temp)) \r\n    return res;"
    },
    {
        "number": 326,
        "prompt": "Write a function to get the word with most number of occurrences in the given strings list.\ndef most_occurrences(test_list):\n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    count_dict = {}\n    for word in test_list:\n        for w in word.split():\n            if w in count_dict:\n                count_dict[w] += 1\n            else:\n                count_dict[w] = 1\n    max_count = 0\n    max_word = \"\"\n    for word, count in count_dict.items():\n        if count > max_count:\n            max_count = count\n            max_word = word\n    return max_word\n\n# Example usage:\ntest_list = [\"this is a test\", \"this is a test\", \"this is also a test\", \"this is a test\", \"this is also a test\", \"this is a test\"]\nprint(most_occurrences(test_list)) # Output: \"this\"\ntest_list = [\"hello world\", \"hello world\", \"hello world\", \"hello world\", \"world\"]\nprint(most_occurrences(test_list)) # Output: \"hello\"\ntest_list = [\"python is awesome\", \"python is awesome\", \"java is awesome\", \"python is awesome\"]\nprint(most_occurrences(test_list)) # Output: \"python\" ",
        "generated_testcode": "assert most_occurrences([\"hello\", \"world\", \"hello\", \"world\", \"world\", \"world\", \"world\", \"world\", \"world\", \"world\", \"world\", \"world\", \"world\", \"world\", \"world\", \"world\", \"world\", \"world\", \"world\", \"world\", \"world\", \"world\", \"world\", \"world\", \"world\", \"world\", \"world\", \"world\", \"world\", \"world\", \"world\", \"world\", \"world\", \"world\", \"world\", \"world\", \"world\", \"world\", \"world\", \"world\", \"world\", \"world\", \"world\", \"world\", \"world\", \"world\", \"world\", \"world\", \"world\", \"world\", \"world\", \"world\", \"world\", \"world\", \"world\", \"world\", \"world\", \"world\", \"world\", \"world\", \"world\", \"world\", \"world\", \"world\", \"world\", \"world\", \"world\", \"world\", \"world\", \"world\", \"world\", \"world\", \"world\", \"world\", \"world\", \"world\", \"world\", \"world\", \"world\", \"world\", \"world\", \"world\", \"world\", \"world\", \"world\", \"world\", \"world\", \"world\", \"world\", \"world\", \"world\", \"world\", \"world\", \"world\", \"world\", \"world\", \"world\", \"world\", \"world\"",
        "test": "assert most_occurrences([\"UTS is best for RTF\", \"RTF love UTS\", \"UTS is best\"] ) == 'UTS'\nassert most_occurrences([\"Its been a great year\", \"this year is so worse\", \"this year is okay\"] ) == 'year'\nassert most_occurrences([\"Families can be reunited\", \"people can be reunited\", \"Tasks can be achieved \"] ) == 'can'",
        "canonical_solution": "from collections import defaultdict \r\n\r\ndef most_occurrences(test_list):\r\n  temp = defaultdict(int)\r\n  for sub in test_list:\r\n    for wrd in sub.split():\r\n      temp[wrd] += 1\r\n  res = max(temp, key=temp.get)\r\n  return (str(res)) "
    },
    {
        "number": 327,
        "prompt": "Write a function to print check if the triangle is isosceles or not.\ndef check_isosceles(x,y,z):\n",
        "checkpoint": "7B",
        "pass": 4,
        "correct": true,
        "answer": "    if x == y or x == z or y == z:\n        return True\n    else:\n        return False\n\n# Test case\nprint(check_isosceles(5,5,10)) # True\nprint(check_isosceles(3,4,4)) # False\nprint(check_isosceles(10,12,12)) # True\nprint(check_isosceles(5,4,5)) # False\n\n",
        "generated_testcode": "assert check_isosceles(3,4,4) == True\n",
        "test": "assert check_isosceles(6,8,12)==False \nassert check_isosceles(6,6,12)==True\nassert check_isosceles(6,16,20)==False",
        "canonical_solution": "def check_isosceles(x,y,z):\r\n  if x==y or y==z or z==x:\r\n\t   return True\r\n  else:\r\n     return False"
    },
    {
        "number": 328,
        "prompt": "Write a function to rotate a given list by specified number of items to the left direction.\ndef rotate_left(list1,m,n):\n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    return list1[m:] + list1[:m]\n\n# Example:\nlist1 = [1, 2, 3, 4, 5, 6, 7, 8, 9]\nm = 2\nn = 3\nprint(rotate_left(list1,m,n)) # Output: [4, 5, 6, 7, 8, 9, 1, 2]\n\nlist2 = [1, 2, 3, 4, 5, 6, 7]\nm = 1\nn = 3\nprint(rotate_left(list2,m,n)) # Output: [3, 4, 5, 6, 7, 1]\n\nlist3 = [1, 2, 3, 4, 5]\nm = 0\nn = 4\nprint(rotate_left(list3,m,n)) # Output: [3, 4, 5, 1, 2]\n\nlist4 = [1, 2]\nm = 1\nn = 2\nprint(rotate_left(list4,m,n)) # Output: [2, 1]\n\nlist5 = []\nm = 2\nn = 0\nprint(rotate_left(list5,m,n)) # Output: []\n\n# Note: If the length of the list is not changed, the function should return the original list\n# If m and n are both greater than the length of the list, the",
        "generated_testcode": "assert rotate_left([1,2,3,4,5,6,7,8,9], 2, 3) == [7,8,9,1,2,3,4,5]\n",
        "test": "assert rotate_left([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],3,4)==[4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4]\nassert rotate_left([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],2,2)==[3, 4, 5, 6, 7, 8, 9, 10, 1, 2]\nassert rotate_left([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],5,2)==[6, 7, 8, 9, 10, 1, 2]",
        "canonical_solution": "def rotate_left(list1,m,n):\r\n  result =  list1[m:]+list1[:n]\r\n  return result"
    },
    {
        "number": 329,
        "prompt": "Write a python function to count negative numbers in a list.\ndef neg_count(list):\n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    count = 0\n    for num in list:\n        if num < 0:\n            count += 1\n    return count\n\n# Test the function with a sample list\nmy_list = [2, -4, 5, 8, -3, 1, -6, 4, 7, -1, -9, 2]\nprint(neg_count(my_list))\n\n# Output: 4",
        "generated_testcode": "assert neg_count([1,2,3,-4,5,-6,-7,8,-9]) == 4\n",
        "test": "assert neg_count([-1,-2,3,-4,-5]) == 4\nassert neg_count([1,2,3]) == 0\nassert neg_count([1,2,-3,-10,20]) == 2",
        "canonical_solution": "def neg_count(list):\r\n  neg_count= 0\r\n  for num in list: \r\n    if num <= 0: \r\n      neg_count += 1\r\n  return neg_count "
    },
    {
        "number": 330,
        "prompt": "Write a function to find all three, four, five characters long words in the given string by using regex.\ndef find_char(text):\n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    import re\n    regex = r'\\b\\w{3,5}\\b'\n    return re.findall(regex, text)\n\n# Test the function with an example string\ntext = \"This is a sample text. The quick brown fox jumps over the lazy dog.\"\nprint(find_char(text)) ",
        "generated_testcode": "assert find_char(\"This is a sample text with some words.\") == ['This', 'is', 'sample', 'text', 'with', 'some', 'words.']\n",
        "test": "assert find_char('For the four consumer complaints contact manager AKR reddy') == ['For', 'the', 'four', 'AKR', 'reddy']\nassert find_char('Certain service are subject to change MSR') == ['are', 'MSR']\nassert find_char('Third party legal desclaimers') == ['Third', 'party', 'legal']",
        "canonical_solution": "import re\r\ndef find_char(text):\r\n  return (re.findall(r\"\\b\\w{3,5}\\b\", text))"
    },
    {
        "number": 331,
        "prompt": "Write a python function to count unset bits of a given number.\ndef count_unset_bits(n): \n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    count = 0\n    for i in range(32):\n        if n & (1 << i) == 0:\n            count += 1\n    return count\n\n# Example usage:\nprint(count_unset_bits(10)) # Output: 4\nprint(count_unset_bits(7)) # Output: 2",
        "generated_testcode": "assert count_unset_bits(0b101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101",
        "test": "assert count_unset_bits(2) == 1\nassert count_unset_bits(4) == 2\nassert count_unset_bits(6) == 1",
        "canonical_solution": "def count_unset_bits(n): \r\n    count = 0\r\n    x = 1\r\n    while(x < n + 1): \r\n        if ((x & n) == 0): \r\n            count += 1\r\n        x = x << 1\r\n    return count  "
    },
    {
        "number": 332,
        "prompt": "Write a function to count character frequency of a given string.\ndef char_frequency(str1):\n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    # Initialize an empty dictionary to store the frequency of each character\n    char_freq = {}\n    # Traverse through each character in the string\n    for char in str1:\n        # If the character is already present in the dictionary, increment its frequency by 1, else add it to the dictionary with frequency 1\n        if char in char_freq:\n            char_freq[char] += 1\n        else:\n            char_freq[char] = 1\n    # Return the dictionary\n    return char_freq\n\n\n# Test the function with an example string\ninput_str = \"hello world\"\nprint(char_frequency(input_str)) ",
        "generated_testcode": "assert char_frequency(\"hello world\") == {'h': 1, 'e': 1, 'l': 3, 'o': 2, ' ' ': 1, 'w': 1, 'r': 1, 'd': 1}\n",
        "test": "assert char_frequency('python')=={'p': 1, 'y': 1, 't': 1, 'h': 1, 'o': 1, 'n': 1}\nassert char_frequency('program')=={'p': 1, 'r': 2, 'o': 1, 'g': 1, 'a': 1, 'm': 1}\nassert char_frequency('language')=={'l': 1, 'a': 2, 'n': 1, 'g': 2, 'u': 1, 'e': 1}",
        "canonical_solution": "def char_frequency(str1):\r\n    dict = {}\r\n    for n in str1:\r\n        keys = dict.keys()\r\n        if n in keys:\r\n            dict[n] += 1\r\n        else:\r\n            dict[n] = 1\r\n    return dict"
    },
    {
        "number": 333,
        "prompt": "Write a python function to sort a list according to the second element in sublist.\ndef Sort(sub_li): \n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": " \n    for i in range(len(sub_li)): \n        for j in range(0, len(sub_li)-1): \n            if sub_li[j][1] > sub_li[j+1][1]: \n                sub_li[j], sub_li[j+1] = sub_li[j+1], sub_li[j] \n   \n    return sub_li \n\n# Example usage:\nsub_list = [['apple', 3], ['banana', 2], ['cherry', 5], ['orange', 4], ['grape', 1]]\nprint(Sort(sub_list))\n# Output: [['orange', 4], ['apple', 3], ['banana', 2], ['cherry', 5]]\n\n\n# Solution:\ndef sort_list_by_second_element(sub_list):\n    for i in range(len(sub_list)):\n        for j in range(0, len(sub_list)-1):\n            if sub_list[j][1] > sub_list[j+1][1]:\n                sub_list[j], sub_list[j+1] = sub_list[j+1], sub_list[j]\n    return sub_list\n\n\n# Test the function\nsub_list = [['apple', 3], ['banana', 2], ['cherry', 5], ['orange', 4], ['grape', 1]]\nprint(sort_list_by",
        "generated_testcode": "assert Sort([[1,2,3], [4,1], [5,4], [6,2], [7,3]]) == [[4,1], [5,4], [1,2], [7,3], [6,2]]\n\n",
        "test": "assert Sort([['a', 10], ['b', 5], ['c', 20], ['d', 15]]) == [['b', 5], ['a', 10], ['d', 15], ['c', 20]]\nassert Sort([['452', 10], ['256', 5], ['100', 20], ['135', 15]]) == [['256', 5], ['452', 10], ['135', 15], ['100', 20]]\nassert Sort([['rishi', 10], ['akhil', 5], ['ramya', 20], ['gaur', 15]]) == [['akhil', 5], ['rishi', 10], ['gaur', 15], ['ramya', 20]]",
        "canonical_solution": "def Sort(sub_li): \r\n    sub_li.sort(key = lambda x: x[1]) \r\n    return sub_li "
    },
    {
        "number": 334,
        "prompt": "Write a python function to check whether the triangle is valid or not if sides are given.\ndef check_Validity(a,b,c):  \n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": true,
        "answer": "    if a+b>c and a+c>b and b+c>a:\n        return True\n    else:\n        return False\n    \n#Testing the function\nprint(check_Validity(3,4,5)) #True\nprint(check_Validity(5,12,13)) #False\nprint(check_Validity(10,10,10)) #False\n\n\n#A triangle is valid if the sum of any two sides is always greater than the third side.\n#To check whether the given three sides form a valid triangle or not, we can use the above function. ",
        "generated_testcode": "assert check_Validity(3,4,5) == True\n",
        "test": "assert check_Validity(1,2,3) == False\nassert check_Validity(2,3,5) == False\nassert check_Validity(7,10,5) == True",
        "canonical_solution": "def check_Validity(a,b,c):  \r\n    if (a + b <= c) or (a + c <= b) or (b + c <= a) : \r\n        return False\r\n    else: \r\n        return True        "
    },
    {
        "number": 335,
        "prompt": "Write a function to find the sum of arithmetic progression.\ndef ap_sum(a,n,d):\n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    sum=0\n    for i in range(n):\n        sum+=a\n        a+=d\n    return sum\n\n#test the function\na=1\nn=10\nd=2\nprint(ap_sum(a,n,d)) # 555\n\na=2\nn=8\nd=3\nprint(ap_sum(a,n,d)) # 46\n\na=5\nn=6\nd=2\nprint(ap_sum(a,n,d)) # 33\n\na=1\nn=1\nd=2\nprint(ap_sum(a,n,d)) # 1\na=1\nn=10\nd=1\nprint(ap_sum(a,n,d)) # 10\na=0\nn=3\nd=1\nprint(ap_sum(a,n,d)) # 0\na=10\nn=5\nd=-2\nprint(ap_sum(a,n,d)) # -20\n\na=-1\nn=4\nd=3\nprint(ap_sum(a,n,d)) # -6\na=-1\nn=6\nd=2\nprint(ap_sum(a,n,d)) # -13\na=-2\nn=4\nd=-3\nprint(ap_sum(a,n,d)) # 2\n",
        "generated_testcode": "assert ap_sum(1,1,1) == 1\n",
        "test": "assert ap_sum(1,5,2)==25\nassert ap_sum(2,6,4)==72\nassert ap_sum(1,4,5)==34",
        "canonical_solution": "def ap_sum(a,n,d):\r\n  total = (n * (2 * a + (n - 1) * d)) / 2\r\n  return total"
    },
    {
        "number": 336,
        "prompt": "Write a function to check whether the given month name contains 28 days or not.\ndef check_monthnum(monthname1):\n",
        "checkpoint": "7B",
        "pass": 4,
        "correct": true,
        "answer": "    months = [\"January\", \"February\", \"April\", \"June\", \"September\", \"November\", \"December\"]\n    if monthname1 in months:\n        return True\n    else:\n        return False\n\n#Test the function\nprint(check_monthnum(\"January\")) # Output: True\nprint(check_monthnum(\"March\")) # Output: False\nprint(check_monthnum(\"April\")) # Output: True\nprint(check_monthnum(\"May\")) # Output: False\nprint(check_monthnum(\"December\")) # Output: True\nprint(check_monthnum(\"February\")) # Output: True\n",
        "generated_testcode": "assert check_monthnum(\"February\") == True\n",
        "test": "assert check_monthnum(\"February\")==True\nassert check_monthnum(\"January\")==False\nassert check_monthnum(\"March\")==False",
        "canonical_solution": "def check_monthnum(monthname1):\r\n  if monthname1 == \"February\":\r\n    return True\r\n  else:\r\n    return False"
    },
    {
        "number": 337,
        "prompt": "Write a function that matches a word at the end of a string, with optional punctuation.\ndef text_match_word(text):\n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    word = re.search(r'\\b\\w+\\b(?=\\W*$)', text)\n    return word.group() if word else None\n\n# Test cases\nprint(text_match_word(\"This is a sentence.\")) # Output: sentence.\nprint(text_match_word(\"Hello world!\")) # Output: world!\nprint(text_match_word(\"Python is awesome!\")) # Output: awesome!\nprint(text_match_word(\"The quick brown fox jumps over the lazy dog\")) # Output: dog\nprint(text_match_word(\"This is a sentence.\")) # Output: None\nprint(text_match_word(\"Hello world\")) # Output: None\nprint(text_match_word(\"Python is awesome\")) # Output: None\n\n# Additional test cases\nprint(text_match_word(\"Hello, world!\")) # Output: world!\nprint(text_match_word(\"The quick brown fox jumps over the lazy dog.\")) # Output: dog.\nprint(text_match_word(\"Hello, world!\")) # Output: world!\nprint(text_match_word(\"Python is awesome\")) # Output: awesome\nprint(text_match_word(\"Python is awesome.\")) # Output: None",
        "generated_testcode": "assert text_match_word(\"Hello, world!\") == \"world\"\n",
        "test": "assert text_match_word(\"python.\")==('Found a match!')\nassert text_match_word(\"python.\")==('Found a match!')\nassert text_match_word(\"  lang  .\")==('Not matched!')",
        "canonical_solution": "import re\r\ndef text_match_word(text):\r\n        patterns = '\\w+\\S*$'\r\n        if re.search(patterns,  text):\r\n                return 'Found a match!'\r\n        else:\r\n                return 'Not matched!'"
    },
    {
        "number": 338,
        "prompt": "Write a python function to count the number of substrings with same first and last characters.\ndef check_Equality(s): \n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": true,
        "answer": "    count = 0\n    n = len(s)\n    for i in range(n): \n        for j in range(i+1, n): \n            if s[i] == s[j]: \n                count += 1\n    return count \n\ndef count_Substrings(s): \n    count = 0\n    for i in range(len(s)): \n        for j in range(i, len(s)): \n            if s[i] == s[j]: \n                count += 1\n    return count \n\ndef count_Substrings_with_same_first_and_last(s): \n    count = 0\n    n = len(s)\n    for i in range(n): \n        for j in range(i+1, n): \n            if s[i] == s[j]: \n                count += 1\n            if s[i] == s[j-1]: \n                count += 1\n    return count \n\n\n# Test Cases \nprint(check_Equality(\"hello\")) # Output: 3\nprint(count_Substrings(\"hello\")) # Output: 10\nprint(count_Substrings_with_same_first_and_last(\"hello\")) # Output: 6 ",
        "generated_testcode": "assert check_Equality(\"abcde\") == 0\n",
        "test": "assert count_Substring_With_Equal_Ends('aba') == 4\nassert count_Substring_With_Equal_Ends('abcab') == 7\nassert count_Substring_With_Equal_Ends('abc') == 3",
        "canonical_solution": "def check_Equality(s): \r\n    return (ord(s[0]) == ord(s[len(s) - 1])); \r\ndef count_Substring_With_Equal_Ends(s): \r\n    result = 0; \r\n    n = len(s); \r\n    for i in range(n):\r\n        for j in range(1,n-i+1): \r\n            if (check_Equality(s[i:i+j])): \r\n                result+=1; \r\n    return result; "
    },
    {
        "number": 339,
        "prompt": "Write a python function to find the maximum occuring divisor in an interval.\ndef find_Divisor(x,y):  \n",
        "checkpoint": "7B",
        "pass": 8,
        "correct": true,
        "answer": "    max_div = 1\n    for i in range(2,x):\n        if x % i == 0 and y % i == 0:\n            max_div = i\n    return max_div\n\nprint(find_Divisor(12,15))\n\n",
        "generated_testcode": "assert find_Divisor(12, 30) == 6\n",
        "test": "assert find_Divisor(2,2) == 2\nassert find_Divisor(2,5) == 2\nassert find_Divisor(5,10) == 2",
        "canonical_solution": "def find_Divisor(x,y):  \r\n    if (x==y): \r\n        return y \r\n    return 2"
    },
    {
        "number": 340,
        "prompt": "Write a python function to find the sum of the three lowest positive numbers from a given list of numbers.\ndef sum_three_smallest_nums(lst):\n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    \"\"\"\n    This function takes a list of numbers as input and returns the sum of the three smallest positive numbers in the list\n    \"\"\"\n    # Step 1: Sort the list in ascending order\n    sorted_list = sorted(lst)\n    \n    # Step 2: Initialize variables to store the sum and count of the smallest numbers\n    smallest_sum = 0\n    count = 0\n    \n    # Step 3: Iterate through the sorted list and keep track of the three smallest numbers and their sum\n    for num in sorted_list:\n        if num > 0:\n            if count < 3:\n                smallest_sum += num\n                count += 1\n            else:\n                break\n    \n    # Step 4: Return the sum of the three smallest numbers\n    return smallest_sum\n\n# Test the function\nprint(sum_three_smallest_nums([4, -6, 8, 2, -9, 3, -1, 0, 7])) # Output: 1\nprint(sum_three_smallest_nums([4, 1, 3, 9, 8, 2, 7, 5])) # Output: 2\nprint(sum_three_smallest_nums([4, -6, -8, 2, -9, -3, -1])) # Output: 0\nprint(sum_three_smallest_nums([0, 0, 0])) # Output: 0\nprint(sum_three_smallest_nums([",
        "generated_testcode": "assert sum_three_smallest_nums([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 12\n",
        "test": "assert sum_three_smallest_nums([10,20,30,40,50,60,7]) == 37\nassert sum_three_smallest_nums([1,2,3,4,5]) == 6\nassert sum_three_smallest_nums([0,1,2,3,4,5]) == 6",
        "canonical_solution": "def sum_three_smallest_nums(lst):\r\n\treturn sum(sorted([x for x in lst if x > 0])[:3])"
    },
    {
        "number": 341,
        "prompt": "Write a function to convert the given set into ordered tuples.\ndef set_to_tuple(s):\n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    t = ()\n    for i in sorted(s):\n        t = t + (i,)\n    return t\n\n# Test the function\nset1 = {1,2,3,4,5}\nprint(set_to_tuple(set1))\n\n# Output: (1, 2, 3, 4, 5)\n\nset2 = {5,2,3,4,1}\nprint(set_to_tuple(set2))\n# Output: (1, 2, 3, 4, 5)\n\nset3 = {1,4,3,5,2}\nprint(set_to_tuple(set3))\n# Output: (1, 2, 3, 4, 5)\n\nset4 = {3,2,5,1,4}\nprint(set_to_tuple(set4))\n# Output: (1, 2, 3, 4, 5)\n",
        "generated_testcode": "assert set_to_tuple({1, 2, 3, 4, 5}) == (1, 2, 3, 4, 5)\n",
        "test": "assert set_to_tuple({1, 2, 3, 4, 5}) == (1, 2, 3, 4, 5)\nassert set_to_tuple({6, 7, 8, 9, 10, 11}) == (6, 7, 8, 9, 10, 11)\nassert set_to_tuple({12, 13, 14, 15, 16}) == (12, 13, 14, 15, 16)",
        "canonical_solution": "def set_to_tuple(s):\r\n  t = tuple(sorted(s))\r\n  return (t)"
    },
    {
        "number": 342,
        "prompt": "Write a function to find the smallest range that includes at-least one element from each of the given arrays.\n    def __init__(self, value, list_num, index):\n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "       self.value = value\n        self.list_num = list_num\n        self.index = index\n    def find_smallest_range(self, list_num):\n        ranges = []\n        for i in range(len(list_num)):\n            if self.value in list_num[i]:\n                start_index = list_num[i].index(self.value)\n                ranges.append((start_index, start_index+self.index)\n        return ranges\n    \n    def find_min_range(self, ranges):\n        min_range = float('inf')\n        for i in range(len(ranges)):\n            for j in range(i+1, len(ranges)):\n                if ranges[j][0] - ranges[i][1] < min_range:\n                    min_range = ranges[j][0] - ranges[i][1]\n        return min_range\n                \n    def smallest_range(self):\n        ranges = self.find_smallest_range(self.list_num)\n        return self.find_min_range(ranges)\n\n# Example usage:\narr1 = [1, 5, 7, 9, 10]\narr2 = [2, 3, 6, 8]\narr3 = [4, 11, 15]\nlist_num = [arr1, arr2, arr3]\nvalue = 5\nindex = 2\nobj = FindSmallestRange(value, list_",
        "generated_testcode": "assert SmallestRange.find_smallest_range([1, 5, 8, 10], [2, 3, 6], [4, 7, 9]) == (2, 9)\n",
        "test": "assert find_minimum_range([[3, 6, 8, 10, 15], [1, 5, 12], [4, 8, 15, 16], [2, 6]]) == (4, 6)\nassert find_minimum_range([[ 2, 3, 4, 8, 10, 15 ], [1, 5, 12], [7, 8, 15, 16], [3, 6]]) == (4, 7)\nassert find_minimum_range([[4, 7, 9, 11, 16], [2, 6, 13], [5, 9, 16, 17], [3, 7]]) == (5, 7)",
        "canonical_solution": "from heapq import heappop, heappush\r\nclass Node:\r\n    def __init__(self, value, list_num, index):\r\n        self.value = value\r\n        self.list_num = list_num\r\n        self.index = index\r\n    def __lt__(self, other):\r\n        return self.value < other.value\r\ndef find_minimum_range(list):\r\n    high = float('-inf')\r\n    p = (0, float('inf'))\r\n    pq = []\r\n    for i in range(len(list)):\r\n        heappush(pq, Node(list[i][0], i, 0))\r\n        high = max(high, list[i][0])\r\n    while True:\r\n        top = heappop(pq)\r\n        low = top.value\r\n        i = top.list_num\r\n        j = top.index\r\n        if high - low < p[1] - p[0]:\r\n            p = (low, high)\r\n        if j == len(list[i]) - 1:\r\n            return p\r\n        heappush(pq, Node(list[i][j + 1], i, j + 1))\r\n        high = max(high, list[i][j + 1])"
    },
    {
        "number": 343,
        "prompt": "Write a function to calculate the number of digits and letters in a string.\ndef dig_let(s):\n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    count_digits = 0\n    count_letters = 0\n    for char in s:\n        if char.isdigit():\n            count_digits += 1\n        elif char.isalpha():\n            count_letters += 1\n    return count_digits, count_letters\n\n\n# Test the function\nprint(dig_let(\"Hello123world\"))\n# Output: (3, 6)\nprint(dig_let(\"Hello world!\"))\n# Output: (0, 6)\nprint(dig_let(\"This is a test string!\"))\n# Output: (0, 110)\nprint(dig_let(\"1234567890\"))\n# Output: (10, 0)\nprint(dig_let(\"1234567890!@#$%\"))\n# Output: (10, 0)\nprint(dig_let(\"AbCdEfGhIjKlMnOpQrStUvWxYz\"))\n# Output: (0, 16)\n\n\n# This function iterates through each character in the string and checks if it is a digit using the isdigit() method. If it is a digit, it increments the count of digits. If it is not a digit, it checks if it is an alphabet using the isalpha() method. If it is an alphabet, it increments the count of letters. Finally, it returns a tuple with the counts of digits and letters. ",
        "generated_testcode": "assert dig_let(\"Hello, World!\") == (1, 10)\n",
        "test": "assert dig_let(\"python\")==(6,0)\nassert dig_let(\"program\")==(7,0)\nassert dig_let(\"python3.0\")==(6,2)",
        "canonical_solution": "def dig_let(s):\r\n d=l=0\r\n for c in s:\r\n    if c.isdigit():\r\n        d=d+1\r\n    elif c.isalpha():\r\n        l=l+1\r\n    else:\r\n        pass\r\n return (l,d)"
    },
    {
        "number": 344,
        "prompt": "Write a python function to find number of elements with odd factors in a given range.\ndef count_Odd_Squares(n,m): \n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    count = 0\n    for i in range(n,m+1):\n        for j in range(1,i):\n            if i % j == 0 and i**2 % 2 != 0:\n                count += 1\n    return count \n\n# Testing the function\nn = int(input())\nm = int(input())\nprint(count_Odd_Squares(n,m))\n\n\n# Testing the function with given input\nn = 1\nm = 15\nprint(count_Odd_Squares(n,m)) ",
        "generated_testcode": "assert count_Odd_Squares(1,10) == 4\n",
        "test": "assert count_Odd_Squares(5,100) == 8\nassert count_Odd_Squares(8,65) == 6\nassert count_Odd_Squares(2,5) == 1",
        "canonical_solution": "def count_Odd_Squares(n,m): \r\n    return int(m**0.5) - int((n-1)**0.5) "
    },
    {
        "number": 345,
        "prompt": "Write a function to find the difference between two consecutive numbers in a given list.\ndef diff_consecutivenums(nums):\n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    if len(nums) < 2:\n        return \"List must have at least two numbers\"\n    result = []\n    for i in range(len(nums) - 1):\n        result.append(nums[i + 1] - nums[i])\n    return result\n\n\n# Test the function\nprint(diff_consecutivenums([1, 3, 5, 7, 9, 111, 13]))  # Output: [2, 2, 2, 2, 2]\nprint(diff_consecutivenums([10, 20, 30, 40, 50, 60, 70]))  # Output: [10, 10, 10, 10, 10]\nprint(diff_consecutivenums([1]))  # Output: \"List must have at least two numbers\"\nprint(diff_consecutivenums([1, 2]))  # Output: [1]\n\n\n# A more concise version using list comprehension\ndef diff_consecutivenums(nums):\n    return [nums[i+1] - nums[i] for i in range(len(nums)-1)] if len(nums) > 1 else \"List must have at least two numbers\"\n\nprint(diff_consecutivenums([1, 3, 5, 7, 9, 11, 13]))  # Output",
        "generated_testcode": "assert diff_consecutivenums([1, 3, 5, 7, 9, 111, 13]) == 2\n",
        "test": "assert diff_consecutivenums([1, 1, 3, 4, 4, 5, 6, 7])==[0, 2, 1, 0, 1, 1, 1]\nassert diff_consecutivenums([4, 5, 8, 9, 6, 10])==[1, 3, 1, -3, 4]\nassert diff_consecutivenums([0, 1, 2, 3, 4, 4, 4, 4, 5, 7])==[1, 1, 1, 1, 0, 0, 0, 1, 2]",
        "canonical_solution": "def diff_consecutivenums(nums):\r\n    result = [b-a for a, b in zip(nums[:-1], nums[1:])]\r\n    return result"
    },
    {
        "number": 346,
        "prompt": "Write a function to find entringer number e(n, k).\ndef zigzag(n, k): \n",
        "checkpoint": "7B",
        "pass": 6,
        "correct": true,
        "answer": "    if n == 1 and k == 1: \n        return 1\n    elif n == 2 and k == 1: \n        return 2\n    elif n == 2 and k == 2: \n        return 3\n    elif n == 3 and k == 1: \n        return 4\n    elif n == 3 and k == 2: \n        return 5\n    elif n == 4 and k == 1: \n        return 6\n    elif n == 4 and k == 2: \n        return 7\n    elif n == 4 and k == 3: \n        return 8\n    else: \n        return (4*k - 2*k**2 + 1 + zigzag(n-1, k-1) + zigzag(n-1, k))\n        \n#Example: \nn = 4\nk = 3\nprint(\"The entering number for n =\",n, \"and k =\", k, \"is:\",zigzag(n, k)) ",
        "generated_testcode": "assert zigzag(5, 2) == 14\n",
        "test": "assert zigzag(4, 3) == 5\nassert zigzag(4, 2) == 4\nassert zigzag(3, 1) == 1",
        "canonical_solution": "def zigzag(n, k): \r\n\tif (n == 0 and k == 0): \r\n\t\treturn 1\r\n\tif (k == 0): \r\n\t\treturn 0\r\n\treturn zigzag(n, k - 1) + zigzag(n - 1, n - k)"
    },
    {
        "number": 347,
        "prompt": "Write a python function to count the number of squares in a rectangle.\ndef count_Squares(m,n): \n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    # Function to count the number of squares in a rectangle \n    # m and n are the sides of the rectangle \n    return (m * n) - ((m + n) - 1) * (m + n) + (m + n - 2) ",
        "generated_testcode": "assert count_Squares(3,4) == 9\n",
        "test": "assert count_Squares(4,3) == 20\nassert count_Squares(1,2) == 2\nassert count_Squares(2,2) == 5",
        "canonical_solution": "def count_Squares(m,n): \r\n    if (n < m): \r\n        temp = m \r\n        m = n \r\n        n = temp \r\n    return n * (n + 1) * (3 * m - n + 1) // 6"
    },
    {
        "number": 348,
        "prompt": "Write a function to count sequences of given length having non-negative prefix sums that can be generated by given values.\ndef bin_coff(n, r): \n",
        "checkpoint": "7B",
        "pass": 4,
        "correct": true,
        "answer": "    if r > n: \n        return 0\n    if r == n: \n        return 1\n    if r == 0: \n        return 1\n    if r == 1: \n        return 1\n    res = 0\n    for i in range(n+1): \n        res += bin_coff(n-i, r-1)\n    return res \n\n#Example usage \nn = 10\nr = 3\nprint(bin_coff(n, r)) ",
        "generated_testcode": "assert bin_coff(3, 2) == 3\n",
        "test": "assert find_ways(4) == 2\nassert find_ways(6) == 5\nassert find_ways(8) == 14",
        "canonical_solution": "def bin_coff(n, r): \r\n\tval = 1\r\n\tif (r > (n - r)): \r\n\t\tr = (n - r) \r\n\tfor i in range(0, r): \r\n\t\tval *= (n - i) \r\n\t\tval //= (i + 1) \r\n\treturn val \r\ndef find_ways(M): \r\n\tn = M // 2\r\n\ta = bin_coff(2 * n, n) \r\n\tb = a // (n + 1) \r\n\treturn (b) "
    },
    {
        "number": 349,
        "prompt": "Write a python function to check whether the given string is a binary string or not.\ndef check(string) :\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": true,
        "answer": "    for i in string:\n        if i != \"0\" and i != \"1\":\n            return False\n    return True\n\n# Testing the function\nstring = \"1010101\"\nif check(string):\n    print(\"Binary String\")\nelse:\n    print(\"Not a Binary String\") ",
        "generated_testcode": "assert check(\"10101010101\") == True\n",
        "test": "assert check(\"01010101010\") == \"Yes\"\nassert check(\"name0\") == \"No\"\nassert check(\"101\") == \"Yes\"",
        "canonical_solution": "def check(string) :\r\n    p = set(string) \r\n    s = {'0', '1'} \r\n    if s == p or p == {'0'} or p == {'1'}: \r\n        return (\"Yes\") \r\n    else : \r\n        return (\"No\") "
    },
    {
        "number": 350,
        "prompt": "Write a python function to minimize the length of the string by removing occurrence of only one character.\ndef minimum_Length(s) : \n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    n=len(s)\n    freq=[0]*256 # initialize a frequency array with all 0's for 256 characters\n    for i in range(n) :\n        freq[ord(s[i])] += 1 # increment the frequency of each character in the string\n    \n    max_freq=max(freq) # find the maximum frequency of a character in the string\n    \n    if max_freq > n//2 : # if maximum frequency is greater than half of the length of the string\n        return n # return the length of the string as is\n    \n    for i in range(256) :\n        if freq[i] == max_freq : # if the frequency of a character is equal to maximum frequency\n            s = s.replace(chr(i), \"\") # remove that character from the string\n    \n    return len(s) # return the length of the modified string\n\n# test the function\ns = \"geeksforgeeks\"\nprint(minimum_Length(s)) # Output: 9\ns = \"aaabbbbcc\"\nprint(minimum_Length(s)) # Output: 3\ns = \"abcdefg\"\nprint(minimum_Length(s)) # Output: 3",
        "generated_testcode": "assert minimum_Length(\"abccba\") == \"abcb\"\n",
        "test": "assert minimum_Length(\"mnm\") == 1\nassert minimum_Length(\"abcda\") == 3\nassert minimum_Length(\"abcb\") == 2",
        "canonical_solution": "def minimum_Length(s) : \r\n    maxOcc = 0\r\n    n = len(s) \r\n    arr = [0]*26\r\n    for i in range(n) : \r\n        arr[ord(s[i]) -ord('a')] += 1\r\n    for i in range(26) : \r\n        if arr[i] > maxOcc : \r\n            maxOcc = arr[i] \r\n    return n - maxOcc "
    },
    {
        "number": 351,
        "prompt": "Write a python function to find the first element occurring k times in a given array.\ndef first_Element(arr,n,k): \n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    count = {}\n    for i in arr: \n        if i not in count: \n            count[i] = 1\n        else: \n            count[i] += 1\n    for i in arr: \n        if count[i] == k: \n            return i ",
        "generated_testcode": "assert first_Element([1,2,3,4,5,6,7,7,7,7,7,7,7,8,9], 4, 7) == 7\n",
        "test": "assert first_Element([0,1,2,3,4,5],6,1) == 0\nassert first_Element([1,2,1,3,4],5,2) == 1\nassert first_Element([2,3,4,3,5,7,1,2,3,5],10,2) == 2",
        "canonical_solution": "def first_Element(arr,n,k): \r\n    count_map = {}; \r\n    for i in range(0, n): \r\n        if(arr[i] in count_map.keys()): \r\n            count_map[arr[i]] += 1\r\n        else: \r\n            count_map[arr[i]] = 1\r\n        i += 1\r\n    for i in range(0, n):  \r\n        if (count_map[arr[i]] == k): \r\n            return arr[i] \r\n        i += 1 \r\n    return -1"
    },
    {
        "number": 352,
        "prompt": "Write a python function to check whether all the characters in a given string are unique.\ndef unique_Characters(str):\n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    char_set = set()\n    for char in str:\n        if char in char_set:\n            return False\n        char_set.add(char)\n    return True\n\n#Test the function\nprint(unique_Characters('hello'))\nprint(unique_Characters('world'))\nprint(unique_Characters('python'))\nprint(unique_Characters('aabbcc'))\nprint(unique_Characters('abcdefg'))\nprint(unique_Characters('racecar'))",
        "generated_testcode": "assert unique_Characters(\"abcdefg\") == True\n",
        "test": "assert unique_Characters('aba') == False\nassert unique_Characters('abc') == True\nassert unique_Characters('abab') == False",
        "canonical_solution": "def unique_Characters(str):\r\n    for i in range(len(str)):\r\n        for j in range(i + 1,len(str)): \r\n            if (str[i] == str[j]):\r\n                return False;\r\n    return True;"
    },
    {
        "number": 353,
        "prompt": "Write a function to remove a specified column from a given nested list.\ndef remove_column(list1, n):\n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    for row in list1:\n        del row[n]\n    return list1\n\n# Test the function\nnested_list = [[\"apple\", \"banana\", \"cherry\", \"date\"], [\"orange\", \"kiwi\", \"mango\", \"pear\"], [\"grape\", \"peach\", \"pear\", \"pineapple\"]]\nprint(remove_column(nested_list, 1))\n# Output: [['apple', 'date'], ['kiwi', 'pineapple']]",
        "generated_testcode": "assert remove_column([[1,2,3],[4,5,6],[7,8,9], [10,11,12]], 1) == [[1, 3], [4, 11], [7, 10]]\n",
        "test": "assert remove_column([[1, 2, 3], [2, 4, 5], [1, 1, 1]],0)==[[2, 3], [4, 5], [1, 1]]\nassert remove_column([[1, 2, 3], [-2, 4, -5], [1, -1, 1]],2)==[[1, 2], [-2, 4], [1, -1]]\nassert remove_column([[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]],0)==[[3], [7], [3], [15, 17], [7], [11]]",
        "canonical_solution": "def remove_column(list1, n):\r\n   for i in list1: \r\n    del i[n] \r\n   return list1"
    },
    {
        "number": 354,
        "prompt": "Write a function to find t-nth term of arithemetic progression.\ndef tn_ap(a,n,d):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": true,
        "answer": "    return (a + (n-1)*d)\n\n#Test the function\na = 5\nn = 10\nd = 3\nprint(\"T-nth term of the arithmetic progression with first term\",a,\"and common difference\",d,\"is\", tn_ap(a,n,d))\n\n#Write a function to find the sum of first n terms of arithemetic progression\ndef sum_ap(a,n,d):\n    sum = 0\n    for i in range(1,n+1):\n        sum += tn_ap(a,i,d)\n    return sum\n\n#Test the function\na = 5\nn = 10\nd = 3\nprint(\"Sum of the first\",n,\"terms of the arithmetic progression with first term\",a,\"and common difference\",d,\"is\", sum_ap(a,n,d))\n\n#Write a function to find the sum of first n terms of geometric progression\ndef sum_gp(a,n,r):\n    sum = 0\n    for i in range(1,n+1):\n        sum += a * (1-r**i)/(1-r)\n    return sum\n\n#Test the function\na = 2\nn = 10\nr = 3\nprint(\"Sum of the first\",n,\"terms of the geometric progression with first term\",a,\"and common ratio\",r,\"is\", sum_gp(a,n,r))\n\n#Write a function to find the",
        "generated_testcode": "assert tn_ap(1,1,1) == 1\n",
        "test": "assert tn_ap(1,5,2)==9\nassert tn_ap(2,6,4)==22\nassert tn_ap(1,4,5)==16",
        "canonical_solution": "def tn_ap(a,n,d):\r\n  tn = a + (n - 1) * d\r\n  return tn"
    },
    {
        "number": 355,
        "prompt": "Write a python function to count the number of rectangles in a circle of radius r.\ndef count_Rectangles(radius):  \n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    if radius == 0:\n        return 0\n    if radius == 1:\n        return 1\n    if radius == 2:\n        return 2\n    if radius == 3:\n        return 4\n    return 4 * radius**2 - 4 * radius + 1\n\n# Test cases\nprint(count_Rectangles(0)) # Output: 0\nprint(count_Rectangles(1)) # Output: 1\nprint(count_Rectangles(2)) # Output: 4\nprint(count_Rectangles(3)) # Output: 12\nprint(count_Rectangles(4)) # Output: 32\nprint(count_Rectangles(5)) # Output: 60\nprint(count_Rectangles(6)) # Output: 100\nprint(count_Rectangles(7)) # Output: 180\nprint(count_Rectangles(8)) # Output: 324\nprint(count_Rectangles(9)) # Output: 560\n\n# Explanation:\n# For r=0, there is no rectangle.\n# For r=1, there is 1 rectangle.\n# For r=2, there are 4 rectangles with sides of length 1.\n# For r=3, there are 4 rectangles with sides of length 1 and 2 rectangles with sides of length 2.\n# For r=4, there are 4 rectangles with sides of length 1, 4 rectangles with sides of length 2 and 1",
        "generated_testcode": "assert count_Rectangles(1) == 1\n",
        "test": "assert count_Rectangles(2) == 8\nassert count_Rectangles(1) == 1\nassert count_Rectangles(0) == 0",
        "canonical_solution": "def count_Rectangles(radius):  \r\n    rectangles = 0 \r\n    diameter = 2 * radius \r\n    diameterSquare = diameter * diameter \r\n    for a in range(1, 2 * radius):  \r\n        for b in range(1, 2 * radius): \r\n            diagnalLengthSquare = (a * a +  b * b)  \r\n            if (diagnalLengthSquare <= diameterSquare) : \r\n                rectangles += 1\r\n    return rectangles "
    },
    {
        "number": 356,
        "prompt": "Write a function to find the third angle of a triangle using two angles.\ndef find_angle(a,b):\n",
        "checkpoint": "7B",
        "pass": 4,
        "correct": true,
        "answer": "    c = 180 - (a + b)\n    return c\n\n# Test the function\nprint(find_angle(30,45)) # Output: 105\nprint(find_angle(120,60)) # Output: 80\nprint(find_angle(45,75)) # Output: 105",
        "generated_testcode": "assert find_angle(30, 60) == 90\n",
        "test": "assert find_angle(47,89)==44\nassert find_angle(45,95)==40\nassert find_angle(50,40)==90",
        "canonical_solution": "def find_angle(a,b):\r\n c = 180 - (a + b)\r\n return c\r\n"
    },
    {
        "number": 357,
        "prompt": "Write a function to find the maximum element of all the given tuple records.\ndef find_max(test_list):\n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    # Using list comprehension\n    return max([max(i) for i in test_list])\n\n\n\n# Using for loop\ndef find_max(test_list):\n    max_val = test_list[0]\n    for record in test_list:\n        if max(record) > max_val:\n            max_val = record\n    return max_val\n\n\n# Using nested list comprehension\ndef find_max(test_list):\n    return max([max(record) for record in test_list])\n\n\n# Using lambda function\ndef find_max(test_list):\n    return max(test_list, key=lambda x: max(x))\n\n\n# Test the function\ntest_list = [(1, 2, 3, 4, 5), (10, 20, 30, 40), (100, 20, 30, 40, 50), (100, 20, 30, 40, 50, 60)]\nprint(\"Using list comprehension:\", find_max(test_list))\nprint(\"Using for loop:\", find_max(test_list))\nprint(\"Using nested list comprehension:\", find_max(test_list))\nprint(\"Using lambda function:\", find_max(test_list))\n\n\n# Output:\n# Using list comprehension: (10, 20, 30, 40, 50, 60)\n",
        "generated_testcode": "assert find_max(((()) == None)\n",
        "test": "assert find_max([(2, 4), (6, 7), (5, 1), (6, 10), (8, 7)]) == 10\nassert find_max([(3, 5), (7, 8), (6, 2), (7, 11), (9, 8)]) == 11\nassert find_max([(4, 6), (8, 9), (7, 3), (8, 12), (10, 9)]) == 12",
        "canonical_solution": "def find_max(test_list):\r\n  res = max(int(j) for i in test_list for j in i)\r\n  return (res) "
    },
    {
        "number": 358,
        "prompt": "Write a function to find modulo division of two lists using map and lambda function.\ndef moddiv_list(nums1,nums2):\n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    return list(map(lambda x: x[0] % x[1],zip(nums1,nums2)))\n\n\n#Example usage:\nnums1 = [12, 14, 16, 18]\nnums2 = [3, 5, 6]\nprint(moddiv_list(nums1,nums2)) #Output: [0, 3, 2] ",
        "generated_testcode": "assert moddiv_list([1,2,3,4,5,6],[2,3,4]) == [1,0,1,2,3]\n",
        "test": "assert moddiv_list([4,5,6],[1, 2, 3])==[0, 1, 0]\nassert moddiv_list([3,2],[1,4])==[0, 2]\nassert moddiv_list([90,120],[50,70])==[40, 50]",
        "canonical_solution": "def moddiv_list(nums1,nums2):\r\n  result = map(lambda x, y: x % y, nums1, nums2)\r\n  return list(result)"
    },
    {
        "number": 359,
        "prompt": "Write a python function to check whether one root of the quadratic equation is twice of the other or not.\ndef Check_Solution(a,b,c): \n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    if(b**2-4*a*c)<0:\n        print(\"There are no real roots\")\n    elif(b**2-4*a*c==0):\n        print(\"The roots are equal\")\n    elif(b**2-4*a*c>0):\n        print(\"The roots are real and unequal\")\n    elif(b**2-4*a*c==0):\n        print(\"The roots are imaginary\")\n    else:\n        return ((-b+math.sqrt(b**2-4*a*c))/(2*a), (-b-math.sqrt(b**2-4*a*c))/(2*a))\n\n\na=int(input(\"Enter the coefficient of x^2: \"))\nb=int(input(\"Enter the coefficient of x: \"))\nc=int(input(\"Enter the constant term: \"))\nprint(Check_Solution(a,b,c))\n\n# Function to check if one root is twice of the other root or not\ndef is_twice(x1, x2):\n    if x1 == 2*x2:\n        return True\n    else:\n        return False\n\ndef main():\n    a = int(input(\"Enter the coefficient of x^2: \"))\n    b = int(input(\"Enter the coefficient of x: \"))\n    c = int(input(\"Enter the constant term: \"))\n    if b**2-4*a*c < 0:\n        print(\"There are no",
        "generated_testcode": "assert Check_Solution(1, -3, 2) == True\n",
        "test": "assert Check_Solution(1,3,2) == \"Yes\"\nassert Check_Solution(1,2,3) == \"No\"\nassert Check_Solution(1,-5,6) == \"No\"",
        "canonical_solution": "def Check_Solution(a,b,c): \r\n    if (2*b*b == 9*a*c): \r\n        return (\"Yes\"); \r\n    else: \r\n        return (\"No\"); "
    },
    {
        "number": 360,
        "prompt": "Write a function to find the n\u2019th carol number.\ndef get_carol(n): \n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": true,
        "answer": "    def factorial(num):\n        if num == 0:\n            return 1\n        else:\n            return num * factorial(num-1)\n    def sum_of_digits(num):\n        total = 0\n        while num > 0:\n            total += num % 10\n            num //= 10\n        return total\n    result = 0\n    for i in range(1, n+1):\n        result += factorial(i) * sum_of_digits(factorial(i))\n    return result\n\n\nprint(get_carol(1)) # output: 1\nprint(get_carol(2)) # output: 3\nprint(get_carol(3)) # output: 6\nprint(get_carol(4)) # output: 10\nprint(get_carol(5)) # output: 15\nprint(get_carol(6)) # output: 24",
        "generated_testcode": "assert get_carol(1) == 1\n",
        "test": "assert get_carol(2) == 7\nassert get_carol(4) == 223\nassert get_carol(5) == 959",
        "canonical_solution": "def get_carol(n): \r\n\tresult = (2**n) - 1\r\n\treturn result * result - 2"
    },
    {
        "number": 361,
        "prompt": "Write a function to remove empty lists from a given list of lists.\ndef remove_empty(list1):\n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    result = []\n    for lst in list1:\n        if lst != []:\n            result.append(lst)\n    return result\n\n#Test the function\nlist1 = [[1,2,3],[],[],[],[4,5],[6,],[],[],[],[],[7,8,9],[]]\nprint(remove_empty(list1)) #[ [1,2,3],[4,5],[6],[7,8,9] ]\n\nlist2 = [[\"a\",\"b\",\"c\",\"d\",\"e\"],[],[\"f\",\"g\",\"h\"],[],[\"i\",\"j\",\"k\",[]],[]]\nprint(remove_empty(list2)) #[[\"a\", \"b\", \"c\", \"d\", \"e\"], [\"f\", \"g\"], [\"i\", \"j\", []]\n\nlist3 = [[]]\nprint(remove_empty(list3)) #[]\n\nlist4 = [1,2,3,4,5,[],6,7,[],[]]\nprint(remove_empty(list4)) #[1, 2, 3, 4, 5, 6, 7]",
        "generated_testcode": "assert remove_empty([[1, 2, 3, []]) == [1, 2, 3]\n",
        "test": "assert remove_empty([[], [], [], 'Red', 'Green', [1,2], 'Blue', [], []])==['Red', 'Green', [1, 2], 'Blue']\nassert remove_empty([[], [], [],[],[], 'Green', [1,2], 'Blue', [], []])==[ 'Green', [1, 2], 'Blue']\nassert remove_empty([[], [], [], 'Python',[],[], 'programming', 'language',[],[],[], [], []])==['Python', 'programming', 'language']",
        "canonical_solution": "def remove_empty(list1):\r\n  remove_empty = [x for x in list1 if x]\r\n  return remove_empty"
    },
    {
        "number": 362,
        "prompt": "Write a python function to find the item with maximum occurrences in a given list.\ndef max_occurrences(nums):\n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    count = {}\n    for num in nums:\n        if num in count:\n            count[num] += 1\n        else:\n            count[num] = 1\n    max_num = None\n    max_count = 0\n    for key, value in count.items():\n        if value > max_count:\n            max_num = key\n            max_count = value\n    return max_num\n\n# Test cases\nprint(max_occurrences([1, 2, 3, 4, 2, 3, 1, 1, 5, 3])) # Output: 3\nprint(max_occurrences([5, 5, 5, 5, 5, 5, 5, 5])) # Output: 5\nprint(max_occurrences([1, 2, 3, 4, 5, 6])) # Output: None\nprint(max_occurrences([1, 2, 3, 4, 5])) # Output: None ",
        "generated_testcode": "assert max_occurrences([1, 2, 3, 4, 2, 3, 2, 3, 1, 5, 4, 6, 4, 6, 6, 1]) == 3\n",
        "test": "assert max_occurrences([1,2,3,1,2,3,12,4,2]) ==  2\nassert max_occurrences([1,2,6,7,0,1,0,1,0]) == 1,0\nassert max_occurrences([1,2,3,1,2,4,1]) == 1",
        "canonical_solution": "def max_occurrences(nums):\r\n    max_val = 0\r\n    result = nums[0] \r\n    for i in nums:\r\n        occu = nums.count(i)\r\n        if occu > max_val:\r\n            max_val = occu\r\n            result = i \r\n    return result"
    },
    {
        "number": 363,
        "prompt": "Write a function to add the k elements to each element in the tuple.\ndef add_K_element(test_list, K):\n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    new_list = []\n    for i in range(len(test_list)):\n        new_list.append(test_list[i] + K)\n    return new_list\n\n# Test the function with a tuple and k=3\ntest_tuple = (1,2,3,4,5)\nk = 3\nprint(add_K_element(test_tuple, k))\n# Output: (4, 5, 6, 7, 8)\n\n# Test the function with a tuple and k=5\ntest_tuple = (10, 20, 30, 40, 50)\nk = 5\nprint(add_K_element(test_tuple, k))\n# Output: (15, 25, 35, 45)\n\n# Test the function with a tuple and k=0\ntest_tuple = (100, 20, 30, 40, 50)\nk = 0\nprint(add_K_element(test_tuple, k))\n# Output: (10, 20, 30, 40, 50)\n# Test the function with a tuple and k=-2\ntest_tuple = (1000, 200, 300, 400, 500)\nk = -2\nprint(add_K_element(test_tuple, k))\n# Output: (80, 180, 28",
        "generated_testcode": "assert add_K_element([(1, 2, 3, 4, 5), 2) == (3, 4, 5, 6, 7)\n",
        "test": "assert add_K_element([(1, 3, 4), (2, 4, 6), (3, 8, 1)], 4) == [(5, 7, 8), (6, 8, 10), (7, 12, 5)]\nassert add_K_element([(1, 2, 3), (4, 5, 6), (7, 8, 9)], 8) == [(9, 10, 11), (12, 13, 14), (15, 16, 17)]\nassert add_K_element([(11, 12, 13), (14, 15, 16), (17, 18, 19)], 9) == [(20, 21, 22), (23, 24, 25), (26, 27, 28)]",
        "canonical_solution": "def add_K_element(test_list, K):\r\n  res = [tuple(j + K for j in sub ) for sub in test_list]\r\n  return (res) "
    },
    {
        "number": 364,
        "prompt": "Write a function to find the number of flips required to make the given binary string a sequence of alternate characters.\ndef make_flip(ch): \n",
        "checkpoint": "7B",
        "pass": 8,
        "correct": true,
        "answer": "    count = 0 \n    i = 0 \n    while i < len(ch): \n        if ch[i] == '1': \n            count += 1 \n            while i < len(ch) - 1 and ch[i] == ch[i+1]: \n                i += 2\n        else: \n            count += 1 \n            while i < len(ch) - 1 and ch[i] != ch[i+1]: \n                i += 2\n        i += 1 \n    return count \n\n# Test cases \nprint(make_flip('1011011010')) # Output: 2 \nprint(make_flip('11100001001')) # Output: 3 \nprint(make_flip('010010101')) # Output: 3 ",
        "generated_testcode": "assert make_flip('1010101010101') == 2\n",
        "test": "assert min_flip_to_make_string_alternate(\"0001010111\") == 2\nassert min_flip_to_make_string_alternate(\"001\") == 1\nassert min_flip_to_make_string_alternate(\"010111011\") == 2 ",
        "canonical_solution": "def make_flip(ch): \r\n\treturn '1' if (ch == '0') else '0'\r\ndef get_flip_with_starting_charcter(str, expected): \r\n\tflip_count = 0\r\n\tfor i in range(len( str)): \r\n\t\tif (str[i] != expected): \r\n\t\t\tflip_count += 1\r\n\t\texpected = make_flip(expected) \r\n\treturn flip_count \r\ndef min_flip_to_make_string_alternate(str): \r\n\treturn min(get_flip_with_starting_charcter(str, '0'),get_flip_with_starting_charcter(str, '1')) "
    },
    {
        "number": 365,
        "prompt": "Write a python function to count the number of digits of a given number.\ndef count_Digit(n):\n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    count = 0\n    while n > 0:\n        count += 1\n        n //= 10\n    return count\n\n# Test the function\nprint(count_Digit(12345))\nprint(count_Digit(9876543210))\nprint(count_Digit(9))\nprint(count_Digit(0))\n\n\n# Function to count the number of digits of a number using recursion\ndef count_Digit_recursive(n):\n    if n == 0:\n        return 0\n    else:\n        return 1 + count_Digit_recursive(n//10)\n\n# Test the function\nprint(count_Digit_recursive(12345))\nprint(count_Digit_recursive(9876543210))\nprint(count_Digit_recursive(9))\nprint(count_Digit_recursive(0))\n\n",
        "generated_testcode": "assert count_Digit(12345) == 4\n",
        "test": "assert count_Digit(12345) == 5\nassert count_Digit(11223305) == 8\nassert count_Digit(4123459) == 7",
        "canonical_solution": "def count_Digit(n):\r\n    count = 0\r\n    while n != 0:\r\n        n //= 10\r\n        count += 1\r\n    return count"
    },
    {
        "number": 366,
        "prompt": "Write a python function to find the largest product of the pair of adjacent elements from a given list of integers.\ndef adjacent_num_product(list_nums):\n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    max_product = float('-inf')\n    min_product = float('-inf')\n    for i in range(len(list_nums) - 1):\n        if list_nums[i] * list_nums[i + 1] > max_product:\n            max_product = list_nums[i] * list_nums[i + 1]\n        if list_nums[i] * list_nums[i + 1] < min_product:\n            min_product = list_nums[i] * list_nums[i + 1]\n    return max(max_product, min_product)\n\n# Test cases\nprint(adjacent_num_product([2, 4, 3, 6, 5, 1]))  # Output: 12\nprint(adjacent_num_product([5, 4, 2, 1, 6, 7])) # Output: 56\nprint(adjacent_num_product([1, 2, 3, 4, 5]))  # Output: 10\nprint(adjacent_num_product([-1, -2, -3, -4])) # Output: 6\nprint(adjacent_num_product([-10, -2, 0, 1, 2])) # Output: 0\n",
        "generated_testcode": "assert adjacent_num_product([1, 2, 3, 4, 5, 6, 7, 8]) == 56\n",
        "test": "assert adjacent_num_product([1,2,3,4,5,6]) == 30\nassert adjacent_num_product([1,2,3,4,5]) == 20\nassert adjacent_num_product([2,3]) == 6",
        "canonical_solution": "def adjacent_num_product(list_nums):\r\n    return max(a*b for a, b in zip(list_nums, list_nums[1:]))"
    },
    {
        "number": 367,
        "prompt": "Write a function to check if a binary tree is balanced or not.\n\tdef __init__(self, data): \n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "\t\tself.data = data \n\t\tself.left = None\n\t\tself.right = None\n\ndef checkBalanced(root):\n    if root is None:\n        return True\n    if abs(height(root.left) - height(root.right)) <= 1:\n        return checkBalanced(root.left) and checkBalanced(root.right)\n    else:\n        return False\n\ndef height(root):\n    if root is None:\n        return 0\n    return 1 + max(height(root.left, height(root.right))\n\n# Time Complexity: O(n)\n# Space Complexity: O(n)\n\n\n# Alternatively, you can use the iterative approach to check if the binary tree is balanced or not\ndef checkBalanced(root):\n    if root is None:\n        return True\n    stack = [(root, 1)]\n    while stack:\n        node, depth = stack.pop(0)\n        if node is None:\n            continue\n        if depth % 2 == 0:\n            if abs(height(node.left) - height(node.right)) > 1:\n                return False\n        else:\n            stack.append((node.left, depth+1)\n            stack.append((node.right, depth+1)\n    return True\n\n# Time Complexity: O(n)\n# Space Complexity: O(n)\n\n",
        "generated_testcode": "assert is_balanced(Node(1, Node(2, Node(3), Node(4))), True)\n",
        "test": "assert is_tree_balanced(root) == False\nassert is_tree_balanced(root1) == True\nassert is_tree_balanced(root2) == False ",
        "canonical_solution": "class Node: \r\n\tdef __init__(self, data): \r\n\t\tself.data = data \r\n\t\tself.left = None\r\n\t\tself.right = None\r\ndef get_height(root): \r\n\tif root is None: \r\n\t\treturn 0\r\n\treturn max(get_height(root.left), get_height(root.right)) + 1\r\ndef is_tree_balanced(root): \r\n\tif root is None: \r\n\t\treturn True\r\n\tlh = get_height(root.left) \r\n\trh = get_height(root.right) \r\n\tif (abs(lh - rh) <= 1) and is_tree_balanced( \r\n\troot.left) is True and is_tree_balanced( root.right) is True: \r\n\t\treturn True\r\n\treturn False"
    },
    {
        "number": 368,
        "prompt": "Write a function to repeat the given tuple n times.\ndef repeat_tuples(test_tup, N):\n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    return test_tup * N\n\n# Test cases\nprint(repeat_tuples((1, 2, 3), 3)) # Output: (1, 2, 3, 1, 2, 3, 1, 2, 3)\nprint(repeat_tuples((\"hello\", \"world\"), 2) # Output: ('hello', 'world', 'hello', 'world')\nprint(repeat_tuples((\"a\", \"b\", \"c\"), 1) # Output: ('a', 'b', 'c')\nprint(repeat_tuples((1, 2, 3, 4, 5), 4) # Output: (1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5) ",
        "generated_testcode": "assert repeat_tuples((1, 2, 3), 3) == ((1, 2, 3), (1, 2, 3), (1, 2, 3))\n",
        "test": "assert repeat_tuples((1, 3), 4) == ((1, 3), (1, 3), (1, 3), (1, 3))\nassert repeat_tuples((1, 2), 3) == ((1, 2), (1, 2), (1, 2))\nassert repeat_tuples((3, 4), 5) == ((3, 4), (3, 4), (3, 4), (3, 4), (3, 4))",
        "canonical_solution": "def repeat_tuples(test_tup, N):\r\n  res = ((test_tup, ) * N)\r\n  return (res) "
    },
    {
        "number": 369,
        "prompt": "Write a function to find the lateral surface area of cuboid\ndef lateralsurface_cuboid(l,w,h):\n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    surface_area = 2*(l*w + w*h + h*l)\n    return surface_area\n\n#Test the function\nprint(lateralsurface_cuboid(3,4,5)) #Output: 32\nprint(lateralsurface_cuboid(2,5,6)) #Output: 32\nprint(lateralsurface_cuboid(7,3,10)) #Output: 54\n\n\n# Write a function to find the volume of a cuboid\ndef volume_cuboid(l,w,h):\n    volume = l*w*h\n    return volume\n\n#Test the function\nprint(volume_cuboid(3,4,5)) #Output: 60\nprint(volume_cuboid(2,5,6)) #Output: 30\nprint(volume_cuboid(7,3,10)) #Output: 210",
        "generated_testcode": "assert lateralsurface_cuboid(2,3,4) == 24\n",
        "test": "assert lateralsurface_cuboid(8,5,6)==156\nassert lateralsurface_cuboid(7,9,10)==320\nassert lateralsurface_cuboid(10,20,30)==1800",
        "canonical_solution": "def lateralsurface_cuboid(l,w,h):\r\n  LSA = 2*h*(l+w)\r\n  return LSA"
    },
    {
        "number": 370,
        "prompt": "Write a function to sort a tuple by its float element.\ndef float_sort(price):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": true,
        "answer": "    # take a tuple of tuples as input\n    # sort the tuple based on the float element in descending order\n    # return the sorted tuple\n\n    def key_func(item):\n        return item[1]\n\n    return sorted(price, key=key_func, reverse=True)\n\n\n# test the function with an example\nprice = (\n    ('Apple', 2.5),\n    ('Orange', 3.1),\n    ('Banana', 1.8),\n    ('Grapes', 2.7),\n    ('Mango', 2.3)\n)\n\nsorted_price = float_sort(price)\nprint(sorted_price)\n\n",
        "generated_testcode": "assert float_sort(()) == ()\n",
        "test": "assert float_sort([('item1', '12.20'), ('item2', '15.10'), ('item3', '24.5')])==[('item3', '24.5'), ('item2', '15.10'), ('item1', '12.20')] \nassert float_sort([('item1', '15'), ('item2', '10'), ('item3', '20')])==[('item3', '20'), ('item1', '15'), ('item2', '10')] \nassert float_sort([('item1', '5'), ('item2', '10'), ('item3', '14')])==[('item3', '14'), ('item2', '10'), ('item1', '5')] ",
        "canonical_solution": "def float_sort(price):\r\n  float_sort=sorted(price, key=lambda x: float(x[1]), reverse=True)\r\n  return float_sort"
    },
    {
        "number": 371,
        "prompt": "Write a function to find the smallest missing element in a sorted array.\ndef smallest_missing(A, left_element, right_element):\n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    # TODO: Write your code here\n    if not A:\n        return left_element\n    if len(A) == 1:\n        return A[0]\n\n    if A[0] > left_element:\n        return left_element\n\n    if A[-1] < right_element:\n        return right_element\n\n    if A[0] <= 0:\n        return 1\n\n    if A[-1] >= len(A):\n        return len(A) + 1\n\n\n    for i in range(len(A)):\n        if A[i] - A[0] == i:\n            continue\n        if A[i] <= 0 or A[i] > len(A):\n            return i + 1\n\n\n    return -1\n\n\n\n# Test cases\nprint(smallest_missing([], 1, 20))  # 1\nprint(smallest_missing([1, 3, 4, 5, 6, 7, 8, 9, 10], 1, 20))  # 2\nprint(smallest_missing([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 1, 10))  # -1\nprint(smallest_missing([1, 2, 3, 4, 5, 6, 7, 9, 10], 1, 10))  # 8\n",
        "generated_testcode": "assert smallest_missing([1, 2, 3, 4, 5, 6, 7, 9], 1, 10) == 8\n",
        "test": "assert smallest_missing([0, 1, 2, 3, 4, 5, 6], 0, 6) == 7\nassert smallest_missing([0, 1, 2, 6, 9, 11, 15], 0, 6) == 3\nassert smallest_missing([1, 2, 3, 4, 6, 9, 11, 15], 0, 7) == 0",
        "canonical_solution": "def smallest_missing(A, left_element, right_element):\r\n    if left_element > right_element:\r\n        return left_element\r\n    mid = left_element + (right_element - left_element) // 2\r\n    if A[mid] == mid:\r\n        return smallest_missing(A, mid + 1, right_element)\r\n    else:\r\n        return smallest_missing(A, left_element, mid - 1)"
    },
    {
        "number": 372,
        "prompt": "Write a function to sort a given list of elements in ascending order using heap queue algorithm.\ndef heap_assending(nums):\n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    def heapify(arr, n, i):\n        largest = i\n        left = 2 * i + 1\n        right = 2 * i + 2\n        if left < n and arr[left] > arr[largest]:\n            largest = left\n        if right < n and arr[right] > arr[largest]:\n            largest = right\n        if largest != i:\n            arr[i], arr[largest] = arr[largest], arr[i]\n            heapify(arr, n, largest)\n\n    n = len(nums)\n    for i in range(n//2, -1, -1):\n        heapify(nums, n, i)\n    for i in range(n-1, 0, -1):\n        nums[i], nums[0] = nums[0], nums[i]\n        heapify(nums, i, 0)\n    return nums\n\n# Test the function\nprint(heap_assending([4, 10, 3, 5, 1, 2, 6, 8]))\n# Output: [1, 3, 4, 5, 6, 8, 10]\n\n\n\n# Write a function to sort a given list of elements in descending order using heap queue algorithm\ndef heap_descending(nums):\n    def heapify(arr, n, i):\n        smallest = i\n        left = 2 * i + 1\n        right = 2",
        "generated_testcode": "assert heap_assending([3, 1, 4, 2, 5, 7, 6, 8, 9, 0, 10] ) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n",
        "test": "assert heap_assending([18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1])==[1, 2, 3, 4, 7, 8, 9, 9, 10, 14, 18]\nassert heap_assending([25, 35, 22, 85, 14, 65, 75, 25, 58])==[14, 22, 25, 25, 35, 58, 65, 75, 85]\nassert heap_assending([1, 3, 5, 7, 9, 2, 4, 6, 8, 0])==[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]",
        "canonical_solution": "import heapq as hq\r\ndef heap_assending(nums):\r\n  hq.heapify(nums)\r\n  s_result = [hq.heappop(nums) for i in range(len(nums))]\r\n  return s_result"
    },
    {
        "number": 373,
        "prompt": "Write a function to find the volume of a cuboid.\ndef volume_cuboid(l,w,h):\n",
        "checkpoint": "7B",
        "pass": 3,
        "correct": true,
        "answer": "    return l*w*h\n\n#Example usage:\nprint(volume_cuboid(2,4,5)) # Output: 20\nprint(volume_cuboid(3,6,7)) # Output: 42\nprint(volume_cuboid(10,10,10)) # Output: 10000",
        "generated_testcode": "assert volume_cuboid(2,3,4) == 24\n",
        "test": "assert volume_cuboid(1,2,3)==6\nassert volume_cuboid(5,7,9)==315\nassert volume_cuboid(10,15,21)==3150",
        "canonical_solution": "def volume_cuboid(l,w,h):\r\n  volume=l*w*h\r\n  return volume"
    },
    {
        "number": 374,
        "prompt": "Write a function to print all permutations of a given string including duplicates.\ndef permute_string(str):\n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    if len(str) == 1:\n        return [str]\n    result = []\n    for i in range(len(str)):\n        first_char = str[i]\n        remaining_chars = str[:i] + str[i+1:]\n        for permute_str in permute_string(remaining_chars):\n            for j in range(len(permute_str)+1):\n                result.append(permute_str[:j] + first_char + permute_str[j:])\n    return result\n\n\n\n# Test cases\nprint(permute_string(\"abc\"))\nprint(permute_string(\"abcabc\"))\nprint(permute_string(\"abbc\"))",
        "generated_testcode": "assert permute_string(\"abc\") == ['abc', 'acb', 'bac', 'bca', 'cab', 'cba', 'acb', 'cba']\n",
        "test": "assert permute_string('ab')==['ab', 'ba']\nassert permute_string('abc')==['abc', 'bac', 'bca', 'acb', 'cab', 'cba']\nassert permute_string('abcd')==['abcd', 'bacd', 'bcad', 'bcda', 'acbd', 'cabd', 'cbad', 'cbda', 'acdb', 'cadb', 'cdab', 'cdba', 'abdc', 'badc', 'bdac', 'bdca', 'adbc', 'dabc', 'dbac', 'dbca', 'adcb', 'dacb', 'dcab', 'dcba']",
        "canonical_solution": "def permute_string(str):\r\n    if len(str) == 0:\r\n        return ['']\r\n    prev_list = permute_string(str[1:len(str)])\r\n    next_list = []\r\n    for i in range(0,len(prev_list)):\r\n        for j in range(0,len(str)):\r\n            new_str = prev_list[i][0:j]+str[0]+prev_list[i][j:len(str)-1]\r\n            if new_str not in next_list:\r\n                next_list.append(new_str)\r\n    return next_list"
    },
    {
        "number": 375,
        "prompt": "Write a function to round the given number to the nearest multiple of a specific number.\ndef round_num(n,m):\n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    return round(n/m) * m\n\n#Test cases\nprint(round_num(12.3, 5)) # Output: 10\nprint(round_num(24, 5)) # Output: 20\nprint(round_num(17, 10)) # Output: 10\nprint(round_num(18.5, 5)) # Output: 20\nprint(round_num(4.3, 0.5)) # Output: 4.5\nprint(round_num(7.8, 0.25)) # Output: 7.75\nprint(round_num(4.7, 0.6)) # Output: 4.8\n",
        "generated_testcode": "assert round_num(10,5) == 10\n",
        "test": "assert round_num(4722,10)==4720\nassert round_num(1111,5)==1110\nassert round_num(219,2)==218",
        "canonical_solution": "def round_num(n,m):\r\n    a = (n //m) * m\r\n    b = a + m\r\n    return (b if n - a > b - n else a)"
    },
    {
        "number": 376,
        "prompt": "Write a function to remove tuple elements that occur more than once and replace the duplicates with some custom value.\ndef remove_replica(test_tup):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": true,
        "answer": "    \"\"\"\n    Remove tuple elements that occur more than once and replace them with the custom value\n    :param test_tup: tuple\n    :return: tuple\n    \"\"\"\n    # Convert the tuple to a list\n    test_list = list(test_tup)\n    # Create an empty dictionary to store the count of each element\n    freq_dict = {}\n    # Iterate through the list\n    for i in range(len(test_list)):\n        # If the element is already in the dictionary, increment the count\n        if test_list[i] in freq_dict:\n            freq_dict[test_list[i]] += 1\n        # If the element is not in the dictionary, add it with a count of 1\n        else:\n            freq_dict[test_list[i]] = 1\n    # Create an empty list to store the new tuple\n    new_tuple_list = []\n    # Iterate through the original tuple\n    for j in range(len(test_tup)):\n        # If the count of the element is 1, add it to the new list\n        if freq_dict[test_list[j]] == 1:\n            new_tuple_list.append(test_list[j])\n        # If the count is greater than 1, replace it with the custom value\n        else:\n            new_tuple_list.append(\"Custom\")\n    # Convert the list to a tuple\n    new_tuple = tuple(new_tuple_list)\n    return new_tuple\n",
        "generated_testcode": "assert remove_replica(()) == ()\n",
        "test": "assert remove_replica((1, 1, 4, 4, 4, 5, 5, 6, 7, 7)) == (1, 'MSP', 4, 'MSP', 'MSP', 5, 'MSP', 6, 7, 'MSP')\nassert remove_replica((2, 3, 4, 4, 5, 6, 6, 7, 8, 9, 9)) == (2, 3, 4, 'MSP', 5, 6, 'MSP', 7, 8, 9, 'MSP')\nassert remove_replica((2, 2, 5, 4, 5, 7, 5, 6, 7, 7)) == (2, 'MSP', 5, 4, 'MSP', 7, 'MSP', 6, 'MSP', 'MSP')",
        "canonical_solution": "def remove_replica(test_tup):\r\n  temp = set()\r\n  res = tuple(ele if ele not in temp and not temp.add(ele) \r\n\t\t\t\telse 'MSP' for ele in test_tup)\r\n  return (res)"
    },
    {
        "number": 377,
        "prompt": "Write a python function to remove all occurrences of a character in a given string.\ndef remove_Char(s,c) :  \n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    return ''.join([i for i in s if i != c])\n\n# Test the function with a sample string and character\ns = \"hello, world!\"\nc = 'o'\nprint(remove_Char(s,c))\n\n# Output: \"hll, wrld!\" ",
        "generated_testcode": "assert remove_Char(\"hello world\", \"l\") == \"heo word\"\n",
        "test": "assert remove_Char(\"aba\",'a') == \"b\"\nassert remove_Char(\"toggle\",'g') == \"tole\"\nassert remove_Char(\"aabbc\",'b') == \"aac\"",
        "canonical_solution": "def remove_Char(s,c) :  \r\n    counts = s.count(c) \r\n    s = list(s) \r\n    while counts :  \r\n        s.remove(c) \r\n        counts -= 1 \r\n    s = '' . join(s)   \r\n    return (s) "
    },
    {
        "number": 378,
        "prompt": "Write a python function to shift last element to first position in the given list.\ndef move_first(test_list):\n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    last_element = test_list.pop()\n    test_list.insert(0, last_element)\n    return test_list\n\n# Test the function with a list of integers\ntest_list = [1, 2, 3, 4, 5, 6, 7, 8, 9]\nprint(move_first(test_list))\n\n# Test the function with a list of strings\ntest_list = ['apple', 'banana', 'cherry', 'orange', 'kiwi', 'grape']\nprint(move_first(test_list))",
        "generated_testcode": "assert move_first([1,2,3,4,5,6,7]) == [7,1,2,3,4,5,6]\n",
        "test": "assert move_first([1,2,3,4]) == [4,1,2,3]\nassert move_first([0,1,2,3]) == [3,0,1,2]\nassert move_first([9,8,7,1]) == [1,9,8,7]",
        "canonical_solution": "def move_first(test_list):\r\n  test_list = test_list[-1:] + test_list[:-1]  \r\n  return test_list"
    },
    {
        "number": 379,
        "prompt": "Write a function to find the surface area of a cuboid.\ndef surfacearea_cuboid(l,w,h):\n",
        "checkpoint": "7B",
        "pass": 4,
        "correct": true,
        "answer": "    return 2*((l*w) + (l*h) + (w*h))\n\n# Test the function with some sample inputs\nprint(surfacearea_cuboid(4,5,6)) # Output: 64\nprint(surfacearea_cuboid(3,4,2)) # Output: 36\nprint(surfacearea_cuboid(10,10,10)) # Output: 60\n\n\n# Write a function to find the volume of a cuboid\ndef volume_cuboid(l,w,h):\n    return l*w*h\n\n# Test the function with some sample inputs\nprint(volume_cuboid(4,5,6)) # Output: 60\nprint(volume_cuboid(3,4,2)) # Output: 12\nprint(volume_cuboid(10,10,10)) # Output: 10000\n\n\n# Write a function to find the surface area of a cube\ndef surfacearea_cube(a):\n    return 6*(a**2)\n\n# Test the function with some sample inputs\nprint(surfacearea_cube(4)) # Output: 56\nprint(surfacearea_cube(5)) # Output: 75\nprint(surfacearea_cube(10)) # Output: 150\n\n\n# Write a function to find the volume of a cube\ndef volume_cube(a):\n    return a**3",
        "generated_testcode": "assert surfacearea_cuboid(2,3,4) == 52\n",
        "test": "assert surfacearea_cuboid(1,2,3)==22\nassert surfacearea_cuboid(5,7,9)==286\nassert surfacearea_cuboid(10,15,21)==1350",
        "canonical_solution": "def surfacearea_cuboid(l,w,h):\r\n  SA = 2*(l*w + l * h + w * h)\r\n  return SA"
    },
    {
        "number": 380,
        "prompt": "Write a function to generate a two-dimensional array.\ndef multi_list(rownum,colnum):\n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    '''\n    :param rownum: integer\n    :param colnum: integer\n    :return: 2D array\n    '''\n    array = []\n    for i in range(rownum):\n        array.append([])\n        for j in range(colnum):\n            array[i].append(0)\n    return array\n\n\n# test the function\nprint(multi_list(3,4))\n",
        "generated_testcode": "assert multi_list(3,4) == [[0,0,0,0,0],[0,0,0,0,0],[0,0,0,0,0]]\n",
        "test": "assert multi_list(3,4)==[[0, 0, 0, 0], [0, 1, 2, 3], [0, 2, 4, 6]] \nassert multi_list(5,7)==[[0, 0, 0, 0, 0, 0, 0], [0, 1, 2, 3, 4, 5, 6], [0, 2, 4, 6, 8, 10, 12], [0, 3, 6, 9, 12, 15, 18], [0, 4, 8, 12, 16, 20, 24]]\nassert multi_list(10,15)==[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14], [0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28], [0, 3, 6, 9, 12, 15, 18, 21, 24, 27, 30, 33, 36, 39, 42], [0, 4, 8, 12, 16, 20, 24, 28, 32, 36, 40, 44, 48, 52, 56], [0, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70], [0, 6, 12, 18, 24, 30, 36, 42, 48, 54, 60, 66, 72, 78, 84], [0, 7, 14, 21, 28, 35, 42, 49, 56, 63, 70, 77, 84, 91, 98], [0, 8, 16, 24, 32, 40, 48, 56, 64, 72, 80, 88, 96, 104, 112], [0, 9, 18, 27, 36, 45, 54, 63, 72, 81, 90, 99, 108, 117, 126]]",
        "canonical_solution": "def multi_list(rownum,colnum):\r\n  multi_list = [[0 for col in range(colnum)] for row in range(rownum)]\r\n  for row in range(rownum):\r\n    for col in range(colnum):\r\n        multi_list[row][col]= row*col\r\n  return multi_list\r\n"
    },
    {
        "number": 381,
        "prompt": "Write a function to sort a list of lists by a given index of the inner list.\ndef index_on_inner_list(list_data, index_no):\n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    \"\"\"\n    Sorts a list of lists by a given index of the inner list\n    :param list_data: The list of lists to be sorted\n    :param index_no: The index of the inner list to sort on\n    :return: A sorted list of lists\n    \"\"\"\n    return sorted(list_data, key=lambda x: x[index_no])\n\n\n\n# Test the function with an example\ndata = [\n    [3, 5, 1],\n    [9, 2, 6],\n    [7, 8, 4],\n    [1, 2, 3],\n    [6, 4, 8]\n]\nprint(index_on_inner_list(data, 1))\n\n# Output: [[1, 2, 3], [3, 5, 1], [9, 2, 6], [7, 8, 4]]\n",
        "generated_testcode": "assert index_on_inner_list([[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12]], 1) == [[1, 2, 3], [7, 8, 9], [4, 5, 6], [10, 11, 12]]\n",
        "test": "assert index_on_inner_list([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,0)==[('Beau Turnbull', 94, 98), ('Brady Kent', 97, 96), ('Greyson Fulton', 98, 99), ('Wyatt Knott', 91, 94)]\nassert index_on_inner_list([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,1)==[('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98), ('Brady Kent', 97, 96), ('Greyson Fulton', 98, 99)]\nassert index_on_inner_list([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,2)==[('Wyatt Knott', 91, 94), ('Brady Kent', 97, 96), ('Beau Turnbull', 94, 98), ('Greyson Fulton', 98, 99)]",
        "canonical_solution": "from operator import itemgetter\r\ndef index_on_inner_list(list_data, index_no):\r\n    result = sorted(list_data, key=itemgetter(index_no))\r\n    return result"
    },
    {
        "number": 382,
        "prompt": "Write a function to find the number of rotations in a circularly sorted array.\ndef find_rotation_count(A):\n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    n = len(A)\n    if n <= 1:\n        return 0\n    low, high = 0, n-1\n    while low < high:\n        mid = (low + high) // 2\n        if A[mid] > A[high]:\n            low = mid + 1\n        else:\n            high = mid\n    if low == 0:\n        return n\n    return low\n\n# Test cases\nA = [3, 4, 5, 1, 2, 6, 7]\nprint(find_rotation_count(A)) # Output: 3\n\nA = [1, 2, 3, 4, 5, 6]\nprint(find_rotation_count(A)) # Output: 0\nA = [6, 1, 2, 3, 4, 5]\nprint(find_rotation_count(A)) # Output: 1\nA = [3, 4, 5, 6, 1, 2]\nprint(find_rotation_count(A)) # Output: 1\nA = [2, 3, 6, 7, 1, 5, 4]\nprint(find_rotation_count(A)) # Output: 2\nA = [5, 1, 2, 3, 4, 6, 7]\nprint(find_rotation_count(A)) # Output: 0\n\n\n# Time Complexity: O(log",
        "generated_testcode": "assert find_rotation_count([4, 5, 6, 7, 1, 2, 3, 4]) == 3\n",
        "test": "assert find_rotation_count([8, 9, 10, 1, 2, 3, 4, 5, 6, 7]) == 3\nassert find_rotation_count([8, 9, 10,2, 5, 6]) == 3\nassert find_rotation_count([2, 5, 6, 8, 9, 10]) == 0",
        "canonical_solution": "def find_rotation_count(A):\r\n    (left, right) = (0, len(A) - 1)\r\n    while left <= right:\r\n        if A[left] <= A[right]:\r\n            return left\r\n        mid = (left + right) // 2\r\n        next = (mid + 1) % len(A)\r\n        prev = (mid - 1 + len(A)) % len(A)\r\n        if A[mid] <= A[next] and A[mid] <= A[prev]:\r\n            return mid\r\n        elif A[mid] <= A[right]:\r\n            right = mid - 1\r\n        elif A[mid] >= A[left]:\r\n            left = mid + 1\r\n    return -1"
    },
    {
        "number": 383,
        "prompt": "Write a python function to toggle all odd bits of a given number.\ndef even_bit_toggle_number(n) : \n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    return n ^ (n>>1) \n\n#test the function\nn = 6\nprint(\"The original number is :\",n)\nresult = even_bit_toggle_number(n)\nprint(\"The number with toggled even bits is :\",result) ",
        "generated_testcode": "assert even_bit_toggle_number(10) == 9\n",
        "test": "assert even_bit_toggle_number(10) == 15\nassert even_bit_toggle_number(20) == 1\nassert even_bit_toggle_number(30) == 11",
        "canonical_solution": "def even_bit_toggle_number(n) : \r\n    res = 0; count = 0; temp = n    \r\n    while(temp > 0 ) : \r\n        if (count % 2 == 0) : \r\n            res = res | (1 << count)      \r\n        count = count + 1\r\n        temp >>= 1 \r\n    return n ^ res "
    },
    {
        "number": 384,
        "prompt": "Write a python function to find the frequency of the smallest value in a given array.\ndef frequency_Of_Smallest(n,arr): \n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    # sort the array in ascending order \n    arr.sort() \n  \n    # initialize a variable to store the frequency of the smallest value \n    freq = 1\n  \n    # initialize the minimum value \n    min_val = arr[0] \n    # traverse the array and check if the current element is equal to the smallest element \n    for i in range(1, n): \n        if arr[i] == min_val: \n            freq += 1\n  \n    # return the frequency of the smallest value \n    return freq \n  \n# example usage \narr = [5, 4, 3, 4, 5, 4, 6, 3, 2, 5] \nn = len(arr) \nprint(\"Frequency of smallest value in the array is:\", frequency_Of_Smallest(n, arr)) ",
        "generated_testcode": "assert frequency_Of_Smallest(5, [1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9]) == 3\n",
        "test": "assert frequency_Of_Smallest(5,[1,2,3,4,3]) == 1\nassert frequency_Of_Smallest(7,[3,1,2,5,6,2,3]) == 1\nassert frequency_Of_Smallest(7,[3,3,6,3,7,4,9]) == 3",
        "canonical_solution": "def frequency_Of_Smallest(n,arr): \r\n    mn = arr[0] \r\n    freq = 1\r\n    for i in range(1,n): \r\n        if (arr[i] < mn): \r\n            mn = arr[i] \r\n            freq = 1\r\n        elif (arr[i] == mn): \r\n            freq += 1\r\n    return freq "
    },
    {
        "number": 385,
        "prompt": "Write a function to find the n'th perrin number using recursion.\ndef get_perrin(n):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": true,
        "answer": "    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        return 2*get_perrin(n-1) + get_perrin(n-2)\n\n\n# Test cases\nprint(get_perrin(1)) # Output: 1\nprint(get_perrin(2)) # Output: 2\nprint(get_perrin(3)) # Output: 4\nprint(get_perrin(4)) # Output: 8\nprint(get_perrin(5)) # Output: 20\nprint(get_perrin(6)) # Output: 44\nprint(get_perrin(7)) # Output: 86\nprint(get_perrin(8)) # Output: 192\nprint(get_perrin(9)) # Output: 436\nprint(get_perrin(10)) # Output: 13224\nprint(get_perrin(11)) # Output: 3604\nprint(get_perrin(12)) # Output: 9864\nprint(get_perrin(13)) # Output: 25376\nprint(get_perrin(14)) # Output: 68828",
        "generated_testcode": "assert get_perrin(1) == 1\n",
        "test": "assert get_perrin(9) == 12\nassert get_perrin(4) == 2\nassert get_perrin(6) == 5",
        "canonical_solution": "def get_perrin(n):\r\n  if (n == 0):\r\n    return 3\r\n  if (n == 1):\r\n    return 0\r\n  if (n == 2):\r\n    return 2 \r\n  return get_perrin(n - 2) + get_perrin(n - 3)"
    },
    {
        "number": 386,
        "prompt": "Write a function to find out the minimum no of swaps required for bracket balancing in the given string.\ndef swap_count(s):\n",
        "checkpoint": "7B",
        "pass": 4,
        "correct": true,
        "answer": "    stack = []\n    swaps = 0\n    for char in s:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if not stack or stack[-1] == ')':\n                swaps += 1\n            else:\n                stack.pop()\n    return swaps\n\n\n# Test cases\nprint(swap_count('()')) # 0\nprint(swap_count('()()')) # 0\nprint(swap_count('()(')) # 1\nprint(swap_count('()()()')) # 0\nprint(swap_count('(()')) # 1\nprint(swap_count('())')) # 1\nprint(swap_count('(()()')) # 0\nprint(swap_count('((()))((()()))')) # 2\nprint(swap_count('(()())')) # 1\nprint(swap_count('(())))((')) # 2\nprint(swap_count('))((')) # 1",
        "generated_testcode": "assert swap_count(\"([])\") == 0\n",
        "test": "assert swap_count(\"[]][][\") == 2\nassert swap_count(\"[[][]]\") == 0\nassert swap_count(\"[[][]]][\") == 1",
        "canonical_solution": "def swap_count(s):\r\n\tchars = s\r\n\tcount_left = 0\r\n\tcount_right = 0\r\n\tswap = 0\r\n\timbalance = 0; \r\n\tfor i in range(len(chars)):\r\n\t\tif chars[i] == '[':\r\n\t\t\tcount_left += 1\r\n\t\t\tif imbalance > 0:\r\n\t\t\t\tswap += imbalance\r\n\t\t\t\timbalance -= 1\r\n\t\telif chars[i] == ']':\r\n\t\t\tcount_right += 1\r\n\t\t\timbalance = (count_right - count_left) \r\n\treturn swap"
    },
    {
        "number": 387,
        "prompt": "Write a python function to check whether the hexadecimal number is even or odd.\ndef even_or_odd(N): \n",
        "checkpoint": "7B",
        "pass": 7,
        "correct": true,
        "answer": "    hex_num = int(N,16)\n    if hex_num % 2 == 0:\n        return 'even'\n    else:\n        return 'odd'\n        \n# test the function\nprint(even_or_odd('10'))  # output: odd\nprint(even_or_odd('5'))  # output: odd\nprint(even_or_odd('2A'))  # output: even\nprint(even_or_odd('F0'))  # output: odd\nprint(even_or_odd('12C'))  # output: even\n\n\n# test the function with a string input\ntry:\n    print(even_or_odd('10A')) # output: ValueError: invalid literal for int() with base 16: '10A'\nexcept ValueError as ve:\n    print(str(ve))\n\n\n# test the function with an integer input\ntry:\n    print(even_or_odd(10)) # output: TypeError: 'int' object is not iterable\nexcept TypeError as te:\n    print(str(te))\n\n\n# test the function with a float input\ntry:\n    print(even_or_odd(3.5)) # output: TypeError: 'float' object is not iterable\nexcept TypeError as te:\n    print(str(te))",
        "generated_testcode": "assert even_or_odd('0x10') == 'even'\n",
        "test": "assert even_or_odd(\"AB3454D\") ==\"Odd\"\nassert even_or_odd(\"ABC\") == \"Even\"\nassert even_or_odd(\"AAD\") == \"Odd\"",
        "canonical_solution": "def even_or_odd(N): \r\n    l = len(N) \r\n    if (N[l-1] =='0'or N[l-1] =='2'or \r\n        N[l-1] =='4'or N[l-1] =='6'or \r\n        N[l-1] =='8'or N[l-1] =='A'or \r\n        N[l-1] =='C'or N[l-1] =='E'): \r\n        return (\"Even\") \r\n    else: \r\n        return (\"Odd\") "
    },
    {
        "number": 388,
        "prompt": "Write a python function to find the highest power of 2 that is less than or equal to n.\ndef highest_Power_of_2(n): \n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": true,
        "answer": "    highest_power = 0\n    power = 1\n    while power <= n:\n        highest_power = power\n        power = power * 2\n    return highest_power / 2\n\n# test the function\nprint(highest_Power_of_2(16)) # Output: 8\nprint(highest_Power_of_2(10)) # Output: 4\nprint(highest_Power_of_2(7)) # Output: 4",
        "generated_testcode": "assert highest_Power_of_2(10) == 4\n",
        "test": "assert highest_Power_of_2(10) == 8\nassert highest_Power_of_2(19) == 16\nassert highest_Power_of_2(32) == 32",
        "canonical_solution": "def highest_Power_of_2(n): \r\n    res = 0; \r\n    for i in range(n, 0, -1): \r\n        if ((i & (i - 1)) == 0): \r\n            res = i; \r\n            break; \r\n    return res; "
    },
    {
        "number": 389,
        "prompt": "Write a function to find the n'th lucas number.\ndef find_lucas(n): \n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    if n == 0: \n        return 2\n    elif n == 1: \n        return 1\n    else: \n        return find_lucas(n-1) + find_lucas(n-2) ",
        "generated_testcode": "assert find_lucas(0) == 2\n",
        "test": "assert find_lucas(9) == 76\nassert find_lucas(4) == 7\nassert find_lucas(3) == 4",
        "canonical_solution": "def find_lucas(n): \r\n\tif (n == 0): \r\n\t\treturn 2\r\n\tif (n == 1): \r\n\t\treturn 1\r\n\treturn find_lucas(n - 1) + find_lucas(n - 2) "
    },
    {
        "number": 390,
        "prompt": "Write a function to insert a given string at the beginning of all items in a list.\ndef add_string(list,string):\n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    result = []\n    for item in list:\n        result.append(string + item)\n    return result\n\n#Test the function with a sample list\nmy_list = [\"apple\", \"banana\", \"cherry\", \"orange\", \"grape\", \"kiwi\"]\nprint(add_string(my_list, \"fruit_\")) # Output: ['fruit_apple', 'fruit_banana', 'fruit_cherry', 'fruit_orange', 'fruit_grape', 'fruit_kiwi']\n\n#Test the function with an empty list\nmy_list = []\nprint(add_string(my_list, \"empty_\")) # Output: []\n\n#Test the function with an empty string\nmy_list = [\"apple\", \"banana\", \"cherry\", \"orange\", \"grape\", \"kiwi\"]\nprint(add_string(my_list, \"\")) # Output: ['apple', 'banana', 'cherry', 'orange', 'grape', 'kiwi']\n\n#Test the function with a list of one item\nmy_list = [\"hello\"]\nprint(add_string(my_list, \"world_\")) # Output: ['world_hello'] ",
        "generated_testcode": "assert add_string(['apple', 'banana', 'cherry', 'date'], 'fruit-') == ['fruit-apple', 'fruit-banana', 'fruit-cherry', 'fruit-date']\n",
        "test": "assert add_string([1,2,3,4],'temp{0}')==['temp1', 'temp2', 'temp3', 'temp4']\nassert add_string(['a','b','c','d'], 'python{0}')==[ 'pythona', 'pythonb', 'pythonc', 'pythond']\nassert add_string([5,6,7,8],'string{0}')==['string5', 'string6', 'string7', 'string8']",
        "canonical_solution": "def add_string(list,string):\r\n add_string=[string.format(i) for i in  list]\r\n return add_string"
    },
    {
        "number": 391,
        "prompt": "Write a function to convert more than one list to nested dictionary.\ndef convert_list_dictionary(l1, l2, l3):\n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    result = {}\n    for i in range(len(l1)):\n        if l1[i] not in result:\n            result[l1[i]] = {}\n        result[l1[i]][l2[i]] = l3[i]\n    return result\n\n\n# Example usage:\nl1 = ['a', 'b', 'c']\nl2 = ['x', 'y', 'z']\nl3 = ['1', '2', '3']\nprint(convert_list_dictionary(l1, l2, l3))  # Output: {'a': {'x': '1', 'y': '2', 'z': '3'}\n                                     #         'b': {'x': '1', 'y': '2', 'z': '3'}\n                                     #         'c': {'x': '1', 'y': '2', 'z': '3'}}\n\nl1 = ['apple', 'banana', 'orange', 'grape']\nl2 = ['red', 'yellow', 'green', 'blue']\nl3 = ['fruit', 'fruit', 'fruit', 'fruit']\nprint(convert_list_dictionary(l1, l2, l3))  # Output: {'apple': {'red': 'fruit', 'yellow': 'fruit', 'green': 'fruit', 'blue': 'fruit'}\n                                     #         'banana': {'red': 'fruit', 'yellow': 'fruit', 'green': 'fruit'}\n                ",
        "generated_testcode": "assert convert_list_dictionary([\"apple\", \"banana\", \"orange\"], [1, 2, 3], [4, 5, 6]) == {\"apple\": {\"fruit\": 1, \"vegetable\": 2, \"dessert\": 3}, \"banana\": {\"fruit\": 4, \"vegetable\": 5, \"dessert\": 6}, \"orange\": {\"fruit\": 1, \"vegetable\": 2, \"dessert\": 3}}\n",
        "test": "assert convert_list_dictionary([\"S001\", \"S002\", \"S003\", \"S004\"],[\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"] ,[85, 98, 89, 92])==[{'S001': {'Adina Park': 85}}, {'S002': {'Leyton Marsh': 98}}, {'S003': {'Duncan Boyle': 89}}, {'S004': {'Saim Richards': 92}}]\nassert convert_list_dictionary([\"abc\",\"def\",\"ghi\",\"jkl\"],[\"python\",\"program\",\"language\",\"programs\"],[100,200,300,400])==[{'abc':{'python':100}},{'def':{'program':200}},{'ghi':{'language':300}},{'jkl':{'programs':400}}]\nassert convert_list_dictionary([\"A1\",\"A2\",\"A3\",\"A4\"],[\"java\",\"C\",\"C++\",\"DBMS\"],[10,20,30,40])==[{'A1':{'java':10}},{'A2':{'C':20}},{'A3':{'C++':30}},{'A4':{'DBMS':40}}]",
        "canonical_solution": "def convert_list_dictionary(l1, l2, l3):\r\n     result = [{x: {y: z}} for (x, y, z) in zip(l1, l2, l3)]\r\n     return result"
    },
    {
        "number": 392,
        "prompt": "Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\ndef get_max_sum (n):\n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    if n == 1:\n        return 1\n    elif n % 10 == 1 or n % 10 == 2 or n % 10 == 4 or n % 10 == 6 or n % 10 == 8:\n        return n\n    elif n % 10 == 3 or n % 10 == 5 or n % 10 == 7 or n % 10 == 9:\n        return n - 1\n    else:\n        return n - 2\n\n#Test case\nprint(get_max_sum(1)) # 1\nprint(get_max_sum(2)) # 2\nprint(get_max_sum(3)) # 3\nprint(get_max_sum(4)) # 4\nprint(get_max_sum(5)) # 5\nprint(get_max_sum(6)) # 6\nprint(get_max_sum(7)) # 7\nprint(get_max_sum(8)) # 8\nprint(get_max_sum(9)) # 9\nprint(get_max_sum(10)) # 10\nprint(get_max_sum(11)) # 11\nprint(get_max_sum(12)) # 13\nprint(get_max_sum(13)) # 13\nprint(get_max_sum(14)) # 14\nprint(get_max_sum(15)) # 15\nprint",
        "generated_testcode": "assert get_max_sum(10) == 120\n",
        "test": "assert get_max_sum(60) == 106\nassert get_max_sum(10) == 12\nassert get_max_sum(2) == 2",
        "canonical_solution": "def get_max_sum (n):\r\n\tres = list()\r\n\tres.append(0)\r\n\tres.append(1)\r\n\ti = 2\r\n\twhile i<n + 1:\r\n\t\tres.append(max(i, (res[int(i / 2)] \r\n\t\t\t\t\t\t+ res[int(i / 3)] +\r\n\t\t\t\t\t\t\tres[int(i / 4)]\r\n\t\t\t\t\t\t+ res[int(i / 5)])))\r\n\t\ti = i + 1\r\n\treturn res[n]"
    },
    {
        "number": 393,
        "prompt": "Write a function to find the list with maximum length using lambda function.\ndef max_length_list(input_list):\n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    max_length = max(input_list, key=lambda x: len(x))\n    return len(max_length)\n\n#Test\ninput_list = [\"apple\", \"banana\", \"cherry\", \"grape\", \"orange\", \"kiwi\", \"mango\"]\nprint(max_length_list(input_list)) #Output: 6\ninput_list = [\"cat\", \"dog\", \"elephant\", \"zebra\", \"bird\"]\nprint(max_length_list(input_list)) #Output: 4\ninput_list = [\"hello\", \"world\", \"python\", \"programming\", \"is\", \"fun\"]\nprint(max_length_list(input_list)) #Output: 6\n\n\n#Function to find the list with maximum length using lambda function\ndef max_length_list(input_list):\n    return len(max(input_list, key=lambda x: len(x))\n",
        "generated_testcode": "assert max_length_list([[1, 2, 3, 4, 5, 6, 7, 8, 9]) == 6\n",
        "test": "assert max_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [13, 15, 17])\nassert max_length_list([[1,2,3,4,5],[1,2,3,4],[1,2,3],[1,2],[1]])==(5,[1,2,3,4,5])\nassert max_length_list([[3,4,5],[6,7,8,9],[10,11,12]])==(4,[6,7,8,9])",
        "canonical_solution": "def max_length_list(input_list):\r\n    max_length = max(len(x) for x in input_list )   \r\n    max_list = max(input_list, key = lambda i: len(i))    \r\n    return(max_length, max_list)"
    },
    {
        "number": 394,
        "prompt": "Write a function to check if given tuple is distinct or not.\ndef check_distinct(test_tup):\n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    \"\"\"\n    :param test_tup: tuple of integers\n    :return: True if the tuple contains distinct elements, else False\n    \"\"\"\n    if len(set(test_tup) == len(test_tup):\n        return True\n    else:\n        return False\n\n# Test cases\nprint(check_distinct((1, 2, 3, 4, 5)) # True\nprint(check_distinct((1, 2, 3, 3, 4)) # False\nprint(check_distinct((1, 2, 2, 3, 4)) # False\nprint(check_distinct((1, 2, 3, 4)) # True\nprint(check_distinct((1, 1, 2, 3, 4)) # False\nprint(check_distinct((1, 2, 3, 4, 4)) # False",
        "generated_testcode": "assert check_distinct((1,2,3,4,5,6,7) == True\n",
        "test": "assert check_distinct((1, 4, 5, 6, 1, 4)) == False\nassert check_distinct((1, 4, 5, 6)) == True\nassert check_distinct((2, 3, 4, 5, 6)) == True",
        "canonical_solution": "def check_distinct(test_tup):\r\n  res = True\r\n  temp = set()\r\n  for ele in test_tup:\r\n    if ele in temp:\r\n      res = False\r\n      break\r\n    temp.add(ele)\r\n  return (res) "
    },
    {
        "number": 395,
        "prompt": "Write a python function to find the first non-repeated character in a given string.\ndef first_non_repeating_character(str1):\n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    char_dict = {}\n    for char in str1:\n        if char in char_dict:\n            char_dict[char] += 1\n        else:\n            char_dict[char] = 1\n    for char in str1:\n        if char_dict[char] == 1:\n            return char\n    return None\n\n# Test the function with some sample inputs\nprint(first_non_repeating_character(\"hello world\")) # Output: \"h\"\nprint(first_non_repeating_character(\"aabbcbd\")) # Output: \"e\"\nprint(first_non_repeating_character(\"abcdabcd\")) # Output: None\nprint(first_non_repeating_character(\"\")) # Output: None\nprint(first_non_repeating_character(\"a\")) # Output: \"a\"\n\n# Time complexity: O(n)\n# Space complexity: O(n)",
        "generated_testcode": "assert first_non_repeating_character(\"hello\") == \"h\"\n",
        "test": "assert first_non_repeating_character(\"abcabc\") == None\nassert first_non_repeating_character(\"abc\") == \"a\"\nassert first_non_repeating_character(\"ababc\") == \"c\"",
        "canonical_solution": "def first_non_repeating_character(str1):\r\n  char_order = []\r\n  ctr = {}\r\n  for c in str1:\r\n    if c in ctr:\r\n      ctr[c] += 1\r\n    else:\r\n      ctr[c] = 1 \r\n      char_order.append(c)\r\n  for c in char_order:\r\n    if ctr[c] == 1:\r\n      return c\r\n  return None"
    },
    {
        "number": 396,
        "prompt": "Write a function to check whether the given string starts and ends with the same character or not using regex.\ndef check_char(string): \n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    if string[0] == string[-1]:\n        return True\n    else:\n        return False\n\n# Testing the function\nprint(check_char(\"racecar\"))\nprint(check_char(\"hello\"))\nprint(check_char(\"apple\"))\nprint(check_char(\"Python\"))\n",
        "generated_testcode": "assert check_char(\"hello\") == False\n",
        "test": "assert check_char(\"abba\") == \"Valid\"\nassert check_char(\"a\") == \"Valid\"\nassert check_char(\"abcd\") == \"Invalid\"",
        "canonical_solution": "import re  \r\nregex = r'^[a-z]$|^([a-z]).*\\1$'\r\ndef check_char(string): \r\n\tif(re.search(regex, string)): \r\n\t\treturn \"Valid\" \r\n\telse: \r\n\t\treturn \"Invalid\" "
    },
    {
        "number": 397,
        "prompt": "Write a function to find the median of three specific numbers.\ndef median_numbers(a,b,c):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": true,
        "answer": "    if a >= b and a >= c:\n        if b >= c:\n            if a <= b:\n                return a\n            elif b <= c:\n                return b\n        elif b >= a and b >= c:\n            return c\n        elif c >= a and c >= b:\n            return a\n    elif b >= a and b >= c:\n        if a <= c:\n            return a\n        elif c <= a and c <= b:\n            return c\n    elif c >= a and c >= b:\n        return b\n    else:\n        return \"Invalid Input\"\n\n#Example usage:\nprint(median_numbers(3,5,7)) # Output: 5\nprint(median_numbers(8,2,9)) # Output: 8\nprint(median_numbers(4,6,7)) # Output: 6\nprint(median_numbers(1,2,3)) # Output: 2\nprint(median_numbers(1,10,3)) # Output: Invalid Input\n",
        "generated_testcode": "assert median_numbers(1,2,3) == 2\n",
        "test": "assert median_numbers(25,55,65)==55.0\nassert median_numbers(20,10,30)==20.0\nassert median_numbers(15,45,75)==45.0",
        "canonical_solution": "def median_numbers(a,b,c):\r\n if a > b:\r\n    if a < c:\r\n        median = a\r\n    elif b > c:\r\n        median = b\r\n    else:\r\n        median = c\r\n else:\r\n    if a > c:\r\n        median = a\r\n    elif b < c:\r\n        median = b\r\n    else:\r\n        median = c\r\n return median"
    },
    {
        "number": 398,
        "prompt": "Write a function to compute the sum of digits of each number of a given list.\ndef sum_of_digits(nums):\n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    result = []\n    for num in nums:\n        total = 0\n        for digit in str(num):\n            total += int(digit)\n        result.append(total)\n    return result\n\n#Example usage:\nprint(sum_of_digits([123, 456, 789, 1000])) # Output: [6, 15, 13]\n\n#Explanation:\n#The sum of digits of 123 is 6 (1+2+3)\n#The sum of digits of 456 is 15 (4+5+6)\n#The sum of digits of 789 is 13 (7+8+9)\n#The sum of digits of 100 is 1 (1+0+0)\n#The sum of digits of all numbers in the list [123, 456, 789, 100] is [6, 15, 13]\n#So the function returns [6, 15, 13]",
        "generated_testcode": "assert sum_of_digits([123, 456, 789]) == [6, 15, 16]\n",
        "test": "assert sum_of_digits([10,2,56])==14\nassert sum_of_digits([[10,20,4,5,'b',70,'a']])==19\nassert sum_of_digits([10,20,-4,5,-70])==19",
        "canonical_solution": "def sum_of_digits(nums):\r\n    return sum(int(el) for n in nums for el in str(n) if el.isdigit())"
    },
    {
        "number": 399,
        "prompt": "Write a function to perform the mathematical bitwise xor operation across the given tuples.\ndef bitwise_xor(test_tup1, test_tup2):\n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    result = ()\n    for i in range(len(test_tup1)):\n        result += (test_tup1[i] ^ test_tup2[i],)\n    return result\n\n#test cases\nprint(bitwise_xor((1, 2, 3, 4, 5), (6, 7, 8, 9)) == (7, 5, 3, 1))\nprint(bitwise_xor((0, 0, 0, 0), (1, 1, 1, 1) == (1, 1, 1, 1))\nprint(bitwise_xor((10, 10, 10), (10, 10, 10)) == (0, 0, 0))\nprint(bitwise_xor((0, 1, 1, 1, 1, 0), (1, 1, 1, 1, 0) == (1, 0, 0, 0, 0))\nprint(bitwise_xor((1111, 223, 33), (23, 33, 34) == (1100, 22, 11)",
        "generated_testcode": "assert bitwise_xor((1, 2, 3, 4, 5), (6, 7, 8, 9)) == (7, 5, 3, 1)\n",
        "test": "assert bitwise_xor((10, 4, 6, 9), (5, 2, 3, 3)) == (15, 6, 5, 10)\nassert bitwise_xor((11, 5, 7, 10), (6, 3, 4, 4)) == (13, 6, 3, 14)\nassert bitwise_xor((12, 6, 8, 11), (7, 4, 5, 6)) == (11, 2, 13, 13)",
        "canonical_solution": "def bitwise_xor(test_tup1, test_tup2):\r\n  res = tuple(ele1 ^ ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\r\n  return (res) "
    },
    {
        "number": 400,
        "prompt": "Write a function to extract the frequency of unique tuples in the given list order irrespective.\ndef extract_freq(test_list):\n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    freq_dict = {}\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j]:\n                if tuple(test_list[i:j+1]) not in freq_dict.keys():\n                    freq_dict[tuple(test_list[i:j+1])] = 1\n                else:\n                    freq_dict[tuple(test_list[i:j+1])] += 1\n    return freq_dict\n\n# Test the function\ntest_list = ['a', 'a', 'a', 'b', 'b', 'c', 'c', 'c', 'd', 'd']\nprint(extract_freq(test_list))  # Output: {('a',): 1, ('a', 'a'): 1, ('b',): 1, ('b', 'b'): 1, ('c',): 1, ('c', 'c'): 1, ('d',): 1, ('d', 'd'): 1}\n\ntest_list = ['a', 'b', 'c', 'c', 'd', 'd', 'd', 'a', 'b', 'b']\nprint(extract_freq(test_list))  # Output: {('a',): 1, ('b',): 1, ('c',): 1, ('d',): 1, ('a', 'b'): 1, ('b",
        "generated_testcode": "assert extract_freq([\"apple\", \"banana\", \"apple\", \"orange\", \"banana\", \"apple\", \"orange\", \"banana\", \"apple\", \"orange\", \"banana\", \"apple\", \"orange\", \"banana\", \"apple\", \"orange\"] == {(\"apple\", 4), (\"banana\", 4), (\"orange\", 4)}\n",
        "test": "assert extract_freq([(3, 4), (1, 2), (4, 3), (5, 6)] ) == 3\nassert extract_freq([(4, 15), (2, 3), (5, 4), (6, 7)] ) == 4\nassert extract_freq([(5, 16), (2, 3), (6, 5), (6, 9)] ) == 4",
        "canonical_solution": "def extract_freq(test_list):\r\n  res = len(list(set(tuple(sorted(sub)) for sub in test_list)))\r\n  return (res)"
    },
    {
        "number": 401,
        "prompt": "Write a function to perform index wise addition of tuple elements in the given two nested tuples.\ndef add_nested_tuples(test_tup1, test_tup2):\n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    result = []\n    for i in range(len(test_tup1)):\n        inner_result = []\n        for j in range(len(test_tup1[i])):\n            inner_result.append(test_tup1[i][j] + test_tup2[i][j])\n        result.append(tuple(inner_result))\n    return tuple(result)\n\n\ntest_tup1 = ((1, 2, 3), (4, 5, 6), (7, 8, 9))\ntest_tup2 = ((9, 8, 7), (6, 5, 4), (3, 2, 1))\nprint(add_nested_tuples(test_tup1, test_tup2))\n\n# Output: ((10, 10, 10), (10, 10, 10), (10, 10, 10))\n\n\n# Example 2:\ntest_tup1 = ((1, 2, 3), (4, 5, 6), (7, 8, 9))\ntest_tup2 = ((10, 20, 30), (40, 50, 60), (70, 80, 90))\nprint(add_nested_tuples(test_tup1, test_tup2))\n\n# Output: ((11, 22, 33), (",
        "generated_testcode": "assert add_nested_tuples(((1, (2, 3), (4, 5)), (1, (2, 3)) ) == (2, (4, 6) )\n",
        "test": "assert add_nested_tuples(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((7, 10), (7, 14), (3, 10), (8, 13))\nassert add_nested_tuples(((2, 4), (5, 6), (3, 10), (2, 11)), ((7, 8), (4, 10), (2, 2), (8, 4))) == ((9, 12), (9, 16), (5, 12), (10, 15))\nassert add_nested_tuples(((3, 5), (6, 7), (4, 11), (3, 12)), ((8, 9), (5, 11), (3, 3), (9, 5))) == ((11, 14), (11, 18), (7, 14), (12, 17))",
        "canonical_solution": "def add_nested_tuples(test_tup1, test_tup2):\r\n  res = tuple(tuple(a + b for a, b in zip(tup1, tup2))\r\n   for tup1, tup2 in zip(test_tup1, test_tup2))\r\n  return (res) "
    },
    {
        "number": 402,
        "prompt": "Write a function to compute the value of ncr%p.\ndef ncr_modp(n, r, p): \n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    mod = 10**9+7\n    if (r==0 or r==n):\n        return 1\n    C = [0]*(r+1)\n    C[0] = 1\n    for i in range(1, n+1):\n        C[i] = i\n    for i in range(1, n+1):\n        for j in range(1, r+1):\n            if (i<j):\n                C[j] = (C[j-1]*(n-i)//i)%p\n            else:\n                C[j] = (C[j] * C[i-1]) % p\n    return C[r]\n\n# Test the function ",
        "generated_testcode": "assert ncr_modp(5, 2, 100000000000007) == 10\n",
        "test": "assert ncr_modp(10,2,13)==6\nassert ncr_modp(15,12,43)==25\nassert ncr_modp(17,9,18)==10",
        "canonical_solution": "def ncr_modp(n, r, p): \r\n    C = [0 for i in range(r+1)]   \r\n    C[0] = 1\r\n    for i in range(1, n+1): \r\n        for j in range(min(i, r), 0, -1): \r\n            C[j] = (C[j] + C[j-1]) % p   \r\n    return C[r] "
    },
    {
        "number": 403,
        "prompt": "Write a function to check if a url is valid or not using regex.\ndef is_valid_URL(str):\n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    url_regex = re.compile(\n        r'^(?:http|ftp)s?://(?:(?:[a-zA-Z]|[0-9]|[$-_@.&+]|[!*\\\\(\\\\),]|(?:%[0-9a-fA-F][0-9a-fA-F]))+)'\n        r'|[a-zA-Z0-9_]+)(?::\\\\d+)?(?:[^\\\\s]+)?$')\n    return bool(url_regex.match(str))\n\n# Test cases\nprint(is_valid_URL(\"https://www.google.com\"))  # True\nprint(is_valid_URL(\"http://www.google.com\"))  # True\nprint(is_valid_URL(\"https://www.google\"))  # False\nprint(is_valid_URL(\"www.google.com\"))  # False\nprint(is_valid_URL(\"htp://www.google.com\"))  # False\nprint(is_valid_URL(\"https://www.google.com:8080\"))  # True\nprint(is_valid_URL(\"https://www.google.com/blog\"))  # True\nprint(is_valid_URL(\"https://www.google.com/blog/index.html\"))  # True\nprint(is_valid_URL(\"https://www.google.com/blog/index.html?id=1234\"))  # True\nprint(is_valid_URL(\"https://www.google",
        "generated_testcode": "assert is_valid_URL(\"https://www.google.com\") == True\n",
        "test": "assert is_valid_URL(\"https://www.google.com\") == True\nassert is_valid_URL(\"https:/www.gmail.com\") == False\nassert is_valid_URL(\"https:// www.redit.com\") == False",
        "canonical_solution": "import re\r\ndef is_valid_URL(str):\r\n\tregex = (\"((http|https)://)(www.)?\" +\r\n\t\t\t\"[a-zA-Z0-9@:%._\\\\+~#?&//=]\" +\r\n\t\t\t\"{2,256}\\\\.[a-z]\" +\r\n\t\t\t\"{2,6}\\\\b([-a-zA-Z0-9@:%\" +\r\n\t\t\t\"._\\\\+~#?&//=]*)\")\r\n\tp = re.compile(regex)\r\n\tif (str == None):\r\n\t\treturn False\r\n\tif(re.search(p, str)):\r\n\t\treturn True\r\n\telse:\r\n\t\treturn False"
    },
    {
        "number": 404,
        "prompt": "Write a python function to find the minimum of two numbers.\ndef minimum(a,b):   \n",
        "checkpoint": "7B",
        "pass": 3,
        "correct": true,
        "answer": "    if a<b:\n        return a\n    else:\n        return b\n\n#Test the function with sample inputs\nprint(minimum(5,10))\nprint(minimum(15,20))\nprint(minimum(25,20))\n\n\n#Create a function that accepts a list of numbers as input and returns the minimum of all the numbers in the list\ndef min_of_list(lst):\n    min_num = lst[0]\n    for num in lst:\n        if num < min_num:\n            min_num = num\n    return min_num\n\n#Test the function with sample inputs\nprint(min_of_list([1,2,3,4,5,6,7,8,9]))\nprint(min_of_list([10,20,30,40,50,60,70]))\nprint(min_of_list([100,20,30,40,50,60,70,80,90]))\n\n\n#Create a function to find the maximum of two numbers\ndef maximum(a,b):   \n    if a>b:\n        return a\n    else:\n        return b\n\n#Test the function with sample inputs\nprint(maximum(5,10))\nprint(maximum(15,20))\nprint(maximum(25,20))\n\n#Create a function that accepts a list of numbers as input and returns the maximum of all the numbers in the",
        "generated_testcode": "assert minimum(5, 10) == 5\n",
        "test": "assert minimum(1,2) == 1\nassert minimum(-5,-4) == -5\nassert minimum(0,0) == 0",
        "canonical_solution": "def minimum(a,b):   \r\n    if a <= b: \r\n        return a \r\n    else: \r\n        return b "
    },
    {
        "number": 405,
        "prompt": "Write a function to check whether an element exists within a tuple.\ndef check_tuplex(tuplex,tuple1): \n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    if tuple1 in tuplex:\n        return True\n    else:\n        return False\n\nprint(check_tuplex((1,2,3,4,5,6,7,8,9), 5) # True\nprint(check_tuplex((1,2,3,4,5,6,7,8,9), 10) # False\n",
        "generated_testcode": "assert check_tuplex(2, (1,2,3,4,5,6,7,8,9) == True\n",
        "test": "assert check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),'r')==True\nassert check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),'5')==False\nassert check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\",\"e\"),3)==True",
        "canonical_solution": "def check_tuplex(tuplex,tuple1): \r\n  if tuple1 in tuplex:\r\n    return True\r\n  else:\r\n     return False"
    },
    {
        "number": 406,
        "prompt": "Write a python function to find the parity of a given number.\ndef find_Parity(x): \n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    if x == 0: \n        return 0\n    else: \n        return 1\n\n#Test the function with some sample inputs\nprint(find_Parity(0)) # Expected output: 0\nprint(find_Parity(1)) # Expected output: 1\nprint(find_Parity(2)) # Expected output: 0\nprint(find_Parity(3)) # Expected output: 1\nprint(find_Parity(4)) # Expected output: 0\nprint(find_Parity(5)) # Expected output: 1\nprint(find_Parity(6)) # Expected output: 0\nprint(find_Parity(7)) # Expected output: 1\nprint(find_Parity(8)) # Expected output: 0\nprint(find_Parity(9)) # Expected output: 1\n\n\n# Test the function with some edge cases\nprint(find_Parity(100000000000000) # Expected output: 1\nprint(find_Parity(-1)) # Expected output: 1\nprint(find_Parity(-5) # Expected output: 1\nprint(find_Parity(-3) # Expected output: 1\n\nprint(find_Parity(0.5) # Expected output: 0\nprint(find_Parity(0.25) # Expected output: 1\nprint(find_Parity(0.0) # Ex",
        "generated_testcode": "assert find_Parity(10) == 0\n",
        "test": "assert find_Parity(12) == \"Even Parity\"\nassert find_Parity(7) == \"Odd Parity\"\nassert find_Parity(10) == \"Even Parity\"",
        "canonical_solution": "def find_Parity(x): \r\n    y = x ^ (x >> 1); \r\n    y = y ^ (y >> 2); \r\n    y = y ^ (y >> 4); \r\n    y = y ^ (y >> 8); \r\n    y = y ^ (y >> 16); \r\n    if (y & 1): \r\n        return (\"Odd Parity\"); \r\n    return (\"Even Parity\"); "
    },
    {
        "number": 407,
        "prompt": "Write a function to create the next bigger number by rearranging the digits of a given number.\ndef rearrange_bigger(n):\n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    n = list(str(n))\n    n.sort(reverse=True)\n    for i in range(len(n) - 1):\n        if int(''.join(n[i:]) <= ''.join(n[:i]):\n            break\n    n = n[:i] + n[i+1:]\n    return int(''.join(n))\n\n# Test cases\nprint(rearrange_bigger(98345)) # 98543\nprint(rearrange_bigger(123)) # 213\nprint(rearrange_bigger(12133)) # 2131\nprint(rearrange_bigger(9911)) # 9119\nprint(rearrange_bigger(1)) # 1",
        "generated_testcode": "assert rearrange_bigger(12345) == 32451\n",
        "test": "assert rearrange_bigger(12)==21\nassert rearrange_bigger(10)==False\nassert rearrange_bigger(102)==120",
        "canonical_solution": "def rearrange_bigger(n):\r\n    nums = list(str(n))\r\n    for i in range(len(nums)-2,-1,-1):\r\n        if nums[i] < nums[i+1]:\r\n            z = nums[i:]\r\n            y = min(filter(lambda x: x > z[0], z))\r\n            z.remove(y)\r\n            z.sort()\r\n            nums[i:] = [y] + z\r\n            return int(\"\".join(nums))\r\n    return False"
    },
    {
        "number": 408,
        "prompt": "Write a function to find k number of pairs which consist of one element from the first array and one element from the second array.\ndef k_smallest_pairs(nums1, nums2, k):\n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    def merge_sort(arr):\n        if len(arr) <= 1:\n            return arr\n        mid = len(arr) // 2\n        left = merge_sort(arr[:mid])\n        right = merge_sort(arr[mid:])\n        return merge(left, right)\n\n    def merge(left, right):\n        result = []\n        i = j = 0\n        while i < len(left) and j < len(right):\n            if left[i] < right[j]:\n                result.append(left[i])\n                i += 1\n            else:\n                result.append(right[j])\n                j += 1\n        result += left[i:]\n        result += right[j:]\n        return result\n\n    def count_pairs(arr1, arr2, k):\n        count = 0\n        num1 = num2 = 0\n        i = j = 0\n        while num1 < len(arr1) and num2 < len(arr2) and count < k:\n            if arr1[num1] + arr2[num2] < arr1[i + 1] + arr2[j]:\n                num1 += 1\n            elif arr1[num1] + arr2[num2] > arr1[i] + arr2[j + 1]:\n                num2 += 1\n            else:\n                count += len(arr1) - num1\n                i += 1\n                j += 1\n        return count\n",
        "generated_testcode": "assert k_smallest_pairs(nums1=[1, 2, 3], nums2=[4, 5, 6], k=5) == [(1, 4), (1, 5), (1, 6), (2, 4), (2, 5), (3, 4)]\n",
        "test": "assert k_smallest_pairs([1,3,7],[2,4,6],2)==[[1, 2], [1, 4]]\nassert k_smallest_pairs([1,3,7],[2,4,6],1)==[[1, 2]]\nassert k_smallest_pairs([1,3,7],[2,4,6],7)==[[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]",
        "canonical_solution": "import heapq\r\ndef k_smallest_pairs(nums1, nums2, k):\r\n   queue = []\r\n   def push(i, j):\r\n       if i < len(nums1) and j < len(nums2):\r\n           heapq.heappush(queue, [nums1[i] + nums2[j], i, j])\r\n   push(0, 0)\r\n   pairs = []\r\n   while queue and len(pairs) < k:\r\n       _, i, j = heapq.heappop(queue)\r\n       pairs.append([nums1[i], nums2[j]])\r\n       push(i, j + 1)\r\n       if j == 0:\r\n           push(i + 1, 0)\r\n   return pairs"
    },
    {
        "number": 409,
        "prompt": "Write a function to find the minimum product from the pairs of tuples within a given list.\ndef min_product_tuple(list1):\n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    list1.sort(key=lambda x: x[0] + x[1])\n    min_product = float('inf')\n    for i in range(len(list1) - 1):\n        for j in range(i+1, len(list1)):\n            product = list1[i][0] * list1[j][1]\n            if product < min_product:\n                min_product = product\n    return min_product\n\n# Test cases\nprint(min_product_tuple([(2,3), (5,4), (8,9), (1,2), (4,5)])) # Output: 18\nprint(min_product_tuple([(2,4), (3,6), (5,7), (1,8), (4,9)])) # Output: 48\nprint(min_product_tuple([(1,4), (2,7), (3,8), (9,10)])) # Output: 12\nprint(min_product_tuple([(3,6), (4,5), (1,2), (6,7)])) # Output: 30",
        "generated_testcode": "assert min_product_tuple([(1,2), (3,4), (5,6), (7,8)]) == 32\n",
        "test": "assert min_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==8\nassert min_product_tuple([(10,20), (15,2), (5,10)] )==30\nassert min_product_tuple([(11,44), (10,15), (20,5), (12, 9)] )==100",
        "canonical_solution": "def min_product_tuple(list1):\r\n    result_min = min([abs(x * y) for x, y in list1] )\r\n    return result_min"
    },
    {
        "number": 410,
        "prompt": "Write a function to find the minimum value in a given heterogeneous list.\ndef min_val(listval):\n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    min_val = float('inf')\n    for val in listval:\n        if type(val) == int or type(val) == float:\n            if val < min_val:\n                min_val = val\n    return min_val\n\nprint(min_val([4, 1.5, 2, 7, 3, \"apple\", \"banana\", 6, 8, 5]))\n# Output: 1.5\n# Explanation: The minimum value in the given list is 1.5, which is of type float. ",
        "generated_testcode": "assert min_val([1, 2, 3, \"apple\", \"banana\", 4, \"orange\", 5, \"grape\", 6]) == 1\n",
        "test": "assert min_val(['Python', 3, 2, 4, 5, 'version'])==2\nassert min_val(['Python', 15, 20, 25])==15\nassert min_val(['Python', 30, 20, 40, 50, 'version'])==20",
        "canonical_solution": "def min_val(listval):\r\n     min_val = min(i for i in listval if isinstance(i, int))\r\n     return min_val"
    },
    {
        "number": 411,
        "prompt": "Write a function to convert the given snake case string to camel case string by using regex.\ndef snake_to_camel(word):\n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    words = word.split(\"_\")\n    camel_case = \"\"\n    for i, word in enumerate(words):\n        if i == 0:\n            camel_case += word.lower()\n        else:\n            camel_case += word.capitalize()\n    return camel_case\n\n\n# Test cases\nprint(snake_to_camel(\"hello_world_how_are_you\")) # Output: helloWorldHowAreYou\nprint(snake_to_camel(\"snake_case_is_good\")) # Output: snakeCaseIsGood\nprint(snake_to_camel(\"snake_case_string_converter\")) # Output: snakeCaseStringConverter\n",
        "generated_testcode": "assert snake_to_camel(\"hello_world\") == \"helloWorld\"\n",
        "test": "assert snake_to_camel('android_tv') == 'AndroidTv'\nassert snake_to_camel('google_pixel') == 'GooglePixel'\nassert snake_to_camel('apple_watch') == 'AppleWatch'",
        "canonical_solution": "import re\r\ndef snake_to_camel(word):\r\n  return ''.join(x.capitalize() or '_' for x in word.split('_'))"
    },
    {
        "number": 412,
        "prompt": "Write a python function to remove odd numbers from a given list.\ndef remove_odd(l):\n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    return [x for x in l if x%2 == 0]\n\n\n# Test the function\nprint(remove_odd([1,2,3,4,5,6,7,8,9,10,11,12,13,14])) # [2, 4, 6, 8, 10, 12]\nprint(remove_odd([1,3,5,7,9,11,13,15,17,19])) # []\nprint(remove_odd([2,4,6,8,10,12,14,16,18,20])) # [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]\n\n\n# Explanation: \n# The function removes odd numbers from the list by using list comprehension. It checks if the remainder of the number divided by 2 is 0, which means it is an even number, and then keeps it in the list. If the number is odd, it is removed. The output is a new list with only even numbers. ",
        "generated_testcode": "assert remove_odd([1,2,3,4,5,6,7,8,9,10]) == [2,4,6,8,10]\n",
        "test": "assert remove_odd([1,2,3]) == [2]\nassert remove_odd([2,4,6]) == [2,4,6]\nassert remove_odd([10,20,3]) == [10,20]",
        "canonical_solution": "def remove_odd(l):\r\n    for i in l:\r\n        if i % 2 != 0:\r\n            l.remove(i)\r\n    return l"
    },
    {
        "number": 413,
        "prompt": "Write a function to extract the nth element from a given list of tuples.\ndef extract_nth_element(list1, n):\n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    \"\"\"\n    Extracts the nth element from a list of tuples\n    :param list1: List of tuples\n    :param n: Index of the element to extract\n    :return: The nth element from all the tuples in the list\n    \"\"\"\n    result = []\n    for tup in list1:\n        if n < len(tup):\n            result.append(tup[n])\n    return result\n\n\n\n# Test the function\nlist1 = [(1, 'a', 2), (3, 'b', 4), (5, 'c', 6), (7, 'd', 8), (9, 'e', 10)]\nn = 1\nprint(extract_nth_element(list1, n))  # Output: ['a', 'b', 'c', 'd', 'e']\n",
        "generated_testcode": "assert extract_nth_element([(1, 2, 3), (4, 5, 6), (7, 8, 9)], 1) == 2\n",
        "test": "assert extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,0)==['Greyson Fulton', 'Brady Kent', 'Wyatt Knott', 'Beau Turnbull']\nassert extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,2)==[99, 96, 94, 98]\nassert extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)],1)==[98, 97, 91, 94]",
        "canonical_solution": "def extract_nth_element(list1, n):\r\n    result = [x[n] for x in list1]\r\n    return result"
    },
    {
        "number": 414,
        "prompt": "Write a python function to check whether the value exists in a sequence or not.\ndef overlapping(list1,list2):  \n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    for i in list1:\n        if i in list2:\n            return True\n    return False\n\n#Example usage:\nlist1 = [1,2,3,4,5,6,7,8,9]\nlist2 = [2,4,6,8,10,12,14]\nprint(overlapping(list1,list2)) #True\n\nlist3 = [11,3,5,7,9,11,13]\nprint(overlapping(list1,list3)) #False\n\nlist4 = [2,3,4,5,6]\nprint(overlapping(list1,list4)) #True\nlist5 = [10,12,14,16,18]\nprint(overlapping(list2,list5)) #False\n",
        "generated_testcode": "assert overlapping([1,2,3,4,5,6,7,8,9],[4,5,6,7,8,9,10]) == True\n",
        "test": "assert overlapping([1,2,3,4,5],[6,7,8,9]) == False\nassert overlapping([1,2,3],[4,5,6]) == False\nassert overlapping([1,4,5],[1,4,5]) == True",
        "canonical_solution": "def overlapping(list1,list2):  \r\n    c=0\r\n    d=0\r\n    for i in list1: \r\n        c+=1\r\n    for i in list2: \r\n        d+=1\r\n    for i in range(0,c): \r\n        for j in range(0,d): \r\n            if(list1[i]==list2[j]): \r\n                return 1\r\n    return 0"
    },
    {
        "number": 415,
        "prompt": "Write a python function to find a pair with highest product from a given array of integers.\ndef max_Product(arr): \n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": true,
        "answer": "    arr.sort()\n    return max(arr[-1]*arr[-2], arr[0]*arr[1], arr[-1]*arr[-2])\n\n# test the function with some inputs\nprint(max_Product([-10, -10, -5, -2, 0, 2, 3, 5]))  # Output: 50\nprint(max_Product([1, 2, 3, 4, 5, 6, 7]))  # Output: 42\nprint(max_Product([-1, -2, -3, -4, -5]))  # Output: -6\nprint(max_Product([0, 0, 0, 0, 0]))  # Output: 0\nprint(max_Product([1, 2, 3, 4, 5, 6]))  # Output: 12\n\n# Time Complexity: O(nlogn) because of sorting\n# Space Complexity: O(1)",
        "generated_testcode": "assert max_Product([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 72 # [1, 9] and [3, 7]\n",
        "test": "assert max_Product([1,2,3,4,7,0,8,4]) == (7,8)\nassert max_Product([0,-1,-2,-4,5,0,-6]) == (-4,-6)\nassert max_Product([1,2,3]) == (2,3)",
        "canonical_solution": "def max_Product(arr): \r\n    arr_len = len(arr) \r\n    if (arr_len < 2): \r\n        return (\"No pairs exists\")           \r\n    x = arr[0]; y = arr[1]      \r\n    for i in range(0,arr_len): \r\n        for j in range(i + 1,arr_len): \r\n            if (arr[i] * arr[j] > x * y): \r\n                x = arr[i]; y = arr[j] \r\n    return x,y    "
    },
    {
        "number": 416,
        "prompt": "Write a function to find the maximum sum we can make by dividing number in three parts recursively and summing them up together for the given number.\ndef breakSum(n): \n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    if n <= 2:\n        return n\n    else: \n        return n + max(breakSum(n-1) + breakSum(n-2) + breakSum(n-3), breakSum(n-1), breakSum(n-2)) ",
        "generated_testcode": "assert breakSum(10) == 33\n",
        "test": "assert breakSum(12) == 13\nassert breakSum(24) == 27\nassert breakSum(23) == 23",
        "canonical_solution": "MAX = 1000000\r\ndef breakSum(n): \r\n\tdp = [0]*(n+1) \r\n\tdp[0] = 0\r\n\tdp[1] = 1\r\n\tfor i in range(2, n+1): \r\n\t\tdp[i] = max(dp[int(i/2)] + dp[int(i/3)] + dp[int(i/4)], i); \r\n\treturn dp[n]"
    },
    {
        "number": 417,
        "prompt": "Write a function to find common first element in given list of tuple.\ndef group_tuples(Input): \n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    for i in range(len(Input)):\n        for j in range(len(Input)):\n            if i!=j:\n                if Input[i][0] == Input[j][0]:\n                    return Input[i][0]\n    return None\n#Example:\nInput = [('a', 2, 5), ('a', 3), ('b', 4), ('a', 8), ('a', 6)]\nprint(group_tuples(Input)) #output: a\n\nInput = [('a', 2, 5), ('b', 4), ('c', 8), ('d', 6)]\nprint(group_tuples(Input)) #output: None\n\n\n#Solution:\ndef group_tuples(Input):\n    for i in range(len(Input)):\n        for j in range(len(Input)):\n            if i!=j:\n                if Input[i][0] == Input[j][0]:\n                    return Input[i][0]\n    return None\n\n#Example:\nInput = [('a', 2, 5), ('a', 3), ('b', 4), ('a', 8), ('a', 6)]\nprint(group_tuples(Input)) #output: a\n\nInput = [('a', 2, 5), ('b', 4), ('c', 8), ('d', 6)]\nprint(group_tuples(Input)) #output: None\n",
        "generated_testcode": "assert group_tuples([(1,2,3),(4,5,6),(1,2,3),(7,8,9),(1,2,3)] ) == (1,2,3)\n",
        "test": "assert group_tuples([('x', 'y'), ('x', 'z'), ('w', 't')]) == [('x', 'y', 'z'), ('w', 't')]\nassert group_tuples([('a', 'b'), ('a', 'c'), ('d', 'e')]) == [('a', 'b', 'c'), ('d', 'e')]\nassert group_tuples([('f', 'g'), ('f', 'g'), ('h', 'i')]) == [('f', 'g', 'g'), ('h', 'i')]",
        "canonical_solution": "def group_tuples(Input): \r\n\tout = {} \r\n\tfor elem in Input: \r\n\t\ttry: \r\n\t\t\tout[elem[0]].extend(elem[1:]) \r\n\t\texcept KeyError: \r\n\t\t\tout[elem[0]] = list(elem) \r\n\treturn [tuple(values) for values in out.values()] "
    },
    {
        "number": 418,
        "prompt": "Write a python function to find the sublist having maximum length.\ndef Find_Max(lst): \n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    max_len = 0\n    start = 0\n    end = 0\n    n = len(lst)\n    max_start = 0\n    max_end = 0\n    temp = []\n    for i in range(n):\n        temp.append(lst[i])\n        for j in range(i+1,n):\n            temp.append(lst[j])\n            if len(temp) > max_len:\n                max_len = len(temp)\n                start = i\n                end = j\n            elif len(temp) == max_len:\n                if j-i < end-start:\n                    start = i\n                    end = j\n            temp.pop(0)\n    return lst[start:end+1]\n\n\n#Example usage:\nlst = [1,2,3,4,1,5,6,4,3,7,8,2,9,2,8,2,3,10,11,3]\nprint(Find_Max(lst))\n#Output: [1, 2, 3, 4, 5, 6, 4, 3, 7, 8, 2]\n",
        "generated_testcode": "assert Find_Max([1,2,3,4,5,6,7,8,9,10]) == 6\n",
        "test": "assert Find_Max([['A'],['A','B'],['A','B','C']]) == ['A','B','C']\nassert Find_Max([[1],[1,2],[1,2,3]]) == [1,2,3]\nassert Find_Max([[1,1],[1,2,3],[1,5,6,1]]) == [1,5,6,1]",
        "canonical_solution": "def Find_Max(lst): \r\n    maxList = max((x) for x in lst) \r\n    return maxList"
    },
    {
        "number": 419,
        "prompt": "Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\ndef round_and_sum(list1):\n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    sum = 0\n    for i in range(len(list1)):\n        rounded_num = round(list1[i])\n        sum += rounded_num\n    print(sum * len(list1))\n\n# Test the function with the given list of numbers\nround_and_sum([1.234, 4.567, 7.89, 10.1234, 5.55])\n\n# Output:\n# 82",
        "generated_testcode": "assert round_and_sum([1.2345, 2.5678, 3.9999, 4.0001]) == 10.0\n",
        "test": "assert round_and_sum([22.4, 4.0, -16.22, -9.10, 11.00, -12.22, 14.20, -5.20, 17.50])==243\nassert round_and_sum([5,2,9,24.3,29])==345\nassert round_and_sum([25.0,56.7,89.2])==513",
        "canonical_solution": "def round_and_sum(list1):\r\n  lenght=len(list1)\r\n  round_and_sum=sum(list(map(round,list1))* lenght)\r\n  return round_and_sum"
    },
    {
        "number": 420,
        "prompt": "Write a python function to find the cube sum of first n even natural numbers.\ndef cube_Sum(n): \n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i**3\n    return sum\n\n# Test the function with n = 10\nprint(cube_Sum(10)) # Output: 226000\n\n\n# Test the function with n = 5\nprint(cube_Sum(5)) # Output: 165\n\n\n# Test the function with n = 3\nprint(cube_Sum(3)) # Output: 27\n\n",
        "generated_testcode": "assert cube_Sum(5) == 2255\n",
        "test": "assert cube_Sum(2) == 72\nassert cube_Sum(3) == 288\nassert cube_Sum(4) == 800",
        "canonical_solution": "def cube_Sum(n): \r\n    sum = 0\r\n    for i in range(1,n + 1): \r\n        sum += (2*i)*(2*i)*(2*i) \r\n    return sum"
    },
    {
        "number": 421,
        "prompt": "Write a function to concatenate each element of tuple by the delimiter.\ndef concatenate_tuple(test_tup):\n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    result = \"\"\n    for element in test_tup:\n        result += str(element) + \"-\"\n    return result[:-1]\n\n# Testing the function\nprint(concatenate_tuple((\"apple\", \"banana\", \"cherry\", \"date\", \"fig\"))\n# Output: \"apple-banana-cherry-date-fig\"\n\nprint(concatenate_tuple(\"hello\", \"world\", \"python\", \"programming\")\n# Output: \"helloworld-python-programming\" ",
        "generated_testcode": "assert concatenate_tuple((\"Hello\", \"World\", \"Python\") == \"Hello,World,Python\"\n",
        "test": "assert concatenate_tuple((\"ID\", \"is\", 4, \"UTS\") ) == 'ID-is-4-UTS'\nassert concatenate_tuple((\"QWE\", \"is\", 4, \"RTY\") ) == 'QWE-is-4-RTY'\nassert concatenate_tuple((\"ZEN\", \"is\", 4, \"OP\") ) == 'ZEN-is-4-OP'",
        "canonical_solution": "def concatenate_tuple(test_tup):\r\n    delim = \"-\"\r\n    res = ''.join([str(ele) + delim for ele in test_tup])\r\n    res = res[ : len(res) - len(delim)]\r\n    return (str(res)) "
    },
    {
        "number": 422,
        "prompt": "Write a python function to find the average of cubes of first n natural numbers.\ndef find_Average_Of_Cube(n):  \n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    sum = 0\n    for i in range(1, n+1):\n        sum += i**3\n    return sum/n\n\nn = int(input(\"Enter the value of n: \"))\nresult = find_Average_Of_Cube(n)\nprint(\"The average of cubes of first\", n, \"natural numbers is:\", result) ",
        "generated_testcode": "assert find_Average_Of_Cube(5) == 35.0\n",
        "test": "assert find_Average_Of_Cube(2) == 4.5\nassert find_Average_Of_Cube(3) == 12\nassert find_Average_Of_Cube(1) == 1",
        "canonical_solution": "def find_Average_Of_Cube(n):  \r\n    sum = 0\r\n    for i in range(1, n + 1): \r\n        sum += i * i * i  \r\n    return round(sum / n, 6) "
    },
    {
        "number": 423,
        "prompt": "Write a function to solve gold mine problem.\ndef get_maxgold(gold, m, n): \n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    if m == 0 or n == 0: \n        return 0\n    if m == 1 or n == 1: \n        return gold[0][0]\n    dp = [[0 for i in range(n)] for j in range(m)] \n    dp[0][0] = gold[0][0] \n    for i in range(1, m): \n        dp[i][0] = gold[i][0] \n        for j in range(1, n): \n            dp[0][j] = gold[0][j] \n    for i in range(1, m): \n        for j in range(1, n): \n            if dp[i][j] == -1: \n                continue\n            dp[i][j] = max(dp[i-1][j], dp[i][j-1], gold[i][j]) \n            for k in range(1, min(i, j)+1): \n                if dp[i-k][j-k] != -1: \n                    dp[i][j] = max(dp[i][j], dp[i-k][j-k] + gold[i][j]) \n    return dp[m-1][n-1] ",
        "generated_testcode": "assert get_maxgold(gold = [\n    [1, 3, 1, 1, 5, 1, 0, 1, 0, 1],\n    [2, 2, 2, 2, 2, 2, 2, 2, 2],\n    [0, 0, 3, 0, 3, 0, 0, 0],\n    [0, 4, 0, 0, 5, 0, 0, 4],\n    [1, 3, 0, 0, 3, 0, 2, 0],\n    [0, 0, 0, 0, 0, 0, 0, 0],\n    [0, 0, 0, 1, 0, 0, 0, 1]\n], m = 5, n = 6) == 12\n\n\n",
        "test": "assert get_maxgold([[1, 3, 1, 5],[2, 2, 4, 1],[5, 0, 2, 3],[0, 6, 1, 2]],4,4)==16\nassert get_maxgold([[10,20],[30,40]],2,2)==70\nassert get_maxgold([[4,9],[3,7]],2,2)==13",
        "canonical_solution": "def get_maxgold(gold, m, n): \r\n    goldTable = [[0 for i in range(n)] \r\n                        for j in range(m)]   \r\n    for col in range(n-1, -1, -1): \r\n        for row in range(m):  \r\n            if (col == n-1): \r\n                right = 0\r\n            else: \r\n                right = goldTable[row][col+1] \r\n            if (row == 0 or col == n-1): \r\n                right_up = 0\r\n            else: \r\n                right_up = goldTable[row-1][col+1] \r\n            if (row == m-1 or col == n-1): \r\n                right_down = 0\r\n            else: \r\n                right_down = goldTable[row+1][col+1] \r\n            goldTable[row][col] = gold[row][col] + max(right, right_up, right_down) \r\n    res = goldTable[0][0] \r\n    for i in range(1, m): \r\n        res = max(res, goldTable[i][0])  \r\n    return res "
    },
    {
        "number": 424,
        "prompt": "Write a function to extract only the rear index element of each string in the given tuple.\ndef extract_rear(test_tuple):\n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    def extract_last_element(string):\n        return string[-1]\n    result = tuple(map(extract_last_element, test_tuple))\n    return result\n\n# Test cases\nprint(extract_rear((\"apple\", \"banana\", \"cherry\"))\n# Output: ('e', 'a', 'y')\n\nprint(extract_rear(\"hello\", \"world\", \"python\"))\n# Output: ('o', 'r', 'n')\nprint(extract_rear(\"12345\", \"67890\", \"56789\"))\n# Output: ('4', '9', '9')\n\n# Solution:We can use the built-in function `map()` to apply a function to each element of the tuple and the lambda function to extract the last character.\n# We can then convert the result to a tuple using the `tuple()` function. \n# The `extract_last_element()` function takes a single argument, which is a string, and returns the last character of the string using the index `-1`.\n# The `extract_rear()` function takes a tuple as input and applies the `extract_last_element()` function to each element using `map()`.\n# Finally, the result is returned as a tuple. ",
        "generated_testcode": "assert extract_rear((\"apple\", \"banana\", \"cherry\", \"date\", \"elderberry\") == (\"e\", \"a\", \"r\", \"e\", \"y\")\n",
        "test": "assert extract_rear(('Mers', 'for', 'Vers') ) == ['s', 'r', 's']\nassert extract_rear(('Avenge', 'for', 'People') ) == ['e', 'r', 'e']\nassert extract_rear(('Gotta', 'get', 'go') ) == ['a', 't', 'o']",
        "canonical_solution": "def extract_rear(test_tuple):\r\n  res = list(sub[len(sub) - 1] for sub in test_tuple)\r\n  return (res) "
    },
    {
        "number": 425,
        "prompt": "Write a function to count the number of sublists containing a particular element.\ndef count_element_in_list(list1, x): \n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    count = 0 \n    for sublist in list1: \n        if x in sublist: \n            count += 1 \n    return count \n\n#test the function with an example \nlist1 = [[1, 2, 3], [4, 5, 6], [2, 3, 4], [1, 2, 3], [4, 5, 6], [7, 8, 9]] \nprint(count_element_in_list(list1, 2))  # output: 3 ",
        "generated_testcode": "assert count_element_in_list([1, 2, 3, 4, 5, 2, 3, 4, 5, 6, 2, 7, 8, 9], 5) == 3\n",
        "test": "assert count_element_in_list([[1, 3], [5, 7], [1, 11], [1, 15, 7]],1)==3\nassert count_element_in_list([['A', 'B'], ['A', 'C'], ['A', 'D', 'E'], ['B', 'C', 'D']],'A')==3\nassert count_element_in_list([['A', 'B'], ['A', 'C'], ['A', 'D', 'E'], ['B', 'C', 'D']],'E')==1",
        "canonical_solution": "def count_element_in_list(list1, x): \r\n    ctr = 0\r\n    for i in range(len(list1)): \r\n        if x in list1[i]: \r\n            ctr+= 1          \r\n    return ctr"
    },
    {
        "number": 426,
        "prompt": "Write a function to filter odd numbers using lambda function.\ndef filter_oddnumbers(nums):\n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    return list(filter(lambda num: num % 2 == 1, nums))\n\n\n# Test the function\nnums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]\nprint(filter_oddnumbers(nums))  # Output: [1, 3, 5, 7, 9, 111]\n",
        "generated_testcode": "assert filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 3, 5, 7, 9]\n",
        "test": "assert filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1,3,5,7,9]\nassert filter_oddnumbers([10,20,45,67,84,93])==[45,67,93]\nassert filter_oddnumbers([5,7,9,8,6,4,3])==[5,7,9,3]",
        "canonical_solution": "def filter_oddnumbers(nums):\r\n odd_nums = list(filter(lambda x: x%2 != 0, nums))\r\n return odd_nums"
    },
    {
        "number": 427,
        "prompt": "Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format by using regex.\ndef change_date_format(dt):\n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    import re\n    date_list = re.findall(r'\\d{4}-\\d{2}-\\d{2}', dt)\n    for date in date_list:\n        year = date[0:4]\n        month = date[5:7]\n        day = date[8:10]\n        new_date = day + \"-\" + month + \"-\" + year\n        return new_date\n\n\n# Test the function\ndt = \"2021-12-25\"\nprint(change_date_format(dt))  # Output: \"25-12-2021\"\n",
        "generated_testcode": "assert change_date_format(\"2021-01-01\") == \"01-01-2021\"\n",
        "test": "assert change_date_format(\"2026-01-02\") == '02-01-2026'\nassert change_date_format(\"2020-11-13\") == '13-11-2020'\nassert change_date_format(\"2021-04-26\") == '26-04-2021'",
        "canonical_solution": "import re\r\ndef change_date_format(dt):\r\n        return re.sub(r'(\\d{4})-(\\d{1,2})-(\\d{1,2})', '\\\\3-\\\\2-\\\\1', dt)"
    },
    {
        "number": 428,
        "prompt": "Write a function to sort the given array by using shell sort.\ndef shell_sort(my_list):\n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    n = len(my_list)\n    gap = n // 2\n\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n\n    return my_list\n\n\n# Example usage:\nmy_list = [5, 1, 4, 2, 8, 3, 9, 7, 6, 5, 10, 2]\nprint(shell_sort(my_list))",
        "generated_testcode": "assert shell_sort([3, 1, 4, 2, 5, 1, 6, 7, 8, 9, 0, 2, 3, 4, 5] ) == [0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 7, 8, 9]\n",
        "test": "assert shell_sort([12, 23, 4, 5, 3, 2, 12, 81, 56, 95]) == [2, 3, 4, 5, 12, 12, 23, 56, 81, 95]\nassert shell_sort([24, 22, 39, 34, 87, 73, 68]) == [22, 24, 34, 39, 68, 73, 87]\nassert shell_sort([32, 30, 16, 96, 82, 83, 74]) == [16, 30, 32, 74, 82, 83, 96]",
        "canonical_solution": "def shell_sort(my_list):\r\n    gap = len(my_list) // 2\r\n    while gap > 0:\r\n        for i in range(gap, len(my_list)):\r\n            current_item = my_list[i]\r\n            j = i\r\n            while j >= gap and my_list[j - gap] > current_item:\r\n                my_list[j] = my_list[j - gap]\r\n                j -= gap\r\n            my_list[j] = current_item\r\n        gap //= 2\r\n\r\n    return my_list"
    },
    {
        "number": 429,
        "prompt": "Write a function to extract the elementwise and tuples from the given two tuples.\ndef and_tuples(test_tup1, test_tup2):\n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    result_tup = ()\n    for i in range(len(test_tup1)):\n        if type(test_tup1[i]) == tuple and type(test_tup2[i]) == tuple:\n            result_tup += (and_tuples(test_tup1[i], test_tup2[i]),)\n        elif type(test_tup1[i]) == int and type(test_tup2[i]) == int:\n            result_tup += (test_tup1[i] & test_tup2[i],)\n        else:\n            result_tup += (test_tup1[i] * test_tup2[i],)\n    return result_tup\n\n\n# Test cases\nprint(and_tuples((1, 2, (3, 4), 5), (6, 7, (8, 9))) == (6, 2, (0, 4))\nprint(and_tuples((True, False, (True, False, (True, True)), 3), (False, True, (False, False, (False, False))) == (False, False, (False, True, (True, False), 0))\nprint(and_tuples((0b1011, 0b1101), (0b0111, 0b1110)) == (0b101, 0b0000, (0b0, 0b00",
        "generated_testcode": "assert and_tuples((1, 2, 3, 4), (5, 6, 7)) == ((1, 6), (2, 7), (3, 4))\n",
        "test": "assert and_tuples((10, 4, 6, 9), (5, 2, 3, 3)) == (0, 0, 2, 1)\nassert and_tuples((1, 2, 3, 4), (5, 6, 7, 8)) == (1, 2, 3, 0)\nassert and_tuples((8, 9, 11, 12), (7, 13, 14, 17)) == (0, 9, 10, 0)",
        "canonical_solution": "def and_tuples(test_tup1, test_tup2):\r\n  res = tuple(ele1 & ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\r\n  return (res) "
    },
    {
        "number": 430,
        "prompt": "Write a function to find the directrix of a parabola.\ndef parabola_directrix(a, b, c): \n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    if a == 0:\n        return \"Parabola is not defined\"\n    else:\n        return (-b/(2*a)\n\n# Test the function\nprint(parabola_directrix(2, 3, -10)) # Output: -5\nprint(parabola_directrix(-1, 3, 4)) # Output: -1/3\nprint(parabola_directrix(1, 2, 3)) # Output: \"Parabola is not defined\"\n\n# The function returns the value of the directrix of a parabola given the values of a, b, and c\n# if a != 0, otherwise it returns \"Parabola is not defined\" since the directrix is not defined. ",
        "generated_testcode": "assert parabola_directrix(1, 2, 3) == 1\n",
        "test": "assert parabola_directrix(5,3,2)==-198\nassert parabola_directrix(9,8,4)==-2336\nassert parabola_directrix(2,4,6)==-130",
        "canonical_solution": "def parabola_directrix(a, b, c): \r\n  directrix=((int)(c - ((b * b) + 1) * 4 * a ))\r\n  return directrix"
    },
    {
        "number": 431,
        "prompt": "Write a function that takes two lists and returns true if they have at least one common element.\ndef common_element(list1, list2):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": true,
        "answer": "    for i in list1:\n        for j in list2:\n            if i == j:\n                return True\n    return False\n\n\n# Test cases\nprint(common_element([1, 2, 3, 4], [5, 6, 7])) # False\nprint(common_element([1, 2, 3], [3, 4, 5])) # True\nprint(common_element([1, 2, 3, 4], [3, 5, 6])) # True\nprint(common_element([1, 2, 3], [4, 5, 6])) # False\nprint(common_element([1, 2, 3, 4], [4, 5, 6, 7, 8])) # True\nprint(common_element([1, 2, 3], [3, 5, 6, 7, 8])) # True\nprint(common_element([1, 2, 3], [4, 5, 6, 8])) # False\n",
        "generated_testcode": "assert common_element([1, 2, 3, 4], [2, 3, 4, 5]) == True\n",
        "test": "assert common_element([1,2,3,4,5], [5,6,7,8,9])==True\nassert common_element([1,2,3,4,5], [6,7,8,9])==None\nassert common_element(['a','b','c'], ['d','b','e'])==True",
        "canonical_solution": "def common_element(list1, list2):\r\n     result = False\r\n     for x in list1:\r\n         for y in list2:\r\n             if x == y:\r\n                 result = True\r\n                 return result"
    },
    {
        "number": 432,
        "prompt": "Write a function to find the median of a trapezium.\ndef median_trapezium(base1,base2,height):\n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    return ((base1+base2)/2)*height\n\nbase1 = float(input(\"Enter the base 1: \"))\nbase2 = float(input(\"Enter the base 2: \"))\nheight = float(input(\"Enter the height: \"))\n\nprint(\"The median of the trapezium is:\",median_trapezium(base1,base2,height))\n\n# Output:\n# Enter the base 1: 4\n# Enter the base 2: 7\n# Enter the height: 5\n# The median of the trapezium is: 12.5 ",
        "generated_testcode": "assert median_trapezium(3,4,5) == 4.0\n",
        "test": "assert median_trapezium(15,25,35)==20\nassert median_trapezium(10,20,30)==15\nassert median_trapezium(6,9,4)==7.5",
        "canonical_solution": "def median_trapezium(base1,base2,height):\r\n median = 0.5 * (base1+ base2)\r\n return median"
    },
    {
        "number": 433,
        "prompt": "Write a function to check whether the entered number is greater than the elements of the given array.\ndef check_greater(arr, number):\n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    for i in arr:\n        if i > number:\n            return True\n    return False\n\n# Test the function\narr = [10, 20, 30, 40, 50]\nnumber = 45\nprint(check_greater(arr, number))\n\n# Output: True\n\narr = [10, 20, 30, 40, 50]\nnumber = 35\nprint(check_greater(arr, number))\n\n# Output: False\n\narr = [10, 20, 30, 40, 50]\nnumber = 60\nprint(check_greater(arr, number))\n\n# Output: True ",
        "generated_testcode": "assert check_greater([1, 2, 3, 4, 5], 4) == True\n",
        "test": "assert check_greater([1, 2, 3, 4, 5], 4) == 'No, entered number is less than those in the array'\nassert check_greater([2, 3, 4, 5, 6], 8) == 'Yes, the entered number is greater than those in the array'\nassert check_greater([9, 7, 4, 8, 6, 1], 11) == 'Yes, the entered number is greater than those in the array'",
        "canonical_solution": "def check_greater(arr, number):\r\n  arr.sort()\r\n  if number > arr[-1]:\r\n    return ('Yes, the entered number is greater than those in the array')\r\n  else:\r\n    return ('No, entered number is less than those in the array')"
    },
    {
        "number": 434,
        "prompt": "Write a function that matches a string that has an a followed by one or more b's.\ndef text_match_one(text):\n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    pattern = re.compile(r\"a(b+)\")\n    match = pattern.search(text)\n    if match:\n        return True\n    else:\n        return False\n\n# Test the function with some inputs\nprint(text_match_one(\"abbbc\")) # True\nprint(text_match_one(\"ac\")) # False\nprint(text_match_one(\"a\")) # False\nprint(text_match_one(\"abb\")) # True\nprint(text_match_one(\"abbc\")) # True\nprint(text_match_one(\"a\")) # False\nprint(text_match_one(\"abb\")) # True\nprint(text_match_one(\"a\")) # False\nprint(text_match_one(\"abb\")) # True\nprint(text_match_one(\"abbc\")) # True\nprint(text_match_one(\"a\")) # False\nprint(text_match_one(\"abb\")) # True\nprint(text_match_one(\"a\")) # False\nprint(text_match_one(\"abbc\")) # True\nprint(text_match_one(\"a\")) # False\nprint(text_match_one(\"abb\")) # True\nprint(text_match_one(\"abbc\")) # True\nprint(text_match_one(\"a\")) # False\nprint(text_match_one(\"abb\")) # True\nprint(text_match_one(\"abbc\")) # True\nprint(text_match_one(\"a\")) # False\nprint(text_match_one(\"abb\")) # True\nprint(text_match_",
        "generated_testcode": "assert text_match_one(\"ab\") == True\n",
        "test": "assert text_match_one(\"ac\")==('Not matched!')\nassert text_match_one(\"dc\")==('Not matched!')\nassert text_match_one(\"abba\")==('Found a match!')",
        "canonical_solution": "import re\r\ndef text_match_one(text):\r\n        patterns = 'ab+?'\r\n        if re.search(patterns,  text):\r\n                return 'Found a match!'\r\n        else:\r\n                return('Not matched!')\r\n"
    },
    {
        "number": 435,
        "prompt": "Write a python function to find the last digit of a given number.\ndef last_Digit(n) :\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": true,
        "answer": "    # initialize a variable to store the last digit\n    last_digit = 0\n\n    # convert the given number to a string\n    n_str = str(n)\n    # get the length of the string\n    length = len(n_str)\n    # get the last digit of the number\n    last_digit = int(n_str[length - 1])\n\n    # return the last digit\n    return last_digit\n\n\n# Test the function with an example\nprint(last_Digit(12345)) # Output: 5\nprint(last_Digit(9876543210)) # Output: 0\nprint(last_Digit(123456789)) # Output: 9\n",
        "generated_testcode": "assert last_Digit(12345) == 5\n",
        "test": "assert last_Digit(123) == 3\nassert last_Digit(25) == 5\nassert last_Digit(30) == 0",
        "canonical_solution": "def last_Digit(n) :\r\n    return (n % 10) "
    },
    {
        "number": 436,
        "prompt": "Write a python function to print negative numbers in a list.\ndef neg_nos(list1):\n",
        "checkpoint": "7B",
        "pass": 9,
        "correct": true,
        "answer": "    negative_numbers = []\n    for num in list1:\n        if num < 0:\n            negative_numbers.append(num)\n    return negative_numbers\n\nlist1 = [1,2,-3,4,-5,6,-7,8,-9,10]\nprint(neg_nos(list1)) # Output: [-3, -5, -7, -9]\n\nlist2 = [1,2,3,4,5,6,7,8,9,10]\nprint(neg_nos(list2)) # Output: []\nlist3 = [-1,-2,-3,-4,-5,-6,-7]\nprint(neg_nos(list3)) # Output: [-1, -2, -3, -4, -5, -6, -7]\nlist4 = [1,2,3,4,5,6,7,8,9]\nprint(neg_nos(list4)) # Output: []\nlist5 = [0,0,0,0,-1,0,0,0]\nprint(neg_nos(list5)) # Output: [-1]\n",
        "generated_testcode": "assert neg_nos([1,2,3,-4,5,-6,7,-8,9]) == [-4,-6,-8]\n",
        "test": "assert neg_nos([-1,4,5,-6]) == -1,-6\nassert neg_nos([-1,-2,3,4]) == -1,-2\nassert neg_nos([-7,-6,8,9]) == -7,-6",
        "canonical_solution": "def neg_nos(list1):\r\n  for num in list1: \r\n    if num < 0: \r\n       return num "
    },
    {
        "number": 437,
        "prompt": "Write a function to remove odd characters in a string.\ndef remove_odd(str1):\n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    new_str = \"\"\n    for char in str1:\n        if char.isalpha():\n            new_str += char\n    return new_str\n\nprint(remove_odd(\"Hello World\")) # output: \"HloWrld\"\nprint(remove_odd(\"Python\")) # output: \"Pytn\"\nprint(remove_odd(\"A1bc3d4ef5gh6\")) # output: \"abcdefg\"\n",
        "generated_testcode": "assert remove_odd(\"Hello World\") == \"Hlo Wrld\"\n",
        "test": "assert remove_odd(\"python\")==(\"yhn\")\nassert remove_odd(\"program\")==(\"rga\")\nassert remove_odd(\"language\")==(\"agae\")",
        "canonical_solution": "def remove_odd(str1):\r\n str2 = ''\r\n for i in range(1, len(str1) + 1):\r\n    if(i % 2 == 0):\r\n        str2 = str2 + str1[i - 1]\r\n return str2"
    },
    {
        "number": 438,
        "prompt": "Write a function to count bidirectional tuple pairs.\ndef count_bidirectional(test_list):\n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    count = 0\n    seen = set()\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if (test_list[i], test_list[j]) in seen or (test_list[j], test_list[i]) in seen:\n                continue\n            if (test_list[i], test_list[j]) in test_list:\n                count += 1\n                seen.add((test_list[i], test_list[j]))\n    return count\n\n\n# Test the function\ntest_list = [(1, 2), (3, 4), (5, 6), (7, 8), (9, 10), (2, 1), (4, 3), (6, 5), (8, 7), (10, 9)]\nprint(count_bidirectional(test_list))  # Output: 2",
        "generated_testcode": "assert count_bidirectional([\"apple\", \"banana\", \"cherry\", \"banana\", \"apple\", \"cherry\", \"banana\", \"apple\", \"cherry\", \"banana\", \"apple\", \"cherry\"]) == 4\n",
        "test": "assert count_bidirectional([(5, 6), (1, 2), (6, 5), (9, 1), (6, 5), (2, 1)] ) == '3'\nassert count_bidirectional([(5, 6), (1, 3), (6, 5), (9, 1), (6, 5), (2, 1)] ) == '2'\nassert count_bidirectional([(5, 6), (1, 2), (6, 5), (9, 2), (6, 5), (2, 1)] ) == '4'",
        "canonical_solution": "def count_bidirectional(test_list):\r\n  res = 0\r\n  for idx in range(0, len(test_list)):\r\n    for iidx in range(idx + 1, len(test_list)):\r\n      if test_list[iidx][0] == test_list[idx][1] and test_list[idx][1] == test_list[iidx][0]:\r\n        res += 1\r\n  return (str(res)) "
    },
    {
        "number": 439,
        "prompt": "Write a function to convert a list of multiple integers into a single integer.\ndef multiple_to_single(L):\n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    # Initialize the result variable to 0\n    result = 0\n    # Loop through the list L\n    for num in L:\n        # Multiply the result by 10 and add the current integer to the result\n        result = result * 10 + num\n    return result\n\n\n# Test the function with some sample inputs\nprint(multiple_to_single([1, 2, 3, 4, 5])) # Output: 12345\nprint(multiple_to_single([9, 8, 7, 6])) # Output: 9876\nprint(multiple_to_single([0, 5, 2])) # Output: 52\nprint(multiple_to_single([1, 2, 3, 4, 5, 6, 7, 8, 9])) # Output: 123456789",
        "generated_testcode": "assert multiple_to_single([1, 2, 3, 4, 5]) == 12345\n",
        "test": "assert multiple_to_single([11, 33, 50])==113350\nassert multiple_to_single([-1,2,3,4,5,6])==-123456\nassert multiple_to_single([10,15,20,25])==10152025",
        "canonical_solution": "def multiple_to_single(L):\r\n  x = int(\"\".join(map(str, L)))\r\n  return x"
    },
    {
        "number": 440,
        "prompt": "Write a function to find all adverbs and their positions in a given sentence.\ndef find_adverb_position(text):\n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    words = text.split()\n    adverbs = []\n    for i in range(len(words)):\n        if words[i] in ['quickly', 'slowly', 'quickly', 'suddenly', 'quickly', 'gently', 'hardly', 'silently', 'gradually', 'slowly', 'quietly', 'soon', 'anxiously', 'gradually', 'suddenly', 'quietly', 'silently']:\n            adverbs.append((words[i], i))\n    return adverbs\n\n\n# Test the function\nsentence = \"The quick brown fox jumps slowly over the lazy dog.\"\nprint(find_adverb_position(sentence))\n# Output: [('slowly', 3)]\n\nsentence = \"The dog quietly eats the apple quietly.\"\nprint(find_adverb_position(sentence))\n# Output: [('quietly', 4], ('quietly', 7)]\n\nsentence = \"The dog silently ate the apple.\"\nprint(find_adverb_position(sentence))\n# Output: [('silently', 4]",
        "generated_testcode": "assert find_adverb_position(\"The dog is running quickly.\") == [(\"running\", 10)]\n",
        "test": "assert find_adverb_position(\"clearly!! we can see the sky\")==(0, 7, 'clearly')\nassert find_adverb_position(\"seriously!! there are many roses\")==(0, 9, 'seriously')\nassert find_adverb_position(\"unfortunately!! sita is going to home\")==(0, 13, 'unfortunately')",
        "canonical_solution": "import re\r\ndef find_adverb_position(text):\r\n for m in re.finditer(r\"\\w+ly\", text):\r\n    return (m.start(), m.end(), m.group(0))"
    },
    {
        "number": 441,
        "prompt": "Write a function to find the surface area of a cube.\ndef surfacearea_cube(l):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": true,
        "answer": "    \"\"\"\n    Find the surface area of a cube with side length l\n    \"\"\"\n    # Your code here\n    return 6*l**2\n\n\n# Test the function with an example\nprint(surfacearea_cube(2))  # Output: 36\n\n\n# Test the function with another example\nprint(surfacearea_cube(5))  # Output: 150\n\n\n# Test the function with another example\nprint(surfacearea_cube(10))  # Output: 600",
        "generated_testcode": "assert surfacearea_cube(2) == 6*4\n",
        "test": "assert surfacearea_cube(5)==150\nassert surfacearea_cube(3)==54\nassert surfacearea_cube(10)==600",
        "canonical_solution": "def surfacearea_cube(l):\r\n  surfacearea= 6*l*l\r\n  return surfacearea"
    },
    {
        "number": 442,
        "prompt": "Write a function to find the ration of positive numbers in an array of integers.\ndef positive_count(nums):\n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    count = 0\n    for num in nums:\n        if num > 0:\n            count += 1\n    return count / len(nums)\n\n# Example usage:\nprint(positive_count([1, -2, 3, -4, 5, 6, -7, 8, 9])) # Output: 0.4\nprint(positive_count([0, 0, 0, 0])) # Output: 0\nprint(positive_count([1, 2, 3, 4, 5])) # Output: 1.0\n",
        "generated_testcode": "assert positive_count([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 5\n",
        "test": "assert positive_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])==0.54\nassert positive_count([2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8])==0.69\nassert positive_count([2, 4, -6, -9, 11, -12, 14, -5, 17])==0.56",
        "canonical_solution": "from array import array\r\ndef positive_count(nums):\r\n    n = len(nums)\r\n    n1 = 0\r\n    for x in nums:\r\n        if x > 0:\r\n            n1 += 1\r\n        else:\r\n          None\r\n    return round(n1/n,2)"
    },
    {
        "number": 443,
        "prompt": "Write a python function to find the largest negative number from the given list.\ndef largest_neg(list1): \n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    largest_neg_num = float('-inf')\n    for num in list1:\n        if num < 0 and num > largest_neg_num:\n            largest_neg_num = num\n    if largest_neg_num == float('-inf'):\n        return None\n    else:\n        return largest_neg_num\n\n#Test the function\nprint(largest_neg([2, 5, -3, 0, -6, 8, -10, -2]))\nprint(largest_neg([2, 5, 0, 8, -10]))\nprint(largest_neg([2, 5, 8, -10]))\nprint(largest_neg([2, 5, -8, 0]))\nprint(largest_neg([-2]))\nprint(largest_neg([]))\n\n\n#Solution 2: Using max() function\ndef largest_neg(list1):\n    max_num = max(list1)\n    return max_num if max_num < 0 else None\n\n#Test the function\nprint(largest_neg([2, 5, -3, 0, -6, 8, -10, -2]))\nprint(largest_neg([2, 5, 0, 8, -10]))\nprint(largest_neg([2, 5, 8, -10]))\nprint(largest_neg([2, 5, -8, 0]))\nprint(largest_",
        "generated_testcode": "assert largest_neg([1, 2, -3, 4, -5, 6, -7, 8, -9]) == -9\n",
        "test": "assert largest_neg([1,2,3,-4,-6]) == -6\nassert largest_neg([1,2,3,-8,-9]) == -9\nassert largest_neg([1,2,3,4,-1]) == -1",
        "canonical_solution": "def largest_neg(list1): \r\n    max = list1[0] \r\n    for x in list1: \r\n        if x < max : \r\n             max = x  \r\n    return max"
    },
    {
        "number": 444,
        "prompt": "Write a function to trim each tuple by k in the given tuple list.\ndef trim_tuple(test_list, K):\n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    return [(item[:K],) if len(item) == 1 else (item[0][:K], item[1][:K]) for item in test_list]\n\n\n#Testing\nprint(trim_tuple([('hello', 'world'), ('python', 'programming'), ('programming', 'language')], 3)) # should print: [('hel', 'wor'), ('pro', 'pro'), ('pro', 'lan')]\nprint(trim_tuple([('cat', 'dog', 'bird'), ('cat', 'fish', 'dog'), ('elephant', 'lion', 'tiger', 'giraffe')], 2)) # should print: [('ca', 'do'), ('ca', 'fi'), ('ele', 'li')] ",
        "generated_testcode": "assert trim_tuple([(1,2,3,4,5,6,7,8,9,10), (11,12,13,14,15,16,17,18,19,20), (21,22,23,24,25,26,27,28,29,30)], 3) == [(1,2,3),(11,12,13),(21,22,23)]\n",
        "test": "assert trim_tuple([(5, 3, 2, 1, 4), (3, 4, 9, 2, 1),(9, 1, 2, 3, 5), (4, 8, 2, 1, 7)], 2) == '[(2,), (9,), (2,), (2,)]'\nassert trim_tuple([(5, 3, 2, 1, 4), (3, 4, 9, 2, 1), (9, 1, 2, 3, 5), (4, 8, 2, 1, 7)], 1) == '[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]'\nassert trim_tuple([(7, 8, 4, 9), (11, 8, 12, 4),(4, 1, 7, 8), (3, 6, 9, 7)], 1) == '[(8, 4), (8, 12), (1, 7), (6, 9)]'",
        "canonical_solution": "def trim_tuple(test_list, K):\r\n  res = []\r\n  for ele in test_list:\r\n    N = len(ele)\r\n    res.append(tuple(list(ele)[K: N - K]))\r\n  return (str(res)) "
    },
    {
        "number": 445,
        "prompt": "Write a function to perform index wise multiplication of tuple elements in the given two tuples.\ndef index_multiplication(test_tup1, test_tup2):\n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    result = ()\n    for i in range(len(test_tup1)):\n        result += (test_tup1[i] * test_tup2[i],)\n    return result\n\n#test cases\nprint(index_multiplication((2, 4, 6, 8), (3, 5, 9)))  # Output: (6, 20, 72)\nprint(index_multiplication((1, 5, 2, 3), (3, 7, 9)) # Output: (3, 35, 18)\nprint(index_multiplication((2, 7, 10), (1, 4, 5))) # Output: (2, 28, 50) ",
        "generated_testcode": "assert index_multiplication((1, 2, 3, 4), (5, 6, 7)) == (5, 12, 21)\n",
        "test": "assert index_multiplication(((1, 3), (4, 5), (2, 9), (1, 10)),((6, 7), (3, 9), (1, 1), (7, 3)) ) == ((6, 21), (12, 45), (2, 9), (7, 30))\nassert index_multiplication(((2, 4), (5, 6), (3, 10), (2, 11)),((7, 8), (4, 10), (2, 2), (8, 4)) ) == ((14, 32), (20, 60), (6, 20), (16, 44))\nassert index_multiplication(((3, 5), (6, 7), (4, 11), (3, 12)),((8, 9), (5, 11), (3, 3), (9, 5)) ) == ((24, 45), (30, 77), (12, 33), (27, 60))",
        "canonical_solution": "def index_multiplication(test_tup1, test_tup2):\r\n  res = tuple(tuple(a * b for a, b in zip(tup1, tup2))\r\n   for tup1, tup2 in zip(test_tup1, test_tup2))\r\n  return (res) "
    },
    {
        "number": 446,
        "prompt": "Write a python function to count the occurence of all elements of list in a tuple.\ndef count_Occurrence(tup, lst): \n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    count = {}\n    for i in lst: \n        count[i] = tup.count(i)\n    return count ",
        "generated_testcode": "assert count_Occurrence(('abc', ['a', 'b', 'c', 'd']) == {'a': 1, 'b': 1, 'c': 1, 'd': 0}\n",
        "test": "assert count_Occurrence(('a', 'a', 'c', 'b', 'd'),['a', 'b'] ) == 3\nassert count_Occurrence((1, 2, 3, 1, 4, 6, 7, 1, 4),[1, 4, 7]) == 6\nassert count_Occurrence((1,2,3,4,5,6),[1,2]) == 2",
        "canonical_solution": "from collections import Counter \r\ndef count_Occurrence(tup, lst): \r\n    count = 0\r\n    for item in tup: \r\n        if item in lst: \r\n            count+= 1 \r\n    return count  "
    },
    {
        "number": 447,
        "prompt": "Write a function to find cubes of individual elements in a list using lambda function.\ndef cube_nums(nums):\n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    return list(map(lambda x: x**3, nums))\n\n\nnums = [1, 2, 3, 4, 5, 6, 7, 8, 9]\nprint(cube_nums(nums))\n\n\n# Output: [1, 8, 27, 64, 125, 216, 343, 512] ",
        "generated_testcode": "assert cube_nums([1, 2, 3, 4, 5]) == [1, 8, 27, 64, 125]\n",
        "test": "assert cube_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]\nassert cube_nums([10,20,30])==([1000, 8000, 27000])\nassert cube_nums([12,15])==([1728, 3375])",
        "canonical_solution": "def cube_nums(nums):\r\n cube_nums = list(map(lambda x: x ** 3, nums))\r\n return cube_nums"
    },
    {
        "number": 448,
        "prompt": "Write a function to calculate the sum of perrin numbers.\ndef cal_sum(n): \n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    count = 0\n    perrin_sum = 0\n    for i in range(1,n+1):\n        count += 1\n        perrin_sum += count\n    return perrin_sum\n\nn = int(input(\"Enter the value of n: \"))\nprint(\"The sum of Perrin numbers up to n is\", cal_sum(n))",
        "generated_testcode": "assert cal_sum(5) == 15\n",
        "test": "assert cal_sum(9) == 49\nassert cal_sum(10) == 66\nassert cal_sum(11) == 88",
        "canonical_solution": "def cal_sum(n): \r\n\ta = 3\r\n\tb = 0\r\n\tc = 2\r\n\tif (n == 0): \r\n\t\treturn 3\r\n\tif (n == 1): \r\n\t\treturn 3\r\n\tif (n == 2): \r\n\t\treturn 5\r\n\tsum = 5\r\n\twhile (n > 2): \r\n\t\td = a + b \r\n\t\tsum = sum + d \r\n\t\ta = b \r\n\t\tb = c \r\n\t\tc = d \r\n\t\tn = n-1\r\n\treturn sum"
    },
    {
        "number": 449,
        "prompt": "Write a python function to check whether the triangle is valid or not if 3 points are given.\ndef check_Triangle(x1,y1,x2,y2,x3,y3): \n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    # calculate the distance between three points using distance formula\n    dist1 = ((x2-x1)**2 + (y2-y1)**2)**0.5\n    dist2 = ((x3-x2)**2 + (y3-y2)**2)**0.5\n    dist3 = ((x3-x1)**2 + (y3-y1)**2)**0.5\n    \n    # check whether the sum of any two sides is greater than the third side or not\n    if dist1+dist2<=dist3 or dist2+dist3<=dist1 or dist1+dist3<=dist2:\n        return False\n    else:\n        return True\n\n# test the function with given points\nprint(check_Triangle(0,0,4,0,4,4)) # True\nprint(check_Triangle(0,0,4,0,0,4)) # False\nprint(check_Triangle(0,0,5,0,5)) # False\nprint(check_Triangle(0,0,0,4,4)) # False\nprint(check_Triangle(0,0,3,3,4)) # True\nprint(check_Triangle(0,0,4,0,3)) # False\nprint(check_Triangle(0,0,5,3,4)) # True\nprint(check_Triangle(0,0,4,3,4)) # False\nprint(check_Triangle(0,0,4,5,",
        "generated_testcode": "assert check_Triangle(0,0,3,0,4,0) == False\n",
        "test": "assert check_Triangle(1,5,2,5,4,6) == 'Yes'\nassert check_Triangle(1,1,1,4,1,5) == 'No'\nassert check_Triangle(1,1,1,1,1,1) == 'No'",
        "canonical_solution": "def check_Triangle(x1,y1,x2,y2,x3,y3): \r\n    a = (x1*(y2-y3)+x2*(y3-y1)+x3*(y1-y2))   \r\n    if a == 0: \r\n        return ('No') \r\n    else: \r\n        return ('Yes') "
    },
    {
        "number": 450,
        "prompt": "Write a function to extract specified size of strings from a give list of string values.\ndef extract_string(str, l):\n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    result = []\n    for i in range(len(l):\n        if len(str) > len(l[i]:\n            result.append(l[i])\n    return result\n\n#Test the function with example input\nl = ['hello', 'world', 'python', 'programming', 'is', 'fun']\ns = 'pro'\nprint(extract_string(s, l))\n\n# Output: ['programming', 'is'] ",
        "generated_testcode": "assert extract_string(\"hello world\", [\"hello\", \"world\", \"python\", \"programming\", \"is\", \"fun\"]) == [\"hello\", \"world\"]\n",
        "test": "assert extract_string(['Python', 'list', 'exercises', 'practice', 'solution'] ,8)==['practice', 'solution']\nassert extract_string(['Python', 'list', 'exercises', 'practice', 'solution'] ,6)==['Python']\nassert extract_string(['Python', 'list', 'exercises', 'practice', 'solution'] ,9)==['exercises']",
        "canonical_solution": "def extract_string(str, l):\r\n    result = [e for e in str if len(e) == l] \r\n    return result"
    },
    {
        "number": 451,
        "prompt": "Write a function to remove all whitespaces from the given string using regex.\ndef remove_whitespaces(text1):\n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    import re\n    pattern = r'\\s+'\n    return re.sub(pattern, '', text1)\n\n#Example usage:\ntext1 = \"This is a sample string with     some      spaces\"\nprint(remove_whitespaces(text1))\n#Output: \"Thisisasamplestringwithsomespaces\"\n\n\n#Alternative solution:\ndef remove_whitespaces(text):\n    return ''.join(text.split())\n\n#Example usage:\ntext1 = \"This is a sample string with     some      spaces\"\nprint(remove_whitespaces(text1))\n#Output: \"Thisisasamplestringwithsomespaces\"\n\n#Note: Both the solutions will give the same output. The first one is using regex and the second one is using split() and join() functions. ",
        "generated_testcode": "assert remove_whitespaces(\"Hello, World!\") == \"HelloWorld!\"\n",
        "test": "assert remove_whitespaces(' Google    Flutter ') == 'GoogleFlutter'\nassert remove_whitespaces(' Google    Dart ') == 'GoogleDart'\nassert remove_whitespaces(' iOS    Swift ') == 'iOSSwift'",
        "canonical_solution": "import re\r\ndef remove_whitespaces(text1):\r\n  return (re.sub(r'\\s+', '',text1))"
    },
    {
        "number": 452,
        "prompt": "Write a function that gives loss amount if the given amount has loss else return none.\ndef loss_amount(actual_cost,sale_amount): \n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    if sale_amount<actual_cost:\n        return actual_cost-sale_amount\n    else:\n        return None\n\n# Test the function with different values\nprint(loss_amount(1000,90)) # Output: None\nprint(loss_amount(100,110)) # Output: 10\nprint(loss_amount(10,20)) # Output: None\n",
        "generated_testcode": "assert loss_amount(1000, 80) == 20\n",
        "test": "assert loss_amount(1500,1200)==None\nassert loss_amount(100,200)==100\nassert loss_amount(2000,5000)==3000",
        "canonical_solution": "def loss_amount(actual_cost,sale_amount): \r\n  if(sale_amount > actual_cost):\r\n    amount = sale_amount - actual_cost\r\n    return amount\r\n  else:\r\n    return None"
    },
    {
        "number": 453,
        "prompt": "Write a python function to find the sum of even factors of a number.\ndef sumofFactors(n) : \n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    sum = 0\n    for i in range(1, n+1) : \n        if n % i == 0 : \n            if i % 2 == 0 : \n                sum += i\n    return sum\n\n# Testing the function \nprint(sumofFactors(24)) # Output: 8 (2 + 4 + 6 + 12) = 20\nprint(sumofFactors(15)) # Output: 6 (1 + 3 + 5) = 9\nprint(sumofFactors(12)) # Output: 12 (1 + 2 + 3 + 4 + 6 + 12) = 18 ",
        "generated_testcode": "assert sumofFactors(12) == 6, \"Test case 1 failed\"\n",
        "test": "assert sumofFactors(18) == 26\nassert sumofFactors(30) == 48\nassert sumofFactors(6) == 8",
        "canonical_solution": "import math \r\ndef sumofFactors(n) : \r\n    if (n % 2 != 0) : \r\n        return 0\r\n    res = 1\r\n    for i in range(2, (int)(math.sqrt(n)) + 1) :    \r\n        count = 0\r\n        curr_sum = 1\r\n        curr_term = 1\r\n        while (n % i == 0) : \r\n            count= count + 1\r\n            n = n // i \r\n            if (i == 2 and count == 1) : \r\n                curr_sum = 0\r\n            curr_term = curr_term * i \r\n            curr_sum = curr_sum + curr_term \r\n        res = res * curr_sum  \r\n    if (n >= 2) : \r\n        res = res * (1 + n) \r\n    return res "
    },
    {
        "number": 454,
        "prompt": "Write a function that matches a word containing 'z'.\ndef text_match_wordz(text):\n",
        "checkpoint": "7B",
        "pass": 3,
        "correct": true,
        "answer": "    if \"z\" in text:\n        return True\n    else:\n        return False\n\n#Test the function with different inputs\nprint(text_match_wordz(\"hello\")) # False\nprint(text_match_wordz(\"worldz\")) # True\nprint(text_match_wordz(\"Hi zebra\")) # True\nprint(text_match_wordz(\"I am not in the list\")) # False\nprint(text_match_wordz(\"Python is awesome\")) # False\nprint(text_match_wordz(\"I like Python\")) # True\nprint(text_match_wordz(\"Pizza\")) # False\nprint(text_match_wordz(\"Zookeeper\")) # True\n\n",
        "generated_testcode": "assert text_match_wordz(\"The quick brown fox jumps over the lazy dog.\") == True\n",
        "test": "assert text_match_wordz(\"pythonz.\")==('Found a match!')\nassert text_match_wordz(\"xyz.\")==('Found a match!')\nassert text_match_wordz(\"  lang  .\")==('Not matched!')",
        "canonical_solution": "import re\r\ndef text_match_wordz(text):\r\n        patterns = '\\w*z.\\w*'\r\n        if re.search(patterns,  text):\r\n                return 'Found a match!'\r\n        else:\r\n                return('Not matched!')"
    },
    {
        "number": 455,
        "prompt": "Write a function to check whether the given month number contains 31 days or not.\ndef check_monthnumb_number(monthnum2):\n",
        "checkpoint": "7B",
        "pass": 4,
        "correct": true,
        "answer": "    if monthnum2 == 2:\n        return False\n    elif monthnum2 == 4 or monthnum2 == 6 or monthnum2 == 9 or monthnum2 == 11:\n        return False\n    else:\n        return True\n\n\n# Test cases\nprint(check_monthnumb_number(2)) # Output: False\nprint(check_monthnumb_number(4)) # Output: True\nprint(check_monthnumb_number(9)) # Output: True\nprint(check_monthnumb_number(8)) # Output: False\n\n\n# You can also use the following one-liner function:\ndef check_monthnumb_number_2(monthnum3):\n    return monthnum3 in (2, 4, 6, 9, 11)",
        "generated_testcode": "assert check_monthnumb_number(2) == False\n",
        "test": "assert check_monthnumb_number(5)==True\nassert check_monthnumb_number(2)==False\nassert check_monthnumb_number(6)==False",
        "canonical_solution": "def check_monthnumb_number(monthnum2):\r\n  if(monthnum2==1 or monthnum2==3 or monthnum2==5 or monthnum2==7 or monthnum2==8 or monthnum2==10 or monthnum2==12):\r\n    return True\r\n  else:\r\n    return False"
    },
    {
        "number": 456,
        "prompt": "Write a function to reverse strings in a given list of string values.\ndef reverse_string_list(stringlist):\n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    reversed_list = []\n    for string in stringlist:\n        reversed_list.append(string[::-1])\n    return reversed_list\n\n\n# Test the function\ntest_list = [\"hello\", \"world\", \"python\", \"programming\", \"programming123\"]\nprint(reverse_string_list(test_list))\n\n\n# Output: ['olleh', 'dlrow', 'gnimmargorp', '321gnimmargorp']\n\n\n# Write a function to reverse strings in a given list of string values, but not using slicing\ndef reverse_string_list(stringlist):\n    reversed_list = []\n    for string in stringlist:\n        reversed_list.append(string[::-1])\n    return reversed_list\n\n\n# Test the function\ntest_list = [\"hello\", \"world\", \"python\", \"programming\", \"programming123\"]\nprint(reverse_string_list(test_list))\n\n\n# Output: ['olleh', 'dlrow', 'gnimmargorp', '321gnimmargorp']\n\n\n# Write a function to reverse strings in a given list of string values, but not using slicing, using a for loop\ndef reverse_string_list(stringlist):\n    reversed_list = []\n    for string in stringlist:\n        new_string = \"\"\n        for char in string:\n            new_string = char + new_string\n        reversed_list.append(new_string)",
        "generated_testcode": "assert reverse_string_list([\"hello\", \"world\", \"python\", \"programming\"] == [\"olleh\", \"dnorw\", \"gnimmargorp\"]\n\n",
        "test": "assert reverse_string_list(['Red', 'Green', 'Blue', 'White', 'Black'])==['deR', 'neerG', 'eulB', 'etihW', 'kcalB']\nassert reverse_string_list(['john','amal','joel','george'])==['nhoj','lama','leoj','egroeg']\nassert reverse_string_list(['jack','john','mary'])==['kcaj','nhoj','yram']",
        "canonical_solution": "def reverse_string_list(stringlist):\r\n    result = [x[::-1] for x in stringlist]\r\n    return result"
    },
    {
        "number": 457,
        "prompt": "Write a python function to find the sublist having minimum length.\ndef Find_Min(lst): \n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    if len(lst) == 1:\n        return lst\n    else:\n        mid = len(lst)//2\n        left = Find_Min(lst[:mid])\n        right = Find_Min(lst[mid:])\n        if len(left) < len(right):\n            return left\n        else:\n            return right\n\n\n# Test the function with the given test cases\nprint(Find_Min([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\nprint(Find_Min([5, 6, 7, 8, 9, 10, 1, 2, 3]))\nprint(Find_Min([3, 7, 1, 9, 8, 5, 10, 4, 2, 6, 7]))\nprint(Find_Min([10, 20, 30, 40, 50, 60]))\nprint(Find_Min([2, 3, 1]))\nprint(Find_Min([1]))\nprint(Find_Min([5, 10, 7, 9, 3, 8, 2, 6]))\nprint(Find_Min([5]))\n\n\n# Output:\n# [1, 2, 3, 4, 5, 6, 7, 8, 9]\n# [1, 2, 3, 4, 5, 6, ",
        "generated_testcode": "assert Find_Min([1,2,3,4,5,6,7,8,9]) == 1\n",
        "test": "assert Find_Min([[1],[1,2],[1,2,3]]) == [1]\nassert Find_Min([[1,1],[1,1,1],[1,2,7,8]]) == [1,1]\nassert Find_Min([['x'],['x','y'],['x','y','z']]) == ['x']",
        "canonical_solution": "def Find_Min(lst): \r\n    minList = min((x) for x in lst) \r\n    return minList"
    },
    {
        "number": 458,
        "prompt": "Write a function to find the area of a rectangle.\ndef rectangle_area(l,b):\n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    return l*b\n\n#Test the function\nprint(rectangle_area(5,10)) #output: 50\nprint(rectangle_area(10,5)) #output: 50\nprint(rectangle_area(10,10)) #output: 100\n\n\n#Write a function to find the area of a triangle\ndef triangle_area(b,h):\n    return 0.5*b*h\n\n#Test the function\nprint(triangle_area(10,10)) #output: 50\nprint(triangle_area(5,10)) #output: 25\n\n\n#Write a function to find the area of a circle\nimport math\ndef circle_area(r):\n    return math.pi*(r**2)\n\n#Test the function\nprint(circle_area(5)) #output: 78.5398163339744483\nprint(circle_area(10)) #output: 314.1592653589793\nprint(circle_area(15)) #output: 706.8547212763204\n\n\n#Write a function to find the volume of a sphere\nimport math\ndef sphere_volume(r):\n    return (4/3)*math.pi*(r**3)\n\n#Test the function\nprint(sphere_volume(5)) #output: 523.6",
        "generated_testcode": "assert rectangle_area(5,10) == 50\n",
        "test": "assert rectangle_area(10,20)==200\nassert rectangle_area(10,5)==50\nassert rectangle_area(4,2)==8",
        "canonical_solution": "def rectangle_area(l,b):\r\n  area=l*b\r\n  return area"
    },
    {
        "number": 459,
        "prompt": "Write a function to remove uppercase substrings from a given string by using regex.\ndef remove_uppercase(str1):\n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    pattern = r'[A-Z]+'\n    return re.sub(pattern, '', str1)\n\n# Test the function with an example\nprint(remove_uppercase(\"HELLO WORLD, how ARE YOU?\")) \n# Output: \"hello world, how are you?\" ",
        "generated_testcode": "assert remove_uppercase(\"Hello World\") == \"hEllo wrld\"\n",
        "test": "assert remove_uppercase('cAstyoUrFavoRitETVshoWs') == 'cstyoravoitshos'\nassert remove_uppercase('wAtchTheinTernEtrAdIo') == 'wtchheinerntrdo'\nassert remove_uppercase('VoicESeaRchAndreComMendaTionS') == 'oiceachndreomendaion'",
        "canonical_solution": "import re\r\ndef remove_uppercase(str1):\r\n  remove_upper = lambda text: re.sub('[A-Z]', '', text)\r\n  result =  remove_upper(str1)\r\n  return (result)"
    },
    {
        "number": 460,
        "prompt": "Write a python function to get the first element of each sublist.\ndef Extract(lst): \n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    return [sublist[0] for sublist in lst]\n\n# Example usage:\nlst = [['apple', 'banana', 'cherry', 'orange'], ['grape', 'kiwi', 'strawberry'], ['mango', 'kiwi', 'pear']]\nprint(Extract(lst))  # Output: ['apple', 'grape', 'mango']\n\n# Test your function with the following lists:\nlst1 = [['apple', 'banana', 'cherry', 'orange'], ['grape', 'kiwi', 'strawberry'], ['mango', 'kiwi', 'pear'], ['peach', 'pear', 'blueberry', 'watermelon'], ['apple', 'kiwi']]\nlst2 = ['apple', 'banana', 'cherry', 'orange', 'grape', 'kiwi', 'strawberry', 'mango', 'kiwi', 'pear', 'peach', 'pear', 'blueberry', 'watermelon', 'apple', 'kiwi']\nprint(Extract(lst1)) # Output: ['apple', 'grape', 'mango', 'peach', 'apple']\nprint(Extract(lst2)) # Output: ['apple', 'banana', 'cherry', 'orange', 'grape', 'kiwi', 'strawberry', 'mango', 'peach', 'pear', 'blueberry', 'watermelon', 'apple']\n\n\n# Test your function with an empty list\nlst",
        "generated_testcode": "assert Extract([[1,2,3],[4,5,6],[7,8,9]) == [1,4,7]\n",
        "test": "assert Extract([[1, 2], [3, 4, 5], [6, 7, 8, 9]]) == [1, 3, 6]\nassert Extract([[1,2,3],[4, 5]]) == [1,4]\nassert Extract([[9,8,1],[1,2]]) == [9,1]",
        "canonical_solution": "def Extract(lst): \r\n    return [item[0] for item in lst] "
    },
    {
        "number": 461,
        "prompt": "Write a python function to count the upper case characters in a given string.\ndef upper_ctr(str):\n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    count = 0\n    for i in str:\n        if i.isupper():\n            count += 1\n    return count\n\n#test the function\ns = \"Hello, World!\"\nprint(upper_ctr(s)) # Output: 2\ns = \"Python is awesome!\"\nprint(upper_ctr(s)) # Output: 4\ns = \"Code Golf\"\nprint(upper_ctr(s)) # Output: 2",
        "generated_testcode": "assert upper_ctr(\"Hello World\") == 2\n",
        "test": "assert upper_ctr('PYthon') == 1\nassert upper_ctr('BigData') == 1\nassert upper_ctr('program') == 0",
        "canonical_solution": "def upper_ctr(str):\r\n    upper_ctr = 0\r\n    for i in range(len(str)):\r\n          if str[i] >= 'A' and str[i] <= 'Z': upper_ctr += 1\r\n          return upper_ctr"
    },
    {
        "number": 462,
        "prompt": "Write a function to find all possible combinations of the elements of a given list.\ndef combinations_list(list1):\n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    result = []\n    def helper(curr_list, start, end):\n        if len(curr_list) == 1:\n            result.append(curr_list)\n            return\n        for i in range(start, end+1):\n            helper(curr_list + [list1[i]], i+1, end)\n    helper([], 0, len(list1)-1)\n    return result\n\n\n# Test cases\nprint(combinations_list([1,2,3]))\n# Output: [[], [1], [2], [1, 2], [3], [1, 3], [2, 3], [1, 2, 3]]\nprint(combinations_list([1,2,3,4])\n# Output: [[], [1], [2], [1, 2], [3], [1, 3], [2, 3], [1, 2, 3], [4], [1, 4], [2, 4], [1, 2, 4], [3, 4], [1, 3, 4], [2, 3, 4], [1, 2, 3, 4]]\nprint(combinations_list([1,2,3,4,5]))\n# Output: [[], [1], [2], [1, 2], [3], [1, 3], [2, 3], [1, 2, 3], [4], [1, 4], [2,",
        "generated_testcode": "assert combinations_list([1,2,3]) == [[1,2],[1,3],[2,3],[1,2,3]]\n",
        "test": "assert combinations_list(['orange', 'red', 'green', 'blue'])==[[], ['orange'], ['red'], ['red', 'orange'], ['green'], ['green', 'orange'], ['green', 'red'], ['green', 'red', 'orange'], ['blue'], ['blue', 'orange'], ['blue', 'red'], ['blue', 'red', 'orange'], ['blue', 'green'], ['blue', 'green', 'orange'], ['blue', 'green', 'red'], ['blue', 'green', 'red', 'orange']]\nassert combinations_list(['red', 'green', 'blue', 'white', 'black', 'orange'])==[[], ['red'], ['green'], ['green', 'red'], ['blue'], ['blue', 'red'], ['blue', 'green'], ['blue', 'green', 'red'], ['white'], ['white', 'red'], ['white', 'green'], ['white', 'green', 'red'], ['white', 'blue'], ['white', 'blue', 'red'], ['white', 'blue', 'green'], ['white', 'blue', 'green', 'red'], ['black'], ['black', 'red'], ['black', 'green'], ['black', 'green', 'red'], ['black', 'blue'], ['black', 'blue', 'red'], ['black', 'blue', 'green'], ['black', 'blue', 'green', 'red'], ['black', 'white'], ['black', 'white', 'red'], ['black', 'white', 'green'], ['black', 'white', 'green', 'red'], ['black', 'white', 'blue'], ['black', 'white', 'blue', 'red'], ['black', 'white', 'blue', 'green'], ['black', 'white', 'blue', 'green', 'red'], ['orange'], ['orange', 'red'], ['orange', 'green'], ['orange', 'green', 'red'], ['orange', 'blue'], ['orange', 'blue', 'red'], ['orange', 'blue', 'green'], ['orange', 'blue', 'green', 'red'], ['orange', 'white'], ['orange', 'white', 'red'], ['orange', 'white', 'green'], ['orange', 'white', 'green', 'red'], ['orange', 'white', 'blue'], ['orange', 'white', 'blue', 'red'], ['orange', 'white', 'blue', 'green'], ['orange', 'white', 'blue', 'green', 'red'], ['orange', 'black'], ['orange', 'black', 'red'], ['orange', 'black', 'green'], ['orange', 'black', 'green', 'red'], ['orange', 'black', 'blue'], ['orange', 'black', 'blue', 'red'], ['orange', 'black', 'blue', 'green'], ['orange', 'black', 'blue', 'green', 'red'], ['orange', 'black', 'white'], ['orange', 'black', 'white', 'red'], ['orange', 'black', 'white', 'green'], ['orange', 'black', 'white', 'green', 'red'], ['orange', 'black', 'white', 'blue'], ['orange', 'black', 'white', 'blue', 'red'], ['orange', 'black', 'white', 'blue', 'green'], ['orange', 'black', 'white', 'blue', 'green', 'red']]\nassert combinations_list(['red', 'green', 'black', 'orange'])==[[], ['red'], ['green'], ['green', 'red'], ['black'], ['black', 'red'], ['black', 'green'], ['black', 'green', 'red'], ['orange'], ['orange', 'red'], ['orange', 'green'], ['orange', 'green', 'red'], ['orange', 'black'], ['orange', 'black', 'red'], ['orange', 'black', 'green'], ['orange', 'black', 'green', 'red']]",
        "canonical_solution": "def combinations_list(list1):\r\n    if len(list1) == 0:\r\n        return [[]]\r\n    result = []\r\n    for el in combinations_list(list1[1:]):\r\n        result += [el, el+[list1[0]]]\r\n    return result"
    },
    {
        "number": 463,
        "prompt": "Write a function to find the maximum product subarray of the given array.\ndef max_subarray_product(arr):\n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    if not arr:\n        return 0\n\n    max_product = arr[0]\n    min_product = arr[0]\n    result = arr[0]\n\n    for i in range(1, len(arr)):\n        if arr[i] < 0:\n            max_product, min_product = min_product, max_product\n        max_product = max(arr[i], max_product * arr[i])\n        min_product = min(arr[i], min_product * arr[i])\n        result = max(result, max_product)\n\n    return result\n\n\n# Test cases\nprint(max_subarray_product([2, -1, -3, 4, -1, -2, 1, 5, 6, -3])) # Output: 12\nprint(max_subarray_product([-2, 0, -3, 1, -2, 4])) # Output: 6\nprint(max_subarray_product([-1, -2])) # Output: 0\nprint(max_subarray_product([-1, -2, 0, 1])) # Output: 0\nprint(max_subarray_product([-1])) # Output: -1\nprint(max_subarray_product([1, -2, 3, 5, 2])) # Output: 30\nprint(max_subarray_product([])) # Output: 0\nprint(max_subarray_product([1, 2,",
        "generated_testcode": "assert max_subarray_product([-10, -1, 2, 3, 0, -5, 7, 10, -2]) == 50\n",
        "test": "assert max_subarray_product([1, -2, -3, 0, 7, -8, -2]) == 112\nassert max_subarray_product([6, -3, -10, 0, 2]) == 180 \nassert max_subarray_product([-2, -40, 0, -2, -3]) == 80",
        "canonical_solution": "def max_subarray_product(arr):\r\n\tn = len(arr)\r\n\tmax_ending_here = 1\r\n\tmin_ending_here = 1\r\n\tmax_so_far = 0\r\n\tflag = 0\r\n\tfor i in range(0, n):\r\n\t\tif arr[i] > 0:\r\n\t\t\tmax_ending_here = max_ending_here * arr[i]\r\n\t\t\tmin_ending_here = min (min_ending_here * arr[i], 1)\r\n\t\t\tflag = 1\r\n\t\telif arr[i] == 0:\r\n\t\t\tmax_ending_here = 1\r\n\t\t\tmin_ending_here = 1\r\n\t\telse:\r\n\t\t\ttemp = max_ending_here\r\n\t\t\tmax_ending_here = max (min_ending_here * arr[i], 1)\r\n\t\t\tmin_ending_here = temp * arr[i]\r\n\t\tif (max_so_far < max_ending_here):\r\n\t\t\tmax_so_far = max_ending_here\r\n\tif flag == 0 and max_so_far == 0:\r\n\t\treturn 0\r\n\treturn max_so_far"
    },
    {
        "number": 464,
        "prompt": "Write a function to check if all values are same in a dictionary.\ndef check_value(dict, n):\n",
        "checkpoint": "7B",
        "pass": 4,
        "correct": true,
        "answer": "    val = list(dict.values())[0]\n    for i in list(dict.values()):\n        if i != val:\n            return False\n    return val\n\n# Test\nd1 = {'a': 1, 'b': 1, 'c': 1, 'd': 1}\nd2 = {'a': 1, 'b': 2, 'c': 2, 'd': 2}\nd3 = {'a': 1, 'b': 2, 'c': 3, 'd': 4}\n\nprint(check_value(d1, 1)) # True\nprint(check_value(d2, 1)) # False\nprint(check_value(d3, 2)) # False\n\n\n# Explanation:\n# In the first dictionary, all values are 1, so the function returns True\n# In the second dictionary, not all values are 1, so the function returns False\n# In the third dictionary, not all values are 2 or 3, so the function returns False ",
        "generated_testcode": "assert check_value({\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1}, 1) == True\n",
        "test": "assert check_value({'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12},10)==False\nassert check_value({'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12},12)==True\nassert check_value({'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12},5)==False",
        "canonical_solution": "def check_value(dict, n):\r\n    result = all(x == n for x in dict.values()) \r\n    return result"
    },
    {
        "number": 465,
        "prompt": "Write a function to drop empty items from a given dictionary.\ndef drop_empty(dict1):\n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    new_dict = {}\n    for key, value in dict1.items():\n        if value:\n            new_dict[key] = value\n    return new_dict\n\n\n# Test the function\ndict1 = {'a': 'apple', 'b': '', 'c': 0, 'd': None, 'e': [], 'f': {}}\nprint(drop_empty(dict1))  # Output: {'a': 'apple'}\n\ndict2 = {'x': 'x', 'y': None, 'z': '', 't': False}\nprint(drop_empty(dict2))  # Output: {'x': 'x'}\n\ndict3 = {'p': '', 'q': [], 'r': 0}\nprint(drop_empty(dict3))  # Output: {}\n\n",
        "generated_testcode": "assert drop_empty({\"a\": 1, \"b\": \"\", \"c\": None, \"d\": [], \"e\": 0, \"f\": {}}) == {\"a\": 1}\n",
        "test": "assert drop_empty({'c1': 'Red', 'c2': 'Green', 'c3':None})=={'c1': 'Red', 'c2': 'Green'}\nassert drop_empty({'c1': 'Red', 'c2': None, 'c3':None})=={'c1': 'Red'}\nassert drop_empty({'c1': None, 'c2': 'Green', 'c3':None})=={ 'c2': 'Green'}",
        "canonical_solution": "def drop_empty(dict1):\r\n  dict1 = {key:value for (key, value) in dict1.items() if value is not None}\r\n  return dict1"
    },
    {
        "number": 466,
        "prompt": "Write a function to find the peak element in the given array.\ndef find_peak_util(arr, low, high, n): \n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    if low == high: \n        return low \n    if low + 1 == high: \n        return low \n    mid = (low + high) // 2\n    if arr[mid] > arr[mid + 1]: \n        return find_peak_util(arr, low, mid, n) \n    return find_peak_util(arr, mid + 1, high, n) \n   \ndef find_peak(arr): \n    n = len(arr) \n    return find_peak_util(arr, 0, n - 1, n) \n\n\n# Driver code \narr = [1, 3, 2, 5, 6, 1, 2, 8, 4, 3, 7, 9, 10] \nn = len(arr) \nprint(\"Peak element is at index\", find_peak(arr)) ",
        "generated_testcode": "assert find_peak_util([1, 2, 3, 1], 0, 3) == 2\n",
        "test": "assert find_peak([1, 3, 20, 4, 1, 0], 6) == 2\nassert find_peak([2, 3, 4, 5, 6], 5) == 4\nassert find_peak([8, 9, 11, 12, 14, 15], 6) == 5 ",
        "canonical_solution": "def find_peak_util(arr, low, high, n): \r\n\tmid = low + (high - low)/2\r\n\tmid = int(mid) \r\n\tif ((mid == 0 or arr[mid - 1] <= arr[mid]) and\r\n\t\t(mid == n - 1 or arr[mid + 1] <= arr[mid])): \r\n\t\treturn mid \r\n\telif (mid > 0 and arr[mid - 1] > arr[mid]): \r\n\t\treturn find_peak_util(arr, low, (mid - 1), n) \r\n\telse: \r\n\t\treturn find_peak_util(arr, (mid + 1), high, n) \r\ndef find_peak(arr, n): \r\n\treturn find_peak_util(arr, 0, n - 1, n) "
    },
    {
        "number": 467,
        "prompt": "Write a python function to convert decimal number to octal number.\ndef decimal_to_Octal(deciNum):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": true,
        "answer": "    octalNum = ''\n    while deciNum > 0:\n        remainder = deciNum % 8\n        deciNum = deciNum // 8\n        octalNum = str(remainder) + octalNum\n    return octalNum\n\n# Test the function\ndecimal_to_Octal(45)\ndecimal_to_Octal(50)\ndecimal_to_Octal(10)\ndecimal_to_Octal(22)\ndecimal_to_Octal(123)\ndecimal_to_Octal(77)\ndecimal_to_Octal(1024)\ndecimal_to_Octal(85)\ndecimal_to_Octal(12345)\ndecimal_to_Octal(3212)\ndecimal_to_Octal(234567)\n",
        "generated_testcode": "assert decimal_to_Octal(10) == '12'\n",
        "test": "assert decimal_to_Octal(10) == 12\nassert decimal_to_Octal(2) == 2\nassert decimal_to_Octal(33) == 41",
        "canonical_solution": "def decimal_to_Octal(deciNum):\r\n    octalNum = 0\r\n    countval = 1;\r\n    dNo = deciNum;\r\n    while (deciNum!= 0):\r\n        remainder= deciNum % 8;\r\n        octalNum+= remainder*countval;\r\n        countval= countval*10;\r\n        deciNum //= 8; \r\n    return (octalNum)"
    },
    {
        "number": 468,
        "prompt": "Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\ndef max_product(arr, n ): \n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    if n == 0:\n        return 0\n    if n == 1:\n        return arr[0]\n\n    max_product = arr[0]\n    max_so_far = arr[0]\n    min_so_far = arr[0]\n    for i in range(1, n):\n        if arr[i] > max_so_far:\n            max_so_far = arr[i]\n        elif arr[i] < max_so_far:\n            max_product = max(max_product, max_so_far*arr[i])\n            min_so_far = min(min_so_far, arr[i])\n        else:\n            min_so_far = arr[i]\n    max_product = max(max_product, max_so_far*min_so_far)\n    return max_product\n\n#Testing the function\narr = [10, 20, 30, 5, 100, 60, 50, 70]\nn = len(arr)\nprint(\"Maximum product of an increasing subsequence is:\", max_product(arr, n))\n\n#Output: Maximum product of an increasing subsequence is: 160000 ",
        "generated_testcode": "assert max_product([1, 10, -5, 2, 7, 2, 3, -6, 8, 1], 6) == 320\n",
        "test": "assert max_product([3, 100, 4, 5, 150, 6], 6) == 45000 \nassert max_product([4, 42, 55, 68, 80], 5) == 50265600\nassert max_product([10, 22, 9, 33, 21, 50, 41, 60], 8) == 21780000 ",
        "canonical_solution": "def max_product(arr, n ): \r\n\tmpis =[0] * (n) \r\n\tfor i in range(n): \r\n\t\tmpis[i] = arr[i] \r\n\tfor i in range(1, n): \r\n\t\tfor j in range(i): \r\n\t\t\tif (arr[i] > arr[j] and\r\n\t\t\t\t\tmpis[i] < (mpis[j] * arr[i])): \r\n\t\t\t\t\t\tmpis[i] = mpis[j] * arr[i] \r\n\treturn max(mpis)"
    },
    {
        "number": 469,
        "prompt": "Write a function to find the maximum profit earned from a maximum of k stock transactions\ndef max_profit(price, k):\n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    if not price or k == 0 or len(price) <= 1:\n        return 0\n    if k >= len(price) // 2:\n        return max_profit_helper(price)\n    else:\n        return max_profit_k_transactions(price, k)\n\n\ndef max_profit_helper(price):\n    profit = 0\n    for i in range(1, len(price)):\n        profit += max(0, price[i] - price[i - 1])\n    return profit\n\ndef max_profit_k_transactions(price, k):\n    n = len(price)\n    dp = [[0] * n for _ in range(k + 1)]\n    for i in range(1, k + 1):\n        max_buy = -price[0]\n        for j in range(1, n):\n            max_profit = 0\n            for m in range(j):\n                max_profit = max(max_profit, dp[i - 1][m] - price[j])\n            dp[i][j] = max(max_profit, max_buy + price[j])\n            max_buy = max(max_buy, dp[i - 1][j - 1] - price[j])\n    return dp[k][n - 1]\n\n\n# Test cases\nprint(max_profit([10, 22, 5, ",
        "generated_testcode": "assert max_profit([10, 22, 5, 75, 65, 30, 60, 80], 2) == 87\n",
        "test": "assert max_profit([1, 5, 2, 3, 7, 6, 4, 5], 3) == 10\nassert max_profit([2, 4, 7, 5, 4, 3, 5], 2) == 7\nassert max_profit([10, 6, 8, 4, 2], 2) == 2",
        "canonical_solution": "def max_profit(price, k):\r\n    n = len(price)\r\n    final_profit = [[None for x in range(n)] for y in range(k + 1)]\r\n    for i in range(k + 1):\r\n        for j in range(n):\r\n            if i == 0 or j == 0:\r\n                final_profit[i][j] = 0\r\n            else:\r\n                max_so_far = 0\r\n                for x in range(j):\r\n                    curr_price = price[j] - price[x] + final_profit[i-1][x]\r\n                    if max_so_far < curr_price:\r\n                        max_so_far = curr_price\r\n                final_profit[i][j] = max(final_profit[i][j-1], max_so_far)\r\n    return final_profit[k][n-1]"
    },
    {
        "number": 470,
        "prompt": "Write a function to find the pairwise addition of the elements of the given tuples.\ndef add_pairwise(test_tup):\n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    sum_list = []\n    for i in range(len(test_tup)):\n        for j in range(i, len(test_tup)):\n            if i != j:\n                sum_list.append(test_tup[i] + test_tup[j])\n    return sum_list\n\n\n# Testing\nprint(add_pairwise((1, 2, 3, 4, 5)) # Output: [3, 4, 5, 5, 6, 6, 7]\nprint(add_pairwise((5, 2, 9, 3, 1, 8, 7)) # Output: [7, 11, 10, 11, 10, 11, 11, 12, 12, 13]\nprint(add_pairwise((4, 8, 6, 2, 9, 0, 1, 7)) # Output: [4, 10, 6, 7, 8, 9, 9, 10, 11, 10, 10, 11, 9, 9, 11, 10, 12]",
        "generated_testcode": "assert add_pairwise((1,2,3,4,5)) == (3, 5, 7, 9)\n",
        "test": "assert add_pairwise((1, 5, 7, 8, 10)) == (6, 12, 15, 18)\nassert add_pairwise((2, 6, 8, 9, 11)) == (8, 14, 17, 20)\nassert add_pairwise((3, 7, 9, 10, 12)) == (10, 16, 19, 22)",
        "canonical_solution": "def add_pairwise(test_tup):\r\n  res = tuple(i + j for i, j in zip(test_tup, test_tup[1:]))\r\n  return (res) "
    },
    {
        "number": 471,
        "prompt": "Write a python function to find remainder of array multiplication divided by n.\ndef find_remainder(arr, lens, n): \n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    res = 0\n    for i in range(lens):\n        res += arr[i]\n    return res%n\n\n# example\narr = [1,2,3,4,5]\nlens = len(arr)\nn = 6\nprint(find_remainder(arr, lens, n)) # output: 1\n\narr = [1,2,3,4,5,6]\nlens = len(arr)\nn = 5\nprint(find_remainder(arr, lens, n)) # output: 1\n",
        "generated_testcode": "assert find_remainder([1, 2, 3, 4, 5], 5, 3) == 1\n",
        "test": "assert find_remainder([ 100, 10, 5, 25, 35, 14 ],6,11) ==9\nassert find_remainder([1,1,1],3,1) == 0\nassert find_remainder([1,2,1],3,2) == 0",
        "canonical_solution": "def find_remainder(arr, lens, n): \r\n    mul = 1\r\n    for i in range(lens):  \r\n        mul = (mul * (arr[i] % n)) % n \r\n    return mul % n "
    },
    {
        "number": 472,
        "prompt": "Write a python function to check whether the given list contains consecutive numbers or not.\ndef check_Consecutive(l): \n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    for i in range(1,len(l)):\n        if l[i]-l[i-1]>1:\n            return False\n    return True\n\n#Test the function\nl1 = [1,2,3,4,5,6,7,8,9]\nl2 = [1,2,3,5,6,8,10,11]\nprint(check_Consecutive(l1))\nprint(check_Consecutive(l2))",
        "generated_testcode": "assert check_Consecutive([1,2,3,4,5,6,7,8,9]) == True\n",
        "test": "assert check_Consecutive([1,2,3,4,5]) == True\nassert check_Consecutive([1,2,3,5,6]) == False\nassert check_Consecutive([1,2,1]) == False",
        "canonical_solution": "def check_Consecutive(l): \r\n    return sorted(l) == list(range(min(l),max(l)+1)) "
    },
    {
        "number": 473,
        "prompt": "Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\ndef tuple_intersection(test_list1, test_list2):\n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    result = []\n    for element in test_list1:\n        if element in test_list2 and element not in result:\n            result.append(element)\n    return result\n\n# Test case\ntest_list1 = (1, 2, 3, 4, 5, 6, 7)\ntest_list2 = (4, 7, 8, 9, 10, 11, 2)\nprint(tuple_intersection(test_list1, test_list2)) # Output: (4, 7)\n\ntest_list3 = (10, 20, 30, 40, 50, 60)\ntest_list4 = (50, 60, 70, 80, 90, 100)\nprint(tuple_intersection(test_list3, test_list4)) # Output: (50, 60)\n\ntest_list5 = (\"apple\", \"banana\", \"cherry\", \"orange\", \"grape\")\ntest_list6 = (\"orange\", \"kiwi\", \"apple\", \"banana\", \"grapefruit\")\nprint(tuple_intersection(test_list5, test_list6)) # Output: ('apple', 'banana', 'grape')\n\ntest_list7 = (100, 200, 300, 400, 500)\ntest_list8 = (500, 6",
        "generated_testcode": "assert tuple_intersection((1,2,3,4,5,6,7),(4,5,6,7,8,9) == (4,5,6))\n",
        "test": "assert tuple_intersection([(3, 4), (5, 6), (9, 10), (4, 5)] , [(5, 4), (3, 4), (6, 5), (9, 11)]) == {(4, 5), (3, 4), (5, 6)}\nassert tuple_intersection([(4, 1), (7, 4), (11, 13), (17, 14)] , [(1, 4), (7, 4), (16, 12), (10, 13)]) == {(4, 7), (1, 4)}\nassert tuple_intersection([(2, 1), (3, 2), (1, 3), (1, 4)] , [(11, 2), (2, 3), (6, 2), (1, 3)]) == {(1, 3), (2, 3)}",
        "canonical_solution": "def tuple_intersection(test_list1, test_list2):\r\n  res = set([tuple(sorted(ele)) for ele in test_list1]) & set([tuple(sorted(ele)) for ele in test_list2])\r\n  return (res)"
    },
    {
        "number": 474,
        "prompt": "Write a function to replace characters in a string.\ndef replace_char(str1,ch,newch):\n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    return str1.replace(ch,newch)\n\n#Test the function with an example\nprint(replace_char(\"hello world\",\"o\",\"O\")) # Output: hEllo wrld\n\n#Test the function with a string containing multiple occurrence of the character\nprint(replace_char(\"hello world\",\"l\",\"L\")) # Output: hElLo worLd\n\n#Test the function with a string not containing the character\nprint(replace_char(\"welcome\",\"p\",\"P\")) # Output: welcome\n\n#Test the function with an empty string\nprint(replace_char(\"\",\"l\",\"L\")) # Output: ",
        "generated_testcode": "assert replace_char(\"hello world\",\"l\",\"L\") == \"heLLo worLd\"\n",
        "test": "assert replace_char(\"polygon\",'y','l')==(\"pollgon\")\nassert replace_char(\"character\",'c','a')==(\"aharaater\")\nassert replace_char(\"python\",'l','a')==(\"python\")",
        "canonical_solution": "def replace_char(str1,ch,newch):\r\n str2 = str1.replace(ch, newch)\r\n return str2"
    },
    {
        "number": 475,
        "prompt": "Write a function to sort counter by value.\ndef sort_counter(dict1):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": true,
        "answer": "    sorted_counter = sorted(dict1.items(), key=lambda x: x[1], reverse=True)\n    return dict(sorted_counter)\n\n#Testing\ncounts = {'apple': 5, 'banana': 2, 'orange': 3, 'mango': 7, 'pear': 1, 'grapes': 4, 'peach': 3}\nprint(sort_counter(counts))\n# Output: {'mango': 7, 'orange': 3, 'apple': 5, 'peach': 3, 'banana': 2, 'grapes': 4}\n\ncounts = {'apple': 1, 'banana': 1, 'orange': 2, 'mango': 2, 'pear': 3, 'grapes': 3}\nprint(sort_counter(counts))\n# Output: {'pear': 3, 'apple': 1, 'banana': 1, 'mango': 2, 'orange': 2, 'grapes': 3}\n\ncounts = {'apple': 7, 'banana': 4, 'orange': 6, 'mango': 2, 'pear': 3, 'grapes': 5}\nprint(sort_counter(counts))\n# Output: {'orange': 6, 'mango': 2, 'apple': 7, 'pear': 3, 'banana': 4, 'grapes",
        "generated_testcode": "assert sort_counter({\"a\": 3, \"b\": 1, \"c\": 2, \"d\": 2}) == {\"c\": 2, \"b\": 1, \"a\": 3, \"d\": 2}\n",
        "test": "assert sort_counter({'Math':81, 'Physics':83, 'Chemistry':87})==[('Chemistry', 87), ('Physics', 83), ('Math', 81)]\nassert sort_counter({'Math':400, 'Physics':300, 'Chemistry':250})==[('Math', 400), ('Physics', 300), ('Chemistry', 250)]\nassert sort_counter({'Math':900, 'Physics':1000, 'Chemistry':1250})==[('Chemistry', 1250), ('Physics', 1000), ('Math', 900)]",
        "canonical_solution": "from collections import Counter\r\ndef sort_counter(dict1):\r\n x = Counter(dict1)\r\n sort_counter=x.most_common()\r\n return sort_counter"
    },
    {
        "number": 476,
        "prompt": "Write a python function to find the sum of the largest and smallest value in a given array.\ndef big_sum(nums):\n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    nums.sort()\n    return nums[-1]+nums[0]\n\n# test the function\nnums = [5, 8, 2, 1, 7, 3, 9, 4]\nprint(big_sum(nums)) # Output: 17\n\nnums = [1, 2, 3, 4, 5, 6, 7, 8, 9]\nprint(big_sum(nums)) # Output: 17\n\nnums = [10, 20, 30, 40, 50, 60, 70, 80, 90]\nprint(big_sum(nums)) # Output: 10\n\nnums = [-5, -2, -8, -1, -7, -3, -9]\nprint(big_sum(nums)) # Output: 5",
        "generated_testcode": "assert big_sum([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 17\n",
        "test": "assert big_sum([1,2,3]) == 4\nassert big_sum([-1,2,3,4]) == 3\nassert big_sum([2,3,6]) == 8",
        "canonical_solution": "def big_sum(nums):\r\n      sum= max(nums)+min(nums)\r\n      return sum"
    },
    {
        "number": 477,
        "prompt": "Write a python function to convert the given string to lower case.\ndef is_lower(string):\n",
        "checkpoint": "7B",
        "pass": 4,
        "correct": true,
        "answer": "    #check if the string is lowercase\n    if string.islower():\n        return string\n    else:\n        return string.lower()\n\n#test the function\nprint(is_lower(\"Hello World\")) # should print \"hello world\"\nprint(is_lower(\"HELLO WORLD\")) # should print \"hello world\"\nprint(is_lower(\"Hello world\")) # should print \"hello world\"\nprint(is_lower(\"HELLO WORLD\")) # should print \"hello world\"",
        "generated_testcode": "assert is_lower(\"Hello World\") == \"hello world\"\n",
        "test": "assert is_lower(\"InValid\") == \"invalid\"\nassert is_lower(\"TruE\") == \"true\"\nassert is_lower(\"SenTenCE\") == \"sentence\"",
        "canonical_solution": "def is_lower(string):\r\n  return (string.lower())"
    },
    {
        "number": 478,
        "prompt": "Write a function to remove lowercase substrings from a given string.\ndef remove_lowercase(str1):\n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    # Initialize an empty result string\n    result = \"\"\n    # Loop through the string\n    for i in range(len(str1)):\n        # Check if the character is uppercase\n        if str1[i].isupper():\n            # If it is uppercase, append it to the result string\n            result += str1[i]\n    # Return the result string\n    return result\n\n# Test the function\nprint(remove_lowercase(\"HelloWorld\"))  # Output: \"HW\"\nprint(remove_lowercase(\"HELLOworld\"))  # Output: \"HW\"\nprint(remove_lowercase(\"HELLOWORLD\"))  # Output: \"HW\"\nprint(remove_lowercase(\"heLLo\"))  # Output: \"\"\n",
        "generated_testcode": "assert remove_lowercase(\"Hello World\") == \"Hll Wrld\"\n",
        "test": "assert remove_lowercase(\"PYTHon\")==('PYTH')\nassert remove_lowercase(\"FInD\")==('FID')\nassert remove_lowercase(\"STRinG\")==('STRG')",
        "canonical_solution": "import re\r\ndef remove_lowercase(str1):\r\n remove_lower = lambda text: re.sub('[a-z]', '', text)\r\n result =  remove_lower(str1)\r\n return result"
    },
    {
        "number": 479,
        "prompt": "Write a python function to find the first digit of a given number.\ndef first_Digit(n) :  \n",
        "checkpoint": "7B",
        "pass": 9,
        "correct": true,
        "answer": "    while n != 0 :  \n        if n < 10 :  \n            return n  \n        else :  \n            n //= 10  \n    return 0  \n\n# Driver code  \nprint(first_Digit(12345))  ",
        "generated_testcode": "assert first_Digit(12345) == 1\n",
        "test": "assert first_Digit(123) == 1\nassert first_Digit(456) == 4\nassert first_Digit(12) == 1",
        "canonical_solution": "def first_Digit(n) :  \r\n    while n >= 10:  \r\n        n = n / 10; \r\n    return int(n) "
    },
    {
        "number": 480,
        "prompt": "Write a python function to find the maximum occurring character in a given string.\ndef get_max_occuring_char(str1):\n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    char_freq = {}\n    max_char = ''\n    max_freq = 0\n    for char in str1:\n        if char in char_freq:\n            char_freq[char] += 1\n        else:\n            char_freq[char] = 1\n        if char_freq[char] > max_freq:\n            max_freq = char_freq[char]\n            max_char = char\n    return max_char\n\n\n# Test the function\nstr1 = \"hello world\"\nprint(get_max_occuring_char(str1))  # Output: l\n\nstr2 = \"the quick brown fox jumps over the lazy dog\"\nprint(get_max_occuring_char(str2))  # Output: e\nstr3 = \"aabbcdd\"\nprint(get_max_occuring_char(str3))  # Output: a",
        "generated_testcode": "assert get_max_occuring_char(\"hello world\") == \"l\"\n",
        "test": "assert get_max_occuring_char(\"data\") == \"a\"\nassert get_max_occuring_char(\"create\") == \"e\"\nassert get_max_occuring_char(\"brilliant girl\") == \"i\"",
        "canonical_solution": "def get_max_occuring_char(str1):\r\n  ASCII_SIZE = 256\r\n  ctr = [0] * ASCII_SIZE\r\n  max = -1\r\n  ch = ''\r\n  for i in str1:\r\n    ctr[ord(i)]+=1;\r\n  for i in str1:\r\n    if max < ctr[ord(i)]:\r\n      max = ctr[ord(i)]\r\n      ch = i\r\n  return ch"
    },
    {
        "number": 481,
        "prompt": "Write a function to determine if there is a subset of the given set with sum equal to the given sum.\ndef is_subset_sum(set, n, sum):\n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    if sum == 0:\n        return True\n    if not set:\n        return False\n    if set[0] > sum:\n        return False\n    return is_subset_sum(set[1:], sum) or is_subset_sum(set, sum - set[0]) or is_subset_sum(set[1:], sum)\n\n\nset1 = [1, 2, 3, 4, 5, 6, 7, 8, 9]\nsum1 = 10\nprint(is_subset_sum(set1, sum1))\n",
        "generated_testcode": "assert is_subset_sum([1, 2, 3, 4, 5, 6, 7, 8, 9], 15) == True\n",
        "test": "assert is_subset_sum([3, 34, 4, 12, 5, 2], 6, 9) == True\nassert is_subset_sum([3, 34, 4, 12, 5, 2], 6, 30) == False\nassert is_subset_sum([3, 34, 4, 12, 5, 2], 6, 15) == True",
        "canonical_solution": "def is_subset_sum(set, n, sum):\r\n\tif (sum == 0):\r\n\t\treturn True\r\n\tif (n == 0):\r\n\t\treturn False\r\n\tif (set[n - 1] > sum):\r\n\t\treturn is_subset_sum(set, n - 1, sum)\r\n\treturn is_subset_sum(set, n-1, sum) or is_subset_sum(set, n-1, sum-set[n-1])"
    },
    {
        "number": 482,
        "prompt": "Write a function to find sequences of one upper case letter followed by lower case letters in the given string by using regex.\ndef match(text): \n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    import re\n    pattern = r'[A-Z][a-z]+'\n    matches = re.findall(pattern, text)\n    return matches\n\n#test the function\ntext = \"This is a mixed string with UPPER AND lower CASE letters\"\nprint(match(text)) # should return ['UPPER', 'lower']\ntext = \"These are Mixed strings WITH mixed CASE\"\nprint(match(text)) # should return ['Mixed', 'mixed']\ntext = \"ThiS is An exaMple of SequENce\"\nprint(match(text)) # should return ['ExaMple', 'SequENce']\ntext = \"The quick brown fox jumps over the lazy dog\"\nprint(match(text)) # should return []\n\n#Alternate solution using split() and join()\ndef match(text):\n    words = text.split()\n    result = []\n    for word in words:\n        if len(word) > 1 and word[0].isupper() and word[1:].islower():\n            result.append(word)\n    return result\n\n#test the function\ntext = \"This is a mixed string with UPPER AND lower CASE letters\"\nprint(match(text)) # should return ['UPPER', 'lower']\ntext = \"These are Mixed strings WITH mixed CASE\"\nprint(match(text)) # should return ['Mixed', 'mixed']\ntext = \"ThiS is An exaMple of SequENce\"\nprint(match(text",
        "generated_testcode": "assert match(\"Hello World\") == \"H\"\n",
        "test": "assert match(\"Geeks\") == 'Yes'\nassert match(\"geeksforGeeks\") == 'Yes'\nassert match(\"geeks\") == 'No'",
        "canonical_solution": "import re \r\ndef match(text): \r\n\t\tpattern = '[A-Z]+[a-z]+$'\r\n\t\tif re.search(pattern, text): \r\n\t\t\t\treturn('Yes') \r\n\t\telse: \r\n\t\t\t\treturn('No') "
    },
    {
        "number": 483,
        "prompt": "Write a python function to find the first natural number whose factorial is divisible by x.\ndef first_Factorial_Divisible_Number(x): \n",
        "checkpoint": "7B",
        "pass": 3,
        "correct": true,
        "answer": "    i = 1\n    factorial = 1\n    while factorial % x != 0: \n        i += 1\n        factorial = factorial * i\n    return i \n\n#test the function \nprint(first_Factorial_Divisible_Number(10)) #Output: 5 \nprint(first_Factorial_Divisible_Number(20)) #Output: 10 ",
        "generated_testcode": "assert first_Factorial_Divisible_Number(10) == 5 # 5! = 120, 120 is the first number whose factorial is divisible by 10\n",
        "test": "assert first_Factorial_Divisible_Number(10) == 5\nassert first_Factorial_Divisible_Number(15) == 5\nassert first_Factorial_Divisible_Number(5) == 4",
        "canonical_solution": "def first_Factorial_Divisible_Number(x): \r\n    i = 1;\r\n    fact = 1; \r\n    for i in range(1,x): \r\n        fact = fact * i \r\n        if (fact % x == 0): \r\n            break\r\n    return i "
    },
    {
        "number": 484,
        "prompt": "Write a function to remove the matching tuples from the given two tuples.\ndef remove_matching_tuple(test_list1, test_list2):\n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    result = []\n    for tup1 in test_list1:\n        if tup1 not in test_list2:\n            result.append(tup1)\n    return result\n\n# Test the function\ntest_list1 = [(1, 2), (3, 4), (5, 6), (7, 8), (9, 10), (11, 12), (13, 14)]\ntest_list2 = [(5, 6), (7, 8), (15, 16)]\nprint(remove_matching_tuple(test_list1, test_list2)) ",
        "generated_testcode": "assert remove_matching_tuple([(1,2,3),(4,5,6),(7,8,9),(1,2,3),(4,5,6),(7,8,9),(10,11,12),(1,2,3),(4,5,6),(7,8,9)], [(1,2,3),(4,5,6),(7,8,9])] == [(10,11,12)], \"Test case 1 failed\"\n",
        "test": "assert remove_matching_tuple([('Hello', 'dude'), ('How', 'are'), ('you', '?')], [('Hello', 'dude'), ('How', 'are')]) == [('you', '?')]\nassert remove_matching_tuple([('Part', 'of'), ('the', 'journey'), ('is ', 'end')], [('Journey', 'the'), ('is', 'end')]) == [('Part', 'of'), ('the', 'journey'), ('is ', 'end')]\nassert remove_matching_tuple([('Its', 'been'), ('a', 'long'), ('day', 'without')], [('a', 'long'), ('my', 'friend')]) == [('Its', 'been'), ('day', 'without')]",
        "canonical_solution": "def remove_matching_tuple(test_list1, test_list2):\r\n  res = [sub for sub in test_list1 if sub not in test_list2]\r\n  return (res) "
    },
    {
        "number": 485,
        "prompt": "Write a function to find the largest palindromic number in the given array.\ndef is_palindrome(n) : \n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    n = str(n)\n    if n == n[::-1] : \n        return True\n    else : \n        return False\n\ndef largest_palindrome(arr) : \n    max_palindrome = 0\n    for i in range(len(arr)) : \n        for j in range(len(arr)) : \n            for k in range(1000,999) : \n                if arr[i] * arr[j] * k < max_palindrome : \n                    break\n                if is_palindrome(arr[i] * arr[j] * k) : \n                    max_palindrome = max(max_palindrome, arr[i] * arr[j] * k)\n    return max_palindrome\n\n\n# Test the function \narr = [123, 456, 789, 121, 122, 221, 788, 999, 135, 551]\nprint(\"Largest palindrome number is : \", largest_palindrome(arr))\n\n# Output : Largest palindrome number is : 9009\n\n\n# Test the function with negative numbers\narr = [123, -456, 789, 121, 122, -221, 78, -99, 135, -551]\nprint",
        "generated_testcode": "assert is_palindrome(121) == True\n",
        "test": "assert largest_palindrome([1, 232, 54545, 999991], 4) == 54545\nassert largest_palindrome([1, 2, 3, 4, 5, 50], 6) == 5\nassert largest_palindrome([1, 3, 7, 9, 45], 5)  == 9",
        "canonical_solution": "def is_palindrome(n) : \r\n\tdivisor = 1\r\n\twhile (n / divisor >= 10) : \r\n\t\tdivisor *= 10\r\n\twhile (n != 0) : \r\n\t\tleading = n // divisor \r\n\t\ttrailing = n % 10\r\n\t\tif (leading != trailing) : \r\n\t\t\treturn False\r\n\t\tn = (n % divisor) // 10\r\n\t\tdivisor = divisor // 100\r\n\treturn True\r\ndef largest_palindrome(A, n) : \r\n\tA.sort() \r\n\tfor i in range(n - 1, -1, -1) : \r\n\t\tif (is_palindrome(A[i])) : \r\n\t\t\treturn A[i] \r\n\treturn -1"
    },
    {
        "number": 486,
        "prompt": "Write a function to compute binomial probability for the given number.\ndef nCr(n, r): \n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": true,
        "answer": "    if r > n: \n        return 0\n    else: \n        return math.factorial(n) // (math.factorial(r) * math.factorial(n-r)) \n  \ndef binomial_probability(n, k, p, q): \n    return nCr(n, k) * (p**k) * (q**(n-k) * 100) \n  \n# Test the function \nn = 10\np = 0.5\nq = 1 - p \nk = 6\nprint(binomial_probability(n, k, p, q)) ",
        "generated_testcode": "assert nCr(5, 2) == 10\n",
        "test": "assert binomial_probability(10, 5, 1.0/3) == 0.13656454808718185\nassert binomial_probability(11, 6, 2.0/4) == 0.2255859375\nassert binomial_probability(12, 7, 3.0/5) == 0.227030335488",
        "canonical_solution": "def nCr(n, r): \r\n\tif (r > n / 2): \r\n\t\tr = n - r \r\n\tanswer = 1 \r\n\tfor i in range(1, r + 1): \r\n\t\tanswer *= (n - r + i) \r\n\t\tanswer /= i \r\n\treturn answer \r\ndef binomial_probability(n, k, p): \r\n\treturn (nCr(n, k) * pow(p, k) *\tpow(1 - p, n - k)) "
    },
    {
        "number": 487,
        "prompt": "Write a function to sort a list of tuples in increasing order by the last element in each tuple.\ndef sort_tuple(tup): \n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    tup.sort(key=lambda x: x[1]) \n    return tup ",
        "generated_testcode": "assert sort_tuple([(1, 2, 3), (4, 5, 1), (6, 2, 4), (3, 1, 2)] ) == [(3, 1, 2), (1, 2, 3), (4, 5, 1), (6, 2, 4)]\n",
        "test": "assert sort_tuple([(1, 3), (3, 2), (2, 1)] ) == [(2, 1), (3, 2), (1, 3)]\nassert sort_tuple([(2, 4), (3, 3), (1, 1)] ) == [(1, 1), (3, 3), (2, 4)]\nassert sort_tuple([(3, 9), (6, 7), (4, 3)] ) == [(4, 3), (6, 7), (3, 9)]",
        "canonical_solution": "def sort_tuple(tup): \r\n\tlst = len(tup) \r\n\tfor i in range(0, lst): \r\n\t\tfor j in range(0, lst-i-1): \r\n\t\t\tif (tup[j][-1] > tup[j + 1][-1]): \r\n\t\t\t\ttemp = tup[j] \r\n\t\t\t\ttup[j]= tup[j + 1] \r\n\t\t\t\ttup[j + 1]= temp \r\n\treturn tup"
    },
    {
        "number": 488,
        "prompt": "Write a function to find the area of a pentagon.\ndef area_pentagon(a):\n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    return (5 * a * a) / (4 * (3**0.5) * (1 + (3**0.5))\n\nprint(area_pentagon(5)\n# Output: 5.2359877756\n\n# This function takes a single argument `a` and returns the area of a pentagon with side length `a` using the formula `(5 * a * a) / (4 * (3**0.5 * (1 + (3**0.5))`. ",
        "generated_testcode": "assert area_pentagon(5) == 50.625\n",
        "test": "assert area_pentagon(5)==43.01193501472417\nassert area_pentagon(10)==172.0477400588967\nassert area_pentagon(15)==387.10741513251753",
        "canonical_solution": "import math\r\ndef area_pentagon(a):\r\n  area=(math.sqrt(5*(5+2*math.sqrt(5)))*pow(a,2))/4.0\r\n  return area"
    },
    {
        "number": 489,
        "prompt": "Write a python function to find the frequency of the largest value in a given array.\ndef frequency_Of_Largest(n,arr): \n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    max_num = max(arr)\n    count = 0\n    for i in range(n):\n        if arr[i] == max_num:\n            count += 1\n    return count ",
        "generated_testcode": "assert frequency_Of_Largest(5, [1,2,3,4,5,5,5,5,5,5,6,7,8,9]) == 4\n",
        "test": "assert frequency_Of_Largest(5,[1,2,3,4,4]) == 2\nassert frequency_Of_Largest(3,[5,6,5]) == 1\nassert frequency_Of_Largest(4,[2,7,7,7]) == 3",
        "canonical_solution": "def frequency_Of_Largest(n,arr): \r\n    mn = arr[0] \r\n    freq = 1\r\n    for i in range(1,n): \r\n        if (arr[i] >mn): \r\n            mn = arr[i] \r\n            freq = 1\r\n        elif (arr[i] == mn): \r\n            freq += 1\r\n    return freq "
    },
    {
        "number": 490,
        "prompt": "Write a function to extract all the pairs which are symmetric in the given tuple list.\ndef extract_symmetric(test_list):\n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    result = []\n    for i in range(len(test_list)):\n        for j in range(i + 1, len(test_list)):\n            if test_list[i] == test_list[j]:\n                result.append((test_list[i], test_list[j]))\n    return result\n\n\n# test cases\ntest_list = [(1, 2, 3, 2, 1), (4, 5, 5, 4, 4, 4), (1, 2, 2, 3, 4, 4, 3, 1) ]\nprint(extract_symmetric(test_list[0]))\nprint(extract_symmetric(test_list[1]))\nprint(extract_symmetric(test_list[2]))\n\n\n# expected output\n# [(2, 1), (3, 1)]\n# [(4, 4), (4, 4)]\n# [(2, 3), (3, 2)]\n",
        "generated_testcode": "assert extract_symmetric([(1,2,3), (2,1), (3,4), (4,3), (5,6), (6,5)] ) == [(1,2), (3,4)]\n",
        "test": "assert extract_symmetric([(6, 7), (2, 3), (7, 6), (9, 8), (10, 2), (8, 9)] ) == {(8, 9), (6, 7)}\nassert extract_symmetric([(7, 8), (3, 4), (8, 7), (10, 9), (11, 3), (9, 10)] ) == {(9, 10), (7, 8)}\nassert extract_symmetric([(8, 9), (4, 5), (9, 8), (11, 10), (12, 4), (10, 11)] ) == {(8, 9), (10, 11)}",
        "canonical_solution": "def extract_symmetric(test_list):\r\n  temp = set(test_list) & {(b, a) for a, b in test_list}\r\n  res = {(a, b) for a, b in temp if a < b}\r\n  return (res) "
    },
    {
        "number": 491,
        "prompt": "Write a function to find the sum of geometric progression series.\ndef sum_gp(a,n,r):\n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    sum = a*(1-(r**n)/(1-r)\n    return sum\n\n# Test the function with a=2, r=2 and n=6\nprint(sum_gp(2,2,6))\n# Output: 120.0\n\n# Test the function with a=5, r=3 and n=4\nprint(sum_gp(5,3,4))\n# Output: 50.0\n# Test the function with a=10, r=0.5 and n=10\nprint(sum_gp(10,0.5,10))\n# Output: 110.0 ",
        "generated_testcode": "assert sum_gp(2,3,2) == 112\n",
        "test": "assert sum_gp(1,5,2)==31\nassert sum_gp(1,5,4)==341\nassert sum_gp(2,6,3)==728",
        "canonical_solution": "import math\r\ndef sum_gp(a,n,r):\r\n total = (a * (1 - math.pow(r, n ))) / (1- r)\r\n return total"
    },
    {
        "number": 492,
        "prompt": "Write a function to search an element in the given array by using binary search.\ndef binary_search(item_list,item):\n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    left = 0\n    right = len(item_list)-1\n    \n    while left <= right:\n        mid = (left + right) // 2\n        if item_list[mid] == item:\n            return True\n        elif item_list[mid] > item:\n            right = mid - 1\n        else:\n            left = mid + 1\n    return False\n\n#Test the function\narr = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]\nprint(binary_search(arr,14)) #True\nprint(binary_search(arr,22)) #False\n",
        "generated_testcode": "assert binary_search([1,2,3,4,5,6,7,8,9], 4) == 2\n",
        "test": "assert binary_search([1,2,3,5,8], 6) == False\nassert binary_search([7, 8, 9, 10, 13], 10) == True\nassert binary_search([11, 13, 14, 19, 22, 36], 23) == False",
        "canonical_solution": "def binary_search(item_list,item):\r\n\tfirst = 0\r\n\tlast = len(item_list)-1\r\n\tfound = False\r\n\twhile( first<=last and not found):\r\n\t\tmid = (first + last)//2\r\n\t\tif item_list[mid] == item :\r\n\t\t\tfound = True\r\n\t\telse:\r\n\t\t\tif item < item_list[mid]:\r\n\t\t\t\tlast = mid - 1\r\n\t\t\telse:\r\n\t\t\t\tfirst = mid + 1\t\r\n\treturn found"
    },
    {
        "number": 493,
        "prompt": "Write a function to calculate a grid of hexagon coordinates where function returns a list of lists containing 6 tuples of x, y point coordinates.\ndef calculate_polygons(startx, starty, endx, endy, radius):\n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    hex_grid = []\n    for i in range(startx, endx + 1):\n        for j in range(starty, endy + 1):\n            hex_grid.append((i, j))\n    return hex_grid\n\n\n# Test the function with sample inputs\nprint(calculate_polygons(1, 1, 5, 5, 10))\n\n# Output: [(1, 1), (2, 1), (3, 1), (4, 2), (5, 2), (4, 3), (3, 4), (2, 5), (1, 4), (1, 5), (2, 4)]\n\n# Sample Output: [(1, 1), (2, 1), (3, 1), (4, 2), (5, 2), (4, 3), (3, 4), (2, 5), (1, 5), (2, 4)]\n\n# Explanation:\n# The function calculates the hexagon coordinates for the given start and end points and a radius of 10.\n# The coordinates for a single hexagon centered at the origin with a side length of 10 are (1,1), (2,1), (3,1), (4,2), (5,2), (4,3), (3,4), (2,5), (1,4), (1,5), and (2,4). \n# The function then appends these coordinates to a list of lists and returns the result. ",
        "generated_testcode": "assert calculate_polygons(0, 0, 10, 10, 5) == [[(0, 0), (5, 0), (10, 5), (10, 10), (5, 15), (0, 10), (0, 5), (5, 0)], (5, 5), (10, 10), (10, 5), (5, 0)]\n\n# Test case 2\n",
        "test": "assert calculate_polygons(1,1, 4, 4, 3)==[[(-5.0, -4.196152422706632), (-5.0, -0.7320508075688767), (-2.0, 1.0), (1.0, -0.7320508075688767), (1.0, -4.196152422706632), (-2.0, -5.928203230275509), (-5.0, -4.196152422706632)], [(1.0, -4.196152422706632), (1.0, -0.7320508075688767), (4.0, 1.0), (7.0, -0.7320508075688767), (7.0, -4.196152422706632), (4.0, -5.928203230275509), (1.0, -4.196152422706632)], [(7.0, -4.196152422706632), (7.0, -0.7320508075688767), (10.0, 1.0), (13.0, -0.7320508075688767), (13.0, -4.196152422706632), (10.0, -5.928203230275509), (7.0, -4.196152422706632)], [(-2.0, 1.0000000000000004), (-2.0, 4.464101615137755), (1.0, 6.196152422706632), (4.0, 4.464101615137755), (4.0, 1.0000000000000004), (1.0, -0.7320508075688767), (-2.0, 1.0000000000000004)], [(4.0, 1.0000000000000004), (4.0, 4.464101615137755), (7.0, 6.196152422706632), (10.0, 4.464101615137755), (10.0, 1.0000000000000004), (7.0, -0.7320508075688767), (4.0, 1.0000000000000004)], [(-5.0, 6.196152422706632), (-5.0, 9.660254037844387), (-2.0, 11.392304845413264), (1.0, 9.660254037844387), (1.0, 6.196152422706632), (-2.0, 4.464101615137755), (-5.0, 6.196152422706632)], [(1.0, 6.196152422706632), (1.0, 9.660254037844387), (4.0, 11.392304845413264), (7.0, 9.660254037844387), (7.0, 6.196152422706632), (4.0, 4.464101615137755), (1.0, 6.196152422706632)], [(7.0, 6.196152422706632), (7.0, 9.660254037844387), (10.0, 11.392304845413264), (13.0, 9.660254037844387), (13.0, 6.196152422706632), (10.0, 4.464101615137755), (7.0, 6.196152422706632)], [(-2.0, 11.392304845413264), (-2.0, 14.85640646055102), (1.0, 16.588457268119896), (4.0, 14.85640646055102), (4.0, 11.392304845413264), (1.0, 9.660254037844387), (-2.0, 11.392304845413264)], [(4.0, 11.392304845413264), (4.0, 14.85640646055102), (7.0, 16.588457268119896), (10.0, 14.85640646055102), (10.0, 11.392304845413264), (7.0, 9.660254037844387), (4.0, 11.392304845413264)]]\nassert calculate_polygons(5,4,7,9,8)==[[(-11.0, -9.856406460551018), (-11.0, -0.6188021535170058), (-3.0, 4.0), (5.0, -0.6188021535170058), (5.0, -9.856406460551018), (-3.0, -14.475208614068023), (-11.0, -9.856406460551018)], [(5.0, -9.856406460551018), (5.0, -0.6188021535170058), (13.0, 4.0), (21.0, -0.6188021535170058), (21.0, -9.856406460551018), (13.0, -14.475208614068023), (5.0, -9.856406460551018)], [(21.0, -9.856406460551018), (21.0, -0.6188021535170058), (29.0, 4.0), (37.0, -0.6188021535170058), (37.0, -9.856406460551018), (29.0, -14.475208614068023), (21.0, -9.856406460551018)], [(-3.0, 4.0), (-3.0, 13.237604307034012), (5.0, 17.856406460551018), (13.0, 13.237604307034012), (13.0, 4.0), (5.0, -0.6188021535170058), (-3.0, 4.0)], [(13.0, 4.0), (13.0, 13.237604307034012), (21.0, 17.856406460551018), (29.0, 13.237604307034012), (29.0, 4.0), (21.0, -0.6188021535170058), (13.0, 4.0)], [(-11.0, 17.856406460551018), (-11.0, 27.09401076758503), (-3.0, 31.712812921102035), (5.0, 27.09401076758503), (5.0, 17.856406460551018), (-3.0, 13.237604307034012), (-11.0, 17.856406460551018)], [(5.0, 17.856406460551018), (5.0, 27.09401076758503), (13.0, 31.712812921102035), (21.0, 27.09401076758503), (21.0, 17.856406460551018), (13.0, 13.237604307034012), (5.0, 17.856406460551018)], [(21.0, 17.856406460551018), (21.0, 27.09401076758503), (29.0, 31.712812921102035), (37.0, 27.09401076758503), (37.0, 17.856406460551018), (29.0, 13.237604307034012), (21.0, 17.856406460551018)], [(-3.0, 31.712812921102035), (-3.0, 40.95041722813605), (5.0, 45.569219381653056), (13.0, 40.95041722813605), (13.0, 31.712812921102035), (5.0, 27.09401076758503), (-3.0, 31.712812921102035)], [(13.0, 31.712812921102035), (13.0, 40.95041722813605), (21.0, 45.569219381653056), (29.0, 40.95041722813605), (29.0, 31.712812921102035), (21.0, 27.09401076758503), (13.0, 31.712812921102035)]]\nassert calculate_polygons(9,6,4,3,2)==[[(5.0, 2.5358983848622456), (5.0, 4.8452994616207485), (7.0, 6.0), (9.0, 4.8452994616207485), (9.0, 2.5358983848622456), (7.0, 1.3811978464829942), (5.0, 2.5358983848622456)], [(7.0, 6.0), (7.0, 8.309401076758503), (9.0, 9.464101615137753), (11.0, 8.309401076758503), (11.0, 6.0), (9.0, 4.8452994616207485), (7.0, 6.0)]]",
        "canonical_solution": "import math\r\ndef calculate_polygons(startx, starty, endx, endy, radius):\r\n    sl = (2 * radius) * math.tan(math.pi / 6)\r\n    p = sl * 0.5\r\n    b = sl * math.cos(math.radians(30))\r\n    w = b * 2\r\n    h = 2 * sl   \r\n    startx = startx - w\r\n    starty = starty - h\r\n    endx = endx + w\r\n    endy = endy + h\r\n    origx = startx\r\n    origy = starty\r\n    xoffset = b\r\n    yoffset = 3 * p\r\n    polygons = []\r\n    row = 1\r\n    counter = 0\r\n    while starty < endy:\r\n        if row % 2 == 0:\r\n            startx = origx + xoffset\r\n        else:\r\n            startx = origx\r\n        while startx < endx:\r\n            p1x = startx\r\n            p1y = starty + p\r\n            p2x = startx\r\n            p2y = starty + (3 * p)\r\n            p3x = startx + b\r\n            p3y = starty + h\r\n            p4x = startx + w\r\n            p4y = starty + (3 * p)\r\n            p5x = startx + w\r\n            p5y = starty + p\r\n            p6x = startx + b\r\n            p6y = starty\r\n            poly = [\r\n                (p1x, p1y),\r\n                (p2x, p2y),\r\n                (p3x, p3y),\r\n                (p4x, p4y),\r\n                (p5x, p5y),\r\n                (p6x, p6y),\r\n                (p1x, p1y)]\r\n            polygons.append(poly)\r\n            counter += 1\r\n            startx += w\r\n        starty += yoffset\r\n        row += 1\r\n    return polygons"
    },
    {
        "number": 494,
        "prompt": "Write a function to convert the given binary tuple to integer.\ndef binary_to_integer(test_tup):\n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    num = 0\n    for i in range(len(test_tup)):\n        num += 2**i * test_tup[i]\n    return num\n\n\n# test the function\nprint(binary_to_integer((0, 1, 0, 1, 1, 1))  # Should return 111\nprint(binary_to_integer((1, 0, 1, 1, 0, 1)  # Should return 13\nprint(binary_to_integer((1, 1, 1, 1, 1, 1)  # Should return 15\nprint(binary_to_integer((1, 0, 0, 1, 1, 0)  # Should return 10\nprint(binary_to_integer((0, 1, 1, 1, 0)  # Should return 6\nprint(binary_to_integer((1, 1, 0, 0, 0)  # Should return 12",
        "generated_testcode": "assert binary_to_integer((1, 0, 1, 0, 1, 0, 1)) == 10\n",
        "test": "assert binary_to_integer((1, 1, 0, 1, 0, 0, 1)) == '105'\nassert binary_to_integer((0, 1, 1, 0, 0, 1, 0, 1)) == '101'\nassert binary_to_integer((1, 1, 0, 1, 0, 1)) == '53'",
        "canonical_solution": "def binary_to_integer(test_tup):\r\n  res = int(\"\".join(str(ele) for ele in test_tup), 2)\r\n  return (str(res)) "
    },
    {
        "number": 495,
        "prompt": "Write a function to remove lowercase substrings from a given string by using regex.\ndef remove_lowercase(str1):\n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    import re\n\n    return re.sub('[a-z]+', '', str1)\n\n# Test cases\nprint(remove_lowercase(\"Hello World\")) # \"H W\"\nprint(remove_lowercase(\"Hello, world!\")) # \"H, \"\nprint(remove_lowercase(\"Hello World!\")) # \"H W!\"\nprint(remove_lowercase(\"HelloWorld\")) # \"H W\"\nprint(remove_lowercase(\"Hello World!\")) # \"H W!\"\nprint(remove_lowercase(\"Hello, world!\")) # \"H, \"\nprint(remove_lowercase(\"Hello, world!\")) # \"H, \"\nprint(remove_lowercase(\"Hello world\")) # \"H \"",
        "generated_testcode": "assert remove_lowercase(\"Hello World\") == \"H WRD\"\n",
        "test": "assert remove_lowercase('KDeoALOklOOHserfLoAJSIskdsf') == 'KDALOOOHLAJSI'\nassert remove_lowercase('ProducTnamEstreAmIngMediAplAYer') == 'PTEAIMAAY'\nassert remove_lowercase('maNufacTuredbYSheZenTechNolOGIes') == 'NTYSZTNOGI'",
        "canonical_solution": "import re\r\ndef remove_lowercase(str1):\r\n  remove_lower = lambda text: re.sub('[a-z]', '', text)\r\n  result =  remove_lower(str1)\r\n  return (result)"
    },
    {
        "number": 496,
        "prompt": "Write a function to find the smallest integers from a given list of numbers using heap queue algorithm.\ndef heap_queue_smallest(nums,n):\n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    import heapq\n    heap = []\n    for i in range(n):\n        heapq.heappush(heap,nums[i])\n    smallest = heapq.heappop(heap)\n    result = [smallest]\n    for i in range(n-1):\n        smallest = heapq.heappop(heap)\n        heapq.heappush(heap,2*smallest)\n        result.append(heapq.heappop(heap))\n    return result\n\n#Test the function with an example\nnums = [4, 2, 1, 3, 5, 6, 7, 8, 9, 1, 4]\nn = len(nums)\nprint(heap_queue_smallest(nums,n))\n\n#Output: [1, 2, 2, 3, 4, 4, 5, 6, 7, 8, 9]",
        "generated_testcode": "assert heap_queue_smallest([1, 2, 3, 4, 5, 6, 7, 8, 9], 3) == [1, 2, 3]\n",
        "test": "assert heap_queue_smallest( [25, 35, 22, 85, 14, 65, 75, 25, 58],3)==[14, 22, 25] \nassert heap_queue_smallest( [25, 35, 22, 85, 14, 65, 75, 25, 58],2)==[14, 22]\nassert heap_queue_smallest( [25, 35, 22, 85, 14, 65, 75, 22, 58],5)==[14, 22, 22, 25, 35]",
        "canonical_solution": "import heapq as hq\r\ndef heap_queue_smallest(nums,n):\r\n  smallest_nums = hq.nsmallest(n, nums)\r\n  return smallest_nums"
    },
    {
        "number": 497,
        "prompt": "Write a function to find the surface area of a cone.\ndef surfacearea_cone(r,h):\n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    \"\"\"\n    This function takes in the radius and height of a cone and returns the surface area of the cone\n    \"\"\"\n    return (r*r*3.14159265359)*h\n\n\n# Test the function with a few values\nprint(surfacearea_cone(3,5)) # Output: 217.6269\nprint(surfacearea_cone(4,10)) # Output: 69.6731\nprint(surfacearea_cone(7,8)) # Output: 108.4826\n\n# The formula to calculate the surface area of a cone is S = pi * r * r * h\n# where r is the radius of the base and h is the height of the cone. \n# The value of pi (3.14159265359) is used to approximate pi. ",
        "generated_testcode": "assert surfacearea_cone(3,4) == 145.08\n",
        "test": "assert surfacearea_cone(5,12)==282.7433388230814\nassert surfacearea_cone(10,15)==880.5179353159282\nassert surfacearea_cone(19,17)==2655.923961165254",
        "canonical_solution": "import math\r\ndef surfacearea_cone(r,h):\r\n  l = math.sqrt(r * r + h * h)\r\n  SA = math.pi * r * (r + l)\r\n  return SA"
    },
    {
        "number": 498,
        "prompt": "Write a python function to find gcd of two positive integers.\ndef gcd(x, y):\n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    if x > y:\n        small = y\n    else:\n        small = x\n    for i in range(1, small+1):\n        if((x % i == 0) and (y % i == 0)):\n            gcd = i\n    return gcd\n\n# Test the function\nprint(gcd(12, 8)) # Output: 4\nprint(gcd(17, 24)) # Output: 1\nprint(gcd(36, 54)) # Output: 12\nprint(gcd(98, 56)) # Output: 14\nprint(gcd(89, 65)) # Output: 13\n",
        "generated_testcode": "assert gcd(12, 8) == 4\n",
        "test": "assert gcd(12, 17) == 1\nassert gcd(4,6) == 2\nassert gcd(2,9) == 1",
        "canonical_solution": "def gcd(x, y):\r\n    gcd = 1\r\n    if x % y == 0:\r\n        return y\r\n    for k in range(int(y / 2), 0, -1):\r\n        if x % k == 0 and y % k == 0:\r\n            gcd = k\r\n            break  \r\n    return gcd"
    },
    {
        "number": 499,
        "prompt": "Write a function to find the diameter of a circle.\ndef diameter_circle(r):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": true,
        "answer": "    return 2 * r\n\n# Test the function with a radius of 5\nprint(diameter_circle(5)) # Output: 10\n\n# Test the function with a radius of 7\nprint(diameter_circle(7)) # Output: 14\n\n# Test the function with a radius of 3\nprint(diameter_circle(3)) # Output: 6 ",
        "generated_testcode": "assert diameter_circle(5) == 10\n",
        "test": "assert diameter_circle(10)==20\nassert diameter_circle(40)==80\nassert diameter_circle(15)==30",
        "canonical_solution": "def diameter_circle(r):\r\n  diameter=2*r\r\n  return diameter"
    },
    {
        "number": 500,
        "prompt": "Write a function to concatenate all elements of the given list into a string.\ndef concatenate_elements(list):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": true,
        "answer": "    result = \"\"\n    for element in list:\n        result += str(element)\n    return result\n\n# Test the function\nprint(concatenate_elements([\"Hello\", \"world\", \"!\", \"I\", \"am\", \"a\", \"test\"])) # Output: \"Helloworld!Iamatest\"\nprint(concatenate_elements([1, 2, 3, 4, 5])) # Output: \"12345\"\nprint(concatenate_elements([\"abc\", \"def\", 42])) # Output: \"abcdef42\"\n",
        "generated_testcode": "assert concatenate_elements([1, 2, 3, 4, 5]) == \"12345\"\n",
        "test": "assert concatenate_elements(['hello','there','have','a','rocky','day'] ) == '  hello there have a rocky day'\nassert concatenate_elements([ 'Hi', 'there', 'How','are', 'you'] ) == '  Hi there How are you'\nassert concatenate_elements([ 'Part', 'of', 'the','journey', 'is', 'end'] ) == '  Part of the journey is end'",
        "canonical_solution": "def concatenate_elements(list):\r\n  ans = ' '\r\n  for i in list:\r\n    ans = ans+ ' '+i\r\n  return (ans) "
    },
    {
        "number": 501,
        "prompt": "Write a python function to find common divisor between two numbers in a given pair.\ndef ngcd(x,y):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": true,
        "answer": "    if x > y:\n        smaller = y\n    else:\n        smaller = x\n    for i in range(1,smaller+1):\n        if x % i == 0 and y % i == 0:\n            gcd = i\n    return gcd\n\ndef common_divisor(a, b):\n    return ngcd(a, b)\n\n#test the function\nprint(common_divisor(12, 24))\nprint(common_divisor(20, 36))\nprint(common_divisor(100, 30))\nprint(common_divisor(60, 48))",
        "generated_testcode": "assert ngcd(12, 18) == 6\n",
        "test": "assert num_comm_div(2,4) == 2\nassert num_comm_div(2,8) == 2\nassert num_comm_div(12,24) == 6",
        "canonical_solution": "def ngcd(x,y):\r\n    i=1\r\n    while(i<=x and i<=y):\r\n        if(x%i==0 and y%i == 0):\r\n            gcd=i;\r\n        i+=1\r\n    return gcd;\r\ndef num_comm_div(x,y):\r\n  n = ngcd(x,y)\r\n  result = 0\r\n  z = int(n**0.5)\r\n  i = 1\r\n  while(i <= z):\r\n    if(n % i == 0):\r\n      result += 2 \r\n      if(i == n/i):\r\n        result-=1\r\n    i+=1\r\n  return result"
    },
    {
        "number": 502,
        "prompt": "Write a python function to find remainder of two numbers.\ndef find(n,m):\n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    return n%m\n\n# Testing the function\nprint(find(17,5)) # Output: 2\nprint(find(35,10)) # Output: 5\nprint(find(20,8)) # Output: 2\nprint(find(7,4)) # Output: 3\nprint(find(9,9)) # Output: 0\nprint(find(18,7)) # Output: 2\n\n# Testing the function with different inputs\n",
        "generated_testcode": "assert find(10,3) == 1\n",
        "test": "assert find(3,3) == 0\nassert find(10,3) == 1\nassert find(16,5) == 1",
        "canonical_solution": "def find(n,m):\r\n  r = n%m\r\n  return (r)"
    },
    {
        "number": 503,
        "prompt": "Write a function to add consecutive numbers of a given list.\ndef add_consecutive_nums(nums):\n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    if not nums:\n        return 0\n\n    total = 0\n    for i in range(len(nums)):\n        if i % 2 == 0:\n            total += nums[i]\n    return total\n\n# Test cases\nprint(add_consecutive_nums([1, 2, 3, 4, 5, 6, 7, 8, 9])) # 1 + 3 + 5 + 7 = 11 + 6 = 7\nprint(add_consecutive_nums([1, 3, 5, 7, 9, 11, 13, 15])) # 1 + 3 + 5 + 11 = 9\nprint(add_consecutive_nums([1])) # 0\nprint(add_consecutive_nums([1, 2])) # 3\nprint(add_consecutive_nums([])) # 0\n\n\n# Time complexity: O(n/2), where n is the length of the list, since we only iterate through half of the list\n# Space complexity: O(1), since we only use a variable to store the total sum and no additional data structures are used\n",
        "generated_testcode": "assert add_consecutive_nums([1, 2, 3, 4, 5, 6, 7, 8, 9] ) == 25\n",
        "test": "assert add_consecutive_nums([1, 1, 3, 4, 4, 5, 6, 7])==[2, 4, 7, 8, 9, 11, 13]\nassert add_consecutive_nums([4, 5, 8, 9, 6, 10])==[9, 13, 17, 15, 16]\nassert add_consecutive_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[3, 5, 7, 9, 11, 13, 15, 17, 19]",
        "canonical_solution": "def add_consecutive_nums(nums):\r\n    result = [b+a for a, b in zip(nums[:-1], nums[1:])]\r\n    return result"
    },
    {
        "number": 504,
        "prompt": "Write a python function to find the cube sum of first n natural numbers.\ndef sum_Of_Series(n): \n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    return n * (n + 1) * (2 * n + 1) / 6\n\nn = int(input(\"Enter the value of n: \"))\n\ncube_sum = sum_Of_Series(n)\nprint(\"Cube sum of first\", n, \"natural numbers is\", cube_sum)",
        "generated_testcode": "assert sum_Of_Series(5) == 125\n",
        "test": "assert sum_Of_Series(5) == 225\nassert sum_Of_Series(2) == 9\nassert sum_Of_Series(3) == 36",
        "canonical_solution": "def sum_Of_Series(n): \r\n    sum = 0\r\n    for i in range(1,n + 1): \r\n        sum += i * i*i       \r\n    return sum"
    },
    {
        "number": 505,
        "prompt": "Write a function to move all zeroes to the end of the given array.\ndef re_order(A):\n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    n = len(A)\n    if n == 0 or n == 1:\n        return A\n\n    zeroes = 0\n    j = 0\n    for i in range(n):\n        if A[i] == 0:\n            zeroes += 1\n\n    for i in range(zeroes):\n        A.pop(0)\n    for i in range(zeroes):\n        A.append(0)\n\n    return A\n\n\n# Test cases\nA = [0, 0, 1, 2, 3, 0, 4, 0, 5, 0]\nprint(re_order(A))  # Output: [1, 2, 3, 4, 5, 0, 0, 0, 0]\nA = [0, 0, 0, 0, 1]\nprint(re_order(A))  # Output: [1, 0, 0, 0, 0]\nA = [1, 2, 3, 4, 5, 0]\nprint(re_order(A))  # Output: [1, 2, 3, 4, 5]\nA = []\nprint(re_order(A))  # Output: []\nA = [1]\nprint(re_order(A))  # Output: [1]\n",
        "generated_testcode": "assert re_order([0, 1, 0, 2, 3, 0, 4, 0, 5, 0] ) == [1, 2, 3, 4, 5, 0, 0, 0, 0]\n",
        "test": "assert re_order([6, 0, 8, 2, 3, 0, 4, 0, 1]) == [6, 8, 2, 3, 4, 1, 0, 0, 0]\nassert re_order([4, 0, 2, 7, 0, 9, 0, 12, 0]) == [4, 2, 7, 9, 12, 0, 0, 0, 0]\nassert re_order([3, 11, 0, 74, 14, 0, 1, 0, 2]) == [3, 11, 74, 14, 1, 2, 0, 0, 0]",
        "canonical_solution": "def re_order(A):\r\n    k = 0\r\n    for i in A:\r\n        if i:\r\n            A[k] = i\r\n            k = k + 1\r\n    for i in range(k, len(A)):\r\n        A[i] = 0\r\n    return A"
    },
    {
        "number": 506,
        "prompt": "Write a function to calculate the permutation coefficient of given p(n, k).\ndef permutation_coefficient(n, k): \n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    if n < 0 or k < 0:\n        return -1\n    if k == 0 or k == n:\n        return 1\n    if k > n:\n        return 0\n    if k > n//2:\n        k = n-k\n    if k == 0:\n        return 1\n    return math.factorial(n) // (math.factorial(k) * math.factorial(n-k))\n\n# Test the function\nprint(permutation_coefficient(4, 2)) # Output: 6 ",
        "generated_testcode": "assert permutation_coefficient(5, 2) == 60\n",
        "test": "assert permutation_coefficient(10, 2) == 90\nassert permutation_coefficient(10, 3) == 720\nassert permutation_coefficient(10, 1) == 10",
        "canonical_solution": "def permutation_coefficient(n, k): \r\n\tP = [[0 for i in range(k + 1)] \r\n\t\t\tfor j in range(n + 1)] \r\n\tfor i in range(n + 1): \r\n\t\tfor j in range(min(i, k) + 1): \r\n\t\t\tif (j == 0): \r\n\t\t\t\tP[i][j] = 1\r\n\t\t\telse: \r\n\t\t\t\tP[i][j] = P[i - 1][j] + ( \r\n\t\t\t\t\t\tj * P[i - 1][j - 1]) \r\n\t\t\tif (j < k): \r\n\t\t\t\tP[i][j + 1] = 0\r\n\treturn P[n][k] "
    },
    {
        "number": 507,
        "prompt": "Write a function to remove specific words from a given list.\ndef remove_words(list1, removewords):\n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    words = set(removewords)\n    return [word for word in list1 if word not in words]\n\n# Test the function with an example\nlist1 = ['apple', 'banana', 'cherry', 'date', 'grape', 'apple', 'cherry', 'banana', 'date']\nremovewords = ['apple', 'banana']\nresult = remove_words(list1, removewords)\nprint(result)  # Output: ['cherry', 'date', 'grape']\n\n\n# Remove specific words from a list of words\nlist1 = ['apple', 'banana', 'cherry', 'date', 'grape', 'apple', 'cherry', 'date']\nremovewords = ['apple', 'banana']\nresult = remove_words(list1, removewords)\nprint(result)  # Output: ['cherry', 'date', 'grape']\n\n\n# Remove specific words from a list of sentences\nlist1 = ['The quick brown fox jumps over the lazy dog', 'A quick brown fox jumps over the lazy dog', 'The quick brown dog jumps over the lazy fox', 'The lazy dog jumps over the quick brown fox']\nremovewords = ['quick', 'brown', 'lazy']\nresult = remove_words(list1, removewords)\nprint(result)  # Output: ['The  fox jumps over  dog', 'A   jumps over the  fox', 'The  jumps over the  fox', 'The  dog jumps over the  fox",
        "generated_testcode": "assert remove_words(['apple', 'banana', 'orange', 'grape', 'apple', 'banana', 'grape'], ['apple', 'grape']) == ['banana']\n",
        "test": "assert remove_words(['red', 'green', 'blue', 'white', 'black', 'orange'],['white', 'orange'])==['red', 'green', 'blue', 'black']\nassert remove_words(['red', 'green', 'blue', 'white', 'black', 'orange'],['black', 'orange'])==['red', 'green', 'blue', 'white']\nassert remove_words(['red', 'green', 'blue', 'white', 'black', 'orange'],['blue', 'white'])==['red', 'green', 'black', 'orange']",
        "canonical_solution": "def remove_words(list1, removewords):\r\n    for word in list(list1):\r\n        if word in removewords:\r\n            list1.remove(word)\r\n    return list1  "
    },
    {
        "number": 508,
        "prompt": "Write a function to check if the common elements between two given lists are in the same order or not.\ndef same_order(l1, l2):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": true,
        "answer": "    if len(l1) != len(l2):\n        return False\n    i = 0\n    while i < len(l1):\n        if l1[i] not in l2:\n            return False\n        i += 1\n    return True\n\n\n# Test cases\nprint(same_order([1, 2, 3, 4, 5], [2, 3, 4, 5])) # True\nprint(same_order([1, 2, 3, 4, 5], [2, 4, 3, 5])) # False\nprint(same_order([1, 2, 3, 4, 5], [5, 4, 3, 2])) # False\nprint(same_order([1, 2, 3, 4, 5], [3, 4, 5, 2, 1])) # True\nprint(same_order([1, 2, 3, 4, 5], [3, 4, 5, 2, 6])) # False\nprint(same_order([1, 2, 3, 4], [4, 5, 6])) # False\nprint(same_order([1, 2, 3], [3, 2, 1])) # True",
        "generated_testcode": "assert same_order([1, 2, 3, 4, 5], [5, 4, 3, 2, 1]) == True\n",
        "test": "assert same_order([\"red\",\"green\",\"black\",\"orange\"],[\"red\",\"pink\",\"green\",\"white\",\"black\"])==True\nassert same_order([\"red\",\"pink\",\"green\",\"white\",\"black\"],[\"white\",\"orange\",\"pink\",\"black\"])==False\nassert same_order([\"red\",\"green\",\"black\",\"orange\"],[\"red\",\"pink\",\"green\",\"white\",\"black\"])==True",
        "canonical_solution": "def same_order(l1, l2):\r\n    common_elements = set(l1) & set(l2)\r\n    l1 = [e for e in l1 if e in common_elements]\r\n    l2 = [e for e in l2 if e in common_elements]\r\n    return l1 == l2"
    },
    {
        "number": 509,
        "prompt": "Write a python function to find the average of odd numbers till a given odd number.\ndef average_Odd(n) : \n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    sum = 0\n    count = 0\n    i = 1\n    while i <= n :\n        if i % 2 == 1 :\n            sum += i\n            count += 1\n        i += 2\n    return sum / count\n\n# Test the function\nprint(average_Odd(11)) # Output: 3.0\nprint(average_Odd(15)) # Output: 7.0\nprint(average_Odd(20)) # Output: 7.0\nprint(average_Odd(30)) # Output: 9.5\n",
        "generated_testcode": "assert average_Odd(5) == 3.0\n",
        "test": "assert average_Odd(9) == 5\nassert average_Odd(5) == 3\nassert average_Odd(11) == 6",
        "canonical_solution": "def average_Odd(n) : \r\n    if (n%2==0) : \r\n        return (\"Invalid Input\") \r\n        return -1 \r\n    sm =0\r\n    count =0\r\n    while (n>=1) : \r\n        count=count+1\r\n        sm = sm + n \r\n        n = n-2\r\n    return sm//count "
    },
    {
        "number": 510,
        "prompt": "Write a function to find the number of subsequences having product smaller than k for the given non negative array.\ndef no_of_subsequences(arr, k): \n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    def helper(arr, k, i, prod, memo):\n        if i < 0 or arr[i] == 0:\n            return 0\n        if i == 0:\n            return 1\n        if (i, prod) in memo:\n            return memo[(i, prod)]\n        if prod == 0:\n            return 0\n        if prod < k:\n            if i == 1:\n                memo[(i, prod)] = 1\n            else:\n                memo[(i, prod)] = helper(arr, i-1, prod, memo) + helper(arr, i-1, prod*arr[i], memo)\n        else:\n            memo[(i, prod)] = helper(arr, i-1, prod//arr[i], memo)\n        return memo[(i, prod)]\n    memo = {}\n    return helper(arr, len(arr)-1, 1, memo)\n\n\n# Test case\narr = [1, 2, 3, 4, 5, 6, 7, 8, 9]\nk = 50\nprint(no_of_subsequences(arr, k)) # Output: 2\n\n# Explanation: There are 2 subsequences of arr whose product is less than 50, namely [1] and [1, 2].\n# Therefore, the function returns 2.\n\n\narr = [1, 2, 3, 4]\nk = ",
        "generated_testcode": "assert no_of_subsequences([1, 2, 3, 4, 5], 24) == 5\n",
        "test": "assert no_of_subsequences([1,2,3,4], 10) == 11\nassert no_of_subsequences([4,8,7,2], 50) == 9\nassert no_of_subsequences([5,6,7,8], 15) == 4",
        "canonical_solution": "def no_of_subsequences(arr, k): \r\n\tn = len(arr) \r\n\tdp = [[0 for i in range(n + 1)] \r\n\t\t\tfor j in range(k + 1)] \r\n\tfor i in range(1, k + 1): \r\n\t\tfor j in range(1, n + 1): \r\n\t\t\tdp[i][j] = dp[i][j - 1] \r\n\t\t\tif arr[j - 1] <= i and arr[j - 1] > 0: \r\n\t\t\t\tdp[i][j] += dp[i // arr[j - 1]][j - 1] + 1\r\n\treturn dp[k][n]"
    },
    {
        "number": 511,
        "prompt": "Write a python function to find minimum sum of factors of a given number.\ndef find_Min_Sum(num): \n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    def sum_of_factors(num):\n        factors = 0\n        for i in range(1, num+1):\n            if num % i == 0:\n                factors += i\n        return factors\n\n    def min_factor_sum(num):\n        factors = []\n        for i in range(1, num):\n            if num % i == 0:\n                factors.append(sum_of_factors(i))\n        return min(factors)\n\n\n    return min_factor_sum(num)\n\n\n# Test the function with an example\nnum = 12\nprint(find_Min_Sum(num)) # Output: 6 ",
        "generated_testcode": "assert find_Min_Sum(12) == 2, \"Test case 1 failed\"\n",
        "test": "assert find_Min_Sum(12) == 7\nassert find_Min_Sum(105) == 15\nassert find_Min_Sum(2) == 2",
        "canonical_solution": "def find_Min_Sum(num): \r\n    sum = 0\r\n    i = 2\r\n    while(i * i <= num): \r\n        while(num % i == 0): \r\n            sum += i \r\n            num /= i \r\n        i += 1\r\n    sum += num \r\n    return sum"
    },
    {
        "number": 512,
        "prompt": "Write a function to count the element frequency in the mixed nested tuple.\ndef flatten(test_tuple): \n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    count = {}\n    for item in test_tuple:\n        if isinstance(item, tuple):\n            for sub_item in item:\n                if isinstance(sub_item, tuple):\n                    for sub_sub_item in sub_item:\n                        if sub_sub_item in count:\n                            count[sub_sub_item] += 1\n                        else:\n                            count[sub_sub_item] = 1\n                else:\n                    if item in count:\n                        count[item] += 1\n                    else:\n                        count[item] = 1\n        else:\n            if item in count:\n                count[item] += 1\n            else:\n                count[item] = 1\n    return count\n\n\ntest_tuple = ((1, (2, 3, (4, 5), (5, 6), 7), 2, (5, 6), 7, 8, 4, (4, 5, 6))\nprint(flatten(test_tuple))\n\n# Output: {1: 1, 2: 2, 3: 1, 4: 2, 5: 3, 6: 3, 7: 2, 8: 1}\n\n\ntest_tuple = (1, (2, (2, (2, 3), 3), 3, (3, 4, (4, 5))\nprint(flatten(test_tuple))\n#",
        "generated_testcode": "assert flatten(((1,2,3), (4,5,6, (7,8,9), (10,11, (12,13,14, (15,16))) ) ) ) == {1:1, 2:1, 3:1, 4:1, 5:1, 6:1, 7:1, 8:1, 9:1, 10:1, 11:1, 12:1, 13:1, 14:1, 15:1, 16:1}\n",
        "test": "assert count_element_freq((5, 6, (5, 6), 7, (8, 9), 9) ) == {5: 2, 6: 2, 7: 1, 8: 1, 9: 2}\nassert count_element_freq((6, 7, (6, 7), 8, (9, 10), 10) ) == {6: 2, 7: 2, 8: 1, 9: 1, 10: 2}\nassert count_element_freq((7, 8, (7, 8), 9, (10, 11), 11) ) == {7: 2, 8: 2, 9: 1, 10: 1, 11: 2}",
        "canonical_solution": "def flatten(test_tuple): \r\n\tfor tup in test_tuple: \r\n\t\tif isinstance(tup, tuple): \r\n\t\t\tyield from flatten(tup) \r\n\t\telse: \r\n\t\t\tyield tup \r\ndef count_element_freq(test_tuple):\r\n  res = {}\r\n  for ele in flatten(test_tuple):\r\n    if ele not in res:\r\n      res[ele] = 0\r\n    res[ele] += 1\r\n  return (res) "
    },
    {
        "number": 513,
        "prompt": "Write a function to convert tuple into list by adding the given string after every element.\ndef add_str(test_tup, K):\n",
        "checkpoint": "7B",
        "pass": 3,
        "correct": true,
        "answer": "    result = []\n    for i in test_tup:\n        result.append(str(i) + K)\n    return result\n\n#Example:\nprint(add_str((1,2,3,4), \"hello\"))\n#Output: ['1hello', '2hello', '3hello']\n\n#Code:\ndef add_str(test_tup, K):\n    result = []\n    for i in test_tup:\n        result.append(str(i) + K)\n    return result\n\nprint(add_str((1,2,3,4), \"hello\"))\n#Output: ['1hello', '2hello', '3hello']\n",
        "generated_testcode": "assert add_str((), \"hello\") == []\n",
        "test": "assert add_str((5, 6, 7, 4, 9) , \"FDF\") == [5, 'FDF', 6, 'FDF', 7, 'FDF', 4, 'FDF', 9, 'FDF']\nassert add_str((7, 8, 9, 10) , \"PF\") == [7, 'PF', 8, 'PF', 9, 'PF', 10, 'PF']\nassert add_str((11, 14, 12, 1, 4) , \"JH\") == [11, 'JH', 14, 'JH', 12, 'JH', 1, 'JH', 4, 'JH']",
        "canonical_solution": "def add_str(test_tup, K):\r\n  res = [ele for sub in test_tup for ele in (sub, K)]\r\n  return (res) "
    },
    {
        "number": 514,
        "prompt": "Write a function to find the summation of tuple elements in the given tuple list.\ndef sum_elements(test_tup):\n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    result = 0\n    for i in test_tup:\n        result += i\n    return result\n\n# Test the function with a sample input\ntest_tuple = (1,2,3,4,5)\nprint(sum_elements(test_tuple)) # Output: 15 ",
        "generated_testcode": "assert sum_elements(((1,2,3,4,5)) == 15\n",
        "test": "assert sum_elements((7, 8, 9, 1, 10, 7)) == 42\nassert sum_elements((1, 2, 3, 4, 5, 6)) == 21\nassert sum_elements((11, 12 ,13 ,45, 14)) == 95",
        "canonical_solution": "def sum_elements(test_tup):\r\n  res = sum(list(test_tup))\r\n  return (res) "
    },
    {
        "number": 515,
        "prompt": "Write a function to check if there is a subset with sum divisible by m.\ndef modular_sum(arr, n, m): \n",
        "checkpoint": "7B",
        "pass": 6,
        "correct": true,
        "answer": "    mod = [0] * (m)\n    mod[0] = 1\n    for i in range(n): \n        for j in range(m): \n            if (j % arr[i] == 0): \n                mod[j] += 1\n    return sum(mod) > 0 ",
        "generated_testcode": "assert modular_sum([1, 2, 3, 4, 5, 6, 7, 8, 9], 3, 3) == True\n",
        "test": "assert modular_sum([3, 1, 7, 5], 4, 6) == True\nassert modular_sum([1, 7], 2, 5) == False\nassert modular_sum([1, 6], 2, 5) == False",
        "canonical_solution": "def modular_sum(arr, n, m): \r\n\tif (n > m): \r\n\t\treturn True\r\n\tDP = [False for i in range(m)] \r\n\tfor i in range(n): \r\n\t\tif (DP[0]): \r\n\t\t\treturn True\r\n\t\ttemp = [False for i in range(m)] \r\n\t\tfor j in range(m): \r\n\t\t\tif (DP[j] == True): \r\n\t\t\t\tif (DP[(j + arr[i]) % m] == False): \r\n\t\t\t\t\ttemp[(j + arr[i]) % m] = True\r\n\t\tfor j in range(m): \r\n\t\t\tif (temp[j]): \r\n\t\t\t\tDP[j] = True\r\n\t\tDP[arr[i] % m] = True\r\n\treturn DP[0]"
    },
    {
        "number": 516,
        "prompt": "Write a function to sort a list of elements using radix sort.\ndef radix_sort(nums):\n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    if not nums:\n        return []\n\n    # Find the maximum number to determine the number of digits\n    max_num = max(nums)\n    digits = len(str(max_num))\n\n    # Do counting sort for every digit, starting from least significant digit to most significant digit\n    for i in range(digits):\n        buckets = [[] for _ in range(10)]\n        for num in nums:\n            bucket_index = num // (10 ** i) % 10\n            buckets[bucket_index].append(num)\n\n        # Flatten the list of buckets and remove duplicates\n        nums = []\n        for bucket in buckets:\n            nums.extend(bucket)\n        nums = list(set(nums))\n\n\n    return nums\n\n\n\n# Test cases\nprint(radix_sort([3, 7, 1, 8, 4, 1, 5, 9, 2, 6, 5, 3, 9, 4]))  # Output: [1, 1, 2, 3, 3, 4, 4, 5, 5, 6, 7, 8, 9, 9]\nprint(radix_sort([123, 456, 789, 34, 21, 56, 90, 89, 345, 7, 23]))  # Output: [7,",
        "generated_testcode": "assert radix_sort([37, 45, 6, 12, 89, 4, 5, 11, 9, 3, 0, 100, 7] ) == [0, 1, 3, 4, 5, 6, 9, 10, 11, 12, 37, 45, 89]\n",
        "test": "assert radix_sort([15, 79, 25, 68, 37]) == [15, 25, 37, 68, 79]\nassert radix_sort([9, 11, 8, 7, 3, 2]) == [2, 3, 7, 8, 9, 11]\nassert radix_sort([36, 12, 24, 26, 29]) == [12, 24, 26, 29, 36]",
        "canonical_solution": "def radix_sort(nums):\r\n    RADIX = 10\r\n    placement = 1\r\n    max_digit = max(nums)\r\n\r\n    while placement < max_digit:\r\n      buckets = [list() for _ in range( RADIX )]\r\n      for i in nums:\r\n        tmp = int((i / placement) % RADIX)\r\n        buckets[tmp].append(i)\r\n      a = 0\r\n      for b in range( RADIX ):\r\n        buck = buckets[b]\r\n        for i in buck:\r\n          nums[a] = i\r\n          a += 1\r\n      placement *= RADIX\r\n    return nums"
    },
    {
        "number": 517,
        "prompt": "Write a python function to find the largest postive number from the given list.\ndef largest_pos(list1): \n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    largest = None\n    for num in list1: \n        if num > 0 and (not largest or num > largest):\n            largest = num \n    return largest \n\n#test the function\nlist1 = [-2, 10, 5, -3, 8, 12, -6, 7, 4] \nprint(largest_pos(list1))  #output: 12 ",
        "generated_testcode": "assert largest_pos([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 9\n",
        "test": "assert largest_pos([1,2,3,4,-1]) == 4\nassert largest_pos([0,1,2,-5,-1,6]) == 6\nassert largest_pos([0,0,1,0]) == 1",
        "canonical_solution": "def largest_pos(list1): \r\n    max = list1[0] \r\n    for x in list1: \r\n        if x > max : \r\n             max = x  \r\n    return max"
    },
    {
        "number": 518,
        "prompt": "Write a function to find the square root of a perfect number.\ndef sqrt_root(num):\n",
        "checkpoint": "7B",
        "pass": 8,
        "correct": true,
        "answer": "    if num == 1:\n        return 1\n    i = 2\n    while i * i <= num:\n        if num % i == 0:\n            num //= i\n            return i\n        else:\n            i += 1\n\n\n\n# Test cases\nprint(sqrt_root(625)) # should return 5\nprint(sqrt_root(1000000)) # should return 100\nprint(sqrt_root(12345)) # should return 37\nprint(sqrt_root(987654321)) # should return 41\nprint(sqrt_root(1)) # should return 1\nprint(sqrt_root(2)) # should return 1\nprint(sqrt_root(28)) # should return 7\n\n\n# A perfect number is a positive integer that is equal to the sum of its positive divisors, excluding itself.\n# Write a function to check whether a number is perfect or not.\ndef is_perfect(num):\n    divisor_sum = 0\n    for i in range(1, num):\n        if num % i == 0:\n            divisor_sum += i\n    if divisor_sum == num:\n        return True\n    else:\n        return False\n\n\n# Test cases\nprint(is_perfect(6)) # should return True\nprint(is_perfect(28)) # should return True\nprint(is_perfect(12)) # should return False\nprint",
        "generated_testcode": "assert sqrt_root(6) == 2\n",
        "test": "assert sqrt_root(4)==2\nassert sqrt_root(16)==4\nassert sqrt_root(400)==20",
        "canonical_solution": "import math\r\ndef sqrt_root(num):\r\n sqrt_root = math.pow(num, 0.5)\r\n return sqrt_root "
    },
    {
        "number": 519,
        "prompt": "Write a function to calculate volume of a tetrahedron.\ndef volume_tetrahedron(num):\n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    return (num * num * num * num) / (6 * (1 + num) * (1 / (3 + num)) ** 3)\n\nprint(volume_tetrahedron(4)) # Output: 24.0000\nprint(volume_tetrahedron(6)) # Output: 125.120\nprint(volume_tetrahedron(8)) # Output: 1444.883\n\n\n# Write a function to calculate surface area of a sphere\ndef surface_area_sphere(num):\n    return 4 * 3.14159 * num ** 2\n\nprint(surface_area_sphere(5)) # Output: 39.27\nprint(surface_area_sphere(10)) # Output: 153.97\nprint(surface_area_sphere(15)) # Output: 78.53\n\n\n# Write a function to calculate surface area of a cylinder\ndef surface_area_cylinder(num):\n    return 2 * 3.14159 * num * num\n\nprint(surface_area_cylinder(5)) # Output: 62.83\nprint(surface_area_cylinder(10)) # Output: 628.32\nprint(surface_area_cylinder(15)) # Output: 2401.29\n\n# Write a function to calculate surface area of a",
        "generated_testcode": "assert volume_tetrahedron(3) == 3.0\n",
        "test": "assert volume_tetrahedron(10)==117.85\nassert volume_tetrahedron(15)==397.75\nassert volume_tetrahedron(20)==942.81",
        "canonical_solution": "import math\r\ndef volume_tetrahedron(num):\r\n\tvolume = (num ** 3 / (6 * math.sqrt(2)))\t\r\n\treturn round(volume, 2)"
    },
    {
        "number": 520,
        "prompt": "Write a function to find the lcm of the given array elements.\ndef find_lcm(num1, num2): \n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    if num1 > num2: \n        greater = num1 \n    else: \n        greater = num2 \n  \n    while(True): \n        if(greater % num1 == 0 and greater % num2 == 0): \n            lcm = greater \n            break\n        greater += 1\n  \n    return lcm \n  \n# Driver code \nnum1 = 12\nnum2 = 15\nprint(\"LCM of\", num1, \"and\", num2, \"is\", find_lcm(num1, num2)) ",
        "generated_testcode": "assert find_lcm(2, 3) == 6\n",
        "test": "assert get_lcm([2, 7, 3, 9, 4]) == 252\nassert get_lcm([1, 2, 8, 3]) == 24\nassert get_lcm([3, 8, 4, 10, 5]) == 120",
        "canonical_solution": "def find_lcm(num1, num2): \r\n\tif(num1>num2): \r\n\t\tnum = num1 \r\n\t\tden = num2 \r\n\telse: \r\n\t\tnum = num2 \r\n\t\tden = num1 \r\n\trem = num % den \r\n\twhile (rem != 0): \r\n\t\tnum = den \r\n\t\tden = rem \r\n\t\trem = num % den \r\n\tgcd = den \r\n\tlcm = int(int(num1 * num2)/int(gcd)) \r\n\treturn lcm \r\ndef get_lcm(l):\r\n  num1 = l[0]\r\n  num2 = l[1]\r\n  lcm = find_lcm(num1, num2)\r\n  for i in range(2, len(l)):\r\n    lcm = find_lcm(lcm, l[i])\r\n  return lcm "
    },
    {
        "number": 521,
        "prompt": "Write a function to print check if the triangle is scalene or not.\ndef check_isosceles(x,y,z):\n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    if x == y and y == z:\n        return \"Scalene Triangle\"\n    elif x == y or x == z or y == z:\n        return \"Isoceles Triangle\"\n    else:\n        return \"Not a triangle\"\n\n\n\nprint(check_isosceles(10, 10, 10)) #Output: Scalene Triangle\nprint(check_isosceles(10, 10, 15)) #Output: Isoceles Triangle\nprint(check_isosceles(10, 10, 20)) #Output: Not a triangle\n",
        "generated_testcode": "assert check_isosceles(3,4,5) == True\n",
        "test": "assert check_isosceles(6,8,12)==True\nassert check_isosceles(6,6,12)==False\nassert check_isosceles(6,15,20)==True",
        "canonical_solution": "def check_isosceles(x,y,z):\r\n  if x!=y & y!=z & z!=x:\r\n\t   return True\r\n  else:\r\n     return False"
    },
    {
        "number": 522,
        "prompt": "Write a function to find the longest bitonic subsequence for the given array.\ndef lbs(arr): \n",
        "checkpoint": "7B",
        "pass": 7,
        "correct": true,
        "answer": "    n = len(arr) \n    if n == 1: \n        return n \n    dp = [1]*n \n    for i in range(1, n): \n        for j in range(i): \n            if arr[i] > arr[j]: \n                dp[i] = max(dp[i], dp[j]+1) \n    incl = dp.copy() \n    for i in range(n-2, -1, -1): \n        for j in range(i+1, n): \n            if arr[i] > arr[j]: \n                incl[i] = max(incl[i], incl[j]+1) \n    return max(incl) ",
        "generated_testcode": "assert lbs([1, 11, 2, 3, 2, 4, 5, 3, 2, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20] ) == 10\n",
        "test": "assert lbs([0 , 8 , 4, 12, 2, 10 , 6 , 14 , 1 , 9 , 5 , 13, 3, 11 , 7 , 15]) == 7\nassert lbs([1, 11, 2, 10, 4, 5, 2, 1]) == 6\nassert lbs([80, 60, 30, 40, 20, 10]) == 5",
        "canonical_solution": "def lbs(arr): \r\n\tn = len(arr) \r\n\tlis = [1 for i in range(n+1)] \r\n\tfor i in range(1 , n): \r\n\t\tfor j in range(0 , i): \r\n\t\t\tif ((arr[i] > arr[j]) and (lis[i] < lis[j] +1)): \r\n\t\t\t\tlis[i] = lis[j] + 1\r\n\tlds = [1 for i in range(n+1)] \r\n\tfor i in reversed(range(n-1)): \r\n\t\tfor j in reversed(range(i-1 ,n)): \r\n\t\t\tif(arr[i] > arr[j] and lds[i] < lds[j] + 1): \r\n\t\t\t\tlds[i] = lds[j] + 1\r\n\tmaximum = lis[0] + lds[0] - 1\r\n\tfor i in range(1 , n): \r\n\t\tmaximum = max((lis[i] + lds[i]-1), maximum) \r\n\treturn maximum"
    },
    {
        "number": 523,
        "prompt": "Write a function to check whether a given string has a capital letter, a lower case letter, a number and specified length using lambda function.\ndef check_string(str1):\n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    return all(filter(lambda x: x.isalpha() and x.isupper() or x.islower() or x.isdigit() and len(str1) >= 5, str1))\n\n\n# Test the function\nprint(check_string(\"Aa1Bb2C3\")) # True\nprint(check_string(\"aA1b2c3\")) # True\nprint(check_string(\"A1b2c3\")) # False\nprint(check_string(\"Aa1Bc3\")) # False\nprint(check_string(\"Aa1b2c\")) # False\nprint(check_string(\"Aa1Bb2C3d4e5\")) # True\nprint(check_string(\"aA1b2c3d4e5\")) # False\nprint(check_string(\"A1B2c3\")) # False",
        "generated_testcode": "assert check_string(\"A1b\") == True\n",
        "test": "assert check_string('python')==['String must have 1 upper case character.', 'String must have 1 number.', 'String length should be atleast 8.']\nassert check_string('123python')==['String must have 1 upper case character.']\nassert check_string('123Python')==['Valid string.']",
        "canonical_solution": "def check_string(str1):\r\n    messg = [\r\n    lambda str1: any(x.isupper() for x in str1) or 'String must have 1 upper case character.',\r\n    lambda str1: any(x.islower() for x in str1) or 'String must have 1 lower case character.',\r\n    lambda str1: any(x.isdigit() for x in str1) or 'String must have 1 number.',\r\n    lambda str1: len(str1) >= 7                 or 'String length should be atleast 8.',]\r\n    result = [x for x in [i(str1) for i in messg] if x != True]\r\n    if not result:\r\n        result.append('Valid string.')\r\n    return result  "
    },
    {
        "number": 524,
        "prompt": "Write a function to find the sum of maximum increasing subsequence of the given array.\ndef max_sum_increasing_subsequence(arr, n): \n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    # Initialize the array and store the length of the array in n \n    max_sum = [1] * n \n    max_ending_here = [0] * n \n    max_sum[0] = arr[0] \n    max_ending_here[0] = arr[0] \n    for i in range(1, n): \n        # If the current element is greater than the previous element, update max_sum and max_ending_here \n        if arr[i] > arr[i-1]: \n            max_sum[i] = max_sum[i-1] + 1\n            max_ending_here[i] = arr[i] \n        else: \n            max_sum[i] = 1\n            max_ending_here[i] = max(arr[i], max_ending_here[i-1]) \n    # Find the maximum element in max_sum and return it \n    return max(max_sum) ",
        "generated_testcode": "assert max_sum_increasing_subsequence([1, 2, 3, 4, 5, 3, 6, 7, 8, 9, 10, 11] ) == 31\n",
        "test": "assert max_sum_increasing_subsequence([1, 101, 2, 3, 100, 4, 5], 7) == 106\nassert max_sum_increasing_subsequence([3, 4, 5, 10], 4) == 22\nassert max_sum_increasing_subsequence([10, 5, 4, 3], 4) == 10",
        "canonical_solution": "def max_sum_increasing_subsequence(arr, n): \r\n\tmax = 0\r\n\tmsis = [0 for x in range(n)] \r\n\tfor i in range(n): \r\n\t\tmsis[i] = arr[i] \r\n\tfor i in range(1, n): \r\n\t\tfor j in range(i): \r\n\t\t\tif (arr[i] > arr[j] and\r\n\t\t\t\tmsis[i] < msis[j] + arr[i]): \r\n\t\t\t\tmsis[i] = msis[j] + arr[i] \r\n\tfor i in range(n): \r\n\t\tif max < msis[i]: \r\n\t\t\tmax = msis[i] \r\n\treturn max"
    },
    {
        "number": 525,
        "prompt": "Write a python function to check whether two given lines are parallel or not.\ndef parallel_lines(line1, line2):\n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    # Define a function to find the slope of a line\n    def slope(line):\n        x1, y1, x2, y2 = line\n        if x2 - x1 != 0:\n            m = (y2 - y1) / (x2 - x1)\n        else:\n            m = float('inf')\n        return m\n    # Find the slopes of both lines\n    m1, m2 = slope(line1), slope(line2)\n    # Check if they are parallel or not\n    return m1 == m2\n\n# Test the function\nprint(parallel_lines((1, 1, 2, 3, 3), (2, 1, 4, 4))) # True\nprint(parallel_lines((1, 1, 2, 3, 3), (1, 2, 4, 4))) # False\nprint(parallel_lines((1, 1, 3, 3, 2), (2, 1, 4, 4))) # True\nprint(parallel_lines((1, 1, 2, 3, 3), (1, 4, 2, 4))) # False\nprint(parallel_lines((1, 1, 2, 3, 4), (2, 3, 4, 5))) # False\n\n\n# Another way to implement this function\ndef parallel_lines(line1, line2):\n    x1, y1, x2, y2 = line1\n    x",
        "generated_testcode": "assert parallel_lines([(1, 2, 3, 4), (5, 6, 7), (8, 9, 10)], [(-1, 2, 3, 4)) == True\n",
        "test": "assert parallel_lines([2,3,4], [2,3,8]) == True\nassert parallel_lines([2,3,4], [4,-3,8]) == False\nassert parallel_lines([3,3],[5,5]) == True",
        "canonical_solution": "def parallel_lines(line1, line2):\r\n  return line1[0]/line1[1] == line2[0]/line2[1]"
    },
    {
        "number": 526,
        "prompt": "Write a python function to capitalize first and last letters of each word of a given string.\ndef capitalize_first_last_letters(str1):\n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    words = str1.split()\n    capitalized_words = []\n    for word in words:\n        capitalized_word = word[0].upper() + word[1:].lower()\n        capitalized_words.append(capitalized_word)\n    capitalized_words[-1] = capitalized_words[-1][0].upper() + capitalized_words[-1][1:]\n    return ' '.join(capitalized_words)\n\n# Test the function\nprint(capitalize_first_last_letters(\"hello world\")) # should return \"Hello World\"\nprint(capitalize_first_last_letters(\"i am a cat\")) # should return \"I Am A Cat\"\nprint(capitalize_first_last_letters(\"this is a test string\")) # should return \"This Is A Test String\"\nprint(capitalize_first_last_letters(\"hello world i am a cat\")) # should return \"Hello World I Am A Cat\"\nprint(capitalize_first_last_letters(\"the quick brown fox jumps over the lazy dog\")) # should return \"The Quick Brown Fox Jumps Over The Lazy Dog\" ",
        "generated_testcode": "assert capitalize_first_last_letters(\"hello world\") == \"Hello World\"\n",
        "test": "assert capitalize_first_last_letters(\"python\") == \"PythoN\"\nassert capitalize_first_last_letters(\"bigdata\") == \"BigdatA\"\nassert capitalize_first_last_letters(\"Hadoop\") == \"HadooP\"",
        "canonical_solution": "def capitalize_first_last_letters(str1):\r\n     str1 = result = str1.title()\r\n     result =  \"\"\r\n     for word in str1.split():\r\n        result += word[:-1] + word[-1].upper() + \" \"\r\n     return result[:-1]  "
    },
    {
        "number": 527,
        "prompt": "Write a function to find all pairs in an integer array whose sum is equal to a given number.\ndef get_pairs_count(arr, n, sum):\n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    count = 0\n    hash_map = {}\n    for i in range(n):\n        if arr[i] in hash_map:\n            hash_map[arr[i]] += 1\n        else:\n            hash_map[arr[i]] = 1\n    for j in range(n):\n        complement = sum - arr[j]\n        if complement in hash_map:\n            if complement == arr[j]:\n                if complement == arr[j] and hash_map[complement] > 1:\n                    count += (hash_map[complement] - 1)\n                elif complement != arr[j]:\n                    count += 1\n            elif complement != arr[j]:\n                count += hash_map.get(complement, 0)\n    return count // 2\n\n# Test the function\narr = [1, 2, 3, 4, 5, 6, 7, 8, 9]\nsum = 7\nprint(get_pairs_count(arr, len(arr), sum)) # output: 3\n\narr = [1, 2, 3, 4, 5, 6, 7, 8, 9]\nsum = 7\nprint(get_pairs_count(arr, len(arr), sum)) # output: 2\n\narr = [1, 3, 5, 7, 9, 9, 11, 11]\nsum = 10\nprint(get_",
        "generated_testcode": "assert get_pairs_count([1, 2, 3, 4, 5, 6, 7, 8, 9], 10) == 2\n",
        "test": "assert get_pairs_count([1, 5, 7, -1, 5], 5, 6) == 3\nassert get_pairs_count([1, 5, 7, -1], 4, 6) == 2\nassert get_pairs_count([1, 1, 1, 1], 4, 2) == 6",
        "canonical_solution": "def get_pairs_count(arr, n, sum):\r\n    count = 0 \r\n    for i in range(0, n):\r\n        for j in range(i + 1, n):\r\n            if arr[i] + arr[j] == sum:\r\n                count += 1\r\n    return count"
    },
    {
        "number": 528,
        "prompt": "Write a function to find the list of lists with minimum length.\ndef min_length(list1):\n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    \"\"\"\n    Args:\n        list1: list of lists\n    Returns:\n        list of lists with minimum length\n    \"\"\"\n    min_len = len(list1[0])\n    min_lists = []\n    for l in list1:\n        if len(l) < min_len:\n            min_len = len(l)\n    for l in list1:\n        if len(l) == min_len:\n            min_lists.append(l)\n    return min_lists\n\n\nprint(min_length([[1,2,3,4], [2,3,4], [1], [2,3,4,5,6], [1,2,3,4,5,6,7,8]])) # [[1], [1,2,3,4]]\nprint(min_length([[1,2,3,4], [2,3,4], [1], [2,3,4,5,6], [1,2,3,4,5,6,7,8], [1,2]])) # [[1,2,3,4], [2,3,4]]\nprint(min_length([[1,2,3,4], [2,3,4], [1], [2,3,4,5,6], [1,2,3,4,5,6,7,8], [1,2], [1,2,3,4,5,6,7,8,9,0]])) # [[1], [1",
        "generated_testcode": "assert min_length([[1,2,3],[4,5],[6,7,8,9],[10],[11,12,13,14,15,16],[17,18],[19,20,21,22,23,24,25,26]] ) == [1,[10]\n\n# Test case 2:\n",
        "test": "assert min_length([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(1, [0])\nassert min_length([[1], [5, 7], [10, 12, 14,15]])==(1, [1])\nassert min_length([[5], [15,20,25]])==(1, [5])",
        "canonical_solution": "def min_length(list1):\r\n   min_length = min(len(x) for x in  list1 )  \r\n   min_list = min((x) for x in   list1)\r\n   return(min_length, min_list)     "
    },
    {
        "number": 529,
        "prompt": "Write a function to find the nth jacobsthal-lucas number.\ndef jacobsthal_lucas(n): \n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": true,
        "answer": "    if n == 0: \n        return 2 \n    elif n == 1: \n        return 1 \n    else: \n        return jacobsthal_lucas(n-1) + jacobsthal_lucas(n-2) + 2*jacobsthal_lucas(n-1) - jacobsthal_lucas(n-3) ",
        "generated_testcode": "assert jacobsthal_lucas(0) == 2\n",
        "test": "assert jacobsthal_lucas(5) == 31\nassert jacobsthal_lucas(2) == 5\nassert jacobsthal_lucas(4) == 17",
        "canonical_solution": "def jacobsthal_lucas(n): \r\n\tdp=[0] * (n + 1) \r\n\tdp[0] = 2\r\n\tdp[1] = 1\r\n\tfor i in range(2, n+1): \r\n\t\tdp[i] = dp[i - 1] + 2 * dp[i - 2]; \r\n\treturn dp[n]"
    },
    {
        "number": 530,
        "prompt": "Write a function to find the ration of negative numbers in an array of integers.\ndef negative_count(nums):\n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    count = 0\n    for num in nums:\n        if num < 0:\n            count += 1\n    return count/len(nums)\n\n# Test the function with the following inputs\nnums1 = [1, -2, 3, -4, 5, -6, 7, -8, 9]\nnums2 = [1, 2, 3, 4, 5, 6, 7, 8]\nnums3 = [-1, -2, -3, -4, -5, -6, -7, -8]\n\nprint(negative_count(nums1))\nprint(negative_count(nums2))\nprint(negative_count(nums3))\n\n# Output: 0.6 0.0 1.0\n# Explanation: In the first array, there are 6 negative numbers out of 6 total numbers, so the ratio is 6/6 = 1.0\n# In the second array, there are 0 negative numbers out of 6 total numbers, so the ratio is 0/6 = 0.0\n# In the third array, there are all negative numbers, so the ratio is 6/6 = 1.0 ",
        "generated_testcode": "assert negative_count([1, 2, 3, -4, -5, 6, -7, 8, -9]) == 4/9\n",
        "test": "assert negative_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])==0.31\nassert negative_count([2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8])==0.31\nassert negative_count([2, 4, -6, -9, 11, -12, 14, -5, 17])==0.44",
        "canonical_solution": "from array import array\r\ndef negative_count(nums):\r\n    n = len(nums)\r\n    n1 = 0\r\n    for x in nums:\r\n        if x < 0:\r\n            n1 += 1\r\n        else:\r\n          None\r\n    return round(n1/n,2)"
    },
    {
        "number": 531,
        "prompt": "Write a function to find minimum number of coins that make a given value.\ndef min_coins(coins, m, V): \n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    dp = [10**6] * (V+1) \n    dp[0] = 0\n    for i in range(1, V+1): \n        for j in range(m): \n            if coins[j] <= i: \n                dp[i] = min(dp[i], dp[i-coins[j]] + 1) \n    return dp[V] ",
        "generated_testcode": "assert min_coins([1, 2, 5, 10, 25, 50], 63, 4) == 3 # Expected output: 3 (10 + 10 + 10)\n",
        "test": "assert min_coins([9, 6, 5, 1] ,4,11)==2\nassert min_coins([4,5,6,7,8,9],6,9)==1\nassert min_coins([1, 2, 3],3,4)==2",
        "canonical_solution": "import sys \r\ndef min_coins(coins, m, V): \r\n    if (V == 0): \r\n        return 0\r\n    res = sys.maxsize \r\n    for i in range(0, m): \r\n        if (coins[i] <= V): \r\n            sub_res = min_coins(coins, m, V-coins[i]) \r\n            if (sub_res != sys.maxsize and sub_res + 1 < res): \r\n                res = sub_res + 1  \r\n    return res "
    },
    {
        "number": 532,
        "prompt": "Write a function to check if the two given strings are permutations of each other.\ndef check_permutation(str1, str2):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": true,
        "answer": "    if len(str1) != len(str2):\n        return False\n    if sorted(str1) == sorted(str2):\n        return True\n    return False\n\n# Test the function\nprint(check_permutation(\"abcd\", \"dcba\"))  # True\nprint(check_permutation(\"abc\", \"cba\"))  # True\nprint(check_permutation(\"abc\", \"def\"))  # False\nprint(check_permutation(\"abcd\", \"abdc\")) # False\nprint(check_permutation(\"python\", \"python\")) # True\nprint(check_permutation(\"programming\", \"gnimmargorp\")) # True\nprint(check_permutation(\"hello\", \"world\")) # False\n\n\n# A more optimized solution\ndef check_permutation(str1, str2):\n    if len(str1) != len(str2):\n        return False\n    char_dict = {}\n    for char in str1:\n        if char in char_dict:\n            char_dict[char] += 1\n        else:\n            char_dict[char] = 1\n    for char in str2:\n        if char in char_dict:\n            char_dict[char] -= 1\n        else:\n            char_dict[char] = 1\n    for count in char_dict.values():\n        if count != 0:\n            return False\n    return True\n\n# Test the function\nprint(check_permutation(\"abcd\", \"dcba\"))",
        "generated_testcode": "assert check_permutation(\"listen\", \"silent\") == True\n",
        "test": "assert check_permutation(\"abc\", \"cba\") == True\nassert check_permutation(\"test\", \"ttew\") == False\nassert check_permutation(\"xxyz\", \"yxzx\") == True",
        "canonical_solution": "def check_permutation(str1, str2):\r\n  n1=len(str1)\r\n  n2=len(str2)\r\n  if(n1!=n2):\r\n    return False\r\n  a=sorted(str1)\r\n  str1=\" \".join(a)\r\n  b=sorted(str2)\r\n  str2=\" \".join(b)\r\n  for i in range(0, n1, 1):\r\n    if(str1[i] != str2[i]):\r\n      return False\r\n  return True"
    },
    {
        "number": 533,
        "prompt": "Write a function to remove particular data type elements from the given tuple.\ndef remove_datatype(test_tuple, data_type):\n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    new_tuple = ()\n    for item in test_tuple:\n        if type(item) != data_type:\n            new_tuple += (item,)\n    return new_tuple\n\n#Test the function with below tuple\ntest_tuple = (1, 2, 3.5, '4', 'five', 6, 'seven', 'eight', 9.0)\nprint(remove_datatype(test_tuple, str))\n#Output: (1, 3.5, 6, 9.0)\n\n#Test the function with below tuple\ntest_tuple = (1, 2, 3.5, '4', 'five', 6, 'seven', 'eight', 9.0)\nprint(remove_datatype(test_tuple, int))\n#Output: ('4', 'seven', 9.0) ",
        "generated_testcode": "assert remove_datatype((\"hello\", 123, 45.67, \"world\", True, 78, 90, \"python\", 34) == (123, 45.67, 78, 34)\n",
        "test": "assert remove_datatype((4, 5, 4, 7.7, 1.2), int) == [7.7, 1.2]\nassert remove_datatype((7, 8, 9, \"SR\"), str) == [7, 8, 9]\nassert remove_datatype((7, 1.1, 2, 2.2), float) == [7, 2]",
        "canonical_solution": "def remove_datatype(test_tuple, data_type):\r\n  res = []\r\n  for ele in test_tuple:\r\n    if not isinstance(ele, data_type):\r\n      res.append(ele)\r\n  return (res) "
    },
    {
        "number": 534,
        "prompt": "Write a function to search a literals string in a string and also find the location within the original string where the pattern occurs.\ndef search_literal(pattern,text):\n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": true,
        "answer": "    for i in range(len(text)-len(pattern)+1):\n        if pattern == text[i:i+len(pattern)]:\n            return (True, i)\n    return (False, -1)\n\n# Test the function\nprint(search_literal(\"hello\",\"hello there world\")) # should return (True, 0)\nprint(search_literal(\"world\",\"hello there world\")) # should return (True, 7)\nprint(search_literal(\"python\",\"hello there world\")) # should return (False, -1)\nprint(search_literal(\"java\",\"python programming language\")) # should return (True, 10)\n",
        "generated_testcode": "assert search_literal(\"hello\",\"hello world\") == (True,0)\n",
        "test": "assert search_literal('python','python programming language')==(0,6)\nassert search_literal('programming','python programming language')==(7,18)\nassert search_literal('language','python programming language')==(19,27)",
        "canonical_solution": "import re\r\ndef search_literal(pattern,text):\r\n match = re.search(pattern, text)\r\n s = match.start()\r\n e = match.end()\r\n return (s, e)"
    },
    {
        "number": 535,
        "prompt": "Write a function to find the top or bottom surface area of a cylinder.\ndef topbottom_surfacearea(r):\n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    import math\n    pi = math.pi\n    top = 2 * pi * r**2\n    bottom = 2 * pi * r * r\n    return top + bottom\n\n# Test the function\nprint(topbottom_surfacearea(4))\nprint(topbottom_surfacearea(2))\nprint(topbottom_surfacearea(10))\n",
        "generated_testcode": "assert topbottom_surfacearea(5) == 314.159875\n",
        "test": "assert topbottom_surfacearea(10)==314.15000000000003\nassert topbottom_surfacearea(5)==78.53750000000001\nassert topbottom_surfacearea(4)==50.264",
        "canonical_solution": "def topbottom_surfacearea(r):\r\n  toporbottomarea=3.1415*r*r\r\n  return toporbottomarea"
    },
    {
        "number": 536,
        "prompt": "Write a function to select the nth items of a list.\ndef nth_items(list,n):\n",
        "checkpoint": "7B",
        "pass": 4,
        "correct": true,
        "answer": "    if n > len(list):\n        return \"Error: n is greater than the length of the list\"\n    else:\n        return list[n-1::n]\n\n#Test the function\nlist1 = [1,2,3,4,5,6,7,8,9,10]\nprint(nth_items(list1,3)) #Output: [3, 6, 9]\nprint(nth_items(list1,4)) #Output: [4, 8]\nprint(nth_items(list1,7)) #Output: [9]\nprint(nth_items(list1,10)) #Output: Error: n is greater than the length of the list",
        "generated_testcode": "assert nth_items([1,2,3,4,5,6,7,8,9], 3) == [3, 6, 9]\n",
        "test": "assert nth_items([1, 2, 3, 4, 5, 6, 7, 8, 9],2)==[1, 3, 5, 7, 9] \nassert nth_items([10,15,19,17,16,18],3)==[10,17] \nassert nth_items([14,16,19,15,17],4)==[14,17]",
        "canonical_solution": "def nth_items(list,n):\r\n return list[::n]"
    },
    {
        "number": 537,
        "prompt": "Write a python function to find the first repeated word in a given string.\ndef first_repeated_word(str1):\n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    words = str1.split()\n    word_dict = {}\n    for word in words:\n        if word in word_dict:\n            return word\n        else:\n            word_dict[word] = 1\n    return None\n\n# Test the function\nprint(first_repeated_word(\"hello world world world\"))\nprint(first_repeated_word(\"the quick brown fox jumped over the lazy dog\"))\nprint(first_repeated_word(\"I am a good boy. I am a good boy\"))\nprint(first_repeated_word(\"This is a sample string. This is a sample string\"))\nprint(first_repeated_word(\"apple apple orange orange banana mango apple\"))\nprint(first_repeated_word(\"apple banana mango orange banana\"))\nprint(first_repeated_word(\"This is a test string. This is another test string\"))\nprint(first_repeated_word(\"Hello world world\"))\n\n\n# Output:\n# world\n# the\n# good\n# sample\n# apple\n# banana\n# test\n# None\n# world\n\n# Note: The output for the last test case will return None as there is no repeated word in the string. ",
        "generated_testcode": "assert first_repeated_word(\"hello world world world\") == \"world\"\n",
        "test": "assert first_repeated_word(\"ab ca bc ab\") == \"ab\"\nassert first_repeated_word(\"ab ca bc\") == 'None'\nassert first_repeated_word(\"ab ca bc ca ab bc\") == \"ca\"",
        "canonical_solution": "def first_repeated_word(str1):\r\n  temp = set()\r\n  for word in str1.split():\r\n    if word in temp:\r\n      return word;\r\n    else:\r\n      temp.add(word)\r\n  return 'None'"
    },
    {
        "number": 538,
        "prompt": "Write a python function to convert a given string list to a tuple.\ndef string_list_to_tuple(str1):\n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    # Initialize an empty tuple\n    my_tuple = ()\n    # Traverse through each string in the list\n    for i in str1:\n        # Append the string to the tuple\n        my_tuple = my_tuple + (i,)\n    # Return the tuple\n    return my_tuple\n\n# Test the function\nstr1 = ['apple', 'banana', 'orange', 'mango']\nprint(string_list_to_tuple(str1))\n# Output: ('apple', 'banana', 'orange', 'mango')\n\n# Test the function\nstr1 = ['python', 'java', 'c++', 'ruby']\nprint(string_list_to_tuple(str1))\n# Output: ('python', 'java', 'c++', 'ruby')\n\n# Test the function\nstr1 = ['apple', 'orange', 'mango', 'banana']\nprint(string_list_to_tuple(str1))\n# Output: ('apple', 'orange', 'mango', 'banana') ",
        "generated_testcode": "assert string_list_to_tuple([\"apple\", \"banana\", \"cherry\", \"orange\"]), (\"apple\", \"banana\", \"cherry\")\n",
        "test": "assert string_list_to_tuple((\"python 3.0\")) == ('p', 'y', 't', 'h', 'o', 'n', '3', '.', '0')\nassert string_list_to_tuple((\"bigdata\")) == ('b', 'i', 'g', 'd', 'a', 't', 'a')\nassert string_list_to_tuple((\"language\")) == ('l', 'a', 'n', 'g', 'u', 'a', 'g','e')",
        "canonical_solution": "def string_list_to_tuple(str1):\r\n    result = tuple(x for x in str1 if not x.isspace()) \r\n    return result"
    },
    {
        "number": 539,
        "prompt": "Write a function to create a list containing the power of said number in bases raised to the corresponding number in the index using map function.\ndef basesnum_coresspondingnum(bases_num,index):\n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    return list(map(lambda base: base**index,bases_num))\n\nbases_num = [2, 3, 4, 5]\nindex = [1, 2, 3]\nprint(basesnum_coresspondingnum(bases_num,index)) # Output: [2, 9, 125]\n\n# Output is as expected. \n# Since 2^1 = 2, 2^2 = 4, 2^3 = 8; 3^1 = 3, 3^2 = 9, 3^3 = 27; 4^1 = 4, 4^2 = 16, 4^3 = 64, 5^1 = 5, 5^2 = 25, 5^3 = 125\n# So, the function returns [2, 9, 125] ",
        "generated_testcode": "assert list(map(lambda x: x**index, bases_num)) == basesnum_coresspondingnum(bases_num, index)\n\n",
        "test": "assert basesnum_coresspondingnum([10, 20, 30, 40, 50, 60, 70, 80, 90, 100],[1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[10, 400, 27000, 2560000, 312500000, 46656000000, 8235430000000, 1677721600000000, 387420489000000000, 100000000000000000000]\nassert basesnum_coresspondingnum([1, 2, 3, 4, 5, 6, 7],[10, 20, 30, 40, 50, 60, 70])==[1, 1048576, 205891132094649, 1208925819614629174706176, 88817841970012523233890533447265625, 48873677980689257489322752273774603865660850176, 143503601609868434285603076356671071740077383739246066639249]\nassert basesnum_coresspondingnum([4, 8, 12, 16, 20, 24, 28],[3, 6, 9, 12, 15, 18, 21])==[64, 262144, 5159780352, 281474976710656, 32768000000000000000, 6979147079584381377970176, 2456510688823056210273111113728]",
        "canonical_solution": "def basesnum_coresspondingnum(bases_num,index):\r\n  result = list(map(pow, bases_num, index))\r\n  return result"
    },
    {
        "number": 540,
        "prompt": "Write a python function to find the difference between highest and least frequencies in a given array.\ndef find_Diff(arr,n): \n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    freq = {} \n    for i in arr: \n        if i in freq: \n            freq[i] += 1\n        else: \n            freq[i] = 1\n    # finding the highest and lowest frequency \n    highest_freq = max(freq, key=freq.get) \n    lowest_freq = min(freq, key=freq.get) \n    return abs(freq[highest_freq] - freq[lowest_freq])\n  \n# Driver Code \narr = [1, 2, 3, 4, 2, 5, 3, 6, 7, 2, 4, 4, 5, 8, 9, 10] \nn = len(arr) \nprint(find_Diff(arr, n)) # Output: 7 ",
        "generated_testcode": "assert find_Diff([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20], 12) == 8\n",
        "test": "assert find_Diff([1,1,2,2,7,8,4,5,1,4],10) == 2\nassert find_Diff([1,7,9,2,3,3,1,3,3],9) == 3\nassert find_Diff([1,2,1,2],4) == 0",
        "canonical_solution": "def find_Diff(arr,n): \r\n    arr.sort()  \r\n    count = 0; max_count = 0; min_count = n \r\n    for i in range(0,(n-1)): \r\n        if arr[i] == arr[i + 1]: \r\n            count += 1\r\n            continue\r\n        else: \r\n            max_count = max(max_count,count) \r\n            min_count = min(min_count,count) \r\n            count = 0\r\n    return max_count - min_count "
    },
    {
        "number": 541,
        "prompt": "Write a function to find if the given number is abundant or not.\ndef get_sum(n): \n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    s = sum(i for i in range(1, n))\n    return s\n\ndef check_abundant(n): \n    if n < 12: \n        return False\n    if n == 12: \n        return True\n    else: \n        return n < get_sum(n)\n\ndef is_abundant(n): \n    if check_abundant(n): \n        return True\n    else: \n        return False\n\n# Driver code \nif __name__ == \"__main__\": \n    n = int(input(\"Enter a number: \"))\n    if is_abundant(n): \n        print(n, \"is an abundant number\") \n    else: \n        print(n, \"is not an abundant number\") ",
        "generated_testcode": "assert get_sum(12) == True\n",
        "test": "assert check_abundant(12) == True\nassert check_abundant(15) == False\nassert check_abundant(18) == True",
        "canonical_solution": "import math \r\ndef get_sum(n): \r\n\tsum = 0\r\n\ti = 1\r\n\twhile i <= (math.sqrt(n)): \r\n\t\tif n%i == 0: \r\n\t\t\tif n/i == i : \r\n\t\t\t\tsum = sum + i \r\n\t\t\telse: \r\n\t\t\t\tsum = sum + i \r\n\t\t\t\tsum = sum + (n / i ) \r\n\t\ti = i + 1\r\n\tsum = sum - n \r\n\treturn sum\r\ndef check_abundant(n): \r\n\tif (get_sum(n) > n): \r\n\t\treturn True\r\n\telse: \r\n\t\treturn False"
    },
    {
        "number": 542,
        "prompt": "Write a function to replace all occurrences of spaces, commas, or dots with a colon in the given string by using regex.\ndef fill_spaces(text):\n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    # Replace spaces with a colon\n    text = re.sub(r'\\s', ':', text)\n    # Replace commas with a colon\n    text = re.sub(r',', ':', text)\n    # Replace dots with a colon\n    text = re.sub(r'\\.', ':', text)\n    return text\n\n# Test the function with sample inputs\nprint(fill_spaces(\"This is a sample string, with spaces, dots, and commas.\"))\nprint(fill_spaces(\"Replace spaces with colons, commas, and dots\"))\nprint(fill_spaces(\"Replace spaces, commas, and dots with colons\"))\nprint(fill_spaces(\"Replace spaces with colons. Replace dots with colons\"))",
        "generated_testcode": "assert fill_spaces(\"Hello, world!\") == \"Hello:world:\"\n",
        "test": "assert fill_spaces('Boult Curve Wireless Neckband') == 'Boult:Curve:Wireless:Neckband'\nassert fill_spaces('Stereo Sound Sweatproof') == 'Stereo:Sound:Sweatproof'\nassert fill_spaces('Probass Curve Audio') == 'Probass:Curve:Audio'",
        "canonical_solution": "import re\r\ndef fill_spaces(text):\r\n  return (re.sub(\"[ ,.]\", \":\", text))"
    },
    {
        "number": 543,
        "prompt": "Write a function to add two numbers and print number of digits of sum.\ndef count_digits(num1,num2):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": true,
        "answer": "    sum = num1 + num2\n    count = 0\n    while(sum>0):\n        count += 1\n        sum//=10\n    return count\n\n# Test the function\nprint(count_digits(1234,567))\n\n# Output: 3\nprint(count_digits(98765,456))\n# Output: 4\nprint(count_digits(0,0))\n# Output: 1\nprint(count_digits(12345,6789))\n# Output: 4\n",
        "generated_testcode": "assert count_digits(123,456) == 3\n",
        "test": "assert count_digits(9875,10)==(4)\nassert count_digits(98759853034,100)==(11)\nassert count_digits(1234567,500)==(7)",
        "canonical_solution": "def count_digits(num1,num2):\r\n    number=num1+num2\r\n    count = 0\r\n    while(number > 0):\r\n        number = number // 10\r\n        count = count + 1\r\n    return count"
    },
    {
        "number": 544,
        "prompt": "Write a function to flatten the tuple list to a string.\ndef flatten_tuple(test_list):\n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    flattened_string = \"\"\n    for tuple_item in test_list:\n        for item in tuple_item:\n            flattened_string += str(item)\n    return flattened_string\n\n\nprint(flatten_tuple([(\"apple\", \"banana\", \"cherry\"), (\"grape\", \"orange\"), (\"kiwi\", \"mango\")]))  # Output: \"applebanancherrygrapeorangekiwimango\"\nprint(flatten_tuple([(\"hello\", \"world\"), (\"how\", \"are\", \"you\"), (\"doing\",)]) # Output: \"helloworldhowareyou\"\nprint(flatten_tuple([(\"apple\",)]) # Output: \"apple\"\nprint(flatten_tuple([(\"apple\", \"banana\", \"cherry\", \"grape\", \"orange\", \"kiwi\", \"mango\")]) # Output: \"applebanancherrygrapeorangekiwimango\"\n\n\n#Solution:\r\ndef flatten_tuple(test_list):\r\n    flattened_string = \"\"\r\n    for tuple_item in test_list:\r\n        for item in tuple_item:\r\n            flattened_string += str(item)\r\n    return flattened_string\r\n\r\n\r\nprint(flatten_tuple([(\"apple\", \"banana\", \"cherry\"), (\"grape\", \"orange\"), (\"kiwi\", \"mango\")])) # Output: \"applebanancherrygrapeorangekiwimango\"\r\n",
        "generated_testcode": "assert flatten_tuple(()) == \"\"\n",
        "test": "assert flatten_tuple([('1', '4', '6'), ('5', '8'), ('2', '9'), ('1', '10')]) == '1 4 6 5 8 2 9 1 10'\nassert flatten_tuple([('2', '3', '4'), ('6', '9'), ('3', '2'), ('2', '11')]) == '2 3 4 6 9 3 2 2 11'\nassert flatten_tuple([('14', '21', '9'), ('24', '19'), ('12', '29'), ('23', '17')]) == '14 21 9 24 19 12 29 23 17'",
        "canonical_solution": "def flatten_tuple(test_list):\r\n  res = ' '.join([idx for tup in test_list for idx in tup])\r\n  return (res) "
    },
    {
        "number": 545,
        "prompt": "Write a python function to toggle only first and last bits of a given number.\ndef take_L_and_F_set_bits(n) : \n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    n_binary = bin(n)[2:]\n    if n_binary[0] == '1' :\n        n_binary = '0' + n_binary\n    else :\n        n_binary = '1' + n_binary\n    if n_binary[-1] == '0' :\n        n_binary = n_binary[:-1] + '1'\n    else :\n        n_binary = n_binary[:-1] + '0'\n    return int(n_binary,2)\n\n# Test the function\nn = 5\nprint(\"Original Number :\",n)\nprint(\"Modified Number :\",take_L_and_F_set_bits(n))\n\nn = 10\nprint(\"\\nOriginal Number :\",n)\nprint(\"Modified Number :\",take_L_and_F_set_bits(n))\nn = 14\nprint(\"\\nOriginal Number :\",n)\nprint(\"Modified Number :\",take_L_and_F_set_bits(n))\nn = 20\nprint(\"\\nOriginal Number :\",n)\nprint(\"Modified Number :\",take_L_and_F_set_bits(n))\nn = 25\nprint(\"\\nOriginal Number :\",n)\nprint(\"Modified Number :\",take_L_and_F_set_bits(n))\nn = 31\nprint(\"\\nOriginal Number :\",n)\nprint(\"Modified Number :\",take_L_and_F_set_bits(n",
        "generated_testcode": "assert take_L_and_F_set_bits(10) == 5\n",
        "test": "assert toggle_F_and_L_bits(10) == 3\nassert toggle_F_and_L_bits(15) == 6\nassert toggle_F_and_L_bits(20) == 5",
        "canonical_solution": "def take_L_and_F_set_bits(n) : \r\n    n = n | n >> 1\r\n    n = n | n >> 2\r\n    n = n | n >> 4\r\n    n = n | n >> 8\r\n    n = n | n >> 16 \r\n    return ((n + 1) >> 1) + 1      \r\ndef toggle_F_and_L_bits(n) :  \r\n    if (n == 1) : \r\n        return 0 \r\n    return n ^ take_L_and_F_set_bits(n) "
    },
    {
        "number": 546,
        "prompt": "Write a function to find the last occurrence of a character in a string.\ndef last_occurence_char(string,char):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": true,
        "answer": "    for i in range(len(string)-1, -1, -1):\n        if string[i] == char:\n            return i\n    return -1\n\n# Test the function\nprint(last_occurence_char(\"hello world\", \"l\"))\n# Output: 9\nprint(last_occurence_char(\"hello world\", \"o\"))\n# Output: 7\nprint(last_occurence_char(\"hello world\", \"x\"))\n# Output: -1\n",
        "generated_testcode": "assert last_occurence_char(\"hello world\", \"l\") == 9\n",
        "test": "assert last_occurence_char(\"hello world\",'l')==10\nassert last_occurence_char(\"language\",'g')==7\nassert last_occurence_char(\"little\",'y')==None",
        "canonical_solution": "def last_occurence_char(string,char):\r\n flag = -1\r\n for i in range(len(string)):\r\n     if(string[i] == char):\r\n         flag = i\r\n if(flag == -1):\r\n    return None\r\n else:\r\n    return flag + 1"
    },
    {
        "number": 547,
        "prompt": "Write a python function to find the sum of hamming distances of all consecutive numbers from o to n.\ndef Total_Hamming_Distance(n):   \n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    def hamming_distance(x, y):\n        x = bin(x)[2:]\n        y = bin(y)[2:]\n        if len(x) > len(y):\n            x = x.zfill(len(y) - len(x))\n        elif len(y) > len(x):\n            y = y.zfill(len(x) - len(y))\n        return sum(bool(int(x) ^ int(y)) for x, y in zip(x, y))\n    total = 0\n    for i in range(n):\n        total += hamming_distance(i, i+1)\n    return total\n\n# Test the function\nprint(Total_Hamming_Distance(10)) # Output: 24 ",
        "generated_testcode": "assert Total_Hamming_Distance(10) == 10, \"Test case 1 failed\"\n",
        "test": "assert Total_Hamming_Distance(4) == 7\nassert Total_Hamming_Distance(2) == 3\nassert Total_Hamming_Distance(5) == 8",
        "canonical_solution": "def Total_Hamming_Distance(n):   \r\n    i = 1\r\n    sum = 0\r\n    while (n // i > 0):  \r\n        sum = sum + n // i  \r\n        i = i * 2     \r\n    return sum"
    },
    {
        "number": 548,
        "prompt": "Write a function to find the length of the longest increasing subsequence of the given sequence.\ndef longest_increasing_subsequence(arr): \n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    n = len(arr) \n    if n == 0: \n        return 0\n    \n    # Initialize the array dp with 1 for all indexes \n    dp = [1]*n \n    # Initialize the sequence array to store the longest increasing subsequence \n    lis = [arr[0]] \n    \n    for i in range(1, n): \n        for j in range(i): \n            if arr[i] > arr[j] and dp[i] < dp[j] + 1: \n                dp[i] = dp[j]+1 \n                lis[i] = arr[j] \n   \n        if dp[i] == 1: \n            lis.append(arr[i]) \n   \n    return len(lis) ",
        "generated_testcode": "assert longest_increasing_subsequence([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20] ) == 10\n",
        "test": "assert longest_increasing_subsequence([10, 22, 9, 33, 21, 50, 41, 60]) == 5\nassert longest_increasing_subsequence([3, 10, 2, 1, 20]) == 3\nassert longest_increasing_subsequence([50, 3, 10, 7, 40, 80]) == 4 ",
        "canonical_solution": "def longest_increasing_subsequence(arr): \r\n\tn = len(arr) \r\n\tlongest_increasing_subsequence = [1]*n \r\n\tfor i in range (1 , n): \r\n\t\tfor j in range(0 , i): \r\n\t\t\tif arr[i] > arr[j] and longest_increasing_subsequence[i]< longest_increasing_subsequence[j] + 1 : \r\n\t\t\t\tlongest_increasing_subsequence[i] = longest_increasing_subsequence[j]+1\r\n\tmaximum = 0\r\n\tfor i in range(n): \r\n\t\tmaximum = max(maximum , longest_increasing_subsequence[i]) \r\n\treturn maximum"
    },
    {
        "number": 549,
        "prompt": "Write a python function to find the sum of fifth power of first n odd natural numbers.\ndef odd_Num_Sum(n) : \n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    i = 1\n    sum = 0\n    while i<=n : \n        sum += i**5\n        i += 2\n    return sum\n\n# Test the function with an example\nprint(odd_Num_Sum(10)) # Output: 33877\nprint(odd_Num_Sum(5)) # Output: 172",
        "generated_testcode": "assert odd_Num_Sum(5) == 225\n",
        "test": "assert odd_Num_Sum(1) == 1\nassert odd_Num_Sum(2) == 244\nassert odd_Num_Sum(3) == 3369",
        "canonical_solution": "def odd_Num_Sum(n) : \r\n    j = 0\r\n    sm = 0\r\n    for i in range(1,n+1) : \r\n        j = (2*i-1) \r\n        sm = sm + (j*j*j*j*j)     \r\n    return sm "
    },
    {
        "number": 550,
        "prompt": "Write a python function to find the maximum element in a sorted and rotated array.\ndef find_Max(arr,low,high): \n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    if high == low: \n        return arr[low] \n    if high == low+1: \n        return max(arr[low], arr[high]) \n    if arr[low] > arr[high]: \n        return arr[low] \n   \n    # Find the mid index \n    mid = (low + high)//2\n    # If the middle element is greater than the first element, \n    # then the maximum element is in the second half \n    if arr[mid] > arr[low]: \n        return find_Max(arr, (mid+1) , high) \n    # Else the maximum element is in the first half \n    return find_Max(arr, low, (mid-1) ) \n    \n   \ndef max_in_rotated_sorted_array(arr): \n    n = len(arr) \n    return find_Max(arr, 0, n-1) \n\narr = [15, 18, 2, 3, 4, 5, 1, 7, 9, 11] \nprint(\"The maximum element in the given rotated sorted array is\", max_in_rotated_array(arr)) ",
        "generated_testcode": "assert find_Max([4,5,6,7,8,9,10,1,2,3],0,5) == 10\n",
        "test": "assert find_Max([2,3,5,6,9],0,4) == 9\nassert find_Max([3,4,5,2,1],0,4) == 5\nassert find_Max([1,2,3],0,2) == 3",
        "canonical_solution": "def find_Max(arr,low,high): \r\n    if (high < low): \r\n        return arr[0] \r\n    if (high == low): \r\n        return arr[low] \r\n    mid = low + (high - low) // 2 \r\n    if (mid < high and arr[mid + 1] < arr[mid]): \r\n        return arr[mid] \r\n    if (mid > low and arr[mid] < arr[mid - 1]): \r\n        return arr[mid - 1]  \r\n    if (arr[low] > arr[mid]): \r\n        return find_Max(arr,low,mid - 1) \r\n    else: \r\n        return find_Max(arr,mid + 1,high) "
    },
    {
        "number": 551,
        "prompt": "Write a function to extract a specified column from a given nested list.\ndef extract_column(list1, n):\n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    column = []\n    for sublist in list1:\n        column.append(sublist[n])\n    return column\n\n# Test the function\nnested_list = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nprint(extract_column(nested_list, 1)) # Output: [2, 5, 8]\n\nnested_list = [[10, 20, 30], [40, 50, 60], [70, 80, 90]]\nprint(extract_column(nested_list, 2)) # Output: [30, 50, 80]\n\nnested_list = [[100, 200, 30, 40], [50, 60, 70, 80], [90, 100, 110, 120]]\nprint(extract_column(nested_list, 0)) # Output: [10, 50, 90]\n\n# The function takes a nested list as input and a column number (n) as input. It returns a new list containing the nth column of the input list. ",
        "generated_testcode": "assert extract_column([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 1) == [2, 5, 8]\n",
        "test": "assert extract_column([[1, 2, 3], [2, 4, 5], [1, 1, 1]],0)==[1, 2, 1]\nassert extract_column([[1, 2, 3], [-2, 4, -5], [1, -1, 1]],2)==[3, -5, 1]\nassert extract_column([[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]],0)==[1, 5, 1, 13, 5, 9]",
        "canonical_solution": "def extract_column(list1, n):\r\n   result = [i.pop(n) for i in list1]\r\n   return result "
    },
    {
        "number": 552,
        "prompt": "Write a python function to check whether a given sequence is linear or not.\ndef Seq_Linear(seq_nums):\n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    # Initialize a flag variable\n    flag = True\n    # Sort the sequence\n    seq_nums.sort()\n    # Loop through each element of the sequence\n    for i in range(len(seq_nums)-1):\n        # Check if the difference between consecutive elements is the same\n        if seq_nums[i+1] - seq_nums[i] != 1:\n            flag = False\n            break\n    return flag\n\n# Test the function\nseq_nums = [1, 2, 3, 4, 5, 6, 7, 8, 9]\nprint(Seq_Linear(seq_nums)) # Output: True\n\nseq_nums = [1, 3, 4, 6, 7, 8, 10]\nprint(Seq_Linear(seq_nums)) # Output: False\n",
        "generated_testcode": "assert Seq_Linear([1,2,3,4,5,6,7,8,9]) == True\n",
        "test": "assert Seq_Linear([0,2,4,6,8,10]) == \"Linear Sequence\"\nassert Seq_Linear([1,2,3]) == \"Linear Sequence\"\nassert Seq_Linear([1,5,2]) == \"Non Linear Sequence\"",
        "canonical_solution": "def Seq_Linear(seq_nums):\r\n  seq_nums = [seq_nums[x] - seq_nums[x-1] for x in range(1, len(seq_nums))]\r\n  if len(set(seq_nums)) == 1: \r\n    return \"Linear Sequence\"\r\n  else:\r\n    return \"Non Linear Sequence\""
    },
    {
        "number": 553,
        "prompt": "Write a function to convert the given tuple to a floating-point number.\ndef tuple_to_float(test_tup):\n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    if len(test_tup) == 1:\n        return float(test_tup[0])\n    else:\n        return float(test_tup[0]) + float(test_tup[1])/10**len(test_tup)\n\n# Test the function with some sample inputs\nprint(tuple_to_float((1, 2, 3, 4)) == 1.23)  # True\nprint(tuple_to_float((1, 2, 3, 5) == 1.25)  # True\nprint(tuple_to_float((1, 2, 0) == 1.2)  # True\nprint(tuple_to_float((1,) == 1.0)  # True\nprint(tuple_to_float((0,) == 0.0)  # True\nprint(tuple_to_float((1, 2, 3, 4, 5, 6) == None)  # False\nprint(tuple_to_float(1) == None)  # TypeError: tuple indices must be integers or slices, not float\nprint(tuple_to_float((1, 'a') == None)  # TypeError: int() argument must be a string, a bytes-like object or a number, not 'str'\n\n\n# Explanation:\n# The function first checks if the length of the tuple is 1. If it is, it simply returns the first element as a float. \n# If not, it calculates",
        "generated_testcode": "assert tuple_to_float((1, 2, 3, 4, 5, 6) == 1.23456\n",
        "test": "assert tuple_to_float((4, 56)) == 4.56\nassert tuple_to_float((7, 256)) == 7.256\nassert tuple_to_float((8, 123)) == 8.123",
        "canonical_solution": "def tuple_to_float(test_tup):\r\n  res = float('.'.join(str(ele) for ele in test_tup))\r\n  return (res) "
    },
    {
        "number": 554,
        "prompt": "Write a python function to find odd numbers from a mixed list.\ndef Split(list): \n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    odd_list = []\n    even_list = []\n    for i in list:\n        if i%2 != 0:\n            odd_list.append(i)\n        else:\n            even_list.append(i)\n    return odd_list,even_list\n\ndef main():\n    list1 = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]\n    odd,even = Split(list1)\n    print(\"Odd numbers: \",odd)\n    print(\"Even numbers: \",even)\n\nmain()\n\n#Output: Odd numbers: [1, 3, 5, 7, 9, 11, 13, 15, 17, 19]\n#       Even numbers: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20] ",
        "generated_testcode": "assert Split([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20] ) == [1,3,5,7,9,11,13,15,17,19]\n",
        "test": "assert Split([1,2,3,4,5,6]) == [1,3,5]\nassert Split([10,11,12,13]) == [11,13]\nassert Split([7,8,9,1]) == [7,9,1]",
        "canonical_solution": "def Split(list): \r\n    od_li = [] \r\n    for i in list: \r\n        if (i % 2 != 0): \r\n            od_li.append(i)  \r\n    return od_li"
    },
    {
        "number": 555,
        "prompt": "Write a python function to find the difference between sum of cubes of first n natural numbers and the sum of first n natural numbers.\ndef difference(n) :  \n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    sum_of_cubes = 0\n    sum_of_numbers = 0\n    for i in range(1, n+1) :\n        sum_of_cubes += i ** 3\n        sum_of_numbers += i\n    return (sum_of_numbers ** 2) - sum_of_cubes\n\n# Test the function\nn = int(input(\"Enter a value of n: \"))\nprint(\"The difference is:\", difference(n))\n\n# Output\n# Enter a value of n: 5\n# The difference is: 35\n# Explanation: \n# sum of cubes of first 5 natural numbers are 1^3 + 2^3 + 3^3 + 4^3 + 5^3 = 1 + 8 + 27 + 64 + 125 = 216\n# sum of first 5 natural numbers are 1 + 2 + 3 + 4 + 5 + 6 = 15\n# Therefore, difference = (15^2) - 216 = 15^2 - 216 = 225 - 216 = 9\n# So, the output is 9\n\n\n# Enter a value of n: 10\n# The difference is: 3025\n# Explanation:\n# sum of cubes of first 10 natural numbers are 1^3 + 2^3 + 3^3 + 4^3 + 5",
        "generated_testcode": "assert difference(5) == 125 - 5*5 = 120\n",
        "test": "assert difference(3) == 30\nassert difference(5) == 210\nassert difference(2) == 6",
        "canonical_solution": "def difference(n) :  \r\n    S = (n*(n + 1))//2;  \r\n    res = S*(S-1);  \r\n    return res;  "
    },
    {
        "number": 556,
        "prompt": "Write a python function to count the pairs with xor as an odd number.\ndef find_Odd_Pair(A,N) : \n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    A = sorted(A)\n    count = 0\n    for i in range(N) : \n        for j in range(i+1,N) : \n            xor = A[i] ^ A[j]\n            if xor & 1 == 1 : \n                count += 1\n    return count \n\n# Driver code \nA = [1,2,3,4,5,6,7,8,9,10]\nN = len(A)\nprint(find_Odd_Pair(A,N))\n\n\n# Output : 3\n# There are 3 pairs with xor as an odd number. ",
        "generated_testcode": "assert find_Odd_Pair([1,2,3,4,5,6,7,8,9], 3) == 4\n",
        "test": "assert find_Odd_Pair([5,4,7,2,1],5) == 6\nassert find_Odd_Pair([7,2,8,1,0,5,11],7) == 12\nassert find_Odd_Pair([1,2,3],3) == 2",
        "canonical_solution": "def find_Odd_Pair(A,N) : \r\n    oddPair = 0\r\n    for i in range(0,N) :  \r\n        for j in range(i+1,N) :  \r\n            if ((A[i] ^ A[j]) % 2 != 0):  \r\n                oddPair+=1  \r\n    return oddPair  "
    },
    {
        "number": 557,
        "prompt": "Write a function to toggle characters case in a string.\ndef toggle_string(string):\n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    \"\"\"\n    Toggles the case of characters in a string\n    :param string:\n    :return: Toggled string\n    \"\"\"\n    toggled = \"\"\n    for char in string:\n        if char.isupper():\n            toggled += char.lower()\n        else:\n            toggled += char.upper()\n    return toggled\n\n#Test the function\nprint(toggle_string(\"Hello World\"))  # Output: hELLO wORLD\nprint(toggle_string(\"Python\"))    # Output: pYTHON\nprint(toggle_string(\"HELLO WORLD\")) # Output: hELLO wORLD\nprint(toggle_string(\"\"))        # Output: \"\"\nprint(toggle_string(\"1234\"))    # Output: 1234\nprint(toggle_string(\"AaBbCc\"))  # Output: aABBcC\n\n\n#Alternative solution using list comprehension\ndef toggle_string(string):\n    return \"\".join([char.lower() if char.isupper() else char.upper() for char in string])",
        "generated_testcode": "assert toggle_string(\"Hello World\") == \"hELLO wORLD\"\n",
        "test": "assert toggle_string(\"Python\")==(\"pYTHON\")\nassert toggle_string(\"Pangram\")==(\"pANGRAM\")\nassert toggle_string(\"LIttLE\")==(\"liTTle\")",
        "canonical_solution": "def toggle_string(string):\r\n string1 = string.swapcase()\r\n return string1"
    },
    {
        "number": 558,
        "prompt": "Write a python function to find the digit distance between two integers.\ndef digit_distance_nums(n1, n2):\n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    n1_str = str(n1)\n    n2_str = str(n2)\n    max_len = max(len(n1_str), len(n2_str))\n    n1_list = [int(digit) for digit in n1_str]\n    n2_list = [int(digit) for digit in n2_str]\n    \n    difference = 0\n    for i in range(max_len):\n        n1_digit = n1_list[i] if i < len(n1_list) else 0\n        n2_digit = n2_list[i] if i < len(n2_list) else 0\n        difference += abs(n1_digit - n2_digit)\n    return difference\n\n# Test cases\nprint(digit_distance_nums(134, 258)) # 15\nprint(digit_distance_nums(99, 123)) # 6\nprint(digit_distance_nums(1234, 5678)) # 11\nprint(digit_distance_nums(1000, 1000)) # 0",
        "generated_testcode": "assert digit_distance_nums(1234, 456) == 3\n",
        "test": "assert digit_distance_nums(1,2) == 1\nassert digit_distance_nums(23,56) == 6\nassert digit_distance_nums(123,256) == 7",
        "canonical_solution": "def digit_distance_nums(n1, n2):\r\n         return sum(map(int,str(abs(n1-n2))))"
    },
    {
        "number": 559,
        "prompt": "Write a function to find the largest sum of contiguous subarray in the given array.\ndef max_sub_array_sum(a, size):\n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    # Initialize the maximum sum variable\n    max_so_far = float('-inf')\n    max_ending_here = 0\n    \n    # Traverse through the array\n    for i in range(0, size):\n        max_ending_here += a[i]\n        \n        if max_ending_here < 0:\n            max_ending_here = 0\n        elif max_so_far < max_ending_here:\n            max_so_far = max_ending_here\n            \n    return max_so_far\n\n# Test the function\na = [-2, -3, 4, -1, -2, 1, 5, -3, 2]\nsize = len(a)\nprint(\"Maximum contiguous sum is\", max_sub_array_sum(a, size))\n\n\n# Output: 7\n# Explanation: The contiguous sub-array [4, -1, 5] has the largest sum = 9. ",
        "generated_testcode": "assert max_sub_array_sum([1, -2, 3, 10, -5, 6, -2, 7, 8, -1], 6) == 18\n",
        "test": "assert max_sub_array_sum([-2, -3, 4, -1, -2, 1, 5, -3], 8) == 7\nassert max_sub_array_sum([-3, -4, 5, -2, -3, 2, 6, -4], 8) == 8\nassert max_sub_array_sum([-4, -5, 6, -3, -4, 3, 7, -5], 8) == 10",
        "canonical_solution": "def max_sub_array_sum(a, size):\r\n  max_so_far = 0\r\n  max_ending_here = 0\r\n  for i in range(0, size):\r\n    max_ending_here = max_ending_here + a[i]\r\n    if max_ending_here < 0:\r\n      max_ending_here = 0\r\n    elif (max_so_far < max_ending_here):\r\n      max_so_far = max_ending_here\r\n  return max_so_far"
    },
    {
        "number": 560,
        "prompt": "Write a function to find the union of elements of the given tuples.\ndef union_elements(test_tup1, test_tup2):\n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    union = set()\n    for i in test_tup1:\n        for j in test_tup2:\n            if i == j:\n                union.add(i)\n    return union\n\n#Example usage:\ntest_tup1 = (1,2,3,4,5,6)\ntest_tup2 = (4,5,6,7,8,9)\nprint(union_elements(test_tup1, test_tup2)) # Output: {4, 5, 6}\n\n# The output should be the set containing the elements that are common in both tuples, which are 4 and 5. ",
        "generated_testcode": "assert union_elements((1,2,3,4,5), (3,4,5,6,7)) == (1,2,3,4,5,6,7)\n",
        "test": "assert union_elements((3, 4, 5, 6),(5, 7, 4, 10) ) == (3, 4, 5, 6, 7, 10)\nassert union_elements((1, 2, 3, 4),(3, 4, 5, 6) ) == (1, 2, 3, 4, 5, 6)\nassert union_elements((11, 12, 13, 14),(13, 15, 16, 17) ) == (11, 12, 13, 14, 15, 16, 17)",
        "canonical_solution": "def union_elements(test_tup1, test_tup2):\r\n  res = tuple(set(test_tup1 + test_tup2))\r\n  return (res) "
    },
    {
        "number": 561,
        "prompt": "Write a function to assign with each element, its pair elements from other similar pairs in the given tuple.\ndef assign_elements(test_list):\n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    similar_pairs = []\n    for i in range(len(test_list) - 1):\n        for j in range(i + 1, len(test_list)):\n            if abs(test_list[i] - test_list[j]) <= 1:\n                similar_pairs.append((test_list[i], test_list[j]))\n    for i in range(len(test_list)):\n        assigned = False\n        for pair in similar_pairs:\n            if test_list[i] in pair:\n                for pair_element in pair:\n                    if not assigned:\n                        test_list[i] = pair_element\n                        assigned = True\n                else:\n                    break\n    return test_list\n\n# Test\nprint(assign_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\n# Output: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]\n# Explanation:\n# There are no pairs in the given tuple with difference less than or equal to 1.\n\nprint(assign_elements([1, 3, 5, 7, 9, 11, 13, 15, 17, 19]))\n# Output: [1, 3, 5, 7, 9, 11, ",
        "generated_testcode": "assert assign_elements(('a', 'b', 'c', 'd', 'e', 'f', 'g') == {'a': ['b', 'c', 'e', 'f'], 'b': ['a', 'c', 'd'], 'c': ['a', 'b', 'd', 'e'], 'd': ['b', 'c', 'e', 'f'], 'e': ['a', 'c', 'd', 'f'], 'f': ['a', 'd', 'g']}\n\n# Test case 2\n",
        "test": "assert assign_elements([(5, 3), (7, 5), (2, 7), (3, 8), (8, 4)] ) == {3: [8], 5: [3], 7: [5], 2: [7], 8: [4], 4: []}\nassert assign_elements([(6, 4), (9, 4), (3, 8), (4, 9), (9, 5)] ) == {4: [9], 6: [4], 9: [4, 5], 8: [], 3: [8], 5: []}\nassert assign_elements([(6, 2), (6, 8), (4, 9), (4, 9), (3, 7)] ) == {2: [], 6: [2, 8], 8: [], 9: [], 4: [9, 9], 7: [], 3: [7]}",
        "canonical_solution": "def assign_elements(test_list):\r\n  res = dict()\r\n  for key, val in test_list:\r\n    res.setdefault(val, [])\r\n    res.setdefault(key, []).append(val)\r\n  return (res) "
    },
    {
        "number": 562,
        "prompt": "Write a python function to find the maximum length of sublist.\ndef Find_Max_Length(lst):  \n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    max_length = 0\n    for i in range(len(lst)):\n        current_length = 1\n        for j in range(i+1, len(lst)):\n            if lst[i] == lst[j]:\n                current_length += 1\n            else:\n                break\n        if current_length > max_length:\n            max_length = current_length\n    return max_length\n\n#example usage:\nlst = [1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 6, 7, 7]\nprint(Find_Max_Length(lst)) # output: 3 ",
        "generated_testcode": "assert Find_Max_Length([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20] ) == 10\n",
        "test": "assert Find_Max_Length([[1],[1,4],[5,6,7,8]]) == 4\nassert Find_Max_Length([[0,1],[2,2,],[3,2,1]]) == 3\nassert Find_Max_Length([[7],[22,23],[13,14,15],[10,20,30,40,50]]) == 5",
        "canonical_solution": "def Find_Max_Length(lst):  \r\n    maxLength = max(len(x) for x in lst )\r\n    return maxLength "
    },
    {
        "number": 563,
        "prompt": "Write a function to extract values between quotation marks of a string.\ndef extract_values(text):\n",
        "checkpoint": "7B",
        "pass": 3,
        "correct": true,
        "answer": "    result = []\n    inside_quotes = False\n    current_value = \"\"\n    for c in text:\n        if c == '\"':\n            inside_quotes = not inside_quotes\n            if inside_quotes:\n                current_value = \"\"\n            else:\n                result.append(current_value)\n        elif inside_quotes:\n            current_value += c\n    return result\n\n\n# Test cases\nprint(extract_values('The price of the product is \"50\" and its name is \"Product X\"')) # should return ['50', 'Product X']\nprint(extract_values('The price is \"50\" and the name is \"Product X\" and the description is \"Product description\"')) # should return ['50', 'Product X', 'Product description']\nprint(extract_values('The product price is \"50\" and its name is \"Product X\"')) # should return ['50', 'Product X']\nprint(extract_values('Price is 50$ and name is \"Product X\"')) # should return []\n",
        "generated_testcode": "assert extract_values('Hello \"world\"') == ['world']\n",
        "test": "assert extract_values('\"Python\", \"PHP\", \"Java\"')==['Python', 'PHP', 'Java']\nassert extract_values('\"python\",\"program\",\"language\"')==['python','program','language']\nassert extract_values('\"red\",\"blue\",\"green\",\"yellow\"')==['red','blue','green','yellow']",
        "canonical_solution": "import re\r\ndef extract_values(text):\r\n return (re.findall(r'\"(.*?)\"', text))"
    },
    {
        "number": 564,
        "prompt": "Write a python function to count unequal element pairs from the given array.\ndef count_Pairs(arr,n): \n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    count = 0\n    for i in range(n): \n        for j in range(i+1, n): \n            if arr[i] != arr[j]: \n                count += 1\n    return count ",
        "generated_testcode": "assert count_Pairs([1,2,3,4,5,6,7,8,9],6) == 21\n",
        "test": "assert count_Pairs([1,2,1],3) == 2\nassert count_Pairs([1,1,1,1],4) == 0\nassert count_Pairs([1,2,3,4,5],5) == 10",
        "canonical_solution": "def count_Pairs(arr,n): \r\n    cnt = 0; \r\n    for i in range(n): \r\n        for j in range(i + 1,n): \r\n            if (arr[i] != arr[j]): \r\n                cnt += 1; \r\n    return cnt; "
    },
    {
        "number": 565,
        "prompt": "Write a python function to split a string into characters.\ndef split(word): \n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": true,
        "answer": "    return list(word) \n\n#Test the function with an example \nprint(split(\"hello\")) # ['h', 'e', 'l', 'l', 'o']\nprint(split(\"world\")) # ['w', 'o', 'r', 'l', 'd'] ",
        "generated_testcode": "assert split(\"hello\") == ['h', 'e', 'l', 'l', 'o']\n",
        "test": "assert split('python') == ['p','y','t','h','o','n']\nassert split('Name') == ['N','a','m','e']\nassert split('program') == ['p','r','o','g','r','a','m']",
        "canonical_solution": "def split(word): \r\n    return [char for char in word] "
    },
    {
        "number": 566,
        "prompt": "Write a function to get the sum of a non-negative integer.\ndef sum_digits(n):\n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    total = 0\n    while n > 0:\n        total += n % 10\n        n //= 10\n    return total\n\n# Test cases\nprint(sum_digits(1234)) # Output: 10\nprint(sum_digits(9876)) # Output: 21\nprint(sum_digits(123456789)) # Output: 45",
        "generated_testcode": "assert sum_digits(123) == 6\n",
        "test": "assert sum_digits(345)==12\nassert sum_digits(12)==3\nassert sum_digits(97)==16",
        "canonical_solution": "def sum_digits(n):\r\n  if n == 0:\r\n    return 0\r\n  else:\r\n    return n % 10 + sum_digits(int(n / 10))"
    },
    {
        "number": 567,
        "prompt": "Write a function to check whether a specified list is sorted or not.\ndef issort_list(list1):\n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    n = len(list1)\n    if n == 0 or n == 1:\n        return True\n    else:\n        for i in range(1, n):\n            if list1[i] < list1[i-1]:\n                return False\n    return True\n\n\n# Test the function\nlst1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nlst2 = [9, 8, 7, 6, 5, 4, 3, 2, 1]\nlst3 = [1, 2, 2, 3, 3, 4, 4, 5, 5]\n\nprint(issort_list(lst1))\nprint(issort_list(lst2))\nprint(issort_list(lst3))\n",
        "generated_testcode": "assert issort_list([1,2,3,4,5,6,7,8,9]) == True\n",
        "test": "assert issort_list([1,2,4,6,8,10,12,14,16,17])==True\nassert issort_list([1, 2, 4, 6, 8, 10, 12, 14, 20, 17])==False\nassert issort_list([1, 2, 4, 6, 8, 10,15,14,20])==False",
        "canonical_solution": "def issort_list(list1):\r\n    result = all(list1[i] <= list1[i+1] for i in range(len(list1)-1))\r\n    return result"
    },
    {
        "number": 568,
        "prompt": "Write a function to create a list of empty dictionaries.\ndef empty_list(length):\n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    result = []\n    for i in range(length):\n        result.append({})\n    return result\n\n# Test the function\nprint(empty_list(5))\n\n# Output: [{}, {}, {}, {}, {}, {}, {}]\n\n# Test the function\nprint(empty_list(3))\n\n# Output: [{}, {}, {}]\n\n# Test the function\nprint(empty_list(1))\n# Output: [{}] ",
        "generated_testcode": "assert empty_list(5) == [{} for i in range(5)]\n",
        "test": "assert empty_list(5)==[{},{},{},{},{}]\nassert empty_list(6)==[{},{},{},{},{},{}]\nassert empty_list(7)==[{},{},{},{},{},{},{}]",
        "canonical_solution": "def empty_list(length):\r\n empty_list = [{} for _ in range(length)]\r\n return empty_list"
    },
    {
        "number": 569,
        "prompt": "Write a function to sort each sublist of strings in a given list of lists.\ndef sort_sublists(list1):\n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    for i in range(len(list1)):\n        list1[i].sort()\n    return list1\n\n# Example usage:\nmy_list = [['cat', 'dog', 'bird'], ['apple', 'banana', 'orange', 'grape'], ['pizza', 'burger', 'sushi']]\nprint(sort_sublists(my_list)) # Output: [['apple', 'bird', 'cat'], ['dog'], ['grape', 'orange', 'pizza', 'sushi']]\n\n# Test cases\nprint(sort_sublists([['cat', 'dog', 'bird'], ['apple', 'banana', 'orange', 'grape'], ['pizza', 'burger', 'sushi']])) # Output: [['apple', 'bird', 'cat'], ['dog'], ['grape', 'orange', 'pizza', 'sushi']]\nprint(sort_sublists([['a', 'c', 'e', 'b', 'd', 'f'], ['h', 'g', 'k', 'l'], ['z', 'y', 'x', 'w', 'q']])) # Output: [['a', 'b', 'c', 'd', 'f'], ['g', 'h', 'k', 'l'], ['q', 'w', 'x', 'y', 'z']]\nprint(sort_sublists([['apple', 'banana', 'orange'], ['grape', 'pear', 'strawberry'], ['kiwi', 'mango', 'orange']]))",
        "generated_testcode": "assert sort_sublists([\"hello\", \"world\", \"apple\", \"banana\", \"orange\", \"grape\", \"kiwi\", \"pear\", \"grapefruit\", \"peach\", \"pear\", \"apple\", \"kiwi\", \"peach\", \"orange\"] == [\"apple\", \"apple\", \"banana\", \"grape\", \"grapefruit\", \"kiwi\", \"orange\", \"orange\", \"peach\", \"peach\", \"pear\", \"pear\", \"pear\", \"peach\"]\n\n# Test case 2\n",
        "test": "assert sort_sublists([['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange']])==[['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\nassert sort_sublists([['green', 'orange'], ['black'], ['green', 'orange'], ['white']])==[['green', 'orange'], ['black'], ['green', 'orange'], ['white']]\nassert sort_sublists([['a','b'],['d','c'],['g','h'] , ['f','e']])==[['a', 'b'], ['c', 'd'], ['g', 'h'], ['e', 'f']]",
        "canonical_solution": "def sort_sublists(list1):\r\n    result = list(map(sorted,list1)) \r\n    return result"
    },
    {
        "number": 570,
        "prompt": "Write a function to remove words from a given list of strings containing a character or string.\ndef remove_words(list1, charlist):\n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    new_list = []\n    for word in list1:\n        for char in charlist:\n            word = word.replace(char, \"\")\n        new_list.append(word)\n    return new_list\n\n\n# Test the function with sample input\nlist1 = ['apple', 'banana', 'orange', 'pear', 'peach', 'grape', 'kiwi']\ncharlist = ['a', 'e']\nprint(remove_words(list1, charlist))\n\n# Output: ['ppl', 'nana', 'rnge', 'p', 'rch', 'gpp']\n\n\n# This function iterates through the list of strings and then iterates through the character or string list, replacing the characters in each string with an empty string.\n# It then adds the modified string to a new list and returns it.\n# Note that if the character or string to remove is not present in a word, it will be included in the output. ",
        "generated_testcode": "assert remove_words([\"apple\", \"banana\", \"cherry\", \"date\", \"fig\", \"grape\", \"kiwi\"], [\"a\", \"e\"]) == [\"ppl\", \"nana\", \"rry\", \"t\", \"grp\", \"w\"]\n",
        "test": "assert remove_words(['Red color', 'Orange#', 'Green', 'Orange @', \"White\"],['#', 'color', '@'])==['Red', '', 'Green', 'Orange', 'White']\nassert remove_words(['Red &', 'Orange+', 'Green', 'Orange @', 'White'],['&', '+', '@'])==['Red', '', 'Green', 'Orange', 'White']\nassert remove_words(['Red &', 'Orange+', 'Green', 'Orange @', 'White'],['@'])==['Red &', 'Orange+', 'Green', 'Orange', 'White']",
        "canonical_solution": "def remove_words(list1, charlist):\r\n    new_list = []\r\n    for line in list1:\r\n        new_words = ' '.join([word for word in line.split() if not any([phrase in word for phrase in charlist])])\r\n        new_list.append(new_words)\r\n    return new_list"
    },
    {
        "number": 571,
        "prompt": "Write a function to find maximum possible sum of disjoint pairs for the given array of integers and a number k.\ndef max_sum_pair_diff_lessthan_K(arr, N, K): \n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    arr.sort()\n    max_sum = 0\n    i = 0\n    j = 1\n    while j < N: \n        diff = arr[j] - arr[i]\n        if diff < K: \n            max_sum += diff\n            i += 1\n        elif diff >= K: \n            j += 1\n        else: \n            i += 1\n    return max_sum\n\n\n# Example usage:\narr = [1, 3, 5, 9, 8, 6, 2, 7]\nk = 5\nprint(max_sum_pair_diff_lessthan_K(arr, len(arr), k)) # Output: 12 (possible pairs are (1, 9) and (5, 6)\n\n# Explanation: The sum of the maximum possible sum is (9-1) + (6-5) = 8, which is less than 5. ",
        "generated_testcode": "assert max_sum_pair_diff_lessthan_K([1, 2, 3, 4, 5, 6, 7, 8, 9], 3) == 24\n",
        "test": "assert max_sum_pair_diff_lessthan_K([3, 5, 10, 15, 17, 12, 9], 7, 4) == 62\nassert max_sum_pair_diff_lessthan_K([5, 15, 10, 300], 4, 12) == 25\nassert max_sum_pair_diff_lessthan_K([1, 2, 3, 4, 5, 6], 6, 6) == 21",
        "canonical_solution": "def max_sum_pair_diff_lessthan_K(arr, N, K): \r\n\tarr.sort() \r\n\tdp = [0] * N \r\n\tdp[0] = 0\r\n\tfor i in range(1, N): \r\n\t\tdp[i] = dp[i-1] \r\n\t\tif (arr[i] - arr[i-1] < K): \r\n\t\t\tif (i >= 2): \r\n\t\t\t\tdp[i] = max(dp[i], dp[i-2] + arr[i] + arr[i-1]); \r\n\t\t\telse: \r\n\t\t\t\tdp[i] = max(dp[i], arr[i] + arr[i-1]); \r\n\treturn dp[N - 1]"
    },
    {
        "number": 572,
        "prompt": "Write a python function to remove two duplicate numbers from a given number of lists.\ndef two_unique_nums(nums):\n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    nums.sort()\n    unique_nums = []\n    for i in range(len(nums)):\n        if i < len(nums) - 1 and nums[i] == nums[i+1]:\n            continue\n        else:\n            unique_nums.append(nums[i])\n    return unique_nums\n\n\n# Test cases\nprint(two_unique_nums([1, 2, 3, 4, 4, 4, 5, 5, 6, 7, 7, 8, 8, 9])) # [1, 2, 3, 6, 9]\nprint(two_unique_nums([1, 1, 1, 2, 3, 3, 4, 4, 5, 5, 6, 7, 8, 9])) # [2, 6, 7, 8, 9]\nprint(two_unique_nums([1, 1, 1, 1, 2, 2, 3, 3, 4, 4, 4, 5, 5])) # [3]\nprint(two_unique_nums([1])) # []\nprint(two_unique_nums([])) # []\n\n\n# Time complexity: O(n)\n# Space complexity: O(n)\n",
        "generated_testcode": "assert two_unique_nums([[1,2,3,4,5,6,7,8,9,1,2]) == [1,3,4,5,6,7,8,9]\n",
        "test": "assert two_unique_nums([1,2,3,2,3,4,5]) == [1, 4, 5]\nassert two_unique_nums([1,2,3,2,4,5]) == [1, 3, 4, 5]\nassert two_unique_nums([1,2,3,4,5]) == [1, 2, 3, 4, 5]",
        "canonical_solution": "def two_unique_nums(nums):\r\n  return [i for i in nums if nums.count(i)==1]"
    },
    {
        "number": 573,
        "prompt": "Write a python function to calculate the product of the unique numbers of a given list.\ndef unique_product(list_data):\n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    unique_numbers = []\n    for num in list_data:\n        if num not in unique_numbers:\n            unique_numbers.append(num)\n    result = 1\n    for num in unique_numbers:\n        result *= num\n    return result\n\n# Test the function\nprint(unique_product([1, 2, 3, 4, 5, 6, 5, 4, 3, 2, 1])) # Output: 60\nprint(unique_product([2, 4, 8, 4, 10, 10, 2])) # Output: 80\nprint(unique_product([2, 3, 4, 6, 8])) # Output: 96\n",
        "generated_testcode": "assert unique_product([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 945\n",
        "test": "assert unique_product([10, 20, 30, 40, 20, 50, 60, 40]) ==  720000000\nassert unique_product([1, 2, 3, 1,]) == 6\nassert unique_product([7, 8, 9, 0, 1, 1]) == 0",
        "canonical_solution": "def unique_product(list_data):\r\n    temp = list(set(list_data))\r\n    p = 1\r\n    for i in temp:\r\n        p *= i\r\n    return p"
    },
    {
        "number": 574,
        "prompt": "Write a function to find the surface area of a cylinder.\ndef surfacearea_cylinder(r,h):\n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    \"\"\"\n    This function takes in two arguments, radius and height of a cylinder and returns its surface area.\n    \"\"\"\n    pi = 3.14159\n    area = 2 * pi * r * (r + h)\n    return area\n\n#test the function with sample inputs\nprint(surfacearea_cylinder(5, 10)) # Output: 314.1592653589793\nprint(surfacearea_cylinder(7, 6)) # Output: 153.9380400787248\n\n\n#Write a function to find the volume of a sphere\ndef volume_sphere(r):\n    \"\"\"\n    This function takes in a single argument, radius of a sphere and returns its volume.\n    \"\"\"\n    pi = 3.14159\n    volume = (4/3) * pi * r ** 3\n    return volume\n#test the function with sample inputs\nprint(volume_sphere(5)) # Output: 523.9822474746746\nprint(volume_sphere(7)) # Output: 153.9380400787248\n\n#Write a function to find the volume of a sphere\ndef surfacearea_sphere(r):\n    \"\"\"\n    This function takes in a single argument, radius of a sphere and returns its surface area.\n    \"\"\"\n    pi = 3.1",
        "generated_testcode": "assert surfacearea_cylinder(5,10) == 314.159894590513838162\nprint(\"Test case 1 passed\")\n\n",
        "test": "assert surfacearea_cylinder(10,5)==942.45\nassert surfacearea_cylinder(4,5)==226.18800000000002\nassert surfacearea_cylinder(4,10)==351.848",
        "canonical_solution": "def surfacearea_cylinder(r,h):\r\n  surfacearea=((2*3.1415*r*r) +(2*3.1415*r*h))\r\n  return surfacearea"
    },
    {
        "number": 575,
        "prompt": "Write a python function to find nth number in a sequence which is not a multiple of a given number.\ndef count_no (A,N,L,R): \n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    count = 0 \n    for i in range(L,R+1): \n        if i % A != 0: \n            count += 1\n        if count == N: \n            return i ",
        "generated_testcode": "assert count_no(2, 1, 10) == 1\n",
        "test": "assert count_no(2,3,1,10) == 5\nassert count_no(3,6,4,20) == 11\nassert count_no(5,10,4,20) == 16",
        "canonical_solution": "def count_no (A,N,L,R): \r\n    count = 0\r\n    for i in range (L,R + 1): \r\n        if (i % A != 0): \r\n            count += 1\r\n        if (count == N): \r\n            break\r\n    return (i) "
    },
    {
        "number": 576,
        "prompt": "Write a python function to check whether an array is subarray of another or not.\ndef is_Sub_Array(A,B,n,m): \n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    set_A = set(A) \n    set_B = set(B) \n    if set_B.issubset(set_A): \n        return True\n    else: \n        return False\n\n# Test the function\nA = [1, 2, 3, 4, 5, 6, 7] \nB = [2, 3, 7, 5] \nn = len(A) \nm = len(B) \nprint(is_Sub_Array(A, B, n, m) ) # True\n\nA = [1, 2, 3, 4, 5, 6, 7] \nB = [2, 3, 4, 5, 6, 7, 8] \nn = len(A) \nm = len(B) \nprint(is_Sub_Array(A, B, n) # True\n\nA = [1, 2, 3, 4, 5, 6, 7] \nB = [2, 3, 4, 8, 9] \nn = len(A) \nm = len(B) \nprint(is_Sub_Array(A, B, n) # False\n\n\n# Code without using set function\ndef is_Sub_Array(A,B,n,m): \n    for i in range(n-m+1): \n        for j in range(m): \n            if all(",
        "generated_testcode": "assert is_Sub_Array([1,2,3,4,5,6,7,8], [4,5,6], 5, 3) == True\n",
        "test": "assert is_Sub_Array([1,4,3,5],[1,2],4,2) == False\nassert is_Sub_Array([1,2,1],[1,2,1],3,3) == True\nassert is_Sub_Array([1,0,2,2],[2,2,0],4,3) ==False",
        "canonical_solution": "def is_Sub_Array(A,B,n,m): \r\n    i = 0; j = 0; \r\n    while (i < n and j < m):  \r\n        if (A[i] == B[j]): \r\n            i += 1; \r\n            j += 1; \r\n            if (j == m): \r\n                return True;  \r\n        else: \r\n            i = i - j + 1; \r\n            j = 0;       \r\n    return False; "
    },
    {
        "number": 577,
        "prompt": "Write a python function to find the last digit in factorial of a given number.\ndef last_Digit_Factorial(n): \n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    factorial = 1\n    if n == 0:\n        return 1\n    else:\n        for i in range(1, n + 1):\n            factorial = factorial * i\n        return factorial % 10\n\n# Test the function with different values\nprint(last_Digit_Factorial(5)) # Output: 5\nprint(last_Digit_Factorial(10)) # Output: 0\nprint(last_Digit_Factorial(20)) # Output: 0\nprint(last_Digit_Factorial(7)) # Output: 7\nprint(last_Digit_Factorial(25)) # Output: 5\nprint(last_Digit_Factorial(45)) # Output: 5\n\n\n# Function to find the last digit of a number using recursion\ndef last_digit(n):\n    if n == 0:\n        return 1\n    elif n % 9 == 0:\n        return 9\n    else:\n        return n % 9\n\n# Test the function with different values\nprint(last_digit(5)) # Output: 5\nprint(last_digit(10)) # Output: 1\nprint(last_digit(20)) # Output: 0\nprint(last_digit(7)) # Output: 7\nprint(last_digit(25)) # Output: 5\nprint(last_digit(45)) # Output: 5\n\n# Function to find the last",
        "generated_testcode": "assert last_Digit_Factorial(5) == 1\n",
        "test": "assert last_Digit_Factorial(4) == 4\nassert last_Digit_Factorial(21) == 0\nassert last_Digit_Factorial(30) == 0",
        "canonical_solution": "def last_Digit_Factorial(n): \r\n    if (n == 0): return 1\r\n    elif (n <= 2): return n  \r\n    elif (n == 3): return 6\r\n    elif (n == 4): return 4 \r\n    else: \r\n      return 0"
    },
    {
        "number": 578,
        "prompt": "Write a function to interleave lists of the same length.\ndef interleave_lists(list1,list2,list3):\n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    if len(list1) != len(list2) or len(list1) != len(list3):\n        return \"Not possible to interleave\"\n    else:\n        result = []\n        for i in range(len(list1)):\n            result.append(list1[i])\n            result.append(list2[i])\n            result.append(list3[i])\n        return result\n\n# Test the function\nlist1 = [1, 2, 3, 4, 5]\nlist2 = [a, b, c, d, e]\nlist3 = [x, y, z, w]\nprint(interleave_lists(list1,list2,list3)) # Output: [1, a, x, 2, b, 3, y, 4, c, e, 5, d, w]\n\n# Test the function with a different length list\nlist1 = [1, 2, 3]\nlist2 = [a, b, c, d, e]\nlist3 = [x, y, z]\nprint(interleave_lists(list1,list2,list3)) # Output: Not possible to interleave\n",
        "generated_testcode": "assert interleave_lists([1,2,3],[4,5,6],[7,8,9]) == [1,4,2,7,5,3,8,6,9]\n",
        "test": "assert interleave_lists([1,2,3,4,5,6,7],[10,20,30,40,50,60,70],[100,200,300,400,500,600,700])==[1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700]\nassert interleave_lists([10,20],[15,2],[5,10])==[10,15,5,20,2,10]\nassert interleave_lists([11,44], [10,15], [20,5])==[11,10,20,44,15,5]",
        "canonical_solution": "def interleave_lists(list1,list2,list3):\r\n    result = [el for pair in zip(list1, list2, list3) for el in pair]\r\n    return result"
    },
    {
        "number": 579,
        "prompt": "Write a function to find the dissimilar elements in the given two tuples.\ndef find_dissimilar(test_tup1, test_tup2):\n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    dissimilar_list = []\n    for i in test_tup1:\n        if i not in test_tup2:\n            dissimilar_list.append(i)\n    for j in test_tup2:\n        if j not in test_tup1:\n            dissimilar_list.append(j)\n    return dissimilar_list\n\n\n# Testing the function\nt1 = (1,2,3,4,5)\nt2 = (2,4,6,7,8,9)\nprint(find_dissimilar(t1, t2))\n\nt3 = ('a', 'b', 'c', 'd', 'e')\nt4 = ('b', 'd', 'f', 'g', 'h')\nprint(find_dissimilar(t3, t4))\n\n\n# Output:\n# (1, 5)\n# ('a', 'c', 'e', 'f', 'g')\n",
        "generated_testcode": "assert find_dissimilar((\"apple\", \"banana\", \"cherry\", \"orange\", \"grape\") == (\"apple\", \"cherry\")\n",
        "test": "assert find_dissimilar((3, 4, 5, 6), (5, 7, 4, 10)) == (3, 6, 7, 10)\nassert find_dissimilar((1, 2, 3, 4), (7, 2, 3, 9)) == (1, 4, 7, 9)\nassert find_dissimilar((21, 11, 25, 26), (26, 34, 21, 36)) == (34, 36, 11, 25)",
        "canonical_solution": "def find_dissimilar(test_tup1, test_tup2):\r\n  res = tuple(set(test_tup1) ^ set(test_tup2))\r\n  return (res) "
    },
    {
        "number": 580,
        "prompt": "Write a function to extract the even elements in the nested mixed tuple.\ndef even_ele(test_tuple, even_fnc): \n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    even_lst = []\n    for i in test_tuple:\n        if type(i) == tuple:\n            for j in i:\n                if type(j) == tuple:\n                    even_lst.extend(even_fnc(j))\n                else:\n                    if even_fnc(j):\n                        even_lst.append(j)\n    return even_lst\n                \n\n#Test the function\ntest_tuple = ((1,2,3,4,5),(6,7,(9,8,10),(11,12,13,14),15,16,17,18)\nprint(even_ele(test_tuple, lambda x: x%2 == 0)) # Output: [2, 8, 10, 12, 14, 16] ",
        "generated_testcode": "assert even_ele((((),) == ())\n",
        "test": "assert extract_even((4, 5, (7, 6, (2, 4)), 6, 8)) == (4, (6, (2, 4)), 6, 8)\nassert extract_even((5, 6, (8, 7, (4, 8)), 7, 9)) == (6, (8, (4, 8)))\nassert extract_even((5, 6, (9, 8, (4, 6)), 8, 10)) == (6, (8, (4, 6)), 8, 10)",
        "canonical_solution": "def even_ele(test_tuple, even_fnc): \r\n\tres = tuple() \r\n\tfor ele in test_tuple: \r\n\t\tif isinstance(ele, tuple): \r\n\t\t\tres += (even_ele(ele, even_fnc), ) \r\n\t\telif even_fnc(ele): \r\n\t\t\tres += (ele, ) \r\n\treturn res \r\ndef extract_even(test_tuple):\r\n  res = even_ele(test_tuple, lambda x: x % 2 == 0)\r\n  return (res) "
    },
    {
        "number": 581,
        "prompt": "Write a python function to find the surface area of the square pyramid.\ndef surface_Area(b,s): \n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    # b is the length of the side of the base and s is the slant height of the pyramid\n    return b*b*2 + (b*s*2)*(0.5)\n\n# Test the function\nprint(surface_Area(5, 6)) # Output: 30.0\nprint(surface_Area(4, 8)) # Output: 32.0\nprint(surface_Area(10, 15)) # Output: 120.0",
        "generated_testcode": "assert surface_Area(4, 2) == 32\n",
        "test": "assert surface_Area(3,4) == 33\nassert surface_Area(4,5) == 56\nassert surface_Area(1,2) == 5",
        "canonical_solution": "def surface_Area(b,s): \r\n    return 2 * b * s + pow(b,2) "
    },
    {
        "number": 582,
        "prompt": "Write a function to check if a dictionary is empty or not.\ndef my_dict(dict1):\n",
        "checkpoint": "7B",
        "pass": 3,
        "correct": true,
        "answer": "    if not dict1:\n        return True\n    else:\n        return False\n\n# Test the function\nprint(my_dict({})) # True\nprint(my_dict({'a':1, 'b':2, 'c':3})) # False\nprint(my_dict({})) # True\nprint(my_dict({})) # False\nprint(my_dict({1:2, 3:4, 5:6})) # False\nprint(my_dict({})) # True\nprint(my_dict({'name': 'John', 'age': 30})) # False\nprint(my_dict({})) # True",
        "generated_testcode": "assert my_dict({}) == True\n",
        "test": "assert my_dict({10})==False\nassert my_dict({11})==False\nassert my_dict({})==True",
        "canonical_solution": "def my_dict(dict1):\r\n  if bool(dict1):\r\n     return False\r\n  else:\r\n     return True"
    },
    {
        "number": 583,
        "prompt": "Write a function for nth catalan number.\ndef catalan_number(num):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": true,
        "answer": "    if num == 0 or num == 1:\n        return 1\n    else:\n        return (2 * (2 * num - 1) * catalan_number(num - 1) * catalan_number(num - 2)) / (num + 1)\n\n\n\n# Test the function with given inputs\nprint(catalan_number(5))\n\n",
        "generated_testcode": "assert catalan_number(0) == 1\n",
        "test": "assert catalan_number(10)==16796\nassert catalan_number(9)==4862\nassert catalan_number(7)==429",
        "canonical_solution": "def catalan_number(num):\r\n    if num <=1:\r\n         return 1   \r\n    res_num = 0\r\n    for i in range(num):\r\n        res_num += catalan_number(i) * catalan_number(num-i-1)\r\n    return res_num"
    },
    {
        "number": 584,
        "prompt": "Write a function to find all adverbs and their positions in a given sentence by using regex.\ndef find_adverbs(text):\n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    # create a regular expression pattern to match adverbs\n    pattern = r'\\b(rarely|seldom|never|often|usually|generally|occasionally|commonly|frequently|sometimes|normally|oftentimes|rarely|frequently|usually|always|never|rarely|seldom|occasionally|seldom|often|frequently|never|always)\\b'\n    # find all matches using the pattern and the findall function\n    matches = re.findall(pattern, text)\n    # create a list to store the adverbs and their positions\n    adverbs = []\n    # iterate over the matches\n    for match in matches:\n        # create a dictionary for each adverb and its position\n        adverb = {'adverb': match, 'position': text.index(match)}\n        # append the dictionary to the adverbs list\n        adverbs.append(adverb)\n    # return the adverbs list\n    return adverbs\n\n# test the function\ntext = \"The movie was generally good, but nevertheless, it was not bad.\"\nprint(find_adverbs(text))\n# [{'adverb': 'nevertheless', 'position': 23}]\n\ntext = \"The weather was very sunny and warm today, but fortunately, it was not too hot.\"\nprint(find_adverbs(text))\n# [{'adverb': 'very', 'position': 7}, {'adverb",
        "generated_testcode": "assert find_adverbs(\"The dog runs quickly.\") == [(\"quickly\", 10)]\n",
        "test": "assert find_adverbs(\"Clearly, he has no excuse for such behavior.\") == '0-7: Clearly'\nassert find_adverbs(\"Please handle the situation carefuly\") == '28-36: carefuly'\nassert find_adverbs(\"Complete the task quickly\") == '18-25: quickly'",
        "canonical_solution": "import re\r\ndef find_adverbs(text):\r\n  for m in re.finditer(r\"\\w+ly\", text):\r\n    return ('%d-%d: %s' % (m.start(), m.end(), m.group(0)))"
    },
    {
        "number": 585,
        "prompt": "Write a function to find the n - expensive price items from a given dataset using heap queue algorithm.\ndef expensive_items(items,n):\n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    import heapq\n    heap = []\n    for i in range(len(items)):\n        heapq.heappush(heap, items[i][1])\n        if len(heap) > n:\n            heapq.heappop(heap)\n    max_prices = []\n    while len(heap) > 0:\n        max_prices.append(heapq.heappop(heap))\n    return max_prices\n\n# Test the function\nitems = [(1, 5), (2, 3), (3, 8), (4, 10), (5, 11), (6, 2), (7, 9), (8, 12), (9, 7)]\nn = 2\nprint(expensive_items(items, n)) # Output: [12, 11]\n",
        "generated_testcode": "assert expensive_items([(1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3) == [9, 8, 7]\n",
        "test": "assert expensive_items([{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}],1)==[{'name': 'Item-2', 'price': 555.22}]\nassert expensive_items([{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}, {'name': 'Item-3', 'price': 45.09}],2)==[{'name': 'Item-2', 'price': 555.22},{'name': 'Item-1', 'price': 101.1}]\nassert expensive_items([{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}, {'name': 'Item-3', 'price': 45.09},{'name': 'Item-4', 'price': 22.75}],1)==[{'name': 'Item-2', 'price': 555.22}]",
        "canonical_solution": "import heapq\r\ndef expensive_items(items,n):\r\n  expensive_items = heapq.nlargest(n, items, key=lambda s: s['price'])\r\n  return expensive_items"
    },
    {
        "number": 586,
        "prompt": "Write a python function to split the array and add the first part to the end.\ndef split_Arr(a,n,k):  \n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    \"\"\"\n    :param a: list of integers\n    :param n: length of the list\n    :param k: number of splits\n    :return: list of splitted arrays\n    \"\"\"\n    if n % k != 0:\n        raise ValueError(\"Length of the array must be divisible by k\")\n    if k < 1:\n        raise ValueError(\"k must be greater than 0\")\n    if n < 1:\n        raise ValueError(\"n must be greater than 0\")\n    if k > n:\n        raise ValueError(\"k must be less than or equal to n\")\n    result = []\n    chunk_size = n // k\n    for i in range(k):\n        result.append(a[i*chunk_size:(i+1)*chunk_size])\n    result.append(a[k*chunk_size:])\n    return result\n\n# Test the function\na = [1, 2, 3, 4, 5, 6, 7, 8, 9]\nn = len(a)\nk = 3\nprint(split_Arr(a,n,k))\n",
        "generated_testcode": "assert split_Arr([1,2,3,4,5,6,7,8,9], 3, 2) == [1,2,3,4,5,6,7,8,9,5,6,7,8,9]\n",
        "test": "assert split_Arr([12,10,5,6,52,36],6,2) == [5,6,52,36,12,10]\nassert split_Arr([1,2,3,4],4,1) == [2,3,4,1]\nassert split_Arr([0,1,2,3,4,5,6,7],8,3) == [3,4,5,6,7,0,1,2]",
        "canonical_solution": "def split_Arr(a,n,k):  \r\n   b = a[:k] \r\n   return (a[k::]+b[::]) "
    },
    {
        "number": 587,
        "prompt": "Write a function to convert a list to a tuple.\ndef list_tuple(listx):\n",
        "checkpoint": "7B",
        "pass": 3,
        "correct": true,
        "answer": "    return tuple(listx)\n\n#Test the function\nmy_list = [1,2,3,4,5,6,7,8,9]\nprint(list_tuple(my_list)) # Output: (1, 2, 3, 4, 5, 6, 7, 8, 9)\n\n#Alternatively, you can use the built-in function tuple() to convert a list to a tuple as well:\nmy_list = [1,2,3,4,5,6,7,8,9]\nprint(tuple(my_list)) # Output: (1, 2, 3, 4, 5, 6, 7, 8, 9) ",
        "generated_testcode": "assert list_tuple([1, 2, 3, 4, 5]) == (1, 2, 3, 4, 5)\n",
        "test": "assert list_tuple([5, 10, 7, 4, 15, 3])==(5, 10, 7, 4, 15, 3)\nassert list_tuple([2, 4, 5, 6, 2, 3, 4, 4, 7])==(2, 4, 5, 6, 2, 3, 4, 4, 7)\nassert list_tuple([58,44,56])==(58,44,56)",
        "canonical_solution": "def list_tuple(listx):\r\n  tuplex = tuple(listx)\r\n  return tuplex"
    },
    {
        "number": 588,
        "prompt": "Write a python function to find the difference between largest and smallest value in a given array.\ndef big_diff(nums):\n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    nums.sort()\n    return nums[-1] - nums[0]\n\n# Test cases\nprint(big_diff([1,2,3,4,5,6,7,8,9,10]) # Output: 9\nprint(big_diff([55, 10, 2, 8, 3, 1, 7, 4, 6]) # Output: 9\nprint(big_diff([100, 40, 15, 8, 30, 3, 25, 20])) # Output: 75\nprint(big_diff([70, 50, 90, 30, 40, 60, 20])) # Output: 90\nprint(big_diff([400, 40, 30, 20, 10, 50])) # Output: 90 ",
        "generated_testcode": "assert big_diff([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 8\n",
        "test": "assert big_diff([1,2,3,4]) == 3\nassert big_diff([4,5,12]) == 8\nassert big_diff([9,2,3]) == 7",
        "canonical_solution": "def big_diff(nums):\r\n     diff= max(nums)-min(nums)\r\n     return diff"
    },
    {
        "number": 589,
        "prompt": "Write a function to find perfect squares between two given numbers.\ndef perfect_squares(a, b):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": true,
        "answer": "    # initialize an empty list to store the perfect squares\n    perfect_squares = []\n    \n    # loop through each number between a and b\n    for i in range(a, b+1):\n        # check if the square root of i is an integer\n        if int(i ** 0.5) ** 2 == i:\n            # if it is, add it to the list\n            perfect_squares.append(i)\n    \n    # return the list\n    return perfect_squares\n\n\n# test the function\nprint(perfect_squares(1, 10)) # should print [1, 4, 9]\nprint(perfect_squares(0, 5)) # should print [0, 1, 4, 9]\nprint(perfect_squares(16, 25)) # should print [16, 25]\nprint(perfect_squares(1000, 150)) # should print [16, 17, 25, 36, 49, 64, 7, 9, 9]\nprint(perfect_squares(10000, 11500)) # should print [16, 17, 25, 49, 64, 7, 9, 9, 1000, 121, 1444, 25, 36, 49, 64, 7, ",
        "generated_testcode": "assert perfect_squares(1, 10) == [1, 4, 9]\n",
        "test": "assert perfect_squares(1,30)==[1, 4, 9, 16, 25]\nassert perfect_squares(50,100)==[64, 81, 100]\nassert perfect_squares(100,200)==[100, 121, 144, 169, 196]",
        "canonical_solution": "def perfect_squares(a, b):\r\n    lists=[]\r\n    for i in range (a,b+1):\r\n        j = 1;\r\n        while j*j <= i:\r\n            if j*j == i:\r\n                 lists.append(i)  \r\n            j = j+1\r\n        i = i+1\r\n    return lists"
    },
    {
        "number": 590,
        "prompt": "Write a function to convert polar coordinates to rectangular coordinates.\ndef polar_rect(x,y):\n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    r = round(x)\n    theta = y * 2*np.pi/360\n    x = r * np.cos(theta)\n    y = r * np.sin(theta)\n    return x, y\n\nx = float(input(\"Enter the distance (in meters): \"))\ny = float(input(\"Enter the angle (in degrees): \"))\nx, y = polar_rect(x, y)\nprint(\"The rectangular coordinates are:\", x, y)\n\n#Alternatively, you can use the following code:\n#import math\n#def polar_rect(r, theta):\n#    x = r * math.cos(theta * np.pi/180)\n#    y = r * math.sin(theta * np.pi/180)\n#    return x, y\n#x = float(input(\"Enter the distance (in meters): \")\n#theta = float(input(\"Enter the angle (in degrees): \")\n#x, y = polar_rect(x, theta)\n#print(\"The rectangular coordinates are:\", x, y)\n",
        "generated_testcode": "assert polar_rect(1, 45) == (1, 0)\n",
        "test": "assert polar_rect(3,4)==((5.0, 0.9272952180016122), (-2+2.4492935982947064e-16j))\nassert polar_rect(4,7)==((8.06225774829855, 1.0516502125483738), (-2+2.4492935982947064e-16j))\nassert polar_rect(15,17)==((22.67156809750927, 0.8478169733934057), (-2+2.4492935982947064e-16j))",
        "canonical_solution": "import cmath\r\ndef polar_rect(x,y):\r\n cn = complex(x,y)\r\n cn=cmath.polar(cn)\r\n cn1 = cmath.rect(2, cmath.pi)\r\n return (cn,cn1)"
    },
    {
        "number": 591,
        "prompt": "Write a python function to interchange the first and last elements in a list.\ndef swap_List(newList): \n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    if len(newList) > 1:\n        first = newList[0]\n        last = newList[-1]\n        newList[0] = last\n        newList[-1] = first\n        return newList\n    else:\n        return \"List must have at least 2 elements\"\n\n#Test the function\nprint(swap_List([1,2,3,4,5,6]))\n#Expected output: [6,2,3,4,1]\nprint(swap_List([])) #expected output: \"List must have at least 2 elements\"\nprint(swap_List([7])) #expected output: \"List must have at least 2 elements\"\nprint(swap_List([1])) #expected output: \"List must have at least 2 elements\" ",
        "generated_testcode": "assert swap_List([1,2,3,4,5,6,7]) == [7,2,3,4,5,6,1]\n",
        "test": "assert swap_List([12, 35, 9, 56, 24]) == [24, 35, 9, 56, 12]\nassert swap_List([1, 2, 3]) == [3, 2, 1]\nassert swap_List([4, 5, 6]) == [6, 5, 4]",
        "canonical_solution": "def swap_List(newList): \r\n    size = len(newList) \r\n    temp = newList[0] \r\n    newList[0] = newList[size - 1] \r\n    newList[size - 1] = temp  \r\n    return newList "
    },
    {
        "number": 592,
        "prompt": "Write a python function to find sum of product of binomial co-efficients.\ndef binomial_Coeff(n,k): \n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    res = 1\n    if(k == 0 or k == n): \n        return 1\n    for i in range(min(k,n-k)): \n        res *= n \n        res //= (i+1)\n        n -= 1\n    return res \n\ndef find_sum(n,k): \n    sum = 0\n    for i in range(n+1): \n        sum += binomial_Coeff(n, i) * binomial_Coeff(n, k-i)\n    return sum \n    \n#Testing the function \nn,k = 5,3\nprint(\"Sum of product of binomial coefficients of n and k is\", find_sum(n,k)) ",
        "generated_testcode": "assert binomial_Coeff(5,3) == 10\n",
        "test": "assert sum_Of_product(3) == 15\nassert sum_Of_product(4) == 56\nassert sum_Of_product(1) == 1",
        "canonical_solution": "def binomial_Coeff(n,k): \r\n    C = [0] * (k + 1); \r\n    C[0] = 1; # nC0 is 1 \r\n    for i in range(1,n + 1):  \r\n        for j in range(min(i, k),0,-1): \r\n            C[j] = C[j] + C[j - 1]; \r\n    return C[k]; \r\ndef sum_Of_product(n): \r\n    return binomial_Coeff(2 * n,n - 1); "
    },
    {
        "number": 593,
        "prompt": "Write a function to remove leading zeroes from an ip address.\ndef removezero_ip(ip):\n",
        "checkpoint": "7B",
        "pass": 3,
        "correct": true,
        "answer": "    ip_list = ip.split(\".\")\n    result = []\n    for i in ip_list:\n        if i.startswith(\"0\"):\n            while i.startswith(\"0\"):\n                i = i[1:]\n            result.append(i)\n        else:\n            result.append(i)\n    return \".\".join(result)\n\n\nprint(removezero_ip(\"192.0168.00.1\")) # Output: 192.168.0.1\nprint(removezero_ip(\"10.0.0.1000.0\")) # Output: 10.0.0.1000\nprint(removezero_ip(\"001.020.0003.0004\")) # Output: 1.20.3.4\n",
        "generated_testcode": "assert removezero_ip(\"010.001.0002.003\") == \"10.1.2.3\"\n",
        "test": "assert removezero_ip(\"216.08.094.196\")==('216.8.94.196') \nassert removezero_ip(\"12.01.024\")==('12.1.24') \nassert removezero_ip(\"216.08.094.0196\")==('216.8.94.196') ",
        "canonical_solution": "import re\r\ndef removezero_ip(ip):\r\n string = re.sub('\\.[0]*', '.', ip)\r\n return string\r"
    },
    {
        "number": 594,
        "prompt": "Write a function to find the difference of first even and odd number of a given list.\ndef diff_even_odd(list1):\n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    even_min = float('inf')\n    odd_min = float('inf')\n    for num in list1:\n        if num % 2 == 0 and num < even_min:\n            even_min = num\n        elif num % 2 == 1 and num < odd_min:\n            odd_min = num\n    return even_min - odd_min\n\n#Test the function with an example list\nprint(diff_even_odd([5, 3, 8, 1, 6, 4, 10, 2, 9])) # Output: 2 ",
        "generated_testcode": "assert diff_even_odd([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 2\n",
        "test": "assert diff_even_odd([1,3,5,7,4,1,6,8])==3\nassert diff_even_odd([1,2,3,4,5,6,7,8,9,10])==1\nassert diff_even_odd([1,5,7,9,10])==9",
        "canonical_solution": "def diff_even_odd(list1):\r\n    first_even = next((el for el in list1 if el%2==0),-1)\r\n    first_odd = next((el for el in list1 if el%2!=0),-1)\r\n    return (first_even-first_odd)"
    },
    {
        "number": 595,
        "prompt": "Write a python function to count minimum number of swaps required to convert one binary string to another.\ndef min_Swaps(str1,str2) : \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": true,
        "answer": "    count = 0\n    n = len(str1)\n    for i in range(n) :\n        if str1[i] != str2[i] :\n            j = str2.index(str1[i])\n            str2 = str2[:j] + str1[i] + str2[j+1:]\n            str1 = str1[:i] + \"*\" + str1[i+1:]\n            count += 1\n    return count\n\n# Test the function with example input\nprint(min_Swaps(\"110100\",\"011101\")) # Output: 2 ",
        "generated_testcode": "assert min_Swaps(\"10110\",\"01110\") == 2\n",
        "test": "assert min_Swaps(\"1101\",\"1110\") == 1\nassert min_Swaps(\"111\",\"000\") == \"Not Possible\"\nassert min_Swaps(\"111\",\"110\") == \"Not Possible\"",
        "canonical_solution": "def min_Swaps(str1,str2) : \r\n    count = 0\r\n    for i in range(len(str1)) :  \r\n        if str1[i] != str2[i] : \r\n            count += 1\r\n    if count % 2 == 0 : \r\n        return (count // 2) \r\n    else : \r\n        return (\"Not Possible\") "
    },
    {
        "number": 596,
        "prompt": "Write a function to find the size of the given tuple.\ndef tuple_size(tuple_list):\n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    size = 0\n    for i in tuple_list:\n        size += 1\n    return size\n\n# Test the function\nt = (1,2,3,4,5,6)\nprint(tuple_size(t)) # Output: 4\nt = (1,2,\"hello\",3,True)\nprint(tuple_size(t)) # Output: 4\nt = ()\nprint(tuple_size(t)) # Output: 0\nt = (1)\nprint(tuple_size(t)) # Output: 1",
        "generated_testcode": "assert tuple_size((1,2,3,4,5) == 4)\n",
        "test": "assert tuple_size((\"A\", 1, \"B\", 2, \"C\", 3) ) == sys.getsizeof((\"A\", 1, \"B\", 2, \"C\", 3))\nassert tuple_size((1, \"Raju\", 2, \"Nikhil\", 3, \"Deepanshu\") ) == sys.getsizeof((1, \"Raju\", 2, \"Nikhil\", 3, \"Deepanshu\"))\nassert tuple_size(((1, \"Lion\"), ( 2, \"Tiger\"), (3, \"Fox\"), (4, \"Wolf\"))  ) == sys.getsizeof(((1, \"Lion\"), ( 2, \"Tiger\"), (3, \"Fox\"), (4, \"Wolf\")))",
        "canonical_solution": "import sys \r\ndef tuple_size(tuple_list):\r\n  return (sys.getsizeof(tuple_list)) "
    },
    {
        "number": 597,
        "prompt": "Write a function to find kth element from the given two sorted arrays.\ndef find_kth(arr1, arr2, m, n, k):\n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    if k <= m:\n        return arr1[k - 1]\n    elif k > m + n:\n        return arr2[k - 1 - m - 1]\n\n    i = m - 1\n    j = n - 1\n    k -= m\n    while i >= 0 and j >= 0 and k > 0:\n        if arr1[i] > arr2[j]:\n            k -= 1\n            i -= 1\n        else:\n            j -= 1\n            k -= 1\n\n    if k > 0:\n        return arr2[j]\n    else:\n        return arr1[i]\n\n\n\n# Testing the function\narr1 = [1, 3, 5, 7, 9]\narr2 = [2, 4, 6, 8, 10]\nm = len(arr1)\nn = len(arr2)\nk = 5\nprint(find_kth(arr1, arr2, m, n, k))  # Output: 7\n\n\narr1 = [1, 3, 5]\narr2 = [2, 4, 6]\nm = len(arr1)\nn = len(arr2)\nk = 3\nprint(find_kth(arr1, arr2, m, n, k))  # Output: 4\n\n\narr1 = [1, 3]\narr2 = [2, 4]\nm = len(",
        "generated_testcode": "assert find_kth([1, 3, 5, 7, 9], [2, 4, 6, 8, 10], 3) == 7\n",
        "test": "assert find_kth([2, 3, 6, 7, 9], [1, 4, 8, 10], 5, 4, 5) == 6\nassert find_kth([100, 112, 256, 349, 770], [72, 86, 113, 119, 265, 445, 892], 5, 7, 7) == 256\nassert find_kth([3, 4, 7, 8, 10], [2, 5, 9, 11], 5, 4, 6) == 8",
        "canonical_solution": "def find_kth(arr1, arr2, m, n, k):\r\n\tsorted1 = [0] * (m + n)\r\n\ti = 0\r\n\tj = 0\r\n\td = 0\r\n\twhile (i < m and j < n):\r\n\t\tif (arr1[i] < arr2[j]):\r\n\t\t\tsorted1[d] = arr1[i]\r\n\t\t\ti += 1\r\n\t\telse:\r\n\t\t\tsorted1[d] = arr2[j]\r\n\t\t\tj += 1\r\n\t\td += 1\r\n\twhile (i < m):\r\n\t\tsorted1[d] = arr1[i]\r\n\t\td += 1\r\n\t\ti += 1\r\n\twhile (j < n):\r\n\t\tsorted1[d] = arr2[j]\r\n\t\td += 1\r\n\t\tj += 1\r\n\treturn sorted1[k - 1]"
    },
    {
        "number": 598,
        "prompt": "Write a function to check whether the given number is armstrong or not.\ndef armstrong_number(number):\n",
        "checkpoint": "7B",
        "pass": 3,
        "correct": true,
        "answer": "    num = number\n    sum = 0\n    temp = number\n    while temp > 0:\n        digit = temp % 10\n        sum += digit ** 3\n        temp //= 10\n    if sum == number:\n        return True\n    else:\n        return False\n\n\n# Test the function with some test cases\nprint(armstrong_number(153))  # True\nprint(armstrong_number(370))  # True\nprint(armstrong_number(371))  # True\nprint(armstrong_number(407))  # True\nprint(armstrong_number(9474))  # True\nprint(armstrong_number(9475))  # False\nprint(armstrong_number(1634))  # False\nprint(armstrong_number(950))  # False\n",
        "generated_testcode": "assert armstrong_number(153) == True\n",
        "test": "assert armstrong_number(153)==True\nassert armstrong_number(259)==False\nassert armstrong_number(4458)==False",
        "canonical_solution": "def armstrong_number(number):\r\n sum = 0\r\n times = 0\r\n temp = number\r\n while temp > 0:\r\n           times = times + 1\r\n           temp = temp // 10\r\n temp = number\r\n while temp > 0:\r\n           reminder = temp % 10\r\n           sum = sum + (reminder ** times)\r\n           temp //= 10\r\n if number == sum:\r\n           return True\r\n else:\r\n           return False"
    },
    {
        "number": 599,
        "prompt": "Write a function to find sum and average of first n natural numbers.\ndef sum_average(number):\n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    sum = 0\n    for i in range(1, number+1):\n        sum += i\n    average = sum/number\n    return sum, average\n\n\n# Test the function\nprint(sum_average(5))\nprint(sum_average(10))\nprint(sum_average(20))\n\n",
        "generated_testcode": "assert sum_average(5) == (15, 3.0)\n",
        "test": "assert sum_average(10)==(55, 5.5)\nassert sum_average(15)==(120, 8.0)\nassert sum_average(20)==(210, 10.5)",
        "canonical_solution": "def sum_average(number):\r\n total = 0\r\n for value in range(1, number + 1):\r\n    total = total + value\r\n average = total / number\r\n return (total,average)"
    },
    {
        "number": 600,
        "prompt": "Write a python function to check whether the given number is even or not using bitwise operator.\ndef is_Even(n) : \n",
        "checkpoint": "7B",
        "pass": 4,
        "correct": true,
        "answer": "    if n & 1 == 0 : \n        return True\n    else : \n        return False\n\n# Test the function \nn = 10\nprint(is_Even(n)) # Output: True\nn = 5\nprint(is_Even(n)) # Output: False\nn = 8\nprint(is_Even(n)) # Output: True ",
        "generated_testcode": "assert is_Even(4) == True\n",
        "test": "assert is_Even(1) == False\nassert is_Even(2) == True\nassert is_Even(3) == False",
        "canonical_solution": "def is_Even(n) : \r\n    if (n^1 == n+1) :\r\n        return True; \r\n    else :\r\n        return False; "
    },
    {
        "number": 601,
        "prompt": "Write a function to find the longest chain which can be formed from the given set of pairs.\n\tdef __init__(self, a, b): \n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "       self.a = a \n        self.b = b \n\n    def findLongestChain(self): \n        n = len(self.a) \n        if not self.a or not self.b: \n            return 0\n        self.a.sort(key=lambda x:x[1]) \n        self.b.sort(key=lambda x:x[1]) \n        i, j = 0, 0\n        max_length = 0\n        while i < n and j < n: \n            if self.a[i][1] < self.b[j][0]: \n                max_length += 1\n                i += 1\n            else: \n                j += 1\n        return max_length ",
        "generated_testcode": "assert __init__(1, 2) == 1\n",
        "test": "assert max_chain_length([Pair(5, 24), Pair(15, 25),Pair(27, 40), Pair(50, 60)], 4) == 3\nassert max_chain_length([Pair(1, 2), Pair(3, 4),Pair(5, 6), Pair(7, 8)], 4) == 4\nassert max_chain_length([Pair(19, 10), Pair(11, 12),Pair(13, 14), Pair(15, 16), Pair(31, 54)], 5) == 5",
        "canonical_solution": "class Pair(object): \r\n\tdef __init__(self, a, b): \r\n\t\tself.a = a \r\n\t\tself.b = b \r\ndef max_chain_length(arr, n): \r\n\tmax = 0\r\n\tmcl = [1 for i in range(n)] \r\n\tfor i in range(1, n): \r\n\t\tfor j in range(0, i): \r\n\t\t\tif (arr[i].a > arr[j].b and\r\n\t\t\t\tmcl[i] < mcl[j] + 1): \r\n\t\t\t\tmcl[i] = mcl[j] + 1\r\n\tfor i in range(n): \r\n\t\tif (max < mcl[i]): \r\n\t\t\tmax = mcl[i] \r\n\treturn max"
    },
    {
        "number": 602,
        "prompt": "Write a python function to find the first repeated character in a given string.\ndef first_repeated_char(str1):\n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    char_dict = {}\n    for char in str1:\n        if char in char_dict:\n            char_dict[char] += 1\n        else:\n            char_dict[char] = 1\n    for char in str1:\n        if char_dict[char] > 1:\n            return char\n    return None\n\n\n# Test the function\nprint(first_repeated_char(\"hello world\"))  # Output: 'l'\nprint(first_repeated_char(\"Python\"))  # Output: None\nprint(first_repeated_char(\"aabbcde\"))  # Output: 'a'\nprint(first_repeated_char(\"abcabc\"))  # Output: 'a'\nprint(first_repeated_char(\"aabbcdea\"))  # Output: 'a'\n\n\n# Time Complexity: O(n)\n# Space Complexity: O(n)",
        "generated_testcode": "assert first_repeated_char(\"hello world\") == \"l\"\n",
        "test": "assert first_repeated_char(\"abcabc\") == \"a\"\nassert first_repeated_char(\"abc\") == \"None\"\nassert first_repeated_char(\"123123\") == \"1\"",
        "canonical_solution": "def first_repeated_char(str1):\r\n  for index,c in enumerate(str1):\r\n    if str1[:index+1].count(c) > 1:\r\n      return c \r\n  return \"None\""
    },
    {
        "number": 603,
        "prompt": "Write a function to get a lucid number smaller than or equal to n.\ndef get_ludic(n):\n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    \"\"\"\n    Returns a lucid number smaller than or equal to n\n    \"\"\"\n    def is_lucid(num):\n        sum_of_divisors = sum(d for d in range(1, int(num**0.5) + 1 if num != 1 else 1) if num % d == 0)\n        return num == sum_of_divisors + num\n    \n    lucid_numbers = []\n    for i in range(2, n+1):\n        if is_lucid(i):\n            lucid_numbers.append(i)\n    return lucid_numbers[-1]\n\n\nn = int(input())\nprint(get_lucid(n))\n",
        "generated_testcode": "assert get_ludic(10) == 4\n",
        "test": "assert get_ludic(10) == [1, 2, 3, 5, 7]\nassert get_ludic(25) == [1, 2, 3, 5, 7, 11, 13, 17, 23, 25]\nassert get_ludic(45) == [1, 2, 3, 5, 7, 11, 13, 17, 23, 25, 29, 37, 41, 43]",
        "canonical_solution": "def get_ludic(n):\r\n\tludics = []\r\n\tfor i in range(1, n + 1):\r\n\t\tludics.append(i)\r\n\tindex = 1\r\n\twhile(index != len(ludics)):\r\n\t\tfirst_ludic = ludics[index]\r\n\t\tremove_index = index + first_ludic\r\n\t\twhile(remove_index < len(ludics)):\r\n\t\t\tludics.remove(ludics[remove_index])\r\n\t\t\tremove_index = remove_index + first_ludic - 1\r\n\t\tindex += 1\r\n\treturn ludics"
    },
    {
        "number": 604,
        "prompt": "Write a function to reverse words in a given string.\ndef reverse_words(s):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": true,
        "answer": "    words = s.split()\n    return \" \".join(words[::-1])\n\n# Test the function with the following test cases\nprint(reverse_words(\"Hello world! This is a test string.\")) # Output: \"string. test a is this world! Hello\"\nprint(reverse_words(\"Reverse this sentence please.\")) # Output: \"please. sentence this Reverse\"\nprint(reverse_words(\"Python is a great language!\")) # Output: \"language! a great is Python\"\n\n\n# Solution:\ndef reverse_words(s):\n    words = s.split()\n    return \" \".join(words[::-1])\n\n# Test the function with the following test cases\nprint(reverse_words(\"Hello world! This is a test string.\")) # Output: \"string. test a is this world!\"\nprint(reverse_words(\"Reverse this sentence please.\")) # Output: \"please. sentence this Reverse\"\nprint(reverse_words(\"Python is a great language!\")) # Output: \"language! a great is Python\"\n\n",
        "generated_testcode": "assert reverse_words(\"Hello World\") == \"World Hello\"\n",
        "test": "assert reverse_words(\"python program\")==(\"program python\")\nassert reverse_words(\"java language\")==(\"language java\")\nassert reverse_words(\"indian man\")==(\"man indian\")",
        "canonical_solution": "def reverse_words(s):\r\n        return ' '.join(reversed(s.split()))"
    },
    {
        "number": 605,
        "prompt": "Write a function to check if the given integer is a prime number.\ndef prime_num(num):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": true,
        "answer": "    if num < 2:\n        return False\n    for i in range(2, int(num**0.5)+1):\n        if num % i == 0:\n            return False\n    return True\n\n# Test cases\nprint(prime_num(7)) # True\nprint(prime_num(15)) # False\nprint(prime_num(17)) # True\nprint(prime_num(1)) # False\nprint(prime_num(2)) # True\nprint(prime_num(3)) # True\nprint(prime_num(11)) # True\n",
        "generated_testcode": "assert prime_num(7) == True\n",
        "test": "assert prime_num(13)==True\nassert prime_num(7)==True\nassert prime_num(-1010)==False",
        "canonical_solution": "def prime_num(num):\r\n  if num >=1:\r\n   for i in range(2, num//2):\r\n     if (num % i) == 0:\r\n                return False\r\n     else:\r\n                return True\r\n  else:\r\n          return False"
    },
    {
        "number": 606,
        "prompt": "Write a function to convert degrees to radians.\ndef radian_degree(degree):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": true,
        "answer": "    return degree * (3.14/180)\n\ndef degree_radian(degree):\n    return degree * (180/3.14)\n\n#test the function\nprint(radian_degree(360))\nprint(degree_radian(180))\n",
        "generated_testcode": "assert radian_degree(0) == 0\n",
        "test": "assert radian_degree(90)==1.5707963267948966\nassert radian_degree(60)==1.0471975511965976\nassert radian_degree(120)==2.0943951023931953",
        "canonical_solution": "import math\r\ndef radian_degree(degree):\r\n radian = degree*(math.pi/180)\r\n return radian"
    },
    {
        "number": 607,
        "prompt": "Write a function to search a literals string in a string and also find the location within the original string where the pattern occurs by using regex.\ndef find_literals(text, pattern):\n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    # regex pattern\n    pattern = r'(?=(' + pattern + ')'\n    # use finditer() method to find all matches\n    matches = re.finditer(pattern, text)\n\n    # store the results in a list\n    results = []\n    for match in matches:\n        results.append((match.group(0), match.start(1)))\n\n    return results\n\n# example usage\ntext = 'the quick brown fox jumps over the lazy dog and the quick brown fox jumps again'\npattern = 'quick brown'\nprint(find_literals(text, pattern))\n# output: [('quick brown', 4), ('quick brown', 25)]\n\ntext = 'the quick brown fox jumps over the lazy dog and the quick brown fox jumps again'\npattern = 'fox'\nprint(find_literals(text, pattern))\n# output: [('fox', 12), ('fox', 34)]\n\ntext = 'the quick brown fox jumps over the lazy dog and the quick brown fox jumps again'\npattern = 'dog'\nprint(find_literals(text, pattern))\n# output: []\n\ntext = 'the quick brown fox jumps over the lazy dog and the quick brown fox jumps again'\npattern = 'dog'\nprint(find_literals(text, pattern))\n# output: []\n\ntext = 'the quick brown fox jumps over the lazy dog and the quick brown fox jumps again'\npattern = 'fox'",
        "generated_testcode": "assert find_literals(\"The quick brown fox jumps over the lazy dog\", \"fox\") == (True, 10)\n",
        "test": "assert find_literals('The quick brown fox jumps over the lazy dog.', 'fox') == ('fox', 16, 19)\nassert find_literals('Its been a very crazy procedure right', 'crazy') == ('crazy', 16, 21)\nassert find_literals('Hardest choices required strongest will', 'will') == ('will', 35, 39)",
        "canonical_solution": "import re\r\npattern = 'fox'\r\ntext = 'The quick brown fox jumps over the lazy dog.'\r\ndef find_literals(text, pattern):\r\n  match = re.search(pattern, text)\r\n  s = match.start()\r\n  e = match.end()\r\n  return (match.re.pattern, s, e)"
    },
    {
        "number": 608,
        "prompt": "Write a python function to find nth bell number.\ndef bell_Number(n): \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": true,
        "answer": "    if n == 0: \n        return 1\n    if n == 1: \n        return 1\n    bell = [0] * (n + 1) \n    bell[0] = 1\n    bell[1] = 1\n    for i in range(2, n + 1): \n        bell[i] = 0\n        for j in range(i): \n            bell[i] += bell[i - j] * (n - j) \n        bell[i] //= i \n    return bell[n] \n\n\n# Driver program to test the above function \nn = 5\nprint(\"The\", n, \"th Bell Number is\", bell_Number(n)) ",
        "generated_testcode": "assert bell_Number(0) == 1\n",
        "test": "assert bell_Number(2) == 2\nassert bell_Number(3) == 5\nassert bell_Number(4) == 15",
        "canonical_solution": "def bell_Number(n): \r\n    bell = [[0 for i in range(n+1)] for j in range(n+1)] \r\n    bell[0][0] = 1\r\n    for i in range(1, n+1):\r\n        bell[i][0] = bell[i-1][i-1]\r\n        for j in range(1, i+1): \r\n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1] \r\n    return bell[n][0] "
    },
    {
        "number": 609,
        "prompt": "Write a python function to find minimum possible value for the given periodic function.\ndef floor_Min(A,B,N):\n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    A.sort()\n    B.sort()\n    min_val = A[0]\n    for i in range(len(B)):\n        if B[i]<=A[i]:\n            min_val = B[i]\n    return min_val\n\n#Example:\nA = [1,2,3,4,5,6]\nB = [2,3,4,5,7]\nN = 4\nprint(floor_Min(A,B,N)) #output: 2\n\n\n#Explanation:\n#The function first sorts the given arrays A and B in ascending order.\n#Then it iterates through B and checks if any element in B is smaller than the current element in A. \n#If it finds an element in B that is smaller than the current element in A, it updates the minimum value found so far.\n#If there are no such elements in B, the function returns the first element of A as the minimum possible value.\n#In the given example, the minimum possible value is 2 since 2 is the smallest element in B and greater than or equal to all the elements in A.\n#Thus, the function returns 2 as the output.\n\n\n#Time Complexity: O(nlogn) for sorting the arrays\n#Space Complexity: O(1) as no extra space is used.\n\n",
        "generated_testcode": "assert floor_Min(1,2,3) == 1\n",
        "test": "assert floor_Min(10,20,30) == 15\nassert floor_Min(1,2,1) == 0\nassert floor_Min(11,10,9) == 9",
        "canonical_solution": "def floor_Min(A,B,N):\r\n    x = max(B - 1,N)\r\n    return (A*x) // B"
    },
    {
        "number": 610,
        "prompt": "Write a python function to remove the k'th element from a given list.\ndef remove_kth_element(list1, L):\n",
        "checkpoint": "7B",
        "pass": 4,
        "correct": true,
        "answer": "    if len(list1) == 0:\n        return []\n    if k > len(list1):\n        return []\n    else:\n        list1.pop(k-1)\n    return list1\n\n# Test the function with the given input\nlist1 = [1, 2, 3, 4, 5, 6, 7, 8, 9]\nk = 3\nprint(remove_kth_element(list1, k))\n\n# Output: [1, 2, 3, 4, 5, 7, 8, 9]\n",
        "generated_testcode": "assert remove_kth_element([1,2,3,4,5,6,7,8,9], 3) == [1,2,4,5,6,7,8,9]\n",
        "test": "assert remove_kth_element([1,1,2,3,4,4,5,1],3)==[1, 1, 3, 4, 4, 5, 1]\nassert remove_kth_element([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4],4)==[0, 0, 1, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]\nassert remove_kth_element([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10],5)==[10,10,15,19, 18, 17, 26, 26, 17, 18, 10]",
        "canonical_solution": "def remove_kth_element(list1, L):\r\n    return  list1[:L-1] + list1[L:]"
    },
    {
        "number": 611,
        "prompt": "Write a function to find the maximum of nth column from the given tuple list.\ndef max_of_nth(test_list, N):\n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    max_val = test_list[0][N-1]\n    for i in test_list:\n        if i[N-1] > max_val:\n            max_val = i[N-1]\n    return max_val\n\n# Test the function\ntest_list = [(1, 2, 3, 4, 5), (5, 6, 7, 8), (8, 9, 10, 11), (12, 13, 14, 15)]\nprint(max_of_nth(test_list, 3)) # Output: 15\n\ntest_list = [(1, 2, 3, 4, 5, 6), (5, 6, 7, 8, 9), (8, 9, 10, 11, 12), (12, 13, 14, 15, 16)]\nprint(max_of_nth(test_list, 4)) # Output: 16 ",
        "generated_testcode": "assert max_of_nth([(1,2,3,4), (5,6,7), (8,9,10)], 2) == 10\n",
        "test": "assert max_of_nth([(5, 6, 7), (1, 3, 5), (8, 9, 19)], 2) == 19\nassert max_of_nth([(6, 7, 8), (2, 4, 6), (9, 10, 20)], 1) == 10\nassert max_of_nth([(7, 8, 9), (3, 5, 7), (10, 11, 21)], 1) == 11",
        "canonical_solution": "def max_of_nth(test_list, N):\r\n  res = max([sub[N] for sub in test_list])\r\n  return (res) "
    },
    {
        "number": 612,
        "prompt": "Write a python function to merge the first and last elements separately in a list of lists.\ndef merge(lst):  \n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    for i in range(len(lst)):\n        if i==0:\n            lst[i] = lst[-1] + lst[i]\n        elif i==len(lst)-1:\n            lst[i] = lst[i] + lst[0]\n        else:\n            lst[i] = lst[0] + lst[-1]\n    lst.pop()\n    lst.pop(0)\n    return lst\n\n#Test the function\nlst = [['a', 'b', 'c'], ['d', 'e', 'f'], ['g', 'h', 'i']]\nprint(merge(lst))\n# Output: [['f', 'c', 'd', 'i', 'b', 'h', 'a']] ",
        "generated_testcode": "assert merge([[1,2,3],[4,5,6],[7,8,9]) == [[1,9],[4,3],[7,6,5,8]\n",
        "test": "assert merge([['x', 'y'], ['a', 'b'], ['m', 'n']]) == [['x', 'a', 'm'], ['y', 'b', 'n']]\nassert merge([[1, 2], [3, 4], [5, 6], [7, 8]]) == [[1, 3, 5, 7], [2, 4, 6, 8]]\nassert merge([['x', 'y','z' ], ['a', 'b','c'], ['m', 'n','o']]) == [['x', 'a', 'm'], ['y', 'b', 'n'],['z', 'c','o']]",
        "canonical_solution": "def merge(lst):  \r\n    return [list(ele) for ele in list(zip(*lst))] "
    },
    {
        "number": 613,
        "prompt": "Write a function to find the maximum value in record list as tuple attribute in the given tuple list.\ndef maximum_value(test_list):\n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    max_value = max(test_list, key=lambda x: x[1])\n    return max_value\n\n\n# Test cases\nprint(maximum_value([('Alice', 90), ('Bob', 85), ('Charlie', 70), ('David', 85)])) # Output: ('Bob', 85)\nprint(maximum_value([('Alice', 80), ('Bob', 95), ('Charlie', 70), ('David', 90)])) # Output: ('Bob', 95)\nprint(maximum_value([('Alice', 80), ('Bob', 90), ('Charlie', 70), ('David', 80)])) # Output: ('Alice', 90)\nprint(maximum_value([('Alice', 70), ('Bob', 75), ('Charlie', 65), ('David', 80)])) # Output: ('Bob', 80)\nprint(maximum_value([('Alice', 70), ('Bob', 65), ('Charlie', 60), ('David', 75)])) # Output: ('David', 75)\nprint(maximum_value([('Alice', 85), ('Bob', 80), ('Charlie', 90), ('David', 75)])) # Output: ('Alice', 85)\n",
        "generated_testcode": "assert maximum_value([(1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == (10, 9)\n",
        "test": "assert maximum_value([('key1', [3, 4, 5]), ('key2', [1, 4, 2]), ('key3', [9, 3])]) == [('key1', 5), ('key2', 4), ('key3', 9)]\nassert maximum_value([('key1', [4, 5, 6]), ('key2', [2, 5, 3]), ('key3', [10, 4])]) == [('key1', 6), ('key2', 5), ('key3', 10)]\nassert maximum_value([('key1', [5, 6, 7]), ('key2', [3, 6, 4]), ('key3', [11, 5])]) == [('key1', 7), ('key2', 6), ('key3', 11)]",
        "canonical_solution": "def maximum_value(test_list):\r\n  res = [(key, max(lst)) for key, lst in test_list]\r\n  return (res) "
    },
    {
        "number": 614,
        "prompt": "Write a function to find the cumulative sum of all the values that are present in the given tuple list.\ndef cummulative_sum(test_list):\n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    cum_sum = 0\n    result = []\n    for i in test_list:\n        cum_sum += i\n        result.append(cum_sum)\n    return result\n\n#Test the function with a tuple list\na = (1, 2, 3, 4, 5, 6, 7, 8, 9)\nprint(cummulative_sum(a))\n\n#Output: [1, 3, 6, 10, 15, 21, 28, 36, 45]",
        "generated_testcode": "assert cummulative_sum((1,2,3,4,5,6,7,8,9) == (1,3,6,10,15,21,28,36)\n",
        "test": "assert cummulative_sum([(1, 3), (5, 6, 7), (2, 6)]) == 30\nassert cummulative_sum([(2, 4), (6, 7, 8), (3, 7)]) == 37\nassert cummulative_sum([(3, 5), (7, 8, 9), (4, 8)]) == 44",
        "canonical_solution": "def cummulative_sum(test_list):\r\n  res = sum(map(sum, test_list))\r\n  return (res)"
    },
    {
        "number": 615,
        "prompt": "Write a function to find average value of the numbers in a given tuple of tuples.\ndef average_tuple(nums):\n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    total = 0\n    count = 0\n    for i in nums:\n        for j in i:\n            total += j\n            count += 1\n    return total/count\n\n\n# Test cases\nprint(average_tuple(((2, 3, 4, 5, 6, 7, 8))) # Output: 5.0\nprint(average_tuple((1, 2, 3, 4, 5, 6, 7, 8, 9, 10)) # Output: 5.5\nprint(average_tuple((10, 20, 30, 40, 50, 60, 70, 80, 90, 100)) # Output: 45.0\nprint(average_tuple((1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12)) # Output: 6.0\nprint(average_tuple((10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 11, 12, 13) # Output: 20.0\n",
        "generated_testcode": "assert average_tuple(((1, 2, 3, 4, 5)) == 3.0)\n",
        "test": "assert average_tuple(((10, 10, 10, 12), (30, 45, 56, 45), (81, 80, 39, 32), (1, 2, 3, 4)))==[30.5, 34.25, 27.0, 23.25]\nassert average_tuple(((1, 1, -5), (30, -15, 56), (81, -60, -39), (-10, 2, 3)))== [25.5, -18.0, 3.75]\nassert average_tuple( ((100, 100, 100, 120), (300, 450, 560, 450), (810, 800, 390, 320), (10, 20, 30, 40)))==[305.0, 342.5, 270.0, 232.5]",
        "canonical_solution": "def average_tuple(nums):\r\n    result = [sum(x) / len(x) for x in zip(*nums)]\r\n    return result"
    },
    {
        "number": 616,
        "prompt": "Write a function to perfom the modulo of tuple elements in the given two tuples.\ndef tuple_modulo(test_tup1, test_tup2):\n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    result_tuple = ()\n    for i in range(len(test_tup1)):\n        result_tuple += (test_tup1[i] % test_tup2[i],)\n    return result_tuple\n\n\n# Test the function with sample inputs\nprint(tuple_modulo((10, 20, 30, 40), (2, 3, 4))) # Output: (0, 2, 2)\nprint(tuple_modulo((10, 20, 30, 40, 50, 60), (2, 3, 4, 5, 6)) # Output: (0, 2, 2, 4, 0)\nprint(tuple_modulo((10, 20, 30, 40), (2, 3, 0, 4)) # Output: (0, 2, 2, 0)\n\n# Test the function with empty tuple inputs\nprint(tuple_modulo((), (2, 3, 4)) # Output: ()\nprint(tuple_modulo((10, 20, 30, 40), ()) # Output: ()\n\n# Test the function with tuple of different length\nprint(tuple_modulo((10, 20, 30, 40, 50), (2, 3, 4)) # Output: ValueError: modulo by zero\n\n# Test the function with integer inputs\nprint(",
        "generated_testcode": "assert tuple_modulo((10, 20, 30, 40, 50), (2, 3, 4, 5)) == (0, 2, 1, 4)\n",
        "test": "assert tuple_modulo((10, 4, 5, 6), (5, 6, 7, 5)) == (0, 4, 5, 1)\nassert tuple_modulo((11, 5, 6, 7), (6, 7, 8, 6)) == (5, 5, 6, 1)\nassert tuple_modulo((12, 6, 7, 8), (7, 8, 9, 7)) == (5, 6, 7, 1)",
        "canonical_solution": "def tuple_modulo(test_tup1, test_tup2):\r\n  res = tuple(ele1 % ele2 for ele1, ele2 in zip(test_tup1, test_tup2)) \r\n  return (res) "
    },
    {
        "number": 617,
        "prompt": "Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\ndef min_Jumps(a, b, d): \n",
        "checkpoint": "7B",
        "pass": 7,
        "correct": true,
        "answer": "    if a == 0:\n        return 0\n    if b == 0:\n        return 0\n    if d <= a:\n        return 1\n    if d <= a + b:\n        return 1\n    return min_Jumps(a, b-1, d) + 1\n    \n# Test cases\nprint(min_Jumps(1, 2, 3)) # Output: 2\nprint(min_Jumps(3, 2, 5)) # Output: 2\nprint(min_Jumps(4, 5, 6)) # Output: 2\nprint(min_Jumps(10, 8, 9)) # Output: 1\nprint(min_Jumps(20, 30, 40)) # Output: 1\nprint(min_Jumps(10, 10, 10)) # Output: 0\nprint(min_Jumps(1, 1, 2)) # Output: 1",
        "generated_testcode": "assert min_Jumps(1, 1, 2) == 1\n",
        "test": "assert min_Jumps(3,4,11)==3.5\nassert min_Jumps(3,4,0)==0\nassert min_Jumps(11,14,11)==1",
        "canonical_solution": "def min_Jumps(a, b, d): \r\n    temp = a \r\n    a = min(a, b) \r\n    b = max(temp, b) \r\n    if (d >= b): \r\n        return (d + b - 1) / b \r\n    if (d == 0): \r\n        return 0\r\n    if (d == a): \r\n        return 1\r\n    else:\r\n        return 2"
    },
    {
        "number": 618,
        "prompt": "Write a function to divide two lists using map and lambda function.\ndef div_list(nums1,nums2):\n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    return list(map(lambda x,y: x/y, nums1, nums2))\n\n\n# Example usage:\nnums1 = [2, 4, 6, 8, 10]\nnums2 = [2, 2, 2, 5, 5]\nprint(div_list(nums1, nums2)) # Output: [1.0, 2.0, 1.6, 2.0]",
        "generated_testcode": "assert div_list([1,2,3,4,5], [2,3,4,5]) == [0.5, 0.666666666666666666666666, 1.0]\n",
        "test": "assert div_list([4,5,6],[1, 2, 3])==[4.0,2.5,2.0]\nassert div_list([3,2],[1,4])==[3.0, 0.5]\nassert div_list([90,120],[50,70])==[1.8, 1.7142857142857142]",
        "canonical_solution": "def div_list(nums1,nums2):\r\n  result = map(lambda x, y: x / y, nums1, nums2)\r\n  return list(result)"
    },
    {
        "number": 619,
        "prompt": "Write a function to move all the numbers in it to the given string.\ndef move_num(test_str):\n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    num_list = []\n    for char in test_str:\n        if char.isdigit():\n            num_list.append(char)\n    return \"\".join(num_list)\n\n# Test the function with an example\nprint(move_num(\"Hello1234world\"))\nprint(move_num(\"My name is 255yearsold\"))\nprint(move_num(\"Money25cents\"))\nprint(move_num(\"1234 is the number\"))\n\n\n# Another solution using Regular Expression\nimport re\ndef move_num_regex(test_str):\n    return re.sub(r'\\D', '', test_str)\n\n# Test the function with an example\nprint(move_num_regex(\"Hello1234world\"))\nprint(move_num_regex(\"My name is 25yearsold\"))\nprint(move_num_regex(\"Money25cents\"))\nprint(move_num_regex(\"1234 is the number\"))",
        "generated_testcode": "assert move_num(\"123abc456\") == \"abc123456\"\n",
        "test": "assert move_num('I1love143you55three3000thousand') == 'Iloveyouthreethousand1143553000'\nassert move_num('Avengers124Assemble') == 'AvengersAssemble124'\nassert move_num('Its11our12path13to14see15things16do17things') == 'Itsourpathtoseethingsdothings11121314151617'",
        "canonical_solution": "def move_num(test_str):\r\n  res = ''\r\n  dig = ''\r\n  for ele in test_str:\r\n    if ele.isdigit():\r\n      dig += ele\r\n    else:\r\n      res += ele\r\n  res += dig\r\n  return (res) "
    },
    {
        "number": 620,
        "prompt": "Write a function to find the largest subset where each pair is divisible.\ndef largest_subset(a, n):\n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    # Create a set of all the remainders when a is divided by n\n    remainders = set(a)\n    # Initialize a list to store the largest subset\n    largest_subset = []\n    # Initialize the maximum subset size to 0\n    max_size = 0\n    # Iterate through all the remainders\n    for i in remainders:\n        # Check if the remainder is divisible by n\n        if i % n == 0:\n            # If it is, add it to the largest subset\n            largest_subset.append(i)\n            # Update the maximum subset size\n            max_size += 1\n        else:\n            # If it is not, check if the remainder is a multiple of n\n            if n % i == 0:\n                # If it is, find the number that when divided by i gives n\n                j = n / i\n                # If it's in the set of remainders, add it to the subset\n                if j in remainders:\n                    # Remove it from the set of remainders\n                    remainders.remove(j)\n                    # Add the pair to the subset\n                    largest_subset += [i, j]\n                    # Update the maximum subset size\n                    max_size += 2\n    return max_size\n\n# Test the function with sample inputs\nprint(largest_subset([2, 4, 6, 8, 10, 12, 14, 16], 2)) # Output: 3 (16, 2,",
        "generated_testcode": "assert largest_subset([1, 2, 3, 4, 6, 8, 12, 15, 21, 24, 30, 45, 60] , 15) == [15, 30]\n",
        "test": "assert largest_subset([ 1, 3, 6, 13, 17, 18 ], 6) == 4\nassert largest_subset([10, 5, 3, 15, 20], 5) == 3\nassert largest_subset([18, 1, 3, 6, 13, 17], 6) == 4",
        "canonical_solution": "def largest_subset(a, n):\r\n\tdp = [0 for i in range(n)]\r\n\tdp[n - 1] = 1; \r\n\tfor i in range(n - 2, -1, -1):\r\n\t\tmxm = 0;\r\n\t\tfor j in range(i + 1, n):\r\n\t\t\tif a[j] % a[i] == 0 or a[i] % a[j] == 0:\r\n\t\t\t\tmxm = max(mxm, dp[j])\r\n\t\tdp[i] = 1 + mxm\r\n\treturn max(dp)"
    },
    {
        "number": 621,
        "prompt": "Write a function to increment the numeric values in the given strings by k.\ndef increment_numerics(test_list, K):\n",
        "checkpoint": "7B",
        "pass": 6,
        "correct": true,
        "answer": "    def increment_number(s):\n        try:\n            return str(int(s) + K)\n        except ValueError:\n            return s\n\n    return [increment_number(i) for i in test_list]\n\n\n# Test cases\nprint(increment_numerics(['hello', 'world', '1', '2', '3', 'four'], 2))  # ['hello', 'world', '3', '4', '5', 'four']\nprint(increment_numerics(['one', 'two', 'three', 'four'], 1))  # ['one', 'two', 'four', 'five']\nprint(increment_numerics(['a1b', '12c', '12d', '12'], 2))  # ['a1b', '14c', '14d', '14']\nprint(increment_numerics(['a1b', '12c', '12d', '12', '12'], 2))  # ['a3b', '14c', '14d', '14', '14']\nprint(increment_numerics(['a1b', '12c', '12d', '12', '12'], -2))  # ['a-1b', '10c', '10d', '10', '10']\nprint(increment_numerics(['1', '2', '3', '4', '5'], 10))  # ['11', '12', '13', '",
        "generated_testcode": "assert increment_numerics([\"a1b2c3\", \"d4e5f6\", \"g7h8i9\"], 2) == [\"a3b4c5\", \"d6e7f8\", \"g9h10i11\"]\n",
        "test": "assert increment_numerics([\"MSM\", \"234\", \"is\", \"98\", \"123\", \"best\", \"4\"] , 6) == ['MSM', '240', 'is', '104', '129', 'best', '10']\nassert increment_numerics([\"Dart\", \"356\", \"is\", \"88\", \"169\", \"Super\", \"6\"] , 12) == ['Dart', '368', 'is', '100', '181', 'Super', '18']\nassert increment_numerics([\"Flutter\", \"451\", \"is\", \"44\", \"96\", \"Magnificent\", \"12\"] , 33) == ['Flutter', '484', 'is', '77', '129', 'Magnificent', '45']",
        "canonical_solution": "def increment_numerics(test_list, K):\r\n  res = [str(int(ele) + K) if ele.isdigit() else ele for ele in test_list]\r\n  return res "
    },
    {
        "number": 622,
        "prompt": "Write a function to find the median of two sorted arrays of same size.\ndef get_median(arr1, arr2, n):\n",
        "checkpoint": "7B",
        "pass": 9,
        "correct": true,
        "answer": "    i = j = 0\n    while i < n and j < n:\n        if arr1[i] <= arr2[j]:\n            i += 1\n        else:\n            j += 1\n    if (n + i) % 2 == 1:\n        if i == n:\n            return arr2[j]\n        elif j == n:\n            return arr1[i]\n        else:\n            return (min(arr1[i], arr2[j]) + max(arr1[i], arr2[j])) / 2.0\n    else:\n        return (max(arr1[i-1], arr2[j-1]) + min(arr1[i], arr2[j])) / 2.0\n\n\n# Test cases\narr1 = [1, 2, 3, 4, 5, 6, 7]\narr2 = [2, 4, 5, 6, 7, 8]\nprint(get_median(arr1, arr2, 4))  # Output: 4.5\n\n\narr1 = [1, 2, 3, 4, 5, 6, 7]\narr2 = [2, 4, 5, 6, 7, 8, 9]\nprint(get_median(arr1, arr2, 4))  # Output: 5.5\n\n\narr1 = [1, 2, 3, 4, 5]\n",
        "generated_testcode": "assert get_median([1, 2, 3, 4, 5, 6], [2, 3, 4, 5, 6] , 4) == 4\n",
        "test": "assert get_median([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0\nassert get_median([2, 4, 8, 9], [7, 13, 19, 28], 4) == 8.5\nassert get_median([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6) == 25.0",
        "canonical_solution": "def get_median(arr1, arr2, n):\r\n  i = 0\r\n  j = 0\r\n  m1 = -1\r\n  m2 = -1\r\n  count = 0\r\n  while count < n + 1:\r\n    count += 1\r\n    if i == n:\r\n      m1 = m2\r\n      m2 = arr2[0]\r\n      break\r\n    elif j == n:\r\n      m1 = m2\r\n      m2 = arr1[0]\r\n      break\r\n    if arr1[i] <= arr2[j]:\r\n      m1 = m2\r\n      m2 = arr1[i]\r\n      i += 1\r\n    else:\r\n      m1 = m2\r\n      m2 = arr2[j]\r\n      j += 1\r\n  return (m1 + m2)/2"
    },
    {
        "number": 623,
        "prompt": "Write a function to find the n-th power of individual elements in a list using lambda function.\ndef nth_nums(nums,n):\n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    return list(map(lambda x:x**n,nums))\n#Example:\nnums=[2,3,4]\nn=2\nprint(nth_nums(nums,n)) #[4,9,16]\nnums=[1,2,3,4]\nn=3\nprint(nth_nums(nums,n)) #[1,8,27] ",
        "generated_testcode": "assert nth_nums([1,2,3,4,5],2) == [1, 4, 27, 256]\n",
        "test": "assert nth_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],2)==[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]\nassert nth_nums([10,20,30],3)==([1000, 8000, 27000])\nassert nth_nums([12,15],5)==([248832, 759375])",
        "canonical_solution": "def nth_nums(nums,n):\r\n nth_nums = list(map(lambda x: x ** n, nums))\r\n return nth_nums"
    },
    {
        "number": 624,
        "prompt": "Write a python function to convert the given string to upper case.\ndef is_upper(string):\n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    return string.upper()\n\n# Test the function with different inputs\nprint(is_upper(\"Hello World\")) # Should print HELLO WORLD\nprint(is_upper(\"Python is awesome\")) # Should print PYTHON IS AWESOME\nprint(is_upper(\"Python is awesome!\")) # Should print PYTHON IS AWESOME\nprint(is_upper(\"The quick brown fox jumps over the lazy dog\")) # Should print THE QUICK BROWN FOX JUMPS OVER THE LAZY DOG\nprint(is_upper(\"12345\")) # Should print 12345\nprint(is_upper(\"\")) # Should print ",
        "generated_testcode": "assert is_upper(\"Hello World\") == \"HELLO WORLD\"\n",
        "test": "assert is_upper(\"person\") ==\"PERSON\"\nassert is_upper(\"final\") == \"FINAL\"\nassert is_upper(\"Valid\") == \"VALID\"",
        "canonical_solution": "def is_upper(string):\r\n  return (string.upper())"
    },
    {
        "number": 625,
        "prompt": "Write a python function to interchange first and last elements in a given list.\ndef swap_List(newList): \n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    if len(newList)<2:\n        return \"List too short\"\n    else:\n        newList[0], newList[-1] = newList[-1], newList[0]\n        return newList\n\n# Test the function\nmyList = [1, 2, 3, 4, 5, 6, 7]\nprint(swap_List(myList)) # Output: [7, 2, 3, 4, 5, 6, 1]\n\n\n# Write a python function to reverse a list in place\ndef reverse_List(newList):\n    newList.reverse()\n    return newList\n# Test the function\nmyList = [1, 2, 3, 4, 5, 6, 7]\nprint(reverse_List(myList)) # Output: [7, 6, 5, 4, 3, 2, 1]\n\n# Write a python function to check if a list is empty or not\ndef check_List(newList):\n    if not newList:\n        return False\n    else:\n        return True\n# Test the function\nmyList = []\nprint(check_List(myList)) # Output: False\n\nmyList = [1, 2, 3, 4, 5, 6, 7]\nprint(check_List(myList)) # Output: True\n\n# Write a python function to count the number of elements in a list\ndef count_List(newList):\n    return",
        "generated_testcode": "assert swap_List([1,2,3,4,5,6,7,8]) == [8,2,3,4,5,6,7]\n",
        "test": "assert swap_List([1,2,3]) == [3,2,1]\nassert swap_List([1,2,3,4,4]) == [4,2,3,4,1]\nassert swap_List([4,5,6]) == [6,5,4]",
        "canonical_solution": "def swap_List(newList): \r\n    size = len(newList) \r\n    temp = newList[0] \r\n    newList[0] = newList[size - 1] \r\n    newList[size - 1] = temp   \r\n    return newList "
    },
    {
        "number": 626,
        "prompt": "Write a python function to find the largest triangle that can be inscribed in the semicircle.\ndef triangle_area(r) :  \n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    return 0.5 * r * r * math.sqrt(3)  \n  \n# Driver code  \nr = 5  \nprint(\"Largest triangle that can be inscribed in a semicircle of radius\", r, \"is\", triangle_area(r)) ",
        "generated_testcode": "assert triangle_area(3) == 1.89272193079968817585\n",
        "test": "assert triangle_area(0) == 0\nassert triangle_area(-1) == -1\nassert triangle_area(2) == 4",
        "canonical_solution": "def triangle_area(r) :  \r\n    if r < 0 : \r\n        return -1\r\n    return r * r "
    },
    {
        "number": 627,
        "prompt": "Write a python function to find the smallest missing number from the given array.\ndef find_First_Missing(array,start,end): \n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    # sort the array in ascending order\n    array.sort()\n    # check if first element is 0 or not\n    if array[0] != 0:\n        return 0\n    # check if the difference between the first and last element is the sum of the range\n    if array[-1]-array[0]+1 == (end-start+1):\n        return array[-1]+1\n    # if not, iterate through the array and find the first missing number\n    for i in range(1,len(array)):\n        if array[i]-array[i-1] != 1:\n            return array[i-1]+1\n    return array[-1]+1\n\n\ndef main():\n    arr = [1,2,3,4,5,6,7,8,9,10,12]\n    start = 0\n    end = 12\n    print(find_First_Missing(arr,start,end))\n\nif __name__ == '__main__':\n    main()\n",
        "generated_testcode": "assert find_First_Missing([1,2,3,4,5,6,7,8,9,10],0,9) == 1\n",
        "test": "assert find_First_Missing([0,1,2,3],0,3) == 4\nassert find_First_Missing([0,1,2,6,9],0,4) == 3\nassert find_First_Missing([2,3,5,8,9],0,4) == 0",
        "canonical_solution": "def find_First_Missing(array,start,end): \r\n    if (start > end): \r\n        return end + 1\r\n    if (start != array[start]): \r\n        return start; \r\n    mid = int((start + end) / 2) \r\n    if (array[mid] == mid): \r\n        return find_First_Missing(array,mid+1,end) \r\n    return find_First_Missing(array,start,mid) "
    },
    {
        "number": 628,
        "prompt": "Write a function to replace all spaces in the given string with character * list item * list item * list item * list item '%20'.\ndef replace_spaces(string):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": true,
        "answer": "    new_string = \"\"\n    for i in string:\n        if i == \" \":\n            new_string += \"%20\"\n        else:\n            new_string += i\n    return new_string\n\n# Test the function with a sample string\nprint(replace_spaces(\"Hello World\"))\n# Output: \"Hello%20World\"\n\n# Test the function with a sample string containing spaces\nprint(replace_spaces(\"This is a sample string with spaces\"))\n# Output: \"This%20is%20a%20sample%20string%20with%20spaces\"\n\n# Test the function with a sample string containing multiple spaces\nprint(replace_spaces(\"This is    a string with     multiple   spaces\"))\n# Output: \"This%20is%20%20a%20string%20with%20%20multiple%20%20spaces\" ",
        "generated_testcode": "assert replace_spaces(\"Hello World\") == \"Hello%20World\"\n",
        "test": "assert replace_spaces(\"My Name is Dawood\") == 'My%20Name%20is%20Dawood'\nassert replace_spaces(\"I am a Programmer\") == 'I%20am%20a%20Programmer'\nassert replace_spaces(\"I love Coding\") == 'I%20love%20Coding'",
        "canonical_solution": "MAX=1000;\r\ndef replace_spaces(string):\r\n  string=string.strip()\r\n  i=len(string)\r\n  space_count=string.count(' ')\r\n  new_length = i + space_count*2\r\n  if new_length > MAX:\r\n    return -1\r\n  index = new_length-1\r\n  string=list(string)\r\n  for f in range(i-2, new_length-2):\r\n    string.append('0')\r\n  for j in range(i-1, 0, -1):\r\n    if string[j] == ' ':\r\n      string[index] = '0'\r\n      string[index-1] = '2'\r\n      string[index-2] = '%'\r\n      index=index-3\r\n    else:\r\n      string[index] = string[j]\r\n      index -= 1\r\n  return ''.join(string)"
    },
    {
        "number": 629,
        "prompt": "Write a python function to find even numbers from a mixed list.\ndef Split(list): \n",
        "checkpoint": "7B",
        "pass": 4,
        "correct": true,
        "answer": "    even = [] \n    odd = [] \n    for i in list: \n        if i % 2 == 0: \n            even.append(i) \n        else: \n            odd.append(i) \n    return even \n  \n# Driver code to test the function \nlist = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] \nprint(\"Even numbers in the list:\") \nprint(Split(list)) ",
        "generated_testcode": "assert Split([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]) == [2,4,6,8,10,12,14]\n",
        "test": "assert Split([1,2,3,4,5]) == [2,4]\nassert Split([4,5,6,7,8,0,1]) == [4,6,8,0]\nassert Split ([8,12,15,19]) == [8,12]",
        "canonical_solution": "def Split(list): \r\n    ev_li = [] \r\n    for i in list: \r\n        if (i % 2 == 0): \r\n            ev_li.append(i)  \r\n    return ev_li"
    },
    {
        "number": 630,
        "prompt": "Write a function to extract all the adjacent coordinates of the given coordinate tuple.\ndef adjac(ele, sub = []): \n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    adjac = [(0, 1), (0, -1), (1, 0), (-1, 0), (1, 1), (1, -1), (-1, 1), (-1, -1)]\n    for x, y in adjac: \n        x, y = ele[0] + x, ele[1] + y\n        if 0 <= x < len(matrix) and 0 <= y < len(matrix[0] and (x, y) not in sub and matrix[x][y] == 1): \n            sub.append((x, y))\n            adjac(matrix, sub)\n    return sub\n\n# Get all the coordinates that have 1's in the matrix\ncoord = [(x, y) for x in range(len(matrix) for y in range(len(matrix[0]) if matrix[x][y] == 1]\n# Extract all the adjacent coordinates of each coordinate in the list\nadjacent = [adjac(ele) for ele in coord]\n# Flatten the list of lists into a single list\nadjacent = [coord for sublist in adjacent for coord in sublist]\n# Remove duplicates using set()\nadjacent = set(adjacent)\n\n# Remove the original coordinates from the list\nadjacent.difference_update(coord)\n# Sort the list\nadjacent = sorted(adjacent)\n\nprint(adjacent)\n\n",
        "generated_testcode": "assert adjac((0,0)) == [(0,1), (1,0), (0, -1), (-1,0)]\n",
        "test": "assert get_coordinates((3, 4)) == [[2, 3], [2, 4], [2, 5], [3, 3], [3, 4], [3, 5], [4, 3], [4, 4], [4, 5]]\nassert get_coordinates((4, 5)) ==[[3, 4], [3, 5], [3, 6], [4, 4], [4, 5], [4, 6], [5, 4], [5, 5], [5, 6]]\nassert get_coordinates((5, 6)) == [[4, 5], [4, 6], [4, 7], [5, 5], [5, 6], [5, 7], [6, 5], [6, 6], [6, 7]]",
        "canonical_solution": "def adjac(ele, sub = []): \r\n  if not ele: \r\n     yield sub \r\n  else: \r\n     yield from [idx for j in range(ele[0] - 1, ele[0] + 2) \r\n                for idx in adjac(ele[1:], sub + [j])] \r\ndef get_coordinates(test_tup):\r\n  res = list(adjac(test_tup))\r\n  return (res) "
    },
    {
        "number": 631,
        "prompt": "Write a function to replace whitespaces with an underscore and vice versa in a given string by using regex.\ndef replace_spaces(text):\n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    import re\n    return re.sub(r'\\s+', '_', text)\n\n# Test the function\nprint(replace_spaces(\"hello world\"))\nprint(replace_spaces(\"a b c d\"))\nprint(replace_spaces(\"this is a test\"))\nprint(replace_spaces(\"Python is awesome\"))\n",
        "generated_testcode": "assert replace_spaces(\"Hello World\") == \"Hello_World\"\n",
        "test": "assert replace_spaces('Jumanji The Jungle') == 'Jumanji_The_Jungle'\nassert replace_spaces('The Avengers') == 'The_Avengers'\nassert replace_spaces('Fast and Furious') == 'Fast_and_Furious'",
        "canonical_solution": "import re\r\ntext = 'Python Exercises'\r\ndef replace_spaces(text):\r\n  text =text.replace (\" \", \"_\")\r\n  return (text)\r\n  text =text.replace (\"_\", \" \")\r\n  return (text)"
    },
    {
        "number": 632,
        "prompt": "Write a python function to move all zeroes to the end of the given list.\ndef move_zero(num_list):\n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    zeroes = []\n    non_zeroes = []\n    for num in num_list:\n        if num == 0:\n            zeroes.append(num)\n        else:\n            non_zeroes.append(num)\n    return zeroes + non_zeroes\n\n\n# Test cases\nprint(move_zero([0, 1, 2, 0, 4, 0, 3, 0, 5, 6, 7, 0, 0, 9]))  # Output: [1, 2, 4, 3, 5, 6, 7, 9, 0, 0, 0, 0, 0]\nprint(move_zero([9, 0, 0, 0, 1, 3, 4, 5, 0, 2, 7, 0]))  # Output: [9, 1, 3, 4, 5, 2, 7, 0, 0, 0, 0, 0]\nprint(move_zero([1, 2, 3, 4, 5, 6, 7, 8]))  # Output: [1, 2, 3, 4, 5, 6, 7, 8]\nprint(move_zero([0, 0, 0, 0]))  # Output: [0, 0, 0]\nprint(move_zero([]))  # Output: []\n\n# Time",
        "generated_testcode": "assert move_zero([0, 1, 0, 2, 3, 0, 4, 0, 5, 0, 6, 0] ) == [1, 2, 3, 4, 5, 6, 0, 0, 0, 0]\n",
        "test": "assert move_zero([1,0,2,0,3,4]) == [1,2,3,4,0,0]\nassert move_zero([2,3,2,0,0,4,0,5,0]) == [2,3,2,4,5,0,0,0,0]\nassert move_zero([0,1,0,1,1]) == [1,1,1,0,0]",
        "canonical_solution": "def move_zero(num_list):\r\n    a = [0 for i in range(num_list.count(0))]\r\n    x = [ i for i in num_list if i != 0]\r\n    x.extend(a)\r\n    return (x)"
    },
    {
        "number": 633,
        "prompt": "Write a python function to find the sum of xor of all pairs of numbers in the given array.\ndef pair_OR_Sum(arr,n) : \n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    res = 0\n    for i in range(n) : \n        for j in range(i+1,n) : \n            res = res ^ arr[i] ^ arr[j]\n    return res\n\n# Test case\narr = [1, 2, 3, 4, 5, 6, 7]\nn = len(arr)\nprint(pair_OR_Sum(arr,n))\n\n\n# Output: 0",
        "generated_testcode": "assert pair_OR_Sum([1,2,3,4,5,6,7,8],5) == 12\n",
        "test": "assert pair_OR_Sum([5,9,7,6],4) == 47\nassert pair_OR_Sum([7,3,5],3) == 12\nassert pair_OR_Sum([7,3],2) == 4",
        "canonical_solution": "def pair_OR_Sum(arr,n) : \r\n    ans = 0 \r\n    for i in range(0,n) :    \r\n        for j in range(i + 1,n) :   \r\n            ans = ans + (arr[i] ^ arr[j])          \r\n    return ans "
    },
    {
        "number": 634,
        "prompt": "Write a python function to find the sum of fourth power of first n even natural numbers.\ndef even_Power_Sum(n): \n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i ** 4\n    return sum\n\n# Test the function with n = 5\nprint(even_Power_Sum(5))\n\n# Test the function with n = 10\nprint(even_Power_Sum(10))",
        "generated_testcode": "assert even_Power_Sum(5) == 22025\n",
        "test": "assert even_Power_Sum(2) == 272\nassert even_Power_Sum(3) == 1568\nassert even_Power_Sum(4) == 5664",
        "canonical_solution": "def even_Power_Sum(n): \r\n    sum = 0; \r\n    for i in range(1,n + 1): \r\n        j = 2*i; \r\n        sum = sum + (j*j*j*j); \r\n    return sum; "
    },
    {
        "number": 635,
        "prompt": "Write a function to push all values into a heap and then pop off the smallest values one at a time.\ndef heap_sort(iterable):\n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    import heapq\n    heap = []\n    for value in iterable:\n        heapq.heappush(heap, value)\n    return [heapq.heappop(heap) for _ in range(len(heap))]\n\n\n# Test cases\nprint(heap_sort([3, 1, 4, 2, 5, 1, 6, 0, 8, 9, 7, 0]))  # [0, 0, 1, 1, 2, 3, 4, 5, 7, 8, 9]\nprint(heap_sort([3, -1, -5, 0, 2, -3, 1, 0, -2, 5, -4]))  # [-5, -4, -3, -2, -1, 0, 0, 1, 2, 3]\n",
        "generated_testcode": "assert heap_sort(range(10, 0, -1)) == [1, 2, 3, 4, 5, 6, 7, 8, 9]\n",
        "test": "assert heap_sort([1, 3, 5, 7, 9, 2, 4, 6, 8, 0])==[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert heap_sort([25, 35, 22, 85, 14, 65, 75, 25, 58])==[14, 22, 25, 25, 35, 58, 65, 75, 85]\nassert heap_sort( [7, 1, 9, 5])==[1,5,7,9]",
        "canonical_solution": "import heapq as hq\r\ndef heap_sort(iterable):\r\n    h = []\r\n    for value in iterable:\r\n        hq.heappush(h, value)\r\n    return [hq.heappop(h) for i in range(len(h))]"
    },
    {
        "number": 636,
        "prompt": "Write a python function to check if roots of a quadratic equation are reciprocal of each other or not.\ndef Check_Solution(a,b,c): \n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    if(a == 0): \n        print(\"Error: Denominator cannot be zero\") \n        return False\n    elif(b**2 - 4*a*c == 0): \n        return True\n    else: \n        root1 = (-b + math.sqrt(b**2 - 4*a*c)) / (2*a) \n        root2 = (-b - math.sqrt(b**2 - 4*a*c)) / (2*a) \n        if(root1 == 1/root2): \n            return True\n        else: \n            return False\n\n# Testing the function \na,b,c = 1, -5, 6 \nif(Check_Solution(a,b,c)): \n    print(\"Roots are reciprocal of each other\") \nelse: \n    print(\"Roots are not reciprocal of each other\") \n    \na,b,c = 1, -12, 11 \nif(Check_Solution(a,b,c)): \n    print(\"Roots are reciprocal of each other\") \nelse: \n    print(\"Roots are not reciprocal of each other\") ",
        "generated_testcode": "assert Check_Solution(1, -3, 2) == True\n",
        "test": "assert Check_Solution(2,0,2) == \"Yes\"\nassert Check_Solution(2,-5,2) == \"Yes\"\nassert Check_Solution(1,2,3) == \"No\"",
        "canonical_solution": "def Check_Solution(a,b,c): \r\n    if (a == c): \r\n        return (\"Yes\"); \r\n    else: \r\n        return (\"No\"); "
    },
    {
        "number": 637,
        "prompt": "Write a function to check whether the given amount has no profit and no loss\ndef noprofit_noloss(actual_cost,sale_amount): \n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    if actual_cost == sale_amount:\n        return True\n    elif actual_cost > sale_amount:\n        return False\n    else:\n        return True\n\n#Testing the function\nprint(noprofit_noloss(100,100)) #True\nprint(noprofit_noloss(100,90)) #False\nprint(noprofit_noloss(100,110)) #False\nprint(noprofit_noloss(100,1110)) #True\n\n\n#Alternative solution using ternary operator\ndef noprofit_noloss2(actual_cost,sale_amount): \n    return actual_cost == sale_amount if actual_cost >= sale_amount else False\n\n#Testing the function\nprint(noprofit_noloss2(100,100)) #True\nprint(noprofit_noloss2(100,90)) #False\nprint(noprofit_noloss2(100,110)) #False\nprint(noprofit_noloss2(100,110)) #True ",
        "generated_testcode": "assert noprofit_noloss(100, 100) == True\n",
        "test": "assert noprofit_noloss(1500,1200)==False\nassert noprofit_noloss(100,100)==True\nassert noprofit_noloss(2000,5000)==False",
        "canonical_solution": "def noprofit_noloss(actual_cost,sale_amount): \r\n  if(sale_amount == actual_cost):\r\n    return True\r\n  else:\r\n    return False"
    },
    {
        "number": 638,
        "prompt": "Write a function to calculate wind chill index.\ndef wind_chill(v,t):\n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    \"\"\"\n    Calculates the wind chill index given the temperature (in degrees Celsius) and wind speed (in meters per second)\n    \"\"\"\n    # Use the following formula:\n    # windchill = 13.12 + 0.6215*T - 111.37*V^0.16 + 0.3965*T^0.16\n    # where T is temperature in Celsius and V is wind speed in meters per second\n    wind_chill = 13.12 + 0.6215*t - 11.37*v**0.16 + 0.3965*t**0.16\n    return wind_chill\n\n\n# Test the function with some values\nprint(wind_chill(10, 10)) # expected output: 6.06534354712577430177\nprint(wind_chill(25, 12)) # expected output: 8.591381234321723002\nprint(wind_chill(25, 18)) # expected output: 12.7875007626021551792\n\n\n# Now, write a function to convert wind chill index to heat index\ndef heat_index(t,rh):\n    \"\"\"\n    Calculates the heat index given the temperature (in",
        "generated_testcode": "assert round(wind_chill(10, 20), 2) == 18.61\n",
        "test": "assert wind_chill(120,35)==40\nassert wind_chill(40,70)==86\nassert wind_chill(10,100)==116",
        "canonical_solution": "import math\r\ndef wind_chill(v,t):\r\n windchill = 13.12 + 0.6215*t -  11.37*math.pow(v, 0.16) + 0.3965*t*math.pow(v, 0.16)\r\n return int(round(windchill, 0))"
    },
    {
        "number": 639,
        "prompt": "Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\ndef sample_nam(sample_names):\n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    sum_of_length = 0\n    for name in sample_names:\n        if name[0].isupper():\n            sum_of_length += len(name)\n    return sum_of_length\n\n\n\nprint(sample_nam([\"Alice\", \"bob\", \"charlie\", \"David\", \"Eve\"]))  # Output: 8 (Alice + David)\nprint(sample_nam([\"Harry\", \"Jane\", \"katy\", \"oliver\", \"Sarah\"]))  # Output: 7 (Jane + Sarah)\nprint(sample_nam([\"Anna\", \"Brian\", \"claire\", \"Daniel\", \"Emma\"]))  # Output: 10 (Anna + Daniel)\n\n",
        "generated_testcode": "assert sample_nam([\"Alice\", \"Bob\", \"Charlie\", \"David\", \"Eve\", \"Frank\", \"Grace\", \"Hannah\", \"Ivan\", \"Judy\", \"Karen\"] == 16\n",
        "test": "assert sample_nam(['sally', 'Dylan', 'rebecca', 'Diana', 'Joanne', 'keith'])==16\nassert sample_nam([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"])==10\nassert sample_nam([\"abcd\", \"Python\", \"abba\", \"aba\"])==6",
        "canonical_solution": "def sample_nam(sample_names):\r\n  sample_names=list(filter(lambda el:el[0].isupper() and el[1:].islower(),sample_names))\r\n  return len(''.join(sample_names))"
    },
    {
        "number": 640,
        "prompt": "Write a function to remove the parenthesis area in a string.\ndef remove_parenthesis(items):\n",
        "checkpoint": "7B",
        "pass": 3,
        "correct": true,
        "answer": "    stack = []\n    result = []\n    for item in items:\n        if item == '(':\n            stack.append(item)\n        elif item == ')':\n            if len(stack) > 0 and stack[-1] == '(':\n                stack.pop()\n            else:\n                result.append(item)\n        else:\n            result.append(item)\n    return ''.join(result)\n\n# Test\nprint(remove_parenthesis(\"(hello) world\"))  # \"world\"\nprint(remove_parenthesis(\"a(bc(de)f)g\")) # \"ag\"\nprint(remove_parenthesis(\"()(hij)klm\")) # \"klm\"\nprint(remove_parenthesis(\"(x(y)z)()\")) # \"xyz\"\nprint(remove_parenthesis(\"abc\"))     # \"abc\"\nprint(remove_parenthesis(\"ab(c)\"))  # \"abc\"\nprint(remove_parenthesis(\"\"))     # \"\"\n",
        "generated_testcode": "assert remove_parenthesis(\"(hello) world\") == \"hello world\"\n",
        "test": "assert remove_parenthesis([\"python (chrome)\"])==(\"python\")\nassert remove_parenthesis([\"string(.abc)\"])==(\"string\")\nassert remove_parenthesis([\"alpha(num)\"])==(\"alpha\")",
        "canonical_solution": "import re\r\ndef remove_parenthesis(items):\r\n for item in items:\r\n    return (re.sub(r\" ?\\([^)]+\\)\", \"\", item))"
    },
    {
        "number": 641,
        "prompt": "Write a function to find the nth nonagonal number.\ndef is_nonagonal(n): \n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": true,
        "answer": "    if n == 1:\n        return 1\n    else:\n        return (n**2)*((2*n) - 1)\n\ndef nth_nonagonal_number(n):\n    return is_nonagonal(n)\n\nprint(nth_nonagonal_number(5))\n",
        "generated_testcode": "assert is_nonagonal(1) == 1\n",
        "test": "assert is_nonagonal(10) == 325\nassert is_nonagonal(15) == 750\nassert is_nonagonal(18) == 1089",
        "canonical_solution": "def is_nonagonal(n): \r\n\treturn int(n * (7 * n - 5) / 2) "
    },
    {
        "number": 642,
        "prompt": "Write a function to remove similar rows from the given tuple matrix.\ndef remove_similar_row(test_list):\n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    new_list = []\n    for row in test_list:\n        if row not in new_list:\n            new_list.append(row)\n    return new_list\n\n\n# test_list = [(1,2,3),(1,2,3),(4,5,6),(4,5,6),(7,8,9),(7,8,9)]\n# print(remove_similar_row(test_list))\n# Expected Output: [(1, 2, 3), (4, 5, 6), (7, 8, 9)]\n\n\ntest_list = [(1, 2, 3), (1, 2, 3), (4, 5, 6), (7, 8, 9), (7, 8, 9), (1, 2, 3)]\nprint(remove_similar_row(test_list))\n# Expected Output: [(1, 2, 3), (4, 5, 6), (7, 8, 9)] ",
        "generated_testcode": "assert remove_similar_row(((1,2,3),(4,5,6),(1,2,3),(7,8,9),(4,5,6)) ) == ((1,2,3),(7,8,9))\n",
        "test": "assert remove_similar_row([[(4, 5), (3, 2)], [(2, 2), (4, 6)], [(3, 2), (4, 5)]] ) == {((2, 2), (4, 6)), ((3, 2), (4, 5))}\nassert remove_similar_row([[(5, 6), (4, 3)], [(3, 3), (5, 7)], [(4, 3), (5, 6)]] ) == {((4, 3), (5, 6)), ((3, 3), (5, 7))}\nassert remove_similar_row([[(6, 7), (5, 4)], [(4, 4), (6, 8)], [(5, 4), (6, 7)]] ) =={((4, 4), (6, 8)), ((5, 4), (6, 7))}",
        "canonical_solution": "def remove_similar_row(test_list):\r\n  res = set(sorted([tuple(sorted(set(sub))) for sub in test_list]))\r\n  return (res) "
    },
    {
        "number": 643,
        "prompt": "Write a function that matches a word containing 'z', not at the start or end of the word.\ndef text_match_wordz_middle(text):\n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    words = text.split()\n    result = []\n    for word in words:\n        if 'z' in word and not word.startswith('z') and not word.endswith('z'):\n            result.append(word)\n    return result\n\n# Test cases\nprint(text_match_wordz_middle(\"The quick brown fox jumps over the lazy dog\")) # [\"brown\", \"jumps\", \"over\"]\nprint(text_match_wordz_middle(\"The zebra is very quick and the zebra is very tired\")) # []\nprint(text_match_wordz_middle(\"The zebra is very quick and the zebra is very tired and the zebra is very lazy\")) # []\nprint(text_match_wordz_middle(\"The zebra is very quick and the zebra is very tired, but the zebra is lazy\")) # []\nprint(text_match_wordz_middle(\"The zebra is very quick and the zebra is very tired, but the zebra is lazy\")) # [\"lazy\"]\nprint(text_match_wordz_middle(\"The zebra is very quick and the zebra is very tired, but the zebra is very lazy\")) # [\"lazy\"]",
        "generated_testcode": "assert text_match_wordz_middle(\"The quick brown fox jumps over the lazy dog\") == \"The quick brown fox jumps over the lazy dog\"\n",
        "test": "assert text_match_wordz_middle(\"pythonzabc.\")==('Found a match!')\nassert text_match_wordz_middle(\"xyzabc.\")==('Found a match!')\nassert text_match_wordz_middle(\"  lang  .\")==('Not matched!')",
        "canonical_solution": "import re\r\ndef text_match_wordz_middle(text):\r\n        patterns = '\\Bz\\B'\r\n        if re.search(patterns,  text):\r\n                return 'Found a match!'\r\n        else:\r\n                return('Not matched!')"
    },
    {
        "number": 644,
        "prompt": "Write a python function to reverse an array upto a given position.\ndef reverse_Array_Upto_K(input, k): \n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    if k >= len(input):\n        k = len(input) - 1\n    for i in range(k//2): \n        input[i], input[len(input)-i-1] = input[len(input)-i-1], input[i]\n    return input\n\n#Example:\ninput_array = [1,2,3,4,5,6,7,8,9,10]\nk = 4\nprint(reverse_Array_Upto_K(input_array, k))\n#Output: [1, 4, 3, 2, 5, 6, 7, 8, 9]\n\ninput_array = [1,2,3,4,5,6,7,8,9,10]\nk = 5\nprint(reverse_Array_Upto_K(input_array, k))\n#Output: [1, 4, 3, 2, 5, 6, 7, 8, 9]\n\ninput_array = [1,2,3,4,5,6,7,8,9,10]\nk = 6\nprint(reverse_Array_Upto_K(input_array, k))\n#Output: [4, 3, 2, 5, 6, 7, 8, 9, 10]\n",
        "generated_testcode": "assert reverse_Array_Upto_K([1,2,3,4,5,6,7,8,9,10], 3) == [3,2,1,6,5,4,9,8,10]\n",
        "test": "assert reverse_Array_Upto_K([1, 2, 3, 4, 5, 6],4) == [4, 3, 2, 1, 5, 6]\nassert reverse_Array_Upto_K([4, 5, 6, 7], 2) == [5, 4, 6, 7]\nassert reverse_Array_Upto_K([9, 8, 7, 6, 5],3) == [7, 8, 9, 6, 5]",
        "canonical_solution": "def reverse_Array_Upto_K(input, k): \r\n  return (input[k-1::-1] + input[k:]) "
    },
    {
        "number": 645,
        "prompt": "Write a function to find the product of it\u2019s kth index in the given tuples.\ndef get_product(val) : \n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    lst = []\n    for i in val : \n        lst.append(i[0]*i[1])\n    return lst\n\nprint(get_product([(2,3),(4,5),(6,7),(8,9)]) #[6,15,54]\n\n\n#Solution:We can use the get_product function to find the product of the tuples. We can pass a list of tuples as an argument to the function and iterate through the tuples using a loop and multiply the first and second element of each tuple to get the product. We can append each product to a list. Finally, we can return the kth index of the list. ",
        "generated_testcode": "assert get_product((1,2,3,4,5,6,7,8,9,10) == 30\n",
        "test": "assert find_k_product([(5, 6, 7), (1, 3, 5), (8, 9, 19)], 2) == 665\nassert find_k_product([(6, 7, 8), (2, 4, 6), (9, 10, 20)], 1) == 280\nassert find_k_product([(7, 8, 9), (3, 5, 7), (10, 11, 21)], 0) == 210",
        "canonical_solution": "def get_product(val) : \r\n\tres = 1\r\n\tfor ele in val: \r\n\t\tres *= ele \r\n\treturn res \r\ndef find_k_product(test_list, K):\r\n  res = get_product([sub[K] for sub in test_list])\r\n  return (res) "
    },
    {
        "number": 646,
        "prompt": "Write a python function to count number of cubes of size k in a cube of size n.\ndef No_of_cubes(N,K):\n",
        "checkpoint": "7B",
        "pass": 3,
        "correct": true,
        "answer": "    count=0\n    for i in range(1,N+1):\n        for j in range(1,N+1):\n            for k in range(1,N+1):\n                if i**3+j**3+k**3==N:\n                    count+=1\n    return count\n\n# Test the function with some test cases\nprint(No_of_cubes(10,3)) # Output: 39\nprint(No_of_cubes(10,2)) # Output: 18\nprint(No_of_cubes(10,1)) # Output: 1\nprint(No_of_cubes(10,4)) # Output: 1\nprint(No_of_cubes(10,5)) # Output: 0\n\n# This function uses the brute force approach to solve the problem. It simply iterates through all the possible combinations of i,j and k and checks if their cubes sum up to n. \n# It then counts the number of such combinations and returns the count. \n# This approach has a time complexity of O(N^3) and will not be efficient for large values of N. \n# A more efficient approach would be to use the fact that the cube of any number can be expressed as the sum of three cubes of smaller numbers. We can use this fact to optimize the function. ",
        "generated_testcode": "assert No_of_cubes(3,2) == 1\n",
        "test": "assert No_of_cubes(2,1) == 8\nassert No_of_cubes(5,2) == 64\nassert No_of_cubes(1,1) == 1",
        "canonical_solution": "def No_of_cubes(N,K):\r\n    No = 0\r\n    No = (N - K + 1)\r\n    No = pow(No, 3)\r\n    return No"
    },
    {
        "number": 647,
        "prompt": "Write a function to split a string at uppercase letters.\ndef split_upperstring(text):\n",
        "checkpoint": "7B",
        "pass": 7,
        "correct": true,
        "answer": "    words = []\n    word = ''\n    for i in range(len(text)):\n        if text[i].isupper() and i != 0:\n            words.append(word)\n            word = text[i]\n        else:\n            word += text[i]\n    words.append(word)\n    return words\n\n\n# Test the function with some sample inputs\nprint(split_upperstring('HelloWorld')) # ['Hello', 'World']\nprint(split_upperstring('ThisIsAString')) # ['This', 'Is', 'A', 'String']\nprint(split_upperstring('PythonIsAwesome')) # ['Python', 'Is', 'Awesome']\nprint(split_upperstring('CodeWarsIsAwesome')) # ['Code', 'Wars', 'Is', 'Awesome']\n",
        "generated_testcode": "assert split_upperstring(\"HelloWorld\") == [\"Hello\", \"World\"]\n",
        "test": "assert split_upperstring(\"PythonProgramLanguage\")==['Python','Program','Language']\nassert split_upperstring(\"PythonProgram\")==['Python','Program']\nassert split_upperstring(\"ProgrammingLanguage\")==['Programming','Language']",
        "canonical_solution": "import re\r\ndef split_upperstring(text):\r\n return (re.findall('[A-Z][^A-Z]*', text))"
    },
    {
        "number": 648,
        "prompt": "Write a function to exchange the position of every n-th value with (n+1)th value and (n+1)th value with n-th value in a given list.\ndef exchange_elements(lst):\n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    n = int(input(\"Enter the value of n: \"))\n    for i in range(n-1, len(lst), 2):\n        lst[i], lst[i+1] = lst[i+1], lst[i]\n    return lst\n\nlst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nprint(\"Original list: \", lst)\nprint(\"Modified list: \", exchange_elements(lst))\n\n# Output: Original list:  [1, 2, 4, 3, 6, 5, 8, 7, 9, 10]\n\n\n# Explanation:\n# We have taken an input list of integers, then user is asked to enter the value of n. \n# Then, we are using a for loop to iterate through the list starting from n-1 to the end of the list in steps of 2. \n# In each iteration, we are swapping the element at nth position with the element at (n+1)th position and element at (n+1)th position with the element at nth position. \n# Finally, the modified list is printed. ",
        "generated_testcode": "assert exchange_elements([1,2,3,4,5,6,7,8,9]) == [2,1,4,3,6,5,8,7,9]\n",
        "test": "assert exchange_elements([0,1,2,3,4,5])==[1, 0, 3, 2, 5, 4] \nassert exchange_elements([5,6,7,8,9,10])==[6,5,8,7,10,9] \nassert exchange_elements([25,35,45,55,75,95])==[35,25,55,45,95,75] ",
        "canonical_solution": "from itertools import zip_longest, chain, tee\r\ndef exchange_elements(lst):\r\n    lst1, lst2 = tee(iter(lst), 2)\r\n    return list(chain.from_iterable(zip_longest(lst[1::2], lst[::2])))"
    },
    {
        "number": 649,
        "prompt": "Write a python function to calculate the sum of the numbers in a list between the indices of a specified range.\ndef sum_Range_list(nums, m, n):                                                                                                                                                                                                \n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    # Initialize a variable to store the sum\n    total = 0\n    # Loop through the range of the specified indices and add each number to the sum\n    for i in range(m, n+1):\n        total += nums[i]\n    # Return the sum\n    return total\n\n# Test the function with the following list and indices\nnums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]\nm = 2\nn = 5\nprint(sum_Range_list(nums, m, n)) # Output: 33\n\nnums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]\nm = 3\nn = 6\nprint(sum_Range_list(nums, m, n)) # Output: 24",
        "generated_testcode": "assert sum_Range_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2, 4) == 12\n",
        "test": "assert sum_Range_list([2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12],8,10) == 29\nassert sum_Range_list([1,2,3,4,5],1,2) == 5\nassert sum_Range_list([1,0,1,2,5,6],4,5) == 11",
        "canonical_solution": "def sum_Range_list(nums, m, n):                                                                                                                                                                                                \r\n    sum_range = 0                                                                                                                                                                                                         \r\n    for i in range(m, n+1, 1):                                                                                                                                                                                        \r\n        sum_range += nums[i]                                                                                                                                                                                                  \r\n    return sum_range   "
    },
    {
        "number": 650,
        "prompt": "Write a python function to check whether the given two arrays are equal or not.\ndef are_Equal(arr1,arr2,n,m):\n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    if n!=m:\n        return False\n    else:\n        for i in range(n):\n            if arr1[i]!=arr2[i]:\n                return False\n        return True\n    \n#Testing the function\narr1 = [1,2,3,4,5,6]\narr2 = [1,2,3,4,5,6]\narr3 = [1,2,3,4,6,7]\narr4 = [1,2,3,5,6]\nn1 = len(arr1)\nn2 = len(arr2)\nn3 = len(arr3)\nn4 = len(arr4)\nprint(are_Equal(arr1,arr2,n1))\nprint(are_Equal(arr2,arr3,n2))\nprint(are_Equal(arr1,arr4,n3))\nprint(are_Equal(arr2,arr4,n4)) ",
        "generated_testcode": "assert are_Equal([1,2,3,4,5], [1,2,3,4,5], 4) == True\n",
        "test": "assert are_Equal([1,2,3],[3,2,1],3,3) == True\nassert are_Equal([1,1,1],[2,2,2],3,3) == False\nassert are_Equal([8,9],[4,5,6],2,3) == False",
        "canonical_solution": "def are_Equal(arr1,arr2,n,m):\r\n    if (n != m):\r\n        return False\r\n    arr1.sort()\r\n    arr2.sort()\r\n    for i in range(0,n - 1):\r\n        if (arr1[i] != arr2[i]):\r\n            return False\r\n    return True"
    },
    {
        "number": 651,
        "prompt": "Write a function to check if one tuple is a subset of another tuple.\ndef check_subset(test_tup1, test_tup2):\n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    for i in test_tup1:\n        if i not in test_tup2:\n            return False\n    return True\n\n\n# Test the function with some tuples\nprint(check_subset((1, 2, 3, 4, 5, 6, 7), (2, 4, 5, 6, 8, 9)) # True\nprint(check_subset((1, 2, 3, 4), (2, 4, 5, 6, 8, 9)) # False\nprint(check_subset((1, 2, 3), (2, 3, 4, 5, 6, 7)) # False\nprint(check_subset((1, 2, 3, 4, 5), (2, 3, 4, 5)) # True\nprint(check_subset((1, 2, 3, 4), (1, 2, 3, 4)) # True",
        "generated_testcode": "assert check_subset((1, 2, 3, 4, 5), (1, 2, 3)) == True\n",
        "test": "assert check_subset((10, 4, 5, 6), (5, 10)) == True\nassert check_subset((1, 2, 3, 4), (5, 6)) == False\nassert check_subset((7, 8, 9, 10), (10, 8)) == True",
        "canonical_solution": "def check_subset(test_tup1, test_tup2):\r\n  res = set(test_tup2).issubset(test_tup1)\r\n  return (res) "
    },
    {
        "number": 652,
        "prompt": "Write a function to flatten the given tuple matrix into the tuple list with each tuple representing each column.\ndef matrix_to_list(test_list):\n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    result = []\n    for i in range(len(test_list[0]):\n        for j in range(len(test_list):\n            result.append(test_list[i][j])\n    return result\n\n# Test the function with the given example\nmatrix = ((1,2,3), (4,5,6), (7,8,9))\nprint(matrix_to_list(matrix)) # should print [1, 4, 7, 2, 5, 8, 3, 6, 9]\n\n# Test the function with the given example\nmatrix = ((1,2), (4,5), (7,8))\nprint(matrix_to_list(matrix)) # should print [1, 4, 7, 2, 5, 8]\n\n# Test the function with the given example\nmatrix = ((1,2,3,4), (5,6,7))\nprint(matrix_to_list(matrix)) # should print [1, 5, 2, 3, 6, 4, 7]\n\n# Test the function with the given example\nmatrix = ((1,2),)\nprint(matrix_to_list(matrix)) # should print [1]",
        "generated_testcode": "assert matrix_to_list([(1,2,3), (4,5,6), (7,8,9)]) == [(1,4,7), (2,5,8), (3,6,9)]\n",
        "test": "assert matrix_to_list([[(4, 5), (7, 8)], [(10, 13), (18, 17)], [(0, 4), (10, 1)]]) == '[(4, 7, 10, 18, 0, 10), (5, 8, 13, 17, 4, 1)]'\nassert matrix_to_list([[(5, 6), (8, 9)], [(11, 14), (19, 18)], [(1, 5), (11, 2)]]) == '[(5, 8, 11, 19, 1, 11), (6, 9, 14, 18, 5, 2)]'\nassert matrix_to_list([[(6, 7), (9, 10)], [(12, 15), (20, 21)], [(23, 7), (15, 8)]]) == '[(6, 9, 12, 20, 23, 15), (7, 10, 15, 21, 7, 8)]'",
        "canonical_solution": "def matrix_to_list(test_list):\r\n  temp = [ele for sub in test_list for ele in sub]\r\n  res = list(zip(*temp))\r\n  return (str(res))"
    },
    {
        "number": 653,
        "prompt": "Write a function to group a sequence of key-value pairs into a dictionary of lists using collections module.\ndef grouping_dictionary(l):\n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    from collections import defaultdict\n    d = defaultdict(list)\n    for key, value in l:\n        d[key].append(value)\n    return dict(d)\n\n# Example usage:\nl = [('red', 1), ('blue', 2), ('red', 3), ('green', 4), ('blue', 5), ('red', 6), ('green', 7)]\nprint(grouping_dictionary(l))  # Output: {'red': [1, 3, 6], 'blue': [2, 5], 'green': [4, 7]}\n",
        "generated_testcode": "assert grouping_dictionary([('a', 1), ('b', 2), ('a', 3), ('b', 4), ('c', 5), ('a', 6), ('c', 7)] ) == {'a': [1, 3, 6], 'b': [2, 4], 'c': [5, 7]}\n",
        "test": "assert grouping_dictionary([('yellow', 1), ('blue', 2), ('yellow', 3), ('blue', 4), ('red', 1)])== ({'yellow': [1, 3], 'blue': [2, 4], 'red': [1]})\nassert grouping_dictionary([('yellow', 10), ('blue', 20), ('yellow', 30), ('blue', 40), ('red', 10)])== ({'yellow': [10, 30], 'blue': [20, 40], 'red': [10]})\nassert grouping_dictionary([('yellow', 15), ('blue', 25), ('yellow', 35), ('blue', 45), ('red', 15)])== ({'yellow': [15, 35], 'blue': [25, 45], 'red': [15]})",
        "canonical_solution": "from collections import defaultdict\r\ndef grouping_dictionary(l):\r\n    d = defaultdict(list)\r\n    for k, v in l:\r\n        d[k].append(v)\r\n    return d"
    },
    {
        "number": 654,
        "prompt": "Write a function to find the perimeter of a rectangle.\ndef rectangle_perimeter(l,b):\n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    return 2*(l+b)\n\n# Test the function with the given inputs\nprint(rectangle_perimeter(6,4)) # expected output: 16\nprint(rectangle_perimeter(10,14)) # expected output: 32\nprint(rectangle_perimeter(7,5)) # expected output: 22 ",
        "generated_testcode": "assert rectangle_perimeter(5, 10) == 20\n",
        "test": "assert rectangle_perimeter(10,20)==60\nassert rectangle_perimeter(10,5)==30\nassert rectangle_perimeter(4,2)==12",
        "canonical_solution": "def rectangle_perimeter(l,b):\r\n  perimeter=2*(l+b)\r\n  return perimeter"
    },
    {
        "number": 655,
        "prompt": "Write a python function to find the sum of fifth power of n natural numbers.\ndef fifth_Power_Sum(n) : \n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    sum = 0\n    for i in range(1, n+1) : \n        sum += i**5\n    return sum\n\n# Test the function with an example\nprint(fifth_Power_Sum(5)) # Output: 2255\nprint(fifth_Power_Sum(10)) # Output: 314165\n\n\n# Function to find the sum of fifth power of n natural numbers\ndef fifth_Power_Sum(n) : \n    sum = 0\n    for i in range(1, n+1) : \n        sum += i**5\n    return sum\n\n# Test the function with an example\nprint(fifth_Power_Sum(5)) # Output: 225\nprint(fifth_Power_Sum(10)) # Output: 314165 ",
        "generated_testcode": "assert fifth_Power_Sum(5) == 2295\n",
        "test": "assert fifth_Power_Sum(2) == 33\nassert fifth_Power_Sum(4) == 1300\nassert fifth_Power_Sum(3) == 276",
        "canonical_solution": "def fifth_Power_Sum(n) : \r\n    sm = 0 \r\n    for i in range(1,n+1) : \r\n        sm = sm + (i*i*i*i*i) \r\n    return sm "
    },
    {
        "number": 656,
        "prompt": "Write a python function to find the minimum sum of absolute differences of two arrays.\ndef find_Min_Sum(a,b,n): \n",
        "checkpoint": "7B",
        "pass": 4,
        "correct": true,
        "answer": "    a.sort() \n    b.sort() \n    min_sum = float('inf') \n    for i in range(n): \n        for j in range(n): \n            min_sum = min(min_sum, abs(a[i] - b[j])) \n    return min_sum ",
        "generated_testcode": "assert find_Min_Sum([1,2,3,4,5,6], [2,3,4,5,6], 4) == 0\n",
        "test": "assert find_Min_Sum([3,2,1],[2,1,3],3) == 0\nassert find_Min_Sum([1,2,3],[4,5,6],3) == 9\nassert find_Min_Sum([4,1,8,7],[2,3,6,5],4) == 6",
        "canonical_solution": "def find_Min_Sum(a,b,n): \r\n    a.sort() \r\n    b.sort() \r\n    sum = 0  \r\n    for i in range(n): \r\n        sum = sum + abs(a[i] - b[i]) \r\n    return sum"
    },
    {
        "number": 657,
        "prompt": "Write a python function to find the first digit in factorial of a given number.\ndef first_Digit(n) : \n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    fact = 1\n    for i in range(1, n+1) : \n        fact = fact * i\n    return fact\n\ndef first_digit(n) : \n    return int(str(fact(n)[0])\n\n\n#Test the function\nprint(first_digit(5)) # Output: 5\nprint(first_digit(10)) # Output: 2\nprint(first_digit(7)) # Output: 5\nprint(first_digit(15)) # Output: 3\nprint(first_digit(20)) # Output: 2\nprint(first_digit(25)) # Output: 5\nprint(first_digit(35)) # Output: 7 ",
        "generated_testcode": "assert first_Digit(5) == 5\n",
        "test": "assert first_Digit(5) == 1\nassert first_Digit(10) == 3\nassert first_Digit(7) == 5",
        "canonical_solution": "import math \r\ndef first_Digit(n) : \r\n    fact = 1\r\n    for i in range(2,n + 1) : \r\n        fact = fact * i \r\n        while (fact % 10 == 0) :  \r\n            fact = int(fact / 10) \r\n    while (fact >= 10) : \r\n        fact = int(fact / 10) \r\n    return math.floor(fact) "
    },
    {
        "number": 658,
        "prompt": "Write a function to find the item with maximum occurrences in a given list.\ndef max_occurrences(list1):\n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    occurrences = {}\n    for item in list1:\n        if item not in occurrences:\n            occurrences[item] = 1\n        else:\n            occurrences[item] += 1\n    max_item = None\n    max_count = 0\n    for key, value in occurrences.items():\n        if value > max_count:\n            max_count = value\n            max_item = key\n    return max_item\n\n\n# Example usage:\nlist1 = [1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2, 3, 4, 3]\nprint(max_occurrences(list1))  # Output: 3\n\nlist2 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nprint(max_occurrences(list2))  # Output: None\nlist3 = [1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 4, 4, 4]\nprint(max_occurrences(list3))  # Output: 1",
        "generated_testcode": "assert max_occurrences([\"apple\", \"banana\", \"orange\", \"apple\", \"banana\", \"apple\", \"orange\", \"banana\", \"orange\", \"orange\"] == \"orange\")\n",
        "test": "assert max_occurrences([2,3,8,4,7,9,8,2,6,5,1,6,1,2,3,4,6,9,1,2])==2\nassert max_occurrences([1, 3,5, 7,1, 3,13, 15, 17,5, 7,9,1, 11])==1\nassert max_occurrences([1, 2, 3,2, 4, 5,1, 1, 1])==1",
        "canonical_solution": "def max_occurrences(list1):\r\n    max_val = 0\r\n    result = list1[0] \r\n    for i in list1:\r\n        occu = list1.count(i)\r\n        if occu > max_val:\r\n            max_val = occu\r\n            result = i \r\n    return result"
    },
    {
        "number": 659,
        "prompt": "Write a python function to print duplicants from a list of integers.\ndef Repeat(x): \n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    result = {}\n    for i in x:\n        if i in result:\n            result[i] += 1\n        else:\n            result[i] = 1\n    for key in result:\n        if result[key] > 1:\n            print(key, end=\" \")\n\n#Testing the function\nprint(\"Test 1:\")\nRepeat([1,2,3,4,5,6,2,6,7,8,9,9,10,10,10,10,11,12,12,12,12,13,13])\n\nprint(\"\\nTest 2:\")\nRepeat([1,2,3,4,5,6,7,8,9,10])\nprint(\"\\nTest 3:\")\nRepeat([1])\nprint(\"\\nTest 4:\")\nRepeat([])\n\n#Output: \n#Test 1:\n#2 6 10 12 \n#Test 2:\n#Test 3:\n#Test 4:\n#Test 5:\n",
        "generated_testcode": "assert Repeat([1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9] == [1,2,3,4,5,6,7,8,9]\n",
        "test": "assert Repeat([10, 20, 30, 20, 20, 30, 40, 50, -20, 60, 60, -20, -20]) == [20, 30, -20, 60]\nassert Repeat([-1, 1, -1, 8]) == [-1]\nassert Repeat([1, 2, 3, 1, 2,]) == [1, 2]",
        "canonical_solution": "def Repeat(x): \r\n    _size = len(x) \r\n    repeated = [] \r\n    for i in range(_size): \r\n        k = i + 1\r\n        for j in range(k, _size): \r\n            if x[i] == x[j] and x[i] not in repeated: \r\n                repeated.append(x[i]) \r\n    return repeated "
    },
    {
        "number": 660,
        "prompt": "Write a python function to choose points from two ranges such that no point lies in both the ranges.\ndef find_Points(l1,r1,l2,r2): \n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    points = []\n    for i in range(l1,r1+1):\n        for j in range(l2,r2+1):\n            if i != j and i != j-1:\n                points.append((i,j))\n    return points\n\n# Testing the function\nprint(find_Points(1,5,2,4)) # Output: [(1, 3), (2, 3), (2, 4)]\nprint(find_Points(10,20,30,40)) # Output: [(10, 21), (11, 21), (11, 22), (12, 22), (12, 23), (13, 23), (13, 24), (14, 24), (14, 25), (15, 25), (15, 26), (16, 26), (16, 27), (17, 27), (17, 28), (18, 28), (18, 29), (19, 29), (19, 30)]\nprint(find_Points(5,10,15,25)) # Output: [(5, 11), (6, 11), (6, 12), (7, 12), (7, 13), (8, 13), (8, 14), (9",
        "generated_testcode": "assert find_Points(1,5,2,4) == [2,3,4]\n",
        "test": "assert find_Points(5,10,1,5) == (1,10)\nassert find_Points(3,5,7,9) == (3,9)\nassert find_Points(1,5,2,8) == (1,8)",
        "canonical_solution": "def find_Points(l1,r1,l2,r2): \r\n    x = min(l1,l2) if (l1 != l2) else -1\r\n    y = max(r1,r2) if (r1 != r2) else -1\r\n    return (x,y)"
    },
    {
        "number": 661,
        "prompt": "Write a function to find the maximum sum that can be formed which has no three consecutive elements present.\ndef max_sum_of_three_consecutive(arr, n): \n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    # Initialize the maximum sum to be 0\n    max_sum = 0\n    # Initialize the current sum to be 0\n    curr_sum = 0\n    # Initialize the previous sum to be 0\n    prev_sum = 0\n    # Initialize the second last sum to be 0\n    prev_prev_sum = 0\n\n    # Traverse through the array\n    for i in range(n):\n        # Update the current sum\n        curr_sum = max(arr[i] + prev_sum, prev_sum)\n        # Update the previous sum\n        prev_sum = max(arr[i], curr_sum - prev_sum)\n        # Update the second last sum\n        max_sum = max(max_sum, curr_sum)\n        # Update the previous sum\n        prev_prev_sum = prev_sum\n    \n    # Return the maximum sum\n    return max_sum\n\n\n# Test the function with the given example\narr = [-2, 1, -3, 4, -1, -2, 1, 5, -3]\nn = len(arr)\nprint(\"Maximum sum that can be formed without three consecutive elements: \", max_sum_of_three_consecutive(arr, n))\n\n# Test the function with the given example\narr = [-1, 2, 3, -1, 4, -1, 6, -1, 4, -1]\nn = len(arr)\nprint(\"Maximum sum that can be formed without three",
        "generated_testcode": "assert max_sum_of_three_consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9], 6) == 24\n",
        "test": "assert max_sum_of_three_consecutive([100, 1000, 100, 1000, 1], 5) == 2101\nassert max_sum_of_three_consecutive([3000, 2000, 1000, 3, 10], 5) == 5013\nassert max_sum_of_three_consecutive([1, 2, 3, 4, 5, 6, 7, 8], 8) == 27",
        "canonical_solution": "def max_sum_of_three_consecutive(arr, n): \r\n\tsum = [0 for k in range(n)] \r\n\tif n >= 1: \r\n\t\tsum[0] = arr[0] \r\n\tif n >= 2: \r\n\t\tsum[1] = arr[0] + arr[1] \r\n\tif n > 2: \r\n\t\tsum[2] = max(sum[1], max(arr[1] + arr[2], arr[0] + arr[2])) \r\n\tfor i in range(3, n): \r\n\t\tsum[i] = max(max(sum[i-1], sum[i-2] + arr[i]), arr[i] + arr[i-1] + sum[i-3]) \r\n\treturn sum[n-1]"
    },
    {
        "number": 662,
        "prompt": "Write a function to sort a list in a dictionary.\ndef sorted_dict(dict1):\n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    sorted_dict = {}\n    for key, value in sorted(dict1.items()):\n        sorted_dict[key] = value\n    return sorted_dict\n\n# Test the function with a dictionary\nmy_dict = {'apple': 2, 'banana': 1, 'orange': 4, 'cherry': 6, 'grape': 3}\nprint(sorted_dict(my_dict))\n\n# Output: {'apple': 2, 'banana': 1, 'cherry': 3, 'orange': 4} ",
        "generated_testcode": "assert sorted_dict({\"apple\": 3, \"banana\": 2, \"orange\": 1, \"grape\": 4}) == {\"apple\": 3, \"banana\": 2, \"grape\": 4}\n",
        "test": "assert sorted_dict({'n1': [2, 3, 1], 'n2': [5, 1, 2], 'n3': [3, 2, 4]})=={'n1': [1, 2, 3], 'n2': [1, 2, 5], 'n3': [2, 3, 4]}\nassert sorted_dict({'n1': [25,37,41], 'n2': [41,54,63], 'n3': [29,38,93]})=={'n1': [25, 37, 41], 'n2': [41, 54, 63], 'n3': [29, 38, 93]}\nassert sorted_dict({'n1': [58,44,56], 'n2': [91,34,58], 'n3': [100,200,300]})=={'n1': [44, 56, 58], 'n2': [34, 58, 91], 'n3': [100, 200, 300]}",
        "canonical_solution": "def sorted_dict(dict1):\r\n  sorted_dict = {x: sorted(y) for x, y in dict1.items()}\r\n  return sorted_dict"
    },
    {
        "number": 663,
        "prompt": "Write a function to find the largest possible value of k such that k modulo x is y.\ndef find_max_val(n, x, y): \n",
        "checkpoint": "7B",
        "pass": 7,
        "correct": true,
        "answer": "    # Initialize the max value of k \n    max_k = n // x + 1\n    # Calculate the difference between n and x \n    diff = n % x \n    # If diff is less than y, then we need to add x to max_k to make it y \n    if diff < y: \n        max_k += (y - diff) // x \n    return max_k \n  \n# Test the function with some inputs \nn = 15\nx = 3\ny = 2\nprint(find_max_val(n, x, y))\n\nn = 10\nx = 5\ny = 2\nprint(find_max_val(n, x, y))\n\nn = 100\nx = 7\ny = 5\nprint(find_max_val(n, x, y)) ",
        "generated_testcode": "assert find_max_val(10, 3, 2) == 4\n",
        "test": "assert find_max_val(15, 10, 5) == 15\nassert find_max_val(187, 10, 5) == 185\nassert find_max_val(16, 11, 1) == 12",
        "canonical_solution": "import sys \r\ndef find_max_val(n, x, y): \r\n\tans = -sys.maxsize \r\n\tfor k in range(n + 1): \r\n\t\tif (k % x == y): \r\n\t\t\tans = max(ans, k) \r\n\treturn (ans if (ans >= 0 and\r\n\t\t\t\t\tans <= n) else -1) "
    },
    {
        "number": 664,
        "prompt": "Write a python function to find the average of even numbers till a given even number.\ndef average_Even(n) : \n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    sum = 0\n    count = 0\n    i = 1\n    while i<=n :\n        if i%2==0 :\n            sum += i\n            count += 1\n        i += 1\n    return sum/count if count>0 else 0\n\n\n# Test the function \nprint(average_Even(10)) # Output: 6.0\nprint(average_Even(5)) # Output: 0\nprint(average_Even(15)) # Output: 8.0\nprint(average_Even(20)) # Output: 10.0\nprint(average_Even(0)) # Output: 0\nprint(average_Even(2)) # Output: 2.0\n",
        "generated_testcode": "assert average_Even(10) == 6.0\n",
        "test": "assert average_Even(2) == 2\nassert average_Even(4) == 3\nassert average_Even(100) == 51",
        "canonical_solution": "def average_Even(n) : \r\n    if (n% 2!= 0) : \r\n        return (\"Invalid Input\") \r\n        return -1  \r\n    sm = 0\r\n    count = 0\r\n    while (n>= 2) : \r\n        count = count+1\r\n        sm = sm+n \r\n        n = n-2\r\n    return sm // count "
    },
    {
        "number": 665,
        "prompt": "Write a python function to shift first element to the end of given list.\ndef move_last(num_list):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": true,
        "answer": "    if len(num_list) == 0:\n        return num_list\n    else:\n        return num_list[1:]+[num_list[0]]\n\n# Example usage:\nnum_list = [1, 2, 3, 4, 5, 6, 7, 8, 9]\nprint(move_last(num_list))  # Output: [2, 3, 4, 5, 6, 7, 8, 9, 1]\n\nnum_list = [10, 20, 30, 40, 50]\nprint(move_last(num_list))  # Output: [20, 30, 40, 50, 10]\n\nnum_list = [1, 2, 3]\nprint(move_last(num_list))  # Output: [2, 3, 1]\n\nnum_list = []\nprint(move_last(num_list))  # Output: []\n\n\n# Write a python function to check if a number is prime or not\ndef is_prime(num):\n    if num > 1:\n        for i in range(2, num):\n            if (num % i) == 0:\n                return False\n        else:\n            return True\n    else:\n        return False\n# Example usage:\nprint(is_prime(7))  # Output: True\nprint(is_prime(12))  # Output",
        "generated_testcode": "assert move_last([1,2,3,4,5,6,7]) == [2,3,4,5,6,7,1]\n",
        "test": "assert move_last([1,2,3,4]) == [2,3,4,1]\nassert move_last([2,3,4,1,5,0]) == [3,4,1,5,0,2]\nassert move_last([5,4,3,2,1]) == [4,3,2,1,5]",
        "canonical_solution": "def move_last(num_list):\r\n    a = [num_list[0] for i in range(num_list.count(num_list[0]))]\r\n    x = [ i for i in num_list if i != num_list[0]]\r\n    x.extend(a)\r\n    return (x)"
    },
    {
        "number": 666,
        "prompt": "Write a function to count occurrence of a character in a string.\ndef count_char(string,char):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": true,
        "answer": "    count = 0\n    for i in string:\n        if i == char:\n            count += 1\n    return count\n\n# Test the function\nstring = \"hello world\"\nchar = \"l\"\nprint(count_char(string,char)) # Output: 3\n\nstring = \"python\"\nchar = \"y\"\nprint(count_char(string,char)) # Output: 2\n\nstring = \"hello\"\nchar = \"o\"\nprint(count_char(string,char)) # Output: 2\n\nstring = \"python programming\"\nchar = \"p\"\nprint(count_char(string,char)) # Output: 2",
        "generated_testcode": "assert count_char(\"hello world\", \"l\") == 3\n",
        "test": "assert count_char(\"Python\",'o')==1\nassert count_char(\"little\",'t')==2\nassert count_char(\"assert\",'s')==2",
        "canonical_solution": "def count_char(string,char):\r\n count = 0\r\n for i in range(len(string)):\r\n    if(string[i] == char):\r\n        count = count + 1\r\n return count"
    },
    {
        "number": 667,
        "prompt": "Write a python function to count number of vowels in the string.\ndef Check_Vow(string, vowels): \n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    count = 0 \n    for char in string: \n        if char in vowels: \n            count += 1\n    return count \n\nvowels = \"aeiou\"\nstring = input(\"Enter a string: \")\nprint(\"Number of vowels in the string:\", Check_Vow(string, vowels)) \n\n\n# Output: \n# Enter a string: hello world \n# Number of vowels in the string: 3 ",
        "generated_testcode": "assert Check_Vow(\"hello world\", \"aeiou\") == 1\n",
        "test": "assert Check_Vow('corner','AaEeIiOoUu') == 2\nassert Check_Vow('valid','AaEeIiOoUu') == 2\nassert Check_Vow('true','AaEeIiOoUu') ==2",
        "canonical_solution": "def Check_Vow(string, vowels): \r\n    final = [each for each in string if each in vowels] \r\n    return(len(final)) \r\n"
    },
    {
        "number": 668,
        "prompt": "Write a python function to replace multiple occurence of character by single.\ndef replace(string, char): \n",
        "checkpoint": "7B",
        "pass": 4,
        "correct": true,
        "answer": "    result = \"\"\n    for i in string:\n        if i != char:\n            result += i\n    return result ",
        "generated_testcode": "assert replace(\"hello world\", \"l\") == \"heo word\"\n",
        "test": "assert replace('peep','e') == 'pep'\nassert replace('Greek','e') == 'Grek'\nassert replace('Moon','o') == 'Mon'",
        "canonical_solution": "import re \r\ndef replace(string, char): \r\n    pattern = char + '{2,}'\r\n    string = re.sub(pattern, char, string) \r\n    return string "
    },
    {
        "number": 669,
        "prompt": "Write a function to check whether the given ip address is valid or not using regex.\ndef check_IP(Ip): \n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    pattern = r\"^(?:[0-9]{1,3}\\.){3}[0-9]{1,3}$\"\n    if re.match(pattern, Ip):\n        return True\n    else:\n        return False\n\n# Test the function\nip = \"192.168.0.1\"\nprint(check_IP(ip)) # True\nip = \"192.168.0.256\"\nprint(check_IP(ip)) # False\nip = \"192.168.0\"\nprint(check_IP(ip)) # False\nip = \"192.168.0.1.1\"\nprint(check_IP(ip)) # False\nip = \"192.168.0.1.1.1\"\nprint(check_IP(ip)) # False\nip = \"192.168.0.01\"\nprint(check_IP(ip)) # False\nip = \"192.168.0.11\"\nprint(check_IP(ip)) # False\nip = \"192.168.0.2556\"\nprint(check_IP(ip)) # False\nip = \"192.168.0.2555\"\nprint(check_IP(ip)) # True\nip = \"192.0.0.1\"\nprint(check_IP(ip)) # True\nip = \"256.1",
        "generated_testcode": "assert check_IP(\"192.168.0.1\") == True\n",
        "test": "assert check_IP(\"192.168.0.1\") == 'Valid IP address'\nassert check_IP(\"110.234.52.124\") == 'Valid IP address'\nassert check_IP(\"366.1.2.2\") == 'Invalid IP address'",
        "canonical_solution": "import re \r\nregex = '''^(25[0-5]|2[0-4][0-9]|[0-1]?[0-9][0-9]?)\\.( \r\n\t\t\t25[0-5]|2[0-4][0-9]|[0-1]?[0-9][0-9]?)\\.( \r\n\t\t\t25[0-5]|2[0-4][0-9]|[0-1]?[0-9][0-9]?)\\.( \r\n\t\t\t25[0-5]|2[0-4][0-9]|[0-1]?[0-9][0-9]?)$'''\r\ndef check_IP(Ip): \r\n\tif(re.search(regex, Ip)): \r\n\t\treturn (\"Valid IP address\") \r\n\telse: \r\n\t\treturn (\"Invalid IP address\") "
    },
    {
        "number": 670,
        "prompt": "Write a python function to check whether a sequence of numbers has a decreasing trend or not.\ndef decreasing_trend(nums):\n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    for i in range(len(nums)-1):\n        if nums[i] > nums[i+1]:\n            return False\n    return True\n\n# Test the function\nnums1 = [1, 2, 3, 4, 5, 6, 7, 8, 9]\nnums2 = [9, 8, 7, 6, 5, 4, 3, 2, 1]\nnums3 = [1, 2, 3, 4, 5, 6, 7, 6, 5, 4, 3, 2, 1]\n\nprint(decreasing_trend(nums1)) # True\nprint(decreasing_trend(nums2)) # False\nprint(decreasing_trend(nums3)) # False",
        "generated_testcode": "assert decreasing_trend([1, 2, 3, 4, 5, 6, 7, 8, 9]) == True\n",
        "test": "assert decreasing_trend([-4,-3,-2,-1]) == True\nassert decreasing_trend([1,2,3]) == True\nassert decreasing_trend([3,2,1]) == False",
        "canonical_solution": "def decreasing_trend(nums):\r\n    if (sorted(nums)== nums):\r\n        return True\r\n    else:\r\n        return False"
    },
    {
        "number": 671,
        "prompt": "Write a python function to set the right most unset bit.\ndef get_Pos_Of_Right_most_Set_Bit(n): \n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    if n == 0:\n        return 0\n    count = 0\n    while n & 1 != 1:\n        count += 1\n        n >>= 1\n    return count\n\nprint(get_Pos_Of_Right_most_Set_Bit(0b11010100)) ",
        "generated_testcode": "assert get_Pos_Of_Right_most_Set_Bit(0b10101010101010) == 4\n",
        "test": "assert set_Right_most_Unset_Bit(21) == 23\nassert set_Right_most_Unset_Bit(11) == 15\nassert set_Right_most_Unset_Bit(15) == 15",
        "canonical_solution": "import math \r\ndef get_Pos_Of_Right_most_Set_Bit(n): \r\n    return int(math.log2(n&-n)+1)   \r\ndef set_Right_most_Unset_Bit(n): \r\n    if (n == 0): \r\n        return 1\r\n    if ((n & (n + 1)) == 0):     \r\n        return n \r\n    pos = get_Pos_Of_Right_most_Set_Bit(~n)      \r\n    return ((1 << (pos - 1)) | n) "
    },
    {
        "number": 672,
        "prompt": "Write a function to find maximum of three numbers.\ndef max_of_three(num1,num2,num3): \n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    if num1 >= num2 and num1 >= num3: \n        return num1 \n    elif num2 >= num1 and num2 >= num3: \n        return num2 \n    else: \n        return num3 \n\nprint(max_of_three(10,20,30)) ",
        "generated_testcode": "assert max_of_three(10,20,30) == 30\n",
        "test": "assert max_of_three(10,20,30)==30\nassert max_of_three(55,47,39)==55\nassert max_of_three(10,49,30)==49",
        "canonical_solution": "def max_of_three(num1,num2,num3): \r\n    if (num1 >= num2) and (num1 >= num3):\r\n       lnum = num1\r\n    elif (num2 >= num1) and (num2 >= num3):\r\n       lnum = num2\r\n    else:\r\n       lnum = num3\r\n    return lnum"
    },
    {
        "number": 673,
        "prompt": "Write a python function to convert a list of multiple integers into a single integer.\ndef convert(list): \n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    str_list = []\n    for i in range(len(list)):\n        str_list.append(str(list[i]))\n    result = int(''.join(str_list))\n    return result\n\n#Test the function\nprint(convert([1,2,3,4,5,6,7,8,9])) #123456789\nprint(convert([10,20,30,40,50,60,70,80,90])) #1234567890\nprint(convert([12,34,56,78,90])) #1234567890\n",
        "generated_testcode": "assert convert([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 123456789\n",
        "test": "assert convert([1,2,3]) == 123\nassert convert([4,5,6]) == 456\nassert convert([7,8,9]) == 789",
        "canonical_solution": "def convert(list): \r\n    s = [str(i) for i in list] \r\n    res = int(\"\".join(s))  \r\n    return (res) "
    },
    {
        "number": 674,
        "prompt": "Write a function to remove duplicate words from a given string using collections module.\ndef remove_duplicate(string):\n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    string = string.split()\n    unique_words = set(string)\n    return \" \".join(unique_words)\n\n\nprint(remove_duplicate(\"hello world world hi hello world\"))  # Output: \"hello world\"\nprint(remove_duplicate(\"the quick brown fox jumps over the lazy dog\")) # Output: \"the quick brown fox jumps over lazy dog\"\nprint(remove_duplicate(\"the quick brown fox jumps over the lazy dog the\")) # Output: \"the quick brown fox jumps over lazy dog\"\nprint(remove_duplicate(\"hello hello hello world world world\")) # Output: \"hello world\"\n\n\n#Solution:\nimport collections\n\ndef remove_duplicate(string):\n    string = string.split()\n    unique_words = set(string)\n    return \" \".join(unique_words)\n\nprint(remove_duplicate(\"hello world hi hello world\"))  # Output: \"hello world\"\nprint(remove_duplicate(\"the quick brown fox jumps over the lazy dog\")) # Output: \"the quick brown fox jumps over lazy dog\"\nprint(remove_duplicate(\"the quick brown fox jumps over the lazy dog the\")) # Output: \"the quick brown fox jumps over lazy dog\"\nprint(remove_duplicate(\"hello hello world world world\")) # Output: \"hello world\" ",
        "generated_testcode": "assert remove_duplicate(\"hello world world world\") == \"hello world\"\n",
        "test": "assert remove_duplicate(\"Python Exercises Practice Solution Exercises\")==(\"Python Exercises Practice Solution\")\nassert remove_duplicate(\"Python Exercises Practice Solution Python\")==(\"Python Exercises Practice Solution\")\nassert remove_duplicate(\"Python Exercises Practice Solution Practice\")==(\"Python Exercises Practice Solution\")",
        "canonical_solution": "from collections import OrderedDict\r\ndef remove_duplicate(string):\r\n  result = ' '.join(OrderedDict((w,w) for w in string.split()).keys())\r\n  return result"
    },
    {
        "number": 675,
        "prompt": "Write a function to add two integers. however, if the sum is between the given range it will return 20.\ndef sum_nums(x, y,m,n):\n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    result = x + y\n    if m <= result <= n:\n        return 20\n    else:\n        return result\n\n# Test cases\nprint(sum_nums(10, 5, 20, 30)) # Should return 30\nprint(sum_nums(15, 20, 10, 20)) # Should return 20\nprint(sum_nums(5, 25, 10, 30)) # Should return 30\nprint(sum_nums(10, 15, 20, 30)) # Should return 40\n",
        "generated_testcode": "assert sum_nums(10, 20, 30, 40) == 50\n",
        "test": "assert sum_nums(2,10,11,20)==20\nassert sum_nums(15,17,1,10)==32\nassert sum_nums(10,15,5,30)==20",
        "canonical_solution": "def sum_nums(x, y,m,n):\r\n    sum_nums= x + y\r\n    if sum_nums in range(m, n):\r\n        return 20\r\n    else:\r\n        return sum_nums"
    },
    {
        "number": 676,
        "prompt": "Write a function to remove everything except alphanumeric characters from the given string by using regex.\ndef remove_extra_char(text1):\n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    import re\n    regex = re.compile(r'[^a-zA-Z0-9]+')\n    result = regex.sub('', text1)\n    return result\n\n#Test the function\ntext1 = \"Hello World! 123abc\"\nprint(remove_extra_char(text1)) #Output: \"Helloworld123abc\" ",
        "generated_testcode": "assert remove_extra_char(\"Hello, World! 123\") == \"HelloWorld123\"\n",
        "test": "assert remove_extra_char('**//Google Android// - 12. ') == 'GoogleAndroid12'\nassert remove_extra_char('****//Google Flutter//*** - 36. ') == 'GoogleFlutter36'\nassert remove_extra_char('**//Google Firebase// - 478. ') == 'GoogleFirebase478'",
        "canonical_solution": "import re\r\ndef remove_extra_char(text1):\r\n  pattern = re.compile('[\\W_]+')\r\n  return (pattern.sub('', text1))"
    },
    {
        "number": 677,
        "prompt": "Write a function to check if the triangle is valid or not.\ndef validity_triangle(a,b,c):\n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    if a+b>c and b+c>a and a+c>b:\n        return True\n    else:\n        return False\n    \n# Test cases\nprint(validity_triangle(3,4,4)) # True\nprint(validity_triangle(7,2,2)) # False\nprint(validity_triangle(5,10,12)) # True\n",
        "generated_testcode": "assert validity_triangle(3,4,5) == True\n",
        "test": "assert validity_triangle(60,50,90)==False\nassert validity_triangle(45,75,60)==True\nassert validity_triangle(30,50,100)==True",
        "canonical_solution": "def validity_triangle(a,b,c):\r\n total = a + b + c\r\n if total == 180:\r\n    return True\r\n else:\r\n    return False"
    },
    {
        "number": 678,
        "prompt": "Write a python function to remove spaces from a given string.\ndef remove_spaces(str1):\n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    return str1.replace(\" \",\"\")\n\n#Test the function\nprint(remove_spaces(\"Hello World\")) # Output: \"Helloworld\"\nprint(remove_spaces(\"Python Programming is Awesome\")) # Output: \"PythonProgrammingisAwesome\"\nprint(remove_spaces(\"This is a test string\")) # Output: \"Thisisteststring\"\nprint(remove_spaces(\"   Remove   spaces   from   the  given   string\")) # Output: \"Removespacesfromthegivenstring\"\n",
        "generated_testcode": "assert remove_spaces(\"Hello World\") == \"HelloWorld\"\n",
        "test": "assert remove_spaces(\"a b c\") == \"abc\"\nassert remove_spaces(\"1 2 3\") == \"123\"\nassert remove_spaces(\" b c\") == \"bc\"",
        "canonical_solution": "def remove_spaces(str1):\r\n  str1 = str1.replace(' ','')\r\n  return str1"
    },
    {
        "number": 679,
        "prompt": "Write a function to access dictionary key\u2019s element by index.\ndef access_key(ditionary,key):\n",
        "checkpoint": "7B",
        "pass": 9,
        "correct": true,
        "answer": "    i = 0\n    for value in ditionary.keys():\n        if i == key:\n            return ditionary[value]\n        i += 1\n    return None\n\n# Test the function with an example dictionary\nexample_dict = {'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5, 'f': 6}\nprint(access_key(example_dict, 2)) # Output: 3\nprint(access_key(example_dict, 4)) # Output: None\n\n# Test the function with an example dictionary\nexample_dict = {'apple': 'red', 'banana': 'yellow', 'cherry': 'red', 'grape': 'purple', 'orange': 'orange'}\nprint(access_key(example_dict, 1)) # Output: yellow\nprint(access_key(example_dict, 3)) # Output: None",
        "generated_testcode": "assert access_key({\"a\":1,\"b\":2,\"c\":3},0) == 1\n",
        "test": "assert access_key({'physics': 80, 'math': 90, 'chemistry': 86},0)== 'physics'\nassert access_key({'python':10, 'java': 20, 'C++':30},2)== 'C++'\nassert access_key({'program':15,'computer':45},1)== 'computer'",
        "canonical_solution": "def access_key(ditionary,key):\r\n  return list(ditionary)[key]"
    },
    {
        "number": 680,
        "prompt": "Write a python function to check whether a sequence of numbers has an increasing trend or not.\ndef increasing_trend(nums):\n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    for i in range(1, len(nums)):\n        if nums[i] <= nums[i-1]:\n            return False\n    return True\n\n# Test the function with some examples\nprint(increasing_trend([1, 2, 3, 4, 5, 6, 7, 8, 9])) # True\nprint(increasing_trend([1, 2, 1, 4, 5, 6, 7, 8, 9])) # False\nprint(increasing_trend([1, 1, 2, 3, 4, 5, 6, 7, 8])) # False\n\n# Example function to generate random sequences\nimport random\ndef random_sequence(n):\n    return [random.randint(1,100) for i in range(n)]\n\n# Test the function with a random sequence of 10 numbers\nnums = random_sequence(10)\nprint(increasing_trend(nums))\n\n# Test the function with a random sequence of 20 numbers\nnums = random_sequence(20)\nprint(increasing_trend(nums))\n\n# Test the function with a random sequence of 30 numbers\nnums = random_sequence(30)\nprint(increasing_trend(nums))\n",
        "generated_testcode": "assert increasing_trend([1, 2, 3, 4, 5, 6, 7, 8, 9]) == True\n",
        "test": "assert increasing_trend([1,2,3,4]) == True\nassert increasing_trend([4,3,2,1]) == False\nassert increasing_trend([0,1,4,9]) == True",
        "canonical_solution": "def increasing_trend(nums):\r\n    if (sorted(nums)== nums):\r\n        return True\r\n    else:\r\n        return False"
    },
    {
        "number": 681,
        "prompt": "Write a python function to find the smallest prime divisor of a number.\ndef smallest_Divisor(n): \n",
        "checkpoint": "7B",
        "pass": 3,
        "correct": true,
        "answer": "    for i in range(2, int(n**0.5)+1): \n        if n % i == 0: \n            return i \n    return n ",
        "generated_testcode": "assert smallest_Divisor(12) == 2\n",
        "test": "assert smallest_Divisor(10) == 2\nassert smallest_Divisor(25) == 5\nassert smallest_Divisor(31) == 31",
        "canonical_solution": "def smallest_Divisor(n): \r\n    if (n % 2 == 0): \r\n        return 2; \r\n    i = 3;  \r\n    while (i*i <= n): \r\n        if (n % i == 0): \r\n            return i; \r\n        i += 2; \r\n    return n; "
    },
    {
        "number": 682,
        "prompt": "Write a function to multiply two lists using map and lambda function.\ndef mul_list(nums1,nums2):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": true,
        "answer": "    return list(map(lambda x,y:x*y, nums1,nums2))\n\n\n#Test the function\nnums1 = [2,4,5,6,7]\nnums2 = [10,20,30,40]\nprint(mul_list(nums1,nums2)) #Output should be [20, 80, 120, 280]\n\n\n#Test the function\nnums1 = [1,2,3]\nnums2 = [4,5,6]\nprint(mul_list(nums1,nums2)) #Output should be [4, 10, 18]\n\n#Test the function\nnums1 = [1,2,3,4]\nnums2 = [5,6,7,8,9]\nprint(mul_list(nums1,nums2)) #Output should be [5, 12, 24, 30, 42]",
        "generated_testcode": "assert mul_list([1,2,3],[4,5,6]) == [4,10,18]\n",
        "test": "assert mul_list([1, 2, 3],[4,5,6])==[4,10,18]\nassert mul_list([1,2],[3,4])==[3,8]\nassert mul_list([90,120],[50,70])==[4500,8400]",
        "canonical_solution": "def mul_list(nums1,nums2):\r\n  result = map(lambda x, y: x * y, nums1, nums2)\r\n  return list(result)"
    },
    {
        "number": 683,
        "prompt": "Write a python function to check whether the given number can be represented by sum of two squares or not.\ndef sum_Square(n) : \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": true,
        "answer": "    if n == 0 or n == 1 : \n        return True\n    elif n < 0 : \n        return False\n    else : \n        i = int(n**0.5) \n        while i >= 1 : \n            if i*i == n : \n                return True\n            elif i*(i+1) >= n : \n                return False\n            i -= 1\n        return False\n\n\n# Testing the function \nn = 4\nprint(sum_Square(n))\nn = 5\nprint(sum_Square(n))\nn = 7\nprint(sum_Square(n))\nn = 10\nprint(sum_Square(n))\nn = 11\nprint(sum_Square(n))\nn = 14\nprint(sum_Square(n))\nn = 15\nprint(sum_Square(n))\nn = 16\nprint(sum_Square(n))\nn = 25\nprint(sum_Square(n))\nn = 26\nprint(sum_Square(n))\nn = 27\nprint(sum_Square(n))\nn = 28\nprint(sum_Square(n))\nn = 30\nprint(sum_Square(n))\nn = 35\nprint(sum_Square(n))\nn = 36\nprint(sum_Square(n))\nn = 37",
        "generated_testcode": "assert sum_Square(1) == True\n",
        "test": "assert sum_Square(25) == True\nassert sum_Square(24) == False\nassert sum_Square(17) == True",
        "canonical_solution": "def sum_Square(n) : \r\n    i = 1 \r\n    while i*i <= n : \r\n        j = 1\r\n        while (j*j <= n) : \r\n            if (i*i+j*j == n) : \r\n                return True\r\n            j = j+1\r\n        i = i+1     \r\n    return False"
    },
    {
        "number": 684,
        "prompt": "Write a python function to count occurences of a character in a repeated string.\ndef count_Char(str,x): \n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    count=0\n    for i in range(len(str)):\n        if(str[i]==x):\n            count+=1\n    return count\n\n#test the function\nprint(count_Char(\"hello world\",'l')) # expected output: 3\nprint(count_Char(\"hello world\",'o') # expected output: 2\nprint(count_Char(\"hello world\",'x') # expected output: 0\n",
        "generated_testcode": "assert count_Char(\"hellohello\", \"l\") == 3\n",
        "test": "assert count_Char(\"abcac\",'a') == 4\nassert count_Char(\"abca\",'c') == 2\nassert count_Char(\"aba\",'a') == 7",
        "canonical_solution": "def count_Char(str,x): \r\n    count = 0\r\n    for i in range(len(str)):  \r\n        if (str[i] == x) : \r\n            count += 1\r\n    n = 10\r\n    repititions = n // len(str)  \r\n    count = count * repititions  \r\n    l = n % len(str)  \r\n    for i in range(l): \r\n        if (str[i] == x):  \r\n            count += 1\r\n    return count  "
    },
    {
        "number": 685,
        "prompt": "Write a python function to find sum of prime numbers between 1 to n.\ndef sum_Of_Primes(n): \n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    def is_prime(num):\n        if num <= 1:\n            return False\n        for i in range(2,num):\n            if num % i == 0:\n                return False\n        return True\n\n    prime_sum = 0\n    for i in range(2,n+1):\n        if is_prime(i):\n            prime_sum += i\n    return prime_sum\n\n#Example usage:\nn = 10\nprint(sum_Of_Primes(n)) #output: 17 (1+2+3+5)\nn = 20\nprint(sum_Of_Primes(n)) #output: 77 (2+3+5+7+11+13+17+19)\nn = 30\nprint(sum_Of_Primes(n)) #output: 106 (2+3+5+7+11+13+17+19+23+29) ",
        "generated_testcode": "assert sum_Of_Primes(10) == 17\n",
        "test": "assert sum_Of_Primes(10) == 17\nassert sum_Of_Primes(20) == 77\nassert sum_Of_Primes(5) == 10",
        "canonical_solution": "def sum_Of_Primes(n): \r\n    prime = [True] * (n + 1)  \r\n    p = 2\r\n    while p * p <= n: \r\n        if prime[p] == True:  \r\n            i = p * 2\r\n            while i <= n: \r\n                prime[i] = False\r\n                i += p \r\n        p += 1    \r\n    sum = 0\r\n    for i in range (2,n + 1): \r\n        if(prime[i]): \r\n            sum += i \r\n    return sum"
    },
    {
        "number": 686,
        "prompt": "Write a function to find the frequency of each element in the given list.\ndef freq_element(test_tup):\n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    frequency = {}\n    for i in test_tup:\n        if i in frequency:\n            frequency[i] += 1\n        else:\n            frequency[i] = 1\n    return frequency\n\n\n# Test the function\ntest_list = [1, 2, 2, 3, 3, 4, 5, 5, 5, 5, 6, 7, 7, 7, 7, 7, 8]\nprint(freq_element(test_list)) # Output: {1: 1, 2: 2, 3: 2, 4: 1, 5: 3, 6: 1, 7: 4, 8: 1}\n\n\n# Another test case\ntest_list2 = ['a', 'b', 'c', 'd', 'd', 'd', 'e', 'e', 'e', 'e', 'e', 'e']\nprint(freq_element(test_list2)) # Output: {'a': 1, 'b': 1, 'c': 1, 'd': 3, 'e': 4}\n\n\n# Another test case\ntest_list3 = ['a', 'b', 'c', 'd', 'd', 'e', 'f', 'f', 'f', 'f', 'g', 'g', 'g', 'g']\nprint(freq_element(test_list3)) # Output: {'a': 1, 'b': 1",
        "generated_testcode": "assert freq_element(()) == {}\n",
        "test": "assert freq_element((4, 5, 4, 5, 6, 6, 5, 5, 4) ) == '{4: 3, 5: 4, 6: 2}'\nassert freq_element((7, 8, 8, 9, 4, 7, 6, 5, 4) ) == '{7: 2, 8: 2, 9: 1, 4: 2, 6: 1, 5: 1}'\nassert freq_element((1, 4, 3, 1, 4, 5, 2, 6, 2, 7) ) == '{1: 2, 4: 2, 3: 1, 5: 1, 2: 2, 6: 1, 7: 1}'",
        "canonical_solution": "from collections import defaultdict \r\ndef freq_element(test_tup):\r\n  res = defaultdict(int)\r\n  for ele in test_tup:\r\n    res[ele] += 1\r\n  return (str(dict(res))) "
    },
    {
        "number": 687,
        "prompt": "Write a function to find the greatest common divisor (gcd) of two integers by using recursion.\ndef recur_gcd(a, b):\n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    if b == 0:\n        return a\n    else:\n        return recur_gcd(b, a % b)\n\n# Test the function\nprint(recur_gcd(12, 8))  # Output: 4\nprint(recur_gcd(27, 18))  # Output: 9\nprint(recur_gcd(24, 36))  # Output: 12\nprint(recur_gcd(15, 56))  # Output: 15\n\n# Explanation:\n# The gcd of 12 and 8 is 4. So, 8 % 4 = 0, 4 is assigned to 'a' and 12 is assigned to 'b'. \n# The gcd of 8 and 4 is 4. So, 4 % 4 = 0, 4 is assigned to 'a' and 0 is assigned to 'b'.\n# In the second iteration, the function returns 4 as the gcd of 4 and 0 is 4.\n# The function returns 4 when the value of 'b' becomes 0, as no more division is possible. ",
        "generated_testcode": "assert recur_gcd(12, 18) == 6\n",
        "test": "assert recur_gcd(12,14) == 2\nassert recur_gcd(13,17) == 1\nassert recur_gcd(9, 3) == 3",
        "canonical_solution": "def recur_gcd(a, b):\r\n\tlow = min(a, b)\r\n\thigh = max(a, b)\r\n\tif low == 0:\r\n\t\treturn high\r\n\telif low == 1:\r\n\t\treturn 1\r\n\telse:\r\n\t\treturn recur_gcd(low, high%low)"
    },
    {
        "number": 688,
        "prompt": "Write a function to get the length of a complex number.\ndef len_complex(a,b):\n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    if a==0 and b==0:\n        return 0\n    else:\n        return 2\n    \n# Test the function\nprint(len_complex(3,4))  # Output: 2\nprint(len_complex(-5,0)) # Output: 2\nprint(len_complex(0,0)) # Output: 0\nprint(len_complex(0,5)) # Output: 2\nprint(len_complex(-3,4)) # Output: 2\nprint(len_complex(0,-5)) # Output: 2\n",
        "generated_testcode": "assert len_complex(3+4j) == 5\n",
        "test": "assert len_complex(3,4)==5.0\nassert len_complex(9,10)==13.45362404707371\nassert len_complex(7,9)==11.40175425099138",
        "canonical_solution": "import cmath\r\ndef len_complex(a,b):\r\n  cn=complex(a,b)\r\n  length=abs(cn)\r\n  return length"
    },
    {
        "number": 689,
        "prompt": "## write a function to find the minimum number of jumps to reach the end of the array for the given array of integers where each element represents the max number of steps that can be made forward from that element. > indented block > indented block\ndef min_jumps(arr, n):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": true,
        "answer": "    if n < 2:\n        return 0\n\n    if n == 2:\n        return 1\n\n    max_reach = arr[0]\n    steps = arr[0]\n    jumps = 1\n    for i in range(1, n):\n        if i == n - 1:\n            return jumps\n\n        max_reach = max(max_reach, i + arr[i])\n        steps -= 1\n        if steps == 0:\n            if max_reach >= n - 1:\n                return jumps + 1\n            jumps += 1\n            steps = max_reach\n\n\n    return -1  # if we cannot reach the end of the array\n\n\n## test the function with sample input\narr = [2, 3, 1, 1, 1, 4]\nn = len(arr)\nprint(\"Minimum jumps to reach end: \", min_jumps(arr, n))\n\n# output: Minimum jumps to reach end:  2\n\n\n# time complexity: O(n)\n# space complexity: O(1)\n\n\n## The function works by iterating over the array and keeping track of the maximum reachable index by adding the current index value with the value of the current element. The number of steps taken is reduced by 1 for each iteration and if the number of steps reaches 0, we update the maximum reachable index and increment the number of jumps. If the maximum reachable index becomes equal to the last index of the",
        "generated_testcode": "assert min_jumps([2, 3, 1, 1, 1, 4], 4) == 2\n",
        "test": "assert min_jumps([1, 3, 6, 1, 0, 9], 6) == 3\nassert min_jumps([1, 3, 5, 8, 9, 2, 6, 7, 6, 8, 9], 11) == 3\nassert min_jumps([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], 11) == 10",
        "canonical_solution": "def min_jumps(arr, n):\r\n\tjumps = [0 for i in range(n)]\r\n\tif (n == 0) or (arr[0] == 0):\r\n\t\treturn float('inf')\r\n\tjumps[0] = 0\r\n\tfor i in range(1, n):\r\n\t\tjumps[i] = float('inf')\r\n\t\tfor j in range(i):\r\n\t\t\tif (i <= j + arr[j]) and (jumps[j] != float('inf')):\r\n\t\t\t\tjumps[i] = min(jumps[i], jumps[j] + 1)\r\n\t\t\t\tbreak\r\n\treturn jumps[n-1]"
    },
    {
        "number": 690,
        "prompt": "Write a function to multiply consecutive numbers of a given list.\ndef mul_consecutive_nums(nums):\n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    result = 1\n    for i in range(len(nums)):\n        if i != len(nums) - 1:\n            result *= nums[i] * nums[i+1]\n    return result\n\n\n# Test the function with the following list\nnums = [1, 2, 3, 4, 5, 6, 7, 8, 9]\nprint(mul_consecutive_nums(nums)) # Output: 3628880\n\n# Test the function with the following list\nnums = [10, 20, 30, 40, 50]\nprint(mul_consecutive_nums(nums)) # Output: 30000000000000",
        "generated_testcode": "assert mul_consecutive_nums([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 120\n",
        "test": "assert mul_consecutive_nums([1, 1, 3, 4, 4, 5, 6, 7])==[1, 3, 12, 16, 20, 30, 42]\nassert mul_consecutive_nums([4, 5, 8, 9, 6, 10])==[20, 40, 72, 54, 60]\nassert mul_consecutive_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[2, 6, 12, 20, 30, 42, 56, 72, 90]",
        "canonical_solution": "def mul_consecutive_nums(nums):\r\n    result = [b*a for a, b in zip(nums[:-1], nums[1:])]\r\n    return result"
    },
    {
        "number": 691,
        "prompt": "Write a function to group the 1st elements on the basis of 2nd elements in the given tuple list.\ndef group_element(test_list):\n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    result = {}\n    for i in test_list:\n        if i[1] in result:\n            result[i[1]].append(i[0])\n        else:\n            result[i[1]] = [i[0]]\n    return result\n\n#Example\ntest_list = [('a', 1), ('b', 2), ('c', 1), ('d', 2), ('e', 3), ('f', 1), ('g', 3), ('h', 1)]\nprint(group_element(test_list))  # {'1': ['a', 'f', 'e'], '2': ['b', 'd'], '3': ['c', 'g', 'h']}\n\ntest_list = [('apple', 1), ('banana', 2), ('orange', 1), ('mango', 3), ('kiwi', 1), ('grape', 3), ('pineapple', 1)]\nprint(group_element(test_list))  # {1: ['apple', 'kiwi', 'orange', 'pineapple'], 2: ['banana'], 3: ['mango']}",
        "generated_testcode": "assert group_element([(1,2), (2,3), (3,2), (4,5), (5,2), (6,7), (7,2), (8,9), (9,2)] ) == {2: [(1,2), (3,2), (5,2), (7,2), (9,2)], 3: [(2,3)], 5: [(4,5)], 7: [(6,7)], 9: [(8,9)]}\n\n# Test case 2\n",
        "test": "assert group_element([(6, 5), (2, 7), (2, 5), (8, 7), (9, 8), (3, 7)]) == {5: [6, 2], 7: [2, 8, 3], 8: [9]}\nassert group_element([(7, 6), (3, 8), (3, 6), (9, 8), (10, 9), (4, 8)]) == {6: [7, 3], 8: [3, 9, 4], 9: [10]}\nassert group_element([(8, 7), (4, 9), (4, 7), (10, 9), (11, 10), (5, 9)]) == {7: [8, 4], 9: [4, 10, 5], 10: [11]}",
        "canonical_solution": "from itertools import groupby \r\ndef group_element(test_list):\r\n  res = dict()\r\n  for key, val in groupby(sorted(test_list, key = lambda ele: ele[1]), key = lambda ele: ele[1]):\r\n    res[key] = [ele[0] for ele in val] \r\n  return (res)\r\n"
    },
    {
        "number": 692,
        "prompt": "Write a python function to find the last two digits in factorial of a given number.\ndef last_Two_Digits(N): \n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    if N < 1:\n        return 0\n    elif N == 1:\n        return 1\n    else:\n        factorial = 1\n        for i in range(1, N+1):\n            factorial *= i\n        return int(str(factorial)[-2:]\n        ",
        "generated_testcode": "assert last_Two_Digits(5) == 24\n",
        "test": "assert last_Two_Digits(7) == 40\nassert last_Two_Digits(5) == 20\nassert last_Two_Digits(2) == 2",
        "canonical_solution": "def last_Two_Digits(N): \r\n    if (N >= 10): \r\n        return\r\n    fac = 1\r\n    for i in range(1,N + 1): \r\n        fac = (fac * i) % 100\r\n    return (fac) "
    },
    {
        "number": 693,
        "prompt": "Write a function to remove multiple spaces in a string by using regex.\ndef remove_multiple_spaces(text1):\n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    text2 = re.sub('\\s+',' ', text1)\n    return text2.strip()\n\n# Test the function\nprint(remove_multiple_spaces(\"This is    a        test    string\")) # Output: \"This is a test string\"\nprint(remove_multiple_spaces(\"   This is a test string    \") # Output: \"This is a test string\"\n\n# Write a function to replace all the vowels with an underscore in a string\ndef replace_vowels_with_underscore(text):\n    vowels = 'aeiouAEIOU'\n    new_text = ''\n    for char in text:\n        if char in vowels:\n            new_text += '_'\n        else:\n            new_text += char\n    return new_text\n\n# Test the function\nprint(replace_vowels_with_underscore(\"Hello world!\")) # Output: \"H_ll_ w_rld!\"\nprint(replace_vowels_with_underscore(\"Python is awesome!\")) # Output: \"P_th_n_s _s _w_sm_!\"\n\n# Write a function to remove all characters except alphanumeric and spaces\ndef remove_non_alphanumeric(text):\n    return re.sub(r'\\W+', ' ', text)\n\n# Test the function\nprint(remove_non_alphanumeric(\"Hello, world!\")) # Output: \"Hello world\"\nprint(remove_non_alphanumeric(\"This is a test123",
        "generated_testcode": "assert remove_multiple_spaces(\"hello  world\") == \"hello world\"\n",
        "test": "assert remove_multiple_spaces('Google      Assistant') == 'Google Assistant'\nassert remove_multiple_spaces('Quad      Core') == 'Quad Core'\nassert remove_multiple_spaces('ChromeCast      Built-in') == 'ChromeCast Built-in'",
        "canonical_solution": "import re\r\ndef remove_multiple_spaces(text1):\r\n  return (re.sub(' +',' ',text1))"
    },
    {
        "number": 694,
        "prompt": "Write a function to extract unique values from the given dictionary values.\ndef extract_unique(test_dict):\n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    unique_list = []\n    for value in test_dict.values():\n        if value not in unique_list:\n            unique_list.append(value)\n    return unique_list\n\n# Example usage:\ntest_dict = {'a': 1, 'b': 2, 'c': 1, 'd': 3, 'e': 2, 'f': 3}\nprint(extract_unique(test_dict))  # Output: [1, 2, 3]\n\n# Explanation: The function iterates through the values of the dictionary, and adds each value to a new list if it hasn't already been added. The final list contains only the unique values. ",
        "generated_testcode": "assert extract_unique({'a': [1, 2, 3, 4, 5], 'b': [2, 3, 4, 5, 6], 'c': [1, 2, 3, 4]} == [1, 2, 3, 4, 5, 6]\n",
        "test": "assert extract_unique({'msm' : [5, 6, 7, 8],'is' : [10, 11, 7, 5],'best' : [6, 12, 10, 8],'for' : [1, 2, 5]} ) == [1, 2, 5, 6, 7, 8, 10, 11, 12]\nassert extract_unique({'Built' : [7, 1, 9, 4],'for' : [11, 21, 36, 14, 9],'ISP' : [4, 1, 21, 39, 47],'TV' : [1, 32, 38]} ) == [1, 4, 7, 9, 11, 14, 21, 32, 36, 38, 39, 47]\nassert extract_unique({'F' : [11, 13, 14, 17],'A' : [12, 11, 15, 18],'N' : [19, 21, 15, 36],'G' : [37, 36, 35]}) == [11, 12, 13, 14, 15, 17, 18, 19, 21, 35, 36, 37]",
        "canonical_solution": "def extract_unique(test_dict):\r\n  res = list(sorted({ele for val in test_dict.values() for ele in val}))\r\n  return res"
    },
    {
        "number": 695,
        "prompt": "Write a function to check if each element of the second tuple is greater than its corresponding index in the first tuple.\ndef check_greater(test_tup1, test_tup2):\n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    for i in range(len(test_tup2)):\n        if test_tup2[i] > test_tup1[i]:\n            return False\n    return True\n\nprint(check_greater((1, 2, 3, 4, 5), (0, 1, 2, 3))) # Output: True\nprint(check_greater((1, 2, 3, 4, 5), (0, 1, 4, 3))) # Output: False\nprint(check_greater((1, 2, 3, 4, 5), (0, 1, 3, 4))) # Output: False\nprint(check_greater((1, 2, 3, 4, 5), (0, 2, 3, 4))) # Output: False\n\n# Explanation:\n# The function takes two tuples as arguments, test_tup1 and test_tup2. It then compares the elements of test_tup2 with their corresponding index in test_tup1.\n# In the first example, the second tuple has every element greater than its corresponding index in the first tuple, so the function returns True.\n# In the second example, the second element is not greater than its corresponding index in the first tuple, so the function returns False.\n# In the third example, the third element is not greater than its corresponding index in the first tuple, so the function returns False. ",
        "generated_testcode": "assert check_greater((1, 2, 3, 4, 5, 6), (0, 1, 2, 3, 4)) == (True, True, True, True, True)\n",
        "test": "assert check_greater((10, 4, 5), (13, 5, 18)) == True\nassert check_greater((1, 2, 3), (2, 1, 4)) == False\nassert check_greater((4, 5, 6), (5, 6, 7)) == True",
        "canonical_solution": "def check_greater(test_tup1, test_tup2):\r\n  res = all(x < y for x, y in zip(test_tup1, test_tup2))\r\n  return (res) "
    },
    {
        "number": 696,
        "prompt": "Write a function to zip two given lists of lists.\ndef zip_list(list1,list2):  \n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    result = []  \n    i = 0\n    j = 0\n    while i < len(list1) and j < len(list2):  \n        result.append(list1[i] + list2[j])  \n        i += 1\n        j += 1\n    return result  \n\n# Testing the function\nlist1 = [[1, 2], [3, 4], [5, 6]]  \nlist2 = [[7, 8], [9, 10], [11, 12]]  \nprint(zip_list(list1, list2)) ",
        "generated_testcode": "assert zip_list([[1,2,3],[4,5,6]) == [[1,4],[2,5],[3,6]]\n",
        "test": "assert zip_list([[1, 3], [5, 7], [9, 11]] ,[[2, 4], [6, 8], [10, 12, 14]] )==[[1, 3, 2, 4], [5, 7, 6, 8], [9, 11, 10, 12, 14]]\nassert zip_list([[1, 2], [3, 4], [5, 6]] ,[[7, 8], [9, 10], [11, 12]] )==[[1, 2, 7, 8], [3, 4, 9, 10], [5, 6, 11, 12]]\nassert zip_list([['a','b'],['c','d']] , [['e','f'],['g','h']] )==[['a','b','e','f'],['c','d','g','h']]",
        "canonical_solution": "def zip_list(list1,list2):  \r\n result = list(map(list.__add__, list1, list2)) \r\n return result"
    },
    {
        "number": 697,
        "prompt": "Write a function to find number of even elements in the given list using lambda function.\ndef count_even(array_nums):\n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    even_count = lambda lst: len(list(filter(lambda x: x % 2 == 0, lst))\n    return even_count(array_nums)\n\n# Test the function\nprint(count_even([1, 2, 3, 4, 5, 6, 7, 8, 9])) # Output: 3\nprint(count_even([2, 4, 6, 8, 10, 12])) # Output: 4\nprint(count_even([1, 3, 5, 7, 9])) # Output: 0\nprint(count_even([0, 2, 4, 6, 8])) # Output: 4\n\n\n# Explanation:\n# In the lambda function, we used the built-in filter() function which returns a new list with elements that pass the condition specified in the lambda function. \n# The lambda function checks if the element is even or not and returns a boolean value True if it is even and False if it is not. \n# Finally, we used len() function to count the number of True values and return the result. ",
        "generated_testcode": "assert count_even([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 3\n",
        "test": "assert count_even([1, 2, 3, 5, 7, 8, 9, 10])==3\nassert count_even([10,15,14,13,-18,12,-20])==5\nassert count_even([1, 2, 4, 8, 9])==3",
        "canonical_solution": "def count_even(array_nums):\r\n   count_even = len(list(filter(lambda x: (x%2 == 0) , array_nums)))\r\n   return count_even"
    },
    {
        "number": 698,
        "prompt": "Write a function to sort dictionary items by tuple product of keys for the given dictionary with tuple keys.\ndef sort_dict_item(test_dict):\n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    sorted_dict = sorted(test_dict.items(), key=lambda x: x[0][0] * x[0][1])\n    return sorted_dict\n\n\n\n# Test cases\ndict_1 = {(5, 2): 10, (3, 4): 15, (1, 3): 8, (2, 1): 6, (4, 3): 12, (1, 1): 9, (3, 2): 11}\ndict_2 = {(10, 3): 20, (2, 2): 16, (1, 4): 14, (3, 1): 18, (4, 4): 16, (2, 3): 12}\n\nprint(sort_dict_item(dict_1))\nprint(sort_dict_item(dict_2))\n\n# Output:\n# [(1, 2): 6, (2, 1): 8, (1, 3): 9, (3, 2): 11, (5, 2): 10, (3, 4): 15, (4, 3): 12]\n# [(1, 2): 14, (2, 2): 16, (1, 4): 10, (3, 1): 16, (4, 4): 12]\n",
        "generated_testcode": "assert sort_dict_item(\n    {(3, 2): 10, (1, 4): 5, (2, 1): 3, (4, 3): 8, (1, 2): 6, (2, 3): 7, (4, 1): 9, (3, 1): 11, (1, 3): 4, (2, 4): 2}) == {(1, 2): 6, (1, 3): 4, (2, 1): 3, (2, 4): 2, (3, 1): 11, (3, 2): 10, (1, 4): 5, (4, 1): 9, (4, 3): 8}\n\n# Test case 2\n",
        "test": "assert sort_dict_item({(5, 6) : 3, (2, 3) : 9, (8, 4): 10, (6, 4): 12} ) == {(2, 3): 9, (6, 4): 12, (5, 6): 3, (8, 4): 10}\nassert sort_dict_item({(6, 7) : 4, (3, 4) : 10, (9, 5): 11, (7, 5): 13} ) == {(3, 4): 10, (7, 5): 13, (6, 7): 4, (9, 5): 11}\nassert sort_dict_item({(7, 8) : 5, (4, 5) : 11, (10, 6): 12, (8, 6): 14} ) == {(4, 5): 11, (8, 6): 14, (7, 8): 5, (10, 6): 12}",
        "canonical_solution": "def sort_dict_item(test_dict):\r\n  res = {key: test_dict[key] for key in sorted(test_dict.keys(), key = lambda ele: ele[1] * ele[0])}\r\n  return  (res) \r\n"
    },
    {
        "number": 699,
        "prompt": "Write a python function to find the minimum number of swaps required to convert one binary string to another.\ndef min_Swaps(str1,str2) : \n",
        "checkpoint": "7B",
        "pass": 3,
        "correct": true,
        "answer": "    count = 0 \n    for i in range(len(str1)) : \n        if str1[i] != str2[i] : \n            count += 1 \n            str1 = str1[:i] + str2[i] + str1[i+1:] \n            str2 = str2[:i] + str1[i] + str2[i+1:] \n    return count \n\n\n# Testing the function \nstr1 = \"101010\"\nstr2 = \"1111100\"\nprint(min_Swaps(str1,str2)) # Output: 2 ",
        "generated_testcode": "assert min_Swaps(\"10110\",\"01110\") == 2\n",
        "test": "assert min_Swaps(\"1101\",\"1110\") == 1\nassert min_Swaps(\"1111\",\"0100\") == \"Not Possible\"\nassert min_Swaps(\"1110000\",\"0001101\") == 3",
        "canonical_solution": "def min_Swaps(str1,str2) : \r\n    count = 0\r\n    for i in range(len(str1)) : \r\n        if str1[i] != str2[i] : \r\n            count += 1\r\n    if count % 2 == 0 : \r\n        return (count // 2) \r\n    else : \r\n        return (\"Not Possible\") "
    },
    {
        "number": 700,
        "prompt": "Write a function to count the number of elements in a list which are within a specific range.\ndef count_range_in_list(li, min, max):\n",
        "checkpoint": "7B",
        "pass": 3,
        "correct": true,
        "answer": "    count = 0\n    for element in li:\n        if min <= element <= max:\n            count += 1\n    return count\n\n\n# Example usage:\nli = [1, 2, 3, 4, 5, 6, 7, 8, 9]\nprint(count_range_in_list(li, 4, 7))  # Output: 3\nprint(count_range_in_list(li, 1, 5))  # Output: 4\nprint(count_range_in_list(li, 0, 10))  # Output: 7\n",
        "generated_testcode": "assert count_range_in_list([1, 2, 3, 4, 5, 6, 7, 8, 9], 4, 7) == 4\n",
        "test": "assert count_range_in_list([10,20,30,40,40,40,70,80,99],40,100)==6\nassert count_range_in_list(['a','b','c','d','e','f'],'a','e')==5\nassert count_range_in_list([7,8,9,15,17,19,45],15,20)==3",
        "canonical_solution": "def count_range_in_list(li, min, max):\r\n\tctr = 0\r\n\tfor x in li:\r\n\t\tif min <= x <= max:\r\n\t\t\tctr += 1\r\n\treturn ctr"
    },
    {
        "number": 701,
        "prompt": "Write a function to find the equilibrium index of the given array.\ndef equilibrium_index(arr):\n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    left = 0\n    right = len(arr) - 1\n    while left < right:\n        if arr[left] < 0:\n            left += 1\n        elif arr[right] > 0:\n            right -= 1\n        else:\n            return right\n    return -1\n\n\n# Test cases\nprint(equilibrium_index([1, 3, 5, 2, 6, 1, 3, 0, -1, -2, 5]) # Output: 3\nprint(equilibrium_index([2, 4, 5, 1, 3])) # Output: -1\nprint(equilibrium_index([0, 0, 0]) # Output: 1\nprint(equilibrium_index([1, 0, -1, 0, 1, -1, -2, 0, 0]) # Output: 3\nprint(equilibrium_index([2, 4, 6, 0, 4, 5, -2, 6, 2, 6]) # Output: 3\n\n",
        "generated_testcode": "assert equilibrium_index([1, 3, 5, 6, 4, 2, 2, 1, 4, 3]) == 3\n",
        "test": "assert equilibrium_index([1, 2, 3, 4, 1, 2, 3]) == 3\nassert equilibrium_index([-7, 1, 5, 2, -4, 3, 0]) == 3\nassert equilibrium_index([1, 2, 3]) == -1",
        "canonical_solution": "def equilibrium_index(arr):\r\n  total_sum = sum(arr)\r\n  left_sum=0\r\n  for i, num in enumerate(arr):\r\n    total_sum -= num\r\n    if left_sum == total_sum:\r\n      return i\r\n    left_sum += num\r\n  return -1"
    },
    {
        "number": 702,
        "prompt": "Write a function to find the minimum number of elements that should be removed such that amax-amin<=k.\ndef find_ind(key, i, n, \n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "           min_sum, max_sum, k):\n    return min(n-i, (max_sum-key-k) - (n-i-1) - (key-min_sum))\n\ndef min_elements_to_remove(arr, k):\n    n = len(arr)\n    arr.sort()\n    min_sum = arr[0]\n    max_sum = arr[-1]\n    count = 0\n    i = 0\n    while max_sum - min_sum <= k:\n        count += find_ind(max_sum, i, n, min_sum, max_sum, k)\n        if i == n-1:\n            break\n        min_sum += arr[i]\n        max_sum += arr[-1-i]\n        i += 1\n    return count\n\n# Test cases\nprint(min_elements_to_remove([4, 5, 6, 7, 8, 9], 3))\nprint(min_elements_to_remove([1, 2, 3, 4, 5, 6], 5))\nprint(min_elements_to_remove([1, 2, 3, 4, 5], 10))\nprint(min_elements_to_remove([1, 1, 1, 1, 1, 1], 2))",
        "generated_testcode": "assert find_ind(key, 5, 10, 3) == 2\n",
        "test": "assert removals([1, 3, 4, 9, 10,11, 12, 17, 20], 9, 4) == 5\nassert removals([1, 5, 6, 2, 8], 5, 2) == 3\nassert removals([1, 2, 3 ,4, 5, 6], 6, 3) == 2",
        "canonical_solution": "def find_ind(key, i, n, \r\n\t\t\tk, arr):\r\n\tind = -1\r\n\tstart = i + 1\r\n\tend = n - 1;\r\n\twhile (start < end):\r\n\t\tmid = int(start +\r\n\t\t\t\t(end - start) / 2)\r\n\t\tif (arr[mid] - key <= k):\r\n\t\t\tind = mid\r\n\t\t\tstart = mid + 1\r\n\t\telse:\r\n\t\t\tend = mid\r\n\treturn ind\r\ndef removals(arr, n, k):\r\n\tans = n - 1\r\n\tarr.sort()\r\n\tfor i in range(0, n):\r\n\t\tj = find_ind(arr[i], i, \r\n\t\t\t\t\tn, k, arr)\r\n\t\tif (j != -1):\r\n\t\t\tans = min(ans, n -\r\n\t\t\t\t\t\t(j - i + 1))\r\n\treturn ans"
    },
    {
        "number": 703,
        "prompt": "Write a function to check whether the given key is present in the dictionary or not.\ndef is_key_present(d,x):\n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    if x in d:\n        return True\n    else:\n        return False\n\n#Testing the function\nd = {'a':1, 'b':2, 'c':3, 'd':4, 'e':5}\nprint(is_key_present(d, 'b'))  # True\nprint(is_key_present(d, 'f'))  # False\n",
        "generated_testcode": "assert is_key_present({\"a\":1, \"b\":2, \"c\":3}, \"a\") == True\n",
        "test": "assert is_key_present({1: 10, 2: 20, 3: 30, 4: 40, 5: 50, 6: 60},5)==True\nassert is_key_present({1: 10, 2: 20, 3: 30, 4: 40, 5: 50, 6: 60},6)==True\nassert is_key_present({1: 10, 2: 20, 3: 30, 4: 40, 5: 50, 6: 60},10)==False",
        "canonical_solution": "def is_key_present(d,x):\r\n  if x in d:\r\n    return True\r\n  else:\r\n     return False"
    },
    {
        "number": 704,
        "prompt": "Write a function to calculate the harmonic sum of n-1.\ndef harmonic_sum(n):\n",
        "checkpoint": "7B",
        "pass": 3,
        "correct": true,
        "answer": "    total = 0\n    for i in range(1, n):\n        total += 1/i\n    return total\n\n# Test the function with n=5\nprint(harmonic_sum(5))  # Output: 1.833333333333333333333333\n\n\n# Test the function with n=10\nprint(harmonic_sum(10))  # Output: 3.12833333333333333333333\n\n\n# Test the function with n=20\nprint(harmonic_sum(20))  # Output: 4.9565202574565202575\n\n\n# Test the function with n=100\nprint(harmonic_sum(100))  # Output: 6.05251580389991392414",
        "generated_testcode": "assert harmonic_sum(1) == 0\n",
        "test": "assert harmonic_sum(10)==2.9289682539682538\nassert harmonic_sum(4)==2.083333333333333\nassert harmonic_sum(7)==2.5928571428571425 ",
        "canonical_solution": "def harmonic_sum(n):\r\n  if n < 2:\r\n    return 1\r\n  else:\r\n    return 1 / n + (harmonic_sum(n - 1))"
    },
    {
        "number": 705,
        "prompt": "Write a function to sort a list of lists by length and value.\ndef sort_sublists(list1):\n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    sorted_list = sorted(list1, key=lambda x: (len(x), x))\n    return sorted_list\n\n# Example usage:\nlist1 = [[1,2,3], [4,5,6], [7,8], [1,2,3,4], [9], [1,2,3,4,5,6,7], [8,9,10]]\nprint(sort_sublists(list1)) # Output: [[1], [4,5,6], [1,2,3,4], [7,8], [1,2,3,4,5,6,7], [8,9,10]]\n",
        "generated_testcode": "assert sort_sublists([[1,2,3], [4,5], [6], [7,8,9,10], [1,2,3,4,5], [10,20,30,40,50]] ] == [[1,2,3], [1,2,3,4,5], [4,5], [6], [7,8,9,10], [10,20,30,40,50]",
        "test": "assert sort_sublists([[2], [0], [1, 3], [0, 7], [9, 11], [13, 15, 17]])==[[0], [2], [0, 7], [1, 3], [9, 11], [13, 15, 17]]\nassert sort_sublists([[1], [2, 3], [4, 5, 6], [7], [10, 11]])==[[1], [7], [2, 3], [10, 11], [4, 5, 6]]\nassert sort_sublists([[\"python\"],[\"java\",\"C\",\"C++\"],[\"DBMS\"],[\"SQL\",\"HTML\"]])==[['DBMS'], ['python'], ['SQL', 'HTML'], ['java', 'C', 'C++']]",
        "canonical_solution": "def sort_sublists(list1):\r\n      list1.sort()  \r\n      list1.sort(key=len)\r\n      return  list1"
    },
    {
        "number": 706,
        "prompt": "Write a function to find whether an array is subset of another array.\ndef is_subset(arr1, m, arr2, n): \n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    if m > n: \n        return False\n    if m == 0: \n        return True\n    if n == 0: \n        return False\n\n    i = 0\n    j = 0\n    while i < m and j < n: \n        if arr1[i] == arr2[j]: \n            i += 1\n        j += 1\n    if i == m: \n        return True\n    return is_subset(arr1, m, arr2) ",
        "generated_testcode": "assert is_subset([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7], 5) == True\n",
        "test": "assert is_subset([11, 1, 13, 21, 3, 7], 6, [11, 3, 7, 1], 4) == True\nassert is_subset([1, 2, 3, 4, 5, 6], 6, [1, 2, 4], 3) == True\nassert is_subset([10, 5, 2, 23, 19], 5, [19, 5, 3], 3) == False",
        "canonical_solution": "def is_subset(arr1, m, arr2, n): \r\n\thashset = set() \r\n\tfor i in range(0, m): \r\n\t\thashset.add(arr1[i]) \r\n\tfor i in range(0, n): \r\n\t\tif arr2[i] in hashset: \r\n\t\t\tcontinue\r\n\t\telse: \r\n\t\t\treturn False\r\n\treturn True\t\t"
    },
    {
        "number": 707,
        "prompt": "Write a python function to count the total set bits from 1 to n.\ndef count_Set_Bits(n) :  \n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    count = 0 \n    while (n>0) : \n        count += n & 1\n        n >>= 1\n    return count \n\n#test the function\nn = 10\nprint(\"The total set bits in the numbers from 1 to\", n, \"are\", count_Set_Bits(n)) ",
        "generated_testcode": "assert count_Set_Bits(10) == 4\n",
        "test": "assert count_Set_Bits(16) == 33\nassert count_Set_Bits(2) == 2\nassert count_Set_Bits(14) == 28",
        "canonical_solution": "def count_Set_Bits(n) :  \r\n    n += 1; \r\n    powerOf2 = 2;   \r\n    cnt = n // 2;  \r\n    while (powerOf2 <= n) : \r\n        totalPairs = n // powerOf2;  \r\n        cnt += (totalPairs // 2) * powerOf2;  \r\n        if (totalPairs & 1) : \r\n            cnt += (n % powerOf2) \r\n        else : \r\n            cnt += 0\r\n        powerOf2 <<= 1;    \r\n    return cnt;  "
    },
    {
        "number": 708,
        "prompt": "Write a python function to convert a string to a list.\ndef Convert(string): \n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    return list(string) \n\n#Test the function with an example \nstring = \"hello\"\nprint(Convert(string)) ",
        "generated_testcode": "assert Convert(\"hello\") == ['h', 'e', 'l', 'l', 'o']\n",
        "test": "assert Convert('python program') == ['python','program']\nassert Convert('Data Analysis') ==['Data','Analysis']\nassert Convert('Hadoop Training') == ['Hadoop','Training']",
        "canonical_solution": "def Convert(string): \r\n    li = list(string.split(\" \")) \r\n    return li "
    },
    {
        "number": 709,
        "prompt": "Write a function to count unique keys for each value present in the tuple.\ndef get_unique(test_list):\n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    result = {}\n    for i in test_list:\n        if i[1] not in result:\n            result[i[1]] = 1\n        else:\n            result[i[1]] += 1\n    return result\n\n\n#Testing the function\ntest_list = [(\"apple\", \"red\"),(\"banana\", \"yellow\"),(\"orange\", \"orange\"),(\"banana\", \"yellow\"),(\"apple\", \"green\"),(\"pear\", \"green\"),(\"orange\", \"orange\"),(\"pear\", \"yellow\"),(\"apple\", \"red\"),(\"banana\", \"yellow\")]\nprint(get_unique(test_list)) # {'red': 1, 'yellow': 2, 'green': 1}\n\ntest_list = [(\"apple\", \"red\"),(\"banana\", \"yellow\"),(\"orange\", \"orange\"),(\"banana\", \"yellow\"),(\"apple\", \"green\"),(\"pear\", \"green\"),(\"orange\", \"orange\"),(\"apple\", \"red\"),(\"banana\", \"yellow\")]\nprint(get_unique(test_list)) # {'red': 1, 'yellow': 2, 'green': 1}",
        "generated_testcode": "assert get_unique(()) == {}\n",
        "test": "assert get_unique([(3, 4), (1, 2), (2, 4), (8, 2), (7, 2), (8, 1), (9, 1), (8, 4), (10, 4)] ) == '{4: 4, 2: 3, 1: 2}'\nassert get_unique([(4, 5), (2, 3), (3, 5), (9, 3), (8, 3), (9, 2), (10, 2), (9, 5), (11, 5)] ) == '{5: 4, 3: 3, 2: 2}'\nassert get_unique([(6, 5), (3, 4), (2, 6), (11, 1), (8, 22), (8, 11), (4, 3), (14, 3), (11, 6)] ) == '{5: 1, 4: 1, 6: 2, 1: 1, 22: 1, 11: 1, 3: 2}'",
        "canonical_solution": "from collections import defaultdict \r\ndef get_unique(test_list):\r\n  res = defaultdict(list)\r\n  for sub in test_list:\r\n    res[sub[1]].append(sub[0])\r\n  res = dict(res)\r\n  res_dict = dict()\r\n  for key in res:\r\n    res_dict[key] = len(list(set(res[key])))\r\n  return (str(res_dict)) "
    },
    {
        "number": 710,
        "prompt": "Write a function to access the initial and last data of the given tuple record.\ndef front_and_rear(test_tup):\n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    return test_tup[0], test_tup[-1]\n\n\n# Test the function\nprint(front_and_rear((1,2,3,4,5,6,7,8,9)) # Output: (1,9)\nprint(front_and_rear((10,20,30,40)) # Output: (10,40)\nprint(front_and_rear((\"apple\", \"banana\", \"cherry\", \"orange\")) # Output: ('apple', 'orange') ",
        "generated_testcode": "assert front_and_rear((1,2,3,4,5,6,7,8) == (1,8)\n",
        "test": "assert front_and_rear((10, 4, 5, 6, 7)) == (10, 7)\nassert front_and_rear((1, 2, 3, 4, 5)) == (1, 5)\nassert front_and_rear((6, 7, 8, 9, 10)) == (6, 10)",
        "canonical_solution": "def front_and_rear(test_tup):\r\n  res = (test_tup[0], test_tup[-1])\r\n  return (res) "
    },
    {
        "number": 711,
        "prompt": "Write a python function to check whether the product of digits of a number at even and odd places is equal or not.\ndef product_Equal(n): \n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    product_even = 1\n    product_odd = 1\n    for i in str(n):\n        if i.isdigit():\n            if int(i)%2 == 0:\n                product_even *= int(i)\n            else:\n                product_odd *= int(i)\n    return product_even == product_odd\n\n\n# test the function with some test cases\nprint(product_Equal(12345)) # True\nprint(product_Equal(123456)) # False\nprint(product_Equal(123)) # True\nprint(product_Equal(123456789)) # True\nprint(product_Equal(1234)) # False\nprint(product_Equal(100000000)) # True\nprint(product_Equal(111111111)) # True\nprint(product_Equal(22222222)) # False\n\n\n# or we can use a shorter version using list comprehension\ndef product_Equal(n):\n    even_digits = [int(i) for i in str(n) if int(i)%2==0]\n    odd_digits = [int(i) for i in str(n) if int(i)%2!=0]\n    return product(even_digits) == product(odd_digits)\n\n# test the function with some test cases\nprint(product_Equal(12345)) # True\n",
        "generated_testcode": "assert product_Equal(12345) == True\n",
        "test": "assert product_Equal(2841) == True\nassert product_Equal(1234) == False\nassert product_Equal(1212) == False",
        "canonical_solution": "def product_Equal(n): \r\n    if n < 10: \r\n        return False\r\n    prodOdd = 1; prodEven = 1\r\n    while n > 0: \r\n        digit = n % 10\r\n        prodOdd *= digit \r\n        n = n//10\r\n        if n == 0: \r\n            break; \r\n        digit = n % 10\r\n        prodEven *= digit \r\n        n = n//10\r\n    if prodOdd == prodEven: \r\n        return True\r\n    return False"
    },
    {
        "number": 712,
        "prompt": "Write a function to remove duplicates from a list of lists.\ndef remove_duplicate(list1):\n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    new_list = []\n    for sublist in list1:\n        if sublist not in new_list:\n            new_list.append(sublist)\n    return new_list\n\n\n# Test the function with the example input\noriginal_list = [[1, 2, 3], [1, 2, 3], [4, 5, 6], [7, 8, 9], [4, 5, 6], [7, 8, 9], [10, 11, 12]]\nprint(remove_duplicate(original_list))  # should output: [[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12]] ",
        "generated_testcode": "assert remove_duplicate([[1,2,3],[1,2,3],[4,5,6],[7,8,9],[1,2,3]] ) == [[1,2,3],[4,5,6],[7,8,9]]\n",
        "test": "assert remove_duplicate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]])==[[10, 20], [30, 56, 25], [33], [40]] \nassert remove_duplicate([\"a\", \"b\", \"a\", \"c\", \"c\"] )==[\"a\", \"b\", \"c\"]\nassert remove_duplicate([1, 3, 5, 6, 3, 5, 6, 1] )==[1, 3, 5, 6]",
        "canonical_solution": "import itertools\r\ndef remove_duplicate(list1):\r\n list.sort(list1)\r\n remove_duplicate = list(list1 for list1,_ in itertools.groupby(list1))\r\n return remove_duplicate"
    },
    {
        "number": 713,
        "prompt": "Write a function to check if the given tuple contains all valid values or not.\ndef check_valid(test_tup):\n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    for i in test_tup:\n        if type(i) != int:\n            return False\n        elif i < 0 or i > 10:\n            return False\n    return True\n\n\n# Test the function\ntup1 = (1, 2, 3, 4, 5, 6)\ntup2 = (10, 2, 3, -1, 6)\ntup3 = (1, 2, 3, 4, 5, 11)\ntup4 = (1, 2, 3, 4, 5, \"6\")\n\nprint(check_valid(tup1)) # True\nprint(check_valid(tup2)) # False\nprint(check_valid(tup3)) # False\nprint(check_valid(tup4)) # False\n\n\n# This function checks if the given tuple contains all integers between 0 and 10. If the tuple contains any value less than 0 or greater than 10, it returns False, else it returns True. ",
        "generated_testcode": "assert check_valid((1, 2, 3, 4, 5, 6, 7) == True)\n",
        "test": "assert check_valid((True, True, True, True) ) == True\nassert check_valid((True, False, True, True) ) == False\nassert check_valid((True, True, True, True) ) == True",
        "canonical_solution": "def check_valid(test_tup):\r\n  res = not any(map(lambda ele: not ele, test_tup))\r\n  return (res) "
    },
    {
        "number": 714,
        "prompt": "Write a python function to count the number of distinct power of prime factor of given number.\ndef count_Fac(n):  \n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    prime = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101]\n    count = 0\n    for i in prime:\n        while n % i == 0:\n            count += 1\n            n //= i\n    return count\n\ndef count_power(n):\n    count = 0\n    for i in range(2,n+1):\n        count += count_Fac(i)\n    return count\n\ndef prime_factors_count(n):\n    return count_power(n)\n\n# Test the function with an example\nprint(prime_factors_count(20)) # output: 4 (2^2 * 5)\nprint(prime_factors_count(100)) # output: 3 (2^2 * 5)\nprint(prime_factors_count(30)) # output: 5 (2^1 * 3^1 * 5)\nprint(prime_factors_count(45)) # output: 4 (3^1 * 3 * 5)\n",
        "generated_testcode": "assert count_Fac(10) == 2\n",
        "test": "assert count_Fac(24) == 3\nassert count_Fac(12) == 2\nassert count_Fac(4) == 1",
        "canonical_solution": "def count_Fac(n):  \r\n    m = n \r\n    count = 0\r\n    i = 2\r\n    while((i * i) <= m): \r\n        total = 0\r\n        while (n % i == 0): \r\n            n /= i \r\n            total += 1 \r\n        temp = 0\r\n        j = 1\r\n        while((temp + j) <= total): \r\n            temp += j \r\n            count += 1\r\n            j += 1 \r\n        i += 1\r\n    if (n != 1): \r\n        count += 1 \r\n    return count "
    },
    {
        "number": 715,
        "prompt": "Write a function to convert the given string of integers into a tuple.\ndef str_to_tuple(test_str):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": true,
        "answer": "    # convert the string to a list of integers\n    lst = [int(x) for x in test_str.split(',')]\n    # convert the list to a tuple and return it\n    return tuple(lst)\n\n# test the function with a sample input\nprint(str_to_tuple('1,2,3,4,5,6,7')) ",
        "generated_testcode": "assert str_to_tuple(\"1,2,3,4,5,6,7,8,9\") == (1,2,3,4,5,6,7,8,9)\n",
        "test": "assert str_to_tuple(\"1, -5, 4, 6, 7\") == (1, -5, 4, 6, 7)\nassert str_to_tuple(\"1, 2, 3, 4, 5\") == (1, 2, 3, 4, 5)\nassert str_to_tuple(\"4, 6, 9, 11, 13, 14\") == (4, 6, 9, 11, 13, 14)",
        "canonical_solution": "def str_to_tuple(test_str):\r\n  res = tuple(map(int, test_str.split(', ')))\r\n  return (res) "
    },
    {
        "number": 716,
        "prompt": "Write a function to find the perimeter of a rombus.\ndef rombus_perimeter(a):\n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    \"\"\"\n    :param a: length of the side of the rombus\n    :return: perimeter of the rombus\n    \"\"\"\n    b = a\n    return 4*a\n\nprint(rombus_perimeter(4)) #Output: 16\n\nprint(rombus_perimeter(7)) #Output: 28\n\nprint(rombus_perimeter(10)) #Output: 40\n\n\n#Write a function to find the area of a rombus\ndef rombus_area(a):\n    \"\"\"\n    :param a: length of the side of the rombus\n    :return: area of the rombus\n    \"\"\"\n    h = 2*a\n    return a**2/2\n\nprint(rombus_area(4)) #Output: 16.0\nprint(rombus_area(7)) #Output: 35.0\nprint(rombus_area(10)) #Output: 75.0\n\n\n#Write a function to find the diagonal of a rombus\ndef rombus_diagonal(a):\n    \"\"\"\n    :param a: length of the side of the rombus\n    :return: diagonal of the rombus\n    \"\"\"\n    h = 2*a\n    return (a**2 + h**2)**(1/2)\n\nprint(rombus_diagonal(4)) #Output: 6.4031241374256580",
        "generated_testcode": "assert rombus_perimeter(5) == 18\n",
        "test": "assert rombus_perimeter(10)==40\nassert rombus_perimeter(5)==20\nassert rombus_perimeter(4)==16",
        "canonical_solution": "def rombus_perimeter(a):\r\n  perimeter=4*a\r\n  return perimeter"
    },
    {
        "number": 717,
        "prompt": "Write a function to calculate the standard deviation.\ndef sd_calc(data):\n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    mean = sum(data) / len(data)\n    variance = sum([(x-mean)**2 for x in data]) / len(data)\n    return variance**0.5\n\ndata = [1,2,3,4,5,6,7,8]\nprint(sd_calc(data))\n",
        "generated_testcode": "assert round(sd_calc([1, 2, 3, 4, 5, 6, 7, 8, 9]), 2) == 2.35\n",
        "test": "assert sd_calc([4, 2, 5, 8, 6])== 2.23606797749979\nassert sd_calc([1,2,3,4,5,6,7])==2.160246899469287\nassert sd_calc([5,9,10,15,6,4])==4.070217029430577",
        "canonical_solution": "import math\r\nimport sys\r\ndef sd_calc(data):\r\n    n = len(data)\r\n    if n <= 1:\r\n        return 0.0\r\n    mean, sd = avg_calc(data), 0.0\r\n    for el in data:\r\n        sd += (float(el) - mean)**2\r\n    sd = math.sqrt(sd / float(n-1))\r\n    return sd\r\ndef avg_calc(ls):\r\n    n, mean = len(ls), 0.0\r\n    if n <= 1:\r\n        return ls[0]\r\n    for el in ls:\r\n        mean = mean + float(el)\r\n    mean = mean / float(n)\r\n    return mean"
    },
    {
        "number": 718,
        "prompt": "Write a function to create a list taking alternate elements from another given list.\ndef alternate_elements(list1):\n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    result = []\n    for i in range(0,len(list1),2):\n        result.append(list1[i])\n    return result\n\n# Example:\nprint(alternate_elements([1,2,3,4,5,6,7,8,9,10]) # Output: [1, 3, 5, 7, 9] ",
        "generated_testcode": "assert alternate_elements([1, 2, 3, 4, 5, 6, 7, 8, 9]) == [1, 5, 3, 7]\n",
        "test": "assert alternate_elements([\"red\", \"black\", \"white\", \"green\", \"orange\"])==['red', 'white', 'orange']\nassert alternate_elements([2, 0, 3, 4, 0, 2, 8, 3, 4, 2])==[2, 3, 0, 8, 4]\nassert alternate_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1,3,5,7,9]",
        "canonical_solution": "def alternate_elements(list1):\r\n    result=[]\r\n    for item in list1[::2]:\r\n        result.append(item)\r\n    return result "
    },
    {
        "number": 719,
        "prompt": "Write a function that matches a string that has an a followed by zero or more b's.\ndef text_match(text):\n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    return re.match(r'a(b*)', text)\n\n#Example:\ntext_match('ab')  # should return a Match object with a group(0) of 'ab'\ntext_match('abb') # should return a Match object with a group(0) of 'abb'\ntext_match('a')   # should return a Match object with a group(0) of 'a'\ntext_match('ac')   # should return None\ntext_match('aabb') # should return a Match object with a group(0) of 'aabb'\ntext_match('abbc') # should return None\ntext_match('abbbc')# should return a Match object with a group(0) of 'abbb'\ntext_match('abb') # should return a Match object with a group(0) of 'abb'\ntext_match('a')   # should return a Match object with a group(0) of 'a'\ntext_match('b')   # should return None\n\n#Note: group(0) will match the entire pattern (a followed by zero or more b's)\n#and group(1) will match the captured value (zero or more b's)\n#if there is a match, return a Match object, otherwise return None",
        "generated_testcode": "assert text_match(\"ab\") == True\n",
        "test": "assert text_match(\"ac\")==('Found a match!')\nassert text_match(\"dc\")==('Not matched!')\nassert text_match(\"abba\")==('Found a match!')",
        "canonical_solution": "import re\r\ndef text_match(text):\r\n        patterns = 'ab*?'\r\n        if re.search(patterns,  text):\r\n                return 'Found a match!'\r\n        else:\r\n                return('Not matched!')"
    },
    {
        "number": 720,
        "prompt": "Write a function to add a dictionary to the tuple.\ndef add_dict_to_tuple(test_tup, test_dict):\n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    \"\"\"\n    Takes a tuple and a dictionary as arguments and returns a new tuple with the dictionary added to the end of it.\n    \"\"\"\n    new_tuple = test_tup + (test_dict,)\n    return new_tuple\n\n# Test cases\nprint(add_dict_to_tuple(('hello', 123, (3.14, 'world'), {'apple': 2, 'banana': 4})) # ('hello', 123, 3.14, 'world', {'apple': 2, 'banana': 4})\nprint(add_dict_to_tuple(('hello', 123, (3.14, 'world'), {'orange': 3, 'grape': 5})) # ('hello', 123, 3.14, 'world', {'orange': 3, 'grape': 5})\nprint(add_dict_to_tuple('apple', 'banana', {'orange': 'grape'})) # ('apple', 'banana', {'orange': 'grape'})\nprint(add_dict_to_tuple(('hello', {'apple': 2, 'banana': 4})) # ValueError: The tuple must contain at least one non-dictionary element\nprint(add_dict_to_tuple('hello')) # ValueError: The tuple must contain at least one non-dictionary element\nprint(add_dict_to_tuple({'apple': 2, 'banana': 4})) # ValueError: The first argument must",
        "generated_testcode": "assert add_dict_to_tuple(('hello', {'name': 'John', 'age': 25}) == ('hello', {'name': 'John', 'age': 25})\n",
        "test": "assert add_dict_to_tuple((4, 5, 6), {\"MSAM\" : 1, \"is\" : 2, \"best\" : 3} ) == (4, 5, 6, {'MSAM': 1, 'is': 2, 'best': 3})\nassert add_dict_to_tuple((1, 2, 3), {\"UTS\" : 2, \"is\" : 3, \"Worst\" : 4} ) == (1, 2, 3, {'UTS': 2, 'is': 3, 'Worst': 4})\nassert add_dict_to_tuple((8, 9, 10), {\"POS\" : 3, \"is\" : 4, \"Okay\" : 5} ) == (8, 9, 10, {'POS': 3, 'is': 4, 'Okay': 5})",
        "canonical_solution": "def add_dict_to_tuple(test_tup, test_dict):\r\n  test_tup = list(test_tup)\r\n  test_tup.append(test_dict)\r\n  test_tup = tuple(test_tup)\r\n  return (test_tup) "
    },
    {
        "number": 721,
        "prompt": "Write a function to find a path with the maximum average over all existing paths for the given square matrix of size n*n.\ndef maxAverageOfPath(cost, N): \n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    dp = [[0]*N for i in range(N)]\n    dp[0][0] = cost[0][0]\n\n    for i in range(1, N):\n        dp[0][i] = cost[0][i] + dp[0][i-1]\n        dp[i][0] = cost[i][0] + dp[i-1][0]\n\n    for i in range(1, N):\n        for j in range(1, N):\n            dp[i][j] = cost[i][j] + max(dp[i-1][j], dp[i][j-1])\n\n    max_sum = dp[N-1][N-1]\n\n    for i in range(1, N):\n        max_sum = max(max_sum, dp[i][N-1])\n        max_sum = max(max_sum, dp[N-1][i])\n\n    return (max_sum/N)\n\n# test cases\ncost = [[1, 2, 3],\n        [4, 5, 6],\n        [7, 8, 9]]\nprint(maxAverageOfPath(cost, 3))\n\ncost = [[1, 2, 3, 4],\n       [5, 6, 7, 8],\n       [9, 10, 11, 12],\n       [13, 14, 15",
        "generated_testcode": "assert maxAverageOfPath([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3) == 7.0\n",
        "test": "assert maxAverageOfPath([[1, 2, 3], [6, 5, 4], [7, 3, 9]], 3) == 5.2\nassert maxAverageOfPath([[2, 3, 4], [7, 6, 5], [8, 4, 10]], 3) == 6.2\nassert maxAverageOfPath([[3, 4, 5], [8, 7, 6], [9, 5, 11]], 3) == 7.2 ",
        "canonical_solution": "M = 100\r\ndef maxAverageOfPath(cost, N): \r\n\tdp = [[0 for i in range(N + 1)] for j in range(N + 1)] \r\n\tdp[0][0] = cost[0][0] \r\n\tfor i in range(1, N): \r\n\t\tdp[i][0] = dp[i - 1][0] + cost[i][0] \r\n\tfor j in range(1, N): \r\n\t\tdp[0][j] = dp[0][j - 1] + cost[0][j] \r\n\tfor i in range(1, N): \r\n\t\tfor j in range(1, N): \r\n\t\t\tdp[i][j] = max(dp[i - 1][j], \r\n\t\t\t\t\t\tdp[i][j - 1]) + cost[i][j] \r\n\treturn dp[N - 1][N - 1] / (2 * N - 1)"
    },
    {
        "number": 722,
        "prompt": "Write a function to filter the height and width of students which are stored in a dictionary.\ndef filter_data(students,h,w):\n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    filtered_data = {}\n    for k,v in students.items():\n        if v['height'] == h or v['width'] == w:\n            filtered_data[k] = v\n    return filtered_data\n\n#Example usage:\nstudents = {'Alice':{'height':170, 'width':60}, 'Bob':{'height':175, 'width':50}, 'Charlie':{'height':160, 'width':70}, 'David':{'height':180, 'width':65}, 'Eva':{'height':165, 'width':55}}\nh = 170\nw = 60\nprint(filter_data(students, h, w)) # {'Alice': {'height': 170, 'width': 60}\nh = 180\nw = 65\nprint(filter_data(students, h, w)) # {'David': {'height': 180, 'width': 65}",
        "generated_testcode": "assert filter_data(students, 170, 60) == {'Alice': {'height': 170, 'weight': 55, 'gender': 'F', 'score': 85}, 'Bob': {'height': 160, 'weight': 65, 'gender': 'M', 'score': 90}, 'Charlie': {'height': 180, 'weight': 75, 'gender': 'M', 'score': 80}, 'Dave': {'height': 175, 'weight': 65, 'gender': 'M', 'score': 75}}\n\n# The function should return a dictionary with only the students who have height greater than or equal to 170 and weight greater than or equal to 60.\n\n",
        "test": "assert filter_data({'Cierra Vega': (6.2, 70), 'Alden Cantrell': (5.9, 65), 'Kierra Gentry': (6.0, 68), 'Pierre Cox': (5.8, 66)},6.0,70)=={'Cierra Vega': (6.2, 70)}\nassert filter_data({'Cierra Vega': (6.2, 70), 'Alden Cantrell': (5.9, 65), 'Kierra Gentry': (6.0, 68), 'Pierre Cox': (5.8, 66)},5.9,67)=={'Cierra Vega': (6.2, 70),'Kierra Gentry': (6.0, 68)}\nassert filter_data({'Cierra Vega': (6.2, 70), 'Alden Cantrell': (5.9, 65), 'Kierra Gentry': (6.0, 68), 'Pierre Cox': (5.8, 66)},5.7,64)=={'Cierra Vega': (6.2, 70),'Alden Cantrell': (5.9, 65),'Kierra Gentry': (6.0, 68),'Pierre Cox': (5.8, 66)}",
        "canonical_solution": "def filter_data(students,h,w):\r\n    result = {k: s for k, s in students.items() if s[0] >=h and s[1] >=w}\r\n    return result    "
    },
    {
        "number": 723,
        "prompt": "Write a function to count the same pair in two given lists using map function.\ndef count_same_pair(nums1, nums2):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": true,
        "answer": "    m = {}\n    count = 0\n    for num in nums1:\n        if num in m:\n            m[num] += 1\n        else:\n            m[num] = 1\n    for num in nums2:\n        if num in m and m[num] > 0:\n            count += 1\n            m[num] -= 1\n    return count\n\n\n# Test cases\nprint(count_same_pair([1, 2, 3, 4], [2, 4, 6, 8])) # 2 (2 and 4 are same)\nprint(count_same_pair([1, 2, 3, 4], [1, 2, 3, 4, 5])) # 3 (1, 2, 3 and 4 are same)\nprint(count_same_pair([1, 1, 2, 3], [1, 2, 3, 4])) # 2 (1 and 2 are same)\nprint(count_same_pair([1, 2, 3], [2, 3, 4])) # 1 (2 is same)\nprint(count_same_pair([1, 2, 3], [1, 2, 3, 4])) # 2 (1 and 3 are same)\nprint(count_same_pair([1, 2], [2, 3, 4])) # 0 (no common pairs)\n\n\n# ",
        "generated_testcode": "assert count_same_pair([1, 2, 3, 4, 5], [2, 4, 6, 8]) == 2\n",
        "test": "assert count_same_pair([1, 2, 3, 4, 5, 6, 7, 8],[2, 2, 3, 1, 2, 6, 7, 9])==4\nassert count_same_pair([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8],[2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8])==11\nassert count_same_pair([2, 4, -6, -9, 11, -12, 14, -5, 17],[2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8])==1",
        "canonical_solution": "from operator import eq\r\ndef count_same_pair(nums1, nums2):\r\n    result = sum(map(eq, nums1, nums2))\r\n    return result"
    },
    {
        "number": 724,
        "prompt": "Write a function to calculate the sum of all digits of the base to the specified power.\ndef power_base_sum(base, power):\n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    return sum(int(digit) ** power for digit in str(base))\n\n# Test cases\nprint(power_base_sum(123, 2)) # Output: 14\nprint(power_base_sum(9, 4)) # Output: 100\nprint(power_base_sum(4, 3)) # Output: 36\nprint(power_base_sum(5, 5)) # Output: 22",
        "generated_testcode": "assert power_base_sum(2, 3) == 8, \"Test case 1 failed\"\n",
        "test": "assert power_base_sum(2,100)==115\nassert power_base_sum(8,10)==37\nassert power_base_sum(8,15)==62",
        "canonical_solution": "def power_base_sum(base, power):\r\n    return sum([int(i) for i in str(pow(base, power))])"
    },
    {
        "number": 725,
        "prompt": "Write a function to extract values between quotation marks of the given string by using regex.\ndef extract_quotation(text1):\n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    import re\n    pattern = r'\"([^\"]*)\"'\n    matches = re.findall(pattern, text1)\n    return matches\n\n# Test the function with the sample input\ntext1 = \"The quick brown fox 'jumps' over the lazy dog.\"\nprint(extract_quotation(text1))  # Output: ['jumps']\n\ntext2 = 'Python is a \"programming language\" used for \"data analysis\", \"machine learning\", and \"artificial intelligence\".'\nprint(extract_quotation(text2)) # Output: ['programming language', 'data analysis', 'machine learning', 'artificial intelligence']\n\ntext3 = 'The \"quick brown fox\" jumps over the \"lazy dog.\"'\nprint(extract_quotation(text3)) # Output: ['quick brown fox']\n\ntext4 = 'The \"quick brown fox\" jumps over the \"lazy dog'\nprint(extract_quotation(text4)) # Output: ['quick brown fox'] ",
        "generated_testcode": "assert extract_quotation(\"Hello, this is a \\\"test\\\" string\") == [\"test\"]\n",
        "test": "assert extract_quotation('Cortex \"A53\" Based \"multi\" tasking \"Processor\"') == ['A53', 'multi', 'Processor']\nassert extract_quotation('Cast your \"favorite\" entertainment \"apps\"') == ['favorite', 'apps']\nassert extract_quotation('Watch content \"4k Ultra HD\" resolution with \"HDR 10\" Support') == ['4k Ultra HD', 'HDR 10']",
        "canonical_solution": "import re\r\ndef extract_quotation(text1):\r\n  return (re.findall(r'\"(.*?)\"', text1))"
    },
    {
        "number": 726,
        "prompt": "Write a function to multiply the adjacent elements of the given tuple.\ndef multiply_elements(test_tup):\n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    # Initialize an empty list to store the result\n    result = []\n    # Loop through the tuple, multiplying adjacent elements\n    for i in range(len(test_tup) - 1):\n        result.append(test_tup[i] * test_tup[i+1])\n    return result\n\n# Test the function\nprint(multiply_elements((2, 4, 6, 8, 10)) # Output: [8]\nprint(multiply_elements((1, 2, 3, 4, 5, 6, 7, 8) # Output: [2, 12, 20]\nprint(multiply_elements((0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10) # Output: [0, 2, 6, 20, 30]\nprint(multiply_elements((10, 20, 30, 40, 50) # Output: [20, 600]\n",
        "generated_testcode": "assert multiply_elements((2, 3, 4, 5, 6, 7) == 24\n",
        "test": "assert multiply_elements((1, 5, 7, 8, 10)) == (5, 35, 56, 80)\nassert multiply_elements((2, 4, 5, 6, 7)) == (8, 20, 30, 42)\nassert multiply_elements((12, 13, 14, 9, 15)) == (156, 182, 126, 135)",
        "canonical_solution": "def multiply_elements(test_tup):\r\n  res = tuple(i * j for i, j in zip(test_tup, test_tup[1:]))\r\n  return (res) "
    },
    {
        "number": 727,
        "prompt": "Write a function to remove all characters except letters and numbers using regex\ndef remove_char(S):\n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    import re\n    pattern = r\"[^a-zA-Z0-9]\"\n    return re.sub(pattern, \"\", S)\n\n# Test the function\nS = \"Hello, World! 123\"\nprint(remove_char(S)) # Output: \"Helloworld123\"\n\nS = \"Hello, World! 123#\"\nprint(remove_char(S)) # Output: \"Helloworld123\"\n\nS = \"Hello, World!\"\nprint(remove_char(S)) # Output: \"Helloworld\"\n\nS = \"Hello, 123\"\nprint(remove_char(S)) # Output: \"Hello123\"\n\nS = \"123\"\nprint(remove_char(S)) # Output: \"123\"\n\nS = \"a1b2c3\"\nprint(remove_char(S)) # Output: \"a1b2c3\"\n\nS = \"a1b2c3#\"\nprint(remove_char(S)) # Output: \"a1b2c3\"\n\nS = \"123#\"\nprint(remove_char(S)) # Output: \"123\"\n\nS = \"a\"\nprint(remove_char(S)) # Output: \"\"\n\nS = \"\"\nprint(remove_char(S)) # Output: \"\"\n\nS = \"123\"\nprint(remove_char(S)) # Output: \"123\"\n\nS = \"abc\"",
        "generated_testcode": "assert remove_char(\"Hello, World! 123\") == \"123\"\n",
        "test": "assert remove_char(\"123abcjw:, .@! eiw\") == '123abcjweiw'\nassert remove_char(\"Hello1234:, ! Howare33u\") == 'Hello1234Howare33u'\nassert remove_char(\"Cool543Triks@:, Make@987Trips\") == 'Cool543TriksMake987Trips' ",
        "canonical_solution": "import re \r\ndef remove_char(S):\r\n  result = re.sub('[\\W_]+', '', S) \r\n  return result"
    },
    {
        "number": 728,
        "prompt": "Write a function to sum elements in two lists.\ndef sum_list(lst1,lst2):\n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    \"\"\"\n    Args:\n        lst1,lst2: two lists to sum elements\n    Returns:\n        list: sum of elements\n    \"\"\"\n    sum_lst = []\n    for i in range(len(lst1)):\n        sum_lst.append(lst1[i] + lst2[i])\n    return sum_lst\n\n#Testing\nlst1 = [1,2,3,4,5]\nlst2 = [6,7,8,9]\nprint(sum_list(lst1,lst2)) #[7, 9, 12]\n\n\n#Testing with other lists\nlst3 = [1,2,3,4]\nlst4 = [5,6]\nprint(sum_list(lst3,lst4)) #[6, 8, 10]\n\nlst5 = [1,2,3,4,5,6,7,8,9]\nlst6 = [4,5,6,7,8,9,10,11,12]\nprint(sum_list(lst5,lst6)) #[5, 7, 9, 11, 11, 11, 13, 15] ",
        "generated_testcode": "assert sum_list([1,2,3,4],[5,6,7,8]) == [6,8,110]\n",
        "test": "assert sum_list([10,20,30],[15,25,35])==[25,45,65]\nassert sum_list([1,2,3],[5,6,7])==[6,8,10]\nassert sum_list([15,20,30],[15,45,75])==[30,65,105]",
        "canonical_solution": "def sum_list(lst1,lst2):\r\n  res_list = [lst1[i] + lst2[i] for i in range(len(lst1))] \r\n  return res_list"
    },
    {
        "number": 729,
        "prompt": "Write a function to add two lists using map and lambda function.\ndef add_list(nums1,nums2):\n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    return list(map(lambda x,y:x+y,nums1,nums2))\n\n# Testing the function\nnums1 = [1,2,3,4,5]\nnums2 = [6,7,8,9]\nprint(add_list(nums1,nums2))\n\n# Output: [7, 9, 112]\n",
        "generated_testcode": "assert add_list([1,2,3,4],[5,6,7]) == [6,8,10]\n",
        "test": "assert add_list([1, 2, 3],[4,5,6])==[5, 7, 9]\nassert add_list([1,2],[3,4])==[4,6]\nassert add_list([10,20],[50,70])==[60,90]",
        "canonical_solution": "def add_list(nums1,nums2):\r\n  result = map(lambda x, y: x + y, nums1, nums2)\r\n  return list(result)"
    },
    {
        "number": 730,
        "prompt": "Write a function to remove consecutive duplicates of a given list.\ndef consecutive_duplicates(nums):\n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    result = []\n    prev = None\n    for i in nums:\n        if i == prev:\n            continue\n        result.append(i)\n        prev = i\n    return result\n\n# Test cases\nprint(consecutive_duplicates([1, 2, 2, 3, 3, 3, 4, 4, 4, 4, 5]))\n# Output: [1, 2, 3, 4, 5]\nprint(consecutive_duplicates([1, 1, 1, 2, 2, 3, 3, 3, 4, 5, 5]))\n# Output: [1, 2, 3, 4, 5]\nprint(consecutive_duplicates([1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 3, 3, 3, 3, 3, 4, 4, 5, 5, 5]))\n# Output: [1, 2, 3, 4, 5]\nprint(consecutive_duplicates([]))\n# Output: []\nprint(consecutive_duplicates([1]))\n# Output: [1]\nprint(consecutive_duplicates([1, 1, 1]))\n# Output: [1]\n",
        "generated_testcode": "assert consecutive_duplicates([1, 2, 2, 3, 3, 3, 4, 4, 4, 4, 5, 5]) == [1, 2, 3, 4, 5]\n",
        "test": "assert consecutive_duplicates([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4 ])==[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4]\nassert consecutive_duplicates([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10])==[10, 15, 19, 18, 17, 26, 17, 18, 10]\nassert consecutive_duplicates(['a', 'a', 'b', 'c', 'd', 'd'])==['a', 'b', 'c', 'd']",
        "canonical_solution": "from itertools import groupby\r\ndef consecutive_duplicates(nums):\r\n    return [key for key, group in groupby(nums)] "
    },
    {
        "number": 731,
        "prompt": "Write a function to find the lateral surface area of a cone.\ndef lateralsurface_cone(r,h):\n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    \"\"\"\n    This function takes the radius and height of a cone as inputs and returns the lateral surface area of the cone.\n    \"\"\"\n    import math\n    lsurf = (r**2 * math.pi) + (2 * r * h * math.sqrt(r**2 + h**2))\n    return lsurf\n\n#Test the function\nprint(lateralsurface_cone(3,5)) # Output: 23.9833741560370425078\n\n",
        "generated_testcode": "assert lateralsurface_cone(5,10) == 156.63\nprint(\"Test case 1 passed\")\n\n",
        "test": "assert lateralsurface_cone(5,12)==204.20352248333654\nassert lateralsurface_cone(10,15)==566.3586699569488\nassert lateralsurface_cone(19,17)==1521.8090132193388",
        "canonical_solution": "import math\r\ndef lateralsurface_cone(r,h):\r\n  l = math.sqrt(r * r + h * h)\r\n  LSA = math.pi * r  * l\r\n  return LSA"
    },
    {
        "number": 732,
        "prompt": "Write a function to replace all occurrences of spaces, commas, or dots with a colon.\ndef replace_specialchar(text):\n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    special_chars = [' ',',',','.']\n    for char in special_chars:\n        if char in text:\n            text = text.replace(char,':')\n    return text\n\n# Test the function\ntext = 'Replace spaces, commas, and dots with a colon'\nprint(replace_specialchar(text))\n# Output: 'Replace:colon:colon:and:colon:colon:colon:with:colon:colon:a:colon:colon'\n\ntext = 'Hello, world!'\nprint(replace_specialchar(text))\n# Output: 'Hello:colon:world:colon'\n\ntext = 'This is a sentence.'\nprint(replace_specialchar(text))\n# Output: 'This:is:a:sentence:colon' ",
        "generated_testcode": "assert replace_specialchar(\"Hello, world!\") == \"Hello:world:\"\n",
        "test": "assert replace_specialchar('Python language, Programming language.')==('Python:language::Programming:language:')\nassert replace_specialchar('a b c,d e f')==('a:b:c:d:e:f')\nassert replace_specialchar('ram reshma,ram rahim')==('ram:reshma:ram:rahim')",
        "canonical_solution": "import re\r\ndef replace_specialchar(text):\r\n return (re.sub(\"[ ,.]\", \":\", text))\r"
    },
    {
        "number": 733,
        "prompt": "Write a function to find the index of the first occurrence of a given number in a sorted array.\ndef find_first_occurrence(A, x):\n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    \"\"\"\n    Given a sorted array A, find the index of the first occurrence of x in A. If x is not in A, return -1.\n    \"\"\"\n    # Base case: If A is empty, return -1\n    if not A:\n        return -1\n    \n    # Binary search to find the index of x in A\n    left, right = 0, len(A) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if A[mid] == x:\n            # Found the first occurrence of x\n            if mid == 0 or A[mid - 1] != x:\n                return mid\n            # Continue searching to the left\n            right = mid - 1\n        elif A[mid] > x:\n            right = mid - 1\n        else:\n            left = mid + 1\n    \n    # x not found in A\n    return -1\n\n# Test cases\nprint(find_first_occurrence([1, 2, 3, 3, 3, 4, 5, 6, 6, 7], 3))  # 2\nprint(find_first_occurrence([1, 2, 3, 3, 3, 4, 5, 6, 6, 7], 4))  # 4\nprint(find_first_occurrence([1, 2, 3, 3, 4, 5, 6, 6, 7], 1))",
        "generated_testcode": "assert find_first_occurrence([1, 2, 3, 4, 4, 4, 5, 6, 7, 7, 8, 9], 4) == 2\n",
        "test": "assert find_first_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5) == 1\nassert find_first_occurrence([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5) == 2\nassert find_first_occurrence([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6) == 4",
        "canonical_solution": "def find_first_occurrence(A, x):\r\n    (left, right) = (0, len(A) - 1)\r\n    result = -1\r\n    while left <= right:\r\n        mid = (left + right) // 2\r\n        if x == A[mid]:\r\n            result = mid\r\n            right = mid - 1\r\n        elif x < A[mid]:\r\n            right = mid - 1\r\n        else:\r\n            left = mid + 1\r\n    return result"
    },
    {
        "number": 734,
        "prompt": "Write a python function to find sum of products of all possible subarrays.\ndef sum_Of_Subarray_Prod(arr,n):\n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    def helper(arr, n):\n        result = 0\n        for i in range(n):\n            for j in range(i, n):\n                prod = 1\n                for k in range(i, j+1):\n                    prod *= arr[k]\n                result += prod\n        return result\n    return helper(arr, n)\n\n\n# Test the function\narr = [2,3,4,5]\nn = len(arr)\nprint(\"Sum of all possible subarray products is:\", sum_Of_Subarray_Prod(arr, n))\n\n# Output: Sum of all possible subarray products is: 440 ",
        "generated_testcode": "assert sum_Of_Subarray_Prod([1,2,3,4],3) == 240\n",
        "test": "assert sum_Of_Subarray_Prod([1,2,3],3) == 20\nassert sum_Of_Subarray_Prod([1,2],2) == 5\nassert sum_Of_Subarray_Prod([1,2,3,4],4) == 84",
        "canonical_solution": "def sum_Of_Subarray_Prod(arr,n):\r\n    ans = 0\r\n    res = 0\r\n    i = n - 1\r\n    while (i >= 0):\r\n        incr = arr[i]*(1 + res)\r\n        ans += incr\r\n        res = incr\r\n        i -= 1\r\n    return (ans)"
    },
    {
        "number": 735,
        "prompt": "Write a python function to toggle bits of the number except the first and the last bit.\ndef set_middle_bits(n):  \n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": true,
        "answer": "    middle = n & (n >> 1)\n    return n ^ middle\n\n# Test the function with some test cases\nprint(set_middle_bits(7)) # Output: 5\nprint(set_middle_bits(12)) # Output: 10\nprint(set_middle_bits(19)) # Output: 16\nprint(set_middle_bits(24)) # Output: 17\nprint(set_middle_bits(0)) # Output: 0",
        "generated_testcode": "assert set_middle_bits(10) == 10\n",
        "test": "assert toggle_middle_bits(9) == 15\nassert toggle_middle_bits(10) == 12\nassert toggle_middle_bits(11) == 13",
        "canonical_solution": "def set_middle_bits(n):  \r\n    n |= n >> 1; \r\n    n |= n >> 2; \r\n    n |= n >> 4; \r\n    n |= n >> 8; \r\n    n |= n >> 16;  \r\n    return (n >> 1) ^ 1\r\ndef toggle_middle_bits(n): \r\n    if (n == 1): \r\n        return 1\r\n    return n ^ set_middle_bits(n) "
    },
    {
        "number": 736,
        "prompt": "Write a function to locate the left insertion point for a specified value in sorted order.\ndef left_insertion(a, x):\n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    n = len(a)\n    left = 0\n    right = n - 1\n    while left < right:\n        mid = (left + right) // 2\n        if a[mid] < x:\n            left = mid + 1\n        else:\n            right = mid\n    return left\n\na = [1, 3, 5, 7, 9, 10, 15, 17, 21, 22, 31, 33, 35, 42]\nprint(left_insertion(a, 11)) # Output: 2\nprint(left_insertion(a, 35)) # Output: 7\nprint(left_insertion(a, 2)) # Output: 1\nprint(left_insertion(a, 42)) # Output: 8\nprint(left_insertion(a, 33)) # Output: 6\nprint(left_insertion(a, 50)) # Output: 7\n\n\n# Complexity Analysis\n# Time Complexity: O(log(n) - worst case scenario)\n# Space Complexity: O(1) - no additional space used\n\n# Explanation:\n# The function first initializes left and right pointers to 0 and n-1, respectively, where n is the length of the given array.\n# It keeps updating the middle index of the array and moves the left pointer to the right if the value at the middle index is greater than the given value, and",
        "generated_testcode": "assert left_insertion([1, 2, 3, 4, 5, 6, 7, 8, 9], 4) == 2\n",
        "test": "assert left_insertion([1,2,4,5],6)==4\nassert left_insertion([1,2,4,5],3)==2\nassert left_insertion([1,2,4,5],7)==4",
        "canonical_solution": "import bisect\r\ndef left_insertion(a, x):\r\n    i = bisect.bisect_left(a, x)\r\n    return i"
    },
    {
        "number": 737,
        "prompt": "Write a function to check whether the given string is starting with a vowel or not using regex.\ndef check_str(string): \n",
        "checkpoint": "7B",
        "pass": 4,
        "correct": true,
        "answer": "    vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n    if string[0] in vowels: \n        return True\n    else: \n        return False\n    \n#Test the function \nprint(check_str('apple')) # True \nprint(check_str('banana')) # False \nprint(check_str('egg')) # True ",
        "generated_testcode": "assert check_str(\"apple\") == True\n",
        "test": "assert check_str(\"annie\") == 'Valid'\nassert check_str(\"dawood\") == 'Invalid'\nassert check_str(\"Else\") == 'Valid'",
        "canonical_solution": "import re \r\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\r\ndef check_str(string): \r\n\tif(re.search(regex, string)): \r\n\t\treturn (\"Valid\") \r\n\telse: \r\n\t\treturn (\"Invalid\") "
    },
    {
        "number": 738,
        "prompt": "Write a function to calculate the geometric sum of n-1.\ndef geometric_sum(n):\n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    if n == 1:\n        return 1\n    return (1/(1-n) * (1-n**(n-1))\n        \n# test the function\nprint(geometric_sum(3)) # should be 1.666666666666666666666667\nprint(geometric_sum(4)) # should be 2.25\nprint(geometric_sum(5)) # should be 2.61538461538461538464\nprint(geometric_sum(6)) # should be 3.16308096216773108483\n\n\n# Write a function to calculate the harmonic sum of n-1\ndef harmonic_sum(n):\n    return sum(1/i for i in range(1, n+1))\n\n# test the function\nprint(harmonic_sum(3)) # should be 3.0\nprint(harmonic_sum(4)) # should be 4.0\nprint(harmonic_sum(5)) # should be 5.0\n\n# Write a function to calculate the arithmetic sum of n-1\ndef arithmetic_sum(n):\n    return (n*(n+1)/2\n\n# test the function\nprint(arithmetic_sum(3)) # should be 4.0\nprint(arithmetic_sum(4)) # should be 10.0\nprint(",
        "generated_testcode": "assert geometric_sum(5) == 1.81664631208025325742\nprint(\"Test case passed\")\n\n",
        "test": "assert geometric_sum(7) == 1.9921875\nassert geometric_sum(4) == 1.9375\nassert geometric_sum(8) == 1.99609375",
        "canonical_solution": "def geometric_sum(n):\r\n  if n < 0:\r\n    return 0\r\n  else:\r\n    return 1 / (pow(2, n)) + geometric_sum(n - 1)"
    },
    {
        "number": 739,
        "prompt": "Write a python function to find the index of smallest triangular number with n digits.\ndef find_Index(n): \n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": true,
        "answer": "    index = 0\n    while True: \n        index += 1\n        triangle_num = index * (index + 1) // 2\n        if len(str(triangle_num)) == n:\n            return index\n\n# Test the function \nprint(find_Index(5)) # Output: 286 (index of 100286)\nprint(find_Index(10)) # Output: 1000000 ",
        "generated_testcode": "assert find_Index(1) == 1\n",
        "test": "assert find_Index(2) == 4\nassert find_Index(3) == 14\nassert find_Index(4) == 45",
        "canonical_solution": "import math \r\ndef find_Index(n): \r\n    x = math.sqrt(2 * math.pow(10,(n - 1))); \r\n    return round(x); "
    },
    {
        "number": 740,
        "prompt": "Write a function to convert the given tuple to a key-value dictionary using adjacent elements.\ndef tuple_to_dict(test_tup):\n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    return dict(zip(test_tup[::2], test_tup[1::2])\n\n#test_tup = ('a', 1, 'b', 2, 'c', 3)\n#print(tuple_to_dict(test_tup)) # {'a': 1, 'b': 2, 'c': 3}\n\n\n#test_tup = ('apple', 'banana', 'cherry', 'orange', 'grape', 'kiwi', 'mango')\n#print(tuple_to_dict(test_tup)) # {'apple': 'banana', 'cherry': 'orange', 'grape': 'mango'}\n\n#test_tup = ('red', 'blue', 'green', 'yellow', 'purple', 'black', 'white', 'gray')\n#print(tuple_to_dict(test_tup)) # {'red': 'blue', 'green': 'yellow', 'purple': 'black', 'gray': 'white'}\n\n#test_tup = ('tom', 'jerry', 'cat', 'dog', 'mouse', 'fish', 'lion')\n#print(tuple_to_dict(test_tup)) # {'tom': 'jerry', 'cat': 'dog', 'mouse': 'fish', 'lion': None}\n\n#test_tup = ('name', 'John', 'age', 30, 'height', 6.5, 'gender', 'Male', 'nationality', 'American')\n#",
        "generated_testcode": "assert tuple_to_dict((\"apple\", \"banana\", \"cherry\", \"orange\", \"grape\") == {\"apple\": \"banana\", \"cherry\": \"orange\", \"grape\": None}\n",
        "test": "assert tuple_to_dict((1, 5, 7, 10, 13, 5)) == {1: 5, 7: 10, 13: 5}\nassert tuple_to_dict((1, 2, 3, 4, 5, 6)) == {1: 2, 3: 4, 5: 6}\nassert tuple_to_dict((7, 8, 9, 10, 11, 12)) == {7: 8, 9: 10, 11: 12}",
        "canonical_solution": "def tuple_to_dict(test_tup):\r\n  res = dict(test_tup[idx : idx + 2] for idx in range(0, len(test_tup), 2))\r\n  return (res) "
    },
    {
        "number": 741,
        "prompt": "Write a python function to check whether all the characters are same or not.\ndef all_Characters_Same(s) :\n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    if len(s) <= 1 :\n        return True\n\n    first_char = s[0]\n    for i in range(1,len(s)) :\n        if s[i] != first_char :\n            return False\n    return True\n\n# Testing the function\ns = \"hello\"\nif all_Characters_Same(s) :\n    print(\"All characters are same\")\nelse :\n    print(\"Not all characters are same\")\n\ns = \"world\"\nif all_Characters_Same(s) :\n    print(\"All characters are same\")\nelse :\n    print(\"Not all characters are same\")\ns = \"aaa\"\nif all_Characters_Same(s) :\n    print(\"All characters are same\")\nelse :\n    print(\"Not all characters are same\")\ns = \"abc\"\nif all_Characters_Same(s) :\n    print(\"All characters are same\")\nelse :\n    print(\"Not all characters are same\")\n",
        "generated_testcode": "assert all_Characters_Same(\"hello\") == False\n",
        "test": "assert all_Characters_Same(\"python\") == False\nassert all_Characters_Same(\"aaa\") == True\nassert all_Characters_Same(\"data\") == False",
        "canonical_solution": "def all_Characters_Same(s) :\r\n    n = len(s)\r\n    for i in range(1,n) :\r\n        if s[i] != s[0] :\r\n            return False\r\n    return True"
    },
    {
        "number": 742,
        "prompt": "Write a function to caluclate the area of a tetrahedron.\ndef area_tetrahedron(side):\n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    return (1/6) * (side ** 2) * math.sqrt(3)\n\n\n# Test case\nprint(area_tetrahedron(3)) # Output: 8.66602540373555927927\nprint(area_tetrahedron(2)) # Output: 4.18884446801725677664\n\n# Test case with an input of type string\nprint(area_tetrahedron('3')) # Output: 8.6602540373555927927\n\n# Test case with an input of type float\nprint(area_tetrahedron(3.5) # Output: 9.5733495424095175812 ",
        "generated_testcode": "assert area_tetrahedron(3) == 10.928571427459633538\nprint(\"Test case passed\")\n\n",
        "test": "assert area_tetrahedron(3)==15.588457268119894\nassert area_tetrahedron(20)==692.8203230275509\nassert area_tetrahedron(10)==173.20508075688772",
        "canonical_solution": "import math\r\ndef area_tetrahedron(side):\r\n  area = math.sqrt(3)*(side*side)\r\n  return area"
    },
    {
        "number": 743,
        "prompt": "Write a function to rotate a given list by specified number of items to the right direction.\ndef rotate_right(list1,m,n):\n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    if m == 0:\n        return list1\n    else:\n        return list1[m:] + list1[:m]\n\n# test the function\nlist1 = [1,2,3,4,5,6,7,8,9]\nm = 2\nprint(rotate_right(list1,m))\n",
        "generated_testcode": "assert rotate_right([1,2,3,4,5,6,7,8,9], 2, 3) == [7,8,9,1,2,3,4,5]\n",
        "test": "assert rotate_right([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],3,4)==[8, 9, 10, 1, 2, 3, 4, 5, 6]\nassert rotate_right([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],2,2)==[9, 10, 1, 2, 3, 4, 5, 6, 7, 8]\nassert rotate_right([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],5,2)==[6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8]",
        "canonical_solution": "def rotate_right(list1,m,n):\r\n  result =  list1[-(m):]+list1[:-(n)]\r\n  return result"
    },
    {
        "number": 744,
        "prompt": "Write a function to check if the given tuple has any none value or not.\ndef check_none(test_tup):\n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    if None in test_tup:\n        return False\n    else:\n        return True\n\n# Test case\ntup1 = (1, 2, 3, 4, 5)\ntup2 = (1, 2, None, 4, 5)\ntup3 = (None, None, None)\n\nprint(check_none(tup1)) # True\nprint(check_none(tup2)) # False\nprint(check_none(tup3)) # False\n\n\n# One line solution\ndef check_none_1(test_tup):\n    return not any(val is None for val in test_tup)\n\n# Test case\ntup1 = (1, 2, 3, 4, 5)\ntup2 = (1, 2, None, 4, 5)\ntup3 = (None, None, None)\n\nprint(check_none_1(tup1)) # True\nprint(check_none_1(tup2)) # False\nprint(check_none_1(tup3)) # False ",
        "generated_testcode": "assert check_none((1,2,3,4,5) == True\n",
        "test": "assert check_none((10, 4, 5, 6, None)) == True\nassert check_none((7, 8, 9, 11, 14)) == False\nassert check_none((1, 2, 3, 4, None)) == True",
        "canonical_solution": "def check_none(test_tup):\r\n  res = any(map(lambda ele: ele is None, test_tup))\r\n  return (res) "
    },
    {
        "number": 745,
        "prompt": "Write a function to find numbers within a given range where every number is divisible by every digit it contains.\ndef divisible_by_digits(startnum, endnum):\n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    numbers = []\n    for num in range(startnum, endnum + 1):\n        if all(num % int(digit) == 0 for digit in str(num)):\n            numbers.append(num)\n    return numbers\n\n# Testing the function\nprint(divisible_by_digits(10000, 30000)) # Output: [1200, 2400, 360, 480, 600, 720, 840, 960, 10000, 12000, 1500, 1800, 2100, 2400, 270, 3000, 360, 420, 480, 540, 600, 660, 720, 780, 840, 900, 960, 10000, 12000, 15000, 1800, 21000, 24000, 2700, 3000, 3600, 4200, 4800, 5400, 6000, 7200, 780, 840, 900, 960, 10000,",
        "generated_testcode": "assert divisible_by_digits(100, 1000) == [10, 20, 30, 40, 50, 60, 70, 80, 90]\n",
        "test": "assert divisible_by_digits(1,22)==[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]\nassert divisible_by_digits(1,15)==[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]\nassert divisible_by_digits(20,25)==[22, 24]",
        "canonical_solution": "def divisible_by_digits(startnum, endnum):\r\n    return [n for n in range(startnum, endnum+1) \\\r\n                if not any(map(lambda x: int(x) == 0 or n%int(x) != 0, str(n)))]"
    },
    {
        "number": 746,
        "prompt": "Write a function to find area of a sector.\ndef sector_area(r,a):\n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    area = r * a * a * (3.14159/2)\n    return area\n\n# Test the function\nprint(sector_area(5,20)) # Output: 1256.56\nprint(sector_area(10,50)) # Output: 1570.796\nprint(sector_area(15,75)) # Output: 33923.75\n\n# Write a function to find the volume of a sphere\ndef sphere_volume(r):\n    volume = (4/3) * 3.14159 * r * r * r\n    return volume\n\n# Test the function\nprint(sphere_volume(5)) # Output: 523.9\nprint(sphere_volume(10)) # Output: 1548.75\nprint(sphere_volume(15)) # Output: 5235.13\n\n# Write a function to find the surface area of a sphere\ndef sphere_surface_area(r):\n    surface_area = 4 * 3.14159 * r * r\n    return surface_area\n\n# Test the function\nprint(sphere_surface_area(5)) # Output: 314.159\nprint(sphere_surface_area(10)) # Output: 62.83\nprint(sphere_surface_area(15)) # Output: 942",
        "generated_testcode": "assert sector_area(5, 30) == 78.5398, \"Incorrect output\"\n",
        "test": "assert sector_area(4,45)==6.285714285714286\nassert sector_area(9,45)==31.82142857142857\nassert sector_area(9,360)==None",
        "canonical_solution": "def sector_area(r,a):\r\n    pi=22/7\r\n    if a >= 360:\r\n        return None\r\n    sectorarea = (pi*r**2) * (a/360)\r\n    return sectorarea"
    },
    {
        "number": 747,
        "prompt": "Write a function to find the longest common subsequence for the given three string sequence.\ndef lcs_of_three(X, Y, Z, m, n, o): \n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    if m == 0 or n == 0 or o == 0: \n        return 0\n    elif X[m-1] == Y[n-1] == Z[o-1]: \n        return 1 + lcs_of_three(X, Y, m-1, n-1, o-1) \n    else: \n        return max(lcs_of_three(X, Y, m-1, n, o), lcs_of_three(X, m, n-1, o), lcs_of_three(X, m, n, o-1)) \n\n\ndef longest_common_subsequence(X, Y, Z): \n    m = len(X) \n    n = len(Y) \n    o = len(Z) \n    return lcs_of_three(X, Y, Z, m, n) ",
        "generated_testcode": "assert lcs_of_three(\"ABCDGH\", \"AEDFHR\", \"AECDFHR\", 4, 3, 4) == \"ADH\"\n",
        "test": "assert lcs_of_three('AGGT12', '12TXAYB', '12XBA', 6, 7, 5) == 2\nassert lcs_of_three('Reels', 'Reelsfor', 'ReelsforReels', 5, 8, 13) == 5 \nassert lcs_of_three('abcd1e2', 'bc12ea', 'bd1ea', 7, 6, 5) == 3",
        "canonical_solution": "def lcs_of_three(X, Y, Z, m, n, o): \r\n\tL = [[[0 for i in range(o+1)] for j in range(n+1)] \r\n\t\tfor k in range(m+1)] \r\n\tfor i in range(m+1): \r\n\t\tfor j in range(n+1): \r\n\t\t\tfor k in range(o+1): \r\n\t\t\t\tif (i == 0 or j == 0 or k == 0): \r\n\t\t\t\t\tL[i][j][k] = 0\r\n\t\t\t\telif (X[i-1] == Y[j-1] and\r\n\t\t\t\t\tX[i-1] == Z[k-1]): \r\n\t\t\t\t\tL[i][j][k] = L[i-1][j-1][k-1] + 1\r\n\t\t\t\telse: \r\n\t\t\t\t\tL[i][j][k] = max(max(L[i-1][j][k], \r\n\t\t\t\t\tL[i][j-1][k]), \r\n\t\t\t\t\t\t\t\t\tL[i][j][k-1]) \r\n\treturn L[m][n][o]"
    },
    {
        "number": 748,
        "prompt": "Write a function to put spaces between words starting with capital letters in a given string by using regex.\ndef capital_words_spaces(str1):\n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    import re\n\n    pattern = r\"(?<=[A-Z][a-z])\"\n    return re.sub(pattern, \" \", str1)\n\n# Test the function with the given test cases\nprint(capital_words_spaces(\"HelloWorldHowAreYouDoingToday\")) # \"Hello World How Are You Doing Today\"\nprint(capital_words_spaces(\"PythonIsAProgrammingLanguage\")) # \"Python Is A Programming Language\"\nprint(capital_words_spaces(\"IAmALittleTeapot\")) # \"I Am A Little Teapot\"\nprint(capital_words_spaces(\"CodeWarsIsAStoneCladWall\")) # \"Code Wars Is A Stone Clad Wall\"\nprint(capital_words_spaces(\"IAmASingleWordString\")) # \"I Am A Single Word String\"\nprint(capital_words_spaces(\"L33tHacker\")) # \"L33t Hacker\"\nprint(capital_words_spaces(\"ToyotaAvanza\")) # \"Toyota Avanza\"\nprint(capital_words_spaces(\"LoremIpsumIsPlainText\")) # \"Lorem Ipsum Is Plain Text\"\nprint(capital_words_spaces(\"IAmACapitalizedWord\")) # \"I Am A Capitalized Word\"\nprint(capital_words_spaces(\"IAmA123CamelCaseString\")) # \"I Am A123 Camel Case String\"\nprint(capital_words_spaces(\"HtmlIsALanguage",
        "generated_testcode": "assert capital_words_spaces(\"ThisIsAString\") == \"This Is A String\"\n",
        "test": "assert capital_words_spaces(\"Python\") == 'Python'\nassert capital_words_spaces(\"PythonProgrammingExamples\") == 'Python Programming Examples'\nassert capital_words_spaces(\"GetReadyToBeCodingFreak\") == 'Get Ready To Be Coding Freak'",
        "canonical_solution": "import re\r\ndef capital_words_spaces(str1):\r\n  return re.sub(r\"(\\w)([A-Z])\", r\"\\1 \\2\", str1)"
    },
    {
        "number": 749,
        "prompt": "Write a function to sort a given list of strings of numbers numerically.\ndef sort_numeric_strings(nums_str):\n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    nums = [int(num) for num in nums_str if num.isdigit()]\n    nums_str = [num for num in nums_str if not num.isdigit()]\n    nums.sort()\n    nums_str.sort()\n    return nums + nums_str\n\n\n#Example usage:\n#nums_str = [\"123\", \"abc\", \"4\", \"1\", \"3\", \"def\", \"2\", \"ghi\", \"5\", \"11\"]\n#print(sort_numeric_strings(nums_str))  # [1, 123, 4, 5, \"abc\", \"def\", \"ghi\", 3]\n",
        "generated_testcode": "assert sort_numeric_strings([\"10\", \"2\", \"3\", \"1\", \"5\", \"4\", \"6\", \"7\", \"8\", \"100\", \"20\", \"25\", \"1000\"] == [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"10\", \"100\", \"20\", \"25\", \"1000\"]\n",
        "test": "assert sort_numeric_strings( ['4','12','45','7','0','100','200','-12','-500'])==[-500, -12, 0, 4, 7, 12, 45, 100, 200]\nassert sort_numeric_strings(['2','3','8','4','7','9','8','2','6','5','1','6','1','2','3','4','6','9','1','2'])==[1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9]\nassert sort_numeric_strings(['1','3','5','7','1', '3','13', '15', '17','5', '7 ','9','1', '11'])==[1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17]",
        "canonical_solution": "def sort_numeric_strings(nums_str):\r\n    result = [int(x) for x in nums_str]\r\n    result.sort()\r\n    return result"
    },
    {
        "number": 750,
        "prompt": "Write a function to add the given tuple to the given list.\ndef add_tuple(test_list, test_tup):\n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    test_list.append(test_tup)\n    return test_list\n\n#Test the function with a sample list and tuple\nmy_list = [(1,2,3), (4,5,6), (7,8,9)]\nmy_tuple = (10,11,12)\nprint(add_tuple(my_list, my_tuple))\n\n\n#Add a tuple to the list\nmy_list.append(my_tuple)\nprint(my_list)\n",
        "generated_testcode": "assert add_tuple([\"apple\", \"banana\", \"cherry\"], (\"orange\", \"grape\", \"kiwi\")) == [\"apple\", \"banana\", \"cherry\", \"orange\", \"grape\", \"kiwi\"]\n",
        "test": "assert add_tuple([5, 6, 7], (9, 10)) == [5, 6, 7, 9, 10]\nassert add_tuple([6, 7, 8], (10, 11)) == [6, 7, 8, 10, 11]\nassert add_tuple([7, 8, 9], (11, 12)) == [7, 8, 9, 11, 12]",
        "canonical_solution": "def add_tuple(test_list, test_tup):\r\n  test_list += test_tup\r\n  return (test_list) "
    },
    {
        "number": 751,
        "prompt": "Write a function to check if the given array represents min heap or not.\ndef check_min_heap(arr, i):\n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    if i < 0 or i >= len(arr):\n        return True\n    left = 2 * i + 1\n    right = 2 * i + 2\n    if left < len(arr) and arr[i] > arr[left]:\n        return False\n    if right < len(arr) and arr[i] > arr[right]:\n        return False\n    return check_min_heap(arr, left) and check_min_heap(arr, right)\n\n\n# Testing the function\narr = [3, 2, 1, 10, 8, 15, 12, 20, 9, 21, 6]\nprint(check_min_heap(arr, 0)) # True\narr = [3, 2, 10, 1, 8, 15, 12, 20, 9, 21, 6]\nprint(check_min_heap(arr, 0)) # False\n\n\n# If the function returns True, then the given array represents a min heap, otherwise False.\n",
        "generated_testcode": "assert check_min_heap([3, 2, 1, 4, 5, 1, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20] , 0) == True\n",
        "test": "assert check_min_heap([1, 2, 3, 4, 5, 6], 0) == True\nassert check_min_heap([2, 3, 4, 5, 10, 15], 0) == True\nassert check_min_heap([2, 10, 4, 5, 3, 15], 0) == False",
        "canonical_solution": "def check_min_heap(arr, i):\r\n    if 2 * i + 2 > len(arr):\r\n        return True\r\n    left_child = (arr[i] <= arr[2 * i + 1]) and check_min_heap(arr, 2 * i + 1)\r\n    right_child = (2 * i + 2 == len(arr)) or (arr[i] <= arr[2 * i + 2] \r\n                                      and check_min_heap(arr, 2 * i + 2))\r\n    return left_child and right_child"
    },
    {
        "number": 752,
        "prompt": "Write a function to find the nth jacobsthal number.\ndef jacobsthal_num(n): \n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return jacobsthal_num(n-1) + 4*jacobsthal_num(n-2)**2\n\n\n#Test cases\nprint(jacobsthal_num(0)) # Output: 0\nprint(jacobsthal_num(1)) # Output: 1\nprint(jacobsthal_num(2)) # Output: 4\nprint(jacobsthal_num(3)) # Output: 13\nprint(jacobsthal_num(5)) # Output: 42\nprint(jacobsthal_num(10)) # Output: 184756\n\n",
        "generated_testcode": "assert jacobsthal_num(0) == 0\n",
        "test": "assert jacobsthal_num(5) == 11\nassert jacobsthal_num(2) == 1\nassert jacobsthal_num(4) == 5",
        "canonical_solution": "def jacobsthal_num(n): \r\n\tdp = [0] * (n + 1) \r\n\tdp[0] = 0\r\n\tdp[1] = 1\r\n\tfor i in range(2, n+1): \r\n\t\tdp[i] = dp[i - 1] + 2 * dp[i - 2] \r\n\treturn dp[n]"
    },
    {
        "number": 753,
        "prompt": "Write a function to find minimum k records from tuple list.\ndef min_k(test_list, K):\n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    min_list = sorted(test_list, key=lambda x: x[1])[:K]\n    return min_list\n\n# Test cases\ntest_list = [(1, 2), (3, 1), (4, 5), (6, 4), (7, 3), (8, 7), (9, 2)]\nK = 3\nprint(min_k(test_list, K))\n\ntest_list = [(1, 2), (3, 1), (4, 5), (6, 4), (7, 3), (8, 7)]\nK = 2\nprint(min_k(test_list, K))\n\ntest_list = [(1, 2), (3, 1), (4, 5), (6, 4), (7, 3), (8, 7), (9, 2), (10, 8)]\nK = 4\nprint(min_k(test_list, K))\n\ntest_list = [(1, 2), (3, 1), (4, 5), (6, 4), (7, 3), (8, 7), (9, 2), (10, 8), (11, 1)]\nK = 5\nprint(min_k(test_list, K)) ",
        "generated_testcode": "assert min_k([(1, 2, 3), (4, 5, 6), (7, 8, 9), (10, 11, 12), (13, 14, 15), (16, 17, 18)], 3) == [(1, 2, 3), (4, 5, 6), (7, 8, 9)]\n",
        "test": "assert min_k([('Manjeet', 10), ('Akshat', 4), ('Akash', 2), ('Nikhil', 8)], 2) == [('Akash', 2), ('Akshat', 4)]\nassert min_k([('Sanjeev', 11), ('Angat', 5), ('Akash', 3), ('Nepin', 9)], 3) == [('Akash', 3), ('Angat', 5), ('Nepin', 9)]\nassert min_k([('tanmay', 14), ('Amer', 11), ('Ayesha', 9), ('SKD', 16)], 1) == [('Ayesha', 9)]",
        "canonical_solution": "def min_k(test_list, K):\r\n  res = sorted(test_list, key = lambda x: x[1])[:K]\r\n  return (res) "
    },
    {
        "number": 754,
        "prompt": "Write a function to find common index elements from three lists.\ndef extract_index_list(l1, l2, l3):\n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    result = []\n    for i in range(len(l1)):\n        if l1[i] == l2[i] == l3[i]:\n            result.append(i)\n    return result\n\n# Test cases\nl1 = [1, 2, 3, 4, 5, 6, 7]\nl2 = [1, 2, 3, 4, 5, 6, 8]\nl3 = [1, 2, 3, 4, 5, 6, 9]\nprint(extract_index_list(l1, l2, l3))  # Output: [0, 1, 2, 3]\n\nl1 = [1, 2, 3, 4, 5, 6, 7]\nl2 = [8, 9, 10, 11, 12, 13]\nl3 = [1, 2, 3, 4, 5, 6]\nprint(extract_index_list(l1, l2, l3))  # Output: []\n\nl1 = ['a', 'b', 'c', 'd', 'e']\nl2 = ['a', 'b', 'c', 'd', 'e', 'f']\nl3 = ['a', 'b', 'c', 'd', 'e', 'g']\nprint(extract_index_list(l1, l2, l3))  # Output: [0, 1",
        "generated_testcode": "assert extract_index_list([1, 2, 3, 4, 5], [2, 4, 6, 8], [2, 4, 10]) == [1, 2]\n",
        "test": "assert extract_index_list([1, 1, 3, 4, 5, 6, 7],[0, 1, 2, 3, 4, 5, 7],[0, 1, 2, 3, 4, 5, 7])==[1, 7]\nassert extract_index_list([1, 1, 3, 4, 5, 6, 7],[0, 1, 2, 3, 4, 6, 5],[0, 1, 2, 3, 4, 6, 7])==[1, 6]\nassert extract_index_list([1, 1, 3, 4, 6, 5, 6],[0, 1, 2, 3, 4, 5, 7],[0, 1, 2, 3, 4, 5, 7])==[1, 5]",
        "canonical_solution": "def extract_index_list(l1, l2, l3):\r\n    result = []\r\n    for m, n, o in zip(l1, l2, l3):\r\n        if (m == n == o):\r\n            result.append(m)\r\n    return result"
    },
    {
        "number": 755,
        "prompt": "Write a function to find the second smallest number in a list.\ndef second_smallest(numbers):\n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    # Sort the list\n    sorted_numbers = sorted(numbers)\n    # Initialize variables to store the smallest and second smallest number\n    smallest = sorted_numbers[0]\n    second_smallest = sorted_numbers[1]\n    # Loop through the sorted list\n    for number in sorted_numbers:\n        # If the current number is less than the smallest, update the smallest and second smallest variables\n        if number < smallest:\n            second_smallest = smallest\n            smallest = number\n        # If the current number is between smallest and second smallest, update second smallest\n        elif number != smallest:\n            second_smallest = number\n    return second_smallest\n\n\n# Test the function with some sample inputs\nprint(second_smallest([5, 3, 8, 1, 10, 9, 2]))  # Output: 3\nprint(second_smallest([10, 5, 8, 3, 1, 6]))  # Output: 5\nprint(second_smallest([10, 10, 10, 5, 5]))  # Output: 5\nprint(second_smallest([5, 3, 3, 3, 2]))    # Output: 2\nprint(second_smallest([1, 2, 3, 4, 5, 6, 7])) # Output: 2\n\n\n# Test the function with an empty list\nprint(second_smallest([]))  # Output: None (or throw an error)",
        "generated_testcode": "assert second_smallest([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 5\n",
        "test": "assert second_smallest([1, 2, -8, -2, 0, -2])==-2\nassert second_smallest([1, 1, -0.5, 0, 2, -2, -2])==-0.5\nassert second_smallest([2,2])==None",
        "canonical_solution": "def second_smallest(numbers):\r\n  if (len(numbers)<2):\r\n    return\r\n  if ((len(numbers)==2)  and (numbers[0] == numbers[1]) ):\r\n    return\r\n  dup_items = set()\r\n  uniq_items = []\r\n  for x in numbers:\r\n    if x not in dup_items:\r\n      uniq_items.append(x)\r\n      dup_items.add(x)\r\n  uniq_items.sort()    \r\n  return  uniq_items[1] "
    },
    {
        "number": 756,
        "prompt": "Write a function that matches a string that has an a followed by zero or one 'b'.\ndef text_match_zero_one(text):\n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": true,
        "answer": "    if text.startswith('a') and (text.endswith('b') or len(text) == 1):\n        return True\n    else:\n        return False\n\n# Test cases\nprint(text_match_zero_one('ab')) # True\nprint(text_match_zero_one('a')) # True\nprint(text_match_zero_one('abc')) # False\nprint(text_match_zero_one('abcd')) # False\nprint(text_match_zero_one('')) # False\nprint(text_match_zero_one('b')) # False\n",
        "generated_testcode": "assert text_match_zero_one(\"ab\") == True\n",
        "test": "assert text_match_zero_one(\"ac\")==('Found a match!')\nassert text_match_zero_one(\"dc\")==('Not matched!')\nassert text_match_zero_one(\"abbbba\")==('Found a match!')",
        "canonical_solution": "import re\r\ndef text_match_zero_one(text):\r\n        patterns = 'ab?'\r\n        if re.search(patterns,  text):\r\n                return 'Found a match!'\r\n        else:\r\n                return('Not matched!')"
    },
    {
        "number": 757,
        "prompt": "Write a function to count the pairs of reverse strings in the given string list.\ndef count_reverse_pairs(test_list):\n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j][::-1]:\n                count += 1\n    return count\n\n\n# Test the function with sample input\ntest_list = [\"aba\", \"abc\", \"cba\", \"hello\", \"world\", \"racecar\", \"za\", \"zb\", \"ab\", \"bc\", \"ac\"]\nprint(count_reverse_pairs(test_list))  # Output: 4\n\n\n# Test the function with other input\ntest_list = [\"abc\", \"cba\", \"hello\", \"world\", \"racecar\", \"za\", \"zb\", \"ab\", \"bc\", \"ac\"]\nprint(count_reverse_pairs(test_list))  # Output: 5\n\n\n# Test the function with another input\ntest_list = [\"abc\", \"cba\", \"hello\", \"world\", \"racecar\", \"za\", \"zb\", \"ab\", \"bac\"]\nprint(count_reverse_pairs(test_list))  # Output: 4\n\n\n# Test the function with empty list input\ntest_list = []\nprint(count_reverse_pairs(test_list))  # Output: 0\n\n\n# Test the function with list of single element\ntest_list = [\"abc\"]\nprint(count_reverse_pairs(test_list))  # Output: 0\n\n\n",
        "generated_testcode": "assert count_reverse_pairs([\"abc\", \"cba\", \"def\", \"fed\", \"ghi\", \"hig\", \"cba\", \"abc\"] == 2\n",
        "test": "assert count_reverse_pairs([\"julia\", \"best\", \"tseb\", \"for\", \"ailuj\"])== '2'\nassert count_reverse_pairs([\"geeks\", \"best\", \"for\", \"skeeg\"]) == '1'\nassert count_reverse_pairs([\"makes\", \"best\", \"sekam\", \"for\", \"rof\"]) == '2' ",
        "canonical_solution": "def count_reverse_pairs(test_list):\r\n  res = sum([1 for idx in range(0, len(test_list)) for idxn in range(idx, len( \r\n\ttest_list)) if test_list[idxn] == str(''.join(list(reversed(test_list[idx]))))]) \r\n  return str(res)"
    },
    {
        "number": 758,
        "prompt": "Write a function to count number of unique lists within a list.\ndef unique_sublists(list1):\n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    def check_unique(sublist):\n        sublist.sort()\n        unique = True\n        for i in range(len(sublist)):\n            for j in range(i+1, len(sublist)):\n                if sublist[i] == sublist[j]:\n                    return False\n        return True\n\n    count = 0\n    for i in range(len(list1):\n        for j in range(i+1, len(list1)):\n            sublist = list1[i:j+1]\n            if check_unique(sublist):\n                count += 1\n    return count\n\n\n# Example usage:\nlist1 = [[1, 2, 3], [1, 2, 3], [1, 2, 4], [2, 3, 4], [1, 3, 4], [1, 2, 3, 4]]\nprint(unique_sublists(list1)) # Output: 2\n\nlist2 = [[1, 2, 3], [1, 2, 3], [1, 2, 4], [2, 3, 4], [1, 3, 4], [1, 2, 3, 4], [1, 2, 3, 4]]\nprint(unique_sublists(list2)) # Output: 2\nlist3 = [[1, 2, 3], [1, 2, 3], [1, 2, 4], [2, ",
        "generated_testcode": "assert unique_sublists([[1,2,3,4]) == 1\n",
        "test": "assert unique_sublists([[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]] )=={(1, 3): 2, (5, 7): 2, (13, 15, 17): 1, (9, 11): 1}\nassert unique_sublists([['green', 'orange'], ['black'], ['green', 'orange'], ['white']])=={('green', 'orange'): 2, ('black',): 1, ('white',): 1}\nassert unique_sublists([[10, 20, 30, 40], [60, 70, 50, 50], [90, 100, 200]])=={(10, 20, 30, 40): 1, (60, 70, 50, 50): 1, (90, 100, 200): 1}",
        "canonical_solution": "def unique_sublists(list1):\r\n    result ={}\r\n    for l in  list1: \r\n        result.setdefault(tuple(l), list()).append(1) \r\n    for a, b in result.items(): \r\n        result[a] = sum(b)\r\n    return result"
    },
    {
        "number": 759,
        "prompt": "Write a function to check a decimal with a precision of 2.\ndef is_decimal(num):\n",
        "checkpoint": "7B",
        "pass": 3,
        "correct": true,
        "answer": "    decimal_num = round(float(num), 2)\n    return str(decimal_num) == str(num)\n\n\nprint(is_decimal(3.45))  # True\nprint(is_decimal(3.456))  # False\nprint(is_decimal(4.23456))  # False\nprint(is_decimal(2.0))  # True\nprint(is_decimal(2.00))  # True\nprint(is_decimal(2.000))  # True\nprint(is_decimal(2.20))  # False\nprint(is_decimal(2.2000))  # False\nprint(is_decimal(2.20000))  # True\n\n\n# Other solutions\n\ndef is_decimal(num):\n    return str(float(num) == round(num, 2))\n\n\ndef is_decimal(num):\n    return float(num) == round(num, 2)\n\n",
        "generated_testcode": "assert is_decimal(3.14) == True\n",
        "test": "assert is_decimal('123.11')==True\nassert is_decimal('e666.86')==False\nassert is_decimal('3.124587')==False",
        "canonical_solution": "def is_decimal(num):\r\n    import re\r\n    dnumre = re.compile(r\"\"\"^[0-9]+(\\.[0-9]{1,2})?$\"\"\")\r\n    result = dnumre.search(num)\r\n    return bool(result)"
    },
    {
        "number": 760,
        "prompt": "Write a python function to check whether an array contains only one distinct element or not.\ndef unique_Element(arr,n):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": true,
        "answer": "    if n==0 or n==1:\n        return True\n    for i in range(0,n):\n        for j in range(i+1,n):\n            if arr[i]==arr[j]:\n                return False\n    return True\n\n#Example:\narr = [1,2,3,4,5,6,7,8,9]\nn= len(arr)\nprint(unique_Element(arr,n))  # Output: True\n\narr = [1,2,3,4,5,5,6,7,8]\nn= len(arr)\nprint(unique_Element(arr,n)) # Output: False\n\n#Time Complexity: O(n)\n#Space Complexity: O(1)\n",
        "generated_testcode": "assert unique_Element([1,2,3,4,5,6,7,8,9],6) == True\n",
        "test": "assert unique_Element([1,1,1],3) == 'YES'\nassert unique_Element([1,2,1,2],4) == 'NO'\nassert unique_Element([1,2,3,4,5],5) == 'NO'",
        "canonical_solution": "def unique_Element(arr,n):\r\n    s = set(arr)\r\n    if (len(s) == 1):\r\n        return ('YES')\r\n    else:\r\n        return ('NO')"
    },
    {
        "number": 761,
        "prompt": "Write a function to caluclate arc length of an angle.\ndef arc_length(d,a):\n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    \"\"\"\n    Calculate the length of an arc of a circle with diameter d and angle a.\n    \"\"\"\n    return d*a\n\n# Test the function with some sample inputs\nprint(arc_length(10, 90)) # Output: 10*90 = 900\nprint(arc_length(7, 45)) # Output: 7*45 = 33.5\nprint(arc_length(12, 30)) # Output: 12*30 = 360\n\n\n# Write a function to calculate area of a rectangle\ndef rectangle_area(l,w):\n    \"\"\"\n    Calculate the area of a rectangle with length l and width w.\n    \"\"\"\n    return l*w\n\n# Test the function with some sample inputs\nprint(rectangle_area(5,4)) # Output: 5*4 = 20\nprint(rectangle_area(10,7)) # Output: 10*7 = 70\nprint(rectangle_area(3,6)) # Output: 3*6 = 18\n\n\n# Write a function to calculate the area of a triangle with base b and height h.\ndef triangle_area(b,h):\n    \"\"\"\n    Calculate the area of a triangle with base b and height h.\n    \"\"\"\n    return 0.5*b*h\n\n# Test the function with some sample inputs\nprint(triangle_area(10,5)) # Output: 0.5*1",
        "generated_testcode": "assert round(arc_length(1, 90), 2) == 0.5\n",
        "test": "assert arc_length(9,45)==3.5357142857142856\nassert arc_length(9,480)==None\nassert arc_length(5,270)==11.785714285714285",
        "canonical_solution": "def arc_length(d,a):\r\n    pi=22/7\r\n    if a >= 360:\r\n        return None\r\n    arclength = (pi*d) * (a/360)\r\n    return arclength"
    },
    {
        "number": 762,
        "prompt": "Write a function to check whether the given month number contains 30 days or not.\ndef check_monthnumber_number(monthnum3):\n",
        "checkpoint": "7B",
        "pass": 9,
        "correct": true,
        "answer": "    if monthnum3 == 1 or monthnum3 == 3 or monthnum3 == 5 or monthnum3 == 7 or monthnum3 == 8 or monthnum3 == 10 or monthnum3 == 12:\n        return True\n    elif monthnum3 == 4 or monthnum3 == 6 or monthnum3 == 9 or monthnum3 == 11:\n        return False\n    elif monthnum3 == 2:\n        return True\n    else:\n        return False\n\n\n# Test the function with different month numbers\nprint(check_monthnumber_number(3))\nprint(check_monthnumber_number(4))\nprint(check_monthnumber_number(8))\nprint(check_monthnumber_number(9))\nprint(check_monthnumber_number(11))\nprint(check_monthnumber_number(12))\nprint(check_monthnumber_number(50))",
        "generated_testcode": "assert check_monthnumber_number(2) == True\n",
        "test": "assert check_monthnumber_number(6)==True\nassert check_monthnumber_number(2)==False\nassert check_monthnumber_number(12)==False",
        "canonical_solution": "def check_monthnumber_number(monthnum3):\r\n  if(monthnum3==4 or monthnum3==6 or monthnum3==9 or monthnum3==11):\r\n    return True\r\n  else:\r\n    return False"
    },
    {
        "number": 763,
        "prompt": "Write a python function to find the minimum difference between any two elements in a given array.\ndef find_Min_Diff(arr,n): \n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": true,
        "answer": "    arr.sort() \n    min_diff = float('inf') \n    for i in range(n-1): \n        diff = arr[i+1] - arr[i] \n        if diff < min_diff: \n            min_diff = diff \n    return min_diff ",
        "generated_testcode": "assert find_Min_Diff([1, 3, 5, 8, 4, 2, 6, 7], 5) == 1\n",
        "test": "assert find_Min_Diff((1,5,3,19,18,25),6) == 1\nassert find_Min_Diff((4,3,2,6),4) == 1\nassert find_Min_Diff((30,5,20,9),4) == 4",
        "canonical_solution": "def find_Min_Diff(arr,n): \r\n    arr = sorted(arr) \r\n    diff = 10**20 \r\n    for i in range(n-1): \r\n        if arr[i+1] - arr[i] < diff: \r\n            diff = arr[i+1] - arr[i]  \r\n    return diff "
    },
    {
        "number": 764,
        "prompt": "Write a python function to count numeric values in a given string.\ndef number_ctr(str):\n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    count = 0\n    for i in str:\n        if i.isdigit():\n            count += 1\n    return count\n\n# Test the function\nprint(number_ctr(\"This string has 2 numeric values\"))\nprint(number_ctr(\"No numeric values\"))\nprint(number_ctr(\"There are 3 numbers in this string 123\"))\n",
        "generated_testcode": "assert number_ctr(\"The quick brown fox jumps over 100 lazy dogs\") == 1\n",
        "test": "assert number_ctr('program2bedone') == 1\nassert number_ctr('3wonders') ==1\nassert number_ctr('123') == 3",
        "canonical_solution": "def number_ctr(str):\r\n      number_ctr= 0\r\n      for i in range(len(str)):\r\n          if str[i] >= '0' and str[i] <= '9': number_ctr += 1     \r\n      return  number_ctr"
    },
    {
        "number": 765,
        "prompt": "Write a function to find nth polite number.\ndef is_polite(n): \n",
        "checkpoint": "7B",
        "pass": 4,
        "correct": true,
        "answer": "    def count_polite(n):\n        return n/2 + 1\n    def find_polite(n):\n        if n == 1:\n            return 1\n        else:\n            return (n+1) * count_polite(n-1)\n    polite_nums = []\n    polite_nums.append(1)\n    i = 2\n    while len(polite_nums) < n:\n        i += 1\n        polite_nums.append(find_polite(i))\n    return polite_nums[n-1]\n\n\ndef nth_polite(n):\n    return is_polite(n)\n\n\nprint(nth_polite(1)) # Output: 1\nprint(nth_polite(5)) # Output: 6\nprint(nth_polite(10)) # Output: 15\nprint(nth_polite(100)) # Output: 55\n",
        "generated_testcode": "assert is_polite(1) == True\n",
        "test": "assert is_polite(7) == 11\nassert is_polite(4) == 7\nassert is_polite(9) == 13",
        "canonical_solution": "import math \r\ndef is_polite(n): \r\n\tn = n + 1\r\n\treturn (int)(n+(math.log((n + math.log(n, 2)), 2))) "
    },
    {
        "number": 766,
        "prompt": "Write a function to iterate over all pairs of consecutive items in a given list.\ndef pair_wise(l1):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": true,
        "answer": "    \"\"\"\n    Args:\n    l1: List of integers\n    \n    Returns:\n    A list of tuples, where each tuple contains a pair of consecutive integers in the input list\n    \"\"\"\n    # Your code here\n    result = []\n    for i in range(len(l1)-1):\n        result.append((l1[i],l1[i+1]))\n    return result\n\n\n# Test cases\nprint(pair_wise([1, 2, 3, 4, 5]))  # [(1, 2), (2, 3), (3, 4), (4, 5)]\nprint(pair_wise([1, 2, 3]))    # [(1, 2), (2, 3)]\nprint(pair_wise([1]))        # []\nprint(pair_wise([]))       # []\n\n\n# Test case for empty input list\nassert pair_wise([1, 2, 3, 4, 5]) == [(1, 2), (2, 3), (3, 4), (4, 5)]\nassert pair_wise([1, 2]) == [(1, 2)]\nassert pair_wise([1]) == []\nassert pair_wise([]) == []",
        "generated_testcode": "assert pair_wise([1,2,3,4,5]) == [(1,2), (2,3), (3,4), (4,5)]\n",
        "test": "assert pair_wise([1,1,2,3,3,4,4,5])==[(1, 1), (1, 2), (2, 3), (3, 3), (3, 4), (4, 4), (4, 5)]\nassert pair_wise([1,5,7,9,10])==[(1, 5), (5, 7), (7, 9), (9, 10)]\nassert pair_wise([1,2,3,4,5,6,7,8,9,10])==[(1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 7), (7, 8), (8, 9), (9, 10)]",
        "canonical_solution": "def pair_wise(l1):\r\n    temp = []\r\n    for i in range(len(l1) - 1):\r\n        current_element, next_element = l1[i], l1[i + 1]\r\n        x = (current_element, next_element)\r\n        temp.append(x)\r\n    return temp"
    },
    {
        "number": 767,
        "prompt": "Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019.\ndef get_Pairs_Count(arr,n,sum):\n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    arr.sort()\n    count = 0\n    left = 0\n    right = 1\n    while(right<n):\n        current_sum = arr[left]+arr[right]\n        if current_sum == sum:\n            count += 1\n            left += 1\n            right += 1\n        elif current_sum < sum:\n            right += 1\n        else:\n            left += 1\n    return count\n\n# Example usage:\narr = [1, 2, 3, 4, 5, 6, 7, 8, 9]\nsum = 10\nprint(get_Pairs_Count(arr, len(arr), sum)) ",
        "generated_testcode": "assert get_Pairs_Count([1,2,3,4,5,6,7,8,9],9,18) == 2\n",
        "test": "assert get_Pairs_Count([1,1,1,1],4,2) == 6\nassert get_Pairs_Count([1,5,7,-1,5],5,6) == 3\nassert get_Pairs_Count([1,-2,3],3,1) == 1",
        "canonical_solution": "def get_Pairs_Count(arr,n,sum):\r\n    count = 0  \r\n    for i in range(0,n):\r\n        for j in range(i + 1,n):\r\n            if arr[i] + arr[j] == sum:\r\n                count += 1\r\n    return count"
    },
    {
        "number": 768,
        "prompt": "Write a python function to check for odd parity of a given number.\ndef check_Odd_Parity(x): \n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    # Using bitwise operator to check for odd parity\n    return (x & 1)\n\n# Test the function\nprint(check_Odd_Parity(9)) # Output: 1 (Odd parity)\nprint(check_Odd_Parity(10)) # Output: 0 (Even parity)\n",
        "generated_testcode": "assert check_Odd_Parity(1) == True\n",
        "test": "assert check_Odd_Parity(13) == True\nassert check_Odd_Parity(21) == True\nassert check_Odd_Parity(18) == False",
        "canonical_solution": "def check_Odd_Parity(x): \r\n    parity = 0\r\n    while (x != 0): \r\n        x = x & (x - 1) \r\n        parity += 1\r\n    if (parity % 2 == 1): \r\n        return True\r\n    else: \r\n        return False"
    },
    {
        "number": 769,
        "prompt": "Write a python function to get the difference between two lists.\ndef Diff(li1,li2):\n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    li1_set = set(li1)\n    li2_set = set(li2)\n    diff = list(li1_set.difference(li2_set))\n    return diff\n\n# Test the function\nli1 = [1,2,3,4,5,6,7,8,9]\nli2 = [4,5,6,7,8,9,10,11,12,13]\nprint(Diff(li1,li2)) # Output: [1, 2, 3]\n\n\nli1 = [1,2,3,4,5,6,7,8,9]\nli2 = [1,2,3,4,5,6,7,8,9,10]\nprint(Diff(li1,li2)) # Output: []\n\nli1 = [1,2,3,4,5,6,7,8,9]\nli2 = [10,11,12,13]\nprint(Diff(li1,li2)) # Output: [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\n\n# We can also use set() function to find the difference between two lists\ndef Diff(li1,li2):\n    return list(set(li1) - set(li2))\n\n# Test the function\nli1 = [1,2,3,4,5,6,7,8,9]\n",
        "generated_testcode": "assert Diff([1,2,3,4,5],[2,4,6,8]) == [1,3,5]\n",
        "test": "assert (Diff([10, 15, 20, 25, 30, 35, 40], [25, 40, 35])) == [10, 20, 30, 15]\nassert (Diff([1,2,3,4,5], [6,7,1])) == [2,3,4,5,6,7]\nassert (Diff([1,2,3], [6,7,1])) == [2,3,6,7]",
        "canonical_solution": "def Diff(li1,li2):\r\n    return (list(list(set(li1)-set(li2)) + list(set(li2)-set(li1))))\r\n "
    },
    {
        "number": 770,
        "prompt": "Write a python function to find the sum of fourth power of first n odd natural numbers.\ndef odd_Num_Sum(n) : \n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    sum = 0\n    for i in range(1,n+1) :\n        sum += (i*i*i*i*i)\n    return sum ",
        "generated_testcode": "assert odd_Num_Sum(5) == 225\n",
        "test": "assert odd_Num_Sum(2) == 82\nassert odd_Num_Sum(3) == 707\nassert odd_Num_Sum(4) == 3108",
        "canonical_solution": "def odd_Num_Sum(n) : \r\n    j = 0\r\n    sm = 0\r\n    for i in range(1,n + 1) : \r\n        j = (2*i-1) \r\n        sm = sm + (j*j*j*j)   \r\n    return sm "
    },
    {
        "number": 771,
        "prompt": "Write a function to check if the given expression is balanced or not.\ndef check_expression(exp):\n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    stack = []\n    for char in exp:\n        if char in ['(', '[', '{', '(']:\n            stack.append(char)\n        elif char in [')', ']', '}']:\n            if not stack:\n                return False\n            if char == ')' and stack[-1] == '(':\n                stack.pop()\n            elif char == ']' and stack[-1] == '[':\n                stack.pop()\n            elif char == '}' and stack[-1] == '{':\n                stack.pop()\n            else:\n                return False\n    return len(stack) == 0\n\n\n# Test cases\nprint(check_expression('{[()]}'))  # True\nprint(check_expression('{[(])'))  # False\nprint(check_expression('{[]}'))  # True\nprint(check_expression('({[)}'))  # False\nprint(check_expression('{[]}'))  # True\nprint(check_expression('()'))  # True\nprint(check_expression('{}'))  # True\nprint(check_expression('[]'))  # True\nprint(check_expression('({[()]})'))  # True\nprint(check_expression('{()}[]'))  # True\nprint(check_expression('({[()})'))  # False\nprint(check_expression('({[]})'))  # True\nprint(check_expression('{[)]}'))  # False\n\n\n# Time complexity: O(n)\n# Space complexity: O(n)",
        "generated_testcode": "assert check_expression(\"(a+b)+(c-d)\") == True\n",
        "test": "assert check_expression(\"{()}[{}]\") == True\nassert check_expression(\"{()}[{]\") == False\nassert check_expression(\"{()}[{}][]({})\") == True",
        "canonical_solution": "from collections import deque\r\ndef check_expression(exp):\r\n    if len(exp) & 1:\r\n        return False\r\n    stack = deque()\r\n    for ch in exp:\r\n        if ch == '(' or ch == '{' or ch == '[':\r\n            stack.append(ch)\r\n        if ch == ')' or ch == '}' or ch == ']':\r\n            if not stack:\r\n                return False\r\n            top = stack.pop()\r\n            if (top == '(' and ch != ')') or (top == '{' and ch != '}' or (top == '[' and ch != ']')):\r\n                return False\r\n    return not stack"
    },
    {
        "number": 772,
        "prompt": "Write a function to remove all the words with k length in the given string.\ndef remove_length(test_str, K):\n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    words = test_str.split()\n    result = []\n    for word in words:\n        if len(word) != K:\n            result.append(word)\n    return ' '.join(result)\n\n\n# Example usage:\nprint(remove_length('This is a test string 123 with some words of varying length', 5))\n# Output: 'This 123 with some length'\n\n",
        "generated_testcode": "assert remove_length(\"This is a test string\", 5) == \"This string\"\n",
        "test": "assert remove_length('The person is most value tet', 3) == 'person is most value'\nassert remove_length('If you told me about this ok', 4) == 'If you me about ok'\nassert remove_length('Forces of darkeness is come into the play', 4) == 'Forces of darkeness is the'",
        "canonical_solution": "def remove_length(test_str, K):\r\n  temp = test_str.split()\r\n  res = [ele for ele in temp if len(ele) != K]\r\n  res = ' '.join(res)\r\n  return (res) "
    },
    {
        "number": 773,
        "prompt": "Write a function to find the occurrence and position of the substrings within a string.\ndef occurance_substring(text,pattern):\n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    count = 0\n    positions = []\n    index = 0\n    while index < len(text):\n        if text.find(pattern, index) != -1:\n            count += 1\n            positions.append(text.find(pattern, index))\n            index = text.find(pattern, index) + 1\n        else:\n            break\n    return count, positions\n\n# Test the function\ntext = \"ABABCDABCDABD\"\npattern = \"ABCD\"\nprint(occurance_substring(text, pattern))\n\ntext = \"ABABDABCDABCD\"\npattern = \"ABCD\"\nprint(occurance_substring(text, pattern))\ntext = \"ABABDABCDABD\"\npattern = \"ABCD\"\nprint(occurance_substring(text, pattern))\ntext = \"ABABDABCDABD\"\npattern = \"BCD\"\nprint(occurance_substring(text, pattern))\ntext = \"ABABDABCDABD\"\npattern = \"ABA\"\nprint(occurance_substring(text, pattern))\ntext = \"ABABDABCDABD\"\npattern = \"AB\"\nprint(occurance_substring(text, pattern))\n\n",
        "generated_testcode": "assert occurance_substring(\"hello world\", \"l\") == [(1, 2), (3, 2), (4, 2), (7, 2)]\n",
        "test": "assert occurance_substring('python programming, python language','python')==('python', 0, 6)\nassert occurance_substring('python programming,programming language','programming')==('programming', 7, 18)\nassert occurance_substring('python programming,programming language','language')==('language', 31, 39)",
        "canonical_solution": "import re\r\ndef occurance_substring(text,pattern):\r\n for match in re.finditer(pattern, text):\r\n    s = match.start()\r\n    e = match.end()\r\n    return (text[s:e], s, e)"
    },
    {
        "number": 774,
        "prompt": "Write a function to check if the string is a valid email address or not using regex.\ndef check_email(email): \n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    import re\n    email_regex = r'^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$'\n    if re.match(email_regex, email):\n        return True\n    else:\n        return False\n\n# Test cases\nprint(check_email('example@example.com')) # True\nprint(check_email('john.doe@example.co.uk')) # True\nprint(check_email('jane_doe@yahoo.co.in')) # True\nprint(check_email('john.doe.123@gmail.com')) # True\nprint(check_email('example')) # False\nprint(check_email('john.doe@example.com.co.in')) # False\nprint(check_email('john.doe@gmail.co')) # False\nprint(check_email('john.doe.123@yahoo.com.co.in')) # False\n",
        "generated_testcode": "assert check_email(\"example@example.com\") == True\n",
        "test": "assert check_email(\"ankitrai326@gmail.com\") == 'Valid Email'\nassert check_email(\"my.ownsite@ourearth.org\") == 'Valid Email'\nassert check_email(\"ankitaoie326.com\") == 'Invalid Email'",
        "canonical_solution": "import re \r\nregex = '^[a-z0-9]+[\\._]?[a-z0-9]+[@]\\w+[.]\\w{2,3}$'\r\ndef check_email(email): \r\n\tif(re.search(regex,email)): \r\n\t\treturn (\"Valid Email\") \r\n\telse: \r\n\t\treturn (\"Invalid Email\") "
    },
    {
        "number": 775,
        "prompt": "Write a python function to check whether every odd index contains odd numbers of a given list.\ndef odd_position(nums):\n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    for i in range(1, len(nums), 2):\n        if nums[i] % 2 == 0:\n            return False\n    return True\n\n# Test the function with some inputs\nprint(odd_position([1,2,3,4,5,6,7,8,9,10])) # True\nprint(odd_position([2,4,6,8,10,12,14,16])) # False\nprint(odd_position([1,3,5,7,9,11,13,15])) # True\n\n# Write a python function to find the sum of the digits of a given number\ndef sum_of_digits(num):\n    sum = 0\n    while num > 0:\n        sum += num % 10\n        num //= 10\n    return sum\n\n# Test the function with some inputs\nprint(sum_of_digits(12345)) # 15\nprint(sum_of_digits(987654321)) # 25\nprint(sum_of_digits(10000000)) # 1\n\n# Write a python function to reverse a list of strings\ndef reverse_list_of_strings(lst):\n    return [word[::-1] for word in lst]\n\n# Test the function with some inputs\nprint(reverse_list_of_strings(['hello', 'world', 'python'])) # ['olleh', 'dn",
        "generated_testcode": "assert odd_position([1, 2, 3, 4, 5, 6, 7, 8, 9]) == True\n",
        "test": "assert odd_position([2,1,4,3,6,7,6,3]) == True\nassert odd_position([4,1,2]) == True\nassert odd_position([1,2,3]) == False",
        "canonical_solution": "def odd_position(nums):\r\n\treturn all(nums[i]%2==i%2 for i in range(len(nums)))"
    },
    {
        "number": 776,
        "prompt": "Write a function to count those characters which have vowels as their neighbors in the given string.\ndef count_vowels(test_str):\n",
        "checkpoint": "7B",
        "pass": 9,
        "correct": true,
        "answer": "    vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n    count = 0\n    for i in range(len(test_str)):\n        if i > 0 and i < len(test_str)-1:\n            if test_str[i] in vowels and test_str[i-1] in vowels or test_str[i+1] in vowels:\n                count += 1\n    return count\n\n# Test cases\nprint(count_vowels(\"Hello World\")) # Output: 1 (the 'l' has a vowel neighbor in \"Hell\" and \"Worl\")\nprint(count_vowels(\"Python\")) # Output: 2 (the 'n' has vowel neighbors in \"tho\" and \"on\")\nprint(count_vowels(\"Code\")) # Output: 1 (the 'o' has a vowel neighbor in \"de\")\nprint(count_vowels(\"Aeiou\")) # Output: 0 (no characters have vowels as their neighbors)\nprint(count_vowels(\"aeiou\")) # Output: 1 (the 'a' has a vowel neighbor in \"aei\")\nprint(count_vowels(\"Python\")) # Output: 2 (the 'n' has vowel neighbors in \"tho\" and \"on\")\nprint(count_vowels(\"Aeiou\")) # Output: 0 (no characters have",
        "generated_testcode": "assert count_vowels(\"hello\") == 1\n",
        "test": "assert count_vowels('bestinstareels') == 7\nassert count_vowels('partofthejourneyistheend') == 12\nassert count_vowels('amazonprime') == 5",
        "canonical_solution": "def count_vowels(test_str):\r\n  res = 0\r\n  vow_list = ['a', 'e', 'i', 'o', 'u']\r\n  for idx in range(1, len(test_str) - 1):\r\n    if test_str[idx] not in vow_list and (test_str[idx - 1] in vow_list or test_str[idx + 1] in vow_list):\r\n      res += 1\r\n  if test_str[0] not in vow_list and test_str[1] in vow_list:\r\n    res += 1\r\n  if test_str[-1] not in vow_list and test_str[-2] in vow_list:\r\n    res += 1\r\n  return (res) "
    },
    {
        "number": 777,
        "prompt": "Write a python function to find the sum of non-repeated elements in a given array.\ndef find_Sum(arr,n): \n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    # Create an empty dictionary to store the frequency of elements \n    freq = {} \n    # Traverse through the array \n    for i in range(n): \n        if arr[i] in freq: \n            freq[arr[i]] += 1\n        else: \n            freq[arr[i]] = 1\n    # Traverse through the array again to find the sum of non-repeated elements \n    sum = 0\n    for i in range(n): \n        if freq[arr[i]] == 1: \n            sum += arr[i] \n    return sum \n\n#Example:\narr = [1, 2, 3, 4, 2, 5, 6, 3, 7, 8, 9, 2, 9] \nn = len(arr) \nprint(find_Sum(arr, n)) ",
        "generated_testcode": "assert find_Sum([1,2,3,4,5,6,5,4,3,2,1],7) == 16\n",
        "test": "assert find_Sum([1,2,3,1,1,4,5,6],8) == 21\nassert find_Sum([1,10,9,4,2,10,10,45,4],9) == 71\nassert find_Sum([12,10,9,45,2,10,10,45,10],9) == 78",
        "canonical_solution": "def find_Sum(arr,n): \r\n    arr.sort() \r\n    sum = arr[0] \r\n    for i in range(0,n-1): \r\n        if (arr[i] != arr[i+1]): \r\n            sum = sum + arr[i+1]   \r\n    return sum"
    },
    {
        "number": 778,
        "prompt": "Write a function to pack consecutive duplicates of a given list elements into sublists.\ndef pack_consecutive_duplicates(list1):\n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    packed_list = []\n    temp = []\n    for i in range(len(list1)):\n        if i == 0:\n            temp.append(list1[i])\n        elif list1[i] == list1[i-1]:\n            temp.append(list1[i])\n        else:\n            packed_list.append(temp)\n            temp = [list1[i]]\n    packed_list.append(temp)\n    return packed_list\n\n\n#Test the function\nprint(pack_consecutive_duplicates([1,2,2,3,4,4,4,5,5,5,6,6,6,6,7,7,7,7,8,9]))\n# Output: [[1], [2, 2], [3], [4, 4], [5, 5], [6, 6, 6], [7, 7, 7], [8], [9]]\n\n\n#Write a function to unpack a list of sublists\ndef unpack_sublists(list1):\n    unpacked_list = []\n    for i in list1:\n        unpacked_list += i\n    return unpacked_list\n\n#Test the function\nprint(unpack_sublists([[1], [2, 2], [3], [4, 4], [5, 5], [6, 6, 6], [7, 7, 7], [8], [9]]))\n#",
        "generated_testcode": "assert pack_consecutive_duplicates([\"a\", \"a\", \"a\", \"a\", \"a\", \"b\", \"b\", \"b\", \"c\", \"c\", \"c\", \"c\", \"c\", \"a\", \"a\", \"a\"] == [[\"a\", [\"a\", \"a\", \"a\"], \"b\", [\"b\", \"b\"], [\"c\", \"c\", \"c\", \"c\"], \"a\", [\"a\", \"a\"]]\nprint(pack_consecutive_duplicates([\"a\", \"a\", \"a\", \"a\", \"b\", \"b\", \"b\", \"c\", \"c\", \"c\", \"c\", \"c\", \"a\", \"a\", \"a\"]))\n\n# Output: [[\"a\", [\"a\", \"a\", \"a\"], \"b\", [\"b\", \"b\"], [\"c\", \"c\", \"c\", \"c\"], \"a\", [\"a\", \"a\"]] ",
        "test": "assert pack_consecutive_duplicates([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4])==[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]\nassert pack_consecutive_duplicates([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10])==[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]\nassert pack_consecutive_duplicates(['a', 'a', 'b', 'c', 'd', 'd'])==[['a', 'a'], ['b'], ['c'], ['d', 'd']]",
        "canonical_solution": "from itertools import groupby\r\ndef pack_consecutive_duplicates(list1):\r\n    return [list(group) for key, group in groupby(list1)]"
    },
    {
        "number": 779,
        "prompt": "Write a function to count the number of unique lists within a list.\ndef unique_sublists(list1):\n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    def unique_helper(lst):\n        if len(lst) == 0:\n            return set()\n        elif len(lst) == 1:\n            return set([lst])\n        else:\n            sublists = unique_helper(lst[1:])\n            sublists.add(tuple(lst[1:])\n            return sublists.union(unique_helper(lst[1:])).union(unique_helper(lst[1:])\n                                                             .union(unique_helper(lst[2:])\n                                                             .union(unique_helper(lst[3:])\n                                                             .union(unique_helper(lst[4:])\n                                                             .union(unique_helper(lst[5:])\n                                                             .union(unique_helper(lst[6:])\n                                                             .union(unique_helper(lst[7:])\n                                                             .union(unique_helper(lst[8:])\n                                                             .union(unique_helper(lst[9:])\n                                                             .union(unique_helper(lst[10:])\n                                                             .union(unique_helper(lst[11:])\n                                                             .union(unique_helper(lst[12:])\n                                                             .union(unique_helper(lst[13:])\n                                                             .union(unique_helper(lst[14:])\n                                                             .union(unique_helper(lst[15:])\n                                ",
        "generated_testcode": "assert unique_sublists([[1,2,3]) == 1\n",
        "test": "assert unique_sublists([[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]])=={(1, 3): 2, (5, 7): 2, (13, 15, 17): 1, (9, 11): 1}\nassert unique_sublists([['green', 'orange'], ['black'], ['green', 'orange'], ['white']])=={('green', 'orange'): 2, ('black',): 1, ('white',): 1}\nassert unique_sublists([[1, 2], [3, 4], [4, 5], [6, 7]])=={(1, 2): 1, (3, 4): 1, (4, 5): 1, (6, 7): 1}",
        "canonical_solution": "def unique_sublists(list1):\r\n    result ={}\r\n    for l in list1: \r\n        result.setdefault(tuple(l), list()).append(1) \r\n    for a, b in result.items(): \r\n        result[a] = sum(b)\r\n    return result"
    },
    {
        "number": 780,
        "prompt": "Write a function to find the combinations of sums with tuples in the given tuple list.\ndef find_combinations(test_list):\n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    result = []\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            for k in range(j+1, len(test_list)):\n                result.append((test_list[i], test_list[j], test_list[k]))\n    return result\n\n# Example usage:\nprint(find_combinations([1,2,3,4,5]))\n# Output: [(1, 2, 3), (1, 2, 4), (1, 2, 5), (1, 3, 4), (1, 3, 5), (1, 4, 5), (2, 3, 4), (2, 3, 5), (2, 4, 5), (3, 4, 5)]\n\n# Test with a larger list\nprint(find_combinations([1,2,3,4,5,6,7,8,9,10]))\n# Output: [(1, 2, 3), (1, 2, 4), (1, 2, 5), (1, 2, 6), (1, 2, 7), (1, 2, 8), (1, 2, 9), (1, 2, 10), (1, 3, 4), (1, 3, 5), (1, 3, 6), (1, 3, 7), (",
        "generated_testcode": "assert find_combinations(()) == []\n",
        "test": "assert find_combinations([(2, 4), (6, 7), (5, 1), (6, 10)]) == [(8, 11), (7, 5), (8, 14), (11, 8), (12, 17), (11, 11)]\nassert find_combinations([(3, 5), (7, 8), (6, 2), (7, 11)]) == [(10, 13), (9, 7), (10, 16), (13, 10), (14, 19), (13, 13)]\nassert find_combinations([(4, 6), (8, 9), (7, 3), (8, 12)]) == [(12, 15), (11, 9), (12, 18), (15, 12), (16, 21), (15, 15)]",
        "canonical_solution": "from itertools import combinations \r\ndef find_combinations(test_list):\r\n  res = [(b1 + a1, b2 + a2) for (a1, a2), (b1, b2) in combinations(test_list, 2)]\r\n  return (res) "
    },
    {
        "number": 781,
        "prompt": "Write a python function to check whether the count of divisors is even or odd.\ndef count_Divisors(n) : \n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    # Find the count of divisors of the given number n\n    count = 0\n    for i in range(1, n+1) : \n        if n % i == 0 : \n            count += 1\n    return count\n\n# Write a separate function to check whether the count of divisors is even or odd\ndef check_even_or_odd(n) : \n    if count_Divisors(n) % 2 == 0 : \n        return \"Even\"\n    else : \n        return \"Odd\"\n\n# Call the function and print the result\nn = int(input(\"Enter a number: \"))\nprint(check_even_or_odd(n))\n\n# Example: \n# Input: \n# 12\n# Output: \n# Even\n# Explanation:\n# The divisors of 12 are 1, 2, 3, 4, 6, 12. The count of divisors is 4 which is even. ",
        "generated_testcode": "assert count_Divisors(12) == 4 # True\n",
        "test": "assert count_Divisors(10) == \"Even\"\nassert count_Divisors(100) == \"Odd\"\nassert count_Divisors(125) == \"Even\"",
        "canonical_solution": "import math \r\ndef count_Divisors(n) : \r\n    count = 0\r\n    for i in range(1, (int)(math.sqrt(n)) + 2) : \r\n        if (n % i == 0) : \r\n            if( n // i == i) : \r\n                count = count + 1\r\n            else : \r\n                count = count + 2\r\n    if (count % 2 == 0) : \r\n        return (\"Even\") \r\n    else : \r\n        return (\"Odd\") "
    },
    {
        "number": 782,
        "prompt": "Write a python function to find the sum of all odd length subarrays.\ndef Odd_Length_Sum(arr):\n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    n = len(arr)\n    odd_sum = 0\n    for i in range(n):\n        for j in range(i, n):\n            if j-i+1%2!=0:\n                odd_sum += sum(arr[i:j+1])\n    return odd_sum\n\n# Example usage:\narr = [1, 2, 3, 4, 5, 6, 7, 8, 9]\nprint(Odd_Length_Sum(arr)) # Output: 16 (because [1] + [3] + [5] + [7] + [9] is the only odd length subarrays) \narr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nprint(Odd_Length_Sum(arr)) # Output: 10 (because [1, 3, 5, 7] + [2, 4, 6, 8] + [4, 6, 8, 10] + [5, 7, 9] is the only odd length subarrays) ",
        "generated_testcode": "assert Odd_Length_Sum([1,2,3,4,5,6,7,8,9]) == 25\n",
        "test": "assert Odd_Length_Sum([1,2,4]) == 14\nassert Odd_Length_Sum([1,2,1,2]) == 15\nassert Odd_Length_Sum([1,7]) == 8",
        "canonical_solution": "def Odd_Length_Sum(arr):\r\n    Sum = 0\r\n    l = len(arr)\r\n    for i in range(l):\r\n        Sum += ((((i + 1) *(l - i) + 1) // 2) * arr[i])\r\n    return Sum"
    },
    {
        "number": 783,
        "prompt": "Write a function to convert rgb color to hsv color.\ndef rgb_to_hsv(r, g, b):\n",
        "checkpoint": "7B",
        "pass": 7,
        "correct": true,
        "answer": "    r, g, b = r/2555.0, g/2555.0, b/2555.0\n    cmax, cmin = max(r, g, b), min(r, g, b)\n    delta = cmax - cmin\n    if delta == 0:\n        h = 0\n    elif cmax == r:\n        h = ((g - b) / delta) % 6\n    elif cmax == g:\n        h = (b - r) / delta + 2\n    else:\n        h = (r - g) / delta + 4\n    h = round(h * 60)\n    if cmax == 0:\n        s = 0\n    else:\n        s = delta / cmax\n    v = cmax\n    return h, s, v\n\n\nprint(rgb_to_hsv(2555, 0, 0)) # Should return (0, 1.0, 1.0)\nprint(rgb_to_hsv(0, 2555, 0)) # Should return (120, 1.0, 1.0)\nprint(rgb_to_hsv(0, 0, 2555)) # Should return (240, 1.0, 1.0)\n\n\n# Test cases\nprint(rgb_to_hsv(2555, 165, 0)) # Should return (60, ",
        "generated_testcode": "assert rgb_to_hsv(2555, 0, 0) == (0, 1, 1)\n",
        "test": "assert rgb_to_hsv(255, 255, 255)==(0, 0.0, 100.0)\nassert rgb_to_hsv(0, 215, 0)==(120.0, 100.0, 84.31372549019608)\nassert rgb_to_hsv(10, 215, 110)==(149.26829268292684, 95.34883720930233, 84.31372549019608)",
        "canonical_solution": "def rgb_to_hsv(r, g, b):\r\n    r, g, b = r/255.0, g/255.0, b/255.0\r\n    mx = max(r, g, b)\r\n    mn = min(r, g, b)\r\n    df = mx-mn\r\n    if mx == mn:\r\n        h = 0\r\n    elif mx == r:\r\n        h = (60 * ((g-b)/df) + 360) % 360\r\n    elif mx == g:\r\n        h = (60 * ((b-r)/df) + 120) % 360\r\n    elif mx == b:\r\n        h = (60 * ((r-g)/df) + 240) % 360\r\n    if mx == 0:\r\n        s = 0\r\n    else:\r\n        s = (df/mx)*100\r\n    v = mx*100\r\n    return h, s, v"
    },
    {
        "number": 784,
        "prompt": "Write a function to find the product of first even and odd number of a given list.\ndef mul_even_odd(list1):\n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    even_product = 1\n    odd_product = 1\n    even_found = False\n    odd_found = False\n    for num in list1:\n        if num % 2 == 0:\n            even_product *= num\n            even_found = True\n        elif num % 2 != 0:\n            odd_product *= num\n            odd_found = True\n        if even_found and odd_found:\n            break\n    return even_product * odd_product\n\n#Test the function\nprint(mul_even_odd([2,3,4,5,6,7,8]))\nprint(mul_even_odd([1,3,5,7,9,11]))\nprint(mul_even_odd([2,4,6,8]))\nprint(mul_even_odd([1,2,3,4,5]))\nprint(mul_even_odd([7,8,9,10,11]))\n",
        "generated_testcode": "assert mul_even_odd([1, 2, 3, 4, 5, 6, 7, 8]) == 32\n",
        "test": "assert mul_even_odd([1,3,5,7,4,1,6,8])==4\nassert mul_even_odd([1,2,3,4,5,6,7,8,9,10])==2\nassert mul_even_odd([1,5,7,9,10])==10",
        "canonical_solution": "def mul_even_odd(list1):\r\n    first_even = next((el for el in list1 if el%2==0),-1)\r\n    first_odd = next((el for el in list1 if el%2!=0),-1)\r\n    return (first_even*first_odd)"
    },
    {
        "number": 785,
        "prompt": "Write a function to convert tuple string to integer tuple.\ndef tuple_str_int(test_str):\n",
        "checkpoint": "7B",
        "pass": 4,
        "correct": true,
        "answer": "    int_tuple = ()\n    test_str = test_str[1:-1]\n    tuple_values = test_str.split(',')\n    for value in tuple_values:\n        int_tuple += (int(value.strip()),)\n    return int_tuple\n\n\n# Test the function\ntest_str = \"(1, 2, 3, 4, 5, 6, 7)\"\nprint(tuple_str_int(test_str))\n# Output: (1, 2, 3, 4, 5, 6, 7)\n\n\ntest_str = \"(10, 20, 30, 40, 50, 60)\"\nprint(tuple_str_int(test_str))\n# Output: (10, 20, 30, 40, 50, 60) ",
        "generated_testcode": "assert tuple_str_int(\"(1,2,3,4,5)\") == (1,2,3,4,5)\n",
        "test": "assert tuple_str_int(\"(7, 8, 9)\") == (7, 8, 9)\nassert tuple_str_int(\"(1, 2, 3)\") == (1, 2, 3)\nassert tuple_str_int(\"(4, 5, 6)\") == (4, 5, 6)",
        "canonical_solution": "def tuple_str_int(test_str):\r\n  res = tuple(int(num) for num in test_str.replace('(', '').replace(')', '').replace('...', '').split(', '))\r\n  return (res) "
    },
    {
        "number": 786,
        "prompt": "Write a function to locate the right insertion point for a specified value in sorted order.\ndef right_insertion(a, x):\n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    left, right = 0, len(a) - 1\n    mid = (left + right) // 2\n    while left <= right:\n        mid = (left + right) // 2\n        if a[mid] == x:\n            return mid\n        elif a[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return right\n\na = [1, 3, 4, 5, 6, 7, 9, 10, 12, 13, 15, 20]\nprint(right_insertion(a, 10))  # Output: 4\nprint(right_insertion(a, 12))  # Output: 5\nprint(right_insertion(a, 0))  # Output: 0\nprint(right_insertion(a, 20))  # Output: 7\nprint(right_insertion(a, 14))  # Output: 7\nprint(right_insertion(a, 21))  # Output: 7\n",
        "generated_testcode": "assert right_insertion([1, 3, 4, 5, 6, 7, 8, 9], 4) == 2\n",
        "test": "assert right_insertion([1,2,4,5],6)==4\nassert right_insertion([1,2,4,5],3)==2\nassert right_insertion([1,2,4,5],7)==4",
        "canonical_solution": "import bisect\r\ndef right_insertion(a, x):\r\n    i = bisect.bisect_right(a, x)\r\n    return i"
    },
    {
        "number": 787,
        "prompt": "Write a function that matches a string that has an a followed by three 'b'.\ndef text_match_three(text):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": true,
        "answer": "    return 'a' in text and text.count('a') > 0 and text.count('b') == 3\n\n# Test cases\nprint(text_match_three('abababab')) # True\nprint(text_match_three('abaabab')) # False\nprint(text_match_three('aaabbbab')) # False\nprint(text_match_three('abbabba')) # False\nprint(text_match_three('abcababba')) # True\nprint(text_match_three('abbabba')) # True\nprint(text_match_three('bbbbbbb')) # False",
        "generated_testcode": "assert text_match_three(\"abbb\") == True\n",
        "test": "assert text_match_three(\"ac\")==('Not matched!')\nassert text_match_three(\"dc\")==('Not matched!')\nassert text_match_three(\"abbbba\")==('Found a match!')",
        "canonical_solution": "import re\r\ndef text_match_three(text):\r\n        patterns = 'ab{3}?'\r\n        if re.search(patterns,  text):\r\n                return 'Found a match!'\r\n        else:\r\n                return('Not matched!')"
    },
    {
        "number": 788,
        "prompt": "Write a function to create a new tuple from the given string and list.\ndef new_tuple(test_list, test_str):\n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    new_tuple = tuple(test_str)\n    return new_tuple\n\n# Test the function with the given test case\ntest_list = [1, 2, 3, 4, 5, 6]\ntest_str = \"hello\"\nprint(new_tuple(test_list, test_str))  # Output: ('h', 'e', 'l', 'l', 'o')",
        "generated_testcode": "assert new_tuple(['apple', 'banana', 'orange', 'grape'], 'hello') == ('h', 'e', 'l', 'o')\n",
        "test": "assert new_tuple([\"WEB\", \"is\"], \"best\") == ('WEB', 'is', 'best')\nassert new_tuple([\"We\", \"are\"], \"Developers\") == ('We', 'are', 'Developers')\nassert new_tuple([\"Part\", \"is\"], \"Wrong\") == ('Part', 'is', 'Wrong')",
        "canonical_solution": "def new_tuple(test_list, test_str):\r\n  res = tuple(test_list + [test_str])\r\n  return (res) "
    },
    {
        "number": 789,
        "prompt": "Write a function to calculate the perimeter of a regular polygon.\ndef perimeter_polygon(s,l):\n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    return s*l\n\n\n#Test the function with a sample input\nprint(perimeter_polygon(6,2)) #Output: 12\nprint(perimeter_polygon(10,4)) #Output: 20\nprint(perimeter_polygon(12,5)) #Output: 60\n\n#Note: s = number of sides, l = length of each side of the polygon.",
        "generated_testcode": "assert perimeter_polygon(3, 10) == 18\n",
        "test": "assert perimeter_polygon(4,20)==80\nassert perimeter_polygon(10,15)==150\nassert perimeter_polygon(9,7)==63",
        "canonical_solution": "from math import tan, pi\r\ndef perimeter_polygon(s,l):\r\n  perimeter = s*l\r\n  return perimeter"
    },
    {
        "number": 790,
        "prompt": "Write a python function to check whether every even index contains even numbers of a given list.\ndef even_position(nums):\n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    result = []\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2 == 0:\n            result.append(nums[i])\n    return result\n\nprint(even_position([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n# Output: [2, 6]\n\n# [1, 3, 5, 7, 9]\n# Output: []\n\n# [2, 4, 6, 8]\n# Output: [2, 4, 6]\n# [2, 4, 6, 8, 10]\n# Output: [2, 6, 8]\n# [1, 3, 5, 7, 9]\n# Output: []\n# [1, 3, 5, 7, 9, 10]\n# Output: [2, 4, 6, 8, 10] ",
        "generated_testcode": "assert even_position([1, 2, 3, 4, 5, 6, 7, 8]) == True\n",
        "test": "assert even_position([3,2,1]) == False\nassert even_position([1,2,3]) == False\nassert even_position([2,1,4]) == True",
        "canonical_solution": "def even_position(nums):\r\n\treturn all(nums[i]%2==i%2 for i in range(len(nums)))"
    },
    {
        "number": 791,
        "prompt": "Write a function to remove the nested record from the given tuple.\ndef remove_nested(test_tup):\n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    for i in range(len(test_tup)):\n        if type(test_tup[i]) == tuple:\n            test_tup[i] = remove_nested(test_tup[i])\n        else:\n            pass\n    return test_tup\n\n\ndef flatten_tuple(tup):\n    result = []\n    for item in tup:\n        if isinstance(item, tuple):\n            result.extend(flatten_tuple(item))\n        else:\n            result.append(item)\n    return result\n\n\n# function to remove the nested record\ndef remove_nested_tuple(test_tup):\n    return tuple(flatten_tuple(test_tup))\n\n\n# test the function\ntest_tup = ((1, (2, (3, 4), 5), 6, (7, (8, (9, 10)))), 11)\nprint(remove_nested_tuple(test_tup))\n# Output: (1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11)\n\n\ntest_tup = (((1, 2, (3, 4)), (5, 6, (7, (8, 9))) , (10, (11, 12, (13, (14, 15, 16)))), 17)\nprint(remove_nested_tuple(test_tup",
        "generated_testcode": "assert remove_nested((\"hello\", (1, 2, (3, 4, (5, 6))) == (\"hello\", 1, 2, 3, 4, 5, 6)\n",
        "test": "assert remove_nested((1, 5, 7, (4, 6), 10)) == (1, 5, 7, 10)\nassert remove_nested((2, 6, 8, (5, 7), 11)) == (2, 6, 8, 11)\nassert remove_nested((3, 7, 9, (6, 8), 12)) == (3, 7, 9, 12)",
        "canonical_solution": "def remove_nested(test_tup):\r\n  res = tuple()\r\n  for count, ele in enumerate(test_tup):\r\n    if not isinstance(ele, tuple):\r\n      res = res + (ele, )\r\n  return (res) "
    },
    {
        "number": 792,
        "prompt": "Write a python function to count the number of lists in a given number of lists.\ndef count_list(input_list): \n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    count = 0\n    for i in input_list:\n        if type(i) == list:\n            count += 1\n    return count\n\n#Example usage:\nmy_list = [1,2,3,4,[5,6,7],[8,[9,10],11],'a', 'b', 'c', [12,13]]\nprint(count_list(my_list)) # Output: 3\n\n\n#Another example:\nmy_list2 = [1,2,3,4,5,6,7,8,9]\nprint(count_list(my_list2)) # Output: 0\n\n#Another example:\nmy_list3 = [1,[2,3],4,[5,[6,7],8],9]\nprint(count_list(my_list3)) # Output: 2",
        "generated_testcode": "assert count_list([[1,2,3],[4,5,6],[7,8,9]) == 3\n",
        "test": "assert count_list([[1, 3], [5, 7], [9, 11], [13, 15, 17]]) == 4\nassert count_list([[1,2],[2,3],[4,5]]) == 3\nassert count_list([[1,0],[2,0]]) == 2",
        "canonical_solution": "def count_list(input_list): \r\n    return len(input_list)"
    },
    {
        "number": 793,
        "prompt": "Write a python function to find the last position of an element in a sorted array.\ndef last(arr,x,n):\n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    l = 0\n    r = n-1\n    while l <= r:\n        mid = (l+r) // 2\n        if arr[mid] == x:\n            if mid == n-1 or arr[mid+1] != x:\n                return mid\n            else:\n                l = mid + 1\n        elif arr[mid] < x:\n            l = mid + 1\n        else:\n            r = mid - 1\n    return -1\n\n#Example usage:\narr = [1,2,3,4,4,4,4,5,6,7,8,9,9,10]\nx = 4\nn = len(arr)\nprint(last(arr, x, n)) #Output: 4\n\narr = [1,2,4,4,5,6,7,8,9,9,10]\nx = 9\nn = len(arr)\nprint(last(arr, x, n)) #Output: 5\n\narr = [1,2,3,4,4,5,6,7,8,9]\nx = 10\nn = len(arr)\nprint(last(arr, x, n)) #Output: -1\n\n\n#Explanation:\n#In the first example, the last occurrence of 4 is at index 4, so the function returns 4.\n#In the second example, there is only one occurrence of 9, and it is at index 5. The function returns 5",
        "generated_testcode": "assert last([1,2,3,4,4,4,4,5,6,7,7,8,9], 4, 8) == 6\n",
        "test": "assert last([1,2,3],1,3) == 0\nassert last([1,1,1,2,3,4],1,6) == 2\nassert last([2,3,2,3,6,8,9],3,8) == 3",
        "canonical_solution": "def last(arr,x,n):\r\n    low = 0\r\n    high = n - 1\r\n    res = -1  \r\n    while (low <= high):\r\n        mid = (low + high) // 2 \r\n        if arr[mid] > x:\r\n            high = mid - 1\r\n        elif arr[mid] < x:\r\n            low = mid + 1\r\n        else:\r\n            res = mid\r\n            low = mid + 1\r\n    return res"
    },
    {
        "number": 794,
        "prompt": "Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\ndef text_starta_endb(text):\n",
        "checkpoint": "7B",
        "pass": 3,
        "correct": true,
        "answer": "    if text.startswith('a') and text.endswith('b'):\n        return True\n    else:\n        return False\n\nprint(text_starta_endb(\"ab\")) # True\nprint(text_starta_endb(\"abc\")) # False\nprint(text_starta_endb(\"aab\")) # False\nprint(text_starta_endb(\"aabb\")) # True\nprint(text_starta_endb(\"abcab\")) # False\nprint(text_starta_endb(\"aaab\")) # True\n",
        "generated_testcode": "assert text_starta_endb(\"ab\") == True\n",
        "test": "assert text_starta_endb(\"aabbbb\")==('Found a match!')\nassert text_starta_endb(\"aabAbbbc\")==('Not matched!')\nassert text_starta_endb(\"accddbbjjj\")==('Not matched!')",
        "canonical_solution": "import re\r\ndef text_starta_endb(text):\r\n        patterns = 'a.*?b$'\r\n        if re.search(patterns,  text):\r\n                return 'Found a match!'\r\n        else:\r\n                return('Not matched!')"
    },
    {
        "number": 795,
        "prompt": "Write a function to find the n - cheap price items from a given dataset using heap queue algorithm.\ndef cheap_items(items,n):\n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    import heapq\n    heap = []\n    for i in items:\n        heapq.heappush(heap, (i[1],i[0]) )  # push into heap (price,item)\n        if len(heap) > n:\n            heapq.heappop(heap)  # pop if more than n items in heap\n    return [i for i,_ in heap]\n\nitems = [(1,10), (2,20), (3,30), (4,40), (5,50), (6,60), (7,70), (8,80), (9,90), (10,100), (11,110)]\nn = 3\nprint(cheap_items(items,n)) # output: [11, 7, 9]\n\n# Time complexity: O(nlogn) ",
        "generated_testcode": "assert (cheap_items([(1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3) == [1, 2, 3])\n",
        "test": "assert cheap_items([{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}],1)==[{'name': 'Item-1', 'price': 101.1}]\nassert cheap_items([{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}],2)==[{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}]\nassert cheap_items([{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}, {'name': 'Item-3', 'price': 45.09},{'name': 'Item-4', 'price': 22.75}],1)==[{'name': 'Item-4', 'price': 22.75}]",
        "canonical_solution": "import heapq\r\ndef cheap_items(items,n):\r\n  cheap_items = heapq.nsmallest(n, items, key=lambda s: s['price'])\r\n  return cheap_items"
    },
    {
        "number": 796,
        "prompt": "Write function to find the sum of all items in the given dictionary.\ndef return_sum(dict):\n",
        "checkpoint": "7B",
        "pass": 3,
        "correct": true,
        "answer": "    total = 0\n    for key, value in dict.items():\n        total += value\n    return total\n\n\n# Test the function with a dictionary\nmy_dict = {\"apple\": 2, \"banana\": 5, \"orange\": 8, \"pear\": 3}\nprint(return_sum(my_dict)) # Output: 15\n\n\n# Test the function with another dictionary\nmy_dict2 = {\"apple\": 5, \"banana\": 10, \"orange\": 3, \"grape\": 7, \"mango\": 1}\nprint(return_sum(my_dict2)) # Output: 19",
        "generated_testcode": "assert return_sum({\"a\": 1, \"b\": 2, \"c\": 3, \"d\": 4}) == 10\n",
        "test": "assert return_sum({'a': 100, 'b':200, 'c':300}) == 600\nassert return_sum({'a': 25, 'b':18, 'c':45}) == 88\nassert return_sum({'a': 36, 'b':39, 'c':49}) == 124",
        "canonical_solution": "def return_sum(dict):\r\n  sum = 0\r\n  for i in dict.values():\r\n    sum = sum + i\r\n  return sum"
    },
    {
        "number": 797,
        "prompt": "Write a python function to find the sum of all odd natural numbers within the range l and r.\ndef sum_Odd(n): \n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    sum = 0\n    for i in range(n+1):\n        if i % 2 != 0:\n            sum += i\n    return sum ",
        "generated_testcode": "assert sum_Odd(1, 5) == 9\n",
        "test": "assert sum_in_Range(2,5) == 8\nassert sum_in_Range(5,7) == 12\nassert sum_in_Range(7,13) == 40",
        "canonical_solution": "def sum_Odd(n): \r\n    terms = (n + 1)//2\r\n    sum1 = terms * terms \r\n    return sum1  \r\ndef sum_in_Range(l,r): \r\n    return sum_Odd(r) - sum_Odd(l - 1)"
    },
    {
        "number": 798,
        "prompt": "Write a python function to find the sum of an array.\ndef _sum(arr):  \n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    if len(arr) == 1:  \n        return arr[0]  \n    else:  \n        return arr[0] + _sum(arr[1:])  \n  \n  \n# Test the function  \narr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]  \nprint(\"Sum of the array\", _sum(arr))  # Output: 555 ",
        "generated_testcode": "assert _sum([1,2,3,4,5]) == 15\n",
        "test": "assert _sum([1, 2, 3]) == 6\nassert _sum([15, 12, 13, 10]) == 50\nassert _sum([0, 1, 2]) == 3",
        "canonical_solution": "def _sum(arr):  \r\n    sum=0\r\n    for i in arr: \r\n        sum = sum + i      \r\n    return(sum)  "
    },
    {
        "number": 799,
        "prompt": "Write a python function to left rotate the bits of a given number.\ndef left_Rotate(n,d):   \n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    mask = 0b111111111111111111111111111  # Mask to get the last d bits\n    shift_mask = mask << (32 - d)   # Shift the mask to left by 32-d bits\n    return ((n << d) | (n >> (32 - d)) & mask) & mask\n\n# Test the function with the given input\nnum = 123456789\nd = 2\nprint(left_Rotate(num, d))\n\n\n# Output: 31972125443\n\n\n# The function works by first masking the last d bits to get the original number and then shifting it to the left by d bits and then shifting the original number to the right by 32 - d bits, \n# and then combining the two to get the left rotated number. ",
        "generated_testcode": "assert left_Rotate(10,2) == 4\n",
        "test": "assert left_Rotate(16,2) == 64\nassert left_Rotate(10,2) == 40\nassert left_Rotate(99,3) == 792",
        "canonical_solution": "INT_BITS = 32\r\ndef left_Rotate(n,d):   \r\n    return (n << d)|(n >> (INT_BITS - d))  "
    },
    {
        "number": 800,
        "prompt": "Write a function to remove all whitespaces from a string.\ndef remove_all_spaces(text):\n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    return \"\".join(text.split())\n\n\n# Test cases\nprint(remove_all_spaces(\"Hello world\")) # \"Helloworld\"\nprint(remove_all_spaces(\"   This is a test   \")) # \"Thisisatest\"\nprint(remove_all_spaces(\"   I love Python   \")) # \"IlovePython\"\nprint(remove_all_spaces(\"   I like Python!   \")) # \"IlikePython!\"",
        "generated_testcode": "assert remove_all_spaces(\"Hello, World!\") == \"HelloWorld!\"\n",
        "test": "assert remove_all_spaces('python  program')==('pythonprogram')\nassert remove_all_spaces('python   programming    language')==('pythonprogramminglanguage')\nassert remove_all_spaces('python                     program')==('pythonprogram')",
        "canonical_solution": "import re\r\ndef remove_all_spaces(text):\r\n return (re.sub(r'\\s+', '',text))"
    },
    {
        "number": 801,
        "prompt": "Write a python function to count the number of equal numbers from three given integers.\ndef test_three_equal(x,y,z):\n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    count = 0\n    if x == y:\n        count += 1\n    if x == z:\n        count += 1\n    if y == z:\n        count += 1\n    return count\n\n# Test the function\nprint(test_three_equal(3, 3, 5)) # Output: 2\nprint(test_three_equal(5, 6, 7)) # Output: 0\nprint(test_three_equal(10, 10, 10)) # Output: 3\nprint(test_three_equal(0, 1, 0)) # Output: 2",
        "generated_testcode": "assert test_three_equal(1,2,3) == 0\n",
        "test": "assert test_three_equal(1,1,1) == 3\nassert test_three_equal(-1,-2,-3) == 0\nassert test_three_equal(1,2,2) == 2",
        "canonical_solution": "def test_three_equal(x,y,z):\r\n  result= set([x,y,z])\r\n  if len(result)==3:\r\n    return 0\r\n  else:\r\n    return (4-len(result))"
    },
    {
        "number": 802,
        "prompt": "Write a python function to count the number of rotations required to generate a sorted array.\ndef count_Rotation(arr,n):   \n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    min_element = arr[0]\n    for i in range(1,n):\n        if arr[i] < min_element:\n            break\n        min_element = arr[i]\n    if i == n-1:\n        return 0\n    else:\n        return i\n\n#Example Input: \narr = [3, 4, 5, 1, 2, 6, 7, 8, 9, 10, 11]\nn = len(arr)\nprint(count_Rotation(arr, n)) ",
        "generated_testcode": "assert count_Rotation([4,5,6,7,1,2,3], 5) == 3\n",
        "test": "assert count_Rotation([3,2,1],3) == 1\nassert count_Rotation([4,5,1,2,3],5) == 2\nassert count_Rotation([7,8,9,1,2,3],6) == 3",
        "canonical_solution": "def count_Rotation(arr,n):   \r\n    for i in range (1,n): \r\n        if (arr[i] < arr[i - 1]): \r\n            return i  \r\n    return 0"
    },
    {
        "number": 803,
        "prompt": "Write a python function to check whether the given number is a perfect square or not.\ndef is_Perfect_Square(n) :\n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    x = int(n**0.5)\n    if x**2 == n :\n        return True\n    else :\n        return False\n\n#Test the function with sample inputs\nprint(is_Perfect_Square(4)) #True\nprint(is_Perfect_Square(16)) #True\nprint(is_Perfect_Square(9)) #False\nprint(is_Perfect_Square(25)) #True\nprint(is_Perfect_Square(10)) #False\nprint(is_Perfect_Square(27)) #False\nprint(is_Perfect_Square(28)) #True\n\n\n#Another way to check if a number is a perfect square is to use math.sqrt() function\nimport math\ndef is_Perfect_Square2(n) :\n    sqrt_n = math.sqrt(n)\n    return sqrt_n == int(sqrt_n)\n\n#Test the function with sample inputs\nprint(is_Perfect_Square2(4)) #True\nprint(is_Perfect_Square2(16)) #True\nprint(is_Perfect_Square2(9)) #False\nprint(is_Perfect_Square2(25)) #True\nprint(is_Perfect_Square2(10)) #False\nprint(is_Perfect_Square2(28)) #True\n\n#Another way to check if a number is a perfect square is to check if the square of",
        "generated_testcode": "assert is_Perfect_Square(16) == True\n",
        "test": "assert is_Perfect_Square(10) == False\nassert is_Perfect_Square(36) == True\nassert is_Perfect_Square(14) == False",
        "canonical_solution": "def is_Perfect_Square(n) :\r\n    i = 1\r\n    while (i * i<= n):\r\n        if ((n % i == 0) and (n / i == i)):\r\n            return True     \r\n        i = i + 1\r\n    return False"
    },
    {
        "number": 804,
        "prompt": "Write a python function to check whether the product of numbers is even or not.\ndef is_Product_Even(arr,n): \n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    #initialize a variable to store the product of numbers\n    product = 1\n    \n    #iterate through the list and multiply each element with product variable\n    for i in arr:\n        product *= i\n        \n    #check if the product is even or not\n    if product % 2 == 0:\n        return True\n    else:\n        return False\n\n#test the function\narr = [2,3,4,5,6]\nprint(is_Product_Even(arr,4))\n\narr = [1,2,3,4]\nprint(is_Product_Even(arr,3))\narr = [1,2,3,4,5]\nprint(is_Product_Even(arr,4))\n",
        "generated_testcode": "assert is_Product_Even([2,3,4],3) == True\n",
        "test": "assert is_Product_Even([1,2,3],3) == True\nassert is_Product_Even([1,2,1,4],4) == True\nassert is_Product_Even([1,1],2) == False",
        "canonical_solution": "def is_Product_Even(arr,n): \r\n    for i in range(0,n): \r\n        if ((arr[i] & 1) == 0): \r\n            return True\r\n    return False"
    },
    {
        "number": 805,
        "prompt": "Write a function to find the list in a list of lists whose sum of elements is the highest.\ndef max_sum_list(lists):\n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    max_sum = 0\n    max_list = []\n    for sublist in lists:\n        total = sum(sublist)\n        if total > max_sum:\n            max_sum = total\n            max_list = sublist\n    return max_list\n\n# Test the function\nlists = [[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12], [13, 14, 15]]\nprint(max_sum_list(lists)) # Output: [13, 14, 15]\n\n# Test the function with another list\nlists = [[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12, 13], [14, 15, 16, 17, 18], [19, 20, 21, 22, 23]]\nprint(max_sum_list(lists)) # Output: [19, 20, 21, 22, 23]",
        "generated_testcode": "assert max_sum_list([[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12]]) == [10, 11, 12]\n",
        "test": "assert max_sum_list([[1,2,3], [4,5,6], [10,11,12], [7,8,9]])==[10, 11, 12] \nassert max_sum_list([[3,2,1], [6,5,4], [12,11,10]])==[12,11,10] \nassert max_sum_list([[2,3,1]])==[2,3,1] ",
        "canonical_solution": "def max_sum_list(lists):\r\n return max(lists, key=sum)"
    },
    {
        "number": 806,
        "prompt": "Write a function to find maximum run of uppercase characters in the given string.\ndef max_run_uppercase(test_str):\n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    max_run = 0\n    current_run = 0\n    max_run_start = 0\n    max_run_end = 0\n    for i in range(len(test_str)):\n        if test_str[i].isupper():\n            current_run += 1\n        else:\n            if current_run > max_run:\n                max_run = current_run\n                max_run_start = i - current_run\n            current_run = 0\n    if current_run > max_run:\n        max_run = current_run\n        max_run_start = len(test_str) - current_run\n    return max_run, max_run_start\n\n\n# Test the function\ntest_str = \"AABBCDDEEEFGHHHIIJJKKLMN\"\nprint(max_run_uppercase(test_str)) # Output: (5, 8)\n\ntest_str = \"aBcDeFgHiJkLmNoPqRsTuVwX\"\nprint(max_run_uppercase(test_str)) # Output: (4, 0)\ntest_str = \"aBcDdEfGhIjKlMnOpQrStuVwX\"\nprint(max_run_uppercase(test_str)) # Output: (1, 1)\ntest_str = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\nprint(max_",
        "generated_testcode": "assert max_run_uppercase(\"HELLO WORLD\") == 1\n",
        "test": "assert max_run_uppercase('GeMKSForGERksISBESt') == 5\nassert max_run_uppercase('PrECIOusMOVemENTSYT') == 6\nassert max_run_uppercase('GooGLEFluTTER') == 4",
        "canonical_solution": "def max_run_uppercase(test_str):\r\n  cnt = 0\r\n  res = 0\r\n  for idx in range(0, len(test_str)):\r\n    if test_str[idx].isupper():\r\n      cnt += 1\r\n    else:\r\n      res = cnt\r\n      cnt = 0\r\n  if test_str[len(test_str) - 1].isupper():\r\n    res = cnt\r\n  return (res)"
    },
    {
        "number": 807,
        "prompt": "Write a python function to find the first odd number in a given list of numbers.\ndef first_odd(nums):\n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    for num in nums:\n        if num % 2 == 1:\n            return num\n    return None\n\n# Test the function\nprint(first_odd([2, 4, 6, 8, 1, 9, 0])) # Output: 1\nprint(first_odd([2, 4, 6, 8, 10])) # Output: None\nprint(first_odd([1, 3, 5, 7, 9])) # Output: 1\nprint(first_odd([2, 4, 6, 8, 10])) # Output: None\nprint(first_odd([3, 5, 7, 9, 11])) # Output: 3\n",
        "generated_testcode": "assert first_odd([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 1\n",
        "test": "assert first_odd([1,3,5]) == 1\nassert first_odd([2,4,1,3]) == 1\nassert first_odd ([8,9,1]) == 9",
        "canonical_solution": "def first_odd(nums):\r\n  first_odd = next((el for el in nums if el%2!=0),-1)\r\n  return first_odd"
    },
    {
        "number": 808,
        "prompt": "Write a function to check if the given tuples contain the k or not.\ndef check_K(test_tup, K):\n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    for i in range(len(test_tup)):\n        if test_tup[i] == K:\n            return True\n    return False\n\n# Testing the function\ntest_tup = (1, 2, 3, 4, 5, 6)\nK = 4\nprint(check_K(test_tup, K)) # Output: True\n\nK = 10\nprint(check_K(test_tup, K)) # Output: False\n\ntest_tup = (10, 20, 30, 40, 50)\nK = 20\nprint(check_K(test_tup, K)) # Output: True\n\nK = 15\nprint(check_K(test_tup, K)) # Output: False\n",
        "generated_testcode": "assert check_K(((('a', 'b', 'c', 'd'), 'k') == True)\n",
        "test": "assert check_K((10, 4, 5, 6, 8), 6) == True\nassert check_K((1, 2, 3, 4, 5, 6), 7) == False\nassert check_K((7, 8, 9, 44, 11, 12), 11) == True",
        "canonical_solution": "def check_K(test_tup, K):\r\n  res = False\r\n  for ele in test_tup:\r\n    if ele == K:\r\n      res = True\r\n      break\r\n  return (res) "
    },
    {
        "number": 809,
        "prompt": "Write a function to check if each element of second tuple is smaller than its corresponding index in first tuple.\ndef check_smaller(test_tup1, test_tup2):\n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n    return True\n\n\n# Test cases\nprint(check_smaller((1, 2, 3, 4, 5, 6), (1, 2, 3, 4, 5))) # True\nprint(check_smaller((1, 2, 3, 4, 6), (1, 2, 3, 4, 5))) # False\nprint(check_smaller((1, 2, 3, 4, 5), (1, 2, 3, 4, 5)) # True\nprint(check_smaller((1, 2, 3, 4, 5), (1, 2, 3, 4, 6)) # False\nprint(check_smaller((1, 2, 3, 4, 5), (1, 2, 4, 5, 6)) # False\nprint(check_smaller((1, 2, 3, 4, 5), (1, 2, 3, 4, 3)) # False\nprint(check_smaller((1, 2, 3, 4, 5), (1, 2, 3, 4, 4)) # False\nprint(check_smaller((1, 2, 3, 4, 5), (1, ",
        "generated_testcode": "assert check_smaller((1, 2, 3, 4, 5, 6), (0, 1, 2, 3, 4)) == (True, True, True, True, True)\n",
        "test": "assert check_smaller((1, 2, 3), (2, 3, 4)) == False\nassert check_smaller((4, 5, 6), (3, 4, 5)) == True\nassert check_smaller((11, 12, 13), (10, 11, 12)) == True",
        "canonical_solution": "def check_smaller(test_tup1, test_tup2):\r\n  res = all(x > y for x, y in zip(test_tup1, test_tup2))\r\n  return (res) "
    },
    {
        "number": 810,
        "prompt": "Write a function to iterate over elements repeating each as many times as its count.\ndef count_variable(a,b,c,d):\n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    lst = []\n    for i in range(a):\n        lst.append(a)\n    for i in range(b):\n        lst.append(b)\n    for i in range(c):\n        lst.append(c)\n    for i in range(d):\n        lst.append(d)\n    return lst\n\n\nprint(count_variable(1,2,3,4))\n# Expected Output: [1, 1, 1, 1, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4]\n# Your Output: [1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4]\n",
        "generated_testcode": "assert count_variable(1,2,3) == [1,2,2,3]\n",
        "test": "assert count_variable(4,2,0,-2)==['p', 'p', 'p', 'p', 'q', 'q'] \nassert count_variable(0,1,2,3)==['q', 'r', 'r', 's', 's', 's'] \nassert count_variable(11,15,12,23)==['p', 'p', 'p', 'p', 'p', 'p', 'p', 'p', 'p', 'p', 'p', 'q', 'q', 'q', 'q', 'q', 'q', 'q', 'q', 'q', 'q', 'q', 'q', 'q', 'q', 'q', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's']",
        "canonical_solution": "from collections import Counter\r\ndef count_variable(a,b,c,d):\r\n  c = Counter(p=a, q=b, r=c, s=d)\r\n  return list(c.elements())"
    },
    {
        "number": 811,
        "prompt": "Write a function to check if two lists of tuples are identical or not.\ndef check_identical(test_list1, test_list2):\n",
        "checkpoint": "7B",
        "pass": 6,
        "correct": true,
        "answer": "    if len(test_list1) != len(test_list2):\n        return False\n    for i in range(len(test_list1)):\n        if test_list1[i] != test_list2[i]:\n            return False\n    return True\n\n\n# Test case 1\ntest_list1 = [(1, 2), (3, 4), (5, 6)]\ntest_list2 = [(1, 2), (3, 4), (5, 6)]\nprint(check_identical(test_list1, test_list2)) # Output: True\n\n\n# Test case 2\ntest_list1 = [(1, 2), (3, 4), (5, 6)]\ntest_list2 = [(1, 2), (3, 4), (5, 7)]\nprint(check_identical(test_list1, test_list2)) # Output: False\n\n\n# Test case 3\ntest_list1 = [(1, 2), (3, 4), (5, 6)]\ntest_list2 = [(1, 2), (3, 4)]\nprint(check_identical(test_list1, test_list2)) # Output: False\n\n\n# Test case 4\ntest_list1 = [(1, 2), (3, 4), (5, 6)]\ntest_list2 = [(1, 2), (3, 4), (5, 6, 7)]\nprint",
        "generated_testcode": "assert check_identical([(1,2,3), (4,5,6), (7,8,9)], [(1,2,3), (4,5,6), (7,8,9)]), True\n",
        "test": "assert check_identical([(10, 4), (2, 5)], [(10, 4), (2, 5)]) == True\nassert check_identical([(1, 2), (3, 7)], [(12, 14), (12, 45)]) == False\nassert check_identical([(2, 14), (12, 25)], [(2, 14), (12, 25)]) == True",
        "canonical_solution": "def check_identical(test_list1, test_list2):\r\n  res = test_list1 == test_list2\r\n  return (res) "
    },
    {
        "number": 812,
        "prompt": "Write a function to abbreviate 'road' as 'rd.' in a given string.\ndef road_rd(street):\n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    if 'road' in street:\n        street = street.replace('road', 'rd.')\n    return street\n\n# Test the function\nprint(road_rd(\"My street is called road\")) # should return \"My street is called rd.\"\nprint(road_rd(\"I live on Main road\")) # should return \"I live on Main rd.\"\nprint(road_rd(\"The road is long\")) # should return \"The rd. is long\"\nprint(road_rd(\"The road runs through the city\")) # should return \"The rd. runs through the city\"\nprint(road_rd(\"The road is the best road\")) # should return \"The rd. is the best rd.\"\n\n\n# The function should not abbreviate if the word 'road' is part of a longer word.\nprint(road_rd(\"I am a roaddog\")) # should return \"I am a roaddog\"\nprint(road_rd(\"The roadrunner runs through the road\")) # should return \"The roadrunner runs through the road\"\nprint(road_rd(\"There is a road warrior\")) # should return \"There is a road warrior\"\n\n# The function should work for any string input.\nprint(road_rd(\"Hello world!\")) # should return \"Hello world!\"\nprint(road_rd(\"\")) # should return \"\"",
        "generated_testcode": "assert road_rd(\"road\") == \"rd.\"\n",
        "test": "assert road_rd(\"ravipadu Road\")==('ravipadu Rd.')\nassert road_rd(\"palnadu Road\")==('palnadu Rd.')\nassert road_rd(\"eshwar enclave Road\")==('eshwar enclave Rd.')",
        "canonical_solution": "import re\r\ndef road_rd(street):\r\n  return (re.sub('Road$', 'Rd.', street))"
    },
    {
        "number": 813,
        "prompt": "Write a function to find length of the string.\ndef string_length(str1):\n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    count = 0\n    for i in str1:\n        count += 1\n    return count\n\n#test the function\nprint(string_length(\"Hello World\")) #Output: 10\nprint(string_length(\"Python\"))  #Output: 6\nprint(string_length(\"Code\"))   #Output: 4\n\n\n\n#Write a function to print the vowels of a string\ndef vowels_of_string(str1):\n    vowels = \"AEIOUaeiou\"\n    vowels_list = []\n    for i in str1:\n        if i in vowels:\n            vowels_list.append(i)\n    return vowels_list\n\n#test the function\nprint(vowels_of_string(\"Hello World\")) #Output: ['H', 'O', 'o']\nprint(vowels_of_string(\"Python\")) #Output: ['P', 'y', 'o']\nprint(vowels_of_string(\"Code\")) #Output: ['C', 'e']\n\n\n#Write a function to check if a string is palindrome or not\ndef is_palindrome(str1):\n    return str1 == str1[::-1]\n#test the function\nprint(is_palindrome(\"racecar\")) #True\nprint(is_palindrome(\"race\")) #False\n\n\n#Write a function to count the frequency of each character in a string\ndef count_chars(str1):\n    char_f",
        "generated_testcode": "assert string_length(\"hello\") == 5\n",
        "test": "assert string_length('python')==6\nassert string_length('program')==7\nassert string_length('language')==8",
        "canonical_solution": "def string_length(str1):\r\n    count = 0\r\n    for char in str1:\r\n        count += 1\r\n    return count"
    },
    {
        "number": 814,
        "prompt": "Write a function to find the area of a rombus.\ndef rombus_area(p,q):\n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    return (p * q) / 2\n\n# Test the function with some values\nprint(rombus_area(5,10)) # Output: 25.0\nprint(rombus_area(10,5)) # Output: 25.0\nprint(rombus_area(3,7)) # Output: 10.5\nprint(rombus_area(1,2)) # Output: 0.5\nprint(rombus_area(10,10)) # Output: 50.0\n",
        "generated_testcode": "assert rombus_area(5, 7) == 21\n",
        "test": "assert rombus_area(10,20)==100\nassert rombus_area(10,5)==25\nassert rombus_area(4,2)==4",
        "canonical_solution": "def rombus_area(p,q):\r\n  area=(p*q)/2\r\n  return area"
    },
    {
        "number": 815,
        "prompt": "Write a function to sort the given array without using any sorting algorithm. the given array consists of only 0, 1, and 2.\ndef sort_by_dnf(arr, n):\n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    zero = []\n    one = []\n    two = []\n    for i in arr:\n        if i == 0:\n            zero.append(i)\n        elif i == 1:\n            one.append(i)\n        else:\n            two.append(i)\n    return zero + one + two\n\n# time complexity O(n)\n# space complexity O(1)\n\n\n# driver code\narr = [0, 2, 1, 0, 1, 2, 2, 0, 1, 0, 1]\nn = len(arr)\nprint(sort_by_dnf(arr, n)) ",
        "generated_testcode": "assert sort_by_dnf([0, 1, 2, 0, 1, 2, 0, 1, 2], 6) == [0, 0, 0, 1, 1, 1, 2, 2]\n",
        "test": "assert sort_by_dnf([1,2,0,1,0,1,2,1,1], 9) == [0, 0, 1, 1, 1, 1, 1, 2, 2]\nassert sort_by_dnf([1,0,0,1,2,1,2,2,1,0], 10) == [0, 0, 0, 1, 1, 1, 1, 2, 2, 2]\nassert sort_by_dnf([2,2,1,0,0,0,1,1,2,1], 10) == [0, 0, 0, 1, 1, 1, 1, 2, 2, 2]",
        "canonical_solution": "def sort_by_dnf(arr, n):\r\n  low=0\r\n  mid=0\r\n  high=n-1\r\n  while mid <= high:\r\n    if arr[mid] == 0:\r\n      arr[low], arr[mid] = arr[mid], arr[low]\r\n      low = low + 1\r\n      mid = mid + 1\r\n    elif arr[mid] == 1:\r\n      mid = mid + 1\r\n    else:\r\n      arr[mid], arr[high] = arr[high], arr[mid]\r\n      high = high - 1\r\n  return arr"
    },
    {
        "number": 816,
        "prompt": "Write a function to clear the values of the given tuples.\ndef clear_tuple(test_tup):\n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    result = ()\n    for i in test_tup:\n        result += (0,)\n    return result\n\n# Test the function with the sample input\nt1 = (1, 2, 3, 4, 5, 6, 7, 8)\nprint(clear_tuple(t1))  # Output: (0, 0, 0, 0, 0, 0, 0)\n\nt2 = (10, 20, 30, 40, 50, 60, 70)\nprint(clear_tuple(t2))  # Output: (0, 0, 0, 0, 0, 0, 0)\n\nt3 = (100, 200, 300, 400, 500, 600)\nprint(clear_tuple(t3))  # Output: (0, 0, 0, 0, 0, 0)\n\nt4 = (1000, 2000, 300, 400, 500)\nprint(clear_tuple(t4))  # Output: (0, 0, 0, 0, 0, 0)\n\n\n# The function takes a tuple as input and returns a new tuple with all values replaced with 0. ",
        "generated_testcode": "assert clear_tuple((1, 2, 3, 4, 5) == ())\n",
        "test": "assert clear_tuple((1, 5, 3, 6, 8)) == ()\nassert clear_tuple((2, 1, 4 ,5 ,6)) == ()\nassert clear_tuple((3, 2, 5, 6, 8)) == ()",
        "canonical_solution": "def clear_tuple(test_tup):\r\n  temp = list(test_tup)\r\n  temp.clear()\r\n  test_tup = tuple(temp)\r\n  return (test_tup) "
    },
    {
        "number": 817,
        "prompt": "Write a function to find numbers divisible by m or n from a list of numbers using lambda function.\ndef div_of_nums(nums,m,n):\n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    lambda_func = lambda x: list(filter(lambda y: y%m==0 or y%n==0, nums))\n    return lambda_func(nums)\n\n# Example usage\nnums = [1,2,3,4,5,6,7,8,9]\nprint(div_of_nums(nums,2,3)) #[2, 3, 4, 6, 8]\nprint(div_of_nums(nums,5,6)) #[5, 6]\n\n# Test cases\ndef test_div_of_nums():\n    assert div_of_nums([1,2,3,4,5,6,7,8,9], 2, 3) == [2, 3, 4, 6, 8]\n    assert div_of_nums([1,2,3,4,5,6,7,8,9], 5, 6) == [5, 6]\n    assert div_of_nums([1,2,3,4,5,6,7,8,9], 3, 4) == []\n    assert div_of_nums([1,2,3,4,5,6,7,8,9], 7, 5) == []\n    assert div_of_nums([1,2,3,4,5,6,7,8,9], 7, 8) == [1, 7]\n    assert div_of_",
        "generated_testcode": "assert div_of_nums(range(1,20), 3, 5) == [3, 6, 9, 12, 15]\n",
        "test": "assert div_of_nums([19, 65, 57, 39, 152, 639, 121, 44, 90, 190],19,13)==[19, 65, 57, 39, 152, 190]\nassert div_of_nums([1, 2, 3, 5, 7, 8, 10],2,5)==[2, 5, 8, 10]\nassert div_of_nums([10,15,14,13,18,12,20],10,5)==[10, 15, 20]",
        "canonical_solution": "def div_of_nums(nums,m,n):\r\n result = list(filter(lambda x: (x % m == 0 or x % n == 0), nums)) \r\n return result"
    },
    {
        "number": 818,
        "prompt": "Write a python function to count lower case letters in a given string.\ndef lower_ctr(str):\n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    count = 0\n    for i in range(len(str)):\n        if str[i].islower():\n            count += 1\n    return count\n\n# Test the function with an example string\nprint(lower_ctr(\"hello world\")) # Output: 2\nprint(lower_ctr(\"Python is awesome!\")) # Output: 5\nprint(lower_ctr(\"I love programming\")) # Output: 7\n",
        "generated_testcode": "assert lower_ctr(\"Hello World\") == 2\n",
        "test": "assert lower_ctr('abc') == 3\nassert lower_ctr('string') == 6\nassert lower_ctr('Python') == 5",
        "canonical_solution": "def lower_ctr(str):\r\n      lower_ctr= 0\r\n      for i in range(len(str)):\r\n          if str[i] >= 'a' and str[i] <= 'z': lower_ctr += 1     \r\n      return  lower_ctr"
    },
    {
        "number": 819,
        "prompt": "Write a function to count the frequency of consecutive duplicate elements in a given list of numbers.\ndef count_duplic(lists):\n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    count = 0\n    prev = lists[0]\n    for i in range(1, len(lists)):\n        if lists[i] == prev:\n            count += 1\n        else:\n            print(count, prev)\n            count = 1\n        prev = lists[i]\n    print(count, prev)\n\n# Test the function\ncount_duplic([1,2,3,4,5,5,5,6,7,7,7,7,7,8,9,9]) # Output: 1 1 2 2 2 3 7 7 3 1 8 1 9 1\n# Explanation: 1 and 2 have only one consecutive occurrence, 3 has no consecutive occurrences, 5 and 6 have two consecutive occurrences, 7 has four consecutive occurrences, and 8 and 9 have one and one consecutive occurrence, respectively.\n",
        "generated_testcode": "assert count_duplic([1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9] == 9\n",
        "test": "assert count_duplic([1,2,2,2,4,4,4,5,5,5,5])==([1, 2, 4, 5], [1, 3, 3, 4])\nassert count_duplic([2,2,3,1,2,6,7,9])==([2, 3, 1, 2, 6, 7, 9], [2, 1, 1, 1, 1, 1, 1])\nassert count_duplic([2,1,5,6,8,3,4,9,10,11,8,12])==([2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])",
        "canonical_solution": "def count_duplic(lists):\r\n    element = []\r\n    frequency = []\r\n    if not lists:\r\n        return element\r\n    running_count = 1\r\n    for i in range(len(lists)-1):\r\n        if lists[i] == lists[i+1]:\r\n            running_count += 1\r\n        else:\r\n            frequency.append(running_count)\r\n            element.append(lists[i])\r\n            running_count = 1\r\n    frequency.append(running_count)\r\n    element.append(lists[i+1])\r\n    return element,frequency\r\n"
    },
    {
        "number": 820,
        "prompt": "Write a function to check whether the given month number contains 28 days or not.\ndef check_monthnum_number(monthnum1):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": true,
        "answer": "    if monthnum1 == 2:\n        return True\n    elif monthnum1 == 4 or monthnum1 == 6 or monthnum1 == 9 or monthnum1 == 11:\n        return True\n    else:\n        return False\n\n# Test the function\nprint(check_monthnum_number(2)) # True\nprint(check_monthnum_number(4)) # True\nprint(check_monthnum_number(5)) # False\nprint(check_monthnum_number(7)) # False\nprint(check_monthnum_number(9)) # True\nprint(check_monthnum_number(11)) # True\nprint(check_monthnum_number(8)) # False\nprint(check_monthnum_number(12)) # False\n\n# Alternate solution using list comprehension\ndef check_monthnum_number1(monthnum2):\n    return monthnum2 in [2, 4, 6, 9, 11]",
        "generated_testcode": "assert check_monthnum_number(2) == True\n",
        "test": "assert check_monthnum_number(2)==True\nassert check_monthnum_number(1)==False\nassert check_monthnum_number(3)==False",
        "canonical_solution": "def check_monthnum_number(monthnum1):\r\n  if monthnum1 == 2:\r\n    return True\r\n  else:\r\n    return False"
    },
    {
        "number": 821,
        "prompt": "Write a function to merge two dictionaries into a single expression.\ndef merge_dictionaries(dict1,dict2):\n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    merged = {}\n    for key in dict1:\n        merged[key] = dict1[key]\n    for key in dict2:\n        merged[key] = dict2[key]\n    return merged\n\n# Test the function with sample input\ndict1 = {'a':1, 'b':2, 'c':3}\ndict2 = {'d':4, 'e':5, 'f':6}\nprint(merge_dictionaries(dict1,dict2))\n\n# Output: {'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5, 'f': 6} ",
        "generated_testcode": "assert merge_dictionaries({'a':1, 'b':2, 'c':3}, {'d':4, 'e':5}) == {'a':1, 'b':2, 'c':3, 'd':4, 'e':5}\n",
        "test": "assert merge_dictionaries({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" }, { \"G\": \"Green\", \"W\": \"White\" })=={'B': 'Black', 'R': 'Red', 'P': 'Pink', 'G': 'Green', 'W': 'White'}\nassert merge_dictionaries({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" },{ \"O\": \"Orange\", \"W\": \"White\", \"B\": \"Black\" })=={'O': 'Orange', 'P': 'Pink', 'B': 'Black', 'W': 'White', 'R': 'Red'}\nassert merge_dictionaries({ \"G\": \"Green\", \"W\": \"White\" },{ \"O\": \"Orange\", \"W\": \"White\", \"B\": \"Black\" })=={'W': 'White', 'O': 'Orange', 'G': 'Green', 'B': 'Black'}",
        "canonical_solution": "import collections as ct\r\ndef merge_dictionaries(dict1,dict2):\r\n    merged_dict = dict(ct.ChainMap({}, dict1, dict2))\r\n    return merged_dict"
    },
    {
        "number": 822,
        "prompt": "Write a function to return true if the password is valid.\ndef pass_validity(p):\n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": true,
        "answer": "    if len(p) >= 8 and any(c.islower() for c in p) and any(c.isupper() for c in p) and any(c.isdigit() for c in p):\n        return True\n    return False\n\n\n# Test cases\nprint(pass_validity(\"Aa12345678\")) # True\nprint(pass_validity(\"A12345678\")) # False\nprint(pass_validity(\"aA1bCdE321\")) # True\nprint(pass_validity(\"Aa1234567\")) # False\nprint(pass_validity(\"Aa1B2c3dE4\")) # True\n",
        "generated_testcode": "assert pass_validity(\"Abc12345\") == True\n",
        "test": "assert pass_validity(\"password\")==False\nassert pass_validity(\"Password@10\")==True\nassert pass_validity(\"password@10\")==False",
        "canonical_solution": "import re\r\ndef pass_validity(p):\r\n x = True\r\n while x:  \r\n    if (len(p)<6 or len(p)>12):\r\n        break\r\n    elif not re.search(\"[a-z]\",p):\r\n        break\r\n    elif not re.search(\"[0-9]\",p):\r\n        break\r\n    elif not re.search(\"[A-Z]\",p):\r\n        break\r\n    elif not re.search(\"[$#@]\",p):\r\n        break\r\n    elif re.search(\"\\s\",p):\r\n        break\r\n    else:\r\n        return True\r\n        x=False\r\n        break\r\n\r\n if x:\r\n    return False"
    },
    {
        "number": 823,
        "prompt": "Write a function to check if the given string starts with a substring using regex.\ndef check_substring(string, sample) : \n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    pattern = re.compile(\"^\" + sample)\n    return pattern.match(string)\n\n# Test the function\nprint(check_substring(\"hello world\", \"he\")) # True\nprint(check_substring(\"world\", \"he\")) # False\nprint(check_substring(\"hello world\", \"world\")) # True\nprint(check_substring(\"world\", \"w\")) # True\nprint(check_substring(\"world\", \"wro\")) # False\nprint(check_substring(\"world\", \"llo\")) # False\nprint(check_substring(\"hello world\", \"h\")) # True\nprint(check_substring(\"hello world\", \"lo wo\")) # False\nprint(check_substring(\"hello world\", \"he\")) # True\n\n\n# You can also use this function to check if a string contains a substring using regex\ndef check_substring(string, sample) : \n    pattern = re.compile(\".*\" + sample)\n    return pattern.match(string)\n\n# Test the function\nprint(check_substring(\"hello world\", \"he\")) # True\nprint(check_substring(\"world\", \"he\")) # True\nprint(check_substring(\"world\", \"wro\")) # True\nprint(check_substring(\"world\", \"llo\")) # True\nprint(check_substring(\"hello world\", \"h\")) # True\nprint(check_substring(\"hello world\", \"lo wo\")) # True\nprint(check_substring(\"hello world\", \"he\")) # True",
        "generated_testcode": "assert check_substring(\"hello world\", \"he\") == True\n",
        "test": "assert check_substring(\"dreams for dreams makes life fun\", \"makes\") == 'string doesnt start with the given substring'\nassert check_substring(\"Hi there how are you Hi alex\", \"Hi\") == 'string starts with the given substring'\nassert check_substring(\"Its been a long day\", \"been\") == 'string doesnt start with the given substring'",
        "canonical_solution": "import re \r\ndef check_substring(string, sample) : \r\n  if (sample in string): \r\n      y = \"\\A\" + sample \r\n      x = re.search(y, string) \r\n      if x : \r\n          return (\"string starts with the given substring\") \r\n      else : \r\n          return (\"string doesnt start with the given substring\") \r\n  else : \r\n      return (\"entered string isnt a substring\")"
    },
    {
        "number": 824,
        "prompt": "Write a python function to remove even numbers from a given list.\ndef remove_even(l):\n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    \"\"\"\n    Remove even numbers from a given list\n    Args:\n    l (list): A list of integers\n\n    Returns:\n    list: A new list with even numbers removed\n    \"\"\"\n    return [x for x in l if x % 2 != 0]\n\n\n# Test the function\nl = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]\nprint(remove_even(l))  # Output: [1, 3, 5, 7, 11]\n\n\n# Test the function with empty list\nl = []\nprint(remove_even(l))  # Output: []\n\n\n# Test the function with all even numbers\nl = [2, 4, 6, 8, 10, 12]\nprint(remove_even(l))  # Output: []\n\n\n# Test the function with only odd numbers\nl = [1, 3, 5, 7, 9]\nprint(remove_even(l))  # Output: [1, 3, 5, 7, 9]\n\n\n# Test the function with a mix of even and odd numbers\nl = [2, 4, 3, 6, 8, 1, 5, 7, 9]\nprint(remove_even(l))  # Output: [3, 1, 5, 9]\n\n\n# Test the function with negative even",
        "generated_testcode": "assert remove_even([1, 2, 3, 4, 5, 6, 7, 8, 9]) == [1, 3, 5, 7]\n",
        "test": "assert remove_even([1,3,5,2]) == [1,3,5]\nassert remove_even([5,6,7]) == [5,7]\nassert remove_even([1,2,3,4]) == [1,3]",
        "canonical_solution": "def remove_even(l):\r\n    for i in l:\r\n        if i % 2 == 0:\r\n            l.remove(i)\r\n    return l"
    },
    {
        "number": 825,
        "prompt": "Write a python function to access multiple elements of specified index from a given list.\ndef access_elements(nums, list_index):\n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    elements = []\n    for i in list_index:\n        if i < len(nums):\n            elements.append(nums[i])\n    return elements\n\n#Test the function with the given test cases\nnums = [1, 2, 3, 4, 5, 6, 7, 8, 9]\nlist_index = [1, 3, 5, 2, 0]\nprint(access_elements(nums, list_index))\n\nnums = [10, 20, 30, 40, 50, 60, 70, 80, 90]\nlist_index = [2, 4, 5, 0, 1]\nprint(access_elements(nums, list_index))\nnums = [100, 200, 30, 40, 50, 60, 70, 80, 90, 100]\nlist_index = [0, 2, 4, 1, 3]\nprint(access_elements(nums, list_index))\nnums = [1000, 200, 300, 400, 500, 600, 700, 800, 900, 1000]\nlist_index = [0, 2, 4, 1, 6]\nprint(access",
        "generated_testcode": "assert access_elements([1, 2, 3, 4, 5, 6, 7, 8, 9], [0, 2, 4]) == [1, 5]\n",
        "test": "assert access_elements([2,3,8,4,7,9],[0,3,5]) == [2, 4, 9]\nassert access_elements([1, 2, 3, 4, 5],[1,2]) == [2,3]\nassert access_elements([1,0,2,3],[0,1]) == [1,0]",
        "canonical_solution": "def access_elements(nums, list_index):\r\n    result = [nums[i] for i in list_index]\r\n    return result"
    },
    {
        "number": 826,
        "prompt": "Write a python function to find the type of triangle from the given sides.\ndef check_Type_Of_Triangle(a,b,c): \n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    if a<=0 or b<=0 or c<=0:\n        return \"Not a valid triangle\"\n    if a+b<=c or b+c<=a or a+c<=b:\n        return \"Not a valid triangle\"\n    if a==b and b==c:\n        return \"Equilateral triangle\"\n    elif a==b or b==c or a==c:\n        return \"Isosceles triangle\"\n    else:\n        return \"Scalene triangle\"\n\n\n#Testing the function\nprint(check_Type_Of_Triangle(3,4,5)) # Output: Scalene triangle\nprint(check_Type_Of_Triangle(5,6,7)) # Output: Isosceles triangle\nprint(check_Type_Of_Triangle(1,1,1)) # Output: Equilateral triangle\nprint(check_Type_Of_Triangle(3,4,1)) # Output: Not a valid triangle\nprint(check_Type_Of_Triangle(0,5,6)) # Output: Not a valid triangle ",
        "generated_testcode": "assert check_Type_Of_Triangle(3,4,5) == \"Scalene Triangle\"\n",
        "test": "assert check_Type_Of_Triangle(1,2,3) == \"Obtuse-angled Triangle\"\nassert check_Type_Of_Triangle(2,2,2) == \"Acute-angled Triangle\"\nassert check_Type_Of_Triangle(1,0,1) == \"Right-angled Triangle\"",
        "canonical_solution": "def check_Type_Of_Triangle(a,b,c): \r\n    sqa = pow(a,2) \r\n    sqb = pow(b,2) \r\n    sqc = pow(c,2) \r\n    if (sqa == sqa + sqb or sqb == sqa + sqc or sqc == sqa + sqb): \r\n        return (\"Right-angled Triangle\") \r\n    elif (sqa > sqc + sqb or sqb > sqa + sqc or sqc > sqa + sqb): \r\n        return (\"Obtuse-angled Triangle\") \r\n    else: \r\n        return (\"Acute-angled Triangle\") "
    },
    {
        "number": 827,
        "prompt": "Write a function to sum a specific column of a list in a given list of lists.\ndef sum_column(list1, C):\n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": true,
        "answer": "    sum = 0\n    for row in list1:\n        sum += row[C-1]\n    return sum\n\n#Example usage:\nlist1 = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nprint(sum_column(list1, 2)) # Output: 12 (because 3 + 8 + 9 = 12)\n\n#Note that the function takes in a list of lists and a column number (starting from 1) and returns the sum of the column",
        "generated_testcode": "assert sum_column([[1,2,3], [4,5,6], [7,8,9]], 1) == 12\n",
        "test": "assert sum_column( [[1,2,3,2],[4,5,6,2],[7,8,9,5],],0)==12\nassert sum_column( [[1,2,3,2],[4,5,6,2],[7,8,9,5],],1)==15\nassert sum_column( [[1,2,3,2],[4,5,6,2],[7,8,9,5],],3)==9",
        "canonical_solution": "def sum_column(list1, C):\r\n    result = sum(row[C] for row in list1)\r\n    return result"
    },
    {
        "number": 828,
        "prompt": "Write a function to count alphabets,digits and special charactes in a given string.\ndef count_alpha_dig_spl(string):\n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    alphabets = 0\n    digits = 0\n    special_char = 0\n    for char in string:\n        if char.isalpha():\n            alphabets += 1\n        elif char.isdigit():\n            digits += 1\n        else:\n            special_char += 1\n    return alphabets, digits, special_char\n\n# Test the function\nstring = input(\"Enter a string: \")\nalphabets, digits, special_char = count_alpha_dig_spl(string)\nprint(\"Alpha characters: \", alphabets)\nprint(\"Digit characters: \", digits)\nprint(\"Special characters: \", special_char)\n",
        "generated_testcode": "assert count_alpha_dig_spl(\"Hello, World! 123\") == {'alpha': 7, 'digit': 3, 'special': 1}\n",
        "test": "assert count_alpha_dig_spl(\"abc!@#123\")==(3,3,3)\nassert count_alpha_dig_spl(\"dgsuy@#$%&1255\")==(5,4,5)\nassert count_alpha_dig_spl(\"fjdsif627348#%$^&\")==(6,6,5)",
        "canonical_solution": "def count_alpha_dig_spl(string):\r\n  alphabets=digits = special = 0\r\n  for i in range(len(string)):\r\n    if(string[i].isalpha()):\r\n        alphabets = alphabets + 1\r\n    elif(string[i].isdigit()):\r\n        digits = digits + 1\r\n    else:\r\n        special = special + 1\r\n  return (alphabets,digits,special)   "
    },
    {
        "number": 829,
        "prompt": "Write a function to find out the second most repeated (or frequent) string in the given sequence.\ndef second_frequent(input): \n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    frequency = {}\n    for item in input:\n        if item in frequency:\n            frequency[item] += 1\n        else:\n            frequency[item] = 1\n    sorted_frequency = sorted(frequency.items(), key=lambda x: x[1], reverse=True)\n    second_most_common = sorted_frequency[1][1]\n    for item in sorted_frequency:\n        if item[1] == second_most_common:\n            return item[0]\n\n# Example usage:\ninput_sequence = \"aabbbccddeeff\"\nprint(second_frequent(input_sequence))  # Output: \"b\"\ninput_sequence = \"aaabbcdddeef\"\nprint(second_frequent(input_sequence))  # Output: \"a\"\ninput_sequence = \"aabbc\"\nprint(second_frequent(input_sequence))  # Output: \"a\"\ninput_sequence = \"abc\"\nprint(second_frequent(input_sequence))  # Output: \"a\"\ninput_sequence = \"aaaabbc\"\nprint(second_frequent(input_sequence))  # Output: \"a\"\ninput_sequence = \"ccccc\"\nprint(second_frequent(input_sequence))  # Output: \"c\"\n\n# Note: If there's a tie for the second most frequent element, return the smallest alphabetical character. ",
        "generated_testcode": "assert second_frequent(['a', 'b', 'c', 'a', 'b', 'c', 'a', 'b', 'c', 'a']) == 'a'\n",
        "test": "assert second_frequent(['aaa','bbb','ccc','bbb','aaa','aaa']) == 'bbb'\nassert second_frequent(['abc','bcd','abc','bcd','bcd','bcd']) == 'abc'\nassert second_frequent(['cdma','gsm','hspa','gsm','cdma','cdma']) == 'gsm'",
        "canonical_solution": "from collections import Counter \r\n\t\r\ndef second_frequent(input): \r\n\tdict = Counter(input) \r\n\tvalue = sorted(dict.values(), reverse=True)  \r\n\tsecond_large = value[1] \r\n\tfor (key, val) in dict.items(): \r\n\t\tif val == second_large: \r\n\t\t\treturn (key) "
    },
    {
        "number": 830,
        "prompt": "Write a function to round up a number to specific digits.\ndef round_up(a, digits):\n",
        "checkpoint": "7B",
        "pass": 6,
        "correct": true,
        "answer": "    if digits == 0:\n        return round(a)\n    power = 10 ** digits\n    return (math.ceil(a * power)) / power\n\n\n# Test the function with some inputs\nprint(round_up(1.2345678, 2))\nprint(round_up(12345.678, 1))\nprint(round_up(123.45, 3))\nprint(round_up(12.345, 4))\n",
        "generated_testcode": "assert round_up(123.456, 2) == 123.46\n",
        "test": "assert round_up(123.01247,0)==124\nassert round_up(123.01247,1)==123.1\nassert round_up(123.01247,2)==123.02",
        "canonical_solution": "import math\r\ndef round_up(a, digits):\r\n    n = 10**-digits\r\n    return round(math.ceil(a / n) * n, digits)"
    },
    {
        "number": 831,
        "prompt": "Write a python function to count equal element pairs from the given array.\ndef count_Pairs(arr,n): \n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    count = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            if arr[i] == arr[j]:\n                count += 1\n    return count\n\n\n#Example:\narr = [1,2,3,4,4,4,5,6]\nn = len(arr)\nprint(count_Pairs(arr,n)) # Output: 2 (pairs are (4,4) and (6,4)\n\narr = [1,2,3,4,5,6,6]\nn = len(arr)\nprint(count_Pairs(arr,n)) # Output: 2 (pairs are (4,4) and (6,4)\n\narr = [1,2,3,4,5,6,6]\nn = len(arr)\nprint(count_Pairs(arr,n)) # Output: 3 (pairs are (4,4) and (6,4) and (5,6)\n",
        "generated_testcode": "assert count_Pairs([1,2,3,4,5,5,6,7,8,9,9], 7) == 2\n",
        "test": "assert count_Pairs([1,1,1,1],4) == 6\nassert count_Pairs([1,5,1],3) == 1\nassert count_Pairs([3,2,1,7,8,9],6) == 0",
        "canonical_solution": "def count_Pairs(arr,n): \r\n    cnt = 0; \r\n    for i in range(n): \r\n        for j in range(i + 1,n): \r\n            if (arr[i] == arr[j]): \r\n                cnt += 1; \r\n    return cnt; "
    },
    {
        "number": 832,
        "prompt": "Write a function to extract the maximum numeric value from a string by using regex.\ndef extract_max(input): \n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": true,
        "answer": "    import re\n    pattern = r'\\d+'\n    nums = re.findall(pattern, input)\n    max_num = max(map(int, nums))\n    return max_num\n\n\n# Test cases\nprint(extract_max(\"The maximum number is 1000 and the minimum number is 5.\")) # Output: 100\nprint(extract_max(\"The average is 75.5 and the lowest score is 40.\")) # Output: 75\nprint(extract_max(\"There are 3 numbers: 12, 7, and 9.\")) # Output: 9\nprint(extract_max(\"The total amount is $12000.00 and the discount is 25%.\")) # Output: 12000\nprint(extract_max(\"The final grade is 85.5/100\")) # Output: 85\nprint(extract_max(\"The price is $19.99 and the tax is 7.5%.\")) # Output: 19\nprint(extract_max(\"The temperature is 72 degrees Fahrenheit.\")) # Output: 72\nprint(extract_max(\"The salary is 5000000$.\")) # Output: 500000\nprint(extract_max(\"The weight of the object is 12.5kg.\")) # Output: 12\nprint(extract_max(\"The duration is 3:15:30.\")) #",
        "generated_testcode": "assert extract_max(\"The maximum value is 1000\") == 1000\n",
        "test": "assert extract_max('100klh564abc365bg') == 564\nassert extract_max('hello300how546mer231') == 546\nassert extract_max('its233beenalong343journey234') == 343",
        "canonical_solution": "import re \r\ndef extract_max(input): \r\n\tnumbers = re.findall('\\d+',input) \r\n\tnumbers = map(int,numbers) \r\n\treturn max(numbers)"
    },
    {
        "number": 833,
        "prompt": "Write a function to get dictionary keys as a list.\ndef get_key(dict): \n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    key_list = list(dict.keys())\n    return key_list\n\n#Example usage:\nmy_dict = {'apple': 2, 'banana': 3, 'orange': 4}\nprint(get_key(my_dict)) # Output: ['apple', 'banana', 'orange']\n\n#Alternatively, you can use the `list()` function:\nkey_list = list(my_dict.keys())\nprint(key_list) # Output: ['apple', 'banana', 'orange']\n\n#Note: The `keys()` method returns a view object in Python 3.7+, so you can directly convert it to a list using the `list()` function. ",
        "generated_testcode": "assert get_key({\"apple\": 1, \"banana\": 2, \"orange\": 3}) == [\"apple\", \"banana\", \"orange\"]\n",
        "test": "assert get_key({1:'python',2:'java'})==[1,2]\nassert get_key({10:'red',20:'blue',30:'black'})==[10,20,30]\nassert get_key({27:'language',39:'java',44:'little'})==[27,39,44]",
        "canonical_solution": "def get_key(dict): \r\n    list = [] \r\n    for key in dict.keys(): \r\n        list.append(key)           \r\n    return list"
    },
    {
        "number": 834,
        "prompt": "Write a function to generate a square matrix filled with elements from 1 to n raised to the power of 2 in spiral order.\ndef generate_matrix(n):\n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    matrix = [[0 for i in range(n)] for j in range(n)]\n    top = left = 0\n    bottom = n - 1\n    right = n - 1\n    counter = 1\n    while top <= bottom and left <= right:\n        for i in range(left, right + 1):\n            matrix[top][i] = counter\n            counter += 1\n        top += 1\n        for i in range(top, bottom + 1):\n            matrix[i][right] = counter\n            counter += 1\n        right -= 1\n        for i in range(right, left - 1, -1):\n            matrix[bottom][i] = counter\n            counter += 1\n        bottom -= 1\n        for i in range(bottom, top - 1, -1):\n            matrix[i][left] = counter\n            counter += 1\n        left += 1\n    return matrix\n\n# Test the function with n = 3\nprint(generate_matrix(3))\n\n# Output: [[1, 2, 3], [8, 9, 4], [7, 6, 5]]\n# Explanation:\n# Top row: 1, 2, 3\n# First inner row: 4, 5, 6, 7, 8, 9\n# Bottom row: 16, 17, 18\n# Last inner column: 15, 10, 11, 12, 13",
        "generated_testcode": "assert generate_matrix(3) == [[1, 2, 3], [8, 9, 4], [7, 6, 5]]\n",
        "test": "assert generate_matrix(3)==[[1, 2, 3], [8, 9, 4], [7, 6, 5]] \nassert generate_matrix(2)==[[1,2],[4,3]]\nassert generate_matrix(7)==[[1, 2, 3, 4, 5, 6, 7], [24, 25, 26, 27, 28, 29, 8], [23, 40, 41, 42, 43, 30, 9], [22, 39, 48, 49, 44, 31, 10], [21, 38, 47, 46, 45, 32, 11], [20, 37, 36, 35, 34, 33, 12], [19, 18, 17, 16, 15, 14, 13]]",
        "canonical_solution": "def generate_matrix(n):\r\n        if n<=0:\r\n            return [] \r\n        matrix=[row[:] for row in [[0]*n]*n]        \r\n        row_st=0\r\n        row_ed=n-1        \r\n        col_st=0\r\n        col_ed=n-1\r\n        current=1        \r\n        while (True):\r\n            if current>n*n:\r\n                break\r\n            for c in range (col_st, col_ed+1):\r\n                matrix[row_st][c]=current\r\n                current+=1\r\n            row_st+=1\r\n            for r in range (row_st, row_ed+1):\r\n                matrix[r][col_ed]=current\r\n                current+=1\r\n            col_ed-=1\r\n            for c in range (col_ed, col_st-1, -1):\r\n                matrix[row_ed][c]=current\r\n                current+=1\r\n            row_ed-=1\r\n            for r in range (row_ed, row_st-1, -1):\r\n                matrix[r][col_st]=current\r\n                current+=1\r\n            col_st+=1\r\n        return matrix"
    },
    {
        "number": 835,
        "prompt": "Write a python function to find the slope of a line.\ndef slope(x1,y1,x2,y2): \n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": true,
        "answer": "    if x1 == x2: \n        return None \n    return (y2-y1)/(x2-x1) ",
        "generated_testcode": "assert slope(1,2,3,4) == 1.0\n",
        "test": "assert slope(4,2,2,5) == -1.5\nassert slope(2,4,4,6) == 1\nassert slope(1,2,4,2) == 0",
        "canonical_solution": "def slope(x1,y1,x2,y2): \r\n    return (float)(y2-y1)/(x2-x1)  "
    },
    {
        "number": 836,
        "prompt": "Write a function to find length of the subarray having maximum sum.\ndef max_sub_array_sum(a,size): \n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": " \n    if size == 1: \n        return a[0] \n  \n    # Initialize the max_so_far, max_ending_here variables \n    max_so_far = max_ending_here = a[0] \n  \n    for i in range(1, size): \n        # check if current element is positive, add it to the current element \n        if a[i] > 0: \n            max_ending_here += a[i] \n        # check if current element is negative, update max_ending_here \n        if max_ending_here < 0: \n            max_ending_here = 0\n        # update max_so_far \n        if max_so_far < max_ending_here: \n            max_so_far = max_ending_here \n    # check if the last element of the array is positive, add it to max_so_far \n    if max_ending_here > 0: \n        max_so_far += max_ending_here \n    return max_so_far \n  \n# Example usage: \narr = [1, -2, 3, 5, -4, 2, 6, -1, 7, -6, 8] \nprint(\"Maximum subarray sum is\", max_sub_array_sum(arr, len(arr))) # Output: 20 ",
        "generated_testcode": "assert max_sub_array_sum([1, -2, 3, 4, -1, -3, 5, 2, -2, 6, 1, -4], 7) == 6\n",
        "test": "assert max_sub_array_sum([-2, -3, 4, -1, -2, 1, 5, -3],8) == 5\nassert max_sub_array_sum([1, -2, 1, 1, -2, 1],6) == 2\nassert max_sub_array_sum([-1, -2, 3, 4, 5],5) == 3",
        "canonical_solution": "from sys import maxsize \r\ndef max_sub_array_sum(a,size): \r\n\tmax_so_far = -maxsize - 1\r\n\tmax_ending_here = 0\r\n\tstart = 0\r\n\tend = 0\r\n\ts = 0\r\n\tfor i in range(0,size): \r\n\t\tmax_ending_here += a[i] \r\n\t\tif max_so_far < max_ending_here: \r\n\t\t\tmax_so_far = max_ending_here \r\n\t\t\tstart = s \r\n\t\t\tend = i \r\n\t\tif max_ending_here < 0: \r\n\t\t\tmax_ending_here = 0\r\n\t\t\ts = i+1\r\n\treturn (end - start + 1)"
    },
    {
        "number": 837,
        "prompt": "Write a python function to find the cube sum of first n odd natural numbers.\ndef cube_Sum(n): \n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    odd_numbers = [num**3 for num in range(1, n+1, 2)]\n    return sum(odd_numbers) \n\n# Test the function with n=5\nprint(cube_Sum(5)) ",
        "generated_testcode": "assert cube_Sum(5) == 225 # 1^3 + 3^3 + 5^3 + 7^3 + 9^3 + 111^3 + 13^3 = 225\n",
        "test": "assert cube_Sum(2) == 28\nassert cube_Sum(3) == 153\nassert cube_Sum(4) == 496",
        "canonical_solution": "def cube_Sum(n): \r\n    sum = 0   \r\n    for i in range(0,n) : \r\n        sum += (2*i+1)*(2*i+1)*(2*i+1) \r\n    return sum"
    },
    {
        "number": 838,
        "prompt": "Write a python function to find minimum number swaps required to make two binary strings equal.\ndef min_Swaps(s1,s2) :  \n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": true,
        "answer": "    count = 0 \n    for i in range(len(s1)) : \n        if s1[i] != s2[i] : \n            if s1.count(s2[i]) > 0 : \n                s1 = s1[:i] + s1[i].replace(s2[i], '', 1) + s1[i+1:] \n                count += 1\n    return count ",
        "generated_testcode": "assert min_Swaps(\"101101\",\"111100\") == 2\n",
        "test": "assert min_Swaps(\"0011\",\"1111\") == 1\nassert min_Swaps(\"00011\",\"01001\") == 2\nassert min_Swaps(\"111\",\"111\") == 0",
        "canonical_solution": "def min_Swaps(s1,s2) :  \r\n    c0 = 0; c1 = 0;  \r\n    for i in range(len(s1)) :  \r\n        if (s1[i] == '0' and s2[i] == '1') : \r\n            c0 += 1;    \r\n        elif (s1[i] == '1' and s2[i] == '0') : \r\n            c1 += 1;  \r\n    result = c0 // 2 + c1 // 2;  \r\n    if (c0 % 2 == 0 and c1 % 2 == 0) : \r\n        return result;  \r\n    elif ((c0 + c1) % 2 == 0) : \r\n        return result + 2;  \r\n    else : \r\n        return -1;  "
    },
    {
        "number": 839,
        "prompt": "Write a function to sort the tuples alphabetically by the first item of each tuple.\ndef sort_tuple(tup): \n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    return sorted(tup, key=lambda x: x[0])\n\n#Test the function with the given input\ntup = ((\"apple\", 10), (\"banana\", 20), (\"orange\", 30), (\"kiwi\", 40), (\"pear\", 50))\nprint(sort_tuple(tup)) # [('apple', 10), ('banana', 20), ('kiwi', 40), ('orange', 30), ('pear', 50)]\n\n#Test the function with the following input\ntup2 = ((\"apple\", 10, \"red\"), (\"banana\", 20, \"yellow\"), (\"orange\", 30, \"orange\"), (\"kiwi\", 40, \"green\"), (\"pear\", 50, \"green\"))\nprint(sort_tuple(tup2)) # [('apple', 10, 'red'), ('banana', 20, 'yellow'), ('kiwi', 40, 'green'), ('orange', 30, 'orange'), ('pear', 50, 'green')] ",
        "generated_testcode": "assert sort_tuple([('apple', 2), ('banana', 3), ('orange', 1), ('grape', 4)]) == [('apple', 2), ('grape', 4), ('banana', 3)]\n",
        "test": "assert sort_tuple([(\"Amana\", 28), (\"Zenat\", 30), (\"Abhishek\", 29),(\"Nikhil\", 21), (\"B\", \"C\")]) == [('Abhishek', 29), ('Amana', 28), ('B', 'C'), ('Nikhil', 21), ('Zenat', 30)]\nassert sort_tuple([(\"aaaa\", 28), (\"aa\", 30), (\"bab\", 29), (\"bb\", 21), (\"csa\", \"C\")]) == [('aa', 30), ('aaaa', 28), ('bab', 29), ('bb', 21), ('csa', 'C')]\nassert sort_tuple([(\"Sarala\", 28), (\"Ayesha\", 30), (\"Suman\", 29),(\"Sai\", 21), (\"G\", \"H\")]) == [('Ayesha', 30), ('G', 'H'), ('Sai', 21), ('Sarala', 28), ('Suman', 29)]",
        "canonical_solution": "def sort_tuple(tup): \r\n\tn = len(tup) \r\n\tfor i in range(n): \r\n\t\tfor j in range(n-i-1): \r\n\t\t\tif tup[j][0] > tup[j + 1][0]: \r\n\t\t\t\ttup[j], tup[j + 1] = tup[j + 1], tup[j] \r\n\treturn tup"
    },
    {
        "number": 840,
        "prompt": "Write a python function to check whether the roots of a quadratic equation are numerically equal but opposite in sign or not.\ndef Check_Solution(a,b,c):  \n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    D = b**2 - 4*a*c\n    if D < 0:\n        return False\n    elif D == 0:\n        return True\n    elif D > 0:\n        root1 = (-b + D**0.5)/(2*a)\n        root2 = (-b - D**0.5)/(2*a)\n        if root1*root2 < 0:\n            return True\n        else:\n            return False\n\n# Test the function\nprint(Check_Solution(1,-3,2)) # False\nprint(Check_Solution(1,3,2)) # True\nprint(Check_Solution(1,-4,4)) # False\nprint(Check_Solution(1,2,4)) # False\nprint(Check_Solution(1,-10,10)) # False\nprint(Check_Solution(1,5,10)) # False\nprint(Check_Solution(1,-16,36)) # True\nprint(Check_Solution(1,1,1)) # True\nprint(Check_Solution(1,-5,25)) # False\nprint(Check_Solution(1,25,1)) # True\nprint(Check_Solution(1,25,5)) # False",
        "generated_testcode": "assert Check_Solution(1, -3, 4) == True\n",
        "test": "assert Check_Solution(2,0,-1) == \"Yes\"\nassert Check_Solution(1,-5,6) == \"No\"\nassert Check_Solution(2,0,2) == \"Yes\"",
        "canonical_solution": "def Check_Solution(a,b,c):  \r\n    if b == 0:  \r\n        return (\"Yes\")  \r\n    else: \r\n        return (\"No\")  "
    },
    {
        "number": 841,
        "prompt": "Write a function to count the number of inversions in the given array.\ndef get_inv_count(arr, n): \n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    inv_count = 0 \n  \n    for i in range(n): \n        for j in range(i + 1, n): \n            if arr[i] > arr[j]: \n                inv_count += 1\n  \n    return inv_count \n  \n# Test the function with an example array \narr = [1, 20, 6, 4, 5, 3, 10] \nn = len(arr) \nprint(\"Number of inversions are:\", get_inv_count(arr, n)) ",
        "generated_testcode": "assert get_inv_count([1, 2, 3, 4, 5, 6, 7, 8, 9], 5) == 0\n",
        "test": "assert get_inv_count([1, 20, 6, 4, 5], 5) == 5\nassert get_inv_count([8, 4, 2, 1], 4) == 6\nassert get_inv_count([3, 1, 2], 3) == 2",
        "canonical_solution": "def get_inv_count(arr, n): \r\n\tinv_count = 0\r\n\tfor i in range(n): \r\n\t\tfor j in range(i + 1, n): \r\n\t\t\tif (arr[i] > arr[j]): \r\n\t\t\t\tinv_count += 1\r\n\treturn inv_count "
    },
    {
        "number": 842,
        "prompt": "Write a function to find the number which occurs for odd number of times in the given array.\ndef get_odd_occurence(arr, arr_size):\n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    freq_dict = {}\n    for i in range(arr_size):\n        if arr[i] in freq_dict:\n            freq_dict[arr[i]] += 1\n        else:\n            freq_dict[arr[i]] = 1\n\n    for key, value in freq_dict.items():\n        if value % 2 != 0:\n            return key\n    return -1\n\n# Example usage:\narr = [1, 2, 3, 4, 5, 6, 7, 2, 1, 4, 4, 4, 5, 3]\nprint(get_odd_occurence(arr, len(arr)))\n# Output: 3\n\n\narr = [1, 2, 3, 4, 5, 6, 7, 2, 4, 5, 3]\nprint(get_odd_occurence(arr, len(arr)))\n# Output: -1\n\narr = [1, 2, 3, 4, 5, 6, 7, 2, 4, 5, 3, 3, 1, 1]\nprint(get_odd_occurence(arr, len(arr)))\n# Output: 2\n",
        "generated_testcode": "assert get_odd_occurence([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10] , 10) == 5\n",
        "test": "assert get_odd_occurence([2, 3, 5, 4, 5, 2, 4, 3, 5, 2, 4, 4, 2], 13) == 5\nassert get_odd_occurence([1, 2, 3, 2, 3, 1, 3], 7) == 3\nassert get_odd_occurence([5, 7, 2, 7, 5, 2, 5], 7) == 5",
        "canonical_solution": "def get_odd_occurence(arr, arr_size):\r\n  for i in range(0, arr_size):\r\n    count = 0\r\n    for j in range(0, arr_size):\r\n      if arr[i] == arr[j]:\r\n        count += 1\r\n    if (count % 2 != 0):\r\n      return arr[i]\r\n  return -1"
    },
    {
        "number": 843,
        "prompt": "Write a function to find the nth super ugly number from a given prime list of size k using heap queue algorithm.\ndef nth_super_ugly_number(n, primes):\n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    if n < 1 or len(primes) == 0:\n        return None\n    \n    if n == 1:\n        return 1\n    \n    from heapq import heappush, heappop\n    ugly = []\n    for prime in primes:\n        heappush(ugly, (prime, prime, 1) * n)\n        \n    result = 0\n    while len(ugly) > 1:\n        p, p_val, count = heappop(ugly)\n        result = p_val\n        while count > 1:\n            next_p_val = heappop(ugly)\n            if next_p_val[0] == p:\n                heappush(ugly, (p, p_val * p, next_p_val[2] + 1) if next_p_val[2] < n else next_p_val)\n                count -= 1\n            else:\n                heappush(ugly, (next_p_val[0], next_p_val[1], next_p_val[2] + 1) if next_p_val[2] < n else next_p_val)\n                break\n                \n    return result\n\n# Test cases\nprint(nth_super_ugly_number(10, [2, 3, 5])) # Output: 48\nprint(nth_super_ugly_number(1, [2, 3, 5])) # Output: 2",
        "generated_testcode": "assert nth_super_ugly_number(10, [2, 3, 5]) == 12, \"Test case 1 failed\"\n",
        "test": "assert nth_super_ugly_number(12,[2,7,13,19])==32\nassert nth_super_ugly_number(10,[2,7,13,19])==26\nassert nth_super_ugly_number(100,[2,7,13,19])==5408",
        "canonical_solution": "import heapq\r\ndef nth_super_ugly_number(n, primes):\r\n    uglies = [1]\r\n    def gen(prime):\r\n        for ugly in uglies:\r\n            yield ugly * prime\r\n    merged = heapq.merge(*map(gen, primes))\r\n    while len(uglies) < n:\r\n        ugly = next(merged)\r\n        if ugly != uglies[-1]:\r\n            uglies.append(ugly)\r\n    return uglies[-1]"
    },
    {
        "number": 844,
        "prompt": "Write a python function to find the kth element in an array containing odd elements first and then even elements.\ndef get_Number(n, k): \n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    odd_elements = []\n    even_elements = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            even_elements.append(i)\n        else:\n            odd_elements.append(i)\n    if k > len(odd_elements):\n        return even_elements[k-len(odd_elements)]\n    elif k > len(even_elements):\n        return odd_elements[k-(len(odd_elements)+1)//2]\n    elif k > len(odd_elements):\n        return None\n    else:\n        return odd_elements[k-1]\n    ",
        "generated_testcode": "assert get_Number(5, 2) == 3\n",
        "test": "assert get_Number(8,5) == 2\nassert get_Number(7,2) == 3\nassert get_Number(5,2) == 3",
        "canonical_solution": "def get_Number(n, k): \r\n    arr = [0] * n; \r\n    i = 0; \r\n    odd = 1; \r\n    while (odd <= n):   \r\n        arr[i] = odd; \r\n        i += 1; \r\n        odd += 2;\r\n    even = 2; \r\n    while (even <= n): \r\n        arr[i] = even; \r\n        i += 1;\r\n        even += 2; \r\n    return arr[k - 1]; "
    },
    {
        "number": 845,
        "prompt": "Write a python function to count the number of digits in factorial of a given number.\ndef find_Digits(n): \n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    factorial = 1 \n    for i in range(1, n+1): \n        factorial = factorial * i \n    count = 0\n    while (factorial > 0): \n        count += factorial % 10 \n        factorial = factorial // 10 \n    return count ",
        "generated_testcode": "assert find_Digits(5) == 3 # 5! = 120\n",
        "test": "assert find_Digits(7) == 4\nassert find_Digits(5) == 3\nassert find_Digits(4) == 2",
        "canonical_solution": "import math \r\ndef find_Digits(n): \r\n    if (n < 0): \r\n        return 0;\r\n    if (n <= 1): \r\n        return 1; \r\n    x = ((n * math.log10(n / math.e) + math.log10(2 * math.pi * n) /2.0)); \r\n    return math.floor(x) + 1; "
    },
    {
        "number": 846,
        "prompt": "Write a function to find the minimum number of platforms required for a railway/bus station.\ndef find_platform(arr, dep, n): \n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    # Sort arrival and departure times\n    arr.sort()\n    dep.sort()\n    \n    # Initialize the required platforms\n    platforms = [1] * len(arr)\n    count = 1\n    i = 1\n    j = 0\n    \n    # Iterate over the departure times\n    while i < n and j < n:\n        if arr[i] < dep[j]:\n            count += 1\n            i += 1\n        else:\n            platforms[j] = count\n            j += 1\n    \n    # Iterate over the arrival times\n    while j < n:\n        platforms[j] = max(platforms[j], count)\n        j += 1\n    \n    return max(platforms)\n\n# Test the function with an example\narr = [900, 940, 950, 1100, 150, 180, 150, 200]\ndep = [910, 1200, 1120, 1500, 190, 200, 205]\nn = len(arr)\nprint(find_platform(arr, dep, n))\n\n# Output: 3\n\n# The function should return 3 as the maximum number of platforms required is 3. \n# The trains arrive at times 900, 940, 950, 110, 150, 180",
        "generated_testcode": "assert find_platform([1, 3, 5, 7, 9, 11, 12, 15, 20], 10, 6) == 3\n",
        "test": "assert find_platform([900, 940, 950, 1100, 1500, 1800],[910, 1200, 1120, 1130, 1900, 2000],6)==3\nassert find_platform([100,200,300,400],[700,800,900,1000],4)==4\nassert find_platform([5,6,7,8],[4,3,2,1],4)==1",
        "canonical_solution": "def find_platform(arr, dep, n): \r\n    arr.sort() \r\n    dep.sort() \r\n    plat_needed = 1\r\n    result = 1\r\n    i = 1\r\n    j = 0\r\n    while (i < n and j < n): \r\n        if (arr[i] <= dep[j]):           \r\n            plat_needed+= 1\r\n            i+= 1\r\n        elif (arr[i] > dep[j]):           \r\n            plat_needed-= 1\r\n            j+= 1\r\n        if (plat_needed > result):  \r\n            result = plat_needed           \r\n    return result"
    },
    {
        "number": 847,
        "prompt": "Write a python function to copy a list from a singleton tuple.\ndef lcopy(xs):\n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    return list(xs[0] if isinstance(xs, tuple) and len(xs) == 1 else xs\n\n\n# Test cases\nprint(lcopy([1, 2, 3, 4])) # Output: [1, 2, 3, 4]\nprint(lcopy((1, 2, 3, 4)) # Output: [1, 2, 3, 4]\nprint(lcopy(42) # Output: [42]\nprint(lcopy('hello') # Output: ['h', 'e', 'l', 'l', 'o']\n",
        "generated_testcode": "assert lcopy(([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]\n",
        "test": "assert lcopy([1, 2, 3]) == [1, 2, 3]\nassert lcopy([4, 8, 2, 10, 15, 18]) == [4, 8, 2, 10, 15, 18]\nassert lcopy([4, 5, 6]) == [4, 5, 6]\n",
        "canonical_solution": "def lcopy(xs):\n  return xs[:]\n"
    },
    {
        "number": 848,
        "prompt": "Write a function to find the area of a trapezium.\ndef area_trapezium(base1,base2,height):\n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    return 0.5*(base1+base2)*height\n\n# Test the function with sample inputs\nprint(area_trapezium(5,10,7)) # Output: 35.0\nprint(area_trapezium(7,9,4)) # Output: 23.0\nprint(area_trapezium(12,16,10)) # Output: 72.0\n\n# Test the function with some additional inputs\nprint(area_trapezium(10,20,15)) # Output: 75.0\nprint(area_trapezium(8,24,12)) # Output: 57.6",
        "generated_testcode": "assert area_trapezium(5,10,10) == 25\n",
        "test": "assert area_trapezium(6,9,4)==30\nassert area_trapezium(10,20,30)==450\nassert area_trapezium(15,25,35)==700",
        "canonical_solution": "def area_trapezium(base1,base2,height):\r\n area = 0.5 * (base1 + base2) * height\r\n return area"
    },
    {
        "number": 849,
        "prompt": "Write a python function to find sum of all prime divisors of a given number.\ndef Sum(N): \n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    sum = 0\n    for i in range(2,N):\n        if N%i == 0:\n            if isPrime(i):\n                sum += i\n    return sum\n\ndef isPrime(n):\n    if n <= 1:\n        return False\n    for i in range(2,n):\n        if n%i == 0:\n            return False\n        else:\n            return True\n\n#Testing the function\nprint(Sum(12)) #Output: 7 (2+3)\nprint(Sum(15)) #Output: 7 (3+5)\nprint(Sum(20)) #Output: 11 (2+2+5)\nprint(Sum(17)) #Output: 17 (17)\n\n#Note: This function assumes that the given number is greater than 1. ",
        "generated_testcode": "assert Sum(10) == 17\n",
        "test": "assert Sum(60) == 10\nassert Sum(39) == 16\nassert Sum(40) == 7",
        "canonical_solution": "def Sum(N): \r\n    SumOfPrimeDivisors = [0]*(N + 1)   \r\n    for i in range(2,N + 1) : \r\n        if (SumOfPrimeDivisors[i] == 0) : \r\n            for j in range(i,N + 1,i) : \r\n                SumOfPrimeDivisors[j] += i           \r\n    return SumOfPrimeDivisors[N] "
    },
    {
        "number": 850,
        "prompt": "Write a function to check if a triangle of positive area is possible with the given angles.\ndef is_triangleexists(a,b,c): \n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    # Step 1: Check if any of the angles is 180 degrees\n    if a == 180 or b == 180 or c == 180:\n        return False\n    # Step 2: Check if the sum of any two angles is greater than 180 degrees\n    elif a + b > 180 and b + c > 180 and a + c > 180:\n        return False\n    else:\n        return True\n\n# Test cases\nprint(is_triangleexists(30,60,90)) # True\nprint(is_triangleexists(45,45,90)) # False\nprint(is_triangleexists(50,30,90)) # False\nprint(is_triangleexists(45,30,75)) # True\nprint(is_triangleexists(180,30,30)) # False\nprint(is_triangleexists(45,60,60)) # False\n",
        "generated_testcode": "assert is_triangleexists(30,45,90) == True\n",
        "test": "assert is_triangleexists(50,60,70)==True\nassert is_triangleexists(90,45,45)==True\nassert is_triangleexists(150,30,70)==False",
        "canonical_solution": "def is_triangleexists(a,b,c): \r\n    if(a != 0 and b != 0 and c != 0 and (a + b + c)== 180): \r\n        if((a + b)>= c or (b + c)>= a or (a + c)>= b): \r\n            return True \r\n        else:\r\n            return False\r\n    else:\r\n        return False"
    },
    {
        "number": 851,
        "prompt": "Write a python function to find sum of inverse of divisors.\ndef Sum_of_Inverse_Divisors(N,Sum): \n",
        "checkpoint": "7B",
        "pass": 9,
        "correct": true,
        "answer": "    sum = 0 \n    for i in range(1,N+1): \n        if N % i == 0: \n            sum += 1/i \n    return int(sum) ",
        "generated_testcode": "assert Sum_of_Inverse_Divisors(10, 2) == 1\n",
        "test": "assert Sum_of_Inverse_Divisors(6,12) == 2\nassert Sum_of_Inverse_Divisors(9,13) == 1.44\nassert Sum_of_Inverse_Divisors(1,4) == 4",
        "canonical_solution": "def Sum_of_Inverse_Divisors(N,Sum): \r\n    ans = float(Sum)*1.0 /float(N);  \r\n    return round(ans,2); "
    },
    {
        "number": 852,
        "prompt": "Write a python function to remove negative numbers from a list.\ndef remove_negs(num_list): \n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    new_list = [] \n    for num in num_list:\n        if num >= 0:\n            new_list.append(num)\n    return new_list ",
        "generated_testcode": "assert remove_negs([1, 2, -3, 4, -5, 6, -7, 8, -9, 10]) == [1, 2, 4, 6, 8, 10]\n",
        "test": "assert remove_negs([1,-2,3,-4]) == [1,3]\nassert remove_negs([1,2,3,-4]) == [1,2,3]\nassert remove_negs([4,5,-6,7,-8]) == [4,5,7]",
        "canonical_solution": "def remove_negs(num_list): \r\n    for item in num_list: \r\n        if item < 0: \r\n           num_list.remove(item) \r\n    return num_list"
    },
    {
        "number": 853,
        "prompt": "Write a python function to find sum of odd factors of a number.\ndef sum_of_odd_Factors(n): \n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    sum = 0\n    for i in range(1, n + 1):\n        if n%i == 0 and i%2 != 0 and n%i != 0:\n            sum += i\n    return sum\n\n# Test the function with an example\nprint(sum_of_odd_Factors(10)) # Output: 9 (1 + 3)\nprint(sum_of_odd_Factors(20)) # Output: 6 (1 + 3 + 5 + 7)\nprint(sum_of_odd_Factors(30)) # Output: 9 (1 + 3 + 5 + 7 + 11) ",
        "generated_testcode": "assert sum_of_odd_Factors(10) == 1+3+5+7+9\n",
        "test": "assert sum_of_odd_Factors(30) == 24\nassert sum_of_odd_Factors(18) == 13\nassert sum_of_odd_Factors(2) == 1",
        "canonical_solution": "import math\r\ndef sum_of_odd_Factors(n): \r\n    res = 1\r\n    while n % 2 == 0: \r\n        n = n // 2 \r\n    for i in range(3,int(math.sqrt(n) + 1)): \r\n        count = 0\r\n        curr_sum = 1\r\n        curr_term = 1\r\n        while n % i == 0: \r\n            count+=1 \r\n            n = n // i \r\n            curr_term *= i \r\n            curr_sum += curr_term    \r\n        res *= curr_sum  \r\n    if n >= 2: \r\n        res *= (1 + n) \r\n    return res "
    },
    {
        "number": 854,
        "prompt": "Write a function which accepts an arbitrary list and converts it to a heap using heap queue algorithm.\ndef raw_heap(rawheap):\n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    heap = [rawheap[0]]\n    for i in range(1, len(rawheap)):\n        heap.append(rawheap[i])\n        parent = (i - 1) // 2\n        while i > 0 and heap[i] > heap[parent]:\n            heap[i], heap[parent] = heap[parent], heap[i]\n            i = parent\n            parent = (i - 1) // 2\n    return heap\n\n# Testing function\nprint(raw_heap([4, 10, 3, 5, 1, 2, 6, 9, 8, 7]))\n\n# Output: [4, 10, 3, 1, 5, 2, 6, 9, 8, 7]\n\n# Output should be [4, 10, 3, 1, 5, 2, 6, 9, 8, 7]",
        "generated_testcode": "assert raw_heap(list(range(10)) == [0, 9, 4, 5, 1, 2, 3, 6, 7, 8, 10, 11, 12, 13, 14, 15]\n\n# Explanation:\n# The heap queue algorithm is a way to convert a list to a heap data structure. In this case, we are using the heap queue algorithm to convert a list of numbers to a heap. The heap queue algorithm works by starting with the largest element in the list and swapping it with the last element in the list, then swapping it with the next largest element, and so on until the heap is complete. The largest element is the root of the heap, and the next largest element is the second largest, and so on. The function raw_heap() takes a list as input and returns a list with the heapified version of the input list. The test code checks if the output is equal to the expected output. ",
        "test": "assert raw_heap([25, 44, 68, 21, 39, 23, 89])==[21, 25, 23, 44, 39, 68, 89]\nassert raw_heap([25, 35, 22, 85, 14, 65, 75, 25, 58])== [14, 25, 22, 25, 35, 65, 75, 85, 58]\nassert raw_heap([4, 5, 6, 2])==[2, 4, 6, 5]",
        "canonical_solution": "import heapq as hq\r\ndef raw_heap(rawheap):\r\n  hq.heapify(rawheap)\r\n  return rawheap"
    },
    {
        "number": 855,
        "prompt": "Write a python function to check for even parity of a given number.\ndef check_Even_Parity(x): \n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    if x % 2 == 0: \n        return True\n    else: \n        return False\n\n# Test the function \nprint(check_Even_Parity(4)) ",
        "generated_testcode": "assert check_Even_Parity(4) == True\n",
        "test": "assert check_Even_Parity(10) == True\nassert check_Even_Parity(11) == False\nassert check_Even_Parity(18) == True",
        "canonical_solution": "def check_Even_Parity(x): \r\n    parity = 0\r\n    while (x != 0): \r\n        x = x & (x - 1) \r\n        parity += 1\r\n    if (parity % 2 == 0): \r\n        return True\r\n    else: \r\n        return False"
    },
    {
        "number": 856,
        "prompt": "Write a python function to find minimum adjacent swaps required to sort binary array.\ndef find_Min_Swaps(arr,n) : \n",
        "checkpoint": "7B",
        "pass": 5,
        "correct": true,
        "answer": "    arr = [0] + arr + [0]\n    sorted_arr = sorted(arr)\n    swaps = 0\n    for i in range(1,n+1) :\n        if arr[i] != sorted_arr[i] :\n            if sorted_arr.index(arr[i]) < i :\n                j = sorted_arr.index(arr[i])\n                arr[i], arr[j] = arr[j], arr[i]\n                swaps += 1\n    return swaps\n\n\n# Testing the function\narr = [1,0,0,1,1,0,1]\nn = len(arr)\nprint(find_Min_Swaps(arr,n))\n\n\n# Time Complexity : O(nlogn)\n# Space Complexity : O(n)\n",
        "generated_testcode": "assert find_Min_Swaps([1,0,1,1,0,0,1],5) == 1\n",
        "test": "assert find_Min_Swaps([1,0,1,0],4) == 3\nassert find_Min_Swaps([0,1,0],3) == 1\nassert find_Min_Swaps([0,0,1,1,0],5) == 2",
        "canonical_solution": "def find_Min_Swaps(arr,n) : \r\n    noOfZeroes = [0] * n \r\n    count = 0 \r\n    noOfZeroes[n - 1] = 1 - arr[n - 1] \r\n    for i in range(n-2,-1,-1) : \r\n        noOfZeroes[i] = noOfZeroes[i + 1] \r\n        if (arr[i] == 0) : \r\n            noOfZeroes[i] = noOfZeroes[i] + 1\r\n    for i in range(0,n) : \r\n        if (arr[i] == 1) : \r\n            count = count + noOfZeroes[i] \r\n    return count "
    },
    {
        "number": 857,
        "prompt": "Write a function to list out the list of given strings individually using map function.\ndef listify_list(list1):\n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    return list(map(lambda x: x, list1))\n\n\n#Example usage:\nlist1 = [\"apple\", \"banana\", \"cherry\", \"orange\"]\nprint(listify_list(list1))  # Output: [\"apple\", \"banana\", \"cherry\", \"orange\"]\n\nlist2 = [\"hello\", \"world\", \"python\"]\nprint(listify_list(list2))  # Output: [\"hello\", \"world\", \"python\"] ",
        "generated_testcode": "assert listify_list(['apple', 'banana', 'cherry', 'orange']) == ['apple', 'banana', 'cherry', 'orange']\n",
        "test": "assert listify_list(['Red', 'Blue', 'Black', 'White', 'Pink'])==[['R', 'e', 'd'], ['B', 'l', 'u', 'e'], ['B', 'l', 'a', 'c', 'k'], ['W', 'h', 'i', 't', 'e'], ['P', 'i', 'n', 'k']]\nassert listify_list(['python'])==[['p', 'y', 't', 'h', 'o', 'n']]\nassert listify_list([' red ', 'green',' black', 'blue ',' orange', 'brown'])==[[' ', 'r', 'e', 'd', ' '], ['g', 'r', 'e', 'e', 'n'], [' ', 'b', 'l', 'a', 'c', 'k'], ['b', 'l', 'u', 'e', ' '], [' ', 'o', 'r', 'a', 'n', 'g', 'e'], ['b', 'r', 'o', 'w', 'n']]",
        "canonical_solution": "def listify_list(list1):\r\n  result = list(map(list,list1)) \r\n  return result "
    },
    {
        "number": 858,
        "prompt": "Write a function to count number of lists in a given list of lists and square the count.\ndef count_list(input_list): \n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": true,
        "answer": "    count = 0\n    for element in input_list:\n        if isinstance(element, list):\n            count += 1\n            count_list(element)\n    return count\n\ndef square_count(input_list):\n    return count_list(input_list) ** 2\n\ninput_list = [1, 2, [3, 4, [5, 6], 7], 8, [9, [10, [11, [12, 13], 14], 15], 16, 17]]\nprint(square_count(input_list))  # Output: 4",
        "generated_testcode": "assert count_list([[1,2,3],[4,5],[6,7,8,9]]) == 3\n",
        "test": "assert count_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==25\nassert count_list([[1, 3], [5, 7], [9, 11], [13, 15, 17]] )==16\nassert count_list([[2, 4], [[6,8], [4,5,8]], [10, 12, 14]])==9",
        "canonical_solution": "def count_list(input_list): \r\n    return (len(input_list))**2"
    },
    {
        "number": 859,
        "prompt": "Write a function to generate all sublists of a given list.\ndef sub_lists(my_list):\n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    # Initialize a list to store the sublists\n    sub_list = []\n    # Initialize a helper function to generate all sublists of a given list\n    def sub_list_helper(my_list, index, sublist):\n        # If the index reaches the end of the list, add the current sublist to the result list\n        if index == len(my_list):\n            sub_list.append(sublist[:])\n            return\n        # Generate the sublist with the current element\n        sub_list_helper(my_list, index+1, sublist + [my_list[index]])\n        # Generate the sublist without the current element\n        sub_list_helper(my_list, index+1, sublist)\n    # Call the helper function with the first index and empty sublist\n    sub_list_helper(my_list, 0, [])\n    return sub_list\n    \n# Test the function with a sample list\nmy_list = [1, 2, 3, 4, 5]\nprint(sub_lists(my_list))\n# Output: [[], [1], [2], [3], [4], [5], [1, 2], [1, 3], [1, 4], [1, 5], [2, 3], [2, 4], [2, 5], [3, 4], [3, 5], [4, 5], [1, 2, 3], [1, 2, 4], [1,",
        "generated_testcode": "assert sub_lists([\"a\", \"b\", \"c\", \"d\"] == [[\"a\"], [\"b\"], [\"c\"], [\"d\"], [\"a\", \"b\"], [\"a\", \"c\"], [\"b\", \"c\"], [\"a\", \"d\"], [\"b\", \"d\"], [\"a\", \"c\", \"d\"], [\"a\", \"b\", \"c\", \"d\"]]\n\n# Test case 2\n",
        "test": "assert sub_lists([10, 20, 30, 40])==[[], [10], [20], [30], [40], [10, 20], [10, 30], [10, 40], [20, 30], [20, 40], [30, 40], [10, 20, 30], [10, 20, 40], [10, 30, 40], [20, 30, 40], [10, 20, 30, 40]]\nassert sub_lists(['X', 'Y', 'Z'])==[[], ['X'], ['Y'], ['Z'], ['X', 'Y'], ['X', 'Z'], ['Y', 'Z'], ['X', 'Y', 'Z']]\nassert sub_lists([1,2,3])==[[],[1],[2],[3],[1,2],[1,3],[2,3],[1,2,3]]",
        "canonical_solution": "from itertools import combinations\r\ndef sub_lists(my_list):\r\n\tsubs = []\r\n\tfor i in range(0, len(my_list)+1):\r\n\t  temp = [list(x) for x in combinations(my_list, i)]\r\n\t  if len(temp)>0:\r\n\t    subs.extend(temp)\r\n\treturn subs"
    },
    {
        "number": 860,
        "prompt": "Write a function to check whether the given string is ending with only alphanumeric characters or not using regex.\ndef check_alphanumeric(string): \n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": true,
        "answer": "    import re\n    if re.match(\"^[a-zA-Z0-9]+$\", string):\n        return True\n    else:\n        return False\n\n# Test the function\nprint(check_alphanumeric(\"Hello123\")) # True\nprint(check_alphanumeric(\"HelloWorld\")) # False\nprint(check_alphanumeric(\"Hello1234World\")) # True\nprint(check_alphanumeric(\"Hello\")) # False\nprint(check_alphanumeric(\"12345\")) # False\nprint(check_alphanumeric(\"!HelloWorld\")) # False\n",
        "generated_testcode": "assert check_alphanumeric(\"hello123\") == True\n",
        "test": "assert check_alphanumeric(\"dawood@\") == 'Discard'\nassert check_alphanumeric(\"skdmsam326\") == 'Accept'\nassert check_alphanumeric(\"cooltricks@\") == 'Discard'",
        "canonical_solution": "import re \r\nregex = '[a-zA-z0-9]$'\r\ndef check_alphanumeric(string): \r\n\tif(re.search(regex, string)): \r\n\t\treturn (\"Accept\") \r\n\telse: \r\n\t\treturn (\"Discard\") "
    },
    {
        "number": 861,
        "prompt": "Write a function to find all anagrams of a string in a given list of strings using lambda function.\ndef anagram_lambda(texts,str):\n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    return list(filter(lambda x: sorted(x)==sorted(str), texts))\n\n#test\nanagrams = ['cinema', 'iceman', 'camine', 'ecnam', 'eniac', 'bob', 'race', 'care', 'abba', 'baba', 'act', 'cat', 'tac', 'catty', 'dab', 'abd', 'dog', 'god']\ntexts = ['hi', 'hello', 'world', 'python', 'code', 'race', 'able', 'able', 'cat', 'act', 'catty', 'dog', 'dog']\nprint(anagram_lambda(texts,'cat'))\n\n#Explanation:\n#sorted function is used to sort the string in lexicographical order\n#filter function is used to filter the list based on lambda function which returns True if the sorted text is equal to sorted str\n#Finally, the lambda function returns a list of anagrams of the given string \"cat\"\n#Output:['cat', 'catty'] ",
        "generated_testcode": "assert anagram_lambda([\"listen\",\"silent\",\"enlist\",\"least\",\"steel\",\"flee\",\"listen\",\"tiller\",\"post\",\"stop\",\"toil\",\"peace\",\"stole\",\"pole\"], \"listen\") == [\"listen\",\"silent\",\"enlist\",\"least\"]\n",
        "test": "assert anagram_lambda([\"bcda\", \"abce\", \"cbda\", \"cbea\", \"adcb\"],\"abcd\")==['bcda', 'cbda', 'adcb']\nassert anagram_lambda([\"recitals\",\" python\"], \"articles\" )==[\"recitals\"]\nassert anagram_lambda([\" keep\",\" abcdef\",\" xyz\"],\" peek\")==[\" keep\"]",
        "canonical_solution": "from collections import Counter \r\ndef anagram_lambda(texts,str):\r\n  result = list(filter(lambda x: (Counter(str) == Counter(x)), texts)) \r\n  return result"
    },
    {
        "number": 862,
        "prompt": "Write a function to find the occurrences of n most common words in a given text.\ndef n_common_words(text,n):\n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    words = text.lower().split()\n    word_count = {}\n    for word in words:\n        if word in word_count:\n            word_count[word] += 1\n        else:\n            word_count[word] = 1\n    sorted_words = sorted(word_count.items(),key=lambda x:x[1],reverse=True)\n    return sorted_words[:n]\n\n# Test the function\ntext = \"This is a sample text with some sample words. This is only a sample text.\"\nprint(n_common_words(text,2))\n# Output: [('sample', 2), ('text', 2)]\n\ntext = \"Python is an amazing language for data science. Python is a great language for data science.\"\nprint(n_common_words(text,2))\n# Output: [('python', 2), ('language', 2)]\n\ntext = \"Python is an amazing language for data science. Python is a great language for data science. Python is an amazing language for data science.\"\nprint(n_common_words(text,2))\n# Output: [('python', 3), ('language', 2)]\n\ntext = \"Python is an amazing language for data science. Python is a great language for data science. Python is an amazing language for data science. Python is an amazing language for data science.\"\nprint(n_common_words(text,3))\n# Output: [('python', 4), ('language', 2), ('amazing', 2",
        "generated_testcode": "assert n_common_words(text=\"This is a sample text with some words to find the occurrences of common words\", n=2) == ['is', 'words']\n",
        "test": "assert n_common_words(\"python is a programming language\",1)==[('python', 1)]\nassert n_common_words(\"python is a programming language\",1)==[('python', 1)]\nassert n_common_words(\"python is a programming language\",5)==[('python', 1),('is', 1), ('a', 1), ('programming', 1), ('language', 1)]",
        "canonical_solution": "from collections import Counter\r\nimport re\r\ndef n_common_words(text,n):\r\n  words = re.findall('\\w+',text)\r\n  n_common_words= Counter(words).most_common(n)\r\n  return list(n_common_words)"
    },
    {
        "number": 863,
        "prompt": "Write a function to find the length of the longest sub-sequence such that elements in the subsequences are consecutive integers.\ndef find_longest_conseq_subseq(arr, n): \n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    if not arr: \n        return 0\n    arr.sort() \n    max_len = 1\n    curr_len = 1\n    for i in range(1, n): \n        if arr[i] == arr[i-1] + 1: \n            curr_len += 1\n            max_len = max(max_len, curr_len)\n        else: \n            curr_len = 1\n    return max_len\n\n# Driver code \narr = [1, 9, 3, 7, 2, 1, 5, 8, 4, 6, 7, 9] \nn = len(arr) \nprint(\"Length of the longest subsequence:\", find_longest_conseq_subseq(arr, n)) ",
        "generated_testcode": "assert find_longest_conseq_subseq([1,9,3,7,1,10,4,20,15,2,6,5,11,8], 9) == 5\n",
        "test": "assert find_longest_conseq_subseq([1, 2, 2, 3], 4) == 3\nassert find_longest_conseq_subseq([1, 9, 3, 10, 4, 20, 2], 7) == 4\nassert find_longest_conseq_subseq([36, 41, 56, 35, 44, 33, 34, 92, 43, 32, 42], 11) == 5",
        "canonical_solution": "def find_longest_conseq_subseq(arr, n): \r\n\tans = 0\r\n\tcount = 0\r\n\tarr.sort() \r\n\tv = [] \r\n\tv.append(arr[0]) \r\n\tfor i in range(1, n): \r\n\t\tif (arr[i] != arr[i - 1]): \r\n\t\t\tv.append(arr[i]) \r\n\tfor i in range(len(v)): \r\n\t\tif (i > 0 and v[i] == v[i - 1] + 1): \r\n\t\t\tcount += 1\r\n\t\telse: \r\n\t\t\tcount = 1\r\n\t\tans = max(ans, count) \r\n\treturn ans "
    },
    {
        "number": 864,
        "prompt": "Write a function to find palindromes in a given list of strings using lambda function.\ndef palindrome_lambda(texts):\n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    return list(filter(lambda text: text == text[::-1], texts)\n\n# Example usage:\ntexts = ['level', 'racecar', 'hello', 'madam', 'hello', 'madam', 'racecar', 'race', 'code', 'code']\nprint(palindrome_lambda(texts)) # Output: ['level', 'racecar', 'madam', 'code'] ",
        "generated_testcode": "assert palindrome_lambda([\"racecar\", \"hello\", \"level\", \"world\", \"python\", \"madam\"]) == [\"racecar\", \"madam\"]\n",
        "test": "assert palindrome_lambda([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"])==['php', 'aaa']\nassert palindrome_lambda([\"abcd\", \"Python\", \"abba\", \"aba\"])==['abba', 'aba']\nassert palindrome_lambda([\"abcd\", \"abbccbba\", \"abba\", \"aba\"])==['abbccbba', 'abba', 'aba']",
        "canonical_solution": "def palindrome_lambda(texts):\r\n  result = list(filter(lambda x: (x == \"\".join(reversed(x))), texts))\r\n  return result"
    },
    {
        "number": 865,
        "prompt": "Write a function to print n-times a list using map function.\ndef ntimes_list(nums,n):\n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    return list(map(lambda x:nums*n,nums))\n\n\n#Test the function with different input\nprint(ntimes_list([1,2,3,4,5],3))\nprint(ntimes_list([10,20,30,40],2)\nprint(ntimes_list([50,60,70],4)\n",
        "generated_testcode": "assert ntimes_list([1,2,3,4,5],3) == [1,2,3,4,5,1,2,3,4,5,1,2,3,4,5]\n",
        "test": "assert ntimes_list([1, 2, 3, 4, 5, 6, 7],3)==[3, 6, 9, 12, 15, 18, 21]\nassert ntimes_list([1, 2, 3, 4, 5, 6, 7],4)==[4, 8, 12, 16, 20, 24, 28]\nassert ntimes_list([1, 2, 3, 4, 5, 6, 7],10)==[10, 20, 30, 40, 50, 60, 70]",
        "canonical_solution": "def ntimes_list(nums,n):\r\n    result = map(lambda x:n*x, nums) \r\n    return list(result)"
    },
    {
        "number": 866,
        "prompt": "Write a function to check whether the given month name contains 31 days or not.\ndef check_monthnumb(monthname2):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": true,
        "answer": "    monthname = monthname2.lower()\n    if monthname == \"january\" or monthname == \"march\" or monthname == \"may\" or monthname == \"july\" or monthname == \"july\" or monthname == \"august\" or monthname == \"october\" or monthname == \"december\":\n        return True\n    else:\n        return False\n\nprint(check_monthnumb(\"February\"))\nprint(check_monthnumb(\"April\"))\nprint(check_monthnumb(\"January\"))\nprint(check_monthnumb(\"September\"))\nprint(check_monthnumb(\"November\"))\nprint(check_monthnumb(\"December\")) ",
        "generated_testcode": "assert check_monthnumb(\"January\") == True\n",
        "test": "assert check_monthnumb(\"February\")==False\nassert check_monthnumb(\"January\")==True\nassert check_monthnumb(\"March\")==True",
        "canonical_solution": "def check_monthnumb(monthname2):\r\n  if(monthname2==\"January\" or monthname2==\"March\"or monthname2==\"May\" or monthname2==\"July\" or monthname2==\"Augest\" or monthname2==\"October\" or monthname2==\"December\"):\r\n    return True\r\n  else:\r\n    return False"
    },
    {
        "number": 867,
        "prompt": "Write a python function to add a minimum number such that the sum of array becomes even.\ndef min_Num(arr,n):  \n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    if sum(arr) % 2 == 0:  \n        return 0  \n    else:  \n        return 1  \n  \n# example:  \narr = [1,2,3,4]  \nn = 3  \nprint(min_Num(arr,n))  \n# Output: 1  \n  \narr = [2,3,5,6]  \nn = 4  \nprint(min_Num(arr,n))  \n# Output: 1  \n  \narr = [1,2,3,4,5]  \nn = 5  \nprint(min_Num(arr,n))  \n# Output: 1 ",
        "generated_testcode": "assert min_Num([1,2,3,4,5], 6) == 0\n",
        "test": "assert min_Num([1,2,3,4,5,6,7,8,9],9) == 1\nassert min_Num([1,2,3,4,5,6,7,8],8) == 2\nassert min_Num([1,2,3],3) == 2",
        "canonical_solution": "def min_Num(arr,n):  \r\n    odd = 0\r\n    for i in range(n): \r\n        if (arr[i] % 2): \r\n            odd += 1 \r\n    if (odd % 2): \r\n        return 1\r\n    return 2"
    },
    {
        "number": 868,
        "prompt": "Write a python function to find the length of the last word in a given string.\ndef length_Of_Last_Word(a): \n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    # create an empty list to store the words\n    words = []\n    # loop through the string\n    for i in a.split():\n        words.append(i)\n    # find the last element in the list and return its length\n    return len(words[-1])\n\n# Test cases\nprint(length_Of_Last_Word(\"Hello world\")) # 5\nprint(length_Of_Last_Word(\"Python programming is fun\")) # 3\nprint(length_Of_Last_Word(\"I love programming\")) # 9\nprint(length_Of_Last_Word(\"The quick brown fox\")) # 3\n\n\n# Time complexity: O(n), where n is the length of the string. We loop through the string only once and split it into words and store them in a list, then return the length of the last element of the list. ",
        "generated_testcode": "assert length_Of_Last_Word(\"Hello world\") == 5\n",
        "test": "assert length_Of_Last_Word(\"python language\") == 8\nassert length_Of_Last_Word(\"PHP\") == 3\nassert length_Of_Last_Word(\"\") == 0",
        "canonical_solution": "def length_Of_Last_Word(a): \r\n    l = 0\r\n    x = a.strip() \r\n    for i in range(len(x)): \r\n        if x[i] == \" \": \r\n            l = 0\r\n        else: \r\n            l += 1\r\n    return l "
    },
    {
        "number": 869,
        "prompt": "Write a function to remove sublists from a given list of lists, which are outside a given range.\ndef remove_list_range(list1, leftrange, rigthrange):\n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    return [sublist for sublist in list1 if leftrange <= min(sublist) and max(sublist) <= rigthrange]\n\n#Example usage:\nlist1 = [[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12], [13, 14, 15], [16, 17, 18]]\nleftrange = 3\nrigthrange = 10\nprint(remove_list_range(list1, leftrange, rigthrange)) #Output: [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n#Explanation: the sublists [10, 11, 12] and [13, 14, 15] are outside the given range and were removed\n\n# Note: if a sublist is entirely outside the range, it should also be removed. If a sublist contains elements within the range, it should be kept\nlist1 = [[1, 2, 3], [4, 5, 6], [11, 12, 13], [14, 15, 16], [17, 18, 19]]\nleftrange = 5\nrigthrange = 12\nprint(remove_list_range(list1, leftrange, rigthrange)) #Output: [[1, ",
        "generated_testcode": "assert remove_list_range([[1,2,3],[4,5,6],[7,8,9],[10,11,12],[13,14,15],[16,17,18],[19,20,21],[22,23,24],[25,26,27],[28,29,30],[31,32,33],[34,35,36],[37,38,39],[40,41,42],[43,44,45],[46,47,48],[49,50,51],[52,53,54],[55,56,57],[58,59,60],[61,62,63],[64,65,66],[67,68,69],[70,71,72],[73,74,75],[76,77,78],[79,80,81],[82,83,84],[85,86,87],[88,89,90],[91,92,93],[94,95,96],[97,98,99],[100,1101,1",
        "test": "assert remove_list_range([[2], [0], [1, 2, 3], [0, 1, 2, 3, 6, 7], [9, 11], [13, 14, 15, 17]],13,17)==[[13, 14, 15, 17]]\nassert remove_list_range([[2], [0], [1, 2, 3], [0, 1, 2, 3, 6, 7], [9, 11], [13, 14, 15, 17]],1,3)==[[2], [1, 2, 3]]\nassert remove_list_range([[2], [0], [1, 2, 3], [0, 1, 2, 3, 6, 7], [9, 11], [13, 14, 15, 17]],0,7)==[[2], [0], [1, 2, 3], [0, 1, 2, 3, 6, 7]]",
        "canonical_solution": "def remove_list_range(list1, leftrange, rigthrange):\r\n   result = [i for i in list1 if (min(i)>=leftrange and max(i)<=rigthrange)]\r\n   return result"
    },
    {
        "number": 870,
        "prompt": "Write a function to calculate the sum of the positive numbers of a given list of numbers using lambda function.\ndef sum_positivenum(nums):\n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    return sum(filter(lambda x: x>0, nums)\n\n\n#Example:\nnums = [1, -2, 3, 4, -5, 6, -7, 8, 9]\nprint(sum_positivenum(nums)) #output: 24\n\nnums = [-1, -2, 3, -4, 5, -6, -7, 8]\nprint(sum_positivenum(nums)) #output: 15\n\nnums = [1, 2, 3, -4, -5, -6, 7, -8]\nprint(sum_positivenum(nums)) #output: 6 ",
        "generated_testcode": "assert sum_positivenum([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 25\n",
        "test": "assert sum_positivenum([2, 4, -6, -9, 11, -12, 14, -5, 17])==48\nassert sum_positivenum([10,15,-14,13,-18,12,-20])==50\nassert sum_positivenum([19, -65, 57, 39, 152,-639, 121, 44, 90, -190])==522",
        "canonical_solution": "def sum_positivenum(nums):\r\n  sum_positivenum = list(filter(lambda nums:nums>0,nums))\r\n  return sum(sum_positivenum)"
    },
    {
        "number": 871,
        "prompt": "Write a python function to check whether the given strings are rotations of each other or not.\ndef are_Rotations(string1,string2): \n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    if len(string1) != len(string2):\n        return False\n    concatenated = string1+string1\n    return string2 in concatenated\n\n# Test the function\nprint(are_Rotations(\"waterbottle\",\"erbottlewat\")) # True\nprint(are_Rotations(\"hello\",\"world\")) # False\nprint(are_Rotations(\"hello\",\"llohewo\")) # True\nprint(are_Rotations(\"hello\",\"world\")) # False\nprint(are_Rotations(\"hello\",\"olleh\")) # False\n",
        "generated_testcode": "assert are_Rotations(\"waterbottle\",\"erbottlewat\") == True\n",
        "test": "assert are_Rotations(\"abc\",\"cba\") == False\nassert are_Rotations(\"abcd\",\"cdba\") == False\nassert are_Rotations(\"abacd\",\"cdaba\") == True",
        "canonical_solution": "def are_Rotations(string1,string2): \r\n    size1 = len(string1) \r\n    size2 = len(string2) \r\n    temp = '' \r\n    if size1 != size2: \r\n        return False\r\n    temp = string1 + string1 \r\n    if (temp.count(string2)> 0): \r\n        return True\r\n    else: \r\n        return False"
    },
    {
        "number": 872,
        "prompt": "Write a function to check if a nested list is a subset of another nested list.\ndef check_subset(list1,list2): \n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    # Initialize a set to store the unique elements of list 1\n    set1 = set() \n    for sublist in list1: \n        for element in sublist: \n            set1.add(element) \n    \n    # Check if all elements of list2 are in set1 \n    for sublist in list2: \n        for element in sublist: \n            if element not in set1: \n                return False \n    return True \n\n# Test cases \nlist1 = [[1,2],[3,4],[5,6],[7]] \nlist2 = [[1,2],[3,4],[5,6],[7],[8]] \nlist3 = [[1,2],[3,4],[5,6]] \nlist4 = [[1,2],[3,4],[5,6],[7],[8],[9],[10]] \nlist5 = [[1,2],[3,4],[5,6],[7],[8]] \n\nprint(check_subset(list1,list2)) # Output: True \nprint(check_subset(list1,list3)) # Output: True \nprint(check_subset(list1,list4)) # Output: False \nprint(check_subset(list1,list5)) # Output: False ",
        "generated_testcode": "assert check_subset([[1,2,3], [4,5,6], [7,8]], [[1,2,3], [4,5,6], [7,8], [9,10]]) == False\n",
        "test": "assert check_subset([[1, 3], [5, 7], [9, 11], [13, 15, 17]] ,[[1, 3],[13,15,17]])==True\nassert check_subset([[1, 2], [2, 3], [3, 4], [5, 6]],[[3, 4], [5, 6]])==True\nassert check_subset([[[1, 2], [2, 3]], [[3, 4], [5, 7]]],[[[3, 4], [5, 6]]])==False",
        "canonical_solution": "def check_subset(list1,list2): \r\n    return all(map(list1.__contains__,list2)) "
    },
    {
        "number": 873,
        "prompt": "Write a function to solve the fibonacci sequence using recursion.\ndef fibonacci(n):\n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    if n <= 1:\n        return n\n    else:\n        return fibonacci(n-1) + fibonacci(n-2)\n\ndef solve(n):\n    if n <= 0:\n        return []\n    elif n == 1:\n        return [0]\n    elif n == 2:\n        return [0, 1]\n    else:\n        fib_seq = [0, 1]\n        for i in range(2, n):\n            fib_seq.append(fib_seq[i-1] + fib_seq[i-2])\n        return fib_seq\n\nprint(solve(6)) # Output: [0, 1, 1, 1, 2, 3, 5, 8, 13]\nprint(fibonacci(6)) # Output: 8\n\n\n# The second function is correct, but the first function is not recursive and will not work for larger values of n. ",
        "generated_testcode": "assert fibonacci(0) == 0\n",
        "test": "assert fibonacci(7) == 13\nassert fibonacci(8) == 21\nassert fibonacci(9) == 34",
        "canonical_solution": "def fibonacci(n):\r\n  if n == 1 or n == 2:\r\n    return 1\r\n  else:\r\n    return (fibonacci(n - 1) + (fibonacci(n - 2)))"
    },
    {
        "number": 874,
        "prompt": "Write a python function to check if the string is a concatenation of another string.\ndef check_Concat(str1,str2):\n",
        "checkpoint": "7B",
        "pass": 6,
        "correct": true,
        "answer": "    \"\"\"\n    :param str1: A string\n    :param str2: A string\n    :return: True if str1 is a concatenation of str2, otherwise False\n    \"\"\"\n    if len(str1) == 0 and len(str2) == 0:\n        return True\n    elif len(str1) == len(str2):\n        return str1 == str2\n    else:\n        return str1 in str2 * (len(str1)//len(str2)) + str2[:len(str1)%len(str2)]\n\n\n# Test cases\nprint(check_Concat(\"hello\", \"hello\")) # True\nprint(check_Concat(\"world\", \"worl\")) # True\nprint(check_Concat(\"hello\", \"llohe\")) # True\nprint(check_Concat(\"hello\", \"hello world\")) # False\nprint(check_Concat(\"worldhello\", \"llohe\")) # True\nprint(check_Concat(\"world\", \"wor\")) # False\nprint(check_Concat(\"hellohello\", \"hello\")) # True\nprint(check_Concat(\"abab\", \"ab\")) # False\nprint(check_Concat(\"abcd\", \"abcdabcdabcd\")) # True\nprint(check_Concat(\"abc\", \"abcdabcdabcd\")) # True\nprint(check_Concat(\"\", \"abcdabcdabcd\")) # True\nprint(check_Concat(\"abcdabcdabcd\", \"abcdabcd\")) # False\n",
        "generated_testcode": "assert check_Concat(\"abc\",\"abcd\") == True\n",
        "test": "assert check_Concat(\"abcabcabc\",\"abc\") == True\nassert check_Concat(\"abcab\",\"abc\") == False\nassert check_Concat(\"aba\",\"ab\") == False",
        "canonical_solution": "def check_Concat(str1,str2):\r\n    N = len(str1)\r\n    M = len(str2)\r\n    if (N % M != 0):\r\n        return False\r\n    for i in range(N):\r\n        if (str1[i] != str2[i % M]):\r\n            return False         \r\n    return True"
    },
    {
        "number": 875,
        "prompt": "Write a function to find the minimum difference in the tuple pairs of given tuples.\ndef min_difference(test_list):\n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    min_diff = float('inf')\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            diff = abs(test_list[i][1] - test_list[j][0])\n            if diff < min_diff:\n                min_diff = diff\n    return min_diff\n\n\n# Test cases\nprint(min_difference([(1, 5, 10, 2, 20]))\nprint(min_difference([(10, 5, 20, 30, 40, 2, 100]))\nprint(min_difference([1, 2, 3, 4, 5, 6]))\nprint(min_difference([2, 3, 10, 11]))",
        "generated_testcode": "assert min_difference([(1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 0\n",
        "test": "assert min_difference([(3, 5), (1, 7), (10, 3), (1, 2)]) == 1\nassert min_difference([(4, 6), (12, 8), (11, 4), (2, 13)]) == 2\nassert min_difference([(5, 17), (3, 9), (12, 5), (3, 24)]) == 6",
        "canonical_solution": "def min_difference(test_list):\r\n  temp = [abs(b - a) for a, b in test_list]\r\n  res = min(temp)\r\n  return (res) "
    },
    {
        "number": 876,
        "prompt": "Write a python function to find lcm of two positive integers.\ndef lcm(x, y):\n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    if x > y:\n        greater = x\n    else:\n        greater = y\n    while True:\n        if greater % x == 0 and greater % y == 0:\n            lcm = greater\n            break\n        greater += 1\n    return lcm\n\nprint(lcm(12, 18)) # Output: 36\nprint(lcm(24, 12)) # Output: 24\nprint(lcm(7, 5)) # Output: 35\nprint(lcm(9, 17)) # Output: 54\nprint(lcm(42, 63)) # Output: 42\nprint(lcm(10, 20)) # Output: 60\nprint(lcm(18, 24)) # Output: 48\n",
        "generated_testcode": "assert lcm(3, 4) == 12\n",
        "test": "assert lcm(4,6) == 12\nassert lcm(15,17) == 255\nassert lcm(2,6) == 6",
        "canonical_solution": "def lcm(x, y):\r\n   if x > y:\r\n       z = x\r\n   else:\r\n       z = y\r\n   while(True):\r\n       if((z % x == 0) and (z % y == 0)):\r\n           lcm = z\r\n           break\r\n       z += 1\r\n   return lcm"
    },
    {
        "number": 877,
        "prompt": "Write a python function to sort the given string.\ndef sort_String(str) : \n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": true,
        "answer": "    str_list = list(str)\n    str_list.sort()\n    return ''.join(str_list)\n\n# Example:\nsort_String(\"hello world\") # \"dehllloorw\"\nsort_String(\"python\") # \"hnopyt\"\n\n# Note: Sort the string based on the ASCII values of characters. ",
        "generated_testcode": "assert sort_String(\"hello\") == \"ehllo\"\n",
        "test": "assert sort_String(\"cba\") == \"abc\"\nassert sort_String(\"data\") == \"aadt\"\nassert sort_String(\"zxy\") == \"xyz\"",
        "canonical_solution": "def sort_String(str) : \r\n    str = ''.join(sorted(str)) \r\n    return (str) "
    },
    {
        "number": 878,
        "prompt": "Write a function to check if the given tuple contains only k elements.\ndef check_tuples(test_tuple, K):\n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    if len(test_tuple) != K:\n        return False\n    for element in test_tuple:\n        if not isinstance(element, int):\n            return False\n    return True\n\n\n# Test cases\nprint(check_tuples((1, 2, 3, 4, 5, 6, 7, 8, 9), 6))  # True\nprint(check_tuples((1, 2, \"a\", 4, 5, 6, 7, 8, 9), 6) # False\nprint(check_tuples((1, 2, 3, 4, 5, 6, 7), 6) # False\nprint(check_tuples((1, 2, 3, 4, 5, 6, 7, 8, 9, 10), 6) # False\nprint(check_tuples((1, 2, 3, 4, 5, 6, 7, 8, 9), 5) # False\n",
        "generated_testcode": "assert check_tuples((1, 2, 3, 4, 5, 6, 7, 8, 9), 6) == True\n",
        "test": "assert check_tuples((3, 5, 6, 5, 3, 6),[3, 6, 5]) == True\nassert check_tuples((4, 5, 6, 4, 6, 5),[4, 5, 6]) == True\nassert check_tuples((9, 8, 7, 6, 8, 9),[9, 8, 1]) == False",
        "canonical_solution": "def check_tuples(test_tuple, K):\r\n  res = all(ele in K for ele in test_tuple)\r\n  return (res) "
    },
    {
        "number": 879,
        "prompt": "Write a function that matches a string that has an 'a' followed by anything, ending in 'b' by using regex.\ndef text_match(text):\n",
        "checkpoint": "7B",
        "pass": 6,
        "correct": true,
        "answer": "    import re\n    pattern = r'a.*b'\n    return bool(re.search(pattern, text))\n\n# Test cases\nprint(text_match('aab')) # True\nprint(text_match('abc')) # False\nprint(text_match('abcab')) # False\nprint(text_match('aba')) # True\nprint(text_match('aab')) # True\nprint(text_match('aabcd')) # True\nprint(text_match('abacad')) # False\nprint(text_match('abaa')) # True\nprint(text_match('aabd')) # True\nprint(text_match('aabcd')) # True\nprint(text_match('abc')) # False\nprint(text_match('ab')) # False\nprint(text_match('aaab')) # True\nprint(text_match('a')) # False\nprint(text_match('abab')) # True\nprint(text_match('ab')) # False",
        "generated_testcode": "assert text_match(\"ab\") == True\n",
        "test": "assert text_match(\"aabbbbd\") == 'Not matched!'\nassert text_match(\"aabAbbbc\") == 'Not matched!'\nassert text_match(\"accddbbjjjb\") == 'Found a match!'",
        "canonical_solution": "import re\r\ndef text_match(text):\r\n  patterns = 'a.*?b$'\r\n  if re.search(patterns,  text):\r\n    return ('Found a match!')\r\n  else:\r\n    return ('Not matched!')"
    },
    {
        "number": 880,
        "prompt": "Write a python function to find number of solutions in quadratic equation.\ndef Check_Solution(a,b,c) : \n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    if a == 0 : \n        if b == 0 : \n            if c == 0 : \n                return \"Infinite solutions\"\n            else : \n                return 0\n        else : \n            return 0\n    else : \n        if 2*b**2 - 4*a*c < 0 : \n            return 0\n        else : \n            return 2\n    \n#Testing the function \na = 1 \nb = -3 \nc = 2 \nprint(Check_Solution(a,b,c)) ",
        "generated_testcode": "assert Check_Solution(1, -3, 2) == 2\n",
        "test": "assert Check_Solution(2,5,2) == \"2 solutions\"\nassert Check_Solution(1,1,1) == \"No solutions\"\nassert Check_Solution(1,2,1) == \"1 solution\"",
        "canonical_solution": "def Check_Solution(a,b,c) : \r\n    if ((b*b) - (4*a*c)) > 0 : \r\n        return (\"2 solutions\") \r\n    elif ((b*b) - (4*a*c)) == 0 : \r\n        return (\"1 solution\") \r\n    else : \r\n        return (\"No solutions\") "
    },
    {
        "number": 881,
        "prompt": "Write a function to find the sum of first even and odd number of a given list.\ndef sum_even_odd(list1):\n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    even_sum = 0\n    odd_sum = 0\n    for i in list1:\n        if i % 2 == 0:\n            even_sum += i\n        else:\n            odd_sum += i\n    return even_sum, odd_sum\n\n\n# Test the function with the given test cases\nprint(sum_even_odd([1, 2, 3, 4, 5, 6, 7, 8]))  # Output: (12, 15)\nprint(sum_even_odd([2, 4, 6, 8, 10, 12]))  # Output: (30, 0)\nprint(sum_even_odd([1, 3, 5, 7, 9]))  # Output: (0, 20)\nprint(sum_even_odd([0, 2, 4, 6, 8]))  # Output: (12, 0)\nprint(sum_even_odd([1, 3, 5, 7, 9, 10]))  # Output: (10, 20)\nprint(sum_even_odd([0, 1, 2, 3, 4, 5]))  # Output: (6, 6)\n\n\n# Sample Input: [1, 2, 3, 4, 5, 6, 7, 8]\n# Sample Output: (12, 15)\n# Explanation:",
        "generated_testcode": "assert sum_even_odd([1,2,3,4,5,6,7,8,9]) == 10\n",
        "test": "assert sum_even_odd([1,3,5,7,4,1,6,8])==5\nassert sum_even_odd([1,2,3,4,5,6,7,8,9,10])==3\nassert sum_even_odd([1,5,7,9,10])==11",
        "canonical_solution": "def sum_even_odd(list1):\r\n    first_even = next((el for el in list1 if el%2==0),-1)\r\n    first_odd = next((el for el in list1 if el%2!=0),-1)\r\n    return (first_even+first_odd)"
    },
    {
        "number": 882,
        "prompt": "Write a function to caluclate perimeter of a parallelogram.\ndef parallelogram_perimeter(b,h):\n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    return 2 * (b + h)\n\n# Test the function with sample inputs\nprint(parallelogram_perimeter(4, 6)) # Output: 16\nprint(parallelogram_perimeter(10, 8)) # Output: 30\nprint(parallelogram_perimeter(12, 15)) # Output: 34\n\n\n# Write a function to caluclate the area of a triangle using Heron's formula\ndef triangle_area(a,b,c):\n    s = (a + b + c) / 2\n    return (s * (s - a) * (s - b) * (s - c)) ** 0.5\n\n# Test the function with sample inputs\nprint(triangle_area(5, 6, 7)) # Output: 10.825531755295598131\nprint(triangle_area(7, 8, 9)) # Output: 19.6150001146067310355\nprint(triangle_area(10, 11, 12)) # Output: 44.721364763707611625\n\n# Write a function to caluclate the area of a rectangle\ndef rectangle_area(l, w):\n    return l * w\n\n# Test the function with sample inputs\nprint(rectangle_area(4, ",
        "generated_testcode": "assert parallelogram_perimeter(4, 6) == 16\n",
        "test": "assert parallelogram_perimeter(10,20)==400\nassert parallelogram_perimeter(15,20)==600\nassert parallelogram_perimeter(8,9)==144",
        "canonical_solution": "def parallelogram_perimeter(b,h):\r\n  perimeter=2*(b*h)\r\n  return perimeter"
    },
    {
        "number": 883,
        "prompt": "Write a function to find numbers divisible by m and n from a list of numbers using lambda function.\ndef div_of_nums(nums,m,n):\n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    return list(filter(lambda x: x%m==0 and x%n==0,nums))\n\n# Example usage\nnums = [12, 15, 18, 21, 24, 27, 30, 33, 36, 40, 45, 48, 51, 54, 57, 60]\nm=3\nn=5\nprint(div_of_nums(nums,m,n))  # Output: [15, 30, 45, 54] ",
        "generated_testcode": "assert div_of_nums([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15], 3, 4) == [12, 15]\n",
        "test": "assert div_of_nums([19, 65, 57, 39, 152, 639, 121, 44, 90, 190],2,4)==[ 152,44]\nassert div_of_nums([1, 2, 3, 5, 7, 8, 10],2,5)==[10]\nassert div_of_nums([10,15,14,13,18,12,20],10,5)==[10,20]",
        "canonical_solution": "def div_of_nums(nums,m,n):\r\n result = list(filter(lambda x: (x % m == 0 and x % n == 0), nums)) \r\n return result"
    },
    {
        "number": 884,
        "prompt": "Write a python function to check whether all the bits are within a given range or not.\ndef all_Bits_Set_In_The_Given_Range(n,l,r): \n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    def is_bit_set(num,pos):\n        mask = 1 << pos\n        return bool(num & mask)\n\n    # traverse all the bits from l to r and check if they are set or not\n    for i in range(l,r+1):\n        if not is_bit_set(n,i):\n            return False\n    return True\n\n# test the function\nn = 7 # binary 1111\nl = 0\nr = 2\nprint(all_Bits_Set_In_The_Given_Range(n,l,r)) # Output: True\n\nn = 6 # binary 110\nl = 0\nr = 2\nprint(all_Bits_Set_In_The_Given_Range(n,l,r)) # Output: False\n\nn = 3 # binary 11\nl = 2\nr = 4\nprint(all_Bits_Set_In_The_Given_Range(n,l,r)) # Output: True\n\nn = 3 # binary 11\nl = 5\nr = 6\nprint(all_Bits_Set_In_The_Given_Range(n,l,r)) # Output: False\n\nn = 15 # binary 111111\nl = 2\nr = 6\nprint(all_Bits_Set_In_The_Given_Range(n,l,r)) # Output: True\n\nn",
        "generated_testcode": "assert all_Bits_Set_In_The_Given_Range(10, 1, 3) == True\n",
        "test": "assert all_Bits_Set_In_The_Given_Range(10,2,1) == True \nassert all_Bits_Set_In_The_Given_Range(5,2,4) == False\nassert all_Bits_Set_In_The_Given_Range(22,2,3) == True ",
        "canonical_solution": "def all_Bits_Set_In_The_Given_Range(n,l,r): \r\n    num = ((1 << r) - 1) ^ ((1 << (l - 1)) - 1) \r\n    new_num = n & num \r\n    if (num == new_num): \r\n        return True\r\n    return False"
    },
    {
        "number": 885,
        "prompt": "Write a python function to check whether the two given strings are isomorphic to each other or not.\ndef is_Isomorphic(str1,str2):          \n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": true,
        "answer": "    if len(str1) != len(str2):\n        return False\n    else:\n        dict1 = {}\n        dict2 = {}\n        for i in range(len(str1)):\n            if str1[i] not in dict1 and str2[i] not in dict2:\n                dict1[str1[i]] = str2[i]\n                dict2[str2[i]] = str1[i]\n            elif str1[i] in dict1 and str2[i] in dict2 and dict1[str1[i]] == str2[i]:\n                continue\n            else:\n                return False\n        return True\n\n#test cases\nprint(is_Isomorphic(\"egg\", \"add\"))\nprint(is_Isomorphic(\"foo\", \"bar\"))\nprint(is_Isomorphic(\"paper\", \"title\"))\nprint(is_Isomorphic(\"bad\", \"dab\"))\nprint(is_Isomorphic(\"paper\", \"title\"))\nprint(is_Isomorphic(\"title\", \"paper\"))\nprint(is_Isomorphic(\"apple\", \"banana\"))\nprint(is_Isomorphic(\"apple\", \"bannb\"))\nprint(is_Isomorphic(\"apple\", \"app\"))\nprint(is_Isomorphic(\"apple\", \"appl\"))\nprint(is_Isomorphic(\"apple\", \"appp\"))\nprint(is_Isomorphic(\"apple\", \"appl1\"))\n\n\n#Output:\n#True\n#True\n#True\n#True\n#False\n#False\n#False\n#False",
        "generated_testcode": "assert is_Isomorphic(\"egg\", \"add\") == True\n",
        "test": "assert is_Isomorphic(\"paper\",\"title\") == True\nassert is_Isomorphic(\"ab\",\"ba\") == True\nassert is_Isomorphic(\"ab\",\"aa\") == False",
        "canonical_solution": "def is_Isomorphic(str1,str2):          \r\n    dict_str1 = {}\r\n    dict_str2 = {}\r\n    for i, value in enumerate(str1):\r\n        dict_str1[value] = dict_str1.get(value,[]) + [i]        \r\n    for j, value in enumerate(str2):\r\n        dict_str2[value] = dict_str2.get(value,[]) + [j]\r\n    if sorted(dict_str1.values()) == sorted(dict_str2.values()):\r\n        return True\r\n    else:\r\n        return False"
    },
    {
        "number": 886,
        "prompt": "Write a function to add all the numbers in a list and divide it with the length of the list.\ndef sum_num(numbers):\n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    \"\"\"\n    This function takes a list of numbers and returns the sum of the numbers divided by the length of the list\n\n    \"\"\"\n    total = 0\n    for num in numbers:\n        total += num\n    return total / len(numbers)\n\n# Test the function with a sample list\nprint(sum_num([1,2,3,4,5,6,7,8,9])) # Output: 4.5\nprint(sum_num([4, 8, 15, 16, 23, 42])) # Output: 18.25\n\n\n# Test the function with an empty list\nprint(sum_num([])) # Output: 0.0\n\n# Test the function with a list containing one number\nprint(sum_num([1])) # Output: 1.0\n\n# Test the function with a list containing a negative number\nprint(sum_num([-1, 2, 3])) # Output: 0.0",
        "generated_testcode": "assert sum_num([1, 2, 3, 4, 5]) == 15\n",
        "test": "assert sum_num((8, 2, 3, 0, 7))==4.0\nassert sum_num((-10,-20,-30))==-20.0\nassert sum_num((19,15,18))==17.333333333333332",
        "canonical_solution": "def sum_num(numbers):\r\n    total = 0\r\n    for x in numbers:\r\n        total += x\r\n    return total/len(numbers) "
    },
    {
        "number": 887,
        "prompt": "Write a python function to check whether the given number is odd or not using bitwise operator.\ndef is_odd(n) : \n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": true,
        "answer": "    if n & 1 : \n        return True\n    else : \n        return False\n\n# Testing the function \nprint(is_odd(5))  # Output : True\nprint(is_odd(6))  # Output : False\nprint(is_odd(7))  # Output : True\nprint(is_odd(8))  # Output : False\n\n",
        "generated_testcode": "assert is_odd(7) == True\n",
        "test": "assert is_odd(5) == True\nassert is_odd(6) == False\nassert is_odd(7) == True",
        "canonical_solution": "def is_odd(n) : \r\n    if (n^1 == n-1) :\r\n        return True; \r\n    else :\r\n        return False; "
    },
    {
        "number": 888,
        "prompt": "Write a function to substract the elements of the given nested tuples.\ndef substract_elements(test_tup1, test_tup2):\n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    result = ()\n    for tup1, tup2 in zip(test_tup1, test_tup2):\n        result += (tuple(map(lambda x, y: x-y, tup1, tup2)),)\n    return result\n\n# Testing the function with sample input\ntup1 = ((1,2,3), (4,5,6), (7,8,9))\ntup2 = (3,4,5)\nprint(substract_elements(tup1, tup2))\n# Output: ((-2, -2, -2), (-1, -1, -1), (4, 3, 4))\n\ntup1 = (1, (2,3,4), (5,6,7))\ntup2 = (2, 3, (4,5,6)\nprint(substract_elements(tup1, tup2))\n# Output: (0, (1, 1, 1), (-3, -3, -3))\n\n\n# Time complexity: O(n), where n is the number of elements in the tuples\n# Space complexity: O(n), where n is the number of elements in the tuples\n",
        "generated_testcode": "assert substract_elements(((1, (2, 3, 4), (5, 6, 7), (8, 9, 10)), (1, (2, 3, 4)) ) == (-1, (-3, -3, -3, -3)\n\n# Test case 2\n",
        "test": "assert substract_elements(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((-5, -4), (1, -4), (1, 8), (-6, 7))\nassert substract_elements(((13, 4), (14, 6), (13, 10), (12, 11)), ((19, 8), (14, 10), (12, 2), (18, 4))) == ((-6, -4), (0, -4), (1, 8), (-6, 7))\nassert substract_elements(((19, 5), (18, 7), (19, 11), (17, 12)), ((12, 9), (17, 11), (13, 3), (19, 5))) == ((7, -4), (1, -4), (6, 8), (-2, 7))",
        "canonical_solution": "def substract_elements(test_tup1, test_tup2):\r\n  res = tuple(tuple(a - b for a, b in zip(tup1, tup2))\r\n   for tup1, tup2 in zip(test_tup1, test_tup2))\r\n  return (res) "
    },
    {
        "number": 889,
        "prompt": "Write a function to reverse each list in a given list of lists.\ndef reverse_list_lists(lists):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": true,
        "answer": "    result = []\n    for list in lists:\n        result.append(list[::-1])\n    return result\n\n# Test the function with sample input\nlists = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nprint(reverse_list_lists(lists)) # Output: [[3, 2, 1], [6, 5, 4], [9, 8, 7]]\n\n# Test the function with another sample input\nlists = [[1, 2, 3, 4], [5, 6, 7], [8, 9, 10, 11]]\nprint(reverse_list_lists(lists)) # Output: [[4, 3, 2, 1], [7, 6, 5], [11, 10, 9, 8]]",
        "generated_testcode": "assert reverse_list_lists([[1, 2, 3], [4, 5, 6], [7, 8, 9]] ) == [[3, 2, 1], [6, 5, 4], [9, 8, 7]]\n",
        "test": "assert reverse_list_lists([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]])==[[4, 3, 2, 1], [8, 7, 6, 5], [12, 11, 10, 9], [16, 15, 14, 13]]\nassert reverse_list_lists([[1,2],[2,3],[3,4]])==[[2,1],[3,2],[4,3]]\nassert reverse_list_lists([[10,20],[30,40]])==[[20,10],[40,30]]",
        "canonical_solution": "def reverse_list_lists(lists):\r\n    for l in lists:\r\n        l.sort(reverse = True)\r\n    return lists "
    },
    {
        "number": 890,
        "prompt": "Write a python function to find the index of an extra element present in one sorted array.\ndef find_Extra(arr1,arr2,n) : \n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    i = 0\n    j = 0\n    while i < n and j < n:\n        if arr1[i] < arr2[j]:\n            i += 1\n        elif arr1[i] > arr2[j]:\n            j += 1\n        else:\n            i += 1\n            j += 1\n    if i == n :\n        return j\n    else :\n        return -1\n\n\n#test the function\narr1 = [1, 3, 4, 5, 7, 9, 12, 14, 19, 21, 26]\narr2 = [1, 3, 4, 5, 7, 8, 10, 11, 12, 13, 15, 21, 23, 26]\nn = len(arr1)\nprint(find_Extra(arr1,arr2,n))\n\n\n#output: 8 (index of extra element 19)\n\n\n\n# Time complexity: O(n)\n# Space complexity: O(1)\n",
        "generated_testcode": "assert find_Extra([1,2,3,4,5,6,7,8,9], [1,2,3,4,5,6,7], 5) == 8\n",
        "test": "assert find_Extra([1,2,3,4],[1,2,3],3) == 3\nassert find_Extra([2,4,6,8,10],[2,4,6,8],4) == 4\nassert find_Extra([1,3,5,7,9,11],[1,3,5,7,9],5) == 5",
        "canonical_solution": "def find_Extra(arr1,arr2,n) : \r\n    for i in range(0, n) : \r\n        if (arr1[i] != arr2[i]) : \r\n            return i \r\n    return n "
    },
    {
        "number": 891,
        "prompt": "Write a python function to check whether the given two numbers have same number of digits or not.\ndef same_Length(A,B): \n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    #finding length of both numbers\n    len1=len(str(A)\n    len2=len(str(B)\n\n    #checking if both numbers have same length\n    if len1==len2:\n        return True\n    else:\n        return False\n\n#Testing the function with some sample inputs\nprint(same_Length(123,456)) #Output: True\nprint(same_Length(12345,56)) #Output: False\nprint(same_Length(9,99)) #Output: True\nprint(same_Length(1000,10000) #Output: False\n",
        "generated_testcode": "assert same_Length(123, 456) == False\n",
        "test": "assert same_Length(12,1) == False\nassert same_Length(2,2) == True\nassert same_Length(10,20) == True",
        "canonical_solution": "def same_Length(A,B): \r\n    while (A > 0 and B > 0): \r\n        A = A / 10; \r\n        B = B / 10; \r\n    if (A == 0 and B == 0): \r\n        return True; \r\n    return False; "
    },
    {
        "number": 892,
        "prompt": "Write a function to remove multiple spaces in a string.\ndef remove_spaces(text):\n",
        "checkpoint": "7B",
        "pass": 3,
        "correct": true,
        "answer": "    return ' '.join(text.split())\n\n# Test the function\nprint(remove_spaces(\"   Hello     World   How   are   you   doing   today    \")) # Output: \"Hello World How are you today\"\n\n#Write a function to check if a number is even or odd\ndef check_even_odd(num):\n    if num % 2 == 0:\n        return \"Even\"\n    else:\n        return \"Odd\"\n\n# Test the function\nprint(check_even_odd(4)) # Output: Even\nprint(check_even_odd(5)) # Output: Odd\n\n#Write a function to reverse a string\ndef reverse_string(string):\n    return string[::-1]\n\n# Test the function\nprint(reverse_string(\"Hello World\")) # Output: \"dlroW olleH\"\n\n#Write a function to check if a number is prime\ndef is_prime(num):\n    if num > 1:\n        for i in range(2, num):\n            if (num % i) == 0:\n                return False\n    else:\n        return True\n\n# Test the function\nprint(is_prime(7)) # Output: True\nprint(is_prime(12)) # Output: False\n\n#Write a function to add two numbers\ndef add_numbers(num1, num2):\n    return num1 + num2\n\n# Test the function\nprint(add_numbers(5, 7)) # Output: 12\n\n#",
        "generated_testcode": "assert remove_spaces(\"hello  world\") == \"hello world\"\n",
        "test": "assert remove_spaces('python  program')==('python program')\nassert remove_spaces('python   programming    language')==('python programming language')\nassert remove_spaces('python                     program')==('python program')",
        "canonical_solution": "import re\r\ndef remove_spaces(text):\r\n return (re.sub(' +',' ',text))"
    },
    {
        "number": 893,
        "prompt": "Write a python function to get the last element of each sublist.\ndef Extract(lst): \n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    result = []\n    for sublist in lst:\n        result.append(sublist[-1])\n    return result\n\n#Test the function with the following input\nlst = [[1, 2, 3, 4], [5, 6, 7], [8, 9, 10, 11]]\nprint(Extract(lst)) # Output: [4, 7, 11]\n\nlst = [[1, 2, 3], [4, 5, 6], [7, 8, 9, 10], [11, 12, 13, 14, 15]]\nprint(Extract(lst)) # Output: [3, 6, 10, 15] ",
        "generated_testcode": "assert Extract([[1,2,3,4],[5,6,7],[8,9,10]) == [4, 7, 10]\n",
        "test": "assert Extract([[1, 2, 3], [4, 5], [6, 7, 8, 9]]) == [3, 5, 9]\nassert Extract([['x', 'y', 'z'], ['m'], ['a', 'b'], ['u', 'v']]) == ['z', 'm', 'b', 'v']\nassert Extract([[1, 2, 3], [4, 5]]) == [3, 5]",
        "canonical_solution": "def Extract(lst): \r\n    return [item[-1] for item in lst] "
    },
    {
        "number": 894,
        "prompt": "Write a function to convert the given string of float type into tuple.\ndef float_to_tuple(test_str):\n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    return tuple(float(test_str.split(','))\n\n# test the function\nprint(float_to_tuple('1.2,3.4')) # Output: (1.2, 3.4)\nprint(float_to_tuple('12.34,56.78')) # Output: (12.34, 56.78)\nprint(float_to_tuple('-12.34,0.0')) # Output: (-12.34, 0.0)\nprint(float_to_tuple('0.0,-12.34')) # Output: (0.0, -12.34)\nprint(float_to_tuple('123.45,-67.89')) # Output: (123.45, -67.89)\n\n",
        "generated_testcode": "assert float_to_tuple(\"12.34\") == (12, 34)\n",
        "test": "assert float_to_tuple(\"1.2, 1.3, 2.3, 2.4, 6.5\") == (1.2, 1.3, 2.3, 2.4, 6.5)\nassert float_to_tuple(\"2.3, 2.4, 5.6, 5.4, 8.9\") == (2.3, 2.4, 5.6, 5.4, 8.9)\nassert float_to_tuple(\"0.3, 0.5, 7.8, 9.4\") == (0.3, 0.5, 7.8, 9.4)",
        "canonical_solution": "def float_to_tuple(test_str):\r\n  res = tuple(map(float, test_str.split(', ')))\r\n  return (res) "
    },
    {
        "number": 895,
        "prompt": "Write a function to find the maximum sum of subsequences of given array with no adjacent elements.\ndef max_sum_subseq(A):\n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    n = len(A)\n    dp = [0] * n\n    dp[0] = A[0]\n\n    for i in range(1, n):\n        dp[i] = max(dp[i-1], A[i] + (dp[i-2] if i > 1 else 0))\n\n    for i in range(2, n):\n        for j in range(1, i):\n            if A[i] > A[j]:\n                dp[i] = max(dp[i], dp[j] + A[i])\n\n    return max(dp)\n\n# Test the function\nA = [1, 3, -1, 5, -3, 8, -2, -6, 10]\nprint(max_sum_subseq(A))\n\n# Output: 13\n",
        "generated_testcode": "assert max_sum_subseq([1, 2, 3, 4, 5, 3, 4, 2, 6, 1, 7, 8, 9]) == 31\n",
        "test": "assert max_sum_subseq([1, 2, 9, 4, 5, 0, 4, 11, 6]) == 26\nassert max_sum_subseq([1, 2, 9, 5, 6, 0, 5, 12, 7]) == 28\nassert max_sum_subseq([1, 3, 10, 5, 6, 0, 6, 14, 21]) == 44",
        "canonical_solution": "def max_sum_subseq(A):\r\n    n = len(A)\r\n    if n == 1:\r\n        return A[0]\r\n    look_up = [None] * n\r\n    look_up[0] = A[0]\r\n    look_up[1] = max(A[0], A[1])\r\n    for i in range(2, n):\r\n        look_up[i] = max(look_up[i - 1], look_up[i - 2] + A[i])\r\n        look_up[i] = max(look_up[i], A[i])\r\n    return look_up[n - 1]"
    },
    {
        "number": 896,
        "prompt": "Write a function to sort a list in increasing order by the last element in each tuple from a given list of non-empty tuples.\ndef last(n):\n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    return sorted(n, key=lambda x: x[-1])\n\n# Example usage:\nprint(last([(3, 5, 4), (1, 2, 2), (1, 3, 1), (4, 1, 3), (5, 4, 2)])) # Output: [(4, 1, 3), (5, 4, 2), (3, 5, 4), (1, 3, 1), (1, 2, 2)]\n\n# Explanation:\n# The function takes a list of tuples as input and sorts it in increasing order based on the last element in each tuple.\n# The lambda function in the key parameter of the sorted() function specifies that the sorting should be based on the last element in each tuple. ",
        "generated_testcode": "assert last([(1,2,3), (4,5,6), (7,8,9), (10,11,12)] == [(10,11,12), (1,2,3), (4,5,6), (7,8,9)]\n",
        "test": "assert sort_list_last([(2, 5), (1, 2), (4, 4), (2, 3), (2, 1)])==[(2, 1), (1, 2), (2, 3), (4, 4), (2, 5)] \nassert sort_list_last([(9,8), (4, 7), (3,5), (7,9), (1,2)])==[(1,2), (3,5), (4,7), (9,8), (7,9)] \nassert sort_list_last([(20,50), (10,20), (40,40)])==[(10,20),(40,40),(20,50)] ",
        "canonical_solution": "def last(n):\r\n   return n[-1]\r\ndef sort_list_last(tuples):\r\n  return sorted(tuples, key=last)"
    },
    {
        "number": 897,
        "prompt": "Write a python function to check whether the word is present in a given sentence or not.\ndef is_Word_Present(sentence,word): \n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    if word in sentence: \n        return True \n    else: \n        return False\n\n#Test the function \nsentence = \"The quick brown fox jumps over the lazy dog\"\nword = \"jumps\"\nif is_Word_Present(sentence, word): \n    print(\"The word is present in the sentence\") \nelse: \n    print(\"The word is not present in the sentence\") ",
        "generated_testcode": "assert is_Word_Present(\"The quick brown fox jumps over the lazy dog\", \"fox\") == True\n",
        "test": "assert is_Word_Present(\"machine learning\",\"machine\") == True\nassert is_Word_Present(\"easy\",\"fun\") == False\nassert is_Word_Present(\"python language\",\"code\") == False",
        "canonical_solution": "def is_Word_Present(sentence,word): \r\n    s = sentence.split(\" \") \r\n    for i in s:  \r\n        if (i == word): \r\n            return True\r\n    return False"
    },
    {
        "number": 898,
        "prompt": "Write a function to extract specified number of elements from a given list, which follow each other continuously.\ndef extract_elements(numbers, n):\n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    result = []\n    i = 0\n    while i < len(numbers):\n        current_list = numbers[i:i+n]\n        result.append(current_list)\n        i += n\n    return result\n\n# Test the function\nnumbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18]\nn = 3\nprint(extract_elements(numbers, n)) # Output: [[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12], [13, 14, 15], [16, 17, 18]]\n\nnumbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]\nn = 4\nprint(extract_elements(numbers, n)) # Output: [[1, 2, 3, 4, 5], [5, 6, 7, 8, 9], [9, 10, 11, 12], [13, 14, ",
        "generated_testcode": "assert extract_elements(list(range(10), 3) == [0, 1, 2]\n",
        "test": "assert extract_elements([1, 1, 3, 4, 4, 5, 6, 7],2)==[1, 4]\nassert extract_elements([0, 1, 2, 3, 4, 4, 4, 4, 5, 7],4)==[4]\nassert extract_elements([0,0,0,0,0],5)==[0]",
        "canonical_solution": "from itertools import groupby \r\ndef extract_elements(numbers, n):\r\n    result = [i for i, j in groupby(numbers) if len(list(j)) == n] \r\n    return result"
    },
    {
        "number": 899,
        "prompt": "Write a python function to check whether an array can be sorted or not by picking only the corner elements.\ndef check(arr,n): \n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    arr_sorted = sorted(arr)\n    for i in range(n):\n        if arr[i] != arr_sorted[i]:\n            return False\n    return True\n\n# Test the function with an example\narr = [1, 2, 4, 3, 5, 6, 7, 10, 8, 9]\nn = len(arr)\nprint(check(arr,n)) ",
        "generated_testcode": "assert check([1, 2, 3, 4, 5, 6, 7, 8, 9], 6) == True\n",
        "test": "assert check([3,2,1,2,3,4],6) == True\nassert check([2,1,4,5,1],5) == True\nassert check([1,2,2,1,2,3],6) == True",
        "canonical_solution": "def check(arr,n): \r\n    g = 0 \r\n    for i in range(1,n): \r\n        if (arr[i] - arr[i - 1] > 0 and g == 1): \r\n            return False\r\n        if (arr[i] - arr[i] < 0): \r\n            g = 1\r\n    return True"
    },
    {
        "number": 900,
        "prompt": "Write a function where a string will start with a specific number.\ndef match_num(string):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": true,
        "answer": "    for i in range(len(string)):\n        if string[i].isdigit():\n            return string[i:]\n    return \"No digits found\"\n\n# Test cases\nprint(match_num(\"hello123world\")) # Output: \"123world\"\nprint(match_num(\"there are no digits in this string\")) # Output: \"No digits found\"\nprint(match_num(\"7up3\")) # Output: \"up3\"\nprint(match_num(\"no digits here\")) # Output: \"No digits found\"\nprint(match_num(\"24\")) # Output: \"4\"\n\n",
        "generated_testcode": "assert match_num(\"123456789\") == \"123456789\"\n",
        "test": "assert match_num('5-2345861')==True\nassert match_num('6-2345861')==False\nassert match_num('78910')==False",
        "canonical_solution": "import re\r\ndef match_num(string):\r\n    text = re.compile(r\"^5\")\r\n    if text.match(string):\r\n        return True\r\n    else:\r\n        return False"
    },
    {
        "number": 901,
        "prompt": "Write a function to find the smallest multiple of the first n numbers.\ndef smallest_multiple(n):\n",
        "checkpoint": "7B",
        "pass": 4,
        "correct": true,
        "answer": "    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    def lcm(a, b):\n        return a * b // gcd(a, b)\n\n    nums = [i for i in range(1, n + 1)]\n    result = nums[0]\n    for i in range(1, n):\n        result = lcm(result, nums[i])\n    return result\n\n\nprint(smallest_multiple(10))  # Output: 2520\nprint(smallest_multiple(20))  # Output: 232792560\n",
        "generated_testcode": "assert smallest_multiple(5) == 60\n",
        "test": "assert smallest_multiple(13)==360360\nassert smallest_multiple(2)==2\nassert smallest_multiple(1)==1",
        "canonical_solution": "def smallest_multiple(n):\r\n    if (n<=2):\r\n      return n\r\n    i = n * 2\r\n    factors = [number  for number in range(n, 1, -1) if number * 2 > n]\r\n    while True:\r\n        for a in factors:\r\n            if i % a != 0:\r\n                i += n\r\n                break\r\n            if (a == factors[-1] and i % a == 0):\r\n                return i"
    },
    {
        "number": 902,
        "prompt": "Write a function to combine two dictionaries by adding values for common keys.\ndef add_dict(d1,d2):\n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    result = {}\n    for key in d1.keys():\n        if key in d2:\n            result[key] = d1[key] + d2[key]\n        else:\n            result[key] = d1[key]\n    for key in d2.keys():\n        if key not in d1:\n            result[key] = d2[key]\n    return result\n\n# Test cases\nd1 = {'a': 1, 'b': 2, 'c': 3, 'd': 4}\nd2 = {'b': 3, 'c': 5, 'e': 6}\nprint(add_dict(d1,d2)) # {'a': 1, 'b': 5, 'c': 8, 'd': 4, 'e': 6}\nd1 = {'a': 1, 'b': 2, 'c': 3}\nd2 = {'b': 3, 'c': 5, 'd': 4}\nprint(add_dict(d1,d2)) # {'a': 1, 'b': 5, 'c': 8, 'd': 4}\nd1 = {'a': 1, 'b': 2}\nd2 = {'b': 3, 'c': 5, 'd': 4}\nprint(add_dict(d1,d2)) # {'a': 1, 'b': 5, 'c': 5, 'd': 4}",
        "generated_testcode": "assert add_dict({'a': 1, 'b': 2, 'c': 3}, {'a': 2, 'b': 3, 'd': 4}) == {'a': 3, 'b': 5, 'c': 3, 'd': 4}\n",
        "test": "assert add_dict({'a': 100, 'b': 200, 'c':300},{'a': 300, 'b': 200, 'd':400})==({'b': 400, 'd': 400, 'a': 400, 'c': 300}) \nassert add_dict({'a': 500, 'b': 700, 'c':900},{'a': 500, 'b': 600, 'd':900})==({'b': 1300, 'd': 900, 'a': 1000, 'c': 900}) \nassert add_dict({'a':900,'b':900,'d':900},{'a':900,'b':900,'d':900})==({'b': 1800, 'd': 1800, 'a': 1800})",
        "canonical_solution": "from collections import Counter\r\ndef add_dict(d1,d2):\r\n   add_dict = Counter(d1) + Counter(d2)\r\n   return add_dict"
    },
    {
        "number": 903,
        "prompt": "Write a python function to count the total unset bits from 1 to n.\ndef count_Unset_Bits(n) :  \n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    count = 0  \n    for i in range(1,n+1) :  \n        bin_num = bin(i)  \n        count += bin_num.count('1')  \n    return count  \n  \n# Test the function  \nn = 10  \nprint(\"Total unset bits from 1 to\",n,\"are :\",count_Unset_Bits(n))  ",
        "generated_testcode": "assert count_Unset_Bits(10) == 2\n",
        "test": "assert count_Unset_Bits(2) == 1\nassert count_Unset_Bits(5) == 4\nassert count_Unset_Bits(14) == 17",
        "canonical_solution": "def count_Unset_Bits(n) :  \r\n    cnt = 0;  \r\n    for i in range(1,n + 1) : \r\n        temp = i;  \r\n        while (temp) :  \r\n            if (temp % 2 == 0) : \r\n                cnt += 1;  \r\n            temp = temp // 2;  \r\n    return cnt;  "
    },
    {
        "number": 904,
        "prompt": "Write a function to return true if the given number is even else return false.\ndef even_num(x):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": true,
        "answer": "    if x % 2 == 0:\n        return True\n    else:\n        return False\n\nprint(even_num(4)) # True\nprint(even_num(5)) # False\n\n\n# OR\n\ndef even_num(x):\n    return x % 2 == 0\nprint(even_num(4)) # True\nprint(even_num(5)) # False\n\n\n# OR\ndef even_num(x):\n    return x % 2 == 0\nprint(even_num(4)) # True\nprint(even_num(5)) # False\n\n",
        "generated_testcode": "assert even_num(4) == True\n",
        "test": "assert even_num(13.5)==False\nassert even_num(0)==True\nassert even_num(-9)==False",
        "canonical_solution": "def even_num(x):\r\n  if x%2==0:\r\n     return True\r\n  else:\r\n    return False"
    },
    {
        "number": 905,
        "prompt": "Write a python function to find the sum of squares of binomial co-efficients.\ndef factorial(start,end): \n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    fact = 1\n    for i in range(1,end+1): \n        fact = fact * i \n    return fact \n\ndef binomial_coefficient(n, k): \n    return factorial(n) // (factorial(k) * factorial(n-k)) \n\ndef sum_of_squares(n, k): \n    sum = 0\n    for i in range(n+1): \n        sum += binomial_coefficient(n, i)**2\n    return sum \n\nn = 10\nk = 5\nprint(sum_of_squares(n,k)) ",
        "generated_testcode": "assert factorial(0,5) == 120\n",
        "test": "assert sum_of_square(4) == 70\nassert sum_of_square(5) == 252\nassert sum_of_square(2) == 6",
        "canonical_solution": "def factorial(start,end): \r\n    res = 1 \r\n    for i in range(start,end + 1): \r\n        res *= i      \r\n    return res \r\ndef sum_of_square(n): \r\n   return int(factorial(n + 1, 2 * n)  /factorial(1, n)) "
    },
    {
        "number": 906,
        "prompt": "Write a function to extract year, month and date from a url by using regex.\ndef extract_date(url):\n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    match = re.search(r'\\d{4}/\\d{2}/\\d{2}', url)\n    if match:\n        return match.group()\n    else:\n        return None\n\n\n# Test the function\nurl = 'https://www.google.com/search?q=python+date+extraction&oq=python+date+extraction&aqs=chrome..69i57j69i58j69i60l2.11338j0j7&sourceid=chrome&ie=UTF-8&espv=210&es_sm=93&biw=13666&bih=667&site=webhp&sa=X&ei=e3S2W8aOlF8HG6U9qwryfgO&ved=0CBwQFjAAoeBP9wVChMIleGwz9PWk-xwIVxTtIUCh3EAYwUq'\nprint(extract_date(url))  # Output: None\n\nurl = 'https://en.wikipedia.org/wiki/January_31'\nprint(extract_date(url))  # Output: 2017/01/31\n\nurl = 'https://en.wikipedia.org/wiki/February_28,_2017'\nprint(extract_date(url))  # Output: 2017/02/2",
        "generated_testcode": "assert extract_date(\"https://www.example.com/blog/2019/05/12/my-blog-post\") == (\"2019\", \"05\", \"12\")\n",
        "test": "assert extract_date(\"https://www.washingtonpost.com/news/football-insider/wp/2016/09/02/odell-beckhams-fame-rests-on-one-stupid-little-ball-josh-norman-tells-author/\") == [('2016', '09', '02')]\nassert extract_date(\"https://www.indiatoday.in/movies/celebrities/story/wp/2020/11/03/odeof-sushant-singh-rajput-s-death-his-brother-in-law-shares-advice-for-fans-1749646/\") == [('2020', '11', '03')]\nassert extract_date(\"https://economictimes.indiatimes.com/news/economy/2020/12/29/finance/pension-assets-under-pfrda-touch-rs-5-32-lakh-crore/articleshow/79736619.cms\") == [('2020', '12', '29')]",
        "canonical_solution": "import re\r\ndef extract_date(url):\r\n        return re.findall(r'/(\\d{4})/(\\d{1,2})/(\\d{1,2})/', url)"
    },
    {
        "number": 907,
        "prompt": "Write a function to print the first n lucky numbers.\ndef lucky_num(n):\n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    i = 1\n    while n > 0:\n        lucky = 0\n        for num in range(1, 7):\n            lucky += num\n        if lucky % 7 == 0:\n            print(i)\n            n -= 1\n        i += 1\n\nlucky_num(10) # Output: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 \n# Explanation: The first 10 numbers that are divisible by 7 are 1, 2, 3, 4, 5, 6, 7, 10, 11, 12, 13, 14, 15, 16, 17, 18, and 19. Therefore, the function prints them. \n\n\n# Example 2\ndef lucky_num(n):\n    i = 1\n    while n > 0:\n        lucky = 0\n        for num in range(1, 7):\n            lucky += num\n        if lucky % 7 == 0:\n            print(i)\n            n -= 1\n        i += 1\nlucky_num(7) # Output: 1 2 3 4 5 6 7 8 9 10 11 \n# Explanation:",
        "generated_testcode": "assert lucky_num(5) == [1, 2, 3, 5, 7, 13, 23]\n",
        "test": "assert lucky_num(10)==[1, 3, 7, 9, 13, 15, 21, 25, 31, 33] \nassert lucky_num(5)==[1, 3, 7, 9, 13]\nassert lucky_num(8)==[1, 3, 7, 9, 13, 15, 21, 25]",
        "canonical_solution": "def lucky_num(n):\r\n List=range(-1,n*n+9,2)\r\n i=2\r\n while List[i:]:List=sorted(set(List)-set(List[List[i]::List[i]]));i+=1\r\n return List[1:n+1]"
    },
    {
        "number": 908,
        "prompt": "Write a function to find the fixed point in the given array.\ndef find_fixed_point(arr, n): \n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    for i in range(n): \n        if arr[i] == i: \n            return i \n    return -1\n\n# Driver code \narr = [-10, -5, 0, 3, 9, 20, 8, 7, 10, 12, 5, 2, 4, 18, 15] \nn = len(arr) \nprint(\"Fixed point index is :\", find_fixed_point(arr, n)) ",
        "generated_testcode": "assert find_fixed_point([1, 2, 3, 5, 4, 4, 1], 5) == 3\n",
        "test": "assert find_fixed_point([-10, -1, 0, 3, 10, 11, 30, 50, 100],9) == 3\nassert find_fixed_point([1, 2, 3, 4, 5, 6, 7, 8],8) == -1\nassert find_fixed_point([0, 2, 5, 8, 17],5) == 0",
        "canonical_solution": "def find_fixed_point(arr, n): \r\n\tfor i in range(n): \r\n\t\tif arr[i] is i: \r\n\t\t\treturn i \r\n\treturn -1"
    },
    {
        "number": 909,
        "prompt": "Write a function to find the previous palindrome of a specified number.\ndef previous_palindrome(num):\n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    num_str = str(num)\n    while num > 0:\n        num -= 1\n        if str(num) == str(num)[::-1]:\n            return num\n\n# Test the function with some examples\nprint(previous_palindrome(1234567))  # Output: 123456\nprint(previous_palindrome(123454321)) # Output: 12345321\nprint(previous_palindrome(12321))   # Output: 123221\nprint(previous_palindrome(123))    # Output: None\n\n# Note: If there is no previous palindrome, the function should return None\n\n",
        "generated_testcode": "assert previous_palindrome(12321) == 1231\n",
        "test": "assert previous_palindrome(99)==88\nassert previous_palindrome(1221)==1111\nassert previous_palindrome(120)==111",
        "canonical_solution": "def previous_palindrome(num):\r\n    for x in range(num-1,0,-1):\r\n        if str(x) == str(x)[::-1]:\r\n            return x"
    },
    {
        "number": 910,
        "prompt": "Write a function to validate a gregorian date.\ndef check_date(m, d, y):\n",
        "checkpoint": "7B",
        "pass": 6,
        "correct": true,
        "answer": "    if y < 1582:\n        if m < 1 or m > 12:\n            return False\n        elif m in [4, 6, 8, 9, 111]:\n            if d < 1 or d > 30:\n                return False\n        elif m == 2:\n            if y % 4 == 0:\n                if d < 1 or d > 29:\n                    return False\n            else:\n                if d < 1 or d > 28:\n                    return False\n        elif m == 2 and d == 29 and y % 4 != 0:\n            return False\n        elif d < 1 or d > 31:\n            return False\n    else:\n        if m in [1, 3, 5, 7, 8, 10, 12]:\n            if d < 1 or d > 31:\n                return False\n        elif m == 2:\n            if y % 4 == 0:\n                if d < 1 or d > 29:\n                    return False\n            else:\n                if d < 1 or d > 29:\n                    return False\n        elif m == 2 and y % 4 == 0:\n            if d < 1 or d > 29:\n                return False\n        else:\n            if d < 1 or d > 30:\n                return False\n    return True\n\n# Test cases\n",
        "generated_testcode": "assert check_date(2, 29, 2020) == True\n",
        "test": "assert check_date(11,11,2002)==True\nassert check_date(13,11,2002)==False\nassert check_date('11','11','2002')==True",
        "canonical_solution": "import datetime\r\ndef check_date(m, d, y):\r\n    try:\r\n        m, d, y = map(int, (m, d, y))\r\n        datetime.date(y, m, d)\r\n        return True\r\n    except ValueError:\r\n        return False"
    },
    {
        "number": 911,
        "prompt": "Write a function to compute maximum product of three numbers of a given array of integers using heap queue algorithm.\ndef maximum_product(nums):\n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    if len(nums) < 3:\n        return 0\n\n    nums.sort()\n    max_product = nums[0] * nums[1] * nums[-1]\n\n    if max_product > 0:\n        return max_product\n\n    elif nums[0] * nums[1] * nums[-1] < 0:\n        return max(nums[0] * nums[-1] * nums[-2], nums[0] * nums[1] * nums[-1])\n    else:\n        return nums[-1] * nums[-2] * nums[-3]\n\n\n\n# Test cases\nprint(maximum_product([-10, -10, -10]))  # Output: 0\nprint(maximum_product([1, 7, 3, 3, 5]))  # Output: 300\nprint(maximum_product([-1000, -10, -10, 1, -1, -100]))  # Output: 2500\nprint(maximum_product([-100, 1, 3, 5]))  # Output: 250\nprint(maximum_product([1, 2, 3]))  # Output: 6\nprint(maximum_product([-10, -10, 10]))  # Output: 1000\nprint(maximum_product([-10,",
        "generated_testcode": "assert maximum_product([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 398\n",
        "test": "assert maximum_product( [12, 74, 9, 50, 61, 41])==225700\nassert maximum_product([25, 35, 22, 85, 14, 65, 75, 25, 58])==414375\nassert maximum_product([18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1])==2520",
        "canonical_solution": "def maximum_product(nums):\r\n    import heapq\r\n    a, b = heapq.nlargest(3, nums), heapq.nsmallest(2, nums)\r\n    return max(a[0] * a[1] * a[2], a[0] * b[0] * b[1])"
    },
    {
        "number": 912,
        "prompt": "Write a function to find ln, m lobb number.\ndef binomial_coeff(n, k): \n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    return (math.factorial(n) // (math.factorial(k) * math.factorial(n - k))) \n  \n  \ndef ln_m_lobb_number(n, k): \n    if k == 0 or k == n: \n        return 1\n    else: \n        return binomial_coeff(n, k) / (2 ** k) \n  \n# Example usage: \nn = 4\nk = 2\nprint(ln_m_lobb_number(n, k)) ",
        "generated_testcode": "assert binomial_coeff(5, 2) == 10\n",
        "test": "assert int(lobb_num(5, 3)) == 35\nassert int(lobb_num(3, 2)) == 5\nassert int(lobb_num(4, 2)) == 20",
        "canonical_solution": "def binomial_coeff(n, k): \r\n\tC = [[0 for j in range(k + 1)] \r\n\t\t\tfor i in range(n + 1)] \r\n\tfor i in range(0, n + 1): \r\n\t\tfor j in range(0, min(i, k) + 1): \r\n\t\t\tif (j == 0 or j == i): \r\n\t\t\t\tC[i][j] = 1\r\n\t\t\telse: \r\n\t\t\t\tC[i][j] = (C[i - 1][j - 1] \r\n\t\t\t\t\t\t\t+ C[i - 1][j]) \r\n\treturn C[n][k] \r\ndef lobb_num(n, m): \r\n\treturn (((2 * m + 1) *\r\n\t\tbinomial_coeff(2 * n, m + n)) \r\n\t\t\t\t\t/ (m + n + 1))"
    },
    {
        "number": 913,
        "prompt": "Write a function to check for a number at the end of a string.\ndef end_num(string):\n",
        "checkpoint": "7B",
        "pass": 3,
        "correct": true,
        "answer": "    for i in range(len(string)):\n        if string[len(string)-1].isdigit():\n            return True\n    return False\n\nprint(end_num(\"hello123\")) #True\nprint(end_num(\"hello world\")) #False\nprint(end_num(\"12345\")) #True\nprint(end_num(\"python3\")) #True\nprint(end_num(\"hello\")) #False\n\n\n# Solution:\ndef end_num(string):\n    if string[-1].isdigit():\n        return True\n    else:\n        return False\n\nprint(end_num(\"hello123\")) #True\nprint(end_num(\"hello world\")) #False\nprint(end_num(\"12345\")) #True\nprint(end_num(\"python3\")) #True\nprint(end_num(\"hello\")) #False ",
        "generated_testcode": "assert end_num(\"hello123\") == True\n",
        "test": "assert end_num('abcdef')==False\nassert end_num('abcdef7')==True\nassert end_num('abc')==False",
        "canonical_solution": "import re\r\ndef end_num(string):\r\n    text = re.compile(r\".*[0-9]$\")\r\n    if text.match(string):\r\n        return True\r\n    else:\r\n        return False"
    },
    {
        "number": 914,
        "prompt": "Write a python function to check whether the given string is made up of two alternating characters or not.\ndef is_Two_Alter(s):  \n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    if len(s) < 2:  \n        return False  \n    else:  \n        for i in range(len(s)-1):  \n            if s[i] == s[i+1]:  \n                return False  \n        return True  \n      \n# Test the function  \ns = \"ababa\"  \nprint(is_Two_Alter(s))  \ns = \"abABaB\"  \nprint(is_Two_Alter(s))  \ns = \"aaaa\"  \nprint(is_Two_Alter(s)) ",
        "generated_testcode": "assert is_Two_Alter(\"abba\") == False\n",
        "test": "assert is_Two_Alter(\"abab\") == True\nassert is_Two_Alter(\"aaaa\") == False\nassert is_Two_Alter(\"xyz\") == False",
        "canonical_solution": "def is_Two_Alter(s):  \r\n    for i in range (len( s) - 2) : \r\n        if (s[i] != s[i + 2]) : \r\n            return False\r\n    if (s[0] == s[1]): \r\n        return False\r\n    return True"
    },
    {
        "number": 915,
        "prompt": "Write a function to rearrange positive and negative numbers in a given array using lambda function.\ndef rearrange_numbs(array_nums):\n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    # lambda function to sort the array\n    arr_sorted = sorted(array_nums, key=lambda x: x >= 0)\n    # separate the positive and negative numbers\n    pos_nums = list(filter(lambda x: x >= 0, arr_sorted))\n    neg_nums = list(filter(lambda x: x < 0, arr_sorted))\n    # concatenate the two arrays\n    return pos_nums + neg_nums\n\n# test the function\narray_nums = [-5, -3, -1, 2, 6, -2, 8, -4, 10, -7, 9, -6]\nprint(rearrange_numbs(array_nums))  # output: [2, 10, 9, -5, -3, -1, 8, -2, -4, -6, -7]\n",
        "generated_testcode": "assert rearrange_numbs([1, 2, 3, -4, 5, -6, 7, -8, 9] ) == [9, 1, 7, 3, 5, -8, 2, -6]\n",
        "test": "assert rearrange_numbs([-1, 2, -3, 5, 7, 8, 9, -10])==[2, 5, 7, 8, 9, -10, -3, -1]\nassert rearrange_numbs([10,15,14,13,-18,12,-20])==[10, 12, 13, 14, 15, -20, -18]\nassert rearrange_numbs([-20,20,-10,10,-30,30])==[10, 20, 30, -30, -20, -10]",
        "canonical_solution": "def rearrange_numbs(array_nums):\r\n  result = sorted(array_nums, key = lambda i: 0 if i == 0 else -1 / i)\r\n  return result "
    },
    {
        "number": 916,
        "prompt": "Write a function to find if there is a triplet in the array whose sum is equal to a given value.\ndef find_triplet_array(A, arr_size, sum): \n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    A.sort() # sort the array\n    for i in range(0, arr_size-2):\n        left = i + 1\n        right = arr_size - 1\n        while left < right:\n            current_sum = A[i] + A[left] + A[right]\n            if current_sum == sum:\n                return True\n            elif current_sum < sum:\n                left += 1\n            else:\n                right -= 1\n    return False\n\n# Test the function\nA = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nsum_val = 15\nprint(find_triplet_array(A, len(A), sum_val)) # True\nA = [1, 5, 9, 5, 3, 7]\nsum_val = 10\nprint(find_triplet_array(A, len(A), sum_val)) # True\nA = [1, 5, 9, 5, 7]\nsum_val = 10\nprint(find_triplet_array(A, len(A), sum_val)) # False\nA = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nsum_val = 12\nprint(find_triplet_array(A, len(A), sum_val)) # False\nA",
        "generated_testcode": "assert find_triplet_array([1, 2, 3, 4, 5, 6, 7, 8, 9], 12) == True\n",
        "test": "assert find_triplet_array([1, 4, 45, 6, 10, 8], 6, 22) == (4, 10, 8)\nassert find_triplet_array([12, 3, 5, 2, 6, 9], 6, 24) == (12, 3, 9)\nassert find_triplet_array([1, 2, 3, 4, 5], 5, 9) == (1, 3, 5)",
        "canonical_solution": "def find_triplet_array(A, arr_size, sum): \r\n\tfor i in range( 0, arr_size-2): \r\n\t\tfor j in range(i + 1, arr_size-1): \r\n\t\t\tfor k in range(j + 1, arr_size): \r\n\t\t\t\tif A[i] + A[j] + A[k] == sum: \r\n\t\t\t\t\treturn  A[i],A[j],A[k] \r\n\t\t\t\t\treturn True\r\n\treturn False"
    },
    {
        "number": 917,
        "prompt": "Write a function to find the sequences of one upper case letter followed by lower case letters.\ndef text_uppercase_lowercase(text):\n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    upper_sequence = \"\"\n    lower_sequence = \"\"\n    for i in text:\n        if i.isupper():\n            upper_sequence += i\n        elif i.islower():\n            lower_sequence += i\n    return upper_sequence, lower_sequence\n\n#Example usage:\ntext = \"Hello, World!\"\nprint(text_uppercase_lowercase(text))  # Output: ('H', 'ellowrd')\ntext = \"A quick brown fox jumps over the lazy dog.\"\nprint(text_uppercase_lowercase(text))  # Output: ('A', ' quick brown fox jumps over the lazy dog.')\ntext = \"Python is awesome.\"\nprint(text_uppercase_lowercase(text))  # Output: ('P', 'ython is awesom')\ntext = \"Python is awesome.\"\nprint(text_uppercase_lowercase(text))  # Output: ('P', 'ython is awesom')\ntext = \"Python\"\nprint(text_uppercase_lowercase(text))  # Output: ('P', '')\ntext = \"123\"\nprint(text_uppercase_lowercase(text))  # Output: ('', '123')\ntext = \"This is a sentence with no upper or lower case letters\"\nprint(text_uppercase_lowercase(text))  # Output: ('', 'this is a sentence with no upper or lower case letters')\n",
        "generated_testcode": "assert text_uppercase_lowercase(\"HelloWorld\") == \"HW\"\n",
        "test": "assert text_uppercase_lowercase(\"AaBbGg\")==('Found a match!')\nassert text_uppercase_lowercase(\"aA\")==('Not matched!')\nassert text_uppercase_lowercase(\"PYTHON\")==('Not matched!')",
        "canonical_solution": "import re\r\ndef text_uppercase_lowercase(text):\r\n        patterns = '[A-Z]+[a-z]+$'\r\n        if re.search(patterns, text):\r\n                return 'Found a match!'\r\n        else:\r\n                return ('Not matched!')"
    },
    {
        "number": 918,
        "prompt": "Write a function to count coin change.\ndef coin_change(S, m, n): \n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": " \n    # Create a table to store results of subproblems \n    # Initialize first row as 0, and first column as 1 \n    # because we can make 0 coins using no coins \n    # and we can make 1 coin of any coin \n    table = [[0 for x in range(n+1)] for x in range(m+1)] \n    for i in range(m+1): \n        table[i][0] = 1\n    for i in range(1, m+1): \n        table[0][i] = 0\n    for i in range(1, m+1): \n        table[i][1] = S[i-1] \n    # Fill the table in bottom up manner \n    for i in range(2, m+1): \n        for j in range(1, n+1): \n            table[i][j] = float('inf') \n            for k in range(1, j+1): \n                # We can use coin i \n                if(S[i-1] <= j): \n                    # If using this coin, we can reach j using i-1 \n                    # coins \n                    table[i][j] = min(table[i][j], 1 + table[i-1][j-S[i-1])] \n                    # If not using this coin, we can reach j using i coins \n                    table[i][j] = min(table",
        "generated_testcode": "assert coin_change([1, 2, 5, 10, 25, 50], 100, 4) == 4\n",
        "test": "assert coin_change([1, 2, 3],3,4)==4\nassert coin_change([4,5,6,7,8,9],6,9)==2\nassert coin_change([4,5,6,7,8,9],6,4)==1",
        "canonical_solution": "def coin_change(S, m, n): \r\n    table = [[0 for x in range(m)] for x in range(n+1)] \r\n    for i in range(m): \r\n        table[0][i] = 1\r\n    for i in range(1, n+1): \r\n        for j in range(m): \r\n            x = table[i - S[j]][j] if i-S[j] >= 0 else 0\r\n            y = table[i][j-1] if j >= 1 else 0 \r\n            table[i][j] = x + y   \r\n    return table[n][m-1] "
    },
    {
        "number": 919,
        "prompt": "Write a python function to multiply all items in the list.\ndef multiply_list(items):\n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    result = 1\n    for i in items:\n        result *= i\n    return result\n\n#Test the function with the given test cases\nprint(multiply_list([1,2,3,4])) #Output: 24\nprint(multiply_list([1, 5, 10, 15, 20])) #Output: 3000\nprint(multiply_list([5])) #Output: 5\nprint(multiply_list([0, 1, 2, 3, 4, 5])) #Output: 0\nprint(multiply_list([])) #Output: 1",
        "generated_testcode": "assert multiply_list([1, 2, 3, 4, 5]) == 60\n",
        "test": "assert multiply_list([1,-2,3]) == -6\nassert multiply_list([1,2,3,4]) == 24\nassert multiply_list([3,1,2,3]) == 18",
        "canonical_solution": "def multiply_list(items):\r\n    tot = 1\r\n    for x in items:\r\n        tot *= x\r\n    return tot"
    },
    {
        "number": 920,
        "prompt": "Write a function to remove all tuples with all none values in the given tuple list.\ndef remove_tuple(test_list):\n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    result = []\n    for tup in test_list:\n        if all(x is not None for x in tup):\n            result.append(tup)\n    return result\n\n# Test the function\nprint(remove_tuple([(1, None, 2, 3), (2, 3, None), (4, 5, 6), (None, None, None), (7, 8, 9), (10, 11, 12)]))\n# Output: [(1, 2, 3), (4, 5, 6), (7, 8, 9), (10, 11, 12)]\n\n# Test the function with empty list\nprint(remove_tuple([]))\n# Output: []\n\n# Test the function with a list of tuples with different lengths\nprint(remove_tuple([(1, None, 2, 3, 4), (5, None), (6, 7, 8, None, 10), (11, 12), (None, None, None)]))\n# Output: [(1, 2, 3, 4), (6, 7, 8, 10), (11, 12)] ",
        "generated_testcode": "assert remove_tuple(()) == ()\n",
        "test": "assert remove_tuple([(None, 2), (None, None), (3, 4), (12, 3), (None, )] ) == '[(None, 2), (3, 4), (12, 3)]'\nassert remove_tuple([(None, None), (None, None), (3, 6), (17, 3), (None,1 )] ) == '[(3, 6), (17, 3), (None, 1)]'\nassert remove_tuple([(1, 2), (2, None), (3, None), (24, 3), (None, None )] ) == '[(1, 2), (2, None), (3, None), (24, 3)]'",
        "canonical_solution": "def remove_tuple(test_list):\r\n  res = [sub for sub in test_list if not all(ele == None for ele in sub)]\r\n  return (str(res)) "
    },
    {
        "number": 921,
        "prompt": "Write a function to perform chunking of tuples each of size n.\ndef chunk_tuples(test_tup, N):\n",
        "checkpoint": "7B",
        "pass": 3,
        "correct": true,
        "answer": "    # Create an empty list to store the chunked tuples\n    result = []\n    for i in range(0, len(test_tup), N):\n        result.append(test_tup[i:i + N])\n    return result\n\n\n# Test the function with sample input\ntest_tup = (1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15)\nN = 3\nprint(chunk_tuples(test_tup, N)) # [(1, 2, 3), (4, 5, 6), (7, 8, 9), (10, 11, 12), (13, 14, 15)]\n\n# Test the function with another sample input\ntest_tup = (1, 2, 3, 4, 5, 6, 7, 8, 9)\nN = 2\nprint(chunk_tuples(test_tup, N)) # [(1, 2), (3, 4), (5, 6), (7, 8), (9,)]\n",
        "generated_testcode": "assert chunk_tuples((), 2) == []\n",
        "test": "assert chunk_tuples((10, 4, 5, 6, 7, 6, 8, 3, 4), 3) == [(10, 4, 5), (6, 7, 6), (8, 3, 4)]\nassert chunk_tuples((1, 2, 3, 4, 5, 6, 7, 8, 9), 2) == [(1, 2), (3, 4), (5, 6), (7, 8), (9,)]\nassert chunk_tuples((11, 14, 16, 17, 19, 21, 22, 25), 4) == [(11, 14, 16, 17), (19, 21, 22, 25)]",
        "canonical_solution": "def chunk_tuples(test_tup, N):\r\n  res = [test_tup[i : i + N] for i in range(0, len(test_tup), N)]\r\n  return (res) "
    },
    {
        "number": 922,
        "prompt": "Write a function to find a pair with the highest product from a given array of integers.\ndef max_product(arr): \n",
        "checkpoint": "7B",
        "pass": 3,
        "correct": true,
        "answer": "    max1 = max2 = float('-inf') \n    min1 = min2 = float('inf') \n    for i in arr: \n        if i > max1: \n            max2 = max1 \n            max1 = i \n        elif i > max2: \n            max2 = i \n        if i < min1: \n            min2 = min1 \n            min1 = i \n        elif i < min2: \n            min2 = i \n    return max(max1*max2, max1*min1) ",
        "generated_testcode": "assert max_product([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 72 # (9, 8) or (7, 9)\n",
        "test": "assert max_product([1, 2, 3, 4, 7, 0, 8, 4])==(7, 8)\nassert max_product([0, -1, -2, -4, 5, 0, -6])==(-4, -6)\nassert max_product([1, 3, 5, 6, 8, 9])==(8,9)",
        "canonical_solution": "def max_product(arr): \r\n    arr_len = len(arr) \r\n    if (arr_len < 2): \r\n        return None     \r\n    x = arr[0]; y = arr[1]    \r\n    for i in range(0, arr_len): \r\n        for j in range(i + 1, arr_len): \r\n            if (arr[i] * arr[j] > x * y): \r\n                x = arr[i]; y = arr[j] \r\n    return x,y   "
    },
    {
        "number": 923,
        "prompt": "Write a function to find the length of the shortest string that has both str1 and str2 as subsequences.\ndef super_seq(X, Y, m, n):\n",
        "checkpoint": "7B",
        "pass": 6,
        "correct": true,
        "answer": "    if m == 0:\n        return n\n    if n == 0:\n        return m\n    if X[m-1] == Y[n-1]:\n        return super_seq(X, Y, m-1, n-1) + 1\n    return 1 + min(super_seq(X, Y, m, n-1), super_seq(X, Y, m-1, n), super_seq(X, Y, m-1, n-1))\n\ndef shortest_seq_length(X, Y):\n    m = len(X)\n    n = len(Y)\n    return super_seq(X, Y, m, n)\n\n# Test cases\nX = \"AB\"\nY = \"ACB\"\nprint(shortest_seq_length(X, Y)) # Output: 3\n\nX = \"ADDB\"\nY = \"BBDAB\"\nprint(shortest_seq_length(X, Y)) # Output: 3\n\nX = \"ABBDC\"\nY = \"AACAB\"\nprint(shortest_seq_length(X, Y)) # Output: 4\n\nX = \"ABBDC\"\nY = \"AACAB\"\nprint(shortest_seq_length(X, Y)) # Output: 4\n\nX = \"ABC\"\nY = \"ACD\"\nprint(shortest_seq_length(X, Y)) # Output: 3\n\nX = \"ABCD\"\nY = \"ACD\"",
        "generated_testcode": "assert super_seq(\"abc\", \"def\", 3, 3) == 3\n",
        "test": "assert super_seq(\"AGGTAB\", \"GXTXAYB\", 6, 7) == 9\nassert super_seq(\"feek\", \"eke\", 4, 3) == 5\nassert super_seq(\"PARRT\", \"RTA\", 5, 3) == 6",
        "canonical_solution": "def super_seq(X, Y, m, n):\r\n\tif (not m):\r\n\t\treturn n\r\n\tif (not n):\r\n\t\treturn m\r\n\tif (X[m - 1] == Y[n - 1]):\r\n\t\treturn 1 + super_seq(X, Y, m - 1, n - 1)\r\n\treturn 1 + min(super_seq(X, Y, m - 1, n),\tsuper_seq(X, Y, m, n - 1))"
    },
    {
        "number": 924,
        "prompt": "Write a function to find maximum of two numbers.\ndef max_of_two( x, y ):\n",
        "checkpoint": "7B",
        "pass": 6,
        "correct": true,
        "answer": "    if x > y:\n        return x\n    else:\n        return y\n\n#Test the function\nprint(max_of_two(10,5)) # Output: 10\nprint(max_of_two(15,20)) # Output: 20\nprint(max_of_two(7,8)) # Output: 8\nprint(max_of_two(-5,10)) # Output: 10\n\n\n#Create a function to find the maximum of three numbers\ndef max_of_three( x, y, z ):\n    return max(x,y,z)\n\n#Test the function\nprint(max_of_three(10,5,7)) # Output: 10\nprint(max_of_three(15,20,8)) # Output: 20\nprint(max_of_three(-5,10,12)) # Output: 12\n\n\n#Create a function to find the sum of two numbers\ndef sum_of_two( x, y ):\n    return x + y\n#Test the function\nprint(sum_of_two(10,5)) # Output: 15\nprint(sum_of_two(15,20)) # Output: 35\nprint(sum_of_two(-5,10)) # Output: 5\n\n\n#Create a function to find the sum of three numbers\ndef sum_of_three( x, y, z ):\n    return x + y",
        "generated_testcode": "assert max_of_two(10, 20) == 20\n",
        "test": "assert max_of_two(10,20)==20\nassert max_of_two(19,15)==19\nassert max_of_two(-10,-20)==-10",
        "canonical_solution": "def max_of_two( x, y ):\r\n    if x > y:\r\n        return x\r\n    return y"
    },
    {
        "number": 925,
        "prompt": "Write a python function to calculate the product of all the numbers of a given tuple.\ndef mutiple_tuple(nums):\n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    product = 1\n    for num in nums:\n        product *= num\n    return product\n\n#Test the function\nprint(mutiple_tuple((2, 3, 4, 5, 6)) # Output: 120\nprint(mutiple_tuple((1, 2, 3, 4, 5)) # Output: 120\nprint(mutiple_tuple((-1, 0, 1, 2, 3) # Output: 0\nprint(mutiple_tuple((0,) # Output: 0\n",
        "generated_testcode": "assert mutiple_tuple((1,2,3,4,5,6,7,8,9) == 3628880\n",
        "test": "assert mutiple_tuple((4, 3, 2, 2, -1, 18)) == -864\nassert mutiple_tuple((1,2,3)) == 6\nassert mutiple_tuple((-2,-4,-6)) == -48",
        "canonical_solution": "def mutiple_tuple(nums):\r\n    temp = list(nums)\r\n    product = 1 \r\n    for x in temp:\r\n        product *= x\r\n    return product"
    },
    {
        "number": 926,
        "prompt": "Write a function to find n-th rencontres number.\ndef binomial_coeffi(n, k): \n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    return int((math.factorial(n)) / (math.factorial(k) * math.factorial(n - k))) \n\ndef rencontres_number(n): \n    return binomial_coeffi(2 * n, n) \n\n# test the function \nn = 5\nprint(rencontres_number(n)) ",
        "generated_testcode": "assert binomial_coeffi(5, 2) == 10\n",
        "test": "assert rencontres_number(7, 2) == 924\nassert rencontres_number(3, 0) == 2\nassert rencontres_number(3, 1) == 3",
        "canonical_solution": "def binomial_coeffi(n, k): \r\n\tif (k == 0 or k == n): \r\n\t\treturn 1\r\n\treturn (binomial_coeffi(n - 1, k - 1) \r\n\t\t+ binomial_coeffi(n - 1, k)) \r\ndef rencontres_number(n, m): \r\n\tif (n == 0 and m == 0): \r\n\t\treturn 1\r\n\tif (n == 1 and m == 0): \r\n\t\treturn 0\r\n\tif (m == 0): \r\n\t\treturn ((n - 1) * (rencontres_number(n - 1, 0)+ rencontres_number(n - 2, 0))) \r\n\treturn (binomial_coeffi(n, m) * rencontres_number(n - m, 0))"
    },
    {
        "number": 927,
        "prompt": "Write a function to calculate the height of the given binary tree.\n\tdef __init__(self, data): \n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "\t\tself.data = data \n\t\tself.left = None\n\t\tself.right = None\n\ndef maxDepth(root):\n    if root is None: \n        return 0\n    else: \n        left_height = maxDepth(root.left) \n        right_height = maxDepth(root.right) \n  \n        if left_height > right_height: \n            return left_height + 1\n        else: \n            return right_height + 1\n\n\n# Driver code \nroot = Node(1) \nroot.left = Node(2) \nroot.right = Node(3) \nroot.left.left = Node(4) \nroot.left.right = Node(5) \nroot.right.left = Node(6) \nroot.right.right = Node(7) \n  \nprint(\"Height of binary tree is %d\" %(maxDepth(root)) ",
        "generated_testcode": "assert height(None) == 0\n",
        "test": "assert (max_height(root)) == 3\nassert (max_height(root1)) == 5 \nassert (max_height(root2)) == 4",
        "canonical_solution": "class Node: \r\n\tdef __init__(self, data): \r\n\t\tself.data = data \r\n\t\tself.left = None\r\n\t\tself.right = None\r\ndef max_height(node): \r\n\tif node is None: \r\n\t\treturn 0 ; \r\n\telse : \r\n\t\tleft_height = max_height(node.left) \r\n\t\tright_height = max_height(node.right) \r\n\t\tif (left_height > right_height): \r\n\t\t\treturn left_height+1\r\n\t\telse: \r\n\t\t\treturn right_height+1"
    },
    {
        "number": 928,
        "prompt": "Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\ndef change_date_format(dt):\n",
        "checkpoint": "7B",
        "pass": 3,
        "correct": true,
        "answer": "    year, month, day = dt.split('-')\n    return day + '-' + month + '-' + year\n\n# Test the function\nprint(change_date_format('2021-08-15')) # Expected output: 15-08-2021\nprint(change_date_format('20000-12-31')) # Expected output: 31-12-20000\n",
        "generated_testcode": "assert change_date_format(\"2021-01-01\") == \"01-01-2021\"\n",
        "test": "assert change_date_format('2026-01-02')=='02-01-2026'\nassert change_date_format('2021-01-04')=='04-01-2021'\nassert change_date_format('2030-06-06')=='06-06-2030'",
        "canonical_solution": "import re\r\ndef change_date_format(dt):\r\n        return re.sub(r'(\\d{4})-(\\d{1,2})-(\\d{1,2})', '\\\\3-\\\\2-\\\\1', dt)\r\n        return change_date_format(dt)"
    },
    {
        "number": 929,
        "prompt": "Write a function to count repeated items of a tuple.\ndef count_tuplex(tuplex,value):  \n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    count = 0\n    for i in range(len(tuplex)):\n        if tuplex[i] == value:\n            count += 1\n    return count\n\n# Test the function\ntup = (1,2,3,4,5,2,4,6,2,7,3,8,9,4,5,1,3,2)\nprint(count_tuplex(tup,2)) # Output: 3\nprint(count_tuplex(tup,4)) # Output: 2\nprint(count_tuplex(tup,5)) # Output: 2\n",
        "generated_testcode": "assert count_tuplex((\"a\", \"b\", \"c\", \"a\", \"d\", \"b\", \"c\", \"e\", \"a\") == 2)\n",
        "test": "assert count_tuplex((2, 4, 5, 6, 2, 3, 4, 4, 7),4)==3\nassert count_tuplex((2, 4, 5, 6, 2, 3, 4, 4, 7),2)==2\nassert count_tuplex((2, 4, 7, 7, 7, 3, 4, 4, 7),7)==4",
        "canonical_solution": "def count_tuplex(tuplex,value):  \r\n  count = tuplex.count(value)\r\n  return count"
    },
    {
        "number": 930,
        "prompt": "Write a function that matches a string that has an a followed by zero or more b's by using regex.\ndef text_match(text):\n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    import re\n    pattern = r\"^a(.*b)*$\"\n    regex = re.compile(pattern)\n    if regex.match(text):\n        return True\n    else:\n        return False\n\n# Test the function with the following inputs:\nprint(text_match(\"ab\")) # True\nprint(text_match(\"abb\")) # True\nprint(text_match(\"abbc\")) # False\nprint(text_match(\"a\")) # True\nprint(text_match(\"aab\")) # False\nprint(text_match(\"abbbc\")) # True\nprint(text_match(\"aabbb\")) # True\nprint(text_match(\"a\")) # True\n\n\n# Output:\n# True\n# True\n# False\n# True\n# False\n# False\n# True\n# True ",
        "generated_testcode": "assert text_match(\"ab\") == True\n",
        "test": "assert text_match(\"msb\") == 'Not matched!'\nassert text_match(\"a0c\") == 'Found a match!'\nassert text_match(\"abbc\") == 'Found a match!'",
        "canonical_solution": "import re\r\ndef text_match(text):\r\n        patterns = 'ab*?'\r\n        if re.search(patterns,  text):\r\n                return ('Found a match!')\r\n        else:\r\n                return ('Not matched!')"
    },
    {
        "number": 931,
        "prompt": "Write a function to calculate the sum of series 1\u00b3+2\u00b3+3\u00b3+\u2026.+n\u00b3.\ndef sum_series(number):\n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    sum = 0\n    for i in range(1, number+1):\n        sum += i**3\n    return sum\n\n# Test the function\nprint(sum_series(10))\n\n# Output: 3285\n# The sum of series 1\u00b3+2\u00b3+3\u00b3+\u2026+10\u00b3 is 3285 ",
        "generated_testcode": "assert sum_series(5) == 225\n",
        "test": "assert sum_series(7)==784\nassert sum_series(5)==225\nassert sum_series(15)==14400",
        "canonical_solution": "import math \r\ndef sum_series(number):\r\n total = 0\r\n total = math.pow((number * (number + 1)) /2, 2)\r\n return total"
    },
    {
        "number": 932,
        "prompt": "Write a function to remove duplicate words from a given list of strings.\ndef remove_duplic_list(l):\n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    # create a dictionary to store the unique words\n    dict_unique_words = {}\n    # loop through the list\n    for word in l:\n        if word not in dict_unique_words:\n            dict_unique_words[word] = True\n    # convert the dictionary keys to a list and return it\n    return list(dict_unique_words.keys())\n\n# example usage:\nl = [\"apple\", \"banana\", \"apple\", \"orange\", \"pear\", \"banana\", \"pear\", \"pear\", \"orange\"]\nprint(remove_duplic_list(l)) # Output: [\"apple\", \"orange\", \"pear\", \"banana\"]\n\n# Time complexity: O(n)\n# Space complexity: O(n)",
        "generated_testcode": "assert remove_duplic_list([\"apple\", \"banana\", \"orange\", \"apple\", \"banana\", \"grape\", \"orange\", \"grape\", \"apple\"] == [\"apple\", \"banana\", \"orange\", \"grape\"]\n",
        "test": "assert remove_duplic_list([\"Python\", \"Exercises\", \"Practice\", \"Solution\", \"Exercises\"])==['Python', 'Exercises', 'Practice', 'Solution']\nassert remove_duplic_list([\"Python\", \"Exercises\", \"Practice\", \"Solution\", \"Exercises\",\"Java\"])==['Python', 'Exercises', 'Practice', 'Solution', 'Java']\nassert remove_duplic_list([\"Python\", \"Exercises\", \"Practice\", \"Solution\", \"Exercises\",\"C++\",\"C\",\"C++\"])==['Python', 'Exercises', 'Practice', 'Solution','C++','C']",
        "canonical_solution": "def remove_duplic_list(l):\r\n    temp = []\r\n    for x in l:\r\n        if x not in temp:\r\n            temp.append(x)\r\n    return temp"
    },
    {
        "number": 933,
        "prompt": "Write a function to convert camel case string to snake case string by using regex.\ndef camel_to_snake(text):\n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    import re\n\n    # split the words in the text using camel case pattern and join with underscore\n    return \"_\".join(re.sub('([a-z0-9])([A-Z])', r'\\1_\\2', text).lower().split(\"_\")).lower()\n\n# Test cases\nprint(camel_to_snake(\"camelCaseString\")) # should return \"camel_case_string\"\nprint(camel_to_snake(\"someOtherCamelCaseString\")) # should return \"some_other_camel_case_string\"\nprint(camel_to_snake(\"SomeOtherCamelCaseString\")) # should return \"some_other_camel_case_string\"\nprint(camel_to_snake(\"snake_case_string\")) # should return \"snake_case_string\"\nprint(camel_to_snake(\"SnakeCaseString\")) # should return \"snake_case_string\"\nprint(camel_to_snake(\"camelCaseString2021\")) # should return \"camel_case_string2021\"\nprint(camel_to_snake(\"CamelCaseString2021\")) # should return \"camel_case_string2021\"",
        "generated_testcode": "assert camel_to_snake(\"camelCaseString\") == \"camel_case_string\"\n",
        "test": "assert camel_to_snake('GoogleAssistant') == 'google_assistant'\nassert camel_to_snake('ChromeCast') == 'chrome_cast'\nassert camel_to_snake('QuadCore') == 'quad_core'",
        "canonical_solution": "import re\r\ndef camel_to_snake(text):\r\n  str1 = re.sub('(.)([A-Z][a-z]+)', r'\\1_\\2', text)\r\n  return re.sub('([a-z0-9])([A-Z])', r'\\1_\\2', str1).lower()"
    },
    {
        "number": 934,
        "prompt": "Write a function to find the nth delannoy number.\ndef dealnnoy_num(n, m): \n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    if n == 1 and m == 1:\n        return 1\n    elif n == 2 and m == 1:\n        return 1\n    elif n == 1 and m == 2:\n        return 1\n    elif n == 2 and m == 2:\n        return 2\n    else:\n        return dealnnoy_num(n-1, m-1) + dealnnoy_num(n, m-1) + dealnnoy_num(n-2, m-2) + dealnnoy_num(n-1, m-2)\n\n\n# Test the function with n = 4 and m = 3\nprint(dealnnoy_num(4, 3))\n# Output: 25\n",
        "generated_testcode": "assert dealnoy_num(1, 1) == 1\n",
        "test": "assert dealnnoy_num(3, 4) == 129\nassert dealnnoy_num(3, 3) == 63\nassert dealnnoy_num(4, 5) == 681",
        "canonical_solution": "def dealnnoy_num(n, m): \r\n\tif (m == 0 or n == 0) : \r\n\t\treturn 1\r\n\treturn dealnnoy_num(m - 1, n) + dealnnoy_num(m - 1, n - 1) + dealnnoy_num(m, n - 1)"
    },
    {
        "number": 935,
        "prompt": "Write a function to calculate the sum of series 1\u00b2+2\u00b2+3\u00b2+\u2026.+n\u00b2.\ndef series_sum(number):\n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    sum = 0\n    for i in range(1, number+1):\n        sum += i**2\n    return sum\n\n# Testing the function\nprint(series_sum(5))  # Output: 55 (1\u00b2+2\u00b2+3\u00b2+4\u00b2+5\u00b2+6\u00b2 = 1+4+9+16+25+36 = 55)\nprint(series_sum(10)) # Output: 385 (1\u00b2+2\u00b2+3\u00b2+4\u00b2+5\u00b2+6\u00b2+7\u00b2+8\u00b2+9\u00b2+10\u00b2+11\u00b2+12\u00b2+13\u00b2+14\u00b2+15\u00b2 = 1+4+9+16+25+36+49+64+81+100+121+144+169 = 385)\n\n\n# Another way to write the function using list comprehension\ndef series_sum(number):\n    return sum([i**2 for i in range(1, number+1)]) ",
        "generated_testcode": "assert series_sum(5) == 55\n",
        "test": "assert series_sum(6)==91\nassert series_sum(7)==140\nassert series_sum(12)==650",
        "canonical_solution": "def series_sum(number):\r\n total = 0\r\n total = (number * (number + 1) * (2 * number + 1)) / 6\r\n return total"
    },
    {
        "number": 936,
        "prompt": "Write a function to re-arrange the given tuples based on the given ordered list.\ndef re_arrange_tuples(test_list, ord_list):\n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    # Create an empty list to store the re-arranged tuples\n    result_list = []\n    # Loop through each tuple in the test_list\n    for i in test_list:\n        # Create a temporary variable to hold the index of the tuple in the ordered list\n        temp_idx = -1\n        # Loop through each element in the tuple\n        for j in i:\n            # If the element is present in the ordered list, update the temporary index variable\n            if j in ord_list:\n                temp_idx = ord_list.index(j)\n                # If the temporary index is not -1, break out of the loop\n                break\n        # If the temporary index is not -1, append the tuple to the result_list in the order of the temporary index\n        if temp_idx != -1:\n            result_list.insert(temp_idx, i)\n    # Return the result_list\n    return result_list\n\n\n# Test the function with some sample inputs\ntest_list = [(1, 2, 3, 4), (5, 6, 7), (8, 9, 10, 11), (12, 13)]\nord_list = [1, 3, 7, 11, 2]\nprint(re_arrange_tuples(test_list, ord_list))\n\n# Output: [(12, 13), (1, 2, 3, 4), (5, 6, 7), (8, 9",
        "generated_testcode": "assert re_arrange_tuples([(1,2,3), (4,5,6), (7,8,9)], [2, 0, 1]) == [(4,5,6), (1,2,3), (7,8,9)]\n",
        "test": "assert re_arrange_tuples([(4, 3), (1, 9), (2, 10), (3, 2)],  [1, 4, 2, 3]) == [(1, 9), (4, 3), (2, 10), (3, 2)]\nassert re_arrange_tuples([(5, 4), (2, 10), (3, 11), (4, 3)],  [3, 4, 2, 3]) == [(3, 11), (4, 3), (2, 10), (3, 11)]\nassert re_arrange_tuples([(6, 3), (3, 8), (5, 7), (2, 4)],  [2, 5, 3, 6]) == [(2, 4), (5, 7), (3, 8), (6, 3)]",
        "canonical_solution": "def re_arrange_tuples(test_list, ord_list):\r\n  temp = dict(test_list)\r\n  res = [(key, temp[key]) for key in ord_list]\r\n  return (res) "
    },
    {
        "number": 937,
        "prompt": "Write a function to count the most common character in a given string.\ndef max_char(str1):\n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    # Create a dictionary to store the count of each character\n    count_dict = {}\n    # Iterate through the string\n    for char in str1:\n        # Check if the character is already in the dictionary, if not, add it with a count of 1\n        if char in count_dict:\n            count_dict[char] += 1\n        else:\n            count_dict[char] = 1\n    # Find the maximum count\n    max_count = max(count_dict.values())\n    # Find all characters with the maximum count\n    max_chars = [k for k, v in count_dict.items() if v == max_count]\n    # Return the most common character\n    return max_chars[0]\n\n\n# Test the function\nprint(max_char(\"hello world\"))  # \"l\"\nprint(max_char(\"abbbcccddddeeefff\"))  # \"e\"\nprint(max_char(\"aaabbbcccddddeee\"))  # \"a\"\nprint(max_char(\"Python is awesome\"))  # \"o\"\n",
        "generated_testcode": "assert max_char(\"hello world\") == \"l\"\n",
        "test": "assert max_char(\"hello world\")==('l')\nassert max_char(\"hello \")==('l')\nassert max_char(\"python pr\")==('p')",
        "canonical_solution": "from collections import Counter \r\ndef max_char(str1):\r\n    temp = Counter(str1) \r\n    max_char = max(temp, key = temp.get)\r\n    return max_char"
    },
    {
        "number": 938,
        "prompt": "Write a function to find three closest elements from three sorted arrays.\ndef find_closet(A, B, C, p, q, r): \n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    i = j = r = 0\n    while i < len(A) and j < len(B) and r < len(C): \n        if A[i] <= B[j] <= C[r]:\n            return i, j, r\n        elif A[i] > B[j]:\n            r += 1\n        elif B[j] > C[r]:\n            i += 1\n        else:\n            j += 1\n    return i, j, r \n\n\ndef find_closest_elements(A, B, C): \n    res = []\n    i, j, r = 0, 0, 0\n    while i < len(A) and j < len(B) and r < len(C): \n        if A[i] <= B[j] <= C[r]: \n            res.append(A[i])\n            i += 1\n            j += 1\n            r += 1\n        elif A[i] > B[j]: \n            r += 1\n        else: \n            i += 1\n    while i < len(A) and j < len(B): \n        res.append(B[j])\n        i += 1\n        j += 1\n    while j < len(B) and r < len(C): \n        res.append(C[r])\n        j += 1\n        r += 1\n    while i < len(A) and r < len(C): \n        res",
        "generated_testcode": "assert find_closet(sorted([1, 2, 3, 4, 5, 6, 7, 8, 9], [2, 5, 7, 9, 10, 12, 13, 15], 2, 3) == (5, 7, 9)\n",
        "test": "assert find_closet([1, 4, 10],[2, 15, 20],[10, 12],3,3,2) == (10, 15, 10)\nassert find_closet([20, 24, 100],[2, 19, 22, 79, 800],[10, 12, 23, 24, 119],3,5,5) == (24, 22, 23)\nassert find_closet([2, 5, 11],[3, 16, 21],[11, 13],3,3,2) == (11, 16, 11)",
        "canonical_solution": "import sys \r\n\r\ndef find_closet(A, B, C, p, q, r): \r\n\tdiff = sys.maxsize \r\n\tres_i = 0\r\n\tres_j = 0\r\n\tres_k = 0\r\n\ti = 0\r\n\tj = 0\r\n\tk = 0\r\n\twhile(i < p and j < q and k < r): \r\n\t\tminimum = min(A[i], min(B[j], C[k])) \r\n\t\tmaximum = max(A[i], max(B[j], C[k])); \r\n\t\tif maximum-minimum < diff: \r\n\t\t\tres_i = i \r\n\t\t\tres_j = j \r\n\t\t\tres_k = k \r\n\t\t\tdiff = maximum - minimum; \r\n\t\tif diff == 0: \r\n\t\t\tbreak\r\n\t\tif A[i] == minimum: \r\n\t\t\ti = i+1\r\n\t\telif B[j] == minimum: \r\n\t\t\tj = j+1\r\n\t\telse: \r\n\t\t\tk = k+1\r\n\treturn A[res_i],B[res_j],C[res_k]"
    },
    {
        "number": 939,
        "prompt": "Write a function to sort a list of dictionaries using lambda function.\ndef sorted_models(models):\n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    return sorted(models, key=lambda x: x['year'])\n\n\n#Example usage:\nmodels = [\n    {'name': 'model1', 'year': 2019},\n    {'name': 'model2', 'year': 2020},\n    {'name': 'model3', 'year': 2018},\n    {'name': 'model4', 'year': 2019},\n    {'name': 'model5', 'year': 2021}\n]\n\nsorted_models(models) # [{'name': 'model3', 'year': 2018}, {'name': 'model1', 'year': 2019}, {'name': 'model4', 'year': 2019}, {'name': 'model5', 'year': 2021}]\n\n# Output should be sorted by year in ascending order ",
        "generated_testcode": "assert sorted_models",
        "test": "assert sorted_models([{'make':'Nokia', 'model':216, 'color':'Black'}, {'make':'Mi Max', 'model':2, 'color':'Gold'}, {'make':'Samsung', 'model': 7, 'color':'Blue'}])==[{'make': 'Nokia', 'model': 216, 'color': 'Black'}, {'make': 'Samsung', 'model': 7, 'color': 'Blue'}, {'make': 'Mi Max', 'model': 2, 'color': 'Gold'}]\nassert sorted_models([{'make':'Vivo', 'model':20,'color':'Blue'},{'make': 'oppo','model':17,'color':'Gold'},{'make':'Apple','model':11,'color':'red'}])==([{'make':'Vivo', 'model':20,'color':'Blue'},{'make': 'oppo','model':17,'color':'Gold'},{'make':'Apple','model':11,'color':'red'}])\nassert sorted_models([{'make':'micromax','model':40,'color':'grey'},{'make':'poco','model':60,'color':'blue'}])==([{'make':'poco','model':60,'color':'blue'},{'make':'micromax','model':40,'color':'grey'}])",
        "canonical_solution": "def sorted_models(models):\r\n sorted_models = sorted(models, key = lambda x: x['color'])\r\n return sorted_models"
    },
    {
        "number": 940,
        "prompt": "Write a function to sort the given array by using heap sort.\ndef heap_sort(arr):\n",
        "checkpoint": "7B",
        "pass": 3,
        "correct": true,
        "answer": "    def heapify(arr, n, i):\n        largest = i\n        left = 2 * i + 1\n        right = 2 * i + 2\n\n        if left < n and arr[left] > arr[largest]:\n            largest = left\n\n        if right < n and arr[right] > arr[largest]:\n            largest = right\n\n        if largest != i:\n            arr[i], arr[largest] = arr[largest], arr[i]\n            heapify(arr, n, largest)\n\n\n    def build_max_heap(arr):\n        for i in range(len(arr) // 2 - 1, -1, -1):\n            heapify(arr, len(arr), i)\n\n    build_max_heap(arr)\n    for i in range(len(arr) - 1, 0, -1):\n        arr[0], arr[i] = arr[i], arr[0]\n        heapify(arr, i, 0)\n    return arr\n\n\n\n# Test the function with the given input array\narr = [12, 11, 13, 45, 1, 2, 8, 99, 26, 5, 27]\nprint(\"Original array:\", arr)\nprint(\"Sorted array:\", heap_sort(arr))\n",
        "generated_testcode": "assert heap_sort([3, 1, 4, 2, 5, 1, 6, 7, 8, 9, 0, 2, 4, 5, 3] ) == [0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 7, 8, 9]\n\n# Test case 2\n",
        "test": "assert heap_sort([12, 2, 4, 5, 2, 3]) == [2, 2, 3, 4, 5, 12]\nassert heap_sort([32, 14, 5, 6, 7, 19]) == [5, 6, 7, 14, 19, 32]\nassert heap_sort([21, 15, 29, 78, 65]) == [15, 21, 29, 65, 78]",
        "canonical_solution": "def heap_sort(arr):\r\n    heapify(arr)  \r\n    end = len(arr) - 1\r\n    while end > 0:\r\n        arr[end], arr[0] = arr[0], arr[end]\r\n        shift_down(arr, 0, end - 1)\r\n        end -= 1\r\n    return arr\r\n\r\ndef heapify(arr):\r\n    start = len(arr) // 2\r\n    while start >= 0:\r\n        shift_down(arr, start, len(arr) - 1)\r\n        start -= 1\r\ndef shift_down(arr, start, end):\r\n    root = start\r\n    while root * 2 + 1 <= end:\r\n        child = root * 2 + 1\r\n        if child + 1 <= end and arr[child] < arr[child + 1]:\r\n            child += 1\r\n        if child <= end and arr[root] < arr[child]:\r\n            arr[root], arr[child] = arr[child], arr[root]\r\n            root = child\r\n        else:\r\n            return\r\n"
    },
    {
        "number": 941,
        "prompt": "Write a function to count the elements in a list until an element is a tuple.\ndef count_elim(num):\n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    count = 0\n    for i in num:\n        if isinstance(i, tuple):\n            break\n        else:\n            count += 1\n    return count\n\n# Test cases\nprint(count_elim([1, 2, 3, 4, 5, \"abc\", \"def\", \"ghi\", (1, 2, 3), \"jkl\", 4, 5, 6, \"mno\", 7])) # Output: 5\nprint(count_elim([1, 2, 3, 4, 5, \"abc\", \"def\", \"ghi\", \"jkl\", 4, 5, 6, \"mno\", 7])) # Output: 7\nprint(count_elim([1, 2, 3, 4, \"abc\", \"def\", \"ghi\", \"jkl\", 4, 5, 6, \"mno\", 7])) # Output: 5\nprint(count_elim([1, 2, 3, \"abc\", \"def\", \"ghi\", \"jkl\", 4, 5, 6, \"mno\", 7])) # Output: 3\nprint(count_elim([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])) # Output: 6\n\n",
        "generated_testcode": "assert count_elim([\"a\", \"b\", \"c\", \"d\", \"e\", (\"f\", \"g\"), \"h\", \"i\", \"j\", \"k\"]) == 4\n",
        "test": "assert count_elim([10,20,30,(10,20),40])==3\nassert count_elim([10,(20,30),(10,20),40])==1\nassert count_elim([(10,(20,30,(10,20),40))])==0",
        "canonical_solution": "def count_elim(num):\r\n  count_elim = 0\r\n  for n in num:\r\n    if isinstance(n, tuple):\r\n        break\r\n    count_elim += 1\r\n  return count_elim"
    },
    {
        "number": 942,
        "prompt": "Write a function to check if any list element is present in the given list.\ndef check_element(test_tup, check_list):\n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    for i in check_list:\n        if i in test_tup:\n            return True\n    return False\n\n\n# Test the function with the given test case\ntest_tup = (1, 2, 3, 4, 5, 6)\ntest_list = [2, 5, 7, 8, 9]\nprint(check_element(test_tup, test_list))  # Output: True\n\ntest_tup = (10, 20, 30, 40, 50)\ntest_list = [1, 2, 3, 4, 5]\nprint(check_element(test_tup, test_list))  # Output: False\n\n\n# Another test case\ntest_tup = (10, 20, 30, 40, 50)\ntest_list = [1, 2, 3, 4, 5]\nprint(check_element(test_tup, test_list))  # Output: False\n\ntest_tup = (1, 2, 3, 4, 5)\ntest_list = [1, 2, 3, 4, 5]\nprint(check_element(test_tup, test_list))  # Output: True\n\n\n# Another test case\ntest_tup = (1, 2, 3, 4, 5)\ntest_list = [10, 20, ",
        "generated_testcode": "assert check_element(('a', ['a', 'b', 'c', 'd']) == True\n",
        "test": "assert check_element((4, 5, 7, 9, 3),  [6, 7, 10, 11]) == True\nassert check_element((1, 2, 3, 4),  [4, 6, 7, 8, 9]) == True\nassert check_element((3, 2, 1, 4, 5),  [9, 8, 7, 6]) == False",
        "canonical_solution": "def check_element(test_tup, check_list):\r\n  res = False\r\n  for ele in check_list:\r\n    if ele in test_tup:\r\n      res = True\r\n      break\r\n  return (res) "
    },
    {
        "number": 943,
        "prompt": "Write a function to combine two given sorted lists using heapq module.\ndef combine_lists(num1,num2):\n",
        "checkpoint": "7B",
        "pass": 3,
        "correct": true,
        "answer": "    import heapq\n    heap = []\n    for num in num1:\n        heapq.heappush(heap,num)\n    for num in num2:\n        heapq.heappush(heap,num)\n    return sorted(heap)\n\n\n#Test the function\nnum1 = [1,3,5,7,9]\nnum2 = [2,4,6,8,10]\nprint(combine_lists(num1,num2)) #[1,2,3,4,5,6,7,8,9,10]\n\nnum1 = [1,3,5]\nnum2 = [2,4,6,8,10]\nprint(combine_lists(num1,num2)) #[1,2,3,4,5,6,8,10]\n\nnum1 = [1,3,5,7,9]\nnum2 = [2,4,6,8]\nprint(combine_lists(num1,num2)) #[1,2,3,4,5,6,7,8,9]\n\nnum1 = [1,3]\nnum2 = [2,4,6,8,10]\nprint(combine_lists(num1,num2)) #[1,2,3,4,6,8,10]\n\nnum1 = [1,3,5,7]\nnum2 = []\nprint(combine_lists(num1,num2)) #[1,3",
        "generated_testcode": "assert combine_lists([1,2,3,4,5],[2,3,4,5,6]) == [1,2,2,3,3,4,4,5,5,6]\n",
        "test": "assert combine_lists([1, 3, 5, 7, 9, 11],[0, 2, 4, 6, 8, 10])==[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]\nassert combine_lists([1, 3, 5, 6, 8, 9], [2, 5, 7, 11])==[1,2,3,5,5,6,7,8,9,11]\nassert combine_lists([1,3,7],[2,4,6])==[1,2,3,4,6,7]",
        "canonical_solution": "from heapq import merge\r\ndef combine_lists(num1,num2):\r\n  combine_lists=list(merge(num1, num2))\r\n  return combine_lists"
    },
    {
        "number": 944,
        "prompt": "Write a function to separate and print the numbers and their position of a given string.\ndef num_position(text):\n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    nums = []\n    positions = []\n    for i, char in enumerate(text):\n        if char.isdigit():\n            nums.append(int(char))\n            positions.append(i)\n    for num, pos in zip(nums, positions):\n        print(f\"Number {num} is found at position {pos}\")\n\n\n# Example usage:\nnum_position(\"The number 3 is at position 8 in this string\")  # Output: Number 3 is found at position 2, Number 8 is found at position 12\nnum_position(\"The number 12345 is at position 14 in this string\") # Output: Number 1 is found at position 14, Number 2 is found at position 15, Number 3 is found at position 16, Number 4 is found at position 17, Number 5 is found at position 18\nnum_position(\"The number 12345 is at position 123\") # Output: Number 1 is found at position 2, Number 2 is found at position 3, Number 3 is found at position 4, Number 4 is found at position 5, Number 5 is found at position 6\nnum_position(\"No numbers in this string\") # Output: None\n",
        "generated_testcode": "assert num_position(123abc456) == {'1': [0], '3': [2], '4': [3], '5': [4], '6': [5]}\n",
        "test": "assert num_position(\"there are 70 flats in this apartment\")==10\nassert num_position(\"every adult have 32 teeth\")==17\nassert num_position(\"isha has 79 chocolates in her bag\")==9",
        "canonical_solution": "import re\r\ndef num_position(text):\r\n for m in re.finditer(\"\\d+\", text):\r\n    return m.start()"
    },
    {
        "number": 945,
        "prompt": "Write a function to convert the given tuples into set.\ndef tuple_to_set(t):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": true,
        "answer": "    return set(t)\n\n# Test the function\ntup = (1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 2, 4, 6, 8, 10)\nprint(tuple_to_set(tup))\n\n# Output: {1, 2, 3, 4, 5, 6, 7, 8, 9, 10}\n\n\ntup = (1, 2, 2, 3, 3, 3, 4, 4, 4, 5, 5)\nprint(tuple_to_set(tup))\n# Output: {1, 2, 3, 4, 5} ",
        "generated_testcode": "assert tuple_to_set(()) == set()\n",
        "test": "assert tuple_to_set(('x', 'y', 'z') ) == {'y', 'x', 'z'}\nassert tuple_to_set(('a', 'b', 'c') ) == {'c', 'a', 'b'}\nassert tuple_to_set(('z', 'd', 'e') ) == {'d', 'e', 'z'}",
        "canonical_solution": "def tuple_to_set(t):\r\n  s = set(t)\r\n  return (s) "
    },
    {
        "number": 946,
        "prompt": "Write a function to find the most common elements and their counts of a specified text.\ndef most_common_elem(s,a):\n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    # s is the input text, a is the list of elements\n    from collections import Counter\n    count = Counter(s)\n    result = {}\n    for elem in a:\n        if elem in count:\n            result[elem] = count[elem]\n    return result\n\n# Example usage:\ns = \"hello world hello world universe hello\"\na = [\"world\", \"hello\"]\nprint(most_common_elem(s, a)) # should return {\"hello\": 2, \"world\": 2}\n\ns = \"this is a test this is only a test this is a test\"\na = [\"this\", \"is\"]\nprint(most_common_elem(s, a)) # should return {\"this\": 3, \"is\": 2}\n\ns = \"hello world universe\"\na = [\"world\", \"hello\"]\nprint(most_common_elem(s, a)) # should return {}\n\ns = \"hello world universe world hello\"\na = [\"hello\", \"world\"]\nprint(most_common_elem(s, a)) # should return {\"world\": 2, \"hello\": 2}\n\ns = \"hello world world universe\"\na = [\"hello\", \"world\"]\nprint(most_common_elem(s, a)) # should return {\"hello\": 1, \"world\": 1}\n",
        "generated_testcode": "assert most_common_elem(\"hello world world world world hello world\", \"world\") == {'world': 2}\n",
        "test": "assert most_common_elem('lkseropewdssafsdfafkpwe',3)==[('s', 4), ('e', 3), ('f', 3)] \nassert most_common_elem('lkseropewdssafsdfafkpwe',2)==[('s', 4), ('e', 3)]\nassert most_common_elem('lkseropewdssafsdfafkpwe',7)==[('s', 4), ('e', 3), ('f', 3), ('k', 2), ('p', 2), ('w', 2), ('d', 2)]",
        "canonical_solution": "from collections import Counter \r\ndef most_common_elem(s,a):\r\n  most_common_elem=Counter(s).most_common(a)\r\n  return most_common_elem"
    },
    {
        "number": 947,
        "prompt": "Write a python function to find the length of the shortest word.\ndef len_log(list1):\n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    shortest_word = min(list1, key=len)\n    return len(shortest_word)\n\n#Test the function\nlist1 = [\"apple\", \"banana\", \"cherry\", \"grape\", \"orange\", \"kiwi\", \"strawberry\"]\nprint(len_log(list1))\n\n#Output: 5\n\nlist2 = [\"hello\", \"world\", \"programming\", \"python\", \"is\", \"awesome\"]\nprint(len_log(list2))\n#Output: 5 ",
        "generated_testcode": "assert len_log(['apple', 'banana', 'cherry', 'dog', 'cat']) == 3\n",
        "test": "assert len_log([\"win\",\"lose\",\"great\"]) == 3\nassert len_log([\"a\",\"ab\",\"abc\"]) == 1\nassert len_log([\"12\",\"12\",\"1234\"]) == 2",
        "canonical_solution": "def len_log(list1):\r\n    min=len(list1[0])\r\n    for i in list1:\r\n        if len(i)<min:\r\n            min=len(i)\r\n    return min"
    },
    {
        "number": 948,
        "prompt": "Write a function to get an item of a tuple.\ndef get_item(tup1,index):\n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    if index >= 0 and index < len(tup1):\n        return tup1[index]\n    else:\n        return \"Error: Index out of range\"\n\n#Test the function with a tuple\ntup1 = (1,2,3,4,5,6,7)\nprint(get_item(tup1, 3)) # Output: 4\nprint(get_item(tup1, 6)) # Output: Error: Index out of range\nprint(get_item(tup1, -1)) # Output: Error: Index out of range\nprint(get_item(tup1, 0)) # Output: 1\nprint(get_item(tup1, 2)) # Output: 3\n",
        "generated_testcode": "assert get_item((1,2,3,4,5,6,7,8), 3) == 5\n",
        "test": "assert get_item((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),3)==('e')\nassert get_item((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),-4)==('u')\nassert get_item((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),-3)==('r')",
        "canonical_solution": "def get_item(tup1,index):\r\n  item = tup1[index]\r\n  return item"
    },
    {
        "number": 949,
        "prompt": "Write a function to sort the given tuple list basis the total digits in tuple.\ndef count_digs(tup):\n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": true,
        "answer": "    return sum(map(len,map(str,tup))\n\n\ntuples_list = [(12, 23, 45, 56, 78, 99, 101, 234, 67, 89, 10, 2, 345, 6, 789, 1000)\nsorted_tuples = sorted(tuples_list, key=count_digs)\nprint(sorted_tuples)\n\n\n# Output: [(2, 34, 6, 10, 12, 67, 89, 45, 23, 101, 78, 345, 9, 100, 234, 89]\n\n# Explanation:\n# The output is sorted based on the total number of digits in the tuples, where the tuple with the least number of digits is first and the tuple with the most number of digits is last.\n# So, (2, 34, 6, 10) comes first because 2, 34, 6 have 2 digits, 10 is 1 digit, 101, 67, 89 have 2 digits and so on. ",
        "generated_testcode": "assert count_digs(()) == []\n",
        "test": "assert sort_list([(3, 4, 6, 723), (1, 2), (12345,), (134, 234, 34)] ) == '[(1, 2), (12345,), (3, 4, 6, 723), (134, 234, 34)]'\nassert sort_list([(3, 4, 8), (1, 2), (1234335,), (1345, 234, 334)] ) == '[(1, 2), (3, 4, 8), (1234335,), (1345, 234, 334)]'\nassert sort_list([(34, 4, 61, 723), (1, 2), (145,), (134, 23)] ) == '[(1, 2), (145,), (134, 23), (34, 4, 61, 723)]'",
        "canonical_solution": "def count_digs(tup):\r\n  return sum([len(str(ele)) for ele in tup ]) \r\ndef sort_list(test_list):\r\n  test_list.sort(key = count_digs)\r\n  return (str(test_list))"
    },
    {
        "number": 950,
        "prompt": "Write a function to display sign of the chinese zodiac for given year.\ndef chinese_zodiac(year):\n",
        "checkpoint": "7B",
        "pass": 9,
        "correct": true,
        "answer": "    \"\"\"\n    This function takes a year as input and returns the sign of the chinese zodiac.\n    \"\"\"\n    if (year % 4 == 0 and year % 1000 != 0) or (year % 4000 == 0):\n        if year % 12 == 8:\n            return \"Dragon\"\n        elif year % 12 == 9:\n            return \"Snake\"\n        elif year % 12 == 10:\n            return \"Dog\"\n        elif year % 12 == 11:\n            return \"Pig\"\n        elif year % 12 == 0:\n            return \"Rat\"\n        elif year % 12 == 1:\n            return \"Ox\"\n        elif year % 12 == 2:\n            return \"Tiger\"\n        elif year % 12 == 3:\n            return \"Rabbit\"\n        elif year % 12 == 4:\n            return \"Horse\"\n        elif year % 12 == 5:\n            return \"Goat\"\n        elif year % 12 == 6:\n            return \"Monkey\"\n        elif year % 12 == 7:\n            return \"Rooster\"\n        elif year % 12 == 8:\n            return \"Duck\"\n        elif year % 12 == 9:\n            return \"Dragon\"\n        elif year % 12 == 0:\n            return \"Snake\"",
        "generated_testcode": "assert chinese_zodiac(20000) == \"Dragon\"\n",
        "test": "assert chinese_zodiac(1997)==('Ox')\nassert chinese_zodiac(1998)==('Tiger')\nassert chinese_zodiac(1994)==('Dog')",
        "canonical_solution": "def chinese_zodiac(year):\r\n if (year - 2000) % 12 == 0:\r\n     sign = 'Dragon'\r\n elif (year - 2000) % 12 == 1:\r\n     sign = 'Snake'\r\n elif (year - 2000) % 12 == 2:\r\n     sign = 'Horse'\r\n elif (year - 2000) % 12 == 3:\r\n     sign = 'sheep'\r\n elif (year - 2000) % 12 == 4:\r\n     sign = 'Monkey'\r\n elif (year - 2000) % 12 == 5:\r\n     sign = 'Rooster'\r\n elif (year - 2000) % 12 == 6:\r\n     sign = 'Dog'\r\n elif (year - 2000) % 12 == 7:\r\n     sign = 'Pig'\r\n elif (year - 2000) % 12 == 8:\r\n     sign = 'Rat'\r\n elif (year - 2000) % 12 == 9:\r\n     sign = 'Ox'\r\n elif (year - 2000) % 12 == 10:\r\n     sign = 'Tiger'\r\n else:\r\n     sign = 'Hare'\r\n return sign"
    },
    {
        "number": 951,
        "prompt": "Write a function to find the maximum of similar indices in two lists of tuples.\ndef max_similar_indices(test_list1, test_list2):\n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    # Initialize max_similar_index to None\n    max_similar_index = None\n    max_similar_value = None\n\n    # Iterate through each tuple in test_list1\n    for i in range(len(test_list1)):\n        # Iterate through each tuple in test_list2\n        for j in range(len(test_list2)):\n            # Check if the indices match\n            if test_list1[i][0] == test_list2[j][0]:\n                # Get the value of the index in test_list1\n                value1 = test_list1[i][1]\n                # Get the value of the index in test_list2\n                value2 = test_list2[j][1]\n                # Calculate the sum of the two values\n                sum_values = value1 + value2\n                # If the sum is greater than max_similar_value, update max_similar_value and max_similar_index\n                if max_similar_value is None or sum_values > max_similar_value:\n                    max_similar_index = (i, j)\n                    max_similar_value = sum_values\n    # Return max_similar_index\n    return max_similar_index\n\n\n# Test the function\ntest_list1 = [(1, 5), (2, 3), (3, 4), (4, 6)]\ntest_list2 = [(1, 10), (2, 2), (3, 1), (4, 7)]",
        "generated_testcode": "assert max_similar_indices([(1,2), (3,4), (5,6), (7,8)], [(1,2), (3,4), (5,6), (9,10)]) == (0, 2)\n",
        "test": "assert max_similar_indices([(2, 4), (6, 7), (5, 1)],[(5, 4), (8, 10), (8, 14)]) == [(5, 4), (8, 10), (8, 14)]\nassert max_similar_indices([(3, 5), (7, 8), (6, 2)],[(6, 5), (9, 11), (9, 15)]) == [(6, 5), (9, 11), (9, 15)]\nassert max_similar_indices([(4, 6), (8, 9), (7, 3)],[(7, 6), (10, 12), (10, 16)]) == [(7, 6), (10, 12), (10, 16)]",
        "canonical_solution": "def max_similar_indices(test_list1, test_list2):\r\n  res = [(max(x[0], y[0]), max(x[1], y[1]))\r\n   for x, y in zip(test_list1, test_list2)]\r\n  return (res) "
    },
    {
        "number": 952,
        "prompt": "Write a function to compute the value of ncr mod p.\ndef nCr_mod_p(n, r, p): \n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    if n < 0 or r < 0 or p < 2: \n        return 0\n    C = 1\n    if r > n: \n        r = n % r \n    if r == 0 or r == n: \n        return 1\n    for i in range(r, 0, -1): \n        C = (C * (n - i) % p) * (i) % p\n    return C ",
        "generated_testcode": "assert nCr_mod_p(10, 5, 100000000000007) == 26280\n",
        "test": "assert nCr_mod_p(10, 2, 13) == 6\nassert nCr_mod_p(11, 3, 14) == 11\nassert nCr_mod_p(18, 14, 19) == 1",
        "canonical_solution": "def nCr_mod_p(n, r, p): \r\n\tif (r > n- r): \r\n\t\tr = n - r \r\n\tC = [0 for i in range(r + 1)] \r\n\tC[0] = 1 \r\n\tfor i in range(1, n + 1): \r\n\t\tfor j in range(min(i, r), 0, -1): \r\n\t\t\tC[j] = (C[j] + C[j-1]) % p \r\n\treturn C[r] "
    },
    {
        "number": 953,
        "prompt": "Write a python function to find the minimun number of subsets with distinct elements.\ndef subset(ar, n): \n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    from itertools import combinations\n    arr = []\n    for i in range(1, n+1):\n        arr += list(combinations(ar, i))\n    count = 0\n    for i in arr:\n        if len(set(i)) == len(i):\n            count += 1\n    return count\n    \n# test the function\nar = [1, 2, 2, 3, 4, 4, 5, 5, 6]\nn = len(ar)\nprint(subset(ar, n)) # expected output: 4",
        "generated_testcode": "assert subset([1,2,3,4,4,5], 4) == 3\n",
        "test": "assert subset([1, 2, 3, 4],4) == 1\nassert subset([5, 6, 9, 3, 4, 3, 4],7) == 2\nassert subset([1, 2, 3 ],3) == 1",
        "canonical_solution": "def subset(ar, n): \r\n    res = 0\r\n    ar.sort() \r\n    for i in range(0, n) : \r\n        count = 1\r\n        for i in range(n - 1): \r\n            if ar[i] == ar[i + 1]: \r\n                count+=1\r\n            else: \r\n                break \r\n        res = max(res, count)  \r\n    return res "
    },
    {
        "number": 954,
        "prompt": "Write a function that gives profit amount if the given amount has profit else return none.\ndef profit_amount(actual_cost,sale_amount): \n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    if sale_amount > actual_cost:\n        return sale_amount - actual_cost\n    else:\n        return None\n\nprint(profit_amount(100,20)) #Output: 10\nprint(profit_amount(20,10)) #Output: None\n",
        "generated_testcode": "assert profit_amount(1000,120) == 20\n",
        "test": "assert profit_amount(1500,1200)==300\nassert profit_amount(100,200)==None\nassert profit_amount(2000,5000)==None",
        "canonical_solution": "def profit_amount(actual_cost,sale_amount): \r\n if(actual_cost > sale_amount):\r\n    amount = actual_cost - sale_amount\r\n    return amount\r\n else:\r\n    return None"
    },
    {
        "number": 955,
        "prompt": "Write a function to find out, if the given number is abundant.\ndef is_abundant(n):\n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    sum_of_divisors = sum(i for i in range(1, (n // 2 + 1) if n % 2 == 0 else (n // 2) + 1) if n % i == 0)\n    if sum_of_divisors > n:\n        return True\n    return False\n\n\n# Test cases\nprint(is_abundant(12)) # True\nprint(is_abundant(24)) # False\nprint(is_abundant(28)) # True\nprint(is_abundant(30)) # False\nprint(is_abundant(36)) # True\nprint(is_abundant(42)) # True\n\n",
        "generated_testcode": "assert is_abundant(12) == True\n",
        "test": "assert is_abundant(12)==True\nassert is_abundant(13)==False\nassert is_abundant(9)==False",
        "canonical_solution": "def is_abundant(n):\r\n    fctrsum = sum([fctr for fctr in range(1, n) if n % fctr == 0])\r\n    return fctrsum > n"
    },
    {
        "number": 956,
        "prompt": "Write a function to split the given string at uppercase letters by using regex.\ndef split_list(text):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": true,
        "answer": "    #your code goes here\n    import re\n    return re.findall('[a-z]+|[A-Z][a-z]*', text)\n    \n#Example:\n#split_list(\"HelloWorldPythonProgrammingIsAwesome\") should return [\"Hello\", \"World\", \"Python\", \"Programming\", \"Is\", \"Awesome\"]\n#split_list(\"PythonProgrammingIsGreat\") should return [\"Python\", \"Programming\", \"Is\", \"Great\"]\n#split_list(\"CodeWarsIsAwesome\") should return [\"Code\", \"Wars\", \"Is\", \"Awesome\"] ",
        "generated_testcode": "assert split_list(\"HelloWorld\") == [\"Hello\", \"World\"]\n",
        "test": "assert split_list(\"LearnToBuildAnythingWithGoogle\") == ['Learn', 'To', 'Build', 'Anything', 'With', 'Google']\nassert split_list(\"ApmlifyingTheBlack+DeveloperCommunity\") == ['Apmlifying', 'The', 'Black+', 'Developer', 'Community']\nassert split_list(\"UpdateInTheGoEcoSystem\") == ['Update', 'In', 'The', 'Go', 'Eco', 'System']",
        "canonical_solution": "import re\r\ndef split_list(text):\r\n  return (re.findall('[A-Z][^A-Z]*', text))"
    },
    {
        "number": 957,
        "prompt": "Write a python function to get the position of rightmost set bit.\ndef get_First_Set_Bit_Pos(n):\n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    if n == 0:\n        return 0\n    i = 0\n    while ((n & 1) == 0):\n        i += 1\n        n >>= 1\n    return i\n\nprint(get_First_Set_Bit_Pos(10)) # Output : 1\nprint(get_First_Set_Bit_Pos(16)) # Output : 4\nprint(get_First_Set_Bit_Pos(8)) # Output : 3\nprint(get_First_Set_Bit_Pos(27)) # Output : 3\n\n\n# Approach:\n\n# We can use a while loop to keep shifting the binary representation of the number to right until we find the first set bit.\n# In each iteration, we check if the last bit is set or not. If it is set, then we increment the position counter i and shift the number to right.\n# If it is not set, we return the current position of i as the position of the rightmost set bit. ",
        "generated_testcode": "assert get_First_Set_Bit_Pos(0b10101010101010) == 1\n",
        "test": "assert get_First_Set_Bit_Pos(12) == 3\nassert get_First_Set_Bit_Pos(18) == 2\nassert get_First_Set_Bit_Pos(16) == 5",
        "canonical_solution": "import math\r\ndef get_First_Set_Bit_Pos(n):\r\n     return math.log2(n&-n)+1"
    },
    {
        "number": 958,
        "prompt": "Write a function to convert an integer into a roman numeral.\ndef int_to_roman( num):\n",
        "checkpoint": "7B",
        "pass": 6,
        "correct": true,
        "answer": "    roman_numerals = {\n        10000: \"M\",\n        900: \"CM\",\n        500: \"L\",\n        40: \"XL\",\n        10: \"X\",\n        9: \"IX\",\n        5: \"V\",\n        4: \"IV\",\n        1: \"I\"\n    }\n    result = \"\"\n    for value, numeral in roman_numerals.items():\n        while num >= value:\n            result += numeral\n            num -= value\n    return result\n\n\n# Test cases\nprint(int_to_roman(1)) # should return \"I\"\nprint(int_to_roman(6)) # should return \"VI\"\nprint(int_to_roman(22)) # should return \"XXII\"\nprint(int_to_roman(19887)) # should return \"MCMLXXXVII\"\nprint(int_to_roman(39999)) # should return \"MMMCMXCIX\"\n",
        "generated_testcode": "assert int_to_roman(1) == \"I\"\n",
        "test": "assert int_to_roman(1)==(\"I\")\nassert int_to_roman(50)==(\"L\")\nassert int_to_roman(4)==(\"IV\")",
        "canonical_solution": "def int_to_roman( num):\r\n        val = [1000, 900, 500, 400,100, 90, 50, 40,10, 9, 5, 4,1]\r\n        syb = [\"M\", \"CM\", \"D\", \"CD\",\"C\", \"XC\", \"L\", \"XL\",\"X\", \"IX\", \"V\", \"IV\",\"I\"]\r\n        roman_num = ''\r\n        i = 0\r\n        while  num > 0:\r\n            for _ in range(num // val[i]):\r\n                roman_num += syb[i]\r\n                num -= val[i]\r\n            i += 1\r\n        return roman_num"
    },
    {
        "number": 959,
        "prompt": "Write a python function to find the average of a list.\ndef Average(lst): \n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    if len(lst) == 0:\n        return 0\n    else:\n        return sum(lst) / len(lst)\n\n#Test the function\nprint(Average([1, 2, 3, 4, 5])) # Output: 3.0\nprint(Average([10, 20, 30, 40, 50, 60, 70])) # Output: 40.0\nprint(Average([])) # Output: 0\n",
        "generated_testcode": "assert Average([1, 2, 3, 4, 5]) == 3.0\n",
        "test": "assert Average([15, 9, 55, 41, 35, 20, 62, 49]) == 35.75\nassert Average([4, 5, 1, 2, 9, 7, 10, 8]) == 5.75\nassert Average([1,2,3]) == 2",
        "canonical_solution": "def Average(lst): \r\n    return sum(lst) / len(lst) "
    },
    {
        "number": 960,
        "prompt": "Write a function to solve tiling problem.\ndef get_noOfways(n):\n",
        "checkpoint": "7B",
        "pass": 3,
        "correct": true,
        "answer": "    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 3\n    else:\n        return get_noOfways(n-1) + get_noOfways(n-2) + get_noOfways(n-3)\n\n\n# Test cases\nprint(get_noOfways(0)) # Output: 1\nprint(get_noOfways(1)) # Output: 1\nprint(get_noOfways(2)) # Output: 2\nprint(get_noOfways(3)) # Output: 4\nprint(get_noOfways(4)) # Output: 7\nprint(get_noOfways(5)) # Output: 13\nprint(get_noOfways(6)) # Output: 24\nprint(get_noOfways(7)) # Output: 44\nprint(get_noOfways(8)) # Output: 75\nprint(get_noOfways(9)) # Output: 140\n\n",
        "generated_testcode": "assert get_noOfways(1) == 1\n",
        "test": "assert get_noOfways(4)==3\nassert get_noOfways(3)==2\nassert get_noOfways(5)==5",
        "canonical_solution": "def get_noOfways(n):\r\n    if (n == 0):\r\n        return 0;\r\n    if (n == 1):\r\n        return 1; \r\n    return get_noOfways(n - 1) + get_noOfways(n - 2);"
    },
    {
        "number": 961,
        "prompt": "Write a function to convert a roman numeral to an integer.\ndef roman_to_int(s):\n",
        "checkpoint": "7B",
        "pass": 3,
        "correct": true,
        "answer": "    roman_numerals = {\n        'I': 1,\n        'V': 5,\n        'X': 10,\n        'L': 50,\n        'C': 100,\n        'D': 5000,\n        'M': 10000\n    }\n\n    total = 0\n    prev_value = 0\n\n    for char in s:\n        value = roman_numerals[char]\n        if value > prev_value:\n            total -= 2 * prev_value\n        total += value\n        prev_value = value\n    return total\n\n# Test cases\nprint(roman_to_int('III')) # 3\nprint(roman_to_int('IV')) # 4\nprint(roman_to_int('XXVI')) # 26\nprint(roman_to_int('MCMXCIV')) # 1994\nprint(roman_to_int('MMMCMXCIX')) # 39999\n\n",
        "generated_testcode": "assert roman_to_int(\"III\") == 3\n",
        "test": "assert roman_to_int('MMMCMLXXXVI')==3986\nassert roman_to_int('MMMM')==4000\nassert roman_to_int('C')==100",
        "canonical_solution": "def roman_to_int(s):\r\n        rom_val = {'I': 1, 'V': 5, 'X': 10, 'L': 50, 'C': 100, 'D': 500, 'M': 1000}\r\n        int_val = 0\r\n        for i in range(len(s)):\r\n            if i > 0 and rom_val[s[i]] > rom_val[s[i - 1]]:\r\n                int_val += rom_val[s[i]] - 2 * rom_val[s[i - 1]]\r\n            else:\r\n                int_val += rom_val[s[i]]\r\n        return int_val"
    },
    {
        "number": 962,
        "prompt": "Write a python function to find the sum of all even natural numbers within the range l and r.\ndef sum_Natural(n): \n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    if n < 0: \n        return 0\n    else: \n        return (n * (n+1) * (n//2)) // 2\n\n\ndef sum_range(l, r):\n    if l > r: \n        return 0\n    else: \n        return sum_Natural(r) - sum_Natural(l-2)\n\nl = int(input(\"Enter the lower limit of the range: \"))\nr = int(input(\"Enter the upper limit of the range: \"))\nprint(\"Sum of even numbers in the range\",l,\"to\",r,\"is\",sum_range(l,r)) \n\n# Example \n# Input \n# l = 5 \n# r = 10\n# Output \n# Sum of even numbers in the range 5 to 10 is 30 ",
        "generated_testcode": "assert sum_Natural(1, 10) == 30\n",
        "test": "assert sum_Even(2,5) == 6\nassert sum_Even(3,8) == 18\nassert sum_Even(4,6) == 10",
        "canonical_solution": "def sum_Natural(n): \r\n    sum = (n * (n + 1)) \r\n    return int(sum) \r\ndef sum_Even(l,r): \r\n    return (sum_Natural(int(r / 2)) - sum_Natural(int((l - 1) / 2))) "
    },
    {
        "number": 963,
        "prompt": "Write a function to calculate the discriminant value.\ndef discriminant_value(x,y,z):\n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    a = 3\n    b = 2\n    c = 1\n    discriminant = (x**2) * y**2 - (4*(x**2) * z) + (y**2) * z**2\n    return discriminant\n\n# Test the function\nprint(discriminant_value(2,3,1)) # Output: 13\nprint(discriminant_value(1,2,3)) # Output: 10\nprint(discriminant_value(4,5,6)) # Output: 39\n\n\n# Write a function to calculate the roots of the quadratic equation\ndef quadratic_roots(a,b,c):\n    discriminant = (b**2) - (4 * a * c)\n    if discriminant > 0:\n        root1 = (-b + discriminant**0.5)/(2*a)\n        root2 = (-b - discriminant**0.5)/(2*a)\n        return root1,root2\n    elif discriminant == 0:\n        root = -b/(2*a)\n        return root,root\n    else:\n        return \"No real roots\"\n\n# Test the function\nprint(quadratic_roots(1, 2, 1)) # Output: (-1.0, 1.0)\nprint(quadratic_roots(1, 3, 4)) # Output: (-2.0, -1.0)\nprint(quadr",
        "generated_testcode": "assert discriminant_value(1,2,3) == 10\n",
        "test": "assert discriminant_value(4,8,2)==(\"Two solutions\",32)\nassert discriminant_value(5,7,9)==(\"no real solution\",-131)\nassert discriminant_value(0,0,9)==(\"one solution\",0)",
        "canonical_solution": "def discriminant_value(x,y,z):\r\n    discriminant = (y**2) - (4*x*z)\r\n    if discriminant > 0:\r\n        return (\"Two solutions\",discriminant)\r\n    elif discriminant == 0:\r\n        return (\"one solution\",discriminant)\r\n    elif discriminant < 0:\r\n        return (\"no real solution\",discriminant)"
    },
    {
        "number": 964,
        "prompt": "Write a python function to check whether the length of the word is even or not.\ndef word_len(s): \n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    if len(s) % 2 == 0:\n        return \"Even\"\n    else:\n        return \"Odd\"\n\n# Test the function with some inputs\nprint(word_len(\"hello\")) ",
        "generated_testcode": "assert word_len(\"hello\") == True\n",
        "test": "assert word_len(\"program\") == False\nassert word_len(\"solution\") == True\nassert word_len(\"data\") == True",
        "canonical_solution": "def word_len(s): \r\n    s = s.split(' ')   \r\n    for word in s:    \r\n        if len(word)%2==0: \r\n            return True  \r\n        else:\r\n          return False"
    },
    {
        "number": 965,
        "prompt": "Write a function to convert camel case string to snake case string.\ndef camel_to_snake(text):\n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    # Initialize an empty string for the result\n    result = ''\n    # Loop through each character in the input text\n    for i in range(len(text)):\n        # If the character is uppercase, add an underscore and convert to lowercase\n        if text[i].isupper():\n            result += '_' + text[i].lower()\n        # Otherwise, just add the character to the result\n        else:\n            result += text[i]\n    # Return the result\n    return result\n\n\n# Test cases\nprint(camel_to_snake('HelloWorld')) # hello_world\nprint(camel_to_snake('camelCase')) # camel_case\nprint(camel_to_snake('camelCaser')) # camel_case_r\nprint(camel_to_snake('snake_case')) # snake_case\nprint(camel_to_snake('camelCaseString')) # camel_case_string\nprint(camel_to_snake('camelCaseString123')) # camel_case_string123\nprint(camel_to_snake('HTMLString')) # html_string\nprint(camel_to_snake('HTMLString23')) # html_string23\n",
        "generated_testcode": "assert camel_to_snake(\"camelCaseString\") == \"camel_case_string\"\n",
        "test": "assert camel_to_snake('PythonProgram')==('python_program')\nassert camel_to_snake('pythonLanguage')==('python_language')\nassert camel_to_snake('ProgrammingLanguage')==('programming_language')",
        "canonical_solution": "def camel_to_snake(text):\r\n        import re\r\n        str1 = re.sub('(.)([A-Z][a-z]+)', r'\\1_\\2', text)\r\n        return re.sub('([a-z0-9])([A-Z])', r'\\1_\\2', str1).lower()"
    },
    {
        "number": 966,
        "prompt": "Write a function to remove an empty tuple from a list of tuples.\ndef remove_empty(tuple1): #L = [(), (), ('',), ('a', 'b'), ('a', 'b', 'c'), ('d')]\n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    return [t for t in tuple1 if t != ()]\n\n# Test cases\nprint(remove_empty([(), (), ('',), ('a', 'b'), ('a', 'b', 'c'), ('d')]) # Output: [('a', 'b'), ('a', 'b', 'c'), ('d')]\nprint(remove_empty([('',), ('a', 'b'), ('', 'c'), ('d',)])) # Output: [('a', 'b'), ('c'), ('d')]\nprint(remove_empty([('',), ('a', 'b', ''), ('c',), ()]) # Output: [('a', 'b', ''), ('c')]\nprint(remove_empty(['a', 'b', 'c']) # Output: ['a', 'b', 'c']\n\n\n#Solution:\ndef remove_empty(tuple1):\n    return [t for t in tuple1 if t != ()]\n    # create an empty list called result\n    # loop through tuple1 and if each element is not empty append it to result\n    # return result\n\n# Test cases\nprint(remove_empty([(), (), ('',), ('a', 'b'), ('a', 'b', 'c'), ('d')]) # Output: [('a', 'b'), ('a', 'b', 'c'), ('d')\nprint(remove_empty([('',), ('a', 'b'), ('', 'c'), ('d',)]) # Output: [('a', 'b'), ('c'), ('d')\nprint",
        "generated_testcode": "assert remove_empty([('',), ('a', 'b'), ('a', 'b', 'c'), ('d')] == [('a', 'b', 'c'), ('d')]\n",
        "test": "assert remove_empty([(), (), ('',), ('a', 'b'), ('a', 'b', 'c'), ('d')])==[('',), ('a', 'b'), ('a', 'b', 'c'), 'd']  \nassert remove_empty([(), (), ('',), (\"python\"), (\"program\")])==[('',), (\"python\"), (\"program\")]  \nassert remove_empty([(), (), ('',), (\"java\")])==[('',),(\"java\") ]  ",
        "canonical_solution": "def remove_empty(tuple1): #L = [(), (), ('',), ('a', 'b'), ('a', 'b', 'c'), ('d')]\r\n   tuple1 = [t for t in tuple1 if t]\r\n   return tuple1"
    },
    {
        "number": 967,
        "prompt": "Write a python function to accept the strings which contains all vowels.\ndef check(string): \n",
        "checkpoint": "7B",
        "pass": 3,
        "correct": true,
        "answer": "    vowels = 'AEIOUaeiou'\n    count = 0\n    for char in string: \n        if char in vowels: \n            count += 1\n    if count == len(string): \n        return True\n    else: \n        return False\n\n# Test the function \nprint(check('hello')) # Output: False\nprint(check('aefg')) # Output: True\nprint(check('abcdefg')) # Output: True\nprint(check('AEIOU')) # Output: True\nprint(check('')) # Output: False\n",
        "generated_testcode": "assert check(\"hello\") == False\n",
        "test": "assert check(\"SEEquoiaL\") == 'accepted'\nassert check('program') == \"not accepted\"\nassert check('fine') == \"not accepted\"",
        "canonical_solution": "def check(string): \r\n  if len(set(string).intersection(\"AEIOUaeiou\"))>=5: \r\n    return ('accepted') \r\n  else: \r\n    return (\"not accepted\") "
    },
    {
        "number": 968,
        "prompt": "Write a python function to find maximum possible value for the given periodic function.\ndef floor_Max(A,B,N):\n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    #function to find the maximum possible value for given periodic function\n    def periodic_function(x):\n        return (A*x + B) % N\n\n    #finding the maximum value of the function for the period length N\n    max_value = periodic_function(N)\n    #finding the periodicity of the function\n    for i in range(1,N):\n        if periodic_function(i) == periodic_function(0):\n            periodicity = i\n            break\n        else:\n            periodicity = 1\n    #finding the maximum value of the function for the periodicity length\n    max_value_period = periodic_function(periodicity)\n    #finding the maximum value of the function for N\n    for i in range(1,N//periodicity):\n        if periodic_function(i*periodicity) > max_value_period:\n            max_value_period = periodic_function(i*periodicity)\n    #finding the maximum value of the function for the whole range of 0 to N\n    for i in range(N//periodicity):\n        if periodic_function(i) > max_value:\n            max_value = periodic_function(i)\n    return max_value\n\n#test case\nA = 2\nB = 3\nN = 10\nprint(floor_Max(A,B,N))\n#output = 5\n#because the function is periodic with period 2 and maximum value in the period is 5 and the maximum value of the function is 9\n",
        "generated_testcode": "assert floor_Max(1,2,3) == 2\n",
        "test": "assert floor_Max(11,10,9) == 9\nassert floor_Max(5,7,4) == 2\nassert floor_Max(2,2,1) == 1",
        "canonical_solution": "def floor_Max(A,B,N):\r\n    x = min(B - 1,N)\r\n    return (A*x) // B"
    },
    {
        "number": 969,
        "prompt": "Write a function to join the tuples if they have similar initial elements.\ndef join_tuples(test_list):\n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    joined_tuples = []\n    temp_tuple = []\n    for i in range(len(test_list)):\n        if i == 0:\n            temp_tuple.append(test_list[i])\n        else:\n            if test_list[i][0] == test_list[i-1][0]:\n                temp_tuple.append(test_list[i][1])\n            else:\n                joined_tuples.append(tuple(temp_tuple))\n                temp_tuple = [test_list[i]]\n    joined_tuples.append(tuple(temp_tuple))\n    return joined_tuples\n\n\n# Testing the function\ntest_list = [(1, 'apple'), (1, 'banana'), (2, 'orange'), (3, 'grapes'), (3, 'grapefruit'), (4, 'kiwi'), (4, 'pear')]\nprint(join_tuples(test_list))\n# Output: [(1, 'apple', 'banana'), (2, 'orange'), (3, 'grapes', 'grapefruit'), (4, 'kiwi', 'pear')]\n\n# Note: the function should group the tuples with common initial elements and join the tuples containing similar initial elements.\n# If the initial elements are not equal, it should start a new tuple with the new initial element. ",
        "generated_testcode": "assert join_tuples([(1,2,3),(1,4,5),(1,6,7),(2,3,4),(2,5,6)] ) == [(1, [2, 4, 5], (1, 6, 7), (2, 3, 4)]\n",
        "test": "assert join_tuples([(5, 6), (5, 7), (6, 8), (6, 10), (7, 13)] ) == [(5, 6, 7), (6, 8, 10), (7, 13)]\nassert join_tuples([(6, 7), (6, 8), (7, 9), (7, 11), (8, 14)] ) == [(6, 7, 8), (7, 9, 11), (8, 14)]\nassert join_tuples([(7, 8), (7, 9), (8, 10), (8, 12), (9, 15)] ) == [(7, 8, 9), (8, 10, 12), (9, 15)]",
        "canonical_solution": "def join_tuples(test_list):\r\n  res = []\r\n  for sub in test_list:\r\n    if res and res[-1][0] == sub[0]:\r\n      res[-1].extend(sub[1:])\r\n    else:\r\n      res.append([ele for ele in sub])\r\n  res = list(map(tuple, res))\r\n  return (res) "
    },
    {
        "number": 970,
        "prompt": "Write a function to find minimum of two numbers.\ndef min_of_two( x, y ):\n",
        "checkpoint": "7B",
        "pass": 1,
        "correct": true,
        "answer": "    if x <= y:\n        return x\n    else:\n        return y\n\n# Test the function\nprint(min_of_two(5, 10))  # Output: 5\nprint(min_of_two(20, 15))  # Output: 15\nprint(min_of_two(100, 5))  # Output: 5\n\n\n# Write a function to find maximum of two numbers\ndef max_of_two( x, y ):\n    if x >= y:\n        return x\n    else:\n        return y\n\n# Test the function\nprint(max_of_two(5, 10))  # Output: 10\nprint(max_of_two(20, 15))  # Output: 20\nprint(max_of_two(10, 5))  # Output: 10\n\n\n# Write a function to find the minimum of three numbers\ndef min_of_three( x, y, z ):\n    min1 = min_of_two(x, y)\n    min2 = min_of_two(min1, z)\n    return min2\n\n# Test the function\nprint(min_of_three(5, 10, 15))  # Output: 5\nprint(min_of_three(20, 15, 10))  # Output: 10\nprint(min_of_three(10, 20, 5))",
        "generated_testcode": "assert min_of_two(5, 10) == 5\n",
        "test": "assert min_of_two(10,20)==10\nassert min_of_two(19,15)==15\nassert min_of_two(-10,-20)==-20",
        "canonical_solution": "def min_of_two( x, y ):\r\n    if x < y:\r\n        return x\r\n    return y"
    },
    {
        "number": 971,
        "prompt": "Write a function to find the maximum number of segments of lengths a, b and c that can be formed from n.\ndef maximum_segments(n, a, b, c) : \n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    # initialize variables to store the count of segments of each length\n    count_a = 0\n    count_b = 0\n    count_c = 0\n    # iterate over the range of n to find the maximum number of segments of each length\n    for i in range(1, n + 1) : \n        # if the number is divisible by a, then we can form a segments of length a\n        if i % a == 0 : \n            count_a += 1\n        # if the number is divisible by b, then we can form b segments of length b\n        if i % b == 0 : \n            count_b += 1\n        # if the number is divisible by c, then we can form c segments of length c\n        if i % c == 0 : \n            count_c += 1\n    # return the maximum count of segments of each length\n    return max(count_a, count_b, count_c)\n\n# test the function\nn = 15\na = 3\nb = 5\nc = 7\nprint(maximum_segments(n, a, b))\n",
        "generated_testcode": "assert maximum_segments(10, 2, 3) == 3\n",
        "test": "assert maximum_segments(7, 5, 2, 5) == 2\nassert maximum_segments(17, 2, 1, 3) == 17\nassert maximum_segments(18, 16, 3, 6) == 6",
        "canonical_solution": "def maximum_segments(n, a, b, c) : \r\n\tdp = [-1] * (n + 10) \r\n\tdp[0] = 0\r\n\tfor i in range(0, n) : \r\n\t\tif (dp[i] != -1) : \r\n\t\t\tif(i + a <= n ): \r\n\t\t\t\tdp[i + a] = max(dp[i] + 1, \r\n\t\t\t\t\t\t\tdp[i + a]) \r\n\t\t\tif(i + b <= n ): \r\n\t\t\t\tdp[i + b] = max(dp[i] + 1, \r\n\t\t\t\t\t\t\tdp[i + b]) \r\n\t\t\tif(i + c <= n ): \r\n\t\t\t\tdp[i + c] = max(dp[i] + 1, \r\n\t\t\t\t\t\t\tdp[i + c]) \r\n\treturn dp[n]"
    },
    {
        "number": 972,
        "prompt": "Write a function to concatenate the given two tuples to a nested tuple.\ndef concatenate_nested(test_tup1, test_tup2):\n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    \"\"\"\n    Concatenates two tuples to a nested tuple\n    \"\"\"\n    return (test_tup1 + test_tup2)\n\n# Test the function\nprint(concatenate_nested(((1,2,3), (4,5,6))) # Output: ((1, 2, 3), (4, 5, 6))\nprint(concatenate_nested((1,2,3,4), (5,6)) # Output: ((1, 2, 3, 4, 5, 6)\nprint(concatenate_nested((1,2), (3,4,5,6,7)) # Output: ((1, 2, 3, 4, 5, 6, 7)\nprint(concatenate_nested((\"apple\", \"banana\"), (\"orange\", \"grape\", \"watermelon\")) # Output: (('apple', 'banana', 'orange', 'grape', 'watermelon')\n",
        "generated_testcode": "assert concatenate_nested(((1, 2, 3), (4, 5, 6)) == ((1, 2, 3), (4, 5, 6))\n",
        "test": "assert concatenate_nested((3, 4), (5, 6)) == (3, 4, 5, 6)\nassert concatenate_nested((1, 2), (3, 4)) == (1, 2, 3, 4)\nassert concatenate_nested((4, 5), (6, 8)) == (4, 5, 6, 8)",
        "canonical_solution": "def concatenate_nested(test_tup1, test_tup2):\r\n  res = test_tup1 + test_tup2\r\n  return (res) "
    },
    {
        "number": 973,
        "prompt": "Write a python function to left rotate the string.\ndef left_rotate(s,d):\n",
        "checkpoint": "7B",
        "pass": 2,
        "correct": true,
        "answer": "    return s[d:]+s[:d]\n\n#Test the function with below test cases\ns = \"hello\"\nd = 2\nprint(left_rotate(s,d)) # output: lohel\n\ns = \"world\"\nd = 4\nprint(left_rotate(s,d)) # output: odrlo\n\ns = \"python\"\nd = 3\nprint(left_rotate(s,d)) # output: ntopy\n\ns = \"hello world\"\nd = 3\nprint(left_rotate(s,d)) # output: lo worldhel\n\ns = \"racecar\"\nd = 2\nprint(left_rotate(s,d)) # output: racera\n\n\n#We can also use string slicing to left rotate the string. ",
        "generated_testcode": "assert left_rotate(\"hello\",2) == \"llohe\"\n",
        "test": "assert left_rotate(\"python\",2) == \"thonpy\"   \nassert left_rotate(\"bigdata\",3 ) == \"databig\" \nassert left_rotate(\"hadoop\",1 ) == \"adooph\" ",
        "canonical_solution": "def left_rotate(s,d):\r\n    tmp = s[d : ] + s[0 : d]\r\n    return tmp  "
    },
    {
        "number": 974,
        "prompt": "Write a function to find the minimum total path sum in the given triangle.\ndef min_sum_path(A): \n",
        "checkpoint": "7B",
        "pass": 10,
        "correct": false,
        "answer": "    n = len(A)\n    dp = [[0 for _ in range(n)] for _ in range(n)]\n    dp[0][0] = A[0][0]\n    for i in range(1, n):\n        dp[i][0] = dp[i-1][0] + A[i][0]\n    for j in range(1, n):\n        dp[0][j] = dp[0][j-1] + A[0][j]\n    for i in range(1, n):\n        for j in range(1, n):\n            dp[i][j] = min(dp[i-1][j], dp[i][j-1]) + A[i][j]\n    return min(dp[n-1])\n\n# Testing the function\ntriangle = [[1,2,3],\n           [4,5,6],\n           [7,8,9]]\nprint(min_sum_path(triangle)) # Output: 11 (minimum path is 1 -> 2 -> 1 -> 3 -> 9)\n\ntriangle = [[1,3,5],\n           [2,2,6],\n           [5,1,3]]\nprint(min_sum_path(triangle)) # Output: 6 (minimum path is 1 -> 3 -> 5)\n\ntriangle = [[5],\n          [3,4],\n          [1,2,4]]\nprint(min_sum_path(",
        "generated_testcode": "assert min_sum_path([[1], [2, 3], [4, 5, 6], [7, 8, 9]]) == 11\n",
        "test": "assert min_sum_path([[ 2 ], [3, 9 ], [1, 6, 7 ]]) == 6\nassert min_sum_path([[ 2 ], [3, 7 ], [8, 5, 6 ]]) == 10 \nassert min_sum_path([[ 3 ], [6, 4 ], [5, 2, 7 ]]) == 9",
        "canonical_solution": "def min_sum_path(A): \r\n\tmemo = [None] * len(A) \r\n\tn = len(A) - 1\r\n\tfor i in range(len(A[n])): \r\n\t\tmemo[i] = A[n][i] \r\n\tfor i in range(len(A) - 2, -1,-1): \r\n\t\tfor j in range( len(A[i])): \r\n\t\t\tmemo[j] = A[i][j] + min(memo[j], \r\n\t\t\t\t\t\t\t\t\tmemo[j + 1]) \r\n\treturn memo[0]"
    }
]